
hd44780_stdio_bind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00000a74  00000ae8  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d6  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b14  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000408  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000789  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000274  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000460  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.1488>:
  54:	4c 69 6e 65 31 0a 4c 69 6e 65 32 00                 Line1.Line2.

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e4 e7       	ldi	r30, 0x74	; 116
  74:	fa e0       	ldi	r31, 0x0A	; 10
  76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
  7c:	a0 36       	cpi	r26, 0x60	; 96
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a9 36       	cpi	r26, 0x69	; 105
  8e:	b1 07       	cpc	r27, r17
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  96:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <main>:
#include "hd44780.h"
#include "hd44780_hw.h"


int main()
{
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	2e 97       	sbiw	r28, 0x0e	; 14
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
    
    
    FILE lcd_stream = FDEV_SETUP_STREAM(lcd_putc_stream, NULL, _FDEV_SETUP_WRITE);    
  b2:	fe 01       	movw	r30, r28
  b4:	31 96       	adiw	r30, 0x01	; 1
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	df 01       	movw	r26, r30
  ba:	1d 92       	st	X+, r1
  bc:	8a 95       	dec	r24
  be:	e9 f7       	brne	.-6      	; 0xba <main+0x1c>
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8c 83       	std	Y+4, r24	; 0x04
  c4:	8e e4       	ldi	r24, 0x4E	; 78
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	9a 87       	std	Y+10, r25	; 0x0a
  ca:	89 87       	std	Y+9, r24	; 0x09
    
    stdout = &lcd_stream; //Binded to standard output
  cc:	f0 93 66 00 	sts	0x0066, r31
  d0:	e0 93 65 00 	sts	0x0065, r30

    lcd_init(LCD_DISP_ON); // init LCD
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_init>

    printf_P(PSTR("Line1\nLine2")); //using printf_P for print string in ROM
  da:	84 e5       	ldi	r24, 0x54	; 84
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9f 93       	push	r25
  e0:	8f 93       	push	r24
  e2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <printf_P>
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
    //fprintf(stdout,"Test");
    //printf("Line1\nLine2"); // print to line 1 and 2

    return 0;
    
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2e 96       	adiw	r28, 0x0e	; 14
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	f8 94       	cli
  f4:	de bf       	out	0x3e, r29	; 62
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	cd bf       	out	0x3d, r28	; 61
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <lcd_delay_ms>:

/*
** delay for a minimum of <ms> 
*/
void lcd_delay_ms(unsigned int ms)
{
 100:	20 ef       	ldi	r18, 0xF0	; 240
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	04 c0       	rjmp	.+8      	; 0x10e <lcd_delay_ms+0xe>
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_delay_ms+0x8>
        ** accurate and not so much compiler dependent
        ** as self made code
        */
        while(ms){
                _delay_loop_2(240.0);
                ms--;
 10c:	01 97       	sbiw	r24, 0x01	; 1
{
        /* we use a calibrated macro. This is more
        ** accurate and not so much compiler dependent
        ** as self made code
        */
        while(ms){
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	d1 f7       	brne	.-12     	; 0x106 <lcd_delay_ms+0x6>
                _delay_loop_2(240.0);
                ms--;
        }
}
 112:	08 95       	ret

00000114 <lcd_out_high>:

/*
** output high nibble
*/
static void lcd_out_high(u08 d)
{    
 114:	87 ff       	sbrs	r24, 7
 116:	02 c0       	rjmp	.+4      	; 0x11c <lcd_out_high+0x8>
 118:	c6 9a       	sbi	0x18, 6	; 24
 11a:	01 c0       	rjmp	.+2      	; 0x11e <lcd_out_high+0xa>
    if (d&0x80)  sbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
        else cbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
 11c:	c6 98       	cbi	0x18, 6	; 24
    if (d&0x40)  sbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
 11e:	86 ff       	sbrs	r24, 6
 120:	02 c0       	rjmp	.+4      	; 0x126 <lcd_out_high+0x12>
 122:	c5 9a       	sbi	0x18, 5	; 24
 124:	01 c0       	rjmp	.+2      	; 0x128 <lcd_out_high+0x14>
        else cbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
 126:	c5 98       	cbi	0x18, 5	; 24
    if (d&0x20)  sbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
 128:	85 ff       	sbrs	r24, 5
 12a:	02 c0       	rjmp	.+4      	; 0x130 <lcd_out_high+0x1c>
 12c:	c4 9a       	sbi	0x18, 4	; 24
 12e:	01 c0       	rjmp	.+2      	; 0x132 <lcd_out_high+0x1e>
        else cbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
 130:	c4 98       	cbi	0x18, 4	; 24
    if (d&0x10)  sbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4);
 132:	84 ff       	sbrs	r24, 4
 134:	02 c0       	rjmp	.+4      	; 0x13a <lcd_out_high+0x26>
 136:	c3 9a       	sbi	0x18, 3	; 24
 138:	08 95       	ret
        else cbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4); 
 13a:	c3 98       	cbi	0x18, 3	; 24
 13c:	08 95       	ret

0000013e <lcd_write>:

/*
** write data to lcd
*/
static void lcd_write(u08 data, u08 rs)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	18 2f       	mov	r17, r24
 144:	06 2f       	mov	r16, r22
    /* configure data pins as output */
    lcd_data_port_out();
 146:	be 9a       	sbi	0x17, 6	; 23
 148:	bd 9a       	sbi	0x17, 5	; 23
 14a:	bc 9a       	sbi	0x17, 4	; 23
 14c:	bb 9a       	sbi	0x17, 3	; 23

    /* output high nibble first */

    lcd_out_high(data);
 14e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_out_high>

    if (rs)
 152:	00 23       	and	r16, r16
 154:	11 f0       	breq	.+4      	; 0x15a <lcd_write+0x1c>
        lcd_data_mode();    /* RS=1: write data        */
 156:	c0 9a       	sbi	0x18, 0	; 24
 158:	01 c0       	rjmp	.+2      	; 0x15c <lcd_write+0x1e>
    else
        lcd_cmd_mode();     /* RS=0: write instruction */
 15a:	c0 98       	cbi	0x18, 0	; 24
    lcd_wr_mode();          /* RW=0  write mode        */
 15c:	c1 98       	cbi	0x18, 1	; 24
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 15e:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_write+0x24>
    _delay_us(2);
    lcd_e_low();
 166:	c2 98       	cbi	0x18, 2	; 24
/*
** output low nibble
*/
static void lcd_out_low(u08 d)
{   
    if (d&0x08)  sbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
 168:	81 2f       	mov	r24, r17
 16a:	13 ff       	sbrs	r17, 3
 16c:	02 c0       	rjmp	.+4      	; 0x172 <lcd_write+0x34>
 16e:	c6 9a       	sbi	0x18, 6	; 24
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_write+0x36>
        else cbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
 172:	c6 98       	cbi	0x18, 6	; 24
    if (d&0x04)  sbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
 174:	82 ff       	sbrs	r24, 2
 176:	02 c0       	rjmp	.+4      	; 0x17c <lcd_write+0x3e>
 178:	c5 9a       	sbi	0x18, 5	; 24
 17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_write+0x40>
        else cbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
 17c:	c5 98       	cbi	0x18, 5	; 24
    if (d&0x02)  sbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
 17e:	81 ff       	sbrs	r24, 1
 180:	02 c0       	rjmp	.+4      	; 0x186 <lcd_write+0x48>
 182:	c4 9a       	sbi	0x18, 4	; 24
 184:	01 c0       	rjmp	.+2      	; 0x188 <lcd_write+0x4a>
        else cbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
 186:	c4 98       	cbi	0x18, 4	; 24
    if (d&0x01)  sbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4);
 188:	80 ff       	sbrs	r24, 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_write+0x52>
 18c:	c3 9a       	sbi	0x18, 3	; 24
 18e:	01 c0       	rjmp	.+2      	; 0x192 <lcd_write+0x54>
        else cbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4); 
 190:	c3 98       	cbi	0x18, 3	; 24
    lcd_e_toggle();

    /* output low nibble */
    lcd_out_low(data);

    if (rs)
 192:	00 23       	and	r16, r16
 194:	11 f0       	breq	.+4      	; 0x19a <lcd_write+0x5c>
        lcd_data_mode();    /* RS=1: write data       */
 196:	c0 9a       	sbi	0x18, 0	; 24
 198:	01 c0       	rjmp	.+2      	; 0x19c <lcd_write+0x5e>
    else
        lcd_cmd_mode();     /* RS=0: write instruction*/
 19a:	c0 98       	cbi	0x18, 0	; 24
    lcd_wr_mode();          /* RW=0  write mode       */
 19c:	c1 98       	cbi	0x18, 1	; 24
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 19e:	c2 9a       	sbi	0x18, 2	; 24
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write+0x64>
    _delay_us(2);
    lcd_e_low();
 1a6:	c2 98       	cbi	0x18, 2	; 24
    lcd_wr_mode();          /* RW=0  write mode       */

    lcd_e_toggle();

    /* all data pins high (inactive) */
    lcd_data_port_in();
 1a8:	be 98       	cbi	0x17, 6	; 23
 1aa:	bd 98       	cbi	0x17, 5	; 23
 1ac:	bc 98       	cbi	0x17, 4	; 23
 1ae:	bb 98       	cbi	0x17, 3	; 23
}
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <lcd_waitbusy>:

/*
** loops while lcd is busy, reads address counter
*/
static unsigned char lcd_waitbusy(void)
{
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
static u08 lcd_read(u08 rs)
{
    register u08 data;

    /* configure data pins as input */
    lcd_data_port_in();
 1b8:	be 98       	cbi	0x17, 6	; 23
 1ba:	bd 98       	cbi	0x17, 5	; 23
 1bc:	bc 98       	cbi	0x17, 4	; 23
 1be:	bb 98       	cbi	0x17, 3	; 23

    if (rs)
        lcd_data_mode();    /* RS=1: read data      */
    else
        lcd_cmd_mode();     /* RS=0: read busy flag */
 1c0:	c0 98       	cbi	0x18, 0	; 24
    lcd_rd_mode();          /* RW=1  read mode      */
 1c2:	c1 9a       	sbi	0x18, 1	; 24


    lcd_e_high();
 1c4:	c2 9a       	sbi	0x18, 2	; 24
 1c6:	8f 2f       	mov	r24, r31
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_waitbusy+0x12>
    _delay_us(2);

    /* read high nibble first */
    data  = bit_is_set(LCD_DATA_PINR_D7, LCD_DATA_PIN_D7) ? 0x80 : 0;
 1cc:	b6 99       	sbic	0x16, 6	; 22
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <lcd_waitbusy+0x1e>
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <lcd_waitbusy+0x20>
 1d4:	e0 e8       	ldi	r30, 0x80	; 128
    data |= bit_is_set(LCD_DATA_PINR_D6, LCD_DATA_PIN_D6) ? 0x40 : 0;
 1d6:	b5 99       	sbic	0x16, 5	; 22
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <lcd_waitbusy+0x28>
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <lcd_waitbusy+0x2a>
 1de:	70 e4       	ldi	r23, 0x40	; 64
    data |= bit_is_set(LCD_DATA_PINR_D5, LCD_DATA_PIN_D5) ? 0x20 : 0;
 1e0:	b4 99       	sbic	0x16, 4	; 22
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <lcd_waitbusy+0x32>
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <lcd_waitbusy+0x34>
 1e8:	60 e2       	ldi	r22, 0x20	; 32
    data |= bit_is_set(LCD_DATA_PINR_D4, LCD_DATA_PIN_D4) ? 0x10 : 0;
 1ea:	b3 99       	sbic	0x16, 3	; 22
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd_waitbusy+0x3c>
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd_waitbusy+0x3e>
 1f2:	50 e1       	ldi	r21, 0x10	; 16

    /* Enable low*/
    lcd_e_low();
 1f4:	c2 98       	cbi	0x18, 2	; 24
 1f6:	8f 2f       	mov	r24, r31
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_waitbusy+0x42>
    _delay_us(2);

    lcd_e_high();
 1fc:	c2 9a       	sbi	0x18, 2	; 24
 1fe:	8f 2f       	mov	r24, r31
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_waitbusy+0x4a>
    _delay_us(2);

    /* read low nibble */
    data |=bit_is_set(LCD_DATA_PINR_D7, LCD_DATA_PIN_D7) ? 0x08 : 0;
 204:	b6 99       	sbic	0x16, 6	; 22
 206:	02 c0       	rjmp	.+4      	; 0x20c <lcd_waitbusy+0x56>
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	01 c0       	rjmp	.+2      	; 0x20e <lcd_waitbusy+0x58>
 20c:	48 e0       	ldi	r20, 0x08	; 8
    data |=bit_is_set(LCD_DATA_PINR_D6, LCD_DATA_PIN_D6) ? 0x04 : 0;
 20e:	b5 99       	sbic	0x16, 5	; 22
 210:	02 c0       	rjmp	.+4      	; 0x216 <lcd_waitbusy+0x60>
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_waitbusy+0x62>
 216:	34 e0       	ldi	r19, 0x04	; 4
    data |=bit_is_set(LCD_DATA_PINR_D5, LCD_DATA_PIN_D5) ? 0x02 : 0;
 218:	b4 99       	sbic	0x16, 4	; 22
 21a:	02 c0       	rjmp	.+4      	; 0x220 <lcd_waitbusy+0x6a>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	01 c0       	rjmp	.+2      	; 0x222 <lcd_waitbusy+0x6c>
 220:	22 e0       	ldi	r18, 0x02	; 2
    data |=bit_is_set(LCD_DATA_PINR_D4, LCD_DATA_PIN_D4) ? 0x01 : 0;
 222:	86 b3       	in	r24, 0x16	; 22
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a3 e0       	ldi	r26, 0x03	; 3
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	aa 95       	dec	r26
 22e:	e1 f7       	brne	.-8      	; 0x228 <lcd_waitbusy+0x72>
 230:	81 70       	andi	r24, 0x01	; 1
 232:	8e 2b       	or	r24, r30
 234:	87 2b       	or	r24, r23
 236:	86 2b       	or	r24, r22
 238:	85 2b       	or	r24, r21
 23a:	84 2b       	or	r24, r20
 23c:	83 2b       	or	r24, r19
 23e:	82 2b       	or	r24, r18

    lcd_e_low();
 240:	c2 98       	cbi	0x18, 2	; 24
*/
static unsigned char lcd_waitbusy(void)
{
    register unsigned char c;

    while ((c = lcd_read(0)) & (1 << LCD_BUSY)) ; /* polling */
 242:	87 fd       	sbrc	r24, 7
 244:	b9 cf       	rjmp	.-142    	; 0x1b8 <lcd_waitbusy+0x2>

    return (c); /* return address counter=position */
}
 246:	08 95       	ret

00000248 <lcd_command>:
/*
** send command <cmd> to LCD
*/
void lcd_command(u08 cmd)

{
 248:	1f 93       	push	r17
 24a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 24c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_waitbusy>
    lcd_write(cmd, 0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	81 2f       	mov	r24, r17
 254:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write>
}
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <lcd_gotoxy>:

/*
** goto position (x,y)
*/
void lcd_gotoxy(u08 x, u08 y)
{
 25c:	66 23       	and	r22, r22
 25e:	11 f4       	brne	.+4      	; 0x264 <lcd_gotoxy+0x8>
    lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
#endif

#if LCD_LINES==2
    if (y == 0)
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
 260:	80 58       	subi	r24, 0x80	; 128
 262:	01 c0       	rjmp	.+2      	; 0x266 <lcd_gotoxy+0xa>
    else
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE2 + x);
 264:	80 54       	subi	r24, 0x40	; 64
 266:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
 26a:	08 95       	ret

0000026c <lcd_clrscr>:

/*
** clear lcd and set cursor to home position
*/
void lcd_clrscr(void)
{
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(1 << LCD_CLR);
}
 272:	08 95       	ret

00000274 <lcd_home>:

/*
** set cursor to home position
*/
void lcd_home(void)
{
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(1 << LCD_HOME);
}
 27a:	08 95       	ret

0000027c <lcd_putc>:

/*
** print character at current cursor position
*/
unsigned char lcd_putc(char c)
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	08 2f       	mov	r16, r24
    static unsigned char ret_val;
    ret_val=lcd_waitbusy(); /* read busy-flag and address counter */
 282:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_waitbusy>
 286:	18 2f       	mov	r17, r24
 288:	80 93 62 00 	sts	0x0062, r24
    lcd_write((unsigned char)c, 1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	80 2f       	mov	r24, r16
 290:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write>
    return ret_val;
}
 294:	81 2f       	mov	r24, r17
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <lcd_putc_stream>:
/*
** binding function of lcd_put_c to be used with stdio.h functions 
** such as fprintf or printf
*/
int lcd_putc_stream(unsigned char c, FILE *unused)
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	08 2f       	mov	r16, r24
        lcd_clrscr();
    }
#endif

#if LCD_LINES == 2
    if((address_counter < (LCD_START_LINE1+LCD_CHARS)) && \
 2a2:	10 91 61 00 	lds	r17, 0x0061
 2a6:	10 31       	cpi	r17, 0x10	; 16
 2a8:	68 f4       	brcc	.+26     	; 0x2c4 <lcd_putc_stream+0x28>
 2aa:	80 91 60 00 	lds	r24, 0x0060
 2ae:	88 23       	and	r24, r24
 2b0:	b1 f0       	breq	.+44     	; 0x2de <lcd_putc_stream+0x42>
 2b2:	0a 30       	cpi	r16, 0x0A	; 10
 2b4:	a1 f0       	breq	.+40     	; 0x2de <lcd_putc_stream+0x42>
        next_line && c!='\n')
    {
        next_line = false;
 2b6:	10 92 60 00 	sts	0x0060, r1
        lcd_gotoxy(0,1); /*goto next line */
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <lcd_putc_stream+0x42>
    }
    if((address_counter > (LCD_START_LINE1+LCD_CHARS)) && \
 2c4:	11 31       	cpi	r17, 0x11	; 17
 2c6:	58 f0       	brcs	.+22     	; 0x2de <lcd_putc_stream+0x42>
 2c8:	80 91 60 00 	lds	r24, 0x0060
 2cc:	88 23       	and	r24, r24
 2ce:	71 f0       	breq	.+28     	; 0x2ec <lcd_putc_stream+0x50>
 2d0:	0a 30       	cpi	r16, 0x0A	; 10
 2d2:	61 f0       	breq	.+24     	; 0x2ec <lcd_putc_stream+0x50>
        next_line && c!='\n')
    {
        next_line = false;
 2d4:	10 92 60 00 	sts	0x0060, r1
        lcd_clrscr(); /* clear lcd and goto home */
 2d8:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clrscr>
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <lcd_putc_stream+0x50>
    }
    if(address_counter == (LCD_START_LINE1+LCD_CHARS))
 2de:	10 31       	cpi	r17, 0x10	; 16
 2e0:	29 f4       	brne	.+10     	; 0x2ec <lcd_putc_stream+0x50>
    {
        lcd_gotoxy(0,1); /*goto next line */
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <lcd_putc_stream+0x58>
    }
    if(address_counter == (LCD_START_LINE2+LCD_CHARS))
 2ec:	10 35       	cpi	r17, 0x50	; 80
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <lcd_putc_stream+0x58>
    {
        lcd_clrscr(); /* clear lcd and goto home */
 2f0:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clrscr>
    if(address_counter == (LCD_START_LINE4+LCD_CHARS))
    {
        lcd_clrscr();
    }
#endif
    if(c=='\n')
 2f4:	0a 30       	cpi	r16, 0x0A	; 10
 2f6:	21 f4       	brne	.+8      	; 0x300 <lcd_putc_stream+0x64>
    {
        next_line=true;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 60 00 	sts	0x0060, r24
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <lcd_putc_stream+0x72>
    }
    else
    {
        if(c=='\0')
 300:	00 23       	and	r16, r16
 302:	29 f0       	breq	.+10     	; 0x30e <lcd_putc_stream+0x72>
            return 0;
        else
            address_counter=lcd_putc(c);
 304:	80 2f       	mov	r24, r16
 306:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_putc>
 30a:	80 93 61 00 	sts	0x0061, r24
    }
    
    return 0;
}
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <rolltext_lcd_p>:

void rolltext_lcd_p(prog_char *text, int shiftlen){
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	01 c0       	rjmp	.+2      	; 0x328 <rolltext_lcd_p+0x10>
        unsigned char i;
        unsigned char j;
        unsigned char textlen=0;
        while (pgm_read_byte(text+textlen)){
                textlen++;
 326:	8f 5f       	subi	r24, 0xFF	; 255

void rolltext_lcd_p(prog_char *text, int shiftlen){
        unsigned char i;
        unsigned char j;
        unsigned char textlen=0;
        while (pgm_read_byte(text+textlen)){
 328:	fe 01       	movw	r30, r28
 32a:	e8 0f       	add	r30, r24
 32c:	f1 1d       	adc	r31, r1
 32e:	e4 91       	lpm	r30, Z+
 330:	ee 23       	and	r30, r30
 332:	c9 f7       	brne	.-14     	; 0x326 <rolltext_lcd_p+0xe>
                textlen++;
        }
        if (shiftlen <= ROLLLEN){
 334:	60 31       	cpi	r22, 0x10	; 16
 336:	71 05       	cpc	r23, r1
 338:	64 f4       	brge	.+24     	; 0x352 <rolltext_lcd_p+0x3a>
        i=0;
                j=ROLLLEN-shiftlen + 1;
 33a:	00 e1       	ldi	r16, 0x10	; 16
 33c:	06 1b       	sub	r16, r22
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	04 c0       	rjmp	.+8      	; 0x34a <rolltext_lcd_p+0x32>
                while(i < j){
                        lcd_putc(' ');
 342:	80 e2       	ldi	r24, 0x20	; 32
 344:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_putc>
                        i++;
 348:	1f 5f       	subi	r17, 0xFF	; 255
                textlen++;
        }
        if (shiftlen <= ROLLLEN){
        i=0;
                j=ROLLLEN-shiftlen + 1;
                while(i < j){
 34a:	10 17       	cp	r17, r16
 34c:	d0 f3       	brcs	.-12     	; 0x342 <rolltext_lcd_p+0x2a>
 34e:	10 e0       	ldi	r17, 0x00	; 0
 350:	10 c0       	rjmp	.+32     	; 0x372 <rolltext_lcd_p+0x5a>
                        lcd_putc(' ');
                        i++;
                }
        j=0;
        }else{
                j=shiftlen-ROLLLEN;
 352:	16 2f       	mov	r17, r22
 354:	1f 50       	subi	r17, 0x0F	; 15
        i=0;
        }
        if (j <= textlen) {
 356:	81 17       	cp	r24, r17
 358:	70 f0       	brcs	.+28     	; 0x376 <rolltext_lcd_p+0x5e>
 35a:	00 e0       	ldi	r16, 0x00	; 0
 35c:	0a c0       	rjmp	.+20     	; 0x372 <rolltext_lcd_p+0x5a>
                while(i < ROLLLEN){
                        if (pgm_read_byte(text+j)=='\0') break;
 35e:	fe 01       	movw	r30, r28
 360:	e1 0f       	add	r30, r17
 362:	f1 1d       	adc	r31, r1
 364:	84 91       	lpm	r24, Z+
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <rolltext_lcd_p+0x5e>
                        lcd_putc(pgm_read_byte(text+j));
 36a:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_putc>
                        j++;
 36e:	1f 5f       	subi	r17, 0xFF	; 255
                        i++;
 370:	0f 5f       	subi	r16, 0xFF	; 255
        }else{
                j=shiftlen-ROLLLEN;
        i=0;
        }
        if (j <= textlen) {
                while(i < ROLLLEN){
 372:	0f 30       	cpi	r16, 0x0F	; 15
 374:	a0 f3       	brcs	.-24     	; 0x35e <rolltext_lcd_p+0x46>
                        lcd_putc(pgm_read_byte(text+j));
                        j++;
                        i++;
                }
        }
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <lcd_puts>:
/*
** print string on lcd  with no auto line feed
*/
void lcd_puts(const char *s)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	03 c0       	rjmp	.+6      	; 0x38e <lcd_puts+0xe>
    while (*s) {
        lcd_putc(*s);
 388:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_putc>
        s++;
 38c:	21 96       	adiw	r28, 0x01	; 1
/*
** print string on lcd  with no auto line feed
*/
void lcd_puts(const char *s)
{
    while (*s) {
 38e:	88 81       	ld	r24, Y
 390:	88 23       	and	r24, r24
 392:	d1 f7       	brne	.-12     	; 0x388 <lcd_puts+0x8>
        lcd_putc(*s);
        s++;
    }
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <lcd_puts_p>:

/* 
** print string from program memory on lcd
*/
void lcd_puts_p(const prog_char *progmem_s)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <lcd_puts_p+0xc>
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
        lcd_putc(c);
 3a2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_putc>
 3a6:	fe 01       	movw	r30, r28
*/
void lcd_puts_p(const prog_char *progmem_s)
{
    register char c;

    while ((c = pgm_read_byte(progmem_s++))) {
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	84 91       	lpm	r24, Z+
 3ac:	88 23       	and	r24, r24
 3ae:	c9 f7       	brne	.-14     	; 0x3a2 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <lcd_init>:
/* 
** initialize display and select type of cursor
** dispAttr: LCD_DISP_OFF, LCD_DISP_ON, LCD_DISP_ON_CURSOR, LCD_DISP_CURSOR_BLINK
*/
void lcd_init(u08 dispAttr)
{
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	08 2f       	mov	r16, r24
    /*------ Initialize lcd to 4 bit i/o mode -------*/

    lcd_data_port_out();    /* all data port bits as output */
 3c0:	be 9a       	sbi	0x17, 6	; 23
 3c2:	bd 9a       	sbi	0x17, 5	; 23
 3c4:	bc 9a       	sbi	0x17, 4	; 23
 3c6:	bb 9a       	sbi	0x17, 3	; 23
    sbi(LCD_RS_DDR, LCD_RS_PIN);    /* RS pin as output */
 3c8:	b8 9a       	sbi	0x17, 0	; 23
    sbi(LCD_RW_DDR, LCD_RW_PIN);    /* RW pin as output */
 3ca:	b9 9a       	sbi	0x17, 1	; 23
    sbi(LCD_E_DDR, LCD_E_PIN);  /* E  pin as output */
 3cc:	ba 9a       	sbi	0x17, 2	; 23
 3ce:	20 e1       	ldi	r18, 0x10	; 16
 3d0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3d2:	40 ef       	ldi	r20, 0xF0	; 240
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	c0 ef       	ldi	r28, 0xF0	; 240
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	ca 01       	movw	r24, r20
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_init+0x26>
        ** accurate and not so much compiler dependent
        ** as self made code
        */
        while(ms){
                _delay_loop_2(240.0);
                ms--;
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	30 40       	sbci	r19, 0x00	; 0
{
        /* we use a calibrated macro. This is more
        ** accurate and not so much compiler dependent
        ** as self made code
        */
        while(ms){
 3e4:	c1 f7       	brne	.-16     	; 0x3d6 <lcd_init+0x20>
    sbi(LCD_E_DDR, LCD_E_PIN);  /* E  pin as output */

    lcd_delay_ms(16);   /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
 3e6:	80 e3       	ldi	r24, 0x30	; 48
 3e8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_out_high>
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 3ec:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3ee:	12 e0       	ldi	r17, 0x02	; 2
 3f0:	81 2f       	mov	r24, r17
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <lcd_init+0x3c>
    _delay_us(2);
    lcd_e_low();
 3f6:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f8:	ce 01       	movw	r24, r28
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_init+0x44>
 3fe:	ce 01       	movw	r24, r28
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <lcd_init+0x4a>
 404:	ce 01       	movw	r24, r28
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <lcd_init+0x50>
 40a:	ce 01       	movw	r24, r28
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_init+0x56>
 410:	ce 01       	movw	r24, r28
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <lcd_init+0x5c>
 416:	ce 01       	movw	r24, r28
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_init+0x62>
    /* initial write to lcd is 8bit */
    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    lcd_e_toggle();
    lcd_delay_ms(6);    /* delay, busy flag can't be checked here */

    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
 41c:	80 e3       	ldi	r24, 0x30	; 48
 41e:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_out_high>
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 422:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 424:	81 2f       	mov	r24, r17
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_init+0x70>
    _delay_us(2);
    lcd_e_low();
 42a:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 42c:	ce 01       	movw	r24, r28
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_init+0x78>
 432:	ce 01       	movw	r24, r28
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <lcd_init+0x7e>
 438:	ce 01       	movw	r24, r28
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <lcd_init+0x84>
 43e:	ce 01       	movw	r24, r28
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <lcd_init+0x8a>
 444:	ce 01       	movw	r24, r28
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <lcd_init+0x90>
 44a:	ce 01       	movw	r24, r28
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <lcd_init+0x96>

    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    lcd_e_toggle();
    lcd_delay_ms(6);    /* delay, busy flag can't be checked here */

    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
 450:	80 e3       	ldi	r24, 0x30	; 48
 452:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_out_high>
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 456:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 458:	81 2f       	mov	r24, r17
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <lcd_init+0xa4>
    _delay_us(2);
    lcd_e_low();
 45e:	c2 98       	cbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 460:	ce 01       	movw	r24, r28
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <lcd_init+0xac>
 466:	ce 01       	movw	r24, r28
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <lcd_init+0xb2>
 46c:	ce 01       	movw	r24, r28
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <lcd_init+0xb8>
 472:	ce 01       	movw	r24, r28
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_init+0xbe>
 478:	ce 01       	movw	r24, r28
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_init+0xc4>
 47e:	ce 01       	movw	r24, r28
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <lcd_init+0xca>

    lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    lcd_e_toggle();
    lcd_delay_ms(6);    /* delay, busy flag can't be checked here */

    lcd_out_high(LCD_FUNCTION_4BIT_1LINE);  /* set IO mode to 4bit */
 484:	80 e2       	ldi	r24, 0x20	; 32
 486:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_out_high>
/*
** toggle Enable Pin
*/
static void toggle_e(void)
{
    lcd_e_high();
 48a:	c2 9a       	sbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 48c:	1a 95       	dec	r17
 48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_init+0xd6>
    _delay_us(2);
    lcd_e_low();
 490:	c2 98       	cbi	0x18, 2	; 24

    lcd_out_high(LCD_FUNCTION_4BIT_1LINE);  /* set IO mode to 4bit */
    lcd_e_toggle();

    /* from now the lcd only accepts 4 bit I/O, we can use lcd_command() */
    lcd_command(LCD_FUNCTION_DEFAULT);  /* function set: display lines  */
 492:	88 e2       	ldi	r24, 0x28	; 40
 494:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(LCD_DISP_OFF);  /* display off                  */
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_clrscr();       /* display clear                */
 49e:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);  /* set entry mode               */
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(dispAttr);  /* display/cursor control       */
 4a8:	80 2f       	mov	r24, r16
 4aa:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>

}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <printf_P>:
 4b8:	a0 e0       	ldi	r26, 0x00	; 0
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e2 e6       	ldi	r30, 0x62	; 98
 4be:	f2 e0       	ldi	r31, 0x02	; 2
 4c0:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__prologue_saves__+0x20>
 4c4:	fe 01       	movw	r30, r28
 4c6:	35 96       	adiw	r30, 0x05	; 5
 4c8:	61 91       	ld	r22, Z+
 4ca:	71 91       	ld	r23, Z+
 4cc:	a0 91 65 00 	lds	r26, 0x0065
 4d0:	b0 91 66 00 	lds	r27, 0x0066
 4d4:	13 96       	adiw	r26, 0x03	; 3
 4d6:	8c 91       	ld	r24, X
 4d8:	13 97       	sbiw	r26, 0x03	; 3
 4da:	88 60       	ori	r24, 0x08	; 8
 4dc:	13 96       	adiw	r26, 0x03	; 3
 4de:	8c 93       	st	X, r24
 4e0:	af 01       	movw	r20, r30
 4e2:	80 91 65 00 	lds	r24, 0x0065
 4e6:	90 91 66 00 	lds	r25, 0x0066
 4ea:	0e 94 82 02 	call	0x504	; 0x504 <vfprintf>
 4ee:	e0 91 65 00 	lds	r30, 0x0065
 4f2:	f0 91 66 00 	lds	r31, 0x0066
 4f6:	23 81       	ldd	r18, Z+3	; 0x03
 4f8:	27 7f       	andi	r18, 0xF7	; 247
 4fa:	23 83       	std	Z+3, r18	; 0x03
 4fc:	20 96       	adiw	r28, 0x00	; 0
 4fe:	e2 e0       	ldi	r30, 0x02	; 2
 500:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__epilogue_restores__+0x20>

00000504 <vfprintf>:
 504:	ab e0       	ldi	r26, 0x0B	; 11
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	e8 e8       	ldi	r30, 0x88	; 136
 50a:	f2 e0       	ldi	r31, 0x02	; 2
 50c:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__prologue_saves__>
 510:	3c 01       	movw	r6, r24
 512:	2b 01       	movw	r4, r22
 514:	5a 01       	movw	r10, r20
 516:	fc 01       	movw	r30, r24
 518:	17 82       	std	Z+7, r1	; 0x07
 51a:	16 82       	std	Z+6, r1	; 0x06
 51c:	83 81       	ldd	r24, Z+3	; 0x03
 51e:	81 fd       	sbrc	r24, 1
 520:	03 c0       	rjmp	.+6      	; 0x528 <vfprintf+0x24>
 522:	6f ef       	ldi	r22, 0xFF	; 255
 524:	7f ef       	ldi	r23, 0xFF	; 255
 526:	c8 c1       	rjmp	.+912    	; 0x8b8 <__stack+0x59>
 528:	9a e0       	ldi	r25, 0x0A	; 10
 52a:	89 2e       	mov	r8, r25
 52c:	1e 01       	movw	r2, r28
 52e:	08 94       	sec
 530:	21 1c       	adc	r2, r1
 532:	31 1c       	adc	r3, r1
 534:	f3 01       	movw	r30, r6
 536:	23 81       	ldd	r18, Z+3	; 0x03
 538:	f2 01       	movw	r30, r4
 53a:	23 fd       	sbrc	r18, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	23 ff       	sbrs	r18, 3
 540:	81 91       	ld	r24, Z+
 542:	2f 01       	movw	r4, r30
 544:	88 23       	and	r24, r24
 546:	09 f4       	brne	.+2      	; 0x54a <vfprintf+0x46>
 548:	b4 c1       	rjmp	.+872    	; 0x8b2 <__stack+0x53>
 54a:	85 32       	cpi	r24, 0x25	; 37
 54c:	39 f4       	brne	.+14     	; 0x55c <vfprintf+0x58>
 54e:	23 fd       	sbrc	r18, 3
 550:	85 91       	lpm	r24, Z+
 552:	23 ff       	sbrs	r18, 3
 554:	81 91       	ld	r24, Z+
 556:	2f 01       	movw	r4, r30
 558:	85 32       	cpi	r24, 0x25	; 37
 55a:	29 f4       	brne	.+10     	; 0x566 <vfprintf+0x62>
 55c:	b3 01       	movw	r22, r6
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 564:	e7 cf       	rjmp	.-50     	; 0x534 <vfprintf+0x30>
 566:	98 2f       	mov	r25, r24
 568:	dd 24       	eor	r13, r13
 56a:	cc 24       	eor	r12, r12
 56c:	99 24       	eor	r9, r9
 56e:	ff e1       	ldi	r31, 0x1F	; 31
 570:	fd 15       	cp	r31, r13
 572:	d0 f0       	brcs	.+52     	; 0x5a8 <vfprintf+0xa4>
 574:	9b 32       	cpi	r25, 0x2B	; 43
 576:	69 f0       	breq	.+26     	; 0x592 <vfprintf+0x8e>
 578:	9c 32       	cpi	r25, 0x2C	; 44
 57a:	28 f4       	brcc	.+10     	; 0x586 <vfprintf+0x82>
 57c:	90 32       	cpi	r25, 0x20	; 32
 57e:	59 f0       	breq	.+22     	; 0x596 <vfprintf+0x92>
 580:	93 32       	cpi	r25, 0x23	; 35
 582:	91 f4       	brne	.+36     	; 0x5a8 <vfprintf+0xa4>
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <vfprintf+0x9e>
 586:	9d 32       	cpi	r25, 0x2D	; 45
 588:	49 f0       	breq	.+18     	; 0x59c <vfprintf+0x98>
 58a:	90 33       	cpi	r25, 0x30	; 48
 58c:	69 f4       	brne	.+26     	; 0x5a8 <vfprintf+0xa4>
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	24 c0       	rjmp	.+72     	; 0x5da <vfprintf+0xd6>
 592:	52 e0       	ldi	r21, 0x02	; 2
 594:	d5 2a       	or	r13, r21
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	d8 2a       	or	r13, r24
 59a:	28 c0       	rjmp	.+80     	; 0x5ec <vfprintf+0xe8>
 59c:	98 e0       	ldi	r25, 0x08	; 8
 59e:	d9 2a       	or	r13, r25
 5a0:	25 c0       	rjmp	.+74     	; 0x5ec <vfprintf+0xe8>
 5a2:	e0 e1       	ldi	r30, 0x10	; 16
 5a4:	de 2a       	or	r13, r30
 5a6:	22 c0       	rjmp	.+68     	; 0x5ec <vfprintf+0xe8>
 5a8:	d7 fc       	sbrc	r13, 7
 5aa:	29 c0       	rjmp	.+82     	; 0x5fe <vfprintf+0xfa>
 5ac:	89 2f       	mov	r24, r25
 5ae:	80 53       	subi	r24, 0x30	; 48
 5b0:	8a 30       	cpi	r24, 0x0A	; 10
 5b2:	70 f4       	brcc	.+28     	; 0x5d0 <vfprintf+0xcc>
 5b4:	d6 fe       	sbrs	r13, 6
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <vfprintf+0xbe>
 5b8:	98 9c       	mul	r9, r8
 5ba:	90 2c       	mov	r9, r0
 5bc:	11 24       	eor	r1, r1
 5be:	98 0e       	add	r9, r24
 5c0:	15 c0       	rjmp	.+42     	; 0x5ec <vfprintf+0xe8>
 5c2:	c8 9c       	mul	r12, r8
 5c4:	c0 2c       	mov	r12, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	c8 0e       	add	r12, r24
 5ca:	f0 e2       	ldi	r31, 0x20	; 32
 5cc:	df 2a       	or	r13, r31
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <vfprintf+0xe8>
 5d0:	9e 32       	cpi	r25, 0x2E	; 46
 5d2:	29 f4       	brne	.+10     	; 0x5de <vfprintf+0xda>
 5d4:	d6 fc       	sbrc	r13, 6
 5d6:	6d c1       	rjmp	.+730    	; 0x8b2 <__stack+0x53>
 5d8:	40 e4       	ldi	r20, 0x40	; 64
 5da:	d4 2a       	or	r13, r20
 5dc:	07 c0       	rjmp	.+14     	; 0x5ec <vfprintf+0xe8>
 5de:	9c 36       	cpi	r25, 0x6C	; 108
 5e0:	19 f4       	brne	.+6      	; 0x5e8 <vfprintf+0xe4>
 5e2:	50 e8       	ldi	r21, 0x80	; 128
 5e4:	d5 2a       	or	r13, r21
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <vfprintf+0xe8>
 5e8:	98 36       	cpi	r25, 0x68	; 104
 5ea:	49 f4       	brne	.+18     	; 0x5fe <vfprintf+0xfa>
 5ec:	f2 01       	movw	r30, r4
 5ee:	23 fd       	sbrc	r18, 3
 5f0:	95 91       	lpm	r25, Z+
 5f2:	23 ff       	sbrs	r18, 3
 5f4:	91 91       	ld	r25, Z+
 5f6:	2f 01       	movw	r4, r30
 5f8:	99 23       	and	r25, r25
 5fa:	09 f0       	breq	.+2      	; 0x5fe <vfprintf+0xfa>
 5fc:	b8 cf       	rjmp	.-144    	; 0x56e <vfprintf+0x6a>
 5fe:	89 2f       	mov	r24, r25
 600:	85 54       	subi	r24, 0x45	; 69
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	18 f0       	brcs	.+6      	; 0x60c <vfprintf+0x108>
 606:	80 52       	subi	r24, 0x20	; 32
 608:	83 30       	cpi	r24, 0x03	; 3
 60a:	38 f4       	brcc	.+14     	; 0x61a <vfprintf+0x116>
 60c:	44 e0       	ldi	r20, 0x04	; 4
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	a4 0e       	add	r10, r20
 612:	b5 1e       	adc	r11, r21
 614:	5f e3       	ldi	r21, 0x3F	; 63
 616:	59 83       	std	Y+1, r21	; 0x01
 618:	0f c0       	rjmp	.+30     	; 0x638 <vfprintf+0x134>
 61a:	93 36       	cpi	r25, 0x63	; 99
 61c:	31 f0       	breq	.+12     	; 0x62a <vfprintf+0x126>
 61e:	93 37       	cpi	r25, 0x73	; 115
 620:	79 f0       	breq	.+30     	; 0x640 <vfprintf+0x13c>
 622:	93 35       	cpi	r25, 0x53	; 83
 624:	09 f0       	breq	.+2      	; 0x628 <vfprintf+0x124>
 626:	56 c0       	rjmp	.+172    	; 0x6d4 <vfprintf+0x1d0>
 628:	20 c0       	rjmp	.+64     	; 0x66a <vfprintf+0x166>
 62a:	f5 01       	movw	r30, r10
 62c:	80 81       	ld	r24, Z
 62e:	89 83       	std	Y+1, r24	; 0x01
 630:	42 e0       	ldi	r20, 0x02	; 2
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	a4 0e       	add	r10, r20
 636:	b5 1e       	adc	r11, r21
 638:	71 01       	movw	r14, r2
 63a:	01 e0       	ldi	r16, 0x01	; 1
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	12 c0       	rjmp	.+36     	; 0x664 <vfprintf+0x160>
 640:	f5 01       	movw	r30, r10
 642:	e0 80       	ld	r14, Z
 644:	f1 80       	ldd	r15, Z+1	; 0x01
 646:	d6 fc       	sbrc	r13, 6
 648:	03 c0       	rjmp	.+6      	; 0x650 <vfprintf+0x14c>
 64a:	6f ef       	ldi	r22, 0xFF	; 255
 64c:	7f ef       	ldi	r23, 0xFF	; 255
 64e:	02 c0       	rjmp	.+4      	; 0x654 <vfprintf+0x150>
 650:	69 2d       	mov	r22, r9
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	42 e0       	ldi	r20, 0x02	; 2
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	a4 0e       	add	r10, r20
 65a:	b5 1e       	adc	r11, r21
 65c:	c7 01       	movw	r24, r14
 65e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <strnlen>
 662:	8c 01       	movw	r16, r24
 664:	5f e7       	ldi	r21, 0x7F	; 127
 666:	d5 22       	and	r13, r21
 668:	14 c0       	rjmp	.+40     	; 0x692 <vfprintf+0x18e>
 66a:	f5 01       	movw	r30, r10
 66c:	e0 80       	ld	r14, Z
 66e:	f1 80       	ldd	r15, Z+1	; 0x01
 670:	d6 fc       	sbrc	r13, 6
 672:	03 c0       	rjmp	.+6      	; 0x67a <vfprintf+0x176>
 674:	6f ef       	ldi	r22, 0xFF	; 255
 676:	7f ef       	ldi	r23, 0xFF	; 255
 678:	02 c0       	rjmp	.+4      	; 0x67e <vfprintf+0x17a>
 67a:	69 2d       	mov	r22, r9
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	42 e0       	ldi	r20, 0x02	; 2
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	a4 0e       	add	r10, r20
 684:	b5 1e       	adc	r11, r21
 686:	c7 01       	movw	r24, r14
 688:	0e 94 61 04 	call	0x8c2	; 0x8c2 <strnlen_P>
 68c:	8c 01       	movw	r16, r24
 68e:	50 e8       	ldi	r21, 0x80	; 128
 690:	d5 2a       	or	r13, r21
 692:	d3 fe       	sbrs	r13, 3
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <vfprintf+0x1a0>
 696:	1a c0       	rjmp	.+52     	; 0x6cc <vfprintf+0x1c8>
 698:	b3 01       	movw	r22, r6
 69a:	80 e2       	ldi	r24, 0x20	; 32
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 6a2:	ca 94       	dec	r12
 6a4:	8c 2d       	mov	r24, r12
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	08 17       	cp	r16, r24
 6aa:	19 07       	cpc	r17, r25
 6ac:	a8 f3       	brcs	.-22     	; 0x698 <vfprintf+0x194>
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <vfprintf+0x1c8>
 6b0:	f7 01       	movw	r30, r14
 6b2:	d7 fc       	sbrc	r13, 7
 6b4:	85 91       	lpm	r24, Z+
 6b6:	d7 fe       	sbrs	r13, 7
 6b8:	81 91       	ld	r24, Z+
 6ba:	7f 01       	movw	r14, r30
 6bc:	b3 01       	movw	r22, r6
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 6c4:	c1 10       	cpse	r12, r1
 6c6:	ca 94       	dec	r12
 6c8:	01 50       	subi	r16, 0x01	; 1
 6ca:	10 40       	sbci	r17, 0x00	; 0
 6cc:	01 15       	cp	r16, r1
 6ce:	11 05       	cpc	r17, r1
 6d0:	79 f7       	brne	.-34     	; 0x6b0 <vfprintf+0x1ac>
 6d2:	ec c0       	rjmp	.+472    	; 0x8ac <__stack+0x4d>
 6d4:	94 36       	cpi	r25, 0x64	; 100
 6d6:	11 f0       	breq	.+4      	; 0x6dc <vfprintf+0x1d8>
 6d8:	99 36       	cpi	r25, 0x69	; 105
 6da:	71 f5       	brne	.+92     	; 0x738 <vfprintf+0x234>
 6dc:	d7 fe       	sbrs	r13, 7
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <vfprintf+0x1ec>
 6e0:	f5 01       	movw	r30, r10
 6e2:	e0 80       	ld	r14, Z
 6e4:	f1 80       	ldd	r15, Z+1	; 0x01
 6e6:	02 81       	ldd	r16, Z+2	; 0x02
 6e8:	13 81       	ldd	r17, Z+3	; 0x03
 6ea:	44 e0       	ldi	r20, 0x04	; 4
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <vfprintf+0x200>
 6f0:	f5 01       	movw	r30, r10
 6f2:	80 81       	ld	r24, Z
 6f4:	91 81       	ldd	r25, Z+1	; 0x01
 6f6:	7c 01       	movw	r14, r24
 6f8:	00 27       	eor	r16, r16
 6fa:	f7 fc       	sbrc	r15, 7
 6fc:	00 95       	com	r16
 6fe:	10 2f       	mov	r17, r16
 700:	42 e0       	ldi	r20, 0x02	; 2
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	a4 0e       	add	r10, r20
 706:	b5 1e       	adc	r11, r21
 708:	5f e6       	ldi	r21, 0x6F	; 111
 70a:	d5 22       	and	r13, r21
 70c:	17 ff       	sbrs	r17, 7
 70e:	0a c0       	rjmp	.+20     	; 0x724 <vfprintf+0x220>
 710:	10 95       	com	r17
 712:	00 95       	com	r16
 714:	f0 94       	com	r15
 716:	e0 94       	com	r14
 718:	e1 1c       	adc	r14, r1
 71a:	f1 1c       	adc	r15, r1
 71c:	01 1d       	adc	r16, r1
 71e:	11 1d       	adc	r17, r1
 720:	80 e8       	ldi	r24, 0x80	; 128
 722:	d8 2a       	or	r13, r24
 724:	2a e0       	ldi	r18, 0x0A	; 10
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	a1 01       	movw	r20, r2
 72a:	c8 01       	movw	r24, r16
 72c:	b7 01       	movw	r22, r14
 72e:	0e 94 a3 04 	call	0x946	; 0x946 <__ultoa_invert>
 732:	f8 2e       	mov	r15, r24
 734:	f2 18       	sub	r15, r2
 736:	40 c0       	rjmp	.+128    	; 0x7b8 <vfprintf+0x2b4>
 738:	95 37       	cpi	r25, 0x75	; 117
 73a:	29 f4       	brne	.+10     	; 0x746 <vfprintf+0x242>
 73c:	1d 2d       	mov	r17, r13
 73e:	1f 7e       	andi	r17, 0xEF	; 239
 740:	2a e0       	ldi	r18, 0x0A	; 10
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	1d c0       	rjmp	.+58     	; 0x780 <vfprintf+0x27c>
 746:	1d 2d       	mov	r17, r13
 748:	19 7f       	andi	r17, 0xF9	; 249
 74a:	9f 36       	cpi	r25, 0x6F	; 111
 74c:	61 f0       	breq	.+24     	; 0x766 <vfprintf+0x262>
 74e:	90 37       	cpi	r25, 0x70	; 112
 750:	20 f4       	brcc	.+8      	; 0x75a <vfprintf+0x256>
 752:	98 35       	cpi	r25, 0x58	; 88
 754:	09 f0       	breq	.+2      	; 0x758 <vfprintf+0x254>
 756:	ad c0       	rjmp	.+346    	; 0x8b2 <__stack+0x53>
 758:	0f c0       	rjmp	.+30     	; 0x778 <vfprintf+0x274>
 75a:	90 37       	cpi	r25, 0x70	; 112
 75c:	39 f0       	breq	.+14     	; 0x76c <vfprintf+0x268>
 75e:	98 37       	cpi	r25, 0x78	; 120
 760:	09 f0       	breq	.+2      	; 0x764 <vfprintf+0x260>
 762:	a7 c0       	rjmp	.+334    	; 0x8b2 <__stack+0x53>
 764:	04 c0       	rjmp	.+8      	; 0x76e <vfprintf+0x26a>
 766:	28 e0       	ldi	r18, 0x08	; 8
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	0a c0       	rjmp	.+20     	; 0x780 <vfprintf+0x27c>
 76c:	10 61       	ori	r17, 0x10	; 16
 76e:	14 fd       	sbrc	r17, 4
 770:	14 60       	ori	r17, 0x04	; 4
 772:	20 e1       	ldi	r18, 0x10	; 16
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <vfprintf+0x27c>
 778:	14 fd       	sbrc	r17, 4
 77a:	16 60       	ori	r17, 0x06	; 6
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	32 e0       	ldi	r19, 0x02	; 2
 780:	17 ff       	sbrs	r17, 7
 782:	08 c0       	rjmp	.+16     	; 0x794 <vfprintf+0x290>
 784:	f5 01       	movw	r30, r10
 786:	60 81       	ld	r22, Z
 788:	71 81       	ldd	r23, Z+1	; 0x01
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	44 e0       	ldi	r20, 0x04	; 4
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <vfprintf+0x2a0>
 794:	f5 01       	movw	r30, r10
 796:	80 81       	ld	r24, Z
 798:	91 81       	ldd	r25, Z+1	; 0x01
 79a:	bc 01       	movw	r22, r24
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	42 e0       	ldi	r20, 0x02	; 2
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	a4 0e       	add	r10, r20
 7a6:	b5 1e       	adc	r11, r21
 7a8:	a1 01       	movw	r20, r2
 7aa:	0e 94 a3 04 	call	0x946	; 0x946 <__ultoa_invert>
 7ae:	f8 2e       	mov	r15, r24
 7b0:	f2 18       	sub	r15, r2
 7b2:	8f e7       	ldi	r24, 0x7F	; 127
 7b4:	d8 2e       	mov	r13, r24
 7b6:	d1 22       	and	r13, r17
 7b8:	d6 fe       	sbrs	r13, 6
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x2ce>
 7bc:	5e ef       	ldi	r21, 0xFE	; 254
 7be:	d5 22       	and	r13, r21
 7c0:	f9 14       	cp	r15, r9
 7c2:	38 f4       	brcc	.+14     	; 0x7d2 <vfprintf+0x2ce>
 7c4:	d4 fe       	sbrs	r13, 4
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <vfprintf+0x2d2>
 7c8:	d2 fc       	sbrc	r13, 2
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <vfprintf+0x2d2>
 7cc:	8f ee       	ldi	r24, 0xEF	; 239
 7ce:	d8 22       	and	r13, r24
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <vfprintf+0x2d2>
 7d2:	1f 2d       	mov	r17, r15
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <vfprintf+0x2d4>
 7d6:	19 2d       	mov	r17, r9
 7d8:	d4 fe       	sbrs	r13, 4
 7da:	0d c0       	rjmp	.+26     	; 0x7f6 <vfprintf+0x2f2>
 7dc:	fe 01       	movw	r30, r28
 7de:	ef 0d       	add	r30, r15
 7e0:	f1 1d       	adc	r31, r1
 7e2:	80 81       	ld	r24, Z
 7e4:	80 33       	cpi	r24, 0x30	; 48
 7e6:	19 f4       	brne	.+6      	; 0x7ee <vfprintf+0x2ea>
 7e8:	99 ee       	ldi	r25, 0xE9	; 233
 7ea:	d9 22       	and	r13, r25
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <vfprintf+0x2fa>
 7ee:	1f 5f       	subi	r17, 0xFF	; 255
 7f0:	d2 fe       	sbrs	r13, 2
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <vfprintf+0x2fa>
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <vfprintf+0x2f8>
 7f6:	8d 2d       	mov	r24, r13
 7f8:	86 78       	andi	r24, 0x86	; 134
 7fa:	09 f0       	breq	.+2      	; 0x7fe <vfprintf+0x2fa>
 7fc:	1f 5f       	subi	r17, 0xFF	; 255
 7fe:	0d 2d       	mov	r16, r13
 800:	d3 fc       	sbrc	r13, 3
 802:	14 c0       	rjmp	.+40     	; 0x82c <vfprintf+0x328>
 804:	d0 fe       	sbrs	r13, 0
 806:	0f c0       	rjmp	.+30     	; 0x826 <vfprintf+0x322>
 808:	1c 15       	cp	r17, r12
 80a:	10 f0       	brcs	.+4      	; 0x810 <vfprintf+0x30c>
 80c:	9f 2c       	mov	r9, r15
 80e:	0b c0       	rjmp	.+22     	; 0x826 <vfprintf+0x322>
 810:	9f 2c       	mov	r9, r15
 812:	9c 0c       	add	r9, r12
 814:	91 1a       	sub	r9, r17
 816:	1c 2d       	mov	r17, r12
 818:	06 c0       	rjmp	.+12     	; 0x826 <vfprintf+0x322>
 81a:	b3 01       	movw	r22, r6
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 824:	1f 5f       	subi	r17, 0xFF	; 255
 826:	1c 15       	cp	r17, r12
 828:	c0 f3       	brcs	.-16     	; 0x81a <vfprintf+0x316>
 82a:	04 c0       	rjmp	.+8      	; 0x834 <vfprintf+0x330>
 82c:	1c 15       	cp	r17, r12
 82e:	10 f4       	brcc	.+4      	; 0x834 <vfprintf+0x330>
 830:	c1 1a       	sub	r12, r17
 832:	01 c0       	rjmp	.+2      	; 0x836 <vfprintf+0x332>
 834:	cc 24       	eor	r12, r12
 836:	04 ff       	sbrs	r16, 4
 838:	10 c0       	rjmp	.+32     	; 0x85a <vfprintf+0x356>
 83a:	b3 01       	movw	r22, r6
 83c:	80 e3       	ldi	r24, 0x30	; 48
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 844:	02 ff       	sbrs	r16, 2
 846:	1e c0       	rjmp	.+60     	; 0x884 <__stack+0x25>
 848:	01 fd       	sbrc	r16, 1
 84a:	03 c0       	rjmp	.+6      	; 0x852 <vfprintf+0x34e>
 84c:	88 e7       	ldi	r24, 0x78	; 120
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x352>
 852:	88 e5       	ldi	r24, 0x58	; 88
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b3 01       	movw	r22, r6
 858:	0c c0       	rjmp	.+24     	; 0x872 <__stack+0x13>
 85a:	80 2f       	mov	r24, r16
 85c:	86 78       	andi	r24, 0x86	; 134
 85e:	91 f0       	breq	.+36     	; 0x884 <__stack+0x25>
 860:	01 ff       	sbrs	r16, 1
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	8b e2       	ldi	r24, 0x2B	; 43
 866:	01 c0       	rjmp	.+2      	; 0x86a <__stack+0xb>
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	d7 fc       	sbrc	r13, 7
 86c:	8d e2       	ldi	r24, 0x2D	; 45
 86e:	b3 01       	movw	r22, r6
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 876:	06 c0       	rjmp	.+12     	; 0x884 <__stack+0x25>
 878:	b3 01       	movw	r22, r6
 87a:	80 e3       	ldi	r24, 0x30	; 48
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 882:	9a 94       	dec	r9
 884:	f9 14       	cp	r15, r9
 886:	c0 f3       	brcs	.-16     	; 0x878 <__stack+0x19>
 888:	fa 94       	dec	r15
 88a:	f1 01       	movw	r30, r2
 88c:	ef 0d       	add	r30, r15
 88e:	f1 1d       	adc	r31, r1
 890:	b3 01       	movw	r22, r6
 892:	80 81       	ld	r24, Z
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 89a:	ff 20       	and	r15, r15
 89c:	a9 f7       	brne	.-22     	; 0x888 <__stack+0x29>
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__stack+0x4d>
 8a0:	b3 01       	movw	r22, r6
 8a2:	80 e2       	ldi	r24, 0x20	; 32
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 77 04 	call	0x8ee	; 0x8ee <fputc>
 8aa:	ca 94       	dec	r12
 8ac:	cc 20       	and	r12, r12
 8ae:	c1 f7       	brne	.-16     	; 0x8a0 <__stack+0x41>
 8b0:	41 ce       	rjmp	.-894    	; 0x534 <vfprintf+0x30>
 8b2:	f3 01       	movw	r30, r6
 8b4:	66 81       	ldd	r22, Z+6	; 0x06
 8b6:	77 81       	ldd	r23, Z+7	; 0x07
 8b8:	cb 01       	movw	r24, r22
 8ba:	2b 96       	adiw	r28, 0x0b	; 11
 8bc:	e2 e1       	ldi	r30, 0x12	; 18
 8be:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__epilogue_restores__>

000008c2 <strnlen_P>:
 8c2:	fc 01       	movw	r30, r24
 8c4:	05 90       	lpm	r0, Z+
 8c6:	61 50       	subi	r22, 0x01	; 1
 8c8:	70 40       	sbci	r23, 0x00	; 0
 8ca:	01 10       	cpse	r0, r1
 8cc:	d8 f7       	brcc	.-10     	; 0x8c4 <strnlen_P+0x2>
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	8e 0f       	add	r24, r30
 8d4:	9f 1f       	adc	r25, r31
 8d6:	08 95       	ret

000008d8 <strnlen>:
 8d8:	fc 01       	movw	r30, r24
 8da:	61 50       	subi	r22, 0x01	; 1
 8dc:	70 40       	sbci	r23, 0x00	; 0
 8de:	01 90       	ld	r0, Z+
 8e0:	01 10       	cpse	r0, r1
 8e2:	d8 f7       	brcc	.-10     	; 0x8da <strnlen+0x2>
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	8e 0f       	add	r24, r30
 8ea:	9f 1f       	adc	r25, r31
 8ec:	08 95       	ret

000008ee <fputc>:
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	cf 93       	push	r28
 8f4:	df 93       	push	r29
 8f6:	8c 01       	movw	r16, r24
 8f8:	eb 01       	movw	r28, r22
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	81 ff       	sbrs	r24, 1
 8fe:	1b c0       	rjmp	.+54     	; 0x936 <fputc+0x48>
 900:	82 ff       	sbrs	r24, 2
 902:	0d c0       	rjmp	.+26     	; 0x91e <fputc+0x30>
 904:	2e 81       	ldd	r18, Y+6	; 0x06
 906:	3f 81       	ldd	r19, Y+7	; 0x07
 908:	8c 81       	ldd	r24, Y+4	; 0x04
 90a:	9d 81       	ldd	r25, Y+5	; 0x05
 90c:	28 17       	cp	r18, r24
 90e:	39 07       	cpc	r19, r25
 910:	64 f4       	brge	.+24     	; 0x92a <fputc+0x3c>
 912:	e8 81       	ld	r30, Y
 914:	f9 81       	ldd	r31, Y+1	; 0x01
 916:	01 93       	st	Z+, r16
 918:	f9 83       	std	Y+1, r31	; 0x01
 91a:	e8 83       	st	Y, r30
 91c:	06 c0       	rjmp	.+12     	; 0x92a <fputc+0x3c>
 91e:	e8 85       	ldd	r30, Y+8	; 0x08
 920:	f9 85       	ldd	r31, Y+9	; 0x09
 922:	80 2f       	mov	r24, r16
 924:	09 95       	icall
 926:	89 2b       	or	r24, r25
 928:	31 f4       	brne	.+12     	; 0x936 <fputc+0x48>
 92a:	8e 81       	ldd	r24, Y+6	; 0x06
 92c:	9f 81       	ldd	r25, Y+7	; 0x07
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	9f 83       	std	Y+7, r25	; 0x07
 932:	8e 83       	std	Y+6, r24	; 0x06
 934:	02 c0       	rjmp	.+4      	; 0x93a <fputc+0x4c>
 936:	0f ef       	ldi	r16, 0xFF	; 255
 938:	1f ef       	ldi	r17, 0xFF	; 255
 93a:	c8 01       	movw	r24, r16
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	08 95       	ret

00000946 <__ultoa_invert>:
 946:	fa 01       	movw	r30, r20
 948:	aa 27       	eor	r26, r26
 94a:	28 30       	cpi	r18, 0x08	; 8
 94c:	51 f1       	breq	.+84     	; 0x9a2 <__ultoa_invert+0x5c>
 94e:	20 31       	cpi	r18, 0x10	; 16
 950:	81 f1       	breq	.+96     	; 0x9b2 <__ultoa_invert+0x6c>
 952:	e8 94       	clt
 954:	6f 93       	push	r22
 956:	6e 7f       	andi	r22, 0xFE	; 254
 958:	6e 5f       	subi	r22, 0xFE	; 254
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	8f 4f       	sbci	r24, 0xFF	; 255
 95e:	9f 4f       	sbci	r25, 0xFF	; 255
 960:	af 4f       	sbci	r26, 0xFF	; 255
 962:	b1 e0       	ldi	r27, 0x01	; 1
 964:	3e d0       	rcall	.+124    	; 0x9e2 <__ultoa_invert+0x9c>
 966:	b4 e0       	ldi	r27, 0x04	; 4
 968:	3c d0       	rcall	.+120    	; 0x9e2 <__ultoa_invert+0x9c>
 96a:	67 0f       	add	r22, r23
 96c:	78 1f       	adc	r23, r24
 96e:	89 1f       	adc	r24, r25
 970:	9a 1f       	adc	r25, r26
 972:	a1 1d       	adc	r26, r1
 974:	68 0f       	add	r22, r24
 976:	79 1f       	adc	r23, r25
 978:	8a 1f       	adc	r24, r26
 97a:	91 1d       	adc	r25, r1
 97c:	a1 1d       	adc	r26, r1
 97e:	6a 0f       	add	r22, r26
 980:	71 1d       	adc	r23, r1
 982:	81 1d       	adc	r24, r1
 984:	91 1d       	adc	r25, r1
 986:	a1 1d       	adc	r26, r1
 988:	20 d0       	rcall	.+64     	; 0x9ca <__ultoa_invert+0x84>
 98a:	09 f4       	brne	.+2      	; 0x98e <__ultoa_invert+0x48>
 98c:	68 94       	set
 98e:	3f 91       	pop	r19
 990:	2a e0       	ldi	r18, 0x0A	; 10
 992:	26 9f       	mul	r18, r22
 994:	11 24       	eor	r1, r1
 996:	30 19       	sub	r19, r0
 998:	30 5d       	subi	r19, 0xD0	; 208
 99a:	31 93       	st	Z+, r19
 99c:	de f6       	brtc	.-74     	; 0x954 <__ultoa_invert+0xe>
 99e:	cf 01       	movw	r24, r30
 9a0:	08 95       	ret
 9a2:	46 2f       	mov	r20, r22
 9a4:	47 70       	andi	r20, 0x07	; 7
 9a6:	40 5d       	subi	r20, 0xD0	; 208
 9a8:	41 93       	st	Z+, r20
 9aa:	b3 e0       	ldi	r27, 0x03	; 3
 9ac:	0f d0       	rcall	.+30     	; 0x9cc <__ultoa_invert+0x86>
 9ae:	c9 f7       	brne	.-14     	; 0x9a2 <__ultoa_invert+0x5c>
 9b0:	f6 cf       	rjmp	.-20     	; 0x99e <__ultoa_invert+0x58>
 9b2:	46 2f       	mov	r20, r22
 9b4:	4f 70       	andi	r20, 0x0F	; 15
 9b6:	40 5d       	subi	r20, 0xD0	; 208
 9b8:	4a 33       	cpi	r20, 0x3A	; 58
 9ba:	18 f0       	brcs	.+6      	; 0x9c2 <__ultoa_invert+0x7c>
 9bc:	49 5d       	subi	r20, 0xD9	; 217
 9be:	31 fd       	sbrc	r19, 1
 9c0:	40 52       	subi	r20, 0x20	; 32
 9c2:	41 93       	st	Z+, r20
 9c4:	02 d0       	rcall	.+4      	; 0x9ca <__ultoa_invert+0x84>
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__ultoa_invert+0x6c>
 9c8:	ea cf       	rjmp	.-44     	; 0x99e <__ultoa_invert+0x58>
 9ca:	b4 e0       	ldi	r27, 0x04	; 4
 9cc:	a6 95       	lsr	r26
 9ce:	97 95       	ror	r25
 9d0:	87 95       	ror	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	ba 95       	dec	r27
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__ultoa_invert+0x86>
 9da:	00 97       	sbiw	r24, 0x00	; 0
 9dc:	61 05       	cpc	r22, r1
 9de:	71 05       	cpc	r23, r1
 9e0:	08 95       	ret
 9e2:	9b 01       	movw	r18, r22
 9e4:	ac 01       	movw	r20, r24
 9e6:	0a 2e       	mov	r0, r26
 9e8:	06 94       	lsr	r0
 9ea:	57 95       	ror	r21
 9ec:	47 95       	ror	r20
 9ee:	37 95       	ror	r19
 9f0:	27 95       	ror	r18
 9f2:	ba 95       	dec	r27
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0xa2>
 9f6:	62 0f       	add	r22, r18
 9f8:	73 1f       	adc	r23, r19
 9fa:	84 1f       	adc	r24, r20
 9fc:	95 1f       	adc	r25, r21
 9fe:	a0 1d       	adc	r26, r0
 a00:	08 95       	ret

00000a02 <__prologue_saves__>:
 a02:	2f 92       	push	r2
 a04:	3f 92       	push	r3
 a06:	4f 92       	push	r4
 a08:	5f 92       	push	r5
 a0a:	6f 92       	push	r6
 a0c:	7f 92       	push	r7
 a0e:	8f 92       	push	r8
 a10:	9f 92       	push	r9
 a12:	af 92       	push	r10
 a14:	bf 92       	push	r11
 a16:	cf 92       	push	r12
 a18:	df 92       	push	r13
 a1a:	ef 92       	push	r14
 a1c:	ff 92       	push	r15
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	ca 1b       	sub	r28, r26
 a2c:	db 0b       	sbc	r29, r27
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	09 94       	ijmp

00000a3a <__epilogue_restores__>:
 a3a:	2a 88       	ldd	r2, Y+18	; 0x12
 a3c:	39 88       	ldd	r3, Y+17	; 0x11
 a3e:	48 88       	ldd	r4, Y+16	; 0x10
 a40:	5f 84       	ldd	r5, Y+15	; 0x0f
 a42:	6e 84       	ldd	r6, Y+14	; 0x0e
 a44:	7d 84       	ldd	r7, Y+13	; 0x0d
 a46:	8c 84       	ldd	r8, Y+12	; 0x0c
 a48:	9b 84       	ldd	r9, Y+11	; 0x0b
 a4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4c:	b9 84       	ldd	r11, Y+9	; 0x09
 a4e:	c8 84       	ldd	r12, Y+8	; 0x08
 a50:	df 80       	ldd	r13, Y+7	; 0x07
 a52:	ee 80       	ldd	r14, Y+6	; 0x06
 a54:	fd 80       	ldd	r15, Y+5	; 0x05
 a56:	0c 81       	ldd	r16, Y+4	; 0x04
 a58:	1b 81       	ldd	r17, Y+3	; 0x03
 a5a:	aa 81       	ldd	r26, Y+2	; 0x02
 a5c:	b9 81       	ldd	r27, Y+1	; 0x01
 a5e:	ce 0f       	add	r28, r30
 a60:	d1 1d       	adc	r29, r1
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	de bf       	out	0x3e, r29	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	ed 01       	movw	r28, r26
 a6e:	08 95       	ret

00000a70 <_exit>:
 a70:	f8 94       	cli

00000a72 <__stop_program>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <__stop_program>
