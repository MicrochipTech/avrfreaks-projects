
USB_hid_data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000007f8  0000088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800064  00800064  00000890  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000180  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d6b  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034a  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073d  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004be  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000615  00000000  00000000  00002732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00002d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3b c0       	rjmp	.+118    	; 0x78 <__ctors_end>
   2:	a5 c2       	rjmp	.+1354   	; 0x54e <__vector_1>

00000004 <usbDescriptorString0>:
   4:	04 03 09 04                                         ....

00000008 <usbDescriptorStringVendor>:
   8:	14 03 52 00 6f 00 73 00 65 00 6e 00 64 00 61 00     ..R.o.s.e.n.d.a.
  18:	68 00 6c 00                                         h.l.

0000001c <usbDescriptorStringDevice>:
  1c:	12 03 54 00 50 00 49 00 46 00 6c 00 61 00 73 00     ..T.P.I.F.l.a.s.
  2c:	68 00                                               h.

0000002e <usbDescriptorDevice>:
  2e:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
  3e:	00 01                                               ..

00000040 <usbDescriptorConfiguration>:
  40:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  50:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
  60:	00 64                                               .d

00000062 <usbDescriptorHidReport>:
  62:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 18     .........&..u...
  72:	09 00 b2 02 01 c0                                   ......

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ed       	ldi	r28, 0xDF	; 223
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e8 ef       	ldi	r30, 0xF8	; 248
  86:	f7 e0       	ldi	r31, 0x07	; 7
  88:	02 c0       	rjmp	.+4      	; 0x8e <.do_copy_data_start>

0000008a <.do_copy_data_loop>:
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0

0000008e <.do_copy_data_start>:
  8e:	a4 36       	cpi	r26, 0x64	; 100
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 3a       	cpi	r26, 0xAE	; 174
  98:	e9 f7       	brne	.-6      	; 0x94 <.do_clear_bss_loop>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <main>

0000009c <wait>:
/* ------------------------------------------------------------------------- */

__attribute__((noinline))
void wait()
{
	uchar i=delay_us;
  9c:	90 91 62 00 	lds	r25, 0x0062
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a0:	25 e0       	ldi	r18, 0x05	; 5
  a2:	04 c0       	rjmp	.+8      	; 0xac <wait+0x10>
  a4:	82 2f       	mov	r24, r18
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <wait+0xa>
	while(i>0) {
		_delay_us(1);
		i--;
  aa:	91 50       	subi	r25, 0x01	; 1

__attribute__((noinline))
void wait()
{
	uchar i=delay_us;
	while(i>0) {
  ac:	99 23       	and	r25, r25
  ae:	d1 f7       	brne	.-12     	; 0xa4 <wait+0x8>
		_delay_us(1);
		i--;
	}
}
  b0:	08 95       	ret

000000b2 <waitHIGHwait>:

__attribute__((noinline))
static void waitHIGHwait()
{
	wait();
  b2:	f4 df       	rcall	.-24     	; 0x9c <wait>
	C_HIGH;
  b4:	c1 9a       	sbi	0x18, 1	; 24
	wait();
  b6:	f2 df       	rcall	.-28     	; 0x9c <wait>
}
  b8:	08 95       	ret

000000ba <sendByte>:

__attribute__((noinline))
static void sendByte(uchar c)
{
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	08 2f       	mov	r16, r24
  c2:	10 91 82 00 	lds	r17, 0x0082
	for(uchar i=0; i<8 && writingStatus>0; i++)
  c6:	88 ef       	ldi	r24, 0xF8	; 248
  c8:	f8 2e       	mov	r15, r24
  ca:	f1 0e       	add	r15, r17
  cc:	0e c0       	rjmp	.+28     	; 0xea <__stack+0xb>
	{
		C_LOW;
  ce:	c1 98       	cbi	0x18, 1	; 24
		if (c&0b10000000)
  d0:	07 ff       	sbrs	r16, 7
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <sendByte+0x1e>
		{
			D_HIGH;
  d4:	c0 9a       	sbi	0x18, 0	; 24
  d6:	01 c0       	rjmp	.+2      	; 0xda <sendByte+0x20>
		}
		else
		{
			D_LOW;
  d8:	c0 98       	cbi	0x18, 0	; 24
		}
		waitHIGHwait();
  da:	eb df       	rcall	.-42     	; 0xb2 <waitHIGHwait>
  dc:	11 50       	subi	r17, 0x01	; 1
}

__attribute__((noinline))
static void sendByte(uchar c)
{
	for(uchar i=0; i<8 && writingStatus>0; i++)
  de:	1f 15       	cp	r17, r15
  e0:	19 f4       	brne	.+6      	; 0xe8 <__stack+0x9>
  e2:	10 93 82 00 	sts	0x0082, r17
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <__stack+0x13>
		{
			D_LOW;
		}
		waitHIGHwait();

		c <<= 1;
  e8:	00 0f       	add	r16, r16
}

__attribute__((noinline))
static void sendByte(uchar c)
{
	for(uchar i=0; i<8 && writingStatus>0; i++)
  ea:	11 23       	and	r17, r17
  ec:	81 f7       	brne	.-32     	; 0xce <sendByte+0x14>
  ee:	10 92 82 00 	sts	0x0082, r1
		waitHIGHwait();

		c <<= 1;
		writingStatus--;
	}
}
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	ff 90       	pop	r15
  f8:	08 95       	ret

000000fa <main>:
__attribute__((naked))
void main(void)
{
uchar	i;
uchar	j;
	Q_INPUT;
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	bb 98       	cbi	0x17, 3	; 23
	C_OUTPUT;
  fe:	b9 9a       	sbi	0x17, 1	; 23
	D_OUTPUT;
 100:	b8 9a       	sbi	0x17, 0	; 23
	S_OUTPUT;
 102:	bd 9a       	sbi	0x17, 5	; 23
	C_HIGH;
 104:	c1 9a       	sbi	0x18, 1	; 24
	D_HIGH;
 106:	c0 9a       	sbi	0x18, 0	; 24
	S_HIGH;
 108:	c5 9a       	sbi	0x18, 5	; 24

    wdt_enable(WDTO_1S);
 10a:	2e e0       	ldi	r18, 0x0E	; 14
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	a8 95       	wdr
 116:	81 bd       	out	0x21, r24	; 33
 118:	0f be       	out	0x3f, r0	; 63
 11a:	21 bd       	out	0x21, r18	; 33
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 122:	8b b7       	in	r24, 0x3b	; 59
 124:	80 64       	ori	r24, 0x40	; 64
 126:	8b bf       	out	0x3b, r24	; 59
     * additional hardware initialization.
     */
    odDebugInit();
    usbInit();
    // enforce re-enumeration, do this while interrupts are disabled!
    usbDeviceDisconnect();  
 128:	bc 9a       	sbi	0x17, 4	; 23
    while(--i){             
        wdt_reset();
        _delay_ms(1);
    }
    }
    usbDeviceConnect();
 12a:	bc 98       	cbi	0x17, 4	; 23
    sei();
 12c:	78 94       	sei
	if(len > bytesRemaining)
	{
     	len = bytesRemaining;
	}

	uchar currentAddress = BUFFERSIZE-bytesRemaining;
 12e:	78 e1       	ldi	r23, 0x18	; 24
 130:	87 2e       	mov	r8, r23
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 132:	62 e5       	ldi	r22, 0x52	; 82
 134:	66 2e       	mov	r6, r22
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	76 2e       	mov	r7, r22
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 13a:	54 e0       	ldi	r21, 0x04	; 4
 13c:	45 2e       	mov	r4, r21
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	55 2e       	mov	r5, r21

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 142:	4e ee       	ldi	r20, 0xEE	; 238
 144:	24 2e       	mov	r2, r20
 146:	4f ef       	ldi	r20, 0xFF	; 255
 148:	34 2e       	mov	r3, r20
 14a:	26 0c       	add	r2, r6
 14c:	37 1c       	adc	r3, r7
    }
    usbDeviceConnect();
    sei();
	// main event loop
    for(;;){                
        wdt_reset();
 14e:	a8 95       	wdr
USB_PUBLIC void usbPoll(void)
{
schar   len;
uchar   i;

    len = usbRxLen - 3;
 150:	90 91 94 00 	lds	r25, 0x0094
 154:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 156:	97 fd       	sbrc	r25, 7
 158:	43 c1       	rjmp	.+646    	; 0x3e0 <main+0x2e6>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 15a:	80 91 91 00 	lds	r24, 0x0091
 15e:	ec e0       	ldi	r30, 0x0C	; 12
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e8 1b       	sub	r30, r24
 164:	f1 09       	sbc	r31, r1
 166:	e8 56       	subi	r30, 0x68	; 104
 168:	ff 4f       	sbci	r31, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 16a:	80 91 90 00 	lds	r24, 0x0090
 16e:	8d 32       	cpi	r24, 0x2D	; 45
 170:	09 f0       	breq	.+2      	; 0x174 <main+0x7a>
 172:	ac c0       	rjmp	.+344    	; 0x2cc <main+0x1d2>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 174:	98 30       	cpi	r25, 0x08	; 8
 176:	09 f0       	breq	.+2      	; 0x17a <main+0x80>
 178:	31 c1       	rjmp	.+610    	; 0x3dc <main+0x2e2>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 17a:	83 ec       	ldi	r24, 0xC3	; 195
 17c:	80 93 84 00 	sts	0x0084, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 180:	9a e5       	ldi	r25, 0x5A	; 90
 182:	90 93 60 00 	sts	0x0060, r25
        usbMsgFlags = 0;
 186:	10 92 65 00 	sts	0x0065, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 18a:	90 81       	ld	r25, Z
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 18c:	89 2f       	mov	r24, r25
 18e:	80 76       	andi	r24, 0x60	; 96
 190:	e9 f0       	breq	.+58     	; 0x1cc <main+0xd2>

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID class request */
 192:	89 2f       	mov	r24, r25
 194:	80 76       	andi	r24, 0x60	; 96
 196:	80 32       	cpi	r24, 0x20	; 32
 198:	09 f0       	breq	.+2      	; 0x19c <main+0xa2>
 19a:	87 c0       	rjmp	.+270    	; 0x2aa <main+0x1b0>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 19c:	81 81       	ldd	r24, Z+1	; 0x01
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	41 f4       	brne	.+16     	; 0x1b2 <main+0xb8>
            /* since we have only one report type, we can ignore the report-ID */
            //buildReport();
		  usbMsgPtr = reportBuffer;
 1a2:	86 e6       	ldi	r24, 0x66	; 102
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 93 00 	sts	0x0093, r25
 1aa:	80 93 92 00 	sts	0x0092, r24
 1ae:	98 e1       	ldi	r25, 0x18	; 24
 1b0:	7d c0       	rjmp	.+250    	; 0x2ac <main+0x1b2>
            return BUFFERSIZE;
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 1b2:	89 30       	cpi	r24, 0x09	; 9
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <main+0xbe>
 1b6:	79 c0       	rjmp	.+242    	; 0x2aa <main+0x1b0>
            /* since we have only one report type, we can ignore the report-ID */
            bytesRemaining = BUFFERSIZE;
 1b8:	80 92 80 00 	sts	0x0080, r8
		  readingStatus = 0;
 1bc:	10 92 81 00 	sts	0x0081, r1
		  writingStatus = 0;
 1c0:	10 92 82 00 	sts	0x0082, r1
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 1c4:	97 fd       	sbrc	r25, 7
 1c6:	76 c0       	rjmp	.+236    	; 0x2b4 <main+0x1ba>
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	75 c0       	rjmp	.+234    	; 0x2b6 <main+0x1bc>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 1cc:	92 81       	ldd	r25, Z+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 1ce:	10 92 8d 00 	sts	0x008D, r1
    SWITCH_START(rq->bRequest)
 1d2:	81 81       	ldd	r24, Z+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 1d4:	88 23       	and	r24, r24
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <main+0xea>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 1d8:	10 92 8e 00 	sts	0x008E, r1
 1dc:	2d e8       	ldi	r18, 0x8D	; 141
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	5e c0       	rjmp	.+188    	; 0x2a0 <main+0x1a6>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 1e4:	85 30       	cpi	r24, 0x05	; 5
 1e6:	19 f4       	brne	.+6      	; 0x1ee <main+0xf4>
        usbNewDeviceAddr = value;
 1e8:	90 93 95 00 	sts	0x0095, r25
 1ec:	56 c0       	rjmp	.+172    	; 0x29a <main+0x1a0>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 1ee:	86 30       	cpi	r24, 0x06	; 6
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <main+0xfa>
 1f2:	43 c0       	rjmp	.+134    	; 0x27a <main+0x180>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 1f4:	83 81       	ldd	r24, Z+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	19 f4       	brne	.+6      	; 0x200 <main+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 1fa:	8e e2       	ldi	r24, 0x2E	; 46
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <main+0x146>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	31 f4       	brne	.+12     	; 0x210 <main+0x116>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 204:	30 92 93 00 	sts	0x0093, r3
 208:	20 92 92 00 	sts	0x0092, r2
 20c:	92 e2       	ldi	r25, 0x22	; 34
 20e:	31 c0       	rjmp	.+98     	; 0x272 <main+0x178>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	e1 f4       	brne	.+56     	; 0x24c <main+0x152>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 214:	99 23       	and	r25, r25
 216:	31 f4       	brne	.+12     	; 0x224 <main+0x12a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 218:	50 92 93 00 	sts	0x0093, r5
 21c:	40 92 92 00 	sts	0x0092, r4
 220:	94 e0       	ldi	r25, 0x04	; 4
 222:	27 c0       	rjmp	.+78     	; 0x272 <main+0x178>
        SWITCH_CASE(1)
 224:	91 30       	cpi	r25, 0x01	; 1
 226:	41 f4       	brne	.+16     	; 0x238 <main+0x13e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 93 00 	sts	0x0093, r25
 230:	80 93 92 00 	sts	0x0092, r24
 234:	94 e1       	ldi	r25, 0x14	; 20
 236:	1d c0       	rjmp	.+58     	; 0x272 <main+0x178>
        SWITCH_CASE(2)
 238:	92 30       	cpi	r25, 0x02	; 2
 23a:	d1 f4       	brne	.+52     	; 0x270 <main+0x176>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 23c:	8c e1       	ldi	r24, 0x1C	; 28
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 93 00 	sts	0x0093, r25
 244:	80 93 92 00 	sts	0x0092, r24
 248:	92 e1       	ldi	r25, 0x12	; 18
 24a:	13 c0       	rjmp	.+38     	; 0x272 <main+0x178>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 24c:	81 32       	cpi	r24, 0x21	; 33
 24e:	31 f4       	brne	.+12     	; 0x25c <main+0x162>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 250:	70 92 93 00 	sts	0x0093, r7
 254:	60 92 92 00 	sts	0x0092, r6
 258:	99 e0       	ldi	r25, 0x09	; 9
 25a:	0b c0       	rjmp	.+22     	; 0x272 <main+0x178>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 25c:	82 32       	cpi	r24, 0x22	; 34
 25e:	41 f4       	brne	.+16     	; 0x270 <main+0x176>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 260:	82 e6       	ldi	r24, 0x62	; 98
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 93 00 	sts	0x0093, r25
 268:	80 93 92 00 	sts	0x0092, r24
 26c:	96 e1       	ldi	r25, 0x16	; 22
 26e:	01 c0       	rjmp	.+2      	; 0x272 <main+0x178>
 270:	90 e0       	ldi	r25, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	80 93 65 00 	sts	0x0065, r24
 278:	19 c0       	rjmp	.+50     	; 0x2ac <main+0x1b2>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 27a:	88 30       	cpi	r24, 0x08	; 8
 27c:	19 f4       	brne	.+6      	; 0x284 <main+0x18a>
 27e:	27 e9       	ldi	r18, 0x97	; 151
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	09 c0       	rjmp	.+18     	; 0x296 <main+0x19c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 284:	89 30       	cpi	r24, 0x09	; 9
 286:	19 f4       	brne	.+6      	; 0x28e <main+0x194>
        usbConfiguration = value;
 288:	90 93 97 00 	sts	0x0097, r25
 28c:	06 c0       	rjmp	.+12     	; 0x29a <main+0x1a0>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 28e:	8a 30       	cpi	r24, 0x0A	; 10
 290:	21 f4       	brne	.+8      	; 0x29a <main+0x1a0>
 292:	2d e8       	ldi	r18, 0x8D	; 141
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <main+0x1a6>
 29a:	2d e8       	ldi	r18, 0x8D	; 141
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 2a0:	30 93 93 00 	sts	0x0093, r19
 2a4:	20 93 92 00 	sts	0x0092, r18
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <main+0x1b2>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 2ac:	87 81       	ldd	r24, Z+7	; 0x07
 2ae:	88 23       	and	r24, r24
 2b0:	31 f0       	breq	.+12     	; 0x2be <main+0x1c4>
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <main+0x1ca>
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 2b4:	26 81       	ldd	r18, Z+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 2b6:	80 e8       	ldi	r24, 0x80	; 128
 2b8:	80 93 65 00 	sts	0x0065, r24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <main+0x1cc>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 2be:	26 81       	ldd	r18, Z+6	; 0x06
 2c0:	29 17       	cp	r18, r25
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <main+0x1cc>
 2c4:	29 2f       	mov	r18, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 2c6:	20 93 61 00 	sts	0x0061, r18
 2ca:	88 c0       	rjmp	.+272    	; 0x3dc <main+0x2e2>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 2cc:	80 91 65 00 	lds	r24, 0x0065
 2d0:	87 ff       	sbrs	r24, 7
 2d2:	84 c0       	rjmp	.+264    	; 0x3dc <main+0x2e2>
//__attribute__((noinline))
uchar usbFunctionWrite(uchar *data, uchar len)
{
//    if(bytesRemaining == 0)
//        return 1;               /* end of transfer */
	if(len > bytesRemaining)
 2d4:	a0 90 80 00 	lds	r10, 0x0080
 2d8:	b9 2e       	mov	r11, r25
 2da:	a9 16       	cp	r10, r25
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <main+0x1e6>
 2de:	ba 2c       	mov	r11, r10
	{
     	len = bytesRemaining;
	}

	uchar currentAddress = BUFFERSIZE-bytesRemaining;
 2e0:	98 2c       	mov	r9, r8
 2e2:	9a 18       	sub	r9, r10
 2e4:	10 91 81 00 	lds	r17, 0x0081
 2e8:	6f 01       	movw	r12, r30
 2ea:	ee 24       	eor	r14, r14
 2ec:	68 c0       	rjmp	.+208    	; 0x3be <main+0x2c4>

	for(uchar i=0; i<len; i++)
	{
		uchar dat = data[i];
 2ee:	f6 01       	movw	r30, r12
 2f0:	80 81       	ld	r24, Z
		reportBuffer[currentAddress] = dat;
 2f2:	c9 2f       	mov	r28, r25
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	fe 01       	movw	r30, r28
 2f8:	ea 59       	subi	r30, 0x9A	; 154
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 83       	st	Z, r24

		if ( readingStatus>0 )
 2fe:	11 23       	and	r17, r17
 300:	91 f0       	breq	.+36     	; 0x326 <main+0x22c>
 302:	00 e0       	ldi	r16, 0x00	; 0

//__attribute__((noinline))
static uchar recvByte()
{
	uchar res = 0;
	for(uchar i=0; (i<8) && (readingStatus>0); i++)
 304:	38 ef       	ldi	r19, 0xF8	; 248
 306:	f3 2e       	mov	r15, r19
 308:	f1 0e       	add	r15, r17
	{
		res <<= 1;
 30a:	00 0f       	add	r16, r16

		C_LOW;
 30c:	c1 98       	cbi	0x18, 1	; 24
		waitHIGHwait();
 30e:	d1 de       	rcall	.-606    	; 0xb2 <waitHIGHwait>
		if (Q_READ)
 310:	b3 99       	sbic	0x16, 3	; 22
		{
			res |= 1;
 312:	01 60       	ori	r16, 0x01	; 1
 314:	11 50       	subi	r17, 0x01	; 1

//__attribute__((noinline))
static uchar recvByte()
{
	uchar res = 0;
	for(uchar i=0; (i<8) && (readingStatus>0); i++)
 316:	1f 15       	cp	r17, r15
 318:	11 f0       	breq	.+4      	; 0x31e <main+0x224>
 31a:	11 23       	and	r17, r17
 31c:	b1 f7       	brne	.-20     	; 0x30a <main+0x210>
		uchar dat = data[i];
		reportBuffer[currentAddress] = dat;

		if ( readingStatus>0 )
		{
			reportBuffer[currentAddress] = recvByte();
 31e:	ca 59       	subi	r28, 0x9A	; 154
 320:	df 4f       	sbci	r29, 0xFF	; 255
 322:	08 83       	st	Y, r16
 324:	48 c0       	rjmp	.+144    	; 0x3b6 <main+0x2bc>
		}
		else if (writingStatus==0xff )
 326:	90 91 82 00 	lds	r25, 0x0082
 32a:	9f 3f       	cpi	r25, 0xFF	; 255
 32c:	79 f5       	brne	.+94     	; 0x38c <main+0x292>
		{
			switch ( dat )
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	b1 f0       	breq	.+44     	; 0x35e <main+0x264>
 332:	84 30       	cpi	r24, 0x04	; 4
 334:	28 f4       	brcc	.+10     	; 0x340 <main+0x246>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	71 f0       	breq	.+28     	; 0x356 <main+0x25c>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	70 f4       	brcc	.+28     	; 0x35a <main+0x260>
 33e:	09 c0       	rjmp	.+18     	; 0x352 <main+0x258>
 340:	85 30       	cpi	r24, 0x05	; 5
 342:	89 f0       	breq	.+34     	; 0x366 <main+0x26c>
 344:	85 30       	cpi	r24, 0x05	; 5
 346:	68 f0       	brcs	.+26     	; 0x362 <main+0x268>
 348:	86 30       	cpi	r24, 0x06	; 6
 34a:	79 f0       	breq	.+30     	; 0x36a <main+0x270>
 34c:	8f 37       	cpi	r24, 0x7F	; 127
 34e:	b9 f4       	brne	.+46     	; 0x37e <main+0x284>
 350:	12 c0       	rjmp	.+36     	; 0x376 <main+0x27c>
			{
				case 0:
					S_LOW;
 352:	c5 98       	cbi	0x18, 5	; 24
 354:	17 c0       	rjmp	.+46     	; 0x384 <main+0x28a>
					break;
				case 1:
					S_HIGH;
 356:	c5 9a       	sbi	0x18, 5	; 24
 358:	15 c0       	rjmp	.+42     	; 0x384 <main+0x28a>
					break;
				case 2:
					C_LOW;
 35a:	c1 98       	cbi	0x18, 1	; 24
 35c:	13 c0       	rjmp	.+38     	; 0x384 <main+0x28a>
					break;
				case 3:
					C_HIGH;
 35e:	c1 9a       	sbi	0x18, 1	; 24
 360:	11 c0       	rjmp	.+34     	; 0x384 <main+0x28a>
					break;
				case 4:
					D_LOW;
 362:	c0 98       	cbi	0x18, 0	; 24
 364:	0f c0       	rjmp	.+30     	; 0x384 <main+0x28a>
					break;
				case 5:
					D_HIGH;
 366:	c0 9a       	sbi	0x18, 0	; 24
 368:	0d c0       	rjmp	.+26     	; 0x384 <main+0x28a>
					break;
				case 6:
					if ( Q_READ )
 36a:	b3 9b       	sbis	0x16, 3	; 22
 36c:	02 c0       	rjmp	.+4      	; 0x372 <main+0x278>
					{
						reportBuffer[currentAddress] = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	04 c0       	rjmp	.+8      	; 0x37a <main+0x280>
					}
					else
					{
						reportBuffer[currentAddress] = 0;
 372:	10 82       	st	Z, r1
 374:	07 c0       	rjmp	.+14     	; 0x384 <main+0x28a>
					}
					break;
				case 0x7f:
					reportBuffer[currentAddress] = delay_us;
 376:	80 91 62 00 	lds	r24, 0x0062
 37a:	80 83       	st	Z, r24
 37c:	03 c0       	rjmp	.+6      	; 0x384 <main+0x28a>
					break;
				default:
					delay_us = dat-0x80;
 37e:	80 58       	subi	r24, 0x80	; 128
 380:	80 93 62 00 	sts	0x0062, r24
			}
			wait();
 384:	8b de       	rcall	.-746    	; 0x9c <wait>
			writingStatus=0;			
 386:	10 92 82 00 	sts	0x0082, r1
 38a:	15 c0       	rjmp	.+42     	; 0x3b6 <main+0x2bc>
		}
		else if (writingStatus>0 )
 38c:	99 23       	and	r25, r25
 38e:	11 f0       	breq	.+4      	; 0x394 <main+0x29a>
		{
			sendByte(dat);
 390:	94 de       	rcall	.-728    	; 0xba <sendByte>
 392:	11 c0       	rjmp	.+34     	; 0x3b6 <main+0x2bc>
		}
		else
		{
			if ( dat==0b10000000 )
 394:	80 38       	cpi	r24, 0x80	; 128
 396:	21 f4       	brne	.+8      	; 0x3a0 <main+0x2a6>
			{
				writingStatus=0xff;
 398:	9f ef       	ldi	r25, 0xFF	; 255
 39a:	90 93 82 00 	sts	0x0082, r25
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <main+0x2bc>
			}
			else if (dat==0b00000000)
 3a0:	88 23       	and	r24, r24
 3a2:	49 f0       	breq	.+18     	; 0x3b6 <main+0x2bc>
			{
				//nop
			}
			else if(dat&0b10000000)
 3a4:	87 ff       	sbrs	r24, 7
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <main+0x2b8>
			{
				writingStatus = (dat&0b01111111)+1;
 3a8:	8f 77       	andi	r24, 0x7F	; 127
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 82 00 	sts	0x0082, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <main+0x2bc>
			}
			else
			{
				readingStatus = dat + 1;//&0b01111111;
 3b2:	18 2f       	mov	r17, r24
 3b4:	1f 5f       	subi	r17, 0xFF	; 255
     	len = bytesRemaining;
	}

	uchar currentAddress = BUFFERSIZE-bytesRemaining;

	for(uchar i=0; i<len; i++)
 3b6:	e3 94       	inc	r14
 3b8:	08 94       	sec
 3ba:	c1 1c       	adc	r12, r1
 3bc:	d1 1c       	adc	r13, r1
 3be:	9e 2d       	mov	r25, r14
 3c0:	99 0d       	add	r25, r9
 3c2:	eb 14       	cp	r14, r11
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <main+0x2ce>
 3c6:	93 cf       	rjmp	.-218    	; 0x2ee <main+0x1f4>
 3c8:	10 93 81 00 	sts	0x0081, r17
		}

		currentAddress++;
	}

	bytesRemaining -= len;
 3cc:	8a 2d       	mov	r24, r10
 3ce:	8b 19       	sub	r24, r11
 3d0:	80 93 80 00 	sts	0x0080, r24
            uchar rval = usbFunctionWrite(data, len);
            if(rval == 0xff){   /* an error occurred */
                usbTxLen = USBPID_STALL;
            }else if(rval != 0){    /* This was the final package */
 3d4:	88 23       	and	r24, r24
 3d6:	11 f4       	brne	.+4      	; 0x3dc <main+0x2e2>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 3d8:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 3dc:	10 92 94 00 	sts	0x0094, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 3e0:	80 91 60 00 	lds	r24, 0x0060
 3e4:	84 ff       	sbrs	r24, 4
 3e6:	49 c0       	rjmp	.+146    	; 0x47a <main+0x380>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 3e8:	80 91 61 00 	lds	r24, 0x0061
 3ec:	8f 3f       	cpi	r24, 0xFF	; 255
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <main+0x2f8>
 3f0:	44 c0       	rjmp	.+136    	; 0x47a <main+0x380>
 3f2:	18 2f       	mov	r17, r24
 3f4:	89 30       	cpi	r24, 0x09	; 9
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <main+0x300>
 3f8:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 3fa:	81 1b       	sub	r24, r17
 3fc:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 400:	80 91 84 00 	lds	r24, 0x0084
 404:	98 e8       	ldi	r25, 0x88	; 136
 406:	89 27       	eor	r24, r25
 408:	80 93 84 00 	sts	0x0084, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 40c:	11 23       	and	r17, r17
 40e:	41 f1       	breq	.+80     	; 0x460 <main+0x366>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 410:	20 91 92 00 	lds	r18, 0x0092
 414:	30 91 93 00 	lds	r19, 0x0093
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 418:	80 91 65 00 	lds	r24, 0x0065
 41c:	86 ff       	sbrs	r24, 6
 41e:	0d c0       	rjmp	.+26     	; 0x43a <main+0x340>
 420:	a5 e8       	ldi	r26, 0x85	; 133
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 428:	f9 01       	movw	r30, r18
 42a:	e8 0f       	add	r30, r24
 42c:	f9 1f       	adc	r31, r25
 42e:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 430:	ed 93       	st	X+, r30
 432:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 434:	18 17       	cp	r17, r24
 436:	c1 f7       	brne	.-16     	; 0x428 <main+0x32e>
 438:	08 c0       	rjmp	.+16     	; 0x44a <main+0x350>
 43a:	d9 01       	movw	r26, r18
 43c:	91 2f       	mov	r25, r17
 43e:	e5 e8       	ldi	r30, 0x85	; 133
 440:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 442:	8d 91       	ld	r24, X+
 444:	81 93       	st	Z+, r24
                }while(--i);
 446:	91 50       	subi	r25, 0x01	; 1
 448:	e1 f7       	brne	.-8      	; 0x442 <main+0x348>
 44a:	11 50       	subi	r17, 0x01	; 1
 44c:	81 2f       	mov	r24, r17
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	1f 5f       	subi	r17, 0xFF	; 255
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	82 0f       	add	r24, r18
 456:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 458:	90 93 93 00 	sts	0x0093, r25
 45c:	80 93 92 00 	sts	0x0092, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 460:	85 e8       	ldi	r24, 0x85	; 133
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	61 2f       	mov	r22, r17
 466:	5c d0       	rcall	.+184    	; 0x520 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 468:	61 2f       	mov	r22, r17
 46a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 46c:	6c 30       	cpi	r22, 0x0C	; 12
 46e:	19 f0       	breq	.+6      	; 0x476 <main+0x37c>
            usbMsgLen = USB_NO_MSG;
 470:	ef ef       	ldi	r30, 0xFF	; 255
 472:	e0 93 61 00 	sts	0x0061, r30
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 476:	60 93 60 00 	sts	0x0060, r22
 47a:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 47c:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
 47e:	84 71       	andi	r24, 0x14	; 20
 480:	31 f4       	brne	.+12     	; 0x48e <main+0x394>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 482:	91 50       	subi	r25, 0x01	; 1
 484:	d9 f7       	brne	.-10     	; 0x47c <main+0x382>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 486:	10 92 95 00 	sts	0x0095, r1
    usbDeviceAddr = 0;
 48a:	10 92 8f 00 	sts	0x008F, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 48e:	ff 24       	eor	r15, r15
 490:	99 23       	and	r25, r25
 492:	11 f4       	brne	.+4      	; 0x498 <main+0x39e>
 494:	ff 24       	eor	r15, r15
 496:	f3 94       	inc	r15

    if(wasReset != isReset){
 498:	80 91 64 00 	lds	r24, 0x0064
 49c:	8f 15       	cp	r24, r15
 49e:	09 f4       	brne	.+2      	; 0x4a2 <main+0x3a8>
 4a0:	56 ce       	rjmp	.-852    	; 0x14e <main+0x54>
        USB_RESET_HOOK(isReset);
 4a2:	ff 20       	and	r15, r15
 4a4:	29 f5       	brne	.+74     	; 0x4f0 <main+0x3f6>
	int		optDelta = 0x0fff;
	int		delta;
	int		targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);
	uchar	i;
	uchar	j;
	if ( _osccal == 0 )
 4a6:	80 91 83 00 	lds	r24, 0x0083
 4aa:	88 23       	and	r24, r24
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <main+0x3bc>
 4ae:	2c e7       	ldi	r18, 0x7C	; 124
 4b0:	d2 2e       	mov	r13, r18
 4b2:	10 e2       	ldi	r17, 0x20	; 32
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <main+0x3c6>
		j = 0x7c;
	}
	else
	{
		// subsequent corrections
		i = _osccal - 2;
 4b6:	18 2f       	mov	r17, r24
 4b8:	12 50       	subi	r17, 0x02	; 2
		j = _osccal + 2;
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	d9 2e       	mov	r13, r25
 4be:	d8 0e       	add	r13, r24
 4c0:	cf ef       	ldi	r28, 0xFF	; 255
 4c2:	df e0       	ldi	r29, 0x0F	; 15
 4c4:	00 e0       	ldi	r16, 0x00	; 0
 4c6:	0f c0       	rjmp	.+30     	; 0x4e6 <main+0x3ec>
	}

	for(; i<=j; i++)
	{
		OSCCAL = i;
 4c8:	11 bf       	out	0x31, r17	; 49
		delta = usbMeasureFrameLength() - targetValue;
 4ca:	2e d0       	rcall	.+92     	; 0x528 <usbMeasureFrameLength>
 4cc:	84 53       	subi	r24, 0x34	; 52
 4ce:	99 40       	sbci	r25, 0x09	; 9
 4d0:	97 ff       	sbrs	r25, 7
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <main+0x3e0>
 4d4:	90 95       	com	r25
 4d6:	81 95       	neg	r24
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
		if ( delta<0 )
		{
			delta = -delta;
		}
		if ( delta < optDelta )
 4da:	8c 17       	cp	r24, r28
 4dc:	9d 07       	cpc	r25, r29
 4de:	14 f4       	brge	.+4      	; 0x4e4 <main+0x3ea>
 4e0:	ec 01       	movw	r28, r24
 4e2:	01 2f       	mov	r16, r17
		// subsequent corrections
		i = _osccal - 2;
		j = _osccal + 2;
	}

	for(; i<=j; i++)
 4e4:	1f 5f       	subi	r17, 0xFF	; 255
 4e6:	d1 16       	cp	r13, r17
 4e8:	78 f7       	brcc	.-34     	; 0x4c8 <main+0x3ce>
			optVal = i;
			optDelta = delta;
		}
	}

	_osccal = optVal;
 4ea:	00 93 83 00 	sts	0x0083, r16
	OSCCAL = optVal;
 4ee:	01 bf       	out	0x31, r16	; 49
        wasReset = isReset;
 4f0:	f0 92 64 00 	sts	0x0064, r15
 4f4:	2c ce       	rjmp	.-936    	; 0x14e <main+0x54>

000004f6 <usbCrc16>:
 4f6:	a8 2f       	mov	r26, r24
 4f8:	b9 2f       	mov	r27, r25
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	50 ea       	ldi	r21, 0xA0	; 160
 502:	60 95       	com	r22
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	09 c0       	rjmp	.+18     	; 0x51a <usbCrcLoopEntry>

00000508 <usbCrcByteLoop>:
 508:	2d 91       	ld	r18, X+
 50a:	82 27       	eor	r24, r18

0000050c <usbCrcBitLoop>:
 50c:	97 95       	ror	r25
 50e:	87 95       	ror	r24
 510:	10 f0       	brcs	.+4      	; 0x516 <usbCrcNoXor>
 512:	84 27       	eor	r24, r20
 514:	95 27       	eor	r25, r21

00000516 <usbCrcNoXor>:
 516:	30 5e       	subi	r19, 0xE0	; 224
 518:	c8 f3       	brcs	.-14     	; 0x50c <usbCrcBitLoop>

0000051a <usbCrcLoopEntry>:
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	a8 f3       	brcs	.-22     	; 0x508 <usbCrcByteLoop>

0000051e <usbCrcReady>:
 51e:	08 95       	ret

00000520 <usbCrc16Append>:
 520:	ea df       	rcall	.-44     	; 0x4f6 <usbCrc16>
 522:	8d 93       	st	X+, r24
 524:	9d 93       	st	X+, r25
 526:	08 95       	ret

00000528 <usbMeasureFrameLength>:
 528:	a6 e0       	ldi	r26, 0x06	; 6
 52a:	88 27       	eor	r24, r24
 52c:	99 27       	eor	r25, r25

0000052e <usbMFTime16>:
 52e:	aa 95       	dec	r26
 530:	69 f0       	breq	.+26     	; 0x54c <usbMFTimeout>

00000532 <usbMFWaitStrobe>:
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	e1 f3       	breq	.-8      	; 0x52e <usbMFTime16>
 536:	b4 99       	sbic	0x16, 4	; 22
 538:	fc cf       	rjmp	.-8      	; 0x532 <usbMFWaitStrobe>

0000053a <usbMFWaitIdle>:
 53a:	b4 9b       	sbis	0x16, 4	; 22
 53c:	fe cf       	rjmp	.-4      	; 0x53a <usbMFWaitIdle>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	99 27       	eor	r25, r25

00000542 <usbMFWaitLoop>:
 542:	a6 b3       	in	r26, 0x16	; 22
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	11 f0       	breq	.+4      	; 0x54c <usbMFTimeout>
 548:	a4 71       	andi	r26, 0x14	; 20
 54a:	d9 f7       	brne	.-10     	; 0x542 <usbMFWaitLoop>

0000054c <usbMFTimeout>:
 54c:	08 95       	ret

0000054e <__vector_1>:
 54e:	cf 93       	push	r28
 550:	cf b7       	in	r28, 0x3f	; 63
 552:	cf 93       	push	r28

00000554 <waitForJ>:
 554:	c3 95       	inc	r28
 556:	b4 9b       	sbis	0x16, 4	; 22
 558:	e9 f7       	brne	.-6      	; 0x554 <waitForJ>

0000055a <waitForK>:
 55a:	b4 9b       	sbis	0x16, 4	; 22
 55c:	0b c0       	rjmp	.+22     	; 0x574 <foundK>
 55e:	b4 9b       	sbis	0x16, 4	; 22
 560:	09 c0       	rjmp	.+18     	; 0x574 <foundK>
 562:	b4 9b       	sbis	0x16, 4	; 22
 564:	07 c0       	rjmp	.+14     	; 0x574 <foundK>
 566:	b4 9b       	sbis	0x16, 4	; 22
 568:	05 c0       	rjmp	.+10     	; 0x574 <foundK>
 56a:	b4 9b       	sbis	0x16, 4	; 22
 56c:	03 c0       	rjmp	.+6      	; 0x574 <foundK>
 56e:	b4 9b       	sbis	0x16, 4	; 22
 570:	01 c0       	rjmp	.+2      	; 0x574 <foundK>
 572:	d5 c0       	rjmp	.+426    	; 0x71e <sofError>

00000574 <foundK>:
 574:	0f 92       	push	r0
 576:	df 93       	push	r29
 578:	c0 91 91 00 	lds	r28, 0x0091
 57c:	dd 27       	eor	r29, r29
 57e:	c8 56       	subi	r28, 0x68	; 104
 580:	df 4f       	sbci	r29, 0xFF	; 255
 582:	01 2e       	mov	r0, r17
 584:	b4 9b       	sbis	0x16, 4	; 22
 586:	03 c0       	rjmp	.+6      	; 0x58e <haveTwoBitsK>
 588:	df 91       	pop	r29
 58a:	0f 90       	pop	r0
 58c:	e6 cf       	rjmp	.-52     	; 0x55a <waitForK>

0000058e <haveTwoBitsK>:
 58e:	2f 93       	push	r18
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	4f 93       	push	r20
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	4f 6f       	ori	r20, 0xFF	; 255
 59a:	06 b3       	in	r16, 0x16	; 22
 59c:	04 fb       	bst	r16, 4
 59e:	20 f9       	bld	r18, 0
 5a0:	5f 93       	push	r21
 5a2:	3f 93       	push	r19
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	3b e0       	ldi	r19, 0x0B	; 11
 5a8:	65 c0       	rjmp	.+202    	; 0x674 <rxbit1>

000005aa <continueWithBit5>:
 5aa:	16 b3       	in	r17, 0x16	; 22
 5ac:	01 26       	eor	r0, r17
 5ae:	50 29       	or	r21, r0
 5b0:	54 fd       	sbrc	r21, 4
 5b2:	c8 95       	lpm
 5b4:	56 b3       	in	r21, 0x16	; 22
 5b6:	01 27       	eor	r16, r17
 5b8:	04 fb       	bst	r16, 4
 5ba:	25 f9       	bld	r18, 5
 5bc:	2f 73       	andi	r18, 0x3F	; 63
 5be:	06 b3       	in	r16, 0x16	; 22
 5c0:	b1 f0       	breq	.+44     	; 0x5ee <unstuff5>
 5c2:	50 27       	eor	r21, r16
 5c4:	10 27       	eor	r17, r16
 5c6:	14 fb       	bst	r17, 4
 5c8:	26 f9       	bld	r18, 6

000005ca <didUnstuff6>:
 5ca:	06 b2       	in	r0, 0x16	; 22
 5cc:	22 30       	cpi	r18, 0x02	; 2
 5ce:	f0 f0       	brcs	.+60     	; 0x60c <unstuff6>

000005d0 <didUnstuff5>:
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <didUnstuff5+0x2>
 5d2:	16 b3       	in	r17, 0x16	; 22
 5d4:	01 27       	eor	r16, r17
 5d6:	04 fb       	bst	r16, 4
 5d8:	27 f9       	bld	r18, 7

000005da <didUnstuff7>:
 5da:	01 26       	eor	r0, r17
 5dc:	50 29       	or	r21, r0
 5de:	06 b2       	in	r0, 0x16	; 22
 5e0:	24 30       	cpi	r18, 0x04	; 4
 5e2:	e8 f5       	brcc	.+122    	; 0x65e <rxLoop>

000005e4 <unstuff7>:
 5e4:	4f 77       	andi	r20, 0x7F	; 127
 5e6:	20 68       	ori	r18, 0x80	; 128
 5e8:	16 b3       	in	r17, 0x16	; 22
 5ea:	00 00       	nop
 5ec:	f6 cf       	rjmp	.-20     	; 0x5da <didUnstuff7>

000005ee <unstuff5>:
 5ee:	50 27       	eor	r21, r16
 5f0:	4f 7d       	andi	r20, 0xDF	; 223
 5f2:	20 62       	ori	r18, 0x20	; 32
 5f4:	06 b2       	in	r0, 0x16	; 22
 5f6:	10 2f       	mov	r17, r16
 5f8:	00 00       	nop
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <unstuff5+0xe>
 5fc:	06 b3       	in	r16, 0x16	; 22
 5fe:	00 26       	eor	r0, r16
 600:	50 29       	or	r21, r0
 602:	10 27       	eor	r17, r16
 604:	14 fb       	bst	r17, 4
 606:	26 f9       	bld	r18, 6
 608:	06 b2       	in	r0, 0x16	; 22
 60a:	e2 cf       	rjmp	.-60     	; 0x5d0 <didUnstuff5>

0000060c <unstuff6>:
 60c:	4f 7b       	andi	r20, 0xBF	; 191
 60e:	06 b3       	in	r16, 0x16	; 22
 610:	20 64       	ori	r18, 0x40	; 64
 612:	00 c0       	rjmp	.+0      	; 0x614 <unstuff6+0x8>
 614:	da cf       	rjmp	.-76     	; 0x5ca <didUnstuff6>

00000616 <unstuff0>:
 616:	01 26       	eor	r0, r17
 618:	50 29       	or	r21, r0
 61a:	14 71       	andi	r17, 0x14	; 20
 61c:	06 b2       	in	r0, 0x16	; 22
 61e:	69 f1       	breq	.+90     	; 0x67a <didUnstuff0>
 620:	4e 7f       	andi	r20, 0xFE	; 254
 622:	21 60       	ori	r18, 0x01	; 1
 624:	01 2f       	mov	r16, r17
 626:	16 b3       	in	r17, 0x16	; 22
 628:	28 c0       	rjmp	.+80     	; 0x67a <didUnstuff0>

0000062a <unstuff1>:
 62a:	00 26       	eor	r0, r16
 62c:	50 29       	or	r21, r0
 62e:	4d 7f       	andi	r20, 0xFD	; 253
 630:	06 b2       	in	r0, 0x16	; 22
 632:	22 60       	ori	r18, 0x02	; 2
 634:	10 2f       	mov	r17, r16
 636:	29 c0       	rjmp	.+82     	; 0x68a <didUnstuff1>

00000638 <unstuff2>:
 638:	01 26       	eor	r0, r17
 63a:	50 29       	or	r21, r0
 63c:	4b 7f       	andi	r20, 0xFB	; 251
 63e:	06 b2       	in	r0, 0x16	; 22
 640:	24 60       	ori	r18, 0x04	; 4
 642:	01 2f       	mov	r16, r17
 644:	2d c0       	rjmp	.+90     	; 0x6a0 <didUnstuff2>

00000646 <unstuff3>:
 646:	16 b3       	in	r17, 0x16	; 22
 648:	01 26       	eor	r0, r17
 64a:	50 29       	or	r21, r0
 64c:	47 7f       	andi	r20, 0xF7	; 247
 64e:	28 60       	ori	r18, 0x08	; 8
 650:	00 00       	nop
 652:	06 b2       	in	r0, 0x16	; 22
 654:	2e c0       	rjmp	.+92     	; 0x6b2 <didUnstuff3>

00000656 <unstuff4>:
 656:	4f 7e       	andi	r20, 0xEF	; 239
 658:	06 b3       	in	r16, 0x16	; 22
 65a:	20 61       	ori	r18, 0x10	; 16
 65c:	30 c0       	rjmp	.+96     	; 0x6be <didUnstuff4>

0000065e <rxLoop>:
 65e:	42 27       	eor	r20, r18
 660:	06 b3       	in	r16, 0x16	; 22
 662:	49 93       	st	Y+, r20
 664:	00 26       	eor	r0, r16
 666:	50 29       	or	r21, r0
 668:	10 27       	eor	r17, r16
 66a:	06 b2       	in	r0, 0x16	; 22
 66c:	4f ef       	ldi	r20, 0xFF	; 255
 66e:	14 fb       	bst	r17, 4
 670:	20 f9       	bld	r18, 0
 672:	29 7f       	andi	r18, 0xF9	; 249

00000674 <rxbit1>:
 674:	16 b3       	in	r17, 0x16	; 22
 676:	79 f2       	breq	.-98     	; 0x616 <unstuff0>
 678:	14 71       	andi	r17, 0x14	; 20

0000067a <didUnstuff0>:
 67a:	59 f1       	breq	.+86     	; 0x6d2 <se0>
 67c:	01 26       	eor	r0, r17
 67e:	50 29       	or	r21, r0
 680:	06 b2       	in	r0, 0x16	; 22
 682:	01 27       	eor	r16, r17
 684:	04 fb       	bst	r16, 4
 686:	21 f9       	bld	r18, 1
 688:	23 7f       	andi	r18, 0xF3	; 243

0000068a <didUnstuff1>:
 68a:	06 b3       	in	r16, 0x16	; 22
 68c:	71 f2       	breq	.-100    	; 0x62a <unstuff1>
 68e:	00 26       	eor	r0, r16
 690:	50 29       	or	r21, r0
 692:	31 50       	subi	r19, 0x01	; 1
 694:	d0 f0       	brcs	.+52     	; 0x6ca <overflow>
 696:	06 b2       	in	r0, 0x16	; 22
 698:	10 27       	eor	r17, r16
 69a:	14 fb       	bst	r17, 4
 69c:	22 f9       	bld	r18, 2
 69e:	27 7e       	andi	r18, 0xE7	; 231

000006a0 <didUnstuff2>:
 6a0:	16 b3       	in	r17, 0x16	; 22
 6a2:	51 f2       	breq	.-108    	; 0x638 <unstuff2>
 6a4:	01 26       	eor	r0, r17
 6a6:	50 29       	or	r21, r0
 6a8:	01 27       	eor	r16, r17
 6aa:	04 fb       	bst	r16, 4
 6ac:	06 b2       	in	r0, 0x16	; 22
 6ae:	23 f9       	bld	r18, 3
 6b0:	2f 7c       	andi	r18, 0xCF	; 207

000006b2 <didUnstuff3>:
 6b2:	49 f2       	breq	.-110    	; 0x646 <unstuff3>
 6b4:	00 00       	nop
 6b6:	06 b3       	in	r16, 0x16	; 22
 6b8:	10 27       	eor	r17, r16
 6ba:	14 fb       	bst	r17, 4
 6bc:	24 f9       	bld	r18, 4

000006be <didUnstuff4>:
 6be:	00 26       	eor	r0, r16
 6c0:	50 29       	or	r21, r0
 6c2:	06 b2       	in	r0, 0x16	; 22
 6c4:	2f 79       	andi	r18, 0x9F	; 159
 6c6:	39 f2       	breq	.-114    	; 0x656 <unstuff4>
 6c8:	70 cf       	rjmp	.-288    	; 0x5aa <continueWithBit5>

000006ca <overflow>:
 6ca:	10 e4       	ldi	r17, 0x40	; 64
 6cc:	1a bf       	out	0x3a, r17	; 58

000006ce <ignorePacket>:
 6ce:	00 27       	eor	r16, r16
 6d0:	19 c0       	rjmp	.+50     	; 0x704 <handleSetupOrOut>

000006d2 <se0>:
 6d2:	3b 50       	subi	r19, 0x0B	; 11
 6d4:	31 95       	neg	r19
 6d6:	c3 1b       	sub	r28, r19
 6d8:	d0 40       	sbci	r29, 0x00	; 0
 6da:	10 e4       	ldi	r17, 0x40	; 64
 6dc:	1a bf       	out	0x3a, r17	; 58
 6de:	08 81       	ld	r16, Y
 6e0:	03 3c       	cpi	r16, 0xC3	; 195
 6e2:	09 f1       	breq	.+66     	; 0x726 <handleData>
 6e4:	0b 34       	cpi	r16, 0x4B	; 75
 6e6:	f9 f0       	breq	.+62     	; 0x726 <handleData>
 6e8:	20 91 8f 00 	lds	r18, 0x008F
 6ec:	19 81       	ldd	r17, Y+1	; 0x01
 6ee:	11 0f       	add	r17, r17
 6f0:	12 13       	cpse	r17, r18
 6f2:	ed cf       	rjmp	.-38     	; 0x6ce <ignorePacket>
 6f4:	4a 81       	ldd	r20, Y+2	; 0x02
 6f6:	44 1f       	adc	r20, r20
 6f8:	09 36       	cpi	r16, 0x69	; 105
 6fa:	51 f1       	breq	.+84     	; 0x750 <handleIn>
 6fc:	0d 32       	cpi	r16, 0x2D	; 45
 6fe:	11 f0       	breq	.+4      	; 0x704 <handleSetupOrOut>
 700:	01 3e       	cpi	r16, 0xE1	; 225
 702:	29 f7       	brne	.-54     	; 0x6ce <ignorePacket>

00000704 <handleSetupOrOut>:
 704:	00 93 96 00 	sts	0x0096, r16

00000708 <doReturn>:
 708:	3f 91       	pop	r19
 70a:	5f 91       	pop	r21
 70c:	4f 91       	pop	r20
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	2f 91       	pop	r18
 714:	df 91       	pop	r29
 716:	0f 90       	pop	r0
 718:	ca b7       	in	r28, 0x3a	; 58
 71a:	c6 fd       	sbrc	r28, 6
 71c:	1b cf       	rjmp	.-458    	; 0x554 <waitForJ>

0000071e <sofError>:
 71e:	cf 91       	pop	r28
 720:	cf bf       	out	0x3f, r28	; 63
 722:	cf 91       	pop	r28
 724:	18 95       	reti

00000726 <handleData>:
 726:	20 91 96 00 	lds	r18, 0x0096
 72a:	22 23       	and	r18, r18
 72c:	69 f3       	breq	.-38     	; 0x708 <doReturn>
 72e:	10 91 94 00 	lds	r17, 0x0094
 732:	11 23       	and	r17, r17
 734:	31 f5       	brne	.+76     	; 0x782 <sendNakAndReti>
 736:	34 30       	cpi	r19, 0x04	; 4
 738:	32 f1       	brmi	.+76     	; 0x786 <sendAckAndReti>
 73a:	30 93 94 00 	sts	0x0094, r19
 73e:	20 93 90 00 	sts	0x0090, r18
 742:	10 91 91 00 	lds	r17, 0x0091
 746:	3b e0       	ldi	r19, 0x0B	; 11
 748:	31 1b       	sub	r19, r17
 74a:	30 93 91 00 	sts	0x0091, r19
 74e:	1b c0       	rjmp	.+54     	; 0x786 <sendAckAndReti>

00000750 <handleIn>:
 750:	00 91 94 00 	lds	r16, 0x0094
 754:	01 30       	cpi	r16, 0x01	; 1
 756:	ac f4       	brge	.+42     	; 0x782 <sendNakAndReti>
 758:	0a e5       	ldi	r16, 0x5A	; 90
 75a:	4f 70       	andi	r20, 0x0F	; 15
 75c:	91 f4       	brne	.+36     	; 0x782 <sendNakAndReti>
 75e:	30 91 60 00 	lds	r19, 0x0060
 762:	34 fd       	sbrc	r19, 4
 764:	11 c0       	rjmp	.+34     	; 0x788 <sendCntAndReti>
 766:	00 93 60 00 	sts	0x0060, r16
 76a:	c4 e8       	ldi	r28, 0x84	; 132
 76c:	d0 e0       	ldi	r29, 0x00	; 0
 76e:	10 c0       	rjmp	.+32     	; 0x790 <usbSendAndReti>

00000770 <bitstuff7>:
 770:	05 27       	eor	r16, r21
 772:	10 e0       	ldi	r17, 0x00	; 0
 774:	00 c0       	rjmp	.+0      	; 0x776 <bitstuff7+0x6>
 776:	21 c0       	rjmp	.+66     	; 0x7ba <didStuff7>

00000778 <bitstuffN>:
 778:	05 27       	eor	r16, r21
 77a:	10 e0       	ldi	r17, 0x00	; 0
 77c:	c8 95       	lpm
 77e:	08 bb       	out	0x18, r16	; 24
 780:	14 c0       	rjmp	.+40     	; 0x7aa <didStuffN>

00000782 <sendNakAndReti>:
 782:	3a e5       	ldi	r19, 0x5A	; 90
 784:	01 c0       	rjmp	.+2      	; 0x788 <sendCntAndReti>

00000786 <sendAckAndReti>:
 786:	32 ed       	ldi	r19, 0xD2	; 210

00000788 <sendCntAndReti>:
 788:	03 2e       	mov	r0, r19
 78a:	c0 e0       	ldi	r28, 0x00	; 0
 78c:	d0 e0       	ldi	r29, 0x00	; 0
 78e:	32 e0       	ldi	r19, 0x02	; 2

00000790 <usbSendAndReti>:
 790:	17 b3       	in	r17, 0x17	; 23
 792:	14 61       	ori	r17, 0x14	; 20
 794:	c4 9a       	sbi	0x18, 4	; 24
 796:	08 b3       	in	r16, 0x18	; 24
 798:	17 bb       	out	0x17, r17	; 23
 79a:	54 e1       	ldi	r21, 0x14	; 20
 79c:	20 e8       	ldi	r18, 0x80	; 128
 79e:	4f ef       	ldi	r20, 0xFF	; 255

000007a0 <bitloop>:
 7a0:	20 ff       	sbrs	r18, 0
 7a2:	05 27       	eor	r16, r21
 7a4:	08 bb       	out	0x18, r16	; 24
 7a6:	27 95       	ror	r18
 7a8:	17 95       	ror	r17

000007aa <didStuffN>:
 7aa:	1c 3f       	cpi	r17, 0xFC	; 252
 7ac:	28 f7       	brcc	.-54     	; 0x778 <bitstuffN>
 7ae:	00 00       	nop
 7b0:	45 52       	subi	r20, 0x25	; 37
 7b2:	b0 f7       	brcc	.-20     	; 0x7a0 <bitloop>
 7b4:	20 ff       	sbrs	r18, 0
 7b6:	05 27       	eor	r16, r21
 7b8:	27 95       	ror	r18

000007ba <didStuff7>:
 7ba:	08 bb       	out	0x18, r16	; 24
 7bc:	17 95       	ror	r17
 7be:	1c 3f       	cpi	r17, 0xFC	; 252
 7c0:	b8 f6       	brcc	.-82     	; 0x770 <bitstuff7>
 7c2:	29 91       	ld	r18, Y+
 7c4:	3a 95       	dec	r19
 7c6:	61 f7       	brne	.-40     	; 0x7a0 <bitloop>
 7c8:	0b 7e       	andi	r16, 0xEB	; 235
 7ca:	10 91 95 00 	lds	r17, 0x0095
 7ce:	11 0f       	add	r17, r17
 7d0:	08 bb       	out	0x18, r16	; 24
 7d2:	c2 50       	subi	r28, 0x02	; 2
 7d4:	d0 40       	sbci	r29, 0x00	; 0
 7d6:	11 f0       	breq	.+4      	; 0x7dc <skipAddrAssign>
 7d8:	10 93 8f 00 	sts	0x008F, r17

000007dc <skipAddrAssign>:
 7dc:	10 e4       	ldi	r17, 0x40	; 64
 7de:	1a bf       	out	0x3a, r17	; 58
 7e0:	00 61       	ori	r16, 0x10	; 16
 7e2:	17 b3       	in	r17, 0x17	; 23
 7e4:	1b 7e       	andi	r17, 0xEB	; 235
 7e6:	40 2f       	mov	r20, r16
 7e8:	4b 7e       	andi	r20, 0xEB	; 235
 7ea:	54 e0       	ldi	r21, 0x04	; 4

000007ec <se0Delay>:
 7ec:	5a 95       	dec	r21
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <se0Delay>
 7f0:	08 bb       	out	0x18, r16	; 24
 7f2:	17 bb       	out	0x17, r17	; 23
 7f4:	48 bb       	out	0x18, r20	; 24
 7f6:	88 cf       	rjmp	.-240    	; 0x708 <doReturn>
