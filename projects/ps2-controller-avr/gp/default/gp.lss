
gp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000045c  000004d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000072  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006d3  00000000  00000000  00000596  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ab  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006c7  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000194  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000336  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 18 01 	call	0x230	; 0x230 <main>
  7a:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <gameByte>:
 
// PSx controller communication function.
// send a byte on the command line and receive one on the data line.
// needs Attention pin to have gone low before called to activate controller.
int gameByte(short int command)
{
  82:	bc 01       	movw	r22, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	8a 95       	dec	r24
  88:	f1 f7       	brne	.-4      	; 0x86 <gameByte+0x4>
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
	    if(command & _BV(i)) sbi(PORTB, PScommand);      // bit bang "command" out on PScommand wire.
            else cbi(PORTB, PScommand);
            cbi(PORTB, PSclock);                             // CLOCK LOW
            _delay_us(1);                                     // wait for output to stabilise
            sbi(PORTB, PSclock);                             // CLOCK HIGH
            if((PINB & _BV(PSdata))) {sbi(data, i);}         // read PSdata pin and store
  92:	a2 e0       	ldi	r26, 0x02	; 2
  94:	e1 e0       	ldi	r30, 0x01	; 1
  96:	f0 e0       	ldi	r31, 0x00	; 0
    short int i ;
    _delay_us(1);
    short int data = 0x00;                                   // clear data variable to save setting low bits later.
    for(i=0;i<8;i++)
    {
	    if(command & _BV(i)) sbi(PORTB, PScommand);      // bit bang "command" out on PScommand wire.
  98:	cb 01       	movw	r24, r22
  9a:	02 2e       	mov	r0, r18
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <gameByte+0x20>
  9e:	95 95       	asr	r25
  a0:	87 95       	ror	r24
  a2:	0a 94       	dec	r0
  a4:	e2 f7       	brpl	.-8      	; 0x9e <gameByte+0x1c>
  a6:	80 ff       	sbrs	r24, 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <gameByte+0x2c>
  aa:	c5 9a       	sbi	0x18, 5	; 24
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <gameByte+0x2e>
            else cbi(PORTB, PScommand);
  ae:	c5 98       	cbi	0x18, 5	; 24
            cbi(PORTB, PSclock);                             // CLOCK LOW
  b0:	c2 98       	cbi	0x18, 2	; 24
  b2:	8a 2f       	mov	r24, r26
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <gameByte+0x32>
            _delay_us(1);                                     // wait for output to stabilise
            sbi(PORTB, PSclock);                             // CLOCK HIGH
  b8:	c2 9a       	sbi	0x18, 2	; 24
            if((PINB & _BV(PSdata))) {sbi(data, i);}         // read PSdata pin and store
  ba:	b3 9b       	sbis	0x16, 3	; 22
  bc:	09 c0       	rjmp	.+18     	; 0xd0 <gameByte+0x4e>
  be:	cf 01       	movw	r24, r30
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <gameByte+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <gameByte+0x42>
  cc:	48 2b       	or	r20, r24
  ce:	59 2b       	or	r21, r25
int gameByte(short int command)
{
    short int i ;
    _delay_us(1);
    short int data = 0x00;                                   // clear data variable to save setting low bits later.
    for(i=0;i<8;i++)
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	28 30       	cpi	r18, 0x08	; 8
  d6:	31 05       	cpc	r19, r1
  d8:	f9 f6       	brne	.-66     	; 0x98 <gameByte+0x16>
            _delay_us(1);                                     // wait for output to stabilise
            sbi(PORTB, PSclock);                             // CLOCK HIGH
            if((PINB & _BV(PSdata))) {sbi(data, i);}         // read PSdata pin and store
            //else {cbi(data, i);}
    }
    sbi(PORTB, PScommand);
  da:	c5 9a       	sbi	0x18, 5	; 24
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <gameByte+0x5c>

    _delay_us(20);                                            // wait for ACK to pass.
	
    return(data);
}
  e2:	ca 01       	movw	r24, r20
  e4:	08 95       	ret

000000e6 <wrcomm>:

}

void wrcomm(unsigned char Command)
{
cbi(PORTA,RS);//
  e6:	d8 98       	cbi	0x1b, 0	; 27
PORTC = Command;
  e8:	85 bb       	out	0x15, r24	; 21
 sbi(PORTA,EN);
  ea:	da 9a       	sbi	0x1b, 2	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	fc 01       	movw	r30, r24
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <wrcomm+0xc>
_delay_ms(20); 
cbi(PORTA,EN);
  f6:	da 98       	cbi	0x1b, 2	; 27
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <wrcomm+0x12>
_delay_ms(20);
}
  fc:	08 95       	ret

000000fe <LCD_init>:
    return(data);
}

void LCD_init(void)
{
wrcomm(0x38); //initialize LCD 2 lines, 5x7 matrix  00111000
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
wrcomm(0x06);//entry mode
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
wrcomm(0x01);//Clear LCD
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
wrcomm(0x80); //fist line first column
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
wrcomm(0x0C); //Display on, Cursor Blinking
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
//wrcomm(0x08);

}
 126:	08 95       	ret

00000128 <wrdata>:
_delay_ms(20);
}

void wrdata(unsigned char Data)
{
sbi(PORTA,RS); 
 128:	d8 9a       	sbi	0x1b, 0	; 27

PORTC = Data;
 12a:	85 bb       	out	0x15, r24	; 21
sbi(PORTA,EN);
 12c:	da 9a       	sbi	0x1b, 2	; 27
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	9c e9       	ldi	r25, 0x9C	; 156
 132:	fc 01       	movw	r30, r24
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <wrdata+0xc>
_delay_ms(20);
cbi(PORTA,EN); 
 138:	da 98       	cbi	0x1b, 2	; 27
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <wrdata+0x12>
_delay_ms(20);
}
 13e:	08 95       	ret

00000140 <LCD_String>:


void LCD_String (unsigned char *string)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 146:	03 c0       	rjmp	.+6      	; 0x14e <LCD_String+0xe>
while (*string)
wrdata(*string++);
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	0e 94 94 00 	call	0x128	; 0x128 <wrdata>
}


void LCD_String (unsigned char *string)
{
while (*string)
 14e:	88 81       	ld	r24, Y
 150:	88 23       	and	r24, r24
 152:	d1 f7       	brne	.-12     	; 0x148 <LCD_String+0x8>
wrdata(*string++);
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <analog>:


void analog(int datac, int datad)
{
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	8b 01       	movw	r16, r22
if(datac==0x00)
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	19 f4       	brne	.+6      	; 0x170 <analog+0x16>
	LCD_String("LEFT");
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	05 c0       	rjmp	.+10     	; 0x17a <analog+0x20>
if(datac==0xff)
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	91 05       	cpc	r25, r1
 174:	21 f4       	brne	.+8      	; 0x17e <analog+0x24>
	LCD_String("RIGHT");
 176:	85 e6       	ldi	r24, 0x65	; 101
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>
if(datad==0x00)
 17e:	01 2b       	or	r16, r17
 180:	21 f4       	brne	.+8      	; 0x18a <analog+0x30>
	LCD_String("UP");
 182:	8b e6       	ldi	r24, 0x6B	; 107
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>
if(datac==0xff)
 18a:	cf 3f       	cpi	r28, 0xFF	; 255
 18c:	d1 05       	cpc	r29, r1
 18e:	21 f4       	brne	.+8      	; 0x198 <analog+0x3e>
	LCD_String("DOWN");
 190:	8e e6       	ldi	r24, 0x6E	; 110
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <traverse>:


void traverse(char dataa, char datab)
{
 1a2:	1f 93       	push	r17
 1a4:	16 2f       	mov	r17, r22
//if(dataa==0xfe)
//	LCD_String("SEL");
if(dataa==0xf7)
 1a6:	87 3f       	cpi	r24, 0xF7	; 247
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <traverse+0xe>
	LCD_String("START");
 1aa:	83 e7       	ldi	r24, 0x73	; 115
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <traverse+0x34>
if(dataa==0xef)
 1b0:	8f 3e       	cpi	r24, 0xEF	; 239
 1b2:	19 f4       	brne	.+6      	; 0x1ba <traverse+0x18>
	LCD_String("UP");
 1b4:	8b e6       	ldi	r24, 0x6B	; 107
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e c0       	rjmp	.+28     	; 0x1d6 <traverse+0x34>
if(dataa==0x7f)
 1ba:	8f 37       	cpi	r24, 0x7F	; 127
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <traverse+0x22>
	LCD_String("LEFT");
 1be:	80 e6       	ldi	r24, 0x60	; 96
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <traverse+0x34>
if(dataa==0xdf)
 1c4:	8f 3d       	cpi	r24, 0xDF	; 223
 1c6:	19 f4       	brne	.+6      	; 0x1ce <traverse+0x2c>
	LCD_String("RIGHT");
 1c8:	85 e6       	ldi	r24, 0x65	; 101
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <traverse+0x34>
if(dataa==0x9f)
 1ce:	8f 39       	cpi	r24, 0x9F	; 159
 1d0:	21 f4       	brne	.+8      	; 0x1da <traverse+0x38>
	LCD_String("DOWN");
 1d2:	8e e6       	ldi	r24, 0x6E	; 110
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>

if (datab==0xfe)
 1da:	1e 3f       	cpi	r17, 0xFE	; 254
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <traverse+0x42>
	LCD_String("L2");
 1de:	89 e7       	ldi	r24, 0x79	; 121
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	22 c0       	rjmp	.+68     	; 0x228 <traverse+0x86>
if(datab==0xfd)
 1e4:	1d 3f       	cpi	r17, 0xFD	; 253
 1e6:	19 f4       	brne	.+6      	; 0x1ee <traverse+0x4c>
	LCD_String("R2");
 1e8:	8c e7       	ldi	r24, 0x7C	; 124
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	1d c0       	rjmp	.+58     	; 0x228 <traverse+0x86>
if(datab==0xfb)
 1ee:	1b 3f       	cpi	r17, 0xFB	; 251
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <traverse+0x56>
	LCD_String("L1");
 1f2:	8f e7       	ldi	r24, 0x7F	; 127
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	18 c0       	rjmp	.+48     	; 0x228 <traverse+0x86>
if(datab==0xf7)
 1f8:	17 3f       	cpi	r17, 0xF7	; 247
 1fa:	19 f4       	brne	.+6      	; 0x202 <traverse+0x60>
	LCD_String("R1");
 1fc:	82 e8       	ldi	r24, 0x82	; 130
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	13 c0       	rjmp	.+38     	; 0x228 <traverse+0x86>
if(datab==0xef)
 202:	1f 3e       	cpi	r17, 0xEF	; 239
 204:	19 f4       	brne	.+6      	; 0x20c <traverse+0x6a>
	LCD_String("A");
 206:	85 e8       	ldi	r24, 0x85	; 133
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e c0       	rjmp	.+28     	; 0x228 <traverse+0x86>
if(datab==0xdf)
 20c:	1f 3d       	cpi	r17, 0xDF	; 223
 20e:	19 f4       	brne	.+6      	; 0x216 <traverse+0x74>
	LCD_String("O");
 210:	87 e8       	ldi	r24, 0x87	; 135
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	09 c0       	rjmp	.+18     	; 0x228 <traverse+0x86>
if(datab==0xbf)
 216:	1f 3b       	cpi	r17, 0xBF	; 191
 218:	19 f4       	brne	.+6      	; 0x220 <traverse+0x7e>
	LCD_String("X");	
 21a:	89 e8       	ldi	r24, 0x89	; 137
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	04 c0       	rjmp	.+8      	; 0x228 <traverse+0x86>
if(datab==0x7f)
 220:	1f 37       	cpi	r17, 0x7F	; 127
 222:	21 f4       	brne	.+8      	; 0x22c <traverse+0x8a>
	LCD_String("U");
 224:	8b e8       	ldi	r24, 0x8B	; 139
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>
}
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <main>:

int main(void)
{
 230:	bf 92       	push	r11
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
DDRA=0xff;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a bb       	out	0x1a, r24	; 26
DDRC=0xff;
 246:	84 bb       	out	0x14, r24	; 20
LCD_init();
 248:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_init>
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	9e e4       	ldi	r25, 0x4E	; 78
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x20>
_delay_ms(10);
wrcomm(0x80);
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	0e 94 73 00 	call	0xe6	; 0xe6 <wrcomm>
//LCD_String("hello");

   // PSx controller I/O pin setup:
   sbi(DDRB, PB2);                 // clock. output. (blue)
 25a:	ba 9a       	sbi	0x17, 2	; 23

   cbi(DDRB, PB3);                 // data. input. (brown)
 25c:	bb 98       	cbi	0x17, 3	; 23
   sbi(PORTB, PB3);               //    enable pullup resistor
 25e:	c3 9a       	sbi	0x18, 3	; 24

   cbi(DDRB, PB4);                 // acknolage. input. (green)
 260:	bc 98       	cbi	0x17, 4	; 23
   sbi(PORTB, PB4);               //    enable pullup resistor
 262:	c4 9a       	sbi	0x18, 4	; 24

   sbi(DDRB, PB5);                  // command. output. (orange)
 264:	bd 9a       	sbi	0x17, 5	; 23

   sbi(DDRB, PB6);                 // attention. output. (yellow)
 266:	be 9a       	sbi	0x17, 6	; 23
 268:	90 ed       	ldi	r25, 0xD0	; 208
 26a:	c9 2e       	mov	r12, r25
 26c:	97 e0       	ldi	r25, 0x07	; 7
 26e:	d9 2e       	mov	r13, r25
   // this loop but occasionally errors occur and a 2nd or 3rd itteration happen.
   unsigned char chk_ana = 0, cnt = 0;
   int d;
   while(chk_ana != 0x73){
       // put controller in config mode
       sbi(PORTB, PScommand);
 270:	c0 e2       	ldi	r28, 0x20	; 32
 272:	de e4       	ldi	r29, 0x4E	; 78
 274:	c5 9a       	sbi	0x18, 5	; 24
       sbi(PORTB, PSclock);
 276:	c2 9a       	sbi	0x18, 2	; 24
       cbi(PORTB, PSattention);
 278:	c6 98       	cbi	0x18, 6	; 24

       gameByte(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x43);
 282:	83 e4       	ldi	r24, 0x43	; 67
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x01);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>

       sbi(PORTB, PScommand);
 2a2:	c5 9a       	sbi	0x18, 5	; 24
 2a4:	c6 01       	movw	r24, r12
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0x76>
       _delay_ms(1);
       sbi(PORTB, PSattention);
 2aa:	c6 9a       	sbi	0x18, 6	; 24
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x7e>

       _delay_ms(10);

       // put controller in analouge mode
       sbi(PORTB, PScommand);
 2b2:	c5 9a       	sbi	0x18, 5	; 24
       sbi(PORTB, PSclock);
 2b4:	c2 9a       	sbi	0x18, 2	; 24
       cbi(PORTB, PSattention);
 2b6:	c6 98       	cbi	0x18, 6	; 24

       gameByte(0x01);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x44);
 2c0:	84 e4       	ldi	r24, 0x44	; 68
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x01);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x03);
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>

       sbi(PORTB, PScommand);
 300:	c5 9a       	sbi	0x18, 5	; 24
 302:	c6 01       	movw	r24, r12
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0xd4>
       _delay_ms(1);
       sbi(PORTB, PSattention);
 308:	c6 9a       	sbi	0x18, 6	; 24
 30a:	ce 01       	movw	r24, r28
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <main+0xdc>

       _delay_ms(10);

       // exit config mode
       sbi(PORTB, PScommand);
 310:	c5 9a       	sbi	0x18, 5	; 24
       sbi(PORTB, PSclock);
 312:	c2 9a       	sbi	0x18, 2	; 24
       cbi(PORTB, PSattention);
 314:	c6 98       	cbi	0x18, 6	; 24

       gameByte(0x01);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x43);
 31e:	83 e4       	ldi	r24, 0x43	; 67
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x5A);
 336:	8a e5       	ldi	r24, 0x5A	; 90
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x5A);
 33e:	8a e5       	ldi	r24, 0x5A	; 90
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x5A);
 346:	8a e5       	ldi	r24, 0x5A	; 90
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x5A);
 34e:	8a e5       	ldi	r24, 0x5A	; 90
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x5A);
 356:	8a e5       	ldi	r24, 0x5A	; 90
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>

       sbi(PORTB, PScommand);
 35e:	c5 9a       	sbi	0x18, 5	; 24
 360:	c6 01       	movw	r24, r12
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x132>
       _delay_ms(1);
       sbi(PORTB, PSattention);
 366:	c6 9a       	sbi	0x18, 6	; 24
 368:	ce 01       	movw	r24, r28
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x13a>

       _delay_ms(10);

       // poll controller and check in analouge mode.
       sbi(PORTB, PScommand);
 36e:	c5 9a       	sbi	0x18, 5	; 24
       sbi(PORTB, PSclock);
 370:	c2 9a       	sbi	0x18, 2	; 24
       cbi(PORTB, PSattention);
 372:	c6 98       	cbi	0x18, 6	; 24

       gameByte(0x01);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       chk_ana = gameByte(0x42);            // the 2nd byte to be returned from the controller should = 0x73 for "red" analouge controller.
 37c:	82 e4       	ldi	r24, 0x42	; 66
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
 384:	18 2f       	mov	r17, r24
       gameByte(0x00);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
       gameByte(0x00);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>

       sbi(PORTB, PScommand);
 3be:	c5 9a       	sbi	0x18, 5	; 24
 3c0:	c6 01       	movw	r24, r12
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x192>
       _delay_ms(1);
       sbi(PORTB, PSattention);
 3c6:	c6 9a       	sbi	0x18, 6	; 24
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x19a>
   // the status LEDs will continue to count upwards untill a controller is found.
   // if everything is working correctly this should happen on the first pass of
   // this loop but occasionally errors occur and a 2nd or 3rd itteration happen.
   unsigned char chk_ana = 0, cnt = 0;
   int d;
   while(chk_ana != 0x73){
 3ce:	13 37       	cpi	r17, 0x73	; 115
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <main+0x1a4>
 3d2:	50 cf       	rjmp	.-352    	; 0x274 <main+0x44>
       _delay_ms(1);
       sbi(PORTB, PSattention);
       _delay_ms(10);
   }
//wrdata(cnt);
LCD_String("start");
 3d4:	8d e8       	ldi	r24, 0x8D	; 141
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_String>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	b8 2e       	mov	r11, r24
//_delay_ms(100);
   short int temp, data0, data1, data2, data3, data4, data5, i ,debounceSelect;
  // main program loop:
   while (1){

        sbi(PORTB, PScommand);                          // start communication with PSx controller
 3e0:	c5 9a       	sbi	0x18, 5	; 24
        sbi(PORTB, PSclock);
 3e2:	c2 9a       	sbi	0x18, 2	; 24
        cbi(PORTB, PSattention);
 3e4:	c6 98       	cbi	0x18, 6	; 24

        gameByte(0x01);                                       // bite 0. header.
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
        temp = gameByte(0x42);                          // bite 1. header. (should possibly put test on this byte to detect unplugging of controller.)
 3ee:	82 e4       	ldi	r24, 0x42	; 66
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
        gameByte(0x00);                                       // bite 2. header.
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>

        data0 = gameByte(0x00);                         // bite 3. first data bite.
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
 406:	c8 2e       	mov	r12, r24
        data1 = gameByte(0x00);                         // bite 4.
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
 410:	d8 2e       	mov	r13, r24
        data2 = gameByte(0x00);                         // bite 5.
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
        data3 = gameByte(0x00);                         // bite 6.
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
        data4 = gameByte(0x00);                         // bite 7.
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
 42a:	7c 01       	movw	r14, r24
        data5 = gameByte(0x00);                         // bite 8.
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 41 00 	call	0x82	; 0x82 <gameByte>
 434:	8c 01       	movw	r16, r24
 436:	8b 2d       	mov	r24, r11
 438:	8a 95       	dec	r24
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0x208>

        _delay_us(1);
        sbi(PORTB, PScommand);                      // close communication with PSx controller
 43c:	c5 9a       	sbi	0x18, 5	; 24
 43e:	8b 2d       	mov	r24, r11
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <main+0x210>
        _delay_us(1);
        sbi(PORTB, PSattention);                        // all done.
 444:	c6 9a       	sbi	0x18, 6	; 24


traverse(data0,data1);
 446:	8c 2d       	mov	r24, r12
 448:	6d 2d       	mov	r22, r13
 44a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <traverse>
analog(data4,data5);
 44e:	c7 01       	movw	r24, r14
 450:	b8 01       	movw	r22, r16
 452:	0e 94 ad 00 	call	0x15a	; 0x15a <analog>
 456:	c4 cf       	rjmp	.-120    	; 0x3e0 <main+0x1b0>

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
