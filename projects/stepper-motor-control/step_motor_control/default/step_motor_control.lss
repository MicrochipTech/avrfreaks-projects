
step_motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000268  00800060  000019ca  00001a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008002c8  008002c8  00001cc6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000965  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b3  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000847  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000429  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000054 <__c.1648>:
      54:	45 6e 74 65 72 20 63 6f 6d 6d 61 6e 64 3a 20 00     Enter command: .

00000064 <__c.1971>:
      64:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf e5       	ldi	r28, 0x5F	; 95
      76:	d8 e0       	ldi	r29, 0x08	; 8
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e6       	ldi	r26, 0x60	; 96
      80:	b0 e0       	ldi	r27, 0x00	; 0
      82:	ea ec       	ldi	r30, 0xCA	; 202
      84:	f9 e1       	ldi	r31, 0x19	; 25
      86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
      8c:	a8 3c       	cpi	r26, 0xC8	; 200
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
      92:	13 e0       	ldi	r17, 0x03	; 3
      94:	a8 ec       	ldi	r26, 0xC8	; 200
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 32       	cpi	r26, 0x20	; 32
      9e:	b1 07       	cpc	r27, r17
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
      a6:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      ae:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      b0:	e1 99       	sbic	0x1c, 1	; 28
      b2:	fe cf       	rjmp	.-4      	; 0xb0 <eeprom_read_byte+0x2>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
      b4:	3f bb       	out	0x1f, r19	; 31
      b6:	2e bb       	out	0x1e, r18	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
      b8:	e0 9a       	sbi	0x1c, 0	; 28
      ba:	8d b3       	in	r24, 0x1d	; 29
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
      bc:	08 95       	ret

000000be <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      be:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      c0:	e1 99       	sbic	0x1c, 1	; 28
      c2:	fe cf       	rjmp	.-4      	; 0xc0 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
      c4:	3f bb       	out	0x1f, r19	; 31
      c6:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
      c8:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	f8 94       	cli
      ce:	e2 9a       	sbi	0x1c, 2	; 28
      d0:	e1 9a       	sbi	0x1c, 1	; 28
      d2:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      d4:	08 95       	ret

000000d6 <message>:
    _delay_ms(10);
}
*/

void message( )
{
      d6:	3f 92       	push	r3
      d8:	4f 92       	push	r4
      da:	5f 92       	push	r5
      dc:	6f 92       	push	r6
      de:	7f 92       	push	r7
      e0:	8f 92       	push	r8
      e2:	9f 92       	push	r9
      e4:	af 92       	push	r10
      e6:	bf 92       	push	r11
      e8:	cf 92       	push	r12
      ea:	df 92       	push	r13
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	df 93       	push	r29
      f6:	cf 93       	push	r28
      f8:	00 d0       	rcall	.+0      	; 0xfa <message+0x24>
      fa:	00 d0       	rcall	.+0      	; 0xfc <message+0x26>
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	67 e5       	ldi	r22, 0x57	; 87
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
     10c:	4b 01       	movw	r8, r22
     10e:	5c 01       	movw	r10, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     110:	8a e0       	ldi	r24, 0x0A	; 10
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	67 e5       	ldi	r22, 0x57	; 87
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
     11c:	2b 01       	movw	r4, r22
     11e:	3c 01       	movw	r6, r24
     120:	e1 99       	sbic	0x1c, 1	; 28
     122:	fe cf       	rjmp	.-4      	; 0x120 <message+0x4a>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	9f bb       	out	0x1f, r25	; 31
     12a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     12c:	e0 9a       	sbi	0x1c, 0	; 28
     12e:	3d b2       	in	r3, 0x1d	; 29
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     130:	8e e6       	ldi	r24, 0x6E	; 110
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	67 e5       	ldi	r22, 0x57	; 87
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
     13c:	69 83       	std	Y+1, r22	; 0x01
     13e:	7a 83       	std	Y+2, r23	; 0x02
     140:	8b 83       	std	Y+3, r24	; 0x03
     142:	9c 83       	std	Y+4, r25	; 0x04
  unit = eeprom_read_dword(0);
  bc = eeprom_read_dword(10);
  dir = eeprom_read_byte(100);
  speed = eeprom_read_dword(110);
  pot = eeprom_read_dword(120);
  fprintf(stderr, "----------------------------------------\n");
     144:	88 e7       	ldi	r24, 0x78	; 120
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	67 e5       	ldi	r22, 0x57	; 87
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
     150:	6b 01       	movw	r12, r22
     152:	7c 01       	movw	r14, r24
     154:	60 91 1e 03 	lds	r22, 0x031E
     158:	70 91 1f 03 	lds	r23, 0x031F
     15c:	80 e6       	ldi	r24, 0x60	; 96
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "Stored parameters::\n");
     164:	60 91 1e 03 	lds	r22, 0x031E
     168:	70 91 1f 03 	lds	r23, 0x031F
     16c:	8a e8       	ldi	r24, 0x8A	; 138
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   Power ups:   ");
     174:	60 91 1e 03 	lds	r22, 0x031E
     178:	70 91 1f 03 	lds	r23, 0x031F
     17c:	8f e9       	ldi	r24, 0x9F	; 159
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  printf("%lu\n", pot);
     184:	00 d0       	rcall	.+0      	; 0x186 <message+0xb0>
     186:	00 d0       	rcall	.+0      	; 0x188 <message+0xb2>
     188:	00 d0       	rcall	.+0      	; 0x18a <message+0xb4>
     18a:	00 eb       	ldi	r16, 0xB0	; 176
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	ad b7       	in	r26, 0x3d	; 61
     190:	be b7       	in	r27, 0x3e	; 62
     192:	12 96       	adiw	r26, 0x02	; 2
     194:	1c 93       	st	X, r17
     196:	0e 93       	st	-X, r16
     198:	11 97       	sbiw	r26, 0x01	; 1
     19a:	ed b7       	in	r30, 0x3d	; 61
     19c:	fe b7       	in	r31, 0x3e	; 62
     19e:	c3 82       	std	Z+3, r12	; 0x03
     1a0:	d4 82       	std	Z+4, r13	; 0x04
     1a2:	e5 82       	std	Z+5, r14	; 0x05
     1a4:	f6 82       	std	Z+6, r15	; 0x06
     1a6:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
  fprintf(stderr, "   Unit steps:  ");
     1aa:	8d b7       	in	r24, 0x3d	; 61
     1ac:	9e b7       	in	r25, 0x3e	; 62
     1ae:	06 96       	adiw	r24, 0x06	; 6
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	9e bf       	out	0x3e, r25	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	8d bf       	out	0x3d, r24	; 61
     1ba:	60 91 1e 03 	lds	r22, 0x031E
     1be:	70 91 1f 03 	lds	r23, 0x031F
     1c2:	85 eb       	ldi	r24, 0xB5	; 181
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  printf("%lu\n", unit);
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <message+0xf6>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <message+0xf8>
     1ce:	00 d0       	rcall	.+0      	; 0x1d0 <message+0xfa>
     1d0:	ad b7       	in	r26, 0x3d	; 61
     1d2:	be b7       	in	r27, 0x3e	; 62
     1d4:	12 96       	adiw	r26, 0x02	; 2
     1d6:	1c 93       	st	X, r17
     1d8:	0e 93       	st	-X, r16
     1da:	11 97       	sbiw	r26, 0x01	; 1
     1dc:	ed b7       	in	r30, 0x3d	; 61
     1de:	fe b7       	in	r31, 0x3e	; 62
     1e0:	83 82       	std	Z+3, r8	; 0x03
     1e2:	94 82       	std	Z+4, r9	; 0x04
     1e4:	a5 82       	std	Z+5, r10	; 0x05
     1e6:	b6 82       	std	Z+6, r11	; 0x06
     1e8:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
  fprintf(stderr, "   Batch count: ");
     1ec:	8d b7       	in	r24, 0x3d	; 61
     1ee:	9e b7       	in	r25, 0x3e	; 62
     1f0:	06 96       	adiw	r24, 0x06	; 6
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	9e bf       	out	0x3e, r25	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	8d bf       	out	0x3d, r24	; 61
     1fc:	60 91 1e 03 	lds	r22, 0x031E
     200:	70 91 1f 03 	lds	r23, 0x031F
     204:	86 ec       	ldi	r24, 0xC6	; 198
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  printf("%lu\n", bc);
     20c:	00 d0       	rcall	.+0      	; 0x20e <message+0x138>
     20e:	00 d0       	rcall	.+0      	; 0x210 <message+0x13a>
     210:	00 d0       	rcall	.+0      	; 0x212 <message+0x13c>
     212:	ad b7       	in	r26, 0x3d	; 61
     214:	be b7       	in	r27, 0x3e	; 62
     216:	12 96       	adiw	r26, 0x02	; 2
     218:	1c 93       	st	X, r17
     21a:	0e 93       	st	-X, r16
     21c:	11 97       	sbiw	r26, 0x01	; 1
     21e:	ed b7       	in	r30, 0x3d	; 61
     220:	fe b7       	in	r31, 0x3e	; 62
     222:	43 82       	std	Z+3, r4	; 0x03
     224:	54 82       	std	Z+4, r5	; 0x04
     226:	65 82       	std	Z+5, r6	; 0x05
     228:	76 82       	std	Z+6, r7	; 0x06
     22a:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
  fprintf(stderr, "   Direction:   ");
     22e:	8d b7       	in	r24, 0x3d	; 61
     230:	9e b7       	in	r25, 0x3e	; 62
     232:	06 96       	adiw	r24, 0x06	; 6
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	9e bf       	out	0x3e, r25	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	8d bf       	out	0x3d, r24	; 61
     23e:	60 91 1e 03 	lds	r22, 0x031E
     242:	70 91 1f 03 	lds	r23, 0x031F
     246:	87 ed       	ldi	r24, 0xD7	; 215
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
    if (dir == 1)
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	39 16       	cp	r3, r25
     252:	19 f4       	brne	.+6      	; 0x25a <message+0x184>
	printf("Left\n");
     254:	88 ee       	ldi	r24, 0xE8	; 232
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	05 c0       	rjmp	.+10     	; 0x264 <message+0x18e>
    if (dir == 2)
     25a:	a2 e0       	ldi	r26, 0x02	; 2
     25c:	3a 16       	cp	r3, r26
     25e:	21 f4       	brne	.+8      	; 0x268 <message+0x192>
	printf("Right\n");
     260:	8d ee       	ldi	r24, 0xED	; 237
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
  fprintf(stderr, "   Speed:       ");
     268:	60 91 1e 03 	lds	r22, 0x031E
     26c:	70 91 1f 03 	lds	r23, 0x031F
     270:	83 ef       	ldi	r24, 0xF3	; 243
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  printf("%lu\n", speed);
     278:	00 d0       	rcall	.+0      	; 0x27a <message+0x1a4>
     27a:	00 d0       	rcall	.+0      	; 0x27c <message+0x1a6>
     27c:	00 d0       	rcall	.+0      	; 0x27e <message+0x1a8>
     27e:	80 eb       	ldi	r24, 0xB0	; 176
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	ed b7       	in	r30, 0x3d	; 61
     284:	fe b7       	in	r31, 0x3e	; 62
     286:	92 83       	std	Z+2, r25	; 0x02
     288:	81 83       	std	Z+1, r24	; 0x01
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	ab 81       	ldd	r26, Y+3	; 0x03
     290:	bc 81       	ldd	r27, Y+4	; 0x04
     292:	83 83       	std	Z+3, r24	; 0x03
     294:	94 83       	std	Z+4, r25	; 0x04
     296:	a5 83       	std	Z+5, r26	; 0x05
     298:	b6 83       	std	Z+6, r27	; 0x06
     29a:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
  fprintf(stderr, "----------------------------------------\n");
     29e:	8d b7       	in	r24, 0x3d	; 61
     2a0:	9e b7       	in	r25, 0x3e	; 62
     2a2:	06 96       	adiw	r24, 0x06	; 6
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	9e bf       	out	0x3e, r25	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	8d bf       	out	0x3d, r24	; 61
     2ae:	60 91 1e 03 	lds	r22, 0x031E
     2b2:	70 91 1f 03 	lds	r23, 0x031F
     2b6:	80 e6       	ldi	r24, 0x60	; 96
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "Keys:\n");
     2be:	60 91 1e 03 	lds	r22, 0x031E
     2c2:	70 91 1f 03 	lds	r23, 0x031F
     2c6:	84 e0       	ldi	r24, 0x04	; 4
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   <		Left turn one unit\n");
     2ce:	60 91 1e 03 	lds	r22, 0x031E
     2d2:	70 91 1f 03 	lds	r23, 0x031F
     2d6:	8b e0       	ldi	r24, 0x0B	; 11
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   >		Right turn one unit\n");
     2de:	60 91 1e 03 	lds	r22, 0x031E
     2e2:	70 91 1f 03 	lds	r23, 0x031F
     2e6:	85 e2       	ldi	r24, 0x25	; 37
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   S		START batch\n");
     2ee:	60 91 1e 03 	lds	r22, 0x031E
     2f2:	70 91 1f 03 	lds	r23, 0x031F
     2f6:	80 e4       	ldi	r24, 0x40	; 64
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
//  fprintf(stderr, " SPC		STOP\n");
  fprintf(stderr, "   Z		Define batch count\n");
     2fe:	60 91 1e 03 	lds	r22, 0x031E
     302:	70 91 1f 03 	lds	r23, 0x031F
     306:	83 e5       	ldi	r24, 0x53	; 83
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   D		Define unit steps\n");
     30e:	60 91 1e 03 	lds	r22, 0x031E
     312:	70 91 1f 03 	lds	r23, 0x031F
     316:	8d e6       	ldi	r24, 0x6D	; 109
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "   A		Define speed\n");
     31e:	60 91 1e 03 	lds	r22, 0x031E
     322:	70 91 1f 03 	lds	r23, 0x031F
     326:	86 e8       	ldi	r24, 0x86	; 134
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  fprintf(stderr, "----------------------------------------\n");
     32e:	60 91 1e 03 	lds	r22, 0x031E
     332:	70 91 1f 03 	lds	r23, 0x031F
     336:	80 e6       	ldi	r24, 0x60	; 96
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
}
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	cf 91       	pop	r28
     348:	df 91       	pop	r29
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	df 90       	pop	r13
     354:	cf 90       	pop	r12
     356:	bf 90       	pop	r11
     358:	af 90       	pop	r10
     35a:	9f 90       	pop	r9
     35c:	8f 90       	pop	r8
     35e:	7f 90       	pop	r7
     360:	6f 90       	pop	r6
     362:	5f 90       	pop	r5
     364:	4f 90       	pop	r4
     366:	3f 90       	pop	r3
     368:	08 95       	ret

0000036a <main>:


int main(void)
{
     36a:	3f 92       	push	r3
     36c:	4f 92       	push	r4
     36e:	5f 92       	push	r5
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	a4 97       	sbiw	r28, 0x24	; 36
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	67 e5       	ldi	r22, 0x57	; 87
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
  char dir;
  long unsigned int speed;
  long unsigned int pot;
  long unsigned int i;

  unit = eeprom_read_dword(0);
     3a8:	69 83       	std	Y+1, r22	; 0x01
     3aa:	7a 83       	std	Y+2, r23	; 0x02
     3ac:	8b 83       	std	Y+3, r24	; 0x03
     3ae:	9c 83       	std	Y+4, r25	; 0x04
     3b0:	8a e0       	ldi	r24, 0x0A	; 10
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	67 e5       	ldi	r22, 0x57	; 87
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
  bc = eeprom_read_dword(10);
     3bc:	6d 83       	std	Y+5, r22	; 0x05
     3be:	7e 83       	std	Y+6, r23	; 0x06
     3c0:	8f 83       	std	Y+7, r24	; 0x07
     3c2:	98 87       	std	Y+8, r25	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     3c4:	e1 99       	sbic	0x1c, 1	; 28
     3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <main+0x5a>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     3c8:	84 e6       	ldi	r24, 0x64	; 100
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	9f bb       	out	0x1f, r25	; 31
     3ce:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     3d0:	e0 9a       	sbi	0x1c, 0	; 28
     3d2:	bd b2       	in	r11, 0x1d	; 29
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     3d4:	8e e6       	ldi	r24, 0x6E	; 110
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	67 e5       	ldi	r22, 0x57	; 87
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
  dir = eeprom_read_byte(100);
  speed = eeprom_read_dword(110);
     3e0:	69 87       	std	Y+9, r22	; 0x09
     3e2:	7a 87       	std	Y+10, r23	; 0x0a
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
     3e6:	9c 87       	std	Y+12, r25	; 0x0c
     3e8:	88 e7       	ldi	r24, 0x78	; 120
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	67 e5       	ldi	r22, 0x57	; 87
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
     3f4:	ab 01       	movw	r20, r22
     3f6:	bc 01       	movw	r22, r24
    Write a 32-bit double word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_dword (uint32_t *__p, uint32_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_dword (__p, __value, eeprom_write_byte);
     3f8:	4f 5f       	subi	r20, 0xFF	; 255
     3fa:	5f 4f       	sbci	r21, 0xFF	; 255
     3fc:	6f 4f       	sbci	r22, 0xFF	; 255
     3fe:	7f 4f       	sbci	r23, 0xFF	; 255
     400:	88 e7       	ldi	r24, 0x78	; 120
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2f e5       	ldi	r18, 0x5F	; 95
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	0e 94 06 06 	call	0xc0c	; 0xc0c <__eewr_dword>
  pot = eeprom_read_dword(120);
  eeprom_write_dword(120, ++pot);

  outp(0xff,DDRB);            /* use all pins on PortB for output */
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	87 bb       	out	0x17, r24	; 23
  outp(9, PORTB);      /* invert the output since a zero means: LED on */
     410:	89 e0       	ldi	r24, 0x09	; 9
     412:	88 bb       	out	0x18, r24	; 24
  char phase[4] = {9,3,6,12}; // por dve fazi ednovremenno
     414:	8d 87       	std	Y+13, r24	; 0x0d
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	8e 87       	std	Y+14, r24	; 0x0e
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	8f 87       	std	Y+15, r24	; 0x0f
     41e:	8c e0       	ldi	r24, 0x0C	; 12
     420:	88 8b       	std	Y+16, r24	; 0x10
 * Do all the startup-time peripheral initializations.
 */
static void
ioinit(void)
{
  uart_init();
     422:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <uart_init>

  int run=0;

  ioinit();

  stdout = stdin = stderr = &uart_str;
     426:	01 eb       	ldi	r16, 0xB1	; 177
     428:	12 e0       	ldi	r17, 0x02	; 2
     42a:	10 93 1f 03 	sts	0x031F, r17
     42e:	00 93 1e 03 	sts	0x031E, r16
     432:	10 93 1b 03 	sts	0x031B, r17
     436:	00 93 1a 03 	sts	0x031A, r16
     43a:	10 93 1d 03 	sts	0x031D, r17
     43e:	00 93 1c 03 	sts	0x031C, r16
//  stderr = &lcd_str;

  fprintf(stderr, "\nWelcome to Smooker Stepper Control v1.00\n");
     442:	8a e9       	ldi	r24, 0x9A	; 154
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	b8 01       	movw	r22, r16
     448:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
  message();
     44c:	0e 94 6b 00 	call	0xd6	; 0xd6 <message>
     450:	cc 24       	eor	r12, r12
     452:	dd 24       	eor	r13, r13
  for (;;)
    {
      printf_P(PSTR("Enter command: "));
      if (fgets(buf, sizeof buf - 1, stdin) == NULL)
     454:	f1 e1       	ldi	r31, 0x11	; 17
     456:	8f 2e       	mov	r8, r31
     458:	91 2c       	mov	r9, r1
     45a:	8c 0e       	add	r8, r28
     45c:	9d 1e       	adc	r9, r29

	case 'd':
	  if (sscanf(buf, "%*s %lu", &unit) > 0)
	    {
//	      fprintf(&lcd_str, "Got %s\n", s);
	      fprintf(&uart_str, "Unit steps=%lu\n", unit);
     45e:	30 2e       	mov	r3, r16
     460:	a1 2e       	mov	r10, r17
		    for (unit;unit>0;unit--)
		    {
			if (dir == 1 && ++run > 3) run=0;
			if (dir == 2 && --run < 0) run=3;
			//printf("   U:%lu\t%i\t%i\n",unit);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
     462:	ed e0       	ldi	r30, 0x0D	; 13
     464:	4e 2e       	mov	r4, r30
     466:	51 2c       	mov	r5, r1
     468:	4c 0e       	add	r4, r28
     46a:	5d 1e       	adc	r5, r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     46c:	76 e6       	ldi	r23, 0x66	; 102
     46e:	67 2e       	mov	r6, r23
     470:	7e e0       	ldi	r23, 0x0E	; 14
     472:	77 2e       	mov	r7, r23

  fprintf(stderr, "\nWelcome to Smooker Stepper Control v1.00\n");
  message();
  for (;;)
    {
      printf_P(PSTR("Enter command: "));
     474:	00 d0       	rcall	.+0      	; 0x476 <main+0x10c>
     476:	e4 e5       	ldi	r30, 0x54	; 84
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	ad b7       	in	r26, 0x3d	; 61
     47c:	be b7       	in	r27, 0x3e	; 62
     47e:	12 96       	adiw	r26, 0x02	; 2
     480:	fc 93       	st	X, r31
     482:	ee 93       	st	-X, r30
     484:	11 97       	sbiw	r26, 0x01	; 1
     486:	0e 94 ab 06 	call	0xd56	; 0xd56 <printf_P>
      if (fgets(buf, sizeof buf - 1, stdin) == NULL)
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	40 91 1a 03 	lds	r20, 0x031A
     492:	50 91 1b 03 	lds	r21, 0x031B
     496:	c4 01       	movw	r24, r8
     498:	63 e1       	ldi	r22, 0x13	; 19
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	0e 94 2c 06 	call	0xc58	; 0xc58 <fgets>
     4a0:	89 2b       	or	r24, r25
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <main+0x13c>
     4a4:	88 c2       	rjmp	.+1296   	; 0x9b6 <__stack+0x157>
	break;
//      if (tolower(buf[0]) == 'q')
//	break;

      switch (tolower(buf[0]))
     4a6:	89 89       	ldd	r24, Y+17	; 0x11
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 99 0c 	call	0x1932	; 0x1932 <tolower>
     4ae:	84 36       	cpi	r24, 0x64	; 100
     4b0:	91 05       	cpc	r25, r1
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <main+0x14c>
     4b4:	85 c1       	rjmp	.+778    	; 0x7c0 <main+0x456>
     4b6:	85 36       	cpi	r24, 0x65	; 101
     4b8:	91 05       	cpc	r25, r1
     4ba:	54 f4       	brge	.+20     	; 0x4d0 <main+0x166>
     4bc:	8e 33       	cpi	r24, 0x3E	; 62
     4be:	91 05       	cpc	r25, r1
     4c0:	71 f1       	breq	.+92     	; 0x51e <main+0x1b4>
     4c2:	81 36       	cpi	r24, 0x61	; 97
     4c4:	91 05       	cpc	r25, r1
     4c6:	09 f4       	brne	.+2      	; 0x4ca <main+0x160>
     4c8:	ce c1       	rjmp	.+924    	; 0x866 <__stack+0x7>
     4ca:	cc 97       	sbiw	r24, 0x3c	; 60
     4cc:	61 f4       	brne	.+24     	; 0x4e6 <main+0x17c>
     4ce:	7b c0       	rjmp	.+246    	; 0x5c6 <main+0x25c>
     4d0:	83 37       	cpi	r24, 0x73	; 115
     4d2:	91 05       	cpc	r25, r1
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <main+0x16e>
     4d6:	c9 c0       	rjmp	.+402    	; 0x66a <main+0x300>
     4d8:	8a 37       	cpi	r24, 0x7A	; 122
     4da:	91 05       	cpc	r25, r1
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <main+0x176>
     4de:	14 c2       	rjmp	.+1064   	; 0x908 <__stack+0xa9>
     4e0:	82 37       	cpi	r24, 0x72	; 114
     4e2:	91 05       	cpc	r25, r1
     4e4:	a9 f0       	breq	.+42     	; 0x510 <main+0x1a6>
	{
	default:
	  printf("Unknown command: %s\n", buf);
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <main+0x17e>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <main+0x180>
     4ea:	e5 ec       	ldi	r30, 0xC5	; 197
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	ad b7       	in	r26, 0x3d	; 61
     4f0:	be b7       	in	r27, 0x3e	; 62
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	fc 93       	st	X, r31
     4f6:	ee 93       	st	-X, r30
     4f8:	11 97       	sbiw	r26, 0x01	; 1
     4fa:	14 96       	adiw	r26, 0x04	; 4
     4fc:	9c 92       	st	X, r9
     4fe:	8e 92       	st	-X, r8
     500:	13 97       	sbiw	r26, 0x03	; 3
     502:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	b2 cf       	rjmp	.-156    	; 0x474 <main+0x10a>
	break;

	case 'r':
	    printf("Refresh command\n");
     510:	8a ed       	ldi	r24, 0xDA	; 218
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
	    message();
     518:	0e 94 6b 00 	call	0xd6	; 0xd6 <message>
     51c:	ab cf       	rjmp	.-170    	; 0x474 <main+0x10a>
	break;

	case '>':
	    printf("One unit right\n");
     51e:	8a ee       	ldi	r24, 0xEA	; 234
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     526:	e1 99       	sbic	0x1c, 1	; 28
     528:	fe cf       	rjmp	.-4      	; 0x526 <main+0x1bc>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     52a:	84 e6       	ldi	r24, 0x64	; 100
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	9f bb       	out	0x1f, r25	; 31
     530:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	e2 9a       	sbi	0x1c, 2	; 28
     53c:	e1 9a       	sbi	0x1c, 1	; 28
     53e:	0f be       	out	0x3f, r0	; 63
		    {
			if (dir == 1 && ++run > 3) run=0;
			if (dir == 2 && --run < 0) run=3;
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
     540:	e9 84       	ldd	r14, Y+9	; 0x09
     542:	fa 84       	ldd	r15, Y+10	; 0x0a
     544:	0b 85       	ldd	r16, Y+11	; 0x0b
     546:	1c 85       	ldd	r17, Y+12	; 0x0c
     548:	29 81       	ldd	r18, Y+1	; 0x01
     54a:	3a 81       	ldd	r19, Y+2	; 0x02
     54c:	4b 81       	ldd	r20, Y+3	; 0x03
     54e:	5c 81       	ldd	r21, Y+4	; 0x04
     550:	24 c0       	rjmp	.+72     	; 0x59a <main+0x230>
	    eeprom_write_byte(100,2);
	    dir=2;
		    for (unit;unit>0;unit--)
		    {
			if (dir == 1 && ++run > 3) run=0;
			if (dir == 2 && --run < 0) run=3;
     552:	08 94       	sec
     554:	c1 08       	sbc	r12, r1
     556:	d1 08       	sbc	r13, r1
     558:	ff ef       	ldi	r31, 0xFF	; 255
     55a:	cf 16       	cp	r12, r31
     55c:	ff ef       	ldi	r31, 0xFF	; 255
     55e:	df 06       	cpc	r13, r31
     560:	19 f4       	brne	.+6      	; 0x568 <main+0x1fe>
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	c6 2e       	mov	r12, r22
     566:	d1 2c       	mov	r13, r1
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
     568:	f2 01       	movw	r30, r4
     56a:	ec 0d       	add	r30, r12
     56c:	fd 1d       	adc	r31, r13
     56e:	80 81       	ld	r24, Z
     570:	88 bb       	out	0x18, r24	; 24
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	06 c0       	rjmp	.+12     	; 0x588 <main+0x21e>
     57c:	f3 01       	movw	r30, r6
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <main+0x214>
    			for (i=0; i<speed; i++)     /* outer delay loop */
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	a1 1d       	adc	r26, r1
     586:	b1 1d       	adc	r27, r1
     588:	8e 15       	cp	r24, r14
     58a:	9f 05       	cpc	r25, r15
     58c:	a0 07       	cpc	r26, r16
     58e:	b1 07       	cpc	r27, r17
     590:	a8 f3       	brcs	.-22     	; 0x57c <main+0x212>
     592:	21 50       	subi	r18, 0x01	; 1
     594:	30 40       	sbci	r19, 0x00	; 0
     596:	40 40       	sbci	r20, 0x00	; 0
     598:	50 40       	sbci	r21, 0x00	; 0

	case '>':
	    printf("One unit right\n");
	    eeprom_write_byte(100,2);
	    dir=2;
		    for (unit;unit>0;unit--)
     59a:	21 15       	cp	r18, r1
     59c:	31 05       	cpc	r19, r1
     59e:	41 05       	cpc	r20, r1
     5a0:	51 05       	cpc	r21, r1
     5a2:	b9 f6       	brne	.-82     	; 0x552 <main+0x1e8>
     5a4:	19 82       	std	Y+1, r1	; 0x01
     5a6:	1a 82       	std	Y+2, r1	; 0x02
     5a8:	1b 82       	std	Y+3, r1	; 0x03
     5aa:	1c 82       	std	Y+4, r1	; 0x04
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	67 e5       	ldi	r22, 0x57	; 87
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
    			_delay_ms(1);
		    }
	    unit = eeprom_read_dword(0);
     5b8:	69 83       	std	Y+1, r22	; 0x01
     5ba:	7a 83       	std	Y+2, r23	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	b9 2e       	mov	r11, r25
     5c4:	57 cf       	rjmp	.-338    	; 0x474 <main+0x10a>
	break;

	case '<':
	    printf("One unit left\n");
     5c6:	89 ef       	ldi	r24, 0xF9	; 249
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     5ce:	e1 99       	sbic	0x1c, 1	; 28
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <main+0x264>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     5d2:	84 e6       	ldi	r24, 0x64	; 100
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9f bb       	out	0x1f, r25	; 31
     5d8:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	e2 9a       	sbi	0x1c, 2	; 28
     5e4:	e1 9a       	sbi	0x1c, 1	; 28
     5e6:	0f be       	out	0x3f, r0	; 63
		    {
			if (dir == 1 && ++run > 3) run=0;
			if (dir == 2 && --run < 0) run=3;
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
     5e8:	e9 84       	ldd	r14, Y+9	; 0x09
     5ea:	fa 84       	ldd	r15, Y+10	; 0x0a
     5ec:	0b 85       	ldd	r16, Y+11	; 0x0b
     5ee:	1c 85       	ldd	r17, Y+12	; 0x0c
     5f0:	29 81       	ldd	r18, Y+1	; 0x01
     5f2:	3a 81       	ldd	r19, Y+2	; 0x02
     5f4:	4b 81       	ldd	r20, Y+3	; 0x03
     5f6:	5c 81       	ldd	r21, Y+4	; 0x04
     5f8:	22 c0       	rjmp	.+68     	; 0x63e <main+0x2d4>
	    printf("One unit left\n");
	    eeprom_write_byte(100,1);
	    dir=1;
		    for (unit;unit>0;unit--)
		    {
			if (dir == 1 && ++run > 3) run=0;
     5fa:	08 94       	sec
     5fc:	c1 1c       	adc	r12, r1
     5fe:	d1 1c       	adc	r13, r1
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	c8 16       	cp	r12, r24
     604:	d1 04       	cpc	r13, r1
     606:	14 f0       	brlt	.+4      	; 0x60c <main+0x2a2>
     608:	cc 24       	eor	r12, r12
     60a:	dd 24       	eor	r13, r13
			if (dir == 2 && --run < 0) run=3;
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
     60c:	f2 01       	movw	r30, r4
     60e:	ec 0d       	add	r30, r12
     610:	fd 1d       	adc	r31, r13
     612:	80 81       	ld	r24, Z
     614:	88 bb       	out	0x18, r24	; 24
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	06 c0       	rjmp	.+12     	; 0x62c <main+0x2c2>
     620:	f3 01       	movw	r30, r6
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <main+0x2b8>
    			for (i=0; i<speed; i++)     /* outer delay loop */
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	a1 1d       	adc	r26, r1
     62a:	b1 1d       	adc	r27, r1
     62c:	8e 15       	cp	r24, r14
     62e:	9f 05       	cpc	r25, r15
     630:	a0 07       	cpc	r26, r16
     632:	b1 07       	cpc	r27, r17
     634:	a8 f3       	brcs	.-22     	; 0x620 <main+0x2b6>
     636:	21 50       	subi	r18, 0x01	; 1
     638:	30 40       	sbci	r19, 0x00	; 0
     63a:	40 40       	sbci	r20, 0x00	; 0
     63c:	50 40       	sbci	r21, 0x00	; 0

	case '<':
	    printf("One unit left\n");
	    eeprom_write_byte(100,1);
	    dir=1;
		    for (unit;unit>0;unit--)
     63e:	21 15       	cp	r18, r1
     640:	31 05       	cpc	r19, r1
     642:	41 05       	cpc	r20, r1
     644:	51 05       	cpc	r21, r1
     646:	c9 f6       	brne	.-78     	; 0x5fa <main+0x290>
     648:	19 82       	std	Y+1, r1	; 0x01
     64a:	1a 82       	std	Y+2, r1	; 0x02
     64c:	1b 82       	std	Y+3, r1	; 0x03
     64e:	1c 82       	std	Y+4, r1	; 0x04
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	67 e5       	ldi	r22, 0x57	; 87
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
//			printf("   U:%lu\t%i\t%i\n",unit,run,phase[run]);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
    			_delay_ms(1);
		    }
	     unit = eeprom_read_dword(0);
     65c:	69 83       	std	Y+1, r22	; 0x01
     65e:	7a 83       	std	Y+2, r23	; 0x02
     660:	8b 83       	std	Y+3, r24	; 0x03
     662:	9c 83       	std	Y+4, r25	; 0x04
     664:	bb 24       	eor	r11, r11
     666:	b3 94       	inc	r11
     668:	05 cf       	rjmp	.-502    	; 0x474 <main+0x10a>
	break;

	case 's':
	    printf("Start of batch\n");
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
     672:	75 c0       	rjmp	.+234    	; 0x75e <main+0x3f4>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	67 e5       	ldi	r22, 0x57	; 87
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
	    for (bc;bc>0;bc--)
	    {
		unit = eeprom_read_dword(0);
     680:	69 83       	std	Y+1, r22	; 0x01
     682:	7a 83       	std	Y+2, r23	; 0x02
     684:	8b 83       	std	Y+3, r24	; 0x03
     686:	9c 83       	std	Y+4, r25	; 0x04
		printf("B:%lu\n",bc);
     688:	00 d0       	rcall	.+0      	; 0x68a <main+0x320>
     68a:	00 d0       	rcall	.+0      	; 0x68c <main+0x322>
     68c:	00 d0       	rcall	.+0      	; 0x68e <main+0x324>
     68e:	e6 e1       	ldi	r30, 0x16	; 22
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	ad b7       	in	r26, 0x3d	; 61
     694:	be b7       	in	r27, 0x3e	; 62
     696:	12 96       	adiw	r26, 0x02	; 2
     698:	fc 93       	st	X, r31
     69a:	ee 93       	st	-X, r30
     69c:	11 97       	sbiw	r26, 0x01	; 1
     69e:	13 96       	adiw	r26, 0x03	; 3
     6a0:	ed 92       	st	X+, r14
     6a2:	fd 92       	st	X+, r15
     6a4:	0d 93       	st	X+, r16
     6a6:	1c 93       	st	X, r17
     6a8:	16 97       	sbiw	r26, 0x06	; 6
     6aa:	0e 94 96 06 	call	0xd2c	; 0xd2c <printf>
		    {
			if (dir == 1 && ++run > 3) run=0;
			if (dir == 2 && --run < 0) run=3;
			//printf("   U:%lu\t%i\t%i\n",unit);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
     6ae:	e9 84       	ldd	r14, Y+9	; 0x09
     6b0:	fa 84       	ldd	r15, Y+10	; 0x0a
     6b2:	0b 85       	ldd	r16, Y+11	; 0x0b
     6b4:	1c 85       	ldd	r17, Y+12	; 0x0c
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	4b 81       	ldd	r20, Y+3	; 0x03
     6bc:	5c 81       	ldd	r21, Y+4	; 0x04
     6be:	ed b7       	in	r30, 0x3d	; 61
     6c0:	fe b7       	in	r31, 0x3e	; 62
     6c2:	36 96       	adiw	r30, 0x06	; 6
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	fe bf       	out	0x3e, r31	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	ed bf       	out	0x3d, r30	; 61
     6ce:	33 c0       	rjmp	.+102    	; 0x736 <main+0x3cc>
	    {
		unit = eeprom_read_dword(0);
		printf("B:%lu\n",bc);
		    for (unit;unit>0;unit--)
		    {
			if (dir == 1 && ++run > 3) run=0;
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	bf 16       	cp	r11, r31
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <main+0x37e>
     6d6:	08 94       	sec
     6d8:	c1 1c       	adc	r12, r1
     6da:	d1 1c       	adc	r13, r1
     6dc:	84 e0       	ldi	r24, 0x04	; 4
     6de:	c8 16       	cp	r12, r24
     6e0:	d1 04       	cpc	r13, r1
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <main+0x37c>
     6e4:	82 c1       	rjmp	.+772    	; 0x9ea <__stack+0x18b>
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <main+0x39a>
			if (dir == 2 && --run < 0) run=3;
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	b9 16       	cp	r11, r25
     6ec:	59 f4       	brne	.+22     	; 0x704 <main+0x39a>
     6ee:	08 94       	sec
     6f0:	c1 08       	sbc	r12, r1
     6f2:	d1 08       	sbc	r13, r1
     6f4:	af ef       	ldi	r26, 0xFF	; 255
     6f6:	ca 16       	cp	r12, r26
     6f8:	af ef       	ldi	r26, 0xFF	; 255
     6fa:	da 06       	cpc	r13, r26
     6fc:	19 f4       	brne	.+6      	; 0x704 <main+0x39a>
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	c8 2e       	mov	r12, r24
     702:	d1 2c       	mov	r13, r1
			//printf("   U:%lu\t%i\t%i\n",unit);
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
     704:	f2 01       	movw	r30, r4
     706:	ec 0d       	add	r30, r12
     708:	fd 1d       	adc	r31, r13
     70a:	80 81       	ld	r24, Z
     70c:	88 bb       	out	0x18, r24	; 24
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a0 e0       	ldi	r26, 0x00	; 0
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	06 c0       	rjmp	.+12     	; 0x724 <main+0x3ba>
     718:	f3 01       	movw	r30, r6
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <main+0x3b0>
    			for (i=0; i<speed; i++)     /* outer delay loop */
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	a1 1d       	adc	r26, r1
     722:	b1 1d       	adc	r27, r1
     724:	8e 15       	cp	r24, r14
     726:	9f 05       	cpc	r25, r15
     728:	a0 07       	cpc	r26, r16
     72a:	b1 07       	cpc	r27, r17
     72c:	a8 f3       	brcs	.-22     	; 0x718 <main+0x3ae>
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	30 40       	sbci	r19, 0x00	; 0
     732:	40 40       	sbci	r20, 0x00	; 0
     734:	50 40       	sbci	r21, 0x00	; 0
	    printf("Start of batch\n");
	    for (bc;bc>0;bc--)
	    {
		unit = eeprom_read_dword(0);
		printf("B:%lu\n",bc);
		    for (unit;unit>0;unit--)
     736:	21 15       	cp	r18, r1
     738:	31 05       	cpc	r19, r1
     73a:	41 05       	cpc	r20, r1
     73c:	51 05       	cpc	r21, r1
     73e:	41 f6       	brne	.-112    	; 0x6d0 <main+0x366>
     740:	19 82       	std	Y+1, r1	; 0x01
     742:	1a 82       	std	Y+2, r1	; 0x02
     744:	1b 82       	std	Y+3, r1	; 0x03
     746:	1c 82       	std	Y+4, r1	; 0x04
	     unit = eeprom_read_dword(0);
	break;

	case 's':
	    printf("Start of batch\n");
	    for (bc;bc>0;bc--)
     748:	8d 81       	ldd	r24, Y+5	; 0x05
     74a:	9e 81       	ldd	r25, Y+6	; 0x06
     74c:	af 81       	ldd	r26, Y+7	; 0x07
     74e:	b8 85       	ldd	r27, Y+8	; 0x08
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	a1 09       	sbc	r26, r1
     754:	b1 09       	sbc	r27, r1
     756:	8d 83       	std	Y+5, r24	; 0x05
     758:	9e 83       	std	Y+6, r25	; 0x06
     75a:	af 83       	std	Y+7, r26	; 0x07
     75c:	b8 87       	std	Y+8, r27	; 0x08
     75e:	ed 80       	ldd	r14, Y+5	; 0x05
     760:	fe 80       	ldd	r15, Y+6	; 0x06
     762:	0f 81       	ldd	r16, Y+7	; 0x07
     764:	18 85       	ldd	r17, Y+8	; 0x08
     766:	e1 14       	cp	r14, r1
     768:	f1 04       	cpc	r15, r1
     76a:	01 05       	cpc	r16, r1
     76c:	11 05       	cpc	r17, r1
     76e:	09 f0       	breq	.+2      	; 0x772 <main+0x408>
     770:	81 cf       	rjmp	.-254    	; 0x674 <main+0x30a>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	67 e5       	ldi	r22, 0x57	; 87
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
		        outp(phase[run], PORTB);      /* invert the output since a zero means: LED on */
    			for (i=0; i<speed; i++)     /* outer delay loop */
    			_delay_ms(1);
		    }
	    }
	    unit = eeprom_read_dword(0);
     77e:	69 83       	std	Y+1, r22	; 0x01
     780:	7a 83       	std	Y+2, r23	; 0x02
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	8a e0       	ldi	r24, 0x0A	; 10
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	67 e5       	ldi	r22, 0x57	; 87
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
	    bc = eeprom_read_dword(10);
     792:	6d 83       	std	Y+5, r22	; 0x05
     794:	7e 83       	std	Y+6, r23	; 0x06
     796:	8f 83       	std	Y+7, r24	; 0x07
     798:	98 87       	std	Y+8, r25	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     79a:	e1 99       	sbic	0x1c, 1	; 28
     79c:	fe cf       	rjmp	.-4      	; 0x79a <main+0x430>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	9f bb       	out	0x1f, r25	; 31
     7a4:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     7a6:	e0 9a       	sbi	0x1c, 0	; 28
     7a8:	bd b2       	in	r11, 0x1d	; 29
 */
__ATTR_PURE__ static __inline__
uint32_t eeprom_read_dword (const uint32_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_dword (__p, eeprom_read_byte);
     7aa:	8e e6       	ldi	r24, 0x6E	; 110
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	67 e5       	ldi	r22, 0x57	; 87
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__eerd_dword>
	    dir = eeprom_read_byte(100);
	    speed = eeprom_read_dword(110);
     7b6:	69 87       	std	Y+9, r22	; 0x09
     7b8:	7a 87       	std	Y+10, r23	; 0x0a
     7ba:	8b 87       	std	Y+11, r24	; 0x0b
     7bc:	9c 87       	std	Y+12, r25	; 0x0c
     7be:	5a ce       	rjmp	.-844    	; 0x474 <main+0x10a>
	break;

	case 'd':
	  if (sscanf(buf, "%*s %lu", &unit) > 0)
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <main+0x458>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <main+0x45a>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <main+0x45c>
     7c6:	ed b7       	in	r30, 0x3d	; 61
     7c8:	fe b7       	in	r31, 0x3e	; 62
     7ca:	31 96       	adiw	r30, 0x01	; 1
     7cc:	ad b7       	in	r26, 0x3d	; 61
     7ce:	be b7       	in	r27, 0x3e	; 62
     7d0:	12 96       	adiw	r26, 0x02	; 2
     7d2:	9c 92       	st	X, r9
     7d4:	8e 92       	st	-X, r8
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	2d e1       	ldi	r18, 0x1D	; 29
     7da:	32 e0       	ldi	r19, 0x02	; 2
     7dc:	33 83       	std	Z+3, r19	; 0x03
     7de:	22 83       	std	Z+2, r18	; 0x02
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	8c 0f       	add	r24, r28
     7e6:	9d 1f       	adc	r25, r29
     7e8:	95 83       	std	Z+5, r25	; 0x05
     7ea:	84 83       	std	Z+4, r24	; 0x04
     7ec:	0e 94 06 07 	call	0xe0c	; 0xe0c <sscanf>
     7f0:	ad b7       	in	r26, 0x3d	; 61
     7f2:	be b7       	in	r27, 0x3e	; 62
     7f4:	16 96       	adiw	r26, 0x06	; 6
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	be bf       	out	0x3e, r27	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	ad bf       	out	0x3d, r26	; 61
     800:	18 16       	cp	r1, r24
     802:	19 06       	cpc	r1, r25
     804:	6c f5       	brge	.+90     	; 0x860 <__stack+0x1>
	    {
//	      fprintf(&lcd_str, "Got %s\n", s);
	      fprintf(&uart_str, "Unit steps=%lu\n", unit);
     806:	ed b7       	in	r30, 0x3d	; 61
     808:	fe b7       	in	r31, 0x3e	; 62
     80a:	38 97       	sbiw	r30, 0x08	; 8
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	fe bf       	out	0x3e, r31	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	ed bf       	out	0x3d, r30	; 61
     816:	31 96       	adiw	r30, 0x01	; 1
     818:	ad b7       	in	r26, 0x3d	; 61
     81a:	be b7       	in	r27, 0x3e	; 62
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	3c 92       	st	X, r3
     820:	11 97       	sbiw	r26, 0x01	; 1
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	ac 92       	st	X, r10
     826:	25 e2       	ldi	r18, 0x25	; 37
     828:	32 e0       	ldi	r19, 0x02	; 2
     82a:	33 83       	std	Z+3, r19	; 0x03
     82c:	22 83       	std	Z+2, r18	; 0x02
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	ab 81       	ldd	r26, Y+3	; 0x03
     834:	bc 81       	ldd	r27, Y+4	; 0x04
     836:	84 83       	std	Z+4, r24	; 0x04
     838:	95 83       	std	Z+5, r25	; 0x05
     83a:	a6 83       	std	Z+6, r26	; 0x06
     83c:	b7 83       	std	Z+7, r27	; 0x07
     83e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <fprintf>
    Write a 32-bit double word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_dword (uint32_t *__p, uint32_t __value)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_dword (__p, __value, eeprom_write_byte);
     842:	8d b7       	in	r24, 0x3d	; 61
     844:	9e b7       	in	r25, 0x3e	; 62
     846:	08 96       	adiw	r24, 0x08	; 8
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	9e bf       	out	0x3e, r25	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	8d bf       	out	0x3d, r24	; 61
     852:	49 81       	ldd	r20, Y+1	; 0x01
     854:	5a 81       	ldd	r21, Y+2	; 0x02
     856:	6b 81       	ldd	r22, Y+3	; 0x03
     858:	7c 81       	ldd	r23, Y+4	; 0x04
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a1 c0       	rjmp	.+322    	; 0x9a2 <__stack+0x143>
		eeprom_write_dword(0, unit);
	    }
	  else
	    {
	      printf("Command error! Syntax: D 123456\n");
     860:	85 e3       	ldi	r24, 0x35	; 53
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	a5 c0       	rjmp	.+330    	; 0x9b0 <__stack+0x151>
	    }
	  break;

	case 'a':
	  if (sscanf(buf, "%*s %lu", &speed) > 0)
     866:	00 d0       	rcall	.+0      	; 0x868 <__stack+0x9>
     868:	00 d0       	rcall	.+0      	; 0x86a <__stack+0xb>
     86a:	00 d0       	rcall	.+0      	; 0x86c <__stack+0xd>
     86c:	ed b7       	in	r30, 0x3d	; 61
     86e:	fe b7       	in	r31, 0x3e	; 62
     870:	31 96       	adiw	r30, 0x01	; 1
     872:	ad b7       	in	r26, 0x3d	; 61
     874:	be b7       	in	r27, 0x3e	; 62
     876:	12 96       	adiw	r26, 0x02	; 2
     878:	9c 92       	st	X, r9
     87a:	8e 92       	st	-X, r8
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	2d e1       	ldi	r18, 0x1D	; 29
     880:	32 e0       	ldi	r19, 0x02	; 2
     882:	33 83       	std	Z+3, r19	; 0x03
     884:	22 83       	std	Z+2, r18	; 0x02
     886:	ce 01       	movw	r24, r28
     888:	09 96       	adiw	r24, 0x09	; 9
     88a:	95 83       	std	Z+5, r25	; 0x05
     88c:	84 83       	std	Z+4, r24	; 0x04
     88e:	0e 94 06 07 	call	0xe0c	; 0xe0c <sscanf>
     892:	ad b7       	in	r26, 0x3d	; 61
     894:	be b7       	in	r27, 0x3e	; 62
     896:	16 96       	adiw	r26, 0x06	; 6
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	be bf       	out	0x3e, r27	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	ad bf       	out	0x3d, r26	; 61
     8a2:	18 16       	cp	r1, r24
     8a4:	19 06       	cpc	r1, r25
     8a6:	6c f5       	brge	.+90     	; 0x902 <__stack+0xa3>
	    {
//	      fprintf(&lcd_str, "Got %s\n", s);
	      fprintf(&uart_str, "Speed=%lu\n", speed);
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	38 97       	sbiw	r30, 0x08	; 8
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	fe bf       	out	0x3e, r31	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	ed bf       	out	0x3d, r30	; 61
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	ad b7       	in	r26, 0x3d	; 61
     8bc:	be b7       	in	r27, 0x3e	; 62
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	3c 92       	st	X, r3
     8c2:	11 97       	sbiw	r26, 0x01	; 1
     8c4:	12 96       	adiw	r26, 0x02	; 2
     8c6:	ac 92       	st	X, r10
     8c8:	25 e5       	ldi	r18, 0x55	; 85
     8ca:	32 e0       	ldi	r19, 0x02	; 2
     8cc:	33 83       	std	Z+3, r19	; 0x03
     8ce:	22 83       	std	Z+2, r18	; 0x02
     8d0:	89 85       	ldd	r24, Y+9	; 0x09
     8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d4:	ab 85       	ldd	r26, Y+11	; 0x0b
     8d6:	bc 85       	ldd	r27, Y+12	; 0x0c
     8d8:	84 83       	std	Z+4, r24	; 0x04
     8da:	95 83       	std	Z+5, r25	; 0x05
     8dc:	a6 83       	std	Z+6, r26	; 0x06
     8de:	b7 83       	std	Z+7, r27	; 0x07
     8e0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <fprintf>
     8e4:	8d b7       	in	r24, 0x3d	; 61
     8e6:	9e b7       	in	r25, 0x3e	; 62
     8e8:	08 96       	adiw	r24, 0x08	; 8
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	9e bf       	out	0x3e, r25	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	8d bf       	out	0x3d, r24	; 61
     8f4:	49 85       	ldd	r20, Y+9	; 0x09
     8f6:	5a 85       	ldd	r21, Y+10	; 0x0a
     8f8:	6b 85       	ldd	r22, Y+11	; 0x0b
     8fa:	7c 85       	ldd	r23, Y+12	; 0x0c
     8fc:	8e e6       	ldi	r24, 0x6E	; 110
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	50 c0       	rjmp	.+160    	; 0x9a2 <__stack+0x143>
		eeprom_write_dword(110, speed);
	    }
	  else
	    {
	      printf("Command error! Syntax: A 123456\n");
     902:	80 e6       	ldi	r24, 0x60	; 96
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	54 c0       	rjmp	.+168    	; 0x9b0 <__stack+0x151>
	    }
	  break;


	case 'z':
	  if (sscanf(buf, "%*s %lu", &bc) > 0)
     908:	00 d0       	rcall	.+0      	; 0x90a <__stack+0xab>
     90a:	00 d0       	rcall	.+0      	; 0x90c <__stack+0xad>
     90c:	00 d0       	rcall	.+0      	; 0x90e <__stack+0xaf>
     90e:	ed b7       	in	r30, 0x3d	; 61
     910:	fe b7       	in	r31, 0x3e	; 62
     912:	31 96       	adiw	r30, 0x01	; 1
     914:	ad b7       	in	r26, 0x3d	; 61
     916:	be b7       	in	r27, 0x3e	; 62
     918:	12 96       	adiw	r26, 0x02	; 2
     91a:	9c 92       	st	X, r9
     91c:	8e 92       	st	-X, r8
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	2d e1       	ldi	r18, 0x1D	; 29
     922:	32 e0       	ldi	r19, 0x02	; 2
     924:	33 83       	std	Z+3, r19	; 0x03
     926:	22 83       	std	Z+2, r18	; 0x02
     928:	ce 01       	movw	r24, r28
     92a:	05 96       	adiw	r24, 0x05	; 5
     92c:	95 83       	std	Z+5, r25	; 0x05
     92e:	84 83       	std	Z+4, r24	; 0x04
     930:	0e 94 06 07 	call	0xe0c	; 0xe0c <sscanf>
     934:	ad b7       	in	r26, 0x3d	; 61
     936:	be b7       	in	r27, 0x3e	; 62
     938:	16 96       	adiw	r26, 0x06	; 6
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	be bf       	out	0x3e, r27	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	ad bf       	out	0x3d, r26	; 61
     944:	18 16       	cp	r1, r24
     946:	19 06       	cpc	r1, r25
     948:	8c f5       	brge	.+98     	; 0x9ac <__stack+0x14d>
	    {
	      fprintf(&uart_str, "Batch count=%lu\n", bc);
     94a:	ed b7       	in	r30, 0x3d	; 61
     94c:	fe b7       	in	r31, 0x3e	; 62
     94e:	38 97       	sbiw	r30, 0x08	; 8
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	fe bf       	out	0x3e, r31	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	ed bf       	out	0x3d, r30	; 61
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	ad b7       	in	r26, 0x3d	; 61
     95e:	be b7       	in	r27, 0x3e	; 62
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	3c 92       	st	X, r3
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	12 96       	adiw	r26, 0x02	; 2
     968:	ac 92       	st	X, r10
     96a:	20 e8       	ldi	r18, 0x80	; 128
     96c:	32 e0       	ldi	r19, 0x02	; 2
     96e:	33 83       	std	Z+3, r19	; 0x03
     970:	22 83       	std	Z+2, r18	; 0x02
     972:	8d 81       	ldd	r24, Y+5	; 0x05
     974:	9e 81       	ldd	r25, Y+6	; 0x06
     976:	af 81       	ldd	r26, Y+7	; 0x07
     978:	b8 85       	ldd	r27, Y+8	; 0x08
     97a:	84 83       	std	Z+4, r24	; 0x04
     97c:	95 83       	std	Z+5, r25	; 0x05
     97e:	a6 83       	std	Z+6, r26	; 0x06
     980:	b7 83       	std	Z+7, r27	; 0x07
     982:	0e 94 59 06 	call	0xcb2	; 0xcb2 <fprintf>
     986:	8d b7       	in	r24, 0x3d	; 61
     988:	9e b7       	in	r25, 0x3e	; 62
     98a:	08 96       	adiw	r24, 0x08	; 8
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	9e bf       	out	0x3e, r25	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	8d bf       	out	0x3d, r24	; 61
     996:	4d 81       	ldd	r20, Y+5	; 0x05
     998:	5e 81       	ldd	r21, Y+6	; 0x06
     99a:	6f 81       	ldd	r22, Y+7	; 0x07
     99c:	78 85       	ldd	r23, Y+8	; 0x08
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2f e5       	ldi	r18, 0x5F	; 95
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	0e 94 06 06 	call	0xc0c	; 0xc0c <__eewr_dword>
     9aa:	64 cd       	rjmp	.-1336   	; 0x474 <main+0x10a>
	      eeprom_write_dword(10, bc);
	    }
	  else
	    {
	      printf("Command error! Syntax: Z 123456\n");
     9ac:	81 e9       	ldi	r24, 0x91	; 145
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	0e 94 d1 06 	call	0xda2	; 0xda2 <puts>
     9b4:	5f cd       	rjmp	.-1346   	; 0x474 <main+0x10a>
	    }
	  break;
	}
    }
return 0;
}
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a4 96       	adiw	r28, 0x24	; 36
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	cf 91       	pop	r28
     9c8:	df 91       	pop	r29
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	af 90       	pop	r10
     9da:	9f 90       	pop	r9
     9dc:	8f 90       	pop	r8
     9de:	7f 90       	pop	r7
     9e0:	6f 90       	pop	r6
     9e2:	5f 90       	pop	r5
     9e4:	4f 90       	pop	r4
     9e6:	3f 90       	pop	r3
     9e8:	08 95       	ret
	      fprintf(&uart_str, "Batch count=%lu\n", bc);
	      eeprom_write_dword(10, bc);
	    }
	  else
	    {
	      printf("Command error! Syntax: Z 123456\n");
     9ea:	cc 24       	eor	r12, r12
     9ec:	dd 24       	eor	r13, r13
     9ee:	8a ce       	rjmp	.-748    	; 0x704 <main+0x39a>

000009f0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	89 b9       	out	0x09, r24	; 9
#endif
  UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
     9f4:	88 e1       	ldi	r24, 0x18	; 24
     9f6:	8a b9       	out	0x0a, r24	; 10
#define UBRRVAL 7
        UBRRL=(uint8_t)UBRRVAL; //low byte
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	89 b9       	out	0x09, r24	; 9
        UBRRH=(UBRRVAL>>8);     //high byte
     9fc:	10 bc       	out	0x20, r1	; 32
        //Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
        UCSRC=(1<<URSEL)|(0<<UMSEL)|(0<<UPM1)|(0<<UPM0)|(0<<USBS)|(0<<UCSZ2)|(1<<UCSZ1)|(1<<UCSZ0);
     9fe:	86 e8       	ldi	r24, 0x86	; 134
     a00:	80 bd       	out	0x20, r24	; 32
        //Enable Transmitter and Receiver and Interrupt on receive complete
        UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
     a02:	88 e9       	ldi	r24, 0x98	; 152
     a04:	8a b9       	out	0x0a, r24	; 10
        UCSRA=(1<<U2X);
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	8b b9       	out	0x0b, r24	; 11
//      set_sleep_mode(SLEEP_MODE_IDLE);
//        sei();

}
     a0a:	08 95       	ret

00000a0c <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     a0c:	1f 93       	push	r17
     a0e:	18 2f       	mov	r17, r24

  if (c == '\a')
     a10:	87 30       	cpi	r24, 0x07	; 7
     a12:	49 f4       	brne	.+18     	; 0xa26 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     a14:	60 91 1e 03 	lds	r22, 0x031E
     a18:	70 91 1f 03 	lds	r23, 0x031F
     a1c:	8f eb       	ldi	r24, 0xBF	; 191
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 6d 06 	call	0xcda	; 0xcda <fputs>
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <uart_putchar+0x2a>
      return 0;
    }

  if (c == '\n')
     a26:	8a 30       	cpi	r24, 0x0A	; 10
     a28:	19 f4       	brne	.+6      	; 0xa30 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     a2a:	8d e0       	ldi	r24, 0x0D	; 13
     a2c:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
  loop_until_bit_is_set(UCSRA, UDRE);
     a30:	5d 9b       	sbis	0x0b, 5	; 11
     a32:	fe cf       	rjmp	.-4      	; 0xa30 <uart_putchar+0x24>
  UDR = c;
     a34:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	1f 91       	pop	r17
     a3c:	08 95       	ret

00000a3e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     a4c:	80 91 c8 02 	lds	r24, 0x02C8
     a50:	90 91 c9 02 	lds	r25, 0x02C9
     a54:	89 2b       	or	r24, r25
     a56:	09 f0       	breq	.+2      	; 0xa5a <uart_getchar+0x1c>
     a58:	97 c0       	rjmp	.+302    	; 0xb88 <uart_getchar+0x14a>
     a5a:	0a ec       	ldi	r16, 0xCA	; 202
     a5c:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSRA, RXC);
     a5e:	5f 9b       	sbis	0x0b, 7	; 11
     a60:	fe cf       	rjmp	.-4      	; 0xa5e <uart_getchar+0x20>
	if (UCSRA & _BV(FE))
     a62:	5c 9b       	sbis	0x0b, 4	; 11
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <uart_getchar+0x2e>
     a66:	2e ef       	ldi	r18, 0xFE	; 254
     a68:	3f ef       	ldi	r19, 0xFF	; 255
     a6a:	a2 c0       	rjmp	.+324    	; 0xbb0 <uart_getchar+0x172>
	  return _FDEV_EOF;
	if (UCSRA & _BV(DOR))
     a6c:	5b 99       	sbic	0x0b, 3	; 11
     a6e:	9e c0       	rjmp	.+316    	; 0xbac <uart_getchar+0x16e>
	  return _FDEV_ERR;
	c = UDR;
     a70:	9c b1       	in	r25, 0x0c	; 12
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a72:	9d 30       	cpi	r25, 0x0D	; 13
     a74:	11 f0       	breq	.+4      	; 0xa7a <uart_getchar+0x3c>
	  c = '\n';
	if (c == '\n')
     a76:	9a 30       	cpi	r25, 0x0A	; 10
     a78:	69 f4       	brne	.+26     	; 0xa94 <uart_getchar+0x56>
	  {
	    *cp = c;
     a7a:	8a e0       	ldi	r24, 0x0A	; 10
     a7c:	f8 01       	movw	r30, r16
     a7e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
	    rxp = b;
     a86:	8a ec       	ldi	r24, 0xCA	; 202
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	90 93 c9 02 	sts	0x02C9, r25
     a8e:	80 93 c8 02 	sts	0x02C8, r24
     a92:	7a c0       	rjmp	.+244    	; 0xb88 <uart_getchar+0x14a>
	    break;
	  }
	else if (c == '\t')
     a94:	99 30       	cpi	r25, 0x09	; 9
     a96:	09 f4       	brne	.+2      	; 0xa9a <uart_getchar+0x5c>
     a98:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a9a:	89 2f       	mov	r24, r25
     a9c:	80 52       	subi	r24, 0x20	; 32
     a9e:	8f 35       	cpi	r24, 0x5F	; 95
     aa0:	10 f0       	brcs	.+4      	; 0xaa6 <uart_getchar+0x68>
     aa2:	90 3a       	cpi	r25, 0xA0	; 160
     aa4:	70 f0       	brcs	.+28     	; 0xac2 <uart_getchar+0x84>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     aa6:	f3 e0       	ldi	r31, 0x03	; 3
     aa8:	09 31       	cpi	r16, 0x19	; 25
     aaa:	1f 07       	cpc	r17, r31
     aac:	11 f4       	brne	.+4      	; 0xab2 <uart_getchar+0x74>
	      uart_putchar('\a', stream);
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <uart_getchar+0x7c>
	    else
	      {
		*cp++ = c;
     ab2:	f8 01       	movw	r30, r16
     ab4:	91 93       	st	Z+, r25
     ab6:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     ab8:	89 2f       	mov	r24, r25
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
     ac0:	ce cf       	rjmp	.-100    	; 0xa5e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     ac2:	92 31       	cpi	r25, 0x12	; 18
     ac4:	31 f1       	breq	.+76     	; 0xb12 <uart_getchar+0xd4>
     ac6:	93 31       	cpi	r25, 0x13	; 19
     ac8:	30 f4       	brcc	.+12     	; 0xad6 <uart_getchar+0x98>
     aca:	93 30       	cpi	r25, 0x03	; 3
     acc:	09 f4       	brne	.+2      	; 0xad0 <uart_getchar+0x92>
     ace:	6e c0       	rjmp	.+220    	; 0xbac <uart_getchar+0x16e>
     ad0:	98 30       	cpi	r25, 0x08	; 8
     ad2:	29 f6       	brne	.-118    	; 0xa5e <uart_getchar+0x20>
     ad4:	09 c0       	rjmp	.+18     	; 0xae8 <uart_getchar+0xaa>
     ad6:	97 31       	cpi	r25, 0x17	; 23
     ad8:	09 f4       	brne	.+2      	; 0xadc <uart_getchar+0x9e>
     ada:	4b c0       	rjmp	.+150    	; 0xb72 <uart_getchar+0x134>
     adc:	9f 37       	cpi	r25, 0x7F	; 127
     ade:	21 f0       	breq	.+8      	; 0xae8 <uart_getchar+0xaa>
     ae0:	95 31       	cpi	r25, 0x15	; 21
     ae2:	09 f0       	breq	.+2      	; 0xae6 <uart_getchar+0xa8>
     ae4:	bc cf       	rjmp	.-136    	; 0xa5e <uart_getchar+0x20>
     ae6:	32 c0       	rjmp	.+100    	; 0xb4c <uart_getchar+0x10e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
     aea:	0a 3c       	cpi	r16, 0xCA	; 202
     aec:	1f 07       	cpc	r17, r31
     aee:	09 f0       	breq	.+2      	; 0xaf2 <uart_getchar+0xb4>
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <uart_getchar+0xb6>
     af2:	b5 cf       	rjmp	.-150    	; 0xa5e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar(' ', stream);
     afc:	80 e2       	ldi	r24, 0x20	; 32
     afe:	b7 01       	movw	r22, r14
     b00:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar('\b', stream);
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		cp--;
     b0c:	01 50       	subi	r16, 0x01	; 1
     b0e:	10 40       	sbci	r17, 0x00	; 0
     b10:	a6 cf       	rjmp	.-180    	; 0xa5e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     b12:	8d e0       	ldi	r24, 0x0D	; 13
     b14:	b7 01       	movw	r22, r14
     b16:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
     b1a:	ca ec       	ldi	r28, 0xCA	; 202
     b1c:	d2 e0       	ldi	r29, 0x02	; 2
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <uart_getchar+0xea>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     b20:	89 91       	ld	r24, Y+
     b22:	b7 01       	movw	r22, r14
     b24:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     b28:	c0 17       	cp	r28, r16
     b2a:	d1 07       	cpc	r29, r17
     b2c:	c8 f3       	brcs	.-14     	; 0xb20 <uart_getchar+0xe2>
     b2e:	97 cf       	rjmp	.-210    	; 0xa5e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	b7 01       	movw	r22, r14
     b34:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar(' ', stream);
     b38:	80 e2       	ldi	r24, 0x20	; 32
     b3a:	b7 01       	movw	r22, r14
     b3c:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar('\b', stream);
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	b7 01       	movw	r22, r14
     b44:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		cp--;
     b48:	01 50       	subi	r16, 0x01	; 1
     b4a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0a 3c       	cpi	r16, 0xCA	; 202
     b50:	18 07       	cpc	r17, r24
     b52:	09 f0       	breq	.+2      	; 0xb56 <uart_getchar+0x118>
     b54:	68 f7       	brcc	.-38     	; 0xb30 <uart_getchar+0xf2>
     b56:	83 cf       	rjmp	.-250    	; 0xa5e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	b7 01       	movw	r22, r14
     b5c:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar(' ', stream);
     b60:	80 e2       	ldi	r24, 0x20	; 32
     b62:	b7 01       	movw	r22, r14
     b64:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
		uart_putchar('\b', stream);
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	b7 01       	movw	r22, r14
     b6c:	0e 94 06 05 	call	0xa0c	; 0xa0c <uart_putchar>
     b70:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b72:	e2 e0       	ldi	r30, 0x02	; 2
     b74:	0a 3c       	cpi	r16, 0xCA	; 202
     b76:	1e 07       	cpc	r17, r30
     b78:	09 f0       	breq	.+2      	; 0xb7c <uart_getchar+0x13e>
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <uart_getchar+0x140>
     b7c:	70 cf       	rjmp	.-288    	; 0xa5e <uart_getchar+0x20>
     b7e:	e8 01       	movw	r28, r16
     b80:	8a 91       	ld	r24, -Y
     b82:	80 32       	cpi	r24, 0x20	; 32
     b84:	49 f7       	brne	.-46     	; 0xb58 <uart_getchar+0x11a>
     b86:	6b cf       	rjmp	.-298    	; 0xa5e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b88:	e0 91 c8 02 	lds	r30, 0x02C8
     b8c:	f0 91 c9 02 	lds	r31, 0x02C9
     b90:	81 91       	ld	r24, Z+
     b92:	f0 93 c9 02 	sts	0x02C9, r31
     b96:	e0 93 c8 02 	sts	0x02C8, r30
  if (c == '\n')
     b9a:	8a 30       	cpi	r24, 0x0A	; 10
     b9c:	21 f4       	brne	.+8      	; 0xba6 <uart_getchar+0x168>
    rxp = 0;
     b9e:	10 92 c9 02 	sts	0x02C9, r1
     ba2:	10 92 c8 02 	sts	0x02C8, r1

  return c;
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <uart_getchar+0x172>
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	3f ef       	ldi	r19, 0xFF	; 255
}
     bb0:	c9 01       	movw	r24, r18
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <__eerd_dword>:
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	7b 01       	movw	r14, r22
     bd0:	8c 01       	movw	r16, r24
     bd2:	fb 01       	movw	r30, r22
     bd4:	09 95       	icall
     bd6:	b8 2e       	mov	r11, r24
     bd8:	c8 01       	movw	r24, r16
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	f7 01       	movw	r30, r14
     bde:	09 95       	icall
     be0:	c8 2e       	mov	r12, r24
     be2:	c8 01       	movw	r24, r16
     be4:	02 96       	adiw	r24, 0x02	; 2
     be6:	f7 01       	movw	r30, r14
     be8:	09 95       	icall
     bea:	d8 2e       	mov	r13, r24
     bec:	c8 01       	movw	r24, r16
     bee:	03 96       	adiw	r24, 0x03	; 3
     bf0:	f7 01       	movw	r30, r14
     bf2:	09 95       	icall
     bf4:	98 2f       	mov	r25, r24
     bf6:	6b 2d       	mov	r22, r11
     bf8:	7c 2d       	mov	r23, r12
     bfa:	8d 2d       	mov	r24, r13
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	df 90       	pop	r13
     c06:	cf 90       	pop	r12
     c08:	bf 90       	pop	r11
     c0a:	08 95       	ret

00000c0c <__eewr_dword>:
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	d5 2e       	mov	r13, r21
     c1c:	c6 2e       	mov	r12, r22
     c1e:	b7 2e       	mov	r11, r23
     c20:	79 01       	movw	r14, r18
     c22:	8c 01       	movw	r16, r24
     c24:	64 2f       	mov	r22, r20
     c26:	f9 01       	movw	r30, r18
     c28:	09 95       	icall
     c2a:	c8 01       	movw	r24, r16
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	6d 2d       	mov	r22, r13
     c30:	f7 01       	movw	r30, r14
     c32:	09 95       	icall
     c34:	c8 01       	movw	r24, r16
     c36:	02 96       	adiw	r24, 0x02	; 2
     c38:	6c 2d       	mov	r22, r12
     c3a:	f7 01       	movw	r30, r14
     c3c:	09 95       	icall
     c3e:	c8 01       	movw	r24, r16
     c40:	03 96       	adiw	r24, 0x03	; 3
     c42:	6b 2d       	mov	r22, r11
     c44:	f7 01       	movw	r30, r14
     c46:	09 95       	icall
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	08 95       	ret

00000c58 <fgets>:
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e2 e3       	ldi	r30, 0x32	; 50
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__prologue_saves__+0x14>
     c64:	7c 01       	movw	r14, r24
     c66:	6a 01       	movw	r12, r20
     c68:	fa 01       	movw	r30, r20
     c6a:	83 81       	ldd	r24, Z+3	; 0x03
     c6c:	80 ff       	sbrs	r24, 0
     c6e:	19 c0       	rjmp	.+50     	; 0xca2 <fgets+0x4a>
     c70:	16 16       	cp	r1, r22
     c72:	17 06       	cpc	r1, r23
     c74:	b4 f4       	brge	.+44     	; 0xca2 <fgets+0x4a>
     c76:	eb 01       	movw	r28, r22
     c78:	21 97       	sbiw	r28, 0x01	; 1
     c7a:	87 01       	movw	r16, r14
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <fgets+0x40>
     c7e:	c6 01       	movw	r24, r12
     c80:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
     c84:	ff ef       	ldi	r31, 0xFF	; 255
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	9f 07       	cpc	r25, r31
     c8a:	59 f0       	breq	.+22     	; 0xca2 <fgets+0x4a>
     c8c:	f8 01       	movw	r30, r16
     c8e:	81 93       	st	Z+, r24
     c90:	8f 01       	movw	r16, r30
     c92:	0a 97       	sbiw	r24, 0x0a	; 10
     c94:	19 f0       	breq	.+6      	; 0xc9c <fgets+0x44>
     c96:	21 97       	sbiw	r28, 0x01	; 1
     c98:	20 97       	sbiw	r28, 0x00	; 0
     c9a:	89 f7       	brne	.-30     	; 0xc7e <fgets+0x26>
     c9c:	f8 01       	movw	r30, r16
     c9e:	10 82       	st	Z, r1
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <fgets+0x4e>
     ca2:	ee 24       	eor	r14, r14
     ca4:	ff 24       	eor	r15, r15
     ca6:	c7 01       	movw	r24, r14
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	e8 e0       	ldi	r30, 0x08	; 8
     cae:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__epilogue_restores__+0x14>

00000cb2 <fprintf>:
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f6 e0       	ldi	r31, 0x06	; 6
     cba:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__prologue_saves__+0x20>
     cbe:	9e 01       	movw	r18, r28
     cc0:	27 5f       	subi	r18, 0xF7	; 247
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	6f 81       	ldd	r22, Y+7	; 0x07
     cca:	78 85       	ldd	r23, Y+8	; 0x08
     ccc:	a9 01       	movw	r20, r18
     cce:	0e 94 20 07 	call	0xe40	; 0xe40 <vfprintf>
     cd2:	20 96       	adiw	r28, 0x00	; 0
     cd4:	e2 e0       	ldi	r30, 0x02	; 2
     cd6:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__+0x20>

00000cda <fputs>:
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	7c 01       	movw	r14, r24
     ce8:	8b 01       	movw	r16, r22
     cea:	db 01       	movw	r26, r22
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	8c 91       	ld	r24, X
     cf0:	81 fd       	sbrc	r24, 1
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <fputs+0x20>
     cf4:	cf ef       	ldi	r28, 0xFF	; 255
     cf6:	df ef       	ldi	r29, 0xFF	; 255
     cf8:	13 c0       	rjmp	.+38     	; 0xd20 <fputs+0x46>
     cfa:	c0 e0       	ldi	r28, 0x00	; 0
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
     cfe:	0b c0       	rjmp	.+22     	; 0xd16 <fputs+0x3c>
     d00:	d8 01       	movw	r26, r16
     d02:	18 96       	adiw	r26, 0x08	; 8
     d04:	ed 91       	ld	r30, X+
     d06:	fc 91       	ld	r31, X
     d08:	19 97       	sbiw	r26, 0x09	; 9
     d0a:	b8 01       	movw	r22, r16
     d0c:	09 95       	icall
     d0e:	89 2b       	or	r24, r25
     d10:	11 f0       	breq	.+4      	; 0xd16 <fputs+0x3c>
     d12:	cf ef       	ldi	r28, 0xFF	; 255
     d14:	df ef       	ldi	r29, 0xFF	; 255
     d16:	f7 01       	movw	r30, r14
     d18:	81 91       	ld	r24, Z+
     d1a:	7f 01       	movw	r14, r30
     d1c:	88 23       	and	r24, r24
     d1e:	81 f7       	brne	.-32     	; 0xd00 <fputs+0x26>
     d20:	ce 01       	movw	r24, r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	e6 e0       	ldi	r30, 0x06	; 6
     d28:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__epilogue_restores__+0x18>

00000d2c <printf>:
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ec e9       	ldi	r30, 0x9C	; 156
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__prologue_saves__+0x20>
     d38:	fe 01       	movw	r30, r28
     d3a:	35 96       	adiw	r30, 0x05	; 5
     d3c:	61 91       	ld	r22, Z+
     d3e:	71 91       	ld	r23, Z+
     d40:	80 91 1c 03 	lds	r24, 0x031C
     d44:	90 91 1d 03 	lds	r25, 0x031D
     d48:	af 01       	movw	r20, r30
     d4a:	0e 94 20 07 	call	0xe40	; 0xe40 <vfprintf>
     d4e:	20 96       	adiw	r28, 0x00	; 0
     d50:	e2 e0       	ldi	r30, 0x02	; 2
     d52:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__+0x20>

00000d56 <printf_P>:
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 eb       	ldi	r30, 0xB1	; 177
     d5c:	f6 e0       	ldi	r31, 0x06	; 6
     d5e:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__prologue_saves__+0x20>
     d62:	fe 01       	movw	r30, r28
     d64:	35 96       	adiw	r30, 0x05	; 5
     d66:	61 91       	ld	r22, Z+
     d68:	71 91       	ld	r23, Z+
     d6a:	a0 91 1c 03 	lds	r26, 0x031C
     d6e:	b0 91 1d 03 	lds	r27, 0x031D
     d72:	13 96       	adiw	r26, 0x03	; 3
     d74:	8c 91       	ld	r24, X
     d76:	13 97       	sbiw	r26, 0x03	; 3
     d78:	88 60       	ori	r24, 0x08	; 8
     d7a:	13 96       	adiw	r26, 0x03	; 3
     d7c:	8c 93       	st	X, r24
     d7e:	80 91 1c 03 	lds	r24, 0x031C
     d82:	90 91 1d 03 	lds	r25, 0x031D
     d86:	af 01       	movw	r20, r30
     d88:	0e 94 20 07 	call	0xe40	; 0xe40 <vfprintf>
     d8c:	e0 91 1c 03 	lds	r30, 0x031C
     d90:	f0 91 1d 03 	lds	r31, 0x031D
     d94:	23 81       	ldd	r18, Z+3	; 0x03
     d96:	27 7f       	andi	r18, 0xF7	; 247
     d98:	23 83       	std	Z+3, r18	; 0x03
     d9a:	20 96       	adiw	r28, 0x00	; 0
     d9c:	e2 e0       	ldi	r30, 0x02	; 2
     d9e:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__+0x20>

00000da2 <puts>:
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	8c 01       	movw	r16, r24
     dac:	e0 91 1c 03 	lds	r30, 0x031C
     db0:	f0 91 1d 03 	lds	r31, 0x031D
     db4:	83 81       	ldd	r24, Z+3	; 0x03
     db6:	81 ff       	sbrs	r24, 1
     db8:	21 c0       	rjmp	.+66     	; 0xdfc <puts+0x5a>
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <puts+0x38>
     dc0:	e0 91 1c 03 	lds	r30, 0x031C
     dc4:	f0 91 1d 03 	lds	r31, 0x031D
     dc8:	20 85       	ldd	r18, Z+8	; 0x08
     dca:	31 85       	ldd	r19, Z+9	; 0x09
     dcc:	bf 01       	movw	r22, r30
     dce:	f9 01       	movw	r30, r18
     dd0:	09 95       	icall
     dd2:	89 2b       	or	r24, r25
     dd4:	11 f0       	breq	.+4      	; 0xdda <puts+0x38>
     dd6:	cf ef       	ldi	r28, 0xFF	; 255
     dd8:	df ef       	ldi	r29, 0xFF	; 255
     dda:	f8 01       	movw	r30, r16
     ddc:	81 91       	ld	r24, Z+
     dde:	8f 01       	movw	r16, r30
     de0:	88 23       	and	r24, r24
     de2:	71 f7       	brne	.-36     	; 0xdc0 <puts+0x1e>
     de4:	e0 91 1c 03 	lds	r30, 0x031C
     de8:	f0 91 1d 03 	lds	r31, 0x031D
     dec:	20 85       	ldd	r18, Z+8	; 0x08
     dee:	31 85       	ldd	r19, Z+9	; 0x09
     df0:	8a e0       	ldi	r24, 0x0A	; 10
     df2:	bf 01       	movw	r22, r30
     df4:	f9 01       	movw	r30, r18
     df6:	09 95       	icall
     df8:	89 2b       	or	r24, r25
     dfa:	11 f0       	breq	.+4      	; 0xe00 <puts+0x5e>
     dfc:	cf ef       	ldi	r28, 0xFF	; 255
     dfe:	df ef       	ldi	r29, 0xFF	; 255
     e00:	ce 01       	movw	r24, r28
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <sscanf>:
     e0c:	ae e0       	ldi	r26, 0x0E	; 14
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ec e0       	ldi	r30, 0x0C	; 12
     e12:	f7 e0       	ldi	r31, 0x07	; 7
     e14:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__prologue_saves__+0x20>
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	8c 83       	std	Y+4, r24	; 0x04
     e1c:	8b 89       	ldd	r24, Y+19	; 0x13
     e1e:	9c 89       	ldd	r25, Y+20	; 0x14
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	9e 01       	movw	r18, r28
     e26:	29 5e       	subi	r18, 0xE9	; 233
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	6d 89       	ldd	r22, Y+21	; 0x15
     e30:	7e 89       	ldd	r23, Y+22	; 0x16
     e32:	a9 01       	movw	r20, r18
     e34:	0e 94 81 0a 	call	0x1502	; 0x1502 <vfscanf>
     e38:	2e 96       	adiw	r28, 0x0e	; 14
     e3a:	e2 e0       	ldi	r30, 0x02	; 2
     e3c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__epilogue_restores__+0x20>

00000e40 <vfprintf>:
     e40:	ab e0       	ldi	r26, 0x0B	; 11
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e2       	ldi	r30, 0x26	; 38
     e46:	f7 e0       	ldi	r31, 0x07	; 7
     e48:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__prologue_saves__>
     e4c:	3c 01       	movw	r6, r24
     e4e:	2b 01       	movw	r4, r22
     e50:	5a 01       	movw	r10, r20
     e52:	fc 01       	movw	r30, r24
     e54:	17 82       	std	Z+7, r1	; 0x07
     e56:	16 82       	std	Z+6, r1	; 0x06
     e58:	83 81       	ldd	r24, Z+3	; 0x03
     e5a:	81 fd       	sbrc	r24, 1
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x24>
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	7f ef       	ldi	r23, 0xFF	; 255
     e62:	c6 c1       	rjmp	.+908    	; 0x11f0 <vfprintf+0x3b0>
     e64:	9a e0       	ldi	r25, 0x0A	; 10
     e66:	89 2e       	mov	r8, r25
     e68:	1e 01       	movw	r2, r28
     e6a:	08 94       	sec
     e6c:	21 1c       	adc	r2, r1
     e6e:	31 1c       	adc	r3, r1
     e70:	f3 01       	movw	r30, r6
     e72:	23 81       	ldd	r18, Z+3	; 0x03
     e74:	f2 01       	movw	r30, r4
     e76:	23 fd       	sbrc	r18, 3
     e78:	85 91       	lpm	r24, Z+
     e7a:	23 ff       	sbrs	r18, 3
     e7c:	81 91       	ld	r24, Z+
     e7e:	2f 01       	movw	r4, r30
     e80:	88 23       	and	r24, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <vfprintf+0x46>
     e84:	b2 c1       	rjmp	.+868    	; 0x11ea <vfprintf+0x3aa>
     e86:	85 32       	cpi	r24, 0x25	; 37
     e88:	39 f4       	brne	.+14     	; 0xe98 <vfprintf+0x58>
     e8a:	23 fd       	sbrc	r18, 3
     e8c:	85 91       	lpm	r24, Z+
     e8e:	23 ff       	sbrs	r18, 3
     e90:	81 91       	ld	r24, Z+
     e92:	2f 01       	movw	r4, r30
     e94:	85 32       	cpi	r24, 0x25	; 37
     e96:	29 f4       	brne	.+10     	; 0xea2 <vfprintf+0x62>
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	b3 01       	movw	r22, r6
     e9c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
     ea0:	e7 cf       	rjmp	.-50     	; 0xe70 <vfprintf+0x30>
     ea2:	98 2f       	mov	r25, r24
     ea4:	ff 24       	eor	r15, r15
     ea6:	ee 24       	eor	r14, r14
     ea8:	99 24       	eor	r9, r9
     eaa:	ff e1       	ldi	r31, 0x1F	; 31
     eac:	ff 15       	cp	r31, r15
     eae:	d0 f0       	brcs	.+52     	; 0xee4 <vfprintf+0xa4>
     eb0:	9b 32       	cpi	r25, 0x2B	; 43
     eb2:	69 f0       	breq	.+26     	; 0xece <vfprintf+0x8e>
     eb4:	9c 32       	cpi	r25, 0x2C	; 44
     eb6:	28 f4       	brcc	.+10     	; 0xec2 <vfprintf+0x82>
     eb8:	90 32       	cpi	r25, 0x20	; 32
     eba:	59 f0       	breq	.+22     	; 0xed2 <vfprintf+0x92>
     ebc:	93 32       	cpi	r25, 0x23	; 35
     ebe:	91 f4       	brne	.+36     	; 0xee4 <vfprintf+0xa4>
     ec0:	0e c0       	rjmp	.+28     	; 0xede <vfprintf+0x9e>
     ec2:	9d 32       	cpi	r25, 0x2D	; 45
     ec4:	49 f0       	breq	.+18     	; 0xed8 <vfprintf+0x98>
     ec6:	90 33       	cpi	r25, 0x30	; 48
     ec8:	69 f4       	brne	.+26     	; 0xee4 <vfprintf+0xa4>
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	24 c0       	rjmp	.+72     	; 0xf16 <vfprintf+0xd6>
     ece:	52 e0       	ldi	r21, 0x02	; 2
     ed0:	f5 2a       	or	r15, r21
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	f8 2a       	or	r15, r24
     ed6:	28 c0       	rjmp	.+80     	; 0xf28 <vfprintf+0xe8>
     ed8:	98 e0       	ldi	r25, 0x08	; 8
     eda:	f9 2a       	or	r15, r25
     edc:	25 c0       	rjmp	.+74     	; 0xf28 <vfprintf+0xe8>
     ede:	e0 e1       	ldi	r30, 0x10	; 16
     ee0:	fe 2a       	or	r15, r30
     ee2:	22 c0       	rjmp	.+68     	; 0xf28 <vfprintf+0xe8>
     ee4:	f7 fc       	sbrc	r15, 7
     ee6:	29 c0       	rjmp	.+82     	; 0xf3a <vfprintf+0xfa>
     ee8:	89 2f       	mov	r24, r25
     eea:	80 53       	subi	r24, 0x30	; 48
     eec:	8a 30       	cpi	r24, 0x0A	; 10
     eee:	70 f4       	brcc	.+28     	; 0xf0c <vfprintf+0xcc>
     ef0:	f6 fe       	sbrs	r15, 6
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <vfprintf+0xbe>
     ef4:	98 9c       	mul	r9, r8
     ef6:	90 2c       	mov	r9, r0
     ef8:	11 24       	eor	r1, r1
     efa:	98 0e       	add	r9, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <vfprintf+0xe8>
     efe:	e8 9c       	mul	r14, r8
     f00:	e0 2c       	mov	r14, r0
     f02:	11 24       	eor	r1, r1
     f04:	e8 0e       	add	r14, r24
     f06:	f0 e2       	ldi	r31, 0x20	; 32
     f08:	ff 2a       	or	r15, r31
     f0a:	0e c0       	rjmp	.+28     	; 0xf28 <vfprintf+0xe8>
     f0c:	9e 32       	cpi	r25, 0x2E	; 46
     f0e:	29 f4       	brne	.+10     	; 0xf1a <vfprintf+0xda>
     f10:	f6 fc       	sbrc	r15, 6
     f12:	6b c1       	rjmp	.+726    	; 0x11ea <vfprintf+0x3aa>
     f14:	40 e4       	ldi	r20, 0x40	; 64
     f16:	f4 2a       	or	r15, r20
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <vfprintf+0xe8>
     f1a:	9c 36       	cpi	r25, 0x6C	; 108
     f1c:	19 f4       	brne	.+6      	; 0xf24 <vfprintf+0xe4>
     f1e:	50 e8       	ldi	r21, 0x80	; 128
     f20:	f5 2a       	or	r15, r21
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0xe8>
     f24:	98 36       	cpi	r25, 0x68	; 104
     f26:	49 f4       	brne	.+18     	; 0xf3a <vfprintf+0xfa>
     f28:	f2 01       	movw	r30, r4
     f2a:	23 fd       	sbrc	r18, 3
     f2c:	95 91       	lpm	r25, Z+
     f2e:	23 ff       	sbrs	r18, 3
     f30:	91 91       	ld	r25, Z+
     f32:	2f 01       	movw	r4, r30
     f34:	99 23       	and	r25, r25
     f36:	09 f0       	breq	.+2      	; 0xf3a <vfprintf+0xfa>
     f38:	b8 cf       	rjmp	.-144    	; 0xeaa <vfprintf+0x6a>
     f3a:	89 2f       	mov	r24, r25
     f3c:	85 54       	subi	r24, 0x45	; 69
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	18 f0       	brcs	.+6      	; 0xf48 <vfprintf+0x108>
     f42:	80 52       	subi	r24, 0x20	; 32
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	38 f4       	brcc	.+14     	; 0xf56 <vfprintf+0x116>
     f48:	44 e0       	ldi	r20, 0x04	; 4
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	a4 0e       	add	r10, r20
     f4e:	b5 1e       	adc	r11, r21
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	59 83       	std	Y+1, r21	; 0x01
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <vfprintf+0x134>
     f56:	93 36       	cpi	r25, 0x63	; 99
     f58:	31 f0       	breq	.+12     	; 0xf66 <vfprintf+0x126>
     f5a:	93 37       	cpi	r25, 0x73	; 115
     f5c:	79 f0       	breq	.+30     	; 0xf7c <vfprintf+0x13c>
     f5e:	93 35       	cpi	r25, 0x53	; 83
     f60:	09 f0       	breq	.+2      	; 0xf64 <vfprintf+0x124>
     f62:	56 c0       	rjmp	.+172    	; 0x1010 <vfprintf+0x1d0>
     f64:	20 c0       	rjmp	.+64     	; 0xfa6 <vfprintf+0x166>
     f66:	f5 01       	movw	r30, r10
     f68:	80 81       	ld	r24, Z
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	42 e0       	ldi	r20, 0x02	; 2
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	a4 0e       	add	r10, r20
     f72:	b5 1e       	adc	r11, r21
     f74:	61 01       	movw	r12, r2
     f76:	01 e0       	ldi	r16, 0x01	; 1
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	12 c0       	rjmp	.+36     	; 0xfa0 <vfprintf+0x160>
     f7c:	f5 01       	movw	r30, r10
     f7e:	c0 80       	ld	r12, Z
     f80:	d1 80       	ldd	r13, Z+1	; 0x01
     f82:	f6 fc       	sbrc	r15, 6
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <vfprintf+0x14c>
     f86:	6f ef       	ldi	r22, 0xFF	; 255
     f88:	7f ef       	ldi	r23, 0xFF	; 255
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x150>
     f8c:	69 2d       	mov	r22, r9
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	42 e0       	ldi	r20, 0x02	; 2
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	a4 0e       	add	r10, r20
     f96:	b5 1e       	adc	r11, r21
     f98:	c6 01       	movw	r24, r12
     f9a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <strnlen>
     f9e:	8c 01       	movw	r16, r24
     fa0:	5f e7       	ldi	r21, 0x7F	; 127
     fa2:	f5 22       	and	r15, r21
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <vfprintf+0x18e>
     fa6:	f5 01       	movw	r30, r10
     fa8:	c0 80       	ld	r12, Z
     faa:	d1 80       	ldd	r13, Z+1	; 0x01
     fac:	f6 fc       	sbrc	r15, 6
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <vfprintf+0x176>
     fb0:	6f ef       	ldi	r22, 0xFF	; 255
     fb2:	7f ef       	ldi	r23, 0xFF	; 255
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <vfprintf+0x17a>
     fb6:	69 2d       	mov	r22, r9
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	42 e0       	ldi	r20, 0x02	; 2
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	a4 0e       	add	r10, r20
     fc0:	b5 1e       	adc	r11, r21
     fc2:	c6 01       	movw	r24, r12
     fc4:	0e 94 9d 0b 	call	0x173a	; 0x173a <strnlen_P>
     fc8:	8c 01       	movw	r16, r24
     fca:	50 e8       	ldi	r21, 0x80	; 128
     fcc:	f5 2a       	or	r15, r21
     fce:	f3 fe       	sbrs	r15, 3
     fd0:	07 c0       	rjmp	.+14     	; 0xfe0 <vfprintf+0x1a0>
     fd2:	1a c0       	rjmp	.+52     	; 0x1008 <vfprintf+0x1c8>
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	b3 01       	movw	r22, r6
     fda:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
     fde:	ea 94       	dec	r14
     fe0:	8e 2d       	mov	r24, r14
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	08 17       	cp	r16, r24
     fe6:	19 07       	cpc	r17, r25
     fe8:	a8 f3       	brcs	.-22     	; 0xfd4 <vfprintf+0x194>
     fea:	0e c0       	rjmp	.+28     	; 0x1008 <vfprintf+0x1c8>
     fec:	f6 01       	movw	r30, r12
     fee:	f7 fc       	sbrc	r15, 7
     ff0:	85 91       	lpm	r24, Z+
     ff2:	f7 fe       	sbrs	r15, 7
     ff4:	81 91       	ld	r24, Z+
     ff6:	6f 01       	movw	r12, r30
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b3 01       	movw	r22, r6
     ffc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    1000:	e1 10       	cpse	r14, r1
    1002:	ea 94       	dec	r14
    1004:	01 50       	subi	r16, 0x01	; 1
    1006:	10 40       	sbci	r17, 0x00	; 0
    1008:	01 15       	cp	r16, r1
    100a:	11 05       	cpc	r17, r1
    100c:	79 f7       	brne	.-34     	; 0xfec <vfprintf+0x1ac>
    100e:	ea c0       	rjmp	.+468    	; 0x11e4 <vfprintf+0x3a4>
    1010:	94 36       	cpi	r25, 0x64	; 100
    1012:	11 f0       	breq	.+4      	; 0x1018 <vfprintf+0x1d8>
    1014:	99 36       	cpi	r25, 0x69	; 105
    1016:	69 f5       	brne	.+90     	; 0x1072 <vfprintf+0x232>
    1018:	f7 fe       	sbrs	r15, 7
    101a:	08 c0       	rjmp	.+16     	; 0x102c <vfprintf+0x1ec>
    101c:	f5 01       	movw	r30, r10
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	42 81       	ldd	r20, Z+2	; 0x02
    1024:	53 81       	ldd	r21, Z+3	; 0x03
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0a c0       	rjmp	.+20     	; 0x1040 <vfprintf+0x200>
    102c:	f5 01       	movw	r30, r10
    102e:	80 81       	ld	r24, Z
    1030:	91 81       	ldd	r25, Z+1	; 0x01
    1032:	9c 01       	movw	r18, r24
    1034:	44 27       	eor	r20, r20
    1036:	37 fd       	sbrc	r19, 7
    1038:	40 95       	com	r20
    103a:	54 2f       	mov	r21, r20
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a8 0e       	add	r10, r24
    1042:	b9 1e       	adc	r11, r25
    1044:	9f e6       	ldi	r25, 0x6F	; 111
    1046:	f9 22       	and	r15, r25
    1048:	57 ff       	sbrs	r21, 7
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x21e>
    104c:	50 95       	com	r21
    104e:	40 95       	com	r20
    1050:	30 95       	com	r19
    1052:	21 95       	neg	r18
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	4f 4f       	sbci	r20, 0xFF	; 255
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	e0 e8       	ldi	r30, 0x80	; 128
    105c:	fe 2a       	or	r15, r30
    105e:	ca 01       	movw	r24, r20
    1060:	b9 01       	movw	r22, r18
    1062:	a1 01       	movw	r20, r2
    1064:	2a e0       	ldi	r18, 0x0A	; 10
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__ultoa_invert>
    106c:	d8 2e       	mov	r13, r24
    106e:	d2 18       	sub	r13, r2
    1070:	40 c0       	rjmp	.+128    	; 0x10f2 <vfprintf+0x2b2>
    1072:	95 37       	cpi	r25, 0x75	; 117
    1074:	29 f4       	brne	.+10     	; 0x1080 <vfprintf+0x240>
    1076:	1f 2d       	mov	r17, r15
    1078:	1f 7e       	andi	r17, 0xEF	; 239
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	1d c0       	rjmp	.+58     	; 0x10ba <vfprintf+0x27a>
    1080:	1f 2d       	mov	r17, r15
    1082:	19 7f       	andi	r17, 0xF9	; 249
    1084:	9f 36       	cpi	r25, 0x6F	; 111
    1086:	61 f0       	breq	.+24     	; 0x10a0 <vfprintf+0x260>
    1088:	90 37       	cpi	r25, 0x70	; 112
    108a:	20 f4       	brcc	.+8      	; 0x1094 <vfprintf+0x254>
    108c:	98 35       	cpi	r25, 0x58	; 88
    108e:	09 f0       	breq	.+2      	; 0x1092 <vfprintf+0x252>
    1090:	ac c0       	rjmp	.+344    	; 0x11ea <vfprintf+0x3aa>
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <vfprintf+0x272>
    1094:	90 37       	cpi	r25, 0x70	; 112
    1096:	39 f0       	breq	.+14     	; 0x10a6 <vfprintf+0x266>
    1098:	98 37       	cpi	r25, 0x78	; 120
    109a:	09 f0       	breq	.+2      	; 0x109e <vfprintf+0x25e>
    109c:	a6 c0       	rjmp	.+332    	; 0x11ea <vfprintf+0x3aa>
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <vfprintf+0x268>
    10a0:	28 e0       	ldi	r18, 0x08	; 8
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	0a c0       	rjmp	.+20     	; 0x10ba <vfprintf+0x27a>
    10a6:	10 61       	ori	r17, 0x10	; 16
    10a8:	14 fd       	sbrc	r17, 4
    10aa:	14 60       	ori	r17, 0x04	; 4
    10ac:	20 e1       	ldi	r18, 0x10	; 16
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <vfprintf+0x27a>
    10b2:	14 fd       	sbrc	r17, 4
    10b4:	16 60       	ori	r17, 0x06	; 6
    10b6:	20 e1       	ldi	r18, 0x10	; 16
    10b8:	32 e0       	ldi	r19, 0x02	; 2
    10ba:	17 ff       	sbrs	r17, 7
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <vfprintf+0x28e>
    10be:	f5 01       	movw	r30, r10
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	44 e0       	ldi	r20, 0x04	; 4
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	08 c0       	rjmp	.+16     	; 0x10de <vfprintf+0x29e>
    10ce:	f5 01       	movw	r30, r10
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	bc 01       	movw	r22, r24
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	42 e0       	ldi	r20, 0x02	; 2
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	a4 0e       	add	r10, r20
    10e0:	b5 1e       	adc	r11, r21
    10e2:	a1 01       	movw	r20, r2
    10e4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__ultoa_invert>
    10e8:	d8 2e       	mov	r13, r24
    10ea:	d2 18       	sub	r13, r2
    10ec:	8f e7       	ldi	r24, 0x7F	; 127
    10ee:	f8 2e       	mov	r15, r24
    10f0:	f1 22       	and	r15, r17
    10f2:	f6 fe       	sbrs	r15, 6
    10f4:	0b c0       	rjmp	.+22     	; 0x110c <vfprintf+0x2cc>
    10f6:	5e ef       	ldi	r21, 0xFE	; 254
    10f8:	f5 22       	and	r15, r21
    10fa:	d9 14       	cp	r13, r9
    10fc:	38 f4       	brcc	.+14     	; 0x110c <vfprintf+0x2cc>
    10fe:	f4 fe       	sbrs	r15, 4
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <vfprintf+0x2d0>
    1102:	f2 fc       	sbrc	r15, 2
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <vfprintf+0x2d0>
    1106:	8f ee       	ldi	r24, 0xEF	; 239
    1108:	f8 22       	and	r15, r24
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x2d0>
    110c:	1d 2d       	mov	r17, r13
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <vfprintf+0x2d2>
    1110:	19 2d       	mov	r17, r9
    1112:	f4 fe       	sbrs	r15, 4
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <vfprintf+0x2f0>
    1116:	fe 01       	movw	r30, r28
    1118:	ed 0d       	add	r30, r13
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	80 33       	cpi	r24, 0x30	; 48
    1120:	19 f4       	brne	.+6      	; 0x1128 <vfprintf+0x2e8>
    1122:	99 ee       	ldi	r25, 0xE9	; 233
    1124:	f9 22       	and	r15, r25
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <vfprintf+0x2f8>
    1128:	1f 5f       	subi	r17, 0xFF	; 255
    112a:	f2 fe       	sbrs	r15, 2
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <vfprintf+0x2f8>
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x2f6>
    1130:	8f 2d       	mov	r24, r15
    1132:	86 78       	andi	r24, 0x86	; 134
    1134:	09 f0       	breq	.+2      	; 0x1138 <vfprintf+0x2f8>
    1136:	1f 5f       	subi	r17, 0xFF	; 255
    1138:	0f 2d       	mov	r16, r15
    113a:	f3 fc       	sbrc	r15, 3
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <vfprintf+0x326>
    113e:	f0 fe       	sbrs	r15, 0
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <vfprintf+0x320>
    1142:	1e 15       	cp	r17, r14
    1144:	10 f0       	brcs	.+4      	; 0x114a <vfprintf+0x30a>
    1146:	9d 2c       	mov	r9, r13
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <vfprintf+0x320>
    114a:	9d 2c       	mov	r9, r13
    114c:	9e 0c       	add	r9, r14
    114e:	91 1a       	sub	r9, r17
    1150:	1e 2d       	mov	r17, r14
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <vfprintf+0x320>
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b3 01       	movw	r22, r6
    115a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    115e:	1f 5f       	subi	r17, 0xFF	; 255
    1160:	1e 15       	cp	r17, r14
    1162:	c0 f3       	brcs	.-16     	; 0x1154 <vfprintf+0x314>
    1164:	04 c0       	rjmp	.+8      	; 0x116e <vfprintf+0x32e>
    1166:	1e 15       	cp	r17, r14
    1168:	10 f4       	brcc	.+4      	; 0x116e <vfprintf+0x32e>
    116a:	e1 1a       	sub	r14, r17
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x330>
    116e:	ee 24       	eor	r14, r14
    1170:	04 ff       	sbrs	r16, 4
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <vfprintf+0x352>
    1174:	80 e3       	ldi	r24, 0x30	; 48
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	b3 01       	movw	r22, r6
    117a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    117e:	02 ff       	sbrs	r16, 2
    1180:	1d c0       	rjmp	.+58     	; 0x11bc <vfprintf+0x37c>
    1182:	01 fd       	sbrc	r16, 1
    1184:	03 c0       	rjmp	.+6      	; 0x118c <vfprintf+0x34c>
    1186:	88 e7       	ldi	r24, 0x78	; 120
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <vfprintf+0x368>
    118c:	88 e5       	ldi	r24, 0x58	; 88
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <vfprintf+0x368>
    1192:	80 2f       	mov	r24, r16
    1194:	86 78       	andi	r24, 0x86	; 134
    1196:	91 f0       	breq	.+36     	; 0x11bc <vfprintf+0x37c>
    1198:	01 ff       	sbrs	r16, 1
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x360>
    119c:	8b e2       	ldi	r24, 0x2B	; 43
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <vfprintf+0x362>
    11a0:	80 e2       	ldi	r24, 0x20	; 32
    11a2:	f7 fc       	sbrc	r15, 7
    11a4:	8d e2       	ldi	r24, 0x2D	; 45
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	b3 01       	movw	r22, r6
    11aa:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <vfprintf+0x37c>
    11b0:	80 e3       	ldi	r24, 0x30	; 48
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	b3 01       	movw	r22, r6
    11b6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    11ba:	9a 94       	dec	r9
    11bc:	d9 14       	cp	r13, r9
    11be:	c0 f3       	brcs	.-16     	; 0x11b0 <vfprintf+0x370>
    11c0:	da 94       	dec	r13
    11c2:	f1 01       	movw	r30, r2
    11c4:	ed 0d       	add	r30, r13
    11c6:	f1 1d       	adc	r31, r1
    11c8:	80 81       	ld	r24, Z
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	b3 01       	movw	r22, r6
    11ce:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    11d2:	dd 20       	and	r13, r13
    11d4:	a9 f7       	brne	.-22     	; 0x11c0 <vfprintf+0x380>
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <vfprintf+0x3a4>
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	b3 01       	movw	r22, r6
    11de:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <fputc>
    11e2:	ea 94       	dec	r14
    11e4:	ee 20       	and	r14, r14
    11e6:	c1 f7       	brne	.-16     	; 0x11d8 <vfprintf+0x398>
    11e8:	43 ce       	rjmp	.-890    	; 0xe70 <vfprintf+0x30>
    11ea:	f3 01       	movw	r30, r6
    11ec:	66 81       	ldd	r22, Z+6	; 0x06
    11ee:	77 81       	ldd	r23, Z+7	; 0x07
    11f0:	cb 01       	movw	r24, r22
    11f2:	2b 96       	adiw	r28, 0x0b	; 11
    11f4:	e2 e1       	ldi	r30, 0x12	; 18
    11f6:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__epilogue_restores__>

000011fa <putval>:
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 fd       	sbrc	r18, 0
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <putval+0x16>
    1200:	23 fd       	sbrc	r18, 3
    1202:	05 c0       	rjmp	.+10     	; 0x120e <putval+0x14>
    1204:	22 ff       	sbrs	r18, 2
    1206:	02 c0       	rjmp	.+4      	; 0x120c <putval+0x12>
    1208:	73 83       	std	Z+3, r23	; 0x03
    120a:	62 83       	std	Z+2, r22	; 0x02
    120c:	51 83       	std	Z+1, r21	; 0x01
    120e:	40 83       	st	Z, r20
    1210:	08 95       	ret

00001212 <mulacc>:
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	44 ff       	sbrs	r20, 4
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <mulacc+0x10>
    121e:	33 e0       	ldi	r19, 0x03	; 3
    1220:	11 c0       	rjmp	.+34     	; 0x1244 <mulacc+0x32>
    1222:	46 ff       	sbrs	r20, 6
    1224:	02 c0       	rjmp	.+4      	; 0x122a <mulacc+0x18>
    1226:	34 e0       	ldi	r19, 0x04	; 4
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <mulacc+0x32>
    122a:	db 01       	movw	r26, r22
    122c:	fc 01       	movw	r30, r24
    122e:	aa 0f       	add	r26, r26
    1230:	bb 1f       	adc	r27, r27
    1232:	ee 1f       	adc	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	10 94       	com	r1
    1238:	d1 f7       	brne	.-12     	; 0x122e <mulacc+0x1c>
    123a:	6a 0f       	add	r22, r26
    123c:	7b 1f       	adc	r23, r27
    123e:	8e 1f       	adc	r24, r30
    1240:	9f 1f       	adc	r25, r31
    1242:	31 e0       	ldi	r19, 0x01	; 1
    1244:	66 0f       	add	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	31 50       	subi	r19, 0x01	; 1
    124e:	d1 f7       	brne	.-12     	; 0x1244 <mulacc+0x32>
    1250:	7b 01       	movw	r14, r22
    1252:	8c 01       	movw	r16, r24
    1254:	e2 0e       	add	r14, r18
    1256:	f1 1c       	adc	r15, r1
    1258:	01 1d       	adc	r16, r1
    125a:	11 1d       	adc	r17, r1
    125c:	a8 01       	movw	r20, r16
    125e:	97 01       	movw	r18, r14
    1260:	b7 01       	movw	r22, r14
    1262:	ca 01       	movw	r24, r20
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <skip_spaces>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	8c 01       	movw	r16, r24
    1278:	c8 01       	movw	r24, r16
    127a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    127e:	ec 01       	movw	r28, r24
    1280:	97 fd       	sbrc	r25, 7
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <skip_spaces+0x26>
    1284:	0e 94 a1 0c 	call	0x1942	; 0x1942 <isspace>
    1288:	89 2b       	or	r24, r25
    128a:	b1 f7       	brne	.-20     	; 0x1278 <skip_spaces+0xa>
    128c:	ce 01       	movw	r24, r28
    128e:	b8 01       	movw	r22, r16
    1290:	0e 94 21 0c 	call	0x1842	; 0x1842 <ungetc>
    1294:	ce 01       	movw	r24, r28
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	08 95       	ret

000012a0 <conv_int>:
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e5       	ldi	r30, 0x56	; 86
    12a6:	f9 e0       	ldi	r31, 0x09	; 9
    12a8:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__prologue_saves__+0x10>
    12ac:	ec 01       	movw	r28, r24
    12ae:	c6 2e       	mov	r12, r22
    12b0:	5a 01       	movw	r10, r20
    12b2:	12 2f       	mov	r17, r18
    12b4:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    12b8:	ac 01       	movw	r20, r24
    12ba:	8b 32       	cpi	r24, 0x2B	; 43
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <conv_int+0x24>
    12be:	8d 32       	cpi	r24, 0x2D	; 45
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <conv_int+0x36>
    12c2:	10 68       	ori	r17, 0x80	; 128
    12c4:	ca 94       	dec	r12
    12c6:	09 f4       	brne	.+2      	; 0x12ca <conv_int+0x2a>
    12c8:	6d c0       	rjmp	.+218    	; 0x13a4 <conv_int+0x104>
    12ca:	ce 01       	movw	r24, r28
    12cc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    12d0:	ac 01       	movw	r20, r24
    12d2:	97 fd       	sbrc	r25, 7
    12d4:	67 c0       	rjmp	.+206    	; 0x13a4 <conv_int+0x104>
    12d6:	6d ef       	ldi	r22, 0xFD	; 253
    12d8:	d6 2e       	mov	r13, r22
    12da:	d1 22       	and	r13, r17
    12dc:	8d 2d       	mov	r24, r13
    12de:	80 73       	andi	r24, 0x30	; 48
    12e0:	01 f5       	brne	.+64     	; 0x1322 <conv_int+0x82>
    12e2:	40 33       	cpi	r20, 0x30	; 48
    12e4:	f1 f4       	brne	.+60     	; 0x1322 <conv_int+0x82>
    12e6:	ca 94       	dec	r12
    12e8:	09 f4       	brne	.+2      	; 0x12ec <conv_int+0x4c>
    12ea:	47 c0       	rjmp	.+142    	; 0x137a <conv_int+0xda>
    12ec:	ce 01       	movw	r24, r28
    12ee:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    12f2:	ac 01       	movw	r20, r24
    12f4:	97 fd       	sbrc	r25, 7
    12f6:	41 c0       	rjmp	.+130    	; 0x137a <conv_int+0xda>
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	d8 2a       	or	r13, r24
    12fc:	48 37       	cpi	r20, 0x78	; 120
    12fe:	11 f0       	breq	.+4      	; 0x1304 <conv_int+0x64>
    1300:	48 35       	cpi	r20, 0x58	; 88
    1302:	59 f4       	brne	.+22     	; 0x131a <conv_int+0x7a>
    1304:	80 e4       	ldi	r24, 0x40	; 64
    1306:	d8 2a       	or	r13, r24
    1308:	ca 94       	dec	r12
    130a:	b9 f1       	breq	.+110    	; 0x137a <conv_int+0xda>
    130c:	ce 01       	movw	r24, r28
    130e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    1312:	ac 01       	movw	r20, r24
    1314:	99 23       	and	r25, r25
    1316:	2c f4       	brge	.+10     	; 0x1322 <conv_int+0x82>
    1318:	30 c0       	rjmp	.+96     	; 0x137a <conv_int+0xda>
    131a:	d6 fc       	sbrc	r13, 6
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <conv_int+0x82>
    131e:	80 e1       	ldi	r24, 0x10	; 16
    1320:	d8 2a       	or	r13, r24
    1322:	ee 24       	eor	r14, r14
    1324:	ff 24       	eor	r15, r15
    1326:	87 01       	movw	r16, r14
    1328:	24 2f       	mov	r18, r20
    132a:	20 53       	subi	r18, 0x30	; 48
    132c:	28 30       	cpi	r18, 0x08	; 8
    132e:	88 f0       	brcs	.+34     	; 0x1352 <conv_int+0xb2>
    1330:	d4 fc       	sbrc	r13, 4
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <conv_int+0xa6>
    1334:	2a 30       	cpi	r18, 0x0A	; 10
    1336:	68 f0       	brcs	.+26     	; 0x1352 <conv_int+0xb2>
    1338:	d6 fe       	sbrs	r13, 6
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <conv_int+0xa6>
    133c:	2f 7d       	andi	r18, 0xDF	; 223
    133e:	82 2f       	mov	r24, r18
    1340:	81 51       	subi	r24, 0x11	; 17
    1342:	86 30       	cpi	r24, 0x06	; 6
    1344:	28 f0       	brcs	.+10     	; 0x1350 <conv_int+0xb0>
    1346:	ca 01       	movw	r24, r20
    1348:	be 01       	movw	r22, r28
    134a:	0e 94 21 0c 	call	0x1842	; 0x1842 <ungetc>
    134e:	12 c0       	rjmp	.+36     	; 0x1374 <conv_int+0xd4>
    1350:	27 50       	subi	r18, 0x07	; 7
    1352:	c8 01       	movw	r24, r16
    1354:	b7 01       	movw	r22, r14
    1356:	4d 2d       	mov	r20, r13
    1358:	0e 94 09 09 	call	0x1212	; 0x1212 <mulacc>
    135c:	7b 01       	movw	r14, r22
    135e:	8c 01       	movw	r16, r24
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	d8 2a       	or	r13, r24
    1364:	ca 94       	dec	r12
    1366:	61 f0       	breq	.+24     	; 0x1380 <conv_int+0xe0>
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    136e:	ac 01       	movw	r20, r24
    1370:	97 ff       	sbrs	r25, 7
    1372:	da cf       	rjmp	.-76     	; 0x1328 <conv_int+0x88>
    1374:	d1 fc       	sbrc	r13, 1
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <conv_int+0xe0>
    1378:	15 c0       	rjmp	.+42     	; 0x13a4 <conv_int+0x104>
    137a:	ee 24       	eor	r14, r14
    137c:	ff 24       	eor	r15, r15
    137e:	87 01       	movw	r16, r14
    1380:	d7 fe       	sbrs	r13, 7
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <conv_int+0xf4>
    1384:	10 95       	com	r17
    1386:	00 95       	com	r16
    1388:	f0 94       	com	r15
    138a:	e0 94       	com	r14
    138c:	e1 1c       	adc	r14, r1
    138e:	f1 1c       	adc	r15, r1
    1390:	01 1d       	adc	r16, r1
    1392:	11 1d       	adc	r17, r1
    1394:	c5 01       	movw	r24, r10
    1396:	b8 01       	movw	r22, r16
    1398:	a7 01       	movw	r20, r14
    139a:	2d 2d       	mov	r18, r13
    139c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <putval>
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <conv_int+0x106>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	ea e0       	ldi	r30, 0x0A	; 10
    13ac:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__epilogue_restores__+0x10>

000013b0 <conv_brk>:
    13b0:	a0 e2       	ldi	r26, 0x20	; 32
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee ed       	ldi	r30, 0xDE	; 222
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__prologue_saves__+0x8>
    13bc:	6c 01       	movw	r12, r24
    13be:	a6 2e       	mov	r10, r22
    13c0:	8a 01       	movw	r16, r20
    13c2:	79 01       	movw	r14, r18
    13c4:	fe 01       	movw	r30, r28
    13c6:	31 96       	adiw	r30, 0x01	; 1
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	df 01       	movw	r26, r30
    13cc:	1d 92       	st	X+, r1
    13ce:	8a 95       	dec	r24
    13d0:	e9 f7       	brne	.-6      	; 0x13cc <conv_brk+0x1c>
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	4f 01       	movw	r8, r30
    13de:	a1 e0       	ldi	r26, 0x01	; 1
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	f6 01       	movw	r30, r12
    13e4:	83 81       	ldd	r24, Z+3	; 0x03
    13e6:	f7 01       	movw	r30, r14
    13e8:	83 fd       	sbrc	r24, 3
    13ea:	25 91       	lpm	r18, Z+
    13ec:	83 ff       	sbrs	r24, 3
    13ee:	21 91       	ld	r18, Z+
    13f0:	7f 01       	movw	r14, r30
    13f2:	22 23       	and	r18, r18
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <conv_brk+0x48>
    13f6:	7e c0       	rjmp	.+252    	; 0x14f4 <conv_brk+0x144>
    13f8:	2e 35       	cpi	r18, 0x5E	; 94
    13fa:	19 f4       	brne	.+6      	; 0x1402 <conv_brk+0x52>
    13fc:	41 15       	cp	r20, r1
    13fe:	51 05       	cpc	r21, r1
    1400:	69 f1       	breq	.+90     	; 0x145c <conv_brk+0xac>
    1402:	87 2f       	mov	r24, r23
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	84 17       	cp	r24, r20
    1408:	95 07       	cpc	r25, r21
    140a:	44 f4       	brge	.+16     	; 0x141c <conv_brk+0x6c>
    140c:	2d 35       	cpi	r18, 0x5D	; 93
    140e:	51 f1       	breq	.+84     	; 0x1464 <conv_brk+0xb4>
    1410:	2d 32       	cpi	r18, 0x2D	; 45
    1412:	21 f4       	brne	.+8      	; 0x141c <conv_brk+0x6c>
    1414:	33 23       	and	r19, r19
    1416:	29 f4       	brne	.+10     	; 0x1422 <conv_brk+0x72>
    1418:	31 e0       	ldi	r19, 0x01	; 1
    141a:	21 c0       	rjmp	.+66     	; 0x145e <conv_brk+0xae>
    141c:	33 23       	and	r19, r19
    141e:	09 f4       	brne	.+2      	; 0x1422 <conv_brk+0x72>
    1420:	62 2f       	mov	r22, r18
    1422:	32 2f       	mov	r19, r18
    1424:	83 2f       	mov	r24, r19
    1426:	86 95       	lsr	r24
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	f4 01       	movw	r30, r8
    142e:	e8 0f       	add	r30, r24
    1430:	f1 1d       	adc	r31, r1
    1432:	83 2f       	mov	r24, r19
    1434:	87 70       	andi	r24, 0x07	; 7
    1436:	3d 01       	movw	r6, r26
    1438:	02 c0       	rjmp	.+4      	; 0x143e <conv_brk+0x8e>
    143a:	66 0c       	add	r6, r6
    143c:	77 1c       	adc	r7, r7
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <conv_brk+0x8a>
    1442:	20 81       	ld	r18, Z
    1444:	26 29       	or	r18, r6
    1446:	20 83       	st	Z, r18
    1448:	36 17       	cp	r19, r22
    144a:	11 f4       	brne	.+4      	; 0x1450 <conv_brk+0xa0>
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	07 c0       	rjmp	.+14     	; 0x145e <conv_brk+0xae>
    1450:	36 17       	cp	r19, r22
    1452:	10 f4       	brcc	.+4      	; 0x1458 <conv_brk+0xa8>
    1454:	3f 5f       	subi	r19, 0xFF	; 255
    1456:	e6 cf       	rjmp	.-52     	; 0x1424 <conv_brk+0x74>
    1458:	31 50       	subi	r19, 0x01	; 1
    145a:	e4 cf       	rjmp	.-56     	; 0x1424 <conv_brk+0x74>
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	4f 5f       	subi	r20, 0xFF	; 255
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	bf cf       	rjmp	.-130    	; 0x13e2 <conv_brk+0x32>
    1464:	33 23       	and	r19, r19
    1466:	19 f0       	breq	.+6      	; 0x146e <conv_brk+0xbe>
    1468:	8e 81       	ldd	r24, Y+6	; 0x06
    146a:	80 62       	ori	r24, 0x20	; 32
    146c:	8e 83       	std	Y+6, r24	; 0x06
    146e:	77 23       	and	r23, r23
    1470:	59 f0       	breq	.+22     	; 0x1488 <conv_brk+0xd8>
    1472:	fe 01       	movw	r30, r28
    1474:	31 96       	adiw	r30, 0x01	; 1
    1476:	9e 01       	movw	r18, r28
    1478:	2f 5d       	subi	r18, 0xDF	; 223
    147a:	3f 4f       	sbci	r19, 0xFF	; 255
    147c:	80 81       	ld	r24, Z
    147e:	80 95       	com	r24
    1480:	81 93       	st	Z+, r24
    1482:	e2 17       	cp	r30, r18
    1484:	f3 07       	cpc	r31, r19
    1486:	d1 f7       	brne	.-12     	; 0x147c <conv_brk+0xcc>
    1488:	bb 24       	eor	r11, r11
    148a:	b3 94       	inc	r11
    148c:	4e 01       	movw	r8, r28
    148e:	08 94       	sec
    1490:	81 1c       	adc	r8, r1
    1492:	91 1c       	adc	r9, r1
    1494:	c6 01       	movw	r24, r12
    1496:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    149a:	ac 01       	movw	r20, r24
    149c:	97 fd       	sbrc	r25, 7
    149e:	22 c0       	rjmp	.+68     	; 0x14e4 <conv_brk+0x134>
    14a0:	86 95       	lsr	r24
    14a2:	86 95       	lsr	r24
    14a4:	86 95       	lsr	r24
    14a6:	f4 01       	movw	r30, r8
    14a8:	e8 0f       	add	r30, r24
    14aa:	f1 1d       	adc	r31, r1
    14ac:	80 81       	ld	r24, Z
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9a 01       	movw	r18, r20
    14b2:	27 70       	andi	r18, 0x07	; 7
    14b4:	30 70       	andi	r19, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <conv_brk+0x10c>
    14b8:	95 95       	asr	r25
    14ba:	87 95       	ror	r24
    14bc:	2a 95       	dec	r18
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <conv_brk+0x108>
    14c0:	80 fd       	sbrc	r24, 0
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <conv_brk+0x11e>
    14c4:	ca 01       	movw	r24, r20
    14c6:	b6 01       	movw	r22, r12
    14c8:	0e 94 21 0c 	call	0x1842	; 0x1842 <ungetc>
    14cc:	0b c0       	rjmp	.+22     	; 0x14e4 <conv_brk+0x134>
    14ce:	01 15       	cp	r16, r1
    14d0:	11 05       	cpc	r17, r1
    14d2:	19 f0       	breq	.+6      	; 0x14da <conv_brk+0x12a>
    14d4:	d8 01       	movw	r26, r16
    14d6:	4d 93       	st	X+, r20
    14d8:	8d 01       	movw	r16, r26
    14da:	aa 94       	dec	r10
    14dc:	bb 24       	eor	r11, r11
    14de:	aa 20       	and	r10, r10
    14e0:	c9 f6       	brne	.-78     	; 0x1494 <conv_brk+0xe4>
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <conv_brk+0x138>
    14e4:	bb 20       	and	r11, r11
    14e6:	31 f4       	brne	.+12     	; 0x14f4 <conv_brk+0x144>
    14e8:	01 15       	cp	r16, r1
    14ea:	11 05       	cpc	r17, r1
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <conv_brk+0x148>
    14ee:	f8 01       	movw	r30, r16
    14f0:	10 82       	st	Z, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <conv_brk+0x148>
    14f4:	ee 24       	eor	r14, r14
    14f6:	ff 24       	eor	r15, r15
    14f8:	c7 01       	movw	r24, r14
    14fa:	a0 96       	adiw	r28, 0x20	; 32
    14fc:	ee e0       	ldi	r30, 0x0E	; 14
    14fe:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__epilogue_restores__+0x8>

00001502 <vfscanf>:
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e8       	ldi	r30, 0x87	; 135
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__prologue_saves__+0x8>
    150e:	5c 01       	movw	r10, r24
    1510:	6b 01       	movw	r12, r22
    1512:	3a 01       	movw	r6, r20
    1514:	fc 01       	movw	r30, r24
    1516:	17 82       	std	Z+7, r1	; 0x07
    1518:	16 82       	std	Z+6, r1	; 0x06
    151a:	88 24       	eor	r8, r8
    151c:	ea c0       	rjmp	.+468    	; 0x16f2 <vfscanf+0x1f0>
    151e:	81 2f       	mov	r24, r17
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 a1 0c 	call	0x1942	; 0x1942 <isspace>
    1526:	89 2b       	or	r24, r25
    1528:	21 f0       	breq	.+8      	; 0x1532 <vfscanf+0x30>
    152a:	c5 01       	movw	r24, r10
    152c:	0e 94 37 09 	call	0x126e	; 0x126e <skip_spaces>
    1530:	e0 c0       	rjmp	.+448    	; 0x16f2 <vfscanf+0x1f0>
    1532:	15 32       	cpi	r17, 0x25	; 37
    1534:	49 f4       	brne	.+18     	; 0x1548 <vfscanf+0x46>
    1536:	f6 01       	movw	r30, r12
    1538:	f3 fc       	sbrc	r15, 3
    153a:	65 91       	lpm	r22, Z+
    153c:	f3 fe       	sbrs	r15, 3
    153e:	61 91       	ld	r22, Z+
    1540:	6f 01       	movw	r12, r30
    1542:	65 32       	cpi	r22, 0x25	; 37
    1544:	69 f4       	brne	.+26     	; 0x1560 <vfscanf+0x5e>
    1546:	15 e2       	ldi	r17, 0x25	; 37
    1548:	c5 01       	movw	r24, r10
    154a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    154e:	97 fd       	sbrc	r25, 7
    1550:	dc c0       	rjmp	.+440    	; 0x170a <vfscanf+0x208>
    1552:	18 17       	cp	r17, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfscanf+0x56>
    1556:	cd c0       	rjmp	.+410    	; 0x16f2 <vfscanf+0x1f0>
    1558:	b5 01       	movw	r22, r10
    155a:	0e 94 21 0c 	call	0x1842	; 0x1842 <ungetc>
    155e:	da c0       	rjmp	.+436    	; 0x1714 <vfscanf+0x212>
    1560:	6a 32       	cpi	r22, 0x2A	; 42
    1562:	19 f0       	breq	.+6      	; 0x156a <vfscanf+0x68>
    1564:	16 2f       	mov	r17, r22
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <vfscanf+0x74>
    156a:	f3 fc       	sbrc	r15, 3
    156c:	15 91       	lpm	r17, Z+
    156e:	f3 fe       	sbrs	r15, 3
    1570:	11 91       	ld	r17, Z+
    1572:	6f 01       	movw	r12, r30
    1574:	01 e0       	ldi	r16, 0x01	; 1
    1576:	99 24       	eor	r9, r9
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <vfscanf+0x96>
    157a:	02 60       	ori	r16, 0x02	; 2
    157c:	69 2d       	mov	r22, r9
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	0e 94 09 09 	call	0x1212	; 0x1212 <mulacc>
    158a:	96 2e       	mov	r9, r22
    158c:	f6 01       	movw	r30, r12
    158e:	f3 fc       	sbrc	r15, 3
    1590:	15 91       	lpm	r17, Z+
    1592:	f3 fe       	sbrs	r15, 3
    1594:	11 91       	ld	r17, Z+
    1596:	6f 01       	movw	r12, r30
    1598:	21 2f       	mov	r18, r17
    159a:	20 53       	subi	r18, 0x30	; 48
    159c:	2a 30       	cpi	r18, 0x0A	; 10
    159e:	68 f3       	brcs	.-38     	; 0x157a <vfscanf+0x78>
    15a0:	01 fd       	sbrc	r16, 1
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <vfscanf+0xa8>
    15a4:	99 24       	eor	r9, r9
    15a6:	9a 94       	dec	r9
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <vfscanf+0xae>
    15aa:	99 20       	and	r9, r9
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <vfscanf+0xae>
    15ae:	b2 c0       	rjmp	.+356    	; 0x1714 <vfscanf+0x212>
    15b0:	18 36       	cpi	r17, 0x68	; 104
    15b2:	21 f0       	breq	.+8      	; 0x15bc <vfscanf+0xba>
    15b4:	1c 36       	cpi	r17, 0x6C	; 108
    15b6:	99 f4       	brne	.+38     	; 0x15de <vfscanf+0xdc>
    15b8:	f6 01       	movw	r30, r12
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <vfscanf+0xd0>
    15bc:	f6 01       	movw	r30, r12
    15be:	f3 fc       	sbrc	r15, 3
    15c0:	65 91       	lpm	r22, Z+
    15c2:	f3 fe       	sbrs	r15, 3
    15c4:	61 91       	ld	r22, Z+
    15c6:	68 36       	cpi	r22, 0x68	; 104
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <vfscanf+0xce>
    15ca:	6f 01       	movw	r12, r30
    15cc:	16 2f       	mov	r17, r22
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <vfscanf+0xdc>
    15d0:	08 60       	ori	r16, 0x08	; 8
    15d2:	04 60       	ori	r16, 0x04	; 4
    15d4:	f3 fc       	sbrc	r15, 3
    15d6:	15 91       	lpm	r17, Z+
    15d8:	f3 fe       	sbrs	r15, 3
    15da:	11 91       	ld	r17, Z+
    15dc:	6f 01       	movw	r12, r30
    15de:	11 23       	and	r17, r17
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <vfscanf+0xe2>
    15e2:	98 c0       	rjmp	.+304    	; 0x1714 <vfscanf+0x212>
    15e4:	84 e6       	ldi	r24, 0x64	; 100
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	61 2f       	mov	r22, r17
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	0e 94 92 0b 	call	0x1724	; 0x1724 <strchr_P>
    15f0:	89 2b       	or	r24, r25
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfscanf+0xf4>
    15f4:	8f c0       	rjmp	.+286    	; 0x1714 <vfscanf+0x212>
    15f6:	80 2f       	mov	r24, r16
    15f8:	00 ff       	sbrs	r16, 0
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfscanf+0x100>
    15fc:	ee 24       	eor	r14, r14
    15fe:	ff 24       	eor	r15, r15
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfscanf+0x10e>
    1602:	f3 01       	movw	r30, r6
    1604:	e0 80       	ld	r14, Z
    1606:	f1 80       	ldd	r15, Z+1	; 0x01
    1608:	22 e0       	ldi	r18, 0x02	; 2
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	62 0e       	add	r6, r18
    160e:	73 1e       	adc	r7, r19
    1610:	1e 36       	cpi	r17, 0x6E	; 110
    1612:	51 f4       	brne	.+20     	; 0x1628 <vfscanf+0x126>
    1614:	f5 01       	movw	r30, r10
    1616:	46 81       	ldd	r20, Z+6	; 0x06
    1618:	57 81       	ldd	r21, Z+7	; 0x07
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	c7 01       	movw	r24, r14
    1620:	20 2f       	mov	r18, r16
    1622:	0e 94 fd 08 	call	0x11fa	; 0x11fa <putval>
    1626:	65 c0       	rjmp	.+202    	; 0x16f2 <vfscanf+0x1f0>
    1628:	13 36       	cpi	r17, 0x63	; 99
    162a:	91 f4       	brne	.+36     	; 0x1650 <vfscanf+0x14e>
    162c:	81 fd       	sbrc	r24, 1
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <vfscanf+0x132>
    1630:	99 24       	eor	r9, r9
    1632:	93 94       	inc	r9
    1634:	c5 01       	movw	r24, r10
    1636:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    163a:	97 fd       	sbrc	r25, 7
    163c:	66 c0       	rjmp	.+204    	; 0x170a <vfscanf+0x208>
    163e:	e1 14       	cp	r14, r1
    1640:	f1 04       	cpc	r15, r1
    1642:	19 f0       	breq	.+6      	; 0x164a <vfscanf+0x148>
    1644:	f7 01       	movw	r30, r14
    1646:	81 93       	st	Z+, r24
    1648:	7f 01       	movw	r14, r30
    164a:	9a 94       	dec	r9
    164c:	99 f7       	brne	.-26     	; 0x1634 <vfscanf+0x132>
    164e:	4f c0       	rjmp	.+158    	; 0x16ee <vfscanf+0x1ec>
    1650:	1b 35       	cpi	r17, 0x5B	; 91
    1652:	59 f4       	brne	.+22     	; 0x166a <vfscanf+0x168>
    1654:	c5 01       	movw	r24, r10
    1656:	69 2d       	mov	r22, r9
    1658:	a7 01       	movw	r20, r14
    165a:	96 01       	movw	r18, r12
    165c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <conv_brk>
    1660:	6c 01       	movw	r12, r24
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	09 f0       	breq	.+2      	; 0x1668 <vfscanf+0x166>
    1666:	43 c0       	rjmp	.+134    	; 0x16ee <vfscanf+0x1ec>
    1668:	3d c0       	rjmp	.+122    	; 0x16e4 <vfscanf+0x1e2>
    166a:	c5 01       	movw	r24, r10
    166c:	0e 94 37 09 	call	0x126e	; 0x126e <skip_spaces>
    1670:	97 fd       	sbrc	r25, 7
    1672:	4b c0       	rjmp	.+150    	; 0x170a <vfscanf+0x208>
    1674:	1f 36       	cpi	r17, 0x6F	; 111
    1676:	59 f1       	breq	.+86     	; 0x16ce <vfscanf+0x1cc>
    1678:	10 37       	cpi	r17, 0x70	; 112
    167a:	28 f4       	brcc	.+10     	; 0x1686 <vfscanf+0x184>
    167c:	14 36       	cpi	r17, 0x64	; 100
    167e:	29 f1       	breq	.+74     	; 0x16ca <vfscanf+0x1c8>
    1680:	19 36       	cpi	r17, 0x69	; 105
    1682:	39 f5       	brne	.+78     	; 0x16d2 <vfscanf+0x1d0>
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <vfscanf+0x1d2>
    1686:	13 37       	cpi	r17, 0x73	; 115
    1688:	19 f0       	breq	.+6      	; 0x1690 <vfscanf+0x18e>
    168a:	15 37       	cpi	r17, 0x75	; 117
    168c:	11 f5       	brne	.+68     	; 0x16d2 <vfscanf+0x1d0>
    168e:	1d c0       	rjmp	.+58     	; 0x16ca <vfscanf+0x1c8>
    1690:	c5 01       	movw	r24, r10
    1692:	0e 94 b3 0b 	call	0x1766	; 0x1766 <fgetc>
    1696:	ec 01       	movw	r28, r24
    1698:	97 fd       	sbrc	r25, 7
    169a:	11 c0       	rjmp	.+34     	; 0x16be <vfscanf+0x1bc>
    169c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <isspace>
    16a0:	89 2b       	or	r24, r25
    16a2:	29 f0       	breq	.+10     	; 0x16ae <vfscanf+0x1ac>
    16a4:	ce 01       	movw	r24, r28
    16a6:	b5 01       	movw	r22, r10
    16a8:	0e 94 21 0c 	call	0x1842	; 0x1842 <ungetc>
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <vfscanf+0x1bc>
    16ae:	e1 14       	cp	r14, r1
    16b0:	f1 04       	cpc	r15, r1
    16b2:	19 f0       	breq	.+6      	; 0x16ba <vfscanf+0x1b8>
    16b4:	f7 01       	movw	r30, r14
    16b6:	c1 93       	st	Z+, r28
    16b8:	7f 01       	movw	r14, r30
    16ba:	9a 94       	dec	r9
    16bc:	49 f7       	brne	.-46     	; 0x1690 <vfscanf+0x18e>
    16be:	e1 14       	cp	r14, r1
    16c0:	f1 04       	cpc	r15, r1
    16c2:	a9 f0       	breq	.+42     	; 0x16ee <vfscanf+0x1ec>
    16c4:	f7 01       	movw	r30, r14
    16c6:	10 82       	st	Z, r1
    16c8:	12 c0       	rjmp	.+36     	; 0x16ee <vfscanf+0x1ec>
    16ca:	00 62       	ori	r16, 0x20	; 32
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfscanf+0x1d2>
    16ce:	00 61       	ori	r16, 0x10	; 16
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <vfscanf+0x1d2>
    16d2:	00 64       	ori	r16, 0x40	; 64
    16d4:	c5 01       	movw	r24, r10
    16d6:	69 2d       	mov	r22, r9
    16d8:	a7 01       	movw	r20, r14
    16da:	20 2f       	mov	r18, r16
    16dc:	0e 94 50 09 	call	0x12a0	; 0x12a0 <conv_int>
    16e0:	88 23       	and	r24, r24
    16e2:	29 f4       	brne	.+10     	; 0x16ee <vfscanf+0x1ec>
    16e4:	f5 01       	movw	r30, r10
    16e6:	83 81       	ldd	r24, Z+3	; 0x03
    16e8:	80 73       	andi	r24, 0x30	; 48
    16ea:	79 f4       	brne	.+30     	; 0x170a <vfscanf+0x208>
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <vfscanf+0x212>
    16ee:	00 ff       	sbrs	r16, 0
    16f0:	83 94       	inc	r8
    16f2:	f5 01       	movw	r30, r10
    16f4:	f3 80       	ldd	r15, Z+3	; 0x03
    16f6:	f6 01       	movw	r30, r12
    16f8:	f3 fc       	sbrc	r15, 3
    16fa:	15 91       	lpm	r17, Z+
    16fc:	f3 fe       	sbrs	r15, 3
    16fe:	11 91       	ld	r17, Z+
    1700:	6f 01       	movw	r12, r30
    1702:	11 23       	and	r17, r17
    1704:	09 f0       	breq	.+2      	; 0x1708 <vfscanf+0x206>
    1706:	0b cf       	rjmp	.-490    	; 0x151e <vfscanf+0x1c>
    1708:	05 c0       	rjmp	.+10     	; 0x1714 <vfscanf+0x212>
    170a:	88 20       	and	r8, r8
    170c:	19 f4       	brne	.+6      	; 0x1714 <vfscanf+0x212>
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfscanf+0x216>
    1714:	28 2d       	mov	r18, r8
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	c9 01       	movw	r24, r18
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	ee e0       	ldi	r30, 0x0E	; 14
    1720:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__epilogue_restores__+0x8>

00001724 <strchr_P>:
    1724:	fc 01       	movw	r30, r24
    1726:	05 90       	lpm	r0, Z+
    1728:	06 16       	cp	r0, r22
    172a:	21 f0       	breq	.+8      	; 0x1734 <strchr_P+0x10>
    172c:	00 20       	and	r0, r0
    172e:	d9 f7       	brne	.-10     	; 0x1726 <strchr_P+0x2>
    1730:	c0 01       	movw	r24, r0
    1732:	08 95       	ret
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	cf 01       	movw	r24, r30
    1738:	08 95       	ret

0000173a <strnlen_P>:
    173a:	fc 01       	movw	r30, r24
    173c:	05 90       	lpm	r0, Z+
    173e:	61 50       	subi	r22, 0x01	; 1
    1740:	70 40       	sbci	r23, 0x00	; 0
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen_P+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <strnlen>:
    1750:	fc 01       	movw	r30, r24
    1752:	61 50       	subi	r22, 0x01	; 1
    1754:	70 40       	sbci	r23, 0x00	; 0
    1756:	01 90       	ld	r0, Z+
    1758:	01 10       	cpse	r0, r1
    175a:	d8 f7       	brcc	.-10     	; 0x1752 <strnlen+0x2>
    175c:	80 95       	com	r24
    175e:	90 95       	com	r25
    1760:	8e 0f       	add	r24, r30
    1762:	9f 1f       	adc	r25, r31
    1764:	08 95       	ret

00001766 <fgetc>:
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ec 01       	movw	r28, r24
    176c:	4b 81       	ldd	r20, Y+3	; 0x03
    176e:	40 ff       	sbrs	r20, 0
    1770:	1a c0       	rjmp	.+52     	; 0x17a6 <fgetc+0x40>
    1772:	46 ff       	sbrs	r20, 6
    1774:	0a c0       	rjmp	.+20     	; 0x178a <fgetc+0x24>
    1776:	4f 7b       	andi	r20, 0xBF	; 191
    1778:	4b 83       	std	Y+3, r20	; 0x03
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	9f 81       	ldd	r25, Y+7	; 0x07
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	9f 83       	std	Y+7, r25	; 0x07
    1782:	8e 83       	std	Y+6, r24	; 0x06
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	2b c0       	rjmp	.+86     	; 0x17e0 <fgetc+0x7a>
    178a:	42 ff       	sbrs	r20, 2
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <fgetc+0x4e>
    178e:	e8 81       	ld	r30, Y
    1790:	f9 81       	ldd	r31, Y+1	; 0x01
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	33 27       	eor	r19, r19
    1798:	27 fd       	sbrc	r18, 7
    179a:	30 95       	com	r19
    179c:	21 15       	cp	r18, r1
    179e:	31 05       	cpc	r19, r1
    17a0:	29 f4       	brne	.+10     	; 0x17ac <fgetc+0x46>
    17a2:	40 62       	ori	r20, 0x20	; 32
    17a4:	4b 83       	std	Y+3, r20	; 0x03
    17a6:	2f ef       	ldi	r18, 0xFF	; 255
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	1b c0       	rjmp	.+54     	; 0x17e2 <fgetc+0x7c>
    17ac:	31 96       	adiw	r30, 0x01	; 1
    17ae:	f9 83       	std	Y+1, r31	; 0x01
    17b0:	e8 83       	st	Y, r30
    17b2:	11 c0       	rjmp	.+34     	; 0x17d6 <fgetc+0x70>
    17b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    17b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    17b8:	ce 01       	movw	r24, r28
    17ba:	09 95       	icall
    17bc:	9c 01       	movw	r18, r24
    17be:	97 ff       	sbrs	r25, 7
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <fgetc+0x70>
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	11 f0       	breq	.+4      	; 0x17ce <fgetc+0x68>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <fgetc+0x6a>
    17ce:	80 e1       	ldi	r24, 0x10	; 16
    17d0:	89 2b       	or	r24, r25
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	e8 cf       	rjmp	.-48     	; 0x17a6 <fgetc+0x40>
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	9f 83       	std	Y+7, r25	; 0x07
    17de:	8e 83       	std	Y+6, r24	; 0x06
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	c9 01       	movw	r24, r18
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <fputc>:
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	8c 01       	movw	r16, r24
    17f4:	eb 01       	movw	r28, r22
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	81 ff       	sbrs	r24, 1
    17fa:	1b c0       	rjmp	.+54     	; 0x1832 <fputc+0x48>
    17fc:	82 ff       	sbrs	r24, 2
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <fputc+0x30>
    1800:	2e 81       	ldd	r18, Y+6	; 0x06
    1802:	3f 81       	ldd	r19, Y+7	; 0x07
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	28 17       	cp	r18, r24
    180a:	39 07       	cpc	r19, r25
    180c:	64 f4       	brge	.+24     	; 0x1826 <fputc+0x3c>
    180e:	e8 81       	ld	r30, Y
    1810:	f9 81       	ldd	r31, Y+1	; 0x01
    1812:	01 93       	st	Z+, r16
    1814:	f9 83       	std	Y+1, r31	; 0x01
    1816:	e8 83       	st	Y, r30
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <fputc+0x3c>
    181a:	e8 85       	ldd	r30, Y+8	; 0x08
    181c:	f9 85       	ldd	r31, Y+9	; 0x09
    181e:	80 2f       	mov	r24, r16
    1820:	09 95       	icall
    1822:	89 2b       	or	r24, r25
    1824:	31 f4       	brne	.+12     	; 0x1832 <fputc+0x48>
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	9f 83       	std	Y+7, r25	; 0x07
    182e:	8e 83       	std	Y+6, r24	; 0x06
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <fputc+0x4c>
    1832:	0f ef       	ldi	r16, 0xFF	; 255
    1834:	1f ef       	ldi	r17, 0xFF	; 255
    1836:	c8 01       	movw	r24, r16
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <ungetc>:
    1842:	9c 01       	movw	r18, r24
    1844:	fb 01       	movw	r30, r22
    1846:	83 81       	ldd	r24, Z+3	; 0x03
    1848:	80 ff       	sbrs	r24, 0
    184a:	11 c0       	rjmp	.+34     	; 0x186e <ungetc+0x2c>
    184c:	86 fd       	sbrc	r24, 6
    184e:	0f c0       	rjmp	.+30     	; 0x186e <ungetc+0x2c>
    1850:	9f ef       	ldi	r25, 0xFF	; 255
    1852:	2f 3f       	cpi	r18, 0xFF	; 255
    1854:	39 07       	cpc	r19, r25
    1856:	59 f0       	breq	.+22     	; 0x186e <ungetc+0x2c>
    1858:	22 83       	std	Z+2, r18	; 0x02
    185a:	80 64       	ori	r24, 0x40	; 64
    185c:	8f 7d       	andi	r24, 0xDF	; 223
    185e:	83 83       	std	Z+3, r24	; 0x03
    1860:	86 81       	ldd	r24, Z+6	; 0x06
    1862:	97 81       	ldd	r25, Z+7	; 0x07
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	97 83       	std	Z+7, r25	; 0x07
    1868:	86 83       	std	Z+6, r24	; 0x06
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <ungetc+0x30>
    186e:	2f ef       	ldi	r18, 0xFF	; 255
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	c9 01       	movw	r24, r18
    1874:	08 95       	ret

00001876 <__ultoa_invert>:
    1876:	fa 01       	movw	r30, r20
    1878:	aa 27       	eor	r26, r26
    187a:	28 30       	cpi	r18, 0x08	; 8
    187c:	51 f1       	breq	.+84     	; 0x18d2 <__ultoa_invert+0x5c>
    187e:	20 31       	cpi	r18, 0x10	; 16
    1880:	81 f1       	breq	.+96     	; 0x18e2 <__ultoa_invert+0x6c>
    1882:	e8 94       	clt
    1884:	6f 93       	push	r22
    1886:	6e 7f       	andi	r22, 0xFE	; 254
    1888:	6e 5f       	subi	r22, 0xFE	; 254
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	af 4f       	sbci	r26, 0xFF	; 255
    1892:	b1 e0       	ldi	r27, 0x01	; 1
    1894:	3e d0       	rcall	.+124    	; 0x1912 <__ultoa_invert+0x9c>
    1896:	b4 e0       	ldi	r27, 0x04	; 4
    1898:	3c d0       	rcall	.+120    	; 0x1912 <__ultoa_invert+0x9c>
    189a:	67 0f       	add	r22, r23
    189c:	78 1f       	adc	r23, r24
    189e:	89 1f       	adc	r24, r25
    18a0:	9a 1f       	adc	r25, r26
    18a2:	a1 1d       	adc	r26, r1
    18a4:	68 0f       	add	r22, r24
    18a6:	79 1f       	adc	r23, r25
    18a8:	8a 1f       	adc	r24, r26
    18aa:	91 1d       	adc	r25, r1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	6a 0f       	add	r22, r26
    18b0:	71 1d       	adc	r23, r1
    18b2:	81 1d       	adc	r24, r1
    18b4:	91 1d       	adc	r25, r1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	20 d0       	rcall	.+64     	; 0x18fa <__ultoa_invert+0x84>
    18ba:	09 f4       	brne	.+2      	; 0x18be <__ultoa_invert+0x48>
    18bc:	68 94       	set
    18be:	3f 91       	pop	r19
    18c0:	2a e0       	ldi	r18, 0x0A	; 10
    18c2:	26 9f       	mul	r18, r22
    18c4:	11 24       	eor	r1, r1
    18c6:	30 19       	sub	r19, r0
    18c8:	30 5d       	subi	r19, 0xD0	; 208
    18ca:	31 93       	st	Z+, r19
    18cc:	de f6       	brtc	.-74     	; 0x1884 <__ultoa_invert+0xe>
    18ce:	cf 01       	movw	r24, r30
    18d0:	08 95       	ret
    18d2:	46 2f       	mov	r20, r22
    18d4:	47 70       	andi	r20, 0x07	; 7
    18d6:	40 5d       	subi	r20, 0xD0	; 208
    18d8:	41 93       	st	Z+, r20
    18da:	b3 e0       	ldi	r27, 0x03	; 3
    18dc:	0f d0       	rcall	.+30     	; 0x18fc <__ultoa_invert+0x86>
    18de:	c9 f7       	brne	.-14     	; 0x18d2 <__ultoa_invert+0x5c>
    18e0:	f6 cf       	rjmp	.-20     	; 0x18ce <__ultoa_invert+0x58>
    18e2:	46 2f       	mov	r20, r22
    18e4:	4f 70       	andi	r20, 0x0F	; 15
    18e6:	40 5d       	subi	r20, 0xD0	; 208
    18e8:	4a 33       	cpi	r20, 0x3A	; 58
    18ea:	18 f0       	brcs	.+6      	; 0x18f2 <__ultoa_invert+0x7c>
    18ec:	49 5d       	subi	r20, 0xD9	; 217
    18ee:	31 fd       	sbrc	r19, 1
    18f0:	40 52       	subi	r20, 0x20	; 32
    18f2:	41 93       	st	Z+, r20
    18f4:	02 d0       	rcall	.+4      	; 0x18fa <__ultoa_invert+0x84>
    18f6:	a9 f7       	brne	.-22     	; 0x18e2 <__ultoa_invert+0x6c>
    18f8:	ea cf       	rjmp	.-44     	; 0x18ce <__ultoa_invert+0x58>
    18fa:	b4 e0       	ldi	r27, 0x04	; 4
    18fc:	a6 95       	lsr	r26
    18fe:	97 95       	ror	r25
    1900:	87 95       	ror	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	ba 95       	dec	r27
    1908:	c9 f7       	brne	.-14     	; 0x18fc <__ultoa_invert+0x86>
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	61 05       	cpc	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	08 95       	ret
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	0a 2e       	mov	r0, r26
    1918:	06 94       	lsr	r0
    191a:	57 95       	ror	r21
    191c:	47 95       	ror	r20
    191e:	37 95       	ror	r19
    1920:	27 95       	ror	r18
    1922:	ba 95       	dec	r27
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__ultoa_invert+0xa2>
    1926:	62 0f       	add	r22, r18
    1928:	73 1f       	adc	r23, r19
    192a:	84 1f       	adc	r24, r20
    192c:	95 1f       	adc	r25, r21
    192e:	a0 1d       	adc	r26, r0
    1930:	08 95       	ret

00001932 <tolower>:
    1932:	91 11       	cpse	r25, r1
    1934:	08 95       	ret
    1936:	81 54       	subi	r24, 0x41	; 65
    1938:	8a 51       	subi	r24, 0x1A	; 26
    193a:	08 f4       	brcc	.+2      	; 0x193e <tolower+0xc>
    193c:	80 5e       	subi	r24, 0xE0	; 224
    193e:	85 5a       	subi	r24, 0xA5	; 165
    1940:	08 95       	ret

00001942 <isspace>:
    1942:	91 11       	cpse	r25, r1
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <__ctype_isfalse>
    1946:	80 32       	cpi	r24, 0x20	; 32
    1948:	19 f0       	breq	.+6      	; 0x1950 <isspace+0xe>
    194a:	89 50       	subi	r24, 0x09	; 9
    194c:	85 50       	subi	r24, 0x05	; 5
    194e:	d0 f7       	brcc	.-12     	; 0x1944 <isspace+0x2>
    1950:	08 95       	ret

00001952 <__ctype_isfalse>:
    1952:	99 27       	eor	r25, r25
    1954:	88 27       	eor	r24, r24

00001956 <__ctype_istrue>:
    1956:	08 95       	ret

00001958 <__prologue_saves__>:
    1958:	2f 92       	push	r2
    195a:	3f 92       	push	r3
    195c:	4f 92       	push	r4
    195e:	5f 92       	push	r5
    1960:	6f 92       	push	r6
    1962:	7f 92       	push	r7
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	ca 1b       	sub	r28, r26
    1982:	db 0b       	sbc	r29, r27
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	09 94       	ijmp

00001990 <__epilogue_restores__>:
    1990:	2a 88       	ldd	r2, Y+18	; 0x12
    1992:	39 88       	ldd	r3, Y+17	; 0x11
    1994:	48 88       	ldd	r4, Y+16	; 0x10
    1996:	5f 84       	ldd	r5, Y+15	; 0x0f
    1998:	6e 84       	ldd	r6, Y+14	; 0x0e
    199a:	7d 84       	ldd	r7, Y+13	; 0x0d
    199c:	8c 84       	ldd	r8, Y+12	; 0x0c
    199e:	9b 84       	ldd	r9, Y+11	; 0x0b
    19a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    19a2:	b9 84       	ldd	r11, Y+9	; 0x09
    19a4:	c8 84       	ldd	r12, Y+8	; 0x08
    19a6:	df 80       	ldd	r13, Y+7	; 0x07
    19a8:	ee 80       	ldd	r14, Y+6	; 0x06
    19aa:	fd 80       	ldd	r15, Y+5	; 0x05
    19ac:	0c 81       	ldd	r16, Y+4	; 0x04
    19ae:	1b 81       	ldd	r17, Y+3	; 0x03
    19b0:	aa 81       	ldd	r26, Y+2	; 0x02
    19b2:	b9 81       	ldd	r27, Y+1	; 0x01
    19b4:	ce 0f       	add	r28, r30
    19b6:	d1 1d       	adc	r29, r1
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	ed 01       	movw	r28, r26
    19c4:	08 95       	ret

000019c6 <_exit>:
    19c6:	f8 94       	cli

000019c8 <__stop_program>:
    19c8:	ff cf       	rjmp	.-2      	; 0x19c8 <__stop_program>
