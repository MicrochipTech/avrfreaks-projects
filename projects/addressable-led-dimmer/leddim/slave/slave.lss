
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800100  00800100  000003a0  2**0
                  ALLOC
  2 .stab         00000fc0  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a42  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile static uint8_t enga = 0;
volatile static uint8_t bite = 0;
volatile static uint8_t hinb = 0;
volatile static uint8_t lonb = 0;

int main(void){
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0x00;
  98:	e7 e2       	ldi	r30, 0x27	; 39
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	address = (PINC)&(0x3f);
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8f 73       	andi	r24, 0x3F	; 63
  a6:	80 93 04 01 	sts	0x0104, r24
	DDRD = 0x02;
  aa:	ea e2       	ldi	r30, 0x2A	; 42
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	PORTD = 0x00;
  b2:	eb e2       	ldi	r30, 0x2B	; 43
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	DDRB = 0xff;
  b8:	e4 e2       	ldi	r30, 0x24	; 36
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	80 83       	st	Z, r24
	UBRR0H = 0;
  c0:	e5 ec       	ldi	r30, 0xC5	; 197
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	UBRR0L = 0x01;
  c6:	e4 ec       	ldi	r30, 0xC4	; 196
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
	/* Enable receiver and interrupt*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
  ce:	e1 ec       	ldi	r30, 0xC1	; 193
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	88 e9       	ldi	r24, 0x98	; 152
  d4:	80 83       	st	Z, r24
	UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 83       	st	Z, r24
	pwm_setup();
  de:	0e 94 4e 01 	call	0x29c	; 0x29c <pwm_setup>
	sei();
  e2:	78 94       	sei
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x54>

000000e6 <__vector_18>:
	while(1);
	return 0;
};

ISR(USART_RX_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	buff = UDR0; 
 110:	e6 ec       	ldi	r30, 0xC6	; 198
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 93 0a 01 	sts	0x010A, r24
	if     ((buff&0xC0)==0){
 11a:	80 91 0a 01 	lds	r24, 0x010A
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	80 7c       	andi	r24, 0xC0	; 192
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	09 f5       	brne	.+66     	; 0x16c <__vector_18+0x86>
		if((buff)==address){
 12a:	90 91 0a 01 	lds	r25, 0x010A
 12e:	80 91 04 01 	lds	r24, 0x0104
 132:	98 17       	cp	r25, r24
 134:	51 f4       	brne	.+20     	; 0x14a <__vector_18+0x64>
			enga = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 06 01 	sts	0x0106, r24
			bite = 0;
 13c:	10 92 07 01 	sts	0x0107, r1
			hinb = 0;
 140:	10 92 08 01 	sts	0x0108, r1
			lonb = 0;
 144:	10 92 09 01 	sts	0x0109, r1
 148:	96 c0       	rjmp	.+300    	; 0x276 <__vector_18+0x190>
		}
		else if((buff)==0){
 14a:	80 91 0a 01 	lds	r24, 0x010A
 14e:	88 23       	and	r24, r24
 150:	51 f4       	brne	.+20     	; 0x166 <__vector_18+0x80>
			enga = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 06 01 	sts	0x0106, r24
			bite = 0;
 158:	10 92 07 01 	sts	0x0107, r1
			hinb = 0;
 15c:	10 92 08 01 	sts	0x0108, r1
			lonb = 0;
 160:	10 92 09 01 	sts	0x0109, r1
 164:	88 c0       	rjmp	.+272    	; 0x276 <__vector_18+0x190>
		}
		else{enga=0;};
 166:	10 92 06 01 	sts	0x0106, r1
 16a:	85 c0       	rjmp	.+266    	; 0x276 <__vector_18+0x190>
	}
	else if(enga==1){
 16c:	80 91 06 01 	lds	r24, 0x0106
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <__vector_18+0x90>
 174:	80 c0       	rjmp	.+256    	; 0x276 <__vector_18+0x190>
		if((buff&0xC0)==0x80){
 176:	80 91 0a 01 	lds	r24, 0x010A
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	80 7c       	andi	r24, 0xC0	; 192
 180:	90 70       	andi	r25, 0x00	; 0
 182:	80 38       	cpi	r24, 0x80	; 128
 184:	91 05       	cpc	r25, r1
 186:	c1 f4       	brne	.+48     	; 0x1b8 <__vector_18+0xd2>
			rgbw = ((buff&0x30)>>4);
 188:	80 91 0a 01 	lds	r24, 0x010A
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 73       	andi	r24, 0x30	; 48
 192:	90 70       	andi	r25, 0x00	; 0
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	80 93 05 01 	sts	0x0105, r24
			lonb = (buff&0x0f);
 1a8:	80 91 0a 01 	lds	r24, 0x010A
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	80 93 09 01 	sts	0x0109, r24
			enga = 0;
 1b2:	10 92 06 01 	sts	0x0106, r1
 1b6:	5f c0       	rjmp	.+190    	; 0x276 <__vector_18+0x190>
		}
		else if((buff&0xC0)==0xC0){
 1b8:	80 91 0a 01 	lds	r24, 0x010A
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	80 7c       	andi	r24, 0xC0	; 192
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	80 3c       	cpi	r24, 0xC0	; 192
 1c6:	91 05       	cpc	r25, r1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <__vector_18+0xe6>
 1ca:	55 c0       	rjmp	.+170    	; 0x276 <__vector_18+0x190>
			rgbw = ((buff&0x30)>>4);
 1cc:	80 91 0a 01 	lds	r24, 0x010A
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 73       	andi	r24, 0x30	; 48
 1d6:	90 70       	andi	r25, 0x00	; 0
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	80 93 05 01 	sts	0x0105, r24
			hinb = ((buff&0x0f)<<4);
 1ec:	80 91 0a 01 	lds	r24, 0x010A
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	82 95       	swap	r24
 1f6:	92 95       	swap	r25
 1f8:	90 7f       	andi	r25, 0xF0	; 240
 1fa:	98 27       	eor	r25, r24
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	98 27       	eor	r25, r24
 200:	80 93 08 01 	sts	0x0108, r24
			bite = hinb+lonb;
 204:	90 91 08 01 	lds	r25, 0x0108
 208:	80 91 09 01 	lds	r24, 0x0109
 20c:	89 0f       	add	r24, r25
 20e:	80 93 07 01 	sts	0x0107, r24
			if     (rgbw ==0){red = bite;}
 212:	80 91 05 01 	lds	r24, 0x0105
 216:	88 23       	and	r24, r24
 218:	29 f4       	brne	.+10     	; 0x224 <__vector_18+0x13e>
 21a:	80 91 07 01 	lds	r24, 0x0107
 21e:	80 93 00 01 	sts	0x0100, r24
 222:	1a c0       	rjmp	.+52     	; 0x258 <__vector_18+0x172>
			else if(rgbw ==1){grn = bite;}
 224:	80 91 05 01 	lds	r24, 0x0105
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	29 f4       	brne	.+10     	; 0x236 <__vector_18+0x150>
 22c:	80 91 07 01 	lds	r24, 0x0107
 230:	80 93 01 01 	sts	0x0101, r24
 234:	11 c0       	rjmp	.+34     	; 0x258 <__vector_18+0x172>
			else if(rgbw ==2){blu = bite;}
 236:	80 91 05 01 	lds	r24, 0x0105
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	29 f4       	brne	.+10     	; 0x248 <__vector_18+0x162>
 23e:	80 91 07 01 	lds	r24, 0x0107
 242:	80 93 02 01 	sts	0x0102, r24
 246:	08 c0       	rjmp	.+16     	; 0x258 <__vector_18+0x172>
			else if(rgbw ==3){wht = bite;}
 248:	80 91 05 01 	lds	r24, 0x0105
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	21 f4       	brne	.+8      	; 0x258 <__vector_18+0x172>
 250:	80 91 07 01 	lds	r24, 0x0107
 254:	80 93 03 01 	sts	0x0103, r24
			pwm_write(red,grn,blu,wht);
 258:	80 91 00 01 	lds	r24, 0x0100
 25c:	90 91 01 01 	lds	r25, 0x0101
 260:	20 91 02 01 	lds	r18, 0x0102
 264:	30 91 03 01 	lds	r19, 0x0103
 268:	69 2f       	mov	r22, r25
 26a:	42 2f       	mov	r20, r18
 26c:	23 2f       	mov	r18, r19
 26e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <pwm_write>
			enga = 0;
 272:	10 92 06 01 	sts	0x0106, r1
		};
	}
	else;
};//end ISR
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <pwm_setup>:
#include "pwm.h"

void pwm_setup(void){
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	DDRB 	|= 0b00001000;
 2a4:	a4 e2       	ldi	r26, 0x24	; 36
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e4 e2       	ldi	r30, 0x24	; 36
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	8c 93       	st	X, r24
	DDRD 	|= 0b01101000;	
 2b2:	aa e2       	ldi	r26, 0x2A	; 42
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	ea e2       	ldi	r30, 0x2A	; 42
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	88 66       	ori	r24, 0x68	; 104
 2be:	8c 93       	st	X, r24
	TCCR0A	 = 0b10100011;
 2c0:	e4 e4       	ldi	r30, 0x44	; 68
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	83 ea       	ldi	r24, 0xA3	; 163
 2c6:	80 83       	st	Z, r24
	TCCR0B   = 0b00000001; 
 2c8:	e5 e4       	ldi	r30, 0x45	; 69
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 83       	st	Z, r24
	TCCR2A   = 0b10100011;
 2d0:	e0 eb       	ldi	r30, 0xB0	; 176
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	83 ea       	ldi	r24, 0xA3	; 163
 2d6:	80 83       	st	Z, r24
	TCCR2B   = 0b00000001;
 2d8:	e1 eb       	ldi	r30, 0xB1	; 177
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 83       	st	Z, r24
};//end pwm_setup()
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	08 95       	ret

000002e6 <pwm_write>:

void pwm_write(uint8_t ein, uint8_t zwi, uint8_t dri, uint8_t vir){
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <pwm_write+0x6>
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <pwm_write+0x8>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	6a 83       	std	Y+2, r22	; 0x02
 2f6:	4b 83       	std	Y+3, r20	; 0x03
 2f8:	2c 83       	std	Y+4, r18	; 0x04
	PWMWRITE(ein,zwi,dri,vir);
 2fa:	e7 e4       	ldi	r30, 0x47	; 71
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	80 83       	st	Z, r24
 302:	e8 e4       	ldi	r30, 0x48	; 72
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	80 83       	st	Z, r24
 30a:	e3 eb       	ldi	r30, 0xB3	; 179
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	80 83       	st	Z, r24
 312:	e4 eb       	ldi	r30, 0xB4	; 180
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	8c 81       	ldd	r24, Y+4	; 0x04
 318:	80 83       	st	Z, r24
	return;
};//end pwm_write
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
