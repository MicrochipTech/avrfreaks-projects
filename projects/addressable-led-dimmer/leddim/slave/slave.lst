   1               		.file	"slave.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  86               		.lcomm red,1
  87               		.lcomm grn,1
  88               		.lcomm blu,1
  89               		.lcomm wht,1
  91               		.lcomm address,1
  92               		.lcomm rgbw,1
  93               		.lcomm enga,1
  94               		.lcomm bite,1
  95               		.lcomm hinb,1
  96               		.lcomm lonb,1
  98               	.global	main
 100               	main:
 101               		.stabd	46,0,0
   1:slave.c       **** #include "pwm.h"
   2:slave.c       **** #include <avr/io.h>
   3:slave.c       **** #include <avr/interrupt.h>
   4:slave.c       **** #include <inttypes.h>
   5:slave.c       **** volatile static uint8_t address = 0;
   6:slave.c       **** volatile static uint8_t buff;
   7:slave.c       **** volatile static uint8_t rgbw = 0;
   8:slave.c       **** volatile static uint8_t enga = 0;
   9:slave.c       **** volatile static uint8_t bite = 0;
  10:slave.c       **** volatile static uint8_t hinb = 0;
  11:slave.c       **** volatile static uint8_t lonb = 0;
  12:slave.c       **** 
  13:slave.c       **** int main(void){
 103               	.LM0:
 104               	.LFBB1:
 105 0000 DF93      		push r29
 106 0002 CF93      		push r28
 107 0004 CDB7      		in r28,__SP_L__
 108 0006 DEB7      		in r29,__SP_H__
 109               	/* prologue: function */
 110               	/* frame size = 0 */
  14:slave.c       **** 	DDRC = 0x00;
 112               	.LM1:
 113 0008 E7E2      		ldi r30,lo8(39)
 114 000a F0E0      		ldi r31,hi8(39)
 115 000c 1082      		st Z,__zero_reg__
  15:slave.c       **** 	address = (PINC)&(0x3f);
 117               	.LM2:
 118 000e E6E2      		ldi r30,lo8(38)
 119 0010 F0E0      		ldi r31,hi8(38)
 120 0012 8081      		ld r24,Z
 121 0014 8F73      		andi r24,lo8(63)
 122 0016 8093 0000 		sts address,r24
  16:slave.c       **** 	DDRD = 0x02;
 124               	.LM3:
 125 001a EAE2      		ldi r30,lo8(42)
 126 001c F0E0      		ldi r31,hi8(42)
 127 001e 82E0      		ldi r24,lo8(2)
 128 0020 8083      		st Z,r24
  17:slave.c       **** 	PORTD = 0x00;
 130               	.LM4:
 131 0022 EBE2      		ldi r30,lo8(43)
 132 0024 F0E0      		ldi r31,hi8(43)
 133 0026 1082      		st Z,__zero_reg__
  18:slave.c       **** 	DDRB = 0xff;
 135               	.LM5:
 136 0028 E4E2      		ldi r30,lo8(36)
 137 002a F0E0      		ldi r31,hi8(36)
 138 002c 8FEF      		ldi r24,lo8(-1)
 139 002e 8083      		st Z,r24
  19:slave.c       **** 	UBRR0H = 0;
 141               	.LM6:
 142 0030 E5EC      		ldi r30,lo8(197)
 143 0032 F0E0      		ldi r31,hi8(197)
 144 0034 1082      		st Z,__zero_reg__
  20:slave.c       **** 	UBRR0L = 0x01;
 146               	.LM7:
 147 0036 E4EC      		ldi r30,lo8(196)
 148 0038 F0E0      		ldi r31,hi8(196)
 149 003a 81E0      		ldi r24,lo8(1)
 150 003c 8083      		st Z,r24
  21:slave.c       **** 	/* Enable receiver and interrupt*/
  22:slave.c       **** 	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 152               	.LM8:
 153 003e E1EC      		ldi r30,lo8(193)
 154 0040 F0E0      		ldi r31,hi8(193)
 155 0042 88E9      		ldi r24,lo8(-104)
 156 0044 8083      		st Z,r24
  23:slave.c       **** 	UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 158               	.LM9:
 159 0046 E2EC      		ldi r30,lo8(194)
 160 0048 F0E0      		ldi r31,hi8(194)
 161 004a 8EE0      		ldi r24,lo8(14)
 162 004c 8083      		st Z,r24
  24:slave.c       **** 	pwm_setup();
 164               	.LM10:
 165 004e 0E94 0000 		call pwm_setup
  25:slave.c       **** 	sei();
 167               	.LM11:
 168               	/* #APP */
 169               	 ;  25 "slave.c" 1
 170 0052 7894      		sei
 171               	 ;  0 "" 2
 172               	/* #NOAPP */
 173               	.L2:
 174 0054 00C0      		rjmp .L2
 176               	.Lscope1:
 178               		.stabd	78,0,0
 180               	.global	__vector_18
 182               	__vector_18:
 183               		.stabd	46,0,0
  26:slave.c       **** 	while(1);
  27:slave.c       **** 	return 0;
  28:slave.c       **** };
  29:slave.c       **** 
  30:slave.c       **** ISR(USART_RX_vect){
 185               	.LM12:
 186               	.LFBB2:
 187 0056 1F92      		push __zero_reg__
 188 0058 0F92      		push r0
 189 005a 0FB6      		in r0,__SREG__
 190 005c 0F92      		push r0
 191 005e 1124      		clr __zero_reg__
 192 0060 2F93      		push r18
 193 0062 3F93      		push r19
 194 0064 4F93      		push r20
 195 0066 5F93      		push r21
 196 0068 6F93      		push r22
 197 006a 7F93      		push r23
 198 006c 8F93      		push r24
 199 006e 9F93      		push r25
 200 0070 AF93      		push r26
 201 0072 BF93      		push r27
 202 0074 EF93      		push r30
 203 0076 FF93      		push r31
 204 0078 DF93      		push r29
 205 007a CF93      		push r28
 206 007c CDB7      		in r28,__SP_L__
 207 007e DEB7      		in r29,__SP_H__
 208               	/* prologue: Signal */
 209               	/* frame size = 0 */
  31:slave.c       **** 	buff = UDR0; 
 211               	.LM13:
 212 0080 E6EC      		ldi r30,lo8(198)
 213 0082 F0E0      		ldi r31,hi8(198)
 214 0084 8081      		ld r24,Z
 215 0086 8093 0000 		sts buff,r24
  32:slave.c       **** 	if     ((buff&0xC0)==0){
 217               	.LM14:
 218 008a 8091 0000 		lds r24,buff
 219 008e 882F      		mov r24,r24
 220 0090 90E0      		ldi r25,lo8(0)
 221 0092 807C      		andi r24,lo8(192)
 222 0094 9070      		andi r25,hi8(192)
 223 0096 0097      		sbiw r24,0
 224 0098 01F4      		brne .L5
  33:slave.c       **** 		if((buff)==address){
 226               	.LM15:
 227 009a 9091 0000 		lds r25,buff
 228 009e 8091 0000 		lds r24,address
 229 00a2 9817      		cp r25,r24
 230 00a4 01F4      		brne .L6
  34:slave.c       **** 			enga = 1;
 232               	.LM16:
 233 00a6 81E0      		ldi r24,lo8(1)
 234 00a8 8093 0000 		sts enga,r24
  35:slave.c       **** 			bite = 0;
 236               	.LM17:
 237 00ac 1092 0000 		sts bite,__zero_reg__
  36:slave.c       **** 			hinb = 0;
 239               	.LM18:
 240 00b0 1092 0000 		sts hinb,__zero_reg__
  37:slave.c       **** 			lonb = 0;
 242               	.LM19:
 243 00b4 1092 0000 		sts lonb,__zero_reg__
 244 00b8 00C0      		rjmp .L15
 245               	.L6:
  38:slave.c       **** 		}
  39:slave.c       **** 		else if((buff)==0){
 247               	.LM20:
 248 00ba 8091 0000 		lds r24,buff
 249 00be 8823      		tst r24
 250 00c0 01F4      		brne .L8
  40:slave.c       **** 			enga = 1;
 252               	.LM21:
 253 00c2 81E0      		ldi r24,lo8(1)
 254 00c4 8093 0000 		sts enga,r24
  41:slave.c       **** 			bite = 0;
 256               	.LM22:
 257 00c8 1092 0000 		sts bite,__zero_reg__
  42:slave.c       **** 			hinb = 0;
 259               	.LM23:
 260 00cc 1092 0000 		sts hinb,__zero_reg__
  43:slave.c       **** 			lonb = 0;
 262               	.LM24:
 263 00d0 1092 0000 		sts lonb,__zero_reg__
 264 00d4 00C0      		rjmp .L15
 265               	.L8:
  44:slave.c       **** 		}
  45:slave.c       **** 		else{enga=0;};
 267               	.LM25:
 268 00d6 1092 0000 		sts enga,__zero_reg__
 269 00da 00C0      		rjmp .L15
 270               	.L5:
  46:slave.c       **** 	}
  47:slave.c       **** 	else if(enga==1){
 272               	.LM26:
 273 00dc 8091 0000 		lds r24,enga
 274 00e0 8130      		cpi r24,lo8(1)
 275 00e2 01F0      		breq .+2
 276 00e4 00C0      		rjmp .L15
  48:slave.c       **** 		if((buff&0xC0)==0x80){
 278               	.LM27:
 279 00e6 8091 0000 		lds r24,buff
 280 00ea 882F      		mov r24,r24
 281 00ec 90E0      		ldi r25,lo8(0)
 282 00ee 807C      		andi r24,lo8(192)
 283 00f0 9070      		andi r25,hi8(192)
 284 00f2 8038      		cpi r24,128
 285 00f4 9105      		cpc r25,__zero_reg__
 286 00f6 01F4      		brne .L10
  49:slave.c       **** 			rgbw = ((buff&0x30)>>4);
 288               	.LM28:
 289 00f8 8091 0000 		lds r24,buff
 290 00fc 882F      		mov r24,r24
 291 00fe 90E0      		ldi r25,lo8(0)
 292 0100 8073      		andi r24,lo8(48)
 293 0102 9070      		andi r25,hi8(48)
 294 0104 9595      		asr r25
 295 0106 8795      		ror r24
 296 0108 9595      		asr r25
 297 010a 8795      		ror r24
 298 010c 9595      		asr r25
 299 010e 8795      		ror r24
 300 0110 9595      		asr r25
 301 0112 8795      		ror r24
 302 0114 8093 0000 		sts rgbw,r24
  50:slave.c       **** 			lonb = (buff&0x0f);
 304               	.LM29:
 305 0118 8091 0000 		lds r24,buff
 306 011c 8F70      		andi r24,lo8(15)
 307 011e 8093 0000 		sts lonb,r24
  51:slave.c       **** 			enga = 0;
 309               	.LM30:
 310 0122 1092 0000 		sts enga,__zero_reg__
 311 0126 00C0      		rjmp .L15
 312               	.L10:
  52:slave.c       **** 		}
  53:slave.c       **** 		else if((buff&0xC0)==0xC0){
 314               	.LM31:
 315 0128 8091 0000 		lds r24,buff
 316 012c 882F      		mov r24,r24
 317 012e 90E0      		ldi r25,lo8(0)
 318 0130 807C      		andi r24,lo8(192)
 319 0132 9070      		andi r25,hi8(192)
 320 0134 803C      		cpi r24,192
 321 0136 9105      		cpc r25,__zero_reg__
 322 0138 01F0      		breq .+2
 323 013a 00C0      		rjmp .L15
  54:slave.c       **** 			rgbw = ((buff&0x30)>>4);
 325               	.LM32:
 326 013c 8091 0000 		lds r24,buff
 327 0140 882F      		mov r24,r24
 328 0142 90E0      		ldi r25,lo8(0)
 329 0144 8073      		andi r24,lo8(48)
 330 0146 9070      		andi r25,hi8(48)
 331 0148 9595      		asr r25
 332 014a 8795      		ror r24
 333 014c 9595      		asr r25
 334 014e 8795      		ror r24
 335 0150 9595      		asr r25
 336 0152 8795      		ror r24
 337 0154 9595      		asr r25
 338 0156 8795      		ror r24
 339 0158 8093 0000 		sts rgbw,r24
  55:slave.c       **** 			hinb = ((buff&0x0f)<<4);
 341               	.LM33:
 342 015c 8091 0000 		lds r24,buff
 343 0160 882F      		mov r24,r24
 344 0162 90E0      		ldi r25,lo8(0)
 345 0164 8295      		swap r24
 346 0166 9295      		swap r25
 347 0168 907F      		andi r25,0xf0
 348 016a 9827      		eor r25,r24
 349 016c 807F      		andi r24,0xf0
 350 016e 9827      		eor r25,r24
 351 0170 8093 0000 		sts hinb,r24
  56:slave.c       **** 			bite = hinb+lonb;
 353               	.LM34:
 354 0174 9091 0000 		lds r25,hinb
 355 0178 8091 0000 		lds r24,lonb
 356 017c 890F      		add r24,r25
 357 017e 8093 0000 		sts bite,r24
  57:slave.c       **** 			if     (rgbw ==0){red = bite;}
 359               	.LM35:
 360 0182 8091 0000 		lds r24,rgbw
 361 0186 8823      		tst r24
 362 0188 01F4      		brne .L11
 363 018a 8091 0000 		lds r24,bite
 364 018e 8093 0000 		sts red,r24
 365 0192 00C0      		rjmp .L12
 366               	.L11:
  58:slave.c       **** 			else if(rgbw ==1){grn = bite;}
 368               	.LM36:
 369 0194 8091 0000 		lds r24,rgbw
 370 0198 8130      		cpi r24,lo8(1)
 371 019a 01F4      		brne .L13
 372 019c 8091 0000 		lds r24,bite
 373 01a0 8093 0000 		sts grn,r24
 374 01a4 00C0      		rjmp .L12
 375               	.L13:
  59:slave.c       **** 			else if(rgbw ==2){blu = bite;}
 377               	.LM37:
 378 01a6 8091 0000 		lds r24,rgbw
 379 01aa 8230      		cpi r24,lo8(2)
 380 01ac 01F4      		brne .L14
 381 01ae 8091 0000 		lds r24,bite
 382 01b2 8093 0000 		sts blu,r24
 383 01b6 00C0      		rjmp .L12
 384               	.L14:
  60:slave.c       **** 			else if(rgbw ==3){wht = bite;}
 386               	.LM38:
 387 01b8 8091 0000 		lds r24,rgbw
 388 01bc 8330      		cpi r24,lo8(3)
 389 01be 01F4      		brne .L12
 390 01c0 8091 0000 		lds r24,bite
 391 01c4 8093 0000 		sts wht,r24
 392               	.L12:
  61:slave.c       **** 			pwm_write(red,grn,blu,wht);
 394               	.LM39:
 395 01c8 8091 0000 		lds r24,red
 396 01cc 9091 0000 		lds r25,grn
 397 01d0 2091 0000 		lds r18,blu
 398 01d4 3091 0000 		lds r19,wht
 399 01d8 692F      		mov r22,r25
 400 01da 422F      		mov r20,r18
 401 01dc 232F      		mov r18,r19
 402 01de 0E94 0000 		call pwm_write
  62:slave.c       **** 			enga = 0;
 404               	.LM40:
 405 01e2 1092 0000 		sts enga,__zero_reg__
 406               	.L15:
 407               	/* epilogue start */
  63:slave.c       **** 		};
  64:slave.c       **** 	}
  65:slave.c       **** 	else;
  66:slave.c       **** };//end ISR
 409               	.LM41:
 410 01e6 CF91      		pop r28
 411 01e8 DF91      		pop r29
 412 01ea FF91      		pop r31
 413 01ec EF91      		pop r30
 414 01ee BF91      		pop r27
 415 01f0 AF91      		pop r26
 416 01f2 9F91      		pop r25
 417 01f4 8F91      		pop r24
 418 01f6 7F91      		pop r23
 419 01f8 6F91      		pop r22
 420 01fa 5F91      		pop r21
 421 01fc 4F91      		pop r20
 422 01fe 3F91      		pop r19
 423 0200 2F91      		pop r18
 424 0202 0F90      		pop r0
 425 0204 0FBE      		out __SREG__,r0
 426 0206 0F90      		pop r0
 427 0208 1F90      		pop __zero_reg__
 428 020a 1895      		reti
 430               	.Lscope2:
 432               		.stabd	78,0,0
 433               		.lcomm buff,1
 446               	.Letext0:
 447               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 slave.c
     /tmp/ccWV8FRR.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccWV8FRR.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccWV8FRR.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccWV8FRR.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccWV8FRR.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccWV8FRR.s:7      *ABS*:0000000000000001 __zero_reg__
                             .bss:0000000000000000 red
     /tmp/ccWV8FRR.s:86     .bss:0000000000000001 grn
     /tmp/ccWV8FRR.s:87     .bss:0000000000000002 blu
     /tmp/ccWV8FRR.s:88     .bss:0000000000000003 wht
     /tmp/ccWV8FRR.s:89     .bss:0000000000000004 address
     /tmp/ccWV8FRR.s:91     .bss:0000000000000005 rgbw
     /tmp/ccWV8FRR.s:92     .bss:0000000000000006 enga
     /tmp/ccWV8FRR.s:93     .bss:0000000000000007 bite
     /tmp/ccWV8FRR.s:94     .bss:0000000000000008 hinb
     /tmp/ccWV8FRR.s:95     .bss:0000000000000009 lonb
     /tmp/ccWV8FRR.s:100    .text:0000000000000000 main
     /tmp/ccWV8FRR.s:182    .text:0000000000000056 __vector_18
     /tmp/ccWV8FRR.s:96     .bss:000000000000000a buff

UNDEFINED SYMBOLS
pwm_setup
pwm_write
__do_clear_bss
