
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000020b8  0000214c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800134  00800134  00002180  2**0
                  ALLOC
  3 .stab         00003f9c  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c0  00000000  00000000  0000611c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 eb       	ldi	r30, 0xB8	; 184
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 33       	cpi	r26, 0x34	; 52
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e3       	ldi	r26, 0x34	; 52
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 34       	cpi	r26, 0x43	; 67
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
      c6:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <adc_reads>:
static uint8_t adr     = 0x00;
static uint8_t cto     = 0x00;
static uint8_t dim     = 0x00;
//END PWM DEFINITIONS

int adc_reads(int colour){
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	60 97       	sbiw	r28, 0x10	; 16
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
      e2:	98 8b       	std	Y+16, r25	; 0x10
      e4:	8f 87       	std	Y+15, r24	; 0x0f
	ADMUX    = colour;
      e6:	ec e7       	ldi	r30, 0x7C	; 124
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	8f 85       	ldd	r24, Y+15	; 0x0f
      ec:	80 83       	st	Z, r24
	ADMUX   |= (1<<REFS0);  //use AVcc
      ee:	ac e7       	ldi	r26, 0x7C	; 124
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ec e7       	ldi	r30, 0x7C	; 124
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	80 64       	ori	r24, 0x40	; 64
      fa:	8c 93       	st	X, r24
	ADMUX   |= (1<<ADLAR);  //8 bit resolution
      fc:	ac e7       	ldi	r26, 0x7C	; 124
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	ec e7       	ldi	r30, 0x7C	; 124
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	80 62       	ori	r24, 0x20	; 32
     108:	8c 93       	st	X, r24
	ADCSRA  |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//prescale
     10a:	aa e7       	ldi	r26, 0x7A	; 122
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	ea e7       	ldi	r30, 0x7A	; 122
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	87 60       	ori	r24, 0x07	; 7
     116:	8c 93       	st	X, r24
	ADCSRA  |= (1<<ADEN);  //AD ENable
     118:	aa e7       	ldi	r26, 0x7A	; 122
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	ea e7       	ldi	r30, 0x7A	; 122
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 68       	ori	r24, 0x80	; 128
     124:	8c 93       	st	X, r24
	ADCSRA  |= (1<<ADSC);
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	ea e7       	ldi	r30, 0x7A	; 122
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	80 64       	ori	r24, 0x40	; 64
     132:	8c 93       	st	X, r24
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	a0 e8       	ldi	r26, 0x80	; 128
     13a:	bf e3       	ldi	r27, 0x3F	; 63
     13c:	8b 87       	std	Y+11, r24	; 0x0b
     13e:	9c 87       	std	Y+12, r25	; 0x0c
     140:	ad 87       	std	Y+13, r26	; 0x0d
     142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	6b 85       	ldd	r22, Y+11	; 0x0b
     146:	7c 85       	ldd	r23, Y+12	; 0x0c
     148:	8d 85       	ldd	r24, Y+13	; 0x0d
     14a:	9e 85       	ldd	r25, Y+14	; 0x0e
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	4a ef       	ldi	r20, 0xFA	; 250
     152:	54 e4       	ldi	r21, 0x44	; 68
     154:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	8f 83       	std	Y+7, r24	; 0x07
     15e:	98 87       	std	Y+8, r25	; 0x08
     160:	a9 87       	std	Y+9, r26	; 0x09
     162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     164:	6f 81       	ldd	r22, Y+7	; 0x07
     166:	78 85       	ldd	r23, Y+8	; 0x08
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	40 e8       	ldi	r20, 0x80	; 128
     172:	5f e3       	ldi	r21, 0x3F	; 63
     174:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     178:	88 23       	and	r24, r24
     17a:	2c f4       	brge	.+10     	; 0x186 <adc_reads+0xb8>
		__ticks = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	9e 83       	std	Y+6, r25	; 0x06
     182:	8d 83       	std	Y+5, r24	; 0x05
     184:	3f c0       	rjmp	.+126    	; 0x204 <adc_reads+0x136>
	else if (__tmp > 65535)
     186:	6f 81       	ldd	r22, Y+7	; 0x07
     188:	78 85       	ldd	r23, Y+8	; 0x08
     18a:	89 85       	ldd	r24, Y+9	; 0x09
     18c:	9a 85       	ldd	r25, Y+10	; 0x0a
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	3f ef       	ldi	r19, 0xFF	; 255
     192:	4f e7       	ldi	r20, 0x7F	; 127
     194:	57 e4       	ldi	r21, 0x47	; 71
     196:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     19a:	18 16       	cp	r1, r24
     19c:	4c f5       	brge	.+82     	; 0x1f0 <adc_reads+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     19e:	6b 85       	ldd	r22, Y+11	; 0x0b
     1a0:	7c 85       	ldd	r23, Y+12	; 0x0c
     1a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     1a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	40 e2       	ldi	r20, 0x20	; 32
     1ac:	51 e4       	ldi	r21, 0x41	; 65
     1ae:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	bc 01       	movw	r22, r24
     1b8:	cd 01       	movw	r24, r26
     1ba:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	9e 83       	std	Y+6, r25	; 0x06
     1c4:	8d 83       	std	Y+5, r24	; 0x05
     1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <adc_reads+0x118>
     1c8:	88 ec       	ldi	r24, 0xC8	; 200
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d0:	8b 81       	ldd	r24, Y+3	; 0x03
     1d2:	9c 81       	ldd	r25, Y+4	; 0x04
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <adc_reads+0x106>
     1d8:	9c 83       	std	Y+4, r25	; 0x04
     1da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1dc:	8d 81       	ldd	r24, Y+5	; 0x05
     1de:	9e 81       	ldd	r25, Y+6	; 0x06
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	9e 83       	std	Y+6, r25	; 0x06
     1e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e6:	8d 81       	ldd	r24, Y+5	; 0x05
     1e8:	9e 81       	ldd	r25, Y+6	; 0x06
     1ea:	00 97       	sbiw	r24, 0x00	; 0
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <adc_reads+0xfa>
     1ee:	14 c0       	rjmp	.+40     	; 0x218 <adc_reads+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f0:	6f 81       	ldd	r22, Y+7	; 0x07
     1f2:	78 85       	ldd	r23, Y+8	; 0x08
     1f4:	89 85       	ldd	r24, Y+9	; 0x09
     1f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	9e 83       	std	Y+6, r25	; 0x06
     202:	8d 83       	std	Y+5, r24	; 0x05
     204:	8d 81       	ldd	r24, Y+5	; 0x05
     206:	9e 81       	ldd	r25, Y+6	; 0x06
     208:	9a 83       	std	Y+2, r25	; 0x02
     20a:	89 83       	std	Y+1, r24	; 0x01
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9a 81       	ldd	r25, Y+2	; 0x02
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <adc_reads+0x142>
     214:	9a 83       	std	Y+2, r25	; 0x02
     216:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	adcval = ADCH;
     218:	e9 e7       	ldi	r30, 0x79	; 121
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 93 34 01 	sts	0x0134, r24
	return adcval;
     222:	80 91 34 01 	lds	r24, 0x0134
     226:	88 2f       	mov	r24, r24
     228:	90 e0       	ldi	r25, 0x00	; 0
};
     22a:	60 96       	adiw	r28, 0x10	; 16
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <upd_mode1>:


void upd_mode1(void){
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	65 97       	sbiw	r28, 0x15	; 21
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
	lcd_gotoxy( 0,0);//move cursor to line 1
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	lcd_puts( "Rd: Gr: Bl: Wh:");
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
	
    char buffer[7];
	lcd_gotoxy( 0,1);//move cursor to line 2
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	itoa( red , buffer, 10);/* convert integer into string */
     268:	80 91 36 01 	lds	r24, 0x0136
     26c:	88 2f       	mov	r24, r24
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	9e 01       	movw	r18, r28
     272:	21 5f       	subi	r18, 0xF1	; 241
     274:	3f 4f       	sbci	r19, 0xFF	; 255
     276:	b9 01       	movw	r22, r18
     278:	4a e0       	ldi	r20, 0x0A	; 10
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	0e 94 15 10 	call	0x202a	; 0x202a <itoa>
	if     (red< 10){lcd_puts("  ");lcd_puts(buffer);}
     280:	80 91 36 01 	lds	r24, 0x0136
     284:	8a 30       	cpi	r24, 0x0A	; 10
     286:	48 f4       	brcc	.+18     	; 0x29a <upd_mode1+0x5e>
     288:	80 e1       	ldi	r24, 0x10	; 16
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     290:	ce 01       	movw	r24, r28
     292:	0f 96       	adiw	r24, 0x0f	; 15
     294:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     298:	10 c0       	rjmp	.+32     	; 0x2ba <upd_mode1+0x7e>
	else if(red<100){lcd_putc(' ');lcd_puts(buffer);}
     29a:	80 91 36 01 	lds	r24, 0x0136
     29e:	84 36       	cpi	r24, 0x64	; 100
     2a0:	40 f4       	brcc	.+16     	; 0x2b2 <upd_mode1+0x76>
     2a2:	80 e2       	ldi	r24, 0x20	; 32
     2a4:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
     2a8:	ce 01       	movw	r24, r28
     2aa:	0f 96       	adiw	r24, 0x0f	; 15
     2ac:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <upd_mode1+0x7e>
	else             {lcd_puts(buffer);};/* put converted string to display */	
     2b2:	ce 01       	movw	r24, r28
     2b4:	0f 96       	adiw	r24, 0x0f	; 15
     2b6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
		
	lcd_gotoxy( 4,1);//move cursor to line 2
     2ba:	84 e0       	ldi	r24, 0x04	; 4
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	itoa( grn , buffer, 10);/* convert integer into string */
     2c2:	80 91 37 01 	lds	r24, 0x0137
     2c6:	88 2f       	mov	r24, r24
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9e 01       	movw	r18, r28
     2cc:	21 5f       	subi	r18, 0xF1	; 241
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	b9 01       	movw	r22, r18
     2d2:	4a e0       	ldi	r20, 0x0A	; 10
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	0e 94 15 10 	call	0x202a	; 0x202a <itoa>
	if     (grn< 10){lcd_puts("  ");lcd_puts(buffer);}
     2da:	80 91 37 01 	lds	r24, 0x0137
     2de:	8a 30       	cpi	r24, 0x0A	; 10
     2e0:	48 f4       	brcc	.+18     	; 0x2f4 <upd_mode1+0xb8>
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     2ea:	ce 01       	movw	r24, r28
     2ec:	0f 96       	adiw	r24, 0x0f	; 15
     2ee:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <upd_mode1+0xd8>
	else if(grn<100){lcd_putc(' ');lcd_puts(buffer);}
     2f4:	80 91 37 01 	lds	r24, 0x0137
     2f8:	84 36       	cpi	r24, 0x64	; 100
     2fa:	40 f4       	brcc	.+16     	; 0x30c <upd_mode1+0xd0>
     2fc:	80 e2       	ldi	r24, 0x20	; 32
     2fe:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
     302:	ce 01       	movw	r24, r28
     304:	0f 96       	adiw	r24, 0x0f	; 15
     306:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     30a:	04 c0       	rjmp	.+8      	; 0x314 <upd_mode1+0xd8>
	else             {lcd_puts(buffer);};/* put converted string to display */	
     30c:	ce 01       	movw	r24, r28
     30e:	0f 96       	adiw	r24, 0x0f	; 15
     310:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
		
	lcd_gotoxy( 8,1);//move cursor to line 2
     314:	88 e0       	ldi	r24, 0x08	; 8
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	itoa( blu , buffer, 10);/* convert integer into string */
     31c:	80 91 38 01 	lds	r24, 0x0138
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9e 01       	movw	r18, r28
     326:	21 5f       	subi	r18, 0xF1	; 241
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	b9 01       	movw	r22, r18
     32c:	4a e0       	ldi	r20, 0x0A	; 10
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	0e 94 15 10 	call	0x202a	; 0x202a <itoa>
	if     (blu< 10){lcd_puts("  ");lcd_puts(buffer);}
     334:	80 91 38 01 	lds	r24, 0x0138
     338:	8a 30       	cpi	r24, 0x0A	; 10
     33a:	48 f4       	brcc	.+18     	; 0x34e <upd_mode1+0x112>
     33c:	80 e1       	ldi	r24, 0x10	; 16
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     344:	ce 01       	movw	r24, r28
     346:	0f 96       	adiw	r24, 0x0f	; 15
     348:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     34c:	10 c0       	rjmp	.+32     	; 0x36e <upd_mode1+0x132>
	else if(blu<100){lcd_putc(' ');lcd_puts(buffer);}
     34e:	80 91 38 01 	lds	r24, 0x0138
     352:	84 36       	cpi	r24, 0x64	; 100
     354:	40 f4       	brcc	.+16     	; 0x366 <upd_mode1+0x12a>
     356:	80 e2       	ldi	r24, 0x20	; 32
     358:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
     35c:	ce 01       	movw	r24, r28
     35e:	0f 96       	adiw	r24, 0x0f	; 15
     360:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     364:	04 c0       	rjmp	.+8      	; 0x36e <upd_mode1+0x132>
	else             {lcd_puts(buffer);};/* put converted string to display */	
     366:	ce 01       	movw	r24, r28
     368:	0f 96       	adiw	r24, 0x0f	; 15
     36a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
	
	lcd_gotoxy(12,1);//move cursor to line 2
     36e:	8c e0       	ldi	r24, 0x0C	; 12
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	itoa( wht , buffer, 10);/* convert integer into string */
     376:	80 91 39 01 	lds	r24, 0x0139
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9e 01       	movw	r18, r28
     380:	21 5f       	subi	r18, 0xF1	; 241
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	b9 01       	movw	r22, r18
     386:	4a e0       	ldi	r20, 0x0A	; 10
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	0e 94 15 10 	call	0x202a	; 0x202a <itoa>
	if     (wht< 10){lcd_puts("  ");lcd_puts(buffer);}
     38e:	80 91 39 01 	lds	r24, 0x0139
     392:	8a 30       	cpi	r24, 0x0A	; 10
     394:	48 f4       	brcc	.+18     	; 0x3a8 <upd_mode1+0x16c>
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     39e:	ce 01       	movw	r24, r28
     3a0:	0f 96       	adiw	r24, 0x0f	; 15
     3a2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <upd_mode1+0x18c>
	else if(wht<100){lcd_putc(' ');lcd_puts(buffer);}
     3a8:	80 91 39 01 	lds	r24, 0x0139
     3ac:	84 36       	cpi	r24, 0x64	; 100
     3ae:	40 f4       	brcc	.+16     	; 0x3c0 <upd_mode1+0x184>
     3b0:	80 e2       	ldi	r24, 0x20	; 32
     3b2:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
     3b6:	ce 01       	movw	r24, r28
     3b8:	0f 96       	adiw	r24, 0x0f	; 15
     3ba:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <upd_mode1+0x18c>
	else             {lcd_puts(buffer);};/* put converted string to display */	
     3c0:	ce 01       	movw	r24, r28
     3c2:	0f 96       	adiw	r24, 0x0f	; 15
     3c4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	a0 ea       	ldi	r26, 0xA0	; 160
     3ce:	b1 e4       	ldi	r27, 0x41	; 65
     3d0:	8b 87       	std	Y+11, r24	; 0x0b
     3d2:	9c 87       	std	Y+12, r25	; 0x0c
     3d4:	ad 87       	std	Y+13, r26	; 0x0d
     3d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3d8:	6b 85       	ldd	r22, Y+11	; 0x0b
     3da:	7c 85       	ldd	r23, Y+12	; 0x0c
     3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     3de:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4a ef       	ldi	r20, 0xFA	; 250
     3e6:	54 e4       	ldi	r21, 0x44	; 68
     3e8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	8f 83       	std	Y+7, r24	; 0x07
     3f2:	98 87       	std	Y+8, r25	; 0x08
     3f4:	a9 87       	std	Y+9, r26	; 0x09
     3f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3f8:	6f 81       	ldd	r22, Y+7	; 0x07
     3fa:	78 85       	ldd	r23, Y+8	; 0x08
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e8       	ldi	r20, 0x80	; 128
     406:	5f e3       	ldi	r21, 0x3F	; 63
     408:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     40c:	88 23       	and	r24, r24
     40e:	2c f4       	brge	.+10     	; 0x41a <upd_mode1+0x1de>
		__ticks = 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9e 83       	std	Y+6, r25	; 0x06
     416:	8d 83       	std	Y+5, r24	; 0x05
     418:	3f c0       	rjmp	.+126    	; 0x498 <upd_mode1+0x25c>
	else if (__tmp > 65535)
     41a:	6f 81       	ldd	r22, Y+7	; 0x07
     41c:	78 85       	ldd	r23, Y+8	; 0x08
     41e:	89 85       	ldd	r24, Y+9	; 0x09
     420:	9a 85       	ldd	r25, Y+10	; 0x0a
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	3f ef       	ldi	r19, 0xFF	; 255
     426:	4f e7       	ldi	r20, 0x7F	; 127
     428:	57 e4       	ldi	r21, 0x47	; 71
     42a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     42e:	18 16       	cp	r1, r24
     430:	4c f5       	brge	.+82     	; 0x484 <upd_mode1+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     432:	6b 85       	ldd	r22, Y+11	; 0x0b
     434:	7c 85       	ldd	r23, Y+12	; 0x0c
     436:	8d 85       	ldd	r24, Y+13	; 0x0d
     438:	9e 85       	ldd	r25, Y+14	; 0x0e
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e2       	ldi	r20, 0x20	; 32
     440:	51 e4       	ldi	r21, 0x41	; 65
     442:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	bc 01       	movw	r22, r24
     44c:	cd 01       	movw	r24, r26
     44e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     452:	dc 01       	movw	r26, r24
     454:	cb 01       	movw	r24, r22
     456:	9e 83       	std	Y+6, r25	; 0x06
     458:	8d 83       	std	Y+5, r24	; 0x05
     45a:	0f c0       	rjmp	.+30     	; 0x47a <upd_mode1+0x23e>
     45c:	88 ec       	ldi	r24, 0xC8	; 200
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	9c 83       	std	Y+4, r25	; 0x04
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	8b 81       	ldd	r24, Y+3	; 0x03
     466:	9c 81       	ldd	r25, Y+4	; 0x04
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <upd_mode1+0x22c>
     46c:	9c 83       	std	Y+4, r25	; 0x04
     46e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     470:	8d 81       	ldd	r24, Y+5	; 0x05
     472:	9e 81       	ldd	r25, Y+6	; 0x06
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	9e 83       	std	Y+6, r25	; 0x06
     478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47a:	8d 81       	ldd	r24, Y+5	; 0x05
     47c:	9e 81       	ldd	r25, Y+6	; 0x06
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	69 f7       	brne	.-38     	; 0x45c <upd_mode1+0x220>
     482:	14 c0       	rjmp	.+40     	; 0x4ac <upd_mode1+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     484:	6f 81       	ldd	r22, Y+7	; 0x07
     486:	78 85       	ldd	r23, Y+8	; 0x08
     488:	89 85       	ldd	r24, Y+9	; 0x09
     48a:	9a 85       	ldd	r25, Y+10	; 0x0a
     48c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     490:	dc 01       	movw	r26, r24
     492:	cb 01       	movw	r24, r22
     494:	9e 83       	std	Y+6, r25	; 0x06
     496:	8d 83       	std	Y+5, r24	; 0x05
     498:	8d 81       	ldd	r24, Y+5	; 0x05
     49a:	9e 81       	ldd	r25, Y+6	; 0x06
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <upd_mode1+0x268>
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
};//end upd_mode1()
     4ac:	65 96       	adiw	r28, 0x15	; 21
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <upd_mode0>:

void upd_mode0(void){
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	65 97       	sbiw	r28, 0x15	; 21
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];
	lcd_clrscr();
     4d2:	0e 94 10 09 	call	0x1220	; 0x1220 <lcd_clrscr>
	lcd_gotoxy( 0,0);//move cursor to line 1
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	lcd_puts("Fixture: ");
     4de:	83 e1       	ldi	r24, 0x13	; 19
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
	lcd_gotoxy(0,1);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	itoa( adr , buffer, 10);/* convert integer into string */
     4ee:	80 91 3a 01 	lds	r24, 0x013A
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	9e 01       	movw	r18, r28
     4f8:	21 5f       	subi	r18, 0xF1	; 241
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	b9 01       	movw	r22, r18
     4fe:	4a e0       	ldi	r20, 0x0A	; 10
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	0e 94 15 10 	call	0x202a	; 0x202a <itoa>
	if     (adr< 10){lcd_puts("  ");lcd_puts(buffer);}
     506:	80 91 3a 01 	lds	r24, 0x013A
     50a:	8a 30       	cpi	r24, 0x0A	; 10
     50c:	48 f4       	brcc	.+18     	; 0x520 <upd_mode0+0x62>
     50e:	80 e1       	ldi	r24, 0x10	; 16
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     516:	ce 01       	movw	r24, r28
     518:	0f 96       	adiw	r24, 0x0f	; 15
     51a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     51e:	10 c0       	rjmp	.+32     	; 0x540 <upd_mode0+0x82>
	else if(adr<100){lcd_putc(' ');lcd_puts(buffer);}
     520:	80 91 3a 01 	lds	r24, 0x013A
     524:	84 36       	cpi	r24, 0x64	; 100
     526:	40 f4       	brcc	.+16     	; 0x538 <upd_mode0+0x7a>
     528:	80 e2       	ldi	r24, 0x20	; 32
     52a:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
     52e:	ce 01       	movw	r24, r28
     530:	0f 96       	adiw	r24, 0x0f	; 15
     532:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     536:	04 c0       	rjmp	.+8      	; 0x540 <upd_mode0+0x82>
	else             {lcd_puts(buffer);};
     538:	ce 01       	movw	r24, r28
     53a:	0f 96       	adiw	r24, 0x0f	; 15
     53c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	aa e7       	ldi	r26, 0x7A	; 122
     546:	b4 e4       	ldi	r27, 0x44	; 68
     548:	8b 87       	std	Y+11, r24	; 0x0b
     54a:	9c 87       	std	Y+12, r25	; 0x0c
     54c:	ad 87       	std	Y+13, r26	; 0x0d
     54e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     550:	6b 85       	ldd	r22, Y+11	; 0x0b
     552:	7c 85       	ldd	r23, Y+12	; 0x0c
     554:	8d 85       	ldd	r24, Y+13	; 0x0d
     556:	9e 85       	ldd	r25, Y+14	; 0x0e
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	4a ef       	ldi	r20, 0xFA	; 250
     55e:	54 e4       	ldi	r21, 0x44	; 68
     560:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	8f 83       	std	Y+7, r24	; 0x07
     56a:	98 87       	std	Y+8, r25	; 0x08
     56c:	a9 87       	std	Y+9, r26	; 0x09
     56e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     570:	6f 81       	ldd	r22, Y+7	; 0x07
     572:	78 85       	ldd	r23, Y+8	; 0x08
     574:	89 85       	ldd	r24, Y+9	; 0x09
     576:	9a 85       	ldd	r25, Y+10	; 0x0a
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e8       	ldi	r20, 0x80	; 128
     57e:	5f e3       	ldi	r21, 0x3F	; 63
     580:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	2c f4       	brge	.+10     	; 0x592 <upd_mode0+0xd4>
		__ticks = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9e 83       	std	Y+6, r25	; 0x06
     58e:	8d 83       	std	Y+5, r24	; 0x05
     590:	3f c0       	rjmp	.+126    	; 0x610 <upd_mode0+0x152>
	else if (__tmp > 65535)
     592:	6f 81       	ldd	r22, Y+7	; 0x07
     594:	78 85       	ldd	r23, Y+8	; 0x08
     596:	89 85       	ldd	r24, Y+9	; 0x09
     598:	9a 85       	ldd	r25, Y+10	; 0x0a
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	3f ef       	ldi	r19, 0xFF	; 255
     59e:	4f e7       	ldi	r20, 0x7F	; 127
     5a0:	57 e4       	ldi	r21, 0x47	; 71
     5a2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	4c f5       	brge	.+82     	; 0x5fc <upd_mode0+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ac:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e2       	ldi	r20, 0x20	; 32
     5b8:	51 e4       	ldi	r21, 0x41	; 65
     5ba:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9e 83       	std	Y+6, r25	; 0x06
     5d0:	8d 83       	std	Y+5, r24	; 0x05
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <upd_mode0+0x134>
     5d4:	88 ec       	ldi	r24, 0xC8	; 200
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 83       	std	Y+4, r25	; 0x04
     5da:	8b 83       	std	Y+3, r24	; 0x03
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <upd_mode0+0x122>
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	9e 81       	ldd	r25, Y+6	; 0x06
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9e 83       	std	Y+6, r25	; 0x06
     5f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	00 97       	sbiw	r24, 0x00	; 0
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <upd_mode0+0x116>
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <upd_mode0+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fc:	6f 81       	ldd	r22, Y+7	; 0x07
     5fe:	78 85       	ldd	r23, Y+8	; 0x08
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	9e 83       	std	Y+6, r25	; 0x06
     60e:	8d 83       	std	Y+5, r24	; 0x05
     610:	8d 81       	ldd	r24, Y+5	; 0x05
     612:	9e 81       	ldd	r25, Y+6	; 0x06
     614:	9a 83       	std	Y+2, r25	; 0x02
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <upd_mode0+0x15e>
     620:	9a 83       	std	Y+2, r25	; 0x02
     622:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
};//end upd_mode0();
     624:	65 96       	adiw	r28, 0x15	; 21
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <lonib>:

uint8_t lonib(int data, int color){
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	00 d0       	rcall	.+0      	; 0x63c <lonib+0x6>
     63c:	00 d0       	rcall	.+0      	; 0x63e <lonib+0x8>
     63e:	0f 92       	push	r0
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	9b 83       	std	Y+3, r25	; 0x03
     646:	8a 83       	std	Y+2, r24	; 0x02
     648:	7d 83       	std	Y+5, r23	; 0x05
     64a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t output = (color<<4)+0xC0;
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	82 95       	swap	r24
     650:	80 7f       	andi	r24, 0xF0	; 240
     652:	80 54       	subi	r24, 0x40	; 64
     654:	89 83       	std	Y+1, r24	; 0x01
	output |= (data>>4);
     656:	8a 81       	ldd	r24, Y+2	; 0x02
     658:	9b 81       	ldd	r25, Y+3	; 0x03
     65a:	95 95       	asr	r25
     65c:	87 95       	ror	r24
     65e:	95 95       	asr	r25
     660:	87 95       	ror	r24
     662:	95 95       	asr	r25
     664:	87 95       	ror	r24
     666:	95 95       	asr	r25
     668:	87 95       	ror	r24
     66a:	98 2f       	mov	r25, r24
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	89 2b       	or	r24, r25
     670:	89 83       	std	Y+1, r24	; 0x01
	return output;
     672:	89 81       	ldd	r24, Y+1	; 0x01
}//end lonib();
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <hinib>:
uint8_t hinib(int data, int color){
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <hinib+0x6>
     68a:	00 d0       	rcall	.+0      	; 0x68c <hinib+0x8>
     68c:	0f 92       	push	r0
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	9b 83       	std	Y+3, r25	; 0x03
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	7d 83       	std	Y+5, r23	; 0x05
     698:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t output = (color<<4)+0x80;
     69a:	8c 81       	ldd	r24, Y+4	; 0x04
     69c:	82 95       	swap	r24
     69e:	80 7f       	andi	r24, 0xF0	; 240
     6a0:	80 58       	subi	r24, 0x80	; 128
     6a2:	89 83       	std	Y+1, r24	; 0x01
	output |= (data&0x0f);
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	98 2f       	mov	r25, r24
     6a8:	9f 70       	andi	r25, 0x0F	; 15
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	89 2b       	or	r24, r25
     6ae:	89 83       	std	Y+1, r24	; 0x01
	return output;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
}//end hinib();
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	08 95       	ret

000006c2 <dat_write>:

void dat_write(int a, int b, int c, int d, int address){
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	63 97       	sbiw	r28, 0x13	; 19
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	9b 87       	std	Y+11, r25	; 0x0b
     6dc:	8a 87       	std	Y+10, r24	; 0x0a
     6de:	7d 87       	std	Y+13, r23	; 0x0d
     6e0:	6c 87       	std	Y+12, r22	; 0x0c
     6e2:	5f 87       	std	Y+15, r21	; 0x0f
     6e4:	4e 87       	std	Y+14, r20	; 0x0e
     6e6:	39 8b       	std	Y+17, r19	; 0x11
     6e8:	28 8b       	std	Y+16, r18	; 0x10
     6ea:	1b 8b       	std	Y+19, r17	; 0x13
     6ec:	0a 8b       	std	Y+18, r16	; 0x12
	uint8_t buff[9];
	address &= 0x3f;//6 bits, just to be sure!
     6ee:	8a 89       	ldd	r24, Y+18	; 0x12
     6f0:	9b 89       	ldd	r25, Y+19	; 0x13
     6f2:	8f 73       	andi	r24, 0x3F	; 63
     6f4:	90 70       	andi	r25, 0x00	; 0
     6f6:	9b 8b       	std	Y+19, r25	; 0x13
     6f8:	8a 8b       	std	Y+18, r24	; 0x12
	buff[0x00]=address;
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	89 83       	std	Y+1, r24	; 0x01
	buff[0x01]=lonib(a,0);
     6fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     700:	9b 85       	ldd	r25, Y+11	; 0x0b
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	0e 94 1b 03 	call	0x636	; 0x636 <lonib>
     70a:	8a 83       	std	Y+2, r24	; 0x02
	buff[0x02]=address;
     70c:	8a 89       	ldd	r24, Y+18	; 0x12
     70e:	8b 83       	std	Y+3, r24	; 0x03
	buff[0x03]=hinib(a,0);
     710:	8a 85       	ldd	r24, Y+10	; 0x0a
     712:	9b 85       	ldd	r25, Y+11	; 0x0b
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	0e 94 42 03 	call	0x684	; 0x684 <hinib>
     71c:	8c 83       	std	Y+4, r24	; 0x04
	buff[0x04]=address;
     71e:	8a 89       	ldd	r24, Y+18	; 0x12
     720:	8d 83       	std	Y+5, r24	; 0x05
	buff[0x05]=lonib(b,1);
     722:	8c 85       	ldd	r24, Y+12	; 0x0c
     724:	9d 85       	ldd	r25, Y+13	; 0x0d
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	0e 94 1b 03 	call	0x636	; 0x636 <lonib>
     72e:	8e 83       	std	Y+6, r24	; 0x06
	buff[0x06]=address;
     730:	8a 89       	ldd	r24, Y+18	; 0x12
     732:	8f 83       	std	Y+7, r24	; 0x07
	buff[0x07]=hinib(b,1);
     734:	8c 85       	ldd	r24, Y+12	; 0x0c
     736:	9d 85       	ldd	r25, Y+13	; 0x0d
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 42 03 	call	0x684	; 0x684 <hinib>
     740:	88 87       	std	Y+8, r24	; 0x08
	buff[0x08]=address;
     742:	8a 89       	ldd	r24, Y+18	; 0x12
     744:	89 87       	std	Y+9, r24	; 0x09
	buff[0x09]=lonib(c,2);
     746:	8e 85       	ldd	r24, Y+14	; 0x0e
     748:	9f 85       	ldd	r25, Y+15	; 0x0f
     74a:	62 e0       	ldi	r22, 0x02	; 2
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	0e 94 1b 03 	call	0x636	; 0x636 <lonib>
     752:	8a 87       	std	Y+10, r24	; 0x0a
	buff[0x0a]=address;
     754:	8a 89       	ldd	r24, Y+18	; 0x12
     756:	8b 87       	std	Y+11, r24	; 0x0b
	buff[0x0b]=hinib(c,2);
     758:	8e 85       	ldd	r24, Y+14	; 0x0e
     75a:	9f 85       	ldd	r25, Y+15	; 0x0f
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 42 03 	call	0x684	; 0x684 <hinib>
     764:	8c 87       	std	Y+12, r24	; 0x0c
	buff[0x0c]=address;
     766:	8a 89       	ldd	r24, Y+18	; 0x12
     768:	8d 87       	std	Y+13, r24	; 0x0d
	buff[0x0d]=lonib(d,3);
     76a:	88 89       	ldd	r24, Y+16	; 0x10
     76c:	99 89       	ldd	r25, Y+17	; 0x11
     76e:	63 e0       	ldi	r22, 0x03	; 3
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	0e 94 1b 03 	call	0x636	; 0x636 <lonib>
     776:	8e 87       	std	Y+14, r24	; 0x0e
	buff[0x0e]=address;
     778:	8a 89       	ldd	r24, Y+18	; 0x12
     77a:	8f 87       	std	Y+15, r24	; 0x0f
	buff[0x0f]=hinib(d,3);
     77c:	88 89       	ldd	r24, Y+16	; 0x10
     77e:	99 89       	ldd	r25, Y+17	; 0x11
     780:	63 e0       	ldi	r22, 0x03	; 3
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	0e 94 42 03 	call	0x684	; 0x684 <hinib>
     788:	88 8b       	std	Y+16, r24	; 0x10
	for(k=0;k<16;k++){
     78a:	10 92 40 01 	sts	0x0140, r1
     78e:	10 92 3f 01 	sts	0x013F, r1
     792:	1f c0       	rjmp	.+62     	; 0x7d2 <dat_write+0x110>
		while((UCSR0A & (1<<UDRE0))==0);
     794:	e0 ec       	ldi	r30, 0xC0	; 192
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	80 72       	andi	r24, 0x20	; 32
     7a0:	90 70       	andi	r25, 0x00	; 0
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	b9 f3       	breq	.-18     	; 0x794 <dat_write+0xd2>
		UDR0 = buff[k];
     7a6:	a6 ec       	ldi	r26, 0xC6	; 198
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	20 91 3f 01 	lds	r18, 0x013F
     7ae:	30 91 40 01 	lds	r19, 0x0140
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	fc 01       	movw	r30, r24
     7b8:	e2 0f       	add	r30, r18
     7ba:	f3 1f       	adc	r31, r19
     7bc:	80 81       	ld	r24, Z
     7be:	8c 93       	st	X, r24
	buff[0x0b]=hinib(c,2);
	buff[0x0c]=address;
	buff[0x0d]=lonib(d,3);
	buff[0x0e]=address;
	buff[0x0f]=hinib(d,3);
	for(k=0;k<16;k++){
     7c0:	80 91 3f 01 	lds	r24, 0x013F
     7c4:	90 91 40 01 	lds	r25, 0x0140
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	90 93 40 01 	sts	0x0140, r25
     7ce:	80 93 3f 01 	sts	0x013F, r24
     7d2:	80 91 3f 01 	lds	r24, 0x013F
     7d6:	90 91 40 01 	lds	r25, 0x0140
     7da:	80 31       	cpi	r24, 0x10	; 16
     7dc:	91 05       	cpc	r25, r1
     7de:	d4 f2       	brlt	.-76     	; 0x794 <dat_write+0xd2>
		while((UCSR0A & (1<<UDRE0))==0);
		UDR0 = buff[k];
	};//end for
};//end dat_write()
     7e0:	63 96       	adiw	r28, 0x13	; 19
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	cf 91       	pop	r28
     7ee:	df 91       	pop	r29
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <main>:

int main(void){
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	df 93       	push	r29
     7fc:	cf 93       	push	r28
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	aa 97       	sbiw	r28, 0x2a	; 42
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	aa e7       	ldi	r26, 0x7A	; 122
     814:	b4 e4       	ldi	r27, 0x44	; 68
     816:	8f a3       	std	Y+39, r24	; 0x27
     818:	98 a7       	std	Y+40, r25	; 0x28
     81a:	a9 a7       	std	Y+41, r26	; 0x29
     81c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     81e:	6f a1       	ldd	r22, Y+39	; 0x27
     820:	78 a5       	ldd	r23, Y+40	; 0x28
     822:	89 a5       	ldd	r24, Y+41	; 0x29
     824:	9a a5       	ldd	r25, Y+42	; 0x2a
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4a ef       	ldi	r20, 0xFA	; 250
     82c:	54 e4       	ldi	r21, 0x44	; 68
     82e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	8b a3       	std	Y+35, r24	; 0x23
     838:	9c a3       	std	Y+36, r25	; 0x24
     83a:	ad a3       	std	Y+37, r26	; 0x25
     83c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     83e:	6b a1       	ldd	r22, Y+35	; 0x23
     840:	7c a1       	ldd	r23, Y+36	; 0x24
     842:	8d a1       	ldd	r24, Y+37	; 0x25
     844:	9e a1       	ldd	r25, Y+38	; 0x26
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e8       	ldi	r20, 0x80	; 128
     84c:	5f e3       	ldi	r21, 0x3F	; 63
     84e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     852:	88 23       	and	r24, r24
     854:	2c f4       	brge	.+10     	; 0x860 <main+0x6a>
		__ticks = 1;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	9a a3       	std	Y+34, r25	; 0x22
     85c:	89 a3       	std	Y+33, r24	; 0x21
     85e:	3f c0       	rjmp	.+126    	; 0x8de <main+0xe8>
	else if (__tmp > 65535)
     860:	6b a1       	ldd	r22, Y+35	; 0x23
     862:	7c a1       	ldd	r23, Y+36	; 0x24
     864:	8d a1       	ldd	r24, Y+37	; 0x25
     866:	9e a1       	ldd	r25, Y+38	; 0x26
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	3f ef       	ldi	r19, 0xFF	; 255
     86c:	4f e7       	ldi	r20, 0x7F	; 127
     86e:	57 e4       	ldi	r21, 0x47	; 71
     870:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     874:	18 16       	cp	r1, r24
     876:	4c f5       	brge	.+82     	; 0x8ca <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     878:	6f a1       	ldd	r22, Y+39	; 0x27
     87a:	78 a5       	ldd	r23, Y+40	; 0x28
     87c:	89 a5       	ldd	r24, Y+41	; 0x29
     87e:	9a a5       	ldd	r25, Y+42	; 0x2a
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e2       	ldi	r20, 0x20	; 32
     886:	51 e4       	ldi	r21, 0x41	; 65
     888:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	9a a3       	std	Y+34, r25	; 0x22
     89e:	89 a3       	std	Y+33, r24	; 0x21
     8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <main+0xca>
     8a2:	88 ec       	ldi	r24, 0xC8	; 200
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	98 a3       	std	Y+32, r25	; 0x20
     8a8:	8f 8f       	std	Y+31, r24	; 0x1f
     8aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ac:	98 a1       	ldd	r25, Y+32	; 0x20
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <main+0xb8>
     8b2:	98 a3       	std	Y+32, r25	; 0x20
     8b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b6:	89 a1       	ldd	r24, Y+33	; 0x21
     8b8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	9a a3       	std	Y+34, r25	; 0x22
     8be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c0:	89 a1       	ldd	r24, Y+33	; 0x21
     8c2:	9a a1       	ldd	r25, Y+34	; 0x22
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	69 f7       	brne	.-38     	; 0x8a2 <main+0xac>
     8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ca:	6b a1       	ldd	r22, Y+35	; 0x23
     8cc:	7c a1       	ldd	r23, Y+36	; 0x24
     8ce:	8d a1       	ldd	r24, Y+37	; 0x25
     8d0:	9e a1       	ldd	r25, Y+38	; 0x26
     8d2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	9a a3       	std	Y+34, r25	; 0x22
     8dc:	89 a3       	std	Y+33, r24	; 0x21
     8de:	89 a1       	ldd	r24, Y+33	; 0x21
     8e0:	9a a1       	ldd	r25, Y+34	; 0x22
     8e2:	9e 8f       	std	Y+30, r25	; 0x1e
     8e4:	8d 8f       	std	Y+29, r24	; 0x1d
     8e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <main+0xf4>
     8ee:	9e 8f       	std	Y+30, r25	; 0x1e
     8f0:	8d 8f       	std	Y+29, r24	; 0x1d
/* initialize display, cursor off */
	_delay_ms(1000);
    lcd_init(LCD_DISP_ON);
     8f2:	8c e0       	ldi	r24, 0x0C	; 12
     8f4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <lcd_init>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	aa e7       	ldi	r26, 0x7A	; 122
     8fe:	b4 e4       	ldi	r27, 0x44	; 68
     900:	89 8f       	std	Y+25, r24	; 0x19
     902:	9a 8f       	std	Y+26, r25	; 0x1a
     904:	ab 8f       	std	Y+27, r26	; 0x1b
     906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     908:	69 8d       	ldd	r22, Y+25	; 0x19
     90a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     90c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     90e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4a ef       	ldi	r20, 0xFA	; 250
     916:	54 e4       	ldi	r21, 0x44	; 68
     918:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	8d 8b       	std	Y+21, r24	; 0x15
     922:	9e 8b       	std	Y+22, r25	; 0x16
     924:	af 8b       	std	Y+23, r26	; 0x17
     926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     928:	6d 89       	ldd	r22, Y+21	; 0x15
     92a:	7e 89       	ldd	r23, Y+22	; 0x16
     92c:	8f 89       	ldd	r24, Y+23	; 0x17
     92e:	98 8d       	ldd	r25, Y+24	; 0x18
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	5f e3       	ldi	r21, 0x3F	; 63
     938:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     93c:	88 23       	and	r24, r24
     93e:	2c f4       	brge	.+10     	; 0x94a <main+0x154>
		__ticks = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9c 8b       	std	Y+20, r25	; 0x14
     946:	8b 8b       	std	Y+19, r24	; 0x13
     948:	3f c0       	rjmp	.+126    	; 0x9c8 <main+0x1d2>
	else if (__tmp > 65535)
     94a:	6d 89       	ldd	r22, Y+21	; 0x15
     94c:	7e 89       	ldd	r23, Y+22	; 0x16
     94e:	8f 89       	ldd	r24, Y+23	; 0x17
     950:	98 8d       	ldd	r25, Y+24	; 0x18
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	4f e7       	ldi	r20, 0x7F	; 127
     958:	57 e4       	ldi	r21, 0x47	; 71
     95a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     95e:	18 16       	cp	r1, r24
     960:	4c f5       	brge	.+82     	; 0x9b4 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     962:	69 8d       	ldd	r22, Y+25	; 0x19
     964:	7a 8d       	ldd	r23, Y+26	; 0x1a
     966:	8b 8d       	ldd	r24, Y+27	; 0x1b
     968:	9c 8d       	ldd	r25, Y+28	; 0x1c
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e2       	ldi	r20, 0x20	; 32
     970:	51 e4       	ldi	r21, 0x41	; 65
     972:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	bc 01       	movw	r22, r24
     97c:	cd 01       	movw	r24, r26
     97e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	9c 8b       	std	Y+20, r25	; 0x14
     988:	8b 8b       	std	Y+19, r24	; 0x13
     98a:	0f c0       	rjmp	.+30     	; 0x9aa <main+0x1b4>
     98c:	88 ec       	ldi	r24, 0xC8	; 200
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9a 8b       	std	Y+18, r25	; 0x12
     992:	89 8b       	std	Y+17, r24	; 0x11
     994:	89 89       	ldd	r24, Y+17	; 0x11
     996:	9a 89       	ldd	r25, Y+18	; 0x12
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <main+0x1a2>
     99c:	9a 8b       	std	Y+18, r25	; 0x12
     99e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a0:	8b 89       	ldd	r24, Y+19	; 0x13
     9a2:	9c 89       	ldd	r25, Y+20	; 0x14
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	9c 8b       	std	Y+20, r25	; 0x14
     9a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9aa:	8b 89       	ldd	r24, Y+19	; 0x13
     9ac:	9c 89       	ldd	r25, Y+20	; 0x14
     9ae:	00 97       	sbiw	r24, 0x00	; 0
     9b0:	69 f7       	brne	.-38     	; 0x98c <main+0x196>
     9b2:	14 c0       	rjmp	.+40     	; 0x9dc <main+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9b4:	6d 89       	ldd	r22, Y+21	; 0x15
     9b6:	7e 89       	ldd	r23, Y+22	; 0x16
     9b8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ba:	98 8d       	ldd	r25, Y+24	; 0x18
     9bc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	9c 8b       	std	Y+20, r25	; 0x14
     9c6:	8b 8b       	std	Y+19, r24	; 0x13
     9c8:	8b 89       	ldd	r24, Y+19	; 0x13
     9ca:	9c 89       	ldd	r25, Y+20	; 0x14
     9cc:	98 8b       	std	Y+16, r25	; 0x10
     9ce:	8f 87       	std	Y+15, r24	; 0x0f
     9d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9d2:	98 89       	ldd	r25, Y+16	; 0x10
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <main+0x1de>
     9d8:	98 8b       	std	Y+16, r25	; 0x10
     9da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	lcd_clrscr();
     9dc:	0e 94 10 09 	call	0x1220	; 0x1220 <lcd_clrscr>
	lcd_gotoxy( 0,0);//move cursor to line 1
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	lcd_puts("PORT_0x00");
     9e8:	8d e1       	ldi	r24, 0x1D	; 29
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
	lcd_gotoxy( 0,1);//move cursor to line 2
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	0e 94 ed 08 	call	0x11da	; 0x11da <lcd_gotoxy>
	lcd_puts("hello world");
     9f8:	87 e2       	ldi	r24, 0x27	; 39
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_puts>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	aa e7       	ldi	r26, 0x7A	; 122
     a06:	b4 e4       	ldi	r27, 0x44	; 68
     a08:	8b 87       	std	Y+11, r24	; 0x0b
     a0a:	9c 87       	std	Y+12, r25	; 0x0c
     a0c:	ad 87       	std	Y+13, r26	; 0x0d
     a0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a10:	6b 85       	ldd	r22, Y+11	; 0x0b
     a12:	7c 85       	ldd	r23, Y+12	; 0x0c
     a14:	8d 85       	ldd	r24, Y+13	; 0x0d
     a16:	9e 85       	ldd	r25, Y+14	; 0x0e
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	4a ef       	ldi	r20, 0xFA	; 250
     a1e:	54 e4       	ldi	r21, 0x44	; 68
     a20:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	8f 83       	std	Y+7, r24	; 0x07
     a2a:	98 87       	std	Y+8, r25	; 0x08
     a2c:	a9 87       	std	Y+9, r26	; 0x09
     a2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a30:	6f 81       	ldd	r22, Y+7	; 0x07
     a32:	78 85       	ldd	r23, Y+8	; 0x08
     a34:	89 85       	ldd	r24, Y+9	; 0x09
     a36:	9a 85       	ldd	r25, Y+10	; 0x0a
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e8       	ldi	r20, 0x80	; 128
     a3e:	5f e3       	ldi	r21, 0x3F	; 63
     a40:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
     a44:	88 23       	and	r24, r24
     a46:	2c f4       	brge	.+10     	; 0xa52 <main+0x25c>
		__ticks = 1;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	9e 83       	std	Y+6, r25	; 0x06
     a4e:	8d 83       	std	Y+5, r24	; 0x05
     a50:	3f c0       	rjmp	.+126    	; 0xad0 <main+0x2da>
	else if (__tmp > 65535)
     a52:	6f 81       	ldd	r22, Y+7	; 0x07
     a54:	78 85       	ldd	r23, Y+8	; 0x08
     a56:	89 85       	ldd	r24, Y+9	; 0x09
     a58:	9a 85       	ldd	r25, Y+10	; 0x0a
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	3f ef       	ldi	r19, 0xFF	; 255
     a5e:	4f e7       	ldi	r20, 0x7F	; 127
     a60:	57 e4       	ldi	r21, 0x47	; 71
     a62:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
     a66:	18 16       	cp	r1, r24
     a68:	4c f5       	brge	.+82     	; 0xabc <main+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a70:	9e 85       	ldd	r25, Y+14	; 0x0e
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	51 e4       	ldi	r21, 0x41	; 65
     a7a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	bc 01       	movw	r22, r24
     a84:	cd 01       	movw	r24, r26
     a86:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	9e 83       	std	Y+6, r25	; 0x06
     a90:	8d 83       	std	Y+5, r24	; 0x05
     a92:	0f c0       	rjmp	.+30     	; 0xab2 <main+0x2bc>
     a94:	88 ec       	ldi	r24, 0xC8	; 200
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	9c 83       	std	Y+4, r25	; 0x04
     a9a:	8b 83       	std	Y+3, r24	; 0x03
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	9c 81       	ldd	r25, Y+4	; 0x04
     aa0:	01 97       	sbiw	r24, 0x01	; 1
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <main+0x2aa>
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	9e 81       	ldd	r25, Y+6	; 0x06
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	9e 83       	std	Y+6, r25	; 0x06
     ab0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ab2:	8d 81       	ldd	r24, Y+5	; 0x05
     ab4:	9e 81       	ldd	r25, Y+6	; 0x06
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	69 f7       	brne	.-38     	; 0xa94 <main+0x29e>
     aba:	14 c0       	rjmp	.+40     	; 0xae4 <main+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     abc:	6f 81       	ldd	r22, Y+7	; 0x07
     abe:	78 85       	ldd	r23, Y+8	; 0x08
     ac0:	89 85       	ldd	r24, Y+9	; 0x09
     ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac4:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	9a 83       	std	Y+2, r25	; 0x02
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x2e6>
     ae0:	9a 83       	std	Y+2, r25	; 0x02
     ae2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	lcd_clrscr();
     ae4:	0e 94 10 09 	call	0x1220	; 0x1220 <lcd_clrscr>
	UBRR0H = 0;
     ae8:	e5 ec       	ldi	r30, 0xC5	; 197
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	10 82       	st	Z, r1
	UBRR0L = 0x01;
     aee:	e4 ec       	ldi	r30, 0xC4	; 196
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 83       	st	Z, r24
	/* Enable receiver and interrupt*/
	UCSR0B = (1<<TXEN0);
     af6:	e1 ec       	ldi	r30, 0xC1	; 193
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	80 83       	st	Z, r24
	UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
     afe:	e2 ec       	ldi	r30, 0xC2	; 194
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	8e e0       	ldi	r24, 0x0E	; 14
     b04:	80 83       	st	Z, r24
	DDRD   |= 0x02;;
     b06:	aa e2       	ldi	r26, 0x2A	; 42
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	ea e2       	ldi	r30, 0x2A	; 42
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	82 60       	ori	r24, 0x02	; 2
     b12:	8c 93       	st	X, r24
	while(1){
		for(j=0;j<5;j++){
     b14:	10 92 3e 01 	sts	0x013E, r1
     b18:	10 92 3d 01 	sts	0x013D, r1
     b1c:	75 c0       	rjmp	.+234    	; 0xc08 <main+0x412>
			if     (j==0){
     b1e:	80 91 3d 01 	lds	r24, 0x013D
     b22:	90 91 3e 01 	lds	r25, 0x013E
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	39 f5       	brne	.+78     	; 0xb78 <main+0x382>
				cto = adc_reads(j);
     b2a:	80 91 3d 01 	lds	r24, 0x013D
     b2e:	90 91 3e 01 	lds	r25, 0x013E
     b32:	0e 94 67 00 	call	0xce	; 0xce <adc_reads>
     b36:	80 93 3b 01 	sts	0x013B, r24
				if((cto>>6) == adr){adr = (cto>>6);}
     b3a:	80 91 3b 01 	lds	r24, 0x013B
     b3e:	98 2f       	mov	r25, r24
     b40:	92 95       	swap	r25
     b42:	96 95       	lsr	r25
     b44:	96 95       	lsr	r25
     b46:	93 70       	andi	r25, 0x03	; 3
     b48:	80 91 3a 01 	lds	r24, 0x013A
     b4c:	98 17       	cp	r25, r24
     b4e:	49 f4       	brne	.+18     	; 0xb62 <main+0x36c>
     b50:	80 91 3b 01 	lds	r24, 0x013B
     b54:	82 95       	swap	r24
     b56:	86 95       	lsr	r24
     b58:	86 95       	lsr	r24
     b5a:	83 70       	andi	r24, 0x03	; 3
     b5c:	80 93 3a 01 	sts	0x013A, r24
     b60:	4a c0       	rjmp	.+148    	; 0xbf6 <main+0x400>
				else{adr=(cto>>6);upd_mode0();};
     b62:	80 91 3b 01 	lds	r24, 0x013B
     b66:	82 95       	swap	r24
     b68:	86 95       	lsr	r24
     b6a:	86 95       	lsr	r24
     b6c:	83 70       	andi	r24, 0x03	; 3
     b6e:	80 93 3a 01 	sts	0x013A, r24
     b72:	0e 94 5f 02 	call	0x4be	; 0x4be <upd_mode0>
     b76:	3f c0       	rjmp	.+126    	; 0xbf6 <main+0x400>
			}
			else if(j==1){red = adc_reads(j);}
     b78:	80 91 3d 01 	lds	r24, 0x013D
     b7c:	90 91 3e 01 	lds	r25, 0x013E
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	49 f4       	brne	.+18     	; 0xb98 <main+0x3a2>
     b86:	80 91 3d 01 	lds	r24, 0x013D
     b8a:	90 91 3e 01 	lds	r25, 0x013E
     b8e:	0e 94 67 00 	call	0xce	; 0xce <adc_reads>
     b92:	80 93 36 01 	sts	0x0136, r24
     b96:	2f c0       	rjmp	.+94     	; 0xbf6 <main+0x400>
			else if(j==2){grn = adc_reads(j);}
     b98:	80 91 3d 01 	lds	r24, 0x013D
     b9c:	90 91 3e 01 	lds	r25, 0x013E
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	91 05       	cpc	r25, r1
     ba4:	49 f4       	brne	.+18     	; 0xbb8 <main+0x3c2>
     ba6:	80 91 3d 01 	lds	r24, 0x013D
     baa:	90 91 3e 01 	lds	r25, 0x013E
     bae:	0e 94 67 00 	call	0xce	; 0xce <adc_reads>
     bb2:	80 93 37 01 	sts	0x0137, r24
     bb6:	1f c0       	rjmp	.+62     	; 0xbf6 <main+0x400>
			else if(j==3){blu = adc_reads(j);}
     bb8:	80 91 3d 01 	lds	r24, 0x013D
     bbc:	90 91 3e 01 	lds	r25, 0x013E
     bc0:	83 30       	cpi	r24, 0x03	; 3
     bc2:	91 05       	cpc	r25, r1
     bc4:	49 f4       	brne	.+18     	; 0xbd8 <main+0x3e2>
     bc6:	80 91 3d 01 	lds	r24, 0x013D
     bca:	90 91 3e 01 	lds	r25, 0x013E
     bce:	0e 94 67 00 	call	0xce	; 0xce <adc_reads>
     bd2:	80 93 38 01 	sts	0x0138, r24
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <main+0x400>
			else if(j==4){wht = adc_reads(j);}
     bd8:	80 91 3d 01 	lds	r24, 0x013D
     bdc:	90 91 3e 01 	lds	r25, 0x013E
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	91 05       	cpc	r25, r1
     be4:	41 f4       	brne	.+16     	; 0xbf6 <main+0x400>
     be6:	80 91 3d 01 	lds	r24, 0x013D
     bea:	90 91 3e 01 	lds	r25, 0x013E
     bee:	0e 94 67 00 	call	0xce	; 0xce <adc_reads>
     bf2:	80 93 39 01 	sts	0x0139, r24
	/* Enable receiver and interrupt*/
	UCSR0B = (1<<TXEN0);
	UCSR0C = (1<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
	DDRD   |= 0x02;;
	while(1){
		for(j=0;j<5;j++){
     bf6:	80 91 3d 01 	lds	r24, 0x013D
     bfa:	90 91 3e 01 	lds	r25, 0x013E
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	90 93 3e 01 	sts	0x013E, r25
     c04:	80 93 3d 01 	sts	0x013D, r24
     c08:	80 91 3d 01 	lds	r24, 0x013D
     c0c:	90 91 3e 01 	lds	r25, 0x013E
     c10:	85 30       	cpi	r24, 0x05	; 5
     c12:	91 05       	cpc	r25, r1
     c14:	0c f4       	brge	.+2      	; 0xc18 <main+0x422>
     c16:	83 cf       	rjmp	.-250    	; 0xb1e <main+0x328>
			else if(j==1){red = adc_reads(j);}
			else if(j==2){grn = adc_reads(j);}
			else if(j==3){blu = adc_reads(j);}
			else if(j==4){wht = adc_reads(j);}
		};//end for
		dat_write(red,grn,blu,wht,adr);
     c18:	80 91 36 01 	lds	r24, 0x0136
     c1c:	48 2f       	mov	r20, r24
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	80 91 37 01 	lds	r24, 0x0137
     c24:	68 2f       	mov	r22, r24
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 91 38 01 	lds	r24, 0x0138
     c2c:	a8 2f       	mov	r26, r24
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	80 91 39 01 	lds	r24, 0x0139
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	80 91 3a 01 	lds	r24, 0x013A
     c3c:	e8 2f       	mov	r30, r24
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ca 01       	movw	r24, r20
     c42:	ad 01       	movw	r20, r26
     c44:	8f 01       	movw	r16, r30
     c46:	0e 94 61 03 	call	0x6c2	; 0x6c2 <dat_write>
		upd_mode1();
     c4a:	0e 94 1e 01 	call	0x23c	; 0x23c <upd_mode1>
     c4e:	62 cf       	rjmp	.-316    	; 0xb14 <main+0x31e>

00000c50 <toggle_e>:
/*
** local functions
*/

#if LCD_IO_MODE
static void toggle_e(void){
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
	lcd_e_high();
     c58:	a8 e2       	ldi	r26, 0x28	; 40
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e8 e2       	ldi	r30, 0x28	; 40
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8c 93       	st	X, r24
    lcd_e_delay();
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <toggle_e+0x18>
    lcd_e_low();
     c68:	a8 e2       	ldi	r26, 0x28	; 40
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e2       	ldi	r30, 0x28	; 40
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 7e       	andi	r24, 0xEF	; 239
     c74:	8c 93       	st	X, r24
}//end toggle_e()
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <lcd_write>:
#endif

#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs){
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	00 d0       	rcall	.+0      	; 0xc82 <lcd_write+0x6>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	6a 83       	std	Y+2, r22	; 0x02
    if (rs) {lcd_rs_high();} 
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 23       	and	r24, r24
     c8e:	41 f0       	breq	.+16     	; 0xca0 <lcd_write+0x24>
     c90:	a8 e2       	ldi	r26, 0x28	; 40
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e8 e2       	ldi	r30, 0x28	; 40
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 64       	ori	r24, 0x40	; 64
     c9c:	8c 93       	st	X, r24
     c9e:	07 c0       	rjmp	.+14     	; 0xcae <lcd_write+0x32>
    else {lcd_rs_low();};
     ca0:	a8 e2       	ldi	r26, 0x28	; 40
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e8 e2       	ldi	r30, 0x28	; 40
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8f 7b       	andi	r24, 0xBF	; 191
     cac:	8c 93       	st	X, r24
    lcd_rw_low();
     cae:	a8 e2       	ldi	r26, 0x28	; 40
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e8 e2       	ldi	r30, 0x28	; 40
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8f 7d       	andi	r24, 0xDF	; 223
     cba:	8c 93       	st	X, r24
/* configure data pins as output */
    DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     cbc:	a7 e2       	ldi	r26, 0x27	; 39
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e2       	ldi	r30, 0x27	; 39
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	8c 93       	st	X, r24
    DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     cca:	a7 e2       	ldi	r26, 0x27	; 39
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e2       	ldi	r30, 0x27	; 39
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	84 60       	ori	r24, 0x04	; 4
     cd6:	8c 93       	st	X, r24
    DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     cd8:	a7 e2       	ldi	r26, 0x27	; 39
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e2       	ldi	r30, 0x27	; 39
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	8c 93       	st	X, r24
    DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     ce6:	a7 e2       	ldi	r26, 0x27	; 39
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e7 e2       	ldi	r30, 0x27	; 39
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	8c 93       	st	X, r24
/* output high nibble first */
    LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     cf4:	a8 e2       	ldi	r26, 0x28	; 40
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e8 e2       	ldi	r30, 0x28	; 40
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8e 7f       	andi	r24, 0xFE	; 254
     d00:	8c 93       	st	X, r24
    LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     d02:	a8 e2       	ldi	r26, 0x28	; 40
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e2       	ldi	r30, 0x28	; 40
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8d 7f       	andi	r24, 0xFD	; 253
     d0e:	8c 93       	st	X, r24
    LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8b 7f       	andi	r24, 0xFB	; 251
     d1c:	8c 93       	st	X, r24
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	87 7f       	andi	r24, 0xF7	; 247
     d2a:	8c 93       	st	X, r24
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	88 23       	and	r24, r24
     d30:	3c f4       	brge	.+14     	; 0xd40 <lcd_write+0xc4>
     d32:	a8 e2       	ldi	r26, 0x28	; 40
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e8 e2       	ldi	r30, 0x28	; 40
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	8c 93       	st	X, r24
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	80 74       	andi	r24, 0x40	; 64
     d48:	90 70       	andi	r25, 0x00	; 0
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	39 f0       	breq	.+14     	; 0xd5c <lcd_write+0xe0>
     d4e:	a8 e2       	ldi	r26, 0x28	; 40
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 e2       	ldi	r30, 0x28	; 40
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	82 60       	ori	r24, 0x02	; 2
     d5a:	8c 93       	st	X, r24
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	80 72       	andi	r24, 0x20	; 32
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	39 f0       	breq	.+14     	; 0xd78 <lcd_write+0xfc>
     d6a:	a8 e2       	ldi	r26, 0x28	; 40
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e8 e2       	ldi	r30, 0x28	; 40
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	84 60       	ori	r24, 0x04	; 4
     d76:	8c 93       	st	X, r24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	80 71       	andi	r24, 0x10	; 16
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	39 f0       	breq	.+14     	; 0xd94 <lcd_write+0x118>
     d86:	a8 e2       	ldi	r26, 0x28	; 40
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e8 e2       	ldi	r30, 0x28	; 40
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	8c 93       	st	X, r24
    lcd_e_toggle();    
     d94:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
/* output low nibble */
    LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     d98:	a8 e2       	ldi	r26, 0x28	; 40
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e2       	ldi	r30, 0x28	; 40
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	8c 93       	st	X, r24
    LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     da6:	a8 e2       	ldi	r26, 0x28	; 40
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e2       	ldi	r30, 0x28	; 40
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8d 7f       	andi	r24, 0xFD	; 253
     db2:	8c 93       	st	X, r24
    LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     db4:	a8 e2       	ldi	r26, 0x28	; 40
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e8 e2       	ldi	r30, 0x28	; 40
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	8c 93       	st	X, r24
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     dc2:	a8 e2       	ldi	r26, 0x28	; 40
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e2       	ldi	r30, 0x28	; 40
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	87 7f       	andi	r24, 0xF7	; 247
     dce:	8c 93       	st	X, r24
	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	88 70       	andi	r24, 0x08	; 8
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	39 f0       	breq	.+14     	; 0xdec <lcd_write+0x170>
     dde:	a8 e2       	ldi	r26, 0x28	; 40
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e2       	ldi	r30, 0x28	; 40
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	8c 93       	st	X, r24
	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	84 70       	andi	r24, 0x04	; 4
     df4:	90 70       	andi	r25, 0x00	; 0
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	39 f0       	breq	.+14     	; 0xe08 <lcd_write+0x18c>
     dfa:	a8 e2       	ldi	r26, 0x28	; 40
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e2       	ldi	r30, 0x28	; 40
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	82 70       	andi	r24, 0x02	; 2
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	39 f0       	breq	.+14     	; 0xe24 <lcd_write+0x1a8>
     e16:	a8 e2       	ldi	r26, 0x28	; 40
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e8 e2       	ldi	r30, 0x28	; 40
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	84 60       	ori	r24, 0x04	; 4
     e22:	8c 93       	st	X, r24
	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	81 70       	andi	r24, 0x01	; 1
     e2c:	90 70       	andi	r25, 0x00	; 0
     e2e:	88 23       	and	r24, r24
     e30:	39 f0       	breq	.+14     	; 0xe40 <lcd_write+0x1c4>
     e32:	a8 e2       	ldi	r26, 0x28	; 40
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e8 e2       	ldi	r30, 0x28	; 40
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 60       	ori	r24, 0x08	; 8
     e3e:	8c 93       	st	X, r24
    lcd_e_toggle();        
     e40:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
/* all data pins high (inactive) */
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     e44:	a8 e2       	ldi	r26, 0x28	; 40
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e8 e2       	ldi	r30, 0x28	; 40
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	8c 93       	st	X, r24
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     e52:	a8 e2       	ldi	r26, 0x28	; 40
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e2       	ldi	r30, 0x28	; 40
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	84 60       	ori	r24, 0x04	; 4
     e5e:	8c 93       	st	X, r24
    LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     e60:	a8 e2       	ldi	r26, 0x28	; 40
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e8 e2       	ldi	r30, 0x28	; 40
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	8c 93       	st	X, r24
    LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     e6e:	a8 e2       	ldi	r26, 0x28	; 40
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e8 e2       	ldi	r30, 0x28	; 40
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	8c 93       	st	X, r24
};//end lcd_write();
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <lcd_read>:
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs){
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <lcd_read+0x6>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    if (rs){lcd_rs_high();}                       /* RS=1: read data      */
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	88 23       	and	r24, r24
     e96:	41 f0       	breq	.+16     	; 0xea8 <lcd_read+0x22>
     e98:	a8 e2       	ldi	r26, 0x28	; 40
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e8 e2       	ldi	r30, 0x28	; 40
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <lcd_read+0x30>
    else{lcd_rs_low();};                        /* RS=0: read busy flag */
     ea8:	a8 e2       	ldi	r26, 0x28	; 40
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e8 e2       	ldi	r30, 0x28	; 40
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8f 7b       	andi	r24, 0xBF	; 191
     eb4:	8c 93       	st	X, r24
    lcd_rw_high();                           /* RW=1  read mode      */
     eb6:	a8 e2       	ldi	r26, 0x28	; 40
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e8 e2       	ldi	r30, 0x28	; 40
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 62       	ori	r24, 0x20	; 32
     ec2:	8c 93       	st	X, r24
/* configure data pins as input */
    DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     ec4:	a7 e2       	ldi	r26, 0x27	; 39
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e2       	ldi	r30, 0x27	; 39
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	8c 93       	st	X, r24
    DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     ed2:	a7 e2       	ldi	r26, 0x27	; 39
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e7 e2       	ldi	r30, 0x27	; 39
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8b 7f       	andi	r24, 0xFB	; 251
     ede:	8c 93       	st	X, r24
    DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     ee0:	a7 e2       	ldi	r26, 0x27	; 39
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e7 e2       	ldi	r30, 0x27	; 39
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8d 7f       	andi	r24, 0xFD	; 253
     eec:	8c 93       	st	X, r24
    DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     eee:	a7 e2       	ldi	r26, 0x27	; 39
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e2       	ldi	r30, 0x27	; 39
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8e 7f       	andi	r24, 0xFE	; 254
     efa:	8c 93       	st	X, r24
/* read high nibble first */
    lcd_e_high();
     efc:	a8 e2       	ldi	r26, 0x28	; 40
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e8 e2       	ldi	r30, 0x28	; 40
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	8c 93       	st	X, r24
    lcd_e_delay();        
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <lcd_read+0x86>
    data = 0;
     f0c:	19 82       	std	Y+1, r1	; 0x01
    if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     f0e:	e6 e2       	ldi	r30, 0x26	; 38
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	88 70       	andi	r24, 0x08	; 8
     f1a:	90 70       	andi	r25, 0x00	; 0
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	19 f0       	breq	.+6      	; 0xf26 <lcd_read+0xa0>
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	80 61       	ori	r24, 0x10	; 16
     f24:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     f26:	e6 e2       	ldi	r30, 0x26	; 38
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	84 70       	andi	r24, 0x04	; 4
     f32:	90 70       	andi	r25, 0x00	; 0
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	19 f0       	breq	.+6      	; 0xf3e <lcd_read+0xb8>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	80 62       	ori	r24, 0x20	; 32
     f3c:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     f3e:	e6 e2       	ldi	r30, 0x26	; 38
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	82 70       	andi	r24, 0x02	; 2
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	19 f0       	breq	.+6      	; 0xf56 <lcd_read+0xd0>
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	80 64       	ori	r24, 0x40	; 64
     f54:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     f56:	e6 e2       	ldi	r30, 0x26	; 38
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	81 70       	andi	r24, 0x01	; 1
     f62:	90 70       	andi	r25, 0x00	; 0
     f64:	88 23       	and	r24, r24
     f66:	19 f0       	breq	.+6      	; 0xf6e <lcd_read+0xe8>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	80 68       	ori	r24, 0x80	; 128
     f6c:	89 83       	std	Y+1, r24	; 0x01
    lcd_e_low();
     f6e:	a8 e2       	ldi	r26, 0x28	; 40
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e2       	ldi	r30, 0x28	; 40
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	8c 93       	st	X, r24
    lcd_e_delay();                       /* Enable 500ns low       */
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <lcd_read+0xf8>
/* read low nibble */    
    lcd_e_high();
     f7e:	a8 e2       	ldi	r26, 0x28	; 40
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e8 e2       	ldi	r30, 0x28	; 40
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 61       	ori	r24, 0x10	; 16
     f8a:	8c 93       	st	X, r24
    lcd_e_delay();
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <lcd_read+0x108>
    if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     f8e:	e6 e2       	ldi	r30, 0x26	; 38
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 70       	andi	r24, 0x08	; 8
     f9a:	90 70       	andi	r25, 0x00	; 0
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <lcd_read+0x120>
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     fa6:	e6 e2       	ldi	r30, 0x26	; 38
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	84 70       	andi	r24, 0x04	; 4
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	19 f0       	breq	.+6      	; 0xfbe <lcd_read+0x138>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     fbe:	e6 e2       	ldi	r30, 0x26	; 38
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	82 70       	andi	r24, 0x02	; 2
     fca:	90 70       	andi	r25, 0x00	; 0
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	19 f0       	breq	.+6      	; 0xfd6 <lcd_read+0x150>
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	84 60       	ori	r24, 0x04	; 4
     fd4:	89 83       	std	Y+1, r24	; 0x01
    if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     fd6:	e6 e2       	ldi	r30, 0x26	; 38
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	88 23       	and	r24, r24
     fe6:	19 f0       	breq	.+6      	; 0xfee <lcd_read+0x168>
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	89 83       	std	Y+1, r24	; 0x01
    lcd_e_low();
     fee:	a8 e2       	ldi	r26, 0x28	; 40
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e8 e2       	ldi	r30, 0x28	; 40
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 7e       	andi	r24, 0xEF	; 239
     ffa:	8c 93       	st	X, r24
    return data;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
};//end lcd_read()
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <lcd_waitbusy>:


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	68 97       	sbiw	r28, 0x18	; 24
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    register uint8_t buz;  
/* wait until busy flag is cleared */
    while ((buz=lcd_read(0)) & (1<<LCD_BUSY)) {;};
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_read>
    1022:	88 23       	and	r24, r24
    1024:	dc f3       	brlt	.-10     	; 0x101c <lcd_waitbusy+0x14>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e4       	ldi	r27, 0x40	; 64
    102e:	8d 8b       	std	Y+21, r24	; 0x15
    1030:	9e 8b       	std	Y+22, r25	; 0x16
    1032:	af 8b       	std	Y+23, r26	; 0x17
    1034:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1036:	6d 89       	ldd	r22, Y+21	; 0x15
    1038:	7e 89       	ldd	r23, Y+22	; 0x16
    103a:	8f 89       	ldd	r24, Y+23	; 0x17
    103c:	98 8d       	ldd	r25, Y+24	; 0x18
    103e:	2b ea       	ldi	r18, 0xAB	; 171
    1040:	3a ea       	ldi	r19, 0xAA	; 170
    1042:	4a e2       	ldi	r20, 0x2A	; 42
    1044:	50 e4       	ldi	r21, 0x40	; 64
    1046:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	89 8b       	std	Y+17, r24	; 0x11
    1050:	9a 8b       	std	Y+18, r25	; 0x12
    1052:	ab 8b       	std	Y+19, r26	; 0x13
    1054:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1056:	69 89       	ldd	r22, Y+17	; 0x11
    1058:	7a 89       	ldd	r23, Y+18	; 0x12
    105a:	8b 89       	ldd	r24, Y+19	; 0x13
    105c:	9c 89       	ldd	r25, Y+20	; 0x14
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    106a:	88 23       	and	r24, r24
    106c:	1c f4       	brge	.+6      	; 0x1074 <lcd_waitbusy+0x6c>
		__ticks = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	88 8b       	std	Y+16, r24	; 0x10
    1072:	91 c0       	rjmp	.+290    	; 0x1196 <lcd_waitbusy+0x18e>
	else if (__tmp > 255)
    1074:	69 89       	ldd	r22, Y+17	; 0x11
    1076:	7a 89       	ldd	r23, Y+18	; 0x12
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	53 e4       	ldi	r21, 0x43	; 67
    1084:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1088:	18 16       	cp	r1, r24
    108a:	0c f0       	brlt	.+2      	; 0x108e <lcd_waitbusy+0x86>
    108c:	7b c0       	rjmp	.+246    	; 0x1184 <lcd_waitbusy+0x17c>
	{
		_delay_ms(__us / 1000.0);
    108e:	6d 89       	ldd	r22, Y+21	; 0x15
    1090:	7e 89       	ldd	r23, Y+22	; 0x16
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a e7       	ldi	r20, 0x7A	; 122
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8c 87       	std	Y+12, r24	; 0x0c
    10a8:	9d 87       	std	Y+13, r25	; 0x0d
    10aa:	ae 87       	std	Y+14, r26	; 0x0e
    10ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    10b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    10b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    10b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a ef       	ldi	r20, 0xFA	; 250
    10bc:	54 e4       	ldi	r21, 0x44	; 68
    10be:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	88 87       	std	Y+8, r24	; 0x08
    10c8:	99 87       	std	Y+9, r25	; 0x09
    10ca:	aa 87       	std	Y+10, r26	; 0x0a
    10cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10ce:	68 85       	ldd	r22, Y+8	; 0x08
    10d0:	79 85       	ldd	r23, Y+9	; 0x09
    10d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <lcd_waitbusy+0xe8>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9f 83       	std	Y+7, r25	; 0x07
    10ec:	8e 83       	std	Y+6, r24	; 0x06
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <lcd_waitbusy+0x166>
	else if (__tmp > 65535)
    10f0:	68 85       	ldd	r22, Y+8	; 0x08
    10f2:	79 85       	ldd	r23, Y+9	; 0x09
    10f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <lcd_waitbusy+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	6c 85       	ldd	r22, Y+12	; 0x0c
    110a:	7d 85       	ldd	r23, Y+13	; 0x0d
    110c:	8e 85       	ldd	r24, Y+14	; 0x0e
    110e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9f 83       	std	Y+7, r25	; 0x07
    112e:	8e 83       	std	Y+6, r24	; 0x06
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <lcd_waitbusy+0x148>
    1132:	88 ec       	ldi	r24, 0xC8	; 200
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9d 83       	std	Y+5, r25	; 0x05
    1138:	8c 83       	std	Y+4, r24	; 0x04
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <lcd_waitbusy+0x136>
    1142:	9d 83       	std	Y+5, r25	; 0x05
    1144:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9f 83       	std	Y+7, r25	; 0x07
    114e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	9f 81       	ldd	r25, Y+7	; 0x07
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <lcd_waitbusy+0x12a>
    1158:	24 c0       	rjmp	.+72     	; 0x11a2 <lcd_waitbusy+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	68 85       	ldd	r22, Y+8	; 0x08
    115c:	79 85       	ldd	r23, Y+9	; 0x09
    115e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1160:	9b 85       	ldd	r25, Y+11	; 0x0b
    1162:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9f 83       	std	Y+7, r25	; 0x07
    116c:	8e 83       	std	Y+6, r24	; 0x06
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	9b 83       	std	Y+3, r25	; 0x03
    1174:	8a 83       	std	Y+2, r24	; 0x02
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	9b 81       	ldd	r25, Y+3	; 0x03
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <lcd_waitbusy+0x172>
    117e:	9b 83       	std	Y+3, r25	; 0x03
    1180:	8a 83       	std	Y+2, r24	; 0x02
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <lcd_waitbusy+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1184:	69 89       	ldd	r22, Y+17	; 0x11
    1186:	7a 89       	ldd	r23, Y+18	; 0x12
    1188:	8b 89       	ldd	r24, Y+19	; 0x13
    118a:	9c 89       	ldd	r25, Y+20	; 0x14
    118c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	88 8b       	std	Y+16, r24	; 0x10
    1196:	88 89       	ldd	r24, Y+16	; 0x10
    1198:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	8a 95       	dec	r24
    119e:	f1 f7       	brne	.-4      	; 0x119c <lcd_waitbusy+0x194>
    11a0:	89 83       	std	Y+1, r24	; 0x01
/* the address counter is updated 4us after the busy flag is cleared */
     _delay_us(2);
/* now read the address counter */
    return (lcd_read(0));  // return address counter
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 43 07 	call	0xe86	; 0xe86 <lcd_read>
};//end lcd_waitbusy()
    11a8:	68 96       	adiw	r28, 0x18	; 24
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <lcd_command>:
/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
    11c6:	0e 94 04 08 	call	0x1008	; 0x1008 <lcd_waitbusy>
    lcd_write(cmd,0);
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	0e 94 3e 06 	call	0xc7c	; 0xc7c <lcd_write>
};//end lcd_command();
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <lcd_gotoxy>:
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <lcd_gotoxy+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if (y==0){lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);}
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	88 23       	and	r24, r24
    11ec:	29 f4       	brne	.+10     	; 0x11f8 <lcd_gotoxy+0x1e>
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	80 58       	subi	r24, 0x80	; 128
    11f2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <lcd_gotoxy+0x26>
    else{lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);};
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	80 54       	subi	r24, 0x40	; 64
    11fc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    if      (y==0){lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);}
    else if (y==1){lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);}
    else if (y==2){lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);}
    else  /*y==3*/{lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);};
#endif
};//end lcd_gotoxy()
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void){return lcd_waitbusy();};//end lcd_getxy()
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	0e 94 04 08 	call	0x1008	; 0x1008 <lcd_waitbusy>
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <lcd_clrscr>:

void lcd_clrscr(void){lcd_command(1<<LCD_CLR);};//end lcd_clrscr()
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <lcd_home>:
void lcd_home(void){lcd_command(1<<LCD_HOME);};//end lcd_home()
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <lcd_putc>:
void lcd_putc(char c){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <lcd_putc+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;
    pos = lcd_waitbusy();   // read busy-flag and address counter
    1254:	0e 94 04 08 	call	0x1008	; 0x1008 <lcd_waitbusy>
    1258:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n'){lcd_newline(pos);}
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	8a 30       	cpi	r24, 0x0A	; 10
    125e:	21 f4       	brne	.+8      	; 0x1268 <lcd_putc+0x20>
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	0e 94 3d 09 	call	0x127a	; 0x127a <lcd_newline>
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <lcd_putc+0x28>
        else if (pos==LCD_START_LINE4+LCD_DISP_LENGTH){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);};
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <lcd_write>
    };//end else
};//end lcd_putc();
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <lcd_newline>:
     _delay_us(2);
/* now read the address counter */
    return (lcd_read(0));  // return address counter
};//end lcd_waitbusy()

static inline void lcd_newline(uint8_t pos){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <lcd_newline+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    register uint8_t addressCounter;
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if (pos<(LCD_START_LINE2)){addressCounter = LCD_START_LINE2;}
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	80 34       	cpi	r24, 0x40	; 64
    128a:	18 f4       	brcc	.+6      	; 0x1292 <lcd_newline+0x18>
    128c:	80 e4       	ldi	r24, 0x40	; 64
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <lcd_newline+0x1a>
    else{addressCounter = LCD_START_LINE1;};
    1292:	1a 82       	std	Y+2, r1	; 0x02
    else if ((pos>=LCD_START_LINE3)&&(pos<LCD_START_LINE2)){
    	addressCounter = LCD_START_LINE4;}
    else{
    	addressCounter = LCD_START_LINE1;};
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 58       	subi	r24, 0x80	; 128
    1298:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
};//end lcd_newline()
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <lcd_puts>:
#endif
        lcd_write(c, 1);
    };//end else
};//end lcd_putc();

void lcd_puts(const char *s){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <lcd_puts+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <lcd_puts+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <lcd_puts+0x18>
    register char c;
    while ((c =*s++)){
        lcd_putc(c);
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	0e 94 24 09 	call	0x1248	; 0x1248 <lcd_putc>
    };//end else
};//end lcd_putc();

void lcd_puts(const char *s){
    register char c;
    while ((c =*s++)){
    12be:	e9 81       	ldd	r30, Y+1	; 0x01
    12c0:	fa 81       	ldd	r31, Y+2	; 0x02
    12c2:	80 81       	ld	r24, Z
    12c4:	8b 83       	std	Y+3, r24	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	8c 83       	std	Y+4, r24	; 0x04
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	88 23       	and	r24, r24
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <lcd_puts+0x2e>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	8c 83       	std	Y+4, r24	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	29 81       	ldd	r18, Y+1	; 0x01
    12d8:	3a 81       	ldd	r19, Y+2	; 0x02
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	3a 83       	std	Y+2, r19	; 0x02
    12e0:	29 83       	std	Y+1, r18	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	49 f7       	brne	.-46     	; 0x12b8 <lcd_puts+0x12>
        lcd_putc(c);
    };//end while
};//end lcd_puts()
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <lcd_init>:

void lcd_init(uint8_t dispAttr){
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	c9 57       	subi	r28, 0x79	; 121
    1302:	d0 40       	sbci	r29, 0x00	; 0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	fe 01       	movw	r30, r28
    1310:	e7 58       	subi	r30, 0x87	; 135
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 83       	st	Z, r24
#if LCD_IO_MODE
    /*Initialize LCD to 4 bit I/O mode*/     
/* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    1316:	a7 e2       	ldi	r26, 0x27	; 39
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e7 e2       	ldi	r30, 0x27	; 39
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	8c 93       	st	X, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    1324:	a7 e2       	ldi	r26, 0x27	; 39
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e7 e2       	ldi	r30, 0x27	; 39
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 62       	ori	r24, 0x20	; 32
    1330:	8c 93       	st	X, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    1332:	a7 e2       	ldi	r26, 0x27	; 39
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e2       	ldi	r30, 0x27	; 39
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	8c 93       	st	X, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    1340:	a7 e2       	ldi	r26, 0x27	; 39
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e7 e2       	ldi	r30, 0x27	; 39
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 60       	ori	r24, 0x08	; 8
    134c:	8c 93       	st	X, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    134e:	a7 e2       	ldi	r26, 0x27	; 39
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e7 e2       	ldi	r30, 0x27	; 39
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	84 60       	ori	r24, 0x04	; 4
    135a:	8c 93       	st	X, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    135c:	a7 e2       	ldi	r26, 0x27	; 39
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e7 e2       	ldi	r30, 0x27	; 39
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	82 60       	ori	r24, 0x02	; 2
    1368:	8c 93       	st	X, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    136a:	a7 e2       	ldi	r26, 0x27	; 39
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e7 e2       	ldi	r30, 0x27	; 39
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	81 60       	ori	r24, 0x01	; 1
    1376:	8c 93       	st	X, r24
    1378:	fe 01       	movw	r30, r28
    137a:	eb 58       	subi	r30, 0x8B	; 139
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	aa e7       	ldi	r26, 0x7A	; 122
    1384:	b6 e4       	ldi	r27, 0x46	; 70
    1386:	80 83       	st	Z, r24
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	a2 83       	std	Z+2, r26	; 0x02
    138c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    138e:	8e 01       	movw	r16, r28
    1390:	0f 58       	subi	r16, 0x8F	; 143
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	fe 01       	movw	r30, r28
    1396:	eb 58       	subi	r30, 0x8B	; 139
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	2b ea       	ldi	r18, 0xAB	; 171
    13a4:	3a ea       	ldi	r19, 0xAA	; 170
    13a6:	4a e2       	ldi	r20, 0x2A	; 42
    13a8:	50 e4       	ldi	r21, 0x40	; 64
    13aa:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 83       	st	Z, r24
    13b6:	91 83       	std	Z+1, r25	; 0x01
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13bc:	fe 01       	movw	r30, r28
    13be:	ef 58       	subi	r30, 0x8F	; 143
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	34 f4       	brge	.+12     	; 0x13e6 <lcd_init+0xf2>
		__ticks = 1;
    13da:	fe 01       	movw	r30, r28
    13dc:	e0 59       	subi	r30, 0x90	; 144
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 83       	st	Z, r24
    13e4:	e0 c0       	rjmp	.+448    	; 0x15a6 <lcd_init+0x2b2>
	else if (__tmp > 255)
    13e6:	fe 01       	movw	r30, r28
    13e8:	ef 58       	subi	r30, 0x8F	; 143
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	53 e4       	ldi	r21, 0x43	; 67
    13fc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1400:	18 16       	cp	r1, r24
    1402:	0c f0       	brlt	.+2      	; 0x1406 <lcd_init+0x112>
    1404:	c0 c0       	rjmp	.+384    	; 0x1586 <lcd_init+0x292>
	{
		_delay_ms(__us / 1000.0);
    1406:	fe 01       	movw	r30, r28
    1408:	eb 58       	subi	r30, 0x8B	; 139
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a e7       	ldi	r20, 0x7A	; 122
    141a:	54 e4       	ldi	r21, 0x44	; 68
    141c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	fe 01       	movw	r30, r28
    1426:	e4 59       	subi	r30, 0x94	; 148
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 83       	st	Z, r24
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	a2 83       	std	Z+2, r26	; 0x02
    1430:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	8e 01       	movw	r16, r28
    1434:	08 59       	subi	r16, 0x98	; 152
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	e4 59       	subi	r30, 0x94	; 148
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a ef       	ldi	r20, 0xFA	; 250
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	80 83       	st	Z, r24
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	a2 83       	std	Z+2, r26	; 0x02
    145e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1460:	fe 01       	movw	r30, r28
    1462:	e8 59       	subi	r30, 0x98	; 152
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    147a:	88 23       	and	r24, r24
    147c:	44 f4       	brge	.+16     	; 0x148e <lcd_init+0x19a>
		__ticks = 1;
    147e:	fe 01       	movw	r30, r28
    1480:	ea 59       	subi	r30, 0x9A	; 154
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
    148c:	64 c0       	rjmp	.+200    	; 0x1556 <lcd_init+0x262>
	else if (__tmp > 65535)
    148e:	fe 01       	movw	r30, r28
    1490:	e8 59       	subi	r30, 0x98	; 152
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <lcd_init+0x1ba>
    14ac:	43 c0       	rjmp	.+134    	; 0x1534 <lcd_init+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	fe 01       	movw	r30, r28
    14b0:	e4 59       	subi	r30, 0x94	; 148
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8e 01       	movw	r16, r28
    14ce:	0a 59       	subi	r16, 0x9A	; 154
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <lcd_init+0x230>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ec 59       	subi	r30, 0x9C	; 156
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	88 ec       	ldi	r24, 0xC8	; 200
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f4:	fe 01       	movw	r30, r28
    14f6:	ec 59       	subi	r30, 0x9C	; 156
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <lcd_init+0x20a>
    1502:	fe 01       	movw	r30, r28
    1504:	ec 59       	subi	r30, 0x9C	; 156
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	de 01       	movw	r26, r28
    150e:	aa 59       	subi	r26, 0x9A	; 154
    1510:	bf 4f       	sbci	r27, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	ea 59       	subi	r30, 0x9A	; 154
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	9c 93       	st	X, r25
    1522:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	fe 01       	movw	r30, r28
    1526:	ea 59       	subi	r30, 0x9A	; 154
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	d1 f6       	brne	.-76     	; 0x14e6 <lcd_init+0x1f2>
    1532:	4b c0       	rjmp	.+150    	; 0x15ca <lcd_init+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	8e 01       	movw	r16, r28
    1536:	0a 59       	subi	r16, 0x9A	; 154
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e8 59       	subi	r30, 0x98	; 152
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	de 01       	movw	r26, r28
    1558:	ae 59       	subi	r26, 0x9E	; 158
    155a:	bf 4f       	sbci	r27, 0xFF	; 255
    155c:	fe 01       	movw	r30, r28
    155e:	ea 59       	subi	r30, 0x9A	; 154
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	9c 93       	st	X, r25
    156a:	8e 93       	st	-X, r24
    156c:	fe 01       	movw	r30, r28
    156e:	ee 59       	subi	r30, 0x9E	; 158
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <lcd_init+0x282>
    157a:	fe 01       	movw	r30, r28
    157c:	ee 59       	subi	r30, 0x9E	; 158
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <lcd_init+0x2d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1586:	8e 01       	movw	r16, r28
    1588:	00 59       	subi	r16, 0x90	; 144
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	ef 58       	subi	r30, 0x8F	; 143
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	de 01       	movw	r26, r28
    15a8:	af 59       	subi	r26, 0x9F	; 159
    15aa:	bf 4f       	sbci	r27, 0xFF	; 255
    15ac:	fe 01       	movw	r30, r28
    15ae:	e0 59       	subi	r30, 0x90	; 144
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	80 81       	ld	r24, Z
    15b4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 59       	subi	r30, 0x9F	; 159
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	8a 95       	dec	r24
    15c0:	f1 f7       	brne	.-4      	; 0x15be <lcd_init+0x2ca>
    15c2:	fe 01       	movw	r30, r28
    15c4:	ef 59       	subi	r30, 0x9F	; 159
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 83       	st	Z, r24
     _delay_us(16000);        /* wait 16ms or more after power-on       */
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    15ca:	a8 e2       	ldi	r26, 0x28	; 40
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e8 e2       	ldi	r30, 0x28	; 40
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	84 60       	ori	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    15d8:	a8 e2       	ldi	r26, 0x28	; 40
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e2       	ldi	r30, 0x28	; 40
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 60       	ori	r24, 0x08	; 8
    15e4:	8c 93       	st	X, r24
    lcd_e_toggle();
    15e6:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
    15ea:	fe 01       	movw	r30, r28
    15ec:	e3 5a       	subi	r30, 0xA3	; 163
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	ac e9       	ldi	r26, 0x9C	; 156
    15f6:	b5 e4       	ldi	r27, 0x45	; 69
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1600:	8e 01       	movw	r16, r28
    1602:	07 5a       	subi	r16, 0xA7	; 167
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	e3 5a       	subi	r30, 0xA3	; 163
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	2b ea       	ldi	r18, 0xAB	; 171
    1616:	3a ea       	ldi	r19, 0xAA	; 170
    1618:	4a e2       	ldi	r20, 0x2A	; 42
    161a:	50 e4       	ldi	r21, 0x40	; 64
    161c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5a       	subi	r30, 0xA7	; 167
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1648:	88 23       	and	r24, r24
    164a:	34 f4       	brge	.+12     	; 0x1658 <lcd_init+0x364>
		__ticks = 1;
    164c:	fe 01       	movw	r30, r28
    164e:	e8 5a       	subi	r30, 0xA8	; 168
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 83       	st	Z, r24
    1656:	e0 c0       	rjmp	.+448    	; 0x1818 <lcd_init+0x524>
	else if (__tmp > 255)
    1658:	fe 01       	movw	r30, r28
    165a:	e7 5a       	subi	r30, 0xA7	; 167
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	53 e4       	ldi	r21, 0x43	; 67
    166e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <lcd_init+0x384>
    1676:	c0 c0       	rjmp	.+384    	; 0x17f8 <lcd_init+0x504>
	{
		_delay_ms(__us / 1000.0);
    1678:	fe 01       	movw	r30, r28
    167a:	e3 5a       	subi	r30, 0xA3	; 163
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	fe 01       	movw	r30, r28
    1698:	ec 5a       	subi	r30, 0xAC	; 172
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 83       	st	Z, r24
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	a2 83       	std	Z+2, r26	; 0x02
    16a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	8e 01       	movw	r16, r28
    16a6:	00 5b       	subi	r16, 0xB0	; 176
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	ec 5a       	subi	r30, 0xAC	; 172
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a ef       	ldi	r20, 0xFA	; 250
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	f8 01       	movw	r30, r16
    16ca:	80 83       	st	Z, r24
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	a2 83       	std	Z+2, r26	; 0x02
    16d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d2:	fe 01       	movw	r30, r28
    16d4:	e0 5b       	subi	r30, 0xB0	; 176
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	44 f4       	brge	.+16     	; 0x1700 <lcd_init+0x40c>
		__ticks = 1;
    16f0:	fe 01       	movw	r30, r28
    16f2:	e2 5b       	subi	r30, 0xB2	; 178
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
    16fe:	64 c0       	rjmp	.+200    	; 0x17c8 <lcd_init+0x4d4>
	else if (__tmp > 65535)
    1700:	fe 01       	movw	r30, r28
    1702:	e0 5b       	subi	r30, 0xB0	; 176
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    171a:	18 16       	cp	r1, r24
    171c:	0c f0       	brlt	.+2      	; 0x1720 <lcd_init+0x42c>
    171e:	43 c0       	rjmp	.+134    	; 0x17a6 <lcd_init+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1720:	fe 01       	movw	r30, r28
    1722:	ec 5a       	subi	r30, 0xAC	; 172
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8e 01       	movw	r16, r28
    1740:	02 5b       	subi	r16, 0xB2	; 178
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	f8 01       	movw	r30, r16
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	80 83       	st	Z, r24
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <lcd_init+0x4a2>
    1758:	fe 01       	movw	r30, r28
    175a:	e4 5b       	subi	r30, 0xB4	; 180
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1766:	fe 01       	movw	r30, r28
    1768:	e4 5b       	subi	r30, 0xB4	; 180
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <lcd_init+0x47c>
    1774:	fe 01       	movw	r30, r28
    1776:	e4 5b       	subi	r30, 0xB4	; 180
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	de 01       	movw	r26, r28
    1780:	a2 5b       	subi	r26, 0xB2	; 178
    1782:	bf 4f       	sbci	r27, 0xFF	; 255
    1784:	fe 01       	movw	r30, r28
    1786:	e2 5b       	subi	r30, 0xB2	; 178
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	9c 93       	st	X, r25
    1794:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	fe 01       	movw	r30, r28
    1798:	e2 5b       	subi	r30, 0xB2	; 178
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	d1 f6       	brne	.-76     	; 0x1758 <lcd_init+0x464>
    17a4:	4b c0       	rjmp	.+150    	; 0x183c <lcd_init+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a6:	8e 01       	movw	r16, r28
    17a8:	02 5b       	subi	r16, 0xB2	; 178
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
    17ac:	fe 01       	movw	r30, r28
    17ae:	e0 5b       	subi	r30, 0xB0	; 176
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	f8 01       	movw	r30, r16
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	de 01       	movw	r26, r28
    17ca:	a6 5b       	subi	r26, 0xB6	; 182
    17cc:	bf 4f       	sbci	r27, 0xFF	; 255
    17ce:	fe 01       	movw	r30, r28
    17d0:	e2 5b       	subi	r30, 0xB2	; 178
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	11 96       	adiw	r26, 0x01	; 1
    17da:	9c 93       	st	X, r25
    17dc:	8e 93       	st	-X, r24
    17de:	fe 01       	movw	r30, r28
    17e0:	e6 5b       	subi	r30, 0xB6	; 182
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <lcd_init+0x4f4>
    17ec:	fe 01       	movw	r30, r28
    17ee:	e6 5b       	subi	r30, 0xB6	; 182
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
    17f6:	22 c0       	rjmp	.+68     	; 0x183c <lcd_init+0x548>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17f8:	8e 01       	movw	r16, r28
    17fa:	08 5a       	subi	r16, 0xA8	; 168
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	fe 01       	movw	r30, r28
    1800:	e7 5a       	subi	r30, 0xA7	; 167
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	80 83       	st	Z, r24
    1818:	de 01       	movw	r26, r28
    181a:	a7 5b       	subi	r26, 0xB7	; 183
    181c:	bf 4f       	sbci	r27, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	e8 5a       	subi	r30, 0xA8	; 168
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5b       	subi	r30, 0xB7	; 183
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	8a 95       	dec	r24
    1832:	f1 f7       	brne	.-4      	; 0x1830 <lcd_init+0x53c>
    1834:	fe 01       	movw	r30, r28
    1836:	e7 5b       	subi	r30, 0xB7	; 183
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 83       	st	Z, r24
     _delay_us(4992);         /* delay, busy flag can't be checked here */
    /* repeat last command */ 
    lcd_e_toggle();      
    183c:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
    1840:	fe 01       	movw	r30, r28
    1842:	eb 5b       	subi	r30, 0xBB	; 187
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e8       	ldi	r26, 0x80	; 128
    184c:	b2 e4       	ldi	r27, 0x42	; 66
    184e:	80 83       	st	Z, r24
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	a2 83       	std	Z+2, r26	; 0x02
    1854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1856:	8e 01       	movw	r16, r28
    1858:	0f 5b       	subi	r16, 0xBF	; 191
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	eb 5b       	subi	r30, 0xBB	; 187
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	2b ea       	ldi	r18, 0xAB	; 171
    186c:	3a ea       	ldi	r19, 0xAA	; 170
    186e:	4a e2       	ldi	r20, 0x2A	; 42
    1870:	50 e4       	ldi	r21, 0x40	; 64
    1872:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	f8 01       	movw	r30, r16
    187c:	80 83       	st	Z, r24
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	a2 83       	std	Z+2, r26	; 0x02
    1882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1884:	fe 01       	movw	r30, r28
    1886:	ef 5b       	subi	r30, 0xBF	; 191
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    189e:	88 23       	and	r24, r24
    18a0:	34 f4       	brge	.+12     	; 0x18ae <lcd_init+0x5ba>
		__ticks = 1;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	fe 01       	movw	r30, r28
    18a6:	e0 5c       	subi	r30, 0xC0	; 192
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 83       	st	Z, r24
    18ac:	9d c0       	rjmp	.+314    	; 0x19e8 <lcd_init+0x6f4>
	else if (__tmp > 255)
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 5b       	subi	r30, 0xBF	; 191
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	53 e4       	ldi	r21, 0x43	; 67
    18c4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	0c f0       	brlt	.+2      	; 0x18ce <lcd_init+0x5da>
    18cc:	7e c0       	rjmp	.+252    	; 0x19ca <lcd_init+0x6d6>
	{
		_delay_ms(__us / 1000.0);
    18ce:	fe 01       	movw	r30, r28
    18d0:	eb 5b       	subi	r30, 0xBB	; 187
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	82 81       	ldd	r24, Z+2	; 0x02
    18da:	93 81       	ldd	r25, Z+3	; 0x03
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a e7       	ldi	r20, 0x7A	; 122
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8c af       	std	Y+60, r24	; 0x3c
    18ee:	9d af       	std	Y+61, r25	; 0x3d
    18f0:	ae af       	std	Y+62, r26	; 0x3e
    18f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    18f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    18f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a ef       	ldi	r20, 0xFA	; 250
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	88 af       	std	Y+56, r24	; 0x38
    190e:	99 af       	std	Y+57, r25	; 0x39
    1910:	aa af       	std	Y+58, r26	; 0x3a
    1912:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1914:	68 ad       	ldd	r22, Y+56	; 0x38
    1916:	79 ad       	ldd	r23, Y+57	; 0x39
    1918:	8a ad       	ldd	r24, Y+58	; 0x3a
    191a:	9b ad       	ldd	r25, Y+59	; 0x3b
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <lcd_init+0x642>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9f ab       	std	Y+55, r25	; 0x37
    1932:	8e ab       	std	Y+54, r24	; 0x36
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <lcd_init+0x6c0>
	else if (__tmp > 65535)
    1936:	68 ad       	ldd	r22, Y+56	; 0x38
    1938:	79 ad       	ldd	r23, Y+57	; 0x39
    193a:	8a ad       	ldd	r24, Y+58	; 0x3a
    193c:	9b ad       	ldd	r25, Y+59	; 0x3b
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <lcd_init+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1950:	7d ad       	ldd	r23, Y+61	; 0x3d
    1952:	8e ad       	ldd	r24, Y+62	; 0x3e
    1954:	9f ad       	ldd	r25, Y+63	; 0x3f
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9f ab       	std	Y+55, r25	; 0x37
    1974:	8e ab       	std	Y+54, r24	; 0x36
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <lcd_init+0x6a2>
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9d ab       	std	Y+53, r25	; 0x35
    197e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1980:	8c a9       	ldd	r24, Y+52	; 0x34
    1982:	9d a9       	ldd	r25, Y+53	; 0x35
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <lcd_init+0x690>
    1988:	9d ab       	std	Y+53, r25	; 0x35
    198a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8e a9       	ldd	r24, Y+54	; 0x36
    198e:	9f a9       	ldd	r25, Y+55	; 0x37
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9f ab       	std	Y+55, r25	; 0x37
    1994:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8e a9       	ldd	r24, Y+54	; 0x36
    1998:	9f a9       	ldd	r25, Y+55	; 0x37
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <lcd_init+0x684>
    199e:	2d c0       	rjmp	.+90     	; 0x19fa <lcd_init+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	68 ad       	ldd	r22, Y+56	; 0x38
    19a2:	79 ad       	ldd	r23, Y+57	; 0x39
    19a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    19a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    19a8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9f ab       	std	Y+55, r25	; 0x37
    19b2:	8e ab       	std	Y+54, r24	; 0x36
    19b4:	8e a9       	ldd	r24, Y+54	; 0x36
    19b6:	9f a9       	ldd	r25, Y+55	; 0x37
    19b8:	9b ab       	std	Y+51, r25	; 0x33
    19ba:	8a ab       	std	Y+50, r24	; 0x32
    19bc:	8a a9       	ldd	r24, Y+50	; 0x32
    19be:	9b a9       	ldd	r25, Y+51	; 0x33
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <lcd_init+0x6cc>
    19c4:	9b ab       	std	Y+51, r25	; 0x33
    19c6:	8a ab       	std	Y+50, r24	; 0x32
    19c8:	18 c0       	rjmp	.+48     	; 0x19fa <lcd_init+0x706>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ca:	fe 01       	movw	r30, r28
    19cc:	ef 5b       	subi	r30, 0xBF	; 191
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	fe 01       	movw	r30, r28
    19e2:	e0 5c       	subi	r30, 0xC0	; 192
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 83       	st	Z, r24
    19e8:	fe 01       	movw	r30, r28
    19ea:	e0 5c       	subi	r30, 0xC0	; 192
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19f2:	89 a9       	ldd	r24, Y+49	; 0x31
    19f4:	8a 95       	dec	r24
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <lcd_init+0x700>
    19f8:	89 ab       	std	Y+49, r24	; 0x31
     _delay_us(64);           /* delay, busy flag can't be checked here */
    /* repeat last command a third time */
    lcd_e_toggle();      
    19fa:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 e8       	ldi	r26, 0x80	; 128
    1a04:	b2 e4       	ldi	r27, 0x42	; 66
    1a06:	8d a7       	std	Y+45, r24	; 0x2d
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	af a7       	std	Y+47, r26	; 0x2f
    1a0c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a10:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	98 a9       	ldd	r25, Y+48	; 0x30
    1a16:	2b ea       	ldi	r18, 0xAB	; 171
    1a18:	3a ea       	ldi	r19, 0xAA	; 170
    1a1a:	4a e2       	ldi	r20, 0x2A	; 42
    1a1c:	50 e4       	ldi	r21, 0x40	; 64
    1a1e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a2e:	69 a5       	ldd	r22, Y+41	; 0x29
    1a30:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	1c f4       	brge	.+6      	; 0x1a4c <lcd_init+0x758>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	88 a7       	std	Y+40, r24	; 0x28
    1a4a:	91 c0       	rjmp	.+290    	; 0x1b6e <lcd_init+0x87a>
	else if (__tmp > 255)
    1a4c:	69 a5       	ldd	r22, Y+41	; 0x29
    1a4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	53 e4       	ldi	r21, 0x43	; 67
    1a5c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <lcd_init+0x772>
    1a64:	7b c0       	rjmp	.+246    	; 0x1b5c <lcd_init+0x868>
	{
		_delay_ms(__us / 1000.0);
    1a66:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a68:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a e7       	ldi	r20, 0x7A	; 122
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8c a3       	std	Y+36, r24	; 0x24
    1a80:	9d a3       	std	Y+37, r25	; 0x25
    1a82:	ae a3       	std	Y+38, r26	; 0x26
    1a84:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6c a1       	ldd	r22, Y+36	; 0x24
    1a88:	7d a1       	ldd	r23, Y+37	; 0x25
    1a8a:	8e a1       	ldd	r24, Y+38	; 0x26
    1a8c:	9f a1       	ldd	r25, Y+39	; 0x27
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	88 a3       	std	Y+32, r24	; 0x20
    1aa0:	99 a3       	std	Y+33, r25	; 0x21
    1aa2:	aa a3       	std	Y+34, r26	; 0x22
    1aa4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1aa6:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa8:	79 a1       	ldd	r23, Y+33	; 0x21
    1aaa:	8a a1       	ldd	r24, Y+34	; 0x22
    1aac:	9b a1       	ldd	r25, Y+35	; 0x23
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <lcd_init+0x7d4>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ac4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <lcd_init+0x852>
	else if (__tmp > 65535)
    1ac8:	68 a1       	ldd	r22, Y+32	; 0x20
    1aca:	79 a1       	ldd	r23, Y+33	; 0x21
    1acc:	8a a1       	ldd	r24, Y+34	; 0x22
    1ace:	9b a1       	ldd	r25, Y+35	; 0x23
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <lcd_init+0x83e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6c a1       	ldd	r22, Y+36	; 0x24
    1ae2:	7d a1       	ldd	r23, Y+37	; 0x25
    1ae4:	8e a1       	ldd	r24, Y+38	; 0x26
    1ae6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9f 8f       	std	Y+31, r25	; 0x1f
    1b06:	8e 8f       	std	Y+30, r24	; 0x1e
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <lcd_init+0x834>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9d 8f       	std	Y+29, r25	; 0x1d
    1b10:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <lcd_init+0x822>
    1b1a:	9d 8f       	std	Y+29, r25	; 0x1d
    1b1c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9f 8f       	std	Y+31, r25	; 0x1f
    1b26:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <lcd_init+0x816>
    1b30:	24 c0       	rjmp	.+72     	; 0x1b7a <lcd_init+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	68 a1       	ldd	r22, Y+32	; 0x20
    1b34:	79 a1       	ldd	r23, Y+33	; 0x21
    1b36:	8a a1       	ldd	r24, Y+34	; 0x22
    1b38:	9b a1       	ldd	r25, Y+35	; 0x23
    1b3a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9f 8f       	std	Y+31, r25	; 0x1f
    1b44:	8e 8f       	std	Y+30, r24	; 0x1e
    1b46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b4a:	9b 8f       	std	Y+27, r25	; 0x1b
    1b4c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <lcd_init+0x85e>
    1b56:	9b 8f       	std	Y+27, r25	; 0x1b
    1b58:	8a 8f       	std	Y+26, r24	; 0x1a
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <lcd_init+0x886>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b5c:	69 a5       	ldd	r22, Y+41	; 0x29
    1b5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b64:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	88 a7       	std	Y+40, r24	; 0x28
    1b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b70:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b72:	89 8d       	ldd	r24, Y+25	; 0x19
    1b74:	8a 95       	dec	r24
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <lcd_init+0x880>
    1b78:	89 8f       	std	Y+25, r24	; 0x19
     _delay_us(64);           /* delay, busy flag can't be checked here */
    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1b7a:	a8 e2       	ldi	r26, 0x28	; 40
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e8 e2       	ldi	r30, 0x28	; 40
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	87 7f       	andi	r24, 0xF7	; 247
    1b86:	8c 93       	st	X, r24
    lcd_e_toggle();
    1b88:	0e 94 28 06 	call	0xc50	; 0xc50 <toggle_e>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	b2 e4       	ldi	r27, 0x42	; 66
    1b94:	8d 8b       	std	Y+21, r24	; 0x15
    1b96:	9e 8b       	std	Y+22, r25	; 0x16
    1b98:	af 8b       	std	Y+23, r26	; 0x17
    1b9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	2b ea       	ldi	r18, 0xAB	; 171
    1ba6:	3a ea       	ldi	r19, 0xAA	; 170
    1ba8:	4a e2       	ldi	r20, 0x2A	; 42
    1baa:	50 e4       	ldi	r21, 0x40	; 64
    1bac:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	89 8b       	std	Y+17, r24	; 0x11
    1bb6:	9a 8b       	std	Y+18, r25	; 0x12
    1bb8:	ab 8b       	std	Y+19, r26	; 0x13
    1bba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1bbc:	69 89       	ldd	r22, Y+17	; 0x11
    1bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	1c f4       	brge	.+6      	; 0x1bda <lcd_init+0x8e6>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	88 8b       	std	Y+16, r24	; 0x10
    1bd8:	91 c0       	rjmp	.+290    	; 0x1cfc <lcd_init+0xa08>
	else if (__tmp > 255)
    1bda:	69 89       	ldd	r22, Y+17	; 0x11
    1bdc:	7a 89       	ldd	r23, Y+18	; 0x12
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	53 e4       	ldi	r21, 0x43	; 67
    1bea:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	0c f0       	brlt	.+2      	; 0x1bf4 <lcd_init+0x900>
    1bf2:	7b c0       	rjmp	.+246    	; 0x1cea <lcd_init+0x9f6>
	{
		_delay_ms(__us / 1000.0);
    1bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a e7       	ldi	r20, 0x7A	; 122
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8c 87       	std	Y+12, r24	; 0x0c
    1c0e:	9d 87       	std	Y+13, r25	; 0x0d
    1c10:	ae 87       	std	Y+14, r26	; 0x0e
    1c12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c16:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	88 87       	std	Y+8, r24	; 0x08
    1c2e:	99 87       	std	Y+9, r25	; 0x09
    1c30:	aa 87       	std	Y+10, r26	; 0x0a
    1c32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c34:	68 85       	ldd	r22, Y+8	; 0x08
    1c36:	79 85       	ldd	r23, Y+9	; 0x09
    1c38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__cmpsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <lcd_init+0x962>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9f 83       	std	Y+7, r25	; 0x07
    1c52:	8e 83       	std	Y+6, r24	; 0x06
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <lcd_init+0x9e0>
	else if (__tmp > 65535)
    1c56:	68 85       	ldd	r22, Y+8	; 0x08
    1c58:	79 85       	ldd	r23, Y+9	; 0x09
    1c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__gesf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	4c f5       	brge	.+82     	; 0x1cc0 <lcd_init+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c70:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9f 83       	std	Y+7, r25	; 0x07
    1c94:	8e 83       	std	Y+6, r24	; 0x06
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <lcd_init+0x9c2>
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9d 83       	std	Y+5, r25	; 0x05
    1c9e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <lcd_init+0x9b0>
    1ca8:	9d 83       	std	Y+5, r25	; 0x05
    1caa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	8e 81       	ldd	r24, Y+6	; 0x06
    1cae:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	9f 83       	std	Y+7, r25	; 0x07
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <lcd_init+0x9a4>
    1cbe:	24 c0       	rjmp	.+72     	; 0x1d08 <lcd_init+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	68 85       	ldd	r22, Y+8	; 0x08
    1cc2:	79 85       	ldd	r23, Y+9	; 0x09
    1cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cc8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9f 83       	std	Y+7, r25	; 0x07
    1cd2:	8e 83       	std	Y+6, r24	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	9b 83       	std	Y+3, r25	; 0x03
    1cda:	8a 83       	std	Y+2, r24	; 0x02
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <lcd_init+0x9ec>
    1ce4:	9b 83       	std	Y+3, r25	; 0x03
    1ce6:	8a 83       	std	Y+2, r24	; 0x02
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <lcd_init+0xa14>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cea:	69 89       	ldd	r22, Y+17	; 0x11
    1cec:	7a 89       	ldd	r23, Y+18	; 0x12
    1cee:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	88 8b       	std	Y+16, r24	; 0x10
    1cfc:	88 89       	ldd	r24, Y+16	; 0x10
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	8a 95       	dec	r24
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <lcd_init+0xa0e>
    1d06:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
     _delay_us(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
     _delay_us(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1d08:	88 e2       	ldi	r24, 0x28	; 40
    1d0a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1d0e:	88 e0       	ldi	r24, 0x08	; 8
    1d10:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    1d14:	0e 94 10 09 	call	0x1220	; 0x1220 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1d18:	86 e0       	ldi	r24, 0x06	; 6
    1d1a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 58       	subi	r30, 0x87	; 135
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	0e 94 dd 08 	call	0x11ba	; 0x11ba <lcd_command>
};//end lcd_init()
    1d2a:	c7 58       	subi	r28, 0x87	; 135
    1d2c:	df 4f       	sbci	r29, 0xFF	; 255
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <__cmpsf2>:
    1d42:	97 d0       	rcall	.+302    	; 0x1e72 <__fp_cmp>
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <__cmpsf2+0x6>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	08 95       	ret

00001d4a <__divsf3>:
    1d4a:	0c d0       	rcall	.+24     	; 0x1d64 <__divsf3x>
    1d4c:	cd c0       	rjmp	.+410    	; 0x1ee8 <__fp_round>
    1d4e:	c5 d0       	rcall	.+394    	; 0x1eda <__fp_pscB>
    1d50:	40 f0       	brcs	.+16     	; 0x1d62 <__divsf3+0x18>
    1d52:	bc d0       	rcall	.+376    	; 0x1ecc <__fp_pscA>
    1d54:	30 f0       	brcs	.+12     	; 0x1d62 <__divsf3+0x18>
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <__divsf3+0x16>
    1d58:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <__divsf3+0x18>
    1d5c:	ae c0       	rjmp	.+348    	; 0x1eba <__fp_inf>
    1d5e:	51 11       	cpse	r21, r1
    1d60:	f7 c0       	rjmp	.+494    	; 0x1f50 <__fp_szero>
    1d62:	b1 c0       	rjmp	.+354    	; 0x1ec6 <__fp_nan>

00001d64 <__divsf3x>:
    1d64:	d2 d0       	rcall	.+420    	; 0x1f0a <__fp_split3>
    1d66:	98 f3       	brcs	.-26     	; 0x1d4e <__divsf3+0x4>

00001d68 <__divsf3_pse>:
    1d68:	99 23       	and	r25, r25
    1d6a:	c9 f3       	breq	.-14     	; 0x1d5e <__divsf3+0x14>
    1d6c:	55 23       	and	r21, r21
    1d6e:	b1 f3       	breq	.-20     	; 0x1d5c <__divsf3+0x12>
    1d70:	95 1b       	sub	r25, r21
    1d72:	55 0b       	sbc	r21, r21
    1d74:	bb 27       	eor	r27, r27
    1d76:	aa 27       	eor	r26, r26
    1d78:	62 17       	cp	r22, r18
    1d7a:	73 07       	cpc	r23, r19
    1d7c:	84 07       	cpc	r24, r20
    1d7e:	38 f0       	brcs	.+14     	; 0x1d8e <__divsf3_pse+0x26>
    1d80:	9f 5f       	subi	r25, 0xFF	; 255
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	22 0f       	add	r18, r18
    1d86:	33 1f       	adc	r19, r19
    1d88:	44 1f       	adc	r20, r20
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	a9 f3       	breq	.-22     	; 0x1d78 <__divsf3_pse+0x10>
    1d8e:	33 d0       	rcall	.+102    	; 0x1df6 <__divsf3_pse+0x8e>
    1d90:	0e 2e       	mov	r0, r30
    1d92:	3a f0       	brmi	.+14     	; 0x1da2 <__divsf3_pse+0x3a>
    1d94:	e0 e8       	ldi	r30, 0x80	; 128
    1d96:	30 d0       	rcall	.+96     	; 0x1df8 <__divsf3_pse+0x90>
    1d98:	91 50       	subi	r25, 0x01	; 1
    1d9a:	50 40       	sbci	r21, 0x00	; 0
    1d9c:	e6 95       	lsr	r30
    1d9e:	00 1c       	adc	r0, r0
    1da0:	ca f7       	brpl	.-14     	; 0x1d94 <__divsf3_pse+0x2c>
    1da2:	29 d0       	rcall	.+82     	; 0x1df6 <__divsf3_pse+0x8e>
    1da4:	fe 2f       	mov	r31, r30
    1da6:	27 d0       	rcall	.+78     	; 0x1df6 <__divsf3_pse+0x8e>
    1da8:	66 0f       	add	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	bb 1f       	adc	r27, r27
    1db0:	26 17       	cp	r18, r22
    1db2:	37 07       	cpc	r19, r23
    1db4:	48 07       	cpc	r20, r24
    1db6:	ab 07       	cpc	r26, r27
    1db8:	b0 e8       	ldi	r27, 0x80	; 128
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <__divsf3_pse+0x56>
    1dbc:	bb 0b       	sbc	r27, r27
    1dbe:	80 2d       	mov	r24, r0
    1dc0:	bf 01       	movw	r22, r30
    1dc2:	ff 27       	eor	r31, r31
    1dc4:	93 58       	subi	r25, 0x83	; 131
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	2a f0       	brmi	.+10     	; 0x1dd4 <__divsf3_pse+0x6c>
    1dca:	9e 3f       	cpi	r25, 0xFE	; 254
    1dcc:	51 05       	cpc	r21, r1
    1dce:	68 f0       	brcs	.+26     	; 0x1dea <__divsf3_pse+0x82>
    1dd0:	74 c0       	rjmp	.+232    	; 0x1eba <__fp_inf>
    1dd2:	be c0       	rjmp	.+380    	; 0x1f50 <__fp_szero>
    1dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd6:	ec f3       	brlt	.-6      	; 0x1dd2 <__divsf3_pse+0x6a>
    1dd8:	98 3e       	cpi	r25, 0xE8	; 232
    1dda:	dc f3       	brlt	.-10     	; 0x1dd2 <__divsf3_pse+0x6a>
    1ddc:	86 95       	lsr	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	b7 95       	ror	r27
    1de4:	f7 95       	ror	r31
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__divsf3_pse+0x74>
    1dea:	88 0f       	add	r24, r24
    1dec:	91 1d       	adc	r25, r1
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	97 f9       	bld	r25, 7
    1df4:	08 95       	ret
    1df6:	e1 e0       	ldi	r30, 0x01	; 1
    1df8:	66 0f       	add	r22, r22
    1dfa:	77 1f       	adc	r23, r23
    1dfc:	88 1f       	adc	r24, r24
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	62 17       	cp	r22, r18
    1e02:	73 07       	cpc	r23, r19
    1e04:	84 07       	cpc	r24, r20
    1e06:	ba 07       	cpc	r27, r26
    1e08:	20 f0       	brcs	.+8      	; 0x1e12 <__divsf3_pse+0xaa>
    1e0a:	62 1b       	sub	r22, r18
    1e0c:	73 0b       	sbc	r23, r19
    1e0e:	84 0b       	sbc	r24, r20
    1e10:	ba 0b       	sbc	r27, r26
    1e12:	ee 1f       	adc	r30, r30
    1e14:	88 f7       	brcc	.-30     	; 0x1df8 <__divsf3_pse+0x90>
    1e16:	e0 95       	com	r30
    1e18:	08 95       	ret

00001e1a <__fixunssfsi>:
    1e1a:	7f d0       	rcall	.+254    	; 0x1f1a <__fp_splitA>
    1e1c:	88 f0       	brcs	.+34     	; 0x1e40 <__fixunssfsi+0x26>
    1e1e:	9f 57       	subi	r25, 0x7F	; 127
    1e20:	90 f0       	brcs	.+36     	; 0x1e46 <__fixunssfsi+0x2c>
    1e22:	b9 2f       	mov	r27, r25
    1e24:	99 27       	eor	r25, r25
    1e26:	b7 51       	subi	r27, 0x17	; 23
    1e28:	a0 f0       	brcs	.+40     	; 0x1e52 <__fixunssfsi+0x38>
    1e2a:	d1 f0       	breq	.+52     	; 0x1e60 <__fixunssfsi+0x46>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	1a f0       	brmi	.+6      	; 0x1e3c <__fixunssfsi+0x22>
    1e36:	ba 95       	dec	r27
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__fixunssfsi+0x12>
    1e3a:	12 c0       	rjmp	.+36     	; 0x1e60 <__fixunssfsi+0x46>
    1e3c:	b1 30       	cpi	r27, 0x01	; 1
    1e3e:	81 f0       	breq	.+32     	; 0x1e60 <__fixunssfsi+0x46>
    1e40:	86 d0       	rcall	.+268    	; 0x1f4e <__fp_zero>
    1e42:	b1 e0       	ldi	r27, 0x01	; 1
    1e44:	08 95       	ret
    1e46:	83 c0       	rjmp	.+262    	; 0x1f4e <__fp_zero>
    1e48:	67 2f       	mov	r22, r23
    1e4a:	78 2f       	mov	r23, r24
    1e4c:	88 27       	eor	r24, r24
    1e4e:	b8 5f       	subi	r27, 0xF8	; 248
    1e50:	39 f0       	breq	.+14     	; 0x1e60 <__fixunssfsi+0x46>
    1e52:	b9 3f       	cpi	r27, 0xF9	; 249
    1e54:	cc f3       	brlt	.-14     	; 0x1e48 <__fixunssfsi+0x2e>
    1e56:	86 95       	lsr	r24
    1e58:	77 95       	ror	r23
    1e5a:	67 95       	ror	r22
    1e5c:	b3 95       	inc	r27
    1e5e:	d9 f7       	brne	.-10     	; 0x1e56 <__fixunssfsi+0x3c>
    1e60:	3e f4       	brtc	.+14     	; 0x1e70 <__fixunssfsi+0x56>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	08 95       	ret

00001e72 <__fp_cmp>:
    1e72:	99 0f       	add	r25, r25
    1e74:	00 08       	sbc	r0, r0
    1e76:	55 0f       	add	r21, r21
    1e78:	aa 0b       	sbc	r26, r26
    1e7a:	e0 e8       	ldi	r30, 0x80	; 128
    1e7c:	fe ef       	ldi	r31, 0xFE	; 254
    1e7e:	16 16       	cp	r1, r22
    1e80:	17 06       	cpc	r1, r23
    1e82:	e8 07       	cpc	r30, r24
    1e84:	f9 07       	cpc	r31, r25
    1e86:	c0 f0       	brcs	.+48     	; 0x1eb8 <__fp_cmp+0x46>
    1e88:	12 16       	cp	r1, r18
    1e8a:	13 06       	cpc	r1, r19
    1e8c:	e4 07       	cpc	r30, r20
    1e8e:	f5 07       	cpc	r31, r21
    1e90:	98 f0       	brcs	.+38     	; 0x1eb8 <__fp_cmp+0x46>
    1e92:	62 1b       	sub	r22, r18
    1e94:	73 0b       	sbc	r23, r19
    1e96:	84 0b       	sbc	r24, r20
    1e98:	95 0b       	sbc	r25, r21
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <__fp_cmp+0x38>
    1e9c:	0a 26       	eor	r0, r26
    1e9e:	61 f0       	breq	.+24     	; 0x1eb8 <__fp_cmp+0x46>
    1ea0:	23 2b       	or	r18, r19
    1ea2:	24 2b       	or	r18, r20
    1ea4:	25 2b       	or	r18, r21
    1ea6:	21 f4       	brne	.+8      	; 0x1eb0 <__fp_cmp+0x3e>
    1ea8:	08 95       	ret
    1eaa:	0a 26       	eor	r0, r26
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <__fp_cmp+0x3e>
    1eae:	a1 40       	sbci	r26, 0x01	; 1
    1eb0:	a6 95       	lsr	r26
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	81 1d       	adc	r24, r1
    1eb6:	81 1d       	adc	r24, r1
    1eb8:	08 95       	ret

00001eba <__fp_inf>:
    1eba:	97 f9       	bld	r25, 7
    1ebc:	9f 67       	ori	r25, 0x7F	; 127
    1ebe:	80 e8       	ldi	r24, 0x80	; 128
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	08 95       	ret

00001ec6 <__fp_nan>:
    1ec6:	9f ef       	ldi	r25, 0xFF	; 255
    1ec8:	80 ec       	ldi	r24, 0xC0	; 192
    1eca:	08 95       	ret

00001ecc <__fp_pscA>:
    1ecc:	00 24       	eor	r0, r0
    1ece:	0a 94       	dec	r0
    1ed0:	16 16       	cp	r1, r22
    1ed2:	17 06       	cpc	r1, r23
    1ed4:	18 06       	cpc	r1, r24
    1ed6:	09 06       	cpc	r0, r25
    1ed8:	08 95       	ret

00001eda <__fp_pscB>:
    1eda:	00 24       	eor	r0, r0
    1edc:	0a 94       	dec	r0
    1ede:	12 16       	cp	r1, r18
    1ee0:	13 06       	cpc	r1, r19
    1ee2:	14 06       	cpc	r1, r20
    1ee4:	05 06       	cpc	r0, r21
    1ee6:	08 95       	ret

00001ee8 <__fp_round>:
    1ee8:	09 2e       	mov	r0, r25
    1eea:	03 94       	inc	r0
    1eec:	00 0c       	add	r0, r0
    1eee:	11 f4       	brne	.+4      	; 0x1ef4 <__fp_round+0xc>
    1ef0:	88 23       	and	r24, r24
    1ef2:	52 f0       	brmi	.+20     	; 0x1f08 <__fp_round+0x20>
    1ef4:	bb 0f       	add	r27, r27
    1ef6:	40 f4       	brcc	.+16     	; 0x1f08 <__fp_round+0x20>
    1ef8:	bf 2b       	or	r27, r31
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <__fp_round+0x18>
    1efc:	60 ff       	sbrs	r22, 0
    1efe:	04 c0       	rjmp	.+8      	; 0x1f08 <__fp_round+0x20>
    1f00:	6f 5f       	subi	r22, 0xFF	; 255
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	8f 4f       	sbci	r24, 0xFF	; 255
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	08 95       	ret

00001f0a <__fp_split3>:
    1f0a:	57 fd       	sbrc	r21, 7
    1f0c:	90 58       	subi	r25, 0x80	; 128
    1f0e:	44 0f       	add	r20, r20
    1f10:	55 1f       	adc	r21, r21
    1f12:	59 f0       	breq	.+22     	; 0x1f2a <__fp_splitA+0x10>
    1f14:	5f 3f       	cpi	r21, 0xFF	; 255
    1f16:	71 f0       	breq	.+28     	; 0x1f34 <__fp_splitA+0x1a>
    1f18:	47 95       	ror	r20

00001f1a <__fp_splitA>:
    1f1a:	88 0f       	add	r24, r24
    1f1c:	97 fb       	bst	r25, 7
    1f1e:	99 1f       	adc	r25, r25
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <__fp_splitA+0x20>
    1f22:	9f 3f       	cpi	r25, 0xFF	; 255
    1f24:	79 f0       	breq	.+30     	; 0x1f44 <__fp_splitA+0x2a>
    1f26:	87 95       	ror	r24
    1f28:	08 95       	ret
    1f2a:	12 16       	cp	r1, r18
    1f2c:	13 06       	cpc	r1, r19
    1f2e:	14 06       	cpc	r1, r20
    1f30:	55 1f       	adc	r21, r21
    1f32:	f2 cf       	rjmp	.-28     	; 0x1f18 <__fp_split3+0xe>
    1f34:	46 95       	lsr	r20
    1f36:	f1 df       	rcall	.-30     	; 0x1f1a <__fp_splitA>
    1f38:	08 c0       	rjmp	.+16     	; 0x1f4a <__fp_splitA+0x30>
    1f3a:	16 16       	cp	r1, r22
    1f3c:	17 06       	cpc	r1, r23
    1f3e:	18 06       	cpc	r1, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	f1 cf       	rjmp	.-30     	; 0x1f26 <__fp_splitA+0xc>
    1f44:	86 95       	lsr	r24
    1f46:	71 05       	cpc	r23, r1
    1f48:	61 05       	cpc	r22, r1
    1f4a:	08 94       	sec
    1f4c:	08 95       	ret

00001f4e <__fp_zero>:
    1f4e:	e8 94       	clt

00001f50 <__fp_szero>:
    1f50:	bb 27       	eor	r27, r27
    1f52:	66 27       	eor	r22, r22
    1f54:	77 27       	eor	r23, r23
    1f56:	cb 01       	movw	r24, r22
    1f58:	97 f9       	bld	r25, 7
    1f5a:	08 95       	ret

00001f5c <__gesf2>:
    1f5c:	8a df       	rcall	.-236    	; 0x1e72 <__fp_cmp>
    1f5e:	08 f4       	brcc	.+2      	; 0x1f62 <__gesf2+0x6>
    1f60:	8f ef       	ldi	r24, 0xFF	; 255
    1f62:	08 95       	ret

00001f64 <__mulsf3>:
    1f64:	0b d0       	rcall	.+22     	; 0x1f7c <__mulsf3x>
    1f66:	c0 cf       	rjmp	.-128    	; 0x1ee8 <__fp_round>
    1f68:	b1 df       	rcall	.-158    	; 0x1ecc <__fp_pscA>
    1f6a:	28 f0       	brcs	.+10     	; 0x1f76 <__mulsf3+0x12>
    1f6c:	b6 df       	rcall	.-148    	; 0x1eda <__fp_pscB>
    1f6e:	18 f0       	brcs	.+6      	; 0x1f76 <__mulsf3+0x12>
    1f70:	95 23       	and	r25, r21
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__mulsf3+0x12>
    1f74:	a2 cf       	rjmp	.-188    	; 0x1eba <__fp_inf>
    1f76:	a7 cf       	rjmp	.-178    	; 0x1ec6 <__fp_nan>
    1f78:	11 24       	eor	r1, r1
    1f7a:	ea cf       	rjmp	.-44     	; 0x1f50 <__fp_szero>

00001f7c <__mulsf3x>:
    1f7c:	c6 df       	rcall	.-116    	; 0x1f0a <__fp_split3>
    1f7e:	a0 f3       	brcs	.-24     	; 0x1f68 <__mulsf3+0x4>

00001f80 <__mulsf3_pse>:
    1f80:	95 9f       	mul	r25, r21
    1f82:	d1 f3       	breq	.-12     	; 0x1f78 <__mulsf3+0x14>
    1f84:	95 0f       	add	r25, r21
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	55 1f       	adc	r21, r21
    1f8a:	62 9f       	mul	r22, r18
    1f8c:	f0 01       	movw	r30, r0
    1f8e:	72 9f       	mul	r23, r18
    1f90:	bb 27       	eor	r27, r27
    1f92:	f0 0d       	add	r31, r0
    1f94:	b1 1d       	adc	r27, r1
    1f96:	63 9f       	mul	r22, r19
    1f98:	aa 27       	eor	r26, r26
    1f9a:	f0 0d       	add	r31, r0
    1f9c:	b1 1d       	adc	r27, r1
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	64 9f       	mul	r22, r20
    1fa2:	66 27       	eor	r22, r22
    1fa4:	b0 0d       	add	r27, r0
    1fa6:	a1 1d       	adc	r26, r1
    1fa8:	66 1f       	adc	r22, r22
    1faa:	82 9f       	mul	r24, r18
    1fac:	22 27       	eor	r18, r18
    1fae:	b0 0d       	add	r27, r0
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	62 1f       	adc	r22, r18
    1fb4:	73 9f       	mul	r23, r19
    1fb6:	b0 0d       	add	r27, r0
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	62 1f       	adc	r22, r18
    1fbc:	83 9f       	mul	r24, r19
    1fbe:	a0 0d       	add	r26, r0
    1fc0:	61 1d       	adc	r22, r1
    1fc2:	22 1f       	adc	r18, r18
    1fc4:	74 9f       	mul	r23, r20
    1fc6:	33 27       	eor	r19, r19
    1fc8:	a0 0d       	add	r26, r0
    1fca:	61 1d       	adc	r22, r1
    1fcc:	23 1f       	adc	r18, r19
    1fce:	84 9f       	mul	r24, r20
    1fd0:	60 0d       	add	r22, r0
    1fd2:	21 1d       	adc	r18, r1
    1fd4:	82 2f       	mov	r24, r18
    1fd6:	76 2f       	mov	r23, r22
    1fd8:	6a 2f       	mov	r22, r26
    1fda:	11 24       	eor	r1, r1
    1fdc:	9f 57       	subi	r25, 0x7F	; 127
    1fde:	50 40       	sbci	r21, 0x00	; 0
    1fe0:	8a f0       	brmi	.+34     	; 0x2004 <__mulsf3_pse+0x84>
    1fe2:	e1 f0       	breq	.+56     	; 0x201c <__mulsf3_pse+0x9c>
    1fe4:	88 23       	and	r24, r24
    1fe6:	4a f0       	brmi	.+18     	; 0x1ffa <__mulsf3_pse+0x7a>
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	bb 1f       	adc	r27, r27
    1fee:	66 1f       	adc	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	91 50       	subi	r25, 0x01	; 1
    1ff6:	50 40       	sbci	r21, 0x00	; 0
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__mulsf3_pse+0x64>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	70 f0       	brcs	.+28     	; 0x201c <__mulsf3_pse+0x9c>
    2000:	5c cf       	rjmp	.-328    	; 0x1eba <__fp_inf>
    2002:	a6 cf       	rjmp	.-180    	; 0x1f50 <__fp_szero>
    2004:	5f 3f       	cpi	r21, 0xFF	; 255
    2006:	ec f3       	brlt	.-6      	; 0x2002 <__mulsf3_pse+0x82>
    2008:	98 3e       	cpi	r25, 0xE8	; 232
    200a:	dc f3       	brlt	.-10     	; 0x2002 <__mulsf3_pse+0x82>
    200c:	86 95       	lsr	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b7 95       	ror	r27
    2014:	f7 95       	ror	r31
    2016:	e7 95       	ror	r30
    2018:	9f 5f       	subi	r25, 0xFF	; 255
    201a:	c1 f7       	brne	.-16     	; 0x200c <__mulsf3_pse+0x8c>
    201c:	fe 2b       	or	r31, r30
    201e:	88 0f       	add	r24, r24
    2020:	91 1d       	adc	r25, r1
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret

0000202a <itoa>:
    202a:	fb 01       	movw	r30, r22
    202c:	9f 01       	movw	r18, r30
    202e:	e8 94       	clt
    2030:	42 30       	cpi	r20, 0x02	; 2
    2032:	c4 f0       	brlt	.+48     	; 0x2064 <itoa+0x3a>
    2034:	45 32       	cpi	r20, 0x25	; 37
    2036:	b4 f4       	brge	.+44     	; 0x2064 <itoa+0x3a>
    2038:	4a 30       	cpi	r20, 0x0A	; 10
    203a:	29 f4       	brne	.+10     	; 0x2046 <itoa+0x1c>
    203c:	97 fb       	bst	r25, 7
    203e:	1e f4       	brtc	.+6      	; 0x2046 <itoa+0x1c>
    2040:	90 95       	com	r25
    2042:	81 95       	neg	r24
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	64 2f       	mov	r22, r20
    2048:	77 27       	eor	r23, r23
    204a:	0e 94 46 10 	call	0x208c	; 0x208c <__udivmodhi4>
    204e:	80 5d       	subi	r24, 0xD0	; 208
    2050:	8a 33       	cpi	r24, 0x3A	; 58
    2052:	0c f0       	brlt	.+2      	; 0x2056 <itoa+0x2c>
    2054:	89 5d       	subi	r24, 0xD9	; 217
    2056:	81 93       	st	Z+, r24
    2058:	cb 01       	movw	r24, r22
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	a1 f7       	brne	.-24     	; 0x2046 <itoa+0x1c>
    205e:	16 f4       	brtc	.+4      	; 0x2064 <itoa+0x3a>
    2060:	5d e2       	ldi	r21, 0x2D	; 45
    2062:	51 93       	st	Z+, r21
    2064:	10 82       	st	Z, r1
    2066:	c9 01       	movw	r24, r18
    2068:	0c 94 36 10 	jmp	0x206c	; 0x206c <strrev>

0000206c <strrev>:
    206c:	dc 01       	movw	r26, r24
    206e:	fc 01       	movw	r30, r24
    2070:	67 2f       	mov	r22, r23
    2072:	71 91       	ld	r23, Z+
    2074:	77 23       	and	r23, r23
    2076:	e1 f7       	brne	.-8      	; 0x2070 <strrev+0x4>
    2078:	32 97       	sbiw	r30, 0x02	; 2
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <strrev+0x18>
    207c:	7c 91       	ld	r23, X
    207e:	6d 93       	st	X+, r22
    2080:	70 83       	st	Z, r23
    2082:	62 91       	ld	r22, -Z
    2084:	ae 17       	cp	r26, r30
    2086:	bf 07       	cpc	r27, r31
    2088:	c8 f3       	brcs	.-14     	; 0x207c <strrev+0x10>
    208a:	08 95       	ret

0000208c <__udivmodhi4>:
    208c:	aa 1b       	sub	r26, r26
    208e:	bb 1b       	sub	r27, r27
    2090:	51 e1       	ldi	r21, 0x11	; 17
    2092:	07 c0       	rjmp	.+14     	; 0x20a2 <__udivmodhi4_ep>

00002094 <__udivmodhi4_loop>:
    2094:	aa 1f       	adc	r26, r26
    2096:	bb 1f       	adc	r27, r27
    2098:	a6 17       	cp	r26, r22
    209a:	b7 07       	cpc	r27, r23
    209c:	10 f0       	brcs	.+4      	; 0x20a2 <__udivmodhi4_ep>
    209e:	a6 1b       	sub	r26, r22
    20a0:	b7 0b       	sbc	r27, r23

000020a2 <__udivmodhi4_ep>:
    20a2:	88 1f       	adc	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	5a 95       	dec	r21
    20a8:	a9 f7       	brne	.-22     	; 0x2094 <__udivmodhi4_loop>
    20aa:	80 95       	com	r24
    20ac:	90 95       	com	r25
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	08 95       	ret

000020b4 <_exit>:
    20b4:	f8 94       	cli

000020b6 <__stop_program>:
    20b6:	ff cf       	rjmp	.-2      	; 0x20b6 <__stop_program>
