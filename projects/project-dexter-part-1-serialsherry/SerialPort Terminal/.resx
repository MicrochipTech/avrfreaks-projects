<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtSendData.Text" xml:space="preserve">
    <value>        
.NET Framework Developer's Guide 	
How to: Read Text from a File 	
See Also Example	

 Language Filter: All Language Filter: Multiple Language Filter: Visual Basic Language Filter: C# Language Filter: C++ Language Filter: J# Language Filter: JScript 	
 Visual Basic (Declaration) 
 Visual Basic (Usage) 
 C# 
 C++ 
 J# 
 JScript 
The following code examples show how to read text from a text file. The second example notifies you when the end of the file is detected. This functionality can also be achieved by using the ReadAll or ReadAllText methods.
Example
Visual Basic 	 Copy Code	
Imports System Imports System.IO  Class Test     Public Shared Sub Main()         Try             ' Create an instance of StreamReader to read from a file.             Using sr As StreamReader = New StreamReader("TestFile.txt")                 Dim line As String                 ' Read and display the lines from the file until the end                  ' of the file is reached.                 Do                     line = sr.ReadLine()                     Console.WriteLine(Line)                 Loop Until line Is Nothing                 sr.Close()             End Using         Catch E As Exception             ' Let the user know what went wrong.             Console.WriteLine("The file could not be read:")             Console.WriteLine(E.Message)         End Try     End Sub End Class 		

C# 	 Copy Code	
using System; using System.IO;  class Test  {     public static void Main()      {         try          {             // Create an instance of StreamReader to read from a file.             // The using statement also closes the StreamReader.             using (StreamReader sr = new StreamReader("TestFile.txt"))              {                 String line;                 // Read and display lines from the file until the end of                  // the file is reached.                 while ((line = sr.ReadLine()) != null)                  {                     Console.WriteLine(line);                 }             }         }         catch (Exception e)          {             // Let the user know what went wrong.             Console.WriteLine("The file could not be read:");             Console.WriteLine(e.Message);         }     } }		

Visual Basic 	 Copy Code	
Option Explicit On  Option Strict On Imports System Imports System.IO Public Class TextFromFile     Private Const FILE_NAME As String = "MyFile.txt"     Public Shared Sub Main()         If Not File.Exists(FILE_NAME) Then             Console.WriteLine("{0} does not exist.", FILE_NAME)             Return         End If         Using sr As StreamReader = File.OpenText(FILE_NAME)             Dim input As String             input = sr.ReadLine()             While Not input Is Nothing                 Console.WriteLine(input)                 input = sr.ReadLine()             End While             Console.WriteLine("The end of the stream has been reached.")             sr.Close()         End Using     End Sub End Class 		

C# 	 Copy Code	
using System; using System.IO; public class TextFromFile  {     private const string FILE_NAME = "MyFile.txt";     public static void Main(String[] args)      {         if (!File.Exists(FILE_NAME))          {             Console.WriteLine("{0} does not exist.", FILE_NAME);             return;         }         using (StreamReader sr = File.OpenText(FILE_NAME))         {             String input;             while ((input=sr.ReadLine())!=null)              {                 Console.WriteLine(input);             }             Console.WriteLine ("The end of the stream has been reached.");             sr.Close();         }     }		
Robust Programming
This code creates a StreamReader that points to MyFile.txt through a call to File.OpenText. StreamReader.ReadLine returns each line as a string. When there are no more characters to read, a message is displayed to that effect, and the stream is closed.
 Note 	
Visual Basic users may choose to use the methods and properties provided by the My.Computer.FileSystem object for file I/O. For more information, see My.Computer.FileSystem Object.	
See Also
Tasks
How to: Create a Directory Listing &lt;4d2772b1-b991-4532-a8a6-6ef733277e69.htm&gt;
How to: Read and Write to a Newly Created Data File &lt;e209d949-31e8-44ea-8e38-87f9093f3093.htm&gt;
How to: Open and Append to a Log File &lt;74423362-1721-49cb-aa0a-e04005f72a06.htm&gt;
How to: Write Text to a File &lt;060cbe06-2adf-4337-9e7b-961a5c840208.htm&gt;
How to: Read Characters from a String &lt;27ea5e52-6db8-42d8-980a-50bcfc7fd270.htm&gt;
How to: Write Characters to a String &lt;1222cbeb-0760-44bf-9888-914a2a37174b.htm&gt;
Reference
StreamReader
File.OpenText
StreamReader.ReadLine
Concepts
Basic File I/O &lt;64280df8-f0c2-4449-a6e1-43d457a41d28.htm&gt;

 To make a suggestion or report a bug about Help or another feature of this product, go to the feedback site &lt;http://go.microsoft.com/fwlink/?LinkId=50040&gt;. 
</value>
  </data>
  <metadata name="worker.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAQAAAAAADoAgAAJgAAABAQEAAAAAAAKAEAAA4DAAAoAAAAIAAAAEAAAAABAAQAAAAAAIAC
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAICAgADAwMAAAAD/AAD/
        AAAA//8A/wAAAP8A/wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAcAAAAABwAAAA
        AAAAAAAAAHAAAAAAcAAAAAAAAAAAAAB3AAAAAHAAAAAAAAAAAAAABwAAAABwAAB3d3AAAAB3Bwd3cAAA
        cAAAAAAHAAAAAAAAAHcAAHAAAAAAAHAACP////8HAABwAHAAAABwAAiIiIiPBwAAcABwAAAAcAAIiIiI
        jwcAAHAAcAAAAHcACIiIiI8HAABwAHAAAAAHcAiIiIiPBwAAcABwAACPgHAIiIiIjwcAAHAAcAAA+PBw
        CIiIiI8HAAB3AHcAAI+AcAiIiIiPBwAABwAHAAD48HAIiIiIiAAABwcHB3AAj4BwAAAAAAAAAAAAAAB3
        APjwcAAHBwcHAAj/////BwCPgHAAAAAAAAAIiIiIjwcA+PBwAABwAHAACIiIiI8HAI+AcAAAcABwAAiI
        iIiPBwD48AAAAHAAcAAIiIiIjwcAAAAAAABwAHAACIiIiI8HAABwAAAAcABwAAiIiIiPBwAAcAAAAHAA
        cAAIiIiIjwcAAAcAAAAAAHAACIiIiIgAAAAAd3cAAABwAAAAAAAAAAAAAAAAAAAAcAAAAAcHAAAAAAAA
        AAAAAHAAAAAAAAAAAAAAAAAAAABwAAAAAHAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAAAA//////f/
        /9/n//+f5///j+f//w/nwfwB54L4AOd9cADmfnAA5n5wAOZ+MADmfBAA5ngQAOZ4EADiOBAAwDgQAcAY
        GAOACBwDAAgcRwAIHmcACB5nAAg+ZwAMfmcADn5nAA5+ZwAOvucAH0HngD+D5/D//+fx///n+f//5/v/
        /+8oAAAAEAAAACAAAAABAAQAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAgAAAAICAAIAA
        AACAAIAAgIAAAICAgADAwMAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////AABwAAAAAAAAAHAAAAAA
        cAAAcAdwAAdwdwBwAAcAAAAAAHBwAHAPiIAAcHAABw+IgABwcAgHD4iAAHBwDwcP//AAAAAIBwAAAA+I
        gA8HAHBwD4iACAcAcHAPiIAAcABwcA//8AB3cHBwAAAAAAAHAHAABwAAAAAAcAAHAAAAAABwn/sAAJ/z
        AACZ4AAAkMAAAIZAAACGAAAAhAAAAIAAAAAAAQAAACEAAAAhAAACYQAAAgEAAAMJAADP+QAAz/kAAA==
</value>
  </data>
</root>