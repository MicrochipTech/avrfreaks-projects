
WS2812_Drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00002cd8  00002d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800132  00800132  00002d9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000634a  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d90  00000000  00000000  000094ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f52  00000000  00000000  0000a23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000df8  00000000  00000000  0000b190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000134e  00000000  00000000  0000bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004960  00000000  00000000  0000d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00011c36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 01 	jmp	0x382	; 0x382 <__dtors_end>
       4:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
       8:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      10:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      14:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      18:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      1c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      20:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      24:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      28:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      2c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      30:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      34:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      38:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_14>
      3c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      40:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      44:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      48:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      4c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      50:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      54:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      58:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      5c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      60:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      64:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
	...
      8e:	20 20       	and	r2, r0
      90:	20 20       	and	r2, r0
      92:	20 00       	.word	0x0020	; ????
      94:	20 00       	.word	0x0020	; ????
      96:	50 50       	subi	r21, 0x00	; 0
      98:	50 00       	.word	0x0050	; ????
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	50 50       	subi	r21, 0x00	; 0
      a0:	f8 50       	subi	r31, 0x08	; 8
      a2:	f8 50       	subi	r31, 0x08	; 8
      a4:	50 00       	.word	0x0050	; ????
      a6:	20 78       	andi	r18, 0x80	; 128
      a8:	a0 70       	andi	r26, 0x00	; 0
      aa:	28 f0       	brcs	.+10     	; 0xb6 <__trampolines_end+0x30>
      ac:	20 00       	.word	0x0020	; ????
      ae:	c0 c8       	rjmp	.-3712   	; 0xfffff230 <__eeprom_end+0xff7ef230>
      b0:	10 20       	and	r1, r0
      b2:	40 98       	cbi	0x08, 0	; 8
      b4:	18 00       	.word	0x0018	; ????
      b6:	40 a0       	ldd	r4, Z+32	; 0x20
      b8:	40 a8       	ldd	r4, Z+48	; 0x30
      ba:	90 98       	cbi	0x12, 0	; 18
      bc:	60 00       	.word	0x0060	; ????
      be:	10 20       	and	r1, r0
      c0:	40 00       	.word	0x0040	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	10 20       	and	r1, r0
      c8:	40 40       	sbci	r20, 0x00	; 0
      ca:	40 20       	and	r4, r0
      cc:	10 00       	.word	0x0010	; ????
      ce:	40 20       	and	r4, r0
      d0:	10 10       	cpse	r1, r0
      d2:	10 20       	and	r1, r0
      d4:	40 00       	.word	0x0040	; ????
      d6:	20 a8       	ldd	r2, Z+48	; 0x30
      d8:	70 20       	and	r7, r0
      da:	70 a8       	ldd	r7, Z+48	; 0x30
      dc:	20 00       	.word	0x0020	; ????
      de:	00 20       	and	r0, r0
      e0:	20 f8       	bld	r2, 0
      e2:	20 20       	and	r2, r0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 20       	and	r0, r0
      ec:	20 40       	sbci	r18, 0x00	; 0
      ee:	00 00       	nop
      f0:	00 78       	andi	r16, 0x80	; 128
	...
      fa:	00 60       	ori	r16, 0x00	; 0
      fc:	60 00       	.word	0x0060	; ????
      fe:	00 00       	nop
     100:	08 10       	cpse	r0, r8
     102:	20 40       	sbci	r18, 0x00	; 0
     104:	80 00       	.word	0x0080	; ????
     106:	70 88       	ldd	r7, Z+16	; 0x10
     108:	98 a8       	ldd	r9, Y+48	; 0x30
     10a:	c8 88       	ldd	r12, Y+16	; 0x10
     10c:	70 00       	.word	0x0070	; ????
     10e:	20 60       	ori	r18, 0x00	; 0
     110:	a0 20       	and	r10, r0
     112:	20 20       	and	r2, r0
     114:	f8 00       	.word	0x00f8	; ????
     116:	70 88       	ldd	r7, Z+16	; 0x10
     118:	08 10       	cpse	r0, r8
     11a:	60 80       	ld	r6, Z
     11c:	f8 00       	.word	0x00f8	; ????
     11e:	70 88       	ldd	r7, Z+16	; 0x10
     120:	08 30       	cpi	r16, 0x08	; 8
     122:	08 88       	ldd	r0, Y+16	; 0x10
     124:	70 00       	.word	0x0070	; ????
     126:	10 30       	cpi	r17, 0x00	; 0
     128:	50 90 f8 10 	lds	r5, 0x10F8
     12c:	10 00       	.word	0x0010	; ????
     12e:	f8 80       	ld	r15, Y
     130:	e0 10       	cpse	r14, r0
     132:	08 10       	cpse	r0, r8
     134:	e0 00       	.word	0x00e0	; ????
     136:	30 40       	sbci	r19, 0x00	; 0
     138:	80 f0       	brcs	.+32     	; 0x15a <__trampolines_end+0xd4>
     13a:	88 88       	ldd	r8, Y+16	; 0x10
     13c:	70 00       	.word	0x0070	; ????
     13e:	f8 88       	ldd	r15, Y+16	; 0x10
     140:	10 20       	and	r1, r0
     142:	20 20       	and	r2, r0
     144:	20 00       	.word	0x0020	; ????
     146:	70 88       	ldd	r7, Z+16	; 0x10
     148:	88 70       	andi	r24, 0x08	; 8
     14a:	88 88       	ldd	r8, Y+16	; 0x10
     14c:	70 00       	.word	0x0070	; ????
     14e:	70 88       	ldd	r7, Z+16	; 0x10
     150:	88 78       	andi	r24, 0x88	; 136
     152:	08 10       	cpse	r0, r8
     154:	60 00       	.word	0x0060	; ????
     156:	00 00       	nop
     158:	20 00       	.word	0x0020	; ????
     15a:	00 20       	and	r0, r0
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	20 00       	.word	0x0020	; ????
     162:	00 20       	and	r0, r0
     164:	20 40       	sbci	r18, 0x00	; 0
     166:	18 30       	cpi	r17, 0x08	; 8
     168:	60 c0       	rjmp	.+192    	; 0x22a <__trampolines_end+0x1a4>
     16a:	60 30       	cpi	r22, 0x00	; 0
     16c:	18 00       	.word	0x0018	; ????
     16e:	00 00       	nop
     170:	f8 00       	.word	0x00f8	; ????
     172:	f8 00       	.word	0x00f8	; ????
     174:	00 00       	nop
     176:	c0 60       	ori	r28, 0x00	; 0
     178:	30 18       	sub	r3, r0
     17a:	30 60       	ori	r19, 0x00	; 0
     17c:	c0 00       	.word	0x00c0	; ????
     17e:	70 88       	ldd	r7, Z+16	; 0x10
     180:	08 10       	cpse	r0, r8
     182:	20 00       	.word	0x0020	; ????
     184:	20 00       	.word	0x0020	; ????
     186:	70 88       	ldd	r7, Z+16	; 0x10
     188:	08 48       	sbci	r16, 0x88	; 136
     18a:	a8 a8       	ldd	r10, Y+48	; 0x30
     18c:	70 00       	.word	0x0070	; ????
     18e:	20 50       	subi	r18, 0x00	; 0
     190:	88 88       	ldd	r8, Y+16	; 0x10
     192:	f8 88       	ldd	r15, Y+16	; 0x10
     194:	88 00       	.word	0x0088	; ????
     196:	f0 48       	sbci	r31, 0x80	; 128
     198:	48 70       	andi	r20, 0x08	; 8
     19a:	48 48       	sbci	r20, 0x88	; 136
     19c:	f0 00       	.word	0x00f0	; ????
     19e:	30 48       	sbci	r19, 0x80	; 128
     1a0:	80 80       	ld	r8, Z
     1a2:	80 48       	sbci	r24, 0x80	; 128
     1a4:	30 00       	.word	0x0030	; ????
     1a6:	e0 50       	subi	r30, 0x00	; 0
     1a8:	48 48       	sbci	r20, 0x88	; 136
     1aa:	48 50       	subi	r20, 0x08	; 8
     1ac:	e0 00       	.word	0x00e0	; ????
     1ae:	f8 80       	ld	r15, Y
     1b0:	80 f0       	brcs	.+32     	; 0x1d2 <__trampolines_end+0x14c>
     1b2:	80 80       	ld	r8, Z
     1b4:	f8 00       	.word	0x00f8	; ????
     1b6:	f8 80       	ld	r15, Y
     1b8:	80 f0       	brcs	.+32     	; 0x1da <__trampolines_end+0x154>
     1ba:	80 80       	ld	r8, Z
     1bc:	80 00       	.word	0x0080	; ????
     1be:	70 88       	ldd	r7, Z+16	; 0x10
     1c0:	80 b8       	out	0x00, r8	; 0
     1c2:	88 88       	ldd	r8, Y+16	; 0x10
     1c4:	70 00       	.word	0x0070	; ????
     1c6:	88 88       	ldd	r8, Y+16	; 0x10
     1c8:	88 f8       	.word	0xf888	; ????
     1ca:	88 88       	ldd	r8, Y+16	; 0x10
     1cc:	88 00       	.word	0x0088	; ????
     1ce:	70 20       	and	r7, r0
     1d0:	20 20       	and	r2, r0
     1d2:	20 20       	and	r2, r0
     1d4:	70 00       	.word	0x0070	; ????
     1d6:	38 10       	cpse	r3, r8
     1d8:	10 10       	cpse	r1, r0
     1da:	90 90 60 00 	lds	r9, 0x0060
     1de:	88 90       	.word	0x9088	; ????
     1e0:	a0 c0       	rjmp	.+320    	; 0x322 <__trampolines_end+0x29c>
     1e2:	a0 90 88 00 	lds	r10, 0x0088
     1e6:	80 80       	ld	r8, Z
     1e8:	80 80       	ld	r8, Z
     1ea:	80 80       	ld	r8, Z
     1ec:	f8 00       	.word	0x00f8	; ????
     1ee:	88 d8       	rcall	.-3824   	; 0xfffff300 <__eeprom_end+0xff7ef300>
     1f0:	a8 a8       	ldd	r10, Y+48	; 0x30
     1f2:	88 88       	ldd	r8, Y+16	; 0x10
     1f4:	88 00       	.word	0x0088	; ????
     1f6:	88 c8       	rjmp	.-3824   	; 0xfffff308 <__eeprom_end+0xff7ef308>
     1f8:	c8 a8       	ldd	r12, Y+48	; 0x30
     1fa:	98 98       	cbi	0x13, 0	; 19
     1fc:	88 00       	.word	0x0088	; ????
     1fe:	70 88       	ldd	r7, Z+16	; 0x10
     200:	88 88       	ldd	r8, Y+16	; 0x10
     202:	88 88       	ldd	r8, Y+16	; 0x10
     204:	70 00       	.word	0x0070	; ????
     206:	f0 88       	ldd	r15, Z+16	; 0x10
     208:	88 f0       	brcs	.+34     	; 0x22c <__trampolines_end+0x1a6>
     20a:	80 80       	ld	r8, Z
     20c:	80 00       	.word	0x0080	; ????
     20e:	70 88       	ldd	r7, Z+16	; 0x10
     210:	88 88       	ldd	r8, Y+16	; 0x10
     212:	a8 90       	.word	0x90a8	; ????
     214:	68 00       	.word	0x0068	; ????
     216:	f0 88       	ldd	r15, Z+16	; 0x10
     218:	88 f0       	brcs	.+34     	; 0x23c <__trampolines_end+0x1b6>
     21a:	a0 90 88 00 	lds	r10, 0x0088
     21e:	70 88       	ldd	r7, Z+16	; 0x10
     220:	80 70       	andi	r24, 0x00	; 0
     222:	08 88       	ldd	r0, Y+16	; 0x10
     224:	70 00       	.word	0x0070	; ????
     226:	f8 20       	and	r15, r8
     228:	20 20       	and	r2, r0
     22a:	20 20       	and	r2, r0
     22c:	20 00       	.word	0x0020	; ????
     22e:	88 88       	ldd	r8, Y+16	; 0x10
     230:	88 88       	ldd	r8, Y+16	; 0x10
     232:	88 88       	ldd	r8, Y+16	; 0x10
     234:	70 00       	.word	0x0070	; ????
     236:	88 88       	ldd	r8, Y+16	; 0x10
     238:	88 88       	ldd	r8, Y+16	; 0x10
     23a:	50 50       	subi	r21, 0x00	; 0
     23c:	20 00       	.word	0x0020	; ????
     23e:	88 88       	ldd	r8, Y+16	; 0x10
     240:	88 a8       	ldd	r8, Y+48	; 0x30
     242:	a8 d8       	rcall	.-3760   	; 0xfffff394 <__eeprom_end+0xff7ef394>
     244:	88 00       	.word	0x0088	; ????
     246:	88 88       	ldd	r8, Y+16	; 0x10
     248:	50 20       	and	r5, r0
     24a:	50 88       	ldd	r5, Z+16	; 0x10
     24c:	88 00       	.word	0x0088	; ????
     24e:	88 88       	ldd	r8, Y+16	; 0x10
     250:	88 70       	andi	r24, 0x08	; 8
     252:	20 20       	and	r2, r0
     254:	20 00       	.word	0x0020	; ????
     256:	f8 08       	sbc	r15, r8
     258:	10 20       	and	r1, r0
     25a:	40 80       	ld	r4, Z
     25c:	f8 00       	.word	0x00f8	; ????
     25e:	70 40       	sbci	r23, 0x00	; 0
     260:	40 40       	sbci	r20, 0x00	; 0
     262:	40 40       	sbci	r20, 0x00	; 0
     264:	70 00       	.word	0x0070	; ????
     266:	00 00       	nop
     268:	80 40       	sbci	r24, 0x00	; 0
     26a:	20 10       	cpse	r2, r0
     26c:	08 00       	.word	0x0008	; ????
     26e:	70 10       	cpse	r7, r0
     270:	10 10       	cpse	r1, r0
     272:	10 10       	cpse	r1, r0
     274:	70 00       	.word	0x0070	; ????
     276:	20 50       	subi	r18, 0x00	; 0
     278:	88 00       	.word	0x0088	; ????
	...
     282:	00 00       	nop
     284:	f8 00       	.word	0x00f8	; ????
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	20 00       	.word	0x0020	; ????
     28a:	00 00       	nop
     28c:	00 00       	nop
     28e:	00 00       	nop
     290:	70 08       	sbc	r7, r0
     292:	78 88       	ldd	r7, Y+16	; 0x10
     294:	78 00       	.word	0x0078	; ????
     296:	80 80       	ld	r8, Z
     298:	b0 c8       	rjmp	.-3744   	; 0xfffff3fa <__eeprom_end+0xff7ef3fa>
     29a:	88 c8       	rjmp	.-3824   	; 0xfffff3ac <__eeprom_end+0xff7ef3ac>
     29c:	b0 00       	.word	0x00b0	; ????
     29e:	00 00       	nop
     2a0:	70 88       	ldd	r7, Z+16	; 0x10
     2a2:	80 88       	ldd	r8, Z+16	; 0x10
     2a4:	70 00       	.word	0x0070	; ????
     2a6:	08 08       	sbc	r0, r8
     2a8:	68 98       	cbi	0x0d, 0	; 13
     2aa:	88 98       	cbi	0x11, 0	; 17
     2ac:	68 00       	.word	0x0068	; ????
     2ae:	00 00       	nop
     2b0:	70 88       	ldd	r7, Z+16	; 0x10
     2b2:	f8 80       	ld	r15, Y
     2b4:	70 00       	.word	0x0070	; ????
     2b6:	10 28       	or	r1, r0
     2b8:	20 f8       	bld	r2, 0
     2ba:	20 20       	and	r2, r0
     2bc:	20 00       	.word	0x0020	; ????
     2be:	00 00       	nop
     2c0:	68 98       	cbi	0x0d, 0	; 13
     2c2:	98 68       	ori	r25, 0x88	; 136
     2c4:	08 70       	andi	r16, 0x08	; 8
     2c6:	80 80       	ld	r8, Z
     2c8:	f0 88       	ldd	r15, Z+16	; 0x10
     2ca:	88 88       	ldd	r8, Y+16	; 0x10
     2cc:	88 00       	.word	0x0088	; ????
     2ce:	20 00       	.word	0x0020	; ????
     2d0:	60 20       	and	r6, r0
     2d2:	20 20       	and	r2, r0
     2d4:	70 00       	.word	0x0070	; ????
     2d6:	10 00       	.word	0x0010	; ????
     2d8:	30 10       	cpse	r3, r0
     2da:	10 10       	cpse	r1, r0
     2dc:	90 60       	ori	r25, 0x00	; 0
     2de:	40 40       	sbci	r20, 0x00	; 0
     2e0:	48 50       	subi	r20, 0x08	; 8
     2e2:	60 50       	subi	r22, 0x00	; 0
     2e4:	48 00       	.word	0x0048	; ????
     2e6:	60 20       	and	r6, r0
     2e8:	20 20       	and	r2, r0
     2ea:	20 20       	and	r2, r0
     2ec:	70 00       	.word	0x0070	; ????
     2ee:	00 00       	nop
     2f0:	d0 a8       	ldd	r13, Z+48	; 0x30
     2f2:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f4:	a8 00       	.word	0x00a8	; ????
     2f6:	00 00       	nop
     2f8:	b0 c8       	rjmp	.-3744   	; 0xfffff45a <__eeprom_end+0xff7ef45a>
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	88 00       	.word	0x0088	; ????
     2fe:	00 00       	nop
     300:	70 88       	ldd	r7, Z+16	; 0x10
     302:	88 88       	ldd	r8, Y+16	; 0x10
     304:	70 00       	.word	0x0070	; ????
     306:	00 00       	nop
     308:	b0 c8       	rjmp	.-3744   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
     30a:	c8 b0       	in	r12, 0x08	; 8
     30c:	80 80       	ld	r8, Z
     30e:	00 00       	nop
     310:	68 98       	cbi	0x0d, 0	; 13
     312:	98 68       	ori	r25, 0x88	; 136
     314:	08 08       	sbc	r0, r8
     316:	00 00       	nop
     318:	b0 c8       	rjmp	.-3744   	; 0xfffff47a <__eeprom_end+0xff7ef47a>
     31a:	80 80       	ld	r8, Z
     31c:	80 00       	.word	0x0080	; ????
     31e:	00 00       	nop
     320:	78 80       	ld	r7, Y
     322:	70 08       	sbc	r7, r0
     324:	f0 00       	.word	0x00f0	; ????
     326:	40 40       	sbci	r20, 0x00	; 0
     328:	f0 40       	sbci	r31, 0x00	; 0
     32a:	40 48       	sbci	r20, 0x80	; 128
     32c:	30 00       	.word	0x0030	; ????
     32e:	00 00       	nop
     330:	90 90 90 90 	lds	r9, 0x9090
     334:	68 00       	.word	0x0068	; ????
     336:	00 00       	nop
     338:	88 88       	ldd	r8, Y+16	; 0x10
     33a:	88 50       	subi	r24, 0x08	; 8
     33c:	20 00       	.word	0x0020	; ????
     33e:	00 00       	nop
     340:	88 a8       	ldd	r8, Y+48	; 0x30
     342:	a8 a8       	ldd	r10, Y+48	; 0x30
     344:	50 00       	.word	0x0050	; ????
     346:	00 00       	nop
     348:	88 50       	subi	r24, 0x08	; 8
     34a:	20 50       	subi	r18, 0x00	; 0
     34c:	88 00       	.word	0x0088	; ????
     34e:	00 00       	nop
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	98 68       	ori	r25, 0x88	; 136
     354:	08 70       	andi	r16, 0x08	; 8
     356:	00 00       	nop
     358:	f8 10       	cpse	r15, r8
     35a:	20 40       	sbci	r18, 0x00	; 0
     35c:	f8 00       	.word	0x00f8	; ????
     35e:	18 20       	and	r1, r8
     360:	20 40       	sbci	r18, 0x00	; 0
     362:	20 20       	and	r2, r0
     364:	18 00       	.word	0x0018	; ????
     366:	20 20       	and	r2, r0
     368:	20 00       	.word	0x0020	; ????
     36a:	20 20       	and	r2, r0
     36c:	20 00       	.word	0x0020	; ????
     36e:	c0 20       	and	r12, r0
     370:	20 10       	cpse	r2, r0
     372:	20 20       	and	r2, r0
     374:	c0 00       	.word	0x00c0	; ????
     376:	40 a8       	ldd	r4, Z+48	; 0x30
     378:	10 00       	.word	0x0010	; ????
     37a:	00 00       	nop
	...

0000037e <__ctors_start>:
     37e:	1f 07       	cpc	r17, r31

00000380 <__ctors_end>:
     380:	54 07       	cpc	r21, r20

00000382 <__dtors_end>:
     382:	11 24       	eor	r1, r1
     384:	1f be       	out	0x3f, r1	; 63
     386:	cf ef       	ldi	r28, 0xFF	; 255
     388:	d8 e0       	ldi	r29, 0x08	; 8
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	cd bf       	out	0x3d, r28	; 61

0000038e <__do_copy_data>:
     38e:	11 e0       	ldi	r17, 0x01	; 1
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	e8 ed       	ldi	r30, 0xD8	; 216
     396:	fc e2       	ldi	r31, 0x2C	; 44
     398:	02 c0       	rjmp	.+4      	; 0x39e <__do_copy_data+0x10>
     39a:	05 90       	lpm	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	a2 33       	cpi	r26, 0x32	; 50
     3a0:	b1 07       	cpc	r27, r17
     3a2:	d9 f7       	brne	.-10     	; 0x39a <__do_copy_data+0xc>

000003a4 <__do_clear_bss>:
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	a2 e3       	ldi	r26, 0x32	; 50
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <.do_clear_bss_start>

000003ac <.do_clear_bss_loop>:
     3ac:	1d 92       	st	X+, r1

000003ae <.do_clear_bss_start>:
     3ae:	ac 37       	cpi	r26, 0x7C	; 124
     3b0:	b2 07       	cpc	r27, r18
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <.do_clear_bss_loop>

000003b4 <__do_global_ctors>:
     3b4:	11 e0       	ldi	r17, 0x01	; 1
     3b6:	c0 ec       	ldi	r28, 0xC0	; 192
     3b8:	d1 e0       	ldi	r29, 0x01	; 1
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <__do_global_ctors+0x10>
     3bc:	21 97       	sbiw	r28, 0x01	; 1
     3be:	fe 01       	movw	r30, r28
     3c0:	0e 94 95 11 	call	0x232a	; 0x232a <__tablejump2__>
     3c4:	cf 3b       	cpi	r28, 0xBF	; 191
     3c6:	d1 07       	cpc	r29, r17
     3c8:	c9 f7       	brne	.-14     	; 0x3bc <__do_global_ctors+0x8>
     3ca:	0e 94 09 07 	call	0xe12	; 0xe12 <main>
     3ce:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__do_global_dtors>

000003d2 <__bad_interrupt>:
     3d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d6 <_Z13DrawVertLinesv>:

///////////////////////////
/// Draw Vertical Lines
///////////////////////////
void	DrawVertLines()
{
     3d6:	cf 92       	push	r12
     3d8:	ef 92       	push	r14
     3da:	0f 93       	push	r16
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
	//clear screen
	ws.Cls();
     3e0:	82 e3       	ldi	r24, 0x32	; 50
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     3e8:	48 ee       	ldi	r20, 0xE8	; 232
     3ea:	53 e0       	ldi	r21, 0x03	; 3
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	84 e4       	ldi	r24, 0x44	; 68
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     3f8:	c0 e0       	ldi	r28, 0x00	; 0
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	8c 2f       	mov	r24, r28
	//draw Vertical Lines
	for(uint8_t x=0;x<8;x++)
	{
		ws.VertLine(x,0,7,(x&4)?100:0,(x&2)?100:0,(x&1)?100:0);
     3fe:	2c 2f       	mov	r18, r28
     400:	21 70       	andi	r18, 0x01	; 1
     402:	c0 fd       	sbrc	r28, 0
     404:	24 e6       	ldi	r18, 0x64	; 100
     406:	98 2f       	mov	r25, r24
     408:	92 70       	andi	r25, 0x02	; 2
     40a:	81 fd       	sbrc	r24, 1
     40c:	94 e6       	ldi	r25, 0x64	; 100
     40e:	08 2f       	mov	r16, r24
     410:	04 70       	andi	r16, 0x04	; 4
     412:	82 fd       	sbrc	r24, 2
     414:	04 e6       	ldi	r16, 0x64	; 100
     416:	c2 2e       	mov	r12, r18
     418:	e9 2e       	mov	r14, r25
     41a:	27 e0       	ldi	r18, 0x07	; 7
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	be 01       	movw	r22, r28
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
		ws.Show();
     42c:	82 e3       	ldi	r24, 0x32	; 50
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
     434:	21 96       	adiw	r28, 0x01	; 1
	//clear screen
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	//draw Vertical Lines
	for(uint8_t x=0;x<8;x++)
     436:	c8 30       	cpi	r28, 0x08	; 8
     438:	d1 05       	cpc	r29, r1
     43a:	01 f7       	brne	.-64     	; 0x3fc <_Z13DrawVertLinesv+0x26>
	{
		ws.VertLine(x,0,7,(x&4)?100:0,(x&2)?100:0,(x&1)?100:0);
		ws.Show();
		//time.DelayMsI(250);
	}
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	0f 91       	pop	r16
     442:	ef 90       	pop	r14
     444:	cf 90       	pop	r12
     446:	08 95       	ret

00000448 <_Z13DrawHorzLinesv>:
///////////////////////////
/// Draw Horizontal Lines
///////////////////////////
void	DrawHorzLines()
{
     448:	cf 92       	push	r12
     44a:	ef 92       	push	r14
     44c:	0f 93       	push	r16
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
	//clear screen
	ws.Cls();
     452:	82 e3       	ldi	r24, 0x32	; 50
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     45a:	48 ee       	ldi	r20, 0xE8	; 232
     45c:	53 e0       	ldi	r21, 0x03	; 3
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	84 e4       	ldi	r24, 0x44	; 68
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
     46e:	8c 2f       	mov	r24, r28
	//draw Horizontal lines
	for(uint8_t y=0;y<8;y++)
	{
		ws.HorzLine(0,7,y,(y&4)?100:0,(y&2)?100:0,(y&1)?100:0);
     470:	2c 2f       	mov	r18, r28
     472:	21 70       	andi	r18, 0x01	; 1
     474:	c0 fd       	sbrc	r28, 0
     476:	24 e6       	ldi	r18, 0x64	; 100
     478:	98 2f       	mov	r25, r24
     47a:	92 70       	andi	r25, 0x02	; 2
     47c:	81 fd       	sbrc	r24, 1
     47e:	94 e6       	ldi	r25, 0x64	; 100
     480:	08 2f       	mov	r16, r24
     482:	04 70       	andi	r16, 0x04	; 4
     484:	82 fd       	sbrc	r24, 2
     486:	04 e6       	ldi	r16, 0x64	; 100
     488:	c2 2e       	mov	r12, r18
     48a:	e9 2e       	mov	r14, r25
     48c:	9e 01       	movw	r18, r28
     48e:	47 e0       	ldi	r20, 0x07	; 7
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	82 e3       	ldi	r24, 0x32	; 50
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN16class_GraphBasic8HorzLineEiiihhh>
		ws.Show();
     49e:	82 e3       	ldi	r24, 0x32	; 50
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
     4a6:	21 96       	adiw	r28, 0x01	; 1
	//clear screen
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	//draw Horizontal lines
	for(uint8_t y=0;y<8;y++)
     4a8:	c8 30       	cpi	r28, 0x08	; 8
     4aa:	d1 05       	cpc	r29, r1
     4ac:	01 f7       	brne	.-64     	; 0x46e <_Z13DrawHorzLinesv+0x26>
	{
		ws.HorzLine(0,7,y,(y&4)?100:0,(y&2)?100:0,(y&1)?100:0);
		ws.Show();
		//time.DelayMsI(250);
	}
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	0f 91       	pop	r16
     4b4:	ef 90       	pop	r14
     4b6:	cf 90       	pop	r12
     4b8:	08 95       	ret

000004ba <_Z9DrawLinesv>:
///////////////////////////
/// Draw Lines
///////////////////////////

void	DrawLines()
{
     4ba:	4f 92       	push	r4
     4bc:	5f 92       	push	r5
     4be:	6f 92       	push	r6
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
	//clear screen
	ws.Cls();
     4d6:	82 e3       	ldi	r24, 0x32	; 50
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     4de:	48 ee       	ldi	r20, 0xE8	; 232
     4e0:	53 e0       	ldi	r21, 0x03	; 3
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	84 e4       	ldi	r24, 0x44	; 68
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	//draw lines
	Color tmp=ws.GetBackColor();
     4ee:	82 e3       	ldi	r24, 0x32	; 50
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN16class_GraphBasic12GetBackColorEv>
     4f6:	2b 01       	movw	r4, r22
     4f8:	68 2e       	mov	r6, r24
	ws.SetBackColor(10,10,10);
     4fa:	2a e0       	ldi	r18, 0x0A	; 10
     4fc:	4a e0       	ldi	r20, 0x0A	; 10
     4fe:	6a e0       	ldi	r22, 0x0A	; 10
     500:	82 e3       	ldi	r24, 0x32	; 50
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN16class_GraphBasic12SetBackColorEhhh>
	//draw animation lines
	for(uint8_t c=1;c<8;c++)
     508:	c1 e0       	ldi	r28, 0x01	; 1
///////////////////////////
/// Draw Lines
///////////////////////////

void	DrawLines()
{
     50a:	81 2c       	mov	r8, r1
     50c:	91 2c       	mov	r9, r1
	for(uint8_t c=1;c<8;c++)
	{
		for(int x=0;x<8;x++)
		{
			ws.Cls();
			ws.Line(x,0,ws.MaxX()-x,ws.MaxY(),(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
     50e:	8c 2f       	mov	r24, r28
     510:	81 70       	andi	r24, 0x01	; 1
     512:	d8 2e       	mov	r13, r24
     514:	8c 2f       	mov	r24, r28
     516:	82 70       	andi	r24, 0x02	; 2
     518:	f8 2e       	mov	r15, r24
     51a:	dc 2f       	mov	r29, r28
     51c:	d4 70       	andi	r29, 0x04	; 4
	//draw animation lines
	for(uint8_t c=1;c<8;c++)
	{
		for(int x=0;x<8;x++)
		{
			ws.Cls();
     51e:	82 e3       	ldi	r24, 0x32	; 50
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
			ws.Line(x,0,ws.MaxX()-x,ws.MaxY(),(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
     526:	d1 10       	cpse	r13, r1
     528:	02 c0       	rjmp	.+4      	; 0x52e <_Z9DrawLinesv+0x74>
     52a:	a1 2c       	mov	r10, r1
     52c:	02 c0       	rjmp	.+4      	; 0x532 <_Z9DrawLinesv+0x78>
     52e:	64 e6       	ldi	r22, 0x64	; 100
     530:	a6 2e       	mov	r10, r22
     532:	f1 10       	cpse	r15, r1
     534:	02 c0       	rjmp	.+4      	; 0x53a <_Z9DrawLinesv+0x80>
     536:	c1 2c       	mov	r12, r1
     538:	02 c0       	rjmp	.+4      	; 0x53e <_Z9DrawLinesv+0x84>
     53a:	54 e6       	ldi	r21, 0x64	; 100
     53c:	c5 2e       	mov	r12, r21
     53e:	dd 23       	and	r29, r29
     540:	19 f0       	breq	.+6      	; 0x548 <_Z9DrawLinesv+0x8e>
     542:	44 e6       	ldi	r20, 0x64	; 100
     544:	e4 2e       	mov	r14, r20
     546:	01 c0       	rjmp	.+2      	; 0x54a <_Z9DrawLinesv+0x90>
     548:	e1 2c       	mov	r14, r1
		/************************************************************************/
        int     inline MinY(void) {return 0;}
		/************************************************************************/
		/* Return maximum value of y axis                                       */
		/************************************************************************/
        int     inline MaxY(void) { return this->Rows-1;}
     54a:	00 91 3c 01 	lds	r16, 0x013C
     54e:	10 91 3d 01 	lds	r17, 0x013D
     552:	01 50       	subi	r16, 0x01	; 1
     554:	11 09       	sbc	r17, r1
		/************************************************************************/
        int     inline MinX(void) { return 0;}
		/************************************************************************/
		/* Return maximum value of x axis                                       */
		/************************************************************************/
        int     inline MaxX(void) { return this->Cols-1;}
     556:	20 91 3e 01 	lds	r18, 0x013E
     55a:	30 91 3f 01 	lds	r19, 0x013F
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	31 09       	sbc	r19, r1
     562:	28 19       	sub	r18, r8
     564:	39 09       	sbc	r19, r9
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	b4 01       	movw	r22, r8
     56c:	82 e3       	ldi	r24, 0x32	; 50
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN16class_GraphBasic4LineEiiiihhh>
			ws.Show();
     574:	82 e3       	ldi	r24, 0x32	; 50
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
			time.DelayMsI(50);
     57c:	42 e3       	ldi	r20, 0x32	; 50
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	84 e4       	ldi	r24, 0x44	; 68
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	Color tmp=ws.GetBackColor();
	ws.SetBackColor(10,10,10);
	//draw animation lines
	for(uint8_t c=1;c<8;c++)
	{
		for(int x=0;x<8;x++)
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	88 1a       	sub	r8, r24
     590:	98 0a       	sbc	r9, r24
     592:	88 e0       	ldi	r24, 0x08	; 8
     594:	88 16       	cp	r8, r24
     596:	91 04       	cpc	r9, r1
     598:	11 f6       	brne	.-124    	; 0x51e <_Z9DrawLinesv+0x64>
     59a:	38 e0       	ldi	r19, 0x08	; 8
     59c:	83 2e       	mov	r8, r19
     59e:	91 2c       	mov	r9, r1
			ws.Show();
			time.DelayMsI(50);
		}
		for(int x=8;x>=0;x--)
		{
			ws.Cls();
     5a0:	82 e3       	ldi	r24, 0x32	; 50
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
			ws.Line(x,0,ws.MaxX()-x,ws.MaxY(),(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
     5a8:	dd 20       	and	r13, r13
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <_Z9DrawLinesv+0xf8>
     5ac:	24 e6       	ldi	r18, 0x64	; 100
     5ae:	a2 2e       	mov	r10, r18
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <_Z9DrawLinesv+0xfa>
     5b2:	a1 2c       	mov	r10, r1
     5b4:	ff 20       	and	r15, r15
     5b6:	19 f0       	breq	.+6      	; 0x5be <_Z9DrawLinesv+0x104>
     5b8:	94 e6       	ldi	r25, 0x64	; 100
     5ba:	c9 2e       	mov	r12, r25
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <_Z9DrawLinesv+0x106>
     5be:	c1 2c       	mov	r12, r1
     5c0:	d1 11       	cpse	r29, r1
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <_Z9DrawLinesv+0x10e>
     5c4:	e1 2c       	mov	r14, r1
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_Z9DrawLinesv+0x112>
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	e8 2e       	mov	r14, r24
		/************************************************************************/
        int     inline MinY(void) {return 0;}
		/************************************************************************/
		/* Return maximum value of y axis                                       */
		/************************************************************************/
        int     inline MaxY(void) { return this->Rows-1;}
     5cc:	00 91 3c 01 	lds	r16, 0x013C
     5d0:	10 91 3d 01 	lds	r17, 0x013D
     5d4:	01 50       	subi	r16, 0x01	; 1
     5d6:	11 09       	sbc	r17, r1
		/************************************************************************/
        int     inline MinX(void) { return 0;}
		/************************************************************************/
		/* Return maximum value of x axis                                       */
		/************************************************************************/
        int     inline MaxX(void) { return this->Cols-1;}
     5d8:	20 91 3e 01 	lds	r18, 0x013E
     5dc:	30 91 3f 01 	lds	r19, 0x013F
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	31 09       	sbc	r19, r1
     5e4:	28 19       	sub	r18, r8
     5e6:	39 09       	sbc	r19, r9
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	b4 01       	movw	r22, r8
     5ee:	82 e3       	ldi	r24, 0x32	; 50
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN16class_GraphBasic4LineEiiiihhh>
			ws.Show();
     5f6:	82 e3       	ldi	r24, 0x32	; 50
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
			time.DelayMsI(50);
     5fe:	42 e3       	ldi	r20, 0x32	; 50
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	84 e4       	ldi	r24, 0x44	; 68
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
			ws.Cls();
			ws.Line(x,0,ws.MaxX()-x,ws.MaxY(),(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
			ws.Show();
			time.DelayMsI(50);
		}
		for(int x=8;x>=0;x--)
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	88 1a       	sub	r8, r24
     612:	91 08       	sbc	r9, r1
     614:	28 f6       	brcc	.-118    	; 0x5a0 <_Z9DrawLinesv+0xe6>
	time.DelayMsI(1000);
	//draw lines
	Color tmp=ws.GetBackColor();
	ws.SetBackColor(10,10,10);
	//draw animation lines
	for(uint8_t c=1;c<8;c++)
     616:	cf 5f       	subi	r28, 0xFF	; 255
     618:	c8 30       	cpi	r28, 0x08	; 8
     61a:	09 f0       	breq	.+2      	; 0x61e <_Z9DrawLinesv+0x164>
     61c:	76 cf       	rjmp	.-276    	; 0x50a <_Z9DrawLinesv+0x50>
			ws.Line(x,0,ws.MaxX()-x,ws.MaxY(),(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
			ws.Show();
			time.DelayMsI(50);
		}		
	}
	ws.SetBackColor(tmp);
     61e:	66 2d       	mov	r22, r6
     620:	a2 01       	movw	r20, r4
     622:	82 e3       	ldi	r24, 0x32	; 50
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN16class_GraphBasic12SetBackColorE5Color>
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	6f 90       	pop	r6
     642:	5f 90       	pop	r5
     644:	4f 90       	pop	r4
     646:	08 95       	ret

00000648 <_Z9DrawBoxesv>:
///////////////////////////
/// Draw Boxes
///////////////////////////

void	DrawBoxes()
{
     648:	af 92       	push	r10
     64a:	cf 92       	push	r12
     64c:	ef 92       	push	r14
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
	//clear screen
	ws.Cls();
     656:	82 e3       	ldi	r24, 0x32	; 50
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     65e:	48 ee       	ldi	r20, 0xE8	; 232
     660:	53 e0       	ldi	r21, 0x03	; 3
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	84 e4       	ldi	r24, 0x44	; 68
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     66e:	c0 e0       	ldi	r28, 0x00	; 0
     670:	d0 e0       	ldi	r29, 0x00	; 0
	//draw concentric boxes
	for(uint8_t i=0;i<5;i++)
	{
		ws.Box(i,i,ws.MaxX()-i,ws.MaxY()-i,((i+1)&4)?100:0,((i+1)&2)?100:0,((i+1)&1)?100:0);
     672:	be 01       	movw	r22, r28
     674:	21 96       	adiw	r28, 0x01	; 1
     676:	c0 fd       	sbrc	r28, 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <_Z9DrawBoxesv+0x36>
     67a:	a1 2c       	mov	r10, r1
     67c:	02 c0       	rjmp	.+4      	; 0x682 <_Z9DrawBoxesv+0x3a>
     67e:	24 e6       	ldi	r18, 0x64	; 100
     680:	a2 2e       	mov	r10, r18
     682:	c1 fd       	sbrc	r28, 1
     684:	02 c0       	rjmp	.+4      	; 0x68a <_Z9DrawBoxesv+0x42>
     686:	c1 2c       	mov	r12, r1
     688:	02 c0       	rjmp	.+4      	; 0x68e <_Z9DrawBoxesv+0x46>
     68a:	94 e6       	ldi	r25, 0x64	; 100
     68c:	c9 2e       	mov	r12, r25
     68e:	c2 ff       	sbrs	r28, 2
     690:	03 c0       	rjmp	.+6      	; 0x698 <_Z9DrawBoxesv+0x50>
     692:	84 e6       	ldi	r24, 0x64	; 100
     694:	e8 2e       	mov	r14, r24
     696:	01 c0       	rjmp	.+2      	; 0x69a <_Z9DrawBoxesv+0x52>
     698:	e1 2c       	mov	r14, r1
		/************************************************************************/
        int     inline MinY(void) {return 0;}
		/************************************************************************/
		/* Return maximum value of y axis                                       */
		/************************************************************************/
        int     inline MaxY(void) { return this->Rows-1;}
     69a:	00 91 3c 01 	lds	r16, 0x013C
     69e:	10 91 3d 01 	lds	r17, 0x013D
     6a2:	01 50       	subi	r16, 0x01	; 1
     6a4:	11 09       	sbc	r17, r1
     6a6:	06 1b       	sub	r16, r22
     6a8:	17 0b       	sbc	r17, r23
		/************************************************************************/
        int     inline MinX(void) { return 0;}
		/************************************************************************/
		/* Return maximum value of x axis                                       */
		/************************************************************************/
        int     inline MaxX(void) { return this->Cols-1;}
     6aa:	20 91 3e 01 	lds	r18, 0x013E
     6ae:	30 91 3f 01 	lds	r19, 0x013F
     6b2:	21 50       	subi	r18, 0x01	; 1
     6b4:	31 09       	sbc	r19, r1
     6b6:	26 1b       	sub	r18, r22
     6b8:	37 0b       	sbc	r19, r23
     6ba:	ab 01       	movw	r20, r22
     6bc:	82 e3       	ldi	r24, 0x32	; 50
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 a0 08 	call	0x1140	; 0x1140 <_ZN16class_GraphBasic3BoxEiiiihhh>
		ws.Show();
     6c4:	82 e3       	ldi	r24, 0x32	; 50
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
	//clear screen
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	//draw concentric boxes
	for(uint8_t i=0;i<5;i++)
     6cc:	c5 30       	cpi	r28, 0x05	; 5
     6ce:	d1 05       	cpc	r29, r1
     6d0:	81 f6       	brne	.-96     	; 0x672 <_Z9DrawBoxesv+0x2a>
	{
		ws.Box(i,i,ws.MaxX()-i,ws.MaxY()-i,((i+1)&4)?100:0,((i+1)&2)?100:0,((i+1)&1)?100:0);
		ws.Show();
		//time.DelayMsI(250);
	}	
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ef 90       	pop	r14
     6dc:	cf 90       	pop	r12
     6de:	af 90       	pop	r10
     6e0:	08 95       	ret

000006e2 <_Z11DrawCirclesv>:
///////////////////////////
/// Draw Circles
///////////////////////////

void	DrawCircles()
{
     6e2:	8f 92       	push	r8
     6e4:	9f 92       	push	r9
     6e6:	af 92       	push	r10
     6e8:	bf 92       	push	r11
     6ea:	cf 92       	push	r12
     6ec:	ef 92       	push	r14
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
	Color Tmp;
	//clear screen
	ws.Cls();
     6f6:	82 e3       	ldi	r24, 0x32	; 50
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     6fe:	48 ee       	ldi	r20, 0xE8	; 232
     700:	53 e0       	ldi	r21, 0x03	; 3
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	84 e4       	ldi	r24, 0x44	; 68
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	//draw lines
	Tmp=ws.GetBackColor();
     70e:	82 e3       	ldi	r24, 0x32	; 50
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN16class_GraphBasic12GetBackColorEv>
     716:	c4 e1       	ldi	r28, 0x14	; 20
	//draw randomic circles at randomic position at randomic colors
	for(uint8_t i=0;i<20;i++)
	{
		ws.SetBackColor(rand()&15,rand()&15,rand()&15);
     718:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     71c:	18 2f       	mov	r17, r24
     71e:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     722:	d8 2f       	mov	r29, r24
     724:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     728:	21 2f       	mov	r18, r17
     72a:	2f 70       	andi	r18, 0x0F	; 15
     72c:	4d 2f       	mov	r20, r29
     72e:	4f 70       	andi	r20, 0x0F	; 15
     730:	68 2f       	mov	r22, r24
     732:	6f 70       	andi	r22, 0x0F	; 15
     734:	82 e3       	ldi	r24, 0x32	; 50
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN16class_GraphBasic12SetBackColorEhhh>
		ws.Cls();
     73c:	82 e3       	ldi	r24, 0x32	; 50
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
		ws.Circle(rand()&7,rand()&7,rand()&3,rand()&255,rand()&255,rand()&255);
     744:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     748:	c8 2e       	mov	r12, r24
     74a:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     74e:	e8 2e       	mov	r14, r24
     750:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     754:	08 2f       	mov	r16, r24
     756:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     75a:	4c 01       	movw	r8, r24
     75c:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     760:	5c 01       	movw	r10, r24
     762:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     766:	94 01       	movw	r18, r8
     768:	23 70       	andi	r18, 0x03	; 3
     76a:	33 27       	eor	r19, r19
     76c:	a5 01       	movw	r20, r10
     76e:	47 70       	andi	r20, 0x07	; 7
     770:	55 27       	eor	r21, r21
     772:	bc 01       	movw	r22, r24
     774:	67 70       	andi	r22, 0x07	; 7
     776:	77 27       	eor	r23, r23
     778:	82 e3       	ldi	r24, 0x32	; 50
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN16class_GraphBasic6CircleEiiihhh>
		ws.Show();
     780:	82 e3       	ldi	r24, 0x32	; 50
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
		time.DelayMsI(250);
     788:	4a ef       	ldi	r20, 0xFA	; 250
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	84 e4       	ldi	r24, 0x44	; 68
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     798:	c1 50       	subi	r28, 0x01	; 1
	//wait a second
	time.DelayMsI(1000);
	//draw lines
	Tmp=ws.GetBackColor();
	//draw randomic circles at randomic position at randomic colors
	for(uint8_t i=0;i<20;i++)
     79a:	09 f0       	breq	.+2      	; 0x79e <_Z11DrawCirclesv+0xbc>
     79c:	bd cf       	rjmp	.-134    	; 0x718 <_Z11DrawCirclesv+0x36>
		ws.Cls();
		ws.Circle(rand()&7,rand()&7,rand()&3,rand()&255,rand()&255,rand()&255);
		ws.Show();
		time.DelayMsI(250);
	}	
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ef 90       	pop	r14
     7a8:	cf 90       	pop	r12
     7aa:	bf 90       	pop	r11
     7ac:	af 90       	pop	r10
     7ae:	9f 90       	pop	r9
     7b0:	8f 90       	pop	r8
     7b2:	08 95       	ret

000007b4 <_Z8DrawTextv>:
///////////////////////////
/// Draw Text
///////////////////////////

void	DrawText()
{
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	8f 92       	push	r8
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	64 97       	sbiw	r28, 0x14	; 20
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
	Color Tmp;
	int x=0;
	char buf[20];
	
	//clear screen
	ws.Cls();
     7d6:	82 e3       	ldi	r24, 0x32	; 50
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     7de:	48 ee       	ldi	r20, 0xE8	; 232
     7e0:	53 e0       	ldi	r21, 0x03	; 3
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	84 e4       	ldi	r24, 0x44	; 68
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	//draw scrolling text
	Tmp=ws.GetBackColor();
     7ee:	82 e3       	ldi	r24, 0x32	; 50
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN16class_GraphBasic12GetBackColorEv>
     7f6:	3b 01       	movw	r6, r22
     7f8:	88 2e       	mov	r8, r24
	ws.SetBackColor(0,0,50);
     7fa:	22 e3       	ldi	r18, 0x32	; 50
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	82 e3       	ldi	r24, 0x32	; 50
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN16class_GraphBasic12SetBackColorEhhh>
	ws.SetForeColor(100,100,0);
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	44 e6       	ldi	r20, 0x64	; 100
     80c:	64 e6       	ldi	r22, 0x64	; 100
     80e:	82 e3       	ldi	r24, 0x32	; 50
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN16class_GraphBasic12SetForeColorEhhh>
	//formatting test including version 
	sprintf(buf,"  Drive Version %d.%02d",VERSION_MAJOR,VERSION_MINOR);
     816:	1f 92       	push	r1
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	8f 93       	push	r24
     81c:	1f 92       	push	r1
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	8f 93       	push	r24
     822:	8a e0       	ldi	r24, 0x0A	; 10
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	7c 01       	movw	r14, r24
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	0e 94 24 13 	call	0x2648	; 0x2648 <sprintf>
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
///////////////////////////

void	DrawText()
{
	Color Tmp;
	int x=0;
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	10 e0       	ldi	r17, 0x00	; 0
	//formatting test including version 
	sprintf(buf,"  Drive Version %d.%02d",VERSION_MAJOR,VERSION_MINOR);
	//scrolling a text decrementing your x position and draw it on screen
	for(;;)
	{
		ws.Cls();
     846:	82 e3       	ldi	r24, 0x32	; 50
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
		ws.Locate(x,0);
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	b8 01       	movw	r22, r16
     854:	82 e3       	ldi	r24, 0x32	; 50
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN16class_GraphBasic6LocateEii>
		ws.PutS(buf);
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	b7 01       	movw	r22, r14
     860:	82 e3       	ldi	r24, 0x32	; 50
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN16class_GraphBasic4PutSEPKcb>
		x--;
     868:	01 50       	subi	r16, 0x01	; 1
     86a:	11 09       	sbc	r17, r1
		if (x<(-ws.GetTextWidth()*23)) break;
     86c:	05 37       	cpi	r16, 0x75	; 117
     86e:	9f ef       	ldi	r25, 0xFF	; 255
     870:	19 07       	cpc	r17, r25
     872:	69 f0       	breq	.+26     	; 0x88e <_Z8DrawTextv+0xda>
		ws.Show();
     874:	82 e3       	ldi	r24, 0x32	; 50
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
		time.DelayMsI(100);
     87c:	44 e6       	ldi	r20, 0x64	; 100
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	84 e4       	ldi	r24, 0x44	; 68
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	}
	ws.SetBackColor(Tmp);
     88c:	dc cf       	rjmp	.-72     	; 0x846 <_Z8DrawTextv+0x92>
     88e:	68 2d       	mov	r22, r8
     890:	a3 01       	movw	r20, r6
     892:	82 e3       	ldi	r24, 0x32	; 50
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN16class_GraphBasic12SetBackColorE5Color>
}
     89a:	64 96       	adiw	r28, 0x14	; 20
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	08 95       	ret

000008ba <_Z7RotateXv>:
///////////////////////////
/// Rotate X pixels
///////////////////////////

void	RotateX()
{
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	ef 92       	push	r14
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_Z7RotateXv+0x12>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <_Z7RotateXv+0x14>
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
	uint32_t	tl1;
	
	//draw 4 sinusoidal bars
	for(int i=0;i<8;i++)
     8d2:	a1 2c       	mov	r10, r1
     8d4:	b1 2c       	mov	r11, r1
	{
		uint8_t y=128+100*sin((i*6.28)/8);
     8d6:	b5 01       	movw	r22, r10
     8d8:	0b 2c       	mov	r0, r11
     8da:	00 0c       	add	r0, r0
     8dc:	88 0b       	sbc	r24, r24
     8de:	99 0b       	sbc	r25, r25
     8e0:	0e 94 0c 10 	call	0x2018	; 0x2018 <__floatsisf>
     8e4:	23 ec       	ldi	r18, 0xC3	; 195
     8e6:	35 ef       	ldi	r19, 0xF5	; 245
     8e8:	48 ec       	ldi	r20, 0xC8	; 200
     8ea:	50 e4       	ldi	r21, 0x40	; 64
     8ec:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulsf3>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	5e e3       	ldi	r21, 0x3E	; 62
     8f8:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulsf3>
     8fc:	0e 94 05 11 	call	0x220a	; 0x220a <sin>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	48 ec       	ldi	r20, 0xC8	; 200
     906:	52 e4       	ldi	r21, 0x42	; 66
     908:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulsf3>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	53 e4       	ldi	r21, 0x43	; 67
     914:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__addsf3>
     918:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fixunssfsi>
     91c:	16 2f       	mov	r17, r22

		ws.VertLine(i,0,1,y,0,0);
     91e:	c1 2c       	mov	r12, r1
     920:	e1 2c       	mov	r14, r1
     922:	06 2f       	mov	r16, r22
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	b5 01       	movw	r22, r10
     92e:	82 e3       	ldi	r24, 0x32	; 50
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
		ws.VertLine(i,2,3,0,y,0);
     936:	e1 2e       	mov	r14, r17
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	23 e0       	ldi	r18, 0x03	; 3
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	42 e0       	ldi	r20, 0x02	; 2
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	b5 01       	movw	r22, r10
     944:	82 e3       	ldi	r24, 0x32	; 50
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
		ws.VertLine(i,4,5,0,0,y);
     94c:	c1 2e       	mov	r12, r17
     94e:	e1 2c       	mov	r14, r1
     950:	25 e0       	ldi	r18, 0x05	; 5
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	44 e0       	ldi	r20, 0x04	; 4
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	b5 01       	movw	r22, r10
     95a:	82 e3       	ldi	r24, 0x32	; 50
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
		ws.VertLine(i,6,7,y,y,0);
     962:	c1 2c       	mov	r12, r1
     964:	e1 2e       	mov	r14, r17
     966:	01 2f       	mov	r16, r17
     968:	27 e0       	ldi	r18, 0x07	; 7
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	46 e0       	ldi	r20, 0x06	; 6
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	b5 01       	movw	r22, r10
     972:	82 e3       	ldi	r24, 0x32	; 50
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
void	RotateX()
{
	uint32_t	tl1;
	
	//draw 4 sinusoidal bars
	for(int i=0;i<8;i++)
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	a8 1a       	sub	r10, r24
     97e:	b8 0a       	sbc	r11, r24
     980:	88 e0       	ldi	r24, 0x08	; 8
     982:	a8 16       	cp	r10, r24
     984:	b1 04       	cpc	r11, r1
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
     988:	a6 cf       	rjmp	.-180    	; 0x8d6 <_Z7RotateXv+0x1c>
		ws.VertLine(i,2,3,0,y,0);
		ws.VertLine(i,4,5,0,0,y);
		ws.VertLine(i,6,7,y,y,0);
	}
	//mark a time
	time.SetElapsed(&tl1);
     98a:	be 01       	movw	r22, r28
     98c:	6f 5f       	subi	r22, 0xFF	; 255
     98e:	7f 4f       	sbci	r23, 0xFF	; 255
     990:	84 e4       	ldi	r24, 0x44	; 68
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_ZN10class_Time10SetElapsedEPm>
	uint8_t c=0;
     998:	b1 2c       	mov	r11, r1
	for(;;)
	{
		//rotate screen regions at 40ms a time
		if (time.GetElapsed(&tl1)>40)
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	84 e4       	ldi	r24, 0x44	; 68
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN10class_Time10GetElapsedEPm>
     9a8:	69 32       	cpi	r22, 0x29	; 41
     9aa:	71 05       	cpc	r23, r1
     9ac:	81 05       	cpc	r24, r1
     9ae:	91 05       	cpc	r25, r1
     9b0:	c8 f1       	brcs	.+114    	; 0xa24 <__stack+0x125>
		{
			time.SetElapsed(&tl1);
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	84 e4       	ldi	r24, 0x44	; 68
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <_ZN10class_Time10SetElapsedEPm>
			ws.RotateX(0,7,0,1);
     9c0:	e1 2c       	mov	r14, r1
     9c2:	01 e0       	ldi	r16, 0x01	; 1
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	47 e0       	ldi	r20, 0x07	; 7
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	82 e3       	ldi	r24, 0x32	; 50
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
			ws.RotateX(7,0,2,3);
     9da:	03 e0       	ldi	r16, 0x03	; 3
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	22 e0       	ldi	r18, 0x02	; 2
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	82 e3       	ldi	r24, 0x32	; 50
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
			ws.RotateX(0,7,4,5);
     9f2:	05 e0       	ldi	r16, 0x05	; 5
     9f4:	10 e0       	ldi	r17, 0x00	; 0
     9f6:	24 e0       	ldi	r18, 0x04	; 4
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	47 e0       	ldi	r20, 0x07	; 7
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	82 e3       	ldi	r24, 0x32	; 50
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
			ws.RotateX(7,0,6,7);
     a0a:	07 e0       	ldi	r16, 0x07	; 7
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	26 e0       	ldi	r18, 0x06	; 6
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	67 e0       	ldi	r22, 0x07	; 7
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	82 e3       	ldi	r24, 0x32	; 50
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
			c++;
     a22:	b3 94       	inc	r11
		}
		if (c>64) break;
     a24:	80 e4       	ldi	r24, 0x40	; 64
     a26:	8b 15       	cp	r24, r11
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__stack+0x135>
		ws.Show();
     a2a:	82 e3       	ldi	r24, 0x32	; 50
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
		//time.DelayMsI(20);
	}
     a32:	b3 cf       	rjmp	.-154    	; 0x99a <__stack+0x9b>
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ef 90       	pop	r14
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	08 95       	ret

00000a4e <_Z5Fadesv>:
///////////////////////////
/// Fades All Board width colors
///////////////////////////

void Fades()
{
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
	//clear screen
	ws.Cls();
     a5c:	82 e3       	ldi	r24, 0x32	; 50
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     a64:	48 ee       	ldi	r20, 0xE8	; 232
     a66:	53 e0       	ldi	r21, 0x03	; 3
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	84 e4       	ldi	r24, 0x44	; 68
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     a74:	d2 e0       	ldi	r29, 0x02	; 2
				time.DelayMsI(25);
			}
			//decrement color
			for(int v=240;v>=0;v-=16)
			{
				ws.SetBackColor((i&4)?v:0,(i&2)?v:0,(i&1)?v:0);
     a76:	c1 e0       	ldi	r28, 0x01	; 1
///////////////////////////
/// Fades All Board width colors
///////////////////////////

void Fades()
{
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	10 e0       	ldi	r17, 0x00	; 0
		for(uint8_t i=1;i<8;i++)
		{
			//increment color
			for(int v=0;v<=240;v+=16)
			{
				ws.SetBackColor((i&4)?v:0,(i&2)?v:0,(i&1)?v:0);
     a7c:	8c 2f       	mov	r24, r28
     a7e:	81 70       	andi	r24, 0x01	; 1
     a80:	d8 2e       	mov	r13, r24
     a82:	8c 2f       	mov	r24, r28
     a84:	82 70       	andi	r24, 0x02	; 2
     a86:	e8 2e       	mov	r14, r24
     a88:	8c 2f       	mov	r24, r28
     a8a:	84 70       	andi	r24, 0x04	; 4
     a8c:	f8 2e       	mov	r15, r24
     a8e:	dd 20       	and	r13, r13
     a90:	11 f0       	breq	.+4      	; 0xa96 <_Z5Fadesv+0x48>
     a92:	20 2f       	mov	r18, r16
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <_Z5Fadesv+0x4a>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	ee 20       	and	r14, r14
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <_Z5Fadesv+0x52>
     a9c:	40 2f       	mov	r20, r16
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <_Z5Fadesv+0x54>
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	ff 20       	and	r15, r15
     aa4:	11 f0       	breq	.+4      	; 0xaaa <_Z5Fadesv+0x5c>
     aa6:	60 2f       	mov	r22, r16
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <_Z5Fadesv+0x5e>
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	82 e3       	ldi	r24, 0x32	; 50
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN16class_GraphBasic12SetBackColorEhhh>
				ws.Cls();
     ab4:	82 e3       	ldi	r24, 0x32	; 50
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
				ws.Show();
     abc:	82 e3       	ldi	r24, 0x32	; 50
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
				time.DelayMsI(25);
     ac4:	49 e1       	ldi	r20, 0x19	; 25
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	84 e4       	ldi	r24, 0x44	; 68
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	{
		//Draw full screen with 7 colors
		for(uint8_t i=1;i<8;i++)
		{
			//increment color
			for(int v=0;v<=240;v+=16)
     ad4:	00 5f       	subi	r16, 0xF0	; 240
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	01 15       	cp	r16, r1
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	18 07       	cpc	r17, r24
     ade:	b9 f6       	brne	.-82     	; 0xa8e <_Z5Fadesv+0x40>
     ae0:	00 ef       	ldi	r16, 0xF0	; 240
     ae2:	10 e0       	ldi	r17, 0x00	; 0
				time.DelayMsI(25);
			}
			//decrement color
			for(int v=240;v>=0;v-=16)
			{
				ws.SetBackColor((i&4)?v:0,(i&2)?v:0,(i&1)?v:0);
     ae4:	dd 20       	and	r13, r13
     ae6:	11 f0       	breq	.+4      	; 0xaec <_Z5Fadesv+0x9e>
     ae8:	20 2f       	mov	r18, r16
     aea:	01 c0       	rjmp	.+2      	; 0xaee <_Z5Fadesv+0xa0>
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	ee 20       	and	r14, r14
     af0:	11 f0       	breq	.+4      	; 0xaf6 <_Z5Fadesv+0xa8>
     af2:	40 2f       	mov	r20, r16
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <_Z5Fadesv+0xaa>
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	ff 20       	and	r15, r15
     afa:	11 f0       	breq	.+4      	; 0xb00 <_Z5Fadesv+0xb2>
     afc:	60 2f       	mov	r22, r16
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <_Z5Fadesv+0xb4>
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	82 e3       	ldi	r24, 0x32	; 50
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 bb 07 	call	0xf76	; 0xf76 <_ZN16class_GraphBasic12SetBackColorEhhh>
				ws.Cls();
     b0a:	82 e3       	ldi	r24, 0x32	; 50
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
				ws.Show();
     b12:	82 e3       	ldi	r24, 0x32	; 50
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
				time.DelayMsI(25);
     b1a:	49 e1       	ldi	r20, 0x19	; 25
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	84 e4       	ldi	r24, 0x44	; 68
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
				ws.Cls();
				ws.Show();
				time.DelayMsI(25);
			}
			//decrement color
			for(int v=240;v>=0;v-=16)
     b2a:	00 51       	subi	r16, 0x10	; 16
     b2c:	11 09       	sbc	r17, r1
     b2e:	00 3f       	cpi	r16, 0xF0	; 240
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	18 07       	cpc	r17, r24
     b34:	b9 f6       	brne	.-82     	; 0xae4 <_Z5Fadesv+0x96>
	time.DelayMsI(1000);
	//Repeat 2 times
	for(uint8_t j=0;j<2;j++)
	{
		//Draw full screen with 7 colors
		for(uint8_t i=1;i<8;i++)
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	c8 30       	cpi	r28, 0x08	; 8
     b3a:	09 f0       	breq	.+2      	; 0xb3e <_Z5Fadesv+0xf0>
     b3c:	9d cf       	rjmp	.-198    	; 0xa78 <_Z5Fadesv+0x2a>
	//clear screen
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	//Repeat 2 times
	for(uint8_t j=0;j<2;j++)
     b3e:	d1 30       	cpi	r29, 0x01	; 1
     b40:	11 f0       	breq	.+4      	; 0xb46 <_Z5Fadesv+0xf8>
     b42:	d1 e0       	ldi	r29, 0x01	; 1
     b44:	98 cf       	rjmp	.-208    	; 0xa76 <_Z5Fadesv+0x28>
				ws.Show();
				time.DelayMsI(25);
			}
		}	
	}
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	df 90       	pop	r13
     b54:	08 95       	ret

00000b56 <_Z13DrawBoxesFullv>:
///////////////////////////
/// Draw Boxes Full
///////////////////////////

void	DrawBoxesFull()
{
     b56:	6f 92       	push	r6
     b58:	7f 92       	push	r7
     b5a:	8f 92       	push	r8
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	cf 92       	push	r12
     b62:	ef 92       	push	r14
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
	int x=0;
	uint8_t c=1;
	
	//clear screen
	ws.Cls();
     b6a:	82 e3       	ldi	r24, 0x32	; 50
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
	//wait a second
	time.DelayMsI(1000);
     b72:	48 ee       	ldi	r20, 0xE8	; 232
     b74:	53 e0       	ldi	r21, 0x03	; 3
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	84 e4       	ldi	r24, 0x44	; 68
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
///////////////////////////

void	DrawBoxesFull()
{
	int x=0;
	uint8_t c=1;
     b82:	c1 e0       	ldi	r28, 0x01	; 1
/// Draw Boxes Full
///////////////////////////

void	DrawBoxesFull()
{
	int x=0;
     b84:	81 2c       	mov	r8, r1
     b86:	91 2c       	mov	r9, r1
	//wait a second
	time.DelayMsI(1000);
	for(uint8_t i=0;i<64;i++)
	{
		ws.Cls();
		ws.BoxFull(x,x,7-x,7-x,(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
     b88:	87 e0       	ldi	r24, 0x07	; 7
     b8a:	68 2e       	mov	r6, r24
     b8c:	71 2c       	mov	r7, r1
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	for(uint8_t i=0;i<64;i++)
	{
		ws.Cls();
     b8e:	82 e3       	ldi	r24, 0x32	; 50
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN16class_GraphBasic3ClsEv>
		ws.BoxFull(x,x,7-x,7-x,(c&4)?100:0,(c&2)?100:0,(c&1)?100:0);
     b96:	4c 2f       	mov	r20, r28
     b98:	41 70       	andi	r20, 0x01	; 1
     b9a:	c0 fd       	sbrc	r28, 0
     b9c:	44 e6       	ldi	r20, 0x64	; 100
     b9e:	9c 2f       	mov	r25, r28
     ba0:	92 70       	andi	r25, 0x02	; 2
     ba2:	c1 fd       	sbrc	r28, 1
     ba4:	94 e6       	ldi	r25, 0x64	; 100
     ba6:	8c 2f       	mov	r24, r28
     ba8:	84 70       	andi	r24, 0x04	; 4
     baa:	c2 fd       	sbrc	r28, 2
     bac:	84 e6       	ldi	r24, 0x64	; 100
     bae:	93 01       	movw	r18, r6
     bb0:	28 19       	sub	r18, r8
     bb2:	39 09       	sbc	r19, r9
     bb4:	a4 2e       	mov	r10, r20
     bb6:	c9 2e       	mov	r12, r25
     bb8:	e8 2e       	mov	r14, r24
     bba:	89 01       	movw	r16, r18
     bbc:	a4 01       	movw	r20, r8
     bbe:	b4 01       	movw	r22, r8
     bc0:	82 e3       	ldi	r24, 0x32	; 50
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN16class_GraphBasic7BoxFullEiiiihhh>
		c++;
     bc8:	cf 5f       	subi	r28, 0xFF	; 255
		x=(x+1)&7;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	88 1a       	sub	r8, r24
     bce:	98 0a       	sbc	r9, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	88 22       	and	r8, r24
     bd4:	99 24       	eor	r9, r9
		ws.Show();
     bd6:	82 e3       	ldi	r24, 0x32	; 50
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
		time.DelayMsI(100);
     bde:	44 e6       	ldi	r20, 0x64	; 100
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	84 e4       	ldi	r24, 0x44	; 68
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
	
	//clear screen
	ws.Cls();
	//wait a second
	time.DelayMsI(1000);
	for(uint8_t i=0;i<64;i++)
     bee:	c1 34       	cpi	r28, 0x41	; 65
     bf0:	71 f6       	brne	.-100    	; 0xb8e <_Z13DrawBoxesFullv+0x38>
		c++;
		x=(x+1)&7;
		ws.Show();
		time.DelayMsI(100);
	}	
}
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ef 90       	pop	r14
     bfa:	cf 90       	pop	r12
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	08 95       	ret

00000c08 <_Z9RotatesXYv>:
///////////////////////////
/// Rotates X axis and Y axis
///////////////////////////

void	RotatesXY()
{
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
	// 3 O O O O O O O O
	// 4 O O O O O O O O
	// 5 O O O O O O O O
	// 6 O O O O O O O O
	// 7 O O O O O O O O
	int8_t	c=0,k=0,b=0;
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	f1 2c       	mov	r15, r1
     c18:	d0 e0       	ldi	r29, 0x00	; 0

	for(;;)
	{
		//b>16 draw randomic color pixels else draw ladder color pixels
		if (b>16)
     c1a:	c1 31       	cpi	r28, 0x11	; 17
     c1c:	74 f0       	brlt	.+28     	; 0xc3a <_Z9RotatesXYv+0x32>
		{
			ws.SetPixel(0,0,rand()&127,rand()&127,rand()&127);
     c1e:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     c22:	18 2f       	mov	r17, r24
     c24:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     c28:	08 2f       	mov	r16, r24
     c2a:	0e 94 14 13 	call	0x2628	; 0x2628 <rand>
     c2e:	1f 77       	andi	r17, 0x7F	; 127
     c30:	e1 2e       	mov	r14, r17
     c32:	0f 77       	andi	r16, 0x7F	; 127
     c34:	28 2f       	mov	r18, r24
     c36:	2f 77       	andi	r18, 0x7F	; 127
     c38:	0f c0       	rjmp	.+30     	; 0xc58 <_Z9RotatesXYv+0x50>
		}
		else
		{
			ws.SetPixel(0,0,(b&4)?c:0,(b&2)?c:0,(b&1)?c:0);	
     c3a:	c0 ff       	sbrs	r28, 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <_Z9RotatesXYv+0x3a>
     c3e:	ed 2e       	mov	r14, r29
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <_Z9RotatesXYv+0x3c>
     c42:	e1 2c       	mov	r14, r1
     c44:	c1 ff       	sbrs	r28, 1
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <_Z9RotatesXYv+0x44>
     c48:	0d 2f       	mov	r16, r29
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <_Z9RotatesXYv+0x46>
     c4c:	00 e0       	ldi	r16, 0x00	; 0
     c4e:	c2 ff       	sbrs	r28, 2
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <_Z9RotatesXYv+0x4e>
     c52:	2d 2f       	mov	r18, r29
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <_Z9RotatesXYv+0x50>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	82 e3       	ldi	r24, 0x32	; 50
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
		}
		//process ladder
		k++;
     c68:	f3 94       	inc	r15
		if (k>8)
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	8f 15       	cp	r24, r15
     c6e:	44 f4       	brge	.+16     	; 0xc80 <_Z9RotatesXYv+0x78>
		{
			k=0;
			c+=8;
     c70:	d8 5f       	subi	r29, 0xF8	; 248
			if (c>100)
     c72:	d5 36       	cpi	r29, 0x65	; 101
     c74:	24 f0       	brlt	.+8      	; 0xc7e <_Z9RotatesXYv+0x76>
			{
				c=0;
				b++;
     c76:	cf 5f       	subi	r28, 0xFF	; 255
		}
		//process ladder
		k++;
		if (k>8)
		{
			k=0;
     c78:	f1 2c       	mov	r15, r1
			c+=8;
			if (c>100)
			{
				c=0;
     c7a:	d0 e0       	ldi	r29, 0x00	; 0
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <_Z9RotatesXYv+0x78>
		}
		//process ladder
		k++;
		if (k>8)
		{
			k=0;
     c7e:	f1 2c       	mov	r15, r1
			}
		}
		
		//rotate in spiral form
		
		ws.RotateX(7,0,0,0,true);
     c80:	ee 24       	eor	r14, r14
     c82:	e3 94       	inc	r14
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	82 e3       	ldi	r24, 0x32	; 50
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(7,7,7,0,true);
     c9c:	27 e0       	ldi	r18, 0x07	; 7
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	47 e0       	ldi	r20, 0x07	; 7
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	67 e0       	ldi	r22, 0x07	; 7
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	82 e3       	ldi	r24, 0x32	; 50
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		ws.RotateX(0,7,7,7,true);
     cb0:	07 e0       	ldi	r16, 0x07	; 7
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	27 e0       	ldi	r18, 0x07	; 7
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	47 e0       	ldi	r20, 0x07	; 7
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	82 e3       	ldi	r24, 0x32	; 50
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(0,0,1,7,true);
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	82 e3       	ldi	r24, 0x32	; 50
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		
		ws.RotateX(6,0,1,1,true);
     cdc:	01 e0       	ldi	r16, 0x01	; 1
     cde:	10 e0       	ldi	r17, 0x00	; 0
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	66 e0       	ldi	r22, 0x06	; 6
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	82 e3       	ldi	r24, 0x32	; 50
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(6,6,6,1,true);
     cf4:	26 e0       	ldi	r18, 0x06	; 6
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	46 e0       	ldi	r20, 0x06	; 6
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	66 e0       	ldi	r22, 0x06	; 6
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	82 e3       	ldi	r24, 0x32	; 50
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		ws.RotateX(1,6,6,6,true);
     d08:	06 e0       	ldi	r16, 0x06	; 6
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	26 e0       	ldi	r18, 0x06	; 6
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	46 e0       	ldi	r20, 0x06	; 6
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	82 e3       	ldi	r24, 0x32	; 50
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(1,1,2,6,true);
     d20:	22 e0       	ldi	r18, 0x02	; 2
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	82 e3       	ldi	r24, 0x32	; 50
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		
		ws.RotateX(5,1,2,2,true);
     d34:	02 e0       	ldi	r16, 0x02	; 2
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	22 e0       	ldi	r18, 0x02	; 2
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	65 e0       	ldi	r22, 0x05	; 5
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	82 e3       	ldi	r24, 0x32	; 50
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(5,5,5,2,true);
     d4c:	25 e0       	ldi	r18, 0x05	; 5
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	45 e0       	ldi	r20, 0x05	; 5
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	65 e0       	ldi	r22, 0x05	; 5
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	82 e3       	ldi	r24, 0x32	; 50
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		ws.RotateX(2,5,5,5,true);
     d60:	05 e0       	ldi	r16, 0x05	; 5
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	25 e0       	ldi	r18, 0x05	; 5
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	45 e0       	ldi	r20, 0x05	; 5
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	62 e0       	ldi	r22, 0x02	; 2
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	82 e3       	ldi	r24, 0x32	; 50
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(2,2,3,5,true);
     d78:	23 e0       	ldi	r18, 0x03	; 3
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	42 e0       	ldi	r20, 0x02	; 2
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	82 e3       	ldi	r24, 0x32	; 50
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		
		ws.RotateX(4,2,3,3,true);
     d8c:	03 e0       	ldi	r16, 0x03	; 3
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	23 e0       	ldi	r18, 0x03	; 3
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	64 e0       	ldi	r22, 0x04	; 4
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	82 e3       	ldi	r24, 0x32	; 50
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		ws.RotateY(4,4,4,3,true);
     da4:	24 e0       	ldi	r18, 0x04	; 4
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	44 e0       	ldi	r20, 0x04	; 4
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	64 e0       	ldi	r22, 0x04	; 4
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	82 e3       	ldi	r24, 0x32	; 50
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN16class_GraphBasic7RotateYEiiiib>
		ws.RotateX(3,4,4,4,true);
     db8:	04 e0       	ldi	r16, 0x04	; 4
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	24 e0       	ldi	r18, 0x04	; 4
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	44 e0       	ldi	r20, 0x04	; 4
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	63 e0       	ldi	r22, 0x03	; 3
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	82 e3       	ldi	r24, 0x32	; 50
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN16class_GraphBasic7RotateXEiiiib>
		
		//show rotation
		ws.Show();
     dd0:	82 e3       	ldi	r24, 0x32	; 50
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <_ZN16class_GraphBasic4ShowEv>
		//change time if b>16
		if (b>16) time.DelayMsI(150); else time.DelayMsI(10);
     dd8:	c1 31       	cpi	r28, 0x11	; 17
     dda:	94 f0       	brlt	.+36     	; 0xe00 <_Z9RotatesXYv+0x1f8>
     ddc:	46 e9       	ldi	r20, 0x96	; 150
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	84 e4       	ldi	r24, 0x44	; 68
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
		//exit if b>17
		if (b>17) break;
     dec:	c1 31       	cpi	r28, 0x11	; 17
     dee:	09 f4       	brne	.+2      	; 0xdf2 <_Z9RotatesXYv+0x1ea>
     df0:	16 cf       	rjmp	.-468    	; 0xc1e <_Z9RotatesXYv+0x16>
	}
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	08 95       	ret
		ws.RotateX(3,4,4,4,true);
		
		//show rotation
		ws.Show();
		//change time if b>16
		if (b>16) time.DelayMsI(150); else time.DelayMsI(10);
     e00:	4a e0       	ldi	r20, 0x0A	; 10
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	84 e4       	ldi	r24, 0x44	; 68
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <_ZN10class_Time8DelayMsIEm>
     e10:	04 cf       	rjmp	.-504    	; 0xc1a <_Z9RotatesXYv+0x12>

00000e12 <main>:
int main()
{
	 
	//Enable Global Interrupts
        
        sei();
     e12:	78 94       	sei
	
	//Main Demo Loop

	for(;;)
	{
		DrawText();
     e14:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_Z8DrawTextv>
		DrawVertLines();
     e18:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_Z13DrawVertLinesv>
		DrawHorzLines();
     e1c:	0e 94 24 02 	call	0x448	; 0x448 <_Z13DrawHorzLinesv>
		DrawBoxes();
     e20:	0e 94 24 03 	call	0x648	; 0x648 <_Z9DrawBoxesv>
		DrawLines();
     e24:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_Z9DrawLinesv>
		DrawCircles();
     e28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z11DrawCirclesv>
		RotateX();
     e2c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z7RotateXv>
		Fades();
     e30:	0e 94 27 05 	call	0xa4e	; 0xa4e <_Z5Fadesv>
		DrawBoxesFull();
     e34:	0e 94 ab 05 	call	0xb56	; 0xb56 <_Z13DrawBoxesFullv>
		RotatesXY();
     e38:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z9RotatesXYv>
       =                                                __/ |                           =
       =                                               |___/                            =
       ==================================================================================
*/

int main()
     e3c:	eb cf       	rjmp	.-42     	; 0xe14 <main+0x2>

00000e3e <_GLOBAL__sub_I_time>:
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e3e:	e0 e6       	ldi	r30, 0x60	; 96
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	10 82       	st	Z, r1
        this->green=green;
     e44:	11 82       	std	Z+1, r1	; 0x01
        this->blue=blue;
     e46:	12 82       	std	Z+2, r1	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e48:	ed e5       	ldi	r30, 0x5D	; 93
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	80 83       	st	Z, r24
        this->green=green;
     e50:	11 82       	std	Z+1, r1	; 0x01
        this->blue=blue;
     e52:	12 82       	std	Z+2, r1	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e54:	ea e5       	ldi	r30, 0x5A	; 90
     e56:	f1 e0       	ldi	r31, 0x01	; 1
     e58:	10 82       	st	Z, r1
        this->green=green;
     e5a:	81 83       	std	Z+1, r24	; 0x01
        this->blue=blue;
     e5c:	12 82       	std	Z+2, r1	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e5e:	e7 e5       	ldi	r30, 0x57	; 87
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	80 83       	st	Z, r24
        this->green=green;
     e64:	81 83       	std	Z+1, r24	; 0x01
        this->blue=blue;
     e66:	12 82       	std	Z+2, r1	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e68:	e4 e5       	ldi	r30, 0x54	; 84
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	10 82       	st	Z, r1
        this->green=green;
     e6e:	11 82       	std	Z+1, r1	; 0x01
        this->blue=blue;
     e70:	82 83       	std	Z+2, r24	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e72:	e1 e5       	ldi	r30, 0x51	; 81
     e74:	f1 e0       	ldi	r31, 0x01	; 1
     e76:	80 83       	st	Z, r24
        this->green=green;
     e78:	11 82       	std	Z+1, r1	; 0x01
        this->blue=blue;
     e7a:	82 83       	std	Z+2, r24	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e7c:	ee e4       	ldi	r30, 0x4E	; 78
     e7e:	f1 e0       	ldi	r31, 0x01	; 1
     e80:	10 82       	st	Z, r1
        this->green=green;
     e82:	81 83       	std	Z+1, r24	; 0x01
        this->blue=blue;
     e84:	82 83       	std	Z+2, r24	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     e86:	eb e4       	ldi	r30, 0x4B	; 75
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	80 83       	st	Z, r24
        this->green=green;
     e8c:	81 83       	std	Z+1, r24	; 0x01
        this->blue=blue;
     e8e:	82 83       	std	Z+2, r24	; 0x02
 +--------------------------------------+
 |        LOCAL LIBRARY INCLUDES	    |
 +--------------------------------------+
*/

	class_Time			time;
     e90:	84 e4       	ldi	r24, 0x44	; 68
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN10class_TimeC1Ev>
	class_WS2812_Drive	ws(8,8);
     e98:	48 e0       	ldi	r20, 0x08	; 8
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	68 e0       	ldi	r22, 0x08	; 8
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	82 e3       	ldi	r24, 0x32	; 50
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_ZN18class_WS2812_DriveC1Eii>

00000ea8 <_GLOBAL__sub_D_time>:
     ea8:	82 e3       	ldi	r24, 0x32	; 50
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_ZN18class_WS2812_DriveD1Ev>

00000eb0 <_ZN16class_GraphBasic5ResetEv>:
//	| INPUT   :                     						                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :  virtual function                           		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::Reset()
{
     eb0:	08 95       	ret

00000eb2 <_ZN16class_GraphBasic16WriteRGBtoDeviceEhhh>:
//	| INPUT   :  grbPtr -->point to grb stream  			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :  virtual function                              		                |
//	+-------------------------------------------------------------------------------+
	void    class_GraphBasic::WriteRGBtoDevice(uint8_t rValue,uint8_t gValue,uint8_t bValue)
	{
     eb2:	08 95       	ret

00000eb4 <_ZN16class_GraphBasic10InitializeEv>:
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::Initialize()
{
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
    unsigned char sreg;
    size_t  space;
    //Save SREG
    sreg=SREG;
     ebc:	1f b7       	in	r17, 0x3f	; 63
    //Disable Interrupts
    cli();
     ebe:	f8 94       	cli
    //reserve space for ledpixels;
    space=this->Rows*this->Cols*sizeof(Color);
     ec0:	4a 85       	ldd	r20, Y+10	; 0x0a
     ec2:	5b 85       	ldd	r21, Y+11	; 0x0b
     ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ec8:	42 9f       	mul	r20, r18
     eca:	c0 01       	movw	r24, r0
     ecc:	43 9f       	mul	r20, r19
     ece:	90 0d       	add	r25, r0
     ed0:	52 9f       	mul	r21, r18
     ed2:	90 0d       	add	r25, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	9c 01       	movw	r18, r24
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
    ColorBuffer=(Color*)malloc(space);
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	0e 94 9b 11 	call	0x2336	; 0x2336 <malloc>
     ee4:	9b 83       	std	Y+3, r25	; 0x03
     ee6:	8a 83       	std	Y+2, r24	; 0x02
    //Restore Interrupts
    SREG=sreg;
     ee8:	1f bf       	out	0x3f, r17	; 63
}
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <_ZN16class_GraphBasic12UnInitializeEv>:
//	| INPUT   :  none							                                    |
//	| OUTPUT  :  none							                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::UnInitialize()
{
     ef2:	cf 93       	push	r28
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
     ef4:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
    cli();
     ef6:	f8 94       	cli
    //
    free(ColorBuffer);
     ef8:	fc 01       	movw	r30, r24
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	0e 94 30 12 	call	0x2460	; 0x2460 <free>
    //Restore Interrupts
    SREG=sreg;
     f02:	cf bf       	out	0x3f, r28	; 63
}
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <_ZN16class_GraphBasicC1Eii>:
//	| NAME    :  Graph Basic Init overload 2 				                        |
//	| INPUT   :  rows,cols with rows and cols		                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_GraphBasic::class_GraphBasic(int rows,int cols)
     f08:	cf 93       	push	r28
     f0a:	fc 01       	movw	r30, r24
     f0c:	86 e2       	ldi	r24, 0x26	; 38
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	13 82       	std	Z+3, r1	; 0x03
     f16:	12 82       	std	Z+2, r1	; 0x02
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     f18:	14 82       	std	Z+4, r1	; 0x04
        this->green=green;
     f1a:	15 82       	std	Z+5, r1	; 0x05
        this->blue=blue;
     f1c:	16 82       	std	Z+6, r1	; 0x06
    /************************************************************************/
    /* 2o constructor set r=red,g=green,b=blue                              */
    /************************************************************************/
    Color(uint8_t red,uint8_t green,uint8_t blue)
    {
        this->red=red;
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	87 83       	std	Z+7, r24	; 0x07
        this->green=green;
     f22:	80 87       	std	Z+8, r24	; 0x08
        this->blue=blue;
     f24:	81 87       	std	Z+9, r24	; 0x09
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	93 87       	std	Z+11, r25	; 0x0b
     f2c:	82 87       	std	Z+10, r24	; 0x0a
     f2e:	95 87       	std	Z+13, r25	; 0x0d
     f30:	84 87       	std	Z+12, r24	; 0x0c
     f32:	17 86       	std	Z+15, r1	; 0x0f
     f34:	16 86       	std	Z+14, r1	; 0x0e
     f36:	11 8a       	std	Z+17, r1	; 0x11
     f38:	10 8a       	std	Z+16, r1	; 0x10
{
    unsigned char sreg;

    //save SREG
    sreg=SREG;
     f3a:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
    cli();
     f3c:	f8 94       	cli
    this->Cols=cols;
     f3e:	55 87       	std	Z+13, r21	; 0x0d
     f40:	44 87       	std	Z+12, r20	; 0x0c
    this->Rows=rows;
     f42:	73 87       	std	Z+11, r23	; 0x0b
     f44:	62 87       	std	Z+10, r22	; 0x0a
    //Initialize
    Initialize();
     f46:	cf 01       	movw	r24, r30
     f48:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN16class_GraphBasic10InitializeEv>
    //Restore SREG state
    SREG=sreg;
     f4c:	cf bf       	out	0x3f, r28	; 63
}
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <_ZN16class_GraphBasicD1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_GraphBasic::~class_GraphBasic()
     f52:	cf 93       	push	r28
     f54:	26 e2       	ldi	r18, 0x26	; 38
     f56:	31 e0       	ldi	r19, 0x01	; 1
     f58:	fc 01       	movw	r30, r24
     f5a:	31 83       	std	Z+1, r19	; 0x01
     f5c:	20 83       	st	Z, r18
{
    unsigned char sreg;

    //save SREG
    sreg=SREG;
     f5e:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
    cli();
     f60:	f8 94       	cli
    //UnInitialize
    UnInitialize();
     f62:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN16class_GraphBasic12UnInitializeEv>
    //Restore SREG state
    SREG=sreg;
     f66:	cf bf       	out	0x3f, r28	; 63
}
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <_ZN16class_GraphBasic12SetBackColorE5Color>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                             		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetBackColor(Color backColor)
{
    this->BackColor=backColor;
     f6c:	fc 01       	movw	r30, r24
     f6e:	44 83       	std	Z+4, r20	; 0x04
     f70:	55 83       	std	Z+5, r21	; 0x05
     f72:	66 83       	std	Z+6, r22	; 0x06
     f74:	08 95       	ret

00000f76 <_ZN16class_GraphBasic12SetBackColorEhhh>:
//	| INPUT   :                                 			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                             		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetBackColor(uint8_t red,uint8_t green,uint8_t blue)
{
     f76:	fc 01       	movw	r30, r24
    this->BackColor.red=red;
     f78:	64 83       	std	Z+4, r22	; 0x04
    this->BackColor.green=green;
     f7a:	45 83       	std	Z+5, r20	; 0x05
    this->BackColor.blue=blue;
     f7c:	26 83       	std	Z+6, r18	; 0x06
     f7e:	08 95       	ret

00000f80 <_ZN16class_GraphBasic12SetForeColorEhhh>:
//	| INPUT   :                                 			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                             		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetForeColor(uint8_t red,uint8_t green,uint8_t blue)
{
     f80:	fc 01       	movw	r30, r24
    this->ForeColor.red=red;
     f82:	67 83       	std	Z+7, r22	; 0x07
    this->ForeColor.green=green;
     f84:	40 87       	std	Z+8, r20	; 0x08
    this->ForeColor.blue=blue;
     f86:	21 87       	std	Z+9, r18	; 0x09
     f88:	08 95       	ret

00000f8a <_ZN16class_GraphBasic12GetBackColorEv>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                             		                |
//	+-------------------------------------------------------------------------------+
Color   class_GraphBasic::GetBackColor()
{
    return this->BackColor;
     f8a:	fc 01       	movw	r30, r24
     f8c:	64 81       	ldd	r22, Z+4	; 0x04
     f8e:	75 81       	ldd	r23, Z+5	; 0x05
     f90:	86 81       	ldd	r24, Z+6	; 0x06
}
     f92:	08 95       	ret

00000f94 <_ZN16class_GraphBasic8SetPixelEiihhh>:
//	| INPUT   :  Color                               			                    |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetPixel(int x,int y,uint8_t red,uint8_t green,uint8_t blue)
{
     f94:	ef 92       	push	r14
     f96:	0f 93       	push	r16
     f98:	fc 01       	movw	r30, r24
    uint16_t offset;
    Color   *p;

    if (x>=0 && x<Cols && y>=0 && y<Rows)
     f9a:	77 fd       	sbrc	r23, 7
     f9c:	22 c0       	rjmp	.+68     	; 0xfe2 <_ZN16class_GraphBasic8SetPixelEiihhh+0x4e>
     f9e:	84 85       	ldd	r24, Z+12	; 0x0c
     fa0:	95 85       	ldd	r25, Z+13	; 0x0d
     fa2:	68 17       	cp	r22, r24
     fa4:	79 07       	cpc	r23, r25
     fa6:	ec f4       	brge	.+58     	; 0xfe2 <_ZN16class_GraphBasic8SetPixelEiihhh+0x4e>
     fa8:	57 fd       	sbrc	r21, 7
     faa:	1b c0       	rjmp	.+54     	; 0xfe2 <_ZN16class_GraphBasic8SetPixelEiihhh+0x4e>
     fac:	a2 85       	ldd	r26, Z+10	; 0x0a
     fae:	b3 85       	ldd	r27, Z+11	; 0x0b
     fb0:	4a 17       	cp	r20, r26
     fb2:	5b 07       	cpc	r21, r27
     fb4:	b4 f4       	brge	.+44     	; 0xfe2 <_ZN16class_GraphBasic8SetPixelEiihhh+0x4e>
    {
        p=this->ColorBuffer;
     fb6:	a2 81       	ldd	r26, Z+2	; 0x02
     fb8:	b3 81       	ldd	r27, Z+3	; 0x03
        offset=y*this->Cols+x;
     fba:	48 9f       	mul	r20, r24
     fbc:	f0 01       	movw	r30, r0
     fbe:	49 9f       	mul	r20, r25
     fc0:	f0 0d       	add	r31, r0
     fc2:	58 9f       	mul	r21, r24
     fc4:	f0 0d       	add	r31, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	6e 0f       	add	r22, r30
     fca:	7f 1f       	adc	r23, r31
 
		p+=offset;
     fcc:	fb 01       	movw	r30, r22
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	6e 0f       	add	r22, r30
     fd4:	7f 1f       	adc	r23, r31
     fd6:	fd 01       	movw	r30, r26
     fd8:	e6 0f       	add	r30, r22
     fda:	f7 1f       	adc	r31, r23
		p->red=red;
     fdc:	20 83       	st	Z, r18
		p->green=green;
     fde:	01 83       	std	Z+1, r16	; 0x01
		p->blue=blue;
     fe0:	e2 82       	std	Z+2, r14	; 0x02
    }
}
     fe2:	0f 91       	pop	r16
     fe4:	ef 90       	pop	r14
     fe6:	08 95       	ret

00000fe8 <_ZN16class_GraphBasic8SetPixelEii>:
//	| INPUT   :                                 			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetPixel(int x,int y)
{
     fe8:	ef 92       	push	r14
     fea:	0f 93       	push	r16
    SetPixel(x,y,this->ForeColor.red,this->ForeColor.green,this->ForeColor.blue);
     fec:	fc 01       	movw	r30, r24
     fee:	e1 84       	ldd	r14, Z+9	; 0x09
     ff0:	00 85       	ldd	r16, Z+8	; 0x08
     ff2:	27 81       	ldd	r18, Z+7	; 0x07
     ff4:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
}
     ff8:	0f 91       	pop	r16
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <_ZN16class_GraphBasic8SetPixelEii5Color>:
//	| INPUT   :  Color                               			                    |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::SetPixel(int x,int y,Color pixelColor)
{
     ffe:	ef 92       	push	r14
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	30 2f       	mov	r19, r16
    SetPixel(x,y,pixelColor.red,pixelColor.green,pixelColor.blue);
    1006:	e2 2e       	mov	r14, r18
    1008:	01 2f       	mov	r16, r17
    100a:	23 2f       	mov	r18, r19
    100c:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
}
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ef 90       	pop	r14
    1016:	08 95       	ret

00001018 <_ZN16class_GraphBasic8GetPixelEii>:
//	| INPUT   :  x,y coords                           			                    |
//	| OUTPUT  :  Color of x,y coords                                                |
//	| REMARKS :  return backcolor if x,y out of range else return pixel color       |
//	+-------------------------------------------------------------------------------+
Color   class_GraphBasic::GetPixel(int x,int y)
{
    1018:	fc 01       	movw	r30, r24
    uint16_t offset;
    Color   *p;

    //check if x,y in range
    if (x>=0 && x<Cols && y>=0 && y<Rows)
    101a:	77 fd       	sbrc	r23, 7
    101c:	23 c0       	rjmp	.+70     	; 0x1064 <_ZN16class_GraphBasic8GetPixelEii+0x4c>
    101e:	84 85       	ldd	r24, Z+12	; 0x0c
    1020:	95 85       	ldd	r25, Z+13	; 0x0d
    1022:	68 17       	cp	r22, r24
    1024:	79 07       	cpc	r23, r25
    1026:	f4 f4       	brge	.+60     	; 0x1064 <_ZN16class_GraphBasic8GetPixelEii+0x4c>
    1028:	57 fd       	sbrc	r21, 7
    102a:	1c c0       	rjmp	.+56     	; 0x1064 <_ZN16class_GraphBasic8GetPixelEii+0x4c>
    102c:	22 85       	ldd	r18, Z+10	; 0x0a
    102e:	33 85       	ldd	r19, Z+11	; 0x0b
    1030:	42 17       	cp	r20, r18
    1032:	53 07       	cpc	r21, r19
    1034:	bc f4       	brge	.+46     	; 0x1064 <_ZN16class_GraphBasic8GetPixelEii+0x4c>
    {
        //compute pixel address
        p=this->ColorBuffer;
    1036:	22 81       	ldd	r18, Z+2	; 0x02
    1038:	33 81       	ldd	r19, Z+3	; 0x03
        offset=y*this->Cols+x;
    103a:	48 9f       	mul	r20, r24
    103c:	f0 01       	movw	r30, r0
    103e:	49 9f       	mul	r20, r25
    1040:	f0 0d       	add	r31, r0
    1042:	58 9f       	mul	r21, r24
    1044:	f0 0d       	add	r31, r0
    1046:	11 24       	eor	r1, r1
        p+=offset;
    1048:	6e 0f       	add	r22, r30
    104a:	7f 1f       	adc	r23, r31
        //return pixel
        return *p;
    104c:	fb 01       	movw	r30, r22
    104e:	ee 0f       	add	r30, r30
    1050:	ff 1f       	adc	r31, r31
    1052:	6e 0f       	add	r22, r30
    1054:	7f 1f       	adc	r23, r31
    1056:	f9 01       	movw	r30, r18
    1058:	e6 0f       	add	r30, r22
    105a:	f7 1f       	adc	r31, r23
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	08 95       	ret
    }
    else
    {
        return BackColor;
    1064:	64 81       	ldd	r22, Z+4	; 0x04
    1066:	75 81       	ldd	r23, Z+5	; 0x05
    1068:	86 81       	ldd	r24, Z+6	; 0x06
    }
}
    106a:	08 95       	ret

0000106c <_ZN16class_GraphBasic8VertLineEiiihhh>:
//	| INPUT   :  x start,yi start,yf end,r,g,b values  			                    |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::VertLine(int x,int yi,int yf,uint8_t red,uint8_t green,uint8_t blue)
{
    106c:	6f 92       	push	r6
    106e:	7f 92       	push	r7
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	4c 01       	movw	r8, r24
    1088:	3b 01       	movw	r6, r22
    108a:	ea 01       	movw	r28, r20
    108c:	59 01       	movw	r10, r18
    108e:	10 2f       	mov	r17, r16
    1090:	fe 2c       	mov	r15, r14
    int tmp;

    //check coords
    if (yi>yf)
    1092:	24 17       	cp	r18, r20
    1094:	35 07       	cpc	r19, r21
    1096:	24 f4       	brge	.+8      	; 0x10a0 <_ZN16class_GraphBasic8VertLineEiiihhh+0x34>
    1098:	8d 2f       	mov	r24, r29
    109a:	e9 01       	movw	r28, r18
    109c:	a4 2e       	mov	r10, r20
    109e:	b8 2e       	mov	r11, r24
        tmp=yi;
        yi=yf;
        yf=tmp;
    }
    //draw
    for(int i=yi;i<=yf;i++)
    10a0:	ac 16       	cp	r10, r28
    10a2:	bd 06       	cpc	r11, r29
    10a4:	54 f0       	brlt	.+20     	; 0x10ba <_ZN16class_GraphBasic8VertLineEiiihhh+0x4e>
    {
        SetPixel(x,i,red,green,blue);
    10a6:	ec 2c       	mov	r14, r12
    10a8:	0f 2d       	mov	r16, r15
    10aa:	21 2f       	mov	r18, r17
    10ac:	ae 01       	movw	r20, r28
    10ae:	b3 01       	movw	r22, r6
    10b0:	c4 01       	movw	r24, r8
    10b2:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
        tmp=yi;
        yi=yf;
        yf=tmp;
    }
    //draw
    for(int i=yi;i<=yf;i++)
    10b6:	21 96       	adiw	r28, 0x01	; 1
    10b8:	f3 cf       	rjmp	.-26     	; 0x10a0 <_ZN16class_GraphBasic8VertLineEiiihhh+0x34>
    {
        SetPixel(x,i,red,green,blue);
    }
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	8f 90       	pop	r8
    10d0:	7f 90       	pop	r7
    10d2:	6f 90       	pop	r6
    10d4:	08 95       	ret

000010d6 <_ZN16class_GraphBasic8HorzLineEiiihhh>:
//	| INPUT   :  x start,yi start,yf end,r,g,b values  			                    |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::HorzLine(int xi,int xf,int y,uint8_t red,uint8_t green,uint8_t blue)
{
    10d6:	6f 92       	push	r6
    10d8:	7f 92       	push	r7
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	4c 01       	movw	r8, r24
    10f2:	eb 01       	movw	r28, r22
    10f4:	5a 01       	movw	r10, r20
    10f6:	39 01       	movw	r6, r18
    10f8:	10 2f       	mov	r17, r16
    10fa:	fe 2c       	mov	r15, r14
    int tmp;

    //check coords
    if (xi>xf)
    10fc:	46 17       	cp	r20, r22
    10fe:	57 07       	cpc	r21, r23
    1100:	24 f4       	brge	.+8      	; 0x110a <_ZN16class_GraphBasic8HorzLineEiiihhh+0x34>
    1102:	8d 2f       	mov	r24, r29
    1104:	ea 01       	movw	r28, r20
    1106:	a6 2e       	mov	r10, r22
    1108:	b8 2e       	mov	r11, r24
        tmp=xi;
        xi=xf;
        xf=tmp;
    }
    //draw
    for(int i=xi;i<=xf;i++)
    110a:	ac 16       	cp	r10, r28
    110c:	bd 06       	cpc	r11, r29
    110e:	54 f0       	brlt	.+20     	; 0x1124 <_ZN16class_GraphBasic8HorzLineEiiihhh+0x4e>
    {
        SetPixel(i,y,red,green,blue);
    1110:	ec 2c       	mov	r14, r12
    1112:	0f 2d       	mov	r16, r15
    1114:	21 2f       	mov	r18, r17
    1116:	a3 01       	movw	r20, r6
    1118:	be 01       	movw	r22, r28
    111a:	c4 01       	movw	r24, r8
    111c:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
        tmp=xi;
        xi=xf;
        xf=tmp;
    }
    //draw
    for(int i=xi;i<=xf;i++)
    1120:	21 96       	adiw	r28, 0x01	; 1
    1122:	f3 cf       	rjmp	.-26     	; 0x110a <_ZN16class_GraphBasic8HorzLineEiiihhh+0x34>
    {
        SetPixel(i,y,red,green,blue);
    }
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	9f 90       	pop	r9
    1138:	8f 90       	pop	r8
    113a:	7f 90       	pop	r7
    113c:	6f 90       	pop	r6
    113e:	08 95       	ret

00001140 <_ZN16class_GraphBasic3BoxEiiiihhh>:
//	| INPUT   :  xi start,xf end,yi start,yf end,r,g,b values                       |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::Box(int xi,int yi,int xf,int yf,uint8_t red,uint8_t green,uint8_t blue)
{
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	cf 92       	push	r12
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
    1162:	2b 01       	movw	r4, r22
    1164:	4a 01       	movw	r8, r20
    1166:	19 01       	movw	r2, r18
    1168:	38 01       	movw	r6, r16
    116a:	1e 2d       	mov	r17, r14
    116c:	fc 2c       	mov	r15, r12
    HorzLine(xi,xf,yi,red,green,blue);
    116e:	ca 2c       	mov	r12, r10
    1170:	ef 2c       	mov	r14, r15
    1172:	01 2f       	mov	r16, r17
    1174:	9a 01       	movw	r18, r20
    1176:	a1 01       	movw	r20, r2
    1178:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN16class_GraphBasic8HorzLineEiiihhh>
    HorzLine(xi,xf,yf,red,green,blue);
    117c:	93 01       	movw	r18, r6
    117e:	a1 01       	movw	r20, r2
    1180:	b2 01       	movw	r22, r4
    1182:	ce 01       	movw	r24, r28
    1184:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN16class_GraphBasic8HorzLineEiiihhh>
    VertLine(xi,yi,yf,red,green,blue);
    1188:	93 01       	movw	r18, r6
    118a:	a4 01       	movw	r20, r8
    118c:	b2 01       	movw	r22, r4
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
    VertLine(xf,yi,yf,red,green,blue);
    1194:	93 01       	movw	r18, r6
    1196:	a4 01       	movw	r20, r8
    1198:	b1 01       	movw	r22, r2
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	cf 90       	pop	r12
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	3f 90       	pop	r3
    11be:	2f 90       	pop	r2
    11c0:	08 95       	ret

000011c2 <_ZN16class_GraphBasic7BoxFullEiiiihhh>:
//	| INPUT   :  xi start,xf end,yi start,yf end,r,g,b values                       |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::BoxFull(int xi,int yi,int xf,int yf,uint8_t red,uint8_t green,uint8_t blue)
{
    11c2:	2f 92       	push	r2
    11c4:	3f 92       	push	r3
    11c6:	4f 92       	push	r4
    11c8:	5f 92       	push	r5
    11ca:	6f 92       	push	r6
    11cc:	7f 92       	push	r7
    11ce:	8f 92       	push	r8
    11d0:	9f 92       	push	r9
    11d2:	af 92       	push	r10
    11d4:	cf 92       	push	r12
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	3c 01       	movw	r6, r24
    11e4:	eb 01       	movw	r28, r22
    11e6:	2a 01       	movw	r4, r20
    11e8:	49 01       	movw	r8, r18
    11ea:	18 01       	movw	r2, r16
    11ec:	1e 2d       	mov	r17, r14
    11ee:	fc 2c       	mov	r15, r12
	//swap coords if need
	if (xi>xf)
    11f0:	26 17       	cp	r18, r22
    11f2:	37 07       	cpc	r19, r23
    11f4:	24 f4       	brge	.+8      	; 0x11fe <_ZN16class_GraphBasic7BoxFullEiiiihhh+0x3c>
    11f6:	8d 2f       	mov	r24, r29
    11f8:	e9 01       	movw	r28, r18
    11fa:	86 2e       	mov	r8, r22
    11fc:	98 2e       	mov	r9, r24
		int tmp=xi;
		xi=xf;
		xf=tmp;
	}
	//draw box full
	for(int x=xi;x<=xf;x++)
    11fe:	8c 16       	cp	r8, r28
    1200:	9d 06       	cpc	r9, r29
    1202:	5c f0       	brlt	.+22     	; 0x121a <_ZN16class_GraphBasic7BoxFullEiiiihhh+0x58>
	{
		VertLine(x,yi,yf,red,green,blue);
    1204:	ca 2c       	mov	r12, r10
    1206:	ef 2c       	mov	r14, r15
    1208:	01 2f       	mov	r16, r17
    120a:	91 01       	movw	r18, r2
    120c:	a2 01       	movw	r20, r4
    120e:	be 01       	movw	r22, r28
    1210:	c3 01       	movw	r24, r6
    1212:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN16class_GraphBasic8VertLineEiiihhh>
		int tmp=xi;
		xi=xf;
		xf=tmp;
	}
	//draw box full
	for(int x=xi;x<=xf;x++)
    1216:	21 96       	adiw	r28, 0x01	; 1
    1218:	f2 cf       	rjmp	.-28     	; 0x11fe <_ZN16class_GraphBasic7BoxFullEiiiihhh+0x3c>
	{
		VertLine(x,yi,yf,red,green,blue);
	}
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	cf 90       	pop	r12
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	7f 90       	pop	r7
    1230:	6f 90       	pop	r6
    1232:	5f 90       	pop	r5
    1234:	4f 90       	pop	r4
    1236:	3f 90       	pop	r3
    1238:	2f 90       	pop	r2
    123a:	08 95       	ret

0000123c <_ZN16class_GraphBasic4LineEiiiihhh>:
    if (a==0) return 0;
    if (a>0) return 1;
    return -1;
}
void    class_GraphBasic::Line(int xi,int yi,int xf,int yf,uint8_t red,uint8_t green,uint8_t blue)
{
    123c:	2f 92       	push	r2
    123e:	3f 92       	push	r3
    1240:	4f 92       	push	r4
    1242:	5f 92       	push	r5
    1244:	6f 92       	push	r6
    1246:	7f 92       	push	r7
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	2c 97       	sbiw	r28, 0x0c	; 12
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	98 87       	std	Y+8, r25	; 0x08
    1272:	8f 83       	std	Y+7, r24	; 0x07
    1274:	7c 87       	std	Y+12, r23	; 0x0c
    1276:	6b 87       	std	Y+11, r22	; 0x0b
    1278:	4a 01       	movw	r8, r20
    127a:	fe 2c       	mov	r15, r14
    127c:	c9 86       	std	Y+9, r12	; 0x09
    127e:	aa 86       	std	Y+10, r10	; 0x0a
    int a,b,t,ct,d,j,k;
    int xn,xd;
    int yn,yd;
    int x,y;
    //prepare for drawing
    a=abs(xf-xi);
    1280:	d9 01       	movw	r26, r18
    1282:	a6 1b       	sub	r26, r22
    1284:	b7 0b       	sbc	r27, r23
    1286:	ad 01       	movw	r20, r26
    1288:	b7 ff       	sbrs	r27, 7
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <_ZN16class_GraphBasic4LineEiiiihhh+0x58>
    128c:	44 27       	eor	r20, r20
    128e:	55 27       	eor	r21, r21
    1290:	4a 1b       	sub	r20, r26
    1292:	5b 0b       	sbc	r21, r27
    1294:	fa 01       	movw	r30, r20
    b=abs(yf-yi);
    1296:	b8 01       	movw	r22, r16
    1298:	68 19       	sub	r22, r8
    129a:	79 09       	sbc	r23, r9
    129c:	cb 01       	movw	r24, r22
    129e:	77 ff       	sbrs	r23, 7
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <_ZN16class_GraphBasic4LineEiiiihhh+0x6e>
    12a2:	88 27       	eor	r24, r24
    12a4:	99 27       	eor	r25, r25
    12a6:	86 1b       	sub	r24, r22
    12a8:	97 0b       	sbc	r25, r23
    if (a>=b)
    12aa:	48 17       	cp	r20, r24
    12ac:	59 07       	cpc	r21, r25
    12ae:	4c f0       	brlt	.+18     	; 0x12c2 <_ZN16class_GraphBasic4LineEiiiihhh+0x86>
    {
        xn=sgn(xf-xi);
        yn=0;
    12b0:	41 2c       	mov	r4, r1
    12b2:	51 2c       	mov	r5, r1
//	| REMARKS : using Bresenham algorithm                       		            |
//	+-------------------------------------------------------------------------------+

static int sgn(int a)
{
    if (a==0) return 0;
    12b4:	10 97       	sbiw	r26, 0x00	; 0
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <_ZN16class_GraphBasic4LineEiiiihhh+0xae>
    if (a>0) return 1;
    12b8:	74 f4       	brge	.+28     	; 0x12d6 <_ZN16class_GraphBasic4LineEiiiihhh+0x9a>
    return -1;
    12ba:	66 24       	eor	r6, r6
    12bc:	6a 94       	dec	r6
    12be:	76 2c       	mov	r7, r6
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <_ZN16class_GraphBasic4LineEiiiihhh+0xb2>
//	| REMARKS : using Bresenham algorithm                       		            |
//	+-------------------------------------------------------------------------------+

static int sgn(int a)
{
    if (a==0) return 0;
    12c2:	fc 01       	movw	r30, r24
    12c4:	ca 01       	movw	r24, r20
    12c6:	61 15       	cp	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	49 f0       	breq	.+18     	; 0x12de <_ZN16class_GraphBasic4LineEiiiihhh+0xa2>
    if (a>0) return 1;
    12cc:	5c f4       	brge	.+22     	; 0x12e4 <_ZN16class_GraphBasic4LineEiiiihhh+0xa8>
    return -1;
    12ce:	44 24       	eor	r4, r4
    12d0:	4a 94       	dec	r4
    12d2:	54 2c       	mov	r5, r4
    12d4:	0a c0       	rjmp	.+20     	; 0x12ea <_ZN16class_GraphBasic4LineEiiiihhh+0xae>
//	+-------------------------------------------------------------------------------+

static int sgn(int a)
{
    if (a==0) return 0;
    if (a>0) return 1;
    12d6:	66 24       	eor	r6, r6
    12d8:	63 94       	inc	r6
    12da:	71 2c       	mov	r7, r1
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <_ZN16class_GraphBasic4LineEiiiihhh+0xb2>
//	| REMARKS : using Bresenham algorithm                       		            |
//	+-------------------------------------------------------------------------------+

static int sgn(int a)
{
    if (a==0) return 0;
    12de:	41 2c       	mov	r4, r1
    12e0:	51 2c       	mov	r5, r1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <_ZN16class_GraphBasic4LineEiiiihhh+0xae>
    if (a>0) return 1;
    12e4:	44 24       	eor	r4, r4
    12e6:	43 94       	inc	r4
    12e8:	51 2c       	mov	r5, r1
        xn=sgn(xf-xi);
        yn=0;
    }
    else
    {
        xn=0;
    12ea:	61 2c       	mov	r6, r1
    12ec:	71 2c       	mov	r7, r1
        t=a;
        a=b;
        b=t;
    }
    //check directions
    if (xi>xf) xd=-1; else xd=1;
    12ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    12f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    12f2:	24 17       	cp	r18, r20
    12f4:	35 07       	cpc	r19, r21
    12f6:	2c f0       	brlt	.+10     	; 0x1302 <_ZN16class_GraphBasic4LineEiiiihhh+0xc6>
    12f8:	a1 e0       	ldi	r26, 0x01	; 1
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ba 83       	std	Y+2, r27	; 0x02
    12fe:	a9 83       	std	Y+1, r26	; 0x01
    1300:	04 c0       	rjmp	.+8      	; 0x130a <_ZN16class_GraphBasic4LineEiiiihhh+0xce>
    1302:	2f ef       	ldi	r18, 0xFF	; 255
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	3a 83       	std	Y+2, r19	; 0x02
    1308:	29 83       	std	Y+1, r18	; 0x01
    if (yi>yf) yd=-1; else yd=1;
    130a:	08 15       	cp	r16, r8
    130c:	19 05       	cpc	r17, r9
    130e:	2c f0       	brlt	.+10     	; 0x131a <_ZN16class_GraphBasic4LineEiiiihhh+0xde>
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	5c 83       	std	Y+4, r21	; 0x04
    1316:	4b 83       	std	Y+3, r20	; 0x03
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <_ZN16class_GraphBasic4LineEiiiihhh+0xe6>
    131a:	af ef       	ldi	r26, 0xFF	; 255
    131c:	bf ef       	ldi	r27, 0xFF	; 255
    131e:	bc 83       	std	Y+4, r27	; 0x04
    1320:	ab 83       	std	Y+3, r26	; 0x03
    ct=a+1;
    d=(b << 1)-a;
    1322:	6c 01       	movw	r12, r24
    1324:	cc 0c       	add	r12, r12
    1326:	dd 1c       	adc	r13, r13
    1328:	56 01       	movw	r10, r12
    132a:	ae 1a       	sub	r10, r30
    132c:	bf 0a       	sbc	r11, r31
    k=(b-a) << 1;
    132e:	8e 1b       	sub	r24, r30
    1330:	9f 0b       	sbc	r25, r31
    1332:	9c 01       	movw	r18, r24
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	3e 83       	std	Y+6, r19	; 0x06
    133a:	2d 83       	std	Y+5, r18	; 0x05
    133c:	1f 01       	movw	r2, r30
    j=b << 1;
    x=xi;
    y=yi;
    //draw line
    while (ct>0) {
        SetPixel(x,y,red,green,blue);
    133e:	ea 84       	ldd	r14, Y+10	; 0x0a
    1340:	09 85       	ldd	r16, Y+9	; 0x09
    1342:	2f 2d       	mov	r18, r15
    1344:	a4 01       	movw	r20, r8
    1346:	6b 85       	ldd	r22, Y+11	; 0x0b
    1348:	7c 85       	ldd	r23, Y+12	; 0x0c
    134a:	8f 81       	ldd	r24, Y+7	; 0x07
    134c:	98 85       	ldd	r25, Y+8	; 0x08
    134e:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
        ct--;
		//update decision flags
        if (d>0) {
    1352:	1a 14       	cp	r1, r10
    1354:	1b 04       	cpc	r1, r11
    1356:	8c f4       	brge	.+34     	; 0x137a <_ZN16class_GraphBasic4LineEiiiihhh+0x13e>
            x+=xd;
    1358:	4b 85       	ldd	r20, Y+11	; 0x0b
    135a:	5c 85       	ldd	r21, Y+12	; 0x0c
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	48 0f       	add	r20, r24
    1362:	59 1f       	adc	r21, r25
    1364:	5c 87       	std	Y+12, r21	; 0x0c
    1366:	4b 87       	std	Y+11, r20	; 0x0b
            y+=yd;
    1368:	ab 81       	ldd	r26, Y+3	; 0x03
    136a:	bc 81       	ldd	r27, Y+4	; 0x04
    136c:	8a 0e       	add	r8, r26
    136e:	9b 1e       	adc	r9, r27
            d+=k;
    1370:	ed 81       	ldd	r30, Y+5	; 0x05
    1372:	fe 81       	ldd	r31, Y+6	; 0x06
    1374:	ae 0e       	add	r10, r30
    1376:	bf 1e       	adc	r11, r31
    1378:	0a c0       	rjmp	.+20     	; 0x138e <_ZN16class_GraphBasic4LineEiiiihhh+0x152>
        }
        else {
            x+=xn;
    137a:	2b 85       	ldd	r18, Y+11	; 0x0b
    137c:	3c 85       	ldd	r19, Y+12	; 0x0c
    137e:	26 0d       	add	r18, r6
    1380:	37 1d       	adc	r19, r7
    1382:	3c 87       	std	Y+12, r19	; 0x0c
    1384:	2b 87       	std	Y+11, r18	; 0x0b
            y+=yn;
    1386:	84 0c       	add	r8, r4
    1388:	95 1c       	adc	r9, r5
            d+=j;
    138a:	ac 0c       	add	r10, r12
    138c:	bd 1c       	adc	r11, r13
    138e:	31 e0       	ldi	r19, 0x01	; 1
    1390:	23 1a       	sub	r2, r19
    1392:	31 08       	sbc	r3, r1
    1394:	a0 f6       	brcc	.-88     	; 0x133e <_ZN16class_GraphBasic4LineEiiiihhh+0x102>
        }
    }
}
    1396:	2c 96       	adiw	r28, 0x0c	; 12
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	6f 90       	pop	r6
    13be:	5f 90       	pop	r5
    13c0:	4f 90       	pop	r4
    13c2:	3f 90       	pop	r3
    13c4:	2f 90       	pop	r2
    13c6:	08 95       	ret

000013c8 <_ZN16class_GraphBasic3ClsEv>:
//	| INPUT   :                                        			                    |
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::Cls()
{
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	dc 01       	movw	r26, r24
    Color       *p;
    uint16_t    bufEnd;
    
    p=this->ColorBuffer;
    //show all values
    bufEnd=this->Rows*this->Cols;
    13ce:	1a 96       	adiw	r26, 0x0a	; 10
    13d0:	4d 91       	ld	r20, X+
    13d2:	5c 91       	ld	r21, X
    13d4:	1b 97       	sbiw	r26, 0x0b	; 11
    13d6:	1c 96       	adiw	r26, 0x0c	; 12
    13d8:	8d 91       	ld	r24, X+
    13da:	9c 91       	ld	r25, X
    13dc:	1d 97       	sbiw	r26, 0x0d	; 13
    13de:	48 9f       	mul	r20, r24
    13e0:	90 01       	movw	r18, r0
    13e2:	49 9f       	mul	r20, r25
    13e4:	30 0d       	add	r19, r0
    13e6:	58 9f       	mul	r21, r24
    13e8:	30 0d       	add	r19, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	12 96       	adiw	r26, 0x02	; 2
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	13 97       	sbiw	r26, 0x03	; 3
    13f4:	32 96       	adiw	r30, 0x02	; 2
    for(uint16_t i=0;i<bufEnd;i++)
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	82 17       	cp	r24, r18
    13fc:	93 07       	cpc	r25, r19
    13fe:	91 f0       	breq	.+36     	; 0x1424 <_ZN16class_GraphBasic3ClsEv+0x5c>
    {
        p->red=this->BackColor.red;
    1400:	14 96       	adiw	r26, 0x04	; 4
    1402:	4c 91       	ld	r20, X
    1404:	14 97       	sbiw	r26, 0x04	; 4
    1406:	ef 01       	movw	r28, r30
    1408:	22 97       	sbiw	r28, 0x02	; 2
    140a:	48 83       	st	Y, r20
        p->green=this->BackColor.green;
    140c:	15 96       	adiw	r26, 0x05	; 5
    140e:	4c 91       	ld	r20, X
    1410:	15 97       	sbiw	r26, 0x05	; 5
    1412:	21 96       	adiw	r28, 0x01	; 1
    1414:	48 83       	st	Y, r20
        p->blue=this->BackColor.blue;
    1416:	16 96       	adiw	r26, 0x06	; 6
    1418:	4c 91       	ld	r20, X
    141a:	16 97       	sbiw	r26, 0x06	; 6
    141c:	40 83       	st	Z, r20
    uint16_t    bufEnd;
    
    p=this->ColorBuffer;
    //show all values
    bufEnd=this->Rows*this->Cols;
    for(uint16_t i=0;i<bufEnd;i++)
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	33 96       	adiw	r30, 0x03	; 3
    1422:	eb cf       	rjmp	.-42     	; 0x13fa <_ZN16class_GraphBasic3ClsEv+0x32>
        p->red=this->BackColor.red;
        p->green=this->BackColor.green;
        p->blue=this->BackColor.blue;
        p++;
    }
}
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <_ZN16class_GraphBasic6PlotP8Eiiiihhh>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                              		                |
//	+-------------------------------------------------------------------------------+

void class_GraphBasic::PlotP8(int xx,int yy,int x,int y,uint8_t red,uint8_t green,uint8_t blue)
{
    142a:	2f 92       	push	r2
    142c:	3f 92       	push	r3
    142e:	4f 92       	push	r4
    1430:	5f 92       	push	r5
    1432:	6f 92       	push	r6
    1434:	7f 92       	push	r7
    1436:	8f 92       	push	r8
    1438:	9f 92       	push	r9
    143a:	af 92       	push	r10
    143c:	cf 92       	push	r12
    143e:	ef 92       	push	r14
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	28 97       	sbiw	r28, 0x08	; 8
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	98 87       	std	Y+8, r25	; 0x08
    145a:	8f 83       	std	Y+7, r24	; 0x07
    145c:	4b 01       	movw	r8, r22
    145e:	3a 01       	movw	r6, r20
    1460:	29 01       	movw	r4, r18
    1462:	1c 83       	std	Y+4, r17	; 0x04
    1464:	0b 83       	std	Y+3, r16	; 0x03
    1466:	1e 2d       	mov	r17, r14
   SetPixel(xx+x,yy+y,red,green,blue);
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	24 0f       	add	r18, r20
    146e:	35 1f       	adc	r19, r21
    1470:	3a 83       	std	Y+2, r19	; 0x02
    1472:	29 83       	std	Y+1, r18	; 0x01
    1474:	1b 01       	movw	r2, r22
    1476:	24 0c       	add	r2, r4
    1478:	35 1c       	adc	r3, r5
    147a:	ea 2c       	mov	r14, r10
    147c:	0c 2d       	mov	r16, r12
    147e:	21 2f       	mov	r18, r17
    1480:	49 81       	ldd	r20, Y+1	; 0x01
    1482:	5a 81       	ldd	r21, Y+2	; 0x02
    1484:	b1 01       	movw	r22, r2
    1486:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx+x,yy-y,red,green,blue);
    148a:	c3 01       	movw	r24, r6
    148c:	eb 81       	ldd	r30, Y+3	; 0x03
    148e:	fc 81       	ldd	r31, Y+4	; 0x04
    1490:	8e 1b       	sub	r24, r30
    1492:	9f 0b       	sbc	r25, r31
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	21 2f       	mov	r18, r17
    149a:	ac 01       	movw	r20, r24
    149c:	b1 01       	movw	r22, r2
    149e:	8f 81       	ldd	r24, Y+7	; 0x07
    14a0:	98 85       	ldd	r25, Y+8	; 0x08
    14a2:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx-x,yy+y,red,green,blue);
    14a6:	14 01       	movw	r2, r8
    14a8:	24 18       	sub	r2, r4
    14aa:	35 08       	sbc	r3, r5
    14ac:	21 2f       	mov	r18, r17
    14ae:	49 81       	ldd	r20, Y+1	; 0x01
    14b0:	5a 81       	ldd	r21, Y+2	; 0x02
    14b2:	b1 01       	movw	r22, r2
    14b4:	8f 81       	ldd	r24, Y+7	; 0x07
    14b6:	98 85       	ldd	r25, Y+8	; 0x08
    14b8:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx-x,yy-y,red,green,blue);
    14bc:	21 2f       	mov	r18, r17
    14be:	4d 81       	ldd	r20, Y+5	; 0x05
    14c0:	5e 81       	ldd	r21, Y+6	; 0x06
    14c2:	b1 01       	movw	r22, r2
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	98 85       	ldd	r25, Y+8	; 0x08
    14c8:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx+y,yy+x,red,green,blue);
    14cc:	93 01       	movw	r18, r6
    14ce:	24 0d       	add	r18, r4
    14d0:	35 1d       	adc	r19, r5
    14d2:	3a 83       	std	Y+2, r19	; 0x02
    14d4:	29 83       	std	Y+1, r18	; 0x01
    14d6:	2b 80       	ldd	r2, Y+3	; 0x03
    14d8:	3c 80       	ldd	r3, Y+4	; 0x04
    14da:	28 0c       	add	r2, r8
    14dc:	39 1c       	adc	r3, r9
    14de:	21 2f       	mov	r18, r17
    14e0:	49 81       	ldd	r20, Y+1	; 0x01
    14e2:	5a 81       	ldd	r21, Y+2	; 0x02
    14e4:	b1 01       	movw	r22, r2
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	98 85       	ldd	r25, Y+8	; 0x08
    14ea:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx+y,yy-x,red,green,blue);
    14ee:	64 18       	sub	r6, r4
    14f0:	75 08       	sbc	r7, r5
    14f2:	21 2f       	mov	r18, r17
    14f4:	a3 01       	movw	r20, r6
    14f6:	b1 01       	movw	r22, r2
    14f8:	8f 81       	ldd	r24, Y+7	; 0x07
    14fa:	98 85       	ldd	r25, Y+8	; 0x08
    14fc:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx-y,yy+x,red,green,blue);
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	88 1a       	sub	r8, r24
    1506:	99 0a       	sbc	r9, r25
    1508:	21 2f       	mov	r18, r17
    150a:	49 81       	ldd	r20, Y+1	; 0x01
    150c:	5a 81       	ldd	r21, Y+2	; 0x02
    150e:	b4 01       	movw	r22, r8
    1510:	8f 81       	ldd	r24, Y+7	; 0x07
    1512:	98 85       	ldd	r25, Y+8	; 0x08
    1514:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
   SetPixel(xx-y,yy-x,red,green,blue);
    1518:	21 2f       	mov	r18, r17
    151a:	a3 01       	movw	r20, r6
    151c:	b4 01       	movw	r22, r8
    151e:	8f 81       	ldd	r24, Y+7	; 0x07
    1520:	98 85       	ldd	r25, Y+8	; 0x08
    1522:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
}
    1526:	28 96       	adiw	r28, 0x08	; 8
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ef 90       	pop	r14
    153c:	cf 90       	pop	r12
    153e:	af 90       	pop	r10
    1540:	9f 90       	pop	r9
    1542:	8f 90       	pop	r8
    1544:	7f 90       	pop	r7
    1546:	6f 90       	pop	r6
    1548:	5f 90       	pop	r5
    154a:	4f 90       	pop	r4
    154c:	3f 90       	pop	r3
    154e:	2f 90       	pop	r2
    1550:	08 95       	ret

00001552 <_ZN16class_GraphBasic6CircleEiiihhh>:
//	| INPUT   :  px,py coords at radius using r,g,b values for color                |
//	| OUTPUT  :                                                                     |
//	| REMARKS : using Bresenham algorithm                       	                |
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::Circle(int px,int py,int radius,uint8_t red,uint8_t green,uint8_t blue)
{
    1552:	2f 92       	push	r2
    1554:	3f 92       	push	r3
    1556:	4f 92       	push	r4
    1558:	5f 92       	push	r5
    155a:	6f 92       	push	r6
    155c:	7f 92       	push	r7
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	00 d0       	rcall	.+0      	; 0x1578 <_ZN16class_GraphBasic6CircleEiiihhh+0x26>
    1578:	00 d0       	rcall	.+0      	; 0x157a <_ZN16class_GraphBasic6CircleEiiihhh+0x28>
    157a:	00 d0       	rcall	.+0      	; 0x157c <_ZN16class_GraphBasic6CircleEiiihhh+0x2a>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	1b 01       	movw	r2, r22
    1586:	5c 83       	std	Y+4, r21	; 0x04
    1588:	4b 83       	std	Y+3, r20	; 0x03
    158a:	39 01       	movw	r6, r18
    158c:	b0 2e       	mov	r11, r16
    158e:	de 2c       	mov	r13, r14
    1590:	fc 2c       	mov	r15, r12
    int x,y,d;

    x=0;
    y=radius;
    d=3-2*radius;
    1592:	88 27       	eor	r24, r24
    1594:	99 27       	eor	r25, r25
    1596:	82 1b       	sub	r24, r18
    1598:	93 0b       	sbc	r25, r19
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	9c 01       	movw	r18, r24
    15a0:	2d 5f       	subi	r18, 0xFD	; 253
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	3e 83       	std	Y+6, r19	; 0x06
    15a6:	2d 83       	std	Y+5, r18	; 0x05
    while (x<y) {
    15a8:	46 e0       	ldi	r20, 0x06	; 6
    15aa:	44 2e       	mov	r4, r20
    15ac:	51 2c       	mov	r5, r1
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::Circle(int px,int py,int radius,uint8_t red,uint8_t green,uint8_t blue)
{
    int x,y,d;

    x=0;
    15ae:	81 2c       	mov	r8, r1
    15b0:	91 2c       	mov	r9, r1
    y=radius;
    d=3-2*radius;
    while (x<y) {
    15b2:	86 14       	cp	r8, r6
    15b4:	97 04       	cpc	r9, r7
    15b6:	6c f5       	brge	.+90     	; 0x1612 <_ZN16class_GraphBasic6CircleEiiihhh+0xc0>
       PlotP8(px,py,x,y,red,green,blue);
    15b8:	af 2c       	mov	r10, r15
    15ba:	cd 2c       	mov	r12, r13
    15bc:	eb 2c       	mov	r14, r11
    15be:	83 01       	movw	r16, r6
    15c0:	94 01       	movw	r18, r8
    15c2:	4b 81       	ldd	r20, Y+3	; 0x03
    15c4:	5c 81       	ldd	r21, Y+4	; 0x04
    15c6:	b1 01       	movw	r22, r2
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN16class_GraphBasic6PlotP8Eiiiihhh>
       if (d<0) {
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	97 ff       	sbrs	r25, 7
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <_ZN16class_GraphBasic6CircleEiiihhh+0x90>
          d+=4*x+6; }
    15d8:	84 0d       	add	r24, r4
    15da:	95 1d       	adc	r25, r5
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	11 c0       	rjmp	.+34     	; 0x1604 <_ZN16class_GraphBasic6CircleEiiihhh+0xb2>
       else {
          d+=4*(x-y)+10;
    15e2:	c4 01       	movw	r24, r8
    15e4:	86 19       	sub	r24, r6
    15e6:	97 09       	sbc	r25, r7
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 96       	adiw	r24, 0x0a	; 10
    15f2:	ed 81       	ldd	r30, Y+5	; 0x05
    15f4:	fe 81       	ldd	r31, Y+6	; 0x06
    15f6:	e8 0f       	add	r30, r24
    15f8:	f9 1f       	adc	r31, r25
    15fa:	fe 83       	std	Y+6, r31	; 0x06
    15fc:	ed 83       	std	Y+5, r30	; 0x05
          y--;
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	6f 1a       	sub	r6, r31
    1602:	71 08       	sbc	r7, r1
       }
       x++;
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	82 1a       	sub	r8, r18
    1608:	92 0a       	sbc	r9, r18
    160a:	34 e0       	ldi	r19, 0x04	; 4
    160c:	43 0e       	add	r4, r19
    160e:	51 1c       	adc	r5, r1
    1610:	d0 cf       	rjmp	.-96     	; 0x15b2 <_ZN16class_GraphBasic6CircleEiiihhh+0x60>
    }
    if (x==y) PlotP8(px,py,x,y,red,green,blue);
    1612:	86 14       	cp	r8, r6
    1614:	97 04       	cpc	r9, r7
    1616:	61 f4       	brne	.+24     	; 0x1630 <_ZN16class_GraphBasic6CircleEiiihhh+0xde>
    1618:	af 2c       	mov	r10, r15
    161a:	cd 2c       	mov	r12, r13
    161c:	eb 2c       	mov	r14, r11
    161e:	84 01       	movw	r16, r8
    1620:	94 01       	movw	r18, r8
    1622:	4b 81       	ldd	r20, Y+3	; 0x03
    1624:	5c 81       	ldd	r21, Y+4	; 0x04
    1626:	b1 01       	movw	r22, r2
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	0e 94 15 0a 	call	0x142a	; 0x142a <_ZN16class_GraphBasic6PlotP8Eiiiihhh>
}
    1630:	26 96       	adiw	r28, 0x06	; 6
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	3f 90       	pop	r3
    165e:	2f 90       	pop	r2
    1660:	08 95       	ret

00001662 <_ZN16class_GraphBasic7RotateXEiiiib>:
//	| INPUT   :                     						                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS : if xi<xf rotate Left else rotate right        		                |
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::RotateX(int xi,int xf,int yi,int yf,bool shiftOnly)
{
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	28 97       	sbiw	r28, 0x08	; 8
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	6c 01       	movw	r12, r24
    1698:	9e 2c       	mov	r9, r14
    169a:	1b 01       	movw	r2, r22
    169c:	77 ff       	sbrs	r23, 7
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN16class_GraphBasic7RotateXEiiiib+0x42>
    16a0:	21 2c       	mov	r2, r1
    16a2:	31 2c       	mov	r3, r1
    16a4:	2a 01       	movw	r4, r20
    16a6:	57 ff       	sbrs	r21, 7
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <_ZN16class_GraphBasic7RotateXEiiiib+0x4c>
    16aa:	41 2c       	mov	r4, r1
    16ac:	51 2c       	mov	r5, r1
    16ae:	f6 01       	movw	r30, r12
    16b0:	84 85       	ldd	r24, Z+12	; 0x0c
    16b2:	95 85       	ldd	r25, Z+13	; 0x0d
    //return if y coords outof range
    //check if in range
	//X
    if (xi<0) xi=0;
    if (xf<0) xf=0;
    if (xi>MaxX()) xi=MaxX();
    16b4:	28 16       	cp	r2, r24
    16b6:	39 06       	cpc	r3, r25
    16b8:	24 f0       	brlt	.+8      	; 0x16c2 <_ZN16class_GraphBasic7RotateXEiiiib+0x60>
    16ba:	1c 01       	movw	r2, r24
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	2f 1a       	sub	r2, r31
    16c0:	31 08       	sbc	r3, r1
    if (xf>MaxX()) xf=MaxX();
    16c2:	48 16       	cp	r4, r24
    16c4:	59 06       	cpc	r5, r25
    16c6:	24 f0       	brlt	.+8      	; 0x16d0 <_ZN16class_GraphBasic7RotateXEiiiib+0x6e>
    16c8:	2c 01       	movw	r4, r24
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	44 1a       	sub	r4, r20
    16ce:	51 08       	sbc	r5, r1
    16d0:	2f 83       	std	Y+7, r18	; 0x07
    16d2:	38 87       	std	Y+8, r19	; 0x08
    16d4:	8f 81       	ldd	r24, Y+7	; 0x07
    16d6:	98 85       	ldd	r25, Y+8	; 0x08
    16d8:	97 ff       	sbrs	r25, 7
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <_ZN16class_GraphBasic7RotateXEiiiib+0x7e>
    16dc:	18 86       	std	Y+8, r1	; 0x08
    16de:	1f 82       	std	Y+7, r1	; 0x07
    16e0:	58 01       	movw	r10, r16
    16e2:	17 ff       	sbrs	r17, 7
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <_ZN16class_GraphBasic7RotateXEiiiib+0x88>
    16e6:	a1 2c       	mov	r10, r1
    16e8:	b1 2c       	mov	r11, r1
    16ea:	f6 01       	movw	r30, r12
    16ec:	82 85       	ldd	r24, Z+10	; 0x0a
    16ee:	93 85       	ldd	r25, Z+11	; 0x0b
	//Y
    if (yi<0) yi=0;
    if (yf<0) yf=0;
    if (yi>MaxY()) yi=MaxY();
    16f0:	2f 81       	ldd	r18, Y+7	; 0x07
    16f2:	38 85       	ldd	r19, Y+8	; 0x08
    16f4:	28 17       	cp	r18, r24
    16f6:	39 07       	cpc	r19, r25
    16f8:	24 f0       	brlt	.+8      	; 0x1702 <_ZN16class_GraphBasic7RotateXEiiiib+0xa0>
		/************************************************************************/
        int     inline MinY(void) {return 0;}
		/************************************************************************/
		/* Return maximum value of y axis                                       */
		/************************************************************************/
        int     inline MaxY(void) { return this->Rows-1;}
    16fa:	fc 01       	movw	r30, r24
    16fc:	31 97       	sbiw	r30, 0x01	; 1
    16fe:	f8 87       	std	Y+8, r31	; 0x08
    1700:	ef 83       	std	Y+7, r30	; 0x07
    if (yf>MaxY()) yf=MaxY();
    1702:	a8 16       	cp	r10, r24
    1704:	b9 06       	cpc	r11, r25
    1706:	24 f0       	brlt	.+8      	; 0x1710 <_ZN16class_GraphBasic7RotateXEiiiib+0xae>
    1708:	5c 01       	movw	r10, r24
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	af 1a       	sub	r10, r31
    170e:	b1 08       	sbc	r11, r1

	//check if yi<yf
	if (yi>yf)
    1710:	2f 81       	ldd	r18, Y+7	; 0x07
    1712:	38 85       	ldd	r19, Y+8	; 0x08
    1714:	a2 16       	cp	r10, r18
    1716:	b3 06       	cpc	r11, r19
    1718:	34 f4       	brge	.+12     	; 0x1726 <_ZN16class_GraphBasic7RotateXEiiiib+0xc4>
    171a:	9f 81       	ldd	r25, Y+7	; 0x07
    171c:	88 85       	ldd	r24, Y+8	; 0x08
    171e:	b8 86       	std	Y+8, r11	; 0x08
    1720:	af 82       	std	Y+7, r10	; 0x07
    1722:	a9 2e       	mov	r10, r25
    1724:	b8 2e       	mov	r11, r24
				SetPixel(i,y,GetPixel(i-1,y));
			if (!shiftOnly) SetPixel(xf,y,colorTmp);
		}
		else
		{
			if ((xf-xi)<1) return;
    1726:	c2 01       	movw	r24, r4
    1728:	82 19       	sub	r24, r2
    172a:	93 09       	sbc	r25, r3
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
	for(int y=yi;y<=yf;y++)
	{
		//check if rotate left or right
		if (xi>xf)
		{
			if ((xi-xf)<1) return;
    1730:	f1 01       	movw	r30, r2
    1732:	e4 19       	sub	r30, r4
    1734:	f5 09       	sbc	r31, r5
    1736:	fe 83       	std	Y+6, r31	; 0x06
    1738:	ed 83       	std	Y+5, r30	; 0x05
	{
		int tmp=yi;
		yi=yf;
		yf=tmp;
	}
	for(int y=yi;y<=yf;y++)
    173a:	ef 81       	ldd	r30, Y+7	; 0x07
    173c:	f8 85       	ldd	r31, Y+8	; 0x08
    173e:	ae 16       	cp	r10, r30
    1740:	bf 06       	cpc	r11, r31
    1742:	0c f4       	brge	.+2      	; 0x1746 <_ZN16class_GraphBasic7RotateXEiiiib+0xe4>
    1744:	61 c0       	rjmp	.+194    	; 0x1808 <_ZN16class_GraphBasic7RotateXEiiiib+0x1a6>
	{
		//check if rotate left or right
		if (xi>xf)
    1746:	42 14       	cp	r4, r2
    1748:	53 04       	cpc	r5, r3
    174a:	3c f5       	brge	.+78     	; 0x179a <_ZN16class_GraphBasic7RotateXEiiiib+0x138>
		{
			if ((xi-xf)<1) return;
    174c:	2d 81       	ldd	r18, Y+5	; 0x05
    174e:	3e 81       	ldd	r19, Y+6	; 0x06
    1750:	12 16       	cp	r1, r18
    1752:	13 06       	cpc	r1, r19
    1754:	0c f0       	brlt	.+2      	; 0x1758 <_ZN16class_GraphBasic7RotateXEiiiib+0xf6>
    1756:	58 c0       	rjmp	.+176    	; 0x1808 <_ZN16class_GraphBasic7RotateXEiiiib+0x1a6>
			//+----------------------+
			//|  +-+-+-+-+-+-+-+-+-+ |
			//+->| | | | | | | | | |-+   <--Y
			//   +-+-+-+-+-+-+-+-+-+
			//    xf             xi
			colorTmp=GetPixel(xi,y);
    1758:	4f 81       	ldd	r20, Y+7	; 0x07
    175a:	58 85       	ldd	r21, Y+8	; 0x08
    175c:	b1 01       	movw	r22, r2
    175e:	c6 01       	movw	r24, r12
    1760:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    1764:	3b 01       	movw	r6, r22
    1766:	88 2e       	mov	r8, r24
    1768:	71 01       	movw	r14, r2
			for(int i=xi;i>xf;i--)
				SetPixel(i,y,GetPixel(i-1,y));
    176a:	c7 01       	movw	r24, r14
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	4f 81       	ldd	r20, Y+7	; 0x07
    1774:	58 85       	ldd	r21, Y+8	; 0x08
    1776:	bc 01       	movw	r22, r24
    1778:	c6 01       	movw	r24, r12
    177a:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    177e:	8b 01       	movw	r16, r22
    1780:	28 2f       	mov	r18, r24
    1782:	4f 81       	ldd	r20, Y+7	; 0x07
    1784:	58 85       	ldd	r21, Y+8	; 0x08
    1786:	b7 01       	movw	r22, r14
    1788:	c6 01       	movw	r24, r12
    178a:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
    178e:	e9 80       	ldd	r14, Y+1	; 0x01
    1790:	fa 80       	ldd	r15, Y+2	; 0x02
			//|  +-+-+-+-+-+-+-+-+-+ |
			//+->| | | | | | | | | |-+   <--Y
			//   +-+-+-+-+-+-+-+-+-+
			//    xf             xi
			colorTmp=GetPixel(xi,y);
			for(int i=xi;i>xf;i--)
    1792:	e4 14       	cp	r14, r4
    1794:	f5 04       	cpc	r15, r5
    1796:	49 f7       	brne	.-46     	; 0x176a <_ZN16class_GraphBasic7RotateXEiiiib+0x108>
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <_ZN16class_GraphBasic7RotateXEiiiib+0x186>
				SetPixel(i,y,GetPixel(i-1,y));
			if (!shiftOnly) SetPixel(xf,y,colorTmp);
		}
		else
		{
			if ((xf-xi)<1) return;
    179a:	eb 81       	ldd	r30, Y+3	; 0x03
    179c:	fc 81       	ldd	r31, Y+4	; 0x04
    179e:	1e 16       	cp	r1, r30
    17a0:	1f 06       	cpc	r1, r31
    17a2:	94 f5       	brge	.+100    	; 0x1808 <_ZN16class_GraphBasic7RotateXEiiiib+0x1a6>
			//+----------------------+
			//| +-+-+-+-+-+-+-+-+-+  |
			//+-| | | | | | | | | |<-   <--Y
			//  +-+-+-+-+-+-+-+-+-+
			//   xi             xf
			colorTmp=GetPixel(xi,y);
    17a4:	4f 81       	ldd	r20, Y+7	; 0x07
    17a6:	58 85       	ldd	r21, Y+8	; 0x08
    17a8:	b1 01       	movw	r22, r2
    17aa:	c6 01       	movw	r24, r12
    17ac:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    17b0:	3b 01       	movw	r6, r22
    17b2:	88 2e       	mov	r8, r24
			for(int i=xi;i<xf;i++)
    17b4:	71 01       	movw	r14, r2
    17b6:	e4 14       	cp	r14, r4
    17b8:	f5 04       	cpc	r15, r5
    17ba:	b1 f0       	breq	.+44     	; 0x17e8 <_ZN16class_GraphBasic7RotateXEiiiib+0x186>
				SetPixel(i,y,GetPixel(i+1,y));
    17bc:	97 01       	movw	r18, r14
    17be:	2f 5f       	subi	r18, 0xFF	; 255
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	3a 83       	std	Y+2, r19	; 0x02
    17c4:	29 83       	std	Y+1, r18	; 0x01
    17c6:	4f 81       	ldd	r20, Y+7	; 0x07
    17c8:	58 85       	ldd	r21, Y+8	; 0x08
    17ca:	b9 01       	movw	r22, r18
    17cc:	c6 01       	movw	r24, r12
    17ce:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    17d2:	8b 01       	movw	r16, r22
    17d4:	28 2f       	mov	r18, r24
    17d6:	4f 81       	ldd	r20, Y+7	; 0x07
    17d8:	58 85       	ldd	r21, Y+8	; 0x08
    17da:	b7 01       	movw	r22, r14
    17dc:	c6 01       	movw	r24, r12
    17de:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
			//| +-+-+-+-+-+-+-+-+-+  |
			//+-| | | | | | | | | |<-   <--Y
			//  +-+-+-+-+-+-+-+-+-+
			//   xi             xf
			colorTmp=GetPixel(xi,y);
			for(int i=xi;i<xf;i++)
    17e2:	e9 80       	ldd	r14, Y+1	; 0x01
    17e4:	fa 80       	ldd	r15, Y+2	; 0x02
    17e6:	e7 cf       	rjmp	.-50     	; 0x17b6 <_ZN16class_GraphBasic7RotateXEiiiib+0x154>
				SetPixel(i,y,GetPixel(i+1,y));
			if (!shiftOnly) SetPixel(xf,y,colorTmp);
    17e8:	91 10       	cpse	r9, r1
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <_ZN16class_GraphBasic7RotateXEiiiib+0x19a>
    17ec:	28 2d       	mov	r18, r8
    17ee:	83 01       	movw	r16, r6
    17f0:	4f 81       	ldd	r20, Y+7	; 0x07
    17f2:	58 85       	ldd	r21, Y+8	; 0x08
    17f4:	b2 01       	movw	r22, r4
    17f6:	c6 01       	movw	r24, r12
    17f8:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
	{
		int tmp=yi;
		yi=yf;
		yf=tmp;
	}
	for(int y=yi;y<=yf;y++)
    17fc:	8f 81       	ldd	r24, Y+7	; 0x07
    17fe:	98 85       	ldd	r25, Y+8	; 0x08
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	98 87       	std	Y+8, r25	; 0x08
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	99 cf       	rjmp	.-206    	; 0x173a <_ZN16class_GraphBasic7RotateXEiiiib+0xd8>
			for(int i=xi;i<xf;i++)
				SetPixel(i,y,GetPixel(i+1,y));
			if (!shiftOnly) SetPixel(xf,y,colorTmp);
		}
	}
}
    1808:	28 96       	adiw	r28, 0x08	; 8
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	bf 90       	pop	r11
    1826:	af 90       	pop	r10
    1828:	9f 90       	pop	r9
    182a:	8f 90       	pop	r8
    182c:	7f 90       	pop	r7
    182e:	6f 90       	pop	r6
    1830:	5f 90       	pop	r5
    1832:	4f 90       	pop	r4
    1834:	3f 90       	pop	r3
    1836:	2f 90       	pop	r2
    1838:	08 95       	ret

0000183a <_ZN16class_GraphBasic7RotateYEiiiib>:
//	| INPUT   :                     						                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS : if yi<yf rotate up else roate down           		                |
//	+-------------------------------------------------------------------------------+
void class_GraphBasic::RotateY(int xi,int xf,int yi,int yf,bool shiftOnly)
{
    183a:	2f 92       	push	r2
    183c:	3f 92       	push	r3
    183e:	4f 92       	push	r4
    1840:	5f 92       	push	r5
    1842:	6f 92       	push	r6
    1844:	7f 92       	push	r7
    1846:	8f 92       	push	r8
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	28 97       	sbiw	r28, 0x08	; 8
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	6c 01       	movw	r12, r24
    1870:	9e 2c       	mov	r9, r14
    1872:	6f 83       	std	Y+7, r22	; 0x07
    1874:	78 87       	std	Y+8, r23	; 0x08
    1876:	8f 81       	ldd	r24, Y+7	; 0x07
    1878:	98 85       	ldd	r25, Y+8	; 0x08
    187a:	97 ff       	sbrs	r25, 7
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <_ZN16class_GraphBasic7RotateYEiiiib+0x48>
    187e:	18 86       	std	Y+8, r1	; 0x08
    1880:	1f 82       	std	Y+7, r1	; 0x07
    1882:	5a 01       	movw	r10, r20
    1884:	57 ff       	sbrs	r21, 7
    1886:	02 c0       	rjmp	.+4      	; 0x188c <_ZN16class_GraphBasic7RotateYEiiiib+0x52>
    1888:	a1 2c       	mov	r10, r1
    188a:	b1 2c       	mov	r11, r1
    188c:	f6 01       	movw	r30, r12
    188e:	84 85       	ldd	r24, Z+12	; 0x0c
    1890:	95 85       	ldd	r25, Z+13	; 0x0d
	//return if y coords out of range
	//check if in range
	//X
	if (xi<0) xi=0;
	if (xf<0) xf=0;
	if (xi>MaxX()) xi=MaxX();
    1892:	4f 81       	ldd	r20, Y+7	; 0x07
    1894:	58 85       	ldd	r21, Y+8	; 0x08
    1896:	48 17       	cp	r20, r24
    1898:	59 07       	cpc	r21, r25
    189a:	24 f0       	brlt	.+8      	; 0x18a4 <_ZN16class_GraphBasic7RotateYEiiiib+0x6a>
		/************************************************************************/
        int     inline MinX(void) { return 0;}
		/************************************************************************/
		/* Return maximum value of x axis                                       */
		/************************************************************************/
        int     inline MaxX(void) { return this->Cols-1;}
    189c:	fc 01       	movw	r30, r24
    189e:	31 97       	sbiw	r30, 0x01	; 1
    18a0:	f8 87       	std	Y+8, r31	; 0x08
    18a2:	ef 83       	std	Y+7, r30	; 0x07
	if (xf>MaxX()) xf=MaxX();
    18a4:	a8 16       	cp	r10, r24
    18a6:	b9 06       	cpc	r11, r25
    18a8:	24 f0       	brlt	.+8      	; 0x18b2 <_ZN16class_GraphBasic7RotateYEiiiib+0x78>
    18aa:	5c 01       	movw	r10, r24
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
    18ae:	af 1a       	sub	r10, r31
    18b0:	b1 08       	sbc	r11, r1
    18b2:	19 01       	movw	r2, r18
    18b4:	37 ff       	sbrs	r19, 7
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <_ZN16class_GraphBasic7RotateYEiiiib+0x82>
    18b8:	21 2c       	mov	r2, r1
    18ba:	31 2c       	mov	r3, r1
    18bc:	28 01       	movw	r4, r16
    18be:	17 ff       	sbrs	r17, 7
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <_ZN16class_GraphBasic7RotateYEiiiib+0x8c>
    18c2:	41 2c       	mov	r4, r1
    18c4:	51 2c       	mov	r5, r1
    18c6:	f6 01       	movw	r30, r12
    18c8:	82 85       	ldd	r24, Z+10	; 0x0a
    18ca:	93 85       	ldd	r25, Z+11	; 0x0b
	//Y
	if (yi<0) yi=0;
	if (yf<0) yf=0;
	if (yi>MaxY()) yi=MaxY();
    18cc:	28 16       	cp	r2, r24
    18ce:	39 06       	cpc	r3, r25
    18d0:	24 f0       	brlt	.+8      	; 0x18da <_ZN16class_GraphBasic7RotateYEiiiib+0xa0>
		/************************************************************************/
        int     inline MinY(void) {return 0;}
		/************************************************************************/
		/* Return maximum value of y axis                                       */
		/************************************************************************/
        int     inline MaxY(void) { return this->Rows-1;}
    18d2:	1c 01       	movw	r2, r24
    18d4:	f1 e0       	ldi	r31, 0x01	; 1
    18d6:	2f 1a       	sub	r2, r31
    18d8:	31 08       	sbc	r3, r1
	if (yf>MaxY()) yf=MaxY();
    18da:	48 16       	cp	r4, r24
    18dc:	59 06       	cpc	r5, r25
    18de:	24 f0       	brlt	.+8      	; 0x18e8 <_ZN16class_GraphBasic7RotateYEiiiib+0xae>
    18e0:	2c 01       	movw	r4, r24
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	42 1a       	sub	r4, r18
    18e6:	51 08       	sbc	r5, r1

	//check if xi<xf
	if (xi>xf)
    18e8:	4f 81       	ldd	r20, Y+7	; 0x07
    18ea:	58 85       	ldd	r21, Y+8	; 0x08
    18ec:	a4 16       	cp	r10, r20
    18ee:	b5 06       	cpc	r11, r21
    18f0:	34 f4       	brge	.+12     	; 0x18fe <_ZN16class_GraphBasic7RotateYEiiiib+0xc4>
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	88 85       	ldd	r24, Y+8	; 0x08
    18f6:	b8 86       	std	Y+8, r11	; 0x08
    18f8:	af 82       	std	Y+7, r10	; 0x07
    18fa:	a9 2e       	mov	r10, r25
    18fc:	b8 2e       	mov	r11, r24
			SetPixel(x,i,GetPixel(x,i-1));
			if (!shiftOnly) SetPixel(x,yf,colorTmp);
		}
		else
		{
			if ((yf-yi)<1) return;
    18fe:	c2 01       	movw	r24, r4
    1900:	82 19       	sub	r24, r2
    1902:	93 09       	sbc	r25, r3
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
	for(int x=xi;x<=xf;x++)
	{
		//check if rotate up or down
		if (yi>yf)
		{
			if ((yi-yf)<1) return;
    1908:	f1 01       	movw	r30, r2
    190a:	e4 19       	sub	r30, r4
    190c:	f5 09       	sbc	r31, r5
    190e:	fe 83       	std	Y+6, r31	; 0x06
    1910:	ed 83       	std	Y+5, r30	; 0x05
	{
		int tmp=xi;
		xi=xf;
		xf=tmp;
	}
	for(int x=xi;x<=xf;x++)
    1912:	ef 81       	ldd	r30, Y+7	; 0x07
    1914:	f8 85       	ldd	r31, Y+8	; 0x08
    1916:	ae 16       	cp	r10, r30
    1918:	bf 06       	cpc	r11, r31
    191a:	0c f4       	brge	.+2      	; 0x191e <_ZN16class_GraphBasic7RotateYEiiiib+0xe4>
    191c:	60 c0       	rjmp	.+192    	; 0x19de <_ZN16class_GraphBasic7RotateYEiiiib+0x1a4>
	{
		//check if rotate up or down
		if (yi>yf)
    191e:	42 14       	cp	r4, r2
    1920:	53 04       	cpc	r5, r3
    1922:	3c f5       	brge	.+78     	; 0x1972 <_ZN16class_GraphBasic7RotateYEiiiib+0x138>
		{
			if ((yi-yf)<1) return;
    1924:	4d 81       	ldd	r20, Y+5	; 0x05
    1926:	5e 81       	ldd	r21, Y+6	; 0x06
    1928:	14 16       	cp	r1, r20
    192a:	15 06       	cpc	r1, r21
    192c:	0c f0       	brlt	.+2      	; 0x1930 <_ZN16class_GraphBasic7RotateYEiiiib+0xf6>
    192e:	57 c0       	rjmp	.+174    	; 0x19de <_ZN16class_GraphBasic7RotateYEiiiib+0x1a4>
			//	  |   |  | yf
			//	  +---+  |
			//		^    |
			//	    +----+
			//      x
			colorTmp=GetPixel(x,yi);
    1930:	a1 01       	movw	r20, r2
    1932:	6f 81       	ldd	r22, Y+7	; 0x07
    1934:	78 85       	ldd	r23, Y+8	; 0x08
    1936:	c6 01       	movw	r24, r12
    1938:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    193c:	3b 01       	movw	r6, r22
    193e:	88 2e       	mov	r8, r24
    1940:	71 01       	movw	r14, r2
			for(int i=yi;i>yf;i--)
			SetPixel(x,i,GetPixel(x,i-1));
    1942:	c7 01       	movw	r24, r14
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	ac 01       	movw	r20, r24
    194c:	6f 81       	ldd	r22, Y+7	; 0x07
    194e:	78 85       	ldd	r23, Y+8	; 0x08
    1950:	c6 01       	movw	r24, r12
    1952:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    1956:	8b 01       	movw	r16, r22
    1958:	28 2f       	mov	r18, r24
    195a:	a7 01       	movw	r20, r14
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	c6 01       	movw	r24, r12
    1962:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
    1966:	e9 80       	ldd	r14, Y+1	; 0x01
    1968:	fa 80       	ldd	r15, Y+2	; 0x02
			//	  +---+  |
			//		^    |
			//	    +----+
			//      x
			colorTmp=GetPixel(x,yi);
			for(int i=yi;i>yf;i--)
    196a:	e4 14       	cp	r14, r4
    196c:	f5 04       	cpc	r15, r5
    196e:	49 f7       	brne	.-46     	; 0x1942 <_ZN16class_GraphBasic7RotateYEiiiib+0x108>
    1970:	26 c0       	rjmp	.+76     	; 0x19be <_ZN16class_GraphBasic7RotateYEiiiib+0x184>
			SetPixel(x,i,GetPixel(x,i-1));
			if (!shiftOnly) SetPixel(x,yf,colorTmp);
		}
		else
		{
			if ((yf-yi)<1) return;
    1972:	eb 81       	ldd	r30, Y+3	; 0x03
    1974:	fc 81       	ldd	r31, Y+4	; 0x04
    1976:	1e 16       	cp	r1, r30
    1978:	1f 06       	cpc	r1, r31
    197a:	8c f5       	brge	.+98     	; 0x19de <_ZN16class_GraphBasic7RotateYEiiiib+0x1a4>
			//	  |   |  | yf
			//	  +---+  |
			//		|    |
			//	    +----+
			//      x
			colorTmp=GetPixel(x,yi);
    197c:	a1 01       	movw	r20, r2
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	c6 01       	movw	r24, r12
    1984:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    1988:	3b 01       	movw	r6, r22
    198a:	88 2e       	mov	r8, r24
			for(int i=yi;i<yf;i++)
    198c:	71 01       	movw	r14, r2
    198e:	e4 14       	cp	r14, r4
    1990:	f5 04       	cpc	r15, r5
    1992:	a9 f0       	breq	.+42     	; 0x19be <_ZN16class_GraphBasic7RotateYEiiiib+0x184>
			SetPixel(x,i,GetPixel(x,i+1));
    1994:	a7 01       	movw	r20, r14
    1996:	4f 5f       	subi	r20, 0xFF	; 255
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	5a 83       	std	Y+2, r21	; 0x02
    199c:	49 83       	std	Y+1, r20	; 0x01
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	c6 01       	movw	r24, r12
    19a4:	0e 94 0c 08 	call	0x1018	; 0x1018 <_ZN16class_GraphBasic8GetPixelEii>
    19a8:	8b 01       	movw	r16, r22
    19aa:	28 2f       	mov	r18, r24
    19ac:	a7 01       	movw	r20, r14
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	c6 01       	movw	r24, r12
    19b4:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
			//	  +---+  |
			//		|    |
			//	    +----+
			//      x
			colorTmp=GetPixel(x,yi);
			for(int i=yi;i<yf;i++)
    19b8:	e9 80       	ldd	r14, Y+1	; 0x01
    19ba:	fa 80       	ldd	r15, Y+2	; 0x02
    19bc:	e8 cf       	rjmp	.-48     	; 0x198e <_ZN16class_GraphBasic7RotateYEiiiib+0x154>
			SetPixel(x,i,GetPixel(x,i+1));
			if (!shiftOnly) SetPixel(x,yf,colorTmp);
    19be:	91 10       	cpse	r9, r1
    19c0:	08 c0       	rjmp	.+16     	; 0x19d2 <_ZN16class_GraphBasic7RotateYEiiiib+0x198>
    19c2:	28 2d       	mov	r18, r8
    19c4:	83 01       	movw	r16, r6
    19c6:	a2 01       	movw	r20, r4
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	c6 01       	movw	r24, r12
    19ce:	0e 94 ff 07 	call	0xffe	; 0xffe <_ZN16class_GraphBasic8SetPixelEii5Color>
	{
		int tmp=xi;
		xi=xf;
		xf=tmp;
	}
	for(int x=xi;x<=xf;x++)
    19d2:	8f 81       	ldd	r24, Y+7	; 0x07
    19d4:	98 85       	ldd	r25, Y+8	; 0x08
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	98 87       	std	Y+8, r25	; 0x08
    19da:	8f 83       	std	Y+7, r24	; 0x07
    19dc:	9a cf       	rjmp	.-204    	; 0x1912 <_ZN16class_GraphBasic7RotateYEiiiib+0xd8>
			for(int i=yi;i<yf;i++)
			SetPixel(x,i,GetPixel(x,i+1));
			if (!shiftOnly) SetPixel(x,yf,colorTmp);
		}
	}
}
    19de:	28 96       	adiw	r28, 0x08	; 8
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	5f 90       	pop	r5
    1a08:	4f 90       	pop	r4
    1a0a:	3f 90       	pop	r3
    1a0c:	2f 90       	pop	r2
    1a0e:	08 95       	ret

00001a10 <_ZN16class_GraphBasic4ShowEv>:
//	| INPUT   :                                 			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :  Interrupts are disabled and restore        		                |
//	+-------------------------------------------------------------------------------+
void    class_GraphBasic::Show()
{
    1a10:	8f 92       	push	r8
    1a12:	9f 92       	push	r9
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	8c 01       	movw	r16, r24
    uint8_t     sreg;
    Color       *ColorPtr;
    uint16_t    bufEnd;

    //save sreg state
    sreg=SREG;
    1a28:	df b6       	in	r13, 0x3f	; 63
    //disable interrupts
    cli();
    1a2a:	f8 94       	cli
    //show all values in buffer
    //reset panel
    Reset();
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	ed 91       	ld	r30, X+
    1a30:	fc 91       	ld	r31, X
    1a32:	01 90       	ld	r0, Z+
    1a34:	f0 81       	ld	r31, Z
    1a36:	e0 2d       	mov	r30, r0
    1a38:	09 95       	icall
    //set to first value
    ColorPtr=this->ColorBuffer;
    bufEnd=this->Rows*this->Cols;
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	22 85       	ldd	r18, Z+10	; 0x0a
    1a3e:	33 85       	ldd	r19, Z+11	; 0x0b
    1a40:	84 85       	ldd	r24, Z+12	; 0x0c
    1a42:	95 85       	ldd	r25, Z+13	; 0x0d
    1a44:	28 9f       	mul	r18, r24
    1a46:	50 01       	movw	r10, r0
    1a48:	29 9f       	mul	r18, r25
    1a4a:	b0 0c       	add	r11, r0
    1a4c:	38 9f       	mul	r19, r24
    1a4e:	b0 0c       	add	r11, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	c2 81       	ldd	r28, Z+2	; 0x02
    1a54:	d3 81       	ldd	r29, Z+3	; 0x03
    1a56:	22 96       	adiw	r28, 0x02	; 2
    //show all values
    for(uint16_t i=0;i<bufEnd;i++)
    1a58:	e1 2c       	mov	r14, r1
    1a5a:	f1 2c       	mov	r15, r1
    1a5c:	ea 14       	cp	r14, r10
    1a5e:	fb 04       	cpc	r15, r11
    1a60:	a9 f0       	breq	.+42     	; 0x1a8c <_ZN16class_GraphBasic4ShowEv+0x7c>
    {
        WriteRGBtoDevice(ColorPtr->red,ColorPtr->green,ColorPtr->blue);
    1a62:	d8 01       	movw	r26, r16
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	de 01       	movw	r26, r28
    1a6e:	12 97       	sbiw	r26, 0x02	; 2
    1a70:	82 80       	ldd	r8, Z+2	; 0x02
    1a72:	93 80       	ldd	r9, Z+3	; 0x03
    1a74:	28 81       	ld	r18, Y
    1a76:	fc 01       	movw	r30, r24
    1a78:	40 81       	ld	r20, Z
    1a7a:	6c 91       	ld	r22, X
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	f4 01       	movw	r30, r8
    1a80:	09 95       	icall
    Reset();
    //set to first value
    ColorPtr=this->ColorBuffer;
    bufEnd=this->Rows*this->Cols;
    //show all values
    for(uint16_t i=0;i<bufEnd;i++)
    1a82:	ff ef       	ldi	r31, 0xFF	; 255
    1a84:	ef 1a       	sub	r14, r31
    1a86:	ff 0a       	sbc	r15, r31
    1a88:	23 96       	adiw	r28, 0x03	; 3
    1a8a:	e8 cf       	rjmp	.-48     	; 0x1a5c <_ZN16class_GraphBasic4ShowEv+0x4c>
    {
        WriteRGBtoDevice(ColorPtr->red,ColorPtr->green,ColorPtr->blue);
        ColorPtr++;
    }
    //restore sreg state
    SREG=sreg;
    1a8c:	df be       	out	0x3f, r13	; 63
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	df 90       	pop	r13
    1a9c:	bf 90       	pop	r11
    1a9e:	af 90       	pop	r10
    1aa0:	9f 90       	pop	r9
    1aa2:	8f 90       	pop	r8
    1aa4:	08 95       	ret

00001aa6 <_ZN16class_GraphBasic6LocateEii>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :                                                		                |
//	+-------------------------------------------------------------------------------+
void  class_GraphBasic::Locate(int x,int y)
{
    this->X=x;
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	77 87       	std	Z+15, r23	; 0x0f
    1aaa:	66 87       	std	Z+14, r22	; 0x0e
    this->Y=y;
    1aac:	51 8b       	std	Z+17, r21	; 0x11
    1aae:	40 8b       	std	Z+16, r20	; 0x10
    1ab0:	08 95       	ret

00001ab2 <_ZN16class_GraphBasic4PutCEcb>:
//	| INPUT   :                                 			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :  forecolor define a character color            		                |
//	+-------------------------------------------------------------------------------+
void  class_GraphBasic::PutC(char c,bool useBackColor)
{
    1ab2:	7f 92       	push	r7
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	bf 92       	push	r11
    1abc:	cf 92       	push	r12
    1abe:	df 92       	push	r13
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
#elif defined(_GRAPH_BIG_CHAR_SIZE_)
	uint8_t b,mask;
	uint16_t  index;

	//check if in range
	if (c>=' ' && c<='~')
    1acc:	60 52       	subi	r22, 0x20	; 32
    1ace:	6f 35       	cpi	r22, 0x5F	; 95
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <_ZN16class_GraphBasic4PutCEcb+0x22>
    1ad2:	45 c0       	rjmp	.+138    	; 0x1b5e <_ZN16class_GraphBasic4PutCEcb+0xac>
    1ad4:	f4 2e       	mov	r15, r20
    1ad6:	ec 01       	movw	r28, r24
	{
		//translate ascii to binary
		c-=' ';
		index=(c*8);
    1ad8:	88 e0       	ldi	r24, 0x08	; 8
    1ada:	68 9f       	mul	r22, r24
    1adc:	50 01       	movw	r10, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	c1 2c       	mov	r12, r1
    1ae2:	d1 2c       	mov	r13, r1
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	ea 0d       	add	r30, r10
    1ae8:	fb 1d       	adc	r31, r11
    1aea:	ea 57       	subi	r30, 0x7A	; 122
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
		//draw chars
		for(uint8_t j=0;j<8;j++)
		{
			mask=0x80;
			b=pgm_read_byte(&_ASCII_Table[index++]);
    1aee:	14 91       	lpm	r17, Z
    1af0:	81 2c       	mov	r8, r1
    1af2:	91 2c       	mov	r9, r1
		c-=' ';
		index=(c*8);
		//draw chars
		for(uint8_t j=0;j<8;j++)
		{
			mask=0x80;
    1af4:	80 e8       	ldi	r24, 0x80	; 128
    1af6:	78 2e       	mov	r7, r24
			b=pgm_read_byte(&_ASCII_Table[index++]);
			for(uint8_t i=0;i<5;i++)
			{
				if ((b & mask)!=0)
    1af8:	87 2d       	mov	r24, r7
    1afa:	81 23       	and	r24, r17
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <_ZN16class_GraphBasic4PutCEcb+0x64>
				{
					SetPixel(this->X+i,this->Y+j);
    1afe:	48 89       	ldd	r20, Y+16	; 0x10
    1b00:	59 89       	ldd	r21, Y+17	; 0x11
    1b02:	4c 0d       	add	r20, r12
    1b04:	5d 1d       	adc	r21, r13
    1b06:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b08:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b0a:	68 0d       	add	r22, r8
    1b0c:	79 1d       	adc	r23, r9
    1b0e:	ce 01       	movw	r24, r28
    1b10:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZN16class_GraphBasic8SetPixelEii>
    1b14:	10 c0       	rjmp	.+32     	; 0x1b36 <_ZN16class_GraphBasic4PutCEcb+0x84>
				}
				else
				{
					if (useBackColor) SetPixel(this->X+i,this->Y+j,this->BackColor.red,this->BackColor.green,this->BackColor.blue);
    1b16:	ff 20       	and	r15, r15
    1b18:	71 f0       	breq	.+28     	; 0x1b36 <_ZN16class_GraphBasic4PutCEcb+0x84>
    1b1a:	48 89       	ldd	r20, Y+16	; 0x10
    1b1c:	59 89       	ldd	r21, Y+17	; 0x11
    1b1e:	4c 0d       	add	r20, r12
    1b20:	5d 1d       	adc	r21, r13
    1b22:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b24:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b26:	68 0d       	add	r22, r8
    1b28:	79 1d       	adc	r23, r9
    1b2a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b2c:	0d 81       	ldd	r16, Y+5	; 0x05
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	ce 01       	movw	r24, r28
    1b32:	0e 94 ca 07 	call	0xf94	; 0xf94 <_ZN16class_GraphBasic8SetPixelEiihhh>
				}
				mask>>=1;
    1b36:	76 94       	lsr	r7
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	88 1a       	sub	r8, r24
    1b3c:	98 0a       	sbc	r9, r24
		//draw chars
		for(uint8_t j=0;j<8;j++)
		{
			mask=0x80;
			b=pgm_read_byte(&_ASCII_Table[index++]);
			for(uint8_t i=0;i<5;i++)
    1b3e:	85 e0       	ldi	r24, 0x05	; 5
    1b40:	88 16       	cp	r8, r24
    1b42:	91 04       	cpc	r9, r1
    1b44:	c9 f6       	brne	.-78     	; 0x1af8 <_ZN16class_GraphBasic4PutCEcb+0x46>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	c8 1a       	sub	r12, r24
    1b4a:	d8 0a       	sbc	r13, r24
	{
		//translate ascii to binary
		c-=' ';
		index=(c*8);
		//draw chars
		for(uint8_t j=0;j<8;j++)
    1b4c:	88 e0       	ldi	r24, 0x08	; 8
    1b4e:	c8 16       	cp	r12, r24
    1b50:	d1 04       	cpc	r13, r1
    1b52:	41 f6       	brne	.-112    	; 0x1ae4 <_ZN16class_GraphBasic4PutCEcb+0x32>
					if (useBackColor) SetPixel(this->X+i,this->Y+j,this->BackColor.red,this->BackColor.green,this->BackColor.blue);
				}
				mask>>=1;
			}
		}
		this->X+=GetTextWidth();
    1b54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b58:	06 96       	adiw	r24, 0x06	; 6
    1b5a:	9f 87       	std	Y+15, r25	; 0x0f
    1b5c:	8e 87       	std	Y+14, r24	; 0x0e
	}
#endif

}
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	df 90       	pop	r13
    1b6c:	cf 90       	pop	r12
    1b6e:	bf 90       	pop	r11
    1b70:	af 90       	pop	r10
    1b72:	9f 90       	pop	r9
    1b74:	8f 90       	pop	r8
    1b76:	7f 90       	pop	r7
    1b78:	08 95       	ret

00001b7a <_ZN16class_GraphBasic4PutSEPKcb>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :  forecolor define a character color  , use Locate function before   |
//	|			 to set coordinates.												|
//	+-------------------------------------------------------------------------------+
void   class_GraphBasic::PutS(const char *c,bool useBackColor)
{
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	8c 01       	movw	r16, r24
    1b86:	f4 2e       	mov	r15, r20
    1b88:	eb 01       	movw	r28, r22
    while (*c!=0)
    1b8a:	69 91       	ld	r22, Y+
    1b8c:	66 23       	and	r22, r22
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <_ZN16class_GraphBasic4PutSEPKcb+0x20>
    {
        PutC(*c,useBackColor);
    1b90:	4f 2d       	mov	r20, r15
    1b92:	c8 01       	movw	r24, r16
    1b94:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <_ZN16class_GraphBasic4PutCEcb>
    1b98:	f8 cf       	rjmp	.-16     	; 0x1b8a <_ZN16class_GraphBasic4PutSEPKcb+0x10>
        c++;
    }
}
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	08 95       	ret

00001ba6 <_Z14_timeInterruptv>:
//	| REMARKS :  to used callback function define a routine following format                |
//  |            callback(uint8_t Hour,uint8_t Minute,uint8_t Second);                      |
//	+---------------------------------------------------------------------------------------+
void   _timeInterrupt()
{
    if (_time.InterruptInUse)
    1ba6:	80 91 6a 01 	lds	r24, 0x016A
    1baa:	88 23       	and	r24, r24
    1bac:	39 f0       	breq	.+14     	; 0x1bbc <_Z14_timeInterruptv+0x16>
    {
        if (_time.TimeInterruptCallBack!=nullptr) _time.TimeInterruptCallBack();
    1bae:	e0 91 76 01 	lds	r30, 0x0176
    1bb2:	f0 91 77 01 	lds	r31, 0x0177
    1bb6:	30 97       	sbiw	r30, 0x00	; 0
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <_Z14_timeInterruptv+0x16>
    1bba:	09 94       	ijmp
    1bbc:	08 95       	ret

00001bbe <_Z10_timeClockv>:
//	|			 this callback function if activated is called 10 times per second			|
//	+---------------------------------------------------------------------------------------+
void    _timeClock()
{
    //check if on
    if (_time.TimeInUse)
    1bbe:	80 91 69 01 	lds	r24, 0x0169
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <_Z10_timeClockv+0xa>
    1bc6:	4d c0       	rjmp	.+154    	; 0x1c62 <_Z10_timeClockv+0xa4>
    {
        //Time to pump Time?
        _time.Milliseconds++;
    1bc8:	80 91 66 01 	lds	r24, 0x0166
    1bcc:	90 91 67 01 	lds	r25, 0x0167
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	90 93 67 01 	sts	0x0167, r25
    1bd6:	80 93 66 01 	sts	0x0166, r24
        if (_time.Milliseconds<TIME_TIMER_FREQ/10) return;
    1bda:	80 91 66 01 	lds	r24, 0x0166
    1bde:	90 91 67 01 	lds	r25, 0x0167
    1be2:	8d 37       	cpi	r24, 0x7D	; 125
    1be4:	91 05       	cpc	r25, r1
    1be6:	e8 f1       	brcs	.+122    	; 0x1c62 <_Z10_timeClockv+0xa4>
        //clear timer pump
        _time.Milliseconds=0;
    1be8:	10 92 67 01 	sts	0x0167, r1
    1bec:	10 92 66 01 	sts	0x0166, r1
        //tenth of seconds
        _time.Tenth++;
    1bf0:	80 91 68 01 	lds	r24, 0x0168
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	80 93 68 01 	sts	0x0168, r24
        if (_time.Tenth>9)
    1bfa:	80 91 68 01 	lds	r24, 0x0168
    1bfe:	8a 30       	cpi	r24, 0x0A	; 10
    1c00:	18 f1       	brcs	.+70     	; 0x1c48 <_Z10_timeClockv+0x8a>
        {
            _time.Tenth=0;
    1c02:	10 92 68 01 	sts	0x0168, r1
            //yes, pump Seconds
            _time.Second++;
    1c06:	80 91 65 01 	lds	r24, 0x0165
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	80 93 65 01 	sts	0x0165, r24
            if (_time.Second>59)
    1c10:	80 91 65 01 	lds	r24, 0x0165
    1c14:	8c 33       	cpi	r24, 0x3C	; 60
    1c16:	c0 f0       	brcs	.+48     	; 0x1c48 <_Z10_timeClockv+0x8a>
            {
                //yes, pump Minutes clear second
                _time.Second=0;
    1c18:	10 92 65 01 	sts	0x0165, r1
                _time.Minute++;
    1c1c:	80 91 64 01 	lds	r24, 0x0164
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 64 01 	sts	0x0164, r24
                if (_time.Minute>59)
    1c26:	80 91 64 01 	lds	r24, 0x0164
    1c2a:	8c 33       	cpi	r24, 0x3C	; 60
    1c2c:	68 f0       	brcs	.+26     	; 0x1c48 <_Z10_timeClockv+0x8a>
                {
                    //yes, pump Hours clear Minute
                    _time.Minute=0;
    1c2e:	10 92 64 01 	sts	0x0164, r1
                    _time.Hour++;
    1c32:	80 91 63 01 	lds	r24, 0x0163
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	80 93 63 01 	sts	0x0163, r24
                    if (_time.Hour>23) _time.Hour=0;
    1c3c:	80 91 63 01 	lds	r24, 0x0163
    1c40:	88 31       	cpi	r24, 0x18	; 24
    1c42:	10 f0       	brcs	.+4      	; 0x1c48 <_Z10_timeClockv+0x8a>
    1c44:	10 92 63 01 	sts	0x0163, r1
                }
            }
        }
        //callback function giving to defined routine parms hour,min,second (updated each second)
        if (_time.TimeClockCallBack!=nullptr) _time.TimeClockCallBack(_time.Hour,_time.Minute,_time.Second);
    1c48:	e0 91 74 01 	lds	r30, 0x0174
    1c4c:	f0 91 75 01 	lds	r31, 0x0175
    1c50:	30 97       	sbiw	r30, 0x00	; 0
    1c52:	39 f0       	breq	.+14     	; 0x1c62 <_Z10_timeClockv+0xa4>
    1c54:	40 91 65 01 	lds	r20, 0x0165
    1c58:	60 91 64 01 	lds	r22, 0x0164
    1c5c:	80 91 63 01 	lds	r24, 0x0163
    1c60:	09 94       	ijmp
    1c62:	08 95       	ret

00001c64 <_ZN10class_Time10InitializeEv>:
void class_Time::Initialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    1c64:	9f b7       	in	r25, 0x3f	; 63
    //Disable Interrupts
    cli();
    1c66:	f8 94       	cli
		TCNT0=0;
		//enable timer compare A interrupt
		TIMSK|=(1<<OCIE0);
	#elif defined(_AVR_IOM328P_H_)
		//WGM02=0;WGM01=1;WGM00=0 MODE CTC
		TCCR0A&=~(1<<WGM00);
    1c68:	84 b5       	in	r24, 0x24	; 36
    1c6a:	8e 7f       	andi	r24, 0xFE	; 254
    1c6c:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<WGM01);
    1c6e:	84 b5       	in	r24, 0x24	; 36
    1c70:	82 60       	ori	r24, 0x02	; 2
    1c72:	84 bd       	out	0x24, r24	; 36
		TCCR0B&=~(1<<WGM02);
    1c74:	85 b5       	in	r24, 0x25	; 37
    1c76:	87 7f       	andi	r24, 0xF7	; 247
    1c78:	85 bd       	out	0x25, r24	; 37
		//CS02=1;CS01=0;CS00=0 clock divided by 256
		TCCR0B&=~((1<<CS01)|(1<<CS00));
    1c7a:	85 b5       	in	r24, 0x25	; 37
    1c7c:	8c 7f       	andi	r24, 0xFC	; 252
    1c7e:	85 bd       	out	0x25, r24	; 37
		TCCR0B|=(1<<CS02);
    1c80:	85 b5       	in	r24, 0x25	; 37
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	85 bd       	out	0x25, r24	; 37
		//program divisor
		OCR0A=(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ)-1;
    1c86:	81 e3       	ldi	r24, 0x31	; 49
    1c88:	87 bd       	out	0x27, r24	; 39
		TCNT0=0;
    1c8a:	16 bc       	out	0x26, r1	; 38
		//enable timer compare A interrupt
		TIMSK0|=(1<<OCIE0A);
    1c8c:	ee e6       	ldi	r30, 0x6E	; 110
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	82 60       	ori	r24, 0x02	; 2
    1c94:	80 83       	st	Z, r24
	#elif defined(_AVR_IOM328P_H_)
	#elif defined(_AVR_IOM8_H_)
	#endif
#endif		
    //Restore Interrupts
    SREG=sreg;
    1c96:	9f bf       	out	0x3f, r25	; 63
    1c98:	08 95       	ret

00001c9a <_ZN10class_TimeC1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_Time::class_Time()
    1c9a:	cf 93       	push	r28
{
	unsigned char sreg;

    //save SREG
	sreg=SREG;
    1c9c:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
	cli();
    1c9e:	f8 94       	cli
    //Check if already Initialized
    if (_time.Initialized==false)
    1ca0:	20 91 6b 01 	lds	r18, 0x016B
    1ca4:	21 11       	cpse	r18, r1
    1ca6:	05 c0       	rjmp	.+10     	; 0x1cb2 <_ZN10class_TimeC1Ev+0x18>
    {
        //set initialized
        _time.Initialized=true;
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	20 93 6b 01 	sts	0x016B, r18
        //Initialize
        Initialize();
    1cae:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_ZN10class_Time10InitializeEv>
    }
    
    //Restore SREG state
	SREG=sreg;
    1cb2:	cf bf       	out	0x3f, r28	; 63
}
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <__vector_14>:
		    _timeInterrupt();
		    _timeClock();
        }
    #elif defined(_AVR_IOM328P_H_)
        ISR(TIMER0_COMPA_vect)
        {
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
		    //enable interrupts to permit that other pending interrupts is executed more fast as possible
		    sei();		
    1cda:	78 94       	sei
            _time.TimerTick+=TIME_1MS;
    1cdc:	e3 e6       	ldi	r30, 0x63	; 99
    1cde:	f1 e0       	ldi	r31, 0x01	; 1
    1ce0:	21 85       	ldd	r18, Z+9	; 0x09
    1ce2:	32 85       	ldd	r19, Z+10	; 0x0a
    1ce4:	43 85       	ldd	r20, Z+11	; 0x0b
    1ce6:	54 85       	ldd	r21, Z+12	; 0x0c
    1ce8:	65 85       	ldd	r22, Z+13	; 0x0d
    1cea:	76 85       	ldd	r23, Z+14	; 0x0e
    1cec:	87 85       	ldd	r24, Z+15	; 0x0f
    1cee:	90 89       	ldd	r25, Z+16	; 0x10
    1cf0:	24 53       	subi	r18, 0x34	; 52
    1cf2:	33 43       	sbci	r19, 0x33	; 51
    1cf4:	43 43       	sbci	r20, 0x33	; 51
    1cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf8:	6f 4f       	sbci	r22, 0xFF	; 255
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	21 87       	std	Z+9, r18	; 0x09
    1d02:	32 87       	std	Z+10, r19	; 0x0a
    1d04:	43 87       	std	Z+11, r20	; 0x0b
    1d06:	54 87       	std	Z+12, r21	; 0x0c
    1d08:	65 87       	std	Z+13, r22	; 0x0d
    1d0a:	76 87       	std	Z+14, r23	; 0x0e
    1d0c:	87 87       	std	Z+15, r24	; 0x0f
    1d0e:	90 8b       	std	Z+16, r25	; 0x10
		    _timeInterrupt();
    1d10:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_Z14_timeInterruptv>
            _timeClock();
    1d14:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_Z10_timeClockv>
        }
    1d18:	ff 91       	pop	r31
    1d1a:	ef 91       	pop	r30
    1d1c:	bf 91       	pop	r27
    1d1e:	af 91       	pop	r26
    1d20:	9f 91       	pop	r25
    1d22:	8f 91       	pop	r24
    1d24:	7f 91       	pop	r23
    1d26:	6f 91       	pop	r22
    1d28:	5f 91       	pop	r21
    1d2a:	4f 91       	pop	r20
    1d2c:	3f 91       	pop	r19
    1d2e:	2f 91       	pop	r18
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	0f 90       	pop	r0
    1d36:	1f 90       	pop	r1
    1d38:	18 95       	reti

00001d3a <_ZN10class_Time15GetMillisecondsEv>:
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetMilliseconds()
{
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
    1d3e:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    1d40:	60 91 6f 01 	lds	r22, 0x016F
    1d44:	70 91 70 01 	lds	r23, 0x0170
    1d48:	80 91 71 01 	lds	r24, 0x0171
    1d4c:	90 91 72 01 	lds	r25, 0x0172
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
            tmp1=GetTimeTick();
            sei();
    1d50:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    1d52:	00 91 6f 01 	lds	r16, 0x016F
    1d56:	10 91 70 01 	lds	r17, 0x0170
    1d5a:	20 91 71 01 	lds	r18, 0x0171
    1d5e:	30 91 72 01 	lds	r19, 0x0172

uint32_t class_Time::GetMilliseconds()
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
    1d62:	60 17       	cp	r22, r16
    1d64:	71 07       	cpc	r23, r17
    1d66:	82 07       	cpc	r24, r18
    1d68:	93 07       	cpc	r25, r19
    1d6a:	49 f7       	brne	.-46     	; 0x1d3e <_ZN10class_Time15GetMillisecondsEv+0x4>
            sei();
            tmp2=GetTimeTick();
        } while (tmp1!=tmp2);
        //return tick value
        return tmp2;
}
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	08 95       	ret

00001d72 <_ZN10class_Time10SetElapsedEPm>:
//	| INPUT   :  -> tickTimerVariable					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::SetElapsed(uint32_t * timeVariable)
{
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	eb 01       	movw	r28, r22
	*timeVariable=GetMilliseconds();
    1d78:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN10class_Time15GetMillisecondsEv>
    1d7c:	68 83       	st	Y, r22
    1d7e:	79 83       	std	Y+1, r23	; 0x01
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	9b 83       	std	Y+3, r25	; 0x03
}
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	08 95       	ret

00001d8a <_ZN10class_Time10GetElapsedEPm>:
//	| INPUT   :  * tickTimerVariable					                            |
//	| OUTPUT  :  Elapsed time in ticks					                            |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
uint32_t class_Time::GetElapsed(uint32_t * timeVariable)
{
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	eb 01       	movw	r28, r22
	return (GetMilliseconds()-*timeVariable);				//Get difference between actual tick and save tick
    1d94:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN10class_Time15GetMillisecondsEv>
    1d98:	08 81       	ld	r16, Y
    1d9a:	19 81       	ldd	r17, Y+1	; 0x01
    1d9c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d9e:	3b 81       	ldd	r19, Y+3	; 0x03
    1da0:	60 1b       	sub	r22, r16
    1da2:	71 0b       	sbc	r23, r17
    1da4:	82 0b       	sbc	r24, r18
    1da6:	93 0b       	sbc	r25, r19
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret

00001db2 <_ZN10class_Time8DelayMsIEm>:
//	| INPUT   :  timeMs in milliseconds					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::DelayMsI(uint32_t timeMs)
{
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	cf 92       	push	r12
    1dbc:	df 92       	push	r13
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
    1dcc:	6a 01       	movw	r12, r20
    1dce:	7b 01       	movw	r14, r22
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
    1dd0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN10class_Time15GetMillisecondsEv>
    1dd4:	4b 01       	movw	r8, r22
    1dd6:	5c 01       	movw	r10, r24
	do{
		tmp2=GetMilliseconds();
    1dd8:	ce 01       	movw	r24, r28
    1dda:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_ZN10class_Time15GetMillisecondsEv>
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
    1dde:	8b 01       	movw	r16, r22
    1de0:	9c 01       	movw	r18, r24
    1de2:	08 19       	sub	r16, r8
    1de4:	19 09       	sbc	r17, r9
    1de6:	2a 09       	sbc	r18, r10
    1de8:	3b 09       	sbc	r19, r11
void	class_Time::DelayMsI(uint32_t timeMs)
{
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
	do{
    1dea:	0c 15       	cp	r16, r12
    1dec:	1d 05       	cpc	r17, r13
    1dee:	2e 05       	cpc	r18, r14
    1df0:	3f 05       	cpc	r19, r15
    1df2:	90 f3       	brcs	.-28     	; 0x1dd8 <_ZN10class_Time8DelayMsIEm+0x26>
		tmp2=GetMilliseconds();
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	1f 91       	pop	r17
    1dfa:	0f 91       	pop	r16
    1dfc:	ff 90       	pop	r15
    1dfe:	ef 90       	pop	r14
    1e00:	df 90       	pop	r13
    1e02:	cf 90       	pop	r12
    1e04:	bf 90       	pop	r11
    1e06:	af 90       	pop	r10
    1e08:	9f 90       	pop	r9
    1e0a:	8f 90       	pop	r8
    1e0c:	08 95       	ret

00001e0e <_ZN18class_WS2812_Drive5ResetEv>:
//	| REMARKS :  Interrupts are disabled                     		                |
//	+-------------------------------------------------------------------------------+
void    class_WS2812_Drive::Reset()
{
    unsigned int timeCount;
    cli();
    1e0e:	f8 94       	cli
    //pulse reset low 60 microseconds
    _WS2812_PORT_OUTPUT&=~(1<<_WS2812_DIN_BIT);
    1e10:	45 98       	cbi	0x08, 5	; 8
                 "sbiw r24,1		    \t\n"	\
                 "brne 1b               \t\n"   \
                 :"+r" (timeCount)
                 :
                 :"r24","r25"
                 );
    1e12:	20 ef       	ldi	r18, 0xF0	; 240
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	c9 01       	movw	r24, r18
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <_ZN18class_WS2812_Drive5ResetEv+0xa>
    1e1c:	08 95       	ret

00001e1e <_ZN18class_WS2812_Drive16WriteRGBtoDeviceEhhh>:
//	| INPUT   :  red,green,blue values range 0..255			                        |
//	| OUTPUT  :                                                                     |
//	| REMARKS :  Interrupts are disabled and restore        		                |
//	+-------------------------------------------------------------------------------+
void    class_WS2812_Drive::WriteRGBtoDevice(uint8_t rValue,uint8_t gValue,uint8_t bValue)
{
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	92 2f       	mov	r25, r18
	//save SREG
	uint8_t sreg=SREG;
    1e24:	8f b7       	in	r24, 0x3f	; 63
	//clear interrupts
	cli();
    1e26:	f8 94       	cli
      [rV] "r" (rValue),
      [bV] "r" (bValue),
      [portDin] "I" (_SFR_IO_ADDR(_WS2812_PORT_OUTPUT)),
      [portDinBit] "I" (_WS2812_DIN_BIT)
    : "r16","r17","r18","r19"
    );
    1e28:	04 2f       	mov	r16, r20
    1e2a:	16 2f       	mov	r17, r22
    1e2c:	29 2f       	mov	r18, r25
    1e2e:	38 e1       	ldi	r19, 0x18	; 24
    1e30:	45 9a       	sbi	0x08, 5	; 8
    1e32:	22 1f       	adc	r18, r18
    1e34:	11 1f       	adc	r17, r17
    1e36:	00 1f       	adc	r16, r16
    1e38:	68 f0       	brcs	.+26     	; 0x1e54 <_ZN18class_WS2812_Drive16WriteRGBtoDeviceEhhh+0x36>
    1e3a:	45 98       	cbi	0x08, 5	; 8
	...
    1e4c:	00 00       	nop
    1e4e:	3a 95       	dec	r19
    1e50:	79 f7       	brne	.-34     	; 0x1e30 <_ZN18class_WS2812_Drive16WriteRGBtoDeviceEhhh+0x12>
    1e52:	0b c0       	rjmp	.+22     	; 0x1e6a <_ZN18class_WS2812_Drive16WriteRGBtoDeviceEhhh+0x4c>
	...
    1e5c:	00 00       	nop
    1e5e:	45 98       	cbi	0x08, 5	; 8
    1e60:	00 00       	nop
    1e62:	00 00       	nop
    1e64:	00 00       	nop
    1e66:	3a 95       	dec	r19
    1e68:	19 f7       	brne	.-58     	; 0x1e30 <_ZN18class_WS2812_Drive16WriteRGBtoDeviceEhhh+0x12>
    1e6a:	00 00       	nop
    //restore SREG
	SREG=sreg;
    1e6c:	8f bf       	out	0x3f, r24	; 63
}
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <_ZN18class_WS2812_Drive10InitializeEv>:
void class_WS2812_Drive::Initialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    1e74:	8f b7       	in	r24, 0x3f	; 63
    //Disable Interrupts
    cli();
    1e76:	f8 94       	cli
    //set DIN bit as output high
    _WS2812_PORT_OUTPUT|=(1<<_WS2812_DIN_BIT);
    1e78:	45 9a       	sbi	0x08, 5	; 8
    _WS2812_PORT_DIR|=(1<<_WS2812_DIN_BIT);
    1e7a:	3d 9a       	sbi	0x07, 5	; 7
    //Restore Interrupts
    SREG=sreg;
    1e7c:	8f bf       	out	0x3f, r24	; 63
    1e7e:	08 95       	ret

00001e80 <_ZN18class_WS2812_Drive12UnInitializeEv>:
void class_WS2812_Drive::UnInitialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    1e80:	8f b7       	in	r24, 0x3f	; 63
    //Disable Interrupts
    cli();
    1e82:	f8 94       	cli
    //set DIN bit as input high z
    _WS2812_PORT_DIR&=~(1<<_WS2812_DIN_BIT);
    1e84:	3d 98       	cbi	0x07, 5	; 7
    _WS2812_PORT_OUTPUT&=~(1<<_WS2812_DIN_BIT);
    1e86:	45 98       	cbi	0x08, 5	; 8
    //Restore Interrupts
    SREG=sreg;
    1e88:	8f bf       	out	0x3f, r24	; 63
    1e8a:	08 95       	ret

00001e8c <_ZN18class_WS2812_DriveC1Eii>:
//	| NAME    :  Graph Basic Init overload 2 				                        |
//	| INPUT   :  rows,cols with rows and cols		                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_WS2812_Drive::class_WS2812_Drive(int rows,int cols)
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	ec 01       	movw	r28, r24
:class_GraphBasic(rows,cols)
    1e94:	0e 94 84 07 	call	0xf08	; 0xf08 <_ZN16class_GraphBasicC1Eii>
    1e98:	8e e2       	ldi	r24, 0x2E	; 46
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	99 83       	std	Y+1, r25	; 0x01
    1e9e:	88 83       	st	Y, r24
{
    unsigned char sreg;

    //save SREG
    sreg=SREG;
    1ea0:	1f b7       	in	r17, 0x3f	; 63
    //Disable Interrupts
    cli();
    1ea2:	f8 94       	cli
    //Initialize
    Initialize();
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <_ZN18class_WS2812_Drive10InitializeEv>
    //Restore SREG state
    SREG=sreg;
    1eaa:	1f bf       	out	0x3f, r17	; 63
}
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	08 95       	ret

00001eb4 <_ZN18class_WS2812_DriveD1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_WS2812_Drive::~class_WS2812_Drive()
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
    1ebc:	8e e2       	ldi	r24, 0x2E	; 46
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	99 83       	std	Y+1, r25	; 0x01
    1ec2:	88 83       	st	Y, r24
{
    unsigned char sreg;

    //save SREG
    sreg=SREG;
    1ec4:	1f b7       	in	r17, 0x3f	; 63
    //Disable Interrupts
    cli();
    1ec6:	f8 94       	cli
    //Initialize
    UnInitialize();
    1ec8:	ce 01       	movw	r24, r28
    1eca:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN18class_WS2812_Drive12UnInitializeEv>
    //Restore SREG state
    SREG=sreg;
    1ece:	1f bf       	out	0x3f, r17	; 63
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_WS2812_Drive::~class_WS2812_Drive()
    1ed0:	ce 01       	movw	r24, r28
    cli();
    //Initialize
    UnInitialize();
    //Restore SREG state
    SREG=sreg;
}
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_WS2812_Drive::~class_WS2812_Drive()
    1ed8:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <_ZN16class_GraphBasicD1Ev>

00001edc <__subsf3>:
    1edc:	50 58       	subi	r21, 0x80	; 128

00001ede <__addsf3>:
    1ede:	bb 27       	eor	r27, r27
    1ee0:	aa 27       	eor	r26, r26
    1ee2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__addsf3x>
    1ee6:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__fp_round>
    1eea:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_pscA>
    1eee:	38 f0       	brcs	.+14     	; 0x1efe <__addsf3+0x20>
    1ef0:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_pscB>
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__addsf3+0x20>
    1ef6:	39 f4       	brne	.+14     	; 0x1f06 <__addsf3+0x28>
    1ef8:	9f 3f       	cpi	r25, 0xFF	; 255
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <__addsf3+0x24>
    1efc:	26 f4       	brtc	.+8      	; 0x1f06 <__addsf3+0x28>
    1efe:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_nan>
    1f02:	0e f4       	brtc	.+2      	; 0x1f06 <__addsf3+0x28>
    1f04:	e0 95       	com	r30
    1f06:	e7 fb       	bst	r30, 7
    1f08:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_inf>

00001f0c <__addsf3x>:
    1f0c:	e9 2f       	mov	r30, r25
    1f0e:	0e 94 6f 10 	call	0x20de	; 0x20de <__fp_split3>
    1f12:	58 f3       	brcs	.-42     	; 0x1eea <__addsf3+0xc>
    1f14:	ba 17       	cp	r27, r26
    1f16:	62 07       	cpc	r22, r18
    1f18:	73 07       	cpc	r23, r19
    1f1a:	84 07       	cpc	r24, r20
    1f1c:	95 07       	cpc	r25, r21
    1f1e:	20 f0       	brcs	.+8      	; 0x1f28 <__addsf3x+0x1c>
    1f20:	79 f4       	brne	.+30     	; 0x1f40 <__addsf3x+0x34>
    1f22:	a6 f5       	brtc	.+104    	; 0x1f8c <__addsf3x+0x80>
    1f24:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__fp_zero>
    1f28:	0e f4       	brtc	.+2      	; 0x1f2c <__addsf3x+0x20>
    1f2a:	e0 95       	com	r30
    1f2c:	0b 2e       	mov	r0, r27
    1f2e:	ba 2f       	mov	r27, r26
    1f30:	a0 2d       	mov	r26, r0
    1f32:	0b 01       	movw	r0, r22
    1f34:	b9 01       	movw	r22, r18
    1f36:	90 01       	movw	r18, r0
    1f38:	0c 01       	movw	r0, r24
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	a0 01       	movw	r20, r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	ff 27       	eor	r31, r31
    1f42:	59 1b       	sub	r21, r25
    1f44:	99 f0       	breq	.+38     	; 0x1f6c <__addsf3x+0x60>
    1f46:	59 3f       	cpi	r21, 0xF9	; 249
    1f48:	50 f4       	brcc	.+20     	; 0x1f5e <__addsf3x+0x52>
    1f4a:	50 3e       	cpi	r21, 0xE0	; 224
    1f4c:	68 f1       	brcs	.+90     	; 0x1fa8 <__addsf3x+0x9c>
    1f4e:	1a 16       	cp	r1, r26
    1f50:	f0 40       	sbci	r31, 0x00	; 0
    1f52:	a2 2f       	mov	r26, r18
    1f54:	23 2f       	mov	r18, r19
    1f56:	34 2f       	mov	r19, r20
    1f58:	44 27       	eor	r20, r20
    1f5a:	58 5f       	subi	r21, 0xF8	; 248
    1f5c:	f3 cf       	rjmp	.-26     	; 0x1f44 <__addsf3x+0x38>
    1f5e:	46 95       	lsr	r20
    1f60:	37 95       	ror	r19
    1f62:	27 95       	ror	r18
    1f64:	a7 95       	ror	r26
    1f66:	f0 40       	sbci	r31, 0x00	; 0
    1f68:	53 95       	inc	r21
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <__addsf3x+0x52>
    1f6c:	7e f4       	brtc	.+30     	; 0x1f8c <__addsf3x+0x80>
    1f6e:	1f 16       	cp	r1, r31
    1f70:	ba 0b       	sbc	r27, r26
    1f72:	62 0b       	sbc	r22, r18
    1f74:	73 0b       	sbc	r23, r19
    1f76:	84 0b       	sbc	r24, r20
    1f78:	ba f0       	brmi	.+46     	; 0x1fa8 <__addsf3x+0x9c>
    1f7a:	91 50       	subi	r25, 0x01	; 1
    1f7c:	a1 f0       	breq	.+40     	; 0x1fa6 <__addsf3x+0x9a>
    1f7e:	ff 0f       	add	r31, r31
    1f80:	bb 1f       	adc	r27, r27
    1f82:	66 1f       	adc	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	c2 f7       	brpl	.-16     	; 0x1f7a <__addsf3x+0x6e>
    1f8a:	0e c0       	rjmp	.+28     	; 0x1fa8 <__addsf3x+0x9c>
    1f8c:	ba 0f       	add	r27, r26
    1f8e:	62 1f       	adc	r22, r18
    1f90:	73 1f       	adc	r23, r19
    1f92:	84 1f       	adc	r24, r20
    1f94:	48 f4       	brcc	.+18     	; 0x1fa8 <__addsf3x+0x9c>
    1f96:	87 95       	ror	r24
    1f98:	77 95       	ror	r23
    1f9a:	67 95       	ror	r22
    1f9c:	b7 95       	ror	r27
    1f9e:	f7 95       	ror	r31
    1fa0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <__addsf3x+0x9a>
    1fa4:	b0 cf       	rjmp	.-160    	; 0x1f06 <__addsf3+0x28>
    1fa6:	93 95       	inc	r25
    1fa8:	88 0f       	add	r24, r24
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <__addsf3x+0xa2>
    1fac:	99 27       	eor	r25, r25
    1fae:	ee 0f       	add	r30, r30
    1fb0:	97 95       	ror	r25
    1fb2:	87 95       	ror	r24
    1fb4:	08 95       	ret

00001fb6 <__fixunssfsi>:
    1fb6:	0e 94 77 10 	call	0x20ee	; 0x20ee <__fp_splitA>
    1fba:	88 f0       	brcs	.+34     	; 0x1fde <__fixunssfsi+0x28>
    1fbc:	9f 57       	subi	r25, 0x7F	; 127
    1fbe:	98 f0       	brcs	.+38     	; 0x1fe6 <__fixunssfsi+0x30>
    1fc0:	b9 2f       	mov	r27, r25
    1fc2:	99 27       	eor	r25, r25
    1fc4:	b7 51       	subi	r27, 0x17	; 23
    1fc6:	b0 f0       	brcs	.+44     	; 0x1ff4 <__fixunssfsi+0x3e>
    1fc8:	e1 f0       	breq	.+56     	; 0x2002 <__fixunssfsi+0x4c>
    1fca:	66 0f       	add	r22, r22
    1fcc:	77 1f       	adc	r23, r23
    1fce:	88 1f       	adc	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	1a f0       	brmi	.+6      	; 0x1fda <__fixunssfsi+0x24>
    1fd4:	ba 95       	dec	r27
    1fd6:	c9 f7       	brne	.-14     	; 0x1fca <__fixunssfsi+0x14>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <__fixunssfsi+0x4c>
    1fda:	b1 30       	cpi	r27, 0x01	; 1
    1fdc:	91 f0       	breq	.+36     	; 0x2002 <__fixunssfsi+0x4c>
    1fde:	0e 94 91 10 	call	0x2122	; 0x2122 <__fp_zero>
    1fe2:	b1 e0       	ldi	r27, 0x01	; 1
    1fe4:	08 95       	ret
    1fe6:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__fp_zero>
    1fea:	67 2f       	mov	r22, r23
    1fec:	78 2f       	mov	r23, r24
    1fee:	88 27       	eor	r24, r24
    1ff0:	b8 5f       	subi	r27, 0xF8	; 248
    1ff2:	39 f0       	breq	.+14     	; 0x2002 <__fixunssfsi+0x4c>
    1ff4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ff6:	cc f3       	brlt	.-14     	; 0x1fea <__fixunssfsi+0x34>
    1ff8:	86 95       	lsr	r24
    1ffa:	77 95       	ror	r23
    1ffc:	67 95       	ror	r22
    1ffe:	b3 95       	inc	r27
    2000:	d9 f7       	brne	.-10     	; 0x1ff8 <__fixunssfsi+0x42>
    2002:	3e f4       	brtc	.+14     	; 0x2012 <__fixunssfsi+0x5c>
    2004:	90 95       	com	r25
    2006:	80 95       	com	r24
    2008:	70 95       	com	r23
    200a:	61 95       	neg	r22
    200c:	7f 4f       	sbci	r23, 0xFF	; 255
    200e:	8f 4f       	sbci	r24, 0xFF	; 255
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	08 95       	ret

00002014 <__floatunsisf>:
    2014:	e8 94       	clt
    2016:	09 c0       	rjmp	.+18     	; 0x202a <__floatsisf+0x12>

00002018 <__floatsisf>:
    2018:	97 fb       	bst	r25, 7
    201a:	3e f4       	brtc	.+14     	; 0x202a <__floatsisf+0x12>
    201c:	90 95       	com	r25
    201e:	80 95       	com	r24
    2020:	70 95       	com	r23
    2022:	61 95       	neg	r22
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	8f 4f       	sbci	r24, 0xFF	; 255
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	99 23       	and	r25, r25
    202c:	a9 f0       	breq	.+42     	; 0x2058 <__floatsisf+0x40>
    202e:	f9 2f       	mov	r31, r25
    2030:	96 e9       	ldi	r25, 0x96	; 150
    2032:	bb 27       	eor	r27, r27
    2034:	93 95       	inc	r25
    2036:	f6 95       	lsr	r31
    2038:	87 95       	ror	r24
    203a:	77 95       	ror	r23
    203c:	67 95       	ror	r22
    203e:	b7 95       	ror	r27
    2040:	f1 11       	cpse	r31, r1
    2042:	f8 cf       	rjmp	.-16     	; 0x2034 <__floatsisf+0x1c>
    2044:	fa f4       	brpl	.+62     	; 0x2084 <__floatsisf+0x6c>
    2046:	bb 0f       	add	r27, r27
    2048:	11 f4       	brne	.+4      	; 0x204e <__floatsisf+0x36>
    204a:	60 ff       	sbrs	r22, 0
    204c:	1b c0       	rjmp	.+54     	; 0x2084 <__floatsisf+0x6c>
    204e:	6f 5f       	subi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	8f 4f       	sbci	r24, 0xFF	; 255
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	16 c0       	rjmp	.+44     	; 0x2084 <__floatsisf+0x6c>
    2058:	88 23       	and	r24, r24
    205a:	11 f0       	breq	.+4      	; 0x2060 <__floatsisf+0x48>
    205c:	96 e9       	ldi	r25, 0x96	; 150
    205e:	11 c0       	rjmp	.+34     	; 0x2082 <__floatsisf+0x6a>
    2060:	77 23       	and	r23, r23
    2062:	21 f0       	breq	.+8      	; 0x206c <__floatsisf+0x54>
    2064:	9e e8       	ldi	r25, 0x8E	; 142
    2066:	87 2f       	mov	r24, r23
    2068:	76 2f       	mov	r23, r22
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <__floatsisf+0x5e>
    206c:	66 23       	and	r22, r22
    206e:	71 f0       	breq	.+28     	; 0x208c <__floatsisf+0x74>
    2070:	96 e8       	ldi	r25, 0x86	; 134
    2072:	86 2f       	mov	r24, r22
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	2a f0       	brmi	.+10     	; 0x2084 <__floatsisf+0x6c>
    207a:	9a 95       	dec	r25
    207c:	66 0f       	add	r22, r22
    207e:	77 1f       	adc	r23, r23
    2080:	88 1f       	adc	r24, r24
    2082:	da f7       	brpl	.-10     	; 0x207a <__floatsisf+0x62>
    2084:	88 0f       	add	r24, r24
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	97 f9       	bld	r25, 7
    208c:	08 95       	ret

0000208e <__fp_inf>:
    208e:	97 f9       	bld	r25, 7
    2090:	9f 67       	ori	r25, 0x7F	; 127
    2092:	80 e8       	ldi	r24, 0x80	; 128
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	08 95       	ret

0000209a <__fp_nan>:
    209a:	9f ef       	ldi	r25, 0xFF	; 255
    209c:	80 ec       	ldi	r24, 0xC0	; 192
    209e:	08 95       	ret

000020a0 <__fp_pscA>:
    20a0:	00 24       	eor	r0, r0
    20a2:	0a 94       	dec	r0
    20a4:	16 16       	cp	r1, r22
    20a6:	17 06       	cpc	r1, r23
    20a8:	18 06       	cpc	r1, r24
    20aa:	09 06       	cpc	r0, r25
    20ac:	08 95       	ret

000020ae <__fp_pscB>:
    20ae:	00 24       	eor	r0, r0
    20b0:	0a 94       	dec	r0
    20b2:	12 16       	cp	r1, r18
    20b4:	13 06       	cpc	r1, r19
    20b6:	14 06       	cpc	r1, r20
    20b8:	05 06       	cpc	r0, r21
    20ba:	08 95       	ret

000020bc <__fp_round>:
    20bc:	09 2e       	mov	r0, r25
    20be:	03 94       	inc	r0
    20c0:	00 0c       	add	r0, r0
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__fp_round+0xc>
    20c4:	88 23       	and	r24, r24
    20c6:	52 f0       	brmi	.+20     	; 0x20dc <__fp_round+0x20>
    20c8:	bb 0f       	add	r27, r27
    20ca:	40 f4       	brcc	.+16     	; 0x20dc <__fp_round+0x20>
    20cc:	bf 2b       	or	r27, r31
    20ce:	11 f4       	brne	.+4      	; 0x20d4 <__fp_round+0x18>
    20d0:	60 ff       	sbrs	r22, 0
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <__fp_round+0x20>
    20d4:	6f 5f       	subi	r22, 0xFF	; 255
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	8f 4f       	sbci	r24, 0xFF	; 255
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	08 95       	ret

000020de <__fp_split3>:
    20de:	57 fd       	sbrc	r21, 7
    20e0:	90 58       	subi	r25, 0x80	; 128
    20e2:	44 0f       	add	r20, r20
    20e4:	55 1f       	adc	r21, r21
    20e6:	59 f0       	breq	.+22     	; 0x20fe <__fp_splitA+0x10>
    20e8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ea:	71 f0       	breq	.+28     	; 0x2108 <__fp_splitA+0x1a>
    20ec:	47 95       	ror	r20

000020ee <__fp_splitA>:
    20ee:	88 0f       	add	r24, r24
    20f0:	97 fb       	bst	r25, 7
    20f2:	99 1f       	adc	r25, r25
    20f4:	61 f0       	breq	.+24     	; 0x210e <__fp_splitA+0x20>
    20f6:	9f 3f       	cpi	r25, 0xFF	; 255
    20f8:	79 f0       	breq	.+30     	; 0x2118 <__fp_splitA+0x2a>
    20fa:	87 95       	ror	r24
    20fc:	08 95       	ret
    20fe:	12 16       	cp	r1, r18
    2100:	13 06       	cpc	r1, r19
    2102:	14 06       	cpc	r1, r20
    2104:	55 1f       	adc	r21, r21
    2106:	f2 cf       	rjmp	.-28     	; 0x20ec <__fp_split3+0xe>
    2108:	46 95       	lsr	r20
    210a:	f1 df       	rcall	.-30     	; 0x20ee <__fp_splitA>
    210c:	08 c0       	rjmp	.+16     	; 0x211e <__fp_splitA+0x30>
    210e:	16 16       	cp	r1, r22
    2110:	17 06       	cpc	r1, r23
    2112:	18 06       	cpc	r1, r24
    2114:	99 1f       	adc	r25, r25
    2116:	f1 cf       	rjmp	.-30     	; 0x20fa <__fp_splitA+0xc>
    2118:	86 95       	lsr	r24
    211a:	71 05       	cpc	r23, r1
    211c:	61 05       	cpc	r22, r1
    211e:	08 94       	sec
    2120:	08 95       	ret

00002122 <__fp_zero>:
    2122:	e8 94       	clt

00002124 <__fp_szero>:
    2124:	bb 27       	eor	r27, r27
    2126:	66 27       	eor	r22, r22
    2128:	77 27       	eor	r23, r23
    212a:	cb 01       	movw	r24, r22
    212c:	97 f9       	bld	r25, 7
    212e:	08 95       	ret

00002130 <__mulsf3>:
    2130:	0e 94 ab 10 	call	0x2156	; 0x2156 <__mulsf3x>
    2134:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__fp_round>
    2138:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__fp_pscA>
    213c:	38 f0       	brcs	.+14     	; 0x214c <__mulsf3+0x1c>
    213e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_pscB>
    2142:	20 f0       	brcs	.+8      	; 0x214c <__mulsf3+0x1c>
    2144:	95 23       	and	r25, r21
    2146:	11 f0       	breq	.+4      	; 0x214c <__mulsf3+0x1c>
    2148:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_inf>
    214c:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_nan>
    2150:	11 24       	eor	r1, r1
    2152:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__fp_szero>

00002156 <__mulsf3x>:
    2156:	0e 94 6f 10 	call	0x20de	; 0x20de <__fp_split3>
    215a:	70 f3       	brcs	.-36     	; 0x2138 <__mulsf3+0x8>

0000215c <__mulsf3_pse>:
    215c:	95 9f       	mul	r25, r21
    215e:	c1 f3       	breq	.-16     	; 0x2150 <__mulsf3+0x20>
    2160:	95 0f       	add	r25, r21
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	55 1f       	adc	r21, r21
    2166:	62 9f       	mul	r22, r18
    2168:	f0 01       	movw	r30, r0
    216a:	72 9f       	mul	r23, r18
    216c:	bb 27       	eor	r27, r27
    216e:	f0 0d       	add	r31, r0
    2170:	b1 1d       	adc	r27, r1
    2172:	63 9f       	mul	r22, r19
    2174:	aa 27       	eor	r26, r26
    2176:	f0 0d       	add	r31, r0
    2178:	b1 1d       	adc	r27, r1
    217a:	aa 1f       	adc	r26, r26
    217c:	64 9f       	mul	r22, r20
    217e:	66 27       	eor	r22, r22
    2180:	b0 0d       	add	r27, r0
    2182:	a1 1d       	adc	r26, r1
    2184:	66 1f       	adc	r22, r22
    2186:	82 9f       	mul	r24, r18
    2188:	22 27       	eor	r18, r18
    218a:	b0 0d       	add	r27, r0
    218c:	a1 1d       	adc	r26, r1
    218e:	62 1f       	adc	r22, r18
    2190:	73 9f       	mul	r23, r19
    2192:	b0 0d       	add	r27, r0
    2194:	a1 1d       	adc	r26, r1
    2196:	62 1f       	adc	r22, r18
    2198:	83 9f       	mul	r24, r19
    219a:	a0 0d       	add	r26, r0
    219c:	61 1d       	adc	r22, r1
    219e:	22 1f       	adc	r18, r18
    21a0:	74 9f       	mul	r23, r20
    21a2:	33 27       	eor	r19, r19
    21a4:	a0 0d       	add	r26, r0
    21a6:	61 1d       	adc	r22, r1
    21a8:	23 1f       	adc	r18, r19
    21aa:	84 9f       	mul	r24, r20
    21ac:	60 0d       	add	r22, r0
    21ae:	21 1d       	adc	r18, r1
    21b0:	82 2f       	mov	r24, r18
    21b2:	76 2f       	mov	r23, r22
    21b4:	6a 2f       	mov	r22, r26
    21b6:	11 24       	eor	r1, r1
    21b8:	9f 57       	subi	r25, 0x7F	; 127
    21ba:	50 40       	sbci	r21, 0x00	; 0
    21bc:	9a f0       	brmi	.+38     	; 0x21e4 <__mulsf3_pse+0x88>
    21be:	f1 f0       	breq	.+60     	; 0x21fc <__mulsf3_pse+0xa0>
    21c0:	88 23       	and	r24, r24
    21c2:	4a f0       	brmi	.+18     	; 0x21d6 <__mulsf3_pse+0x7a>
    21c4:	ee 0f       	add	r30, r30
    21c6:	ff 1f       	adc	r31, r31
    21c8:	bb 1f       	adc	r27, r27
    21ca:	66 1f       	adc	r22, r22
    21cc:	77 1f       	adc	r23, r23
    21ce:	88 1f       	adc	r24, r24
    21d0:	91 50       	subi	r25, 0x01	; 1
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	a9 f7       	brne	.-22     	; 0x21c0 <__mulsf3_pse+0x64>
    21d6:	9e 3f       	cpi	r25, 0xFE	; 254
    21d8:	51 05       	cpc	r21, r1
    21da:	80 f0       	brcs	.+32     	; 0x21fc <__mulsf3_pse+0xa0>
    21dc:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_inf>
    21e0:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__fp_szero>
    21e4:	5f 3f       	cpi	r21, 0xFF	; 255
    21e6:	e4 f3       	brlt	.-8      	; 0x21e0 <__mulsf3_pse+0x84>
    21e8:	98 3e       	cpi	r25, 0xE8	; 232
    21ea:	d4 f3       	brlt	.-12     	; 0x21e0 <__mulsf3_pse+0x84>
    21ec:	86 95       	lsr	r24
    21ee:	77 95       	ror	r23
    21f0:	67 95       	ror	r22
    21f2:	b7 95       	ror	r27
    21f4:	f7 95       	ror	r31
    21f6:	e7 95       	ror	r30
    21f8:	9f 5f       	subi	r25, 0xFF	; 255
    21fa:	c1 f7       	brne	.-16     	; 0x21ec <__mulsf3_pse+0x90>
    21fc:	fe 2b       	or	r31, r30
    21fe:	88 0f       	add	r24, r24
    2200:	91 1d       	adc	r25, r1
    2202:	96 95       	lsr	r25
    2204:	87 95       	ror	r24
    2206:	97 f9       	bld	r25, 7
    2208:	08 95       	ret

0000220a <sin>:
    220a:	9f 93       	push	r25
    220c:	0e 94 0f 11 	call	0x221e	; 0x221e <__fp_rempio2>
    2210:	0f 90       	pop	r0
    2212:	07 fc       	sbrc	r0, 7
    2214:	ee 5f       	subi	r30, 0xFE	; 254
    2216:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_sinus>
    221a:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__fp_nan>

0000221e <__fp_rempio2>:
    221e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__fp_splitA>
    2222:	d8 f3       	brcs	.-10     	; 0x221a <sin+0x10>
    2224:	e8 94       	clt
    2226:	e0 e0       	ldi	r30, 0x00	; 0
    2228:	bb 27       	eor	r27, r27
    222a:	9f 57       	subi	r25, 0x7F	; 127
    222c:	f0 f0       	brcs	.+60     	; 0x226a <__fp_rempio2+0x4c>
    222e:	2a ed       	ldi	r18, 0xDA	; 218
    2230:	3f e0       	ldi	r19, 0x0F	; 15
    2232:	49 ec       	ldi	r20, 0xC9	; 201
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <__fp_rempio2+0x24>
    2236:	ee 0f       	add	r30, r30
    2238:	bb 0f       	add	r27, r27
    223a:	66 1f       	adc	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	28 f0       	brcs	.+10     	; 0x224c <__fp_rempio2+0x2e>
    2242:	b2 3a       	cpi	r27, 0xA2	; 162
    2244:	62 07       	cpc	r22, r18
    2246:	73 07       	cpc	r23, r19
    2248:	84 07       	cpc	r24, r20
    224a:	28 f0       	brcs	.+10     	; 0x2256 <__fp_rempio2+0x38>
    224c:	b2 5a       	subi	r27, 0xA2	; 162
    224e:	62 0b       	sbc	r22, r18
    2250:	73 0b       	sbc	r23, r19
    2252:	84 0b       	sbc	r24, r20
    2254:	e3 95       	inc	r30
    2256:	9a 95       	dec	r25
    2258:	72 f7       	brpl	.-36     	; 0x2236 <__fp_rempio2+0x18>
    225a:	80 38       	cpi	r24, 0x80	; 128
    225c:	30 f4       	brcc	.+12     	; 0x226a <__fp_rempio2+0x4c>
    225e:	9a 95       	dec	r25
    2260:	bb 0f       	add	r27, r27
    2262:	66 1f       	adc	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	d2 f7       	brpl	.-12     	; 0x225e <__fp_rempio2+0x40>
    226a:	90 48       	sbci	r25, 0x80	; 128
    226c:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_mpack_finite>

00002270 <__fp_sinus>:
    2270:	ef 93       	push	r30
    2272:	e0 ff       	sbrs	r30, 0
    2274:	07 c0       	rjmp	.+14     	; 0x2284 <__fp_sinus+0x14>
    2276:	a2 ea       	ldi	r26, 0xA2	; 162
    2278:	2a ed       	ldi	r18, 0xDA	; 218
    227a:	3f e0       	ldi	r19, 0x0F	; 15
    227c:	49 ec       	ldi	r20, 0xC9	; 201
    227e:	5f eb       	ldi	r21, 0xBF	; 191
    2280:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__addsf3x>
    2284:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_round>
    2288:	0f 90       	pop	r0
    228a:	03 94       	inc	r0
    228c:	01 fc       	sbrc	r0, 1
    228e:	90 58       	subi	r25, 0x80	; 128
    2290:	e8 e6       	ldi	r30, 0x68	; 104
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <__fp_powsodd>

00002298 <__fp_mpack>:
    2298:	9f 3f       	cpi	r25, 0xFF	; 255
    229a:	31 f0       	breq	.+12     	; 0x22a8 <__fp_mpack_finite+0xc>

0000229c <__fp_mpack_finite>:
    229c:	91 50       	subi	r25, 0x01	; 1
    229e:	20 f4       	brcc	.+8      	; 0x22a8 <__fp_mpack_finite+0xc>
    22a0:	87 95       	ror	r24
    22a2:	77 95       	ror	r23
    22a4:	67 95       	ror	r22
    22a6:	b7 95       	ror	r27
    22a8:	88 0f       	add	r24, r24
    22aa:	91 1d       	adc	r25, r1
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	97 f9       	bld	r25, 7
    22b2:	08 95       	ret

000022b4 <__fp_powsodd>:
    22b4:	9f 93       	push	r25
    22b6:	8f 93       	push	r24
    22b8:	7f 93       	push	r23
    22ba:	6f 93       	push	r22
    22bc:	ff 93       	push	r31
    22be:	ef 93       	push	r30
    22c0:	9b 01       	movw	r18, r22
    22c2:	ac 01       	movw	r20, r24
    22c4:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulsf3>
    22c8:	ef 91       	pop	r30
    22ca:	ff 91       	pop	r31
    22cc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__fp_powser>
    22d0:	2f 91       	pop	r18
    22d2:	3f 91       	pop	r19
    22d4:	4f 91       	pop	r20
    22d6:	5f 91       	pop	r21
    22d8:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__mulsf3>

000022dc <__fp_powser>:
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	1f 93       	push	r17
    22e2:	0f 93       	push	r16
    22e4:	ff 92       	push	r15
    22e6:	ef 92       	push	r14
    22e8:	df 92       	push	r13
    22ea:	7b 01       	movw	r14, r22
    22ec:	8c 01       	movw	r16, r24
    22ee:	68 94       	set
    22f0:	06 c0       	rjmp	.+12     	; 0x22fe <__fp_powser+0x22>
    22f2:	da 2e       	mov	r13, r26
    22f4:	ef 01       	movw	r28, r30
    22f6:	0e 94 ab 10 	call	0x2156	; 0x2156 <__mulsf3x>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e8 94       	clt
    22fe:	a5 91       	lpm	r26, Z+
    2300:	25 91       	lpm	r18, Z+
    2302:	35 91       	lpm	r19, Z+
    2304:	45 91       	lpm	r20, Z+
    2306:	55 91       	lpm	r21, Z+
    2308:	a6 f3       	brts	.-24     	; 0x22f2 <__fp_powser+0x16>
    230a:	ef 01       	movw	r28, r30
    230c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__addsf3x>
    2310:	fe 01       	movw	r30, r28
    2312:	97 01       	movw	r18, r14
    2314:	a8 01       	movw	r20, r16
    2316:	da 94       	dec	r13
    2318:	69 f7       	brne	.-38     	; 0x22f4 <__fp_powser+0x18>
    231a:	df 90       	pop	r13
    231c:	ef 90       	pop	r14
    231e:	ff 90       	pop	r15
    2320:	0f 91       	pop	r16
    2322:	1f 91       	pop	r17
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <__tablejump2__>:
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	05 90       	lpm	r0, Z+
    2330:	f4 91       	lpm	r31, Z
    2332:	e0 2d       	mov	r30, r0
    2334:	09 94       	ijmp

00002336 <malloc>:
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	82 30       	cpi	r24, 0x02	; 2
    233c:	91 05       	cpc	r25, r1
    233e:	10 f4       	brcc	.+4      	; 0x2344 <malloc+0xe>
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	e0 91 7a 01 	lds	r30, 0x017A
    2348:	f0 91 7b 01 	lds	r31, 0x017B
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	c0 e0       	ldi	r28, 0x00	; 0
    2352:	d0 e0       	ldi	r29, 0x00	; 0
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	11 f1       	breq	.+68     	; 0x239c <malloc+0x66>
    2358:	40 81       	ld	r20, Z
    235a:	51 81       	ldd	r21, Z+1	; 0x01
    235c:	48 17       	cp	r20, r24
    235e:	59 07       	cpc	r21, r25
    2360:	c0 f0       	brcs	.+48     	; 0x2392 <malloc+0x5c>
    2362:	48 17       	cp	r20, r24
    2364:	59 07       	cpc	r21, r25
    2366:	61 f4       	brne	.+24     	; 0x2380 <malloc+0x4a>
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 97       	sbiw	r28, 0x00	; 0
    236e:	19 f0       	breq	.+6      	; 0x2376 <malloc+0x40>
    2370:	9b 83       	std	Y+3, r25	; 0x03
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	2b c0       	rjmp	.+86     	; 0x23cc <malloc+0x96>
    2376:	90 93 7b 01 	sts	0x017B, r25
    237a:	80 93 7a 01 	sts	0x017A, r24
    237e:	26 c0       	rjmp	.+76     	; 0x23cc <malloc+0x96>
    2380:	21 15       	cp	r18, r1
    2382:	31 05       	cpc	r19, r1
    2384:	19 f0       	breq	.+6      	; 0x238c <malloc+0x56>
    2386:	42 17       	cp	r20, r18
    2388:	53 07       	cpc	r21, r19
    238a:	18 f4       	brcc	.+6      	; 0x2392 <malloc+0x5c>
    238c:	9a 01       	movw	r18, r20
    238e:	be 01       	movw	r22, r28
    2390:	df 01       	movw	r26, r30
    2392:	ef 01       	movw	r28, r30
    2394:	02 80       	ldd	r0, Z+2	; 0x02
    2396:	f3 81       	ldd	r31, Z+3	; 0x03
    2398:	e0 2d       	mov	r30, r0
    239a:	dc cf       	rjmp	.-72     	; 0x2354 <malloc+0x1e>
    239c:	21 15       	cp	r18, r1
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f1       	breq	.+66     	; 0x23e4 <malloc+0xae>
    23a2:	28 1b       	sub	r18, r24
    23a4:	39 0b       	sbc	r19, r25
    23a6:	24 30       	cpi	r18, 0x04	; 4
    23a8:	31 05       	cpc	r19, r1
    23aa:	90 f4       	brcc	.+36     	; 0x23d0 <malloc+0x9a>
    23ac:	12 96       	adiw	r26, 0x02	; 2
    23ae:	8d 91       	ld	r24, X+
    23b0:	9c 91       	ld	r25, X
    23b2:	13 97       	sbiw	r26, 0x03	; 3
    23b4:	61 15       	cp	r22, r1
    23b6:	71 05       	cpc	r23, r1
    23b8:	21 f0       	breq	.+8      	; 0x23c2 <malloc+0x8c>
    23ba:	fb 01       	movw	r30, r22
    23bc:	93 83       	std	Z+3, r25	; 0x03
    23be:	82 83       	std	Z+2, r24	; 0x02
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <malloc+0x94>
    23c2:	90 93 7b 01 	sts	0x017B, r25
    23c6:	80 93 7a 01 	sts	0x017A, r24
    23ca:	fd 01       	movw	r30, r26
    23cc:	32 96       	adiw	r30, 0x02	; 2
    23ce:	44 c0       	rjmp	.+136    	; 0x2458 <malloc+0x122>
    23d0:	fd 01       	movw	r30, r26
    23d2:	e2 0f       	add	r30, r18
    23d4:	f3 1f       	adc	r31, r19
    23d6:	81 93       	st	Z+, r24
    23d8:	91 93       	st	Z+, r25
    23da:	22 50       	subi	r18, 0x02	; 2
    23dc:	31 09       	sbc	r19, r1
    23de:	2d 93       	st	X+, r18
    23e0:	3c 93       	st	X, r19
    23e2:	3a c0       	rjmp	.+116    	; 0x2458 <malloc+0x122>
    23e4:	20 91 78 01 	lds	r18, 0x0178
    23e8:	30 91 79 01 	lds	r19, 0x0179
    23ec:	23 2b       	or	r18, r19
    23ee:	41 f4       	brne	.+16     	; 0x2400 <malloc+0xca>
    23f0:	20 91 02 01 	lds	r18, 0x0102
    23f4:	30 91 03 01 	lds	r19, 0x0103
    23f8:	30 93 79 01 	sts	0x0179, r19
    23fc:	20 93 78 01 	sts	0x0178, r18
    2400:	20 91 00 01 	lds	r18, 0x0100
    2404:	30 91 01 01 	lds	r19, 0x0101
    2408:	21 15       	cp	r18, r1
    240a:	31 05       	cpc	r19, r1
    240c:	41 f4       	brne	.+16     	; 0x241e <malloc+0xe8>
    240e:	2d b7       	in	r18, 0x3d	; 61
    2410:	3e b7       	in	r19, 0x3e	; 62
    2412:	40 91 04 01 	lds	r20, 0x0104
    2416:	50 91 05 01 	lds	r21, 0x0105
    241a:	24 1b       	sub	r18, r20
    241c:	35 0b       	sbc	r19, r21
    241e:	e0 91 78 01 	lds	r30, 0x0178
    2422:	f0 91 79 01 	lds	r31, 0x0179
    2426:	e2 17       	cp	r30, r18
    2428:	f3 07       	cpc	r31, r19
    242a:	a0 f4       	brcc	.+40     	; 0x2454 <malloc+0x11e>
    242c:	2e 1b       	sub	r18, r30
    242e:	3f 0b       	sbc	r19, r31
    2430:	28 17       	cp	r18, r24
    2432:	39 07       	cpc	r19, r25
    2434:	78 f0       	brcs	.+30     	; 0x2454 <malloc+0x11e>
    2436:	ac 01       	movw	r20, r24
    2438:	4e 5f       	subi	r20, 0xFE	; 254
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	24 17       	cp	r18, r20
    243e:	35 07       	cpc	r19, r21
    2440:	48 f0       	brcs	.+18     	; 0x2454 <malloc+0x11e>
    2442:	4e 0f       	add	r20, r30
    2444:	5f 1f       	adc	r21, r31
    2446:	50 93 79 01 	sts	0x0179, r21
    244a:	40 93 78 01 	sts	0x0178, r20
    244e:	81 93       	st	Z+, r24
    2450:	91 93       	st	Z+, r25
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <malloc+0x122>
    2454:	e0 e0       	ldi	r30, 0x00	; 0
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	cf 01       	movw	r24, r30
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <free>:
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f4       	brne	.+2      	; 0x246e <free+0xe>
    246c:	8c c0       	rjmp	.+280    	; 0x2586 <free+0x126>
    246e:	fc 01       	movw	r30, r24
    2470:	32 97       	sbiw	r30, 0x02	; 2
    2472:	13 82       	std	Z+3, r1	; 0x03
    2474:	12 82       	std	Z+2, r1	; 0x02
    2476:	00 91 7a 01 	lds	r16, 0x017A
    247a:	10 91 7b 01 	lds	r17, 0x017B
    247e:	01 15       	cp	r16, r1
    2480:	11 05       	cpc	r17, r1
    2482:	81 f4       	brne	.+32     	; 0x24a4 <free+0x44>
    2484:	20 81       	ld	r18, Z
    2486:	31 81       	ldd	r19, Z+1	; 0x01
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	20 91 78 01 	lds	r18, 0x0178
    2490:	30 91 79 01 	lds	r19, 0x0179
    2494:	28 17       	cp	r18, r24
    2496:	39 07       	cpc	r19, r25
    2498:	79 f5       	brne	.+94     	; 0x24f8 <free+0x98>
    249a:	f0 93 79 01 	sts	0x0179, r31
    249e:	e0 93 78 01 	sts	0x0178, r30
    24a2:	71 c0       	rjmp	.+226    	; 0x2586 <free+0x126>
    24a4:	d8 01       	movw	r26, r16
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	ae 17       	cp	r26, r30
    24ac:	bf 07       	cpc	r27, r31
    24ae:	50 f4       	brcc	.+20     	; 0x24c4 <free+0x64>
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	2d 91       	ld	r18, X+
    24b4:	3c 91       	ld	r19, X
    24b6:	13 97       	sbiw	r26, 0x03	; 3
    24b8:	ad 01       	movw	r20, r26
    24ba:	21 15       	cp	r18, r1
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f1       	breq	.+66     	; 0x2502 <free+0xa2>
    24c0:	d9 01       	movw	r26, r18
    24c2:	f3 cf       	rjmp	.-26     	; 0x24aa <free+0x4a>
    24c4:	9d 01       	movw	r18, r26
    24c6:	da 01       	movw	r26, r20
    24c8:	33 83       	std	Z+3, r19	; 0x03
    24ca:	22 83       	std	Z+2, r18	; 0x02
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	86 0f       	add	r24, r22
    24d2:	97 1f       	adc	r25, r23
    24d4:	82 17       	cp	r24, r18
    24d6:	93 07       	cpc	r25, r19
    24d8:	69 f4       	brne	.+26     	; 0x24f4 <free+0x94>
    24da:	ec 01       	movw	r28, r24
    24dc:	28 81       	ld	r18, Y
    24de:	39 81       	ldd	r19, Y+1	; 0x01
    24e0:	26 0f       	add	r18, r22
    24e2:	37 1f       	adc	r19, r23
    24e4:	2e 5f       	subi	r18, 0xFE	; 254
    24e6:	3f 4f       	sbci	r19, 0xFF	; 255
    24e8:	31 83       	std	Z+1, r19	; 0x01
    24ea:	20 83       	st	Z, r18
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	93 83       	std	Z+3, r25	; 0x03
    24f2:	82 83       	std	Z+2, r24	; 0x02
    24f4:	45 2b       	or	r20, r21
    24f6:	29 f4       	brne	.+10     	; 0x2502 <free+0xa2>
    24f8:	f0 93 7b 01 	sts	0x017B, r31
    24fc:	e0 93 7a 01 	sts	0x017A, r30
    2500:	42 c0       	rjmp	.+132    	; 0x2586 <free+0x126>
    2502:	13 96       	adiw	r26, 0x03	; 3
    2504:	fc 93       	st	X, r31
    2506:	ee 93       	st	-X, r30
    2508:	12 97       	sbiw	r26, 0x02	; 2
    250a:	ed 01       	movw	r28, r26
    250c:	49 91       	ld	r20, Y+
    250e:	59 91       	ld	r21, Y+
    2510:	9e 01       	movw	r18, r28
    2512:	24 0f       	add	r18, r20
    2514:	35 1f       	adc	r19, r21
    2516:	e2 17       	cp	r30, r18
    2518:	f3 07       	cpc	r31, r19
    251a:	71 f4       	brne	.+28     	; 0x2538 <free+0xd8>
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	84 0f       	add	r24, r20
    2522:	95 1f       	adc	r25, r21
    2524:	02 96       	adiw	r24, 0x02	; 2
    2526:	11 96       	adiw	r26, 0x01	; 1
    2528:	9c 93       	st	X, r25
    252a:	8e 93       	st	-X, r24
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	13 96       	adiw	r26, 0x03	; 3
    2532:	9c 93       	st	X, r25
    2534:	8e 93       	st	-X, r24
    2536:	12 97       	sbiw	r26, 0x02	; 2
    2538:	e0 e0       	ldi	r30, 0x00	; 0
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	d8 01       	movw	r26, r16
    253e:	12 96       	adiw	r26, 0x02	; 2
    2540:	8d 91       	ld	r24, X+
    2542:	9c 91       	ld	r25, X
    2544:	13 97       	sbiw	r26, 0x03	; 3
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	19 f0       	breq	.+6      	; 0x2550 <free+0xf0>
    254a:	f8 01       	movw	r30, r16
    254c:	8c 01       	movw	r16, r24
    254e:	f6 cf       	rjmp	.-20     	; 0x253c <free+0xdc>
    2550:	8d 91       	ld	r24, X+
    2552:	9c 91       	ld	r25, X
    2554:	98 01       	movw	r18, r16
    2556:	2e 5f       	subi	r18, 0xFE	; 254
    2558:	3f 4f       	sbci	r19, 0xFF	; 255
    255a:	82 0f       	add	r24, r18
    255c:	93 1f       	adc	r25, r19
    255e:	20 91 78 01 	lds	r18, 0x0178
    2562:	30 91 79 01 	lds	r19, 0x0179
    2566:	28 17       	cp	r18, r24
    2568:	39 07       	cpc	r19, r25
    256a:	69 f4       	brne	.+26     	; 0x2586 <free+0x126>
    256c:	30 97       	sbiw	r30, 0x00	; 0
    256e:	29 f4       	brne	.+10     	; 0x257a <free+0x11a>
    2570:	10 92 7b 01 	sts	0x017B, r1
    2574:	10 92 7a 01 	sts	0x017A, r1
    2578:	02 c0       	rjmp	.+4      	; 0x257e <free+0x11e>
    257a:	13 82       	std	Z+3, r1	; 0x03
    257c:	12 82       	std	Z+2, r1	; 0x02
    257e:	10 93 79 01 	sts	0x0179, r17
    2582:	00 93 78 01 	sts	0x0178, r16
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	08 95       	ret

00002590 <do_rand>:
    2590:	8f 92       	push	r8
    2592:	9f 92       	push	r9
    2594:	af 92       	push	r10
    2596:	bf 92       	push	r11
    2598:	cf 92       	push	r12
    259a:	df 92       	push	r13
    259c:	ef 92       	push	r14
    259e:	ff 92       	push	r15
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	ec 01       	movw	r28, r24
    25a6:	68 81       	ld	r22, Y
    25a8:	79 81       	ldd	r23, Y+1	; 0x01
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	61 15       	cp	r22, r1
    25b0:	71 05       	cpc	r23, r1
    25b2:	81 05       	cpc	r24, r1
    25b4:	91 05       	cpc	r25, r1
    25b6:	21 f4       	brne	.+8      	; 0x25c0 <do_rand+0x30>
    25b8:	64 e2       	ldi	r22, 0x24	; 36
    25ba:	79 ed       	ldi	r23, 0xD9	; 217
    25bc:	8b e5       	ldi	r24, 0x5B	; 91
    25be:	97 e0       	ldi	r25, 0x07	; 7
    25c0:	2d e1       	ldi	r18, 0x1D	; 29
    25c2:	33 ef       	ldi	r19, 0xF3	; 243
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__divmodsi4>
    25cc:	49 01       	movw	r8, r18
    25ce:	5a 01       	movw	r10, r20
    25d0:	9b 01       	movw	r18, r22
    25d2:	ac 01       	movw	r20, r24
    25d4:	a7 ea       	ldi	r26, 0xA7	; 167
    25d6:	b1 e4       	ldi	r27, 0x41	; 65
    25d8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__muluhisi3>
    25dc:	6b 01       	movw	r12, r22
    25de:	7c 01       	movw	r14, r24
    25e0:	ac ee       	ldi	r26, 0xEC	; 236
    25e2:	b4 ef       	ldi	r27, 0xF4	; 244
    25e4:	a5 01       	movw	r20, r10
    25e6:	94 01       	movw	r18, r8
    25e8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__mulohisi3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8c 0d       	add	r24, r12
    25f2:	9d 1d       	adc	r25, r13
    25f4:	ae 1d       	adc	r26, r14
    25f6:	bf 1d       	adc	r27, r15
    25f8:	b7 ff       	sbrs	r27, 7
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <do_rand+0x72>
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	a1 09       	sbc	r26, r1
    2600:	b0 48       	sbci	r27, 0x80	; 128
    2602:	88 83       	st	Y, r24
    2604:	99 83       	std	Y+1, r25	; 0x01
    2606:	aa 83       	std	Y+2, r26	; 0x02
    2608:	bb 83       	std	Y+3, r27	; 0x03
    260a:	9f 77       	andi	r25, 0x7F	; 127
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	df 90       	pop	r13
    2616:	cf 90       	pop	r12
    2618:	bf 90       	pop	r11
    261a:	af 90       	pop	r10
    261c:	9f 90       	pop	r9
    261e:	8f 90       	pop	r8
    2620:	08 95       	ret

00002622 <rand_r>:
    2622:	0e 94 c8 12 	call	0x2590	; 0x2590 <do_rand>
    2626:	08 95       	ret

00002628 <rand>:
    2628:	86 e0       	ldi	r24, 0x06	; 6
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	0e 94 c8 12 	call	0x2590	; 0x2590 <do_rand>
    2630:	08 95       	ret

00002632 <srand>:
    2632:	a0 e0       	ldi	r26, 0x00	; 0
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	80 93 06 01 	sts	0x0106, r24
    263a:	90 93 07 01 	sts	0x0107, r25
    263e:	a0 93 08 01 	sts	0x0108, r26
    2642:	b0 93 09 01 	sts	0x0109, r27
    2646:	08 95       	ret

00002648 <sprintf>:
    2648:	ae e0       	ldi	r26, 0x0E	; 14
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	ea e2       	ldi	r30, 0x2A	; 42
    264e:	f3 e1       	ldi	r31, 0x13	; 19
    2650:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x1c>
    2654:	0d 89       	ldd	r16, Y+21	; 0x15
    2656:	1e 89       	ldd	r17, Y+22	; 0x16
    2658:	86 e0       	ldi	r24, 0x06	; 6
    265a:	8c 83       	std	Y+4, r24	; 0x04
    265c:	1a 83       	std	Y+2, r17	; 0x02
    265e:	09 83       	std	Y+1, r16	; 0x01
    2660:	8f ef       	ldi	r24, 0xFF	; 255
    2662:	9f e7       	ldi	r25, 0x7F	; 127
    2664:	9e 83       	std	Y+6, r25	; 0x06
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	ae 01       	movw	r20, r28
    266a:	47 5e       	subi	r20, 0xE7	; 231
    266c:	5f 4f       	sbci	r21, 0xFF	; 255
    266e:	6f 89       	ldd	r22, Y+23	; 0x17
    2670:	78 8d       	ldd	r23, Y+24	; 0x18
    2672:	ce 01       	movw	r24, r28
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	0e 94 47 13 	call	0x268e	; 0x268e <vfprintf>
    267a:	2f 81       	ldd	r18, Y+7	; 0x07
    267c:	38 85       	ldd	r19, Y+8	; 0x08
    267e:	f8 01       	movw	r30, r16
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	10 82       	st	Z, r1
    2686:	2e 96       	adiw	r28, 0x0e	; 14
    2688:	e4 e0       	ldi	r30, 0x04	; 4
    268a:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x1c>

0000268e <vfprintf>:
    268e:	ac e0       	ldi	r26, 0x0C	; 12
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e4       	ldi	r30, 0x4D	; 77
    2694:	f3 e1       	ldi	r31, 0x13	; 19
    2696:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__>
    269a:	7c 01       	movw	r14, r24
    269c:	6b 01       	movw	r12, r22
    269e:	8a 01       	movw	r16, r20
    26a0:	fc 01       	movw	r30, r24
    26a2:	17 82       	std	Z+7, r1	; 0x07
    26a4:	16 82       	std	Z+6, r1	; 0x06
    26a6:	83 81       	ldd	r24, Z+3	; 0x03
    26a8:	81 ff       	sbrs	r24, 1
    26aa:	bd c1       	rjmp	.+890    	; 0x2a26 <vfprintf+0x398>
    26ac:	ce 01       	movw	r24, r28
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	4c 01       	movw	r8, r24
    26b2:	f7 01       	movw	r30, r14
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	f6 01       	movw	r30, r12
    26b8:	93 fd       	sbrc	r25, 3
    26ba:	85 91       	lpm	r24, Z+
    26bc:	93 ff       	sbrs	r25, 3
    26be:	81 91       	ld	r24, Z+
    26c0:	6f 01       	movw	r12, r30
    26c2:	88 23       	and	r24, r24
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <vfprintf+0x3a>
    26c6:	ab c1       	rjmp	.+854    	; 0x2a1e <vfprintf+0x390>
    26c8:	85 32       	cpi	r24, 0x25	; 37
    26ca:	39 f4       	brne	.+14     	; 0x26da <vfprintf+0x4c>
    26cc:	93 fd       	sbrc	r25, 3
    26ce:	85 91       	lpm	r24, Z+
    26d0:	93 ff       	sbrs	r25, 3
    26d2:	81 91       	ld	r24, Z+
    26d4:	6f 01       	movw	r12, r30
    26d6:	85 32       	cpi	r24, 0x25	; 37
    26d8:	29 f4       	brne	.+10     	; 0x26e4 <vfprintf+0x56>
    26da:	b7 01       	movw	r22, r14
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    26e2:	e7 cf       	rjmp	.-50     	; 0x26b2 <vfprintf+0x24>
    26e4:	51 2c       	mov	r5, r1
    26e6:	31 2c       	mov	r3, r1
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	20 32       	cpi	r18, 0x20	; 32
    26ec:	a0 f4       	brcc	.+40     	; 0x2716 <vfprintf+0x88>
    26ee:	8b 32       	cpi	r24, 0x2B	; 43
    26f0:	69 f0       	breq	.+26     	; 0x270c <vfprintf+0x7e>
    26f2:	30 f4       	brcc	.+12     	; 0x2700 <vfprintf+0x72>
    26f4:	80 32       	cpi	r24, 0x20	; 32
    26f6:	59 f0       	breq	.+22     	; 0x270e <vfprintf+0x80>
    26f8:	83 32       	cpi	r24, 0x23	; 35
    26fa:	69 f4       	brne	.+26     	; 0x2716 <vfprintf+0x88>
    26fc:	20 61       	ori	r18, 0x10	; 16
    26fe:	2c c0       	rjmp	.+88     	; 0x2758 <vfprintf+0xca>
    2700:	8d 32       	cpi	r24, 0x2D	; 45
    2702:	39 f0       	breq	.+14     	; 0x2712 <vfprintf+0x84>
    2704:	80 33       	cpi	r24, 0x30	; 48
    2706:	39 f4       	brne	.+14     	; 0x2716 <vfprintf+0x88>
    2708:	21 60       	ori	r18, 0x01	; 1
    270a:	26 c0       	rjmp	.+76     	; 0x2758 <vfprintf+0xca>
    270c:	22 60       	ori	r18, 0x02	; 2
    270e:	24 60       	ori	r18, 0x04	; 4
    2710:	23 c0       	rjmp	.+70     	; 0x2758 <vfprintf+0xca>
    2712:	28 60       	ori	r18, 0x08	; 8
    2714:	21 c0       	rjmp	.+66     	; 0x2758 <vfprintf+0xca>
    2716:	27 fd       	sbrc	r18, 7
    2718:	27 c0       	rjmp	.+78     	; 0x2768 <vfprintf+0xda>
    271a:	30 ed       	ldi	r19, 0xD0	; 208
    271c:	38 0f       	add	r19, r24
    271e:	3a 30       	cpi	r19, 0x0A	; 10
    2720:	78 f4       	brcc	.+30     	; 0x2740 <vfprintf+0xb2>
    2722:	26 ff       	sbrs	r18, 6
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <vfprintf+0xa4>
    2726:	fa e0       	ldi	r31, 0x0A	; 10
    2728:	5f 9e       	mul	r5, r31
    272a:	30 0d       	add	r19, r0
    272c:	11 24       	eor	r1, r1
    272e:	53 2e       	mov	r5, r19
    2730:	13 c0       	rjmp	.+38     	; 0x2758 <vfprintf+0xca>
    2732:	8a e0       	ldi	r24, 0x0A	; 10
    2734:	38 9e       	mul	r3, r24
    2736:	30 0d       	add	r19, r0
    2738:	11 24       	eor	r1, r1
    273a:	33 2e       	mov	r3, r19
    273c:	20 62       	ori	r18, 0x20	; 32
    273e:	0c c0       	rjmp	.+24     	; 0x2758 <vfprintf+0xca>
    2740:	8e 32       	cpi	r24, 0x2E	; 46
    2742:	21 f4       	brne	.+8      	; 0x274c <vfprintf+0xbe>
    2744:	26 fd       	sbrc	r18, 6
    2746:	6b c1       	rjmp	.+726    	; 0x2a1e <vfprintf+0x390>
    2748:	20 64       	ori	r18, 0x40	; 64
    274a:	06 c0       	rjmp	.+12     	; 0x2758 <vfprintf+0xca>
    274c:	8c 36       	cpi	r24, 0x6C	; 108
    274e:	11 f4       	brne	.+4      	; 0x2754 <vfprintf+0xc6>
    2750:	20 68       	ori	r18, 0x80	; 128
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0xca>
    2754:	88 36       	cpi	r24, 0x68	; 104
    2756:	41 f4       	brne	.+16     	; 0x2768 <vfprintf+0xda>
    2758:	f6 01       	movw	r30, r12
    275a:	93 fd       	sbrc	r25, 3
    275c:	85 91       	lpm	r24, Z+
    275e:	93 ff       	sbrs	r25, 3
    2760:	81 91       	ld	r24, Z+
    2762:	6f 01       	movw	r12, r30
    2764:	81 11       	cpse	r24, r1
    2766:	c1 cf       	rjmp	.-126    	; 0x26ea <vfprintf+0x5c>
    2768:	98 2f       	mov	r25, r24
    276a:	9f 7d       	andi	r25, 0xDF	; 223
    276c:	95 54       	subi	r25, 0x45	; 69
    276e:	93 30       	cpi	r25, 0x03	; 3
    2770:	28 f4       	brcc	.+10     	; 0x277c <vfprintf+0xee>
    2772:	0c 5f       	subi	r16, 0xFC	; 252
    2774:	1f 4f       	sbci	r17, 0xFF	; 255
    2776:	ff e3       	ldi	r31, 0x3F	; 63
    2778:	f9 83       	std	Y+1, r31	; 0x01
    277a:	0d c0       	rjmp	.+26     	; 0x2796 <vfprintf+0x108>
    277c:	83 36       	cpi	r24, 0x63	; 99
    277e:	31 f0       	breq	.+12     	; 0x278c <vfprintf+0xfe>
    2780:	83 37       	cpi	r24, 0x73	; 115
    2782:	71 f0       	breq	.+28     	; 0x27a0 <vfprintf+0x112>
    2784:	83 35       	cpi	r24, 0x53	; 83
    2786:	09 f0       	breq	.+2      	; 0x278a <vfprintf+0xfc>
    2788:	5b c0       	rjmp	.+182    	; 0x2840 <vfprintf+0x1b2>
    278a:	22 c0       	rjmp	.+68     	; 0x27d0 <vfprintf+0x142>
    278c:	f8 01       	movw	r30, r16
    278e:	80 81       	ld	r24, Z
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	0e 5f       	subi	r16, 0xFE	; 254
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	44 24       	eor	r4, r4
    2798:	43 94       	inc	r4
    279a:	51 2c       	mov	r5, r1
    279c:	54 01       	movw	r10, r8
    279e:	15 c0       	rjmp	.+42     	; 0x27ca <vfprintf+0x13c>
    27a0:	38 01       	movw	r6, r16
    27a2:	f2 e0       	ldi	r31, 0x02	; 2
    27a4:	6f 0e       	add	r6, r31
    27a6:	71 1c       	adc	r7, r1
    27a8:	f8 01       	movw	r30, r16
    27aa:	a0 80       	ld	r10, Z
    27ac:	b1 80       	ldd	r11, Z+1	; 0x01
    27ae:	26 ff       	sbrs	r18, 6
    27b0:	03 c0       	rjmp	.+6      	; 0x27b8 <vfprintf+0x12a>
    27b2:	65 2d       	mov	r22, r5
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <vfprintf+0x12e>
    27b8:	6f ef       	ldi	r22, 0xFF	; 255
    27ba:	7f ef       	ldi	r23, 0xFF	; 255
    27bc:	c5 01       	movw	r24, r10
    27be:	2c 87       	std	Y+12, r18	; 0x0c
    27c0:	0e 94 24 15 	call	0x2a48	; 0x2a48 <strnlen>
    27c4:	2c 01       	movw	r4, r24
    27c6:	83 01       	movw	r16, r6
    27c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ca:	2f 77       	andi	r18, 0x7F	; 127
    27cc:	22 2e       	mov	r2, r18
    27ce:	17 c0       	rjmp	.+46     	; 0x27fe <vfprintf+0x170>
    27d0:	38 01       	movw	r6, r16
    27d2:	f2 e0       	ldi	r31, 0x02	; 2
    27d4:	6f 0e       	add	r6, r31
    27d6:	71 1c       	adc	r7, r1
    27d8:	f8 01       	movw	r30, r16
    27da:	a0 80       	ld	r10, Z
    27dc:	b1 80       	ldd	r11, Z+1	; 0x01
    27de:	26 ff       	sbrs	r18, 6
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <vfprintf+0x15a>
    27e2:	65 2d       	mov	r22, r5
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <vfprintf+0x15e>
    27e8:	6f ef       	ldi	r22, 0xFF	; 255
    27ea:	7f ef       	ldi	r23, 0xFF	; 255
    27ec:	c5 01       	movw	r24, r10
    27ee:	2c 87       	std	Y+12, r18	; 0x0c
    27f0:	0e 94 19 15 	call	0x2a32	; 0x2a32 <strnlen_P>
    27f4:	2c 01       	movw	r4, r24
    27f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    27f8:	20 68       	ori	r18, 0x80	; 128
    27fa:	22 2e       	mov	r2, r18
    27fc:	83 01       	movw	r16, r6
    27fe:	23 fc       	sbrc	r2, 3
    2800:	1b c0       	rjmp	.+54     	; 0x2838 <vfprintf+0x1aa>
    2802:	83 2d       	mov	r24, r3
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	48 16       	cp	r4, r24
    2808:	59 06       	cpc	r5, r25
    280a:	b0 f4       	brcc	.+44     	; 0x2838 <vfprintf+0x1aa>
    280c:	b7 01       	movw	r22, r14
    280e:	80 e2       	ldi	r24, 0x20	; 32
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    2816:	3a 94       	dec	r3
    2818:	f4 cf       	rjmp	.-24     	; 0x2802 <vfprintf+0x174>
    281a:	f5 01       	movw	r30, r10
    281c:	27 fc       	sbrc	r2, 7
    281e:	85 91       	lpm	r24, Z+
    2820:	27 fe       	sbrs	r2, 7
    2822:	81 91       	ld	r24, Z+
    2824:	5f 01       	movw	r10, r30
    2826:	b7 01       	movw	r22, r14
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    282e:	31 10       	cpse	r3, r1
    2830:	3a 94       	dec	r3
    2832:	f1 e0       	ldi	r31, 0x01	; 1
    2834:	4f 1a       	sub	r4, r31
    2836:	51 08       	sbc	r5, r1
    2838:	41 14       	cp	r4, r1
    283a:	51 04       	cpc	r5, r1
    283c:	71 f7       	brne	.-36     	; 0x281a <vfprintf+0x18c>
    283e:	e5 c0       	rjmp	.+458    	; 0x2a0a <vfprintf+0x37c>
    2840:	84 36       	cpi	r24, 0x64	; 100
    2842:	11 f0       	breq	.+4      	; 0x2848 <vfprintf+0x1ba>
    2844:	89 36       	cpi	r24, 0x69	; 105
    2846:	39 f5       	brne	.+78     	; 0x2896 <vfprintf+0x208>
    2848:	f8 01       	movw	r30, r16
    284a:	27 ff       	sbrs	r18, 7
    284c:	07 c0       	rjmp	.+14     	; 0x285c <vfprintf+0x1ce>
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	0c 5f       	subi	r16, 0xFC	; 252
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	08 c0       	rjmp	.+16     	; 0x286c <vfprintf+0x1de>
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	07 2e       	mov	r0, r23
    2862:	00 0c       	add	r0, r0
    2864:	88 0b       	sbc	r24, r24
    2866:	99 0b       	sbc	r25, r25
    2868:	0e 5f       	subi	r16, 0xFE	; 254
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	2f 76       	andi	r18, 0x6F	; 111
    286e:	72 2e       	mov	r7, r18
    2870:	97 ff       	sbrs	r25, 7
    2872:	09 c0       	rjmp	.+18     	; 0x2886 <vfprintf+0x1f8>
    2874:	90 95       	com	r25
    2876:	80 95       	com	r24
    2878:	70 95       	com	r23
    287a:	61 95       	neg	r22
    287c:	7f 4f       	sbci	r23, 0xFF	; 255
    287e:	8f 4f       	sbci	r24, 0xFF	; 255
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	20 68       	ori	r18, 0x80	; 128
    2884:	72 2e       	mov	r7, r18
    2886:	2a e0       	ldi	r18, 0x0A	; 10
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	a4 01       	movw	r20, r8
    288c:	0e 94 67 15 	call	0x2ace	; 0x2ace <__ultoa_invert>
    2890:	a8 2e       	mov	r10, r24
    2892:	a8 18       	sub	r10, r8
    2894:	44 c0       	rjmp	.+136    	; 0x291e <vfprintf+0x290>
    2896:	85 37       	cpi	r24, 0x75	; 117
    2898:	29 f4       	brne	.+10     	; 0x28a4 <vfprintf+0x216>
    289a:	2f 7e       	andi	r18, 0xEF	; 239
    289c:	b2 2e       	mov	r11, r18
    289e:	2a e0       	ldi	r18, 0x0A	; 10
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	25 c0       	rjmp	.+74     	; 0x28ee <vfprintf+0x260>
    28a4:	f2 2f       	mov	r31, r18
    28a6:	f9 7f       	andi	r31, 0xF9	; 249
    28a8:	bf 2e       	mov	r11, r31
    28aa:	8f 36       	cpi	r24, 0x6F	; 111
    28ac:	c1 f0       	breq	.+48     	; 0x28de <vfprintf+0x250>
    28ae:	18 f4       	brcc	.+6      	; 0x28b6 <vfprintf+0x228>
    28b0:	88 35       	cpi	r24, 0x58	; 88
    28b2:	79 f0       	breq	.+30     	; 0x28d2 <vfprintf+0x244>
    28b4:	b4 c0       	rjmp	.+360    	; 0x2a1e <vfprintf+0x390>
    28b6:	80 37       	cpi	r24, 0x70	; 112
    28b8:	19 f0       	breq	.+6      	; 0x28c0 <vfprintf+0x232>
    28ba:	88 37       	cpi	r24, 0x78	; 120
    28bc:	21 f0       	breq	.+8      	; 0x28c6 <vfprintf+0x238>
    28be:	af c0       	rjmp	.+350    	; 0x2a1e <vfprintf+0x390>
    28c0:	2f 2f       	mov	r18, r31
    28c2:	20 61       	ori	r18, 0x10	; 16
    28c4:	b2 2e       	mov	r11, r18
    28c6:	b4 fe       	sbrs	r11, 4
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <vfprintf+0x256>
    28ca:	8b 2d       	mov	r24, r11
    28cc:	84 60       	ori	r24, 0x04	; 4
    28ce:	b8 2e       	mov	r11, r24
    28d0:	09 c0       	rjmp	.+18     	; 0x28e4 <vfprintf+0x256>
    28d2:	24 ff       	sbrs	r18, 4
    28d4:	0a c0       	rjmp	.+20     	; 0x28ea <vfprintf+0x25c>
    28d6:	9f 2f       	mov	r25, r31
    28d8:	96 60       	ori	r25, 0x06	; 6
    28da:	b9 2e       	mov	r11, r25
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <vfprintf+0x25c>
    28de:	28 e0       	ldi	r18, 0x08	; 8
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <vfprintf+0x260>
    28e4:	20 e1       	ldi	r18, 0x10	; 16
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <vfprintf+0x260>
    28ea:	20 e1       	ldi	r18, 0x10	; 16
    28ec:	32 e0       	ldi	r19, 0x02	; 2
    28ee:	f8 01       	movw	r30, r16
    28f0:	b7 fe       	sbrs	r11, 7
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <vfprintf+0x274>
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	0c 5f       	subi	r16, 0xFC	; 252
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2900:	06 c0       	rjmp	.+12     	; 0x290e <vfprintf+0x280>
    2902:	60 81       	ld	r22, Z
    2904:	71 81       	ldd	r23, Z+1	; 0x01
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 5f       	subi	r16, 0xFE	; 254
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	a4 01       	movw	r20, r8
    2910:	0e 94 67 15 	call	0x2ace	; 0x2ace <__ultoa_invert>
    2914:	a8 2e       	mov	r10, r24
    2916:	a8 18       	sub	r10, r8
    2918:	fb 2d       	mov	r31, r11
    291a:	ff 77       	andi	r31, 0x7F	; 127
    291c:	7f 2e       	mov	r7, r31
    291e:	76 fe       	sbrs	r7, 6
    2920:	0b c0       	rjmp	.+22     	; 0x2938 <vfprintf+0x2aa>
    2922:	37 2d       	mov	r19, r7
    2924:	3e 7f       	andi	r19, 0xFE	; 254
    2926:	a5 14       	cp	r10, r5
    2928:	50 f4       	brcc	.+20     	; 0x293e <vfprintf+0x2b0>
    292a:	74 fe       	sbrs	r7, 4
    292c:	0a c0       	rjmp	.+20     	; 0x2942 <vfprintf+0x2b4>
    292e:	72 fc       	sbrc	r7, 2
    2930:	08 c0       	rjmp	.+16     	; 0x2942 <vfprintf+0x2b4>
    2932:	37 2d       	mov	r19, r7
    2934:	3e 7e       	andi	r19, 0xEE	; 238
    2936:	05 c0       	rjmp	.+10     	; 0x2942 <vfprintf+0x2b4>
    2938:	ba 2c       	mov	r11, r10
    293a:	37 2d       	mov	r19, r7
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <vfprintf+0x2b6>
    293e:	ba 2c       	mov	r11, r10
    2940:	01 c0       	rjmp	.+2      	; 0x2944 <vfprintf+0x2b6>
    2942:	b5 2c       	mov	r11, r5
    2944:	34 ff       	sbrs	r19, 4
    2946:	0d c0       	rjmp	.+26     	; 0x2962 <vfprintf+0x2d4>
    2948:	fe 01       	movw	r30, r28
    294a:	ea 0d       	add	r30, r10
    294c:	f1 1d       	adc	r31, r1
    294e:	80 81       	ld	r24, Z
    2950:	80 33       	cpi	r24, 0x30	; 48
    2952:	11 f4       	brne	.+4      	; 0x2958 <vfprintf+0x2ca>
    2954:	39 7e       	andi	r19, 0xE9	; 233
    2956:	09 c0       	rjmp	.+18     	; 0x296a <vfprintf+0x2dc>
    2958:	32 ff       	sbrs	r19, 2
    295a:	06 c0       	rjmp	.+12     	; 0x2968 <vfprintf+0x2da>
    295c:	b3 94       	inc	r11
    295e:	b3 94       	inc	r11
    2960:	04 c0       	rjmp	.+8      	; 0x296a <vfprintf+0x2dc>
    2962:	83 2f       	mov	r24, r19
    2964:	86 78       	andi	r24, 0x86	; 134
    2966:	09 f0       	breq	.+2      	; 0x296a <vfprintf+0x2dc>
    2968:	b3 94       	inc	r11
    296a:	33 fd       	sbrc	r19, 3
    296c:	13 c0       	rjmp	.+38     	; 0x2994 <vfprintf+0x306>
    296e:	30 ff       	sbrs	r19, 0
    2970:	06 c0       	rjmp	.+12     	; 0x297e <vfprintf+0x2f0>
    2972:	5a 2c       	mov	r5, r10
    2974:	b3 14       	cp	r11, r3
    2976:	18 f4       	brcc	.+6      	; 0x297e <vfprintf+0x2f0>
    2978:	53 0c       	add	r5, r3
    297a:	5b 18       	sub	r5, r11
    297c:	b3 2c       	mov	r11, r3
    297e:	b3 14       	cp	r11, r3
    2980:	68 f4       	brcc	.+26     	; 0x299c <vfprintf+0x30e>
    2982:	b7 01       	movw	r22, r14
    2984:	80 e2       	ldi	r24, 0x20	; 32
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	3c 87       	std	Y+12, r19	; 0x0c
    298a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    298e:	b3 94       	inc	r11
    2990:	3c 85       	ldd	r19, Y+12	; 0x0c
    2992:	f5 cf       	rjmp	.-22     	; 0x297e <vfprintf+0x2f0>
    2994:	b3 14       	cp	r11, r3
    2996:	10 f4       	brcc	.+4      	; 0x299c <vfprintf+0x30e>
    2998:	3b 18       	sub	r3, r11
    299a:	01 c0       	rjmp	.+2      	; 0x299e <vfprintf+0x310>
    299c:	31 2c       	mov	r3, r1
    299e:	34 ff       	sbrs	r19, 4
    29a0:	12 c0       	rjmp	.+36     	; 0x29c6 <vfprintf+0x338>
    29a2:	b7 01       	movw	r22, r14
    29a4:	80 e3       	ldi	r24, 0x30	; 48
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	3c 87       	std	Y+12, r19	; 0x0c
    29aa:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    29ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    29b0:	32 ff       	sbrs	r19, 2
    29b2:	17 c0       	rjmp	.+46     	; 0x29e2 <vfprintf+0x354>
    29b4:	31 fd       	sbrc	r19, 1
    29b6:	03 c0       	rjmp	.+6      	; 0x29be <vfprintf+0x330>
    29b8:	88 e7       	ldi	r24, 0x78	; 120
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <vfprintf+0x334>
    29be:	88 e5       	ldi	r24, 0x58	; 88
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	b7 01       	movw	r22, r14
    29c4:	0c c0       	rjmp	.+24     	; 0x29de <vfprintf+0x350>
    29c6:	83 2f       	mov	r24, r19
    29c8:	86 78       	andi	r24, 0x86	; 134
    29ca:	59 f0       	breq	.+22     	; 0x29e2 <vfprintf+0x354>
    29cc:	31 ff       	sbrs	r19, 1
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <vfprintf+0x346>
    29d0:	8b e2       	ldi	r24, 0x2B	; 43
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <vfprintf+0x348>
    29d4:	80 e2       	ldi	r24, 0x20	; 32
    29d6:	37 fd       	sbrc	r19, 7
    29d8:	8d e2       	ldi	r24, 0x2D	; 45
    29da:	b7 01       	movw	r22, r14
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    29e2:	a5 14       	cp	r10, r5
    29e4:	38 f4       	brcc	.+14     	; 0x29f4 <vfprintf+0x366>
    29e6:	b7 01       	movw	r22, r14
    29e8:	80 e3       	ldi	r24, 0x30	; 48
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    29f0:	5a 94       	dec	r5
    29f2:	f7 cf       	rjmp	.-18     	; 0x29e2 <vfprintf+0x354>
    29f4:	aa 94       	dec	r10
    29f6:	f4 01       	movw	r30, r8
    29f8:	ea 0d       	add	r30, r10
    29fa:	f1 1d       	adc	r31, r1
    29fc:	80 81       	ld	r24, Z
    29fe:	b7 01       	movw	r22, r14
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    2a06:	a1 10       	cpse	r10, r1
    2a08:	f5 cf       	rjmp	.-22     	; 0x29f4 <vfprintf+0x366>
    2a0a:	33 20       	and	r3, r3
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <vfprintf+0x382>
    2a0e:	51 ce       	rjmp	.-862    	; 0x26b2 <vfprintf+0x24>
    2a10:	b7 01       	movw	r22, r14
    2a12:	80 e2       	ldi	r24, 0x20	; 32
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <fputc>
    2a1a:	3a 94       	dec	r3
    2a1c:	f6 cf       	rjmp	.-20     	; 0x2a0a <vfprintf+0x37c>
    2a1e:	f7 01       	movw	r30, r14
    2a20:	86 81       	ldd	r24, Z+6	; 0x06
    2a22:	97 81       	ldd	r25, Z+7	; 0x07
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <vfprintf+0x39c>
    2a26:	8f ef       	ldi	r24, 0xFF	; 255
    2a28:	9f ef       	ldi	r25, 0xFF	; 255
    2a2a:	2c 96       	adiw	r28, 0x0c	; 12
    2a2c:	e2 e1       	ldi	r30, 0x12	; 18
    2a2e:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__>

00002a32 <strnlen_P>:
    2a32:	fc 01       	movw	r30, r24
    2a34:	05 90       	lpm	r0, Z+
    2a36:	61 50       	subi	r22, 0x01	; 1
    2a38:	70 40       	sbci	r23, 0x00	; 0
    2a3a:	01 10       	cpse	r0, r1
    2a3c:	d8 f7       	brcc	.-10     	; 0x2a34 <strnlen_P+0x2>
    2a3e:	80 95       	com	r24
    2a40:	90 95       	com	r25
    2a42:	8e 0f       	add	r24, r30
    2a44:	9f 1f       	adc	r25, r31
    2a46:	08 95       	ret

00002a48 <strnlen>:
    2a48:	fc 01       	movw	r30, r24
    2a4a:	61 50       	subi	r22, 0x01	; 1
    2a4c:	70 40       	sbci	r23, 0x00	; 0
    2a4e:	01 90       	ld	r0, Z+
    2a50:	01 10       	cpse	r0, r1
    2a52:	d8 f7       	brcc	.-10     	; 0x2a4a <strnlen+0x2>
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	8e 0f       	add	r24, r30
    2a5a:	9f 1f       	adc	r25, r31
    2a5c:	08 95       	ret

00002a5e <fputc>:
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29
    2a66:	fb 01       	movw	r30, r22
    2a68:	23 81       	ldd	r18, Z+3	; 0x03
    2a6a:	21 fd       	sbrc	r18, 1
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <fputc+0x16>
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	9f ef       	ldi	r25, 0xFF	; 255
    2a72:	28 c0       	rjmp	.+80     	; 0x2ac4 <fputc+0x66>
    2a74:	22 ff       	sbrs	r18, 2
    2a76:	16 c0       	rjmp	.+44     	; 0x2aa4 <fputc+0x46>
    2a78:	46 81       	ldd	r20, Z+6	; 0x06
    2a7a:	57 81       	ldd	r21, Z+7	; 0x07
    2a7c:	24 81       	ldd	r18, Z+4	; 0x04
    2a7e:	35 81       	ldd	r19, Z+5	; 0x05
    2a80:	42 17       	cp	r20, r18
    2a82:	53 07       	cpc	r21, r19
    2a84:	44 f4       	brge	.+16     	; 0x2a96 <fputc+0x38>
    2a86:	a0 81       	ld	r26, Z
    2a88:	b1 81       	ldd	r27, Z+1	; 0x01
    2a8a:	9d 01       	movw	r18, r26
    2a8c:	2f 5f       	subi	r18, 0xFF	; 255
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	31 83       	std	Z+1, r19	; 0x01
    2a92:	20 83       	st	Z, r18
    2a94:	8c 93       	st	X, r24
    2a96:	26 81       	ldd	r18, Z+6	; 0x06
    2a98:	37 81       	ldd	r19, Z+7	; 0x07
    2a9a:	2f 5f       	subi	r18, 0xFF	; 255
    2a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9e:	37 83       	std	Z+7, r19	; 0x07
    2aa0:	26 83       	std	Z+6, r18	; 0x06
    2aa2:	10 c0       	rjmp	.+32     	; 0x2ac4 <fputc+0x66>
    2aa4:	eb 01       	movw	r28, r22
    2aa6:	09 2f       	mov	r16, r25
    2aa8:	18 2f       	mov	r17, r24
    2aaa:	00 84       	ldd	r0, Z+8	; 0x08
    2aac:	f1 85       	ldd	r31, Z+9	; 0x09
    2aae:	e0 2d       	mov	r30, r0
    2ab0:	09 95       	icall
    2ab2:	89 2b       	or	r24, r25
    2ab4:	e1 f6       	brne	.-72     	; 0x2a6e <fputc+0x10>
    2ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aba:	01 96       	adiw	r24, 0x01	; 1
    2abc:	9f 83       	std	Y+7, r25	; 0x07
    2abe:	8e 83       	std	Y+6, r24	; 0x06
    2ac0:	81 2f       	mov	r24, r17
    2ac2:	90 2f       	mov	r25, r16
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	08 95       	ret

00002ace <__ultoa_invert>:
    2ace:	fa 01       	movw	r30, r20
    2ad0:	aa 27       	eor	r26, r26
    2ad2:	28 30       	cpi	r18, 0x08	; 8
    2ad4:	51 f1       	breq	.+84     	; 0x2b2a <__ultoa_invert+0x5c>
    2ad6:	20 31       	cpi	r18, 0x10	; 16
    2ad8:	81 f1       	breq	.+96     	; 0x2b3a <__ultoa_invert+0x6c>
    2ada:	e8 94       	clt
    2adc:	6f 93       	push	r22
    2ade:	6e 7f       	andi	r22, 0xFE	; 254
    2ae0:	6e 5f       	subi	r22, 0xFE	; 254
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	af 4f       	sbci	r26, 0xFF	; 255
    2aea:	b1 e0       	ldi	r27, 0x01	; 1
    2aec:	3e d0       	rcall	.+124    	; 0x2b6a <__ultoa_invert+0x9c>
    2aee:	b4 e0       	ldi	r27, 0x04	; 4
    2af0:	3c d0       	rcall	.+120    	; 0x2b6a <__ultoa_invert+0x9c>
    2af2:	67 0f       	add	r22, r23
    2af4:	78 1f       	adc	r23, r24
    2af6:	89 1f       	adc	r24, r25
    2af8:	9a 1f       	adc	r25, r26
    2afa:	a1 1d       	adc	r26, r1
    2afc:	68 0f       	add	r22, r24
    2afe:	79 1f       	adc	r23, r25
    2b00:	8a 1f       	adc	r24, r26
    2b02:	91 1d       	adc	r25, r1
    2b04:	a1 1d       	adc	r26, r1
    2b06:	6a 0f       	add	r22, r26
    2b08:	71 1d       	adc	r23, r1
    2b0a:	81 1d       	adc	r24, r1
    2b0c:	91 1d       	adc	r25, r1
    2b0e:	a1 1d       	adc	r26, r1
    2b10:	20 d0       	rcall	.+64     	; 0x2b52 <__ultoa_invert+0x84>
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <__ultoa_invert+0x48>
    2b14:	68 94       	set
    2b16:	3f 91       	pop	r19
    2b18:	2a e0       	ldi	r18, 0x0A	; 10
    2b1a:	26 9f       	mul	r18, r22
    2b1c:	11 24       	eor	r1, r1
    2b1e:	30 19       	sub	r19, r0
    2b20:	30 5d       	subi	r19, 0xD0	; 208
    2b22:	31 93       	st	Z+, r19
    2b24:	de f6       	brtc	.-74     	; 0x2adc <__ultoa_invert+0xe>
    2b26:	cf 01       	movw	r24, r30
    2b28:	08 95       	ret
    2b2a:	46 2f       	mov	r20, r22
    2b2c:	47 70       	andi	r20, 0x07	; 7
    2b2e:	40 5d       	subi	r20, 0xD0	; 208
    2b30:	41 93       	st	Z+, r20
    2b32:	b3 e0       	ldi	r27, 0x03	; 3
    2b34:	0f d0       	rcall	.+30     	; 0x2b54 <__ultoa_invert+0x86>
    2b36:	c9 f7       	brne	.-14     	; 0x2b2a <__ultoa_invert+0x5c>
    2b38:	f6 cf       	rjmp	.-20     	; 0x2b26 <__ultoa_invert+0x58>
    2b3a:	46 2f       	mov	r20, r22
    2b3c:	4f 70       	andi	r20, 0x0F	; 15
    2b3e:	40 5d       	subi	r20, 0xD0	; 208
    2b40:	4a 33       	cpi	r20, 0x3A	; 58
    2b42:	18 f0       	brcs	.+6      	; 0x2b4a <__ultoa_invert+0x7c>
    2b44:	49 5d       	subi	r20, 0xD9	; 217
    2b46:	31 fd       	sbrc	r19, 1
    2b48:	40 52       	subi	r20, 0x20	; 32
    2b4a:	41 93       	st	Z+, r20
    2b4c:	02 d0       	rcall	.+4      	; 0x2b52 <__ultoa_invert+0x84>
    2b4e:	a9 f7       	brne	.-22     	; 0x2b3a <__ultoa_invert+0x6c>
    2b50:	ea cf       	rjmp	.-44     	; 0x2b26 <__ultoa_invert+0x58>
    2b52:	b4 e0       	ldi	r27, 0x04	; 4
    2b54:	a6 95       	lsr	r26
    2b56:	97 95       	ror	r25
    2b58:	87 95       	ror	r24
    2b5a:	77 95       	ror	r23
    2b5c:	67 95       	ror	r22
    2b5e:	ba 95       	dec	r27
    2b60:	c9 f7       	brne	.-14     	; 0x2b54 <__ultoa_invert+0x86>
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	61 05       	cpc	r22, r1
    2b66:	71 05       	cpc	r23, r1
    2b68:	08 95       	ret
    2b6a:	9b 01       	movw	r18, r22
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	0a 2e       	mov	r0, r26
    2b70:	06 94       	lsr	r0
    2b72:	57 95       	ror	r21
    2b74:	47 95       	ror	r20
    2b76:	37 95       	ror	r19
    2b78:	27 95       	ror	r18
    2b7a:	ba 95       	dec	r27
    2b7c:	c9 f7       	brne	.-14     	; 0x2b70 <__ultoa_invert+0xa2>
    2b7e:	62 0f       	add	r22, r18
    2b80:	73 1f       	adc	r23, r19
    2b82:	84 1f       	adc	r24, r20
    2b84:	95 1f       	adc	r25, r21
    2b86:	a0 1d       	adc	r26, r0
    2b88:	08 95       	ret

00002b8a <__divmodsi4>:
    2b8a:	05 2e       	mov	r0, r21
    2b8c:	97 fb       	bst	r25, 7
    2b8e:	1e f4       	brtc	.+6      	; 0x2b96 <__divmodsi4+0xc>
    2b90:	00 94       	com	r0
    2b92:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__negsi2>
    2b96:	57 fd       	sbrc	r21, 7
    2b98:	07 d0       	rcall	.+14     	; 0x2ba8 <__divmodsi4_neg2>
    2b9a:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__udivmodsi4>
    2b9e:	07 fc       	sbrc	r0, 7
    2ba0:	03 d0       	rcall	.+6      	; 0x2ba8 <__divmodsi4_neg2>
    2ba2:	4e f4       	brtc	.+18     	; 0x2bb6 <__divmodsi4_exit>
    2ba4:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__negsi2>

00002ba8 <__divmodsi4_neg2>:
    2ba8:	50 95       	com	r21
    2baa:	40 95       	com	r20
    2bac:	30 95       	com	r19
    2bae:	21 95       	neg	r18
    2bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb2:	4f 4f       	sbci	r20, 0xFF	; 255
    2bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00002bb6 <__divmodsi4_exit>:
    2bb6:	08 95       	ret

00002bb8 <__negsi2>:
    2bb8:	90 95       	com	r25
    2bba:	80 95       	com	r24
    2bbc:	70 95       	com	r23
    2bbe:	61 95       	neg	r22
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc6:	08 95       	ret

00002bc8 <__muluhisi3>:
    2bc8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__umulhisi3>
    2bcc:	a5 9f       	mul	r26, r21
    2bce:	90 0d       	add	r25, r0
    2bd0:	b4 9f       	mul	r27, r20
    2bd2:	90 0d       	add	r25, r0
    2bd4:	a4 9f       	mul	r26, r20
    2bd6:	80 0d       	add	r24, r0
    2bd8:	91 1d       	adc	r25, r1
    2bda:	11 24       	eor	r1, r1
    2bdc:	08 95       	ret

00002bde <__mulshisi3>:
    2bde:	b7 ff       	sbrs	r27, 7
    2be0:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <__muluhisi3>

00002be4 <__mulohisi3>:
    2be4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <__muluhisi3>
    2be8:	82 1b       	sub	r24, r18
    2bea:	93 0b       	sbc	r25, r19
    2bec:	08 95       	ret

00002bee <__prologue_saves__>:
    2bee:	2f 92       	push	r2
    2bf0:	3f 92       	push	r3
    2bf2:	4f 92       	push	r4
    2bf4:	5f 92       	push	r5
    2bf6:	6f 92       	push	r6
    2bf8:	7f 92       	push	r7
    2bfa:	8f 92       	push	r8
    2bfc:	9f 92       	push	r9
    2bfe:	af 92       	push	r10
    2c00:	bf 92       	push	r11
    2c02:	cf 92       	push	r12
    2c04:	df 92       	push	r13
    2c06:	ef 92       	push	r14
    2c08:	ff 92       	push	r15
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	ca 1b       	sub	r28, r26
    2c18:	db 0b       	sbc	r29, r27
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	09 94       	ijmp

00002c26 <__epilogue_restores__>:
    2c26:	2a 88       	ldd	r2, Y+18	; 0x12
    2c28:	39 88       	ldd	r3, Y+17	; 0x11
    2c2a:	48 88       	ldd	r4, Y+16	; 0x10
    2c2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c38:	b9 84       	ldd	r11, Y+9	; 0x09
    2c3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c3c:	df 80       	ldd	r13, Y+7	; 0x07
    2c3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c40:	fd 80       	ldd	r15, Y+5	; 0x05
    2c42:	0c 81       	ldd	r16, Y+4	; 0x04
    2c44:	1b 81       	ldd	r17, Y+3	; 0x03
    2c46:	aa 81       	ldd	r26, Y+2	; 0x02
    2c48:	b9 81       	ldd	r27, Y+1	; 0x01
    2c4a:	ce 0f       	add	r28, r30
    2c4c:	d1 1d       	adc	r29, r1
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	ed 01       	movw	r28, r26
    2c5a:	08 95       	ret

00002c5c <__udivmodsi4>:
    2c5c:	a1 e2       	ldi	r26, 0x21	; 33
    2c5e:	1a 2e       	mov	r1, r26
    2c60:	aa 1b       	sub	r26, r26
    2c62:	bb 1b       	sub	r27, r27
    2c64:	fd 01       	movw	r30, r26
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <__udivmodsi4_ep>

00002c68 <__udivmodsi4_loop>:
    2c68:	aa 1f       	adc	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	ee 1f       	adc	r30, r30
    2c6e:	ff 1f       	adc	r31, r31
    2c70:	a2 17       	cp	r26, r18
    2c72:	b3 07       	cpc	r27, r19
    2c74:	e4 07       	cpc	r30, r20
    2c76:	f5 07       	cpc	r31, r21
    2c78:	20 f0       	brcs	.+8      	; 0x2c82 <__udivmodsi4_ep>
    2c7a:	a2 1b       	sub	r26, r18
    2c7c:	b3 0b       	sbc	r27, r19
    2c7e:	e4 0b       	sbc	r30, r20
    2c80:	f5 0b       	sbc	r31, r21

00002c82 <__udivmodsi4_ep>:
    2c82:	66 1f       	adc	r22, r22
    2c84:	77 1f       	adc	r23, r23
    2c86:	88 1f       	adc	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	1a 94       	dec	r1
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <__udivmodsi4_loop>
    2c8e:	60 95       	com	r22
    2c90:	70 95       	com	r23
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	bd 01       	movw	r22, r26
    2c9c:	cf 01       	movw	r24, r30
    2c9e:	08 95       	ret

00002ca0 <__umulhisi3>:
    2ca0:	a2 9f       	mul	r26, r18
    2ca2:	b0 01       	movw	r22, r0
    2ca4:	b3 9f       	mul	r27, r19
    2ca6:	c0 01       	movw	r24, r0
    2ca8:	a3 9f       	mul	r26, r19
    2caa:	70 0d       	add	r23, r0
    2cac:	81 1d       	adc	r24, r1
    2cae:	11 24       	eor	r1, r1
    2cb0:	91 1d       	adc	r25, r1
    2cb2:	b2 9f       	mul	r27, r18
    2cb4:	70 0d       	add	r23, r0
    2cb6:	81 1d       	adc	r24, r1
    2cb8:	11 24       	eor	r1, r1
    2cba:	91 1d       	adc	r25, r1
    2cbc:	08 95       	ret

00002cbe <__do_global_dtors>:
    2cbe:	11 e0       	ldi	r17, 0x01	; 1
    2cc0:	c0 ec       	ldi	r28, 0xC0	; 192
    2cc2:	d1 e0       	ldi	r29, 0x01	; 1
    2cc4:	04 c0       	rjmp	.+8      	; 0x2cce <__do_global_dtors+0x10>
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	0e 94 95 11 	call	0x232a	; 0x232a <__tablejump2__>
    2ccc:	21 96       	adiw	r28, 0x01	; 1
    2cce:	c1 3c       	cpi	r28, 0xC1	; 193
    2cd0:	d1 07       	cpc	r29, r17
    2cd2:	c9 f7       	brne	.-14     	; 0x2cc6 <__do_global_dtors+0x8>
    2cd4:	f8 94       	cli

00002cd6 <__stop_program>:
    2cd6:	ff cf       	rjmp	.-2      	; 0x2cd6 <__stop_program>
