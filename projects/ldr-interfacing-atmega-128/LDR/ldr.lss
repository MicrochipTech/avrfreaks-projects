
ldr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000484  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e4  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000374  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017d  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000441  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010e  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016a  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  c6:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <toggleE>:
		
}

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
  ce:	da 9a       	sbi	0x1b, 2	; 27
  d0:	90 91 00 01 	lds	r25, 0x0100
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <toggleE+0xe>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	9a e0       	ldi	r25, 0x0A	; 10
CLEARBIT(PORTUSED,BIT(2));
}

void dely_ns(unsigned char tim)
{
	for(j=0;j<tim;j++)
  dc:	8a 3f       	cpi	r24, 0xFA	; 250
  de:	e0 f3       	brcs	.-8      	; 0xd8 <toggleE+0xa>
  e0:	90 93 00 01 	sts	0x0100, r25
  e4:	80 93 01 01 	sts	0x0101, r24

void toggleE(void)
{
SETBIT(PORTUSED,BIT(2));
dely_ns(250);
CLEARBIT(PORTUSED,BIT(2));
  e8:	da 98       	cbi	0x1b, 2	; 27
}
  ea:	08 95       	ret

000000ec <dely_ns>:

void dely_ns(unsigned char tim)
{
  ec:	20 91 00 01 	lds	r18, 0x0100
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <dely_ns+0xc>
	for(j=0;j<tim;j++)
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	2a e0       	ldi	r18, 0x0A	; 10
  f8:	98 17       	cp	r25, r24
  fa:	e0 f3       	brcs	.-8      	; 0xf4 <dely_ns+0x8>
  fc:	20 93 00 01 	sts	0x0100, r18
 100:	90 93 01 01 	sts	0x0101, r25
	{
		for(k=0;k<10;k++)
		{};
	}
}
 104:	08 95       	ret

00000106 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	08 2f       	mov	r16, r24
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	84 70       	andi	r24, 0x04	; 4
 110:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=((cmd&0xF0));			
 112:	80 2f       	mov	r24, r16
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 118:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
	PORTUSED=(((cmd&(0x0F))*16));	
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	0f 70       	andi	r16, 0x0F	; 15
 120:	10 70       	andi	r17, 0x00	; 0
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	00 0f       	add	r16, r16
 126:	11 1f       	adc	r17, r17
 128:	8a 95       	dec	r24
 12a:	e1 f7       	brne	.-8      	; 0x124 <lcd_cmd+0x1e>
 12c:	0b bb       	out	0x1b, r16	; 27
	toggleE();
 12e:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <lcd_init>:
void WaitMs(unsigned int ms);


void lcd_init(void)	//init the lcd
{	
	save=PORTUSED;
 138:	8b b3       	in	r24, 0x1b	; 27
 13a:	80 93 02 01 	sts	0x0102, r24
	DDRUSED=0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a bb       	out	0x1a, r24	; 26
 142:	2f e0       	ldi	r18, 0x0F	; 15
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	08 c0       	rjmp	.+16     	; 0x158 <lcd_init+0x20>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 14c:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	4c e0       	ldi	r20, 0x0C	; 12
 152:	8c 3c       	cpi	r24, 0xCC	; 204
 154:	94 07       	cpc	r25, r20
 156:	d1 f7       	brne	.-12     	; 0x14c <lcd_init+0x14>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	2f 3f       	cpi	r18, 0xFF	; 255
 160:	38 07       	cpc	r19, r24
 162:	91 f7       	brne	.-28     	; 0x148 <lcd_init+0x10>
{	
	save=PORTUSED;
	DDRUSED=0xFF;
	//DDRB=0xFF;
	WaitMs(15);
	CLEARBIT(PORTUSED,BIT(0)+BIT(1)+BIT(2));
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	84 70       	andi	r24, 0x04	; 4
 168:	8b bb       	out	0x1b, r24	; 27
	PORTUSED=0x20;
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	8b bb       	out	0x1b, r24	; 27
	lcd_cmd(0x01);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(0x0F);
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(0x02);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
	lcd_cmd(LINE1);
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
 186:	2f e0       	ldi	r18, 0x0F	; 15
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 c0       	rjmp	.+16     	; 0x19c <lcd_init+0x64>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 190:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	4c e0       	ldi	r20, 0x0C	; 12
 196:	8c 3c       	cpi	r24, 0xCC	; 204
 198:	94 07       	cpc	r25, r20
 19a:	d1 f7       	brne	.-12     	; 0x190 <lcd_init+0x58>
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	2f 3f       	cpi	r18, 0xFF	; 255
 1a4:	38 07       	cpc	r19, r24
 1a6:	91 f7       	brne	.-28     	; 0x18c <lcd_init+0x54>
	lcd_cmd(0x0F);
	lcd_cmd(0x02);
	lcd_cmd(LINE1);
	WaitMs(15);
		
}
 1a8:	08 95       	ret

000001aa <lcd_putchar>:
	PORTUSED=(((cmd&(0x0F))*16));	
	toggleE();
}

void lcd_putchar(unsigned char sig)
{
 1aa:	1f 93       	push	r17
 1ac:	18 2f       	mov	r17, r24
		PORTUSED=0x01;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	82 70       	andi	r24, 0x02	; 2
 1b6:	8b bb       	out	0x1b, r24	; 27
		PORTUSED=(sig&0xF0)|0x01;						
 1b8:	81 2f       	mov	r24, r17
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	8b bb       	out	0x1b, r24	; 27
		toggleE();
 1c0:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
		PORTUSED=((sig&(0x0F))*16)|0x01;
 1c4:	12 95       	swap	r17
 1c6:	10 7f       	andi	r17, 0xF0	; 240
 1c8:	11 60       	ori	r17, 0x01	; 1
 1ca:	1b bb       	out	0x1b, r17	; 27
		toggleE();
 1cc:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
}
 1d0:	1f 91       	pop	r17
 1d2:	08 95       	ret

000001d4 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[32])
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	7c 01       	movw	r14, r24
	unsigned char k=0;
	PORTUSED=0x01;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	8b bb       	out	0x1b, r24	; 27
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	82 70       	andi	r24, 0x02	; 2
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <lcd_string+0x40>
	while(str[k]!='\0')	//Till null character is encountered
		{
			if(k==16)
 1ee:	10 31       	cpi	r17, 0x10	; 16
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <lcd_string+0x24>
				lcd_cmd(LINE2);
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
			PORTUSED=((str[k])&0xF0)|0x01;
 1f8:	88 81       	ld	r24, Y
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 200:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
 204:	88 81       	ld	r24, Y
 206:	82 95       	swap	r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	8b bb       	out	0x1b, r24	; 27
			toggleE();
 20e:	0e 94 67 00 	call	0xce	; 0xce <toggleE>
			k++;
 212:	1f 5f       	subi	r17, 0xFF	; 255
void lcd_string(unsigned char str[32])
{
	unsigned char k=0;
	PORTUSED=0x01;
	CLEARBIT(PORTUSED,BIT(0)+BIT(2));
	while(str[k]!='\0')	//Till null character is encountered
 214:	e7 01       	movw	r28, r14
 216:	c1 0f       	add	r28, r17
 218:	d1 1d       	adc	r29, r1
 21a:	88 81       	ld	r24, Y
 21c:	88 23       	and	r24, r24
 21e:	39 f7       	brne	.-50     	; 0x1ee <lcd_string+0x1a>
			toggleE();
			PORTUSED=((str[k]&(0x0F))*16)|0x01;
			toggleE();
			k++;
		}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	08 95       	ret

0000022c <lcd_gotoxy1>:
	lcd_char(O+48);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);
 22c:	80 58       	subi	r24, 0x80	; 128
 22e:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
}
 232:	08 95       	ret

00000234 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);
 234:	80 54       	subi	r24, 0x40	; 64
 236:	0e 94 83 00 	call	0x106	; 0x106 <lcd_cmd>
}
 23a:	08 95       	ret

0000023c <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 23c:	89 30       	cpi	r24, 0x09	; 9
 23e:	21 f4       	brne	.+8      	; 0x248 <lcd_char+0xc>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(single);
 240:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putchar>
 244:	89 e0       	ldi	r24, 0x09	; 9
 246:	06 c0       	rjmp	.+12     	; 0x254 <lcd_char+0x18>
		}
	}
	else if(single=='\n')
 248:	8a 30       	cpi	r24, 0x0A	; 10
 24a:	21 f4       	brne	.+8      	; 0x254 <lcd_char+0x18>
	{
		lcd_gotoxy2(0);	
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_gotoxy2>
 252:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 254:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_putchar>
 258:	08 95       	ret

0000025a <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 264:	64 e6       	ldi	r22, 0x64	; 100
 266:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodqi4>
 26a:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	8c e9       	ldi	r24, 0x9C	; 156
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	28 9f       	mul	r18, r24
 276:	70 01       	movw	r14, r0
 278:	29 9f       	mul	r18, r25
 27a:	f0 0c       	add	r15, r0
 27c:	38 9f       	mul	r19, r24
 27e:	f0 0c       	add	r15, r0
 280:	11 24       	eor	r1, r1
 282:	c7 01       	movw	r24, r14
 284:	81 0f       	add	r24, r17
 286:	91 1d       	adc	r25, r1
 288:	6a e0       	ldi	r22, 0x0A	; 10
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	0e 94 df 01 	call	0x3be	; 0x3be <__divmodhi4>
 290:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+48);
 292:	84 2f       	mov	r24, r20
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
	lcd_char(T+48);
 29a:	80 2f       	mov	r24, r16
 29c:	80 5d       	subi	r24, 0xD0	; 208
 29e:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
	lcd_char(O+48);
 2a2:	10 5d       	subi	r17, 0xD0	; 208
 2a4:	1e 0d       	add	r17, r14
 2a6:	86 ef       	ldi	r24, 0xF6	; 246
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
 2aa:	08 9f       	mul	r16, r24
 2ac:	00 2d       	mov	r16, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	80 2f       	mov	r24, r16
 2b2:	81 0f       	add	r24, r17
 2b4:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_char>
}
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	08 95       	ret

000002c2 <lcd_exit>:
}
		

void lcd_exit(void)
{
	PORTUSED=save;
 2c2:	80 91 02 01 	lds	r24, 0x0102
 2c6:	8b bb       	out	0x1b, r24	; 27
}
 2c8:	08 95       	ret

000002ca <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 2ca:	0a c0       	rjmp	.+20     	; 0x2e0 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 2d0:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	4c e0       	ldi	r20, 0x0C	; 12
 2d8:	2c 3c       	cpi	r18, 0xCC	; 204
 2da:	34 07       	cpc	r19, r20
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <WaitMs+0x6>
 2de:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	a1 f7       	brne	.-24     	; 0x2cc <WaitMs+0x2>
		/* 16380 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 2e4:	08 95       	ret

000002e6 <ADC_init>:

void ADC_init(void);

void ADC_init(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
 2e6:	86 b1       	in	r24, 0x06	; 6
 2e8:	87 60       	ori	r24, 0x07	; 7
 2ea:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
 2ec:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
 2ee:	3d 9a       	sbi	0x07, 5	; 7
   // No MUX values needed to be changed to use ADC0 
   ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode 
 2f0:	35 9a       	sbi	0x06, 5	; 6
   ADCSRA |= (1 << ADEN);  // Enable ADC 
 2f2:	37 9a       	sbi	0x06, 7	; 6
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 2f4:	36 9a       	sbi	0x06, 6	; 6
}
 2f6:	08 95       	ret

000002f8 <main>:
int main(void)
{
 2f8:	bf 92       	push	r11
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	int i,j;
	DDRC=0xFF;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 bb       	out	0x14, r24	; 20
	lcd_init();	
 30e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>

void ADC_init(void);

void ADC_init(void)
{
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
 312:	86 b1       	in	r24, 0x06	; 6
 314:	87 60       	ori	r24, 0x07	; 7
 316:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
 318:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
 31a:	3d 9a       	sbi	0x07, 5	; 7
   // No MUX values needed to be changed to use ADC0 
   ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode 
 31c:	35 9a       	sbi	0x06, 5	; 6
   ADCSRA |= (1 << ADEN);  // Enable ADC 
 31e:	37 9a       	sbi	0x06, 7	; 6
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 320:	36 9a       	sbi	0x06, 6	; 6
	lcd_init();	
	ADC_init();	
   for(;;)  // Loop Forever 
   { 
     
		if(1<<ADCSRA)//if converstion is complete
 322:	c1 e0       	ldi	r28, 0x01	; 1
 324:	d0 e0       	ldi	r29, 0x00	; 0
			else if (ADCH<159)
			PORTC=0b11110000;
			else if (ADCH<191)
			PORTC=0b11100000;
			else if (ADCH<223)
			PORTC=0b11000000;
 326:	50 ec       	ldi	r21, 0xC0	; 192
 328:	b5 2e       	mov	r11, r21
			else if (ADCH<128)
			PORTC=0b11111000;
			else if (ADCH<159)
			PORTC=0b11110000;
			else if (ADCH<191)
			PORTC=0b11100000;
 32a:	40 ee       	ldi	r20, 0xE0	; 224
 32c:	c4 2e       	mov	r12, r20
			else if (ADCH<95)
			PORTC=0b11111100;
			else if (ADCH<128)
			PORTC=0b11111000;
			else if (ADCH<159)
			PORTC=0b11110000;
 32e:	30 ef       	ldi	r19, 0xF0	; 240
 330:	d3 2e       	mov	r13, r19
			else if (ADCH<64)
			PORTC=0b11111110;
			else if (ADCH<95)
			PORTC=0b11111100;
			else if (ADCH<128)
			PORTC=0b11111000;
 332:	28 ef       	ldi	r18, 0xF8	; 248
 334:	e2 2e       	mov	r14, r18
			if(ADCH<32)
			PORTC=0b11111111;
			else if (ADCH<64)
			PORTC=0b11111110;
			else if (ADCH<95)
			PORTC=0b11111100;
 336:	9c ef       	ldi	r25, 0xFC	; 252
 338:	f9 2e       	mov	r15, r25
		if(1<<ADCSRA)//if converstion is complete
		{
			if(ADCH<32)
			PORTC=0b11111111;
			else if (ADCH<64)
			PORTC=0b11111110;
 33a:	0e ef       	ldi	r16, 0xFE	; 254
   { 
     
		if(1<<ADCSRA)//if converstion is complete
		{
			if(ADCH<32)
			PORTC=0b11111111;
 33c:	1f ef       	ldi	r17, 0xFF	; 255
	lcd_init();	
	ADC_init();	
   for(;;)  // Loop Forever 
   { 
     
		if(1<<ADCSRA)//if converstion is complete
 33e:	86 b1       	in	r24, 0x06	; 6
 340:	9e 01       	movw	r18, r28
 342:	02 c0       	rjmp	.+4      	; 0x348 <main+0x50>
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	8a 95       	dec	r24
 34a:	e2 f7       	brpl	.-8      	; 0x344 <main+0x4c>
 34c:	21 15       	cp	r18, r1
 34e:	31 05       	cpc	r19, r1
 350:	19 f1       	breq	.+70     	; 0x398 <main+0xa0>
		{
			if(ADCH<32)
 352:	85 b1       	in	r24, 0x05	; 5
 354:	80 32       	cpi	r24, 0x20	; 32
 356:	10 f4       	brcc	.+4      	; 0x35c <main+0x64>
			PORTC=0b11111111;
 358:	15 bb       	out	0x15, r17	; 21
 35a:	1e c0       	rjmp	.+60     	; 0x398 <main+0xa0>
			else if (ADCH<64)
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	80 34       	cpi	r24, 0x40	; 64
 360:	10 f4       	brcc	.+4      	; 0x366 <main+0x6e>
			PORTC=0b11111110;
 362:	05 bb       	out	0x15, r16	; 21
 364:	19 c0       	rjmp	.+50     	; 0x398 <main+0xa0>
			else if (ADCH<95)
 366:	85 b1       	in	r24, 0x05	; 5
 368:	8f 35       	cpi	r24, 0x5F	; 95
 36a:	10 f4       	brcc	.+4      	; 0x370 <main+0x78>
			PORTC=0b11111100;
 36c:	f5 ba       	out	0x15, r15	; 21
 36e:	14 c0       	rjmp	.+40     	; 0x398 <main+0xa0>
			else if (ADCH<128)
 370:	2f 99       	sbic	0x05, 7	; 5
 372:	02 c0       	rjmp	.+4      	; 0x378 <main+0x80>
			PORTC=0b11111000;
 374:	e5 ba       	out	0x15, r14	; 21
 376:	10 c0       	rjmp	.+32     	; 0x398 <main+0xa0>
			else if (ADCH<159)
 378:	85 b1       	in	r24, 0x05	; 5
 37a:	8f 39       	cpi	r24, 0x9F	; 159
 37c:	10 f4       	brcc	.+4      	; 0x382 <main+0x8a>
			PORTC=0b11110000;
 37e:	d5 ba       	out	0x15, r13	; 21
 380:	0b c0       	rjmp	.+22     	; 0x398 <main+0xa0>
			else if (ADCH<191)
 382:	85 b1       	in	r24, 0x05	; 5
 384:	8f 3b       	cpi	r24, 0xBF	; 191
 386:	10 f4       	brcc	.+4      	; 0x38c <main+0x94>
			PORTC=0b11100000;
 388:	c5 ba       	out	0x15, r12	; 21
 38a:	06 c0       	rjmp	.+12     	; 0x398 <main+0xa0>
			else if (ADCH<223)
 38c:	85 b1       	in	r24, 0x05	; 5
 38e:	8f 3d       	cpi	r24, 0xDF	; 223
 390:	10 f4       	brcc	.+4      	; 0x396 <main+0x9e>
			PORTC=0b11000000;
 392:	b5 ba       	out	0x15, r11	; 21
 394:	01 c0       	rjmp	.+2      	; 0x398 <main+0xa0>
			else
			PORTC=0b00000000;
 396:	15 ba       	out	0x15, r1	; 21
		}
		lcd_gotoxy1(5);
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_gotoxy1>
		lcd_showvalue(ADCH);
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_showvalue>
 3a4:	cc cf       	rjmp	.-104    	; 0x33e <main+0x46>

000003a6 <__udivmodqi4>:
 3a6:	99 1b       	sub	r25, r25
 3a8:	79 e0       	ldi	r23, 0x09	; 9
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <__udivmodqi4_ep>

000003ac <__udivmodqi4_loop>:
 3ac:	99 1f       	adc	r25, r25
 3ae:	96 17       	cp	r25, r22
 3b0:	08 f0       	brcs	.+2      	; 0x3b4 <__udivmodqi4_ep>
 3b2:	96 1b       	sub	r25, r22

000003b4 <__udivmodqi4_ep>:
 3b4:	88 1f       	adc	r24, r24
 3b6:	7a 95       	dec	r23
 3b8:	c9 f7       	brne	.-14     	; 0x3ac <__udivmodqi4_loop>
 3ba:	80 95       	com	r24
 3bc:	08 95       	ret

000003be <__divmodhi4>:
 3be:	97 fb       	bst	r25, 7
 3c0:	09 2e       	mov	r0, r25
 3c2:	07 26       	eor	r0, r23
 3c4:	0a d0       	rcall	.+20     	; 0x3da <__divmodhi4_neg1>
 3c6:	77 fd       	sbrc	r23, 7
 3c8:	04 d0       	rcall	.+8      	; 0x3d2 <__divmodhi4_neg2>
 3ca:	0c d0       	rcall	.+24     	; 0x3e4 <__udivmodhi4>
 3cc:	06 d0       	rcall	.+12     	; 0x3da <__divmodhi4_neg1>
 3ce:	00 20       	and	r0, r0
 3d0:	1a f4       	brpl	.+6      	; 0x3d8 <__divmodhi4_exit>

000003d2 <__divmodhi4_neg2>:
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255

000003d8 <__divmodhi4_exit>:
 3d8:	08 95       	ret

000003da <__divmodhi4_neg1>:
 3da:	f6 f7       	brtc	.-4      	; 0x3d8 <__divmodhi4_exit>
 3dc:	90 95       	com	r25
 3de:	81 95       	neg	r24
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	08 95       	ret

000003e4 <__udivmodhi4>:
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	51 e1       	ldi	r21, 0x11	; 17
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <__udivmodhi4_ep>

000003ec <__udivmodhi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	a6 17       	cp	r26, r22
 3f2:	b7 07       	cpc	r27, r23
 3f4:	10 f0       	brcs	.+4      	; 0x3fa <__udivmodhi4_ep>
 3f6:	a6 1b       	sub	r26, r22
 3f8:	b7 0b       	sbc	r27, r23

000003fa <__udivmodhi4_ep>:
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	5a 95       	dec	r21
 400:	a9 f7       	brne	.-22     	; 0x3ec <__udivmodhi4_loop>
 402:	80 95       	com	r24
 404:	90 95       	com	r25
 406:	bc 01       	movw	r22, r24
 408:	cd 01       	movw	r24, r26
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
