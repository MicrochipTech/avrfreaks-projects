
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  0001ed96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d96  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a0  008001b6  008001b6  00000ee0  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f3  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f75  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd0  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d0  00000000  00000000  00003daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	0c 94 46 f0 	jmp	0x1e08c	; 0x1e08c <__ctors_end>
   1e004:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e008:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e00c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e010:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e014:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e018:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e01c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e020:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e024:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e028:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e02c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e030:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e034:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e038:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e03c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e040:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e044:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e048:	0c 94 08 f3 	jmp	0x1e610	; 0x1e610 <__vector_18>
   1e04c:	0c 94 91 f3 	jmp	0x1e722	; 0x1e722 <__vector_19>
   1e050:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e054:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e058:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e05c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e060:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e064:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e068:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e06c:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e070:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e074:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e078:	0c 94 31 f3 	jmp	0x1e662	; 0x1e662 <__vector_30>
   1e07c:	0c 94 5b f3 	jmp	0x1e6b6	; 0x1e6b6 <__vector_31>
   1e080:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e084:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>
   1e088:	0c 94 65 f0 	jmp	0x1e0ca	; 0x1e0ca <__bad_interrupt>

0001e08c <__ctors_end>:
   1e08c:	11 24       	eor	r1, r1
   1e08e:	1f be       	out	0x3f, r1	; 63
   1e090:	cf ef       	ldi	r28, 0xFF	; 255
   1e092:	d0 e1       	ldi	r29, 0x10	; 16
   1e094:	de bf       	out	0x3e, r29	; 62
   1e096:	cd bf       	out	0x3d, r28	; 61

0001e098 <__do_copy_data>:
   1e098:	11 e0       	ldi	r17, 0x01	; 1
   1e09a:	a0 e0       	ldi	r26, 0x00	; 0
   1e09c:	b1 e0       	ldi	r27, 0x01	; 1
   1e09e:	e6 e9       	ldi	r30, 0x96	; 150
   1e0a0:	fd ee       	ldi	r31, 0xED	; 237
   1e0a2:	01 e0       	ldi	r16, 0x01	; 1
   1e0a4:	0b bf       	out	0x3b, r16	; 59
   1e0a6:	02 c0       	rjmp	.+4      	; 0x1e0ac <__do_copy_data+0x14>
   1e0a8:	07 90       	elpm	r0, Z+
   1e0aa:	0d 92       	st	X+, r0
   1e0ac:	a6 3b       	cpi	r26, 0xB6	; 182
   1e0ae:	b1 07       	cpc	r27, r17
   1e0b0:	d9 f7       	brne	.-10     	; 0x1e0a8 <__do_copy_data+0x10>

0001e0b2 <__do_clear_bss>:
   1e0b2:	14 e0       	ldi	r17, 0x04	; 4
   1e0b4:	a6 eb       	ldi	r26, 0xB6	; 182
   1e0b6:	b1 e0       	ldi	r27, 0x01	; 1
   1e0b8:	01 c0       	rjmp	.+2      	; 0x1e0bc <.do_clear_bss_start>

0001e0ba <.do_clear_bss_loop>:
   1e0ba:	1d 92       	st	X+, r1

0001e0bc <.do_clear_bss_start>:
   1e0bc:	a6 35       	cpi	r26, 0x56	; 86
   1e0be:	b1 07       	cpc	r27, r17
   1e0c0:	e1 f7       	brne	.-8      	; 0x1e0ba <.do_clear_bss_loop>
   1e0c2:	0e 94 67 f0 	call	0x1e0ce	; 0x1e0ce <main>
   1e0c6:	0c 94 c9 f6 	jmp	0x1ed92	; 0x1ed92 <_exit>

0001e0ca <__bad_interrupt>:
   1e0ca:	0c 94 00 f0 	jmp	0x1e000	; 0x1e000 <__vectors>

0001e0ce <main>:
	void (*mainapp)(void)=NULL;
	extern volatile unsigned char uart_select; //1=uart0 2=uart1
	
// Main application routine.
int main(void)
{
   1e0ce:	ef 92       	push	r14
   1e0d0:	ff 92       	push	r15
   1e0d2:	1f 93       	push	r17
   1e0d4:	cf 93       	push	r28
   1e0d6:	df 93       	push	r29
	int timeout;
	char *char_ptr, failed, finished;
	
	if(uart_init())	// detect ' ' on com 1 or 0, then configure that port
   1e0d8:	0e 94 c2 f3 	call	0x1e784	; 0x1e784 <uart_init>
   1e0dc:	88 23       	and	r24, r24
   1e0de:	09 f4       	brne	.+2      	; 0x1e0e2 <main+0x14>
   1e0e0:	bf c0       	rjmp	.+382    	; 0x1e260 <main+0x192>
	{
		MCUCR = _BV(IVCE);
   1e0e2:	81 e0       	ldi	r24, 0x01	; 1
   1e0e4:	85 bf       	out	0x35, r24	; 53
		MCUCR = _BV(IVSEL);
   1e0e6:	82 e0       	ldi	r24, 0x02	; 2
   1e0e8:	85 bf       	out	0x35, r24	; 53
		
		sei();
   1e0ea:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   1e0ec:	80 e4       	ldi	r24, 0x40	; 64
   1e0ee:	e8 2e       	mov	r14, r24
   1e0f0:	8c e9       	ldi	r24, 0x9C	; 156
   1e0f2:	f8 2e       	mov	r15, r24
		do
		{
			timeout=TIMEOUT_ZPROMPT/0.010;
			UART_TX("\r\nMICKBOOT V1.0 Uart");
   1e0f4:	80 e0       	ldi	r24, 0x00	; 0
   1e0f6:	91 e0       	ldi	r25, 0x01	; 1
   1e0f8:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
			
			if(UCSR1B & _BV(RXEN1))
   1e0fc:	80 91 9a 00 	lds	r24, 0x009A
   1e100:	84 ff       	sbrs	r24, 4
   1e102:	03 c0       	rjmp	.+6      	; 0x1e10a <main+0x3c>
				UART_TX("1");
   1e104:	85 e1       	ldi	r24, 0x15	; 21
   1e106:	91 e0       	ldi	r25, 0x01	; 1
   1e108:	02 c0       	rjmp	.+4      	; 0x1e10e <main+0x40>
			else
				UART_TX("0");
   1e10a:	87 e1       	ldi	r24, 0x17	; 23
   1e10c:	91 e0       	ldi	r25, 0x01	; 1
   1e10e:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
			
			UART_TX("\r\nSend Z\r\n");
   1e112:	89 e1       	ldi	r24, 0x19	; 25
   1e114:	91 e0       	ldi	r25, 0x01	; 1
   1e116:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
   1e11a:	2c ed       	ldi	r18, 0xDC	; 220
   1e11c:	35 e0       	ldi	r19, 0x05	; 5
			
			finished=FALSE;
			failed=FALSE;
			do
			{
				if(uart_fifo_rx.empty==FALSE)
   1e11e:	80 91 ca 02 	lds	r24, 0x02CA
   1e122:	88 23       	and	r24, r24
   1e124:	09 f0       	breq	.+2      	; 0x1e128 <main+0x5a>
   1e126:	74 c0       	rjmp	.+232    	; 0x1e210 <main+0x142>
				{
					timeout=TIMEOUT_ZPROMPT/0.010;
					if(fifo_read_char(&uart_fifo_rx)=='Z')
   1e128:	86 ec       	ldi	r24, 0xC6	; 198
   1e12a:	92 e0       	ldi	r25, 0x02	; 2
   1e12c:	0e 94 d6 f5 	call	0x1ebac	; 0x1ebac <fifo_read_char>
   1e130:	8a 35       	cpi	r24, 0x5A	; 90
   1e132:	99 f7       	brne	.-26     	; 0x1e11a <main+0x4c>
					{
						UART_TX("\r\nSend hex file in ASCII\r\n");
   1e134:	84 e2       	ldi	r24, 0x24	; 36
   1e136:	91 e0       	ldi	r25, 0x01	; 1
   1e138:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
						timeout=TIMEOUT_HEX_DATA/0.010;
						failed=FALSE;
						finished=FALSE;
						ihex_init();
   1e13c:	0e 94 ab f4 	call	0x1e956	; 0x1e956 <ihex_init>
   1e140:	c0 e7       	ldi	r28, 0x70	; 112
   1e142:	d7 e1       	ldi	r29, 0x17	; 23
						do
						{
							if(uart_fifo_rx.empty==FALSE)
   1e144:	80 91 ca 02 	lds	r24, 0x02CA
   1e148:	88 23       	and	r24, r24
   1e14a:	09 f0       	breq	.+2      	; 0x1e14e <main+0x80>
   1e14c:	43 c0       	rjmp	.+134    	; 0x1e1d4 <main+0x106>
							{
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char(&uart_fifo_rx));
   1e14e:	86 ec       	ldi	r24, 0xC6	; 198
   1e150:	92 e0       	ldi	r25, 0x02	; 2
   1e152:	0e 94 d6 f5 	call	0x1ebac	; 0x1ebac <fifo_read_char>
   1e156:	0e 94 a7 f5 	call	0x1eb4e	; 0x1eb4e <ihex_char>
								if(ihex_byte_count)
   1e15a:	80 91 19 04 	lds	r24, 0x0419
   1e15e:	88 23       	and	r24, r24
   1e160:	39 f1       	breq	.+78     	; 0x1e1b0 <main+0xe2>
   1e162:	c9 e0       	ldi	r28, 0x09	; 9
   1e164:	d4 e0       	ldi	r29, 0x04	; 4
   1e166:	1b c0       	rjmp	.+54     	; 0x1e19e <main+0xd0>
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
										flash_byte(ihex_address++, *char_ptr++);
   1e168:	60 91 ba 01 	lds	r22, 0x01BA
   1e16c:	70 91 bb 01 	lds	r23, 0x01BB
   1e170:	80 91 bc 01 	lds	r24, 0x01BC
   1e174:	90 91 bd 01 	lds	r25, 0x01BD
   1e178:	6f 5f       	subi	r22, 0xFF	; 255
   1e17a:	7f 4f       	sbci	r23, 0xFF	; 255
   1e17c:	8f 4f       	sbci	r24, 0xFF	; 255
   1e17e:	9f 4f       	sbci	r25, 0xFF	; 255
   1e180:	60 93 ba 01 	sts	0x01BA, r22
   1e184:	70 93 bb 01 	sts	0x01BB, r23
   1e188:	80 93 bc 01 	sts	0x01BC, r24
   1e18c:	90 93 bd 01 	sts	0x01BD, r25
   1e190:	61 50       	subi	r22, 0x01	; 1
   1e192:	70 40       	sbci	r23, 0x00	; 0
   1e194:	80 40       	sbci	r24, 0x00	; 0
   1e196:	90 40       	sbci	r25, 0x00	; 0
   1e198:	49 91       	ld	r20, Y+
   1e19a:	0e 94 e6 f1 	call	0x1e3cc	; 0x1e3cc <flash_byte>
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char(&uart_fifo_rx));
								if(ihex_byte_count)
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
   1e19e:	80 91 19 04 	lds	r24, 0x0419
   1e1a2:	81 50       	subi	r24, 0x01	; 1
   1e1a4:	80 93 19 04 	sts	0x0419, r24
   1e1a8:	8f 5f       	subi	r24, 0xFF	; 255
   1e1aa:	f1 f6       	brne	.-68     	; 0x1e168 <main+0x9a>
										flash_byte(ihex_address++, *char_ptr++);
									ihex_byte_count=0;
   1e1ac:	10 92 19 04 	sts	0x0419, r1
								};
								if(ihex_status==IHEX_STATUS_EOF)
   1e1b0:	80 91 08 04 	lds	r24, 0x0408
   1e1b4:	81 30       	cpi	r24, 0x01	; 1
   1e1b6:	09 f0       	breq	.+2      	; 0x1e1ba <main+0xec>
   1e1b8:	60 c0       	rjmp	.+192    	; 0x1e27a <main+0x1ac>
								{
									flash_finish();
   1e1ba:	0e 94 e3 f1 	call	0x1e3c6	; 0x1e3c6 <flash_finish>
									if(!writer_failed)
   1e1be:	80 91 b8 01 	lds	r24, 0x01B8
   1e1c2:	88 23       	and	r24, r24
   1e1c4:	09 f0       	breq	.+2      	; 0x1e1c8 <main+0xfa>
   1e1c6:	59 c0       	rjmp	.+178    	; 0x1e27a <main+0x1ac>
									{
										UART_TX("Success!\r\n");
   1e1c8:	8f e3       	ldi	r24, 0x3F	; 63
   1e1ca:	91 e0       	ldi	r25, 0x01	; 1
   1e1cc:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
   1e1d0:	11 e0       	ldi	r17, 0x01	; 1
   1e1d2:	54 c0       	rjmp	.+168    	; 0x1e27c <main+0x1ae>
									};							
								};
							}
							else
							{
								timeout--;
   1e1d4:	21 97       	sbiw	r28, 0x01	; 1
   1e1d6:	c7 01       	movw	r24, r14
   1e1d8:	01 97       	sbiw	r24, 0x01	; 1
   1e1da:	f1 f7       	brne	.-4      	; 0x1e1d8 <main+0x10a>
								_delay_ms(10);
							};
							
							if(!timeout)	//if timeout looking for hex data, repeat Z prompt
   1e1dc:	20 97       	sbiw	r28, 0x00	; 0
   1e1de:	11 f0       	breq	.+4      	; 0x1e1e4 <main+0x116>
   1e1e0:	90 e0       	ldi	r25, 0x00	; 0
   1e1e2:	05 c0       	rjmp	.+10     	; 0x1e1ee <main+0x120>
							{
								UART_TX("Timeout waiting for hex data\r\n");
   1e1e4:	8a e4       	ldi	r24, 0x4A	; 74
   1e1e6:	91 e0       	ldi	r25, 0x01	; 1
   1e1e8:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
   1e1ec:	91 e0       	ldi	r25, 0x01	; 1
   1e1ee:	10 e0       	ldi	r17, 0x00	; 0
								failed=TRUE;
							};
							
							if(ihex_status == IHEX_STATUS_ERROR)
   1e1f0:	80 91 08 04 	lds	r24, 0x0408
   1e1f4:	82 30       	cpi	r24, 0x02	; 2
   1e1f6:	29 f4       	brne	.+10     	; 0x1e202 <main+0x134>
							{
								UART_TX("Hex file ERROR!\r\n");
   1e1f8:	89 e6       	ldi	r24, 0x69	; 105
   1e1fa:	91 e0       	ldi	r25, 0x01	; 1
   1e1fc:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
   1e200:	41 c0       	rjmp	.+130    	; 0x1e284 <main+0x1b6>
								failed=TRUE;
							};
							
						}while(!failed && !finished);
   1e202:	99 23       	and	r25, r25
   1e204:	09 f0       	breq	.+2      	; 0x1e208 <main+0x13a>
   1e206:	3e c0       	rjmp	.+124    	; 0x1e284 <main+0x1b6>
   1e208:	11 23       	and	r17, r17
   1e20a:	09 f4       	brne	.+2      	; 0x1e20e <main+0x140>
   1e20c:	9b cf       	rjmp	.-202    	; 0x1e144 <main+0x76>
   1e20e:	0d c0       	rjmp	.+26     	; 0x1e22a <main+0x15c>
					};
				}
				else
				{
					timeout--;
   1e210:	21 50       	subi	r18, 0x01	; 1
   1e212:	30 40       	sbci	r19, 0x00	; 0
   1e214:	c7 01       	movw	r24, r14
   1e216:	01 97       	sbiw	r24, 0x01	; 1
   1e218:	f1 f7       	brne	.-4      	; 0x1e216 <main+0x148>
					_delay_ms(10);
					if(!timeout)	//if timeout looking for Z, finish and run main app
   1e21a:	21 15       	cp	r18, r1
   1e21c:	31 05       	cpc	r19, r1
   1e21e:	09 f0       	breq	.+2      	; 0x1e222 <main+0x154>
   1e220:	7e cf       	rjmp	.-260    	; 0x1e11e <main+0x50>
					{
						finished=TRUE;
						UART_TX("Timeout waiting for Z\r\n");
   1e222:	8b e7       	ldi	r24, 0x7B	; 123
   1e224:	91 e0       	ldi	r25, 0x01	; 1
   1e226:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
		
		UART_TX("RUNNING\r\n");
   1e22a:	83 e9       	ldi	r24, 0x93	; 147
   1e22c:	91 e0       	ldi	r25, 0x01	; 1
   1e22e:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
   1e232:	88 e8       	ldi	r24, 0x88	; 136
   1e234:	93 e1       	ldi	r25, 0x13	; 19
   1e236:	20 e9       	ldi	r18, 0x90	; 144
   1e238:	31 e0       	ldi	r19, 0x01	; 1
   1e23a:	f9 01       	movw	r30, r18
   1e23c:	31 97       	sbiw	r30, 0x01	; 1
   1e23e:	f1 f7       	brne	.-4      	; 0x1e23c <main+0x16e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1e240:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1e242:	d9 f7       	brne	.-10     	; 0x1e23a <main+0x16c>
		_delay_ms(500);
		cli();
   1e244:	f8 94       	cli
		MCUCR = _BV(IVCE);
   1e246:	81 e0       	ldi	r24, 0x01	; 1
   1e248:	85 bf       	out	0x35, r24	; 53
		MCUCR = 0;
   1e24a:	15 be       	out	0x35, r1	; 53
		wdt_enable(WDTO_15MS);
   1e24c:	28 e0       	ldi	r18, 0x08	; 8
   1e24e:	88 e1       	ldi	r24, 0x18	; 24
   1e250:	90 e0       	ldi	r25, 0x00	; 0
   1e252:	0f b6       	in	r0, 0x3f	; 63
   1e254:	f8 94       	cli
   1e256:	a8 95       	wdr
   1e258:	81 bd       	out	0x21, r24	; 33
   1e25a:	0f be       	out	0x3f, r0	; 63
   1e25c:	21 bd       	out	0x21, r18	; 33
   1e25e:	ff cf       	rjmp	.-2      	; 0x1e25e <main+0x190>
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e260:	e0 91 b6 01 	lds	r30, 0x01B6
   1e264:	f0 91 b7 01 	lds	r31, 0x01B7
   1e268:	09 95       	icall

	return 0;
}
   1e26a:	80 e0       	ldi	r24, 0x00	; 0
   1e26c:	90 e0       	ldi	r25, 0x00	; 0
   1e26e:	df 91       	pop	r29
   1e270:	cf 91       	pop	r28
   1e272:	1f 91       	pop	r17
   1e274:	ff 90       	pop	r15
   1e276:	ef 90       	pop	r14
   1e278:	08 95       	ret
		wdt_enable(WDTO_15MS);
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e27a:	10 e0       	ldi	r17, 0x00	; 0
   1e27c:	90 e0       	ldi	r25, 0x00	; 0
   1e27e:	c0 e7       	ldi	r28, 0x70	; 112
   1e280:	d7 e1       	ldi	r29, 0x17	; 23
   1e282:	b6 cf       	rjmp	.-148    	; 0x1e1f0 <main+0x122>
				
			//look for Z while not failed and not finished (a failure must repeat z prompt)
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
   1e284:	11 23       	and	r17, r17
   1e286:	09 f4       	brne	.+2      	; 0x1e28a <main+0x1bc>
   1e288:	35 cf       	rjmp	.-406    	; 0x1e0f4 <main+0x26>
   1e28a:	cf cf       	rjmp	.-98     	; 0x1e22a <main+0x15c>

0001e28c <memcmp_farP>:
{
	write_page();
}

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
   1e28c:	1f 93       	push	r17
   1e28e:	dc 01       	movw	r26, r24
   1e290:	10 e0       	ldi	r17, 0x00	; 0
   1e292:	0d c0       	rjmp	.+26     	; 0x1e2ae <memcmp_farP+0x22>
	char retval=0;
	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e294:	6b bf       	out	0x3b, r22	; 59
   1e296:	fa 01       	movw	r30, r20
   1e298:	97 91       	elpm	r25, Z+
   1e29a:	8c 91       	ld	r24, X
   1e29c:	89 13       	cpse	r24, r25
   1e29e:	11 e0       	ldi	r17, 0x01	; 1
   1e2a0:	4f 5f       	subi	r20, 0xFF	; 255
   1e2a2:	5f 4f       	sbci	r21, 0xFF	; 255
   1e2a4:	6f 4f       	sbci	r22, 0xFF	; 255
   1e2a6:	7f 4f       	sbci	r23, 0xFF	; 255
   1e2a8:	11 96       	adiw	r26, 0x01	; 1
   1e2aa:	21 50       	subi	r18, 0x01	; 1
   1e2ac:	30 40       	sbci	r19, 0x00	; 0
}

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;
	while(size--)
   1e2ae:	21 15       	cp	r18, r1
   1e2b0:	31 05       	cpc	r19, r1
   1e2b2:	81 f7       	brne	.-32     	; 0x1e294 <memcmp_farP+0x8>
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
			retval=1;
	};
	return retval;
}
   1e2b4:	81 2f       	mov	r24, r17
   1e2b6:	1f 91       	pop	r17
   1e2b8:	08 95       	ret

0001e2ba <write_page>:

void write_page(void)
{		
   1e2ba:	9f 92       	push	r9
   1e2bc:	af 92       	push	r10
   1e2be:	bf 92       	push	r11
   1e2c0:	cf 92       	push	r12
   1e2c2:	df 92       	push	r13
   1e2c4:	ef 92       	push	r14
   1e2c6:	ff 92       	push	r15
   1e2c8:	0f 93       	push	r16
   1e2ca:	1f 93       	push	r17
   1e2cc:	cf 93       	push	r28
   1e2ce:	df 93       	push	r29
   1e2d0:	3a e0       	ldi	r19, 0x0A	; 10
   1e2d2:	d3 2e       	mov	r13, r19
		while(tempint!=FLASH_PAGE_SIZE)
		{
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
			tempint2+=buffer_verify[tempint];
			boot_page_fill(progmem_add, tempint2);	
   1e2d4:	99 24       	eor	r9, r9
   1e2d6:	93 94       	inc	r9
			progmem_add+=2;
			tempint+=2;
		};
		
		boot_page_erase(current_page);
   1e2d8:	23 e0       	ldi	r18, 0x03	; 3
   1e2da:	a2 2e       	mov	r10, r18
		boot_spm_busy_wait();      // Wait until the memory is erased.
		boot_page_write(current_page);
   1e2dc:	95 e0       	ldi	r25, 0x05	; 5
   1e2de:	b9 2e       	mov	r11, r25
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		progmem_add = current_page;
		boot_rww_enable();
   1e2e0:	81 e1       	ldi	r24, 0x11	; 17
   1e2e2:	c8 2e       	mov	r12, r24
	unsigned int tempint, tempint2;
	
	do
	{
		//fill buffer
		progmem_add = current_page;
   1e2e4:	e0 90 b1 01 	lds	r14, 0x01B1
   1e2e8:	f0 90 b2 01 	lds	r15, 0x01B2
   1e2ec:	00 91 b3 01 	lds	r16, 0x01B3
   1e2f0:	10 91 b4 01 	lds	r17, 0x01B4
   1e2f4:	a6 ec       	ldi	r26, 0xC6	; 198
   1e2f6:	b1 e0       	ldi	r27, 0x01	; 1
   1e2f8:	a8 01       	movw	r20, r16
   1e2fa:	97 01       	movw	r18, r14
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
		{
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
   1e2fc:	11 96       	adiw	r26, 0x01	; 1
   1e2fe:	dc 91       	ld	r29, X
   1e300:	11 97       	sbiw	r26, 0x01	; 1
   1e302:	c0 e0       	ldi	r28, 0x00	; 0
			tempint2+=buffer_verify[tempint];
			boot_page_fill(progmem_add, tempint2);	
   1e304:	8c 91       	ld	r24, X
   1e306:	be 01       	movw	r22, r28
   1e308:	68 0f       	add	r22, r24
   1e30a:	71 1d       	adc	r23, r1
   1e30c:	0b 01       	movw	r0, r22
   1e30e:	f9 01       	movw	r30, r18
   1e310:	40 93 5b 00 	sts	0x005B, r20
   1e314:	90 92 68 00 	sts	0x0068, r9
   1e318:	e8 95       	spm
   1e31a:	11 24       	eor	r1, r1
			progmem_add+=2;
   1e31c:	2e 5f       	subi	r18, 0xFE	; 254
   1e31e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e320:	4f 4f       	sbci	r20, 0xFF	; 255
   1e322:	5f 4f       	sbci	r21, 0xFF	; 255
   1e324:	12 96       	adiw	r26, 0x02	; 2
	do
	{
		//fill buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e326:	72 e0       	ldi	r23, 0x02	; 2
   1e328:	a6 3c       	cpi	r26, 0xC6	; 198
   1e32a:	b7 07       	cpc	r27, r23
   1e32c:	39 f7       	brne	.-50     	; 0x1e2fc <write_page+0x42>
			boot_page_fill(progmem_add, tempint2);	
			progmem_add+=2;
			tempint+=2;
		};
		
		boot_page_erase(current_page);
   1e32e:	f7 01       	movw	r30, r14
   1e330:	00 93 5b 00 	sts	0x005B, r16
   1e334:	a0 92 68 00 	sts	0x0068, r10
   1e338:	e8 95       	spm
		boot_spm_busy_wait();      // Wait until the memory is erased.
   1e33a:	80 91 68 00 	lds	r24, 0x0068
   1e33e:	80 fd       	sbrc	r24, 0
   1e340:	fc cf       	rjmp	.-8      	; 0x1e33a <write_page+0x80>
		boot_page_write(current_page);
   1e342:	f7 01       	movw	r30, r14
   1e344:	00 93 5b 00 	sts	0x005B, r16
   1e348:	b0 92 68 00 	sts	0x0068, r11
   1e34c:	e8 95       	spm
		boot_spm_busy_wait();      // Wait until the memory is programmed.
   1e34e:	80 91 68 00 	lds	r24, 0x0068
   1e352:	80 fd       	sbrc	r24, 0
   1e354:	fc cf       	rjmp	.-8      	; 0x1e34e <write_page+0x94>
		progmem_add = current_page;
		boot_rww_enable();
   1e356:	c0 92 68 00 	sts	0x0068, r12
   1e35a:	e8 95       	spm
   1e35c:	20 e0       	ldi	r18, 0x00	; 0
   1e35e:	a6 ec       	ldi	r26, 0xC6	; 198
   1e360:	b1 e0       	ldi	r27, 0x01	; 1
   1e362:	0c c0       	rjmp	.+24     	; 0x1e37c <write_page+0xc2>
char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;
	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e364:	0b bf       	out	0x3b, r16	; 59
   1e366:	f7 01       	movw	r30, r14
   1e368:	97 91       	elpm	r25, Z+
   1e36a:	8c 91       	ld	r24, X
   1e36c:	89 13       	cpse	r24, r25
   1e36e:	21 e0       	ldi	r18, 0x01	; 1
   1e370:	08 94       	sec
   1e372:	e1 1c       	adc	r14, r1
   1e374:	f1 1c       	adc	r15, r1
   1e376:	01 1d       	adc	r16, r1
   1e378:	11 1d       	adc	r17, r1
   1e37a:	11 96       	adiw	r26, 0x01	; 1
}

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;
	while(size--)
   1e37c:	82 e0       	ldi	r24, 0x02	; 2
   1e37e:	a6 3c       	cpi	r26, 0xC6	; 198
   1e380:	b8 07       	cpc	r27, r24
   1e382:	81 f7       	brne	.-32     	; 0x1e364 <write_page+0xaa>
		boot_page_write(current_page);
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		progmem_add = current_page;
		boot_rww_enable();
		
		if( memcmp_farP(buffer_verify, progmem_add, FLASH_PAGE_SIZE) )
   1e384:	22 23       	and	r18, r18
   1e386:	11 f4       	brne	.+4      	; 0x1e38c <write_page+0xd2>
   1e388:	81 e0       	ldi	r24, 0x01	; 1
   1e38a:	06 c0       	rjmp	.+12     	; 0x1e398 <write_page+0xde>
		{
			UART_TX("Retrying\r\n");
   1e38c:	8d e9       	ldi	r24, 0x9D	; 157
   1e38e:	91 e0       	ldi	r25, 0x01	; 1
   1e390:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
			retry--;
   1e394:	da 94       	dec	r13
   1e396:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
			verified=TRUE;
			
	}while(retry && !verified);
   1e398:	dd 20       	and	r13, r13
   1e39a:	21 f0       	breq	.+8      	; 0x1e3a4 <write_page+0xea>
   1e39c:	88 23       	and	r24, r24
   1e39e:	09 f4       	brne	.+2      	; 0x1e3a2 <write_page+0xe8>
   1e3a0:	a1 cf       	rjmp	.-190    	; 0x1e2e4 <write_page+0x2a>
   1e3a2:	05 c0       	rjmp	.+10     	; 0x1e3ae <write_page+0xf4>
	
	if(!verified)
   1e3a4:	88 23       	and	r24, r24
   1e3a6:	19 f4       	brne	.+6      	; 0x1e3ae <write_page+0xf4>
		writer_failed=TRUE;
   1e3a8:	81 e0       	ldi	r24, 0x01	; 1
   1e3aa:	80 93 b8 01 	sts	0x01B8, r24
}
   1e3ae:	df 91       	pop	r29
   1e3b0:	cf 91       	pop	r28
   1e3b2:	1f 91       	pop	r17
   1e3b4:	0f 91       	pop	r16
   1e3b6:	ff 90       	pop	r15
   1e3b8:	ef 90       	pop	r14
   1e3ba:	df 90       	pop	r13
   1e3bc:	cf 90       	pop	r12
   1e3be:	bf 90       	pop	r11
   1e3c0:	af 90       	pop	r10
   1e3c2:	9f 90       	pop	r9
   1e3c4:	08 95       	ret

0001e3c6 <flash_finish>:
	write_needed=TRUE;
}

void flash_finish(void)
{
	write_page();
   1e3c6:	0e 94 5d f1 	call	0x1e2ba	; 0x1e2ba <write_page>
}
   1e3ca:	08 95       	ret

0001e3cc <flash_byte>:
	char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size);
	void write_page(void);

// call with bytes, builds pages and writes pages to flash.
void flash_byte(unsigned long address, char byte)
{
   1e3cc:	9f 92       	push	r9
   1e3ce:	af 92       	push	r10
   1e3d0:	bf 92       	push	r11
   1e3d2:	cf 92       	push	r12
   1e3d4:	df 92       	push	r13
   1e3d6:	ef 92       	push	r14
   1e3d8:	ff 92       	push	r15
   1e3da:	0f 93       	push	r16
   1e3dc:	1f 93       	push	r17
   1e3de:	df 93       	push	r29
   1e3e0:	cf 93       	push	r28
   1e3e2:	cd b7       	in	r28, 0x3d	; 61
   1e3e4:	de b7       	in	r29, 0x3e	; 62
   1e3e6:	2a 97       	sbiw	r28, 0x0a	; 10
   1e3e8:	0f b6       	in	r0, 0x3f	; 63
   1e3ea:	f8 94       	cli
   1e3ec:	de bf       	out	0x3e, r29	; 62
   1e3ee:	0f be       	out	0x3f, r0	; 63
   1e3f0:	cd bf       	out	0x3d, r28	; 61
   1e3f2:	5b 01       	movw	r10, r22
   1e3f4:	6c 01       	movw	r12, r24
   1e3f6:	94 2e       	mov	r9, r20
	static char write_needed=FALSE;
	int tempint=0;
	unsigned long progmem_add;

	//new page?
	if((address & FLASH_PAGE_MASK) != current_page)
   1e3f8:	e1 2c       	mov	r14, r1
   1e3fa:	4f ef       	ldi	r20, 0xFF	; 255
   1e3fc:	f4 2e       	mov	r15, r20
   1e3fe:	4f ef       	ldi	r20, 0xFF	; 255
   1e400:	04 2f       	mov	r16, r20
   1e402:	4f ef       	ldi	r20, 0xFF	; 255
   1e404:	14 2f       	mov	r17, r20
   1e406:	e6 22       	and	r14, r22
   1e408:	f7 22       	and	r15, r23
   1e40a:	08 23       	and	r16, r24
   1e40c:	19 23       	and	r17, r25
   1e40e:	80 91 b1 01 	lds	r24, 0x01B1
   1e412:	90 91 b2 01 	lds	r25, 0x01B2
   1e416:	a0 91 b3 01 	lds	r26, 0x01B3
   1e41a:	b0 91 b4 01 	lds	r27, 0x01B4
   1e41e:	e8 16       	cp	r14, r24
   1e420:	f9 06       	cpc	r15, r25
   1e422:	0a 07       	cpc	r16, r26
   1e424:	1b 07       	cpc	r17, r27
   1e426:	09 f4       	brne	.+2      	; 0x1e42a <flash_byte+0x5e>
   1e428:	44 c0       	rjmp	.+136    	; 0x1e4b2 <flash_byte+0xe6>
	{
		//write previous page (if there is one)
		if(write_needed)
   1e42a:	80 91 b9 01 	lds	r24, 0x01B9
   1e42e:	88 23       	and	r24, r24
   1e430:	11 f0       	breq	.+4      	; 0x1e436 <flash_byte+0x6a>
			write_page();
   1e432:	0e 94 5d f1 	call	0x1e2ba	; 0x1e2ba <write_page>
		
		current_page = address & FLASH_PAGE_MASK;
   1e436:	e0 92 b1 01 	sts	0x01B1, r14
   1e43a:	f0 92 b2 01 	sts	0x01B2, r15
   1e43e:	00 93 b3 01 	sts	0x01B3, r16
   1e442:	10 93 b4 01 	sts	0x01B4, r17
		
		UART_TX("PAGE ");
   1e446:	88 ea       	ldi	r24, 0xA8	; 168
   1e448:	91 e0       	ldi	r25, 0x01	; 1
   1e44a:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
		UART_TX(ltoa(current_page, tempbuf, 16));
   1e44e:	60 91 b1 01 	lds	r22, 0x01B1
   1e452:	70 91 b2 01 	lds	r23, 0x01B2
   1e456:	80 91 b3 01 	lds	r24, 0x01B3
   1e45a:	90 91 b4 01 	lds	r25, 0x01B4
   1e45e:	ae 01       	movw	r20, r28
   1e460:	4f 5f       	subi	r20, 0xFF	; 255
   1e462:	5f 4f       	sbci	r21, 0xFF	; 255
   1e464:	20 e1       	ldi	r18, 0x10	; 16
   1e466:	30 e0       	ldi	r19, 0x00	; 0
   1e468:	0e 94 60 f6 	call	0x1ecc0	; 0x1ecc0 <ltoa>
   1e46c:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
		UART_TX("\r\n");
   1e470:	8e ea       	ldi	r24, 0xAE	; 174
   1e472:	91 e0       	ldi	r25, 0x01	; 1
   1e474:	0e 94 73 f2 	call	0x1e4e6	; 0x1e4e6 <uart_write_string>
		
		//read new page into buffer
		progmem_add = current_page;
   1e478:	80 91 b1 01 	lds	r24, 0x01B1
   1e47c:	90 91 b2 01 	lds	r25, 0x01B2
   1e480:	a0 91 b3 01 	lds	r26, 0x01B3
   1e484:	b0 91 b4 01 	lds	r27, 0x01B4
   1e488:	26 ec       	ldi	r18, 0xC6	; 198
   1e48a:	31 e0       	ldi	r19, 0x01	; 1
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
   1e48c:	ac 01       	movw	r20, r24
   1e48e:	bd 01       	movw	r22, r26
   1e490:	4f 5f       	subi	r20, 0xFF	; 255
   1e492:	5f 4f       	sbci	r21, 0xFF	; 255
   1e494:	6f 4f       	sbci	r22, 0xFF	; 255
   1e496:	7f 4f       	sbci	r23, 0xFF	; 255
   1e498:	ab bf       	out	0x3b, r26	; 59
   1e49a:	fc 01       	movw	r30, r24
   1e49c:	87 91       	elpm	r24, Z+
   1e49e:	f9 01       	movw	r30, r18
   1e4a0:	81 93       	st	Z+, r24
   1e4a2:	9f 01       	movw	r18, r30
		UART_TX("\r\n");
		
		//read new page into buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e4a4:	f2 e0       	ldi	r31, 0x02	; 2
   1e4a6:	26 3c       	cpi	r18, 0xC6	; 198
   1e4a8:	3f 07       	cpc	r19, r31
   1e4aa:	19 f0       	breq	.+6      	; 0x1e4b2 <flash_byte+0xe6>
   1e4ac:	db 01       	movw	r26, r22
   1e4ae:	ca 01       	movw	r24, r20
   1e4b0:	ed cf       	rjmp	.-38     	; 0x1e48c <flash_byte+0xc0>
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
	};

	buffer_verify[address&0xFF]=byte;
   1e4b2:	f5 01       	movw	r30, r10
   1e4b4:	f0 70       	andi	r31, 0x00	; 0
   1e4b6:	ea 53       	subi	r30, 0x3A	; 58
   1e4b8:	fe 4f       	sbci	r31, 0xFE	; 254
   1e4ba:	90 82       	st	Z, r9
//	buffer_verify[(address+1)&0xFF]=(char)(word>>8);
	write_needed=TRUE;
   1e4bc:	81 e0       	ldi	r24, 0x01	; 1
   1e4be:	80 93 b9 01 	sts	0x01B9, r24
}
   1e4c2:	2a 96       	adiw	r28, 0x0a	; 10
   1e4c4:	0f b6       	in	r0, 0x3f	; 63
   1e4c6:	f8 94       	cli
   1e4c8:	de bf       	out	0x3e, r29	; 62
   1e4ca:	0f be       	out	0x3f, r0	; 63
   1e4cc:	cd bf       	out	0x3d, r28	; 61
   1e4ce:	cf 91       	pop	r28
   1e4d0:	df 91       	pop	r29
   1e4d2:	1f 91       	pop	r17
   1e4d4:	0f 91       	pop	r16
   1e4d6:	ff 90       	pop	r15
   1e4d8:	ef 90       	pop	r14
   1e4da:	df 90       	pop	r13
   1e4dc:	cf 90       	pop	r12
   1e4de:	bf 90       	pop	r11
   1e4e0:	af 90       	pop	r10
   1e4e2:	9f 90       	pop	r9
   1e4e4:	08 95       	ret

0001e4e6 <uart_write_string>:
	};
	return found;
}

void uart_write_string(char*string)
{
   1e4e6:	1f 93       	push	r17
   1e4e8:	cf 93       	push	r28
   1e4ea:	df 93       	push	r29
   1e4ec:	ec 01       	movw	r28, r24
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			uart_fifo_tx.bytes_free --;
			uart_fifo_tx.bytes_used ++;
			if(uart_fifo_tx.bytes_free == 0)
				uart_fifo_tx.full=TRUE;
   1e4ee:	11 e0       	ldi	r17, 0x01	; 1
   1e4f0:	52 c0       	rjmp	.+164    	; 0x1e596 <uart_write_string+0xb0>

void uart_write_string(char*string)
{
	while(*string)
	{
		while(uart_fifo_tx.full);
   1e4f2:	80 91 db 03 	lds	r24, 0x03DB
   1e4f6:	88 23       	and	r24, r24
   1e4f8:	e1 f7       	brne	.-8      	; 0x1e4f2 <uart_write_string+0xc>
		
		*((char*)uart_fifo_tx.head_ptr) = *string;
   1e4fa:	e0 91 dc 03 	lds	r30, 0x03DC
   1e4fe:	f0 91 dd 03 	lds	r31, 0x03DD
   1e502:	90 83       	st	Z, r25
		uart_fifo_tx.head_ptr++;
   1e504:	80 91 dc 03 	lds	r24, 0x03DC
   1e508:	90 91 dd 03 	lds	r25, 0x03DD
   1e50c:	01 96       	adiw	r24, 0x01	; 1
   1e50e:	90 93 dd 03 	sts	0x03DD, r25
   1e512:	80 93 dc 03 	sts	0x03DC, r24
		
		if(uart_fifo_tx.head_ptr == uart_fifo_tx.end)
   1e516:	20 91 dc 03 	lds	r18, 0x03DC
   1e51a:	30 91 dd 03 	lds	r19, 0x03DD
   1e51e:	80 91 e2 03 	lds	r24, 0x03E2
   1e522:	90 91 e3 03 	lds	r25, 0x03E3
   1e526:	28 17       	cp	r18, r24
   1e528:	39 07       	cpc	r19, r25
   1e52a:	41 f4       	brne	.+16     	; 0x1e53c <uart_write_string+0x56>
			uart_fifo_tx.head_ptr = uart_fifo_tx.start;
   1e52c:	80 91 e0 03 	lds	r24, 0x03E0
   1e530:	90 91 e1 03 	lds	r25, 0x03E1
   1e534:	90 93 dd 03 	sts	0x03DD, r25
   1e538:	80 93 dc 03 	sts	0x03DC, r24
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1e53c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e53e:	f8 94       	cli
		{
			uart_fifo_tx.bytes_free --;
   1e540:	80 91 d6 03 	lds	r24, 0x03D6
   1e544:	90 91 d7 03 	lds	r25, 0x03D7
   1e548:	01 97       	sbiw	r24, 0x01	; 1
   1e54a:	90 93 d7 03 	sts	0x03D7, r25
   1e54e:	80 93 d6 03 	sts	0x03D6, r24
			uart_fifo_tx.bytes_used ++;
   1e552:	80 91 d8 03 	lds	r24, 0x03D8
   1e556:	90 91 d9 03 	lds	r25, 0x03D9
   1e55a:	01 96       	adiw	r24, 0x01	; 1
   1e55c:	90 93 d9 03 	sts	0x03D9, r25
   1e560:	80 93 d8 03 	sts	0x03D8, r24
			if(uart_fifo_tx.bytes_free == 0)
   1e564:	80 91 d6 03 	lds	r24, 0x03D6
   1e568:	90 91 d7 03 	lds	r25, 0x03D7
   1e56c:	89 2b       	or	r24, r25
   1e56e:	11 f4       	brne	.+4      	; 0x1e574 <uart_write_string+0x8e>
				uart_fifo_tx.full=TRUE;
   1e570:	10 93 db 03 	sts	0x03DB, r17
			if(uart_fifo_tx.bytes_used != 0)
   1e574:	80 91 d8 03 	lds	r24, 0x03D8
   1e578:	90 91 d9 03 	lds	r25, 0x03D9
   1e57c:	89 2b       	or	r24, r25
   1e57e:	11 f0       	breq	.+4      	; 0x1e584 <uart_write_string+0x9e>
				uart_fifo_tx.empty=FALSE;
   1e580:	10 92 da 03 	sts	0x03DA, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1e584:	2f bf       	out	0x3f, r18	; 63
		}
		if(uart_fifo_tx.post_fptr)
   1e586:	e0 91 e4 03 	lds	r30, 0x03E4
   1e58a:	f0 91 e5 03 	lds	r31, 0x03E5
   1e58e:	30 97       	sbiw	r30, 0x00	; 0
   1e590:	09 f0       	breq	.+2      	; 0x1e594 <uart_write_string+0xae>
				uart_fifo_tx.post_fptr();
   1e592:	09 95       	icall
		string++;
   1e594:	21 96       	adiw	r28, 0x01	; 1
	return found;
}

void uart_write_string(char*string)
{
	while(*string)
   1e596:	98 81       	ld	r25, Y
   1e598:	99 23       	and	r25, r25
   1e59a:	09 f0       	breq	.+2      	; 0x1e59e <uart_write_string+0xb8>
   1e59c:	aa cf       	rjmp	.-172    	; 0x1e4f2 <uart_write_string+0xc>
		}
		if(uart_fifo_tx.post_fptr)
				uart_fifo_tx.post_fptr();
		string++;
	};
}
   1e59e:	df 91       	pop	r29
   1e5a0:	cf 91       	pop	r28
   1e5a2:	1f 91       	pop	r17
   1e5a4:	08 95       	ret

0001e5a6 <uart_rx_char>:

void uart_rx_char(char data)
{
	*((char*)uart_fifo_rx.head_ptr) = data;
   1e5a6:	e0 91 cc 02 	lds	r30, 0x02CC
   1e5aa:	f0 91 cd 02 	lds	r31, 0x02CD
   1e5ae:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e5b0:	80 91 cc 02 	lds	r24, 0x02CC
   1e5b4:	90 91 cd 02 	lds	r25, 0x02CD
   1e5b8:	01 96       	adiw	r24, 0x01	; 1
   1e5ba:	90 93 cd 02 	sts	0x02CD, r25
   1e5be:	80 93 cc 02 	sts	0x02CC, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e5c2:	20 91 cc 02 	lds	r18, 0x02CC
   1e5c6:	30 91 cd 02 	lds	r19, 0x02CD
   1e5ca:	80 91 d2 02 	lds	r24, 0x02D2
   1e5ce:	90 91 d3 02 	lds	r25, 0x02D3
   1e5d2:	28 17       	cp	r18, r24
   1e5d4:	39 07       	cpc	r19, r25
   1e5d6:	41 f4       	brne	.+16     	; 0x1e5e8 <uart_rx_char+0x42>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e5d8:	80 91 d0 02 	lds	r24, 0x02D0
   1e5dc:	90 91 d1 02 	lds	r25, 0x02D1
   1e5e0:	90 93 cd 02 	sts	0x02CD, r25
   1e5e4:	80 93 cc 02 	sts	0x02CC, r24
		uart_fifo_rx.bytes_used ++;
   1e5e8:	80 91 c8 02 	lds	r24, 0x02C8
   1e5ec:	90 91 c9 02 	lds	r25, 0x02C9
   1e5f0:	01 96       	adiw	r24, 0x01	; 1
   1e5f2:	90 93 c9 02 	sts	0x02C9, r25
   1e5f6:	80 93 c8 02 	sts	0x02C8, r24
		uart_fifo_rx.empty=FALSE;
   1e5fa:	10 92 ca 02 	sts	0x02CA, r1

}
   1e5fe:	08 95       	ret

0001e600 <uart0_isrtx_enable>:

void uart0_isrtx_enable(void)
{
	UCSR0B |= _BV(UDRIE0);	// tx interrupt
   1e600:	55 9a       	sbi	0x0a, 5	; 10
}
   1e602:	08 95       	ret

0001e604 <uart1_isrtx_enable>:

void uart1_isrtx_enable(void)
{
	UCSR1B |= _BV(UDRIE1);	// tx interrupt
   1e604:	ea e9       	ldi	r30, 0x9A	; 154
   1e606:	f0 e0       	ldi	r31, 0x00	; 0
   1e608:	80 81       	ld	r24, Z
   1e60a:	80 62       	ori	r24, 0x20	; 32
   1e60c:	80 83       	st	Z, r24
}
   1e60e:	08 95       	ret

0001e610 <__vector_18>:

ISR(USART0_RX_vect)
{
   1e610:	1f 92       	push	r1
   1e612:	0f 92       	push	r0
   1e614:	0f b6       	in	r0, 0x3f	; 63
   1e616:	0f 92       	push	r0
   1e618:	0b b6       	in	r0, 0x3b	; 59
   1e61a:	0f 92       	push	r0
   1e61c:	11 24       	eor	r1, r1
   1e61e:	2f 93       	push	r18
   1e620:	3f 93       	push	r19
   1e622:	4f 93       	push	r20
   1e624:	5f 93       	push	r21
   1e626:	6f 93       	push	r22
   1e628:	7f 93       	push	r23
   1e62a:	8f 93       	push	r24
   1e62c:	9f 93       	push	r25
   1e62e:	af 93       	push	r26
   1e630:	bf 93       	push	r27
   1e632:	ef 93       	push	r30
   1e634:	ff 93       	push	r31
	uart_rx_char(UDR0);
   1e636:	8c b1       	in	r24, 0x0c	; 12
   1e638:	0e 94 d3 f2 	call	0x1e5a6	; 0x1e5a6 <uart_rx_char>
}
   1e63c:	ff 91       	pop	r31
   1e63e:	ef 91       	pop	r30
   1e640:	bf 91       	pop	r27
   1e642:	af 91       	pop	r26
   1e644:	9f 91       	pop	r25
   1e646:	8f 91       	pop	r24
   1e648:	7f 91       	pop	r23
   1e64a:	6f 91       	pop	r22
   1e64c:	5f 91       	pop	r21
   1e64e:	4f 91       	pop	r20
   1e650:	3f 91       	pop	r19
   1e652:	2f 91       	pop	r18
   1e654:	0f 90       	pop	r0
   1e656:	0b be       	out	0x3b, r0	; 59
   1e658:	0f 90       	pop	r0
   1e65a:	0f be       	out	0x3f, r0	; 63
   1e65c:	0f 90       	pop	r0
   1e65e:	1f 90       	pop	r1
   1e660:	18 95       	reti

0001e662 <__vector_30>:

ISR(USART1_RX_vect)
{
   1e662:	1f 92       	push	r1
   1e664:	0f 92       	push	r0
   1e666:	0f b6       	in	r0, 0x3f	; 63
   1e668:	0f 92       	push	r0
   1e66a:	0b b6       	in	r0, 0x3b	; 59
   1e66c:	0f 92       	push	r0
   1e66e:	11 24       	eor	r1, r1
   1e670:	2f 93       	push	r18
   1e672:	3f 93       	push	r19
   1e674:	4f 93       	push	r20
   1e676:	5f 93       	push	r21
   1e678:	6f 93       	push	r22
   1e67a:	7f 93       	push	r23
   1e67c:	8f 93       	push	r24
   1e67e:	9f 93       	push	r25
   1e680:	af 93       	push	r26
   1e682:	bf 93       	push	r27
   1e684:	ef 93       	push	r30
   1e686:	ff 93       	push	r31
	uart_rx_char(UDR1);
   1e688:	80 91 9c 00 	lds	r24, 0x009C
   1e68c:	0e 94 d3 f2 	call	0x1e5a6	; 0x1e5a6 <uart_rx_char>
}
   1e690:	ff 91       	pop	r31
   1e692:	ef 91       	pop	r30
   1e694:	bf 91       	pop	r27
   1e696:	af 91       	pop	r26
   1e698:	9f 91       	pop	r25
   1e69a:	8f 91       	pop	r24
   1e69c:	7f 91       	pop	r23
   1e69e:	6f 91       	pop	r22
   1e6a0:	5f 91       	pop	r21
   1e6a2:	4f 91       	pop	r20
   1e6a4:	3f 91       	pop	r19
   1e6a6:	2f 91       	pop	r18
   1e6a8:	0f 90       	pop	r0
   1e6aa:	0b be       	out	0x3b, r0	; 59
   1e6ac:	0f 90       	pop	r0
   1e6ae:	0f be       	out	0x3f, r0	; 63
   1e6b0:	0f 90       	pop	r0
   1e6b2:	1f 90       	pop	r1
   1e6b4:	18 95       	reti

0001e6b6 <__vector_31>:
	else
		UDR0=fifo_read_char(&uart_fifo_tx);
}

ISR(USART1_UDRE_vect)
{
   1e6b6:	1f 92       	push	r1
   1e6b8:	0f 92       	push	r0
   1e6ba:	0f b6       	in	r0, 0x3f	; 63
   1e6bc:	0f 92       	push	r0
   1e6be:	0b b6       	in	r0, 0x3b	; 59
   1e6c0:	0f 92       	push	r0
   1e6c2:	11 24       	eor	r1, r1
   1e6c4:	2f 93       	push	r18
   1e6c6:	3f 93       	push	r19
   1e6c8:	4f 93       	push	r20
   1e6ca:	5f 93       	push	r21
   1e6cc:	6f 93       	push	r22
   1e6ce:	7f 93       	push	r23
   1e6d0:	8f 93       	push	r24
   1e6d2:	9f 93       	push	r25
   1e6d4:	af 93       	push	r26
   1e6d6:	bf 93       	push	r27
   1e6d8:	ef 93       	push	r30
   1e6da:	ff 93       	push	r31
	if(uart_fifo_tx.empty)
   1e6dc:	80 91 da 03 	lds	r24, 0x03DA
   1e6e0:	88 23       	and	r24, r24
   1e6e2:	31 f0       	breq	.+12     	; 0x1e6f0 <__vector_31+0x3a>
		UCSR1B &= ~_BV(UDRIE1);			// disable tx interrupt
   1e6e4:	80 91 9a 00 	lds	r24, 0x009A
   1e6e8:	8f 7d       	andi	r24, 0xDF	; 223
   1e6ea:	80 93 9a 00 	sts	0x009A, r24
   1e6ee:	06 c0       	rjmp	.+12     	; 0x1e6fc <__vector_31+0x46>
	else
		UDR1=fifo_read_char(&uart_fifo_tx);
   1e6f0:	86 ed       	ldi	r24, 0xD6	; 214
   1e6f2:	93 e0       	ldi	r25, 0x03	; 3
   1e6f4:	0e 94 d6 f5 	call	0x1ebac	; 0x1ebac <fifo_read_char>
   1e6f8:	80 93 9c 00 	sts	0x009C, r24
}
   1e6fc:	ff 91       	pop	r31
   1e6fe:	ef 91       	pop	r30
   1e700:	bf 91       	pop	r27
   1e702:	af 91       	pop	r26
   1e704:	9f 91       	pop	r25
   1e706:	8f 91       	pop	r24
   1e708:	7f 91       	pop	r23
   1e70a:	6f 91       	pop	r22
   1e70c:	5f 91       	pop	r21
   1e70e:	4f 91       	pop	r20
   1e710:	3f 91       	pop	r19
   1e712:	2f 91       	pop	r18
   1e714:	0f 90       	pop	r0
   1e716:	0b be       	out	0x3b, r0	; 59
   1e718:	0f 90       	pop	r0
   1e71a:	0f be       	out	0x3f, r0	; 63
   1e71c:	0f 90       	pop	r0
   1e71e:	1f 90       	pop	r1
   1e720:	18 95       	reti

0001e722 <__vector_19>:
{
	uart_rx_char(UDR1);
}

ISR(USART0_UDRE_vect)
{
   1e722:	1f 92       	push	r1
   1e724:	0f 92       	push	r0
   1e726:	0f b6       	in	r0, 0x3f	; 63
   1e728:	0f 92       	push	r0
   1e72a:	0b b6       	in	r0, 0x3b	; 59
   1e72c:	0f 92       	push	r0
   1e72e:	11 24       	eor	r1, r1
   1e730:	2f 93       	push	r18
   1e732:	3f 93       	push	r19
   1e734:	4f 93       	push	r20
   1e736:	5f 93       	push	r21
   1e738:	6f 93       	push	r22
   1e73a:	7f 93       	push	r23
   1e73c:	8f 93       	push	r24
   1e73e:	9f 93       	push	r25
   1e740:	af 93       	push	r26
   1e742:	bf 93       	push	r27
   1e744:	ef 93       	push	r30
   1e746:	ff 93       	push	r31
	if(uart_fifo_tx.empty)
   1e748:	80 91 da 03 	lds	r24, 0x03DA
   1e74c:	88 23       	and	r24, r24
   1e74e:	11 f0       	breq	.+4      	; 0x1e754 <__vector_19+0x32>
		UCSR0B &= ~_BV(UDRIE0);			// disable tx interrupt
   1e750:	55 98       	cbi	0x0a, 5	; 10
   1e752:	05 c0       	rjmp	.+10     	; 0x1e75e <__vector_19+0x3c>
	else
		UDR0=fifo_read_char(&uart_fifo_tx);
   1e754:	86 ed       	ldi	r24, 0xD6	; 214
   1e756:	93 e0       	ldi	r25, 0x03	; 3
   1e758:	0e 94 d6 f5 	call	0x1ebac	; 0x1ebac <fifo_read_char>
   1e75c:	8c b9       	out	0x0c, r24	; 12
}
   1e75e:	ff 91       	pop	r31
   1e760:	ef 91       	pop	r30
   1e762:	bf 91       	pop	r27
   1e764:	af 91       	pop	r26
   1e766:	9f 91       	pop	r25
   1e768:	8f 91       	pop	r24
   1e76a:	7f 91       	pop	r23
   1e76c:	6f 91       	pop	r22
   1e76e:	5f 91       	pop	r21
   1e770:	4f 91       	pop	r20
   1e772:	3f 91       	pop	r19
   1e774:	2f 91       	pop	r18
   1e776:	0f 90       	pop	r0
   1e778:	0b be       	out	0x3b, r0	; 59
   1e77a:	0f 90       	pop	r0
   1e77c:	0f be       	out	0x3f, r0	; 63
   1e77e:	0f 90       	pop	r0
   1e780:	1f 90       	pop	r1
   1e782:	18 95       	reti

0001e784 <uart_init>:

	struct fifo_control uart_fifo_tx;
	struct fifo_control uart_fifo_rx;

char uart_init(void)
{
   1e784:	cf 93       	push	r28
   1e786:	df 93       	push	r29
	int tempint;
	char found=FALSE;

	// Setup Uart0
	DDRE &=~_BV(PE0);		// UTX0 input
   1e788:	10 98       	cbi	0x02, 0	; 2
	UCSR0B |= _BV(RXEN0);	// enable rx
   1e78a:	54 9a       	sbi	0x0a, 4	; 10
	UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
   1e78c:	57 9a       	sbi	0x0a, 7	; 10
	UCSR0B &= ~_BV(UDRIE0);	// disable tx interrupt (for now)	
   1e78e:	55 98       	cbi	0x0a, 5	; 10

	// Setup Uart1
	DDRD &=~_BV(PD2);		// URX1 input
   1e790:	8a 98       	cbi	0x11, 2	; 17
	UCSR1B |= _BV(RXEN1);	// enable rx
   1e792:	80 91 9a 00 	lds	r24, 0x009A
   1e796:	80 61       	ori	r24, 0x10	; 16
   1e798:	80 93 9a 00 	sts	0x009A, r24
	UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
   1e79c:	80 91 9a 00 	lds	r24, 0x009A
   1e7a0:	80 68       	ori	r24, 0x80	; 128
   1e7a2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1B &= ~_BV(UDRIE1);	// disable tx interrupt (for now)	
   1e7a6:	80 91 9a 00 	lds	r24, 0x009A
   1e7aa:	8f 7d       	andi	r24, 0xDF	; 223
   1e7ac:	80 93 9a 00 	sts	0x009A, r24

	#define BAUD_TOL	5
	#define BAUD		UART0BAUD
	#include <util/setbaud.h>
	UBRR0H = (char)(UBRR_VALUE>>8);
   1e7b0:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (char)(UBRR_VALUE);
   1e7b4:	97 e6       	ldi	r25, 0x67	; 103
   1e7b6:	99 b9       	out	0x09, r25	; 9
	#if USE_2X
		UCSR0A |= _BV(U2X0);
	#else
		UCSR0A &= _BV(U2X0);
   1e7b8:	8b b1       	in	r24, 0x0b	; 11
   1e7ba:	82 70       	andi	r24, 0x02	; 2
   1e7bc:	8b b9       	out	0x0b, r24	; 11
	#endif
	
	#undef	BAUD
	#define	BAUD		UART1BAUD
	#include <util/setbaud.h>
	UBRR1H = (char)(UBRR_VALUE>>8);
   1e7be:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = (char)(UBRR_VALUE);
   1e7c2:	90 93 99 00 	sts	0x0099, r25
	#if USE_2X
		UCSR1A |= _BV(U2X1);
	#else
		UCSR1A &= _BV(U2X1);
   1e7c6:	80 91 9b 00 	lds	r24, 0x009B
   1e7ca:	82 70       	andi	r24, 0x02	; 2
   1e7cc:	80 93 9b 00 	sts	0x009B, r24
   1e7d0:	88 ec       	ldi	r24, 0xC8	; 200
   1e7d2:	90 e0       	ldi	r25, 0x00	; 0
   1e7d4:	40 e0       	ldi	r20, 0x00	; 0
   1e7d6:	c0 ea       	ldi	r28, 0xA0	; 160
   1e7d8:	df e0       	ldi	r29, 0x0F	; 15
   1e7da:	59 c0       	rjmp	.+178    	; 0x1e88e <uart_init+0x10a>
	#endif
	
	tempint=BOOTWINDOW;
	while(tempint--)
	{
		if(UCSR0A & _BV(RXC0))
   1e7dc:	5f 9b       	sbis	0x0b, 7	; 11
   1e7de:	27 c0       	rjmp	.+78     	; 0x1e82e <uart_init+0xaa>
		{
			if(UDR0==' ')
   1e7e0:	8c b1       	in	r24, 0x0c	; 12
   1e7e2:	80 32       	cpi	r24, 0x20	; 32
   1e7e4:	21 f5       	brne	.+72     	; 0x1e82e <uart_init+0xaa>
			{
				UCSR1B &=~_BV(RXEN1);	// disable rx
   1e7e6:	80 91 9a 00 	lds	r24, 0x009A
   1e7ea:	8f 7e       	andi	r24, 0xEF	; 239
   1e7ec:	80 93 9a 00 	sts	0x009A, r24
				UCSR1B &=~_BV(RXCIE1);	// disable rx interrupt (writes to fifo)
   1e7f0:	80 91 9a 00 	lds	r24, 0x009A
   1e7f4:	8f 77       	andi	r24, 0x7F	; 127
   1e7f6:	80 93 9a 00 	sts	0x009A, r24
				fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart0_isrtx_enable, uart_fifo_data_tx);
   1e7fa:	86 ed       	ldi	r24, 0xD6	; 214
   1e7fc:	93 e0       	ldi	r25, 0x03	; 3
   1e7fe:	60 e2       	ldi	r22, 0x20	; 32
   1e800:	70 e0       	ldi	r23, 0x00	; 0
   1e802:	40 e0       	ldi	r20, 0x00	; 0
   1e804:	53 ef       	ldi	r21, 0xF3	; 243
   1e806:	26 ee       	ldi	r18, 0xE6	; 230
   1e808:	33 e0       	ldi	r19, 0x03	; 3
   1e80a:	0e 94 3d f6 	call	0x1ec7a	; 0x1ec7a <fifo_init>
				fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1e80e:	86 ec       	ldi	r24, 0xC6	; 198
   1e810:	92 e0       	ldi	r25, 0x02	; 2
   1e812:	60 e0       	ldi	r22, 0x00	; 0
   1e814:	71 e0       	ldi	r23, 0x01	; 1
   1e816:	40 e0       	ldi	r20, 0x00	; 0
   1e818:	50 e0       	ldi	r21, 0x00	; 0
   1e81a:	26 ed       	ldi	r18, 0xD6	; 214
   1e81c:	32 e0       	ldi	r19, 0x02	; 2
   1e81e:	0e 94 3d f6 	call	0x1ec7a	; 0x1ec7a <fifo_init>
				DDRE |=_BV(PE1);		// UTX0 output
   1e822:	11 9a       	sbi	0x02, 1	; 2
				UCSR0B |= _BV(TXEN0);	// enable tx
   1e824:	53 9a       	sbi	0x0a, 3	; 10
				UCSR0B |= _BV(UDRIE0);	// enable tx interrupt
   1e826:	55 9a       	sbi	0x0a, 5	; 10
   1e828:	20 e0       	ldi	r18, 0x00	; 0
   1e82a:	30 e0       	ldi	r19, 0x00	; 0
   1e82c:	41 e0       	ldi	r20, 0x01	; 1
				tempint=0;
				found=TRUE;
			};
		};
		
		if(UCSR1A & _BV(RXC1))
   1e82e:	80 91 9b 00 	lds	r24, 0x009B
   1e832:	87 ff       	sbrs	r24, 7
   1e834:	28 c0       	rjmp	.+80     	; 0x1e886 <uart_init+0x102>
		{
			if(UDR1==' ')
   1e836:	80 91 9c 00 	lds	r24, 0x009C
   1e83a:	80 32       	cpi	r24, 0x20	; 32
   1e83c:	21 f5       	brne	.+72     	; 0x1e886 <uart_init+0x102>
			{
				UCSR0B &=~_BV(RXEN0);	// disable rx
   1e83e:	54 98       	cbi	0x0a, 4	; 10
				UCSR0B &=~_BV(RXCIE0);	// disable rx interrupt (writes to fifo)
   1e840:	57 98       	cbi	0x0a, 7	; 10
				fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart1_isrtx_enable, uart_fifo_data_tx);
   1e842:	86 ed       	ldi	r24, 0xD6	; 214
   1e844:	93 e0       	ldi	r25, 0x03	; 3
   1e846:	60 e2       	ldi	r22, 0x20	; 32
   1e848:	70 e0       	ldi	r23, 0x00	; 0
   1e84a:	42 e0       	ldi	r20, 0x02	; 2
   1e84c:	53 ef       	ldi	r21, 0xF3	; 243
   1e84e:	26 ee       	ldi	r18, 0xE6	; 230
   1e850:	33 e0       	ldi	r19, 0x03	; 3
   1e852:	0e 94 3d f6 	call	0x1ec7a	; 0x1ec7a <fifo_init>
				fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1e856:	86 ec       	ldi	r24, 0xC6	; 198
   1e858:	92 e0       	ldi	r25, 0x02	; 2
   1e85a:	60 e0       	ldi	r22, 0x00	; 0
   1e85c:	71 e0       	ldi	r23, 0x01	; 1
   1e85e:	40 e0       	ldi	r20, 0x00	; 0
   1e860:	50 e0       	ldi	r21, 0x00	; 0
   1e862:	26 ed       	ldi	r18, 0xD6	; 214
   1e864:	32 e0       	ldi	r19, 0x02	; 2
   1e866:	0e 94 3d f6 	call	0x1ec7a	; 0x1ec7a <fifo_init>
				DDRD |=_BV(PD3);		// UTX1 output
   1e86a:	8b 9a       	sbi	0x11, 3	; 17
				UCSR1B |= _BV(TXEN1);	// enable tx
   1e86c:	80 91 9a 00 	lds	r24, 0x009A
   1e870:	88 60       	ori	r24, 0x08	; 8
   1e872:	80 93 9a 00 	sts	0x009A, r24
//				UDR1='1';
				UCSR1B |= _BV(UDRIE1);	// enable tx interrupt
   1e876:	80 91 9a 00 	lds	r24, 0x009A
   1e87a:	80 62       	ori	r24, 0x20	; 32
   1e87c:	80 93 9a 00 	sts	0x009A, r24
   1e880:	20 e0       	ldi	r18, 0x00	; 0
   1e882:	30 e0       	ldi	r19, 0x00	; 0
   1e884:	41 e0       	ldi	r20, 0x01	; 1
   1e886:	ce 01       	movw	r24, r28
   1e888:	01 97       	sbiw	r24, 0x01	; 1
   1e88a:	f1 f7       	brne	.-4      	; 0x1e888 <uart_init+0x104>
   1e88c:	c9 01       	movw	r24, r18
	#else
		UCSR1A &= _BV(U2X1);
	#endif
	
	tempint=BOOTWINDOW;
	while(tempint--)
   1e88e:	9c 01       	movw	r18, r24
   1e890:	21 50       	subi	r18, 0x01	; 1
   1e892:	30 40       	sbci	r19, 0x00	; 0
   1e894:	89 2b       	or	r24, r25
   1e896:	09 f0       	breq	.+2      	; 0x1e89a <uart_init+0x116>
   1e898:	a1 cf       	rjmp	.-190    	; 0x1e7dc <uart_init+0x58>
			};
		};
		_delay_ms(1);
	};

	if(!found)
   1e89a:	44 23       	and	r20, r20
   1e89c:	79 f4       	brne	.+30     	; 0x1e8bc <uart_init+0x138>
	{
		DDRD=0;
   1e89e:	11 ba       	out	0x11, r1	; 17
		UCSR0B=0;
   1e8a0:	1a b8       	out	0x0a, r1	; 10
		UCSR1B=0;
   1e8a2:	10 92 9a 00 	sts	0x009A, r1

		UBRR0H = 0;
   1e8a6:	10 92 90 00 	sts	0x0090, r1
		UBRR0L = 0;
   1e8aa:	19 b8       	out	0x09, r1	; 9
		UBRR1H = 0;
   1e8ac:	10 92 98 00 	sts	0x0098, r1
		UBRR1L = 0;
   1e8b0:	10 92 99 00 	sts	0x0099, r1

		UCSR0A =0x20;
   1e8b4:	80 e2       	ldi	r24, 0x20	; 32
   1e8b6:	8b b9       	out	0x0b, r24	; 11
		UCSR1A =0x20;	
   1e8b8:	80 93 9b 00 	sts	0x009B, r24
	};
	return found;
}
   1e8bc:	84 2f       	mov	r24, r20
   1e8be:	df 91       	pop	r29
   1e8c0:	cf 91       	pop	r28
   1e8c2:	08 95       	ret

0001e8c4 <hex2ascii>:

// call to print memory to a text buffer as hex data
// option=0, ############
// option=1, ##:##:##:##:##:## (used for MAC)
char* hex2ascii(char* textbuf, void* startadd, unsigned char length, unsigned char option)
{
   1e8c4:	0f 93       	push	r16
   1e8c6:	1f 93       	push	r17
   1e8c8:	cf 93       	push	r28
   1e8ca:	df 93       	push	r29
   1e8cc:	18 2f       	mov	r17, r24
   1e8ce:	09 2f       	mov	r16, r25
   1e8d0:	eb 01       	movw	r28, r22
   1e8d2:	62 2f       	mov	r22, r18
	void* endadd = (unsigned char*)startadd+length;
   1e8d4:	ce 01       	movw	r24, r28
   1e8d6:	84 0f       	add	r24, r20
   1e8d8:	91 1d       	adc	r25, r1
   1e8da:	ac 01       	movw	r20, r24
   1e8dc:	21 2f       	mov	r18, r17
   1e8de:	30 2f       	mov	r19, r16
   1e8e0:	c9 01       	movw	r24, r18
   1e8e2:	fc 01       	movw	r30, r24
			textbuf[0]+=7;
		if(textbuf[1]>0x39)
			textbuf[1]+=7;
		textbuf+=2;
		if(option==1 && startadd != endadd)
			*textbuf++=':';
   1e8e4:	2a e3       	ldi	r18, 0x3A	; 58
	char* retval = textbuf;

	unsigned char tempchar;
	do
	{
		tempchar=*(unsigned char*)startadd++;
   1e8e6:	89 91       	ld	r24, Y+
		textbuf[0]=0x30+(tempchar>>4);
   1e8e8:	98 2f       	mov	r25, r24
   1e8ea:	92 95       	swap	r25
   1e8ec:	9f 70       	andi	r25, 0x0F	; 15
   1e8ee:	90 5d       	subi	r25, 0xD0	; 208
   1e8f0:	df 01       	movw	r26, r30
   1e8f2:	9d 93       	st	X+, r25
		textbuf[1]=0x30+(tempchar&0x0F);
   1e8f4:	8f 70       	andi	r24, 0x0F	; 15
   1e8f6:	80 5d       	subi	r24, 0xD0	; 208
   1e8f8:	81 83       	std	Z+1, r24	; 0x01
		if(textbuf[0]>0x39)
   1e8fa:	9a 33       	cpi	r25, 0x3A	; 58
   1e8fc:	10 f0       	brcs	.+4      	; 0x1e902 <hex2ascii+0x3e>
			textbuf[0]+=7;
   1e8fe:	99 5f       	subi	r25, 0xF9	; 249
   1e900:	90 83       	st	Z, r25
		if(textbuf[1]>0x39)
   1e902:	8c 91       	ld	r24, X
   1e904:	8a 33       	cpi	r24, 0x3A	; 58
   1e906:	10 f0       	brcs	.+4      	; 0x1e90c <hex2ascii+0x48>
			textbuf[1]+=7;
   1e908:	89 5f       	subi	r24, 0xF9	; 249
   1e90a:	8c 93       	st	X, r24
		textbuf+=2;
   1e90c:	32 96       	adiw	r30, 0x02	; 2
		if(option==1 && startadd != endadd)
   1e90e:	61 30       	cpi	r22, 0x01	; 1
   1e910:	29 f4       	brne	.+10     	; 0x1e91c <hex2ascii+0x58>
   1e912:	c4 17       	cp	r28, r20
   1e914:	d5 07       	cpc	r29, r21
   1e916:	29 f0       	breq	.+10     	; 0x1e922 <hex2ascii+0x5e>
			*textbuf++=':';
   1e918:	21 93       	st	Z+, r18
   1e91a:	e5 cf       	rjmp	.-54     	; 0x1e8e6 <hex2ascii+0x22>
	}while(startadd != endadd);
   1e91c:	c4 17       	cp	r28, r20
   1e91e:	d5 07       	cpc	r29, r21
   1e920:	11 f7       	brne	.-60     	; 0x1e8e6 <hex2ascii+0x22>
	*textbuf++=0;
   1e922:	10 82       	st	Z, r1
	return retval;
}
   1e924:	81 2f       	mov	r24, r17
   1e926:	90 2f       	mov	r25, r16
   1e928:	df 91       	pop	r29
   1e92a:	cf 91       	pop	r28
   1e92c:	1f 91       	pop	r17
   1e92e:	0f 91       	pop	r16
   1e930:	08 95       	ret

0001e932 <read_bige_uint>:

unsigned int read_bige_uint(unsigned int bige)
{
   1e932:	df 93       	push	r29
   1e934:	cf 93       	push	r28
   1e936:	00 d0       	rcall	.+0      	; 0x1e938 <read_bige_uint+0x6>
   1e938:	cd b7       	in	r28, 0x3d	; 61
   1e93a:	de b7       	in	r29, 0x3e	; 62
   1e93c:	9a 83       	std	Y+2, r25	; 0x02
   1e93e:	89 83       	std	Y+1, r24	; 0x01
	unsigned int retval;
	retval = ((unsigned char*)&bige)[0];
	retval<<=8;
   1e940:	38 2f       	mov	r19, r24
   1e942:	20 e0       	ldi	r18, 0x00	; 0
   1e944:	8a 81       	ldd	r24, Y+2	; 0x02
   1e946:	28 0f       	add	r18, r24
   1e948:	31 1d       	adc	r19, r1
	retval+= ((unsigned char*)&bige)[1];
	return retval;
}
   1e94a:	c9 01       	movw	r24, r18
   1e94c:	0f 90       	pop	r0
   1e94e:	0f 90       	pop	r0
   1e950:	cf 91       	pop	r28
   1e952:	df 91       	pop	r29
   1e954:	08 95       	ret

0001e956 <ihex_init>:
	char *line_ptr;

//call to initialise ihex parser
void ihex_init()
{
	ext_seg_add=0;
   1e956:	10 92 be 01 	sts	0x01BE, r1
   1e95a:	10 92 bf 01 	sts	0x01BF, r1
   1e95e:	10 92 c0 01 	sts	0x01C0, r1
   1e962:	10 92 c1 01 	sts	0x01C1, r1
	ext_lin_add=0;
   1e966:	10 92 c2 01 	sts	0x01C2, r1
   1e96a:	10 92 c3 01 	sts	0x01C3, r1
   1e96e:	10 92 c4 01 	sts	0x01C4, r1
   1e972:	10 92 c5 01 	sts	0x01C5, r1
	line_ptr=hexline.ascii;
   1e976:	8a e1       	ldi	r24, 0x1A	; 26
   1e978:	94 e0       	ldi	r25, 0x04	; 4
   1e97a:	90 93 07 04 	sts	0x0407, r25
   1e97e:	80 93 06 04 	sts	0x0406, r24
	*line_ptr=0;
   1e982:	10 92 1a 04 	sts	0x041A, r1
	ihex_status=0;
   1e986:	10 92 08 04 	sts	0x0408, r1
}
   1e98a:	08 95       	ret

0001e98c <ascii2hex>:
	else
		ihex_status=IHEX_STATUS_ERROR;
}

char ascii2hex(char* ascii)
{
   1e98c:	fc 01       	movw	r30, r24
	char retval=0;
	if(ascii[0] > '9')
   1e98e:	80 81       	ld	r24, Z
   1e990:	8a 33       	cpi	r24, 0x3A	; 58
   1e992:	10 f0       	brcs	.+4      	; 0x1e998 <ascii2hex+0xc>
		retval += 0x0A + ascii[0] -'A';
   1e994:	87 53       	subi	r24, 0x37	; 55
   1e996:	01 c0       	rjmp	.+2      	; 0x1e99a <ascii2hex+0xe>
	else
		retval += 0x00 + ascii[0] -'0';
   1e998:	80 53       	subi	r24, 0x30	; 48
	retval<<=4;
   1e99a:	98 2f       	mov	r25, r24
   1e99c:	92 95       	swap	r25
   1e99e:	90 7f       	andi	r25, 0xF0	; 240
	if(ascii[1] > '9')
   1e9a0:	81 81       	ldd	r24, Z+1	; 0x01
   1e9a2:	8a 33       	cpi	r24, 0x3A	; 58
   1e9a4:	18 f0       	brcs	.+6      	; 0x1e9ac <ascii2hex+0x20>
		retval += 0x0A + ascii[1] -'A';
   1e9a6:	87 53       	subi	r24, 0x37	; 55
   1e9a8:	89 0f       	add	r24, r25
   1e9aa:	08 95       	ret
	else
		retval += 0x00 + ascii[1] -'0';
   1e9ac:	80 53       	subi	r24, 0x30	; 48
   1e9ae:	89 0f       	add	r24, r25
	return retval;
}
   1e9b0:	08 95       	ret

0001e9b2 <ihex_process_line>:
	};
}

//called from ihex_char when a hex line is complete
void ihex_process_line(void)
{
   1e9b2:	ef 92       	push	r14
   1e9b4:	ff 92       	push	r15
   1e9b6:	0f 93       	push	r16
   1e9b8:	1f 93       	push	r17
   1e9ba:	cf 93       	push	r28
   1e9bc:	df 93       	push	r29
	char byte_count, *target, *source, checksum;
	unsigned char index;

	//if valid size
	if(isxdigit(hexline.ascii[1]) && isxdigit(hexline.ascii[2]))
   1e9be:	80 91 1b 04 	lds	r24, 0x041B
   1e9c2:	90 e0       	ldi	r25, 0x00	; 0
   1e9c4:	0e 94 4c f6 	call	0x1ec98	; 0x1ec98 <isxdigit>
   1e9c8:	89 2b       	or	r24, r25
   1e9ca:	71 f0       	breq	.+28     	; 0x1e9e8 <ihex_process_line+0x36>
   1e9cc:	80 91 1c 04 	lds	r24, 0x041C
   1e9d0:	90 e0       	ldi	r25, 0x00	; 0
   1e9d2:	0e 94 4c f6 	call	0x1ec98	; 0x1ec98 <isxdigit>
   1e9d6:	89 2b       	or	r24, r25
   1e9d8:	39 f0       	breq	.+14     	; 0x1e9e8 <ihex_process_line+0x36>
		hexline.ihex.byte_count = ascii2hex(&hexline.ascii[1]);
   1e9da:	8b e1       	ldi	r24, 0x1B	; 27
   1e9dc:	94 e0       	ldi	r25, 0x04	; 4
   1e9de:	0e 94 c6 f4 	call	0x1e98c	; 0x1e98c <ascii2hex>
   1e9e2:	80 93 1a 04 	sts	0x041A, r24
   1e9e6:	02 c0       	rjmp	.+4      	; 0x1e9ec <ihex_process_line+0x3a>
	else
		hexline.ihex.byte_count=0;
   1e9e8:	10 92 1a 04 	sts	0x041A, r1

	//convert ascii to hex
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1e9ec:	e0 90 1a 04 	lds	r14, 0x041A
   1e9f0:	84 e0       	ldi	r24, 0x04	; 4
   1e9f2:	e8 0e       	add	r14, r24
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
   1e9f4:	eb e1       	ldi	r30, 0x1B	; 27
   1e9f6:	ee 15       	cp	r30, r14
   1e9f8:	08 f4       	brcc	.+2      	; 0x1e9fc <ihex_process_line+0x4a>
   1e9fa:	ee 24       	eor	r14, r14
   1e9fc:	0b e1       	ldi	r16, 0x1B	; 27
   1e9fe:	14 e0       	ldi	r17, 0x04	; 4
   1ea00:	e8 01       	movw	r28, r16
   1ea02:	22 96       	adiw	r28, 0x02	; 2
   1ea04:	08 c0       	rjmp	.+16     	; 0x1ea16 <ihex_process_line+0x64>
		byte_count=0;
	while(byte_count)
	{
		*target++=ascii2hex(source);
   1ea06:	ce 01       	movw	r24, r28
   1ea08:	0e 94 c6 f4 	call	0x1e98c	; 0x1e98c <ascii2hex>
   1ea0c:	f8 01       	movw	r30, r16
   1ea0e:	81 93       	st	Z+, r24
   1ea10:	8f 01       	movw	r16, r30
		source+=2;
   1ea12:	22 96       	adiw	r28, 0x02	; 2
		byte_count--;
   1ea14:	ea 94       	dec	r14
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
		byte_count=0;
	while(byte_count)
   1ea16:	ee 20       	and	r14, r14
   1ea18:	b1 f7       	brne	.-20     	; 0x1ea06 <ihex_process_line+0x54>
		source+=2;
		byte_count--;
	};

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1ea1a:	80 91 1a 04 	lds	r24, 0x041A
   1ea1e:	8c 5f       	subi	r24, 0xFC	; 252
   1ea20:	ea e1       	ldi	r30, 0x1A	; 26
   1ea22:	f4 e0       	ldi	r31, 0x04	; 4
   1ea24:	20 e0       	ldi	r18, 0x00	; 0
	checksum=0;
	index=0;
	while(byte_count--)
   1ea26:	90 e0       	ldi	r25, 0x00	; 0
   1ea28:	8e 0f       	add	r24, r30
   1ea2a:	9f 1f       	adc	r25, r31
   1ea2c:	02 c0       	rjmp	.+4      	; 0x1ea32 <ihex_process_line+0x80>
		checksum-=hexline.raw[index++];
   1ea2e:	23 1b       	sub	r18, r19
   1ea30:	31 96       	adiw	r30, 0x01	; 1
   1ea32:	30 81       	ld	r19, Z

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	checksum=0;
	index=0;
	while(byte_count--)
   1ea34:	e8 17       	cp	r30, r24
   1ea36:	f9 07       	cpc	r31, r25
   1ea38:	d1 f7       	brne	.-12     	; 0x1ea2e <ihex_process_line+0x7c>
		checksum-=hexline.raw[index++];
	
	if(checksum == hexline.raw[index])
   1ea3a:	23 17       	cp	r18, r19
   1ea3c:	09 f0       	breq	.+2      	; 0x1ea40 <ihex_process_line+0x8e>
   1ea3e:	7d c0       	rjmp	.+250    	; 0x1eb3a <ihex_process_line+0x188>
	{
		if(hexline.ihex.type == IHEX_TYPE_DATA)
   1ea40:	80 91 1d 04 	lds	r24, 0x041D
   1ea44:	88 23       	and	r24, r24
   1ea46:	c1 f5       	brne	.+112    	; 0x1eab8 <ihex_process_line+0x106>
		{
			//calculate actual address
			ihex_address=(unsigned long)read_bige_uint(hexline.ihex.address);
   1ea48:	80 91 1b 04 	lds	r24, 0x041B
   1ea4c:	90 91 1c 04 	lds	r25, 0x041C
   1ea50:	0e 94 99 f4 	call	0x1e932	; 0x1e932 <read_bige_uint>
			ihex_address+=ext_seg_add;
			ihex_address+=ext_lin_add;
   1ea54:	20 91 c2 01 	lds	r18, 0x01C2
   1ea58:	30 91 c3 01 	lds	r19, 0x01C3
   1ea5c:	40 91 c4 01 	lds	r20, 0x01C4
   1ea60:	50 91 c5 01 	lds	r21, 0x01C5
   1ea64:	e0 90 be 01 	lds	r14, 0x01BE
   1ea68:	f0 90 bf 01 	lds	r15, 0x01BF
   1ea6c:	00 91 c0 01 	lds	r16, 0x01C0
   1ea70:	10 91 c1 01 	lds	r17, 0x01C1
   1ea74:	2e 0d       	add	r18, r14
   1ea76:	3f 1d       	adc	r19, r15
   1ea78:	40 1f       	adc	r20, r16
   1ea7a:	51 1f       	adc	r21, r17
   1ea7c:	a0 e0       	ldi	r26, 0x00	; 0
   1ea7e:	b0 e0       	ldi	r27, 0x00	; 0
   1ea80:	28 0f       	add	r18, r24
   1ea82:	39 1f       	adc	r19, r25
   1ea84:	4a 1f       	adc	r20, r26
   1ea86:	5b 1f       	adc	r21, r27
   1ea88:	20 93 ba 01 	sts	0x01BA, r18
   1ea8c:	30 93 bb 01 	sts	0x01BB, r19
   1ea90:	40 93 bc 01 	sts	0x01BC, r20
   1ea94:	50 93 bd 01 	sts	0x01BD, r21
			
			//copy data to output
			memcpy(ihex_data, hexline.ihex.data, hexline.ihex.byte_count);
   1ea98:	29 e0       	ldi	r18, 0x09	; 9
   1ea9a:	34 e0       	ldi	r19, 0x04	; 4
   1ea9c:	40 91 1a 04 	lds	r20, 0x041A
   1eaa0:	ee e1       	ldi	r30, 0x1E	; 30
   1eaa2:	f4 e0       	ldi	r31, 0x04	; 4
   1eaa4:	c9 01       	movw	r24, r18
   1eaa6:	bf 01       	movw	r22, r30
   1eaa8:	50 e0       	ldi	r21, 0x00	; 0
   1eaaa:	0e 94 57 f6 	call	0x1ecae	; 0x1ecae <memcpy>
			//copy byte count to output
			ihex_byte_count=hexline.ihex.byte_count;
   1eaae:	80 91 1a 04 	lds	r24, 0x041A
   1eab2:	80 93 19 04 	sts	0x0419, r24
   1eab6:	44 c0       	rjmp	.+136    	; 0x1eb40 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_SEG_ADD)
   1eab8:	82 30       	cpi	r24, 0x02	; 2
   1eaba:	f9 f4       	brne	.+62     	; 0x1eafa <ihex_process_line+0x148>
		{
			ext_seg_add=hexline.ihex.data[0];
			ext_seg_add<<=8;
			ext_seg_add+=hexline.ihex.data[1];
			ext_seg_add<<=4;
   1eabc:	80 91 1e 04 	lds	r24, 0x041E
   1eac0:	90 e0       	ldi	r25, 0x00	; 0
   1eac2:	a0 e0       	ldi	r26, 0x00	; 0
   1eac4:	b0 e0       	ldi	r27, 0x00	; 0
   1eac6:	ba 2f       	mov	r27, r26
   1eac8:	a9 2f       	mov	r26, r25
   1eaca:	98 2f       	mov	r25, r24
   1eacc:	88 27       	eor	r24, r24
   1eace:	20 91 1f 04 	lds	r18, 0x041F
   1ead2:	82 0f       	add	r24, r18
   1ead4:	91 1d       	adc	r25, r1
   1ead6:	a1 1d       	adc	r26, r1
   1ead8:	b1 1d       	adc	r27, r1
   1eada:	44 e0       	ldi	r20, 0x04	; 4
   1eadc:	88 0f       	add	r24, r24
   1eade:	99 1f       	adc	r25, r25
   1eae0:	aa 1f       	adc	r26, r26
   1eae2:	bb 1f       	adc	r27, r27
   1eae4:	4a 95       	dec	r20
   1eae6:	d1 f7       	brne	.-12     	; 0x1eadc <ihex_process_line+0x12a>
   1eae8:	80 93 be 01 	sts	0x01BE, r24
   1eaec:	90 93 bf 01 	sts	0x01BF, r25
   1eaf0:	a0 93 c0 01 	sts	0x01C0, r26
   1eaf4:	b0 93 c1 01 	sts	0x01C1, r27
   1eaf8:	23 c0       	rjmp	.+70     	; 0x1eb40 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_LIN_ADD)
   1eafa:	84 30       	cpi	r24, 0x04	; 4
   1eafc:	d9 f4       	brne	.+54     	; 0x1eb34 <ihex_process_line+0x182>
		{
			ext_lin_add=hexline.ihex.data[0];
			ext_lin_add<<=8;
			ext_lin_add+=hexline.ihex.data[1];
			ext_lin_add<<=16;
   1eafe:	80 91 1e 04 	lds	r24, 0x041E
   1eb02:	90 e0       	ldi	r25, 0x00	; 0
   1eb04:	a0 e0       	ldi	r26, 0x00	; 0
   1eb06:	b0 e0       	ldi	r27, 0x00	; 0
   1eb08:	ba 2f       	mov	r27, r26
   1eb0a:	a9 2f       	mov	r26, r25
   1eb0c:	98 2f       	mov	r25, r24
   1eb0e:	88 27       	eor	r24, r24
   1eb10:	20 91 1f 04 	lds	r18, 0x041F
   1eb14:	82 0f       	add	r24, r18
   1eb16:	91 1d       	adc	r25, r1
   1eb18:	a1 1d       	adc	r26, r1
   1eb1a:	b1 1d       	adc	r27, r1
   1eb1c:	dc 01       	movw	r26, r24
   1eb1e:	99 27       	eor	r25, r25
   1eb20:	88 27       	eor	r24, r24
   1eb22:	80 93 c2 01 	sts	0x01C2, r24
   1eb26:	90 93 c3 01 	sts	0x01C3, r25
   1eb2a:	a0 93 c4 01 	sts	0x01C4, r26
   1eb2e:	b0 93 c5 01 	sts	0x01C5, r27
   1eb32:	06 c0       	rjmp	.+12     	; 0x1eb40 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EOF)
   1eb34:	81 30       	cpi	r24, 0x01	; 1
   1eb36:	21 f4       	brne	.+8      	; 0x1eb40 <ihex_process_line+0x18e>
   1eb38:	01 c0       	rjmp	.+2      	; 0x1eb3c <ihex_process_line+0x18a>
			ihex_status=IHEX_STATUS_EOF;
	}
	else
		ihex_status=IHEX_STATUS_ERROR;
   1eb3a:	82 e0       	ldi	r24, 0x02	; 2
   1eb3c:	80 93 08 04 	sts	0x0408, r24
}
   1eb40:	df 91       	pop	r29
   1eb42:	cf 91       	pop	r28
   1eb44:	1f 91       	pop	r17
   1eb46:	0f 91       	pop	r16
   1eb48:	ff 90       	pop	r15
   1eb4a:	ef 90       	pop	r14
   1eb4c:	08 95       	ret

0001eb4e <ihex_char>:
	ihex_status=0;
}

//characters are passed to this function
void ihex_char(char x)
{
   1eb4e:	98 2f       	mov	r25, r24
	//start of new line?
	if(x==':')
   1eb50:	8a 33       	cpi	r24, 0x3A	; 58
   1eb52:	59 f4       	brne	.+22     	; 0x1eb6a <ihex_char+0x1c>
	{
		line_ptr=hexline.ascii;
		*line_ptr=x;
   1eb54:	80 93 1a 04 	sts	0x041A, r24
		line_ptr++;
   1eb58:	8b e1       	ldi	r24, 0x1B	; 27
   1eb5a:	94 e0       	ldi	r25, 0x04	; 4
   1eb5c:	90 93 07 04 	sts	0x0407, r25
   1eb60:	80 93 06 04 	sts	0x0406, r24
		*line_ptr=0;
   1eb64:	10 92 1b 04 	sts	0x041B, r1
   1eb68:	08 95       	ret
	}
	//else if line in progress, append to line
	else if(hexline.ascii[0]==':')
   1eb6a:	80 91 1a 04 	lds	r24, 0x041A
   1eb6e:	8a 33       	cpi	r24, 0x3A	; 58
   1eb70:	e1 f4       	brne	.+56     	; 0x1ebaa <ihex_char+0x5c>
	{
		if(line_ptr != &hexline.ascii[MAXLEN-1])
   1eb72:	a0 91 06 04 	lds	r26, 0x0406
   1eb76:	b0 91 07 04 	lds	r27, 0x0407
   1eb7a:	84 e0       	ldi	r24, 0x04	; 4
   1eb7c:	a5 35       	cpi	r26, 0x55	; 85
   1eb7e:	b8 07       	cpc	r27, r24
   1eb80:	41 f0       	breq	.+16     	; 0x1eb92 <ihex_char+0x44>
		{
			*line_ptr++=x;
   1eb82:	fd 01       	movw	r30, r26
   1eb84:	91 93       	st	Z+, r25
   1eb86:	f0 93 07 04 	sts	0x0407, r31
   1eb8a:	e0 93 06 04 	sts	0x0406, r30
			*line_ptr=0;
   1eb8e:	11 96       	adiw	r26, 0x01	; 1
   1eb90:	1c 92       	st	X, r1
		};
		if(x=='\r')
   1eb92:	9d 30       	cpi	r25, 0x0D	; 13
   1eb94:	51 f4       	brne	.+20     	; 0x1ebaa <ihex_char+0x5c>
		{
			ihex_process_line();
   1eb96:	0e 94 d9 f4 	call	0x1e9b2	; 0x1e9b2 <ihex_process_line>
			line_ptr=hexline.ascii;
   1eb9a:	8a e1       	ldi	r24, 0x1A	; 26
   1eb9c:	94 e0       	ldi	r25, 0x04	; 4
   1eb9e:	90 93 07 04 	sts	0x0407, r25
   1eba2:	80 93 06 04 	sts	0x0406, r24
			*line_ptr=0;
   1eba6:	10 92 1a 04 	sts	0x041A, r1
   1ebaa:	08 95       	ret

0001ebac <fifo_read_char>:
#include <includes.h>

char fifo_read_char(struct fifo_control *obj)
{
   1ebac:	dc 01       	movw	r26, r24
	char retval=0;
	
	while((*obj).empty);
   1ebae:	14 96       	adiw	r26, 0x04	; 4
   1ebb0:	8c 91       	ld	r24, X
   1ebb2:	14 97       	sbiw	r26, 0x04	; 4
   1ebb4:	88 23       	and	r24, r24
   1ebb6:	d9 f7       	brne	.-10     	; 0x1ebae <fifo_read_char+0x2>

	retval=*((char*)(*obj).tail_ptr);
   1ebb8:	18 96       	adiw	r26, 0x08	; 8
   1ebba:	ed 91       	ld	r30, X+
   1ebbc:	fc 91       	ld	r31, X
   1ebbe:	19 97       	sbiw	r26, 0x09	; 9
   1ebc0:	e0 81       	ld	r30, Z
	(*obj).tail_ptr++;	
   1ebc2:	18 96       	adiw	r26, 0x08	; 8
   1ebc4:	8d 91       	ld	r24, X+
   1ebc6:	9c 91       	ld	r25, X
   1ebc8:	19 97       	sbiw	r26, 0x09	; 9
   1ebca:	01 96       	adiw	r24, 0x01	; 1
   1ebcc:	19 96       	adiw	r26, 0x09	; 9
   1ebce:	9c 93       	st	X, r25
   1ebd0:	8e 93       	st	-X, r24
   1ebd2:	18 97       	sbiw	r26, 0x08	; 8
	
	if((*obj).tail_ptr == (*obj).end)
   1ebd4:	18 96       	adiw	r26, 0x08	; 8
   1ebd6:	2d 91       	ld	r18, X+
   1ebd8:	3c 91       	ld	r19, X
   1ebda:	19 97       	sbiw	r26, 0x09	; 9
   1ebdc:	1c 96       	adiw	r26, 0x0c	; 12
   1ebde:	8d 91       	ld	r24, X+
   1ebe0:	9c 91       	ld	r25, X
   1ebe2:	1d 97       	sbiw	r26, 0x0d	; 13
   1ebe4:	28 17       	cp	r18, r24
   1ebe6:	39 07       	cpc	r19, r25
   1ebe8:	41 f4       	brne	.+16     	; 0x1ebfa <fifo_read_char+0x4e>
		(*obj).tail_ptr = (*obj).start;
   1ebea:	1a 96       	adiw	r26, 0x0a	; 10
   1ebec:	8d 91       	ld	r24, X+
   1ebee:	9c 91       	ld	r25, X
   1ebf0:	1b 97       	sbiw	r26, 0x0b	; 11
   1ebf2:	19 96       	adiw	r26, 0x09	; 9
   1ebf4:	9c 93       	st	X, r25
   1ebf6:	8e 93       	st	-X, r24
   1ebf8:	18 97       	sbiw	r26, 0x08	; 8
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1ebfa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1ebfc:	f8 94       	cli
	{
		(*obj).bytes_free ++;
   1ebfe:	8d 91       	ld	r24, X+
   1ec00:	9c 91       	ld	r25, X
   1ec02:	11 97       	sbiw	r26, 0x01	; 1
   1ec04:	01 96       	adiw	r24, 0x01	; 1
   1ec06:	11 96       	adiw	r26, 0x01	; 1
   1ec08:	9c 93       	st	X, r25
   1ec0a:	8e 93       	st	-X, r24
		(*obj).bytes_used --;
   1ec0c:	12 96       	adiw	r26, 0x02	; 2
   1ec0e:	8d 91       	ld	r24, X+
   1ec10:	9c 91       	ld	r25, X
   1ec12:	13 97       	sbiw	r26, 0x03	; 3
   1ec14:	01 97       	sbiw	r24, 0x01	; 1
   1ec16:	13 96       	adiw	r26, 0x03	; 3
   1ec18:	9c 93       	st	X, r25
   1ec1a:	8e 93       	st	-X, r24
   1ec1c:	12 97       	sbiw	r26, 0x02	; 2
		if((*obj).bytes_used == 0)
   1ec1e:	12 96       	adiw	r26, 0x02	; 2
   1ec20:	8d 91       	ld	r24, X+
   1ec22:	9c 91       	ld	r25, X
   1ec24:	13 97       	sbiw	r26, 0x03	; 3
   1ec26:	89 2b       	or	r24, r25
   1ec28:	21 f4       	brne	.+8      	; 0x1ec32 <fifo_read_char+0x86>
			(*obj).empty=TRUE;
   1ec2a:	81 e0       	ldi	r24, 0x01	; 1
   1ec2c:	14 96       	adiw	r26, 0x04	; 4
   1ec2e:	8c 93       	st	X, r24
   1ec30:	14 97       	sbiw	r26, 0x04	; 4
		if((*obj).bytes_free != 0)
   1ec32:	8d 91       	ld	r24, X+
   1ec34:	9c 91       	ld	r25, X
   1ec36:	11 97       	sbiw	r26, 0x01	; 1
   1ec38:	89 2b       	or	r24, r25
   1ec3a:	11 f0       	breq	.+4      	; 0x1ec40 <fifo_read_char+0x94>
			(*obj).full=FALSE;
   1ec3c:	15 96       	adiw	r26, 0x05	; 5
   1ec3e:	1c 92       	st	X, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1ec40:	2f bf       	out	0x3f, r18	; 63
	}

	return retval;
}
   1ec42:	8e 2f       	mov	r24, r30
   1ec44:	08 95       	ret

0001ec46 <fifo_flush>:
	fifo_flush(obj);
} 

//100506, made atomic so pointers cannot be corrupted by ISR's
void fifo_flush(struct fifo_control *obj)
{
   1ec46:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1ec48:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1ec4a:	f8 94       	cli
	{
		(*obj).tail_ptr = (*obj).start;
   1ec4c:	82 85       	ldd	r24, Z+10	; 0x0a
   1ec4e:	93 85       	ldd	r25, Z+11	; 0x0b
   1ec50:	91 87       	std	Z+9, r25	; 0x09
   1ec52:	80 87       	std	Z+8, r24	; 0x08
		(*obj).head_ptr = (*obj).start;
   1ec54:	82 85       	ldd	r24, Z+10	; 0x0a
   1ec56:	93 85       	ldd	r25, Z+11	; 0x0b
   1ec58:	97 83       	std	Z+7, r25	; 0x07
   1ec5a:	86 83       	std	Z+6, r24	; 0x06
		(*obj).bytes_free=(*obj).end-(*obj).start;
   1ec5c:	84 85       	ldd	r24, Z+12	; 0x0c
   1ec5e:	95 85       	ldd	r25, Z+13	; 0x0d
   1ec60:	22 85       	ldd	r18, Z+10	; 0x0a
   1ec62:	33 85       	ldd	r19, Z+11	; 0x0b
   1ec64:	82 1b       	sub	r24, r18
   1ec66:	93 0b       	sbc	r25, r19
   1ec68:	91 83       	std	Z+1, r25	; 0x01
   1ec6a:	80 83       	st	Z, r24
		(*obj).bytes_used=0;
   1ec6c:	13 82       	std	Z+3, r1	; 0x03
   1ec6e:	12 82       	std	Z+2, r1	; 0x02
		(*obj).empty=TRUE;
   1ec70:	81 e0       	ldi	r24, 0x01	; 1
   1ec72:	84 83       	std	Z+4, r24	; 0x04
		(*obj).full=FALSE;
   1ec74:	15 82       	std	Z+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1ec76:	4f bf       	out	0x3f, r20	; 63
	}
}
   1ec78:	08 95       	ret

0001ec7a <fifo_init>:
}



void fifo_init(struct fifo_control *obj, unsigned int size, void(*post_fptr)(void), void* data_space)
{
   1ec7a:	fc 01       	movw	r30, r24
	(*obj).start = data_space;
   1ec7c:	33 87       	std	Z+11, r19	; 0x0b
   1ec7e:	22 87       	std	Z+10, r18	; 0x0a
	(*obj).end=(*obj).start + size;		// note, end points to last item in buffer + 1
   1ec80:	82 85       	ldd	r24, Z+10	; 0x0a
   1ec82:	93 85       	ldd	r25, Z+11	; 0x0b
   1ec84:	86 0f       	add	r24, r22
   1ec86:	97 1f       	adc	r25, r23
   1ec88:	95 87       	std	Z+13, r25	; 0x0d
   1ec8a:	84 87       	std	Z+12, r24	; 0x0c
	(*obj).post_fptr=post_fptr;
   1ec8c:	57 87       	std	Z+15, r21	; 0x0f
   1ec8e:	46 87       	std	Z+14, r20	; 0x0e
	fifo_flush(obj);
   1ec90:	cf 01       	movw	r24, r30
   1ec92:	0e 94 23 f6 	call	0x1ec46	; 0x1ec46 <fifo_flush>
} 
   1ec96:	08 95       	ret

0001ec98 <isxdigit>:
   1ec98:	91 11       	cpse	r25, r1
   1ec9a:	46 c0       	rjmp	.+140    	; 0x1ed28 <__ctype_isfalse>
   1ec9c:	80 53       	subi	r24, 0x30	; 48
   1ec9e:	8a 50       	subi	r24, 0x0A	; 10
   1eca0:	28 f0       	brcs	.+10     	; 0x1ecac <isxdigit+0x14>
   1eca2:	86 5c       	subi	r24, 0xC6	; 198
   1eca4:	80 62       	ori	r24, 0x20	; 32
   1eca6:	81 56       	subi	r24, 0x61	; 97
   1eca8:	86 50       	subi	r24, 0x06	; 6
   1ecaa:	b8 f7       	brcc	.-18     	; 0x1ec9a <isxdigit+0x2>
   1ecac:	08 95       	ret

0001ecae <memcpy>:
   1ecae:	fb 01       	movw	r30, r22
   1ecb0:	dc 01       	movw	r26, r24
   1ecb2:	02 c0       	rjmp	.+4      	; 0x1ecb8 <memcpy+0xa>
   1ecb4:	01 90       	ld	r0, Z+
   1ecb6:	0d 92       	st	X+, r0
   1ecb8:	41 50       	subi	r20, 0x01	; 1
   1ecba:	50 40       	sbci	r21, 0x00	; 0
   1ecbc:	d8 f7       	brcc	.-10     	; 0x1ecb4 <memcpy+0x6>
   1ecbe:	08 95       	ret

0001ecc0 <ltoa>:
   1ecc0:	fa 01       	movw	r30, r20
   1ecc2:	cf 93       	push	r28
   1ecc4:	ff 93       	push	r31
   1ecc6:	ef 93       	push	r30
   1ecc8:	22 30       	cpi	r18, 0x02	; 2
   1ecca:	44 f1       	brlt	.+80     	; 0x1ed1c <ltoa+0x5c>
   1eccc:	25 32       	cpi	r18, 0x25	; 37
   1ecce:	34 f5       	brge	.+76     	; 0x1ed1c <ltoa+0x5c>
   1ecd0:	c2 2f       	mov	r28, r18
   1ecd2:	e8 94       	clt
   1ecd4:	ca 30       	cpi	r28, 0x0A	; 10
   1ecd6:	49 f4       	brne	.+18     	; 0x1ecea <ltoa+0x2a>
   1ecd8:	97 fb       	bst	r25, 7
   1ecda:	3e f4       	brtc	.+14     	; 0x1ecea <ltoa+0x2a>
   1ecdc:	90 95       	com	r25
   1ecde:	80 95       	com	r24
   1ece0:	70 95       	com	r23
   1ece2:	61 95       	neg	r22
   1ece4:	7f 4f       	sbci	r23, 0xFF	; 255
   1ece6:	8f 4f       	sbci	r24, 0xFF	; 255
   1ece8:	9f 4f       	sbci	r25, 0xFF	; 255
   1ecea:	2c 2f       	mov	r18, r28
   1ecec:	33 27       	eor	r19, r19
   1ecee:	44 27       	eor	r20, r20
   1ecf0:	55 27       	eor	r21, r21
   1ecf2:	ff 93       	push	r31
   1ecf4:	ef 93       	push	r30
   1ecf6:	0e 94 a7 f6 	call	0x1ed4e	; 0x1ed4e <__udivmodsi4>
   1ecfa:	ef 91       	pop	r30
   1ecfc:	ff 91       	pop	r31
   1ecfe:	60 5d       	subi	r22, 0xD0	; 208
   1ed00:	6a 33       	cpi	r22, 0x3A	; 58
   1ed02:	0c f0       	brlt	.+2      	; 0x1ed06 <ltoa+0x46>
   1ed04:	69 5d       	subi	r22, 0xD9	; 217
   1ed06:	61 93       	st	Z+, r22
   1ed08:	b9 01       	movw	r22, r18
   1ed0a:	ca 01       	movw	r24, r20
   1ed0c:	60 50       	subi	r22, 0x00	; 0
   1ed0e:	70 40       	sbci	r23, 0x00	; 0
   1ed10:	80 40       	sbci	r24, 0x00	; 0
   1ed12:	90 40       	sbci	r25, 0x00	; 0
   1ed14:	51 f7       	brne	.-44     	; 0x1ecea <ltoa+0x2a>
   1ed16:	16 f4       	brtc	.+4      	; 0x1ed1c <ltoa+0x5c>
   1ed18:	cd e2       	ldi	r28, 0x2D	; 45
   1ed1a:	c1 93       	st	Z+, r28
   1ed1c:	10 82       	st	Z, r1
   1ed1e:	8f 91       	pop	r24
   1ed20:	9f 91       	pop	r25
   1ed22:	cf 91       	pop	r28
   1ed24:	0c 94 97 f6 	jmp	0x1ed2e	; 0x1ed2e <strrev>

0001ed28 <__ctype_isfalse>:
   1ed28:	99 27       	eor	r25, r25
   1ed2a:	88 27       	eor	r24, r24

0001ed2c <__ctype_istrue>:
   1ed2c:	08 95       	ret

0001ed2e <strrev>:
   1ed2e:	dc 01       	movw	r26, r24
   1ed30:	fc 01       	movw	r30, r24
   1ed32:	67 2f       	mov	r22, r23
   1ed34:	71 91       	ld	r23, Z+
   1ed36:	77 23       	and	r23, r23
   1ed38:	e1 f7       	brne	.-8      	; 0x1ed32 <strrev+0x4>
   1ed3a:	32 97       	sbiw	r30, 0x02	; 2
   1ed3c:	04 c0       	rjmp	.+8      	; 0x1ed46 <strrev+0x18>
   1ed3e:	7c 91       	ld	r23, X
   1ed40:	6d 93       	st	X+, r22
   1ed42:	70 83       	st	Z, r23
   1ed44:	62 91       	ld	r22, -Z
   1ed46:	ae 17       	cp	r26, r30
   1ed48:	bf 07       	cpc	r27, r31
   1ed4a:	c8 f3       	brcs	.-14     	; 0x1ed3e <strrev+0x10>
   1ed4c:	08 95       	ret

0001ed4e <__udivmodsi4>:
   1ed4e:	a1 e2       	ldi	r26, 0x21	; 33
   1ed50:	1a 2e       	mov	r1, r26
   1ed52:	aa 1b       	sub	r26, r26
   1ed54:	bb 1b       	sub	r27, r27
   1ed56:	fd 01       	movw	r30, r26
   1ed58:	0d c0       	rjmp	.+26     	; 0x1ed74 <__udivmodsi4_ep>

0001ed5a <__udivmodsi4_loop>:
   1ed5a:	aa 1f       	adc	r26, r26
   1ed5c:	bb 1f       	adc	r27, r27
   1ed5e:	ee 1f       	adc	r30, r30
   1ed60:	ff 1f       	adc	r31, r31
   1ed62:	a2 17       	cp	r26, r18
   1ed64:	b3 07       	cpc	r27, r19
   1ed66:	e4 07       	cpc	r30, r20
   1ed68:	f5 07       	cpc	r31, r21
   1ed6a:	20 f0       	brcs	.+8      	; 0x1ed74 <__udivmodsi4_ep>
   1ed6c:	a2 1b       	sub	r26, r18
   1ed6e:	b3 0b       	sbc	r27, r19
   1ed70:	e4 0b       	sbc	r30, r20
   1ed72:	f5 0b       	sbc	r31, r21

0001ed74 <__udivmodsi4_ep>:
   1ed74:	66 1f       	adc	r22, r22
   1ed76:	77 1f       	adc	r23, r23
   1ed78:	88 1f       	adc	r24, r24
   1ed7a:	99 1f       	adc	r25, r25
   1ed7c:	1a 94       	dec	r1
   1ed7e:	69 f7       	brne	.-38     	; 0x1ed5a <__udivmodsi4_loop>
   1ed80:	60 95       	com	r22
   1ed82:	70 95       	com	r23
   1ed84:	80 95       	com	r24
   1ed86:	90 95       	com	r25
   1ed88:	9b 01       	movw	r18, r22
   1ed8a:	ac 01       	movw	r20, r24
   1ed8c:	bd 01       	movw	r22, r26
   1ed8e:	cf 01       	movw	r24, r30
   1ed90:	08 95       	ret

0001ed92 <_exit>:
   1ed92:	f8 94       	cli

0001ed94 <__stop_program>:
   1ed94:	ff cf       	rjmp	.-2      	; 0x1ed94 <__stop_program>
