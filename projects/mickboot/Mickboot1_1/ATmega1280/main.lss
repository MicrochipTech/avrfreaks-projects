
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800200  0001f3c0  00001454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c0  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b7  008002ba  008002ba  0000150e  2**0
                  ALLOC
  3 .debug_aranges 000000c8  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000035e  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001082  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001233  00000000  00000000  000031d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00004408  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ab  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007cf  00000000  00000000  00004ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000052b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__ctors_end>
   1e004:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e008:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e00c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e010:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e014:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e018:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e01c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e020:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e024:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e028:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e02c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e030:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e034:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e038:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e03c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e040:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e044:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e048:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e04c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e050:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e054:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e058:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e05c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e060:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e064:	0c 94 29 f3 	jmp	0x1e652	; 0x1e652 <__vector_25>
   1e068:	0c 94 31 f4 	jmp	0x1e862	; 0x1e862 <__vector_26>
   1e06c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e070:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e074:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e078:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e07c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e080:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e084:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e088:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e08c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e090:	0c 94 6b f3 	jmp	0x1e6d6	; 0x1e6d6 <__vector_36>
   1e094:	0c 94 82 f4 	jmp	0x1e904	; 0x1e904 <__vector_37>
   1e098:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e09c:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0a0:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0a4:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0a8:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0ac:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0b0:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0b4:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0b8:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0bc:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0c0:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0c4:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0c8:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0cc:	0c 94 ad f3 	jmp	0x1e75a	; 0x1e75a <__vector_51>
   1e0d0:	0c 94 d3 f4 	jmp	0x1e9a6	; 0x1e9a6 <__vector_52>
   1e0d4:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>
   1e0d8:	0c 94 ef f3 	jmp	0x1e7de	; 0x1e7de <__vector_54>
   1e0dc:	0c 94 24 f5 	jmp	0x1ea48	; 0x1ea48 <__vector_55>
   1e0e0:	0c 94 9a f0 	jmp	0x1e134	; 0x1e134 <__bad_interrupt>

0001e0e4 <__ctors_end>:
   1e0e4:	11 24       	eor	r1, r1
   1e0e6:	1f be       	out	0x3f, r1	; 63
   1e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   1e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   1e0ec:	de bf       	out	0x3e, r29	; 62
   1e0ee:	cd bf       	out	0x3d, r28	; 61

0001e0f0 <get_mcusr>:
// Watchdog fix for 1281/1280
void get_mcusr(void) \
      __attribute__((naked)) \
      __attribute__((section(".init3")));
void get_mcusr(void)
{
   1e0f0:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
    wdt_disable();
   1e0f2:	88 e1       	ldi	r24, 0x18	; 24
   1e0f4:	0f b6       	in	r0, 0x3f	; 63
   1e0f6:	f8 94       	cli
   1e0f8:	80 93 60 00 	sts	0x0060, r24
   1e0fc:	10 92 60 00 	sts	0x0060, r1
   1e100:	0f be       	out	0x3f, r0	; 63

0001e102 <__do_copy_data>:
   1e102:	12 e0       	ldi	r17, 0x02	; 2
   1e104:	a0 e0       	ldi	r26, 0x00	; 0
   1e106:	b2 e0       	ldi	r27, 0x02	; 2
   1e108:	e0 ec       	ldi	r30, 0xC0	; 192
   1e10a:	f3 ef       	ldi	r31, 0xF3	; 243
   1e10c:	01 e0       	ldi	r16, 0x01	; 1
   1e10e:	0b bf       	out	0x3b, r16	; 59
   1e110:	02 c0       	rjmp	.+4      	; 0x1e116 <__do_copy_data+0x14>
   1e112:	07 90       	elpm	r0, Z+
   1e114:	0d 92       	st	X+, r0
   1e116:	aa 3b       	cpi	r26, 0xBA	; 186
   1e118:	b1 07       	cpc	r27, r17
   1e11a:	d9 f7       	brne	.-10     	; 0x1e112 <__do_copy_data+0x10>

0001e11c <__do_clear_bss>:
   1e11c:	15 e0       	ldi	r17, 0x05	; 5
   1e11e:	aa eb       	ldi	r26, 0xBA	; 186
   1e120:	b2 e0       	ldi	r27, 0x02	; 2
   1e122:	01 c0       	rjmp	.+2      	; 0x1e126 <.do_clear_bss_start>

0001e124 <.do_clear_bss_loop>:
   1e124:	1d 92       	st	X+, r1

0001e126 <.do_clear_bss_start>:
   1e126:	a1 37       	cpi	r26, 0x71	; 113
   1e128:	b1 07       	cpc	r27, r17
   1e12a:	e1 f7       	brne	.-8      	; 0x1e124 <.do_clear_bss_loop>
   1e12c:	0e 94 9c f0 	call	0x1e138	; 0x1e138 <main>
   1e130:	0c 94 de f9 	jmp	0x1f3bc	; 0x1f3bc <_exit>

0001e134 <__bad_interrupt>:
   1e134:	0c 94 00 f0 	jmp	0x1e000	; 0x1e000 <__vectors>

0001e138 <main>:
}
	
// Main application routine.
int main(void)
{
   1e138:	ef 92       	push	r14
   1e13a:	ff 92       	push	r15
   1e13c:	1f 93       	push	r17
   1e13e:	cf 93       	push	r28
   1e140:	df 93       	push	r29
	int timeout;
	char *char_ptr, failed, finished;
	
	if(uart_init())	// detect ' ' on com 3,2,1 or 0, then configure that port
   1e142:	0e 94 75 f5 	call	0x1eaea	; 0x1eaea <uart_init>
   1e146:	88 23       	and	r24, r24
   1e148:	09 f4       	brne	.+2      	; 0x1e14c <main+0x14>
   1e14a:	cb c0       	rjmp	.+406    	; 0x1e2e2 <main+0x1aa>
	{
		MCUCR = _BV(IVCE);
   1e14c:	81 e0       	ldi	r24, 0x01	; 1
   1e14e:	85 bf       	out	0x35, r24	; 53
		MCUCR = _BV(IVSEL);
   1e150:	82 e0       	ldi	r24, 0x02	; 2
   1e152:	85 bf       	out	0x35, r24	; 53
		
		sei();
   1e154:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   1e156:	80 e4       	ldi	r24, 0x40	; 64
   1e158:	e8 2e       	mov	r14, r24
   1e15a:	8c e9       	ldi	r24, 0x9C	; 156
   1e15c:	f8 2e       	mov	r15, r24
		do
		{
			timeout=TIMEOUT_ZPROMPT/0.010;
			UART_TX("\r\nMICKBOOT V1.1 Uart");
   1e15e:	80 e0       	ldi	r24, 0x00	; 0
   1e160:	92 e0       	ldi	r25, 0x02	; 2
   1e162:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
			
			if(UCSR3B & _BV(RXEN3))
   1e166:	80 91 31 01 	lds	r24, 0x0131
   1e16a:	84 ff       	sbrs	r24, 4
   1e16c:	03 c0       	rjmp	.+6      	; 0x1e174 <main+0x3c>
				UART_TX("3");
   1e16e:	85 e1       	ldi	r24, 0x15	; 21
   1e170:	92 e0       	ldi	r25, 0x02	; 2
   1e172:	10 c0       	rjmp	.+32     	; 0x1e194 <main+0x5c>
			else if(UCSR2B & _BV(RXEN2))
   1e174:	80 91 d1 00 	lds	r24, 0x00D1
   1e178:	84 ff       	sbrs	r24, 4
   1e17a:	03 c0       	rjmp	.+6      	; 0x1e182 <main+0x4a>
				UART_TX("2");
   1e17c:	87 e1       	ldi	r24, 0x17	; 23
   1e17e:	92 e0       	ldi	r25, 0x02	; 2
   1e180:	09 c0       	rjmp	.+18     	; 0x1e194 <main+0x5c>
			else if(UCSR1B & _BV(RXEN1))
   1e182:	80 91 c9 00 	lds	r24, 0x00C9
   1e186:	84 ff       	sbrs	r24, 4
   1e188:	03 c0       	rjmp	.+6      	; 0x1e190 <main+0x58>
				UART_TX("1");
   1e18a:	89 e1       	ldi	r24, 0x19	; 25
   1e18c:	92 e0       	ldi	r25, 0x02	; 2
   1e18e:	02 c0       	rjmp	.+4      	; 0x1e194 <main+0x5c>
			else
				UART_TX("0");
   1e190:	8b e1       	ldi	r24, 0x1B	; 27
   1e192:	92 e0       	ldi	r25, 0x02	; 2
   1e194:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
			
			UART_TX("\r\nSend Z\r\n");
   1e198:	8d e1       	ldi	r24, 0x1D	; 29
   1e19a:	92 e0       	ldi	r25, 0x02	; 2
   1e19c:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
   1e1a0:	28 eb       	ldi	r18, 0xB8	; 184
   1e1a2:	3b e0       	ldi	r19, 0x0B	; 11
			
			finished=FALSE;
			failed=FALSE;
			do
			{
				if(uart_fifo_rx.bytes_used)
   1e1a4:	80 91 cb 03 	lds	r24, 0x03CB
   1e1a8:	88 23       	and	r24, r24
   1e1aa:	09 f4       	brne	.+2      	; 0x1e1ae <main+0x76>
   1e1ac:	70 c0       	rjmp	.+224    	; 0x1e28e <main+0x156>
				{
					timeout=TIMEOUT_ZPROMPT/0.010;
					if(fifo_read_char()=='Z')
   1e1ae:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <fifo_read_char>
   1e1b2:	8a 35       	cpi	r24, 0x5A	; 90
   1e1b4:	a9 f7       	brne	.-22     	; 0x1e1a0 <main+0x68>
					{
						UART_TX("\r\nSend hex file in ASCII\r\n");
   1e1b6:	88 e2       	ldi	r24, 0x28	; 40
   1e1b8:	92 e0       	ldi	r25, 0x02	; 2
   1e1ba:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
						timeout=TIMEOUT_HEX_DATA/0.010;
						failed=FALSE;
						finished=FALSE;
						ihex_init();
   1e1be:	0e 94 e0 f7 	call	0x1efc0	; 0x1efc0 <ihex_init>
   1e1c2:	c0 e7       	ldi	r28, 0x70	; 112
   1e1c4:	d7 e1       	ldi	r29, 0x17	; 23
						do
						{
							if(uart_fifo_rx.bytes_used)
   1e1c6:	80 91 cb 03 	lds	r24, 0x03CB
   1e1ca:	88 23       	and	r24, r24
   1e1cc:	09 f4       	brne	.+2      	; 0x1e1d0 <main+0x98>
   1e1ce:	41 c0       	rjmp	.+130    	; 0x1e252 <main+0x11a>
							{
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char());
   1e1d0:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <fifo_read_char>
   1e1d4:	0e 94 dc f8 	call	0x1f1b8	; 0x1f1b8 <ihex_char>
								if(ihex_byte_count)
   1e1d8:	80 91 34 05 	lds	r24, 0x0534
   1e1dc:	88 23       	and	r24, r24
   1e1de:	39 f1       	breq	.+78     	; 0x1e22e <main+0xf6>
   1e1e0:	c4 e2       	ldi	r28, 0x24	; 36
   1e1e2:	d5 e0       	ldi	r29, 0x05	; 5
   1e1e4:	1b c0       	rjmp	.+54     	; 0x1e21c <main+0xe4>
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
										flash_byte(ihex_address++, *char_ptr++);
   1e1e6:	60 91 be 02 	lds	r22, 0x02BE
   1e1ea:	70 91 bf 02 	lds	r23, 0x02BF
   1e1ee:	80 91 c0 02 	lds	r24, 0x02C0
   1e1f2:	90 91 c1 02 	lds	r25, 0x02C1
   1e1f6:	6f 5f       	subi	r22, 0xFF	; 255
   1e1f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1e1fa:	8f 4f       	sbci	r24, 0xFF	; 255
   1e1fc:	9f 4f       	sbci	r25, 0xFF	; 255
   1e1fe:	60 93 be 02 	sts	0x02BE, r22
   1e202:	70 93 bf 02 	sts	0x02BF, r23
   1e206:	80 93 c0 02 	sts	0x02C0, r24
   1e20a:	90 93 c1 02 	sts	0x02C1, r25
   1e20e:	61 50       	subi	r22, 0x01	; 1
   1e210:	70 40       	sbci	r23, 0x00	; 0
   1e212:	80 40       	sbci	r24, 0x00	; 0
   1e214:	90 40       	sbci	r25, 0x00	; 0
   1e216:	49 91       	ld	r20, Y+
   1e218:	0e 94 43 f2 	call	0x1e486	; 0x1e486 <flash_byte>
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char());
								if(ihex_byte_count)
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
   1e21c:	80 91 34 05 	lds	r24, 0x0534
   1e220:	81 50       	subi	r24, 0x01	; 1
   1e222:	80 93 34 05 	sts	0x0534, r24
   1e226:	8f 5f       	subi	r24, 0xFF	; 255
   1e228:	f1 f6       	brne	.-68     	; 0x1e1e6 <main+0xae>
										flash_byte(ihex_address++, *char_ptr++);
									ihex_byte_count=0;
   1e22a:	10 92 34 05 	sts	0x0534, r1
								};
								if(ihex_status==IHEX_STATUS_EOF)
   1e22e:	80 91 23 05 	lds	r24, 0x0523
   1e232:	81 30       	cpi	r24, 0x01	; 1
   1e234:	09 f0       	breq	.+2      	; 0x1e238 <main+0x100>
   1e236:	62 c0       	rjmp	.+196    	; 0x1e2fc <main+0x1c4>
								{
									flash_finish();
   1e238:	0e 94 40 f2 	call	0x1e480	; 0x1e480 <flash_finish>
									if(!writer_failed)
   1e23c:	80 91 bc 02 	lds	r24, 0x02BC
   1e240:	88 23       	and	r24, r24
   1e242:	09 f0       	breq	.+2      	; 0x1e246 <main+0x10e>
   1e244:	5b c0       	rjmp	.+182    	; 0x1e2fc <main+0x1c4>
									{
										UART_TX("Success!\r\n");
   1e246:	83 e4       	ldi	r24, 0x43	; 67
   1e248:	92 e0       	ldi	r25, 0x02	; 2
   1e24a:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
   1e24e:	11 e0       	ldi	r17, 0x01	; 1
   1e250:	56 c0       	rjmp	.+172    	; 0x1e2fe <main+0x1c6>
									};							
								};
							}
							else
							{
								timeout--;
   1e252:	21 97       	sbiw	r28, 0x01	; 1
   1e254:	c7 01       	movw	r24, r14
   1e256:	01 97       	sbiw	r24, 0x01	; 1
   1e258:	f1 f7       	brne	.-4      	; 0x1e256 <main+0x11e>
								_delay_ms(10);
							};
							
							if(!timeout)	//if timeout looking for hex data, repeat Z prompt
   1e25a:	20 97       	sbiw	r28, 0x00	; 0
   1e25c:	11 f0       	breq	.+4      	; 0x1e262 <main+0x12a>
   1e25e:	90 e0       	ldi	r25, 0x00	; 0
   1e260:	05 c0       	rjmp	.+10     	; 0x1e26c <main+0x134>
							{
								UART_TX("Timeout waiting for hex data\r\n");
   1e262:	8e e4       	ldi	r24, 0x4E	; 78
   1e264:	92 e0       	ldi	r25, 0x02	; 2
   1e266:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
   1e26a:	91 e0       	ldi	r25, 0x01	; 1
   1e26c:	10 e0       	ldi	r17, 0x00	; 0
								failed=TRUE;
							};
							
							if(ihex_status == IHEX_STATUS_ERROR)
   1e26e:	80 91 23 05 	lds	r24, 0x0523
   1e272:	82 30       	cpi	r24, 0x02	; 2
   1e274:	29 f4       	brne	.+10     	; 0x1e280 <main+0x148>
							{
								UART_TX("Hex file ERROR!\r\n");
   1e276:	8d e6       	ldi	r24, 0x6D	; 109
   1e278:	92 e0       	ldi	r25, 0x02	; 2
   1e27a:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
   1e27e:	43 c0       	rjmp	.+134    	; 0x1e306 <main+0x1ce>
								failed=TRUE;
							};
							
						}while(!failed && !finished);
   1e280:	99 23       	and	r25, r25
   1e282:	09 f0       	breq	.+2      	; 0x1e286 <main+0x14e>
   1e284:	40 c0       	rjmp	.+128    	; 0x1e306 <main+0x1ce>
   1e286:	11 23       	and	r17, r17
   1e288:	09 f4       	brne	.+2      	; 0x1e28c <main+0x154>
   1e28a:	9d cf       	rjmp	.-198    	; 0x1e1c6 <main+0x8e>
   1e28c:	0d c0       	rjmp	.+26     	; 0x1e2a8 <main+0x170>
					};
				}
				else
				{
					timeout--;
   1e28e:	21 50       	subi	r18, 0x01	; 1
   1e290:	30 40       	sbci	r19, 0x00	; 0
   1e292:	c7 01       	movw	r24, r14
   1e294:	01 97       	sbiw	r24, 0x01	; 1
   1e296:	f1 f7       	brne	.-4      	; 0x1e294 <main+0x15c>
					_delay_ms(10);
					if(!timeout)	//if timeout looking for Z, finish and run main app
   1e298:	21 15       	cp	r18, r1
   1e29a:	31 05       	cpc	r19, r1
   1e29c:	09 f0       	breq	.+2      	; 0x1e2a0 <main+0x168>
   1e29e:	82 cf       	rjmp	.-252    	; 0x1e1a4 <main+0x6c>
					{
						finished=TRUE;
						UART_TX("Timeout waiting for Z\r\n");
   1e2a0:	8f e7       	ldi	r24, 0x7F	; 127
   1e2a2:	92 e0       	ldi	r25, 0x02	; 2
   1e2a4:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
		
		UART_TX("RUNNING\r\n");
   1e2a8:	87 e9       	ldi	r24, 0x97	; 151
   1e2aa:	92 e0       	ldi	r25, 0x02	; 2
   1e2ac:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
   1e2b0:	88 e8       	ldi	r24, 0x88	; 136
   1e2b2:	93 e1       	ldi	r25, 0x13	; 19
   1e2b4:	20 e9       	ldi	r18, 0x90	; 144
   1e2b6:	31 e0       	ldi	r19, 0x01	; 1
   1e2b8:	f9 01       	movw	r30, r18
   1e2ba:	31 97       	sbiw	r30, 0x01	; 1
   1e2bc:	f1 f7       	brne	.-4      	; 0x1e2ba <main+0x182>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1e2be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1e2c0:	d9 f7       	brne	.-10     	; 0x1e2b8 <main+0x180>
		_delay_ms(500);
		cli();
   1e2c2:	f8 94       	cli
		MCUCR = _BV(IVCE);
   1e2c4:	81 e0       	ldi	r24, 0x01	; 1
   1e2c6:	85 bf       	out	0x35, r24	; 53
		MCUCR = 0;
   1e2c8:	15 be       	out	0x35, r1	; 53
		wdt_enable(WDTO_15MS);
   1e2ca:	28 e0       	ldi	r18, 0x08	; 8
   1e2cc:	88 e1       	ldi	r24, 0x18	; 24
   1e2ce:	90 e0       	ldi	r25, 0x00	; 0
   1e2d0:	0f b6       	in	r0, 0x3f	; 63
   1e2d2:	f8 94       	cli
   1e2d4:	a8 95       	wdr
   1e2d6:	80 93 60 00 	sts	0x0060, r24
   1e2da:	0f be       	out	0x3f, r0	; 63
   1e2dc:	20 93 60 00 	sts	0x0060, r18
   1e2e0:	ff cf       	rjmp	.-2      	; 0x1e2e0 <main+0x1a8>
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e2e2:	e0 91 ba 02 	lds	r30, 0x02BA
   1e2e6:	f0 91 bb 02 	lds	r31, 0x02BB
   1e2ea:	09 95       	icall

	return 0;
}
   1e2ec:	80 e0       	ldi	r24, 0x00	; 0
   1e2ee:	90 e0       	ldi	r25, 0x00	; 0
   1e2f0:	df 91       	pop	r29
   1e2f2:	cf 91       	pop	r28
   1e2f4:	1f 91       	pop	r17
   1e2f6:	ff 90       	pop	r15
   1e2f8:	ef 90       	pop	r14
   1e2fa:	08 95       	ret
		wdt_enable(WDTO_15MS);
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e2fc:	10 e0       	ldi	r17, 0x00	; 0
   1e2fe:	90 e0       	ldi	r25, 0x00	; 0
   1e300:	c0 e7       	ldi	r28, 0x70	; 112
   1e302:	d7 e1       	ldi	r29, 0x17	; 23
   1e304:	b4 cf       	rjmp	.-152    	; 0x1e26e <main+0x136>
				
			//look for Z while not failed and not finished (a failure must repeat z prompt)
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
   1e306:	11 23       	and	r17, r17
   1e308:	09 f4       	brne	.+2      	; 0x1e30c <main+0x1d4>
   1e30a:	29 cf       	rjmp	.-430    	; 0x1e15e <main+0x26>
   1e30c:	cd cf       	rjmp	.-102    	; 0x1e2a8 <main+0x170>

0001e30e <memcmp_farP>:
{
	write_page();
}

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
   1e30e:	1f 93       	push	r17
   1e310:	dc 01       	movw	r26, r24
   1e312:	10 e0       	ldi	r17, 0x00	; 0
   1e314:	11 c0       	rjmp	.+34     	; 0x1e338 <memcmp_farP+0x2a>
	char retval=0;

	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e316:	6b bf       	out	0x3b, r22	; 59
   1e318:	fa 01       	movw	r30, r20
   1e31a:	97 91       	elpm	r25, Z+
   1e31c:	8c 91       	ld	r24, X
   1e31e:	89 17       	cp	r24, r25
   1e320:	21 f0       	breq	.+8      	; 0x1e32a <memcmp_farP+0x1c>
   1e322:	20 e0       	ldi	r18, 0x00	; 0
   1e324:	30 e0       	ldi	r19, 0x00	; 0
   1e326:	11 e0       	ldi	r17, 0x01	; 1
   1e328:	02 c0       	rjmp	.+4      	; 0x1e32e <memcmp_farP+0x20>

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e32a:	21 50       	subi	r18, 0x01	; 1
   1e32c:	30 40       	sbci	r19, 0x00	; 0
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e32e:	4f 5f       	subi	r20, 0xFF	; 255
   1e330:	5f 4f       	sbci	r21, 0xFF	; 255
   1e332:	6f 4f       	sbci	r22, 0xFF	; 255
   1e334:	7f 4f       	sbci	r23, 0xFF	; 255
   1e336:	11 96       	adiw	r26, 0x01	; 1

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e338:	21 15       	cp	r18, r1
   1e33a:	31 05       	cpc	r19, r1
   1e33c:	61 f7       	brne	.-40     	; 0x1e316 <memcmp_farP+0x8>
			retval=1;
			size=0;
		};
	};
	return retval;
}
   1e33e:	81 2f       	mov	r24, r17
   1e340:	1f 91       	pop	r17
   1e342:	08 95       	ret

0001e344 <write_page>:

void write_page(void)
{		
   1e344:	cf 92       	push	r12
   1e346:	df 92       	push	r13
   1e348:	ef 92       	push	r14
   1e34a:	ff 92       	push	r15
   1e34c:	0f 93       	push	r16
   1e34e:	1f 93       	push	r17
   1e350:	cf 93       	push	r28
   1e352:	df 93       	push	r29
   1e354:	0a e0       	ldi	r16, 0x0A	; 10
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
			tempint2+=buffer_verify[tempint];
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				boot_page_fill(progmem_add, tempint2);	
   1e356:	cc 24       	eor	r12, r12
   1e358:	c3 94       	inc	r12
			tempint+=2;
		};
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_erase(current_page);
   1e35a:	23 e0       	ldi	r18, 0x03	; 3
   1e35c:	d2 2e       	mov	r13, r18
		}
		boot_spm_busy_wait();      // Wait until the memory is erased.
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_write(current_page);
   1e35e:	95 e0       	ldi	r25, 0x05	; 5
   1e360:	e9 2e       	mov	r14, r25
		}
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		
		progmem_add = current_page;
		boot_rww_enable();
   1e362:	81 e1       	ldi	r24, 0x11	; 17
   1e364:	f8 2e       	mov	r15, r24
	unsigned int tempint, tempint2;
	
	do
	{
		//fill buffer
		progmem_add = current_page;
   1e366:	20 91 b5 02 	lds	r18, 0x02B5
   1e36a:	30 91 b6 02 	lds	r19, 0x02B6
   1e36e:	40 91 b7 02 	lds	r20, 0x02B7
   1e372:	50 91 b8 02 	lds	r21, 0x02B8
   1e376:	aa ec       	ldi	r26, 0xCA	; 202
   1e378:	b2 e0       	ldi	r27, 0x02	; 2
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
		{
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
   1e37a:	11 96       	adiw	r26, 0x01	; 1
   1e37c:	dc 91       	ld	r29, X
   1e37e:	11 97       	sbiw	r26, 0x01	; 1
   1e380:	c0 e0       	ldi	r28, 0x00	; 0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e382:	f8 94       	cli
			tempint2+=buffer_verify[tempint];
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				boot_page_fill(progmem_add, tempint2);	
   1e384:	8c 91       	ld	r24, X
   1e386:	be 01       	movw	r22, r28
   1e388:	68 0f       	add	r22, r24
   1e38a:	71 1d       	adc	r23, r1
   1e38c:	0b 01       	movw	r0, r22
   1e38e:	f9 01       	movw	r30, r18
   1e390:	40 93 5b 00 	sts	0x005B, r20
   1e394:	c0 92 57 00 	sts	0x0057, r12
   1e398:	e8 95       	spm
   1e39a:	11 24       	eor	r1, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e39c:	78 94       	sei
			}
			progmem_add+=2;
   1e39e:	2e 5f       	subi	r18, 0xFE	; 254
   1e3a0:	3f 4f       	sbci	r19, 0xFF	; 255
   1e3a2:	4f 4f       	sbci	r20, 0xFF	; 255
   1e3a4:	5f 4f       	sbci	r21, 0xFF	; 255
   1e3a6:	12 96       	adiw	r26, 0x02	; 2
	do
	{
		//fill buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e3a8:	73 e0       	ldi	r23, 0x03	; 3
   1e3aa:	aa 3c       	cpi	r26, 0xCA	; 202
   1e3ac:	b7 07       	cpc	r27, r23
   1e3ae:	29 f7       	brne	.-54     	; 0x1e37a <write_page+0x36>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e3b0:	f8 94       	cli
			tempint+=2;
		};
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_erase(current_page);
   1e3b2:	80 91 b5 02 	lds	r24, 0x02B5
   1e3b6:	90 91 b6 02 	lds	r25, 0x02B6
   1e3ba:	a0 91 b7 02 	lds	r26, 0x02B7
   1e3be:	b0 91 b8 02 	lds	r27, 0x02B8
   1e3c2:	fc 01       	movw	r30, r24
   1e3c4:	a0 93 5b 00 	sts	0x005B, r26
   1e3c8:	d0 92 57 00 	sts	0x0057, r13
   1e3cc:	e8 95       	spm
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e3ce:	78 94       	sei
		}
		boot_spm_busy_wait();      // Wait until the memory is erased.
   1e3d0:	07 b6       	in	r0, 0x37	; 55
   1e3d2:	00 fc       	sbrc	r0, 0
   1e3d4:	fd cf       	rjmp	.-6      	; 0x1e3d0 <write_page+0x8c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e3d6:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_write(current_page);
   1e3d8:	80 91 b5 02 	lds	r24, 0x02B5
   1e3dc:	90 91 b6 02 	lds	r25, 0x02B6
   1e3e0:	a0 91 b7 02 	lds	r26, 0x02B7
   1e3e4:	b0 91 b8 02 	lds	r27, 0x02B8
   1e3e8:	fc 01       	movw	r30, r24
   1e3ea:	a0 93 5b 00 	sts	0x005B, r26
   1e3ee:	e0 92 57 00 	sts	0x0057, r14
   1e3f2:	e8 95       	spm
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e3f4:	78 94       	sei
		}
		boot_spm_busy_wait();      // Wait until the memory is programmed.
   1e3f6:	07 b6       	in	r0, 0x37	; 55
   1e3f8:	00 fc       	sbrc	r0, 0
   1e3fa:	fd cf       	rjmp	.-6      	; 0x1e3f6 <write_page+0xb2>
		
		progmem_add = current_page;
   1e3fc:	20 91 b5 02 	lds	r18, 0x02B5
   1e400:	30 91 b6 02 	lds	r19, 0x02B6
   1e404:	40 91 b7 02 	lds	r20, 0x02B7
   1e408:	50 91 b8 02 	lds	r21, 0x02B8
		boot_rww_enable();
   1e40c:	f0 92 57 00 	sts	0x0057, r15
   1e410:	e8 95       	spm
   1e412:	aa ec       	ldi	r26, 0xCA	; 202
   1e414:	b2 e0       	ldi	r27, 0x02	; 2
   1e416:	60 e0       	ldi	r22, 0x00	; 0
   1e418:	71 e0       	ldi	r23, 0x01	; 1
   1e41a:	10 e0       	ldi	r17, 0x00	; 0
{
	char retval=0;

	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e41c:	4b bf       	out	0x3b, r20	; 59
   1e41e:	f9 01       	movw	r30, r18
   1e420:	97 91       	elpm	r25, Z+
   1e422:	8c 91       	ld	r24, X
   1e424:	89 17       	cp	r24, r25
   1e426:	21 f0       	breq	.+8      	; 0x1e430 <write_page+0xec>
   1e428:	11 e0       	ldi	r17, 0x01	; 1
   1e42a:	60 e0       	ldi	r22, 0x00	; 0
   1e42c:	70 e0       	ldi	r23, 0x00	; 0
   1e42e:	02 c0       	rjmp	.+4      	; 0x1e434 <write_page+0xf0>

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e430:	61 50       	subi	r22, 0x01	; 1
   1e432:	70 40       	sbci	r23, 0x00	; 0
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e434:	2f 5f       	subi	r18, 0xFF	; 255
   1e436:	3f 4f       	sbci	r19, 0xFF	; 255
   1e438:	4f 4f       	sbci	r20, 0xFF	; 255
   1e43a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e43c:	11 96       	adiw	r26, 0x01	; 1

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e43e:	61 15       	cp	r22, r1
   1e440:	71 05       	cpc	r23, r1
   1e442:	61 f7       	brne	.-40     	; 0x1e41c <write_page+0xd8>
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		
		progmem_add = current_page;
		boot_rww_enable();
		
		if( memcmp_farP(buffer_verify, progmem_add, FLASH_PAGE_SIZE) )
   1e444:	11 23       	and	r17, r17
   1e446:	11 f4       	brne	.+4      	; 0x1e44c <write_page+0x108>
   1e448:	81 e0       	ldi	r24, 0x01	; 1
   1e44a:	06 c0       	rjmp	.+12     	; 0x1e458 <write_page+0x114>
		{
			UART_TX("Retrying\r\n");
   1e44c:	81 ea       	ldi	r24, 0xA1	; 161
   1e44e:	92 e0       	ldi	r25, 0x02	; 2
   1e450:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
			retry--;
   1e454:	01 50       	subi	r16, 0x01	; 1
   1e456:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
			verified=TRUE;
			
	}while(retry && !verified);
   1e458:	00 23       	and	r16, r16
   1e45a:	21 f0       	breq	.+8      	; 0x1e464 <write_page+0x120>
   1e45c:	88 23       	and	r24, r24
   1e45e:	09 f4       	brne	.+2      	; 0x1e462 <write_page+0x11e>
   1e460:	82 cf       	rjmp	.-252    	; 0x1e366 <write_page+0x22>
   1e462:	05 c0       	rjmp	.+10     	; 0x1e46e <write_page+0x12a>
	
	if(!verified)
   1e464:	88 23       	and	r24, r24
   1e466:	19 f4       	brne	.+6      	; 0x1e46e <write_page+0x12a>
		writer_failed=TRUE;
   1e468:	81 e0       	ldi	r24, 0x01	; 1
   1e46a:	80 93 bc 02 	sts	0x02BC, r24
}
   1e46e:	df 91       	pop	r29
   1e470:	cf 91       	pop	r28
   1e472:	1f 91       	pop	r17
   1e474:	0f 91       	pop	r16
   1e476:	ff 90       	pop	r15
   1e478:	ef 90       	pop	r14
   1e47a:	df 90       	pop	r13
   1e47c:	cf 90       	pop	r12
   1e47e:	08 95       	ret

0001e480 <flash_finish>:
	write_needed=TRUE;
}

void flash_finish(void)
{
	write_page();
   1e480:	0e 94 a2 f1 	call	0x1e344	; 0x1e344 <write_page>
}
   1e484:	08 95       	ret

0001e486 <flash_byte>:
	char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size);
	void write_page(void);

// call with bytes, builds pages and writes pages to flash.
void flash_byte(unsigned long address, char byte)
{
   1e486:	9f 92       	push	r9
   1e488:	af 92       	push	r10
   1e48a:	bf 92       	push	r11
   1e48c:	cf 92       	push	r12
   1e48e:	df 92       	push	r13
   1e490:	ef 92       	push	r14
   1e492:	ff 92       	push	r15
   1e494:	0f 93       	push	r16
   1e496:	1f 93       	push	r17
   1e498:	df 93       	push	r29
   1e49a:	cf 93       	push	r28
   1e49c:	cd b7       	in	r28, 0x3d	; 61
   1e49e:	de b7       	in	r29, 0x3e	; 62
   1e4a0:	2a 97       	sbiw	r28, 0x0a	; 10
   1e4a2:	0f b6       	in	r0, 0x3f	; 63
   1e4a4:	f8 94       	cli
   1e4a6:	de bf       	out	0x3e, r29	; 62
   1e4a8:	0f be       	out	0x3f, r0	; 63
   1e4aa:	cd bf       	out	0x3d, r28	; 61
   1e4ac:	5b 01       	movw	r10, r22
   1e4ae:	6c 01       	movw	r12, r24
   1e4b0:	94 2e       	mov	r9, r20
	static char write_needed=FALSE;
	int tempint=0;
	unsigned long progmem_add;

	//new page?
	if((address & FLASH_PAGE_MASK) != current_page)
   1e4b2:	e1 2c       	mov	r14, r1
   1e4b4:	3f ef       	ldi	r19, 0xFF	; 255
   1e4b6:	f3 2e       	mov	r15, r19
   1e4b8:	3f ef       	ldi	r19, 0xFF	; 255
   1e4ba:	03 2f       	mov	r16, r19
   1e4bc:	3f ef       	ldi	r19, 0xFF	; 255
   1e4be:	13 2f       	mov	r17, r19
   1e4c0:	e6 22       	and	r14, r22
   1e4c2:	f7 22       	and	r15, r23
   1e4c4:	08 23       	and	r16, r24
   1e4c6:	19 23       	and	r17, r25
   1e4c8:	80 91 b5 02 	lds	r24, 0x02B5
   1e4cc:	90 91 b6 02 	lds	r25, 0x02B6
   1e4d0:	a0 91 b7 02 	lds	r26, 0x02B7
   1e4d4:	b0 91 b8 02 	lds	r27, 0x02B8
   1e4d8:	e8 16       	cp	r14, r24
   1e4da:	f9 06       	cpc	r15, r25
   1e4dc:	0a 07       	cpc	r16, r26
   1e4de:	1b 07       	cpc	r17, r27
   1e4e0:	09 f4       	brne	.+2      	; 0x1e4e4 <flash_byte+0x5e>
   1e4e2:	44 c0       	rjmp	.+136    	; 0x1e56c <flash_byte+0xe6>
	{
		//write previous page (if there is one)
		if(write_needed)
   1e4e4:	80 91 bd 02 	lds	r24, 0x02BD
   1e4e8:	88 23       	and	r24, r24
   1e4ea:	11 f0       	breq	.+4      	; 0x1e4f0 <flash_byte+0x6a>
			write_page();
   1e4ec:	0e 94 a2 f1 	call	0x1e344	; 0x1e344 <write_page>
		
		current_page = address & FLASH_PAGE_MASK;
   1e4f0:	e0 92 b5 02 	sts	0x02B5, r14
   1e4f4:	f0 92 b6 02 	sts	0x02B6, r15
   1e4f8:	00 93 b7 02 	sts	0x02B7, r16
   1e4fc:	10 93 b8 02 	sts	0x02B8, r17
		
		UART_TX("PAGE ");
   1e500:	8c ea       	ldi	r24, 0xAC	; 172
   1e502:	92 e0       	ldi	r25, 0x02	; 2
   1e504:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
		UART_TX(ltoa(current_page, tempbuf, 16));
   1e508:	60 91 b5 02 	lds	r22, 0x02B5
   1e50c:	70 91 b6 02 	lds	r23, 0x02B6
   1e510:	80 91 b7 02 	lds	r24, 0x02B7
   1e514:	90 91 b8 02 	lds	r25, 0x02B8
   1e518:	ae 01       	movw	r20, r28
   1e51a:	4f 5f       	subi	r20, 0xFF	; 255
   1e51c:	5f 4f       	sbci	r21, 0xFF	; 255
   1e51e:	20 e1       	ldi	r18, 0x10	; 16
   1e520:	30 e0       	ldi	r19, 0x00	; 0
   1e522:	0e 94 75 f9 	call	0x1f2ea	; 0x1f2ea <ltoa>
   1e526:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
		UART_TX("\r\n");
   1e52a:	82 eb       	ldi	r24, 0xB2	; 178
   1e52c:	92 e0       	ldi	r25, 0x02	; 2
   1e52e:	0e 94 d0 f2 	call	0x1e5a0	; 0x1e5a0 <uart_write_string>
		
		//read new page into buffer
		progmem_add = current_page;
   1e532:	80 91 b5 02 	lds	r24, 0x02B5
   1e536:	90 91 b6 02 	lds	r25, 0x02B6
   1e53a:	a0 91 b7 02 	lds	r26, 0x02B7
   1e53e:	b0 91 b8 02 	lds	r27, 0x02B8
   1e542:	2a ec       	ldi	r18, 0xCA	; 202
   1e544:	32 e0       	ldi	r19, 0x02	; 2
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
   1e546:	ac 01       	movw	r20, r24
   1e548:	bd 01       	movw	r22, r26
   1e54a:	4f 5f       	subi	r20, 0xFF	; 255
   1e54c:	5f 4f       	sbci	r21, 0xFF	; 255
   1e54e:	6f 4f       	sbci	r22, 0xFF	; 255
   1e550:	7f 4f       	sbci	r23, 0xFF	; 255
   1e552:	ab bf       	out	0x3b, r26	; 59
   1e554:	fc 01       	movw	r30, r24
   1e556:	87 91       	elpm	r24, Z+
   1e558:	f9 01       	movw	r30, r18
   1e55a:	81 93       	st	Z+, r24
   1e55c:	9f 01       	movw	r18, r30
		UART_TX("\r\n");
		
		//read new page into buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e55e:	f3 e0       	ldi	r31, 0x03	; 3
   1e560:	2a 3c       	cpi	r18, 0xCA	; 202
   1e562:	3f 07       	cpc	r19, r31
   1e564:	19 f0       	breq	.+6      	; 0x1e56c <flash_byte+0xe6>
   1e566:	db 01       	movw	r26, r22
   1e568:	ca 01       	movw	r24, r20
   1e56a:	ed cf       	rjmp	.-38     	; 0x1e546 <flash_byte+0xc0>
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
	};

	buffer_verify[address&0xFF]=byte;
   1e56c:	f5 01       	movw	r30, r10
   1e56e:	f0 70       	andi	r31, 0x00	; 0
   1e570:	e6 53       	subi	r30, 0x36	; 54
   1e572:	fd 4f       	sbci	r31, 0xFD	; 253
   1e574:	90 82       	st	Z, r9
//	buffer_verify[(address+1)&0xFF]=(char)(word>>8);
	write_needed=TRUE;
   1e576:	81 e0       	ldi	r24, 0x01	; 1
   1e578:	80 93 bd 02 	sts	0x02BD, r24
}
   1e57c:	2a 96       	adiw	r28, 0x0a	; 10
   1e57e:	0f b6       	in	r0, 0x3f	; 63
   1e580:	f8 94       	cli
   1e582:	de bf       	out	0x3e, r29	; 62
   1e584:	0f be       	out	0x3f, r0	; 63
   1e586:	cd bf       	out	0x3d, r28	; 61
   1e588:	cf 91       	pop	r28
   1e58a:	df 91       	pop	r29
   1e58c:	1f 91       	pop	r17
   1e58e:	0f 91       	pop	r16
   1e590:	ff 90       	pop	r15
   1e592:	ef 90       	pop	r14
   1e594:	df 90       	pop	r13
   1e596:	cf 90       	pop	r12
   1e598:	bf 90       	pop	r11
   1e59a:	af 90       	pop	r10
   1e59c:	9f 90       	pop	r9
   1e59e:	08 95       	ret

0001e5a0 <uart_write_string>:
	};
	return found;
}

void uart_write_string(char*string)
{
   1e5a0:	cf 93       	push	r28
   1e5a2:	df 93       	push	r29
   1e5a4:	ec 01       	movw	r28, r24
   1e5a6:	37 c0       	rjmp	.+110    	; 0x1e616 <uart_write_string+0x76>
	while(*string)
	{
		while(uart_fifo_tx.bytes_free==0);
   1e5a8:	80 91 d5 04 	lds	r24, 0x04D5
   1e5ac:	88 23       	and	r24, r24
   1e5ae:	e1 f3       	breq	.-8      	; 0x1e5a8 <uart_write_string+0x8>
		
		*((char*)uart_fifo_tx.head_ptr) = *string;
   1e5b0:	e0 91 d7 04 	lds	r30, 0x04D7
   1e5b4:	f0 91 d8 04 	lds	r31, 0x04D8
   1e5b8:	90 83       	st	Z, r25
		uart_fifo_tx.head_ptr++;
   1e5ba:	80 91 d7 04 	lds	r24, 0x04D7
   1e5be:	90 91 d8 04 	lds	r25, 0x04D8
   1e5c2:	01 96       	adiw	r24, 0x01	; 1
   1e5c4:	90 93 d8 04 	sts	0x04D8, r25
   1e5c8:	80 93 d7 04 	sts	0x04D7, r24
		
		if(uart_fifo_tx.head_ptr == uart_fifo_tx.end)
   1e5cc:	20 91 d7 04 	lds	r18, 0x04D7
   1e5d0:	30 91 d8 04 	lds	r19, 0x04D8
   1e5d4:	80 91 dd 04 	lds	r24, 0x04DD
   1e5d8:	90 91 de 04 	lds	r25, 0x04DE
   1e5dc:	28 17       	cp	r18, r24
   1e5de:	39 07       	cpc	r19, r25
   1e5e0:	41 f4       	brne	.+16     	; 0x1e5f2 <uart_write_string+0x52>
			uart_fifo_tx.head_ptr = uart_fifo_tx.start;
   1e5e2:	80 91 db 04 	lds	r24, 0x04DB
   1e5e6:	90 91 dc 04 	lds	r25, 0x04DC
   1e5ea:	90 93 d8 04 	sts	0x04D8, r25
   1e5ee:	80 93 d7 04 	sts	0x04D7, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e5f2:	f8 94       	cli
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			uart_fifo_tx.bytes_free --;
   1e5f4:	80 91 d5 04 	lds	r24, 0x04D5
   1e5f8:	81 50       	subi	r24, 0x01	; 1
   1e5fa:	80 93 d5 04 	sts	0x04D5, r24
			uart_fifo_tx.bytes_used ++;
   1e5fe:	80 91 d6 04 	lds	r24, 0x04D6
   1e602:	8f 5f       	subi	r24, 0xFF	; 255
   1e604:	80 93 d6 04 	sts	0x04D6, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e608:	78 94       	sei
		}
		
		uart_fifo_tx.post_fptr();
   1e60a:	e0 91 df 04 	lds	r30, 0x04DF
   1e60e:	f0 91 e0 04 	lds	r31, 0x04E0
   1e612:	09 95       	icall
		string++;
   1e614:	21 96       	adiw	r28, 0x01	; 1
	return found;
}

void uart_write_string(char*string)
{
	while(*string)
   1e616:	98 81       	ld	r25, Y
   1e618:	99 23       	and	r25, r25
   1e61a:	31 f6       	brne	.-116    	; 0x1e5a8 <uart_write_string+0x8>
		}
		
		uart_fifo_tx.post_fptr();
		string++;
	};
}
   1e61c:	df 91       	pop	r29
   1e61e:	cf 91       	pop	r28
   1e620:	08 95       	ret

0001e622 <uart0_isrtx_enable>:

void uart0_isrtx_enable(void)
{
	UCSR0B |= _BV(UDRIE0);	// tx interrupt
   1e622:	e1 ec       	ldi	r30, 0xC1	; 193
   1e624:	f0 e0       	ldi	r31, 0x00	; 0
   1e626:	80 81       	ld	r24, Z
   1e628:	80 62       	ori	r24, 0x20	; 32
   1e62a:	80 83       	st	Z, r24
}
   1e62c:	08 95       	ret

0001e62e <uart1_isrtx_enable>:

void uart1_isrtx_enable(void)
{
	UCSR1B |= _BV(UDRIE1);	// tx interrupt
   1e62e:	e9 ec       	ldi	r30, 0xC9	; 201
   1e630:	f0 e0       	ldi	r31, 0x00	; 0
   1e632:	80 81       	ld	r24, Z
   1e634:	80 62       	ori	r24, 0x20	; 32
   1e636:	80 83       	st	Z, r24
}
   1e638:	08 95       	ret

0001e63a <uart2_isrtx_enable>:

void uart2_isrtx_enable(void)
{
	UCSR2B |= _BV(UDRIE2);	// tx interrupt
   1e63a:	e1 ed       	ldi	r30, 0xD1	; 209
   1e63c:	f0 e0       	ldi	r31, 0x00	; 0
   1e63e:	80 81       	ld	r24, Z
   1e640:	80 62       	ori	r24, 0x20	; 32
   1e642:	80 83       	st	Z, r24
}
   1e644:	08 95       	ret

0001e646 <uart3_isrtx_enable>:

void uart3_isrtx_enable(void)
{
	UCSR3B |= _BV(UDRIE3);	// tx interrupt
   1e646:	e1 e3       	ldi	r30, 0x31	; 49
   1e648:	f1 e0       	ldi	r31, 0x01	; 1
   1e64a:	80 81       	ld	r24, Z
   1e64c:	80 62       	ori	r24, 0x20	; 32
   1e64e:	80 83       	st	Z, r24
}
   1e650:	08 95       	ret

0001e652 <__vector_25>:

ISR(USART0_RX_vect)
{
   1e652:	1f 92       	push	r1
   1e654:	0f 92       	push	r0
   1e656:	0f b6       	in	r0, 0x3f	; 63
   1e658:	0f 92       	push	r0
   1e65a:	0b b6       	in	r0, 0x3b	; 59
   1e65c:	0f 92       	push	r0
   1e65e:	11 24       	eor	r1, r1
   1e660:	2f 93       	push	r18
   1e662:	3f 93       	push	r19
   1e664:	8f 93       	push	r24
   1e666:	9f 93       	push	r25
   1e668:	ef 93       	push	r30
   1e66a:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR0;
   1e66c:	e0 91 cc 03 	lds	r30, 0x03CC
   1e670:	f0 91 cd 03 	lds	r31, 0x03CD
   1e674:	80 91 c6 00 	lds	r24, 0x00C6
   1e678:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e67a:	80 91 cc 03 	lds	r24, 0x03CC
   1e67e:	90 91 cd 03 	lds	r25, 0x03CD
   1e682:	01 96       	adiw	r24, 0x01	; 1
   1e684:	90 93 cd 03 	sts	0x03CD, r25
   1e688:	80 93 cc 03 	sts	0x03CC, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e68c:	20 91 cc 03 	lds	r18, 0x03CC
   1e690:	30 91 cd 03 	lds	r19, 0x03CD
   1e694:	80 91 d2 03 	lds	r24, 0x03D2
   1e698:	90 91 d3 03 	lds	r25, 0x03D3
   1e69c:	28 17       	cp	r18, r24
   1e69e:	39 07       	cpc	r19, r25
   1e6a0:	41 f4       	brne	.+16     	; 0x1e6b2 <__vector_25+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e6a2:	80 91 d0 03 	lds	r24, 0x03D0
   1e6a6:	90 91 d1 03 	lds	r25, 0x03D1
   1e6aa:	90 93 cd 03 	sts	0x03CD, r25
   1e6ae:	80 93 cc 03 	sts	0x03CC, r24
	uart_fifo_rx.bytes_used ++;
   1e6b2:	80 91 cb 03 	lds	r24, 0x03CB
   1e6b6:	8f 5f       	subi	r24, 0xFF	; 255
   1e6b8:	80 93 cb 03 	sts	0x03CB, r24
}
   1e6bc:	ff 91       	pop	r31
   1e6be:	ef 91       	pop	r30
   1e6c0:	9f 91       	pop	r25
   1e6c2:	8f 91       	pop	r24
   1e6c4:	3f 91       	pop	r19
   1e6c6:	2f 91       	pop	r18
   1e6c8:	0f 90       	pop	r0
   1e6ca:	0b be       	out	0x3b, r0	; 59
   1e6cc:	0f 90       	pop	r0
   1e6ce:	0f be       	out	0x3f, r0	; 63
   1e6d0:	0f 90       	pop	r0
   1e6d2:	1f 90       	pop	r1
   1e6d4:	18 95       	reti

0001e6d6 <__vector_36>:

ISR(USART1_RX_vect)
{
   1e6d6:	1f 92       	push	r1
   1e6d8:	0f 92       	push	r0
   1e6da:	0f b6       	in	r0, 0x3f	; 63
   1e6dc:	0f 92       	push	r0
   1e6de:	0b b6       	in	r0, 0x3b	; 59
   1e6e0:	0f 92       	push	r0
   1e6e2:	11 24       	eor	r1, r1
   1e6e4:	2f 93       	push	r18
   1e6e6:	3f 93       	push	r19
   1e6e8:	8f 93       	push	r24
   1e6ea:	9f 93       	push	r25
   1e6ec:	ef 93       	push	r30
   1e6ee:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR1;
   1e6f0:	e0 91 cc 03 	lds	r30, 0x03CC
   1e6f4:	f0 91 cd 03 	lds	r31, 0x03CD
   1e6f8:	80 91 ce 00 	lds	r24, 0x00CE
   1e6fc:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e6fe:	80 91 cc 03 	lds	r24, 0x03CC
   1e702:	90 91 cd 03 	lds	r25, 0x03CD
   1e706:	01 96       	adiw	r24, 0x01	; 1
   1e708:	90 93 cd 03 	sts	0x03CD, r25
   1e70c:	80 93 cc 03 	sts	0x03CC, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e710:	20 91 cc 03 	lds	r18, 0x03CC
   1e714:	30 91 cd 03 	lds	r19, 0x03CD
   1e718:	80 91 d2 03 	lds	r24, 0x03D2
   1e71c:	90 91 d3 03 	lds	r25, 0x03D3
   1e720:	28 17       	cp	r18, r24
   1e722:	39 07       	cpc	r19, r25
   1e724:	41 f4       	brne	.+16     	; 0x1e736 <__vector_36+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e726:	80 91 d0 03 	lds	r24, 0x03D0
   1e72a:	90 91 d1 03 	lds	r25, 0x03D1
   1e72e:	90 93 cd 03 	sts	0x03CD, r25
   1e732:	80 93 cc 03 	sts	0x03CC, r24
	uart_fifo_rx.bytes_used ++;
   1e736:	80 91 cb 03 	lds	r24, 0x03CB
   1e73a:	8f 5f       	subi	r24, 0xFF	; 255
   1e73c:	80 93 cb 03 	sts	0x03CB, r24
}
   1e740:	ff 91       	pop	r31
   1e742:	ef 91       	pop	r30
   1e744:	9f 91       	pop	r25
   1e746:	8f 91       	pop	r24
   1e748:	3f 91       	pop	r19
   1e74a:	2f 91       	pop	r18
   1e74c:	0f 90       	pop	r0
   1e74e:	0b be       	out	0x3b, r0	; 59
   1e750:	0f 90       	pop	r0
   1e752:	0f be       	out	0x3f, r0	; 63
   1e754:	0f 90       	pop	r0
   1e756:	1f 90       	pop	r1
   1e758:	18 95       	reti

0001e75a <__vector_51>:

ISR(USART2_RX_vect)
{
   1e75a:	1f 92       	push	r1
   1e75c:	0f 92       	push	r0
   1e75e:	0f b6       	in	r0, 0x3f	; 63
   1e760:	0f 92       	push	r0
   1e762:	0b b6       	in	r0, 0x3b	; 59
   1e764:	0f 92       	push	r0
   1e766:	11 24       	eor	r1, r1
   1e768:	2f 93       	push	r18
   1e76a:	3f 93       	push	r19
   1e76c:	8f 93       	push	r24
   1e76e:	9f 93       	push	r25
   1e770:	ef 93       	push	r30
   1e772:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR2;
   1e774:	e0 91 cc 03 	lds	r30, 0x03CC
   1e778:	f0 91 cd 03 	lds	r31, 0x03CD
   1e77c:	80 91 d6 00 	lds	r24, 0x00D6
   1e780:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e782:	80 91 cc 03 	lds	r24, 0x03CC
   1e786:	90 91 cd 03 	lds	r25, 0x03CD
   1e78a:	01 96       	adiw	r24, 0x01	; 1
   1e78c:	90 93 cd 03 	sts	0x03CD, r25
   1e790:	80 93 cc 03 	sts	0x03CC, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e794:	20 91 cc 03 	lds	r18, 0x03CC
   1e798:	30 91 cd 03 	lds	r19, 0x03CD
   1e79c:	80 91 d2 03 	lds	r24, 0x03D2
   1e7a0:	90 91 d3 03 	lds	r25, 0x03D3
   1e7a4:	28 17       	cp	r18, r24
   1e7a6:	39 07       	cpc	r19, r25
   1e7a8:	41 f4       	brne	.+16     	; 0x1e7ba <__vector_51+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e7aa:	80 91 d0 03 	lds	r24, 0x03D0
   1e7ae:	90 91 d1 03 	lds	r25, 0x03D1
   1e7b2:	90 93 cd 03 	sts	0x03CD, r25
   1e7b6:	80 93 cc 03 	sts	0x03CC, r24
	uart_fifo_rx.bytes_used ++;
   1e7ba:	80 91 cb 03 	lds	r24, 0x03CB
   1e7be:	8f 5f       	subi	r24, 0xFF	; 255
   1e7c0:	80 93 cb 03 	sts	0x03CB, r24
}
   1e7c4:	ff 91       	pop	r31
   1e7c6:	ef 91       	pop	r30
   1e7c8:	9f 91       	pop	r25
   1e7ca:	8f 91       	pop	r24
   1e7cc:	3f 91       	pop	r19
   1e7ce:	2f 91       	pop	r18
   1e7d0:	0f 90       	pop	r0
   1e7d2:	0b be       	out	0x3b, r0	; 59
   1e7d4:	0f 90       	pop	r0
   1e7d6:	0f be       	out	0x3f, r0	; 63
   1e7d8:	0f 90       	pop	r0
   1e7da:	1f 90       	pop	r1
   1e7dc:	18 95       	reti

0001e7de <__vector_54>:

ISR(USART3_RX_vect)
{
   1e7de:	1f 92       	push	r1
   1e7e0:	0f 92       	push	r0
   1e7e2:	0f b6       	in	r0, 0x3f	; 63
   1e7e4:	0f 92       	push	r0
   1e7e6:	0b b6       	in	r0, 0x3b	; 59
   1e7e8:	0f 92       	push	r0
   1e7ea:	11 24       	eor	r1, r1
   1e7ec:	2f 93       	push	r18
   1e7ee:	3f 93       	push	r19
   1e7f0:	8f 93       	push	r24
   1e7f2:	9f 93       	push	r25
   1e7f4:	ef 93       	push	r30
   1e7f6:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR3;
   1e7f8:	e0 91 cc 03 	lds	r30, 0x03CC
   1e7fc:	f0 91 cd 03 	lds	r31, 0x03CD
   1e800:	80 91 36 01 	lds	r24, 0x0136
   1e804:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e806:	80 91 cc 03 	lds	r24, 0x03CC
   1e80a:	90 91 cd 03 	lds	r25, 0x03CD
   1e80e:	01 96       	adiw	r24, 0x01	; 1
   1e810:	90 93 cd 03 	sts	0x03CD, r25
   1e814:	80 93 cc 03 	sts	0x03CC, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e818:	20 91 cc 03 	lds	r18, 0x03CC
   1e81c:	30 91 cd 03 	lds	r19, 0x03CD
   1e820:	80 91 d2 03 	lds	r24, 0x03D2
   1e824:	90 91 d3 03 	lds	r25, 0x03D3
   1e828:	28 17       	cp	r18, r24
   1e82a:	39 07       	cpc	r19, r25
   1e82c:	41 f4       	brne	.+16     	; 0x1e83e <__vector_54+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e82e:	80 91 d0 03 	lds	r24, 0x03D0
   1e832:	90 91 d1 03 	lds	r25, 0x03D1
   1e836:	90 93 cd 03 	sts	0x03CD, r25
   1e83a:	80 93 cc 03 	sts	0x03CC, r24
	uart_fifo_rx.bytes_used ++;
   1e83e:	80 91 cb 03 	lds	r24, 0x03CB
   1e842:	8f 5f       	subi	r24, 0xFF	; 255
   1e844:	80 93 cb 03 	sts	0x03CB, r24
}
   1e848:	ff 91       	pop	r31
   1e84a:	ef 91       	pop	r30
   1e84c:	9f 91       	pop	r25
   1e84e:	8f 91       	pop	r24
   1e850:	3f 91       	pop	r19
   1e852:	2f 91       	pop	r18
   1e854:	0f 90       	pop	r0
   1e856:	0b be       	out	0x3b, r0	; 59
   1e858:	0f 90       	pop	r0
   1e85a:	0f be       	out	0x3f, r0	; 63
   1e85c:	0f 90       	pop	r0
   1e85e:	1f 90       	pop	r1
   1e860:	18 95       	reti

0001e862 <__vector_26>:

ISR(USART0_UDRE_vect)
{
   1e862:	1f 92       	push	r1
   1e864:	0f 92       	push	r0
   1e866:	0f b6       	in	r0, 0x3f	; 63
   1e868:	0f 92       	push	r0
   1e86a:	0b b6       	in	r0, 0x3b	; 59
   1e86c:	0f 92       	push	r0
   1e86e:	11 24       	eor	r1, r1
   1e870:	2f 93       	push	r18
   1e872:	3f 93       	push	r19
   1e874:	8f 93       	push	r24
   1e876:	9f 93       	push	r25
   1e878:	ef 93       	push	r30
   1e87a:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1e87c:	80 91 d6 04 	lds	r24, 0x04D6
   1e880:	88 23       	and	r24, r24
   1e882:	31 f4       	brne	.+12     	; 0x1e890 <__vector_26+0x2e>
		UCSR0B &= ~_BV(UDRIE0);			// disable tx interrupt
   1e884:	80 91 c1 00 	lds	r24, 0x00C1
   1e888:	8f 7d       	andi	r24, 0xDF	; 223
   1e88a:	80 93 c1 00 	sts	0x00C1, r24
   1e88e:	2d c0       	rjmp	.+90     	; 0x1e8ea <__vector_26+0x88>
	else
	{
		UDR0=*((char*)uart_fifo_tx.tail_ptr);
   1e890:	e0 91 d9 04 	lds	r30, 0x04D9
   1e894:	f0 91 da 04 	lds	r31, 0x04DA
   1e898:	80 81       	ld	r24, Z
   1e89a:	80 93 c6 00 	sts	0x00C6, r24
		uart_fifo_tx.tail_ptr++;	
   1e89e:	80 91 d9 04 	lds	r24, 0x04D9
   1e8a2:	90 91 da 04 	lds	r25, 0x04DA
   1e8a6:	01 96       	adiw	r24, 0x01	; 1
   1e8a8:	90 93 da 04 	sts	0x04DA, r25
   1e8ac:	80 93 d9 04 	sts	0x04D9, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1e8b0:	20 91 d9 04 	lds	r18, 0x04D9
   1e8b4:	30 91 da 04 	lds	r19, 0x04DA
   1e8b8:	80 91 dd 04 	lds	r24, 0x04DD
   1e8bc:	90 91 de 04 	lds	r25, 0x04DE
   1e8c0:	28 17       	cp	r18, r24
   1e8c2:	39 07       	cpc	r19, r25
   1e8c4:	41 f4       	brne	.+16     	; 0x1e8d6 <__vector_26+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1e8c6:	80 91 db 04 	lds	r24, 0x04DB
   1e8ca:	90 91 dc 04 	lds	r25, 0x04DC
   1e8ce:	90 93 da 04 	sts	0x04DA, r25
   1e8d2:	80 93 d9 04 	sts	0x04D9, r24
		
		uart_fifo_tx.bytes_free ++;
   1e8d6:	80 91 d5 04 	lds	r24, 0x04D5
   1e8da:	8f 5f       	subi	r24, 0xFF	; 255
   1e8dc:	80 93 d5 04 	sts	0x04D5, r24
		uart_fifo_tx.bytes_used --;
   1e8e0:	80 91 d6 04 	lds	r24, 0x04D6
   1e8e4:	81 50       	subi	r24, 0x01	; 1
   1e8e6:	80 93 d6 04 	sts	0x04D6, r24
	};
}
   1e8ea:	ff 91       	pop	r31
   1e8ec:	ef 91       	pop	r30
   1e8ee:	9f 91       	pop	r25
   1e8f0:	8f 91       	pop	r24
   1e8f2:	3f 91       	pop	r19
   1e8f4:	2f 91       	pop	r18
   1e8f6:	0f 90       	pop	r0
   1e8f8:	0b be       	out	0x3b, r0	; 59
   1e8fa:	0f 90       	pop	r0
   1e8fc:	0f be       	out	0x3f, r0	; 63
   1e8fe:	0f 90       	pop	r0
   1e900:	1f 90       	pop	r1
   1e902:	18 95       	reti

0001e904 <__vector_37>:

ISR(USART1_UDRE_vect)
{
   1e904:	1f 92       	push	r1
   1e906:	0f 92       	push	r0
   1e908:	0f b6       	in	r0, 0x3f	; 63
   1e90a:	0f 92       	push	r0
   1e90c:	0b b6       	in	r0, 0x3b	; 59
   1e90e:	0f 92       	push	r0
   1e910:	11 24       	eor	r1, r1
   1e912:	2f 93       	push	r18
   1e914:	3f 93       	push	r19
   1e916:	8f 93       	push	r24
   1e918:	9f 93       	push	r25
   1e91a:	ef 93       	push	r30
   1e91c:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1e91e:	80 91 d6 04 	lds	r24, 0x04D6
   1e922:	88 23       	and	r24, r24
   1e924:	31 f4       	brne	.+12     	; 0x1e932 <__vector_37+0x2e>
		UCSR1B &= ~_BV(UDRIE1);			// disable tx interrupt
   1e926:	80 91 c9 00 	lds	r24, 0x00C9
   1e92a:	8f 7d       	andi	r24, 0xDF	; 223
   1e92c:	80 93 c9 00 	sts	0x00C9, r24
   1e930:	2d c0       	rjmp	.+90     	; 0x1e98c <__vector_37+0x88>
	else
	{
		UDR1=*((char*)uart_fifo_tx.tail_ptr);
   1e932:	e0 91 d9 04 	lds	r30, 0x04D9
   1e936:	f0 91 da 04 	lds	r31, 0x04DA
   1e93a:	80 81       	ld	r24, Z
   1e93c:	80 93 ce 00 	sts	0x00CE, r24
		uart_fifo_tx.tail_ptr++;
   1e940:	80 91 d9 04 	lds	r24, 0x04D9
   1e944:	90 91 da 04 	lds	r25, 0x04DA
   1e948:	01 96       	adiw	r24, 0x01	; 1
   1e94a:	90 93 da 04 	sts	0x04DA, r25
   1e94e:	80 93 d9 04 	sts	0x04D9, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1e952:	20 91 d9 04 	lds	r18, 0x04D9
   1e956:	30 91 da 04 	lds	r19, 0x04DA
   1e95a:	80 91 dd 04 	lds	r24, 0x04DD
   1e95e:	90 91 de 04 	lds	r25, 0x04DE
   1e962:	28 17       	cp	r18, r24
   1e964:	39 07       	cpc	r19, r25
   1e966:	41 f4       	brne	.+16     	; 0x1e978 <__vector_37+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1e968:	80 91 db 04 	lds	r24, 0x04DB
   1e96c:	90 91 dc 04 	lds	r25, 0x04DC
   1e970:	90 93 da 04 	sts	0x04DA, r25
   1e974:	80 93 d9 04 	sts	0x04D9, r24
		
		uart_fifo_tx.bytes_free ++;
   1e978:	80 91 d5 04 	lds	r24, 0x04D5
   1e97c:	8f 5f       	subi	r24, 0xFF	; 255
   1e97e:	80 93 d5 04 	sts	0x04D5, r24
		uart_fifo_tx.bytes_used --;
   1e982:	80 91 d6 04 	lds	r24, 0x04D6
   1e986:	81 50       	subi	r24, 0x01	; 1
   1e988:	80 93 d6 04 	sts	0x04D6, r24
	};
}
   1e98c:	ff 91       	pop	r31
   1e98e:	ef 91       	pop	r30
   1e990:	9f 91       	pop	r25
   1e992:	8f 91       	pop	r24
   1e994:	3f 91       	pop	r19
   1e996:	2f 91       	pop	r18
   1e998:	0f 90       	pop	r0
   1e99a:	0b be       	out	0x3b, r0	; 59
   1e99c:	0f 90       	pop	r0
   1e99e:	0f be       	out	0x3f, r0	; 63
   1e9a0:	0f 90       	pop	r0
   1e9a2:	1f 90       	pop	r1
   1e9a4:	18 95       	reti

0001e9a6 <__vector_52>:

ISR(USART2_UDRE_vect)
{
   1e9a6:	1f 92       	push	r1
   1e9a8:	0f 92       	push	r0
   1e9aa:	0f b6       	in	r0, 0x3f	; 63
   1e9ac:	0f 92       	push	r0
   1e9ae:	0b b6       	in	r0, 0x3b	; 59
   1e9b0:	0f 92       	push	r0
   1e9b2:	11 24       	eor	r1, r1
   1e9b4:	2f 93       	push	r18
   1e9b6:	3f 93       	push	r19
   1e9b8:	8f 93       	push	r24
   1e9ba:	9f 93       	push	r25
   1e9bc:	ef 93       	push	r30
   1e9be:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1e9c0:	80 91 d6 04 	lds	r24, 0x04D6
   1e9c4:	88 23       	and	r24, r24
   1e9c6:	31 f4       	brne	.+12     	; 0x1e9d4 <__vector_52+0x2e>
		UCSR2B &= ~_BV(UDRIE2);			// disable tx interrupt
   1e9c8:	80 91 d1 00 	lds	r24, 0x00D1
   1e9cc:	8f 7d       	andi	r24, 0xDF	; 223
   1e9ce:	80 93 d1 00 	sts	0x00D1, r24
   1e9d2:	2d c0       	rjmp	.+90     	; 0x1ea2e <__vector_52+0x88>
	else
	{
		UDR2=*((char*)uart_fifo_tx.tail_ptr);
   1e9d4:	e0 91 d9 04 	lds	r30, 0x04D9
   1e9d8:	f0 91 da 04 	lds	r31, 0x04DA
   1e9dc:	80 81       	ld	r24, Z
   1e9de:	80 93 d6 00 	sts	0x00D6, r24
		uart_fifo_tx.tail_ptr++;
   1e9e2:	80 91 d9 04 	lds	r24, 0x04D9
   1e9e6:	90 91 da 04 	lds	r25, 0x04DA
   1e9ea:	01 96       	adiw	r24, 0x01	; 1
   1e9ec:	90 93 da 04 	sts	0x04DA, r25
   1e9f0:	80 93 d9 04 	sts	0x04D9, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1e9f4:	20 91 d9 04 	lds	r18, 0x04D9
   1e9f8:	30 91 da 04 	lds	r19, 0x04DA
   1e9fc:	80 91 dd 04 	lds	r24, 0x04DD
   1ea00:	90 91 de 04 	lds	r25, 0x04DE
   1ea04:	28 17       	cp	r18, r24
   1ea06:	39 07       	cpc	r19, r25
   1ea08:	41 f4       	brne	.+16     	; 0x1ea1a <__vector_52+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1ea0a:	80 91 db 04 	lds	r24, 0x04DB
   1ea0e:	90 91 dc 04 	lds	r25, 0x04DC
   1ea12:	90 93 da 04 	sts	0x04DA, r25
   1ea16:	80 93 d9 04 	sts	0x04D9, r24
		
		uart_fifo_tx.bytes_free ++;
   1ea1a:	80 91 d5 04 	lds	r24, 0x04D5
   1ea1e:	8f 5f       	subi	r24, 0xFF	; 255
   1ea20:	80 93 d5 04 	sts	0x04D5, r24
		uart_fifo_tx.bytes_used --;
   1ea24:	80 91 d6 04 	lds	r24, 0x04D6
   1ea28:	81 50       	subi	r24, 0x01	; 1
   1ea2a:	80 93 d6 04 	sts	0x04D6, r24
	};
}
   1ea2e:	ff 91       	pop	r31
   1ea30:	ef 91       	pop	r30
   1ea32:	9f 91       	pop	r25
   1ea34:	8f 91       	pop	r24
   1ea36:	3f 91       	pop	r19
   1ea38:	2f 91       	pop	r18
   1ea3a:	0f 90       	pop	r0
   1ea3c:	0b be       	out	0x3b, r0	; 59
   1ea3e:	0f 90       	pop	r0
   1ea40:	0f be       	out	0x3f, r0	; 63
   1ea42:	0f 90       	pop	r0
   1ea44:	1f 90       	pop	r1
   1ea46:	18 95       	reti

0001ea48 <__vector_55>:

ISR(USART3_UDRE_vect)
{
   1ea48:	1f 92       	push	r1
   1ea4a:	0f 92       	push	r0
   1ea4c:	0f b6       	in	r0, 0x3f	; 63
   1ea4e:	0f 92       	push	r0
   1ea50:	0b b6       	in	r0, 0x3b	; 59
   1ea52:	0f 92       	push	r0
   1ea54:	11 24       	eor	r1, r1
   1ea56:	2f 93       	push	r18
   1ea58:	3f 93       	push	r19
   1ea5a:	8f 93       	push	r24
   1ea5c:	9f 93       	push	r25
   1ea5e:	ef 93       	push	r30
   1ea60:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1ea62:	80 91 d6 04 	lds	r24, 0x04D6
   1ea66:	88 23       	and	r24, r24
   1ea68:	31 f4       	brne	.+12     	; 0x1ea76 <__vector_55+0x2e>
		UCSR3B &= ~_BV(UDRIE3);			// disable tx interrupt
   1ea6a:	80 91 31 01 	lds	r24, 0x0131
   1ea6e:	8f 7d       	andi	r24, 0xDF	; 223
   1ea70:	80 93 31 01 	sts	0x0131, r24
   1ea74:	2d c0       	rjmp	.+90     	; 0x1ead0 <__vector_55+0x88>
	else
	{
		UDR3=*((char*)uart_fifo_tx.tail_ptr);
   1ea76:	e0 91 d9 04 	lds	r30, 0x04D9
   1ea7a:	f0 91 da 04 	lds	r31, 0x04DA
   1ea7e:	80 81       	ld	r24, Z
   1ea80:	80 93 36 01 	sts	0x0136, r24
		uart_fifo_tx.tail_ptr++;
   1ea84:	80 91 d9 04 	lds	r24, 0x04D9
   1ea88:	90 91 da 04 	lds	r25, 0x04DA
   1ea8c:	01 96       	adiw	r24, 0x01	; 1
   1ea8e:	90 93 da 04 	sts	0x04DA, r25
   1ea92:	80 93 d9 04 	sts	0x04D9, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1ea96:	20 91 d9 04 	lds	r18, 0x04D9
   1ea9a:	30 91 da 04 	lds	r19, 0x04DA
   1ea9e:	80 91 dd 04 	lds	r24, 0x04DD
   1eaa2:	90 91 de 04 	lds	r25, 0x04DE
   1eaa6:	28 17       	cp	r18, r24
   1eaa8:	39 07       	cpc	r19, r25
   1eaaa:	41 f4       	brne	.+16     	; 0x1eabc <__vector_55+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1eaac:	80 91 db 04 	lds	r24, 0x04DB
   1eab0:	90 91 dc 04 	lds	r25, 0x04DC
   1eab4:	90 93 da 04 	sts	0x04DA, r25
   1eab8:	80 93 d9 04 	sts	0x04D9, r24
		
		uart_fifo_tx.bytes_free ++;
   1eabc:	80 91 d5 04 	lds	r24, 0x04D5
   1eac0:	8f 5f       	subi	r24, 0xFF	; 255
   1eac2:	80 93 d5 04 	sts	0x04D5, r24
		uart_fifo_tx.bytes_used --;
   1eac6:	80 91 d6 04 	lds	r24, 0x04D6
   1eaca:	81 50       	subi	r24, 0x01	; 1
   1eacc:	80 93 d6 04 	sts	0x04D6, r24
	};
   1ead0:	ff 91       	pop	r31
   1ead2:	ef 91       	pop	r30
   1ead4:	9f 91       	pop	r25
   1ead6:	8f 91       	pop	r24
   1ead8:	3f 91       	pop	r19
   1eada:	2f 91       	pop	r18
   1eadc:	0f 90       	pop	r0
   1eade:	0b be       	out	0x3b, r0	; 59
   1eae0:	0f 90       	pop	r0
   1eae2:	0f be       	out	0x3f, r0	; 63
   1eae4:	0f 90       	pop	r0
   1eae6:	1f 90       	pop	r1
   1eae8:	18 95       	reti

0001eaea <uart_init>:

	struct fifo_control uart_fifo_tx;
	struct fifo_control uart_fifo_rx;

char uart_init(void)
{
   1eaea:	cf 93       	push	r28
   1eaec:	df 93       	push	r29
	int tempint;
	char found=FALSE;

	//Uart0 already configured? (means bootloader called from main app)
	if(UCSR0B & _BV(RXEN0))
   1eaee:	80 91 c1 00 	lds	r24, 0x00C1
   1eaf2:	84 ff       	sbrs	r24, 4
   1eaf4:	0c c0       	rjmp	.+24     	; 0x1eb0e <uart_init+0x24>
	{
		UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
   1eaf6:	80 91 c1 00 	lds	r24, 0x00C1
   1eafa:	80 68       	ori	r24, 0x80	; 128
   1eafc:	80 93 c1 00 	sts	0x00C1, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart0_isrtx_enable, uart_fifo_data_tx);
   1eb00:	85 ed       	ldi	r24, 0xD5	; 213
   1eb02:	94 e0       	ldi	r25, 0x04	; 4
   1eb04:	60 e4       	ldi	r22, 0x40	; 64
   1eb06:	70 e0       	ldi	r23, 0x00	; 0
   1eb08:	41 e1       	ldi	r20, 0x11	; 17
   1eb0a:	53 ef       	ldi	r21, 0xF3	; 243
   1eb0c:	1f c0       	rjmp	.+62     	; 0x1eb4c <uart_init+0x62>
		fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
		found=TRUE;
	}
	else if(UCSR1B & _BV(RXEN1))
   1eb0e:	80 91 c9 00 	lds	r24, 0x00C9
   1eb12:	84 ff       	sbrs	r24, 4
   1eb14:	0c c0       	rjmp	.+24     	; 0x1eb2e <uart_init+0x44>
	{
		UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
   1eb16:	80 91 c9 00 	lds	r24, 0x00C9
   1eb1a:	80 68       	ori	r24, 0x80	; 128
   1eb1c:	80 93 c9 00 	sts	0x00C9, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart1_isrtx_enable, uart_fifo_data_tx);
   1eb20:	85 ed       	ldi	r24, 0xD5	; 213
   1eb22:	94 e0       	ldi	r25, 0x04	; 4
   1eb24:	60 e4       	ldi	r22, 0x40	; 64
   1eb26:	70 e0       	ldi	r23, 0x00	; 0
   1eb28:	47 e1       	ldi	r20, 0x17	; 23
   1eb2a:	53 ef       	ldi	r21, 0xF3	; 243
   1eb2c:	0f c0       	rjmp	.+30     	; 0x1eb4c <uart_init+0x62>
		fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
		found=TRUE;
	}
	else if(UCSR2B & _BV(RXEN2))
   1eb2e:	80 91 d1 00 	lds	r24, 0x00D1
   1eb32:	84 ff       	sbrs	r24, 4
   1eb34:	1b c0       	rjmp	.+54     	; 0x1eb6c <uart_init+0x82>
	{
		UCSR2B |= _BV(RXCIE2);	// enable rx interrupt (writes to fifo)
   1eb36:	80 91 d1 00 	lds	r24, 0x00D1
   1eb3a:	80 68       	ori	r24, 0x80	; 128
   1eb3c:	80 93 d1 00 	sts	0x00D1, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart2_isrtx_enable, uart_fifo_data_tx);
   1eb40:	85 ed       	ldi	r24, 0xD5	; 213
   1eb42:	94 e0       	ldi	r25, 0x04	; 4
   1eb44:	60 e4       	ldi	r22, 0x40	; 64
   1eb46:	70 e0       	ldi	r23, 0x00	; 0
   1eb48:	4d e1       	ldi	r20, 0x1D	; 29
   1eb4a:	53 ef       	ldi	r21, 0xF3	; 243
   1eb4c:	21 ee       	ldi	r18, 0xE1	; 225
   1eb4e:	34 e0       	ldi	r19, 0x04	; 4
   1eb50:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
		fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1eb54:	8a ec       	ldi	r24, 0xCA	; 202
   1eb56:	93 e0       	ldi	r25, 0x03	; 3
   1eb58:	6f ef       	ldi	r22, 0xFF	; 255
   1eb5a:	70 e0       	ldi	r23, 0x00	; 0
   1eb5c:	40 e0       	ldi	r20, 0x00	; 0
   1eb5e:	50 e0       	ldi	r21, 0x00	; 0
   1eb60:	26 ed       	ldi	r18, 0xD6	; 214
   1eb62:	33 e0       	ldi	r19, 0x03	; 3
   1eb64:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
   1eb68:	91 e0       	ldi	r25, 0x01	; 1
   1eb6a:	dd c1       	rjmp	.+954    	; 0x1ef26 <uart_init+0x43c>
		found=TRUE;
	}
	else if(UCSR3B & _BV(RXEN3))
   1eb6c:	80 91 31 01 	lds	r24, 0x0131
   1eb70:	84 ff       	sbrs	r24, 4
   1eb72:	0c c0       	rjmp	.+24     	; 0x1eb8c <uart_init+0xa2>
	{
		UCSR3B |= _BV(RXCIE3);	// enable rx interrupt (writes to fifo)
   1eb74:	80 91 31 01 	lds	r24, 0x0131
   1eb78:	80 68       	ori	r24, 0x80	; 128
   1eb7a:	80 93 31 01 	sts	0x0131, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart3_isrtx_enable, uart_fifo_data_tx);
   1eb7e:	85 ed       	ldi	r24, 0xD5	; 213
   1eb80:	94 e0       	ldi	r25, 0x04	; 4
   1eb82:	60 e4       	ldi	r22, 0x40	; 64
   1eb84:	70 e0       	ldi	r23, 0x00	; 0
   1eb86:	43 e2       	ldi	r20, 0x23	; 35
   1eb88:	53 ef       	ldi	r21, 0xF3	; 243
   1eb8a:	e0 cf       	rjmp	.-64     	; 0x1eb4c <uart_init+0x62>
		found=TRUE;
	}
	else 
	{
		// Setup Uart0
		DDRE &=~_BV(PE0);		// UTX0 input
   1eb8c:	68 98       	cbi	0x0d, 0	; 13
		UCSR0B |= _BV(RXEN0);	// enable rx
   1eb8e:	80 91 c1 00 	lds	r24, 0x00C1
   1eb92:	80 61       	ori	r24, 0x10	; 16
   1eb94:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
   1eb98:	80 91 c1 00 	lds	r24, 0x00C1
   1eb9c:	80 68       	ori	r24, 0x80	; 128
   1eb9e:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B &= ~_BV(UDRIE0);	// disable tx interrupt (for now)	
   1eba2:	80 91 c1 00 	lds	r24, 0x00C1
   1eba6:	8f 7d       	andi	r24, 0xDF	; 223
   1eba8:	80 93 c1 00 	sts	0x00C1, r24
		
		// Setup Uart1
		DDRD &=~_BV(PD2);		// URX1 input
   1ebac:	52 98       	cbi	0x0a, 2	; 10
		UCSR1B |= _BV(RXEN1);	// enable rx
   1ebae:	80 91 c9 00 	lds	r24, 0x00C9
   1ebb2:	80 61       	ori	r24, 0x10	; 16
   1ebb4:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
   1ebb8:	80 91 c9 00 	lds	r24, 0x00C9
   1ebbc:	80 68       	ori	r24, 0x80	; 128
   1ebbe:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1B &= ~_BV(UDRIE1);	// disable tx interrupt (for now)	
   1ebc2:	80 91 c9 00 	lds	r24, 0x00C9
   1ebc6:	8f 7d       	andi	r24, 0xDF	; 223
   1ebc8:	80 93 c9 00 	sts	0x00C9, r24
		
		// Setup Uart2
		DDRH &=~_BV(PH0);		// UTX2 input
   1ebcc:	80 91 01 01 	lds	r24, 0x0101
   1ebd0:	8e 7f       	andi	r24, 0xFE	; 254
   1ebd2:	80 93 01 01 	sts	0x0101, r24
		UCSR2B |= _BV(RXEN2);	// enable rx
   1ebd6:	80 91 d1 00 	lds	r24, 0x00D1
   1ebda:	80 61       	ori	r24, 0x10	; 16
   1ebdc:	80 93 d1 00 	sts	0x00D1, r24
		UCSR2B |= _BV(RXCIE2);	// enable rx interrupt (writes to fifo)
   1ebe0:	80 91 d1 00 	lds	r24, 0x00D1
   1ebe4:	80 68       	ori	r24, 0x80	; 128
   1ebe6:	80 93 d1 00 	sts	0x00D1, r24
		UCSR2B &= ~_BV(UDRIE2);	// disable tx interrupt (for now)	
   1ebea:	80 91 d1 00 	lds	r24, 0x00D1
   1ebee:	8f 7d       	andi	r24, 0xDF	; 223
   1ebf0:	80 93 d1 00 	sts	0x00D1, r24
		
		// Setup Uart3
		DDRJ &=~_BV(PJ0);		// URX3 input
   1ebf4:	80 91 04 01 	lds	r24, 0x0104
   1ebf8:	8e 7f       	andi	r24, 0xFE	; 254
   1ebfa:	80 93 04 01 	sts	0x0104, r24
		UCSR3B |= _BV(RXEN3);	// enable rx
   1ebfe:	80 91 31 01 	lds	r24, 0x0131
   1ec02:	80 61       	ori	r24, 0x10	; 16
   1ec04:	80 93 31 01 	sts	0x0131, r24
		UCSR3B |= _BV(RXCIE3);	// enable rx interrupt (writes to fifo)
   1ec08:	80 91 31 01 	lds	r24, 0x0131
   1ec0c:	80 68       	ori	r24, 0x80	; 128
   1ec0e:	80 93 31 01 	sts	0x0131, r24
		UCSR3B &= ~_BV(UDRIE3);	// disable tx interrupt (for now)	
   1ec12:	80 91 31 01 	lds	r24, 0x0131
   1ec16:	8f 7d       	andi	r24, 0xDF	; 223
   1ec18:	80 93 31 01 	sts	0x0131, r24
		
		#define BAUD_TOL	5
		#define BAUD		UART0BAUD
		#include <util/setbaud.h>
		UBRR0H = (char)(UBRR_VALUE>>8);
   1ec1c:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (char)(UBRR_VALUE);
   1ec20:	97 e6       	ldi	r25, 0x67	; 103
   1ec22:	90 93 c4 00 	sts	0x00C4, r25
		#if USE_2X
			UCSR0A |= _BV(U2X0);
		#else
			UCSR0A &= _BV(U2X0);
   1ec26:	80 91 c0 00 	lds	r24, 0x00C0
   1ec2a:	82 70       	andi	r24, 0x02	; 2
   1ec2c:	80 93 c0 00 	sts	0x00C0, r24
		#endif
		
		#undef	BAUD
		#define	BAUD		UART1BAUD
		#include <util/setbaud.h>
		UBRR1H = (char)(UBRR_VALUE>>8);
   1ec30:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L = (char)(UBRR_VALUE);
   1ec34:	90 93 cc 00 	sts	0x00CC, r25
		#if USE_2X
			UCSR1A |= _BV(U2X1);
		#else
			UCSR1A &= _BV(U2X1);
   1ec38:	80 91 c8 00 	lds	r24, 0x00C8
   1ec3c:	82 70       	andi	r24, 0x02	; 2
   1ec3e:	80 93 c8 00 	sts	0x00C8, r24
		#endif
		
		#undef	BAUD
		#define	BAUD		UART2BAUD
		#include <util/setbaud.h>
		UBRR2H = (char)(UBRR_VALUE>>8);
   1ec42:	10 92 d5 00 	sts	0x00D5, r1
		UBRR2L = (char)(UBRR_VALUE);
   1ec46:	90 93 d4 00 	sts	0x00D4, r25
		#if USE_2X
			UCSR2A |= _BV(U2X2);
		#else
			UCSR2A &= _BV(U2X2);
   1ec4a:	80 91 d0 00 	lds	r24, 0x00D0
   1ec4e:	82 70       	andi	r24, 0x02	; 2
   1ec50:	80 93 d0 00 	sts	0x00D0, r24
		#endif
		
		#undef	BAUD
		#define	BAUD		UART3BAUD
		#include <util/setbaud.h>
		UBRR3H = (char)(UBRR_VALUE>>8);
   1ec54:	10 92 35 01 	sts	0x0135, r1
		UBRR3L = (char)(UBRR_VALUE);
   1ec58:	90 93 34 01 	sts	0x0134, r25
		#if USE_2X
			UCSR3A |= _BV(U2X3);
		#else
			UCSR3A &= _BV(U2X3);
   1ec5c:	80 91 30 01 	lds	r24, 0x0130
   1ec60:	82 70       	andi	r24, 0x02	; 2
   1ec62:	80 93 30 01 	sts	0x0130, r24
   1ec66:	88 ec       	ldi	r24, 0xC8	; 200
   1ec68:	90 e0       	ldi	r25, 0x00	; 0
   1ec6a:	40 e0       	ldi	r20, 0x00	; 0
   1ec6c:	c0 ea       	ldi	r28, 0xA0	; 160
   1ec6e:	df e0       	ldi	r29, 0x0F	; 15
   1ec70:	30 c1       	rjmp	.+608    	; 0x1eed2 <uart_init+0x3e8>
		#endif
		
		tempint=BOOTWINDOW;
		while(tempint--)
		{
			if(UCSR0A & _BV(RXC0))
   1ec72:	80 91 c0 00 	lds	r24, 0x00C0
   1ec76:	87 ff       	sbrs	r24, 7
   1ec78:	45 c0       	rjmp	.+138    	; 0x1ed04 <uart_init+0x21a>
			{
				if(UDR0==' ')
   1ec7a:	80 91 c6 00 	lds	r24, 0x00C6
   1ec7e:	80 32       	cpi	r24, 0x20	; 32
   1ec80:	09 f0       	breq	.+2      	; 0x1ec84 <uart_init+0x19a>
   1ec82:	40 c0       	rjmp	.+128    	; 0x1ed04 <uart_init+0x21a>
				{
					UCSR1B &=~_BV(RXEN1);	// disable rx
   1ec84:	80 91 c9 00 	lds	r24, 0x00C9
   1ec88:	8f 7e       	andi	r24, 0xEF	; 239
   1ec8a:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B &=~_BV(RXCIE1);	// disable rx interrupt (writes to fifo)
   1ec8e:	80 91 c9 00 	lds	r24, 0x00C9
   1ec92:	8f 77       	andi	r24, 0x7F	; 127
   1ec94:	80 93 c9 00 	sts	0x00C9, r24
					UCSR2B &=~_BV(RXEN2);	// disable rx
   1ec98:	80 91 d1 00 	lds	r24, 0x00D1
   1ec9c:	8f 7e       	andi	r24, 0xEF	; 239
   1ec9e:	80 93 d1 00 	sts	0x00D1, r24
					UCSR2B &=~_BV(RXCIE2);	// disable rx interrupt (writes to fifo)
   1eca2:	80 91 d1 00 	lds	r24, 0x00D1
   1eca6:	8f 77       	andi	r24, 0x7F	; 127
   1eca8:	80 93 d1 00 	sts	0x00D1, r24
					UCSR3B &=~_BV(RXEN3);	// disable rx
   1ecac:	80 91 31 01 	lds	r24, 0x0131
   1ecb0:	8f 7e       	andi	r24, 0xEF	; 239
   1ecb2:	80 93 31 01 	sts	0x0131, r24
					UCSR3B &=~_BV(RXCIE3);	// disable rx interrupt (writes to fifo)
   1ecb6:	80 91 31 01 	lds	r24, 0x0131
   1ecba:	8f 77       	andi	r24, 0x7F	; 127
   1ecbc:	80 93 31 01 	sts	0x0131, r24
					
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart0_isrtx_enable, uart_fifo_data_tx);
   1ecc0:	85 ed       	ldi	r24, 0xD5	; 213
   1ecc2:	94 e0       	ldi	r25, 0x04	; 4
   1ecc4:	60 e4       	ldi	r22, 0x40	; 64
   1ecc6:	70 e0       	ldi	r23, 0x00	; 0
   1ecc8:	41 e1       	ldi	r20, 0x11	; 17
   1ecca:	53 ef       	ldi	r21, 0xF3	; 243
   1eccc:	21 ee       	ldi	r18, 0xE1	; 225
   1ecce:	34 e0       	ldi	r19, 0x04	; 4
   1ecd0:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1ecd4:	8a ec       	ldi	r24, 0xCA	; 202
   1ecd6:	93 e0       	ldi	r25, 0x03	; 3
   1ecd8:	6f ef       	ldi	r22, 0xFF	; 255
   1ecda:	70 e0       	ldi	r23, 0x00	; 0
   1ecdc:	40 e0       	ldi	r20, 0x00	; 0
   1ecde:	50 e0       	ldi	r21, 0x00	; 0
   1ece0:	26 ed       	ldi	r18, 0xD6	; 214
   1ece2:	33 e0       	ldi	r19, 0x03	; 3
   1ece4:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					DDRE |=_BV(PE1);		// UTX0 output
   1ece8:	69 9a       	sbi	0x0d, 1	; 13
					UCSR0B |= _BV(TXEN0);	// enable tx
   1ecea:	80 91 c1 00 	lds	r24, 0x00C1
   1ecee:	88 60       	ori	r24, 0x08	; 8
   1ecf0:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B |= _BV(UDRIE0);	// enable tx interrupt
   1ecf4:	80 91 c1 00 	lds	r24, 0x00C1
   1ecf8:	80 62       	ori	r24, 0x20	; 32
   1ecfa:	80 93 c1 00 	sts	0x00C1, r24
   1ecfe:	20 e0       	ldi	r18, 0x00	; 0
   1ed00:	30 e0       	ldi	r19, 0x00	; 0
   1ed02:	41 e0       	ldi	r20, 0x01	; 1
					tempint=0;
					found=TRUE;
				};
			};
			
			if(UCSR1A & _BV(RXC1))
   1ed04:	80 91 c8 00 	lds	r24, 0x00C8
   1ed08:	87 ff       	sbrs	r24, 7
   1ed0a:	45 c0       	rjmp	.+138    	; 0x1ed96 <uart_init+0x2ac>
			{
				if(UDR1==' ')
   1ed0c:	80 91 ce 00 	lds	r24, 0x00CE
   1ed10:	80 32       	cpi	r24, 0x20	; 32
   1ed12:	09 f0       	breq	.+2      	; 0x1ed16 <uart_init+0x22c>
   1ed14:	40 c0       	rjmp	.+128    	; 0x1ed96 <uart_init+0x2ac>
				{
					UCSR0B &=~_BV(RXEN0);	// disable rx
   1ed16:	80 91 c1 00 	lds	r24, 0x00C1
   1ed1a:	8f 7e       	andi	r24, 0xEF	; 239
   1ed1c:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B &=~_BV(RXCIE0);	// disable rx interrupt (writes to fifo)
   1ed20:	80 91 c1 00 	lds	r24, 0x00C1
   1ed24:	8f 77       	andi	r24, 0x7F	; 127
   1ed26:	80 93 c1 00 	sts	0x00C1, r24
					UCSR2B &=~_BV(RXEN2);	// disable rx
   1ed2a:	80 91 d1 00 	lds	r24, 0x00D1
   1ed2e:	8f 7e       	andi	r24, 0xEF	; 239
   1ed30:	80 93 d1 00 	sts	0x00D1, r24
					UCSR2B &=~_BV(RXCIE2);	// disable rx interrupt (writes to fifo)
   1ed34:	80 91 d1 00 	lds	r24, 0x00D1
   1ed38:	8f 77       	andi	r24, 0x7F	; 127
   1ed3a:	80 93 d1 00 	sts	0x00D1, r24
					UCSR3B &=~_BV(RXEN3);	// disable rx
   1ed3e:	80 91 31 01 	lds	r24, 0x0131
   1ed42:	8f 7e       	andi	r24, 0xEF	; 239
   1ed44:	80 93 31 01 	sts	0x0131, r24
					UCSR3B &=~_BV(RXCIE3);	// disable rx interrupt (writes to fifo)
   1ed48:	80 91 31 01 	lds	r24, 0x0131
   1ed4c:	8f 77       	andi	r24, 0x7F	; 127
   1ed4e:	80 93 31 01 	sts	0x0131, r24
					
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart1_isrtx_enable, uart_fifo_data_tx);
   1ed52:	85 ed       	ldi	r24, 0xD5	; 213
   1ed54:	94 e0       	ldi	r25, 0x04	; 4
   1ed56:	60 e4       	ldi	r22, 0x40	; 64
   1ed58:	70 e0       	ldi	r23, 0x00	; 0
   1ed5a:	47 e1       	ldi	r20, 0x17	; 23
   1ed5c:	53 ef       	ldi	r21, 0xF3	; 243
   1ed5e:	21 ee       	ldi	r18, 0xE1	; 225
   1ed60:	34 e0       	ldi	r19, 0x04	; 4
   1ed62:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1ed66:	8a ec       	ldi	r24, 0xCA	; 202
   1ed68:	93 e0       	ldi	r25, 0x03	; 3
   1ed6a:	6f ef       	ldi	r22, 0xFF	; 255
   1ed6c:	70 e0       	ldi	r23, 0x00	; 0
   1ed6e:	40 e0       	ldi	r20, 0x00	; 0
   1ed70:	50 e0       	ldi	r21, 0x00	; 0
   1ed72:	26 ed       	ldi	r18, 0xD6	; 214
   1ed74:	33 e0       	ldi	r19, 0x03	; 3
   1ed76:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					DDRD |=_BV(PD3);		// UTX1 output
   1ed7a:	53 9a       	sbi	0x0a, 3	; 10
					UCSR1B |= _BV(TXEN1);	// enable tx
   1ed7c:	80 91 c9 00 	lds	r24, 0x00C9
   1ed80:	88 60       	ori	r24, 0x08	; 8
   1ed82:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B |= _BV(UDRIE1);	// enable tx interrupt
   1ed86:	80 91 c9 00 	lds	r24, 0x00C9
   1ed8a:	80 62       	ori	r24, 0x20	; 32
   1ed8c:	80 93 c9 00 	sts	0x00C9, r24
   1ed90:	20 e0       	ldi	r18, 0x00	; 0
   1ed92:	30 e0       	ldi	r19, 0x00	; 0
   1ed94:	41 e0       	ldi	r20, 0x01	; 1
					tempint=0;
					found=TRUE;
				};
			};

			if(UCSR2A & _BV(RXC2))
   1ed96:	80 91 d0 00 	lds	r24, 0x00D0
   1ed9a:	87 ff       	sbrs	r24, 7
   1ed9c:	49 c0       	rjmp	.+146    	; 0x1ee30 <uart_init+0x346>
			{
				if(UDR2==' ')
   1ed9e:	80 91 d6 00 	lds	r24, 0x00D6
   1eda2:	80 32       	cpi	r24, 0x20	; 32
   1eda4:	09 f0       	breq	.+2      	; 0x1eda8 <uart_init+0x2be>
   1eda6:	44 c0       	rjmp	.+136    	; 0x1ee30 <uart_init+0x346>
				{
					UCSR0B &=~_BV(RXEN0);	// disable rx
   1eda8:	80 91 c1 00 	lds	r24, 0x00C1
   1edac:	8f 7e       	andi	r24, 0xEF	; 239
   1edae:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B &=~_BV(RXCIE0);	// disable rx interrupt (writes to fifo)
   1edb2:	80 91 c1 00 	lds	r24, 0x00C1
   1edb6:	8f 77       	andi	r24, 0x7F	; 127
   1edb8:	80 93 c1 00 	sts	0x00C1, r24
					UCSR1B &=~_BV(RXEN1);	// disable rx
   1edbc:	80 91 c9 00 	lds	r24, 0x00C9
   1edc0:	8f 7e       	andi	r24, 0xEF	; 239
   1edc2:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B &=~_BV(RXCIE1);	// disable rx interrupt (writes to fifo)
   1edc6:	80 91 c9 00 	lds	r24, 0x00C9
   1edca:	8f 77       	andi	r24, 0x7F	; 127
   1edcc:	80 93 c9 00 	sts	0x00C9, r24
					UCSR3B &=~_BV(RXEN3);	// disable rx
   1edd0:	80 91 31 01 	lds	r24, 0x0131
   1edd4:	8f 7e       	andi	r24, 0xEF	; 239
   1edd6:	80 93 31 01 	sts	0x0131, r24
					UCSR3B &=~_BV(RXCIE3);	// disable rx interrupt (writes to fifo)
   1edda:	80 91 31 01 	lds	r24, 0x0131
   1edde:	8f 77       	andi	r24, 0x7F	; 127
   1ede0:	80 93 31 01 	sts	0x0131, r24
					
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart2_isrtx_enable, uart_fifo_data_tx);
   1ede4:	85 ed       	ldi	r24, 0xD5	; 213
   1ede6:	94 e0       	ldi	r25, 0x04	; 4
   1ede8:	60 e4       	ldi	r22, 0x40	; 64
   1edea:	70 e0       	ldi	r23, 0x00	; 0
   1edec:	4d e1       	ldi	r20, 0x1D	; 29
   1edee:	53 ef       	ldi	r21, 0xF3	; 243
   1edf0:	21 ee       	ldi	r18, 0xE1	; 225
   1edf2:	34 e0       	ldi	r19, 0x04	; 4
   1edf4:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1edf8:	8a ec       	ldi	r24, 0xCA	; 202
   1edfa:	93 e0       	ldi	r25, 0x03	; 3
   1edfc:	6f ef       	ldi	r22, 0xFF	; 255
   1edfe:	70 e0       	ldi	r23, 0x00	; 0
   1ee00:	40 e0       	ldi	r20, 0x00	; 0
   1ee02:	50 e0       	ldi	r21, 0x00	; 0
   1ee04:	26 ed       	ldi	r18, 0xD6	; 214
   1ee06:	33 e0       	ldi	r19, 0x03	; 3
   1ee08:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					DDRH |=_BV(PH1);		// UTX2 output
   1ee0c:	80 91 01 01 	lds	r24, 0x0101
   1ee10:	82 60       	ori	r24, 0x02	; 2
   1ee12:	80 93 01 01 	sts	0x0101, r24
					UCSR2B |= _BV(TXEN2);	// enable tx
   1ee16:	80 91 d1 00 	lds	r24, 0x00D1
   1ee1a:	88 60       	ori	r24, 0x08	; 8
   1ee1c:	80 93 d1 00 	sts	0x00D1, r24
					UCSR2B |= _BV(UDRIE2);	// enable tx interrupt
   1ee20:	80 91 d1 00 	lds	r24, 0x00D1
   1ee24:	80 62       	ori	r24, 0x20	; 32
   1ee26:	80 93 d1 00 	sts	0x00D1, r24
   1ee2a:	20 e0       	ldi	r18, 0x00	; 0
   1ee2c:	30 e0       	ldi	r19, 0x00	; 0
   1ee2e:	41 e0       	ldi	r20, 0x01	; 1
					tempint=0;
					found=TRUE;
				};
			};

			if(UCSR3A & _BV(RXC3))
   1ee30:	80 91 30 01 	lds	r24, 0x0130
   1ee34:	87 ff       	sbrs	r24, 7
   1ee36:	49 c0       	rjmp	.+146    	; 0x1eeca <uart_init+0x3e0>
			{
				if(UDR3==' ')
   1ee38:	80 91 36 01 	lds	r24, 0x0136
   1ee3c:	80 32       	cpi	r24, 0x20	; 32
   1ee3e:	09 f0       	breq	.+2      	; 0x1ee42 <uart_init+0x358>
   1ee40:	44 c0       	rjmp	.+136    	; 0x1eeca <uart_init+0x3e0>
				{
					UCSR0B &=~_BV(RXEN0);	// disable rx
   1ee42:	80 91 c1 00 	lds	r24, 0x00C1
   1ee46:	8f 7e       	andi	r24, 0xEF	; 239
   1ee48:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B &=~_BV(RXCIE0);	// disable rx interrupt (writes to fifo)
   1ee4c:	80 91 c1 00 	lds	r24, 0x00C1
   1ee50:	8f 77       	andi	r24, 0x7F	; 127
   1ee52:	80 93 c1 00 	sts	0x00C1, r24
					UCSR1B &=~_BV(RXEN1);	// disable rx
   1ee56:	80 91 c9 00 	lds	r24, 0x00C9
   1ee5a:	8f 7e       	andi	r24, 0xEF	; 239
   1ee5c:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B &=~_BV(RXCIE1);	// disable rx interrupt (writes to fifo)
   1ee60:	80 91 c9 00 	lds	r24, 0x00C9
   1ee64:	8f 77       	andi	r24, 0x7F	; 127
   1ee66:	80 93 c9 00 	sts	0x00C9, r24
					UCSR2B &=~_BV(RXEN2);	// disable rx
   1ee6a:	80 91 d1 00 	lds	r24, 0x00D1
   1ee6e:	8f 7e       	andi	r24, 0xEF	; 239
   1ee70:	80 93 d1 00 	sts	0x00D1, r24
					UCSR2B &=~_BV(RXCIE2);	// disable rx interrupt (writes to fifo)
   1ee74:	80 91 d1 00 	lds	r24, 0x00D1
   1ee78:	8f 77       	andi	r24, 0x7F	; 127
   1ee7a:	80 93 d1 00 	sts	0x00D1, r24
					
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart3_isrtx_enable, uart_fifo_data_tx);
   1ee7e:	85 ed       	ldi	r24, 0xD5	; 213
   1ee80:	94 e0       	ldi	r25, 0x04	; 4
   1ee82:	60 e4       	ldi	r22, 0x40	; 64
   1ee84:	70 e0       	ldi	r23, 0x00	; 0
   1ee86:	43 e2       	ldi	r20, 0x23	; 35
   1ee88:	53 ef       	ldi	r21, 0xF3	; 243
   1ee8a:	21 ee       	ldi	r18, 0xE1	; 225
   1ee8c:	34 e0       	ldi	r19, 0x04	; 4
   1ee8e:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1ee92:	8a ec       	ldi	r24, 0xCA	; 202
   1ee94:	93 e0       	ldi	r25, 0x03	; 3
   1ee96:	6f ef       	ldi	r22, 0xFF	; 255
   1ee98:	70 e0       	ldi	r23, 0x00	; 0
   1ee9a:	40 e0       	ldi	r20, 0x00	; 0
   1ee9c:	50 e0       	ldi	r21, 0x00	; 0
   1ee9e:	26 ed       	ldi	r18, 0xD6	; 214
   1eea0:	33 e0       	ldi	r19, 0x03	; 3
   1eea2:	0e 94 52 f9 	call	0x1f2a4	; 0x1f2a4 <fifo_init>
					DDRJ |= _BV(PJ1);		// UTX3 output
   1eea6:	80 91 04 01 	lds	r24, 0x0104
   1eeaa:	82 60       	ori	r24, 0x02	; 2
   1eeac:	80 93 04 01 	sts	0x0104, r24
					UCSR3B |= _BV(TXEN3);	// enable tx
   1eeb0:	80 91 31 01 	lds	r24, 0x0131
   1eeb4:	88 60       	ori	r24, 0x08	; 8
   1eeb6:	80 93 31 01 	sts	0x0131, r24
					UCSR3B |= _BV(UDRIE3);	// enable tx interrupt
   1eeba:	80 91 31 01 	lds	r24, 0x0131
   1eebe:	80 62       	ori	r24, 0x20	; 32
   1eec0:	80 93 31 01 	sts	0x0131, r24
   1eec4:	20 e0       	ldi	r18, 0x00	; 0
   1eec6:	30 e0       	ldi	r19, 0x00	; 0
   1eec8:	41 e0       	ldi	r20, 0x01	; 1
   1eeca:	ce 01       	movw	r24, r28
   1eecc:	01 97       	sbiw	r24, 0x01	; 1
   1eece:	f1 f7       	brne	.-4      	; 0x1eecc <uart_init+0x3e2>
   1eed0:	c9 01       	movw	r24, r18
		#else
			UCSR3A &= _BV(U2X3);
		#endif
		
		tempint=BOOTWINDOW;
		while(tempint--)
   1eed2:	9c 01       	movw	r18, r24
   1eed4:	21 50       	subi	r18, 0x01	; 1
   1eed6:	30 40       	sbci	r19, 0x00	; 0
   1eed8:	89 2b       	or	r24, r25
   1eeda:	09 f0       	breq	.+2      	; 0x1eede <uart_init+0x3f4>
   1eedc:	ca ce       	rjmp	.-620    	; 0x1ec72 <uart_init+0x188>
   1eede:	94 2f       	mov	r25, r20

			_delay_ms(1);
		};
	};
	
	if(!found)
   1eee0:	44 23       	and	r20, r20
   1eee2:	09 f5       	brne	.+66     	; 0x1ef26 <uart_init+0x43c>
	{
		UCSR0B=0;
   1eee4:	10 92 c1 00 	sts	0x00C1, r1
		UCSR1B=0;
   1eee8:	10 92 c9 00 	sts	0x00C9, r1
		UCSR2B=0;
   1eeec:	10 92 d1 00 	sts	0x00D1, r1
		UCSR3B=0;
   1eef0:	10 92 31 01 	sts	0x0131, r1
	
		UBRR0H = 0;
   1eef4:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = 0;
   1eef8:	10 92 c4 00 	sts	0x00C4, r1
		UBRR1H = 0;
   1eefc:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L = 0;
   1ef00:	10 92 cc 00 	sts	0x00CC, r1
		UBRR2H = 0;
   1ef04:	10 92 d5 00 	sts	0x00D5, r1
		UBRR2L = 0;
   1ef08:	10 92 d4 00 	sts	0x00D4, r1
		UBRR3H = 0;
   1ef0c:	10 92 35 01 	sts	0x0135, r1
		UBRR3L = 0;
   1ef10:	10 92 34 01 	sts	0x0134, r1
	
		UCSR0A =0x20;
   1ef14:	80 e2       	ldi	r24, 0x20	; 32
   1ef16:	80 93 c0 00 	sts	0x00C0, r24
		UCSR1A =0x20;	
   1ef1a:	80 93 c8 00 	sts	0x00C8, r24
		UCSR2A =0x20;
   1ef1e:	80 93 d0 00 	sts	0x00D0, r24
		UCSR3A =0x20;	
   1ef22:	80 93 30 01 	sts	0x0130, r24
	};
	return found;
}
   1ef26:	89 2f       	mov	r24, r25
   1ef28:	df 91       	pop	r29
   1ef2a:	cf 91       	pop	r28
   1ef2c:	08 95       	ret

0001ef2e <hex2ascii>:

// call to print memory to a text buffer as hex data
// option=0, ############
// option=1, ##:##:##:##:##:## (used for MAC)
char* hex2ascii(char* textbuf, void* startadd, unsigned char length, unsigned char option)
{
   1ef2e:	0f 93       	push	r16
   1ef30:	1f 93       	push	r17
   1ef32:	cf 93       	push	r28
   1ef34:	df 93       	push	r29
   1ef36:	18 2f       	mov	r17, r24
   1ef38:	09 2f       	mov	r16, r25
   1ef3a:	eb 01       	movw	r28, r22
   1ef3c:	62 2f       	mov	r22, r18
	void* endadd = (unsigned char*)startadd+length;
   1ef3e:	ce 01       	movw	r24, r28
   1ef40:	84 0f       	add	r24, r20
   1ef42:	91 1d       	adc	r25, r1
   1ef44:	ac 01       	movw	r20, r24
   1ef46:	21 2f       	mov	r18, r17
   1ef48:	30 2f       	mov	r19, r16
   1ef4a:	c9 01       	movw	r24, r18
   1ef4c:	fc 01       	movw	r30, r24
			textbuf[0]+=7;
		if(textbuf[1]>0x39)
			textbuf[1]+=7;
		textbuf+=2;
		if(option==1 && startadd != endadd)
			*textbuf++=':';
   1ef4e:	2a e3       	ldi	r18, 0x3A	; 58
	char* retval = textbuf;

	unsigned char tempchar;
	do
	{
		tempchar=*(unsigned char*)startadd++;
   1ef50:	89 91       	ld	r24, Y+
		textbuf[0]=0x30+(tempchar>>4);
   1ef52:	98 2f       	mov	r25, r24
   1ef54:	92 95       	swap	r25
   1ef56:	9f 70       	andi	r25, 0x0F	; 15
   1ef58:	90 5d       	subi	r25, 0xD0	; 208
   1ef5a:	df 01       	movw	r26, r30
   1ef5c:	9d 93       	st	X+, r25
		textbuf[1]=0x30+(tempchar&0x0F);
   1ef5e:	8f 70       	andi	r24, 0x0F	; 15
   1ef60:	80 5d       	subi	r24, 0xD0	; 208
   1ef62:	81 83       	std	Z+1, r24	; 0x01
		if(textbuf[0]>0x39)
   1ef64:	9a 33       	cpi	r25, 0x3A	; 58
   1ef66:	10 f0       	brcs	.+4      	; 0x1ef6c <hex2ascii+0x3e>
			textbuf[0]+=7;
   1ef68:	99 5f       	subi	r25, 0xF9	; 249
   1ef6a:	90 83       	st	Z, r25
		if(textbuf[1]>0x39)
   1ef6c:	8c 91       	ld	r24, X
   1ef6e:	8a 33       	cpi	r24, 0x3A	; 58
   1ef70:	10 f0       	brcs	.+4      	; 0x1ef76 <hex2ascii+0x48>
			textbuf[1]+=7;
   1ef72:	89 5f       	subi	r24, 0xF9	; 249
   1ef74:	8c 93       	st	X, r24
		textbuf+=2;
   1ef76:	32 96       	adiw	r30, 0x02	; 2
		if(option==1 && startadd != endadd)
   1ef78:	61 30       	cpi	r22, 0x01	; 1
   1ef7a:	29 f4       	brne	.+10     	; 0x1ef86 <hex2ascii+0x58>
   1ef7c:	c4 17       	cp	r28, r20
   1ef7e:	d5 07       	cpc	r29, r21
   1ef80:	29 f0       	breq	.+10     	; 0x1ef8c <hex2ascii+0x5e>
			*textbuf++=':';
   1ef82:	21 93       	st	Z+, r18
   1ef84:	e5 cf       	rjmp	.-54     	; 0x1ef50 <hex2ascii+0x22>
	}while(startadd != endadd);
   1ef86:	c4 17       	cp	r28, r20
   1ef88:	d5 07       	cpc	r29, r21
   1ef8a:	11 f7       	brne	.-60     	; 0x1ef50 <hex2ascii+0x22>
	*textbuf++=0;
   1ef8c:	10 82       	st	Z, r1
	return retval;
}
   1ef8e:	81 2f       	mov	r24, r17
   1ef90:	90 2f       	mov	r25, r16
   1ef92:	df 91       	pop	r29
   1ef94:	cf 91       	pop	r28
   1ef96:	1f 91       	pop	r17
   1ef98:	0f 91       	pop	r16
   1ef9a:	08 95       	ret

0001ef9c <read_bige_uint>:

unsigned int read_bige_uint(unsigned int bige)
{
   1ef9c:	df 93       	push	r29
   1ef9e:	cf 93       	push	r28
   1efa0:	00 d0       	rcall	.+0      	; 0x1efa2 <read_bige_uint+0x6>
   1efa2:	cd b7       	in	r28, 0x3d	; 61
   1efa4:	de b7       	in	r29, 0x3e	; 62
   1efa6:	9a 83       	std	Y+2, r25	; 0x02
   1efa8:	89 83       	std	Y+1, r24	; 0x01
	unsigned int retval;
	retval = ((unsigned char*)&bige)[0];
	retval<<=8;
   1efaa:	38 2f       	mov	r19, r24
   1efac:	20 e0       	ldi	r18, 0x00	; 0
   1efae:	8a 81       	ldd	r24, Y+2	; 0x02
   1efb0:	28 0f       	add	r18, r24
   1efb2:	31 1d       	adc	r19, r1
	retval+= ((unsigned char*)&bige)[1];
	return retval;
}
   1efb4:	c9 01       	movw	r24, r18
   1efb6:	0f 90       	pop	r0
   1efb8:	0f 90       	pop	r0
   1efba:	cf 91       	pop	r28
   1efbc:	df 91       	pop	r29
   1efbe:	08 95       	ret

0001efc0 <ihex_init>:
	char *line_ptr;

//call to initialise ihex parser
void ihex_init()
{
	ext_seg_add=0;
   1efc0:	10 92 c2 02 	sts	0x02C2, r1
   1efc4:	10 92 c3 02 	sts	0x02C3, r1
   1efc8:	10 92 c4 02 	sts	0x02C4, r1
   1efcc:	10 92 c5 02 	sts	0x02C5, r1
	ext_lin_add=0;
   1efd0:	10 92 c6 02 	sts	0x02C6, r1
   1efd4:	10 92 c7 02 	sts	0x02C7, r1
   1efd8:	10 92 c8 02 	sts	0x02C8, r1
   1efdc:	10 92 c9 02 	sts	0x02C9, r1
	line_ptr=hexline.ascii;
   1efe0:	85 e3       	ldi	r24, 0x35	; 53
   1efe2:	95 e0       	ldi	r25, 0x05	; 5
   1efe4:	90 93 22 05 	sts	0x0522, r25
   1efe8:	80 93 21 05 	sts	0x0521, r24
	*line_ptr=0;
   1efec:	10 92 35 05 	sts	0x0535, r1
	ihex_status=0;
   1eff0:	10 92 23 05 	sts	0x0523, r1
}
   1eff4:	08 95       	ret

0001eff6 <ascii2hex>:
	else
		ihex_status=IHEX_STATUS_ERROR;
}

char ascii2hex(char* ascii)
{
   1eff6:	fc 01       	movw	r30, r24
	char retval=0;
	if(ascii[0] > '9')
   1eff8:	80 81       	ld	r24, Z
   1effa:	8a 33       	cpi	r24, 0x3A	; 58
   1effc:	10 f0       	brcs	.+4      	; 0x1f002 <ascii2hex+0xc>
		retval += 0x0A + ascii[0] -'A';
   1effe:	87 53       	subi	r24, 0x37	; 55
   1f000:	01 c0       	rjmp	.+2      	; 0x1f004 <ascii2hex+0xe>
	else
		retval += 0x00 + ascii[0] -'0';
   1f002:	80 53       	subi	r24, 0x30	; 48
	retval<<=4;
   1f004:	98 2f       	mov	r25, r24
   1f006:	92 95       	swap	r25
   1f008:	90 7f       	andi	r25, 0xF0	; 240
	if(ascii[1] > '9')
   1f00a:	81 81       	ldd	r24, Z+1	; 0x01
   1f00c:	8a 33       	cpi	r24, 0x3A	; 58
   1f00e:	18 f0       	brcs	.+6      	; 0x1f016 <ascii2hex+0x20>
		retval += 0x0A + ascii[1] -'A';
   1f010:	87 53       	subi	r24, 0x37	; 55
   1f012:	89 0f       	add	r24, r25
   1f014:	08 95       	ret
	else
		retval += 0x00 + ascii[1] -'0';
   1f016:	80 53       	subi	r24, 0x30	; 48
   1f018:	89 0f       	add	r24, r25
	return retval;
}
   1f01a:	08 95       	ret

0001f01c <ihex_process_line>:
	};
}

//called from ihex_char when a hex line is complete
void ihex_process_line(void)
{
   1f01c:	ef 92       	push	r14
   1f01e:	ff 92       	push	r15
   1f020:	0f 93       	push	r16
   1f022:	1f 93       	push	r17
   1f024:	cf 93       	push	r28
   1f026:	df 93       	push	r29
	char byte_count, *target, *source, checksum;
	unsigned char index;

	//if valid size
	if(isxdigit(hexline.ascii[1]) && isxdigit(hexline.ascii[2]))
   1f028:	80 91 36 05 	lds	r24, 0x0536
   1f02c:	90 e0       	ldi	r25, 0x00	; 0
   1f02e:	0e 94 61 f9 	call	0x1f2c2	; 0x1f2c2 <isxdigit>
   1f032:	89 2b       	or	r24, r25
   1f034:	71 f0       	breq	.+28     	; 0x1f052 <ihex_process_line+0x36>
   1f036:	80 91 37 05 	lds	r24, 0x0537
   1f03a:	90 e0       	ldi	r25, 0x00	; 0
   1f03c:	0e 94 61 f9 	call	0x1f2c2	; 0x1f2c2 <isxdigit>
   1f040:	89 2b       	or	r24, r25
   1f042:	39 f0       	breq	.+14     	; 0x1f052 <ihex_process_line+0x36>
		hexline.ihex.byte_count = ascii2hex(&hexline.ascii[1]);
   1f044:	86 e3       	ldi	r24, 0x36	; 54
   1f046:	95 e0       	ldi	r25, 0x05	; 5
   1f048:	0e 94 fb f7 	call	0x1eff6	; 0x1eff6 <ascii2hex>
   1f04c:	80 93 35 05 	sts	0x0535, r24
   1f050:	02 c0       	rjmp	.+4      	; 0x1f056 <ihex_process_line+0x3a>
	else
		hexline.ihex.byte_count=0;
   1f052:	10 92 35 05 	sts	0x0535, r1

	//convert ascii to hex
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1f056:	e0 90 35 05 	lds	r14, 0x0535
   1f05a:	84 e0       	ldi	r24, 0x04	; 4
   1f05c:	e8 0e       	add	r14, r24
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
   1f05e:	eb e1       	ldi	r30, 0x1B	; 27
   1f060:	ee 15       	cp	r30, r14
   1f062:	08 f4       	brcc	.+2      	; 0x1f066 <ihex_process_line+0x4a>
   1f064:	ee 24       	eor	r14, r14
   1f066:	06 e3       	ldi	r16, 0x36	; 54
   1f068:	15 e0       	ldi	r17, 0x05	; 5
   1f06a:	e8 01       	movw	r28, r16
   1f06c:	22 96       	adiw	r28, 0x02	; 2
   1f06e:	08 c0       	rjmp	.+16     	; 0x1f080 <ihex_process_line+0x64>
		byte_count=0;
	while(byte_count)
	{
		*target++=ascii2hex(source);
   1f070:	ce 01       	movw	r24, r28
   1f072:	0e 94 fb f7 	call	0x1eff6	; 0x1eff6 <ascii2hex>
   1f076:	f8 01       	movw	r30, r16
   1f078:	81 93       	st	Z+, r24
   1f07a:	8f 01       	movw	r16, r30
		source+=2;
   1f07c:	22 96       	adiw	r28, 0x02	; 2
		byte_count--;
   1f07e:	ea 94       	dec	r14
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
		byte_count=0;
	while(byte_count)
   1f080:	ee 20       	and	r14, r14
   1f082:	b1 f7       	brne	.-20     	; 0x1f070 <ihex_process_line+0x54>
		source+=2;
		byte_count--;
	};

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1f084:	80 91 35 05 	lds	r24, 0x0535
   1f088:	8c 5f       	subi	r24, 0xFC	; 252
   1f08a:	e5 e3       	ldi	r30, 0x35	; 53
   1f08c:	f5 e0       	ldi	r31, 0x05	; 5
   1f08e:	20 e0       	ldi	r18, 0x00	; 0
	checksum=0;
	index=0;
	while(byte_count--)
   1f090:	90 e0       	ldi	r25, 0x00	; 0
   1f092:	8e 0f       	add	r24, r30
   1f094:	9f 1f       	adc	r25, r31
   1f096:	02 c0       	rjmp	.+4      	; 0x1f09c <ihex_process_line+0x80>
		checksum-=hexline.raw[index++];
   1f098:	23 1b       	sub	r18, r19
   1f09a:	31 96       	adiw	r30, 0x01	; 1
   1f09c:	30 81       	ld	r19, Z

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	checksum=0;
	index=0;
	while(byte_count--)
   1f09e:	e8 17       	cp	r30, r24
   1f0a0:	f9 07       	cpc	r31, r25
   1f0a2:	d1 f7       	brne	.-12     	; 0x1f098 <ihex_process_line+0x7c>
		checksum-=hexline.raw[index++];
	
	if(checksum == hexline.raw[index])
   1f0a4:	23 17       	cp	r18, r19
   1f0a6:	09 f0       	breq	.+2      	; 0x1f0aa <ihex_process_line+0x8e>
   1f0a8:	7d c0       	rjmp	.+250    	; 0x1f1a4 <ihex_process_line+0x188>
	{
		if(hexline.ihex.type == IHEX_TYPE_DATA)
   1f0aa:	80 91 38 05 	lds	r24, 0x0538
   1f0ae:	88 23       	and	r24, r24
   1f0b0:	c1 f5       	brne	.+112    	; 0x1f122 <ihex_process_line+0x106>
		{
			//calculate actual address
			ihex_address=(unsigned long)read_bige_uint(hexline.ihex.address);
   1f0b2:	80 91 36 05 	lds	r24, 0x0536
   1f0b6:	90 91 37 05 	lds	r25, 0x0537
   1f0ba:	0e 94 ce f7 	call	0x1ef9c	; 0x1ef9c <read_bige_uint>
			ihex_address+=ext_seg_add;
			ihex_address+=ext_lin_add;
   1f0be:	20 91 c6 02 	lds	r18, 0x02C6
   1f0c2:	30 91 c7 02 	lds	r19, 0x02C7
   1f0c6:	40 91 c8 02 	lds	r20, 0x02C8
   1f0ca:	50 91 c9 02 	lds	r21, 0x02C9
   1f0ce:	e0 90 c2 02 	lds	r14, 0x02C2
   1f0d2:	f0 90 c3 02 	lds	r15, 0x02C3
   1f0d6:	00 91 c4 02 	lds	r16, 0x02C4
   1f0da:	10 91 c5 02 	lds	r17, 0x02C5
   1f0de:	2e 0d       	add	r18, r14
   1f0e0:	3f 1d       	adc	r19, r15
   1f0e2:	40 1f       	adc	r20, r16
   1f0e4:	51 1f       	adc	r21, r17
   1f0e6:	a0 e0       	ldi	r26, 0x00	; 0
   1f0e8:	b0 e0       	ldi	r27, 0x00	; 0
   1f0ea:	28 0f       	add	r18, r24
   1f0ec:	39 1f       	adc	r19, r25
   1f0ee:	4a 1f       	adc	r20, r26
   1f0f0:	5b 1f       	adc	r21, r27
   1f0f2:	20 93 be 02 	sts	0x02BE, r18
   1f0f6:	30 93 bf 02 	sts	0x02BF, r19
   1f0fa:	40 93 c0 02 	sts	0x02C0, r20
   1f0fe:	50 93 c1 02 	sts	0x02C1, r21
			
			//copy data to output
			memcpy(ihex_data, hexline.ihex.data, hexline.ihex.byte_count);
   1f102:	24 e2       	ldi	r18, 0x24	; 36
   1f104:	35 e0       	ldi	r19, 0x05	; 5
   1f106:	40 91 35 05 	lds	r20, 0x0535
   1f10a:	e9 e3       	ldi	r30, 0x39	; 57
   1f10c:	f5 e0       	ldi	r31, 0x05	; 5
   1f10e:	c9 01       	movw	r24, r18
   1f110:	bf 01       	movw	r22, r30
   1f112:	50 e0       	ldi	r21, 0x00	; 0
   1f114:	0e 94 6c f9 	call	0x1f2d8	; 0x1f2d8 <memcpy>
			//copy byte count to output
			ihex_byte_count=hexline.ihex.byte_count;
   1f118:	80 91 35 05 	lds	r24, 0x0535
   1f11c:	80 93 34 05 	sts	0x0534, r24
   1f120:	44 c0       	rjmp	.+136    	; 0x1f1aa <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_SEG_ADD)
   1f122:	82 30       	cpi	r24, 0x02	; 2
   1f124:	f9 f4       	brne	.+62     	; 0x1f164 <ihex_process_line+0x148>
		{
			ext_seg_add=hexline.ihex.data[0];
			ext_seg_add<<=8;
			ext_seg_add+=hexline.ihex.data[1];
			ext_seg_add<<=4;
   1f126:	80 91 39 05 	lds	r24, 0x0539
   1f12a:	90 e0       	ldi	r25, 0x00	; 0
   1f12c:	a0 e0       	ldi	r26, 0x00	; 0
   1f12e:	b0 e0       	ldi	r27, 0x00	; 0
   1f130:	ba 2f       	mov	r27, r26
   1f132:	a9 2f       	mov	r26, r25
   1f134:	98 2f       	mov	r25, r24
   1f136:	88 27       	eor	r24, r24
   1f138:	20 91 3a 05 	lds	r18, 0x053A
   1f13c:	82 0f       	add	r24, r18
   1f13e:	91 1d       	adc	r25, r1
   1f140:	a1 1d       	adc	r26, r1
   1f142:	b1 1d       	adc	r27, r1
   1f144:	44 e0       	ldi	r20, 0x04	; 4
   1f146:	88 0f       	add	r24, r24
   1f148:	99 1f       	adc	r25, r25
   1f14a:	aa 1f       	adc	r26, r26
   1f14c:	bb 1f       	adc	r27, r27
   1f14e:	4a 95       	dec	r20
   1f150:	d1 f7       	brne	.-12     	; 0x1f146 <ihex_process_line+0x12a>
   1f152:	80 93 c2 02 	sts	0x02C2, r24
   1f156:	90 93 c3 02 	sts	0x02C3, r25
   1f15a:	a0 93 c4 02 	sts	0x02C4, r26
   1f15e:	b0 93 c5 02 	sts	0x02C5, r27
   1f162:	23 c0       	rjmp	.+70     	; 0x1f1aa <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_LIN_ADD)
   1f164:	84 30       	cpi	r24, 0x04	; 4
   1f166:	d9 f4       	brne	.+54     	; 0x1f19e <ihex_process_line+0x182>
		{
			ext_lin_add=hexline.ihex.data[0];
			ext_lin_add<<=8;
			ext_lin_add+=hexline.ihex.data[1];
			ext_lin_add<<=16;
   1f168:	80 91 39 05 	lds	r24, 0x0539
   1f16c:	90 e0       	ldi	r25, 0x00	; 0
   1f16e:	a0 e0       	ldi	r26, 0x00	; 0
   1f170:	b0 e0       	ldi	r27, 0x00	; 0
   1f172:	ba 2f       	mov	r27, r26
   1f174:	a9 2f       	mov	r26, r25
   1f176:	98 2f       	mov	r25, r24
   1f178:	88 27       	eor	r24, r24
   1f17a:	20 91 3a 05 	lds	r18, 0x053A
   1f17e:	82 0f       	add	r24, r18
   1f180:	91 1d       	adc	r25, r1
   1f182:	a1 1d       	adc	r26, r1
   1f184:	b1 1d       	adc	r27, r1
   1f186:	dc 01       	movw	r26, r24
   1f188:	99 27       	eor	r25, r25
   1f18a:	88 27       	eor	r24, r24
   1f18c:	80 93 c6 02 	sts	0x02C6, r24
   1f190:	90 93 c7 02 	sts	0x02C7, r25
   1f194:	a0 93 c8 02 	sts	0x02C8, r26
   1f198:	b0 93 c9 02 	sts	0x02C9, r27
   1f19c:	06 c0       	rjmp	.+12     	; 0x1f1aa <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EOF)
   1f19e:	81 30       	cpi	r24, 0x01	; 1
   1f1a0:	21 f4       	brne	.+8      	; 0x1f1aa <ihex_process_line+0x18e>
   1f1a2:	01 c0       	rjmp	.+2      	; 0x1f1a6 <ihex_process_line+0x18a>
			ihex_status=IHEX_STATUS_EOF;
	}
	else
		ihex_status=IHEX_STATUS_ERROR;
   1f1a4:	82 e0       	ldi	r24, 0x02	; 2
   1f1a6:	80 93 23 05 	sts	0x0523, r24
}
   1f1aa:	df 91       	pop	r29
   1f1ac:	cf 91       	pop	r28
   1f1ae:	1f 91       	pop	r17
   1f1b0:	0f 91       	pop	r16
   1f1b2:	ff 90       	pop	r15
   1f1b4:	ef 90       	pop	r14
   1f1b6:	08 95       	ret

0001f1b8 <ihex_char>:
	ihex_status=0;
}

//characters are passed to this function
void ihex_char(char x)
{
   1f1b8:	98 2f       	mov	r25, r24
	//start of new line?
	if(x==':')
   1f1ba:	8a 33       	cpi	r24, 0x3A	; 58
   1f1bc:	59 f4       	brne	.+22     	; 0x1f1d4 <ihex_char+0x1c>
	{
		line_ptr=hexline.ascii;
		*line_ptr=x;
   1f1be:	80 93 35 05 	sts	0x0535, r24
		line_ptr++;
   1f1c2:	86 e3       	ldi	r24, 0x36	; 54
   1f1c4:	95 e0       	ldi	r25, 0x05	; 5
   1f1c6:	90 93 22 05 	sts	0x0522, r25
   1f1ca:	80 93 21 05 	sts	0x0521, r24
		*line_ptr=0;
   1f1ce:	10 92 36 05 	sts	0x0536, r1
   1f1d2:	08 95       	ret
	}
	//else if line in progress, append to line
	else if(hexline.ascii[0]==':')
   1f1d4:	80 91 35 05 	lds	r24, 0x0535
   1f1d8:	8a 33       	cpi	r24, 0x3A	; 58
   1f1da:	e1 f4       	brne	.+56     	; 0x1f214 <ihex_char+0x5c>
	{
		if(line_ptr != &hexline.ascii[MAXLEN-1])
   1f1dc:	a0 91 21 05 	lds	r26, 0x0521
   1f1e0:	b0 91 22 05 	lds	r27, 0x0522
   1f1e4:	85 e0       	ldi	r24, 0x05	; 5
   1f1e6:	a0 37       	cpi	r26, 0x70	; 112
   1f1e8:	b8 07       	cpc	r27, r24
   1f1ea:	41 f0       	breq	.+16     	; 0x1f1fc <ihex_char+0x44>
		{
			*line_ptr++=x;
   1f1ec:	fd 01       	movw	r30, r26
   1f1ee:	91 93       	st	Z+, r25
   1f1f0:	f0 93 22 05 	sts	0x0522, r31
   1f1f4:	e0 93 21 05 	sts	0x0521, r30
			*line_ptr=0;
   1f1f8:	11 96       	adiw	r26, 0x01	; 1
   1f1fa:	1c 92       	st	X, r1
		};
		if(x=='\r')
   1f1fc:	9d 30       	cpi	r25, 0x0D	; 13
   1f1fe:	51 f4       	brne	.+20     	; 0x1f214 <ihex_char+0x5c>
		{
			ihex_process_line();
   1f200:	0e 94 0e f8 	call	0x1f01c	; 0x1f01c <ihex_process_line>
			line_ptr=hexline.ascii;
   1f204:	85 e3       	ldi	r24, 0x35	; 53
   1f206:	95 e0       	ldi	r25, 0x05	; 5
   1f208:	90 93 22 05 	sts	0x0522, r25
   1f20c:	80 93 21 05 	sts	0x0521, r24
			*line_ptr=0;
   1f210:	10 92 35 05 	sts	0x0535, r1
   1f214:	08 95       	ret

0001f216 <fifo_read_char>:

char fifo_read_char(void)
{
	char retval=0;
	
	while(uart_fifo_rx.bytes_used==0);
   1f216:	80 91 cb 03 	lds	r24, 0x03CB
   1f21a:	88 23       	and	r24, r24
   1f21c:	e1 f3       	breq	.-8      	; 0x1f216 <fifo_read_char>

	retval=*((char*)uart_fifo_rx.tail_ptr);
   1f21e:	e0 91 ce 03 	lds	r30, 0x03CE
   1f222:	f0 91 cf 03 	lds	r31, 0x03CF
   1f226:	e0 81       	ld	r30, Z
	uart_fifo_rx.tail_ptr++;	
   1f228:	80 91 ce 03 	lds	r24, 0x03CE
   1f22c:	90 91 cf 03 	lds	r25, 0x03CF
   1f230:	01 96       	adiw	r24, 0x01	; 1
   1f232:	90 93 cf 03 	sts	0x03CF, r25
   1f236:	80 93 ce 03 	sts	0x03CE, r24
	
	if(uart_fifo_rx.tail_ptr == uart_fifo_rx.end)
   1f23a:	20 91 ce 03 	lds	r18, 0x03CE
   1f23e:	30 91 cf 03 	lds	r19, 0x03CF
   1f242:	80 91 d2 03 	lds	r24, 0x03D2
   1f246:	90 91 d3 03 	lds	r25, 0x03D3
   1f24a:	28 17       	cp	r18, r24
   1f24c:	39 07       	cpc	r19, r25
   1f24e:	41 f4       	brne	.+16     	; 0x1f260 <fifo_read_char+0x4a>
		uart_fifo_rx.tail_ptr = uart_fifo_rx.start;
   1f250:	80 91 d0 03 	lds	r24, 0x03D0
   1f254:	90 91 d1 03 	lds	r25, 0x03D1
   1f258:	90 93 cf 03 	sts	0x03CF, r25
   1f25c:	80 93 ce 03 	sts	0x03CE, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1f260:	f8 94       	cli

	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		uart_fifo_rx.bytes_free ++;
   1f262:	80 91 ca 03 	lds	r24, 0x03CA
   1f266:	8f 5f       	subi	r24, 0xFF	; 255
   1f268:	80 93 ca 03 	sts	0x03CA, r24
		uart_fifo_rx.bytes_used --;
   1f26c:	80 91 cb 03 	lds	r24, 0x03CB
   1f270:	81 50       	subi	r24, 0x01	; 1
   1f272:	80 93 cb 03 	sts	0x03CB, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1f276:	78 94       	sei
	}

	return retval;
}
   1f278:	8e 2f       	mov	r24, r30
   1f27a:	08 95       	ret

0001f27c <fifo_flush>:
	fifo_flush(obj);
} 

//100506, made atomic so pointers cannot be corrupted by ISR's
void fifo_flush(struct fifo_control *obj)
{
   1f27c:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1f27e:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1f280:	f8 94       	cli
	{
		(*obj).tail_ptr = (*obj).start;
   1f282:	86 81       	ldd	r24, Z+6	; 0x06
   1f284:	97 81       	ldd	r25, Z+7	; 0x07
   1f286:	95 83       	std	Z+5, r25	; 0x05
   1f288:	84 83       	std	Z+4, r24	; 0x04
		(*obj).head_ptr = (*obj).start;
   1f28a:	86 81       	ldd	r24, Z+6	; 0x06
   1f28c:	97 81       	ldd	r25, Z+7	; 0x07
   1f28e:	93 83       	std	Z+3, r25	; 0x03
   1f290:	82 83       	std	Z+2, r24	; 0x02
		(*obj).bytes_free=(*obj).end-(*obj).start;
   1f292:	80 85       	ldd	r24, Z+8	; 0x08
   1f294:	91 85       	ldd	r25, Z+9	; 0x09
   1f296:	26 81       	ldd	r18, Z+6	; 0x06
   1f298:	37 81       	ldd	r19, Z+7	; 0x07
   1f29a:	82 1b       	sub	r24, r18
   1f29c:	80 83       	st	Z, r24
		(*obj).bytes_used=0;
   1f29e:	11 82       	std	Z+1, r1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1f2a0:	4f bf       	out	0x3f, r20	; 63
	}
}
   1f2a2:	08 95       	ret

0001f2a4 <fifo_init>:
	return retval;
}


void fifo_init(struct fifo_control *obj, unsigned int size, void(*post_fptr)(void), void* data_space)
{
   1f2a4:	fc 01       	movw	r30, r24
	(*obj).start = data_space;
   1f2a6:	37 83       	std	Z+7, r19	; 0x07
   1f2a8:	26 83       	std	Z+6, r18	; 0x06
	(*obj).end=(*obj).start + size;		// note, end points to last item in buffer + 1
   1f2aa:	86 81       	ldd	r24, Z+6	; 0x06
   1f2ac:	97 81       	ldd	r25, Z+7	; 0x07
   1f2ae:	86 0f       	add	r24, r22
   1f2b0:	97 1f       	adc	r25, r23
   1f2b2:	91 87       	std	Z+9, r25	; 0x09
   1f2b4:	80 87       	std	Z+8, r24	; 0x08
	(*obj).post_fptr=post_fptr;
   1f2b6:	53 87       	std	Z+11, r21	; 0x0b
   1f2b8:	42 87       	std	Z+10, r20	; 0x0a
	fifo_flush(obj);
   1f2ba:	cf 01       	movw	r24, r30
   1f2bc:	0e 94 3e f9 	call	0x1f27c	; 0x1f27c <fifo_flush>
} 
   1f2c0:	08 95       	ret

0001f2c2 <isxdigit>:
   1f2c2:	91 11       	cpse	r25, r1
   1f2c4:	46 c0       	rjmp	.+140    	; 0x1f352 <__ctype_isfalse>
   1f2c6:	80 53       	subi	r24, 0x30	; 48
   1f2c8:	8a 50       	subi	r24, 0x0A	; 10
   1f2ca:	28 f0       	brcs	.+10     	; 0x1f2d6 <isxdigit+0x14>
   1f2cc:	86 5c       	subi	r24, 0xC6	; 198
   1f2ce:	80 62       	ori	r24, 0x20	; 32
   1f2d0:	81 56       	subi	r24, 0x61	; 97
   1f2d2:	86 50       	subi	r24, 0x06	; 6
   1f2d4:	b8 f7       	brcc	.-18     	; 0x1f2c4 <isxdigit+0x2>
   1f2d6:	08 95       	ret

0001f2d8 <memcpy>:
   1f2d8:	fb 01       	movw	r30, r22
   1f2da:	dc 01       	movw	r26, r24
   1f2dc:	02 c0       	rjmp	.+4      	; 0x1f2e2 <memcpy+0xa>
   1f2de:	01 90       	ld	r0, Z+
   1f2e0:	0d 92       	st	X+, r0
   1f2e2:	41 50       	subi	r20, 0x01	; 1
   1f2e4:	50 40       	sbci	r21, 0x00	; 0
   1f2e6:	d8 f7       	brcc	.-10     	; 0x1f2de <memcpy+0x6>
   1f2e8:	08 95       	ret

0001f2ea <ltoa>:
   1f2ea:	fa 01       	movw	r30, r20
   1f2ec:	cf 93       	push	r28
   1f2ee:	ff 93       	push	r31
   1f2f0:	ef 93       	push	r30
   1f2f2:	22 30       	cpi	r18, 0x02	; 2
   1f2f4:	44 f1       	brlt	.+80     	; 0x1f346 <ltoa+0x5c>
   1f2f6:	25 32       	cpi	r18, 0x25	; 37
   1f2f8:	34 f5       	brge	.+76     	; 0x1f346 <ltoa+0x5c>
   1f2fa:	c2 2f       	mov	r28, r18
   1f2fc:	e8 94       	clt
   1f2fe:	ca 30       	cpi	r28, 0x0A	; 10
   1f300:	49 f4       	brne	.+18     	; 0x1f314 <ltoa+0x2a>
   1f302:	97 fb       	bst	r25, 7
   1f304:	3e f4       	brtc	.+14     	; 0x1f314 <ltoa+0x2a>
   1f306:	90 95       	com	r25
   1f308:	80 95       	com	r24
   1f30a:	70 95       	com	r23
   1f30c:	61 95       	neg	r22
   1f30e:	7f 4f       	sbci	r23, 0xFF	; 255
   1f310:	8f 4f       	sbci	r24, 0xFF	; 255
   1f312:	9f 4f       	sbci	r25, 0xFF	; 255
   1f314:	2c 2f       	mov	r18, r28
   1f316:	33 27       	eor	r19, r19
   1f318:	44 27       	eor	r20, r20
   1f31a:	55 27       	eor	r21, r21
   1f31c:	ff 93       	push	r31
   1f31e:	ef 93       	push	r30
   1f320:	0e 94 bc f9 	call	0x1f378	; 0x1f378 <__udivmodsi4>
   1f324:	ef 91       	pop	r30
   1f326:	ff 91       	pop	r31
   1f328:	60 5d       	subi	r22, 0xD0	; 208
   1f32a:	6a 33       	cpi	r22, 0x3A	; 58
   1f32c:	0c f0       	brlt	.+2      	; 0x1f330 <ltoa+0x46>
   1f32e:	69 5d       	subi	r22, 0xD9	; 217
   1f330:	61 93       	st	Z+, r22
   1f332:	b9 01       	movw	r22, r18
   1f334:	ca 01       	movw	r24, r20
   1f336:	60 50       	subi	r22, 0x00	; 0
   1f338:	70 40       	sbci	r23, 0x00	; 0
   1f33a:	80 40       	sbci	r24, 0x00	; 0
   1f33c:	90 40       	sbci	r25, 0x00	; 0
   1f33e:	51 f7       	brne	.-44     	; 0x1f314 <ltoa+0x2a>
   1f340:	16 f4       	brtc	.+4      	; 0x1f346 <ltoa+0x5c>
   1f342:	cd e2       	ldi	r28, 0x2D	; 45
   1f344:	c1 93       	st	Z+, r28
   1f346:	10 82       	st	Z, r1
   1f348:	8f 91       	pop	r24
   1f34a:	9f 91       	pop	r25
   1f34c:	cf 91       	pop	r28
   1f34e:	0c 94 ac f9 	jmp	0x1f358	; 0x1f358 <strrev>

0001f352 <__ctype_isfalse>:
   1f352:	99 27       	eor	r25, r25
   1f354:	88 27       	eor	r24, r24

0001f356 <__ctype_istrue>:
   1f356:	08 95       	ret

0001f358 <strrev>:
   1f358:	dc 01       	movw	r26, r24
   1f35a:	fc 01       	movw	r30, r24
   1f35c:	67 2f       	mov	r22, r23
   1f35e:	71 91       	ld	r23, Z+
   1f360:	77 23       	and	r23, r23
   1f362:	e1 f7       	brne	.-8      	; 0x1f35c <strrev+0x4>
   1f364:	32 97       	sbiw	r30, 0x02	; 2
   1f366:	04 c0       	rjmp	.+8      	; 0x1f370 <strrev+0x18>
   1f368:	7c 91       	ld	r23, X
   1f36a:	6d 93       	st	X+, r22
   1f36c:	70 83       	st	Z, r23
   1f36e:	62 91       	ld	r22, -Z
   1f370:	ae 17       	cp	r26, r30
   1f372:	bf 07       	cpc	r27, r31
   1f374:	c8 f3       	brcs	.-14     	; 0x1f368 <strrev+0x10>
   1f376:	08 95       	ret

0001f378 <__udivmodsi4>:
   1f378:	a1 e2       	ldi	r26, 0x21	; 33
   1f37a:	1a 2e       	mov	r1, r26
   1f37c:	aa 1b       	sub	r26, r26
   1f37e:	bb 1b       	sub	r27, r27
   1f380:	fd 01       	movw	r30, r26
   1f382:	0d c0       	rjmp	.+26     	; 0x1f39e <__udivmodsi4_ep>

0001f384 <__udivmodsi4_loop>:
   1f384:	aa 1f       	adc	r26, r26
   1f386:	bb 1f       	adc	r27, r27
   1f388:	ee 1f       	adc	r30, r30
   1f38a:	ff 1f       	adc	r31, r31
   1f38c:	a2 17       	cp	r26, r18
   1f38e:	b3 07       	cpc	r27, r19
   1f390:	e4 07       	cpc	r30, r20
   1f392:	f5 07       	cpc	r31, r21
   1f394:	20 f0       	brcs	.+8      	; 0x1f39e <__udivmodsi4_ep>
   1f396:	a2 1b       	sub	r26, r18
   1f398:	b3 0b       	sbc	r27, r19
   1f39a:	e4 0b       	sbc	r30, r20
   1f39c:	f5 0b       	sbc	r31, r21

0001f39e <__udivmodsi4_ep>:
   1f39e:	66 1f       	adc	r22, r22
   1f3a0:	77 1f       	adc	r23, r23
   1f3a2:	88 1f       	adc	r24, r24
   1f3a4:	99 1f       	adc	r25, r25
   1f3a6:	1a 94       	dec	r1
   1f3a8:	69 f7       	brne	.-38     	; 0x1f384 <__udivmodsi4_loop>
   1f3aa:	60 95       	com	r22
   1f3ac:	70 95       	com	r23
   1f3ae:	80 95       	com	r24
   1f3b0:	90 95       	com	r25
   1f3b2:	9b 01       	movw	r18, r22
   1f3b4:	ac 01       	movw	r20, r24
   1f3b6:	bd 01       	movw	r22, r26
   1f3b8:	cf 01       	movw	r24, r30
   1f3ba:	08 95       	ret

0001f3bc <_exit>:
   1f3bc:	f8 94       	cli

0001f3be <__stop_program>:
   1f3be:	ff cf       	rjmp	.-2      	; 0x1f3be <__stop_program>
