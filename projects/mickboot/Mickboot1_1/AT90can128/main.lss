
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  0001ee96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b7  008001b6  008001b6  00000fe0  2**0
                  ALLOC
  3 .debug_aranges 000000c8  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f0  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ffe  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081c  00000000  00000000  00002396  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ee7  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00003c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000799  00000000  00000000  000040c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	0c 94 4a f0 	jmp	0x1e094	; 0x1e094 <__ctors_end>
   1e004:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e008:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e00c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e010:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e014:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e018:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e01c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e020:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e024:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e028:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e02c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e030:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e034:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e038:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e03c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e040:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e044:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e048:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e04c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e050:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e054:	0c 94 e7 f2 	jmp	0x1e5ce	; 0x1e5ce <__vector_21>
   1e058:	0c 94 6b f3 	jmp	0x1e6d6	; 0x1e6d6 <__vector_22>
   1e05c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e060:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e064:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e068:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e06c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e070:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e074:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e078:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e07c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e080:	0c 94 29 f3 	jmp	0x1e652	; 0x1e652 <__vector_32>
   1e084:	0c 94 bc f3 	jmp	0x1e778	; 0x1e778 <__vector_33>
   1e088:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e08c:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>
   1e090:	0c 94 72 f0 	jmp	0x1e0e4	; 0x1e0e4 <__bad_interrupt>

0001e094 <__ctors_end>:
   1e094:	11 24       	eor	r1, r1
   1e096:	1f be       	out	0x3f, r1	; 63
   1e098:	cf ef       	ldi	r28, 0xFF	; 255
   1e09a:	d0 e1       	ldi	r29, 0x10	; 16
   1e09c:	de bf       	out	0x3e, r29	; 62
   1e09e:	cd bf       	out	0x3d, r28	; 61

0001e0a0 <get_mcusr>:
// Watchdog fix for 1281
void get_mcusr(void) \
      __attribute__((naked)) \
      __attribute__((section(".init3")));
void get_mcusr(void)
{
   1e0a0:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
    wdt_disable();
   1e0a2:	88 e1       	ldi	r24, 0x18	; 24
   1e0a4:	0f b6       	in	r0, 0x3f	; 63
   1e0a6:	f8 94       	cli
   1e0a8:	80 93 60 00 	sts	0x0060, r24
   1e0ac:	10 92 60 00 	sts	0x0060, r1
   1e0b0:	0f be       	out	0x3f, r0	; 63

0001e0b2 <__do_copy_data>:
   1e0b2:	11 e0       	ldi	r17, 0x01	; 1
   1e0b4:	a0 e0       	ldi	r26, 0x00	; 0
   1e0b6:	b1 e0       	ldi	r27, 0x01	; 1
   1e0b8:	e6 e9       	ldi	r30, 0x96	; 150
   1e0ba:	fe ee       	ldi	r31, 0xEE	; 238
   1e0bc:	01 e0       	ldi	r16, 0x01	; 1
   1e0be:	0b bf       	out	0x3b, r16	; 59
   1e0c0:	02 c0       	rjmp	.+4      	; 0x1e0c6 <__do_copy_data+0x14>
   1e0c2:	07 90       	elpm	r0, Z+
   1e0c4:	0d 92       	st	X+, r0
   1e0c6:	a6 3b       	cpi	r26, 0xB6	; 182
   1e0c8:	b1 07       	cpc	r27, r17
   1e0ca:	d9 f7       	brne	.-10     	; 0x1e0c2 <__do_copy_data+0x10>

0001e0cc <__do_clear_bss>:
   1e0cc:	14 e0       	ldi	r17, 0x04	; 4
   1e0ce:	a6 eb       	ldi	r26, 0xB6	; 182
   1e0d0:	b1 e0       	ldi	r27, 0x01	; 1
   1e0d2:	01 c0       	rjmp	.+2      	; 0x1e0d6 <.do_clear_bss_start>

0001e0d4 <.do_clear_bss_loop>:
   1e0d4:	1d 92       	st	X+, r1

0001e0d6 <.do_clear_bss_start>:
   1e0d6:	ad 36       	cpi	r26, 0x6D	; 109
   1e0d8:	b1 07       	cpc	r27, r17
   1e0da:	e1 f7       	brne	.-8      	; 0x1e0d4 <.do_clear_bss_loop>
   1e0dc:	0e 94 74 f0 	call	0x1e0e8	; 0x1e0e8 <main>
   1e0e0:	0c 94 49 f7 	jmp	0x1ee92	; 0x1ee92 <_exit>

0001e0e4 <__bad_interrupt>:
   1e0e4:	0c 94 00 f0 	jmp	0x1e000	; 0x1e000 <__vectors>

0001e0e8 <main>:
}
	
// Main application routine.
int main(void)
{
   1e0e8:	ef 92       	push	r14
   1e0ea:	ff 92       	push	r15
   1e0ec:	1f 93       	push	r17
   1e0ee:	cf 93       	push	r28
   1e0f0:	df 93       	push	r29
	int timeout;
	char *char_ptr, failed, finished;
	
	if(uart_init())	// detect ' ' on com 1 or 0, then configure that port
   1e0f2:	0e 94 0d f4 	call	0x1e81a	; 0x1e81a <uart_init>
   1e0f6:	88 23       	and	r24, r24
   1e0f8:	09 f4       	brne	.+2      	; 0x1e0fc <main+0x14>
   1e0fa:	bd c0       	rjmp	.+378    	; 0x1e276 <main+0x18e>
	{
		MCUCR = _BV(IVCE);
   1e0fc:	81 e0       	ldi	r24, 0x01	; 1
   1e0fe:	85 bf       	out	0x35, r24	; 53
		MCUCR = _BV(IVSEL);
   1e100:	82 e0       	ldi	r24, 0x02	; 2
   1e102:	85 bf       	out	0x35, r24	; 53
		
		sei();
   1e104:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   1e106:	80 e2       	ldi	r24, 0x20	; 32
   1e108:	e8 2e       	mov	r14, r24
   1e10a:	8e e4       	ldi	r24, 0x4E	; 78
   1e10c:	f8 2e       	mov	r15, r24
		do
		{
			timeout=TIMEOUT_ZPROMPT/0.010;
			UART_TX("\r\nMICKBOOT V1.1 Uart");
   1e10e:	80 e0       	ldi	r24, 0x00	; 0
   1e110:	91 e0       	ldi	r25, 0x01	; 1
   1e112:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
			
			if(UCSR1B & _BV(RXEN1))
   1e116:	80 91 c9 00 	lds	r24, 0x00C9
   1e11a:	84 ff       	sbrs	r24, 4
   1e11c:	03 c0       	rjmp	.+6      	; 0x1e124 <main+0x3c>
				UART_TX("1");
   1e11e:	85 e1       	ldi	r24, 0x15	; 21
   1e120:	91 e0       	ldi	r25, 0x01	; 1
   1e122:	02 c0       	rjmp	.+4      	; 0x1e128 <main+0x40>
			else
				UART_TX("0");
   1e124:	87 e1       	ldi	r24, 0x17	; 23
   1e126:	91 e0       	ldi	r25, 0x01	; 1
   1e128:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
			
			UART_TX("\r\nSend Z\r\n");
   1e12c:	89 e1       	ldi	r24, 0x19	; 25
   1e12e:	91 e0       	ldi	r25, 0x01	; 1
   1e130:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
   1e134:	28 eb       	ldi	r18, 0xB8	; 184
   1e136:	3b e0       	ldi	r19, 0x0B	; 11
			
			finished=FALSE;
			failed=FALSE;
			do
			{
				if(uart_fifo_rx.bytes_used)
   1e138:	80 91 c7 02 	lds	r24, 0x02C7
   1e13c:	88 23       	and	r24, r24
   1e13e:	09 f4       	brne	.+2      	; 0x1e142 <main+0x5a>
   1e140:	70 c0       	rjmp	.+224    	; 0x1e222 <main+0x13a>
				{
					timeout=TIMEOUT_ZPROMPT/0.010;
					if(fifo_read_char()=='Z')
   1e142:	0e 94 76 f6 	call	0x1ecec	; 0x1ecec <fifo_read_char>
   1e146:	8a 35       	cpi	r24, 0x5A	; 90
   1e148:	a9 f7       	brne	.-22     	; 0x1e134 <main+0x4c>
					{
						UART_TX("\r\nSend hex file in ASCII\r\n");
   1e14a:	84 e2       	ldi	r24, 0x24	; 36
   1e14c:	91 e0       	ldi	r25, 0x01	; 1
   1e14e:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
						timeout=TIMEOUT_HEX_DATA/0.010;
						failed=FALSE;
						finished=FALSE;
						ihex_init();
   1e152:	0e 94 4b f5 	call	0x1ea96	; 0x1ea96 <ihex_init>
   1e156:	c0 e7       	ldi	r28, 0x70	; 112
   1e158:	d7 e1       	ldi	r29, 0x17	; 23
						do
						{
							if(uart_fifo_rx.bytes_used)
   1e15a:	80 91 c7 02 	lds	r24, 0x02C7
   1e15e:	88 23       	and	r24, r24
   1e160:	09 f4       	brne	.+2      	; 0x1e164 <main+0x7c>
   1e162:	41 c0       	rjmp	.+130    	; 0x1e1e6 <main+0xfe>
							{
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char());
   1e164:	0e 94 76 f6 	call	0x1ecec	; 0x1ecec <fifo_read_char>
   1e168:	0e 94 47 f6 	call	0x1ec8e	; 0x1ec8e <ihex_char>
								if(ihex_byte_count)
   1e16c:	80 91 30 04 	lds	r24, 0x0430
   1e170:	88 23       	and	r24, r24
   1e172:	39 f1       	breq	.+78     	; 0x1e1c2 <main+0xda>
   1e174:	c0 e2       	ldi	r28, 0x20	; 32
   1e176:	d4 e0       	ldi	r29, 0x04	; 4
   1e178:	1b c0       	rjmp	.+54     	; 0x1e1b0 <main+0xc8>
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
										flash_byte(ihex_address++, *char_ptr++);
   1e17a:	60 91 ba 01 	lds	r22, 0x01BA
   1e17e:	70 91 bb 01 	lds	r23, 0x01BB
   1e182:	80 91 bc 01 	lds	r24, 0x01BC
   1e186:	90 91 bd 01 	lds	r25, 0x01BD
   1e18a:	6f 5f       	subi	r22, 0xFF	; 255
   1e18c:	7f 4f       	sbci	r23, 0xFF	; 255
   1e18e:	8f 4f       	sbci	r24, 0xFF	; 255
   1e190:	9f 4f       	sbci	r25, 0xFF	; 255
   1e192:	60 93 ba 01 	sts	0x01BA, r22
   1e196:	70 93 bb 01 	sts	0x01BB, r23
   1e19a:	80 93 bc 01 	sts	0x01BC, r24
   1e19e:	90 93 bd 01 	sts	0x01BD, r25
   1e1a2:	61 50       	subi	r22, 0x01	; 1
   1e1a4:	70 40       	sbci	r23, 0x00	; 0
   1e1a6:	80 40       	sbci	r24, 0x00	; 0
   1e1a8:	90 40       	sbci	r25, 0x00	; 0
   1e1aa:	49 91       	ld	r20, Y+
   1e1ac:	0e 94 0d f2 	call	0x1e41a	; 0x1e41a <flash_byte>
								timeout=TIMEOUT_HEX_DATA/0.010;
								ihex_char(fifo_read_char());
								if(ihex_byte_count)
								{
									char_ptr = ihex_data;
									while(ihex_byte_count--)
   1e1b0:	80 91 30 04 	lds	r24, 0x0430
   1e1b4:	81 50       	subi	r24, 0x01	; 1
   1e1b6:	80 93 30 04 	sts	0x0430, r24
   1e1ba:	8f 5f       	subi	r24, 0xFF	; 255
   1e1bc:	f1 f6       	brne	.-68     	; 0x1e17a <main+0x92>
										flash_byte(ihex_address++, *char_ptr++);
									ihex_byte_count=0;
   1e1be:	10 92 30 04 	sts	0x0430, r1
								};
								if(ihex_status==IHEX_STATUS_EOF)
   1e1c2:	80 91 1f 04 	lds	r24, 0x041F
   1e1c6:	81 30       	cpi	r24, 0x01	; 1
   1e1c8:	09 f0       	breq	.+2      	; 0x1e1cc <main+0xe4>
   1e1ca:	62 c0       	rjmp	.+196    	; 0x1e290 <main+0x1a8>
								{
									flash_finish();
   1e1cc:	0e 94 0a f2 	call	0x1e414	; 0x1e414 <flash_finish>
									if(!writer_failed)
   1e1d0:	80 91 b8 01 	lds	r24, 0x01B8
   1e1d4:	88 23       	and	r24, r24
   1e1d6:	09 f0       	breq	.+2      	; 0x1e1da <main+0xf2>
   1e1d8:	5b c0       	rjmp	.+182    	; 0x1e290 <main+0x1a8>
									{
										UART_TX("Success!\r\n");
   1e1da:	8f e3       	ldi	r24, 0x3F	; 63
   1e1dc:	91 e0       	ldi	r25, 0x01	; 1
   1e1de:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
   1e1e2:	11 e0       	ldi	r17, 0x01	; 1
   1e1e4:	56 c0       	rjmp	.+172    	; 0x1e292 <main+0x1aa>
									};							
								};
							}
							else
							{
								timeout--;
   1e1e6:	21 97       	sbiw	r28, 0x01	; 1
   1e1e8:	c7 01       	movw	r24, r14
   1e1ea:	01 97       	sbiw	r24, 0x01	; 1
   1e1ec:	f1 f7       	brne	.-4      	; 0x1e1ea <main+0x102>
								_delay_ms(10);
							};
							
							if(!timeout)	//if timeout looking for hex data, repeat Z prompt
   1e1ee:	20 97       	sbiw	r28, 0x00	; 0
   1e1f0:	11 f0       	breq	.+4      	; 0x1e1f6 <main+0x10e>
   1e1f2:	90 e0       	ldi	r25, 0x00	; 0
   1e1f4:	05 c0       	rjmp	.+10     	; 0x1e200 <main+0x118>
							{
								UART_TX("Timeout waiting for hex data\r\n");
   1e1f6:	8a e4       	ldi	r24, 0x4A	; 74
   1e1f8:	91 e0       	ldi	r25, 0x01	; 1
   1e1fa:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
   1e1fe:	91 e0       	ldi	r25, 0x01	; 1
   1e200:	10 e0       	ldi	r17, 0x00	; 0
								failed=TRUE;
							};
							
							if(ihex_status == IHEX_STATUS_ERROR)
   1e202:	80 91 1f 04 	lds	r24, 0x041F
   1e206:	82 30       	cpi	r24, 0x02	; 2
   1e208:	29 f4       	brne	.+10     	; 0x1e214 <main+0x12c>
							{
								UART_TX("Hex file ERROR!\r\n");
   1e20a:	89 e6       	ldi	r24, 0x69	; 105
   1e20c:	91 e0       	ldi	r25, 0x01	; 1
   1e20e:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
   1e212:	43 c0       	rjmp	.+134    	; 0x1e29a <main+0x1b2>
								failed=TRUE;
							};
							
						}while(!failed && !finished);
   1e214:	99 23       	and	r25, r25
   1e216:	09 f0       	breq	.+2      	; 0x1e21a <main+0x132>
   1e218:	40 c0       	rjmp	.+128    	; 0x1e29a <main+0x1b2>
   1e21a:	11 23       	and	r17, r17
   1e21c:	09 f4       	brne	.+2      	; 0x1e220 <main+0x138>
   1e21e:	9d cf       	rjmp	.-198    	; 0x1e15a <main+0x72>
   1e220:	0d c0       	rjmp	.+26     	; 0x1e23c <main+0x154>
					};
				}
				else
				{
					timeout--;
   1e222:	21 50       	subi	r18, 0x01	; 1
   1e224:	30 40       	sbci	r19, 0x00	; 0
   1e226:	c7 01       	movw	r24, r14
   1e228:	01 97       	sbiw	r24, 0x01	; 1
   1e22a:	f1 f7       	brne	.-4      	; 0x1e228 <main+0x140>
					_delay_ms(10);
					if(!timeout)	//if timeout looking for Z, finish and run main app
   1e22c:	21 15       	cp	r18, r1
   1e22e:	31 05       	cpc	r19, r1
   1e230:	09 f0       	breq	.+2      	; 0x1e234 <main+0x14c>
   1e232:	82 cf       	rjmp	.-252    	; 0x1e138 <main+0x50>
					{
						finished=TRUE;
						UART_TX("Timeout waiting for Z\r\n");
   1e234:	8b e7       	ldi	r24, 0x7B	; 123
   1e236:	91 e0       	ldi	r25, 0x01	; 1
   1e238:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
		
		UART_TX("RUNNING\r\n");
   1e23c:	83 e9       	ldi	r24, 0x93	; 147
   1e23e:	91 e0       	ldi	r25, 0x01	; 1
   1e240:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
   1e244:	88 e8       	ldi	r24, 0x88	; 136
   1e246:	93 e1       	ldi	r25, 0x13	; 19
   1e248:	28 ec       	ldi	r18, 0xC8	; 200
   1e24a:	30 e0       	ldi	r19, 0x00	; 0
   1e24c:	f9 01       	movw	r30, r18
   1e24e:	31 97       	sbiw	r30, 0x01	; 1
   1e250:	f1 f7       	brne	.-4      	; 0x1e24e <main+0x166>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1e252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1e254:	d9 f7       	brne	.-10     	; 0x1e24c <main+0x164>
		_delay_ms(500);
		cli();
   1e256:	f8 94       	cli
		MCUCR = _BV(IVCE);
   1e258:	81 e0       	ldi	r24, 0x01	; 1
   1e25a:	85 bf       	out	0x35, r24	; 53
		MCUCR = 0;
   1e25c:	15 be       	out	0x35, r1	; 53
		wdt_enable(WDTO_15MS);
   1e25e:	28 e0       	ldi	r18, 0x08	; 8
   1e260:	88 e1       	ldi	r24, 0x18	; 24
   1e262:	90 e0       	ldi	r25, 0x00	; 0
   1e264:	0f b6       	in	r0, 0x3f	; 63
   1e266:	f8 94       	cli
   1e268:	a8 95       	wdr
   1e26a:	80 93 60 00 	sts	0x0060, r24
   1e26e:	0f be       	out	0x3f, r0	; 63
   1e270:	20 93 60 00 	sts	0x0060, r18
   1e274:	ff cf       	rjmp	.-2      	; 0x1e274 <main+0x18c>
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e276:	e0 91 b6 01 	lds	r30, 0x01B6
   1e27a:	f0 91 b7 01 	lds	r31, 0x01B7
   1e27e:	09 95       	icall

	return 0;
}
   1e280:	80 e0       	ldi	r24, 0x00	; 0
   1e282:	90 e0       	ldi	r25, 0x00	; 0
   1e284:	df 91       	pop	r29
   1e286:	cf 91       	pop	r28
   1e288:	1f 91       	pop	r17
   1e28a:	ff 90       	pop	r15
   1e28c:	ef 90       	pop	r14
   1e28e:	08 95       	ret
		wdt_enable(WDTO_15MS);
		while(1);
		//once finished run main app
	};
	
	(*mainapp)();
   1e290:	10 e0       	ldi	r17, 0x00	; 0
   1e292:	90 e0       	ldi	r25, 0x00	; 0
   1e294:	c0 e7       	ldi	r28, 0x70	; 112
   1e296:	d7 e1       	ldi	r29, 0x17	; 23
   1e298:	b4 cf       	rjmp	.-152    	; 0x1e202 <main+0x11a>
				
			//look for Z while not failed and not finished (a failure must repeat z prompt)
			}while(!failed && !finished);
			
		//repeat Z prompt until finished
		}while(!finished);
   1e29a:	11 23       	and	r17, r17
   1e29c:	09 f4       	brne	.+2      	; 0x1e2a0 <main+0x1b8>
   1e29e:	37 cf       	rjmp	.-402    	; 0x1e10e <main+0x26>
   1e2a0:	cd cf       	rjmp	.-102    	; 0x1e23c <main+0x154>

0001e2a2 <memcmp_farP>:
{
	write_page();
}

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
   1e2a2:	1f 93       	push	r17
   1e2a4:	dc 01       	movw	r26, r24
   1e2a6:	10 e0       	ldi	r17, 0x00	; 0
   1e2a8:	11 c0       	rjmp	.+34     	; 0x1e2cc <memcmp_farP+0x2a>
	char retval=0;

	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e2aa:	6b bf       	out	0x3b, r22	; 59
   1e2ac:	fa 01       	movw	r30, r20
   1e2ae:	97 91       	elpm	r25, Z+
   1e2b0:	8c 91       	ld	r24, X
   1e2b2:	89 17       	cp	r24, r25
   1e2b4:	21 f0       	breq	.+8      	; 0x1e2be <memcmp_farP+0x1c>
   1e2b6:	20 e0       	ldi	r18, 0x00	; 0
   1e2b8:	30 e0       	ldi	r19, 0x00	; 0
   1e2ba:	11 e0       	ldi	r17, 0x01	; 1
   1e2bc:	02 c0       	rjmp	.+4      	; 0x1e2c2 <memcmp_farP+0x20>

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e2be:	21 50       	subi	r18, 0x01	; 1
   1e2c0:	30 40       	sbci	r19, 0x00	; 0
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e2c2:	4f 5f       	subi	r20, 0xFF	; 255
   1e2c4:	5f 4f       	sbci	r21, 0xFF	; 255
   1e2c6:	6f 4f       	sbci	r22, 0xFF	; 255
   1e2c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1e2ca:	11 96       	adiw	r26, 0x01	; 1

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e2cc:	21 15       	cp	r18, r1
   1e2ce:	31 05       	cpc	r19, r1
   1e2d0:	61 f7       	brne	.-40     	; 0x1e2aa <memcmp_farP+0x8>
			retval=1;
			size=0;
		};
	};
	return retval;
}
   1e2d2:	81 2f       	mov	r24, r17
   1e2d4:	1f 91       	pop	r17
   1e2d6:	08 95       	ret

0001e2d8 <write_page>:

void write_page(void)
{		
   1e2d8:	cf 92       	push	r12
   1e2da:	df 92       	push	r13
   1e2dc:	ef 92       	push	r14
   1e2de:	ff 92       	push	r15
   1e2e0:	0f 93       	push	r16
   1e2e2:	1f 93       	push	r17
   1e2e4:	cf 93       	push	r28
   1e2e6:	df 93       	push	r29
   1e2e8:	0a e0       	ldi	r16, 0x0A	; 10
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
			tempint2+=buffer_verify[tempint];
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				boot_page_fill(progmem_add, tempint2);	
   1e2ea:	cc 24       	eor	r12, r12
   1e2ec:	c3 94       	inc	r12
			tempint+=2;
		};
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_erase(current_page);
   1e2ee:	23 e0       	ldi	r18, 0x03	; 3
   1e2f0:	d2 2e       	mov	r13, r18
		}
		boot_spm_busy_wait();      // Wait until the memory is erased.
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_write(current_page);
   1e2f2:	95 e0       	ldi	r25, 0x05	; 5
   1e2f4:	e9 2e       	mov	r14, r25
		}
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		
		progmem_add = current_page;
		boot_rww_enable();
   1e2f6:	81 e1       	ldi	r24, 0x11	; 17
   1e2f8:	f8 2e       	mov	r15, r24
	unsigned int tempint, tempint2;
	
	do
	{
		//fill buffer
		progmem_add = current_page;
   1e2fa:	20 91 b1 01 	lds	r18, 0x01B1
   1e2fe:	30 91 b2 01 	lds	r19, 0x01B2
   1e302:	40 91 b3 01 	lds	r20, 0x01B3
   1e306:	50 91 b4 01 	lds	r21, 0x01B4
   1e30a:	a6 ec       	ldi	r26, 0xC6	; 198
   1e30c:	b1 e0       	ldi	r27, 0x01	; 1
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
		{
			tempint2=buffer_verify[tempint+1];
			tempint2<<=8;
   1e30e:	11 96       	adiw	r26, 0x01	; 1
   1e310:	dc 91       	ld	r29, X
   1e312:	11 97       	sbiw	r26, 0x01	; 1
   1e314:	c0 e0       	ldi	r28, 0x00	; 0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e316:	f8 94       	cli
			tempint2+=buffer_verify[tempint];
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				boot_page_fill(progmem_add, tempint2);	
   1e318:	8c 91       	ld	r24, X
   1e31a:	be 01       	movw	r22, r28
   1e31c:	68 0f       	add	r22, r24
   1e31e:	71 1d       	adc	r23, r1
   1e320:	0b 01       	movw	r0, r22
   1e322:	f9 01       	movw	r30, r18
   1e324:	40 93 5b 00 	sts	0x005B, r20
   1e328:	c0 92 57 00 	sts	0x0057, r12
   1e32c:	e8 95       	spm
   1e32e:	11 24       	eor	r1, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e330:	78 94       	sei
			}
			progmem_add+=2;
   1e332:	2e 5f       	subi	r18, 0xFE	; 254
   1e334:	3f 4f       	sbci	r19, 0xFF	; 255
   1e336:	4f 4f       	sbci	r20, 0xFF	; 255
   1e338:	5f 4f       	sbci	r21, 0xFF	; 255
   1e33a:	12 96       	adiw	r26, 0x02	; 2
	do
	{
		//fill buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e33c:	72 e0       	ldi	r23, 0x02	; 2
   1e33e:	a6 3c       	cpi	r26, 0xC6	; 198
   1e340:	b7 07       	cpc	r27, r23
   1e342:	29 f7       	brne	.-54     	; 0x1e30e <write_page+0x36>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e344:	f8 94       	cli
			tempint+=2;
		};
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_erase(current_page);
   1e346:	80 91 b1 01 	lds	r24, 0x01B1
   1e34a:	90 91 b2 01 	lds	r25, 0x01B2
   1e34e:	a0 91 b3 01 	lds	r26, 0x01B3
   1e352:	b0 91 b4 01 	lds	r27, 0x01B4
   1e356:	fc 01       	movw	r30, r24
   1e358:	a0 93 5b 00 	sts	0x005B, r26
   1e35c:	d0 92 57 00 	sts	0x0057, r13
   1e360:	e8 95       	spm
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e362:	78 94       	sei
		}
		boot_spm_busy_wait();      // Wait until the memory is erased.
   1e364:	07 b6       	in	r0, 0x37	; 55
   1e366:	00 fc       	sbrc	r0, 0
   1e368:	fd cf       	rjmp	.-6      	; 0x1e364 <write_page+0x8c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e36a:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			boot_page_write(current_page);
   1e36c:	80 91 b1 01 	lds	r24, 0x01B1
   1e370:	90 91 b2 01 	lds	r25, 0x01B2
   1e374:	a0 91 b3 01 	lds	r26, 0x01B3
   1e378:	b0 91 b4 01 	lds	r27, 0x01B4
   1e37c:	fc 01       	movw	r30, r24
   1e37e:	a0 93 5b 00 	sts	0x005B, r26
   1e382:	e0 92 57 00 	sts	0x0057, r14
   1e386:	e8 95       	spm
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e388:	78 94       	sei
		}
		boot_spm_busy_wait();      // Wait until the memory is programmed.
   1e38a:	07 b6       	in	r0, 0x37	; 55
   1e38c:	00 fc       	sbrc	r0, 0
   1e38e:	fd cf       	rjmp	.-6      	; 0x1e38a <write_page+0xb2>
		
		progmem_add = current_page;
   1e390:	20 91 b1 01 	lds	r18, 0x01B1
   1e394:	30 91 b2 01 	lds	r19, 0x01B2
   1e398:	40 91 b3 01 	lds	r20, 0x01B3
   1e39c:	50 91 b4 01 	lds	r21, 0x01B4
		boot_rww_enable();
   1e3a0:	f0 92 57 00 	sts	0x0057, r15
   1e3a4:	e8 95       	spm
   1e3a6:	a6 ec       	ldi	r26, 0xC6	; 198
   1e3a8:	b1 e0       	ldi	r27, 0x01	; 1
   1e3aa:	60 e0       	ldi	r22, 0x00	; 0
   1e3ac:	71 e0       	ldi	r23, 0x01	; 1
   1e3ae:	10 e0       	ldi	r17, 0x00	; 0
{
	char retval=0;

	while(size--)
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e3b0:	4b bf       	out	0x3b, r20	; 59
   1e3b2:	f9 01       	movw	r30, r18
   1e3b4:	97 91       	elpm	r25, Z+
   1e3b6:	8c 91       	ld	r24, X
   1e3b8:	89 17       	cp	r24, r25
   1e3ba:	21 f0       	breq	.+8      	; 0x1e3c4 <write_page+0xec>
   1e3bc:	11 e0       	ldi	r17, 0x01	; 1
   1e3be:	60 e0       	ldi	r22, 0x00	; 0
   1e3c0:	70 e0       	ldi	r23, 0x00	; 0
   1e3c2:	02 c0       	rjmp	.+4      	; 0x1e3c8 <write_page+0xf0>

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e3c4:	61 50       	subi	r22, 0x01	; 1
   1e3c6:	70 40       	sbci	r23, 0x00	; 0
	{
		if( (*(char*)ram_ptr++) != pgm_read_byte_far(progmem_add++) )
   1e3c8:	2f 5f       	subi	r18, 0xFF	; 255
   1e3ca:	3f 4f       	sbci	r19, 0xFF	; 255
   1e3cc:	4f 4f       	sbci	r20, 0xFF	; 255
   1e3ce:	5f 4f       	sbci	r21, 0xFF	; 255
   1e3d0:	11 96       	adiw	r26, 0x01	; 1

char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size)
{
	char retval=0;

	while(size--)
   1e3d2:	61 15       	cp	r22, r1
   1e3d4:	71 05       	cpc	r23, r1
   1e3d6:	61 f7       	brne	.-40     	; 0x1e3b0 <write_page+0xd8>
		boot_spm_busy_wait();      // Wait until the memory is programmed.
		
		progmem_add = current_page;
		boot_rww_enable();
		
		if( memcmp_farP(buffer_verify, progmem_add, FLASH_PAGE_SIZE) )
   1e3d8:	11 23       	and	r17, r17
   1e3da:	11 f4       	brne	.+4      	; 0x1e3e0 <write_page+0x108>
   1e3dc:	81 e0       	ldi	r24, 0x01	; 1
   1e3de:	06 c0       	rjmp	.+12     	; 0x1e3ec <write_page+0x114>
		{
			UART_TX("Retrying\r\n");
   1e3e0:	8d e9       	ldi	r24, 0x9D	; 157
   1e3e2:	91 e0       	ldi	r25, 0x01	; 1
   1e3e4:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
			retry--;
   1e3e8:	01 50       	subi	r16, 0x01	; 1
   1e3ea:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
			verified=TRUE;
			
	}while(retry && !verified);
   1e3ec:	00 23       	and	r16, r16
   1e3ee:	21 f0       	breq	.+8      	; 0x1e3f8 <write_page+0x120>
   1e3f0:	88 23       	and	r24, r24
   1e3f2:	09 f4       	brne	.+2      	; 0x1e3f6 <write_page+0x11e>
   1e3f4:	82 cf       	rjmp	.-252    	; 0x1e2fa <write_page+0x22>
   1e3f6:	05 c0       	rjmp	.+10     	; 0x1e402 <write_page+0x12a>
	
	if(!verified)
   1e3f8:	88 23       	and	r24, r24
   1e3fa:	19 f4       	brne	.+6      	; 0x1e402 <write_page+0x12a>
		writer_failed=TRUE;
   1e3fc:	81 e0       	ldi	r24, 0x01	; 1
   1e3fe:	80 93 b8 01 	sts	0x01B8, r24
}
   1e402:	df 91       	pop	r29
   1e404:	cf 91       	pop	r28
   1e406:	1f 91       	pop	r17
   1e408:	0f 91       	pop	r16
   1e40a:	ff 90       	pop	r15
   1e40c:	ef 90       	pop	r14
   1e40e:	df 90       	pop	r13
   1e410:	cf 90       	pop	r12
   1e412:	08 95       	ret

0001e414 <flash_finish>:
	write_needed=TRUE;
}

void flash_finish(void)
{
	write_page();
   1e414:	0e 94 6c f1 	call	0x1e2d8	; 0x1e2d8 <write_page>
}
   1e418:	08 95       	ret

0001e41a <flash_byte>:
	char memcmp_farP(void* ram_ptr, unsigned long progmem_add, unsigned int size);
	void write_page(void);

// call with bytes, builds pages and writes pages to flash.
void flash_byte(unsigned long address, char byte)
{
   1e41a:	9f 92       	push	r9
   1e41c:	af 92       	push	r10
   1e41e:	bf 92       	push	r11
   1e420:	cf 92       	push	r12
   1e422:	df 92       	push	r13
   1e424:	ef 92       	push	r14
   1e426:	ff 92       	push	r15
   1e428:	0f 93       	push	r16
   1e42a:	1f 93       	push	r17
   1e42c:	df 93       	push	r29
   1e42e:	cf 93       	push	r28
   1e430:	cd b7       	in	r28, 0x3d	; 61
   1e432:	de b7       	in	r29, 0x3e	; 62
   1e434:	2a 97       	sbiw	r28, 0x0a	; 10
   1e436:	0f b6       	in	r0, 0x3f	; 63
   1e438:	f8 94       	cli
   1e43a:	de bf       	out	0x3e, r29	; 62
   1e43c:	0f be       	out	0x3f, r0	; 63
   1e43e:	cd bf       	out	0x3d, r28	; 61
   1e440:	5b 01       	movw	r10, r22
   1e442:	6c 01       	movw	r12, r24
   1e444:	94 2e       	mov	r9, r20
	static char write_needed=FALSE;
	int tempint=0;
	unsigned long progmem_add;

	//new page?
	if((address & FLASH_PAGE_MASK) != current_page)
   1e446:	e1 2c       	mov	r14, r1
   1e448:	3f ef       	ldi	r19, 0xFF	; 255
   1e44a:	f3 2e       	mov	r15, r19
   1e44c:	3f ef       	ldi	r19, 0xFF	; 255
   1e44e:	03 2f       	mov	r16, r19
   1e450:	3f ef       	ldi	r19, 0xFF	; 255
   1e452:	13 2f       	mov	r17, r19
   1e454:	e6 22       	and	r14, r22
   1e456:	f7 22       	and	r15, r23
   1e458:	08 23       	and	r16, r24
   1e45a:	19 23       	and	r17, r25
   1e45c:	80 91 b1 01 	lds	r24, 0x01B1
   1e460:	90 91 b2 01 	lds	r25, 0x01B2
   1e464:	a0 91 b3 01 	lds	r26, 0x01B3
   1e468:	b0 91 b4 01 	lds	r27, 0x01B4
   1e46c:	e8 16       	cp	r14, r24
   1e46e:	f9 06       	cpc	r15, r25
   1e470:	0a 07       	cpc	r16, r26
   1e472:	1b 07       	cpc	r17, r27
   1e474:	09 f4       	brne	.+2      	; 0x1e478 <flash_byte+0x5e>
   1e476:	44 c0       	rjmp	.+136    	; 0x1e500 <flash_byte+0xe6>
	{
		//write previous page (if there is one)
		if(write_needed)
   1e478:	80 91 b9 01 	lds	r24, 0x01B9
   1e47c:	88 23       	and	r24, r24
   1e47e:	11 f0       	breq	.+4      	; 0x1e484 <flash_byte+0x6a>
			write_page();
   1e480:	0e 94 6c f1 	call	0x1e2d8	; 0x1e2d8 <write_page>
		
		current_page = address & FLASH_PAGE_MASK;
   1e484:	e0 92 b1 01 	sts	0x01B1, r14
   1e488:	f0 92 b2 01 	sts	0x01B2, r15
   1e48c:	00 93 b3 01 	sts	0x01B3, r16
   1e490:	10 93 b4 01 	sts	0x01B4, r17
		
		UART_TX("PAGE ");
   1e494:	88 ea       	ldi	r24, 0xA8	; 168
   1e496:	91 e0       	ldi	r25, 0x01	; 1
   1e498:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
		UART_TX(ltoa(current_page, tempbuf, 16));
   1e49c:	60 91 b1 01 	lds	r22, 0x01B1
   1e4a0:	70 91 b2 01 	lds	r23, 0x01B2
   1e4a4:	80 91 b3 01 	lds	r24, 0x01B3
   1e4a8:	90 91 b4 01 	lds	r25, 0x01B4
   1e4ac:	ae 01       	movw	r20, r28
   1e4ae:	4f 5f       	subi	r20, 0xFF	; 255
   1e4b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1e4b2:	20 e1       	ldi	r18, 0x10	; 16
   1e4b4:	30 e0       	ldi	r19, 0x00	; 0
   1e4b6:	0e 94 e0 f6 	call	0x1edc0	; 0x1edc0 <ltoa>
   1e4ba:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
		UART_TX("\r\n");
   1e4be:	8e ea       	ldi	r24, 0xAE	; 174
   1e4c0:	91 e0       	ldi	r25, 0x01	; 1
   1e4c2:	0e 94 9a f2 	call	0x1e534	; 0x1e534 <uart_write_string>
		
		//read new page into buffer
		progmem_add = current_page;
   1e4c6:	80 91 b1 01 	lds	r24, 0x01B1
   1e4ca:	90 91 b2 01 	lds	r25, 0x01B2
   1e4ce:	a0 91 b3 01 	lds	r26, 0x01B3
   1e4d2:	b0 91 b4 01 	lds	r27, 0x01B4
   1e4d6:	26 ec       	ldi	r18, 0xC6	; 198
   1e4d8:	31 e0       	ldi	r19, 0x01	; 1
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
   1e4da:	ac 01       	movw	r20, r24
   1e4dc:	bd 01       	movw	r22, r26
   1e4de:	4f 5f       	subi	r20, 0xFF	; 255
   1e4e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1e4e2:	6f 4f       	sbci	r22, 0xFF	; 255
   1e4e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1e4e6:	ab bf       	out	0x3b, r26	; 59
   1e4e8:	fc 01       	movw	r30, r24
   1e4ea:	87 91       	elpm	r24, Z+
   1e4ec:	f9 01       	movw	r30, r18
   1e4ee:	81 93       	st	Z+, r24
   1e4f0:	9f 01       	movw	r18, r30
		UART_TX("\r\n");
		
		//read new page into buffer
		progmem_add = current_page;
		tempint=0;
		while(tempint!=FLASH_PAGE_SIZE)
   1e4f2:	f2 e0       	ldi	r31, 0x02	; 2
   1e4f4:	26 3c       	cpi	r18, 0xC6	; 198
   1e4f6:	3f 07       	cpc	r19, r31
   1e4f8:	19 f0       	breq	.+6      	; 0x1e500 <flash_byte+0xe6>
   1e4fa:	db 01       	movw	r26, r22
   1e4fc:	ca 01       	movw	r24, r20
   1e4fe:	ed cf       	rjmp	.-38     	; 0x1e4da <flash_byte+0xc0>
			buffer_verify[tempint++]=pgm_read_byte_far(progmem_add++);
	};

	buffer_verify[address&0xFF]=byte;
   1e500:	f5 01       	movw	r30, r10
   1e502:	f0 70       	andi	r31, 0x00	; 0
   1e504:	ea 53       	subi	r30, 0x3A	; 58
   1e506:	fe 4f       	sbci	r31, 0xFE	; 254
   1e508:	90 82       	st	Z, r9
//	buffer_verify[(address+1)&0xFF]=(char)(word>>8);
	write_needed=TRUE;
   1e50a:	81 e0       	ldi	r24, 0x01	; 1
   1e50c:	80 93 b9 01 	sts	0x01B9, r24
}
   1e510:	2a 96       	adiw	r28, 0x0a	; 10
   1e512:	0f b6       	in	r0, 0x3f	; 63
   1e514:	f8 94       	cli
   1e516:	de bf       	out	0x3e, r29	; 62
   1e518:	0f be       	out	0x3f, r0	; 63
   1e51a:	cd bf       	out	0x3d, r28	; 61
   1e51c:	cf 91       	pop	r28
   1e51e:	df 91       	pop	r29
   1e520:	1f 91       	pop	r17
   1e522:	0f 91       	pop	r16
   1e524:	ff 90       	pop	r15
   1e526:	ef 90       	pop	r14
   1e528:	df 90       	pop	r13
   1e52a:	cf 90       	pop	r12
   1e52c:	bf 90       	pop	r11
   1e52e:	af 90       	pop	r10
   1e530:	9f 90       	pop	r9
   1e532:	08 95       	ret

0001e534 <uart_write_string>:
	};
	return found;
}

void uart_write_string(char*string)
{
   1e534:	cf 93       	push	r28
   1e536:	df 93       	push	r29
   1e538:	ec 01       	movw	r28, r24
   1e53a:	37 c0       	rjmp	.+110    	; 0x1e5aa <uart_write_string+0x76>
	while(*string)
	{
		while(uart_fifo_tx.bytes_free==0);
   1e53c:	80 91 d1 03 	lds	r24, 0x03D1
   1e540:	88 23       	and	r24, r24
   1e542:	e1 f3       	breq	.-8      	; 0x1e53c <uart_write_string+0x8>
		
		*((char*)uart_fifo_tx.head_ptr) = *string;
   1e544:	e0 91 d3 03 	lds	r30, 0x03D3
   1e548:	f0 91 d4 03 	lds	r31, 0x03D4
   1e54c:	90 83       	st	Z, r25
		uart_fifo_tx.head_ptr++;
   1e54e:	80 91 d3 03 	lds	r24, 0x03D3
   1e552:	90 91 d4 03 	lds	r25, 0x03D4
   1e556:	01 96       	adiw	r24, 0x01	; 1
   1e558:	90 93 d4 03 	sts	0x03D4, r25
   1e55c:	80 93 d3 03 	sts	0x03D3, r24
		
		if(uart_fifo_tx.head_ptr == uart_fifo_tx.end)
   1e560:	20 91 d3 03 	lds	r18, 0x03D3
   1e564:	30 91 d4 03 	lds	r19, 0x03D4
   1e568:	80 91 d9 03 	lds	r24, 0x03D9
   1e56c:	90 91 da 03 	lds	r25, 0x03DA
   1e570:	28 17       	cp	r18, r24
   1e572:	39 07       	cpc	r19, r25
   1e574:	41 f4       	brne	.+16     	; 0x1e586 <uart_write_string+0x52>
			uart_fifo_tx.head_ptr = uart_fifo_tx.start;
   1e576:	80 91 d7 03 	lds	r24, 0x03D7
   1e57a:	90 91 d8 03 	lds	r25, 0x03D8
   1e57e:	90 93 d4 03 	sts	0x03D4, r25
   1e582:	80 93 d3 03 	sts	0x03D3, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e586:	f8 94       	cli
		
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			uart_fifo_tx.bytes_free --;
   1e588:	80 91 d1 03 	lds	r24, 0x03D1
   1e58c:	81 50       	subi	r24, 0x01	; 1
   1e58e:	80 93 d1 03 	sts	0x03D1, r24
			uart_fifo_tx.bytes_used ++;
   1e592:	80 91 d2 03 	lds	r24, 0x03D2
   1e596:	8f 5f       	subi	r24, 0xFF	; 255
   1e598:	80 93 d2 03 	sts	0x03D2, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1e59c:	78 94       	sei
		}
		
		uart_fifo_tx.post_fptr();
   1e59e:	e0 91 db 03 	lds	r30, 0x03DB
   1e5a2:	f0 91 dc 03 	lds	r31, 0x03DC
   1e5a6:	09 95       	icall
		string++;
   1e5a8:	21 96       	adiw	r28, 0x01	; 1
	return found;
}

void uart_write_string(char*string)
{
	while(*string)
   1e5aa:	98 81       	ld	r25, Y
   1e5ac:	99 23       	and	r25, r25
   1e5ae:	31 f6       	brne	.-116    	; 0x1e53c <uart_write_string+0x8>
		}
		
		uart_fifo_tx.post_fptr();
		string++;
	};
}
   1e5b0:	df 91       	pop	r29
   1e5b2:	cf 91       	pop	r28
   1e5b4:	08 95       	ret

0001e5b6 <uart0_isrtx_enable>:

void uart0_isrtx_enable(void)
{
	UCSR0B |= _BV(UDRIE0);	// tx interrupt
   1e5b6:	e1 ec       	ldi	r30, 0xC1	; 193
   1e5b8:	f0 e0       	ldi	r31, 0x00	; 0
   1e5ba:	80 81       	ld	r24, Z
   1e5bc:	80 62       	ori	r24, 0x20	; 32
   1e5be:	80 83       	st	Z, r24
}
   1e5c0:	08 95       	ret

0001e5c2 <uart1_isrtx_enable>:

void uart1_isrtx_enable(void)
{
	UCSR1B |= _BV(UDRIE1);	// tx interrupt
   1e5c2:	e9 ec       	ldi	r30, 0xC9	; 201
   1e5c4:	f0 e0       	ldi	r31, 0x00	; 0
   1e5c6:	80 81       	ld	r24, Z
   1e5c8:	80 62       	ori	r24, 0x20	; 32
   1e5ca:	80 83       	st	Z, r24
}
   1e5cc:	08 95       	ret

0001e5ce <__vector_21>:

ISR(USART0_RX_vect)
{
   1e5ce:	1f 92       	push	r1
   1e5d0:	0f 92       	push	r0
   1e5d2:	0f b6       	in	r0, 0x3f	; 63
   1e5d4:	0f 92       	push	r0
   1e5d6:	0b b6       	in	r0, 0x3b	; 59
   1e5d8:	0f 92       	push	r0
   1e5da:	11 24       	eor	r1, r1
   1e5dc:	2f 93       	push	r18
   1e5de:	3f 93       	push	r19
   1e5e0:	8f 93       	push	r24
   1e5e2:	9f 93       	push	r25
   1e5e4:	ef 93       	push	r30
   1e5e6:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR0;
   1e5e8:	e0 91 c8 02 	lds	r30, 0x02C8
   1e5ec:	f0 91 c9 02 	lds	r31, 0x02C9
   1e5f0:	80 91 c6 00 	lds	r24, 0x00C6
   1e5f4:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e5f6:	80 91 c8 02 	lds	r24, 0x02C8
   1e5fa:	90 91 c9 02 	lds	r25, 0x02C9
   1e5fe:	01 96       	adiw	r24, 0x01	; 1
   1e600:	90 93 c9 02 	sts	0x02C9, r25
   1e604:	80 93 c8 02 	sts	0x02C8, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e608:	20 91 c8 02 	lds	r18, 0x02C8
   1e60c:	30 91 c9 02 	lds	r19, 0x02C9
   1e610:	80 91 ce 02 	lds	r24, 0x02CE
   1e614:	90 91 cf 02 	lds	r25, 0x02CF
   1e618:	28 17       	cp	r18, r24
   1e61a:	39 07       	cpc	r19, r25
   1e61c:	41 f4       	brne	.+16     	; 0x1e62e <__vector_21+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e61e:	80 91 cc 02 	lds	r24, 0x02CC
   1e622:	90 91 cd 02 	lds	r25, 0x02CD
   1e626:	90 93 c9 02 	sts	0x02C9, r25
   1e62a:	80 93 c8 02 	sts	0x02C8, r24
	uart_fifo_rx.bytes_used ++;
   1e62e:	80 91 c7 02 	lds	r24, 0x02C7
   1e632:	8f 5f       	subi	r24, 0xFF	; 255
   1e634:	80 93 c7 02 	sts	0x02C7, r24
}
   1e638:	ff 91       	pop	r31
   1e63a:	ef 91       	pop	r30
   1e63c:	9f 91       	pop	r25
   1e63e:	8f 91       	pop	r24
   1e640:	3f 91       	pop	r19
   1e642:	2f 91       	pop	r18
   1e644:	0f 90       	pop	r0
   1e646:	0b be       	out	0x3b, r0	; 59
   1e648:	0f 90       	pop	r0
   1e64a:	0f be       	out	0x3f, r0	; 63
   1e64c:	0f 90       	pop	r0
   1e64e:	1f 90       	pop	r1
   1e650:	18 95       	reti

0001e652 <__vector_32>:

ISR(USART1_RX_vect)
{
   1e652:	1f 92       	push	r1
   1e654:	0f 92       	push	r0
   1e656:	0f b6       	in	r0, 0x3f	; 63
   1e658:	0f 92       	push	r0
   1e65a:	0b b6       	in	r0, 0x3b	; 59
   1e65c:	0f 92       	push	r0
   1e65e:	11 24       	eor	r1, r1
   1e660:	2f 93       	push	r18
   1e662:	3f 93       	push	r19
   1e664:	8f 93       	push	r24
   1e666:	9f 93       	push	r25
   1e668:	ef 93       	push	r30
   1e66a:	ff 93       	push	r31
	*((char*)uart_fifo_rx.head_ptr) = UDR1;
   1e66c:	e0 91 c8 02 	lds	r30, 0x02C8
   1e670:	f0 91 c9 02 	lds	r31, 0x02C9
   1e674:	80 91 ce 00 	lds	r24, 0x00CE
   1e678:	80 83       	st	Z, r24
	uart_fifo_rx.head_ptr++;
   1e67a:	80 91 c8 02 	lds	r24, 0x02C8
   1e67e:	90 91 c9 02 	lds	r25, 0x02C9
   1e682:	01 96       	adiw	r24, 0x01	; 1
   1e684:	90 93 c9 02 	sts	0x02C9, r25
   1e688:	80 93 c8 02 	sts	0x02C8, r24

	if(uart_fifo_rx.head_ptr == uart_fifo_rx.end)
   1e68c:	20 91 c8 02 	lds	r18, 0x02C8
   1e690:	30 91 c9 02 	lds	r19, 0x02C9
   1e694:	80 91 ce 02 	lds	r24, 0x02CE
   1e698:	90 91 cf 02 	lds	r25, 0x02CF
   1e69c:	28 17       	cp	r18, r24
   1e69e:	39 07       	cpc	r19, r25
   1e6a0:	41 f4       	brne	.+16     	; 0x1e6b2 <__vector_32+0x60>
		uart_fifo_rx.head_ptr = uart_fifo_rx.start;	
   1e6a2:	80 91 cc 02 	lds	r24, 0x02CC
   1e6a6:	90 91 cd 02 	lds	r25, 0x02CD
   1e6aa:	90 93 c9 02 	sts	0x02C9, r25
   1e6ae:	80 93 c8 02 	sts	0x02C8, r24
	uart_fifo_rx.bytes_used ++;
   1e6b2:	80 91 c7 02 	lds	r24, 0x02C7
   1e6b6:	8f 5f       	subi	r24, 0xFF	; 255
   1e6b8:	80 93 c7 02 	sts	0x02C7, r24
}
   1e6bc:	ff 91       	pop	r31
   1e6be:	ef 91       	pop	r30
   1e6c0:	9f 91       	pop	r25
   1e6c2:	8f 91       	pop	r24
   1e6c4:	3f 91       	pop	r19
   1e6c6:	2f 91       	pop	r18
   1e6c8:	0f 90       	pop	r0
   1e6ca:	0b be       	out	0x3b, r0	; 59
   1e6cc:	0f 90       	pop	r0
   1e6ce:	0f be       	out	0x3f, r0	; 63
   1e6d0:	0f 90       	pop	r0
   1e6d2:	1f 90       	pop	r1
   1e6d4:	18 95       	reti

0001e6d6 <__vector_22>:

ISR(USART0_UDRE_vect)
{
   1e6d6:	1f 92       	push	r1
   1e6d8:	0f 92       	push	r0
   1e6da:	0f b6       	in	r0, 0x3f	; 63
   1e6dc:	0f 92       	push	r0
   1e6de:	0b b6       	in	r0, 0x3b	; 59
   1e6e0:	0f 92       	push	r0
   1e6e2:	11 24       	eor	r1, r1
   1e6e4:	2f 93       	push	r18
   1e6e6:	3f 93       	push	r19
   1e6e8:	8f 93       	push	r24
   1e6ea:	9f 93       	push	r25
   1e6ec:	ef 93       	push	r30
   1e6ee:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1e6f0:	80 91 d2 03 	lds	r24, 0x03D2
   1e6f4:	88 23       	and	r24, r24
   1e6f6:	31 f4       	brne	.+12     	; 0x1e704 <__vector_22+0x2e>
		UCSR0B &= ~_BV(UDRIE0);			// disable tx interrupt
   1e6f8:	80 91 c1 00 	lds	r24, 0x00C1
   1e6fc:	8f 7d       	andi	r24, 0xDF	; 223
   1e6fe:	80 93 c1 00 	sts	0x00C1, r24
   1e702:	2d c0       	rjmp	.+90     	; 0x1e75e <__vector_22+0x88>
	else
	{
		UDR0=*((char*)uart_fifo_tx.tail_ptr);
   1e704:	e0 91 d5 03 	lds	r30, 0x03D5
   1e708:	f0 91 d6 03 	lds	r31, 0x03D6
   1e70c:	80 81       	ld	r24, Z
   1e70e:	80 93 c6 00 	sts	0x00C6, r24
		uart_fifo_tx.tail_ptr++;	
   1e712:	80 91 d5 03 	lds	r24, 0x03D5
   1e716:	90 91 d6 03 	lds	r25, 0x03D6
   1e71a:	01 96       	adiw	r24, 0x01	; 1
   1e71c:	90 93 d6 03 	sts	0x03D6, r25
   1e720:	80 93 d5 03 	sts	0x03D5, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1e724:	20 91 d5 03 	lds	r18, 0x03D5
   1e728:	30 91 d6 03 	lds	r19, 0x03D6
   1e72c:	80 91 d9 03 	lds	r24, 0x03D9
   1e730:	90 91 da 03 	lds	r25, 0x03DA
   1e734:	28 17       	cp	r18, r24
   1e736:	39 07       	cpc	r19, r25
   1e738:	41 f4       	brne	.+16     	; 0x1e74a <__vector_22+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1e73a:	80 91 d7 03 	lds	r24, 0x03D7
   1e73e:	90 91 d8 03 	lds	r25, 0x03D8
   1e742:	90 93 d6 03 	sts	0x03D6, r25
   1e746:	80 93 d5 03 	sts	0x03D5, r24
		
		uart_fifo_tx.bytes_free ++;
   1e74a:	80 91 d1 03 	lds	r24, 0x03D1
   1e74e:	8f 5f       	subi	r24, 0xFF	; 255
   1e750:	80 93 d1 03 	sts	0x03D1, r24
		uart_fifo_tx.bytes_used --;
   1e754:	80 91 d2 03 	lds	r24, 0x03D2
   1e758:	81 50       	subi	r24, 0x01	; 1
   1e75a:	80 93 d2 03 	sts	0x03D2, r24
	};
}
   1e75e:	ff 91       	pop	r31
   1e760:	ef 91       	pop	r30
   1e762:	9f 91       	pop	r25
   1e764:	8f 91       	pop	r24
   1e766:	3f 91       	pop	r19
   1e768:	2f 91       	pop	r18
   1e76a:	0f 90       	pop	r0
   1e76c:	0b be       	out	0x3b, r0	; 59
   1e76e:	0f 90       	pop	r0
   1e770:	0f be       	out	0x3f, r0	; 63
   1e772:	0f 90       	pop	r0
   1e774:	1f 90       	pop	r1
   1e776:	18 95       	reti

0001e778 <__vector_33>:

ISR(USART1_UDRE_vect)
{
   1e778:	1f 92       	push	r1
   1e77a:	0f 92       	push	r0
   1e77c:	0f b6       	in	r0, 0x3f	; 63
   1e77e:	0f 92       	push	r0
   1e780:	0b b6       	in	r0, 0x3b	; 59
   1e782:	0f 92       	push	r0
   1e784:	11 24       	eor	r1, r1
   1e786:	2f 93       	push	r18
   1e788:	3f 93       	push	r19
   1e78a:	8f 93       	push	r24
   1e78c:	9f 93       	push	r25
   1e78e:	ef 93       	push	r30
   1e790:	ff 93       	push	r31
	if(uart_fifo_tx.bytes_used==0)
   1e792:	80 91 d2 03 	lds	r24, 0x03D2
   1e796:	88 23       	and	r24, r24
   1e798:	31 f4       	brne	.+12     	; 0x1e7a6 <__vector_33+0x2e>
		UCSR1B &= ~_BV(UDRIE1);			// disable tx interrupt
   1e79a:	80 91 c9 00 	lds	r24, 0x00C9
   1e79e:	8f 7d       	andi	r24, 0xDF	; 223
   1e7a0:	80 93 c9 00 	sts	0x00C9, r24
   1e7a4:	2d c0       	rjmp	.+90     	; 0x1e800 <__vector_33+0x88>
	else
	{
		UDR1=*((char*)uart_fifo_tx.tail_ptr);
   1e7a6:	e0 91 d5 03 	lds	r30, 0x03D5
   1e7aa:	f0 91 d6 03 	lds	r31, 0x03D6
   1e7ae:	80 81       	ld	r24, Z
   1e7b0:	80 93 ce 00 	sts	0x00CE, r24
		uart_fifo_tx.tail_ptr++;
   1e7b4:	80 91 d5 03 	lds	r24, 0x03D5
   1e7b8:	90 91 d6 03 	lds	r25, 0x03D6
   1e7bc:	01 96       	adiw	r24, 0x01	; 1
   1e7be:	90 93 d6 03 	sts	0x03D6, r25
   1e7c2:	80 93 d5 03 	sts	0x03D5, r24
		
		if(uart_fifo_tx.tail_ptr == uart_fifo_tx.end)
   1e7c6:	20 91 d5 03 	lds	r18, 0x03D5
   1e7ca:	30 91 d6 03 	lds	r19, 0x03D6
   1e7ce:	80 91 d9 03 	lds	r24, 0x03D9
   1e7d2:	90 91 da 03 	lds	r25, 0x03DA
   1e7d6:	28 17       	cp	r18, r24
   1e7d8:	39 07       	cpc	r19, r25
   1e7da:	41 f4       	brne	.+16     	; 0x1e7ec <__vector_33+0x74>
			uart_fifo_tx.tail_ptr = uart_fifo_tx.start;
   1e7dc:	80 91 d7 03 	lds	r24, 0x03D7
   1e7e0:	90 91 d8 03 	lds	r25, 0x03D8
   1e7e4:	90 93 d6 03 	sts	0x03D6, r25
   1e7e8:	80 93 d5 03 	sts	0x03D5, r24
		
		uart_fifo_tx.bytes_free ++;
   1e7ec:	80 91 d1 03 	lds	r24, 0x03D1
   1e7f0:	8f 5f       	subi	r24, 0xFF	; 255
   1e7f2:	80 93 d1 03 	sts	0x03D1, r24
		uart_fifo_tx.bytes_used --;
   1e7f6:	80 91 d2 03 	lds	r24, 0x03D2
   1e7fa:	81 50       	subi	r24, 0x01	; 1
   1e7fc:	80 93 d2 03 	sts	0x03D2, r24
	};
}
   1e800:	ff 91       	pop	r31
   1e802:	ef 91       	pop	r30
   1e804:	9f 91       	pop	r25
   1e806:	8f 91       	pop	r24
   1e808:	3f 91       	pop	r19
   1e80a:	2f 91       	pop	r18
   1e80c:	0f 90       	pop	r0
   1e80e:	0b be       	out	0x3b, r0	; 59
   1e810:	0f 90       	pop	r0
   1e812:	0f be       	out	0x3f, r0	; 63
   1e814:	0f 90       	pop	r0
   1e816:	1f 90       	pop	r1
   1e818:	18 95       	reti

0001e81a <uart_init>:

	struct fifo_control uart_fifo_tx;
	struct fifo_control uart_fifo_rx;

char uart_init(void)
{
   1e81a:	cf 93       	push	r28
   1e81c:	df 93       	push	r29
	int tempint;
	char found=FALSE;

	//Uart0 already configured? (means bootloader called from main app)
	if(UCSR0B & _BV(RXEN0))
   1e81e:	80 91 c1 00 	lds	r24, 0x00C1
   1e822:	84 ff       	sbrs	r24, 4
   1e824:	0c c0       	rjmp	.+24     	; 0x1e83e <uart_init+0x24>
	{
		UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
   1e826:	80 91 c1 00 	lds	r24, 0x00C1
   1e82a:	80 68       	ori	r24, 0x80	; 128
   1e82c:	80 93 c1 00 	sts	0x00C1, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart0_isrtx_enable, uart_fifo_data_tx);
   1e830:	81 ed       	ldi	r24, 0xD1	; 209
   1e832:	93 e0       	ldi	r25, 0x03	; 3
   1e834:	60 e4       	ldi	r22, 0x40	; 64
   1e836:	70 e0       	ldi	r23, 0x00	; 0
   1e838:	4b ed       	ldi	r20, 0xDB	; 219
   1e83a:	52 ef       	ldi	r21, 0xF2	; 242
   1e83c:	0f c0       	rjmp	.+30     	; 0x1e85c <uart_init+0x42>
		fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
		found=TRUE;
	}
	else if(UCSR1B & _BV(RXEN1))
   1e83e:	80 91 c9 00 	lds	r24, 0x00C9
   1e842:	84 ff       	sbrs	r24, 4
   1e844:	1b c0       	rjmp	.+54     	; 0x1e87c <uart_init+0x62>
	{
		UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
   1e846:	80 91 c9 00 	lds	r24, 0x00C9
   1e84a:	80 68       	ori	r24, 0x80	; 128
   1e84c:	80 93 c9 00 	sts	0x00C9, r24
		fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart1_isrtx_enable, uart_fifo_data_tx);
   1e850:	81 ed       	ldi	r24, 0xD1	; 209
   1e852:	93 e0       	ldi	r25, 0x03	; 3
   1e854:	60 e4       	ldi	r22, 0x40	; 64
   1e856:	70 e0       	ldi	r23, 0x00	; 0
   1e858:	41 ee       	ldi	r20, 0xE1	; 225
   1e85a:	52 ef       	ldi	r21, 0xF2	; 242
   1e85c:	2d ed       	ldi	r18, 0xDD	; 221
   1e85e:	33 e0       	ldi	r19, 0x03	; 3
   1e860:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
		fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1e864:	86 ec       	ldi	r24, 0xC6	; 198
   1e866:	92 e0       	ldi	r25, 0x02	; 2
   1e868:	6f ef       	ldi	r22, 0xFF	; 255
   1e86a:	70 e0       	ldi	r23, 0x00	; 0
   1e86c:	40 e0       	ldi	r20, 0x00	; 0
   1e86e:	50 e0       	ldi	r21, 0x00	; 0
   1e870:	22 ed       	ldi	r18, 0xD2	; 210
   1e872:	32 e0       	ldi	r19, 0x02	; 2
   1e874:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
   1e878:	91 e0       	ldi	r25, 0x01	; 1
   1e87a:	c0 c0       	rjmp	.+384    	; 0x1e9fc <uart_init+0x1e2>
	}
	else 
	{
	
		// Setup Uart0
		DDRE &=~_BV(PE0);		// UTX0 input
   1e87c:	68 98       	cbi	0x0d, 0	; 13
		UCSR0B |= _BV(RXEN0);	// enable rx
   1e87e:	80 91 c1 00 	lds	r24, 0x00C1
   1e882:	80 61       	ori	r24, 0x10	; 16
   1e884:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
   1e888:	80 91 c1 00 	lds	r24, 0x00C1
   1e88c:	80 68       	ori	r24, 0x80	; 128
   1e88e:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0B &= ~_BV(UDRIE0);	// disable tx interrupt (for now)	
   1e892:	80 91 c1 00 	lds	r24, 0x00C1
   1e896:	8f 7d       	andi	r24, 0xDF	; 223
   1e898:	80 93 c1 00 	sts	0x00C1, r24

		// Setup Uart1
		DDRD &=~_BV(PD2);		// URX1 input
   1e89c:	52 98       	cbi	0x0a, 2	; 10
		UCSR1B |= _BV(RXEN1);	// enable rx
   1e89e:	80 91 c9 00 	lds	r24, 0x00C9
   1e8a2:	80 61       	ori	r24, 0x10	; 16
   1e8a4:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
   1e8a8:	80 91 c9 00 	lds	r24, 0x00C9
   1e8ac:	80 68       	ori	r24, 0x80	; 128
   1e8ae:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1B &= ~_BV(UDRIE1);	// disable tx interrupt (for now)	
   1e8b2:	80 91 c9 00 	lds	r24, 0x00C9
   1e8b6:	8f 7d       	andi	r24, 0xDF	; 223
   1e8b8:	80 93 c9 00 	sts	0x00C9, r24

		#define BAUD_TOL	5
		#define BAUD		UART0BAUD
		#include <util/setbaud.h>
		UBRR0H = (char)(UBRR_VALUE>>8);
   1e8bc:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (char)(UBRR_VALUE);
   1e8c0:	93 e3       	ldi	r25, 0x33	; 51
   1e8c2:	90 93 c4 00 	sts	0x00C4, r25
		#if USE_2X
			UCSR0A |= _BV(U2X0);
		#else
			UCSR0A &= _BV(U2X0);
   1e8c6:	80 91 c0 00 	lds	r24, 0x00C0
   1e8ca:	82 70       	andi	r24, 0x02	; 2
   1e8cc:	80 93 c0 00 	sts	0x00C0, r24
		#endif
		
		#undef	BAUD
		#define	BAUD		UART1BAUD
		#include <util/setbaud.h>
		UBRR1H = (char)(UBRR_VALUE>>8);
   1e8d0:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L = (char)(UBRR_VALUE);
   1e8d4:	90 93 cc 00 	sts	0x00CC, r25
		#if USE_2X
			UCSR1A |= _BV(U2X1);
		#else
			UCSR1A &= _BV(U2X1);
   1e8d8:	80 91 c8 00 	lds	r24, 0x00C8
   1e8dc:	82 70       	andi	r24, 0x02	; 2
   1e8de:	80 93 c8 00 	sts	0x00C8, r24
   1e8e2:	88 ec       	ldi	r24, 0xC8	; 200
   1e8e4:	90 e0       	ldi	r25, 0x00	; 0
   1e8e6:	40 e0       	ldi	r20, 0x00	; 0
   1e8e8:	c0 ed       	ldi	r28, 0xD0	; 208
   1e8ea:	d7 e0       	ldi	r29, 0x07	; 7
   1e8ec:	6c c0       	rjmp	.+216    	; 0x1e9c6 <uart_init+0x1ac>
		#endif
		
		tempint=BOOTWINDOW;
		while(tempint--)
		{
			if(UCSR0A & _BV(RXC0))
   1e8ee:	80 91 c0 00 	lds	r24, 0x00C0
   1e8f2:	87 ff       	sbrs	r24, 7
   1e8f4:	30 c0       	rjmp	.+96     	; 0x1e956 <uart_init+0x13c>
			{
				if(UDR0==' ')
   1e8f6:	80 91 c6 00 	lds	r24, 0x00C6
   1e8fa:	80 32       	cpi	r24, 0x20	; 32
   1e8fc:	61 f5       	brne	.+88     	; 0x1e956 <uart_init+0x13c>
				{
					UCSR1B &=~_BV(RXEN1);	// disable rx
   1e8fe:	80 91 c9 00 	lds	r24, 0x00C9
   1e902:	8f 7e       	andi	r24, 0xEF	; 239
   1e904:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B &=~_BV(RXCIE1);	// disable rx interrupt (writes to fifo)
   1e908:	80 91 c9 00 	lds	r24, 0x00C9
   1e90c:	8f 77       	andi	r24, 0x7F	; 127
   1e90e:	80 93 c9 00 	sts	0x00C9, r24
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart0_isrtx_enable, uart_fifo_data_tx);
   1e912:	81 ed       	ldi	r24, 0xD1	; 209
   1e914:	93 e0       	ldi	r25, 0x03	; 3
   1e916:	60 e4       	ldi	r22, 0x40	; 64
   1e918:	70 e0       	ldi	r23, 0x00	; 0
   1e91a:	4b ed       	ldi	r20, 0xDB	; 219
   1e91c:	52 ef       	ldi	r21, 0xF2	; 242
   1e91e:	2d ed       	ldi	r18, 0xDD	; 221
   1e920:	33 e0       	ldi	r19, 0x03	; 3
   1e922:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1e926:	86 ec       	ldi	r24, 0xC6	; 198
   1e928:	92 e0       	ldi	r25, 0x02	; 2
   1e92a:	6f ef       	ldi	r22, 0xFF	; 255
   1e92c:	70 e0       	ldi	r23, 0x00	; 0
   1e92e:	40 e0       	ldi	r20, 0x00	; 0
   1e930:	50 e0       	ldi	r21, 0x00	; 0
   1e932:	22 ed       	ldi	r18, 0xD2	; 210
   1e934:	32 e0       	ldi	r19, 0x02	; 2
   1e936:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
					DDRE |=_BV(PE1);		// UTX0 output
   1e93a:	69 9a       	sbi	0x0d, 1	; 13
					UCSR0B |= _BV(TXEN0);	// enable tx
   1e93c:	80 91 c1 00 	lds	r24, 0x00C1
   1e940:	88 60       	ori	r24, 0x08	; 8
   1e942:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B |= _BV(UDRIE0);	// enable tx interrupt
   1e946:	80 91 c1 00 	lds	r24, 0x00C1
   1e94a:	80 62       	ori	r24, 0x20	; 32
   1e94c:	80 93 c1 00 	sts	0x00C1, r24
   1e950:	20 e0       	ldi	r18, 0x00	; 0
   1e952:	30 e0       	ldi	r19, 0x00	; 0
   1e954:	41 e0       	ldi	r20, 0x01	; 1
					tempint=0;
					found=TRUE;
				};
			};
			
			if(UCSR1A & _BV(RXC1))
   1e956:	80 91 c8 00 	lds	r24, 0x00C8
   1e95a:	87 ff       	sbrs	r24, 7
   1e95c:	30 c0       	rjmp	.+96     	; 0x1e9be <uart_init+0x1a4>
			{
				if(UDR1==' ')
   1e95e:	80 91 ce 00 	lds	r24, 0x00CE
   1e962:	80 32       	cpi	r24, 0x20	; 32
   1e964:	61 f5       	brne	.+88     	; 0x1e9be <uart_init+0x1a4>
				{
					UCSR0B &=~_BV(RXEN0);	// disable rx
   1e966:	80 91 c1 00 	lds	r24, 0x00C1
   1e96a:	8f 7e       	andi	r24, 0xEF	; 239
   1e96c:	80 93 c1 00 	sts	0x00C1, r24
					UCSR0B &=~_BV(RXCIE0);	// disable rx interrupt (writes to fifo)
   1e970:	80 91 c1 00 	lds	r24, 0x00C1
   1e974:	8f 77       	andi	r24, 0x7F	; 127
   1e976:	80 93 c1 00 	sts	0x00C1, r24
					fifo_init(&uart_fifo_tx,UART_FIFO_TX_SIZE, uart1_isrtx_enable, uart_fifo_data_tx);
   1e97a:	81 ed       	ldi	r24, 0xD1	; 209
   1e97c:	93 e0       	ldi	r25, 0x03	; 3
   1e97e:	60 e4       	ldi	r22, 0x40	; 64
   1e980:	70 e0       	ldi	r23, 0x00	; 0
   1e982:	41 ee       	ldi	r20, 0xE1	; 225
   1e984:	52 ef       	ldi	r21, 0xF2	; 242
   1e986:	2d ed       	ldi	r18, 0xDD	; 221
   1e988:	33 e0       	ldi	r19, 0x03	; 3
   1e98a:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
					fifo_init(&uart_fifo_rx,UART_FIFO_RX_SIZE, NULL, uart_fifo_data_rx);
   1e98e:	86 ec       	ldi	r24, 0xC6	; 198
   1e990:	92 e0       	ldi	r25, 0x02	; 2
   1e992:	6f ef       	ldi	r22, 0xFF	; 255
   1e994:	70 e0       	ldi	r23, 0x00	; 0
   1e996:	40 e0       	ldi	r20, 0x00	; 0
   1e998:	50 e0       	ldi	r21, 0x00	; 0
   1e99a:	22 ed       	ldi	r18, 0xD2	; 210
   1e99c:	32 e0       	ldi	r19, 0x02	; 2
   1e99e:	0e 94 bd f6 	call	0x1ed7a	; 0x1ed7a <fifo_init>
					DDRD |=_BV(PD3);		// UTX1 output
   1e9a2:	53 9a       	sbi	0x0a, 3	; 10
					UCSR1B |= _BV(TXEN1);	// enable tx
   1e9a4:	80 91 c9 00 	lds	r24, 0x00C9
   1e9a8:	88 60       	ori	r24, 0x08	; 8
   1e9aa:	80 93 c9 00 	sts	0x00C9, r24
					UCSR1B |= _BV(UDRIE1);	// enable tx interrupt
   1e9ae:	80 91 c9 00 	lds	r24, 0x00C9
   1e9b2:	80 62       	ori	r24, 0x20	; 32
   1e9b4:	80 93 c9 00 	sts	0x00C9, r24
   1e9b8:	20 e0       	ldi	r18, 0x00	; 0
   1e9ba:	30 e0       	ldi	r19, 0x00	; 0
   1e9bc:	41 e0       	ldi	r20, 0x01	; 1
   1e9be:	ce 01       	movw	r24, r28
   1e9c0:	01 97       	sbiw	r24, 0x01	; 1
   1e9c2:	f1 f7       	brne	.-4      	; 0x1e9c0 <uart_init+0x1a6>
   1e9c4:	c9 01       	movw	r24, r18
		#else
			UCSR1A &= _BV(U2X1);
		#endif
		
		tempint=BOOTWINDOW;
		while(tempint--)
   1e9c6:	9c 01       	movw	r18, r24
   1e9c8:	21 50       	subi	r18, 0x01	; 1
   1e9ca:	30 40       	sbci	r19, 0x00	; 0
   1e9cc:	89 2b       	or	r24, r25
   1e9ce:	09 f0       	breq	.+2      	; 0x1e9d2 <uart_init+0x1b8>
   1e9d0:	8e cf       	rjmp	.-228    	; 0x1e8ee <uart_init+0xd4>
   1e9d2:	94 2f       	mov	r25, r20
			};
			_delay_ms(1);
		};
	};
	
	if(!found)
   1e9d4:	44 23       	and	r20, r20
   1e9d6:	91 f4       	brne	.+36     	; 0x1e9fc <uart_init+0x1e2>
	{
		DDRD=0;
   1e9d8:	1a b8       	out	0x0a, r1	; 10
		UCSR0B=0;
   1e9da:	10 92 c1 00 	sts	0x00C1, r1
		UCSR1B=0;
   1e9de:	10 92 c9 00 	sts	0x00C9, r1
	
		UBRR0H = 0;
   1e9e2:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = 0;
   1e9e6:	10 92 c4 00 	sts	0x00C4, r1
		UBRR1H = 0;
   1e9ea:	10 92 cd 00 	sts	0x00CD, r1
		UBRR1L = 0;
   1e9ee:	10 92 cc 00 	sts	0x00CC, r1
	
		UCSR0A =0x20;
   1e9f2:	80 e2       	ldi	r24, 0x20	; 32
   1e9f4:	80 93 c0 00 	sts	0x00C0, r24
		UCSR1A =0x20;	
   1e9f8:	80 93 c8 00 	sts	0x00C8, r24
	};
	return found;
}
   1e9fc:	89 2f       	mov	r24, r25
   1e9fe:	df 91       	pop	r29
   1ea00:	cf 91       	pop	r28
   1ea02:	08 95       	ret

0001ea04 <hex2ascii>:

// call to print memory to a text buffer as hex data
// option=0, ############
// option=1, ##:##:##:##:##:## (used for MAC)
char* hex2ascii(char* textbuf, void* startadd, unsigned char length, unsigned char option)
{
   1ea04:	0f 93       	push	r16
   1ea06:	1f 93       	push	r17
   1ea08:	cf 93       	push	r28
   1ea0a:	df 93       	push	r29
   1ea0c:	18 2f       	mov	r17, r24
   1ea0e:	09 2f       	mov	r16, r25
   1ea10:	eb 01       	movw	r28, r22
   1ea12:	62 2f       	mov	r22, r18
	void* endadd = (unsigned char*)startadd+length;
   1ea14:	ce 01       	movw	r24, r28
   1ea16:	84 0f       	add	r24, r20
   1ea18:	91 1d       	adc	r25, r1
   1ea1a:	ac 01       	movw	r20, r24
   1ea1c:	21 2f       	mov	r18, r17
   1ea1e:	30 2f       	mov	r19, r16
   1ea20:	c9 01       	movw	r24, r18
   1ea22:	fc 01       	movw	r30, r24
			textbuf[0]+=7;
		if(textbuf[1]>0x39)
			textbuf[1]+=7;
		textbuf+=2;
		if(option==1 && startadd != endadd)
			*textbuf++=':';
   1ea24:	2a e3       	ldi	r18, 0x3A	; 58
	char* retval = textbuf;

	unsigned char tempchar;
	do
	{
		tempchar=*(unsigned char*)startadd++;
   1ea26:	89 91       	ld	r24, Y+
		textbuf[0]=0x30+(tempchar>>4);
   1ea28:	98 2f       	mov	r25, r24
   1ea2a:	92 95       	swap	r25
   1ea2c:	9f 70       	andi	r25, 0x0F	; 15
   1ea2e:	90 5d       	subi	r25, 0xD0	; 208
   1ea30:	df 01       	movw	r26, r30
   1ea32:	9d 93       	st	X+, r25
		textbuf[1]=0x30+(tempchar&0x0F);
   1ea34:	8f 70       	andi	r24, 0x0F	; 15
   1ea36:	80 5d       	subi	r24, 0xD0	; 208
   1ea38:	81 83       	std	Z+1, r24	; 0x01
		if(textbuf[0]>0x39)
   1ea3a:	9a 33       	cpi	r25, 0x3A	; 58
   1ea3c:	10 f0       	brcs	.+4      	; 0x1ea42 <hex2ascii+0x3e>
			textbuf[0]+=7;
   1ea3e:	99 5f       	subi	r25, 0xF9	; 249
   1ea40:	90 83       	st	Z, r25
		if(textbuf[1]>0x39)
   1ea42:	8c 91       	ld	r24, X
   1ea44:	8a 33       	cpi	r24, 0x3A	; 58
   1ea46:	10 f0       	brcs	.+4      	; 0x1ea4c <hex2ascii+0x48>
			textbuf[1]+=7;
   1ea48:	89 5f       	subi	r24, 0xF9	; 249
   1ea4a:	8c 93       	st	X, r24
		textbuf+=2;
   1ea4c:	32 96       	adiw	r30, 0x02	; 2
		if(option==1 && startadd != endadd)
   1ea4e:	61 30       	cpi	r22, 0x01	; 1
   1ea50:	29 f4       	brne	.+10     	; 0x1ea5c <hex2ascii+0x58>
   1ea52:	c4 17       	cp	r28, r20
   1ea54:	d5 07       	cpc	r29, r21
   1ea56:	29 f0       	breq	.+10     	; 0x1ea62 <hex2ascii+0x5e>
			*textbuf++=':';
   1ea58:	21 93       	st	Z+, r18
   1ea5a:	e5 cf       	rjmp	.-54     	; 0x1ea26 <hex2ascii+0x22>
	}while(startadd != endadd);
   1ea5c:	c4 17       	cp	r28, r20
   1ea5e:	d5 07       	cpc	r29, r21
   1ea60:	11 f7       	brne	.-60     	; 0x1ea26 <hex2ascii+0x22>
	*textbuf++=0;
   1ea62:	10 82       	st	Z, r1
	return retval;
}
   1ea64:	81 2f       	mov	r24, r17
   1ea66:	90 2f       	mov	r25, r16
   1ea68:	df 91       	pop	r29
   1ea6a:	cf 91       	pop	r28
   1ea6c:	1f 91       	pop	r17
   1ea6e:	0f 91       	pop	r16
   1ea70:	08 95       	ret

0001ea72 <read_bige_uint>:

unsigned int read_bige_uint(unsigned int bige)
{
   1ea72:	df 93       	push	r29
   1ea74:	cf 93       	push	r28
   1ea76:	00 d0       	rcall	.+0      	; 0x1ea78 <read_bige_uint+0x6>
   1ea78:	cd b7       	in	r28, 0x3d	; 61
   1ea7a:	de b7       	in	r29, 0x3e	; 62
   1ea7c:	9a 83       	std	Y+2, r25	; 0x02
   1ea7e:	89 83       	std	Y+1, r24	; 0x01
	unsigned int retval;
	retval = ((unsigned char*)&bige)[0];
	retval<<=8;
   1ea80:	38 2f       	mov	r19, r24
   1ea82:	20 e0       	ldi	r18, 0x00	; 0
   1ea84:	8a 81       	ldd	r24, Y+2	; 0x02
   1ea86:	28 0f       	add	r18, r24
   1ea88:	31 1d       	adc	r19, r1
	retval+= ((unsigned char*)&bige)[1];
	return retval;
}
   1ea8a:	c9 01       	movw	r24, r18
   1ea8c:	0f 90       	pop	r0
   1ea8e:	0f 90       	pop	r0
   1ea90:	cf 91       	pop	r28
   1ea92:	df 91       	pop	r29
   1ea94:	08 95       	ret

0001ea96 <ihex_init>:
	char *line_ptr;

//call to initialise ihex parser
void ihex_init()
{
	ext_seg_add=0;
   1ea96:	10 92 be 01 	sts	0x01BE, r1
   1ea9a:	10 92 bf 01 	sts	0x01BF, r1
   1ea9e:	10 92 c0 01 	sts	0x01C0, r1
   1eaa2:	10 92 c1 01 	sts	0x01C1, r1
	ext_lin_add=0;
   1eaa6:	10 92 c2 01 	sts	0x01C2, r1
   1eaaa:	10 92 c3 01 	sts	0x01C3, r1
   1eaae:	10 92 c4 01 	sts	0x01C4, r1
   1eab2:	10 92 c5 01 	sts	0x01C5, r1
	line_ptr=hexline.ascii;
   1eab6:	81 e3       	ldi	r24, 0x31	; 49
   1eab8:	94 e0       	ldi	r25, 0x04	; 4
   1eaba:	90 93 1e 04 	sts	0x041E, r25
   1eabe:	80 93 1d 04 	sts	0x041D, r24
	*line_ptr=0;
   1eac2:	10 92 31 04 	sts	0x0431, r1
	ihex_status=0;
   1eac6:	10 92 1f 04 	sts	0x041F, r1
}
   1eaca:	08 95       	ret

0001eacc <ascii2hex>:
	else
		ihex_status=IHEX_STATUS_ERROR;
}

char ascii2hex(char* ascii)
{
   1eacc:	fc 01       	movw	r30, r24
	char retval=0;
	if(ascii[0] > '9')
   1eace:	80 81       	ld	r24, Z
   1ead0:	8a 33       	cpi	r24, 0x3A	; 58
   1ead2:	10 f0       	brcs	.+4      	; 0x1ead8 <ascii2hex+0xc>
		retval += 0x0A + ascii[0] -'A';
   1ead4:	87 53       	subi	r24, 0x37	; 55
   1ead6:	01 c0       	rjmp	.+2      	; 0x1eada <ascii2hex+0xe>
	else
		retval += 0x00 + ascii[0] -'0';
   1ead8:	80 53       	subi	r24, 0x30	; 48
	retval<<=4;
   1eada:	98 2f       	mov	r25, r24
   1eadc:	92 95       	swap	r25
   1eade:	90 7f       	andi	r25, 0xF0	; 240
	if(ascii[1] > '9')
   1eae0:	81 81       	ldd	r24, Z+1	; 0x01
   1eae2:	8a 33       	cpi	r24, 0x3A	; 58
   1eae4:	18 f0       	brcs	.+6      	; 0x1eaec <ascii2hex+0x20>
		retval += 0x0A + ascii[1] -'A';
   1eae6:	87 53       	subi	r24, 0x37	; 55
   1eae8:	89 0f       	add	r24, r25
   1eaea:	08 95       	ret
	else
		retval += 0x00 + ascii[1] -'0';
   1eaec:	80 53       	subi	r24, 0x30	; 48
   1eaee:	89 0f       	add	r24, r25
	return retval;
}
   1eaf0:	08 95       	ret

0001eaf2 <ihex_process_line>:
	};
}

//called from ihex_char when a hex line is complete
void ihex_process_line(void)
{
   1eaf2:	ef 92       	push	r14
   1eaf4:	ff 92       	push	r15
   1eaf6:	0f 93       	push	r16
   1eaf8:	1f 93       	push	r17
   1eafa:	cf 93       	push	r28
   1eafc:	df 93       	push	r29
	char byte_count, *target, *source, checksum;
	unsigned char index;

	//if valid size
	if(isxdigit(hexline.ascii[1]) && isxdigit(hexline.ascii[2]))
   1eafe:	80 91 32 04 	lds	r24, 0x0432
   1eb02:	90 e0       	ldi	r25, 0x00	; 0
   1eb04:	0e 94 cc f6 	call	0x1ed98	; 0x1ed98 <isxdigit>
   1eb08:	89 2b       	or	r24, r25
   1eb0a:	71 f0       	breq	.+28     	; 0x1eb28 <ihex_process_line+0x36>
   1eb0c:	80 91 33 04 	lds	r24, 0x0433
   1eb10:	90 e0       	ldi	r25, 0x00	; 0
   1eb12:	0e 94 cc f6 	call	0x1ed98	; 0x1ed98 <isxdigit>
   1eb16:	89 2b       	or	r24, r25
   1eb18:	39 f0       	breq	.+14     	; 0x1eb28 <ihex_process_line+0x36>
		hexline.ihex.byte_count = ascii2hex(&hexline.ascii[1]);
   1eb1a:	82 e3       	ldi	r24, 0x32	; 50
   1eb1c:	94 e0       	ldi	r25, 0x04	; 4
   1eb1e:	0e 94 66 f5 	call	0x1eacc	; 0x1eacc <ascii2hex>
   1eb22:	80 93 31 04 	sts	0x0431, r24
   1eb26:	02 c0       	rjmp	.+4      	; 0x1eb2c <ihex_process_line+0x3a>
	else
		hexline.ihex.byte_count=0;
   1eb28:	10 92 31 04 	sts	0x0431, r1

	//convert ascii to hex
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1eb2c:	e0 90 31 04 	lds	r14, 0x0431
   1eb30:	84 e0       	ldi	r24, 0x04	; 4
   1eb32:	e8 0e       	add	r14, r24
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
   1eb34:	eb e1       	ldi	r30, 0x1B	; 27
   1eb36:	ee 15       	cp	r30, r14
   1eb38:	08 f4       	brcc	.+2      	; 0x1eb3c <ihex_process_line+0x4a>
   1eb3a:	ee 24       	eor	r14, r14
   1eb3c:	02 e3       	ldi	r16, 0x32	; 50
   1eb3e:	14 e0       	ldi	r17, 0x04	; 4
   1eb40:	e8 01       	movw	r28, r16
   1eb42:	22 96       	adiw	r28, 0x02	; 2
   1eb44:	08 c0       	rjmp	.+16     	; 0x1eb56 <ihex_process_line+0x64>
		byte_count=0;
	while(byte_count)
	{
		*target++=ascii2hex(source);
   1eb46:	ce 01       	movw	r24, r28
   1eb48:	0e 94 66 f5 	call	0x1eacc	; 0x1eacc <ascii2hex>
   1eb4c:	f8 01       	movw	r30, r16
   1eb4e:	81 93       	st	Z+, r24
   1eb50:	8f 01       	movw	r16, r30
		source+=2;
   1eb52:	22 96       	adiw	r28, 0x02	; 2
		byte_count--;
   1eb54:	ea 94       	dec	r14
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	target = &hexline.raw[1];
	source = &hexline.ascii[3];	//skip : and length field
	if(byte_count > (MAXLEN-6)/2)	//MAXLEN -'CR' -':' -'0terminator' -'size low byte' -'size hi byte'
		byte_count=0;
	while(byte_count)
   1eb56:	ee 20       	and	r14, r14
   1eb58:	b1 f7       	brne	.-20     	; 0x1eb46 <ihex_process_line+0x54>
		source+=2;
		byte_count--;
	};

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
   1eb5a:	80 91 31 04 	lds	r24, 0x0431
   1eb5e:	8c 5f       	subi	r24, 0xFC	; 252
   1eb60:	e1 e3       	ldi	r30, 0x31	; 49
   1eb62:	f4 e0       	ldi	r31, 0x04	; 4
   1eb64:	20 e0       	ldi	r18, 0x00	; 0
	checksum=0;
	index=0;
	while(byte_count--)
   1eb66:	90 e0       	ldi	r25, 0x00	; 0
   1eb68:	8e 0f       	add	r24, r30
   1eb6a:	9f 1f       	adc	r25, r31
   1eb6c:	02 c0       	rjmp	.+4      	; 0x1eb72 <ihex_process_line+0x80>
		checksum-=hexline.raw[index++];
   1eb6e:	23 1b       	sub	r18, r19
   1eb70:	31 96       	adiw	r30, 0x01	; 1
   1eb72:	30 81       	ld	r19, Z

	//test checksum
	byte_count=hexline.ihex.byte_count+sizeof(struct ihex_struct)-1;
	checksum=0;
	index=0;
	while(byte_count--)
   1eb74:	e8 17       	cp	r30, r24
   1eb76:	f9 07       	cpc	r31, r25
   1eb78:	d1 f7       	brne	.-12     	; 0x1eb6e <ihex_process_line+0x7c>
		checksum-=hexline.raw[index++];
	
	if(checksum == hexline.raw[index])
   1eb7a:	23 17       	cp	r18, r19
   1eb7c:	09 f0       	breq	.+2      	; 0x1eb80 <ihex_process_line+0x8e>
   1eb7e:	7d c0       	rjmp	.+250    	; 0x1ec7a <ihex_process_line+0x188>
	{
		if(hexline.ihex.type == IHEX_TYPE_DATA)
   1eb80:	80 91 34 04 	lds	r24, 0x0434
   1eb84:	88 23       	and	r24, r24
   1eb86:	c1 f5       	brne	.+112    	; 0x1ebf8 <ihex_process_line+0x106>
		{
			//calculate actual address
			ihex_address=(unsigned long)read_bige_uint(hexline.ihex.address);
   1eb88:	80 91 32 04 	lds	r24, 0x0432
   1eb8c:	90 91 33 04 	lds	r25, 0x0433
   1eb90:	0e 94 39 f5 	call	0x1ea72	; 0x1ea72 <read_bige_uint>
			ihex_address+=ext_seg_add;
			ihex_address+=ext_lin_add;
   1eb94:	20 91 c2 01 	lds	r18, 0x01C2
   1eb98:	30 91 c3 01 	lds	r19, 0x01C3
   1eb9c:	40 91 c4 01 	lds	r20, 0x01C4
   1eba0:	50 91 c5 01 	lds	r21, 0x01C5
   1eba4:	e0 90 be 01 	lds	r14, 0x01BE
   1eba8:	f0 90 bf 01 	lds	r15, 0x01BF
   1ebac:	00 91 c0 01 	lds	r16, 0x01C0
   1ebb0:	10 91 c1 01 	lds	r17, 0x01C1
   1ebb4:	2e 0d       	add	r18, r14
   1ebb6:	3f 1d       	adc	r19, r15
   1ebb8:	40 1f       	adc	r20, r16
   1ebba:	51 1f       	adc	r21, r17
   1ebbc:	a0 e0       	ldi	r26, 0x00	; 0
   1ebbe:	b0 e0       	ldi	r27, 0x00	; 0
   1ebc0:	28 0f       	add	r18, r24
   1ebc2:	39 1f       	adc	r19, r25
   1ebc4:	4a 1f       	adc	r20, r26
   1ebc6:	5b 1f       	adc	r21, r27
   1ebc8:	20 93 ba 01 	sts	0x01BA, r18
   1ebcc:	30 93 bb 01 	sts	0x01BB, r19
   1ebd0:	40 93 bc 01 	sts	0x01BC, r20
   1ebd4:	50 93 bd 01 	sts	0x01BD, r21
			
			//copy data to output
			memcpy(ihex_data, hexline.ihex.data, hexline.ihex.byte_count);
   1ebd8:	20 e2       	ldi	r18, 0x20	; 32
   1ebda:	34 e0       	ldi	r19, 0x04	; 4
   1ebdc:	40 91 31 04 	lds	r20, 0x0431
   1ebe0:	e5 e3       	ldi	r30, 0x35	; 53
   1ebe2:	f4 e0       	ldi	r31, 0x04	; 4
   1ebe4:	c9 01       	movw	r24, r18
   1ebe6:	bf 01       	movw	r22, r30
   1ebe8:	50 e0       	ldi	r21, 0x00	; 0
   1ebea:	0e 94 d7 f6 	call	0x1edae	; 0x1edae <memcpy>
			//copy byte count to output
			ihex_byte_count=hexline.ihex.byte_count;
   1ebee:	80 91 31 04 	lds	r24, 0x0431
   1ebf2:	80 93 30 04 	sts	0x0430, r24
   1ebf6:	44 c0       	rjmp	.+136    	; 0x1ec80 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_SEG_ADD)
   1ebf8:	82 30       	cpi	r24, 0x02	; 2
   1ebfa:	f9 f4       	brne	.+62     	; 0x1ec3a <ihex_process_line+0x148>
		{
			ext_seg_add=hexline.ihex.data[0];
			ext_seg_add<<=8;
			ext_seg_add+=hexline.ihex.data[1];
			ext_seg_add<<=4;
   1ebfc:	80 91 35 04 	lds	r24, 0x0435
   1ec00:	90 e0       	ldi	r25, 0x00	; 0
   1ec02:	a0 e0       	ldi	r26, 0x00	; 0
   1ec04:	b0 e0       	ldi	r27, 0x00	; 0
   1ec06:	ba 2f       	mov	r27, r26
   1ec08:	a9 2f       	mov	r26, r25
   1ec0a:	98 2f       	mov	r25, r24
   1ec0c:	88 27       	eor	r24, r24
   1ec0e:	20 91 36 04 	lds	r18, 0x0436
   1ec12:	82 0f       	add	r24, r18
   1ec14:	91 1d       	adc	r25, r1
   1ec16:	a1 1d       	adc	r26, r1
   1ec18:	b1 1d       	adc	r27, r1
   1ec1a:	44 e0       	ldi	r20, 0x04	; 4
   1ec1c:	88 0f       	add	r24, r24
   1ec1e:	99 1f       	adc	r25, r25
   1ec20:	aa 1f       	adc	r26, r26
   1ec22:	bb 1f       	adc	r27, r27
   1ec24:	4a 95       	dec	r20
   1ec26:	d1 f7       	brne	.-12     	; 0x1ec1c <ihex_process_line+0x12a>
   1ec28:	80 93 be 01 	sts	0x01BE, r24
   1ec2c:	90 93 bf 01 	sts	0x01BF, r25
   1ec30:	a0 93 c0 01 	sts	0x01C0, r26
   1ec34:	b0 93 c1 01 	sts	0x01C1, r27
   1ec38:	23 c0       	rjmp	.+70     	; 0x1ec80 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EXT_LIN_ADD)
   1ec3a:	84 30       	cpi	r24, 0x04	; 4
   1ec3c:	d9 f4       	brne	.+54     	; 0x1ec74 <ihex_process_line+0x182>
		{
			ext_lin_add=hexline.ihex.data[0];
			ext_lin_add<<=8;
			ext_lin_add+=hexline.ihex.data[1];
			ext_lin_add<<=16;
   1ec3e:	80 91 35 04 	lds	r24, 0x0435
   1ec42:	90 e0       	ldi	r25, 0x00	; 0
   1ec44:	a0 e0       	ldi	r26, 0x00	; 0
   1ec46:	b0 e0       	ldi	r27, 0x00	; 0
   1ec48:	ba 2f       	mov	r27, r26
   1ec4a:	a9 2f       	mov	r26, r25
   1ec4c:	98 2f       	mov	r25, r24
   1ec4e:	88 27       	eor	r24, r24
   1ec50:	20 91 36 04 	lds	r18, 0x0436
   1ec54:	82 0f       	add	r24, r18
   1ec56:	91 1d       	adc	r25, r1
   1ec58:	a1 1d       	adc	r26, r1
   1ec5a:	b1 1d       	adc	r27, r1
   1ec5c:	dc 01       	movw	r26, r24
   1ec5e:	99 27       	eor	r25, r25
   1ec60:	88 27       	eor	r24, r24
   1ec62:	80 93 c2 01 	sts	0x01C2, r24
   1ec66:	90 93 c3 01 	sts	0x01C3, r25
   1ec6a:	a0 93 c4 01 	sts	0x01C4, r26
   1ec6e:	b0 93 c5 01 	sts	0x01C5, r27
   1ec72:	06 c0       	rjmp	.+12     	; 0x1ec80 <ihex_process_line+0x18e>
		}
		else if(hexline.ihex.type == IHEX_TYPE_EOF)
   1ec74:	81 30       	cpi	r24, 0x01	; 1
   1ec76:	21 f4       	brne	.+8      	; 0x1ec80 <ihex_process_line+0x18e>
   1ec78:	01 c0       	rjmp	.+2      	; 0x1ec7c <ihex_process_line+0x18a>
			ihex_status=IHEX_STATUS_EOF;
	}
	else
		ihex_status=IHEX_STATUS_ERROR;
   1ec7a:	82 e0       	ldi	r24, 0x02	; 2
   1ec7c:	80 93 1f 04 	sts	0x041F, r24
}
   1ec80:	df 91       	pop	r29
   1ec82:	cf 91       	pop	r28
   1ec84:	1f 91       	pop	r17
   1ec86:	0f 91       	pop	r16
   1ec88:	ff 90       	pop	r15
   1ec8a:	ef 90       	pop	r14
   1ec8c:	08 95       	ret

0001ec8e <ihex_char>:
	ihex_status=0;
}

//characters are passed to this function
void ihex_char(char x)
{
   1ec8e:	98 2f       	mov	r25, r24
	//start of new line?
	if(x==':')
   1ec90:	8a 33       	cpi	r24, 0x3A	; 58
   1ec92:	59 f4       	brne	.+22     	; 0x1ecaa <ihex_char+0x1c>
	{
		line_ptr=hexline.ascii;
		*line_ptr=x;
   1ec94:	80 93 31 04 	sts	0x0431, r24
		line_ptr++;
   1ec98:	82 e3       	ldi	r24, 0x32	; 50
   1ec9a:	94 e0       	ldi	r25, 0x04	; 4
   1ec9c:	90 93 1e 04 	sts	0x041E, r25
   1eca0:	80 93 1d 04 	sts	0x041D, r24
		*line_ptr=0;
   1eca4:	10 92 32 04 	sts	0x0432, r1
   1eca8:	08 95       	ret
	}
	//else if line in progress, append to line
	else if(hexline.ascii[0]==':')
   1ecaa:	80 91 31 04 	lds	r24, 0x0431
   1ecae:	8a 33       	cpi	r24, 0x3A	; 58
   1ecb0:	e1 f4       	brne	.+56     	; 0x1ecea <ihex_char+0x5c>
	{
		if(line_ptr != &hexline.ascii[MAXLEN-1])
   1ecb2:	a0 91 1d 04 	lds	r26, 0x041D
   1ecb6:	b0 91 1e 04 	lds	r27, 0x041E
   1ecba:	84 e0       	ldi	r24, 0x04	; 4
   1ecbc:	ac 36       	cpi	r26, 0x6C	; 108
   1ecbe:	b8 07       	cpc	r27, r24
   1ecc0:	41 f0       	breq	.+16     	; 0x1ecd2 <ihex_char+0x44>
		{
			*line_ptr++=x;
   1ecc2:	fd 01       	movw	r30, r26
   1ecc4:	91 93       	st	Z+, r25
   1ecc6:	f0 93 1e 04 	sts	0x041E, r31
   1ecca:	e0 93 1d 04 	sts	0x041D, r30
			*line_ptr=0;
   1ecce:	11 96       	adiw	r26, 0x01	; 1
   1ecd0:	1c 92       	st	X, r1
		};
		if(x=='\r')
   1ecd2:	9d 30       	cpi	r25, 0x0D	; 13
   1ecd4:	51 f4       	brne	.+20     	; 0x1ecea <ihex_char+0x5c>
		{
			ihex_process_line();
   1ecd6:	0e 94 79 f5 	call	0x1eaf2	; 0x1eaf2 <ihex_process_line>
			line_ptr=hexline.ascii;
   1ecda:	81 e3       	ldi	r24, 0x31	; 49
   1ecdc:	94 e0       	ldi	r25, 0x04	; 4
   1ecde:	90 93 1e 04 	sts	0x041E, r25
   1ece2:	80 93 1d 04 	sts	0x041D, r24
			*line_ptr=0;
   1ece6:	10 92 31 04 	sts	0x0431, r1
   1ecea:	08 95       	ret

0001ecec <fifo_read_char>:

char fifo_read_char(void)
{
	char retval=0;
	
	while(uart_fifo_rx.bytes_used==0);
   1ecec:	80 91 c7 02 	lds	r24, 0x02C7
   1ecf0:	88 23       	and	r24, r24
   1ecf2:	e1 f3       	breq	.-8      	; 0x1ecec <fifo_read_char>

	retval=*((char*)uart_fifo_rx.tail_ptr);
   1ecf4:	e0 91 ca 02 	lds	r30, 0x02CA
   1ecf8:	f0 91 cb 02 	lds	r31, 0x02CB
   1ecfc:	e0 81       	ld	r30, Z
	uart_fifo_rx.tail_ptr++;	
   1ecfe:	80 91 ca 02 	lds	r24, 0x02CA
   1ed02:	90 91 cb 02 	lds	r25, 0x02CB
   1ed06:	01 96       	adiw	r24, 0x01	; 1
   1ed08:	90 93 cb 02 	sts	0x02CB, r25
   1ed0c:	80 93 ca 02 	sts	0x02CA, r24
	
	if(uart_fifo_rx.tail_ptr == uart_fifo_rx.end)
   1ed10:	20 91 ca 02 	lds	r18, 0x02CA
   1ed14:	30 91 cb 02 	lds	r19, 0x02CB
   1ed18:	80 91 ce 02 	lds	r24, 0x02CE
   1ed1c:	90 91 cf 02 	lds	r25, 0x02CF
   1ed20:	28 17       	cp	r18, r24
   1ed22:	39 07       	cpc	r19, r25
   1ed24:	41 f4       	brne	.+16     	; 0x1ed36 <fifo_read_char+0x4a>
		uart_fifo_rx.tail_ptr = uart_fifo_rx.start;
   1ed26:	80 91 cc 02 	lds	r24, 0x02CC
   1ed2a:	90 91 cd 02 	lds	r25, 0x02CD
   1ed2e:	90 93 cb 02 	sts	0x02CB, r25
   1ed32:	80 93 ca 02 	sts	0x02CA, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1ed36:	f8 94       	cli

	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		uart_fifo_rx.bytes_free ++;
   1ed38:	80 91 c6 02 	lds	r24, 0x02C6
   1ed3c:	8f 5f       	subi	r24, 0xFF	; 255
   1ed3e:	80 93 c6 02 	sts	0x02C6, r24
		uart_fifo_rx.bytes_used --;
   1ed42:	80 91 c7 02 	lds	r24, 0x02C7
   1ed46:	81 50       	subi	r24, 0x01	; 1
   1ed48:	80 93 c7 02 	sts	0x02C7, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
   1ed4c:	78 94       	sei
	}

	return retval;
}
   1ed4e:	8e 2f       	mov	r24, r30
   1ed50:	08 95       	ret

0001ed52 <fifo_flush>:
	fifo_flush(obj);
} 

//100506, made atomic so pointers cannot be corrupted by ISR's
void fifo_flush(struct fifo_control *obj)
{
   1ed52:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1ed54:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1ed56:	f8 94       	cli
	{
		(*obj).tail_ptr = (*obj).start;
   1ed58:	86 81       	ldd	r24, Z+6	; 0x06
   1ed5a:	97 81       	ldd	r25, Z+7	; 0x07
   1ed5c:	95 83       	std	Z+5, r25	; 0x05
   1ed5e:	84 83       	std	Z+4, r24	; 0x04
		(*obj).head_ptr = (*obj).start;
   1ed60:	86 81       	ldd	r24, Z+6	; 0x06
   1ed62:	97 81       	ldd	r25, Z+7	; 0x07
   1ed64:	93 83       	std	Z+3, r25	; 0x03
   1ed66:	82 83       	std	Z+2, r24	; 0x02
		(*obj).bytes_free=(*obj).end-(*obj).start;
   1ed68:	80 85       	ldd	r24, Z+8	; 0x08
   1ed6a:	91 85       	ldd	r25, Z+9	; 0x09
   1ed6c:	26 81       	ldd	r18, Z+6	; 0x06
   1ed6e:	37 81       	ldd	r19, Z+7	; 0x07
   1ed70:	82 1b       	sub	r24, r18
   1ed72:	80 83       	st	Z, r24
		(*obj).bytes_used=0;
   1ed74:	11 82       	std	Z+1, r1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1ed76:	4f bf       	out	0x3f, r20	; 63
	}
}
   1ed78:	08 95       	ret

0001ed7a <fifo_init>:
	return retval;
}


void fifo_init(struct fifo_control *obj, unsigned int size, void(*post_fptr)(void), void* data_space)
{
   1ed7a:	fc 01       	movw	r30, r24
	(*obj).start = data_space;
   1ed7c:	37 83       	std	Z+7, r19	; 0x07
   1ed7e:	26 83       	std	Z+6, r18	; 0x06
	(*obj).end=(*obj).start + size;		// note, end points to last item in buffer + 1
   1ed80:	86 81       	ldd	r24, Z+6	; 0x06
   1ed82:	97 81       	ldd	r25, Z+7	; 0x07
   1ed84:	86 0f       	add	r24, r22
   1ed86:	97 1f       	adc	r25, r23
   1ed88:	91 87       	std	Z+9, r25	; 0x09
   1ed8a:	80 87       	std	Z+8, r24	; 0x08
	(*obj).post_fptr=post_fptr;
   1ed8c:	53 87       	std	Z+11, r21	; 0x0b
   1ed8e:	42 87       	std	Z+10, r20	; 0x0a
	fifo_flush(obj);
   1ed90:	cf 01       	movw	r24, r30
   1ed92:	0e 94 a9 f6 	call	0x1ed52	; 0x1ed52 <fifo_flush>
} 
   1ed96:	08 95       	ret

0001ed98 <isxdigit>:
   1ed98:	91 11       	cpse	r25, r1
   1ed9a:	46 c0       	rjmp	.+140    	; 0x1ee28 <__ctype_isfalse>
   1ed9c:	80 53       	subi	r24, 0x30	; 48
   1ed9e:	8a 50       	subi	r24, 0x0A	; 10
   1eda0:	28 f0       	brcs	.+10     	; 0x1edac <isxdigit+0x14>
   1eda2:	86 5c       	subi	r24, 0xC6	; 198
   1eda4:	80 62       	ori	r24, 0x20	; 32
   1eda6:	81 56       	subi	r24, 0x61	; 97
   1eda8:	86 50       	subi	r24, 0x06	; 6
   1edaa:	b8 f7       	brcc	.-18     	; 0x1ed9a <isxdigit+0x2>
   1edac:	08 95       	ret

0001edae <memcpy>:
   1edae:	fb 01       	movw	r30, r22
   1edb0:	dc 01       	movw	r26, r24
   1edb2:	02 c0       	rjmp	.+4      	; 0x1edb8 <memcpy+0xa>
   1edb4:	01 90       	ld	r0, Z+
   1edb6:	0d 92       	st	X+, r0
   1edb8:	41 50       	subi	r20, 0x01	; 1
   1edba:	50 40       	sbci	r21, 0x00	; 0
   1edbc:	d8 f7       	brcc	.-10     	; 0x1edb4 <memcpy+0x6>
   1edbe:	08 95       	ret

0001edc0 <ltoa>:
   1edc0:	fa 01       	movw	r30, r20
   1edc2:	cf 93       	push	r28
   1edc4:	ff 93       	push	r31
   1edc6:	ef 93       	push	r30
   1edc8:	22 30       	cpi	r18, 0x02	; 2
   1edca:	44 f1       	brlt	.+80     	; 0x1ee1c <ltoa+0x5c>
   1edcc:	25 32       	cpi	r18, 0x25	; 37
   1edce:	34 f5       	brge	.+76     	; 0x1ee1c <ltoa+0x5c>
   1edd0:	c2 2f       	mov	r28, r18
   1edd2:	e8 94       	clt
   1edd4:	ca 30       	cpi	r28, 0x0A	; 10
   1edd6:	49 f4       	brne	.+18     	; 0x1edea <ltoa+0x2a>
   1edd8:	97 fb       	bst	r25, 7
   1edda:	3e f4       	brtc	.+14     	; 0x1edea <ltoa+0x2a>
   1eddc:	90 95       	com	r25
   1edde:	80 95       	com	r24
   1ede0:	70 95       	com	r23
   1ede2:	61 95       	neg	r22
   1ede4:	7f 4f       	sbci	r23, 0xFF	; 255
   1ede6:	8f 4f       	sbci	r24, 0xFF	; 255
   1ede8:	9f 4f       	sbci	r25, 0xFF	; 255
   1edea:	2c 2f       	mov	r18, r28
   1edec:	33 27       	eor	r19, r19
   1edee:	44 27       	eor	r20, r20
   1edf0:	55 27       	eor	r21, r21
   1edf2:	ff 93       	push	r31
   1edf4:	ef 93       	push	r30
   1edf6:	0e 94 27 f7 	call	0x1ee4e	; 0x1ee4e <__udivmodsi4>
   1edfa:	ef 91       	pop	r30
   1edfc:	ff 91       	pop	r31
   1edfe:	60 5d       	subi	r22, 0xD0	; 208
   1ee00:	6a 33       	cpi	r22, 0x3A	; 58
   1ee02:	0c f0       	brlt	.+2      	; 0x1ee06 <ltoa+0x46>
   1ee04:	69 5d       	subi	r22, 0xD9	; 217
   1ee06:	61 93       	st	Z+, r22
   1ee08:	b9 01       	movw	r22, r18
   1ee0a:	ca 01       	movw	r24, r20
   1ee0c:	60 50       	subi	r22, 0x00	; 0
   1ee0e:	70 40       	sbci	r23, 0x00	; 0
   1ee10:	80 40       	sbci	r24, 0x00	; 0
   1ee12:	90 40       	sbci	r25, 0x00	; 0
   1ee14:	51 f7       	brne	.-44     	; 0x1edea <ltoa+0x2a>
   1ee16:	16 f4       	brtc	.+4      	; 0x1ee1c <ltoa+0x5c>
   1ee18:	cd e2       	ldi	r28, 0x2D	; 45
   1ee1a:	c1 93       	st	Z+, r28
   1ee1c:	10 82       	st	Z, r1
   1ee1e:	8f 91       	pop	r24
   1ee20:	9f 91       	pop	r25
   1ee22:	cf 91       	pop	r28
   1ee24:	0c 94 17 f7 	jmp	0x1ee2e	; 0x1ee2e <strrev>

0001ee28 <__ctype_isfalse>:
   1ee28:	99 27       	eor	r25, r25
   1ee2a:	88 27       	eor	r24, r24

0001ee2c <__ctype_istrue>:
   1ee2c:	08 95       	ret

0001ee2e <strrev>:
   1ee2e:	dc 01       	movw	r26, r24
   1ee30:	fc 01       	movw	r30, r24
   1ee32:	67 2f       	mov	r22, r23
   1ee34:	71 91       	ld	r23, Z+
   1ee36:	77 23       	and	r23, r23
   1ee38:	e1 f7       	brne	.-8      	; 0x1ee32 <strrev+0x4>
   1ee3a:	32 97       	sbiw	r30, 0x02	; 2
   1ee3c:	04 c0       	rjmp	.+8      	; 0x1ee46 <strrev+0x18>
   1ee3e:	7c 91       	ld	r23, X
   1ee40:	6d 93       	st	X+, r22
   1ee42:	70 83       	st	Z, r23
   1ee44:	62 91       	ld	r22, -Z
   1ee46:	ae 17       	cp	r26, r30
   1ee48:	bf 07       	cpc	r27, r31
   1ee4a:	c8 f3       	brcs	.-14     	; 0x1ee3e <strrev+0x10>
   1ee4c:	08 95       	ret

0001ee4e <__udivmodsi4>:
   1ee4e:	a1 e2       	ldi	r26, 0x21	; 33
   1ee50:	1a 2e       	mov	r1, r26
   1ee52:	aa 1b       	sub	r26, r26
   1ee54:	bb 1b       	sub	r27, r27
   1ee56:	fd 01       	movw	r30, r26
   1ee58:	0d c0       	rjmp	.+26     	; 0x1ee74 <__udivmodsi4_ep>

0001ee5a <__udivmodsi4_loop>:
   1ee5a:	aa 1f       	adc	r26, r26
   1ee5c:	bb 1f       	adc	r27, r27
   1ee5e:	ee 1f       	adc	r30, r30
   1ee60:	ff 1f       	adc	r31, r31
   1ee62:	a2 17       	cp	r26, r18
   1ee64:	b3 07       	cpc	r27, r19
   1ee66:	e4 07       	cpc	r30, r20
   1ee68:	f5 07       	cpc	r31, r21
   1ee6a:	20 f0       	brcs	.+8      	; 0x1ee74 <__udivmodsi4_ep>
   1ee6c:	a2 1b       	sub	r26, r18
   1ee6e:	b3 0b       	sbc	r27, r19
   1ee70:	e4 0b       	sbc	r30, r20
   1ee72:	f5 0b       	sbc	r31, r21

0001ee74 <__udivmodsi4_ep>:
   1ee74:	66 1f       	adc	r22, r22
   1ee76:	77 1f       	adc	r23, r23
   1ee78:	88 1f       	adc	r24, r24
   1ee7a:	99 1f       	adc	r25, r25
   1ee7c:	1a 94       	dec	r1
   1ee7e:	69 f7       	brne	.-38     	; 0x1ee5a <__udivmodsi4_loop>
   1ee80:	60 95       	com	r22
   1ee82:	70 95       	com	r23
   1ee84:	80 95       	com	r24
   1ee86:	90 95       	com	r25
   1ee88:	9b 01       	movw	r18, r22
   1ee8a:	ac 01       	movw	r20, r24
   1ee8c:	bd 01       	movw	r22, r26
   1ee8e:	cf 01       	movw	r24, r30
   1ee90:	08 95       	ret

0001ee92 <_exit>:
   1ee92:	f8 94       	cli

0001ee94 <__stop_program>:
   1ee94:	ff cf       	rjmp	.-2      	; 0x1ee94 <__stop_program>
