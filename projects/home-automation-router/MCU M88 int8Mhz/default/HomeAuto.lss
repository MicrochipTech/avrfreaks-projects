
HomeAuto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800100  00800100  000003fa  2**0
                  ALLOC
  2 .debug_aranges 000000c0  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001b1  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e1e  00000000  00000000  0000066b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000049a  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000074a  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000029e  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c5  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	3c c1       	rjmp	.+632    	; 0x296 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	09 c1       	rjmp	.+530    	; 0x238 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 30       	cpi	r26, 0x0C	; 12
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	09 d0       	rcall	.+18     	; 0x64 <main>
  52:	97 c1       	rjmp	.+814    	; 0x382 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Flash_LED>:

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void Flash_LED (void)
{
	LEDon;
  56:	2d 9a       	sbi	0x05, 5	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  58:	80 e2       	ldi	r24, 0x20	; 32
  5a:	9e e4       	ldi	r25, 0x4E	; 78
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <Flash_LED+0x6>
	_delay_ms(10);
	LEDoff;
  60:	2d 98       	cbi	0x05, 5	; 5
}
  62:	08 95       	ret

00000064 <main>:

int main(void)
{	
	init_Pins();
  64:	1e d0       	rcall	.+60     	; 0xa2 <init_Pins>
	init_Timers();
  66:	0d d1       	rcall	.+538    	; 0x282 <init_Timers>
	set_sleep_mode(SLEEP_MODE_IDLE);	//all peripheral clocks are still running
  68:	83 b7       	in	r24, 0x33	; 51
  6a:	81 7f       	andi	r24, 0xF1	; 241
  6c:	83 bf       	out	0x33, r24	; 51

//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void Flash_LED (void)
{
	LEDon;
  6e:	2d 9a       	sbi	0x05, 5	; 5
  70:	80 e2       	ldi	r24, 0x20	; 32
  72:	9e e4       	ldi	r25, 0x4E	; 78
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x10>
	_delay_ms(10);
	LEDoff;
  78:	2d 98       	cbi	0x05, 5	; 5
	init_Timers();
	set_sleep_mode(SLEEP_MODE_IDLE);	//all peripheral clocks are still running
	
	Flash_LED();

	Enable_UART();	//before sei() 
  7a:	82 d0       	rcall	.+260    	; 0x180 <Enable_UART>
	Enable_UART_RXC_ISR;
  7c:	80 91 c1 00 	lds	r24, 0x00C1
  80:	80 68       	ori	r24, 0x80	; 128
  82:	80 93 c1 00 	sts	0x00C1, r24
	
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	sei();	//Enable interrupts
  86:	78 94       	sei

	while(1)
	{		
		sleep_mode();
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	83 bf       	out	0x33, r24	; 51
  8e:	88 95       	sleep
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	83 bf       	out	0x33, r24	; 51
		
		if  ( Packet_RX_ed == 1  )
  96:	80 91 00 01 	lds	r24, 0x0100
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	a9 f7       	brne	.-22     	; 0x88 <main+0x24>
		{
			UART_RX_Handler();	
  9e:	53 d0       	rcall	.+166    	; 0x146 <UART_RX_Handler>
  a0:	f3 cf       	rjmp	.-26     	; 0x88 <main+0x24>

000000a2 <init_Pins>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void init_Pins (void)
{
	//bit_set(MCUCR,BIT(PUD));	//Disable Pull ups
	bit_clear(MCUCR,BIT(PUD));	//Enable  Pull ups
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	8f 7e       	andi	r24, 0xEF	; 239
  a6:	85 bf       	out	0x35, r24	; 53
	//Pull up for uart doesn't work!!!! tested
	//bit_set(PORTD,BIT(0));		//to enable pull ups
	//bit_set(PORTD,BIT(1));

	//Output:1 Input:0
	DDRB = 0b11111111;			
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11111111;
  ac:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11111110;
  ae:	8e ef       	ldi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10

}	//init_Pins
  b2:	08 95       	ret

000000b4 <Calc_Checksum>:
{
	unsigned char sum = 0;
	
	//leave out Sync & Checksum_Byte & End_Byte
	for (unsigned char i=1;i<Message_Length-2;i++)	
		sum += Message[i];		
  b4:	80 91 08 01 	lds	r24, 0x0108
  b8:	90 91 07 01 	lds	r25, 0x0107
  bc:	89 0f       	add	r24, r25
  be:	90 91 09 01 	lds	r25, 0x0109
  c2:	89 0f       	add	r24, r25
	sum = ~sum;			//Same as XOR 0xFF
	sum++;				//Must add 1
	//sum&= 0xFF;		//only if int!
	
	return sum;
}
  c4:	81 95       	neg	r24
  c6:	08 95       	ret

000000c8 <Validity_Check>:
*/

unsigned char Validity_Check ( void )	//returns 0 if failed, 1 if passed
{
	//Make sure Sync is valid
	if ( Message[0] != Sync_Byte )
  c8:	80 91 06 01 	lds	r24, 0x0106
  cc:	8b 39       	cpi	r24, 0x9B	; 155
  ce:	61 f4       	brne	.+24     	; 0xe8 <Validity_Check+0x20>
		return 0;
	
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	//Check for valid end
	if ( Message[Message_Length-1] != End_Byte )
  d0:	80 91 0b 01 	lds	r24, 0x010B
  d4:	8d 30       	cpi	r24, 0x0D	; 13
  d6:	41 f4       	brne	.+16     	; 0xe8 <Validity_Check+0x20>
		return 0;

	if( Calc_Checksum() != Checksum_Byte )
  d8:	ed df       	rcall	.-38     	; 0xb4 <Calc_Checksum>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	90 91 0a 01 	lds	r25, 0x010A
  e0:	89 17       	cp	r24, r25
  e2:	19 f4       	brne	.+6      	; 0xea <Validity_Check+0x22>
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <Validity_Check+0x22>
  e8:	20 e0       	ldi	r18, 0x00	; 0
		return 0;
	
	//Everything was fine, proceed
	return 1;
}
  ea:	82 2f       	mov	r24, r18
  ec:	08 95       	ret

000000ee <Clear_RX_Buffer>:
}

void Clear_RX_Buffer ( void )
{
	for (unsigned char i=0;i<Message_Length;i++)
		Message[i] = 0;
  ee:	10 92 06 01 	sts	0x0106, r1
  f2:	10 92 07 01 	sts	0x0107, r1
  f6:	10 92 08 01 	sts	0x0108, r1
  fa:	10 92 09 01 	sts	0x0109, r1
  fe:	10 92 0a 01 	sts	0x010A, r1
 102:	10 92 0b 01 	sts	0x010B, r1
}
 106:	08 95       	ret

00000108 <Proccess>:
	return sum;
}


void Proccess ( void )
{
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	#define How_Many_Times_To_TX	((Message[1] >> 4) + 1)

	//Check MSG type
	//if ( (Message[1] & 0x0F) /*== 1*/ )	//Keep_outputs
	//{
		unsigned int tmp = (Message[2] << 8) | Message[3];
 10e:	90 91 08 01 	lds	r25, 0x0108
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	20 91 09 01 	lds	r18, 0x0109
 118:	c2 2f       	mov	r28, r18
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	c8 2b       	or	r28, r24
 11e:	d9 2b       	or	r29, r25
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <Proccess+0x22>

		for (unsigned char i=0;i<How_Many_Times_To_TX;i++)	
			Send_Out_Frame ( tmp );	//Must use tmp!
 124:	ce 01       	movw	r24, r28
 126:	c6 d0       	rcall	.+396    	; 0x2b4 <Send_Out_Frame>
	//Check MSG type
	//if ( (Message[1] & 0x0F) /*== 1*/ )	//Keep_outputs
	//{
		unsigned int tmp = (Message[2] << 8) | Message[3];

		for (unsigned char i=0;i<How_Many_Times_To_TX;i++)	
 128:	1f 5f       	subi	r17, 0xFF	; 255
 12a:	80 91 07 01 	lds	r24, 0x0107
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	21 2f       	mov	r18, r17
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	82 17       	cp	r24, r18
 13a:	93 07       	cpc	r25, r19
 13c:	9c f7       	brge	.-26     	; 0x124 <Proccess+0x1c>
			Send_Out_Frame ( tmp );	//Must use tmp!
	//}

}	//Proccess
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	08 95       	ret

00000146 <UART_RX_Handler>:


void UART_RX_Handler( void )
{
	Disable_UART_RX;	//Do not overwrite existing data
 146:	80 91 c1 00 	lds	r24, 0x00C1
 14a:	8f 7e       	andi	r24, 0xEF	; 239
 14c:	80 93 c1 00 	sts	0x00C1, r24

	if ( Validity_Check() == 1 )	
 150:	bb df       	rcall	.-138    	; 0xc8 <Validity_Check>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	09 f4       	brne	.+2      	; 0x158 <UART_RX_Handler+0x12>
		Proccess();
 156:	d8 df       	rcall	.-80     	; 0x108 <Proccess>
}

void Clear_RX_Buffer ( void )
{
	for (unsigned char i=0;i<Message_Length;i++)
		Message[i] = 0;
 158:	10 92 06 01 	sts	0x0106, r1
 15c:	10 92 07 01 	sts	0x0107, r1
 160:	10 92 08 01 	sts	0x0108, r1
 164:	10 92 09 01 	sts	0x0109, r1
 168:	10 92 0a 01 	sts	0x010A, r1
 16c:	10 92 0b 01 	sts	0x010B, r1
	if ( Validity_Check() == 1 )	
		Proccess();
	
	Clear_RX_Buffer();	//For new Msgs
	
	Packet_RX_ed = 0;
 170:	10 92 00 01 	sts	0x0100, r1
	Enable_UART_RX;		//Ready to RX next one
 174:	80 91 c1 00 	lds	r24, 0x00C1
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	80 93 c1 00 	sts	0x00C1, r24
}
 17e:	08 95       	ret

00000180 <Enable_UART>:
unsigned char Msg_Pointer = 0;


void Enable_UART (void)
{
	UBRR0 	= 8;
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 c5 00 	sts	0x00C5, r25
 188:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C 	= 0b00000110;	//Asynchronous USART, No Parity, 1 Stop bit
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B 	= 0b00011000;	//Enable TX/RX, no interrupt (not set here),8bit
 192:	e1 ec       	ldi	r30, 0xC1	; 193
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	88 e1       	ldi	r24, 0x18	; 24
 198:	80 83       	st	Z, r24
	bit_set( UCSR0A, BIT(U2X0));
 19a:	a0 ec       	ldi	r26, 0xC0	; 192
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	8c 91       	ld	r24, X
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	8c 93       	st	X, r24

	Enable_UART_TX;
 1a4:	80 81       	ld	r24, Z
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 83       	st	Z, r24
	Enable_UART_RX;
 1aa:	80 81       	ld	r24, Z
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	80 83       	st	Z, r24
	Enable_UART_RXC_ISR;	//interrupt driven RX
 1b0:	80 81       	ld	r24, Z
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	80 83       	st	Z, r24
	
}	//Enable_UART()
 1b6:	08 95       	ret

000001b8 <Add_To_RX_Buffer>:


void Add_To_RX_Buffer ( unsigned char inp_Byte )
{
 1b8:	98 2f       	mov	r25, r24
	if ( Packet_RX_ed == 1 )
 1ba:	80 91 00 01 	lds	r24, 0x0100
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	d1 f1       	breq	.+116    	; 0x236 <Add_To_RX_Buffer+0x7e>
		return;
	
	switch ( Sync_State )
 1c2:	80 91 02 01 	lds	r24, 0x0102
 1c6:	88 23       	and	r24, r24
 1c8:	19 f0       	breq	.+6      	; 0x1d0 <Add_To_RX_Buffer+0x18>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	a1 f5       	brne	.+104    	; 0x236 <Add_To_RX_Buffer+0x7e>
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <Add_To_RX_Buffer+0x38>
	{
		case 0:
		{ 	
			Msg_Pointer = 0;
 1d0:	10 92 03 01 	sts	0x0103, r1
			RX_Over_Timed = 0;
 1d4:	10 92 01 01 	sts	0x0101, r1
			
			if ( inp_Byte == Sync_Byte )
 1d8:	9b 39       	cpi	r25, 0x9B	; 155
 1da:	69 f5       	brne	.+90     	; 0x236 <Add_To_RX_Buffer+0x7e>
			{
				Message[0] = Sync_Byte;
 1dc:	90 93 06 01 	sts	0x0106, r25
				Msg_Pointer = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 03 01 	sts	0x0103, r24
				Sync_State++;
 1e6:	80 93 02 01 	sts	0x0102, r24
				Start_RX_Over_Timer;
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	85 bd       	out	0x25, r24	; 37
 1ee:	08 95       	ret
		}
			
		case 1:
		{ 

			if ( RX_Over_Timed == 1 )
 1f0:	80 91 01 01 	lds	r24, 0x0101
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	39 f4       	brne	.+14     	; 0x206 <Add_To_RX_Buffer+0x4e>
			{
				Sync_State = 0;
 1f8:	10 92 02 01 	sts	0x0102, r1
				RX_Over_Timed = 0;
 1fc:	10 92 01 01 	sts	0x0101, r1
				Msg_Pointer = 0;	//safety
 200:	10 92 03 01 	sts	0x0103, r1
 204:	0a c0       	rjmp	.+20     	; 0x21a <Add_To_RX_Buffer+0x62>
			}
			else
			{
				Message[Msg_Pointer] = inp_Byte; 
 206:	80 91 03 01 	lds	r24, 0x0103
 20a:	e8 2f       	mov	r30, r24
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ea 5f       	subi	r30, 0xFA	; 250
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	90 83       	st	Z, r25
				Msg_Pointer++;
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 03 01 	sts	0x0103, r24
			}
				
			if ( Msg_Pointer == Message_Length )
 21a:	80 91 03 01 	lds	r24, 0x0103
 21e:	86 30       	cpi	r24, 0x06	; 6
 220:	41 f4       	brne	.+16     	; 0x232 <Add_To_RX_Buffer+0x7a>
			{

				Packet_RX_ed = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 00 01 	sts	0x0100, r24
				Stop_RX_Over_Timer;
 228:	15 bc       	out	0x25, r1	; 37
				RST_RX_Over_Timer;
 22a:	16 bc       	out	0x26, r1	; 38
				Sync_State = 0;
 22c:	10 92 02 01 	sts	0x0102, r1
 230:	08 95       	ret
			}
			else
				Start_RX_Over_Timer;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	85 bd       	out	0x25, r24	; 37
 236:	08 95       	ret

00000238 <__vector_18>:


//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

ISR (USART_RX_vect)		//RX Complete Handler
{	
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	//interrupt driven RX

	//Make it short as possible
	Add_To_RX_Buffer( UDR0 );
 25a:	80 91 c6 00 	lds	r24, 0x00C6
 25e:	ac df       	rcall	.-168    	; 0x1b8 <Add_To_RX_Buffer>

}	//USART_RXC_vect
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <init_Timers>:

//RX Byte overtime ~120uS

void init_Timers(void)
{
	TCCR0A	= 0b00000010;		//'A'register, CTC
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	84 bd       	out	0x24, r24	; 36
	//TCCR0B	= 0b00000011;	//'B'register! Div:64
	//(in macro)
	OCR0A	= Max_Delay_bw_Bytes;	//For 8Mhz
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	87 bd       	out	0x27, r24	; 39
	bit_set(TIMSK0,BIT(OCIE0A));
 28a:	ee e6       	ldi	r30, 0x6E	; 110
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 83       	st	Z, r24
	
	//Start of timer + Prescaler settings in MACRO

}
 294:	08 95       	ret

00000296 <__vector_14>:

ISR(TIMER0_COMPA_vect)	//RX timeout, Timer0 Compare A Handler
{
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	8f 93       	push	r24
	RX_Over_Timed = 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 01 01 	sts	0x0101, r24
}
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <Send_Out_Frame>:
	Send_Out_Sync();
}


void Send_Out_Frame ( unsigned int input_16 )
{
 2b4:	fc 01       	movw	r30, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0

	//No '1's are used!
	//Bit Float := 0
	//Bit 0 := 1
	
	if ( outBit )
 2b8:	a1 e0       	ldi	r26, 0x01	; 1
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	44 e9       	ldi	r20, 0x94	; 148
 2be:	52 e0       	ldi	r21, 0x02	; 2
 2c0:	58 c0       	rjmp	.+176    	; 0x372 <Send_Out_Frame+0xbe>
 2c2:	cd 01       	movw	r24, r26
 2c4:	06 2e       	mov	r0, r22
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Send_Out_Frame+0x18>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <Send_Out_Frame+0x14>
 2d0:	8e 23       	and	r24, r30
 2d2:	9f 23       	and	r25, r31
 2d4:	89 2b       	or	r24, r25
 2d6:	a9 f0       	breq	.+42     	; 0x302 <Send_Out_Frame+0x4e>
 2d8:	20 e0       	ldi	r18, 0x00	; 0

}

static void RF_Output_High( void )
{
	bit_set(PORTB,BIT(2));
 2da:	2a 9a       	sbi	0x05, 2	; 5
	LEDon;
 2dc:	2d 9a       	sbi	0x05, 5	; 5
 2de:	ca 01       	movw	r24, r20
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Send_Out_Frame+0x2c>
}

static void RF_Output_Low( void )
{
	bit_clear(PORTB,BIT(2));
 2e4:	2a 98       	cbi	0x05, 2	; 5
	LEDoff;
 2e6:	2d 98       	cbi	0x05, 5	; 5
 2e8:	ca 01       	movw	r24, r20
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <Send_Out_Frame+0x36>
 2ee:	ca 01       	movw	r24, r20
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <Send_Out_Frame+0x3c>
 2f4:	ca 01       	movw	r24, r20
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <Send_Out_Frame+0x42>
	//No '1's are used!
	//Bit Float := 0
	//Bit 0 := 1
	
	if ( outBit )
		for (unsigned char i=0;i<2;i++)	//Can be decomposed to 2 halfes
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	69 f7       	brne	.-38     	; 0x2da <Send_Out_Frame+0x26>
 300:	20 c0       	rjmp	.+64     	; 0x342 <Send_Out_Frame+0x8e>

}

static void RF_Output_High( void )
{
	bit_set(PORTB,BIT(2));
 302:	2a 9a       	sbi	0x05, 2	; 5
	LEDon;
 304:	2d 9a       	sbi	0x05, 5	; 5
 306:	ca 01       	movw	r24, r20
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <Send_Out_Frame+0x54>
}

static void RF_Output_Low( void )
{
	bit_clear(PORTB,BIT(2));
 30c:	2a 98       	cbi	0x05, 2	; 5
	LEDoff;
 30e:	2d 98       	cbi	0x05, 5	; 5
 310:	ca 01       	movw	r24, r20
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <Send_Out_Frame+0x5e>
 316:	ca 01       	movw	r24, r20
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Send_Out_Frame+0x64>
 31c:	ca 01       	movw	r24, r20
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <Send_Out_Frame+0x6a>

}

static void RF_Output_High( void )
{
	bit_set(PORTB,BIT(2));
 322:	2a 9a       	sbi	0x05, 2	; 5
	LEDon;
 324:	2d 9a       	sbi	0x05, 5	; 5
 326:	ca 01       	movw	r24, r20
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <Send_Out_Frame+0x74>
 32c:	ca 01       	movw	r24, r20
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <Send_Out_Frame+0x7a>
 332:	ca 01       	movw	r24, r20
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <Send_Out_Frame+0x80>
}

static void RF_Output_Low( void )
{
	bit_clear(PORTB,BIT(2));
 338:	2a 98       	cbi	0x05, 2	; 5
	LEDoff;
 33a:	2d 98       	cbi	0x05, 5	; 5
 33c:	ca 01       	movw	r24, r20
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <Send_Out_Frame+0x8a>
 342:	61 50       	subi	r22, 0x01	; 1
 344:	70 40       	sbci	r23, 0x00	; 0

static inline void Send_Out_Word ( void )
{

	//use only if (bit)!
	for (unsigned char i=0;i<Number_of_Word_Bits;i++)
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	6f 3f       	cpi	r22, 0xFF	; 255
 34a:	78 07       	cpc	r23, r24
 34c:	09 f0       	breq	.+2      	; 0x350 <Send_Out_Frame+0x9c>
 34e:	b9 cf       	rjmp	.-142    	; 0x2c2 <Send_Out_Frame+0xe>

}

static void RF_Output_High( void )
{
	bit_set(PORTB,BIT(2));
 350:	2a 9a       	sbi	0x05, 2	; 5
	LEDon;
 352:	2d 9a       	sbi	0x05, 5	; 5
 354:	ca 01       	movw	r24, r20
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <Send_Out_Frame+0xa2>
}

static void RF_Output_Low( void )
{
	bit_clear(PORTB,BIT(2));
 35a:	2a 98       	cbi	0x05, 2	; 5
	LEDoff;
 35c:	2d 98       	cbi	0x05, 5	; 5
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	ca 01       	movw	r24, r20
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <Send_Out_Frame+0xae>
{
	RF_Output_High();
	Wait_4T();
	RF_Output_Low();
	
	for (unsigned char i=0;i<31;i++)	//Based on protocol!
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	2f 31       	cpi	r18, 0x1F	; 31
 36a:	d1 f7       	brne	.-12     	; 0x360 <Send_Out_Frame+0xac>

void Send_Out_Frame ( unsigned int input_16 )
{
	Data_out_16 = input_16;

	for (unsigned char i=0;i<Number_Words_in_Frame;i++)
 36c:	3f 5f       	subi	r19, 0xFF	; 255
 36e:	34 30       	cpi	r19, 0x04	; 4
 370:	19 f0       	breq	.+6      	; 0x378 <Send_Out_Frame+0xc4>
 372:	6b e0       	ldi	r22, 0x0B	; 11
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	a5 cf       	rjmp	.-182    	; 0x2c2 <Send_Out_Frame+0xe>
		Send_Out_Word();

	Data_out_16 = 0;
 378:	10 92 05 01 	sts	0x0105, r1
 37c:	10 92 04 01 	sts	0x0104, r1
}
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
