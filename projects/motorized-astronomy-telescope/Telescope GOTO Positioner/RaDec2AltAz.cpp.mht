From: <Saved by UnMHT>
Subject: =?iso-2022-jp?B??=
Date: Tue, Mar 29 2011 23:20:14 GMT+0200
MIME-Version: 1.0
Content-Type: multipart/related;
	boundary="----=_NextPart_000_0000_91811D3A.77B74360";
	type="text/html"

------=_NextPart_000_0000_91811D3A.77B74360
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://csrg.inf.utfsm.cl/repos/software/CSAT/amTCS/trunk/src/CalculationsImpl.cpp

=EF=BB=BF<html><!-- Saved from https://csrg.inf.utfsm.cl/repos/software/CSA=
T/amTCS/trunk/src/CalculationsImpl.cpp --><head><meta http-equiv=3D"Content=
-Type" content=3D"text/html; charset=3Dutf-8"><base href=3D"https://csrg.in=
f.utfsm.cl/repos/software/CSAT/amTCS/trunk/src/"></base></head><body><pre>/=
***************************************************************************=
****
 *    ALMA - Atacama Large Millimiter Array
 *    (c) Associated Universities Inc., 2002 *
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration)
 *    and Cosylab 2002, All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307=
  USA
 *
 *
 *
 * &quot;@(#) $Id: CalculationsImpl.cpp,v 1.10 2007/11/14 19:02:53 csrg Exp=
 $&quot;
 *=20
 * Implementation file developed by
 *
 * Rodrigo Tobar - rtobar@csrg.inf.utfsm.cl
 * Joao Lopez    - jslopez@csrg.inf.utfsm.cl
 *
 */

#include &lt;iostream&gt;
#include &lt;unistd.h&gt;
#include &lt;time.h&gt;

#include &quot;CalculationsImpl.h&quot;
#include &quot;csatErrors.h&quot;

using namespace acscomponent;

/* ----------------------------------------------------------------*/
CalculationsImpl::CalculationsImpl(const ACE_CString &amp;name, maci::Conta=
inerServices *containerServices) :
  acscomponent::ACSComponentImpl(name, containerServices)
{
  const char *_METHOD_=3D&quot;Calculations::CalculationsImpl&quot;;
  // ACS_TRACE is used for debugging purposes
  ACS_TRACE(_METHOD_);
}

/* ----------------------------------------------------------------*/
CalculationsImpl::~CalculationsImpl()
{
  const char *_METHOD_=3D&quot;Calculations::~CalculationsImpl&quot;;
  ACS_DEBUG_PARAM(_METHOD_, &quot;Destroying %s...&quot;, name());
}


void CalculationsImpl::initialize() throw (acsErrTypeLifeCycle::LifeCycleEx=
Impl) {

	const char* _METHOD_ =3D &quot;CalculationsImpl::initialize()&quot;;
	locale_comp =3D LOCALE_MODULE::Locale::_nil();
	locale_comp =3D getContainerServices()-&gt;getDefaultComponent&lt;LOCALE_M=
ODULE::Locale&gt;(&quot;IDL:alma/LOCALE_MODULE/Locale:1.0&quot;);

	if( CORBA::is_nil(locale_comp.in()) ) {
		throw acsErrTypeLifeCycle::LifeCycleExImpl( __FILE__ , __LINE__ , _METHOD=
_ );
	}

}

/* --------------------- [ CORBA interface ] ----------------------*/
TYPES::RadecPos CalculationsImpl::Altaz2Radec(const TYPES::AltazPos &amp;=
 pos) throw(CORBA::SystemException){

	double DEC;
	double HA;
	double RA;
	double LMST;
	double LAT;
	double ALT;
	double AZ;
	double tmp1;
	double tmp2;
           =20
	ALT =3D pos.alt;
	AZ  =3D pos.az;
              =20
	LMST =3D siderealTime();
	LAT  =3D locale_comp-&gt;localPos().latitude;

	DEC =3D DASIN( DSIN(ALT) * DSIN(LAT) - DCOS(AZ)*DCOS(ALT)*DCOS(LAT) );

	tmp1 =3D DSIN(AZ);
	tmp2 =3D DCOS(AZ)*DSIN(LAT) + DTAN(ALT)*DCOS(LAT);
	HA =3D DATAN2(tmp1,tmp2);

	RA =3D LMST - HA;

	while( RA &lt; 0 )
		RA +=3D 360;
	while( RA &gt; 360 )
		RA -=3D 360;

	while( DEC &lt; 0 )
		DEC +=3D 360;
	while( DEC &gt; 360 )
		DEC -=3D 360;

	TYPES::RadecPos returnPos =3D TYPES::RadecPos();
	returnPos.ra  =3D RA;
	returnPos.dec =3D DEC;

	return returnPos;
}

TYPES::AltazPos CalculationsImpl::Radec2Altaz(const TYPES::RadecPos &amp;=
 pos) throw(CORBA::SystemException){

	double LAT;
	double HA;
	double LMST;
	double DEC;
	double RA;
	double ALT;
	double AZ;
	double tmp1;
	double tmp2;

	RA  =3D pos.ra;
	DEC =3D pos.dec;

	LMST =3D siderealTime();
	LAT  =3D locale_comp-&gt;localPos().latitude;

	HA =3D LMST - RA;

	//Se obtiene la altitud en grados.
	ALT =3D DSIN(DEC)*DSIN(LAT);
	ALT +=3D DCOS(DEC)*DCOS(LAT)*DCOS(HA);
	ALT =3D DASIN(ALT);

	tmp1 =3D DSIN(HA);
	tmp2 =3D (DCOS(HA)*DSIN(LAT) - DTAN(DEC)*DCOS(LAT));
	AZ =3D DATAN2(tmp1,tmp2);

	while(ALT&gt;360)
		ALT -=3D 360;
	while(ALT&lt;0)
		ALT +=3D 360;

	while(AZ&gt;360)
		AZ -=3D 360;
	while(AZ&lt;0)
		AZ +=3D 360;

	TYPES::AltazPos returnPos =3D TYPES::AltazPos();
	returnPos.alt =3D ALT;
	returnPos.az  =3D AZ;

	return returnPos;
}

/**
 * Returns the Julian Day for a given date.
 * (Astronomical Algorithms, second edition, Jean Meeus, 2005)
 */
CORBA::Double CalculationsImpl::date2JD(CORBA::Long year, CORBA::Long month=
, CORBA::Double day) throw(CORBA::SystemException,csatErrors::DateOutOfRang=
eEx){
=09
	const char *_METHOD_=3D&quot;CalculationsImpl::date2JD&quot;;
	int A, B;
	CORBA::Double jd;
	bool isJulian =3D false; /* The date is from Gregorian or Julian Calendar=
 */
=09
	if( month &lt; 1  || 12 &lt; month ||
	    day   &lt; 1  || 32 &lt; day){
		csatErrors::DateOutOfRangeExImpl ex(__FILE__,__LINE__,_METHOD_);
		ex.addData(&quot;Reason&quot;,&quot;Month or day is out of limits&quot;);
		throw ex.getDateOutOfRangeEx();
	}
	/* The last day of the Julian Calendar is on 1582, October 4th */
	if( year &lt; 1582 ||=20
	   (year =3D=3D 1582 &amp;&amp; month &lt; 10) ||
	   (year =3D=3D 1582 &amp;&amp; month =3D=3D 10 &amp;&amp; day &lt; 5) )
		isJulian =3D true;

	if( month &lt;=3D 2 ){
		year--;
		month +=3D 12;
	}

	A =3D INT(year/100);
	if( isJulian )
		B =3D 0;
	else
		B =3D 2 - A + INT(A/4);

	jd =3D INT(365.25 * (year + 4716)) + INT(30.6001 * (month + 1)) + day + B=
 - 1524.5;
	return jd;
}

TYPES::RadecPos CalculationsImpl::precessionHR(const TYPES::RadecPos &amp;=
 pos, CORBA::Double jd0, CORBA::Double jd1) throw (CORBA::SystemException){

	double T, t;
	double zeta, z, theta;
	double A, B, C;
	TYPES::RadecPos newPos;

	T =3D (jd0 - date2JD(2000,1,1.5))/36525;
	t =3D (jd1 - jd0)/36525;

	zeta  =3D (2306.2181/3600 + 1.39656/3600*T - 0.000139/3600*T*T)*t + (0.301=
88/3600 - 0.000344/3600*T)*t*t + 0.017998/3600*t*t*t;
	z     =3D (2306.2181/3600 + 1.39656/3600*T - 0.000139/3600*T*T)*t + (1.094=
68/3600 + 0.000066/3600*T)*t*t + 0.018203/3600*t*t*t;
	theta =3D (2004.3109/3600 - 0.85330/3600*T - 0.000217/3600*T*T)*t - (0.426=
65/3600 + 0.000217/3600*T)*t*t - 0.041833/3600*t*t*t;

	A =3D DCOS(pos.dec)*DSIN(pos.ra + zeta);
	B =3D DCOS(theta)*DCOS(pos.dec)*DCOS(pos.ra + zeta) - DSIN(theta)*DSIN(pos=
.dec);
	C =3D DSIN(theta)*DCOS(pos.dec)*DCOS(pos.ra + zeta) + DCOS(theta)*DSIN(pos=
.dec);

	newPos.ra  =3D DATAN2(A,B) + z;
	newPos.dec =3D DASIN(C);

	return newPos;
}

CORBA::Double CalculationsImpl::siderealTime() throw(CORBA::SystemException=
){

	double day;
        double JD;
	double T;
        double  MST;
        double LMST;
	TYPES::TimeVal time;
	struct tm *timeTm;

	time  =3D locale_comp-&gt;time();
	timeTm =3D gmtime((time_t*)&amp;time.sec);


	day =3D timeTm-&gt;tm_mday + timeTm-&gt;tm_hour/24. + timeTm-&gt;tm_min/14=
40. +  (timeTm-&gt;tm_sec + time.usec / 1000000.)/86400.;
	timeTm-&gt;tm_mon +=3D 1;
	timeTm-&gt;tm_year +=3D 1900;

	JD =3D date2JD(timeTm-&gt;tm_year, timeTm-&gt;tm_mon, day);
	T =3D (JD - 2451545.0) / 36525;

	MST =3D 280.46061837 + 360.98564736629*(JD - 2451545.0) + 0.000387933*T*T=
 - T*T*T/38710000;
	while(MST&gt;360)
		MST -=3D 360;
	while(MST&lt;0)
		MST +=3D 360;

	LMST =3D MST + locale_comp-&gt;localPos().longitude;
	while(LMST&gt;360)
		LMST -=3D 360;
	while(LMST&lt;0)
		LMST +=3D 360;

	return LMST;
}


/* --------------- [ MACI DLL support functions ] -----------------*/
#include &lt;maciACSComponentDefines.h&gt;
MACI_DLL_SUPPORT_FUNCTIONS(CalculationsImpl)
  /* ----------------------------------------------------------------*/
 =20
 =20
  /*___oOo___*/
</pre><div style=3D"font-size: 0.8em; clear: both; margin-top: 2em; border:=
 1px solid black; background-color: white; color: black; padding: 0.5em; te=
xt-align: center;">Saved from <a class=3D"unmht_link_to_original" style=3D"=
color: blue; background-color: inherit; text-decoration: underline;" href=
=3D"https://csrg.inf.utfsm.cl/repos/software/CSAT/amTCS/trunk/src/Calculati=
onsImpl.cpp">https://csrg.inf.utfsm.cl/repos/software/CSAT/amTCS/trunk/src/=
CalculationsImpl.cpp</a><br />Tue Mar 29 2011 23:20:13 GMT+0200 (Central Eu=
rope Daylight Time)<br />Saved by UnMHT Ver.5.6.9</div></body></html>
------=_NextPart_000_0000_91811D3A.77B74360--
