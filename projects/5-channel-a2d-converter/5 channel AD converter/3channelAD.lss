
3channelAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800100  00800100  00000540  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f1  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000070a  00000000  00000000  00000691  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000229  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005df  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007a  00000000  00000000  00001772  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	42 c0       	rjmp	.+132    	; 0xb0 <__vector_21>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ad 30       	cpi	r26, 0x0D	; 13
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0e d1       	rcall	.+540    	; 0x26e <main>
  52:	3a c2       	rjmp	.+1140   	; 0x4c8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Init_all>:
////////////////////////////////////////////////////
void UART_Init(void)
{

// Baud Rate = 4800	
	UBRR0L=103;
  56:	87 e6       	ldi	r24, 0x67	; 103
  58:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=0;
  5c:	10 92 c5 00 	sts	0x00C5, r1

	// Set frame format: 8data, 1stop bit

UCSR0C=	(0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01); // Enable receiver and transmitter
  60:	86 e0       	ldi	r24, 0x06	; 6
  62:	80 93 c2 00 	sts	0x00C2, r24
UCSR0B=(0<<RXEN0)|(1<<TXEN0);
  66:	88 e0       	ldi	r24, 0x08	; 8
  68:	80 93 c1 00 	sts	0x00C1, r24
{




ADMUX=(1<<REFS0)|(0<<REFS1)|(1<<MUX2)|(1<<MUX0);//AVCC voltage reference,Convert ADC5
  6c:	85 e4       	ldi	r24, 0x45	; 69
  6e:	80 93 7c 00 	sts	0x007C, r24

ADCSRB=0;//Set ADC to Free running mode
  72:	10 92 7b 00 	sts	0x007B, r1

ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  76:	8f ec       	ldi	r24, 0xCF	; 207
  78:	80 93 7a 00 	sts	0x007A, r24

UART_Init();
A2D_Init();


}
  7c:	08 95       	ret

0000007e <PortInit>:
///////////////////////////////////////
////  PWM_Init	Initializing PWM system
//////////////////
void PortInit(void)
{
DDRD=(1<<PIND1);
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	8a b9       	out	0x0a, r24	; 10
DDRC=0;
  82:	17 b8       	out	0x07, r1	; 7


}
  84:	08 95       	ret

00000086 <UART_Init>:
////////////////////////////////////////////////////
void UART_Init(void)
{

// Baud Rate = 4800	
	UBRR0L=103;
  86:	87 e6       	ldi	r24, 0x67	; 103
  88:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=0;
  8c:	10 92 c5 00 	sts	0x00C5, r1

	// Set frame format: 8data, 1stop bit

UCSR0C=	(0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01); // Enable receiver and transmitter
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24
UCSR0B=(0<<RXEN0)|(1<<TXEN0);
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24




}
  9c:	08 95       	ret

0000009e <A2D_Init>:
{




ADMUX=(1<<REFS0)|(0<<REFS1)|(1<<MUX2)|(1<<MUX0);//AVCC voltage reference,Convert ADC5
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	80 93 7c 00 	sts	0x007C, r24

ADCSRB=0;//Set ADC to Free running mode
  a4:	10 92 7b 00 	sts	0x007B, r1

ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	80 93 7a 00 	sts	0x007A, r24




}
  ae:	08 95       	ret

000000b0 <__vector_21>:
#define CH2Bit 8	//bit 3
#define CH3Bit	16	//bit 4
#define CHECKBIT(x,y) (x & (y)) /* Check bit y in byte x*/

ISR(ADC_vect)
 {
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
 
extern uint16_t CH0,CH1,CH2,CH3,CH4,CH5;
extern uint8_t channel;


switch (channel)
  c2:	80 91 0c 01 	lds	r24, 0x010C
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	61 f1       	breq	.+88     	; 0x122 <__vector_21+0x72>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	30 f4       	brcc	.+12     	; 0xda <__vector_21+0x2a>
  ce:	88 23       	and	r24, r24
  d0:	51 f0       	breq	.+20     	; 0xe6 <__vector_21+0x36>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <__vector_21+0x28>
  d6:	4f c0       	rjmp	.+158    	; 0x176 <__vector_21+0xc6>
  d8:	14 c0       	rjmp	.+40     	; 0x102 <__vector_21+0x52>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	81 f1       	breq	.+96     	; 0x13e <__vector_21+0x8e>
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_21+0x34>
  e2:	49 c0       	rjmp	.+146    	; 0x176 <__vector_21+0xc6>
  e4:	3a c0       	rjmp	.+116    	; 0x15a <__vector_21+0xaa>
		{

	case 0:

   CH0=(ADCL+(ADCH*256));
  e6:	30 91 78 00 	lds	r19, 0x0078
  ea:	20 91 79 00 	lds	r18, 0x0079
  ee:	92 2f       	mov	r25, r18
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	83 0f       	add	r24, r19
  f4:	91 1d       	adc	r25, r1
  f6:	90 93 01 01 	sts	0x0101, r25
  fa:	80 93 00 01 	sts	0x0100, r24
   channel=1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0d c0       	rjmp	.+26     	; 0x11c <__vector_21+0x6c>
	
	break;


	case 1:
	CH1=(ADCL+(ADCH*256));
 102:	30 91 78 00 	lds	r19, 0x0078
 106:	20 91 79 00 	lds	r18, 0x0079
 10a:	92 2f       	mov	r25, r18
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	83 0f       	add	r24, r19
 110:	91 1d       	adc	r25, r1
 112:	90 93 03 01 	sts	0x0103, r25
 116:	80 93 02 01 	sts	0x0102, r24
	channel=2;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	80 93 0c 01 	sts	0x010C, r24
 120:	38 c0       	rjmp	.+112    	; 0x192 <__vector_21+0xe2>
	break;

	case 2:
	CH2=(ADCL+(ADCH*256));
 122:	30 91 78 00 	lds	r19, 0x0078
 126:	20 91 79 00 	lds	r18, 0x0079
 12a:	92 2f       	mov	r25, r18
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	83 0f       	add	r24, r19
 130:	91 1d       	adc	r25, r1
 132:	90 93 05 01 	sts	0x0105, r25
 136:	80 93 04 01 	sts	0x0104, r24
	channel=3;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	ef cf       	rjmp	.-34     	; 0x11c <__vector_21+0x6c>
	break;
	
	case 3:
	CH3=(ADCL+(ADCH*256));
 13e:	30 91 78 00 	lds	r19, 0x0078
 142:	20 91 79 00 	lds	r18, 0x0079
 146:	92 2f       	mov	r25, r18
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	83 0f       	add	r24, r19
 14c:	91 1d       	adc	r25, r1
 14e:	90 93 07 01 	sts	0x0107, r25
 152:	80 93 06 01 	sts	0x0106, r24
	channel=4;
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	e1 cf       	rjmp	.-62     	; 0x11c <__vector_21+0x6c>
	break;
	
	case 4:
	CH4=(ADCL+(ADCH*256));
 15a:	30 91 78 00 	lds	r19, 0x0078
 15e:	20 91 79 00 	lds	r18, 0x0079
 162:	92 2f       	mov	r25, r18
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	83 0f       	add	r24, r19
 168:	91 1d       	adc	r25, r1
 16a:	90 93 09 01 	sts	0x0109, r25
 16e:	80 93 08 01 	sts	0x0108, r24
	channel=5;
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	d3 cf       	rjmp	.-90     	; 0x11c <__vector_21+0x6c>
	break;

	default:
	CH5=(ADCL+(ADCH*256));
 176:	30 91 78 00 	lds	r19, 0x0078
 17a:	20 91 79 00 	lds	r18, 0x0079
 17e:	92 2f       	mov	r25, r18
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	83 0f       	add	r24, r19
 184:	91 1d       	adc	r25, r1
 186:	90 93 0b 01 	sts	0x010B, r25
 18a:	80 93 0a 01 	sts	0x010A, r24
	channel=0;
 18e:	10 92 0c 01 	sts	0x010C, r1

	
	}
	

	ADMUX=channel;
 192:	80 91 0c 01 	lds	r24, 0x010C
 196:	80 93 7c 00 	sts	0x007C, r24
	ADMUX|=(1<<REFS0);
 19a:	80 91 7c 00 	lds	r24, 0x007C
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA|=(1<<ADSC);
 1a4:	80 91 7a 00 	lds	r24, 0x007A
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 93 7a 00 	sts	0x007A, r24
	



}
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <USART_Transmit>:




void USART_Transmit( unsigned char data )
{
 1c0:	98 2f       	mov	r25, r24

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 1c2:	80 91 c0 00 	lds	r24, 0x00C0
 1c6:	85 ff       	sbrs	r24, 5
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <USART_Transmit+0x2>
/* Put data into buffer, sends the data */
UDR0 = data;
 1ca:	90 93 c6 00 	sts	0x00C6, r25

}
 1ce:	08 95       	ret

000001d0 <Term_Send_Value_as_Digits>:
//***************************
// Convert byte to 3 ASCII digits and send
//***************************
void Term_Send_Value_as_Digits( uint16_t value )
{
 1d0:	9c 01       	movw	r18, r24
 1d2:	60 e1       	ldi	r22, 0x10	; 16
 1d4:	77 e2       	ldi	r23, 0x27	; 39
 1d6:	64 d1       	rcall	.+712    	; 0x4a0 <__udivmodhi4>
 1d8:	48 2f       	mov	r20, r24
 1da:	e9 2f       	mov	r30, r25
 1dc:	c9 01       	movw	r24, r18
 1de:	60 e1       	ldi	r22, 0x10	; 16
 1e0:	77 e2       	ldi	r23, 0x27	; 39
 1e2:	5e d1       	rcall	.+700    	; 0x4a0 <__udivmodhi4>
 1e4:	60 5d       	subi	r22, 0xD0	; 208

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 1e6:	80 91 c0 00 	lds	r24, 0x00C0
 1ea:	85 ff       	sbrs	r24, 5
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <Term_Send_Value_as_Digits+0x16>
/* Put data into buffer, sends the data */
UDR0 = data;
 1ee:	60 93 c6 00 	sts	0x00C6, r22
 1f2:	84 2f       	mov	r24, r20
 1f4:	9e 2f       	mov	r25, r30
 1f6:	68 ee       	ldi	r22, 0xE8	; 232
 1f8:	73 e0       	ldi	r23, 0x03	; 3
 1fa:	52 d1       	rcall	.+676    	; 0x4a0 <__udivmodhi4>
 1fc:	9c 01       	movw	r18, r24
 1fe:	84 2f       	mov	r24, r20
 200:	9e 2f       	mov	r25, r30
 202:	68 ee       	ldi	r22, 0xE8	; 232
 204:	73 e0       	ldi	r23, 0x03	; 3
 206:	4c d1       	rcall	.+664    	; 0x4a0 <__udivmodhi4>
 208:	60 5d       	subi	r22, 0xD0	; 208

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 20a:	80 91 c0 00 	lds	r24, 0x00C0
 20e:	85 ff       	sbrs	r24, 5
 210:	fc cf       	rjmp	.-8      	; 0x20a <Term_Send_Value_as_Digits+0x3a>
/* Put data into buffer, sends the data */
UDR0 = data;
 212:	60 93 c6 00 	sts	0x00C6, r22
 216:	c9 01       	movw	r24, r18
 218:	64 e6       	ldi	r22, 0x64	; 100
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	41 d1       	rcall	.+642    	; 0x4a0 <__udivmodhi4>
 21e:	48 2f       	mov	r20, r24
 220:	e9 2f       	mov	r30, r25
 222:	c9 01       	movw	r24, r18
 224:	64 e6       	ldi	r22, 0x64	; 100
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	3b d1       	rcall	.+630    	; 0x4a0 <__udivmodhi4>
 22a:	60 5d       	subi	r22, 0xD0	; 208

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 22c:	80 91 c0 00 	lds	r24, 0x00C0
 230:	85 ff       	sbrs	r24, 5
 232:	fc cf       	rjmp	.-8      	; 0x22c <Term_Send_Value_as_Digits+0x5c>
/* Put data into buffer, sends the data */
UDR0 = data;
 234:	60 93 c6 00 	sts	0x00C6, r22
 238:	84 2f       	mov	r24, r20
 23a:	9e 2f       	mov	r25, r30
 23c:	6a e0       	ldi	r22, 0x0A	; 10
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	2f d1       	rcall	.+606    	; 0x4a0 <__udivmodhi4>
 242:	26 2f       	mov	r18, r22
 244:	20 5d       	subi	r18, 0xD0	; 208
 246:	84 2f       	mov	r24, r20
 248:	9e 2f       	mov	r25, r30
 24a:	6a e0       	ldi	r22, 0x0A	; 10
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	28 d1       	rcall	.+592    	; 0x4a0 <__udivmodhi4>
 250:	98 2f       	mov	r25, r24

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 252:	80 91 c0 00 	lds	r24, 0x00C0
 256:	85 ff       	sbrs	r24, 5
 258:	fc cf       	rjmp	.-8      	; 0x252 <Term_Send_Value_as_Digits+0x82>
/* Put data into buffer, sends the data */
UDR0 = data;
 25a:	20 93 c6 00 	sts	0x00C6, r18

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 25e:	80 91 c0 00 	lds	r24, 0x00C0
 262:	85 ff       	sbrs	r24, 5
 264:	fc cf       	rjmp	.-8      	; 0x25e <Term_Send_Value_as_Digits+0x8e>
        value -= 10;
    }
    
    USART_Transmit( digit );                  // Send fourth digit
    
    USART_Transmit( '0' + value );            // Send fifth digit
 266:	90 5d       	subi	r25, 0xD0	; 208
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
/* Put data into buffer, sends the data */
UDR0 = data;
 268:	90 93 c6 00 	sts	0x00C6, r25
    }
    
    USART_Transmit( digit );                  // Send fourth digit
    
    USART_Transmit( '0' + value );            // Send fifth digit
}
 26c:	08 95       	ret

0000026e <main>:


 uint8_t  volatile channel =0;


int main(void) {
 26e:	7f 92       	push	r7
 270:	8f 92       	push	r8
 272:	9f 92       	push	r9
 274:	af 92       	push	r10
 276:	bf 92       	push	r11
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
uint16_t LineNumber=0;
Init_all();
 288:	e6 de       	rcall	.-564    	; 0x56 <Init_all>

sei();
 28a:	78 94       	sei
 28c:	c0 e0       	ldi	r28, 0x00	; 0
 28e:	d0 e0       	ldi	r29, 0x00	; 0
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
/* Put data into buffer, sends the data */
UDR0 = data;
 290:	10 e2       	ldi	r17, 0x20	; 32
sei();

while (1) {//loop forever


LineNumber++;
 292:	e3 e4       	ldi	r30, 0x43	; 67
 294:	fe 2e       	mov	r15, r30
 296:	08 e4       	ldi	r16, 0x48	; 72
 298:	70 e3       	ldi	r23, 0x30	; 48
 29a:	87 2e       	mov	r8, r23
 29c:	61 e3       	ldi	r22, 0x31	; 49
 29e:	76 2e       	mov	r7, r22
 2a0:	52 e3       	ldi	r21, 0x32	; 50
 2a2:	a5 2e       	mov	r10, r21
 2a4:	43 e3       	ldi	r20, 0x33	; 51
 2a6:	94 2e       	mov	r9, r20
 2a8:	34 e3       	ldi	r19, 0x34	; 52
 2aa:	c3 2e       	mov	r12, r19
 2ac:	25 e3       	ldi	r18, 0x35	; 53
 2ae:	b2 2e       	mov	r11, r18
 2b0:	9a e0       	ldi	r25, 0x0A	; 10
 2b2:	d9 2e       	mov	r13, r25
 2b4:	8d e0       	ldi	r24, 0x0D	; 13
 2b6:	e8 2e       	mov	r14, r24
 2b8:	21 96       	adiw	r28, 0x01	; 1
Term_Send_Value_as_Digits(LineNumber);
 2ba:	ce 01       	movw	r24, r28
 2bc:	89 df       	rcall	.-238    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2be:	80 91 c0 00 	lds	r24, 0x00C0
 2c2:	85 ff       	sbrs	r24, 5
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <main+0x50>
/* Put data into buffer, sends the data */
UDR0 = data;
 2c6:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2ca:	80 91 c0 00 	lds	r24, 0x00C0
 2ce:	85 ff       	sbrs	r24, 5
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <main+0x5c>
/* Put data into buffer, sends the data */
UDR0 = data;
 2d2:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2d6:	80 91 c0 00 	lds	r24, 0x00C0
 2da:	85 ff       	sbrs	r24, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <main+0x68>
/* Put data into buffer, sends the data */
UDR0 = data;
 2de:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2e2:	80 91 c0 00 	lds	r24, 0x00C0
 2e6:	85 ff       	sbrs	r24, 5
 2e8:	fc cf       	rjmp	.-8      	; 0x2e2 <main+0x74>
/* Put data into buffer, sends the data */
UDR0 = data;
 2ea:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2ee:	80 91 c0 00 	lds	r24, 0x00C0
 2f2:	85 ff       	sbrs	r24, 5
 2f4:	fc cf       	rjmp	.-8      	; 0x2ee <main+0x80>
/* Put data into buffer, sends the data */
UDR0 = data;
 2f6:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2fa:	80 91 c0 00 	lds	r24, 0x00C0
 2fe:	85 ff       	sbrs	r24, 5
 300:	fc cf       	rjmp	.-8      	; 0x2fa <main+0x8c>
/* Put data into buffer, sends the data */
UDR0 = data;
 302:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 306:	80 91 c0 00 	lds	r24, 0x00C0
 30a:	85 ff       	sbrs	r24, 5
 30c:	fc cf       	rjmp	.-8      	; 0x306 <__stack+0x7>
/* Put data into buffer, sends the data */
UDR0 = data;
 30e:	80 92 c6 00 	sts	0x00C6, r8

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 312:	80 91 c0 00 	lds	r24, 0x00C0
 316:	85 ff       	sbrs	r24, 5
 318:	fc cf       	rjmp	.-8      	; 0x312 <__stack+0x13>
/* Put data into buffer, sends the data */
UDR0 = data;
 31a:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('0');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH0);
 31e:	80 91 00 01 	lds	r24, 0x0100
 322:	90 91 01 01 	lds	r25, 0x0101
 326:	54 df       	rcall	.-344    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 328:	80 91 c0 00 	lds	r24, 0x00C0
 32c:	85 ff       	sbrs	r24, 5
 32e:	fc cf       	rjmp	.-8      	; 0x328 <__stack+0x29>
/* Put data into buffer, sends the data */
UDR0 = data;
 330:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 334:	80 91 c0 00 	lds	r24, 0x00C0
 338:	85 ff       	sbrs	r24, 5
 33a:	fc cf       	rjmp	.-8      	; 0x334 <__stack+0x35>
/* Put data into buffer, sends the data */
UDR0 = data;
 33c:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 340:	80 91 c0 00 	lds	r24, 0x00C0
 344:	85 ff       	sbrs	r24, 5
 346:	fc cf       	rjmp	.-8      	; 0x340 <__stack+0x41>
/* Put data into buffer, sends the data */
UDR0 = data;
 348:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 34c:	80 91 c0 00 	lds	r24, 0x00C0
 350:	85 ff       	sbrs	r24, 5
 352:	fc cf       	rjmp	.-8      	; 0x34c <__stack+0x4d>
/* Put data into buffer, sends the data */
UDR0 = data;
 354:	70 92 c6 00 	sts	0x00C6, r7

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 358:	80 91 c0 00 	lds	r24, 0x00C0
 35c:	85 ff       	sbrs	r24, 5
 35e:	fc cf       	rjmp	.-8      	; 0x358 <__stack+0x59>
/* Put data into buffer, sends the data */
UDR0 = data;
 360:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('1');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH1);
 364:	80 91 02 01 	lds	r24, 0x0102
 368:	90 91 03 01 	lds	r25, 0x0103
 36c:	31 df       	rcall	.-414    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 36e:	80 91 c0 00 	lds	r24, 0x00C0
 372:	85 ff       	sbrs	r24, 5
 374:	fc cf       	rjmp	.-8      	; 0x36e <__stack+0x6f>
/* Put data into buffer, sends the data */
UDR0 = data;
 376:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 37a:	80 91 c0 00 	lds	r24, 0x00C0
 37e:	85 ff       	sbrs	r24, 5
 380:	fc cf       	rjmp	.-8      	; 0x37a <__stack+0x7b>
/* Put data into buffer, sends the data */
UDR0 = data;
 382:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 386:	80 91 c0 00 	lds	r24, 0x00C0
 38a:	85 ff       	sbrs	r24, 5
 38c:	fc cf       	rjmp	.-8      	; 0x386 <__stack+0x87>
/* Put data into buffer, sends the data */
UDR0 = data;
 38e:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 392:	80 91 c0 00 	lds	r24, 0x00C0
 396:	85 ff       	sbrs	r24, 5
 398:	fc cf       	rjmp	.-8      	; 0x392 <__stack+0x93>
/* Put data into buffer, sends the data */
UDR0 = data;
 39a:	a0 92 c6 00 	sts	0x00C6, r10

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 39e:	80 91 c0 00 	lds	r24, 0x00C0
 3a2:	85 ff       	sbrs	r24, 5
 3a4:	fc cf       	rjmp	.-8      	; 0x39e <__stack+0x9f>
/* Put data into buffer, sends the data */
UDR0 = data;
 3a6:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('2');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH2);
 3aa:	80 91 04 01 	lds	r24, 0x0104
 3ae:	90 91 05 01 	lds	r25, 0x0105
 3b2:	0e df       	rcall	.-484    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3b4:	80 91 c0 00 	lds	r24, 0x00C0
 3b8:	85 ff       	sbrs	r24, 5
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <__stack+0xb5>
/* Put data into buffer, sends the data */
UDR0 = data;
 3bc:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3c0:	80 91 c0 00 	lds	r24, 0x00C0
 3c4:	85 ff       	sbrs	r24, 5
 3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <__stack+0xc1>
/* Put data into buffer, sends the data */
UDR0 = data;
 3c8:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3cc:	80 91 c0 00 	lds	r24, 0x00C0
 3d0:	85 ff       	sbrs	r24, 5
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <__stack+0xcd>
/* Put data into buffer, sends the data */
UDR0 = data;
 3d4:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3d8:	80 91 c0 00 	lds	r24, 0x00C0
 3dc:	85 ff       	sbrs	r24, 5
 3de:	fc cf       	rjmp	.-8      	; 0x3d8 <__stack+0xd9>
/* Put data into buffer, sends the data */
UDR0 = data;
 3e0:	90 92 c6 00 	sts	0x00C6, r9

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3e4:	80 91 c0 00 	lds	r24, 0x00C0
 3e8:	85 ff       	sbrs	r24, 5
 3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <__stack+0xe5>
/* Put data into buffer, sends the data */
UDR0 = data;
 3ec:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('3');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH3);
 3f0:	80 91 06 01 	lds	r24, 0x0106
 3f4:	90 91 07 01 	lds	r25, 0x0107
 3f8:	eb de       	rcall	.-554    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3fa:	80 91 c0 00 	lds	r24, 0x00C0
 3fe:	85 ff       	sbrs	r24, 5
 400:	fc cf       	rjmp	.-8      	; 0x3fa <__stack+0xfb>
/* Put data into buffer, sends the data */
UDR0 = data;
 402:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 406:	80 91 c0 00 	lds	r24, 0x00C0
 40a:	85 ff       	sbrs	r24, 5
 40c:	fc cf       	rjmp	.-8      	; 0x406 <__stack+0x107>
/* Put data into buffer, sends the data */
UDR0 = data;
 40e:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 412:	80 91 c0 00 	lds	r24, 0x00C0
 416:	85 ff       	sbrs	r24, 5
 418:	fc cf       	rjmp	.-8      	; 0x412 <__stack+0x113>
/* Put data into buffer, sends the data */
UDR0 = data;
 41a:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 41e:	80 91 c0 00 	lds	r24, 0x00C0
 422:	85 ff       	sbrs	r24, 5
 424:	fc cf       	rjmp	.-8      	; 0x41e <__stack+0x11f>
/* Put data into buffer, sends the data */
UDR0 = data;
 426:	c0 92 c6 00 	sts	0x00C6, r12

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 42a:	80 91 c0 00 	lds	r24, 0x00C0
 42e:	85 ff       	sbrs	r24, 5
 430:	fc cf       	rjmp	.-8      	; 0x42a <__stack+0x12b>
/* Put data into buffer, sends the data */
UDR0 = data;
 432:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('4');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH4);
 436:	80 91 08 01 	lds	r24, 0x0108
 43a:	90 91 09 01 	lds	r25, 0x0109
 43e:	c8 de       	rcall	.-624    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 440:	80 91 c0 00 	lds	r24, 0x00C0
 444:	85 ff       	sbrs	r24, 5
 446:	fc cf       	rjmp	.-8      	; 0x440 <__stack+0x141>
/* Put data into buffer, sends the data */
UDR0 = data;
 448:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 44c:	80 91 c0 00 	lds	r24, 0x00C0
 450:	85 ff       	sbrs	r24, 5
 452:	fc cf       	rjmp	.-8      	; 0x44c <__stack+0x14d>
/* Put data into buffer, sends the data */
UDR0 = data;
 454:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 458:	80 91 c0 00 	lds	r24, 0x00C0
 45c:	85 ff       	sbrs	r24, 5
 45e:	fc cf       	rjmp	.-8      	; 0x458 <__stack+0x159>
/* Put data into buffer, sends the data */
UDR0 = data;
 460:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 464:	80 91 c0 00 	lds	r24, 0x00C0
 468:	85 ff       	sbrs	r24, 5
 46a:	fc cf       	rjmp	.-8      	; 0x464 <__stack+0x165>
/* Put data into buffer, sends the data */
UDR0 = data;
 46c:	b0 92 c6 00 	sts	0x00C6, r11

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 470:	80 91 c0 00 	lds	r24, 0x00C0
 474:	85 ff       	sbrs	r24, 5
 476:	fc cf       	rjmp	.-8      	; 0x470 <__stack+0x171>
/* Put data into buffer, sends the data */
UDR0 = data;
 478:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('5');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH5);
 47c:	80 91 0a 01 	lds	r24, 0x010A
 480:	90 91 0b 01 	lds	r25, 0x010B
 484:	a5 de       	rcall	.-694    	; 0x1d0 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 486:	80 91 c0 00 	lds	r24, 0x00C0
 48a:	85 ff       	sbrs	r24, 5
 48c:	fc cf       	rjmp	.-8      	; 0x486 <__stack+0x187>
/* Put data into buffer, sends the data */
UDR0 = data;
 48e:	d0 92 c6 00 	sts	0x00C6, r13

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 492:	80 91 c0 00 	lds	r24, 0x00C0
 496:	85 ff       	sbrs	r24, 5
 498:	fc cf       	rjmp	.-8      	; 0x492 <__stack+0x193>
/* Put data into buffer, sends the data */
UDR0 = data;
 49a:	e0 92 c6 00 	sts	0x00C6, r14
 49e:	0c cf       	rjmp	.-488    	; 0x2b8 <main+0x4a>

000004a0 <__udivmodhi4>:
 4a0:	aa 1b       	sub	r26, r26
 4a2:	bb 1b       	sub	r27, r27
 4a4:	51 e1       	ldi	r21, 0x11	; 17
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__udivmodhi4_ep>

000004a8 <__udivmodhi4_loop>:
 4a8:	aa 1f       	adc	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	a6 17       	cp	r26, r22
 4ae:	b7 07       	cpc	r27, r23
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__udivmodhi4_ep>
 4b2:	a6 1b       	sub	r26, r22
 4b4:	b7 0b       	sbc	r27, r23

000004b6 <__udivmodhi4_ep>:
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	5a 95       	dec	r21
 4bc:	a9 f7       	brne	.-22     	; 0x4a8 <__udivmodhi4_loop>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
