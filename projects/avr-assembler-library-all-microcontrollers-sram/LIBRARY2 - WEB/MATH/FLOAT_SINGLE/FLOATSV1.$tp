;+--------------------------------------------------------------------------------+              
;|João D´Artagnan A. Oliveira Programmer and Author; 				  |
;|										  |
;| All rights reserved.								  |
;|										  |
;|   Redistribution and use in source and binary forms, with or without		  |
;|  modification, are permitted provided that the following conditions are met:	  |
;|										  |
;|   * Redistributions of source code must retain the above copyright		  |
;|     notice, this list of conditions and the following disclaimer.		  |
;|										  |
;|   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  |
;|   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    |
;|   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   |
;|   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     |
;|   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	  |
;|   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	  |
;|   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	  |
;|   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	  |
;|   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	  |
;|   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   |
;|   POSSIBILITY OF SUCH DAMAGE.						  |
;|										  |
;|   Brasília, Brazil November 30,2015 	06:28 am				  |
;+--------------------------------------------------------------------------------+
;</$DS_HEADER>
;| SINGLE PRECISION FLOAT POINT 	I		|
;| 4 BITS INTERFACE					|
;| BY JOÃO DARTAGNAN ANTUNES OLIVEIRA			|
;| DATE:25/06/1999 VERSION 1.0				|
;>------------------------------------------------------<
;| S I N G L E  F L O A T  P O I N T  R O U T I N E S	|
;+------------------------------------------------------+
;| THIS DRIVE HAS INTEND TO USE WITH AVRS WITH SRAM	|
;+------------------------------------------------------+
;+--------------------------------------------------------------------------+
;! ROTINAS EM PONTO FLUTUANTE DE BASE BINARIA DE PRECISAO SIMPLES           !
;! FEITO POR JOAO DARTAGNAN ANTUNES OLIVEIRA                                !
;! DATA : 25/06/1999                                                        !
;! VERSAO 1.01                                                              !
;!                                                                          !
;!      FORMATACAO DO NUMERO EM PONTO FLUTUANTE NOS REGISTROS OU NA MEMORIA !
;!                                                                          !
;!      BITS --->       7 6 5 4 3 2 1 0                                     !
;!                     +-+-+-+-+-+-+-+-+                                    !
;!      Byte M+0       !m!m!m!m!m!m!m!m!  Lsb da mantisa                    !
;!                     +-+-+-+-+-+-+-+-+                                    !
;!      Byte M+1       !m!m!m!m!m!m!m!m!                                    !
;!                     +-+-+-+-+-+-+-+-+                                    !
;!      Byte M+2       !s!m!m!m!m!m!m!m!  Msb da mantisa                    !
;!                     +-+-+-+-+-+-+-+-+                                    !
;!      Byte M+3       !k!e!e!e!e!e!e!e!  Expoente                          !
;!                     +-+-+-+-+-+-+-+-+                                    !
;!                                                                          !
;!      m - mantisa                                                         !
;!      s - sinal da mantisa 0-positivo 1-negativo                          !
;!      k - sinal do expoente 0-positivo 1-negativo                         !
;!      e - expoente + BIAS de 81h(129) para que a representacao de zero    !
;!          seja feita apenas por um zero no byte de expoente               !
;!                                                                          !
;!      esta notacao permiti-ra o armazenamento da seguinte faixa de valores!
;!                                                                          !
;!      Maximo positivo  1.701412e+38                                       !
;!      Minimo positivo  5.877472e-39                                       !
;!      Maximo negativo -1.701412e+38                                       !
;!      Minimo positivo -5.877472e-39                                       !
;!                                                                          !
;!      a precisao sera de 7 digitos decimais                               !
;!                                                                          !
;+--------------------------------------------------------------------------+
;>------------------------------------------------------<
;| I M P L E M E N T E D  F U N C T I O N S 		|
;+------------------------------------------------------+---------------------------------------+
;|												|
;| FINIT	Float Point Initialize		 						|
;|												|
;| Obs:		Use this function to initialize float point software 				|
;+----------------------------------------------------------------------------------------------+
;| FLDI		Float Point Load Integer to Stack 						|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE INTEGER	;Define VarA a integer variable			|
;|		.CSEG										|
;|		FLDI	VarA			;Load VarA Convert to Float and Put Into Statck |
;+----------------------------------------------------------------------------------------------+
;| FSTI		Float Point Store Integer From Stack 						|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE INTEGER	;Define VarA a integer variable			|
;|		.CSEG										|
;|		FSTI	VarA			;Convert Top of Stack to Integer then Store it  |
;|						;into VarA					|
;+----------------------------------------------------------------------------------------------+
;| FSTIP	Float Point Store Integer From Stack and Pull 					|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE INTEGER	;Define VarA a integer variable			|
;|		.CSEG										|
;|		FSTIP	VarA			;Convert Top of Stack to Integer then Store it  |
;|						;into VarA and Stack is Pulled			|
;+----------------------------------------------------------------------------------------------+
;| FLD		Float Point Load to Stack	 						|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE FSINGLE	;Define VarA a Single variable			|
;|		.CSEG										|
;|		FLD	VarA			;Load VarA and Put Into Statck			|
;+----------------------------------------------------------------------------------------------+
;| FST		Float Point Store From Stack		 					|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE FSINGLE	;Define VarA a Single variable			|
;|		.CSEG										|
;|		FSTIP	VarA			;Store Top of Stack into VarA 			|
;+----------------------------------------------------------------------------------------------+
;| FSTP		Float Point Store From Stack and Pull	 					|
;|												|
;| Example:											|
;|		.DSEG										|
;|		VarA:		.BYTE FSINGLE	;Define VarA a Single variable			|
;|		.CSEG										|
;|		FSTIP	VarA			;Store Top of Stack into VarA and Stack Pull	|
;+----------------------------------------------------------------------------------------------+
;| FADD		Float Point Addiction								|
;|												|
;| Example:											|
;|		stack before FAdd								|
;|		+----+										|
;|		| A  | <--- top of stack with variable A					|
;|		+----+										|
;|		| B  | <--- top of stack - 1 with varible B					|
;|		+----+										|
;|		stack after FAdd								|
;|		+----+										|
;|		| A+B| <--- top of stack with result of A+B					|
;|		+----+										|
;|		| A  | <--- top of stack - 1 with varible A					|
;|		+----+										|
;+----------------------------------------------------------------------------------------------+
;| FSUB		Float Point Subtract								|
;|												|
;| Example:											|
;|		see FADD									|
;+----------------------------------------------------------------------------------------------+
;| FMULT	Float Point Multiply								|
;|												|
;| Example:											|
;|		see FADD									|
;+----------------------------------------------------------------------------------------------+
;| FDIV		Float Point Divide								|
;|												|
;| Example:											|
;|		see FADD									|
;+----------------------------------------------------------------------------------------------+
;| FABS		Float Point Absolute of top stack number					|
;+----------------------------------------------------------------------------------------------+
;| FCHS		Float Point Change Signal of top stack number					|
;+----------------------------------------------------------------------------------------------+
;| FDIV2	Float Point Divide by 2 of top stack number					|
;+----------------------------------------------------------------------------------------------+
.INCLUDE	"\Dart\Avr\Library\Math\FloatP\FloatSV1.IMP"		;Implementation File

