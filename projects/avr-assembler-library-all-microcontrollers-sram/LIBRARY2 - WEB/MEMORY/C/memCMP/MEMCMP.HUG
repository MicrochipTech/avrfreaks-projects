;<$DS_HEADER>
;+--------------------------------------------------------------------------------+              
;|João D´Artagnan A. Oliveira Programmer and Author; 				  |
;|										  |
;| All rights reserved.								  |
;|										  |
;|   Redistribution and use in source and binary forms, with or without		  |
;|  modification, are permitted provided that the following conditions are met:	  |
;|										  |
;|   * Redistributions of source code must retain the above copyright		  |
;|     notice, this list of conditions and the following disclaimer.		  |
;|										  |
;|   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  |
;|   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    |
;|   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   |
;|   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     |
;|   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	  |
;|   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	  |
;|   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	  |
;|   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	  |
;|   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	  |
;|   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   |
;|   POSSIBILITY OF SUCH DAMAGE.						  |
;|										  |
;|   Brasília, Brazil November 30,2015 	06:28 am				  |
;+--------------------------------------------------------------------------------+
;</$DS_HEADER>
;+--------------------------------------------------------------+---+
;| BY VICTOR HUGO DE OLIVEIRA CAMPOS			|
;| SUPERVISION BY JOÃO DARTAGNAN ANTUNES OLIVEIRA	|
;| DATA:4/12/2005					|
;>------------------------------------------------------<
;| A V R  S T R L E N  C  F U N C T I O N		|
;| V E R S I O N  1.0					|
;+------------------------------------------------------+
;| THIS DRIVE HAS INTEND TO USE WITH MEGA AVRS 		|
;+------------------------------------------------------+
#ifndef	__MEMCMP__
	
	#define	__MEMCMP__
	;>----------------------<
	;| NEED INCLUDES	|
	;>----------------------<
	;#ifndef	__NEED_INCLUDE__
	;#endif
	
	.message "+---------------------+"
	.message "|                     |"
	.message "| MEMCMP C Function	|"
	.message "|                     |"
	.message "+---------------------+"
	;>--------------------------------------------------------------<
	;| OBJECT     : _MEMCMP 					|
	;>--------------------------------------------------------------<
	;| DESCRIPTION: This object implements some functions(methods)	|
	;|		do handdle MEMCMP Function			|
	;>--------------------------------------------------------------<
	;>----------------------<
	;| OBJECT DEFINITIONS	|
	;>----------------------<
	;-------------------------< CONSTANT DEFINITONS >------------------------
	;-------------------------< SRAM VARIABLES >-----------------------------
	.DSEG
	.CSEG
	;
	;-------------------------< M A C R O S  >-------------------------------
	;
	;>--------------------------------------------------------------<
	;| OBJECT     : _MEMCMP						|
	;>--------------------------------------------------------------<
	;| FUNCTION   : MEMCMP Compare two blocks of memory	   	|
	;>--------------------------------------------------------------<
	;| INPUT      : X as input string1				|
	;|		Y as input string2				|
	;|		AccH:Acc as number of bytes to compare		|
	;| OUTPUT     :	cy as comare output				|
	;| DESTROYED  :	----						|
	;| TIME	      :	----						|
	;>--------------------------------------------------------------<
	;| OBSERVATION:	cy = 0 if strings not match			|
	;|		     1 if strings match				|
	;+--------------------------------------------------------------+-------------------------------------------------------------------------------\
	;|																		|
	_MEMCMP:
		
		pushawt							;Save Useds
		push	Temp						;
		pushw	X						;
		pushw	Y						;
	_MEMCMP_10:
		
		ld	AccT,X+						;Load X to AccT
		ld	AccTH,Y+					;Load Y to AccTH
		mov	Temp,AccT						;
		sub	Temp,AccTH					;Char match?
		brne	_MEMCMP_20					;Yes, Jump
		
		subiaw	1						;End of number of chars?
		breq	_MEMCMP_EXIT					;Yes, Jump
		
		tst	AccT						;End of string 1
		brne	_MEMCMP_10					;Yes jump
		
		ldi	Acc,0						;Consider str1 = str2
		
		jmp 	_MEMCMP_EXIT					;Jump
	_MEMCMP_20:
		cp	AccT,AccTH					;Acc < AccH?
		brlo	_MEMCMP_30					;Yes, Jump
		ldi	Acc,1						;No, Acc > AccH
		jmp 	_MEMCMP_EXIT					;Exit
	_MEMCMP_30:
		ldi	Acc,-1						;Acc < AccH
	_MEMCMP_EXIT:
		popw	Y						;Restore Useds
		popw	X						;
		pop	Temp						;
		popawt							;
		ret							;End
	
#endif
.EXIT


