
GPS_GSM_atmega324p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000636  000006ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  0080014a  0080014a  00000714  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000182  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba5  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000036d  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e7  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000248  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000387  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e3       	ldi	r30, 0x36	; 54
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
  98:	aa 34       	cpi	r26, 0x4A	; 74
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	aa e4       	ldi	r26, 0x4A	; 74
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ab 38       	cpi	r26, 0x8B	; 139
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  b2:	0c 94 19 03 	jmp	0x632	; 0x632 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <usart_init>:
unsigned char value,i,j,*lati_value,lati_dir[15], longi_value[15], longi_dir[15], alti[15] ;

void usart_init()
{
   
	UCSR0B |= (1<<RXCIE0) | (1 << RXEN0) | (1 << TXEN0);   // Turn on the transmission and reception circuitry
  ba:	e1 ec       	ldi	r30, 0xC1	; 193
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 69       	ori	r24, 0x98	; 152
  c2:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);// | (0<<UMSEL01) | (1<<UMSEL00); // Use 8-bit character sizes
  c4:	e2 ec       	ldi	r30, 0xC2	; 194
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
 
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  d4:	10 92 c5 00 	sts	0x00C5, r1
}
  d8:	08 95       	ret

000000da <usart1_init>:
void usart1_init()
{
   
	UCSR1B |= (1<<RXCIE1) | (1 << RXEN0) | (1 << TXEN1);   // Turn on the transmission and reception circuitry
  da:	e9 ec       	ldi	r30, 0xC9	; 201
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 69       	ori	r24, 0x98	; 152
  e2:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);// | (0<<UMSEL01) | (1<<UMSEL00); // Use 8-bit character sizes
  e4:	ea ec       	ldi	r30, 0xCA	; 202
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
 
	UBRR1L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  f4:	10 92 cd 00 	sts	0x00CD, r1
}
  f8:	08 95       	ret

000000fa <usart_putch>:
void usart_putch(unsigned char send)
{
  fa:	98 2f       	mov	r25, r24
 
while ((UCSR0A & (1 << UDRE0)) == 0); // Do nothing until UDR is ready..
  fc:	80 91 c0 00 	lds	r24, 0x00C0
 100:	85 ff       	sbrs	r24, 5
 102:	fc cf       	rjmp	.-8      	; 0xfc <usart_putch+0x2>
// for more data to be written to it
UDR0 = send; // Send the byte 
 104:	90 93 c6 00 	sts	0x00C6, r25
}
 108:	08 95       	ret

0000010a <usart1_putch>:
void usart1_putch(unsigned char send)
{
 10a:	98 2f       	mov	r25, r24
 
while ((UCSR1A & (1 << UDRE1)) == 0); // Do nothing until UDR is ready..
 10c:	80 91 c8 00 	lds	r24, 0x00C8
 110:	85 ff       	sbrs	r24, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <usart1_putch+0x2>
// for more data to be written to it
UDR1 = send; // Send the byte 
 114:	90 93 ce 00 	sts	0x00CE, r25
}
 118:	08 95       	ret

0000011a <usart_putstr>:
void usart_putstr(unsigned char  *s) 
{ 
 11a:	fc 01       	movw	r30, r24
 11c:	07 c0       	rjmp	.+14     	; 0x12c <usart_putstr+0x12>
	UBRR1H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
}
void usart_putch(unsigned char send)
{
 
while ((UCSR0A & (1 << UDRE0)) == 0); // Do nothing until UDR is ready..
 11e:	80 91 c0 00 	lds	r24, 0x00C0
 122:	85 ff       	sbrs	r24, 5
 124:	fc cf       	rjmp	.-8      	; 0x11e <usart_putstr+0x4>
}
void usart_putstr(unsigned char  *s) 
{ 
  while(*s) 
  { 
    usart_putch(*s++); 
 126:	31 96       	adiw	r30, 0x01	; 1
void usart_putch(unsigned char send)
{
 
while ((UCSR0A & (1 << UDRE0)) == 0); // Do nothing until UDR is ready..
// for more data to be written to it
UDR0 = send; // Send the byte 
 128:	90 93 c6 00 	sts	0x00C6, r25
// for more data to be written to it
UDR1 = send; // Send the byte 
}
void usart_putstr(unsigned char  *s) 
{ 
  while(*s) 
 12c:	90 81       	ld	r25, Z
 12e:	99 23       	and	r25, r25
 130:	b1 f7       	brne	.-20     	; 0x11e <usart_putstr+0x4>
  { 
    usart_putch(*s++); 
  } 
}
 132:	08 95       	ret

00000134 <usart1_putstr>:
void usart1_putstr(unsigned char  *s) 
{ 
 134:	fc 01       	movw	r30, r24
 136:	07 c0       	rjmp	.+14     	; 0x146 <usart1_putstr+0x12>
UDR0 = send; // Send the byte 
}
void usart1_putch(unsigned char send)
{
 
while ((UCSR1A & (1 << UDRE1)) == 0); // Do nothing until UDR is ready..
 138:	80 91 c8 00 	lds	r24, 0x00C8
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <usart1_putstr+0x4>
}
void usart1_putstr(unsigned char  *s) 
{ 
  while(*s) 
  { 
    usart1_putch(*s++); 
 140:	31 96       	adiw	r30, 0x01	; 1
void usart1_putch(unsigned char send)
{
 
while ((UCSR1A & (1 << UDRE1)) == 0); // Do nothing until UDR is ready..
// for more data to be written to it
UDR1 = send; // Send the byte 
 142:	90 93 ce 00 	sts	0x00CE, r25
    usart_putch(*s++); 
  } 
}
void usart1_putstr(unsigned char  *s) 
{ 
  while(*s) 
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	b1 f7       	brne	.-20     	; 0x138 <usart1_putstr+0x4>
  { 
    usart1_putch(*s++); 
  } 
}
 14c:	08 95       	ret

0000014e <usart_getch>:
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 14e:	80 91 c0 00 	lds	r24, 0x00C0
 152:	87 ff       	sbrs	r24, 7
 154:	fc cf       	rjmp	.-8      	; 0x14e <usart_getch>
	return(UDR0); // return the byte
 156:	80 91 c6 00 	lds	r24, 0x00C6
}
 15a:	08 95       	ret

0000015c <delay1>:
}
void delay1(int n)
{
   int i;
            for(i=0;i<n;i++);
}
 15c:	08 95       	ret

0000015e <delay2>:
void delay2(int n)
{
   int i;
            for(i=0;i<n;i++)
                        delay1(1000);
}
 15e:	08 95       	ret

00000160 <init_gsm>:

void init_gsm(void)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
	static unsigned char msg02[] = {"AT+CMGS=+918608206695"};
	static unsigned char msg03[] = {"HI---GSM TESTING"};
	static unsigned char msg04[] = {"\r"};
	static unsigned char msg05[] = {"\r"};

	usart1_putstr(msg01);
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
	usart1_putstr(msg04);
 16c:	06 e1       	ldi	r16, 0x16	; 22
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	c8 01       	movw	r24, r16
 172:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
//	printf("AT+CMGF=1%c",13);
	delay2(20);  //Text Mode            | hex value of 13 is 0x0D (CR )
	usart1_putstr(msg02);
 176:	89 e2       	ldi	r24, 0x29	; 41
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
	usart1_putstr(msg04);
 17e:	c8 01       	movw	r24, r16
 180:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
	delay2(20);           //Type your mobile number Eg : "9884467058"
    
    delay1(20);

//    printf("Hi :-) GSM Modem Test");
	usart1_putstr(msg03);
 184:	88 e1       	ldi	r24, 0x18	; 24
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
	usart1_putstr(msg04);
 18c:	c8 01       	movw	r24, r16
 18e:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>

	delay2(20);  //Type text as u want
	usart1_putstr(msg05);
 192:	84 e1       	ldi	r24, 0x14	; 20
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 9a 00 	call	0x134	; 0x134 <usart1_putstr>
//    printf("%c",0x1A); 
	delay2(20);  //line feed command
}
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <read_gps>:
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 1a0:	80 91 c0 00 	lds	r24, 0x00C0
 1a4:	87 ff       	sbrs	r24, 7
 1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <read_gps>
	return(UDR0); // return the byte
 1a8:	80 91 c6 00 	lds	r24, 0x00C6
}


void read_gps(void)
{int x=0,y=0;
	value=usart_getch();
 1ac:	80 93 8a 01 	sts	0x018A, r24
		if(value=='$')
 1b0:	84 32       	cpi	r24, 0x24	; 36
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <read_gps+0x16>
 1b4:	ec c0       	rjmp	.+472    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 1b6:	80 91 c0 00 	lds	r24, 0x00C0
 1ba:	87 ff       	sbrs	r24, 7
 1bc:	fc cf       	rjmp	.-8      	; 0x1b6 <read_gps+0x16>
	return(UDR0); // return the byte
 1be:	80 91 c6 00 	lds	r24, 0x00C6
void read_gps(void)
{int x=0,y=0;
	value=usart_getch();
		if(value=='$')
		{
			value=usart_getch();
 1c2:	80 93 8a 01 	sts	0x018A, r24
			if(value=='G')
 1c6:	87 34       	cpi	r24, 0x47	; 71
 1c8:	09 f0       	breq	.+2      	; 0x1cc <read_gps+0x2c>
 1ca:	e1 c0       	rjmp	.+450    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 1cc:	80 91 c0 00 	lds	r24, 0x00C0
 1d0:	87 ff       	sbrs	r24, 7
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <read_gps+0x2c>
	return(UDR0); // return the byte
 1d4:	80 91 c6 00 	lds	r24, 0x00C6
		if(value=='$')
		{
			value=usart_getch();
			if(value=='G')
			{
				value=usart_getch();
 1d8:	80 93 8a 01 	sts	0x018A, r24
				if(value=='P')
 1dc:	80 35       	cpi	r24, 0x50	; 80
 1de:	09 f0       	breq	.+2      	; 0x1e2 <read_gps+0x42>
 1e0:	d6 c0       	rjmp	.+428    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 1e2:	80 91 c0 00 	lds	r24, 0x00C0
 1e6:	87 ff       	sbrs	r24, 7
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <read_gps+0x42>
	return(UDR0); // return the byte
 1ea:	80 91 c6 00 	lds	r24, 0x00C6
			if(value=='G')
			{
				value=usart_getch();
				if(value=='P')
				{
					value=usart_getch();
 1ee:	80 93 8a 01 	sts	0x018A, r24
					if(value=='G')
 1f2:	87 34       	cpi	r24, 0x47	; 71
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <read_gps+0x58>
 1f6:	cb c0       	rjmp	.+406    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 1f8:	80 91 c0 00 	lds	r24, 0x00C0
 1fc:	87 ff       	sbrs	r24, 7
 1fe:	fc cf       	rjmp	.-8      	; 0x1f8 <read_gps+0x58>
	return(UDR0); // return the byte
 200:	80 91 c6 00 	lds	r24, 0x00C6
				if(value=='P')
				{
					value=usart_getch();
					if(value=='G')
					{
						value=usart_getch();
 204:	80 93 8a 01 	sts	0x018A, r24
						if(value=='G')
 208:	87 34       	cpi	r24, 0x47	; 71
 20a:	09 f0       	breq	.+2      	; 0x20e <read_gps+0x6e>
 20c:	c0 c0       	rjmp	.+384    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 20e:	80 91 c0 00 	lds	r24, 0x00C0
 212:	87 ff       	sbrs	r24, 7
 214:	fc cf       	rjmp	.-8      	; 0x20e <read_gps+0x6e>
	return(UDR0); // return the byte
 216:	80 91 c6 00 	lds	r24, 0x00C6
					if(value=='G')
					{
						value=usart_getch();
						if(value=='G')
						{
							value=usart_getch();
 21a:	80 93 8a 01 	sts	0x018A, r24
							if(value=='A')
 21e:	81 34       	cpi	r24, 0x41	; 65
 220:	09 f0       	breq	.+2      	; 0x224 <read_gps+0x84>
 222:	b5 c0       	rjmp	.+362    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 224:	80 91 c0 00 	lds	r24, 0x00C0
 228:	87 ff       	sbrs	r24, 7
 22a:	fc cf       	rjmp	.-8      	; 0x224 <read_gps+0x84>
	return(UDR0); // return the byte
 22c:	80 91 c6 00 	lds	r24, 0x00C6
						if(value=='G')
						{
							value=usart_getch();
							if(value=='A')
							{
								value=usart_getch();
 230:	80 93 8a 01 	sts	0x018A, r24
								if(value==',')
 234:	8c 32       	cpi	r24, 0x2C	; 44
 236:	09 f0       	breq	.+2      	; 0x23a <read_gps+0x9a>
 238:	aa c0       	rjmp	.+340    	; 0x38e <read_gps+0x1ee>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 23a:	80 91 c0 00 	lds	r24, 0x00C0
 23e:	87 ff       	sbrs	r24, 7
 240:	fc cf       	rjmp	.-8      	; 0x23a <read_gps+0x9a>
 242:	04 c0       	rjmp	.+8      	; 0x24c <read_gps+0xac>
	return(UDR0); // return the byte
 244:	80 91 c0 00 	lds	r24, 0x00C0
 248:	87 ff       	sbrs	r24, 7
 24a:	fc cf       	rjmp	.-8      	; 0x244 <read_gps+0xa4>
 24c:	80 91 c6 00 	lds	r24, 0x00C6
							{
								value=usart_getch();
								if(value==',')
								{
									value=usart_getch();
									while(value!=',')
 250:	8c 32       	cpi	r24, 0x2C	; 44
 252:	c1 f7       	brne	.-16     	; 0x244 <read_gps+0xa4>
 254:	80 93 8a 01 	sts	0x018A, r24
									{
										value=usart_getch();
									}
									lati_value[x]=usart_getch();
 258:	e0 91 88 01 	lds	r30, 0x0188
 25c:	f0 91 89 01 	lds	r31, 0x0189
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 260:	80 91 c0 00 	lds	r24, 0x00C0
 264:	87 ff       	sbrs	r24, 7
 266:	fc cf       	rjmp	.-8      	; 0x260 <read_gps+0xc0>
	return(UDR0); // return the byte
 268:	80 91 c6 00 	lds	r24, 0x00C6
									value=usart_getch();
									while(value!=',')
									{
										value=usart_getch();
									}
									lati_value[x]=usart_getch();
 26c:	80 83       	st	Z, r24
									x++;
									value=lati_value[0];
 26e:	e0 91 88 01 	lds	r30, 0x0188
 272:	f0 91 89 01 	lds	r31, 0x0189
 276:	80 81       	ld	r24, Z
 278:	80 93 8a 01 	sts	0x018A, r24
									for(i=1;value!=',';i++)
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 78 01 	sts	0x0178, r24
 282:	1d c0       	rjmp	.+58     	; 0x2be <read_gps+0x11e>
									{
										lati_value[i]=usart_getch();
 284:	e0 91 88 01 	lds	r30, 0x0188
 288:	f0 91 89 01 	lds	r31, 0x0189
 28c:	90 91 78 01 	lds	r25, 0x0178
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 290:	80 91 c0 00 	lds	r24, 0x00C0
 294:	87 ff       	sbrs	r24, 7
 296:	fc cf       	rjmp	.-8      	; 0x290 <read_gps+0xf0>
	return(UDR0); // return the byte
 298:	80 91 c6 00 	lds	r24, 0x00C6
									lati_value[x]=usart_getch();
									x++;
									value=lati_value[0];
									for(i=1;value!=',';i++)
									{
										lati_value[i]=usart_getch();
 29c:	e9 0f       	add	r30, r25
 29e:	f1 1d       	adc	r31, r1
 2a0:	80 83       	st	Z, r24
										value=lati_value[i];
 2a2:	90 91 78 01 	lds	r25, 0x0178
 2a6:	e0 91 88 01 	lds	r30, 0x0188
 2aa:	f0 91 89 01 	lds	r31, 0x0189
 2ae:	e9 0f       	add	r30, r25
 2b0:	f1 1d       	adc	r31, r1
 2b2:	80 81       	ld	r24, Z
 2b4:	80 93 8a 01 	sts	0x018A, r24
										value=usart_getch();
									}
									lati_value[x]=usart_getch();
									x++;
									value=lati_value[0];
									for(i=1;value!=',';i++)
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	90 93 78 01 	sts	0x0178, r25
 2be:	80 91 8a 01 	lds	r24, 0x018A
 2c2:	8c 32       	cpi	r24, 0x2C	; 44
 2c4:	f9 f6       	brne	.-66     	; 0x284 <read_gps+0xe4>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 2c6:	80 91 c0 00 	lds	r24, 0x00C0
 2ca:	87 ff       	sbrs	r24, 7
 2cc:	fc cf       	rjmp	.-8      	; 0x2c6 <read_gps+0x126>
	return(UDR0); // return the byte
 2ce:	80 91 c6 00 	lds	r24, 0x00C6
									for(i=1;value!=',';i++)
									{
										lati_value[i]=usart_getch();
										value=lati_value[i];
									}
									lati_dir[y]=usart_getch();
 2d2:	80 93 69 01 	sts	0x0169, r24
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 2d6:	80 91 c0 00 	lds	r24, 0x00C0
 2da:	87 ff       	sbrs	r24, 7
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <read_gps+0x136>
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <read_gps+0x148>
	return(UDR0); // return the byte
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <read_gps+0x140>
 2e8:	80 91 c6 00 	lds	r24, 0x00C6
										value=lati_value[i];
									}
									lati_dir[y]=usart_getch();
									y++;
									value=usart_getch();
									while(value!=',')
 2ec:	8c 32       	cpi	r24, 0x2C	; 44
 2ee:	c1 f7       	brne	.-16     	; 0x2e0 <read_gps+0x140>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 2f0:	80 91 c0 00 	lds	r24, 0x00C0
 2f4:	87 ff       	sbrs	r24, 7
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <read_gps+0x150>
	return(UDR0); // return the byte
 2f8:	80 91 c6 00 	lds	r24, 0x00C6
									value=usart_getch();
									while(value!=',')
									{
										value=usart_getch();
									}
									longi_value[0]=usart_getch();
 2fc:	80 93 79 01 	sts	0x0179, r24
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0c c0       	rjmp	.+24     	; 0x31c <read_gps+0x17c>
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 304:	80 91 c0 00 	lds	r24, 0x00C0
 308:	87 ff       	sbrs	r24, 7
 30a:	fc cf       	rjmp	.-8      	; 0x304 <read_gps+0x164>
	return(UDR0); // return the byte
 30c:	80 91 c6 00 	lds	r24, 0x00C6
									}
									longi_value[0]=usart_getch();
									value=longi_value[0];
									for(i=1;value!=',';i++)
									{
										longi_value[i]=usart_getch();
 310:	e9 2f       	mov	r30, r25
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	e7 58       	subi	r30, 0x87	; 135
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	80 83       	st	Z, r24
 31a:	9f 5f       	subi	r25, 0xFF	; 255
									{
										value=usart_getch();
									}
									longi_value[0]=usart_getch();
									value=longi_value[0];
									for(i=1;value!=',';i++)
 31c:	8c 32       	cpi	r24, 0x2C	; 44
 31e:	91 f7       	brne	.-28     	; 0x304 <read_gps+0x164>
 320:	90 93 78 01 	sts	0x0178, r25
 324:	80 93 8a 01 	sts	0x018A, r24
  } 
}
unsigned char usart_getch()
{
 
	while ((UCSR0A & (1 << RXC0)) == 0); // Do nothing until data have been recieved and is ready to be read from UDR
 328:	80 91 c0 00 	lds	r24, 0x00C0
 32c:	87 ff       	sbrs	r24, 7
 32e:	fc cf       	rjmp	.-8      	; 0x328 <read_gps+0x188>
	return(UDR0); // return the byte
 330:	80 91 c6 00 	lds	r24, 0x00C6
									for(i=1;value!=',';i++)
									{
										longi_value[i]=usart_getch();
										value=longi_value[i];
									}
									longi_dir[0]=usart_getch();
 334:	80 93 5a 01 	sts	0x015A, r24
									
									LCDWriteStringXY(0,0,lati_value);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCDGotoXY>
 340:	80 91 88 01 	lds	r24, 0x0188
 344:	90 91 89 01 	lds	r25, 0x0189
 348:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDWriteString>
									
									LCDWriteStringXY(9,0,lati_dir);
 34c:	89 e0       	ldi	r24, 0x09	; 9
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCDGotoXY>
 354:	89 e6       	ldi	r24, 0x69	; 105
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDWriteString>
									
									LCDWriteStringXY(0,1,longi_value);
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCDGotoXY>
 364:	89 e7       	ldi	r24, 0x79	; 121
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDWriteString>
									
									LCDWriteStringXY(9,1,longi_dir);
 36c:	89 e0       	ldi	r24, 0x09	; 9
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCDGotoXY>
 374:	8a e5       	ldi	r24, 0x5A	; 90
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDWriteString>
 37c:	80 e1       	ldi	r24, 0x10	; 16
 37e:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 380:	29 e1       	ldi	r18, 0x19	; 25
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <read_gps+0x1e6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 38c:	d9 f7       	brne	.-10     	; 0x384 <read_gps+0x1e4>
 38e:	08 95       	ret

00000390 <main>:
}



int main(void)
{
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	64 97       	sbiw	r28, 0x14	; 20
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
    unsigned char buffer[]={"ok"}, lcdvalue[]={"Ready Solar Time"};
 3a4:	de 01       	movw	r26, r28
 3a6:	11 96       	adiw	r26, 0x01	; 1
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x1e>
 3b6:	de 01       	movw	r26, r28
 3b8:	14 96       	adiw	r26, 0x04	; 4
 3ba:	e3 e0       	ldi	r30, 0x03	; 3
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	81 e1       	ldi	r24, 0x11	; 17
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x30>
  	DDRB |= 0x01;
 3c8:	20 9a       	sbi	0x04, 0	; 4
	sbi(PORTB,0);
 3ca:	28 9a       	sbi	0x05, 0	; 5

	usart_init();		// initialization of USART
 3cc:	0e 94 5d 00 	call	0xba	; 0xba <usart_init>
	usart1_init();
 3d0:	0e 94 6d 00 	call	0xda	; 0xda <usart1_init>
	//Initialize the LCD Module
	LCDInit(LS_BLINK);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCDInit>
	LCDClear();
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
	LCDWriteString(lcdvalue);
 3e2:	ce 01       	movw	r24, r28
 3e4:	04 96       	adiw	r24, 0x04	; 4
 3e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDWriteString>
//	LCDWriteStringXY(0,1,buffer);

	usart_putstr(buffer);
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	0e 94 8d 00 	call	0x11a	; 0x11a <usart_putstr>
	i=0;
 3f2:	10 92 78 01 	sts	0x0178, r1
//		buffer[i]=usart_getch();
		
//		_delay_ms(100);
//		LCDWriteIntXY(0,1,value,2);
//		LCDWriteStringXY(0,1,buffer);
		read_gps();
 3f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <read_gps>
		init_gsm();		
 3fa:	0e 94 b0 00 	call	0x160	; 0x160 <init_gsm>
 3fe:	fb cf       	rjmp	.-10     	; 0x3f6 <main+0x66>

00000400 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 400:	87 b1       	in	r24, 0x07	; 7
 402:	80 7f       	andi	r24, 0xF0	; 240
 404:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 406:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 408:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	8a 95       	dec	r24
 40e:	f1 f7       	brne	.-4      	; 0x40c <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	44 9a       	sbi	0x08, 4	; 8
 414:	82 2f       	mov	r24, r18
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 41a:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 41c:	82 95       	swap	r24
 41e:	80 7f       	andi	r24, 0xF0	; 240
 420:	92 2f       	mov	r25, r18
 422:	9a 95       	dec	r25
 424:	f1 f7       	brne	.-4      	; 0x422 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 426:	44 98       	cbi	0x08, 4	; 8
 428:	92 2f       	mov	r25, r18
 42a:	9a 95       	dec	r25
 42c:	f1 f7       	brne	.-4      	; 0x42a <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 42e:	44 9a       	sbi	0x08, 4	; 8
 430:	92 2f       	mov	r25, r18
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 436:	96 b1       	in	r25, 0x06	; 6
 438:	92 2f       	mov	r25, r18
 43a:	9a 95       	dec	r25
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 43e:	44 98       	cbi	0x08, 4	; 8
 440:	92 2f       	mov	r25, r18
 442:	9a 95       	dec	r25
 444:	f1 f7       	brne	.-4      	; 0x442 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 446:	87 fd       	sbrc	r24, 7
 448:	e4 cf       	rjmp	.-56     	; 0x412 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 44a:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 44c:	87 b1       	in	r24, 0x07	; 7
 44e:	8f 60       	ori	r24, 0x0F	; 15
 450:	87 b9       	out	0x07, r24	; 7

}
 452:	08 95       	ret

00000454 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 454:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 456:	66 23       	and	r22, r22
 458:	11 f4       	brne	.+4      	; 0x45e <LCDByte+0xa>
	CLEAR_RS();
 45a:	46 98       	cbi	0x08, 6	; 8
 45c:	01 c0       	rjmp	.+2      	; 0x460 <LCDByte+0xc>
else
	SET_RS();
 45e:	46 9a       	sbi	0x08, 6	; 8
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	82 2f       	mov	r24, r18
 464:	8a 95       	dec	r24
 466:	f1 f7       	brne	.-4      	; 0x464 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 468:	44 9a       	sbi	0x08, 4	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 46a:	88 b1       	in	r24, 0x08	; 8
 46c:	93 2f       	mov	r25, r19
 46e:	92 95       	swap	r25
 470:	9f 70       	andi	r25, 0x0F	; 15
 472:	80 7f       	andi	r24, 0xF0	; 240
 474:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 476:	98 b9       	out	0x08, r25	; 8
 478:	82 2f       	mov	r24, r18
 47a:	8a 95       	dec	r24
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 47e:	44 98       	cbi	0x08, 4	; 8
 480:	82 2f       	mov	r24, r18
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 486:	44 9a       	sbi	0x08, 4	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 488:	88 b1       	in	r24, 0x08	; 8
 48a:	3f 70       	andi	r19, 0x0F	; 15
 48c:	80 7f       	andi	r24, 0xF0	; 240
 48e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 490:	88 b9       	out	0x08, r24	; 8
 492:	82 2f       	mov	r24, r18
 494:	8a 95       	dec	r24
 496:	f1 f7       	brne	.-4      	; 0x494 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 498:	44 98       	cbi	0x08, 4	; 8
 49a:	2a 95       	dec	r18
 49c:	f1 f7       	brne	.-4      	; 0x49a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 49e:	0e 94 00 02 	call	0x400	; 0x400 <LCDBusyLoop>
}
 4a2:	08 95       	ret

000004a4 <LCDInit>:
	LCD_DATA_DDR|=0x0F;

}

void LCDInit(uint8_t style)
{
 4a4:	1f 93       	push	r17
 4a6:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a8:	8c e4       	ldi	r24, 0x4C	; 76
 4aa:	9d e1       	ldi	r25, 0x1D	; 29
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCDInit+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 4b0:	87 b1       	in	r24, 0x07	; 7
 4b2:	8f 60       	ori	r24, 0x0F	; 15
 4b4:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 4b6:	3c 9a       	sbi	0x07, 4	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 4b8:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 4ba:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 4bc:	88 b1       	in	r24, 0x08	; 8
 4be:	80 7f       	andi	r24, 0xF0	; 240
 4c0:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 4c2:	44 98       	cbi	0x08, 4	; 8
	CLEAR_RW();
 4c4:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 4c6:	46 98       	cbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	98 2f       	mov	r25, r24
 4cc:	9a 95       	dec	r25
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCDInit+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 4d0:	44 9a       	sbi	0x08, 4	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 4d2:	41 9a       	sbi	0x08, 1	; 8
 4d4:	98 2f       	mov	r25, r24
 4d6:	9a 95       	dec	r25
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCDInit+0x32>
	_delay_us(1);
	CLEAR_E();
 4da:	44 98       	cbi	0x08, 4	; 8
 4dc:	8a 95       	dec	r24
 4de:	f1 f7       	brne	.-4      	; 0x4dc <LCDInit+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 4e0:	0e 94 00 02 	call	0x400	; 0x400 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 4e4:	81 2f       	mov	r24, r17
 4e6:	8c 60       	ori	r24, 0x0C	; 12
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4ee:	88 e2       	ldi	r24, 0x28	; 40
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
}
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <LCDWriteString>:
void LCDWriteString(const unsigned char *msg)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
 500:	04 c0       	rjmp	.+8      	; 0x50a <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
	msg++;
 508:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 50a:	88 81       	ld	r24, Y
 50c:	88 23       	and	r24, r24
 50e:	c9 f7       	brne	.-14     	; 0x502 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 516:	ef 92       	push	r14
 518:	ff 92       	push	r15
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	df 93       	push	r29
 520:	cf 93       	push	r28
 522:	00 d0       	rcall	.+0      	; 0x524 <LCDWriteInt+0xe>
 524:	00 d0       	rcall	.+0      	; 0x526 <LCDWriteInt+0x10>
 526:	0f 92       	push	r0
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	9c 01       	movw	r18, r24
 52e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 530:	fe 01       	movw	r30, r28
 532:	31 96       	adiw	r30, 0x01	; 1
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	df 01       	movw	r26, r30
 538:	1d 92       	st	X+, r1
 53a:	8a 95       	dec	r24
 53c:	e9 f7       	brne	.-6      	; 0x538 <LCDWriteInt+0x22>
 53e:	fe 01       	movw	r30, r28
 540:	35 96       	adiw	r30, 0x05	; 5
 542:	0d c0       	rjmp	.+26     	; 0x55e <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 544:	c9 01       	movw	r24, r18
 546:	6a e0       	ldi	r22, 0x0A	; 10
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__divmodhi4>
 54e:	80 83       	st	Z, r24
	val=val/10;
 550:	c9 01       	movw	r24, r18
 552:	6a e0       	ldi	r22, 0x0A	; 10
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__divmodhi4>
 55a:	9b 01       	movw	r18, r22
 55c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 55e:	21 15       	cp	r18, r1
 560:	31 05       	cpc	r19, r1
 562:	81 f7       	brne	.-32     	; 0x544 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 564:	bf ef       	ldi	r27, 0xFF	; 255
 566:	0f 3f       	cpi	r16, 0xFF	; 255
 568:	1b 07       	cpc	r17, r27
 56a:	79 f4       	brne	.+30     	; 0x58a <LCDWriteInt+0x74>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 570:	ae 01       	movw	r20, r28
 572:	4f 5f       	subi	r20, 0xFF	; 255
 574:	5f 4f       	sbci	r21, 0xFF	; 255
 576:	02 c0       	rjmp	.+4      	; 0x57c <LCDWriteInt+0x66>
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	fa 01       	movw	r30, r20
 57e:	e2 0f       	add	r30, r18
 580:	f3 1f       	adc	r31, r19
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	c1 f3       	breq	.-16     	; 0x578 <LCDWriteInt+0x62>
 588:	04 c0       	rjmp	.+8      	; 0x592 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 58a:	25 e0       	ldi	r18, 0x05	; 5
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	20 1b       	sub	r18, r16
 590:	31 0b       	sbc	r19, r17
 592:	7e 01       	movw	r14, r28
 594:	08 94       	sec
 596:	e1 1c       	adc	r14, r1
 598:	f1 1c       	adc	r15, r1
 59a:	e2 0e       	add	r14, r18
 59c:	f3 1e       	adc	r15, r19
 59e:	89 01       	movw	r16, r18
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 5a2:	f7 01       	movw	r30, r14
 5a4:	81 91       	ld	r24, Z+
 5a6:	7f 01       	movw	r14, r30
 5a8:	80 5d       	subi	r24, 0xD0	; 208
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 5b0:	0f 5f       	subi	r16, 0xFF	; 255
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	05 30       	cpi	r16, 0x05	; 5
 5b6:	11 05       	cpc	r17, r1
 5b8:	a4 f3       	brlt	.-24     	; 0x5a2 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	cf 91       	pop	r28
 5c6:	df 91       	pop	r29
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	08 95       	ret

000005d2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 5d2:	88 32       	cpi	r24, 0x28	; 40
 5d4:	30 f4       	brcc	.+12     	; 0x5e2 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 5d6:	61 11       	cpse	r22, r1
 5d8:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 5da:	80 68       	ori	r24, 0x80	; 128
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	0e 94 2a 02 	call	0x454	; 0x454 <LCDByte>
 5e2:	08 95       	ret

000005e4 <__divmodhi4>:
 5e4:	97 fb       	bst	r25, 7
 5e6:	09 2e       	mov	r0, r25
 5e8:	07 26       	eor	r0, r23
 5ea:	0a d0       	rcall	.+20     	; 0x600 <__divmodhi4_neg1>
 5ec:	77 fd       	sbrc	r23, 7
 5ee:	04 d0       	rcall	.+8      	; 0x5f8 <__divmodhi4_neg2>
 5f0:	0c d0       	rcall	.+24     	; 0x60a <__udivmodhi4>
 5f2:	06 d0       	rcall	.+12     	; 0x600 <__divmodhi4_neg1>
 5f4:	00 20       	and	r0, r0
 5f6:	1a f4       	brpl	.+6      	; 0x5fe <__divmodhi4_exit>

000005f8 <__divmodhi4_neg2>:
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255

000005fe <__divmodhi4_exit>:
 5fe:	08 95       	ret

00000600 <__divmodhi4_neg1>:
 600:	f6 f7       	brtc	.-4      	; 0x5fe <__divmodhi4_exit>
 602:	90 95       	com	r25
 604:	81 95       	neg	r24
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__udivmodhi4>:
 60a:	aa 1b       	sub	r26, r26
 60c:	bb 1b       	sub	r27, r27
 60e:	51 e1       	ldi	r21, 0x11	; 17
 610:	07 c0       	rjmp	.+14     	; 0x620 <__udivmodhi4_ep>

00000612 <__udivmodhi4_loop>:
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	a6 17       	cp	r26, r22
 618:	b7 07       	cpc	r27, r23
 61a:	10 f0       	brcs	.+4      	; 0x620 <__udivmodhi4_ep>
 61c:	a6 1b       	sub	r26, r22
 61e:	b7 0b       	sbc	r27, r23

00000620 <__udivmodhi4_ep>:
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	5a 95       	dec	r21
 626:	a9 f7       	brne	.-22     	; 0x612 <__udivmodhi4_loop>
 628:	80 95       	com	r24
 62a:	90 95       	com	r25
 62c:	bc 01       	movw	r22, r24
 62e:	cd 01       	movw	r24, r26
 630:	08 95       	ret

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
