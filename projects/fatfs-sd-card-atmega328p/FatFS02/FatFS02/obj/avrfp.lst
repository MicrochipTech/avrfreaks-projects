
obj/avrfp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  0000435c  000043f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000435c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045f  0080019a  0080019a  0000448a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000044e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060e0  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001176  00000000  00000000  0000a788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e12  00000000  00000000  0000b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d8  00000000  00000000  0000e710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a64  00000000  00000000  0000f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005dba  00000000  00000000  0000fb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00015906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f3 e4       	ldi	r31, 0x43	; 67
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 39       	cpi	r26, 0x9A	; 154
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e9       	ldi	r26, 0x9A	; 154
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3f       	cpi	r26, 0xF9	; 249
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <main>
      9e:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
      a6:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
      a8:	62 81       	ldd	r22, Z+2	; 0x02
      aa:	73 81       	ldd	r23, Z+3	; 0x03
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	80 e0       	ldi	r24, 0x00	; 0
	rv = rv << 8 | ptr[1];
      b0:	98 2f       	mov	r25, r24
      b2:	87 2f       	mov	r24, r23
      b4:	76 2f       	mov	r23, r22
      b6:	66 27       	eor	r22, r22
      b8:	21 81       	ldd	r18, Z+1	; 0x01
      ba:	62 2b       	or	r22, r18
	rv = rv << 8 | ptr[0];
      bc:	98 2f       	mov	r25, r24
      be:	87 2f       	mov	r24, r23
      c0:	76 2f       	mov	r23, r22
      c2:	66 27       	eor	r22, r22
      c4:	20 81       	ld	r18, Z
      c6:	62 2b       	or	r22, r18
	return rv;
}
      c8:	08 95       	ret

000000ca <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	fc 01       	movw	r30, r24
	clst -= 2;		/* Cluster number is origin from 2 */
      d0:	9a 01       	movw	r18, r20
      d2:	ab 01       	movw	r20, r22
      d4:	22 50       	subi	r18, 0x02	; 2
      d6:	31 09       	sbc	r19, r1
      d8:	41 09       	sbc	r20, r1
      da:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
      dc:	83 89       	ldd	r24, Z+19	; 0x13
      de:	94 89       	ldd	r25, Z+20	; 0x14
      e0:	a5 89       	ldd	r26, Z+21	; 0x15
      e2:	b6 89       	ldd	r27, Z+22	; 0x16
      e4:	02 97       	sbiw	r24, 0x02	; 2
      e6:	a1 09       	sbc	r26, r1
      e8:	b1 09       	sbc	r27, r1
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	4a 07       	cpc	r20, r26
      f0:	5b 07       	cpc	r21, r27
      f2:	78 f4       	brcc	.+30     	; 0x112 <clst2sect+0x48>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
      f4:	a1 85       	ldd	r26, Z+9	; 0x09
      f6:	b2 85       	ldd	r27, Z+10	; 0x0a
      f8:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__muluhisi3>
      fc:	07 a1       	ldd	r16, Z+39	; 0x27
      fe:	10 a5       	ldd	r17, Z+40	; 0x28
     100:	21 a5       	ldd	r18, Z+41	; 0x29
     102:	32 a5       	ldd	r19, Z+42	; 0x2a
     104:	60 0f       	add	r22, r16
     106:	71 1f       	adc	r23, r17
     108:	82 1f       	adc	r24, r18
     10a:	93 1f       	adc	r25, r19
}
     10c:	1f 91       	pop	r17
     10e:	0f 91       	pop	r16
     110:	08 95       	ret
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	f9 cf       	rjmp	.-14     	; 0x10c <clst2sect+0x42>

0000011a <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	ec 01       	movw	r28, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
     120:	e8 81       	ld	r30, Y
     122:	f9 81       	ldd	r31, Y+1	; 0x01
	if (!tp) return vol;	/* Invalid path name? */
     124:	30 97       	sbiw	r30, 0x00	; 0
     126:	79 f0       	breq	.+30     	; 0x146 <get_ldnumber+0x2c>
     128:	df 01       	movw	r26, r30
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */
     12a:	9d 01       	movw	r18, r26
     12c:	2f 5f       	subi	r18, 0xFF	; 255
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	8c 91       	ld	r24, X
     132:	81 32       	cpi	r24, 0x21	; 33
     134:	98 f0       	brcs	.+38     	; 0x15c <get_ldnumber+0x42>
     136:	d9 01       	movw	r26, r18
     138:	8a 33       	cpi	r24, 0x3A	; 58
     13a:	b9 f7       	brne	.-18     	; 0x12a <get_ldnumber+0x10>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     13c:	90 81       	ld	r25, Z
     13e:	80 ed       	ldi	r24, 0xD0	; 208
     140:	89 0f       	add	r24, r25
     142:	8a 30       	cpi	r24, 0x0A	; 10
     144:	18 f0       	brcs	.+6      	; 0x14c <get_ldnumber+0x32>
	const char *sp;
	char c;
#endif

	tt = tp = *path;
	if (!tp) return vol;	/* Invalid path name? */
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	9f ef       	ldi	r25, 0xFF	; 255
     14a:	0a c0       	rjmp	.+20     	; 0x160 <get_ldnumber+0x46>
	do tc = *tt++; while (!IsTerminator(tc) && tc != ':');	/* Find a colon in the path */

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     14c:	32 96       	adiw	r30, 0x02	; 2
     14e:	ae 17       	cp	r26, r30
     150:	bf 07       	cpc	r27, r31
     152:	c9 f7       	brne	.-14     	; 0x146 <get_ldnumber+0x2c>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
     154:	90 33       	cpi	r25, 0x30	; 48
     156:	b9 f7       	brne	.-18     	; 0x146 <get_ldnumber+0x2c>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
     158:	b9 83       	std	Y+1, r27	; 0x01
     15a:	a8 83       	st	Y, r26
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	80 e0       	ldi	r24, 0x00	; 0
}
     160:	df 91       	pop	r29
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	ec 01       	movw	r28, r24
     170:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     172:	89 2b       	or	r24, r25
     174:	61 f4       	brne	.+24     	; 0x18e <validate+0x28>
static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
	FRESULT res = FR_INVALID_OBJECT;
     176:	89 e0       	ldi	r24, 0x09	; 9
     178:	90 e0       	ldi	r25, 0x00	; 0
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	f8 01       	movw	r30, r16
     180:	31 83       	std	Z+1, r19	; 0x01
     182:	20 83       	st	Z, r18
	return res;
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret
)
{
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     18e:	e8 81       	ld	r30, Y
     190:	f9 81       	ldd	r31, Y+1	; 0x01
     192:	30 97       	sbiw	r30, 0x00	; 0
     194:	81 f3       	breq	.-32     	; 0x176 <validate+0x10>
     196:	80 81       	ld	r24, Z
     198:	88 23       	and	r24, r24
     19a:	69 f3       	breq	.-38     	; 0x176 <validate+0x10>
     19c:	2a 81       	ldd	r18, Y+2	; 0x02
     19e:	3b 81       	ldd	r19, Y+3	; 0x03
     1a0:	85 81       	ldd	r24, Z+5	; 0x05
     1a2:	96 81       	ldd	r25, Z+6	; 0x06
     1a4:	28 17       	cp	r18, r24
     1a6:	39 07       	cpc	r19, r25
     1a8:	31 f7       	brne	.-52     	; 0x176 <validate+0x10>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
     1aa:	81 81       	ldd	r24, Z+1	; 0x01
     1ac:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <disk_status>
     1b0:	80 fd       	sbrc	r24, 0
     1b2:	e1 cf       	rjmp	.-62     	; 0x176 <validate+0x10>
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     1b4:	28 81       	ld	r18, Y
     1b6:	39 81       	ldd	r19, Y+1	; 0x01
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	e0 cf       	rjmp	.-64     	; 0x17e <validate+0x18>

000001be <ld_clust.isra.0>:

/*-----------------------------------------------------------------------*/
/* FAT: Directory handling - Load/Store start cluster number             */
/*-----------------------------------------------------------------------*/

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
     1be:	fb 01       	movw	r30, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
     1c0:	42 8d       	ldd	r20, Z+26	; 0x1a
     1c2:	53 8d       	ldd	r21, Z+27	; 0x1b
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	60 e0       	ldi	r22, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	59 f4       	brne	.+22     	; 0x1e2 <ld_clust.isra.0+0x24>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
     1cc:	84 89       	ldd	r24, Z+20	; 0x14
     1ce:	95 89       	ldd	r25, Z+21	; 0x15
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	dc 01       	movw	r26, r24
     1d6:	99 27       	eor	r25, r25
     1d8:	88 27       	eor	r24, r24
     1da:	48 2b       	or	r20, r24
     1dc:	59 2b       	or	r21, r25
     1de:	6a 2b       	or	r22, r26
     1e0:	7b 2b       	or	r23, r27
	}

	return cl;
}
     1e2:	cb 01       	movw	r24, r22
     1e4:	ba 01       	movw	r22, r20
     1e6:	08 95       	ret

000001e8 <st_clust.isra.1>:


#if !FF_FS_READONLY
static void st_clust (
     1e8:	fb 01       	movw	r30, r22
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     1ea:	22 8f       	std	Z+26, r18	; 0x1a
	*ptr++ = (BYTE)val;
     1ec:	33 8f       	std	Z+27, r19	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
     1ee:	dc 01       	movw	r26, r24
     1f0:	8c 91       	ld	r24, X
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	29 f4       	brne	.+10     	; 0x200 <st_clust.isra.1+0x18>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
     1f6:	ca 01       	movw	r24, r20
     1f8:	aa 27       	eor	r26, r26
     1fa:	bb 27       	eor	r27, r27
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     1fc:	84 8b       	std	Z+20, r24	; 0x14
	*ptr++ = (BYTE)val;
     1fe:	95 8b       	std	Z+21, r25	; 0x15
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
     200:	08 95       	ret

00000202 <get_fileinfo.part.2>:
#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static void get_fileinfo (
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	eb 01       	movw	r28, r22
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
     20c:	fc 01       	movw	r30, r24
     20e:	02 8d       	ldd	r16, Z+26	; 0x1a
     210:	13 8d       	ldd	r17, Z+27	; 0x1b
     212:	f8 01       	movw	r30, r16
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	20 e0       	ldi	r18, 0x00	; 0
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     21c:	5e e2       	ldi	r21, 0x2E	; 46
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
     21e:	2f 5f       	subi	r18, 0xFF	; 255
     220:	3f 4f       	sbci	r19, 0xFF	; 255
     222:	41 91       	ld	r20, Z+
		if (c == ' ') continue;		/* Skip padding spaces */
     224:	40 32       	cpi	r20, 0x20	; 32
     226:	91 f0       	breq	.+36     	; 0x24c <get_fileinfo.part.2+0x4a>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
     228:	45 30       	cpi	r20, 0x05	; 5
     22a:	09 f4       	brne	.+2      	; 0x22e <get_fileinfo.part.2+0x2c>
     22c:	45 ee       	ldi	r20, 0xE5	; 229
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     22e:	29 30       	cpi	r18, 0x09	; 9
     230:	31 05       	cpc	r19, r1
     232:	31 f4       	brne	.+12     	; 0x240 <get_fileinfo.part.2+0x3e>
     234:	de 01       	movw	r26, r28
     236:	a8 0f       	add	r26, r24
     238:	b9 1f       	adc	r27, r25
     23a:	19 96       	adiw	r26, 0x09	; 9
     23c:	5c 93       	st	X, r21
     23e:	01 96       	adiw	r24, 0x01	; 1
		fno->fname[di++] = c;
     240:	de 01       	movw	r26, r28
     242:	a8 0f       	add	r26, r24
     244:	b9 1f       	adc	r27, r25
     246:	19 96       	adiw	r26, 0x09	; 9
     248:	4c 93       	st	X, r20
     24a:	01 96       	adiw	r24, 0x01	; 1
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
     24c:	2b 30       	cpi	r18, 0x0B	; 11
     24e:	31 05       	cpc	r19, r1
     250:	31 f7       	brne	.-52     	; 0x21e <get_fileinfo.part.2+0x1c>
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
     252:	8c 0f       	add	r24, r28
     254:	9d 1f       	adc	r25, r29
     256:	fc 01       	movw	r30, r24
     258:	11 86       	std	Z+9, r1	; 0x09
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
     25a:	f8 01       	movw	r30, r16
     25c:	83 85       	ldd	r24, Z+11	; 0x0b
     25e:	8f 73       	andi	r24, 0x3F	; 63
     260:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
     262:	c8 01       	movw	r24, r16
     264:	4c 96       	adiw	r24, 0x1c	; 28
     266:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     26a:	68 83       	st	Y, r22
     26c:	79 83       	std	Y+1, r23	; 0x01
     26e:	8a 83       	std	Y+2, r24	; 0x02
     270:	9b 83       	std	Y+3, r25	; 0x03
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     272:	f8 01       	movw	r30, r16
     274:	86 89       	ldd	r24, Z+22	; 0x16
     276:	97 89       	ldd	r25, Z+23	; 0x17
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
     278:	9f 83       	std	Y+7, r25	; 0x07
     27a:	8e 83       	std	Y+6, r24	; 0x06
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     27c:	80 8d       	ldd	r24, Z+24	; 0x18
     27e:	91 8d       	ldd	r25, Z+25	; 0x19
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
     280:	9d 83       	std	Y+5, r25	; 0x05
     282:	8c 83       	std	Y+4, r24	; 0x04
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	08 95       	ret

0000028e <sync_window.part.3>:

/*-----------------------------------------------------------------------*/
/* Move/Flush disk access window in the filesystem object                */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	ec 01       	movw	r28, r24
{
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
     2a4:	7c 01       	movw	r14, r24
     2a6:	4f e2       	ldi	r20, 0x2F	; 47
     2a8:	e4 0e       	add	r14, r20
     2aa:	f1 1c       	adc	r15, r1
     2ac:	2b a5       	ldd	r18, Y+43	; 0x2b
     2ae:	3c a5       	ldd	r19, Y+44	; 0x2c
     2b0:	4d a5       	ldd	r20, Y+45	; 0x2d
     2b2:	5e a5       	ldd	r21, Y+46	; 0x2e
     2b4:	01 e0       	ldi	r16, 0x01	; 1
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	b7 01       	movw	r22, r14
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
     2c0:	89 2b       	or	r24, r25
     2c2:	61 f5       	brne	.+88     	; 0x31c <sync_window.part.3+0x8e>
			fs->wflag = 0;	/* Clear window dirty flag */
     2c4:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
     2c6:	0b a5       	ldd	r16, Y+43	; 0x2b
     2c8:	1c a5       	ldd	r17, Y+44	; 0x2c
     2ca:	2d a5       	ldd	r18, Y+45	; 0x2d
     2cc:	3e a5       	ldd	r19, Y+46	; 0x2e
     2ce:	8f 89       	ldd	r24, Y+23	; 0x17
     2d0:	98 8d       	ldd	r25, Y+24	; 0x18
     2d2:	a9 8d       	ldd	r26, Y+25	; 0x19
     2d4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     2d6:	8f 8c       	ldd	r8, Y+31	; 0x1f
     2d8:	98 a0       	ldd	r9, Y+32	; 0x20
     2da:	a9 a0       	ldd	r10, Y+33	; 0x21
     2dc:	ba a0       	ldd	r11, Y+34	; 0x22
     2de:	b9 01       	movw	r22, r18
     2e0:	a8 01       	movw	r20, r16
     2e2:	48 19       	sub	r20, r8
     2e4:	59 09       	sbc	r21, r9
     2e6:	6a 09       	sbc	r22, r10
     2e8:	7b 09       	sbc	r23, r11
     2ea:	4a 01       	movw	r8, r20
     2ec:	5b 01       	movw	r10, r22
     2ee:	88 16       	cp	r8, r24
     2f0:	99 06       	cpc	r9, r25
     2f2:	aa 06       	cpc	r10, r26
     2f4:	bb 06       	cpc	r11, r27
     2f6:	78 f4       	brcc	.+30     	; 0x316 <sync_window.part.3+0x88>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
     2f8:	6a 81       	ldd	r22, Y+2	; 0x02
     2fa:	62 30       	cpi	r22, 0x02	; 2
     2fc:	61 f4       	brne	.+24     	; 0x316 <sync_window.part.3+0x88>
     2fe:	a9 01       	movw	r20, r18
     300:	98 01       	movw	r18, r16
     302:	28 0f       	add	r18, r24
     304:	39 1f       	adc	r19, r25
     306:	4a 1f       	adc	r20, r26
     308:	5b 1f       	adc	r21, r27
     30a:	01 e0       	ldi	r16, 0x01	; 1
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	b7 01       	movw	r22, r14
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
	FRESULT res = FR_OK;
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <sync_window.part.3+0x92>
			fs->wflag = 0;	/* Clear window dirty flag */
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
			}
		} else {
			res = FR_DISK_ERR;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return res;
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	bf 90       	pop	r11
     32e:	af 90       	pop	r10
     330:	9f 90       	pop	r9
     332:	8f 90       	pop	r8
     334:	08 95       	ret

00000336 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	e1 ea       	ldi	r30, 0xA1	; 161
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__+0x14>
     342:	ec 01       	movw	r28, r24
     344:	6a 01       	movw	r12, r20
     346:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
     348:	8b a5       	ldd	r24, Y+43	; 0x2b
     34a:	9c a5       	ldd	r25, Y+44	; 0x2c
     34c:	ad a5       	ldd	r26, Y+45	; 0x2d
     34e:	be a5       	ldd	r27, Y+46	; 0x2e
     350:	8c 15       	cp	r24, r12
     352:	9d 05       	cpc	r25, r13
     354:	ae 05       	cpc	r26, r14
     356:	bf 05       	cpc	r27, r15
     358:	39 f1       	breq	.+78     	; 0x3a8 <move_window+0x72>
)
{
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	81 11       	cpse	r24, r1
     35e:	17 c0       	rjmp	.+46     	; 0x38e <move_window+0x58>
	if (sect != fs->winsect) {	/* Window offset changed? */
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
     360:	01 e0       	ldi	r16, 0x01	; 1
     362:	10 e0       	ldi	r17, 0x00	; 0
     364:	a7 01       	movw	r20, r14
     366:	96 01       	movw	r18, r12
     368:	be 01       	movw	r22, r28
     36a:	61 5d       	subi	r22, 0xD1	; 209
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
     374:	89 2b       	or	r24, r25
     376:	a9 f0       	breq	.+42     	; 0x3a2 <move_window+0x6c>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
				res = FR_DISK_ERR;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
     37c:	cc 24       	eor	r12, r12
     37e:	ca 94       	dec	r12
     380:	dc 2c       	mov	r13, r12
     382:	76 01       	movw	r14, r12
				res = FR_DISK_ERR;
			}
			fs->winsect = sect;
     384:	cb a6       	std	Y+43, r12	; 0x2b
     386:	dc a6       	std	Y+44, r13	; 0x2c
     388:	ed a6       	std	Y+45, r14	; 0x2d
     38a:	fe a6       	std	Y+46, r15	; 0x2e
     38c:	05 c0       	rjmp	.+10     	; 0x398 <move_window+0x62>
     38e:	ce 01       	movw	r24, r28
     390:	0e 94 47 01 	call	0x28e	; 0x28e <sync_window.part.3>

	if (sect != fs->winsect) {	/* Window offset changed? */
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	21 f3       	breq	.-56     	; 0x360 <move_window+0x2a>
			}
			fs->winsect = sect;
		}
	}
	return res;
}
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	e8 e0       	ldi	r30, 0x08	; 8
     39e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__+0x14>
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	ee cf       	rjmp	.-36     	; 0x384 <move_window+0x4e>
static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
				res = FR_DISK_ERR;
			}
			fs->winsect = sect;
		}
	}
	return res;
     3ac:	f5 cf       	rjmp	.-22     	; 0x398 <move_window+0x62>

000003ae <check_fs.part.5>:
/* Load a sector and check if it is an FAT VBR                           */
/*-----------------------------------------------------------------------*/

/* Check what the sector is */

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     3b8:	fc 01       	movw	r30, r24
     3ba:	e3 5d       	subi	r30, 0xD3	; 211
     3bc:	fd 4f       	sbci	r31, 0xFD	; 253
     3be:	00 81       	ld	r16, Z
     3c0:	11 81       	ldd	r17, Z+1	; 0x01
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
     3c2:	9f a5       	ldd	r25, Y+47	; 0x2f
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
     3c4:	9b 3e       	cpi	r25, 0xEB	; 235
     3c6:	21 f0       	breq	.+8      	; 0x3d0 <check_fs.part.5+0x22>
     3c8:	98 5e       	subi	r25, 0xE8	; 232
     3ca:	92 30       	cpi	r25, 0x02	; 2
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <check_fs.part.5+0x22>
     3ce:	4d c0       	rjmp	.+154    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
     3d0:	05 35       	cpi	r16, 0x55	; 85
     3d2:	2a ea       	ldi	r18, 0xAA	; 170
     3d4:	12 07       	cpc	r17, r18
     3d6:	61 f4       	brne	.+24     	; 0x3f0 <check_fs.part.5+0x42>
     3d8:	48 e0       	ldi	r20, 0x08	; 8
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	6f e0       	ldi	r22, 0x0F	; 15
     3de:	71 e0       	ldi	r23, 0x01	; 1
     3e0:	ce 01       	movw	r24, r28
     3e2:	8f 57       	subi	r24, 0x7F	; 127
     3e4:	9f 4f       	sbci	r25, 0xFF	; 255
     3e6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <memcmp>
     3ea:	89 2b       	or	r24, r25
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <check_fs.part.5+0x42>
     3ee:	47 c0       	rjmp	.+142    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     3f0:	8a ad       	ldd	r24, Y+58	; 0x3a
     3f2:	9b ad       	ldd	r25, Y+59	; 0x3b
			return 0;	/* It is an FAT32 VBR */
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		b = fs->win[BPB_SecPerClus];
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
     3f4:	9c 01       	movw	r18, r24
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	31 09       	sbc	r19, r1
     3fa:	28 23       	and	r18, r24
     3fc:	39 23       	and	r19, r25
     3fe:	23 2b       	or	r18, r19
     400:	a1 f5       	brne	.+104    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     402:	81 15       	cp	r24, r1
     404:	92 40       	sbci	r25, 0x02	; 2
     406:	89 f5       	brne	.+98     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
			return 0;	/* It is an FAT32 VBR */
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		b = fs->win[BPB_SecPerClus];
     408:	8c ad       	ldd	r24, Y+60	; 0x3c
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
     40a:	88 23       	and	r24, r24
     40c:	71 f1       	breq	.+92     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9c 01       	movw	r18, r24
     412:	21 50       	subi	r18, 0x01	; 1
     414:	31 09       	sbc	r19, r1
     416:	82 23       	and	r24, r18
     418:	93 23       	and	r25, r19
     41a:	89 2b       	or	r24, r25
     41c:	31 f5       	brne	.+76     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
     41e:	8d ad       	ldd	r24, Y+61	; 0x3d
     420:	9e ad       	ldd	r25, Y+62	; 0x3e
     422:	89 2b       	or	r24, r25
     424:	11 f1       	breq	.+68     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
     426:	8f ad       	ldd	r24, Y+63	; 0x3f
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	99 0b       	sbc	r25, r25
     42c:	02 97       	sbiw	r24, 0x02	; 2
     42e:	e8 f4       	brcc	.+58     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     430:	fe 01       	movw	r30, r28
     432:	e0 5c       	subi	r30, 0xC0	; 192
     434:	ff 4f       	sbci	r31, 0xFF	; 255
		b = fs->win[BPB_SecPerClus];
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
     436:	80 81       	ld	r24, Z
     438:	91 81       	ldd	r25, Z+1	; 0x01
     43a:	89 2b       	or	r24, r25
     43c:	b1 f0       	breq	.+44     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     43e:	32 96       	adiw	r30, 0x02	; 2
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
     440:	80 81       	ld	r24, Z
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	80 38       	cpi	r24, 0x80	; 128
     446:	91 05       	cpc	r25, r1
     448:	50 f4       	brcc	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44a:	ce 01       	movw	r24, r28
     44c:	81 5b       	subi	r24, 0xB1	; 177
     44e:	9f 4f       	sbci	r25, 0xFF	; 255
     450:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     454:	61 15       	cp	r22, r1
     456:	71 05       	cpc	r23, r1
     458:	81 40       	sbci	r24, 0x01	; 1
     45a:	91 05       	cpc	r25, r1
     45c:	30 f0       	brcs	.+12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     45e:	cb 5b       	subi	r28, 0xBB	; 187
     460:	df 4f       	sbci	r29, 0xFF	; 255
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
     462:	88 81       	ld	r24, Y
     464:	99 81       	ldd	r25, Y+1	; 0x01
     466:	89 2b       	or	r24, r25
     468:	51 f4       	brne	.+20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     46a:	05 35       	cpi	r16, 0x55	; 85
     46c:	1a 4a       	sbci	r17, 0xAA	; 170
     46e:	51 f0       	breq	.+20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	90 e0       	ldi	r25, 0x00	; 0
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
			return 0;	/* It is an FAT32 VBR */
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	f8 cf       	rjmp	.-16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	f5 cf       	rjmp	.-22     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

0000048a <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
     48a:	a6 e0       	ldi	r26, 0x06	; 6
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	eb e4       	ldi	r30, 0x4B	; 75
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
     496:	42 30       	cpi	r20, 0x02	; 2
     498:	51 05       	cpc	r21, r1
     49a:	61 05       	cpc	r22, r1
     49c:	71 05       	cpc	r23, r1
     49e:	08 f4       	brcc	.+2      	; 0x4a2 <put_fat+0x18>
     4a0:	fb c0       	rjmp	.+502    	; 0x698 <put_fat+0x20e>
     4a2:	dc 01       	movw	r26, r24
     4a4:	53 96       	adiw	r26, 0x13	; 19
     4a6:	cd 90       	ld	r12, X+
     4a8:	dd 90       	ld	r13, X+
     4aa:	ed 90       	ld	r14, X+
     4ac:	fc 90       	ld	r15, X
     4ae:	56 97       	sbiw	r26, 0x16	; 22
     4b0:	4c 15       	cp	r20, r12
     4b2:	5d 05       	cpc	r21, r13
     4b4:	6e 05       	cpc	r22, r14
     4b6:	7f 05       	cpc	r23, r15
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <put_fat+0x32>
     4ba:	ee c0       	rjmp	.+476    	; 0x698 <put_fat+0x20e>
     4bc:	28 01       	movw	r4, r16
     4be:	39 01       	movw	r6, r18
     4c0:	6a 01       	movw	r12, r20
     4c2:	7b 01       	movw	r14, r22
     4c4:	9e 83       	std	Y+6, r25	; 0x06
     4c6:	8d 83       	std	Y+5, r24	; 0x05
		switch (fs->fs_type) {
     4c8:	fc 01       	movw	r30, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <put_fat+0x48>
     4d0:	7f c0       	rjmp	.+254    	; 0x5d0 <put_fat+0x146>
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <put_fat+0x4e>
     4d6:	9e c0       	rjmp	.+316    	; 0x614 <put_fat+0x18a>
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	09 f0       	breq	.+2      	; 0x4de <put_fat+0x54>
     4dc:	dd c0       	rjmp	.+442    	; 0x698 <put_fat+0x20e>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
     4de:	4a 01       	movw	r8, r20
     4e0:	96 94       	lsr	r9
     4e2:	87 94       	ror	r8
     4e4:	84 0e       	add	r8, r20
     4e6:	95 1e       	adc	r9, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     4e8:	c4 01       	movw	r24, r8
     4ea:	89 2f       	mov	r24, r25
     4ec:	99 27       	eor	r25, r25
     4ee:	86 95       	lsr	r24
     4f0:	47 8d       	ldd	r20, Z+31	; 0x1f
     4f2:	50 a1       	ldd	r21, Z+32	; 0x20
     4f4:	61 a1       	ldd	r22, Z+33	; 0x21
     4f6:	72 a1       	ldd	r23, Z+34	; 0x22
     4f8:	48 0f       	add	r20, r24
     4fa:	59 1f       	adc	r21, r25
     4fc:	61 1d       	adc	r22, r1
     4fe:	71 1d       	adc	r23, r1
     500:	cf 01       	movw	r24, r30
     502:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     506:	5c 01       	movw	r10, r24
			if (res != FR_OK) break;
     508:	89 2b       	or	r24, r25
     50a:	09 f0       	breq	.+2      	; 0x50e <put_fat+0x84>
     50c:	55 c0       	rjmp	.+170    	; 0x5b8 <put_fat+0x12e>
			p = fs->win + bc++ % SS(fs);
     50e:	2d 80       	ldd	r2, Y+5	; 0x05
     510:	3e 80       	ldd	r3, Y+6	; 0x06
     512:	ff e2       	ldi	r31, 0x2F	; 47
     514:	2f 0e       	add	r2, r31
     516:	31 1c       	adc	r3, r1
     518:	84 01       	movw	r16, r8
     51a:	0f 5f       	subi	r16, 0xFF	; 255
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	92 22       	and	r9, r18
     522:	f1 01       	movw	r30, r2
     524:	e8 0d       	add	r30, r8
     526:	f9 1d       	adc	r31, r9
     528:	84 2d       	mov	r24, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
     52a:	a7 01       	movw	r20, r14
     52c:	96 01       	movw	r18, r12
     52e:	21 70       	andi	r18, 0x01	; 1
     530:	33 27       	eor	r19, r19
     532:	44 27       	eor	r20, r20
     534:	55 27       	eor	r21, r21
     536:	29 83       	std	Y+1, r18	; 0x01
     538:	3a 83       	std	Y+2, r19	; 0x02
     53a:	4b 83       	std	Y+3, r20	; 0x03
     53c:	5c 83       	std	Y+4, r21	; 0x04
     53e:	c0 fe       	sbrs	r12, 0
     540:	07 c0       	rjmp	.+14     	; 0x550 <put_fat+0xc6>
     542:	80 81       	ld	r24, Z
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	40 e1       	ldi	r20, 0x10	; 16
     548:	44 9e       	mul	r4, r20
     54a:	90 01       	movw	r18, r0
     54c:	11 24       	eor	r1, r1
     54e:	82 2b       	or	r24, r18
     550:	80 83       	st	Z, r24
			fs->wflag = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	ad 81       	ldd	r26, Y+5	; 0x05
     556:	be 81       	ldd	r27, Y+6	; 0x06
     558:	13 96       	adiw	r26, 0x03	; 3
     55a:	8c 93       	st	X, r24
     55c:	13 97       	sbiw	r26, 0x03	; 3
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     55e:	5f 96       	adiw	r26, 0x1f	; 31
     560:	4d 91       	ld	r20, X+
     562:	5d 91       	ld	r21, X+
     564:	6d 91       	ld	r22, X+
     566:	7c 91       	ld	r23, X
     568:	92 97       	sbiw	r26, 0x22	; 34
     56a:	c8 01       	movw	r24, r16
     56c:	89 2f       	mov	r24, r25
     56e:	99 27       	eor	r25, r25
     570:	86 95       	lsr	r24
     572:	48 0f       	add	r20, r24
     574:	59 1f       	adc	r21, r25
     576:	61 1d       	adc	r22, r1
     578:	71 1d       	adc	r23, r1
     57a:	cd 01       	movw	r24, r26
     57c:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     580:	5c 01       	movw	r10, r24
			if (res != FR_OK) break;
     582:	89 2b       	or	r24, r25
     584:	c9 f4       	brne	.+50     	; 0x5b8 <put_fat+0x12e>
			p = fs->win + bc % SS(fs);
     586:	11 70       	andi	r17, 0x01	; 1
     588:	f1 01       	movw	r30, r2
     58a:	e0 0f       	add	r30, r16
     58c:	f1 1f       	adc	r31, r17
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
     58e:	29 81       	ldd	r18, Y+1	; 0x01
     590:	3a 81       	ldd	r19, Y+2	; 0x02
     592:	4b 81       	ldd	r20, Y+3	; 0x03
     594:	5c 81       	ldd	r21, Y+4	; 0x04
     596:	23 2b       	or	r18, r19
     598:	24 2b       	or	r18, r20
     59a:	25 2b       	or	r18, r21
     59c:	91 f0       	breq	.+36     	; 0x5c2 <put_fat+0x138>
     59e:	54 e0       	ldi	r21, 0x04	; 4
     5a0:	76 94       	lsr	r7
     5a2:	67 94       	ror	r6
     5a4:	57 94       	ror	r5
     5a6:	47 94       	ror	r4
     5a8:	5a 95       	dec	r21
     5aa:	d1 f7       	brne	.-12     	; 0x5a0 <put_fat+0x116>
     5ac:	40 82       	st	Z, r4

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
			fs->wflag = 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	ad 81       	ldd	r26, Y+5	; 0x05
     5b2:	be 81       	ldd	r27, Y+6	; 0x06
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	8c 93       	st	X, r24
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
     5b8:	c5 01       	movw	r24, r10
     5ba:	26 96       	adiw	r28, 0x06	; 6
     5bc:	e2 e1       	ldi	r30, 0x12	; 18
     5be:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc % SS(fs);
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
     5c2:	00 81       	ld	r16, Z
     5c4:	00 7f       	andi	r16, 0xF0	; 240
     5c6:	35 2d       	mov	r19, r5
     5c8:	3f 70       	andi	r19, 0x0F	; 15
     5ca:	43 2e       	mov	r4, r19
     5cc:	40 2a       	or	r4, r16
     5ce:	ee cf       	rjmp	.-36     	; 0x5ac <put_fat+0x122>
			fs->wflag = 1;
			break;

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     5d0:	77 27       	eor	r23, r23
     5d2:	6f 2d       	mov	r22, r15
     5d4:	5e 2d       	mov	r21, r14
     5d6:	4d 2d       	mov	r20, r13
     5d8:	ed 81       	ldd	r30, Y+5	; 0x05
     5da:	fe 81       	ldd	r31, Y+6	; 0x06
     5dc:	87 8d       	ldd	r24, Z+31	; 0x1f
     5de:	90 a1       	ldd	r25, Z+32	; 0x20
     5e0:	a1 a1       	ldd	r26, Z+33	; 0x21
     5e2:	b2 a1       	ldd	r27, Z+34	; 0x22
     5e4:	48 0f       	add	r20, r24
     5e6:	59 1f       	adc	r21, r25
     5e8:	6a 1f       	adc	r22, r26
     5ea:	7b 1f       	adc	r23, r27
     5ec:	cf 01       	movw	r24, r30
     5ee:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     5f2:	5c 01       	movw	r10, r24
			if (res != FR_OK) break;
     5f4:	89 2b       	or	r24, r25
     5f6:	01 f7       	brne	.-64     	; 0x5b8 <put_fat+0x12e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
     5f8:	ed 81       	ldd	r30, Y+5	; 0x05
     5fa:	fe 81       	ldd	r31, Y+6	; 0x06
     5fc:	bf 96       	adiw	r30, 0x2f	; 47
     5fe:	cc 0c       	add	r12, r12
     600:	dd 1c       	adc	r13, r13
     602:	e8 94       	clt
     604:	c0 f8       	bld	r12, 0
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	d2 22       	and	r13, r18
     60a:	ec 0d       	add	r30, r12
     60c:	fd 1d       	adc	r31, r13
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     60e:	00 83       	st	Z, r16
	*ptr++ = (BYTE)val;
     610:	51 82       	std	Z+1, r5	; 0x01
     612:	cd cf       	rjmp	.-102    	; 0x5ae <put_fat+0x124>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     614:	ed 81       	ldd	r30, Y+5	; 0x05
     616:	fe 81       	ldd	r31, Y+6	; 0x06
     618:	87 8d       	ldd	r24, Z+31	; 0x1f
     61a:	90 a1       	ldd	r25, Z+32	; 0x20
     61c:	a1 a1       	ldd	r26, Z+33	; 0x21
     61e:	b2 a1       	ldd	r27, Z+34	; 0x22
     620:	27 e0       	ldi	r18, 0x07	; 7
     622:	76 95       	lsr	r23
     624:	67 95       	ror	r22
     626:	57 95       	ror	r21
     628:	47 95       	ror	r20
     62a:	2a 95       	dec	r18
     62c:	d1 f7       	brne	.-12     	; 0x622 <put_fat+0x198>
     62e:	48 0f       	add	r20, r24
     630:	59 1f       	adc	r21, r25
     632:	6a 1f       	adc	r22, r26
     634:	7b 1f       	adc	r23, r27
     636:	cf 01       	movw	r24, r30
     638:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     63c:	5c 01       	movw	r10, r24
			if (res != FR_OK) break;
     63e:	89 2b       	or	r24, r25
     640:	09 f0       	breq	.+2      	; 0x644 <put_fat+0x1ba>
     642:	ba cf       	rjmp	.-140    	; 0x5b8 <put_fat+0x12e>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
     644:	4d 81       	ldd	r20, Y+5	; 0x05
     646:	5e 81       	ldd	r21, Y+6	; 0x06
     648:	41 5d       	subi	r20, 0xD1	; 209
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	cc 0c       	add	r12, r12
     64e:	dd 1c       	adc	r13, r13
     650:	cc 0c       	add	r12, r12
     652:	dd 1c       	adc	r13, r13
     654:	fc ef       	ldi	r31, 0xFC	; 252
     656:	cf 22       	and	r12, r31
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	df 22       	and	r13, r31
     65c:	c4 0e       	add	r12, r20
     65e:	d5 1e       	adc	r13, r21
     660:	c6 01       	movw	r24, r12
     662:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     666:	2f e0       	ldi	r18, 0x0F	; 15
     668:	72 22       	and	r7, r18
     66a:	66 27       	eor	r22, r22
     66c:	77 27       	eor	r23, r23
     66e:	88 27       	eor	r24, r24
     670:	90 7f       	andi	r25, 0xF0	; 240
     672:	46 2a       	or	r4, r22
     674:	57 2a       	or	r5, r23
     676:	68 2a       	or	r6, r24
     678:	79 2a       	or	r7, r25
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     67a:	d6 01       	movw	r26, r12
     67c:	4c 92       	st	X, r4
	*ptr++ = (BYTE)val; val >>= 8;
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	5c 92       	st	X, r5
     682:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
     684:	12 96       	adiw	r26, 0x02	; 2
     686:	6c 92       	st	X, r6
     688:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
     68a:	13 96       	adiw	r26, 0x03	; 3
     68c:	7c 92       	st	X, r7
			if (res != FR_OK) break;
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	ed 81       	ldd	r30, Y+5	; 0x05
     692:	fe 81       	ldd	r31, Y+6	; 0x06
     694:	83 83       	std	Z+3, r24	; 0x03
     696:	90 cf       	rjmp	.-224    	; 0x5b8 <put_fat+0x12e>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	a8 2e       	mov	r10, r24
     69c:	b1 2c       	mov	r11, r1
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
			break;
		}
	}
	return res;
     69e:	8c cf       	rjmp	.-232    	; 0x5b8 <put_fat+0x12e>

000006a0 <get_fat.isra.7>:

/*-----------------------------------------------------------------------*/
/* FAT access - Read value of an FAT entry                               */
/*-----------------------------------------------------------------------*/

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	e6 e5       	ldi	r30, 0x56	; 86
     6a6:	f3 e0       	ldi	r31, 0x03	; 3
     6a8:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__prologue_saves__+0x10>
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
     6ac:	42 30       	cpi	r20, 0x02	; 2
     6ae:	51 05       	cpc	r21, r1
     6b0:	61 05       	cpc	r22, r1
     6b2:	71 05       	cpc	r23, r1
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <get_fat.isra.7+0x18>
     6b6:	a3 c0       	rjmp	.+326    	; 0x7fe <get_fat.isra.7+0x15e>
     6b8:	fc 01       	movw	r30, r24
     6ba:	03 89       	ldd	r16, Z+19	; 0x13
     6bc:	14 89       	ldd	r17, Z+20	; 0x14
     6be:	25 89       	ldd	r18, Z+21	; 0x15
     6c0:	36 89       	ldd	r19, Z+22	; 0x16
     6c2:	40 17       	cp	r20, r16
     6c4:	51 07       	cpc	r21, r17
     6c6:	62 07       	cpc	r22, r18
     6c8:	73 07       	cpc	r23, r19
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <get_fat.isra.7+0x2e>
     6cc:	98 c0       	rjmp	.+304    	; 0x7fe <get_fat.isra.7+0x15e>
     6ce:	6a 01       	movw	r12, r20
     6d0:	7b 01       	movw	r14, r22
     6d2:	ec 01       	movw	r28, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     6d4:	80 81       	ld	r24, Z
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	09 f4       	brne	.+2      	; 0x6dc <get_fat.isra.7+0x3c>
     6da:	51 c0       	rjmp	.+162    	; 0x77e <get_fat.isra.7+0xde>
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	09 f4       	brne	.+2      	; 0x6e2 <get_fat.isra.7+0x42>
     6e0:	6b c0       	rjmp	.+214    	; 0x7b8 <get_fat.isra.7+0x118>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <get_fat.isra.7+0x48>
     6e6:	8b c0       	rjmp	.+278    	; 0x7fe <get_fat.isra.7+0x15e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     6e8:	8a 01       	movw	r16, r20
     6ea:	16 95       	lsr	r17
     6ec:	07 95       	ror	r16
     6ee:	04 0f       	add	r16, r20
     6f0:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     6f2:	c8 01       	movw	r24, r16
     6f4:	89 2f       	mov	r24, r25
     6f6:	99 27       	eor	r25, r25
     6f8:	86 95       	lsr	r24
     6fa:	47 8d       	ldd	r20, Z+31	; 0x1f
     6fc:	50 a1       	ldd	r21, Z+32	; 0x20
     6fe:	61 a1       	ldd	r22, Z+33	; 0x21
     700:	72 a1       	ldd	r23, Z+34	; 0x22
     702:	48 0f       	add	r20, r24
     704:	59 1f       	adc	r21, r25
     706:	61 1d       	adc	r22, r1
     708:	71 1d       	adc	r23, r1
     70a:	cf 01       	movw	r24, r30
     70c:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     710:	89 2b       	or	r24, r25
     712:	41 f0       	breq	.+16     	; 0x724 <get_fat.isra.7+0x84>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
     714:	6f ef       	ldi	r22, 0xFF	; 255
     716:	7f ef       	ldi	r23, 0xFF	; 255
     718:	cb 01       	movw	r24, r22
			val = 1;	/* Internal error */
		}
	}

	return val;
}
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	ea e0       	ldi	r30, 0x0A	; 10
     720:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__epilogue_restores__+0x10>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     724:	58 01       	movw	r10, r16
     726:	ff ef       	ldi	r31, 0xFF	; 255
     728:	af 1a       	sub	r10, r31
     72a:	bf 0a       	sbc	r11, r31
     72c:	11 70       	andi	r17, 0x01	; 1
     72e:	fe 01       	movw	r30, r28
     730:	e0 0f       	add	r30, r16
     732:	f1 1f       	adc	r31, r17
     734:	17 a5       	ldd	r17, Z+47	; 0x2f
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     736:	c5 01       	movw	r24, r10
     738:	89 2f       	mov	r24, r25
     73a:	99 27       	eor	r25, r25
     73c:	86 95       	lsr	r24
     73e:	4f 8d       	ldd	r20, Y+31	; 0x1f
     740:	58 a1       	ldd	r21, Y+32	; 0x20
     742:	69 a1       	ldd	r22, Y+33	; 0x21
     744:	7a a1       	ldd	r23, Y+34	; 0x22
     746:	48 0f       	add	r20, r24
     748:	59 1f       	adc	r21, r25
     74a:	61 1d       	adc	r22, r1
     74c:	71 1d       	adc	r23, r1
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     754:	89 2b       	or	r24, r25
     756:	f1 f6       	brne	.-68     	; 0x714 <get_fat.isra.7+0x74>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	b8 22       	and	r11, r24
     75c:	ca 0d       	add	r28, r10
     75e:	db 1d       	adc	r29, r11
     760:	6f a5       	ldd	r22, Y+47	; 0x2f
     762:	76 2f       	mov	r23, r22
     764:	61 2f       	mov	r22, r17
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
     766:	c0 fe       	sbrs	r12, 0
     768:	08 c0       	rjmp	.+16     	; 0x77a <get_fat.isra.7+0xda>
     76a:	e4 e0       	ldi	r30, 0x04	; 4
     76c:	76 95       	lsr	r23
     76e:	67 95       	ror	r22
     770:	ea 95       	dec	r30
     772:	e1 f7       	brne	.-8      	; 0x76c <get_fat.isra.7+0xcc>
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	d0 cf       	rjmp	.-96     	; 0x71a <get_fat.isra.7+0x7a>
     77a:	7f 70       	andi	r23, 0x0F	; 15
     77c:	fb cf       	rjmp	.-10     	; 0x774 <get_fat.isra.7+0xd4>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     77e:	77 27       	eor	r23, r23
     780:	6f 2d       	mov	r22, r15
     782:	5e 2d       	mov	r21, r14
     784:	4d 2d       	mov	r20, r13
     786:	87 8d       	ldd	r24, Z+31	; 0x1f
     788:	90 a1       	ldd	r25, Z+32	; 0x20
     78a:	a1 a1       	ldd	r26, Z+33	; 0x21
     78c:	b2 a1       	ldd	r27, Z+34	; 0x22
     78e:	48 0f       	add	r20, r24
     790:	59 1f       	adc	r21, r25
     792:	6a 1f       	adc	r22, r26
     794:	7b 1f       	adc	r23, r27
     796:	cf 01       	movw	r24, r30
     798:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     79c:	89 2b       	or	r24, r25
     79e:	09 f0       	breq	.+2      	; 0x7a2 <get_fat.isra.7+0x102>
     7a0:	b9 cf       	rjmp	.-142    	; 0x714 <get_fat.isra.7+0x74>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     7a2:	cc 0c       	add	r12, r12
     7a4:	dd 1c       	adc	r13, r13
     7a6:	e8 94       	clt
     7a8:	c0 f8       	bld	r12, 0
     7aa:	e1 e0       	ldi	r30, 0x01	; 1
     7ac:	de 22       	and	r13, r30
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     7ae:	cc 0d       	add	r28, r12
     7b0:	dd 1d       	adc	r29, r13
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     7b2:	6f a5       	ldd	r22, Y+47	; 0x2f
     7b4:	78 a9       	ldd	r23, Y+48	; 0x30
     7b6:	de cf       	rjmp	.-68     	; 0x774 <get_fat.isra.7+0xd4>
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     7b8:	87 8d       	ldd	r24, Z+31	; 0x1f
     7ba:	90 a1       	ldd	r25, Z+32	; 0x20
     7bc:	a1 a1       	ldd	r26, Z+33	; 0x21
     7be:	b2 a1       	ldd	r27, Z+34	; 0x22
     7c0:	37 e0       	ldi	r19, 0x07	; 7
     7c2:	76 95       	lsr	r23
     7c4:	67 95       	ror	r22
     7c6:	57 95       	ror	r21
     7c8:	47 95       	ror	r20
     7ca:	3a 95       	dec	r19
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <get_fat.isra.7+0x122>
     7ce:	48 0f       	add	r20, r24
     7d0:	59 1f       	adc	r21, r25
     7d2:	6a 1f       	adc	r22, r26
     7d4:	7b 1f       	adc	r23, r27
     7d6:	cf 01       	movw	r24, r30
     7d8:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     7dc:	89 2b       	or	r24, r25
     7de:	09 f0       	breq	.+2      	; 0x7e2 <get_fat.isra.7+0x142>
     7e0:	99 cf       	rjmp	.-206    	; 0x714 <get_fat.isra.7+0x74>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
     7e2:	af 96       	adiw	r28, 0x2f	; 47
     7e4:	c6 01       	movw	r24, r12
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	8c 7f       	andi	r24, 0xFC	; 252
     7f0:	91 70       	andi	r25, 0x01	; 1
     7f2:	8c 0f       	add	r24, r28
     7f4:	9d 1f       	adc	r25, r29
     7f6:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
     7fa:	9f 70       	andi	r25, 0x0F	; 15
     7fc:	8e cf       	rjmp	.-228    	; 0x71a <get_fat.isra.7+0x7a>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	89 cf       	rjmp	.-238    	; 0x71a <get_fat.isra.7+0x7a>

00000808 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	a0 e0       	ldi	r26, 0x00	; 0
     80c:	ea e0       	ldi	r30, 0x0A	; 10
     80e:	f4 e0       	ldi	r31, 0x04	; 4
     810:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__prologue_saves__+0x4>
     814:	8c 01       	movw	r16, r24
     816:	2a 01       	movw	r4, r20
     818:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
     81a:	fc 01       	movw	r30, r24
     81c:	c0 81       	ld	r28, Z
     81e:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
     820:	41 14       	cp	r4, r1
     822:	51 04       	cpc	r5, r1
     824:	61 04       	cpc	r6, r1
     826:	71 04       	cpc	r7, r1
     828:	f1 f4       	brne	.+60     	; 0x866 <create_chain+0x5e>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
     82a:	8b 84       	ldd	r8, Y+11	; 0x0b
     82c:	9c 84       	ldd	r9, Y+12	; 0x0c
     82e:	ad 84       	ldd	r10, Y+13	; 0x0d
     830:	be 84       	ldd	r11, Y+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
     832:	81 14       	cp	r8, r1
     834:	91 04       	cpc	r9, r1
     836:	a1 04       	cpc	r10, r1
     838:	b1 04       	cpc	r11, r1
     83a:	f1 f1       	breq	.+124    	; 0x8b8 <create_chain+0xb0>
     83c:	8b 89       	ldd	r24, Y+19	; 0x13
     83e:	9c 89       	ldd	r25, Y+20	; 0x14
     840:	ad 89       	ldd	r26, Y+21	; 0x15
     842:	be 89       	ldd	r27, Y+22	; 0x16
     844:	88 16       	cp	r8, r24
     846:	99 06       	cpc	r9, r25
     848:	aa 06       	cpc	r10, r26
     84a:	bb 06       	cpc	r11, r27
     84c:	a8 f5       	brcc	.+106    	; 0x8b8 <create_chain+0xb0>
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;							/* Cluster to start to find */
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
     84e:	8f 85       	ldd	r24, Y+15	; 0x0f
     850:	98 89       	ldd	r25, Y+16	; 0x10
     852:	a9 89       	ldd	r26, Y+17	; 0x11
     854:	ba 89       	ldd	r27, Y+18	; 0x12
     856:	89 2b       	or	r24, r25
     858:	8a 2b       	or	r24, r26
     85a:	8b 2b       	or	r24, r27
     85c:	91 f5       	brne	.+100    	; 0x8c2 <create_chain+0xba>
     85e:	c1 2c       	mov	r12, r1
     860:	d1 2c       	mov	r13, r1
     862:	76 01       	movw	r14, r12
     864:	16 c0       	rjmp	.+44     	; 0x892 <create_chain+0x8a>
	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Suggested cluster to start to find */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
     866:	ce 01       	movw	r24, r28
     868:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;				/* Test for insanity */
     870:	f2 e0       	ldi	r31, 0x02	; 2
     872:	cf 16       	cp	r12, r31
     874:	d1 04       	cpc	r13, r1
     876:	e1 04       	cpc	r14, r1
     878:	f1 04       	cpc	r15, r1
     87a:	08 f4       	brcc	.+2      	; 0x87e <create_chain+0x76>
     87c:	df c0       	rjmp	.+446    	; 0xa3c <__stack+0x13d>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
     87e:	2f ef       	ldi	r18, 0xFF	; 255
     880:	c2 16       	cp	r12, r18
     882:	d2 06       	cpc	r13, r18
     884:	e2 06       	cpc	r14, r18
     886:	f2 06       	cpc	r15, r18
     888:	59 f4       	brne	.+22     	; 0x8a0 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
     88a:	cc 24       	eor	r12, r12
     88c:	ca 94       	dec	r12
     88e:	dc 2c       	mov	r13, r12
     890:	76 01       	movw	r14, r12
	}

	return ncl;		/* Return new cluster number or error status */
}
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	e0 e1       	ldi	r30, 0x10	; 16
     89c:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__epilogue_restores__+0x4>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
     8a0:	8b 89       	ldd	r24, Y+19	; 0x13
     8a2:	9c 89       	ldd	r25, Y+20	; 0x14
     8a4:	ad 89       	ldd	r26, Y+21	; 0x15
     8a6:	be 89       	ldd	r27, Y+22	; 0x16
     8a8:	c8 16       	cp	r12, r24
     8aa:	d9 06       	cpc	r13, r25
     8ac:	ea 06       	cpc	r14, r26
     8ae:	fb 06       	cpc	r15, r27
     8b0:	80 f3       	brcs	.-32     	; 0x892 <create_chain+0x8a>
     8b2:	53 01       	movw	r10, r6
     8b4:	42 01       	movw	r8, r4
     8b6:	cb cf       	rjmp	.-106    	; 0x84e <create_chain+0x46>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Suggested cluster to start to find */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
     8b8:	81 2c       	mov	r8, r1
     8ba:	91 2c       	mov	r9, r1
     8bc:	54 01       	movw	r10, r8
     8be:	83 94       	inc	r8
     8c0:	c6 cf       	rjmp	.-116    	; 0x84e <create_chain+0x46>
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
     8c2:	84 14       	cp	r8, r4
     8c4:	95 04       	cpc	r9, r5
     8c6:	a6 04       	cpc	r10, r6
     8c8:	b7 04       	cpc	r11, r7
     8ca:	09 f0       	breq	.+2      	; 0x8ce <create_chain+0xc6>
     8cc:	41 c0       	rjmp	.+130    	; 0x950 <__stack+0x51>
			ncl = scl + 1;						/* Test if next cluster is free */
     8ce:	75 01       	movw	r14, r10
     8d0:	64 01       	movw	r12, r8
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	c8 1a       	sub	r12, r24
     8d6:	d8 0a       	sbc	r13, r24
     8d8:	e8 0a       	sbc	r14, r24
     8da:	f8 0a       	sbc	r15, r24
			if (ncl >= fs->n_fatent) ncl = 2;
     8dc:	8b 89       	ldd	r24, Y+19	; 0x13
     8de:	9c 89       	ldd	r25, Y+20	; 0x14
     8e0:	ad 89       	ldd	r26, Y+21	; 0x15
     8e2:	be 89       	ldd	r27, Y+22	; 0x16
     8e4:	c8 16       	cp	r12, r24
     8e6:	d9 06       	cpc	r13, r25
     8e8:	ea 06       	cpc	r14, r26
     8ea:	fb 06       	cpc	r15, r27
     8ec:	28 f0       	brcs	.+10     	; 0x8f8 <create_chain+0xf0>
     8ee:	22 e0       	ldi	r18, 0x02	; 2
     8f0:	c2 2e       	mov	r12, r18
     8f2:	d1 2c       	mov	r13, r1
     8f4:	e1 2c       	mov	r14, r1
     8f6:	f1 2c       	mov	r15, r1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
     8f8:	b7 01       	movw	r22, r14
     8fa:	a6 01       	movw	r20, r12
     8fc:	f8 01       	movw	r30, r16
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     906:	61 30       	cpi	r22, 0x01	; 1
     908:	71 05       	cpc	r23, r1
     90a:	81 05       	cpc	r24, r1
     90c:	91 05       	cpc	r25, r1
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	95 c0       	rjmp	.+298    	; 0xa3c <__stack+0x13d>
     912:	6f 3f       	cpi	r22, 0xFF	; 255
     914:	ff ef       	ldi	r31, 0xFF	; 255
     916:	7f 07       	cpc	r23, r31
     918:	8f 07       	cpc	r24, r31
     91a:	9f 07       	cpc	r25, r31
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0x21>
     91e:	b5 cf       	rjmp	.-150    	; 0x88a <create_chain+0x82>
			if (cs != 0) {						/* Not free? */
     920:	67 2b       	or	r22, r23
     922:	68 2b       	or	r22, r24
     924:	69 2b       	or	r22, r25
     926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
     928:	4d c0       	rjmp	.+154    	; 0x9c4 <__stack+0xc5>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
     92a:	8b 85       	ldd	r24, Y+11	; 0x0b
     92c:	9c 85       	ldd	r25, Y+12	; 0x0c
     92e:	ad 85       	ldd	r26, Y+13	; 0x0d
     930:	be 85       	ldd	r27, Y+14	; 0x0e
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	91 05       	cpc	r25, r1
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	50 f0       	brcs	.+20     	; 0x950 <__stack+0x51>
     93c:	4b 89       	ldd	r20, Y+19	; 0x13
     93e:	5c 89       	ldd	r21, Y+20	; 0x14
     940:	6d 89       	ldd	r22, Y+21	; 0x15
     942:	7e 89       	ldd	r23, Y+22	; 0x16
     944:	84 17       	cp	r24, r20
     946:	95 07       	cpc	r25, r21
     948:	a6 07       	cpc	r26, r22
     94a:	b7 07       	cpc	r27, r23
     94c:	08 f4       	brcc	.+2      	; 0x950 <__stack+0x51>
     94e:	67 c0       	rjmp	.+206    	; 0xa1e <__stack+0x11f>
     950:	75 01       	movw	r14, r10
     952:	64 01       	movw	r12, r8
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	c2 1a       	sub	r12, r18
     958:	d2 0a       	sbc	r13, r18
     95a:	e2 0a       	sbc	r14, r18
     95c:	f2 0a       	sbc	r15, r18
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
     95e:	8b 89       	ldd	r24, Y+19	; 0x13
     960:	9c 89       	ldd	r25, Y+20	; 0x14
     962:	ad 89       	ldd	r26, Y+21	; 0x15
     964:	be 89       	ldd	r27, Y+22	; 0x16
     966:	c8 16       	cp	r12, r24
     968:	d9 06       	cpc	r13, r25
     96a:	ea 06       	cpc	r14, r26
     96c:	fb 06       	cpc	r15, r27
     96e:	60 f0       	brcs	.+24     	; 0x988 <__stack+0x89>
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	88 16       	cp	r8, r24
     974:	91 04       	cpc	r9, r1
     976:	a1 04       	cpc	r10, r1
     978:	b1 04       	cpc	r11, r1
     97a:	08 f4       	brcc	.+2      	; 0x97e <__stack+0x7f>
     97c:	70 cf       	rjmp	.-288    	; 0x85e <create_chain+0x56>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
					ncl = 2;
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	c9 2e       	mov	r12, r25
     982:	d1 2c       	mov	r13, r1
     984:	e1 2c       	mov	r14, r1
     986:	f1 2c       	mov	r15, r1
					if (ncl > scl) return 0;	/* No free cluster found? */
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
     988:	b7 01       	movw	r22, r14
     98a:	a6 01       	movw	r20, r12
     98c:	f8 01       	movw	r30, r16
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
				if (cs == 0) break;				/* Found a free cluster? */
     996:	61 15       	cp	r22, r1
     998:	71 05       	cpc	r23, r1
     99a:	81 05       	cpc	r24, r1
     99c:	91 05       	cpc	r25, r1
     99e:	b9 f0       	breq	.+46     	; 0x9ce <__stack+0xcf>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     9a0:	61 30       	cpi	r22, 0x01	; 1
     9a2:	71 05       	cpc	r23, r1
     9a4:	81 05       	cpc	r24, r1
     9a6:	91 05       	cpc	r25, r1
     9a8:	09 f4       	brne	.+2      	; 0x9ac <__stack+0xad>
     9aa:	48 c0       	rjmp	.+144    	; 0xa3c <__stack+0x13d>
     9ac:	6f 3f       	cpi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	8f 4f       	sbci	r24, 0xFF	; 255
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <__stack+0xb9>
     9b6:	69 cf       	rjmp	.-302    	; 0x88a <create_chain+0x82>
				if (ncl == scl) return 0;		/* No free cluster found? */
     9b8:	c8 14       	cp	r12, r8
     9ba:	d9 04       	cpc	r13, r9
     9bc:	ea 04       	cpc	r14, r10
     9be:	fb 04       	cpc	r15, r11
     9c0:	49 f6       	brne	.-110    	; 0x954 <__stack+0x55>
     9c2:	4d cf       	rjmp	.-358    	; 0x85e <create_chain+0x56>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
				ncl = 0;
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
     9c4:	c1 14       	cp	r12, r1
     9c6:	d1 04       	cpc	r13, r1
     9c8:	e1 04       	cpc	r14, r1
     9ca:	f1 04       	cpc	r15, r1
     9cc:	09 f2       	breq	.-126    	; 0x950 <__stack+0x51>
				if (cs == 0) break;				/* Found a free cluster? */
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
				if (ncl == scl) return 0;		/* No free cluster found? */
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
     9ce:	0f ef       	ldi	r16, 0xFF	; 255
     9d0:	1f ef       	ldi	r17, 0xFF	; 255
     9d2:	98 01       	movw	r18, r16
     9d4:	b7 01       	movw	r22, r14
     9d6:	a6 01       	movw	r20, r12
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 45 02 	call	0x48a	; 0x48a <put_fat>
		if (res == FR_OK && clst != 0) {
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	51 f5       	brne	.+84     	; 0xa36 <__stack+0x137>
     9e2:	41 14       	cp	r4, r1
     9e4:	51 04       	cpc	r5, r1
     9e6:	61 04       	cpc	r6, r1
     9e8:	71 04       	cpc	r7, r1
     9ea:	e1 f4       	brne	.+56     	; 0xa24 <__stack+0x125>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
     9ec:	cb 86       	std	Y+11, r12	; 0x0b
     9ee:	dc 86       	std	Y+12, r13	; 0x0c
     9f0:	ed 86       	std	Y+13, r14	; 0x0d
     9f2:	fe 86       	std	Y+14, r15	; 0x0e
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
     9f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     9f6:	98 89       	ldd	r25, Y+16	; 0x10
     9f8:	a9 89       	ldd	r26, Y+17	; 0x11
     9fa:	ba 89       	ldd	r27, Y+18	; 0x12
     9fc:	4b 89       	ldd	r20, Y+19	; 0x13
     9fe:	5c 89       	ldd	r21, Y+20	; 0x14
     a00:	6d 89       	ldd	r22, Y+21	; 0x15
     a02:	7e 89       	ldd	r23, Y+22	; 0x16
     a04:	42 50       	subi	r20, 0x02	; 2
     a06:	51 09       	sbc	r21, r1
     a08:	61 09       	sbc	r22, r1
     a0a:	71 09       	sbc	r23, r1
     a0c:	48 17       	cp	r20, r24
     a0e:	59 07       	cpc	r21, r25
     a10:	6a 07       	cpc	r22, r26
     a12:	7b 07       	cpc	r23, r27
     a14:	c0 f4       	brcc	.+48     	; 0xa46 <__stack+0x147>
		fs->fsi_flag |= 1;
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	81 60       	ori	r24, 0x01	; 1
     a1a:	8c 83       	std	Y+4, r24	; 0x04
     a1c:	3a cf       	rjmp	.-396    	; 0x892 <create_chain+0x8a>
     a1e:	4c 01       	movw	r8, r24
     a20:	5d 01       	movw	r10, r26
     a22:	96 cf       	rjmp	.-212    	; 0x950 <__stack+0x51>
				if (ncl == scl) return 0;		/* No free cluster found? */
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst != 0) {
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
     a24:	97 01       	movw	r18, r14
     a26:	86 01       	movw	r16, r12
     a28:	b3 01       	movw	r22, r6
     a2a:	a2 01       	movw	r20, r4
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 45 02 	call	0x48a	; 0x48a <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	d9 f2       	breq	.-74     	; 0x9ec <__stack+0xed>
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	09 f4       	brne	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	27 cf       	rjmp	.-434    	; 0x88a <create_chain+0x82>
     a3c:	c1 2c       	mov	r12, r1
     a3e:	d1 2c       	mov	r13, r1
     a40:	76 01       	movw	r14, r12
     a42:	c3 94       	inc	r12
     a44:	26 cf       	rjmp	.-436    	; 0x892 <create_chain+0x8a>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	a1 09       	sbc	r26, r1
     a4a:	b1 09       	sbc	r27, r1
     a4c:	8f 87       	std	Y+15, r24	; 0x0f
     a4e:	98 8b       	std	Y+16, r25	; 0x10
     a50:	a9 8b       	std	Y+17, r26	; 0x11
     a52:	ba 8b       	std	Y+18, r27	; 0x12
     a54:	e0 cf       	rjmp	.-64     	; 0xa16 <__stack+0x117>

00000a56 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
     a56:	4f 92       	push	r4
     a58:	5f 92       	push	r5
     a5a:	6f 92       	push	r6
     a5c:	7f 92       	push	r7
     a5e:	8f 92       	push	r8
     a60:	9f 92       	push	r9
     a62:	af 92       	push	r10
     a64:	bf 92       	push	r11
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	7c 01       	movw	r14, r24
     a74:	4a 01       	movw	r8, r20
     a76:	5b 01       	movw	r10, r22
     a78:	b9 01       	movw	r22, r18
     a7a:	a8 01       	movw	r20, r16
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
     a7c:	22 e0       	ldi	r18, 0x02	; 2
     a7e:	82 16       	cp	r8, r18
     a80:	91 04       	cpc	r9, r1
     a82:	a1 04       	cpc	r10, r1
     a84:	b1 04       	cpc	r11, r1
     a86:	08 f4       	brcc	.+2      	; 0xa8a <remove_chain+0x34>
     a88:	76 c0       	rjmp	.+236    	; 0xb76 <remove_chain+0x120>
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
     a8a:	fc 01       	movw	r30, r24
     a8c:	c0 81       	ld	r28, Z
     a8e:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
     a90:	8b 89       	ldd	r24, Y+19	; 0x13
     a92:	9c 89       	ldd	r25, Y+20	; 0x14
     a94:	ad 89       	ldd	r26, Y+21	; 0x15
     a96:	be 89       	ldd	r27, Y+22	; 0x16
     a98:	88 16       	cp	r8, r24
     a9a:	99 06       	cpc	r9, r25
     a9c:	aa 06       	cpc	r10, r26
     a9e:	bb 06       	cpc	r11, r27
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <remove_chain+0x4e>
     aa2:	69 c0       	rjmp	.+210    	; 0xb76 <remove_chain+0x120>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
     aa4:	41 15       	cp	r20, r1
     aa6:	51 05       	cpc	r21, r1
     aa8:	61 05       	cpc	r22, r1
     aaa:	71 05       	cpc	r23, r1
     aac:	41 f0       	breq	.+16     	; 0xabe <remove_chain+0x68>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
     aae:	0f ef       	ldi	r16, 0xFF	; 255
     ab0:	1f ef       	ldi	r17, 0xFF	; 255
     ab2:	98 01       	movw	r18, r16
     ab4:	ce 01       	movw	r24, r28
     ab6:	0e 94 45 02 	call	0x48a	; 0x48a <put_fat>
		if (res != FR_OK) return res;
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	81 f4       	brne	.+32     	; 0xade <remove_chain+0x88>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
     abe:	b5 01       	movw	r22, r10
     ac0:	a4 01       	movw	r20, r8
     ac2:	f7 01       	movw	r30, r14
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
     acc:	2b 01       	movw	r4, r22
     ace:	3c 01       	movw	r6, r24
		if (nxt == 0) break;				/* Empty cluster? */
     ad0:	41 14       	cp	r4, r1
     ad2:	51 04       	cpc	r5, r1
     ad4:	61 04       	cpc	r6, r1
     ad6:	71 04       	cpc	r7, r1
     ad8:	89 f4       	brne	.+34     	; 0xafc <remove_chain+0xa6>
				}
			}
		}
	}
#endif
	return FR_OK;
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	7f 90       	pop	r7
     af4:	6f 90       	pop	r6
     af6:	5f 90       	pop	r5
     af8:	4f 90       	pop	r4
     afa:	08 95       	ret

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	4f 16       	cp	r4, r31
     b00:	51 04       	cpc	r5, r1
     b02:	61 04       	cpc	r6, r1
     b04:	71 04       	cpc	r7, r1
     b06:	b9 f1       	breq	.+110    	; 0xb76 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	42 16       	cp	r4, r18
     b0c:	52 06       	cpc	r5, r18
     b0e:	62 06       	cpc	r6, r18
     b10:	72 06       	cpc	r7, r18
     b12:	a1 f1       	breq	.+104    	; 0xb7c <remove_chain+0x126>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
     b14:	00 e0       	ldi	r16, 0x00	; 0
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	98 01       	movw	r18, r16
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 45 02 	call	0x48a	; 0x48a <put_fat>
			if (res != FR_OK) return res;
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	d9 f6       	brne	.-74     	; 0xade <remove_chain+0x88>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
     b28:	8f 85       	ldd	r24, Y+15	; 0x0f
     b2a:	98 89       	ldd	r25, Y+16	; 0x10
     b2c:	a9 89       	ldd	r26, Y+17	; 0x11
     b2e:	ba 89       	ldd	r27, Y+18	; 0x12
     b30:	4b 89       	ldd	r20, Y+19	; 0x13
     b32:	5c 89       	ldd	r21, Y+20	; 0x14
     b34:	6d 89       	ldd	r22, Y+21	; 0x15
     b36:	7e 89       	ldd	r23, Y+22	; 0x16
     b38:	4a 01       	movw	r8, r20
     b3a:	5b 01       	movw	r10, r22
     b3c:	e2 e0       	ldi	r30, 0x02	; 2
     b3e:	8e 1a       	sub	r8, r30
     b40:	91 08       	sbc	r9, r1
     b42:	a1 08       	sbc	r10, r1
     b44:	b1 08       	sbc	r11, r1
     b46:	88 15       	cp	r24, r8
     b48:	99 05       	cpc	r25, r9
     b4a:	aa 05       	cpc	r26, r10
     b4c:	bb 05       	cpc	r27, r11
     b4e:	50 f4       	brcc	.+20     	; 0xb64 <remove_chain+0x10e>
			fs->free_clst++;
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	a1 1d       	adc	r26, r1
     b54:	b1 1d       	adc	r27, r1
     b56:	8f 87       	std	Y+15, r24	; 0x0f
     b58:	98 8b       	std	Y+16, r25	; 0x10
     b5a:	a9 8b       	std	Y+17, r26	; 0x11
     b5c:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
     b5e:	8c 81       	ldd	r24, Y+4	; 0x04
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	8c 83       	std	Y+4, r24	; 0x04
     b64:	53 01       	movw	r10, r6
     b66:	42 01       	movw	r8, r4
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
     b68:	84 16       	cp	r8, r20
     b6a:	95 06       	cpc	r9, r21
     b6c:	a6 06       	cpc	r10, r22
     b6e:	b7 06       	cpc	r11, r23
     b70:	08 f4       	brcc	.+2      	; 0xb74 <remove_chain+0x11e>
     b72:	a5 cf       	rjmp	.-182    	; 0xabe <remove_chain+0x68>
     b74:	b2 cf       	rjmp	.-156    	; 0xada <remove_chain+0x84>
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	b1 cf       	rjmp	.-158    	; 0xade <remove_chain+0x88>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	ae cf       	rjmp	.-164    	; 0xade <remove_chain+0x88>

00000b82 <dir_sdi.constprop.14>:

/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	e7 ec       	ldi	r30, 0xC7	; 199
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__prologue_saves__+0xc>
     b8e:	8c 01       	movw	r16, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
     b90:	fc 01       	movw	r30, r24
     b92:	c0 81       	ld	r28, Z
     b94:	d1 81       	ldd	r29, Z+1	; 0x01


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
     b96:	16 86       	std	Z+14, r1	; 0x0e
     b98:	17 86       	std	Z+15, r1	; 0x0f
     b9a:	10 8a       	std	Z+16, r1	; 0x10
     b9c:	11 8a       	std	Z+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
     b9e:	c6 80       	ldd	r12, Z+6	; 0x06
     ba0:	d7 80       	ldd	r13, Z+7	; 0x07
     ba2:	e0 84       	ldd	r14, Z+8	; 0x08
     ba4:	f1 84       	ldd	r15, Z+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     ba6:	c1 14       	cp	r12, r1
     ba8:	d1 04       	cpc	r13, r1
     baa:	e1 04       	cpc	r14, r1
     bac:	f1 04       	cpc	r15, r1
     bae:	91 f5       	brne	.+100    	; 0xc14 <dir_sdi.constprop.14+0x92>
     bb0:	88 81       	ld	r24, Y
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	40 f0       	brcs	.+16     	; 0xbc6 <dir_sdi.constprop.14+0x44>
		clst = (DWORD)fs->dirbase;
     bb6:	8b a1       	ldd	r24, Y+35	; 0x23
     bb8:	9c a1       	ldd	r25, Y+36	; 0x24
     bba:	ad a1       	ldd	r26, Y+37	; 0x25
     bbc:	be a1       	ldd	r27, Y+38	; 0x26
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	a1 05       	cpc	r26, r1
     bc2:	b1 05       	cpc	r27, r1
     bc4:	49 f5       	brne	.+82     	; 0xc18 <dir_sdi.constprop.14+0x96>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
     bc6:	8f 81       	ldd	r24, Y+7	; 0x07
     bc8:	98 85       	ldd	r25, Y+8	; 0x08
     bca:	89 2b       	or	r24, r25
     bcc:	39 f4       	brne	.+14     	; 0xbdc <dir_sdi.constprop.14+0x5a>
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	90 e0       	ldi	r25, 0x00	; 0
	if (dp->sect == 0) return FR_INT_ERR;
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	ec e0       	ldi	r30, 0x0C	; 12
     bd8:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <__epilogue_restores__+0xc>
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;
     bdc:	8b a1       	ldd	r24, Y+35	; 0x23
     bde:	9c a1       	ldd	r25, Y+36	; 0x24
     be0:	ad a1       	ldd	r26, Y+37	; 0x25
     be2:	be a1       	ldd	r27, Y+38	; 0x26
     be4:	f8 01       	movw	r30, r16
     be6:	86 8b       	std	Z+22, r24	; 0x16
     be8:	97 8b       	std	Z+23, r25	; 0x17
     bea:	a0 8f       	std	Z+24, r26	; 0x18
     bec:	b1 8f       	std	Z+25, r27	; 0x19
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
     bee:	f8 01       	movw	r30, r16
     bf0:	c2 8a       	std	Z+18, r12	; 0x12
     bf2:	d3 8a       	std	Z+19, r13	; 0x13
     bf4:	e4 8a       	std	Z+20, r14	; 0x14
     bf6:	f5 8a       	std	Z+21, r15	; 0x15
	if (dp->sect == 0) return FR_INT_ERR;
     bf8:	86 89       	ldd	r24, Z+22	; 0x16
     bfa:	97 89       	ldd	r25, Z+23	; 0x17
     bfc:	a0 8d       	ldd	r26, Z+24	; 0x18
     bfe:	b1 8d       	ldd	r27, Z+25	; 0x19
     c00:	89 2b       	or	r24, r25
     c02:	8a 2b       	or	r24, r26
     c04:	8b 2b       	or	r24, r27
     c06:	19 f3       	breq	.-58     	; 0xbce <dir_sdi.constprop.14+0x4c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
     c08:	af 96       	adiw	r28, 0x2f	; 47
     c0a:	d3 8f       	std	Z+27, r29	; 0x1b
     c0c:	c2 8f       	std	Z+26, r28	; 0x1a

	return FR_OK;
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	df cf       	rjmp	.-66     	; 0xbd2 <dir_sdi.constprop.14+0x50>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     c14:	d7 01       	movw	r26, r14
     c16:	c6 01       	movw	r24, r12
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
     c18:	89 84       	ldd	r8, Y+9	; 0x09
     c1a:	9a 84       	ldd	r9, Y+10	; 0x0a
     c1c:	b1 2c       	mov	r11, r1
     c1e:	a1 2c       	mov	r10, r1
     c20:	29 e0       	ldi	r18, 0x09	; 9
     c22:	88 0c       	add	r8, r8
     c24:	99 1c       	adc	r9, r9
     c26:	aa 1c       	adc	r10, r10
     c28:	bb 1c       	adc	r11, r11
     c2a:	2a 95       	dec	r18
     c2c:	d1 f7       	brne	.-12     	; 0xc22 <dir_sdi.constprop.14+0xa0>
     c2e:	6c 01       	movw	r12, r24
     c30:	7d 01       	movw	r14, r26
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     c32:	b7 01       	movw	r22, r14
     c34:	a6 01       	movw	r20, r12
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
     c36:	81 14       	cp	r8, r1
     c38:	91 04       	cpc	r9, r1
     c3a:	a1 04       	cpc	r10, r1
     c3c:	b1 04       	cpc	r11, r1
     c3e:	49 f0       	breq	.+18     	; 0xc52 <dir_sdi.constprop.14+0xd0>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
     c40:	ce 01       	movw	r24, r28
     c42:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
     c46:	f8 01       	movw	r30, r16
     c48:	66 8b       	std	Z+22, r22	; 0x16
     c4a:	77 8b       	std	Z+23, r23	; 0x17
     c4c:	80 8f       	std	Z+24, r24	; 0x18
     c4e:	91 8f       	std	Z+25, r25	; 0x19
     c50:	ce cf       	rjmp	.-100    	; 0xbee <dir_sdi.constprop.14+0x6c>
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     c52:	f8 01       	movw	r30, r16
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
     c5c:	6b 01       	movw	r12, r22
     c5e:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     c60:	ff ef       	ldi	r31, 0xFF	; 255
     c62:	cf 16       	cp	r12, r31
     c64:	df 06       	cpc	r13, r31
     c66:	ef 06       	cpc	r14, r31
     c68:	ff 06       	cpc	r15, r31
     c6a:	89 f0       	breq	.+34     	; 0xc8e <dir_sdi.constprop.14+0x10c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	c8 16       	cp	r12, r24
     c70:	d1 04       	cpc	r13, r1
     c72:	e1 04       	cpc	r14, r1
     c74:	f1 04       	cpc	r15, r1
     c76:	08 f4       	brcc	.+2      	; 0xc7a <dir_sdi.constprop.14+0xf8>
     c78:	aa cf       	rjmp	.-172    	; 0xbce <dir_sdi.constprop.14+0x4c>
     c7a:	8b 89       	ldd	r24, Y+19	; 0x13
     c7c:	9c 89       	ldd	r25, Y+20	; 0x14
     c7e:	ad 89       	ldd	r26, Y+21	; 0x15
     c80:	be 89       	ldd	r27, Y+22	; 0x16
     c82:	c8 16       	cp	r12, r24
     c84:	d9 06       	cpc	r13, r25
     c86:	ea 06       	cpc	r14, r26
     c88:	fb 06       	cpc	r15, r27
     c8a:	98 f2       	brcs	.-90     	; 0xc32 <dir_sdi.constprop.14+0xb0>
     c8c:	a0 cf       	rjmp	.-192    	; 0xbce <dir_sdi.constprop.14+0x4c>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9f cf       	rjmp	.-194    	; 0xbd2 <dir_sdi.constprop.14+0x50>

00000c94 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	e0 e5       	ldi	r30, 0x50	; 80
     c9a:	f6 e0       	ldi	r31, 0x06	; 6
     c9c:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__prologue_saves__+0xc>
     ca0:	ec 01       	movw	r28, r24
     ca2:	6a 01       	movw	r12, r20
     ca4:	7b 01       	movw	r14, r22
)
{
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 11       	cpse	r24, r1
     caa:	2b c0       	rjmp	.+86     	; 0xd02 <dir_clear+0x6e>
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
	sect = clst2sect(fs, clst);		/* Top of the cluster */
     cac:	b7 01       	movw	r22, r14
     cae:	a6 01       	movw	r20, r12
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
     cb6:	4b 01       	movw	r8, r22
     cb8:	5c 01       	movw	r10, r24
	fs->winsect = sect;				/* Set window to top of the cluster */
     cba:	8b a6       	std	Y+43, r8	; 0x2b
     cbc:	9c a6       	std	Y+44, r9	; 0x2c
     cbe:	ad a6       	std	Y+45, r10	; 0x2d
     cc0:	be a6       	std	Y+46, r11	; 0x2e
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
     cc2:	6e 01       	movw	r12, r28
     cc4:	2f e2       	ldi	r18, 0x2F	; 47
     cc6:	c2 0e       	add	r12, r18
     cc8:	d1 1c       	adc	r13, r1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	f6 01       	movw	r30, r12
     cd0:	9c 01       	movw	r18, r24
     cd2:	11 92       	st	Z+, r1
     cd4:	21 50       	subi	r18, 0x01	; 1
     cd6:	30 40       	sbci	r19, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <dir_clear+0x3e>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     cda:	f1 2c       	mov	r15, r1
     cdc:	e1 2c       	mov	r14, r1
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	e8 16       	cp	r14, r24
     ce4:	f9 06       	cpc	r15, r25
     ce6:	a8 f0       	brcs	.+42     	; 0xd12 <dir_clear+0x7e>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	29 85       	ldd	r18, Y+9	; 0x09
     cee:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf0:	2e 15       	cp	r18, r14
     cf2:	3f 05       	cpc	r19, r15
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <dir_clear+0x64>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
}
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	ec e0       	ldi	r30, 0x0C	; 12
     cfe:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <__epilogue_restores__+0xc>
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 47 01 	call	0x28e	; 0x28e <sync_window.part.3>
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     d08:	89 2b       	or	r24, r25
     d0a:	81 f2       	breq	.-96     	; 0xcac <dir_clear+0x18>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	f3 cf       	rjmp	.-26     	; 0xcf8 <dir_clear+0x64>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     d12:	01 e0       	ldi	r16, 0x01	; 1
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	a5 01       	movw	r20, r10
     d18:	94 01       	movw	r18, r8
     d1a:	2e 0d       	add	r18, r14
     d1c:	3f 1d       	adc	r19, r15
     d1e:	41 1d       	adc	r20, r1
     d20:	51 1d       	adc	r21, r1
     d22:	b6 01       	movw	r22, r12
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
     d2a:	89 2b       	or	r24, r25
     d2c:	e9 f6       	brne	.-70     	; 0xce8 <dir_clear+0x54>
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	e3 1a       	sub	r14, r19
     d32:	f3 0a       	sbc	r15, r19
     d34:	d4 cf       	rjmp	.-88     	; 0xcde <dir_clear+0x4a>

00000d36 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
     d54:	08 81       	ld	r16, Y
     d56:	19 81       	ldd	r17, Y+1	; 0x01


	ofs = dp->dptr + SZDIRE;	/* Next entry */
     d58:	ce 84       	ldd	r12, Y+14	; 0x0e
     d5a:	df 84       	ldd	r13, Y+15	; 0x0f
     d5c:	e8 88       	ldd	r14, Y+16	; 0x10
     d5e:	f9 88       	ldd	r15, Y+17	; 0x11
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	c8 0e       	add	r12, r24
     d64:	d1 1c       	adc	r13, r1
     d66:	e1 1c       	adc	r14, r1
     d68:	f1 1c       	adc	r15, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
     d6a:	c1 14       	cp	r12, r1
     d6c:	d1 04       	cpc	r13, r1
     d6e:	e0 e2       	ldi	r30, 0x20	; 32
     d70:	ee 06       	cpc	r14, r30
     d72:	f1 04       	cpc	r15, r1
     d74:	20 f0       	brcs	.+8      	; 0xd7e <dir_next+0x48>
     d76:	1e 8a       	std	Y+22, r1	; 0x16
     d78:	1f 8a       	std	Y+23, r1	; 0x17
     d7a:	18 8e       	std	Y+24, r1	; 0x18
     d7c:	19 8e       	std	Y+25, r1	; 0x19
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
     d7e:	8e 89       	ldd	r24, Y+22	; 0x16
     d80:	9f 89       	ldd	r25, Y+23	; 0x17
     d82:	a8 8d       	ldd	r26, Y+24	; 0x18
     d84:	b9 8d       	ldd	r27, Y+25	; 0x19
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	a1 05       	cpc	r26, r1
     d8a:	b1 05       	cpc	r27, r1
     d8c:	99 f1       	breq	.+102    	; 0xdf4 <dir_next+0xbe>
     d8e:	5b 01       	movw	r10, r22

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
     d90:	b7 01       	movw	r22, r14
     d92:	a6 01       	movw	r20, r12
     d94:	51 70       	andi	r21, 0x01	; 1
     d96:	66 27       	eor	r22, r22
     d98:	77 27       	eor	r23, r23
     d9a:	45 2b       	or	r20, r21
     d9c:	46 2b       	or	r20, r22
     d9e:	47 2b       	or	r20, r23
     da0:	09 f0       	breq	.+2      	; 0xda4 <dir_next+0x6e>
     da2:	a4 c0       	rjmp	.+328    	; 0xeec <dir_next+0x1b6>
		dp->sect++;				/* Next sector */
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	a1 1d       	adc	r26, r1
     da8:	b1 1d       	adc	r27, r1
     daa:	8e 8b       	std	Y+22, r24	; 0x16
     dac:	9f 8b       	std	Y+23, r25	; 0x17
     dae:	a8 8f       	std	Y+24, r26	; 0x18
     db0:	b9 8f       	std	Y+25, r27	; 0x19

		if (dp->clust == 0) {	/* Static table */
     db2:	4a 89       	ldd	r20, Y+18	; 0x12
     db4:	5b 89       	ldd	r21, Y+19	; 0x13
     db6:	6c 89       	ldd	r22, Y+20	; 0x14
     db8:	7d 89       	ldd	r23, Y+21	; 0x15
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
     dba:	f8 01       	movw	r30, r16
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (dp->clust == 0) {	/* Static table */
     dbc:	41 15       	cp	r20, r1
     dbe:	51 05       	cpc	r21, r1
     dc0:	61 05       	cpc	r22, r1
     dc2:	71 05       	cpc	r23, r1
     dc4:	d1 f4       	brne	.+52     	; 0xdfa <dir_next+0xc4>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
     dc6:	87 81       	ldd	r24, Z+7	; 0x07
     dc8:	90 85       	ldd	r25, Z+8	; 0x08
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	b7 01       	movw	r22, r14
     dd0:	a6 01       	movw	r20, r12
     dd2:	35 e0       	ldi	r19, 0x05	; 5
     dd4:	76 95       	lsr	r23
     dd6:	67 95       	ror	r22
     dd8:	57 95       	ror	r21
     dda:	47 95       	ror	r20
     ddc:	3a 95       	dec	r19
     dde:	d1 f7       	brne	.-12     	; 0xdd4 <dir_next+0x9e>
     de0:	48 17       	cp	r20, r24
     de2:	59 07       	cpc	r21, r25
     de4:	6a 07       	cpc	r22, r26
     de6:	7b 07       	cpc	r23, r27
     de8:	08 f4       	brcc	.+2      	; 0xdec <dir_next+0xb6>
     dea:	80 c0       	rjmp	.+256    	; 0xeec <dir_next+0x1b6>
				dp->sect = 0; return FR_NO_FILE;
     dec:	1e 8a       	std	Y+22, r1	; 0x16
     dee:	1f 8a       	std	Y+23, r1	; 0x17
     df0:	18 8e       	std	Y+24, r1	; 0x18
     df2:	19 8e       	std	Y+25, r1	; 0x19
	FATFS *fs = dp->obj.fs;


	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	24 c0       	rjmp	.+72     	; 0xe42 <dir_next+0x10c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
				dp->sect = 0; return FR_NO_FILE;
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
     dfa:	81 85       	ldd	r24, Z+9	; 0x09
     dfc:	92 85       	ldd	r25, Z+10	; 0x0a
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	26 01       	movw	r4, r12
     e06:	37 01       	movw	r6, r14
     e08:	29 e0       	ldi	r18, 0x09	; 9
     e0a:	76 94       	lsr	r7
     e0c:	67 94       	ror	r6
     e0e:	57 94       	ror	r5
     e10:	47 94       	ror	r4
     e12:	2a 95       	dec	r18
     e14:	d1 f7       	brne	.-12     	; 0xe0a <dir_next+0xd4>
     e16:	84 21       	and	r24, r4
     e18:	95 21       	and	r25, r5
     e1a:	a6 21       	and	r26, r6
     e1c:	b7 21       	and	r27, r7
     e1e:	89 2b       	or	r24, r25
     e20:	8a 2b       	or	r24, r26
     e22:	8b 2b       	or	r24, r27
     e24:	09 f0       	breq	.+2      	; 0xe28 <dir_next+0xf2>
     e26:	62 c0       	rjmp	.+196    	; 0xeec <dir_next+0x1b6>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
     e28:	c8 01       	movw	r24, r16
     e2a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
     e2e:	2b 01       	movw	r4, r22
     e30:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
     e32:	f2 e0       	ldi	r31, 0x02	; 2
     e34:	4f 16       	cp	r4, r31
     e36:	51 04       	cpc	r5, r1
     e38:	61 04       	cpc	r6, r1
     e3a:	71 04       	cpc	r7, r1
     e3c:	88 f4       	brcc	.+34     	; 0xe60 <dir_next+0x12a>
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	90 e0       	ldi	r25, 0x00	; 0
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	af 90       	pop	r10
     e56:	7f 90       	pop	r7
     e58:	6f 90       	pop	r6
     e5a:	5f 90       	pop	r5
     e5c:	4f 90       	pop	r4
     e5e:	08 95       	ret
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	48 16       	cp	r4, r24
     e64:	58 06       	cpc	r5, r24
     e66:	68 06       	cpc	r6, r24
     e68:	78 06       	cpc	r7, r24
     e6a:	19 f4       	brne	.+6      	; 0xe72 <dir_next+0x13c>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	e8 cf       	rjmp	.-48     	; 0xe42 <dir_next+0x10c>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
     e72:	f8 01       	movw	r30, r16
     e74:	83 89       	ldd	r24, Z+19	; 0x13
     e76:	94 89       	ldd	r25, Z+20	; 0x14
     e78:	a5 89       	ldd	r26, Z+21	; 0x15
     e7a:	b6 89       	ldd	r27, Z+22	; 0x16
     e7c:	48 16       	cp	r4, r24
     e7e:	59 06       	cpc	r5, r25
     e80:	6a 06       	cpc	r6, r26
     e82:	7b 06       	cpc	r7, r27
     e84:	30 f1       	brcs	.+76     	; 0xed2 <dir_next+0x19c>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
     e86:	ab 28       	or	r10, r11
     e88:	09 f4       	brne	.+2      	; 0xe8c <dir_next+0x156>
     e8a:	b0 cf       	rjmp	.-160    	; 0xdec <dir_next+0xb6>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
     e8c:	4a 89       	ldd	r20, Y+18	; 0x12
     e8e:	5b 89       	ldd	r21, Y+19	; 0x13
     e90:	6c 89       	ldd	r22, Y+20	; 0x14
     e92:	7d 89       	ldd	r23, Y+21	; 0x15
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 04 04 	call	0x808	; 0x808 <create_chain>
     e9a:	2b 01       	movw	r4, r22
     e9c:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
     e9e:	87 e0       	ldi	r24, 0x07	; 7
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	41 14       	cp	r4, r1
     ea4:	51 04       	cpc	r5, r1
     ea6:	61 04       	cpc	r6, r1
     ea8:	71 04       	cpc	r7, r1
     eaa:	59 f2       	breq	.-106    	; 0xe42 <dir_next+0x10c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	4f 16       	cp	r4, r31
     eb0:	51 04       	cpc	r5, r1
     eb2:	61 04       	cpc	r6, r1
     eb4:	71 04       	cpc	r7, r1
     eb6:	19 f2       	breq	.-122    	; 0xe3e <dir_next+0x108>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	48 16       	cp	r4, r24
     ebc:	58 06       	cpc	r5, r24
     ebe:	68 06       	cpc	r6, r24
     ec0:	78 06       	cpc	r7, r24
     ec2:	a1 f2       	breq	.-88     	; 0xe6c <dir_next+0x136>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
     ec4:	b3 01       	movw	r22, r6
     ec6:	a2 01       	movw	r20, r4
     ec8:	c8 01       	movw	r24, r16
     eca:	0e 94 4a 06 	call	0xc94	; 0xc94 <dir_clear>
     ece:	89 2b       	or	r24, r25
     ed0:	69 f6       	brne	.-102    	; 0xe6c <dir_next+0x136>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
     ed2:	4a 8a       	std	Y+18, r4	; 0x12
     ed4:	5b 8a       	std	Y+19, r5	; 0x13
     ed6:	6c 8a       	std	Y+20, r6	; 0x14
     ed8:	7d 8a       	std	Y+21, r7	; 0x15
				dp->sect = clst2sect(fs, clst);
     eda:	b3 01       	movw	r22, r6
     edc:	a2 01       	movw	r20, r4
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
     ee4:	6e 8b       	std	Y+22, r22	; 0x16
     ee6:	7f 8b       	std	Y+23, r23	; 0x17
     ee8:	88 8f       	std	Y+24, r24	; 0x18
     eea:	99 8f       	std	Y+25, r25	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
     eec:	ce 86       	std	Y+14, r12	; 0x0e
     eee:	df 86       	std	Y+15, r13	; 0x0f
     ef0:	e8 8a       	std	Y+16, r14	; 0x10
     ef2:	f9 8a       	std	Y+17, r15	; 0x11
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
     ef4:	01 5d       	subi	r16, 0xD1	; 209
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	e1 e0       	ldi	r30, 0x01	; 1
     efa:	de 22       	and	r13, r30
     efc:	0c 0d       	add	r16, r12
     efe:	1d 1d       	adc	r17, r13
     f00:	1b 8f       	std	Y+27, r17	; 0x1b
     f02:	0a 8f       	std	Y+26, r16	; 0x1a

	return FR_OK;
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	9c cf       	rjmp	.-200    	; 0xe42 <dir_next+0x10c>

00000f0a <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	eb e8       	ldi	r30, 0x8B	; 139
     f10:	f7 e0       	ldi	r31, 0x07	; 7
     f12:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
     f16:	ec 01       	movw	r28, r24
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
     f18:	68 80       	ld	r6, Y
     f1a:	79 80       	ldd	r7, Y+1	; 0x01
     f1c:	fb 01       	movw	r30, r22
     f1e:	6f 01       	movw	r12, r30
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
     f20:	81 91       	ld	r24, Z+
     f22:	8f 32       	cpi	r24, 0x2F	; 47
     f24:	e1 f3       	breq	.-8      	; 0xf1e <follow_path+0x14>
     f26:	8c 35       	cpi	r24, 0x5C	; 92
     f28:	d1 f3       	breq	.-12     	; 0xf1e <follow_path+0x14>
		dp->obj.sclust = 0;					/* Start from the root directory */
     f2a:	1e 82       	std	Y+6, r1	; 0x06
     f2c:	1f 82       	std	Y+7, r1	; 0x07
     f2e:	18 86       	std	Y+8, r1	; 0x08
     f30:	19 86       	std	Y+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
     f32:	f6 01       	movw	r30, r12
     f34:	80 81       	ld	r24, Z
     f36:	80 32       	cpi	r24, 0x20	; 32
     f38:	08 f4       	brcc	.+2      	; 0xf3c <follow_path+0x32>
     f3a:	77 c0       	rjmp	.+238    	; 0x102a <follow_path+0x120>
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
     f3c:	5e 01       	movw	r10, r28
     f3e:	fc e1       	ldi	r31, 0x1C	; 28
     f40:	af 0e       	add	r10, r31
     f42:	b1 1c       	adc	r11, r1
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
     f44:	35 e0       	ldi	r19, 0x05	; 5
     f46:	33 2e       	mov	r3, r19
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
     f48:	23 01       	movw	r4, r6
     f4a:	2f e2       	ldi	r18, 0x2F	; 47
     f4c:	42 0e       	add	r4, r18
     f4e:	51 1c       	adc	r5, r1
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
	memset(sfn, ' ', 11);
     f50:	4b e0       	ldi	r20, 0x0B	; 11
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	60 e2       	ldi	r22, 0x20	; 32
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	c5 01       	movw	r24, r10
     f5a:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <memset>
	si = i = 0; ni = 8;
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	28 e0       	ldi	r18, 0x08	; 8
     f68:	82 2e       	mov	r8, r18
     f6a:	91 2c       	mov	r9, r1
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
     f6c:	7c 01       	movw	r14, r24
     f6e:	ef ef       	ldi	r30, 0xFF	; 255
     f70:	ee 1a       	sub	r14, r30
     f72:	fe 0a       	sbc	r15, r30
     f74:	f6 01       	movw	r30, r12
     f76:	e8 0f       	add	r30, r24
     f78:	f9 1f       	adc	r31, r25
     f7a:	20 80       	ld	r2, Z
		if (c <= ' ') break; 			/* Break if end of the path name */
     f7c:	f0 e2       	ldi	r31, 0x20	; 32
     f7e:	f2 15       	cp	r31, r2
     f80:	88 f4       	brcc	.+34     	; 0xfa4 <follow_path+0x9a>
		if (IsSeparator(c)) {			/* Break if a separator is found */
     f82:	2f e2       	ldi	r18, 0x2F	; 47
     f84:	22 16       	cp	r2, r18
     f86:	19 f0       	breq	.+6      	; 0xf8e <follow_path+0x84>
     f88:	ec e5       	ldi	r30, 0x5C	; 92
     f8a:	2e 12       	cpse	r2, r30
     f8c:	5a c0       	rjmp	.+180    	; 0x1042 <follow_path+0x138>
     f8e:	f6 01       	movw	r30, r12
     f90:	ee 0d       	add	r30, r14
     f92:	ff 1d       	adc	r31, r15
     f94:	7f 01       	movw	r14, r30
     f96:	ec 18       	sub	r14, r12
     f98:	fd 08       	sbc	r15, r13
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
     f9a:	81 91       	ld	r24, Z+
     f9c:	8f 32       	cpi	r24, 0x2F	; 47
     f9e:	d1 f3       	breq	.-12     	; 0xf94 <follow_path+0x8a>
     fa0:	8c 35       	cpi	r24, 0x5C	; 92
     fa2:	c1 f3       	breq	.-16     	; 0xf94 <follow_path+0x8a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
     fa4:	01 2b       	or	r16, r17
     fa6:	09 f4       	brne	.+2      	; 0xfaa <follow_path+0xa0>
     fa8:	65 c0       	rjmp	.+202    	; 0x1074 <follow_path+0x16a>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
     faa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fac:	85 3e       	cpi	r24, 0xE5	; 229
     fae:	09 f4       	brne	.+2      	; 0xfb2 <follow_path+0xa8>
     fb0:	3c 8e       	std	Y+28, r3	; 0x1c
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
     fb2:	ce 0c       	add	r12, r14
     fb4:	df 1c       	adc	r13, r15
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
     fb6:	20 e2       	ldi	r18, 0x20	; 32
     fb8:	22 15       	cp	r18, r2
     fba:	08 f0       	brcs	.+2      	; 0xfbe <follow_path+0xb4>
     fbc:	8e c0       	rjmp	.+284    	; 0x10da <follow_path+0x1d0>
     fbe:	f6 01       	movw	r30, r12
     fc0:	80 81       	ld	r24, Z
     fc2:	81 32       	cpi	r24, 0x21	; 33
     fc4:	0c f4       	brge	.+2      	; 0xfc8 <follow_path+0xbe>
     fc6:	89 c0       	rjmp	.+274    	; 0x10da <follow_path+0x1d0>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	8f a3       	std	Y+39, r24	; 0x27
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
     fcc:	e8 80       	ld	r14, Y
     fce:	f9 80       	ldd	r15, Y+1	; 0x01
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
     fd6:	8c 01       	movw	r16, r24
	if (res != FR_OK) return res;
     fd8:	89 2b       	or	r24, r25
     fda:	09 f0       	breq	.+2      	; 0xfde <follow_path+0xd4>
     fdc:	82 c0       	rjmp	.+260    	; 0x10e2 <follow_path+0x1d8>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
     fde:	4e 89       	ldd	r20, Y+22	; 0x16
     fe0:	5f 89       	ldd	r21, Y+23	; 0x17
     fe2:	68 8d       	ldd	r22, Y+24	; 0x18
     fe4:	79 8d       	ldd	r23, Y+25	; 0x19
     fe6:	c7 01       	movw	r24, r14
     fe8:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
     fec:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
     fee:	89 2b       	or	r24, r25
     ff0:	09 f0       	breq	.+2      	; 0xff4 <follow_path+0xea>
     ff2:	77 c0       	rjmp	.+238    	; 0x10e2 <follow_path+0x1d8>
		c = dp->dir[DIR_Name];
     ff4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     ff6:	fb 8d       	ldd	r31, Y+27	; 0x1b
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     ff8:	80 81       	ld	r24, Z
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <follow_path+0xf6>
     ffe:	6f c0       	rjmp	.+222    	; 0x10de <follow_path+0x1d4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1000:	83 85       	ldd	r24, Z+11	; 0x0b
    1002:	8f 73       	andi	r24, 0x3F	; 63
    1004:	8c 83       	std	Y+4, r24	; 0x04
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1006:	83 85       	ldd	r24, Z+11	; 0x0b
    1008:	83 fd       	sbrc	r24, 3
    100a:	09 c0       	rjmp	.+18     	; 0x101e <follow_path+0x114>
    100c:	4b e0       	ldi	r20, 0x0B	; 11
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	b5 01       	movw	r22, r10
    1012:	cf 01       	movw	r24, r30
    1014:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <memcmp>
    1018:	89 2b       	or	r24, r25
    101a:	09 f4       	brne	.+2      	; 0x101e <follow_path+0x114>
    101c:	62 c0       	rjmp	.+196    	; 0x10e2 <follow_path+0x1d8>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	ce 01       	movw	r24, r28
    1024:	0e 94 9b 06 	call	0xd36	; 0xd36 <dir_next>
    1028:	d6 cf       	rjmp	.-84     	; 0xfd6 <follow_path+0xcc>
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	8f a3       	std	Y+39, r24	; 0x27
		res = dir_sdi(dp, 0);
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
    1034:	8c 01       	movw	r16, r24
			}
		}
	}

	return res;
}
    1036:	c8 01       	movw	r24, r16
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	e2 e1       	ldi	r30, 0x12	; 18
    103e:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (IsSeparator(c)) {			/* Break if a separator is found */
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1042:	fe e2       	ldi	r31, 0x2E	; 46
    1044:	2f 16       	cp	r2, r31
    1046:	09 f4       	brne	.+2      	; 0x104a <follow_path+0x140>
    1048:	6c c0       	rjmp	.+216    	; 0x1122 <follow_path+0x218>
    104a:	08 15       	cp	r16, r8
    104c:	19 05       	cpc	r17, r9
    104e:	90 f4       	brcc	.+36     	; 0x1074 <follow_path+0x16a>
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
    1050:	20 e8       	ldi	r18, 0x80	; 128
    1052:	22 15       	cp	r18, r2
    1054:	38 f4       	brcc	.+14     	; 0x1064 <follow_path+0x15a>
		if (c <= DbcTbl[1]) return 1;
    1056:	ef e9       	ldi	r30, 0x9F	; 159
    1058:	e2 15       	cp	r30, r2
    105a:	78 f4       	brcc	.+30     	; 0x107a <follow_path+0x170>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
    105c:	20 e2       	ldi	r18, 0x20	; 32
    105e:	22 0d       	add	r18, r2
    1060:	2d 31       	cpi	r18, 0x1D	; 29
    1062:	58 f0       	brcs	.+22     	; 0x107a <follow_path+0x170>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1064:	62 2d       	mov	r22, r2
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	88 e1       	ldi	r24, 0x18	; 24
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <strchr>
    1070:	89 2b       	or	r24, r25
    1072:	31 f1       	breq	.+76     	; 0x10c0 <follow_path+0x1b6>
		if (IsSeparator(c)) {			/* Break if a separator is found */
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1074:	06 e0       	ldi	r16, 0x06	; 6
    1076:	10 e0       	ldi	r17, 0x00	; 0
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
			}
		}
	}

	return res;
    1078:	de cf       	rjmp	.-68     	; 0x1036 <follow_path+0x12c>
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    107a:	9c 01       	movw	r18, r24
    107c:	2e 5f       	subi	r18, 0xFE	; 254
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	f6 01       	movw	r30, r12
    1082:	ee 0d       	add	r30, r14
    1084:	ff 1d       	adc	r31, r15
    1086:	80 81       	ld	r24, Z
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
    1088:	80 34       	cpi	r24, 0x40	; 64
    108a:	a0 f3       	brcs	.-24     	; 0x1074 <follow_path+0x16a>
		if (c <= DbcTbl[5]) return 1;
    108c:	8f 37       	cpi	r24, 0x7F	; 127
    108e:	20 f0       	brcs	.+8      	; 0x1098 <follow_path+0x18e>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
    1090:	87 ff       	sbrs	r24, 7
    1092:	f0 cf       	rjmp	.-32     	; 0x1074 <follow_path+0x16a>
    1094:	8d 3f       	cpi	r24, 0xFD	; 253
    1096:	70 f7       	brcc	.-36     	; 0x1074 <follow_path+0x16a>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    1098:	a4 01       	movw	r20, r8
    109a:	41 50       	subi	r20, 0x01	; 1
    109c:	51 09       	sbc	r21, r1
    109e:	04 17       	cp	r16, r20
    10a0:	15 07       	cpc	r17, r21
    10a2:	40 f7       	brcc	.-48     	; 0x1074 <follow_path+0x16a>
			sfn[i++] = c;
    10a4:	f5 01       	movw	r30, r10
    10a6:	e0 0f       	add	r30, r16
    10a8:	f1 1f       	adc	r31, r17
    10aa:	20 82       	st	Z, r2
			sfn[i++] = d;
    10ac:	f8 01       	movw	r30, r16
    10ae:	31 96       	adiw	r30, 0x01	; 1
    10b0:	ea 0d       	add	r30, r10
    10b2:	fb 1d       	adc	r31, r11
    10b4:	0e 5f       	subi	r16, 0xFE	; 254
    10b6:	1f 4f       	sbci	r17, 0xFF	; 255
    10b8:	80 83       	st	Z, r24
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    10ba:	79 01       	movw	r14, r18
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
    10bc:	c7 01       	movw	r24, r14
    10be:	56 cf       	rjmp	.-340    	; 0xf6c <follow_path+0x62>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    10c0:	8f e9       	ldi	r24, 0x9F	; 159
    10c2:	82 0d       	add	r24, r2
    10c4:	8a 31       	cpi	r24, 0x1A	; 26
    10c6:	10 f4       	brcc	.+4      	; 0x10cc <follow_path+0x1c2>
    10c8:	f0 ee       	ldi	r31, 0xE0	; 224
    10ca:	2f 0e       	add	r2, r31
			sfn[i++] = c;
    10cc:	f5 01       	movw	r30, r10
    10ce:	e0 0f       	add	r30, r16
    10d0:	f1 1f       	adc	r31, r17
    10d2:	20 82       	st	Z, r2
    10d4:	0f 5f       	subi	r16, 0xFF	; 255
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
    10d8:	f1 cf       	rjmp	.-30     	; 0x10bc <follow_path+0x1b2>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	76 cf       	rjmp	.-276    	; 0xfca <follow_path+0xc0>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    10de:	04 e0       	ldi	r16, 0x04	; 4
    10e0:	10 e0       	ldi	r17, 0x00	; 0
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    10e2:	8f a1       	ldd	r24, Y+39	; 0x27
			if (res != FR_OK) {				/* Failed to find the object */
    10e4:	01 15       	cp	r16, r1
    10e6:	11 05       	cpc	r17, r1
    10e8:	49 f0       	breq	.+18     	; 0x10fc <follow_path+0x1f2>
				if (res == FR_NO_FILE) {	/* Object is not found */
    10ea:	04 30       	cpi	r16, 0x04	; 4
    10ec:	11 05       	cpc	r17, r1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <follow_path+0x1e8>
    10f0:	a2 cf       	rjmp	.-188    	; 0x1036 <follow_path+0x12c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    10f2:	82 fd       	sbrc	r24, 2
    10f4:	a0 cf       	rjmp	.-192    	; 0x1036 <follow_path+0x12c>
				break;
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    10f6:	05 e0       	ldi	r16, 0x05	; 5
    10f8:	10 e0       	ldi	r17, 0x00	; 0
    10fa:	9d cf       	rjmp	.-198    	; 0x1036 <follow_path+0x12c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    10fc:	82 fd       	sbrc	r24, 2
    10fe:	9b cf       	rjmp	.-202    	; 0x1036 <follow_path+0x12c>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	84 ff       	sbrs	r24, 4
    1104:	f8 cf       	rjmp	.-16     	; 0x10f6 <follow_path+0x1ec>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1106:	6e 85       	ldd	r22, Y+14	; 0x0e
    1108:	7f 85       	ldd	r23, Y+15	; 0x0f
    110a:	71 70       	andi	r23, 0x01	; 1
    110c:	64 0d       	add	r22, r4
    110e:	75 1d       	adc	r23, r5
    1110:	f3 01       	movw	r30, r6
    1112:	80 81       	ld	r24, Z
    1114:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    1118:	6e 83       	std	Y+6, r22	; 0x06
    111a:	7f 83       	std	Y+7, r23	; 0x07
    111c:	88 87       	std	Y+8, r24	; 0x08
    111e:	99 87       	std	Y+9, r25	; 0x09
		dp->fn[NSFLAG] = NS_NONAME;
		res = dir_sdi(dp, 0);

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
    1120:	17 cf       	rjmp	.-466    	; 0xf50 <follow_path+0x46>
		if (IsSeparator(c)) {			/* Break if a separator is found */
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1122:	fb e0       	ldi	r31, 0x0B	; 11
    1124:	8f 16       	cp	r8, r31
    1126:	91 04       	cpc	r9, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <follow_path+0x222>
    112a:	a4 cf       	rjmp	.-184    	; 0x1074 <follow_path+0x16a>
			i = 8; ni = 11;				/* Enter file extension field */
    112c:	08 e0       	ldi	r16, 0x08	; 8
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	8b e0       	ldi	r24, 0x0B	; 11
    1132:	88 2e       	mov	r8, r24
    1134:	91 2c       	mov	r9, r1
    1136:	c2 cf       	rjmp	.-124    	; 0x10bc <follow_path+0x1b2>

00001138 <dir_read.constprop.12>:
/*-----------------------------------------------------------------------*/

#define DIR_READ_FILE(dp) dir_read(dp, 0)
#define DIR_READ_LABEL(dp) dir_read(dp, 1)

static FRESULT dir_read (
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    1142:	08 81       	ld	r16, Y
    1144:	19 81       	ldd	r17, Y+1	; 0x01
static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	90 e0       	ldi	r25, 0x00	; 0
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    114a:	4e 89       	ldd	r20, Y+22	; 0x16
    114c:	5f 89       	ldd	r21, Y+23	; 0x17
    114e:	68 8d       	ldd	r22, Y+24	; 0x18
    1150:	79 8d       	ldd	r23, Y+25	; 0x19
    1152:	41 15       	cp	r20, r1
    1154:	51 05       	cpc	r21, r1
    1156:	61 05       	cpc	r22, r1
    1158:	71 05       	cpc	r23, r1
    115a:	19 f4       	brne	.+6      	; 0x1162 <dir_read.constprop.12+0x2a>
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	b9 f0       	breq	.+46     	; 0x118e <dir_read.constprop.12+0x56>
    1160:	24 c0       	rjmp	.+72     	; 0x11aa <dir_read.constprop.12+0x72>
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
		res = move_window(fs, dp->sect);
    1162:	c8 01       	movw	r24, r16
    1164:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
		if (res != FR_OK) break;
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	f9 f4       	brne	.+62     	; 0x11aa <dir_read.constprop.12+0x72>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    116c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    116e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1170:	90 81       	ld	r25, Z
		if (b == 0) {
    1172:	99 23       	and	r25, r25
    1174:	f9 f0       	breq	.+62     	; 0x11b4 <dir_read.constprop.12+0x7c>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    1176:	83 85       	ldd	r24, Z+11	; 0x0b
    1178:	8f 73       	andi	r24, 0x3F	; 63
    117a:	8c 83       	std	Y+4, r24	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    117c:	95 3e       	cpi	r25, 0xE5	; 229
    117e:	71 f0       	breq	.+28     	; 0x119c <dir_read.constprop.12+0x64>
    1180:	9e 32       	cpi	r25, 0x2E	; 46
    1182:	61 f0       	breq	.+24     	; 0x119c <dir_read.constprop.12+0x64>
    1184:	8f 30       	cpi	r24, 0x0F	; 15
    1186:	51 f0       	breq	.+20     	; 0x119c <dir_read.constprop.12+0x64>
    1188:	8f 71       	andi	r24, 0x1F	; 31
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	39 f0       	breq	.+14     	; 0x119c <dir_read.constprop.12+0x64>
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
		res = move_window(fs, dp->sect);
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
	return res;
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	ce 01       	movw	r24, r28
    11a2:	0e 94 9b 06 	call	0xd36	; 0xd36 <dir_next>
		if (res != FR_OK) break;
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	81 f2       	breq	.-96     	; 0x114a <dir_read.constprop.12+0x12>
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    11aa:	1e 8a       	std	Y+22, r1	; 0x16
    11ac:	1f 8a       	std	Y+23, r1	; 0x17
    11ae:	18 8e       	std	Y+24, r1	; 0x18
    11b0:	19 8e       	std	Y+25, r1	; 0x19
    11b2:	ef cf       	rjmp	.-34     	; 0x1192 <dir_read.constprop.12+0x5a>
	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		b = dp->dir[DIR_Name];	/* Test for the entry type */
		if (b == 0) {
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	f8 cf       	rjmp	.-16     	; 0x11aa <dir_read.constprop.12+0x72>

000011ba <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    11c4:	08 81       	ld	r16, Y
    11c6:	19 81       	ldd	r17, Y+1	; 0x01
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    11c8:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
	if (res == FR_OK) {
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	b9 f5       	brne	.+110    	; 0x123e <dir_register+0x84>
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    11d0:	4e 89       	ldd	r20, Y+22	; 0x16
    11d2:	5f 89       	ldd	r21, Y+23	; 0x17
    11d4:	68 8d       	ldd	r22, Y+24	; 0x18
    11d6:	79 8d       	ldd	r23, Y+25	; 0x19
    11d8:	c8 01       	movw	r24, r16
    11da:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
			if (res != FR_OK) break;
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	71 f5       	brne	.+92     	; 0x123e <dir_register+0x84>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    11e2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    11e4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    11e6:	80 81       	ld	r24, Z
    11e8:	85 3e       	cpi	r24, 0xE5	; 229
    11ea:	09 f5       	brne	.+66     	; 0x122e <dir_register+0x74>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    11ec:	4e 89       	ldd	r20, Y+22	; 0x16
    11ee:	5f 89       	ldd	r21, Y+23	; 0x17
    11f0:	68 8d       	ldd	r22, Y+24	; 0x18
    11f2:	79 8d       	ldd	r23, Y+25	; 0x19
    11f4:	c8 01       	movw	r24, r16
    11f6:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
		if (res == FR_OK) {
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	99 f4       	brne	.+38     	; 0x1224 <dir_register+0x6a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
    11fe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1200:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1202:	20 e2       	ldi	r18, 0x20	; 32
    1204:	df 01       	movw	r26, r30
    1206:	1d 92       	st	X+, r1
    1208:	2a 95       	dec	r18
    120a:	e9 f7       	brne	.-6      	; 0x1206 <dir_register+0x4c>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    120c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    120e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1210:	fe 01       	movw	r30, r28
    1212:	7c 96       	adiw	r30, 0x1c	; 28
    1214:	2b e0       	ldi	r18, 0x0B	; 11
    1216:	01 90       	ld	r0, Z+
    1218:	0d 92       	st	X+, r0
    121a:	2a 95       	dec	r18
    121c:	e1 f7       	brne	.-8      	; 0x1216 <dir_register+0x5c>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	f8 01       	movw	r30, r16
    1222:	23 83       	std	Z+3, r18	; 0x03
		}
	}

	return res;
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    122e:	88 23       	and	r24, r24
    1230:	e9 f2       	breq	.-70     	; 0x11ec <dir_register+0x32>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
			} else {
				n = 0;				/* Not a free entry, restart to search */
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	0e 94 9b 06 	call	0xd36	; 0xd36 <dir_next>
    123c:	c7 cf       	rjmp	.-114    	; 0x11cc <dir_register+0x12>
		} while (res == FR_OK);
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	91 05       	cpc	r25, r1
    1242:	81 f7       	brne	.-32     	; 0x1224 <dir_register+0x6a>
    1244:	87 e0       	ldi	r24, 0x07	; 7
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	ed cf       	rjmp	.-38     	; 0x1224 <dir_register+0x6a>

0000124a <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
    124a:	a0 e2       	ldi	r26, 0x20	; 32
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	eb e2       	ldi	r30, 0x2B	; 43
    1250:	f9 e0       	ldi	r31, 0x09	; 9
    1252:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    1256:	5b 01       	movw	r10, r22
    1258:	f4 2e       	mov	r15, r20
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
    125a:	db 01       	movw	r26, r22
    125c:	1d 92       	st	X+, r1
    125e:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    1260:	0e 94 8d 00 	call	0x11a	; 0x11a <get_ldnumber>
    1264:	6c 01       	movw	r12, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    1266:	3b e0       	ldi	r19, 0x0B	; 11
    1268:	23 2e       	mov	r2, r19
    126a:	31 2c       	mov	r3, r1
    126c:	97 fd       	sbrc	r25, 7
    126e:	24 c0       	rjmp	.+72     	; 0x12b8 <mount_volume+0x6e>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    1270:	fc 01       	movw	r30, r24
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	e4 56       	subi	r30, 0x64	; 100
    1278:	fe 4f       	sbci	r31, 0xFE	; 254
    127a:	00 81       	ld	r16, Z
    127c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    127e:	2c e0       	ldi	r18, 0x0C	; 12
    1280:	22 2e       	mov	r2, r18
    1282:	31 2c       	mov	r3, r1
    1284:	01 15       	cp	r16, r1
    1286:	11 05       	cpc	r17, r1
    1288:	b9 f0       	breq	.+46     	; 0x12b8 <mount_volume+0x6e>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
    128a:	f5 01       	movw	r30, r10
    128c:	11 83       	std	Z+1, r17	; 0x01
    128e:	00 83       	st	Z, r16

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    1290:	e8 94       	clt
    1292:	f0 f8       	bld	r15, 0
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    1294:	d8 01       	movw	r26, r16
    1296:	8c 91       	ld	r24, X
    1298:	88 23       	and	r24, r24
    129a:	99 f0       	breq	.+38     	; 0x12c2 <mount_volume+0x78>
		stat = disk_status(fs->pdrv);
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	8c 91       	ld	r24, X
    12a0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    12a4:	80 fd       	sbrc	r24, 0
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <mount_volume+0x78>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    12a8:	ff 20       	and	r15, r15
    12aa:	09 f4       	brne	.+2      	; 0x12ae <mount_volume+0x64>
    12ac:	51 c2       	rjmp	.+1186   	; 0x1750 <mount_volume+0x506>
    12ae:	82 ff       	sbrs	r24, 2
    12b0:	4f c2       	rjmp	.+1182   	; 0x1750 <mount_volume+0x506>
				return FR_WRITE_PROTECTED;
    12b2:	ba e0       	ldi	r27, 0x0A	; 10
    12b4:	2b 2e       	mov	r2, r27
    12b6:	31 2c       	mov	r3, r1
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    12b8:	c1 01       	movw	r24, r2
    12ba:	a0 96       	adiw	r28, 0x20	; 32
    12bc:	e2 e1       	ldi	r30, 0x12	; 18
    12be:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
    12c2:	f8 01       	movw	r30, r16
    12c4:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
    12c6:	c1 82       	std	Z+1, r12	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    12c8:	8c 2d       	mov	r24, r12
    12ca:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	29 2e       	mov	r2, r25
    12d2:	31 2c       	mov	r3, r1
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    12d4:	80 fd       	sbrc	r24, 0
    12d6:	f0 cf       	rjmp	.-32     	; 0x12b8 <mount_volume+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    12d8:	ff 20       	and	r15, r15
    12da:	11 f0       	breq	.+4      	; 0x12e0 <mount_volume+0x96>
    12dc:	82 fd       	sbrc	r24, 2
    12de:	e9 cf       	rjmp	.-46     	; 0x12b2 <mount_volume+0x68>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    12e0:	d8 01       	movw	r26, r16
    12e2:	13 96       	adiw	r26, 0x03	; 3
    12e4:	1c 92       	st	X, r1
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	9f ef       	ldi	r25, 0xFF	; 255
    12ea:	dc 01       	movw	r26, r24
    12ec:	f8 01       	movw	r30, r16
    12ee:	83 a7       	std	Z+43, r24	; 0x2b
    12f0:	94 a7       	std	Z+44, r25	; 0x2c
    12f2:	a5 a7       	std	Z+45, r26	; 0x2d
    12f4:	b6 a7       	std	Z+46, r27	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	ba 01       	movw	r22, r20
    12fc:	c8 01       	movw	r24, r16
    12fe:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
    1302:	1c 01       	movw	r2, r24
    1304:	89 2b       	or	r24, r25
    1306:	09 f0       	breq	.+2      	; 0x130a <mount_volume+0xc0>
    1308:	0f c1       	rjmp	.+542    	; 0x1528 <mount_volume+0x2de>
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <check_fs.part.5>
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	91 05       	cpc	r25, r1
    1314:	09 f0       	breq	.+2      	; 0x1318 <mount_volume+0xce>
    1316:	0c c1       	rjmp	.+536    	; 0x1530 <mount_volume+0x2e6>
    1318:	68 01       	movw	r12, r16
    131a:	fb e0       	ldi	r31, 0x0B	; 11
    131c:	cf 1a       	sub	r12, r31
    131e:	fe ef       	ldi	r31, 0xFE	; 254
    1320:	df 0a       	sbc	r13, r31
    1322:	9e 01       	movw	r18, r28
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	79 01       	movw	r14, r18
    132a:	48 01       	movw	r8, r16
    132c:	3b ec       	ldi	r19, 0xCB	; 203
    132e:	83 1a       	sub	r8, r19
    1330:	3d ef       	ldi	r19, 0xFD	; 253
    1332:	93 0a       	sbc	r9, r19
    1334:	57 01       	movw	r10, r14
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    1336:	c6 01       	movw	r24, r12
    1338:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    133c:	d5 01       	movw	r26, r10
    133e:	6d 93       	st	X+, r22
    1340:	7d 93       	st	X+, r23
    1342:	8d 93       	st	X+, r24
    1344:	9d 93       	st	X+, r25
    1346:	5d 01       	movw	r10, r26
    1348:	b0 e1       	ldi	r27, 0x10	; 16
    134a:	cb 0e       	add	r12, r27
    134c:	d1 1c       	adc	r13, r1
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    134e:	c8 14       	cp	r12, r8
    1350:	d9 04       	cpc	r13, r9
    1352:	89 f7       	brne	.-30     	; 0x1336 <mount_volume+0xec>
    1354:	67 01       	movw	r12, r14
    1356:	e0 e1       	ldi	r30, 0x10	; 16
    1358:	ce 0e       	add	r12, r30
    135a:	d1 1c       	adc	r13, r1
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    135c:	88 24       	eor	r8, r8
    135e:	8a 94       	dec	r8
    1360:	98 2c       	mov	r9, r8
    1362:	54 01       	movw	r10, r8
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    1364:	d7 01       	movw	r26, r14
    1366:	4d 91       	ld	r20, X+
    1368:	5d 91       	ld	r21, X+
    136a:	6d 91       	ld	r22, X+
    136c:	7d 91       	ld	r23, X+
    136e:	7d 01       	movw	r14, r26
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	41 15       	cp	r20, r1
    1376:	51 05       	cpc	r21, r1
    1378:	61 05       	cpc	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <mount_volume+0x136>
    137e:	ce c0       	rjmp	.+412    	; 0x151c <mount_volume+0x2d2>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    1380:	f8 01       	movw	r30, r16
    1382:	13 82       	std	Z+3, r1	; 0x03
    1384:	83 a6       	std	Z+43, r8	; 0x2b
    1386:	94 a6       	std	Z+44, r9	; 0x2c
    1388:	a5 a6       	std	Z+45, r10	; 0x2d
    138a:	b6 a6       	std	Z+46, r11	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    138c:	c8 01       	movw	r24, r16
    138e:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
    1392:	89 2b       	or	r24, r25
    1394:	09 f0       	breq	.+2      	; 0x1398 <mount_volume+0x14e>
    1396:	c0 c0       	rjmp	.+384    	; 0x1518 <mount_volume+0x2ce>
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <check_fs.part.5>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
	} while (part == 0 && fmt >= 2 && ++i < 4);
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <mount_volume+0x15c>
    13a4:	bb c0       	rjmp	.+374    	; 0x151c <mount_volume+0x2d2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    13a6:	f8 01       	movw	r30, r16
    13a8:	82 ad       	ldd	r24, Z+58	; 0x3a
    13aa:	93 ad       	ldd	r25, Z+59	; 0x3b
    13ac:	81 15       	cp	r24, r1
    13ae:	92 40       	sbci	r25, 0x02	; 2
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <mount_volume+0x16a>
    13b2:	c4 c0       	rjmp	.+392    	; 0x153c <mount_volume+0x2f2>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    13b4:	f8 01       	movw	r30, r16
    13b6:	eb 5b       	subi	r30, 0xBB	; 187
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 80       	ld	r8, Z
    13bc:	91 80       	ldd	r9, Z+1	; 0x01
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    13be:	b1 2c       	mov	r11, r1
    13c0:	a1 2c       	mov	r10, r1
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    13c2:	81 14       	cp	r8, r1
    13c4:	91 04       	cpc	r9, r1
    13c6:	39 f4       	brne	.+14     	; 0x13d6 <mount_volume+0x18c>
    13c8:	c8 01       	movw	r24, r16
    13ca:	8d 5a       	subi	r24, 0xAD	; 173
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
	bsect = fs->winsect;					/* Volume offset */
    13d6:	d8 01       	movw	r26, r16
    13d8:	9b 96       	adiw	r26, 0x2b	; 43
    13da:	2d 91       	ld	r18, X+
    13dc:	3d 91       	ld	r19, X+
    13de:	4d 91       	ld	r20, X+
    13e0:	5c 91       	ld	r21, X
    13e2:	9e 97       	sbiw	r26, 0x2e	; 46
    13e4:	2d 8b       	std	Y+21, r18	; 0x15
    13e6:	3e 8b       	std	Y+22, r19	; 0x16
    13e8:	4f 8b       	std	Y+23, r20	; 0x17
    13ea:	58 8f       	std	Y+24, r21	; 0x18
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
    13ec:	f8 01       	movw	r30, r16
    13ee:	87 8a       	std	Z+23, r8	; 0x17
    13f0:	90 8e       	std	Z+24, r9	; 0x18
    13f2:	a1 8e       	std	Z+25, r10	; 0x19
    13f4:	b2 8e       	std	Z+26, r11	; 0x1a

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    13f6:	77 ac       	ldd	r7, Z+63	; 0x3f
    13f8:	72 82       	std	Z+2, r7	; 0x02
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	87 0d       	add	r24, r7
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	08 f0       	brcs	.+2      	; 0x1404 <mount_volume+0x1ba>
    1402:	9c c0       	rjmp	.+312    	; 0x153c <mount_volume+0x2f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    1404:	f4 ad       	ldd	r31, Z+60	; 0x3c
    1406:	f9 8b       	std	Y+17, r31	; 0x11
    1408:	8f 2f       	mov	r24, r31
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	1a 96       	adiw	r26, 0x0a	; 10
    140e:	9c 93       	st	X, r25
    1410:	8e 93       	st	-X, r24
    1412:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	09 f4       	brne	.+2      	; 0x141a <mount_volume+0x1d0>
    1418:	91 c0       	rjmp	.+290    	; 0x153c <mount_volume+0x2f2>
    141a:	9c 01       	movw	r18, r24
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	31 09       	sbc	r19, r1
    1420:	82 23       	and	r24, r18
    1422:	93 23       	and	r25, r19
    1424:	89 2b       	or	r24, r25
    1426:	09 f0       	breq	.+2      	; 0x142a <mount_volume+0x1e0>
    1428:	89 c0       	rjmp	.+274    	; 0x153c <mount_volume+0x2f2>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    142a:	f8 01       	movw	r30, r16
    142c:	e0 5c       	subi	r30, 0xC0	; 192
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	20 81       	ld	r18, Z
    1432:	31 81       	ldd	r19, Z+1	; 0x01
    1434:	3c 8b       	std	Y+20, r19	; 0x14
    1436:	2b 8b       	std	Y+19, r18	; 0x13
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1438:	18 96       	adiw	r26, 0x08	; 8
    143a:	3c 93       	st	X, r19
    143c:	2e 93       	st	-X, r18
    143e:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1440:	c9 01       	movw	r24, r18
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	99 27       	eor	r25, r25
    1446:	89 2b       	or	r24, r25
    1448:	09 f0       	breq	.+2      	; 0x144c <mount_volume+0x202>
    144a:	78 c0       	rjmp	.+240    	; 0x153c <mount_volume+0x2f2>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    144c:	32 96       	adiw	r30, 0x02	; 2
    144e:	c0 80       	ld	r12, Z
    1450:	d1 80       	ldd	r13, Z+1	; 0x01
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    1452:	f1 2c       	mov	r15, r1
    1454:	e1 2c       	mov	r14, r1
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1456:	c1 14       	cp	r12, r1
    1458:	d1 04       	cpc	r13, r1
    145a:	39 f4       	brne	.+14     	; 0x146a <mount_volume+0x220>
    145c:	c8 01       	movw	r24, r16
    145e:	81 5b       	subi	r24, 0xB1	; 177
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1466:	6b 01       	movw	r12, r22
    1468:	7c 01       	movw	r14, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    146a:	d8 01       	movw	r26, r16
    146c:	dd 96       	adiw	r26, 0x3d	; 61
    146e:	ed 91       	ld	r30, X+
    1470:	fc 91       	ld	r31, X

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    1472:	30 97       	sbiw	r30, 0x00	; 0
    1474:	09 f4       	brne	.+2      	; 0x1478 <mount_volume+0x22e>
    1476:	62 c0       	rjmp	.+196    	; 0x153c <mount_volume+0x2f2>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    1478:	a7 2d       	mov	r26, r7
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	a5 01       	movw	r20, r10
    147e:	94 01       	movw	r18, r8
    1480:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__muluhisi3>
    1484:	6d 8f       	std	Y+29, r22	; 0x1d
    1486:	7e 8f       	std	Y+30, r23	; 0x1e
    1488:	8f 8f       	std	Y+31, r24	; 0x1f
    148a:	98 a3       	std	Y+32, r25	; 0x20

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    148c:	9f 01       	movw	r18, r30
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	29 8f       	std	Y+25, r18	; 0x19
    1494:	3a 8f       	std	Y+26, r19	; 0x1a
    1496:	4b 8f       	std	Y+27, r20	; 0x1b
    1498:	5c 8f       	std	Y+28, r21	; 0x1c
    149a:	8b 89       	ldd	r24, Y+19	; 0x13
    149c:	9c 89       	ldd	r25, Y+20	; 0x14
    149e:	e4 e0       	ldi	r30, 0x04	; 4
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	ea 95       	dec	r30
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <mount_volume+0x256>
    14a8:	29 01       	movw	r4, r18
    14aa:	3a 01       	movw	r6, r20
    14ac:	48 0e       	add	r4, r24
    14ae:	59 1e       	adc	r5, r25
    14b0:	61 1c       	adc	r6, r1
    14b2:	71 1c       	adc	r7, r1
    14b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14b8:	af 8d       	ldd	r26, Y+31	; 0x1f
    14ba:	b8 a1       	ldd	r27, Y+32	; 0x20
    14bc:	48 0e       	add	r4, r24
    14be:	59 1e       	adc	r5, r25
    14c0:	6a 1e       	adc	r6, r26
    14c2:	7b 1e       	adc	r7, r27
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    14c4:	c4 14       	cp	r12, r4
    14c6:	d5 04       	cpc	r13, r5
    14c8:	e6 04       	cpc	r14, r6
    14ca:	f7 04       	cpc	r15, r7
    14cc:	b8 f1       	brcs	.+110    	; 0x153c <mount_volume+0x2f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    14ce:	c7 01       	movw	r24, r14
    14d0:	b6 01       	movw	r22, r12
    14d2:	64 19       	sub	r22, r4
    14d4:	75 09       	sbc	r23, r5
    14d6:	86 09       	sbc	r24, r6
    14d8:	97 09       	sbc	r25, r7
    14da:	a9 89       	ldd	r26, Y+17	; 0x11
    14dc:	2a 2f       	mov	r18, r26
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    14e8:	21 15       	cp	r18, r1
    14ea:	31 05       	cpc	r19, r1
    14ec:	41 05       	cpc	r20, r1
    14ee:	51 05       	cpc	r21, r1
    14f0:	29 f1       	breq	.+74     	; 0x153c <mount_volume+0x2f2>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    14f2:	26 3f       	cpi	r18, 0xF6	; 246
    14f4:	bf ef       	ldi	r27, 0xFF	; 255
    14f6:	3b 07       	cpc	r19, r27
    14f8:	4b 07       	cpc	r20, r27
    14fa:	bf e0       	ldi	r27, 0x0F	; 15
    14fc:	5b 07       	cpc	r21, r27
    14fe:	f0 f4       	brcc	.+60     	; 0x153c <mount_volume+0x2f2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1500:	26 3f       	cpi	r18, 0xF6	; 246
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	39 07       	cpc	r19, r25
    1506:	41 05       	cpc	r20, r1
    1508:	51 05       	cpc	r21, r1
    150a:	08 f4       	brcc	.+2      	; 0x150e <mount_volume+0x2c4>
    150c:	24 c1       	rjmp	.+584    	; 0x1756 <mount_volume+0x50c>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    150e:	a3 e0       	ldi	r26, 0x03	; 3
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ba 8b       	std	Y+18, r27	; 0x12
    1514:	a9 8b       	std	Y+17, r26	; 0x11
    1516:	1a c0       	rjmp	.+52     	; 0x154c <mount_volume+0x302>
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	90 e0       	ldi	r25, 0x00	; 0
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
	} while (part == 0 && fmt >= 2 && ++i < 4);
    151c:	ce 14       	cp	r12, r14
    151e:	df 04       	cpc	r13, r15
    1520:	09 f0       	breq	.+2      	; 0x1524 <mount_volume+0x2da>
    1522:	20 cf       	rjmp	.-448    	; 0x1364 <mount_volume+0x11a>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1524:	04 97       	sbiw	r24, 0x04	; 4
    1526:	51 f4       	brne	.+20     	; 0x153c <mount_volume+0x2f2>
    1528:	22 24       	eor	r2, r2
    152a:	23 94       	inc	r2
    152c:	31 2c       	mov	r3, r1
    152e:	c4 ce       	rjmp	.-632    	; 0x12b8 <mount_volume+0x6e>
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	91 05       	cpc	r25, r1
    1534:	c9 f3       	breq	.-14     	; 0x1528 <mount_volume+0x2de>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    1536:	02 97       	sbiw	r24, 0x02	; 2
    1538:	08 f4       	brcc	.+2      	; 0x153c <mount_volume+0x2f2>
    153a:	35 cf       	rjmp	.-406    	; 0x13a6 <mount_volume+0x15c>
    153c:	fd e0       	ldi	r31, 0x0D	; 13
    153e:	2f 2e       	mov	r2, r31
    1540:	31 2c       	mov	r3, r1
    1542:	ba ce       	rjmp	.-652    	; 0x12b8 <mount_volume+0x6e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1544:	e1 e0       	ldi	r30, 0x01	; 1
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	fa 8b       	std	Y+18, r31	; 0x12
    154a:	e9 8b       	std	Y+17, r30	; 0x11
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    154c:	69 01       	movw	r12, r18
    154e:	7a 01       	movw	r14, r20
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	cf 0e       	add	r12, r31
    1554:	d1 1c       	adc	r13, r1
    1556:	e1 1c       	adc	r14, r1
    1558:	f1 1c       	adc	r15, r1
    155a:	d8 01       	movw	r26, r16
    155c:	53 96       	adiw	r26, 0x13	; 19
    155e:	cd 92       	st	X+, r12
    1560:	dd 92       	st	X+, r13
    1562:	ed 92       	st	X+, r14
    1564:	fc 92       	st	X, r15
    1566:	56 97       	sbiw	r26, 0x16	; 22
		fs->volbase = bsect;							/* Volume start sector */
    1568:	2d 89       	ldd	r18, Y+21	; 0x15
    156a:	3e 89       	ldd	r19, Y+22	; 0x16
    156c:	4f 89       	ldd	r20, Y+23	; 0x17
    156e:	58 8d       	ldd	r21, Y+24	; 0x18
    1570:	5b 96       	adiw	r26, 0x1b	; 27
    1572:	2d 93       	st	X+, r18
    1574:	3d 93       	st	X+, r19
    1576:	4d 93       	st	X+, r20
    1578:	5c 93       	st	X, r21
    157a:	5e 97       	sbiw	r26, 0x1e	; 30
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    157c:	89 8d       	ldd	r24, Y+25	; 0x19
    157e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1580:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1582:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1584:	82 0f       	add	r24, r18
    1586:	93 1f       	adc	r25, r19
    1588:	a4 1f       	adc	r26, r20
    158a:	b5 1f       	adc	r27, r21
    158c:	f8 01       	movw	r30, r16
    158e:	87 8f       	std	Z+31, r24	; 0x1f
    1590:	90 a3       	std	Z+32, r25	; 0x20
    1592:	a1 a3       	std	Z+33, r26	; 0x21
    1594:	b2 a3       	std	Z+34, r27	; 0x22
		fs->database = bsect + sysect;					/* Data start sector */
    1596:	42 0e       	add	r4, r18
    1598:	53 1e       	adc	r5, r19
    159a:	64 1e       	adc	r6, r20
    159c:	75 1e       	adc	r7, r21
    159e:	47 a2       	std	Z+39, r4	; 0x27
    15a0:	50 a6       	std	Z+40, r5	; 0x28
    15a2:	61 a6       	std	Z+41, r6	; 0x29
    15a4:	72 a6       	std	Z+42, r7	; 0x2a
		if (fmt == FS_FAT32) {
    15a6:	29 89       	ldd	r18, Y+17	; 0x11
    15a8:	3a 89       	ldd	r19, Y+18	; 0x12
    15aa:	23 30       	cpi	r18, 0x03	; 3
    15ac:	31 05       	cpc	r19, r1
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <mount_volume+0x368>
    15b0:	9f c0       	rjmp	.+318    	; 0x16f0 <mount_volume+0x4a6>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    15b2:	e7 5a       	subi	r30, 0xA7	; 167
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
		fs->volbase = bsect;							/* Volume start sector */
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
		fs->database = bsect + sysect;					/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	89 2b       	or	r24, r25
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <mount_volume+0x376>
    15be:	be cf       	rjmp	.-132    	; 0x153c <mount_volume+0x2f2>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    15c0:	4b 89       	ldd	r20, Y+19	; 0x13
    15c2:	5c 89       	ldd	r21, Y+20	; 0x14
    15c4:	45 2b       	or	r20, r21
    15c6:	09 f0       	breq	.+2      	; 0x15ca <mount_volume+0x380>
    15c8:	b9 cf       	rjmp	.-142    	; 0x153c <mount_volume+0x2f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    15ca:	c8 01       	movw	r24, r16
    15cc:	85 5a       	subi	r24, 0xA5	; 165
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    15d4:	d8 01       	movw	r26, r16
    15d6:	93 96       	adiw	r26, 0x23	; 35
    15d8:	6d 93       	st	X+, r22
    15da:	7d 93       	st	X+, r23
    15dc:	8d 93       	st	X+, r24
    15de:	9c 93       	st	X, r25
    15e0:	96 97       	sbiw	r26, 0x26	; 38
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    15e2:	72 e0       	ldi	r23, 0x02	; 2
    15e4:	cc 0c       	add	r12, r12
    15e6:	dd 1c       	adc	r13, r13
    15e8:	ee 1c       	adc	r14, r14
    15ea:	ff 1c       	adc	r15, r15
    15ec:	7a 95       	dec	r23
    15ee:	d1 f7       	brne	.-12     	; 0x15e4 <mount_volume+0x39a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    15f0:	4f ef       	ldi	r20, 0xFF	; 255
    15f2:	c4 0e       	add	r12, r20
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	d4 1e       	adc	r13, r20
    15f8:	e1 1c       	adc	r14, r1
    15fa:	f1 1c       	adc	r15, r1
    15fc:	49 e0       	ldi	r20, 0x09	; 9
    15fe:	f6 94       	lsr	r15
    1600:	e7 94       	ror	r14
    1602:	d7 94       	ror	r13
    1604:	c7 94       	ror	r12
    1606:	4a 95       	dec	r20
    1608:	d1 f7       	brne	.-12     	; 0x15fe <mount_volume+0x3b4>
    160a:	8c 14       	cp	r8, r12
    160c:	9d 04       	cpc	r9, r13
    160e:	ae 04       	cpc	r10, r14
    1610:	bf 04       	cpc	r11, r15
    1612:	08 f4       	brcc	.+2      	; 0x1616 <mount_volume+0x3cc>
    1614:	93 cf       	rjmp	.-218    	; 0x153c <mount_volume+0x2f2>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	9f ef       	ldi	r25, 0xFF	; 255
    161a:	dc 01       	movw	r26, r24
    161c:	f8 01       	movw	r30, r16
    161e:	87 87       	std	Z+15, r24	; 0x0f
    1620:	90 8b       	std	Z+16, r25	; 0x10
    1622:	a1 8b       	std	Z+17, r26	; 0x11
    1624:	b2 8b       	std	Z+18, r27	; 0x12
    1626:	83 87       	std	Z+11, r24	; 0x0b
    1628:	94 87       	std	Z+12, r25	; 0x0c
    162a:	a5 87       	std	Z+13, r26	; 0x0d
    162c:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    162e:	80 e8       	ldi	r24, 0x80	; 128
    1630:	84 83       	std	Z+4, r24	; 0x04
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    1632:	29 89       	ldd	r18, Y+17	; 0x11
    1634:	3a 89       	ldd	r19, Y+18	; 0x12
    1636:	23 30       	cpi	r18, 0x03	; 3
    1638:	31 05       	cpc	r19, r1
    163a:	09 f0       	breq	.+2      	; 0x163e <mount_volume+0x3f4>
    163c:	48 c0       	rjmp	.+144    	; 0x16ce <mount_volume+0x484>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    163e:	e1 5a       	subi	r30, 0xA1	; 161
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <mount_volume+0x402>
    164a:	41 c0       	rjmp	.+130    	; 0x16ce <mount_volume+0x484>
			&& move_window(fs, bsect + 1) == FR_OK)
    164c:	4d 89       	ldd	r20, Y+21	; 0x15
    164e:	5e 89       	ldd	r21, Y+22	; 0x16
    1650:	6f 89       	ldd	r22, Y+23	; 0x17
    1652:	78 8d       	ldd	r23, Y+24	; 0x18
    1654:	4f 5f       	subi	r20, 0xFF	; 255
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	6f 4f       	sbci	r22, 0xFF	; 255
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	c8 01       	movw	r24, r16
    165e:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
    1662:	89 2b       	or	r24, r25
    1664:	a1 f5       	brne	.+104    	; 0x16ce <mount_volume+0x484>
		{
			fs->fsi_flag = 0;
    1666:	d8 01       	movw	r26, r16
    1668:	14 96       	adiw	r26, 0x04	; 4
    166a:	1c 92       	st	X, r1
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    166c:	f8 01       	movw	r30, r16
    166e:	e3 5d       	subi	r30, 0xD3	; 211
    1670:	fd 4f       	sbci	r31, 0xFD	; 253
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	85 35       	cpi	r24, 0x55	; 85
    1678:	9a 4a       	sbci	r25, 0xAA	; 170
    167a:	49 f5       	brne	.+82     	; 0x16ce <mount_volume+0x484>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    167c:	c8 01       	movw	r24, r16
    167e:	8f 96       	adiw	r24, 0x2f	; 47
    1680:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1684:	62 35       	cpi	r22, 0x52	; 82
    1686:	72 45       	sbci	r23, 0x52	; 82
    1688:	81 46       	sbci	r24, 0x61	; 97
    168a:	91 44       	sbci	r25, 0x41	; 65
    168c:	01 f5       	brne	.+64     	; 0x16ce <mount_volume+0x484>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    168e:	c8 01       	movw	r24, r16
    1690:	8d 5e       	subi	r24, 0xED	; 237
    1692:	9d 4f       	sbci	r25, 0xFD	; 253
    1694:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1698:	62 37       	cpi	r22, 0x72	; 114
    169a:	72 47       	sbci	r23, 0x72	; 114
    169c:	81 44       	sbci	r24, 0x41	; 65
    169e:	91 46       	sbci	r25, 0x61	; 97
    16a0:	b1 f4       	brne	.+44     	; 0x16ce <mount_volume+0x484>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    16a2:	c8 01       	movw	r24, r16
    16a4:	89 5e       	subi	r24, 0xE9	; 233
    16a6:	9d 4f       	sbci	r25, 0xFD	; 253
    16a8:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    16ac:	d8 01       	movw	r26, r16
    16ae:	1f 96       	adiw	r26, 0x0f	; 15
    16b0:	6d 93       	st	X+, r22
    16b2:	7d 93       	st	X+, r23
    16b4:	8d 93       	st	X+, r24
    16b6:	9c 93       	st	X, r25
    16b8:	52 97       	sbiw	r26, 0x12	; 18
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    16ba:	c8 01       	movw	r24, r16
    16bc:	85 5e       	subi	r24, 0xE5	; 229
    16be:	9d 4f       	sbci	r25, 0xFD	; 253
    16c0:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    16c4:	f8 01       	movw	r30, r16
    16c6:	63 87       	std	Z+11, r22	; 0x0b
    16c8:	74 87       	std	Z+12, r23	; 0x0c
    16ca:	85 87       	std	Z+13, r24	; 0x0d
    16cc:	96 87       	std	Z+14, r25	; 0x0e
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
    16ce:	e9 89       	ldd	r30, Y+17	; 0x11
    16d0:	d8 01       	movw	r26, r16
    16d2:	ec 93       	st	X, r30
	fs->id = ++Fsid;		/* Volume mount ID */
    16d4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    16d8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    16e2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
    16e6:	16 96       	adiw	r26, 0x06	; 6
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
    16ec:	15 97       	sbiw	r26, 0x05	; 5
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    16ee:	e4 cd       	rjmp	.-1080   	; 0x12b8 <mount_volume+0x6e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    16f0:	eb 89       	ldd	r30, Y+19	; 0x13
    16f2:	fc 89       	ldd	r31, Y+20	; 0x14
    16f4:	ef 2b       	or	r30, r31
    16f6:	09 f4       	brne	.+2      	; 0x16fa <mount_volume+0x4b0>
    16f8:	21 cf       	rjmp	.-446    	; 0x153c <mount_volume+0x2f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    16fa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16fc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16fe:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1700:	58 a1       	ldd	r21, Y+32	; 0x20
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	a4 1f       	adc	r26, r20
    1708:	b5 1f       	adc	r27, r21
    170a:	f8 01       	movw	r30, r16
    170c:	83 a3       	std	Z+35, r24	; 0x23
    170e:	94 a3       	std	Z+36, r25	; 0x24
    1710:	a5 a3       	std	Z+37, r26	; 0x25
    1712:	b6 a3       	std	Z+38, r27	; 0x26
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1714:	29 89       	ldd	r18, Y+17	; 0x11
    1716:	3a 89       	ldd	r19, Y+18	; 0x12
    1718:	22 30       	cpi	r18, 0x02	; 2
    171a:	31 05       	cpc	r19, r1
    171c:	29 f4       	brne	.+10     	; 0x1728 <mount_volume+0x4de>
    171e:	cc 0c       	add	r12, r12
    1720:	dd 1c       	adc	r13, r13
    1722:	ee 1c       	adc	r14, r14
    1724:	ff 1c       	adc	r15, r15
    1726:	64 cf       	rjmp	.-312    	; 0x15f0 <mount_volume+0x3a6>
    1728:	a3 e0       	ldi	r26, 0x03	; 3
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	a7 01       	movw	r20, r14
    172e:	96 01       	movw	r18, r12
    1730:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__muluhisi3>
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	31 e0       	ldi	r19, 0x01	; 1
    173e:	c3 22       	and	r12, r19
    1740:	dd 24       	eor	r13, r13
    1742:	ee 24       	eor	r14, r14
    1744:	ff 24       	eor	r15, r15
    1746:	c6 0e       	add	r12, r22
    1748:	d7 1e       	adc	r13, r23
    174a:	e8 1e       	adc	r14, r24
    174c:	f9 1e       	adc	r15, r25
    174e:	50 cf       	rjmp	.-352    	; 0x15f0 <mount_volume+0x3a6>
		stat = disk_status(fs->pdrv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
    1750:	31 2c       	mov	r3, r1
    1752:	21 2c       	mov	r2, r1
    1754:	b1 cd       	rjmp	.-1182   	; 0x12b8 <mount_volume+0x6e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1756:	26 3f       	cpi	r18, 0xF6	; 246
    1758:	ff e0       	ldi	r31, 0x0F	; 15
    175a:	3f 07       	cpc	r19, r31
    175c:	41 05       	cpc	r20, r1
    175e:	51 05       	cpc	r21, r1
    1760:	08 f4       	brcc	.+2      	; 0x1764 <mount_volume+0x51a>
    1762:	f0 ce       	rjmp	.-544    	; 0x1544 <mount_volume+0x2fa>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9a 8b       	std	Y+18, r25	; 0x12
    176a:	89 8b       	std	Y+17, r24	; 0x11
    176c:	ef ce       	rjmp	.-546    	; 0x154c <mount_volume+0x302>

0000176e <get_achar>:


static DWORD get_achar (	/* Get a character and advance ptr */
	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	dc 01       	movw	r26, r24
	chr = tchar2uni(ptr);
	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
	chr = ff_wtoupper(chr);

#else									/* ANSI/OEM input */
	chr = (BYTE)*(*ptr)++;				/* Get a byte */
    1774:	ed 91       	ld	r30, X+
    1776:	fc 91       	ld	r31, X
    1778:	11 97       	sbiw	r26, 0x01	; 1
    177a:	cf 01       	movw	r24, r30
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	11 96       	adiw	r26, 0x01	; 1
    1780:	9c 93       	st	X, r25
    1782:	8e 93       	st	-X, r24
    1784:	60 81       	ld	r22, Z
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
    178c:	8b 01       	movw	r16, r22
    178e:	9c 01       	movw	r18, r24
    1790:	01 56       	subi	r16, 0x61	; 97
    1792:	11 09       	sbc	r17, r1
    1794:	21 09       	sbc	r18, r1
    1796:	31 09       	sbc	r19, r1
    1798:	0a 31       	cpi	r16, 0x1A	; 26
    179a:	11 05       	cpc	r17, r1
    179c:	21 05       	cpc	r18, r1
    179e:	31 05       	cpc	r19, r1
    17a0:	20 f4       	brcc	.+8      	; 0x17aa <get_achar+0x3c>
    17a2:	60 52       	subi	r22, 0x20	; 32
    17a4:	71 09       	sbc	r23, r1
    17a6:	81 09       	sbc	r24, r1
    17a8:	91 09       	sbc	r25, r1
	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#elif FF_CODE_PAGE < 900
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#endif
#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
    17aa:	26 2f       	mov	r18, r22
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
    17ac:	61 38       	cpi	r22, 0x81	; 129
    17ae:	c8 f0       	brcs	.+50     	; 0x17e2 <get_achar+0x74>
		if (c <= DbcTbl[1]) return 1;
    17b0:	60 3a       	cpi	r22, 0xA0	; 160
    17b2:	18 f0       	brcs	.+6      	; 0x17ba <get_achar+0x4c>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
    17b4:	20 5e       	subi	r18, 0xE0	; 224
    17b6:	2d 31       	cpi	r18, 0x1D	; 29
    17b8:	a0 f4       	brcc	.+40     	; 0x17e2 <get_achar+0x74>
#elif FF_CODE_PAGE < 900
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#endif
#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
    17ba:	21 81       	ldd	r18, Z+1	; 0x01
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
    17bc:	20 34       	cpi	r18, 0x40	; 64
    17be:	a0 f0       	brcs	.+40     	; 0x17e8 <get_achar+0x7a>
		if (c <= DbcTbl[5]) return 1;
    17c0:	2f 37       	cpi	r18, 0x7F	; 127
    17c2:	20 f0       	brcs	.+8      	; 0x17cc <get_achar+0x5e>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
    17c4:	27 ff       	sbrs	r18, 7
    17c6:	10 c0       	rjmp	.+32     	; 0x17e8 <get_achar+0x7a>
    17c8:	2d 3f       	cpi	r18, 0xFD	; 253
    17ca:	70 f4       	brcc	.+28     	; 0x17e8 <get_achar+0x7a>
#elif FF_CODE_PAGE < 900
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#endif
#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
    17cc:	9f 01       	movw	r18, r30
    17ce:	2e 5f       	subi	r18, 0xFE	; 254
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	2d 93       	st	X+, r18
    17d4:	3c 93       	st	X, r19
    17d6:	98 2f       	mov	r25, r24
    17d8:	87 2f       	mov	r24, r23
    17da:	76 2f       	mov	r23, r22
    17dc:	66 27       	eor	r22, r22
    17de:	21 81       	ldd	r18, Z+1	; 0x01
    17e0:	62 2b       	or	r22, r18
	}
#endif

#endif
	return chr;
}
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret
#elif FF_CODE_PAGE < 900
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
#endif
#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	cb 01       	movw	r24, r22
	}
#endif

#endif
	return chr;
    17ee:	f9 cf       	rjmp	.-14     	; 0x17e2 <get_achar+0x74>

000017f0 <pattern_match>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	UINT skip,			/* Number of pre-skip chars (number of ?s, b8:infinite (* specified)) */
	UINT recur			/* Recursion count */
)
{
    17f0:	a6 e0       	ldi	r26, 0x06	; 6
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ee ef       	ldi	r30, 0xFE	; 254
    17f6:	fb e0       	ldi	r31, 0x0B	; 11
    17f8:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    17fc:	5c 01       	movw	r10, r24
    17fe:	7e 83       	std	Y+6, r23	; 0x06
    1800:	6d 83       	std	Y+5, r22	; 0x05
    1802:	8a 01       	movw	r16, r20
    1804:	49 01       	movw	r8, r18
	const TCHAR *pptr, *nptr;
	DWORD pchr, nchr;
	UINT sk;


	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
    1806:	01 11       	cpse	r16, r1
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <pattern_match+0x34>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
		skip--;
	}
	if (*pat == 0 && skip) return 1;	/* Matched? (short circuit) */
    180a:	f5 01       	movw	r30, r10
    180c:	80 81       	ld	r24, Z
    180e:	81 11       	cpse	r24, r1
    1810:	15 c0       	rjmp	.+42     	; 0x183c <pattern_match+0x4c>
    1812:	01 15       	cp	r16, r1
    1814:	11 05       	cpc	r17, r1
    1816:	91 f0       	breq	.+36     	; 0x183c <pattern_match+0x4c>
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
		}
		get_achar(&nam);			/* nam++ */
	} while (skip && nchr);		/* Retry until end of name if infinite search is specified */

	return 0;
}
    181c:	26 96       	adiw	r28, 0x06	; 6
    181e:	e2 e1       	ldi	r30, 0x12	; 18
    1820:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
	DWORD pchr, nchr;
	UINT sk;


	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
    1824:	ce 01       	movw	r24, r28
    1826:	05 96       	adiw	r24, 0x05	; 5
    1828:	0e 94 b7 0b 	call	0x176e	; 0x176e <get_achar>
    182c:	67 2b       	or	r22, r23
    182e:	68 2b       	or	r22, r24
    1830:	69 2b       	or	r22, r25
    1832:	09 f4       	brne	.+2      	; 0x1836 <pattern_match+0x46>
    1834:	44 c0       	rjmp	.+136    	; 0x18be <pattern_match+0xce>
		skip--;
    1836:	01 50       	subi	r16, 0x01	; 1
    1838:	11 09       	sbc	r17, r1
    183a:	e5 cf       	rjmp	.-54     	; 0x1806 <pattern_match+0x16>
				if (recur == 0) return 0;	/* Too many wildcard terms? */
				sk = 0;
				do {	/* Analyze the wildcard term */
					if (*pptr++ == '?') sk++; else sk |= 0x100;
				} while (*pptr == '?' || *pptr == '*');
				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
    183c:	14 01       	movw	r2, r8
    183e:	f1 e0       	ldi	r31, 0x01	; 1
    1840:	2f 1a       	sub	r2, r31
    1842:	31 08       	sbc	r3, r1
		skip--;
	}
	if (*pat == 0 && skip) return 1;	/* Matched? (short circuit) */

	do {
		pptr = pat; nptr = nam;			/* Top of pattern and name to match */
    1844:	bc 82       	std	Y+4, r11	; 0x04
    1846:	ab 82       	std	Y+3, r10	; 0x03
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
		for (;;) {
			if (*pptr == '?' || *pptr == '*') {	/* Wildcard term? */
    1850:	eb 81       	ldd	r30, Y+3	; 0x03
    1852:	fc 81       	ldd	r31, Y+4	; 0x04
    1854:	80 81       	ld	r24, Z
    1856:	8f 33       	cpi	r24, 0x3F	; 63
    1858:	11 f0       	breq	.+4      	; 0x185e <pattern_match+0x6e>
    185a:	8a 32       	cpi	r24, 0x2A	; 42
    185c:	a9 f5       	brne	.+106    	; 0x18c8 <pattern_match+0xd8>
				if (recur == 0) return 0;	/* Too many wildcard terms? */
    185e:	81 14       	cp	r8, r1
    1860:	91 04       	cpc	r9, r1
    1862:	69 f1       	breq	.+90     	; 0x18be <pattern_match+0xce>
				sk = 0;
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
				do {	/* Analyze the wildcard term */
					if (*pptr++ == '?') sk++; else sk |= 0x100;
    1868:	eb 81       	ldd	r30, Y+3	; 0x03
    186a:	fc 81       	ldd	r31, Y+4	; 0x04
    186c:	cf 01       	movw	r24, r30
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	20 81       	ld	r18, Z
    1876:	2f 33       	cpi	r18, 0x3F	; 63
    1878:	29 f5       	brne	.+74     	; 0x18c4 <pattern_match+0xd4>
    187a:	4f 5f       	subi	r20, 0xFF	; 255
    187c:	5f 4f       	sbci	r21, 0xFF	; 255
				} while (*pptr == '?' || *pptr == '*');
    187e:	21 81       	ldd	r18, Z+1	; 0x01
    1880:	2f 33       	cpi	r18, 0x3F	; 63
    1882:	91 f3       	breq	.-28     	; 0x1868 <pattern_match+0x78>
    1884:	2a 32       	cpi	r18, 0x2A	; 42
    1886:	81 f3       	breq	.-32     	; 0x1868 <pattern_match+0x78>
				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
    1888:	69 81       	ldd	r22, Y+1	; 0x01
    188a:	7a 81       	ldd	r23, Y+2	; 0x02
    188c:	91 01       	movw	r18, r2
    188e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <pattern_match>
    1892:	89 2b       	or	r24, r25
    1894:	09 f6       	brne	.-126    	; 0x1818 <pattern_match+0x28>
				nchr = *nptr; break;	/* Branch mismatched */
    1896:	e9 81       	ldd	r30, Y+1	; 0x01
    1898:	fa 81       	ldd	r31, Y+2	; 0x02
    189a:	c0 80       	ld	r12, Z
    189c:	0c 2c       	mov	r0, r12
    189e:	00 0c       	add	r0, r0
    18a0:	dd 08       	sbc	r13, r13
    18a2:	ee 08       	sbc	r14, r14
    18a4:	ff 08       	sbc	r15, r15
			pchr = get_achar(&pptr);	/* Get a pattern char */
			nchr = get_achar(&nptr);	/* Get a name char */
			if (pchr != nchr) break;	/* Branch mismatched? */
			if (pchr == 0) return 1;	/* Branch matched? (matched at end of both strings) */
		}
		get_achar(&nam);			/* nam++ */
    18a6:	ce 01       	movw	r24, r28
    18a8:	05 96       	adiw	r24, 0x05	; 5
    18aa:	0e 94 b7 0b 	call	0x176e	; 0x176e <get_achar>
	} while (skip && nchr);		/* Retry until end of name if infinite search is specified */
    18ae:	01 15       	cp	r16, r1
    18b0:	11 05       	cpc	r17, r1
    18b2:	29 f0       	breq	.+10     	; 0x18be <pattern_match+0xce>
    18b4:	c1 14       	cp	r12, r1
    18b6:	d1 04       	cpc	r13, r1
    18b8:	e1 04       	cpc	r14, r1
    18ba:	f1 04       	cpc	r15, r1
    18bc:	19 f6       	brne	.-122    	; 0x1844 <pattern_match+0x54>
	DWORD pchr, nchr;
	UINT sk;


	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	ac cf       	rjmp	.-168    	; 0x181c <pattern_match+0x2c>
		for (;;) {
			if (*pptr == '?' || *pptr == '*') {	/* Wildcard term? */
				if (recur == 0) return 0;	/* Too many wildcard terms? */
				sk = 0;
				do {	/* Analyze the wildcard term */
					if (*pptr++ == '?') sk++; else sk |= 0x100;
    18c4:	51 60       	ori	r21, 0x01	; 1
    18c6:	db cf       	rjmp	.-74     	; 0x187e <pattern_match+0x8e>
				} while (*pptr == '?' || *pptr == '*');
				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
				nchr = *nptr; break;	/* Branch mismatched */
			}
			pchr = get_achar(&pptr);	/* Get a pattern char */
    18c8:	ce 01       	movw	r24, r28
    18ca:	03 96       	adiw	r24, 0x03	; 3
    18cc:	0e 94 b7 0b 	call	0x176e	; 0x176e <get_achar>
    18d0:	2b 01       	movw	r4, r22
    18d2:	3c 01       	movw	r6, r24
			nchr = get_achar(&nptr);	/* Get a name char */
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	0e 94 b7 0b 	call	0x176e	; 0x176e <get_achar>
    18dc:	6b 01       	movw	r12, r22
    18de:	7c 01       	movw	r14, r24
			if (pchr != nchr) break;	/* Branch mismatched? */
    18e0:	4c 14       	cp	r4, r12
    18e2:	5d 04       	cpc	r5, r13
    18e4:	6e 04       	cpc	r6, r14
    18e6:	7f 04       	cpc	r7, r15
    18e8:	f1 f6       	brne	.-68     	; 0x18a6 <pattern_match+0xb6>
			if (pchr == 0) return 1;	/* Branch matched? (matched at end of both strings) */
    18ea:	41 14       	cp	r4, r1
    18ec:	51 04       	cpc	r5, r1
    18ee:	61 04       	cpc	r6, r1
    18f0:	71 04       	cpc	r7, r1
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <pattern_match+0x106>
    18f4:	ad cf       	rjmp	.-166    	; 0x1850 <pattern_match+0x60>
    18f6:	90 cf       	rjmp	.-224    	; 0x1818 <pattern_match+0x28>

000018f8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
)
{
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	81 11       	cpse	r24, r1
    1906:	63 c0       	rjmp	.+198    	; 0x19ce <sync_fs+0xd6>
	FRESULT res;


	res = sync_window(fs);
	if (res == FR_OK) {
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    1908:	88 81       	ld	r24, Y
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	09 f0       	breq	.+2      	; 0x1910 <sync_fs+0x18>
    190e:	51 c0       	rjmp	.+162    	; 0x19b2 <sync_fs+0xba>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	09 f0       	breq	.+2      	; 0x1918 <sync_fs+0x20>
    1916:	4d c0       	rjmp	.+154    	; 0x19b2 <sync_fs+0xba>
    1918:	89 81       	ldd	r24, Y+1	; 0x01
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	32 e0       	ldi	r19, 0x02	; 2
    191e:	be 01       	movw	r22, r28
    1920:	61 5d       	subi	r22, 0xD1	; 209
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	fb 01       	movw	r30, r22
    1926:	a9 01       	movw	r20, r18
    1928:	11 92       	st	Z+, r1
    192a:	41 50       	subi	r20, 0x01	; 1
    192c:	50 40       	sbci	r21, 0x00	; 0
    192e:	e1 f7       	brne	.-8      	; 0x1928 <sync_fs+0x30>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1930:	95 e5       	ldi	r25, 0x55	; 85
    1932:	fe 01       	movw	r30, r28
    1934:	e3 5d       	subi	r30, 0xD3	; 211
    1936:	fd 4f       	sbci	r31, 0xFD	; 253
    1938:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    193a:	9a ea       	ldi	r25, 0xAA	; 170
    193c:	31 96       	adiw	r30, 0x01	; 1
    193e:	90 83       	st	Z, r25
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1940:	92 e5       	ldi	r25, 0x52	; 82
    1942:	9f a7       	std	Y+47, r25	; 0x2f
	*ptr++ = (BYTE)val; val >>= 8;
    1944:	98 ab       	std	Y+48, r25	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    1946:	91 e6       	ldi	r25, 0x61	; 97
    1948:	99 ab       	std	Y+49, r25	; 0x31
	*ptr++ = (BYTE)val;
    194a:	21 e4       	ldi	r18, 0x41	; 65
    194c:	2a ab       	std	Y+50, r18	; 0x32
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    194e:	32 e7       	ldi	r19, 0x72	; 114
    1950:	7b 97       	sbiw	r30, 0x1b	; 27
    1952:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1954:	31 96       	adiw	r30, 0x01	; 1
    1956:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1958:	31 96       	adiw	r30, 0x01	; 1
    195a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val;
    195c:	31 96       	adiw	r30, 0x01	; 1
    195e:	90 83       	st	Z, r25
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    1960:	4f 85       	ldd	r20, Y+15	; 0x0f
    1962:	38 89       	ldd	r19, Y+16	; 0x10
    1964:	29 89       	ldd	r18, Y+17	; 0x11
    1966:	9a 89       	ldd	r25, Y+18	; 0x12
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	40 83       	st	Z, r20
	*ptr++ = (BYTE)val; val >>= 8;
    196c:	31 96       	adiw	r30, 0x01	; 1
    196e:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1970:	31 96       	adiw	r30, 0x01	; 1
    1972:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val;
    1974:	31 96       	adiw	r30, 0x01	; 1
    1976:	90 83       	st	Z, r25
			memset(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    1978:	4b 85       	ldd	r20, Y+11	; 0x0b
    197a:	3c 85       	ldd	r19, Y+12	; 0x0c
    197c:	2d 85       	ldd	r18, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1980:	31 96       	adiw	r30, 0x01	; 1
    1982:	40 83       	st	Z, r20
	*ptr++ = (BYTE)val; val >>= 8;
    1984:	31 96       	adiw	r30, 0x01	; 1
    1986:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1988:	31 96       	adiw	r30, 0x01	; 1
    198a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val;
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	90 83       	st	Z, r25
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    1990:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1992:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1994:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1996:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1998:	2f 5f       	subi	r18, 0xFF	; 255
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	4f 4f       	sbci	r20, 0xFF	; 255
    199e:	5f 4f       	sbci	r21, 0xFF	; 255
    19a0:	2b a7       	std	Y+43, r18	; 0x2b
    19a2:	3c a7       	std	Y+44, r19	; 0x2c
    19a4:	4d a7       	std	Y+45, r20	; 0x2d
    19a6:	5e a7       	std	Y+46, r21	; 0x2e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    19a8:	01 e0       	ldi	r16, 0x01	; 1
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
			fs->fsi_flag = 0;
    19b0:	1c 82       	std	Y+4, r1	; 0x04
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <disk_ioctl>
    19be:	31 e0       	ldi	r19, 0x01	; 1
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	89 2b       	or	r24, r25
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <sync_fs+0xd0>
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	83 2f       	mov	r24, r19
    19ca:	92 2f       	mov	r25, r18
	}

	return res;
    19cc:	06 c0       	rjmp	.+12     	; 0x19da <sync_fs+0xe2>
    19ce:	ce 01       	movw	r24, r28
    19d0:	0e 94 47 01 	call	0x28e	; 0x28e <sync_window.part.3>
{
	FRESULT res;


	res = sync_window(fs);
	if (res == FR_OK) {
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	09 f4       	brne	.+2      	; 0x19da <sync_fs+0xe2>
    19d8:	97 cf       	rjmp	.-210    	; 0x1908 <sync_fs+0x10>
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
	}

	return res;
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    19e4:	a6 e0       	ldi	r26, 0x06	; 6
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 ef       	ldi	r30, 0xF8	; 248
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__prologue_saves__+0x1e>
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	7e 83       	std	Y+6, r23	; 0x06
    19f6:	6d 83       	std	Y+5, r22	; 0x05
    19f8:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    19fa:	7a 83       	std	Y+2, r23	; 0x02
    19fc:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    19fe:	ce 01       	movw	r24, r28
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	0e 94 8d 00 	call	0x11a	; 0x11a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1a06:	97 fd       	sbrc	r25, 7
    1a08:	25 c0       	rjmp	.+74     	; 0x1a54 <f_mount+0x70>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e4 56       	subi	r30, 0x64	; 100
    1a12:	fe 4f       	sbci	r31, 0xFE	; 254
    1a14:	01 90       	ld	r0, Z+
    1a16:	f0 81       	ld	r31, Z
    1a18:	e0 2d       	mov	r30, r0

	if (cfs) {
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <f_mount+0x3c>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1a1e:	10 82       	st	Z, r1
	}

	if (fs) {
    1a20:	eb 81       	ldd	r30, Y+3	; 0x03
    1a22:	fc 81       	ldd	r31, Y+4	; 0x04
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
    1a28:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1a2a:	84 56       	subi	r24, 0x64	; 100
    1a2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1a2e:	dc 01       	movw	r26, r24
    1a30:	ed 93       	st	X+, r30
    1a32:	fc 93       	st	X, r31

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	11 23       	and	r17, r17
    1a3a:	41 f0       	breq	.+16     	; 0x1a4c <f_mount+0x68>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	be 01       	movw	r22, r28
    1a40:	6d 5f       	subi	r22, 0xFD	; 253
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	ce 01       	movw	r24, r28
    1a46:	05 96       	adiw	r24, 0x05	; 5
    1a48:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
	LEAVE_FF(fs, res);
}
    1a4c:	26 96       	adiw	r28, 0x06	; 6
    1a4e:	e3 e0       	ldi	r30, 0x03	; 3
    1a50:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__epilogue_restores__+0x1e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1a54:	8b e0       	ldi	r24, 0x0B	; 11
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	f9 cf       	rjmp	.-14     	; 0x1a4c <f_mount+0x68>

00001a5a <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
    1a5a:	a2 e3       	ldi	r26, 0x32	; 50
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e3       	ldi	r30, 0x33	; 51
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    1a66:	7e a7       	std	Y+46, r23	; 0x2e
    1a68:	6d a7       	std	Y+45, r22	; 0x2d
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <f_open+0x16>
    1a6e:	a0 c1       	rjmp	.+832    	; 0x1db0 <f_open+0x356>
    1a70:	14 2f       	mov	r17, r20
    1a72:	7c 01       	movw	r14, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    1a74:	24 2f       	mov	r18, r20
    1a76:	2f 73       	andi	r18, 0x3F	; 63
    1a78:	2f a7       	std	Y+47, r18	; 0x2f
	res = mount_volume(&path, &fs, mode);
    1a7a:	42 2f       	mov	r20, r18
    1a7c:	be 01       	movw	r22, r28
    1a7e:	65 5d       	subi	r22, 0xD5	; 213
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	ce 01       	movw	r24, r28
    1a84:	8d 96       	adiw	r24, 0x2d	; 45
    1a86:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
    1a8a:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <f_open+0x38>
    1a90:	7f c0       	rjmp	.+254    	; 0x1b90 <f_open+0x136>
		dj.obj.fs = fs;
    1a92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    1a9a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a9c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	29 f4       	brne	.+10     	; 0x1ab4 <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    1aaa:	28 a5       	ldd	r18, Y+40	; 0x28
    1aac:	27 ff       	sbrs	r18, 7
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <f_open+0x5a>
				res = FR_INVALID_NAME;
    1ab0:	86 e0       	ldi	r24, 0x06	; 6
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1ab4:	21 2f       	mov	r18, r17
    1ab6:	2c 71       	andi	r18, 0x1C	; 28
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <f_open+0x62>
    1aba:	7c c0       	rjmp	.+248    	; 0x1bb4 <f_open+0x15a>
			if (res != FR_OK) {					/* No file, create new */
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <f_open+0x68>
    1ac0:	70 c0       	rjmp	.+224    	; 0x1ba2 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <f_open+0x70>
    1ac8:	63 c0       	rjmp	.+198    	; 0x1b90 <f_open+0x136>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 dd 08 	call	0x11ba	; 0x11ba <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <f_open+0x7e>
    1ad6:	5c c0       	rjmp	.+184    	; 0x1b90 <f_open+0x136>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1ad8:	3f a5       	ldd	r19, Y+47	; 0x2f
    1ada:	38 60       	ori	r19, 0x08	; 8
    1adc:	3f a7       	std	Y+47, r19	; 0x2f
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    1ade:	4f a5       	ldd	r20, Y+47	; 0x2f
    1ae0:	43 ff       	sbrs	r20, 3
    1ae2:	71 c0       	rjmp	.+226    	; 0x1bc6 <f_open+0x16c>
    1ae4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ae6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ae8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aea:	1c a5       	ldd	r17, Y+44	; 0x2c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1aec:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    1aee:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    1af0:	91 e2       	ldi	r25, 0x21	; 33
    1af2:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    1af4:	80 e5       	ldi	r24, 0x50	; 80
    1af6:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
    1af8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1afa:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1afc:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    1afe:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    1b00:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    1b02:	81 8f       	std	Z+25, r24	; 0x19
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    1b04:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1b06:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1b08:	b5 01       	movw	r22, r10
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	8c 91       	ld	r24, X
    1b0e:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    1b12:	2b 01       	movw	r4, r22
    1b14:	3c 01       	movw	r6, r24
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    1b16:	80 e2       	ldi	r24, 0x20	; 32
    1b18:	f5 01       	movw	r30, r10
    1b1a:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    1b1c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1b1e:	fc 8d       	ldd	r31, Y+28	; 0x1c
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1b20:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    1b22:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    1b24:	d8 01       	movw	r26, r16
    1b26:	8c 91       	ld	r24, X
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <f_open+0xd6>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1b2c:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    1b2e:	15 8a       	std	Z+21, r1	; 0x15
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    1b30:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1b32:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1b34:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    1b36:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    1b38:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    1b3a:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	f8 01       	movw	r30, r16
    1b40:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    1b42:	41 14       	cp	r4, r1
    1b44:	51 04       	cpc	r5, r1
    1b46:	61 04       	cpc	r6, r1
    1b48:	71 04       	cpc	r7, r1
    1b4a:	e9 f1       	breq	.+122    	; 0x1bc6 <f_open+0x16c>
						sc = fs->winsect;
    1b4c:	83 a4       	ldd	r8, Z+43	; 0x2b
    1b4e:	94 a4       	ldd	r9, Z+44	; 0x2c
    1b50:	a5 a4       	ldd	r10, Z+45	; 0x2d
    1b52:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    1b54:	00 e0       	ldi	r16, 0x00	; 0
    1b56:	10 e0       	ldi	r17, 0x00	; 0
    1b58:	98 01       	movw	r18, r16
    1b5a:	b3 01       	movw	r22, r6
    1b5c:	a2 01       	movw	r20, r4
    1b5e:	ce 01       	movw	r24, r28
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	0e 94 2b 05 	call	0xa56	; 0xa56 <remove_chain>
						if (res == FR_OK) {
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	99 f4       	brne	.+38     	; 0x1b90 <f_open+0x136>
							res = move_window(fs, sc);
    1b6a:	b5 01       	movw	r22, r10
    1b6c:	a4 01       	movw	r20, r8
    1b6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b72:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    1b76:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b78:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	42 1a       	sub	r4, r18
    1b7e:	51 08       	sbc	r5, r1
    1b80:	61 08       	sbc	r6, r1
    1b82:	71 08       	sbc	r7, r1
    1b84:	43 86       	std	Z+11, r4	; 0x0b
    1b86:	54 86       	std	Z+12, r5	; 0x0c
    1b88:	65 86       	std	Z+13, r6	; 0x0d
    1b8a:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	d9 f0       	breq	.+54     	; 0x1bc6 <f_open+0x16c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    1b90:	d7 01       	movw	r26, r14
    1b92:	1d 92       	st	X+, r1
    1b94:	1c 92       	st	X, r1
    1b96:	6c 01       	movw	r12, r24

	LEAVE_FF(fs, res);
}
    1b98:	c6 01       	movw	r24, r12
    1b9a:	e2 96       	adiw	r28, 0x32	; 50
    1b9c:	e2 e1       	ldi	r30, 0x12	; 18
    1b9e:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	81 71       	andi	r24, 0x11	; 17
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <f_open+0x150>
    1ba8:	fd c0       	rjmp	.+506    	; 0x1da4 <f_open+0x34a>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    1baa:	12 ff       	sbrs	r17, 2
    1bac:	98 cf       	rjmp	.-208    	; 0x1ade <f_open+0x84>
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	ee cf       	rjmp	.-36     	; 0x1b90 <f_open+0x136>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	61 f7       	brne	.-40     	; 0x1b90 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	84 fd       	sbrc	r24, 4
    1bbc:	f0 c0       	rjmp	.+480    	; 0x1d9e <f_open+0x344>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    1bbe:	11 ff       	sbrs	r17, 1
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <f_open+0x16c>
    1bc2:	80 fd       	sbrc	r24, 0
    1bc4:	ef c0       	rjmp	.+478    	; 0x1da4 <f_open+0x34a>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    1bc6:	3f a5       	ldd	r19, Y+47	; 0x2f
    1bc8:	33 ff       	sbrs	r19, 3
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <f_open+0x176>
    1bcc:	30 64       	ori	r19, 0x40	; 64
    1bce:	3f a7       	std	Y+47, r19	; 0x2f
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    1bd0:	0b a5       	ldd	r16, Y+43	; 0x2b
    1bd2:	1c a5       	ldd	r17, Y+44	; 0x2c
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	83 a5       	ldd	r24, Z+43	; 0x2b
    1bd8:	94 a5       	ldd	r25, Z+44	; 0x2c
    1bda:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1bdc:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1bde:	f7 01       	movw	r30, r14
    1be0:	84 8f       	std	Z+28, r24	; 0x1c
    1be2:	95 8f       	std	Z+29, r25	; 0x1d
    1be4:	a6 8f       	std	Z+30, r26	; 0x1e
    1be6:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    1be8:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1bea:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1bec:	b1 a2       	std	Z+33, r11	; 0x21
    1bee:	a0 a2       	std	Z+32, r10	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    1bf0:	b5 01       	movw	r22, r10
    1bf2:	d8 01       	movw	r26, r16
    1bf4:	8c 91       	ld	r24, X
    1bf6:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    1bfa:	2b 01       	movw	r4, r22
    1bfc:	3c 01       	movw	r6, r24
    1bfe:	f7 01       	movw	r30, r14
    1c00:	46 82       	std	Z+6, r4	; 0x06
    1c02:	57 82       	std	Z+7, r5	; 0x07
    1c04:	60 86       	std	Z+8, r6	; 0x08
    1c06:	71 86       	std	Z+9, r7	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    1c08:	c5 01       	movw	r24, r10
    1c0a:	4c 96       	adiw	r24, 0x1c	; 28
    1c0c:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    1c10:	4b 01       	movw	r8, r22
    1c12:	5c 01       	movw	r10, r24
    1c14:	d7 01       	movw	r26, r14
    1c16:	1a 96       	adiw	r26, 0x0a	; 10
    1c18:	8d 92       	st	X+, r8
    1c1a:	9d 92       	st	X+, r9
    1c1c:	ad 92       	st	X+, r10
    1c1e:	bc 92       	st	X, r11
    1c20:	1d 97       	sbiw	r26, 0x0d	; 13
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	1c 93       	st	X, r17
    1c26:	0e 93       	st	-X, r16
			fp->obj.id = fs->id;
    1c28:	f8 01       	movw	r30, r16
    1c2a:	85 81       	ldd	r24, Z+5	; 0x05
    1c2c:	96 81       	ldd	r25, Z+6	; 0x06
    1c2e:	13 96       	adiw	r26, 0x03	; 3
    1c30:	9c 93       	st	X, r25
    1c32:	8e 93       	st	-X, r24
    1c34:	12 97       	sbiw	r26, 0x02	; 2
			fp->flag = mode;	/* Set file access mode */
    1c36:	ff a5       	ldd	r31, Y+47	; 0x2f
    1c38:	1e 96       	adiw	r26, 0x0e	; 14
    1c3a:	fc 93       	st	X, r31
    1c3c:	1e 97       	sbiw	r26, 0x0e	; 14
			fp->err = 0;		/* Clear error flag */
    1c3e:	1f 96       	adiw	r26, 0x0f	; 15
    1c40:	1c 92       	st	X, r1
    1c42:	1f 97       	sbiw	r26, 0x0f	; 15
			fp->sect = 0;		/* Invalidate current data sector */
    1c44:	58 96       	adiw	r26, 0x18	; 24
    1c46:	1d 92       	st	X+, r1
    1c48:	1d 92       	st	X+, r1
    1c4a:	1d 92       	st	X+, r1
    1c4c:	1c 92       	st	X, r1
    1c4e:	5b 97       	sbiw	r26, 0x1b	; 27
			fp->fptr = 0;		/* Set file pointer top of the file */
    1c50:	f7 01       	movw	r30, r14
    1c52:	10 8a       	std	Z+16, r1	; 0x10
    1c54:	11 8a       	std	Z+17, r1	; 0x11
    1c56:	12 8a       	std	Z+18, r1	; 0x12
    1c58:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
    1c5a:	17 01       	movw	r2, r14
    1c5c:	f2 e2       	ldi	r31, 0x22	; 34
    1c5e:	2f 0e       	add	r2, r31
    1c60:	31 1c       	adc	r3, r1
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	92 e0       	ldi	r25, 0x02	; 2
    1c66:	d1 01       	movw	r26, r2
    1c68:	fc 01       	movw	r30, r24
    1c6a:	1d 92       	st	X+, r1
    1c6c:	31 97       	sbiw	r30, 0x01	; 1
    1c6e:	e9 f7       	brne	.-6      	; 0x1c6a <f_open+0x210>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    1c70:	ff a5       	ldd	r31, Y+47	; 0x2f
    1c72:	f5 ff       	sbrs	r31, 5
    1c74:	91 cf       	rjmp	.-222    	; 0x1b98 <f_open+0x13e>
    1c76:	81 14       	cp	r8, r1
    1c78:	91 04       	cpc	r9, r1
    1c7a:	a1 04       	cpc	r10, r1
    1c7c:	b1 04       	cpc	r11, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <f_open+0x228>
    1c80:	8b cf       	rjmp	.-234    	; 0x1b98 <f_open+0x13e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    1c82:	d7 01       	movw	r26, r14
    1c84:	50 96       	adiw	r26, 0x10	; 16
    1c86:	8d 92       	st	X+, r8
    1c88:	9d 92       	st	X+, r9
    1c8a:	ad 92       	st	X+, r10
    1c8c:	bc 92       	st	X, r11
    1c8e:	53 97       	sbiw	r26, 0x13	; 19
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    1c90:	f8 01       	movw	r30, r16
    1c92:	81 85       	ldd	r24, Z+9	; 0x09
    1c94:	92 85       	ldd	r25, Z+10	; 0x0a
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	a0 e0       	ldi	r26, 0x00	; 0
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	ad 01       	movw	r20, r26
    1c9e:	69 e0       	ldi	r22, 0x09	; 9
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	44 1f       	adc	r20, r20
    1ca6:	55 1f       	adc	r21, r21
    1ca8:	6a 95       	dec	r22
    1caa:	d1 f7       	brne	.-12     	; 0x1ca0 <f_open+0x246>
    1cac:	2f a7       	std	Y+47, r18	; 0x2f
    1cae:	38 ab       	std	Y+48, r19	; 0x30
    1cb0:	49 ab       	std	Y+49, r20	; 0x31
    1cb2:	5a ab       	std	Y+50, r21	; 0x32
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb8:	a9 a9       	ldd	r26, Y+49	; 0x31
    1cba:	ba a9       	ldd	r27, Y+50	; 0x32
    1cbc:	88 15       	cp	r24, r8
    1cbe:	99 05       	cpc	r25, r9
    1cc0:	aa 05       	cpc	r26, r10
    1cc2:	bb 05       	cpc	r27, r11
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <f_open+0x26e>
    1cc6:	47 c0       	rjmp	.+142    	; 0x1d56 <f_open+0x2fc>
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    1ccc:	d7 01       	movw	r26, r14
    1cce:	54 96       	adiw	r26, 0x14	; 20
    1cd0:	4d 92       	st	X+, r4
    1cd2:	5d 92       	st	X+, r5
    1cd4:	6d 92       	st	X+, r6
    1cd6:	7c 92       	st	X, r7
    1cd8:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <f_open+0x286>
    1cde:	58 cf       	rjmp	.-336    	; 0x1b90 <f_open+0x136>
    1ce0:	d5 01       	movw	r26, r10
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	91 70       	andi	r25, 0x01	; 1
    1ce6:	aa 27       	eor	r26, r26
    1ce8:	bb 27       	eor	r27, r27
    1cea:	89 2b       	or	r24, r25
    1cec:	8a 2b       	or	r24, r26
    1cee:	8b 2b       	or	r24, r27
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <f_open+0x29a>
    1cf2:	52 cf       	rjmp	.-348    	; 0x1b98 <f_open+0x13e>
					sc = clst2sect(fs, clst);
    1cf4:	eb a5       	ldd	r30, Y+43	; 0x2b
    1cf6:	fc a5       	ldd	r31, Y+44	; 0x2c
    1cf8:	f8 ab       	std	Y+48, r31	; 0x30
    1cfa:	ef a7       	std	Y+47, r30	; 0x2f
    1cfc:	b3 01       	movw	r22, r6
    1cfe:	a2 01       	movw	r20, r4
    1d00:	cf 01       	movw	r24, r30
    1d02:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
					if (sc == 0) {
    1d06:	61 15       	cp	r22, r1
    1d08:	71 05       	cpc	r23, r1
    1d0a:	81 05       	cpc	r24, r1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <f_open+0x2b8>
    1d10:	4c c0       	rjmp	.+152    	; 0x1daa <f_open+0x350>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    1d12:	29 e0       	ldi	r18, 0x09	; 9
    1d14:	b6 94       	lsr	r11
    1d16:	a7 94       	ror	r10
    1d18:	97 94       	ror	r9
    1d1a:	87 94       	ror	r8
    1d1c:	2a 95       	dec	r18
    1d1e:	d1 f7       	brne	.-12     	; 0x1d14 <f_open+0x2ba>
    1d20:	a5 01       	movw	r20, r10
    1d22:	94 01       	movw	r18, r8
    1d24:	26 0f       	add	r18, r22
    1d26:	37 1f       	adc	r19, r23
    1d28:	48 1f       	adc	r20, r24
    1d2a:	59 1f       	adc	r21, r25
    1d2c:	d7 01       	movw	r26, r14
    1d2e:	58 96       	adiw	r26, 0x18	; 24
    1d30:	2d 93       	st	X+, r18
    1d32:	3d 93       	st	X+, r19
    1d34:	4d 93       	st	X+, r20
    1d36:	5c 93       	st	X, r21
    1d38:	5b 97       	sbiw	r26, 0x1b	; 27
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    1d3a:	01 e0       	ldi	r16, 0x01	; 1
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	b1 01       	movw	r22, r2
    1d40:	ef a5       	ldd	r30, Y+47	; 0x2f
    1d42:	f8 a9       	ldd	r31, Y+48	; 0x30
    1d44:	81 81       	ldd	r24, Z+1	; 0x01
    1d46:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
    1d4a:	89 2b       	or	r24, r25
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <f_open+0x2f6>
    1d4e:	24 cf       	rjmp	.-440    	; 0x1b98 <f_open+0x13e>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	1d cf       	rjmp	.-454    	; 0x1b90 <f_open+0x136>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
    1d56:	b3 01       	movw	r22, r6
    1d58:	a2 01       	movw	r20, r4
    1d5a:	d7 01       	movw	r26, r14
    1d5c:	8d 91       	ld	r24, X+
    1d5e:	9c 91       	ld	r25, X
    1d60:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
    1d64:	2b 01       	movw	r4, r22
    1d66:	3c 01       	movw	r6, r24
    1d68:	2f a5       	ldd	r18, Y+47	; 0x2f
    1d6a:	38 a9       	ldd	r19, Y+48	; 0x30
    1d6c:	49 a9       	ldd	r20, Y+49	; 0x31
    1d6e:	5a a9       	ldd	r21, Y+50	; 0x32
    1d70:	82 1a       	sub	r8, r18
    1d72:	93 0a       	sbc	r9, r19
    1d74:	a4 0a       	sbc	r10, r20
    1d76:	b5 0a       	sbc	r11, r21
					if (clst <= 1) res = FR_INT_ERR;
    1d78:	32 e0       	ldi	r19, 0x02	; 2
    1d7a:	43 16       	cp	r4, r19
    1d7c:	51 04       	cpc	r5, r1
    1d7e:	61 04       	cpc	r6, r1
    1d80:	71 04       	cpc	r7, r1
    1d82:	50 f0       	brcs	.+20     	; 0x1d98 <f_open+0x33e>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    1d84:	4f ef       	ldi	r20, 0xFF	; 255
    1d86:	44 16       	cp	r4, r20
    1d88:	54 06       	cpc	r5, r20
    1d8a:	64 06       	cpc	r6, r20
    1d8c:	74 06       	cpc	r7, r20
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <f_open+0x338>
    1d90:	91 cf       	rjmp	.-222    	; 0x1cb4 <f_open+0x25a>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9a cf       	rjmp	.-204    	; 0x1ccc <f_open+0x272>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	97 cf       	rjmp	.-210    	; 0x1ccc <f_open+0x272>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    1d9e:	84 e0       	ldi	r24, 0x04	; 4
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	f6 ce       	rjmp	.-532    	; 0x1b90 <f_open+0x136>
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    1da4:	87 e0       	ldi	r24, 0x07	; 7
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	f3 ce       	rjmp	.-538    	; 0x1b90 <f_open+0x136>
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	f0 ce       	rjmp	.-544    	; 0x1b90 <f_open+0x136>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    1db0:	89 e0       	ldi	r24, 0x09	; 9
    1db2:	c8 2e       	mov	r12, r24
    1db4:	d1 2c       	mov	r13, r1
    1db6:	f0 ce       	rjmp	.-544    	; 0x1b98 <f_open+0x13e>

00001db8 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
    1db8:	a8 e0       	ldi	r26, 0x08	; 8
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 ee       	ldi	r30, 0xE2	; 226
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	3b 01       	movw	r6, r22
    1dc8:	4a 01       	movw	r8, r20
    1dca:	38 87       	std	Y+8, r19	; 0x08
    1dcc:	2f 83       	std	Y+7, r18	; 0x07
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    1dce:	f9 01       	movw	r30, r18
    1dd0:	11 82       	std	Z+1, r1	; 0x01
    1dd2:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    1dd4:	be 01       	movw	r22, r28
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
    1dde:	5c 01       	movw	r10, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    1de0:	89 2b       	or	r24, r25
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <f_read+0x2e>
    1de4:	f2 c0       	rjmp	.+484    	; 0x1fca <f_read+0x212>
    1de6:	f7 01       	movw	r30, r14
    1de8:	a7 84       	ldd	r10, Z+15	; 0x0f
    1dea:	b1 2c       	mov	r11, r1
    1dec:	a1 14       	cp	r10, r1
    1dee:	b1 04       	cpc	r11, r1
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <f_read+0x3c>
    1df2:	eb c0       	rjmp	.+470    	; 0x1fca <f_read+0x212>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    1df4:	86 85       	ldd	r24, Z+14	; 0x0e
    1df6:	80 ff       	sbrs	r24, 0
    1df8:	33 c1       	rjmp	.+614    	; 0x2060 <f_read+0x2a8>
	remain = fp->obj.objsize - fp->fptr;
    1dfa:	82 85       	ldd	r24, Z+10	; 0x0a
    1dfc:	93 85       	ldd	r25, Z+11	; 0x0b
    1dfe:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e00:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e02:	40 89       	ldd	r20, Z+16	; 0x10
    1e04:	51 89       	ldd	r21, Z+17	; 0x11
    1e06:	62 89       	ldd	r22, Z+18	; 0x12
    1e08:	73 89       	ldd	r23, Z+19	; 0x13
    1e0a:	84 1b       	sub	r24, r20
    1e0c:	95 0b       	sbc	r25, r21
    1e0e:	a6 0b       	sbc	r26, r22
    1e10:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1e12:	a4 01       	movw	r20, r8
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	84 17       	cp	r24, r20
    1e1a:	95 07       	cpc	r25, r21
    1e1c:	a6 07       	cpc	r26, r22
    1e1e:	b7 07       	cpc	r27, r23
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <f_read+0x6c>
    1e22:	4c 01       	movw	r8, r24
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    1e24:	c7 01       	movw	r24, r14
    1e26:	82 96       	adiw	r24, 0x22	; 34
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	91 c0       	rjmp	.+290    	; 0x1f50 <f_read+0x198>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    1e2e:	44 89       	ldd	r20, Z+20	; 0x14
    1e30:	55 89       	ldd	r21, Z+21	; 0x15
    1e32:	66 89       	ldd	r22, Z+22	; 0x16
    1e34:	77 89       	ldd	r23, Z+23	; 0x17
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
    1e3e:	b9 c0       	rjmp	.+370    	; 0x1fb2 <f_read+0x1fa>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    1e40:	6f 3f       	cpi	r22, 0xFF	; 255
    1e42:	ff ef       	ldi	r31, 0xFF	; 255
    1e44:	7f 07       	cpc	r23, r31
    1e46:	8f 07       	cpc	r24, r31
    1e48:	9f 07       	cpc	r25, r31
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <f_read+0xa2>
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	f7 01       	movw	r30, r14
    1e50:	87 87       	std	Z+15, r24	; 0x0f
    1e52:	aa 24       	eor	r10, r10
    1e54:	a3 94       	inc	r10
    1e56:	b1 2c       	mov	r11, r1
    1e58:	b8 c0       	rjmp	.+368    	; 0x1fca <f_read+0x212>
				fp->clust = clst;				/* Update current cluster */
    1e5a:	f7 01       	movw	r30, r14
    1e5c:	64 8b       	std	Z+20, r22	; 0x14
    1e5e:	75 8b       	std	Z+21, r23	; 0x15
    1e60:	86 8b       	std	Z+22, r24	; 0x16
    1e62:	97 8b       	std	Z+23, r25	; 0x17
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	44 89       	ldd	r20, Z+20	; 0x14
    1e70:	55 89       	ldd	r21, Z+21	; 0x15
    1e72:	66 89       	ldd	r22, Z+22	; 0x16
    1e74:	77 89       	ldd	r23, Z+23	; 0x17
    1e76:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    1e7a:	61 15       	cp	r22, r1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	81 05       	cpc	r24, r1
    1e80:	91 05       	cpc	r25, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <f_read+0xce>
    1e84:	9c c0       	rjmp	.+312    	; 0x1fbe <f_read+0x206>
			sect += csect;
    1e86:	1b 01       	movw	r2, r22
    1e88:	2c 01       	movw	r4, r24
    1e8a:	20 0e       	add	r2, r16
    1e8c:	31 1e       	adc	r3, r17
    1e8e:	41 1c       	adc	r4, r1
    1e90:	51 1c       	adc	r5, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    1e92:	64 01       	movw	r12, r8
    1e94:	cd 2c       	mov	r12, r13
    1e96:	dd 24       	eor	r13, r13
    1e98:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    1e9a:	c1 14       	cp	r12, r1
    1e9c:	d1 04       	cpc	r13, r1
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <f_read+0xea>
    1ea0:	99 c0       	rjmp	.+306    	; 0x1fd4 <f_read+0x21c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    1ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea6:	81 85       	ldd	r24, Z+9	; 0x09
    1ea8:	92 85       	ldd	r25, Z+10	; 0x0a
    1eaa:	98 01       	movw	r18, r16
    1eac:	2c 0d       	add	r18, r12
    1eae:	3d 1d       	adc	r19, r13
    1eb0:	82 17       	cp	r24, r18
    1eb2:	93 07       	cpc	r25, r19
    1eb4:	18 f4       	brcc	.+6      	; 0x1ebc <f_read+0x104>
					cc = fs->csize - csect;
    1eb6:	6c 01       	movw	r12, r24
    1eb8:	c0 1a       	sub	r12, r16
    1eba:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1ebc:	86 01       	movw	r16, r12
    1ebe:	a2 01       	movw	r20, r4
    1ec0:	91 01       	movw	r18, r2
    1ec2:	b3 01       	movw	r22, r6
    1ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec8:	81 81       	ldd	r24, Z+1	; 0x01
    1eca:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
    1ece:	89 2b       	or	r24, r25
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <f_read+0x11c>
    1ed2:	bc cf       	rjmp	.-136    	; 0x1e4c <f_read+0x94>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ed8:	87 ff       	sbrs	r24, 7
    1eda:	1e c0       	rjmp	.+60     	; 0x1f18 <f_read+0x160>
    1edc:	80 8d       	ldd	r24, Z+24	; 0x18
    1ede:	91 8d       	ldd	r25, Z+25	; 0x19
    1ee0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ee2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1ee4:	82 19       	sub	r24, r2
    1ee6:	93 09       	sbc	r25, r3
    1ee8:	a4 09       	sbc	r26, r4
    1eea:	b5 09       	sbc	r27, r5
    1eec:	a6 01       	movw	r20, r12
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	84 17       	cp	r24, r20
    1ef4:	95 07       	cpc	r25, r21
    1ef6:	a6 07       	cpc	r26, r22
    1ef8:	b7 07       	cpc	r27, r23
    1efa:	70 f4       	brcc	.+28     	; 0x1f18 <f_read+0x160>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    1efc:	dc 01       	movw	r26, r24
    1efe:	ba 2f       	mov	r27, r26
    1f00:	aa 27       	eor	r26, r26
    1f02:	bb 0f       	add	r27, r27
    1f04:	a6 0d       	add	r26, r6
    1f06:	b7 1d       	adc	r27, r7
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	92 e0       	ldi	r25, 0x02	; 2
    1f0c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f0e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f10:	01 90       	ld	r0, Z+
    1f12:	0d 92       	st	X+, r0
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <f_read+0x158>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    1f18:	dc 2c       	mov	r13, r12
    1f1a:	cc 24       	eor	r12, r12
    1f1c:	dd 0c       	add	r13, r13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
    1f1e:	8c 18       	sub	r8, r12
    1f20:	9d 08       	sbc	r9, r13
    1f22:	ef 81       	ldd	r30, Y+7	; 0x07
    1f24:	f8 85       	ldd	r31, Y+8	; 0x08
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	8c 0d       	add	r24, r12
    1f2c:	9d 1d       	adc	r25, r13
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	6c 0c       	add	r6, r12
    1f34:	7d 1c       	adc	r7, r13
    1f36:	f7 01       	movw	r30, r14
    1f38:	80 89       	ldd	r24, Z+16	; 0x10
    1f3a:	91 89       	ldd	r25, Z+17	; 0x11
    1f3c:	a2 89       	ldd	r26, Z+18	; 0x12
    1f3e:	b3 89       	ldd	r27, Z+19	; 0x13
    1f40:	8c 0d       	add	r24, r12
    1f42:	9d 1d       	adc	r25, r13
    1f44:	a1 1d       	adc	r26, r1
    1f46:	b1 1d       	adc	r27, r1
    1f48:	80 8b       	std	Z+16, r24	; 0x10
    1f4a:	91 8b       	std	Z+17, r25	; 0x11
    1f4c:	a2 8b       	std	Z+18, r26	; 0x12
    1f4e:	b3 8b       	std	Z+19, r27	; 0x13
    1f50:	81 14       	cp	r8, r1
    1f52:	91 04       	cpc	r9, r1
    1f54:	d1 f1       	breq	.+116    	; 0x1fca <f_read+0x212>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    1f56:	f7 01       	movw	r30, r14
    1f58:	80 89       	ldd	r24, Z+16	; 0x10
    1f5a:	91 89       	ldd	r25, Z+17	; 0x11
    1f5c:	a2 89       	ldd	r26, Z+18	; 0x12
    1f5e:	b3 89       	ldd	r27, Z+19	; 0x13
    1f60:	ac 01       	movw	r20, r24
    1f62:	bd 01       	movw	r22, r26
    1f64:	51 70       	andi	r21, 0x01	; 1
    1f66:	66 27       	eor	r22, r22
    1f68:	77 27       	eor	r23, r23
    1f6a:	45 2b       	or	r20, r21
    1f6c:	46 2b       	or	r20, r22
    1f6e:	47 2b       	or	r20, r23
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <f_read+0x1bc>
    1f72:	60 c0       	rjmp	.+192    	; 0x2034 <f_read+0x27c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	01 85       	ldd	r16, Z+9	; 0x09
    1f7a:	12 85       	ldd	r17, Z+10	; 0x0a
    1f7c:	01 50       	subi	r16, 0x01	; 1
    1f7e:	11 09       	sbc	r17, r1
    1f80:	ac 01       	movw	r20, r24
    1f82:	bd 01       	movw	r22, r26
    1f84:	e9 e0       	ldi	r30, 0x09	; 9
    1f86:	76 95       	lsr	r23
    1f88:	67 95       	ror	r22
    1f8a:	57 95       	ror	r21
    1f8c:	47 95       	ror	r20
    1f8e:	ea 95       	dec	r30
    1f90:	d1 f7       	brne	.-12     	; 0x1f86 <f_read+0x1ce>
    1f92:	04 23       	and	r16, r20
    1f94:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    1f96:	01 15       	cp	r16, r1
    1f98:	11 05       	cpc	r17, r1
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <f_read+0x1e6>
    1f9c:	63 cf       	rjmp	.-314    	; 0x1e64 <f_read+0xac>
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    1f9e:	f7 01       	movw	r30, r14

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    1fa0:	89 2b       	or	r24, r25
    1fa2:	8a 2b       	or	r24, r26
    1fa4:	8b 2b       	or	r24, r27
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <f_read+0x1f2>
    1fa8:	42 cf       	rjmp	.-380    	; 0x1e2e <f_read+0x76>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    1faa:	66 81       	ldd	r22, Z+6	; 0x06
    1fac:	77 81       	ldd	r23, Z+7	; 0x07
    1fae:	80 85       	ldd	r24, Z+8	; 0x08
    1fb0:	91 85       	ldd	r25, Z+9	; 0x09
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    1fb2:	62 30       	cpi	r22, 0x02	; 2
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	81 05       	cpc	r24, r1
    1fb8:	91 05       	cpc	r25, r1
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <f_read+0x206>
    1fbc:	41 cf       	rjmp	.-382    	; 0x1e40 <f_read+0x88>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	f7 01       	movw	r30, r14
    1fc2:	87 87       	std	Z+15, r24	; 0x0f
    1fc4:	52 e0       	ldi	r21, 0x02	; 2
    1fc6:	a5 2e       	mov	r10, r21
    1fc8:	b1 2c       	mov	r11, r1
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    1fca:	c5 01       	movw	r24, r10
    1fcc:	28 96       	adiw	r28, 0x08	; 8
    1fce:	e2 e1       	ldi	r30, 0x12	; 18
    1fd0:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
				continue;
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	20 8d       	ldd	r18, Z+24	; 0x18
    1fd8:	31 8d       	ldd	r19, Z+25	; 0x19
    1fda:	42 8d       	ldd	r20, Z+26	; 0x1a
    1fdc:	53 8d       	ldd	r21, Z+27	; 0x1b
    1fde:	22 15       	cp	r18, r2
    1fe0:	33 05       	cpc	r19, r3
    1fe2:	44 05       	cpc	r20, r4
    1fe4:	55 05       	cpc	r21, r5
    1fe6:	09 f1       	breq	.+66     	; 0x202a <f_read+0x272>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    1fe8:	86 85       	ldd	r24, Z+14	; 0x0e
    1fea:	87 ff       	sbrs	r24, 7
    1fec:	10 c0       	rjmp	.+32     	; 0x200e <f_read+0x256>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1fee:	01 e0       	ldi	r16, 0x01	; 1
    1ff0:	10 e0       	ldi	r17, 0x00	; 0
    1ff2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ff4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    2000:	89 2b       	or	r24, r25
    2002:	09 f0       	breq	.+2      	; 0x2006 <f_read+0x24e>
    2004:	23 cf       	rjmp	.-442    	; 0x1e4c <f_read+0x94>
					fp->flag &= (BYTE)~FA_DIRTY;
    2006:	f7 01       	movw	r30, r14
    2008:	86 85       	ldd	r24, Z+14	; 0x0e
    200a:	8f 77       	andi	r24, 0x7F	; 127
    200c:	86 87       	std	Z+14, r24	; 0x0e
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    200e:	e9 81       	ldd	r30, Y+1	; 0x01
    2010:	fa 81       	ldd	r31, Y+2	; 0x02
    2012:	01 e0       	ldi	r16, 0x01	; 1
    2014:	10 e0       	ldi	r17, 0x00	; 0
    2016:	a2 01       	movw	r20, r4
    2018:	91 01       	movw	r18, r2
    201a:	6d 81       	ldd	r22, Y+5	; 0x05
    201c:	7e 81       	ldd	r23, Y+6	; 0x06
    201e:	81 81       	ldd	r24, Z+1	; 0x01
    2020:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
    2024:	89 2b       	or	r24, r25
    2026:	09 f0       	breq	.+2      	; 0x202a <f_read+0x272>
    2028:	11 cf       	rjmp	.-478    	; 0x1e4c <f_read+0x94>
			}
#endif
			fp->sect = sect;
    202a:	f7 01       	movw	r30, r14
    202c:	20 8e       	std	Z+24, r2	; 0x18
    202e:	31 8e       	std	Z+25, r3	; 0x19
    2030:	42 8e       	std	Z+26, r4	; 0x1a
    2032:	53 8e       	std	Z+27, r5	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2034:	f7 01       	movw	r30, r14
    2036:	60 89       	ldd	r22, Z+16	; 0x10
    2038:	71 89       	ldd	r23, Z+17	; 0x11
    203a:	71 70       	andi	r23, 0x01	; 1
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	92 e0       	ldi	r25, 0x02	; 2
    2040:	86 1b       	sub	r24, r22
    2042:	97 0b       	sbc	r25, r23
    2044:	64 01       	movw	r12, r8
    2046:	88 15       	cp	r24, r8
    2048:	99 05       	cpc	r25, r9
    204a:	08 f4       	brcc	.+2      	; 0x204e <f_read+0x296>
    204c:	6c 01       	movw	r12, r24
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	68 0f       	add	r22, r24
    2054:	79 1f       	adc	r23, r25
    2056:	a6 01       	movw	r20, r12
    2058:	c3 01       	movw	r24, r6
    205a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <memcpy>
    205e:	5f cf       	rjmp	.-322    	; 0x1f1e <f_read+0x166>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    2060:	87 e0       	ldi	r24, 0x07	; 7
    2062:	a8 2e       	mov	r10, r24
    2064:	b1 2c       	mov	r11, r1
    2066:	b1 cf       	rjmp	.-158    	; 0x1fca <f_read+0x212>

00002068 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
    2068:	aa e0       	ldi	r26, 0x0A	; 10
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ea e3       	ldi	r30, 0x3A	; 58
    206e:	f0 e1       	ldi	r31, 0x10	; 16
    2070:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    2074:	7c 01       	movw	r14, r24
    2076:	3b 01       	movw	r6, r22
    2078:	4a 01       	movw	r8, r20
    207a:	3a 87       	std	Y+10, r19	; 0x0a
    207c:	29 87       	std	Y+9, r18	; 0x09
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    207e:	f9 01       	movw	r30, r18
    2080:	11 82       	std	Z+1, r1	; 0x01
    2082:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    2084:	be 01       	movw	r22, r28
    2086:	6f 5f       	subi	r22, 0xFF	; 255
    2088:	7f 4f       	sbci	r23, 0xFF	; 255
    208a:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
    208e:	5c 01       	movw	r10, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    2090:	89 2b       	or	r24, r25
    2092:	09 f0       	breq	.+2      	; 0x2096 <f_write+0x2e>
    2094:	3e c1       	rjmp	.+636    	; 0x2312 <f_write+0x2aa>
    2096:	f7 01       	movw	r30, r14
    2098:	a7 84       	ldd	r10, Z+15	; 0x0f
    209a:	b1 2c       	mov	r11, r1
    209c:	a1 14       	cp	r10, r1
    209e:	b1 04       	cpc	r11, r1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <f_write+0x3c>
    20a2:	37 c1       	rjmp	.+622    	; 0x2312 <f_write+0x2aa>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    20a4:	86 85       	ldd	r24, Z+14	; 0x0e
    20a6:	81 ff       	sbrs	r24, 1
    20a8:	7d c1       	rjmp	.+762    	; 0x23a4 <f_write+0x33c>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    20aa:	80 89       	ldd	r24, Z+16	; 0x10
    20ac:	91 89       	ldd	r25, Z+17	; 0x11
    20ae:	a2 89       	ldd	r26, Z+18	; 0x12
    20b0:	b3 89       	ldd	r27, Z+19	; 0x13
    20b2:	ac 01       	movw	r20, r24
    20b4:	bd 01       	movw	r22, r26
    20b6:	48 0d       	add	r20, r8
    20b8:	59 1d       	adc	r21, r9
    20ba:	61 1d       	adc	r22, r1
    20bc:	71 1d       	adc	r23, r1
    20be:	48 17       	cp	r20, r24
    20c0:	59 07       	cpc	r21, r25
    20c2:	6a 07       	cpc	r22, r26
    20c4:	7b 07       	cpc	r23, r27
    20c6:	18 f4       	brcc	.+6      	; 0x20ce <f_write+0x66>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    20c8:	4c 01       	movw	r8, r24
    20ca:	80 94       	com	r8
    20cc:	90 94       	com	r9
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    20ce:	97 01       	movw	r18, r14
    20d0:	2e 5d       	subi	r18, 0xDE	; 222
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	38 87       	std	Y+8, r19	; 0x08
    20d6:	2f 83       	std	Y+7, r18	; 0x07
    20d8:	d2 c0       	rjmp	.+420    	; 0x227e <f_write+0x216>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    20da:	44 89       	ldd	r20, Z+20	; 0x14
    20dc:	55 89       	ldd	r21, Z+21	; 0x15
    20de:	66 89       	ldd	r22, Z+22	; 0x16
    20e0:	77 89       	ldd	r23, Z+23	; 0x17
    20e2:	0a c1       	rjmp	.+532    	; 0x22f8 <f_write+0x290>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    20e4:	61 30       	cpi	r22, 0x01	; 1
    20e6:	71 05       	cpc	r23, r1
    20e8:	81 05       	cpc	r24, r1
    20ea:	91 05       	cpc	r25, r1
    20ec:	39 f4       	brne	.+14     	; 0x20fc <f_write+0x94>
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	f7 01       	movw	r30, r14
    20f2:	87 87       	std	Z+15, r24	; 0x0f
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	a6 2e       	mov	r10, r22
    20f8:	b1 2c       	mov	r11, r1
    20fa:	0b c1       	rjmp	.+534    	; 0x2312 <f_write+0x2aa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    20fc:	6f 3f       	cpi	r22, 0xFF	; 255
    20fe:	ff ef       	ldi	r31, 0xFF	; 255
    2100:	7f 07       	cpc	r23, r31
    2102:	8f 07       	cpc	r24, r31
    2104:	9f 07       	cpc	r25, r31
    2106:	39 f4       	brne	.+14     	; 0x2116 <f_write+0xae>
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	f7 01       	movw	r30, r14
    210c:	87 87       	std	Z+15, r24	; 0x0f
    210e:	aa 24       	eor	r10, r10
    2110:	a3 94       	inc	r10
    2112:	b1 2c       	mov	r11, r1
    2114:	fe c0       	rjmp	.+508    	; 0x2312 <f_write+0x2aa>
				fp->clust = clst;			/* Update current cluster */
    2116:	f7 01       	movw	r30, r14
    2118:	64 8b       	std	Z+20, r22	; 0x14
    211a:	75 8b       	std	Z+21, r23	; 0x15
    211c:	86 8b       	std	Z+22, r24	; 0x16
    211e:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    2120:	06 81       	ldd	r16, Z+6	; 0x06
    2122:	17 81       	ldd	r17, Z+7	; 0x07
    2124:	20 85       	ldd	r18, Z+8	; 0x08
    2126:	31 85       	ldd	r19, Z+9	; 0x09
    2128:	01 15       	cp	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	21 05       	cpc	r18, r1
    212e:	31 05       	cpc	r19, r1
    2130:	21 f4       	brne	.+8      	; 0x213a <f_write+0xd2>
    2132:	66 83       	std	Z+6, r22	; 0x06
    2134:	77 83       	std	Z+7, r23	; 0x07
    2136:	80 87       	std	Z+8, r24	; 0x08
    2138:	91 87       	std	Z+9, r25	; 0x09
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    213a:	f7 01       	movw	r30, r14
    213c:	86 85       	ldd	r24, Z+14	; 0x0e
    213e:	87 ff       	sbrs	r24, 7
    2140:	13 c0       	rjmp	.+38     	; 0x2168 <f_write+0x100>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2142:	20 8d       	ldd	r18, Z+24	; 0x18
    2144:	31 8d       	ldd	r19, Z+25	; 0x19
    2146:	42 8d       	ldd	r20, Z+26	; 0x1a
    2148:	53 8d       	ldd	r21, Z+27	; 0x1b
    214a:	e9 81       	ldd	r30, Y+1	; 0x01
    214c:	fa 81       	ldd	r31, Y+2	; 0x02
    214e:	01 e0       	ldi	r16, 0x01	; 1
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	81 81       	ldd	r24, Z+1	; 0x01
    2158:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    215c:	89 2b       	or	r24, r25
    215e:	a1 f6       	brne	.-88     	; 0x2108 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
    2160:	f7 01       	movw	r30, r14
    2162:	86 85       	ldd	r24, Z+14	; 0x0e
    2164:	8f 77       	andi	r24, 0x7F	; 127
    2166:	86 87       	std	Z+14, r24	; 0x0e
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2168:	29 81       	ldd	r18, Y+1	; 0x01
    216a:	3a 81       	ldd	r19, Y+2	; 0x02
    216c:	3c 83       	std	Y+4, r19	; 0x04
    216e:	2b 83       	std	Y+3, r18	; 0x03
    2170:	f7 01       	movw	r30, r14
    2172:	44 89       	ldd	r20, Z+20	; 0x14
    2174:	55 89       	ldd	r21, Z+21	; 0x15
    2176:	66 89       	ldd	r22, Z+22	; 0x16
    2178:	77 89       	ldd	r23, Z+23	; 0x17
    217a:	c9 01       	movw	r24, r18
    217c:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    2180:	61 15       	cp	r22, r1
    2182:	71 05       	cpc	r23, r1
    2184:	81 05       	cpc	r24, r1
    2186:	91 05       	cpc	r25, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <f_write+0x124>
    218a:	b1 cf       	rjmp	.-158    	; 0x20ee <f_write+0x86>
			sect += csect;
    218c:	1b 01       	movw	r2, r22
    218e:	2c 01       	movw	r4, r24
    2190:	2d 81       	ldd	r18, Y+5	; 0x05
    2192:	3e 81       	ldd	r19, Y+6	; 0x06
    2194:	22 0e       	add	r2, r18
    2196:	33 1e       	adc	r3, r19
    2198:	41 1c       	adc	r4, r1
    219a:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    219c:	64 01       	movw	r12, r8
    219e:	cd 2c       	mov	r12, r13
    21a0:	dd 24       	eor	r13, r13
    21a2:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    21a4:	c1 14       	cp	r12, r1
    21a6:	d1 04       	cpc	r13, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <f_write+0x144>
    21aa:	b8 c0       	rjmp	.+368    	; 0x231c <f_write+0x2b4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    21ac:	eb 81       	ldd	r30, Y+3	; 0x03
    21ae:	fc 81       	ldd	r31, Y+4	; 0x04
    21b0:	81 85       	ldd	r24, Z+9	; 0x09
    21b2:	92 85       	ldd	r25, Z+10	; 0x0a
    21b4:	2c 0d       	add	r18, r12
    21b6:	3d 1d       	adc	r19, r13
    21b8:	82 17       	cp	r24, r18
    21ba:	93 07       	cpc	r25, r19
    21bc:	28 f4       	brcc	.+10     	; 0x21c8 <f_write+0x160>
					cc = fs->csize - csect;
    21be:	6c 01       	movw	r12, r24
    21c0:	2d 81       	ldd	r18, Y+5	; 0x05
    21c2:	3e 81       	ldd	r19, Y+6	; 0x06
    21c4:	c2 1a       	sub	r12, r18
    21c6:	d3 0a       	sbc	r13, r19
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    21c8:	86 01       	movw	r16, r12
    21ca:	a2 01       	movw	r20, r4
    21cc:	91 01       	movw	r18, r2
    21ce:	b3 01       	movw	r22, r6
    21d0:	eb 81       	ldd	r30, Y+3	; 0x03
    21d2:	fc 81       	ldd	r31, Y+4	; 0x04
    21d4:	81 81       	ldd	r24, Z+1	; 0x01
    21d6:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    21da:	89 2b       	or	r24, r25
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <f_write+0x178>
    21de:	94 cf       	rjmp	.-216    	; 0x2108 <f_write+0xa0>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    21e0:	f7 01       	movw	r30, r14
    21e2:	80 8d       	ldd	r24, Z+24	; 0x18
    21e4:	91 8d       	ldd	r25, Z+25	; 0x19
    21e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21e8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    21ea:	82 19       	sub	r24, r2
    21ec:	93 09       	sbc	r25, r3
    21ee:	a4 09       	sbc	r26, r4
    21f0:	b5 09       	sbc	r27, r5
    21f2:	a6 01       	movw	r20, r12
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	84 17       	cp	r24, r20
    21fa:	95 07       	cpc	r25, r21
    21fc:	a6 07       	cpc	r26, r22
    21fe:	b7 07       	cpc	r27, r23
    2200:	90 f4       	brcc	.+36     	; 0x2226 <f_write+0x1be>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    2202:	fc 01       	movw	r30, r24
    2204:	fe 2f       	mov	r31, r30
    2206:	ee 27       	eor	r30, r30
    2208:	ff 0f       	add	r31, r31
    220a:	e6 0d       	add	r30, r6
    220c:	f7 1d       	adc	r31, r7
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	af 81       	ldd	r26, Y+7	; 0x07
    2214:	b8 85       	ldd	r27, Y+8	; 0x08
    2216:	01 90       	ld	r0, Z+
    2218:	0d 92       	st	X+, r0
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	e1 f7       	brne	.-8      	; 0x2216 <f_write+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
    221e:	f7 01       	movw	r30, r14
    2220:	86 85       	ldd	r24, Z+14	; 0x0e
    2222:	8f 77       	andi	r24, 0x7F	; 127
    2224:	86 87       	std	Z+14, r24	; 0x0e
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2226:	dc 2c       	mov	r13, r12
    2228:	cc 24       	eor	r12, r12
    222a:	dd 0c       	add	r13, r13
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    222c:	8c 18       	sub	r8, r12
    222e:	9d 08       	sbc	r9, r13
    2230:	e9 85       	ldd	r30, Y+9	; 0x09
    2232:	fa 85       	ldd	r31, Y+10	; 0x0a
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	8c 0d       	add	r24, r12
    223a:	9d 1d       	adc	r25, r13
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	6c 0c       	add	r6, r12
    2242:	7d 1c       	adc	r7, r13
    2244:	f7 01       	movw	r30, r14
    2246:	80 89       	ldd	r24, Z+16	; 0x10
    2248:	91 89       	ldd	r25, Z+17	; 0x11
    224a:	a2 89       	ldd	r26, Z+18	; 0x12
    224c:	b3 89       	ldd	r27, Z+19	; 0x13
    224e:	8c 0d       	add	r24, r12
    2250:	9d 1d       	adc	r25, r13
    2252:	a1 1d       	adc	r26, r1
    2254:	b1 1d       	adc	r27, r1
    2256:	80 8b       	std	Z+16, r24	; 0x10
    2258:	91 8b       	std	Z+17, r25	; 0x11
    225a:	a2 8b       	std	Z+18, r26	; 0x12
    225c:	b3 8b       	std	Z+19, r27	; 0x13
    225e:	42 85       	ldd	r20, Z+10	; 0x0a
    2260:	53 85       	ldd	r21, Z+11	; 0x0b
    2262:	64 85       	ldd	r22, Z+12	; 0x0c
    2264:	75 85       	ldd	r23, Z+13	; 0x0d
    2266:	48 17       	cp	r20, r24
    2268:	59 07       	cpc	r21, r25
    226a:	6a 07       	cpc	r22, r26
    226c:	7b 07       	cpc	r23, r27
    226e:	10 f4       	brcc	.+4      	; 0x2274 <f_write+0x20c>
    2270:	ac 01       	movw	r20, r24
    2272:	bd 01       	movw	r22, r26
    2274:	f7 01       	movw	r30, r14
    2276:	42 87       	std	Z+10, r20	; 0x0a
    2278:	53 87       	std	Z+11, r21	; 0x0b
    227a:	64 87       	std	Z+12, r22	; 0x0c
    227c:	75 87       	std	Z+13, r23	; 0x0d
    227e:	81 14       	cp	r8, r1
    2280:	91 04       	cpc	r9, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <f_write+0x21e>
    2284:	42 c0       	rjmp	.+132    	; 0x230a <f_write+0x2a2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    2286:	f7 01       	movw	r30, r14
    2288:	80 89       	ldd	r24, Z+16	; 0x10
    228a:	91 89       	ldd	r25, Z+17	; 0x11
    228c:	a2 89       	ldd	r26, Z+18	; 0x12
    228e:	b3 89       	ldd	r27, Z+19	; 0x13
    2290:	ac 01       	movw	r20, r24
    2292:	bd 01       	movw	r22, r26
    2294:	51 70       	andi	r21, 0x01	; 1
    2296:	66 27       	eor	r22, r22
    2298:	77 27       	eor	r23, r23
    229a:	45 2b       	or	r20, r21
    229c:	46 2b       	or	r20, r22
    229e:	47 2b       	or	r20, r23
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <f_write+0x23c>
    22a2:	66 c0       	rjmp	.+204    	; 0x2370 <f_write+0x308>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    22a4:	e9 81       	ldd	r30, Y+1	; 0x01
    22a6:	fa 81       	ldd	r31, Y+2	; 0x02
    22a8:	21 85       	ldd	r18, Z+9	; 0x09
    22aa:	32 85       	ldd	r19, Z+10	; 0x0a
    22ac:	21 50       	subi	r18, 0x01	; 1
    22ae:	31 09       	sbc	r19, r1
    22b0:	ac 01       	movw	r20, r24
    22b2:	bd 01       	movw	r22, r26
    22b4:	e9 e0       	ldi	r30, 0x09	; 9
    22b6:	76 95       	lsr	r23
    22b8:	67 95       	ror	r22
    22ba:	57 95       	ror	r21
    22bc:	47 95       	ror	r20
    22be:	ea 95       	dec	r30
    22c0:	d1 f7       	brne	.-12     	; 0x22b6 <f_write+0x24e>
    22c2:	f9 01       	movw	r30, r18
    22c4:	e4 23       	and	r30, r20
    22c6:	f5 23       	and	r31, r21
    22c8:	fe 83       	std	Y+6, r31	; 0x06
    22ca:	ed 83       	std	Y+5, r30	; 0x05
			if (csect == 0) {				/* On the cluster boundary? */
    22cc:	ef 2b       	or	r30, r31
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <f_write+0x26a>
    22d0:	34 cf       	rjmp	.-408    	; 0x213a <f_write+0xd2>
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
    22d2:	f7 01       	movw	r30, r14

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
    22d4:	89 2b       	or	r24, r25
    22d6:	8a 2b       	or	r24, r26
    22d8:	8b 2b       	or	r24, r27
    22da:	09 f0       	breq	.+2      	; 0x22de <f_write+0x276>
    22dc:	fe ce       	rjmp	.-516    	; 0x20da <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
    22de:	66 81       	ldd	r22, Z+6	; 0x06
    22e0:	77 81       	ldd	r23, Z+7	; 0x07
    22e2:	80 85       	ldd	r24, Z+8	; 0x08
    22e4:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    22e6:	61 15       	cp	r22, r1
    22e8:	71 05       	cpc	r23, r1
    22ea:	81 05       	cpc	r24, r1
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <f_write+0x28a>
    22f0:	f9 ce       	rjmp	.-526    	; 0x20e4 <f_write+0x7c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	ba 01       	movw	r22, r20
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    22f8:	c7 01       	movw	r24, r14
    22fa:	0e 94 04 04 	call	0x808	; 0x808 <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    22fe:	61 15       	cp	r22, r1
    2300:	71 05       	cpc	r23, r1
    2302:	81 05       	cpc	r24, r1
    2304:	91 05       	cpc	r25, r1
    2306:	09 f0       	breq	.+2      	; 0x230a <f_write+0x2a2>
    2308:	ed ce       	rjmp	.-550    	; 0x20e4 <f_write+0x7c>
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    230a:	f7 01       	movw	r30, r14
    230c:	86 85       	ldd	r24, Z+14	; 0x0e
    230e:	80 64       	ori	r24, 0x40	; 64
    2310:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
}
    2312:	c5 01       	movw	r24, r10
    2314:	2a 96       	adiw	r28, 0x0a	; 10
    2316:	e2 e1       	ldi	r30, 0x12	; 18
    2318:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    231c:	f7 01       	movw	r30, r14
    231e:	80 8d       	ldd	r24, Z+24	; 0x18
    2320:	91 8d       	ldd	r25, Z+25	; 0x19
    2322:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2324:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2326:	82 15       	cp	r24, r2
    2328:	93 05       	cpc	r25, r3
    232a:	a4 05       	cpc	r26, r4
    232c:	b5 05       	cpc	r27, r5
    232e:	d9 f0       	breq	.+54     	; 0x2366 <f_write+0x2fe>
    2330:	42 85       	ldd	r20, Z+10	; 0x0a
    2332:	53 85       	ldd	r21, Z+11	; 0x0b
    2334:	64 85       	ldd	r22, Z+12	; 0x0c
    2336:	75 85       	ldd	r23, Z+13	; 0x0d
    2338:	80 89       	ldd	r24, Z+16	; 0x10
    233a:	91 89       	ldd	r25, Z+17	; 0x11
    233c:	a2 89       	ldd	r26, Z+18	; 0x12
    233e:	b3 89       	ldd	r27, Z+19	; 0x13
    2340:	84 17       	cp	r24, r20
    2342:	95 07       	cpc	r25, r21
    2344:	a6 07       	cpc	r26, r22
    2346:	b7 07       	cpc	r27, r23
    2348:	70 f4       	brcc	.+28     	; 0x2366 <f_write+0x2fe>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
    234a:	01 e0       	ldi	r16, 0x01	; 1
    234c:	10 e0       	ldi	r17, 0x00	; 0
    234e:	a2 01       	movw	r20, r4
    2350:	91 01       	movw	r18, r2
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	eb 81       	ldd	r30, Y+3	; 0x03
    2358:	fc 81       	ldd	r31, Y+4	; 0x04
    235a:	81 81       	ldd	r24, Z+1	; 0x01
    235c:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
    2360:	89 2b       	or	r24, r25
    2362:	09 f0       	breq	.+2      	; 0x2366 <f_write+0x2fe>
    2364:	d1 ce       	rjmp	.-606    	; 0x2108 <f_write+0xa0>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    2366:	f7 01       	movw	r30, r14
    2368:	20 8e       	std	Z+24, r2	; 0x18
    236a:	31 8e       	std	Z+25, r3	; 0x19
    236c:	42 8e       	std	Z+26, r4	; 0x1a
    236e:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    2370:	f7 01       	movw	r30, r14
    2372:	80 89       	ldd	r24, Z+16	; 0x10
    2374:	91 89       	ldd	r25, Z+17	; 0x11
    2376:	91 70       	andi	r25, 0x01	; 1
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	32 e0       	ldi	r19, 0x02	; 2
    237c:	28 1b       	sub	r18, r24
    237e:	39 0b       	sbc	r19, r25
    2380:	64 01       	movw	r12, r8
    2382:	28 15       	cp	r18, r8
    2384:	39 05       	cpc	r19, r9
    2386:	08 f4       	brcc	.+2      	; 0x238a <f_write+0x322>
    2388:	69 01       	movw	r12, r18
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    238a:	a6 01       	movw	r20, r12
    238c:	b3 01       	movw	r22, r6
    238e:	2f 81       	ldd	r18, Y+7	; 0x07
    2390:	38 85       	ldd	r19, Y+8	; 0x08
    2392:	82 0f       	add	r24, r18
    2394:	93 1f       	adc	r25, r19
    2396:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <memcpy>
		fp->flag |= FA_DIRTY;
    239a:	f7 01       	movw	r30, r14
    239c:	86 85       	ldd	r24, Z+14	; 0x0e
    239e:	80 68       	ori	r24, 0x80	; 128
    23a0:	86 87       	std	Z+14, r24	; 0x0e
    23a2:	44 cf       	rjmp	.-376    	; 0x222c <f_write+0x1c4>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    23a4:	87 e0       	ldi	r24, 0x07	; 7
    23a6:	a8 2e       	mov	r10, r24
    23a8:	b1 2c       	mov	r11, r1
    23aa:	b3 cf       	rjmp	.-154    	; 0x2312 <f_write+0x2aa>

000023ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
    23ac:	a2 e0       	ldi	r26, 0x02	; 2
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ec ed       	ldi	r30, 0xDC	; 220
    23b2:	f1 e1       	ldi	r31, 0x11	; 17
    23b4:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__+0x18>
    23b8:	7c 01       	movw	r14, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    23ba:	be 01       	movw	r22, r28
    23bc:	6f 5f       	subi	r22, 0xFF	; 255
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
	if (res == FR_OK) {
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	09 f0       	breq	.+2      	; 0x23ca <f_sync+0x1e>
    23c8:	54 c0       	rjmp	.+168    	; 0x2472 <f_sync+0xc6>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    23ca:	f7 01       	movw	r30, r14
    23cc:	26 85       	ldd	r18, Z+14	; 0x0e
    23ce:	26 ff       	sbrs	r18, 6
    23d0:	50 c0       	rjmp	.+160    	; 0x2472 <f_sync+0xc6>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    23d2:	27 ff       	sbrs	r18, 7
    23d4:	15 c0       	rjmp	.+42     	; 0x2400 <f_sync+0x54>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    23d6:	20 8d       	ldd	r18, Z+24	; 0x18
    23d8:	31 8d       	ldd	r19, Z+25	; 0x19
    23da:	42 8d       	ldd	r20, Z+26	; 0x1a
    23dc:	53 8d       	ldd	r21, Z+27	; 0x1b
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	01 e0       	ldi	r16, 0x01	; 1
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	b7 01       	movw	r22, r14
    23e8:	6e 5d       	subi	r22, 0xDE	; 222
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	81 81       	ldd	r24, Z+1	; 0x01
    23ee:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    23f2:	89 2b       	or	r24, r25
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <f_sync+0x4c>
    23f6:	41 c0       	rjmp	.+130    	; 0x247a <f_sync+0xce>
				fp->flag &= (BYTE)~FA_DIRTY;
    23f8:	f7 01       	movw	r30, r14
    23fa:	86 85       	ldd	r24, Z+14	; 0x0e
    23fc:	8f 77       	andi	r24, 0x7F	; 127
    23fe:	86 87       	std	Z+14, r24	; 0x0e
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    2400:	f7 01       	movw	r30, r14
    2402:	44 8d       	ldd	r20, Z+28	; 0x1c
    2404:	55 8d       	ldd	r21, Z+29	; 0x1d
    2406:	66 8d       	ldd	r22, Z+30	; 0x1e
    2408:	77 8d       	ldd	r23, Z+31	; 0x1f
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
				if (res == FR_OK) {
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	71 f5       	brne	.+92     	; 0x2472 <f_sync+0xc6>
					dir = fp->dir_ptr;
    2416:	f7 01       	movw	r30, r14
    2418:	00 a1       	ldd	r16, Z+32	; 0x20
    241a:	11 a1       	ldd	r17, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    241c:	f8 01       	movw	r30, r16
    241e:	83 85       	ldd	r24, Z+11	; 0x0b
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    2424:	f7 01       	movw	r30, r14
    2426:	26 81       	ldd	r18, Z+6	; 0x06
    2428:	37 81       	ldd	r19, Z+7	; 0x07
    242a:	40 85       	ldd	r20, Z+8	; 0x08
    242c:	51 85       	ldd	r21, Z+9	; 0x09
    242e:	b8 01       	movw	r22, r16
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <st_clust.isra.1>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    2438:	f7 01       	movw	r30, r14
    243a:	32 85       	ldd	r19, Z+10	; 0x0a
    243c:	23 85       	ldd	r18, Z+11	; 0x0b
    243e:	94 85       	ldd	r25, Z+12	; 0x0c
    2440:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2442:	f8 01       	movw	r30, r16
    2444:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    2446:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    2448:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    244a:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    244c:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    244e:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    2450:	81 e2       	ldi	r24, 0x21	; 33
    2452:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    2454:	80 e5       	ldi	r24, 0x50	; 80
    2456:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2458:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    245a:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	21 e0       	ldi	r18, 0x01	; 1
    2462:	fc 01       	movw	r30, r24
    2464:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    2466:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    246a:	f7 01       	movw	r30, r14
    246c:	26 85       	ldd	r18, Z+14	; 0x0e
    246e:	2f 7b       	andi	r18, 0xBF	; 191
    2470:	26 87       	std	Z+14, r18	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    2472:	22 96       	adiw	r28, 0x02	; 2
    2474:	e6 e0       	ldi	r30, 0x06	; 6
    2476:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__epilogue_restores__+0x18>
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	f9 cf       	rjmp	.-14     	; 0x2472 <f_sync+0xc6>

00002480 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
    2480:	a2 e0       	ldi	r26, 0x02	; 2
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e6 e4       	ldi	r30, 0x46	; 70
    2486:	f2 e1       	ldi	r31, 0x12	; 18
    2488:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__prologue_saves__+0x1c>
    248c:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    248e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <f_sync>
	if (res == FR_OK)
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	59 f4       	brne	.+22     	; 0x24ac <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    2496:	be 01       	movw	r22, r28
    2498:	6f 5f       	subi	r22, 0xFF	; 255
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
    249c:	c8 01       	movw	r24, r16
    249e:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
		if (res == FR_OK) {
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	19 f4       	brne	.+6      	; 0x24ac <f_close+0x2c>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    24a6:	f8 01       	movw	r30, r16
    24a8:	11 82       	std	Z+1, r1	; 0x01
    24aa:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    24ac:	22 96       	adiw	r28, 0x02	; 2
    24ae:	e4 e0       	ldi	r30, 0x04	; 4
    24b0:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__epilogue_restores__+0x1c>

000024b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    24b4:	aa e0       	ldi	r26, 0x0A	; 10
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e6       	ldi	r30, 0x60	; 96
    24ba:	f2 e1       	ldi	r31, 0x12	; 18
    24bc:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__prologue_saves__+0x4>
    24c0:	7c 01       	movw	r14, r24
    24c2:	4a 01       	movw	r8, r20
    24c4:	5b 01       	movw	r10, r22
	DWORD cl, pcl, ncl, tcl, tlen, ulen;
	DWORD *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    24c6:	be 01       	movw	r22, r28
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
    24d0:	6c 01       	movw	r12, r24
	if (res == FR_OK) res = (FRESULT)fp->err;
    24d2:	89 2b       	or	r24, r25
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <f_lseek+0x24>
    24d6:	0c c1       	rjmp	.+536    	; 0x26f0 <f_lseek+0x23c>
    24d8:	d7 01       	movw	r26, r14
    24da:	1f 96       	adiw	r26, 0x0f	; 15
    24dc:	cc 90       	ld	r12, X
    24de:	1f 97       	sbiw	r26, 0x0f	; 15
    24e0:	d1 2c       	mov	r13, r1
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    24e2:	c1 14       	cp	r12, r1
    24e4:	d1 04       	cpc	r13, r1
    24e6:	09 f0       	breq	.+2      	; 0x24ea <f_lseek+0x36>
    24e8:	03 c1       	rjmp	.+518    	; 0x26f0 <f_lseek+0x23c>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    24ea:	1a 96       	adiw	r26, 0x0a	; 10
    24ec:	8d 91       	ld	r24, X+
    24ee:	9d 91       	ld	r25, X+
    24f0:	0d 90       	ld	r0, X+
    24f2:	bc 91       	ld	r27, X
    24f4:	a0 2d       	mov	r26, r0
    24f6:	88 15       	cp	r24, r8
    24f8:	99 05       	cpc	r25, r9
    24fa:	aa 05       	cpc	r26, r10
    24fc:	bb 05       	cpc	r27, r11
    24fe:	30 f4       	brcc	.+12     	; 0x250c <f_lseek+0x58>
    2500:	f7 01       	movw	r30, r14
    2502:	26 85       	ldd	r18, Z+14	; 0x0e
    2504:	21 fd       	sbrc	r18, 1
    2506:	02 c0       	rjmp	.+4      	; 0x250c <f_lseek+0x58>
    2508:	4c 01       	movw	r8, r24
    250a:	5d 01       	movw	r10, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    250c:	d7 01       	movw	r26, r14
    250e:	50 96       	adiw	r26, 0x10	; 16
    2510:	4d 90       	ld	r4, X+
    2512:	5d 90       	ld	r5, X+
    2514:	6d 90       	ld	r6, X+
    2516:	7c 90       	ld	r7, X
    2518:	53 97       	sbiw	r26, 0x13	; 19
		fp->fptr = nsect = 0;
    251a:	f7 01       	movw	r30, r14
    251c:	10 8a       	std	Z+16, r1	; 0x10
    251e:	11 8a       	std	Z+17, r1	; 0x11
    2520:	12 8a       	std	Z+18, r1	; 0x12
    2522:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    2524:	81 14       	cp	r8, r1
    2526:	91 04       	cpc	r9, r1
    2528:	a1 04       	cpc	r10, r1
    252a:	b1 04       	cpc	r11, r1
    252c:	39 f4       	brne	.+14     	; 0x253c <f_lseek+0x88>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	dc 01       	movw	r26, r24
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2534:	41 2c       	mov	r4, r1
    2536:	51 2c       	mov	r5, r1
    2538:	32 01       	movw	r6, r4
    253a:	7a c0       	rjmp	.+244    	; 0x2630 <f_lseek+0x17c>
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	81 85       	ldd	r24, Z+9	; 0x09
    2542:	92 85       	ldd	r25, Z+10	; 0x0a
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	a0 e0       	ldi	r26, 0x00	; 0
    2548:	8c 01       	movw	r16, r24
    254a:	9d 01       	movw	r18, r26
    254c:	59 e0       	ldi	r21, 0x09	; 9
    254e:	00 0f       	add	r16, r16
    2550:	11 1f       	adc	r17, r17
    2552:	22 1f       	adc	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	5a 95       	dec	r21
    2558:	d1 f7       	brne	.-12     	; 0x254e <f_lseek+0x9a>
    255a:	0b 83       	std	Y+3, r16	; 0x03
    255c:	1c 83       	std	Y+4, r17	; 0x04
    255e:	2d 83       	std	Y+5, r18	; 0x05
    2560:	3e 83       	std	Y+6, r19	; 0x06
			if (ifptr > 0 &&
    2562:	41 14       	cp	r4, r1
    2564:	51 04       	cpc	r5, r1
    2566:	61 04       	cpc	r6, r1
    2568:	71 04       	cpc	r7, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <f_lseek+0xba>
    256c:	a2 c0       	rjmp	.+324    	; 0x26b2 <f_lseek+0x1fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    256e:	11 e0       	ldi	r17, 0x01	; 1
    2570:	41 1a       	sub	r4, r17
    2572:	51 08       	sbc	r5, r1
    2574:	61 08       	sbc	r6, r1
    2576:	71 08       	sbc	r7, r1
    2578:	c5 01       	movw	r24, r10
    257a:	b4 01       	movw	r22, r8
    257c:	61 50       	subi	r22, 0x01	; 1
    257e:	71 09       	sbc	r23, r1
    2580:	81 09       	sbc	r24, r1
    2582:	91 09       	sbc	r25, r1
    2584:	2b 81       	ldd	r18, Y+3	; 0x03
    2586:	3c 81       	ldd	r19, Y+4	; 0x04
    2588:	4d 81       	ldd	r20, Y+5	; 0x05
    258a:	5e 81       	ldd	r21, Y+6	; 0x06
    258c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__udivmodsi4>
    2590:	2f 83       	std	Y+7, r18	; 0x07
    2592:	38 87       	std	Y+8, r19	; 0x08
    2594:	49 87       	std	Y+9, r20	; 0x09
    2596:	5a 87       	std	Y+10, r21	; 0x0a
    2598:	c3 01       	movw	r24, r6
    259a:	b2 01       	movw	r22, r4
    259c:	2b 81       	ldd	r18, Y+3	; 0x03
    259e:	3c 81       	ldd	r19, Y+4	; 0x04
    25a0:	4d 81       	ldd	r20, Y+5	; 0x05
    25a2:	5e 81       	ldd	r21, Y+6	; 0x06
    25a4:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__udivmodsi4>
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    25a8:	8f 81       	ldd	r24, Y+7	; 0x07
    25aa:	98 85       	ldd	r25, Y+8	; 0x08
    25ac:	a9 85       	ldd	r26, Y+9	; 0x09
    25ae:	ba 85       	ldd	r27, Y+10	; 0x0a
    25b0:	82 17       	cp	r24, r18
    25b2:	93 07       	cpc	r25, r19
    25b4:	a4 07       	cpc	r26, r20
    25b6:	b5 07       	cpc	r27, r21
    25b8:	08 f4       	brcc	.+2      	; 0x25bc <f_lseek+0x108>
    25ba:	7b c0       	rjmp	.+246    	; 0x26b2 <f_lseek+0x1fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	9c 81       	ldd	r25, Y+4	; 0x04
    25c0:	ad 81       	ldd	r26, Y+5	; 0x05
    25c2:	be 81       	ldd	r27, Y+6	; 0x06
    25c4:	b0 95       	com	r27
    25c6:	a0 95       	com	r26
    25c8:	90 95       	com	r25
    25ca:	81 95       	neg	r24
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	af 4f       	sbci	r26, 0xFF	; 255
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	84 21       	and	r24, r4
    25d4:	95 21       	and	r25, r5
    25d6:	a6 21       	and	r26, r6
    25d8:	b7 21       	and	r27, r7
    25da:	f7 01       	movw	r30, r14
    25dc:	80 8b       	std	Z+16, r24	; 0x10
    25de:	91 8b       	std	Z+17, r25	; 0x11
    25e0:	a2 8b       	std	Z+18, r26	; 0x12
    25e2:	b3 8b       	std	Z+19, r27	; 0x13
				ofs -= fp->fptr;
    25e4:	88 1a       	sub	r8, r24
    25e6:	99 0a       	sbc	r9, r25
    25e8:	aa 0a       	sbc	r10, r26
    25ea:	bb 0a       	sbc	r11, r27
				clst = fp->clust;
    25ec:	44 89       	ldd	r20, Z+20	; 0x14
    25ee:	55 89       	ldd	r21, Z+21	; 0x15
    25f0:	66 89       	ldd	r22, Z+22	; 0x16
    25f2:	77 89       	ldd	r23, Z+23	; 0x17
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
    25f4:	41 15       	cp	r20, r1
    25f6:	51 05       	cpc	r21, r1
    25f8:	61 05       	cpc	r22, r1
    25fa:	71 05       	cpc	r23, r1
    25fc:	09 f0       	breq	.+2      	; 0x2600 <f_lseek+0x14c>
    25fe:	de c0       	rjmp	.+444    	; 0x27bc <f_lseek+0x308>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2600:	41 2c       	mov	r4, r1
    2602:	51 2c       	mov	r5, r1
    2604:	32 01       	movw	r6, r4
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2606:	f7 01       	movw	r30, r14
    2608:	80 89       	ldd	r24, Z+16	; 0x10
    260a:	91 89       	ldd	r25, Z+17	; 0x11
    260c:	a2 89       	ldd	r26, Z+18	; 0x12
    260e:	b3 89       	ldd	r27, Z+19	; 0x13
    2610:	42 85       	ldd	r20, Z+10	; 0x0a
    2612:	53 85       	ldd	r21, Z+11	; 0x0b
    2614:	64 85       	ldd	r22, Z+12	; 0x0c
    2616:	75 85       	ldd	r23, Z+13	; 0x0d
    2618:	48 17       	cp	r20, r24
    261a:	59 07       	cpc	r21, r25
    261c:	6a 07       	cpc	r22, r26
    261e:	7b 07       	cpc	r23, r27
    2620:	38 f4       	brcc	.+14     	; 0x2630 <f_lseek+0x17c>
			fp->obj.objsize = fp->fptr;
    2622:	82 87       	std	Z+10, r24	; 0x0a
    2624:	93 87       	std	Z+11, r25	; 0x0b
    2626:	a4 87       	std	Z+12, r26	; 0x0c
    2628:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    262a:	26 85       	ldd	r18, Z+14	; 0x0e
    262c:	20 64       	ori	r18, 0x40	; 64
    262e:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2630:	91 70       	andi	r25, 0x01	; 1
    2632:	aa 27       	eor	r26, r26
    2634:	bb 27       	eor	r27, r27
    2636:	89 2b       	or	r24, r25
    2638:	8a 2b       	or	r24, r26
    263a:	8b 2b       	or	r24, r27
    263c:	09 f4       	brne	.+2      	; 0x2640 <f_lseek+0x18c>
    263e:	58 c0       	rjmp	.+176    	; 0x26f0 <f_lseek+0x23c>
    2640:	d7 01       	movw	r26, r14
    2642:	58 96       	adiw	r26, 0x18	; 24
    2644:	2d 91       	ld	r18, X+
    2646:	3d 91       	ld	r19, X+
    2648:	4d 91       	ld	r20, X+
    264a:	5c 91       	ld	r21, X
    264c:	5b 97       	sbiw	r26, 0x1b	; 27
    264e:	42 16       	cp	r4, r18
    2650:	53 06       	cpc	r5, r19
    2652:	64 06       	cpc	r6, r20
    2654:	75 06       	cpc	r7, r21
    2656:	09 f4       	brne	.+2      	; 0x265a <f_lseek+0x1a6>
    2658:	4b c0       	rjmp	.+150    	; 0x26f0 <f_lseek+0x23c>
    265a:	57 01       	movw	r10, r14
    265c:	b2 e2       	ldi	r27, 0x22	; 34
    265e:	ab 0e       	add	r10, r27
    2660:	b1 1c       	adc	r11, r1
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
    2662:	f7 01       	movw	r30, r14
    2664:	86 85       	ldd	r24, Z+14	; 0x0e
    2666:	87 ff       	sbrs	r24, 7
    2668:	12 c0       	rjmp	.+36     	; 0x268e <f_lseek+0x1da>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	01 e0       	ldi	r16, 0x01	; 1
    2670:	10 e0       	ldi	r17, 0x00	; 0
    2672:	b5 01       	movw	r22, r10
    2674:	81 81       	ldd	r24, Z+1	; 0x01
    2676:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    267a:	89 2b       	or	r24, r25
    267c:	09 f0       	breq	.+2      	; 0x2680 <f_lseek+0x1cc>
    267e:	43 c0       	rjmp	.+134    	; 0x2706 <f_lseek+0x252>
				fp->flag &= (BYTE)~FA_DIRTY;
    2680:	d7 01       	movw	r26, r14
    2682:	1e 96       	adiw	r26, 0x0e	; 14
    2684:	8c 91       	ld	r24, X
    2686:	1e 97       	sbiw	r26, 0x0e	; 14
    2688:	8f 77       	andi	r24, 0x7F	; 127
    268a:	1e 96       	adiw	r26, 0x0e	; 14
    268c:	8c 93       	st	X, r24
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	01 e0       	ldi	r16, 0x01	; 1
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	a3 01       	movw	r20, r6
    2698:	92 01       	movw	r18, r4
    269a:	b5 01       	movw	r22, r10
    269c:	81 81       	ldd	r24, Z+1	; 0x01
    269e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <disk_read>
    26a2:	89 2b       	or	r24, r25
    26a4:	81 f5       	brne	.+96     	; 0x2706 <f_lseek+0x252>
#endif
			fp->sect = nsect;
    26a6:	f7 01       	movw	r30, r14
    26a8:	40 8e       	std	Z+24, r4	; 0x18
    26aa:	51 8e       	std	Z+25, r5	; 0x19
    26ac:	62 8e       	std	Z+26, r6	; 0x1a
    26ae:	73 8e       	std	Z+27, r7	; 0x1b
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <f_lseek+0x23c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    26b2:	d7 01       	movw	r26, r14
    26b4:	16 96       	adiw	r26, 0x06	; 6
    26b6:	4d 91       	ld	r20, X+
    26b8:	5d 91       	ld	r21, X+
    26ba:	6d 91       	ld	r22, X+
    26bc:	7c 91       	ld	r23, X
    26be:	19 97       	sbiw	r26, 0x09	; 9
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    26c0:	41 15       	cp	r20, r1
    26c2:	51 05       	cpc	r21, r1
    26c4:	61 05       	cpc	r22, r1
    26c6:	71 05       	cpc	r23, r1
    26c8:	59 f5       	brne	.+86     	; 0x2720 <f_lseek+0x26c>
					clst = create_chain(&fp->obj, 0);
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	ba 01       	movw	r22, r20
    26d0:	c7 01       	movw	r24, r14
    26d2:	0e 94 04 04 	call	0x808	; 0x808 <create_chain>
    26d6:	ab 01       	movw	r20, r22
    26d8:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    26da:	41 30       	cpi	r20, 0x01	; 1
    26dc:	51 05       	cpc	r21, r1
    26de:	61 05       	cpc	r22, r1
    26e0:	71 05       	cpc	r23, r1
    26e2:	59 f4       	brne	.+22     	; 0x26fa <f_lseek+0x246>
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	f7 01       	movw	r30, r14
    26e8:	87 87       	std	Z+15, r24	; 0x0f
    26ea:	42 e0       	ldi	r20, 0x02	; 2
    26ec:	c4 2e       	mov	r12, r20
    26ee:	d1 2c       	mov	r13, r1
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
    26f0:	c6 01       	movw	r24, r12
    26f2:	2a 96       	adiw	r28, 0x0a	; 10
    26f4:	e0 e1       	ldi	r30, 0x10	; 16
    26f6:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__epilogue_restores__+0x4>
				clst = fp->obj.sclust;					/* start from the first cluster */
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(&fp->obj, 0);
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    26fa:	4f 3f       	cpi	r20, 0xFF	; 255
    26fc:	ff ef       	ldi	r31, 0xFF	; 255
    26fe:	5f 07       	cpc	r21, r31
    2700:	6f 07       	cpc	r22, r31
    2702:	7f 07       	cpc	r23, r31
    2704:	41 f4       	brne	.+16     	; 0x2716 <f_lseek+0x262>
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	d7 01       	movw	r26, r14
    270a:	1f 96       	adiw	r26, 0x0f	; 15
    270c:	8c 93       	st	X, r24
    270e:	cc 24       	eor	r12, r12
    2710:	c3 94       	inc	r12
    2712:	d1 2c       	mov	r13, r1
    2714:	ed cf       	rjmp	.-38     	; 0x26f0 <f_lseek+0x23c>
					fp->obj.sclust = clst;
    2716:	f7 01       	movw	r30, r14
    2718:	46 83       	std	Z+6, r20	; 0x06
    271a:	57 83       	std	Z+7, r21	; 0x07
    271c:	60 87       	std	Z+8, r22	; 0x08
    271e:	71 87       	std	Z+9, r23	; 0x09
				}
#endif
				fp->clust = clst;
    2720:	d7 01       	movw	r26, r14
    2722:	54 96       	adiw	r26, 0x14	; 20
    2724:	4d 93       	st	X+, r20
    2726:	5d 93       	st	X+, r21
    2728:	6d 93       	st	X+, r22
    272a:	7c 93       	st	X, r23
    272c:	57 97       	sbiw	r26, 0x17	; 23
    272e:	62 cf       	rjmp	.-316    	; 0x25f4 <f_lseek+0x140>
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
					ofs -= bcs; fp->fptr += bcs;
    2730:	0b 81       	ldd	r16, Y+3	; 0x03
    2732:	1c 81       	ldd	r17, Y+4	; 0x04
    2734:	2d 81       	ldd	r18, Y+5	; 0x05
    2736:	3e 81       	ldd	r19, Y+6	; 0x06
    2738:	80 1a       	sub	r8, r16
    273a:	91 0a       	sbc	r9, r17
    273c:	a2 0a       	sbc	r10, r18
    273e:	b3 0a       	sbc	r11, r19
    2740:	80 0f       	add	r24, r16
    2742:	91 1f       	adc	r25, r17
    2744:	a2 1f       	adc	r26, r18
    2746:	b3 1f       	adc	r27, r19
    2748:	f7 01       	movw	r30, r14
    274a:	80 8b       	std	Z+16, r24	; 0x10
    274c:	91 8b       	std	Z+17, r25	; 0x11
    274e:	a2 8b       	std	Z+18, r26	; 0x12
    2750:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2752:	86 85       	ldd	r24, Z+14	; 0x0e
    2754:	81 ff       	sbrs	r24, 1
    2756:	0e c0       	rjmp	.+28     	; 0x2774 <f_lseek+0x2c0>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2758:	c7 01       	movw	r24, r14
    275a:	0e 94 04 04 	call	0x808	; 0x808 <create_chain>
    275e:	ab 01       	movw	r20, r22
    2760:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    2762:	41 15       	cp	r20, r1
    2764:	51 05       	cpc	r21, r1
    2766:	61 05       	cpc	r22, r1
    2768:	71 05       	cpc	r23, r1
    276a:	51 f4       	brne	.+20     	; 0x2780 <f_lseek+0x2cc>
							ofs = 0; break;
    276c:	81 2c       	mov	r8, r1
    276e:	91 2c       	mov	r9, r1
    2770:	54 01       	movw	r10, r8
    2772:	33 c0       	rjmp	.+102    	; 0x27da <f_lseek+0x326>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
    277c:	ab 01       	movw	r20, r22
    277e:	bc 01       	movw	r22, r24
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2780:	4f 3f       	cpi	r20, 0xFF	; 255
    2782:	bf ef       	ldi	r27, 0xFF	; 255
    2784:	5b 07       	cpc	r21, r27
    2786:	6b 07       	cpc	r22, r27
    2788:	7b 07       	cpc	r23, r27
    278a:	09 f4       	brne	.+2      	; 0x278e <f_lseek+0x2da>
    278c:	bc cf       	rjmp	.-136    	; 0x2706 <f_lseek+0x252>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    278e:	42 30       	cpi	r20, 0x02	; 2
    2790:	51 05       	cpc	r21, r1
    2792:	61 05       	cpc	r22, r1
    2794:	71 05       	cpc	r23, r1
    2796:	08 f4       	brcc	.+2      	; 0x279a <f_lseek+0x2e6>
    2798:	a5 cf       	rjmp	.-182    	; 0x26e4 <f_lseek+0x230>
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	83 89       	ldd	r24, Z+19	; 0x13
    27a0:	94 89       	ldd	r25, Z+20	; 0x14
    27a2:	a5 89       	ldd	r26, Z+21	; 0x15
    27a4:	b6 89       	ldd	r27, Z+22	; 0x16
    27a6:	48 17       	cp	r20, r24
    27a8:	59 07       	cpc	r21, r25
    27aa:	6a 07       	cpc	r22, r26
    27ac:	7b 07       	cpc	r23, r27
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <f_lseek+0x2fe>
    27b0:	99 cf       	rjmp	.-206    	; 0x26e4 <f_lseek+0x230>
					fp->clust = clst;
    27b2:	f7 01       	movw	r30, r14
    27b4:	44 8b       	std	Z+20, r20	; 0x14
    27b6:	55 8b       	std	Z+21, r21	; 0x15
    27b8:	66 8b       	std	Z+22, r22	; 0x16
    27ba:	77 8b       	std	Z+23, r23	; 0x17
    27bc:	f7 01       	movw	r30, r14
    27be:	80 89       	ldd	r24, Z+16	; 0x10
    27c0:	91 89       	ldd	r25, Z+17	; 0x11
    27c2:	a2 89       	ldd	r26, Z+18	; 0x12
    27c4:	b3 89       	ldd	r27, Z+19	; 0x13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    27c6:	0b 81       	ldd	r16, Y+3	; 0x03
    27c8:	1c 81       	ldd	r17, Y+4	; 0x04
    27ca:	2d 81       	ldd	r18, Y+5	; 0x05
    27cc:	3e 81       	ldd	r19, Y+6	; 0x06
    27ce:	08 15       	cp	r16, r8
    27d0:	19 05       	cpc	r17, r9
    27d2:	2a 05       	cpc	r18, r10
    27d4:	3b 05       	cpc	r19, r11
    27d6:	08 f4       	brcc	.+2      	; 0x27da <f_lseek+0x326>
    27d8:	ab cf       	rjmp	.-170    	; 0x2730 <f_lseek+0x27c>
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    27da:	f7 01       	movw	r30, r14
    27dc:	80 89       	ldd	r24, Z+16	; 0x10
    27de:	91 89       	ldd	r25, Z+17	; 0x11
    27e0:	a2 89       	ldd	r26, Z+18	; 0x12
    27e2:	b3 89       	ldd	r27, Z+19	; 0x13
    27e4:	88 0d       	add	r24, r8
    27e6:	99 1d       	adc	r25, r9
    27e8:	aa 1d       	adc	r26, r10
    27ea:	bb 1d       	adc	r27, r11
    27ec:	80 8b       	std	Z+16, r24	; 0x10
    27ee:	91 8b       	std	Z+17, r25	; 0x11
    27f0:	a2 8b       	std	Z+18, r26	; 0x12
    27f2:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    27f4:	d5 01       	movw	r26, r10
    27f6:	c4 01       	movw	r24, r8
    27f8:	91 70       	andi	r25, 0x01	; 1
    27fa:	aa 27       	eor	r26, r26
    27fc:	bb 27       	eor	r27, r27
    27fe:	89 2b       	or	r24, r25
    2800:	8a 2b       	or	r24, r26
    2802:	8b 2b       	or	r24, r27
    2804:	09 f4       	brne	.+2      	; 0x2808 <f_lseek+0x354>
    2806:	fc ce       	rjmp	.-520    	; 0x2600 <f_lseek+0x14c>
					nsect = clst2sect(fs, clst);	/* Current sector */
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    2810:	61 15       	cp	r22, r1
    2812:	71 05       	cpc	r23, r1
    2814:	81 05       	cpc	r24, r1
    2816:	91 05       	cpc	r25, r1
    2818:	09 f4       	brne	.+2      	; 0x281c <f_lseek+0x368>
    281a:	64 cf       	rjmp	.-312    	; 0x26e4 <f_lseek+0x230>
					nsect += (DWORD)(ofs / SS(fs));
    281c:	29 e0       	ldi	r18, 0x09	; 9
    281e:	b6 94       	lsr	r11
    2820:	a7 94       	ror	r10
    2822:	97 94       	ror	r9
    2824:	87 94       	ror	r8
    2826:	2a 95       	dec	r18
    2828:	d1 f7       	brne	.-12     	; 0x281e <f_lseek+0x36a>
    282a:	24 01       	movw	r4, r8
    282c:	35 01       	movw	r6, r10
    282e:	46 0e       	add	r4, r22
    2830:	57 1e       	adc	r5, r23
    2832:	68 1e       	adc	r6, r24
    2834:	79 1e       	adc	r7, r25
    2836:	e7 ce       	rjmp	.-562    	; 0x2606 <f_lseek+0x152>

00002838 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    2838:	a4 e0       	ldi	r26, 0x04	; 4
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e2 e2       	ldi	r30, 0x22	; 34
    283e:	f4 e1       	ldi	r31, 0x14	; 20
    2840:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__prologue_saves__+0x1c>
    2844:	7c 83       	std	Y+4, r23	; 0x04
    2846:	6b 83       	std	Y+3, r22	; 0x03
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	09 f4       	brne	.+2      	; 0x284e <f_opendir+0x16>
    284c:	43 c0       	rjmp	.+134    	; 0x28d4 <f_opendir+0x9c>
    284e:	8c 01       	movw	r16, r24

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	be 01       	movw	r22, r28
    2854:	6f 5f       	subi	r22, 0xFF	; 255
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	ce 01       	movw	r24, r28
    285a:	03 96       	adiw	r24, 0x03	; 3
    285c:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
	if (res == FR_OK) {
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	a9 f4       	brne	.+42     	; 0x288e <f_opendir+0x56>
		dp->obj.fs = fs;
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	f8 01       	movw	r30, r16
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    286e:	6b 81       	ldd	r22, Y+3	; 0x03
    2870:	7c 81       	ldd	r23, Y+4	; 0x04
    2872:	c8 01       	movw	r24, r16
    2874:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	79 f5       	brne	.+94     	; 0x28da <f_opendir+0xa2>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    287c:	f8 01       	movw	r30, r16
    287e:	87 a1       	ldd	r24, Z+39	; 0x27
    2880:	87 fd       	sbrc	r24, 7
    2882:	15 c0       	rjmp	.+42     	; 0x28ae <f_opendir+0x76>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    2884:	84 81       	ldd	r24, Z+4	; 0x04
    2886:	84 fd       	sbrc	r24, 4
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <f_opendir+0x5e>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    288a:	85 e0       	ldi	r24, 0x05	; 5
    288c:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    288e:	f8 01       	movw	r30, r16
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	10 82       	st	Z, r1
    2894:	1b c0       	rjmp	.+54     	; 0x28cc <f_opendir+0x94>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    2896:	62 8d       	ldd	r22, Z+26	; 0x1a
    2898:	73 8d       	ldd	r23, Z+27	; 0x1b
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	80 81       	ld	r24, Z
    28a0:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    28a4:	f8 01       	movw	r30, r16
    28a6:	66 83       	std	Z+6, r22	; 0x06
    28a8:	77 83       	std	Z+7, r23	; 0x07
    28aa:	80 87       	std	Z+8, r24	; 0x08
    28ac:	91 87       	std	Z+9, r25	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dp->obj.id = fs->id;
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	85 81       	ldd	r24, Z+5	; 0x05
    28b4:	96 81       	ldd	r25, Z+6	; 0x06
    28b6:	f8 01       	movw	r30, r16
    28b8:	93 83       	std	Z+3, r25	; 0x03
    28ba:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	91 05       	cpc	r25, r1
    28c6:	09 f3       	breq	.-62     	; 0x288a <f_opendir+0x52>
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	09 f7       	brne	.-62     	; 0x288e <f_opendir+0x56>

	LEAVE_FF(fs, res);
}
    28cc:	24 96       	adiw	r28, 0x04	; 4
    28ce:	e4 e0       	ldi	r30, 0x04	; 4
    28d0:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__epilogue_restores__+0x1c>
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    28d4:	89 e0       	ldi	r24, 0x09	; 9
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	f9 cf       	rjmp	.-14     	; 0x28cc <f_opendir+0x94>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    28da:	84 30       	cpi	r24, 0x04	; 4
    28dc:	91 05       	cpc	r25, r1
    28de:	a9 f2       	breq	.-86     	; 0x288a <f_opendir+0x52>
    28e0:	d6 cf       	rjmp	.-84     	; 0x288e <f_opendir+0x56>

000028e2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    28e2:	a2 e0       	ldi	r26, 0x02	; 2
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e7 e7       	ldi	r30, 0x77	; 119
    28e8:	f4 e1       	ldi	r31, 0x14	; 20
    28ea:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__prologue_saves__+0x1c>
    28ee:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
    28f0:	be 01       	movw	r22, r28
    28f2:	6f 5f       	subi	r22, 0xFF	; 255
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255
    28f6:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
	if (res == FR_OK) {
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	19 f4       	brne	.+6      	; 0x2904 <f_closedir+0x22>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
    28fe:	f8 01       	movw	r30, r16
    2900:	11 82       	std	Z+1, r1	; 0x01
    2902:	10 82       	st	Z, r1
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    2904:	22 96       	adiw	r28, 0x02	; 2
    2906:	e4 e0       	ldi	r30, 0x04	; 4
    2908:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__epilogue_restores__+0x1c>

0000290c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    290c:	a2 e0       	ldi	r26, 0x02	; 2
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ec e8       	ldi	r30, 0x8C	; 140
    2912:	f4 e1       	ldi	r31, 0x14	; 20
    2914:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__+0x18>
    2918:	8c 01       	movw	r16, r24
    291a:	7b 01       	movw	r14, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    291c:	be 01       	movw	r22, r28
    291e:	6f 5f       	subi	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
	if (res == FR_OK) {
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	31 f4       	brne	.+12     	; 0x2936 <f_readdir+0x2a>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    292a:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
    292c:	e1 14       	cp	r14, r1
    292e:	f1 04       	cpc	r15, r1
    2930:	31 f4       	brne	.+12     	; 0x293e <f_readdir+0x32>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2932:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    2936:	22 96       	adiw	r28, 0x02	; 2
    2938:	e6 e0       	ldi	r30, 0x06	; 6
    293a:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__epilogue_restores__+0x18>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
    293e:	0e 94 9c 08 	call	0x1138	; 0x1138 <dir_read.constprop.12>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    2942:	9c 01       	movw	r18, r24
    2944:	2b 7f       	andi	r18, 0xFB	; 251
    2946:	23 2b       	or	r18, r19
    2948:	b1 f7       	brne	.-20     	; 0x2936 <f_readdir+0x2a>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    294a:	f7 01       	movw	r30, r14
    294c:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    294e:	f8 01       	movw	r30, r16
    2950:	86 89       	ldd	r24, Z+22	; 0x16
    2952:	97 89       	ldd	r25, Z+23	; 0x17
    2954:	a0 8d       	ldd	r26, Z+24	; 0x18
    2956:	b1 8d       	ldd	r27, Z+25	; 0x19
    2958:	89 2b       	or	r24, r25
    295a:	8a 2b       	or	r24, r26
    295c:	8b 2b       	or	r24, r27
    295e:	21 f0       	breq	.+8      	; 0x2968 <f_readdir+0x5c>
    2960:	b7 01       	movw	r22, r14
    2962:	c8 01       	movw	r24, r16
    2964:	0e 94 01 01 	call	0x202	; 0x202 <get_fileinfo.part.2>
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 9b 06 	call	0xd36	; 0xd36 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    2972:	84 30       	cpi	r24, 0x04	; 4
    2974:	91 05       	cpc	r25, r1
    2976:	f9 f6       	brne	.-66     	; 0x2936 <f_readdir+0x2a>
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	80 e0       	ldi	r24, 0x00	; 0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
    297c:	dc cf       	rjmp	.-72     	; 0x2936 <f_readdir+0x2a>

0000297e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	a0 e0       	ldi	r26, 0x00	; 0
    2982:	e5 ec       	ldi	r30, 0xC5	; 197
    2984:	f4 e1       	ldi	r31, 0x14	; 20
    2986:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__+0x14>
    298a:	7c 01       	movw	r14, r24
    298c:	eb 01       	movw	r28, r22


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_match(dp->pat, fno->fname, 0, FIND_RECURS)) break;		/* Test for the file name */
    298e:	6b 01       	movw	r12, r22
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	c8 0e       	add	r12, r24
    2994:	d1 1c       	adc	r13, r1
{
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
    2996:	be 01       	movw	r22, r28
    2998:	c7 01       	movw	r24, r14
    299a:	0e 94 86 14 	call	0x290c	; 0x290c <f_readdir>
    299e:	8c 01       	movw	r16, r24
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
    29a0:	89 2b       	or	r24, r25
    29a2:	89 f4       	brne	.+34     	; 0x29c6 <f_findnext+0x48>
    29a4:	20 97       	sbiw	r28, 0x00	; 0
    29a6:	79 f0       	breq	.+30     	; 0x29c6 <f_findnext+0x48>
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	88 23       	and	r24, r24
    29ac:	61 f0       	breq	.+24     	; 0x29c6 <f_findnext+0x48>
		if (pattern_match(dp->pat, fno->fname, 0, FIND_RECURS)) break;		/* Test for the file name */
    29ae:	24 e0       	ldi	r18, 0x04	; 4
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	b6 01       	movw	r22, r12
    29b8:	f7 01       	movw	r30, r14
    29ba:	80 a5       	ldd	r24, Z+40	; 0x28
    29bc:	91 a5       	ldd	r25, Z+41	; 0x29
    29be:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <pattern_match>
    29c2:	89 2b       	or	r24, r25
    29c4:	41 f3       	breq	.-48     	; 0x2996 <f_findnext+0x18>
#if FF_USE_LFN && FF_USE_FIND == 2
		if (pattern_match(dp->pat, fno->altname, 0, FIND_RECURS)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
    29c6:	c8 01       	movw	r24, r16
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	e8 e0       	ldi	r30, 0x08	; 8
    29ce:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__+0x14>

000029d2 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	ec 01       	movw	r28, r24
    29dc:	8b 01       	movw	r16, r22
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
    29de:	39 a7       	std	Y+41, r19	; 0x29
    29e0:	28 a7       	std	Y+40, r18	; 0x28
	res = f_opendir(dp, path);		/* Open the target directory */
    29e2:	ba 01       	movw	r22, r20
    29e4:	0e 94 1c 14 	call	0x2838	; 0x2838 <f_opendir>
	if (res == FR_OK) {
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	21 f4       	brne	.+8      	; 0x29f4 <f_findfirst+0x22>
		res = f_findnext(dp, fno);	/* Find the first item */
    29ec:	b8 01       	movw	r22, r16
    29ee:	ce 01       	movw	r24, r28
    29f0:	0e 94 bf 14 	call	0x297e	; 0x297e <f_findnext>
	}
	return res;
}
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	08 95       	ret

000029fe <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    29fe:	ac e2       	ldi	r26, 0x2C	; 44
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e0       	ldi	r30, 0x05	; 5
    2a04:	f5 e1       	ldi	r31, 0x15	; 21
    2a06:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__+0x18>
    2a0a:	9c a7       	std	Y+44, r25	; 0x2c
    2a0c:	8b a7       	std	Y+43, r24	; 0x2b
    2a0e:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	be 01       	movw	r22, r28
    2a14:	6f 5f       	subi	r22, 0xFF	; 255
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	ce 01       	movw	r24, r28
    2a1a:	8b 96       	adiw	r24, 0x2b	; 43
    2a1c:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
    2a20:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    2a22:	89 2b       	or	r24, r25
    2a24:	f1 f4       	brne	.+60     	; 0x2a62 <f_stat+0x64>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    2a26:	6b a5       	ldd	r22, Y+43	; 0x2b
    2a28:	7c a5       	ldd	r23, Y+44	; 0x2c
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
    2a32:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    2a34:	89 2b       	or	r24, r25
    2a36:	a9 f4       	brne	.+42     	; 0x2a62 <f_stat+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    2a38:	88 a5       	ldd	r24, Y+40	; 0x28
    2a3a:	87 fd       	sbrc	r24, 7
    2a3c:	17 c0       	rjmp	.+46     	; 0x2a6c <f_stat+0x6e>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    2a3e:	e1 14       	cp	r14, r1
    2a40:	f1 04       	cpc	r15, r1
    2a42:	79 f0       	breq	.+30     	; 0x2a62 <f_stat+0x64>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    2a44:	f7 01       	movw	r30, r14
    2a46:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    2a48:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4c:	a9 8d       	ldd	r26, Y+25	; 0x19
    2a4e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2a50:	89 2b       	or	r24, r25
    2a52:	8a 2b       	or	r24, r26
    2a54:	8b 2b       	or	r24, r27
    2a56:	29 f0       	breq	.+10     	; 0x2a62 <f_stat+0x64>
    2a58:	b7 01       	movw	r22, r14
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	0e 94 01 01 	call	0x202	; 0x202 <get_fileinfo.part.2>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    2a62:	c8 01       	movw	r24, r16
    2a64:	ac 96       	adiw	r28, 0x2c	; 44
    2a66:	e6 e0       	ldi	r30, 0x06	; 6
    2a68:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__epilogue_restores__+0x18>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    2a6c:	06 e0       	ldi	r16, 0x06	; 6
    2a6e:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
    2a70:	f8 cf       	rjmp	.-16     	; 0x2a62 <f_stat+0x64>

00002a72 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
    2a72:	aa e0       	ldi	r26, 0x0A	; 10
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	ef e3       	ldi	r30, 0x3F	; 63
    2a78:	f5 e1       	ldi	r31, 0x15	; 21
    2a7a:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
    2a82:	7e 83       	std	Y+6, r23	; 0x06
    2a84:	6d 83       	std	Y+5, r22	; 0x05
    2a86:	7a 01       	movw	r14, r20
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	be 01       	movw	r22, r28
    2a8c:	6f 5f       	subi	r22, 0xFF	; 255
    2a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a90:	ce 01       	movw	r24, r28
    2a92:	03 96       	adiw	r24, 0x03	; 3
    2a94:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
    2a98:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    2a9a:	89 2b       	or	r24, r25
    2a9c:	f9 f4       	brne	.+62     	; 0x2adc <f_getfree+0x6a>
		*fatfs = fs;				/* Return ptr to the fs object */
    2a9e:	69 80       	ldd	r6, Y+1	; 0x01
    2aa0:	7a 80       	ldd	r7, Y+2	; 0x02
    2aa2:	d7 01       	movw	r26, r14
    2aa4:	6d 92       	st	X+, r6
    2aa6:	7c 92       	st	X, r7
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    2aa8:	f3 01       	movw	r30, r6
    2aaa:	87 85       	ldd	r24, Z+15	; 0x0f
    2aac:	90 89       	ldd	r25, Z+16	; 0x10
    2aae:	a1 89       	ldd	r26, Z+17	; 0x11
    2ab0:	b2 89       	ldd	r27, Z+18	; 0x12
    2ab2:	83 88       	ldd	r8, Z+19	; 0x13
    2ab4:	94 88       	ldd	r9, Z+20	; 0x14
    2ab6:	a5 88       	ldd	r10, Z+21	; 0x15
    2ab8:	b6 88       	ldd	r11, Z+22	; 0x16
    2aba:	b5 01       	movw	r22, r10
    2abc:	a4 01       	movw	r20, r8
    2abe:	42 50       	subi	r20, 0x02	; 2
    2ac0:	51 09       	sbc	r21, r1
    2ac2:	61 09       	sbc	r22, r1
    2ac4:	71 09       	sbc	r23, r1
    2ac6:	48 17       	cp	r20, r24
    2ac8:	59 07       	cpc	r21, r25
    2aca:	6a 07       	cpc	r22, r26
    2acc:	7b 07       	cpc	r23, r27
    2ace:	58 f0       	brcs	.+22     	; 0x2ae6 <f_getfree+0x74>
			*nclst = fs->free_clst;
    2ad0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ad2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ad4:	80 83       	st	Z, r24
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	a2 83       	std	Z+2, r26	; 0x02
    2ada:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
	}

	LEAVE_FF(fs, res);
}
    2adc:	c8 01       	movw	r24, r16
    2ade:	2a 96       	adiw	r28, 0x0a	; 10
    2ae0:	e2 e1       	ldi	r30, 0x12	; 18
    2ae2:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
    2ae6:	80 81       	ld	r24, Z
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	09 f0       	breq	.+2      	; 0x2aee <f_getfree+0x7c>
    2aec:	44 c0       	rjmp	.+136    	; 0x2b76 <f_getfree+0x104>
				clst = 2; obj.fs = fs;
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	88 2e       	mov	r8, r24
    2af2:	91 2c       	mov	r9, r1
    2af4:	a1 2c       	mov	r10, r1
    2af6:	b1 2c       	mov	r11, r1
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
    2af8:	c1 2c       	mov	r12, r1
    2afa:	d1 2c       	mov	r13, r1
    2afc:	76 01       	movw	r14, r12
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    2afe:	b5 01       	movw	r22, r10
    2b00:	a4 01       	movw	r20, r8
    2b02:	c3 01       	movw	r24, r6
    2b04:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2b08:	6f 3f       	cpi	r22, 0xFF	; 255
    2b0a:	bf ef       	ldi	r27, 0xFF	; 255
    2b0c:	7b 07       	cpc	r23, r27
    2b0e:	8b 07       	cpc	r24, r27
    2b10:	9b 07       	cpc	r25, r27
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <f_getfree+0xa4>
    2b14:	80 c0       	rjmp	.+256    	; 0x2c16 <f_getfree+0x1a4>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2b16:	61 30       	cpi	r22, 0x01	; 1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	81 05       	cpc	r24, r1
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <f_getfree+0xb0>
    2b20:	7d c0       	rjmp	.+250    	; 0x2c1c <f_getfree+0x1aa>
					if (stat == 0) nfree++;
    2b22:	67 2b       	or	r22, r23
    2b24:	68 2b       	or	r22, r24
    2b26:	69 2b       	or	r22, r25
    2b28:	29 f4       	brne	.+10     	; 0x2b34 <f_getfree+0xc2>
    2b2a:	ef ef       	ldi	r30, 0xFF	; 255
    2b2c:	ce 1a       	sub	r12, r30
    2b2e:	de 0a       	sbc	r13, r30
    2b30:	ee 0a       	sbc	r14, r30
    2b32:	fe 0a       	sbc	r15, r30
				} while (++clst < fs->n_fatent);
    2b34:	ff ef       	ldi	r31, 0xFF	; 255
    2b36:	8f 1a       	sub	r8, r31
    2b38:	9f 0a       	sbc	r9, r31
    2b3a:	af 0a       	sbc	r10, r31
    2b3c:	bf 0a       	sbc	r11, r31
    2b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b40:	fa 81       	ldd	r31, Y+2	; 0x02
    2b42:	83 89       	ldd	r24, Z+19	; 0x13
    2b44:	94 89       	ldd	r25, Z+20	; 0x14
    2b46:	a5 89       	ldd	r26, Z+21	; 0x15
    2b48:	b6 89       	ldd	r27, Z+22	; 0x16
    2b4a:	88 16       	cp	r8, r24
    2b4c:	99 06       	cpc	r9, r25
    2b4e:	aa 06       	cpc	r10, r26
    2b50:	bb 06       	cpc	r11, r27
    2b52:	a8 f2       	brcs	.-86     	; 0x2afe <f_getfree+0x8c>
						i %= SS(fs);
					} while (--clst);
				}
			}
			if (res == FR_OK) {		/* Update parameters if succeeded */
				*nclst = nfree;			/* Return the free clusters */
    2b54:	ad 81       	ldd	r26, Y+5	; 0x05
    2b56:	be 81       	ldd	r27, Y+6	; 0x06
    2b58:	cd 92       	st	X+, r12
    2b5a:	dd 92       	st	X+, r13
    2b5c:	ed 92       	st	X+, r14
    2b5e:	fc 92       	st	X, r15
    2b60:	13 97       	sbiw	r26, 0x03	; 3
				fs->free_clst = nfree;	/* Now free_clst is valid */
    2b62:	e9 81       	ldd	r30, Y+1	; 0x01
    2b64:	fa 81       	ldd	r31, Y+2	; 0x02
    2b66:	c7 86       	std	Z+15, r12	; 0x0f
    2b68:	d0 8a       	std	Z+16, r13	; 0x10
    2b6a:	e1 8a       	std	Z+17, r14	; 0x11
    2b6c:	f2 8a       	std	Z+18, r15	; 0x12
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
    2b6e:	84 81       	ldd	r24, Z+4	; 0x04
    2b70:	81 60       	ori	r24, 0x01	; 1
    2b72:	84 83       	std	Z+4, r24	; 0x04
    2b74:	b3 cf       	rjmp	.-154    	; 0x2adc <f_getfree+0x6a>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
    2b76:	47 8c       	ldd	r4, Z+31	; 0x1f
    2b78:	50 a0       	ldd	r5, Z+32	; 0x20
    2b7a:	61 a0       	ldd	r6, Z+33	; 0x21
    2b7c:	72 a0       	ldd	r7, Z+34	; 0x22
					i = 0;					/* Offset in the sector */
    2b7e:	31 2c       	mov	r3, r1
    2b80:	21 2c       	mov	r2, r1
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
    2b82:	c1 2c       	mov	r12, r1
    2b84:	d1 2c       	mov	r13, r1
    2b86:	76 01       	movw	r14, r12
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
    2b88:	21 14       	cp	r2, r1
    2b8a:	31 04       	cpc	r3, r1
    2b8c:	a9 f4       	brne	.+42     	; 0x2bb8 <f_getfree+0x146>
							res = move_window(fs, sect++);
    2b8e:	d3 01       	movw	r26, r6
    2b90:	c2 01       	movw	r24, r4
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	a1 1d       	adc	r26, r1
    2b96:	b1 1d       	adc	r27, r1
    2b98:	8f 83       	std	Y+7, r24	; 0x07
    2b9a:	98 87       	std	Y+8, r25	; 0x08
    2b9c:	a9 87       	std	Y+9, r26	; 0x09
    2b9e:	ba 87       	std	Y+10, r27	; 0x0a
    2ba0:	b3 01       	movw	r22, r6
    2ba2:	a2 01       	movw	r20, r4
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
							if (res != FR_OK) break;
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	c9 f5       	brne	.+114    	; 0x2c22 <f_getfree+0x1b0>
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
    2bb0:	4f 80       	ldd	r4, Y+7	; 0x07
    2bb2:	58 84       	ldd	r5, Y+8	; 0x08
    2bb4:	69 84       	ldd	r6, Y+9	; 0x09
    2bb6:	7a 84       	ldd	r7, Y+10	; 0x0a
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
    2bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bba:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbc:	cf 01       	movw	r24, r30
    2bbe:	8f 96       	adiw	r24, 0x2f	; 47
    2bc0:	82 0d       	add	r24, r2
    2bc2:	93 1d       	adc	r25, r3
    2bc4:	20 81       	ld	r18, Z
    2bc6:	22 30       	cpi	r18, 0x02	; 2
    2bc8:	b1 f4       	brne	.+44     	; 0x2bf6 <f_getfree+0x184>
							if (ld_word(fs->win + i) == 0) nfree++;
    2bca:	dc 01       	movw	r26, r24
    2bcc:	8d 91       	ld	r24, X+
    2bce:	9c 91       	ld	r25, X
    2bd0:	89 2b       	or	r24, r25
    2bd2:	29 f4       	brne	.+10     	; 0x2bde <f_getfree+0x16c>
    2bd4:	bf ef       	ldi	r27, 0xFF	; 255
    2bd6:	cb 1a       	sub	r12, r27
    2bd8:	db 0a       	sbc	r13, r27
    2bda:	eb 0a       	sbc	r14, r27
    2bdc:	fb 0a       	sbc	r15, r27
							i += 2;
    2bde:	e2 e0       	ldi	r30, 0x02	; 2
    2be0:	2e 0e       	add	r2, r30
    2be2:	31 1c       	adc	r3, r1
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
							i += 4;
						}
						i %= SS(fs);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	38 22       	and	r3, r24
					} while (--clst);
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	89 1a       	sub	r8, r25
    2bec:	91 08       	sbc	r9, r1
    2bee:	a1 08       	sbc	r10, r1
    2bf0:	b1 08       	sbc	r11, r1
    2bf2:	51 f6       	brne	.-108    	; 0x2b88 <f_getfree+0x116>
    2bf4:	af cf       	rjmp	.-162    	; 0x2b54 <f_getfree+0xe2>
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(fs->win + i) == 0) nfree++;
							i += 2;
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
    2bf6:	0e 94 53 00 	call	0xa6	; 0xa6 <ld_dword>
    2bfa:	9f 70       	andi	r25, 0x0F	; 15
    2bfc:	67 2b       	or	r22, r23
    2bfe:	68 2b       	or	r22, r24
    2c00:	69 2b       	or	r22, r25
    2c02:	29 f4       	brne	.+10     	; 0x2c0e <f_getfree+0x19c>
    2c04:	ff ef       	ldi	r31, 0xFF	; 255
    2c06:	cf 1a       	sub	r12, r31
    2c08:	df 0a       	sbc	r13, r31
    2c0a:	ef 0a       	sbc	r14, r31
    2c0c:	ff 0a       	sbc	r15, r31
							i += 4;
    2c0e:	24 e0       	ldi	r18, 0x04	; 4
    2c10:	22 0e       	add	r2, r18
    2c12:	31 1c       	adc	r3, r1
    2c14:	e7 cf       	rjmp	.-50     	; 0x2be4 <f_getfree+0x172>
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2c16:	01 e0       	ldi	r16, 0x01	; 1
    2c18:	10 e0       	ldi	r17, 0x00	; 0
    2c1a:	60 cf       	rjmp	.-320    	; 0x2adc <f_getfree+0x6a>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2c1c:	02 e0       	ldi	r16, 0x02	; 2
    2c1e:	10 e0       	ldi	r17, 0x00	; 0
    2c20:	5d cf       	rjmp	.-326    	; 0x2adc <f_getfree+0x6a>
    2c22:	8c 01       	movw	r16, r24
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
			}
		}
	}

	LEAVE_FF(fs, res);
    2c24:	5b cf       	rjmp	.-330    	; 0x2adc <f_getfree+0x6a>

00002c26 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    2c26:	a2 e0       	ldi	r26, 0x02	; 2
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e9 e1       	ldi	r30, 0x19	; 25
    2c2c:	f6 e1       	ldi	r31, 0x16	; 22
    2c2e:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__+0x14>
    2c32:	7c 01       	movw	r14, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    2c34:	be 01       	movw	r22, r28
    2c36:	6f 5f       	subi	r22, 0xFF	; 255
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	0e 94 b3 00 	call	0x166	; 0x166 <validate>
    2c3e:	6c 01       	movw	r12, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
    2c40:	89 2b       	or	r24, r25
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <f_truncate+0x20>
    2c44:	51 c0       	rjmp	.+162    	; 0x2ce8 <f_truncate+0xc2>
    2c46:	f7 01       	movw	r30, r14
    2c48:	c7 84       	ldd	r12, Z+15	; 0x0f
    2c4a:	d1 2c       	mov	r13, r1
    2c4c:	c1 14       	cp	r12, r1
    2c4e:	d1 04       	cpc	r13, r1
    2c50:	09 f0       	breq	.+2      	; 0x2c54 <f_truncate+0x2e>
    2c52:	4a c0       	rjmp	.+148    	; 0x2ce8 <f_truncate+0xc2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2c54:	86 85       	ldd	r24, Z+14	; 0x0e
    2c56:	81 ff       	sbrs	r24, 1
    2c58:	83 c0       	rjmp	.+262    	; 0x2d60 <f_truncate+0x13a>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
    2c5a:	80 89       	ldd	r24, Z+16	; 0x10
    2c5c:	91 89       	ldd	r25, Z+17	; 0x11
    2c5e:	a2 89       	ldd	r26, Z+18	; 0x12
    2c60:	b3 89       	ldd	r27, Z+19	; 0x13
    2c62:	42 85       	ldd	r20, Z+10	; 0x0a
    2c64:	53 85       	ldd	r21, Z+11	; 0x0b
    2c66:	64 85       	ldd	r22, Z+12	; 0x0c
    2c68:	75 85       	ldd	r23, Z+13	; 0x0d
    2c6a:	84 17       	cp	r24, r20
    2c6c:	95 07       	cpc	r25, r21
    2c6e:	a6 07       	cpc	r26, r22
    2c70:	b7 07       	cpc	r27, r23
    2c72:	d0 f5       	brcc	.+116    	; 0x2ce8 <f_truncate+0xc2>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    2c74:	89 2b       	or	r24, r25
    2c76:	8a 2b       	or	r24, r26
    2c78:	8b 2b       	or	r24, r27
    2c7a:	d9 f5       	brne	.+118    	; 0x2cf2 <f_truncate+0xcc>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    2c7c:	46 81       	ldd	r20, Z+6	; 0x06
    2c7e:	57 81       	ldd	r21, Z+7	; 0x07
    2c80:	60 85       	ldd	r22, Z+8	; 0x08
    2c82:	71 85       	ldd	r23, Z+9	; 0x09
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	10 e0       	ldi	r17, 0x00	; 0
    2c88:	98 01       	movw	r18, r16
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	0e 94 2b 05 	call	0xa56	; 0xa56 <remove_chain>
			fp->obj.sclust = 0;
    2c90:	f7 01       	movw	r30, r14
    2c92:	16 82       	std	Z+6, r1	; 0x06
    2c94:	17 82       	std	Z+7, r1	; 0x07
    2c96:	10 86       	std	Z+8, r1	; 0x08
    2c98:	11 86       	std	Z+9, r1	; 0x09
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
    2c9a:	f7 01       	movw	r30, r14
    2c9c:	40 89       	ldd	r20, Z+16	; 0x10
    2c9e:	51 89       	ldd	r21, Z+17	; 0x11
    2ca0:	62 89       	ldd	r22, Z+18	; 0x12
    2ca2:	73 89       	ldd	r23, Z+19	; 0x13
    2ca4:	42 87       	std	Z+10, r20	; 0x0a
    2ca6:	53 87       	std	Z+11, r21	; 0x0b
    2ca8:	64 87       	std	Z+12, r22	; 0x0c
    2caa:	75 87       	std	Z+13, r23	; 0x0d
		fp->flag |= FA_MODIFIED;
    2cac:	26 85       	ldd	r18, Z+14	; 0x0e
    2cae:	20 64       	ori	r18, 0x40	; 64
    2cb0:	26 87       	std	Z+14, r18	; 0x0e
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <f_truncate+0x92>
    2cb6:	50 c0       	rjmp	.+160    	; 0x2d58 <f_truncate+0x132>
    2cb8:	27 ff       	sbrs	r18, 7
    2cba:	16 c0       	rjmp	.+44     	; 0x2ce8 <f_truncate+0xc2>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
    2cbc:	20 8d       	ldd	r18, Z+24	; 0x18
    2cbe:	31 8d       	ldd	r19, Z+25	; 0x19
    2cc0:	42 8d       	ldd	r20, Z+26	; 0x1a
    2cc2:	53 8d       	ldd	r21, Z+27	; 0x1b
    2cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc8:	01 e0       	ldi	r16, 0x01	; 1
    2cca:	10 e0       	ldi	r17, 0x00	; 0
    2ccc:	b7 01       	movw	r22, r14
    2cce:	6e 5d       	subi	r22, 0xDE	; 222
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	81 81       	ldd	r24, Z+1	; 0x01
    2cd4:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <disk_write>
    2cd8:	89 2b       	or	r24, r25
    2cda:	e1 f5       	brne	.+120    	; 0x2d54 <f_truncate+0x12e>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
    2cdc:	f7 01       	movw	r30, r14
    2cde:	86 85       	ldd	r24, Z+14	; 0x0e
    2ce0:	8f 77       	andi	r24, 0x7F	; 127
    2ce2:	86 87       	std	Z+14, r24	; 0x0e
    2ce4:	d1 2c       	mov	r13, r1
    2ce6:	c1 2c       	mov	r12, r1
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    2ce8:	c6 01       	movw	r24, r12
    2cea:	22 96       	adiw	r28, 0x02	; 2
    2cec:	e8 e0       	ldi	r30, 0x08	; 8
    2cee:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__+0x14>
	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    2cf2:	44 89       	ldd	r20, Z+20	; 0x14
    2cf4:	55 89       	ldd	r21, Z+21	; 0x15
    2cf6:	66 89       	ldd	r22, Z+22	; 0x16
    2cf8:	77 89       	ldd	r23, Z+23	; 0x17
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	0e 94 50 03 	call	0x6a0	; 0x6a0 <get_fat.isra.7>
    2d02:	ab 01       	movw	r20, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    2d0a:	4f 3f       	cpi	r20, 0xFF	; 255
    2d0c:	ff ef       	ldi	r31, 0xFF	; 255
    2d0e:	5f 07       	cpc	r21, r31
    2d10:	6f 07       	cpc	r22, r31
    2d12:	7f 07       	cpc	r23, r31
    2d14:	11 f2       	breq	.-124    	; 0x2c9a <f_truncate+0x74>
			if (ncl == 1) res = FR_INT_ERR;
    2d16:	82 e0       	ldi	r24, 0x02	; 2
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	41 30       	cpi	r20, 0x01	; 1
    2d1c:	51 05       	cpc	r21, r1
    2d1e:	61 05       	cpc	r22, r1
    2d20:	71 05       	cpc	r23, r1
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <f_truncate+0x100>
    2d24:	ba cf       	rjmp	.-140    	; 0x2c9a <f_truncate+0x74>
			if (res == FR_OK && ncl < fs->n_fatent) {
    2d26:	e9 81       	ldd	r30, Y+1	; 0x01
    2d28:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2a:	83 89       	ldd	r24, Z+19	; 0x13
    2d2c:	94 89       	ldd	r25, Z+20	; 0x14
    2d2e:	a5 89       	ldd	r26, Z+21	; 0x15
    2d30:	b6 89       	ldd	r27, Z+22	; 0x16
    2d32:	48 17       	cp	r20, r24
    2d34:	59 07       	cpc	r21, r25
    2d36:	6a 07       	cpc	r22, r26
    2d38:	7b 07       	cpc	r23, r27
    2d3a:	48 f4       	brcc	.+18     	; 0x2d4e <f_truncate+0x128>
				res = remove_chain(&fp->obj, ncl, fp->clust);
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	04 89       	ldd	r16, Z+20	; 0x14
    2d40:	15 89       	ldd	r17, Z+21	; 0x15
    2d42:	26 89       	ldd	r18, Z+22	; 0x16
    2d44:	37 89       	ldd	r19, Z+23	; 0x17
    2d46:	c7 01       	movw	r24, r14
    2d48:	0e 94 2b 05 	call	0xa56	; 0xa56 <remove_chain>
    2d4c:	a6 cf       	rjmp	.-180    	; 0x2c9a <f_truncate+0x74>
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	a3 cf       	rjmp	.-186    	; 0x2c9a <f_truncate+0x74>
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
		fp->flag |= FA_MODIFIED;
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
				res = FR_DISK_ERR;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    2d58:	f7 01       	movw	r30, r14
    2d5a:	87 87       	std	Z+15, r24	; 0x0f
    2d5c:	6c 01       	movw	r12, r24
    2d5e:	c4 cf       	rjmp	.-120    	; 0x2ce8 <f_truncate+0xc2>
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2d60:	87 e0       	ldi	r24, 0x07	; 7
    2d62:	c8 2e       	mov	r12, r24
    2d64:	d1 2c       	mov	r13, r1
    2d66:	c0 cf       	rjmp	.-128    	; 0x2ce8 <f_truncate+0xc2>

00002d68 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    2d68:	a8 e5       	ldi	r26, 0x58	; 88
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	ea eb       	ldi	r30, 0xBA	; 186
    2d6e:	f6 e1       	ldi	r31, 0x16	; 22
    2d70:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <__prologue_saves__+0x12>
    2d74:	69 96       	adiw	r28, 0x19	; 25
    2d76:	9f af       	std	Y+63, r25	; 0x3f
    2d78:	8e af       	std	Y+62, r24	; 0x3e
    2d7a:	69 97       	sbiw	r28, 0x19	; 25
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    2d7c:	42 e0       	ldi	r20, 0x02	; 2
    2d7e:	be 01       	movw	r22, r28
    2d80:	6b 5a       	subi	r22, 0xAB	; 171
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	ce 01       	movw	r24, r28
    2d86:	89 5a       	subi	r24, 0xA9	; 169
    2d88:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8a:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
	if (res == FR_OK) {
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	d1 f4       	brne	.+52     	; 0x2dc6 <f_unlink+0x5e>
		dj.obj.fs = fs;
    2d92:	67 96       	adiw	r28, 0x17	; 23
    2d94:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d96:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d98:	67 97       	sbiw	r28, 0x17	; 23
    2d9a:	9c a7       	std	Y+44, r25	; 0x2c
    2d9c:	8b a7       	std	Y+43, r24	; 0x2b
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    2d9e:	69 96       	adiw	r28, 0x19	; 25
    2da0:	6e ad       	ldd	r22, Y+62	; 0x3e
    2da2:	7f ad       	ldd	r23, Y+63	; 0x3f
    2da4:	69 97       	sbiw	r28, 0x19	; 25
    2da6:	ce 01       	movw	r24, r28
    2da8:	8b 96       	adiw	r24, 0x2b	; 43
    2daa:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	51 f4       	brne	.+20     	; 0x2dc6 <f_unlink+0x5e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    2db2:	63 96       	adiw	r28, 0x13	; 19
    2db4:	8f ad       	ldd	r24, Y+63	; 0x3f
    2db6:	63 97       	sbiw	r28, 0x13	; 19
    2db8:	87 fd       	sbrc	r24, 7
    2dba:	61 c0       	rjmp	.+194    	; 0x2e7e <f_unlink+0x116>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    2dbc:	bf a4       	ldd	r11, Y+47	; 0x2f
    2dbe:	b0 fe       	sbrs	r11, 0
    2dc0:	07 c0       	rjmp	.+14     	; 0x2dd0 <f_unlink+0x68>
					res = FR_DENIED;		/* Cannot remove R/O object */
    2dc2:	87 e0       	ldi	r24, 0x07	; 7
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    2dc6:	c8 5a       	subi	r28, 0xA8	; 168
    2dc8:	df 4f       	sbci	r29, 0xFF	; 255
    2dca:	e9 e0       	ldi	r30, 0x09	; 9
    2dcc:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <__epilogue_restores__+0x12>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    2dd0:	67 96       	adiw	r28, 0x17	; 23
    2dd2:	0e ad       	ldd	r16, Y+62	; 0x3e
    2dd4:	1f ad       	ldd	r17, Y+63	; 0x3f
    2dd6:	67 97       	sbiw	r28, 0x17	; 23
    2dd8:	27 96       	adiw	r28, 0x07	; 7
    2dda:	6e ad       	ldd	r22, Y+62	; 0x3e
    2ddc:	7f ad       	ldd	r23, Y+63	; 0x3f
    2dde:	27 97       	sbiw	r28, 0x07	; 7
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 81       	ld	r24, Z
    2de4:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    2de8:	6b 01       	movw	r12, r22
    2dea:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    2dec:	b4 fc       	sbrc	r11, 4
    2dee:	22 c0       	rjmp	.+68     	; 0x2e34 <f_unlink+0xcc>
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    2df0:	0b a5       	ldd	r16, Y+43	; 0x2b
    2df2:	1c a5       	ldd	r17, Y+44	; 0x2c
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    2df4:	25 96       	adiw	r28, 0x05	; 5
    2df6:	4c ad       	ldd	r20, Y+60	; 0x3c
    2df8:	5d ad       	ldd	r21, Y+61	; 0x3d
    2dfa:	6e ad       	ldd	r22, Y+62	; 0x3e
    2dfc:	7f ad       	ldd	r23, Y+63	; 0x3f
    2dfe:	25 97       	sbiw	r28, 0x05	; 5
    2e00:	c8 01       	movw	r24, r16
    2e02:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
	if (res == FR_OK) {
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	f1 f6       	brne	.-68     	; 0x2dc6 <f_unlink+0x5e>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    2e0a:	27 96       	adiw	r28, 0x07	; 7
    2e0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e10:	27 97       	sbiw	r28, 0x07	; 7
    2e12:	85 ee       	ldi	r24, 0xE5	; 229
    2e14:	80 83       	st	Z, r24
		fs->wflag = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	f8 01       	movw	r30, r16
    2e1a:	83 83       	std	Z+3, r24	; 0x03
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    2e1c:	c1 14       	cp	r12, r1
    2e1e:	d1 04       	cpc	r13, r1
    2e20:	e1 04       	cpc	r14, r1
    2e22:	f1 04       	cpc	r15, r1
    2e24:	01 f5       	brne	.+64     	; 0x2e66 <f_unlink+0xfe>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    2e26:	67 96       	adiw	r28, 0x17	; 23
    2e28:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e2c:	67 97       	sbiw	r28, 0x17	; 23
    2e2e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <sync_fs>
    2e32:	c9 cf       	rjmp	.-110    	; 0x2dc6 <f_unlink+0x5e>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
    2e34:	1a 83       	std	Y+2, r17	; 0x02
    2e36:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    2e38:	cf 82       	std	Y+7, r12	; 0x07
    2e3a:	d8 86       	std	Y+8, r13	; 0x08
    2e3c:	e9 86       	std	Y+9, r14	; 0x09
    2e3e:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    2e40:	ce 01       	movw	r24, r28
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	0e 94 c1 05 	call	0xb82	; 0xb82 <dir_sdi.constprop.14>
						if (res == FR_OK) {
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <f_unlink+0xe6>
    2e4c:	bc cf       	rjmp	.-136    	; 0x2dc6 <f_unlink+0x5e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    2e4e:	ce 01       	movw	r24, r28
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	0e 94 9c 08 	call	0x1138	; 0x1138 <dir_read.constprop.12>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <f_unlink+0xf4>
    2e5a:	b3 cf       	rjmp	.-154    	; 0x2dc2 <f_unlink+0x5a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    2e5c:	84 30       	cpi	r24, 0x04	; 4
    2e5e:	91 05       	cpc	r25, r1
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <f_unlink+0xfc>
    2e62:	b1 cf       	rjmp	.-158    	; 0x2dc6 <f_unlink+0x5e>
    2e64:	c5 cf       	rjmp	.-118    	; 0x2df0 <f_unlink+0x88>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    2e66:	00 e0       	ldi	r16, 0x00	; 0
    2e68:	10 e0       	ldi	r17, 0x00	; 0
    2e6a:	98 01       	movw	r18, r16
    2e6c:	b7 01       	movw	r22, r14
    2e6e:	a6 01       	movw	r20, r12
    2e70:	ce 01       	movw	r24, r28
    2e72:	8b 96       	adiw	r24, 0x2b	; 43
    2e74:	0e 94 2b 05 	call	0xa56	; 0xa56 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	a9 f2       	breq	.-86     	; 0x2e26 <f_unlink+0xbe>
    2e7c:	a4 cf       	rjmp	.-184    	; 0x2dc6 <f_unlink+0x5e>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    2e7e:	86 e0       	ldi	r24, 0x06	; 6
    2e80:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
    2e82:	a1 cf       	rjmp	.-190    	; 0x2dc6 <f_unlink+0x5e>

00002e84 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    2e84:	ac e3       	ldi	r26, 0x3C	; 60
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e8 e4       	ldi	r30, 0x48	; 72
    2e8a:	f7 e1       	ldi	r31, 0x17	; 23
    2e8c:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x8>
    2e90:	9c af       	std	Y+60, r25	; 0x3c
    2e92:	8b af       	std	Y+59, r24	; 0x3b
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    2e94:	42 e0       	ldi	r20, 0x02	; 2
    2e96:	be 01       	movw	r22, r28
    2e98:	67 5c       	subi	r22, 0xC7	; 199
    2e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	cb 96       	adiw	r24, 0x3b	; 59
    2ea0:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
    2ea4:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    2ea6:	89 2b       	or	r24, r25
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <f_mkdir+0x28>
    2eaa:	a4 c0       	rjmp	.+328    	; 0x2ff4 <f_mkdir+0x170>
		dj.obj.fs = fs;
    2eac:	89 ad       	ldd	r24, Y+57	; 0x39
    2eae:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    2eb4:	6b ad       	ldd	r22, Y+59	; 0x3b
    2eb6:	7c ad       	ldd	r23, Y+60	; 0x3c
    2eb8:	ce 01       	movw	r24, r28
    2eba:	01 96       	adiw	r24, 0x01	; 1
    2ebc:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
    2ec0:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    2ec2:	89 2b       	or	r24, r25
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <f_mkdir+0x44>
    2ec6:	a8 c0       	rjmp	.+336    	; 0x3018 <f_mkdir+0x194>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
    2ec8:	84 e0       	ldi	r24, 0x04	; 4
    2eca:	e8 16       	cp	r14, r24
    2ecc:	f1 04       	cpc	r15, r1
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <f_mkdir+0x4e>
    2ed0:	91 c0       	rjmp	.+290    	; 0x2ff4 <f_mkdir+0x170>
			sobj.fs = fs;						/* New object id to create a new chain */
    2ed2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ed4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ed6:	9c a7       	std	Y+44, r25	; 0x2c
    2ed8:	8b a7       	std	Y+43, r24	; 0x2b
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	ba 01       	movw	r22, r20
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	8b 96       	adiw	r24, 0x2b	; 43
    2ee4:	0e 94 04 04 	call	0x808	; 0x808 <create_chain>
    2ee8:	4b 01       	movw	r8, r22
    2eea:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    2eec:	81 14       	cp	r8, r1
    2eee:	91 04       	cpc	r9, r1
    2ef0:	a1 04       	cpc	r10, r1
    2ef2:	b1 04       	cpc	r11, r1
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <f_mkdir+0x74>
    2ef6:	83 c0       	rjmp	.+262    	; 0x2ffe <f_mkdir+0x17a>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    2ef8:	22 e0       	ldi	r18, 0x02	; 2
    2efa:	e2 2e       	mov	r14, r18
    2efc:	f1 2c       	mov	r15, r1
    2efe:	e1 e0       	ldi	r30, 0x01	; 1
    2f00:	8e 16       	cp	r8, r30
    2f02:	91 04       	cpc	r9, r1
    2f04:	a1 04       	cpc	r10, r1
    2f06:	b1 04       	cpc	r11, r1
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <f_mkdir+0x88>
    2f0a:	7c c0       	rjmp	.+248    	; 0x3004 <f_mkdir+0x180>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    2f0c:	ee 24       	eor	r14, r14
    2f0e:	e3 94       	inc	r14
    2f10:	f1 2c       	mov	r15, r1
    2f12:	ff ef       	ldi	r31, 0xFF	; 255
    2f14:	8f 16       	cp	r8, r31
    2f16:	9f 06       	cpc	r9, r31
    2f18:	af 06       	cpc	r10, r31
    2f1a:	bf 06       	cpc	r11, r31
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <f_mkdir+0x9c>
    2f1e:	72 c0       	rjmp	.+228    	; 0x3004 <f_mkdir+0x180>
			tm = GET_FATTIME();
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    2f20:	b5 01       	movw	r22, r10
    2f22:	a4 01       	movw	r20, r8
    2f24:	89 ad       	ldd	r24, Y+57	; 0x39
    2f26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f28:	0e 94 4a 06 	call	0xc94	; 0xc94 <dir_clear>
    2f2c:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    2f2e:	89 2b       	or	r24, r25
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <f_mkdir+0xb0>
    2f32:	68 c0       	rjmp	.+208    	; 0x3004 <f_mkdir+0x180>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    2f34:	e9 ac       	ldd	r14, Y+57	; 0x39
    2f36:	fa ac       	ldd	r15, Y+58	; 0x3a
    2f38:	67 01       	movw	r12, r14
    2f3a:	ff e2       	ldi	r31, 0x2F	; 47
    2f3c:	cf 0e       	add	r12, r31
    2f3e:	d1 1c       	adc	r13, r1
    2f40:	4b e0       	ldi	r20, 0x0B	; 11
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    2f44:	60 e2       	ldi	r22, 0x20	; 32
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	c6 01       	movw	r24, r12
    2f4a:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <memset>
						fs->win[DIR_Name] = '.';
    2f4e:	4e e2       	ldi	r20, 0x2E	; 46
    2f50:	64 2e       	mov	r6, r20
    2f52:	f7 01       	movw	r30, r14
    2f54:	67 a6       	std	Z+47, r6	; 0x2f
						fs->win[DIR_Attr] = AM_DIR;
    2f56:	10 e1       	ldi	r17, 0x10	; 16
    2f58:	12 af       	std	Z+58, r17	; 0x3a
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2f5a:	eb 5b       	subi	r30, 0xBB	; 187
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    2f60:	31 96       	adiw	r30, 0x01	; 1
    2f62:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    2f64:	31 96       	adiw	r30, 0x01	; 1
    2f66:	51 e2       	ldi	r21, 0x21	; 33
    2f68:	75 2e       	mov	r7, r21
    2f6a:	70 82       	st	Z, r7
	*ptr++ = (BYTE)val;
    2f6c:	31 96       	adiw	r30, 0x01	; 1
    2f6e:	00 e5       	ldi	r16, 0x50	; 80
    2f70:	00 83       	st	Z, r16
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
						fs->win[DIR_Name] = '.';
						fs->win[DIR_Attr] = AM_DIR;
						st_dword(fs->win + DIR_ModTime, tm);
						st_clust(fs, fs->win, dcl);
    2f72:	a5 01       	movw	r20, r10
    2f74:	94 01       	movw	r18, r8
    2f76:	b6 01       	movw	r22, r12
    2f78:	c7 01       	movw	r24, r14
    2f7a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <st_clust.isra.1>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
    2f7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f80:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f82:	bc 01       	movw	r22, r24
    2f84:	61 5b       	subi	r22, 0xB1	; 177
    2f86:	7f 4f       	sbci	r23, 0xFF	; 255
    2f88:	fc 01       	movw	r30, r24
    2f8a:	bf 96       	adiw	r30, 0x2f	; 47
    2f8c:	20 e2       	ldi	r18, 0x20	; 32
    2f8e:	db 01       	movw	r26, r22
    2f90:	01 90       	ld	r0, Z+
    2f92:	0d 92       	st	X+, r0
    2f94:	2a 95       	dec	r18
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <f_mkdir+0x10c>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    2f98:	fc 01       	movw	r30, r24
    2f9a:	e0 5b       	subi	r30, 0xB0	; 176
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	60 82       	st	Z, r6
						st_clust(fs, fs->win + SZDIRE, pcl);
    2fa0:	2f 81       	ldd	r18, Y+7	; 0x07
    2fa2:	38 85       	ldd	r19, Y+8	; 0x08
    2fa4:	49 85       	ldd	r20, Y+9	; 0x09
    2fa6:	5a 85       	ldd	r21, Y+10	; 0x0a
    2fa8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <st_clust.isra.1>
						fs->wflag = 1;
    2fac:	e9 ad       	ldd	r30, Y+57	; 0x39
    2fae:	fa ad       	ldd	r31, Y+58	; 0x3a
    2fb0:	dd 24       	eor	r13, r13
    2fb2:	d3 94       	inc	r13
    2fb4:	d3 82       	std	Z+3, r13	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	0e 94 dd 08 	call	0x11ba	; 0x11ba <dir_register>
    2fbe:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    2fc0:	89 2b       	or	r24, r25
    2fc2:	01 f5       	brne	.+64     	; 0x3004 <f_mkdir+0x180>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    2fc4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2fc6:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2fc8:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    2fca:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    2fcc:	70 8e       	std	Z+24, r7	; 0x18
	*ptr++ = (BYTE)val;
    2fce:	01 8f       	std	Z+25, r16	; 0x19
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    2fd0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2fd2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2fd4:	a5 01       	movw	r20, r10
    2fd6:	94 01       	movw	r18, r8
    2fd8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fda:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fdc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <st_clust.isra.1>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    2fe0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2fe2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2fe4:	13 87       	std	Z+11, r17	; 0x0b
					fs->wflag = 1;
    2fe6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fe8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fea:	fc 01       	movw	r30, r24
    2fec:	d3 82       	std	Z+3, r13	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    2fee:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <sync_fs>
    2ff2:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    2ff4:	c7 01       	movw	r24, r14
    2ff6:	ec 96       	adiw	r28, 0x3c	; 60
    2ff8:	ee e0       	ldi	r30, 0x0E	; 14
    2ffa:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x8>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    2ffe:	37 e0       	ldi	r19, 0x07	; 7
    3000:	e3 2e       	mov	r14, r19
    3002:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	98 01       	movw	r18, r16
    300a:	b5 01       	movw	r22, r10
    300c:	a4 01       	movw	r20, r8
    300e:	ce 01       	movw	r24, r28
    3010:	8b 96       	adiw	r24, 0x2b	; 43
    3012:	0e 94 2b 05 	call	0xa56	; 0xa56 <remove_chain>
    3016:	ee cf       	rjmp	.-36     	; 0x2ff4 <f_mkdir+0x170>
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    3018:	88 e0       	ldi	r24, 0x08	; 8
    301a:	e8 2e       	mov	r14, r24
    301c:	f1 2c       	mov	r15, r1
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
    301e:	ea cf       	rjmp	.-44     	; 0x2ff4 <f_mkdir+0x170>

00003020 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	ca 57       	subi	r28, 0x7A	; 122
    3038:	d1 09       	sbc	r29, r1
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	e9 96       	adiw	r28, 0x39	; 57
    3046:	9f af       	std	Y+63, r25	; 0x3f
    3048:	8e af       	std	Y+62, r24	; 0x3e
    304a:	e9 97       	sbiw	r28, 0x39	; 57
    304c:	eb 96       	adiw	r28, 0x3b	; 59
    304e:	7f af       	std	Y+63, r23	; 0x3f
    3050:	6e af       	std	Y+62, r22	; 0x3e
    3052:	eb 97       	sbiw	r28, 0x3b	; 59
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    3054:	ce 01       	movw	r24, r28
    3056:	87 58       	subi	r24, 0x87	; 135
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	0e 94 8d 00 	call	0x11a	; 0x11a <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    305e:	42 e0       	ldi	r20, 0x02	; 2
    3060:	be 01       	movw	r22, r28
    3062:	6b 58       	subi	r22, 0x8B	; 139
    3064:	7f 4f       	sbci	r23, 0xFF	; 255
    3066:	ce 01       	movw	r24, r28
    3068:	89 58       	subi	r24, 0x89	; 137
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	0e 94 25 09 	call	0x124a	; 0x124a <mount_volume>
	if (res == FR_OK) {
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	09 f0       	breq	.+2      	; 0x3076 <f_rename+0x56>
    3074:	d7 c0       	rjmp	.+430    	; 0x3224 <f_rename+0x204>
		djo.obj.fs = fs;
    3076:	e7 96       	adiw	r28, 0x37	; 55
    3078:	8e ad       	ldd	r24, Y+62	; 0x3e
    307a:	9f ad       	ldd	r25, Y+63	; 0x3f
    307c:	e7 97       	sbiw	r28, 0x37	; 55
    307e:	9c a7       	std	Y+44, r25	; 0x2c
    3080:	8b a7       	std	Y+43, r24	; 0x2b
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);			/* Check old object */
    3082:	e9 96       	adiw	r28, 0x39	; 57
    3084:	6e ad       	ldd	r22, Y+62	; 0x3e
    3086:	7f ad       	ldd	r23, Y+63	; 0x3f
    3088:	e9 97       	sbiw	r28, 0x39	; 57
    308a:	ce 01       	movw	r24, r28
    308c:	8b 96       	adiw	r24, 0x2b	; 43
    308e:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	09 f0       	breq	.+2      	; 0x3098 <f_rename+0x78>
    3096:	c6 c0       	rjmp	.+396    	; 0x3224 <f_rename+0x204>
    3098:	63 96       	adiw	r28, 0x13	; 19
    309a:	8f ad       	ldd	r24, Y+63	; 0x3f
    309c:	63 97       	sbiw	r28, 0x13	; 19
    309e:	80 7a       	andi	r24, 0xA0	; 160
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <f_rename+0x84>
    30a2:	d3 c0       	rjmp	.+422    	; 0x324a <f_rename+0x22a>
					}
				}
			} else
#endif
			{	/* At FAT/FAT32 volume */
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
    30a4:	27 96       	adiw	r28, 0x07	; 7
    30a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    30a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    30aa:	27 97       	sbiw	r28, 0x07	; 7
    30ac:	80 e2       	ldi	r24, 0x20	; 32
    30ae:	de 01       	movw	r26, r28
    30b0:	ab 5a       	subi	r26, 0xAB	; 171
    30b2:	bf 4f       	sbci	r27, 0xFF	; 255
    30b4:	01 90       	ld	r0, Z+
    30b6:	0d 92       	st	X+, r0
    30b8:	8a 95       	dec	r24
    30ba:	e1 f7       	brne	.-8      	; 0x30b4 <f_rename+0x94>
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
    30bc:	8a e2       	ldi	r24, 0x2A	; 42
    30be:	fe 01       	movw	r30, r28
    30c0:	bb 96       	adiw	r30, 0x2b	; 43
    30c2:	de 01       	movw	r26, r28
    30c4:	11 96       	adiw	r26, 0x01	; 1
    30c6:	01 90       	ld	r0, Z+
    30c8:	0d 92       	st	X+, r0
    30ca:	8a 95       	dec	r24
    30cc:	e1 f7       	brne	.-8      	; 0x30c6 <f_rename+0xa6>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    30ce:	eb 96       	adiw	r28, 0x3b	; 59
    30d0:	6e ad       	ldd	r22, Y+62	; 0x3e
    30d2:	7f ad       	ldd	r23, Y+63	; 0x3f
    30d4:	eb 97       	sbiw	r28, 0x3b	; 59
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	0e 94 85 07 	call	0xf0a	; 0xf0a <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	e9 f4       	brne	.+58     	; 0x311c <f_rename+0xfc>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    30e2:	4f 81       	ldd	r20, Y+7	; 0x07
    30e4:	58 85       	ldd	r21, Y+8	; 0x08
    30e6:	69 85       	ldd	r22, Y+9	; 0x09
    30e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    30ea:	89 a9       	ldd	r24, Y+49	; 0x31
    30ec:	9a a9       	ldd	r25, Y+50	; 0x32
    30ee:	ab a9       	ldd	r26, Y+51	; 0x33
    30f0:	bc a9       	ldd	r27, Y+52	; 0x34
    30f2:	48 17       	cp	r20, r24
    30f4:	59 07       	cpc	r21, r25
    30f6:	6a 07       	cpc	r22, r26
    30f8:	7b 07       	cpc	r23, r27
    30fa:	69 f4       	brne	.+26     	; 0x3116 <f_rename+0xf6>
    30fc:	4f 85       	ldd	r20, Y+15	; 0x0f
    30fe:	58 89       	ldd	r21, Y+16	; 0x10
    3100:	69 89       	ldd	r22, Y+17	; 0x11
    3102:	7a 89       	ldd	r23, Y+18	; 0x12
    3104:	89 ad       	ldd	r24, Y+57	; 0x39
    3106:	9a ad       	ldd	r25, Y+58	; 0x3a
    3108:	ab ad       	ldd	r26, Y+59	; 0x3b
    310a:	bc ad       	ldd	r27, Y+60	; 0x3c
    310c:	48 17       	cp	r20, r24
    310e:	59 07       	cpc	r21, r25
    3110:	6a 07       	cpc	r22, r26
    3112:	7b 07       	cpc	r23, r27
    3114:	39 f0       	breq	.+14     	; 0x3124 <f_rename+0x104>
    3116:	88 e0       	ldi	r24, 0x08	; 8
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	84 c0       	rjmp	.+264    	; 0x3224 <f_rename+0x204>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    311c:	84 30       	cpi	r24, 0x04	; 4
    311e:	91 05       	cpc	r25, r1
    3120:	09 f0       	breq	.+2      	; 0x3124 <f_rename+0x104>
    3122:	80 c0       	rjmp	.+256    	; 0x3224 <f_rename+0x204>
					res = dir_register(&djn);			/* Register the new entry */
    3124:	ce 01       	movw	r24, r28
    3126:	01 96       	adiw	r24, 0x01	; 1
    3128:	0e 94 dd 08 	call	0x11ba	; 0x11ba <dir_register>
					if (res == FR_OK) {
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	09 f0       	breq	.+2      	; 0x3132 <f_rename+0x112>
    3130:	79 c0       	rjmp	.+242    	; 0x3224 <f_rename+0x204>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    3132:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3134:	7c 8d       	ldd	r23, Y+28	; 0x1c
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
    3136:	db 01       	movw	r26, r22
    3138:	1d 96       	adiw	r26, 0x0d	; 13
    313a:	e5 e5       	ldi	r30, 0x55	; 85
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	ec 0f       	add	r30, r28
    3140:	fd 1f       	adc	r31, r29
    3142:	3d 96       	adiw	r30, 0x0d	; 13
    3144:	83 e1       	ldi	r24, 0x13	; 19
    3146:	01 90       	ld	r0, Z+
    3148:	0d 92       	st	X+, r0
    314a:	8a 95       	dec	r24
    314c:	e1 f7       	brne	.-8      	; 0x3146 <f_rename+0x126>
						dir[DIR_Attr] = buf[DIR_Attr];
    314e:	a1 96       	adiw	r28, 0x21	; 33
    3150:	8f ad       	ldd	r24, Y+63	; 0x3f
    3152:	a1 97       	sbiw	r28, 0x21	; 33
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    3154:	84 ff       	sbrs	r24, 4
    3156:	77 c0       	rjmp	.+238    	; 0x3246 <f_rename+0x226>
    3158:	fb 01       	movw	r30, r22
    315a:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    315c:	e7 96       	adiw	r28, 0x37	; 55
    315e:	0e ad       	ldd	r16, Y+62	; 0x3e
    3160:	1f ad       	ldd	r17, Y+63	; 0x3f
    3162:	e7 97       	sbiw	r28, 0x37	; 55
    3164:	ff 24       	eor	r15, r15
    3166:	f3 94       	inc	r15
    3168:	f8 01       	movw	r30, r16
    316a:	f3 82       	std	Z+3, r15	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    316c:	fb 01       	movw	r30, r22
    316e:	83 85       	ldd	r24, Z+11	; 0x0b
    3170:	84 ff       	sbrs	r24, 4
    3172:	3c c0       	rjmp	.+120    	; 0x31ec <f_rename+0x1cc>
    3174:	89 a8       	ldd	r8, Y+49	; 0x31
    3176:	9a a8       	ldd	r9, Y+50	; 0x32
    3178:	ab a8       	ldd	r10, Y+51	; 0x33
    317a:	bc a8       	ldd	r11, Y+52	; 0x34
    317c:	8f 81       	ldd	r24, Y+7	; 0x07
    317e:	98 85       	ldd	r25, Y+8	; 0x08
    3180:	a9 85       	ldd	r26, Y+9	; 0x09
    3182:	ba 85       	ldd	r27, Y+10	; 0x0a
    3184:	88 16       	cp	r8, r24
    3186:	99 06       	cpc	r9, r25
    3188:	aa 06       	cpc	r10, r26
    318a:	bb 06       	cpc	r11, r27
    318c:	79 f1       	breq	.+94     	; 0x31ec <f_rename+0x1cc>
							sect = clst2sect(fs, ld_clust(fs, dir));
    318e:	f8 01       	movw	r30, r16
    3190:	80 81       	ld	r24, Z
    3192:	0e 94 df 00 	call	0x1be	; 0x1be <ld_clust.isra.0>
    3196:	ab 01       	movw	r20, r22
    3198:	bc 01       	movw	r22, r24
    319a:	c8 01       	movw	r24, r16
    319c:	0e 94 65 00 	call	0xca	; 0xca <clst2sect>
    31a0:	ab 01       	movw	r20, r22
    31a2:	bc 01       	movw	r22, r24
							if (sect == 0) {
								res = FR_INT_ERR;
    31a4:	82 e0       	ldi	r24, 0x02	; 2
    31a6:	90 e0       	ldi	r25, 0x00	; 0
						dir[DIR_Attr] = buf[DIR_Attr];
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
    31a8:	41 15       	cp	r20, r1
    31aa:	51 05       	cpc	r21, r1
    31ac:	61 05       	cpc	r22, r1
    31ae:	71 05       	cpc	r23, r1
    31b0:	c9 f1       	breq	.+114    	; 0x3224 <f_rename+0x204>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    31b2:	c8 01       	movw	r24, r16
    31b4:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	a1 f5       	brne	.+104    	; 0x3224 <f_rename+0x204>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    31bc:	e7 96       	adiw	r28, 0x37	; 55
    31be:	8e ad       	ldd	r24, Y+62	; 0x3e
    31c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    31c2:	e7 97       	sbiw	r28, 0x37	; 55
								if (res == FR_OK && dir[1] == '.') {
    31c4:	fc 01       	movw	r30, r24
    31c6:	e0 5b       	subi	r30, 0xB0	; 176
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	20 81       	ld	r18, Z
    31cc:	2e 32       	cpi	r18, 0x2E	; 46
    31ce:	71 f4       	brne	.+28     	; 0x31ec <f_rename+0x1cc>
									st_clust(fs, dir, djn.obj.sclust);
    31d0:	2f 81       	ldd	r18, Y+7	; 0x07
    31d2:	38 85       	ldd	r19, Y+8	; 0x08
    31d4:	49 85       	ldd	r20, Y+9	; 0x09
    31d6:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    31d8:	bc 01       	movw	r22, r24
    31da:	61 5b       	subi	r22, 0xB1	; 177
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    31de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <st_clust.isra.1>
									fs->wflag = 1;
    31e2:	e7 96       	adiw	r28, 0x37	; 55
    31e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    31e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    31e8:	e7 97       	sbiw	r28, 0x37	; 55
    31ea:	f3 82       	std	Z+3, r15	; 0x03
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    31ec:	0b a5       	ldd	r16, Y+43	; 0x2b
    31ee:	1c a5       	ldd	r17, Y+44	; 0x2c
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    31f0:	25 96       	adiw	r28, 0x05	; 5
    31f2:	4c ad       	ldd	r20, Y+60	; 0x3c
    31f4:	5d ad       	ldd	r21, Y+61	; 0x3d
    31f6:	6e ad       	ldd	r22, Y+62	; 0x3e
    31f8:	7f ad       	ldd	r23, Y+63	; 0x3f
    31fa:	25 97       	sbiw	r28, 0x05	; 5
    31fc:	c8 01       	movw	r24, r16
    31fe:	0e 94 9b 01 	call	0x336	; 0x336 <move_window>
	if (res == FR_OK) {
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	79 f4       	brne	.+30     	; 0x3224 <f_rename+0x204>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    3206:	27 96       	adiw	r28, 0x07	; 7
    3208:	ee ad       	ldd	r30, Y+62	; 0x3e
    320a:	ff ad       	ldd	r31, Y+63	; 0x3f
    320c:	27 97       	sbiw	r28, 0x07	; 7
    320e:	85 ee       	ldi	r24, 0xE5	; 229
    3210:	80 83       	st	Z, r24
		fs->wflag = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	f8 01       	movw	r30, r16
    3216:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    3218:	e7 96       	adiw	r28, 0x37	; 55
    321a:	8e ad       	ldd	r24, Y+62	; 0x3e
    321c:	9f ad       	ldd	r25, Y+63	; 0x3f
    321e:	e7 97       	sbiw	r28, 0x37	; 55
    3220:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <sync_fs>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3224:	c6 58       	subi	r28, 0x86	; 134
    3226:	df 4f       	sbci	r29, 0xFF	; 255
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	ff 90       	pop	r15
    323c:	bf 90       	pop	r11
    323e:	af 90       	pop	r10
    3240:	9f 90       	pop	r9
    3242:	8f 90       	pop	r8
    3244:	08 95       	ret
					res = dir_register(&djn);			/* Register the new entry */
					if (res == FR_OK) {
						dir = djn.dir;					/* Copy directory entry of the object except name */
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    3246:	80 62       	ori	r24, 0x20	; 32
    3248:	87 cf       	rjmp	.-242    	; 0x3158 <f_rename+0x138>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);			/* Check old object */
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    324a:	86 e0       	ldi	r24, 0x06	; 6
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	ea cf       	rjmp	.-44     	; 0x3224 <f_rename+0x204>

00003250 <power_off>:

static
void power_off (void)
{
	/* Disable SPI function */
    SPCR = 0;  
    3250:	1c bc       	out	0x2c, r1	; 44

	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	DDRB &= ~(1 << CS);		    // Input - CS0
    3252:	22 98       	cbi	0x04, 2	; 4
	DDRB &= ~(1 << SCLK);		// Input - CLK
    3254:	25 98       	cbi	0x04, 5	; 4
	DDRB &= ~(1 << MOSI);		// Input - MOSI
    3256:	23 98       	cbi	0x04, 3	; 4
	DDRB &= ~(1 << MISO);		// Input - MISO
    3258:	24 98       	cbi	0x04, 4	; 4
	
	// Disable pull ups on MISO 
	PORTB &= ~(1 << MISO);
    325a:	2c 98       	cbi	0x05, 4	; 5
}
    325c:	08 95       	ret

0000325e <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    325e:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    3260:	0d b4       	in	r0, 0x2d	; 45
    3262:	07 fe       	sbrs	r0, 7
    3264:	fd cf       	rjmp	.-6      	; 0x3260 <xchg_spi+0x2>
	return SPDR;
    3266:	8e b5       	in	r24, 0x2e	; 46
}
    3268:	08 95       	ret

0000326a <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    326a:	2a 9a       	sbi	0x05, 2	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    326c:	8f ef       	ldi	r24, 0xFF	; 255
    326e:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
}
    3272:	08 95       	ret

00003274 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	8c 01       	movw	r16, r24
    327e:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    3280:	84 e1       	ldi	r24, 0x14	; 20
    3282:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    3286:	8f ef       	ldi	r24, 0xFF	; 255
    3288:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    328c:	8f 3f       	cpi	r24, 0xFF	; 255
    328e:	39 f4       	brne	.+14     	; 0x329e <rcvr_datablock+0x2a>
    3290:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <Timer1>
    3294:	81 11       	cpse	r24, r1
    3296:	f7 cf       	rjmp	.-18     	; 0x3286 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	1c c0       	rjmp	.+56     	; 0x32d6 <rcvr_datablock+0x62>
    329e:	8e 3f       	cpi	r24, 0xFE	; 254
    32a0:	d9 f7       	brne	.-10     	; 0x3298 <rcvr_datablock+0x24>
    32a2:	f8 01       	movw	r30, r16
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
    32a4:	8f ef       	ldi	r24, 0xFF	; 255
    32a6:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    32a8:	0d b4       	in	r0, 0x2d	; 45
    32aa:	07 fe       	sbrs	r0, 7
    32ac:	fd cf       	rjmp	.-6      	; 0x32a8 <rcvr_datablock+0x34>
		*p++ = SPDR;
    32ae:	9e b5       	in	r25, 0x2e	; 46
    32b0:	90 83       	st	Z, r25
		SPDR = 0xFF;
    32b2:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    32b4:	0d b4       	in	r0, 0x2d	; 45
    32b6:	07 fe       	sbrs	r0, 7
    32b8:	fd cf       	rjmp	.-6      	; 0x32b4 <rcvr_datablock+0x40>
		*p++ = SPDR;
    32ba:	9e b5       	in	r25, 0x2e	; 46
    32bc:	91 83       	std	Z+1, r25	; 0x01
	} while (cnt -= 2);
    32be:	22 97       	sbiw	r28, 0x02	; 2
    32c0:	32 96       	adiw	r30, 0x02	; 2
    32c2:	20 97       	sbiw	r28, 0x00	; 0
    32c4:	81 f7       	brne	.-32     	; 0x32a6 <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    32c6:	8f ef       	ldi	r24, 0xFF	; 255
    32c8:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi(0xFF);
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0

	return 1;						/* Return with success */
}
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	1f 91       	pop	r17
    32dc:	0f 91       	pop	r16
    32de:	08 95       	ret

000032e0 <wait_ready.constprop.2>:
{
	BYTE d;


	wt /= 10;
	cli(); Timer2 = wt; sei();
    32e0:	f8 94       	cli
    32e2:	82 e3       	ldi	r24, 0x32	; 50
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <Timer2+0x1>
    32ea:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Timer2>
    32ee:	78 94       	sei
	do {
		d = xchg_spi(0xFF);
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    32f6:	28 2f       	mov	r18, r24
		cli(); wt = Timer2; sei();
    32f8:	f8 94       	cli
    32fa:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Timer2>
    32fe:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <Timer2+0x1>
    3302:	78 94       	sei
	} while (d != 0xFF && wt);
    3304:	2f 3f       	cpi	r18, 0xFF	; 255
    3306:	11 f0       	breq	.+4      	; 0x330c <wait_ready.constprop.2+0x2c>
    3308:	89 2b       	or	r24, r25
    330a:	91 f7       	brne	.-28     	; 0x32f0 <wait_ready.constprop.2+0x10>

	return (d == 0xFF) ? 1 : 0;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	2f 3f       	cpi	r18, 0xFF	; 255
    3312:	11 f0       	breq	.+4      	; 0x3318 <wait_ready.constprop.2+0x38>
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	80 e0       	ldi	r24, 0x00	; 0
}
    3318:	08 95       	ret

0000331a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    331e:	2a 98       	cbi	0x05, 2	; 5

	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    3320:	8f ef       	ldi	r24, 0xFF	; 255
    3322:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>

	if (wait_ready(500)) 
    3326:	0e 94 70 19 	call	0x32e0	; 0x32e0 <wait_ready.constprop.2>
    332a:	ec 01       	movw	r28, r24
    332c:	89 2b       	or	r24, r25
    332e:	31 f4       	brne	.+12     	; 0x333c <select+0x22>
	return 1;	/* Leading busy check: Wait for card ready */

	deselect();		/* Timeout */
    3330:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>
	return 0;
}
    3334:	ce 01       	movw	r24, r28
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	08 95       	ret
	CS_LOW();		/* Set CS# low */

	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) 
	return 1;	/* Leading busy check: Wait for card ready */
    333c:	c1 e0       	ldi	r28, 0x01	; 1
    333e:	d0 e0       	ldi	r29, 0x00	; 0
    3340:	f9 cf       	rjmp	.-14     	; 0x3334 <select+0x1a>

00003342 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	c8 2f       	mov	r28, r24
    334e:	d4 2f       	mov	r29, r20
    3350:	15 2f       	mov	r17, r21
    3352:	06 2f       	mov	r16, r22
    3354:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3356:	87 ff       	sbrs	r24, 7
    3358:	09 c0       	rjmp	.+18     	; 0x336c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	ba 01       	movw	r22, r20
    3360:	87 e3       	ldi	r24, 0x37	; 55
    3362:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
		if (res > 1) return res;
    3366:	82 30       	cpi	r24, 0x02	; 2
    3368:	48 f5       	brcc	.+82     	; 0x33bc <send_cmd+0x7a>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    336a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    336c:	cc 30       	cpi	r28, 0x0C	; 12
    336e:	59 f5       	brne	.+86     	; 0x33c6 <send_cmd+0x84>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    3370:	8c 2f       	mov	r24, r28
    3372:	80 64       	ori	r24, 0x40	; 64
    3374:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    3378:	8f 2d       	mov	r24, r15
    337a:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    337e:	80 2f       	mov	r24, r16
    3380:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    3384:	81 2f       	mov	r24, r17
    3386:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    338a:	8d 2f       	mov	r24, r29
    338c:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    3390:	85 e9       	ldi	r24, 0x95	; 149
    3392:	cc 23       	and	r28, r28
    3394:	21 f0       	breq	.+8      	; 0x339e <send_cmd+0x5c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    3396:	87 e8       	ldi	r24, 0x87	; 135
    3398:	c8 30       	cpi	r28, 0x08	; 8
    339a:	09 f0       	breq	.+2      	; 0x339e <send_cmd+0x5c>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    339c:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    339e:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    33a2:	cc 30       	cpi	r28, 0x0C	; 12
    33a4:	19 f4       	brne	.+6      	; 0x33ac <send_cmd+0x6a>
    33a6:	8f ef       	ldi	r24, 0xFF	; 255
    33a8:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    33ac:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    33ae:	8f ef       	ldi	r24, 0xFF	; 255
    33b0:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	while ((res & 0x80) && --n);
    33b4:	87 ff       	sbrs	r24, 7
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <send_cmd+0x7a>
    33b8:	c1 50       	subi	r28, 0x01	; 1
    33ba:	c9 f7       	brne	.-14     	; 0x33ae <send_cmd+0x6c>

	return res;			/* Return with the response value */
}
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	e5 e0       	ldi	r30, 0x05	; 5
    33c2:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x1a>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    33c6:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>
		if (!select()) return 0xFF;
    33ca:	0e 94 8d 19 	call	0x331a	; 0x331a <select>
    33ce:	89 2b       	or	r24, r25
    33d0:	79 f6       	brne	.-98     	; 0x3370 <send_cmd+0x2e>
    33d2:	8f ef       	ldi	r24, 0xFF	; 255
    33d4:	f3 cf       	rjmp	.-26     	; 0x33bc <send_cmd+0x7a>

000033d6 <xmit_datablock.part.1>:
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    33d6:	9c 01       	movw	r18, r24
    33d8:	3e 5f       	subi	r19, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
    33da:	fc 01       	movw	r30, r24
    33dc:	40 81       	ld	r20, Z
    33de:	4e bd       	out	0x2e, r20	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    33e0:	0d b4       	in	r0, 0x2d	; 45
    33e2:	07 fe       	sbrs	r0, 7
    33e4:	fd cf       	rjmp	.-6      	; 0x33e0 <xmit_datablock.part.1+0xa>
		SPDR = *p++;
    33e6:	fc 01       	movw	r30, r24
    33e8:	41 81       	ldd	r20, Z+1	; 0x01
    33ea:	4e bd       	out	0x2e, r20	; 46
		loop_until_bit_is_set(SPSR, SPIF);
    33ec:	0d b4       	in	r0, 0x2d	; 45
    33ee:	07 fe       	sbrs	r0, 7
    33f0:	fd cf       	rjmp	.-6      	; 0x33ec <xmit_datablock.part.1+0x16>
    33f2:	02 96       	adiw	r24, 0x02	; 2
	} while (cnt -= 2);
    33f4:	82 17       	cp	r24, r18
    33f6:	93 07       	cpc	r25, r19
    33f8:	81 f7       	brne	.-32     	; 0x33da <xmit_datablock.part.1+0x4>

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */

	xmit_spi_multi(buff, 512);			/* Data */
	xchg_spi(0xFF); xchg_spi(0xFF);		/* Dummy CRC */
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    3400:	8f ef       	ldi	r24, 0xFF	; 255
    3402:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>

	resp = xchg_spi(0xFF);				/* Receive data resp */
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */
    340c:	28 2f       	mov	r18, r24
    340e:	2f 71       	andi	r18, 0x1F	; 31
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	25 30       	cpi	r18, 0x05	; 5
    3416:	11 f0       	breq	.+4      	; 0x341c <xmit_datablock.part.1+0x46>
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	80 e0       	ldi	r24, 0x00	; 0

	/* Busy check is done at next transmission */
}
    341c:	08 95       	ret

0000341e <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	e5 e1       	ldi	r30, 0x15	; 21
    3424:	fa e1       	ldi	r31, 0x1A	; 26
    3426:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__+0x14>
	BYTE  ty;

	DDRB |= (1 << CS);	// Output -CS 
    342a:	22 9a       	sbi	0x04, 2	; 4
	DDRB |= (1 << SCLK);	// Output - CLK
    342c:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1 << MOSI);	// Output - MOSI
    342e:	23 9a       	sbi	0x04, 3	; 4
	DDRB &=~(1 << MISO);	// Input -  MISO
    3430:	24 98       	cbi	0x04, 4	; 4

	PORTB |= (1 <<CS);  // UNSELECT  set HIGH (Chip Select) 
    3432:	2a 9a       	sbi	0x05, 2	; 5

	SPCR = (1 << SPE)|(1 << MSTR);
    3434:	80 e5       	ldi	r24, 0x50	; 80
    3436:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPR1)|(1 << SPR0);  
    3438:	8c b5       	in	r24, 0x2c	; 44
    343a:	83 60       	ori	r24, 0x03	; 3
    343c:	8c bd       	out	0x2c, r24	; 44
	SPSR &= ~(1 << SPI2X);
    343e:	8d b5       	in	r24, 0x2d	; 45
    3440:	8e 7f       	andi	r24, 0xFE	; 254
    3442:	8d bd       	out	0x2d, r24	; 45
    3444:	ca e0       	ldi	r28, 0x0A	; 10
	
	ty =0; //card type

	for (uint8_t n = 10; n; n--) 
		xchg_spi(0xFF);	/* 80 dummy clocks */
    3446:	8f ef       	ldi	r24, 0xFF	; 255
    3448:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    344c:	c1 50       	subi	r28, 0x01	; 1
	SPCR |= (1 << SPR1)|(1 << SPR0);  
	SPSR &= ~(1 << SPI2X);
	
	ty =0; //card type

	for (uint8_t n = 10; n; n--) 
    344e:	d9 f7       	brne	.-10     	; 0x3446 <mmc_disk_initialize+0x28>
		xchg_spi(0xFF);	/* 80 dummy clocks */

	PORTB &= ~(1 << CS); // SELECT card set LOW
    3450:	2a 98       	cbi	0x05, 2	; 5
    3452:	00 e0       	ldi	r16, 0x00	; 0
    3454:	12 e0       	ldi	r17, 0x02	; 2

	uint8_t response;
	
    	for(uint16_t i = 0; ; ++i)
    	{   
		response = send_cmd(CMD0, 0); 
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	ba 01       	movw	r22, r20
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
		if(response == 1)
    3462:	81 30       	cpi	r24, 0x01	; 1
    3464:	29 f0       	breq	.+10     	; 0x3470 <mmc_disk_initialize+0x52>
    3466:	01 50       	subi	r16, 0x01	; 1
    3468:	11 09       	sbc	r17, r1
		{
            		break;
		}
       		if(i == 0x1ff)
    346a:	a9 f7       	brne	.-22     	; 0x3456 <mmc_disk_initialize+0x38>

    if(ty  & CT_SDC2)
    {
        if(send_cmd(CMD58, 0))
        {
	    PORTB |= (1 <<CS);  // UNSELECT  set HIGH (Chip Select) 
    346c:	2a 9a       	sbi	0x05, 2	; 5
    346e:	14 c0       	rjmp	.+40     	; 0x3498 <mmc_disk_initialize+0x7a>
        	}
	}   


/* check for version of SD card specification */
    response = send_cmd(CMD8, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3470:	4a ea       	ldi	r20, 0xAA	; 170
    3472:	51 e0       	ldi	r21, 0x01	; 1
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	88 e0       	ldi	r24, 0x08	; 8
    347a:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    if((response & (1 << 2)) == 0)
    347e:	82 fd       	sbrc	r24, 2
    3480:	40 c0       	rjmp	.+128    	; 0x3502 <mmc_disk_initialize+0xe4>
    {
	xchg_spi(0xff);
    3482:	8f ef       	ldi	r24, 0xFF	; 255
    3484:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi(0xff);
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
        if((xchg_spi(0xff) & 0x01) == 0)
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    3494:	80 fd       	sbrc	r24, 0
    3496:	07 c0       	rjmp	.+14     	; 0x34a6 <mmc_disk_initialize+0x88>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    3498:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
}
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
    34a0:	e8 e0       	ldi	r30, 0x08	; 8
    34a2:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__+0x14>
    {
	xchg_spi(0xff);
	xchg_spi(0xff);
        if((xchg_spi(0xff) & 0x01) == 0)
            return Stat; /* card operation voltage range doesn't match */
        if(xchg_spi(0xff) != 0xaa)
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    34ac:	8a 3a       	cpi	r24, 0xAA	; 170
    34ae:	a1 f7       	brne	.-24     	; 0x3498 <mmc_disk_initialize+0x7a>
            return Stat; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
	ty |= CT_SDC2;
    34b0:	c8 e0       	ldi	r28, 0x08	; 8
    34b2:	dc 2f       	mov	r29, r28
    34b4:	d8 70       	andi	r29, 0x08	; 8
    34b6:	cc 2e       	mov	r12, r28
    34b8:	d1 2c       	mov	r13, r1
    34ba:	f1 2c       	mov	r15, r1
    34bc:	e1 2c       	mov	r14, r1
    34be:	8b e1       	ldi	r24, 0x1B	; 27
    34c0:	cc 0c       	add	r12, r12
    34c2:	dd 1c       	adc	r13, r13
    34c4:	ee 1c       	adc	r14, r14
    34c6:	ff 1c       	adc	r15, r15
    34c8:	8a 95       	dec	r24
    34ca:	d1 f7       	brne	.-12     	; 0x34c0 <mmc_disk_initialize+0xa2>
    34cc:	cc 24       	eor	r12, r12
    34ce:	dd 24       	eor	r13, r13
    34d0:	ee 24       	eor	r14, r14
    34d2:	80 e4       	ldi	r24, 0x40	; 64
    34d4:	f8 22       	and	r15, r24
        send_cmd(CMD55, 0);
        response = send_cmd(ACMD41, 0);
        if((response & (1 << 2)) == 0)
        {
            /* card conforms to SD 1 card specification */
	    ty |=CT_SDC1;
    34d6:	00 e0       	ldi	r16, 0x00	; 0
    34d8:	10 e8       	ldi	r17, 0x80	; 128
            uint32_t arg = 0;

            if(ty & CT_SDC2)
                arg = 0x40000000;

            send_cmd(CMD55, 0);
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	ba 01       	movw	r22, r20
            response = send_cmd(ACMD41, arg);
        }
        else
        {
            response = send_cmd(CMD1, 0);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(ty & (CT_SDC1 | CT_SDC2 )) 
    34e2:	cc 23       	and	r28, r28
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <mmc_disk_initialize+0xd4>
            uint32_t arg = 0;

            if(ty & CT_SDC2)
                arg = 0x40000000;

            send_cmd(CMD55, 0);
    34e6:	87 e3       	ldi	r24, 0x37	; 55
    34e8:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
            response = send_cmd(ACMD41, arg);
    34ec:	b7 01       	movw	r22, r14
    34ee:	a6 01       	movw	r20, r12
    34f0:	89 ea       	ldi	r24, 0xA9	; 169
        }
        else
        {
            response = send_cmd(CMD1, 0);
    34f2:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
        }

        if((response & 1 ) == 0)
    34f6:	80 ff       	sbrs	r24, 0
    34f8:	15 c0       	rjmp	.+42     	; 0x3524 <mmc_disk_initialize+0x106>
    34fa:	01 50       	subi	r16, 0x01	; 1
    34fc:	11 09       	sbc	r17, r1
            break;

        if(i == 0x7fff)
    34fe:	69 f7       	brne	.-38     	; 0x34da <mmc_disk_initialize+0xbc>
    3500:	b5 cf       	rjmp	.-150    	; 0x346c <mmc_disk_initialize+0x4e>
	ty |= CT_SDC2;
    }
    else
    {
        /* determine SD/MMC card type */
        send_cmd(CMD55, 0);
    3502:	40 e0       	ldi	r20, 0x00	; 0
    3504:	50 e0       	ldi	r21, 0x00	; 0
    3506:	ba 01       	movw	r22, r20
    3508:	87 e3       	ldi	r24, 0x37	; 55
    350a:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
        response = send_cmd(ACMD41, 0);
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	ba 01       	movw	r22, r20
    3514:	89 ea       	ldi	r24, 0xA9	; 169
    3516:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>

	SPCR = (1 << SPE)|(1 << MSTR);
	SPCR |= (1 << SPR1)|(1 << SPR0);  
	SPSR &= ~(1 << SPI2X);
	
	ty =0; //card type
    351a:	c0 e0       	ldi	r28, 0x00	; 0
    else
    {
        /* determine SD/MMC card type */
        send_cmd(CMD55, 0);
        response = send_cmd(ACMD41, 0);
        if((response & (1 << 2)) == 0)
    351c:	82 fd       	sbrc	r24, 2
    351e:	c9 cf       	rjmp	.-110    	; 0x34b2 <mmc_disk_initialize+0x94>
        {
            /* card conforms to SD 1 card specification */
	    ty |=CT_SDC1;
    3520:	c4 e0       	ldi	r28, 0x04	; 4
    3522:	c7 cf       	rjmp	.-114    	; 0x34b2 <mmc_disk_initialize+0x94>
            return Stat;
        }
    }


    if(ty  & CT_SDC2)
    3524:	dd 23       	and	r29, r29
    3526:	b9 f0       	breq	.+46     	; 0x3556 <mmc_disk_initialize+0x138>
    {
        if(send_cmd(CMD58, 0))
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	ba 01       	movw	r22, r20
    352e:	8a e3       	ldi	r24, 0x3A	; 58
    3530:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    3534:	81 11       	cpse	r24, r1
    3536:	9a cf       	rjmp	.-204    	; 0x346c <mmc_disk_initialize+0x4e>
        {
	    PORTB |= (1 <<CS);  // UNSELECT  set HIGH (Chip Select) 
            return Stat;
        }

        if(xchg_spi(0xff) & 0x40)
    3538:	8f ef       	ldi	r24, 0xFF	; 255
    353a:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    353e:	c8 e0       	ldi	r28, 0x08	; 8
    3540:	86 fd       	sbrc	r24, 6
            ty |= CT_SDC; // ??? is SD_RAW_SPEC_SDHC same as CT_SDC
    3542:	cc e0       	ldi	r28, 0x0C	; 12

	xchg_spi(0xff);
    3544:	8f ef       	ldi	r24, 0xFF	; 255
    3546:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi(0xff);
    354a:	8f ef       	ldi	r24, 0xFF	; 255
    354c:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
	xchg_spi(0xff);
    3550:	8f ef       	ldi	r24, 0xFF	; 255
    3552:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    }


    /* set block size to 512 bytes */
    if(send_cmd(CMD16, 512))
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	52 e0       	ldi	r21, 0x02	; 2
    355a:	60 e0       	ldi	r22, 0x00	; 0
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	80 e1       	ldi	r24, 0x10	; 16
    3560:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    {
	PORTB |= (1 <<CS);  // UNSELECT  set HIGH (Chip Select) 
    3564:	2a 9a       	sbi	0x05, 2	; 5
	xchg_spi(0xff);
    }


    /* set block size to 512 bytes */
    if(send_cmd(CMD16, 512))
    3566:	81 11       	cpse	r24, r1
    3568:	97 cf       	rjmp	.-210    	; 0x3498 <mmc_disk_initialize+0x7a>
    }
    /* deaddress card */
	    PORTB |= (1 <<CS);  // UNSELECT  set HIGH (Chip Select) 

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    356a:	8c b5       	in	r24, 0x2c	; 44
    356c:	8c 7f       	andi	r24, 0xFC	; 252
    356e:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    3570:	8d b5       	in	r24, 0x2d	; 45
    3572:	81 60       	ori	r24, 0x01	; 1
    3574:	8d bd       	out	0x2d, r24	; 45

	CardType = ty;
    3576:	c0 93 9e 01 	sts	0x019E, r28	; 0x80019e <CardType>
	deselect();
    357a:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>

	if (ty) {			/* Initialization succeded */
    357e:	cc 23       	and	r28, r28
    3580:	61 f0       	breq	.+24     	; 0x359a <mmc_disk_initialize+0x17c>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3586:	8e 7f       	andi	r24, 0xFE	; 254
    3588:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		FCLK_FAST();
    358c:	8c b5       	in	r24, 0x2c	; 44
    358e:	8c 7f       	andi	r24, 0xFC	; 252
    3590:	8c bd       	out	0x2c, r24	; 44
    3592:	8d b5       	in	r24, 0x2d	; 45
    3594:	81 60       	ori	r24, 0x01	; 1
    3596:	8d bd       	out	0x2d, r24	; 45
    3598:	7f cf       	rjmp	.-258    	; 0x3498 <mmc_disk_initialize+0x7a>
	} else {			/* Initialization failed */
		power_off();
    359a:	0e 94 28 19 	call	0x3250	; 0x3250 <power_off>
    359e:	7c cf       	rjmp	.-264    	; 0x3498 <mmc_disk_initialize+0x7a>

000035a0 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
    35a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
}
    35a4:	08 95       	ret

000035a6 <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    35a6:	ef 92       	push	r14
    35a8:	ff 92       	push	r15
    35aa:	1f 93       	push	r17
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	7c 01       	movw	r14, r24
    35b2:	e9 01       	movw	r28, r18
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    35b4:	20 97       	sbiw	r28, 0x00	; 0
    35b6:	c9 f1       	breq	.+114    	; 0x362a <mmc_disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    35b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    35bc:	80 fd       	sbrc	r24, 0
    35be:	38 c0       	rjmp	.+112    	; 0x3630 <mmc_disk_read+0x8a>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    35c0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <CardType>
    35c4:	84 fd       	sbrc	r24, 4
    35c6:	07 c0       	rjmp	.+14     	; 0x35d6 <mmc_disk_read+0x30>
    35c8:	89 e0       	ldi	r24, 0x09	; 9
    35ca:	44 0f       	add	r20, r20
    35cc:	55 1f       	adc	r21, r21
    35ce:	66 1f       	adc	r22, r22
    35d0:	77 1f       	adc	r23, r23
    35d2:	8a 95       	dec	r24
    35d4:	d1 f7       	brne	.-12     	; 0x35ca <mmc_disk_read+0x24>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    35d6:	11 e1       	ldi	r17, 0x11	; 17
    35d8:	c2 30       	cpi	r28, 0x02	; 2
    35da:	d1 05       	cpc	r29, r1
    35dc:	08 f0       	brcs	.+2      	; 0x35e0 <mmc_disk_read+0x3a>
    35de:	12 e1       	ldi	r17, 0x12	; 18
	if (send_cmd(cmd, sect) == 0) {
    35e0:	81 2f       	mov	r24, r17
    35e2:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    35e6:	81 11       	cpse	r24, r1
    35e8:	13 c0       	rjmp	.+38     	; 0x3610 <mmc_disk_read+0x6a>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	72 e0       	ldi	r23, 0x02	; 2
    35ee:	c7 01       	movw	r24, r14
    35f0:	0e 94 3a 19 	call	0x3274	; 0x3274 <rcvr_datablock>
    35f4:	89 2b       	or	r24, r25
    35f6:	21 f0       	breq	.+8      	; 0x3600 <mmc_disk_read+0x5a>
			buff += 512;
    35f8:	8e ef       	ldi	r24, 0xFE	; 254
    35fa:	f8 1a       	sub	r15, r24
		} while (--count);
    35fc:	21 97       	sbiw	r28, 0x01	; 1
    35fe:	a9 f7       	brne	.-22     	; 0x35ea <mmc_disk_read+0x44>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3600:	12 31       	cpi	r17, 0x12	; 18
    3602:	31 f4       	brne	.+12     	; 0x3610 <mmc_disk_read+0x6a>
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	ba 01       	movw	r22, r20
    360a:	8c e0       	ldi	r24, 0x0C	; 12
    360c:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
	}
	deselect();
    3610:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>

	return count ? RES_ERROR : RES_OK;
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	cd 2b       	or	r28, r29
    361a:	09 f4       	brne	.+2      	; 0x361e <mmc_disk_read+0x78>
    361c:	80 e0       	ldi	r24, 0x00	; 0
}
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	08 95       	ret
{
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    362a:	84 e0       	ldi	r24, 0x04	; 4
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	f7 cf       	rjmp	.-18     	; 0x361e <mmc_disk_read+0x78>
    3630:	83 e0       	ldi	r24, 0x03	; 3
    3632:	fc cf       	rjmp	.-8      	; 0x362c <mmc_disk_read+0x86>

00003634 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	a0 e0       	ldi	r26, 0x00	; 0
    3638:	e0 e2       	ldi	r30, 0x20	; 32
    363a:	fb e1       	ldi	r31, 0x1B	; 27
    363c:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__+0x14>
    3640:	8c 01       	movw	r16, r24
    3642:	6a 01       	movw	r12, r20
    3644:	7b 01       	movw	r14, r22
    3646:	e9 01       	movw	r28, r18
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    3648:	20 97       	sbiw	r28, 0x00	; 0
    364a:	09 f4       	brne	.+2      	; 0x364e <mmc_disk_write+0x1a>
    364c:	64 c0       	rjmp	.+200    	; 0x3716 <mmc_disk_write+0xe2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    364e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3652:	80 fd       	sbrc	r24, 0
    3654:	63 c0       	rjmp	.+198    	; 0x371c <mmc_disk_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3656:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    365a:	82 fd       	sbrc	r24, 2
    365c:	61 c0       	rjmp	.+194    	; 0x3720 <mmc_disk_write+0xec>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */
    365e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <CardType>
    3662:	84 fd       	sbrc	r24, 4
    3664:	07 c0       	rjmp	.+14     	; 0x3674 <mmc_disk_write+0x40>
    3666:	99 e0       	ldi	r25, 0x09	; 9
    3668:	cc 0c       	add	r12, r12
    366a:	dd 1c       	adc	r13, r13
    366c:	ee 1c       	adc	r14, r14
    366e:	ff 1c       	adc	r15, r15
    3670:	9a 95       	dec	r25
    3672:	d1 f7       	brne	.-12     	; 0x3668 <mmc_disk_write+0x34>

	if (count == 1) {	/* Single block write */
    3674:	c1 30       	cpi	r28, 0x01	; 1
    3676:	d1 05       	cpc	r29, r1
    3678:	39 f5       	brne	.+78     	; 0x36c8 <mmc_disk_write+0x94>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    367a:	b7 01       	movw	r22, r14
    367c:	a6 01       	movw	r20, r12
    367e:	88 e1       	ldi	r24, 0x18	; 24
    3680:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    3684:	88 23       	and	r24, r24
    3686:	71 f0       	breq	.+28     	; 0x36a4 <mmc_disk_write+0x70>
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3688:	c1 e0       	ldi	r28, 0x01	; 1
    368a:	d0 e0       	ldi	r29, 0x00	; 0
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	deselect();
    368c:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>

	return count ? RES_ERROR : RES_OK;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	cd 2b       	or	r28, r29
    3696:	09 f4       	brne	.+2      	; 0x369a <mmc_disk_write+0x66>
    3698:	80 e0       	ldi	r24, 0x00	; 0
}
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	e8 e0       	ldi	r30, 0x08	; 8
    36a0:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__+0x14>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    36a4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <wait_ready.constprop.2>
    36a8:	89 2b       	or	r24, r25
    36aa:	71 f3       	breq	.-36     	; 0x3688 <mmc_disk_write+0x54>

	xchg_spi(token);					/* Xmit data token */
    36ac:	8e ef       	ldi	r24, 0xFE	; 254
    36ae:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    36b2:	c8 01       	movw	r24, r16
    36b4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <xmit_datablock.part.1>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE)) {
    36b8:	31 e0       	ldi	r19, 0x01	; 1
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	89 2b       	or	r24, r25
    36be:	09 f0       	breq	.+2      	; 0x36c2 <mmc_disk_write+0x8e>
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	c3 2f       	mov	r28, r19
    36c4:	d2 2f       	mov	r29, r18
    36c6:	e2 cf       	rjmp	.-60     	; 0x368c <mmc_disk_write+0x58>
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    36c8:	8c 70       	andi	r24, 0x0C	; 12
    36ca:	31 f0       	breq	.+12     	; 0x36d8 <mmc_disk_write+0xa4>
    36cc:	ae 01       	movw	r20, r28
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	87 e9       	ldi	r24, 0x97	; 151
    36d4:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    36d8:	b7 01       	movw	r22, r14
    36da:	a6 01       	movw	r20, r12
    36dc:	89 e1       	ldi	r24, 0x19	; 25
    36de:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    36e2:	81 11       	cpse	r24, r1
    36e4:	d3 cf       	rjmp	.-90     	; 0x368c <mmc_disk_write+0x58>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    36e6:	0e 94 70 19 	call	0x32e0	; 0x32e0 <wait_ready.constprop.2>
    36ea:	89 2b       	or	r24, r25
    36ec:	59 f0       	breq	.+22     	; 0x3704 <mmc_disk_write+0xd0>

	xchg_spi(token);					/* Xmit data token */
    36ee:	8c ef       	ldi	r24, 0xFC	; 252
    36f0:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    36f4:	c8 01       	movw	r24, r16
    36f6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <xmit_datablock.part.1>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    36fa:	89 2b       	or	r24, r25
    36fc:	19 f0       	breq	.+6      	; 0x3704 <mmc_disk_write+0xd0>
				buff += 512;
    36fe:	1e 5f       	subi	r17, 0xFE	; 254
			} while (--count);
    3700:	21 97       	sbiw	r28, 0x01	; 1
    3702:	89 f7       	brne	.-30     	; 0x36e6 <mmc_disk_write+0xb2>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
    3704:	0e 94 70 19 	call	0x32e0	; 0x32e0 <wait_ready.constprop.2>
    3708:	89 2b       	or	r24, r25
    370a:	09 f4       	brne	.+2      	; 0x370e <mmc_disk_write+0xda>
    370c:	bd cf       	rjmp	.-134    	; 0x3688 <mmc_disk_write+0x54>

	xchg_spi(token);					/* Xmit data token */
    370e:	8d ef       	ldi	r24, 0xFD	; 253
    3710:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    3714:	bb cf       	rjmp	.-138    	; 0x368c <mmc_disk_write+0x58>
)
{
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
    3716:	84 e0       	ldi	r24, 0x04	; 4
	if (Stat & STA_NOINIT) return RES_NOTRDY;
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	bf cf       	rjmp	.-130    	; 0x369a <mmc_disk_write+0x66>
{
	DWORD sect = (DWORD)sector;


	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    371c:	83 e0       	ldi	r24, 0x03	; 3
    371e:	fc cf       	rjmp	.-8      	; 0x3718 <mmc_disk_write+0xe4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3720:	82 e0       	ldi	r24, 0x02	; 2
    3722:	fa cf       	rjmp	.-12     	; 0x3718 <mmc_disk_write+0xe4>

00003724 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3724:	a0 e1       	ldi	r26, 0x10	; 16
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	e8 e9       	ldi	r30, 0x98	; 152
    372a:	fb e1       	ldi	r31, 0x1B	; 27
    372c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__+0x18>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3730:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
    3734:	90 fd       	sbrc	r25, 0
    3736:	5a c1       	rjmp	.+692    	; 0x39ec <mmc_disk_ioctl+0x2c8>

	res = RES_ERROR;
	switch (cmd) {
    3738:	82 33       	cpi	r24, 0x32	; 50
    373a:	09 f4       	brne	.+2      	; 0x373e <mmc_disk_ioctl+0x1a>
    373c:	1f c1       	rjmp	.+574    	; 0x397c <mmc_disk_ioctl+0x258>
    373e:	8b 01       	movw	r16, r22
    3740:	83 33       	cpi	r24, 0x33	; 51
    3742:	58 f4       	brcc	.+22     	; 0x375a <mmc_disk_ioctl+0x36>
    3744:	81 30       	cpi	r24, 0x01	; 1
    3746:	79 f1       	breq	.+94     	; 0x37a6 <mmc_disk_ioctl+0x82>
    3748:	00 f1       	brcs	.+64     	; 0x378a <mmc_disk_ioctl+0x66>
    374a:	83 30       	cpi	r24, 0x03	; 3
    374c:	09 f4       	brne	.+2      	; 0x3750 <mmc_disk_ioctl+0x2c>
    374e:	9c c0       	rjmp	.+312    	; 0x3888 <mmc_disk_ioctl+0x164>
    3750:	87 30       	cpi	r24, 0x07	; 7
    3752:	09 f4       	brne	.+2      	; 0x3756 <mmc_disk_ioctl+0x32>
    3754:	43 c1       	rjmp	.+646    	; 0x39dc <mmc_disk_ioctl+0x2b8>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    3756:	04 e0       	ldi	r16, 0x04	; 4
    3758:	16 c1       	rjmp	.+556    	; 0x3986 <mmc_disk_ioctl+0x262>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    375a:	84 33       	cpi	r24, 0x34	; 52
    375c:	09 f4       	brne	.+2      	; 0x3760 <mmc_disk_ioctl+0x3c>
    375e:	23 c1       	rjmp	.+582    	; 0x39a6 <mmc_disk_ioctl+0x282>
    3760:	08 f4       	brcc	.+2      	; 0x3764 <mmc_disk_ioctl+0x40>
    3762:	13 c1       	rjmp	.+550    	; 0x398a <mmc_disk_ioctl+0x266>
    3764:	85 33       	cpi	r24, 0x35	; 53
    3766:	09 f4       	brne	.+2      	; 0x376a <mmc_disk_ioctl+0x46>
    3768:	23 c1       	rjmp	.+582    	; 0x39b0 <mmc_disk_ioctl+0x28c>
    376a:	86 33       	cpi	r24, 0x36	; 54
    376c:	a1 f7       	brne	.-24     	; 0x3756 <mmc_disk_ioctl+0x32>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	ba 01       	movw	r22, r20
    3774:	8d e8       	ldi	r24, 0x8D	; 141
    3776:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    377a:	81 11       	cpse	r24, r1
    377c:	1c c0       	rjmp	.+56     	; 0x37b6 <mmc_disk_ioctl+0x92>
			xchg_spi(0xFF);
    377e:	8f ef       	ldi	r24, 0xFF	; 255
    3780:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    3784:	60 e4       	ldi	r22, 0x40	; 64
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	0a c1       	rjmp	.+532    	; 0x399e <mmc_disk_ioctl+0x27a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    378a:	0e 94 8d 19 	call	0x331a	; 0x331a <select>
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    378e:	01 e0       	ldi	r16, 0x01	; 1
    3790:	10 e0       	ldi	r17, 0x00	; 0
    3792:	89 2b       	or	r24, r25
    3794:	09 f0       	breq	.+2      	; 0x3798 <mmc_disk_ioctl+0x74>
    3796:	00 e0       	ldi	r16, 0x00	; 0
		}
		deselect();
    3798:	0e 94 35 19 	call	0x326a	; 0x326a <deselect>
	default:
		res = RES_PARERR;
	}

	return res;
}
    379c:	c8 01       	movw	r24, r16
    379e:	60 96       	adiw	r28, 0x10	; 16
    37a0:	e6 e0       	ldi	r30, 0x06	; 6
    37a2:	0c 94 a7 1e 	jmp	0x3d4e	; 0x3d4e <__epilogue_restores__+0x18>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    37a6:	40 e0       	ldi	r20, 0x00	; 0
    37a8:	50 e0       	ldi	r21, 0x00	; 0
    37aa:	ba 01       	movw	r22, r20
    37ac:	89 e0       	ldi	r24, 0x09	; 9
    37ae:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    37b2:	88 23       	and	r24, r24
    37b4:	11 f0       	breq	.+4      	; 0x37ba <mmc_disk_ioctl+0x96>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    37b6:	01 e0       	ldi	r16, 0x01	; 1
    37b8:	37 c0       	rjmp	.+110    	; 0x3828 <mmc_disk_ioctl+0x104>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    37ba:	60 e1       	ldi	r22, 0x10	; 16
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	ce 01       	movw	r24, r28
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	0e 94 3a 19 	call	0x3274	; 0x3274 <rcvr_datablock>
    37c6:	89 2b       	or	r24, r25
    37c8:	b1 f3       	breq	.-20     	; 0x37b6 <mmc_disk_ioctl+0x92>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    37ca:	99 81       	ldd	r25, Y+1	; 0x01
    37cc:	92 95       	swap	r25
    37ce:	96 95       	lsr	r25
    37d0:	96 95       	lsr	r25
    37d2:	93 70       	andi	r25, 0x03	; 3
    37d4:	89 85       	ldd	r24, Y+9	; 0x09
    37d6:	6a 85       	ldd	r22, Y+10	; 0x0a
    37d8:	48 85       	ldd	r20, Y+8	; 0x08
    37da:	91 30       	cpi	r25, 0x01	; 1
    37dc:	39 f5       	brne	.+78     	; 0x382c <mmc_disk_ioctl+0x108>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	32 2f       	mov	r19, r18
    37e4:	22 27       	eor	r18, r18
    37e6:	26 0f       	add	r18, r22
    37e8:	31 1d       	adc	r19, r1
    37ea:	84 2f       	mov	r24, r20
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	dc 01       	movw	r26, r24
    37f4:	99 27       	eor	r25, r25
    37f6:	88 27       	eor	r24, r24
    37f8:	88 27       	eor	r24, r24
    37fa:	99 27       	eor	r25, r25
    37fc:	af 73       	andi	r26, 0x3F	; 63
    37fe:	bb 27       	eor	r27, r27
    3800:	01 96       	adiw	r24, 0x01	; 1
    3802:	a1 1d       	adc	r26, r1
    3804:	b1 1d       	adc	r27, r1
    3806:	82 0f       	add	r24, r18
    3808:	93 1f       	adc	r25, r19
    380a:	a1 1d       	adc	r26, r1
    380c:	b1 1d       	adc	r27, r1
				*(LBA_t*)buff = csize << 10;
    380e:	2a e0       	ldi	r18, 0x0A	; 10
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	2a 95       	dec	r18
    381a:	d1 f7       	brne	.-12     	; 0x3810 <mmc_disk_ioctl+0xec>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SDC1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    381c:	f8 01       	movw	r30, r16
    381e:	80 83       	st	Z, r24
    3820:	91 83       	std	Z+1, r25	; 0x01
    3822:	a2 83       	std	Z+2, r26	; 0x02
    3824:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    3826:	00 e0       	ldi	r16, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    3828:	10 e0       	ldi	r17, 0x00	; 0
    382a:	b6 cf       	rjmp	.-148    	; 0x3798 <mmc_disk_ioctl+0x74>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(LBA_t*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    382c:	82 95       	swap	r24
    382e:	86 95       	lsr	r24
    3830:	86 95       	lsr	r24
    3832:	83 70       	andi	r24, 0x03	; 3
    3834:	f4 e0       	ldi	r31, 0x04	; 4
    3836:	4f 9f       	mul	r20, r31
    3838:	a0 01       	movw	r20, r0
    383a:	11 24       	eor	r1, r1
    383c:	84 0f       	add	r24, r20
    383e:	95 2f       	mov	r25, r21
    3840:	91 1d       	adc	r25, r1
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	4f 81       	ldd	r20, Y+7	; 0x07
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	54 2f       	mov	r21, r20
    384a:	44 27       	eor	r20, r20
    384c:	55 0f       	add	r21, r21
    384e:	55 0f       	add	r21, r21
    3850:	44 27       	eor	r20, r20
    3852:	5c 70       	andi	r21, 0x0C	; 12
    3854:	84 0f       	add	r24, r20
    3856:	95 1f       	adc	r25, r21
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	a0 e0       	ldi	r26, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(LBA_t*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    385c:	3e 81       	ldd	r19, Y+6	; 0x06
    385e:	3f 70       	andi	r19, 0x0F	; 15
    3860:	2b 85       	ldd	r18, Y+11	; 0x0b
    3862:	22 1f       	adc	r18, r18
    3864:	22 27       	eor	r18, r18
    3866:	22 1f       	adc	r18, r18
    3868:	32 0f       	add	r19, r18
    386a:	3e 5f       	subi	r19, 0xFE	; 254
    386c:	26 2f       	mov	r18, r22
    386e:	22 0f       	add	r18, r18
    3870:	26 70       	andi	r18, 0x06	; 6
    3872:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(LBA_t*)buff = csize << (n - 9);
    3874:	29 50       	subi	r18, 0x09	; 9
    3876:	33 0b       	sbc	r19, r19
		if (CardType & CT_SDC2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3878:	04 c0       	rjmp	.+8      	; 0x3882 <mmc_disk_ioctl+0x15e>
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	aa 1f       	adc	r26, r26
    3880:	bb 1f       	adc	r27, r27
    3882:	2a 95       	dec	r18
    3884:	d2 f7       	brpl	.-12     	; 0x387a <mmc_disk_ioctl+0x156>
    3886:	ca cf       	rjmp	.-108    	; 0x381c <mmc_disk_ioctl+0xf8>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SDC2) {	/* SDv2? */
    3888:	f0 90 9e 01 	lds	r15, 0x019E	; 0x80019e <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    388c:	40 e0       	ldi	r20, 0x00	; 0
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	ba 01       	movw	r22, r20
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SDC2) {	/* SDv2? */
    3892:	f3 fe       	sbrs	r15, 3
    3894:	21 c0       	rjmp	.+66     	; 0x38d8 <mmc_disk_ioctl+0x1b4>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3896:	8d e8       	ldi	r24, 0x8D	; 141
    3898:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    389c:	81 11       	cpse	r24, r1
    389e:	8b cf       	rjmp	.-234    	; 0x37b6 <mmc_disk_ioctl+0x92>
				xchg_spi(0xFF);
    38a0:	8f ef       	ldi	r24, 0xFF	; 255
    38a2:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    38a6:	60 e1       	ldi	r22, 0x10	; 16
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	ce 01       	movw	r24, r28
    38ac:	01 96       	adiw	r24, 0x01	; 1
    38ae:	0e 94 3a 19 	call	0x3274	; 0x3274 <rcvr_datablock>
    38b2:	89 2b       	or	r24, r25
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <mmc_disk_ioctl+0x194>
    38b6:	7f cf       	rjmp	.-258    	; 0x37b6 <mmc_disk_ioctl+0x92>
    38b8:	60 e3       	ldi	r22, 0x30	; 48
    38ba:	f6 2e       	mov	r15, r22
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    38bc:	8f ef       	ldi	r24, 0xFF	; 255
    38be:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    38c2:	fa 94       	dec	r15
    38c4:	f1 10       	cpse	r15, r1
    38c6:	fa cf       	rjmp	.-12     	; 0x38bc <mmc_disk_ioctl+0x198>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    38c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    38ca:	22 95       	swap	r18
    38cc:	2f 70       	andi	r18, 0x0F	; 15
    38ce:	80 e1       	ldi	r24, 0x10	; 16
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a0 e0       	ldi	r26, 0x00	; 0
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	d0 cf       	rjmp	.-96     	; 0x3878 <mmc_disk_ioctl+0x154>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    38d8:	89 e0       	ldi	r24, 0x09	; 9
    38da:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    38de:	81 11       	cpse	r24, r1
    38e0:	6a cf       	rjmp	.-300    	; 0x37b6 <mmc_disk_ioctl+0x92>
    38e2:	60 e1       	ldi	r22, 0x10	; 16
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	ce 01       	movw	r24, r28
    38e8:	01 96       	adiw	r24, 0x01	; 1
    38ea:	0e 94 3a 19 	call	0x3274	; 0x3274 <rcvr_datablock>
    38ee:	89 2b       	or	r24, r25
    38f0:	09 f4       	brne	.+2      	; 0x38f4 <mmc_disk_ioctl+0x1d0>
    38f2:	61 cf       	rjmp	.-318    	; 0x37b6 <mmc_disk_ioctl+0x92>
    38f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	2c 85       	ldd	r18, Y+12	; 0x0c
				if (CardType & CT_SDC1) {	/* SDv1 */
    38fa:	f2 fe       	sbrs	r15, 2
    38fc:	1b c0       	rjmp	.+54     	; 0x3934 <mmc_disk_ioctl+0x210>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    38fe:	88 0f       	add	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	8e 77       	andi	r24, 0x7E	; 126
    3904:	99 27       	eor	r25, r25
    3906:	22 1f       	adc	r18, r18
    3908:	22 27       	eor	r18, r18
    390a:	22 1f       	adc	r18, r18
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	2f 5f       	subi	r18, 0xFF	; 255
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	82 0f       	add	r24, r18
    3914:	93 1f       	adc	r25, r19
    3916:	2e 85       	ldd	r18, Y+14	; 0x0e
    3918:	22 95       	swap	r18
    391a:	26 95       	lsr	r18
    391c:	26 95       	lsr	r18
    391e:	23 70       	andi	r18, 0x03	; 3
    3920:	21 50       	subi	r18, 0x01	; 1
    3922:	33 0b       	sbc	r19, r19
    3924:	02 c0       	rjmp	.+4      	; 0x392a <mmc_disk_ioctl+0x206>
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	2a 95       	dec	r18
    392c:	e2 f7       	brpl	.-8      	; 0x3926 <mmc_disk_ioctl+0x202>
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	a0 e0       	ldi	r26, 0x00	; 0
    3932:	74 cf       	rjmp	.-280    	; 0x381c <mmc_disk_ioctl+0xf8>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3934:	f8 e0       	ldi	r31, 0x08	; 8
    3936:	2f 9f       	mul	r18, r31
    3938:	a0 01       	movw	r20, r0
    393a:	11 24       	eor	r1, r1
    393c:	48 71       	andi	r20, 0x18	; 24
    393e:	55 27       	eor	r21, r21
    3940:	22 95       	swap	r18
    3942:	26 95       	lsr	r18
    3944:	27 70       	andi	r18, 0x07	; 7
    3946:	24 0f       	add	r18, r20
    3948:	35 2f       	mov	r19, r21
    394a:	31 1d       	adc	r19, r1
    394c:	2f 5f       	subi	r18, 0xFF	; 255
    394e:	3f 4f       	sbci	r19, 0xFF	; 255
    3950:	95 95       	asr	r25
    3952:	87 95       	ror	r24
    3954:	95 95       	asr	r25
    3956:	87 95       	ror	r24
    3958:	8f 71       	andi	r24, 0x1F	; 31
    395a:	99 27       	eor	r25, r25
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	28 9f       	mul	r18, r24
    3960:	a0 01       	movw	r20, r0
    3962:	29 9f       	mul	r18, r25
    3964:	50 0d       	add	r21, r0
    3966:	38 9f       	mul	r19, r24
    3968:	50 0d       	add	r21, r0
    396a:	11 24       	eor	r1, r1
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	f8 01       	movw	r30, r16
    3972:	40 83       	st	Z, r20
    3974:	51 83       	std	Z+1, r21	; 0x01
    3976:	62 83       	std	Z+2, r22	; 0x02
    3978:	73 83       	std	Z+3, r23	; 0x03
    397a:	55 cf       	rjmp	.-342    	; 0x3826 <mmc_disk_ioctl+0x102>
		break;
#endif
	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    397c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <CardType>
    3980:	fb 01       	movw	r30, r22
    3982:	80 83       	st	Z, r24
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
		res = RES_OK;
    3984:	00 e0       	ldi	r16, 0x00	; 0
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    3986:	10 e0       	ldi	r17, 0x00	; 0
    3988:	09 cf       	rjmp	.-494    	; 0x379c <mmc_disk_ioctl+0x78>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	ba 01       	movw	r22, r20
    3990:	89 e0       	ldi	r24, 0x09	; 9
		}
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    3992:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    3996:	60 e1       	ldi	r22, 0x10	; 16
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	81 11       	cpse	r24, r1
    399c:	0c cf       	rjmp	.-488    	; 0x37b6 <mmc_disk_ioctl+0x92>
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    399e:	c8 01       	movw	r24, r16
    39a0:	0e 94 3a 19 	call	0x3274	; 0x3274 <rcvr_datablock>
    39a4:	f4 ce       	rjmp	.-536    	; 0x378e <mmc_disk_ioctl+0x6a>
		}
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	ba 01       	movw	r22, r20
    39ac:	8a e0       	ldi	r24, 0x0A	; 10
    39ae:	f1 cf       	rjmp	.-30     	; 0x3992 <mmc_disk_ioctl+0x26e>
		}
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    39b0:	40 e0       	ldi	r20, 0x00	; 0
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	ba 01       	movw	r22, r20
    39b6:	8a e3       	ldi	r24, 0x3A	; 58
    39b8:	0e 94 a1 19 	call	0x3342	; 0x3342 <send_cmd>
    39bc:	81 11       	cpse	r24, r1
    39be:	fb ce       	rjmp	.-522    	; 0x37b6 <mmc_disk_ioctl+0x92>
    39c0:	78 01       	movw	r14, r16
    39c2:	f4 e0       	ldi	r31, 0x04	; 4
    39c4:	ef 0e       	add	r14, r31
    39c6:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    39c8:	8f ef       	ldi	r24, 0xFF	; 255
    39ca:	0e 94 2f 19 	call	0x325e	; 0x325e <xchg_spi>
    39ce:	f8 01       	movw	r30, r16
    39d0:	81 93       	st	Z+, r24
    39d2:	8f 01       	movw	r16, r30
    39d4:	ee 15       	cp	r30, r14
    39d6:	ff 05       	cpc	r31, r15
    39d8:	b9 f7       	brne	.-18     	; 0x39c8 <mmc_disk_ioctl+0x2a4>
    39da:	25 cf       	rjmp	.-438    	; 0x3826 <mmc_disk_ioctl+0x102>
		}
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    39dc:	0e 94 28 19 	call	0x3250	; 0x3250 <power_off>
		Stat |= STA_NOINIT;
    39e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    39e4:	81 60       	ori	r24, 0x01	; 1
    39e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    39ea:	cc cf       	rjmp	.-104    	; 0x3984 <mmc_disk_ioctl+0x260>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    39ec:	03 e0       	ldi	r16, 0x03	; 3
    39ee:	cb cf       	rjmp	.-106    	; 0x3986 <mmc_disk_ioctl+0x262>

000039f0 <mmc_disk_timerproc>:
{
	BYTE b;
	UINT n;


	b = Timer1;				/* 100Hz decrement timer */
    39f0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <Timer1>
	if (b) Timer1 = --b;
    39f4:	88 23       	and	r24, r24
    39f6:	19 f0       	breq	.+6      	; 0x39fe <mmc_disk_timerproc+0xe>
    39f8:	81 50       	subi	r24, 0x01	; 1
    39fa:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <Timer1>
	n = Timer2;
    39fe:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <Timer2>
    3a02:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <Timer2+0x1>
	if (n) Timer2 = --n;
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	29 f0       	breq	.+10     	; 0x3a14 <mmc_disk_timerproc+0x24>
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <Timer2+0x1>
    3a10:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <Timer2>

	b = Stat;
    3a14:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		b |= STA_PROTECT;
	} else {					/* Write enabled */
		b &= ~STA_PROTECT;
	}
	if (MMC_CD) {				/* Card inserted */
		b &= ~STA_NODISK;
    3a18:	89 7f       	andi	r24, 0xF9	; 249
	} else {					/* Socket empty */
		b |= (STA_NODISK | STA_NOINIT);
	}
	Stat = b;				/* Update MMC status */
    3a1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
    3a1e:	08 95       	ret

00003a20 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    3a20:	81 11       	cpse	r24, r1
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
    3a24:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <mmc_disk_status>
    3a28:	08 95       	ret
#endif
	}
	return STA_NOINIT;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
}
    3a2c:	08 95       	ret

00003a2e <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    3a2e:	81 11       	cpse	r24, r1
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
    3a32:	0e 94 0f 1a 	call	0x341e	; 0x341e <mmc_disk_initialize>
    3a36:	08 95       	ret
#endif
	}
	return STA_NOINIT;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
}
    3a3a:	08 95       	ret

00003a3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	fb 01       	movw	r30, r22
	switch (pdrv) {
    3a42:	81 11       	cpse	r24, r1
    3a44:	09 c0       	rjmp	.+18     	; 0x3a58 <disk_read+0x1c>
    3a46:	ba 01       	movw	r22, r20
    3a48:	a9 01       	movw	r20, r18
    3a4a:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
    3a4c:	98 01       	movw	r18, r16
    3a4e:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <mmc_disk_read>
#endif
	}
	return RES_PARERR;
}
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	08 95       	ret
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
#endif
	}
	return RES_PARERR;
    3a58:	84 e0       	ldi	r24, 0x04	; 4
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	fa cf       	rjmp	.-12     	; 0x3a52 <disk_read+0x16>

00003a5e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
    3a5e:	0f 93       	push	r16
    3a60:	1f 93       	push	r17
    3a62:	fb 01       	movw	r30, r22
	switch (pdrv) {
    3a64:	81 11       	cpse	r24, r1
    3a66:	09 c0       	rjmp	.+18     	; 0x3a7a <disk_write+0x1c>
    3a68:	ba 01       	movw	r22, r20
    3a6a:	a9 01       	movw	r20, r18
    3a6c:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
    3a6e:	98 01       	movw	r18, r16
    3a70:	0e 94 1a 1b 	call	0x3634	; 0x3634 <mmc_disk_write>
#endif
	}
	return RES_PARERR;
}
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	08 95       	ret
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
#endif
	}
	return RES_PARERR;
    3a7a:	84 e0       	ldi	r24, 0x04	; 4
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	fa cf       	rjmp	.-12     	; 0x3a74 <disk_write+0x16>

00003a80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3a80:	96 2f       	mov	r25, r22
	switch (pdrv) {
    3a82:	81 11       	cpse	r24, r1
    3a84:	05 c0       	rjmp	.+10     	; 0x3a90 <disk_ioctl+0x10>
    3a86:	ba 01       	movw	r22, r20
    3a88:	89 2f       	mov	r24, r25
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
    3a8a:	0e 94 92 1b 	call	0x3724	; 0x3724 <mmc_disk_ioctl>
    3a8e:	08 95       	ret
#endif
	}
	return RES_PARERR;
    3a90:	84 e0       	ldi	r24, 0x04	; 4
    3a92:	90 e0       	ldi	r25, 0x00	; 0
}
    3a94:	08 95       	ret

00003a96 <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
    3a96:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <mmc_disk_timerproc>
#endif
}
    3a9a:	08 95       	ret

00003a9c <uart_putchar>:
    unsigned long	dword;
    unsigned char	bytes[4];
} usbDWord_t;

static int uart_putchar(char c, FILE *stream)
{
    3a9c:	cf 93       	push	r28
    3a9e:	c8 2f       	mov	r28, r24
     if (c == '\n')
    3aa0:	8a 30       	cpi	r24, 0x0A	; 10
    3aa2:	19 f4       	brne	.+6      	; 0x3aaa <uart_putchar+0xe>
        uart_putchar('\r', stream);
    3aa4:	8d e0       	ldi	r24, 0x0D	; 13
    3aa6:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <uart_putchar>
      loop_until_bit_is_set(UCSR0A, UDRE0);
    3aaa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    3aae:	85 ff       	sbrs	r24, 5
    3ab0:	fc cf       	rjmp	.-8      	; 0x3aaa <uart_putchar+0xe>
      UDR0 = c;
    3ab2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
      return 0;
}
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	cf 91       	pop	r28
    3abc:	08 95       	ret

00003abe <__vector_14>:

FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */

ISR(TIMER0_COMPA_vect)
{
    3abe:	1f 92       	push	r1
    3ac0:	0f 92       	push	r0
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	0f 92       	push	r0
    3ac6:	11 24       	eor	r1, r1
    3ac8:	2f 93       	push	r18
    3aca:	3f 93       	push	r19
    3acc:	4f 93       	push	r20
    3ace:	5f 93       	push	r21
    3ad0:	6f 93       	push	r22
    3ad2:	7f 93       	push	r23
    3ad4:	8f 93       	push	r24
    3ad6:	9f 93       	push	r25
    3ad8:	af 93       	push	r26
    3ada:	bf 93       	push	r27
    3adc:	ef 93       	push	r30
    3ade:	ff 93       	push	r31
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    3ae0:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <disk_timerproc>
}
    3ae4:	ff 91       	pop	r31
    3ae6:	ef 91       	pop	r30
    3ae8:	bf 91       	pop	r27
    3aea:	af 91       	pop	r26
    3aec:	9f 91       	pop	r25
    3aee:	8f 91       	pop	r24
    3af0:	7f 91       	pop	r23
    3af2:	6f 91       	pop	r22
    3af4:	5f 91       	pop	r21
    3af6:	4f 91       	pop	r20
    3af8:	3f 91       	pop	r19
    3afa:	2f 91       	pop	r18
    3afc:	0f 90       	pop	r0
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	0f 90       	pop	r0
    3b02:	1f 90       	pop	r1
    3b04:	18 95       	reti

00003b06 <init_printf>:
      UDR0 = c;
      return 0;
}

void init_printf(uint16_t baudrate)
{
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29

	// UART INIT // -----------------start
	usbDWord_t br;

	UCSR0B = 0x00; //disable while setting baud rate
    3b0a:	c1 ec       	ldi	r28, 0xC1	; 193
    3b0c:	d0 e0       	ldi	r29, 0x00	; 0
    3b0e:	18 82       	st	Y, r1
	UCSR0A |= (1<<U2X0);
    3b10:	e0 ec       	ldi	r30, 0xC0	; 192
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	20 81       	ld	r18, Z
    3b16:	22 60       	ori	r18, 0x02	; 2
    3b18:	20 83       	st	Z, r18
	//UCSR0C = (1 << URSEL) | 0x06; // Atmega16
	UCSR0C = 0x06;	// Atmega328p
    3b1a:	26 e0       	ldi	r18, 0x06	; 6
    3b1c:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	br.dword = F_CPU / (8L * baudrate) - 1;
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	a0 e0       	ldi	r26, 0x00	; 0
    3b24:	9c 01       	movw	r18, r24
    3b26:	ad 01       	movw	r20, r26
    3b28:	83 e0       	ldi	r24, 0x03	; 3
    3b2a:	22 0f       	add	r18, r18
    3b2c:	33 1f       	adc	r19, r19
    3b2e:	44 1f       	adc	r20, r20
    3b30:	55 1f       	adc	r21, r21
    3b32:	8a 95       	dec	r24
    3b34:	d1 f7       	brne	.-12     	; 0x3b2a <init_printf+0x24>
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	72 e1       	ldi	r23, 0x12	; 18
    3b3a:	8a e7       	ldi	r24, 0x7A	; 122
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__divmodsi4>
    3b42:	da 01       	movw	r26, r20
    3b44:	c9 01       	movw	r24, r18
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	a1 09       	sbc	r26, r1
    3b4a:	b1 09       	sbc	r27, r1
	
	UBRR0L  = br.bytes[0];
    3b4c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H  = br.bytes[1];
    3b50:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UCSR0B = 0x18;
    3b54:	88 e1       	ldi	r24, 0x18	; 24
    3b56:	88 83       	st	Y, r24
	// UART INIT // -----------------end

	static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

	stdout = &mystdout;
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	90 93 f6 05 	sts	0x05F6, r25	; 0x8005f6 <__iob+0x3>
    3b60:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <__iob+0x2>
}
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	08 95       	ret

00003b6a <main>:

int main (void)
{
    3b6a:	a0 e4       	ldi	r26, 0x40	; 64
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	eb eb       	ldi	r30, 0xBB	; 187
    3b70:	fd e1       	ldi	r31, 0x1D	; 29
    3b72:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__+0x18>
	FRESULT fr;
	DIR dj;     
	FILINFO fno;

	/* Start 100Hz system timer with TC0 */
	OCR0A = F_CPU / 1024 / 100;
    3b76:	8e e4       	ldi	r24, 0x4E	; 78
    3b78:	87 bd       	out	0x27, r24	; 39
	// CTC mode, OCRA top
	TCCR0A = _BV(WGM01); // User
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b101; // CLKio / 1024           
    3b7e:	95 e0       	ldi	r25, 0x05	; 5
    3b80:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = _BV(OCIE0A); // User
    3b82:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei();
    3b86:	78 94       	sei
	//DDRB |=_BV(5); // LED output (same as SCK wrong)
	init_printf(9600);// 9600 Baudrate
    3b88:	80 e8       	ldi	r24, 0x80	; 128
    3b8a:	95 e2       	ldi	r25, 0x25	; 37
    3b8c:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <init_printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b90:	2f ef       	ldi	r18, 0xFF	; 255
    3b92:	81 e1       	ldi	r24, 0x11	; 17
    3b94:	9a e7       	ldi	r25, 0x7A	; 122
    3b96:	21 50       	subi	r18, 0x01	; 1
    3b98:	80 40       	sbci	r24, 0x00	; 0
    3b9a:	90 40       	sbci	r25, 0x00	; 0
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <main+0x2c>
    3b9e:	00 c0       	rjmp	.+0      	; 0x3ba0 <main+0x36>
    3ba0:	00 00       	nop
	_delay_ms(5000); 
	//PORTB |= _BV(5);// Turn ON LED (same as SCK wrong)
	printf("FatFS02 v1.1\r\n");
    3ba2:	87 e2       	ldi	r24, 0x27	; 39
    3ba4:	91 e0       	ldi	r25, 0x01	; 1
    3ba6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>

	fr=f_mount(&FatFs, "0:", 1);		/* Give a work area to the default drive */
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	65 e3       	ldi	r22, 0x35	; 53
    3bae:	71 e0       	ldi	r23, 0x01	; 1
    3bb0:	82 ea       	ldi	r24, 0xA2	; 162
    3bb2:	91 e0       	ldi	r25, 0x01	; 1
    3bb4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <f_mount>
	if (fr == FR_OK)
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	79 f5       	brne	.+94     	; 0x3c1a <main+0xb0>
		printf("Mount successful\r\n");
    3bbc:	88 e3       	ldi	r24, 0x38	; 56
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>
	else
		printf("Mount failed (%d)\r\n",fr);	
	
	printf("\r\nListing files\r\n\t.... \r\n");
    3bc4:	8e e5       	ldi	r24, 0x5E	; 94
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>
    fr = f_findfirst(&dj, &fno, "", "*"); /* Start to search for all files */
    3bcc:	27 e7       	ldi	r18, 0x77	; 119
    3bce:	31 e0       	ldi	r19, 0x01	; 1
    3bd0:	4d e5       	ldi	r20, 0x5D	; 93
    3bd2:	51 e0       	ldi	r21, 0x01	; 1
    3bd4:	be 01       	movw	r22, r28
    3bd6:	65 5d       	subi	r22, 0xD5	; 213
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bda:	ce 01       	movw	r24, r28
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <f_findfirst>
    3be2:	8e 01       	movw	r16, r28
    3be4:	0c 5c       	subi	r16, 0xCC	; 204
    3be6:	1f 4f       	sbci	r17, 0xFF	; 255

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
	if (fno.fattrib & AM_DIR )	
		printf("%s\/\n", fno.fname);	// Print directory name
    3be8:	29 e7       	ldi	r18, 0x79	; 121
    3bea:	e2 2e       	mov	r14, r18
    3bec:	21 e0       	ldi	r18, 0x01	; 1
    3bee:	f2 2e       	mov	r15, r18
		printf("Mount failed (%d)\r\n",fr);	
	
	printf("\r\nListing files\r\n\t.... \r\n");
    fr = f_findfirst(&dj, &fno, "", "*"); /* Start to search for all files */

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
    3bf0:	89 2b       	or	r24, r25
    3bf2:	19 f4       	brne	.+6      	; 0x3bfa <main+0x90>
    3bf4:	8c a9       	ldd	r24, Y+52	; 0x34
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	1d c0       	rjmp	.+58     	; 0x3c34 <main+0xca>
		printf("%s\/\n", fno.fname);	// Print directory name
	else
	        printf("%s\n", fno.fname);                /* Print the file name */
        fr = f_findnext(&dj, &fno);               /* Search for next item */
    }
	printf("\t....\r\nListing files done.\r\n");
    3bfa:	8e e7       	ldi	r24, 0x7E	; 126
    3bfc:	91 e0       	ldi	r25, 0x01	; 1
    3bfe:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>

    f_closedir(&dj);
    3c02:	ce 01       	movw	r24, r28
    3c04:	01 96       	adiw	r24, 0x01	; 1
    3c06:	0e 94 71 14 	call	0x28e2	; 0x28e2 <f_closedir>



	f_unmount("0:");
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	65 e3       	ldi	r22, 0x35	; 53
    3c0e:	71 e0       	ldi	r23, 0x01	; 1
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <f_mount>
    3c18:	ff cf       	rjmp	.-2      	; 0x3c18 <main+0xae>

	fr=f_mount(&FatFs, "0:", 1);		/* Give a work area to the default drive */
	if (fr == FR_OK)
		printf("Mount successful\r\n");
	else
		printf("Mount failed (%d)\r\n",fr);	
    3c1a:	9f 93       	push	r25
    3c1c:	8f 93       	push	r24
    3c1e:	8a e4       	ldi	r24, 0x4A	; 74
    3c20:	91 e0       	ldi	r25, 0x01	; 1
    3c22:	9f 93       	push	r25
    3c24:	8f 93       	push	r24
    3c26:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <printf>
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	c8 cf       	rjmp	.-112    	; 0x3bc4 <main+0x5a>
	
	printf("\r\nListing files\r\n\t.... \r\n");
    fr = f_findfirst(&dj, &fno, "", "*"); /* Start to search for all files */

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
	if (fno.fattrib & AM_DIR )	
    3c34:	8b a9       	ldd	r24, Y+51	; 0x33
    3c36:	84 ff       	sbrs	r24, 4
    3c38:	12 c0       	rjmp	.+36     	; 0x3c5e <main+0xf4>
		printf("%s\/\n", fno.fname);	// Print directory name
    3c3a:	1f 93       	push	r17
    3c3c:	0f 93       	push	r16
    3c3e:	ff 92       	push	r15
    3c40:	ef 92       	push	r14
    3c42:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <printf>
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
	else
	        printf("%s\n", fno.fname);                /* Print the file name */
        fr = f_findnext(&dj, &fno);               /* Search for next item */
    3c4e:	be 01       	movw	r22, r28
    3c50:	65 5d       	subi	r22, 0xD5	; 213
    3c52:	7f 4f       	sbci	r23, 0xFF	; 255
    3c54:	ce 01       	movw	r24, r28
    3c56:	01 96       	adiw	r24, 0x01	; 1
    3c58:	0e 94 bf 14 	call	0x297e	; 0x297e <f_findnext>
    3c5c:	c9 cf       	rjmp	.-110    	; 0x3bf0 <main+0x86>

    while (fr == FR_OK && fno.fname[0]) {         /* Repeat while an item is found */
	if (fno.fattrib & AM_DIR )	
		printf("%s\/\n", fno.fname);	// Print directory name
	else
	        printf("%s\n", fno.fname);                /* Print the file name */
    3c5e:	c8 01       	movw	r24, r16
    3c60:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <puts>
    3c64:	f4 cf       	rjmp	.-24     	; 0x3c4e <main+0xe4>

00003c66 <__udivmodsi4>:
    3c66:	a1 e2       	ldi	r26, 0x21	; 33
    3c68:	1a 2e       	mov	r1, r26
    3c6a:	aa 1b       	sub	r26, r26
    3c6c:	bb 1b       	sub	r27, r27
    3c6e:	fd 01       	movw	r30, r26
    3c70:	0d c0       	rjmp	.+26     	; 0x3c8c <__udivmodsi4_ep>

00003c72 <__udivmodsi4_loop>:
    3c72:	aa 1f       	adc	r26, r26
    3c74:	bb 1f       	adc	r27, r27
    3c76:	ee 1f       	adc	r30, r30
    3c78:	ff 1f       	adc	r31, r31
    3c7a:	a2 17       	cp	r26, r18
    3c7c:	b3 07       	cpc	r27, r19
    3c7e:	e4 07       	cpc	r30, r20
    3c80:	f5 07       	cpc	r31, r21
    3c82:	20 f0       	brcs	.+8      	; 0x3c8c <__udivmodsi4_ep>
    3c84:	a2 1b       	sub	r26, r18
    3c86:	b3 0b       	sbc	r27, r19
    3c88:	e4 0b       	sbc	r30, r20
    3c8a:	f5 0b       	sbc	r31, r21

00003c8c <__udivmodsi4_ep>:
    3c8c:	66 1f       	adc	r22, r22
    3c8e:	77 1f       	adc	r23, r23
    3c90:	88 1f       	adc	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	1a 94       	dec	r1
    3c96:	69 f7       	brne	.-38     	; 0x3c72 <__udivmodsi4_loop>
    3c98:	60 95       	com	r22
    3c9a:	70 95       	com	r23
    3c9c:	80 95       	com	r24
    3c9e:	90 95       	com	r25
    3ca0:	9b 01       	movw	r18, r22
    3ca2:	ac 01       	movw	r20, r24
    3ca4:	bd 01       	movw	r22, r26
    3ca6:	cf 01       	movw	r24, r30
    3ca8:	08 95       	ret

00003caa <__divmodsi4>:
    3caa:	05 2e       	mov	r0, r21
    3cac:	97 fb       	bst	r25, 7
    3cae:	1e f4       	brtc	.+6      	; 0x3cb6 <__divmodsi4+0xc>
    3cb0:	00 94       	com	r0
    3cb2:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__negsi2>
    3cb6:	57 fd       	sbrc	r21, 7
    3cb8:	07 d0       	rcall	.+14     	; 0x3cc8 <__divmodsi4_neg2>
    3cba:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <__udivmodsi4>
    3cbe:	07 fc       	sbrc	r0, 7
    3cc0:	03 d0       	rcall	.+6      	; 0x3cc8 <__divmodsi4_neg2>
    3cc2:	4e f4       	brtc	.+18     	; 0x3cd6 <__divmodsi4_exit>
    3cc4:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__negsi2>

00003cc8 <__divmodsi4_neg2>:
    3cc8:	50 95       	com	r21
    3cca:	40 95       	com	r20
    3ccc:	30 95       	com	r19
    3cce:	21 95       	neg	r18
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    3cd4:	5f 4f       	sbci	r21, 0xFF	; 255

00003cd6 <__divmodsi4_exit>:
    3cd6:	08 95       	ret

00003cd8 <__negsi2>:
    3cd8:	90 95       	com	r25
    3cda:	80 95       	com	r24
    3cdc:	70 95       	com	r23
    3cde:	61 95       	neg	r22
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	08 95       	ret

00003ce8 <__muluhisi3>:
    3ce8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__umulhisi3>
    3cec:	a5 9f       	mul	r26, r21
    3cee:	90 0d       	add	r25, r0
    3cf0:	b4 9f       	mul	r27, r20
    3cf2:	90 0d       	add	r25, r0
    3cf4:	a4 9f       	mul	r26, r20
    3cf6:	80 0d       	add	r24, r0
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	11 24       	eor	r1, r1
    3cfc:	08 95       	ret

00003cfe <__prologue_saves__>:
    3cfe:	2f 92       	push	r2
    3d00:	3f 92       	push	r3
    3d02:	4f 92       	push	r4
    3d04:	5f 92       	push	r5
    3d06:	6f 92       	push	r6
    3d08:	7f 92       	push	r7
    3d0a:	8f 92       	push	r8
    3d0c:	9f 92       	push	r9
    3d0e:	af 92       	push	r10
    3d10:	bf 92       	push	r11
    3d12:	cf 92       	push	r12
    3d14:	df 92       	push	r13
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	ca 1b       	sub	r28, r26
    3d28:	db 0b       	sbc	r29, r27
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	09 94       	ijmp

00003d36 <__epilogue_restores__>:
    3d36:	2a 88       	ldd	r2, Y+18	; 0x12
    3d38:	39 88       	ldd	r3, Y+17	; 0x11
    3d3a:	48 88       	ldd	r4, Y+16	; 0x10
    3d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d40:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d42:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d44:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d46:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d48:	b9 84       	ldd	r11, Y+9	; 0x09
    3d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d4c:	df 80       	ldd	r13, Y+7	; 0x07
    3d4e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d50:	fd 80       	ldd	r15, Y+5	; 0x05
    3d52:	0c 81       	ldd	r16, Y+4	; 0x04
    3d54:	1b 81       	ldd	r17, Y+3	; 0x03
    3d56:	aa 81       	ldd	r26, Y+2	; 0x02
    3d58:	b9 81       	ldd	r27, Y+1	; 0x01
    3d5a:	ce 0f       	add	r28, r30
    3d5c:	d1 1d       	adc	r29, r1
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	ed 01       	movw	r28, r26
    3d6a:	08 95       	ret

00003d6c <__umulhisi3>:
    3d6c:	a2 9f       	mul	r26, r18
    3d6e:	b0 01       	movw	r22, r0
    3d70:	b3 9f       	mul	r27, r19
    3d72:	c0 01       	movw	r24, r0
    3d74:	a3 9f       	mul	r26, r19
    3d76:	70 0d       	add	r23, r0
    3d78:	81 1d       	adc	r24, r1
    3d7a:	11 24       	eor	r1, r1
    3d7c:	91 1d       	adc	r25, r1
    3d7e:	b2 9f       	mul	r27, r18
    3d80:	70 0d       	add	r23, r0
    3d82:	81 1d       	adc	r24, r1
    3d84:	11 24       	eor	r1, r1
    3d86:	91 1d       	adc	r25, r1
    3d88:	08 95       	ret

00003d8a <memcmp>:
    3d8a:	fb 01       	movw	r30, r22
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	04 c0       	rjmp	.+8      	; 0x3d98 <memcmp+0xe>
    3d90:	8d 91       	ld	r24, X+
    3d92:	01 90       	ld	r0, Z+
    3d94:	80 19       	sub	r24, r0
    3d96:	21 f4       	brne	.+8      	; 0x3da0 <memcmp+0x16>
    3d98:	41 50       	subi	r20, 0x01	; 1
    3d9a:	50 40       	sbci	r21, 0x00	; 0
    3d9c:	c8 f7       	brcc	.-14     	; 0x3d90 <memcmp+0x6>
    3d9e:	88 1b       	sub	r24, r24
    3da0:	99 0b       	sbc	r25, r25
    3da2:	08 95       	ret

00003da4 <memcpy>:
    3da4:	fb 01       	movw	r30, r22
    3da6:	dc 01       	movw	r26, r24
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <memcpy+0xa>
    3daa:	01 90       	ld	r0, Z+
    3dac:	0d 92       	st	X+, r0
    3dae:	41 50       	subi	r20, 0x01	; 1
    3db0:	50 40       	sbci	r21, 0x00	; 0
    3db2:	d8 f7       	brcc	.-10     	; 0x3daa <memcpy+0x6>
    3db4:	08 95       	ret

00003db6 <memset>:
    3db6:	dc 01       	movw	r26, r24
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <memset+0x6>
    3dba:	6d 93       	st	X+, r22
    3dbc:	41 50       	subi	r20, 0x01	; 1
    3dbe:	50 40       	sbci	r21, 0x00	; 0
    3dc0:	e0 f7       	brcc	.-8      	; 0x3dba <memset+0x4>
    3dc2:	08 95       	ret

00003dc4 <strchr>:
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	81 91       	ld	r24, Z+
    3dc8:	86 17       	cp	r24, r22
    3dca:	21 f0       	breq	.+8      	; 0x3dd4 <strchr+0x10>
    3dcc:	88 23       	and	r24, r24
    3dce:	d9 f7       	brne	.-10     	; 0x3dc6 <strchr+0x2>
    3dd0:	99 27       	eor	r25, r25
    3dd2:	08 95       	ret
    3dd4:	31 97       	sbiw	r30, 0x01	; 1
    3dd6:	cf 01       	movw	r24, r30
    3dd8:	08 95       	ret

00003dda <printf>:
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	a0 e0       	ldi	r26, 0x00	; 0
    3dde:	e3 ef       	ldi	r30, 0xF3	; 243
    3de0:	fe e1       	ldi	r31, 0x1E	; 30
    3de2:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__prologue_saves__+0x20>
    3de6:	ae 01       	movw	r20, r28
    3de8:	4b 5f       	subi	r20, 0xFB	; 251
    3dea:	5f 4f       	sbci	r21, 0xFF	; 255
    3dec:	fa 01       	movw	r30, r20
    3dee:	61 91       	ld	r22, Z+
    3df0:	71 91       	ld	r23, Z+
    3df2:	af 01       	movw	r20, r30
    3df4:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <__iob+0x2>
    3df8:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <__iob+0x3>
    3dfc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <vfprintf>
    3e00:	e2 e0       	ldi	r30, 0x02	; 2
    3e02:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__epilogue_restores__+0x20>

00003e06 <puts>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <__iob+0x2>
    3e12:	f0 91 f6 05 	lds	r31, 0x05F6	; 0x8005f6 <__iob+0x3>
    3e16:	23 81       	ldd	r18, Z+3	; 0x03
    3e18:	ec 01       	movw	r28, r24
    3e1a:	10 e0       	ldi	r17, 0x00	; 0
    3e1c:	00 e0       	ldi	r16, 0x00	; 0
    3e1e:	21 fd       	sbrc	r18, 1
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <puts+0x2c>
    3e22:	0f ef       	ldi	r16, 0xFF	; 255
    3e24:	1f ef       	ldi	r17, 0xFF	; 255
    3e26:	14 c0       	rjmp	.+40     	; 0x3e50 <puts+0x4a>
    3e28:	09 95       	icall
    3e2a:	89 2b       	or	r24, r25
    3e2c:	11 f0       	breq	.+4      	; 0x3e32 <puts+0x2c>
    3e2e:	0f ef       	ldi	r16, 0xFF	; 255
    3e30:	1f ef       	ldi	r17, 0xFF	; 255
    3e32:	89 91       	ld	r24, Y+
    3e34:	60 91 f5 05 	lds	r22, 0x05F5	; 0x8005f5 <__iob+0x2>
    3e38:	70 91 f6 05 	lds	r23, 0x05F6	; 0x8005f6 <__iob+0x3>
    3e3c:	db 01       	movw	r26, r22
    3e3e:	18 96       	adiw	r26, 0x08	; 8
    3e40:	ed 91       	ld	r30, X+
    3e42:	fc 91       	ld	r31, X
    3e44:	81 11       	cpse	r24, r1
    3e46:	f0 cf       	rjmp	.-32     	; 0x3e28 <puts+0x22>
    3e48:	8a e0       	ldi	r24, 0x0A	; 10
    3e4a:	09 95       	icall
    3e4c:	89 2b       	or	r24, r25
    3e4e:	49 f7       	brne	.-46     	; 0x3e22 <puts+0x1c>
    3e50:	c8 01       	movw	r24, r16
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	08 95       	ret

00003e5c <vfprintf>:
    3e5c:	ab e0       	ldi	r26, 0x0B	; 11
    3e5e:	b0 e0       	ldi	r27, 0x00	; 0
    3e60:	e4 e3       	ldi	r30, 0x34	; 52
    3e62:	ff e1       	ldi	r31, 0x1F	; 31
    3e64:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    3e68:	7c 01       	movw	r14, r24
    3e6a:	3b 01       	movw	r6, r22
    3e6c:	8a 01       	movw	r16, r20
    3e6e:	fc 01       	movw	r30, r24
    3e70:	17 82       	std	Z+7, r1	; 0x07
    3e72:	16 82       	std	Z+6, r1	; 0x06
    3e74:	83 81       	ldd	r24, Z+3	; 0x03
    3e76:	81 ff       	sbrs	r24, 1
    3e78:	c8 c1       	rjmp	.+912    	; 0x420a <vfprintf+0x3ae>
    3e7a:	ce 01       	movw	r24, r28
    3e7c:	01 96       	adiw	r24, 0x01	; 1
    3e7e:	5c 01       	movw	r10, r24
    3e80:	f7 01       	movw	r30, r14
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	f3 01       	movw	r30, r6
    3e86:	93 fd       	sbrc	r25, 3
    3e88:	85 91       	lpm	r24, Z+
    3e8a:	93 ff       	sbrs	r25, 3
    3e8c:	81 91       	ld	r24, Z+
    3e8e:	3f 01       	movw	r6, r30
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <vfprintf+0x3a>
    3e94:	53 c1       	rjmp	.+678    	; 0x413c <vfprintf+0x2e0>
    3e96:	85 32       	cpi	r24, 0x25	; 37
    3e98:	39 f4       	brne	.+14     	; 0x3ea8 <vfprintf+0x4c>
    3e9a:	93 fd       	sbrc	r25, 3
    3e9c:	85 91       	lpm	r24, Z+
    3e9e:	93 ff       	sbrs	r25, 3
    3ea0:	81 91       	ld	r24, Z+
    3ea2:	3f 01       	movw	r6, r30
    3ea4:	85 32       	cpi	r24, 0x25	; 37
    3ea6:	29 f4       	brne	.+10     	; 0x3eb2 <vfprintf+0x56>
    3ea8:	b7 01       	movw	r22, r14
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    3eb0:	e7 cf       	rjmp	.-50     	; 0x3e80 <vfprintf+0x24>
    3eb2:	91 2c       	mov	r9, r1
    3eb4:	21 2c       	mov	r2, r1
    3eb6:	31 2c       	mov	r3, r1
    3eb8:	ff e1       	ldi	r31, 0x1F	; 31
    3eba:	f3 15       	cp	r31, r3
    3ebc:	38 f0       	brcs	.+14     	; 0x3ecc <vfprintf+0x70>
    3ebe:	8b 32       	cpi	r24, 0x2B	; 43
    3ec0:	11 f1       	breq	.+68     	; 0x3f06 <vfprintf+0xaa>
    3ec2:	90 f4       	brcc	.+36     	; 0x3ee8 <vfprintf+0x8c>
    3ec4:	80 32       	cpi	r24, 0x20	; 32
    3ec6:	09 f1       	breq	.+66     	; 0x3f0a <vfprintf+0xae>
    3ec8:	83 32       	cpi	r24, 0x23	; 35
    3eca:	29 f1       	breq	.+74     	; 0x3f16 <vfprintf+0xba>
    3ecc:	37 fc       	sbrc	r3, 7
    3ece:	3c c0       	rjmp	.+120    	; 0x3f48 <vfprintf+0xec>
    3ed0:	20 ed       	ldi	r18, 0xD0	; 208
    3ed2:	28 0f       	add	r18, r24
    3ed4:	2a 30       	cpi	r18, 0x0A	; 10
    3ed6:	50 f5       	brcc	.+84     	; 0x3f2c <vfprintf+0xd0>
    3ed8:	36 fe       	sbrs	r3, 6
    3eda:	20 c0       	rjmp	.+64     	; 0x3f1c <vfprintf+0xc0>
    3edc:	8a e0       	ldi	r24, 0x0A	; 10
    3ede:	98 9e       	mul	r9, r24
    3ee0:	20 0d       	add	r18, r0
    3ee2:	11 24       	eor	r1, r1
    3ee4:	92 2e       	mov	r9, r18
    3ee6:	06 c0       	rjmp	.+12     	; 0x3ef4 <vfprintf+0x98>
    3ee8:	8d 32       	cpi	r24, 0x2D	; 45
    3eea:	91 f0       	breq	.+36     	; 0x3f10 <vfprintf+0xb4>
    3eec:	80 33       	cpi	r24, 0x30	; 48
    3eee:	71 f7       	brne	.-36     	; 0x3ecc <vfprintf+0x70>
    3ef0:	68 94       	set
    3ef2:	30 f8       	bld	r3, 0
    3ef4:	f3 01       	movw	r30, r6
    3ef6:	93 fd       	sbrc	r25, 3
    3ef8:	85 91       	lpm	r24, Z+
    3efa:	93 ff       	sbrs	r25, 3
    3efc:	81 91       	ld	r24, Z+
    3efe:	3f 01       	movw	r6, r30
    3f00:	81 11       	cpse	r24, r1
    3f02:	da cf       	rjmp	.-76     	; 0x3eb8 <vfprintf+0x5c>
    3f04:	21 c0       	rjmp	.+66     	; 0x3f48 <vfprintf+0xec>
    3f06:	68 94       	set
    3f08:	31 f8       	bld	r3, 1
    3f0a:	68 94       	set
    3f0c:	32 f8       	bld	r3, 2
    3f0e:	f2 cf       	rjmp	.-28     	; 0x3ef4 <vfprintf+0x98>
    3f10:	68 94       	set
    3f12:	33 f8       	bld	r3, 3
    3f14:	ef cf       	rjmp	.-34     	; 0x3ef4 <vfprintf+0x98>
    3f16:	68 94       	set
    3f18:	34 f8       	bld	r3, 4
    3f1a:	ec cf       	rjmp	.-40     	; 0x3ef4 <vfprintf+0x98>
    3f1c:	ea e0       	ldi	r30, 0x0A	; 10
    3f1e:	2e 9e       	mul	r2, r30
    3f20:	20 0d       	add	r18, r0
    3f22:	11 24       	eor	r1, r1
    3f24:	22 2e       	mov	r2, r18
    3f26:	68 94       	set
    3f28:	35 f8       	bld	r3, 5
    3f2a:	e4 cf       	rjmp	.-56     	; 0x3ef4 <vfprintf+0x98>
    3f2c:	8e 32       	cpi	r24, 0x2E	; 46
    3f2e:	29 f4       	brne	.+10     	; 0x3f3a <vfprintf+0xde>
    3f30:	36 fc       	sbrc	r3, 6
    3f32:	04 c1       	rjmp	.+520    	; 0x413c <vfprintf+0x2e0>
    3f34:	68 94       	set
    3f36:	36 f8       	bld	r3, 6
    3f38:	dd cf       	rjmp	.-70     	; 0x3ef4 <vfprintf+0x98>
    3f3a:	8c 36       	cpi	r24, 0x6C	; 108
    3f3c:	19 f4       	brne	.+6      	; 0x3f44 <vfprintf+0xe8>
    3f3e:	68 94       	set
    3f40:	37 f8       	bld	r3, 7
    3f42:	d8 cf       	rjmp	.-80     	; 0x3ef4 <vfprintf+0x98>
    3f44:	88 36       	cpi	r24, 0x68	; 104
    3f46:	b1 f2       	breq	.-84     	; 0x3ef4 <vfprintf+0x98>
    3f48:	98 2f       	mov	r25, r24
    3f4a:	9f 7d       	andi	r25, 0xDF	; 223
    3f4c:	95 54       	subi	r25, 0x45	; 69
    3f4e:	93 30       	cpi	r25, 0x03	; 3
    3f50:	e0 f0       	brcs	.+56     	; 0x3f8a <vfprintf+0x12e>
    3f52:	83 36       	cpi	r24, 0x63	; 99
    3f54:	a1 f1       	breq	.+104    	; 0x3fbe <vfprintf+0x162>
    3f56:	83 37       	cpi	r24, 0x73	; 115
    3f58:	c1 f1       	breq	.+112    	; 0x3fca <vfprintf+0x16e>
    3f5a:	83 35       	cpi	r24, 0x53	; 83
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <vfprintf+0x104>
    3f5e:	63 c0       	rjmp	.+198    	; 0x4026 <vfprintf+0x1ca>
    3f60:	28 01       	movw	r4, r16
    3f62:	f2 e0       	ldi	r31, 0x02	; 2
    3f64:	4f 0e       	add	r4, r31
    3f66:	51 1c       	adc	r5, r1
    3f68:	f8 01       	movw	r30, r16
    3f6a:	c0 80       	ld	r12, Z
    3f6c:	d1 80       	ldd	r13, Z+1	; 0x01
    3f6e:	69 2d       	mov	r22, r9
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	36 fc       	sbrc	r3, 6
    3f74:	02 c0       	rjmp	.+4      	; 0x3f7a <vfprintf+0x11e>
    3f76:	6f ef       	ldi	r22, 0xFF	; 255
    3f78:	7f ef       	ldi	r23, 0xFF	; 255
    3f7a:	c6 01       	movw	r24, r12
    3f7c:	0e 94 08 21 	call	0x4210	; 0x4210 <strnlen_P>
    3f80:	4c 01       	movw	r8, r24
    3f82:	68 94       	set
    3f84:	37 f8       	bld	r3, 7
    3f86:	82 01       	movw	r16, r4
    3f88:	0a c0       	rjmp	.+20     	; 0x3f9e <vfprintf+0x142>
    3f8a:	0c 5f       	subi	r16, 0xFC	; 252
    3f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8e:	ff e3       	ldi	r31, 0x3F	; 63
    3f90:	f9 83       	std	Y+1, r31	; 0x01
    3f92:	88 24       	eor	r8, r8
    3f94:	83 94       	inc	r8
    3f96:	91 2c       	mov	r9, r1
    3f98:	65 01       	movw	r12, r10
    3f9a:	e8 94       	clt
    3f9c:	37 f8       	bld	r3, 7
    3f9e:	33 fe       	sbrs	r3, 3
    3fa0:	2d c0       	rjmp	.+90     	; 0x3ffc <vfprintf+0x1a0>
    3fa2:	52 2c       	mov	r5, r2
    3fa4:	81 14       	cp	r8, r1
    3fa6:	91 04       	cpc	r9, r1
    3fa8:	71 f5       	brne	.+92     	; 0x4006 <vfprintf+0x1aa>
    3faa:	55 20       	and	r5, r5
    3fac:	09 f4       	brne	.+2      	; 0x3fb0 <vfprintf+0x154>
    3fae:	68 cf       	rjmp	.-304    	; 0x3e80 <vfprintf+0x24>
    3fb0:	b7 01       	movw	r22, r14
    3fb2:	80 e2       	ldi	r24, 0x20	; 32
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    3fba:	5a 94       	dec	r5
    3fbc:	f6 cf       	rjmp	.-20     	; 0x3faa <vfprintf+0x14e>
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	80 81       	ld	r24, Z
    3fc2:	89 83       	std	Y+1, r24	; 0x01
    3fc4:	0e 5f       	subi	r16, 0xFE	; 254
    3fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc8:	e4 cf       	rjmp	.-56     	; 0x3f92 <vfprintf+0x136>
    3fca:	28 01       	movw	r4, r16
    3fcc:	f2 e0       	ldi	r31, 0x02	; 2
    3fce:	4f 0e       	add	r4, r31
    3fd0:	51 1c       	adc	r5, r1
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	c0 80       	ld	r12, Z
    3fd6:	d1 80       	ldd	r13, Z+1	; 0x01
    3fd8:	69 2d       	mov	r22, r9
    3fda:	70 e0       	ldi	r23, 0x00	; 0
    3fdc:	36 fc       	sbrc	r3, 6
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <vfprintf+0x188>
    3fe0:	6f ef       	ldi	r22, 0xFF	; 255
    3fe2:	7f ef       	ldi	r23, 0xFF	; 255
    3fe4:	c6 01       	movw	r24, r12
    3fe6:	0e 94 13 21 	call	0x4226	; 0x4226 <strnlen>
    3fea:	4c 01       	movw	r8, r24
    3fec:	82 01       	movw	r16, r4
    3fee:	d5 cf       	rjmp	.-86     	; 0x3f9a <vfprintf+0x13e>
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	80 e2       	ldi	r24, 0x20	; 32
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    3ffa:	2a 94       	dec	r2
    3ffc:	28 14       	cp	r2, r8
    3ffe:	19 04       	cpc	r1, r9
    4000:	09 f0       	breq	.+2      	; 0x4004 <vfprintf+0x1a8>
    4002:	b0 f7       	brcc	.-20     	; 0x3ff0 <vfprintf+0x194>
    4004:	ce cf       	rjmp	.-100    	; 0x3fa2 <vfprintf+0x146>
    4006:	f6 01       	movw	r30, r12
    4008:	37 fc       	sbrc	r3, 7
    400a:	85 91       	lpm	r24, Z+
    400c:	37 fe       	sbrs	r3, 7
    400e:	81 91       	ld	r24, Z+
    4010:	6f 01       	movw	r12, r30
    4012:	b7 01       	movw	r22, r14
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    401a:	51 10       	cpse	r5, r1
    401c:	5a 94       	dec	r5
    401e:	f1 e0       	ldi	r31, 0x01	; 1
    4020:	8f 1a       	sub	r8, r31
    4022:	91 08       	sbc	r9, r1
    4024:	bf cf       	rjmp	.-130    	; 0x3fa4 <vfprintf+0x148>
    4026:	84 36       	cpi	r24, 0x64	; 100
    4028:	19 f0       	breq	.+6      	; 0x4030 <vfprintf+0x1d4>
    402a:	89 36       	cpi	r24, 0x69	; 105
    402c:	09 f0       	breq	.+2      	; 0x4030 <vfprintf+0x1d4>
    402e:	77 c0       	rjmp	.+238    	; 0x411e <vfprintf+0x2c2>
    4030:	f8 01       	movw	r30, r16
    4032:	37 fe       	sbrs	r3, 7
    4034:	6b c0       	rjmp	.+214    	; 0x410c <vfprintf+0x2b0>
    4036:	60 81       	ld	r22, Z
    4038:	71 81       	ldd	r23, Z+1	; 0x01
    403a:	82 81       	ldd	r24, Z+2	; 0x02
    403c:	93 81       	ldd	r25, Z+3	; 0x03
    403e:	0c 5f       	subi	r16, 0xFC	; 252
    4040:	1f 4f       	sbci	r17, 0xFF	; 255
    4042:	f3 2d       	mov	r31, r3
    4044:	ff 76       	andi	r31, 0x6F	; 111
    4046:	3f 2e       	mov	r3, r31
    4048:	97 ff       	sbrs	r25, 7
    404a:	09 c0       	rjmp	.+18     	; 0x405e <vfprintf+0x202>
    404c:	90 95       	com	r25
    404e:	80 95       	com	r24
    4050:	70 95       	com	r23
    4052:	61 95       	neg	r22
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
    4056:	8f 4f       	sbci	r24, 0xFF	; 255
    4058:	9f 4f       	sbci	r25, 0xFF	; 255
    405a:	68 94       	set
    405c:	37 f8       	bld	r3, 7
    405e:	2a e0       	ldi	r18, 0x0A	; 10
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	a5 01       	movw	r20, r10
    4064:	0e 94 4e 21 	call	0x429c	; 0x429c <__ultoa_invert>
    4068:	c8 2e       	mov	r12, r24
    406a:	ca 18       	sub	r12, r10
    406c:	8c 2c       	mov	r8, r12
    406e:	43 2c       	mov	r4, r3
    4070:	36 fe       	sbrs	r3, 6
    4072:	0c c0       	rjmp	.+24     	; 0x408c <vfprintf+0x230>
    4074:	e8 94       	clt
    4076:	40 f8       	bld	r4, 0
    4078:	c9 14       	cp	r12, r9
    407a:	40 f4       	brcc	.+16     	; 0x408c <vfprintf+0x230>
    407c:	34 fe       	sbrs	r3, 4
    407e:	05 c0       	rjmp	.+10     	; 0x408a <vfprintf+0x22e>
    4080:	32 fc       	sbrc	r3, 2
    4082:	03 c0       	rjmp	.+6      	; 0x408a <vfprintf+0x22e>
    4084:	f3 2d       	mov	r31, r3
    4086:	fe 7e       	andi	r31, 0xEE	; 238
    4088:	4f 2e       	mov	r4, r31
    408a:	89 2c       	mov	r8, r9
    408c:	44 fe       	sbrs	r4, 4
    408e:	95 c0       	rjmp	.+298    	; 0x41ba <vfprintf+0x35e>
    4090:	fe 01       	movw	r30, r28
    4092:	ec 0d       	add	r30, r12
    4094:	f1 1d       	adc	r31, r1
    4096:	80 81       	ld	r24, Z
    4098:	80 33       	cpi	r24, 0x30	; 48
    409a:	09 f0       	breq	.+2      	; 0x409e <vfprintf+0x242>
    409c:	87 c0       	rjmp	.+270    	; 0x41ac <vfprintf+0x350>
    409e:	24 2d       	mov	r18, r4
    40a0:	29 7e       	andi	r18, 0xE9	; 233
    40a2:	42 2e       	mov	r4, r18
    40a4:	84 2d       	mov	r24, r4
    40a6:	88 70       	andi	r24, 0x08	; 8
    40a8:	58 2e       	mov	r5, r24
    40aa:	43 fc       	sbrc	r4, 3
    40ac:	95 c0       	rjmp	.+298    	; 0x41d8 <vfprintf+0x37c>
    40ae:	40 fe       	sbrs	r4, 0
    40b0:	8f c0       	rjmp	.+286    	; 0x41d0 <vfprintf+0x374>
    40b2:	9c 2c       	mov	r9, r12
    40b4:	82 14       	cp	r8, r2
    40b6:	18 f4       	brcc	.+6      	; 0x40be <vfprintf+0x262>
    40b8:	2c 0c       	add	r2, r12
    40ba:	92 2c       	mov	r9, r2
    40bc:	98 18       	sub	r9, r8
    40be:	44 fe       	sbrs	r4, 4
    40c0:	91 c0       	rjmp	.+290    	; 0x41e4 <vfprintf+0x388>
    40c2:	b7 01       	movw	r22, r14
    40c4:	80 e3       	ldi	r24, 0x30	; 48
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    40cc:	42 fe       	sbrs	r4, 2
    40ce:	09 c0       	rjmp	.+18     	; 0x40e2 <vfprintf+0x286>
    40d0:	88 e7       	ldi	r24, 0x78	; 120
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	41 fe       	sbrs	r4, 1
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <vfprintf+0x280>
    40d8:	88 e5       	ldi	r24, 0x58	; 88
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	b7 01       	movw	r22, r14
    40de:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    40e2:	c9 14       	cp	r12, r9
    40e4:	08 f4       	brcc	.+2      	; 0x40e8 <vfprintf+0x28c>
    40e6:	8a c0       	rjmp	.+276    	; 0x41fc <vfprintf+0x3a0>
    40e8:	ca 94       	dec	r12
    40ea:	d1 2c       	mov	r13, r1
    40ec:	9f ef       	ldi	r25, 0xFF	; 255
    40ee:	c9 1a       	sub	r12, r25
    40f0:	d9 0a       	sbc	r13, r25
    40f2:	ca 0c       	add	r12, r10
    40f4:	db 1c       	adc	r13, r11
    40f6:	f6 01       	movw	r30, r12
    40f8:	82 91       	ld	r24, -Z
    40fa:	6f 01       	movw	r12, r30
    40fc:	b7 01       	movw	r22, r14
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    4104:	ac 14       	cp	r10, r12
    4106:	bd 04       	cpc	r11, r13
    4108:	b1 f7       	brne	.-20     	; 0x40f6 <vfprintf+0x29a>
    410a:	4f cf       	rjmp	.-354    	; 0x3faa <vfprintf+0x14e>
    410c:	60 81       	ld	r22, Z
    410e:	71 81       	ldd	r23, Z+1	; 0x01
    4110:	07 2e       	mov	r0, r23
    4112:	00 0c       	add	r0, r0
    4114:	88 0b       	sbc	r24, r24
    4116:	99 0b       	sbc	r25, r25
    4118:	0e 5f       	subi	r16, 0xFE	; 254
    411a:	1f 4f       	sbci	r17, 0xFF	; 255
    411c:	92 cf       	rjmp	.-220    	; 0x4042 <vfprintf+0x1e6>
    411e:	d3 2c       	mov	r13, r3
    4120:	e8 94       	clt
    4122:	d4 f8       	bld	r13, 4
    4124:	2a e0       	ldi	r18, 0x0A	; 10
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	85 37       	cpi	r24, 0x75	; 117
    412a:	39 f1       	breq	.+78     	; 0x417a <vfprintf+0x31e>
    412c:	23 2d       	mov	r18, r3
    412e:	29 7f       	andi	r18, 0xF9	; 249
    4130:	d2 2e       	mov	r13, r18
    4132:	8f 36       	cpi	r24, 0x6F	; 111
    4134:	01 f1       	breq	.+64     	; 0x4176 <vfprintf+0x31a>
    4136:	48 f4       	brcc	.+18     	; 0x414a <vfprintf+0x2ee>
    4138:	88 35       	cpi	r24, 0x58	; 88
    413a:	a9 f0       	breq	.+42     	; 0x4166 <vfprintf+0x30a>
    413c:	f7 01       	movw	r30, r14
    413e:	86 81       	ldd	r24, Z+6	; 0x06
    4140:	97 81       	ldd	r25, Z+7	; 0x07
    4142:	2b 96       	adiw	r28, 0x0b	; 11
    4144:	e2 e1       	ldi	r30, 0x12	; 18
    4146:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>
    414a:	80 37       	cpi	r24, 0x70	; 112
    414c:	49 f0       	breq	.+18     	; 0x4160 <vfprintf+0x304>
    414e:	88 37       	cpi	r24, 0x78	; 120
    4150:	a9 f7       	brne	.-22     	; 0x413c <vfprintf+0x2e0>
    4152:	d4 fe       	sbrs	r13, 4
    4154:	02 c0       	rjmp	.+4      	; 0x415a <vfprintf+0x2fe>
    4156:	68 94       	set
    4158:	d2 f8       	bld	r13, 2
    415a:	20 e1       	ldi	r18, 0x10	; 16
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	0d c0       	rjmp	.+26     	; 0x417a <vfprintf+0x31e>
    4160:	68 94       	set
    4162:	d4 f8       	bld	r13, 4
    4164:	f6 cf       	rjmp	.-20     	; 0x4152 <vfprintf+0x2f6>
    4166:	34 fe       	sbrs	r3, 4
    4168:	03 c0       	rjmp	.+6      	; 0x4170 <vfprintf+0x314>
    416a:	82 2f       	mov	r24, r18
    416c:	86 60       	ori	r24, 0x06	; 6
    416e:	d8 2e       	mov	r13, r24
    4170:	20 e1       	ldi	r18, 0x10	; 16
    4172:	32 e0       	ldi	r19, 0x02	; 2
    4174:	02 c0       	rjmp	.+4      	; 0x417a <vfprintf+0x31e>
    4176:	28 e0       	ldi	r18, 0x08	; 8
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	f8 01       	movw	r30, r16
    417c:	d7 fe       	sbrs	r13, 7
    417e:	0f c0       	rjmp	.+30     	; 0x419e <vfprintf+0x342>
    4180:	60 81       	ld	r22, Z
    4182:	71 81       	ldd	r23, Z+1	; 0x01
    4184:	82 81       	ldd	r24, Z+2	; 0x02
    4186:	93 81       	ldd	r25, Z+3	; 0x03
    4188:	0c 5f       	subi	r16, 0xFC	; 252
    418a:	1f 4f       	sbci	r17, 0xFF	; 255
    418c:	a5 01       	movw	r20, r10
    418e:	0e 94 4e 21 	call	0x429c	; 0x429c <__ultoa_invert>
    4192:	c8 2e       	mov	r12, r24
    4194:	ca 18       	sub	r12, r10
    4196:	3d 2c       	mov	r3, r13
    4198:	e8 94       	clt
    419a:	37 f8       	bld	r3, 7
    419c:	67 cf       	rjmp	.-306    	; 0x406c <vfprintf+0x210>
    419e:	60 81       	ld	r22, Z
    41a0:	71 81       	ldd	r23, Z+1	; 0x01
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	0e 5f       	subi	r16, 0xFE	; 254
    41a8:	1f 4f       	sbci	r17, 0xFF	; 255
    41aa:	f0 cf       	rjmp	.-32     	; 0x418c <vfprintf+0x330>
    41ac:	42 fc       	sbrc	r4, 2
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <vfprintf+0x358>
    41b0:	83 94       	inc	r8
    41b2:	78 cf       	rjmp	.-272    	; 0x40a4 <vfprintf+0x248>
    41b4:	83 94       	inc	r8
    41b6:	83 94       	inc	r8
    41b8:	75 cf       	rjmp	.-278    	; 0x40a4 <vfprintf+0x248>
    41ba:	84 2d       	mov	r24, r4
    41bc:	86 78       	andi	r24, 0x86	; 134
    41be:	09 f4       	brne	.+2      	; 0x41c2 <vfprintf+0x366>
    41c0:	71 cf       	rjmp	.-286    	; 0x40a4 <vfprintf+0x248>
    41c2:	f6 cf       	rjmp	.-20     	; 0x41b0 <vfprintf+0x354>
    41c4:	b7 01       	movw	r22, r14
    41c6:	80 e2       	ldi	r24, 0x20	; 32
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    41ce:	83 94       	inc	r8
    41d0:	82 14       	cp	r8, r2
    41d2:	c0 f3       	brcs	.-16     	; 0x41c4 <vfprintf+0x368>
    41d4:	51 2c       	mov	r5, r1
    41d6:	73 cf       	rjmp	.-282    	; 0x40be <vfprintf+0x262>
    41d8:	52 2c       	mov	r5, r2
    41da:	58 18       	sub	r5, r8
    41dc:	82 14       	cp	r8, r2
    41de:	08 f4       	brcc	.+2      	; 0x41e2 <vfprintf+0x386>
    41e0:	6e cf       	rjmp	.-292    	; 0x40be <vfprintf+0x262>
    41e2:	f8 cf       	rjmp	.-16     	; 0x41d4 <vfprintf+0x378>
    41e4:	84 2d       	mov	r24, r4
    41e6:	86 78       	andi	r24, 0x86	; 134
    41e8:	09 f4       	brne	.+2      	; 0x41ec <vfprintf+0x390>
    41ea:	7b cf       	rjmp	.-266    	; 0x40e2 <vfprintf+0x286>
    41ec:	8b e2       	ldi	r24, 0x2B	; 43
    41ee:	41 fe       	sbrs	r4, 1
    41f0:	80 e2       	ldi	r24, 0x20	; 32
    41f2:	47 fc       	sbrc	r4, 7
    41f4:	8d e2       	ldi	r24, 0x2D	; 45
    41f6:	b7 01       	movw	r22, r14
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	71 cf       	rjmp	.-286    	; 0x40de <vfprintf+0x282>
    41fc:	b7 01       	movw	r22, r14
    41fe:	80 e3       	ldi	r24, 0x30	; 48
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	0e 94 1e 21 	call	0x423c	; 0x423c <fputc>
    4206:	9a 94       	dec	r9
    4208:	6c cf       	rjmp	.-296    	; 0x40e2 <vfprintf+0x286>
    420a:	8f ef       	ldi	r24, 0xFF	; 255
    420c:	9f ef       	ldi	r25, 0xFF	; 255
    420e:	99 cf       	rjmp	.-206    	; 0x4142 <vfprintf+0x2e6>

00004210 <strnlen_P>:
    4210:	fc 01       	movw	r30, r24
    4212:	05 90       	lpm	r0, Z+
    4214:	61 50       	subi	r22, 0x01	; 1
    4216:	70 40       	sbci	r23, 0x00	; 0
    4218:	01 10       	cpse	r0, r1
    421a:	d8 f7       	brcc	.-10     	; 0x4212 <strnlen_P+0x2>
    421c:	80 95       	com	r24
    421e:	90 95       	com	r25
    4220:	8e 0f       	add	r24, r30
    4222:	9f 1f       	adc	r25, r31
    4224:	08 95       	ret

00004226 <strnlen>:
    4226:	fc 01       	movw	r30, r24
    4228:	61 50       	subi	r22, 0x01	; 1
    422a:	70 40       	sbci	r23, 0x00	; 0
    422c:	01 90       	ld	r0, Z+
    422e:	01 10       	cpse	r0, r1
    4230:	d8 f7       	brcc	.-10     	; 0x4228 <strnlen+0x2>
    4232:	80 95       	com	r24
    4234:	90 95       	com	r25
    4236:	8e 0f       	add	r24, r30
    4238:	9f 1f       	adc	r25, r31
    423a:	08 95       	ret

0000423c <fputc>:
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
    4244:	18 2f       	mov	r17, r24
    4246:	09 2f       	mov	r16, r25
    4248:	eb 01       	movw	r28, r22
    424a:	8b 81       	ldd	r24, Y+3	; 0x03
    424c:	81 fd       	sbrc	r24, 1
    424e:	09 c0       	rjmp	.+18     	; 0x4262 <fputc+0x26>
    4250:	1f ef       	ldi	r17, 0xFF	; 255
    4252:	0f ef       	ldi	r16, 0xFF	; 255
    4254:	81 2f       	mov	r24, r17
    4256:	90 2f       	mov	r25, r16
    4258:	df 91       	pop	r29
    425a:	cf 91       	pop	r28
    425c:	1f 91       	pop	r17
    425e:	0f 91       	pop	r16
    4260:	08 95       	ret
    4262:	82 ff       	sbrs	r24, 2
    4264:	14 c0       	rjmp	.+40     	; 0x428e <fputc+0x52>
    4266:	2e 81       	ldd	r18, Y+6	; 0x06
    4268:	3f 81       	ldd	r19, Y+7	; 0x07
    426a:	8c 81       	ldd	r24, Y+4	; 0x04
    426c:	9d 81       	ldd	r25, Y+5	; 0x05
    426e:	28 17       	cp	r18, r24
    4270:	39 07       	cpc	r19, r25
    4272:	3c f4       	brge	.+14     	; 0x4282 <fputc+0x46>
    4274:	e8 81       	ld	r30, Y
    4276:	f9 81       	ldd	r31, Y+1	; 0x01
    4278:	cf 01       	movw	r24, r30
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	99 83       	std	Y+1, r25	; 0x01
    427e:	88 83       	st	Y, r24
    4280:	10 83       	st	Z, r17
    4282:	8e 81       	ldd	r24, Y+6	; 0x06
    4284:	9f 81       	ldd	r25, Y+7	; 0x07
    4286:	01 96       	adiw	r24, 0x01	; 1
    4288:	9f 83       	std	Y+7, r25	; 0x07
    428a:	8e 83       	std	Y+6, r24	; 0x06
    428c:	e3 cf       	rjmp	.-58     	; 0x4254 <fputc+0x18>
    428e:	e8 85       	ldd	r30, Y+8	; 0x08
    4290:	f9 85       	ldd	r31, Y+9	; 0x09
    4292:	81 2f       	mov	r24, r17
    4294:	09 95       	icall
    4296:	89 2b       	or	r24, r25
    4298:	a1 f3       	breq	.-24     	; 0x4282 <fputc+0x46>
    429a:	da cf       	rjmp	.-76     	; 0x4250 <fputc+0x14>

0000429c <__ultoa_invert>:
    429c:	fa 01       	movw	r30, r20
    429e:	aa 27       	eor	r26, r26
    42a0:	28 30       	cpi	r18, 0x08	; 8
    42a2:	51 f1       	breq	.+84     	; 0x42f8 <__ultoa_invert+0x5c>
    42a4:	20 31       	cpi	r18, 0x10	; 16
    42a6:	81 f1       	breq	.+96     	; 0x4308 <__ultoa_invert+0x6c>
    42a8:	e8 94       	clt
    42aa:	6f 93       	push	r22
    42ac:	6e 7f       	andi	r22, 0xFE	; 254
    42ae:	6e 5f       	subi	r22, 0xFE	; 254
    42b0:	7f 4f       	sbci	r23, 0xFF	; 255
    42b2:	8f 4f       	sbci	r24, 0xFF	; 255
    42b4:	9f 4f       	sbci	r25, 0xFF	; 255
    42b6:	af 4f       	sbci	r26, 0xFF	; 255
    42b8:	b1 e0       	ldi	r27, 0x01	; 1
    42ba:	3e d0       	rcall	.+124    	; 0x4338 <__ultoa_invert+0x9c>
    42bc:	b4 e0       	ldi	r27, 0x04	; 4
    42be:	3c d0       	rcall	.+120    	; 0x4338 <__ultoa_invert+0x9c>
    42c0:	67 0f       	add	r22, r23
    42c2:	78 1f       	adc	r23, r24
    42c4:	89 1f       	adc	r24, r25
    42c6:	9a 1f       	adc	r25, r26
    42c8:	a1 1d       	adc	r26, r1
    42ca:	68 0f       	add	r22, r24
    42cc:	79 1f       	adc	r23, r25
    42ce:	8a 1f       	adc	r24, r26
    42d0:	91 1d       	adc	r25, r1
    42d2:	a1 1d       	adc	r26, r1
    42d4:	6a 0f       	add	r22, r26
    42d6:	71 1d       	adc	r23, r1
    42d8:	81 1d       	adc	r24, r1
    42da:	91 1d       	adc	r25, r1
    42dc:	a1 1d       	adc	r26, r1
    42de:	20 d0       	rcall	.+64     	; 0x4320 <__ultoa_invert+0x84>
    42e0:	09 f4       	brne	.+2      	; 0x42e4 <__ultoa_invert+0x48>
    42e2:	68 94       	set
    42e4:	3f 91       	pop	r19
    42e6:	2a e0       	ldi	r18, 0x0A	; 10
    42e8:	26 9f       	mul	r18, r22
    42ea:	11 24       	eor	r1, r1
    42ec:	30 19       	sub	r19, r0
    42ee:	30 5d       	subi	r19, 0xD0	; 208
    42f0:	31 93       	st	Z+, r19
    42f2:	de f6       	brtc	.-74     	; 0x42aa <__ultoa_invert+0xe>
    42f4:	cf 01       	movw	r24, r30
    42f6:	08 95       	ret
    42f8:	46 2f       	mov	r20, r22
    42fa:	47 70       	andi	r20, 0x07	; 7
    42fc:	40 5d       	subi	r20, 0xD0	; 208
    42fe:	41 93       	st	Z+, r20
    4300:	b3 e0       	ldi	r27, 0x03	; 3
    4302:	0f d0       	rcall	.+30     	; 0x4322 <__ultoa_invert+0x86>
    4304:	c9 f7       	brne	.-14     	; 0x42f8 <__ultoa_invert+0x5c>
    4306:	f6 cf       	rjmp	.-20     	; 0x42f4 <__ultoa_invert+0x58>
    4308:	46 2f       	mov	r20, r22
    430a:	4f 70       	andi	r20, 0x0F	; 15
    430c:	40 5d       	subi	r20, 0xD0	; 208
    430e:	4a 33       	cpi	r20, 0x3A	; 58
    4310:	18 f0       	brcs	.+6      	; 0x4318 <__ultoa_invert+0x7c>
    4312:	49 5d       	subi	r20, 0xD9	; 217
    4314:	31 fd       	sbrc	r19, 1
    4316:	40 52       	subi	r20, 0x20	; 32
    4318:	41 93       	st	Z+, r20
    431a:	02 d0       	rcall	.+4      	; 0x4320 <__ultoa_invert+0x84>
    431c:	a9 f7       	brne	.-22     	; 0x4308 <__ultoa_invert+0x6c>
    431e:	ea cf       	rjmp	.-44     	; 0x42f4 <__ultoa_invert+0x58>
    4320:	b4 e0       	ldi	r27, 0x04	; 4
    4322:	a6 95       	lsr	r26
    4324:	97 95       	ror	r25
    4326:	87 95       	ror	r24
    4328:	77 95       	ror	r23
    432a:	67 95       	ror	r22
    432c:	ba 95       	dec	r27
    432e:	c9 f7       	brne	.-14     	; 0x4322 <__ultoa_invert+0x86>
    4330:	00 97       	sbiw	r24, 0x00	; 0
    4332:	61 05       	cpc	r22, r1
    4334:	71 05       	cpc	r23, r1
    4336:	08 95       	ret
    4338:	9b 01       	movw	r18, r22
    433a:	ac 01       	movw	r20, r24
    433c:	0a 2e       	mov	r0, r26
    433e:	06 94       	lsr	r0
    4340:	57 95       	ror	r21
    4342:	47 95       	ror	r20
    4344:	37 95       	ror	r19
    4346:	27 95       	ror	r18
    4348:	ba 95       	dec	r27
    434a:	c9 f7       	brne	.-14     	; 0x433e <__ultoa_invert+0xa2>
    434c:	62 0f       	add	r22, r18
    434e:	73 1f       	adc	r23, r19
    4350:	84 1f       	adc	r24, r20
    4352:	95 1f       	adc	r25, r21
    4354:	a0 1d       	adc	r26, r0
    4356:	08 95       	ret

00004358 <_exit>:
    4358:	f8 94       	cli

0000435a <__stop_program>:
    435a:	ff cf       	rjmp	.-2      	; 0x435a <__stop_program>
