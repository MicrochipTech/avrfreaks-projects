
******************
			Proj_1B_LEDdisplay


A SAMPLE PROGRAM:  Driving the led segments.	This uses the display to generate a simple pattern that can be adjusted	or paused using the switches and repeats endlessly.

Three important pieces of microcontroller hardware (HW) are introduced: 	The USART and the I2C bus (two wire interface)	The watch dog timer (WDT)




INTRODUCING THE PROJECT FIRM WARE (FW)

1.  "setup_UNO_extra"	This is a code segment that sets up the UNO IC.	For example:	It determines which pins are to be used with the switches.	It enables the display brightness to be set.	It sets up the receiver/transmitter hardware (USART) that communicates with the PC.


2.  The subroutine "I2C_Tx_2_integers()":	This sends 32 data bits from the UNO to the PCB_A device which uses them to control the display.	Communication between the devices takes place over the I2C bus.


3.  The subroutine "I2C_Tx_any_segment_clear_all()" which clears the display


4.  Subroutines "Char_to_EEPROM()" and "Char_from_EEPROM()"


5.  Code segment "config_sw1_and_sw2_for_PCI".	This enables switch presses to generate Pin Change Interrupts 


6. "switch_1_up", switch_1_down etc.	These are code segments that enable the switch presses to be detected.	Note: The switches are mounted on PCB_A but are actually connected to the UNO.


7.  "SW_reset_with_interrupt"	This is a code segment that allows the program to reset the UNO.	It uses the watchdog timer configured to generate an interrupt before reseting the UNO device. 


8.  The .h file ("Proj_1B_header_file.h")	This gives details of the code segments and the locations of the subroutines.	It also tells the compiler about certain WinAVR files that will be required. 




DRIVING THE DEVELOPMENT TOOLS


To create the .hex file click on "tools" and then select "Make All"	Select "Make Clean" to delete all extra files generated except the .hex


Note: The Makefile has been slightly edited to ensure that the .hex file is not also deleted.


Suggestion:	Click on Tools/Options/Advanced/Brace match	and select a really bright colour.	This helps to clarify program flow.


Help with the C code:	Google  https://epdf.tips/c-programming-for-microcontrollers.html. for a great introductory read.


Prefer to Use Atmel Studio: No problem. Studio and WinAVR are similar in many ways.


Prefer to use Arduino: No problem: Select "Sketck/Export compiled Binary" (and change char declarations to unsigned char!)


END OF COMMENTARY Press X to escape.	Then press sw2 to adjust display and sw1 to pause it.


