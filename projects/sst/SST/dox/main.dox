/*! \mainpage SST

\section intro Introduction

This is a implementation of a lightweight scheduler so called
"Super Simple Tasker" - SST. The idea is taken from the Robert Ward's article -
"Practical Real-Time Techniques" [http://www.quantum-leaps.com/resources/Ward03.pdf].<br>
Conventional real-time kernels maintain relatively complex execution
contexts (including separate stack spaces) for each running thread or task.
This gives developer a nice design flexibility and scalability but it is not for free.
For smaller devices the requirements for CPU resources can be prohibitive.<br>
The SST allows to significantly reduce needs for precious RAM and ROM and still
allows to keep a real time characteristic of the scheduler (e.g. tasks prioritization
and preemption).<br>
For detailed description of the SST concept look at the mentioned above article or at
Embedded.com site
http://www.embedded.com/showArticle.jhtml?articleID=190302110<br>
In short - this is so called Run To Completion (RTC) scheduler and the
preemption points are restricted only to interrupts (ISR) and SST API calls. The
preemption is possible only when there is a task (in the ready to run state) with
higher priority than priority of the current task.<br>
Because of this, tasks have no "waiting" state which implies that it is up to developer
to properly design given task to not block the whole system (it is usually achieved
by implementing task as a finite state machine (FSM)).<br>
Because of resource utilization as a primary goal there is no dynamic tasks
creation and deletion. Also the functions which initialize objects have very limited (or
not at all) error detection or recovery. Because such initialization is performed only
once (at program startup) and it not depends on dynamic conditions then it is
left up to developer to properly use some resources (e.g. not to create more periodic
tasks than given #SST_Ticker_T object can handle).
<br><br>
There are possibilities to tailor some functionalities (thus usage of resources
like RAM and ROM) at compile time by defining some macros or assigning to them
special values.<br>
For simplicity the maximum number of tasks is defined statically at compile
time - see #SST_MAX_NO_OF_TASKS<br>
E.g. User can declare three different functionalities associated with event
queue associated with task - see #SST_MAX_EV_QUEUE_LEN.<br>
There is possible to automatically enable given timer only when needed and
disable when not needed- see #SST_USE_LAZY_TIMER<br>
When the macro #SST_USE_SIGNAL_MASK defined to nonzero value there is available
additional functionality which allows to post event to more than one task
(broadcast like) by single function (#SST_PostEvent) call.<br>
This functionality can be used to decouple tasks - event can be sent without previous
knowledge of ID for given task(s). E.g. you can with ease send event to two tasks
interested about change of ADC value and if you later chnage your mind and want
to inform three tasks then you do not need change the existing code of event sender nor
receiver. Just add proper event mask for the new receiver task.
<br>
Some numbers:
	- 5 tasks with queue for 4 events each (SST RAM usage):
        - 78 (AVR)
        - 292 (ARM)
    - API for scheduler (FLASH):
        - 672 (AVR)
        - 828 (ARM)
	- 5 tasks with queue for 4 events each with event broadcast functionality (SST RAM usage):
        - 83 (AVR)
        - 312 (ARM)
    - API for scheduler with event broadcast functionality (FLASH):
        - 784 (AVR)
        - 1048 (ARM)
    - Optional API for periodic and time scheduled tasks (FLASH):
        - 192 (AVR)
        - 216 (ARM)
    - Optional API for mutex (FLASH):
        - 72 (AVR)
        - 148 (ARM)

\section support Supported Devices
Atmel AVR, NXP LPC (ARM), Atmel AT91 (ARM)

\section install Installation

All you need is to include supplied source files from the \c sst folder into
your project.<br>
There are parts of the code (in the sst_base_def.h) to enable/disable
interrupts which use GNU specific extensions but they are very short (a few lines)
and easy to replace by constructions used by other toolsets e.g. IAR.<br>
Mainly for size efficiency, all tunable parameters are fixed at compile time.
They are placed in the sst_base_def.h file which is specific for given CPU
and project.

\section examples Examples

There are provided in the \c examples folder two examples of the SST usage. Both
are prepared for running on the AVR and LPC (ARM) platforms (the \c AVR and \c LPC
folders respectively).<br>

The example below shows how to create and schedule two tasks, one periodic and one
event schedulable.

\include the_simplest_example.c

<br>
<br>

\section copyright Copyright
(C) Copyright 2006, Artur Lipowski<br>
No guarantees, warrantees, or promises, implied or otherwise.<br>
May be used for hobby or commercial purposes provided copyright
notice remains intact.

\author Artur Lipowski <LAL@pro.onet.pl>
\version 1.1
\date 30 December 2006

*/

