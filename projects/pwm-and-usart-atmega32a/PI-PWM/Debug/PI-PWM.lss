
PI-PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00002100  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006f6  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00002e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009f  00000000  00000000  00002e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c4  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000181  00000000  00000000  000031fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000358  00000000  00000000  0000337e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000036d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000171  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011c  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00003a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  64:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Init>:
#include <inttypes.h>


void PWM_Init(){
	
	 DDRB |= 1<<PB3;                    // Uses PB3 as OC0
  6c:	bb 9a       	sbi	0x17, 3	; 23
	 
	 TCCR0 |= 1<<WGM00 | 1<<WGM01 |		// Fast PWM
  6e:	83 b7       	in	r24, 0x33	; 51
  70:	8d 67       	ori	r24, 0x7D	; 125
  72:	83 bf       	out	0x33, r24	; 51
	          1<<COM00 | 1<<COM01 |		// Non inverted
			  1<<CS00  | 1<<CS02 ;		// 1024-prescaler

	 
	 DDRD |= 0xFF;
  74:	81 b3       	in	r24, 0x11	; 17
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	81 bb       	out	0x11, r24	; 17
	 TCCR1A |= 1<<WGM11  |              // Fast PWM
  7a:	8f b5       	in	r24, 0x2f	; 47
  7c:	82 6a       	ori	r24, 0xA2	; 162
  7e:	8f bd       	out	0x2f, r24	; 47
	           1<<COM1A1 | 1<<COM1B1;	// PWM1 e PWM2 non-inverted
	 
	 TCCR1B |= 1<<WGM12  | 1<<WGM13 |   // Fast PWM
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	8a 61       	ori	r24, 0x1A	; 26
  84:	8e bd       	out	0x2e, r24	; 46
	           1<<CS11;					// 8-prescaler
	 
	 ICR1 = 20000;						// Sets the period, using Timer 1
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	9e e4       	ldi	r25, 0x4E	; 78
  8a:	97 bd       	out	0x27, r25	; 39
  8c:	86 bd       	out	0x26, r24	; 38
	 
	 DDRD |= 1<<PD7;                    // Use PD7 as OC2
  8e:	8f 9a       	sbi	0x11, 7	; 17
	 
	 TCCR2 |= 1<<WGM20 | 1<<WGM21 |		// Fast PWM
  90:	85 b5       	in	r24, 0x25	; 37
  92:	8f 67       	ori	r24, 0x7F	; 127
  94:	85 bd       	out	0x25, r24	; 37
	          1<<COM20 | 1<<COM21 |		// Non inverted
			  1<<CS20  | 1<<CS21  | 1<<CS22;		// 1024-prescaler
	 
	
   
}
  96:	08 95       	ret

00000098 <PWM_setDutyA>:
 *    Conta para saber o período ou a frequencia no Timer 1:  F_CPU/(prescaler(1+ICR1))
 *                                               no Timer 0:  F_CPU/(prescaler*256)
 */


void PWM_setDutyA(double x){
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	7b 01       	movw	r14, r22
  a2:	8c 01       	movw	r16, r24
	//Timer 1 function that sets the width of the pulse
	OCR1A = x*ICR1/100; //50Hz
  a4:	66 b5       	in	r22, 0x26	; 38
  a6:	77 b5       	in	r23, 0x27	; 39
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 24 02 	call	0x448	; 0x448 <__floatunsisf>
  b0:	a8 01       	movw	r20, r16
  b2:	97 01       	movw	r18, r14
  b4:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3>
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	48 ec       	ldi	r20, 0xC8	; 200
  be:	52 e4       	ldi	r21, 0x42	; 66
  c0:	0e 94 90 01 	call	0x320	; 0x320 <__divsf3>
  c4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fixunssfsi>
  c8:	7b bd       	out	0x2b, r23	; 43
  ca:	6a bd       	out	0x2a, r22	; 42
}
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	08 95       	ret

000000d6 <PWM_setDutyB>:

void PWM_setDutyB(double x){
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	7b 01       	movw	r14, r22
  e0:	8c 01       	movw	r16, r24
	//Timer 1 function that sets the width of the pulse
	OCR1B = x*ICR1/100;
  e2:	66 b5       	in	r22, 0x26	; 38
  e4:	77 b5       	in	r23, 0x27	; 39
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 24 02 	call	0x448	; 0x448 <__floatunsisf>
  ee:	a8 01       	movw	r20, r16
  f0:	97 01       	movw	r18, r14
  f2:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	48 ec       	ldi	r20, 0xC8	; 200
  fc:	52 e4       	ldi	r21, 0x42	; 66
  fe:	0e 94 90 01 	call	0x320	; 0x320 <__divsf3>
 102:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fixunssfsi>
 106:	79 bd       	out	0x29, r23	; 41
 108:	68 bd       	out	0x28, r22	; 40
	
}	
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	08 95       	ret

00000114 <PWM_setDutyC>:

void PWM_setDutyC(double x){
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
	//Timer 0 function that sets the width of the inverted pulse
	OCR0 = (100-x)*256/100;
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	88 ec       	ldi	r24, 0xC8	; 200
 11e:	92 e4       	ldi	r25, 0x42	; 66
 120:	0e 94 2b 01 	call	0x256	; 0x256 <__subsf3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e8       	ldi	r20, 0x80	; 128
 12a:	53 e4       	ldi	r21, 0x43	; 67
 12c:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3>
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	48 ec       	ldi	r20, 0xC8	; 200
 136:	52 e4       	ldi	r21, 0x42	; 66
 138:	0e 94 90 01 	call	0x320	; 0x320 <__divsf3>
 13c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fixunssfsi>
 140:	6c bf       	out	0x3c, r22	; 60
}
 142:	08 95       	ret

00000144 <PWM_setDutyD>:

void PWM_setDutyD(double x){
 144:	9b 01       	movw	r18, r22
 146:	ac 01       	movw	r20, r24
	//Timer 2 function that sets the width of the inverted pulse
	OCR2 = (100-x)*256/100;
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	88 ec       	ldi	r24, 0xC8	; 200
 14e:	92 e4       	ldi	r25, 0x42	; 66
 150:	0e 94 2b 01 	call	0x256	; 0x256 <__subsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 e8       	ldi	r20, 0x80	; 128
 15a:	53 e4       	ldi	r21, 0x43	; 67
 15c:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	48 ec       	ldi	r20, 0xC8	; 200
 166:	52 e4       	ldi	r21, 0x42	; 66
 168:	0e 94 90 01 	call	0x320	; 0x320 <__divsf3>
 16c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__fixunssfsi>
 170:	63 bd       	out	0x23, r22	; 35
}
 172:	08 95       	ret

00000174 <USARTInit>:

void USARTInit(uint16_t ubrr_value) 
{
	//Set Baud rate

	UBRRL = ubrr_value;
 174:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr_value>>8); 
 176:	90 bd       	out	0x20, r25	; 32
    *> No Parity
    *> 1 StopBit
    *> char size 8
	*/

    UCSRC=(1<<URSEL)|(3<<UCSZ0);
 178:	86 e8       	ldi	r24, 0x86	; 134
 17a:	80 bd       	out	0x20, r24	; 32

    //Enable The receiver and transmitter
    UCSRB=(1<<RXEN)|(1<<TXEN);
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	8a b9       	out	0x0a, r24	; 10
   
}   
 180:	08 95       	ret

00000182 <USARTReadChar>:

char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 182:	5f 9b       	sbis	0x0b, 7	; 11
 184:	fe cf       	rjmp	.-4      	; 0x182 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 186:	8c b1       	in	r24, 0x0c	; 12
}
 188:	08 95       	ret

0000018a <USARTWriteChar>:

void USARTWriteChar(char data)
{
   //Wait until the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 18a:	5d 9b       	sbis	0x0b, 5	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 18e:	8c b9       	out	0x0c, r24	; 12
}
 190:	08 95       	ret

00000192 <main>:


int main(void)
{
 192:	1f 93       	push	r17
	char data;
	USARTInit(51);
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 ba 00 	call	0x174	; 0x174 <USARTInit>
	PWM_Init();
 19c:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Init>
  	while(1) 
	{

		//Read data
        data=USARTReadChar();
 1a0:	0e 94 c1 00 	call	0x182	; 0x182 <USARTReadChar>
 1a4:	18 2f       	mov	r17, r24

		USARTWriteChar('[');
 1a6:	8b e5       	ldi	r24, 0x5B	; 91
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		USARTWriteChar(data);
 1ac:	81 2f       	mov	r24, r17
 1ae:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		USARTWriteChar(']');
 1b2:	8d e5       	ldi	r24, 0x5D	; 93
 1b4:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		
		
		PWM_setDutyA(10);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	91 e4       	ldi	r25, 0x41	; 65
 1c0:	0e 94 4c 00 	call	0x98	; 0x98 <PWM_setDutyA>
		PWM_setDutyB(10);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	91 e4       	ldi	r25, 0x41	; 65
 1cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <PWM_setDutyB>
		PWM_setDutyC(10);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	80 e2       	ldi	r24, 0x20	; 32
 1d6:	91 e4       	ldi	r25, 0x41	; 65
 1d8:	0e 94 8a 00 	call	0x114	; 0x114 <PWM_setDutyC>
		PWM_setDutyD(10);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	91 e4       	ldi	r25, 0x41	; 65
 1e4:	0e 94 a2 00 	call	0x144	; 0x144 <PWM_setDutyD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	94 e3       	ldi	r25, 0x34	; 52
 1ec:	ac e0       	ldi	r26, 0x0C	; 12
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	a0 40       	sbci	r26, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x5c>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x66>
 1f8:	00 00       	nop
		
		_delay_ms(500);
		//Read data
		data=USARTReadChar();
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <USARTReadChar>
 1fe:	18 2f       	mov	r17, r24

		USARTWriteChar('[');
 200:	8b e5       	ldi	r24, 0x5B	; 91
 202:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		USARTWriteChar(data);
 206:	81 2f       	mov	r24, r17
 208:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		USARTWriteChar(']');
 20c:	8d e5       	ldi	r24, 0x5D	; 93
 20e:	0e 94 c5 00 	call	0x18a	; 0x18a <USARTWriteChar>
		
		PWM_setDutyA(50);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	88 e4       	ldi	r24, 0x48	; 72
 218:	92 e4       	ldi	r25, 0x42	; 66
 21a:	0e 94 4c 00 	call	0x98	; 0x98 <PWM_setDutyA>
		PWM_setDutyB(50);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	88 e4       	ldi	r24, 0x48	; 72
 224:	92 e4       	ldi	r25, 0x42	; 66
 226:	0e 94 6b 00 	call	0xd6	; 0xd6 <PWM_setDutyB>
		PWM_setDutyC(50);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	88 e4       	ldi	r24, 0x48	; 72
 230:	92 e4       	ldi	r25, 0x42	; 66
 232:	0e 94 8a 00 	call	0x114	; 0x114 <PWM_setDutyC>
		PWM_setDutyD(50);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	88 e4       	ldi	r24, 0x48	; 72
 23c:	92 e4       	ldi	r25, 0x42	; 66
 23e:	0e 94 a2 00 	call	0x144	; 0x144 <PWM_setDutyD>
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	94 e3       	ldi	r25, 0x34	; 52
 246:	ac e0       	ldi	r26, 0x0C	; 12
 248:	81 50       	subi	r24, 0x01	; 1
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	a0 40       	sbci	r26, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xb6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xc0>
 252:	00 00       	nop
 254:	a5 cf       	rjmp	.-182    	; 0x1a0 <main+0xe>

00000256 <__subsf3>:
 256:	50 58       	subi	r21, 0x80	; 128

00000258 <__addsf3>:
 258:	bb 27       	eor	r27, r27
 25a:	aa 27       	eor	r26, r26
 25c:	0e d0       	rcall	.+28     	; 0x27a <__addsf3x>
 25e:	48 c1       	rjmp	.+656    	; 0x4f0 <__fp_round>
 260:	39 d1       	rcall	.+626    	; 0x4d4 <__fp_pscA>
 262:	30 f0       	brcs	.+12     	; 0x270 <__addsf3+0x18>
 264:	3e d1       	rcall	.+636    	; 0x4e2 <__fp_pscB>
 266:	20 f0       	brcs	.+8      	; 0x270 <__addsf3+0x18>
 268:	31 f4       	brne	.+12     	; 0x276 <__addsf3+0x1e>
 26a:	9f 3f       	cpi	r25, 0xFF	; 255
 26c:	11 f4       	brne	.+4      	; 0x272 <__addsf3+0x1a>
 26e:	1e f4       	brtc	.+6      	; 0x276 <__addsf3+0x1e>
 270:	2e c1       	rjmp	.+604    	; 0x4ce <__fp_nan>
 272:	0e f4       	brtc	.+2      	; 0x276 <__addsf3+0x1e>
 274:	e0 95       	com	r30
 276:	e7 fb       	bst	r30, 7
 278:	24 c1       	rjmp	.+584    	; 0x4c2 <__fp_inf>

0000027a <__addsf3x>:
 27a:	e9 2f       	mov	r30, r25
 27c:	4a d1       	rcall	.+660    	; 0x512 <__fp_split3>
 27e:	80 f3       	brcs	.-32     	; 0x260 <__addsf3+0x8>
 280:	ba 17       	cp	r27, r26
 282:	62 07       	cpc	r22, r18
 284:	73 07       	cpc	r23, r19
 286:	84 07       	cpc	r24, r20
 288:	95 07       	cpc	r25, r21
 28a:	18 f0       	brcs	.+6      	; 0x292 <__addsf3x+0x18>
 28c:	71 f4       	brne	.+28     	; 0x2aa <__addsf3x+0x30>
 28e:	9e f5       	brtc	.+102    	; 0x2f6 <__addsf3x+0x7c>
 290:	62 c1       	rjmp	.+708    	; 0x556 <__fp_zero>
 292:	0e f4       	brtc	.+2      	; 0x296 <__addsf3x+0x1c>
 294:	e0 95       	com	r30
 296:	0b 2e       	mov	r0, r27
 298:	ba 2f       	mov	r27, r26
 29a:	a0 2d       	mov	r26, r0
 29c:	0b 01       	movw	r0, r22
 29e:	b9 01       	movw	r22, r18
 2a0:	90 01       	movw	r18, r0
 2a2:	0c 01       	movw	r0, r24
 2a4:	ca 01       	movw	r24, r20
 2a6:	a0 01       	movw	r20, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	ff 27       	eor	r31, r31
 2ac:	59 1b       	sub	r21, r25
 2ae:	99 f0       	breq	.+38     	; 0x2d6 <__addsf3x+0x5c>
 2b0:	59 3f       	cpi	r21, 0xF9	; 249
 2b2:	50 f4       	brcc	.+20     	; 0x2c8 <__addsf3x+0x4e>
 2b4:	50 3e       	cpi	r21, 0xE0	; 224
 2b6:	68 f1       	brcs	.+90     	; 0x312 <__addsf3x+0x98>
 2b8:	1a 16       	cp	r1, r26
 2ba:	f0 40       	sbci	r31, 0x00	; 0
 2bc:	a2 2f       	mov	r26, r18
 2be:	23 2f       	mov	r18, r19
 2c0:	34 2f       	mov	r19, r20
 2c2:	44 27       	eor	r20, r20
 2c4:	58 5f       	subi	r21, 0xF8	; 248
 2c6:	f3 cf       	rjmp	.-26     	; 0x2ae <__addsf3x+0x34>
 2c8:	46 95       	lsr	r20
 2ca:	37 95       	ror	r19
 2cc:	27 95       	ror	r18
 2ce:	a7 95       	ror	r26
 2d0:	f0 40       	sbci	r31, 0x00	; 0
 2d2:	53 95       	inc	r21
 2d4:	c9 f7       	brne	.-14     	; 0x2c8 <__addsf3x+0x4e>
 2d6:	7e f4       	brtc	.+30     	; 0x2f6 <__addsf3x+0x7c>
 2d8:	1f 16       	cp	r1, r31
 2da:	ba 0b       	sbc	r27, r26
 2dc:	62 0b       	sbc	r22, r18
 2de:	73 0b       	sbc	r23, r19
 2e0:	84 0b       	sbc	r24, r20
 2e2:	ba f0       	brmi	.+46     	; 0x312 <__addsf3x+0x98>
 2e4:	91 50       	subi	r25, 0x01	; 1
 2e6:	a1 f0       	breq	.+40     	; 0x310 <__addsf3x+0x96>
 2e8:	ff 0f       	add	r31, r31
 2ea:	bb 1f       	adc	r27, r27
 2ec:	66 1f       	adc	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	88 1f       	adc	r24, r24
 2f2:	c2 f7       	brpl	.-16     	; 0x2e4 <__addsf3x+0x6a>
 2f4:	0e c0       	rjmp	.+28     	; 0x312 <__addsf3x+0x98>
 2f6:	ba 0f       	add	r27, r26
 2f8:	62 1f       	adc	r22, r18
 2fa:	73 1f       	adc	r23, r19
 2fc:	84 1f       	adc	r24, r20
 2fe:	48 f4       	brcc	.+18     	; 0x312 <__addsf3x+0x98>
 300:	87 95       	ror	r24
 302:	77 95       	ror	r23
 304:	67 95       	ror	r22
 306:	b7 95       	ror	r27
 308:	f7 95       	ror	r31
 30a:	9e 3f       	cpi	r25, 0xFE	; 254
 30c:	08 f0       	brcs	.+2      	; 0x310 <__addsf3x+0x96>
 30e:	b3 cf       	rjmp	.-154    	; 0x276 <__addsf3+0x1e>
 310:	93 95       	inc	r25
 312:	88 0f       	add	r24, r24
 314:	08 f0       	brcs	.+2      	; 0x318 <__addsf3x+0x9e>
 316:	99 27       	eor	r25, r25
 318:	ee 0f       	add	r30, r30
 31a:	97 95       	ror	r25
 31c:	87 95       	ror	r24
 31e:	08 95       	ret

00000320 <__divsf3>:
 320:	0c d0       	rcall	.+24     	; 0x33a <__divsf3x>
 322:	e6 c0       	rjmp	.+460    	; 0x4f0 <__fp_round>
 324:	de d0       	rcall	.+444    	; 0x4e2 <__fp_pscB>
 326:	40 f0       	brcs	.+16     	; 0x338 <__divsf3+0x18>
 328:	d5 d0       	rcall	.+426    	; 0x4d4 <__fp_pscA>
 32a:	30 f0       	brcs	.+12     	; 0x338 <__divsf3+0x18>
 32c:	21 f4       	brne	.+8      	; 0x336 <__divsf3+0x16>
 32e:	5f 3f       	cpi	r21, 0xFF	; 255
 330:	19 f0       	breq	.+6      	; 0x338 <__divsf3+0x18>
 332:	c7 c0       	rjmp	.+398    	; 0x4c2 <__fp_inf>
 334:	51 11       	cpse	r21, r1
 336:	10 c1       	rjmp	.+544    	; 0x558 <__fp_szero>
 338:	ca c0       	rjmp	.+404    	; 0x4ce <__fp_nan>

0000033a <__divsf3x>:
 33a:	eb d0       	rcall	.+470    	; 0x512 <__fp_split3>
 33c:	98 f3       	brcs	.-26     	; 0x324 <__divsf3+0x4>

0000033e <__divsf3_pse>:
 33e:	99 23       	and	r25, r25
 340:	c9 f3       	breq	.-14     	; 0x334 <__divsf3+0x14>
 342:	55 23       	and	r21, r21
 344:	b1 f3       	breq	.-20     	; 0x332 <__divsf3+0x12>
 346:	95 1b       	sub	r25, r21
 348:	55 0b       	sbc	r21, r21
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	62 17       	cp	r22, r18
 350:	73 07       	cpc	r23, r19
 352:	84 07       	cpc	r24, r20
 354:	38 f0       	brcs	.+14     	; 0x364 <__divsf3_pse+0x26>
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	44 1f       	adc	r20, r20
 360:	aa 1f       	adc	r26, r26
 362:	a9 f3       	breq	.-22     	; 0x34e <__divsf3_pse+0x10>
 364:	33 d0       	rcall	.+102    	; 0x3cc <__divsf3_pse+0x8e>
 366:	0e 2e       	mov	r0, r30
 368:	3a f0       	brmi	.+14     	; 0x378 <__divsf3_pse+0x3a>
 36a:	e0 e8       	ldi	r30, 0x80	; 128
 36c:	30 d0       	rcall	.+96     	; 0x3ce <__divsf3_pse+0x90>
 36e:	91 50       	subi	r25, 0x01	; 1
 370:	50 40       	sbci	r21, 0x00	; 0
 372:	e6 95       	lsr	r30
 374:	00 1c       	adc	r0, r0
 376:	ca f7       	brpl	.-14     	; 0x36a <__divsf3_pse+0x2c>
 378:	29 d0       	rcall	.+82     	; 0x3cc <__divsf3_pse+0x8e>
 37a:	fe 2f       	mov	r31, r30
 37c:	27 d0       	rcall	.+78     	; 0x3cc <__divsf3_pse+0x8e>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	bb 1f       	adc	r27, r27
 386:	26 17       	cp	r18, r22
 388:	37 07       	cpc	r19, r23
 38a:	48 07       	cpc	r20, r24
 38c:	ab 07       	cpc	r26, r27
 38e:	b0 e8       	ldi	r27, 0x80	; 128
 390:	09 f0       	breq	.+2      	; 0x394 <__divsf3_pse+0x56>
 392:	bb 0b       	sbc	r27, r27
 394:	80 2d       	mov	r24, r0
 396:	bf 01       	movw	r22, r30
 398:	ff 27       	eor	r31, r31
 39a:	93 58       	subi	r25, 0x83	; 131
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	2a f0       	brmi	.+10     	; 0x3aa <__divsf3_pse+0x6c>
 3a0:	9e 3f       	cpi	r25, 0xFE	; 254
 3a2:	51 05       	cpc	r21, r1
 3a4:	68 f0       	brcs	.+26     	; 0x3c0 <__divsf3_pse+0x82>
 3a6:	8d c0       	rjmp	.+282    	; 0x4c2 <__fp_inf>
 3a8:	d7 c0       	rjmp	.+430    	; 0x558 <__fp_szero>
 3aa:	5f 3f       	cpi	r21, 0xFF	; 255
 3ac:	ec f3       	brlt	.-6      	; 0x3a8 <__divsf3_pse+0x6a>
 3ae:	98 3e       	cpi	r25, 0xE8	; 232
 3b0:	dc f3       	brlt	.-10     	; 0x3a8 <__divsf3_pse+0x6a>
 3b2:	86 95       	lsr	r24
 3b4:	77 95       	ror	r23
 3b6:	67 95       	ror	r22
 3b8:	b7 95       	ror	r27
 3ba:	f7 95       	ror	r31
 3bc:	9f 5f       	subi	r25, 0xFF	; 255
 3be:	c9 f7       	brne	.-14     	; 0x3b2 <__divsf3_pse+0x74>
 3c0:	88 0f       	add	r24, r24
 3c2:	91 1d       	adc	r25, r1
 3c4:	96 95       	lsr	r25
 3c6:	87 95       	ror	r24
 3c8:	97 f9       	bld	r25, 7
 3ca:	08 95       	ret
 3cc:	e1 e0       	ldi	r30, 0x01	; 1
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	88 1f       	adc	r24, r24
 3d4:	bb 1f       	adc	r27, r27
 3d6:	62 17       	cp	r22, r18
 3d8:	73 07       	cpc	r23, r19
 3da:	84 07       	cpc	r24, r20
 3dc:	ba 07       	cpc	r27, r26
 3de:	20 f0       	brcs	.+8      	; 0x3e8 <__divsf3_pse+0xaa>
 3e0:	62 1b       	sub	r22, r18
 3e2:	73 0b       	sbc	r23, r19
 3e4:	84 0b       	sbc	r24, r20
 3e6:	ba 0b       	sbc	r27, r26
 3e8:	ee 1f       	adc	r30, r30
 3ea:	88 f7       	brcc	.-30     	; 0x3ce <__divsf3_pse+0x90>
 3ec:	e0 95       	com	r30
 3ee:	08 95       	ret

000003f0 <__fixunssfsi>:
 3f0:	98 d0       	rcall	.+304    	; 0x522 <__fp_splitA>
 3f2:	88 f0       	brcs	.+34     	; 0x416 <__fixunssfsi+0x26>
 3f4:	9f 57       	subi	r25, 0x7F	; 127
 3f6:	90 f0       	brcs	.+36     	; 0x41c <__fixunssfsi+0x2c>
 3f8:	b9 2f       	mov	r27, r25
 3fa:	99 27       	eor	r25, r25
 3fc:	b7 51       	subi	r27, 0x17	; 23
 3fe:	a0 f0       	brcs	.+40     	; 0x428 <__fixunssfsi+0x38>
 400:	d1 f0       	breq	.+52     	; 0x436 <__fixunssfsi+0x46>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	1a f0       	brmi	.+6      	; 0x412 <__fixunssfsi+0x22>
 40c:	ba 95       	dec	r27
 40e:	c9 f7       	brne	.-14     	; 0x402 <__fixunssfsi+0x12>
 410:	12 c0       	rjmp	.+36     	; 0x436 <__fixunssfsi+0x46>
 412:	b1 30       	cpi	r27, 0x01	; 1
 414:	81 f0       	breq	.+32     	; 0x436 <__fixunssfsi+0x46>
 416:	9f d0       	rcall	.+318    	; 0x556 <__fp_zero>
 418:	b1 e0       	ldi	r27, 0x01	; 1
 41a:	08 95       	ret
 41c:	9c c0       	rjmp	.+312    	; 0x556 <__fp_zero>
 41e:	67 2f       	mov	r22, r23
 420:	78 2f       	mov	r23, r24
 422:	88 27       	eor	r24, r24
 424:	b8 5f       	subi	r27, 0xF8	; 248
 426:	39 f0       	breq	.+14     	; 0x436 <__fixunssfsi+0x46>
 428:	b9 3f       	cpi	r27, 0xF9	; 249
 42a:	cc f3       	brlt	.-14     	; 0x41e <__fixunssfsi+0x2e>
 42c:	86 95       	lsr	r24
 42e:	77 95       	ror	r23
 430:	67 95       	ror	r22
 432:	b3 95       	inc	r27
 434:	d9 f7       	brne	.-10     	; 0x42c <__fixunssfsi+0x3c>
 436:	3e f4       	brtc	.+14     	; 0x446 <__fixunssfsi+0x56>
 438:	90 95       	com	r25
 43a:	80 95       	com	r24
 43c:	70 95       	com	r23
 43e:	61 95       	neg	r22
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	8f 4f       	sbci	r24, 0xFF	; 255
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	08 95       	ret

00000448 <__floatunsisf>:
 448:	e8 94       	clt
 44a:	09 c0       	rjmp	.+18     	; 0x45e <__floatsisf+0x12>

0000044c <__floatsisf>:
 44c:	97 fb       	bst	r25, 7
 44e:	3e f4       	brtc	.+14     	; 0x45e <__floatsisf+0x12>
 450:	90 95       	com	r25
 452:	80 95       	com	r24
 454:	70 95       	com	r23
 456:	61 95       	neg	r22
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	99 23       	and	r25, r25
 460:	a9 f0       	breq	.+42     	; 0x48c <__floatsisf+0x40>
 462:	f9 2f       	mov	r31, r25
 464:	96 e9       	ldi	r25, 0x96	; 150
 466:	bb 27       	eor	r27, r27
 468:	93 95       	inc	r25
 46a:	f6 95       	lsr	r31
 46c:	87 95       	ror	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b7 95       	ror	r27
 474:	f1 11       	cpse	r31, r1
 476:	f8 cf       	rjmp	.-16     	; 0x468 <__floatsisf+0x1c>
 478:	fa f4       	brpl	.+62     	; 0x4b8 <__floatsisf+0x6c>
 47a:	bb 0f       	add	r27, r27
 47c:	11 f4       	brne	.+4      	; 0x482 <__floatsisf+0x36>
 47e:	60 ff       	sbrs	r22, 0
 480:	1b c0       	rjmp	.+54     	; 0x4b8 <__floatsisf+0x6c>
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	16 c0       	rjmp	.+44     	; 0x4b8 <__floatsisf+0x6c>
 48c:	88 23       	and	r24, r24
 48e:	11 f0       	breq	.+4      	; 0x494 <__floatsisf+0x48>
 490:	96 e9       	ldi	r25, 0x96	; 150
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <__floatsisf+0x6a>
 494:	77 23       	and	r23, r23
 496:	21 f0       	breq	.+8      	; 0x4a0 <__floatsisf+0x54>
 498:	9e e8       	ldi	r25, 0x8E	; 142
 49a:	87 2f       	mov	r24, r23
 49c:	76 2f       	mov	r23, r22
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__floatsisf+0x5e>
 4a0:	66 23       	and	r22, r22
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <__floatsisf+0x74>
 4a4:	96 e8       	ldi	r25, 0x86	; 134
 4a6:	86 2f       	mov	r24, r22
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	2a f0       	brmi	.+10     	; 0x4b8 <__floatsisf+0x6c>
 4ae:	9a 95       	dec	r25
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	88 1f       	adc	r24, r24
 4b6:	da f7       	brpl	.-10     	; 0x4ae <__floatsisf+0x62>
 4b8:	88 0f       	add	r24, r24
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	97 f9       	bld	r25, 7
 4c0:	08 95       	ret

000004c2 <__fp_inf>:
 4c2:	97 f9       	bld	r25, 7
 4c4:	9f 67       	ori	r25, 0x7F	; 127
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	08 95       	ret

000004ce <__fp_nan>:
 4ce:	9f ef       	ldi	r25, 0xFF	; 255
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	08 95       	ret

000004d4 <__fp_pscA>:
 4d4:	00 24       	eor	r0, r0
 4d6:	0a 94       	dec	r0
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	09 06       	cpc	r0, r25
 4e0:	08 95       	ret

000004e2 <__fp_pscB>:
 4e2:	00 24       	eor	r0, r0
 4e4:	0a 94       	dec	r0
 4e6:	12 16       	cp	r1, r18
 4e8:	13 06       	cpc	r1, r19
 4ea:	14 06       	cpc	r1, r20
 4ec:	05 06       	cpc	r0, r21
 4ee:	08 95       	ret

000004f0 <__fp_round>:
 4f0:	09 2e       	mov	r0, r25
 4f2:	03 94       	inc	r0
 4f4:	00 0c       	add	r0, r0
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0xc>
 4f8:	88 23       	and	r24, r24
 4fa:	52 f0       	brmi	.+20     	; 0x510 <__fp_round+0x20>
 4fc:	bb 0f       	add	r27, r27
 4fe:	40 f4       	brcc	.+16     	; 0x510 <__fp_round+0x20>
 500:	bf 2b       	or	r27, r31
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0x18>
 504:	60 ff       	sbrs	r22, 0
 506:	04 c0       	rjmp	.+8      	; 0x510 <__fp_round+0x20>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <__fp_split3>:
 512:	57 fd       	sbrc	r21, 7
 514:	90 58       	subi	r25, 0x80	; 128
 516:	44 0f       	add	r20, r20
 518:	55 1f       	adc	r21, r21
 51a:	59 f0       	breq	.+22     	; 0x532 <__fp_splitA+0x10>
 51c:	5f 3f       	cpi	r21, 0xFF	; 255
 51e:	71 f0       	breq	.+28     	; 0x53c <__fp_splitA+0x1a>
 520:	47 95       	ror	r20

00000522 <__fp_splitA>:
 522:	88 0f       	add	r24, r24
 524:	97 fb       	bst	r25, 7
 526:	99 1f       	adc	r25, r25
 528:	61 f0       	breq	.+24     	; 0x542 <__fp_splitA+0x20>
 52a:	9f 3f       	cpi	r25, 0xFF	; 255
 52c:	79 f0       	breq	.+30     	; 0x54c <__fp_splitA+0x2a>
 52e:	87 95       	ror	r24
 530:	08 95       	ret
 532:	12 16       	cp	r1, r18
 534:	13 06       	cpc	r1, r19
 536:	14 06       	cpc	r1, r20
 538:	55 1f       	adc	r21, r21
 53a:	f2 cf       	rjmp	.-28     	; 0x520 <__fp_split3+0xe>
 53c:	46 95       	lsr	r20
 53e:	f1 df       	rcall	.-30     	; 0x522 <__fp_splitA>
 540:	08 c0       	rjmp	.+16     	; 0x552 <__fp_splitA+0x30>
 542:	16 16       	cp	r1, r22
 544:	17 06       	cpc	r1, r23
 546:	18 06       	cpc	r1, r24
 548:	99 1f       	adc	r25, r25
 54a:	f1 cf       	rjmp	.-30     	; 0x52e <__fp_splitA+0xc>
 54c:	86 95       	lsr	r24
 54e:	71 05       	cpc	r23, r1
 550:	61 05       	cpc	r22, r1
 552:	08 94       	sec
 554:	08 95       	ret

00000556 <__fp_zero>:
 556:	e8 94       	clt

00000558 <__fp_szero>:
 558:	bb 27       	eor	r27, r27
 55a:	66 27       	eor	r22, r22
 55c:	77 27       	eor	r23, r23
 55e:	cb 01       	movw	r24, r22
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <__mulsf3>:
 564:	0b d0       	rcall	.+22     	; 0x57c <__mulsf3x>
 566:	c4 cf       	rjmp	.-120    	; 0x4f0 <__fp_round>
 568:	b5 df       	rcall	.-150    	; 0x4d4 <__fp_pscA>
 56a:	28 f0       	brcs	.+10     	; 0x576 <__mulsf3+0x12>
 56c:	ba df       	rcall	.-140    	; 0x4e2 <__fp_pscB>
 56e:	18 f0       	brcs	.+6      	; 0x576 <__mulsf3+0x12>
 570:	95 23       	and	r25, r21
 572:	09 f0       	breq	.+2      	; 0x576 <__mulsf3+0x12>
 574:	a6 cf       	rjmp	.-180    	; 0x4c2 <__fp_inf>
 576:	ab cf       	rjmp	.-170    	; 0x4ce <__fp_nan>
 578:	11 24       	eor	r1, r1
 57a:	ee cf       	rjmp	.-36     	; 0x558 <__fp_szero>

0000057c <__mulsf3x>:
 57c:	ca df       	rcall	.-108    	; 0x512 <__fp_split3>
 57e:	a0 f3       	brcs	.-24     	; 0x568 <__mulsf3+0x4>

00000580 <__mulsf3_pse>:
 580:	95 9f       	mul	r25, r21
 582:	d1 f3       	breq	.-12     	; 0x578 <__mulsf3+0x14>
 584:	95 0f       	add	r25, r21
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	55 1f       	adc	r21, r21
 58a:	62 9f       	mul	r22, r18
 58c:	f0 01       	movw	r30, r0
 58e:	72 9f       	mul	r23, r18
 590:	bb 27       	eor	r27, r27
 592:	f0 0d       	add	r31, r0
 594:	b1 1d       	adc	r27, r1
 596:	63 9f       	mul	r22, r19
 598:	aa 27       	eor	r26, r26
 59a:	f0 0d       	add	r31, r0
 59c:	b1 1d       	adc	r27, r1
 59e:	aa 1f       	adc	r26, r26
 5a0:	64 9f       	mul	r22, r20
 5a2:	66 27       	eor	r22, r22
 5a4:	b0 0d       	add	r27, r0
 5a6:	a1 1d       	adc	r26, r1
 5a8:	66 1f       	adc	r22, r22
 5aa:	82 9f       	mul	r24, r18
 5ac:	22 27       	eor	r18, r18
 5ae:	b0 0d       	add	r27, r0
 5b0:	a1 1d       	adc	r26, r1
 5b2:	62 1f       	adc	r22, r18
 5b4:	73 9f       	mul	r23, r19
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	62 1f       	adc	r22, r18
 5bc:	83 9f       	mul	r24, r19
 5be:	a0 0d       	add	r26, r0
 5c0:	61 1d       	adc	r22, r1
 5c2:	22 1f       	adc	r18, r18
 5c4:	74 9f       	mul	r23, r20
 5c6:	33 27       	eor	r19, r19
 5c8:	a0 0d       	add	r26, r0
 5ca:	61 1d       	adc	r22, r1
 5cc:	23 1f       	adc	r18, r19
 5ce:	84 9f       	mul	r24, r20
 5d0:	60 0d       	add	r22, r0
 5d2:	21 1d       	adc	r18, r1
 5d4:	82 2f       	mov	r24, r18
 5d6:	76 2f       	mov	r23, r22
 5d8:	6a 2f       	mov	r22, r26
 5da:	11 24       	eor	r1, r1
 5dc:	9f 57       	subi	r25, 0x7F	; 127
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	8a f0       	brmi	.+34     	; 0x604 <__mulsf3_pse+0x84>
 5e2:	e1 f0       	breq	.+56     	; 0x61c <__mulsf3_pse+0x9c>
 5e4:	88 23       	and	r24, r24
 5e6:	4a f0       	brmi	.+18     	; 0x5fa <__mulsf3_pse+0x7a>
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	bb 1f       	adc	r27, r27
 5ee:	66 1f       	adc	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	50 40       	sbci	r21, 0x00	; 0
 5f8:	a9 f7       	brne	.-22     	; 0x5e4 <__mulsf3_pse+0x64>
 5fa:	9e 3f       	cpi	r25, 0xFE	; 254
 5fc:	51 05       	cpc	r21, r1
 5fe:	70 f0       	brcs	.+28     	; 0x61c <__mulsf3_pse+0x9c>
 600:	60 cf       	rjmp	.-320    	; 0x4c2 <__fp_inf>
 602:	aa cf       	rjmp	.-172    	; 0x558 <__fp_szero>
 604:	5f 3f       	cpi	r21, 0xFF	; 255
 606:	ec f3       	brlt	.-6      	; 0x602 <__mulsf3_pse+0x82>
 608:	98 3e       	cpi	r25, 0xE8	; 232
 60a:	dc f3       	brlt	.-10     	; 0x602 <__mulsf3_pse+0x82>
 60c:	86 95       	lsr	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b7 95       	ror	r27
 614:	f7 95       	ror	r31
 616:	e7 95       	ror	r30
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	c1 f7       	brne	.-16     	; 0x60c <__mulsf3_pse+0x8c>
 61c:	fe 2b       	or	r31, r30
 61e:	88 0f       	add	r24, r24
 620:	91 1d       	adc	r25, r1
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
