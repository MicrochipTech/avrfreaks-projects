/******************************************************************************
 * wait.h
 * 		Defines methods to be used for waiting as well as some common values
 *		that can be used to count elapsed time on your own. Define F_CPU for
 *		yourself if you need a value different than 8MHz for your base clock.
 *****************************************************************************/
#ifndef __WAIT_H
	#define __WAIT_H

	#include <avr/io.h>

/******************************************************************************
 * F_CPU
 * 		The CPU frequency for the target chip. Set this somewhere else if you
 *		need to compile for a different clock speed.
 *****************************************************************************/
	#ifndef F_CPU
		#define F_CPU (0x7a1200)
	#endif

/******************************************************************************
 * SCALER
 *		The devisor to be applied to the system clock by the timer. In the case
 *		of the ATmega328P this is one of the following values
 *			1
 *			8
 *			64
 *			256
 *			1024
 *		Do your math and pick the appropriate scaler. A faster processor will
 *		need to use a larger scaler to avoid counter overflows.
 *****************************************************************************/
 	#ifndef SCALER
		#define SCALER (0x1)
	#endif

/******************************************************************************
 * TPS
 *		Ticks Per Second - The number of clock ticks in a second. This is the
 *		same as F_CPU with a different name that made more sense to me at the 
 *		time.
 *****************************************************************************/
	#ifndef TPS
		#define TPS ((F_CPU)/(SCALER))
	#endif

/******************************************************************************
 * TPMS
 *		Ticks Per MilliSecond - The number of clock ticks in a millisecond.
 *		This is 1/1000 of a second and here, again, just for convenience.
 *****************************************************************************/
	#ifndef TPMS
		#define TPMS ((TPS)/(0x3e8))
	#endif

/******************************************************************************
 * COUNTER
 *		An alias that I'm using for the counter that I'm going to use while
 *		waiting.
 *****************************************************************************/
	#ifndef COUNTER
		#define COUNTER TCNT1
	#endif

/******************************************************************************
 * TCR
 *		An alias that I'm using for the timer control register that will be 
 *		used to configure the clock source and scaler for the timer
 *****************************************************************************/
 	#ifndef TCR
		#define TCR TCCR1B
	#endif

/******************************************************************************
 * TIMER_OFF
 *		This is where I turn off the timer, actually what I'm doing is removing
 *		the clock source and scaler so it's essentially a reset state.
 *****************************************************************************/
 	#ifndef TIMER_OFF
		#define TIMER_OFF	TCR &=~(_BV(CS12)) & ~(_BV(CS11)) & ~(_BV(CS10))
	#endif

/******************************************************************************
 * SCALER_1_SET
 *		This is how I'm going to set the timer with a scaler of 1
 *****************************************************************************/
 	#ifndef SCALER_1_SET
		#define SCALER_1_SET TCR |= (_BV(CS10))
	#endif

/******************************************************************************
 * SCALER_8_SET
 *		This is how I'm going to set the timer with a scaler of 8
 *****************************************************************************/
 	#ifndef SCALER_8_SET
		#define SCALER_8_SET TCR |= (_BV(CS11))
	#endif

/******************************************************************************
 * SCALER_64_SET
 *		This is how I'm going to set the timer with a scaler of 64
 *****************************************************************************/
 	#ifndef SCALER_64_SET
		#define SCALER_64_SET TCR |= (_BV(CS11)) | (_BV(CS10))
	#endif

/******************************************************************************
 * SCALER_256_SET
 *		This is how I'm going to set the timer with a scaler of 256
 *****************************************************************************/
 	#ifndef SCALER_256_SET
		#define SCALER_256_SET TCR |= (_BV(CS12))
	#endif

/******************************************************************************
 * SCALER_1024_SET
 *		This is how I'm going to set the timer with a scaler of 1024
 *****************************************************************************/
 	#ifndef SCALER_1024_SET
		#define SCALER_1024_SET TCR |= (_BV(CS12)) | (_BV(CS10))
	#endif

/******************************************************************************
 * Function prototypes
 *****************************************************************************/
	void initTimer(void);		//init the timer

	void waitMillis(long x);	//causes a wait of x milliseconds

	void waitSeconds(long x);	//causes a wait of x seconds

	void waitMinutes(long x);	//causes a wait of x minutes

	void waitHours(long x);		//causes a wait of x hours

	void waitDays(long x);		//causes a wait of x days

	void waitYears(long x); 	//causes a wait of x years
#endif
