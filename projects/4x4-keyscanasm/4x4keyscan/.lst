
AVRASM ver. 2.1.9  F:\A V R programmering\AVR Development project RELEASE\4x4keyscan\4x4keyscan.asm Thu Dec 28 00:48:29 2006

F:\A V R programmering\AVR Development project RELEASE\4x4keyscan\4x4keyscan.asm(50): Including file 'F:\A V R programmering\AVR Development project RELEASE\4x4keyscan\LCDmoduel.asm'
F:\A V R programmering\AVR Development project RELEASE\4x4keyscan\LCDmoduel.asm(66): Including file 'C:\Programmer\Atmel\AVR Tools\AvrAssembler2\Appnotes\M16DEF.INC'
                 
                 
                 ;                                - Relaes Form -
                 ;=====================================================================
                 ; New [ ]  Update [X]    AVR application [ ]   Created   
                 ;--------------------------------------------------------------------- 
                 ; Title :  4x4keyscan
                 ; Author:  BBH.                                       Date: 27-12-2006                
                 ; E-mail: (BRIAN@maxicoon.dk)
                 ;---------------------------------------------------------------------------------------------------------------- 
                 ; Target AVR MCU       : mega 16 
                 ; Frq xtal             : 3,686 Mhz
                 ; Include file         : m16def.inc/(LCD_8bit-lpm.asm)not include in thes file.
                 ; Language             : ASM/Atmel compiler/assembler v2 
                 ; Dev. Tool            : AVR Studio	4.12.460 service paket 2 
                 ; Code available to use: yes 
                 ; Filename             : 4x4keyscan          
                 ; Fil zise  .hex       : 
                 ; Version release      :1.0 4x4keyscan 
                 ;-----------------------------------------------------------------------------------------------------------------
                 ; Description   :scan port c colunm for key push aktiv low stat   
                 ; Input         :KEYVALUE =R22,KEYVALUE2=R23   
                 ; Output        : R0 to lcd for now temp 
                 ;               :  
                 ;
                 ; Note          ;
                 ;                          
                 ;                          
                 ;==================================================================================================================
                 ;Change Log:
                 ;28-03-2006 Created  4x4 keyboard sub
                 ;   
                 ;27-12-2006 make clean 4x4 key scan moduel ready to be include in other programs              
                 ;Version release record 
                 ;-------------------------------------------
                 ;VERSION	DATE		DESCRIPTIO           
                 ;  1      27-12-2006      Created   4x4 keyboardtest .        
                 ;-----------------------------------------------------------------------------  
                 ;KEYBOARD ON PORTC
                 
                 
                 
                 
                 
                 
                 
                 ;=============================================================================
                 ;MAIN KEYBOARD SCAN 
                 ;=============================================================================
                 ;config:
                 .include"F:\A V R programmering\AVR Development project RELEASE\4x4keyscan\LCDmoduel.asm"
                 
                 ;===============================================================================================================
                 ;                                - Relaes Form -
                 ;===============================================================================================================
                 ; New [ ]  Update [X] after req.      [ ]                Created   
                 ;--------------------------------------------------------------------------------------------------------------- 
                 ; Title :  8bit HD44780-2 LINE 16 CHAR GLOBAL LCD-MODUEL   
                 ; Author:  BBH                                       Date:01-12-2005                 
                 ; E-mail: (Elektronikbixen@maxicoon.dk)
                 ;---------------------------------------------------------------------------------------------------------------- 
                 ; Target AVR MCU       : mega 16 
                 ; Frq xtal             : 3,686 Mhz 
                 ; Include file         : m16def.inc 
                 ; Language             : ASM/Atmel compiler/assembler v2 
                 ; Dev. Tool            : AVR Studio	4.12.460 
                 ; Code available to use: yes
                 ; Filename             : lcd_8bit-LPM.ASM         
                 ; Fil zise  .hex       : 
                 ;-----------------------------------------------------------------------------------------------------------------
                 ; Description   : SETS LCD POWERTRIP TO 8 BIT DATA, 2 LINE, 5X8 FRONT CHAR, cursor on,blinking of cursor  character position 
                 ; Input         : BUSYGFLAG DB7 PORT "B"  
                 ; Output        : CTRL OUTPUT = PORT "D". ENABLE=PD0   RW=PD1   RS=PD2 
                 ;               : DATA OUTPUT = PORT "B". DB0-DB7 EQU LCD DATA. 
                 ;
                 ;                              MAIN lcd        STACK_POINTER
                 ; Note                         LCD_BUSYFLAG    LCD_INIT_8BIT           
                 ;              :LCD sub calls: LCD_ENABLE      LCD_WRITE_COMMAND       LCD_FUNKTIONSSET        LOAD BYTE
                 ;                              LCD_CLR         LCD_READ_COMMAND        LCD_SET_line2_COMMAND   LCD_OUT
                 ;                              CUROSER_HOME    LCD_DELAY               LCD_SET_line1_COMMAND   (message)( onley to show that lcd) 
                 ;==================================================================================================================
                 ;Change Log:
                 ;01-12-2005  Created. 
                 ;27-12-2005  Loads the string "message" from program memory (LPM). byte by byte.(REMOVE messages-strign from loadbyte moduel) 
                 ;15-03-2006  don som program cleaning on LPM moduel.
                 ;15-03-2006  lcd_write_command donte clear en,rs bit after aktion thes is correctet.
                 ;20-03-2006  make som change in old/new sub moduels. to make lcd moduel more availabl for Global use.
                 ;24-03-2006  make LCD_8bit-lpm clean lcd moduel.is only init the LCD(HD44780)-2line-16char
                 ;31-03-2006  bug in LCD_BUSYFLAG i use call instet off rjmp can give (stack problem)tanks for your mail.           
                 ;Version release record 
                 ;-------------------------------------------------------------------------------------------------------------------
                 ;VERSION:	DATE		DESCRIPTIO            
                 ;  1      01-12-2005      Created 
                 ;  2      15-03-2006    se change log 
                 ;  3      24-03-2006    ------"------ release clean lcd-lpm moduel  to avr freaks
                 ;===================================================================================================================
                 ;hardware connect:
                 ;LCD.   MCU
                 ;1 -
                 ;2 + 5,5 dc
                 ;3  contrast (10k pot)
                 ;________________________________________________________________________
                 ;4 rs    Pd2
                 ;5 rw    Pd1              port D
                 ;6 en    Pd0  
                 ;_________________________________________________________________________
                 ;7  Db0   Pb0
                 ;8  Db1   Pb1
                 ;9  Db2   Pb2
                 ;10 Db3   Pb3              port B   
                 ;11 Db4   Pb4
                 ;12 Db5   Pb5
                 ;13 Db6   Pb6
                 ;=============================================================================
                 ;MAIN lcd 
                 ;=============================================================================
                 .INCLUDE"M16DEF.INC"
                 
                 ;***** Created: 2006-10-03 09:16 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2006-10-03
                 ;* Version           : 2.24
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 #define _M16DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega16
                 #pragma AVRPART ADMIN PART_NAME ATmega16
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SE	= 6	; Sleep Enable
                 .equ	SM2	= 7	; Sleep Mode Select
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special function I/O register
                 ;.equ	PSR10	= 0	; Prescaler reset
                 .equ	PSR2	= 1	; Prescaler reset
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCSR - MCU Control And Status Register
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMCR	= SPMCSR	; For compatibility
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 .EQU LCD_PORT=PORTD         ;PORT D  CTRL OUTPUT RS,RW,EN TO LCD
                 .EQU LCD_PIN=PIND           ;PORT B USE AS DATABUS TO LCD , db7=busyflag.
                 .EQU LCD_EN=PD0             ;EN = ENABEL DATA READ/WRITE LCD                                      						    
                 .EQU LCD_RW=PD1             ;RW =
                 .EQU LCD_RS=PD2             ;RS =
                 .DEF LCD_DELAYTIME=R20      ;R20=TIMES FAKTOR OF 1Ms)R21
                 .DEF TEMP=R16               ;temporary variable
                 .DEF TEMP1=R17		        ;temporary variable	           
                 ;=============================================================================
                 ;STACK_POINTER:
                 ;=============================================================================
                 ; Description    : sets stack pointer up
                 ; uses   :           
                 ; Input  : 
                 ; Output :
                 ; Note   :for Global use in atmega xx
                 ;Version :1.0 
                 .CSEG
                 .ORG 0
                 reset: 
000000 e59f           LDI           R25,LOW(ramend)
000001 bf9d      	 OUT           SPL,R25            
000002 e094           LDI           R25,HIGH(ramend)
000003 bf9e           OUT           SPH,R25               
                 ;=============================================================================
                 ;MAIN PROGRAM CALLS
                 ;=============================================================================
000004 ef0f          LDI            TEMP,0B11111111
000005 bb07      	OUT            DDRB,TEMP             ;init port B,D to output  
000006 bb01          OUT            DDRD,TEMP
                 
000007 ef4f      	LDI            LCD_DELAYTIME,255
000008 940e 0060 	CALL           LCD_DELAY                            
00000a 940e 0012 	CALL           LCD_CLR
00000c 940e 0071     CALL           LCD_INIT_8BIT
00000e 940e 0087 	CALL           LCD_FUNKTIONSSET  
000010 940e 00a9 	call           KEY_SCAN 	          
                 ;=============================================================================
                 LCD_CLR:
                 ;=============================================================================
                 ; Description:Clears entire display and sets DDRAM address 0 in address counter.
                 ;            : Also returns display from being shifted to original position.           
                 ; Input  :
                 ; Output :   
                 ; Note   :                      
                 ;Version :1.4 
                 					 				  
000012 e001           LDI            TEMP,0B00000001     
000013 bb08           OUT            PORTB,temp                        
000014 940e 003f      CALL           LCD_ENABLE
000016 940e 0030 	 CALL           LCD_BUSYFLAG 
000018 ef4f      	 LDI            LCD_DELAYTIME,255      
000019 940e 0060 	 CALL           LCD_DELAY              
00001b ef4f           LDI            LCD_DELAYTIME,255     
00001c 940e 0060      CALL           LCD_DELAY              
00001e ef4f           LDI            LCD_DELAYTIME,255
00001f 940e 0060 	 CALL           LCD_DELAY
000021 940e 0028 	 CALL           CURSOR_HOME
000023 940e 0071 	 CALL           LCD_INIT_8BIT
000025 940e 0087 	 CALL           LCD_FUNKTIONSSET 
000027 9508           RET
                 ;=============================================================================			   
                 CURSOR_HOME:			      
                 ;=============================================================================				                                                       
                 ; Description
                 ; Input  : 
                 ; Output :   
                 ; Note   :
                 ;Version :1
                 			  
000028 e002              LDI            TEMP,0B00000010     
000029 bb08      	    OUT            PORTB,temp
00002a 940e 003f         CALL           LCD_ENABLE
00002c bb08              OUT            PORTB,TEMP
00002d 940e 0030         CALL           LCD_BUSYFLAG
00002f 9508      	    RET 
                 ;=============================================================================
                 LCD_BUSYFLAG:
                 ;=============================================================================
                 ; Description:Read busyflag indicating internal operation in lcd
                 ; uses       :      
                 ; Input      :the busy flag is input to pb7 on atmega mcu.
                 ; Output     :sets rw(PD1) for reading bf and address counter contents.
                 ; Note       :                    
                 ;Version     :1.4 
                            
000030 2711      	     CLR            temp1	                 
000031 e000               LDI            TEMP,0B00000000           
000032 bb07               OUT            DDRB,TEMP            
000033 940e 003f          CALL           LCD_ENABLE      
000035 9a91               SBI            LCD_PORT,LCD_RW
000036 b117      	     IN             TEMP1,7              
000037 940e 003f          CALL           LCD_ENABLE      
000039 fd17               SBRC           TEMP1,7              
00003a cff5               RJMP           LCD_BUSYFLAG         
00003b 9891               CBI            LCD_PORT,LCD_RW
00003c ef0f      	     LDI            TEMP,0B11111111     
00003d bb07               OUT            DDRB,TEMP            
00003e 9508               RET
                 ;=============================================================================
                 LCD_ENABLE:
                 ;=============================================================================
                 ; Description: Starts data read/write. lcd (enable/strobe)
                 ; uses             
                 ; Input  :
                 ; Output : port "D"  pind 0
                 ; Note   : 
                 ;Version :1
                                
00003f 9a90               SBI           LCD_PORT,LCD_EN
000040 0000               NOP
000041 0000      	     NOP
000042 9890               CBI           LCD_PORT,LCD_EN
000043 9508               RET
                 ;=============================================================================
                 LCD_WRITE_COMMAND:
                 ;============================================================================= 
                 ; Description:Writes data into DDRAM or CGRAM. Send character data to lcd
                 ; uses   :            
                 ; Input  :  
                 ; Output :sets  en,rs on port d 
                 ; Note   :                          
                 ;Version :1.1 change (put en,rs low after aktion)
                           
000044 e005      	LDI            TEMP,0B00000101
000045 bb02          OUT            PORTD,TEMP
000046 0000      	NOP
000047 0000      	NOP
000048 2700          CLR            TEMP
000049 bb02      	OUT            PORTD,TEMP            
00004a 9508      	RET
                 ;=============================================================================
                 LCD_READ_COMMAND:
                 ;=============================================================================
                 ; Description: Read data from lcd CG or DDRAM 
                 ; uses       :      
                 ; Input      :
                 ; Output     :  
                 ; Note       : SETS  en,rw,rs (READ FROM LCD)                  
                 ;Version     :0. never ben testet i dont use it.
                             
00004b e007          LDI           TEMP,0b00000111
00004c bb08          OUT           PORTB,TEMP
00004d 0000          NOP
00004e 0000      	NOP
00004f 2700          CLR           TEMP
000050 bb02      	OUT           PORTD,TEMP            
000051 9508      	RET
                 ;=============================================================================
                 LCD_SET_line1_COMMAND:
                 ;=============================================================================
                 ; Description:sets lcd to start on line 1 start at char 0
                 ; uses       :                                                                                  
                 ; Input      :
                 ; Output     :
                 ; Note       :      
                 ;Version     :1  
                        
000052 e800          LDI            TEMP,0b10000000                  
000053 bb08      	OUT            PORTB,TEMP                      
000054 940e 003f     CALL           LCD_ENABLE                       
000056 940e 0030 	CALL           LCD_BUSYFLAG
000058 9508      	RET  
                 ;=============================================================================
                 LCD_SET_line2_COMMAND:
                 ;=============================================================================
                 ; Description:sets lcd to start on line 2 start at char 0  
                 ; uses       :      
                 ; Input      :
                 ; Output     :
                 ; Note       :        
                  ;Version    :1 
                         
000059 ec00          LDI            TEMP,0B11000000                               
00005a bb08      	OUT            PORTB,TEMP                      
00005b 940e 003f     CALL           LCD_ENABLE                 
00005d 940e 0030 	CALL           LCD_BUSYFLAG
00005f 9508      	RET       		  		      		  
                 ;=============================================================================
                 LCD_DELAY:
                 ;=============================================================================
                 ; Description: delay in Ms TIMES VALUE in register r20 = timedelay
                 ; uses             
                 ; Input  : 
                 ; Output :for Global use in avr atmega xx se version.
                 ; Note   :inputvalue in r21 = lcd_delaytime
                 ;Version :2.0 cal. for 3,686 Mhz
                 
                 .EQU CODETIME_3_686_1MS_VALUE=244
                 CODETIME_DELAYMS:
000060 ef54              LDI           R21,CODETIME_3_686_1MS_VALUE 
                 CODETIME_DMS_INNERLOOP:
000061 0000              NOP
000062 0000              NOP
000063 0000              NOP
000064 0000              NOP
000065 0000              NOP
000066 0000              NOP
000067 0000              NOP
000068 0000              NOP
000069 0000              NOP
00006a 0000              NOP
00006b 0000              NOP
00006c 955a              DEC             R21
00006d f799              BRNE            CODETIME_DMS_INNERLOOP
00006e 954a              DEC             R20
00006f f781              BRNE            CODETIME_DELAYMS
000070 9508              RET
                 ;=============================================================================
                 LCD_INIT_8BIT:
                 ;=============================================================================
                 ; Description: Initializing lcd. sets 8-bit interface data 
                 ; uses  :           
                 ; Input :  
                 ; Output:sets port d as ctrl output en,rw,rs . Sets port b as output lcd data
                 ; Note  :Wait for more than 15 Ms after VCC rises to 4.5 V and then Initializing lcd.
                 ; Note  :busyflag cannot be use	yet                               
                 ;Version:1 
                                                  
000071 ef0f              LDI             TEMP,0XFF
000072 bb07              OUT             DDRB,TEMP                  
                  
000073 e007              LDI             TEMP,0B0111               
000074 bb01              OUT             DDRD,TEMP
                 
000075 e300              LDI             TEMP,0B000110000           
000076 bb08              OUT             PORTB,TEMP
000077 940e 003f         CALL            LCD_ENABLE                   
000079 e140              LDI             LCD_DELAYTIME,16              
00007a 940e 0060         CALL            LCD_DELAY                      
                                                                      
00007c 940e 003f 	    CALL            LCD_ENABLE       
00007e e045              LDI             LCD_DELAYTIME,5           
00007f 940e 0060         CALL            LCD_DELAY
                          
000081 940e 003f 	    CALL            LCD_ENABLE  
000083 e041              LDI             LCD_DELAYTIME,1
000084 940e 0060         CALL            LCD_DELAY
000086 9508              RET
                 ;=============================================================================
                 LCD_FUNKTIONSSET:                                            
                 ;=============================================================================
                 ; Descrip:Function set.8-bit interface data.Display,cursor,blinking on/off control.Entry mode set.
                 ; uses            
                 ; Input:
                 ; Output: 
                 ; noto  :
                 ; Note:busyflag can be checked after the following instructions.	                 
                  ;Version :1.1  
                                   
000087 e308              LDI            TEMP,0B00111000                      
000088 bb08              OUT            PORTB,TEMP
000089 940e 003f         CALL           LCD_ENABLE
00008b e041              LDI            LCD_DELAYTIME,1
00008c 940e 0060         CALL           LCD_DELAY
                           
00008e e00f              LDI            TEMP,0B00001111          
00008f bb08              OUT            PORTB,TEMP
000090 940e 003f         CALL           LCD_ENABLE
000092 940e 0030         CALL           LCD_BUSYFLAG                                
                         
000094 e006              LDI            TEMP,0B00000110            
000095 bb08              OUT            PORTB,TEMP
000096 9508              RET 	  
                 ;=============================================================================
                 LOADBYTE:                        
                 ;=============================================================================
                 ; Description:This Application use the Load Program Memory (LPM)
                 ;             instruction.Loads the string "message" from 
                 ;             program memory byte by byte.      
                 ; Input      :
                 ; Output     :  
                 ; Note       :                   
                 ;Version     :1.2 don som program cleaning on the sub. To make sub more availabl 
                 
000097 95c8              LPM			     	                     
000098 2000              TST	               R0
000099 f029      	    BREQ	           RETURN
00009a 940e 00a0         CALL               LCD_OUT
00009c 9631      	    ADIW	           ZL,1			             
00009d 940e 0097 	    CALL	           LOADBYTE
00009f 9508      RETURN: RET
                 ;=============================================================================
                 LCD_OUT:                    
                 ;=============================================================================
                 ; Description: send char to LCD
                 ; Input      :
                 ; Output     :  
                 ; Note       :remov from loadbyte to stand a lone sub for global lcd use                  
                 ;Version     :1.1  
                 
0000a0 ba08              OUT 	           PORTB,R0		             
0000a1 940e 0044         CALL               LCD_WRITE_COMMAND
0000a3 940e 0030 	    CALL               LCD_BUSYFLAG
0000a5 e041      	    LDI                LCD_DELAYTIME,1
0000a6 940e 0060         CALL               LCD_DELAY
0000a8 9508      	    RET	
                 		
                 
                 ;===================================END OF LCD===============================
                 ;.INCLUDE"M16DEF.INC"
                 ;.DEF TEMP=R16              ;temporary variable
                 ;.DEF TEMP1=R17		        ;temporary variable
                 .def	KEYVALUE =R22       ;key value register
                 .def	KEYVALUE2=R23       ;key value register
                 .equ	col1	 =0b11101111	
                 .equ	col2     =0b11011111	
                 .equ	col3     =0b10111111	
                 .equ	col4     =0b01111111		           
                 ;=============================================================================
                 KEY_SCAN:              
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       : Pc0,1,2,3 inputs, Pc4,5,6,7 outputs enable internal pull-ups on Pc0-Pc4                 
                 ;Version     :1.0 
                 
0000a9 ef00      		ldi	    temp,0b11110000 	                       
0000aa bb04      		out	    DDRC,temp
0000ab e00f      		ldi	    temp,0b00001111	                        	
0000ac 940e 012c 		CALL    OUT_PORTC
                 
                 Loopagain:
                     	
0000ae e360      		LDI     KEYVALUE,$30        
0000af e370      		LDI     KEYVALUE2,$30		
                 		
0000b0 940e 0012 		CALL	lcd_clr
0000b2 940e 0071         CALL    LCD_INIT_8BIT
                 		
0000b4 e0f2      		LDI	    ZH,high(2*message1)	                
0000b5 e8ee      		LDI	    ZL,low(2*message1)              	 
0000b6 940e 0097 		CALL	loadbyte       
                 ;=============================================================================
                 check_keys:                    ; Enable column 1                  
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                
                 ;Version     :1.0 
0000b8 ee0f      		LDI 	temp,col1 		
0000b9 940e 012c 		CALL    OUT_PORTC
                 
0000bb 9998      		sbic 	PINC,PC0		
0000bc c004      		rjmp 	key2			
0000bd e367      		ldi 	KEYVALUE,$37
0000be 940e 012d         CALL    DELAY_5Ms	
0000c0 c070      		rjmp	KEY_TO_LCD	
                 
0000c1 9999      key2:	sbic 	PINC,PC1		
0000c2 c004      		rjmp 	key3			
0000c3 e364      		ldi	    KEYVALUE,$34
0000c4 940e 012d 		CALL    DELAY_5Ms		
0000c6 c06a      		rjmp	KEY_TO_LCD		
                 
0000c7 999a      key3:	sbic 	PINC,PC2		
0000c8 c004      		rjmp 	key4			
0000c9 e361      		ldi 	KEYVALUE,$31	
0000ca 940e 012d 		CALL    DELAY_5Ms	
0000cc c064      		rjmp	KEY_TO_LCD	
                 
0000cd 999b      key4:	sbic 	PINC,PC3		
0000ce c005      		rjmp 	key5			
0000cf e360      		ldi     KEYVALUE,$30
0000d0 e371      		ldi	    KEYVALUE2,$31	
0000d1 940e 012d 		CALL    DELAY_5Ms	
0000d3 c05d      		rjmp	KEY_TO_LCD	
                 ;=============================================================================
                 ;check_keys:                     Enable column 2                    
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                    
                 ;Version     :1.0 
                 
0000d4 ed0f      key5:   ldi 	temp,col2 		 
0000d5 940e 012c 		CALL    OUT_PORTC
                 
0000d7 9998      		sbic 	PINC,PC0		
0000d8 c004      		rjmp 	key6			 
0000d9 e368      		ldi 	KEYVALUE,$38
0000da 940e 012d 		CALL    DELAY_5Ms	
0000dc c054      		rjmp	KEY_TO_LCD
                 
0000dd 9999      key6:   sbic 	PINC,PC1		
0000de c004      		rjmp 	key7			 
0000df e365      		ldi     KEYVALUE,$35
0000e0 940e 012d 		CALL    DELAY_5Ms		 
0000e2 c04e      		rjmp	KEY_TO_LCD
                 
0000e3 999a      key7:	sbic 	PINC,PC2		
0000e4 c004      		rjmp 	key8			 
0000e5 e362      		ldi     KEYVALUE,$32	
0000e6 940e 012d 		CALL    DELAY_5Ms		 
0000e8 c048      		rjmp	KEY_TO_LCD
                 
0000e9 999b      key8:   sbic 	PINC,PC3		
0000ea c004      		rjmp 	key9			 
0000eb e360      		ldi     KEYVALUE,$30
0000ec 940e 012d 		CALL    DELAY_5Ms		 
0000ee c042      		rjmp	KEY_TO_LCD
                 ;=============================================================================
                 ;check_keys:                     Enable column 3                   
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                  
                 ;Version     :1.0 
                 
0000ef eb0f      key9:   LDI     temp,col3	
0000f0 940e 012c 		CALL    OUT_PORTC
                 
0000f2 9998      		sbic 	PINC,PC0		
0000f3 c004      		rjmp 	key10			 
0000f4 e369      		ldi 	KEYVALUE,$39
0000f5 940e 012d 		CALL    DELAY_5Ms 
0000f7 c039      		rjmp	KEY_TO_LCD
                 
0000f8 9999      key10:  sbic 	PINC,PC1		
0000f9 c005      		rjmp 	key11			 
0000fa e366      		ldi     KEYVALUE,$36		 
0000fb e370      		ldi     KEYVALUE2,$30
0000fc 940e 012d         CALL    DELAY_5Ms
0000fe c032      		rjmp	KEY_TO_LCD
                 
0000ff 999a      key11:  sbic 	PINC,PC2		
000100 c005      		rjmp 	key12			 
000101 e363      		ldi     KEYVALUE,$33		 
000102 e370      		ldi     KEYVALUE2,$30
000103 940e 012d         CALL    DELAY_5Ms
000105 c02b      		rjmp	KEY_TO_LCD
                 
000106 999b      key12:  sbic 	PINC,PC3		
000107 c005      		rjmp 	key13			 
000108 e361      		ldi     KEYVALUE,$31		 
000109 e371      		ldi     KEYVALUE2,$31
00010a 940e 012d         CALL    DELAY_5Ms
00010c c024      		rjmp	KEY_TO_LCD
                 ;=============================================================================
                 ;;check_keys:                     Enable column 4                    
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                   
                 ;Version     :1.0 
                 
00010d e70f      key13:	ldi     temp,col4	
00010e 940e 012c 		CALL    OUT_PORTC
                 
000110 9998      		sbic 	PINC,PC0	
000111 c005      		rjmp 	key14			 
000112 e362      		ldi     KEYVALUE,$32		 
000113 e371      		ldi     KEYVALUE2,$31
000114 940e 012d         CALL    DELAY_5Ms
000116 c01a      		rjmp	KEY_TO_LCD
                 
000117 9999      key14:  sbic 	PINC,PC1		
000118 c005      		rjmp 	key15			 
000119 e363      		ldi     KEYVALUE,$33		 
00011a e371      		ldi     KEYVALUE2,$31
00011b 940e 012d         CALL    DELAY_5Ms
00011d c013      		rjmp	KEY_TO_LCD
                 
00011e 999a      key15:  sbic 	PINC,PC2		
00011f c005      		rjmp 	key16			 
000120 e364      		ldi     KEYVALUE,$34		 
000121 e371      		ldi     KEYVALUE2,$31
000122 940e 012d 		CALL    DELAY_5Ms
000124 c00c      		rjmp	KEY_TO_LCD
                 
000125 999b      key16:  sbic 	PINC,PC3		
000126 cf91      		rjmp 	check_keys		 
000127 e365      		ldi     KEYVALUE,$35		 
000128 e371              ldi     KEYVALUE2,$31
000129 940e 012d 		CALL    DELAY_5Ms
00012b c005      		rjmp	KEY_TO_LCD
                 ;=============================================================================
                 ;small sub that is made for save codespace in key_scan moduel                   
                 ;=============================================================================
                 ; Description:in stet off write the same code many times i make a sud call for it
                 ; Input      :
                 ; Output     :  
                 ; Note       :                 
                 ;Version     :1.0 
                        
                 OUT_PORTC:
00012c bb05                OUT     PORTC,temp
00012d e045      DELAY_5Ms:LDI     LCD_DELAYTIME,5
00012e 940e 0060           CALL    LCD_DELAY
000130 9508      		  RET
                 ;=============================================================================
                 KEY_TO_LCD:                   
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                  
                 ;Version     :1.0 
                 
000131 940e 0012 		call 	lcd_clr	   
000133 940e 0071         CALL    LCD_INIT_8BIT
                 		
000135 e0f2      		ldi     ZH,high(2*message2)	
000136 e9ec      		ldi     ZL,low(2*message2)	
000137 940e 0097 		call	loadbyte		
                 ;=============================================================================
                 ;                    
                 ;=============================================================================
                 ; Description:copy the register to lcd register and then call lcd_out.
                 ; Input      :
                 ; Output     :  
                 ; Note       :                  
                 ;Version     :1.0 
                 		
000139 2e07      		MOV     R0,KEYVALUE2
00013a 940e 00a0  		CALL	lcd_OUT
                 		
00013c 2e06      		MOV     R0,KEYVALUE
00013d 940e 00a0 		CALL	lcd_OUT
                 		
00013f ef4f      		LDI     LCD_DELAYTIME,255
000140 940e 0060         CALL    LCD_DELAY       
000142 ef4f      		LDI     LCD_DELAYTIME,255
000143 940e 0060         CALL    LCD_DELAY       	
                 				
000145 940e 00ae 		CALL	Loopagain
                 ;=============================================================================
                 ;LCD MESSAGE                    
                 ;=============================================================================
                 ; Description:
                 ; Input      :
                 ; Output     :  
                 ; Note       :                   
                 ;Version     : 
                 
                 message1:
000147 7250
000148 7365
000149 2073
00014a 6e61
00014b 2079
00014c 656b
00014d 0079      .db	"Press any key",0
                 
                 message2:
00014e 6f59
00014f 2075
000150 7270
000151 7365
000152 6573
000153 0064      .db	"You pressed",0 
                 
                 ;===================================END OF KEYBOARD SCAN============================


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  44 r17:   3 r18:   0 r19:   0 r20:  13 r21:   2 r22:  18 r23:  10 
r24:   0 r25:   4 r26:   0 r27:   0 r28:   0 r29:   0 r30:   3 r31:   2 
x  :   0 y  :   0 z  :   0 
Registers used: 10 out of 35 (28.6%)

ATmega16 instruction use summary:
adc   :   0 add   :   0 adiw  :   1 and   :   0 andi  :   0 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   1 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   2 brpl  :   0 
brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :  69 cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :   3 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 
dec   :   2 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   0 jmp   :   0 ld    :   0 ldd   :   0 
ldi   :  66 lds   :   0 lpm   :   1 lsl   :   0 lsr   :   0 mov   :   2 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  17 
or    :   0 ori   :   0 out   :  24 pop   :   0 push  :   0 rcall :   0 
ret   :  14 reti  :   0 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   2 sbic  :  16 sbis  :   0 sbiw  :   0 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   0 std   :   0 sts   :   0 sub   :   0 subi  :   0 
swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 19 out of 111 (17.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002a8    654     26    680   16384   4.2%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
