
NikonRelease.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lock         00000001  00830000  00830000  0000025b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007d  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000172  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d7  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000056  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	9d c0       	rjmp	.+314    	; 0x140 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ec       	ldi	r30, 0xC4	; 196
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 36       	cpi	r26, 0x60	; 96
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	26 d0       	rcall	.+76     	; 0x9e <main>
  52:	b6 c0       	rjmp	.+364    	; 0x1c0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Wait_Next_Nikon_1Min>:
			Wait_Next_Nikon_command();
	}
}

void Wait_Next_Nikon_1Min(void)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	c0 e0       	ldi	r28, 0x00	; 0
  5c:	d0 e0       	ldi	r29, 0x00	; 0
int f;
for(f=0;f<952;f++)
	{
		if(PINB&0x01)
  5e:	b0 99       	sbic	0x16, 0	; 22
			Wait_Next_Nikon_command();
  60:	9e d0       	rcall	.+316    	; 0x19e <Wait_Next_Nikon_command>
}

void Wait_Next_Nikon_1Min(void)
{
int f;
for(f=0;f<952;f++)
  62:	21 96       	adiw	r28, 0x01	; 1
  64:	83 e0       	ldi	r24, 0x03	; 3
  66:	c8 3b       	cpi	r28, 0xB8	; 184
  68:	d8 07       	cpc	r29, r24
  6a:	c9 f7       	brne	.-14     	; 0x5e <Wait_Next_Nikon_1Min+0x8>
	{
		if(PINB&0x01)
			Wait_Next_Nikon_command();
	}
}
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <Wait_Next_Nikon_10sec>:
	}
}


void Wait_Next_Nikon_10sec(void)
{
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	c0 e0       	ldi	r28, 0x00	; 0
  78:	d0 e0       	ldi	r29, 0x00	; 0
int f;
for(f=0;f<159;f++)
	{
		if(PINB&0x01)
  7a:	b0 99       	sbic	0x16, 0	; 22
			Wait_Next_Nikon_command();
  7c:	90 d0       	rcall	.+288    	; 0x19e <Wait_Next_Nikon_command>


void Wait_Next_Nikon_10sec(void)
{
int f;
for(f=0;f<159;f++)
  7e:	21 96       	adiw	r28, 0x01	; 1
  80:	cf 39       	cpi	r28, 0x9F	; 159
  82:	d1 05       	cpc	r29, r1
  84:	d1 f7       	brne	.-12     	; 0x7a <Wait_Next_Nikon_10sec+0x8>
	{
		if(PINB&0x01)
			Wait_Next_Nikon_command();
	}
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <Wait_Next_Nikon_1sec>:
// LB_MODE_3 = Further programming and verification of the Flash and EEPROM is disabled

LOCKBITS = (LB_MODE_1); 

void Wait_Next_Nikon_1sec(void)
{
  8c:	1f 93       	push	r17
  8e:	10 e0       	ldi	r17, 0x00	; 0
unsigned char f;
for(f=0;f<16;f++)
	{
		if(PINB&0x01)
  90:	b0 99       	sbic	0x16, 0	; 22
			Wait_Next_Nikon_command();
  92:	85 d0       	rcall	.+266    	; 0x19e <Wait_Next_Nikon_command>
LOCKBITS = (LB_MODE_1); 

void Wait_Next_Nikon_1sec(void)
{
unsigned char f;
for(f=0;f<16;f++)
  94:	1f 5f       	subi	r17, 0xFF	; 255
  96:	10 31       	cpi	r17, 0x10	; 16
  98:	d9 f7       	brne	.-10     	; 0x90 <Wait_Next_Nikon_1sec+0x4>
	{
		if(PINB&0x01)
			Wait_Next_Nikon_command();
	}
}
  9a:	1f 91       	pop	r17
  9c:	08 95       	ret

0000009e <main>:
			Wait_Next_Nikon_command();
	}
}

int main()
{
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
unsigned char  port;
unsigned int MaxNr;
PORTB	=	0x0F;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	88 bb       	out	0x18, r24	; 24
DDRB	=	0x10;
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	87 bb       	out	0x17, r24	; 23
MCUCR	= 	( 1 << SE ) | (1 << SM1) ;  // Sleep Enable Power-down
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	85 bf       	out	0x35, r24	; 53
TCCR0B  = 	( 1 << CS00) ; 				// clkI/O/(No prescaling)
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	83 bf       	out	0x33, r24	; 51
GIMSK 	= 	( 1 << PCIE) ;				//	Pin Change Interrupt Enable
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	8b bf       	out	0x3b, r24	; 59

for(;;)
	{
		PORTB	=	0x0F;
  be:	0f e0       	ldi	r16, 0x0F	; 15
		DDRB	=	0x10; // Set Pin as output 
  c0:	90 e1       	ldi	r25, 0x10	; 16
  c2:	e9 2e       	mov	r14, r25
		PCMSK 	= 	0x0f; // Pinchage interupt on PB0->PB4
		
	    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
		GIFR	=   (1 << PCIF );
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	f8 2e       	mov	r15, r24
TCCR0B  = 	( 1 << CS00) ; 				// clkI/O/(No prescaling)
GIMSK 	= 	( 1 << PCIE) ;				//	Pin Change Interrupt Enable

for(;;)
	{
		PORTB	=	0x0F;
  c8:	08 bb       	out	0x18, r16	; 24
		DDRB	=	0x10; // Set Pin as output 
  ca:	e7 ba       	out	0x17, r14	; 23
		PCMSK 	= 	0x0f; // Pinchage interupt on PB0->PB4
  cc:	05 bb       	out	0x15, r16	; 21
		
	    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	87 7e       	andi	r24, 0xE7	; 231
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	85 bf       	out	0x35, r24	; 53
		GIFR	=   (1 << PCIF );
  d6:	fa be       	out	0x3a, r15	; 58
		sei();
  d8:	78 94       	sei
        sleep_enable();        
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	85 bf       	out	0x35, r24	; 53
        sleep_cpu();
  e0:	88 95       	sleep
		do
		{
			port=PINB;
  e2:	86 b3       	in	r24, 0x16	; 22
			if(!(port&0x01))
  e4:	18 2f       	mov	r17, r24
  e6:	80 fd       	sbrc	r24, 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x50>
				{
				Nikon_Shutter_Release();
  ea:	5e d0       	rcall	.+188    	; 0x1a8 <Nikon_Shutter_Release>
				Wait_Next_Nikon_command();
  ec:	58 d0       	rcall	.+176    	; 0x19e <Wait_Next_Nikon_command>
				}
			if(!(port&0x02))
  ee:	11 fd       	sbrc	r17, 1
  f0:	0a c0       	rjmp	.+20     	; 0x106 <main+0x68>
  f2:	c0 e7       	ldi	r28, 0x70	; 112
  f4:	d7 e1       	ldi	r29, 0x17	; 23
  f6:	03 c0       	rjmp	.+6      	; 0xfe <main+0x60>
				{
				MaxNr=6000; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
						{
						MaxNr--;
  f8:	21 97       	sbiw	r28, 0x01	; 1
						Nikon_Shutter_Release();
  fa:	56 d0       	rcall	.+172    	; 0x1a8 <Nikon_Shutter_Release>
						Wait_Next_Nikon_1sec();
  fc:	c7 df       	rcall	.-114    	; 0x8c <Wait_Next_Nikon_1sec>
				Wait_Next_Nikon_command();
				}
			if(!(port&0x02))
				{
				MaxNr=6000; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
  fe:	b0 9b       	sbis	0x16, 0	; 22
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x68>
 102:	20 97       	sbiw	r28, 0x00	; 0
 104:	c9 f7       	brne	.-14     	; 0xf8 <main+0x5a>
						MaxNr--;
						Nikon_Shutter_Release();
						Wait_Next_Nikon_1sec();
						}
				}
			if(!(port&0x04))
 106:	12 fd       	sbrc	r17, 2
 108:	0a c0       	rjmp	.+20     	; 0x11e <main+0x80>
 10a:	c8 e5       	ldi	r28, 0x58	; 88
 10c:	d2 e0       	ldi	r29, 0x02	; 2
 10e:	03 c0       	rjmp	.+6      	; 0x116 <main+0x78>
				{				
				MaxNr=600; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
						{
						MaxNr--;
 110:	21 97       	sbiw	r28, 0x01	; 1
						Nikon_Shutter_Release();
 112:	4a d0       	rcall	.+148    	; 0x1a8 <Nikon_Shutter_Release>
						Wait_Next_Nikon_10sec();
 114:	ae df       	rcall	.-164    	; 0x72 <Wait_Next_Nikon_10sec>
						}
				}
			if(!(port&0x04))
				{				
				MaxNr=600; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
 116:	b0 9b       	sbis	0x16, 0	; 22
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x80>
 11a:	20 97       	sbiw	r28, 0x00	; 0
 11c:	c9 f7       	brne	.-14     	; 0x110 <main+0x72>
						MaxNr--;
						Nikon_Shutter_Release();
						Wait_Next_Nikon_10sec();
						}
				}
			if(!(port&0x08))
 11e:	13 fd       	sbrc	r17, 3
 120:	0a c0       	rjmp	.+20     	; 0x136 <main+0x98>
 122:	cc e3       	ldi	r28, 0x3C	; 60
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x90>
				{
				MaxNr=60; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
						{
						MaxNr--;
 128:	21 97       	sbiw	r28, 0x01	; 1
						Nikon_Shutter_Release();
 12a:	3e d0       	rcall	.+124    	; 0x1a8 <Nikon_Shutter_Release>
						Wait_Next_Nikon_1Min();
 12c:	94 df       	rcall	.-216    	; 0x56 <Wait_Next_Nikon_1Min>
						}
				}
			if(!(port&0x08))
				{
				MaxNr=60; // max 60 min on
					while( ((PINB&0x01)==0x01) && (MaxNr!=0))
 12e:	b0 9b       	sbis	0x16, 0	; 22
 130:	02 c0       	rjmp	.+4      	; 0x136 <main+0x98>
 132:	20 97       	sbiw	r28, 0x00	; 0
 134:	c9 f7       	brne	.-14     	; 0x128 <main+0x8a>
						MaxNr--;
						Nikon_Shutter_Release();
						Wait_Next_Nikon_1Min();
						}
				}
		} while((PINB & 0x0f)!= 0xf);
 136:	86 b3       	in	r24, 0x16	; 22
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8f 30       	cpi	r24, 0x0F	; 15
 13c:	91 f6       	brne	.-92     	; 0xe2 <main+0x44>
 13e:	c4 cf       	rjmp	.-120    	; 0xc8 <main+0x2a>

00000140 <__vector_2>:
 140:	18 95       	reti

00000142 <Togel_ir>:
 142:	c4 9a       	sbi	0x18, 4	; 24
	...
 150:	c4 98       	cbi	0x18, 4	; 24
 152:	00 00       	nop
 154:	00 00       	nop
 156:	00 00       	nop
 158:	c4 98       	cbi	0x18, 4	; 24
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <Wait_ir>:
 162:	c4 98       	cbi	0x18, 4	; 24
	...
 170:	c4 98       	cbi	0x18, 4	; 24
 172:	00 00       	nop
 174:	00 00       	nop
 176:	00 00       	nop
 178:	c4 98       	cbi	0x18, 4	; 24
 17a:	00 00       	nop
 17c:	00 00       	nop
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <Send500us>:
 182:	72 e1       	ldi	r23, 0x12	; 18

00000184 <Send5>:
 184:	de df       	rcall	.-68     	; 0x142 <Togel_ir>
 186:	71 50       	subi	r23, 0x01	; 1
 188:	e9 f7       	brne	.-6      	; 0x184 <Send5>
 18a:	08 95       	ret

0000018c <Send_n_500us>:
 18c:	fa df       	rcall	.-12     	; 0x182 <Send500us>
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	e9 f7       	brne	.-6      	; 0x18c <Send_n_500us>
 192:	08 95       	ret

00000194 <Wait500us>:
 194:	72 e1       	ldi	r23, 0x12	; 18

00000196 <Wait1>:
 196:	e5 df       	rcall	.-54     	; 0x162 <Wait_ir>
 198:	71 50       	subi	r23, 0x01	; 1
 19a:	e9 f7       	brne	.-6      	; 0x196 <Wait1>
 19c:	08 95       	ret

0000019e <Wait_Next_Nikon_command>:
 19e:	8e e7       	ldi	r24, 0x7E	; 126

000001a0 <Wait_n_500us>:
 1a0:	f9 df       	rcall	.-14     	; 0x194 <Wait500us>
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <Wait_n_500us>
 1a6:	08 95       	ret

000001a8 <Nikon_Shutter_Release>:
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	f0 df       	rcall	.-32     	; 0x18c <Send_n_500us>
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	f8 df       	rcall	.-16     	; 0x1a0 <Wait_n_500us>
 1b0:	e8 df       	rcall	.-48     	; 0x182 <Send500us>
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	f5 df       	rcall	.-22     	; 0x1a0 <Wait_n_500us>
 1b6:	e5 df       	rcall	.-54     	; 0x182 <Send500us>
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	f2 df       	rcall	.-28     	; 0x1a0 <Wait_n_500us>
 1bc:	e2 df       	rcall	.-60     	; 0x182 <Send500us>
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
