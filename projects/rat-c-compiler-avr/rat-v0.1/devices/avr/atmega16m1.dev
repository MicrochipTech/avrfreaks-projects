device {
	name = "ATmega16M1"
	prog_size = 0x4000
	eeprom_size = 0x0200
	ram_size = 0x0400
	ram_start = 0x0100
}

interrupts {
	RESET = 0x00            ; External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset and JTAG AVR Reset
	ANACOMP0 = 0x01         ; Analog Comparator 0
	ANACOMP1 = 0x02         ; Analog Comparator 1
	ANACOMP2 = 0x03         ; Analog Comparator 2
	ANACOMP3 = 0x04         ; Analog Comparator 3
	PSC_FAULT = 0x05        ; PSC Fault
	PSC_EC = 0x06           ; PSC End of Cycle
	INT0 = 0x07             ; External Interrupt Request 0
	INT1 = 0x08             ; External Interrupt Request 1
	INT2 = 0x09             ; External Interrupt Request 2
	INT3 = 0x0a             ; External Interrupt Request 3
	TIMER1_CAPT = 0x0b      ; Timer/Counter1 Capture Event
	TIMER1_COMPA = 0x0c     ; Timer/Counter1 Compare Match A
	TIMER1_COMPB = 0x0d     ; Timer/Counter1 Compare Match B
	TIMER1_OVF = 0x0e       ; Timer1/Counter1 Overflow
	TIMER0_COMPA = 0x0f     ; Timer/Counter0 Compare Match A
	TIMER0_COMPB = 0x10     ; Timer/Counter0 Compare Match B
	TIMER0_OVF = 0x11       ; Timer/Counter0 Overflow
	CAN_INT = 0x12          ; CAN MOB, Burst, General Errors
	CAN_TOVF = 0x13         ; CAN Timer Overflow
	LIN_TC = 0x14           ; LIN Transfer Complete
	LIN_ERR = 0x15          ; LIN Error
	PCINT0 = 0x16           ; Pin Change Interrupt Request 0
	PCINT1 = 0x17           ; Pin Change Interrupt Request 1
	PCINT2 = 0x18           ; Pin Change Interrupt Request 2
	PCINT3 = 0x19           ; Pin Change Interrupt Request 3
	SPI_STC = 0x1a          ; SPI Serial Transfer Complete
	ADC = 0x1b              ; ADC Conversion Complete
	WDT = 0x1c              ; Watchdog Time-Out Interrupt
	EE_READY = 0x1d         ; EEPROM Ready
	SPM_READY = 0x1e        ; Store Program Memory Read
}

registers {
	PINB(0x03)              ; Port B Input Pins
	DDRB(0x04)              ; Port B Data Direction Register
	PORTB(0x05)             ; Port B Data Register
	PINC(0x06)              ; Port C Input Pins
	DDRC(0x07)              ; Port C Data Direction Register
	PORTC(0x08)             ; Port C Data Register
	PIND(0x09)              ; Port D Input Pins
	DDRD(0x0a)              ; Port D Data Direction Register
	PORTD(0x0b)             ; Port D Data Register
	PINE(0x0c)              ; Port E Input Pins
	DDRE(0x0d)              ; Port E Data Direction Register
	PORTE(0x0e)             ; Port E Data Register
	TIFR0(0x15) {           ; Timer/Counter0 Interrupt Flag register
		TOV0 = 0                ; Timer/Counter0 Overflow Flag
		OCF0A = 1               ; Timer/Counter0 Output Compare Flag 0A
		OCF0B = 2               ; Timer/Counter0 Output Compare Flag 0B
	}
	TIFR1(0x16) {           ; Timer/Counter Interrupt Flag register
		TOV1 = 0                ; Timer/Counter1 Overflow Flag
		OCF1A = 1               ; Output Compare Flag 1A
		OCF1B = 2               ; Output Compare Flag 1B
		ICF1 = 5                ; Input Capture Flag 1
	}
	GPIOR1(0x19) {          ; General Purpose IO Register 1
		GPIOR0 = 0              ; General Purpose IO Register 1 bis bit 0
		GPIOR1 = 1              ; General Purpose IO Register 1 bis bit 1
		GPIOR2 = 2              ; General Purpose IO Register 1 bis bit 2
		GPIOR3 = 3              ; General Purpose IO Register 1 bis bit 3
		GPIOR4 = 4              ; General Purpose IO Register 1 bis bit 4
		GPIOR5 = 5              ; General Purpose IO Register 1 bis bit 5
		GPIOR6 = 6              ; General Purpose IO Register 1 bis bit 6
		GPIOR7 = 7              ; General Purpose IO Register 1 bis bit 7
	}
	GPIOR2(0x1a) {          ; General Purpose IO Register 2
		GPIOR0 = 0              ; General Purpose IO Register 2 bis bit 0
		GPIOR1 = 1              ; General Purpose IO Register 2 bis bit 1
		GPIOR2 = 2              ; General Purpose IO Register 2 bis bit 2
		GPIOR3 = 3              ; General Purpose IO Register 2 bis bit 3
		GPIOR4 = 4              ; General Purpose IO Register 2 bis bit 4
		GPIOR5 = 5              ; General Purpose IO Register 2 bis bit 5
		GPIOR6 = 6              ; General Purpose IO Register 2 bis bit 6
		GPIOR7 = 7              ; General Purpose IO Register 2 bis bit 7
	}
	PCIFR(0x1b) {           ; Pin Change Interrupt Flag Register
		PCIF0 = 0               ; Pin Change Interrupt Flags bit 0
		PCIF1 = 1               ; Pin Change Interrupt Flags bit 1
		PCIF2 = 2               ; Pin Change Interrupt Flags bit 2
		PCIF3 = 3               ; Pin Change Interrupt Flags bit 3
	}
	EIFR(0x1c) {            ; External Interrupt Flag Register
		INTF0 = 0               ; External Interrupt Flags bit 0
		INTF1 = 1               ; External Interrupt Flags bit 1
		INTF2 = 2               ; External Interrupt Flags bit 2
		INTF3 = 3               ; External Interrupt Flags bit 3
	}
	EIMSK(0x1d) {           ; External Interrupt Mask Register
		INT0 = 0                ; External Interrupt Request 3 Enable bit 0
		INT1 = 1                ; External Interrupt Request 3 Enable bit 1
		INT2 = 2                ; External Interrupt Request 3 Enable bit 2
		INT3 = 3                ; External Interrupt Request 3 Enable bit 3
	}
	GPIOR0(0x1e) {          ; General Purpose IO Register 0
		GPIOR00 = 0             ; General Purpose IO Register 0 bit 0
		GPIOR01 = 1             ; General Purpose IO Register 0 bit 1
		GPIOR02 = 2             ; General Purpose IO Register 0 bit 2
		GPIOR03 = 3             ; General Purpose IO Register 0 bit 3
		GPIOR04 = 4             ; General Purpose IO Register 0 bit 4
		GPIOR05 = 5             ; General Purpose IO Register 0 bit 5
		GPIOR06 = 6             ; General Purpose IO Register 0 bit 6
		GPIOR07 = 7             ; General Purpose IO Register 0 bit 7
	}
	EECR(0x1f) {            ; EEPROM Control Register
		EERE = 0                ; EEPROM Read Enable
		EEWE = 1                ; EEPROM Write Enable
		EEMWE = 2               ; EEPROM Master Write Enable
		EERIE = 3               ; EEPROM Ready Interrupt Enable
		EEPM0 = 4               ; EEPROM Programming mode bit 0
		EEPM1 = 5               ; EEPROM Programming mode bit 1
	}
	EEDR(0x20) {            ; EEPROM Data Register
		EEDR0 = 0               ; EEPROM Data bits bit 0
		EEDR1 = 1               ; EEPROM Data bits bit 1
		EEDR2 = 2               ; EEPROM Data bits bit 2
		EEDR3 = 3               ; EEPROM Data bits bit 3
		EEDR4 = 4               ; EEPROM Data bits bit 4
		EEDR5 = 5               ; EEPROM Data bits bit 5
		EEDR6 = 6               ; EEPROM Data bits bit 6
		EEDR7 = 7               ; EEPROM Data bits bit 7
	}
	EEAR(0x21, 0x22) {      ; EEPROM Read/Write Access
		EEAR0 = 0               ; EEPROM Address bits bit 0
		EEAR1 = 1               ; EEPROM Address bits bit 1
		EEAR2 = 2               ; EEPROM Address bits bit 2
		EEAR3 = 3               ; EEPROM Address bits bit 3
		EEAR4 = 4               ; EEPROM Address bits bit 4
		EEAR5 = 5               ; EEPROM Address bits bit 5
		EEAR6 = 6               ; EEPROM Address bits bit 6
		EEAR7 = 7               ; EEPROM Address bits bit 7
		EEAR8 = 8               ; EEPROM Address bits bit 8
		EEAR9 = 9               ; EEPROM Address bits bit 9
	}
	GTCCR(0x23) {           ; General Timer/Counter Control Register
		PSR10 = 0               ; Prescaler Reset Timer/Counter1 and Timer/Counter0
		PSRSYNC = 0             ; Prescaler Reset Timer/Counter1 and Timer/Counter0
		ICPSEL1 = 6             ; Timer1 Input Capture Selection Bit
		TSM = 7                 ; Timer/Counter Synchronization Mode
	}
	TCCR0A(0x24) {          ; Timer/Counter  Control Register A
		WGM00 = 0               ; Waveform Generation Mode bit 0
		WGM01 = 1               ; Waveform Generation Mode bit 1
		COM0B0 = 4              ; Compare Output Mode, Fast PWm bit 0
		COM0B1 = 5              ; Compare Output Mode, Fast PWm bit 1
		COM0A0 = 6              ; Compare Output Mode, Phase Correct PWM Mode bit 0
		COM0A1 = 7              ; Compare Output Mode, Phase Correct PWM Mode bit 1
	}
	TCCR0B(0x25) {          ; Timer/Counter Control Register B
		CS00 = 0                ; Clock Select bit 0
		CS01 = 1                ; Clock Select bit 1
		CS02 = 2                ; Clock Select bit 2
		WGM02 = 3               ; 
		FOC0B = 6               ; Force Output Compare B
		FOC0A = 7               ; Force Output Compare A
	}
	TCNT0(0x26) {           ; Timer/Counter0
		TCNT00 = 0              ; Timer/Counter0 bits bit 0
		TCNT01 = 1              ; Timer/Counter0 bits bit 1
		TCNT02 = 2              ; Timer/Counter0 bits bit 2
		TCNT03 = 3              ; Timer/Counter0 bits bit 3
		TCNT04 = 4              ; Timer/Counter0 bits bit 4
		TCNT05 = 5              ; Timer/Counter0 bits bit 5
		TCNT06 = 6              ; Timer/Counter0 bits bit 6
		TCNT07 = 7              ; Timer/Counter0 bits bit 7
	}
	OCR0A(0x27) {           ; Timer/Counter0 Output Compare Register
		OCR0A0 = 0              ; Timer/Counter0 Output Compare bits bit 0
		OCR0A1 = 1              ; Timer/Counter0 Output Compare bits bit 1
		OCR0A2 = 2              ; Timer/Counter0 Output Compare bits bit 2
		OCR0A3 = 3              ; Timer/Counter0 Output Compare bits bit 3
		OCR0A4 = 4              ; Timer/Counter0 Output Compare bits bit 4
		OCR0A5 = 5              ; Timer/Counter0 Output Compare bits bit 5
		OCR0A6 = 6              ; Timer/Counter0 Output Compare bits bit 6
		OCR0A7 = 7              ; Timer/Counter0 Output Compare bits bit 7
	}
	OCR0B(0x28) {           ; Timer/Counter0 Output Compare Register
		OCR0B0 = 0              ; Timer/Counter0 Output Compare bits bit 0
		OCR0B1 = 1              ; Timer/Counter0 Output Compare bits bit 1
		OCR0B2 = 2              ; Timer/Counter0 Output Compare bits bit 2
		OCR0B3 = 3              ; Timer/Counter0 Output Compare bits bit 3
		OCR0B4 = 4              ; Timer/Counter0 Output Compare bits bit 4
		OCR0B5 = 5              ; Timer/Counter0 Output Compare bits bit 5
		OCR0B6 = 6              ; Timer/Counter0 Output Compare bits bit 6
		OCR0B7 = 7              ; Timer/Counter0 Output Compare bits bit 7
	}
	PLLCSR(0x29) {          ; PLL Control And Status Register
		PLOCK = 0               ; PLL Lock Detector
		PLLE = 1                ; PLL Enable
		PLLF = 2                ; PLL Factor
	}
	SPCR(0x2c) {            ; SPI Control Register
		SPR0 = 0                ; SPI Clock Rate Selects bit 0
		SPR1 = 1                ; SPI Clock Rate Selects bit 1
		CPHA = 2                ; Clock Phase
		CPOL = 3                ; Clock polarity
		MSTR = 4                ; Master/Slave Select
		DORD = 5                ; Data Order
		SPE = 6                 ; SPI Enable
		SPIE = 7                ; SPI Interrupt Enable
	}
	SPSR(0x2d) {            ; SPI Status Register
		SPI2X = 0               ; Double SPI Speed Bit
		WCOL = 6                ; Write Collision Flag
		SPIF = 7                ; SPI Interrupt Flag
	}
	SPDR(0x2e) {            ; SPI Data Register
		SPDR0 = 0               ; SPI Data bits bit 0
		SPDR1 = 1               ; SPI Data bits bit 1
		SPDR2 = 2               ; SPI Data bits bit 2
		SPDR3 = 3               ; SPI Data bits bit 3
		SPDR4 = 4               ; SPI Data bits bit 4
		SPDR5 = 5               ; SPI Data bits bit 5
		SPDR6 = 6               ; SPI Data bits bit 6
		SPDR7 = 7               ; SPI Data bits bit 7
	}
	ACSR(0x30) {            ; Analog Comparator Status Register
		AC0O = 0                ; Analog Comparator 0 Output Bit
		AC1O = 1                ; Analog Comparator 1 Output Bit
		AC2O = 2                ; Analog Comparator 2 Output Bit
		AC3O = 3                ; Analog Comparator 3 Output Bit
		AC0IF = 4               ; Analog Comparator 0 Interrupt Flag Bit
		AC1IF = 5               ; Analog Comparator 1  Interrupt Flag Bit
		AC2IF = 6               ; Analog Comparator 2 Interrupt Flag Bit
		AC3IF = 7               ; Analog Comparator 3 Interrupt Flag Bit
	}
	SMCR(0x33) {            ; Sleep Mode Control Register
		SE = 0                  ; Sleep Enable
		SM0 = 1                 ; Sleep Mode Select bits bit 0
		SM1 = 2                 ; Sleep Mode Select bits bit 1
		SM2 = 3                 ; Sleep Mode Select bits bit 2
	}
	MCUSR(0x34) {           ; MCU Status Register
		PORF = 0                ; Power-on reset flag
		EXTRF = 1               ; External Reset Flag
		BORF = 2                ; Brown-out Reset Flag
		WDRF = 3                ; Watchdog Reset Flag
	}
	MCUCR(0x35) {           ; MCU Control Register
		IVCE = 0                ; Interrupt Vector Change Enable
		IVSEL = 1               ; Interrupt Vector Select
		PUD = 4                 ; Pull-up disable
		SPIPS = 7               ; SPI Pin Select
	}
	SPMCSR(0x37) {          ; Store Program Memory Control Register
		SPMEN = 0               ; Store Program Memory Enable
		PGERS = 1               ; Page Erase
		PGWRT = 2               ; Page Write
		BLBSET = 3              ; Boot Lock Bit Set
		RWWSRE = 4              ; Read While Write section read enable
		SIGRD = 5               ; Signature Row Read
		RWWSB = 6               ; Read While Write Section Busy
		SPMIE = 7               ; SPM Interrupt Enable
	}
	SP(0x3d, 0x3e)          ; Stack Pointer 
	SREG(0x3f) {            ; Status Register
		C = 0                   ; Carry Flag
		Z = 1                   ; Zero Flag
		N = 2                   ; Negative Flag
		V = 3                   ; Two's Complement Overflow Flag
		S = 4                   ; Sign Bit
		H = 5                   ; Half Carry Flag
		T = 6                   ; Bit Copy Storage
		I = 7                   ; Global Interrupt Enable
	}
	WDTCSR(0x60) {          ; Watchdog Timer Control Register
		WDP0 = 0                ; Watchdog Timer Prescaler Bits bit 0
		WDP1 = 1                ; Watchdog Timer Prescaler Bits bit 1
		WDP2 = 2                ; Watchdog Timer Prescaler Bits bit 2
		WDE = 3                 ; Watch Dog Enable
		WDCE = 4                ; Watchdog Change Enable
		WDP3 = 5                ; Watchdog Timer Prescaler Bits bit 3
		WDIE = 6                ; Watchdog Timeout Interrupt Enable
		WDIF = 7                ; Watchdog Timeout Interrupt Flag
	}
	CLKPR(0x61) {           ; 
		CLKPS0 = 0              ; 
		CLKPS1 = 1              ; 
		CLKPS2 = 2              ; 
		CLKPS3 = 3              ; 
		CLKPCE = 7              ; 
	}
	PRR(0x64) {             ; Power Reduction Register
		PRADC = 0               ; Power Reduction ADC
		PRLIN = 1               ; Power Reduction LIN UART
		PRSPI = 2               ; Power Reduction Serial Peripheral Interface
		PRTIM0 = 3              ; Power Reduction Timer/Counter0
		PRTIM1 = 4              ; Power Reduction Timer/Counter1
		PRPSC = 5               ; Power Reduction PSC
		PRCAN = 6               ; Power Reduction CAN
	}
	OSCCAL(0x66) {          ; Oscillator Calibration Value
		OSCCAL0 = 0             ; Oscillator Calibration  bit 0
		OSCCAL1 = 1             ; Oscillator Calibration  bit 1
		OSCCAL2 = 2             ; Oscillator Calibration  bit 2
		OSCCAL3 = 3             ; Oscillator Calibration  bit 3
		OSCCAL4 = 4             ; Oscillator Calibration  bit 4
		OSCCAL5 = 5             ; Oscillator Calibration  bit 5
		OSCCAL6 = 6             ; Oscillator Calibration  bit 6
		OSCCAL7 = 7             ; Oscillator Calibration  bit 7
	}
	PCICR(0x68) {           ; Pin Change Interrupt Control Register
		PCIE0 = 0               ; Pin Change Interrupt Enables bit 0
		PCIE1 = 1               ; Pin Change Interrupt Enables bit 1
		PCIE2 = 2               ; Pin Change Interrupt Enables bit 2
		PCIE3 = 3               ; Pin Change Interrupt Enables bit 3
	}
	EICRA(0x69) {           ; External Interrupt Control Register
		ISC00 = 0               ; External Interrupt Sense Control 0 Bits bit 0
		ISC01 = 1               ; External Interrupt Sense Control 0 Bits bit 1
		ISC10 = 2               ; External Interrupt Sense Control 1 Bits bit 0
		ISC11 = 3               ; External Interrupt Sense Control 1 Bits bit 1
		ISC20 = 4               ; External Interrupt Sense Control Bit bit 0
		ISC21 = 5               ; External Interrupt Sense Control Bit bit 1
		ISC30 = 6               ; External Interrupt Sense Control Bit bit 0
		ISC31 = 7               ; External Interrupt Sense Control Bit bit 1
	}
	PCMSK0(0x6a) {          ; Pin Change Mask Register 0
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
		PCINT3 = 3              ; Pin Change Enable Masks bit 3
		PCINT4 = 4              ; Pin Change Enable Masks bit 4
		PCINT5 = 5              ; Pin Change Enable Masks bit 5
		PCINT6 = 6              ; Pin Change Enable Masks bit 6
		PCINT7 = 7              ; Pin Change Enable Masks bit 7
	}
	PCMSK1(0x6b) {          ; Pin Change Mask Register 1
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
		PCINT3 = 3              ; Pin Change Enable Masks bit 3
		PCINT4 = 4              ; Pin Change Enable Masks bit 4
		PCINT5 = 5              ; Pin Change Enable Masks bit 5
		PCINT6 = 6              ; Pin Change Enable Masks bit 6
		PCINT7 = 7              ; Pin Change Enable Masks bit 7
	}
	PCMSK2(0x6c) {          ; Pin Change Mask Register 2
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
		PCINT3 = 3              ; Pin Change Enable Masks bit 3
		PCINT4 = 4              ; Pin Change Enable Masks bit 4
		PCINT5 = 5              ; Pin Change Enable Masks bit 5
		PCINT6 = 6              ; Pin Change Enable Masks bit 6
		PCINT7 = 7              ; Pin Change Enable Masks bit 7
	}
	PCMSK3(0x6d) {          ; Pin Change Mask Register 3
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
	}
	TIMSK0(0x6e) {          ; Timer/Counter0 Interrupt Mask Register
		TOIE0 = 0               ; Timer/Counter0 Overflow Interrupt Enable
		OCIE0A = 1              ; Timer/Counter0 Output Compare Match A Interrupt Enable
		OCIE0B = 2              ; Timer/Counter0 Output Compare Match B Interrupt Enable
	}
	TIMSK1(0x6f) {          ; Timer/Counter Interrupt Mask Register
		TOIE1 = 0               ; Timer/Counter1 Overflow Interrupt Enable
		OCIE1A = 1              ; Timer/Counter1 Output CompareA Match Interrupt Enable
		OCIE1B = 2              ; Timer/Counter1 Output CompareB Match Interrupt Enable
		ICIE1 = 5               ; Timer/Counter1 Input Capture Interrupt Enable
	}
	AMP0CSR(0x75) {         ; 
		AMP0TS0 = 0             ; 
		AMP0TS1 = 1             ; 
		AMP0TS2 = 2             ; 
		AMPCMP0 = 3             ; Amplifier 0 - Comparator 0 Connection
		AMP0G0 = 4              ; 
		AMP0G1 = 5              ; 
		AMP0IS = 6              ; 
		AMP0EN = 7              ; 
	}
	AMP1CSR(0x76) {         ; 
		AMP1TS0 = 0             ; 
		AMP1TS1 = 1             ; 
		AMP1TS2 = 2             ; 
		AMPCMP1 = 3             ; Amplifier 1 - Comparator 1 Connection
		AMP1G0 = 4              ; 
		AMP1G1 = 5              ; 
		AMP1IS = 6              ; 
		AMP1EN = 7              ; 
	}
	AMP2CSR(0x77) {         ; 
		AMP2TS0 = 0             ; 
		AMP2TS1 = 1             ; 
		AMP2TS2 = 2             ; 
		AMPCMP2 = 3             ; Amplifier 2 - Comparator 2 Connection
		AMP2G0 = 4              ; 
		AMP2G1 = 5              ; 
		AMP2IS = 6              ; 
		AMP2EN = 7              ; 
	}
	ADC(0x78, 0x79) {       ; ADC Data Register Bytes
		ADC0 = 0                ; ADC Data bits bit 0
		ADC1 = 1                ; ADC Data bits bit 1
		ADC2 = 2                ; ADC Data bits bit 2
		ADC3 = 3                ; ADC Data bits bit 3
		ADC4 = 4                ; ADC Data bits bit 4
		ADC5 = 5                ; ADC Data bits bit 5
		ADC6 = 6                ; ADC Data bits bit 6
		ADC7 = 7                ; ADC Data bits bit 7
		ADC8 = 8                ; ADC Data bits bit 8
		ADC9 = 9                ; ADC Data bits bit 9
		ADC10 = 10              ; ADC Data bits bit 10
		ADC11 = 11              ; ADC Data bits bit 11
		ADC12 = 12              ; ADC Data bits bit 12
		ADC13 = 13              ; ADC Data bits bit 13
		ADC14 = 14              ; ADC Data bits bit 14
		ADC15 = 15              ; ADC Data bits bit 15
	}
	ADCSRA(0x7a) {          ; The ADC Control and Status register
		ADPS0 = 0               ; ADC  Prescaler Select Bits bit 0
		ADPS1 = 1               ; ADC  Prescaler Select Bits bit 1
		ADPS2 = 2               ; ADC  Prescaler Select Bits bit 2
		ADIE = 3                ; ADC Interrupt Enable
		ADIF = 4                ; ADC Interrupt Flag
		ADATE = 5               ; ADC Auto Trigger Enable
		ADSC = 6                ; ADC Start Conversion
		ADEN = 7                ; ADC Enable
	}
	ADCSRB(0x7b) {          ; ADC Control and Status Register B
		ADTS0 = 0               ; ADC Auto Trigger Sources bit 0
		ADTS1 = 1               ; ADC Auto Trigger Sources bit 1
		ADTS2 = 2               ; ADC Auto Trigger Sources bit 2
		ADTS3 = 3               ; ADC Auto Trigger Sources bit 3
		AREFEN = 5              ; Analog Reference pin Enable
		ISRCEN = 6              ; Current Source Enable
		ADHSM = 7               ; ADC High Speed Mode
	}
	ADMUX(0x7c) {           ; The ADC multiplexer Selection Register
		MUX0 = 0                ; Analog Channel and Gain Selection Bits bit 0
		MUX1 = 1                ; Analog Channel and Gain Selection Bits bit 1
		MUX2 = 2                ; Analog Channel and Gain Selection Bits bit 2
		MUX3 = 3                ; Analog Channel and Gain Selection Bits bit 3
		MUX4 = 4                ; Analog Channel and Gain Selection Bits bit 4
		ADLAR = 5               ; Left Adjust Result
		REFS0 = 6               ; Reference Selection Bits bit 0
		REFS1 = 7               ; Reference Selection Bits bit 1
	}
	DIDR0(0x7e) {           ; Digital Input Disable Register 0
		ADC0D = 0               ; ADC0 Digital input Disable
		ADC1D = 1               ; ADC1 Digital input Disable
		ADC2D = 2               ; ADC2 Digital input Disable
		ADC3D = 3               ; ADC3 Digital input Disable
		ADC4D = 4               ; ADC4 Digital input Disable
		ADC5D = 5               ; ADC5 Digital input Disable
		ADC6D = 6               ; ADC6 Digital input Disable
		ADC7D = 7               ; ADC7 Digital input Disable
	}
	DIDR1(0x7f) {           ; Digital Input Disable Register 0
		ADC8D = 0               ; ADC8 Pin Digital input Disable
		ADC9D = 1               ; ADC9 Pin Digital input Disable
		ADC10D = 2              ; ADC10 Pin Digital input Disable
		AMP0ND = 3              ; AMP0N Pin Digital input Disable
		AMP0PD = 4              ; AMP0P Pin Digital input Disable
		ACMP0D = 5              ; ACMP0 Pin Digital input Disable
		AMP2PD = 6              ; AMP2P Pin Digital input Disable
	}
	TCCR1A(0x80) {          ; Timer/Counter1 Control Register A
		WGM10 = 0               ; Waveform Generation Mode bit 0
		WGM11 = 1               ; Waveform Generation Mode bit 1
		COM1B0 = 4              ; Compare Output Mode 1B, bits bit 0
		COM1B1 = 5              ; Compare Output Mode 1B, bits bit 1
		COM1A0 = 6              ; Compare Output Mode 1A, bits bit 0
		COM1A1 = 7              ; Compare Output Mode 1A, bits bit 1
	}
	TCCR1B(0x81) {          ; Timer/Counter1 Control Register B
		CS10 = 0                ; Prescaler source of Timer/Counter 1 bit 0
		CS11 = 1                ; Prescaler source of Timer/Counter 1 bit 1
		CS12 = 2                ; Prescaler source of Timer/Counter 1 bit 2
		WGM10 = 3               ; Waveform Generation Mode bit 0
		WGM11 = 4               ; Waveform Generation Mode bit 1
		ICES1 = 6               ; Input Capture 1 Edge Select
		ICNC1 = 7               ; Input Capture 1 Noise Canceler
	}
	TCCR1C(0x82) {          ; Timer/Counter1 Control Register C
		FOC1B = 6               ; 
		FOC1A = 7               ; 
	}
	TCNT1(0x84, 0x85) {     ; Timer/Counter1 Bytes
		TCNT10 = 0              ; Timer/Counter1 bits bit 0
		TCNT11 = 1              ; Timer/Counter1 bits bit 1
		TCNT12 = 2              ; Timer/Counter1 bits bit 2
		TCNT13 = 3              ; Timer/Counter1 bits bit 3
		TCNT14 = 4              ; Timer/Counter1 bits bit 4
		TCNT15 = 5              ; Timer/Counter1 bits bit 5
		TCNT16 = 6              ; Timer/Counter1 bits bit 6
		TCNT17 = 7              ; Timer/Counter1 bits bit 7
		TCNT18 = 8              ; Timer/Counter1 bits bit 8
		TCNT19 = 9              ; Timer/Counter1 bits bit 9
		TCNT110 = 10            ; Timer/Counter1 bits bit 10
		TCNT111 = 11            ; Timer/Counter1 bits bit 11
		TCNT112 = 12            ; Timer/Counter1 bits bit 12
		TCNT113 = 13            ; Timer/Counter1 bits bit 13
		TCNT114 = 14            ; Timer/Counter1 bits bit 14
		TCNT115 = 15            ; Timer/Counter1 bits bit 15
	}
	ICR1(0x86, 0x87) {      ; Timer/Counter1 Input Capture Register Bytes
		ICR10 = 0               ; Timer/Counter1 Input Capture bits bit 0
		ICR11 = 1               ; Timer/Counter1 Input Capture bits bit 1
		ICR12 = 2               ; Timer/Counter1 Input Capture bits bit 2
		ICR13 = 3               ; Timer/Counter1 Input Capture bits bit 3
		ICR14 = 4               ; Timer/Counter1 Input Capture bits bit 4
		ICR15 = 5               ; Timer/Counter1 Input Capture bits bit 5
		ICR16 = 6               ; Timer/Counter1 Input Capture bits bit 6
		ICR17 = 7               ; Timer/Counter1 Input Capture bits bit 7
		ICR18 = 8               ; Timer/Counter1 Input Capture bits bit 8
		ICR19 = 9               ; Timer/Counter1 Input Capture bits bit 9
		ICR110 = 10             ; Timer/Counter1 Input Capture bits bit 10
		ICR111 = 11             ; Timer/Counter1 Input Capture bits bit 11
		ICR112 = 12             ; Timer/Counter1 Input Capture bits bit 12
		ICR113 = 13             ; Timer/Counter1 Input Capture bits bit 13
		ICR114 = 14             ; Timer/Counter1 Input Capture bits bit 14
		ICR115 = 15             ; Timer/Counter1 Input Capture bits bit 15
	}
	OCR1A(0x88, 0x89) {     ; Timer/Counter1 Output Compare Register Bytes
		OCR1A0 = 0              ; Timer/Counter1 Output Compare bits bit 0
		OCR1A1 = 1              ; Timer/Counter1 Output Compare bits bit 1
		OCR1A2 = 2              ; Timer/Counter1 Output Compare bits bit 2
		OCR1A3 = 3              ; Timer/Counter1 Output Compare bits bit 3
		OCR1A4 = 4              ; Timer/Counter1 Output Compare bits bit 4
		OCR1A5 = 5              ; Timer/Counter1 Output Compare bits bit 5
		OCR1A6 = 6              ; Timer/Counter1 Output Compare bits bit 6
		OCR1A7 = 7              ; Timer/Counter1 Output Compare bits bit 7
		OCR1A8 = 8              ; Timer/Counter1 Output Compare bits bit 8
		OCR1A9 = 9              ; Timer/Counter1 Output Compare bits bit 9
		OCR1A10 = 10            ; Timer/Counter1 Output Compare bits bit 10
		OCR1A11 = 11            ; Timer/Counter1 Output Compare bits bit 11
		OCR1A12 = 12            ; Timer/Counter1 Output Compare bits bit 12
		OCR1A13 = 13            ; Timer/Counter1 Output Compare bits bit 13
		OCR1A14 = 14            ; Timer/Counter1 Output Compare bits bit 14
		OCR1A15 = 15            ; Timer/Counter1 Output Compare bits bit 15
	}
	OCR1B(0x8a, 0x8b) {     ; Timer/Counter1 Output Compare Register Bytes
		OCR1B0 = 0              ; Timer/Counter1 Output Compare bits bit 0
		OCR1B1 = 1              ; Timer/Counter1 Output Compare bits bit 1
		OCR1B2 = 2              ; Timer/Counter1 Output Compare bits bit 2
		OCR1B3 = 3              ; Timer/Counter1 Output Compare bits bit 3
		OCR1B4 = 4              ; Timer/Counter1 Output Compare bits bit 4
		OCR1B5 = 5              ; Timer/Counter1 Output Compare bits bit 5
		OCR1B6 = 6              ; Timer/Counter1 Output Compare bits bit 6
		OCR1B7 = 7              ; Timer/Counter1 Output Compare bits bit 7
		OCR1B8 = 8              ; Timer/Counter1 Output Compare bits bit 8
		OCR1B9 = 9              ; Timer/Counter1 Output Compare bits bit 9
		OCR1B10 = 10            ; Timer/Counter1 Output Compare bits bit 10
		OCR1B11 = 11            ; Timer/Counter1 Output Compare bits bit 11
		OCR1B12 = 12            ; Timer/Counter1 Output Compare bits bit 12
		OCR1B13 = 13            ; Timer/Counter1 Output Compare bits bit 13
		OCR1B14 = 14            ; Timer/Counter1 Output Compare bits bit 14
		OCR1B15 = 15            ; Timer/Counter1 Output Compare bits bit 15
	}
	DACON(0x90) {           ; DAC Control Register
		DAEN = 0                ; DAC Enable Bit
		DAOE = 1                ; DAC Output Enable
		DALA = 2                ; DAC Left Adjust
		DATS0 = 4               ; DAC Trigger Selection Bits bit 0
		DATS1 = 5               ; DAC Trigger Selection Bits bit 1
		DATS2 = 6               ; DAC Trigger Selection Bits bit 2
		DAATE = 7               ; DAC Auto Trigger Enable Bit
	}
	DAC(0x91, 0x92) {       ; DAC Data Register
		DAC0 = 0                ; DAC Data Register Bits bit 0
		DAC1 = 1                ; DAC Data Register Bits bit 1
		DAC2 = 2                ; DAC Data Register Bits bit 2
		DAC3 = 3                ; DAC Data Register Bits bit 3
		DAC4 = 4                ; DAC Data Register Bits bit 4
		DAC5 = 5                ; DAC Data Register Bits bit 5
		DAC6 = 6                ; DAC Data Register Bits bit 6
		DAC7 = 7                ; DAC Data Register Bits bit 7
		DAC8 = 8                ; DAC Data Register Bits bit 8
		DAC9 = 9                ; DAC Data Register Bits bit 9
		DAC10 = 10              ; DAC Data Register Bits bit 10
		DAC11 = 11              ; DAC Data Register Bits bit 11
		DAC12 = 12              ; DAC Data Register Bits bit 12
		DAC13 = 13              ; DAC Data Register Bits bit 13
		DAC14 = 14              ; DAC Data Register Bits bit 14
		DAC15 = 15              ; DAC Data Register Bits bit 15
	}
	AC0CON(0x94) {          ; Analog Comparator 0 Control Register
		AC0M0 = 0               ; Analog Comparator 0 Multiplexer Register bit 0
		AC0M1 = 1               ; Analog Comparator 0 Multiplexer Register bit 1
		AC0M2 = 2               ; Analog Comparator 0 Multiplexer Register bit 2
		ACCKSEL = 3             ; Analog Comparator Clock Select
		AC0IS0 = 4              ; Analog Comparator 0  Interrupt Select Bits bit 0
		AC0IS1 = 5              ; Analog Comparator 0  Interrupt Select Bits bit 1
		AC0IE = 6               ; Analog Comparator 0 Interrupt Enable Bit
		AC0EN = 7               ; Analog Comparator 0 Enable Bit
	}
	AC1CON(0x95) {          ; Analog Comparator 1 Control Register
		AC1M0 = 0               ; Analog Comparator 1 Multiplexer Register bit 0
		AC1M1 = 1               ; Analog Comparator 1 Multiplexer Register bit 1
		AC1M2 = 2               ; Analog Comparator 1 Multiplexer Register bit 2
		AC1ICE = 3              ; Analog Comparator 1 Interrupt Capture Enable Bit
		AC1IS0 = 4              ; Analog Comparator 1  Interrupt Select Bit bit 0
		AC1IS1 = 5              ; Analog Comparator 1  Interrupt Select Bit bit 1
		AC1IE = 6               ; Analog Comparator 1 Interrupt Enable Bit
		AC1EN = 7               ; Analog Comparator 1 Enable Bit
	}
	AC2CON(0x96) {          ; Analog Comparator 2 Control Register
		AC2M0 = 0               ; Analog Comparator 2 Multiplexer Register bit 0
		AC2M1 = 1               ; Analog Comparator 2 Multiplexer Register bit 1
		AC2M2 = 2               ; Analog Comparator 2 Multiplexer Register bit 2
		AC2IS0 = 4              ; Analog Comparator 2  Interrupt Select Bit bit 0
		AC2IS1 = 5              ; Analog Comparator 2  Interrupt Select Bit bit 1
		AC2IE = 6               ; Analog Comparator 2 Interrupt Enable Bit
		AC2EN = 7               ; Analog Comparator 2 Enable Bit
	}
	AC3CON(0x97) {          ; Analog Comparator 3 Control Register
		AC3M0 = 0               ; Analog Comparator 3 Multiplexer Register bit 0
		AC3M1 = 1               ; Analog Comparator 3 Multiplexer Register bit 1
		AC3M2 = 2               ; Analog Comparator 3 Multiplexer Register bit 2
		AC3IS0 = 4              ; Analog Comparator 3  Interrupt Select Bit bit 0
		AC3IS1 = 5              ; Analog Comparator 3  Interrupt Select Bit bit 1
		AC3IE = 6               ; Analog Comparator 3 Interrupt Enable Bit
		AC3EN = 7               ; Analog Comparator 3 Enable Bit
	}
	POCR0SA(0xa0, 0xa1) {   ; PSC Module 0 Output Compare SA Register
		POCR0SA0 = 0            ; PSC Output Compare SA bits bit 0
		POCR0SA1 = 1            ; PSC Output Compare SA bits bit 1
		POCR0SA2 = 2            ; PSC Output Compare SA bits bit 2
		POCR0SA3 = 3            ; PSC Output Compare SA bits bit 3
		POCR0SA4 = 4            ; PSC Output Compare SA bits bit 4
		POCR0SA5 = 5            ; PSC Output Compare SA bits bit 5
		POCR0SA6 = 6            ; PSC Output Compare SA bits bit 6
		POCR0SA7 = 7            ; PSC Output Compare SA bits bit 7
		POCR0SA8 = 8            ; PSC Output Compare SA bits bit 8
		POCR0SA9 = 9            ; PSC Output Compare SA bits bit 9
		POCR0SA10 = 10          ; PSC Output Compare SA bits bit 10
		POCR0SA11 = 11          ; PSC Output Compare SA bits bit 11
	}
	POCR0RA(0xa2, 0xa3) {   ; PSC Module 0 Output Compare RA Register
		POCR0RA0 = 0            ; PSC Output Compare RA bits bit 0
		POCR0RA1 = 1            ; PSC Output Compare RA bits bit 1
		POCR0RA2 = 2            ; PSC Output Compare RA bits bit 2
		POCR0RA3 = 3            ; PSC Output Compare RA bits bit 3
		POCR0RA4 = 4            ; PSC Output Compare RA bits bit 4
		POCR0RA5 = 5            ; PSC Output Compare RA bits bit 5
		POCR0RA6 = 6            ; PSC Output Compare RA bits bit 6
		POCR0RA7 = 7            ; PSC Output Compare RA bits bit 7
		POCR0RA8 = 8            ; PSC Output Compare RA bits bit 8
		POCR0RA9 = 9            ; PSC Output Compare RA bits bit 9
		POCR0RA10 = 10          ; PSC Output Compare RA bits bit 10
		POCR0RA11 = 11          ; PSC Output Compare RA bits bit 11
	}
	POCR0SB(0xa4, 0xa5) {   ; PSC Module 0 Output Compare SB Register
		POCR0SB0 = 0            ; PSC Output Compare SB bits bit 0
		POCR0SB1 = 1            ; PSC Output Compare SB bits bit 1
		POCR0SB2 = 2            ; PSC Output Compare SB bits bit 2
		POCR0SB3 = 3            ; PSC Output Compare SB bits bit 3
		POCR0SB4 = 4            ; PSC Output Compare SB bits bit 4
		POCR0SB5 = 5            ; PSC Output Compare SB bits bit 5
		POCR0SB6 = 6            ; PSC Output Compare SB bits bit 6
		POCR0SB7 = 7            ; PSC Output Compare SB bits bit 7
		POCR0SB8 = 8            ; PSC Output Compare SB bits bit 8
		POCR0SB9 = 9            ; PSC Output Compare SB bits bit 9
		POCR0SB10 = 10          ; PSC Output Compare SB bits bit 10
		POCR0SB11 = 11          ; PSC Output Compare SB bits bit 11
	}
	POCR1SA(0xa6, 0xa7) {   ; PSC Module 1 Output Compare SA Register
		POCR1SA0 = 0            ; PSC Output Compare SA bits bit 0
		POCR1SA1 = 1            ; PSC Output Compare SA bits bit 1
		POCR1SA2 = 2            ; PSC Output Compare SA bits bit 2
		POCR1SA3 = 3            ; PSC Output Compare SA bits bit 3
		POCR1SA4 = 4            ; PSC Output Compare SA bits bit 4
		POCR1SA5 = 5            ; PSC Output Compare SA bits bit 5
		POCR1SA6 = 6            ; PSC Output Compare SA bits bit 6
		POCR1SA7 = 7            ; PSC Output Compare SA bits bit 7
		POCR1SA8 = 8            ; PSC Output Compare SA bits bit 8
		POCR1SA9 = 9            ; PSC Output Compare SA bits bit 9
		POCR1SA10 = 10          ; PSC Output Compare SA bits bit 10
		POCR1SA11 = 11          ; PSC Output Compare SA bits bit 11
	}
	POCR1RA(0xa8, 0xa9) {   ; PSC Module 1 Output Compare RA Register
		POCR1RA0 = 0            ; PSC Output Compare RA bits bit 0
		POCR1RA1 = 1            ; PSC Output Compare RA bits bit 1
		POCR1RA2 = 2            ; PSC Output Compare RA bits bit 2
		POCR1RA3 = 3            ; PSC Output Compare RA bits bit 3
		POCR1RA4 = 4            ; PSC Output Compare RA bits bit 4
		POCR1RA5 = 5            ; PSC Output Compare RA bits bit 5
		POCR1RA6 = 6            ; PSC Output Compare RA bits bit 6
		POCR1RA7 = 7            ; PSC Output Compare RA bits bit 7
		POCR1RA8 = 8            ; PSC Output Compare RA bits bit 8
		POCR1RA9 = 9            ; PSC Output Compare RA bits bit 9
		POCR1RA10 = 10          ; PSC Output Compare RA bits bit 10
		POCR1RA11 = 11          ; PSC Output Compare RA bits bit 11
	}
	POCR1SB(0xaa, 0xab) {   ; PSC Module 1 Output Compare SB Register
		POCR1SB0 = 0            ; PSC Output Compare SB bits bit 0
		POCR1SB1 = 1            ; PSC Output Compare SB bits bit 1
		POCR1SB2 = 2            ; PSC Output Compare SB bits bit 2
		POCR1SB3 = 3            ; PSC Output Compare SB bits bit 3
		POCR1SB4 = 4            ; PSC Output Compare SB bits bit 4
		POCR1SB5 = 5            ; PSC Output Compare SB bits bit 5
		POCR1SB6 = 6            ; PSC Output Compare SB bits bit 6
		POCR1SB7 = 7            ; PSC Output Compare SB bits bit 7
		POCR1SB8 = 8            ; PSC Output Compare SB bits bit 8
		POCR1SB9 = 9            ; PSC Output Compare SB bits bit 9
		POCR1SB10 = 10          ; PSC Output Compare SB bits bit 10
		POCR1SB11 = 11          ; PSC Output Compare SB bits bit 11
	}
	POCR2SA(0xac, 0xad) {   ; PSC Module 2 Output Compare SA Register
		POCR2SA0 = 0            ; PSC Output Compare SA bits bit 0
		POCR2SA1 = 1            ; PSC Output Compare SA bits bit 1
		POCR2SA2 = 2            ; PSC Output Compare SA bits bit 2
		POCR2SA3 = 3            ; PSC Output Compare SA bits bit 3
		POCR2SA4 = 4            ; PSC Output Compare SA bits bit 4
		POCR2SA5 = 5            ; PSC Output Compare SA bits bit 5
		POCR2SA6 = 6            ; PSC Output Compare SA bits bit 6
		POCR2SA7 = 7            ; PSC Output Compare SA bits bit 7
		POCR2SA8 = 8            ; PSC Output Compare SA bits bit 8
		POCR2SA9 = 9            ; PSC Output Compare SA bits bit 9
		POCR2SA10 = 10          ; PSC Output Compare SA bits bit 10
		POCR2SA11 = 11          ; PSC Output Compare SA bits bit 11
	}
	POCR2RA(0xae, 0xaf) {   ; PSC Module 2 Output Compare RA Register
		POCR2RA0 = 0            ; PSC Output Compare RA bits bit 0
		POCR2RA1 = 1            ; PSC Output Compare RA bits bit 1
		POCR2RA2 = 2            ; PSC Output Compare RA bits bit 2
		POCR2RA3 = 3            ; PSC Output Compare RA bits bit 3
		POCR2RA4 = 4            ; PSC Output Compare RA bits bit 4
		POCR2RA5 = 5            ; PSC Output Compare RA bits bit 5
		POCR2RA6 = 6            ; PSC Output Compare RA bits bit 6
		POCR2RA7 = 7            ; PSC Output Compare RA bits bit 7
		POCR2RA8 = 8            ; PSC Output Compare RA bits bit 8
		POCR2RA9 = 9            ; PSC Output Compare RA bits bit 9
		POCR2RA10 = 10          ; PSC Output Compare RA bits bit 10
		POCR2RA11 = 11          ; PSC Output Compare RA bits bit 11
	}
	POCR2SB(0xb0, 0xb1) {   ; PSC Module 2 Output Compare SB Register
		POCR2SB0 = 0            ; PSC Output Compare SB bits bit 0
		POCR2SB1 = 1            ; PSC Output Compare SB bits bit 1
		POCR2SB2 = 2            ; PSC Output Compare SB bits bit 2
		POCR2SB3 = 3            ; PSC Output Compare SB bits bit 3
		POCR2SB4 = 4            ; PSC Output Compare SB bits bit 4
		POCR2SB5 = 5            ; PSC Output Compare SB bits bit 5
		POCR2SB6 = 6            ; PSC Output Compare SB bits bit 6
		POCR2SB7 = 7            ; PSC Output Compare SB bits bit 7
		POCR2SB8 = 8            ; PSC Output Compare SB bits bit 8
		POCR2SB9 = 9            ; PSC Output Compare SB bits bit 9
		POCR2SB10 = 10          ; PSC Output Compare SB bits bit 10
		POCR2SB11 = 11          ; PSC Output Compare SB bits bit 11
	}
	POCR_RB(0xb2, 0xb3) {   ; PSC Output Compare RB Register
		POCR_RB0 = 0            ; PSC Output Compare RB bits bit 0
		POCR_RB1 = 1            ; PSC Output Compare RB bits bit 1
		POCR_RB2 = 2            ; PSC Output Compare RB bits bit 2
		POCR_RB3 = 3            ; PSC Output Compare RB bits bit 3
		POCR_RB4 = 4            ; PSC Output Compare RB bits bit 4
		POCR_RB5 = 5            ; PSC Output Compare RB bits bit 5
		POCR_RB6 = 6            ; PSC Output Compare RB bits bit 6
		POCR_RB7 = 7            ; PSC Output Compare RB bits bit 7
		POCR_RB8 = 8            ; PSC Output Compare RB bits bit 8
		POCR_RB9 = 9            ; PSC Output Compare RB bits bit 9
		POCR_RB10 = 10          ; PSC Output Compare RB bits bit 10
		POCR_RB11 = 11          ; PSC Output Compare RB bits bit 11
	}
	PSYNC(0xb4) {           ; PSC Synchro Configuration
		PSYNC00 = 0             ; Selection of Synchronization Out for ADC bit 0
		PSYNC01 = 1             ; Selection of Synchronization Out for ADC bit 1
		PSYNC10 = 2             ; Selection of Synchronization Out for ADC bit 0
		PSYNC11 = 3             ; Selection of Synchronization Out for ADC bit 1
		PSYNC20 = 4             ; Selection of Synchronization Out for ADC bit 0
		PSYNC21 = 5             ; Selection of Synchronization Out for ADC bit 1
	}
	PCNF(0xb5) {            ; PSC Configuration Register
		POPA = 2                ; PSC Output A Polarity
		POPB = 3                ; PSC Output B Polarity
		PMODE = 4               ; PSC Mode
		PULOCK = 5              ; PSC Update Lock
	}
	POC(0xb6) {             ; PSC Output Configuration
		POEN0A = 0              ; PSC Output 0A Enable
		POEN0B = 1              ; PSC Output 0B Enable
		POEN1A = 2              ; PSC Output 1A Enable
		POEN1B = 3              ; PSC Output 1B Enable
		POEN2A = 4              ; PSC Output 2A Enable
		POEN2B = 5              ; PSC Output 2B Enable
	}
	PCTL(0xb7) {            ; PSC Control Register
		PRUN = 0                ; PSC Run
		PCCYC = 1               ; PSC Complete Cycle
		PCLKSEL = 5             ; PSC Input Clock Select
		PPRE0 = 6               ; PSC Prescaler Select bits bit 0
		PPRE1 = 7               ; PSC Prescaler Select bits bit 1
	}
	PMIC0(0xb8) {           ; PSC Module 0 Input Control Register
		PRFM00 = 0              ; PSC Module 0 Input Mode bits bit 0
		PRFM01 = 1              ; PSC Module 0 Input Mode bits bit 1
		PRFM02 = 2              ; PSC Module 0 Input Mode bits bit 2
		PAOC0 = 3               ; PSC Module 0 Asynchronous Output Control
		PFLTE0 = 4              ; PSC Module 0 Input Filter Enable
		PELEV0 = 5              ; PSC Module 0 Input Level Selector
		PISEL0 = 6              ; PSC Module 0 Input Select
		POVEN0 = 7              ; PSC Module 0 Overlap Enable
	}
	PMIC1(0xb9) {           ; PSC Module 1 Input Control Register
		PRFM10 = 0              ; PSC Module 1 Input Mode bits bit 0
		PRFM11 = 1              ; PSC Module 1 Input Mode bits bit 1
		PRFM12 = 2              ; PSC Module 1 Input Mode bits bit 2
		PAOC1 = 3               ; PSC Module 1 Asynchronous Output Control
		PFLTE1 = 4              ; PSC Module 1 Input Filter Enable
		PELEV1 = 5              ; PSC Module 1 Input Level Selector
		PISEL1 = 6              ; PSC Module 1 Input Select
		POVEN1 = 7              ; PSC Module 1 Overlap Enable
	}
	PMIC2(0xba) {           ; PSC Module 2 Input Control Register
		PRFM20 = 0              ; PSC Module 2 Input Mode bits bit 0
		PRFM21 = 1              ; PSC Module 2 Input Mode bits bit 1
		PRFM22 = 2              ; PSC Module 2 Input Mode bits bit 2
		PAOC2 = 3               ; PSC Module 2 Asynchronous Output Control
		PFLTE2 = 4              ; PSC Module 2 Input Filter Enable
		PELEV2 = 5              ; PSC Module 2 Input Level Selector
		PISEL2 = 6              ; PSC Module 2 Input Select
		POVEN2 = 7              ; PSC Module 2 Overlap Enable
	}
	PIM(0xbb) {             ; PSC Interrupt Mask Register
		PEOPE = 0               ; PSC End of Cycle Interrupt Enable
		PEVE0 = 1               ; External Event 2 Interrupt Enable bit 0
		PEVE1 = 2               ; External Event 2 Interrupt Enable bit 1
		PEVE2 = 3               ; External Event 2 Interrupt Enable bit 2
	}
	PIFR(0xbc) {            ; PSC Interrupt Flag Register
		PEOP = 0                ; PSC End of Cycle Interrupt
		PEV0 = 1                ; PSC External Event 2 Interrupt bit 0
		PEV1 = 2                ; PSC External Event 2 Interrupt bit 1
		PEV2 = 3                ; PSC External Event 2 Interrupt bit 2
	}
	LINCR(0xc8) {           ; LIN Control Register
		LCMD0 = 0               ; LIN Command and Mode bits bit 0
		LCMD1 = 1               ; LIN Command and Mode bits bit 1
		LCMD2 = 2               ; LIN Command and Mode bits bit 2
		LENA = 3                ; LIN or UART Enable
		LCONF0 = 4              ; LIN Configuration bits bit 0
		LCONF1 = 5              ; LIN Configuration bits bit 1
		LIN13 = 6               ; LIN Standard
		LSWRES = 7              ; Software Reset
	}
	LINSIR(0xc9) {          ; LIN Status and Interrupt Register
		LRXOK = 0               ; Receive Performed Interrupt
		LTXOK = 1               ; Transmit Performed Interrupt
		LIDOK = 2               ; Identifier Interrupt
		LERR = 3                ; Error Interrupt
		LBUSY = 4               ; Busy Signal
		LIDST0 = 5              ; Identifier Status bits bit 0
		LIDST1 = 6              ; Identifier Status bits bit 1
		LIDST2 = 7              ; Identifier Status bits bit 2
	}
	LINENIR(0xca) {         ; LIN Enable Interrupt Register
		LENRXOK = 0             ; Enable Receive Performed Interrupt
		LENTXOK = 1             ; Enable Transmit Performed Interrupt
		LENIDOK = 2             ; Enable Identifier Interrupt
		LENERR = 3              ; Enable Error Interrupt
	}
	LINERR(0xcb) {          ; LIN Error Register
		LBERR = 0               ; Bit Error Flag
		LCERR = 1               ; Checksum Error Flag
		LPERR = 2               ; Parity Error Flag
		LSERR = 3               ; Synchronization Error Flag
		LFERR = 4               ; Framing Error Flag
		LOVERR = 5              ; Overrun Error Flag
		LTOERR = 6              ; Frame Time Out Error Flag
		LABORT = 7              ; Abort Flag
	}
	LINBTR(0xcc) {          ; LIN Bit Timing Register
		LBT0 = 0                ; LIN Bit Timing bits bit 0
		LBT1 = 1                ; LIN Bit Timing bits bit 1
		LBT2 = 2                ; LIN Bit Timing bits bit 2
		LBT3 = 3                ; LIN Bit Timing bits bit 3
		LBT4 = 4                ; LIN Bit Timing bits bit 4
		LBT5 = 5                ; LIN Bit Timing bits bit 5
		LDISR = 7               ; Disable Bit Timing Resynchronization
	}
	LINBRR(0xcd, 0xce) {    ; LIN Baud Rate Register
		LDIV0 = 0               ; 
		LDIV1 = 1               ; 
		LDIV2 = 2               ; 
		LDIV3 = 3               ; 
		LDIV4 = 4               ; 
		LDIV5 = 5               ; 
		LDIV6 = 6               ; 
		LDIV7 = 7               ; 
		LDIV8 = 8               ; 
		LDIV9 = 9               ; 
		LDIV10 = 10             ; 
		LDIV11 = 11             ; 
	}
	LINDLR(0xcf) {          ; LIN Data Length Register
		LRXDL0 = 0              ; LIN Receive Data Length bits bit 0
		LRXDL1 = 1              ; LIN Receive Data Length bits bit 1
		LRXDL2 = 2              ; LIN Receive Data Length bits bit 2
		LRXDL3 = 3              ; LIN Receive Data Length bits bit 3
		LTXDL0 = 4              ; LIN Transmit Data Length bits bit 0
		LTXDL1 = 5              ; LIN Transmit Data Length bits bit 1
		LTXDL2 = 6              ; LIN Transmit Data Length bits bit 2
		LTXDL3 = 7              ; LIN Transmit Data Length bits bit 3
	}
	LINIDR(0xd0) {          ; LIN Identifier Register
		LID0 = 0                ; Identifier bit 5 or Data Length bits bit 0
		LID1 = 1                ; Identifier bit 5 or Data Length bits bit 1
		LID2 = 2                ; Identifier bit 5 or Data Length bits bit 2
		LID3 = 3                ; Identifier bit 5 or Data Length bits bit 3
		LID4 = 4                ; Identifier bit 5 or Data Length bits bit 4
		LID5 = 5                ; Identifier bit 5 or Data Length bits bit 5
		LP0 = 6                 ; Parity bits bit 0
		LP1 = 7                 ; Parity bits bit 1
	}
	LINSEL(0xd1) {          ; LIN Data Buffer Selection Register
		LINDX0 = 0              ; FIFO LIN Data Buffer Index bits bit 0
		LINDX1 = 1              ; FIFO LIN Data Buffer Index bits bit 1
		LINDX2 = 2              ; FIFO LIN Data Buffer Index bits bit 2
		LAINC = 3               ; Auto Increment of Data Buffer Index (Active Low)
	}
	LINDAT(0xd2) {          ; LIN Data Register
		LDATA0 = 0              ; 
		LDATA1 = 1              ; 
		LDATA2 = 2              ; 
		LDATA3 = 3              ; 
		LDATA4 = 4              ; 
		LDATA5 = 5              ; 
		LDATA6 = 6              ; 
		LDATA7 = 7              ; 
	}
	CANGCON(0xd8) {         ; CAN General Control Register
		SWRES = 0               ; Software Reset Request
		ENASTB = 1              ; Enable / Standby
		TEST = 2                ; Test Mode
		LISTEN = 3              ; Listening Mode
		SYNTTC = 4              ; Synchronization of TTC
		TTC = 5                 ; Time Trigger Communication
		OVRQ = 6                ; Overload Frame Request
		ABRQ = 7                ; Abort Request
	}
	CANGSTA(0xd9) {         ; CAN General Status Register
		ERRP = 0                ; Error Passive Mode
		BOFF = 1                ; Bus Off Mode
		ENFG = 2                ; Enable Flag
		RXBSY = 3               ; Receiver Busy
		TXBSY = 4               ; Transmitter Busy
		OVFG = 6                ; Overload Frame Flag
	}
	CANGIT(0xda) {          ; CAN General Interrupt Register Flags
		AERG = 0                ; Ackknowledgement Error General Flag
		FERG = 1                ; Form Error General Flag
		CERG = 2                ; CRC Error General Flag
		SERG = 3                ; Stuff Error General Flag
		BXOK = 4                ; Burst Receive Interrupt Flag
		OVRTIM = 5              ; Overrun CAN Timer Flag
		BOFFIT = 6              ; Bus Off Interrupt Flag
		CANIT = 7               ; General Interrupt Flag
	}
	CANGIE(0xdb) {          ; CAN General Interrupt Enable Register
		ENOVRT = 0              ; Enable CAN Timer Overrun Interrupt
		ENERG = 1               ; Enable General Error Interrupt
		ENBX = 2                ; Enable Burst Receive Interrupt
		ENERR = 3               ; Enable MOb Error Interrupt
		ENTX = 4                ; Enable Transmitt Interrupt
		ENRX = 5                ; Enable Receive Interrupt
		ENBOFF = 6              ; Enable Bus Off Interrupt
		ENIT = 7                ; Enable all Interrupts
	}
	CANEN2(0xdc) {          ; Enable MOb Register 2
		ENMOB0 = 0              ; Enable MObs bit 0
		ENMOB1 = 1              ; Enable MObs bit 1
		ENMOB2 = 2              ; Enable MObs bit 2
		ENMOB3 = 3              ; Enable MObs bit 3
		ENMOB4 = 4              ; Enable MObs bit 4
		ENMOB5 = 5              ; Enable MObs bit 5
	}
	CANEN1(0xdd)            ; Enable MOb Register 1(empty)
	CANIE2(0xde) {          ; Enable Interrupt MOb Register 2
		IEMOB0 = 0              ; Interrupt Enable  MObs bit 0
		IEMOB1 = 1              ; Interrupt Enable  MObs bit 1
		IEMOB2 = 2              ; Interrupt Enable  MObs bit 2
		IEMOB3 = 3              ; Interrupt Enable  MObs bit 3
		IEMOB4 = 4              ; Interrupt Enable  MObs bit 4
		IEMOB5 = 5              ; Interrupt Enable  MObs bit 5
	}
	CANIE1(0xdf)            ; Enable Interrupt MOb Register 1 (empty)
	CANSIT2(0xe0) {         ; CAN Status Interrupt MOb Register 2
		SIT0 = 0                ; Status of Interrupt MObs bit 0
		SIT1 = 1                ; Status of Interrupt MObs bit 1
		SIT2 = 2                ; Status of Interrupt MObs bit 2
		SIT3 = 3                ; Status of Interrupt MObs bit 3
		SIT4 = 4                ; Status of Interrupt MObs bit 4
		SIT5 = 5                ; Status of Interrupt MObs bit 5
	}
	CANSIT1(0xe1)           ; CAN Status Interrupt MOb Register 1 (empty)
	CANBT1(0xe2) {          ; CAN Bit Timing Register 1
		BRP0 = 1                ; Baud Rate Prescaler bits bit 0
		BRP1 = 2                ; Baud Rate Prescaler bits bit 1
		BRP2 = 3                ; Baud Rate Prescaler bits bit 2
		BRP3 = 4                ; Baud Rate Prescaler bits bit 3
		BRP4 = 5                ; Baud Rate Prescaler bits bit 4
		BRP5 = 6                ; Baud Rate Prescaler bits bit 5
	}
	CANBT2(0xe3) {          ; CAN Bit Timing Register 2
		PRS0 = 1                ; Propagation Time Segment bits bit 0
		PRS1 = 2                ; Propagation Time Segment bits bit 1
		PRS2 = 3                ; Propagation Time Segment bits bit 2
		SJW0 = 5                ; Re-Sync Jump Width bits bit 0
		SJW1 = 6                ; Re-Sync Jump Width bits bit 1
	}
	CANBT3(0xe4) {          ; CAN Bit Timing Register 3
		SMP = 0                 ; Sample Type
		PHS10 = 1               ; Phase Segment 1 bits bit 0
		PHS11 = 2               ; Phase Segment 1 bits bit 1
		PHS12 = 3               ; Phase Segment 1 bits bit 2
		PHS20 = 4               ; Phase Segment 2 bits bit 0
		PHS21 = 5               ; Phase Segment 2 bits bit 1
		PHS22 = 6               ; Phase Segment 2 bits bit 2
	}
	CANTCON(0xe5) {         ; Timer Control Register
		TPRSC0 = 0              ; Timer Control bits bit 0
		TPRSC1 = 1              ; Timer Control bits bit 1
		TPRSC2 = 2              ; Timer Control bits bit 2
		TPRSC3 = 3              ; Timer Control bits bit 3
		TPRSC4 = 4              ; Timer Control bits bit 4
		TPRSC5 = 5              ; Timer Control bits bit 5
		TPRSC6 = 6              ; Timer Control bits bit 6
		TPRSC7 = 7              ; Timer Control bits bit 7
	}
	CANTIM(0xe6, 0xe7) {    ; Timer Register
		CANTIM0 = 0             ; Timer bits bit 0
		CANTIM1 = 1             ; Timer bits bit 1
		CANTIM2 = 2             ; Timer bits bit 2
		CANTIM3 = 3             ; Timer bits bit 3
		CANTIM4 = 4             ; Timer bits bit 4
		CANTIM5 = 5             ; Timer bits bit 5
		CANTIM6 = 6             ; Timer bits bit 6
		CANTIM7 = 7             ; Timer bits bit 7
		CANTIM8 = 8             ; Timer bits bit 8
		CANTIM9 = 9             ; Timer bits bit 9
		CANTIM10 = 10           ; Timer bits bit 10
		CANTIM11 = 11           ; Timer bits bit 11
		CANTIM12 = 12           ; Timer bits bit 12
		CANTIM13 = 13           ; Timer bits bit 13
		CANTIM14 = 14           ; Timer bits bit 14
		CANTIM15 = 15           ; Timer bits bit 15
	}
	CANTTC(0xe8, 0xe9) {    ; TTC Timer Register
		TIMTTC0 = 0             ; TTC Timer Count bit 0
		TIMTTC1 = 1             ; TTC Timer Count bit 1
		TIMTTC2 = 2             ; TTC Timer Count bit 2
		TIMTTC3 = 3             ; TTC Timer Count bit 3
		TIMTTC4 = 4             ; TTC Timer Count bit 4
		TIMTTC5 = 5             ; TTC Timer Count bit 5
		TIMTTC6 = 6             ; TTC Timer Count bit 6
		TIMTTC7 = 7             ; TTC Timer Count bit 7
		TIMTTC8 = 8             ; TTC Timer Count bit 8
		TIMTTC9 = 9             ; TTC Timer Count bit 9
		TIMTTC10 = 10           ; TTC Timer Count bit 10
		TIMTTC11 = 11           ; TTC Timer Count bit 11
		TIMTTC12 = 12           ; TTC Timer Count bit 12
		TIMTTC13 = 13           ; TTC Timer Count bit 13
		TIMTTC14 = 14           ; TTC Timer Count bit 14
		TIMTTC15 = 15           ; TTC Timer Count bit 15
	}
	CANTEC(0xea) {          ; Transmit Error Counter Register
		TEC0 = 0                ; Transmit Error Counter bits bit 0
		TEC1 = 1                ; Transmit Error Counter bits bit 1
		TEC2 = 2                ; Transmit Error Counter bits bit 2
		TEC3 = 3                ; Transmit Error Counter bits bit 3
		TEC4 = 4                ; Transmit Error Counter bits bit 4
		TEC5 = 5                ; Transmit Error Counter bits bit 5
		TEC6 = 6                ; Transmit Error Counter bits bit 6
		TEC7 = 7                ; Transmit Error Counter bits bit 7
	}
	CANREC(0xeb) {          ; Receive Error Counter Register
		REC0 = 0                ; Receive Error Counter bits bit 0
		REC1 = 1                ; Receive Error Counter bits bit 1
		REC2 = 2                ; Receive Error Counter bits bit 2
		REC3 = 3                ; Receive Error Counter bits bit 3
		REC4 = 4                ; Receive Error Counter bits bit 4
		REC5 = 5                ; Receive Error Counter bits bit 5
		REC6 = 6                ; Receive Error Counter bits bit 6
		REC7 = 7                ; Receive Error Counter bits bit 7
	}
	CANHPMOB(0xec) {        ; Highest Priority MOb Register
		CGP0 = 0                ; CAN General Purpose bits bit 0
		CGP1 = 1                ; CAN General Purpose bits bit 1
		CGP2 = 2                ; CAN General Purpose bits bit 2
		CGP3 = 3                ; CAN General Purpose bits bit 3
		HPMOB0 = 4              ; Highest Priority MOb Number bits bit 0
		HPMOB1 = 5              ; Highest Priority MOb Number bits bit 1
		HPMOB2 = 6              ; Highest Priority MOb Number bits bit 2
		HPMOB3 = 7              ; Highest Priority MOb Number bits bit 3
	}
	CANPAGE(0xed) {         ; Page MOb Register
		INDX0 = 0               ; Data Buffer Index bits bit 0
		INDX1 = 1               ; Data Buffer Index bits bit 1
		INDX2 = 2               ; Data Buffer Index bits bit 2
		AINC = 3                ; MOb Data Buffer Auto Increment (Active Low)
		MOBNB0 = 4              ; MOb Number bits bit 0
		MOBNB1 = 5              ; MOb Number bits bit 1
		MOBNB2 = 6              ; MOb Number bits bit 2
		MOBNB3 = 7              ; MOb Number bits bit 3
	}
	CANSTMOB(0xee) {        ; MOb Status Register
		AERR = 0                ; Ackknowledgement Error on MOb
		FERR = 1                ; Form Error on MOb
		CERR = 2                ; CRC Error on MOb
		SERR = 3                ; Stuff Error on MOb
		BERR = 4                ; Bit Error on MOb
		RXOK = 5                ; Receive OK on MOb
		TXOK = 6                ; Transmit OK on MOb
		DLCW = 7                ; Data Length Code Warning on MOb
	}
	CANCDMOB(0xef) {        ; MOb Control and DLC Register
		DLC0 = 0                ; Data Length Code bits bit 0
		DLC1 = 1                ; Data Length Code bits bit 1
		DLC2 = 2                ; Data Length Code bits bit 2
		DLC3 = 3                ; Data Length Code bits bit 3
		IDE = 4                 ; Identifier Extension
		RPLV = 5                ; Reply Valid
		CONMOB0 = 6             ; MOb Config bits bit 0
		CONMOB1 = 7             ; MOb Config bits bit 1
	}
	CANIDT4(0xf0) {         ; Identifier Tag Register 4
		RB0TAG = 0              ; Reserved Bit 0 Tag
		RB1TAG = 1              ; Reserved Bit 1 Tag
		RTRTAG = 2              ; Remote Transmission Request Tag
		IDT0 = 3                ; Identifier Tag bit 0
		IDT1 = 4                ; Identifier Tag bit 1
		IDT2 = 5                ; Identifier Tag bit 2
		IDT3 = 6                ; Identifier Tag bit 3
		IDT4 = 7                ; Identifier Tag bit 4
	}
	CANIDT3(0xf1) {         ; Identifier Tag Register 3
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDT2(0xf2) {         ; Identifier Tag Register 2
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDT1(0xf3) {         ; Identifier Tag Register 1
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDM4(0xf4) {         ; Identifier Mask Register 4
		IDEMSK = 0              ; Identifier Extension Mask
		RTRMSK = 2              ; Remote Transmission Request Mask
		IDMSK0 = 3              ; Identifier Mask bit 0
		IDMSK1 = 4              ; Identifier Mask bit 1
		IDMSK2 = 5              ; Identifier Mask bit 2
		IDMSK3 = 6              ; Identifier Mask bit 3
		IDMSK4 = 7              ; Identifier Mask bit 4
	}
	CANIDM3(0xf5) {         ; Identifier Mask Register 3
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANIDM2(0xf6) {         ; Identifier Mask Register 2
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANIDM1(0xf7) {         ; Identifier Mask Register 1
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANSTM(0xf8, 0xf9) {    ; Time Stamp Register
		TIMSTM0 = 0             ; TIMSTM bit 0
		TIMSTM1 = 1             ; TIMSTM bit 1
		TIMSTM2 = 2             ; TIMSTM bit 2
		TIMSTM3 = 3             ; TIMSTM bit 3
		TIMSTM4 = 4             ; TIMSTM bit 4
		TIMSTM5 = 5             ; TIMSTM bit 5
		TIMSTM6 = 6             ; TIMSTM bit 6
		TIMSTM7 = 7             ; TIMSTM bit 7
		TIMSTM8 = 8             ; TIMSTM bit 8
		TIMSTM9 = 9             ; TIMSTM bit 9
		TIMSTM10 = 10           ; TIMSTM bit 10
		TIMSTM11 = 11           ; TIMSTM bit 11
		TIMSTM12 = 12           ; TIMSTM bit 12
		TIMSTM13 = 13           ; TIMSTM bit 13
		TIMSTM14 = 14           ; TIMSTM bit 14
		TIMSTM15 = 15           ; TIMSTM bit 15
	}
	CANMSG(0xfa) {          ; Message Data Register
		MSG0 = 0                ; Message Data bits bit 0
		MSG1 = 1                ; Message Data bits bit 1
		MSG2 = 2                ; Message Data bits bit 2
		MSG3 = 3                ; Message Data bits bit 3
		MSG4 = 4                ; Message Data bits bit 4
		MSG5 = 5                ; Message Data bits bit 5
		MSG6 = 6                ; Message Data bits bit 6
		MSG7 = 7                ; Message Data bits bit 7
	}
}

