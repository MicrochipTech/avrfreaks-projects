device {
	name = "ATtiny20"
	prog_size = 0x0800
}

interrupts {
	RESET = 0x00            ; External Reset, Power-on Reset and Watchdog Reset
	INT0 = 0x01             ; External Interrupt Request 0
	PCINT0 = 0x02           ; Pin Change Interrupt Request 0
	PCINT1 = 0x03           ; Pin Change Interrupt Request 1
	WDT = 0x04              ; Watchdog Time-out
	TIM1_CAPT = 0x05        ; Timer/Counter1 Input Capture
	TIM1_COMPA = 0x06       ;  Timer/Counter1 Compare Match A
	TIM1_COMPB = 0x07       ;  Timer/Counter1 Compare Match B
	TIM1_OVF = 0x08         ; Timer/Counter1 Overflow
	TIM0_COMPA = 0x09       ; Timer/Counter0 Compare Match A
	TIM0_COMPB = 0x0a       ; Timer/Counter0 Compare Match B
	TIM0_OVF = 0x0b         ; Timer/Counter0 Overflow
	ANA_COMP = 0x0c         ; Analog Comparator
	ADC_ADC = 0x0d          ; Conversion Complete
	TWI_SLAVE = 0x0e        ; Two-Wire Interface
	SPI = 0x0f              ; Serial Peripheral Interface
	QTRIP = 0x10            ; Touch Sensing
}

registers {
	PINA(0xx20)             ; Port A Input Pins
	DDRA(0xx1f)             ; Data Direction Register, Port A
	PORTA(0xx1e)            ; Port A Data Register
	PUEA(0xx1d)             ; Pull-up Enable Control Register
	PINB(0xx1c)             ; Port B Data register
	DDRB(0xx1b)             ; Data Direction Register, Port B
	PORTB(0xx1a)            ; Input Pins, Port B
	PUEB(0xx19)             ; Pull-up Enable Control Register
	PORTCR(0xx18) {         ; Port Control Register
		BBMA = 0                ; Break-Before-Make Mode Enable
		BBMB = 1                ; Break-Before-Make Mode Enable
	}
	PCMSK0(0xx17) {         ; Pin Change Mask Register 0
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
		PCINT3 = 3              ; Pin Change Enable Masks bit 3
		PCINT4 = 4              ; Pin Change Enable Masks bit 4
		PCINT5 = 5              ; Pin Change Enable Masks bit 5
		PCINT6 = 6              ; Pin Change Enable Masks bit 6
		PCINT7 = 7              ; Pin Change Enable Masks bit 7
	}
	PCMSK1(0xx16) {         ; Pin Change Mask Register 1
		PCINT0 = 0              ; Pin Change Enable Masks bit 0
		PCINT1 = 1              ; Pin Change Enable Masks bit 1
		PCINT2 = 2              ; Pin Change Enable Masks bit 2
		PCINT3 = 3              ; Pin Change Enable Masks bit 3
	}
	GIFR(0xx15) {           ; General Interrupt Flag Register
		INTF0 = 0               ; External Interrupt Flag 0
		PCIF0 = 4               ; Pin Change Interrupt Flags bit 0
		PCIF1 = 5               ; Pin Change Interrupt Flags bit 1
	}
	GIMSK(0xx14) {          ; General Interrupt Mask Register
		INT0 = 0                ; External Interrupt Request 0 Enable
		PCIE0 = 4               ; Pin Change Interrupt Enables bit 0
		PCIE1 = 5               ; Pin Change Interrupt Enables bit 1
	}
	DIDR0(0xx13) {          ; Digital Input Disable Register 0
		ADC0D = 0               ; ADC0 Digital input Disable
		ADC1D = 1               ; ADC1 Digital input Disable
		ADC2D = 2               ; ADC2 Digital input Disable
		ADC3D = 3               ; AREF Digital Input Disable
		ADC4D = 4               ; ADC3 Digital input Disable
		ADC5D = 5               ; ADC4 Digital input Disable
		ADC6D = 6               ; ADC5 Digital input Disable
		ADC7D = 7               ; ADC6 Digital input Disable
	}
	ADC(0xx12, 0xx11)       ; ADC Data Register  Bytes
	ADMUX(0xx10) {          ; The ADC multiplexer Selection Register
		MUX0 = 0                ; Analog Channel and Gain Selection Bits bit 0
		MUX1 = 1                ; Analog Channel and Gain Selection Bits bit 1
		MUX2 = 2                ; Analog Channel and Gain Selection Bits bit 2
		MUX3 = 3                ; Analog Channel and Gain Selection Bits bit 3
		REFS = 6                ; Reference Selection Bit
	}
	ADCSRB(0xxf) {          ; ADC Control and Status Register B
		ADTS0 = 0               ; ADC Auto Trigger Sources bit 0
		ADTS1 = 1               ; ADC Auto Trigger Sources bit 1
		ADTS2 = 2               ; ADC Auto Trigger Sources bit 2
		ADLAR = 3               ; 
	}
	ADCSRA(0xxe) {          ; The ADC Control and Status register
		ADPS0 = 0               ; ADC Prescaler Select Bits bit 0
		ADPS1 = 1               ; ADC Prescaler Select Bits bit 1
		ADPS2 = 2               ; ADC Prescaler Select Bits bit 2
		ADIE = 3                ; ADC Interrupt Enable
		ADIF = 4                ; ADC Interrupt Flag
		ADATE = 5               ; ADC Auto Trigger Enable
		ADSC = 6                ; ADC Start Conversion
		ADEN = 7                ; ADC Enable
	}
	ACSRB(0xxd) {           ; Analog Comparator Control And Status Register B
		ACME = 2                ; Analog Comparator Multiplexer Enable
		HLEV = 6                ; Hysteresis Level
		HSEL = 7                ; Hysteresis Select
	}
	ACSRA(0xxc) {           ; Analog Comparator Control And Status Register A
		ACIS0 = 0               ; Analog Comparator Interrupt Mode Select bits bit 0
		ACIS1 = 1               ; Analog Comparator Interrupt Mode Select bits bit 1
		ACIC = 2                ; Analog Comparator Input Capture Enable
		ACIE = 3                ; Analog Comparator Interrupt Enable
		ACI = 4                 ; Analog Comparator Interrupt Flag
		ACO = 5                 ; Analog Compare Output
		ACBG = 6                ; Analog Comparator Bandgap Select
		ACD = 7                 ; Analog Comparator Disable
	}
	OCR0B(0xxb)             ; Timer/Counter0 Output Compare Register
	OCR0A(0xxa)             ; Timer/Counter0 Output Compare Register
	TCNT0(0xx9)             ; Timer/Counter0
	TCCR0B(0xx8) {          ; Timer/Counter 0 Control Register B
		CS00 = 0                ; Clock Select bit 0
		CS01 = 1                ; Clock Select bit 1
		CS02 = 2                ; Clock Select bit 2
		WGM02 = 3               ; Waveform Generation Mode
		FOC0B = 6               ; Force Output Compare B
		FOC0A = 7               ; Force Output Compare A
	}
	TCCR0A(0xx7) {          ; Timer/Counter 0 Control Register A
		WGM00 = 0               ; Waveform Generation Mode bit 0
		WGM01 = 1               ; Waveform Generation Mode bit 1
		COM0B0 = 4              ; Compare Output Mode for Channel B bits bit 0
		COM0B1 = 5              ; Compare Output Mode for Channel B bits bit 1
		COM0A0 = 6              ; Compare Output Mode for Channel A bits bit 0
		COM0A1 = 7              ; Compare Output Mode for Channel A bits bit 1
	}
	ICR1(0xx6, 0xx5)        ; Input Capture Register  Bytes
	OCR1B(0xx4, 0xx3)       ; Timer/Counter1 Output Compare Register B 
	OCR1A(0xx2, 0xx1)       ; Timer/Counter 1 Output Compare Register A 
	TCNT1(0x00, 0x01)       ; Timer/Counter1 
	TCCR1C(0x02) {          ; Timer/Counter1 Control Register C
		FOC1B = 6               ; Force Output Compare for channel B
		FOC1A = 7               ; Force Output Compare for channel A
	}
	TCCR1B(0x03) {          ; Timer/Counter1 Control Register B
		CS10 = 0                ; Clock Select1 bits bit 0
		CS11 = 1                ; Clock Select1 bits bit 1
		CS12 = 2                ; Clock Select1 bits bit 2
		WGM10 = 3               ; Waveform Generation Mode bit 0
		WGM11 = 4               ; Waveform Generation Mode bit 1
		ICES1 = 6               ; Input Capture 1 Edge Select
		ICNC1 = 7               ; Input Capture 1 Noise Canceler
	}
	TCCR1A(0x04) {          ; Timer/Counter1 Control Register A
		WGM10 = 0               ; Waveform Generation Mode Bits bit 0
		WGM11 = 1               ; Waveform Generation Mode Bits bit 1
		COM1B0 = 4              ; Compare Output Mode 1B, bits bit 0
		COM1B1 = 5              ; Compare Output Mode 1B, bits bit 1
		COM1A0 = 6              ; Compare Output Mode 1A, bits bit 0
		COM1A1 = 7              ; Compare Output Mode 1A, bits bit 1
	}
	TIFR(0x05) {            ; Overflow Interrupt Enable
		TOV0 = 0                ; Timer Overflow Flag bit 0
		OCF0A = 1               ; Output Compare Flag 0 A
		OCF0B = 2               ; Output Compare Flag 0 B
		TOV1 = 3                ; Timer Overflow Flag bit 1
		OCF1A = 4               ; Timer Output Compare Flag 1A
		OCF1B = 5               ; Timer Output Compare Flag 1B
		ICF1 = 7                ; Input Capture Flag
	}
	TIMSK(0x06) {           ; Timer Interrupt Mask Register
		TOIE0 = 0               ; Overflow Interrupt Enable bit 0
		OCIE0A = 1              ; Timer/Counter0 Output Compare Match A Interrupt Enable
		OCIE0B = 2              ; Timer/Counter Output Compare Match B Interrupt Enable
		TOIE1 = 3               ; Overflow Interrupt Enable bit 1
		OCIE1A = 4              ; Output Compare A Match Interrupt Enable
		OCIE1B = 5              ; Output Compare B Match Interrupt Enable
		ICIE1 = 7               ; Input Capture Interrupt Enable
	}
	GTCCR(0x07) {           ; General Timer/Counter Control Register
		PSR = 0                 ; Prescaler Reset
		TSM = 7                 ; Timer Synchronization Mode
	}
	TWSD(0x08) {            ; TWI Slave Data Register
		TWSD0 = 0               ; TWI slave data bit bit 0
		TWSD1 = 1               ; TWI slave data bit bit 1
		TWSD2 = 2               ; TWI slave data bit bit 2
		TWSD3 = 3               ; TWI slave data bit bit 3
		TWSD4 = 4               ; TWI slave data bit bit 4
		TWSD5 = 5               ; TWI slave data bit bit 5
		TWSD6 = 6               ; TWI slave data bit bit 6
		TWSD7 = 7               ; TWI slave data bit bit 7
	}
	TWSAM(0x09)             ; TWI Slave Address Mask Register
	TWSA(0x0a) {            ; TWI Slave Address Register
		TWSA0 = 0               ; TWI slave address bit bit 0
		TWSA1 = 1               ; TWI slave address bit bit 1
		TWSA2 = 2               ; TWI slave address bit bit 2
		TWSA3 = 3               ; TWI slave address bit bit 3
		TWSA4 = 4               ; TWI slave address bit bit 4
		TWSA5 = 5               ; TWI slave address bit bit 5
		TWSA6 = 6               ; TWI slave address bit bit 6
		TWSA7 = 7               ; TWI slave address bit bit 7
	}
	TWSSRA(0x0b) {          ; TWI Slave Status Register A
		TWAS = 0                ; TWI Address or Stop
		TWDIR = 1               ; TWI Read/Write Direction
		TWBE = 2                ; TWI Bus Error
		TWC = 3                 ; TWI Collision
		TWRA = 4                ; TWI Receive Acknowledge
		TWCH = 5                ; TWI Clock Hold
		TWASIF = 6              ; TWI Address/Stop Interrupt Flag
		TWDIF = 7               ; TWI Data Interrupt Flag
	}
	TWSCRB(0x0c) {          ; TWI Slave Control Register B
		TWCMD0 = 0              ; 
		TWCMD1 = 1              ; 
		TWAA = 2                ; TWI Acknowledge Action
	}
	TWSCRA(0x0d) {          ; TWI Slave Control Register A
		TWSME = 0               ; TWI Smart Mode Enable
		TWPME = 1               ; TWI Promiscuous Mode Enable
		TWSIE = 2               ; TWI Stop Interrupt Enable
		TWEN = 3                ; Two-Wire Interface Enable
		TWASIE = 4              ; TWI Address/Stop Interrupt Enable
		TWDIE = 5               ; TWI Data Interrupt Enable
		TWSHE = 7               ; TWI SDA Hold Time Enable
	}
	SPDR(0x0e)              ; SPI Data Register
	SPSR(0x0f) {            ; SPI Status Register
		SPI2X = 0               ; Double SPI Speed Bit
		WCOL = 6                ; Write Collision Flag
		SPIF = 7                ; SPI Interrupt Flag
	}
	SPCR(0x10) {            ; SPI Control Register
		SPR0 = 0                ; SPI Clock Rate Selects bit 0
		SPR1 = 1                ; SPI Clock Rate Selects bit 1
		CPHA = 2                ; Clock Phase
		CPOL = 3                ; Clock polarity
		MSTR = 4                ; Master/Slave Select
		DORD = 5                ; Data Order
		SPE = 6                 ; SPI Enable
		SPIE = 7                ; SPI Interrupt Enable
	}
	WDTCSR(0x11) {          ; Watchdog Timer Control and Status Register
		WDP0 = 0                ; Watchdog Timer Prescaler Bits bit 0
		WDP1 = 1                ; Watchdog Timer Prescaler Bits bit 1
		WDP2 = 2                ; Watchdog Timer Prescaler Bits bit 2
		WDE = 3                 ; Watch Dog Enable
		WDP3 = 5                ; Watchdog Timer Prescaler Bits bit 3
		WDIE = 6                ; Watchdog Timer Interrupt Enable
		WDIF = 7                ; Watchdog Timer Interrupt Flag
	}
	NVMCSR(0x12) {          ; Non-Volatile Memory Control and Status Register
		NVMBSY = 7              ; Non-Volatile Memory Busy
	}
	NVMCMD(0x13)            ; Non-Volatile Memory Command
	PRR(0x15) {             ; Power Reduction Register
		PRADC = 0               ; Power Reduction ADC
		PRTIM0 = 1              ; Power Reduction Timer/Counter0
		PRTIM1 = 2              ; Power Reduction Timer/Counter1
		PRSPI = 3               ; Power Reduction Serial Peripheral Interface
		PRTWI = 4               ; Power Reduction TWI
	}
	CLKPSR(0x16) {          ; Clock Prescale Register
		CLKPS0 = 0              ; Clock Prescaler Select Bits bit 0
		CLKPS1 = 1              ; Clock Prescaler Select Bits bit 1
		CLKPS2 = 2              ; Clock Prescaler Select Bits bit 2
		CLKPS3 = 3              ; Clock Prescaler Select Bits bit 3
	}
	CLKMSR(0x17) {          ; Clock Main Settings Register
		CLKMS0 = 0              ; Clock Main Select Bits bit 0
		CLKMS1 = 1              ; Clock Main Select Bits bit 1
	}
	OSCCAL(0x19) {          ; Oscillator Calibration Value
		OSCCAL0 = 0             ; Oscillator Calibration  bit 0
		OSCCAL1 = 1             ; Oscillator Calibration  bit 1
		OSCCAL2 = 2             ; Oscillator Calibration  bit 2
		OSCCAL3 = 3             ; Oscillator Calibration  bit 3
		OSCCAL4 = 4             ; Oscillator Calibration  bit 4
		OSCCAL5 = 5             ; Oscillator Calibration  bit 5
		OSCCAL6 = 6             ; Oscillator Calibration  bit 6
		OSCCAL7 = 7             ; Oscillator Calibration  bit 7
	}
	MCUCR(0x1a) {           ; MCU Control Register
		SE = 0                  ; Sleep Enable
		SM0 = 1                 ; Sleep Mode bit 0
		SM1 = 2                 ; Sleep Mode bit 1
		SM2 = 3                 ; Sleep Mode bit 2
		BODS = 4                ; BOD Sleep
		ISC00 = 6               ; Interrupt Sense Control 0 Bit 0
		ISC01 = 7               ; Interrupt Sense Control 0 Bit 1
	}
	RSTFLR(0x1b) {          ; Reset Flag Register
		PORF = 0                ; Power-on Reset Flag
		EXTRF = 1               ; External Reset Flag
		WDRF = 3                ; Watchdog Reset Flag
	}
	CCP(0x1c)               ; Configuration Change Protection
	SP(0x1d, 0x1e)          ; Stack Pointer 
	SREG(0x1f) {            ; Status Register
		C = 0                   ; Carry Flag
		Z = 1                   ; Zero Flag
		N = 2                   ; Negative Flag
		V = 3                   ; Two's Complement Overflow Flag
		S = 4                   ; Sign Bit
		H = 5                   ; Half Carry Flag
		T = 6                   ; Bit Copy Storage
		I = 7                   ; Global Interrupt Enable
	}
}

