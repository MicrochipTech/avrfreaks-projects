device {
	name = "ATmega128RFA1"
	prog_size = 0x20000
	eeprom_size = 0x1000
	ram_size = 0x4000
	ram_start = 0x0200
}

interrupts {
	RESET = 0x00            ; External Pin,Power-on Reset,Brown-out Reset,Watchdog Reset,and JTAG AVR Reset. See Datasheet.     
	INT0 = 0x01             ; External Interrupt Request 0
	INT1 = 0x02             ; External Interrupt Request 1
	INT2 = 0x03             ; External Interrupt Request 2
	INT3 = 0x04             ; External Interrupt Request 3
	INT4 = 0x05             ; External Interrupt Request 4
	INT5 = 0x06             ; External Interrupt Request 5
	INT6 = 0x07             ; External Interrupt Request 6
	INT7 = 0x08             ; External Interrupt Request 7
	PCINT0 = 0x09           ; Pin Change Interrupt Request 0
	PCINT1 = 0x0a           ; Pin Change Interrupt Request 1
	PCINT2 = 0x0b           ; Pin Change Interrupt Request 2
	WDT = 0x0c              ; Watchdog Time-out Interrupt
	TIMER2_COMPA = 0x0d     ; Timer/Counter2 Compare Match A
	TIMER2_COMPB = 0x0e     ; Timer/Counter2 Compare Match B
	TIMER2_OVF = 0x0f       ; Timer/Counter2 Overflow
	TIMER1_CAPT = 0x10      ; Timer/Counter1 Capture Event
	TIMER1_COMPA = 0x11     ; Timer/Counter1 Compare Match A
	TIMER1_COMPB = 0x12     ; Timer/Counter1 Compare Match B
	TIMER1_COMPC = 0x13     ; Timer/Counter1 Compare Match C
	TIMER1_OVF = 0x14       ; Timer/Counter1 Overflow
	TIMER0_COMPA = 0x15     ; Timer/Counter0 Compare Match A
	TIMER0_COMPB = 0x16     ; Timer/Counter0 Compare Match B
	TIMER0_OVF = 0x17       ; Timer/Counter0 Overflow
	SPI_STC = 0x18          ; SPI Serial Transfer Complete
	USART0_RX = 0x19        ; USART0, Rx Complete
	USART0_UDRE = 0x1a      ; USART0 Data register Empty
	USART0_TX = 0x1b        ; USART0, Tx Complete
	ANALOG_COMP = 0x1c      ; Analog Comparator
	ADC = 0x1d              ; ADC Conversion Complete
	EE_READY = 0x1e         ; EEPROM Ready
	TIMER3_CAPT = 0x1f      ; Timer/Counter3 Capture Event
	TIMER3_COMPA = 0x20     ; Timer/Counter3 Compare Match A
	TIMER3_COMPB = 0x21     ; Timer/Counter3 Compare Match B
	TIMER3_COMPC = 0x22     ; Timer/Counter3 Compare Match C
	TIMER3_OVF = 0x23       ; Timer/Counter3 Overflow
	USART1_RX = 0x24        ; USART1, Rx Complete
	USART1_UDRE = 0x25      ; USART1 Data register Empty
	USART1_TX = 0x26        ; USART1, Tx Complete
	TWI = 0x27              ; 2-wire Serial Interface
	SPM_READY = 0x28        ; Store Program Memory Read
	TIMER4_CAPT = 0x29      ; Timer/Counter4 Capture Event
	TIMER4_COMPA = 0x2a     ; Timer/Counter4 Compare Match A
	TIMER4_COMPB = 0x2b     ; Timer/Counter4 Compare Match B
	TIMER4_COMPC = 0x2c     ; Timer/Counter4 Compare Match C
	TIMER4_OVF = 0x2d       ; Timer/Counter4 Overflow
	TIMER5_CAPT = 0x2e      ; Timer/Counter5 Capture Event
	TIMER5_COMPA = 0x2f     ; Timer/Counter5 Compare Match A
	TIMER5_COMPB = 0x30     ; Timer/Counter5 Compare Match B
	TIMER5_COMPC = 0x31     ; Timer/Counter5 Compare Match C
	TIMER5_OVF = 0x32       ; Timer/Counter5 Overflow
	USART2_RX = 0x33        ; USART2, Rx Complete
	USART2_UDRE = 0x34      ; USART2 Data register Empty
	USART2_TX = 0x35        ; USART2, Tx Complete
	USART3_RX = 0x36        ; USART3, Rx Complete
	USART3_UDRE = 0x37      ; USART3 Data register Empty
	USART3_TX = 0x38        ; USART3, Tx Complete
	TRX24_PLL_LOCK = 0x39   ; TRX24 - PLL lock interrupt
	TRX24_PLL_UNLOCK = 0x3a ; TRX24 - PLL unlock interrupt
	TRX24_RX_START = 0x3b   ; TRX24 - Receive start interrupt
	TRX24_RX_END = 0x3c     ; TRX24 - RX_END interrupt
	TRX24_CCA_ED_DONE = 0x3d; TRX24 - CCA/ED done interrupt
	TRX24_XAH_AMI = 0x3e    ; TRX24 - XAH - AMI
	TRX24_TX_END = 0x3f     ; TRX24 - TX_END interrupt
	TRX24_AWAKE = 0x40      ; TRX24 AWAKE - tranceiver is reaching state TRX_OFF
	SCNT_CMP1 = 0x41        ; Symbol counter - compare match 1 interrupt
	SCNT_CMP2 = 0x42        ; Symbol counter - compare match 2 interrupt
	SCNT_CMP3 = 0x43        ; Symbol counter - compare match 3 interrupt
	SCNT_OVFL = 0x44        ; Symbol counter - overflow interrupt
	SCNT_BACKOFF = 0x45     ; Symbol counter - backoff interrupt
	AES_READY = 0x46        ; AES engine ready interrupt
	BAT_LOW = 0x47          ; Battery monitor indicates supply voltage below threshold
}

registers {
	TCCR5A(0x120) {         ; Timer/Counter5 Control Register A
		WGM50 = 0               ; Waveform Generation Mode bit 0
		WGM51 = 1               ; Waveform Generation Mode bit 1
		COM5C0 = 2              ; Compare Output Mode for Channel C bit 0
		COM5C1 = 3              ; Compare Output Mode for Channel C bit 1
		COM5B0 = 4              ; Compare Output Mode for Channel B bit 0
		COM5B1 = 5              ; Compare Output Mode for Channel B bit 1
		COM5A0 = 6              ; Compare Output Mode for Channel A bit 0
		COM5A1 = 7              ; Compare Output Mode for Channel A bit 1
	}
	TCCR5B(0x121) {         ; Timer/Counter5 Control Register B
		CS50 = 0                ; Clock Select bit 0
		CS51 = 1                ; Clock Select bit 1
		CS52 = 2                ; Clock Select bit 2
		WGM50 = 3               ; Waveform Generation Mode bit 0
		WGM51 = 4               ; Waveform Generation Mode bit 1
		Res = 5                 ; Reserved Bit
		ICES5 = 6               ; Input Capture 5 Edge Select
		ICNC5 = 7               ; Input Capture 5 Noise Canceller
	}
	TCCR5C(0x122) {         ; Timer/Counter5 Control Register C
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		FOC5C = 5               ; Force Output Compare for Channel C
		FOC5B = 6               ; Force Output Compare for Channel B
		FOC5A = 7               ; Force Output Compare for Channel A
	}
	TCNT5(0x124, 0x125)     ; Timer/Counter5  Bytes
	ICR5(0x126, 0x127)      ; Timer/Counter5 Input Capture Register  Bytes
	OCR5A(0x128, 0x129)     ; Timer/Counter5 Output Compare Register A  Bytes
	OCR5B(0x12a, 0x12b)     ; Timer/Counter5 Output Compare Register B  Bytes
	OCR5C(0x12c, 0x12d)     ; Timer/Counter5 Output Compare Register C  Bytes
	LLCR(0x12f) {           ; Low Leakage Voltage Regulator Control Register
		LLENCAL = 0             ; Enable Automatic Calibration
		LLSHORT = 1             ; Short Lower Calibration Circuit
		LLTCO = 2               ; Temperature Coefficient of Current Source
		LLCAL = 3               ; Calibration Active
		LLCOMP = 4              ; Comparator Output
		LLDONE = 5              ; Calibration Done
		Res0 = 6                ; Reserved Bit bit 0
		Res1 = 7                ; Reserved Bit bit 1
	}
	LLDRL(0x130) {          ; Low Leakage Voltage Regulator Data Register (Low-Byte)
		LLDRL0 = 0              ; Low-Byte Data Register Bits bit 0
		LLDRL1 = 1              ; Low-Byte Data Register Bits bit 1
		LLDRL2 = 2              ; Low-Byte Data Register Bits bit 2
		LLDRL3 = 3              ; Low-Byte Data Register Bits bit 3
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		Res3 = 7                ; Reserved bit 3
	}
	LLDRH(0x131) {          ; Low Leakage Voltage Regulator Data Register (High-Byte)
		LLDRH0 = 0              ; High-Byte Data Register Bits bit 0
		LLDRH1 = 1              ; High-Byte Data Register Bits bit 1
		LLDRH2 = 2              ; High-Byte Data Register Bits bit 2
		LLDRH3 = 3              ; High-Byte Data Register Bits bit 3
		LLDRH4 = 4              ; High-Byte Data Register Bits bit 4
		Res0 = 5                ; Reserved bit 0
		Res1 = 6                ; Reserved bit 1
		Res2 = 7                ; Reserved bit 2
	}
	DRTRAM3(0x132) {        ; Data Retention Configuration Register of SRAM 3
		ENDRT = 4               ; Enable SRAM Data Retention
		DRTSWOK = 5             ; DRT Switch OK
		Res0 = 6                ; Reserved bit 0
		Res1 = 7                ; Reserved bit 1
	}
	DRTRAM2(0x133) {        ; Data Retention Configuration Register of SRAM 2
		ENDRT = 4               ; Enable SRAM Data Retention
		DRTSWOK = 5             ; DRT Switch OK
		Res = 6                 ; Reserved Bit
	}
	DRTRAM1(0x134) {        ; Data Retention Configuration Register of SRAM 1
		ENDRT = 4               ; Enable SRAM Data Retention
		DRTSWOK = 5             ; DRT Switch OK
		Res0 = 6                ; Reserved bit 0
		Res1 = 7                ; Reserved bit 1
	}
	DRTRAM0(0x135) {        ; Data Retention Configuration Register of SRAM 0
		ENDRT = 4               ; Enable SRAM Data Retention
		DRTSWOK = 5             ; DRT Switch OK
		Res0 = 6                ; Reserved bit 0
		Res1 = 7                ; Reserved bit 1
	}
	DPDS0(0x136) {          ; Port Driver Strength Register 0
		PBDRV0 = 0              ; Driver Strength Port B bit 0
		PBDRV1 = 1              ; Driver Strength Port B bit 1
		PDDRV0 = 2              ; Driver Strength Port D bit 0
		PDDRV1 = 3              ; Driver Strength Port D bit 1
		PEDRV0 = 4              ; Driver Strength Port E bit 0
		PEDRV1 = 5              ; Driver Strength Port E bit 1
		PFDRV0 = 6              ; Driver Strength Port F bit 0
		PFDRV1 = 7              ; Driver Strength Port F bit 1
	}
	DPDS1(0x137) {          ; Port Driver Strength Register 1
		PGDRV0 = 0              ; Driver Strength Port G bit 0
		PGDRV1 = 1              ; Driver Strength Port G bit 1
		Res0 = 2                ; Reserved bit 0
		Res1 = 3                ; Reserved bit 1
		Res2 = 4                ; Reserved bit 2
		Res3 = 5                ; Reserved bit 3
		Res4 = 6                ; Reserved bit 4
		Res5 = 7                ; Reserved bit 5
	}
	TRXPR(0x139) {          ; Transceiver Pin Register
		TRXRST = 0              ; Force Transceiver Reset
		SLPTR = 1               ; Multi-purpose Transceiver Control Bit
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		Res3 = 7                ; Reserved bit 3
	}
	AES_CTRL(0x13c) {       ; AES Control Register
		AES_IM = 2              ; AES Interrupt Enable
		AES_DIR = 3             ; Set AES Operation Direction
		AES_MODE = 5            ; Set AES Operation Mode
		AES_REQUEST = 7         ; Request AES Operation.
	}
	AES_STATUS(0x13d) {     ; AES Status Register
		AES_DONE = 0            ; AES Operation Finished with Success
		Res0 = 1                ; Reserved bit 0
		Res1 = 2                ; Reserved bit 1
		Res2 = 3                ; Reserved bit 2
		Res3 = 4                ; Reserved bit 3
		Res4 = 5                ; Reserved bit 4
		Res5 = 6                ; Reserved bit 5
		AES_ER = 7              ; AES Operation Finished with Error
	}
	AES_STATE(0x13e) {      ; AES Plain and Cipher Text Buffer Register
		AES_STATE0 = 0          ; AES Plain and Cipher Text Buffer bit 0
		AES_STATE1 = 1          ; AES Plain and Cipher Text Buffer bit 1
		AES_STATE2 = 2          ; AES Plain and Cipher Text Buffer bit 2
		AES_STATE3 = 3          ; AES Plain and Cipher Text Buffer bit 3
		AES_STATE4 = 4          ; AES Plain and Cipher Text Buffer bit 4
		AES_STATE5 = 5          ; AES Plain and Cipher Text Buffer bit 5
		AES_STATE6 = 6          ; AES Plain and Cipher Text Buffer bit 6
		AES_STATE7 = 7          ; AES Plain and Cipher Text Buffer bit 7
	}
	AES_KEY(0x13f) {        ; AES Encryption and Decryption Key Buffer Register
		AES_KEY0 = 0            ; AES Encryption/Decryption Key Buffer bit 0
		AES_KEY1 = 1            ; AES Encryption/Decryption Key Buffer bit 1
		AES_KEY2 = 2            ; AES Encryption/Decryption Key Buffer bit 2
		AES_KEY3 = 3            ; AES Encryption/Decryption Key Buffer bit 3
		AES_KEY4 = 4            ; AES Encryption/Decryption Key Buffer bit 4
		AES_KEY5 = 5            ; AES Encryption/Decryption Key Buffer bit 5
		AES_KEY6 = 6            ; AES Encryption/Decryption Key Buffer bit 6
		AES_KEY7 = 7            ; AES Encryption/Decryption Key Buffer bit 7
	}
	TRX_STATUS(0x141) {     ; Transceiver Status Register
		TRX_STATUS0 = 0         ; Transceiver Main Status bit 0
		TRX_STATUS1 = 1         ; Transceiver Main Status bit 1
		TRX_STATUS2 = 2         ; Transceiver Main Status bit 2
		TRX_STATUS3 = 3         ; Transceiver Main Status bit 3
		TRX_STATUS4 = 4         ; Transceiver Main Status bit 4
		TST_STATUS = 5          ; Test mode status
		CCA_STATUS = 6          ; CCA Status Result
		CCA_DONE = 7            ; CCA Algorithm Status
	}
	TRX_STATE(0x142) {      ; Transceiver State Control Register
		TRX_CMD0 = 0            ; State Control Command bit 0
		TRX_CMD1 = 1            ; State Control Command bit 1
		TRX_CMD2 = 2            ; State Control Command bit 2
		TRX_CMD3 = 3            ; State Control Command bit 3
		TRX_CMD4 = 4            ; State Control Command bit 4
		TRAC_STATUS0 = 5        ; Transaction Status bit 0
		TRAC_STATUS1 = 6        ; Transaction Status bit 1
		TRAC_STATUS2 = 7        ; Transaction Status bit 2
	}
	TRX_CTRL_0(0x143) {     ; Reserved
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		Res5 = 5                ; Reserved bit 5
		Res6 = 6                ; Reserved bit 6
		Res7 = 7                ; Reserved bit 7
	}
	TRX_CTRL_1(0x144) {     ; Transceiver Control Register 1
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		TX_AUTO_CRC_ON = 5      ; Enable Automatic CRC Calculation
		IRQ_2_EXT_EN = 6        ; Connect Frame Start IRQ to TC1
		PA_EXT_EN = 7           ; External PA support enable
	}
	PHY_TX_PWR(0x145) {     ; Transceiver Transmit Power Control Register
		TX_PWR0 = 0             ; Transmit Power Setting bit 0
		TX_PWR1 = 1             ; Transmit Power Setting bit 1
		TX_PWR2 = 2             ; Transmit Power Setting bit 2
		TX_PWR3 = 3             ; Transmit Power Setting bit 3
		PA_LT0 = 4              ; Power Amplifier Lead Time bit 0
		PA_LT1 = 5              ; Power Amplifier Lead Time bit 1
		PA_BUF_LT0 = 6          ; Power Amplifier Buffer Lead Time bit 0
		PA_BUF_LT1 = 7          ; Power Amplifier Buffer Lead Time bit 1
	}
	PHY_RSSI(0x146) {       ; Receiver Signal Strength Indicator Register
		RSSI0 = 0               ; Receiver Signal Strength Indicator bit 0
		RSSI1 = 1               ; Receiver Signal Strength Indicator bit 1
		RSSI2 = 2               ; Receiver Signal Strength Indicator bit 2
		RSSI3 = 3               ; Receiver Signal Strength Indicator bit 3
		RSSI4 = 4               ; Receiver Signal Strength Indicator bit 4
		RND_VALUE0 = 5          ; Random Value bit 0
		RND_VALUE1 = 6          ; Random Value bit 1
		RX_CRC_VALID = 7        ; Received Frame CRC Status
	}
	PHY_ED_LEVEL(0x147) {   ; Transceiver Energy Detection Level Register
		ED_LEVEL0 = 0           ; Energy Detection Level bit 0
		ED_LEVEL1 = 1           ; Energy Detection Level bit 1
		ED_LEVEL2 = 2           ; Energy Detection Level bit 2
		ED_LEVEL3 = 3           ; Energy Detection Level bit 3
		ED_LEVEL4 = 4           ; Energy Detection Level bit 4
		ED_LEVEL5 = 5           ; Energy Detection Level bit 5
		ED_LEVEL6 = 6           ; Energy Detection Level bit 6
		ED_LEVEL7 = 7           ; Energy Detection Level bit 7
	}
	PHY_CC_CCA(0x148) {     ; Transceiver Clear Channel Assessment (CCA) Control Register
		CHANNEL0 = 0            ; RX/TX Channel Selection bit 0
		CHANNEL1 = 1            ; RX/TX Channel Selection bit 1
		CHANNEL2 = 2            ; RX/TX Channel Selection bit 2
		CHANNEL3 = 3            ; RX/TX Channel Selection bit 3
		CHANNEL4 = 4            ; RX/TX Channel Selection bit 4
		CCA_MODE0 = 5           ; Select CCA Measurement Mode bit 0
		CCA_MODE1 = 6           ; Select CCA Measurement Mode bit 1
		CCA_REQUEST = 7         ; Manual CCA Measurement Request
	}
	CCA_THRES(0x149) {      ; Transceiver CCA Threshold Setting Register
		CCA_ED_THRES0 = 0       ; ED Threshold Level for CCA Measurement bit 0
		CCA_ED_THRES1 = 1       ; ED Threshold Level for CCA Measurement bit 1
		CCA_ED_THRES2 = 2       ; ED Threshold Level for CCA Measurement bit 2
		CCA_ED_THRES3 = 3       ; ED Threshold Level for CCA Measurement bit 3
		CCA_CS_THRES0 = 4       ; CS Threshold Level for CCA Measurement bit 0
		CCA_CS_THRES1 = 5       ; CS Threshold Level for CCA Measurement bit 1
		CCA_CS_THRES2 = 6       ; CS Threshold Level for CCA Measurement bit 2
		CCA_CS_THRES3 = 7       ; CS Threshold Level for CCA Measurement bit 3
	}
	RX_CTRL(0x14a) {        ; Transceiver Receive Control Register
		PDT_THRES0 = 0          ; Receiver Sensitivity Control bit 0
		PDT_THRES1 = 1          ; Receiver Sensitivity Control bit 1
		PDT_THRES2 = 2          ; Receiver Sensitivity Control bit 2
		PDT_THRES3 = 3          ; Receiver Sensitivity Control bit 3
	}
	SFD_VALUE(0x14b) {      ; Start of Frame Delimiter Value Register
		SFD_VALUE0 = 0          ; Start of Frame Delimiter Value bit 0
		SFD_VALUE1 = 1          ; Start of Frame Delimiter Value bit 1
		SFD_VALUE2 = 2          ; Start of Frame Delimiter Value bit 2
		SFD_VALUE3 = 3          ; Start of Frame Delimiter Value bit 3
		SFD_VALUE4 = 4          ; Start of Frame Delimiter Value bit 4
		SFD_VALUE5 = 5          ; Start of Frame Delimiter Value bit 5
		SFD_VALUE6 = 6          ; Start of Frame Delimiter Value bit 6
		SFD_VALUE7 = 7          ; Start of Frame Delimiter Value bit 7
	}
	TRX_CTRL_2(0x14c) {     ; Transceiver Control Register 2
		OQPSK_DATA_RATE0 = 0    ; Data Rate Selection bit 0
		OQPSK_DATA_RATE1 = 1    ; Data Rate Selection bit 1
		Res0 = 2                ; Reserved bit 0
		Res1 = 3                ; Reserved bit 1
		Res2 = 4                ; Reserved bit 2
		Res3 = 5                ; Reserved bit 3
		Res4 = 6                ; Reserved bit 4
		RX_SAFE_MODE = 7        ; RX Safe Mode
	}
	ANT_DIV(0x14d) {        ; Antenna Diversity Control Register
		ANT_CTRL0 = 0           ; Static Antenna Diversity Switch Control bit 0
		ANT_CTRL1 = 1           ; Static Antenna Diversity Switch Control bit 1
		ANT_EXT_SW_EN = 2       ; Enable External Antenna Switch Control
		ANT_DIV_EN = 3          ; Enable Antenna Diversity
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		ANT_SEL = 7             ; Antenna Diversity Antenna Status
	}
	IRQ_MASK(0x14e) {       ; Transceiver Interrupt Enable Register
		PLL_LOCK_EN = 0         ; PLL Lock Interrupt Enable
		PLL_UNLOCK_EN = 1       ; PLL Unlock Interrupt Enable
		RX_START_EN = 2         ; RX_START Interrupt Enable
		RX_END_EN = 3           ; RX_END Interrupt Enable
		CCA_ED_DONE_EN = 4      ; End of ED Measurement Interrupt Enable
		AMI_EN = 5              ; Address Match Interrupt Enable
		TX_END_EN = 6           ; TX_END Interrupt Enable
		AWAKE_EN = 7            ; Awake Interrupt Enable
	}
	IRQ_STATUS(0x14f) {     ; Transceiver Interrupt Status Register
		PLL_LOCK = 0            ; PLL Lock Interrupt Status
		PLL_UNLOCK = 1          ; PLL Unlock Interrupt Status
		RX_START = 2            ; RX_START Interrupt Status
		RX_END = 3              ; RX_END Interrupt Status
		CCA_ED_DONE = 4         ; End of ED Measurement Interrupt Status
		AMI = 5                 ; Address Match Interrupt Status
		TX_END = 6              ; TX_END Interrupt Status
		AWAKE = 7               ; Awake Interrupt Status
	}
	VREG_CTRL(0x150) {      ; Voltage Regulator Control and Status Register
		DVDD_OK = 2             ; DVDD Supply Voltage Valid
		DVREG_EXT = 3           ; Use External DVDD Regulator
		AVDD_OK = 6             ; AVDD Supply Voltage Valid
		AVREG_EXT = 7           ; Use External AVDD Regulator
	}
	BATMON(0x151) {         ; Battery Monitor Control and Status Register
		BATMON_VTH0 = 0         ; Battery Monitor Threshold Voltage bit 0
		BATMON_VTH1 = 1         ; Battery Monitor Threshold Voltage bit 1
		BATMON_VTH2 = 2         ; Battery Monitor Threshold Voltage bit 2
		BATMON_VTH3 = 3         ; Battery Monitor Threshold Voltage bit 3
		BATMON_HR = 4           ; Battery Monitor Voltage Range
		BATMON_OK = 5           ; Battery Monitor Status
		BAT_LOW_EN = 6          ; Battery Monitor Interrupt Enable
		BAT_LOW = 7             ; Battery Monitor Interrupt Status
	}
	XOSC_CTRL(0x152) {      ; Crystal Oscillator Control Register
		XTAL_TRIM0 = 0          ; Crystal Oscillator Load Capacitance Trimming bit 0
		XTAL_TRIM1 = 1          ; Crystal Oscillator Load Capacitance Trimming bit 1
		XTAL_TRIM2 = 2          ; Crystal Oscillator Load Capacitance Trimming bit 2
		XTAL_TRIM3 = 3          ; Crystal Oscillator Load Capacitance Trimming bit 3
		XTAL_MODE0 = 4          ; Crystal Oscillator Operating Mode bit 0
		XTAL_MODE1 = 5          ; Crystal Oscillator Operating Mode bit 1
		XTAL_MODE2 = 6          ; Crystal Oscillator Operating Mode bit 2
		XTAL_MODE3 = 7          ; Crystal Oscillator Operating Mode bit 3
	}
	RX_SYN(0x155) {         ; Transceiver Receiver Sensitivity Control Register
		RX_PDT_LEVEL0 = 0       ; Reduce Receiver Sensitivity bit 0
		RX_PDT_LEVEL1 = 1       ; Reduce Receiver Sensitivity bit 1
		RX_PDT_LEVEL2 = 2       ; Reduce Receiver Sensitivity bit 2
		RX_PDT_LEVEL3 = 3       ; Reduce Receiver Sensitivity bit 3
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		RX_PDT_DIS = 7          ; Prevent Frame Reception
	}
	XAH_CTRL_1(0x157) {     ; Transceiver Acknowledgment Frame Control Register 1
		AACK_PROM_MODE = 1      ; Enable Promiscuous Mode
		AACK_ACK_TIME = 2       ; Reduce Acknowledgment Time
		AACK_UPLD_RES_FT = 4    ; Process Reserved Frames
		AACK_FLTR_RES_FT = 5    ; Filter Reserved Frames
	}
	FTN_CTRL(0x158) {       ; Transceiver Filter Tuning Control Register
		FTN_START = 7           ; Start Calibration Loop of Filter Tuning Network
	}
	PLL_CF(0x15a) {         ; Transceiver Center Frequency Calibration Control Register
		PLL_CF_START = 7        ; Start Center Frequency Calibration
	}
	PLL_DCU(0x15b) {        ; Transceiver Delay Cell Calibration Control Register
		PLL_DCU_START = 7       ; Start Delay Cell Calibration
	}
	PART_NUM(0x15c) {       ; Device Identification Register (Part Number)
		PART_NUM0 = 0           ; Part Number bit 0
		PART_NUM1 = 1           ; Part Number bit 1
		PART_NUM2 = 2           ; Part Number bit 2
		PART_NUM3 = 3           ; Part Number bit 3
		PART_NUM4 = 4           ; Part Number bit 4
		PART_NUM5 = 5           ; Part Number bit 5
		PART_NUM6 = 6           ; Part Number bit 6
		PART_NUM7 = 7           ; Part Number bit 7
	}
	VERSION_NUM(0x15d) {    ; Device Identification Register (Version Number)
		VERSION_NUM0 = 0        ; Version Number bit 0
		VERSION_NUM1 = 1        ; Version Number bit 1
		VERSION_NUM2 = 2        ; Version Number bit 2
		VERSION_NUM3 = 3        ; Version Number bit 3
		VERSION_NUM4 = 4        ; Version Number bit 4
		VERSION_NUM5 = 5        ; Version Number bit 5
		VERSION_NUM6 = 6        ; Version Number bit 6
		VERSION_NUM7 = 7        ; Version Number bit 7
	}
	MAN_ID_0(0x15e) {       ; Device Identification Register (Manufacture ID Low Byte)
		MAN_ID_00 = 0           ; Manufacturer ID (Low Byte)
		MAN_ID_01 = 1           ; Manufacturer ID (Low Byte)
		MAN_ID_02 = 2           ; Manufacturer ID (Low Byte)
		MAN_ID_03 = 3           ; Manufacturer ID (Low Byte)
		MAN_ID_04 = 4           ; Manufacturer ID (Low Byte)
		MAN_ID_05 = 5           ; Manufacturer ID (Low Byte)
		MAN_ID_06 = 6           ; Manufacturer ID (Low Byte)
		MAN_ID_07 = 7           ; Manufacturer ID (Low Byte)
	}
	MAN_ID_1(0x15f) {       ; Device Identification Register (Manufacture ID High Byte)
		MAN_ID_0 = 0            ; Manufacturer ID (High Byte) bit 0
		MAN_ID_1 = 1            ; Manufacturer ID (High Byte) bit 1
		MAN_ID_2 = 2            ; Manufacturer ID (High Byte) bit 2
		MAN_ID_3 = 3            ; Manufacturer ID (High Byte) bit 3
		MAN_ID_4 = 4            ; Manufacturer ID (High Byte) bit 4
		MAN_ID_5 = 5            ; Manufacturer ID (High Byte) bit 5
		MAN_ID_6 = 6            ; Manufacturer ID (High Byte) bit 6
		MAN_ID_7 = 7            ; Manufacturer ID (High Byte) bit 7
	}
	SHORT_ADDR_0(0x160) {   ; Transceiver MAC Short Address Register (Low Byte)
		SHORT_ADDR_00 = 0       ; MAC Short Address
		SHORT_ADDR_01 = 1       ; MAC Short Address
		SHORT_ADDR_02 = 2       ; MAC Short Address
		SHORT_ADDR_03 = 3       ; MAC Short Address
		SHORT_ADDR_04 = 4       ; MAC Short Address
		SHORT_ADDR_05 = 5       ; MAC Short Address
		SHORT_ADDR_06 = 6       ; MAC Short Address
		SHORT_ADDR_07 = 7       ; MAC Short Address
	}
	SHORT_ADDR_1(0x161) {   ; Transceiver MAC Short Address Register (High Byte)
		SHORT_ADDR_0 = 0        ; MAC Short Address bit 0
		SHORT_ADDR_1 = 1        ; MAC Short Address bit 1
		SHORT_ADDR_2 = 2        ; MAC Short Address bit 2
		SHORT_ADDR_3 = 3        ; MAC Short Address bit 3
		SHORT_ADDR_4 = 4        ; MAC Short Address bit 4
		SHORT_ADDR_5 = 5        ; MAC Short Address bit 5
		SHORT_ADDR_6 = 6        ; MAC Short Address bit 6
		SHORT_ADDR_7 = 7        ; MAC Short Address bit 7
	}
	PAN_ID_0(0x162) {       ; Transceiver Personal Area Network ID Register (Low Byte)
		PAN_ID_00 = 0           ; MAC Personal Area Network ID
		PAN_ID_01 = 1           ; MAC Personal Area Network ID
		PAN_ID_02 = 2           ; MAC Personal Area Network ID
		PAN_ID_03 = 3           ; MAC Personal Area Network ID
		PAN_ID_04 = 4           ; MAC Personal Area Network ID
		PAN_ID_05 = 5           ; MAC Personal Area Network ID
		PAN_ID_06 = 6           ; MAC Personal Area Network ID
		PAN_ID_07 = 7           ; MAC Personal Area Network ID
	}
	PAN_ID_1(0x163) {       ; Transceiver Personal Area Network ID Register (High Byte)
		PAN_ID_0 = 0            ; MAC Personal Area Network ID bit 0
		PAN_ID_1 = 1            ; MAC Personal Area Network ID bit 1
		PAN_ID_2 = 2            ; MAC Personal Area Network ID bit 2
		PAN_ID_3 = 3            ; MAC Personal Area Network ID bit 3
		PAN_ID_4 = 4            ; MAC Personal Area Network ID bit 4
		PAN_ID_5 = 5            ; MAC Personal Area Network ID bit 5
		PAN_ID_6 = 6            ; MAC Personal Area Network ID bit 6
		PAN_ID_7 = 7            ; MAC Personal Area Network ID bit 7
	}
	IEEE_ADDR_0(0x164) {    ; Transceiver MAC IEEE Address Register 0
		IEEE_ADDR_00 = 0        ; MAC IEEE Address
		IEEE_ADDR_01 = 1        ; MAC IEEE Address
		IEEE_ADDR_02 = 2        ; MAC IEEE Address
		IEEE_ADDR_03 = 3        ; MAC IEEE Address
		IEEE_ADDR_04 = 4        ; MAC IEEE Address
		IEEE_ADDR_05 = 5        ; MAC IEEE Address
		IEEE_ADDR_06 = 6        ; MAC IEEE Address
		IEEE_ADDR_07 = 7        ; MAC IEEE Address
	}
	IEEE_ADDR_1(0x165) {    ; Transceiver MAC IEEE Address Register 1
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_2(0x166) {    ; Transceiver MAC IEEE Address Register 2
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_3(0x167) {    ; Transceiver MAC IEEE Address Register 3
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_4(0x168) {    ; Transceiver MAC IEEE Address Register 4
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_5(0x169) {    ; Transceiver MAC IEEE Address Register 5
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_6(0x16a) {    ; Transceiver MAC IEEE Address Register 6
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	IEEE_ADDR_7(0x16b) {    ; Transceiver MAC IEEE Address Register 7
		IEEE_ADDR_0 = 0         ; MAC IEEE Address bit 0
		IEEE_ADDR_1 = 1         ; MAC IEEE Address bit 1
		IEEE_ADDR_2 = 2         ; MAC IEEE Address bit 2
		IEEE_ADDR_3 = 3         ; MAC IEEE Address bit 3
		IEEE_ADDR_4 = 4         ; MAC IEEE Address bit 4
		IEEE_ADDR_5 = 5         ; MAC IEEE Address bit 5
		IEEE_ADDR_6 = 6         ; MAC IEEE Address bit 6
		IEEE_ADDR_7 = 7         ; MAC IEEE Address bit 7
	}
	XAH_CTRL_0(0x16c) {     ; Transceiver Extended Operating Mode Control Register
		SLOTTED_OPERATION = 0   ; Set Slotted Acknowledgment
		MAX_CSMA_RETRIES0 = 1   ; Maximum Number of CSMA-CA Procedure Repetition Attempts bit 0
		MAX_CSMA_RETRIES1 = 2   ; Maximum Number of CSMA-CA Procedure Repetition Attempts bit 1
		MAX_CSMA_RETRIES2 = 3   ; Maximum Number of CSMA-CA Procedure Repetition Attempts bit 2
		MAX_FRAME_RETRIES0 = 4  ; Maximum Number of Frame Re-transmission Attempts bit 0
		MAX_FRAME_RETRIES1 = 5  ; Maximum Number of Frame Re-transmission Attempts bit 1
		MAX_FRAME_RETRIES2 = 6  ; Maximum Number of Frame Re-transmission Attempts bit 2
		MAX_FRAME_RETRIES3 = 7  ; Maximum Number of Frame Re-transmission Attempts bit 3
	}
	CSMA_SEED_0(0x16d) {    ; Transceiver CSMA-CA Random Number Generator Seed Register
		CSMA_SEED_00 = 0        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_01 = 1        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_02 = 2        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_03 = 3        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_04 = 4        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_05 = 5        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_06 = 6        ; Seed Value for CSMA Random Number Generator
		CSMA_SEED_07 = 7        ; Seed Value for CSMA Random Number Generator
	}
	CSMA_SEED_1(0x16e) {    ; Transceiver Acknowledgment Frame Control Register 2
		CSMA_SEED_10 = 0        ; Seed Value for CSMA Random Number Generator bit 0
		CSMA_SEED_11 = 1        ; Seed Value for CSMA Random Number Generator bit 1
		CSMA_SEED_12 = 2        ; Seed Value for CSMA Random Number Generator bit 2
		AACK_I_AM_COORD = 3     ; Set Personal Area Network Coordinator
		AACK_DIS_ACK = 4        ; Disable Acknowledgment Frame Transmission
		AACK_SET_PD = 5         ; Set Frame Pending Sub-field
		AACK_FVN_MODE0 = 6      ; Acknowledgment Frame Filter Mode bit 0
		AACK_FVN_MODE1 = 7      ; Acknowledgment Frame Filter Mode bit 1
	}
	CSMA_BE(0x16f) {        ; Transceiver CSMA-CA Back-off Exponent Control Register
		MIN_BE0 = 0             ; Minimum Back-off Exponent bit 0
		MIN_BE1 = 1             ; Minimum Back-off Exponent bit 1
		MIN_BE2 = 2             ; Minimum Back-off Exponent bit 2
		MIN_BE3 = 3             ; Minimum Back-off Exponent bit 3
		MAX_BE0 = 4             ; Maximum Back-off Exponent bit 0
		MAX_BE1 = 5             ; Maximum Back-off Exponent bit 1
		MAX_BE2 = 6             ; Maximum Back-off Exponent bit 2
		MAX_BE3 = 7             ; Maximum Back-off Exponent bit 3
	}
	TST_CTRL_DIGI(0x176) {  ; Transceiver Digital Test Control Register
		TST_CTRL_DIG0 = 0       ; Digital Test Controller Register bit 0
		TST_CTRL_DIG1 = 1       ; Digital Test Controller Register bit 1
		TST_CTRL_DIG2 = 2       ; Digital Test Controller Register bit 2
		TST_CTRL_DIG3 = 3       ; Digital Test Controller Register bit 3
	}
	TST_RX_LENGTH(0x17b) {  ; Transceiver Received Frame Length Register
		RX_LENGTH0 = 0          ; Received Frame Length bit 0
		RX_LENGTH1 = 1          ; Received Frame Length bit 1
		RX_LENGTH2 = 2          ; Received Frame Length bit 2
		RX_LENGTH3 = 3          ; Received Frame Length bit 3
		RX_LENGTH4 = 4          ; Received Frame Length bit 4
		RX_LENGTH5 = 5          ; Received Frame Length bit 5
		RX_LENGTH6 = 6          ; Received Frame Length bit 6
		RX_LENGTH7 = 7          ; Received Frame Length bit 7
	}
	TRXFBST(0x180)          ; Start of frame buffer
	TRXFBEND(0x1ff)         ; End of frame buffer
	PINA(0x00)              ; Port A Input Pins Address
	DDRA(0x01)              ; Port A Data Direction Register
	PORTA(0x02)             ; Port A Data Register
	PINB(0x03)              ; Port B Input Pins Address
	DDRB(0x04)              ; Port B Data Direction Register
	PORTB(0x05)             ; Port B Data Register
	PINC(0x06)              ; Port C Input Pins Address
	DDRC(0x07)              ; Port C Data Direction Register
	PORTC(0x08)             ; Port C Data Register
	PIND(0x09)              ; Port D Input Pins Address
	DDRD(0x0a)              ; Port D Data Direction Register
	PORTD(0x0b)             ; Port D Data Register
	PINE(0x0c)              ; Port E Input Pins Address
	DDRE(0x0d)              ; Port E Data Direction Register
	PORTE(0x0e)             ; Port E Data Register
	PINF(0x0f)              ; Port F Input Pins Address
	DDRF(0x10)              ; Port F Data Direction Register
	PORTF(0x11)             ; Port F Data Register
	PING(0x12)              ; Port G Input Pins Address
	DDRG(0x13)              ; Port G Data Direction Register
	PORTG(0x14)             ; Port G Data Register
	TIFR0(0x15) {           ; Timer/Counter0 Interrupt Flag Register
		TOV0 = 0                ; Timer/Counter0 Overflow Flag
		OCF0A = 1               ; Timer/Counter0 Output Compare A Match Flag
		OCF0B = 2               ; Timer/Counter0 Output Compare B Match Flag
		Res0 = 3                ; Reserved bit 0
		Res1 = 4                ; Reserved bit 1
		Res2 = 5                ; Reserved bit 2
		Res3 = 6                ; Reserved bit 3
		Res4 = 7                ; Reserved bit 4
	}
	TIFR1(0x16) {           ; Timer/Counter1 Interrupt Flag Register
		TOV1 = 0                ; Timer/Counter1 Overflow Flag
		OCF1A = 1               ; Timer/Counter1 Output Compare A Match Flag
		OCF1B = 2               ; Timer/Counter1 Output Compare B Match Flag
		OCF1C = 3               ; Timer/Counter1 Output Compare C Match Flag
		ICF1 = 5                ; Timer/Counter1 Input Capture Flag
	}
	TIFR2(0x17) {           ; Timer/Counter Interrupt Flag Register
		TOV2 = 0                ; Timer/Counter2 Overflow Flag
		OCF2A = 1               ; Output Compare Flag 2 A
		OCF2B = 2               ; Output Compare Flag 2 B
		Res0 = 3                ; Reserved Bit bit 0
		Res1 = 4                ; Reserved Bit bit 1
		Res2 = 5                ; Reserved Bit bit 2
		Res3 = 6                ; Reserved Bit bit 3
		Res4 = 7                ; Reserved Bit bit 4
	}
	TIFR3(0x18) {           ; Timer/Counter3 Interrupt Flag Register
		TOV3 = 0                ; Timer/Counter3 Overflow Flag
		OCF3A = 1               ; Timer/Counter3 Output Compare A Match Flag
		OCF3B = 2               ; Timer/Counter3 Output Compare B Match Flag
		OCF3C = 3               ; Timer/Counter3 Output Compare C Match Flag
		ICF3 = 5                ; Timer/Counter3 Input Capture Flag
	}
	TIFR4(0x19) {           ; Timer/Counter4 Interrupt Flag Register
		TOV4 = 0                ; Timer/Counter4 Overflow Flag
		OCF4A = 1               ; Timer/Counter4 Output Compare A Match Flag
		OCF4B = 2               ; Timer/Counter4 Output Compare B Match Flag
		OCF4C = 3               ; Timer/Counter4 Output Compare C Match Flag
		ICF4 = 5                ; Timer/Counter4 Input Capture Flag
	}
	TIFR5(0x1a) {           ; Timer/Counter5 Interrupt Flag Register
		TOV5 = 0                ; Timer/Counter5 Overflow Flag
		OCF5A = 1               ; Timer/Counter5 Output Compare A Match Flag
		OCF5B = 2               ; Timer/Counter5 Output Compare B Match Flag
		OCF5C = 3               ; Timer/Counter5 Output Compare C Match Flag
		ICF5 = 5                ; Timer/Counter5 Input Capture Flag
	}
	PCIFR(0x1b) {           ; Pin Change Interrupt Flag Register
		PCIF0 = 0               ; Pin Change Interrupt Flags bit 0
		PCIF1 = 1               ; Pin Change Interrupt Flags bit 1
		PCIF2 = 2               ; Pin Change Interrupt Flags bit 2
		Res0 = 3                ; Reserved Bit bit 0
		Res1 = 4                ; Reserved Bit bit 1
		Res2 = 5                ; Reserved Bit bit 2
		Res3 = 6                ; Reserved Bit bit 3
		Res4 = 7                ; Reserved Bit bit 4
	}
	EIFR(0x1c) {            ; External Interrupt Flag Register
		INTF0 = 0               ; External Interrupt Flag bit 0
		INTF1 = 1               ; External Interrupt Flag bit 1
		INTF2 = 2               ; External Interrupt Flag bit 2
		INTF3 = 3               ; External Interrupt Flag bit 3
		INTF4 = 4               ; External Interrupt Flag bit 4
		INTF5 = 5               ; External Interrupt Flag bit 5
		INTF6 = 6               ; External Interrupt Flag bit 6
		INTF7 = 7               ; External Interrupt Flag bit 7
	}
	EIMSK(0x1d) {           ; External Interrupt Mask Register
		INT0 = 0                ; External Interrupt Request Enable bit 0
		INT1 = 1                ; External Interrupt Request Enable bit 1
		INT2 = 2                ; External Interrupt Request Enable bit 2
		INT3 = 3                ; External Interrupt Request Enable bit 3
		INT4 = 4                ; External Interrupt Request Enable bit 4
		INT5 = 5                ; External Interrupt Request Enable bit 5
		INT6 = 6                ; External Interrupt Request Enable bit 6
		INT7 = 7                ; External Interrupt Request Enable bit 7
	}
	GPIOR0(0x1e) {          ; General Purpose IO Register 0
		GPIOR00 = 0             ; General Purpose I/O Register 0 Value
		GPIOR01 = 1             ; General Purpose I/O Register 0 Value
		GPIOR02 = 2             ; General Purpose I/O Register 0 Value
		GPIOR03 = 3             ; General Purpose I/O Register 0 Value
		GPIOR04 = 4             ; General Purpose I/O Register 0 Value
		GPIOR05 = 5             ; General Purpose I/O Register 0 Value
		GPIOR06 = 6             ; General Purpose I/O Register 0 Value
		GPIOR07 = 7             ; General Purpose I/O Register 0 Value
	}
	EECR(0x1f) {            ; EEPROM Control Register
		EERE = 0                ; EEPROM Read Enable
		EEPE = 1                ; EEPROM Programming Enable
		EEMPE = 2               ; EEPROM Master Write Enable
		EERIE = 3               ; EEPROM Ready Interrupt Enable
		EEPM0 = 4               ; EEPROM Programming Mode bit 0
		EEPM1 = 5               ; EEPROM Programming Mode bit 1
		Res0 = 6                ; Reserved bit 0
		Res1 = 7                ; Reserved bit 1
	}
	EEDR(0x20)              ; EEPROM Data Register
	EEAR(0x21, 0x22)        ; EEPROM Address Register  Bytes
	GTCCR(0x23) {           ; General Timer/Counter Control Register
		PSRSYNC = 0             ; Prescaler Reset for Synchronous Timer/Counters
		PSRASY = 1              ; Prescaler Reset Timer/Counter2
		Res0 = 2                ; Reserved bit 0
		Res1 = 3                ; Reserved bit 1
		Res2 = 4                ; Reserved bit 2
		Res3 = 5                ; Reserved bit 3
		Res4 = 6                ; Reserved bit 4
		TSM = 7                 ; Timer/Counter Synchronization Mode
	}
	TCCR0A(0x24) {          ; Timer/Counter0 Control Register A
		WGM00 = 0               ; Waveform Generation Mode bit 0
		WGM01 = 1               ; Waveform Generation Mode bit 1
		Res0 = 2                ; Reserved Bit bit 0
		Res1 = 3                ; Reserved Bit bit 1
		COM0B0 = 4              ; Compare Match Output B Mode bit 0
		COM0B1 = 5              ; Compare Match Output B Mode bit 1
		COM0A0 = 6              ; Compare Match Output A Mode bit 0
		COM0A1 = 7              ; Compare Match Output A Mode bit 1
	}
	TCCR0B(0x25) {          ; Timer/Counter0 Control Register B
		CS00 = 0                ; Clock Select bit 0
		CS01 = 1                ; Clock Select bit 1
		CS02 = 2                ; Clock Select bit 2
		WGM02 = 3               ; 
		Res0 = 4                ; Reserved Bit bit 0
		Res1 = 5                ; Reserved Bit bit 1
		FOC0B = 6               ; Force Output Compare B
		FOC0A = 7               ; Force Output Compare A
	}
	TCNT0(0x26)             ; Timer/Counter0 Register
	OCR0A(0x27)             ; Timer/Counter0 Output Compare Register
	OCR0B(0x28)             ; Timer/Counter0 Output Compare Register B
	GPIOR1(0x2a) {          ; General Purpose IO Register 1
		GPIOR0 = 0              ; General Purpose I/O Register 1 Value bit 0
		GPIOR1 = 1              ; General Purpose I/O Register 1 Value bit 1
		GPIOR2 = 2              ; General Purpose I/O Register 1 Value bit 2
		GPIOR3 = 3              ; General Purpose I/O Register 1 Value bit 3
		GPIOR4 = 4              ; General Purpose I/O Register 1 Value bit 4
		GPIOR5 = 5              ; General Purpose I/O Register 1 Value bit 5
		GPIOR6 = 6              ; General Purpose I/O Register 1 Value bit 6
		GPIOR7 = 7              ; General Purpose I/O Register 1 Value bit 7
	}
	GPIOR2(0x2b) {          ; General Purpose I/O Register 2
		GPIOR0 = 0              ; General Purpose I/O Register 2 Value bit 0
		GPIOR1 = 1              ; General Purpose I/O Register 2 Value bit 1
		GPIOR2 = 2              ; General Purpose I/O Register 2 Value bit 2
		GPIOR3 = 3              ; General Purpose I/O Register 2 Value bit 3
		GPIOR4 = 4              ; General Purpose I/O Register 2 Value bit 4
		GPIOR5 = 5              ; General Purpose I/O Register 2 Value bit 5
		GPIOR6 = 6              ; General Purpose I/O Register 2 Value bit 6
		GPIOR7 = 7              ; General Purpose I/O Register 2 Value bit 7
	}
	SPCR(0x2c) {            ; SPI Control Register
		SPR0 = 0                ; SPI Clock Rate Select 1 and 0 bit 0
		SPR1 = 1                ; SPI Clock Rate Select 1 and 0 bit 1
		CPHA = 2                ; Clock Phase
		CPOL = 3                ; Clock polarity
		MSTR = 4                ; Master/Slave Select
		DORD = 5                ; Data Order
		SPE = 6                 ; SPI Enable
		SPIE = 7                ; SPI Interrupt Enable
	}
	SPSR(0x2d) {            ; SPI Status Register
		SPI2X = 0               ; Double SPI Speed Bit
		Res0 = 1                ; Reserved bit 0
		Res1 = 2                ; Reserved bit 1
		Res2 = 3                ; Reserved bit 2
		Res3 = 4                ; Reserved bit 3
		Res4 = 5                ; Reserved bit 4
		WCOL = 6                ; Write Collision Flag
		SPIF = 7                ; SPI Interrupt Flag
	}
	SPDR(0x2e)              ; SPI Data Register
	ACSR(0x30) {            ; Analog Comparator Control And Status Register
		ACIS0 = 0               ; Analog Comparator Interrupt Mode Select bit 0
		ACIS1 = 1               ; Analog Comparator Interrupt Mode Select bit 1
		ACIC = 2                ; Analog Comparator Input Capture Enable
		ACIE = 3                ; Analog Comparator Interrupt Enable
		ACI = 4                 ; Analog Comparator Interrupt Flag
		ACO = 5                 ; Analog Compare Output
		ACBG = 6                ; Analog Comparator Bandgap Select
		ACD = 7                 ; Analog Comparator Disable
	}
	OCDR(0x31) {            ; On-Chip Debug Register
		OCDR0 = 0               ; On-Chip Debug Register Data bit 0
		OCDR1 = 1               ; On-Chip Debug Register Data bit 1
		OCDR2 = 2               ; On-Chip Debug Register Data bit 2
		OCDR3 = 3               ; On-Chip Debug Register Data bit 3
		OCDR4 = 4               ; On-Chip Debug Register Data bit 4
		OCDR5 = 5               ; On-Chip Debug Register Data bit 5
		OCDR6 = 6               ; On-Chip Debug Register Data bit 6
		OCDR7 = 7               ; On-Chip Debug Register Data bit 7
	}
	SMCR(0x33) {            ; Sleep Mode Control Register
		SE = 0                  ; Sleep Enable
		SM0 = 1                 ; Sleep Mode Select bits bit 0
		SM1 = 2                 ; Sleep Mode Select bits bit 1
		SM2 = 3                 ; Sleep Mode Select bits bit 2
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		Res3 = 7                ; Reserved bit 3
	}
	MCUSR(0x34) {           ; MCU Status Register
		PORF = 0                ; Power-on Reset Flag
		EXTRF = 1               ; External Reset Flag
		BORF = 2                ; Brown-out Reset Flag
		WDRF = 3                ; Watchdog Reset Flag
		JTRF = 4                ; JTAG Reset Flag
		Res0 = 5                ; Reserved bit 0
		Res1 = 6                ; Reserved bit 1
		Res2 = 7                ; Reserved bit 2
	}
	MCUCR(0x35) {           ; MCU Control Register
		IVCE = 0                ; Interrupt Vector Change Enable
		IVSEL = 1               ; Interrupt Vector Select
		PUD = 4                 ; Pull-up Disable
		JTD = 7                 ; JTAG Interface Disable
	}
	SPMCSR(0x37) {          ; Store Program Memory Control Register
		SPMEN = 0               ; Store Program Memory Enable
		PGERS = 1               ; Page Erase
		PGWRT = 2               ; Page Write
		BLBSET = 3              ; Boot Lock Bit Set
		RWWSRE = 4              ; Read While Write Section Read Enable
		SIGRD = 5               ; Signature Row Read
		RWWSB = 6               ; Read While Write Section Busy
		SPMIE = 7               ; SPM Interrupt Enable
	}
	RAMPZ(0x3b) {           ; Extended Z-pointer Register for ELPM/SPM
		RAMPZ0 = 0              ; Extended Z-Pointer Value bit 0
		RAMPZ1 = 1              ; Extended Z-Pointer Value bit 1
		Res0 = 2                ; Reserved bit 0
		Res1 = 3                ; Reserved bit 1
		Res2 = 4                ; Reserved bit 2
		Res3 = 5                ; Reserved bit 3
		Res4 = 6                ; Reserved bit 4
		Res5 = 7                ; Reserved bit 5
	}
	SP(0x3d, 0x3e)          ; Stack Pointer 
	SREG(0x3f) {            ; Status Register
		C = 0                   ; Carry Flag
		Z = 1                   ; Zero Flag
		N = 2                   ; Negative Flag
		V = 3                   ; Two's Complement Overflow Flag
		S = 4                   ; Sign Bit
		H = 5                   ; Half Carry Flag
		T = 6                   ; Bit Copy Storage
		I = 7                   ; Global Interrupt Enable
	}
	WDTCSR(0x60) {          ; Watchdog Timer Control Register
		WDP0 = 0                ; Watchdog Timer Prescaler Bits bit 0
		WDP1 = 1                ; Watchdog Timer Prescaler Bits bit 1
		WDP2 = 2                ; Watchdog Timer Prescaler Bits bit 2
		WDE = 3                 ; Watch Dog Enable
		WDCE = 4                ; Watchdog Change Enable
		WDP3 = 5                ; Watchdog Timer Prescaler Bits bit 3
		WDIE = 6                ; Watchdog Timeout Interrupt Enable
		WDIF = 7                ; Watchdog Timeout Interrupt Flag
	}
	CLKPR(0x61) {           ; Clock Prescale Register
		CLKPS0 = 0              ; Clock Prescaler Select Bits bit 0
		CLKPS1 = 1              ; Clock Prescaler Select Bits bit 1
		CLKPS2 = 2              ; Clock Prescaler Select Bits bit 2
		CLKPS3 = 3              ; Clock Prescaler Select Bits bit 3
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		Res2 = 6                ; Reserved bit 2
		CLKPCE = 7              ; Clock Prescaler Change Enable
	}
	PRR2(0x63) {            ; Power Reduction Register 2
		PRRAM0 = 0              ; Power Reduction SRAM0
		PRRAM1 = 1              ; Power Reduction SRAM1
		PRRAM2 = 2              ; Power Reduction SRAM2
		PRRAM3 = 3              ; Power Reduction SRAM3
	}
	PRR0(0x64) {            ; Power Reduction Register0
		PRADC = 0               ; Power Reduction ADC
		PRUSART0 = 1            ; Power Reduction USART0
		PRSPI = 2               ; Power Reduction Serial Peripheral Interface
		PRTIM1 = 3              ; Power Reduction Timer/Counter1
		PRPGA = 4               ; Power Reduction PGA
		PRTIM0 = 5              ; Power Reduction Timer/Counter0
		PRTIM2 = 6              ; Power Reduction Timer/Counter2
		PRTWI = 7               ; Power Reduction TWI
	}
	PRR1(0x65) {            ; Power Reduction Register 1
		PRUSART1 = 0            ; Power Reduction USART1
		PRTIM3 = 3              ; Power Reduction Timer/Counter3
		PRTIM4 = 4              ; Power Reduction Timer/Counter4
		PRTIM5 = 5              ; Power Reduction Timer/Counter5
		PRTRX24 = 6             ; Power Reduction Transceiver
	}
	OSCCAL(0x66) {          ; Oscillator Calibration Value
		CAL0 = 0                ; Oscillator Calibration Tuning Value bit 0
		OSCCAL0 = 0             ; Oscillator Calibration  bit 0
		CAL1 = 1                ; Oscillator Calibration Tuning Value bit 1
		OSCCAL1 = 1             ; Oscillator Calibration  bit 1
		CAL2 = 2                ; Oscillator Calibration Tuning Value bit 2
		OSCCAL2 = 2             ; Oscillator Calibration  bit 2
		CAL3 = 3                ; Oscillator Calibration Tuning Value bit 3
		OSCCAL3 = 3             ; Oscillator Calibration  bit 3
		CAL4 = 4                ; Oscillator Calibration Tuning Value bit 4
		OSCCAL4 = 4             ; Oscillator Calibration  bit 4
		CAL5 = 5                ; Oscillator Calibration Tuning Value bit 5
		OSCCAL5 = 5             ; Oscillator Calibration  bit 5
		CAL6 = 6                ; Oscillator Calibration Tuning Value bit 6
		OSCCAL6 = 6             ; Oscillator Calibration  bit 6
		CAL7 = 7                ; Oscillator Calibration Tuning Value bit 7
		OSCCAL7 = 7             ; Oscillator Calibration  bit 7
	}
	BGCR(0x67) {            ; Reference Voltage Calibration Register
		BGCAL0 = 0              ; Coarse Calibration Bits bit 0
		BGCAL1 = 1              ; Coarse Calibration Bits bit 1
		BGCAL2 = 2              ; Coarse Calibration Bits bit 2
		BGCAL_FINE0 = 3         ; Fine Calibration Bits bit 0
		BGCAL_FINE1 = 4         ; Fine Calibration Bits bit 1
		BGCAL_FINE2 = 5         ; Fine Calibration Bits bit 2
		BGCAL_FINE3 = 6         ; Fine Calibration Bits bit 3
		Res = 7                 ; Reserved Bit
	}
	PCICR(0x68) {           ; Pin Change Interrupt Control Register
		PCIE0 = 0               ; Pin Change Interrupt Enables bit 0
		PCIE1 = 1               ; Pin Change Interrupt Enables bit 1
		PCIE2 = 2               ; Pin Change Interrupt Enables bit 2
		Res0 = 3                ; Reserved Bit bit 0
		Res1 = 4                ; Reserved Bit bit 1
		Res2 = 5                ; Reserved Bit bit 2
		Res3 = 6                ; Reserved Bit bit 3
		Res4 = 7                ; Reserved Bit bit 4
	}
	EICRA(0x69) {           ; External Interrupt Control Register A
		ISC00 = 0               ; External Interrupt 0 Sense Control Bit bit 0
		ISC01 = 1               ; External Interrupt 0 Sense Control Bit bit 1
		ISC10 = 2               ; External Interrupt 1 Sense Control Bit bit 0
		ISC11 = 3               ; External Interrupt 1 Sense Control Bit bit 1
		ISC20 = 4               ; External Interrupt 2 Sense Control Bit bit 0
		ISC21 = 5               ; External Interrupt 2 Sense Control Bit bit 1
		ISC30 = 6               ; External Interrupt 3 Sense Control Bit bit 0
		ISC31 = 7               ; External Interrupt 3 Sense Control Bit bit 1
	}
	EICRB(0x6a) {           ; External Interrupt Control Register B
		ISC40 = 0               ; External Interrupt 4 Sense Control Bit bit 0
		ISC41 = 1               ; External Interrupt 4 Sense Control Bit bit 1
		ISC50 = 2               ; External Interrupt 5 Sense Control Bit bit 0
		ISC51 = 3               ; External Interrupt 5 Sense Control Bit bit 1
		ISC60 = 4               ; External Interrupt 6 Sense Control Bit bit 0
		ISC61 = 5               ; External Interrupt 6 Sense Control Bit bit 1
		ISC70 = 6               ; External Interrupt 7 Sense Control Bit bit 0
		ISC71 = 7               ; External Interrupt 7 Sense Control Bit bit 1
	}
	PCMSK0(0x6b)            ; Pin Change Mask Register 0
	PCMSK1(0x6c) {          ; Pin Change Mask Register 1
		PCINT0 = 0              ; Pin Change Enable Mask bit 0
		PCINT1 = 1              ; Pin Change Enable Mask bit 1
		PCINT2 = 2              ; Pin Change Enable Mask bit 2
		PCINT3 = 3              ; Pin Change Enable Mask bit 3
		PCINT4 = 4              ; Pin Change Enable Mask bit 4
		PCINT5 = 5              ; Pin Change Enable Mask bit 5
		PCINT6 = 6              ; Pin Change Enable Mask bit 6
		PCINT7 = 7              ; Pin Change Enable Mask bit 7
	}
	PCMSK2(0x6d) {          ; Pin Change Mask Register 2
		PCINT0 = 0              ; Pin Change Enable Mask bit 0
		PCINT1 = 1              ; Pin Change Enable Mask bit 1
		PCINT2 = 2              ; Pin Change Enable Mask bit 2
		PCINT3 = 3              ; Pin Change Enable Mask bit 3
		PCINT4 = 4              ; Pin Change Enable Mask bit 4
		PCINT5 = 5              ; Pin Change Enable Mask bit 5
		PCINT6 = 6              ; Pin Change Enable Mask bit 6
		PCINT7 = 7              ; Pin Change Enable Mask bit 7
	}
	TIMSK0(0x6e) {          ; Timer/Counter0 Interrupt Mask Register
		TOIE0 = 0               ; Timer/Counter0 Overflow Interrupt Enable
		OCIE0A = 1              ; Timer/Counter0 Output Compare Match A Interrupt Enable
		OCIE0B = 2              ; Timer/Counter0 Output Compare Match B Interrupt Enable
		Res0 = 3                ; Reserved bit 0
		Res1 = 4                ; Reserved bit 1
		Res2 = 5                ; Reserved bit 2
		Res3 = 6                ; Reserved bit 3
		Res4 = 7                ; Reserved bit 4
	}
	TIMSK1(0x6f) {          ; Timer/Counter1 Interrupt Mask Register
		TOIE1 = 0               ; Timer/Counter1 Overflow Interrupt Enable
		OCIE1A = 1              ; Timer/Counter1 Output Compare A Match Interrupt Enable
		OCIE1B = 2              ; Timer/Counter1 Output Compare B Match Interrupt Enable
		OCIE1C = 3              ; Timer/Counter1 Output Compare C Match Interrupt Enable
		ICIE1 = 5               ; Timer/Counter1 Input Capture Interrupt Enable
	}
	TIMSK2(0x70) {          ; Timer/Counter Interrupt Mask register
		TOIE2 = 0               ; Timer/Counter2 Overflow Interrupt Enable
		OCIE2A = 1              ; Timer/Counter2 Output Compare Match A Interrupt Enable
		OCIE2B = 2              ; Timer/Counter2 Output Compare Match B Interrupt Enable
		Res0 = 3                ; Reserved Bit bit 0
		Res1 = 4                ; Reserved Bit bit 1
		Res2 = 5                ; Reserved Bit bit 2
		Res3 = 6                ; Reserved Bit bit 3
		Res4 = 7                ; Reserved Bit bit 4
	}
	TIMSK3(0x71) {          ; Timer/Counter3 Interrupt Mask Register
		TOIE3 = 0               ; Timer/Counter3 Overflow Interrupt Enable
		OCIE3A = 1              ; Timer/Counter3 Output Compare A Match Interrupt Enable
		OCIE3B = 2              ; Timer/Counter3 Output Compare B Match Interrupt Enable
		OCIE3C = 3              ; Timer/Counter3 Output Compare C Match Interrupt Enable
		ICIE3 = 5               ; Timer/Counter3 Input Capture Interrupt Enable
	}
	TIMSK4(0x72) {          ; Timer/Counter4 Interrupt Mask Register
		TOIE4 = 0               ; Timer/Counter4 Overflow Interrupt Enable
		OCIE4A = 1              ; Timer/Counter4 Output Compare A Match Interrupt Enable
		OCIE4B = 2              ; Timer/Counter4 Output Compare B Match Interrupt Enable
		OCIE4C = 3              ; Timer/Counter4 Output Compare C Match Interrupt Enable
		ICIE4 = 5               ; Timer/Counter4 Input Capture Interrupt Enable
	}
	TIMSK5(0x73) {          ; Timer/Counter5 Interrupt Mask Register
		TOIE5 = 0               ; Timer/Counter5 Overflow Interrupt Enable
		OCIE5A = 1              ; Timer/Counter5 Output Compare A Match Interrupt Enable
		OCIE5B = 2              ; Timer/Counter5 Output Compare B Match Interrupt Enable
		OCIE5C = 3              ; Timer/Counter5 Output Compare C Match Interrupt Enable
		ICIE5 = 5               ; Timer/Counter5 Input Capture Interrupt Enable
	}
	NEMCR(0x75) {           ; Flash Extended-Mode Control-Register
		AEAM0 = 4               ; Address for Extended Address Mode of Extra Rows bit 0
		AEAM1 = 5               ; Address for Extended Address Mode of Extra Rows bit 1
		ENEAM = 6               ; Enable Extended Address Mode for Extra Rows
	}
	ADCSRC(0x77) {          ; The ADC Control and Status Register C
		ADSUT0 = 0              ; ADC Start-up Time bit 0
		ADSUT1 = 1              ; ADC Start-up Time bit 1
		ADSUT2 = 2              ; ADC Start-up Time bit 2
		ADSUT3 = 3              ; ADC Start-up Time bit 3
		ADSUT4 = 4              ; ADC Start-up Time bit 4
		Res0 = 5                ; Reserved
		ADTHT0 = 6              ; ADC Track-and-Hold Time bit 0
		ADTHT1 = 7              ; ADC Track-and-Hold Time bit 1
	}
	ADC(0x78, 0x79)         ; ADC Data Register  Bytes
	ADCSRA(0x7a) {          ; The ADC Control and Status Register A
		ADPS0 = 0               ; ADC  Prescaler Select Bits bit 0
		ADPS1 = 1               ; ADC  Prescaler Select Bits bit 1
		ADPS2 = 2               ; ADC  Prescaler Select Bits bit 2
		ADIE = 3                ; ADC Interrupt Enable
		ADIF = 4                ; ADC Interrupt Flag
		ADATE = 5               ; ADC Auto Trigger Enable
		ADSC = 6                ; ADC Start Conversion
		ADEN = 7                ; ADC Enable
	}
	ADCSRB(0x7b) {          ; ADC Control and Status Register B
		ADTS0 = 0               ; ADC Auto Trigger Source bit 0
		ADTS1 = 1               ; ADC Auto Trigger Source bit 1
		ADTS2 = 2               ; ADC Auto Trigger Source bit 2
		MUX5 = 3                ; Analog Channel and Gain Selection Bits
		ACCH = 4                ; Analog Channel Change
		REFOK = 5               ; Reference Voltage OK
		ACME = 6                ; Analog Comparator Multiplexer Enable
		AVDDOK = 7              ; AVDD Supply Voltage OK
	}
	ADMUX(0x7c) {           ; The ADC Multiplexer Selection Register
		MUX0 = 0                ; Analog Channel and Gain Selection Bits bit 0
		MUX1 = 1                ; Analog Channel and Gain Selection Bits bit 1
		MUX2 = 2                ; Analog Channel and Gain Selection Bits bit 2
		MUX3 = 3                ; Analog Channel and Gain Selection Bits bit 3
		MUX4 = 4                ; Analog Channel and Gain Selection Bits bit 4
		ADLAR = 5               ; ADC Left Adjust Result
		REFS0 = 6               ; Reference Selection Bits bit 0
		REFS1 = 7               ; Reference Selection Bits bit 1
	}
	DIDR2(0x7d) {           ; Digital Input Disable Register 2
		ADC8D = 0               ; Reserved Bits
		ADC9D = 1               ; Reserved Bits
		ADC10D = 2              ; Reserved Bits
		ADC11D = 3              ; Reserved Bits
		ADC12D = 4              ; Reserved Bits
		ADC13D = 5              ; Reserved Bits
		ADC14D = 6              ; Reserved Bits
		ADC15D = 7              ; Reserved Bits
	}
	DIDR0(0x7e) {           ; Digital Input Disable Register 0
		ADC0D = 0               ; Disable ADC7:0 Digital Input
		ADC1D = 1               ; Disable ADC7:0 Digital Input
		ADC2D = 2               ; Disable ADC7:0 Digital Input
		ADC3D = 3               ; Disable ADC7:0 Digital Input
		ADC4D = 4               ; Disable ADC7:0 Digital Input
		ADC5D = 5               ; Disable ADC7:0 Digital Input
		ADC6D = 6               ; Disable ADC7:0 Digital Input
		ADC7D = 7               ; Disable ADC7:0 Digital Input
	}
	DIDR1(0x7f) {           ; Digital Input Disable Register 1
		AIN0D = 0               ; AIN0 Digital Input Disable
		AIN1D = 1               ; AIN1 Digital Input Disable
	}
	TCCR1A(0x80) {          ; Timer/Counter1 Control Register A
		WGM10 = 0               ; Waveform Generation Mode bit 0
		WGM11 = 1               ; Waveform Generation Mode bit 1
		COM1C0 = 2              ; Compare Output Mode for Channel C bit 0
		COM1C1 = 3              ; Compare Output Mode for Channel C bit 1
		COM1B0 = 4              ; Compare Output Mode for Channel B bit 0
		COM1B1 = 5              ; Compare Output Mode for Channel B bit 1
		COM1A0 = 6              ; Compare Output Mode for Channel A bit 0
		COM1A1 = 7              ; Compare Output Mode for Channel A bit 1
	}
	TCCR1B(0x81) {          ; Timer/Counter1 Control Register B
		CS10 = 0                ; Clock Select bit 0
		CS11 = 1                ; Clock Select bit 1
		CS12 = 2                ; Clock Select bit 2
		WGM10 = 3               ; Waveform Generation Mode bit 0
		WGM11 = 4               ; Waveform Generation Mode bit 1
		Res = 5                 ; Reserved Bit
		ICES1 = 6               ; Input Capture 1 Edge Select
		ICNC1 = 7               ; Input Capture 1 Noise Canceller
	}
	TCCR1C(0x82) {          ; Timer/Counter1 Control Register C
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		FOC1C = 5               ; Force Output Compare for Channel C
		FOC1B = 6               ; Force Output Compare for Channel B
		FOC1A = 7               ; Force Output Compare for Channel A
	}
	TCNT1(0x84, 0x85)       ; Timer/Counter1  Bytes
	ICR1(0x86, 0x87)        ; Timer/Counter1 Input Capture Register  Bytes
	OCR1A(0x88, 0x89)       ; Timer/Counter1 Output Compare Register A  Bytes
	OCR1B(0x8a, 0x8b)       ; Timer/Counter1 Output Compare Register B  Bytes
	OCR1C(0x8c, 0x8d)       ; Timer/Counter1 Output Compare Register C  Bytes
	TCCR3A(0x90) {          ; Timer/Counter3 Control Register A
		WGM30 = 0               ; Waveform Generation Mode bit 0
		WGM31 = 1               ; Waveform Generation Mode bit 1
		COM3C0 = 2              ; Compare Output Mode for Channel C bit 0
		COM3C1 = 3              ; Compare Output Mode for Channel C bit 1
		COM3B0 = 4              ; Compare Output Mode for Channel B bit 0
		COM3B1 = 5              ; Compare Output Mode for Channel B bit 1
		COM3A0 = 6              ; Compare Output Mode for Channel A bit 0
		COM3A1 = 7              ; Compare Output Mode for Channel A bit 1
	}
	TCCR3B(0x91) {          ; Timer/Counter3 Control Register B
		CS30 = 0                ; Clock Select bit 0
		CS31 = 1                ; Clock Select bit 1
		CS32 = 2                ; Clock Select bit 2
		WGM30 = 3               ; Waveform Generation Mode bit 0
		WGM31 = 4               ; Waveform Generation Mode bit 1
		Res = 5                 ; Reserved Bit
		ICES3 = 6               ; Input Capture 3 Edge Select
		ICNC3 = 7               ; Input Capture 3 Noise Canceller
	}
	TCCR3C(0x92) {          ; Timer/Counter3 Control Register C
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		FOC3C = 5               ; Force Output Compare for Channel C
		FOC3B = 6               ; Force Output Compare for Channel B
		FOC3A = 7               ; Force Output Compare for Channel A
	}
	TCNT3(0x94, 0x95)       ; Timer/Counter3  Bytes
	ICR3(0x96, 0x97)        ; Timer/Counter3 Input Capture Register  Bytes
	OCR3A(0x98, 0x99)       ; Timer/Counter3 Output Compare Register A  Bytes
	OCR3B(0x9a, 0x9b)       ; Timer/Counter3 Output Compare Register B  Bytes
	OCR3C(0x9c, 0x9d)       ; Timer/Counter3 Output Compare Register C  Bytes
	TCCR4A(0xa0) {          ; Timer/Counter4 Control Register A
		WGM40 = 0               ; Waveform Generation Mode bit 0
		WGM41 = 1               ; Waveform Generation Mode bit 1
		COM4C0 = 2              ; Compare Output Mode for Channel C bit 0
		COM4C1 = 3              ; Compare Output Mode for Channel C bit 1
		COM4B0 = 4              ; Compare Output Mode for Channel B bit 0
		COM4B1 = 5              ; Compare Output Mode for Channel B bit 1
		COM4A0 = 6              ; Compare Output Mode for Channel A bit 0
		COM4A1 = 7              ; Compare Output Mode for Channel A bit 1
	}
	TCCR4B(0xa1) {          ; Timer/Counter4 Control Register B
		CS40 = 0                ; Clock Select bit 0
		CS41 = 1                ; Clock Select bit 1
		CS42 = 2                ; Clock Select bit 2
		WGM40 = 3               ; Waveform Generation Mode bit 0
		WGM41 = 4               ; Waveform Generation Mode bit 1
		Res = 5                 ; Reserved Bit
		ICES4 = 6               ; Input Capture 4 Edge Select
		ICNC4 = 7               ; Input Capture 4 Noise Canceller
	}
	TCCR4C(0xa2) {          ; Timer/Counter4 Control Register C
		Res0 = 0                ; Reserved bit 0
		Res1 = 1                ; Reserved bit 1
		Res2 = 2                ; Reserved bit 2
		Res3 = 3                ; Reserved bit 3
		Res4 = 4                ; Reserved bit 4
		FOC4C = 5               ; Force Output Compare for Channel C
		FOC4B = 6               ; Force Output Compare for Channel B
		FOC4A = 7               ; Force Output Compare for Channel A
	}
	TCNT4(0xa4, 0xa5)       ; Timer/Counter4  Bytes
	ICR4(0xa6, 0xa7)        ; Timer/Counter4 Input Capture Register  Bytes
	OCR4A(0xa8, 0xa9)       ; Timer/Counter4 Output Compare Register A  Bytes
	OCR4B(0xaa, 0xab)       ; Timer/Counter4 Output Compare Register B  Bytes
	OCR4C(0xac, 0xad)       ; Timer/Counter4 Output Compare Register C  Bytes
	TCCR2A(0xb0) {          ; Timer/Counter2 Control Register A
		WGM20 = 0               ; Waveform Generation Mode bit 0
		WGM21 = 1               ; Waveform Generation Mode bit 1
		Res0 = 2                ; Reserved bit 0
		Res1 = 3                ; Reserved bit 1
		COM2B0 = 4              ; Compare Match Output B Mode bit 0
		COM2B1 = 5              ; Compare Match Output B Mode bit 1
		COM2A0 = 6              ; Compare Match Output A Mode bit 0
		COM2A1 = 7              ; Compare Match Output A Mode bit 1
	}
	TCCR2B(0xb1) {          ; Timer/Counter2 Control Register B
		CS20 = 0                ; Clock Select bit 0
		CS21 = 1                ; Clock Select bit 1
		CS22 = 2                ; Clock Select bit 2
		WGM22 = 3               ; Waveform Generation Mode
		Res0 = 4                ; Reserved bit 0
		Res1 = 5                ; Reserved bit 1
		FOC2B = 6               ; Force Output Compare B
		FOC2A = 7               ; Force Output Compare A
	}
	TCNT2(0xb2)             ; Timer/Counter2
	OCR2A(0xb3)             ; Timer/Counter2 Output Compare Register A
	OCR2B(0xb4)             ; Timer/Counter2 Output Compare Register B
	ASSR(0xb6) {            ; Asynchronous Status Register
		TCR2BUB = 0             ; Timer/Counter2 Control Register B Update Busy
		TCR2AUB = 1             ; Timer/Counter2 Control Register A Update Busy
		OCR2BUB = 2             ; Timer/Counter2 Output Compare Register B Update Busy
		OCR2AUB = 3             ; Timer/Counter2 Output Compare Register A Update Busy
		TCN2UB = 4              ; Timer/Counter2 Update Busy
		AS2 = 5                 ; Timer/Counter2 Asynchronous Mode
		EXCLK = 6               ; Enable External Clock Input
		EXCLKAMR = 7            ; Enable External Clock Input for AMR
	}
	TWBR(0xb8)              ; TWI Bit Rate Register
	TWSR(0xb9) {            ; TWI Status Register
		TWPS0 = 0               ; TWI Prescaler Bits bit 0
		TWPS1 = 1               ; TWI Prescaler Bits bit 1
		Res = 2                 ; Reserved Bit
		TWS0 = 3                ; TWI Status bit 0
		TWS1 = 4                ; TWI Status bit 1
		TWS2 = 5                ; TWI Status bit 2
		TWS3 = 6                ; TWI Status bit 3
		TWS4 = 7                ; TWI Status bit 4
	}
	TWAR(0xba) {            ; TWI (Slave) Address Register
		TWGCE = 0               ; TWI General Call Recognition Enable Bit
		TWA0 = 1                ; TWI (Slave) Address bit 0
		TWA1 = 2                ; TWI (Slave) Address bit 1
		TWA2 = 3                ; TWI (Slave) Address bit 2
		TWA3 = 4                ; TWI (Slave) Address bit 3
		TWA4 = 5                ; TWI (Slave) Address bit 4
		TWA5 = 6                ; TWI (Slave) Address bit 5
		TWA6 = 7                ; TWI (Slave) Address bit 6
	}
	TWDR(0xbb)              ; TWI Data Register
	TWCR(0xbc) {            ; TWI Control Register
		TWIE = 0                ; TWI Interrupt Enable
		Res = 1                 ; Reserved Bit
		TWEN = 2                ; TWI Enable Bit
		TWWC = 3                ; TWI Write Collision Flag
		TWSTO = 4               ; TWI STOP Condition Bit
		TWSTA = 5               ; TWI START Condition Bit
		TWEA = 6                ; TWI Enable Acknowledge Bit
		TWINT = 7               ; TWI Interrupt Flag
	}
	TWAMR(0xbd) {           ; TWI (Slave) Address Mask Register
		Res = 0                 ; Reserved Bit
		TWAM0 = 1               ; TWI Address Mask bit 0
		TWAM1 = 2               ; TWI Address Mask bit 1
		TWAM2 = 3               ; TWI Address Mask bit 2
		TWAM3 = 4               ; TWI Address Mask bit 3
		TWAM4 = 5               ; TWI Address Mask bit 4
		TWAM5 = 6               ; TWI Address Mask bit 5
		TWAM6 = 7               ; TWI Address Mask bit 6
	}
	UCSR0A(0xc0) {          ; USART0 Control and Status Register A
		MPCM0 = 0               ; Multi-processor Communication Mode
		U2X0 = 1                ; Double the USART Transmission Speed
		UPE0 = 2                ; USART Parity Error
		DOR0 = 3                ; Data OverRun
		FE0 = 4                 ; Frame Error
		UDRE0 = 5               ; USART Data Register Empty
		TXC0 = 6                ; USART Transmit Complete
		RXC0 = 7                ; USART Receive Complete
	}
	UCSR0B(0xc1) {          ; USART0 Control and Status Register B
		TXB80 = 0               ; Transmit Data Bit 8
		RXB80 = 1               ; Receive Data Bit 8
		UCSZ02 = 2              ; Character Size
		TXEN0 = 3               ; Transmitter Enable
		RXEN0 = 4               ; Receiver Enable
		UDRIE0 = 5              ; USART Data Register Empty Interrupt Enable
		TXCIE0 = 6              ; TX Complete Interrupt Enable
		RXCIE0 = 7              ; RX Complete Interrupt Enable
	}
	UCSR0C(0xc2) {          ; USART0 Control and Status Register C
		UCPOL0 = 0              ; Clock Polarity
		UCSZ00 = 1              ; Character Size bit 0
		UCPHA0 = 1              ; Clock Phase
		UCSZ01 = 2              ; Character Size bit 1
		UDORD0 = 2              ; Data Order
		USBS0 = 3               ; Stop Bit Select
		UPM00 = 4               ; Parity Mode bit 0
		UPM01 = 5               ; Parity Mode bit 1
		UMSEL00 = 6             ; USART Mode Select bit 0
		UMSEL01 = 7             ; USART Mode Select bit 1
	}
	UBRR0(0xc4, 0xc5)       ; USART0 Baud Rate Register  Bytes
	UDR0(0xc6)              ; USART0 I/O Data Register
	UCSR1A(0xc8) {          ; USART1 Control and Status Register A
		MPCM1 = 0               ; Multi-processor Communication Mode
		U2X1 = 1                ; Double the USART Transmission Speed
		UPE1 = 2                ; USART Parity Error
		DOR1 = 3                ; Data OverRun
		FE1 = 4                 ; Frame Error
		UDRE1 = 5               ; USART Data Register Empty
		TXC1 = 6                ; USART Transmit Complete
		RXC1 = 7                ; USART Receive Complete
	}
	UCSR1B(0xc9) {          ; USART1 Control and Status Register B
		TXB81 = 0               ; Transmit Data Bit 8
		RXB81 = 1               ; Receive Data Bit 8
		UCSZ12 = 2              ; Character Size
		TXEN1 = 3               ; Transmitter Enable
		RXEN1 = 4               ; Receiver Enable
		UDRIE1 = 5              ; USART Data Register Empty Interrupt Enable
		TXCIE1 = 6              ; TX Complete Interrupt Enable
		RXCIE1 = 7              ; RX Complete Interrupt Enable
	}
	UCSR1C(0xca) {          ; USART1 Control and Status Register C
		UCPOL1 = 0              ; Clock Polarity
		UCSZ10 = 1              ; Character Size bit 0
		UCPHA1 = 1              ; Clock Phase
		UCSZ11 = 2              ; Character Size bit 1
		UDORD1 = 2              ; Data Order
		USBS1 = 3               ; Stop Bit Select
		UPM10 = 4               ; Parity Mode bit 0
		UPM11 = 5               ; Parity Mode bit 1
		UMSEL10 = 6             ; USART Mode Select bit 0
		UMSEL11 = 7             ; USART Mode Select bit 1
	}
	UBRR1(0xcc, 0xcd)       ; USART1 Baud Rate Register  Bytes
	UDR1(0xce)              ; USART1 I/O Data Register
	SCCR0(0xdc) {           ; Symbol Counter Control Register 0
		SCCMP0 = 0              ; Symbol Counter Compare Unit 3 Mode select bit 0
		SCCMP1 = 1              ; Symbol Counter Compare Unit 3 Mode select bit 1
		SCCMP2 = 2              ; Symbol Counter Compare Unit 3 Mode select bit 2
		SCTSE = 3               ; Symbol Counter Automatic Timestamping enable
		SCCKSEL = 4             ; Symbol Counter Clock Source select
		SCEN = 5                ; Symbol Counter enable
		SCMBTS = 6              ; Manual Beacon Timestamp
		SCRES = 7               ; Symbol Counter Synchronization
	}
	SCCR1(0xdd) {           ; Symbol Counter Control Register 1
		SCENBO = 0              ; Backoff Slot Counter enable
		Res0 = 1                ; Reserved Bit bit 0
		Res1 = 2                ; Reserved Bit bit 1
		Res2 = 3                ; Reserved Bit bit 2
		Res3 = 4                ; Reserved Bit bit 3
		Res4 = 5                ; Reserved Bit bit 4
		Res5 = 6                ; Reserved Bit bit 5
		Res6 = 7                ; Reserved Bit bit 6
	}
	SCSR(0xde) {            ; Symbol Counter Status Register
		SCBSY = 0               ; Symbol Counter busy
		Res0 = 1                ; Reserved Bit bit 0
		Res1 = 2                ; Reserved Bit bit 1
		Res2 = 3                ; Reserved Bit bit 2
		Res3 = 4                ; Reserved Bit bit 3
		Res4 = 5                ; Reserved Bit bit 4
		Res5 = 6                ; Reserved Bit bit 5
		Res6 = 7                ; Reserved Bit bit 6
	}
	SCIRQM(0xdf) {          ; Symbol Counter Interrupt Mask Register
		IRQMCP0 = 0             ; Symbol Counter Compare Match 3 IRQ enable bit 0
		IRQMCP1 = 1             ; Symbol Counter Compare Match 3 IRQ enable bit 1
		IRQMCP2 = 2             ; Symbol Counter Compare Match 3 IRQ enable bit 2
		IRQMOF = 3              ; Symbol Counter Overflow IRQ enable
		IRQMBO = 4              ; Backoff Slot Counter IRQ enable
		Res0 = 5                ; Reserved Bit bit 0
		Res1 = 6                ; Reserved Bit bit 1
		Res2 = 7                ; Reserved Bit bit 2
	}
	SCIRQS(0xe0) {          ; Symbol Counter Interrupt Status Register
		IRQSCP0 = 0             ; Compare Unit 3 Compare Match IRQ bit 0
		IRQSCP1 = 1             ; Compare Unit 3 Compare Match IRQ bit 1
		IRQSCP2 = 2             ; Compare Unit 3 Compare Match IRQ bit 2
		IRQSOF = 3              ; Symbol Counter Overflow IRQ
		IRQSBO = 4              ; Backoff Slot Counter IRQ
		Res0 = 5                ; Reserved Bit bit 0
		Res1 = 6                ; Reserved Bit bit 1
		Res2 = 7                ; Reserved Bit bit 2
	}
	SCCNTLL(0xe1) {         ; Symbol Counter Register LL-Byte
		SCCNTLL0 = 0            ; Symbol Counter Register LL-Byte bit 0
		SCCNTLL1 = 1            ; Symbol Counter Register LL-Byte bit 1
		SCCNTLL2 = 2            ; Symbol Counter Register LL-Byte bit 2
		SCCNTLL3 = 3            ; Symbol Counter Register LL-Byte bit 3
		SCCNTLL4 = 4            ; Symbol Counter Register LL-Byte bit 4
		SCCNTLL5 = 5            ; Symbol Counter Register LL-Byte bit 5
		SCCNTLL6 = 6            ; Symbol Counter Register LL-Byte bit 6
		SCCNTLL7 = 7            ; Symbol Counter Register LL-Byte bit 7
	}
	SCCNTLH(0xe2) {         ; Symbol Counter Register LH-Byte
		SCCNTLH0 = 0            ; Symbol Counter Register LH-Byte bit 0
		SCCNTLH1 = 1            ; Symbol Counter Register LH-Byte bit 1
		SCCNTLH2 = 2            ; Symbol Counter Register LH-Byte bit 2
		SCCNTLH3 = 3            ; Symbol Counter Register LH-Byte bit 3
		SCCNTLH4 = 4            ; Symbol Counter Register LH-Byte bit 4
		SCCNTLH5 = 5            ; Symbol Counter Register LH-Byte bit 5
		SCCNTLH6 = 6            ; Symbol Counter Register LH-Byte bit 6
		SCCNTLH7 = 7            ; Symbol Counter Register LH-Byte bit 7
	}
	SCCNTHL(0xe3) {         ; Symbol Counter Register HL-Byte
		SCCNTHL0 = 0            ; Symbol Counter Register HL-Byte bit 0
		SCCNTHL1 = 1            ; Symbol Counter Register HL-Byte bit 1
		SCCNTHL2 = 2            ; Symbol Counter Register HL-Byte bit 2
		SCCNTHL3 = 3            ; Symbol Counter Register HL-Byte bit 3
		SCCNTHL4 = 4            ; Symbol Counter Register HL-Byte bit 4
		SCCNTHL5 = 5            ; Symbol Counter Register HL-Byte bit 5
		SCCNTHL6 = 6            ; Symbol Counter Register HL-Byte bit 6
		SCCNTHL7 = 7            ; Symbol Counter Register HL-Byte bit 7
	}
	SCCNTHH(0xe4) {         ; Symbol Counter Register HH-Byte
		SCCNTHH0 = 0            ; Symbol Counter Register HH-Byte bit 0
		SCCNTHH1 = 1            ; Symbol Counter Register HH-Byte bit 1
		SCCNTHH2 = 2            ; Symbol Counter Register HH-Byte bit 2
		SCCNTHH3 = 3            ; Symbol Counter Register HH-Byte bit 3
		SCCNTHH4 = 4            ; Symbol Counter Register HH-Byte bit 4
		SCCNTHH5 = 5            ; Symbol Counter Register HH-Byte bit 5
		SCCNTHH6 = 6            ; Symbol Counter Register HH-Byte bit 6
		SCCNTHH7 = 7            ; Symbol Counter Register HH-Byte bit 7
	}
	SCBTSRLL(0xe5) {        ; Symbol Counter Beacon Timestamp Register LL-Byte
		SCBTSRLL0 = 0           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 0
		SCBTSRLL1 = 1           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 1
		SCBTSRLL2 = 2           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 2
		SCBTSRLL3 = 3           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 3
		SCBTSRLL4 = 4           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 4
		SCBTSRLL5 = 5           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 5
		SCBTSRLL6 = 6           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 6
		SCBTSRLL7 = 7           ; Symbol Counter Beacon Timestamp Register LL-Byte bit 7
	}
	SCBTSRLH(0xe6) {        ; Symbol Counter Beacon Timestamp Register LH-Byte
		SCBTSRLH0 = 0           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 0
		SCBTSRLH1 = 1           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 1
		SCBTSRLH2 = 2           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 2
		SCBTSRLH3 = 3           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 3
		SCBTSRLH4 = 4           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 4
		SCBTSRLH5 = 5           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 5
		SCBTSRLH6 = 6           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 6
		SCBTSRLH7 = 7           ; Symbol Counter Beacon Timestamp Register LH-Byte bit 7
	}
	SCBTSRHL(0xe7) {        ; Symbol Counter Beacon Timestamp Register HL-Byte
		SCBTSRHL0 = 0           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 0
		SCBTSRHL1 = 1           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 1
		SCBTSRHL2 = 2           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 2
		SCBTSRHL3 = 3           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 3
		SCBTSRHL4 = 4           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 4
		SCBTSRHL5 = 5           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 5
		SCBTSRHL6 = 6           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 6
		SCBTSRHL7 = 7           ; Symbol Counter Beacon Timestamp Register HL-Byte bit 7
	}
	SCBTSRHH(0xe8) {        ; Symbol Counter Beacon Timestamp Register HH-Byte
		SCBTSRHH0 = 0           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 0
		SCBTSRHH1 = 1           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 1
		SCBTSRHH2 = 2           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 2
		SCBTSRHH3 = 3           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 3
		SCBTSRHH4 = 4           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 4
		SCBTSRHH5 = 5           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 5
		SCBTSRHH6 = 6           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 6
		SCBTSRHH7 = 7           ; Symbol Counter Beacon Timestamp Register HH-Byte bit 7
	}
	SCTSRLL(0xe9) {         ; Symbol Counter Frame Timestamp Register LL-Byte
		SCTSRLL0 = 0            ; Symbol Counter Frame Timestamp Register LL-Byte bit 0
		SCTSRLL1 = 1            ; Symbol Counter Frame Timestamp Register LL-Byte bit 1
		SCTSRLL2 = 2            ; Symbol Counter Frame Timestamp Register LL-Byte bit 2
		SCTSRLL3 = 3            ; Symbol Counter Frame Timestamp Register LL-Byte bit 3
		SCTSRLL4 = 4            ; Symbol Counter Frame Timestamp Register LL-Byte bit 4
		SCTSRLL5 = 5            ; Symbol Counter Frame Timestamp Register LL-Byte bit 5
		SCTSRLL6 = 6            ; Symbol Counter Frame Timestamp Register LL-Byte bit 6
		SCTSRLL7 = 7            ; Symbol Counter Frame Timestamp Register LL-Byte bit 7
	}
	SCTSRLH(0xea) {         ; Symbol Counter Frame Timestamp Register LH-Byte
		SCTSRLH0 = 0            ; Symbol Counter Frame Timestamp Register LH-Byte bit 0
		SCTSRLH1 = 1            ; Symbol Counter Frame Timestamp Register LH-Byte bit 1
		SCTSRLH2 = 2            ; Symbol Counter Frame Timestamp Register LH-Byte bit 2
		SCTSRLH3 = 3            ; Symbol Counter Frame Timestamp Register LH-Byte bit 3
		SCTSRLH4 = 4            ; Symbol Counter Frame Timestamp Register LH-Byte bit 4
		SCTSRLH5 = 5            ; Symbol Counter Frame Timestamp Register LH-Byte bit 5
		SCTSRLH6 = 6            ; Symbol Counter Frame Timestamp Register LH-Byte bit 6
		SCTSRLH7 = 7            ; Symbol Counter Frame Timestamp Register LH-Byte bit 7
	}
	SCTSRHL(0xeb) {         ; Symbol Counter Frame Timestamp Register HL-Byte
		SCTSRHL0 = 0            ; Symbol Counter Frame Timestamp Register HL-Byte bit 0
		SCTSRHL1 = 1            ; Symbol Counter Frame Timestamp Register HL-Byte bit 1
		SCTSRHL2 = 2            ; Symbol Counter Frame Timestamp Register HL-Byte bit 2
		SCTSRHL3 = 3            ; Symbol Counter Frame Timestamp Register HL-Byte bit 3
		SCTSRHL4 = 4            ; Symbol Counter Frame Timestamp Register HL-Byte bit 4
		SCTSRHL5 = 5            ; Symbol Counter Frame Timestamp Register HL-Byte bit 5
		SCTSRHL6 = 6            ; Symbol Counter Frame Timestamp Register HL-Byte bit 6
		SCTSRHL7 = 7            ; Symbol Counter Frame Timestamp Register HL-Byte bit 7
	}
	SCTSRHH(0xec) {         ; Symbol Counter Frame Timestamp Register HH-Byte
		SCTSRHH0 = 0            ; Symbol Counter Frame Timestamp Register HH-Byte bit 0
		SCTSRHH1 = 1            ; Symbol Counter Frame Timestamp Register HH-Byte bit 1
		SCTSRHH2 = 2            ; Symbol Counter Frame Timestamp Register HH-Byte bit 2
		SCTSRHH3 = 3            ; Symbol Counter Frame Timestamp Register HH-Byte bit 3
		SCTSRHH4 = 4            ; Symbol Counter Frame Timestamp Register HH-Byte bit 4
		SCTSRHH5 = 5            ; Symbol Counter Frame Timestamp Register HH-Byte bit 5
		SCTSRHH6 = 6            ; Symbol Counter Frame Timestamp Register HH-Byte bit 6
		SCTSRHH7 = 7            ; Symbol Counter Frame Timestamp Register HH-Byte bit 7
	}
	SCOCR3LL(0xed) {        ; Symbol Counter Output Compare Register 3 LL-Byte
		SCOCR3LL0 = 0           ; Symbol Counter Output Compare Register 3 LL-Byte bit 0
		SCOCR3LL1 = 1           ; Symbol Counter Output Compare Register 3 LL-Byte bit 1
		SCOCR3LL2 = 2           ; Symbol Counter Output Compare Register 3 LL-Byte bit 2
		SCOCR3LL3 = 3           ; Symbol Counter Output Compare Register 3 LL-Byte bit 3
		SCOCR3LL4 = 4           ; Symbol Counter Output Compare Register 3 LL-Byte bit 4
		SCOCR3LL5 = 5           ; Symbol Counter Output Compare Register 3 LL-Byte bit 5
		SCOCR3LL6 = 6           ; Symbol Counter Output Compare Register 3 LL-Byte bit 6
		SCOCR3LL7 = 7           ; Symbol Counter Output Compare Register 3 LL-Byte bit 7
	}
	SCOCR3LH(0xee) {        ; Symbol Counter Output Compare Register 3 LH-Byte
		SCOCR3LH0 = 0           ; Symbol Counter Output Compare Register 3 LH-Byte bit 0
		SCOCR3LH1 = 1           ; Symbol Counter Output Compare Register 3 LH-Byte bit 1
		SCOCR3LH2 = 2           ; Symbol Counter Output Compare Register 3 LH-Byte bit 2
		SCOCR3LH3 = 3           ; Symbol Counter Output Compare Register 3 LH-Byte bit 3
		SCOCR3LH4 = 4           ; Symbol Counter Output Compare Register 3 LH-Byte bit 4
		SCOCR3LH5 = 5           ; Symbol Counter Output Compare Register 3 LH-Byte bit 5
		SCOCR3LH6 = 6           ; Symbol Counter Output Compare Register 3 LH-Byte bit 6
		SCOCR3LH7 = 7           ; Symbol Counter Output Compare Register 3 LH-Byte bit 7
	}
	SCOCR3HL(0xef) {        ; Symbol Counter Output Compare Register 3 HL-Byte
		SCOCR3HL0 = 0           ; Symbol Counter Output Compare Register 3 HL-Byte bit 0
		SCOCR3HL1 = 1           ; Symbol Counter Output Compare Register 3 HL-Byte bit 1
		SCOCR3HL2 = 2           ; Symbol Counter Output Compare Register 3 HL-Byte bit 2
		SCOCR3HL3 = 3           ; Symbol Counter Output Compare Register 3 HL-Byte bit 3
		SCOCR3HL4 = 4           ; Symbol Counter Output Compare Register 3 HL-Byte bit 4
		SCOCR3HL5 = 5           ; Symbol Counter Output Compare Register 3 HL-Byte bit 5
		SCOCR3HL6 = 6           ; Symbol Counter Output Compare Register 3 HL-Byte bit 6
		SCOCR3HL7 = 7           ; Symbol Counter Output Compare Register 3 HL-Byte bit 7
	}
	SCOCR3HH(0xf0) {        ; Symbol Counter Output Compare Register 3 HH-Byte
		SCOCR3HH0 = 0           ; Symbol Counter Output Compare Register 3 HH-Byte bit 0
		SCOCR3HH1 = 1           ; Symbol Counter Output Compare Register 3 HH-Byte bit 1
		SCOCR3HH2 = 2           ; Symbol Counter Output Compare Register 3 HH-Byte bit 2
		SCOCR3HH3 = 3           ; Symbol Counter Output Compare Register 3 HH-Byte bit 3
		SCOCR3HH4 = 4           ; Symbol Counter Output Compare Register 3 HH-Byte bit 4
		SCOCR3HH5 = 5           ; Symbol Counter Output Compare Register 3 HH-Byte bit 5
		SCOCR3HH6 = 6           ; Symbol Counter Output Compare Register 3 HH-Byte bit 6
		SCOCR3HH7 = 7           ; Symbol Counter Output Compare Register 3 HH-Byte bit 7
	}
	SCOCR2LL(0xf1) {        ; Symbol Counter Output Compare Register 2 LL-Byte
		SCOCR2LL0 = 0           ; Symbol Counter Output Compare Register 2 LL-Byte bit 0
		SCOCR2LL1 = 1           ; Symbol Counter Output Compare Register 2 LL-Byte bit 1
		SCOCR2LL2 = 2           ; Symbol Counter Output Compare Register 2 LL-Byte bit 2
		SCOCR2LL3 = 3           ; Symbol Counter Output Compare Register 2 LL-Byte bit 3
		SCOCR2LL4 = 4           ; Symbol Counter Output Compare Register 2 LL-Byte bit 4
		SCOCR2LL5 = 5           ; Symbol Counter Output Compare Register 2 LL-Byte bit 5
		SCOCR2LL6 = 6           ; Symbol Counter Output Compare Register 2 LL-Byte bit 6
		SCOCR2LL7 = 7           ; Symbol Counter Output Compare Register 2 LL-Byte bit 7
	}
	SCOCR2LH(0xf2) {        ; Symbol Counter Output Compare Register 2 LH-Byte
		SCOCR2LH0 = 0           ; Symbol Counter Output Compare Register 2 LH-Byte bit 0
		SCOCR2LH1 = 1           ; Symbol Counter Output Compare Register 2 LH-Byte bit 1
		SCOCR2LH2 = 2           ; Symbol Counter Output Compare Register 2 LH-Byte bit 2
		SCOCR2LH3 = 3           ; Symbol Counter Output Compare Register 2 LH-Byte bit 3
		SCOCR2LH4 = 4           ; Symbol Counter Output Compare Register 2 LH-Byte bit 4
		SCOCR2LH5 = 5           ; Symbol Counter Output Compare Register 2 LH-Byte bit 5
		SCOCR2LH6 = 6           ; Symbol Counter Output Compare Register 2 LH-Byte bit 6
		SCOCR2LH7 = 7           ; Symbol Counter Output Compare Register 2 LH-Byte bit 7
	}
	SCOCR2HL(0xf3) {        ; Symbol Counter Output Compare Register 2 HL-Byte
		SCOCR2HL0 = 0           ; Symbol Counter Output Compare Register 2 HL-Byte bit 0
		SCOCR2HL1 = 1           ; Symbol Counter Output Compare Register 2 HL-Byte bit 1
		SCOCR2HL2 = 2           ; Symbol Counter Output Compare Register 2 HL-Byte bit 2
		SCOCR2HL3 = 3           ; Symbol Counter Output Compare Register 2 HL-Byte bit 3
		SCOCR2HL4 = 4           ; Symbol Counter Output Compare Register 2 HL-Byte bit 4
		SCOCR2HL5 = 5           ; Symbol Counter Output Compare Register 2 HL-Byte bit 5
		SCOCR2HL6 = 6           ; Symbol Counter Output Compare Register 2 HL-Byte bit 6
		SCOCR2HL7 = 7           ; Symbol Counter Output Compare Register 2 HL-Byte bit 7
	}
	SCOCR2HH(0xf4) {        ; Symbol Counter Output Compare Register 2 HH-Byte
		SCOCR2HH0 = 0           ; Symbol Counter Output Compare Register 2 HH-Byte bit 0
		SCOCR2HH1 = 1           ; Symbol Counter Output Compare Register 2 HH-Byte bit 1
		SCOCR2HH2 = 2           ; Symbol Counter Output Compare Register 2 HH-Byte bit 2
		SCOCR2HH3 = 3           ; Symbol Counter Output Compare Register 2 HH-Byte bit 3
		SCOCR2HH4 = 4           ; Symbol Counter Output Compare Register 2 HH-Byte bit 4
		SCOCR2HH5 = 5           ; Symbol Counter Output Compare Register 2 HH-Byte bit 5
		SCOCR2HH6 = 6           ; Symbol Counter Output Compare Register 2 HH-Byte bit 6
		SCOCR2HH7 = 7           ; Symbol Counter Output Compare Register 2 HH-Byte bit 7
	}
	SCOCR1LL(0xf5) {        ; Symbol Counter Output Compare Register 1 LL-Byte
		SCOCR1LL0 = 0           ; Symbol Counter Output Compare Register 1 LL-Byte bit 0
		SCOCR1LL1 = 1           ; Symbol Counter Output Compare Register 1 LL-Byte bit 1
		SCOCR1LL2 = 2           ; Symbol Counter Output Compare Register 1 LL-Byte bit 2
		SCOCR1LL3 = 3           ; Symbol Counter Output Compare Register 1 LL-Byte bit 3
		SCOCR1LL4 = 4           ; Symbol Counter Output Compare Register 1 LL-Byte bit 4
		SCOCR1LL5 = 5           ; Symbol Counter Output Compare Register 1 LL-Byte bit 5
		SCOCR1LL6 = 6           ; Symbol Counter Output Compare Register 1 LL-Byte bit 6
		SCOCR1LL7 = 7           ; Symbol Counter Output Compare Register 1 LL-Byte bit 7
	}
	SCOCR1LH(0xf6) {        ; Symbol Counter Output Compare Register 1 LH-Byte
		SCOCR1LH0 = 0           ; Symbol Counter Output Compare Register 1 LH-Byte bit 0
		SCOCR1LH1 = 1           ; Symbol Counter Output Compare Register 1 LH-Byte bit 1
		SCOCR1LH2 = 2           ; Symbol Counter Output Compare Register 1 LH-Byte bit 2
		SCOCR1LH3 = 3           ; Symbol Counter Output Compare Register 1 LH-Byte bit 3
		SCOCR1LH4 = 4           ; Symbol Counter Output Compare Register 1 LH-Byte bit 4
		SCOCR1LH5 = 5           ; Symbol Counter Output Compare Register 1 LH-Byte bit 5
		SCOCR1LH6 = 6           ; Symbol Counter Output Compare Register 1 LH-Byte bit 6
		SCOCR1LH7 = 7           ; Symbol Counter Output Compare Register 1 LH-Byte bit 7
	}
	SCOCR1HL(0xf7) {        ; Symbol Counter Output Compare Register 1 HL-Byte
		SCOCR1HL0 = 0           ; Symbol Counter Output Compare Register 1 HL-Byte bit 0
		SCOCR1HL1 = 1           ; Symbol Counter Output Compare Register 1 HL-Byte bit 1
		SCOCR1HL2 = 2           ; Symbol Counter Output Compare Register 1 HL-Byte bit 2
		SCOCR1HL3 = 3           ; Symbol Counter Output Compare Register 1 HL-Byte bit 3
		SCOCR1HL4 = 4           ; Symbol Counter Output Compare Register 1 HL-Byte bit 4
		SCOCR1HL5 = 5           ; Symbol Counter Output Compare Register 1 HL-Byte bit 5
		SCOCR1HL6 = 6           ; Symbol Counter Output Compare Register 1 HL-Byte bit 6
		SCOCR1HL7 = 7           ; Symbol Counter Output Compare Register 1 HL-Byte bit 7
	}
	SCOCR1HH(0xf8) {        ; Symbol Counter Output Compare Register 1 HH-Byte
		SCOCR1HH0 = 0           ; Symbol Counter Output Compare Register 1 HH-Byte bit 0
		SCOCR1HH1 = 1           ; Symbol Counter Output Compare Register 1 HH-Byte bit 1
		SCOCR1HH2 = 2           ; Symbol Counter Output Compare Register 1 HH-Byte bit 2
		SCOCR1HH3 = 3           ; Symbol Counter Output Compare Register 1 HH-Byte bit 3
		SCOCR1HH4 = 4           ; Symbol Counter Output Compare Register 1 HH-Byte bit 4
		SCOCR1HH5 = 5           ; Symbol Counter Output Compare Register 1 HH-Byte bit 5
		SCOCR1HH6 = 6           ; Symbol Counter Output Compare Register 1 HH-Byte bit 6
		SCOCR1HH7 = 7           ; Symbol Counter Output Compare Register 1 HH-Byte bit 7
	}
}

