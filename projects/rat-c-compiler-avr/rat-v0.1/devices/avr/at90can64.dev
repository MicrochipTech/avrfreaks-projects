device {
	name = "AT90CAN64"
	prog_size = 0x10000
	eeprom_size = 0x0800
	ram_size = 0x1000
	ram_start = 0x0100
}

interrupts {
	RESET = 0x00            ; External Pin, Power-on Reset, Brown-out Reset, Watchdog Reset and JTAG AVR Reset
	INT0 = 0x01             ; External Interrupt Request 0
	INT1 = 0x02             ; External Interrupt Request 1
	INT2 = 0x03             ; External Interrupt Request 2
	INT3 = 0x04             ; External Interrupt Request 3
	INT4 = 0x05             ; External Interrupt Request 4
	INT5 = 0x06             ; External Interrupt Request 5
	INT6 = 0x07             ; External Interrupt Request 6
	INT7 = 0x08             ; External Interrupt Request 7
	TIMER2_COMP = 0x09      ; Timer/Counter2 Compare Match
	TIMER2_OVF = 0x0a       ; Timer/Counter2 Overflow
	TIMER1_CAPT = 0x0b      ; Timer/Counter1 Capture Event
	TIMER1_COMPA = 0x0c     ; Timer/Counter1 Compare Match A
	TIMER1_COMPB = 0x0d     ; Timer/Counter Compare Match B
	TIMER1_COMPC = 0x0e     ; Timer/Counter1 Compare Match C
	TIMER1_OVF = 0x0f       ; Timer/Counter1 Overflow
	TIMER0_COMP = 0x10      ; Timer/Counter0 Compare Match
	TIMER0_OVF = 0x11       ; Timer/Counter0 Overflow
	CANIT = 0x12            ; CAN Transfer Complete or Error
	OVRIT = 0x13            ; CAN Timer Overrun
	SPI_STC = 0x14          ; SPI Serial Transfer Complete
	USART0_RX = 0x15        ; USART0, Rx Complete
	USART0_UDRE = 0x16      ; USART0 Data Register Empty
	USART0_TX = 0x17        ; USART0, Tx Complete
	ANALOG_COMP = 0x18      ; Analog Comparator
	ADC = 0x19              ; ADC Conversion Complete
	EE_READY = 0x1a         ; EEPROM Ready
	TIMER3_CAPT = 0x1b      ; Timer/Counter3 Capture Event
	TIMER3_COMPA = 0x1c     ; Timer/Counter3 Compare Match A
	TIMER3_COMPB = 0x1d     ; Timer/Counter3 Compare Match B
	TIMER3_COMPC = 0x1e     ; Timer/Counter3 Compare Match C
	TIMER3_OVF = 0x1f       ; Timer/Counter3 Overflow
	USART1_RX = 0x20        ; USART1, Rx Complete
	USART1_UDRE = 0x21      ; USART1, Data Register Empty
	USART1_TX = 0x22        ; USART1, Tx Complete
	TWI = 0x23              ; 2-wire Serial Interface
	SPM_READY = 0x24        ; Store Program Memory Read
}

registers {
	PINA(0x00)              ; Port A Input Pins
	DDRA(0x01)              ; Port A Data Direction Register
	PORTA(0x02)             ; Port A Data Register
	PINB(0x03)              ; Port B Input Pins
	DDRB(0x04)              ; Port B Data Direction Register
	PORTB(0x05)             ; Port B Data Register
	PINC(0x06)              ; Port C Input Pins
	DDRC(0x07)              ; Port C Data Direction Register
	PORTC(0x08)             ; Port C Data Register
	PIND(0x09)              ; Port D Input Pins
	DDRD(0x0a)              ; Port D Data Direction Register
	PORTD(0x0b)             ; Port D Data Register
	PINE(0x0c)              ; Input Pins, Port E
	DDRE(0x0d)              ; Data Direction Register, Port E
	PORTE(0x0e)             ; Data Register, Port E
	PINF(0x0f)              ; Input Pins, Port F
	DDRF(0x10)              ; Data Direction Register, Port F
	PORTF(0x11)             ; Data Register, Port F
	PING(0x12)              ; Input Pins, Port G
	DDRG(0x13)              ; Data Direction Register, Port G
	PORTG(0x14)             ; Data Register, Port G
	TIFR0(0x15) {           ; Timer/Counter0 Interrupt Flag register
		TOV0 = 0                ; Timer/Counter0 Overflow Flag
		OCF0A = 1               ; Timer/Counter0 Output Compare Flag 0
	}
	TIFR1(0x16) {           ; Timer/Counter Interrupt Flag register
		TOV1 = 0                ; Timer/Counter1 Overflow Flag
		OCF1A = 1               ; Output Compare Flag 1A
		OCF1B = 2               ; Output Compare Flag 1B
		OCF1C = 3               ; Output Compare Flag 1C
		ICF1 = 5                ; Input Capture Flag 1
	}
	TIFR2(0x17) {           ; Timer/Counter Interrupt Flag Register
		TOV2 = 0                ; Timer/Counter2 Overflow Flag
		OCF2A = 1               ; Output Compare Flag 2
	}
	TIFR3(0x18) {           ; Timer/Counter Interrupt Flag register
		TOV3 = 0                ; Timer/Counter3 Overflow Flag
		OCF3A = 1               ; Output Compare Flag 3A
		OCF3B = 2               ; Output Compare Flag 3B
		OCF3C = 3               ; Output Compare Flag 3C
		ICF3 = 5                ; Input Capture Flag 3
	}
	EIFR(0x1c) {            ; External Interrupt Flag Register
		INTF0 = 0               ; External Interrupt Flags bit 0
		INTF1 = 1               ; External Interrupt Flags bit 1
		INTF2 = 2               ; External Interrupt Flags bit 2
		INTF3 = 3               ; External Interrupt Flags bit 3
		INTF4 = 4               ; External Interrupt Flags bit 4
		INTF5 = 5               ; External Interrupt Flags bit 5
		INTF6 = 6               ; External Interrupt Flags bit 6
		INTF7 = 7               ; External Interrupt Flags bit 7
	}
	EIMSK(0x1d) {           ; External Interrupt Mask Register
		INT0 = 0                ; External Interrupt Request 7 Enable bit 0
		INT1 = 1                ; External Interrupt Request 7 Enable bit 1
		INT2 = 2                ; External Interrupt Request 7 Enable bit 2
		INT3 = 3                ; External Interrupt Request 7 Enable bit 3
		INT4 = 4                ; External Interrupt Request 7 Enable bit 4
		INT5 = 5                ; External Interrupt Request 7 Enable bit 5
		INT6 = 6                ; External Interrupt Request 7 Enable bit 6
		INT7 = 7                ; External Interrupt Request 7 Enable bit 7
	}
	GPIOR0(0x1e) {          ; General Purpose IO Register 0
		GPIOR00 = 0             ; General Purpose IO Register 0 bit 0
		GPIOR01 = 1             ; General Purpose IO Register 0 bit 1
		GPIOR02 = 2             ; General Purpose IO Register 0 bit 2
		GPIOR03 = 3             ; General Purpose IO Register 0 bit 3
		GPIOR04 = 4             ; General Purpose IO Register 0 bit 4
		GPIOR05 = 5             ; General Purpose IO Register 0 bit 5
		GPIOR06 = 6             ; General Purpose IO Register 0 bit 6
		GPIOR07 = 7             ; General Purpose IO Register 0 bit 7
	}
	EECR(0x1f) {            ; EEPROM Control Register
		EERE = 0                ; EEPROM Read Enable
		EEWE = 1                ; EEPROM Write Enable
		EEMWE = 2               ; EEPROM Master Write Enable
		EERIE = 3               ; EEPROM Ready Interrupt Enable
	}
	EEDR(0x20) {            ; EEPROM Data Register
		EEDR0 = 0               ; EEPROM Data bits bit 0
		EEDR1 = 1               ; EEPROM Data bits bit 1
		EEDR2 = 2               ; EEPROM Data bits bit 2
		EEDR3 = 3               ; EEPROM Data bits bit 3
		EEDR4 = 4               ; EEPROM Data bits bit 4
		EEDR5 = 5               ; EEPROM Data bits bit 5
		EEDR6 = 6               ; EEPROM Data bits bit 6
		EEDR7 = 7               ; EEPROM Data bits bit 7
	}
	EEAR(0x21, 0x22) {      ; EEPROM Read/Write Access Bytes - Only bit 10..8 are used in AT90CAN64 - Only bit 9..8 are used in AT90CAN32
		EEAR0 = 0               ; EEPROM Address bits bit 0
		EEAR1 = 1               ; EEPROM Address bits bit 1
		EEAR2 = 2               ; EEPROM Address bits bit 2
		EEAR3 = 3               ; EEPROM Address bits bit 3
		EEAR4 = 4               ; EEPROM Address bits bit 4
		EEAR5 = 5               ; EEPROM Address bits bit 5
		EEAR6 = 6               ; EEPROM Address bits bit 6
		EEAR7 = 7               ; EEPROM Address bits bit 7
		EEAR8 = 8               ; EEPROM Address bits bit 8
		EEAR9 = 9               ; EEPROM Address bits bit 9
		EEAR10 = 10             ; EEPROM Address bits bit 10
		EEAR11 = 11             ; EEPROM Address bits bit 11
	}
	GTCCR(0x23) {           ; General Timer/Counter Control Register
		PSR310 = 0              ; Prescaler Reset Timer/Counter1 and Timer/Counter0
		PSR2 = 1                ; Prescaler Reset Timer/Counter2
		TSM = 7                 ; Timer/Counter Synchronization Mode
	}
	TCCR0A(0x24) {          ; Timer/Counter0 Control Register
		CS00 = 0                ; Clock Selects bit 0
		CS01 = 1                ; Clock Selects bit 1
		CS02 = 2                ; Clock Selects bit 2
		WGM01 = 3               ; Waveform Generation Mode 1
		COM0A0 = 4              ; Compare Match Output Modes bit 0
		COM0A1 = 5              ; Compare Match Output Modes bit 1
		WGM00 = 6               ; Waveform Generation Mode 0
		FOC0A = 7               ; Force Output Compare
	}
	TCNT0(0x26)             ; Timer/Counter0
	OCR0A(0x27) {           ; Timer/Counter0 Output Compare Register
		OCR0A0 = 0              ; Output Compare A bits bit 0
		OCR0A1 = 1              ; Output Compare A bits bit 1
		OCR0A2 = 2              ; Output Compare A bits bit 2
		OCR0A3 = 3              ; Output Compare A bits bit 3
		OCR0A4 = 4              ; Output Compare A bits bit 4
		OCR0A5 = 5              ; Output Compare A bits bit 5
		OCR0A6 = 6              ; Output Compare A bits bit 6
		OCR0A7 = 7              ; Output Compare A bits bit 7
	}
	GPIOR1(0x2a) {          ; General Purpose IO Register 1
		GPIOR0 = 0              ; General Purpose IO Register 1 bis bit 0
		GPIOR1 = 1              ; General Purpose IO Register 1 bis bit 1
		GPIOR2 = 2              ; General Purpose IO Register 1 bis bit 2
		GPIOR3 = 3              ; General Purpose IO Register 1 bis bit 3
		GPIOR4 = 4              ; General Purpose IO Register 1 bis bit 4
		GPIOR5 = 5              ; General Purpose IO Register 1 bis bit 5
		GPIOR6 = 6              ; General Purpose IO Register 1 bis bit 6
		GPIOR7 = 7              ; General Purpose IO Register 1 bis bit 7
	}
	GPIOR2(0x2b) {          ; General Purpose IO Register 2
		GPIOR0 = 0              ; General Purpose IO Register 2 bis bit 0
		GPIOR1 = 1              ; General Purpose IO Register 2 bis bit 1
		GPIOR2 = 2              ; General Purpose IO Register 2 bis bit 2
		GPIOR3 = 3              ; General Purpose IO Register 2 bis bit 3
		GPIOR4 = 4              ; General Purpose IO Register 2 bis bit 4
		GPIOR5 = 5              ; General Purpose IO Register 2 bis bit 5
		GPIOR6 = 6              ; General Purpose IO Register 2 bis bit 6
		GPIOR7 = 7              ; General Purpose IO Register 2 bis bit 7
	}
	SPCR(0x2c) {            ; SPI Control Register
		SPR0 = 0                ; SPI Clock Rate Selects bit 0
		SPR1 = 1                ; SPI Clock Rate Selects bit 1
		CPHA = 2                ; Clock Phase
		CPOL = 3                ; Clock polarity
		MSTR = 4                ; Master/Slave Select
		DORD = 5                ; Data Order
		SPE = 6                 ; SPI Enable
		SPIE = 7                ; SPI Interrupt Enable
	}
	SPSR(0x2d) {            ; SPI Status Register
		SPI2X = 0               ; Double SPI Speed Bit
		WCOL = 6                ; Write Collision Flag
		SPIF = 7                ; SPI Interrupt Flag
	}
	SPDR(0x2e) {            ; SPI Data Register
		SPD0 = 0                ; SPI Data Register bit 0
		SPD1 = 1                ; SPI Data Register bit 1
		SPD2 = 2                ; SPI Data Register bit 2
		SPD3 = 3                ; SPI Data Register bit 3
		SPD4 = 4                ; SPI Data Register bit 4
		SPD5 = 5                ; SPI Data Register bit 5
		SPD6 = 6                ; SPI Data Register bit 6
		SPD7 = 7                ; SPI Data Register bit 7
	}
	ACSR(0x30) {            ; Analog Comparator Control And Status Register
		ACIS0 = 0               ; Analog Comparator Interrupt Mode Select bits bit 0
		ACIS1 = 1               ; Analog Comparator Interrupt Mode Select bits bit 1
		ACIC = 2                ; Analog Comparator Input Capture Enable
		ACIE = 3                ; Analog Comparator Interrupt Enable
		ACI = 4                 ; Analog Comparator Interrupt Flag
		ACO = 5                 ; Analog Compare Output
		ACBG = 6                ; Analog Comparator Bandgap Select
		ACD = 7                 ; Analog Comparator Disable
	}
	OCDR(0x31)              ; On-Chip Debug Related Register in I/O Memory
	SMCR(0x33) {            ; Sleep Mode Control Register
		SE = 0                  ; Sleep Enable
		SM0 = 1                 ; Sleep Mode Select bits bit 0
		SM1 = 2                 ; Sleep Mode Select bits bit 1
		SM2 = 3                 ; Sleep Mode Select bits bit 2
	}
	MCUSR(0x34) {           ; MCU Status Register
		PORF = 0                ; Power-on reset flag
		EXTRF = 1               ; External Reset Flag
		BORF = 2                ; Brown-out Reset Flag
		WDRF = 3                ; Watchdog Reset Flag
		JTRF = 4                ; JTAG Reset Flag
	}
	MCUCR(0x35) {           ; MCU Control Register
		IVCE = 0                ; Interrupt Vector Change Enable
		IVSEL = 1               ; Interrupt Vector Select
		PUD = 4                 ; Pull-up disable
		JTD = 7                 ; JTAG Interface Disable
	}
	SPMCSR(0x37) {          ; Store Program Memory Control Register
		SPMEN = 0               ; Store Program Memory Enable
		PGERS = 1               ; Page Erase
		PGWRT = 2               ; Page Write
		BLBSET = 3              ; Boot Lock Bit Set
		RWWSRE = 4              ; Read While Write section read enable
		RWWSB = 6               ; Read While Write Section Busy
		SPMIE = 7               ; SPM Interrupt Enable
	}
	RAMPZ(0x3b) {           ; RAM Page Z Select Register - Not used.
		RAMPZ0 = 0              ; RAM Page Z Select Register Bit 0
	}
	SP(0x3d, 0x3e)          ; Stack Pointer 
	SREG(0x3f) {            ; Status Register
		C = 0                   ; Carry Flag
		Z = 1                   ; Zero Flag
		N = 2                   ; Negative Flag
		V = 3                   ; Two's Complement Overflow Flag
		S = 4                   ; Sign Bit
		H = 5                   ; Half Carry Flag
		T = 6                   ; Bit Copy Storage
		I = 7                   ; Global Interrupt Enable
	}
	WDTCR(0x60) {           ; Watchdog Timer Control Register
		WDP0 = 0                ; Watch Dog Timer Prescaler bits bit 0
		WDP1 = 1                ; Watch Dog Timer Prescaler bits bit 1
		WDP2 = 2                ; Watch Dog Timer Prescaler bits bit 2
		WDE = 3                 ; Watch Dog Enable
		WDCE = 4                ; Watchdog Change Enable
	}
	CLKPR(0x61) {           ; Clock Prescale Register
		CLKPS0 = 0              ; 
		CLKPS1 = 1              ; 
		CLKPS2 = 2              ; 
		CLKPS3 = 3              ; 
		CLKPCE = 7              ; 
	}
	OSCCAL(0x66) {          ; Oscillator Calibration Value
		OSCCAL0 = 0             ; Oscillator Calibration  bit 0
		OSCCAL1 = 1             ; Oscillator Calibration  bit 1
		OSCCAL2 = 2             ; Oscillator Calibration  bit 2
		OSCCAL3 = 3             ; Oscillator Calibration  bit 3
		OSCCAL4 = 4             ; Oscillator Calibration  bit 4
		OSCCAL5 = 5             ; Oscillator Calibration  bit 5
		OSCCAL6 = 6             ; Oscillator Calibration  bit 6
		OSCCAL7 = 7             ; Oscillator Calibration  bit 7
	}
	EICRA(0x69) {           ; External Interrupt Control Register A
		ISC00 = 0               ; External Interrupt Sense Control Bit bit 0
		ISC01 = 1               ; External Interrupt Sense Control Bit bit 1
		ISC10 = 2               ; External Interrupt Sense Control Bit bit 0
		ISC11 = 3               ; External Interrupt Sense Control Bit bit 1
		ISC20 = 4               ; External Interrupt Sense Control Bit bit 0
		ISC21 = 5               ; External Interrupt Sense Control Bit bit 1
		ISC30 = 6               ; External Interrupt Sense Control Bit bit 0
		ISC31 = 7               ; External Interrupt Sense Control Bit bit 1
	}
	EICRB(0x6a) {           ; External Interrupt Control Register B
		ISC40 = 0               ; External Interrupt 7-4 Sense Control Bit bit 0
		ISC41 = 1               ; External Interrupt 7-4 Sense Control Bit bit 1
		ISC50 = 2               ; External Interrupt 7-4 Sense Control Bit bit 0
		ISC51 = 3               ; External Interrupt 7-4 Sense Control Bit bit 1
		ISC60 = 4               ; External Interrupt 7-4 Sense Control Bit bit 0
		ISC61 = 5               ; External Interrupt 7-4 Sense Control Bit bit 1
		ISC70 = 6               ; External Interrupt 7-4 Sense Control Bit bit 0
		ISC71 = 7               ; External Interrupt 7-4 Sense Control Bit bit 1
	}
	TIMSK0(0x6e) {          ; Timer/Counter0 Interrupt Mask Register
		TOIE0 = 0               ; Timer/Counter0 Overflow Interrupt Enable
		OCIE0A = 1              ; Timer/Counter0 Output Compare Match Interrupt Enable
	}
	TIMSK1(0x6f) {          ; Timer/Counter Interrupt Mask Register
		TOIE1 = 0               ; Timer/Counter1 Overflow Interrupt Enable
		OCIE1A = 1              ; Timer/Counter1 Output CompareA Match Interrupt Enable
		OCIE1B = 2              ; Timer/Counter1 Output CompareB Match Interrupt Enable
		OCIE1C = 3              ; Timer/Counter1 Output CompareC Match Interrupt Enable
		ICIE1 = 5               ; Timer/Counter1 Input Capture Interrupt Enable
	}
	TIMSK2(0x70) {          ; Timer/Counter Interrupt Mask register
		TOIE2 = 0               ; Timer/Counter2 Overflow Interrupt Enable
		OCIE2A = 1              ; Timer/Counter2 Output Compare Match Interrupt Enable
	}
	TIMSK3(0x71) {          ; Timer/Counter Interrupt Mask Register
		TOIE3 = 0               ; Timer/Counter3 Overflow Interrupt Enable
		OCIE3A = 1              ; Timer/Counter3 Output CompareA Match Interrupt Enable
		OCIE3B = 2              ; Timer/Counter3 Output CompareB Match Interrupt Enable
		OCIE3C = 3              ; Timer/Counter3 Output CompareC Match Interrupt Enable
		ICIE3 = 5               ; Timer/Counter3 Input Capture Interrupt Enable
	}
	XMCRA(0x74) {           ; External Memory Control Register A
		SRW00 = 0               ; Wait state select bit lower page bit 0
		SRW01 = 1               ; Wait state select bit lower page bit 1
		SRW10 = 2               ; Wait state select bit upper page bit 0
		SRW11 = 3               ; Wait state select bit upper page bit 1
		SRL0 = 4                ; Wait state page limit bit 0
		SRL1 = 5                ; Wait state page limit bit 1
		SRL2 = 6                ; Wait state page limit bit 2
		SRE = 7                 ; External SRAM Enable
	}
	XMCRB(0x75) {           ; External Memory Control Register B
		XMM0 = 0                ; External Memory High Mask bit 0
		XMM1 = 1                ; External Memory High Mask bit 1
		XMM2 = 2                ; External Memory High Mask bit 2
		XMBK = 7                ; External Memory Bus Keeper Enable
	}
	ADC(0x78, 0x79)         ; ADC Data Register  Bytes
	ADCSRA(0x7a) {          ; The ADC Control and Status register
		ADPS0 = 0               ; ADC Prescaler Select Bits bit 0
		ADPS1 = 1               ; ADC Prescaler Select Bits bit 1
		ADPS2 = 2               ; ADC Prescaler Select Bits bit 2
		ADIE = 3                ; ADC Interrupt Enable
		ADIF = 4                ; ADC Interrupt Flag
		ADATE = 5               ; ADC Auto Trigger Enable
		ADSC = 6                ; ADC Start Conversion
		ADEN = 7                ; ADC Enable
	}
	ADCSRB(0x7b) {          ; ADC Control and Status Register B
		ADTS0 = 0               ; ADC Auto Trigger Sources bit 0
		ADTS1 = 1               ; ADC Auto Trigger Sources bit 1
		ADTS2 = 2               ; ADC Auto Trigger Sources bit 2
		ACME = 6                ; Analog Comparator Multiplexer Enable
		ADHSM = 7               ; ADC High Speed Mode
	}
	ADMUX(0x7c) {           ; The ADC multiplexer Selection Register
		MUX0 = 0                ; Analog Channel and Gain Selection Bits bit 0
		MUX1 = 1                ; Analog Channel and Gain Selection Bits bit 1
		MUX2 = 2                ; Analog Channel and Gain Selection Bits bit 2
		MUX3 = 3                ; Analog Channel and Gain Selection Bits bit 3
		MUX4 = 4                ; Analog Channel and Gain Selection Bits bit 4
		ADLAR = 5               ; Left Adjust Result
		REFS0 = 6               ; Reference Selection Bits bit 0
		REFS1 = 7               ; Reference Selection Bits bit 1
	}
	DIDR0(0x7e) {           ; Digital Input Disable Register 1
		ADC0D = 0               ; ADC0 Digital input Disable
		ADC1D = 1               ; ADC1 Digital input Disable
		ADC2D = 2               ; ADC2 Digital input Disable
		ADC3D = 3               ; ADC3 Digital input Disable
		ADC4D = 4               ; ADC4 Digital input Disable
		ADC5D = 5               ; ADC5 Digital input Disable
		ADC6D = 6               ; ADC6 Digital input Disable
		ADC7D = 7               ; ADC7 Digital input Disable
	}
	DIDR1(0x7f) {           ; 
		AIN0D = 0               ; AIN0 Digital Input Disable
		AIN1D = 1               ; AIN1 Digital Input Disable
	}
	TCCR1A(0x80) {          ; Timer/Counter1 Control Register A
		WGM10 = 0               ; Waveform Generation Mode bit 0
		WGM11 = 1               ; Waveform Generation Mode bit 1
		COM1C0 = 2              ; Compare Output Mode 1C, bits bit 0
		COM1C1 = 3              ; Compare Output Mode 1C, bits bit 1
		COM1B0 = 4              ; Compare Output Mode 1B, bits bit 0
		COM1B1 = 5              ; Compare Output Mode 1B, bits bit 1
		COM1A0 = 6              ; Compare Output Mode 1A, bits bit 0
		COM1A1 = 7              ; Compare Output Mode 1A, bits bit 1
	}
	TCCR1B(0x81) {          ; Timer/Counter1 Control Register B
		CS10 = 0                ; Prescaler source of Timer/Counter 1 bit 0
		CS11 = 1                ; Prescaler source of Timer/Counter 1 bit 1
		CS12 = 2                ; Prescaler source of Timer/Counter 1 bit 2
		WGM10 = 3               ; Waveform Generation Mode bit 0
		WGM11 = 4               ; Waveform Generation Mode bit 1
		ICES1 = 6               ; Input Capture 1 Edge Select
		ICNC1 = 7               ; Input Capture 1 Noise Canceler
	}
	TCCR1C(0x82) {          ; Timer/Counter 1 Control Register C
		FOC1C = 5               ; Force Output Compare 1C
		FOC1B = 6               ; Force Output Compare 1B
		FOC1A = 7               ; Force Output Compare 1A
	}
	TCNT1(0x84, 0x85)       ; Timer/Counter1  Bytes
	ICR1(0x86, 0x87)        ; Timer/Counter1 Input Capture Register  Bytes
	OCR1A(0x88, 0x89)       ; Timer/Counter1 Output Compare Register  Bytes
	OCR1B(0x8a, 0x8b)       ; Timer/Counter1 Output Compare Register  Bytes
	OCR1C(0x8c, 0x8d)       ; Timer/Counter1 Output Compare Register  Bytes
	TCCR3A(0x90) {          ; Timer/Counter3 Control Register A
		WGM30 = 0               ; Waveform Generation Mode bit 0
		WGM31 = 1               ; Waveform Generation Mode bit 1
		COM3C0 = 2              ; Compare Output Mode 3C, bits bit 0
		COM3C1 = 3              ; Compare Output Mode 3C, bits bit 1
		COM3B0 = 4              ; Compare Output Mode 3B, bits bit 0
		COM3B1 = 5              ; Compare Output Mode 3B, bits bit 1
		COM3A0 = 6              ; Compare Output Mode 3A, bits bit 0
		COM3A1 = 7              ; Compare Output Mode 3A, bits bit 1
	}
	TCCR3B(0x91) {          ; Timer/Counter3 Control Register B
		CS30 = 0                ; Prescaler source of Timer/Counter 3 bit 0
		CS31 = 1                ; Prescaler source of Timer/Counter 3 bit 1
		CS32 = 2                ; Prescaler source of Timer/Counter 3 bit 2
		WGM30 = 3               ; Waveform Generation Mode bit 0
		WGM31 = 4               ; Waveform Generation Mode bit 1
		ICES3 = 6               ; Input Capture 3 Edge Select
		ICNC3 = 7               ; Input Capture 3 Noise Canceler
	}
	TCCR3C(0x92) {          ; Timer/Counter 3 Control Register C
		FOC3C = 5               ; Force Output Compare 3C
		FOC3B = 6               ; Force Output Compare 3B
		FOC3A = 7               ; Force Output Compare 3A
	}
	TCNT3(0x94, 0x95)       ; Timer/Counter3  Bytes
	ICR3(0x96, 0x97)        ; Timer/Counter3 Input Capture Register  Bytes
	OCR3A(0x98, 0x99)       ; Timer/Counter3 Output Compare Register  Bytes
	OCR3B(0x9a, 0x9b)       ; Timer/Counter3 Output Compare Register  Bytes
	OCR3C(0x9c, 0x9d)       ; Timer/Counter3 Output Compare Register  Bytes
	TCCR2A(0xb0) {          ; Timer/Counter2 Control Register
		CS20 = 0                ; Clock Select bits bit 0
		CS21 = 1                ; Clock Select bits bit 1
		CS22 = 2                ; Clock Select bits bit 2
		WGM21 = 3               ; Waveform Generation Mode
		COM2A0 = 4              ; Compare Output Mode bits bit 0
		COM2A1 = 5              ; Compare Output Mode bits bit 1
		WGM20 = 6               ; Waveform Genration Mode
		FOC2A = 7               ; Force Output Compare
	}
	TCNT2(0xb2)             ; Timer/Counter2
	OCR2A(0xb3)             ; Timer/Counter2 Output Compare Register
	ASSR(0xb6) {            ; Asynchronous Status Register
		TCR2UB = 0              ; TCR2UB: Timer/Counter Control Register2 Update Busy
		OCR2UB = 1              ; Output Compare Register2 Update Busy
		TCN2UB = 2              ; TCN2UB: Timer/Counter2 Update Busy
		AS2 = 3                 ; AS2: Asynchronous Timer/Counter2
		EXCLK = 4               ; Enable External Clock Interrupt
	}
	TWBR(0xb8)              ; TWI Bit Rate register
	TWSR(0xb9) {            ; TWI Status Register
		TWPS0 = 0               ; TWI Prescaler bit 0
		TWPS1 = 1               ; TWI Prescaler bit 1
		TWS0 = 3                ; TWI Status bit 0
		TWS1 = 4                ; TWI Status bit 1
		TWS2 = 5                ; TWI Status bit 2
		TWS3 = 6                ; TWI Status bit 3
		TWS4 = 7                ; TWI Status bit 4
	}
	TWAR(0xba) {            ; TWI (Slave) Address register
		TWGCE = 0               ; TWI General Call Recognition Enable Bit
		TWA0 = 1                ; TWI (Slave) Address register Bits bit 0
		TWA1 = 2                ; TWI (Slave) Address register Bits bit 1
		TWA2 = 3                ; TWI (Slave) Address register Bits bit 2
		TWA3 = 4                ; TWI (Slave) Address register Bits bit 3
		TWA4 = 5                ; TWI (Slave) Address register Bits bit 4
		TWA5 = 6                ; TWI (Slave) Address register Bits bit 5
		TWA6 = 7                ; TWI (Slave) Address register Bits bit 6
	}
	TWDR(0xbb)              ; TWI Data register
	TWCR(0xbc) {            ; TWI Control Register
		TWIE = 0                ; TWI Interrupt Enable
		TWEN = 2                ; TWI Enable Bit
		TWWC = 3                ; TWI Write Collition Flag
		TWSTO = 4               ; TWI Stop Condition Bit
		TWSTA = 5               ; TWI Start Condition Bit
		TWEA = 6                ; TWI Enable Acknowledge Bit
		TWINT = 7               ; TWI Interrupt Flag
	}
	UCSR0A(0xc0) {          ; USART Control and Status Register A
		MPCM0 = 0               ; Multi-processor Communication Mode
		U2X0 = 1                ; Double the USART transmission speed
		UPE0 = 2                ; Parity Error
		DOR0 = 3                ; Data overRun
		FE0 = 4                 ; Framing Error
		UDRE0 = 5               ; USART Data Register Empty
		TXC0 = 6                ; USART Transmitt Complete
		RXC0 = 7                ; USART Receive Complete
	}
	UCSR0B(0xc1) {          ; USART Control and Status Register B
		TXB80 = 0               ; Transmit Data Bit 8
		RXB80 = 1               ; Receive Data Bit 8
		UCSZ02 = 2              ; Character Size
		TXEN0 = 3               ; Transmitter Enable
		RXEN0 = 4               ; Receiver Enable
		UDRIE0 = 5              ; USART Data register Empty Interrupt Enable
		TXCIE0 = 6              ; TX Complete Interrupt Enable
		RXCIE0 = 7              ; RX Complete Interrupt Enable
	}
	UCSR0C(0xc2) {          ; USART Control and Status Register C
		UCPOL0 = 0              ; Clock Polarity
		UCSZ00 = 1              ; Character Size bit 0
		UCSZ01 = 2              ; Character Size bit 1
		USBS0 = 3               ; Stop Bit Select
		UPM00 = 4               ; Parity Mode Bits bit 0
		UPM01 = 5               ; Parity Mode Bits bit 1
		UMSEL0 = 6              ; USART Mode Select
	}
	UBRR0(0xc4, 0xc5)       ; USART Baud Rate Register t Bytes
	UDR0(0xc6)              ; USART I/O Data Register
	UCSR1A(0xc8) {          ; USART Control and Status Register A
		MPCM1 = 0               ; Multi-processor Communication Mode
		U2X1 = 1                ; Double the USART transmission speed
		UPE1 = 2                ; Parity Error
		DOR1 = 3                ; Data overRun
		FE1 = 4                 ; Framing Error
		UDRE1 = 5               ; USART Data Register Empty
		TXC1 = 6                ; USART Transmitt Complete
		RXC1 = 7                ; USART Receive Complete
	}
	UCSR1B(0xc9) {          ; USART Control and Status Register B
		TXB81 = 0               ; Transmit Data Bit 8
		RXB81 = 1               ; Receive Data Bit 8
		UCSZ12 = 2              ; Character Size
		TXEN1 = 3               ; Transmitter Enable
		RXEN1 = 4               ; Receiver Enable
		UDRIE1 = 5              ; USART Data register Empty Interrupt Enable
		TXCIE1 = 6              ; TX Complete Interrupt Enable
		RXCIE1 = 7              ; RX Complete Interrupt Enable
	}
	UCSR1C(0xca) {          ; USART Control and Status Register C
		UCPOL1 = 0              ; Clock Polarity
		UCSZ10 = 1              ; Character Size bit 0
		UCSZ11 = 2              ; Character Size bit 1
		USBS1 = 3               ; Stop Bit Select
		UPM10 = 4               ; Parity Mode Bits bit 0
		UPM11 = 5               ; Parity Mode Bits bit 1
		UMSEL1 = 6              ; USART Mode Select
	}
	UBRR1(0xcc, 0xcd)       ; USART Baud Rate Register t Bytes
	UDR1(0xce)              ; USART I/O Data Register
	CANGCON(0xd8) {         ; CAN General Control Register
		SWRES = 0               ; Software Reset Request
		ENASTB = 1              ; Enable / Standby
		TEST = 2                ; Test Mode
		LISTEN = 3              ; Listening Mode
		SYNTTC = 4              ; Synchronization of TTC
		TTC = 5                 ; Time Trigger Communication
		OVRQ = 6                ; Overload Frame Request
		ABRQ = 7                ; Abort Request
	}
	CANGSTA(0xd9) {         ; CAN General Status Register
		ERRP = 0                ; Error Passive Mode
		BOFF = 1                ; Bus Off Mode
		ENFG = 2                ; Enable Flag
		RXBSY = 3               ; Receiver Busy
		TXBSY = 4               ; Transmitter Busy
		OVRG = 6                ; Overload Frame Flag
	}
	CANGIT(0xda) {          ; CAN General Interrupt Register
		AERG = 0                ; Ackknowledgement Error General
		FERG = 1                ; Form Error General
		CERG = 2                ; CRC Error General
		SERG = 3                ; Stuff Error General
		BXOK = 4                ; Burst Receive Interrupt
		OVRTIM = 5              ; Overrun CAN Timer
		BOFFIT = 6              ; Bus Off Interrupt Flag
		CANIT = 7               ; General Interrupt Flag
	}
	CANGIE(0xdb) {          ; CAN General Interrupt Enable Register
		ENOVRT = 0              ; Enable CAN Timer Overrun Interrupt
		ENERG = 1               ; Enable General Error Interrupt
		ENBX = 2                ; Enable Burst Receive Interrupt
		ENERR = 3               ; Enable MOb Error Interrupt
		ENTX = 4                ; Enable Transmitt Interrupt
		ENRX = 5                ; Enable Receive Interrupt
		ENBOFF = 6              ; Enable Bus Off INterrupt
		ENIT = 7                ; Enable all Interrupts
	}
	CANEN2(0xdc) {          ; Enable MOb Register
		ENMOB0 = 0              ; Enable MOb bit 0
		ENMOB1 = 1              ; Enable MOb bit 1
		ENMOB2 = 2              ; Enable MOb bit 2
		ENMOB3 = 3              ; Enable MOb bit 3
		ENMOB4 = 4              ; Enable MOb bit 4
		ENMOB5 = 5              ; Enable MOb bit 5
		ENMOB6 = 6              ; Enable MOb bit 6
		ENMOB7 = 7              ; Enable MOb bit 7
	}
	CANEN1(0xdd) {          ; Enable MOb Register
		ENMOB0 = 0              ; Enable MOb bit 0
		ENMOB1 = 1              ; Enable MOb bit 1
		ENMOB2 = 2              ; Enable MOb bit 2
		ENMOB3 = 3              ; Enable MOb bit 3
		ENMOB4 = 4              ; Enable MOb bit 4
		ENMOB5 = 5              ; Enable MOb bit 5
		ENMOB6 = 6              ; Enable MOb bit 6
	}
	CANIE2(0xde) {          ; Enable Interrupt MOb Register
		IEMOB0 = 0              ; Interrupt Enable by MOb bit 0
		IEMOB1 = 1              ; Interrupt Enable by MOb bit 1
		IEMOB2 = 2              ; Interrupt Enable by MOb bit 2
		IEMOB3 = 3              ; Interrupt Enable by MOb bit 3
		IEMOB4 = 4              ; Interrupt Enable by MOb bit 4
		IEMOB5 = 5              ; Interrupt Enable by MOb bit 5
		IEMOB6 = 6              ; Interrupt Enable by MOb bit 6
		IEMOB7 = 7              ; Interrupt Enable by MOb bit 7
	}
	CANIE1(0xdf) {          ; Enable Interrupt MOb Register
		IEMOB0 = 0              ; Interrupt Enable by MOb bit 0
		IEMOB1 = 1              ; Interrupt Enable by MOb bit 1
		IEMOB2 = 2              ; Interrupt Enable by MOb bit 2
		IEMOB3 = 3              ; Interrupt Enable by MOb bit 3
		IEMOB4 = 4              ; Interrupt Enable by MOb bit 4
		IEMOB5 = 5              ; Interrupt Enable by MOb bit 5
		IEMOB6 = 6              ; Interrupt Enable by MOb bit 6
	}
	CANSIT2(0xe0) {         ; CAN Status Interrupt MOb Register
		SIT0 = 0                ; Status of Interrupt by MOb bit 0
		SIT1 = 1                ; Status of Interrupt by MOb bit 1
		SIT2 = 2                ; Status of Interrupt by MOb bit 2
		SIT3 = 3                ; Status of Interrupt by MOb bit 3
		SIT4 = 4                ; Status of Interrupt by MOb bit 4
		SIT5 = 5                ; Status of Interrupt by MOb bit 5
		SIT6 = 6                ; Status of Interrupt by MOb bit 6
		SIT7 = 7                ; Status of Interrupt by MOb bit 7
	}
	CANSIT1(0xe1) {         ; CAN Status Interrupt MOb Register
		SIT0 = 0                ; Status of Interrupt by MOb bit 0
		SIT1 = 1                ; Status of Interrupt by MOb bit 1
		SIT2 = 2                ; Status of Interrupt by MOb bit 2
		SIT3 = 3                ; Status of Interrupt by MOb bit 3
		SIT4 = 4                ; Status of Interrupt by MOb bit 4
		SIT5 = 5                ; Status of Interrupt by MOb bit 5
		SIT6 = 6                ; Status of Interrupt by MOb bit 6
	}
	CANBT1(0xe2) {          ; Bit Timing Register 1
		BRP0 = 1                ; Baud Rate Prescaler bits bit 0
		BRP1 = 2                ; Baud Rate Prescaler bits bit 1
		BRP2 = 3                ; Baud Rate Prescaler bits bit 2
		BRP3 = 4                ; Baud Rate Prescaler bits bit 3
		BRP4 = 5                ; Baud Rate Prescaler bits bit 4
		BRP5 = 6                ; Baud Rate Prescaler bits bit 5
	}
	CANBT2(0xe3) {          ; Bit Timing Register 2
		PRS0 = 1                ; Propagation Time Segment bit 0
		PRS1 = 2                ; Propagation Time Segment bit 1
		PRS2 = 3                ; Propagation Time Segment bit 2
		SJW0 = 5                ; Re-Sync Jump Width bit 0
		SJW1 = 6                ; Re-Sync Jump Width bit 1
	}
	CANBT3(0xe4) {          ; Bit Timing Register 3
		SMP = 0                 ; Sample Type
		PHS10 = 1               ; Phase Segment 1 bit 0
		PHS11 = 2               ; Phase Segment 1 bit 1
		PHS12 = 3               ; Phase Segment 1 bit 2
		PHS20 = 4               ; Phase Segments bit 0
		PHS21 = 5               ; Phase Segments bit 1
		PHS22 = 6               ; Phase Segments bit 2
	}
	CANTCON(0xe5) {         ; Timer Control Register
		TPRSC0 = 0              ; CAN Timer Prescaler bit 0
		TPRSC1 = 1              ; CAN Timer Prescaler bit 1
		TPRSC2 = 2              ; CAN Timer Prescaler bit 2
		TPRSC3 = 3              ; CAN Timer Prescaler bit 3
		TPRSC4 = 4              ; CAN Timer Prescaler bit 4
		TPRSC5 = 5              ; CAN Timer Prescaler bit 5
		TPRSC6 = 6              ; CAN Timer Prescaler bit 6
		TPRSC7 = 7              ; CAN Timer Prescaler bit 7
	}
	CANTIM(0xe6, 0xe7) {    ; Timer Register
		CANTIM0 = 0             ; CAN Timer Count bit 0
		CANTIM1 = 1             ; CAN Timer Count bit 1
		CANTIM2 = 2             ; CAN Timer Count bit 2
		CANTIM3 = 3             ; CAN Timer Count bit 3
		CANTIM4 = 4             ; CAN Timer Count bit 4
		CANTIM5 = 5             ; CAN Timer Count bit 5
		CANTIM6 = 6             ; CAN Timer Count bit 6
		CANTIM7 = 7             ; CAN Timer Count bit 7
		CANTIM8 = 8             ; CAN Timer Count bit 8
		CANTIM9 = 9             ; CAN Timer Count bit 9
		CANTIM10 = 10           ; CAN Timer Count bit 10
		CANTIM11 = 11           ; CAN Timer Count bit 11
		CANTIM12 = 12           ; CAN Timer Count bit 12
		CANTIM13 = 13           ; CAN Timer Count bit 13
		CANTIM14 = 14           ; CAN Timer Count bit 14
		CANTIM15 = 15           ; CAN Timer Count bit 15
	}
	CANTTC(0xe8, 0xe9) {    ; TTC Timer Register
		TIMTTC0 = 0             ; TTC Timer Count bit 0
		TIMTTC1 = 1             ; TTC Timer Count bit 1
		TIMTTC2 = 2             ; TTC Timer Count bit 2
		TIMTTC3 = 3             ; TTC Timer Count bit 3
		TIMTTC4 = 4             ; TTC Timer Count bit 4
		TIMTTC5 = 5             ; TTC Timer Count bit 5
		TIMTTC6 = 6             ; TTC Timer Count bit 6
		TIMTTC7 = 7             ; TTC Timer Count bit 7
		TIMTTC8 = 8             ; TTC Timer Count bit 8
		TIMTTC9 = 9             ; TTC Timer Count bit 9
		TIMTTC10 = 10           ; TTC Timer Count bit 10
		TIMTTC11 = 11           ; TTC Timer Count bit 11
		TIMTTC12 = 12           ; TTC Timer Count bit 12
		TIMTTC13 = 13           ; TTC Timer Count bit 13
		TIMTTC14 = 14           ; TTC Timer Count bit 14
		TIMTTC15 = 15           ; TTC Timer Count bit 15
	}
	CANTEC(0xea) {          ; Transmit Error Counter Register
		TEC0 = 0                ; Trasnmit Error Count bit 0
		TEC1 = 1                ; Trasnmit Error Count bit 1
		TEC2 = 2                ; Trasnmit Error Count bit 2
		TEC3 = 3                ; Trasnmit Error Count bit 3
		TEC4 = 4                ; Trasnmit Error Count bit 4
		TEC5 = 5                ; Trasnmit Error Count bit 5
		TEC6 = 6                ; Trasnmit Error Count bit 6
		TEC7 = 7                ; Trasnmit Error Count bit 7
	}
	CANREC(0xeb) {          ; Receive Error Counter Register
		REC0 = 0                ; Receive Error Count bit 0
		REC1 = 1                ; Receive Error Count bit 1
		REC2 = 2                ; Receive Error Count bit 2
		REC3 = 3                ; Receive Error Count bit 3
		REC4 = 4                ; Receive Error Count bit 4
		REC5 = 5                ; Receive Error Count bit 5
		REC6 = 6                ; Receive Error Count bit 6
		REC7 = 7                ; Receive Error Count bit 7
	}
	CANHPMOB(0xec) {        ; Highest Priority MOb Register
		CGP0 = 0                ; CAN General purpose bits bit 0
		CGP1 = 1                ; CAN General purpose bits bit 1
		CGP2 = 2                ; CAN General purpose bits bit 2
		CGP3 = 3                ; CAN General purpose bits bit 3
		HPMOB0 = 4              ; Highest Priority MOb number bit 0
		HPMOB1 = 5              ; Highest Priority MOb number bit 1
		HPMOB2 = 6              ; Highest Priority MOb number bit 2
		HPMOB3 = 7              ; Highest Priority MOb number bit 3
	}
	CANPAGE(0xed) {         ; Page MOb Register
		INDX0 = 0               ; Data Buffer Index Bits bit 0
		INDX1 = 1               ; Data Buffer Index Bits bit 1
		INDX2 = 2               ; Data Buffer Index Bits bit 2
		AINC = 3                ; MOb Data Buffer Auto Increment
		MOBNB0 = 4              ; MOb Number Bits bit 0
		MOBNB1 = 5              ; MOb Number Bits bit 1
		MOBNB2 = 6              ; MOb Number Bits bit 2
		MOBNB3 = 7              ; MOb Number Bits bit 3
	}
	CANSTMOB(0xee) {        ; MOb Status Register
		AERR = 0                ; Ackknowledgement Error
		FERR = 1                ; Form Error
		CERR = 2                ; CRC Error
		SERR = 3                ; Stuff Error
		BERR = 4                ; Bit Error
		RXOK = 5                ; Receive OK
		TXOK = 6                ; Transmit OK
		DLCW = 7                ; Data Length Code Warning
	}
	CANCDMOB(0xef) {        ; MOb Control and DLC Register
		DLC0 = 0                ; Data Length Code Bits bit 0
		DLC1 = 1                ; Data Length Code Bits bit 1
		DLC2 = 2                ; Data Length Code Bits bit 2
		DLC3 = 3                ; Data Length Code Bits bit 3
		IDE = 4                 ; Identifier Extension
		RPLV = 5                ; Reply Valid
		CONMOB0 = 6             ; MOb Config Bits bit 0
		CONMOB1 = 7             ; MOb Config Bits bit 1
	}
	CANIDT4(0xf0) {         ; Identifier Tag Register 4
		RB0TAG = 0              ; Reserved Bit 0 Tag
		RB1TAG = 1              ; Reserved Bit 1 Tag
		RTRTAG = 2              ; Remote Trasnmission Request Tag
		IDT0 = 3                ; Identifier Tag bit 0
		IDT1 = 4                ; Identifier Tag bit 1
		IDT2 = 5                ; Identifier Tag bit 2
		IDT3 = 6                ; Identifier Tag bit 3
		IDT4 = 7                ; Identifier Tag bit 4
	}
	CANIDT3(0xf1) {         ; Identifier Tag Register 3
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDT2(0xf2) {         ; Identifier Tag Register 2
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDT1(0xf3) {         ; Identifier Tag Register 1
		IDT0 = 0                ; Identifier Tag bit 0
		IDT1 = 1                ; Identifier Tag bit 1
		IDT2 = 2                ; Identifier Tag bit 2
		IDT3 = 3                ; Identifier Tag bit 3
		IDT4 = 4                ; Identifier Tag bit 4
		IDT5 = 5                ; Identifier Tag bit 5
		IDT6 = 6                ; Identifier Tag bit 6
		IDT7 = 7                ; Identifier Tag bit 7
	}
	CANIDM4(0xf4) {         ; Identifier Mask Register 4
		IDEMSK = 0              ; Identifier Extension Mask
		RTRMSK = 2              ; Remote Transmission Request Mask
		IDMSK0 = 3              ; Identifier Mask bit 0
		IDMSK1 = 4              ; Identifier Mask bit 1
		IDMSK2 = 5              ; Identifier Mask bit 2
		IDMSK3 = 6              ; Identifier Mask bit 3
		IDMSK4 = 7              ; Identifier Mask bit 4
	}
	CANIDM3(0xf5) {         ; Identifier Mask Register 3
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANIDM2(0xf6) {         ; Identifier Mask Register 2
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANIDM1(0xf7) {         ; Identifier Mask Register 1
		IDMSK0 = 0              ; Identifier Mask bit 0
		IDMSK1 = 1              ; Identifier Mask bit 1
		IDMSK2 = 2              ; Identifier Mask bit 2
		IDMSK3 = 3              ; Identifier Mask bit 3
		IDMSK4 = 4              ; Identifier Mask bit 4
		IDMSK5 = 5              ; Identifier Mask bit 5
		IDMSK6 = 6              ; Identifier Mask bit 6
		IDMSK7 = 7              ; Identifier Mask bit 7
	}
	CANSTM(0xf8, 0xf9) {    ; Time Stamp Register
		TIMSTM0 = 0             ; Time Stamp Count bit 0
		TIMSTM1 = 1             ; Time Stamp Count bit 1
		TIMSTM2 = 2             ; Time Stamp Count bit 2
		TIMSTM3 = 3             ; Time Stamp Count bit 3
		TIMSTM4 = 4             ; Time Stamp Count bit 4
		TIMSTM5 = 5             ; Time Stamp Count bit 5
		TIMSTM6 = 6             ; Time Stamp Count bit 6
		TIMSTM7 = 7             ; Time Stamp Count bit 7
		TIMSTM8 = 8             ; Time Stamp Count bit 8
		TIMSTM9 = 9             ; Time Stamp Count bit 9
		TIMSTM10 = 10           ; Time Stamp Count bit 10
		TIMSTM11 = 11           ; Time Stamp Count bit 11
		TIMSTM12 = 12           ; Time Stamp Count bit 12
		TIMSTM13 = 13           ; Time Stamp Count bit 13
		TIMSTM14 = 14           ; Time Stamp Count bit 14
		TIMSTM15 = 15           ; Time Stamp Count bit 15
	}
	CANMSG(0xfa) {          ; Message Data Register
		MSG0 = 0                ; Message Data bit 0
		MSG1 = 1                ; Message Data bit 1
		MSG2 = 2                ; Message Data bit 2
		MSG3 = 3                ; Message Data bit 3
		MSG4 = 4                ; Message Data bit 4
		MSG5 = 5                ; Message Data bit 5
		MSG6 = 6                ; Message Data bit 6
		MSG7 = 7                ; Message Data bit 7
	}
}

