
ferris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800064  00000478  000004ec  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000131  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044f  00000000  00000000  0000065d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028a  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000568  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000213  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	28 c0       	rjmp	.+80     	; 0x52 <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__vector_6>
   e:	3a c0       	rjmp	.+116    	; 0x84 <__bad_interrupt>
  10:	b4 c1       	rjmp	.+872    	; 0x37a <__vector_8>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>

00000026 <c.1259>:
  26:	56 50 46 20 64 2e 6d 70 33 0d 00                    VPF d.mp3..

00000031 <c.1255>:
  31:	56 50 46 20 63 2e 6d 70 33 0d 00                    VPF c.mp3..

0000003c <c.1251>:
  3c:	56 50 46 20 62 2e 6d 70 33 0d 00                    VPF b.mp3..

00000047 <c.1247>:
  47:	56 50 46 20 61 2e 6d 70 33 0d 00                    VPF a.mp3..

00000052 <__ctors_end>:
  52:	11 24       	eor	r1, r1
  54:	1f be       	out	0x3f, r1	; 63
  56:	cf ed       	ldi	r28, 0xDF	; 223
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	a0 e6       	ldi	r26, 0x60	; 96
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e4 e7       	ldi	r30, 0x74	; 116
  62:	f4 e0       	ldi	r31, 0x04	; 4
  64:	02 c0       	rjmp	.+4      	; 0x6a <.do_copy_data_start>

00000066 <.do_copy_data_loop>:
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0

0000006a <.do_copy_data_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <.do_copy_data_loop>

00000070 <__do_clear_bss>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a4 e6       	ldi	r26, 0x64	; 100
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	ae 38       	cpi	r26, 0x8E	; 142
  7c:	b1 07       	cpc	r27, r17
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	78 d1       	rcall	.+752    	; 0x372 <main>
  82:	f6 c1       	rjmp	.+1004   	; 0x470 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <__vector_6>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW0)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
	if (uTock > 0)
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	90 91 61 00 	lds	r25, 0x0061
  9c:	89 2b       	or	r24, r25
  9e:	49 f0       	breq	.+18     	; 0xb2 <__vector_6+0x2c>
	{
      uTock--;      //This counts down to a 20ms tock.  (which is run in the main loop)
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
	}
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <uCinit>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void uCinit(void) 
{
  c0:	8d ef       	ldi	r24, 0xFD	; 253
  c2:	87 bb       	out	0x17, r24	; 23
   DDRB=0xFD;           //only the front panel push button is an input
   PORTB=0x02;          //enable pull-up resistors
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	98 bb       	out	0x18, r25	; 24
   DDRD=0xFF;           //Portd outputs
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	81 bb       	out	0x11, r24	; 17
   PORTD=0x00;          //PortD pullup resistors
  cc:	12 ba       	out	0x12, r1	; 18

   //8 bit timer 0 initialization, used for the 20mS tock.
    TIMSK=(1<<TOIE0);	//enable timer 0 overflow
  ce:	99 bf       	out	0x39, r25	; 57
    TCNT0=0;            //reset TCNT0
  d0:	12 be       	out	0x32, r1	; 50
    TCCR0B=1;           //count with cpu clock /1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	83 bf       	out	0x33, r24	; 51

	uart_init((4000000)/((9600)*16l)-1);	//set the uart to value for 9600 baud, (4MHz crystal)
  d6:	89 e1       	ldi	r24, 0x19	; 25
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	74 d1       	rcall	.+744    	; 0x3c4 <uart_init>
}
  dc:	08 95       	ret

000000de <SrvTock>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void SrvTock(void)
{
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	90 91 61 00 	lds	r25, 0x0061
  e6:	89 2b       	or	r24, r25
  e8:	09 f0       	breq	.+2      	; 0xec <__stack+0xd>
  ea:	42 c1       	rjmp	.+644    	; 0x370 <__stack+0x291>
    if (uTock == 0) 
    {
        uTock = defTock;   //reload the Tock (20mS) timer
  ec:	87 e3       	ldi	r24, 0x37	; 55
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	90 93 61 00 	sts	0x0061, r25
  f4:	80 93 60 00 	sts	0x0060, r24
        if(u08DebounceTalk!=0 && (defPushBtnPort & (1<<defTalkButton))!=0)     //the debounce timer
  f8:	80 91 65 00 	lds	r24, 0x0065
  fc:	88 23       	and	r24, r24
  fe:	29 f0       	breq	.+10     	; 0x10a <__stack+0x2b>
 100:	b1 9b       	sbis	0x16, 1	; 22
 102:	03 c0       	rjmp	.+6      	; 0x10a <__stack+0x2b>
        {	// for the push to talk button, also the user has to of let go of the button to start counting
           	u08DebounceTalk--;     //decrement the push to talk debounce timer
 104:	81 50       	subi	r24, 0x01	; 1
 106:	80 93 65 00 	sts	0x0065, r24
        }
		//used to turn on and off the push to talk LED
		if((defPushBtnPort & (1<<defTalkButton))==0)	//is the push to talk button pressed?
 10a:	b1 99       	sbic	0x16, 1	; 22
 10c:	04 c0       	rjmp	.+8      	; 0x116 <__stack+0x37>
		{
			defLedTalkPort |= (1<<defLedTalkPin);	//turn on the push to talk LED
 10e:	93 9a       	sbi	0x12, 3	; 18
			u08TmrUserPressedButton=20;		//start the timer to turn off of the push to talk LED	
 110:	84 e1       	ldi	r24, 0x14	; 20
 112:	80 93 66 00 	sts	0x0066, r24
		}
		if(u08TmrUserPressedButton>0)	//are we counting down to shutting off the push to talk LED?
 116:	80 91 66 00 	lds	r24, 0x0066
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <__stack+0x4b>
		{
			u08TmrUserPressedButton--;	//counting down to turning off the LED
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	80 93 66 00 	sts	0x0066, r24
			if(u08TmrUserPressedButton==0)	//is it time to turn off the push to talk LED?
 124:	88 23       	and	r24, r24
 126:	09 f4       	brne	.+2      	; 0x12a <__stack+0x4b>
			{
				defLedTalkPort &= ~(1<<defLedTalkPin);	//turn off the push to talk LED				
 128:	93 98       	cbi	0x12, 3	; 18
			}
		}
		//are we counting down to releasing the RTS line going to the VMusic 2 MP3 player?
		if(u08TmrRtsRelease>0)	
 12a:	80 91 8d 00 	lds	r24, 0x008D
 12e:	88 23       	and	r24, r24
 130:	31 f0       	breq	.+12     	; 0x13e <__stack+0x5f>
		{
			if(u08TmrRtsRelease==1)	//is it time to shut off the RTS line
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	09 f4       	brne	.+2      	; 0x138 <__stack+0x59>
			{
				defRtsPort &= ~(1<<defRtsPin);	//release the RTS line going to the VMUSIC 2 MP3 player
 136:	c0 98       	cbi	0x18, 0	; 24
			}
			u08TmrRtsRelease--;		//counting down!
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	80 93 8d 00 	sts	0x008D, r24
		}
		//resets the system back to state zero if there have not been any button presses for awhile
		if(uState!=0)	//are we in a state other than the starting state?
 13e:	80 91 64 00 	lds	r24, 0x0064
 142:	88 23       	and	r24, r24
 144:	71 f0       	breq	.+28     	; 0x162 <__stack+0x83>
		{
			if(u16ReturnToStateZero>0)	//are we counting down to the start of dialog?
 146:	80 91 67 00 	lds	r24, 0x0067
 14a:	90 91 68 00 	lds	r25, 0x0068
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	31 f0       	breq	.+12     	; 0x15e <__stack+0x7f>
			{
				u16ReturnToStateZero--;	//yes
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	90 93 68 00 	sts	0x0068, r25
 158:	80 93 67 00 	sts	0x0067, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__stack+0x83>
			}
			else
			{
				uState=0;	//there must have not been any button presses for at least 2 minutes
 15e:	10 92 64 00 	sts	0x0064, r1
			}
		}

		//--------------------------------------------------------------------------------
        switch (uState)
 162:	80 91 64 00 	lds	r24, 0x0064
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	09 f4       	brne	.+2      	; 0x16c <__stack+0x8d>
 16a:	6e c0       	rjmp	.+220    	; 0x248 <__stack+0x169>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	30 f4       	brcc	.+12     	; 0x17c <__stack+0x9d>
 170:	88 23       	and	r24, r24
 172:	71 f0       	breq	.+28     	; 0x190 <__stack+0xb1>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	09 f0       	breq	.+2      	; 0x17a <__stack+0x9b>
 178:	fb c0       	rjmp	.+502    	; 0x370 <__stack+0x291>
 17a:	41 c0       	rjmp	.+130    	; 0x1fe <__stack+0x11f>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	09 f4       	brne	.+2      	; 0x182 <__stack+0xa3>
 180:	ae c0       	rjmp	.+348    	; 0x2de <__stack+0x1ff>
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	08 f4       	brcc	.+2      	; 0x188 <__stack+0xa9>
 186:	82 c0       	rjmp	.+260    	; 0x28c <__stack+0x1ad>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	09 f0       	breq	.+2      	; 0x18e <__stack+0xaf>
 18c:	f1 c0       	rjmp	.+482    	; 0x370 <__stack+0x291>
 18e:	cb c0       	rjmp	.+406    	; 0x326 <__stack+0x247>
        {
            case 0:  //MP3 playter:  "ding-dong"
				if((defPushBtnPort & (1<<defTalkButton))==0 && u08DebounceTalk==0)	//is the minute button pressed and has not been previously pressed in awhile?
 190:	b1 99       	sbic	0x16, 1	; 22
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <__stack+0xe3>
 194:	80 91 65 00 	lds	r24, 0x0065
 198:	88 23       	and	r24, r24
 19a:	99 f4       	brne	.+38     	; 0x1c2 <__stack+0xe3>
				{
					defRtsPort |= (1<<defRtsPin);	//set the RTS line going to the Vmusic2 module high
 19c:	c0 9a       	sbi	0x18, 0	; 24
					uart_puts_P("VPF a.mp3\r");	//send a command to the VMusic2 module to start playing a sound file
 19e:	87 e4       	ldi	r24, 0x47	; 71
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	4d d1       	rcall	.+666    	; 0x43e <uart_puts_p>
							// \r is a carriage return, dec 13
	           		u08TmrRtsRelease=defRtsTime;	//start the countdown to releasing the RTS line
 1a4:	84 e1       	ldi	r24, 0x14	; 20
 1a6:	80 93 8d 00 	sts	0x008D, r24
					u08DebounceTalk=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
 1aa:	8e e0       	ldi	r24, 0x0E	; 14
 1ac:	80 93 65 00 	sts	0x0065, r24
					uTmrState=300;	//start the timer to leave this state
 1b0:	8c e2       	ldi	r24, 0x2C	; 44
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	90 93 63 00 	sts	0x0063, r25
 1b8:	80 93 62 00 	sts	0x0062, r24
					u08TmrUserPressedButton=250;
 1bc:	8a ef       	ldi	r24, 0xFA	; 250
 1be:	80 93 66 00 	sts	0x0066, r24
				}
                if(uTmrState>1)	//are we counting down to leaving the state?
 1c2:	80 91 62 00 	lds	r24, 0x0062
 1c6:	90 91 63 00 	lds	r25, 0x0063
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	91 05       	cpc	r25, r1
 1ce:	80 f0       	brcs	.+32     	; 0x1f0 <__stack+0x111>
				{
					uTmrState--;	//yes
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	90 93 63 00 	sts	0x0063, r25
 1d6:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==2)	//is it time to leave the state?
 1da:	02 97       	sbiw	r24, 0x02	; 2
 1dc:	49 f4       	brne	.+18     	; 0x1f0 <__stack+0x111>
					{
						uState=1;		//leave the state
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 64 00 	sts	0x0064, r24
						uTmrState=100;
 1e4:	84 e6       	ldi	r24, 0x64	; 100
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 63 00 	sts	0x0063, r25
 1ec:	80 93 62 00 	sts	0x0062, r24
	                }
				}
				u16ReturnToStateZero=defTwoMinutes;	//(.02)(50)(60)=3000 tocks per minute
 1f0:	80 e7       	ldi	r24, 0x70	; 112
 1f2:	97 e1       	ldi	r25, 0x17	; 23
 1f4:	90 93 68 00 	sts	0x0068, r25
 1f8:	80 93 67 00 	sts	0x0067, r24
 1fc:	08 95       	ret
		    break;

            case 1:  //MP3 playter:  "Who is it?"
				if(uTmrState==100)
 1fe:	80 91 62 00 	lds	r24, 0x0062
 202:	90 91 63 00 	lds	r25, 0x0063
 206:	84 36       	cpi	r24, 0x64	; 100
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <__stack+0x131>
				{
					defLedTalkPort |= (1<<defLedTalkPin);	//turn on the push to talk LED
 20c:	93 9a       	sbi	0x12, 3	; 18
 20e:	0a c0       	rjmp	.+20     	; 0x224 <__stack+0x145>
				}

				if(uTmrState==75)	
 210:	8b 34       	cpi	r24, 0x4B	; 75
 212:	91 05       	cpc	r25, r1
 214:	39 f4       	brne	.+14     	; 0x224 <__stack+0x145>
				{
					defRtsPort |= (1<<defRtsPin);	//set the RTS line going to the Vmusic2 module high
 216:	c0 9a       	sbi	0x18, 0	; 24
					uart_puts_P("VPF b.mp3\r");	//send a command to the VMusic2 module to start playing a sound file
 218:	8c e3       	ldi	r24, 0x3C	; 60
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	10 d1       	rcall	.+544    	; 0x43e <uart_puts_p>
	           		u08TmrRtsRelease=defRtsTime;	//start the countdown to releasing the RTS line
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	80 93 8d 00 	sts	0x008D, r24
				}
                if(uTmrState>1)	//are we counting down to leaving the state?
 224:	80 91 62 00 	lds	r24, 0x0062
 228:	90 91 63 00 	lds	r25, 0x0063
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	91 05       	cpc	r25, r1
 230:	08 f4       	brcc	.+2      	; 0x234 <__stack+0x155>
 232:	9e c0       	rjmp	.+316    	; 0x370 <__stack+0x291>
				{
					uTmrState--;	//yes
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	90 93 63 00 	sts	0x0063, r25
 23a:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==2)	//is it time to leave the state?
 23e:	02 97       	sbiw	r24, 0x02	; 2
 240:	09 f0       	breq	.+2      	; 0x244 <__stack+0x165>
 242:	96 c0       	rjmp	.+300    	; 0x370 <__stack+0x291>
					{
						uState=2;		//leave the state
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	47 c0       	rjmp	.+142    	; 0x2d6 <__stack+0x1f7>
	                }
				}
            break;

            case 2:  //listen for the user to release the push to talk button
				if((defPushBtnPort & (1<<defTalkButton))==0 && u08DebounceTalk==0)	//is the minute button pressed and has not been previously pressed in awhile?
 248:	b1 99       	sbic	0x16, 1	; 22
 24a:	0a c0       	rjmp	.+20     	; 0x260 <__stack+0x181>
 24c:	80 91 65 00 	lds	r24, 0x0065
 250:	88 23       	and	r24, r24
 252:	31 f4       	brne	.+12     	; 0x260 <__stack+0x181>
				{
					uTmrState=100;	//start the timer to leave this state
 254:	84 e6       	ldi	r24, 0x64	; 100
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 63 00 	sts	0x0063, r25
 25c:	80 93 62 00 	sts	0x0062, r24
				}
                if(uTmrState>10)	//are we counting down to leaving the state?
 260:	80 91 62 00 	lds	r24, 0x0062
 264:	90 91 63 00 	lds	r25, 0x0063
 268:	8b 30       	cpi	r24, 0x0B	; 11
 26a:	91 05       	cpc	r25, r1
 26c:	08 f4       	brcc	.+2      	; 0x270 <__stack+0x191>
 26e:	80 c0       	rjmp	.+256    	; 0x370 <__stack+0x291>
				{
					uTmrState--;	//yes
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	90 93 63 00 	sts	0x0063, r25
 276:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==11)	//is it time to leave the state?
 27a:	0b 97       	sbiw	r24, 0x0b	; 11
 27c:	09 f0       	breq	.+2      	; 0x280 <__stack+0x1a1>
 27e:	78 c0       	rjmp	.+240    	; 0x370 <__stack+0x291>
					{
						uState=3;		//leave the state
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 64 00 	sts	0x0064, r24
						uTmrState=600;
 286:	88 e5       	ldi	r24, 0x58	; 88
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	48 c0       	rjmp	.+144    	; 0x31c <__stack+0x23d>
	                }
				}
			break;

            case 3:  //MP3 playter:  "Oh, I'm sorry..."
				if(uTmrState==599)
 28c:	80 91 62 00 	lds	r24, 0x0062
 290:	90 91 63 00 	lds	r25, 0x0063
 294:	22 e0       	ldi	r18, 0x02	; 2
 296:	87 35       	cpi	r24, 0x57	; 87
 298:	92 07       	cpc	r25, r18
 29a:	11 f4       	brne	.+4      	; 0x2a0 <__stack+0x1c1>
				{
					defLedTalkPort |= (1<<defLedTalkPin);	//turn on the push to talk LED
 29c:	93 9a       	sbi	0x12, 3	; 18
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <__stack+0x1d5>
				}
				if(uTmrState==550)	
 2a0:	86 52       	subi	r24, 0x26	; 38
 2a2:	92 40       	sbci	r25, 0x02	; 2
 2a4:	39 f4       	brne	.+14     	; 0x2b4 <__stack+0x1d5>
				{
					defRtsPort |= (1<<defRtsPin);	//set the RTS line going to the Vmusic2 module high
 2a6:	c0 9a       	sbi	0x18, 0	; 24
					uart_puts_P("VPF c.mp3\r");	//send a command to the VMusic2 module to start playing a sound file
 2a8:	81 e3       	ldi	r24, 0x31	; 49
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	c8 d0       	rcall	.+400    	; 0x43e <uart_puts_p>
	           		u08TmrRtsRelease=defRtsTime;	//start the countdown to releasing the RTS line
 2ae:	84 e1       	ldi	r24, 0x14	; 20
 2b0:	80 93 8d 00 	sts	0x008D, r24
				}
                if(uTmrState>1)	//are we counting down to leaving the state?
 2b4:	80 91 62 00 	lds	r24, 0x0062
 2b8:	90 91 63 00 	lds	r25, 0x0063
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <__stack+0x1e5>
 2c2:	56 c0       	rjmp	.+172    	; 0x370 <__stack+0x291>
				{
					uTmrState--;	//yes
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	90 93 63 00 	sts	0x0063, r25
 2ca:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==2)	//is it time to leave the state?
 2ce:	02 97       	sbiw	r24, 0x02	; 2
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <__stack+0x1f5>
 2d2:	4e c0       	rjmp	.+156    	; 0x370 <__stack+0x291>
					{
						uState=4;		//leave the state
 2d4:	84 e0       	ldi	r24, 0x04	; 4
 2d6:	80 93 64 00 	sts	0x0064, r24
						defLedTalkPort &= ~(1<<defLedTalkPin);	//turn off the push to talk LED
 2da:	93 98       	cbi	0x12, 3	; 18
 2dc:	08 95       	ret
	                }
				}
            break;

            case 4:  //listen for the user to release the push to talk button
				if((defPushBtnPort & (1<<defTalkButton))==0 && u08DebounceTalk==0)	//is the minute button pressed and has not been previously pressed in awhile?
 2de:	b1 99       	sbic	0x16, 1	; 22
 2e0:	0a c0       	rjmp	.+20     	; 0x2f6 <__stack+0x217>
 2e2:	80 91 65 00 	lds	r24, 0x0065
 2e6:	88 23       	and	r24, r24
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <__stack+0x217>
				{
					uTmrState=100;	//start the timer to leave this state
 2ea:	84 e6       	ldi	r24, 0x64	; 100
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 63 00 	sts	0x0063, r25
 2f2:	80 93 62 00 	sts	0x0062, r24
				}
                if(uTmrState>10)	//are we counting down to leaving the state?
 2f6:	80 91 62 00 	lds	r24, 0x0062
 2fa:	90 91 63 00 	lds	r25, 0x0063
 2fe:	8b 30       	cpi	r24, 0x0B	; 11
 300:	91 05       	cpc	r25, r1
 302:	b0 f1       	brcs	.+108    	; 0x370 <__stack+0x291>
				{
					uTmrState--;	//yes
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	90 93 63 00 	sts	0x0063, r25
 30a:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==11)	//is it time to leave the state?
 30e:	0b 97       	sbiw	r24, 0x0b	; 11
 310:	79 f5       	brne	.+94     	; 0x370 <__stack+0x291>
					{
						uState=5;		//leave the state
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	80 93 64 00 	sts	0x0064, r24
						uTmrState=150;
 318:	86 e9       	ldi	r24, 0x96	; 150
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 63 00 	sts	0x0063, r25
 320:	80 93 62 00 	sts	0x0062, r24
 324:	08 95       	ret
	                }
				}
			break;

            case 5:  //MP3 playter:  "have a nice day."
				if(uTmrState==149)
 326:	80 91 62 00 	lds	r24, 0x0062
 32a:	90 91 63 00 	lds	r25, 0x0063
 32e:	85 39       	cpi	r24, 0x95	; 149
 330:	91 05       	cpc	r25, r1
 332:	11 f4       	brne	.+4      	; 0x338 <__stack+0x259>
				{
					defLedTalkPort |= (1<<defLedTalkPin);	//turn on the push to talk LED
 334:	93 9a       	sbi	0x12, 3	; 18
 336:	0a c0       	rjmp	.+20     	; 0x34c <__stack+0x26d>
				}
				if(uTmrState==75)	
 338:	8b 34       	cpi	r24, 0x4B	; 75
 33a:	91 05       	cpc	r25, r1
 33c:	39 f4       	brne	.+14     	; 0x34c <__stack+0x26d>
				{
					defRtsPort |= (1<<defRtsPin);	//set the RTS line going to the Vmusic2 module high
 33e:	c0 9a       	sbi	0x18, 0	; 24
					uart_puts_P("VPF d.mp3\r");	//send a command to the VMusic2 module to start playing a sound file
 340:	86 e2       	ldi	r24, 0x26	; 38
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	7c d0       	rcall	.+248    	; 0x43e <uart_puts_p>
	           		u08TmrRtsRelease=defRtsTime;	//start the countdown to releasing the RTS line
 346:	84 e1       	ldi	r24, 0x14	; 20
 348:	80 93 8d 00 	sts	0x008D, r24
				}
                if(uTmrState>1)	//are we counting down to leaving the state?
 34c:	80 91 62 00 	lds	r24, 0x0062
 350:	90 91 63 00 	lds	r25, 0x0063
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	91 05       	cpc	r25, r1
 358:	58 f0       	brcs	.+22     	; 0x370 <__stack+0x291>
				{
					uTmrState--;	//yes
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	90 93 63 00 	sts	0x0063, r25
 360:	80 93 62 00 	sts	0x0062, r24
					if(uTmrState==2)	//is it time to leave the state?
 364:	02 97       	sbiw	r24, 0x02	; 2
 366:	21 f4       	brne	.+8      	; 0x370 <__stack+0x291>
					{
						uState=6;		//leave the state
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	80 93 64 00 	sts	0x0064, r24
						defLedTalkPort &= ~(1<<defLedTalkPin);	//turn off the push to talk LED
 36e:	93 98       	cbi	0x12, 3	; 18
 370:	08 95       	ret

00000372 <main>:
//Returns:
//       integer (no idea where this integer is returned to)
//----------------------------------------------------------------------------
// Main loop
int main( void )  
{
 372:	a6 de       	rcall	.-692    	; 0xc0 <uCinit>
	uCinit();		//go through the initialization process for the microcontroller
	sei();        	//enable interrupts
 374:	78 94       	sei
	while(1)       	//go into an infinite loop here
	{
        SrvTock();  	//go to the tock every 20ms
 376:	b3 de       	rcall	.-666    	; 0xde <SrvTock>
 378:	fe cf       	rjmp	.-4      	; 0x376 <main+0x4>

0000037a <__vector_8>:
SIGNAL(USART_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
    unsigned char tmptail;
    
    if ( UART_TxHead != UART_TxTail) {
 38c:	90 91 89 00 	lds	r25, 0x0089
 390:	80 91 8a 00 	lds	r24, 0x008A
 394:	98 17       	cp	r25, r24
 396:	61 f0       	breq	.+24     	; 0x3b0 <__vector_8+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 398:	e0 91 8a 00 	lds	r30, 0x008A
 39c:	ef 5f       	subi	r30, 0xFF	; 255
 39e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 3a0:	e0 93 8a 00 	sts	0x008A, r30
        /* get one byte from buffer and write it to UART */
        UDR = UART_TxBuf[tmptail];  /* start transmission */
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	e7 59       	subi	r30, 0x97	; 151
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	80 81       	ld	r24, Z
 3ac:	8c b9       	out	0x0c, r24	; 12
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <__vector_8+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        //UART0_CONTROL &= ~_BV(UART0_UDRIE);	//atmega
		UCSRB &= ~(1<<UDRIE);		//attiny2313
 3b0:	55 98       	cbi	0x0a, 5	; 10
   		//defRtsPort &= ~(1<<defRtsPin);	//set the RTS line going to the Vmusic2 module low

    }
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 3c4:	10 92 89 00 	sts	0x0089, r1
    UART_TxHead = 0;
    UART_TxTail = 0;
 3c8:	10 92 8a 00 	sts	0x008A, r1
    UART_RxHead = 0;
 3cc:	10 92 8b 00 	sts	0x008B, r1
    UART_RxTail = 0;
 3d0:	10 92 8c 00 	sts	0x008C, r1


    UBRRH = (unsigned char)(baudrate>>8);
 3d4:	92 b9       	out	0x02, r25	; 2
    UBRRL = (unsigned char) baudrate;
 3d6:	89 b9       	out	0x09, r24	; 9

    //Enable USART receiver and transmitter and receive complete interrupt
    UCSRB = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 3d8:	88 e9       	ldi	r24, 0x98	; 152
 3da:	8a b9       	out	0x0a, r24	; 10
    
    //Set frame format: asynchronous, 8data, no parity, 1stop bit 
    UCSRC = (1<<UCSZ1)|(1<<UCSZ0);
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	83 b9       	out	0x03, r24	; 3
    //Enable UART receiver and transmitter and receive complete interrupt
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif
*/
}/* uart_init */
 3e0:	08 95       	ret

000003e2 <uart_clear_buff>:
} 
*/


void uart_clear_buff(void)
{
 3e2:	10 92 8b 00 	sts	0x008B, r1
    UART_RxHead = 0;
    UART_RxTail = 0;
 3e6:	10 92 8c 00 	sts	0x008C, r1

}
 3ea:	08 95       	ret

000003ec <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 3ec:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3ee:	90 91 89 00 	lds	r25, 0x0089
 3f2:	9f 5f       	subi	r25, 0xFF	; 255
 3f4:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 3f6:	80 91 8a 00 	lds	r24, 0x008A
 3fa:	98 17       	cp	r25, r24
 3fc:	e1 f3       	breq	.-8      	; 0x3f6 <uart_putc+0xa>
        ;	//wait for free space in buffer
    }
    
    UART_TxBuf[tmphead] = data;
 3fe:	e9 2f       	mov	r30, r25
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	e7 59       	subi	r30, 0x97	; 151
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 408:	90 93 89 00 	sts	0x0089, r25

    //enable UDRE interrupt
    //UART0_CONTROL    |= _BV(UART0_UDRIE);
	UCSRB |= (1<<UDRIE);		//attiny2313
 40c:	55 9a       	sbi	0x0a, 5	; 10

}
 40e:	08 95       	ret

00000410 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 410:	dc 01       	movw	r26, r24
 412:	11 c0       	rjmp	.+34     	; 0x436 <uart_puts+0x26>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 414:	90 91 89 00 	lds	r25, 0x0089
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 41c:	80 91 8a 00 	lds	r24, 0x008A
 420:	98 17       	cp	r25, r24
 422:	e1 f3       	breq	.-8      	; 0x41c <uart_puts+0xc>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 424:	11 96       	adiw	r26, 0x01	; 1
    
    while ( tmphead == UART_TxTail ){
        ;	//wait for free space in buffer
    }
    
    UART_TxBuf[tmphead] = data;
 426:	e9 2f       	mov	r30, r25
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	e7 59       	subi	r30, 0x97	; 151
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 430:	90 93 89 00 	sts	0x0089, r25

    //enable UDRE interrupt
    //UART0_CONTROL    |= _BV(UART0_UDRIE);
	UCSRB |= (1<<UDRIE);		//attiny2313
 434:	55 9a       	sbi	0x0a, 5	; 10
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 436:	2c 91       	ld	r18, X
 438:	22 23       	and	r18, r18
 43a:	61 f7       	brne	.-40     	; 0x414 <uart_puts+0x4>
      uart_putc(*s++);

}
 43c:	08 95       	ret

0000043e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 43e:	ac 01       	movw	r20, r24
 440:	10 c0       	rjmp	.+32     	; 0x462 <uart_puts_p+0x24>
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 442:	20 91 89 00 	lds	r18, 0x0089
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 44a:	80 91 8a 00 	lds	r24, 0x008A
 44e:	28 17       	cp	r18, r24
 450:	e1 f3       	breq	.-8      	; 0x44a <uart_puts_p+0xc>
        ;	//wait for free space in buffer
    }
    
    UART_TxBuf[tmphead] = data;
 452:	e2 2f       	mov	r30, r18
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	e7 59       	subi	r30, 0x97	; 151
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	90 83       	st	Z, r25
    UART_TxHead = tmphead;
 45c:	20 93 89 00 	sts	0x0089, r18

    //enable UDRE interrupt
    //UART0_CONTROL    |= _BV(UART0_UDRIE);
	UCSRB |= (1<<UDRIE);		//attiny2313
 460:	55 9a       	sbi	0x0a, 5	; 10
 462:	fa 01       	movw	r30, r20
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 464:	4f 5f       	subi	r20, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	94 91       	lpm	r25, Z+
 46a:	99 23       	and	r25, r25
 46c:	51 f7       	brne	.-44     	; 0x442 <uart_puts_p+0x4>
      uart_putc(c);

}
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
