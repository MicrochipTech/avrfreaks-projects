//This small pogram will blink the "B" LED on the NGW100 board at 1Hz.  
//Pin configuration can be changed to change the state of any GPIO pin
//with some extra modifications
//
//Created by Dingo_aus, 4 January 2009
//email: dingo_aus [at] internode <dot> on /dot/ net
//
//Created in AVR32 Studio (version 2.0.2) running on Ubuntu 8.04

#include <stddef.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>



FILE *fp; 


int main(int argc, char** argv)
{

	printf("\n**********************************\n"
			"*  Welcome to LED Blink program  *\n"
			"**********************************\n");
	
	//create a variable to store whether we are sending a '1' or a '0'
	char set_value; 
	//Integer to keep track of whether we want on or off
	int toggle = 0;
	
	//Open the LED's sysfs file in binary for reading and writing, store file pointer in fp
	if ((fp = fopen("/sys/class/leds/b/brightness", "rb+")) == NULL)
	{
		printf("Cannot open file.\n");
		exit(1);
	}
	
	//Print how to exit
	printf("Ctrl-C to exit\n");
	
	//Run an infinite loop - will require Ctrl-C to exit this program
	while(1)
	{
		toggle = !toggle;
		if(toggle)
		{
			//Load set_value with the character '1' - NB not an integer 1 but a character
			set_value = '1';
			//Make sure we are at the beginning of the file
			rewind(fp);
			//Write the character to the file pointer
			fwrite(&set_value, sizeof(char), 1, fp);
		}
		else
		{
			//Load set_value with the character '1' - NB not an integer 1 but a character
			set_value = '0';
			//Make sure we are at the beginning of the file
			rewind(fp);
			//Write the character to the file pointer
			fwrite(&set_value, sizeof(char), 1, fp);
		}
		
		//Pause for one second
		sleep(1);
	
	}
		
	
	return 0;
	
}
