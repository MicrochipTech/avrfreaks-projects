
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002b4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000000  00800100  000002b4  00000348  2**0
                  ALLOC
  3 .noinit       00000000  00800100  00800100  00000348  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000348  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000073  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000026e  00000000  00000000  000007bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000009d  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000217  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	28 c0       	rjmp	.+80     	; 0x68 <__bad_interrupt>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	22 c0       	rjmp	.+68     	; 0x68 <__bad_interrupt>
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	20 c0       	rjmp	.+64     	; 0x68 <__bad_interrupt>
  28:	1f c0       	rjmp	.+62     	; 0x68 <__bad_interrupt>
  2a:	1e c0       	rjmp	.+60     	; 0x68 <__bad_interrupt>
  2c:	1d c0       	rjmp	.+58     	; 0x68 <__bad_interrupt>
  2e:	1c c0       	rjmp	.+56     	; 0x68 <__bad_interrupt>
  30:	1b c0       	rjmp	.+54     	; 0x68 <__bad_interrupt>
  32:	1a c0       	rjmp	.+52     	; 0x68 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 eb       	ldi	r30, 0xB4	; 180
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	01 c0       	rjmp	.+2      	; 0x6a <main>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <main>:

void delay_20us(void);								// Delay 20탎

void main(void)
{
  6a:	c8 ef       	ldi	r28, 0xF8	; 248
  6c:	d2 e0       	ldi	r29, 0x02	; 2
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61
	char position=52;
  72:	84 e3       	ldi	r24, 0x34	; 52
  74:	89 83       	std	Y+1, r24	; 0x01
	char steplength=5;
  76:	85 e0       	ldi	r24, 0x05	; 5
  78:	8a 83       	std	Y+2, r24	; 0x02
		
	DDRD=255;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	80 93 2a 00 	sts	0x002A, r24
	DDRB=1;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	80 93 24 00 	sts	0x0024, r24
	
	PORTD=4;										// Turn on LED
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	80 93 2b 00 	sts	0x002B, r24
	PORTB=0;
  8c:	10 92 25 00 	sts	0x0025, r1
	
	USART_init();
  90:	a4 d0       	rcall	.+328    	; 0x1da <USART_init>
	
	TCCR0B=2;										// CLK/8 -> tick length = 1탎
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	80 93 45 00 	sts	0x0045, r24
	
	for(int yy=0;yy<5;yy++)						// Move to home position (takes about 5*30mS) 
  98:	1c 82       	std	Y+4, r1	; 0x04
  9a:	1b 82       	std	Y+3, r1	; 0x03
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	9c 81       	ldd	r25, Y+4	; 0x04
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	91 05       	cpc	r25, r1
  a4:	94 f5       	brge	.+100    	; 0x10a <main+0xa0>
	{
		PORTB=1;									// Pulse is high for 52*20탎
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 25 00 	sts	0x0025, r24
		for(int i=0;i<position;i++)
  ac:	1e 82       	std	Y+6, r1	; 0x06
  ae:	1d 82       	std	Y+5, r1	; 0x05
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	28 2f       	mov	r18, r24
  b4:	33 27       	eor	r19, r19
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	9e 81       	ldd	r25, Y+6	; 0x06
  ba:	82 17       	cp	r24, r18
  bc:	93 07       	cpc	r25, r19
  be:	3c f4       	brge	.+14     	; 0xce <main+0x64>
			delay_20us();
  c0:	7e d0       	rcall	.+252    	; 0x1be <delay_20us>
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	8d 83       	std	Y+5, r24	; 0x05
  cc:	f1 cf       	rjmp	.-30     	; 0xb0 <main+0x46>
			
		PORTB=0;									// Pulse is low for (1500-52)*20탎
  ce:	10 92 25 00 	sts	0x0025, r1
		for(int i=0;i<(1500-position);i++)
  d2:	1e 82       	std	Y+6, r1	; 0x06
  d4:	1d 82       	std	Y+5, r1	; 0x05
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	28 2f       	mov	r18, r24
  da:	33 27       	eor	r19, r19
  dc:	8c ed       	ldi	r24, 0xDC	; 220
  de:	95 e0       	ldi	r25, 0x05	; 5
  e0:	82 1b       	sub	r24, r18
  e2:	93 0b       	sbc	r25, r19
  e4:	9c 01       	movw	r18, r24
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	82 17       	cp	r24, r18
  ec:	93 07       	cpc	r25, r19
  ee:	3c f4       	brge	.+14     	; 0xfe <main+0x94>
			delay_20us();
  f0:	66 d0       	rcall	.+204    	; 0x1be <delay_20us>
  f2:	8d 81       	ldd	r24, Y+5	; 0x05
  f4:	9e 81       	ldd	r25, Y+6	; 0x06
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	9e 83       	std	Y+6, r25	; 0x06
  fa:	8d 83       	std	Y+5, r24	; 0x05
  fc:	ec cf       	rjmp	.-40     	; 0xd6 <main+0x6c>
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	9c 83       	std	Y+4, r25	; 0x04
 106:	8b 83       	std	Y+3, r24	; 0x03
 108:	c9 cf       	rjmp	.-110    	; 0x9c <main+0x32>
	}
	
	while(1)
	{
		char input=0;
 10a:	1f 82       	std	Y+7, r1	; 0x07
		
		PORTD=4;
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	80 93 2b 00 	sts	0x002B, r24
		input=USART_Receive();
 112:	92 d0       	rcall	.+292    	; 0x238 <USART_Receive>
 114:	8f 83       	std	Y+7, r24	; 0x07
		PORTD=0;
 116:	10 92 2b 00 	sts	0x002B, r1
			
		if(input=='-' && position<92)
 11a:	8f 81       	ldd	r24, Y+7	; 0x07
 11c:	8d 32       	cpi	r24, 0x2D	; 45
 11e:	39 f4       	brne	.+14     	; 0x12e <main+0xc4>
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	8c 35       	cpi	r24, 0x5C	; 92
 124:	20 f4       	brcc	.+8      	; 0x12e <main+0xc4>
			position=position+steplength;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	89 0f       	add	r24, r25
 12c:	89 83       	std	Y+1, r24	; 0x01
		if(input=='+' && position>12)
 12e:	8f 81       	ldd	r24, Y+7	; 0x07
 130:	8b 32       	cpi	r24, 0x2B	; 43
 132:	39 f4       	brne	.+14     	; 0x142 <main+0xd8>
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	8d 30       	cpi	r24, 0x0D	; 13
 138:	20 f0       	brcs	.+8      	; 0x142 <main+0xd8>
			position=position-steplength;
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	89 1b       	sub	r24, r25
 140:	89 83       	std	Y+1, r24	; 0x01
		if(input=='h')
 142:	8f 81       	ldd	r24, Y+7	; 0x07
 144:	88 36       	cpi	r24, 0x68	; 104
 146:	11 f4       	brne	.+4      	; 0x14c <main+0xe2>
			position=52;
 148:	84 e3       	ldi	r24, 0x34	; 52
 14a:	89 83       	std	Y+1, r24	; 0x01
				
		for(int yy=0;yy<7;yy++)
 14c:	1e 82       	std	Y+6, r1	; 0x06
 14e:	1d 82       	std	Y+5, r1	; 0x05
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	9e 81       	ldd	r25, Y+6	; 0x06
 154:	87 30       	cpi	r24, 0x07	; 7
 156:	91 05       	cpc	r25, r1
 158:	c4 f6       	brge	.-80     	; 0x10a <main+0xa0>
		{
			PORTB=1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 25 00 	sts	0x0025, r24
			for(int i=0;i<position;i++)
 160:	1c 82       	std	Y+4, r1	; 0x04
 162:	1b 82       	std	Y+3, r1	; 0x03
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	33 27       	eor	r19, r19
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	9c 81       	ldd	r25, Y+4	; 0x04
 16e:	82 17       	cp	r24, r18
 170:	93 07       	cpc	r25, r19
 172:	3c f4       	brge	.+14     	; 0x182 <main+0x118>
				delay_20us();
 174:	24 d0       	rcall	.+72     	; 0x1be <delay_20us>
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	9c 83       	std	Y+4, r25	; 0x04
 17e:	8b 83       	std	Y+3, r24	; 0x03
 180:	f1 cf       	rjmp	.-30     	; 0x164 <main+0xfa>
			
			PORTB=0;
 182:	10 92 25 00 	sts	0x0025, r1
			for(int i=0;i<(1500-position);i++)
 186:	1c 82       	std	Y+4, r1	; 0x04
 188:	1b 82       	std	Y+3, r1	; 0x03
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	28 2f       	mov	r18, r24
 18e:	33 27       	eor	r19, r19
 190:	8c ed       	ldi	r24, 0xDC	; 220
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	9c 01       	movw	r18, r24
 19a:	8b 81       	ldd	r24, Y+3	; 0x03
 19c:	9c 81       	ldd	r25, Y+4	; 0x04
 19e:	82 17       	cp	r24, r18
 1a0:	93 07       	cpc	r25, r19
 1a2:	3c f4       	brge	.+14     	; 0x1b2 <main+0x148>
				delay_20us();
 1a4:	0c d0       	rcall	.+24     	; 0x1be <delay_20us>
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	9c 81       	ldd	r25, Y+4	; 0x04
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	9c 83       	std	Y+4, r25	; 0x04
 1ae:	8b 83       	std	Y+3, r24	; 0x03
 1b0:	ec cf       	rjmp	.-40     	; 0x18a <main+0x120>
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	9e 83       	std	Y+6, r25	; 0x06
 1ba:	8d 83       	std	Y+5, r24	; 0x05
 1bc:	c9 cf       	rjmp	.-110    	; 0x150 <main+0xe6>

000001be <delay_20us>:
		}
	}

}

void delay_20us(void)
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
 1c6:	10 92 46 00 	sts	0x0046, r1
	while(TCNT0<20);
 1ca:	80 91 46 00 	lds	r24, 0x0046
 1ce:	84 31       	cpi	r24, 0x14	; 20
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <delay_20us+0x16>
 1d2:	fb cf       	rjmp	.-10     	; 0x1ca <delay_20us+0xc>
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <USART_init>:
}


void USART_init(void)								// Init USART to 2400bps using 8.0000MHz xtal
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
	UBRR0=207;										// 2400 bps running @ 8.0000 MHz
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 c5 00 	sts	0x00C5, r25
 1ea:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Enable receiver and transmitter @ USART0
 1ee:	88 e1       	ldi	r24, 0x18	; 24
 1f0:	80 93 c1 00 	sts	0x00C1, r24
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <USART_Transmit>:
}
void USART_Transmit( unsigned char data )			// Transmit one byte on USART
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	21 97       	sbiw	r28, 0x01	; 1
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );			// Wait for empty transmit buffer
 210:	80 91 c0 00 	lds	r24, 0x00C0
 214:	99 27       	eor	r25, r25
 216:	80 72       	andi	r24, 0x20	; 32
 218:	90 70       	andi	r25, 0x00	; 0
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	09 f4       	brne	.+2      	; 0x220 <USART_Transmit+0x26>
 21e:	f8 cf       	rjmp	.-16     	; 0x210 <USART_Transmit+0x16>
	UDR0 = data;									// Put data into USART buffer and send data
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	80 93 c6 00 	sts	0x00C6, r24
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <USART_Receive>:
}

unsigned char USART_Receive( void )				// Receive string on USART
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSR0A & (1<<RXC0)) );				// Wait for data to be received
 240:	80 91 c0 00 	lds	r24, 0x00C0
 244:	88 23       	and	r24, r24
 246:	0c f0       	brlt	.+2      	; 0x24a <USART_Receive+0x12>
 248:	fb cf       	rjmp	.-10     	; 0x240 <USART_Receive+0x8>
	return UDR0;									// Return USART buffer
 24a:	80 91 c6 00 	lds	r24, 0x00C6
 24e:	99 27       	eor	r25, r25
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <USART_SendString>:
}

void USART_SendString(char *string)				// Transmit string to USART
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	23 97       	sbiw	r28, 0x03	; 3
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
	unsigned char counter=0;
 26e:	1b 82       	std	Y+3, r1	; 0x03
	while(*(string+counter))						// Data to send is != NULL
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	28 2f       	mov	r18, r24
 274:	33 27       	eor	r19, r19
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	f9 01       	movw	r30, r18
 27c:	e8 0f       	add	r30, r24
 27e:	f9 1f       	adc	r31, r25
 280:	80 81       	ld	r24, Z
 282:	88 23       	and	r24, r24
 284:	71 f0       	breq	.+28     	; 0x2a2 <USART_SendString+0x4c>
	{
		USART_Transmit(*(string+counter));			// Transmit one byte
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	28 2f       	mov	r18, r24
 28a:	33 27       	eor	r19, r19
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	f9 01       	movw	r30, r18
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	80 81       	ld	r24, Z
 298:	b0 df       	rcall	.-160    	; 0x1fa <USART_Transmit>
		counter++;									// Increase pointer
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	8b 83       	std	Y+3, r24	; 0x03
 2a0:	e7 cf       	rjmp	.-50     	; 0x270 <USART_SendString+0x1a>
 2a2:	23 96       	adiw	r28, 0x03	; 3
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret
