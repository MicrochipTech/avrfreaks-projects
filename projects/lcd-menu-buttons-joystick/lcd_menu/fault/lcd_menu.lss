
lcd_menu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000bf2  00000c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080024c  0080024c  00000dd2  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f8  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013ee  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fc  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000103b  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00003ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c1  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b6b  00000000  00000000  00003ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00004a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 34       	cpi	r26, 0x4C	; 76
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	ac e4       	ldi	r26, 0x4C	; 76
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 35       	cpi	r26, 0x55	; 85
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 41 01 	call	0x282	; 0x282 <main>
  c6:	0c 94 f7 05 	jmp	0xbee	; 0xbee <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <first_sub_menu>:
}



void first_sub_menu()
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
initial_menu(1);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	00 e5       	ldi	r16, 0x50	; 80
  de:	13 ec       	ldi	r17, 0xC3	; 195

uint8_t button_pressed,arrow_possition;
	while(1)
	{

	    x=ReadADC(0);  //Read ADC Channel 0
  e0:	c9 e1       	ldi	r28, 0x19	; 25
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 68 05 	call	0xad0	; 0xad0 <ReadADC>
  ea:	90 93 4d 02 	sts	0x024D, r25
  ee:	80 93 4c 02 	sts	0x024C, r24
      	y=ReadADC(1);  //Read ADC Channel 1
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 68 05 	call	0xad0	; 0xad0 <ReadADC>
  f8:	bc 01       	movw	r22, r24
  fa:	90 93 4f 02 	sts	0x024F, r25
  fe:	80 93 4e 02 	sts	0x024E, r24

		joy_direction = find_direction_from_xy(x,y);
 102:	80 91 4c 02 	lds	r24, 0x024C
 106:	90 91 4d 02 	lds	r25, 0x024D
 10a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 10e:	80 93 53 02 	sts	0x0253, r24

		if(find_direction_from_xy(x,y)==3)
 112:	60 91 4e 02 	lds	r22, 0x024E
 116:	70 91 4f 02 	lds	r23, 0x024F
 11a:	80 91 4c 02 	lds	r24, 0x024C
 11e:	90 91 4d 02 	lds	r25, 0x024D
 122:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 126:	03 97       	sbiw	r24, 0x03	; 3
 128:	39 f4       	brne	.+14     	; 0x138 <first_sub_menu+0x6a>
		{rotate_menu(1,1); _delay_ms(200);}
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 132:	c8 01       	movw	r24, r16
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <first_sub_menu+0x66>

		if(find_direction_from_xy(x,y)==1)
 138:	60 91 4e 02 	lds	r22, 0x024E
 13c:	70 91 4f 02 	lds	r23, 0x024F
 140:	80 91 4c 02 	lds	r24, 0x024C
 144:	90 91 4d 02 	lds	r25, 0x024D
 148:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	39 f4       	brne	.+14     	; 0x15e <first_sub_menu+0x90>
		{rotate_menu(0,1); _delay_ms(200);}
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 158:	c8 01       	movw	r24, r16
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <first_sub_menu+0x8c>




	button_pressed=check_if_button_pressed();
 15e:	0e 94 b4 04 	call	0x968	; 0x968 <check_if_button_pressed>

			if(button_pressed=='A')
 162:	81 34       	cpi	r24, 0x41	; 65
 164:	11 f4       	brne	.+4      	; 0x16a <first_sub_menu+0x9c>
			{		
			rotate_menu(0,1); //Moves the menu up			
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	03 c0       	rjmp	.+6      	; 0x170 <first_sub_menu+0xa2>
			}

			else if(button_pressed=='B')
 16a:	82 34       	cpi	r24, 0x42	; 66
 16c:	29 f4       	brne	.+10     	; 0x178 <first_sub_menu+0xaa>
			{
			rotate_menu(1,1); //Moves menu down
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 176:	b6 cf       	rjmp	.-148    	; 0xe4 <first_sub_menu+0x16>
			}

			else if(button_pressed=='*')
 178:	8a 32       	cpi	r24, 0x2A	; 42
 17a:	41 f4       	brne	.+16     	; 0x18c <first_sub_menu+0xbe>
			{
			initial_menu(0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>

			


	}//end of while
}//end of function
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret
			{
			initial_menu(0);
			return 0;
			}

			else if(button_pressed=='#')
 18c:	83 32       	cpi	r24, 0x23	; 35
 18e:	09 f0       	breq	.+2      	; 0x192 <first_sub_menu+0xc4>
 190:	a9 cf       	rjmp	.-174    	; 0xe4 <first_sub_menu+0x16>
			{
			LCDClear();
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
			arrow_possition = rotate_menu(2,1);//Finds the actual possition of the "<"
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>

			if(arrow_possition==0) 
 1a2:	88 23       	and	r24, r24
 1a4:	79 f4       	brne	.+30     	; 0x1c4 <first_sub_menu+0xf6>
			{
			LCDWriteStringXY(0,0,"1st Poss Submenu");
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	95 e7       	ldi	r25, 0x75	; 117
 1b8:	fe 01       	movw	r30, r28
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <first_sub_menu+0xec>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c0:	d9 f7       	brne	.-10     	; 0x1b8 <first_sub_menu+0xea>
 1c2:	36 c0       	rjmp	.+108    	; 0x230 <first_sub_menu+0x162>
			_delay_ms(3000);
			initial_menu(1);
			}

			if(arrow_possition==1)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	81 f4       	brne	.+32     	; 0x1e8 <first_sub_menu+0x11a>
			{ 
			LCDWriteStringXY(0,0,"2nd Poss Submenu");
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 1d0:	81 e1       	ldi	r24, 0x11	; 17
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	95 e7       	ldi	r25, 0x75	; 117
 1dc:	fe 01       	movw	r30, r28
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <first_sub_menu+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <first_sub_menu+0x10e>
 1e6:	24 c0       	rjmp	.+72     	; 0x230 <first_sub_menu+0x162>
			_delay_ms(3000);
			initial_menu(1);
			}

			if(arrow_possition==2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	81 f4       	brne	.+32     	; 0x20c <first_sub_menu+0x13e>
			{ 
			LCDWriteStringXY(0,0,"3rd Poss Submenu");
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 1f4:	82 e2       	ldi	r24, 0x22	; 34
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	95 e7       	ldi	r25, 0x75	; 117
 200:	fe 01       	movw	r30, r28
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <first_sub_menu+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 208:	d9 f7       	brne	.-10     	; 0x200 <first_sub_menu+0x132>
 20a:	12 c0       	rjmp	.+36     	; 0x230 <first_sub_menu+0x162>
			_delay_ms(3000);
			initial_menu(1);
			}

			if(arrow_possition==3) 
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	09 f0       	breq	.+2      	; 0x212 <first_sub_menu+0x144>
 210:	69 cf       	rjmp	.-302    	; 0xe4 <first_sub_menu+0x16>
			{
			LCDWriteStringXY(0,0,"4th Poss Submenu");
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	95 e7       	ldi	r25, 0x75	; 117
 226:	fe 01       	movw	r30, r28
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <first_sub_menu+0x15a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <first_sub_menu+0x158>
			_delay_ms(3000);
			initial_menu(1);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>
 236:	56 cf       	rjmp	.-340    	; 0xe4 <first_sub_menu+0x16>

00000238 <creator_info>:
uint16_t x=0,y=0;
uint8_t joy_direction;

void creator_info()
{
LCDClear();
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
LCDWriteStringXY(0,0, "SOFTWARE CREATOR");
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 248:	84 e4       	ldi	r24, 0x44	; 68
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
LCDWriteStringXY(3,1, "PANOSCURE");
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 258:	85 e5       	ldi	r24, 0x55	; 85
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 260:	80 e4       	ldi	r24, 0x40	; 64
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	29 e1       	ldi	r18, 0x19	; 25
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <creator_info+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d9 f7       	brne	.-10     	; 0x268 <creator_info+0x30>
_delay_ms(4000);
LCDClear();
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
initial_menu(0);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>
}
 280:	08 95       	ret

00000282 <main>:




int main()
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	MCUCSR = 0x80;			//disable jtag to make portC to work
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	84 bf       	out	0x34, r24	; 52
	MCUCSR = 0x80;
 28e:	84 bf       	out	0x34, r24	; 52

uint8_t button_pressed=0;	
uint8_t arrow_possition;

//high nibble for output(columns) low for input(rows);
keypad_ddr=0xF0;
 290:	80 ef       	ldi	r24, 0xF0	; 240
 292:	87 bb       	out	0x17, r24	; 23
//enable internal pullups for PB0-PB3
keypad_port=0x0F;
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	88 bb       	out	0x18, r24	; 24
//keypad_pin=0xFF;


//Port D for indication only
lcd_ddr=0xFF;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	84 bb       	out	0x14, r24	; 20
lcd_port=0xFF;
 29c:	85 bb       	out	0x15, r24	; 21

//Initialize LCD module
InitLCD(LS_BLINK|LS_ULINE);
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <InitLCD>
LCDClear();
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>





initial_menu(0);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>
 2b2:	00 e5       	ldi	r16, 0x50	; 80
 2b4:	13 ec       	ldi	r17, 0xC3	; 195



while (1) //loop key check forever
	{
      	x=ReadADC(0);  //Read ADC Channel 0
 2b6:	c9 e1       	ldi	r28, 0x19	; 25
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 68 05 	call	0xad0	; 0xad0 <ReadADC>
 2c0:	90 93 4d 02 	sts	0x024D, r25
 2c4:	80 93 4c 02 	sts	0x024C, r24
      	y=ReadADC(1);  //Read ADC Channel 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 68 05 	call	0xad0	; 0xad0 <ReadADC>
 2ce:	bc 01       	movw	r22, r24
 2d0:	90 93 4f 02 	sts	0x024F, r25
 2d4:	80 93 4e 02 	sts	0x024E, r24

		joy_direction = find_direction_from_xy(x,y);
 2d8:	80 91 4c 02 	lds	r24, 0x024C
 2dc:	90 91 4d 02 	lds	r25, 0x024D
 2e0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 2e4:	80 93 53 02 	sts	0x0253, r24



if(find_direction_from_xy(x,y)==3)
 2e8:	60 91 4e 02 	lds	r22, 0x024E
 2ec:	70 91 4f 02 	lds	r23, 0x024F
 2f0:	80 91 4c 02 	lds	r24, 0x024C
 2f4:	90 91 4d 02 	lds	r25, 0x024D
 2f8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 2fc:	03 97       	sbiw	r24, 0x03	; 3
 2fe:	39 f4       	brne	.+14     	; 0x30e <main+0x8c>
{rotate_menu(1,0); _delay_ms(200);}
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 308:	c8 01       	movw	r24, r16
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x88>

if(find_direction_from_xy(x,y)==1)
 30e:	60 91 4e 02 	lds	r22, 0x024E
 312:	70 91 4f 02 	lds	r23, 0x024F
 316:	80 91 4c 02 	lds	r24, 0x024C
 31a:	90 91 4d 02 	lds	r25, 0x024D
 31e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <find_direction_from_xy>
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	39 f4       	brne	.+14     	; 0x334 <main+0xb2>
{rotate_menu(0,0); _delay_ms(200);}
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 32e:	c8 01       	movw	r24, r16
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0xae>


button_pressed=check_if_button_pressed();
 334:	0e 94 b4 04 	call	0x968	; 0x968 <check_if_button_pressed>
			


			if(button_pressed=='A')
 338:	81 34       	cpi	r24, 0x41	; 65
 33a:	11 f4       	brne	.+4      	; 0x340 <main+0xbe>
			{		
			rotate_menu(0,0); //Moves the menu up
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	03 c0       	rjmp	.+6      	; 0x346 <main+0xc4>
			}

			else if(button_pressed=='B')
 340:	82 34       	cpi	r24, 0x42	; 66
 342:	29 f4       	brne	.+10     	; 0x34e <main+0xcc>
			{
			rotate_menu(1,0); //Moves menu down
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>
 34c:	b6 cf       	rjmp	.-148    	; 0x2ba <main+0x38>
			}
		                                                                                                                                                                                                                                                                                                                                                                                                     
			if(button_pressed=='#')
 34e:	83 32       	cpi	r24, 0x23	; 35
 350:	09 f0       	breq	.+2      	; 0x354 <main+0xd2>
 352:	b3 cf       	rjmp	.-154    	; 0x2ba <main+0x38>
			{
			LCDClear();
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
			arrow_possition = rotate_menu(2,0);//Finds the actual possition of the "<"
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	0e 94 c7 03 	call	0x78e	; 0x78e <rotate_menu>

			if(arrow_possition==0)
 364:	88 23       	and	r24, r24
 366:	79 f4       	brne	.+30     	; 0x386 <main+0x104>
			{ 
			LCDWriteStringXY(0,0,"1st Possition");
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 36e:	8f e5       	ldi	r24, 0x5F	; 95
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 376:	80 e3       	ldi	r24, 0x30	; 48
 378:	95 e7       	ldi	r25, 0x75	; 117
 37a:	fe 01       	movw	r30, r28
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 380:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 382:	d9 f7       	brne	.-10     	; 0x37a <main+0xf8>
 384:	40 c0       	rjmp	.+128    	; 0x406 <main+0x184>
			_delay_ms(3000);
			initial_menu(0);			
			}

			if(arrow_possition==1) 
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	19 f4       	brne	.+6      	; 0x390 <main+0x10e>
			first_sub_menu();
 38a:	0e 94 67 00 	call	0xce	; 0xce <first_sub_menu>
 38e:	95 cf       	rjmp	.-214    	; 0x2ba <main+0x38>

			if(arrow_possition==2)
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	81 f4       	brne	.+32     	; 0x3b4 <main+0x132>
			 	{
				LCDWriteStringXY(0,0,"3rd Possition");
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 39c:	8d e6       	ldi	r24, 0x6D	; 109
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 3a4:	80 e3       	ldi	r24, 0x30	; 48
 3a6:	95 e7       	ldi	r25, 0x75	; 117
 3a8:	fe 01       	movw	r30, r28
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <main+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <main+0x126>
 3b2:	29 c0       	rjmp	.+82     	; 0x406 <main+0x184>
				_delay_ms(3000);
				initial_menu(0);
				}
				
			if(arrow_possition==3) 
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	81 f4       	brne	.+32     	; 0x3d8 <main+0x156>
				{
				LCDWriteStringXY(0,0,"4th Possition");
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 3c0:	8b e7       	ldi	r24, 0x7B	; 123
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	95 e7       	ldi	r25, 0x75	; 117
 3cc:	fe 01       	movw	r30, r28
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3d4:	d9 f7       	brne	.-10     	; 0x3cc <main+0x14a>
 3d6:	17 c0       	rjmp	.+46     	; 0x406 <main+0x184>
				_delay_ms(3000);
				initial_menu(0);
				}

			if(arrow_possition==4) 
 3d8:	84 30       	cpi	r24, 0x04	; 4
 3da:	19 f4       	brne	.+6      	; 0x3e2 <main+0x160>
			creator_info();
 3dc:	0e 94 1c 01 	call	0x238	; 0x238 <creator_info>
 3e0:	6c cf       	rjmp	.-296    	; 0x2ba <main+0x38>
			

			if(arrow_possition==5) 
 3e2:	85 30       	cpi	r24, 0x05	; 5
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <main+0x166>
 3e6:	69 cf       	rjmp	.-302    	; 0x2ba <main+0x38>
				{
				LCDWriteStringXY(0,0,"6th Possition");
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 3f0:	89 e8       	ldi	r24, 0x89	; 137
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 3f8:	80 e3       	ldi	r24, 0x30	; 48
 3fa:	95 e7       	ldi	r25, 0x75	; 117
 3fc:	fe 01       	movw	r30, r28
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <main+0x17c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 404:	d9 f7       	brne	.-10     	; 0x3fc <main+0x17a>
				_delay_ms(3000);
				initial_menu(0);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initial_menu>
 40c:	56 cf       	rjmp	.-340    	; 0x2ba <main+0x38>

0000040e <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 40e:	84 b3       	in	r24, 0x14	; 20
 410:	80 7f       	andi	r24, 0xF0	; 240
 412:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 414:	ad 9a       	sbi	0x15, 5	; 21
	CLEAR_RS();		//Read status
 416:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	8a 95       	dec	r24
 41c:	f1 f7       	brne	.-4      	; 0x41a <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	af 9a       	sbi	0x15, 7	; 21
 422:	82 2f       	mov	r24, r18
 424:	8a 95       	dec	r24
 426:	f1 f7       	brne	.-4      	; 0x424 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 428:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 42a:	82 95       	swap	r24
 42c:	80 7f       	andi	r24, 0xF0	; 240
 42e:	92 2f       	mov	r25, r18
 430:	9a 95       	dec	r25
 432:	f1 f7       	brne	.-4      	; 0x430 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 434:	af 98       	cbi	0x15, 7	; 21
 436:	92 2f       	mov	r25, r18
 438:	9a 95       	dec	r25
 43a:	f1 f7       	brne	.-4      	; 0x438 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 43c:	af 9a       	sbi	0x15, 7	; 21
 43e:	92 2f       	mov	r25, r18
 440:	9a 95       	dec	r25
 442:	f1 f7       	brne	.-4      	; 0x440 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 444:	93 b3       	in	r25, 0x13	; 19
 446:	92 2f       	mov	r25, r18
 448:	9a 95       	dec	r25
 44a:	f1 f7       	brne	.-4      	; 0x448 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 44c:	af 98       	cbi	0x15, 7	; 21
 44e:	92 2f       	mov	r25, r18
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 454:	87 fd       	sbrc	r24, 7
 456:	e4 cf       	rjmp	.-56     	; 0x420 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 458:	ad 98       	cbi	0x15, 5	; 21
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 45a:	84 b3       	in	r24, 0x14	; 20
 45c:	8f 60       	ori	r24, 0x0F	; 15
 45e:	84 bb       	out	0x14, r24	; 20

}
 460:	08 95       	ret

00000462 <LCDByte>:




void LCDByte(uint8_t c,uint8_t isdata)
{
 462:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 464:	66 23       	and	r22, r22
 466:	11 f4       	brne	.+4      	; 0x46c <LCDByte+0xa>
	CLEAR_RS();
 468:	ae 98       	cbi	0x15, 6	; 21
 46a:	01 c0       	rjmp	.+2      	; 0x46e <LCDByte+0xc>
else
	SET_RS();
 46c:	ae 9a       	sbi	0x15, 6	; 21
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	82 2f       	mov	r24, r18
 472:	8a 95       	dec	r24
 474:	f1 f7       	brne	.-4      	; 0x472 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 476:	af 9a       	sbi	0x15, 7	; 21

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 478:	85 b3       	in	r24, 0x15	; 21
 47a:	93 2f       	mov	r25, r19
 47c:	92 95       	swap	r25
 47e:	9f 70       	andi	r25, 0x0F	; 15
 480:	80 7f       	andi	r24, 0xF0	; 240
 482:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 484:	95 bb       	out	0x15, r25	; 21
 486:	82 2f       	mov	r24, r18
 488:	8a 95       	dec	r24
 48a:	f1 f7       	brne	.-4      	; 0x488 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 48c:	af 98       	cbi	0x15, 7	; 21
 48e:	82 2f       	mov	r24, r18
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 494:	af 9a       	sbi	0x15, 7	; 21

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 496:	85 b3       	in	r24, 0x15	; 21
 498:	3f 70       	andi	r19, 0x0F	; 15
 49a:	80 7f       	andi	r24, 0xF0	; 240
 49c:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 49e:	85 bb       	out	0x15, r24	; 21
 4a0:	82 2f       	mov	r24, r18
 4a2:	8a 95       	dec	r24
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 4a6:	af 98       	cbi	0x15, 7	; 21
 4a8:	2a 95       	dec	r18
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 4ac:	0e 94 07 02 	call	0x40e	; 0x40e <LCDBusyLoop>
}
 4b0:	08 95       	ret

000004b2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 4b2:	1f 93       	push	r17
 4b4:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4b6:	88 e9       	ldi	r24, 0x98	; 152
 4b8:	9a e3       	ldi	r25, 0x3A	; 58
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 4be:	84 b3       	in	r24, 0x14	; 20
 4c0:	8f 60       	ori	r24, 0x0F	; 15
 4c2:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 4c4:	a7 9a       	sbi	0x14, 7	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 4c6:	a6 9a       	sbi	0x14, 6	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 4c8:	a5 9a       	sbi	0x14, 5	; 20

	LCD_DATA_PORT&=0XF0;
 4ca:	85 b3       	in	r24, 0x15	; 21
 4cc:	80 7f       	andi	r24, 0xF0	; 240
 4ce:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 4d0:	af 98       	cbi	0x15, 7	; 21
	CLEAR_RW();
 4d2:	ad 98       	cbi	0x15, 5	; 21
	CLEAR_RS();
 4d4:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	98 2f       	mov	r25, r24
 4da:	9a 95       	dec	r25
 4dc:	f1 f7       	brne	.-4      	; 0x4da <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 4de:	af 9a       	sbi	0x15, 7	; 21
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 4e0:	a9 9a       	sbi	0x15, 1	; 21
 4e2:	98 2f       	mov	r25, r24
 4e4:	9a 95       	dec	r25
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 4e8:	af 98       	cbi	0x15, 7	; 21
 4ea:	8a 95       	dec	r24
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 4ee:	0e 94 07 02 	call	0x40e	; 0x40e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 4f2:	81 2f       	mov	r24, r17
 4f4:	8c 60       	ori	r24, 0x0C	; 12
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 4fc:	88 e2       	ldi	r24, 0x28	; 40
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
}
 504:	1f 91       	pop	r17
 506:	08 95       	ret

00000508 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
 50e:	04 c0       	rjmp	.+8      	; 0x518 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
	msg++;
 516:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 518:	88 81       	ld	r24, Y
 51a:	88 23       	and	r24, r24
 51c:	c9 f7       	brne	.-14     	; 0x510 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	df 93       	push	r29
 52e:	cf 93       	push	r28
 530:	00 d0       	rcall	.+0      	; 0x532 <LCDWriteInt+0xe>
 532:	00 d0       	rcall	.+0      	; 0x534 <LCDWriteInt+0x10>
 534:	0f 92       	push	r0
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	9c 01       	movw	r18, r24
 53c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 53e:	fe 01       	movw	r30, r28
 540:	31 96       	adiw	r30, 0x01	; 1
 542:	85 e0       	ldi	r24, 0x05	; 5
 544:	df 01       	movw	r26, r30
 546:	1d 92       	st	X+, r1
 548:	8a 95       	dec	r24
 54a:	e9 f7       	brne	.-6      	; 0x546 <LCDWriteInt+0x22>
 54c:	fe 01       	movw	r30, r28
 54e:	35 96       	adiw	r30, 0x05	; 5
 550:	0d c0       	rjmp	.+26     	; 0x56c <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 552:	c9 01       	movw	r24, r18
 554:	6a e0       	ldi	r22, 0x0A	; 10
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 55c:	80 83       	st	Z, r24
	val=val/10;
 55e:	c9 01       	movw	r24, r18
 560:	6a e0       	ldi	r22, 0x0A	; 10
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 568:	9b 01       	movw	r18, r22
 56a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 56c:	21 15       	cp	r18, r1
 56e:	31 05       	cpc	r19, r1
 570:	81 f7       	brne	.-32     	; 0x552 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 572:	bf ef       	ldi	r27, 0xFF	; 255
 574:	0f 3f       	cpi	r16, 0xFF	; 255
 576:	1b 07       	cpc	r17, r27
 578:	79 f4       	brne	.+30     	; 0x598 <LCDWriteInt+0x74>
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 57e:	ae 01       	movw	r20, r28
 580:	4f 5f       	subi	r20, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	02 c0       	rjmp	.+4      	; 0x58a <LCDWriteInt+0x66>
 586:	2f 5f       	subi	r18, 0xFF	; 255
 588:	3f 4f       	sbci	r19, 0xFF	; 255
 58a:	fa 01       	movw	r30, r20
 58c:	e2 0f       	add	r30, r18
 58e:	f3 1f       	adc	r31, r19
 590:	80 81       	ld	r24, Z
 592:	88 23       	and	r24, r24
 594:	c1 f3       	breq	.-16     	; 0x586 <LCDWriteInt+0x62>
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 598:	25 e0       	ldi	r18, 0x05	; 5
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	20 1b       	sub	r18, r16
 59e:	31 0b       	sbc	r19, r17
 5a0:	7e 01       	movw	r14, r28
 5a2:	08 94       	sec
 5a4:	e1 1c       	adc	r14, r1
 5a6:	f1 1c       	adc	r15, r1
 5a8:	e2 0e       	add	r14, r18
 5aa:	f3 1e       	adc	r15, r19
 5ac:	89 01       	movw	r16, r18
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 5b0:	f7 01       	movw	r30, r14
 5b2:	81 91       	ld	r24, Z+
 5b4:	7f 01       	movw	r14, r30
 5b6:	80 5d       	subi	r24, 0xD0	; 208
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 5be:	0f 5f       	subi	r16, 0xFF	; 255
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	05 30       	cpi	r16, 0x05	; 5
 5c4:	11 05       	cpc	r17, r1
 5c6:	a4 f3       	brlt	.-24     	; 0x5b0 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	08 95       	ret

000005e0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
	if(x<16)
 5e0:	80 31       	cpi	r24, 0x10	; 16
 5e2:	90 f4       	brcc	.+36     	; 0x608 <LCDGotoXY+0x28>
	{

 if(y==3)
 5e4:	63 30       	cpi	r22, 0x03	; 3
 5e6:	09 f4       	brne	.+2      	; 0x5ea <LCDGotoXY+0xa>
 x+=208;  //the only way to get to line 4
 5e8:	80 53       	subi	r24, 0x30	; 48
 
   x|=0b10000000; //in case y=0 comes here and in case y=3 after the x+=208 modification
 5ea:	98 2f       	mov	r25, r24
 5ec:	90 68       	ori	r25, 0x80	; 128
  

  if(y==1) 
 5ee:	61 30       	cpi	r22, 0x01	; 1
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <LCDGotoXY+0x18>
   x|=0b01000000;
 5f2:	98 2f       	mov	r25, r24
 5f4:	90 6c       	ori	r25, 0xC0	; 192
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <LCDGotoXY+0x20>
  else if(y==2) 
 5f8:	62 30       	cpi	r22, 0x02	; 2
 5fa:	11 f4       	brne	.+4      	; 0x600 <LCDGotoXY+0x20>
   x|=0b00010000;
 5fc:	98 2f       	mov	r25, r24
 5fe:	90 69       	ori	r25, 0x90	; 144
  //else if(y==3) 
   //x|=0b00000000;

  

LCDCmd(x);
 600:	89 2f       	mov	r24, r25
 602:	60 e0       	ldi	r22, 0x00	; 0
 604:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 608:	08 95       	ret

0000060a <LCDscroll>:




void LCDscroll(const char *scroling_text, uint8_t line_scroll)
{
 60a:	6f 92       	push	r6
 60c:	7f 92       	push	r7
 60e:	8f 92       	push	r8
 610:	9f 92       	push	r9
 612:	af 92       	push	r10
 614:	bf 92       	push	r11
 616:	cf 92       	push	r12
 618:	df 92       	push	r13
 61a:	ef 92       	push	r14
 61c:	ff 92       	push	r15
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	7c 01       	movw	r14, r24
 628:	86 2e       	mov	r8, r22
	line_scroll: Which line to scroll. '0' for first and '1' for second

	*****************************************************************/
 unsigned char i;
   uint8_t m=0,j;
   uint8_t scroling_text_length = strlen(scroling_text);
 62a:	fc 01       	movw	r30, r24
 62c:	01 90       	ld	r0, Z+
 62e:	00 20       	and	r0, r0
 630:	e9 f7       	brne	.-6      	; 0x62c <LCDscroll+0x22>
 632:	31 97       	sbiw	r30, 0x01	; 1
 634:	9e 2e       	mov	r9, r30
 636:	98 1a       	sub	r9, r24

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
 638:	89 e1       	ldi	r24, 0x19	; 25
 63a:	89 15       	cp	r24, r9
 63c:	20 f4       	brcc	.+8      	; 0x646 <LCDscroll+0x3c>
 63e:	87 e9       	ldi	r24, 0x97	; 151
 640:	e8 2e       	mov	r14, r24
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	f8 2e       	mov	r15, r24
 646:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 648:	c0 e0       	ldi	r28, 0x00	; 0
 64a:	d0 e0       	ldi	r29, 0x00	; 0
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
    LCDWriteStringXY(i,line_scroll,scroling_text);
 64c:	81 2f       	mov	r24, r17
 64e:	68 2d       	mov	r22, r8
 650:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
 654:	c7 01       	movw	r24, r14
 656:	0e 94 84 02 	call	0x508	; 0x508 <LCDWriteString>
 65a:	ce 01       	movw	r24, r28
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <LCDscroll+0x52>
    _delay_loop_2(0);
    _delay_loop_2(0);
	_delay_loop_2(0);
   _delay_loop_2(0);
 
    LCDClear();
 660:	ce 01       	movw	r24, r28
 662:	01 97       	sbiw	r24, 0x01	; 1
 664:	f1 f7       	brne	.-4      	; 0x662 <LCDscroll+0x58>
 666:	ce 01       	movw	r24, r28
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCDscroll+0x5e>
 66c:	ce 01       	movw	r24, r28
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <LCDscroll+0x64>
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
   uint8_t scroling_text_length = strlen(scroling_text);

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
 67a:	1f 5f       	subi	r17, 0xFF	; 255
 67c:	10 31       	cpi	r17, 0x10	; 16
 67e:	31 f7       	brne	.-52     	; 0x64c <LCDscroll+0x42>
 680:	00 e0       	ldi	r16, 0x00	; 0
 682:	cc 24       	eor	r12, r12
 684:	dd 24       	eor	r13, r13
   
   for(j=0;j<scroling_text_length;j++)
   {	
   
   	
   if(j>=scroling_text_length-i)
 686:	69 2c       	mov	r6, r9
 688:	77 24       	eor	r7, r7
 68a:	25 c0       	rjmp	.+74     	; 0x6d6 <LCDscroll+0xcc>
   uint8_t scroling_text_length = strlen(scroling_text);

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
 68c:	10 e0       	ldi	r17, 0x00	; 0
 68e:	c0 e0       	ldi	r28, 0x00	; 0
 690:	d0 e0       	ldi	r29, 0x00	; 0
   
   for(j=0;j<scroling_text_length;j++)
   {	
   
   	
   if(j>=scroling_text_length-i)
 692:	53 01       	movw	r10, r6
 694:	a0 1a       	sub	r10, r16
 696:	b1 08       	sbc	r11, r1
 698:	ca 15       	cp	r28, r10
 69a:	db 05       	cpc	r29, r11
 69c:	64 f0       	brlt	.+24     	; 0x6b6 <LCDscroll+0xac>
   {
   LCDGotoXY(m,line_scroll);
 69e:	81 2f       	mov	r24, r17
 6a0:	68 2d       	mov	r22, r8
 6a2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
   LCDByte(scroling_text[j],1);
 6a6:	f7 01       	movw	r30, r14
 6a8:	ec 0f       	add	r30, r28
 6aa:	fd 1f       	adc	r31, r29
 6ac:	80 81       	ld	r24, Z
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
   m++;
 6b4:	1f 5f       	subi	r17, 0xFF	; 255
 6b6:	21 96       	adiw	r28, 0x01	; 1

 for (i=0;i<scroling_text_length;i++) {
   
   m=0;
   
   for(j=0;j<scroling_text_length;j++)
 6b8:	c9 15       	cp	r28, r9
 6ba:	70 f3       	brcs	.-36     	; 0x698 <LCDscroll+0x8e>
 6bc:	c6 01       	movw	r24, r12
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCDscroll+0xb4>
 }

	
    

 for (i=0;i<scroling_text_length;i++) {
 6c2:	c6 01       	movw	r24, r12
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCDscroll+0xba>
 6c8:	c6 01       	movw	r24, r12
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCDscroll+0xc0>
 6ce:	c6 01       	movw	r24, r12
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <LCDscroll+0xc6>
 6d4:	0f 5f       	subi	r16, 0xFF	; 255
 6d6:	09 15       	cp	r16, r9
 6d8:	c8 f2       	brcs	.-78     	; 0x68c <LCDscroll+0x82>
   
   
 }


}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	bf 90       	pop	r11
 6ec:	af 90       	pop	r10
 6ee:	9f 90       	pop	r9
 6f0:	8f 90       	pop	r8
 6f2:	7f 90       	pop	r7
 6f4:	6f 90       	pop	r6
 6f6:	08 95       	ret

000006f8 <initial_menu>:
return line_num;
}


void initial_menu(uint8_t table_number)
{
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
int i;
line_num=0;	//i make it zero so when it returns to start over again from beginning
 6fe:	10 92 51 02 	sts	0x0251, r1
 702:	10 92 50 02 	sts	0x0250, r1
	//here i select the menu i selected depending the table_number
	if(table_number==0)
 706:	88 23       	and	r24, r24
 708:	51 f4       	brne	.+20     	; 0x71e <initial_menu+0x26>
	{
	
	memcpy(menu_table, line_data, sizeof(line_data));
 70a:	a5 e5       	ldi	r26, 0x55	; 85
 70c:	b2 e0       	ldi	r27, 0x02	; 2
 70e:	eb ea       	ldi	r30, 0xAB	; 171
 710:	f1 e0       	ldi	r31, 0x01	; 1
 712:	80 e6       	ldi	r24, 0x60	; 96
 714:	01 90       	ld	r0, Z+
 716:	0d 92       	st	X+, r0
 718:	81 50       	subi	r24, 0x01	; 1
 71a:	e1 f7       	brne	.-8      	; 0x714 <initial_menu+0x1c>
 71c:	0b c0       	rjmp	.+22     	; 0x734 <initial_menu+0x3c>
	}
	else if(table_number==1)
 71e:	81 30       	cpi	r24, 0x01	; 1
 720:	49 f4       	brne	.+18     	; 0x734 <initial_menu+0x3c>
	{

	memcpy(menu_table, letter_select, sizeof(letter_select));
 722:	a5 e5       	ldi	r26, 0x55	; 85
 724:	b2 e0       	ldi	r27, 0x02	; 2
 726:	eb e0       	ldi	r30, 0x0B	; 11
 728:	f2 e0       	ldi	r31, 0x02	; 2
 72a:	80 e4       	ldi	r24, 0x40	; 64
 72c:	01 90       	ld	r0, Z+
 72e:	0d 92       	st	X+, r0
 730:	81 50       	subi	r24, 0x01	; 1
 732:	e1 f7       	brne	.-8      	; 0x72c <initial_menu+0x34>
	}
	//end of menu selection

LCDClear();
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 73c:	c5 e5       	ldi	r28, 0x55	; 85
 73e:	d2 e0       	ldi	r29, 0x02	; 2
 740:	10 e0       	ldi	r17, 0x00	; 0
for(i=0;i<15;i++)
{
	if(menu_table[0][i] != '#')
 742:	88 81       	ld	r24, Y
 744:	83 32       	cpi	r24, 0x23	; 35
 746:	41 f0       	breq	.+16     	; 0x758 <initial_menu+0x60>
	{
	//first line
	LCDGotoXY(i,0);
 748:	81 2f       	mov	r24, r17
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
	LCDByte(menu_table[0][i], 1);
 750:	88 81       	ld	r24, Y
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
	}
	
	if(menu_table[1][i] != '#')
 758:	88 89       	ldd	r24, Y+16	; 0x10
 75a:	83 32       	cpi	r24, 0x23	; 35
 75c:	41 f0       	breq	.+16     	; 0x76e <initial_menu+0x76>
	{
	//second line
	LCDGotoXY(i,1);
 75e:	81 2f       	mov	r24, r17
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
	LCDByte(menu_table[1][i], 1);
 766:	88 89       	ldd	r24, Y+16	; 0x10
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 76e:	21 96       	adiw	r28, 0x01	; 1
 770:	1f 5f       	subi	r17, 0xFF	; 255
	memcpy(menu_table, letter_select, sizeof(letter_select));
	}
	//end of menu selection

LCDClear();
for(i=0;i<15;i++)
 772:	1f 30       	cpi	r17, 0x0F	; 15
 774:	31 f7       	brne	.-52     	; 0x742 <initial_menu+0x4a>
	LCDGotoXY(i,1);
	LCDByte(menu_table[1][i], 1);
	}
	
}
LCDGotoXY(15,0);
 776:	8f e0       	ldi	r24, 0x0F	; 15
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
LCDByte('<', 1);
 77e:	8c e3       	ldi	r24, 0x3C	; 60
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>

}
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	08 95       	ret

0000078e <rotate_menu>:
char menu_table[0][16];	//We copy the desired table here



uint8_t rotate_menu(uint8_t direction, uint8_t table_number)
{
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	98 2f       	mov	r25, r24
uint8_t i;



	//here i select the menu i selected depending the table_number
	if(table_number==0)
 79a:	66 23       	and	r22, r22
 79c:	69 f4       	brne	.+26     	; 0x7b8 <rotate_menu+0x2a>
	{
	number_of_lines = 6;
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	80 93 54 02 	sts	0x0254, r24
 	memcpy(menu_table, line_data, sizeof(line_data));
 7a4:	a5 e5       	ldi	r26, 0x55	; 85
 7a6:	b2 e0       	ldi	r27, 0x02	; 2
 7a8:	eb ea       	ldi	r30, 0xAB	; 171
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	80 e6       	ldi	r24, 0x60	; 96
 7ae:	01 90       	ld	r0, Z+
 7b0:	0d 92       	st	X+, r0
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <rotate_menu+0x20>
 7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <rotate_menu+0x46>
	}
	else if(table_number==1)
 7b8:	61 30       	cpi	r22, 0x01	; 1
 7ba:	61 f4       	brne	.+24     	; 0x7d4 <rotate_menu+0x46>
	{
	number_of_lines = 4;
 7bc:	84 e0       	ldi	r24, 0x04	; 4
 7be:	80 93 54 02 	sts	0x0254, r24
	memcpy(menu_table, letter_select, sizeof(letter_select));
 7c2:	a5 e5       	ldi	r26, 0x55	; 85
 7c4:	b2 e0       	ldi	r27, 0x02	; 2
 7c6:	eb e0       	ldi	r30, 0x0B	; 11
 7c8:	f2 e0       	ldi	r31, 0x02	; 2
 7ca:	80 e4       	ldi	r24, 0x40	; 64
 7cc:	01 90       	ld	r0, Z+
 7ce:	0d 92       	st	X+, r0
 7d0:	81 50       	subi	r24, 0x01	; 1
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <rotate_menu+0x3e>
	}
	//end of menu selection

	if(previews_table_number != table_number) //if we change menu starts over the line_num
 7d4:	80 91 52 02 	lds	r24, 0x0252
 7d8:	86 17       	cp	r24, r22
 7da:	21 f0       	breq	.+8      	; 0x7e4 <rotate_menu+0x56>
	{line_num=0;}
 7dc:	10 92 51 02 	sts	0x0251, r1
 7e0:	10 92 50 02 	sts	0x0250, r1

	if(direction==0)
 7e4:	99 23       	and	r25, r25
 7e6:	a1 f4       	brne	.+40     	; 0x810 <rotate_menu+0x82>
	{
	line_num--;	
 7e8:	80 91 50 02 	lds	r24, 0x0250
 7ec:	90 91 51 02 	lds	r25, 0x0251
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	90 93 51 02 	sts	0x0251, r25
 7f6:	80 93 50 02 	sts	0x0250, r24
	if(line_num<0)
 7fa:	97 ff       	sbrs	r25, 7
 7fc:	23 c0       	rjmp	.+70     	; 0x844 <rotate_menu+0xb6>
	{line_num=number_of_lines-1;}	
 7fe:	80 91 54 02 	lds	r24, 0x0254
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	01 97       	sbiw	r24, 0x01	; 1
 806:	90 93 51 02 	sts	0x0251, r25
 80a:	80 93 50 02 	sts	0x0250, r24
 80e:	1a c0       	rjmp	.+52     	; 0x844 <rotate_menu+0xb6>
	}

	else if(direction==1)
 810:	91 30       	cpi	r25, 0x01	; 1
 812:	a9 f4       	brne	.+42     	; 0x83e <rotate_menu+0xb0>
	{
	line_num++;
 814:	20 91 50 02 	lds	r18, 0x0250
 818:	30 91 51 02 	lds	r19, 0x0251
 81c:	2f 5f       	subi	r18, 0xFF	; 255
 81e:	3f 4f       	sbci	r19, 0xFF	; 255
 820:	30 93 51 02 	sts	0x0251, r19
 824:	20 93 50 02 	sts	0x0250, r18
	if(line_num>number_of_lines-1)
 828:	80 91 54 02 	lds	r24, 0x0254
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	28 17       	cp	r18, r24
 830:	39 07       	cpc	r19, r25
 832:	44 f0       	brlt	.+16     	; 0x844 <rotate_menu+0xb6>
	{line_num=0;}
 834:	10 92 51 02 	sts	0x0251, r1
 838:	10 92 50 02 	sts	0x0250, r1
 83c:	03 c0       	rjmp	.+6      	; 0x844 <rotate_menu+0xb6>
	}

	else if(direction==2)
 83e:	92 30       	cpi	r25, 0x02	; 2
 840:	09 f4       	brne	.+2      	; 0x844 <rotate_menu+0xb6>
 842:	8a c0       	rjmp	.+276    	; 0x958 <rotate_menu+0x1ca>
	{
	return line_num;
	}

previews_table_number=table_number;	//keeps the previews menu so if it change to start the line number from 0 again
 844:	60 93 52 02 	sts	0x0252, r22

LCDClear();
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 850:	05 e5       	ldi	r16, 0x55	; 85
 852:	12 e0       	ldi	r17, 0x02	; 2
 854:	c0 e0       	ldi	r28, 0x00	; 0
 856:	d0 e0       	ldi	r29, 0x00	; 0
 858:	fc 2e       	mov	r15, r28
{

	


	if(menu_table[line_num][i] != '#')
 85a:	e0 91 50 02 	lds	r30, 0x0250
 85e:	f0 91 51 02 	lds	r31, 0x0251
 862:	34 e0       	ldi	r19, 0x04	; 4
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	3a 95       	dec	r19
 86a:	e1 f7       	brne	.-8      	; 0x864 <rotate_menu+0xd6>
 86c:	ec 0f       	add	r30, r28
 86e:	fd 1f       	adc	r31, r29
 870:	eb 5a       	subi	r30, 0xAB	; 171
 872:	fd 4f       	sbci	r31, 0xFD	; 253
 874:	80 81       	ld	r24, Z
 876:	83 32       	cpi	r24, 0x23	; 35
 878:	a9 f0       	breq	.+42     	; 0x8a4 <rotate_menu+0x116>
	{
	//first line
	LCDGotoXY(i,0);
 87a:	8c 2f       	mov	r24, r28
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
	LCDByte(menu_table[line_num][i], 1);
 882:	e0 91 50 02 	lds	r30, 0x0250
 886:	f0 91 51 02 	lds	r31, 0x0251
 88a:	24 e0       	ldi	r18, 0x04	; 4
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	2a 95       	dec	r18
 892:	e1 f7       	brne	.-8      	; 0x88c <rotate_menu+0xfe>
 894:	ec 0f       	add	r30, r28
 896:	fd 1f       	adc	r31, r29
 898:	eb 5a       	subi	r30, 0xAB	; 171
 89a:	fd 4f       	sbci	r31, 0xFD	; 253
 89c:	80 81       	ld	r24, Z
 89e:	61 e0       	ldi	r22, 0x01	; 1
 8a0:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
	}
	
	

	if(menu_table[line_num+1][i] != '#' && line_num<number_of_lines-1)
 8a4:	20 91 50 02 	lds	r18, 0x0250
 8a8:	30 91 51 02 	lds	r19, 0x0251
 8ac:	f9 01       	movw	r30, r18
 8ae:	31 96       	adiw	r30, 0x01	; 1
 8b0:	94 e0       	ldi	r25, 0x04	; 4
 8b2:	ee 0f       	add	r30, r30
 8b4:	ff 1f       	adc	r31, r31
 8b6:	9a 95       	dec	r25
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <rotate_menu+0x124>
 8ba:	ec 0f       	add	r30, r28
 8bc:	fd 1f       	adc	r31, r29
 8be:	eb 5a       	subi	r30, 0xAB	; 171
 8c0:	fd 4f       	sbci	r31, 0xFD	; 253
 8c2:	80 81       	ld	r24, Z
 8c4:	83 32       	cpi	r24, 0x23	; 35
 8c6:	e9 f0       	breq	.+58     	; 0x902 <rotate_menu+0x174>
 8c8:	80 91 54 02 	lds	r24, 0x0254
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	b4 f4       	brge	.+44     	; 0x902 <rotate_menu+0x174>
	{
	//second line
	LCDGotoXY(i,1);
 8d6:	8f 2d       	mov	r24, r15
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
	LCDByte(menu_table[line_num+1][i], 1);
 8de:	e0 91 50 02 	lds	r30, 0x0250
 8e2:	f0 91 51 02 	lds	r31, 0x0251
 8e6:	31 96       	adiw	r30, 0x01	; 1
 8e8:	84 e0       	ldi	r24, 0x04	; 4
 8ea:	ee 0f       	add	r30, r30
 8ec:	ff 1f       	adc	r31, r31
 8ee:	8a 95       	dec	r24
 8f0:	e1 f7       	brne	.-8      	; 0x8ea <rotate_menu+0x15c>
 8f2:	ec 0f       	add	r30, r28
 8f4:	fd 1f       	adc	r31, r29
 8f6:	eb 5a       	subi	r30, 0xAB	; 171
 8f8:	fd 4f       	sbci	r31, 0xFD	; 253
 8fa:	80 81       	ld	r24, Z
 8fc:	61 e0       	ldi	r22, 0x01	; 1
 8fe:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
	}
	
	if(menu_table[0][i] != '#' && line_num==number_of_lines-1)
 902:	f8 01       	movw	r30, r16
 904:	80 81       	ld	r24, Z
 906:	83 32       	cpi	r24, 0x23	; 35
 908:	a1 f0       	breq	.+40     	; 0x932 <rotate_menu+0x1a4>
 90a:	80 91 54 02 	lds	r24, 0x0254
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	20 91 50 02 	lds	r18, 0x0250
 916:	30 91 51 02 	lds	r19, 0x0251
 91a:	28 17       	cp	r18, r24
 91c:	39 07       	cpc	r19, r25
 91e:	49 f4       	brne	.+18     	; 0x932 <rotate_menu+0x1a4>
	{
	//second line
	LCDGotoXY(i,1);
 920:	8f 2d       	mov	r24, r15
 922:	61 e0       	ldi	r22, 0x01	; 1
 924:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
	LCDByte(menu_table[0][i], 1);
 928:	f8 01       	movw	r30, r16
 92a:	80 81       	ld	r24, Z
 92c:	61 e0       	ldi	r22, 0x01	; 1
 92e:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 932:	21 96       	adiw	r28, 0x01	; 1
 934:	0f 5f       	subi	r16, 0xFF	; 255
 936:	1f 4f       	sbci	r17, 0xFF	; 255

previews_table_number=table_number;	//keeps the previews menu so if it change to start the line number from 0 again

LCDClear();

for(i=0;i<15;i++)
 938:	cf 30       	cpi	r28, 0x0F	; 15
 93a:	d1 05       	cpc	r29, r1
 93c:	09 f0       	breq	.+2      	; 0x940 <rotate_menu+0x1b2>
 93e:	8c cf       	rjmp	.-232    	; 0x858 <rotate_menu+0xca>




}
LCDGotoXY(15,0);
 940:	8f e0       	ldi	r24, 0x0F	; 15
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <LCDGotoXY>
LCDByte('<', 1);
 948:	8c e3       	ldi	r24, 0x3C	; 60
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	0e 94 31 02 	call	0x462	; 0x462 <LCDByte>
 950:	80 e5       	ldi	r24, 0x50	; 80
 952:	93 ec       	ldi	r25, 0xC3	; 195
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	f1 f7       	brne	.-4      	; 0x954 <rotate_menu+0x1c6>
_delay_ms(100);
return line_num;
 958:	80 91 50 02 	lds	r24, 0x0250
}
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	ff 90       	pop	r15
 966:	08 95       	ret

00000968 <check_if_button_pressed>:
{
	int i;
	
		
		//first column
		keypad_port =0b01111111;
 968:	8f e7       	ldi	r24, 0x7F	; 127
 96a:	88 bb       	out	0x18, r24	; 24
		// any function that serves pressed button

		


		i=keypad_pin;
 96c:	86 b3       	in	r24, 0x16	; 22
		if(keypad_pin == 0b01110111) 
 96e:	86 b3       	in	r24, 0x16	; 22
 970:	87 37       	cpi	r24, 0x77	; 119
 972:	39 f4       	brne	.+14     	; 0x982 <check_if_button_pressed+0x1a>
 974:	80 e5       	ldi	r24, 0x50	; 80
 976:	93 ec       	ldi	r25, 0xC3	; 195
 978:	01 97       	sbiw	r24, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <check_if_button_pressed+0x10>
 97c:	21 e3       	ldi	r18, 0x31	; 49
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	a0 c0       	rjmp	.+320    	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 1");
		return(49);
		}

		if(keypad_pin == 0b01111011) 
 982:	86 b3       	in	r24, 0x16	; 22
 984:	8b 37       	cpi	r24, 0x7B	; 123
 986:	39 f4       	brne	.+14     	; 0x996 <check_if_button_pressed+0x2e>
 988:	80 e5       	ldi	r24, 0x50	; 80
 98a:	93 ec       	ldi	r25, 0xC3	; 195
 98c:	01 97       	sbiw	r24, 0x01	; 1
 98e:	f1 f7       	brne	.-4      	; 0x98c <check_if_button_pressed+0x24>
 990:	22 e3       	ldi	r18, 0x32	; 50
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	96 c0       	rjmp	.+300    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 2");
		return(50);
		}


        if(keypad_pin == 0b01111101) 
 996:	86 b3       	in	r24, 0x16	; 22
 998:	8d 37       	cpi	r24, 0x7D	; 125
 99a:	39 f4       	brne	.+14     	; 0x9aa <check_if_button_pressed+0x42>
 99c:	80 e5       	ldi	r24, 0x50	; 80
 99e:	93 ec       	ldi	r25, 0xC3	; 195
 9a0:	01 97       	sbiw	r24, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <check_if_button_pressed+0x38>
 9a4:	23 e3       	ldi	r18, 0x33	; 51
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	8c c0       	rjmp	.+280    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 3");
		return(51);
		}


		if(keypad_pin == 0b01111110) 
 9aa:	86 b3       	in	r24, 0x16	; 22
 9ac:	8e 37       	cpi	r24, 0x7E	; 126
 9ae:	39 f4       	brne	.+14     	; 0x9be <check_if_button_pressed+0x56>
 9b0:	80 e5       	ldi	r24, 0x50	; 80
 9b2:	93 ec       	ldi	r25, 0xC3	; 195
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <check_if_button_pressed+0x4c>
 9b8:	21 e4       	ldi	r18, 0x41	; 65
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	82 c0       	rjmp	.+260    	; 0xac2 <check_if_button_pressed+0x15a>
		return(65);
		}


				
		keypad_port =0b10111111;
 9be:	8f eb       	ldi	r24, 0xBF	; 191
 9c0:	88 bb       	out	0x18, r24	; 24

		i=keypad_pin;
 9c2:	86 b3       	in	r24, 0x16	; 22
		if(keypad_pin == 0b10110111) 
 9c4:	86 b3       	in	r24, 0x16	; 22
 9c6:	87 3b       	cpi	r24, 0xB7	; 183
 9c8:	39 f4       	brne	.+14     	; 0x9d8 <check_if_button_pressed+0x70>
 9ca:	80 e5       	ldi	r24, 0x50	; 80
 9cc:	93 ec       	ldi	r25, 0xC3	; 195
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	f1 f7       	brne	.-4      	; 0x9ce <check_if_button_pressed+0x66>
 9d2:	24 e3       	ldi	r18, 0x34	; 52
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	75 c0       	rjmp	.+234    	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 4"); 
		return(52);
		}

		if(keypad_pin == 0b10111011) 
 9d8:	86 b3       	in	r24, 0x16	; 22
 9da:	8b 3b       	cpi	r24, 0xBB	; 187
 9dc:	39 f4       	brne	.+14     	; 0x9ec <check_if_button_pressed+0x84>
 9de:	80 e5       	ldi	r24, 0x50	; 80
 9e0:	93 ec       	ldi	r25, 0xC3	; 195
 9e2:	01 97       	sbiw	r24, 0x01	; 1
 9e4:	f1 f7       	brne	.-4      	; 0x9e2 <check_if_button_pressed+0x7a>
 9e6:	25 e3       	ldi	r18, 0x35	; 53
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	6b c0       	rjmp	.+214    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 5");
		return(53);
		}


        if(keypad_pin == 0b10111101) 
 9ec:	86 b3       	in	r24, 0x16	; 22
 9ee:	8d 3b       	cpi	r24, 0xBD	; 189
 9f0:	39 f4       	brne	.+14     	; 0xa00 <check_if_button_pressed+0x98>
 9f2:	80 e5       	ldi	r24, 0x50	; 80
 9f4:	93 ec       	ldi	r25, 0xC3	; 195
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	f1 f7       	brne	.-4      	; 0x9f6 <check_if_button_pressed+0x8e>
 9fa:	26 e3       	ldi	r18, 0x36	; 54
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	61 c0       	rjmp	.+194    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 6");
		return(54);
		}


		if(keypad_pin == 0b10111110) 
 a00:	86 b3       	in	r24, 0x16	; 22
 a02:	8e 3b       	cpi	r24, 0xBE	; 190
 a04:	39 f4       	brne	.+14     	; 0xa14 <check_if_button_pressed+0xac>
 a06:	80 e5       	ldi	r24, 0x50	; 80
 a08:	93 ec       	ldi	r25, 0xC3	; 195
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	f1 f7       	brne	.-4      	; 0xa0a <check_if_button_pressed+0xa2>
 a0e:	22 e4       	ldi	r18, 0x42	; 66
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	57 c0       	rjmp	.+174    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED:B");
		return(66);
		}

		//third column
		keypad_port =0b11011111;
 a14:	8f ed       	ldi	r24, 0xDF	; 223
 a16:	88 bb       	out	0x18, r24	; 24

		i=keypad_pin;
 a18:	86 b3       	in	r24, 0x16	; 22
		if(keypad_pin == 0b11010111) 
 a1a:	86 b3       	in	r24, 0x16	; 22
 a1c:	87 3d       	cpi	r24, 0xD7	; 215
 a1e:	39 f4       	brne	.+14     	; 0xa2e <check_if_button_pressed+0xc6>
 a20:	80 e5       	ldi	r24, 0x50	; 80
 a22:	93 ec       	ldi	r25, 0xC3	; 195
 a24:	01 97       	sbiw	r24, 0x01	; 1
 a26:	f1 f7       	brne	.-4      	; 0xa24 <check_if_button_pressed+0xbc>
 a28:	27 e3       	ldi	r18, 0x37	; 55
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	4a c0       	rjmp	.+148    	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 7");
		return(55);
		}

		if(keypad_pin == 0b11011011) 
 a2e:	86 b3       	in	r24, 0x16	; 22
 a30:	8b 3d       	cpi	r24, 0xDB	; 219
 a32:	39 f4       	brne	.+14     	; 0xa42 <check_if_button_pressed+0xda>
 a34:	80 e5       	ldi	r24, 0x50	; 80
 a36:	93 ec       	ldi	r25, 0xC3	; 195
 a38:	01 97       	sbiw	r24, 0x01	; 1
 a3a:	f1 f7       	brne	.-4      	; 0xa38 <check_if_button_pressed+0xd0>
 a3c:	28 e3       	ldi	r18, 0x38	; 56
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	40 c0       	rjmp	.+128    	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 8");
		return(56);
		}


        if(keypad_pin == 0b11011101) 
 a42:	86 b3       	in	r24, 0x16	; 22
 a44:	8d 3d       	cpi	r24, 0xDD	; 221
 a46:	39 f4       	brne	.+14     	; 0xa56 <check_if_button_pressed+0xee>
 a48:	80 e5       	ldi	r24, 0x50	; 80
 a4a:	93 ec       	ldi	r25, 0xC3	; 195
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	f1 f7       	brne	.-4      	; 0xa4c <check_if_button_pressed+0xe4>
 a50:	29 e3       	ldi	r18, 0x39	; 57
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	36 c0       	rjmp	.+108    	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 9");
		return(57);
		}

		if(keypad_pin == 0b11011110) 
 a56:	86 b3       	in	r24, 0x16	; 22
 a58:	8e 3d       	cpi	r24, 0xDE	; 222
 a5a:	39 f4       	brne	.+14     	; 0xa6a <check_if_button_pressed+0x102>
 a5c:	80 e5       	ldi	r24, 0x50	; 80
 a5e:	93 ec       	ldi	r25, 0xC3	; 195
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <check_if_button_pressed+0xf8>
 a64:	23 e4       	ldi	r18, 0x43	; 67
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	2c c0       	rjmp	.+88     	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED:C");
		return(67);
		}

		//fourth column
		keypad_port =0b11101111;
 a6a:	8f ee       	ldi	r24, 0xEF	; 239
 a6c:	88 bb       	out	0x18, r24	; 24

		i=keypad_pin;
 a6e:	86 b3       	in	r24, 0x16	; 22
		if(keypad_pin == 0b11100111) 
 a70:	86 b3       	in	r24, 0x16	; 22
 a72:	87 3e       	cpi	r24, 0xE7	; 231
 a74:	39 f4       	brne	.+14     	; 0xa84 <check_if_button_pressed+0x11c>
 a76:	80 e5       	ldi	r24, 0x50	; 80
 a78:	93 ec       	ldi	r25, 0xC3	; 195
 a7a:	01 97       	sbiw	r24, 0x01	; 1
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <check_if_button_pressed+0x112>
 a7e:	2a e2       	ldi	r18, 0x2A	; 42
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	1f c0       	rjmp	.+62     	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED:*");
		return(42);
		}

		if(keypad_pin == 0b11101011) 
 a84:	86 b3       	in	r24, 0x16	; 22
 a86:	8b 3e       	cpi	r24, 0xEB	; 235
 a88:	39 f4       	brne	.+14     	; 0xa98 <check_if_button_pressed+0x130>
 a8a:	80 e5       	ldi	r24, 0x50	; 80
 a8c:	93 ec       	ldi	r25, 0xC3	; 195
 a8e:	01 97       	sbiw	r24, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <check_if_button_pressed+0x126>
 a92:	20 e3       	ldi	r18, 0x30	; 48
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	15 c0       	rjmp	.+42     	; 0xac2 <check_if_button_pressed+0x15a>
		//LCDWriteStringXY(0,0, "BUTTON PRESSED 0");
	    return(48);
		}
	

        if(keypad_pin == 0b11101101) 
 a98:	86 b3       	in	r24, 0x16	; 22
 a9a:	8d 3e       	cpi	r24, 0xED	; 237
 a9c:	39 f4       	brne	.+14     	; 0xaac <check_if_button_pressed+0x144>
 a9e:	80 e5       	ldi	r24, 0x50	; 80
 aa0:	93 ec       	ldi	r25, 0xC3	; 195
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	f1 f7       	brne	.-4      	; 0xaa2 <check_if_button_pressed+0x13a>
 aa6:	23 e2       	ldi	r18, 0x23	; 35
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	0b c0       	rjmp	.+22     	; 0xac2 <check_if_button_pressed+0x15a>
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED:#");
		return(35);
		}

		if(keypad_pin == 0b11101110) 
 aac:	86 b3       	in	r24, 0x16	; 22
 aae:	8e 3e       	cpi	r24, 0xEE	; 238
 ab0:	39 f4       	brne	.+14     	; 0xac0 <check_if_button_pressed+0x158>
 ab2:	80 e5       	ldi	r24, 0x50	; 80
 ab4:	93 ec       	ldi	r25, 0xC3	; 195
 ab6:	01 97       	sbiw	r24, 0x01	; 1
 ab8:	f1 f7       	brne	.-4      	; 0xab6 <check_if_button_pressed+0x14e>
 aba:	24 e4       	ldi	r18, 0x44	; 68
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	01 c0       	rjmp	.+2      	; 0xac2 <check_if_button_pressed+0x15a>
 ac0:	08 95       	ret
		_delay_ms(LOCK_INPUT_TIME);
		//LCDWriteStringXY(0,0, "BUTTON PRESSED: D");
        return(68);
		}

}
 ac2:	c9 01       	movw	r24, r18
 ac4:	08 95       	ret

00000ac6 <InitADC>:



void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
 ac6:	80 e4       	ldi	r24, 0x40	; 64
 ac8:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 aca:	87 e8       	ldi	r24, 0x87	; 135
 acc:	86 b9       	out	0x06, r24	; 6
}
 ace:	08 95       	ret

00000ad0 <ReadADC>:



void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
 ad0:	90 e4       	ldi	r25, 0x40	; 64
 ad2:	97 b9       	out	0x07, r25	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 ad4:	97 e8       	ldi	r25, 0x87	; 135
 ad6:	96 b9       	out	0x06, r25	; 6
uint16_t ReadADC(uint8_t ch)
{
   InitADC();
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
 ad8:	97 b1       	in	r25, 0x07	; 7
 ada:	87 70       	andi	r24, 0x07	; 7
 adc:	89 2b       	or	r24, r25
 ade:	87 b9       	out	0x07, r24	; 7

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
 ae0:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 ae2:	34 9b       	sbis	0x06, 4	; 6
 ae4:	fe cf       	rjmp	.-4      	; 0xae2 <ReadADC+0x12>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
 ae6:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
 ae8:	24 b1       	in	r18, 0x04	; 4
 aea:	35 b1       	in	r19, 0x05	; 5
}
 aec:	c9 01       	movw	r24, r18
 aee:	08 95       	ret

00000af0 <find_direction_from_xy>:
/////8-->Go left-up////////////
///////////////////////////////
uint16_t find_direction_from_xy(uint16_t x,uint16_t y)
{

	if(x>255 && x<765 && y>765)
 af0:	9c 01       	movw	r18, r24
 af2:	20 50       	subi	r18, 0x00	; 0
 af4:	31 40       	sbci	r19, 0x01	; 1
 af6:	41 e0       	ldi	r20, 0x01	; 1
 af8:	2d 3f       	cpi	r18, 0xFD	; 253
 afa:	34 07       	cpc	r19, r20
 afc:	38 f4       	brcc	.+14     	; 0xb0c <find_direction_from_xy+0x1c>
 afe:	42 e0       	ldi	r20, 0x02	; 2
 b00:	6e 3f       	cpi	r22, 0xFE	; 254
 b02:	74 07       	cpc	r23, r20
 b04:	18 f0       	brcs	.+6      	; 0xb0c <find_direction_from_xy+0x1c>
 b06:	21 e0       	ldi	r18, 0x01	; 1
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	48 c0       	rjmp	.+144    	; 0xb9c <find_direction_from_xy+0xac>
	return(1);

	else if(x>765 && y>255 && y<765)
 b0c:	42 e0       	ldi	r20, 0x02	; 2
 b0e:	8e 3f       	cpi	r24, 0xFE	; 254
 b10:	94 07       	cpc	r25, r20
 b12:	58 f0       	brcs	.+22     	; 0xb2a <find_direction_from_xy+0x3a>
 b14:	6f 3f       	cpi	r22, 0xFF	; 255
 b16:	71 05       	cpc	r23, r1
 b18:	41 f0       	breq	.+16     	; 0xb2a <find_direction_from_xy+0x3a>
 b1a:	38 f0       	brcs	.+14     	; 0xb2a <find_direction_from_xy+0x3a>
 b1c:	42 e0       	ldi	r20, 0x02	; 2
 b1e:	6d 3f       	cpi	r22, 0xFD	; 253
 b20:	74 07       	cpc	r23, r20
 b22:	18 f4       	brcc	.+6      	; 0xb2a <find_direction_from_xy+0x3a>
 b24:	22 e0       	ldi	r18, 0x02	; 2
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	39 c0       	rjmp	.+114    	; 0xb9c <find_direction_from_xy+0xac>
	return(2);

	else if(x>255 && x<765 && y<255)
 b2a:	2d 5f       	subi	r18, 0xFD	; 253
 b2c:	31 40       	sbci	r19, 0x01	; 1
 b2e:	30 f4       	brcc	.+12     	; 0xb3c <find_direction_from_xy+0x4c>
 b30:	6f 3f       	cpi	r22, 0xFF	; 255
 b32:	71 05       	cpc	r23, r1
 b34:	18 f4       	brcc	.+6      	; 0xb3c <find_direction_from_xy+0x4c>
 b36:	23 e0       	ldi	r18, 0x03	; 3
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	30 c0       	rjmp	.+96     	; 0xb9c <find_direction_from_xy+0xac>
	return(3);

	else if(x<255 && y>255 && y<765)
 b3c:	8f 3f       	cpi	r24, 0xFF	; 255
 b3e:	91 05       	cpc	r25, r1
 b40:	58 f4       	brcc	.+22     	; 0xb58 <find_direction_from_xy+0x68>
 b42:	6f 3f       	cpi	r22, 0xFF	; 255
 b44:	71 05       	cpc	r23, r1
 b46:	41 f0       	breq	.+16     	; 0xb58 <find_direction_from_xy+0x68>
 b48:	38 f0       	brcs	.+14     	; 0xb58 <find_direction_from_xy+0x68>
 b4a:	22 e0       	ldi	r18, 0x02	; 2
 b4c:	6d 3f       	cpi	r22, 0xFD	; 253
 b4e:	72 07       	cpc	r23, r18
 b50:	18 f4       	brcc	.+6      	; 0xb58 <find_direction_from_xy+0x68>
 b52:	24 e0       	ldi	r18, 0x04	; 4
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	22 c0       	rjmp	.+68     	; 0xb9c <find_direction_from_xy+0xac>
	return(4);

	else if(x>765 && y>765)
 b58:	42 e0       	ldi	r20, 0x02	; 2
 b5a:	8e 3f       	cpi	r24, 0xFE	; 254
 b5c:	94 07       	cpc	r25, r20
 b5e:	68 f0       	brcs	.+26     	; 0xb7a <find_direction_from_xy+0x8a>
 b60:	22 e0       	ldi	r18, 0x02	; 2
 b62:	6e 3f       	cpi	r22, 0xFE	; 254
 b64:	72 07       	cpc	r23, r18
 b66:	18 f0       	brcs	.+6      	; 0xb6e <find_direction_from_xy+0x7e>
 b68:	25 e0       	ldi	r18, 0x05	; 5
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	17 c0       	rjmp	.+46     	; 0xb9c <find_direction_from_xy+0xac>
	return(5);

	else if(x>765 && y<255)
 b6e:	6f 3f       	cpi	r22, 0xFF	; 255
 b70:	71 05       	cpc	r23, r1
 b72:	18 f4       	brcc	.+6      	; 0xb7a <find_direction_from_xy+0x8a>
 b74:	26 e0       	ldi	r18, 0x06	; 6
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	11 c0       	rjmp	.+34     	; 0xb9c <find_direction_from_xy+0xac>
	return(6);

	else if(x<255 && y<255)
 b7a:	8f 3f       	cpi	r24, 0xFF	; 255
 b7c:	91 05       	cpc	r25, r1
 b7e:	60 f4       	brcc	.+24     	; 0xb98 <find_direction_from_xy+0xa8>
 b80:	6f 3f       	cpi	r22, 0xFF	; 255
 b82:	71 05       	cpc	r23, r1
 b84:	18 f4       	brcc	.+6      	; 0xb8c <find_direction_from_xy+0x9c>
 b86:	27 e0       	ldi	r18, 0x07	; 7
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <find_direction_from_xy+0xac>
	return(7);

	else if(x<255 && y>765)
 b8c:	6e 5f       	subi	r22, 0xFE	; 254
 b8e:	72 40       	sbci	r23, 0x02	; 2
 b90:	18 f0       	brcs	.+6      	; 0xb98 <find_direction_from_xy+0xa8>
 b92:	28 e0       	ldi	r18, 0x08	; 8
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <find_direction_from_xy+0xac>
 b98:	20 e0       	ldi	r18, 0x00	; 0
 b9a:	30 e0       	ldi	r19, 0x00	; 0
	return(8);

	else
	return(0);
}
 b9c:	c9 01       	movw	r24, r18
 b9e:	08 95       	ret

00000ba0 <__divmodhi4>:
 ba0:	97 fb       	bst	r25, 7
 ba2:	09 2e       	mov	r0, r25
 ba4:	07 26       	eor	r0, r23
 ba6:	0a d0       	rcall	.+20     	; 0xbbc <__divmodhi4_neg1>
 ba8:	77 fd       	sbrc	r23, 7
 baa:	04 d0       	rcall	.+8      	; 0xbb4 <__divmodhi4_neg2>
 bac:	0c d0       	rcall	.+24     	; 0xbc6 <__udivmodhi4>
 bae:	06 d0       	rcall	.+12     	; 0xbbc <__divmodhi4_neg1>
 bb0:	00 20       	and	r0, r0
 bb2:	1a f4       	brpl	.+6      	; 0xbba <__divmodhi4_exit>

00000bb4 <__divmodhi4_neg2>:
 bb4:	70 95       	com	r23
 bb6:	61 95       	neg	r22
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255

00000bba <__divmodhi4_exit>:
 bba:	08 95       	ret

00000bbc <__divmodhi4_neg1>:
 bbc:	f6 f7       	brtc	.-4      	; 0xbba <__divmodhi4_exit>
 bbe:	90 95       	com	r25
 bc0:	81 95       	neg	r24
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	08 95       	ret

00000bc6 <__udivmodhi4>:
 bc6:	aa 1b       	sub	r26, r26
 bc8:	bb 1b       	sub	r27, r27
 bca:	51 e1       	ldi	r21, 0x11	; 17
 bcc:	07 c0       	rjmp	.+14     	; 0xbdc <__udivmodhi4_ep>

00000bce <__udivmodhi4_loop>:
 bce:	aa 1f       	adc	r26, r26
 bd0:	bb 1f       	adc	r27, r27
 bd2:	a6 17       	cp	r26, r22
 bd4:	b7 07       	cpc	r27, r23
 bd6:	10 f0       	brcs	.+4      	; 0xbdc <__udivmodhi4_ep>
 bd8:	a6 1b       	sub	r26, r22
 bda:	b7 0b       	sbc	r27, r23

00000bdc <__udivmodhi4_ep>:
 bdc:	88 1f       	adc	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	5a 95       	dec	r21
 be2:	a9 f7       	brne	.-22     	; 0xbce <__udivmodhi4_loop>
 be4:	80 95       	com	r24
 be6:	90 95       	com	r25
 be8:	bc 01       	movw	r22, r24
 bea:	cd 01       	movw	r24, r26
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
