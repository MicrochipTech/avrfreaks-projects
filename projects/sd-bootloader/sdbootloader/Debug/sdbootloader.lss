
sdbootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001694  00001728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000231  00800210  00800210  00001738  2**0
                  ALLOC
  3 .stab         0000081c  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000149  00000000  00000000  00001f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002b0  00000000  00000000  000020a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051b1  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001087  00000000  00000000  00007501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d0  00000000  00000000  00008588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a8  00000000  00000000  00009658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000187e  00000000  00000000  00009f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002da3  00000000  00000000  0000b77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000e521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      90:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      94:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      98:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      9c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      a0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      a4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      a8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      ac:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      b0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      b4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      b8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      bc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      c0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      c4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      c8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      cc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      d0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      d4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      d8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      dc:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      e0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>

000000e4 <_ZZN5Fat1610make83NameEPKcPhE3__c>:
      e4:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000f4 <_ZZN5Fat169writeln_PEPKcE3__c>:
      f4:	0d 0a 00 00                                         ....

000000f8 <__ctors_start>:
      f8:	29 09       	sbc	r18, r9

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d1 e2       	ldi	r29, 0x21	; 33
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_copy_data>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b2 e0       	ldi	r27, 0x02	; 2
     110:	e4 e9       	ldi	r30, 0x94	; 148
     112:	f6 e1       	ldi	r31, 0x16	; 22
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0b bf       	out	0x3b, r16	; 59
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
     11a:	07 90       	elpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	a0 31       	cpi	r26, 0x10	; 16
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>

00000124 <__do_clear_bss>:
     124:	14 e0       	ldi	r17, 0x04	; 4
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a1 34       	cpi	r26, 0x41	; 65
     130:	b1 07       	cpc	r27, r17
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>

00000134 <__do_global_ctors>:
     134:	10 e0       	ldi	r17, 0x00	; 0
     136:	ca ef       	ldi	r28, 0xFA	; 250
     138:	d0 e0       	ldi	r29, 0x00	; 0
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	06 c0       	rjmp	.+12     	; 0x14a <__do_global_ctors+0x16>
     13e:	22 97       	sbiw	r28, 0x02	; 2
     140:	01 09       	sbc	r16, r1
     142:	fe 01       	movw	r30, r28
     144:	0b bf       	out	0x3b, r16	; 59
     146:	0e 94 2e 0b 	call	0x165c	; 0x165c <__tablejump_elpm__>
     14a:	c8 3f       	cpi	r28, 0xF8	; 248
     14c:	d1 07       	cpc	r29, r17
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	08 07       	cpc	r16, r24
     152:	a9 f7       	brne	.-22     	; 0x13e <__do_global_ctors+0xa>
     154:	0e 94 8f 08 	call	0x111e	; 0x111e <main>
     158:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_exit>

0000015c <_Z10__jumpMainv>:

void __jumpMain	(void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

void __jumpMain(void)
{
	SPL = (RAMEND & 0xFF);
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	8d bf       	out	0x3d, r24	; 61
	SPH = (RAMEND >> 8);
     160:	81 e2       	ldi	r24, 0x21	; 33
     162:	8e bf       	out	0x3e, r24	; 62
	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
     164:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
     166:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
     168:	0c 94 8f 08 	jmp	0x111e	; 0x111e <main>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <_ZN5Fat1613cacheSetDirtyEv>:
      // start of new block don't need to read into cache
      if (!cacheFlush())  {
          lastError = 6;
          return -1;
      };
      cacheBlockNumber_ = lba;
     170:	80 91 16 02 	lds	r24, 0x0216
     174:	81 60       	ori	r24, 0x01	; 1
      cacheSetDirty();
     176:	80 93 16 02 	sts	0x0216, r24
     17a:	08 95       	ret

0000017c <_ZN5Fat1610make83NameEPKcPh>:
    } else {
      // rewrite part of block
      if (!cacheRawBlock(lba, CACHE_FOR_WRITE)) return -1;
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
     184:	fb 01       	movw	r30, r22
     186:	8b e0       	ldi	r24, 0x0B	; 11
     188:	90 e2       	ldi	r25, 0x20	; 32
     18a:	91 93       	st	Z+, r25
    }
    uint8_t* dst = cacheBuffer_.data + blockOffset;

    // max space in block
    uint16_t n = 512 - blockOffset;
     18c:	81 50       	subi	r24, 0x01	; 1
     18e:	e9 f7       	brne	.-6      	; 0x18a <_ZN5Fat1610make83NameEPKcPh+0xe>
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	17 e0       	ldi	r17, 0x07	; 7
     194:	28 c0       	rjmp	.+80     	; 0x1e6 <_ZN5Fat1610make83NameEPKcPh+0x6a>
     196:	4e 32       	cpi	r20, 0x2E	; 46
     198:	41 f4       	brne	.+16     	; 0x1aa <_ZN5Fat1610make83NameEPKcPh+0x2e>
     19a:	1a 30       	cpi	r17, 0x0A	; 10
     19c:	61 f1       	breq	.+88     	; 0x1f6 <_ZN5Fat1610make83NameEPKcPh+0x7a>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // copy data to cache
    memcpy(dst, src, n);
     19e:	58 e0       	ldi	r21, 0x08	; 8
     1a0:	1a e0       	ldi	r17, 0x0A	; 10
     1a2:	21 c0       	rjmp	.+66     	; 0x1e6 <_ZN5Fat1610make83NameEPKcPh+0x6a>
     1a4:	84 17       	cp	r24, r20
     1a6:	19 f4       	brne	.+6      	; 0x1ae <_ZN5Fat1610make83NameEPKcPh+0x32>
     1a8:	26 c0       	rjmp	.+76     	; 0x1f6 <_ZN5Fat1610make83NameEPKcPh+0x7a>
     1aa:	24 ee       	ldi	r18, 0xE4	; 228

    curPosition_ += n;
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	c9 01       	movw	r24, r18
     1b0:	aa 27       	eor	r26, r26
     1b2:	97 fd       	sbrc	r25, 7
     1b4:	a0 95       	com	r26
     1b6:	ba 2f       	mov	r27, r26
     1b8:	2f 5f       	subi	r18, 0xFF	; 255
     1ba:	3f 4f       	sbci	r19, 0xFF	; 255
     1bc:	ab bf       	out	0x3b, r26	; 59
     1be:	fc 01       	movw	r30, r24
     1c0:	87 91       	elpm	r24, Z+
     1c2:	88 23       	and	r24, r24
     1c4:	79 f7       	brne	.-34     	; 0x1a4 <_ZN5Fat1610make83NameEPKcPh+0x28>
     1c6:	15 17       	cp	r17, r21
     1c8:	b0 f0       	brcs	.+44     	; 0x1f6 <_ZN5Fat1610make83NameEPKcPh+0x7a>
     1ca:	41 32       	cpi	r20, 0x21	; 33
    nToWrite -= n;
     1cc:	a0 f0       	brcs	.+40     	; 0x1f6 <_ZN5Fat1610make83NameEPKcPh+0x7a>
     1ce:	4f 37       	cpi	r20, 0x7F	; 127
    src += n;
     1d0:	90 f4       	brcc	.+36     	; 0x1f6 <_ZN5Fat1610make83NameEPKcPh+0x7a>
     1d2:	fb 01       	movw	r30, r22
     1d4:	e5 0f       	add	r30, r21
     1d6:	f1 1d       	adc	r31, r1
     1d8:	84 2f       	mov	r24, r20
     1da:	81 56       	subi	r24, 0x61	; 97
     1dc:	8a 31       	cpi	r24, 0x1A	; 26
      lastError = 2;
      return -1;
  };

  }
  while (nToWrite > 0) {
     1de:	08 f4       	brcc	.+2      	; 0x1e2 <_ZN5Fat1610make83NameEPKcPh+0x66>
     1e0:	40 52       	subi	r20, 0x20	; 32
     1e2:	40 83       	st	Z, r20
     1e4:	5f 5f       	subi	r21, 0xFF	; 255

    curPosition_ += n;
    nToWrite -= n;
    src += n;
  }
  if (curPosition_ > fileSize_) {
     1e6:	49 91       	ld	r20, Y+
     1e8:	44 23       	and	r20, r20
     1ea:	a9 f6       	brne	.-86     	; 0x196 <_ZN5Fat1610make83NameEPKcPh+0x1a>
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	fb 01       	movw	r30, r22
     1f0:	90 81       	ld	r25, Z
     1f2:	90 32       	cpi	r25, 0x20	; 32
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <_ZN5Fat1610make83NameEPKcPh+0x7c>
     1f6:	80 e0       	ldi	r24, 0x00	; 0
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	08 95       	ret

00000200 <_ZN5Fat1610cacheFlushEv>:
     200:	80 91 16 02 	lds	r24, 0x0216
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
     204:	88 23       	and	r24, r24
     206:	b1 f1       	breq	.+108    	; 0x274 <_ZN5Fat1610cacheFlushEv+0x74>
     208:	40 91 00 02 	lds	r20, 0x0200
     20c:	50 91 01 02 	lds	r21, 0x0201
     210:	60 91 02 02 	lds	r22, 0x0202
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     214:	70 91 03 02 	lds	r23, 0x0203
     218:	80 91 17 04 	lds	r24, 0x0417
  }

  if (flags_ & O_SYNC) {
     21c:	90 91 18 04 	lds	r25, 0x0418
     220:	27 e1       	ldi	r18, 0x17	; 23
     222:	32 e0       	ldi	r19, 0x02	; 2
    if (!sync()) {
     224:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN6SdCard10writeBlockEmPKh>
     228:	88 23       	and	r24, r24
     22a:	31 f1       	breq	.+76     	; 0x278 <_ZN5Fat1610cacheFlushEv+0x78>
     22c:	40 91 12 02 	lds	r20, 0x0212
      lastError = 7;
     230:	50 91 13 02 	lds	r21, 0x0213
     234:	60 91 14 02 	lds	r22, 0x0214
      return -1;
    };
  }
  return nbyte;
     238:	70 91 15 02 	lds	r23, 0x0215
      };
      cacheBlockNumber_ = lba;
      cacheSetDirty();
    } else {
      // rewrite part of block
      if (!cacheRawBlock(lba, CACHE_FOR_WRITE)) return -1;
     23c:	41 15       	cp	r20, r1
    };
  }
  return nbyte;

  return -1;
}
     23e:	51 05       	cpc	r21, r1
     240:	61 05       	cpc	r22, r1
     242:	71 05       	cpc	r23, r1
     244:	91 f0       	breq	.+36     	; 0x26a <_ZN5Fat1610cacheFlushEv+0x6a>
     246:	80 91 17 04 	lds	r24, 0x0417
     24a:	90 91 18 04 	lds	r25, 0x0418
     24e:	27 e1       	ldi	r18, 0x17	; 23
     250:	32 e0       	ldi	r19, 0x02	; 2
     252:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN6SdCard10writeBlockEmPKh>
     256:	88 23       	and	r24, r24
     258:	59 f0       	breq	.+22     	; 0x270 <_ZN5Fat1610cacheFlushEv+0x70>
     25a:	10 92 12 02 	sts	0x0212, r1
     25e:	10 92 13 02 	sts	0x0213, r1
     262:	10 92 14 02 	sts	0x0214, r1
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!rawDev_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
     266:	10 92 15 02 	sts	0x0215, r1
    }
    cacheDirty_ = 0;
     26a:	10 92 16 02 	sts	0x0216, r1
     26e:	02 c0       	rjmp	.+4      	; 0x274 <_ZN5Fat1610cacheFlushEv+0x74>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!rawDev_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	08 95       	ret
//------------------------------------------------------------------------------
//
uint8_t Fat16::cacheFlush(void) {
  if (cacheDirty_) {
    if (!rawDev_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
     278:	80 e0       	ldi	r24, 0x00	; 0
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
}
     27a:	08 95       	ret

0000027c <_ZN5Fat1613cacheRawBlockEmh>:
//------------------------------------------------------------------------------
//
uint8_t Fat16::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	cf 93       	push	r28
     286:	6b 01       	movw	r12, r22
     288:	7c 01       	movw	r14, r24
     28a:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
     28c:	80 91 00 02 	lds	r24, 0x0200
     290:	90 91 01 02 	lds	r25, 0x0201
     294:	a0 91 02 02 	lds	r26, 0x0202
     298:	b0 91 03 02 	lds	r27, 0x0203
     29c:	8c 15       	cp	r24, r12
     29e:	9d 05       	cpc	r25, r13
     2a0:	ae 05       	cpc	r26, r14
     2a2:	bf 05       	cpc	r27, r15
     2a4:	c1 f0       	breq	.+48     	; 0x2d6 <_ZN5Fat1613cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
     2a6:	0e 94 00 01 	call	0x200	; 0x200 <_ZN5Fat1610cacheFlushEv>
     2aa:	88 23       	and	r24, r24
     2ac:	d9 f0       	breq	.+54     	; 0x2e4 <_ZN5Fat1613cacheRawBlockEmh+0x68>
    if (!rawDev_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     2ae:	80 91 17 04 	lds	r24, 0x0417
     2b2:	90 91 18 04 	lds	r25, 0x0418
     2b6:	b7 01       	movw	r22, r14
     2b8:	a6 01       	movw	r20, r12
     2ba:	27 e1       	ldi	r18, 0x17	; 23
     2bc:	32 e0       	ldi	r19, 0x02	; 2
     2be:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_ZN6SdCard9readBlockEmPh>
     2c2:	88 23       	and	r24, r24
     2c4:	79 f0       	breq	.+30     	; 0x2e4 <_ZN5Fat1613cacheRawBlockEmh+0x68>
    cacheBlockNumber_ = blockNumber;
     2c6:	c0 92 00 02 	sts	0x0200, r12
     2ca:	d0 92 01 02 	sts	0x0201, r13
     2ce:	e0 92 02 02 	sts	0x0202, r14
     2d2:	f0 92 03 02 	sts	0x0203, r15
  }
  cacheDirty_ |= action;
     2d6:	80 91 16 02 	lds	r24, 0x0216
     2da:	8c 2b       	or	r24, r28
     2dc:	80 93 16 02 	sts	0x0216, r24
  return true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <_ZN5Fat1613cacheRawBlockEmh+0x6a>
//------------------------------------------------------------------------------
//
uint8_t Fat16::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!rawDev_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
     2e6:	cf 91       	pop	r28
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	08 95       	ret

000002f2 <_ZN5Fat1613cacheDirEntryEjh>:
  curCluster_ = freeCluster;
  return true;
}
//------------------------------------------------------------------------------
//
dir_t* Fat16::cacheDirEntry(uint16_t index, uint8_t action) {
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	46 2f       	mov	r20, r22
  if (index >= rootDirEntryCount_) return NULL;
     2fe:	80 91 29 04 	lds	r24, 0x0429
     302:	90 91 2a 04 	lds	r25, 0x042A
     306:	c8 17       	cp	r28, r24
     308:	d9 07       	cpc	r29, r25
     30a:	28 f5       	brcc	.+74     	; 0x356 <_ZN5Fat1613cacheDirEntryEjh+0x64>
  if (!cacheRawBlock(rootDirStartBlock_ + (index >> 4), action)) return NULL;
     30c:	ce 01       	movw	r24, r28
     30e:	34 e0       	ldi	r19, 0x04	; 4
     310:	96 95       	lsr	r25
     312:	87 95       	ror	r24
     314:	3a 95       	dec	r19
     316:	e1 f7       	brne	.-8      	; 0x310 <_ZN5Fat1613cacheDirEntryEjh+0x1e>
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	00 91 1d 04 	lds	r16, 0x041D
     320:	10 91 1e 04 	lds	r17, 0x041E
     324:	20 91 1f 04 	lds	r18, 0x041F
     328:	30 91 20 04 	lds	r19, 0x0420
     32c:	80 0f       	add	r24, r16
     32e:	91 1f       	adc	r25, r17
     330:	a2 1f       	adc	r26, r18
     332:	b3 1f       	adc	r27, r19
     334:	bc 01       	movw	r22, r24
     336:	cd 01       	movw	r24, r26
     338:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     33c:	88 23       	and	r24, r24
     33e:	59 f0       	breq	.+22     	; 0x356 <_ZN5Fat1613cacheDirEntryEjh+0x64>
  return &cacheBuffer_.dir[index & 0XF];
     340:	ce 01       	movw	r24, r28
     342:	8f 70       	andi	r24, 0x0F	; 15
     344:	90 70       	andi	r25, 0x00	; 0
     346:	25 e0       	ldi	r18, 0x05	; 5
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	2a 95       	dec	r18
     34e:	e1 f7       	brne	.-8      	; 0x348 <_ZN5Fat1613cacheDirEntryEjh+0x56>
     350:	89 5e       	subi	r24, 0xE9	; 233
     352:	9d 4f       	sbci	r25, 0xFD	; 253
     354:	02 c0       	rjmp	.+4      	; 0x35a <_ZN5Fat1613cacheDirEntryEjh+0x68>
}
//------------------------------------------------------------------------------
//
dir_t* Fat16::cacheDirEntry(uint16_t index, uint8_t action) {
  if (index >= rootDirEntryCount_) return NULL;
  if (!cacheRawBlock(rootDirStartBlock_ + (index >> 4), action)) return NULL;
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
  return &cacheBuffer_.dir[index & 0XF];
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	08 95       	ret

00000364 <_ZN5Fat166fatGetEjPj>:
  if (!p) return false;
  memcpy(dir, p, sizeof(dir_t));
  return true;
}
//------------------------------------------------------------------------------
uint8_t Fat16::fatGet(fat_t cluster, fat_t* value) {
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	8b 01       	movw	r16, r22
  if (cluster > (clusterCount_ + 1)) return false;
     370:	80 91 25 04 	lds	r24, 0x0425
     374:	90 91 26 04 	lds	r25, 0x0426
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	8c 17       	cp	r24, r28
     37c:	9d 07       	cpc	r25, r29
     37e:	80 f1       	brcs	.+96     	; 0x3e0 <_ZN5Fat166fatGetEjPj+0x7c>
  uint32_t lba = fatStartBlock_ + (cluster >> 8);
     380:	8d 2f       	mov	r24, r29
     382:	99 27       	eor	r25, r25
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	40 91 21 04 	lds	r20, 0x0421
     38c:	50 91 22 04 	lds	r21, 0x0422
     390:	60 91 23 04 	lds	r22, 0x0423
     394:	70 91 24 04 	lds	r23, 0x0424
     398:	84 0f       	add	r24, r20
     39a:	95 1f       	adc	r25, r21
     39c:	a6 1f       	adc	r26, r22
     39e:	b7 1f       	adc	r27, r23
  if (lba != cacheBlockNumber_) {
     3a0:	40 91 00 02 	lds	r20, 0x0200
     3a4:	50 91 01 02 	lds	r21, 0x0201
     3a8:	60 91 02 02 	lds	r22, 0x0202
     3ac:	70 91 03 02 	lds	r23, 0x0203
     3b0:	84 17       	cp	r24, r20
     3b2:	95 07       	cpc	r25, r21
     3b4:	a6 07       	cpc	r26, r22
     3b6:	b7 07       	cpc	r27, r23
     3b8:	39 f0       	breq	.+14     	; 0x3c8 <_ZN5Fat166fatGetEjPj+0x64>
    if (!cacheRawBlock(lba)) return false;
     3ba:	bc 01       	movw	r22, r24
     3bc:	cd 01       	movw	r24, r26
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     3c4:	88 23       	and	r24, r24
     3c6:	61 f0       	breq	.+24     	; 0x3e0 <_ZN5Fat166fatGetEjPj+0x7c>
  }
  *value = cacheBuffer_.fat[cluster & 0XFF];
     3c8:	d0 70       	andi	r29, 0x00	; 0
     3ca:	cc 0f       	add	r28, r28
     3cc:	dd 1f       	adc	r29, r29
     3ce:	c9 5e       	subi	r28, 0xE9	; 233
     3d0:	dd 4f       	sbci	r29, 0xFD	; 253
     3d2:	88 81       	ld	r24, Y
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
     3d6:	f8 01       	movw	r30, r16
     3d8:	91 83       	std	Z+1, r25	; 0x01
     3da:	80 83       	st	Z, r24
  return true;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <_ZN5Fat166fatGetEjPj+0x7e>
  memcpy(dir, p, sizeof(dir_t));
  return true;
}
//------------------------------------------------------------------------------
uint8_t Fat16::fatGet(fat_t cluster, fat_t* value) {
  if (cluster > (clusterCount_ + 1)) return false;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba)) return false;
  }
  *value = cacheBuffer_.fat[cluster & 0XFF];
  return true;
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <_ZN5Fat166fatPutEjj>:
//------------------------------------------------------------------------------
uint8_t Fat16::fatPut(fat_t cluster, fat_t value) {
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
     3fe:	8b 01       	movw	r16, r22
  if (cluster < 2) return false;
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	91 05       	cpc	r25, r1
     404:	08 f4       	brcc	.+2      	; 0x408 <_ZN5Fat166fatPutEjj+0x1c>
     406:	4e c0       	rjmp	.+156    	; 0x4a4 <_ZN5Fat166fatPutEjj+0xb8>
  if (cluster > (clusterCount_ + 1)) return false;
     408:	80 91 25 04 	lds	r24, 0x0425
     40c:	90 91 26 04 	lds	r25, 0x0426
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	8c 17       	cp	r24, r28
     414:	9d 07       	cpc	r25, r29
     416:	08 f4       	brcc	.+2      	; 0x41a <_ZN5Fat166fatPutEjj+0x2e>
     418:	45 c0       	rjmp	.+138    	; 0x4a4 <_ZN5Fat166fatPutEjj+0xb8>
  uint32_t lba = fatStartBlock_ + (cluster >> 8);
     41a:	cd 2e       	mov	r12, r29
     41c:	dd 24       	eor	r13, r13
     41e:	ee 24       	eor	r14, r14
     420:	ff 24       	eor	r15, r15
     422:	80 91 21 04 	lds	r24, 0x0421
     426:	90 91 22 04 	lds	r25, 0x0422
     42a:	a0 91 23 04 	lds	r26, 0x0423
     42e:	b0 91 24 04 	lds	r27, 0x0424
     432:	c8 0e       	add	r12, r24
     434:	d9 1e       	adc	r13, r25
     436:	ea 1e       	adc	r14, r26
     438:	fb 1e       	adc	r15, r27
  if (lba != cacheBlockNumber_) {
     43a:	80 91 00 02 	lds	r24, 0x0200
     43e:	90 91 01 02 	lds	r25, 0x0201
     442:	a0 91 02 02 	lds	r26, 0x0202
     446:	b0 91 03 02 	lds	r27, 0x0203
     44a:	c8 16       	cp	r12, r24
     44c:	d9 06       	cpc	r13, r25
     44e:	ea 06       	cpc	r14, r26
     450:	fb 06       	cpc	r15, r27
     452:	39 f0       	breq	.+14     	; 0x462 <_ZN5Fat166fatPutEjj+0x76>
    if (!cacheRawBlock(lba)) return false;
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     45e:	88 23       	and	r24, r24
     460:	09 f1       	breq	.+66     	; 0x4a4 <_ZN5Fat166fatPutEjj+0xb8>
  }
  cacheBuffer_.fat[cluster & 0XFF] = value;
     462:	d0 70       	andi	r29, 0x00	; 0
     464:	cc 0f       	add	r28, r28
     466:	dd 1f       	adc	r29, r29
     468:	c9 5e       	subi	r28, 0xE9	; 233
     46a:	dd 4f       	sbci	r29, 0xFD	; 253
     46c:	19 83       	std	Y+1, r17	; 0x01
     46e:	08 83       	st	Y, r16
  cacheSetDirty();
     470:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN5Fat1613cacheSetDirtyEv>
  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     474:	80 91 2c 04 	lds	r24, 0x042C
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	90 f0       	brcs	.+36     	; 0x4a0 <_ZN5Fat166fatPutEjj+0xb4>
     47c:	80 91 27 04 	lds	r24, 0x0427
     480:	90 91 28 04 	lds	r25, 0x0428
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	8c 0d       	add	r24, r12
     48a:	9d 1d       	adc	r25, r13
     48c:	ae 1d       	adc	r26, r14
     48e:	bf 1d       	adc	r27, r15
     490:	80 93 12 02 	sts	0x0212, r24
     494:	90 93 13 02 	sts	0x0213, r25
     498:	a0 93 14 02 	sts	0x0214, r26
     49c:	b0 93 15 02 	sts	0x0215, r27
  return true;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <_ZN5Fat166fatPutEjj+0xba>
  return true;
}
//------------------------------------------------------------------------------
uint8_t Fat16::fatPut(fat_t cluster, fat_t value) {
  if (cluster < 2) return false;
  if (cluster > (clusterCount_ + 1)) return false;
     4a4:	80 e0       	ldi	r24, 0x00	; 0
  cacheBuffer_.fat[cluster & 0XFF] = value;
  cacheSetDirty();
  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	08 95       	ret

000004b8 <_ZN5Fat169freeChainEj>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t Fat16::freeChain(fat_t cluster) {
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	0f 92       	push	r0
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	8b 01       	movw	r16, r22
  while (1) {
    fat_t next;
    if (!fatGet(cluster, &next)) return false;
     4ca:	c8 01       	movw	r24, r16
     4cc:	be 01       	movw	r22, r28
     4ce:	6f 5f       	subi	r22, 0xFF	; 255
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN5Fat166fatGetEjPj>
     4d6:	88 23       	and	r24, r24
     4d8:	79 f0       	breq	.+30     	; 0x4f8 <_ZN5Fat169freeChainEj+0x40>
    if (!fatPut(cluster, 0)) return false;
     4da:	c8 01       	movw	r24, r16
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN5Fat166fatPutEjj>
     4e4:	88 23       	and	r24, r24
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <_ZN5Fat169freeChainEj+0x40>
    if (isEOC(next)) return true;
     4e8:	09 81       	ldd	r16, Y+1	; 0x01
     4ea:	1a 81       	ldd	r17, Y+2	; 0x02
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	08 3f       	cpi	r16, 0xF8	; 248
     4f0:	18 07       	cpc	r17, r24
     4f2:	58 f3       	brcs	.-42     	; 0x4ca <_ZN5Fat169freeChainEj+0x12>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <_ZN5Fat169freeChainEj+0x42>
// free a cluster chain
uint8_t Fat16::freeChain(fat_t cluster) {
  while (1) {
    fat_t next;
    if (!fatGet(cluster, &next)) return false;
    if (!fatPut(cluster, 0)) return false;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
    if (isEOC(next)) return true;
    cluster = next;
  }
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <_ZN5Fat164initEP6SdCardh>:
 * failure include not finding a valid FAT16 file system in the
 * specified partition, a call to init() after a volume has
 * been successful initialized or an I/O error.
 *
 */
uint8_t Fat16::init(SdCard* dev, uint8_t part) {
     508:	4f 92       	push	r4
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	c6 2f       	mov	r28, r22
  // error if invalid partition
  if (part > 4) return false;
     52a:	65 30       	cpi	r22, 0x05	; 5
     52c:	08 f0       	brcs	.+2      	; 0x530 <_ZN5Fat164initEP6SdCardh+0x28>
     52e:	e6 c0       	rjmp	.+460    	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
  rawDev_ = dev;
     530:	90 93 18 04 	sts	0x0418, r25
     534:	80 93 17 04 	sts	0x0417, r24
  uint32_t volumeStartBlock = 0;
  // if part == 0 assume super floppy with FAT16 boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
     538:	66 23       	and	r22, r22
     53a:	b9 f0       	breq	.+46     	; 0x56a <_ZN5Fat164initEP6SdCardh+0x62>
    if (!cacheRawBlock(volumeStartBlock)) return false;
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	cb 01       	movw	r24, r22
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     548:	88 23       	and	r24, r24
     54a:	09 f4       	brne	.+2      	; 0x54e <_ZN5Fat164initEP6SdCardh+0x46>
     54c:	d7 c0       	rjmp	.+430    	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
    volumeStartBlock = cacheBuffer_.mbr.part[part - 1].firstSector;
     54e:	ec 2f       	mov	r30, r28
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	8a 95       	dec	r24
     55a:	e1 f7       	brne	.-8      	; 0x554 <_ZN5Fat164initEP6SdCardh+0x4c>
     55c:	e3 53       	subi	r30, 0x33	; 51
     55e:	fc 4f       	sbci	r31, 0xFC	; 252
     560:	c0 80       	ld	r12, Z
     562:	d1 80       	ldd	r13, Z+1	; 0x01
     564:	e2 80       	ldd	r14, Z+2	; 0x02
     566:	f3 80       	ldd	r15, Z+3	; 0x03
     568:	03 c0       	rjmp	.+6      	; 0x570 <_ZN5Fat164initEP6SdCardh+0x68>
 */
uint8_t Fat16::init(SdCard* dev, uint8_t part) {
  // error if invalid partition
  if (part > 4) return false;
  rawDev_ = dev;
  uint32_t volumeStartBlock = 0;
     56a:	cc 24       	eor	r12, r12
     56c:	dd 24       	eor	r13, r13
     56e:	76 01       	movw	r14, r12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (!cacheRawBlock(volumeStartBlock)) return false;
    volumeStartBlock = cacheBuffer_.mbr.part[part - 1].firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock)) return false;
     570:	c7 01       	movw	r24, r14
     572:	b6 01       	movw	r22, r12
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <_ZN5Fat164initEP6SdCardh+0x78>
     57e:	be c0       	rjmp	.+380    	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
  // check boot block signature
  if (cacheBuffer_.data[510] != BOOTSIG0 ||
     580:	80 91 15 04 	lds	r24, 0x0415
     584:	85 35       	cpi	r24, 0x55	; 85
     586:	09 f0       	breq	.+2      	; 0x58a <_ZN5Fat164initEP6SdCardh+0x82>
     588:	b9 c0       	rjmp	.+370    	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     58a:	80 91 16 04 	lds	r24, 0x0416
     58e:	8a 3a       	cpi	r24, 0xAA	; 170
     590:	09 f0       	breq	.+2      	; 0x594 <_ZN5Fat164initEP6SdCardh+0x8c>
     592:	b4 c0       	rjmp	.+360    	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
      cacheBuffer_.data[511] != BOOTSIG1) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  fatCount_ = bpb->fatCount;
     594:	d0 91 27 02 	lds	r29, 0x0227
     598:	d0 93 2c 04 	sts	0x042C, r29
  blocksPerCluster_ = bpb->sectorsPerCluster;
     59c:	c0 91 24 02 	lds	r28, 0x0224
     5a0:	c0 93 2b 04 	sts	0x042B, r28
  blocksPerFat_ = bpb->sectorsPerFat16;
     5a4:	60 90 2d 02 	lds	r6, 0x022D
     5a8:	70 90 2e 02 	lds	r7, 0x022E
     5ac:	70 92 28 04 	sts	0x0428, r7
     5b0:	60 92 27 04 	sts	0x0427, r6
  rootDirEntryCount_ = bpb->rootDirEntryCount;
     5b4:	e0 91 28 02 	lds	r30, 0x0228
     5b8:	f0 91 29 02 	lds	r31, 0x0229
     5bc:	f0 93 2a 04 	sts	0x042A, r31
     5c0:	e0 93 29 04 	sts	0x0429, r30
  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
     5c4:	40 90 25 02 	lds	r4, 0x0225
     5c8:	50 90 26 02 	lds	r5, 0x0226
     5cc:	a2 01       	movw	r20, r4
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	4c 0d       	add	r20, r12
     5d4:	5d 1d       	adc	r21, r13
     5d6:	6e 1d       	adc	r22, r14
     5d8:	7f 1d       	adc	r23, r15
     5da:	40 93 21 04 	sts	0x0421, r20
     5de:	50 93 22 04 	sts	0x0422, r21
     5e2:	60 93 23 04 	sts	0x0423, r22
     5e6:	70 93 24 04 	sts	0x0424, r23
  rootDirStartBlock_ = fatStartBlock_ + bpb->fatCount*bpb->sectorsPerFat16;
     5ea:	8d 2f       	mov	r24, r29
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	86 9d       	mul	r24, r6
     5f0:	90 01       	movw	r18, r0
     5f2:	87 9d       	mul	r24, r7
     5f4:	30 0d       	add	r19, r0
     5f6:	96 9d       	mul	r25, r6
     5f8:	30 0d       	add	r19, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	c9 01       	movw	r24, r18
     5fe:	a0 e0       	ldi	r26, 0x00	; 0
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	84 0f       	add	r24, r20
     604:	95 1f       	adc	r25, r21
     606:	a6 1f       	adc	r26, r22
     608:	b7 1f       	adc	r27, r23
     60a:	80 93 1d 04 	sts	0x041D, r24
     60e:	90 93 1e 04 	sts	0x041E, r25
     612:	a0 93 1f 04 	sts	0x041F, r26
     616:	b0 93 20 04 	sts	0x0420, r27
  dataStartBlock_ = rootDirStartBlock_
                    + ((32*bpb->rootDirEntryCount + 511)/512);
     61a:	af 01       	movw	r20, r30
     61c:	15 e0       	ldi	r17, 0x05	; 5
     61e:	44 0f       	add	r20, r20
     620:	55 1f       	adc	r21, r21
     622:	1a 95       	dec	r17
     624:	e1 f7       	brne	.-8      	; 0x61e <_ZN5Fat164initEP6SdCardh+0x116>
     626:	41 50       	subi	r20, 0x01	; 1
     628:	5e 4f       	sbci	r21, 0xFE	; 254
     62a:	45 2f       	mov	r20, r21
     62c:	55 27       	eor	r21, r21
     62e:	46 95       	lsr	r20
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	48 0f       	add	r20, r24
     636:	59 1f       	adc	r21, r25
     638:	6a 1f       	adc	r22, r26
     63a:	7b 1f       	adc	r23, r27
     63c:	40 93 19 04 	sts	0x0419, r20
     640:	50 93 1a 04 	sts	0x041A, r21
     644:	60 93 1b 04 	sts	0x041B, r22
     648:	70 93 1c 04 	sts	0x041C, r23
  uint32_t totalBlocks = bpb->totalSectors16 ?
                               bpb->totalSectors16 : bpb->totalSectors32;
     64c:	80 91 2a 02 	lds	r24, 0x022A
     650:	90 91 2b 02 	lds	r25, 0x022B
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	21 f0       	breq	.+8      	; 0x660 <_ZN5Fat164initEP6SdCardh+0x158>
     658:	4c 01       	movw	r8, r24
     65a:	aa 24       	eor	r10, r10
     65c:	bb 24       	eor	r11, r11
     65e:	08 c0       	rjmp	.+16     	; 0x670 <_ZN5Fat164initEP6SdCardh+0x168>
     660:	80 90 37 02 	lds	r8, 0x0237
     664:	90 90 38 02 	lds	r9, 0x0238
     668:	a0 90 39 02 	lds	r10, 0x0239
     66c:	b0 90 3a 02 	lds	r11, 0x023A
  clusterCount_ = (totalBlocks - (dataStartBlock_ - volumeStartBlock))
                  /bpb->sectorsPerCluster;
     670:	c4 1a       	sub	r12, r20
     672:	d5 0a       	sbc	r13, r21
     674:	e6 0a       	sbc	r14, r22
     676:	f7 0a       	sbc	r15, r23
     678:	c8 0c       	add	r12, r8
     67a:	d9 1c       	adc	r13, r9
     67c:	ea 1c       	adc	r14, r10
     67e:	fb 1c       	adc	r15, r11
     680:	2c 2f       	mov	r18, r28
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodsi4>
     690:	89 01       	movw	r16, r18
     692:	9a 01       	movw	r18, r20
     694:	c8 01       	movw	r24, r16
     696:	10 93 26 04 	sts	0x0426, r17
     69a:	00 93 25 04 	sts	0x0425, r16
  // verify valid FAT16 volume
  if (bpb->bytesPerSector != 512       // only allow 512 byte blocks
     69e:	20 91 22 02 	lds	r18, 0x0222
     6a2:	30 91 23 02 	lds	r19, 0x0223
     6a6:	42 e0       	ldi	r20, 0x02	; 2
     6a8:	20 30       	cpi	r18, 0x00	; 0
     6aa:	34 07       	cpc	r19, r20
     6ac:	39 f5       	brne	.+78     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6ae:	61 14       	cp	r6, r1
     6b0:	71 04       	cpc	r7, r1
     6b2:	21 f1       	breq	.+72     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6b4:	2f e0       	ldi	r18, 0x0F	; 15
     6b6:	85 3f       	cpi	r24, 0xF5	; 245
     6b8:	92 07       	cpc	r25, r18
     6ba:	00 f1       	brcs	.+64     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	84 16       	cp	r8, r20
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	94 06       	cpc	r9, r20
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	a4 06       	cpc	r10, r20
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	b4 06       	cpc	r11, r20
     6cc:	b8 f4       	brcc	.+46     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6ce:	41 14       	cp	r4, r1
     6d0:	51 04       	cpc	r5, r1
     6d2:	a1 f0       	breq	.+40     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6d4:	dd 23       	and	r29, r29
     6d6:	91 f0       	breq	.+36     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6d8:	89 2f       	mov	r24, r25
     6da:	99 27       	eor	r25, r25
     6dc:	68 16       	cp	r6, r24
     6de:	79 06       	cpc	r7, r25
     6e0:	68 f0       	brcs	.+26     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6e2:	cc 23       	and	r28, r28
     6e4:	59 f0       	breq	.+22     	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	8c 23       	and	r24, r28
     6ee:	9d 23       	and	r25, r29
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	21 f4       	brne	.+8      	; 0x6fc <_ZN5Fat164initEP6SdCardh+0x1f4>
        // power of 2 test
     || bpb->sectorsPerCluster & (bpb->sectorsPerCluster - 1)) {
    // not a usable FAT16 bpb
    return false;
  }
  volumeInitialized_ = 1;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 2d 04 	sts	0x042D, r24
  return true;
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <_ZN5Fat164initEP6SdCardh+0x1f6>
     || bpb->sectorsPerFat16 < (clusterCount_ >> 8)  // invalid volume
     || bpb->sectorsPerCluster == 0   // invalid volume
        // power of 2 test
     || bpb->sectorsPerCluster & (bpb->sectorsPerCluster - 1)) {
    // not a usable FAT16 bpb
    return false;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
  }
  volumeInitialized_ = 1;
  return true;
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	9f 90       	pop	r9
     714:	8f 90       	pop	r8
     716:	7f 90       	pop	r7
     718:	6f 90       	pop	r6
     71a:	5f 90       	pop	r5
     71c:	4f 90       	pop	r4
     71e:	08 95       	ret

00000720 <_ZN5Fat164readEPvj>:
 * if end of file is reached.
 * If an error occurs, read returns -1.  Possible errors include
 * read called before a file has been opened, the file has not been opened in
 * read mode, a corrupt file system, or an I/O error.
 */
int16_t Fat16::read(void* buf, uint16_t nbyte) {
     720:	4f 92       	push	r4
     722:	5f 92       	push	r5
     724:	6f 92       	push	r6
     726:	7f 92       	push	r7
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
     742:	fb 01       	movw	r30, r22
     744:	5a 01       	movw	r10, r20
  // convert void pointer to uin8_t pointer
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open for read
  if (!(flags_ & O_READ)) return -1;
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	80 ff       	sbrs	r24, 0
     74a:	a6 c0       	rjmp	.+332    	; 0x898 <_ZN5Fat164readEPvj+0x178>

  // don't read beyond end of file
  if ((curPosition_ + nbyte) > fileSize_) nbyte = fileSize_ - curPosition_;
     74c:	0c 85       	ldd	r16, Y+12	; 0x0c
     74e:	1d 85       	ldd	r17, Y+13	; 0x0d
     750:	2e 85       	ldd	r18, Y+14	; 0x0e
     752:	3f 85       	ldd	r19, Y+15	; 0x0f
     754:	4e 81       	ldd	r20, Y+6	; 0x06
     756:	5f 81       	ldd	r21, Y+7	; 0x07
     758:	68 85       	ldd	r22, Y+8	; 0x08
     75a:	79 85       	ldd	r23, Y+9	; 0x09
     75c:	c5 01       	movw	r24, r10
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	80 0f       	add	r24, r16
     764:	91 1f       	adc	r25, r17
     766:	a2 1f       	adc	r26, r18
     768:	b3 1f       	adc	r27, r19
     76a:	48 17       	cp	r20, r24
     76c:	59 07       	cpc	r21, r25
     76e:	6a 07       	cpc	r22, r26
     770:	7b 07       	cpc	r23, r27
     772:	18 f4       	brcc	.+6      	; 0x77a <_ZN5Fat164readEPvj+0x5a>
     774:	5a 01       	movw	r10, r20
     776:	a0 1a       	sub	r10, r16
     778:	b1 0a       	sbc	r11, r17

  // bytes left to read in loop
  uint16_t nToRead = nbyte;
     77a:	75 01       	movw	r14, r10
 * read called before a file has been opened, the file has not been opened in
 * read mode, a corrupt file system, or an I/O error.
 */
int16_t Fat16::read(void* buf, uint16_t nbyte) {
  // convert void pointer to uin8_t pointer
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
     77c:	4f 01       	movw	r8, r30
      if (curCluster_ == 0)
	  {
        curCluster_ = firstCluster_;
      } else
	  {
        if (!fatGet(curCluster_, &curCluster_)) return -1;
     77e:	4a e0       	ldi	r20, 0x0A	; 10
     780:	44 2e       	mov	r4, r20
     782:	51 2c       	mov	r5, r1
     784:	4c 0e       	add	r4, r28
     786:	5d 1e       	adc	r5, r29

    // location of data in cache
    uint8_t* src = cacheBuffer_.data + blockOffset;

    // max number of byte available in block
    uint16_t n = 512 - blockOffset;
     788:	61 2c       	mov	r6, r1
     78a:	52 e0       	ldi	r21, 0x02	; 2
     78c:	75 2e       	mov	r7, r21
  // don't read beyond end of file
  if ((curPosition_ + nbyte) > fileSize_) nbyte = fileSize_ - curPosition_;

  // bytes left to read in loop
  uint16_t nToRead = nbyte;
  while (nToRead > 0) {
     78e:	7e c0       	rjmp	.+252    	; 0x88c <_ZN5Fat164readEPvj+0x16c>
    uint8_t blkOfCluster = blockOfCluster(curPosition_);
     790:	8c 85       	ldd	r24, Y+12	; 0x0c
     792:	9d 85       	ldd	r25, Y+13	; 0x0d
     794:	ae 85       	ldd	r26, Y+14	; 0x0e
     796:	bf 85       	ldd	r27, Y+15	; 0x0f
	// protected function for calculating 8+3 file names
	static uint8_t make83Name(const char* str, uint8_t* name);
  // private functions for cache
  static uint8_t blockOfCluster(uint32_t position) {
    // depends on blocks per cluster being power of two
    return (position >> 9) & (blocksPerCluster_ - 1);
     798:	ac 01       	movw	r20, r24
     79a:	bd 01       	movw	r22, r26
     79c:	29 e0       	ldi	r18, 0x09	; 9
     79e:	76 95       	lsr	r23
     7a0:	67 95       	ror	r22
     7a2:	57 95       	ror	r21
     7a4:	47 95       	ror	r20
     7a6:	2a 95       	dec	r18
     7a8:	d1 f7       	brne	.-12     	; 0x79e <_ZN5Fat164readEPvj+0x7e>
     7aa:	00 91 2b 04 	lds	r16, 0x042B
     7ae:	01 50       	subi	r16, 0x01	; 1
     7b0:	04 23       	and	r16, r20
  }
  static uint16_t cacheDataOffset(uint32_t position) {return position & 0X1FF;}
     7b2:	3f ef       	ldi	r19, 0xFF	; 255
     7b4:	c3 2e       	mov	r12, r19
     7b6:	31 e0       	ldi	r19, 0x01	; 1
     7b8:	d3 2e       	mov	r13, r19
     7ba:	c8 22       	and	r12, r24
     7bc:	d9 22       	and	r13, r25
    uint16_t blockOffset = cacheDataOffset(curPosition_);
    if (blkOfCluster == 0 && blockOffset == 0)
     7be:	00 23       	and	r16, r16
     7c0:	e9 f4       	brne	.+58     	; 0x7fc <_ZN5Fat164readEPvj+0xdc>
     7c2:	c1 14       	cp	r12, r1
     7c4:	d1 04       	cpc	r13, r1
     7c6:	d1 f4       	brne	.+52     	; 0x7fc <_ZN5Fat164readEPvj+0xdc>
	{
      // start next cluster
      if (curCluster_ == 0)
     7c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     7ca:	9b 85       	ldd	r25, Y+11	; 0x0b
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	29 f4       	brne	.+10     	; 0x7da <_ZN5Fat164readEPvj+0xba>
	  {
        curCluster_ = firstCluster_;
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	9d 81       	ldd	r25, Y+5	; 0x05
     7d4:	9b 87       	std	Y+11, r25	; 0x0b
     7d6:	8a 87       	std	Y+10, r24	; 0x0a
     7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <_ZN5Fat164readEPvj+0xc6>
      } else
	  {
        if (!fatGet(curCluster_, &curCluster_)) return -1;
     7da:	b2 01       	movw	r22, r4
     7dc:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN5Fat166fatGetEjPj>
     7e0:	88 23       	and	r24, r24
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <_ZN5Fat164readEPvj+0xc6>
     7e4:	59 c0       	rjmp	.+178    	; 0x898 <_ZN5Fat164readEPvj+0x178>
      }
      // return error if bad cluster chain
      if (curCluster_ < 2 || isEOC(curCluster_)) return -1;
     7e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     7e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	91 05       	cpc	r25, r1
     7ee:	08 f4       	brcc	.+2      	; 0x7f2 <_ZN5Fat164readEPvj+0xd2>
     7f0:	53 c0       	rjmp	.+166    	; 0x898 <_ZN5Fat164readEPvj+0x178>
     7f2:	2f ef       	ldi	r18, 0xFF	; 255
     7f4:	88 3f       	cpi	r24, 0xF8	; 248
     7f6:	92 07       	cpc	r25, r18
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <_ZN5Fat164readEPvj+0xdc>
     7fa:	4e c0       	rjmp	.+156    	; 0x898 <_ZN5Fat164readEPvj+0x178>
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action = 0);
  static uint8_t cacheFlush(void);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
  static uint32_t dataBlockLba(fat_t cluster, uint8_t blockOfCluster) {
    return dataStartBlock_ + (uint32_t)(cluster - 2) * blocksPerCluster_
      + blockOfCluster;
     7fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fe:	9b 85       	ldd	r25, Y+11	; 0x0b
     800:	02 97       	sbiw	r24, 0x02	; 2
     802:	bc 01       	movw	r22, r24
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	20 91 2b 04 	lds	r18, 0x042B
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	0e 94 ed 0a 	call	0x15da	; 0x15da <__mulsi3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	40 91 19 04 	lds	r20, 0x0419
     81e:	50 91 1a 04 	lds	r21, 0x041A
     822:	60 91 1b 04 	lds	r22, 0x041B
     826:	70 91 1c 04 	lds	r23, 0x041C
     82a:	84 0f       	add	r24, r20
     82c:	95 1f       	adc	r25, r21
     82e:	a6 1f       	adc	r26, r22
     830:	b7 1f       	adc	r27, r23
     832:	80 0f       	add	r24, r16
     834:	91 1d       	adc	r25, r1
     836:	a1 1d       	adc	r26, r1
     838:	b1 1d       	adc	r27, r1
    }
    // cache data block
    if (!cacheRawBlock(dataBlockLba(curCluster_, blkOfCluster))) return -1;
     83a:	bc 01       	movw	r22, r24
     83c:	cd 01       	movw	r24, r26
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN5Fat1613cacheRawBlockEmh>
     844:	88 23       	and	r24, r24
     846:	41 f1       	breq	.+80     	; 0x898 <_ZN5Fat164readEPvj+0x178>

    // location of data in cache
    uint8_t* src = cacheBuffer_.data + blockOffset;

    // max number of byte available in block
    uint16_t n = 512 - blockOffset;
     848:	c3 01       	movw	r24, r6
     84a:	8c 19       	sub	r24, r12
     84c:	9d 09       	sbc	r25, r13
     84e:	87 01       	movw	r16, r14
     850:	8e 15       	cp	r24, r14
     852:	9f 05       	cpc	r25, r15
     854:	08 f4       	brcc	.+2      	; 0x858 <_ZN5Fat164readEPvj+0x138>
     856:	8c 01       	movw	r16, r24

    // lesser of available and amount to read
    if (n > nToRead) n = nToRead;

    // copy data to caller
    memcpy(dst, src, n);
     858:	b6 01       	movw	r22, r12
     85a:	69 5e       	subi	r22, 0xE9	; 233
     85c:	7d 4f       	sbci	r23, 0xFD	; 253
     85e:	c4 01       	movw	r24, r8
     860:	a8 01       	movw	r20, r16
     862:	0e 94 3f 0b 	call	0x167e	; 0x167e <memcpy>

    curPosition_ += n;
     866:	a8 01       	movw	r20, r16
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	8c 85       	ldd	r24, Y+12	; 0x0c
     86e:	9d 85       	ldd	r25, Y+13	; 0x0d
     870:	ae 85       	ldd	r26, Y+14	; 0x0e
     872:	bf 85       	ldd	r27, Y+15	; 0x0f
     874:	84 0f       	add	r24, r20
     876:	95 1f       	adc	r25, r21
     878:	a6 1f       	adc	r26, r22
     87a:	b7 1f       	adc	r27, r23
     87c:	8c 87       	std	Y+12, r24	; 0x0c
     87e:	9d 87       	std	Y+13, r25	; 0x0d
     880:	ae 87       	std	Y+14, r26	; 0x0e
     882:	bf 87       	std	Y+15, r27	; 0x0f
    dst += n;
     884:	80 0e       	add	r8, r16
     886:	91 1e       	adc	r9, r17
    nToRead -= n;
     888:	e0 1a       	sub	r14, r16
     88a:	f1 0a       	sbc	r15, r17
  // don't read beyond end of file
  if ((curPosition_ + nbyte) > fileSize_) nbyte = fileSize_ - curPosition_;

  // bytes left to read in loop
  uint16_t nToRead = nbyte;
  while (nToRead > 0) {
     88c:	e1 14       	cp	r14, r1
     88e:	f1 04       	cpc	r15, r1
     890:	09 f0       	breq	.+2      	; 0x894 <_ZN5Fat164readEPvj+0x174>
     892:	7e cf       	rjmp	.-260    	; 0x790 <_ZN5Fat164readEPvj+0x70>

    curPosition_ += n;
    dst += n;
    nToRead -= n;
  }
  return nbyte;
     894:	c5 01       	movw	r24, r10
     896:	02 c0       	rjmp	.+4      	; 0x89c <_ZN5Fat164readEPvj+0x17c>
      }
      // return error if bad cluster chain
      if (curCluster_ < 2 || isEOC(curCluster_)) return -1;
    }
    // cache data block
    if (!cacheRawBlock(dataBlockLba(curCluster_, blkOfCluster))) return -1;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	9f ef       	ldi	r25, 0xFF	; 255
    curPosition_ += n;
    dst += n;
    nToRead -= n;
  }
  return nbyte;
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	08 95       	ret

000008be <_ZN5Fat167readDirEP14directoryEntryPjh>:
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned if an error occurs or the end of the root directory is
 * reached.  On success, \a entry is set to the index of the found directory
 * entry.
 */
uint8_t Fat16::readDir(dir_t* dir, uint16_t* index, uint8_t skip) {
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	0f 92       	push	r0
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	f8 2e       	mov	r15, r24
     8d6:	e9 2e       	mov	r14, r25
     8d8:	8b 01       	movw	r16, r22
  dir_t* p;
  for (uint16_t i = *index; ; i++) {
     8da:	db 01       	movw	r26, r22
     8dc:	cd 90       	ld	r12, X+
     8de:	dc 90       	ld	r13, X
     8e0:	11 97       	sbiw	r26, 0x01	; 1
    if (i >= rootDirEntryCount_) return false;
     8e2:	80 91 29 04 	lds	r24, 0x0429
     8e6:	90 91 2a 04 	lds	r25, 0x042A
     8ea:	c8 16       	cp	r12, r24
     8ec:	d9 06       	cpc	r13, r25
     8ee:	28 f5       	brcc	.+74     	; 0x93a <_ZN5Fat167readDirEP14directoryEntryPjh+0x7c>
    if (!(p = cacheDirEntry(i))) return false;
     8f0:	c6 01       	movw	r24, r12
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	49 83       	std	Y+1, r20	; 0x01
     8f6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
     8fa:	fc 01       	movw	r30, r24
     8fc:	49 81       	ldd	r20, Y+1	; 0x01
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	e1 f0       	breq	.+56     	; 0x93a <_ZN5Fat167readDirEP14directoryEntryPjh+0x7c>

    // done if beyond last used entry
    if (p->name[0] == DIR_NAME_FREE) return false;
     902:	80 81       	ld	r24, Z
     904:	88 23       	and	r24, r24
     906:	c9 f0       	breq	.+50     	; 0x93a <_ZN5Fat167readDirEP14directoryEntryPjh+0x7c>

    // skip deleted entry
    if (p->name[0] == DIR_NAME_DELETED) continue;
     908:	85 3e       	cpi	r24, 0xE5	; 229
     90a:	99 f0       	breq	.+38     	; 0x932 <_ZN5Fat167readDirEP14directoryEntryPjh+0x74>

    // skip long names
    if ((p->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME) continue;
     90c:	83 85       	ldd	r24, Z+11	; 0x0b
     90e:	98 2f       	mov	r25, r24
     910:	9f 73       	andi	r25, 0x3F	; 63
     912:	9f 30       	cpi	r25, 0x0F	; 15
     914:	71 f0       	breq	.+28     	; 0x932 <_ZN5Fat167readDirEP14directoryEntryPjh+0x74>

    // skip if attribute match
    if (p->attributes & skip) continue;
     916:	84 23       	and	r24, r20
     918:	61 f4       	brne	.+24     	; 0x932 <_ZN5Fat167readDirEP14directoryEntryPjh+0x74>

    // return found index
    *index = i;
     91a:	d8 01       	movw	r26, r16
     91c:	cd 92       	st	X+, r12
     91e:	dc 92       	st	X, r13
    break;
  }
  memcpy(dir, p, sizeof(dir_t));
     920:	af 2d       	mov	r26, r15
     922:	be 2d       	mov	r27, r14
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	01 90       	ld	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	e1 f7       	brne	.-8      	; 0x926 <_ZN5Fat167readDirEP14directoryEntryPjh+0x68>
  return true;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	05 c0       	rjmp	.+10     	; 0x93c <_ZN5Fat167readDirEP14directoryEntryPjh+0x7e>
 * reached.  On success, \a entry is set to the index of the found directory
 * entry.
 */
uint8_t Fat16::readDir(dir_t* dir, uint16_t* index, uint8_t skip) {
  dir_t* p;
  for (uint16_t i = *index; ; i++) {
     932:	08 94       	sec
     934:	c1 1c       	adc	r12, r1
     936:	d1 1c       	adc	r13, r1
     938:	d4 cf       	rjmp	.-88     	; 0x8e2 <_ZN5Fat167readDirEP14directoryEntryPjh+0x24>
    if (i >= rootDirEntryCount_) return false;
    if (!(p = cacheDirEntry(i))) return false;

    // done if beyond last used entry
    if (p->name[0] == DIR_NAME_FREE) return false;
     93a:	80 e0       	ldi	r24, 0x00	; 0
    *index = i;
    break;
  }
  memcpy(dir, p, sizeof(dir_t));
  return true;
}
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <_ZN5Fat166removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is not open for write
 * or an I/O error occurred.
 */
uint8_t Fat16::remove(void) {
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	ec 01       	movw	r28, r24
  // error if file is not open for write
  if (!(flags_ & O_WRITE)) return false;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	81 ff       	sbrs	r24, 1
     95a:	18 c0       	rjmp	.+48     	; 0x98c <_ZN5Fat166removeEv+0x3c>
  if (firstCluster_) {
     95c:	6c 81       	ldd	r22, Y+4	; 0x04
     95e:	7d 81       	ldd	r23, Y+5	; 0x05
     960:	61 15       	cp	r22, r1
     962:	71 05       	cpc	r23, r1
     964:	29 f0       	breq	.+10     	; 0x970 <_ZN5Fat166removeEv+0x20>
    if (!freeChain(firstCluster_)) return false;
     966:	ce 01       	movw	r24, r28
     968:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Fat169freeChainEj>
     96c:	88 23       	and	r24, r24
     96e:	71 f0       	breq	.+28     	; 0x98c <_ZN5Fat166removeEv+0x3c>
  }
  dir_t* d = cacheDirEntry(dirEntryIndex_, CACHE_FOR_WRITE);
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	9b 81       	ldd	r25, Y+3	; 0x03
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
  if (!d) return false;
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	39 f0       	breq	.+14     	; 0x98c <_ZN5Fat166removeEv+0x3c>
  d->name[0] = DIR_NAME_DELETED;
     97e:	25 ee       	ldi	r18, 0xE5	; 229
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
  flags_ = 0;
     984:	19 82       	std	Y+1, r1	; 0x01
  return cacheFlush();
     986:	0e 94 00 01 	call	0x200	; 0x200 <_ZN5Fat1610cacheFlushEv>
     98a:	01 c0       	rjmp	.+2      	; 0x98e <_ZN5Fat166removeEv+0x3e>
  if (!(flags_ & O_WRITE)) return false;
  if (firstCluster_) {
    if (!freeChain(firstCluster_)) return false;
  }
  dir_t* d = cacheDirEntry(dirEntryIndex_, CACHE_FOR_WRITE);
  if (!d) return false;
     98c:	80 e0       	ldi	r24, 0x00	; 0
  d->name[0] = DIR_NAME_DELETED;
  flags_ = 0;
  return cacheFlush();
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <_ZN5Fat167seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Fat16::seekSet(uint32_t pos) {
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
     9ae:	6a 01       	movw	r12, r20
     9b0:	7b 01       	movw	r14, r22
  }
  /**
   * Checks the file's open/closed status for this instance of Fat16.
   * \return The value true if a file is open otherwise false;
   */
  uint8_t isOpen(void) const {return (flags_ & O_ACCMODE) != 0;}
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	83 70       	andi	r24, 0x03	; 3
     9b8:	90 70       	andi	r25, 0x00	; 0
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <_ZN5Fat167seekSetEm+0x2c>
     9be:	68 c0       	rjmp	.+208    	; 0xa90 <_ZN5Fat167seekSetEm+0xfc>
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	9f 81       	ldd	r25, Y+7	; 0x07
     9c4:	a8 85       	ldd	r26, Y+8	; 0x08
     9c6:	b9 85       	ldd	r27, Y+9	; 0x09
     9c8:	84 17       	cp	r24, r20
     9ca:	95 07       	cpc	r25, r21
     9cc:	a6 07       	cpc	r26, r22
     9ce:	b7 07       	cpc	r27, r23
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <_ZN5Fat167seekSetEm+0x40>
     9d2:	5e c0       	rjmp	.+188    	; 0xa90 <_ZN5Fat167seekSetEm+0xfc>
     9d4:	6b c0       	rjmp	.+214    	; 0xaac <_ZN5Fat167seekSetEm+0x118>
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
     9d6:	1b 86       	std	Y+11, r1	; 0x0b
     9d8:	1a 86       	std	Y+10, r1	; 0x0a
    curPosition_ = 0;
     9da:	1c 86       	std	Y+12, r1	; 0x0c
     9dc:	1d 86       	std	Y+13, r1	; 0x0d
     9de:	1e 86       	std	Y+14, r1	; 0x0e
     9e0:	1f 86       	std	Y+15, r1	; 0x0f
     9e2:	54 c0       	rjmp	.+168    	; 0xa8c <_ZN5Fat167seekSetEm+0xf8>
    return true;
  }
  fat_t n = ((pos - 1) >> 9)/blocksPerCluster_;
     9e4:	80 90 2b 04 	lds	r8, 0x042B
     9e8:	99 24       	eor	r9, r9
     9ea:	aa 24       	eor	r10, r10
     9ec:	bb 24       	eor	r11, r11
     9ee:	d7 01       	movw	r26, r14
     9f0:	c6 01       	movw	r24, r12
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	f9 e0       	ldi	r31, 0x09	; 9
     9fa:	b6 95       	lsr	r27
     9fc:	a7 95       	ror	r26
     9fe:	97 95       	ror	r25
     a00:	87 95       	ror	r24
     a02:	fa 95       	dec	r31
     a04:	d1 f7       	brne	.-12     	; 0x9fa <_ZN5Fat167seekSetEm+0x66>
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	a5 01       	movw	r20, r10
     a0c:	94 01       	movw	r18, r8
     a0e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodsi4>
     a12:	89 01       	movw	r16, r18
  if (pos < curPosition_ || curPosition_ == 0) {
     a14:	8c 85       	ldd	r24, Y+12	; 0x0c
     a16:	9d 85       	ldd	r25, Y+13	; 0x0d
     a18:	ae 85       	ldd	r26, Y+14	; 0x0e
     a1a:	bf 85       	ldd	r27, Y+15	; 0x0f
     a1c:	c8 16       	cp	r12, r24
     a1e:	d9 06       	cpc	r13, r25
     a20:	ea 06       	cpc	r14, r26
     a22:	fb 06       	cpc	r15, r27
     a24:	20 f0       	brcs	.+8      	; 0xa2e <_ZN5Fat167seekSetEm+0x9a>
     a26:	00 97       	sbiw	r24, 0x00	; 0
     a28:	a1 05       	cpc	r26, r1
     a2a:	b1 05       	cpc	r27, r1
     a2c:	29 f4       	brne	.+10     	; 0xa38 <_ZN5Fat167seekSetEm+0xa4>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     a2e:	8c 81       	ldd	r24, Y+4	; 0x04
     a30:	9d 81       	ldd	r25, Y+5	; 0x05
     a32:	9b 87       	std	Y+11, r25	; 0x0b
     a34:	8a 87       	std	Y+10, r24	; 0x0a
     a36:	1e c0       	rjmp	.+60     	; 0xa74 <_ZN5Fat167seekSetEm+0xe0>
  } else {
    // advance from curPosition
    n -= ((curPosition_ - 1) >> 9)/blocksPerCluster_;
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	61 50       	subi	r22, 0x01	; 1
     a3e:	70 40       	sbci	r23, 0x00	; 0
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e9 e0       	ldi	r30, 0x09	; 9
     a46:	96 95       	lsr	r25
     a48:	87 95       	ror	r24
     a4a:	77 95       	ror	r23
     a4c:	67 95       	ror	r22
     a4e:	ea 95       	dec	r30
     a50:	d1 f7       	brne	.-12     	; 0xa46 <_ZN5Fat167seekSetEm+0xb2>
     a52:	a5 01       	movw	r20, r10
     a54:	94 01       	movw	r18, r8
     a56:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodsi4>
     a5a:	02 1b       	sub	r16, r18
     a5c:	13 0b       	sbc	r17, r19
     a5e:	0a c0       	rjmp	.+20     	; 0xa74 <_ZN5Fat167seekSetEm+0xe0>
  }
  while (n--) {
    if (!fatGet(curCluster_, &curCluster_)) return false;
     a60:	8a 85       	ldd	r24, Y+10	; 0x0a
     a62:	9b 85       	ldd	r25, Y+11	; 0x0b
     a64:	b4 01       	movw	r22, r8
     a66:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN5Fat166fatGetEjPj>
     a6a:	01 50       	subi	r16, 0x01	; 1
     a6c:	10 40       	sbci	r17, 0x00	; 0
     a6e:	88 23       	and	r24, r24
     a70:	31 f4       	brne	.+12     	; 0xa7e <_ZN5Fat167seekSetEm+0xea>
     a72:	0e c0       	rjmp	.+28     	; 0xa90 <_ZN5Fat167seekSetEm+0xfc>
     a74:	6a e0       	ldi	r22, 0x0A	; 10
     a76:	86 2e       	mov	r8, r22
     a78:	91 2c       	mov	r9, r1
     a7a:	8c 0e       	add	r8, r28
     a7c:	9d 1e       	adc	r9, r29
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    n -= ((curPosition_ - 1) >> 9)/blocksPerCluster_;
  }
  while (n--) {
     a7e:	01 15       	cp	r16, r1
     a80:	11 05       	cpc	r17, r1
     a82:	71 f7       	brne	.-36     	; 0xa60 <_ZN5Fat167seekSetEm+0xcc>
    if (!fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
     a84:	cc 86       	std	Y+12, r12	; 0x0c
     a86:	dd 86       	std	Y+13, r13	; 0x0d
     a88:	ee 86       	std	Y+14, r14	; 0x0e
     a8a:	ff 86       	std	Y+15, r15	; 0x0f
  return true;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <_ZN5Fat167seekSetEm+0xfe>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Fat16::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     a90:	80 e0       	ldi	r24, 0x00	; 0
  while (n--) {
    if (!fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	08 95       	ret
 * the value zero, false, is returned for failure.
 */
uint8_t Fat16::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
  if (pos == 0) {
     aac:	41 15       	cp	r20, r1
     aae:	51 05       	cpc	r21, r1
     ab0:	61 05       	cpc	r22, r1
     ab2:	71 05       	cpc	r23, r1
     ab4:	09 f0       	breq	.+2      	; 0xab8 <_ZN5Fat167seekSetEm+0x124>
     ab6:	96 cf       	rjmp	.-212    	; 0x9e4 <_ZN5Fat167seekSetEm+0x50>
     ab8:	8e cf       	rjmp	.-228    	; 0x9d6 <_ZN5Fat167seekSetEm+0x42>

00000aba <_ZN5Fat164syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t Fat16::sync(void) {
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	8c 01       	movw	r16, r24
  if (flags_ & F_FILE_DIR_DIRTY) {
     ac4:	fc 01       	movw	r30, r24
     ac6:	81 81       	ldd	r24, Z+1	; 0x01
     ac8:	87 ff       	sbrs	r24, 7
     aca:	29 c0       	rjmp	.+82     	; 0xb1e <_ZN5Fat164syncEv+0x64>
    // cache directory entry
    dir_t* d = cacheDirEntry(dirEntryIndex_, CACHE_FOR_WRITE);
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
     ad6:	ec 01       	movw	r28, r24
    if (!d) return false;
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	21 f1       	breq	.+72     	; 0xb24 <_ZN5Fat164syncEv+0x6a>

    // update file size and first cluster
    d->fileSize = fileSize_;
     adc:	f8 01       	movw	r30, r16
     ade:	86 81       	ldd	r24, Z+6	; 0x06
     ae0:	97 81       	ldd	r25, Z+7	; 0x07
     ae2:	a0 85       	ldd	r26, Z+8	; 0x08
     ae4:	b1 85       	ldd	r27, Z+9	; 0x09
     ae6:	8c 8f       	std	Y+28, r24	; 0x1c
     ae8:	9d 8f       	std	Y+29, r25	; 0x1d
     aea:	ae 8f       	std	Y+30, r26	; 0x1e
     aec:	bf 8f       	std	Y+31, r27	; 0x1f
    d->firstClusterLow = firstCluster_;
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	95 81       	ldd	r25, Z+5	; 0x05
     af2:	9b 8f       	std	Y+27, r25	; 0x1b
     af4:	8a 8f       	std	Y+26, r24	; 0x1a

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     af6:	e0 91 10 02 	lds	r30, 0x0210
     afa:	f0 91 11 02 	lds	r31, 0x0211
     afe:	30 97       	sbiw	r30, 0x00	; 0
     b00:	51 f0       	breq	.+20     	; 0xb16 <_ZN5Fat164syncEv+0x5c>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
     b02:	be 01       	movw	r22, r28
     b04:	6a 5e       	subi	r22, 0xEA	; 234
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	ce 01       	movw	r24, r28
     b0a:	48 96       	adiw	r24, 0x18	; 24
     b0c:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
     b0e:	88 8d       	ldd	r24, Y+24	; 0x18
     b10:	99 8d       	ldd	r25, Y+25	; 0x19
     b12:	9b 8b       	std	Y+19, r25	; 0x13
     b14:	8a 8b       	std	Y+18, r24	; 0x12
    }
    flags_ &= ~F_FILE_DIR_DIRTY;
     b16:	f8 01       	movw	r30, r16
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	8f 77       	andi	r24, 0x7F	; 127
     b1c:	81 83       	std	Z+1, r24	; 0x01
  }
  return cacheFlush();
     b1e:	0e 94 00 01 	call	0x200	; 0x200 <_ZN5Fat1610cacheFlushEv>
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <_ZN5Fat164syncEv+0x6c>
 */
uint8_t Fat16::sync(void) {
  if (flags_ & F_FILE_DIR_DIRTY) {
    // cache directory entry
    dir_t* d = cacheDirEntry(dirEntryIndex_, CACHE_FOR_WRITE);
    if (!d) return false;
     b24:	80 e0       	ldi	r24, 0x00	; 0
      d->lastAccessDate = d->lastWriteDate;
    }
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return cacheFlush();
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	08 95       	ret

00000b30 <_ZN5Fat165closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t Fat16::close(void) {
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	ec 01       	movw	r28, r24
  if (!sync())return false;
     b36:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN5Fat164syncEv>
     b3a:	88 23       	and	r24, r24
     b3c:	19 f0       	breq	.+6      	; 0xb44 <_ZN5Fat165closeEv+0x14>
  flags_ = 0;
     b3e:	19 82       	std	Y+1, r1	; 0x01
  return true;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <_ZN5Fat165closeEv+0x16>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t Fat16::close(void) {
  if (!sync())return false;
     b44:	80 e0       	ldi	r24, 0x00	; 0
  flags_ = 0;
  return true;
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <_ZN5Fat168truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t Fat16::truncate(uint32_t length) {
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	0f 92       	push	r0
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	8c 01       	movw	r16, r24
     b6e:	6a 01       	movw	r12, r20
     b70:	7b 01       	movw	r14, r22
  // error if file is not open for write
  if (!(flags_ & O_WRITE)) return false;
     b72:	fc 01       	movw	r30, r24
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	81 ff       	sbrs	r24, 1
     b78:	67 c0       	rjmp	.+206    	; 0xc48 <_ZN5Fat168truncateEm+0xfc>

  if (length > fileSize_) return false;
     b7a:	86 81       	ldd	r24, Z+6	; 0x06
     b7c:	97 81       	ldd	r25, Z+7	; 0x07
     b7e:	a0 85       	ldd	r26, Z+8	; 0x08
     b80:	b1 85       	ldd	r27, Z+9	; 0x09
     b82:	84 17       	cp	r24, r20
     b84:	95 07       	cpc	r25, r21
     b86:	a6 07       	cpc	r26, r22
     b88:	b7 07       	cpc	r27, r23
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <_ZN5Fat168truncateEm+0x42>
     b8c:	5d c0       	rjmp	.+186    	; 0xc48 <_ZN5Fat168truncateEm+0xfc>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	a1 05       	cpc	r26, r1
     b92:	b1 05       	cpc	r27, r1
     b94:	09 f4       	brne	.+2      	; 0xb98 <_ZN5Fat168truncateEm+0x4c>
     b96:	56 c0       	rjmp	.+172    	; 0xc44 <_ZN5Fat168truncateEm+0xf8>
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
     b98:	84 84       	ldd	r8, Z+12	; 0x0c
     b9a:	95 84       	ldd	r9, Z+13	; 0x0d
     b9c:	a6 84       	ldd	r10, Z+14	; 0x0e
     b9e:	b7 84       	ldd	r11, Z+15	; 0x0f
  if (length == 0) {
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	71 f4       	brne	.+28     	; 0xbc6 <_ZN5Fat168truncateEm+0x7a>
    // free all clusters
    if (!freeChain(firstCluster_)) return false;
     baa:	64 81       	ldd	r22, Z+4	; 0x04
     bac:	75 81       	ldd	r23, Z+5	; 0x05
     bae:	c8 01       	movw	r24, r16
     bb0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Fat169freeChainEj>
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <_ZN5Fat168truncateEm+0x6e>
     bb8:	47 c0       	rjmp	.+142    	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
    curCluster_ = firstCluster_ = 0;
     bba:	f8 01       	movw	r30, r16
     bbc:	15 82       	std	Z+5, r1	; 0x05
     bbe:	14 82       	std	Z+4, r1	; 0x04
     bc0:	13 86       	std	Z+11, r1	; 0x0b
     bc2:	12 86       	std	Z+10, r1	; 0x0a
     bc4:	25 c0       	rjmp	.+74     	; 0xc10 <_ZN5Fat168truncateEm+0xc4>
  } else {
    fat_t toFree;
    if (!seekSet(length)) return false;
     bc6:	c8 01       	movw	r24, r16
     bc8:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN5Fat167seekSetEm>
     bcc:	88 23       	and	r24, r24
     bce:	e1 f1       	breq	.+120    	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
    if (!fatGet(curCluster_, &toFree)) return false;
     bd0:	f8 01       	movw	r30, r16
     bd2:	82 85       	ldd	r24, Z+10	; 0x0a
     bd4:	93 85       	ldd	r25, Z+11	; 0x0b
     bd6:	be 01       	movw	r22, r28
     bd8:	6f 5f       	subi	r22, 0xFF	; 255
     bda:	7f 4f       	sbci	r23, 0xFF	; 255
     bdc:	0e 94 b2 01 	call	0x364	; 0x364 <_ZN5Fat166fatGetEjPj>
     be0:	88 23       	and	r24, r24
     be2:	91 f1       	breq	.+100    	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
    if (!isEOC(toFree)) {
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	ff ef       	ldi	r31, 0xFF	; 255
     bea:	88 3f       	cpi	r24, 0xF8	; 248
     bec:	9f 07       	cpc	r25, r31
     bee:	80 f4       	brcc	.+32     	; 0xc10 <_ZN5Fat168truncateEm+0xc4>
      // free extra clusters
      if (!fatPut(curCluster_, FAT16EOC)) return false;
     bf0:	f8 01       	movw	r30, r16
     bf2:	82 85       	ldd	r24, Z+10	; 0x0a
     bf4:	93 85       	ldd	r25, Z+11	; 0x0b
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <_ZN5Fat166fatPutEjj>
     bfe:	88 23       	and	r24, r24
     c00:	19 f1       	breq	.+70     	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
      if (!freeChain(toFree)) return false;
     c02:	69 81       	ldd	r22, Y+1	; 0x01
     c04:	7a 81       	ldd	r23, Y+2	; 0x02
     c06:	c8 01       	movw	r24, r16
     c08:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Fat169freeChainEj>
     c0c:	88 23       	and	r24, r24
     c0e:	e1 f0       	breq	.+56     	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
    }
  }
  fileSize_ = length;
     c10:	f8 01       	movw	r30, r16
     c12:	c6 82       	std	Z+6, r12	; 0x06
     c14:	d7 82       	std	Z+7, r13	; 0x07
     c16:	e0 86       	std	Z+8, r14	; 0x08
     c18:	f1 86       	std	Z+9, r15	; 0x09
  flags_ |= F_FILE_DIR_DIRTY;
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	81 83       	std	Z+1, r24	; 0x01
  if (!sync()) return false;
     c20:	c8 01       	movw	r24, r16
     c22:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN5Fat164syncEv>
     c26:	88 23       	and	r24, r24
     c28:	79 f0       	breq	.+30     	; 0xc48 <_ZN5Fat168truncateEm+0xfc>
  return seekSet(newPos);
     c2a:	b7 01       	movw	r22, r14
     c2c:	a6 01       	movw	r20, r12
     c2e:	8c 14       	cp	r8, r12
     c30:	9d 04       	cpc	r9, r13
     c32:	ae 04       	cpc	r10, r14
     c34:	bf 04       	cpc	r11, r15
     c36:	10 f4       	brcc	.+4      	; 0xc3c <_ZN5Fat168truncateEm+0xf0>
     c38:	b5 01       	movw	r22, r10
     c3a:	a4 01       	movw	r20, r8
     c3c:	c8 01       	movw	r24, r16
     c3e:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN5Fat167seekSetEm>
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <_ZN5Fat168truncateEm+0xfe>
  if (!(flags_ & O_WRITE)) return false;

  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <_ZN5Fat168truncateEm+0xfe>
      if (!freeChain(toFree)) return false;
    }
  }
  fileSize_ = length;
  flags_ |= F_FILE_DIR_DIRTY;
  if (!sync()) return false;
     c48:	80 e0       	ldi	r24, 0x00	; 0
  return seekSet(newPos);
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	08 95       	ret

00000c68 <_ZN5Fat164openEjh>:
 * Reasons for failure include the FAT volume has not been initialized,
 * a file is already open, \a index is invalid or is not the index of a
 * file or the file cannot be opened in the access mode specified by oflag.
 */
uint8_t Fat16::open(uint16_t index, uint8_t oflag)
{
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	5c 01       	movw	r10, r24
     c84:	7b 01       	movw	r14, r22
  lastError = 0;
     c86:	dc 01       	movw	r26, r24
     c88:	1c 92       	st	X, r1

  if (!volumeInitialized_ || isOpen()) {
     c8a:	80 91 2d 04 	lds	r24, 0x042D
     c8e:	88 23       	and	r24, r24
     c90:	49 f0       	breq	.+18     	; 0xca4 <_ZN5Fat164openEjh+0x3c>
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	8c 91       	ld	r24, X
     c96:	11 97       	sbiw	r26, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	83 70       	andi	r24, 0x03	; 3
     c9c:	90 70       	andi	r25, 0x00	; 0
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	09 f4       	brne	.+2      	; 0xca4 <_ZN5Fat164openEjh+0x3c>
     ca2:	6a c0       	rjmp	.+212    	; 0xd78 <_ZN5Fat164openEjh+0x110>
      lastError = 9;
     ca4:	89 e0       	ldi	r24, 0x09	; 9
     ca6:	1f c0       	rjmp	.+62     	; 0xce6 <_ZN5Fat164openEjh+0x7e>
      return false;
  };
  if ((oflag & O_TRUNC) && !(oflag & O_WRITE)) {
     ca8:	01 fd       	sbrc	r16, 1
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <_ZN5Fat164openEjh+0x48>
      lastError = 10;
     cac:	8a e0       	ldi	r24, 0x0A	; 10
     cae:	26 c0       	rjmp	.+76     	; 0xcfc <_ZN5Fat164openEjh+0x94>
      return false;
  };
  dir_t* d = cacheDirEntry(index);
     cb0:	c7 01       	movw	r24, r14
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	49 83       	std	Y+1, r20	; 0x01
     cb6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
     cba:	fc 01       	movw	r30, r24
  // if bad file index or I/O error
  if (!d) {
     cbc:	49 81       	ldd	r20, Y+1	; 0x01
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <_ZN5Fat164openEjh+0x5e>
      lastError = 11;
     cc2:	8b e0       	ldi	r24, 0x0B	; 11
     cc4:	10 c0       	rjmp	.+32     	; 0xce6 <_ZN5Fat164openEjh+0x7e>
      return false;
  };

  // error if unused entry
  if (d->name[0] == DIR_NAME_FREE || d->name[0] == DIR_NAME_DELETED)  {
     cc6:	80 81       	ld	r24, Z
     cc8:	88 23       	and	r24, r24
     cca:	11 f0       	breq	.+4      	; 0xcd0 <_ZN5Fat164openEjh+0x68>
     ccc:	85 3e       	cpi	r24, 0xE5	; 229
     cce:	11 f4       	brne	.+4      	; 0xcd4 <_ZN5Fat164openEjh+0x6c>
      lastError = 12;
     cd0:	8c e0       	ldi	r24, 0x0C	; 12
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <_ZN5Fat164openEjh+0x94>
      return false;
  };
  // error if long name, volume label or subdirectory
  if ((d->attributes & (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY)) != 0) {
     cd4:	83 85       	ldd	r24, Z+11	; 0x0b
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9c 01       	movw	r18, r24
     cda:	28 71       	andi	r18, 0x18	; 24
     cdc:	30 70       	andi	r19, 0x00	; 0
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	21 f0       	breq	.+8      	; 0xcec <_ZN5Fat164openEjh+0x84>
      lastError = 13;
     ce4:	8d e0       	ldi	r24, 0x0D	; 13
     ce6:	f5 01       	movw	r30, r10
     ce8:	80 83       	st	Z, r24
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <_ZN5Fat164openEjh+0x98>
      return false;
  };
  // don't allow write or truncate if read-only
  if (d->attributes & DIR_ATT_READ_ONLY) {
     cec:	80 ff       	sbrs	r24, 0
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <_ZN5Fat164openEjh+0x9c>
    if (oflag & (O_WRITE | O_TRUNC))  {
     cf0:	c8 01       	movw	r24, r16
     cf2:	82 74       	andi	r24, 0x42	; 66
     cf4:	90 70       	andi	r25, 0x00	; 0
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	29 f0       	breq	.+10     	; 0xd04 <_ZN5Fat164openEjh+0x9c>
      lastError = 14;
     cfa:	8e e0       	ldi	r24, 0x0E	; 14
     cfc:	d5 01       	movw	r26, r10
     cfe:	8c 93       	st	X, r24
      return false;
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	2e c0       	rjmp	.+92     	; 0xd60 <_ZN5Fat164openEjh+0xf8>
    };
  }

  curCluster_ = 0;
     d04:	d5 01       	movw	r26, r10
     d06:	1b 96       	adiw	r26, 0x0b	; 11
     d08:	1c 92       	st	X, r1
     d0a:	1e 92       	st	-X, r1
     d0c:	1a 97       	sbiw	r26, 0x0a	; 10
  curPosition_ = 0;
     d0e:	1c 96       	adiw	r26, 0x0c	; 12
     d10:	1d 92       	st	X+, r1
     d12:	1d 92       	st	X+, r1
     d14:	1d 92       	st	X+, r1
     d16:	1c 92       	st	X, r1
     d18:	1f 97       	sbiw	r26, 0x0f	; 15
  dirEntryIndex_ = index;
     d1a:	13 96       	adiw	r26, 0x03	; 3
     d1c:	fc 92       	st	X, r15
     d1e:	ee 92       	st	-X, r14
     d20:	12 97       	sbiw	r26, 0x02	; 2
  fileSize_ = d->fileSize;
     d22:	04 8d       	ldd	r16, Z+28	; 0x1c
     d24:	15 8d       	ldd	r17, Z+29	; 0x1d
     d26:	26 8d       	ldd	r18, Z+30	; 0x1e
     d28:	37 8d       	ldd	r19, Z+31	; 0x1f
     d2a:	16 96       	adiw	r26, 0x06	; 6
     d2c:	0d 93       	st	X+, r16
     d2e:	1d 93       	st	X+, r17
     d30:	2d 93       	st	X+, r18
     d32:	3c 93       	st	X, r19
     d34:	19 97       	sbiw	r26, 0x09	; 9
  firstCluster_ = d->firstClusterLow;
     d36:	82 8d       	ldd	r24, Z+26	; 0x1a
     d38:	93 8d       	ldd	r25, Z+27	; 0x1b
     d3a:	15 96       	adiw	r26, 0x05	; 5
     d3c:	9c 93       	st	X, r25
     d3e:	8e 93       	st	-X, r24
     d40:	14 97       	sbiw	r26, 0x04	; 4
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
     d42:	4f 70       	andi	r20, 0x0F	; 15
     d44:	11 96       	adiw	r26, 0x01	; 1
     d46:	4c 93       	st	X, r20
     d48:	11 97       	sbiw	r26, 0x01	; 1

  if (oflag & O_TRUNC ) return truncate(0);
     d4a:	c1 14       	cp	r12, r1
     d4c:	d1 04       	cpc	r13, r1
     d4e:	39 f0       	breq	.+14     	; 0xd5e <_ZN5Fat164openEjh+0xf6>
     d50:	c5 01       	movw	r24, r10
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	ba 01       	movw	r22, r20
     d58:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN5Fat168truncateEm>
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <_ZN5Fat164openEjh+0xf8>
  return true;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
}
     d60:	0f 90       	pop	r0
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	08 95       	ret

  if (!volumeInitialized_ || isOpen()) {
      lastError = 9;
      return false;
  };
  if ((oflag & O_TRUNC) && !(oflag & O_WRITE)) {
     d78:	04 2f       	mov	r16, r20
     d7a:	10 e0       	ldi	r17, 0x00	; 0
     d7c:	60 e4       	ldi	r22, 0x40	; 64
     d7e:	c6 2e       	mov	r12, r22
     d80:	d1 2c       	mov	r13, r1
     d82:	c0 22       	and	r12, r16
     d84:	d1 22       	and	r13, r17
     d86:	46 fd       	sbrc	r20, 6
     d88:	8f cf       	rjmp	.-226    	; 0xca8 <_ZN5Fat164openEjh+0x40>
     d8a:	92 cf       	rjmp	.-220    	; 0xcb0 <_ZN5Fat164openEjh+0x48>

00000d8c <_ZN5Fat164openEPKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized,
 * a file is already open, \a fileName is invalid, the file does not exist,
 * is a directory, or can't be opened in the access mode specified by oflag.
 */
uint8_t Fat16::open(const char* fileName, uint8_t oflag) {
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	2b 97       	sbiw	r28, 0x0b	; 11
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	7c 01       	movw	r14, r24
     db6:	cb 01       	movw	r24, r22
     db8:	94 2e       	mov	r9, r20
  uint8_t dname[11];   // name formatted for dir entry
  int16_t empty = -1;  // index of empty slot
  dir_t* p;            // pointer to cached dir entry

  lastError = 0;
     dba:	f7 01       	movw	r30, r14
     dbc:	10 82       	st	Z, r1

  if (!volumeInitialized_ || isOpen()) {
     dbe:	20 91 2d 04 	lds	r18, 0x042D
     dc2:	22 23       	and	r18, r18
     dc4:	41 f0       	breq	.+16     	; 0xdd6 <_ZN5Fat164openEPKch+0x4a>
     dc6:	21 81       	ldd	r18, Z+1	; 0x01
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	23 70       	andi	r18, 0x03	; 3
     dcc:	30 70       	andi	r19, 0x00	; 0
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_ZN5Fat164openEPKch+0x4a>
     dd4:	97 c0       	rjmp	.+302    	; 0xf04 <_ZN5Fat164openEPKch+0x178>
      lastError = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <_ZN5Fat164openEPKch+0x50>
      return false;
  };
  // error if invalid name
  if (!make83Name(fileName, dname)) {
      lastError = 2;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	f7 01       	movw	r30, r14
     dde:	80 83       	st	Z, r24
      return false;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	7d c0       	rjmp	.+250    	; 0xede <_ZN5Fat164openEPKch+0x152>
  };
  for (uint16_t index = 0; index < rootDirEntryCount_; index++) {
    if (!(p = cacheDirEntry(index))) {
     de4:	c8 01       	movw	r24, r16
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
     dec:	bc 01       	movw	r22, r24
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	11 f4       	brne	.+4      	; 0xdf6 <_ZN5Fat164openEPKch+0x6a>
        lastError = 3;
     df2:	83 e0       	ldi	r24, 0x03	; 3
     df4:	f3 cf       	rjmp	.-26     	; 0xddc <_ZN5Fat164openEPKch+0x50>
        return false;
    };
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
     df6:	fc 01       	movw	r30, r24
     df8:	80 81       	ld	r24, Z
     dfa:	88 23       	and	r24, r24
     dfc:	11 f0       	breq	.+4      	; 0xe02 <_ZN5Fat164openEPKch+0x76>
     dfe:	85 3e       	cpi	r24, 0xE5	; 229
     e00:	29 f4       	brne	.+10     	; 0xe0c <_ZN5Fat164openEPKch+0x80>
      // remember first empty slot
      if (empty < 0) empty = index;
     e02:	d7 fc       	sbrc	r13, 7
     e04:	68 01       	movw	r12, r16
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
     e06:	88 23       	and	r24, r24
     e08:	91 f4       	brne	.+36     	; 0xe2e <_ZN5Fat164openEPKch+0xa2>
     e0a:	1a c0       	rjmp	.+52     	; 0xe40 <_ZN5Fat164openEPKch+0xb4>
    } else if (!memcmp(dname, p->name, 11)) {
     e0c:	88 2d       	mov	r24, r8
     e0e:	9a 2d       	mov	r25, r10
     e10:	4b e0       	ldi	r20, 0x0B	; 11
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	0e 94 32 0b 	call	0x1664	; 0x1664 <memcmp>
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	49 f4       	brne	.+18     	; 0xe2e <_ZN5Fat164openEPKch+0xa2>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) {
     e1c:	89 2d       	mov	r24, r9
     e1e:	80 73       	andi	r24, 0x30	; 48
     e20:	80 33       	cpi	r24, 0x30	; 48
     e22:	11 f4       	brne	.+4      	; 0xe28 <_ZN5Fat164openEPKch+0x9c>
          lastError = 4;
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	da cf       	rjmp	.-76     	; 0xddc <_ZN5Fat164openEPKch+0x50>
          return false;
      };
      // open existing file
      return open(index, oflag);
     e28:	c7 01       	movw	r24, r14
     e2a:	b8 01       	movw	r22, r16
     e2c:	55 c0       	rjmp	.+170    	; 0xed8 <_ZN5Fat164openEPKch+0x14c>
  // error if invalid name
  if (!make83Name(fileName, dname)) {
      lastError = 2;
      return false;
  };
  for (uint16_t index = 0; index < rootDirEntryCount_; index++) {
     e2e:	0f 5f       	subi	r16, 0xFF	; 255
     e30:	1f 4f       	sbci	r17, 0xFF	; 255
     e32:	80 91 29 04 	lds	r24, 0x0429
     e36:	90 91 2a 04 	lds	r25, 0x042A
     e3a:	08 17       	cp	r16, r24
     e3c:	19 07       	cpc	r17, r25
     e3e:	90 f2       	brcs	.-92     	; 0xde4 <_ZN5Fat164openEPKch+0x58>
      // open existing file
      return open(index, oflag);
    }
  }
  // error if directory is full
  if (empty < 0)  {
     e40:	d7 fe       	sbrs	r13, 7
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <_ZN5Fat164openEPKch+0xbc>
      lastError = 5;
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	ca cf       	rjmp	.-108    	; 0xddc <_ZN5Fat164openEPKch+0x50>
      return false;
  };
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) {
     e48:	89 2d       	mov	r24, r9
     e4a:	82 71       	andi	r24, 0x12	; 18
     e4c:	82 31       	cpi	r24, 0x12	; 18
     e4e:	11 f0       	breq	.+4      	; 0xe54 <_ZN5Fat164openEPKch+0xc8>
      lastError = 6;
     e50:	86 e0       	ldi	r24, 0x06	; 6
     e52:	c4 cf       	rjmp	.-120    	; 0xddc <_ZN5Fat164openEPKch+0x50>
      return false;
  };
  if (!(p = cacheDirEntry(empty, CACHE_FOR_WRITE)))  {
     e54:	ac 2c       	mov	r10, r12
     e56:	8d 2c       	mov	r8, r13
     e58:	c6 01       	movw	r24, r12
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN5Fat1613cacheDirEntryEjh>
     e60:	8c 01       	movw	r16, r24
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	11 f4       	brne	.+4      	; 0xe6a <_ZN5Fat164openEPKch+0xde>
      lastError = 7;
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	b9 cf       	rjmp	.-142    	; 0xddc <_ZN5Fat164openEPKch+0x50>
      return false;
  };
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	f8 01       	movw	r30, r16
     e6e:	11 92       	st	Z+, r1
     e70:	8a 95       	dec	r24
     e72:	e9 f7       	brne	.-6      	; 0xe6e <_ZN5Fat164openEPKch+0xe2>
  memcpy(p->name, dname, 11);
     e74:	d8 01       	movw	r26, r16
     e76:	fe 01       	movw	r30, r28
     e78:	31 96       	adiw	r30, 0x01	; 1
     e7a:	8b e0       	ldi	r24, 0x0B	; 11
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	e1 f7       	brne	.-8      	; 0xe7c <_ZN5Fat164openEPKch+0xf0>

  // set timestamps
  if (dateTime_) {
     e84:	e0 91 10 02 	lds	r30, 0x0210
     e88:	f0 91 11 02 	lds	r31, 0x0211
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	39 f0       	breq	.+14     	; 0xe9e <_ZN5Fat164openEPKch+0x112>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
     e90:	b8 01       	movw	r22, r16
     e92:	62 5f       	subi	r22, 0xF2	; 242
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	c8 01       	movw	r24, r16
     e98:	40 96       	adiw	r24, 0x10	; 16
     e9a:	19 95       	eicall
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <_ZN5Fat164openEPKch+0x124>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
     e9e:	81 e2       	ldi	r24, 0x21	; 33
     ea0:	98 e2       	ldi	r25, 0x28	; 40
     ea2:	f8 01       	movw	r30, r16
     ea4:	91 8b       	std	Z+17, r25	; 0x11
     ea6:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	98 e0       	ldi	r25, 0x08	; 8
     eac:	97 87       	std	Z+15, r25	; 0x0f
     eae:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 89       	ldd	r24, Z+16	; 0x10
     eb4:	91 89       	ldd	r25, Z+17	; 0x11
     eb6:	93 8b       	std	Z+19, r25	; 0x13
     eb8:	82 8b       	std	Z+18, r24	; 0x12
  p->lastWriteDate = p->creationDate;
     eba:	91 8f       	std	Z+25, r25	; 0x19
     ebc:	80 8f       	std	Z+24, r24	; 0x18
  p->lastWriteTime = p->creationTime;
     ebe:	86 85       	ldd	r24, Z+14	; 0x0e
     ec0:	97 85       	ldd	r25, Z+15	; 0x0f
     ec2:	97 8b       	std	Z+23, r25	; 0x17
     ec4:	86 8b       	std	Z+22, r24	; 0x16

  // insure created directory entry will be written to storage device
  if (!cacheFlush()) {
     ec6:	0e 94 00 01 	call	0x200	; 0x200 <_ZN5Fat1610cacheFlushEv>
     eca:	88 23       	and	r24, r24
     ecc:	11 f4       	brne	.+4      	; 0xed2 <_ZN5Fat164openEPKch+0x146>
      lastError = 8;
     ece:	88 e0       	ldi	r24, 0x08	; 8
     ed0:	85 cf       	rjmp	.-246    	; 0xddc <_ZN5Fat164openEPKch+0x50>
      return false;
  };
  // open entry
  return open(empty, oflag);
     ed2:	c7 01       	movw	r24, r14
     ed4:	6a 2d       	mov	r22, r10
     ed6:	78 2d       	mov	r23, r8
     ed8:	49 2d       	mov	r20, r9
     eda:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN5Fat164openEjh>
}
     ede:	2b 96       	adiw	r28, 0x0b	; 11
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	08 95       	ret
  if (!volumeInitialized_ || isOpen()) {
      lastError = 1;
      return false;
  };
  // error if invalid name
  if (!make83Name(fileName, dname)) {
     f04:	5e 01       	movw	r10, r28
     f06:	08 94       	sec
     f08:	a1 1c       	adc	r10, r1
     f0a:	b1 1c       	adc	r11, r1
     f0c:	b5 01       	movw	r22, r10
     f0e:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN5Fat1610make83NameEPKcPh>
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <_ZN5Fat164openEPKch+0x18c>
     f16:	61 cf       	rjmp	.-318    	; 0xdda <_ZN5Fat164openEPKch+0x4e>
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	cc 24       	eor	r12, r12
     f1e:	ca 94       	dec	r12
     f20:	dc 2c       	mov	r13, r12
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (empty < 0) empty = index;
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
     f22:	8a 2c       	mov	r8, r10
     f24:	ab 2c       	mov	r10, r11
     f26:	85 cf       	rjmp	.-246    	; 0xe32 <_ZN5Fat164openEPKch+0xa6>

00000f28 <_ZN5Fat166removeEPKc>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is read only, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t Fat16::remove(const char* fileName) {
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	60 97       	sbiw	r28, 0x10	; 16
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	bc 01       	movw	r22, r24
 public:
  /*
   * Public functions
   */
  /** create with file closed */
  Fat16(void) : flags_(0) {}
     f3e:	1a 82       	std	Y+2, r1	; 0x02
  Fat16 file;
  if (!file.open(fileName, O_WRITE)) return false;
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	42 e0       	ldi	r20, 0x02	; 2
     f46:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN5Fat164openEPKch>
     f4a:	88 23       	and	r24, r24
     f4c:	29 f0       	breq	.+10     	; 0xf58 <_ZN5Fat166removeEPKc+0x30>
  return file.remove();
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN5Fat166removeEv>
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <_ZN5Fat166removeEPKc+0x32>
 * Reasons for failure include the file is read only, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t Fat16::remove(const char* fileName) {
  Fat16 file;
  if (!file.open(fileName, O_WRITE)) return false;
     f58:	80 e0       	ldi	r24, 0x00	; 0
  return file.remove();
}
     f5a:	60 96       	adiw	r28, 0x10	; 16
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <_ZN5Fat1615getFileDirEntryEPKc>:
  write_P(str);
  write_P(PSTR("\r\n"));
}

const int16_t Fat16::getFileDirEntry(const char* fileName)
{
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	ad 97       	sbiw	r28, 0x2d	; 45
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	8c 01       	movw	r16, r24
     f8a:	cb 01       	movw	r24, r22
  uint8_t name[11];   // 8+3 file name
  uint16_t fileIndex = 0;
     f8c:	1a 82       	std	Y+2, r1	; 0x02
     f8e:	19 82       	std	Y+1, r1	; 0x01
  dir_t directoryEntry;

	// Check if the volume is initialised
  if (!volumeInitialized_)
     f90:	20 91 2d 04 	lds	r18, 0x042D
     f94:	22 23       	and	r18, r18
     f96:	11 f4       	brne	.+4      	; 0xf9c <_ZN5Fat1615getFileDirEntryEPKc+0x30>
      lastError = 9;
     f98:	89 e0       	ldi	r24, 0x09	; 9
     f9a:	0b c0       	rjmp	.+22     	; 0xfb2 <_ZN5Fat1615getFileDirEntryEPKc+0x46>
  // Check if name is valid
	else if ( !make83Name(fileName, name))
     f9c:	a3 e0       	ldi	r26, 0x03	; 3
     f9e:	ea 2e       	mov	r14, r26
     fa0:	f1 2c       	mov	r15, r1
     fa2:	ec 0e       	add	r14, r28
     fa4:	fd 1e       	adc	r15, r29
     fa6:	b7 01       	movw	r22, r14
     fa8:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN5Fat1610make83NameEPKcPh>
     fac:	88 23       	and	r24, r24
     fae:	b1 f4       	brne	.+44     	; 0xfdc <_ZN5Fat1615getFileDirEntryEPKc+0x70>
      lastError = 2;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 83       	st	Z, r24
     fb6:	1e c0       	rjmp	.+60     	; 0xff4 <_ZN5Fat1615getFileDirEntryEPKc+0x88>
  else
  {
		// scan the directory looking for the file
		while ( readDir(&directoryEntry, &fileIndex) )
		{
			if ( memcmp(directoryEntry.name,name,sizeof(name)) == 0 )
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 96       	adiw	r24, 0x0e	; 14
     fbc:	60 2f       	mov	r22, r16
     fbe:	7e 2d       	mov	r23, r14
     fc0:	4b e0       	ldi	r20, 0x0B	; 11
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	0e 94 32 0b 	call	0x1664	; 0x1664 <memcmp>
     fc8:	9c 01       	movw	r18, r24
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	21 15       	cp	r18, r1
     fd0:	31 05       	cpc	r19, r1
     fd2:	91 f0       	breq	.+36     	; 0xff8 <_ZN5Fat1615getFileDirEntryEPKc+0x8c>
				return fileIndex;
			else
				fileIndex++;
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <_ZN5Fat1615getFileDirEntryEPKc+0x74>
  else
  {
		// scan the directory looking for the file
		while ( readDir(&directoryEntry, &fileIndex) )
		{
			if ( memcmp(directoryEntry.name,name,sizeof(name)) == 0 )
     fdc:	0e 2d       	mov	r16, r14
     fde:	ef 2c       	mov	r14, r15
	else if ( !make83Name(fileName, name))
      lastError = 2;
  else
  {
		// scan the directory looking for the file
		while ( readDir(&directoryEntry, &fileIndex) )
     fe0:	ce 01       	movw	r24, r28
     fe2:	0e 96       	adiw	r24, 0x0e	; 14
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	48 e1       	ldi	r20, 0x18	; 24
     fec:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN5Fat167readDirEP14directoryEntryPjh>
     ff0:	88 23       	and	r24, r24
     ff2:	11 f7       	brne	.-60     	; 0xfb8 <_ZN5Fat1615getFileDirEntryEPKc+0x4c>
				return fileIndex;
			else
				fileIndex++;
		}
  }
	return -1;
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
}
     ff8:	ad 96       	adiw	r28, 0x2d	; 45
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	08 95       	ret

00001012 <_Z5blinkh>:
// Blink pane leds and internal led to give some rudimental indication
// In my case I have a LED on port L. You will need to change the port/pin
// by changing the #define or disable the function if you have no HMI
void blink(const uint8_t times)
{
	LEDDDR |= LEDBIT;
    1012:	90 91 0a 01 	lds	r25, 0x010A
    1016:	90 62       	ori	r25, 0x20	; 32
    1018:	90 93 0a 01 	sts	0x010A, r25
	for (uint8_t i = 0; i < times; i++)
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	1d c0       	rjmp	.+58     	; 0x105a <_Z5blinkh+0x48>
	{
		LEDPORT &= ~LEDBIT;
    1020:	20 91 0b 01 	lds	r18, 0x010B
    1024:	2f 7d       	andi	r18, 0xDF	; 223
    1026:	20 93 0b 01 	sts	0x010B, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102a:	2f ef       	ldi	r18, 0xFF	; 255
    102c:	32 e5       	ldi	r19, 0x52	; 82
    102e:	47 e0       	ldi	r20, 0x07	; 7
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	30 40       	sbci	r19, 0x00	; 0
    1034:	40 40       	sbci	r20, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <_Z5blinkh+0x1e>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <_Z5blinkh+0x28>
    103a:	00 00       	nop
		_delay_ms(150);
		LEDPORT |= LEDBIT;
    103c:	20 91 0b 01 	lds	r18, 0x010B
    1040:	20 62       	ori	r18, 0x20	; 32
    1042:	20 93 0b 01 	sts	0x010B, r18
    1046:	2f ef       	ldi	r18, 0xFF	; 255
    1048:	32 e5       	ldi	r19, 0x52	; 82
    104a:	47 e0       	ldi	r20, 0x07	; 7
    104c:	21 50       	subi	r18, 0x01	; 1
    104e:	30 40       	sbci	r19, 0x00	; 0
    1050:	40 40       	sbci	r20, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <_Z5blinkh+0x3a>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <_Z5blinkh+0x44>
    1056:	00 00       	nop
// In my case I have a LED on port L. You will need to change the port/pin
// by changing the #define or disable the function if you have no HMI
void blink(const uint8_t times)
{
	LEDDDR |= LEDBIT;
	for (uint8_t i = 0; i < times; i++)
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	98 17       	cp	r25, r24
    105c:	09 f7       	brne	.-62     	; 0x1020 <_Z5blinkh+0xe>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9d e3       	ldi	r25, 0x3D	; 61
    1062:	a9 e4       	ldi	r26, 0x49	; 73
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	a0 40       	sbci	r26, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <_Z5blinkh+0x52>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <_Z5blinkh+0x5c>
    106e:	00 00       	nop
		_delay_ms(150);
		LEDPORT |= LEDBIT;
		_delay_ms(150);
	}
	_delay_ms(1500);
}
    1070:	08 95       	ret

00001072 <_Z17boot_program_pagemPh>:

void boot_program_page (uint32_t page, uint8_t *buf)
{
    1072:	bf 92       	push	r11
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	6b 01       	movw	r12, r22
    1086:	7c 01       	movw	r14, r24
    1088:	ea 01       	movw	r28, r20
	uint16_t i;

	eeprom_busy_wait ();
    108a:	f9 99       	sbic	0x1f, 1	; 31
    108c:	fe cf       	rjmp	.-4      	; 0x108a <_Z17boot_program_pagemPh+0x18>
	boot_page_erase (page);
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	f6 01       	movw	r30, r12
    1092:	e0 92 5b 00 	sts	0x005B, r14
    1096:	80 93 57 00 	sts	0x0057, r24
    109a:	e8 95       	spm
	boot_spm_busy_wait ();      // Wait until the memory is erased.
    109c:	07 b6       	in	r0, 0x37	; 55
    109e:	00 fc       	sbrc	r0, 0
    10a0:	fd cf       	rjmp	.-6      	; 0x109c <_Z17boot_program_pagemPh+0x2a>
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	ba 01       	movw	r22, r20
	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
		w += (*buf++) << 8;
		boot_page_fill (page + i, w);
    10a8:	bb 24       	eor	r11, r11
    10aa:	b3 94       	inc	r11
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
    10ac:	88 81       	ld	r24, Y
		w += (*buf++) << 8;
    10ae:	19 81       	ldd	r17, Y+1	; 0x01
    10b0:	00 e0       	ldi	r16, 0x00	; 0
    10b2:	98 01       	movw	r18, r16
    10b4:	28 0f       	add	r18, r24
    10b6:	31 1d       	adc	r19, r1
		_delay_ms(150);
	}
	_delay_ms(1500);
}

void boot_program_page (uint32_t page, uint8_t *buf)
    10b8:	22 96       	adiw	r28, 0x02	; 2
	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
		w += (*buf++) << 8;
		boot_page_fill (page + i, w);
    10ba:	db 01       	movw	r26, r22
    10bc:	ca 01       	movw	r24, r20
    10be:	8c 0d       	add	r24, r12
    10c0:	9d 1d       	adc	r25, r13
    10c2:	ae 1d       	adc	r26, r14
    10c4:	bf 1d       	adc	r27, r15
    10c6:	09 01       	movw	r0, r18
    10c8:	fc 01       	movw	r30, r24
    10ca:	a0 93 5b 00 	sts	0x005B, r26
    10ce:	b0 92 57 00 	sts	0x0057, r11
    10d2:	e8 95       	spm
    10d4:	11 24       	eor	r1, r1
    10d6:	4e 5f       	subi	r20, 0xFE	; 254
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	6f 4f       	sbci	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255

	eeprom_busy_wait ();
	boot_page_erase (page);
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
    10de:	40 30       	cpi	r20, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	58 07       	cpc	r21, r24
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	68 07       	cpc	r22, r24
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	78 07       	cpc	r23, r24
    10ec:	f9 f6       	brne	.-66     	; 0x10ac <_Z17boot_program_pagemPh+0x3a>
		// Set up little-endian word.
		uint16_t w = *buf++;
		w += (*buf++) << 8;
		boot_page_fill (page + i, w);
	}
	boot_page_write (page);     // Store buffer in flash page.
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	f6 01       	movw	r30, r12
    10f2:	e0 92 5b 00 	sts	0x005B, r14
    10f6:	80 93 57 00 	sts	0x0057, r24
    10fa:	e8 95       	spm
	boot_spm_busy_wait();       // Wait until the memory is written.
    10fc:	07 b6       	in	r0, 0x37	; 55
    10fe:	00 fc       	sbrc	r0, 0
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <_Z17boot_program_pagemPh+0x8a>

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.
	boot_rww_enable ();
    1102:	81 e1       	ldi	r24, 0x11	; 17
    1104:	80 93 57 00 	sts	0x0057, r24
    1108:	e8 95       	spm
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	08 95       	ret

0000111e <main>:

int main(void)
{
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	c0 50       	subi	r28, 0x00	; 0
    1132:	d1 40       	sbci	r29, 0x01	; 1
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
	int16_t fileIndex;

	// immediately disable watchdog, just in case

	// Clear WDRF in MCUSR, otherwise wdt_disable() can't work
	MCUSR &= ~(1<<WDRF);
    113e:	84 b7       	in	r24, 0x34	; 52
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	84 bf       	out	0x34, r24	; 52
	// Now disable WD
	wdt_disable();
    1144:	88 e1       	ldi	r24, 0x18	; 24
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	80 93 60 00 	sts	0x0060, r24
    114e:	10 92 60 00 	sts	0x0060, r1
    1152:	0f be       	out	0x3f, r0	; 63

	// If you have a LED available, you can use it to warn the user that
	// bootloader has started
	blink(2);
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z5blinkh>
	 *	- SD card must be inserted, valid, and with a valid filesystem
	 *	- a firmware upgrade file must exist and can be opened
	 */

	if (
		sdcard.init(1)
    115a:	8e e3       	ldi	r24, 0x3E	; 62
    115c:	94 e0       	ldi	r25, 0x04	; 4
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN6SdCard4initEh>
	 *	Reflashing requires some conditions to start:
	 *	- SD card must be inserted, valid, and with a valid filesystem
	 *	- a firmware upgrade file must exist and can be opened
	 */

	if (
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <main+0x4c>
    1168:	5d c0       	rjmp	.+186    	; 0x1224 <main+0x106>
   * to init() after a volume has been successful initialized or
   * an I/O error.
   *
   */
  static uint8_t init(SdCard* dev) {
    return init(dev, 1) ? true : init(dev, 0);
    116a:	8e e3       	ldi	r24, 0x3E	; 62
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Fat164initEP6SdCardh>
    1174:	88 23       	and	r24, r24
    1176:	41 f4       	brne	.+16     	; 0x1188 <main+0x6a>
    1178:	8e e3       	ldi	r24, 0x3E	; 62
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	0e 94 84 02 	call	0x508	; 0x508 <_ZN5Fat164initEP6SdCardh>
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <main+0x6a>
    1186:	4e c0       	rjmp	.+156    	; 0x1224 <main+0x106>
    1188:	8e e2       	ldi	r24, 0x2E	; 46
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	72 e0       	ldi	r23, 0x02	; 2
    1190:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Fat1615getFileDirEntryEPKc>
    1194:	bc 01       	movw	r22, r24
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	6f 3f       	cpi	r22, 0xFF	; 255
    119a:	78 07       	cpc	r23, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <main+0x82>
    119e:	42 c0       	rjmp	.+132    	; 0x1224 <main+0x106>
		&&
		fs.init(&sdcard)
		&&	// Check if a flash update exists
		((fileIndex = fs.getFileDirEntry(FLASHFILE)) != -1)
		&&
		fs.open(fileIndex,O_RDONLY)
    11a0:	8e e2       	ldi	r24, 0x2E	; 46
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN5Fat164openEjh>
	 *	Reflashing requires some conditions to start:
	 *	- SD card must be inserted, valid, and with a valid filesystem
	 *	- a firmware upgrade file must exist and can be opened
	 */

	if (
    11aa:	88 23       	and	r24, r24
    11ac:	d9 f1       	breq	.+118    	; 0x1224 <main+0x106>
		&&
		fs.open(fileIndex,O_RDONLY)
	)
	{
		// An update file exists, warns the user
		blink(3);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z5blinkh>
}

int main(void)
{
	uint8_t buffer[SPM_PAGESIZE];
	uint32_t pageAddress = 0;
    11b4:	cc 24       	eor	r12, r12
    11b6:	dd 24       	eor	r13, r13
    11b8:	76 01       	movw	r14, r12
		{
			boot_program_page(pageAddress,buffer);
			pageAddress += SPM_PAGESIZE;
			// blink() is too slow, so I prefer to directly toggle the LED
			// at each page write
			LEDPORT ^= LEDBIT;
    11ba:	10 e2       	ldi	r17, 0x20	; 32
		fs.open(fileIndex,O_RDONLY)
	)
	{
		// An update file exists, warns the user
		blink(3);
		while ( fs.read(buffer,sizeof(buffer)) )
    11bc:	1d c0       	rjmp	.+58     	; 0x11f8 <main+0xda>
		{
			boot_program_page(pageAddress,buffer);
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	ae 01       	movw	r20, r28
    11c4:	4f 5f       	subi	r20, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	0e 94 39 08 	call	0x1072	; 0x1072 <_Z17boot_program_pagemPh>
			pageAddress += SPM_PAGESIZE;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	c8 0e       	add	r12, r24
    11d6:	d9 1e       	adc	r13, r25
    11d8:	ea 1e       	adc	r14, r26
    11da:	fb 1e       	adc	r15, r27
			// blink() is too slow, so I prefer to directly toggle the LED
			// at each page write
			LEDPORT ^= LEDBIT;
    11dc:	80 91 0b 01 	lds	r24, 0x010B
    11e0:	81 27       	eor	r24, r17
    11e2:	80 93 0b 01 	sts	0x010B, r24
			// Stop at the end of application space, don't update bootloader
			// no matter how long is the file
			if (pageAddress > (FLASHEND -(2*BOOTSIZE) + 1))
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	c9 16       	cp	r12, r25
    11ea:	91 ec       	ldi	r25, 0xC1	; 193
    11ec:	d9 06       	cpc	r13, r25
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	e9 06       	cpc	r14, r25
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	f9 06       	cpc	r15, r25
    11f6:	59 f0       	breq	.+22     	; 0x120e <main+0xf0>
		fs.open(fileIndex,O_RDONLY)
	)
	{
		// An update file exists, warns the user
		blink(3);
		while ( fs.read(buffer,sizeof(buffer)) )
    11f8:	8e e2       	ldi	r24, 0x2E	; 46
    11fa:	94 e0       	ldi	r25, 0x04	; 4
    11fc:	be 01       	movw	r22, r28
    11fe:	6f 5f       	subi	r22, 0xFF	; 255
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	51 e0       	ldi	r21, 0x01	; 1
    1206:	0e 94 90 03 	call	0x720	; 0x720 <_ZN5Fat164readEPvj>
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	c1 f6       	brne	.-80     	; 0x11be <main+0xa0>
			// Stop at the end of application space, don't update bootloader
			// no matter how long is the file
			if (pageAddress > (FLASHEND -(2*BOOTSIZE) + 1))
				break;
		}
		fs.close();
    120e:	8e e2       	ldi	r24, 0x2E	; 46
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN5Fat165closeEv>
		// Update completed. Remove the file to avoid re-reflashing in case
		// of further boot
		fs.remove(FLASHFILE);
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN5Fat166removeEPKc>
		blink(4);
    121e:	84 e0       	ldi	r24, 0x04	; 4
    1220:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z5blinkh>

	/*
		We can arrive here after a successful update or in case or error.
		Anyway, there is nothing else to do than resetting the MCU
	*/
	SPL = (RAMEND & 0xFF);
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	8d bf       	out	0x3d, r24	; 61
	SPH = (RAMEND >> 8);
    1228:	81 e2       	ldi	r24, 0x21	; 33
    122a:	8e bf       	out	0x3e, r24	; 62
	asm("jmp 0");
    122c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
}
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	c0 50       	subi	r28, 0x00	; 0
    1236:	df 4f       	sbci	r29, 0xFF	; 255
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

00001252 <_GLOBAL__sub_I_sdcard>:
 public:
  /*
   * Public functions
   */
  /** create with file closed */
  Fat16(void) : flags_(0) {}
    1252:	10 92 2f 04 	sts	0x042F, r1
    1256:	08 95       	ret

00001258 <_ZL6spiRecv>:
//------------------------------------------------------------------------------
// SPI static functions
//
// clock byte in
STATIC_NOINLINE uint8_t spiRec(void) {
	SPDR = 0xff;
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
    125c:	0d b4       	in	r0, 0x2d	; 45
    125e:	07 fe       	sbrs	r0, 7
    1260:	fd cf       	rjmp	.-6      	; 0x125c <_ZL6spiRecv+0x4>
	return SPDR;
    1262:	8e b5       	in	r24, 0x2e	; 46
}
    1264:	08 95       	ret

00001266 <_ZL7spiSendh>:
// clock byte out
STATIC_NOINLINE void spiSend(uint8_t b) {
	SPDR = b;
    1266:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
    1268:	0d b4       	in	r0, 0x2d	; 45
    126a:	07 fe       	sbrs	r0, 7
    126c:	fd cf       	rjmp	.-6      	; 0x1268 <_ZL7spiSendh+0x2>
}
    126e:	08 95       	ret

00001270 <_ZL12waitForTokenhj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
// return false if timeout
static uint8_t waitForToken(uint8_t token, uint16_t timeoutMillis)
{
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	f8 2e       	mov	r15, r24
    127c:	8b 01       	movw	r16, r22
	uint16_t counter = 0;
    127e:	c0 e0       	ldi	r28, 0x00	; 0
    1280:	d0 e0       	ldi	r29, 0x00	; 0

	while (spiRec() != token)
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <_ZL12waitForTokenhj+0x28>
	{
		if (counter++ > timeoutMillis)
    1284:	0c 17       	cp	r16, r28
    1286:	1d 07       	cpc	r17, r29
    1288:	68 f0       	brcs	.+26     	; 0x12a4 <_ZL12waitForTokenhj+0x34>
    128a:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128c:	8f e9       	ldi	r24, 0x9F	; 159
    128e:	9f e0       	ldi	r25, 0x0F	; 15
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <_ZL12waitForTokenhj+0x20>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <_ZL12waitForTokenhj+0x26>
    1296:	00 00       	nop
// return false if timeout
static uint8_t waitForToken(uint8_t token, uint16_t timeoutMillis)
{
	uint16_t counter = 0;

	while (spiRec() != token)
    1298:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZL6spiRecv>
    129c:	8f 15       	cp	r24, r15
    129e:	91 f7       	brne	.-28     	; 0x1284 <_ZL12waitForTokenhj+0x14>
	{
		if (counter++ > timeoutMillis)
			return false;
		_delay_ms(1);
	}
	return true;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <_ZL12waitForTokenhj+0x36>
	uint16_t counter = 0;

	while (spiRec() != token)
	{
		if (counter++ > timeoutMillis)
			return false;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
		_delay_ms(1);
	}
	return true;
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	08 95       	ret

000012b2 <_ZN6SdCard14chipSelectHighEv>:
	uint8_t c_size_mult = (csd.c_size_mult_high << 1) | csd.c_size_mult_low;
	return (uint32_t)(c_size+1) << (c_size_mult + read_bl_len - 7);
}
//------------------------------------------------------------------------------
void SdCard::chipSelectHigh(void) {
	PORTB |= _BV(0);
    12b2:	28 9a       	sbi	0x05, 0	; 5
// 	digitalWrite(chipSelectPin_, HIGH);
}
    12b4:	08 95       	ret

000012b6 <_ZN6SdCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdCard::chipSelectLow(void) {
	PORTB &= ~ _BV(0);
    12b6:	28 98       	cbi	0x05, 0	; 5
// 	digitalWrite(chipSelectPin_, LOW);
}
    12b8:	08 95       	ret

000012ba <_ZN6SdCard11cardCommandEhm>:
		_delay_ms(1);
	}
	return true;
}
//------------------------------------------------------------------------------
uint8_t SdCard::cardCommand(uint8_t cmd, uint32_t arg) {
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	16 2f       	mov	r17, r22
    12ca:	69 01       	movw	r12, r18
    12cc:	7a 01       	movw	r14, r20
	uint8_t r1;

	// select card
	chipSelectLow();
    12ce:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN6SdCard13chipSelectLowEv>

	// wait if busy
	waitForToken(0XFF, SD_COMMAND_TIMEOUT);
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	6c e2       	ldi	r22, 0x2C	; 44
    12d6:	71 e0       	ldi	r23, 0x01	; 1
    12d8:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZL12waitForTokenhj>

	// send command
	spiSend(cmd | 0x40);
    12dc:	81 2f       	mov	r24, r17
    12de:	80 64       	ori	r24, 0x40	; 64
    12e0:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>
    12e4:	c8 e1       	ldi	r28, 0x18	; 24
    12e6:	d0 e0       	ldi	r29, 0x00	; 0

	// send argument
	for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    12e8:	d7 01       	movw	r26, r14
    12ea:	c6 01       	movw	r24, r12
    12ec:	0c 2e       	mov	r0, r28
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <_ZN6SdCard11cardCommandEhm+0x3e>
    12f0:	b6 95       	lsr	r27
    12f2:	a7 95       	ror	r26
    12f4:	97 95       	ror	r25
    12f6:	87 95       	ror	r24
    12f8:	0a 94       	dec	r0
    12fa:	d2 f7       	brpl	.-12     	; 0x12f0 <_ZN6SdCard11cardCommandEhm+0x36>
    12fc:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>
    1300:	28 97       	sbiw	r28, 0x08	; 8
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	c8 3f       	cpi	r28, 0xF8	; 248
    1306:	d8 07       	cpc	r29, r24
    1308:	79 f7       	brne	.-34     	; 0x12e8 <_ZN6SdCard11cardCommandEhm+0x2e>

	// send CRC - must send valid CRC for CMD0
	spiSend(cmd == CMD0 ? 0x95 : 0XFF);
    130a:	11 23       	and	r17, r17
    130c:	11 f4       	brne	.+4      	; 0x1312 <_ZN6SdCard11cardCommandEhm+0x58>
    130e:	85 e9       	ldi	r24, 0x95	; 149
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <_ZN6SdCard11cardCommandEhm+0x5a>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>

	// wait for not busy
	for (uint8_t retry = 0; (0X80 & (r1 = spiRec())) && retry != 0XFF; retry++);
    1318:	c0 e0       	ldi	r28, 0x00	; 0
    131a:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZL6spiRecv>
    131e:	87 ff       	sbrs	r24, 7
    1320:	04 c0       	rjmp	.+8      	; 0x132a <_ZN6SdCard11cardCommandEhm+0x70>
    1322:	cf 3f       	cpi	r28, 0xFF	; 255
    1324:	11 f0       	breq	.+4      	; 0x132a <_ZN6SdCard11cardCommandEhm+0x70>
    1326:	cf 5f       	subi	r28, 0xFF	; 255
    1328:	f8 cf       	rjmp	.-16     	; 0x131a <_ZN6SdCard11cardCommandEhm+0x60>
	return r1;
}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <_ZN6SdCard8cardAcmdEhm>:
//------------------------------------------------------------------------------
uint8_t SdCard::cardAcmd(uint8_t cmd, uint32_t arg) {
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    134a:	16 2f       	mov	r17, r22
    134c:	69 01       	movw	r12, r18
    134e:	7a 01       	movw	r14, r20
	cardCommand(CMD55, 0);
    1350:	67 e3       	ldi	r22, 0x37	; 55
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	a9 01       	movw	r20, r18
    1358:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN6SdCard11cardCommandEhm>
	return cardCommand(cmd, arg);
    135c:	ce 01       	movw	r24, r28
    135e:	61 2f       	mov	r22, r17
    1360:	a7 01       	movw	r20, r14
    1362:	96 01       	movw	r18, r12
    1364:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN6SdCard11cardCommandEhm>
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	08 95       	ret

00001378 <_ZN6SdCard4initEh>:
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*
*/
uint8_t SdCard::init( uint8_t speed )
{
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	ec 01       	movw	r28, r24
    1384:	f6 2e       	mov	r15, r22
	if (speed > 1) {
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	86 17       	cp	r24, r22
    138a:	10 f4       	brcc	.+4      	; 0x1390 <_ZN6SdCard4initEh+0x18>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    138c:	8a e0       	ldi	r24, 0x0A	; 10
    138e:	1a c0       	rjmp	.+52     	; 0x13c4 <_ZN6SdCard4initEh+0x4c>
{
	if (speed > 1) {
		error(SD_ERROR_SPI_SPEED);
		return false;
	}
	errorCode = 0;
    1390:	18 82       	st	Y, r1
// 	pinMode(SPI_MISO_PIN, INPUT);
// 	pinMode(SPI_SS_PIN, OUTPUT);
// 	pinMode(SPI_MOSI_PIN, OUTPUT);
// 	pinMode(SPI_SCK_PIN, OUTPUT);
	// set as output SS, MOSI and SCK
	DDRB |= _BV(0) |_BV(1) |_BV(2);
    1392:	84 b1       	in	r24, 0x04	; 4
    1394:	87 60       	ori	r24, 0x07	; 7
    1396:	84 b9       	out	0x04, r24	; 4
 	chipSelectHigh();
    1398:	ce 01       	movw	r24, r28
    139a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>

	// Enable SPI, Master, clock rate F_CPU/128
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    139e:	83 e5       	ldi	r24, 0x53	; 83
    13a0:	8c bd       	out	0x2c, r24	; 44
    13a2:	0a e0       	ldi	r16, 0x0A	; 10

	// must supply min of 74 clock cycles with CS high.
	for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>
    13aa:	01 50       	subi	r16, 0x01	; 1
    13ac:	d9 f7       	brne	.-10     	; 0x13a4 <_ZN6SdCard4initEh+0x2c>
	chipSelectLow();
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN6SdCard13chipSelectLowEv>

	// command to go idle in SPI mode
	while ((r = cardCommand(CMD0, 0)) != R1_IDLE_STATE)
    13b4:	02 ed       	ldi	r16, 0xD2	; 210
    13b6:	17 e0       	ldi	r17, 0x07	; 7
    13b8:	11 c0       	rjmp	.+34     	; 0x13dc <_ZN6SdCard4initEh+0x64>
    13ba:	01 50       	subi	r16, 0x01	; 1
    13bc:	10 40       	sbci	r17, 0x00	; 0
	{
		if (counter++ > SD_INIT_TIMEOUT)
    13be:	41 f4       	brne	.+16     	; 0x13d0 <_ZN6SdCard4initEh+0x58>
	PORTB &= ~ _BV(0);
// 	digitalWrite(chipSelectPin_, LOW);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code, uint8_t data) {
	errorData = data;
    13c0:	89 83       	std	Y+1, r24	; 0x01
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	88 83       	st	Y, r24
	chipSelectHigh();
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	while ((r = cardCommand(CMD0, 0)) != R1_IDLE_STATE)
	{
		if (counter++ > SD_INIT_TIMEOUT)
		{
			error(SD_ERROR_CMD0, r);
			return false;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	33 c0       	rjmp	.+102    	; 0x1436 <_ZN6SdCard4initEh+0xbe>
    13d0:	8f e9       	ldi	r24, 0x9F	; 159
    13d2:	9f e0       	ldi	r25, 0x0F	; 15
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <_ZN6SdCard4initEh+0x5c>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <_ZN6SdCard4initEh+0x62>
    13da:	00 00       	nop
	// must supply min of 74 clock cycles with CS high.
	for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
	chipSelectLow();

	// command to go idle in SPI mode
	while ((r = cardCommand(CMD0, 0)) != R1_IDLE_STATE)
    13dc:	ce 01       	movw	r24, r28
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN6SdCard11cardCommandEhm>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	31 f7       	brne	.-52     	; 0x13ba <_ZN6SdCard4initEh+0x42>
    13ee:	02 ed       	ldi	r16, 0xD2	; 210
    13f0:	17 e0       	ldi	r17, 0x07	; 7
    13f2:	0c c0       	rjmp	.+24     	; 0x140c <_ZN6SdCard4initEh+0x94>
    13f4:	01 50       	subi	r16, 0x01	; 1
    13f6:	10 40       	sbci	r17, 0x00	; 0
	}
	counter = 0;
	// start initialization and wait for completed initialization
	while ((r = cardAcmd(ACMD41, 0)) != R1_READY_STATE)
	{
		if (counter++ > SD_INIT_TIMEOUT)
    13f8:	19 f4       	brne	.+6      	; 0x1400 <_ZN6SdCard4initEh+0x88>
	PORTB &= ~ _BV(0);
// 	digitalWrite(chipSelectPin_, LOW);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code, uint8_t data) {
	errorData = data;
    13fa:	89 83       	std	Y+1, r24	; 0x01
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	e2 cf       	rjmp	.-60     	; 0x13c4 <_ZN6SdCard4initEh+0x4c>
    1400:	8f e9       	ldi	r24, 0x9F	; 159
    1402:	9f e0       	ldi	r25, 0x0F	; 15
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <_ZN6SdCard4initEh+0x8c>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <_ZN6SdCard4initEh+0x92>
    140a:	00 00       	nop
		else
			_delay_ms(1);
	}
	counter = 0;
	// start initialization and wait for completed initialization
	while ((r = cardAcmd(ACMD41, 0)) != R1_READY_STATE)
    140c:	ce 01       	movw	r24, r28
    140e:	69 e2       	ldi	r22, 0x29	; 41
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN6SdCard8cardAcmdEhm>
    141a:	88 23       	and	r24, r24
    141c:	59 f7       	brne	.-42     	; 0x13f4 <_ZN6SdCard4initEh+0x7c>
		}
		else
			_delay_ms(1);
	}
	// set SPI frequency
	SPCR &= ~((1 << SPR1) | (1 << SPR0));  // F_CPU/4
    141e:	8c b5       	in	r24, 0x2c	; 44
    1420:	8c 7f       	andi	r24, 0xFC	; 252
    1422:	8c bd       	out	0x2c, r24	; 44
	if (!speed) SPSR |= (1 << SPI2X);  // Doubled Clock Frequency to F_CPU/2
    1424:	ff 20       	and	r15, r15
    1426:	19 f4       	brne	.+6      	; 0x142e <_ZN6SdCard4initEh+0xb6>
    1428:	8d b5       	in	r24, 0x2d	; 45
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8d bd       	out	0x2d, r24	; 45
	chipSelectHigh();
    142e:	ce 01       	movw	r24, r28
    1430:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	return true;
    1434:	81 e0       	ldi	r24, 0x01	; 1
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	08 95       	ret

00001442 <_ZN6SdCard12readTransferEPhj>:
		return false;
	}
	return readTransfer(dst, 16);
}
//------------------------------------------------------------------------------
uint8_t SdCard::readTransfer(uint8_t* dst, uint16_t count) {
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
    1450:	16 2f       	mov	r17, r22
    1452:	07 2f       	mov	r16, r23
    1454:	7a 01       	movw	r14, r20
	// wait for start of data
	if (!waitForToken(DATA_START_BLOCK, SD_READ_TIMEOUT)) {
    1456:	8e ef       	ldi	r24, 0xFE	; 254
    1458:	6c e2       	ldi	r22, 0x2C	; 44
    145a:	71 e0       	ldi	r23, 0x01	; 1
    145c:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZL12waitForTokenhj>
    1460:	88 23       	and	r24, r24
    1462:	29 f4       	brne	.+10     	; 0x146e <_ZN6SdCard12readTransferEPhj+0x2c>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	88 83       	st	Y, r24
	chipSelectHigh();
    1468:	ce 01       	movw	r24, r28
    146a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	// wait for start of data
	if (!waitForToken(DATA_START_BLOCK, SD_READ_TIMEOUT)) {
		error(SD_ERROR_READ_TIMEOUT);
	}
	// start first spi transfer
	SPDR = 0XFF;
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	8e bd       	out	0x2e, r24	; 46
    1472:	e1 2f       	mov	r30, r17
    1474:	f0 2f       	mov	r31, r16
	for (uint16_t i = 0; i < count; i++) {
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
		while (!(SPSR & (1 << SPIF)));
		dst[i] = SPDR;
		SPDR = 0XFF;
    147a:	2f ef       	ldi	r18, 0xFF	; 255
	if (!waitForToken(DATA_START_BLOCK, SD_READ_TIMEOUT)) {
		error(SD_ERROR_READ_TIMEOUT);
	}
	// start first spi transfer
	SPDR = 0XFF;
	for (uint16_t i = 0; i < count; i++) {
    147c:	07 c0       	rjmp	.+14     	; 0x148c <_ZN6SdCard12readTransferEPhj+0x4a>
		while (!(SPSR & (1 << SPIF)));
    147e:	0d b4       	in	r0, 0x2d	; 45
    1480:	07 fe       	sbrs	r0, 7
    1482:	fd cf       	rjmp	.-6      	; 0x147e <_ZN6SdCard12readTransferEPhj+0x3c>
		dst[i] = SPDR;
    1484:	3e b5       	in	r19, 0x2e	; 46
    1486:	31 93       	st	Z+, r19
		SPDR = 0XFF;
    1488:	2e bd       	out	0x2e, r18	; 46
	if (!waitForToken(DATA_START_BLOCK, SD_READ_TIMEOUT)) {
		error(SD_ERROR_READ_TIMEOUT);
	}
	// start first spi transfer
	SPDR = 0XFF;
	for (uint16_t i = 0; i < count; i++) {
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	8e 15       	cp	r24, r14
    148e:	9f 05       	cpc	r25, r15
    1490:	b1 f7       	brne	.-20     	; 0x147e <_ZN6SdCard12readTransferEPhj+0x3c>
		while (!(SPSR & (1 << SPIF)));
		dst[i] = SPDR;
		SPDR = 0XFF;
	}
	// wait for first CRC byte
	while (!(SPSR & (1 << SPIF)));
    1492:	0d b4       	in	r0, 0x2d	; 45
    1494:	07 fe       	sbrs	r0, 7
    1496:	fd cf       	rjmp	.-6      	; 0x1492 <_ZN6SdCard12readTransferEPhj+0x50>
	spiRec();  // second CRC byte
    1498:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZL6spiRecv>
	chipSelectHigh();
    149c:	ce 01       	movw	r24, r28
    149e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	return true;
}
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	08 95       	ret

000014b2 <_ZN6SdCard9readBlockEmPh>:
* \param[in] blockNumber Logical block to be read.
* \param[out] dst Pointer to the location that will receive the data.
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*/
uint8_t SdCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	6a 01       	movw	r12, r20
    14c6:	7b 01       	movw	r14, r22
    14c8:	89 01       	movw	r16, r18
	if (cardCommand(CMD17, blockNumber << 9)) {
    14ca:	e9 e0       	ldi	r30, 0x09	; 9
    14cc:	cc 0c       	add	r12, r12
    14ce:	dd 1c       	adc	r13, r13
    14d0:	ee 1c       	adc	r14, r14
    14d2:	ff 1c       	adc	r15, r15
    14d4:	ea 95       	dec	r30
    14d6:	d1 f7       	brne	.-12     	; 0x14cc <_ZN6SdCard9readBlockEmPh+0x1a>
    14d8:	61 e1       	ldi	r22, 0x11	; 17
    14da:	a7 01       	movw	r20, r14
    14dc:	96 01       	movw	r18, r12
    14de:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN6SdCard11cardCommandEhm>
    14e2:	88 23       	and	r24, r24
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <_ZN6SdCard9readBlockEmPh+0x42>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	88 83       	st	Y, r24
	chipSelectHigh();
    14ea:	ce 01       	movw	r24, r28
    14ec:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
* the value zero, false, is returned for failure.
*/
uint8_t SdCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
	if (cardCommand(CMD17, blockNumber << 9)) {
		error(SD_ERROR_CMD17);
		return false;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <_ZN6SdCard9readBlockEmPh+0x4e>
	}
	return readTransfer(dst, 512);
    14f4:	ce 01       	movw	r24, r28
    14f6:	b8 01       	movw	r22, r16
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	52 e0       	ldi	r21, 0x02	; 2
    14fc:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZN6SdCard12readTransferEPhj>
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <_ZN6SdCard10writeBlockEmPKh>:
* \param[in] blockNumber Logical block to be written.
* \param[in] src Pointer to the location of the data to be written.
* \return The value one, true, is returned for success and
* the value zero, false, is returned for failure.
*/
uint8_t SdCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	0f 93       	push	r16
    151c:	1f 93       	push	r17
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
    1524:	6a 01       	movw	r12, r20
    1526:	7b 01       	movw	r14, r22
    1528:	12 2f       	mov	r17, r18
    152a:	03 2f       	mov	r16, r19
	uint32_t address = blockNumber << 9;
    152c:	f9 e0       	ldi	r31, 0x09	; 9
    152e:	cc 0c       	add	r12, r12
    1530:	dd 1c       	adc	r13, r13
    1532:	ee 1c       	adc	r14, r14
    1534:	ff 1c       	adc	r15, r15
    1536:	fa 95       	dec	r31
    1538:	d1 f7       	brne	.-12     	; 0x152e <_ZN6SdCard10writeBlockEmPKh+0x1c>
#if SD_PROTECT_BLOCK_ZERO
	// don't allow write to first block
	if (address == 0) {
    153a:	c1 14       	cp	r12, r1
    153c:	d1 04       	cpc	r13, r1
    153e:	e1 04       	cpc	r14, r1
    1540:	f1 04       	cpc	r15, r1
    1542:	11 f4       	brne	.+4      	; 0x1548 <_ZN6SdCard10writeBlockEmPKh+0x36>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    1544:	88 e0       	ldi	r24, 0x08	; 8
    1546:	08 c0       	rjmp	.+16     	; 0x1558 <_ZN6SdCard10writeBlockEmPKh+0x46>
	if (address == 0) {
		error(SD_ERROR_BLOCK_ZERO_WRITE);
		return false;
	}
#endif  // SD_PROTECT_BLOCK_ZERO
	if (cardCommand(CMD24, address)) {
    1548:	68 e1       	ldi	r22, 0x18	; 24
    154a:	a7 01       	movw	r20, r14
    154c:	96 01       	movw	r18, r12
    154e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN6SdCard11cardCommandEhm>
    1552:	88 23       	and	r24, r24
    1554:	39 f0       	breq	.+14     	; 0x1564 <_ZN6SdCard10writeBlockEmPKh+0x52>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	88 83       	st	Y, r24
	chipSelectHigh();
    155a:	ce 01       	movw	r24, r28
    155c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
		return false;
	}
#endif  // SD_PROTECT_BLOCK_ZERO
	if (cardCommand(CMD24, address)) {
		error(SD_ERROR_CMD24);
		return false;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	32 c0       	rjmp	.+100    	; 0x15c8 <_ZN6SdCard10writeBlockEmPKh+0xb6>
	}
	// optimize write loop
	SPDR = DATA_START_BLOCK;
    1564:	8e ef       	ldi	r24, 0xFE	; 254
    1566:	8e bd       	out	0x2e, r24	; 46
    1568:	e1 2f       	mov	r30, r17
    156a:	f0 2f       	mov	r31, r16
	for (uint16_t i = 0; i < 512; i++) {
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
		while (!(SPSR & (1 << SPIF)));
    1570:	0d b4       	in	r0, 0x2d	; 45
    1572:	07 fe       	sbrs	r0, 7
    1574:	fd cf       	rjmp	.-6      	; 0x1570 <_ZN6SdCard10writeBlockEmPKh+0x5e>
		SPDR = src[i];
    1576:	21 91       	ld	r18, Z+
    1578:	2e bd       	out	0x2e, r18	; 46
		error(SD_ERROR_CMD24);
		return false;
	}
	// optimize write loop
	SPDR = DATA_START_BLOCK;
	for (uint16_t i = 0; i < 512; i++) {
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	22 e0       	ldi	r18, 0x02	; 2
    157e:	80 30       	cpi	r24, 0x00	; 0
    1580:	92 07       	cpc	r25, r18
    1582:	b1 f7       	brne	.-20     	; 0x1570 <_ZN6SdCard10writeBlockEmPKh+0x5e>
		while (!(SPSR & (1 << SPIF)));
		SPDR = src[i];
	}
	while (!(SPSR & (1 << SPIF)));  // wait for last data byte
    1584:	0d b4       	in	r0, 0x2d	; 45
    1586:	07 fe       	sbrs	r0, 7
    1588:	fd cf       	rjmp	.-6      	; 0x1584 <_ZN6SdCard10writeBlockEmPKh+0x72>
	spiSend(0xFF);  // dummy crc
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>
	spiSend(0xFF);  // dummy crc
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZL7spiSendh>

	// get write response
	uint8_t r1 = spiRec();
    1596:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZL6spiRecv>
	if ((r1 & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    159a:	98 2f       	mov	r25, r24
    159c:	9f 71       	andi	r25, 0x1F	; 31
    159e:	95 30       	cpi	r25, 0x05	; 5
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <_ZN6SdCard10writeBlockEmPKh+0x96>
	PORTB &= ~ _BV(0);
// 	digitalWrite(chipSelectPin_, LOW);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code, uint8_t data) {
	errorData = data;
    15a2:	89 83       	std	Y+1, r24	; 0x01
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	d8 cf       	rjmp	.-80     	; 0x1558 <_ZN6SdCard10writeBlockEmPKh+0x46>
	if ((r1 & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
		error(SD_ERROR_WRITE_RESPONSE, r1);
		return false;
	}
	// wait for card to complete write programming
	if (!waitForToken(0XFF, SD_WRITE_TIMEOUT)) {
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	68 e5       	ldi	r22, 0x58	; 88
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZL12waitForTokenhj>
    15b2:	88 23       	and	r24, r24
    15b4:	29 f4       	brne	.+10     	; 0x15c0 <_ZN6SdCard10writeBlockEmPKh+0xae>
	errorData = data;
	error(code);
}
//------------------------------------------------------------------------------
void SdCard::error(uint8_t code) {
	errorCode = code;
    15b6:	87 e0       	ldi	r24, 0x07	; 7
    15b8:	88 83       	st	Y, r24
	chipSelectHigh();
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	}
	// wait for card to complete write programming
	if (!waitForToken(0XFF, SD_WRITE_TIMEOUT)) {
		error(SD_ERROR_WRITE_TIMEOUT);
	}
	chipSelectHigh();
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN6SdCard14chipSelectHighEv>
	return true;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	08 95       	ret

000015da <__mulsi3>:
    15da:	62 9f       	mul	r22, r18
    15dc:	d0 01       	movw	r26, r0
    15de:	73 9f       	mul	r23, r19
    15e0:	f0 01       	movw	r30, r0
    15e2:	82 9f       	mul	r24, r18
    15e4:	e0 0d       	add	r30, r0
    15e6:	f1 1d       	adc	r31, r1
    15e8:	64 9f       	mul	r22, r20
    15ea:	e0 0d       	add	r30, r0
    15ec:	f1 1d       	adc	r31, r1
    15ee:	92 9f       	mul	r25, r18
    15f0:	f0 0d       	add	r31, r0
    15f2:	83 9f       	mul	r24, r19
    15f4:	f0 0d       	add	r31, r0
    15f6:	74 9f       	mul	r23, r20
    15f8:	f0 0d       	add	r31, r0
    15fa:	65 9f       	mul	r22, r21
    15fc:	f0 0d       	add	r31, r0
    15fe:	99 27       	eor	r25, r25
    1600:	72 9f       	mul	r23, r18
    1602:	b0 0d       	add	r27, r0
    1604:	e1 1d       	adc	r30, r1
    1606:	f9 1f       	adc	r31, r25
    1608:	63 9f       	mul	r22, r19
    160a:	b0 0d       	add	r27, r0
    160c:	e1 1d       	adc	r30, r1
    160e:	f9 1f       	adc	r31, r25
    1610:	bd 01       	movw	r22, r26
    1612:	cf 01       	movw	r24, r30
    1614:	11 24       	eor	r1, r1
    1616:	08 95       	ret

00001618 <__udivmodsi4>:
    1618:	a1 e2       	ldi	r26, 0x21	; 33
    161a:	1a 2e       	mov	r1, r26
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	fd 01       	movw	r30, r26
    1622:	0d c0       	rjmp	.+26     	; 0x163e <__udivmodsi4_ep>

00001624 <__udivmodsi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	ee 1f       	adc	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	a2 17       	cp	r26, r18
    162e:	b3 07       	cpc	r27, r19
    1630:	e4 07       	cpc	r30, r20
    1632:	f5 07       	cpc	r31, r21
    1634:	20 f0       	brcs	.+8      	; 0x163e <__udivmodsi4_ep>
    1636:	a2 1b       	sub	r26, r18
    1638:	b3 0b       	sbc	r27, r19
    163a:	e4 0b       	sbc	r30, r20
    163c:	f5 0b       	sbc	r31, r21

0000163e <__udivmodsi4_ep>:
    163e:	66 1f       	adc	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	1a 94       	dec	r1
    1648:	69 f7       	brne	.-38     	; 0x1624 <__udivmodsi4_loop>
    164a:	60 95       	com	r22
    164c:	70 95       	com	r23
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	bd 01       	movw	r22, r26
    1658:	cf 01       	movw	r24, r30
    165a:	08 95       	ret

0000165c <__tablejump_elpm__>:
    165c:	07 90       	elpm	r0, Z+
    165e:	f6 91       	elpm	r31, Z
    1660:	e0 2d       	mov	r30, r0
    1662:	19 94       	eijmp

00001664 <memcmp>:
    1664:	fb 01       	movw	r30, r22
    1666:	dc 01       	movw	r26, r24
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <memcmp+0xe>
    166a:	8d 91       	ld	r24, X+
    166c:	01 90       	ld	r0, Z+
    166e:	80 19       	sub	r24, r0
    1670:	21 f4       	brne	.+8      	; 0x167a <memcmp+0x16>
    1672:	41 50       	subi	r20, 0x01	; 1
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	c8 f7       	brcc	.-14     	; 0x166a <memcmp+0x6>
    1678:	88 1b       	sub	r24, r24
    167a:	99 0b       	sbc	r25, r25
    167c:	08 95       	ret

0000167e <memcpy>:
    167e:	fb 01       	movw	r30, r22
    1680:	dc 01       	movw	r26, r24
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <memcpy+0xa>
    1684:	01 90       	ld	r0, Z+
    1686:	0d 92       	st	X+, r0
    1688:	41 50       	subi	r20, 0x01	; 1
    168a:	50 40       	sbci	r21, 0x00	; 0
    168c:	d8 f7       	brcc	.-10     	; 0x1684 <memcpy+0x6>
    168e:	08 95       	ret

00001690 <_exit>:
    1690:	f8 94       	cli

00001692 <__stop_program>:
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <__stop_program>
