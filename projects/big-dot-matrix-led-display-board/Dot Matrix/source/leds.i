/*****************************************************
Chip type           : ATmega32
Program type        : Application
Clock frequency     : 12.000000 MHz
Memory model        : Small
External SRAM size  : 0
Data Stack size     : 512
*****************************************************/
// CodeVisionAVR C Compiler
// (C) 1998-2004 Pavel Haiduc, HP InfoTech S.R.L.
// I/O registers definitions for the ATmega32
#pragma used+
#pragma used+
sfrb TWBR=0;
sfrb TWSR=1;
sfrb TWAR=2;
sfrb TWDR=3;
sfrb ADCL=4;
sfrb ADCH=5;
sfrw ADCW=4;      // 16 bit access
sfrb ADCSRA=6;
sfrb ADCSR=6;     // for compatibility with older code
sfrb ADMUX=7;
sfrb ACSR=8;
sfrb UBRRL=9;
sfrb UCSRB=0xa;
sfrb UCSRA=0xb;
sfrb UDR=0xc;
sfrb SPCR=0xd;
sfrb SPSR=0xe;
sfrb SPDR=0xf;
sfrb PIND=0x10;
sfrb DDRD=0x11;
sfrb PORTD=0x12;
sfrb PINC=0x13;
sfrb DDRC=0x14;
sfrb PORTC=0x15;
sfrb PINB=0x16;
sfrb DDRB=0x17;
sfrb PORTB=0x18;
sfrb PINA=0x19;
sfrb DDRA=0x1a;
sfrb PORTA=0x1b;
sfrb EECR=0x1c;
sfrb EEDR=0x1d;
sfrb EEARL=0x1e;
sfrb EEARH=0x1f;
sfrw EEAR=0x1e;   // 16 bit access
sfrb UBRRH=0x20;
sfrb UCSRC=0X20;
sfrb WDTCR=0x21;
sfrb ASSR=0x22;
sfrb OCR2=0x23;
sfrb TCNT2=0x24;
sfrb TCCR2=0x25;
sfrb ICR1L=0x26;
sfrb ICR1H=0x27;
sfrb OCR1BL=0x28;
sfrb OCR1BH=0x29;
sfrw OCR1B=0x28;  // 16 bit access
sfrb OCR1AL=0x2a;
sfrb OCR1AH=0x2b;
sfrw OCR1A=0x2a;  // 16 bit access
sfrb TCNT1L=0x2c;
sfrb TCNT1H=0x2d;
sfrw TCNT1=0x2c;  // 16 bit access
sfrb TCCR1B=0x2e;
sfrb TCCR1A=0x2f;
sfrb SFIOR=0x30;
sfrb OSCCAL=0x31;
sfrb TCNT0=0x32;
sfrb TCCR0=0x33;
sfrb MCUCSR=0x34;
sfrb MCUCR=0x35;
sfrb TWCR=0x36;
sfrb SPMCR=0x37;
sfrb TIFR=0x38;
sfrb TIMSK=0x39;
sfrb GIFR=0x3a;
sfrb GICR=0x3b;
sfrb OCR0=0X3c;
sfrb SPL=0x3d;
sfrb SPH=0x3e;
sfrb SREG=0x3f;
#pragma used-
// Interrupt vectors definitions
// Needed by the power management functions (sleep.h)
#asm
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x80
	.EQU __sm_mask=0x70
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0x60
	.EQU __sm_ext_standby=0x70
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif
#endasm
// CodeVisionAVR C Compiler
// (C) 1998-2000 Pavel Haiduc, HP InfoTech S.R.L.
#pragma used+
#pragma used+
void delay_us(unsigned int n);
void delay_ms(unsigned int n);
#pragma used-
flash unsigned char numfont[14][24]=
	{
		{0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xC1,0x3F,0x7F,0xFF,0xF,0xC7,0x33,0x39,0xF1,0xC7,0xE,0xF8,0x0,0x80,0x0},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xF9,0xF9,0xF7,0xF3,0xF,0xC6,0xF1,0x3C,0x39,0xF8,0xF0,0xC7,0x1,0x4C,0xB1,0x41,0x87,0xE},
		{0x7F,0x9F,0xBF,0x9F,0xCF,0xEF,0xCF,0xCF,0xCF,0x1,0x60,0x83,0xF,0x9E,0x3E,0x9F,0xF,0x83,0x60,0xB2,0x4D,0xB2,0x4D,0xB2},
		{0xE0,0x9F,0x7F,0xFF,0x7F,0x9F,0xEF,0xF3,0xF3,0xFC,0x80,0x1,0x2,0xD,0x12,0xD,0x32,0xD,0x12,0xD,0x2,0xD,0x2,0x81},
		{0xFF,0x1F,0xE3,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0,0x0,0x1F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x3,0xC,0x3,0x1},
		{0x7,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0x0,0x38,0x3C,0x7C,0x3C,0x7C,0x3C,0x7C,0x3C,0x64,0x18,0x4,0x1B},
		{0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x3,0x0,0x38,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0x20,0xD8,0x20,0x18,0x6},
		{0xF8,0xF7,0xCF,0xCF,0xCF,0xCF,0xF7,0xE7,0xF8,0xFF,0x7E,0xF8,0xF8,0xF0,0xF0,0xC0,0x0,0x0,0xE0,0x30,0xB8,0x38,0x3E,0xB7},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9F,0xF6,0xFF,0xFF,0xFF,0xFF,0xB3,0xFF,0xFC,0x33,0xFE,0xF9,0xF7,0x70,0x79},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xCF,0xF9,0xFF,0xFF,0xFF,0x7F,0xCF,0xF9,0xFF,0x1F,0xFF,0xF0,0xF3,0x7D,0x99,0x3E,0xFE},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7C,0xFF,0xFF,0x9F,0xF3,0xFF,0xFE,0xFF,0x1F,0xFF,0xF0,0x73,0x7C,0x9D,0x1E,0xFF,0x30,0x1F},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x3F,0xFF,0xF3,0x3F,0xFF,0xFF,0xFF,0x18,0xF3,0x7C,0x9F,0x1E,0xFF,0x18,0x1F,0x0,0x0},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x33,0xFF,0xFF,0xFF,0xFB,0x9F,0xFC,0x4,0x3F,0x9F,0xE4,0x7,0xFC,0x0,0x0,0x0},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xFF,0xFF,0xFF,0xFF,0x3F,0xF9,0xFF,0xFF,0xC3,0xDF,0xE7,0xC3,0xFF,0x0,0x0,0x0}
	};
	flash unsigned char Digits[12][24][2]=
{
        /*0*/{{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{127,254},{63,252},{15,248},{7,240},{7,224},{7,240},{15,248},{31,252},{63,254},{127,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255}},
        /*1*/{{255,255},{127,254},{63,254},{63,252},{31,252},{31,252},{31,252},{31,248},{63,248},{63,248},{63,248},{127,248},{127,248},{127,248},{127,248},{255,248},{255,248},{255,248},{255,248},{255,248},{255,248},{255,248},{255,252},{255,253}},
        /*2*/{{255,223},{207,207},{143,207},{7,194},{7,192},{3,192},{3,192},{7,192},{7,224},{15,240},{31,252},{31,252},{31,252},{63,252},{63,252},{63,252},{63,252},{63,252},{63,252},{127,252},{127,252},{127,254},{127,254},{127,254}},
        /*3*/{{247,125},{227,57},{227,56},{1,0},{1,0},{0,0},{1,128},{1,128},{3,192},{7,230},{7,255},{7,255},{15,255},{15,255},{15,255},{15,255},{15,255},{15,255},{15,255},{31,255},{159,255},{159,255},{159,255},{255,255}},
        /*4*/{{255,193},{231,128},{71,128},{3,254},{3,255},{1,127},{1,0},{3,0},{7,128},{7,192},{15,224},{15,254},{31,254},{31,254},{31,254},{31,254},{31,254},{63,254},{63,254},{63,254},{63,254},{63,255},{63,255},{63,255}},
        /*5*/{{255,254},{127,252},{63,252},{63,248},{63,240},{31,240},{31,224},{31,224},{159,192},{143,193},{207,131},{199,131},{231,135},{231,143},{227,15},{243,14},{227,30},{99,12},{3,0},{3,128},{3,128},{3,128},{7,193},{143,227}},
        /*6*/{{255,240},{63,224},{31,192},{31,192},{143,255},{199,255},{231,31},{199,15},{7,0},{7,128},{7,128},{15,128},{63,224},{31,248},{31,252},{15,254},{7,255},{135,255},{199,255},{195,255},{227,255},{243,255},{243,255},{251,255}},
        /*7*/{{247,255},{247,159},{227,159},{195,143},{195,7},{129,7},{129,3},{131,3},{3,129},{7,193},{7,192},{15,224},{15,240},{31,240},{31,240},{63,248},{63,248},{63,252},{63,252},{127,252},{127,252},{127,254},{127,254},{255,254}},
        /*8*/{{255,252},{255,252},{255,252},{127,252},{127,248},{127,248},{127,248},{63,240},{63,240},{63,240},{31,224},{31,224},{15,224},{7,193},{7,129},{3,131},{129,3},{129,3},{193,7},{195,7},{227,143},{227,143},{243,159},{255,255}},
        /*9*/{{255,255},{63,252},{31,248},{15,240},{15,240},{7,240},{231,240},{231,241},{3,240},{3,240},{3,240},{7,240},{7,240},{255,240},{255,240},{255,240},{255,224},{255,224},{255,192},{255,193},{255,225},{255,225},{255,227},{255,231}},
        /*:*/{{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{193,255},{193,255},{193,255},{193,255},{193,255},{255,255},{255,255},{255,255},{255,255},{193,255},{193,255},{193,255},{193,255},{193,255},{255,255},{255,255}},
        /*SPACE*/{{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255},{255,255}}
};
flash unsigned char buffer[14][24]=
	{
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},
		{0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}
	};
	unsigned char satr=0;/*„ €Ì— ‘„«—‰œÂ ”ÿ—*/
unsigned char hour=12,minute=58,second=30,weekday=6,monthday=7,monthyear=5,timedigit[9];
unsigned int year=1386;
unsigned char char1;
unsigned char char2;
interrupt [10] void timer1_ovf_isr(void)
{
   unsigned char i=0;
   TCNT1H=0xd1;
   TCNT1L=0x1f;  
   PORTB.0=1;//OE inactive    
   PORTD=0xff-numfont[0][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;          
                            PORTD=0xff-numfont[1][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;              
      PORTD=0xff-numfont[2][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;                      
      PORTD=0xff-numfont[3][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;      
   PORTD=0xff-numfont[4][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;   
                                  PORTD=0xff-numfont[5][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[6][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[7][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[8][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;     
   PORTD=0xff-numfont[9][satr];
   PORTC=0x20|i;       
   PORTC=PORTC|0x30;
   i++;                      
      PORTD=0xff-numfont[10][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[11][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[12][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
   PORTD=0xff-numfont[13][satr];
   PORTC=0x20|i;
   PORTC=PORTC|0x30;
   i++;
        PORTB.0=0;   
   PORTC=satr;
   satr++;   
   if(satr==24)
      satr=0; 
}
// Timer 2 overflow interrupt service routine
interrupt [6] void timer2_ovf_isr(void)
{                                             
            }
// Declare your global variables here
void main(void)
{
// Declare your local variables here
// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0xff;
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x01;
// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0xff;
// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0xff;
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=FFh
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;
// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer 1 Stopped
// Mode: Normal top=FFFFh
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer 1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x81;
TCNT1H=0xa2;
TCNT1L=0x3f;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
// Timer/Counter 2 initialization
// Clock source: TOSC1 pin
// Clock value: PCK2/128
// Mode: Normal top=FFh
// OC2 output: Disconnected
ASSR=0x08;
TCCR2=0x05;
TCNT2=0x00;
OCR2=0x00;
// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;
// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x44;
// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;
// Global enable interrupts
#asm("sei")
while (1);
}
