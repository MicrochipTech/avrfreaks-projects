Instructions for Patching the JTAGICE (mega163/16) firmware to the Butterfly board (mega169).You will need:Two butterfly boards.An ISP or parallel programmer, such as an STK500 equivalentor the BUTLoad software from AVR Freaks.AVR Studio v12 (that contains the JTAG ICE rev 0x7F)ReAVR from jaTools (get the Jatools hex editor too.)A code "Patching" script or a text editor such asProgrammers Notepad or AVR Studio.To make an ICE-Butterfly without re-creating the pseudo source code skip to step 8.This is a complex procedure; care must be taken to use the right hex files for the code re-assembly. Step 1: save the chaitnoir.hex file to a new name, this will be used for comparison differences.Step 2: Install a bootloader into the butterfly that looks to AVRPROG like a mega163. Ideally the bootloader should start at 0x1E00 The Bootloader should connect at 19.2K baud.Step 3: Using AVRStudio perform a manual upgrade by following the "BootIce" manual upgrade instructions. The flash can not be blank or the JTAG "Upgrade" will not load the Flash. Do not worry about the fuses at this time.Step 4: An ISP programmer is needed to read the flash into a *.hex file. The patch code uses the name chiatnoir.hex.  It is important that the raw code from the upgrade be disassembled; disassembling the patched hexfile will result in an unusable mess. Step 5: Use ReAVR to make an assembly file from chaitnoir.hex this will be called chiatnoir.hex.asm. Included in this distribution are the support files to label the registers and code data segments. These are informational the patch diff file was made against a version that did not mask the elpm instructions.  These were converted to lpm instructions by hand.Step 6: "Patch" the chiatnoir.hex.asm file with your favorite patching tool. The diff file is called chiatnoir.dif. To verify that you have loaded the 0x7F version of JTAGICE look at line 1947 after lable L15DE: if this is not 0x7F then the patches may not work, or will not be aligned.It is recommended that the JaTools hex editor and a diff program be used to verify that the source builds the original with no changes. There are four hex files. The patched hex file included in this distribution. The hex file recovered from the rom, the hexfile built with the mega163 tags (which should be identical to the recovered hexfile. The build with the mega169 tags should be identical to the hex file included in this distribution.The patch diff file includes George Kolovos bootloader thathas been modified for 8Mz. It is important that the Ice runat near 8MHz. If you want you can calibrate it to run near7.23728 Mhz. The bootloader also contains the LCD init code.If a "Patch" script is not used, then edit the chiatnoir.hex.asm with Programmers notepad or AVR studio to include the #ifdefs and comment notes. This is done with global find and replace. You will have to add in the JXXXX: and PXXXX: labels and references these are points in the code moved by the larger interrupt table and the SRAM offset from 0x60 to 0x100.Step 7: Create a project and assemble and build the patched chatnoir file. Make sure that the mega169 header is used for the ifdefs to work. If you saved the included "chaitnoir.hex" you can diff that to verify the patches are included. The code can also be assembled to run as the mega163 if the mega163 header is used instead.Step 8: Load the chiatnoir.hex file into the butterfly using an ISP programmer. It is important that the updated bootloader that works at 8Mz is used. Now set the fuses in the butterfly to boot from 0x1C00 and to disable the JTAG. We will use those pins to connect to the target Butterfly. This means that it will not be possible to program the programmer with JTAG.On application start (push the joystick up) the LCD will display JTAGBT.  The special function bars indicate status. The bar under bar above the J will light when the pod connect to the host. The bar above the T is the serial port activity from the host. The bar above the A is the JTAG activity. These can be hard to see as the persistence of the LCD is not the same as the LED. Step 9:Connect the target butterfly. A 10K or 47K ohm jumper is shunted between pins 3 and 4 of the USI header (J405) On the ICE butterfly.[Optionally Pin3 (J405ICE) can be connected through an inverter to the target VCC reference. This will allow the ICE to detect whether or not the target is powered and indicate the state on the bar above the J.There is no voltage shift, so it is best to use the shunt resistor and monitor the ADC on the target. See the bootice plans for suggested Voltage shift/load balancing circuitry that will drive this pin.]Connect the grounds from the ICE butterfly to the target butterfly. Connect Reset from (target J401 pin 6) to the USI header (ice J405 pin 1)Connect the 4 JTAG signals. These are TCK,TDO,TMS,and TDI The signals are connected pin to pin. TDO and TDI are NOT swapped.Connect both butterflies to a stable 3.3 volt source (turned off at this step). The battery will drain quickly so do not use the coin cell supplied with the butterfly. Note that the VCC on the JTAG header is isolated from the VCC on Ports B&D. Connect power to the power pins on PORTB or PORTD.DO NOT connect power to Pin 4 (J401) of the JTAG header; this is  monitoring power.DO connect Pin 4 (J401) of the JTAG header (target) to pin 1 of the ADC Header(ICE J407.) This is necessary for Studio to see that the ICE is connected.There is enough power on the reset line to drive the target when the ICE is switched on. So use care when choosing what power supply to use. There has been a lot of discussion, on the AVR freaks forum, about what load the Butterfly needs if external power is used.Because the Driving Butterfly can not control reset or switch the vcc pin to monitor power, it is not possible to make a flat ribbon connector to link to the target. It is recommended to use single jumper wires. These can easily be made by crimping header pins onto a short length of wire. Cover the crimp pin with heat shrink tubing. If clear heat shrink tubing is used then it is possible to label the function onto the tip of the wire.Step 10:With the target connected to the ICE and the ICE connected to the PC, Launch AVR Studio. Turn on the ICE by pressing the joystick "up." The LCD should show the string JTAGBT. See above for a discussion on the state of the special function bars above the word JTAG. Select Program AVR (the bottom menu item) from the tools menu. Choose connect. Select JTAG ICE on Auto (or the serial port desired.) click the "Connect" button.If the ICE is working you will see the "Program" dialog. Select the "Board" tab. You should see the message indicating the revision of the system. Read and verify the Flash and EEPROM from the "Program" tab.You are now ready to use the ICE as a debugger. See the AVR studio help file to learn how to set breakpoints and debug with the ICE Butterfly.***************Troubleshooting:The best place to start is by searching the AVR freaks.net for Similar issues. The best diagnostic tool is a terminal program like Br@y's or Smiley's terminal.The sync byte of the ICE is 0x20 or the space character. In the term program, press <space><space> this should return AVRONCDA additional <space> characters will return 'A.'The tech note AVR060 details the front end. Use Tables 26 and 28 to read some of the parameters (like the voltage) Table 27 gives the responses expected.The special function segments of the butterfly LCD are used in place of LEDs these will flash when I/O happens. SF segment 1 is used to detect target connection/voltage. It is tied to the inverse of portE6.During testing it was observed that if the STK dialog was left on the page with the voltage setting, Sometimes studio tries to up the baud rate to the highest setting. A message in the window says that the ICE lost sync; and to power cycle the pod. The work around is to change the page to the advanced or program tab before cycling the power.  This could probably be fixed by calibrating the osccal to the baud rate.The voltage returned is a port to asm from the example application. See below for details, it is affected by the LDR. The c version uses fixed point. The asm port is not working as well as would be desired.****************Notes and enhancements.The original HW used port C to return the hardware revision in the lower for bits. These are anded with either 8 or C to form the returned value. Since the Butterfly does not have a port C free, a fixed return of 0xBF (for butterfly) is returned. Some ICE clones pull Bit 3 high for a return of C1. Level shifting.If the ICE-Butterfly is to be used with something like a mega128 that is running at 5v, then level shifting and load balancing is needed. See the plans for the BootICE clones for suggestions as to how to do this. The butterfly must be used with 3.5 or so volts to prevent damage to the Dataflash chip, The ADC is also referenced at 3.x volts through the LDR. Removal of the Dataflash and a replacement of the LDR with a fixed voltage divider can be used if 5V operation is needed.The main change to the code, other than offsets is the ADC return section. This involved quite a bit of change in that it is necessary to use the LDR to calibrate the vref target (see butterfly sample code.) So the sample takes twice as long, counting to 16. Eight steps for the ADC and 8 steps for the vref.There are undocumented codes. One of these uses a soft function address pointer to change the PML behavior. These codes have not been tested.Should ATMEL update the JTAG firmware, it will be necessary to re-locate the JXXXX addresses in the jump table. Changes to SRAM offsets are also a possibility.Most of the TAP code was left uncommented. This is the IP of the system.  Most of the functionality is documented in the 169 datasheets for the programming side. Only places where the code needed patching were notes inserted into the comments field. These were mostly for debugging and searching for mask bits that were held in register constants.If the code is recompiled, port B be can be used for the TAP port out. That way the JTAG is available to update the board. When using port b in the default configuration; pin 5 is connected to the speaker. This will cause clicks, whistles and screams as the TAP port is accessed. An option is to move the TDI signal to another unused pin.*******************Disclaimers and such,This "Patch" released under a General Public Domain Licence. It is not warranted to work or be of use. Improper use can damage systems and cause loss of data. Some of the code used is the property of Atmel corp and should not be used in any commercial product without the express permission of Atmel corp. The "patch" is provided for informational and student use only.