
simon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000298  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800064  0000029c  00000330  2**0
                  ALLOC
  3 .noinit       00000000  00800064  00800064  00000330  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000330  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000005c  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000021f  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000010d  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000276  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000173  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 84 00 	jmp	0x108 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <CreateTimerRand>:
}

uint8_t CreateTimerRand(void)
{
	uint8_t RVal = TCNT0;   // Get the timer0 value into a variable
  8e:	82 b7       	in	r24, 0x32	; 50

	// Priority encoder: Uses ordered tests to save code so that only
	// the first matching test code is executed.
	if      (RVal <= 64)  RVal = _BV(0);
  90:	81 34       	cpi	r24, 0x41	; 65
  92:	10 f4       	brcc	.+4      	; 0x98 <CreateTimerRand+0xa>
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	09 c0       	rjmp	.+18     	; 0xaa <CreateTimerRand+0x1c>
	else if (RVal <= 128) RVal = _BV(1);
  98:	81 38       	cpi	r24, 0x81	; 129
  9a:	10 f4       	brcc	.+4      	; 0xa0 <CreateTimerRand+0x12>
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	05 c0       	rjmp	.+10     	; 0xaa <CreateTimerRand+0x1c>
	else if (RVal <= 192) RVal = _BV(2);
  a0:	81 3c       	cpi	r24, 0xC1	; 193
  a2:	10 f4       	brcc	.+4      	; 0xa8 <CreateTimerRand+0x1a>
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	01 c0       	rjmp	.+2      	; 0xaa <CreateTimerRand+0x1c>
	else                  RVal = _BV(3);
  a8:	88 e0       	ldi	r24, 0x08	; 8

	return RVal;            // Shift 1 by the new random number between 0 and 3, return the new sequence byte
}
  aa:	99 27       	eor	r25, r25
  ac:	08 95       	ret

000000ae <Delay10MS>:

void Delay10MS(uint8_t Num)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	28 2f       	mov	r18, r24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	2f 3f       	cpi	r18, 0xFF	; 255
  b8:	49 f0       	breq	.+18     	; 0xcc <Delay10MS+0x1e>
  ba:	a4 ec       	ldi	r26, 0xC4	; 196
  bc:	b9 e0       	ldi	r27, 0x09	; 9
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	cd 01       	movw	r24, r26
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <Delay10MS+0x16>
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	d8 f7       	brcc	.-10     	; 0xc2 <Delay10MS+0x14>
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <GenerateTone>:
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	11 f4       	brne	.+4      	; 0xda <GenerateTone+0x8>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	09 c0       	rjmp	.+18     	; 0xec <GenerateTone+0x1a>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	11 f4       	brne	.+4      	; 0xe2 <GenerateTone+0x10>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	05 c0       	rjmp	.+10     	; 0xec <GenerateTone+0x1a>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	11 f4       	brne	.+4      	; 0xea <GenerateTone+0x18>
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	01 c0       	rjmp	.+2      	; 0xec <GenerateTone+0x1a>
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	1d bc       	out	0x2d, r1	; 45
  ee:	1c bc       	out	0x2c, r1	; 44
  f0:	e8 2f       	mov	r30, r24
  f2:	ff 27       	eor	r31, r31
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	99 27       	eor	r25, r25
  fc:	9b bd       	out	0x2b, r25	; 43
  fe:	8a bd       	out	0x2a, r24	; 42
 100:	8e b5       	in	r24, 0x2e	; 46
 102:	81 60       	ori	r24, 0x01	; 1
 104:	8e bd       	out	0x2e, r24	; 46
 106:	08 95       	ret

00000108 <main>:
 108:	cb e4       	ldi	r28, 0x4B	; 75
 10a:	d4 e0       	ldi	r29, 0x04	; 4
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	84 e1       	ldi	r24, 0x14	; 20
 114:	fe 01       	movw	r30, r28
 116:	31 96       	adiw	r30, 0x01	; 1
 118:	11 92       	st	Z+, r1
 11a:	8a 95       	dec	r24
 11c:	e9 f7       	brne	.-6      	; 0x118 <main+0x10>
 11e:	e2 2e       	mov	r14, r18
 120:	f2 2e       	mov	r15, r18
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
 126:	84 bb       	out	0x14, r24	; 20
 128:	2a bb       	out	0x1a, r18	; 26
 12a:	22 bb       	out	0x12, r18	; 18
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	8b bb       	out	0x1b, r24	; 27
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	8f bd       	out	0x2f, r24	; 47
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	8e bd       	out	0x2e, r24	; 46
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	83 bf       	out	0x33, r24	; 51
 13e:	82 2f       	mov	r24, r18
 140:	99 27       	eor	r25, r25
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	91 05       	cpc	r25, r1
 146:	09 f4       	brne	.+2      	; 0x14a <main+0x42>
 148:	4f c0       	rjmp	.+158    	; 0x1e8 <main+0xe0>
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	91 05       	cpc	r25, r1
 14e:	2c f4       	brge	.+10     	; 0x15a <main+0x52>
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	79 f0       	breq	.+30     	; 0x172 <main+0x6a>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	11 f1       	breq	.+68     	; 0x19c <main+0x94>
 158:	f2 cf       	rjmp	.-28     	; 0x13e <main+0x36>
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	91 05       	cpc	r25, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <main+0x5a>
 160:	8e c0       	rjmp	.+284    	; 0x27e <main+0x176>
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	91 05       	cpc	r25, r1
 166:	0c f4       	brge	.+2      	; 0x16a <main+0x62>
 168:	7a c0       	rjmp	.+244    	; 0x25e <main+0x156>
 16a:	05 97       	sbiw	r24, 0x05	; 5
 16c:	09 f4       	brne	.+2      	; 0x170 <main+0x68>
 16e:	8b c0       	rjmp	.+278    	; 0x286 <main+0x17e>
 170:	e6 cf       	rjmp	.-52     	; 0x13e <main+0x36>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	f8 2e       	mov	r15, r24
 176:	ee 24       	eor	r14, r14
 178:	80 ef       	ldi	r24, 0xF0	; 240
 17a:	85 bb       	out	0x15, r24	; 21
 17c:	89 b3       	in	r24, 0x19	; 25
 17e:	80 95       	com	r24
 180:	99 27       	eor	r25, r25
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	90 70       	andi	r25, 0x00	; 0
 186:	89 2b       	or	r24, r25
 188:	c9 f3       	breq	.-14     	; 0x17c <main+0x74>
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	0e 94 47 00 	call	0x8e <CreateTimerRand>
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	0e 94 57 00 	call	0xae <Delay10MS>
 19a:	6f c0       	rjmp	.+222    	; 0x27a <main+0x172>
 19c:	8e 01       	movw	r16, r28
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	0e 0d       	add	r16, r14
 1a4:	11 1d       	adc	r17, r1
 1a6:	f8 01       	movw	r30, r16
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 69 00 	call	0xd2 <GenerateTone>
 1ae:	f8 01       	movw	r30, r16
 1b0:	90 81       	ld	r25, Z
 1b2:	90 95       	com	r25
 1b4:	90 6f       	ori	r25, 0xF0	; 240
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	89 23       	and	r24, r25
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	84 e1       	ldi	r24, 0x14	; 20
 1be:	0e 94 57 00 	call	0xae <Delay10MS>
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	f8 01       	movw	r30, r16
 1c6:	90 81       	ld	r25, Z
 1c8:	89 2b       	or	r24, r25
 1ca:	80 6f       	ori	r24, 0xF0	; 240
 1cc:	85 bb       	out	0x15, r24	; 21
 1ce:	84 e1       	ldi	r24, 0x14	; 20
 1d0:	0e 94 57 00 	call	0xae <Delay10MS>
 1d4:	8e b5       	in	r24, 0x2e	; 46
 1d6:	8e 7f       	andi	r24, 0xFE	; 254
 1d8:	8e bd       	out	0x2e, r24	; 46
 1da:	95 98       	cbi	0x12, 5	; 18
 1dc:	e3 94       	inc	r14
 1de:	ef 14       	cp	r14, r15
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <main+0xdc>
 1e2:	4b c0       	rjmp	.+150    	; 0x27a <main+0x172>
 1e4:	ee 24       	eor	r14, r14
 1e6:	39 c0       	rjmp	.+114    	; 0x25a <main+0x152>
 1e8:	89 b3       	in	r24, 0x19	; 25
 1ea:	80 95       	com	r24
 1ec:	99 27       	eor	r25, r25
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	90 70       	andi	r25, 0x00	; 0
 1f2:	89 2b       	or	r24, r25
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <main+0xe0>
 1f6:	09 b3       	in	r16, 0x19	; 25
 1f8:	00 95       	com	r16
 1fa:	0f 70       	andi	r16, 0x0F	; 15
 1fc:	e1 f3       	breq	.-8      	; 0x1f6 <main+0xee>
 1fe:	80 2f       	mov	r24, r16
 200:	0e 94 69 00 	call	0xd2 <GenerateTone>
 204:	90 2f       	mov	r25, r16
 206:	90 95       	com	r25
 208:	90 6f       	ori	r25, 0xF0	; 240
 20a:	85 b3       	in	r24, 0x15	; 21
 20c:	89 23       	and	r24, r25
 20e:	85 bb       	out	0x15, r24	; 21
 210:	84 e1       	ldi	r24, 0x14	; 20
 212:	0e 94 57 00 	call	0xae <Delay10MS>
 216:	85 b3       	in	r24, 0x15	; 21
 218:	80 2b       	or	r24, r16
 21a:	80 6f       	ori	r24, 0xF0	; 240
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	0e 94 57 00 	call	0xae <Delay10MS>
 224:	8e b5       	in	r24, 0x2e	; 46
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	8e bd       	out	0x2e, r24	; 46
 22a:	95 98       	cbi	0x12, 5	; 18
 22c:	fe 01       	movw	r30, r28
 22e:	ee 0d       	add	r30, r14
 230:	f1 1d       	adc	r31, r1
 232:	81 81       	ldd	r24, Z+1	; 0x01
 234:	08 17       	cp	r16, r24
 236:	29 f5       	brne	.+74     	; 0x282 <main+0x17a>
 238:	e3 94       	inc	r14
 23a:	ef 14       	cp	r14, r15
 23c:	71 f4       	brne	.+28     	; 0x25a <main+0x152>
 23e:	f3 94       	inc	r15
 240:	ee 24       	eor	r14, r14
 242:	f4 e1       	ldi	r31, 0x14	; 20
 244:	ff 15       	cp	r31, r15
 246:	30 f1       	brcs	.+76     	; 0x294 <main+0x18c>
 248:	8e 01       	movw	r16, r28
 24a:	0f 0d       	add	r16, r15
 24c:	11 1d       	adc	r17, r1
 24e:	0e 94 47 00 	call	0x8e <CreateTimerRand>
 252:	f8 01       	movw	r30, r16
 254:	80 83       	st	Z, r24
 256:	23 e0       	ldi	r18, 0x03	; 3
 258:	72 cf       	rjmp	.-284    	; 0x13e <main+0x36>
 25a:	22 e0       	ldi	r18, 0x02	; 2
 25c:	70 cf       	rjmp	.-288    	; 0x13e <main+0x36>
 25e:	02 e0       	ldi	r16, 0x02	; 2
 260:	80 ef       	ldi	r24, 0xF0	; 240
 262:	85 bb       	out	0x15, r24	; 21
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	0e 94 57 00 	call	0xae <Delay10MS>
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	0e 94 57 00 	call	0xae <Delay10MS>
 274:	01 50       	subi	r16, 0x01	; 1
 276:	07 ff       	sbrs	r16, 7
 278:	f3 cf       	rjmp	.-26     	; 0x260 <main+0x158>
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	60 cf       	rjmp	.-320    	; 0x13e <main+0x36>
 27e:	80 ef       	ldi	r24, 0xF0	; 240
 280:	85 bb       	out	0x15, r24	; 21
 282:	24 e0       	ldi	r18, 0x04	; 4
 284:	5c cf       	rjmp	.-328    	; 0x13e <main+0x36>
 286:	85 b3       	in	r24, 0x15	; 21
 288:	80 95       	com	r24
 28a:	80 6f       	ori	r24, 0xF0	; 240
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	84 e1       	ldi	r24, 0x14	; 20
 290:	0e 94 57 00 	call	0xae <Delay10MS>
 294:	25 e0       	ldi	r18, 0x05	; 5
 296:	53 cf       	rjmp	.-346    	; 0x13e <main+0x36>
