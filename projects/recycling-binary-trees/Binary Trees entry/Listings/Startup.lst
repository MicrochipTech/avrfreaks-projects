


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ***********************
    2 00000000         ;
    3 00000000         ; Startup.s - Startup code for Stellaris.
    4 00000000         ;
    5 00000000         ; Copyright (c) 2006 Luminary Micro, Inc.  All rights re
                       served.
    6 00000000         ;
    7 00000000         ; Software License Agreement
    8 00000000         ;
    9 00000000         ; Luminary Micro, Inc. (LMI) is supplying this software 
                       for use solely and
   10 00000000         ; exclusively on LMI's Stellaris Family of microcontroll
                       er products.
   11 00000000         ;
   12 00000000         ; The software is owned by LMI and/or its suppliers, and
                        is protected under
   13 00000000         ; applicable copyright laws.  All rights are reserved.  
                       Any use in violation of
   14 00000000         ; the foregoing restrictions may subject the user to cri
                       minal sanctions under
   15 00000000         ; applicable laws, as well as to civil liability for the
                        breach of the terms
   16 00000000         ; and conditions of this license.
   17 00000000         ;
   18 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   19 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   20 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   21 00000000         ; LMI SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPE
                       CIAL, INCIDENTAL, OR
   22 00000000         ; CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   23 00000000         ;
   24 00000000         ; This is part of revision 852 of the Stellaris Driver L
                       ibrary.
   25 00000000         ;
   26 00000000         ;*******************************************************
                       ***********************
   27 00000000         
   28 00000000         ;*******************************************************
                       ***********************
   29 00000000         ;
   30 00000000         ; <h> Stack Configuration
   31 00000000         ;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   32 00000000         ; </h>
   33 00000000         ;
   34 00000000         ;*******************************************************
                       ***********************
   35 00000000 00000100 
                       Stack   EQU              0x00000100
   36 00000000         
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000         ;
   39 00000000         ; <h> Heap Configuration
   40 00000000         ;   <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   41 00000000         ; </h>



ARM Macro Assembler    Page 2 


   42 00000000         ;
   43 00000000         ;*******************************************************
                       ***********************
   44 00000000 00000000 
                       Heap    EQU              0x00000000
   45 00000000         
   46 00000000         ;*******************************************************
                       ***********************
   47 00000000         ;
   48 00000000         ; Allocate space for the stack.
   49 00000000         ;
   50 00000000         ;*******************************************************
                       ***********************
   51 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   52 00000000         StackMem
   53 00000000                 SPACE            Stack
   54 00000100         
   55 00000100         ;*******************************************************
                       ***********************
   56 00000100         ;
   57 00000100         ; Allocate space for the heap.
   58 00000100         ;
   59 00000100         ;*******************************************************
                       ***********************
   60 00000100                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   61 00000000         HeapMem
   62 00000000                 SPACE            Heap
   63 00000000         
   64 00000000         ;*******************************************************
                       ***********************
   65 00000000         ;
   66 00000000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   67 00000000         ;
   68 00000000         ;*******************************************************
                       ***********************
   69 00000000                 PRESERVE8
   70 00000000         
   71 00000000         ;*******************************************************
                       ***********************
   72 00000000         ;
   73 00000000         ; Place code into the reset code section.
   74 00000000         ;
   75 00000000         ;*******************************************************
                       ***********************
   76 00000000                 AREA             RESET, CODE, READONLY
   77 00000000                 THUMB
   78 00000000         
   79 00000000         ;*******************************************************
                       ***********************
   80 00000000         ;
   81 00000000         ; The vector table.
   82 00000000         ;
   83 00000000         ;*******************************************************
                       ***********************
   84 00000000         Vectors
   85 00000000 00000100        DCD              StackMem + Stack ; Top of Stack



ARM Macro Assembler    Page 3 


                                                            
   86 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   87 00000008 00000000        DCD              NmiSR       ; NMI Handler
   88 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r
   89 00000010 00000000        DCD              IntDefaultHandler 
                                                            ; MPU Fault Handler
                                                            
   90 00000014 00000000        DCD              IntDefaultHandler 
                                                            ; Bus Fault Handler
                                                            
   91 00000018 00000000        DCD              IntDefaultHandler ; Usage Fault
                                                             Handler
   92 0000001C 00000000        DCD              0           ; Reserved
   93 00000020 00000000        DCD              0           ; Reserved
   94 00000024 00000000        DCD              0           ; Reserved
   95 00000028 00000000        DCD              0           ; Reserved
   96 0000002C 00000000        DCD              IntDefaultHandler 
                                                            ; SVCall Handler
   97 00000030 00000000        DCD              IntDefaultHandler ; Debug Monit
                                                            or Handler
   98 00000034 00000000        DCD              0           ; Reserved
   99 00000038 00000000        DCD              IntDefaultHandler 
                                                            ; PendSV Handler
  100 0000003C 00000000        DCD              IntDefaultHandler 
                                                            ; SysTick Handler
  101 00000040 00000000        DCD              IntDefaultHandler ; GPIO Port A
                                                            
  102 00000044 00000000        DCD              IntDefaultHandler ; GPIO Port B
                                                            
  103 00000048 00000000        DCD              IntDefaultHandler ; GPIO Port C
                                                            
  104 0000004C 00000000        DCD              IntDefaultHandler ; GPIO Port D
                                                            
  105 00000050 00000000        DCD              IntDefaultHandler ; GPIO Port E
                                                            
  106 00000054 00000000        DCD              IntDefaultHandler ; UART0
  107 00000058 00000000        DCD              IntDefaultHandler ; UART1
  108 0000005C 00000000        DCD              IntDefaultHandler ; SSI
  109 00000060 00000000        DCD              IntDefaultHandler ; I2C
  110 00000064 00000000        DCD              IntDefaultHandler ; PWM Fault
  111 00000068 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 0
  112 0000006C 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 1
  113 00000070 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 2
  114 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder
  115 00000078                 EXTERN           ADCIntHandler
  116 00000078 00000000        DCD              ADCIntHandler ; ADC Sequence 0
  117 0000007C 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 1
  118 00000080 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 2
  119 00000084 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 3
  120 00000088 00000000        DCD              IntDefaultHandler ; Watchdog
  121 0000008C 00000000        DCD              IntDefaultHandler ; Timer 0A



ARM Macro Assembler    Page 4 


  122 00000090 00000000        DCD              IntDefaultHandler ; Timer 0B
  123 00000094 00000000        DCD              IntDefaultHandler ; Timer 1A
  124 00000098 00000000        DCD              IntDefaultHandler ; Timer 1B
  125 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2A
  126 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2B
  127 000000A4 00000000        DCD              IntDefaultHandler ; Comp 0
  128 000000A8 00000000        DCD              IntDefaultHandler ; Comp 1
  129 000000AC 00000000        DCD              IntDefaultHandler ; Comp 2
  130 000000B0 00000000        DCD              IntDefaultHandler 
                                                            ; System Control
  131 000000B4 00000000        DCD              IntDefaultHandler 
                                                            ; Flash Control
  132 000000B8         
  133 000000B8         ;*******************************************************
                       ***********************
  134 000000B8         ;
  135 000000B8         ; This is the code that gets called when the processor f
                       irst starts execution
  136 000000B8         ; following a reset event.
  137 000000B8         ;
  138 000000B8         ;*******************************************************
                       ***********************
  139 000000B8                 EXPORT           Reset_Handler
  140 000000B8         Reset_Handler
  141 000000B8         ;
  142 000000B8         ; Call __main() in the C library, which will call the ap
                       plication
  143 000000B8         ; supplied main().
  144 000000B8         ;
  145 000000B8                 IMPORT           __main
  146 000000B8 4802            LDR              R0, =__main
  147 000000BA 4700            BX               R0
  148 000000BC         
  149 000000BC         ;*******************************************************
                       ***********************
  150 000000BC         ;
  151 000000BC         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  152 000000BC         ; simply enters an infinite loop, preserving the system 
                       state for examination
  153 000000BC         ; by a debugger.
  154 000000BC         ;
  155 000000BC         ;*******************************************************
                       ***********************
  156 000000BC         NmiSR
  157 000000BC E7FE            B                NmiSR
  158 000000BE         
  159 000000BE         ;*******************************************************
                       ***********************
  160 000000BE         ;
  161 000000BE         ; This is the code that gets called when the processor r
                       eceives a fault
  162 000000BE         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  163 000000BE         ; for examination by a debugger.
  164 000000BE         ;
  165 000000BE         ;*******************************************************
                       ***********************
  166 000000BE         FaultISR



ARM Macro Assembler    Page 5 


  167 000000BE E7FE            B                FaultISR
  168 000000C0         
  169 000000C0         ;*******************************************************
                       ***********************
  170 000000C0         ;
  171 000000C0         ; This is the code that gets called when the processor r
                       eceives an unexpected
  172 000000C0         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  173 000000C0         ; for examination by a debugger.
  174 000000C0         ;
  175 000000C0         ;*******************************************************
                       ***********************
  176 000000C0         IntDefaultHandler
  177 000000C0 E7FE            B                IntDefaultHandler
  178 000000C2         
  179 000000C2         ;*******************************************************
                       ***********************
  180 000000C2         ;
  181 000000C2         ; Make sure the end of this section is aligned.
  182 000000C2         ;
  183 000000C2         ;*******************************************************
                       ***********************
  184 000000C2 00 00           ALIGN
  185 000000C4         
  186 000000C4         ;*******************************************************
                       ***********************
  187 000000C4         ;
  188 000000C4         ; Some code in the normal code section for initializing 
                       the heap and stack.
  189 000000C4         ;
  190 000000C4         ;*******************************************************
                       ***********************
  191 000000C4 00000000        AREA             |.text|, CODE, READONLY
  192 00000000         
  193 00000000         ;*******************************************************
                       ***********************
  194 00000000         ;
  195 00000000         ; The function expected of the C library startup code fo
                       r defining the stack
  196 00000000         ; and heap memory locations.
  197 00000000         ;
  198 00000000         ;*******************************************************
                       ***********************
  199 00000000                 IMPORT           __use_two_region_memory
  200 00000000                 EXPORT           __user_initial_stackheap
  201 00000000         __user_initial_stackheap
  202 00000000 4802            LDR              R0, =HeapMem
  203 00000002 4903            LDR              R1, =(StackMem + Stack)
  204 00000004 4A01            LDR              R2, =(HeapMem + Heap)
  205 00000006 4B03            LDR              R3, =StackMem
  206 00000008 4770            BX               LR
  207 0000000A         
  208 0000000A         ;*******************************************************
                       ***********************
  209 0000000A         ;
  210 0000000A         ; Make sure the end of this section is aligned.
  211 0000000A         ;
  212 0000000A         ;*******************************************************



ARM Macro Assembler    Page 6 


                       ***********************
  213 0000000A 00 00           ALIGN
  214 0000000C         
  215 0000000C         ;*******************************************************
                       ***********************
  216 0000000C         ;
  217 0000000C         ; Tell the assembler that we're done.
  218 0000000C         ;
  219 0000000C         ;*******************************************************
                       ***********************
  220 0000000C                 END
              00000000 
              00000100 
              00000000 
Command Line: --debug --xref --device=DLM --apcs=interwork -oStartup.o -IC:\Kei
l\ARM\INC\Luminary --list=.\Listings\Startup.lst Startup.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 51 in file Startup.s
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 52 in file Startup.s
   Uses
      At line 85 in file Startup.s
      At line 203 in file Startup.s
      At line 205 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 60 in file Startup.s
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 61 in file Startup.s
   Uses
      At line 202 in file Startup.s
      At line 204 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 000000BE

Symbol: FaultISR
   Definitions
      At line 166 in file Startup.s
   Uses
      At line 88 in file Startup.s
      At line 167 in file Startup.s

IntDefaultHandler 000000C0

Symbol: IntDefaultHandler
   Definitions
      At line 176 in file Startup.s
   Uses
      At line 89 in file Startup.s
      At line 90 in file Startup.s
      At line 91 in file Startup.s
      At line 96 in file Startup.s
      At line 97 in file Startup.s
      At line 99 in file Startup.s
      At line 100 in file Startup.s
      At line 101 in file Startup.s
      At line 102 in file Startup.s
      At line 103 in file Startup.s
      At line 104 in file Startup.s
      At line 105 in file Startup.s
      At line 106 in file Startup.s
      At line 107 in file Startup.s
      At line 108 in file Startup.s
      At line 109 in file Startup.s
      At line 110 in file Startup.s
      At line 111 in file Startup.s
      At line 112 in file Startup.s
      At line 113 in file Startup.s
      At line 114 in file Startup.s
      At line 117 in file Startup.s
      At line 118 in file Startup.s
      At line 119 in file Startup.s
      At line 120 in file Startup.s
      At line 121 in file Startup.s
      At line 122 in file Startup.s
      At line 123 in file Startup.s
      At line 124 in file Startup.s
      At line 125 in file Startup.s
      At line 126 in file Startup.s
      At line 127 in file Startup.s
      At line 128 in file Startup.s
      At line 129 in file Startup.s
      At line 130 in file Startup.s
      At line 131 in file Startup.s
      At line 177 in file Startup.s

NmiSR 000000BC

Symbol: NmiSR
   Definitions
      At line 156 in file Startup.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 87 in file Startup.s
      At line 157 in file Startup.s

RESET 00000000

Symbol: RESET
   Definitions
      At line 76 in file Startup.s
   Uses
      None
Comment: RESET unused
Reset_Handler 000000B8

Symbol: Reset_Handler
   Definitions
      At line 140 in file Startup.s
   Uses
      At line 86 in file Startup.s
      At line 139 in file Startup.s

Vectors 00000000

Symbol: Vectors
   Definitions
      At line 84 in file Startup.s
   Uses
      None
Comment: Vectors unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 191 in file Startup.s
   Uses
      None
Comment: .text unused
__user_initial_stackheap 00000000

Symbol: __user_initial_stackheap
   Definitions
      At line 201 in file Startup.s
   Uses
      At line 200 in file Startup.s
Comment: __user_initial_stackheap used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap 00000000

Symbol: Heap
   Definitions
      At line 44 in file Startup.s
   Uses
      At line 62 in file Startup.s
      At line 204 in file Startup.s

Stack 00000100

Symbol: Stack
   Definitions
      At line 35 in file Startup.s
   Uses
      At line 53 in file Startup.s
      At line 85 in file Startup.s
      At line 203 in file Startup.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ADCIntHandler 00000000

Symbol: ADCIntHandler
   Definitions
      At line 115 in file Startup.s
   Uses
      At line 116 in file Startup.s
Comment: ADCIntHandler used once
__main 00000000

Symbol: __main
   Definitions
      At line 145 in file Startup.s
   Uses
      At line 146 in file Startup.s
Comment: __main used once
__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 199 in file Startup.s
   Uses
      None
Comment: __use_two_region_memory unused
3 symbols
336 symbols in table
