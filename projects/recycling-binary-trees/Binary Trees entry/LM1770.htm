<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Luminary\LM1770.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Luminary\LM1770.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.0 [Build 942]: Last Updated: Sun Feb 04 18:25:02 2007
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize,Cycles,Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__main -> __rt_entry -> main -> construct_leaf -> gimme -> OSRAMImageDraw -> OSRAMWriteArray<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9a83b8]">Reset_Handler</a>
 <LI><a href="#[ef8f44]">__scatterload</a>
 <LI><a href="#[ef8de8]">__scatterload_rt2</a>
 <LI><a href="#[ef8e38]">__scatterload_rt2_thumb_only</a>
 <LI><a href="#[ef8ec4]">__scatterload_null</a>
 <LI><a href="#[ef879c]">__scatterload_copy</a>
 <LI><a href="#[ef8350]">__scatterload_zeroinit</a>
 <LI><a href="#[9a8238]">__user_initial_stackheap</a>
 <LI><a href="#[f07410]">__fplib_config_pureend_doubles</a>
 <LI><a href="#[9a8840]">NmiSR</a>
 <LI><a href="#[9a87c8]">FaultISR</a>
 <LI><a href="#[9a8748]">IntDefaultHandler</a>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3><UL>
 <LI><a href="#[9a1c84]">OSRAMDelay</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[9a1c84]">OSRAMDelay</a><BR>
 <LI><a href="#[a48f58]">ndraw</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[a48f58]">ndraw</a><BR>
 <LI><a href="#[a4929c]">ncount</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[a4929c]">ncount</a><BR>
 <LI><a href="#[9a8840]">NmiSR</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[9a8840]">NmiSR</a><BR>
 <LI><a href="#[9a87c8]">FaultISR</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[9a87c8]">FaultISR</a><BR>
 <LI><a href="#[9a8748]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;->&nbsp;&nbsp;&nbsp;<a href="#[9a8748]">IntDefaultHandler</a><BR>
</UL>
<BR>
<P><STRONG><a name="[9a83b8]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))

<P><STRONG><a name="[ede2a0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __main -> __rt_entry -> main -> construct_leaf -> gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[edd788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef8f44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ef8de8]"></a>__scatterload_rt2</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[edd788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef8e38]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ef8ec4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ef879c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef879c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef879c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ef8350]"></a>__scatterload_zeroinit</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9a1c84]"></a>OSRAMDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osram96x16.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[9a1c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1c84]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDelay
<LI><a href="#[9a33d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
</UL>

<P><STRONG><a name="[eeef30]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[f07b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9a8238]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edc780]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9a6024]"></a>RandomAddEntropy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, random.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a8434]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADCIntHandler
</UL>

<P><STRONG><a name="[9a5fa8]"></a>RandomNumber</STRONG> (Thumb, 432 bytes, Stack size 20 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RandomNumber</UL>
<BR>[Called By]<UL><LI><a href="#[a48d7c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;randrange
</UL>

<P><STRONG><a name="[9a14ec]"></a>OSRAMClear</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSRAMClear -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
</UL>

<P><STRONG><a name="[9a1470]"></a>OSRAMStringDraw</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSRAMStringDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[a48ee0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;draw_tree
</UL>

<P><STRONG><a name="[9a13f4]"></a>OSRAMImageDraw</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[a48c8c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;gimme
<LI><a href="#[a48ee0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;draw_tree
</UL>

<P><STRONG><a name="[9a137c]"></a>OSRAMInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSRAMInit -> OSRAMClear -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a14ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMClear
<LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
<LI><a href="#[a88734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[e6e998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInit
<LI><a href="#[e81448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[9a1300]"></a>OSRAMDisplayOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, osram96x16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>

<P><STRONG><a name="[9a1284]"></a>OSRAMDisplayOff</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, osram96x16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a33d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>

<P><STRONG><a name="[a49310]"></a>wait_some</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lm1770_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4929c]"></a>ncount</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = ncount -> ncount (Cycle)</UL>
<BR>[Calls]<UL><LI><a href="#[a4929c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncount
</UL>
<BR>[Called By]<UL><LI><a href="#[a491ac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;count_tree
<LI><a href="#[a49224]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;count_garb
<LI><a href="#[a4929c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ncount
</UL>

<P><STRONG><a name="[a49224]"></a>count_garb</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = count_garb -> ncount -> ncount (Cycle)</UL>
<BR>[Calls]<UL><LI><a href="#[a4929c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncount
</UL>
<BR>[Called By]<UL><LI><a href="#[a48ee0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;draw_tree
</UL>

<P><STRONG><a name="[a491ac]"></a>count_tree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = count_tree -> ncount -> ncount (Cycle)</UL>
<BR>[Calls]<UL><LI><a href="#[a4929c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ncount
</UL>
<BR>[Called By]<UL><LI><a href="#[a48ee0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;draw_tree
</UL>

<P><STRONG><a name="[a49134]"></a>plot_point</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lm1770_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a48fcc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;plotnode
<LI><a href="#[a490bc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;plot_hline
</UL>

<P><STRONG><a name="[a490bc]"></a>plot_hline</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = plot_hline</UL>
<BR>[Calls]<UL><LI><a href="#[a49134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plot_point
</UL>
<BR>[Called By]<UL><LI><a href="#[a48fcc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;plotnode
</UL>

<P><STRONG><a name="[a49044]"></a>getnodexy</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getnodexy</UL>
<BR>[Called By]<UL><LI><a href="#[a48fcc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;plotnode
</UL>

<P><STRONG><a name="[a48fcc]"></a>plotnode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = plotnode -> getnodexy</UL>
<BR>[Calls]<UL><LI><a href="#[a49044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnodexy
<LI><a href="#[a490bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plot_hline
<LI><a href="#[a49134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plot_point
</UL>
<BR>[Called By]<UL><LI><a href="#[a48f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ndraw
</UL>

<P><STRONG><a name="[a48f58]"></a>ndraw</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = ndraw -> ndraw (Cycle)</UL>
<BR>[Calls]<UL><LI><a href="#[a48f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndraw
<LI><a href="#[a48fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plotnode
</UL>
<BR>[Called By]<UL><LI><a href="#[a48ee0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;draw_tree
<LI><a href="#[a48f58]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ndraw
</UL>

<P><STRONG><a name="[a48ee0]"></a>draw_tree</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = draw_tree -> ndraw -> ndraw (Cycle)</UL>
<BR>[Calls]<UL><LI><a href="#[9a13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[9a1470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMStringDraw
<LI><a href="#[a48f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndraw
<LI><a href="#[a491ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tree
<LI><a href="#[a49224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_garb
</UL>
<BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48e68]"></a>traverse</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = traverse</UL>
<BR>[Called By]<UL><LI><a href="#[a48c10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;construct_leaf
<LI><a href="#[a48d00]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;destruct_node
</UL>

<P><STRONG><a name="[a48df4]"></a>toss_me</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lm1770_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a48b98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;garb_init
<LI><a href="#[a48c8c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;gimme
<LI><a href="#[a48d00]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;destruct_node
</UL>

<P><STRONG><a name="[a48d7c]"></a>randrange</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = randrange -> RandomNumber</UL>
<BR>[Calls]<UL><LI><a href="#[9a5fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[a48c10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;construct_leaf
<LI><a href="#[a48d00]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;destruct_node
</UL>

<P><STRONG><a name="[a48d00]"></a>destruct_node</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = destruct_node -> randrange -> RandomNumber</UL>
<BR>[Calls]<UL><LI><a href="#[a48d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randrange
<LI><a href="#[a48df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toss_me
<LI><a href="#[a48e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse
</UL>
<BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48c8c]"></a>gimme</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a13f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[a48df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toss_me
</UL>
<BR>[Called By]<UL><LI><a href="#[a48b98]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;garb_init
<LI><a href="#[a48c10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;construct_leaf
</UL>

<P><STRONG><a name="[a48c10]"></a>construct_leaf</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = construct_leaf -> gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[a48c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimme
<LI><a href="#[a48d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randrange
<LI><a href="#[a48e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverse
</UL>
<BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48b98]"></a>garb_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = garb_init -> gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[a48c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimme
<LI><a href="#[a48df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toss_me
</UL>
<BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48b20]"></a>sys_init</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_init -> OSRAMInit -> OSRAMClear -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
<LI><a href="#[a59b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[a59c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[a59d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[a59f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntEnable
<LI><a href="#[a88474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[a88ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e7a2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[e81448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e81ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[e81f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[ea9084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[ea9150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[ea950c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[ea95d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlTrigger
<LI><a href="#[ea9628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlStall
<LI><a href="#[ea9678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlLevel
<LI><a href="#[ea9748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[a48aac]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48aac]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main -> construct_leaf -> gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[a48b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[a48b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garb_init
<LI><a href="#[a48c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;construct_leaf
<LI><a href="#[a48d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destruct_node
<LI><a href="#[a48ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_tree
<LI><a href="#[a49310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_some
</UL>
<BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9a8434]"></a>ADCIntHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, lm1770_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCIntHandler</UL>
<BR>[Calls]<UL><LI><a href="#[9a6024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandomAddEntropy
<LI><a href="#[a59d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[a5a064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
<LI><a href="#[a88808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ee7020]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[ee6fa4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ee6f54]"></a>malloc</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed9758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[edb99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[edebd0]"></a>__use_two_region_memory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[edeb48]"></a>__rt_stackheap_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init -> __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[eda508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[edc780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[edeac0]"></a>__rt_heap_extend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_extend</UL>
<BR>[Calls]<UL><LI><a href="#[edeca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef20d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__heap_extend
</UL>

<P><STRONG><a name="[edd788]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry -> main -> construct_leaf -> gimme -> OSRAMImageDraw -> OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[a48aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[edeb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
<LI><a href="#[eecf10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[eed390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[eed8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_pre_stackheap_init
<LI><a href="#[eeee64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
<LI><a href="#[ef3554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ede2a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ef8de8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[edd640]"></a>__rt_exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[edd5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
<LI><a href="#[eecb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_pre_lib_shutdown
<LI><a href="#[eeee14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[ef3554]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[edd5c8]"></a>__rt_abort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef4dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[edd640]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[edc780]"></a>__user_setup_stackheap</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap</UL>
<BR>[Calls]<UL><LI><a href="#[9a8238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ef4918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[edeb48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[edb99c]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ee6f54]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ef77fc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[eda508]"></a>__rt_stackheap_storage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edeb48]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[ed9828]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eeee14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ed97a8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ed9758]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[ef20d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__heap_extend
<LI><a href="#[ef41a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ee6f54]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ed96dc]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef2ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ed968c]"></a>_init_alloc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _init_alloc -> __rt_SIGRTMEM -> __rt_SIGRTMEM_inner -> __default_signal_display -> _ttywrch</UL>
<BR>[Calls]<UL><LI><a href="#[edb99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ee6fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize
<LI><a href="#[ee7020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[ef20d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__heap_extend
<LI><a href="#[ef2ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[ef41a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ed8534]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[ed84b8]"></a>__heap_guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[ef77fc]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free</UL>
<BR>[Calls]<UL><LI><a href="#[edb99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ef41a0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[ef4dfc]"></a>_sys_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd5c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
<LI><a href="#[eea148]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[ef47f0]"></a>__user_libspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ef4918]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edc780]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef4890]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ef41a0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory -> free</UL>
<BR>[Calls]<UL><LI><a href="#[ef77fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ed9758]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ef3554]"></a>exit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = exit -> __rt_exit -> __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[edd640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[ef3484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef2ea0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM -> __rt_SIGRTMEM_inner -> __default_signal_display -> _ttywrch</UL>
<BR>[Calls]<UL><LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[ee9bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[eea148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ed96dc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ef20d4]"></a>__heap_extend</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, heapext.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __heap_extend -> __rt_heap_extend</UL>
<BR>[Calls]<UL><LI><a href="#[edeac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ed9758]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[eeee64]"></a>__rt_lib_init</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __rt_lib_init -> _init_alloc -> __rt_SIGRTMEM -> __rt_SIGRTMEM_inner -> __default_signal_display -> _ttywrch</UL>
<BR>[Calls]<UL><LI><a href="#[ed968c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ed97a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc
<LI><a href="#[ee6fa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize
<LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[eeadc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[eee508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[eee584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[eee5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[eee6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[eee73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[eee7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[eee834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[eee8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[eee930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[eee9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[eeea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[eeeaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[eeeb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[eeec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[eeeca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[eeef30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
<LI><a href="#[f0751c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eeee14]"></a>__rt_lib_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown</UL>
<BR>[Calls]<UL><LI><a href="#[ed9828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc
<LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[eee43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[eeeb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[edd640]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[eed8ec]"></a>_platform_pre_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardinit1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eed390]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eecf10]"></a>_platform_post_lib_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init</UL>
<BR>[Calls]<UL><LI><a href="#[ee8238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cpu_pre_main
</UL>
<BR>[Called By]<UL><LI><a href="#[edd788]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[eecb20]"></a>_platform_pre_lib_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardshut.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[edd640]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[eec6cc]"></a>__I_use_semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[eec644]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[eeadc4]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[eea148]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef4dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef2ea0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ee9bb0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner -> __default_signal_display -> _ttywrch</UL>
<BR>[Calls]<UL><LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[f046d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ef2ea0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ee8238]"></a>_cpu_pre_main</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpuinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eecf10]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
</UL>

<P><STRONG><a name="[f07b64]"></a>__ARM_get_argv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, no_argv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eeef30]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[f060f8]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0751c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[f046d8]"></a>__default_signal_display</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display -> _ttywrch</UL>
<BR>[Calls]<UL><LI><a href="#[ee7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_stackcheck (Weak Reference)
<LI><a href="#[f03434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ee9bb0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f03434]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch</UL>
<BR>[Called By]<UL><LI><a href="#[f046d8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[a5a064]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[9a8434]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADCIntHandler
</UL>

<P><STRONG><a name="[a59f98]"></a>ADCIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[a59d50]"></a>ADCSequenceConfigure</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADCSequenceConfigure</UL>
<BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[a59d00]"></a>ADCSequenceDataGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[9a8434]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADCIntHandler
</UL>

<P><STRONG><a name="[a59c30]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[a59b60]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADCSequenceStepConfigure</UL>
<BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[a88ccc]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[a88734]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
</UL>

<P><STRONG><a name="[a88a54]"></a>GPIOPadConfigSet</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPadConfigSet</UL>
<BR>[Called By]<UL><LI><a href="#[a88734]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
</UL>

<P><STRONG><a name="[a88808]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinRead))
<BR><BR>[Called By]<UL><LI><a href="#[9a8434]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;ADCIntHandler
</UL>

<P><STRONG><a name="[a88734]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeI2C -> GPIOPadConfigSet</UL>
<BR>[Calls]<UL><LI><a href="#[a88a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[a88ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
</UL>

<P><STRONG><a name="[a88474]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[e6ec30]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[9a33d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>

<P><STRONG><a name="[e6eb60]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[9a33d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
<LI><a href="#[9a3548]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>

<P><STRONG><a name="[e6e998]"></a>I2CMasterInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c.o(i.I2CMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CMasterInit -> SysCtlClockGet</UL>
<BR>[Calls]<UL><LI><a href="#[e81f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
</UL>

<P><STRONG><a name="[e6e7c8]"></a>I2CMasterIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9a33d4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFinal
<LI><a href="#[9a3450]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteArray
<LI><a href="#[9a34cc]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteByte
</UL>

<P><STRONG><a name="[e6e778]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[9a3548]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMWriteFirst
</UL>

<P><STRONG><a name="[e7a2d8]"></a>IntEnable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[e81f10]"></a>SysCtlClockGet</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet</UL>
<BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[e6e998]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInit
</UL>

<P><STRONG><a name="[e81ec0]"></a>SysCtlClockSet</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[e81448]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
<LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea9748]"></a>TimerConfigure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea9678]"></a>TimerControlLevel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlLevel))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea9628]"></a>TimerControlStall</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlStall))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea95d8]"></a>TimerControlTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.TimerControlTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea950c]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea9150]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[ea9084]"></a>TimerMatchSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerMatchSet))
<BR><BR>[Called By]<UL><LI><a href="#[a48b20]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[f0751c]"></a>_fp_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init</UL>
<BR>[Calls]<UL><LI><a href="#[f060f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f07410]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[9a8840]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9a8840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8840]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9a87c8]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9a87c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9a87c8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9a8748]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9a8748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9a8748]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9a3548]"></a>OSRAMWriteFirst</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSRAMWriteFirst</UL>
<BR>[Calls]<UL><LI><a href="#[e6e778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[e6eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[e6ec30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOff
<LI><a href="#[9a1300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOn
<LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
<LI><a href="#[9a13f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[9a1470]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMStringDraw
<LI><a href="#[9a14ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMClear
</UL>

<P><STRONG><a name="[9a34cc]"></a>OSRAMWriteByte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSRAMWriteByte</UL>
<BR>[Calls]<UL><LI><a href="#[9a1c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMDelay
<LI><a href="#[e6e7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntStatus
<LI><a href="#[e6eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[e6ec30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOff
<LI><a href="#[9a1300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOn
<LI><a href="#[9a13f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[9a1470]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMStringDraw
<LI><a href="#[9a14ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMClear
</UL>

<P><STRONG><a name="[9a3450]"></a>OSRAMWriteArray</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSRAMWriteArray</UL>
<BR>[Calls]<UL><LI><a href="#[9a1c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMDelay
<LI><a href="#[e6e7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntStatus
<LI><a href="#[e6eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[e6ec30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
<LI><a href="#[9a13f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[9a1470]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMStringDraw
<LI><a href="#[9a14ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMClear
</UL>

<P><STRONG><a name="[9a33d4]"></a>OSRAMWriteFinal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, osram96x16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSRAMWriteFinal</UL>
<BR>[Calls]<UL><LI><a href="#[9a1c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSRAMDelay
<LI><a href="#[e6e7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntStatus
<LI><a href="#[e6eb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[e6ec30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1284]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOff
<LI><a href="#[9a1300]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMDisplayOn
<LI><a href="#[9a137c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMInit
<LI><a href="#[9a13f4]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMImageDraw
<LI><a href="#[9a1470]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMStringDraw
<LI><a href="#[9a14ec]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;OSRAMClear
</UL>

<P><STRONG><a name="[eeeca0]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[ee7678]"></a>__ARM_stackcheck</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ed968c]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[ed9758]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full (Weak Reference)
<LI><a href="#[ee9bb0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner (Weak Reference)
<LI><a href="#[eeee14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
<LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
<LI><a href="#[ef2ea0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM (Weak Reference)
<LI><a href="#[ef3554]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
<LI><a href="#[f046d8]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (Weak Reference)
</UL>

<P><STRONG><a name="[eeec20]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eeeb98]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eeeb1c]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[edeca4]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[edeac0]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[eeeaa0]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[ef3484]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ef3554]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[eeea28]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee9ac]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee930]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee8b4]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee834]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee7b8]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee73c]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee6c0]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee5fc]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee584]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee508]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee64]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[eee43c]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[eeee14]">&lt;&lt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
