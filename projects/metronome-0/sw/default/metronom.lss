
metronom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000004ce  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006e  000004dc  00000570  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00000570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000148  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000654  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000027e  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000694  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000023e  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	58 c0       	rjmp	.+176    	; 0xba <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	3d c0       	rjmp	.+122    	; 0x8c <__vector_8>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ec       	ldi	r30, 0xCE	; 206
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 37       	cpi	r26, 0x78	; 120
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ef d0       	rcall	.+478    	; 0x238 <main>
  5a:	37 c2       	rjmp	.+1134   	; 0x4ca <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_9>:
uint8_t segment_table[11] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0xDE, 0x01};


/* Timer/Counter0 Overflow interrupt (switch delay) */
ISR (TIMER0_OVF_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  if(SWITCH_READY != timer_flag)
  6a:	80 91 76 00 	lds	r24, 0x0076
  6e:	88 23       	and	r24, r24
  70:	31 f0       	breq	.+12     	; 0x7e <__vector_9+0x20>
  {
    timer_flag--;
  72:	80 91 76 00 	lds	r24, 0x0076
  76:	81 50       	subi	r24, 0x01	; 1
  78:	80 93 76 00 	sts	0x0076, r24
  7c:	01 c0       	rjmp	.+2      	; 0x80 <__vector_9+0x22>
  }
  else
  {
    /* Stop timer */
    TCCR0 = 0x00;
  7e:	13 be       	out	0x33, r1	; 51
  }  
}   
  80:	8f 91       	pop	r24
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <__vector_8>:
//-----------------------------------------------------------------------------

/* Timer/Counter1 Overflow interrupt (metronom effect) */
ISR (TIMER1_OVF_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  metronome_flag = TRUE;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 6e 00 	sts	0x006E, r24
  TCNT1 = bpm_timer_value;
  a0:	80 91 70 00 	lds	r24, 0x0070
  a4:	90 91 71 00 	lds	r25, 0x0071
  a8:	9d bd       	out	0x2d, r25	; 45
  aa:	8c bd       	out	0x2c, r24	; 44
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_4>:
//-----------------------------------------------------------------------------

/* Timer/Counter2 Overflow interrupt (audio signal) */
ISR (TIMER2_OVF_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  tone_length--;
  c6:	80 91 6f 00 	lds	r24, 0x006F
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	80 93 6f 00 	sts	0x006F, r24
  
  if(0 == tone_length)
  d0:	80 91 6f 00 	lds	r24, 0x006F
  d4:	88 23       	and	r24, r24
  d6:	09 f4       	brne	.+2      	; 0xda <__vector_4+0x20>
  {
    /* Stop tone generator */
    TCCR2 = 0x00;
  d8:	15 bc       	out	0x25, r1	; 37
  }
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <init>:
  }
}
//-----------------------------------------------------------------------------

void init(void)
{
  e6:	8e e3       	ldi	r24, 0x3E	; 62
  e8:	87 bb       	out	0x17, r24	; 23
  // in=switch BPM+, out=1x, out=3/4, out=speaker, out=10x, out=100x
  // switch BPM+ with pull-up, Speaker set low.
  DDRB = 0x3E;
  PORTB = 0x09;
  ea:	89 e0       	ldi	r24, 0x09	; 9
  ec:	88 bb       	out	0x18, r24	; 24

  // in=switch 3/4, in=switch BPM-, out=LED red, out=LED green, out=LED blue, out=LED yellow
  // switches 3/4 and BPM- with pull-up
  DDRC = 0x3C;
  ee:	8c e3       	ldi	r24, 0x3C	; 60
  f0:	84 bb       	out	0x14, r24	; 20
  PORTC = 0x03;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	85 bb       	out	0x15, r24	; 21
  
  // 7-segment data set to output
  DDRD = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	81 bb       	out	0x11, r24	; 17
  PORTD = 0x00;
  fa:	12 ba       	out	0x12, r1	; 18

  // Start timer1 with lowest possible clock
  TCCR1B = 0x05;
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	8e bd       	out	0x2e, r24	; 46
  // wait 1 second before first interrupt - and display all LEDs ON
  TCNT1 = 0xE000;
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 ee       	ldi	r25, 0xE0	; 224
 104:	9d bd       	out	0x2d, r25	; 45
 106:	8c bd       	out	0x2c, r24	; 44

  // Enable interrupts from timers
  TIMSK = 0x45;
 108:	85 e4       	ldi	r24, 0x45	; 69
 10a:	89 bf       	out	0x39, r24	; 57

  // enable interrupts
  sei();
 10c:	78 94       	sei
}
 10e:	08 95       	ret

00000110 <DisplayValue>:
//-----------------------------------------------------------------------------

void DisplayValue(uint8_t bpm, uint8_t quads)
{
 110:	28 2f       	mov	r18, r24
 112:	36 2f       	mov	r19, r22
  static uint8_t  hundreds,
                  tens,
                  ones;

  /* calculate 100's */
  hundreds = bpm / 100;
 114:	64 e6       	ldi	r22, 0x64	; 100
 116:	ab d1       	rcall	.+854    	; 0x46e <__udivmodqi4>
 118:	80 93 75 00 	sts	0x0075, r24

  /* calculate 10's  */
  calc_temp = bpm - (hundreds * 100);
 11c:	e8 2f       	mov	r30, r24
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	8c e9       	ldi	r24, 0x9C	; 156
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	ac 01       	movw	r20, r24
 126:	e4 9f       	mul	r30, r20
 128:	c0 01       	movw	r24, r0
 12a:	e5 9f       	mul	r30, r21
 12c:	90 0d       	add	r25, r0
 12e:	f4 9f       	mul	r31, r20
 130:	90 0d       	add	r25, r0
 132:	11 24       	eor	r1, r1
 134:	28 0f       	add	r18, r24
  tens = calc_temp / 10;
 136:	82 2f       	mov	r24, r18
 138:	6a e0       	ldi	r22, 0x0A	; 10
 13a:	99 d1       	rcall	.+818    	; 0x46e <__udivmodqi4>
 13c:	80 93 74 00 	sts	0x0074, r24

  /* calculate 1's   */
  ones = calc_temp - (tens * 10);
 140:	a8 2f       	mov	r26, r24
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	86 ef       	ldi	r24, 0xF6	; 246
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	ac 01       	movw	r20, r24
 14a:	a4 9f       	mul	r26, r20
 14c:	c0 01       	movw	r24, r0
 14e:	a5 9f       	mul	r26, r21
 150:	90 0d       	add	r25, r0
 152:	b4 9f       	mul	r27, r20
 154:	90 0d       	add	r25, r0
 156:	11 24       	eor	r1, r1
 158:	28 0f       	add	r18, r24
 15a:	20 93 73 00 	sts	0x0073, r18

  if(X100 == lcd_ciffer)
 15e:	80 91 77 00 	lds	r24, 0x0077
 162:	88 23       	and	r24, r24
 164:	59 f4       	brne	.+22     	; 0x17c <DisplayValue+0x6c>
  {
    lcd_ciffer = X10;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 77 00 	sts	0x0077, r24
    SEGMENT_X10;    
 16c:	c4 98       	cbi	0x18, 4	; 24
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	86 62       	ori	r24, 0x26	; 38
 172:	88 bb       	out	0x18, r24	; 24
    SEGMENT_DATA = segment_table[tens];    
 174:	ae 59       	subi	r26, 0x9E	; 158
 176:	bf 4f       	sbci	r27, 0xFF	; 255
 178:	8c 91       	ld	r24, X
 17a:	19 c0       	rjmp	.+50     	; 0x1ae <DisplayValue+0x9e>
  }  
  else if(X10 == lcd_ciffer)
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	49 f4       	brne	.+18     	; 0x192 <DisplayValue+0x82>
  {
    lcd_ciffer = X1;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 77 00 	sts	0x0077, r24
    SEGMENT_X1;
 186:	c1 98       	cbi	0x18, 1	; 24
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	84 63       	ori	r24, 0x34	; 52
 18c:	88 bb       	out	0x18, r24	; 24
    SEGMENT_DATA = segment_table[ones];
 18e:	e2 2f       	mov	r30, r18
 190:	0a c0       	rjmp	.+20     	; 0x1a6 <DisplayValue+0x96>
  }  
  else if(X1 == lcd_ciffer)
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	71 f4       	brne	.+28     	; 0x1b2 <DisplayValue+0xa2>
  {
    lcd_ciffer = BPM;
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 77 00 	sts	0x0077, r24
    SEGMENT_BPM;
 19c:	c2 98       	cbi	0x18, 2	; 24
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	82 63       	ori	r24, 0x32	; 50
 1a2:	88 bb       	out	0x18, r24	; 24
    SEGMENT_DATA = segment_table[quads];
 1a4:	e3 2f       	mov	r30, r19
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 59       	subi	r30, 0x9E	; 158
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	82 bb       	out	0x12, r24	; 18
 1b0:	08 95       	ret
  }  
  else if(BPM == lcd_ciffer)
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	51 f4       	brne	.+20     	; 0x1ca <DisplayValue+0xba>
  {
    lcd_ciffer = X100;
 1b6:	10 92 77 00 	sts	0x0077, r1
    SEGMENT_X100;
 1ba:	c5 98       	cbi	0x18, 5	; 24
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	86 61       	ori	r24, 0x16	; 22
 1c0:	88 bb       	out	0x18, r24	; 24
    SEGMENT_DATA = segment_table[hundreds];
 1c2:	ee 59       	subi	r30, 0x9E	; 158
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	08 95       	ret

000001cc <LedUpdate>:
  }       
}
//-----------------------------------------------------------------------------

void LedUpdate(uint8_t quad_rythm)
{
 1cc:	28 2f       	mov	r18, r24
  static uint8_t led_counter = 0;
  if(0 == led_counter)
 1ce:	90 91 72 00 	lds	r25, 0x0072
 1d2:	99 23       	and	r25, r25
 1d4:	41 f4       	brne	.+16     	; 0x1e6 <LedUpdate+0x1a>
  {
    LED_RED;
 1d6:	aa 98       	cbi	0x15, 2	; 21
 1d8:	85 b3       	in	r24, 0x15	; 21
 1da:	88 63       	ori	r24, 0x38	; 56
 1dc:	85 bb       	out	0x15, r24	; 21
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
 1de:	84 e1       	ldi	r24, 0x14	; 20
 1e0:	83 bd       	out	0x23, r24	; 35
  /* set tone length */
  tone_length = tone_length_value;
 1e2:	84 e6       	ldi	r24, 0x64	; 100
 1e4:	15 c0       	rjmp	.+42     	; 0x210 <LedUpdate+0x44>
  if(0 == led_counter)
  {
    LED_RED;
    Tone(TONE_LOW, TONE_MED);
  }
  else if(1 == led_counter)
 1e6:	91 30       	cpi	r25, 0x01	; 1
 1e8:	21 f4       	brne	.+8      	; 0x1f2 <LedUpdate+0x26>
  {
    LED_GREEN;
 1ea:	ab 98       	cbi	0x15, 3	; 21
 1ec:	85 b3       	in	r24, 0x15	; 21
 1ee:	84 63       	ori	r24, 0x34	; 52
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <LedUpdate+0x3c>
    Tone(TONE_HIGH, TONE_SHORT);
  }
  else if(2 == led_counter)
 1f2:	92 30       	cpi	r25, 0x02	; 2
 1f4:	21 f4       	brne	.+8      	; 0x1fe <LedUpdate+0x32>
  {
    LED_BLUE;
 1f6:	ac 98       	cbi	0x15, 4	; 21
 1f8:	85 b3       	in	r24, 0x15	; 21
 1fa:	8c 62       	ori	r24, 0x2C	; 44
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <LedUpdate+0x3c>
    Tone(TONE_HIGH, TONE_SHORT);
  }
  else if(3 == led_counter)
 1fe:	93 30       	cpi	r25, 0x03	; 3
 200:	59 f4       	brne	.+22     	; 0x218 <LedUpdate+0x4c>
  {
    LED_YELLOW;
 202:	ad 98       	cbi	0x15, 5	; 21
 204:	85 b3       	in	r24, 0x15	; 21
 206:	8c 61       	ori	r24, 0x1C	; 28
 208:	85 bb       	out	0x15, r24	; 21
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
 20a:	84 eb       	ldi	r24, 0xB4	; 180
 20c:	83 bd       	out	0x23, r24	; 35
  /* set tone length */
  tone_length = tone_length_value;
 20e:	82 e3       	ldi	r24, 0x32	; 50
 210:	80 93 6f 00 	sts	0x006F, r24
  /* Start timer2 with fast PWM on output PB3 */
  TCCR2 = 0x6A;  
 214:	8a e6       	ldi	r24, 0x6A	; 106
 216:	85 bd       	out	0x25, r24	; 37
  else if(3 == led_counter)
  {
    LED_YELLOW;
    Tone(TONE_HIGH, TONE_SHORT);
  }
  led_counter++;
 218:	89 2f       	mov	r24, r25
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 72 00 	sts	0x0072, r24

  if(2 < led_counter && 3 == quad_rythm)
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	48 f0       	brcs	.+18     	; 0x236 <LedUpdate+0x6a>
 224:	23 30       	cpi	r18, 0x03	; 3
 226:	19 f4       	brne	.+6      	; 0x22e <LedUpdate+0x62>
  {
    led_counter = 0;
 228:	10 92 72 00 	sts	0x0072, r1
 22c:	08 95       	ret
  }    
  else if(3 < led_counter)
 22e:	84 30       	cpi	r24, 0x04	; 4
 230:	10 f0       	brcs	.+4      	; 0x236 <LedUpdate+0x6a>
    led_counter = 0;
 232:	10 92 72 00 	sts	0x0072, r1
 236:	08 95       	ret

00000238 <main>:
}
//-----------------------------------------------------------------------------

/* Local functions */
int main(void)
{  
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 246:	e1 99       	sbic	0x1c, 1	; 28
 248:	fe cf       	rjmp	.-4      	; 0x246 <main+0xe>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	e9 2e       	mov	r14, r25
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	f9 2e       	mov	r15, r25
 252:	ff ba       	out	0x1f, r15	; 31
 254:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
 256:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 258:	8d b3       	in	r24, 0x1d	; 29
  bpm_value = eeprom_read_byte(&ee_bpm_value);
 25a:	80 93 60 00 	sts	0x0060, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 25e:	e1 99       	sbic	0x1c, 1	; 28
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x26>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 262:	c1 e0       	ldi	r28, 0x01	; 1
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	df bb       	out	0x1f, r29	; 31
 268:	ce bb       	out	0x1e, r28	; 30
#endif
    EECR |= (1 << EERE);
 26a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 26c:	8d b3       	in	r24, 0x1d	; 29
  quad_rythm = eeprom_read_byte(&ee_quad_rythm);
 26e:	80 93 61 00 	sts	0x0061, r24

void init(void)
{
  // in=switch BPM+, out=1x, out=3/4, out=speaker, out=10x, out=100x
  // switch BPM+ with pull-up, Speaker set low.
  DDRB = 0x3E;
 272:	8e e3       	ldi	r24, 0x3E	; 62
 274:	87 bb       	out	0x17, r24	; 23
  PORTB = 0x09;
 276:	89 e0       	ldi	r24, 0x09	; 9
 278:	88 bb       	out	0x18, r24	; 24

  // in=switch 3/4, in=switch BPM-, out=LED red, out=LED green, out=LED blue, out=LED yellow
  // switches 3/4 and BPM- with pull-up
  DDRC = 0x3C;
 27a:	8c e3       	ldi	r24, 0x3C	; 60
 27c:	84 bb       	out	0x14, r24	; 20
  PORTC = 0x03;
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	85 bb       	out	0x15, r24	; 21
  
  // 7-segment data set to output
  DDRD = 0xFF;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	81 bb       	out	0x11, r24	; 17
  PORTD = 0x00;
 286:	12 ba       	out	0x12, r1	; 18

  // Start timer1 with lowest possible clock
  TCCR1B = 0x05;
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	8e bd       	out	0x2e, r24	; 46
  // wait 1 second before first interrupt - and display all LEDs ON
  TCNT1 = 0xE000;
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 ee       	ldi	r25, 0xE0	; 224
 290:	9d bd       	out	0x2d, r25	; 45
 292:	8c bd       	out	0x2c, r24	; 44

  // Enable interrupts from timers
  TIMSK = 0x45;
 294:	85 e4       	ldi	r24, 0x45	; 69
 296:	89 bf       	out	0x39, r24	; 57

  // enable interrupts
  sei();
 298:	78 94       	sei
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
 29a:	84 eb       	ldi	r24, 0xB4	; 180
 29c:	83 bd       	out	0x23, r24	; 35
  /* set tone length */
  tone_length = tone_length_value;
 29e:	86 e9       	ldi	r24, 0x96	; 150
 2a0:	80 93 6f 00 	sts	0x006F, r24
  /* Start timer2 with fast PWM on output PB3 */
  TCCR2 = 0x6A;  
 2a4:	8a e6       	ldi	r24, 0x6A	; 106
 2a6:	85 bd       	out	0x25, r24	; 37
 2a8:	88 ee       	ldi	r24, 0xE8	; 232
 2aa:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ac:	28 ec       	ldi	r18, 0xC8	; 200
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b8:	d9 f7       	brne	.-10     	; 0x2b0 <main+0x78>
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
 2ba:	84 e6       	ldi	r24, 0x64	; 100
 2bc:	83 bd       	out	0x23, r24	; 35
  /* set tone length */
  tone_length = tone_length_value;
 2be:	80 93 6f 00 	sts	0x006F, r24
  /* Start timer2 with fast PWM on output PB3 */
  TCCR2 = 0x6A;  
 2c2:	8a e6       	ldi	r24, 0x6A	; 106
 2c4:	85 bd       	out	0x25, r24	; 37
 2c6:	88 ee       	ldi	r24, 0xE8	; 232
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	28 ec       	ldi	r18, 0xC8	; 200
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0x96>
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	83 bd       	out	0x23, r24	; 35
  /* set tone length */
  tone_length = tone_length_value;
 2dc:	82 e3       	ldi	r24, 0x32	; 50
 2de:	80 93 6f 00 	sts	0x006F, r24
  /* Start timer2 with fast PWM on output PB3 */
  TCCR2 = 0x6A;  
 2e2:	8a e6       	ldi	r24, 0x6A	; 106
 2e4:	85 bd       	out	0x25, r24	; 37
  Tone(TONE_HIGH, TONE_LONG);
  _delay_ms(100);
  Tone(TONE_MID, TONE_MED);
  _delay_ms(100);
  Tone(TONE_LOW, TONE_SHORT);
  CalculateBpmValue(bpm_value);
 2e6:	20 91 60 00 	lds	r18, 0x0060
//-----------------------------------------------------------------------------

void CalculateBpmValue(uint8_t bpm_value)
{
  /* Calculate new timer offset value for timer1 */
  bpm_timer_value = 65536 - ((uint32_t)7814 * 60) / bpm_value;
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	68 e6       	ldi	r22, 0x68	; 104
 2f2:	77 e2       	ldi	r23, 0x27	; 39
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	c6 d0       	rcall	.+396    	; 0x486 <__udivmodsi4>
 2fa:	30 95       	com	r19
 2fc:	21 95       	neg	r18
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	30 93 71 00 	sts	0x0071, r19
 304:	20 93 70 00 	sts	0x0070, r18
void SwitchPressed(void)
{
  /* Reset timer */
  TCNT0 = 0x00;
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 308:	15 e0       	ldi	r17, 0x05	; 5
        eeprom_write_byte(&ee_quad_rythm, quad_rythm);
      }
      else
      {
        SwitchPressed();
        quad_rythm = 3;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	d8 2e       	mov	r13, r24
    if(0 == SW_QUARTERS && SWITCH_READY == timer_flag)
    {
      if(3 == quad_rythm)
      {
        SwitchPressed();
        quad_rythm = 4;
 30e:	04 e0       	ldi	r16, 0x04	; 4
  Tone(TONE_LOW, TONE_SHORT);
  CalculateBpmValue(bpm_value);

  while(1)
  {
    DisplayValue(bpm_value, quad_rythm);
 310:	60 91 61 00 	lds	r22, 0x0061
 314:	80 91 60 00 	lds	r24, 0x0060
 318:	fb de       	rcall	.-522    	; 0x110 <DisplayValue>
    
    if(TRUE == metronome_flag)
 31a:	80 91 6e 00 	lds	r24, 0x006E
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	29 f4       	brne	.+10     	; 0x32c <main+0xf4>
    {
      LedUpdate(quad_rythm);
 322:	80 91 61 00 	lds	r24, 0x0061
 326:	52 df       	rcall	.-348    	; 0x1cc <LedUpdate>
      metronome_flag = FALSE;
 328:	10 92 6e 00 	sts	0x006E, r1
    }    
    
    if(0 == SW_QUARTERS && SWITCH_READY == timer_flag)
 32c:	98 99       	sbic	0x13, 0	; 19
 32e:	25 c0       	rjmp	.+74     	; 0x37a <main+0x142>
 330:	80 91 76 00 	lds	r24, 0x0076
 334:	88 23       	and	r24, r24
 336:	09 f5       	brne	.+66     	; 0x37a <main+0x142>
    {
      if(3 == quad_rythm)
 338:	80 91 61 00 	lds	r24, 0x0061
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	59 f4       	brne	.+22     	; 0x356 <main+0x11e>
//-----------------------------------------------------------------------------

void SwitchPressed(void)
{
  /* Reset timer */
  TCNT0 = 0x00;
 340:	12 be       	out	0x32, r1	; 50
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 342:	13 bf       	out	0x33, r17	; 51
  /* Set status flag for delay */
  timer_flag = SWITCH_PRESSED;
 344:	10 93 76 00 	sts	0x0076, r17
    if(0 == SW_QUARTERS && SWITCH_READY == timer_flag)
    {
      if(3 == quad_rythm)
      {
        SwitchPressed();
        quad_rythm = 4;
 348:	00 93 61 00 	sts	0x0061, r16
        eeprom_write_byte(&ee_quad_rythm, quad_rythm);
 34c:	80 91 61 00 	lds	r24, 0x0061
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 350:	e1 99       	sbic	0x1c, 1	; 28
 352:	fe cf       	rjmp	.-4      	; 0x350 <main+0x118>
 354:	0a c0       	rjmp	.+20     	; 0x36a <main+0x132>
//-----------------------------------------------------------------------------

void SwitchPressed(void)
{
  /* Reset timer */
  TCNT0 = 0x00;
 356:	12 be       	out	0x32, r1	; 50
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 358:	13 bf       	out	0x33, r17	; 51
  /* Set status flag for delay */
  timer_flag = SWITCH_PRESSED;
 35a:	10 93 76 00 	sts	0x0076, r17
        eeprom_write_byte(&ee_quad_rythm, quad_rythm);
      }
      else
      {
        SwitchPressed();
        quad_rythm = 3;
 35e:	d0 92 61 00 	sts	0x0061, r13
        eeprom_write_byte(&ee_quad_rythm, quad_rythm);
 362:	80 91 61 00 	lds	r24, 0x0061
 366:	e1 99       	sbic	0x1c, 1	; 28
 368:	fe cf       	rjmp	.-4      	; 0x366 <main+0x12e>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 36a:	df bb       	out	0x1f, r29	; 31
 36c:	ce bb       	out	0x1e, r28	; 30
#endif
    EEDR = __value;
 36e:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	e2 9a       	sbi	0x1c, 2	; 28
 376:	e1 9a       	sbi	0x1c, 1	; 28
 378:	0f be       	out	0x3f, r0	; 63
      }     
    }

    if(0 == SW_BPM_PLUS && SWITCH_READY == timer_flag)
 37a:	b0 99       	sbic	0x16, 0	; 22
 37c:	28 c0       	rjmp	.+80     	; 0x3ce <main+0x196>
 37e:	80 91 76 00 	lds	r24, 0x0076
 382:	88 23       	and	r24, r24
 384:	21 f5       	brne	.+72     	; 0x3ce <main+0x196>
    {
      if(249 >= bpm_value)
 386:	80 91 60 00 	lds	r24, 0x0060
 38a:	8a 3f       	cpi	r24, 0xFA	; 250
 38c:	08 f0       	brcs	.+2      	; 0x390 <main+0x158>
 38e:	c0 cf       	rjmp	.-128    	; 0x310 <main+0xd8>
//-----------------------------------------------------------------------------

void SwitchPressed(void)
{
  /* Reset timer */
  TCNT0 = 0x00;
 390:	12 be       	out	0x32, r1	; 50
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 392:	13 bf       	out	0x33, r17	; 51
  /* Set status flag for delay */
  timer_flag = SWITCH_PRESSED;
 394:	10 93 76 00 	sts	0x0076, r17
    if(0 == SW_BPM_PLUS && SWITCH_READY == timer_flag)
    {
      if(249 >= bpm_value)
      {
        SwitchPressed();
        CalculateBpmValue(bpm_value);
 398:	20 91 60 00 	lds	r18, 0x0060
//-----------------------------------------------------------------------------

void CalculateBpmValue(uint8_t bpm_value)
{
  /* Calculate new timer offset value for timer1 */
  bpm_timer_value = 65536 - ((uint32_t)7814 * 60) / bpm_value;
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	68 e6       	ldi	r22, 0x68	; 104
 3a4:	77 e2       	ldi	r23, 0x27	; 39
 3a6:	87 e0       	ldi	r24, 0x07	; 7
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	6d d0       	rcall	.+218    	; 0x486 <__udivmodsi4>
 3ac:	30 95       	com	r19
 3ae:	21 95       	neg	r18
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	30 93 71 00 	sts	0x0071, r19
 3b6:	20 93 70 00 	sts	0x0070, r18
    {
      if(249 >= bpm_value)
      {
        SwitchPressed();
        CalculateBpmValue(bpm_value);
        bpm_value++;
 3ba:	80 91 60 00 	lds	r24, 0x0060
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	80 93 60 00 	sts	0x0060, r24
        eeprom_write_byte(&ee_bpm_value, bpm_value);
 3c4:	80 91 60 00 	lds	r24, 0x0060
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 3c8:	e1 99       	sbic	0x1c, 1	; 28
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <main+0x190>
 3cc:	2a c0       	rjmp	.+84     	; 0x422 <main+0x1ea>
      }     
    }
    else if(0 == SW_BPM_MINUS && SWITCH_READY == timer_flag)
 3ce:	99 99       	sbic	0x13, 1	; 19
 3d0:	9f cf       	rjmp	.-194    	; 0x310 <main+0xd8>
 3d2:	80 91 76 00 	lds	r24, 0x0076
 3d6:	88 23       	and	r24, r24
 3d8:	09 f0       	breq	.+2      	; 0x3dc <main+0x1a4>
 3da:	9a cf       	rjmp	.-204    	; 0x310 <main+0xd8>
    {
      if(51 <= bpm_value)
 3dc:	80 91 60 00 	lds	r24, 0x0060
 3e0:	83 33       	cpi	r24, 0x33	; 51
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <main+0x1ae>
 3e4:	95 cf       	rjmp	.-214    	; 0x310 <main+0xd8>
//-----------------------------------------------------------------------------

void SwitchPressed(void)
{
  /* Reset timer */
  TCNT0 = 0x00;
 3e6:	12 be       	out	0x32, r1	; 50
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 3e8:	13 bf       	out	0x33, r17	; 51
  /* Set status flag for delay */
  timer_flag = SWITCH_PRESSED;
 3ea:	10 93 76 00 	sts	0x0076, r17
    else if(0 == SW_BPM_MINUS && SWITCH_READY == timer_flag)
    {
      if(51 <= bpm_value)
      {
        SwitchPressed();
        CalculateBpmValue(bpm_value);
 3ee:	20 91 60 00 	lds	r18, 0x0060
//-----------------------------------------------------------------------------

void CalculateBpmValue(uint8_t bpm_value)
{
  /* Calculate new timer offset value for timer1 */
  bpm_timer_value = 65536 - ((uint32_t)7814 * 60) / bpm_value;
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	68 e6       	ldi	r22, 0x68	; 104
 3fa:	77 e2       	ldi	r23, 0x27	; 39
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	42 d0       	rcall	.+132    	; 0x486 <__udivmodsi4>
 402:	30 95       	com	r19
 404:	21 95       	neg	r18
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	30 93 71 00 	sts	0x0071, r19
 40c:	20 93 70 00 	sts	0x0070, r18
    {
      if(51 <= bpm_value)
      {
        SwitchPressed();
        CalculateBpmValue(bpm_value);
        bpm_value--;
 410:	80 91 60 00 	lds	r24, 0x0060
 414:	81 50       	subi	r24, 0x01	; 1
 416:	80 93 60 00 	sts	0x0060, r24
        eeprom_write_byte(&ee_bpm_value, bpm_value);
 41a:	80 91 60 00 	lds	r24, 0x0060
 41e:	e1 99       	sbic	0x1c, 1	; 28
 420:	fe cf       	rjmp	.-4      	; 0x41e <main+0x1e6>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 422:	ff ba       	out	0x1f, r15	; 31
 424:	ee ba       	out	0x1e, r14	; 30
#endif
    EEDR = __value;
 426:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	e2 9a       	sbi	0x1c, 2	; 28
 42e:	e1 9a       	sbi	0x1c, 1	; 28
 430:	0f be       	out	0x3f, r0	; 63
 432:	6e cf       	rjmp	.-292    	; 0x310 <main+0xd8>

00000434 <SwitchPressed>:
    led_counter = 0;
}
//-----------------------------------------------------------------------------

void SwitchPressed(void)
{
 434:	12 be       	out	0x32, r1	; 50
  /* Reset timer */
  TCNT0 = 0x00;
  /* Start timer with lowest clk */
  TCCR0 = 0x05;  
 436:	85 e0       	ldi	r24, 0x05	; 5
 438:	83 bf       	out	0x33, r24	; 51
  /* Set status flag for delay */
  timer_flag = SWITCH_PRESSED;
 43a:	80 93 76 00 	sts	0x0076, r24
}
 43e:	08 95       	ret

00000440 <CalculateBpmValue>:
//-----------------------------------------------------------------------------

void CalculateBpmValue(uint8_t bpm_value)
{
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	68 e6       	ldi	r22, 0x68	; 104
 44a:	77 e2       	ldi	r23, 0x27	; 39
 44c:	87 e0       	ldi	r24, 0x07	; 7
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	1a d0       	rcall	.+52     	; 0x486 <__udivmodsi4>
 452:	30 95       	com	r19
 454:	21 95       	neg	r18
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	30 93 71 00 	sts	0x0071, r19
 45c:	20 93 70 00 	sts	0x0070, r18
  /* Calculate new timer offset value for timer1 */
  bpm_timer_value = 65536 - ((uint32_t)7814 * 60) / bpm_value;

  /* store new value in eeprom */

}
 460:	08 95       	ret

00000462 <Tone>:
//-----------------------------------------------------------------------------

void Tone(uint8_t tone_value, uint8_t tone_length_value)
{
 462:	83 bd       	out	0x23, r24	; 35
  /* Initialize timer2 output compare register with tone value */
  OCR2 = tone_value;
  /* set tone length */
  tone_length = tone_length_value;
 464:	60 93 6f 00 	sts	0x006F, r22
  /* Start timer2 with fast PWM on output PB3 */
  TCCR2 = 0x6A;  
 468:	8a e6       	ldi	r24, 0x6A	; 106
 46a:	85 bd       	out	0x25, r24	; 37
}
 46c:	08 95       	ret

0000046e <__udivmodqi4>:
 46e:	99 1b       	sub	r25, r25
 470:	79 e0       	ldi	r23, 0x09	; 9
 472:	04 c0       	rjmp	.+8      	; 0x47c <__udivmodqi4_ep>

00000474 <__udivmodqi4_loop>:
 474:	99 1f       	adc	r25, r25
 476:	96 17       	cp	r25, r22
 478:	08 f0       	brcs	.+2      	; 0x47c <__udivmodqi4_ep>
 47a:	96 1b       	sub	r25, r22

0000047c <__udivmodqi4_ep>:
 47c:	88 1f       	adc	r24, r24
 47e:	7a 95       	dec	r23
 480:	c9 f7       	brne	.-14     	; 0x474 <__udivmodqi4_loop>
 482:	80 95       	com	r24
 484:	08 95       	ret

00000486 <__udivmodsi4>:
 486:	a1 e2       	ldi	r26, 0x21	; 33
 488:	1a 2e       	mov	r1, r26
 48a:	aa 1b       	sub	r26, r26
 48c:	bb 1b       	sub	r27, r27
 48e:	fd 01       	movw	r30, r26
 490:	0d c0       	rjmp	.+26     	; 0x4ac <__udivmodsi4_ep>

00000492 <__udivmodsi4_loop>:
 492:	aa 1f       	adc	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	ee 1f       	adc	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	a2 17       	cp	r26, r18
 49c:	b3 07       	cpc	r27, r19
 49e:	e4 07       	cpc	r30, r20
 4a0:	f5 07       	cpc	r31, r21
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__udivmodsi4_ep>
 4a4:	a2 1b       	sub	r26, r18
 4a6:	b3 0b       	sbc	r27, r19
 4a8:	e4 0b       	sbc	r30, r20
 4aa:	f5 0b       	sbc	r31, r21

000004ac <__udivmodsi4_ep>:
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	1a 94       	dec	r1
 4b6:	69 f7       	brne	.-38     	; 0x492 <__udivmodsi4_loop>
 4b8:	60 95       	com	r22
 4ba:	70 95       	com	r23
 4bc:	80 95       	com	r24
 4be:	90 95       	com	r25
 4c0:	9b 01       	movw	r18, r22
 4c2:	ac 01       	movw	r20, r24
 4c4:	bd 01       	movw	r22, r26
 4c6:	cf 01       	movw	r24, r30
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
