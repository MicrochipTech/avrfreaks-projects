################################################################################
#                                                                              #
#      IAR Universal Linker V4.61J/W32                                         #
#                                                                              #
#           Link time     =  08/Feb/2012  15:29:59                             #
#           Target CPU    =  A90                                               #
#           List file     =  E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\List\Fat_ #
#                            1.map                                             #
#           Output file 1 =  E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Exe\Fat_1 #
#                            .hex                                              #
#                            Format: intel-extended                            #
#           Output file 2 =  E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Exe\Fat_1 #
#                            .d90                                              #
#                            Format: ubrof8                                    #
#                            UBROF version 8.0.2                               #
#           Command line  =  E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\ff.r9 #
#                            0                                                 #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\lcd_v #
#                            1.r90                                             #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\main. #
#                            r90                                               #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\mmc_x #
#                            m_v1.r90                                          #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\spi_x #
#                            m_v1.r90                                          #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\timer #
#                            _xm_v1.r90                                        #
#                            -o                                                #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Exe\Fat_1 #
#                            .d90                                              #
#                            -Fubrof8 -l                                       #
#                            E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\List\Fat_ #
#                            1.map                                             #
#                            -xmsnio                                           #
#                            "-IF:\Program Files\IAR Systems\Embedded Workbenc #
#                            h 5.3\avr\LIB\"                                   #
#                            -f                                                #
#                            "F:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.3\avr\src\template\cfgxm64a3.xcl"               #
#                            (-D_..X_INTVEC_SIZE=1E8 -D_..X_FLASH_NEND=FFFF    #
#                            -D_..X_APPLICATION_SIZE=10000                     #
#                            -D_..X_BOOT_SIZE=1000                             #
#                            -D_..X_APPLICATION_TABLE_SIZE=1000                #
#                            -D_..X_FLASH_END=(_..X_APPLICATION_SIZE+_..X_BOOT #
#                            _SIZE-1)                                          #
#                            -D_..X_APPLICATION_START=_..X_INTVEC_SIZE         #
#                            -D_..X_APPLICATION_END=(_..X_FLASH_END-_..X_BOOT_ #
#                            SIZE-_..X_APPLICATION_TABLE_SIZE)                 #
#                            -D_..X_APPLICATION_TABLE_START=(_..X_APPLICATION_ #
#                            END+1)                                            #
#                            -D_..X_APPLICATION_TABLE_END=(_..X_FLASH_END-_..X #
#                            _BOOT_SIZE)                                       #
#                            -D_..X_BOOT_START=(_..X_APPLICATION_TABLE_END+1)  #
#                            -D_..X_BOOT_END=_..X_FLASH_END                    #
#                            -D_..X_SRAM_BASE=2000 -D_..X_SRAM_TBASE=0         #
#                            -D_..X_SRAM_TSIZE=0 -D_..X_SRAM_END=2FFF          #
#                            -D_..X_EEPROM_END=7FF -D_..X_EEPROM_START=0)      #
#                            -D_..X_HEAP_SIZE=0 -D_..X_TINY_HEAP_SIZE=0        #
#                            -D_..X_NEAR_HEAP_SIZE=20 -D_..X_FAR_HEAP_SIZE=0   #
#                            -D_..X_HUGE_HEAP_SIZE=0 -D_..X_CSTACK_SIZE=600    #
#                            -D_..X_RSTACK_SIZE=40 -f                          #
#                            "F:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.3\avr\src\template\cfgxmega3soim.xcl"           #
#                            (-ca90 -w29                                       #
#                            -Z(CODE)INTVEC=0-(_..X_INTVEC_SIZE-1)             #
#                            -Z(CODE)NEAR_F=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)SWITCH=_..X_FLASH_BASE-_..X_FLASH_NEND    #
#                            -Z(CODE)DIFUNCT=_..X_FLASH_BASE-_..X_FLASH_NEND   #
#                            -Z(CODE)CODE=_..X_FLASH_BASE-_..X_FLASH_END       #
#                            -Z(CODE)FAR_F=[_..X_FLASH_BASE-_..X_FLASH_END]/10 #
#                            000                                               #
#                            -Z(CODE)INITTAB=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)HUGE_F=_..X_FLASH_BASE-_..X_FLASH_END     #
#                            -Z(CODE)TINY_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)NEAR_ID=_..X_FLASH_BASE-_..X_FLASH_END    #
#                            -Z(CODE)APPLICATION=_..X_FLASH_BASE-_..X_APPLICAT #
#                            ION_END                                           #
#                            -Z(CODE)APPLICATION_TABLE=_..X_APPLICATION_TABLE_ #
#                            START-_..X_APPLICATION_TABLE_END                  #
#                            -Z(CODE)BOOT=_..X_BOOT_START-_..X_BOOT_END        #
#                            -Z(CODE)CHECKSUM#_..X_FLASH_END                   #
#                            -Z(DATA)TINY_I,TINY_Z,TINY_N=_..X_SRAM_TBASE:+_.. #
#                            X_SRAM_TSIZE                                      #
#                            -Z(DATA)CSTACK+_..X_CSTACK_SIZE=_..X_CSTACK_BASE- #
#                            _..X_CSTACK_END                                   #
#                            -Z(DATA)HEAP+_..X_HEAP_SIZE=_..X_SRAM_BASE-_..X_S #
#                            RAM_END                                           #
#                            -Z(DATA)IOSTREAM_N#_..X_SRAM_BASE-_..X_SRAM_END   #
#                            -Z(DATA)NEAR_HEAP+_..X_NEAR_HEAP_SIZE=_..X_SRAM_B #
#                            ASE-_..X_SRAM_END                                 #
#                            -Z(DATA)RSTACK+_..X_RSTACK_SIZE=_..X_RSTACK_BASE- #
#                            _..X_RSTACK_END                                   #
#                            -Z(DATA)NEAR_I,NEAR_Z,NEAR_N=_..X_SRAM_BASE-_..X_ #
#                            SRAM_END                                          #
#                            -Z(XDATA)EEPROM_I,EEPROM_N=_..X_EEPROM_START-_..X #
#                            _EEPROM_END)                                      #
#                            -D_..X_FLASH_BASE=_..X_INTVEC_SIZE -H1895         #
#                            -h(CODE)0-(_..X_INTVEC_SIZE-1)                    #
#                            -D_..X_CSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_CSTACK_END=_..X_SRAM_END                   #
#                            -D_..X_RSTACK_BASE=_..X_SRAM_BASE                 #
#                            -D_..X_RSTACK_END=_..X_SRAM_END                   #
#                            -Ointel-extended=E:\B\avr\XMEGA\IAR_projects\FAT_ #
#                            1\Debug\Exe\Fat_1.hex                             #
#                            -s __program_start                                #
#                            "F:\Program Files\IAR Systems\Embedded Workbench  #
#                            5.3\avr\LIB\DLIB\dlAVR-3s-xmega-n.r90"            #
#                            -e_PrintfLarge=_Printf -e_ScanfLarge=_Scanf       #
#                                                                              #
#                                        Copyright (C) 1987-2008 IAR Systems AB.
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE      00000000  Relocatable, from module : ?RESET




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  R10                    = REG
  R11                    = REG
  R12                    = REG
  R13                    = REG
  R14                    = REG
  R15                    = REG
  R4                     = REG
  R5                     = REG
  R6                     = REG
  R7                     = REG
  R8                     = REG
  R9                     = REG
  __64bit_doubles        = disabled
  __cpu                  = 3
  __cpu_name             = ATxmega64A3
  __dlib_file_descriptor = 0
  __enhanced_core        = enabled
  __has_elpm             = true
  __memory_model         = 2
  __no_rampd             = enabled
  __rt_version           = 3



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?ABS_ENTRY_MOD

Absolute parts
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _..X_RSTACK_END         00002FFF 
           _..X_RSTACK_BASE        00002000 
           _..X_CSTACK_END         00002FFF 
           _..X_CSTACK_BASE        00002000 
           _..X_FLASH_BASE         000001E8 
           _..X_RSTACK_SIZE        00000040 
           _..X_CSTACK_SIZE        00000600 
           _..X_HUGE_HEAP_SIZE     00000000 
           _..X_FAR_HEAP_SIZE      00000000 
           _..X_NEAR_HEAP_SIZE     00000020 
           _..X_TINY_HEAP_SIZE     00000000 
           _..X_HEAP_SIZE          00000000 
           _..X_EEPROM_START       00000000 
           _..X_EEPROM_END         000007FF 
           _..X_SRAM_END           00002FFF 
           _..X_SRAM_TSIZE         00000000 
           _..X_SRAM_TBASE         00000000 
           _..X_SRAM_BASE          00002000 
           _..X_BOOT_END           00010FFF 
           _..X_BOOT_START         00010000 
           _..X_APPLICATION_TABLE_END
                                   0000FFFF 
           _..X_APPLICATION_TABLE_START
                                   0000F000 
           _..X_APPLICATION_END    0000EFFF 
           _..X_APPLICATION_START
                                   000001E8 
           _..X_FLASH_END          00010FFF 
           _..X_APPLICATION_TABLE_SIZE
                                   00001000 
           _..X_BOOT_SIZE          00001000 
           _..X_APPLICATION_SIZE   00010000 
           _..X_FLASH_NEND         0000FFFF 
           _..X_INTVEC_SIZE        000001E8 
    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\ff.r90
  PROGRAM MODULE, NAME : ff

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 000026D4 - 000026D7 (0x4 bytes), align: 0
  Segment part 15.            Intra module refs:   chk_mounted(TCHAR const * *, FATFS * *, BYTE)
                                                   f_mount
           LOCAL                   ADDRESS         
           =====                   =======         
           FatFs                   000026D4 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000026D8 - 000026D9 (0x2 bytes), align: 0
  Segment part 17.            Intra module refs:   chk_mounted(TCHAR const * *, FATFS * *, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           Fsid                    000026D8 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000026DA - 000026DA (0x1 bytes), align: 0
  Segment part 18.            Intra module refs:   chk_mounted(TCHAR const * *, FATFS * *, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           CurrVol                 000026DA 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000001E8 - 00000227 (0x40 bytes), align: 1
  Segment part 23.            Intra module refs:   dir_register(DIR *)
                                                   f_read
                                                   f_write
           LOCAL                   ADDRESS         
           =====                   =======         
           mem_cpy(void *, void const *, UINT)
                                   000001E8 
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000228 - 0000023F (0x18 bytes), align: 1
  Segment part 24.            Intra module refs:   create_name(DIR *, TCHAR const * *)
                                                   dir_next(DIR *, int)
                                                   dir_register(DIR *)
                                                   sync(FATFS *)
           LOCAL                   ADDRESS         
           =====                   =======         
           mem_set(void *, int, UINT)
                                   00000228 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000240 - 00000279 (0x3a bytes), align: 1
  Segment part 25.            Intra module refs:   dir_find(DIR *)
           LOCAL                   ADDRESS         
           =====                   =======         
           mem_cmp(void const *, void const *, UINT)
                                   00000240 
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000027A - 0000029B (0x22 bytes), align: 1
  Segment part 26.            Intra module refs:   create_name(DIR *, TCHAR const * *)
           LOCAL                   ADDRESS         
           =====                   =======         
           chk_chr(char const *, int)
                                   0000027A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000029C - 00000377 (0xdc bytes), align: 1
  Segment part 27.            Intra module refs:   dir_find(DIR *)
                                                   dir_next(DIR *, int)
                                                   dir_register(DIR *)
                                                   f_open
                                                   f_read
                                                   f_sync
                                                   f_write
                                                   get_fat(FATFS *, DWORD)
                                                   put_fat(FATFS *, DWORD, DWORD)
                                                   sync(FATFS *)
           LOCAL                   ADDRESS         
           =====                   =======         
           move_window(FATFS *, DWORD)
                                   0000029C 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000378 - 00000467 (0xf0 bytes), align: 1
  Segment part 28.            Intra module refs:   f_sync
           LOCAL                   ADDRESS         
           =====                   =======         
           sync(FATFS *)           00000378 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000468 - 000004C5 (0x5e bytes), align: 1
  Segment part 29.            Intra module refs:   dir_next(DIR *, int)
                                                   dir_sdi(DIR *, WORD)
                                                   f_read
                                                   f_write
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           clust2sect(FATFS *, DWORD)
                                   00000468 
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000004C6 - 0000067F (0x1ba bytes), align: 1
  Segment part 30.            Intra module refs:   create_chain(FATFS *, DWORD)
                                                   dir_next(DIR *, int)
                                                   dir_sdi(DIR *, WORD)
                                                   f_read
                                                   remove_chain(FATFS *, DWORD)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           get_fat(FATFS *, DWORD)
                                   000004C6 
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 0000000A )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000680 - 00000877 (0x1f8 bytes), align: 1
  Segment part 31.            Intra module refs:   create_chain(FATFS *, DWORD)
                                                   remove_chain(FATFS *, DWORD)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           put_fat(FATFS *, DWORD, DWORD)
                                   00000680 
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000011 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000878 - 0000096D (0xf6 bytes), align: 1
  Segment part 32.            Intra module refs:   f_open
           LOCAL                   ADDRESS         
           =====                   =======         
           remove_chain(FATFS *, DWORD)
                                   00000878 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 0000000F )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000096E - 00000B37 (0x1ca bytes), align: 1
  Segment part 33.            Intra module refs:   dir_next(DIR *, int)
                                                   f_write
           LOCAL                   ADDRESS         
           =====                   =======         
           create_chain(FATFS *, DWORD)
                                   0000096E 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000014 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000B38 - 00000CD7 (0x1a0 bytes), align: 1
  Segment part 34.            Intra module refs:   dir_find(DIR *)
                                                   dir_register(DIR *)
                                                   follow_path(DIR *, TCHAR const *)
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_sdi(DIR *, WORD)    00000B38 
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 0000000A )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000CD8 - 00000F3D (0x266 bytes), align: 1
  Segment part 35.            Intra module refs:   dir_find(DIR *)
                                                   dir_register(DIR *)
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_next(DIR *, int)    00000CD8 
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 0000000C )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000F3E - 00000FAD (0x70 bytes), align: 1
  Segment part 36.            Intra module refs:   follow_path(DIR *, TCHAR const *)
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_find(DIR *)         00000F3E 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Segment part 37. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_read(DIR *)         
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00000FAE - 00001045 (0x98 bytes), align: 1
  Segment part 38.            Intra module refs:   f_open
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_register(DIR *)     00000FAE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000006 )
    -------------------------------------------------------------------------
CODE
  Segment part 39. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           dir_remove(DIR *)       
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001046 - 000011D5 (0x190 bytes), align: 1
  Segment part 40.            Intra module refs:   follow_path(DIR *, TCHAR const *)
           LOCAL                   ADDRESS         
           =====                   =======         
           create_name(DIR *, TCHAR const * *)
                                   00001046 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 0000000E )
    -------------------------------------------------------------------------
CODE
  Segment part 41. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           get_fileinfo(DIR *, FILINFO *)
                                   
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000011D6 - 000012D9 (0x104 bytes), align: 1
  Segment part 42.            Intra module refs:   f_open
           LOCAL                   ADDRESS         
           =====                   =======         
           follow_path(DIR *, TCHAR const *)
                                   000011D6 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000012DA - 00001367 (0x8e bytes), align: 1
  Segment part 43.            Intra module refs:   chk_mounted(TCHAR const * *, FATFS * *, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           check_fs(FATFS *, DWORD)
                                   000012DA 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001368 - 0000183F (0x4d8 bytes), align: 1
  Segment part 44.            Intra module refs:   f_open
           LOCAL                   ADDRESS         
           =====                   =======         
           chk_mounted(TCHAR const * *, FATFS * *, BYTE)
                                   00001368 
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000011 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001840 - 00001871 (0x32 bytes), align: 1
  Segment part 45.            Intra module refs:   f_read
                                                   f_sync
                                                   f_write
           LOCAL                   ADDRESS         
           =====                   =======         
           validate(FATFS *, WORD)
                                   00001840 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001872 - 000018B9 (0x48 bytes), align: 1
  Segment part 46.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_mount                 00001872        main (main)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000018BA - 00001AD3 (0x21a bytes), align: 1
  Segment part 47.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_open                  000018BA        main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000032 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001AD4 - 00001DD1 (0x2fe bytes), align: 1
  Segment part 48.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_read                  00001AD4        main (main)
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00001DD2 - 000021DD (0x40c bytes), align: 1
  Segment part 49.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_write                 00001DD2        main (main)
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000021DE - 00002283 (0xa6 bytes), align: 1
  Segment part 50.            Intra module refs:   f_close
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_sync                  000021DE 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002284 - 0000229F (0x1c bytes), align: 1
  Segment part 51.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_close                 00002284        main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 52. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_chdrive               
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 53. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_chdir                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 54. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_getcwd                
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 55. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_lseek                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 56. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_opendir               
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 57. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_readdir               
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 58. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_stat                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 59. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_getfree               
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 60. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_truncate              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 61. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_unlink                
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 62. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_mkdir                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 63. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_chmod                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 64. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_utime                 
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 65. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_rename                
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 66. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_mkfs                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002640 - 0000264E (0xf bytes), align: 0
  Segment part 6.             Intra module refs:   create_name(DIR *, TCHAR const * *)
    -------------------------------------------------------------------------
NEAR_I
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_I
  Segment part 19. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           f_mkfs::vst             
    -------------------------------------------------------------------------
NEAR_I
  Segment part 21. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           f_mkfs::cst             
    -------------------------------------------------------------------------
CODE
  Segment part 67. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_gets                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 68. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_putc                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 69. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_puts                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 70. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           f_printf                
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003186 - 00003194 (0xf bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 00003178 - 0000317E (0x7 bytes), align: 0
  Segment part 8.             Intra module refs:   Segment part 11 (main)
                                                   Segment part 13 (main)
                                                   Segment part 15 (main)
                                                   Segment part 17 (main)
                                                   Segment part 19 (main)
                                                   Segment part 21 (main)
                                                   Segment part 23 (main)
                                                   Segment part 25 (main)
                                                   Segment part 27 (main)
                                                   Segment part 29 (main)
                                                   Segment part 6
                                                   Segment part 6 (main)
                                                   Segment part 9 (main)
                                                   Stat (mmc_xm_v1)
                                                   buffer (main)
                                                   path (main)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   00003178 
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE 0000317F - 00003185 (0x7 bytes), align: 0
  Segment part 16.            Intra module refs:   CardType (mmc_xm_v1)
                                                   CurrVol
                                                   FatFs
                                                   Fsid
                                                   SpiTransferComplete (spi_xm_v1)
                                                   Timer1 (mmc_xm_v1)
                                                   Timer2 (mmc_xm_v1)
                                                   fat (main)
                                                   file (main)
                                                   nbytes (main)
                                                   res (main)
                                                   timer_f (timer_xm_v1)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   0000317F 
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 20. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Segment part 22. NOT NEEDED.

    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\lcd_v1.r90
  PROGRAM MODULE, NAME : lcd_v1

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000022A0 - 000022FF (0x60 bytes), align: 1
  Segment part 6.             Intra module refs:   LCDInit()
                                                   LCDSendCommand(unsigned char)
                                                   LCDSendData(unsigned char)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDDataLines(unsigned char)
                                   000022A0 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002300 - 00002329 (0x2a bytes), align: 1
  Segment part 7.             Intra module refs:   LCDInit()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDDirOut()             00002300 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000232A - 00002353 (0x2a bytes), align: 1
  Segment part 8.             Intra module refs:   LCDInit()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDDirIn()              0000232A 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002354 - 000023B9 (0x66 bytes), align: 1
  Segment part 9.             Intra module refs:   LCDStringRam(char *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDSendData(unsigned char)
                                   00002354 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000001 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000023BA - 00002431 (0x78 bytes), align: 1
  Segment part 10.            Intra module refs:   LCDGotoXY(unsigned char, unsigned char)
                                                   LCDInit()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDSendCommand(unsigned char)
                                   000023BA 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000001 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002432 - 00002537 (0x106 bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDInit()               00002432        main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDClr()                
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDHome()               
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002538 - 00002551 (0x1a bytes), align: 1
  Segment part 14.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDStringRam(char *)    00002538        main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDStringFlash(char __flash *)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002552 - 00002583 (0x32 bytes), align: 1
  Segment part 16.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDGotoXY(unsigned char, unsigned char)
                                   00002552        main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 17. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDdefinechar(uint8_t __flash *, uint8_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 18. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDShiftLeft(uint8_t)   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 19. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDShiftRight(uint8_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 20. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDCursorOn()           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 21. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDCursorOnBlink()      
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 22. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDCursorOFF()          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 23. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDBlank()              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 24. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDVisible()            
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 25. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDCursorLeft(uint8_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 26. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDCursorRight(uint8_t)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 27. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           LCDBusyWait()           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\main.r90
  PROGRAM MODULE, NAME : main

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 000026DB - 000026DB (0x1 bytes), align: 0
  Segment part 31.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           res                     000026DB 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000026DC - 000026DD (0x2 bytes), align: 0
  Segment part 33.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           nbytes                  000026DC 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 000026DE - 0000290F (0x232 bytes), align: 0
  Segment part 34.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           fat                     000026DE 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00002910 - 0000292F (0x20 bytes), align: 0
  Segment part 35.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           file                    00002910 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000264F - 00002655 (0x7 bytes), align: 0
  Segment part 6.             Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002656 - 0000265C (0x7 bytes), align: 0
  Segment part 9.             Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000265D - 00002663 (0x7 bytes), align: 0
  Segment part 11.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002664 - 0000266A (0x7 bytes), align: 0
  Segment part 13.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000266B - 00002671 (0x7 bytes), align: 0
  Segment part 15.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002672 - 00002678 (0x7 bytes), align: 0
  Segment part 17.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002679 - 0000267F (0x7 bytes), align: 0
  Segment part 19.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002680 - 00002688 (0x9 bytes), align: 0
  Segment part 21.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002689 - 00002694 (0xc bytes), align: 0
  Segment part 23.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 00002695 - 0000269D (0x9 bytes), align: 0
  Segment part 25.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 0000269E - 000026A9 (0xc bytes), align: 0
  Segment part 27.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000026AA - 000026B5 (0xc bytes), align: 0
  Segment part 29.            Intra module refs:   main
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000026B6 - 000026C1 (0xc bytes), align: 0
  Segment part 36.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           path                    000026B6 
    -------------------------------------------------------------------------
NEAR_I
  Relative segment, address: DATA 000026C2 - 000026D2 (0x11 bytes), align: 0
  Segment part 38.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           buffer                  000026C2 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002584 - 0000258D (0xa bytes), align: 1
  Segment part 40.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           get_fattime             00002584        f_open (ff)
                                                   f_sync (ff)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000258E - 000026F1 (0x164 bytes), align: 1
  Segment part 41.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    0000258E        ?cstartup_call_main (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000001 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003195 - 0000319B (0x7 bytes), align: 0
  Segment part 7.             Intra module refs:   Segment part 6
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 0000319C - 000031A2 (0x7 bytes), align: 0
  Segment part 10.            Intra module refs:   Segment part 9
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031A3 - 000031A9 (0x7 bytes), align: 0
  Segment part 12.            Intra module refs:   Segment part 11
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031AA - 000031B0 (0x7 bytes), align: 0
  Segment part 14.            Intra module refs:   Segment part 13
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031B1 - 000031B7 (0x7 bytes), align: 0
  Segment part 16.            Intra module refs:   Segment part 15
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031B8 - 000031BE (0x7 bytes), align: 0
  Segment part 18.            Intra module refs:   Segment part 17
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031BF - 000031C5 (0x7 bytes), align: 0
  Segment part 20.            Intra module refs:   Segment part 19
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031C6 - 000031CE (0x9 bytes), align: 0
  Segment part 22.            Intra module refs:   Segment part 21
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031CF - 000031DA (0xc bytes), align: 0
  Segment part 24.            Intra module refs:   Segment part 23
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031DB - 000031E3 (0x9 bytes), align: 0
  Segment part 26.            Intra module refs:   Segment part 25
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031E4 - 000031EF (0xc bytes), align: 0
  Segment part 28.            Intra module refs:   Segment part 27
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031F0 - 000031FB (0xc bytes), align: 0
  Segment part 30.            Intra module refs:   Segment part 29
    -------------------------------------------------------------------------
INITTAB
  Segment part 32. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 000031FC - 00003207 (0xc bytes), align: 0
  Segment part 37.            Intra module refs:   path
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003208 - 00003218 (0x11 bytes), align: 0
  Segment part 39.            Intra module refs:   buffer

    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\mmc_xm_v1.r90
  PROGRAM MODULE, NAME : mmc_xm_v1

  SEGMENTS IN THE MODULE
  ======================
NEAR_I
  Relative segment, address: DATA 000026D3 - 000026D3 (0x1 bytes), align: 0
  Segment part 6.             Intra module refs:   disk_initialize(BYTE)
                                                   disk_ioctl(BYTE, BYTE, void *)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE)
                                                   disk_status(BYTE)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           Stat                    000026D3 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00002930 - 00002930 (0x1 bytes), align: 0
  Segment part 9.             Intra module refs:   disk_initialize(BYTE)
                                                   rcvr_datablock(BYTE *, UINT)
           LOCAL                   ADDRESS         
           =====                   =======         
           Timer1                  00002930 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00002931 - 00002931 (0x1 bytes), align: 0
  Segment part 11.            Intra module refs:   wait_ready()
           LOCAL                   ADDRESS         
           =====                   =======         
           Timer2                  00002931 
    -------------------------------------------------------------------------
NEAR_Z
  Relative segment, address: DATA 00002932 - 00002932 (0x1 bytes), align: 0
  Segment part 12.            Intra module refs:   disk_initialize(BYTE)
                                                   disk_ioctl(BYTE, BYTE, void *)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           CardType                00002932        main (main)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000026F2 - 00002733 (0x42 bytes), align: 1
  Segment part 13.            Intra module refs:   select()
                                                   xmit_datablock(BYTE const *, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           wait_ready()            000026F2 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002734 - 00002741 (0xe bytes), align: 1
  Segment part 14.            Intra module refs:   disk_initialize(BYTE)
                                                   disk_ioctl(BYTE, BYTE, void *)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE)
                                                   select()
                                                   send_cmd(BYTE, DWORD)
           LOCAL                   ADDRESS         
           =====                   =======         
           deselect()              00002734 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002742 - 0000275B (0x1a bytes), align: 1
  Segment part 15.            Intra module refs:   disk_ioctl(BYTE, BYTE, void *)
                                                   send_cmd(BYTE, DWORD)
           LOCAL                   ADDRESS         
           =====                   =======         
           select()                00002742 
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000275C - 000027CF (0x74 bytes), align: 1
  Segment part 16.            Intra module refs:   disk_ioctl(BYTE, BYTE, void *)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           rcvr_datablock(BYTE *, UINT)
                                   0000275C 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000027D0 - 00002831 (0x62 bytes), align: 1
  Segment part 17.            Intra module refs:   disk_write(BYTE, BYTE const *, DWORD, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           xmit_datablock(BYTE const *, BYTE)
                                   000027D0 
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002832 - 000028C3 (0x92 bytes), align: 1
  Segment part 18.            Intra module refs:   disk_initialize(BYTE)
                                                   disk_ioctl(BYTE, BYTE, void *)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE)
           LOCAL                   ADDRESS         
           =====                   =======         
           send_cmd(BYTE, DWORD)   00002832 
               calls direct
               recursive function = 0005
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000005 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000028C4 - 00002A65 (0x1a2 bytes), align: 1
  Segment part 19.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           disk_initialize(BYTE)   000028C4        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   main (main)
               calls direct
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000006 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A66 - 00002A73 (0xe bytes), align: 1
  Segment part 20.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           disk_status(BYTE)       00002A66        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   validate(FATFS *, WORD) (ff)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002A74 - 00002B1B (0xa8 bytes), align: 1
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           disk_read(BYTE, BYTE *, DWORD, BYTE)
                                   00002A74        check_fs(FATFS *, DWORD) (ff)
                                                   chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   f_read (ff)
                                                   move_window(FATFS *, DWORD) (ff)
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002B1C - 00002BED (0xd2 bytes), align: 1
  Segment part 22.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           disk_write(BYTE, BYTE const *, DWORD, BYTE)
                                   00002B1C        f_write (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   sync(FATFS *) (ff)
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000008 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002BEE - 00002ECD (0x2e0 bytes), align: 1
  Segment part 23.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           disk_ioctl(BYTE, BYTE, void *)
                                   00002BEE        sync(FATFS *) (ff)
               calls direct
               RSTACK = 00000000 ( 00000004 )
               CSTACK = 00000000 ( 00000016 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
NEAR_ID
  Relative segment, address: CODE 00003219 - 00003219 (0x1 bytes), align: 0
  Segment part 7.             Intra module refs:   Stat
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_I>
                                   
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\spi_xm_v1.r90
  PROGRAM MODULE, NAME : spi_xm_v1

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00002933 - 00002933 (0x1 bytes), align: 0
  Segment part 7.             Intra module refs:   SpiInit()
                                                   SpiSendByte(unsigned char)
                                                   SpiTransferByte(unsigned char)
                                                   handler_SPI_INTERRUPT()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiTransferComplete     00002933 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002ECE - 00002EE9 (0x1c bytes), align: 1
  Segment part 9.             Intra module refs:   handler_SPI_INTERRUPT()::??INTVEC 348
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           handler_SPI_INTERRUPT()
                                   00002ECE 
               interrupt function
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000003 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002EEA - 00002F19 (0x30 bytes), align: 1
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiInit()               00002EEA        disk_initialize(BYTE) (mmc_xm_v1)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F1A - 00002F2D (0x14 bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiSendByte(unsigned char)
                                   00002F1A        send_cmd(BYTE, DWORD) (mmc_xm_v1)
                                                   xmit_datablock(BYTE const *, BYTE) (mmc_xm_v1)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F2E - 00002F45 (0x18 bytes), align: 1
  Segment part 12.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiTransferByte(unsigned char)
                                   00002F2E        deselect() (mmc_xm_v1)
                                                   disk_initialize(BYTE) (mmc_xm_v1)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)
                                                   rcvr_datablock(BYTE *, UINT) (mmc_xm_v1)
                                                   send_cmd(BYTE, DWORD) (mmc_xm_v1)
                                                   wait_ready() (mmc_xm_v1)
                                                   xmit_datablock(BYTE const *, BYTE) (mmc_xm_v1)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiTransferWord(unsigned int)
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           SpiReceiveByte(unsigned char *)
                                   
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000015F (0x160 bytes), align: 1
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           handler_SPI_INTERRUPT()::??INTVEC 348
                                   0000015C 
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  FILE NAME : E:\B\avr\XMEGA\IAR_projects\FAT_1\Debug\Obj\timer_xm_v1.r90
  PROGRAM MODULE, NAME : timer_xm_v1

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Relative segment, address: DATA 00002934 - 00002934 (0x1 bytes), align: 0
  Segment part 7.             Intra module refs:   handler_TC_OVF_INTERRUPT()
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           timer_f                 00002934        disk_initialize(BYTE) (mmc_xm_v1)
                                                   wait_ready() (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F46 - 00002F61 (0x1c bytes), align: 1
  Segment part 9.             Intra module refs:   handler_TC_OVF_INTERRUPT()::??INTVEC 56
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           handler_TC_OVF_INTERRUPT()
                                   00002F46 
               interrupt function
               RSTACK = 00000000 ( 00000002 )
               CSTACK = 00000000 ( 00000003 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F62 - 00002F75 (0x14 bytes), align: 1
  Segment part 10.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           TimerInit()             00002F62        disk_initialize(BYTE) (mmc_xm_v1)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F76 - 00002F93 (0x1e bytes), align: 1
  Segment part 11.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           delay_ms(unsigned int)
                                   00002F76        LCDInit() (lcd_v1)
                                                   LCDSendCommand(unsigned char) (lcd_v1)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
INTVEC
  Common segment, address: CODE 00000000 - 0000003B (0x3c bytes), align: 1
  Segment part 4. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           handler_TC_OVF_INTERRUPT()::??INTVEC 56
                                   00000038 
    -------------------------------------------------------------------------
CSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 8. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  FILE NAME : F:\Program Files\IAR Systems\Embedded Workbench 5.3\avr\LIB\DLIB\dlAVR-3s-xmega-n.r90
  LIBRARY MODULE, NAME : ?_exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002F94, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _exit                   00002F94        ?cstartup_call_main (?C_STARTUP)
                                                   exit (?exit)
    -------------------------------------------------------------------------
CODE
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 2. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_call_dtors     
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __cstart_closeall       
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F94 - 00002F97 (0x4 bytes), align: 1
  Segment part 5.             Intra module refs:   _exit

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?abort

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           abort                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?cppinit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_ctors            
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __alloc_record_needed_destruction
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __record_needed_destruction
                                   
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __call_dtors            
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_vec_cctor        
               calls indirect
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 7. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?RESET

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 00000003 (0x4 bytes), align: 1
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __program_start         00000000        Absolute parts (?ABS_ENTRY_MOD)
           ?RESET                  00000000        Segment part 2 (?C_STARTUP)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?C_STARTUP

  SEGMENTS IN THE MODULE
  ======================
CSTACK
  Segment part 0. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 1. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F98, align: 1
  Segment part 2.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?C_STARTUP              00002F98        Segment part 0 (?RESET)
           __RESTART               00002F98 
    -------------------------------------------------------------------------
CODE
  Segment part 3. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram
                                   
    -------------------------------------------------------------------------
CODE
  Segment part 4. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __RSTACK_in_external_ram_new_way
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002F98 - 00002FA3 (0xc bytes), align: 1
  Segment part 5.             Intra module refs:   Segment part 2
    -------------------------------------------------------------------------
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?zero_reg_initialization
                                   
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FA4 - 00002FA7 (0x4 bytes), align: 1
  Segment part 7.             Intra module refs:   Segment part 5
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_low_level_init    00002FA4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FA8 - 00002FAF (0x8 bytes), align: 1
  Segment part 8.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?need_segment_init      00002FA8        ?<Segment init: NEAR_I> (ff)
                                                   ?<Segment init: NEAR_Z> (ff)
    -------------------------------------------------------------------------
DIFUNCT
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?call_ctors             
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00002FB0 - 00002FBB (0xc bytes), align: 1
  Segment part 11.            Intra module refs:   ?call_low_level_init
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?cstartup_call_main     00002FB0 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002FBC - 00002FBF (0x4 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           exit                    00002FBC        ?cstartup_call_main (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_EC_MUL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002FC0 - 00002FCF (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_EC_MUL_L02           00002FC0        dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?S_SHL_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002FD0 - 00002FDB (0xc bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?S_SHL_L02              00002FD0        disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_SHR_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002FDC - 00002FE7 (0xc bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_SHR_L02             00002FDC        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?US_DIVMOD_L02

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00002FE8 - 0000300F (0x28 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?US_DIVMOD_L02          00002FE8        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?L_EC_MUL_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003010 - 0000304F (0x40 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_EC_MUL_L03           00003010        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   clust2sect(FATFS *, DWORD) (ff)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE) (mmc_xm_v1)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?L_SHL_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003050 - 0000305F (0x10 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?L_SHL_L03              00003050        disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?UL_DIVMOD_L03

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003060 - 000030A5 (0x46 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?UL_DIVMOD_L03          00003060        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?PROLOGUE_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030A6 - 000030A7 (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE16_L09         000030A6        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   f_read (ff)
                                                   f_write (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030A8 - 000030A9 (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?PROLOGUE16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE15_L09         000030A8 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030AA - 000030AB (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?PROLOGUE15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE14_L09         000030AA        create_name(DIR *, TCHAR const * *) (ff)
                                                   f_open (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030AC - 000030AD (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?PROLOGUE14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE13_L09         000030AC        put_fat(FATFS *, DWORD, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030AE - 000030AF (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?PROLOGUE13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE12_L09         000030AE        dir_next(DIR *, int) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030B0 - 000030B1 (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?PROLOGUE12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE11_L09         000030B0        remove_chain(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030B2 - 000030B3 (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?PROLOGUE11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE10_L09         000030B2        dir_sdi(DIR *, WORD) (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030B4 - 000030B5 (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?PROLOGUE10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE9_L09          000030B4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030B6 - 000030B7 (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?PROLOGUE9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE8_L09          000030B6        disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030B8 - 000030B9 (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?PROLOGUE8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE7_L09          000030B8 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030BA - 000030BB (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?PROLOGUE7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE6_L09          000030BA        dir_register(DIR *) (ff)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030BC - 000030BD (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?PROLOGUE6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE5_L09          000030BC        send_cmd(BYTE, DWORD) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030BE - 000030BF (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?PROLOGUE5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE4_L09          000030BE        dir_find(DIR *) (ff)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE) (mmc_xm_v1)
                                                   f_sync (ff)
                                                   mem_cmp(void const *, void const *, UINT) (ff)
                                                   mem_cpy(void *, void const *, UINT) (ff)
                                                   rcvr_datablock(BYTE *, UINT) (mmc_xm_v1)
                                                   sync(FATFS *) (ff)
                                                   xmit_datablock(BYTE const *, BYTE) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030C0 - 000030C1 (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?PROLOGUE4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE3_L09          000030C0 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030C2 - 000030C3 (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?PROLOGUE3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE2_L09          000030C2 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030C4 - 000030C5 (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?PROLOGUE2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?PROLOGUE1_L09          000030C4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030C6 - 000030C7 (0x2 bytes), align: 1
  Segment part 16.            Intra module refs:   ?PROLOGUE1_L09

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?EPILOGUE_B_L09

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030C8 - 000030C9 (0x2 bytes), align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B16_L09       000030C8        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   f_read (ff)
                                                   f_write (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030CA - 000030CB (0x2 bytes), align: 1
  Segment part 1.             Intra module refs:   ?EPILOGUE_B16_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B15_L09       000030CA 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030CC - 000030CD (0x2 bytes), align: 1
  Segment part 2.             Intra module refs:   ?EPILOGUE_B15_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B14_L09       000030CC        create_name(DIR *, TCHAR const * *) (ff)
                                                   f_open (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030CE - 000030CF (0x2 bytes), align: 1
  Segment part 3.             Intra module refs:   ?EPILOGUE_B14_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B13_L09       000030CE        put_fat(FATFS *, DWORD, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030D0 - 000030D1 (0x2 bytes), align: 1
  Segment part 4.             Intra module refs:   ?EPILOGUE_B13_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B12_L09       000030D0        dir_next(DIR *, int) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030D2 - 000030D3 (0x2 bytes), align: 1
  Segment part 5.             Intra module refs:   ?EPILOGUE_B12_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B11_L09       000030D2        remove_chain(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030D4 - 000030D5 (0x2 bytes), align: 1
  Segment part 6.             Intra module refs:   ?EPILOGUE_B11_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B10_L09       000030D4        dir_sdi(DIR *, WORD) (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030D6 - 000030D7 (0x2 bytes), align: 1
  Segment part 7.             Intra module refs:   ?EPILOGUE_B10_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B9_L09        000030D6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030D8 - 000030D9 (0x2 bytes), align: 1
  Segment part 8.             Intra module refs:   ?EPILOGUE_B9_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B8_L09        000030D8        disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030DA - 000030DB (0x2 bytes), align: 1
  Segment part 9.             Intra module refs:   ?EPILOGUE_B8_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B7_L09        000030DA 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030DC - 000030DD (0x2 bytes), align: 1
  Segment part 10.            Intra module refs:   ?EPILOGUE_B7_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B6_L09        000030DC        dir_register(DIR *) (ff)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030DE - 000030DF (0x2 bytes), align: 1
  Segment part 11.            Intra module refs:   ?EPILOGUE_B6_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B5_L09        000030DE        send_cmd(BYTE, DWORD) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030E0 - 000030E1 (0x2 bytes), align: 1
  Segment part 12.            Intra module refs:   ?EPILOGUE_B5_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B4_L09        000030E0        dir_find(DIR *) (ff)
                                                   disk_read(BYTE, BYTE *, DWORD, BYTE) (mmc_xm_v1)
                                                   f_sync (ff)
                                                   mem_cmp(void const *, void const *, UINT) (ff)
                                                   mem_cpy(void *, void const *, UINT) (ff)
                                                   rcvr_datablock(BYTE *, UINT) (mmc_xm_v1)
                                                   sync(FATFS *) (ff)
                                                   xmit_datablock(BYTE const *, BYTE) (mmc_xm_v1)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030E2 - 000030E3 (0x2 bytes), align: 1
  Segment part 13.            Intra module refs:   ?EPILOGUE_B4_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B3_L09        000030E2 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030E4 - 000030E5 (0x2 bytes), align: 1
  Segment part 14.            Intra module refs:   ?EPILOGUE_B3_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B2_L09        000030E4 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030E6 - 000030E7 (0x2 bytes), align: 1
  Segment part 15.            Intra module refs:   ?EPILOGUE_B2_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B1_L09        000030E6 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030E8 - 000030F1 (0xa bytes), align: 1
  Segment part 16.            Intra module refs:   ?EPILOGUE_B1_L09
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?EPILOGUE_B0_L09        000030E8 

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR4_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R4_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_register(DIR *) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)
                                                   send_cmd(BYTE, DWORD) (mmc_xm_v1)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR5_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R5_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_register(DIR *) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   disk_ioctl(BYTE, BYTE, void *) (mmc_xm_v1)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR6_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R6_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR7_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R7_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   disk_write(BYTE, BYTE const *, DWORD, BYTE) (mmc_xm_v1)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR8_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R8_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR9_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R9_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   dir_sdi(DIR *, WORD) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   get_fat(FATFS *, DWORD) (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR10_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R10_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)
                                                   remove_chain(FATFS *, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR11_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R11_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   dir_next(DIR *, int) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   move_window(FATFS *, DWORD) (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR12_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R12_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)
                                                   put_fat(FATFS *, DWORD, DWORD) (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR13_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R13_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   create_name(DIR *, TCHAR const * *) (ff)
                                                   f_open (ff)
                                                   f_read (ff)
                                                   f_write (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR14_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R14_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   f_read (ff)
                                                   f_write (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?REGISTER_CGREGR15_L10

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2, align: 1
  Segment part 0.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?Register_R15_is_cg_reg
                                   000030F2        chk_mounted(TCHAR const * *, FATFS * *, BYTE) (ff)
                                                   create_chain(FATFS *, DWORD) (ff)
                                                   f_read (ff)
                                                   f_write (ff)

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?low_level_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F2 - 000030F5 (0x4 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __low_level_init        000030F2        ?call_low_level_init (?C_STARTUP)
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?segment_init

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 000030F6 - 000030FD (0x8 bytes), align: 1
  Segment part 6.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __memclr                000030F6 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 000030FE - 00003109 (0xc bytes), align: 1
  Segment part 7.             Intra module refs:   __segment_init
           LOCAL                   ADDRESS         
           =====                   =======         
           __flashcpy              000030FE 
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 0000310A - 00003115 (0xc bytes), align: 1
  Segment part 8.             Intra module refs:   __flashcpy
                                                   __memclr
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE 00003116 - 00003175 (0x60 bytes), align: 1
  Segment part 9.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __segment_init          00003116        ?need_segment_init (?C_STARTUP)
               calls direct
               RSTACK = 00000000 ( 00000002 )
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 10. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xcloseall

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           _Close_all              
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xgetmemchunk

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 8. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_GetMemChunk      
               not allocated function
    -------------------------------------------------------------------------
NEAR_Z
  Segment part 6. NOT NEEDED.
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 7. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   
    -------------------------------------------------------------------------
NEAR_HEAP
  Segment part 9. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?__exit

  SEGMENTS IN THE MODULE
  ======================
CODE
  Relative segment, address: CODE 00003176 - 00003177 (0x2 bytes), align: 1
  Segment part 6.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __exit                  00003176        Segment part 5 (?_exit)
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxfree

  SEGMENTS IN THE MODULE
  ======================
CODE
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           free                    
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 7. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_free             
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.

    -------------------------------------------------------------------------
  LIBRARY MODULE, NAME : ?xxmemxmalloc

  SEGMENTS IN THE MODULE
  ======================
NEAR_Z
  Segment part 6. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_Aldata           
    -------------------------------------------------------------------------
CODE
  Segment part 8. NOT NEEDED.
           LOCAL                   ADDRESS         
           =====                   =======         
           __near_findmem          
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 9. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 10. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 11. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 12. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 13. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 14. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           malloc                  
               calls direct
               not allocated function
    -------------------------------------------------------------------------
CODE
  Segment part 15. NOT NEEDED.
    -------------------------------------------------------------------------
CODE
  Segment part 16. NOT NEEDED.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __near_malloc           
               calls direct
               not allocated function
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 1. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?CCP                  
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 2. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?NVMADR0              
    -------------------------------------------------------------------------
ABSOLUTE
  Segment part 3. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           __?EEPROM_PAGESIZE      
    -------------------------------------------------------------------------
CSTACK
  Segment part 4. NOT NEEDED.
    -------------------------------------------------------------------------
RSTACK
  Segment part 5. NOT NEEDED.
    -------------------------------------------------------------------------
INITTAB
  Segment part 7. TENTATIVE. Used definition from ff
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?<Segment init: NEAR_Z>
                                   

    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
  PROGRAM MODULE, NAME : ?FILLER_BYTES

  SEGMENTS IN THE MODULE
  ======================
INTVEC
  Common segment, address: CODE 00000000 - 0000015F (0x160 bytes), align: 0
  Segment part 1.
    -------------------------------------------------------------------------
?FILL1
  Relative segment, address: CODE 00000160 - 000001E7 (0x88 bytes), align: 0
  Segment part 0.




                ****************************************
                *                                      *
                *            MODULE SUMMARY            *
                *                                      *
                ****************************************

Module                CODE   DATA
------                ----   ----
                     (Rel)  (Rel)
?C_STARTUP              36
?EPILOGUE_B_L09         42
?FILLER_BYTES          136
  + common             352
?L_EC_MUL_L03           64
?L_SHL_L03              16
?PROLOGUE_L09           34
?RESET
  + common               4
?S_EC_MUL_L02           16
?S_SHL_L02              12
?UL_DIVMOD_L03          70
?US_DIVMOD_L02          40
?US_SHR_L02             12
?__exit                  2
?_exit                   4
?exit                    4
?low_level_init          4
?segment_init          128
ff                   8 391     22
  + shared              14
lcd_v1                 740
main                   498    729
mmc_xm_v1            2 013      4
spi_xm_v1              120      1
  + common             352
timer_xm_v1             78      1
  + common              60
N/A (command line)          1 600
N/A (alignment)
----------          ------  -----
Total:              12 474  2 357
  + common             352


                ****************************************
                *                                      *
                *              CALL GRAPH              *
                *                                      *
                ****************************************

  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             RSTACK   CSTACK
    | Stack used (prev) :  00000000 00000000
  01  handler_SPI_INTERRUPT()
      | Stack used (prev) :  00000000 00000000
      | + function block  :  00000002 00000003
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000002 00000003


  ->Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
                             RSTACK   CSTACK
    | Stack used (prev) :  00000002 00000003
  01  handler_TC_OVF_INTERRUPT()
      | Stack used (prev) :  00000002 00000003
      | + function block  :  00000002 00000003
  <-Sub-tree of type: Interrupt function tree that does not make
                    : indirect calls
    | Stack used          :  00000004 00000006


  ->Sub-tree of type: Function tree
                             RSTACK   CSTACK
    | Stack used (prev) :  00000004 00000006
  03      TimerInit()
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
  03      SpiTransferByte(unsigned char)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
  03      SpiInit()
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
  04        SpiTransferByte(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  04        SpiSendByte(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
  06            SpiTransferByte(unsigned char)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  05          deselect()
              | Stack used (prev) :  00000006 00000006
              | + function block  :  00000002 00000000
  06            SpiTransferByte(unsigned char)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  05          wait_ready()
              | Stack used (prev) :  00000006 00000006
              | + function block  :  00000002 00000000
  04        select()
            | Stack used (prev) :  00000008 00000006
            | + function block  :  00000002 00000000
  04        deselect()
            | Stack used (prev) :  00000006 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      Recursive system consisting of
          | send_cmd(BYTE, DWORD)
          | Stack used (prev) :  0000000A 00000006
          | + function block  :  00000002 00000005
          |  Already listed
  03      deselect()
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  02    disk_initialize(BYTE)
        | Stack used (prev) :  0000000C 0000000B
        | + function block  :  00000002 00000006
  04        delay_ms(unsigned int)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
  04        LCDDataLines(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
  04        LCDDataLines(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
  02    LCDGotoXY(unsigned char, unsigned char)
        | Stack used (prev) :  00000008 00000007
        | + function block  :  00000002 00000000
  04        LCDDataLines(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  04        LCDDataLines(unsigned char)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  03      LCDSendData(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
  02    LCDStringRam(char *)
        | Stack used (prev) :  00000008 00000007
        | + function block  :  00000002 00000002
  03      delay_ms(unsigned int)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
          |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
          |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
          |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
          |  Already listed
  03      LCDSendCommand(unsigned char)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000001
          |  Already listed
  03      LCDDirIn()
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
  03      LCDDirOut()
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
  03      LCDDataLines(unsigned char)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  03      LCDDataLines(unsigned char)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  02    LCDInit()
        | Stack used (prev) :  00000008 00000007
        | + function block  :  00000002 00000000
  04        get_fattime
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
  05          disk_status(BYTE)
              | Stack used (prev) :  00000004 00000006
              | + function block  :  00000002 00000000
  04        validate(FATFS *, WORD)
            | Stack used (prev) :  00000006 00000006
            | + function block  :  00000002 00000000
  06            SpiTransferByte(unsigned char)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  07              SpiTransferByte(unsigned char)
                  | Stack used (prev) :  00000004 00000006
                  | + function block  :  00000002 00000000
                  |  Already listed
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            rcvr_datablock(BYTE *, UINT)
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            select()
                | Stack used (prev) :  00000008 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  06            deselect()
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  06            deselect()
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  05          disk_ioctl(BYTE, BYTE, void *)
              | Stack used (prev) :  0000000C 0000000B
              | + function block  :  00000002 00000016
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  06            Recursive system consisting of
                | send_cmd(BYTE, DWORD)
                | Stack used (prev) :  0000000A 00000006
                | + function block  :  00000002 00000005
                |  Already listed
  07              SpiTransferByte(unsigned char)
                  | Stack used (prev) :  00000004 00000006
                  | + function block  :  00000002 00000000
                  |  Already listed
  07              SpiSendByte(unsigned char)
                  | Stack used (prev) :  00000004 00000006
                  | + function block  :  00000002 00000000
                  |  Already listed
  07              wait_ready()
                  | Stack used (prev) :  00000006 00000006
                  | + function block  :  00000002 00000000
                  |  Already listed
  06            xmit_datablock(BYTE const *, BYTE)
                | Stack used (prev) :  00000008 00000006
                | + function block  :  00000002 00000004
  06            xmit_datablock(BYTE const *, BYTE)
                | Stack used (prev) :  00000008 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            xmit_datablock(BYTE const *, BYTE)
                | Stack used (prev) :  00000008 00000006
                | + function block  :  00000002 00000004
                |  Already listed
  06            deselect()
                | Stack used (prev) :  00000006 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  05          disk_write(BYTE, BYTE const *, DWORD, BYTE)
              | Stack used (prev) :  0000000C 0000000B
              | + function block  :  00000002 00000008
  06            disk_write(BYTE, BYTE const *, DWORD, BYTE)
                | Stack used (prev) :  0000000C 0000000B
                | + function block  :  00000002 00000008
                |  Already listed
  07              Recursive system consisting of
                  | send_cmd(BYTE, DWORD)
                  | Stack used (prev) :  0000000A 00000006
                  | + function block  :  00000002 00000005
                  |  Already listed
  07              Recursive system consisting of
                  | send_cmd(BYTE, DWORD)
                  | Stack used (prev) :  0000000A 00000006
                  | + function block  :  00000002 00000005
                  |  Already listed
  07              Recursive system consisting of
                  | send_cmd(BYTE, DWORD)
                  | Stack used (prev) :  0000000A 00000006
                  | + function block  :  00000002 00000005
                  |  Already listed
  07              rcvr_datablock(BYTE *, UINT)
                  | Stack used (prev) :  00000006 00000006
                  | + function block  :  00000002 00000004
                  |  Already listed
  07              rcvr_datablock(BYTE *, UINT)
                  | Stack used (prev) :  00000006 00000006
                  | + function block  :  00000002 00000004
                  |  Already listed
  07              deselect()
                  | Stack used (prev) :  00000006 00000006
                  | + function block  :  00000002 00000000
                  |  Already listed
  06            disk_read(BYTE, BYTE *, DWORD, BYTE)
                | Stack used (prev) :  0000000C 0000000B
                | + function block  :  00000002 00000004
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
  05          mem_set(void *, int, UINT)
              | Stack used (prev) :  00000004 00000006
              | + function block  :  00000002 00000000
  04        sync(FATFS *)
            | Stack used (prev) :  00000010 00000021
            | + function block  :  00000002 00000004
  04        move_window(FATFS *, DWORD)
            | Stack used (prev) :  0000000E 00000013
            | + function block  :  00000002 0000000C
            |  Already listed
  03      f_sync
          | Stack used (prev) :  00000012 00000025
          | + function block  :  00000002 00000004
  02    f_close
        | Stack used (prev) :  00000014 00000029
        | + function block  :  00000002 00000002
  03      disk_write(BYTE, BYTE const *, DWORD, BYTE)
          | Stack used (prev) :  0000000C 0000000B
          | + function block  :  00000002 00000008
          |  Already listed
  03      validate(FATFS *, WORD)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  04        put_fat(FATFS *, DWORD, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 00000011
  04        put_fat(FATFS *, DWORD, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 00000011
            |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  04        get_fat(FATFS *, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 0000000A
  04        get_fat(FATFS *, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 0000000A
            |  Already listed
  03      create_chain(FATFS *, DWORD)
          | Stack used (prev) :  00000012 00000030
          | + function block  :  00000002 00000014
  03      create_chain(FATFS *, DWORD)
          | Stack used (prev) :  00000012 00000030
          | + function block  :  00000002 00000014
          |  Already listed
  03      clust2sect(FATFS *, DWORD)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000004 00000002
  03      move_window(FATFS *, DWORD)
          | Stack used (prev) :  0000000E 00000013
          | + function block  :  00000002 0000000C
          |  Already listed
  03      move_window(FATFS *, DWORD)
          | Stack used (prev) :  0000000E 00000013
          | + function block  :  00000002 0000000C
          |  Already listed
  03      move_window(FATFS *, DWORD)
          | Stack used (prev) :  0000000E 00000013
          | + function block  :  00000002 0000000C
          |  Already listed
  03      mem_cpy(void *, void const *, UINT)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000004
  03      mem_cpy(void *, void const *, UINT)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000004
          |  Already listed
  02    f_write
        | Stack used (prev) :  00000014 00000044
        | + function block  :  00000002 00000010
  03      disk_read(BYTE, BYTE *, DWORD, BYTE)
          | Stack used (prev) :  0000000C 0000000B
          | + function block  :  00000002 00000004
          |  Already listed
  03      validate(FATFS *, WORD)
          | Stack used (prev) :  00000006 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  03      get_fat(FATFS *, DWORD)
          | Stack used (prev) :  00000010 0000001F
          | + function block  :  00000002 0000000A
          |  Already listed
  03      clust2sect(FATFS *, DWORD)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000004 00000002
          |  Already listed
  03      move_window(FATFS *, DWORD)
          | Stack used (prev) :  0000000E 00000013
          | + function block  :  00000002 0000000C
          |  Already listed
  03      mem_cpy(void *, void const *, UINT)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000004
          |  Already listed
  03      mem_cpy(void *, void const *, UINT)
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000004
          |  Already listed
  02    f_read
        | Stack used (prev) :  00000012 00000029
        | + function block  :  00000002 00000010
  03      get_fattime
          | Stack used (prev) :  00000004 00000006
          | + function block  :  00000002 00000000
          |  Already listed
  04        disk_read(BYTE, BYTE *, DWORD, BYTE)
            | Stack used (prev) :  0000000C 0000000B
            | + function block  :  00000002 00000004
            |  Already listed
  04        disk_status(BYTE)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  04        disk_initialize(BYTE)
            | Stack used (prev) :  0000000C 0000000B
            | + function block  :  00000002 00000006
            |  Already listed
  05          disk_read(BYTE, BYTE *, DWORD, BYTE)
              | Stack used (prev) :  0000000C 0000000B
              | + function block  :  00000002 00000004
              |  Already listed
  04        check_fs(FATFS *, DWORD)
            | Stack used (prev) :  0000000E 0000000F
            | + function block  :  00000002 00000002
  04        check_fs(FATFS *, DWORD)
            | Stack used (prev) :  0000000E 0000000F
            | + function block  :  00000002 00000002
            |  Already listed
  03      chk_mounted(TCHAR const * *, FATFS * *, BYTE)
          | Stack used (prev) :  00000010 00000011
          | + function block  :  00000002 00000011
  05          chk_chr(char const *, int)
              | Stack used (prev) :  00000004 00000006
              | + function block  :  00000002 00000000
  05          mem_set(void *, int, UINT)
              | Stack used (prev) :  00000004 00000006
              | + function block  :  00000002 00000000
              |  Already listed
  04        create_name(DIR *, TCHAR const * *)
            | Stack used (prev) :  00000006 00000006
            | + function block  :  00000002 0000000E
  06            create_chain(FATFS *, DWORD)
                | Stack used (prev) :  00000012 00000030
                | + function block  :  00000002 00000014
                |  Already listed
  06            get_fat(FATFS *, DWORD)
                | Stack used (prev) :  00000010 0000001F
                | + function block  :  00000002 0000000A
                |  Already listed
  06            clust2sect(FATFS *, DWORD)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000004 00000002
                |  Already listed
  06            clust2sect(FATFS *, DWORD)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000004 00000002
                |  Already listed
  06            move_window(FATFS *, DWORD)
                | Stack used (prev) :  0000000E 00000013
                | + function block  :  00000002 0000000C
                |  Already listed
  06            move_window(FATFS *, DWORD)
                | Stack used (prev) :  0000000E 00000013
                | + function block  :  00000002 0000000C
                |  Already listed
  06            mem_set(void *, int, UINT)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000002 00000000
                |  Already listed
  05          dir_next(DIR *, int)
              | Stack used (prev) :  00000014 00000044
              | + function block  :  00000002 0000000C
  06            get_fat(FATFS *, DWORD)
                | Stack used (prev) :  00000010 0000001F
                | + function block  :  00000002 0000000A
                |  Already listed
  06            clust2sect(FATFS *, DWORD)
                | Stack used (prev) :  00000004 00000006
                | + function block  :  00000004 00000002
                |  Already listed
  05          dir_sdi(DIR *, WORD)
              | Stack used (prev) :  00000012 00000029
              | + function block  :  00000002 0000000A
  05          move_window(FATFS *, DWORD)
              | Stack used (prev) :  0000000E 00000013
              | + function block  :  00000002 0000000C
              |  Already listed
  05          mem_cmp(void const *, void const *, UINT)
              | Stack used (prev) :  00000004 00000006
              | + function block  :  00000002 00000004
  04        dir_find(DIR *)
            | Stack used (prev) :  00000016 00000050
            | + function block  :  00000002 00000004
  04        dir_sdi(DIR *, WORD)
            | Stack used (prev) :  00000012 00000029
            | + function block  :  00000002 0000000A
            |  Already listed
  03      follow_path(DIR *, TCHAR const *)
          | Stack used (prev) :  00000018 00000054
          | + function block  :  00000002 00000004
  04        dir_next(DIR *, int)
            | Stack used (prev) :  00000014 00000044
            | + function block  :  00000002 0000000C
            |  Already listed
  04        dir_sdi(DIR *, WORD)
            | Stack used (prev) :  00000012 00000029
            | + function block  :  00000002 0000000A
            |  Already listed
  04        move_window(FATFS *, DWORD)
            | Stack used (prev) :  0000000E 00000013
            | + function block  :  00000002 0000000C
            |  Already listed
  04        move_window(FATFS *, DWORD)
            | Stack used (prev) :  0000000E 00000013
            | + function block  :  00000002 0000000C
            |  Already listed
  04        mem_set(void *, int, UINT)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000000
            |  Already listed
  04        mem_cpy(void *, void const *, UINT)
            | Stack used (prev) :  00000004 00000006
            | + function block  :  00000002 00000004
            |  Already listed
  03      dir_register(DIR *)
          | Stack used (prev) :  00000016 00000050
          | + function block  :  00000002 00000006
  04        put_fat(FATFS *, DWORD, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 00000011
            |  Already listed
  04        get_fat(FATFS *, DWORD)
            | Stack used (prev) :  00000010 0000001F
            | + function block  :  00000002 0000000A
            |  Already listed
  03      remove_chain(FATFS *, DWORD)
          | Stack used (prev) :  00000012 00000030
          | + function block  :  00000002 0000000F
  03      move_window(FATFS *, DWORD)
          | Stack used (prev) :  0000000E 00000013
          | + function block  :  00000002 0000000C
          |  Already listed
  02    f_open
        | Stack used (prev) :  0000001A 00000058
        | + function block  :  00000002 00000032
  02    f_mount
        | Stack used (prev) :  00000004 00000006
        | + function block  :  00000002 00000000
  01  main
      | Stack used (prev) :  0000001C 0000008A
      | + function block  :  00000002 00000001
  <-Sub-tree of type: Function tree
    | Stack used          :  0000001E 0000008B


  ->Sub-tree of type: Function tree
                             RSTACK   CSTACK
    | Stack used (prev) :  0000001E 0000008B
  01  exit
      | Stack used (prev) :  0000001E 0000008B
      | + function block  :  00000002 00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00000020 0000008B


  ->Sub-tree of type: Function tree
                             RSTACK   CSTACK
    | Stack used (prev) :  00000020 0000008B
  01  __low_level_init
      | Stack used (prev) :  00000020 0000008B
      | + function block  :  00000002 00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00000022 0000008B


  ->Sub-tree of type: Function tree
                             RSTACK   CSTACK
    | Stack used (prev) :  00000022 0000008B
  02    __flashcpy
        | Stack used (prev) :  00000022 0000008B
        | + function block  :  00000002 00000000
  02    __memclr
        | Stack used (prev) :  00000022 0000008B
        | + function block  :  00000002 00000000
  01  __segment_init
      | Stack used (prev) :  00000024 0000008B
      | + function block  :  00000002 00000000
  <-Sub-tree of type: Function tree
    | Stack used          :  00000026 0000008B




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
INTVEC               CODE          00000000 - 0000015F         160   com    1
?FILL1               CODE          00000160 - 000001E7          88   rel    0
CODE                 CODE          000001E8 - 00003177        2F90   rel    1
INITTAB              CODE          00003178 - 00003185           E   rel    0
NEAR_ID              CODE          00003186 - 00003219          94   rel    0
CSTACK               DATA          00002000 - 000025FF         600   dse    0
RSTACK               DATA          00002600 - 0000263F          40   dse    0
NEAR_I               DATA          00002640 - 000026D3          94   rel    0
NEAR_Z               DATA          000026D4 - 00002934         261   rel    0

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 12 690 bytes of CODE memory (+ 136 range fill )
  2 357 bytes of DATA memory

Errors: none
Warnings: none

