
AVRASM ver. 1.76.4 F:\My Projects\AVR\LM35THRM\MAIN.asm Sun Jun 12 07:36:43 2005


warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
         ;****************************************************************************
         ;*      PROJECT:	THERMOMETER WITH ATMEGA8 AND LM35 TEMPERATURE-SENSOR
         ;*      DISPLAYS TEMPERATURE ON 4 MULTIPLEXING 7SEGMENTS
         ;*      CLK SOURCE 4M Hz INTERNAL RC OSCILLATOR
         ;*      TIMER0 FREQ.=4000000/256=15625 Hz
         ;*      ADC FREQ.=4000000/128=31250 Hz
         ;*      ASSEMBLER:  AVR STUDIO 4.10
         
         ;* CODED BY OMID KOMPANI
         ;* FARASINA ELECTRONICS
         ;*       1384/3/21	
         ;****************************************************************************
         
         
          .INCLUDE	"M8DEF.INC" 	;ORIGINAL DEFINITIONS FOR MEGA8 AVR 
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m8def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega8
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega8
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega8
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ	ADCSRA	=$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GICR  (former GIMSK)
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	RWWSB	=6
          .equ	RWWSRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1	; OBSOLETE! Use WGM11
          .equ	PWM10	=0	; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4	; OBSOLETE! Use WGM13
          .equ	CTC10	=3	; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3	
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6	; OBSOLETE! Use WGM20
          .equ	WGM20	=6	
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3	; OBSOLETE! Use WGM21
          .equ	WGM21	=3	
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDCE	=4
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	UPE	=2
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWA6    =7
          .equ    TWA5    =6
          .equ    TWA4    =5
          .equ    TWA3    =4
          .equ    TWA2    =3
          .equ    TWA1    =2
          .equ    TWA0    =1
          .equ    TWGCE   =0
         
         ; TWSR
          .equ    TWS7    =7
          .equ    TWS6    =6
          .equ    TWS5    =5
          .equ    TWS4    =4
          .equ    TWS3    =3
          .equ	TWPS1	=1
          .equ	TWPS0	=0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
          .equ	FLASHEND =$FFF
         
         						;  byte groups
         						;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b00111110000000  ;($0F80) smallest boot block is 256
          .equ 	SECONDBOOTSTART	=0b00111100000000  ;($0F00) 2'nd boot block size is 512
          .equ 	THIRDBOOTSTART	=0b00111000000000  ;($0E00) third boot block size is 1K
          .equ 	LARGEBOOTSTART	=0b00110000000000  ;($0C00) largest boot block is 2K
          .equ 	BOOTSTART		=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE		=32     ;number of WORDS in a page
         
          .equ	INT0addr=$001	; External Interrupt0 Vector Address
          .equ	INT1addr=$002	; External Interrupt1 Vector Address
          .equ	OC2addr =$003	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$004	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$005	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$006	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$007	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$008	; Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00a	; SPI Interrupt Vector Address
          .equ	URXCaddr=$00b	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00d	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00e	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$00f	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$010	; Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$011   ; Irq. vector address for Two-Wire Interface
          .equ	SPMaddr =$012	; SPM complete Interrupt Vector Address
          .equ	SPMRaddr =$012	; SPM complete Interrupt Vector Address
         
          .DEF    LAST_STATUS=	R3  ;* SAVE SREG AT THE BEGIN OF INTERRUPT HANDLERS
          .DEF	LOOP_COUNTER=	R4
          .DEF	LONG_DELAY0=	R7
          .DEF	LONG_DELAY1=	R8	
          .DEF	TEMP=			R16
          .DEF	ANODE_MUX=		R21
          .DEF	HEX_DIGITL=		R22
          .DEF    HEX_DIGITH=		R23
          .DEF    PBCD_BYTEL=		R24
          .DEF	PBCD_BYTEH=		R25
          .DEF    DISP_BUFFERL=	R10
          .DEF	DISP_BUFFERH=	R11
          .DEF	STATUS_FLAGS=	R26	;*BIT0:
         							;*BIT1:ADC CONVERSION IS COMPLETED
         							;*BIT2:TIME TO DISPLAY NEXT DIGIT
         							;*(CHANGES ANODE EACH 4 ms IN THIS PROGRAM)	
         							;*BIT3:AVERAGE OF 16 NUMBERS IS READY TO CONVERT
         							;*	   TO PACKED BCD
         							;*BIT4:BLINKING STATUS OF DISPLAY(0=OFF/1=ON)
         							;*BIT5:OVER TEMPERATURE FLAG(1=OVT)
         
         ;*****************************************************************************
         ;STATUS_FLAGS BITS
         ;*****************************************************************************
         ;CONSTANTS TO USE WITH SBRS AND SBRC FUNCTIONS
          .EQU	ADC0_BUSY=0
          .EQU	ADC0_COMPLETED=1
          .EQU	TIME2DISPLAY=2
          .EQU	STABLIZING_DONE=3
          .EQU	DISPLAY_ON=4
          .EQU	OVER_TEMPERATURE=5
          .EQU	TEST_MODE=6
         
          .INCLUDE	"ISR.ASM"		;INTERRUPT SERVICE ROUTINS
          .CSEG
         
          .ORG 0
000000 c009      	RJMP	INIT
         
          .ORG $09		
000009 c01c      	RJMP	IH_TOV0
         
         
          INIT:
00000a e50f          LDI 	TEMP,LOW(RAMEND) ; INIT STACK POINTER AT THE END OF SARAM
00000b bf0d          OUT 	SPL,TEMP
00000c e004          LDI 	TEMP,HIGH(RAMEND)
00000d bf0e          OUT 	SPH,TEMP
         	
00000e ef0f          LDI 	TEMP,0XFF
00000f bb07          OUT 	DDRB,TEMP   ;* SET PORTB AS ALL OUTPUT
000010 bb01          OUT 	DDRD,TEMP   ;*SET PORTD AS ALL OUTPUT
000011 bb08          OUT 	PORTB,TEMP  ;*PORTB IS ACTIVE LOW/ALL LEDS ARE OFF 
         
000012 2477      	CLR		LONG_DELAY0
000013 2488          CLR		LONG_DELAY1
000014 27aa      	CLR		STATUS_FLAGS
000015 64a0      	SBR		STATUS_FLAGS, 1 << TEST_MODE
000016 e004      	LDI 	TEMP,4
000017 bf03      	OUT 	TCCR0,TEMP  ;*TIMER0 PRESCALER CLKSRC/256=>4000000/64=62500Hz
000018 e001          LDI		TEMP,1
000019 bf09      	OUT 	TIMSK,TEMP  ;*TOV0 ENABLED
00001a ec00          LDI 	TEMP,192            
00001b bf02          OUT 	TCNT0,TEMP  ;*LOADS TIMER0 FOR 4 ms 
00001c ec00          LDI		TEMP,0B11000000
00001d b907      	OUT		ADMUX,TEMP	;*SELECTS AD0 AND EXTERNAL ANALOG REFERENCE
00001e e80f      	LDI		TEMP,0B10001111
00001f b906      	OUT		ADCSR,TEMP	;*ENABLES AD CONVERTER AND AD INTERRUPT
         						;*AD SPEED=CLK SOURCE/128
000020 ef58          LDI 	ANODE_MUX,0B11111000	;*SELECTS BIT #5 AND BEFOR DISPLAY
         									;*WE MUST SHIFT IT 1 BIT TO RIGHT
         									;*TO SELECT ANODE #4
000021 2444          CLR		LOOP_COUNTER
000022 6f0f      	ORI		TEMP,0XFF
000023 bb02      	OUT		PORTD,TEMP
000024 9478      	SEI
000025 c0bd      	RJMP	MAIN
         ;***********************************************************************
         ;* TIMER0 INTERRUPT HANDLER ROUTIN
         ;***********************************************************************
          IH_TOV0:
000026 b63f          IN 		LAST_STATUS,SREG
000027 ec00      	LDI		TEMP,192
000028 bf02      	OUT		TCNT0,TEMP
000029 60a4      	SBR		STATUS_FLAGS,1 << TIME2DISPLAY
00002a 9473      	INC		LONG_DELAY0
00002b 9483      	INC		LONG_DELAY1
00002c ef0f      	LDI	  	TEMP,255
00002d 1680      	CP		LONG_DELAY1,TEMP
00002e f409      	BRNE	TIME0
00002f 7baf      	CBR		STATUS_FLAGS,1 << TEST_MODE
         	
          TIME0:
000030 e70d      	LDI		TEMP,125
000031 1670      	CP		LONG_DELAY0,TEMP
000032 f409      	BRNE	END_OF_IH_TOV0	
000033 60a2      	SBR		STATUS_FLAGS,1<<ADC0_COMPLETED	
         	
          END_OF_IH_TOV0:
000034 be3f      	OUT		SREG,LAST_STATUS
000035 9518      	RETI
         
          .INCLUDE	"ROUTINES.ASM"	;GENERAL ROUTINS
         ;****************************************************************
         ;* LOOK UP TABLE IN PROGRAM MEMORY FOR DECODING 7SEGMENT LED DISPLAY
         ;****************************************************************
          TABLE_7SEGMENT: ; 0~9 7segment's digits
             ;	 0			1		   2          3          4          5
          	.DB 0B11000000,0B11111001,0B10100100,0B10110000,0B10011001,0B10010010
000036 f9c0
000037 b0a4
000038 9299
             ;    6          7          8          9     	 BLANK		TEST_CHAR
          	.DB 0B10000010,0B11111000,0B10000000,0B10011000,0B11111111,0B00000000
000039 f882
00003a 9880
00003b 00ff
         
         ;TABLE_7SEGMENT: ; 0~F 7segment's digits
         ;    .DB 0B11000000,0B11111001,0B10100100,0B10110000,0B10011001,0B10010010
          ;   .DB 0B10000010,0B11111000,0B10000000,0B10011000,0B10001000,0B10000011
         ;   .DB 0B11000110,0B10100001,0B10000110,0B10001110,0
         
         ;***********************************************************************
         ;* ANODE MULTIPLEXING AND DISPLAY ROUTINE
         ;***********************************************************************
          DISPLAY_TEMPERATURE:
         ;	SBRC	STATUS_FLAGS,DISPLAY_ON
         ;	RJMP	DISPLAY_BLANK
00003c 2eb9      	MOV		DISP_BUFFERH,PBCD_BYTEH
00003d 2ea8      	MOV		DISP_BUFFERL,PBCD_BYTEL
00003e c003      	RJMP	SEGMENT_SELECTOR
         
          DISPLAY_BLANK:
00003f ea0a      	LDI		TEMP,0XAA
000040 2ab0      	OR		DISP_BUFFERH,TEMP
000041 2aa0      	OR		DISP_BUFFERL,TEMP
         	
          SEGMENT_SELECTOR:
000042 fd53      	SBRC    ANODE_MUX,3	;*CHECK IF IT'S ANODE4 TURN TO DISPLAY? 
000043 c007          RJMP    DISPLAY_DIGIT4
000044 fd52          SBRC    ANODE_MUX,2
000045 c013          RJMP    DISPLAY_DIGIT3
000046 fd51          SBRC    ANODE_MUX,1
000047 c01e          RJMP    DISPLAY_DIGIT2
000048 fd50          SBRC    ANODE_MUX,0
000049 c02c          RJMP    DISPLAY_DIGIT1
00004a 9508      	RET
         
          DISPLAY_DIGIT4:
00004b 94b2          SWAP    DISP_BUFFERH
00004c e00f          LDI		TEMP,0X0F
00004d 22b0      	AND	    DISP_BUFFERH,TEMP
00004e e6ec          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00004f e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
000050 e000          LDI		TEMP,0
000051 0deb      	ADD     ZL,DISP_BUFFERH
000052 95c8       	LPM
000053 ba08          OUT		PORTB,R0
000054 bb52          OUT 	PORTD,ANODE_MUX
000055 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000056 7f50      	ANDI	ANODE_MUX,0B11110000
000057 6054      	SBR		ANODE_MUX,4
000058 9508      	RET
         
          DISPLAY_DIGIT3:
000059 e00f          LDI		TEMP,0X0F
00005a 22b0      	AND     DISP_BUFFERH,TEMP
00005b e6ec          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00005c e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00005d e000          LDI		TEMP,0
00005e 0deb      	ADD     ZL,DISP_BUFFERH
00005f 95c8          LPM
000060 ba08          OUT 	PORTB,R0
000061 bb52          OUT 	PORTD,ANODE_MUX
000062 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000063 7f50      	ANDI	ANODE_MUX,0B11110000
000064 6052      	SBR		ANODE_MUX,2
000065 9508      	RET
         
          DISPLAY_DIGIT2:
000066 94a2          SWAP    DISP_BUFFERL
000067 e00f      	LDI		TEMP,0X0F
000068 22a0          AND     DISP_BUFFERL,TEMP
000069 e6ec          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00006a e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00006b e000          LDI		TEMP,0
00006c 0dea      	ADD     ZL,DISP_BUFFERL
00006d 95c8          LPM
00006e e70f          LDI	    TEMP,0B01111111
00006f 2200      	AND 	R0,TEMP
000070 ba08      	OUT 	PORTB,R0
000071 bb52          OUT 	PORTD,ANODE_MUX
000072 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000073 7f50      	ANDI	ANODE_MUX,0B11110000
000074 6051      	SBR		ANODE_MUX,1
000075 9508      	RET
         
          DISPLAY_DIGIT1:    
000076 e00f          LDI		TEMP,0X0F
000077 22a0      	AND     DISP_BUFFERL,TEMP
000078 e6ec          LDI     ZL,LOW(2*TABLE_7SEGMENT)
000079 e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00007a e000          LDI		TEMP,0
00007b 0dea      	ADD     ZL,DISP_BUFFERL
00007c 95c8      	LPM
00007d ba08          OUT 	PORTB,R0
00007e bb52          OUT 	PORTD,ANODE_MUX
00007f 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000080 7f50      	ANDI	ANODE_MUX,0B11110000
000081 6058      	SBR		ANODE_MUX,8
000082 9508          RET   
         
         ;***********************************************************************
         ;* START ANALOG TO DIGITAL CONVERSION ROUTINE
         ;***********************************************************************
          START_ADC:
000083 9a36      	SBI		ADCSR,6
000084 60a1      	SBR		STATUS_FLAGS,1 << ADC0_BUSY
000085 2477      	CLR		LONG_DELAY0
000086 9508      	RET	
         ;***********************************************************************
         ;*GET ADC ROUTINE
         ;***********************************************************************
          GET_TEMPERATURE:
         
000087 b164      	IN		HEX_DIGITL,ADCL
000088 b175      	IN		HEX_DIGITH,ADCH
         ;	CPI		HEX_DIGITL,0X7A
         ;	BRSH	OVT
         ;	ANDI	STATUS_FLAGS,0B11001111
         
000089 7fae      	CBR		STATUS_FLAGS,1<<ADC0_BUSY
00008a 7fad      	CBR		STATUS_FLAGS,1<<ADC0_COMPLETED
         ;	RCALL	STABLIZER
         
00008b d008      	RCALL	BIN2PBCD
00008c 9508      	RET
         
         
          TEST_DISPLAY:
00008d eb0b      	LDI		TEMP,0XBB
00008e eb0b      	LDI		TEMP,0XBB
00008f 2ea0      	MOV		DISP_BUFFERL,TEMP
000090 2eb0      	MOV		DISP_BUFFERH,TEMP
         
         	;BREQ	TEST_FINISHED
000091 dfb0      	RCALL	SEGMENT_SELECTOR
000092 c050      	RJMP	MAIN
          TEST_FINISHED:
         ;	CBR		STATUS_FLAGS,1 << TEST_MODE
000093 c04f      	RJMP	MAIN
          .INCLUDE	"MATH.ASM"		;MATHEMATICAL ROUTINES
         
         ;***********************************************************************
         ;*BINARY TO PACKED BCD CONVERTION ROUTINE
         ;*********************************************************************** 
         ;*FIRST WE SUBTRACT OUR 16BIT NUMBER BY 1000 IN A LOOP
         ;*THE NUMBER OF LOOPS INDICATES THE NUMBER OF 1000
         ;*SECOND SUBTRACT THE NUMBER BY 100 AND THEN SUBTRACT THE 
         ;*NUMBER BY 10  AND THE REMAINDER WILL BE THE FIRST DIGIT!
         
         
          BIN2PBCD:
000094 2799      	CLR		PBCD_BYTEH
000095 e005      	LDI		TEMP,5
000096 9f60      	MUL 	HEX_DIGITL,TEMP
000097 2d60      	MOV 	HEX_DIGITL,R0
000098 2c21      	MOV		R2,R1
000099 9f70      	MUL		HEX_DIGITH,TEMP
00009a 0c02      	ADD		R0,R2
00009b 2d70      	MOV		HEX_DIGITH,R0
         
00009c 2f06      	MOV		DD16UL,HEX_DIGITL
00009d 2f17      	MOV		DD16UH,HEX_DIGITH
00009e ee28      	LDI		DV16UL,$E8
00009f e033      	LDI		DV16UH,$3
0000a0 d02f      	RCALL	DIV16U
0000a1 2f90      	MOV		PBCD_BYTEH,DRES16UL
0000a2 2d0e      	MOV		DD16UL,DREM16UL
0000a3 2d1f      	MOV		DD16UH,DREM16UH
0000a4 e030      	LDI		DV16UH,0
0000a5 e624      	LDI		DV16UL,$64
0000a6 d029      	RCALL	DIV16U
0000a7 9592      	SWAP	PBCD_BYTEH
0000a8 2b90      	OR		PBCD_BYTEH,DRES16UL
0000a9 2d0e      	MOV		DD16UL,DREM16UL
0000aa 2d1f      	MOV		DD16UH,DREM16UH
0000ab e030      	LDI		DV16UH,0
0000ac e02a      	LDI		DV16UL,10
0000ad d022      	RCALL	DIV16U
0000ae 2f80      	MOV		PBCD_BYTEL,DRES16UL
0000af 9582      	SWAP	PBCD_BYTEL
0000b0 298e      	OR		PBCD_BYTEL,DREM16UL
0000b1 d002      	RCALL	RIGHT_ADJUST
0000b2 7fa7      	CBR		STATUS_FLAGS,1 << STABLIZING_DONE
0000b3 9508      	RET
         ;***********************************************************************
         ;* RIGHT ADJUST ROUTINE
         ;* BLANKS ZERO NUMBERS FROM THE LEFT SIDE OF AN INTEGER
         ;***********************************************************************
          RIGHT_ADJUST:
0000b4 2f09      	MOV		TEMP,PBCD_BYTEH
0000b5 7f00      	ANDI	TEMP,0XF0
0000b6 2300      	TST		TEMP
0000b7 f431      	BRNE	END_OF_RIGHT_ADJUST
0000b8 6a90      	ORI		PBCD_BYTEH,0XA0
0000b9 2f09      	MOV		TEMP,PBCD_BYTEH
0000ba 700f      	ANDI	TEMP,0X0F
0000bb 2300      	TST		TEMP
0000bc f409      	BRNE	END_OF_RIGHT_ADJUST
0000bd 609a      	ORI		PBCD_BYTEH,0X0A
          END_OF_RIGHT_ADJUST:
0000be 9508      	RET	    
         
         ;***********************************************************************
         ;* GET AVERAGE OF 16 AD CONVERTED NUMBERS ROUTINE
         ;***********************************************************************
          STABLIZER:
         
0000bf 0e56      	ADD		R5,HEX_DIGITL
0000c0 1e67      	ADC		R6,HEX_DIGITH
0000c1 9443      	INC		LOOP_COUNTER
0000c2 e100      	LDI		TEMP,16
0000c3 1640      	CP		LOOP_COUNTER,TEMP
0000c4 f009      	BREQ	AVERAGE16
0000c5 9508      	RET
          AVERAGE16:
         
0000c6 9466      	LSR		R6
0000c7 9457      	ROR		R5
0000c8 944a      	DEC		LOOP_COUNTER
0000c9 e00c      	LDI		TEMP,12
0000ca 1640      	CP		LOOP_COUNTER,TEMP
0000cb f7d1      	BRNE	AVERAGE16
0000cc 60a8      	SBR		STATUS_FLAGS,1 << STABLIZING_DONE		
0000cd 2d65      	MOV		HEX_DIGITL,R5
0000ce 2d76      	MOV		HEX_DIGITH,R6
0000cf 9508      	RET
         ;***************************************************************************
         ;*
         ;* "div16u" - 16/16 Bit Unsigned Division
         ;*
         ;* This subroutine divides the two 16-bit numbers 
         ;* "dd8uH:dd8uL" (dividend) and "dv16uH:dv16uL" (divisor). 
         ;* The result is placed in "dres16uH:dres16uL" and the remainder in
         ;* "drem16uH:drem16uL".
         ;*  
         ;* Number of words	:19
         ;* Number of cycles	:235/251 (Min/Max)
         ;* Low registers used	:2 (drem16uL,drem16uH)
         ;* High registers used  :5 (dres16uL/dd16uL,dres16uH/dd16uH,dv16uL,dv16uH,
         ;*			    dcnt16u)
         ;*
         ;***************************************************************************
         
         ;***** Subroutine Register Variables
         
          .def	drem16uL=r14
          .def	drem16uH=r15
          .def	dres16uL=r16
          .def	dres16uH=r17
          .def	dd16uL	=r16
          .def	dd16uH	=r17
          .def	dv16uL	=r18
          .def	dv16uH	=r19
          .def	dcnt16u	=r20
         
         ;***** Code
         
0000d0 24ee      div16u:	clr	drem16uL	;clear remainder Low byte
0000d1 18ff      	sub	drem16uH,drem16uH;clear remainder High byte and carry
0000d2 e141      	ldi	dcnt16u,17	;init loop counter
0000d3 1f00      d16u_1:	rol	dd16uL		;shift left dividend
0000d4 1f11      	rol	dd16uH
0000d5 954a      	dec	dcnt16u		;decrement counter
0000d6 f409      	brne	d16u_2		;if done
0000d7 9508      	ret			;    return
0000d8 1cee      d16u_2:	rol	drem16uL	;shift dividend into remainder
0000d9 1cff      	rol	drem16uH
0000da 1ae2      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0000db 0af3      	sbc	drem16uH,dv16uH	;
0000dc f420      	brcc	d16u_3		;if result negative
0000dd 0ee2      	add	drem16uL,dv16uL	;    restore remainder
0000de 1ef3      	adc	drem16uH,dv16uH
0000df 9488      	clc			;    clear carry to be shifted into result
0000e0 cff2      	rjmp	d16u_1		;else
0000e1 9408      d16u_3:	sec			;    set carry to be shifted into result
0000e2 cff0      	rjmp	d16u_1
         				         
          .CSEG
         ;***********************************************************************
         ;* MAIN ROUTINE
         ;***********************************************************************
          MAIN:
         
0000e3 ffa0      	SBRS	STATUS_FLAGS,ADC0_BUSY
0000e4 df9e      	RCALL	START_ADC
         ;	SBRC	STATUS_FLAGS,OVER_TEMPERATURE
         ;	RCALL	ALARM
0000e5 fda1      	SBRC	STATUS_FLAGS,ADC0_COMPLETED
0000e6 dfa0      	RCALL	GET_TEMPERATURE
0000e7 fda2      	SBRC	STATUS_FLAGS,TIME2DISPLAY 
0000e8 c001      	RJMP	SELECT_DISPLAY
         	
0000e9 cff9      	RJMP    MAIN
          SELECT_DISPLAY:
0000ea fda6      	SBRC	STATUS_FLAGS,TEST_MODE
0000eb cfa1      	RJMP	TEST_DISPLAY
0000ec ffa6      	SBRS	STATUS_FLAGS,TEST_MODE
0000ed df4e      	RCALL	DISPLAY_TEMPERATURE
0000ee cff4      	RJMP	MAIN
         	
Assembly complete with no errors.
