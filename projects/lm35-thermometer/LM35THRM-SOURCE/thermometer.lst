
AVRASM ver. 1.76.4 F:\My Projects\AVR\LM35THRM FINAL\MAIN.asm Sun Jun 12 09:03:47 2005


warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
         ;****************************************************************************
         ;*      PROJECT:	THERMOMETER WITH ATMEGA8 AND LM35 TEMPERATURE-SENSOR
         ;*      DISPLAYS TEMPERATURE ON 4 MULTIPLEXING 7SEGMENTS
         ;*      CLK SOURCE 4M Hz INTERNAL RC OSCILLATOR
         ;*      TIMER0 FREQ.=4000000/256=15625 Hz
         ;*      ADC FREQ.=4000000/128=31250 Hz
         ;*      ASSEMBLER:  AVR STUDIO 4.10
         
         ;* CODED BY OMID KOMPANI
         ;* FARASINA ELECTRONICS
         ;*       1384/3/21	
         ;****************************************************************************
         
         
          .INCLUDE	"M8DEF.INC" 	;ORIGINAL DEFINITIONS FOR MEGA8 AVR 
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m8def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega8
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax			:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega8
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega8
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	GIMSK	=$3b
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ	ADCSRA	=$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GICR  (former GIMSK)
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	RWWSB	=6
          .equ	RWWSRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1	; OBSOLETE! Use WGM11
          .equ	PWM10	=0	; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4	; OBSOLETE! Use WGM13
          .equ	CTC10	=3	; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3	
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6	; OBSOLETE! Use WGM20
          .equ	WGM20	=6	
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3	; OBSOLETE! Use WGM21
          .equ	WGM21	=3	
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDCE	=4
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	UPE	=2
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWA6    =7
          .equ    TWA5    =6
          .equ    TWA4    =5
          .equ    TWA3    =4
          .equ    TWA2    =3
          .equ    TWA1    =2
          .equ    TWA0    =1
          .equ    TWGCE   =0
         
         ; TWSR
          .equ    TWS7    =7
          .equ    TWS6    =6
          .equ    TWS5    =5
          .equ    TWS4    =4
          .equ    TWS3    =3
          .equ	TWPS1	=1
          .equ	TWPS0	=0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
          .equ	FLASHEND =$FFF
         
         						;  byte groups
         						;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b00111110000000  ;($0F80) smallest boot block is 256
          .equ 	SECONDBOOTSTART	=0b00111100000000  ;($0F00) 2'nd boot block size is 512
          .equ 	THIRDBOOTSTART	=0b00111000000000  ;($0E00) third boot block size is 1K
          .equ 	LARGEBOOTSTART	=0b00110000000000  ;($0C00) largest boot block is 2K
          .equ 	BOOTSTART		=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE		=32     ;number of WORDS in a page
         
          .equ	INT0addr=$001	; External Interrupt0 Vector Address
          .equ	INT1addr=$002	; External Interrupt1 Vector Address
          .equ	OC2addr =$003	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$004	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$005	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$006	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$007	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$008	; Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$009	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$00a	; SPI Interrupt Vector Address
          .equ	URXCaddr=$00b	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00d	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$00e	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$00f	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$010	; Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$011   ; Irq. vector address for Two-Wire Interface
          .equ	SPMaddr =$012	; SPM complete Interrupt Vector Address
          .equ	SPMRaddr =$012	; SPM complete Interrupt Vector Address
         
          .DEF    LAST_STATUS=	R3  ;* SAVE SREG AT THE BEGIN OF INTERRUPT HANDLERS
          .DEF	LONG_DELAY0=	R7  ;* LONG TIMER FOR ADC DELAY
          .DEF	LONG_DELAY1=	R8	;* LONG TIMER FOR TEST MODE
          .DEF	TEMP=			R16	;* ALL PURPOSE REGISTER
          .DEF	ANODE_MUX=		R21 ;* CHANGE ANODES EACH 4mS FOR MULTIPLEXING DISPLAY
          .DEF	HEX_DIGITL=		R22	;* ADC INPUT LOW BYTE
          .DEF    HEX_DIGITH=		R23	;* ADC INPUT HIGH BYTE
          .DEF    PBCD_BYTEL=		R24 ;* ADC VALUE CONVERTED TO PACKED BCD LOW BYTE
          .DEF	PBCD_BYTEH=		R25 ;* ADC VALUE CONVERTED TO PACKED BCD HIGH BYTE
          .DEF    DISP_BUFFERL=	R10 ;* LOW BYTE OF DISPLAY VALUE 
          .DEF	DISP_BUFFERH=	R11 ;* HIGH BYTE OF DISPLAY VALUE
         
          .DEF	STATUS_FLAGS=	R26	;*BIT0:ADC IS BUSY NOW
         							;*BIT1:ADC CONVERSION IS COMPLETED
         							;*BIT2:TIME TO DISPLAY NEXT DIGIT
         							;*(CHANGES ANODE EACH 4 ms IN THIS PROGRAM)	
         							;*BIT3:TEST MODE(TESTS DISPLAY AT RESET TIME)
         							;*BIT4:OVER TEMPERATURE FLAG(1=OVT)
         
         ;*****************************************************************************
         ;STATUS_FLAGS BITS
         ;*****************************************************************************
          .EQU	ADC0_BUSY=			0
          .EQU	ADC0_COMPLETED= 	1
          .EQU	TIME2DISPLAY=		2
          .EQU	TEST_MODE=			3
         
         
         
          .INCLUDE	"ISR.ASM"		;INTERRUPT SERVICE ROUTINS
          .CSEG
         
          .ORG 0
000000 c00e      	RJMP	INIT 
         
          .ORG $09		
000009 c020      	RJMP	IH_TOV0 ;* INTERRUPT HANDLER FOR TIMER0 OVER FLOW
          .ORG $0E
00000e 9518      	RETI			;*ADC INTERRUPT
         
          INIT:
00000f e50f          LDI 	TEMP,LOW(RAMEND) ; INIT STACK POINTER AT THE END OF SARAM
000010 bf0d          OUT 	SPL,TEMP
000011 e004          LDI 	TEMP,HIGH(RAMEND)
000012 bf0e          OUT 	SPH,TEMP
         	
000013 ef0f          LDI 	TEMP,0XFF
000014 bb07          OUT 	DDRB,TEMP   ;*SETS PORTB AS ALL OUTPUT
000015 bb01          OUT 	DDRD,TEMP   ;*SETS PORTD AS ALL OUTPUT
000016 bb08          OUT 	PORTB,TEMP  ;*PORTB IS ACTIVE LOW/ALL LEDS ARE OFF 
         
000017 2477      	CLR		LONG_DELAY0
000018 2488          CLR		LONG_DELAY1
000019 27aa      	CLR		STATUS_FLAGS
         	
00001a 60a8      	SBR		STATUS_FLAGS, 1 << TEST_MODE ;*EACH TIME SYSTEM STARTS FIRST 
00001b e004      	LDI 	TEMP,4		;*SETS ON ALL THE LEDS 
00001c bf03      	OUT 	TCCR0,TEMP  ;*TIMER0 PRESCALER CLKSRC/256=>4000000/64=62500Hz
00001d e001          LDI		TEMP,1
00001e bf09      	OUT 	TIMSK,TEMP  ;*TOV0 ENABLED
00001f ec00          LDI 	TEMP,192            
000020 bf02          OUT 	TCNT0,TEMP  ;*LOADS TIMER0 FOR 4 ms 
000021 ec00          LDI		TEMP,0B11000000
000022 b907      	OUT		ADMUX,TEMP	;*SELECTS AD0 AND EXTERNAL ANALOG REFERENCE
000023 e80f      	LDI		TEMP,0B10001111
000024 b906      	OUT		ADCSR,TEMP	;*ENABLES AD CONVERTER AND AD INTERRUPT
         						;*AD SPEED=CLK SOURCE/128
000025 ef58          LDI 	ANODE_MUX,0B11111000	;*SELECTS BIT #3 FOR ANODE#4 AND
         									;*EACH TIMEWE MUST SHIFT IT 1 BIT TO 
         									;*RIGHT TO SELECT ANOTHER DIGIT
000026 6f0f      	ORI		TEMP,0XFF
000027 bb02      	OUT		PORTD,TEMP
000028 9478      	SEI
000029 c0b0      	RJMP	MAIN
         ;***********************************************************************
         ;* TIMER0 INTERRUPT HANDLER ROUTIN
         ;***********************************************************************
          IH_TOV0:
00002a b63f          IN 		LAST_STATUS,SREG
00002b ec00      	LDI		TEMP,192	;*LOADS TIMER0 FOR NEXT 4mS
00002c bf02      	OUT		TCNT0,TEMP
00002d 60a4      	SBR		STATUS_FLAGS,1 << TIME2DISPLAY ;*SETS THE DISPLAY FLAG
00002e 9473      	INC		LONG_DELAY0
00002f 9483      	INC		LONG_DELAY1
000030 ef0a      	LDI	  	TEMP,250
000031 1680      	CP		LONG_DELAY1,TEMP ;* CHECKS IF IT REACHES 1 SECOND TO END THE TEST MODE
000032 f409      	BRNE	DELAY_ADC
000033 7fa7      	CBR		STATUS_FLAGS,1 << TEST_MODE
          DELAY_ADC:
000034 e70d      	LDI		TEMP,125 ;*CHECKS IF TIMER REACHES 0.5 SECOND TO START NEXT CONVERSION
000035 1670      	CP		LONG_DELAY0,TEMP
000036 f409      	BRNE	END_OF_IH_TOV0	
000037 60a2      	SBR		STATUS_FLAGS,1<<ADC0_COMPLETED	
          END_OF_IH_TOV0:
000038 be3f      	OUT		SREG,LAST_STATUS
000039 9518      	RETI
         
          .INCLUDE	"ROUTINES.ASM"	;GENERAL ROUTINS
         ;****************************************************************
         ;* LOOK UP TABLE IN PROGRAM MEMORY FOR DECODING 7SEGMENT LED DISPLAY
         ;****************************************************************
          TABLE_7SEGMENT: ; 0~9 7segment's digits
             ;	 0			1		   2          3          4          5
          	.DB 0B11000000,0B11111001,0B10100100,0B10110000,0B10011001,0B10010010
00003a f9c0
00003b b0a4
00003c 9299
             ;    6          7          8          9     	 BLANK		TEST_CHAR
          	.DB 0B10000010,0B11111000,0B10000000,0B10011000,0B11111111,0B00000000
00003d f882
00003e 9880
00003f 00ff
         
         ;***********************************************************************
         ;* ANODE MULTIPLEXING AND DISPLAY ROUTINE
         ;***********************************************************************
          DISPLAY_TEMPERATURE:
000040 2eb9      	MOV		DISP_BUFFERH,PBCD_BYTEH 
000041 2ea8      	MOV		DISP_BUFFERL,PBCD_BYTEL
000042 c000      	RJMP	SEGMENT_SELECTOR
         
         	
          SEGMENT_SELECTOR:
000043 fd53      	SBRC    ANODE_MUX,3	;*CHECKS IF IT'S ANODE4 TURN TO DISPLAY 
000044 c007          RJMP    DISPLAY_DIGIT4
000045 fd52          SBRC    ANODE_MUX,2 ;*CHECKS IF IT'S ANODE3 TURN TO DISPLAY
000046 c013          RJMP    DISPLAY_DIGIT3
000047 fd51          SBRC    ANODE_MUX,1 ;*CHECKS IF IT'S ANODE2 TURN TO DISPLAY
000048 c01e          RJMP    DISPLAY_DIGIT2
000049 fd50          SBRC    ANODE_MUX,0 ;*CHECKS IF IT'S ANODE1 TURN TO DISPLAY
00004a c02c          RJMP    DISPLAY_DIGIT1
00004b 9508      	RET
         
          DISPLAY_DIGIT4:
00004c 94b2          SWAP    DISP_BUFFERH ;*SELECTS HIGH NIBBLE OF PBCD FOR 4TH DIGIT
00004d e00f          LDI		TEMP,0X0F
00004e 22b0      	AND	    DISP_BUFFERH,TEMP 
00004f e7e4          LDI     ZL,LOW(2*TABLE_7SEGMENT) ;*WORD ORIENTED PROGRAM MEMORY ADDRESSING
000050 e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
000051 e000          LDI		TEMP,0
000052 0deb      	ADD     ZL,DISP_BUFFERH
000053 95c8       	LPM		;*LOAD FROM PROGRAM MEMORY TO R0
000054 ba08          OUT		PORTB,R0
000055 bb52          OUT 	PORTD,ANODE_MUX
000056 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY ;*CLEARS DISPLAY FLAG TILL NEXT 4ms
000057 7f50      	ANDI	ANODE_MUX,0B11110000
000058 6054      	SBR		ANODE_MUX,4 ;*SELECTS ANODE3 FOR NEXT DISPLAY
000059 9508      	RET
         
          DISPLAY_DIGIT3:
00005a e00f          LDI		TEMP,0X0F
00005b 22b0      	AND     DISP_BUFFERH,TEMP
00005c e7e4          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00005d e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00005e e000          LDI		TEMP,0
00005f 0deb      	ADD     ZL,DISP_BUFFERH
000060 95c8          LPM
000061 ba08          OUT 	PORTB,R0
000062 bb52          OUT 	PORTD,ANODE_MUX
000063 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000064 7f50      	ANDI	ANODE_MUX,0B11110000
000065 6052      	SBR		ANODE_MUX,2
000066 9508      	RET
         
          DISPLAY_DIGIT2:
000067 94a2          SWAP    DISP_BUFFERL
000068 e00f      	LDI		TEMP,0X0F
000069 22a0          AND     DISP_BUFFERL,TEMP
00006a e7e4          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00006b e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00006c e000          LDI		TEMP,0
00006d 0dea      	ADD     ZL,DISP_BUFFERL
00006e 95c8          LPM
00006f e70f          LDI	    TEMP,0B01111111
000070 2200      	AND 	R0,TEMP
000071 ba08      	OUT 	PORTB,R0
000072 bb52          OUT 	PORTD,ANODE_MUX
000073 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000074 7f50      	ANDI	ANODE_MUX,0B11110000
000075 6051      	SBR		ANODE_MUX,1
000076 9508      	RET
         
          DISPLAY_DIGIT1:    
000077 e00f          LDI		TEMP,0X0F
000078 22a0      	AND     DISP_BUFFERL,TEMP
000079 e7e4          LDI     ZL,LOW(2*TABLE_7SEGMENT)
00007a e0f0          LDI     ZH,HIGH(2*TABLE_7SEGMENT)
00007b e000          LDI		TEMP,0
00007c 0dea      	ADD     ZL,DISP_BUFFERL
00007d 95c8      	LPM
00007e ba08          OUT 	PORTB,R0
00007f bb52          OUT 	PORTD,ANODE_MUX
000080 7fab          CBR		STATUS_FLAGS,1 << TIME2DISPLAY
000081 7f50      	ANDI	ANODE_MUX,0B11110000
000082 6058      	SBR		ANODE_MUX,8
000083 9508          RET   
         
         ;***********************************************************************
         ;* START ANALOG TO DIGITAL CONVERSION ROUTINE
         ;***********************************************************************
          START_ADC:
000084 9a36      	SBI		ADCSR,6 ;*START ADC
000085 60a1      	SBR		STATUS_FLAGS,1 << ADC0_BUSY
000086 2477      	CLR		LONG_DELAY0
000087 9508      	RET	
         ;***********************************************************************
         ;*GET ADC ROUTINE
         ;***********************************************************************
          GET_TEMPERATURE:
         
000088 b164      	IN		HEX_DIGITL,ADCL
000089 b175      	IN		HEX_DIGITH,ADCH
00008a 336c      	CPI		HEX_DIGITL,0X3C;*COMPARES ADC VALUE WITH 30 DEGREE FOR OVER TEMP.
00008b f428      	BRSH	OVT
00008c 6150      	ORI 	ANODE_MUX,0B00010000;*CLAERS THE ALARM BIT IN PORTD
00008d 7fae      	CBR		STATUS_FLAGS,1<<ADC0_BUSY
00008e 7fad      	CBR		STATUS_FLAGS,1<<ADC0_COMPLETED
00008f d00d      	RCALL	BIN2PBCD
000090 9508      	RET
         
          OVT:	
000091 7e5f      	ANDI	ANODE_MUX,0B11101111 ;*SETS THE ALARM BIT IN PORTD		
000092 7fae          CBR		STATUS_FLAGS,1<<ADC0_BUSY
000093 7fad      	CBR		STATUS_FLAGS,1<<ADC0_COMPLETED
000094 d008      	RCALL	BIN2PBCD
000095 9508      	RET
          TEST_DISPLAY:
000096 eb0b      	LDI		TEMP,0XBB
000097 eb0b      	LDI		TEMP,0XBB
000098 2ea0      	MOV		DISP_BUFFERL,TEMP
000099 2eb0      	MOV		DISP_BUFFERH,TEMP
00009a dfa8      	RCALL	SEGMENT_SELECTOR
00009b c03e      	RJMP	MAIN
          TEST_FINISHED:
         
00009c c03d      	RJMP	MAIN
          .INCLUDE	"MATH.ASM"		;MATHEMATICAL ROUTINES
         
         ;***********************************************************************
         ;*BINARY TO PACKED BCD CONVERTION ROUTINE
         ;*********************************************************************** 
         ;*FIRST WE SUBTRACT OUR 16BIT NUMBER BY 1000 IN A LOOP
         ;*THE NUMBER OF LOOPS INDICATES THE NUMBER OF 1000
         ;*SECOND SUBTRACT THE NUMBER BY 100 AND THEN SUBTRACT THE 
         ;*NUMBER BY 10  AND THE REMAINDER WILL BE THE FIRST DIGIT!
         
         
          BIN2PBCD:
00009d 2799      	CLR		PBCD_BYTEH
00009e e005      	LDI		TEMP,5
00009f 9f60      	MUL 	HEX_DIGITL,TEMP
0000a0 2d60      	MOV 	HEX_DIGITL,R0
0000a1 2c21      	MOV		R2,R1
0000a2 9f70      	MUL		HEX_DIGITH,TEMP
0000a3 0c02      	ADD		R0,R2
0000a4 2d70      	MOV		HEX_DIGITH,R0
0000a5 2f06      	MOV		DD16UL,HEX_DIGITL
0000a6 2f17      	MOV		DD16UH,HEX_DIGITH
0000a7 ee28      	LDI		DV16UL,$E8
0000a8 e033      	LDI		DV16UH,$3
0000a9 d01d      	RCALL	DIV16U
0000aa 2f90      	MOV		PBCD_BYTEH,DRES16UL
0000ab 2d0e      	MOV		DD16UL,DREM16UL
0000ac 2d1f      	MOV		DD16UH,DREM16UH
0000ad e030      	LDI		DV16UH,0
0000ae e624      	LDI		DV16UL,$64
0000af d017      	RCALL	DIV16U
0000b0 9592      	SWAP	PBCD_BYTEH
0000b1 2b90      	OR		PBCD_BYTEH,DRES16UL
0000b2 2d0e      	MOV		DD16UL,DREM16UL
0000b3 2d1f      	MOV		DD16UH,DREM16UH
0000b4 e030      	LDI		DV16UH,0
0000b5 e02a      	LDI		DV16UL,10
0000b6 d010      	RCALL	DIV16U
0000b7 2f80      	MOV		PBCD_BYTEL,DRES16UL
0000b8 9582      	SWAP	PBCD_BYTEL
0000b9 298e      	OR		PBCD_BYTEL,DREM16UL
0000ba d001      	RCALL	RIGHT_ADJUST
0000bb 9508      	RET
         ;***********************************************************************
         ;* RIGHT ADJUST ROUTINE
         ;* REMOVES ZERO LEADING FROM THE LEFT SIDE OF AN INTEGER
         ;***********************************************************************
          RIGHT_ADJUST:
0000bc 2f09      	MOV		TEMP,PBCD_BYTEH
0000bd 7f00      	ANDI	TEMP,0XF0
0000be 2300      	TST		TEMP
0000bf f431      	BRNE	END_OF_RIGHT_ADJUST
0000c0 6a90      	ORI		PBCD_BYTEH,0XA0
0000c1 2f09      	MOV		TEMP,PBCD_BYTEH
0000c2 700f      	ANDI	TEMP,0X0F
0000c3 2300      	TST		TEMP
0000c4 f409      	BRNE	END_OF_RIGHT_ADJUST
0000c5 609a      	ORI		PBCD_BYTEH,0X0A
          END_OF_RIGHT_ADJUST:
0000c6 9508      	RET	    
         
         ;***************************************************************************
         ;*
         ;* "div16u" - 16/16 Bit Unsigned Division
         ;*
         ;* This subroutine divides the two 16-bit numbers 
         ;* "dd8uH:dd8uL" (dividend) and "dv16uH:dv16uL" (divisor). 
         ;* The result is placed in "dres16uH:dres16uL" and the remainder in
         ;* "drem16uH:drem16uL".
         ;*  
         ;* Number of words	:19
         ;* Number of cycles	:235/251 (Min/Max)
         ;* Low registers used	:2 (drem16uL,drem16uH)
         ;* High registers used  :5 (dres16uL/dd16uL,dres16uH/dd16uH,dv16uL,dv16uH,
         ;*			    dcnt16u)
         ;*
         ;***************************************************************************
         
         ;***** Subroutine Register Variables
         
          .def	drem16uL=r14
          .def	drem16uH=r15
          .def	dres16uL=r16
          .def	dres16uH=r17
          .def	dd16uL	=r16
          .def	dd16uH	=r17
          .def	dv16uL	=r18
          .def	dv16uH	=r19
          .def	dcnt16u	=r20
         
         ;***** Code
         
0000c7 24ee      div16u:	clr	drem16uL	;clear remainder Low byte
0000c8 18ff      	sub	drem16uH,drem16uH;clear remainder High byte and carry
0000c9 e141      	ldi	dcnt16u,17	;init loop counter
0000ca 1f00      d16u_1:	rol	dd16uL		;shift left dividend
0000cb 1f11      	rol	dd16uH
0000cc 954a      	dec	dcnt16u		;decrement counter
0000cd f409      	brne	d16u_2		;if done
0000ce 9508      	ret			;    return
0000cf 1cee      d16u_2:	rol	drem16uL	;shift dividend into remainder
0000d0 1cff      	rol	drem16uH
0000d1 1ae2      	sub	drem16uL,dv16uL	;remainder = remainder - divisor
0000d2 0af3      	sbc	drem16uH,dv16uH	;
0000d3 f420      	brcc	d16u_3		;if result negative
0000d4 0ee2      	add	drem16uL,dv16uL	;    restore remainder
0000d5 1ef3      	adc	drem16uH,dv16uH
0000d6 9488      	clc			;    clear carry to be shifted into result
0000d7 cff2      	rjmp	d16u_1		;else
0000d8 9408      d16u_3:	sec			;    set carry to be shifted into result
0000d9 cff0      	rjmp	d16u_1
         				         
          .CSEG
         ;***********************************************************************
         ;* MAIN ROUTINE
         ;***********************************************************************
          MAIN:
         
0000da ffa0      	SBRS	STATUS_FLAGS,ADC0_BUSY ;*IF ADC ISN'T BUSY START CONVERTING
0000db dfa8      	RCALL	START_ADC
0000dc fda1      	SBRC	STATUS_FLAGS,ADC0_COMPLETED ;*READ CONVERTED ANALOG VALUE
0000dd dfaa      	RCALL	GET_TEMPERATURE
0000de fda2      	SBRC	STATUS_FLAGS,TIME2DISPLAY ;*AT TIMER0 OVER FLOW CHANGES ANODES 
0000df c001      	RJMP	SELECT_DISPLAY			  ;*AND DISPLAYES TEMPERATURE
         	
0000e0 cff9      	RJMP    MAIN	;*LOOP FOR EVER
         
          SELECT_DISPLAY: ;*ROUTINE FOR DISPLAYING TEST VALUE  OR DISPLAYING TEMPERATURE
0000e1 fda3      	SBRC	STATUS_FLAGS,TEST_MODE
0000e2 cfb3      	RJMP	TEST_DISPLAY
0000e3 ffa3      	SBRS	STATUS_FLAGS,TEST_MODE
0000e4 df5b      	RCALL	DISPLAY_TEMPERATURE
0000e5 cff4      	RJMP	MAIN
         	
Assembly complete with no errors.
