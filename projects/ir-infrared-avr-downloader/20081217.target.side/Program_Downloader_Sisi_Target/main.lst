
AVRASM ver. 2.1.9  main.asm Wed Sep 17 22:18:49 2008

main.asm(991): Including file 'main.vec'
main.asm(992): Including file 'main.inc'
main.inc(2): warning: Register r5 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(3): warning: Register r4 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(4): warning: Register r7 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(5): warning: Register r6 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(6): warning: Register r9 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(7): warning: Register r8 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(8): warning: Register r11 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(9): warning: Register r10 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
main.inc(10): warning: Register r13 already defined by the .DEF directive
main.asm(992): 'main.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.7 beta 5 Professional
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega162
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : Yes
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega162
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU EMCUCR=0x36
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "main.vec"
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 035b 	JMP  _timer1_compa_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 006b 	JMP  _usart0_rx_isr
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
                 
                 	.INCLUDE "main.inc"
                 
                 	.DEF _ID_paket=R5
                 	.DEF _ID_paket_gagal=R4
                 	.DEF _ID_paket_OK=R7
                 	.DEF _ID_perintah=R6
                 	.DEF _indek_konfirmasi=R9
                 	.DEF _indek_data=R8
                 	.DEF _jml_paket=R11
                 	.DEF _status_paket=R10
                 	.DEF _instruksi_pemrogram=R13
                 
                 __GLOBAL_INI_TBL:
000038 0000      	.DW  0
                 _0x173:
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
000040 bfe6      	OUT  EMCUCR,R30
                 
                 ;DISABLE WATCHDOG
000041 e1f8      	LDI  R31,0x18
000042 bdf1      	OUT  WDTCR,R31
000043 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,13
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(0x400)
00004b e094      	LDI  R25,HIGH(0x400)
00004c e0a0      	LDI  R26,LOW(0x100)
00004d e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000063 efef      	LDI  R30,LOW(0x4FF)
000064 bfed      	OUT  SPL,R30
000065 e0e4      	LDI  R30,HIGH(0x4FF)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e0c0      	LDI  R28,LOW(0x200)
000068 e0d2      	LDI  R29,HIGH(0x200)
                 
000069 940c 08c8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 ;       1 /*****************************************************
                 ;       2 Project : Final Assignment
                 ;       3 Version :
                 ;       4 Date    : 18/08/2008
                 ;       5 Author  : BaSu-Key
                 ;       6 Company : kulirobot
                 ;       7 Comments:
                 ;       8 Kesimpulan sementara sampai dengan program ini dibuat adalah sebagai berikut:
                 ;       9 1. Baudrate yang digunakan adalah 2400 bps karena keterbatasan hardware IR.
                 ;      10 2. Satu byte data terbaca dalam waktu 5 ms dengan baudrate 2400 bps.
                 ;      11 3. Delay perbyte data yang dikirim minimal adalah 6 ms untuk menghindari kesalahan pembacaan berdasarkan poin nomor 2.
                 ;      12 4. Delay perpaket data yang dikirim adalah 8 ms untuk memberikan kesempatan sisi penerima data untuk memproses data.
                 ;      13 5. PANJANG_PAKET yang pernah dicoba dengan hasil memuaskan adalah 32 byte, 64 byte dan yang terakhir adalah 128 byte.
                 ;      14 6. Penentuan USART_TIMEOUT dihitung dengan menggunakan perhitungan (HEADER+PANJANG_PAKET+CRC)*(delay perpaket+delay perbyte).
                 ;      15 7. Fclk SCK low speed yang digunakan adalah 86,400 kHz khusus pada devais baru atau devais yang memiliki clock rendah.
                 ;      16 8. Fclk SCK high speed yang digunakan adalah 691,200 kHz. Uji coba fclk high speed dengan ATmega8535L dan diperoleh fakta
                 ;      17    bahwa jika fclk yang digunakan adalah 2764,800 kHz maka terjadi kesalahan pada penulisan devais.
                 ;      18 9. Operasi SPI-ISP yang telah berhasil dilakukan adalah sebagai berikut:
                 ;      19     -->> Enter Programming Mode                     <OK> <IR>
                 ;      20     -->> Read Devais Signature                      <OK> <IR>
                 ;      21     -->> Read Fuse Low Byte                         <OK> <IR>
                 ;      22     -->> Read Fuse High Byte                        <OK> <IR>
                 ;      23     -->> Write Fuse Low Byte                        <OK> <IR>
                 ;      24     -->> Write Fuse High Byte                       <OK> <IR>
                 ;      25     -->> Erasing Chip                               <OK> <IR>
                 ;      26     -->> Writting Flash Program Memory Page Access  <OK> <IR>
                 ;      27     -->> Writting Flash Program Memory Byte Access  <NO>
                 ;      28     -->> Polling Flash Program Memory Byte Access   <OK> <IR>
                 ;      29     -->> Verifikasi Flash (Read Flash)              <OK> <IR>
                 ;      30     -->> Writting EEPROM Data Memory Byte Access    <OK> <IR>
                 ;      31     -->> Writting EEPROM Data Memory Page Access    <NO>
                 ;      32     -->> Polling EEPROM Program Memory Byte Access  <OK> <IR>
                 ;      33     -->> Verifikasi EEPROM (Read EEPROM)            <OK> <IR>
                 ;      34     -->> Autoincrement Addressing Page Mode         <OK> <IR>
                 ;      35     -->> Leave Programming Mode                     <OK> <IR>
                 ;      36 
                 ;      37 Chip type           : ATmega162
                 ;      38 Program type        : Application
                 ;      39 Clock frequency     : 11,059200 MHz
                 ;      40 Memory model        : Small
                 ;      41 External SRAM size  : 0
                 ;      42 Data Stack size     : 512
                 ;      43 *****************************************************/
                 ;      44 
                 ;      45 #include <mega162.h>
                 ;      46 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;      47 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;      48 	.EQU __se_bit=0x20
                 	.EQU __se_bit=0x20
                 ;      49 	.SET power_ctrl_reg=mcucr
                 	.SET power_ctrl_reg=mcucr
                 ;      50 	#endif
                 	#endif
                 ;      51 #include <delay.h>
                 ;      52 #include "crc/crc.h"
                 ;      53 #include "debug/debug.h"
                 ;      54 #include "eeprom/eeprom.h"
                 ;      55 #include "extsram/extsram.h"
                 ;      56 #include "flash/flash.h"
                 ;      57 #include "fuse/fuse.h"
                 ;      58 #include "isp/isp.h"
                 ;      59 #include "timer/timer.h"
                 ;      60 #include "usart/usart.h"
                 ;      61 
                 ;      62 #define TDK_PERLU_KONFIRMASI	0
                 ;      63 #define KONFIRMASI_OK			1
                 ;      64 #define KONFIRMASI_GAGAL		2
                 ;      65 #define KONFIRMASI_PAKET_OK		3
                 ;      66 #define KONFIRMASI_IDLE			4
                 ;      67 #define AKHIR_PROSES            5
                 ;      68 
                 ;      69 #define TULIS_FLASH_MEMORY		0x46  //'F'
                 ;      70 #define BACA_FLASH_MEMORY		0x66  //'f'
                 ;      71 #define TULIS_EEPROM     		0x45  //'E'
                 ;      72 #define BACA_EEPROM     		0x65  //'e'
                 ;      73 #define TULIS_FUSE_BITS    		0x42  //'B'
                 ;      74 #define BACA_FUSE_BITS     		0x62  //'b'
                 ;      75 #define HAPUS_CHIP              0x48  //'H'
                 ;      76 
                 ;      77 #define PANJANG_PAKET           128   //64  //32
                 ;      78 
                 ;      79 //Kapasitas SRAM maksimal yang digunakan pada perangkat
                 ;      80 //sisi target adalah 8 kbyte
                 ;      81 #define FAKTOR_PENGALI          8                     //8 --> 8 KByte
                 ;      82 #define KAPASITAS_SRAM          1024*FAKTOR_PENGALI   //Dalam orde kbyte
                 ;      83 
                 ;      84 #define SEI()                   #asm("sei")
                 ;      85 #define CLI()                   #asm("cli")
                 ;      86 
                 ;      87 //D-Latch
                 ;      88 #define AKTIFKAN_LATCH()        PORTD &= ~(1<<2)
                 ;      89 #define NON_AKTIFKAN_LATCH()    PORTD |= (1<<2)
                 ;      90 
                 ;      91 #define LED_BIRU_ON()           PORTD &= ~(1<<3)
                 ;      92 #define LED_BIRU_OFF()          PORTD |= (1<<3)
                 ;      93 #define LED_MERAH_ON()          PORTE &= ~(1<<0)
                 ;      94 #define LED_MERAH_OFF()         PORTE |= (1<<0)
                 ;      95 
                 ;      96 /******************************************************/
                 ;      97 bit awal_akses_devais;          //bit status untuk awal akses devais MK target
                 ;      98 bit akhir_akses_devais;         //bit status untuk akhir akses devais MK target
                 ;      99 //bit data_ukuran_besar;        //bit status untuk penanda data lebih dari kapasitas SRAM
                 ;     100 bit status_paket_perintah;
                 ;     101 bit status_paket_data;
                 ;     102 bit status_paket_akhir;
                 ;     103 bit status_konfirmasi;
                 ;     104 bit tunggu_konfirmasi;
                 ;     105 bit akhir_transmisi;
                 ;     106 bit status_perintah_tulis;
                 ;     107 bit status_tulis_bertahap;
                 ;     108 bit status_baca_bertahap;
                 ;     109 bit status_data_baru_sram;
                 ;     110 /******************************************************/
                 ;     111 unsigned char buffer_konfirmasi[3];
                 _buffer_konfirmasi:
000200           	.BYTE 0x3
                 ;     112 unsigned char data_load[PANJANG_PAKET];                  //Menyimpan data yang akan diload ke bufferPaketData
                 _data_load:
000203           	.BYTE 0x80
                 ;     113 unsigned char fuse_bits[3];                              //Variabel yang berisi fuse bits (lfuse, hfuse, exfuse)
                 _fuse_bits:
000283           	.BYTE 0x3
                 ;     114 unsigned char ID_paket;
                 ;     115 unsigned char ID_paket_gagal;
                 ;     116 unsigned char ID_paket_OK;
                 ;     117 unsigned char ID_perintah;
                 ;     118 unsigned char indek_konfirmasi;
                 ;     119 unsigned char indek_data;
                 ;     120 unsigned char jml_paket;
                 ;     121 unsigned char devais_signature[3];                       //Variabel yang berisi devais signature
                 _devais_signature:
000286           	.BYTE 0x3
                 ;     122 unsigned char kode_devais[3];                            //Kode devais dari pemrogram
                 _kode_devais:
000289           	.BYTE 0x3
                 ;     123 unsigned char status_paket;
                 ;     124 unsigned char instruksi_pemrogram;
                 ;     125 /******************************************************/
                 ;     126 unsigned int alamat_awal;
                 _alamat_awal:
00028c           	.BYTE 0x2
                 ;     127 unsigned int alamat_akhir;                              //Alamat terakhir akses memori flash
                 _alamat_akhir:
00028e           	.BYTE 0x2
                 ;     128 unsigned int CRC;
                 _CRC:
000290           	.BYTE 0x2
                 ;     129 unsigned int idxBufExtSRAM;                             //Indek untuk akses buffer data pada SRAM
                 _idxBufExtSRAM:
000292           	.BYTE 0x2
                 ;     130 unsigned int jml_byte_data;                             //Jumlah byte data yang diterima -> deteksi paket sram
                 _jml_byte_data:
000294           	.BYTE 0x2
                 ;     131 unsigned int jml_page_data;
                 _jml_page_data:
000296           	.BYTE 0x2
                 ;     132 unsigned int time1;
                 _time1:
000298           	.BYTE 0x2
                 ;     133 
                 ;     134 /***********************************************/
                 ;     135 //Fungsi-Fungsi Interrupt Terima Data Serial IR
                 ;     136 /***********************************************/
                 ;     137 /************************************************************************************************************/
                 ;     138 // USART0 Receiver buffer
                 ;     139 #define RX_BUFFER_SIZE0 256
                 ;     140 char rx_buffer0[RX_BUFFER_SIZE0];
                 _rx_buffer0:
00029a           	.BYTE 0x100
                 ;     141 unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 _rx_wr_index0:
00039a           	.BYTE 0x2
                 _rx_rd_index0:
00039c           	.BYTE 0x2
                 _rx_counter0:
00039e           	.BYTE 0x2
                 ;     142 /************************************************************************************************************/
                 ;     143 // USART0 Receiver interrupt service routine
                 ;     144 interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ;     145 {
                 
                 	.CSEG
                 _usart0_rx_isr:
00006b 93aa      	ST   -Y,R26
00006c 93ba      	ST   -Y,R27
00006d 93ea      	ST   -Y,R30
00006e 93fa      	ST   -Y,R31
00006f b7ef      	IN   R30,SREG
000070 93ea      	ST   -Y,R30
                 ;     146     unsigned char status,data;
                 ;     147     status=UCSR0A;
000071 931a      	ST   -Y,R17
000072 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000073 b11b      	IN   R17,11
                 ;     148     data=UDR0;
000074 b10c      	IN   R16,12
                 ;     149     if ((status & ((FRAMING_ERROR)|(DATA_OVERRUN)))==0)
000075 2fe1      	MOV  R30,R17
000076 71e8      	ANDI R30,LOW(0x18)
000077 f559      	BRNE _0x3
                 ;     150        {
                 ;     151            rx_buffer0[rx_wr_index0]= data;
000078 91e0 039a 	LDS  R30,_rx_wr_index0
00007a 91f0 039b 	LDS  R31,_rx_wr_index0+1
00007c 56e6      	SUBI R30,LOW(-_rx_buffer0)
00007d 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00007e 8300      	ST   Z,R16
                 ;     152            if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0= 0;
00007f 91a0 039a 	LDS  R26,_rx_wr_index0
000081 91b0 039b 	LDS  R27,_rx_wr_index0+1
000083 9611      	ADIW R26,1
000084 93a0 039a 	STS  _rx_wr_index0,R26
000086 93b0 039b 	STS  _rx_wr_index0+1,R27
000088 30a0      	CPI  R26,LOW(0x100)
000089 e0e1      	LDI  R30,HIGH(0x100)
00008a 07be      	CPC  R27,R30
00008b f429      	BRNE _0x4
00008c e0e0      	LDI  R30,0
00008d 93e0 039a 	STS  _rx_wr_index0,R30
00008f 93e0 039b 	STS  _rx_wr_index0+1,R30
                 ;     153            if (++rx_counter0 == RX_BUFFER_SIZE0) rx_counter0= 0;
                 _0x4:
000091 91a0 039e 	LDS  R26,_rx_counter0
000093 91b0 039f 	LDS  R27,_rx_counter0+1
000095 9611      	ADIW R26,1
000096 93a0 039e 	STS  _rx_counter0,R26
000098 93b0 039f 	STS  _rx_counter0+1,R27
00009a 30a0      	CPI  R26,LOW(0x100)
00009b e0e1      	LDI  R30,HIGH(0x100)
00009c 07be      	CPC  R27,R30
00009d f429      	BRNE _0x5
00009e e0e0      	LDI  R30,0
00009f 93e0 039e 	STS  _rx_counter0,R30
0000a1 93e0 039f 	STS  _rx_counter0+1,R30
                 ;     154        }
                 _0x5:
                 ;     155 }
                 _0x3:
0000a3 9109      	LD   R16,Y+
0000a4 9119      	LD   R17,Y+
0000a5 91e9      	LD   R30,Y+
0000a6 bfef      	OUT  SREG,R30
0000a7 91f9      	LD   R31,Y+
0000a8 91e9      	LD   R30,Y+
0000a9 91b9      	LD   R27,Y+
0000aa 91a9      	LD   R26,Y+
0000ab 9518      	RETI
                 ;     156 /************************************************************************************************************/
                 ;     157 // Fungsi Pembacaan Data Serial pada Buffer Interrupt RXC
                 ;     158 unsigned char bacaDataSerialIR(void)
                 ;     159 {
                 _bacaDataSerialIR:
                 ;     160     unsigned char data;
                 ;     161 
                 ;     162     while (rx_counter0==0);
0000ac 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
0000ad 91e0 039e 	LDS  R30,_rx_counter0
0000af 91f0 039f 	LDS  R31,_rx_counter0+1
0000b1 9730      	SBIW R30,0
0000b2 f3d1      	BREQ _0x6
                 ;     163     data= rx_buffer0[rx_rd_index0];
0000b3 91e0 039c 	LDS  R30,_rx_rd_index0
0000b5 91f0 039d 	LDS  R31,_rx_rd_index0+1
0000b7 56e6      	SUBI R30,LOW(-_rx_buffer0)
0000b8 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0000b9 8110      	LD   R17,Z
                 ;     164     if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0= 0;
0000ba 91a0 039c 	LDS  R26,_rx_rd_index0
0000bc 91b0 039d 	LDS  R27,_rx_rd_index0+1
0000be 9611      	ADIW R26,1
0000bf 93a0 039c 	STS  _rx_rd_index0,R26
0000c1 93b0 039d 	STS  _rx_rd_index0+1,R27
0000c3 30a0      	CPI  R26,LOW(0x100)
0000c4 e0e1      	LDI  R30,HIGH(0x100)
0000c5 07be      	CPC  R27,R30
0000c6 f429      	BRNE _0x9
0000c7 e0e0      	LDI  R30,0
0000c8 93e0 039c 	STS  _rx_rd_index0,R30
0000ca 93e0 039d 	STS  _rx_rd_index0+1,R30
                 ;     165     CLI();
                 _0x9:
0000cc 94f8      	cli
                 ;     166     --rx_counter0;
0000cd 91e0 039e 	LDS  R30,_rx_counter0
0000cf 91f0 039f 	LDS  R31,_rx_counter0+1
0000d1 9731      	SBIW R30,1
0000d2 93e0 039e 	STS  _rx_counter0,R30
0000d4 93f0 039f 	STS  _rx_counter0+1,R31
                 ;     167     SEI();
0000d6 9478      	sei
                 ;     168     return data;
0000d7 2fe1      	MOV  R30,R17
0000d8 9119      	LD   R17,Y+
0000d9 9508      	RET
                 ;     169 }
                 ;     170 /************************************************************************************************************/
                 ;     171 /*****************************************************************/
                 ;     172 //Fungsi-Fungsi Protokol Komunikasi untuk Operasi Pengiriman Data
                 ;     173 /*****************************************************************/
                 ;     174 /************************************************************************************************************/
                 ;     175 // Fungsi Load Data Transmisi
                 ;     176 void loadDataBaru(unsigned char indek_paket)
                 ;     177 {
                 _loadDataBaru:
                 ;     178 	unsigned char i;
                 ;     179 	//unsigned int jml_byte_data_sram;
                 ;     180 	unsigned int indek_data;
                 ;     181 
                 ;     182 	if(status_baca_bertahap)
0000da 940e 0d52 	CALL __SAVELOCR4
                 ;	indek_paket -> Y+4
                 ;	i -> R17
                 ;	indek_data -> R18,R19
0000dc fe32      	SBRS R3,2
0000dd c028      	RJMP _0xA
                 ;     183 	{
                 ;     184     	// Pengindekan paket (ID Paket) dimulai dari 0
                 ;     185     	indek_paket= indek_paket-1;
0000de 81ec      	LDD  R30,Y+4
0000df 50e1      	SUBI R30,LOW(1)
0000e0 83ec      	STD  Y+4,R30
                 ;     186 
                 ;     187     	// Pengambilan data dari SRAM Eksternal sama dengan panjang paket dengan indek mulai 0
                 ;     188     	indek_data= (unsigned int)indek_paket*PANJANG_PAKET;
0000e1 e0f0      	LDI  R31,0
0000e2 940e 0d29 	CALL __LSLW3
0000e4 940e 0d27 	CALL __LSLW4
0000e6 019f      	MOVW R18,R30
                 ;     189 
                 ;     190     	for(i=0;i<PANJANG_PAKET;i++)
0000e7 e010      	LDI  R17,LOW(0)
                 _0xC:
0000e8 3810      	CPI  R17,128
0000e9 f4d8      	BRSH _0xD
                 ;     191         {
                 ;     192         	data_load[i]= bacaExtSRAM(indek_data++);     //Ambil data dari SRAM Eksternal
0000ea 2fe1      	MOV  R30,R17
0000eb e0f0      	LDI  R31,0
0000ec 5fed      	SUBI R30,LOW(-_data_load)
0000ed 4ffd      	SBCI R31,HIGH(-_data_load)
0000ee 93ff      	PUSH R31
0000ef 93ef      	PUSH R30
0000f0 01f9      	MOVW R30,R18
0000f1 5f2f
0000f2 4f3f      	__ADDWRN 18,19,1
0000f3 93fa      	ST   -Y,R31
0000f4 93ea      	ST   -Y,R30
0000f5 940e 09e6 	CALL _bacaExtSRAM
0000f7 91af      	POP  R26
0000f8 91bf      	POP  R27
0000f9 93ec      	ST   X,R30
                 ;     193         	jml_byte_data++;
0000fa 91e0 0294 	LDS  R30,_jml_byte_data
0000fc 91f0 0295 	LDS  R31,_jml_byte_data+1
0000fe 9631      	ADIW R30,1
0000ff 93e0 0294 	STS  _jml_byte_data,R30
000101 93f0 0295 	STS  _jml_byte_data+1,R31
                 ;     194         }
000103 5f1f      	SUBI R17,-1
000104 cfe3      	RJMP _0xC
                 _0xD:
                 ;     195 	}
                 ;     196 	else
000105 c01e      	RJMP _0xE
                 _0xA:
                 ;     197 	{
                 ;     198         // Pengindekan paket (ID Paket) dimulai dari 0
                 ;     199     	indek_paket= indek_paket-1;
000106 81ec      	LDD  R30,Y+4
000107 50e1      	SUBI R30,LOW(1)
000108 83ec      	STD  Y+4,R30
                 ;     200 
                 ;     201     	// Pengambilan data dari SRAM Eksternal sama dengan panjang paket dengan indek mulai 0
                 ;     202     	indek_data= (unsigned int)indek_paket*PANJANG_PAKET;
000109 e0f0      	LDI  R31,0
00010a 940e 0d29 	CALL __LSLW3
00010c 940e 0d27 	CALL __LSLW4
00010e 019f      	MOVW R18,R30
                 ;     203 
                 ;     204     	for(i=0;i<PANJANG_PAKET;i++)
00010f e010      	LDI  R17,LOW(0)
                 _0x10:
000110 3810      	CPI  R17,128
000111 f490      	BRSH _0x11
                 ;     205         	data_load[i]= bacaExtSRAM(indek_data++);     //Ambil data dari SRAM Eksternal
000112 2fe1      	MOV  R30,R17
000113 e0f0      	LDI  R31,0
000114 5fed      	SUBI R30,LOW(-_data_load)
000115 4ffd      	SBCI R31,HIGH(-_data_load)
000116 93ff      	PUSH R31
000117 93ef      	PUSH R30
000118 01f9      	MOVW R30,R18
000119 5f2f
00011a 4f3f      	__ADDWRN 18,19,1
00011b 93fa      	ST   -Y,R31
00011c 93ea      	ST   -Y,R30
00011d 940e 09e6 	CALL _bacaExtSRAM
00011f 91af      	POP  R26
000120 91bf      	POP  R27
000121 93ec      	ST   X,R30
                 ;     206     }
000122 5f1f      	SUBI R17,-1
000123 cfec      	RJMP _0x10
                 _0x11:
                 _0xE:
                 ;     207     if(jml_byte_data>KAPASITAS_SRAM)
000124 91a0 0294 	LDS  R26,_jml_byte_data
000126 91b0 0295 	LDS  R27,_jml_byte_data+1
000128 30a1      	CPI  R26,LOW(0x2001)
000129 e2e0      	LDI  R30,HIGH(0x2001)
00012a 07be      	CPC  R27,R30
00012b f020      	BRLO _0x12
                 ;     208     {
                 ;     209         status_data_baru_sram= 0;
00012c 94e8      	CLT
00012d f833      	BLD  R3,3
                 ;     210         indek_data= 0;
00012e e020
00012f e030      	__GETWRN 18,19,0
                 ;     211     }
                 ;     212 }
                 _0x12:
000130 940e 0d59 	CALL __LOADLOCR4
000132 9625      	ADIW R28,5
000133 9508      	RET
                 ;     213 /************************************************************************************************************/
                 ;     214 // Fungsi Pengiriman Paket Awal Transmisi
                 ;     215 // ID_perintah sama dengan yang dikirim oleh pemrogram
                 ;     216 void kirimPaketPerintah(void)
                 ;     217 {
                 _kirimPaketPerintah:
                 ;     218     unsigned char i;
                 ;     219     unsigned char buffer_paket_data[9];
                 ;     220 
                 ;     221     CLI();
000134 9729      	SBIW R28,9
000135 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	buffer_paket_data -> Y+1
000136 94f8      	cli
                 ;     222 
                 ;     223     buffer_paket_data[0]= '<';
000137 e3ec      	LDI  R30,LOW(60)
000138 83e9      	STD  Y+1,R30
                 ;     224     buffer_paket_data[1]= 0x46;       // ID Sisi Target
000139 e4e6      	LDI  R30,LOW(70)
00013a 83ea      	STD  Y+2,R30
                 ;     225     buffer_paket_data[2]= '>';
00013b e3ee      	LDI  R30,LOW(62)
00013c 83eb      	STD  Y+3,R30
                 ;     226     buffer_paket_data[3]= ID_perintah;
00013d 01fe      	MOVW R30,R28
00013e 9634      	ADIW R30,4
00013f 8260      	ST   Z,R6
                 ;     227 
                 ;     228     // Informasi jumlah paket yang dikirimkan
                 ;     229     buffer_paket_data[4]= '|';
000140 e7ec      	LDI  R30,LOW(124)
000141 83ed      	STD  Y+5,R30
                 ;     230     buffer_paket_data[5]= jml_paket;  // Jumlah Paket yang akan dikirimkan
000142 01fe      	MOVW R30,R28
000143 9636      	ADIW R30,6
000144 82b0      	ST   Z,R11
                 ;     231     buffer_paket_data[6]= '|';
000145 e7ec      	LDI  R30,LOW(124)
000146 83ef      	STD  Y+7,R30
                 ;     232     CRC= hitungCRC16(buffer_paket_data, 7);
000147 01fe      	MOVW R30,R28
000148 9631      	ADIW R30,1
000149 93fa      	ST   -Y,R31
00014a 93ea      	ST   -Y,R30
00014b e0e7      	LDI  R30,LOW(7)
00014c 93ea      	ST   -Y,R30
00014d 940e 0933 	CALL _hitungCRC16
00014f 93e0 0290 	STS  _CRC,R30
000151 93f0 0291 	STS  _CRC+1,R31
                 ;     233     buffer_paket_data[7]= (unsigned char) CRC;
000153 01fe      	MOVW R30,R28
000154 9638      	ADIW R30,8
000155 91a0 0290 	LDS  R26,_CRC
000157 83a0      	STD  Z+0,R26
                 ;     234     buffer_paket_data[8]= (unsigned char)(CRC>>8);
000158 91e0 0291 	LDS  R30,_CRC+1
00015a 87e9      	STD  Y+9,R30
                 ;     235 
                 ;     236     //Persiapan pengiriman data
                 ;     237     kirimDataSerialIR(0x00);
00015b e0e0      	LDI  R30,LOW(0)
00015c 93ea      	ST   -Y,R30
00015d 940e 0d10 	CALL _kirimDataSerialIR
                 ;     238     kirimDataSerialIR(0x00);
00015f e0e0      	LDI  R30,LOW(0)
000160 93ea      	ST   -Y,R30
000161 940e 0d10 	CALL _kirimDataSerialIR
                 ;     239     kirimDataSerialIR(0x00);
000163 e0e0      	LDI  R30,LOW(0)
000164 93ea      	ST   -Y,R30
000165 940e 0d10 	CALL _kirimDataSerialIR
                 ;     240     kirimDataSerialIR(0x00);
000167 e0e0      	LDI  R30,LOW(0)
000168 93ea      	ST   -Y,R30
000169 940e 0d10 	CALL _kirimDataSerialIR
                 ;     241     kirimDataSerialIR(0x00);
00016b e0e0      	LDI  R30,LOW(0)
00016c 93ea      	ST   -Y,R30
00016d 940e 0d10 	CALL _kirimDataSerialIR
                 ;     242 
                 ;     243     for(i= 0; i <=8 ; i++)
00016f e010      	LDI  R17,LOW(0)
                 _0x14:
000170 3019      	CPI  R17,9
000171 f460      	BRSH _0x15
                 ;     244         kirimDataSerialIR(buffer_paket_data[i]);
000172 2fe1      	MOV  R30,R17
000173 e0f0      	LDI  R31,0
000174 01de      	MOVW R26,R28
000175 9611      	ADIW R26,1
000176 0fae      	ADD  R26,R30
000177 1fbf      	ADC  R27,R31
000178 91ec      	LD   R30,X
000179 93ea      	ST   -Y,R30
00017a 940e 0d10 	CALL _kirimDataSerialIR
                 ;     245 
                 ;     246     SEI();
00017c 5f1f      	SUBI R17,-1
00017d cff2      	RJMP _0x14
                 _0x15:
00017e 9478      	sei
                 ;     247 }
00017f 8118      	LDD  R17,Y+0
000180 962a      	ADIW R28,10
000181 9508      	RET
                 ;     248 /************************************************************************************************************/
                 ;     249 // Fungsi Pengiriman Paket Data Transmisi
                 ;     250 void kirimPaketData(void)
                 ;     251 {
                 _kirimPaketData:
                 ;     252     unsigned char i, j;
                 ;     253     unsigned char buffer_paket_data[PANJANG_PAKET+9];      // Ukuran buffer adalah [HEADER(7)+ DATA(PANJANG_PAKET)+CRC(2)]
                 ;     254 
                 ;     255     CLI();
000182 97ef      	SBIW R28,63
000183 97ef      	SBIW R28,63
000184 972b      	SBIW R28,11
000185 931a      	ST   -Y,R17
000186 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	j -> R16
                 ;	buffer_paket_data -> Y+2
000187 94f8      	cli
                 ;     256 
                 ;     257     if(!status_konfirmasi) ID_paket= ID_paket_gagal;
000188 fc25      	SBRC R2,5
000189 c002      	RJMP _0x16
00018a 2c54      	MOV  R5,R4
                 ;     258     else ID_paket++;
00018b c001      	RJMP _0x17
                 _0x16:
00018c 9453      	INC  R5
                 ;     259 
                 ;     260     loadDataBaru(ID_paket);
                 _0x17:
00018d 925a      	ST   -Y,R5
00018e 940e 00da 	CALL _loadDataBaru
                 ;     261 
                 ;     262     // Header Paket Data
                 ;     263     buffer_paket_data[0]= '<';
000190 e3ec      	LDI  R30,LOW(60)
000191 83ea      	STD  Y+2,R30
                 ;     264     buffer_paket_data[1]= 0x46;
000192 e4e6      	LDI  R30,LOW(70)
000193 83eb      	STD  Y+3,R30
                 ;     265     buffer_paket_data[2]= '>';
000194 e3ee      	LDI  R30,LOW(62)
000195 83ec      	STD  Y+4,R30
                 ;     266     buffer_paket_data[3]= ID_perintah; // Berisi informasi ID Perintah
000196 01fe      	MOVW R30,R28
000197 9635      	ADIW R30,5
000198 8260      	ST   Z,R6
                 ;     267     buffer_paket_data[4]= '|';
000199 e7ec      	LDI  R30,LOW(124)
00019a 83ee      	STD  Y+6,R30
                 ;     268     buffer_paket_data[5]= ID_paket;    // Berisi informasi ID Paket atau Indek Paket
00019b 01fe      	MOVW R30,R28
00019c 9637      	ADIW R30,7
00019d 8250      	ST   Z,R5
                 ;     269     buffer_paket_data[6]= '|';
00019e e7ec      	LDI  R30,LOW(124)
00019f 87e8      	STD  Y+8,R30
                 ;     270 
                 ;     271     // Data yang dikirim
                 ;     272 	for(i=0; i<PANJANG_PAKET; i++)
0001a0 e010      	LDI  R17,LOW(0)
                 _0x19:
0001a1 3810      	CPI  R17,128
0001a2 f488      	BRSH _0x1A
                 ;     273 	{
                 ;     274 		j= i+7;
0001a3 2fe1      	MOV  R30,R17
0001a4 5fe9      	SUBI R30,-LOW(7)
0001a5 2f0e      	MOV  R16,R30
                 ;     275 		buffer_paket_data[j]= data_load[i];
0001a6 2fe0      	MOV  R30,R16
0001a7 e0f0      	LDI  R31,0
0001a8 01de      	MOVW R26,R28
0001a9 9612      	ADIW R26,2
0001aa 0fae      	ADD  R26,R30
0001ab 1fbf      	ADC  R27,R31
0001ac 2fe1      	MOV  R30,R17
0001ad e0f0      	LDI  R31,0
0001ae 5fed      	SUBI R30,LOW(-_data_load)
0001af 4ffd      	SBCI R31,HIGH(-_data_load)
0001b0 81e0      	LD   R30,Z
0001b1 93ec      	ST   X,R30
                 ;     276 	};
0001b2 5f1f      	SUBI R17,-1
0001b3 cfed      	RJMP _0x19
                 _0x1A:
                 ;     277 
                 ;     278     CRC= hitungCRC16(buffer_paket_data, (PANJANG_PAKET+7));           //HEADER(7)+DATA(PANJANG_PAKET)
0001b4 01fe      	MOVW R30,R28
0001b5 9632      	ADIW R30,2
0001b6 93fa      	ST   -Y,R31
0001b7 93ea      	ST   -Y,R30
0001b8 e8e7      	LDI  R30,LOW(135)
0001b9 93ea      	ST   -Y,R30
0001ba d778      	RCALL _hitungCRC16
0001bb 93e0 0290 	STS  _CRC,R30
0001bd 93f0 0291 	STS  _CRC+1,R31
                 ;     279     buffer_paket_data[PANJANG_PAKET+7]= (unsigned char)  CRC;         //HEADER(7)+DATA(PANJANG_PAKET)+CRC(low byte)
0001bf 01fe      	MOVW R30,R28
0001c0 9632      	ADIW R30,2
0001c1 57e9      	SUBI R30,LOW(-135)
0001c2 4fff      	SBCI R31,HIGH(-135)
0001c3 91a0 0290 	LDS  R26,_CRC
0001c5 83a0      	STD  Z+0,R26
                 ;     280     buffer_paket_data[PANJANG_PAKET+8]= (unsigned char) (CRC>>8);     //HEADER(7)+DATA(PANJANG_PAKET)+CRC(high byte)
0001c6 01fe      	MOVW R30,R28
0001c7 9632      	ADIW R30,2
0001c8 57e8      	SUBI R30,LOW(-136)
0001c9 4fff      	SBCI R31,HIGH(-136)
0001ca 01df      	MOVW R26,R30
0001cb 91e0 0291 	LDS  R30,_CRC+1
0001cd 70f0      	ANDI R31,HIGH(0x0)
0001ce 93ec      	ST   X,R30
                 ;     281 
                 ;     282     //Persiapan pengiriman data
                 ;     283     kirimDataSerialIR(0x00);
0001cf e0e0      	LDI  R30,LOW(0)
0001d0 93ea      	ST   -Y,R30
0001d1 940e 0d10 	CALL _kirimDataSerialIR
                 ;     284     kirimDataSerialIR(0x00);
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93ea      	ST   -Y,R30
0001d5 940e 0d10 	CALL _kirimDataSerialIR
                 ;     285     kirimDataSerialIR(0x00);
0001d7 e0e0      	LDI  R30,LOW(0)
0001d8 93ea      	ST   -Y,R30
0001d9 940e 0d10 	CALL _kirimDataSerialIR
                 ;     286     kirimDataSerialIR(0x00);
0001db e0e0      	LDI  R30,LOW(0)
0001dc 93ea      	ST   -Y,R30
0001dd 940e 0d10 	CALL _kirimDataSerialIR
                 ;     287     kirimDataSerialIR(0x00);
0001df e0e0      	LDI  R30,LOW(0)
0001e0 93ea      	ST   -Y,R30
0001e1 940e 0d10 	CALL _kirimDataSerialIR
                 ;     288 
                 ;     289     for(i= 0; i <= (PANJANG_PAKET+8) ; i++)
0001e3 e010      	LDI  R17,LOW(0)
                 _0x1C:
0001e4 3819      	CPI  R17,137
0001e5 f460      	BRSH _0x1D
                 ;     290         kirimDataSerialIR(buffer_paket_data[i]);
0001e6 2fe1      	MOV  R30,R17
0001e7 e0f0      	LDI  R31,0
0001e8 01de      	MOVW R26,R28
0001e9 9612      	ADIW R26,2
0001ea 0fae      	ADD  R26,R30
0001eb 1fbf      	ADC  R27,R31
0001ec 91ec      	LD   R30,X
0001ed 93ea      	ST   -Y,R30
0001ee 940e 0d10 	CALL _kirimDataSerialIR
                 ;     291 
                 ;     292 	SEI();
0001f0 5f1f      	SUBI R17,-1
0001f1 cff2      	RJMP _0x1C
                 _0x1D:
0001f2 9478      	sei
                 ;     293 }
0001f3 8119      	LDD  R17,Y+1
0001f4 8108      	LDD  R16,Y+0
0001f5 96ef      	ADIW R28,63
0001f6 96ef      	ADIW R28,63
0001f7 962d      	ADIW R28,13
0001f8 9508      	RET
                 ;     294 /************************************************************************************************************/
                 ;     295 // Fungsi Pengiriman Paket Akhir Transmisi
                 ;     296 void kirimPaketAkhir(void)
                 ;     297 {
                 _kirimPaketAkhir:
                 ;     298 	unsigned char i;
                 ;     299 	unsigned char buffer_paket_data[9];
                 ;     300 
                 ;     301 	CLI();
0001f9 9729      	SBIW R28,9
0001fa 931a      	ST   -Y,R17
                 ;	i -> R17
                 ;	buffer_paket_data -> Y+1
0001fb 94f8      	cli
                 ;     302     buffer_paket_data[0]= '<';
0001fc e3ec      	LDI  R30,LOW(60)
0001fd 83e9      	STD  Y+1,R30
                 ;     303     buffer_paket_data[1]= 0x46;
0001fe e4e6      	LDI  R30,LOW(70)
0001ff 83ea      	STD  Y+2,R30
                 ;     304     buffer_paket_data[2]= '>';
000200 e3ee      	LDI  R30,LOW(62)
000201 83eb      	STD  Y+3,R30
                 ;     305 
                 ;     306     // Informasi penanda paket akhir
                 ;     307     buffer_paket_data[3]= '\n';
000202 e0ea      	LDI  R30,LOW(10)
000203 83ec      	STD  Y+4,R30
                 ;     308     buffer_paket_data[4]= '|';
000204 e7ec      	LDI  R30,LOW(124)
000205 83ed      	STD  Y+5,R30
                 ;     309     buffer_paket_data[5]= '\r';
000206 e0ed      	LDI  R30,LOW(13)
000207 83ee      	STD  Y+6,R30
                 ;     310     buffer_paket_data[6]= '|';
000208 e7ec      	LDI  R30,LOW(124)
000209 83ef      	STD  Y+7,R30
                 ;     311     CRC= hitungCRC16(buffer_paket_data, 7);
00020a 01fe      	MOVW R30,R28
00020b 9631      	ADIW R30,1
00020c 93fa      	ST   -Y,R31
00020d 93ea      	ST   -Y,R30
00020e e0e7      	LDI  R30,LOW(7)
00020f 93ea      	ST   -Y,R30
000210 d722      	RCALL _hitungCRC16
000211 93e0 0290 	STS  _CRC,R30
000213 93f0 0291 	STS  _CRC+1,R31
                 ;     312     buffer_paket_data[7]= (unsigned char) CRC;
000215 01fe      	MOVW R30,R28
000216 9638      	ADIW R30,8
000217 91a0 0290 	LDS  R26,_CRC
000219 83a0      	STD  Z+0,R26
                 ;     313     buffer_paket_data[8]= (unsigned char) (CRC>>8);
00021a 91e0 0291 	LDS  R30,_CRC+1
00021c 87e9      	STD  Y+9,R30
                 ;     314 
                 ;     315     //Persiapan pengiriman data
                 ;     316     kirimDataSerialIR(0x00);
00021d e0e0      	LDI  R30,LOW(0)
00021e 93ea      	ST   -Y,R30
00021f 940e 0d10 	CALL _kirimDataSerialIR
                 ;     317     kirimDataSerialIR(0x00);
000221 e0e0      	LDI  R30,LOW(0)
000222 93ea      	ST   -Y,R30
000223 940e 0d10 	CALL _kirimDataSerialIR
                 ;     318     kirimDataSerialIR(0x00);
000225 e0e0      	LDI  R30,LOW(0)
000226 93ea      	ST   -Y,R30
000227 940e 0d10 	CALL _kirimDataSerialIR
                 ;     319     kirimDataSerialIR(0x00);
000229 e0e0      	LDI  R30,LOW(0)
00022a 93ea      	ST   -Y,R30
00022b 940e 0d10 	CALL _kirimDataSerialIR
                 ;     320     kirimDataSerialIR(0x00);
00022d e0e0      	LDI  R30,LOW(0)
00022e 93ea      	ST   -Y,R30
00022f 940e 0d10 	CALL _kirimDataSerialIR
                 ;     321 
                 ;     322     for(i= 0; i <=8 ; i++)
000231 e010      	LDI  R17,LOW(0)
                 _0x1F:
000232 3019      	CPI  R17,9
000233 f460      	BRSH _0x20
                 ;     323         kirimDataSerialIR(buffer_paket_data[i]);
000234 2fe1      	MOV  R30,R17
000235 e0f0      	LDI  R31,0
000236 01de      	MOVW R26,R28
000237 9611      	ADIW R26,1
000238 0fae      	ADD  R26,R30
000239 1fbf      	ADC  R27,R31
00023a 91ec      	LD   R30,X
00023b 93ea      	ST   -Y,R30
00023c 940e 0d10 	CALL _kirimDataSerialIR
                 ;     324 
                 ;     325 	SEI();
00023e 5f1f      	SUBI R17,-1
00023f cff2      	RJMP _0x1F
                 _0x20:
000240 9478      	sei
                 ;     326 }
000241 8118      	LDD  R17,Y+0
000242 962a      	ADIW R28,10
000243 9508      	RET
                 ;     327 /************************************************************************************************************/
                 ;     328 // Fungsi Cek Konfirmasi Paket Awal dan Akhir
                 ;     329 void olahKonfirmasiPaketPerintahDanAkhir(void)
                 ;     330 {
                 _olahKonfirmasiPaketPerintahDanAkhir:
                 ;     331 	unsigned char data_konfirmasi= 0;
                 ;     332 
                 ;     333 	while(tunggu_konfirmasi)
000244 931a      	ST   -Y,R17
                 ;	data_konfirmasi -> R17
000245 e010      	LDI  R17,0
                 _0x21:
000246 fe26      	SBRS R2,6
000247 c032      	RJMP _0x23
                 ;     334 	{
                 ;     335 		data_konfirmasi= bacaDataSerialIR();
000248 940e 00ac 	CALL _bacaDataSerialIR
00024a 2f1e      	MOV  R17,R30
                 ;     336 		//kirimDataSerial(data_konfirmasi);
                 ;     337 		buffer_konfirmasi[indek_konfirmasi++]= data_konfirmasi;
00024b 2de9      	MOV  R30,R9
00024c 9493      	INC  R9
00024d e0f0      	LDI  R31,0
00024e 50e0      	SUBI R30,LOW(-_buffer_konfirmasi)
00024f 4ffe      	SBCI R31,HIGH(-_buffer_konfirmasi)
000250 8310      	ST   Z,R17
                 ;     338 
                 ;     339 		if((indek_konfirmasi == 1 && data_konfirmasi != '|') || (indek_konfirmasi == 3 && data_konfirmasi != '|'))
000251 e0e1      	LDI  R30,LOW(1)
000252 15e9      	CP   R30,R9
000253 f411      	BRNE _0x25
000254 371c      	CPI  R17,124
000255 f431      	BRNE _0x27
                 _0x25:
000256 e0e3      	LDI  R30,LOW(3)
000257 15e9      	CP   R30,R9
000258 f411      	BRNE _0x28
000259 371c      	CPI  R17,124
00025a f409      	BRNE _0x27
                 _0x28:
00025b c001      	RJMP _0x24
                 _0x27:
                 ;     340 	            indek_konfirmasi= 0;
00025c c01b      	RJMP _0x16B
                 ;     341 		else if(indek_konfirmasi == 4)
                 _0x24:
00025d e0e4      	LDI  R30,LOW(4)
00025e 15e9      	CP   R30,R9
00025f f4c9      	BRNE _0x2C
                 ;     342 		{
                 ;     343 			if((buffer_konfirmasi[1] == 0xAA) && (data_konfirmasi == 0xAA))
000260 91e0 0201 	__GETB1MN _buffer_konfirmasi,1
000262 3aea      	CPI  R30,LOW(0xAA)
000263 f411      	BRNE _0x2E
000264 3a1a      	CPI  R17,170
000265 f009      	BREQ _0x2F
                 _0x2E:
000266 c00f      	RJMP _0x2D
                 _0x2F:
                 ;     344 			{
                 ;     345 				status_konfirmasi= 1;
000267 9468      	SET
000268 f825      	BLD  R2,5
                 ;     346 				tunggu_konfirmasi= 0;
000269 94e8      	CLT
00026a f826      	BLD  R2,6
                 ;     347 				if(status_paket_perintah)
00026b fe22      	SBRS R2,2
00026c c004      	RJMP _0x30
                 ;     348 				{
                 ;     349 				    status_paket_perintah= 0;
00026d f822      	BLD  R2,2
                 ;     350 				    status_paket_data= 1;
00026e 9468      	SET
00026f f823      	BLD  R2,3
                 ;     351 				}
                 ;     352 				else if(status_paket_akhir) status_paket_akhir= 0;
000270 c004      	RJMP _0x31
                 _0x30:
000271 fe24      	SBRS R2,4
000272 c002      	RJMP _0x32
000273 94e8      	CLT
000274 f824      	BLD  R2,4
                 ;     353 			}
                 _0x32:
                 _0x31:
                 ;     354     		else tunggu_konfirmasi= 0;
000275 c002      	RJMP _0x33
                 _0x2D:
000276 94e8      	CLT
000277 f826      	BLD  R2,6
                 ;     355 		    indek_konfirmasi= 0;
                 _0x33:
                 _0x16B:
000278 2499      	CLR  R9
                 ;     356 		}
                 ;     357 	};
                 _0x2C:
000279 cfcc      	RJMP _0x21
                 _0x23:
                 ;     358 }
00027a c034      	RJMP _0x16A
                 ;     359 /************************************************************************************************************/
                 ;     360 // Fungsi Cek Konfirmasi Paket Data
                 ;     361 void olahKonfirmasiPaketData(void)
                 ;     362 {
                 _olahKonfirmasiPaketData:
                 ;     363 	unsigned char data_konfirmasi= 0;
                 ;     364 
                 ;     365 	while(tunggu_konfirmasi)
00027b 931a      	ST   -Y,R17
                 ;	data_konfirmasi -> R17
00027c e010      	LDI  R17,0
                 _0x34:
00027d fe26      	SBRS R2,6
00027e c030      	RJMP _0x36
                 ;     366 	{
                 ;     367 		data_konfirmasi= bacaDataSerialIR();
00027f 940e 00ac 	CALL _bacaDataSerialIR
000281 2f1e      	MOV  R17,R30
                 ;     368 		//kirimDataSerial(data_konfirmasi);
                 ;     369 		buffer_konfirmasi[indek_konfirmasi++]= data_konfirmasi;
000282 2de9      	MOV  R30,R9
000283 9493      	INC  R9
000284 e0f0      	LDI  R31,0
000285 50e0      	SUBI R30,LOW(-_buffer_konfirmasi)
000286 4ffe      	SBCI R31,HIGH(-_buffer_konfirmasi)
000287 8310      	ST   Z,R17
                 ;     370 
                 ;     371 		if((indek_konfirmasi == 1 && data_konfirmasi != '|') || (indek_konfirmasi == 3 && data_konfirmasi != '|'))
000288 e0e1      	LDI  R30,LOW(1)
000289 15e9      	CP   R30,R9
00028a f411      	BRNE _0x38
00028b 371c      	CPI  R17,124
00028c f431      	BRNE _0x3A
                 _0x38:
00028d e0e3      	LDI  R30,LOW(3)
00028e 15e9      	CP   R30,R9
00028f f411      	BRNE _0x3B
000290 371c      	CPI  R17,124
000291 f409      	BRNE _0x3A
                 _0x3B:
000292 c001      	RJMP _0x37
                 _0x3A:
                 ;     372 	            indek_konfirmasi= 0;
000293 c019      	RJMP _0x16C
                 ;     373 		else if(indek_konfirmasi == 4)
                 _0x37:
000294 e0e4      	LDI  R30,LOW(4)
000295 15e9      	CP   R30,R9
000296 f4b9      	BRNE _0x3F
                 ;     374 		{
                 ;     375 			if((buffer_konfirmasi[1] == 0xAA) && (data_konfirmasi == ID_paket))
000297 91e0 0201 	__GETB1MN _buffer_konfirmasi,1
000299 3aea      	CPI  R30,LOW(0xAA)
00029a f411      	BRNE _0x41
00029b 1651      	CP   R5,R17
00029c f009      	BREQ _0x42
                 _0x41:
00029d c002      	RJMP _0x40
                 _0x42:
                 ;     376 			{
                 ;     377 				status_konfirmasi= 1;
00029e 9468      	SET
00029f c00a      	RJMP _0x16D
                 ;     378 				tunggu_konfirmasi= 0;
                 ;     379 			}
                 ;     380 			else
                 _0x40:
                 ;     381 			{
                 ;     382 				if(buffer_konfirmasi[1] == 0x55)
0002a0 91e0 0201 	__GETB1MN _buffer_konfirmasi,1
0002a2 35e5      	CPI  R30,LOW(0x55)
0002a3 f429      	BRNE _0x44
                 ;     383 				{
                 ;     384 					status_konfirmasi= 0;
0002a4 94e8      	CLT
0002a5 f825      	BLD  R2,5
                 ;     385 					tunggu_konfirmasi= 0;
0002a6 f826      	BLD  R2,6
                 ;     386 
                 ;     387 					ID_paket_gagal= data_konfirmasi;
0002a7 2e41      	MOV  R4,R17
                 ;     388 				}
                 ;     389 				else
0002a8 c004      	RJMP _0x45
                 _0x44:
                 ;     390 				{
                 ;     391 					status_konfirmasi= 0;
0002a9 94e8      	CLT
                 _0x16D:
0002aa f825      	BLD  R2,5
                 ;     392 					tunggu_konfirmasi= 0;
0002ab 94e8      	CLT
0002ac f826      	BLD  R2,6
                 ;     393 				}
                 _0x45:
                 ;     394 			}
                 ;     395 			indek_konfirmasi= 0;
                 _0x16C:
0002ad 2499      	CLR  R9
                 ;     396 		}
                 ;     397 	};
                 _0x3F:
0002ae cfce      	RJMP _0x34
                 _0x36:
                 ;     398 }
                 _0x16A:
0002af 9119      	LD   R17,Y+
0002b0 9508      	RET
                 ;     399 /************************************************************************************************************/
                 ;     400 /******************************************************************/
                 ;     401 //Fungsi-Fungsi Protokol Komunikasi untuk Operasi Penerimaan Data
                 ;     402 /******************************************************************/
                 ;     403 // Fungsi Pengiriman Kondisi IDLE
                 ;     404 void kirimKonfirmasiIDLE(void)
                 ;     405 {
                 _kirimKonfirmasiIDLE:
                 ;     406 	MATIKAN_RECEIVER_INTERRUPT_IR();
0002b1 9857      	CBI  0xA,7
                 ;     407 	MATIKAN_RECEIVER_IR();
0002b2 9854      	CBI  0xA,4
                 ;     408 	CLI();
0002b3 94f8      	cli
                 ;     409 
                 ;     410 	kirimDataSerialIR(0x00);
0002b4 e0e0      	LDI  R30,LOW(0)
0002b5 93ea      	ST   -Y,R30
0002b6 940e 0d10 	CALL _kirimDataSerialIR
                 ;     411 	kirimDataSerialIR(0x00);
0002b8 e0e0      	LDI  R30,LOW(0)
0002b9 93ea      	ST   -Y,R30
0002ba 940e 0d10 	CALL _kirimDataSerialIR
                 ;     412 	kirimDataSerialIR(0x00);
0002bc e0e0      	LDI  R30,LOW(0)
0002bd 93ea      	ST   -Y,R30
0002be 940e 0d10 	CALL _kirimDataSerialIR
                 ;     413 	kirimDataSerialIR(0x00);
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 93ea      	ST   -Y,R30
0002c2 940e 0d10 	CALL _kirimDataSerialIR
                 ;     414 	kirimDataSerialIR(0x00);
0002c4 e0e0      	LDI  R30,LOW(0)
0002c5 93ea      	ST   -Y,R30
0002c6 940e 0d10 	CALL _kirimDataSerialIR
                 ;     415 
                 ;     416 	kirimDataSerialIR('|');
0002c8 e7ec      	LDI  R30,LOW(124)
0002c9 93ea      	ST   -Y,R30
0002ca 940e 0d10 	CALL _kirimDataSerialIR
                 ;     417 	kirimDataSerialIR('\n');
0002cc e0ea      	LDI  R30,LOW(10)
0002cd 93ea      	ST   -Y,R30
0002ce 940e 0d10 	CALL _kirimDataSerialIR
                 ;     418 	kirimDataSerialIR('|');
0002d0 e7ec      	LDI  R30,LOW(124)
0002d1 93ea      	ST   -Y,R30
0002d2 940e 0d10 	CALL _kirimDataSerialIR
                 ;     419 	kirimDataSerialIR('\r');
0002d4 e0ed      	LDI  R30,LOW(13)
0002d5 93ea      	ST   -Y,R30
0002d6 940e 0d10 	CALL _kirimDataSerialIR
                 ;     420 
                 ;     421 	SEI();
0002d8 9478      	sei
                 ;     422 	AKTIFKAN_RECEIVER_IR();
0002d9 9a54      	SBI  0xA,4
                 ;     423 	AKTIFKAN_RECEIVER_INTERRUPT_IR();
0002da 9a57      	SBI  0xA,7
                 ;     424 }
0002db 9508      	RET
                 ;     425 /************************************************************************************************************/
                 ;     426 // Fungsi Pengiriman Konfirmasi Paket OK
                 ;     427 void kirimKonfirmasiPaketOK(void)
                 ;     428 {
                 _kirimKonfirmasiPaketOK:
                 ;     429 	MATIKAN_RECEIVER_INTERRUPT_IR();
0002dc 9857      	CBI  0xA,7
                 ;     430 	MATIKAN_RECEIVER_IR();
0002dd 9854      	CBI  0xA,4
                 ;     431 	CLI();
0002de 94f8      	cli
                 ;     432 
                 ;     433 	kirimDataSerialIR(0x00);
0002df e0e0      	LDI  R30,LOW(0)
0002e0 93ea      	ST   -Y,R30
0002e1 940e 0d10 	CALL _kirimDataSerialIR
                 ;     434 	kirimDataSerialIR(0x00);
0002e3 e0e0      	LDI  R30,LOW(0)
0002e4 93ea      	ST   -Y,R30
0002e5 940e 0d10 	CALL _kirimDataSerialIR
                 ;     435 	kirimDataSerialIR(0x00);
0002e7 e0e0      	LDI  R30,LOW(0)
0002e8 93ea      	ST   -Y,R30
0002e9 940e 0d10 	CALL _kirimDataSerialIR
                 ;     436 	kirimDataSerialIR(0x00);
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 93ea      	ST   -Y,R30
0002ed 940e 0d10 	CALL _kirimDataSerialIR
                 ;     437 	kirimDataSerialIR(0x00);
0002ef e0e0      	LDI  R30,LOW(0)
0002f0 93ea      	ST   -Y,R30
0002f1 940e 0d10 	CALL _kirimDataSerialIR
                 ;     438 
                 ;     439 	kirimDataSerialIR('|');
0002f3 e7ec      	LDI  R30,LOW(124)
0002f4 93ea      	ST   -Y,R30
0002f5 940e 0d10 	CALL _kirimDataSerialIR
                 ;     440 	kirimDataSerialIR(0xAA);
0002f7 eaea      	LDI  R30,LOW(170)
0002f8 93ea      	ST   -Y,R30
0002f9 940e 0d10 	CALL _kirimDataSerialIR
                 ;     441 	kirimDataSerialIR('|');
0002fb e7ec      	LDI  R30,LOW(124)
0002fc 93ea      	ST   -Y,R30
0002fd 940e 0d10 	CALL _kirimDataSerialIR
                 ;     442 	//Berisi informasi ID Paket yang Berhasil
                 ;     443 	kirimDataSerialIR(ID_paket_OK);
0002ff 927a      	ST   -Y,R7
000300 940e 0d10 	CALL _kirimDataSerialIR
                 ;     444 
                 ;     445 	SEI();
000302 9478      	sei
                 ;     446 	AKTIFKAN_RECEIVER_IR();
000303 9a54      	SBI  0xA,4
                 ;     447 	AKTIFKAN_RECEIVER_INTERRUPT_IR();
000304 9a57      	SBI  0xA,7
                 ;     448 }
000305 9508      	RET
                 ;     449 /************************************************************************************************************/
                 ;     450 // Fungsi Pengiriman Konfirmasi OK
                 ;     451 void kirimKonfirmasiOK(void)
                 ;     452 {
                 _kirimKonfirmasiOK:
                 ;     453 	MATIKAN_RECEIVER_INTERRUPT_IR();
000306 9857      	CBI  0xA,7
                 ;     454 	MATIKAN_RECEIVER_IR();
000307 9854      	CBI  0xA,4
                 ;     455 	CLI();
000308 94f8      	cli
                 ;     456 
                 ;     457 	kirimDataSerialIR(0x00);
000309 e0e0      	LDI  R30,LOW(0)
00030a 93ea      	ST   -Y,R30
00030b 940e 0d10 	CALL _kirimDataSerialIR
                 ;     458 	kirimDataSerialIR(0x00);
00030d e0e0      	LDI  R30,LOW(0)
00030e 93ea      	ST   -Y,R30
00030f 940e 0d10 	CALL _kirimDataSerialIR
                 ;     459 	kirimDataSerialIR(0x00);
000311 e0e0      	LDI  R30,LOW(0)
000312 93ea      	ST   -Y,R30
000313 940e 0d10 	CALL _kirimDataSerialIR
                 ;     460 	kirimDataSerialIR(0x00);
000315 e0e0      	LDI  R30,LOW(0)
000316 93ea      	ST   -Y,R30
000317 940e 0d10 	CALL _kirimDataSerialIR
                 ;     461 	kirimDataSerialIR(0x00);
000319 e0e0      	LDI  R30,LOW(0)
00031a 93ea      	ST   -Y,R30
00031b 940e 0d10 	CALL _kirimDataSerialIR
                 ;     462 
                 ;     463 	kirimDataSerialIR('|');
00031d e7ec      	LDI  R30,LOW(124)
00031e 93ea      	ST   -Y,R30
00031f 940e 0d10 	CALL _kirimDataSerialIR
                 ;     464 	kirimDataSerialIR(0xAA);
000321 eaea      	LDI  R30,LOW(170)
000322 93ea      	ST   -Y,R30
000323 940e 0d10 	CALL _kirimDataSerialIR
                 ;     465 	kirimDataSerialIR('|');
000325 e7ec      	LDI  R30,LOW(124)
000326 93ea      	ST   -Y,R30
000327 940e 0d10 	CALL _kirimDataSerialIR
                 ;     466 	kirimDataSerialIR(0xAA);
000329 eaea      	LDI  R30,LOW(170)
00032a 93ea      	ST   -Y,R30
00032b 940e 0d10 	CALL _kirimDataSerialIR
                 ;     467 
                 ;     468 	SEI();
00032d 9478      	sei
                 ;     469 	AKTIFKAN_RECEIVER_IR();
00032e 9a54      	SBI  0xA,4
                 ;     470 	AKTIFKAN_RECEIVER_INTERRUPT_IR();
00032f 9a57      	SBI  0xA,7
                 ;     471 }
000330 9508      	RET
                 ;     472 /************************************************************************************************************/
                 ;     473 // Fungsi Pengiriman Konfirmasi Paket Gagal
                 ;     474 void kirimKonfirmasiGAGAL(void)
                 ;     475 {
                 _kirimKonfirmasiGAGAL:
                 ;     476 	MATIKAN_RECEIVER_INTERRUPT_IR();
000331 9857      	CBI  0xA,7
                 ;     477 	MATIKAN_RECEIVER_IR();
000332 9854      	CBI  0xA,4
                 ;     478 	CLI();
000333 94f8      	cli
                 ;     479 
                 ;     480 	kirimDataSerialIR(0x00);
000334 e0e0      	LDI  R30,LOW(0)
000335 93ea      	ST   -Y,R30
000336 940e 0d10 	CALL _kirimDataSerialIR
                 ;     481 	kirimDataSerialIR(0x00);
000338 e0e0      	LDI  R30,LOW(0)
000339 93ea      	ST   -Y,R30
00033a 940e 0d10 	CALL _kirimDataSerialIR
                 ;     482 	kirimDataSerialIR(0x00);
00033c e0e0      	LDI  R30,LOW(0)
00033d 93ea      	ST   -Y,R30
00033e 940e 0d10 	CALL _kirimDataSerialIR
                 ;     483 	kirimDataSerialIR(0x00);
000340 e0e0      	LDI  R30,LOW(0)
000341 93ea      	ST   -Y,R30
000342 940e 0d10 	CALL _kirimDataSerialIR
                 ;     484 	kirimDataSerialIR(0x00);
000344 e0e0      	LDI  R30,LOW(0)
000345 93ea      	ST   -Y,R30
000346 940e 0d10 	CALL _kirimDataSerialIR
                 ;     485 
                 ;     486 	kirimDataSerialIR('|');
000348 e7ec      	LDI  R30,LOW(124)
000349 93ea      	ST   -Y,R30
00034a 940e 0d10 	CALL _kirimDataSerialIR
                 ;     487 	kirimDataSerialIR(0x55);
00034c e5e5      	LDI  R30,LOW(85)
00034d 93ea      	ST   -Y,R30
00034e 940e 0d10 	CALL _kirimDataSerialIR
                 ;     488 	kirimDataSerialIR('|');
000350 e7ec      	LDI  R30,LOW(124)
000351 93ea      	ST   -Y,R30
000352 940e 0d10 	CALL _kirimDataSerialIR
                 ;     489 	//Berisi informasi ID Paket yang Gagal
                 ;     490 	kirimDataSerialIR(ID_paket);
000354 925a      	ST   -Y,R5
000355 940e 0d10 	CALL _kirimDataSerialIR
                 ;     491 
                 ;     492 	SEI();
000357 9478      	sei
                 ;     493 	AKTIFKAN_RECEIVER_IR();
000358 9a54      	SBI  0xA,4
                 ;     494 	AKTIFKAN_RECEIVER_INTERRUPT_IR();
000359 9a57      	SBI  0xA,7
                 ;     495 }
00035a 9508      	RET
                 ;     496 /************************************************************************************************************/
                 ;     497 // Timer 1 output compare A interrupt service routine
                 ;     498 // Interrupt setiap 20 ms
                 ;     499 interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ;     500 {
                 _timer1_compa_isr:
00035b 920a      	ST   -Y,R0
00035c 921a      	ST   -Y,R1
00035d 92fa      	ST   -Y,R15
00035e 936a      	ST   -Y,R22
00035f 937a      	ST   -Y,R23
000360 938a      	ST   -Y,R24
000361 939a      	ST   -Y,R25
000362 93aa      	ST   -Y,R26
000363 93ba      	ST   -Y,R27
000364 93ea      	ST   -Y,R30
000365 93fa      	ST   -Y,R31
000366 b7ef      	IN   R30,SREG
000367 93ea      	ST   -Y,R30
                 ;     501       TCNT1L= 0x00;
000368 e0e0      	LDI  R30,LOW(0)
000369 bdec      	OUT  0x2C,R30
                 ;     502       TCNT1H= 0x00;
00036a bded      	OUT  0x2D,R30
                 ;     503 
                 ;     504       if(time1 > 0)
00036b 91a0 0298 	LDS  R26,_time1
00036d 91b0 0299 	LDS  R27,_time1+1
00036f 940e 0d4c 	CALL __CPW02
000371 f448      	BRSH _0x46
                 ;     505       --time1;
000372 91e0 0298 	LDS  R30,_time1
000374 91f0 0299 	LDS  R31,_time1+1
000376 9731      	SBIW R30,1
000377 93e0 0298 	STS  _time1,R30
000379 93f0 0299 	STS  _time1+1,R31
                 ;     506 
                 ;     507       if(time1 == 0)
                 _0x46:
00037b 91e0 0298 	LDS  R30,_time1
00037d 91f0 0299 	LDS  R31,_time1+1
00037f 9730      	SBIW R30,0
000380 f4f1      	BRNE _0x47
                 ;     508       {
                 ;     509             time1= USART_TIMEOUT;
000381 e4e4      	LDI  R30,LOW(68)
000382 e0f0      	LDI  R31,HIGH(68)
000383 93e0 0298 	STS  _time1,R30
000385 93f0 0299 	STS  _time1+1,R31
                 ;     510 
                 ;     511             if(status_paket == KONFIRMASI_GAGAL)
000387 e0e2      	LDI  R30,LOW(2)
000388 15ea      	CP   R30,R10
000389 f421      	BRNE _0x48
                 ;     512             {
                 ;     513                   //Reset indek data pada buffer data sementara
                 ;     514                   indek_data= 0;
00038a 2488      	CLR  R8
                 ;     515                   kirimKonfirmasiGAGAL();
00038b 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;     516             }
                 ;     517             else if(status_paket == KONFIRMASI_OK)
00038d c011      	RJMP _0x49
                 _0x48:
00038e e0e1      	LDI  R30,LOW(1)
00038f 15ea      	CP   R30,R10
000390 f419      	BRNE _0x4A
                 ;     518                   kirimKonfirmasiOK();
000391 940e 0306 	CALL _kirimKonfirmasiOK
                 ;     519             else if(status_paket == KONFIRMASI_PAKET_OK)
000393 c00b      	RJMP _0x4B
                 _0x4A:
000394 e0e3      	LDI  R30,LOW(3)
000395 15ea      	CP   R30,R10
000396 f419      	BRNE _0x4C
                 ;     520                   kirimKonfirmasiPaketOK();
000397 940e 02dc 	CALL _kirimKonfirmasiPaketOK
                 ;     521             else if(status_paket == AKHIR_PROSES)
000399 c005      	RJMP _0x4D
                 _0x4C:
00039a e0e5      	LDI  R30,LOW(5)
00039b 15ea      	CP   R30,R10
00039c f411      	BRNE _0x4E
                 ;     522                   kirimKonfirmasiIDLE();
00039d 940e 02b1 	CALL _kirimKonfirmasiIDLE
                 ;     523       }
                 _0x4E:
                 _0x4D:
                 _0x4B:
                 _0x49:
                 ;     524 }
                 _0x47:
00039f 91e9      	LD   R30,Y+
0003a0 bfef      	OUT  SREG,R30
0003a1 91f9      	LD   R31,Y+
0003a2 91e9      	LD   R30,Y+
0003a3 91b9      	LD   R27,Y+
0003a4 91a9      	LD   R26,Y+
0003a5 9199      	LD   R25,Y+
0003a6 9189      	LD   R24,Y+
0003a7 9179      	LD   R23,Y+
0003a8 9169      	LD   R22,Y+
0003a9 90f9      	LD   R15,Y+
0003aa 9019      	LD   R1,Y+
0003ab 9009      	LD   R0,Y+
0003ac 9518      	RETI
                 ;     525 /************************************************************************************************************/
                 ;     526 //Rutin inisialisasi hardware dan variabel
                 ;     527 void inisialisasi(void)
                 ;     528 {
                 _inisialisasi:
                 ;     529     unsigned char eksistensi_devais;
                 ;     530 
                 ;     531     //ID_paket mulai dari 1 sampai dengan jumlah paket maksimal
                 ;     532     //Diincrement pada saat pemanggilan fungsi load data
                 ;     533     ID_paket= 0;
0003ad 931a      	ST   -Y,R17
                 ;	eksistensi_devais -> R17
0003ae 2455      	CLR  R5
                 ;     534     ID_paket_gagal= 1;
0003af e0e1      	LDI  R30,LOW(1)
0003b0 2e4e      	MOV  R4,R30
                 ;     535 
                 ;     536     //Jumlah paket data maksimal
                 ;     537     jml_paket= 0;
0003b1 24bb      	CLR  R11
                 ;     538 
                 ;     539     //Indek buffer konfirmasi
                 ;     540     indek_konfirmasi= 0;
0003b2 2499      	CLR  R9
                 ;     541     ID_paket_OK= 0;
0003b3 2477      	CLR  R7
                 ;     542 
                 ;     543     //Status konfirmasi
                 ;     544     //OK= 1, GAGAL= 0
                 ;     545     status_konfirmasi= 0;
0003b4 94e8      	CLT
0003b5 f825      	BLD  R2,5
                 ;     546     tunggu_konfirmasi= 0;
0003b6 f826      	BLD  R2,6
                 ;     547 
                 ;     548     //Status Paket Data Transmisi
                 ;     549     status_paket_perintah= 1;
0003b7 9468      	SET
0003b8 f822      	BLD  R2,2
                 ;     550     status_paket_data= 0;
0003b9 94e8      	CLT
0003ba f823      	BLD  R2,3
                 ;     551     status_paket_akhir= 0;
0003bb f824      	BLD  R2,4
                 ;     552 
                 ;     553     //Untuk timer scheduling
                 ;     554     time1= USART_TIMEOUT;
0003bc e4e4      	LDI  R30,LOW(68)
0003bd e0f0      	LDI  R31,HIGH(68)
0003be 93e0 0298 	STS  _time1,R30
0003c0 93f0 0299 	STS  _time1+1,R31
                 ;     555 
                 ;     556     //Status paket data yang diterima
                 ;     557     status_paket= TDK_PERLU_KONFIRMASI;
0003c2 24aa      	CLR  R10
                 ;     558 
                 ;     559     //Indek untuk pengalamatan SRAM eksternal
                 ;     560     idxBufExtSRAM= 0;
0003c3 e0e0      	LDI  R30,0
0003c4 93e0 0292 	STS  _idxBufExtSRAM,R30
0003c6 93e0 0293 	STS  _idxBufExtSRAM+1,R30
                 ;     561 
                 ;     562     //IndekData untuk pengindekan buffer_paket_data
                 ;     563     indek_data= 0;
0003c8 2488      	CLR  R8
                 ;     564     akhir_transmisi= 0;
0003c9 f827      	BLD  R2,7
                 ;     565 
                 ;     566     //Set bit status penulisan data
                 ;     567     status_tulis_bertahap= 0;
0003ca f831      	BLD  R3,1
                 ;     568 
                 ;     569     //Set alamat akhir memori devais yang diakses
                 ;     570     alamat_awal= 0;
0003cb e0e0      	LDI  R30,0
0003cc 93e0 028c 	STS  _alamat_awal,R30
0003ce 93e0 028d 	STS  _alamat_awal+1,R30
                 ;     571     alamat_akhir= 0;
0003d0 e0e0      	LDI  R30,0
0003d1 93e0 028e 	STS  _alamat_akhir,R30
0003d3 93e0 028f 	STS  _alamat_akhir+1,R30
                 ;     572 
                 ;     573     //Set kondisi akses devais
                 ;     574     awal_akses_devais= 1;
0003d5 9468      	SET
0003d6 f820      	BLD  R2,0
                 ;     575     akhir_akses_devais= 0;
0003d7 94e8      	CLT
0003d8 f821      	BLD  R2,1
                 ;     576 
                 ;     577     //Set jumlah data byte yang diterima
                 ;     578     jml_byte_data= 0;
0003d9 e0e0      	LDI  R30,0
0003da 93e0 0294 	STS  _jml_byte_data,R30
0003dc 93e0 0295 	STS  _jml_byte_data+1,R30
                 ;     579 
                 ;     580     //Set LED indikator;
                 ;     581     LED_MERAH_OFF();
0003de 9a38      	SBI  0x7,0
                 ;     582     LED_BIRU_OFF();
0003df 9a93      	SBI  0x12,3
                 ;     583 
                 ;     584     //Cek eksistensi devais yang terpasang pada sisi target
                 ;     585     eksistensi_devais= cekEksistensiDevais();
0003e0 940e 0ca0 	CALL _cekEksistensiDevais
0003e2 2f1e      	MOV  R17,R30
                 ;     586     if(eksistensi_devais) LED_BIRU_ON();
0003e3 3010      	CPI  R17,0
0003e4 f009      	BREQ _0x4F
0003e5 9893      	CBI  0x12,3
                 ;     587 
                 ;     588     //Baca Devais Signature untuk dibandingkan dengan kode devais dari pemrogram
                 ;     589     ISPReadDevaisSignature();
                 _0x4F:
0003e6 940e 0baa 	CALL _ISPReadDevaisSignature
                 ;     590 
                 ;     591     //Aktifkan Global Interrupt Enable
                 ;     592     SEI();
0003e8 9478      	sei
                 ;     593 }
0003e9 c0c3      	RJMP _0x169
                 ;     594 /************************************************************************************************************/
                 ;     595 // Fungsi pengiriman data ke pemrogram
                 ;     596 void kirimDataKePemrogram(void)
                 ;     597 {
                 _kirimDataKePemrogram:
                 ;     598     MATIKAN_SCHEDULLING();
0003ea e0e0      	LDI  R30,LOW(0)
0003eb bdee      	OUT  0x2E,R30
                 ;     599     MATIKAN_RECEIVER_INTERRUPT_IR();
0003ec 9857      	CBI  0xA,7
                 ;     600     AKTIFKAN_RECEIVER_IR();
0003ed 9a54      	SBI  0xA,4
                 ;     601 
                 ;     602     //Inisialisasi ID Paket mulai nol
                 ;     603     //ID Paket yang dikirim mulai dari satu
                 ;     604     ID_paket= 0;
0003ee 2455      	CLR  R5
                 ;     605 
                 ;     606     //Status Paket Data Transmisi
                 ;     607     status_paket_perintah= 1;
0003ef 9468      	SET
0003f0 f822      	BLD  R2,2
                 ;     608     status_paket_data= 0;
0003f1 94e8      	CLT
0003f2 f823      	BLD  R2,3
                 ;     609     status_paket_akhir= 0;
0003f3 f824      	BLD  R2,4
                 ;     610 
                 ;     611     //Status konfirmasi
                 ;     612     //OK= 1, GAGAL= 0
                 ;     613     status_konfirmasi= 0;
0003f4 f825      	BLD  R2,5
                 ;     614     tunggu_konfirmasi= 0;
0003f5 f826      	BLD  R2,6
                 ;     615 
                 ;     616     //Pengiriman Paket Perintah
                 ;     617     while(status_paket_perintah==1)
                 _0x50:
0003f6 fe22      	SBRS R2,2
0003f7 c00b      	RJMP _0x52
                 ;     618     {
                 ;     619         kirimPaketPerintah();
0003f8 940e 0134 	CALL _kirimPaketPerintah
                 ;     620         tunggu_konfirmasi= 1;
0003fa 9468      	SET
0003fb f826      	BLD  R2,6
                 ;     621         AKTIFKAN_RECEIVER_IR();
0003fc 9a54      	SBI  0xA,4
                 ;     622         AKTIFKAN_RECEIVER_INTERRUPT_IR();
0003fd 9a57      	SBI  0xA,7
                 ;     623         olahKonfirmasiPaketPerintahDanAkhir();
0003fe 940e 0244 	CALL _olahKonfirmasiPaketPerintahDanAkhir
                 ;     624         MATIKAN_RECEIVER_INTERRUPT_IR();
000400 9857      	CBI  0xA,7
                 ;     625         MATIKAN_RECEIVER_IR();
000401 9854      	CBI  0xA,4
                 ;     626     };
000402 cff3      	RJMP _0x50
                 _0x52:
                 ;     627     //Pengiriman Paket Data
                 ;     628     while(status_paket_data==1)
                 _0x53:
000403 fe23      	SBRS R2,3
000404 c014      	RJMP _0x55
                 ;     629     {
                 ;     630         //debugging program
                 ;     631         kirimDataSerial(ID_paket);  //Debug log serial USB
000405 925a      	ST   -Y,R5
000406 940e 0d15 	CALL _kirimDataSerial
                 ;     632         kirimPaketData();
000408 940e 0182 	CALL _kirimPaketData
                 ;     633         tunggu_konfirmasi= 1;
00040a 9468      	SET
00040b f826      	BLD  R2,6
                 ;     634         AKTIFKAN_RECEIVER_IR();
00040c 9a54      	SBI  0xA,4
                 ;     635         AKTIFKAN_RECEIVER_INTERRUPT_IR();
00040d 9a57      	SBI  0xA,7
                 ;     636         olahKonfirmasiPaketData();
00040e 940e 027b 	CALL _olahKonfirmasiPaketData
                 ;     637         MATIKAN_RECEIVER_INTERRUPT_IR();
000410 9857      	CBI  0xA,7
                 ;     638         MATIKAN_RECEIVER_IR();
000411 9854      	CBI  0xA,4
                 ;     639         if(ID_paket==jml_paket)
000412 14b5      	CP   R11,R5
000413 f421      	BRNE _0x56
                 ;     640         {
                 ;     641             status_paket_data= 0;
000414 94e8      	CLT
000415 f823      	BLD  R2,3
                 ;     642             status_paket_akhir= 1;
000416 9468      	SET
000417 f824      	BLD  R2,4
                 ;     643         }
                 ;     644     };
                 _0x56:
000418 cfea      	RJMP _0x53
                 _0x55:
                 ;     645 
                 ;     646     //Reset indek buffer interrupt RXC
                 ;     647     rx_wr_index0= 0;
000419 e0e0      	LDI  R30,0
00041a 93e0 039a 	STS  _rx_wr_index0,R30
00041c 93e0 039b 	STS  _rx_wr_index0+1,R30
                 ;     648     rx_rd_index0= 0;
00041e e0e0      	LDI  R30,0
00041f 93e0 039c 	STS  _rx_rd_index0,R30
000421 93e0 039d 	STS  _rx_rd_index0+1,R30
                 ;     649     rx_counter0= 0;
000423 e0e0      	LDI  R30,0
000424 93e0 039e 	STS  _rx_counter0,R30
000426 93e0 039f 	STS  _rx_counter0+1,R30
                 ;     650 
                 ;     651     //Pengiriman Paket Akhir
                 ;     652     while(status_paket_akhir==1)
                 _0x57:
000428 fe24      	SBRS R2,4
000429 c00b      	RJMP _0x59
                 ;     653     {
                 ;     654         kirimPaketAkhir();
00042a 940e 01f9 	CALL _kirimPaketAkhir
                 ;     655         tunggu_konfirmasi= 1;
00042c 9468      	SET
00042d f826      	BLD  R2,6
                 ;     656         AKTIFKAN_RECEIVER_IR();
00042e 9a54      	SBI  0xA,4
                 ;     657         AKTIFKAN_RECEIVER_INTERRUPT_IR();
00042f 9a57      	SBI  0xA,7
                 ;     658         olahKonfirmasiPaketPerintahDanAkhir();
000430 940e 0244 	CALL _olahKonfirmasiPaketPerintahDanAkhir
                 ;     659         MATIKAN_RECEIVER_INTERRUPT_IR();
000432 9857      	CBI  0xA,7
                 ;     660         MATIKAN_RECEIVER_IR();
000433 9854      	CBI  0xA,4
                 ;     661     };
000434 cff3      	RJMP _0x57
                 _0x59:
                 ;     662 
                 ;     663     AKTIFKAN_SCHEDULLING();
000435 e0e2      	LDI  R30,LOW(2)
000436 bdee      	OUT  0x2E,R30
                 ;     664 }
000437 9508      	RET
                 ;     665 /************************************************************************************************************/
                 ;     666 // Fungsi pengiriman data berukuran besar ke pemrogram
                 ;     667 void kirimDataFlashBesarKePemrogram(void)
                 ;     668 {
                 _kirimDataFlashBesarKePemrogram:
                 ;     669     unsigned char counter= 1;
                 ;     670 
                 ;     671     MATIKAN_SCHEDULLING();
000438 931a      	ST   -Y,R17
                 ;	counter -> R17
000439 e011      	LDI  R17,1
00043a e0e0      	LDI  R30,LOW(0)
00043b bdee      	OUT  0x2E,R30
                 ;     672     MATIKAN_RECEIVER_INTERRUPT_IR();
00043c 9857      	CBI  0xA,7
                 ;     673     AKTIFKAN_RECEIVER_IR();
00043d 9a54      	SBI  0xA,4
                 ;     674 
                 ;     675     //Inisialisasi ID Paket mulai nol
                 ;     676     //ID Paket yang dikirim mulai dari satu
                 ;     677     ID_paket= 0;
00043e 2455      	CLR  R5
                 ;     678 
                 ;     679     //Status Paket Data Transmisi
                 ;     680     status_paket_perintah= 1;
00043f 9468      	SET
000440 f822      	BLD  R2,2
                 ;     681     status_paket_data= 0;
000441 94e8      	CLT
000442 f823      	BLD  R2,3
                 ;     682     status_paket_akhir= 0;
000443 f824      	BLD  R2,4
                 ;     683 
                 ;     684     //Status konfirmasi
                 ;     685     //OK= 1, GAGAL= 0
                 ;     686     status_konfirmasi= 0;
000444 f825      	BLD  R2,5
                 ;     687     tunggu_konfirmasi= 0;
000445 f826      	BLD  R2,6
                 ;     688 
                 ;     689     status_baca_bertahap= 1;
000446 9468      	SET
000447 f832      	BLD  R3,2
                 ;     690     alamat_awal= 0;
000448 e0e0      	LDI  R30,0
000449 93e0 028c 	STS  _alamat_awal,R30
00044b 93e0 028d 	STS  _alamat_awal+1,R30
                 ;     691 
                 ;     692     //Pengiriman Paket Perintah
                 ;     693     while(status_paket_perintah==1)
                 _0x5A:
00044d fe22      	SBRS R2,2
00044e c00b      	RJMP _0x5C
                 ;     694     {
                 ;     695         kirimPaketPerintah();
00044f 940e 0134 	CALL _kirimPaketPerintah
                 ;     696         tunggu_konfirmasi= 1;
000451 9468      	SET
000452 f826      	BLD  R2,6
                 ;     697         AKTIFKAN_RECEIVER_IR();
000453 9a54      	SBI  0xA,4
                 ;     698         AKTIFKAN_RECEIVER_INTERRUPT_IR();
000454 9a57      	SBI  0xA,7
                 ;     699         olahKonfirmasiPaketPerintahDanAkhir();
000455 940e 0244 	CALL _olahKonfirmasiPaketPerintahDanAkhir
                 ;     700         MATIKAN_RECEIVER_INTERRUPT_IR();
000457 9857      	CBI  0xA,7
                 ;     701         MATIKAN_RECEIVER_IR();
000458 9854      	CBI  0xA,4
                 ;     702     };
000459 cff3      	RJMP _0x5A
                 _0x5C:
                 ;     703     //Pengiriman Paket Data
                 ;     704     while(status_paket_data==1)
                 _0x5D:
00045a fe23      	SBRS R2,3
00045b c033      	RJMP _0x5F
                 ;     705     {
                 ;     706         if(status_baca_bertahap)
00045c fe32      	SBRS R3,2
00045d c018      	RJMP _0x60
                 ;     707         {
                 ;     708             LED_BIRU_ON();
00045e 9893      	CBI  0x12,3
                 ;     709             alamat_akhir= ISPReadHugeFlashMemory(KAPASITAS_SRAM, alamat_awal);
00045f e0e0      	LDI  R30,LOW(8192)
000460 e2f0      	LDI  R31,HIGH(8192)
000461 93fa      	ST   -Y,R31
000462 93ea      	ST   -Y,R30
000463 91e0 028c 	LDS  R30,_alamat_awal
000465 91f0 028d 	LDS  R31,_alamat_awal+1
000467 93fa      	ST   -Y,R31
000468 93ea      	ST   -Y,R30
000469 940e 0b0d 	CALL _ISPReadHugeFlashMemory
00046b 93e0 028e 	STS  _alamat_akhir,R30
00046d 93f0 028f 	STS  _alamat_akhir+1,R31
                 ;     710             alamat_awal= alamat_akhir;
00046f 93e0 028c 	STS  _alamat_awal,R30
000471 93f0 028d 	STS  _alamat_awal+1,R31
                 ;     711             status_data_baru_sram= 1;
000473 9468      	SET
000474 f833      	BLD  R3,3
                 ;     712             LED_BIRU_OFF();
000475 9a93      	SBI  0x12,3
                 ;     713         }
                 ;     714         while(status_data_baru_sram)
                 _0x60:
                 _0x61:
000476 fe33      	SBRS R3,3
000477 c016      	RJMP _0x63
                 ;     715         {
                 ;     716             //debugging program
                 ;     717             //kirimDataSerial(counter++);  //Debug log serial USB
                 ;     718             kirimPaketData();
000478 940e 0182 	CALL _kirimPaketData
                 ;     719             tunggu_konfirmasi= 1;
00047a 9468      	SET
00047b f826      	BLD  R2,6
                 ;     720             AKTIFKAN_RECEIVER_IR();
00047c 9a54      	SBI  0xA,4
                 ;     721             AKTIFKAN_RECEIVER_INTERRUPT_IR();
00047d 9a57      	SBI  0xA,7
                 ;     722             olahKonfirmasiPaketData();
00047e 940e 027b 	CALL _olahKonfirmasiPaketData
                 ;     723             MATIKAN_RECEIVER_INTERRUPT_IR();
000480 9857      	CBI  0xA,7
                 ;     724             MATIKAN_RECEIVER_IR();
000481 9854      	CBI  0xA,4
                 ;     725             if(ID_paket==jml_paket+1)
000482 2deb      	MOV  R30,R11
000483 5fef      	SUBI R30,-LOW(1)
000484 15e5      	CP   R30,R5
000485 f439      	BRNE _0x64
                 ;     726             {
                 ;     727                 status_baca_bertahap= 0;
000486 94e8      	CLT
000487 f832      	BLD  R3,2
                 ;     728                 status_paket_data= 0;
000488 f823      	BLD  R2,3
                 ;     729                 status_paket_akhir= 1;
000489 9468      	SET
00048a f824      	BLD  R2,4
                 ;     730                 status_data_baru_sram= 0;
00048b 94e8      	CLT
00048c f833      	BLD  R3,3
                 ;     731             }
                 ;     732         };
                 _0x64:
00048d cfe8      	RJMP _0x61
                 _0x63:
                 ;     733     };
00048e cfcb      	RJMP _0x5D
                 _0x5F:
                 ;     734 
                 ;     735     //Reset indek buffer interrupt RXC
                 ;     736     rx_wr_index0= 0;
00048f e0e0      	LDI  R30,0
000490 93e0 039a 	STS  _rx_wr_index0,R30
000492 93e0 039b 	STS  _rx_wr_index0+1,R30
                 ;     737     rx_rd_index0= 0;
000494 e0e0      	LDI  R30,0
000495 93e0 039c 	STS  _rx_rd_index0,R30
000497 93e0 039d 	STS  _rx_rd_index0+1,R30
                 ;     738     rx_counter0= 0;
000499 e0e0      	LDI  R30,0
00049a 93e0 039e 	STS  _rx_counter0,R30
00049c 93e0 039f 	STS  _rx_counter0+1,R30
                 ;     739 
                 ;     740     //Pengiriman Paket Akhir
                 ;     741     while(status_paket_akhir==1)
                 _0x65:
00049e fe24      	SBRS R2,4
00049f c00b      	RJMP _0x67
                 ;     742     {
                 ;     743         kirimPaketAkhir();
0004a0 940e 01f9 	CALL _kirimPaketAkhir
                 ;     744         tunggu_konfirmasi= 1;
0004a2 9468      	SET
0004a3 f826      	BLD  R2,6
                 ;     745         AKTIFKAN_RECEIVER_IR();
0004a4 9a54      	SBI  0xA,4
                 ;     746         AKTIFKAN_RECEIVER_INTERRUPT_IR();
0004a5 9a57      	SBI  0xA,7
                 ;     747         olahKonfirmasiPaketPerintahDanAkhir();
0004a6 940e 0244 	CALL _olahKonfirmasiPaketPerintahDanAkhir
                 ;     748         MATIKAN_RECEIVER_INTERRUPT_IR();
0004a8 9857      	CBI  0xA,7
                 ;     749         MATIKAN_RECEIVER_IR();
0004a9 9854      	CBI  0xA,4
                 ;     750     };
0004aa cff3      	RJMP _0x65
                 _0x67:
                 ;     751 
                 ;     752     AKTIFKAN_SCHEDULLING();
0004ab e0e2      	LDI  R30,LOW(2)
0004ac bdee      	OUT  0x2E,R30
                 ;     753 }
                 _0x169:
0004ad 9119      	LD   R17,Y+
0004ae 9508      	RET
                 ;     754 /************************************************************************************************************/
                 ;     755 // Fungsi Pembacaan Ukuran Flash untuk mengetahui ukuran flash dan EEPROM maksimal
                 ;     756 unsigned int bacaUkuranFlash(void)
                 ;     757 {
                 _bacaUkuranFlash:
                 ;     758     // Ukuran memori flash berdasarkan devais signature
                 ;     759     // 0x90 -->  1024 byte
                 ;     760     // 0x91 -->  2048 byte
                 ;     761     // 0x92 -->  4096 byte
                 ;     762     // 0x93 -->  8192 byte
                 ;     763     // 0x94 --> 16384 byte
                 ;     764     // 0x95 --> 32768 byte
                 ;     765     // 0x96 --> 65536 byte
                 ;     766 
                 ;     767     unsigned char kode_devais;
                 ;     768     unsigned int ukuran_flash;
                 ;     769 
                 ;     770     kode_devais= devais_signature[1];
0004af 940e 0d52 	CALL __SAVELOCR4
                 ;	kode_devais -> R17
                 ;	ukuran_flash -> R18,R19
0004b1 9110 0287 	__GETBRMN 17,_devais_signature,1
                 ;     771     CLI();
0004b3 94f8      	cli
                 ;     772     switch(kode_devais)
0004b4 2fe1      	MOV  R30,R17
                 ;     773     {
                 ;     774         case 0x90:
0004b5 39e0      	CPI  R30,LOW(0x90)
0004b6 f419      	BRNE _0x6B
                 ;     775              ukuran_flash= 1024;
0004b7 e020
0004b8 e034      	__GETWRN 18,19,1024
                 ;     776              break;
0004b9 c020      	RJMP _0x6A
                 ;     777         case 0x91:
                 _0x6B:
0004ba 39e1      	CPI  R30,LOW(0x91)
0004bb f419      	BRNE _0x6C
                 ;     778              ukuran_flash= 2048;
0004bc e020
0004bd e038      	__GETWRN 18,19,2048
                 ;     779              break;
0004be c01b      	RJMP _0x6A
                 ;     780         case 0x92:
                 _0x6C:
0004bf 39e2      	CPI  R30,LOW(0x92)
0004c0 f419      	BRNE _0x6D
                 ;     781              ukuran_flash= 4096;
0004c1 e020
0004c2 e130      	__GETWRN 18,19,4096
                 ;     782              break;
0004c3 c016      	RJMP _0x6A
                 ;     783         case 0x93:
                 _0x6D:
0004c4 39e3      	CPI  R30,LOW(0x93)
0004c5 f419      	BRNE _0x6E
                 ;     784              ukuran_flash= 8192;
0004c6 e020
0004c7 e230      	__GETWRN 18,19,8192
                 ;     785              break;
0004c8 c011      	RJMP _0x6A
                 ;     786         case 0x94:
                 _0x6E:
0004c9 39e4      	CPI  R30,LOW(0x94)
0004ca f419      	BRNE _0x6F
                 ;     787              ukuran_flash= 16384;
0004cb e020
0004cc e430      	__GETWRN 18,19,16384
                 ;     788              break;
0004cd c00c      	RJMP _0x6A
                 ;     789         case 0x95:
                 _0x6F:
0004ce 39e5      	CPI  R30,LOW(0x95)
0004cf f419      	BRNE _0x70
                 ;     790              ukuran_flash= 32768;
0004d0 e020
0004d1 e830      	__GETWRN 18,19,32768
                 ;     791              break;
0004d2 c007      	RJMP _0x6A
                 ;     792         case 0x96:
                 _0x70:
0004d3 39e6      	CPI  R30,LOW(0x96)
0004d4 f419      	BRNE _0x72
                 ;     793              ukuran_flash= 65536;
0004d5 e020
0004d6 e030      	__GETWRN 18,19,65536
                 ;     794              break;
0004d7 c002      	RJMP _0x6A
                 ;     795         default : ukuran_flash= 0;
                 _0x72:
0004d8 e020
0004d9 e030      	__GETWRN 18,19,0
                 ;     796     }
                 _0x6A:
                 ;     797     return ukuran_flash;
0004da 01f9      	MOVW R30,R18
0004db 940e 0d59 	CALL __LOADLOCR4
0004dd 9624      	ADIW R28,4
0004de 9508      	RET
                 ;     798 }
                 ;     799 /************************************************************************************************************/
                 ;     800 // Fungsi Tulis Flash, data dari kiriman pemrogram
                 ;     801 void tulisMemoriFlash(void)
                 ;     802 {
                 _tulisMemoriFlash:
                 ;     803     unsigned int jml_page_data;
                 ;     804     jml_page_data= 0;
0004df 931a      	ST   -Y,R17
0004e0 930a      	ST   -Y,R16
                 ;	jml_page_data -> R16,R17
0004e1 e000
0004e2 e010      	__GETWRN 16,17,0
                 ;     805 
                 ;     806     CLI();
0004e3 94f8      	cli
                 ;     807     jml_page_data= (unsigned int) (idxBufExtSRAM/2); //Benar bisa jalan OK
0004e4 91e0 0292 	LDS  R30,_idxBufExtSRAM
0004e6 91f0 0293 	LDS  R31,_idxBufExtSRAM+1
0004e8 95f6      	LSR  R31
0004e9 95e7      	ROR  R30
0004ea 018f      	MOVW R16,R30
                 ;     808     LED_BIRU_ON();
0004eb 9893      	CBI  0x12,3
                 ;     809     enterProgrammingMode();
0004ec 940e 0c65 	CALL _enterProgrammingMode
                 ;     810     chipErase();
0004ee 940e 0c87 	CALL _chipErase
                 ;     811     ISPWriteFlashMemory(jml_page_data);
0004f0 931a      	ST   -Y,R17
0004f1 930a      	ST   -Y,R16
0004f2 940e 0a0a 	CALL _ISPWriteFlashMemory
                 ;     812     leaveProgrammingMode();
0004f4 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     813     LED_BIRU_OFF();
0004f6 9a93      	SBI  0x12,3
                 ;     814     SEI();
0004f7 9478      	sei
                 ;     815 }
0004f8 9109      	LD   R16,Y+
0004f9 9119      	LD   R17,Y+
0004fa 9508      	RET
                 ;     816 /************************************************************************************************************/
                 ;     817 // Fungsi Tulis EEPROM, data dari kiriman pemrogram
                 ;     818 void tulisEEPROM(void)
                 ;     819 {
                 _tulisEEPROM:
                 ;     820     unsigned int jml_byte_data;
                 ;     821     jml_byte_data= 0;
0004fb 931a      	ST   -Y,R17
0004fc 930a      	ST   -Y,R16
                 ;	jml_byte_data -> R16,R17
0004fd e000
0004fe e010      	__GETWRN 16,17,0
                 ;     822 
                 ;     823     CLI();
0004ff 94f8      	cli
                 ;     824     jml_byte_data= idxBufExtSRAM;
000500 9100 0292
000502 9110 0293 	__GETWRMN 16,17,0,_idxBufExtSRAM
                 ;     825     LED_BIRU_ON();
000504 9893      	CBI  0x12,3
                 ;     826     enterProgrammingMode();
000505 940e 0c65 	CALL _enterProgrammingMode
                 ;     827     ISPWriteEEPROM(jml_byte_data);
000507 931a      	ST   -Y,R17
000508 930a      	ST   -Y,R16
000509 940e 0963 	CALL _ISPWriteEEPROM
                 ;     828     leaveProgrammingMode();
00050b 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     829     LED_BIRU_OFF();
00050d 9a93      	SBI  0x12,3
                 ;     830     SEI();
00050e 9478      	sei
                 ;     831 }
00050f 9109      	LD   R16,Y+
000510 9119      	LD   R17,Y+
000511 9508      	RET
                 ;     832 /************************************************************************************************************/
                 ;     833 // Fungsi Baca Flash, hasil pembacaan kirim ke pemrogram
                 ;     834 void bacaMemoriFlash(void)
                 ;     835 {
                 _bacaMemoriFlash:
                 ;     836     unsigned int flash_page_max;
                 ;     837     unsigned int ukuran_flash_max;
                 ;     838 
                 ;     839     CLI();
000512 940e 0d52 	CALL __SAVELOCR4
                 ;	flash_page_max -> R16,R17
                 ;	ukuran_flash_max -> R18,R19
000514 94f8      	cli
                 ;     840     //Baca flash memory kemudian data disimpan dalam SRAM Eksternal
                 ;     841     ukuran_flash_max= bacaUkuranFlash();
000515 940e 04af 	CALL _bacaUkuranFlash
000517 019f      	MOVW R18,R30
                 ;     842     flash_page_max= ukuran_flash_max/2; //OK sudah bisa
000518 01f9      	MOVW R30,R18
000519 95f6      	LSR  R31
00051a 95e7      	ROR  R30
00051b 018f      	MOVW R16,R30
                 ;     843     jml_paket= (unsigned char) (ukuran_flash_max/PANJANG_PAKET);
00051c 01d9      	MOVW R26,R18
00051d e8e0      	LDI  R30,LOW(128)
00051e e0f0      	LDI  R31,HIGH(128)
00051f 940e 0d39 	CALL __DIVW21U
000521 2ebe      	MOV  R11,R30
                 ;     844     if(ukuran_flash_max>KAPASITAS_SRAM) status_tulis_bertahap= 1;
000522 3021
000523 e2e0
000524 073e      	__CPWRN 18,19,8193
000525 f010      	BRLO _0x73
000526 9468      	SET
000527 f831      	BLD  R3,1
                 ;     845     //Pengiriman data pembacaan flash ke sisi pemrogram
                 ;     846     if(status_tulis_bertahap)
                 _0x73:
000528 fe31      	SBRS R3,1
000529 c007      	RJMP _0x74
                 ;     847     {
                 ;     848         //data flash melebihi kapasitas SRAM (ukuran flash besar)
                 ;     849         //debugging program
                 ;     850         kirimDataSerial(0x11); //Debug log serial USB
00052a e1e1      	LDI  R30,LOW(17)
00052b 93ea      	ST   -Y,R30
00052c 940e 0d15 	CALL _kirimDataSerial
                 ;     851         kirimDataFlashBesarKePemrogram();
00052e 940e 0438 	CALL _kirimDataFlashBesarKePemrogram
                 ;     852     }
                 ;     853     else
000530 c010      	RJMP _0x75
                 _0x74:
                 ;     854     {
                 ;     855         //Kapasitas SRAM cukup untuk sekali tampung data flash (ukuran flash kecil)
                 ;     856         LED_BIRU_ON();
000531 9893      	CBI  0x12,3
                 ;     857         enterProgrammingMode();
000532 940e 0c65 	CALL _enterProgrammingMode
                 ;     858         ISPReadFlashMemory(flash_page_max);
000534 931a      	ST   -Y,R17
000535 930a      	ST   -Y,R16
000536 940e 0ac8 	CALL _ISPReadFlashMemory
                 ;     859         leaveProgrammingMode();
000538 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     860         LED_BIRU_OFF();
00053a 9a93      	SBI  0x12,3
                 ;     861         //debugging program
                 ;     862         kirimDataSerial(0x22); //Debug log serial USB
00053b e2e2      	LDI  R30,LOW(34)
00053c 93ea      	ST   -Y,R30
00053d 940e 0d15 	CALL _kirimDataSerial
                 ;     863         kirimDataKePemrogram();
00053f 940e 03ea 	CALL _kirimDataKePemrogram
                 ;     864     }
                 _0x75:
                 ;     865     SEI();
000541 9478      	sei
                 ;     866 }
000542 940e 0d59 	CALL __LOADLOCR4
000544 9624      	ADIW R28,4
000545 9508      	RET
                 ;     867 /************************************************************************************************************/
                 ;     868 // Fungsi Baca EEPROM, hasil pembacaan kirim ke pemrogram
                 ;     869 void bacaEEPROM(void)
                 ;     870 {
                 _bacaEEPROM:
                 ;     871     unsigned int ukuran_flash_max;
                 ;     872     unsigned int EEPROM_size_max;
                 ;     873 
                 ;     874     CLI();
000546 940e 0d52 	CALL __SAVELOCR4
                 ;	ukuran_flash_max -> R16,R17
                 ;	EEPROM_size_max -> R18,R19
000548 94f8      	cli
                 ;     875     //Baca EEPROM memory kemudian data disimpan dalam SRAM Eksternal
                 ;     876     ukuran_flash_max= bacaUkuranFlash();
000549 940e 04af 	CALL _bacaUkuranFlash
00054b 018f      	MOVW R16,R30
                 ;     877     EEPROM_size_max= (unsigned int)(ukuran_flash_max/16); //OK sudah bisa
00054c 01f8      	MOVW R30,R16
00054d 940e 0d30 	CALL __LSRW4
00054f 019f      	MOVW R18,R30
                 ;     878     LED_BIRU_ON();
000550 9893      	CBI  0x12,3
                 ;     879     enterProgrammingMode();
000551 940e 0c65 	CALL _enterProgrammingMode
                 ;     880     ISPReadEEPROM(EEPROM_size_max);
000553 933a      	ST   -Y,R19
000554 932a      	ST   -Y,R18
000555 940e 0992 	CALL _ISPReadEEPROM
                 ;     881     leaveProgrammingMode();
000557 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     882     LED_BIRU_OFF();
000559 9a93      	SBI  0x12,3
                 ;     883     SEI();
00055a 9478      	sei
                 ;     884 
                 ;     885     //Pengiriman data pembacaan EEPROM ke sisi pemrogram
                 ;     886     jml_paket= (unsigned int)(EEPROM_size_max/PANJANG_PAKET);
00055b 01d9      	MOVW R26,R18
00055c e8e0      	LDI  R30,LOW(128)
00055d e0f0      	LDI  R31,HIGH(128)
00055e 940e 0d39 	CALL __DIVW21U
000560 2ebe      	MOV  R11,R30
                 ;     887     kirimDataKePemrogram();
000561 940e 03ea 	CALL _kirimDataKePemrogram
                 ;     888 }
000563 940e 0d59 	CALL __LOADLOCR4
000565 9624      	ADIW R28,4
000566 9508      	RET
                 ;     889 /************************************************************************************************************/
                 ;     890 // Fungsi Baca Fuse Bits
                 ;     891 void bacaFuseBits(void)
                 ;     892 {
                 _bacaFuseBits:
                 ;     893     CLI();
000567 94f8      	cli
                 ;     894     LED_BIRU_ON();
000568 9893      	CBI  0x12,3
                 ;     895     /*** Set SCK dengan frekuensi rendah ***/
                 ;     896     inisialisasiSPILowSpeed();
000569 940e 0c54 	CALL _inisialisasiSPILowSpeed
                 ;     897     enterProgrammingMode();
00056b 940e 0c65 	CALL _enterProgrammingMode
                 ;     898     fuse_bits[0]= ISPReadLowFuseBits();
00056d 940e 0bd1 	CALL _ISPReadLowFuseBits
00056f 93e0 0283 	STS  _fuse_bits,R30
                 ;     899     fuse_bits[1]= ISPReadHighFuseBits();
000571 940e 0bfc 	CALL _ISPReadHighFuseBits
000573 93e0 0284 	__PUTB1MN _fuse_bits,1
                 ;     900     fuse_bits[2]= ISPReadExtendedFuseBits();
000575 940e 0c27 	CALL _ISPReadExtendedFuseBits
000577 93e0 0285 	__PUTB1MN _fuse_bits,2
                 ;     901     leaveProgrammingMode();
000579 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     902     LED_BIRU_OFF();
00057b 9a93      	SBI  0x12,3
                 ;     903     SEI();
00057c 9478      	sei
                 ;     904 
                 ;     905     // Pengiriman data fuse bits sesuai dengan format protokol dengan pemrogram
                 ;     906     tulisExtSRAM(0, 0xFF);           //ID Fuse Bits (Diabaikan Pemrogram)
00057d e0e0      	LDI  R30,LOW(0)
00057e e0f0      	LDI  R31,HIGH(0)
00057f 93fa      	ST   -Y,R31
000580 93ea      	ST   -Y,R30
000581 efef      	LDI  R30,LOW(255)
000582 93ea      	ST   -Y,R30
000583 940e 09f8 	CALL _tulisExtSRAM
                 ;     907     tulisExtSRAM(1, '|');
000585 e0e1      	LDI  R30,LOW(1)
000586 e0f0      	LDI  R31,HIGH(1)
000587 93fa      	ST   -Y,R31
000588 93ea      	ST   -Y,R30
000589 e7ec      	LDI  R30,LOW(124)
00058a 93ea      	ST   -Y,R30
00058b 940e 09f8 	CALL _tulisExtSRAM
                 ;     908     tulisExtSRAM(2, fuse_bits[0]);   //Low Fuse
00058d e0e2      	LDI  R30,LOW(2)
00058e e0f0      	LDI  R31,HIGH(2)
00058f 93fa      	ST   -Y,R31
000590 93ea      	ST   -Y,R30
000591 91e0 0283 	LDS  R30,_fuse_bits
000593 93ea      	ST   -Y,R30
000594 940e 09f8 	CALL _tulisExtSRAM
                 ;     909     tulisExtSRAM(3, '|');
000596 e0e3      	LDI  R30,LOW(3)
000597 e0f0      	LDI  R31,HIGH(3)
000598 93fa      	ST   -Y,R31
000599 93ea      	ST   -Y,R30
00059a e7ec      	LDI  R30,LOW(124)
00059b 93ea      	ST   -Y,R30
00059c 940e 09f8 	CALL _tulisExtSRAM
                 ;     910     tulisExtSRAM(4, fuse_bits[1]);   //High Fuse
00059e e0e4      	LDI  R30,LOW(4)
00059f e0f0      	LDI  R31,HIGH(4)
0005a0 93fa      	ST   -Y,R31
0005a1 93ea      	ST   -Y,R30
0005a2 91e0 0284 	__GETB1MN _fuse_bits,1
0005a4 93ea      	ST   -Y,R30
0005a5 940e 09f8 	CALL _tulisExtSRAM
                 ;     911     tulisExtSRAM(5, '|');
0005a7 e0e5      	LDI  R30,LOW(5)
0005a8 e0f0      	LDI  R31,HIGH(5)
0005a9 93fa      	ST   -Y,R31
0005aa 93ea      	ST   -Y,R30
0005ab e7ec      	LDI  R30,LOW(124)
0005ac 93ea      	ST   -Y,R30
0005ad 940e 09f8 	CALL _tulisExtSRAM
                 ;     912     tulisExtSRAM(6, fuse_bits[2]);   //Extended Fuse
0005af e0e6      	LDI  R30,LOW(6)
0005b0 e0f0      	LDI  R31,HIGH(6)
0005b1 93fa      	ST   -Y,R31
0005b2 93ea      	ST   -Y,R30
0005b3 91e0 0285 	__GETB1MN _fuse_bits,2
0005b5 93ea      	ST   -Y,R30
0005b6 940e 09f8 	CALL _tulisExtSRAM
                 ;     913 
                 ;     914     //Pengiriman data pembacaan flash ke sisi pemrogram
                 ;     915     jml_paket= 1;
0005b8 e0e1      	LDI  R30,LOW(1)
0005b9 2ebe      	MOV  R11,R30
                 ;     916     kirimDataKePemrogram();
0005ba 940e 03ea 	CALL _kirimDataKePemrogram
                 ;     917 }
0005bc 9508      	RET
                 ;     918 /************************************************************************************************************/
                 ;     919 // Fungsi Tulis Fuse Bits
                 ;     920 void tulisFuseBits(void)
                 ;     921 {
                 _tulisFuseBits:
0005bd 92ff      	PUSH R15
                 ;     922     unsigned char data_fuse[7];
                 ;     923     unsigned char informasi_fuse;
                 ;     924     unsigned char i;
                 ;     925     bit status_data_fuse;
                 ;     926     bit status_low_fuse;
                 ;     927     bit status_high_fuse;
                 ;     928     bit status_extended_fuse;
                 ;     929 
                 ;     930     CLI();
0005be 9727      	SBIW R28,7
0005bf 931a      	ST   -Y,R17
0005c0 930a      	ST   -Y,R16
                 ;	data_fuse -> Y+2
                 ;	informasi_fuse -> R17
                 ;	i -> R16
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005c1 94f8      	cli
                 ;     931     status_data_fuse= 0;
0005c2 94e8      	CLT
0005c3 f8f0      	BLD  R15,0
                 ;     932     status_low_fuse= 0;
0005c4 f8f1      	BLD  R15,1
                 ;     933     status_high_fuse= 0;
0005c5 f8f2      	BLD  R15,2
                 ;     934     status_extended_fuse= 0;
0005c6 f8f3      	BLD  R15,3
                 ;     935     for(i=0;i<7;i++) data_fuse[i]= bacaExtSRAM(i);
0005c7 e000      	LDI  R16,LOW(0)
                 _0x77:
0005c8 3007      	CPI  R16,7
0005c9 f490      	BRSH _0x78
0005ca 2fe0      	MOV  R30,R16
0005cb e0f0      	LDI  R31,0
0005cc 010f      	MOVW R0,R30
0005cd 01de      	MOVW R26,R28
0005ce 9612      	ADIW R26,2
0005cf 0fea      	ADD  R30,R26
0005d0 1ffb      	ADC  R31,R27
0005d1 93ff      	PUSH R31
0005d2 93ef      	PUSH R30
0005d3 921a      	ST   -Y,R1
0005d4 920a      	ST   -Y,R0
0005d5 940e 09e6 	CALL _bacaExtSRAM
0005d7 91af      	POP  R26
0005d8 91bf      	POP  R27
0005d9 93ec      	ST   X,R30
                 ;     936     informasi_fuse= data_fuse[0];
0005da 5f0f      	SUBI R16,-1
0005db cfec      	RJMP _0x77
                 _0x78:
0005dc 811a      	LDD  R17,Y+2
                 ;     937     switch(informasi_fuse)
0005dd 2fe1      	MOV  R30,R17
                 ;     938     {
                 ;     939         case 0x00:
                 ;	data_fuse -> Y+2
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005de 30e0      	CPI  R30,0
0005df f419      	BRNE _0x7C
                 ;     940              {
                 ;     941                 status_low_fuse= 1;
                 ;	data_fuse -> Y+2
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005e0 9468      	SET
0005e1 f8f1      	BLD  R15,1
                 ;     942                 status_data_fuse= 1;
0005e2 c00e      	RJMP _0x16E
                 ;     943              }
                 ;     944              break;
                 ;     945         case 0x01:
                 _0x7C:
0005e3 30e1      	CPI  R30,LOW(0x1)
0005e4 f421      	BRNE _0x7D
                 ;     946              {
                 ;     947                 status_low_fuse= 1;
                 ;	data_fuse -> Y+2
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005e5 9468      	SET
0005e6 f8f1      	BLD  R15,1
                 ;     948                 status_high_fuse= 1;
0005e7 f8f2      	BLD  R15,2
                 ;     949                 status_data_fuse= 1;
0005e8 c008      	RJMP _0x16E
                 ;     950              }
                 ;     951              break;
                 ;     952         case 0x02:
                 _0x7D:
0005e9 30e2      	CPI  R30,LOW(0x2)
0005ea f429      	BRNE _0x7F
                 ;     953              {
                 ;     954                 status_low_fuse= 1;
                 ;	data_fuse -> Y+2
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005eb 9468      	SET
0005ec f8f1      	BLD  R15,1
                 ;     955                 status_high_fuse= 1;
0005ed f8f2      	BLD  R15,2
                 ;     956                 status_extended_fuse= 1;
0005ee f8f3      	BLD  R15,3
                 ;     957                 status_data_fuse= 1;
0005ef c001      	RJMP _0x16E
                 ;     958              }
                 ;     959              break;
                 ;     960         default : status_data_fuse= 0;
                 _0x7F:
0005f0 94e8      	CLT
                 _0x16E:
0005f1 f8f0      	BLD  R15,0
                 ;     961     }
                 ;     962 
                 ;     963     if(status_data_fuse)
0005f2 fef0      	SBRS R15,0
0005f3 c01a      	RJMP _0x80
                 ;     964     {
                 ;     965         LED_BIRU_ON();
                 ;	data_fuse -> Y+2
                 ;	status_data_fuse -> R15.0
                 ;	status_low_fuse -> R15.1
                 ;	status_high_fuse -> R15.2
                 ;	status_extended_fuse -> R15.3
0005f4 9893      	CBI  0x12,3
                 ;     966         /*** Set SCK dengan frekuensi rendah ***/
                 ;     967         inisialisasiSPILowSpeed();
0005f5 940e 0c54 	CALL _inisialisasiSPILowSpeed
                 ;     968         enterProgrammingMode();
0005f7 940e 0c65 	CALL _enterProgrammingMode
                 ;     969         if(status_low_fuse) ISPWriteLowFuseBits(data_fuse[2]);
0005f9 fef1      	SBRS R15,1
0005fa c004      	RJMP _0x81
0005fb 81ec      	LDD  R30,Y+4
0005fc 93ea      	ST   -Y,R30
0005fd 940e 0be5 	CALL _ISPWriteLowFuseBits
                 ;     970         if(status_high_fuse) ISPWriteHighFuseBits(data_fuse[4]);
                 _0x81:
0005ff fef2      	SBRS R15,2
000600 c004      	RJMP _0x82
000601 81ee      	LDD  R30,Y+6
000602 93ea      	ST   -Y,R30
000603 940e 0c10 	CALL _ISPWriteHighFuseBits
                 ;     971         if(status_extended_fuse) ISPWriteExtendedBits(data_fuse[6]);
                 _0x82:
000605 fef3      	SBRS R15,3
000606 c004      	RJMP _0x83
000607 85e8      	LDD  R30,Y+8
000608 93ea      	ST   -Y,R30
000609 940e 0c3c 	CALL _ISPWriteExtendedBits
                 ;     972         leaveProgrammingMode();
                 _0x83:
00060b 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     973         LED_BIRU_OFF();
00060d 9a93      	SBI  0x12,3
                 ;     974     }
                 ;     975     SEI();
                 _0x80:
00060e 9478      	sei
                 ;     976 }
00060f 8119      	LDD  R17,Y+1
000610 8108      	LDD  R16,Y+0
000611 9629      	ADIW R28,9
000612 90ff      	POP  R15
000613 9508      	RET
                 ;     977 /************************************************************************************************************/
                 ;     978 // Fungsi Hapus Chip
                 ;     979 void hapusMemoriDevais(void)
                 ;     980 {
                 _hapusMemoriDevais:
                 ;     981     CLI();
000614 94f8      	cli
                 ;     982     enterProgrammingMode();
000615 940e 0c65 	CALL _enterProgrammingMode
                 ;     983     chipErase();
000617 940e 0c87 	CALL _chipErase
                 ;     984     leaveProgrammingMode();
000619 940e 0c9e 	CALL _leaveProgrammingMode
                 ;     985     SEI();
00061b 9478      	sei
                 ;     986 }
00061c 9508      	RET
                 ;     987 /************************************************************************************************************/
                 ;     988 // Fungsi Menu ISP (Baca dan Tulis Memori)
                 ;     989 void menuISP(unsigned char menu_pilihan)
                 ;     990 {
                 _menuISP:
                 ;     991 	status_paket= TDK_PERLU_KONFIRMASI;
                 ;	menu_pilihan -> Y+0
00061d 24aa      	CLR  R10
                 ;     992 	switch(menu_pilihan)
00061e 81e8      	LD   R30,Y
                 ;     993 	{
                 ;     994 		case BACA_FLASH_MEMORY:
00061f 36e6      	CPI  R30,LOW(0x66)
000620 f419      	BRNE _0x87
                 ;     995 			bacaMemoriFlash();
000621 940e 0512 	CALL _bacaMemoriFlash
                 ;     996 			break;
000623 c01d      	RJMP _0x86
                 ;     997 		case TULIS_FLASH_MEMORY:
                 _0x87:
000624 34e6      	CPI  R30,LOW(0x46)
000625 f419      	BRNE _0x88
                 ;     998 			tulisMemoriFlash();
000626 940e 04df 	CALL _tulisMemoriFlash
                 ;     999 			break;
000628 c018      	RJMP _0x86
                 ;    1000 		case BACA_EEPROM:
                 _0x88:
000629 36e5      	CPI  R30,LOW(0x65)
00062a f419      	BRNE _0x89
                 ;    1001 			bacaEEPROM();
00062b 940e 0546 	CALL _bacaEEPROM
                 ;    1002 			break;
00062d c013      	RJMP _0x86
                 ;    1003 		case TULIS_EEPROM:
                 _0x89:
00062e 34e5      	CPI  R30,LOW(0x45)
00062f f419      	BRNE _0x8A
                 ;    1004 			tulisEEPROM();
000630 940e 04fb 	CALL _tulisEEPROM
                 ;    1005 			break;
000632 c00e      	RJMP _0x86
                 ;    1006 		case BACA_FUSE_BITS:
                 _0x8A:
000633 36e2      	CPI  R30,LOW(0x62)
000634 f419      	BRNE _0x8B
                 ;    1007 		     bacaFuseBits();
000635 940e 0567 	CALL _bacaFuseBits
                 ;    1008 		     break;
000637 c009      	RJMP _0x86
                 ;    1009 		case TULIS_FUSE_BITS:
                 _0x8B:
000638 34e2      	CPI  R30,LOW(0x42)
000639 f419      	BRNE _0x8C
                 ;    1010 		     tulisFuseBits();
00063a 940e 05bd 	CALL _tulisFuseBits
                 ;    1011 		     break;
00063c c004      	RJMP _0x86
                 ;    1012 		case HAPUS_CHIP:
                 _0x8C:
00063d 34e8      	CPI  R30,LOW(0x48)
00063e f411      	BRNE _0x86
                 ;    1013 		     hapusMemoriDevais();
00063f 940e 0614 	CALL _hapusMemoriDevais
                 ;    1014 		     break;
                 ;    1015 	}
                 _0x86:
                 ;    1016 }
000641 9621      	ADIW R28,1
000642 9508      	RET
                 ;    1017 /************************************************************************************************************/
                 ;    1018 void olahPaketPerintah(void)
                 ;    1019 {
                 _olahPaketPerintah:
000643 92ff      	PUSH R15
                 ;    1020     bit selesai_terima_perintah;
                 ;    1021     unsigned char data;
                 ;    1022     unsigned char buffer_paket_data[11];   // Ukuran buffer adalah [HEADER(7) + Data(kode devais/jumlah paket) + CRC(2)]
                 ;    1023 
                 ;    1024     while(!selesai_terima_perintah)
000644 972b      	SBIW R28,11
000645 931a      	ST   -Y,R17
                 ;	selesai_terima_perintah -> R15.0
                 ;	data -> R17
                 ;	buffer_paket_data -> Y+1
                 _0x8E:
000646 fcf0      	SBRC R15,0
000647 c0be      	RJMP _0x90
                 ;    1025     {
                 ;    1026         data= bacaDataSerialIR();
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
000648 940e 00ac 	CALL _bacaDataSerialIR
00064a 2f1e      	MOV  R17,R30
                 ;    1027         //kirimDataSerial(data); //Debug log serial USB
                 ;    1028         buffer_paket_data[indek_data++]= data;
00064b 2de8      	MOV  R30,R8
00064c 9483      	INC  R8
00064d e0f0      	LDI  R31,0
00064e 01de      	MOVW R26,R28
00064f 9611      	ADIW R26,1
000650 0fea      	ADD  R30,R26
000651 1ffb      	ADC  R31,R27
000652 8310      	ST   Z,R17
                 ;    1029 
                 ;    1030         if((indek_data == 1 && data != '<') || (indek_data == 2 && data != 0x45) || (indek_data == 3 && data != '>'))
000653 e0e1      	LDI  R30,LOW(1)
000654 15e8      	CP   R30,R8
000655 f411      	BRNE _0x92
000656 331c      	CPI  R17,60
000657 f459      	BRNE _0x94
                 _0x92:
000658 e0e2      	LDI  R30,LOW(2)
000659 15e8      	CP   R30,R8
00065a f411      	BRNE _0x95
00065b 3415      	CPI  R17,69
00065c f431      	BRNE _0x94
                 _0x95:
00065d e0e3      	LDI  R30,LOW(3)
00065e 15e8      	CP   R30,R8
00065f f411      	BRNE _0x97
000660 331e      	CPI  R17,62
000661 f409      	BRNE _0x94
                 _0x97:
000662 c001      	RJMP _0x91
                 _0x94:
                 ;    1031             indek_data= 0;
000663 c0a0      	RJMP _0x16F
                 ;    1032         else if(indek_data == 5 && data != '|')
                 _0x91:
000664 e0e5      	LDI  R30,LOW(5)
000665 15e8      	CP   R30,R8
000666 f411      	BRNE _0x9C
000667 371c      	CPI  R17,124
000668 f409      	BRNE _0x9D
                 _0x9C:
000669 c001      	RJMP _0x9B
                 _0x9D:
                 ;    1033         	indek_data= 0;
00066a c099      	RJMP _0x16F
                 ;    1034         else if(indek_data == 1)  // Tanda  paket mulai valid, set nilai timeout
                 _0x9B:
00066b e0e1      	LDI  R30,LOW(1)
00066c 15e8      	CP   R30,R8
00066d f439      	BRNE _0x9F
                 ;    1035             time1= USART_TIMEOUT;
00066e e4e4      	LDI  R30,LOW(68)
00066f e0f0      	LDI  R31,HIGH(68)
000670 93e0 0298 	STS  _time1,R30
000672 93f0 0299 	STS  _time1+1,R31
                 ;    1036         else if(indek_data == 11)  // Deteksi awal kiriman paket
000674 c090      	RJMP _0xA0
                 _0x9F:
000675 e0eb      	LDI  R30,LOW(11)
000676 15e8      	CP   R30,R8
000677 f011      	BREQ PC+3
000678 940c 0705 	JMP _0xA1
                 ;    1037         {
                 ;    1038               CRC= hitungCRC16(buffer_paket_data, 9);
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
00067a 01fe      	MOVW R30,R28
00067b 9631      	ADIW R30,1
00067c 93fa      	ST   -Y,R31
00067d 93ea      	ST   -Y,R30
00067e e0e9      	LDI  R30,LOW(9)
00067f 93ea      	ST   -Y,R30
000680 d2b2      	RCALL _hitungCRC16
000681 93e0 0290 	STS  _CRC,R30
000683 93f0 0291 	STS  _CRC+1,R31
                 ;    1039               if(((unsigned char) CRC == buffer_paket_data[9]) && ((unsigned char) (CRC>>8) == buffer_paket_data[10]))
000685 85ea      	LDD  R30,Y+10
000686 91a0 0290 	LDS  R26,_CRC
000688 17ea      	CP   R30,R26
000689 f439      	BRNE _0xA3
00068a 91e0 0291 	LDS  R30,_CRC+1
00068c 70f0      	ANDI R31,HIGH(0x0)
00068d 2fae      	MOV  R26,R30
00068e 85eb      	LDD  R30,Y+11
00068f 17ea      	CP   R30,R26
000690 f009      	BREQ _0xA4
                 _0xA3:
000691 c072      	RJMP _0xA2
                 _0xA4:
                 ;    1040               {
                 ;    1041                   instruksi_pemrogram= buffer_paket_data[3];
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
000692 80dc      	LDD  R13,Y+4
                 ;    1042                   //Operasi Tulis dan Hapus
                 ;    1043                   if(instruksi_pemrogram==0x46 || instruksi_pemrogram==0x45 || instruksi_pemrogram==0x42 || instruksi_pemrogram==0x48)
000693 e4e6      	LDI  R30,LOW(70)
000694 15ed      	CP   R30,R13
000695 f049      	BREQ _0xA6
000696 e4e5      	LDI  R30,LOW(69)
000697 15ed      	CP   R30,R13
000698 f031      	BREQ _0xA6
000699 e4e2      	LDI  R30,LOW(66)
00069a 15ed      	CP   R30,R13
00069b f019      	BREQ _0xA6
00069c e4e8      	LDI  R30,LOW(72)
00069d 15ed      	CP   R30,R13
00069e f551      	BRNE _0xA5
                 _0xA6:
                 ;    1044                   {
                 ;    1045                       LED_BIRU_OFF();
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
00069f 9a93      	SBI  0x12,3
                 ;    1046                       LED_MERAH_ON();
0006a0 9838      	CBI  0x7,0
                 ;    1047 
                 ;    1048                   	  if(instruksi_pemrogram!=0x48)    // Bukan operasi hapus
0006a1 e4e8      	LDI  R30,LOW(72)
0006a2 15ed      	CP   R30,R13
0006a3 f0e1      	BREQ _0xA8
                 ;    1049                       {
                 ;    1050                           jml_paket= buffer_paket_data[7];
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
0006a4 84b8      	LDD  R11,Y+8
                 ;    1051                           status_paket= KONFIRMASI_OK;
0006a5 e0e1      	LDI  R30,LOW(1)
0006a6 2eae      	MOV  R10,R30
                 ;    1052                       	  kirimKonfirmasiOK();
0006a7 940e 0306 	CALL _kirimKonfirmasiOK
                 ;    1053                           ID_paket= 1;
0006a9 e0e1      	LDI  R30,LOW(1)
0006aa 2e5e      	MOV  R5,R30
                 ;    1054                           status_perintah_tulis= 1;
0006ab 9468      	SET
0006ac f830      	BLD  R3,0
                 ;    1055                           selesai_terima_perintah= 1;  // Status perlu simpan data yang akan ditulis
0006ad f8f0      	BLD  R15,0
                 ;    1056                           jml_byte_data= (unsigned int) jml_paket*PANJANG_PAKET;
0006ae 2dab      	MOV  R26,R11
0006af e8e0      	LDI  R30,LOW(128)
0006b0 9fea      	MUL  R30,R26
0006b1 01f0      	MOVW R30,R0
0006b2 93e0 0294 	STS  _jml_byte_data,R30
0006b4 93f0 0295 	STS  _jml_byte_data+1,R31
                 ;    1057                           if(jml_byte_data>KAPASITAS_SRAM) status_tulis_bertahap= 1; //Deteksi data ukuran besar
0006b6 91a0 0294 	LDS  R26,_jml_byte_data
0006b8 91b0 0295 	LDS  R27,_jml_byte_data+1
0006ba 30a1      	CPI  R26,LOW(0x2001)
0006bb e2e0      	LDI  R30,HIGH(0x2001)
0006bc 07be      	CPC  R27,R30
0006bd f008      	BRLO _0xA9
0006be f831      	BLD  R3,1
                 ;    1058                       }
                 _0xA9:
                 ;    1059                       else                             // Operasi hapus tidak perlu data transmisi lagi
0006bf c008      	RJMP _0xAA
                 _0xA8:
                 ;    1060         			  {
                 ;    1061                           status_paket= KONFIRMASI_OK;
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
0006c0 e0e1      	LDI  R30,LOW(1)
0006c1 2eae      	MOV  R10,R30
                 ;    1062                           kirimKonfirmasiOK();
0006c2 940e 0306 	CALL _kirimKonfirmasiOK
                 ;    1063                           selesai_terima_perintah= 1;
0006c4 9468      	SET
0006c5 f8f0      	BLD  R15,0
                 ;    1064                           status_perintah_tulis= 0;
0006c6 94e8      	CLT
0006c7 f830      	BLD  R3,0
                 ;    1065         			  }
                 _0xAA:
                 ;    1066     			 }
                 ;    1067 
                 ;    1068     			 // Operasi Baca
                 ;    1069     			 else if (instruksi_pemrogram==0x66 || instruksi_pemrogram==0x65 || instruksi_pemrogram==0x62)
0006c8 c03b      	RJMP _0xAB
                 _0xA5:
0006c9 e6e6      	LDI  R30,LOW(102)
0006ca 15ed      	CP   R30,R13
0006cb f031      	BREQ _0xAD
0006cc e6e5      	LDI  R30,LOW(101)
0006cd 15ed      	CP   R30,R13
0006ce f019      	BREQ _0xAD
0006cf e6e2      	LDI  R30,LOW(98)
0006d0 15ed      	CP   R30,R13
0006d1 f591      	BRNE _0xAC
                 _0xAD:
                 ;    1070     			 {
                 ;    1071                      LED_BIRU_OFF();
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
0006d2 9a93      	SBI  0x12,3
                 ;    1072                      LED_MERAH_ON();
0006d3 9838      	CBI  0x7,0
                 ;    1073 
                 ;    1074                      kode_devais[0]= buffer_paket_data[5];
0006d4 81ee      	LDD  R30,Y+6
0006d5 93e0 0289 	STS  _kode_devais,R30
                 ;    1075                      kode_devais[1]= buffer_paket_data[6];
0006d7 81ef      	LDD  R30,Y+7
0006d8 93e0 028a 	__PUTB1MN _kode_devais,1
                 ;    1076                      kode_devais[2]= buffer_paket_data[7];
0006da 85e8      	LDD  R30,Y+8
0006db 93e0 028b 	__PUTB1MN _kode_devais,2
                 ;    1077                      ID_paket= 1;
0006dd e0e1      	LDI  R30,LOW(1)
0006de 2e5e      	MOV  R5,R30
                 ;    1078                      selesai_terima_perintah= 1;
0006df 9468      	SET
0006e0 f8f0      	BLD  R15,0
                 ;    1079 
                 ;    1080                      if(kode_devais[0]==devais_signature[0] && kode_devais[1]==devais_signature[1] && kode_devais[2]==devais_signature[2])
0006e1 91e0 0286 	LDS  R30,_devais_signature
0006e3 91a0 0289 	LDS  R26,_kode_devais
0006e5 17ea      	CP   R30,R26
0006e6 f461      	BRNE _0xB0
0006e7 91a0 028a 	__GETB2MN _kode_devais,1
0006e9 91e0 0287 	__GETB1MN _devais_signature,1
0006eb 17ea      	CP   R30,R26
0006ec f431      	BRNE _0xB0
0006ed 91a0 028b 	__GETB2MN _kode_devais,2
0006ef 91e0 0288 	__GETB1MN _devais_signature,2
0006f1 17ea      	CP   R30,R26
0006f2 f009      	BREQ _0xB1
                 _0xB0:
0006f3 c008      	RJMP _0xAF
                 _0xB1:
                 ;    1081                      {
                 ;    1082                          ID_perintah= instruksi_pemrogram;
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
0006f4 2c6d      	MOV  R6,R13
                 ;    1083                          status_paket= KONFIRMASI_OK;
0006f5 e0e1      	LDI  R30,LOW(1)
0006f6 2eae      	MOV  R10,R30
                 ;    1084                          kirimKonfirmasiOK();
0006f7 940e 0306 	CALL _kirimKonfirmasiOK
                 ;    1085                          status_perintah_tulis= 0;
0006f9 94e8      	CLT
0006fa f830      	BLD  R3,0
                 ;    1086                      }
                 ;    1087                      else
0006fb c008      	RJMP _0xB2
                 _0xAF:
                 ;    1088                      {
                 ;    1089                          selesai_terima_perintah= 0;
                 ;	selesai_terima_perintah -> R15.0
                 ;	buffer_paket_data -> Y+1
0006fc 94e8      	CLT
0006fd f8f0      	BLD  R15,0
                 ;    1090                          status_paket= KONFIRMASI_GAGAL;
0006fe e0e2      	LDI  R30,LOW(2)
0006ff 2eae      	MOV  R10,R30
                 ;    1091                          kirimKonfirmasiGAGAL();
000700 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1092                          inisialisasi();
000702 940e 03ad 	CALL _inisialisasi
                 ;    1093                      }
                 _0xB2:
                 ;    1094                 }
                 ;    1095 			}
                 _0xAC:
                 _0xAB:
                 ;    1096 			indek_data= 0;
                 _0xA2:
                 _0x16F:
000704 2488      	CLR  R8
                 ;    1097 		}
                 ;    1098     };
                 _0xA1:
                 _0xA0:
000705 cf40      	RJMP _0x8E
                 _0x90:
                 ;    1099 }
000706 8118      	LDD  R17,Y+0
000707 c1b4      	RJMP _0x168
                 ;    1100 /************************************************************************************************************/
                 ;    1101 void olahPaketData(void)
                 ;    1102 {
                 _olahPaketData:
000708 92ff      	PUSH R15
                 ;    1103     bit selesai_terima_data;
                 ;    1104     unsigned char data;
                 ;    1105     unsigned char i;
                 ;    1106     unsigned char buffer_paket_data[PANJANG_PAKET+9];   //Ukuran buffer adalah [HEADER(7)+ DATA(PANJANG_PAKET)+CRC(2)]
                 ;    1107     unsigned int jml_data_page;                         //Jumlah data page yang akan ditulis ke flash
                 ;    1108     unsigned char jml_paket_sram_tertulis;              //Counter paket sram yang tertulis pada flash
                 ;    1109 
                 ;    1110     if(!status_tulis_bertahap) //Data yang di tulis antara 1 sampai dengan 8 kbyte (KAPASITAS_SRAM)
000709 97ef      	SBIW R28,63
00070a 97ef      	SBIW R28,63
00070b 972b      	SBIW R28,11
00070c 940e 0d50 	CALL __SAVELOCR6
                 ;	selesai_terima_data -> R15.0
                 ;	data -> R17
                 ;	i -> R16
                 ;	buffer_paket_data -> Y+6
                 ;	jml_data_page -> R18,R19
                 ;	jml_paket_sram_tertulis -> R21
00070e fc31      	SBRC R3,1
00070f c08a      	RJMP _0xB3
                 ;    1111     {
                 ;    1112         while(!selesai_terima_data)
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
                 _0xB4:
000710 fcf0      	SBRC R15,0
000711 c087      	RJMP _0xB6
                 ;    1113         {
                 ;    1114             data= bacaDataSerialIR();
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000712 940e 00ac 	CALL _bacaDataSerialIR
000714 2f1e      	MOV  R17,R30
                 ;    1115             //kirimDataSerial(data); //Debug log serial USB
                 ;    1116             buffer_paket_data[indek_data++]= data;
000715 2de8      	MOV  R30,R8
000716 9483      	INC  R8
000717 e0f0      	LDI  R31,0
000718 01de      	MOVW R26,R28
000719 9616      	ADIW R26,6
00071a 0fea      	ADD  R30,R26
00071b 1ffb      	ADC  R31,R27
00071c 8310      	ST   Z,R17
                 ;    1117 
                 ;    1118             if((indek_data == 1 && data != '<') || (indek_data == 2 && data != 0x45) || (indek_data == 3 && data != '>'))
00071d e0e1      	LDI  R30,LOW(1)
00071e 15e8      	CP   R30,R8
00071f f411      	BRNE _0xB8
000720 331c      	CPI  R17,60
000721 f459      	BRNE _0xBA
                 _0xB8:
000722 e0e2      	LDI  R30,LOW(2)
000723 15e8      	CP   R30,R8
000724 f411      	BRNE _0xBB
000725 3415      	CPI  R17,69
000726 f431      	BRNE _0xBA
                 _0xBB:
000727 e0e3      	LDI  R30,LOW(3)
000728 15e8      	CP   R30,R8
000729 f411      	BRNE _0xBD
00072a 331e      	CPI  R17,62
00072b f409      	BRNE _0xBA
                 _0xBD:
00072c c001      	RJMP _0xB7
                 _0xBA:
                 ;    1119                 indek_data= 0;
00072d c069      	RJMP _0x170
                 ;    1120             else if(indek_data == 5 && data != '|')
                 _0xB7:
00072e e0e5      	LDI  R30,LOW(5)
00072f 15e8      	CP   R30,R8
000730 f411      	BRNE _0xC2
000731 371c      	CPI  R17,124
000732 f409      	BRNE _0xC3
                 _0xC2:
000733 c001      	RJMP _0xC1
                 _0xC3:
                 ;    1121             	indek_data= 0;
000734 c062      	RJMP _0x170
                 ;    1122             else if(indek_data == 1)  // Tanda  paket mulai valid, set nilai timeout
                 _0xC1:
000735 e0e1      	LDI  R30,LOW(1)
000736 15e8      	CP   R30,R8
000737 f439      	BRNE _0xC5
                 ;    1123                 time1= USART_TIMEOUT;
000738 e4e4      	LDI  R30,LOW(68)
000739 e0f0      	LDI  R31,HIGH(68)
00073a 93e0 0298 	STS  _time1,R30
00073c 93f0 0299 	STS  _time1+1,R31
                 ;    1124             else if((indek_data == PANJANG_PAKET+9) && ID_paket <= jml_paket) //Penerimaan Data
00073e c059      	RJMP _0xC6
                 _0xC5:
00073f e8e9      	LDI  R30,LOW(137)
000740 15e8      	CP   R30,R8
000741 f411      	BRNE _0xC8
000742 14b5      	CP   R11,R5
000743 f408      	BRSH _0xC9
                 _0xC8:
000744 c053      	RJMP _0xC7
                 _0xC9:
                 ;    1125     		{
                 ;    1126     			CRC= hitungCRC16(buffer_paket_data, PANJANG_PAKET+7);
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000745 01fe      	MOVW R30,R28
000746 9636      	ADIW R30,6
000747 93fa      	ST   -Y,R31
000748 93ea      	ST   -Y,R30
000749 e8e7      	LDI  R30,LOW(135)
00074a 93ea      	ST   -Y,R30
00074b d1e7      	RCALL _hitungCRC16
00074c 93e0 0290 	STS  _CRC,R30
00074e 93f0 0291 	STS  _CRC+1,R31
                 ;    1127 
                 ;    1128     			if(((unsigned char) CRC == buffer_paket_data[PANJANG_PAKET+7]) && ((unsigned char) (CRC>>8) == buffer_paket_data[PANJANG_PAKET+8]))
000750 01fe
000751 57e3
000752 4fff
000753 81e0      	__GETB1SX 141
000754 91a0 0290 	LDS  R26,_CRC
000756 17ea      	CP   R30,R26
000757 f451      	BRNE _0xCB
000758 91e0 0291 	LDS  R30,_CRC+1
00075a 70f0      	ANDI R31,HIGH(0x0)
00075b 2fae      	MOV  R26,R30
00075c 01fe
00075d 57e2
00075e 4fff
00075f 81e0      	__GETB1SX 142
000760 17ea      	CP   R30,R26
000761 f009      	BREQ _0xCC
                 _0xCB:
000762 c030      	RJMP _0xCA
                 _0xCC:
                 ;    1129     			{
                 ;    1130     				if(ID_paket == buffer_paket_data[5])
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000763 85eb      	LDD  R30,Y+11
000764 15e5      	CP   R30,R5
000765 f541      	BRNE _0xCD
                 ;    1131     				{
                 ;    1132     					ID_paket_OK= ID_paket;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000766 2c75      	MOV  R7,R5
                 ;    1133     					status_paket= KONFIRMASI_PAKET_OK;
000767 e0e3      	LDI  R30,LOW(3)
000768 2eae      	MOV  R10,R30
                 ;    1134     					//Tampung data yang diterima ke Eksternal SRAM mulai dari indek ke-7
                 ;    1135     					for(i= 7; i<(PANJANG_PAKET+7); i++)
000769 e007      	LDI  R16,LOW(7)
                 _0xCF:
00076a 3807      	CPI  R16,135
00076b f4c0      	BRSH _0xD0
                 ;    1136     						tulisExtSRAM(idxBufExtSRAM++, buffer_paket_data[i]);
00076c 91e0 0292 	LDS  R30,_idxBufExtSRAM
00076e 91f0 0293 	LDS  R31,_idxBufExtSRAM+1
000770 9631      	ADIW R30,1
000771 93e0 0292 	STS  _idxBufExtSRAM,R30
000773 93f0 0293 	STS  _idxBufExtSRAM+1,R31
000775 9731      	SBIW R30,1
000776 93fa      	ST   -Y,R31
000777 93ea      	ST   -Y,R30
000778 2fe0      	MOV  R30,R16
000779 e0f0      	LDI  R31,0
00077a 01de      	MOVW R26,R28
00077b 9618      	ADIW R26,8
00077c 0fae      	ADD  R26,R30
00077d 1fbf      	ADC  R27,R31
00077e 91ec      	LD   R30,X
00077f 93ea      	ST   -Y,R30
000780 940e 09f8 	CALL _tulisExtSRAM
                 ;    1137 
                 ;    1138     					ID_paket++;
000782 5f0f      	SUBI R16,-1
000783 cfe6      	RJMP _0xCF
                 _0xD0:
000784 9453      	INC  R5
                 ;    1139     					kirimKonfirmasiPaketOK();
000785 940e 02dc 	CALL _kirimKonfirmasiPaketOK
                 ;    1140     					if(ID_paket == (jml_paket+1))
000787 2deb      	MOV  R30,R11
000788 5fef      	SUBI R30,-LOW(1)
000789 15e5      	CP   R30,R5
00078a f411      	BRNE _0xD1
                 ;    1141     						selesai_terima_data= 1;
00078b 9468      	SET
00078c f8f0      	BLD  R15,0
                 ;    1142     				}
                 _0xD1:
                 ;    1143     				else
00078d c004      	RJMP _0xD2
                 _0xCD:
                 ;    1144     				{
                 ;    1145     					status_paket= KONFIRMASI_GAGAL;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
00078e e0e2      	LDI  R30,LOW(2)
00078f 2eae      	MOV  R10,R30
                 ;    1146     					kirimKonfirmasiGAGAL();
000790 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1147     				}
                 _0xD2:
                 ;    1148     			}
                 ;    1149     			else
000792 c004      	RJMP _0xD3
                 _0xCA:
                 ;    1150     			{
                 ;    1151     				status_paket= KONFIRMASI_GAGAL;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000793 e0e2      	LDI  R30,LOW(2)
000794 2eae      	MOV  R10,R30
                 ;    1152     				kirimKonfirmasiGAGAL();
000795 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1153     			}
                 _0xD3:
                 ;    1154     			indek_data= 0;
                 _0x170:
000797 2488      	CLR  R8
                 ;    1155     		}
                 ;    1156         };
                 _0xC7:
                 _0xC6:
000798 cf77      	RJMP _0xB4
                 _0xB6:
                 ;    1157     }
                 ;    1158 
                 ;    1159     else if(status_tulis_bertahap) //Data yang di tulis melebihi KAPASITAS_SRAM
000799 c0ba      	RJMP _0xD4
                 _0xB3:
00079a fe31      	SBRS R3,1
00079b c0b8      	RJMP _0xD5
                 ;    1160     {
                 ;    1161         while(!selesai_terima_data)
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
                 _0xD6:
00079c fcf0      	SBRC R15,0
00079d c0b6      	RJMP _0xD8
                 ;    1162         {
                 ;    1163             PORTB.7=0;          //Jaga kondisi SCK tanpa Pulsa
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
00079e 98c7      	CBI  0x18,7
                 ;    1164             data= bacaDataSerialIR();
00079f 940e 00ac 	CALL _bacaDataSerialIR
0007a1 2f1e      	MOV  R17,R30
                 ;    1165             //kirimDataSerial(data); //Debug log serial USB
                 ;    1166             buffer_paket_data[indek_data++]= data;
0007a2 2de8      	MOV  R30,R8
0007a3 9483      	INC  R8
0007a4 e0f0      	LDI  R31,0
0007a5 01de      	MOVW R26,R28
0007a6 9616      	ADIW R26,6
0007a7 0fea      	ADD  R30,R26
0007a8 1ffb      	ADC  R31,R27
0007a9 8310      	ST   Z,R17
                 ;    1167 
                 ;    1168             if((indek_data == 1 && data != '<') || (indek_data == 2 && data != 0x45) || (indek_data == 3 && data != '>'))
0007aa e0e1      	LDI  R30,LOW(1)
0007ab 15e8      	CP   R30,R8
0007ac f411      	BRNE _0xDA
0007ad 331c      	CPI  R17,60
0007ae f459      	BRNE _0xDC
                 _0xDA:
0007af e0e2      	LDI  R30,LOW(2)
0007b0 15e8      	CP   R30,R8
0007b1 f411      	BRNE _0xDD
0007b2 3415      	CPI  R17,69
0007b3 f431      	BRNE _0xDC
                 _0xDD:
0007b4 e0e3      	LDI  R30,LOW(3)
0007b5 15e8      	CP   R30,R8
0007b6 f411      	BRNE _0xDF
0007b7 331e      	CPI  R17,62
0007b8 f409      	BRNE _0xDC
                 _0xDF:
0007b9 c001      	RJMP _0xD9
                 _0xDC:
                 ;    1169                 indek_data= 0;
0007ba c097      	RJMP _0x171
                 ;    1170             else if(indek_data == 5 && data != '|')
                 _0xD9:
0007bb e0e5      	LDI  R30,LOW(5)
0007bc 15e8      	CP   R30,R8
0007bd f411      	BRNE _0xE4
0007be 371c      	CPI  R17,124
0007bf f409      	BRNE _0xE5
                 _0xE4:
0007c0 c001      	RJMP _0xE3
                 _0xE5:
                 ;    1171             	indek_data= 0;
0007c1 c090      	RJMP _0x171
                 ;    1172             else if(indek_data == 1)  // Tanda  paket mulai valid, set nilai timeout
                 _0xE3:
0007c2 e0e1      	LDI  R30,LOW(1)
0007c3 15e8      	CP   R30,R8
0007c4 f439      	BRNE _0xE7
                 ;    1173                 time1= USART_TIMEOUT;
0007c5 e4e4      	LDI  R30,LOW(68)
0007c6 e0f0      	LDI  R31,HIGH(68)
0007c7 93e0 0298 	STS  _time1,R30
0007c9 93f0 0299 	STS  _time1+1,R31
                 ;    1174             else if((indek_data == PANJANG_PAKET+9) && ID_paket <= jml_paket) //Penerimaan Data
0007cb c087      	RJMP _0xE8
                 _0xE7:
0007cc e8e9      	LDI  R30,LOW(137)
0007cd 15e8      	CP   R30,R8
0007ce f411      	BRNE _0xEA
0007cf 14b5      	CP   R11,R5
0007d0 f408      	BRSH _0xEB
                 _0xEA:
0007d1 c081      	RJMP _0xE9
                 _0xEB:
                 ;    1175     		{
                 ;    1176     			CRC= hitungCRC16(buffer_paket_data, PANJANG_PAKET+7);
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
0007d2 01fe      	MOVW R30,R28
0007d3 9636      	ADIW R30,6
0007d4 93fa      	ST   -Y,R31
0007d5 93ea      	ST   -Y,R30
0007d6 e8e7      	LDI  R30,LOW(135)
0007d7 93ea      	ST   -Y,R30
0007d8 d15a      	RCALL _hitungCRC16
0007d9 93e0 0290 	STS  _CRC,R30
0007db 93f0 0291 	STS  _CRC+1,R31
                 ;    1177 
                 ;    1178     			if(((unsigned char) CRC == buffer_paket_data[PANJANG_PAKET+7]) && ((unsigned char) (CRC>>8) == buffer_paket_data[PANJANG_PAKET+8]))
0007dd 01fe
0007de 57e3
0007df 4fff
0007e0 81e0      	__GETB1SX 141
0007e1 91a0 0290 	LDS  R26,_CRC
0007e3 17ea      	CP   R30,R26
0007e4 f451      	BRNE _0xED
0007e5 91e0 0291 	LDS  R30,_CRC+1
0007e7 70f0      	ANDI R31,HIGH(0x0)
0007e8 2fae      	MOV  R26,R30
0007e9 01fe
0007ea 57e2
0007eb 4fff
0007ec 81e0      	__GETB1SX 142
0007ed 17ea      	CP   R30,R26
0007ee f009      	BREQ _0xEE
                 _0xED:
0007ef c05e      	RJMP _0xEC
                 _0xEE:
                 ;    1179     			{
                 ;    1180     				if(ID_paket == buffer_paket_data[5])
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
0007f0 85eb      	LDD  R30,Y+11
0007f1 15e5      	CP   R30,R5
0007f2 f011      	BREQ PC+3
0007f3 940c 0849 	JMP _0xEF
                 ;    1181     				{
                 ;    1182     					ID_paket_OK= ID_paket;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
0007f5 2c75      	MOV  R7,R5
                 ;    1183     					status_paket= KONFIRMASI_PAKET_OK;
0007f6 e0e3      	LDI  R30,LOW(3)
0007f7 2eae      	MOV  R10,R30
                 ;    1184     					//Tampung data yang diterima ke Eksternal SRAM mulai dari indek ke-7
                 ;    1185     					for(i= 7; i<(PANJANG_PAKET+7); i++)
0007f8 e007      	LDI  R16,LOW(7)
                 _0xF1:
0007f9 3807      	CPI  R16,135
0007fa f4c0      	BRSH _0xF2
                 ;    1186     						    tulisExtSRAM(idxBufExtSRAM++, buffer_paket_data[i]);
0007fb 91e0 0292 	LDS  R30,_idxBufExtSRAM
0007fd 91f0 0293 	LDS  R31,_idxBufExtSRAM+1
0007ff 9631      	ADIW R30,1
000800 93e0 0292 	STS  _idxBufExtSRAM,R30
000802 93f0 0293 	STS  _idxBufExtSRAM+1,R31
000804 9731      	SBIW R30,1
000805 93fa      	ST   -Y,R31
000806 93ea      	ST   -Y,R30
000807 2fe0      	MOV  R30,R16
000808 e0f0      	LDI  R31,0
000809 01de      	MOVW R26,R28
00080a 9618      	ADIW R26,8
00080b 0fae      	ADD  R26,R30
00080c 1fbf      	ADC  R27,R31
00080d 91ec      	LD   R30,X
00080e 93ea      	ST   -Y,R30
00080f 940e 09f8 	CALL _tulisExtSRAM
                 ;    1187 
                 ;    1188     					jml_data_page= (unsigned int) idxBufExtSRAM/2;
000811 5f0f      	SUBI R16,-1
000812 cfe6      	RJMP _0xF1
                 _0xF2:
000813 91e0 0292 	LDS  R30,_idxBufExtSRAM
000815 91f0 0293 	LDS  R31,_idxBufExtSRAM+1
000817 95f6      	LSR  R31
000818 95e7      	ROR  R30
000819 019f      	MOVW R18,R30
                 ;    1189     					//Tulis jika isi buffer SRAM penuh maka segera tulis ke Flash
                 ;    1190     					if(idxBufExtSRAM>KAPASITAS_SRAM)
00081a 91a0 0292 	LDS  R26,_idxBufExtSRAM
00081c 91b0 0293 	LDS  R27,_idxBufExtSRAM+1
00081e 30a1      	CPI  R26,LOW(0x2001)
00081f e2e0      	LDI  R30,HIGH(0x2001)
000820 07be      	CPC  R27,R30
000821 f0e8      	BRLO _0xF3
                 ;    1191     					{
                 ;    1192         					idxBufExtSRAM= 0;      //Reset indek buffer
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000822 e0e0      	LDI  R30,0
000823 93e0 0292 	STS  _idxBufExtSRAM,R30
000825 93e0 0293 	STS  _idxBufExtSRAM+1,R30
                 ;    1193         					status_paket= KONFIRMASI_GAGAL;
000827 e0e2      	LDI  R30,LOW(2)
000828 2eae      	MOV  R10,R30
                 ;    1194         					kirimKonfirmasiGAGAL();
000829 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1195         					LED_BIRU_ON();
00082b 9893      	CBI  0x12,3
                 ;    1196         					alamat_akhir= ISPWriteHugeFlashMemory(jml_data_page, alamat_awal);
00082c 933a      	ST   -Y,R19
00082d 932a      	ST   -Y,R18
00082e 91e0 028c 	LDS  R30,_alamat_awal
000830 91f0 028d 	LDS  R31,_alamat_awal+1
000832 93fa      	ST   -Y,R31
000833 93ea      	ST   -Y,R30
000834 940e 0a61 	CALL _ISPWriteHugeFlashMemory
000836 93e0 028e 	STS  _alamat_akhir,R30
000838 93f0 028f 	STS  _alamat_akhir+1,R31
                 ;    1197         					alamat_awal= alamat_akhir;
00083a 93e0 028c 	STS  _alamat_awal,R30
00083c 93f0 028d 	STS  _alamat_awal+1,R31
                 ;    1198         					LED_BIRU_OFF();
00083e 9a93      	SBI  0x12,3
                 ;    1199     					}
                 ;    1200 
                 ;    1201     					ID_paket++;
                 _0xF3:
00083f 9453      	INC  R5
                 ;    1202     					kirimKonfirmasiPaketOK();
000840 940e 02dc 	CALL _kirimKonfirmasiPaketOK
                 ;    1203     					if(ID_paket == (jml_paket+1))
000842 2deb      	MOV  R30,R11
000843 5fef      	SUBI R30,-LOW(1)
000844 15e5      	CP   R30,R5
000845 f411      	BRNE _0xF4
                 ;    1204     						selesai_terima_data= 1;
000846 9468      	SET
000847 f8f0      	BLD  R15,0
                 ;    1205     				}
                 _0xF4:
                 ;    1206     				else
000848 c004      	RJMP _0xF5
                 _0xEF:
                 ;    1207     				{
                 ;    1208     					status_paket= KONFIRMASI_GAGAL;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
000849 e0e2      	LDI  R30,LOW(2)
00084a 2eae      	MOV  R10,R30
                 ;    1209     					kirimKonfirmasiGAGAL();
00084b 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1210     				}
                 _0xF5:
                 ;    1211     			}
                 ;    1212     			else
00084d c004      	RJMP _0xF6
                 _0xEC:
                 ;    1213     			{
                 ;    1214     				status_paket= KONFIRMASI_GAGAL;
                 ;	selesai_terima_data -> R15.0
                 ;	buffer_paket_data -> Y+6
00084e e0e2      	LDI  R30,LOW(2)
00084f 2eae      	MOV  R10,R30
                 ;    1215     				kirimKonfirmasiGAGAL();
000850 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1216     			}
                 _0xF6:
                 ;    1217     			indek_data= 0;
                 _0x171:
000852 2488      	CLR  R8
                 ;    1218     		}
                 ;    1219         };
                 _0xE9:
                 _0xE8:
000853 cf48      	RJMP _0xD6
                 _0xD8:
                 ;    1220     }
                 ;    1221 }
                 _0xD5:
                 _0xD4:
000854 940e 0d57 	CALL __LOADLOCR6
000856 96ef      	ADIW R28,63
000857 96ef      	ADIW R28,63
000858 9661      	ADIW R28,17
000859 90ff      	POP  R15
00085a 9508      	RET
                 ;    1222 /************************************************************************************************************/
                 ;    1223 void olahPaketAkhir(void)
                 ;    1224 {
                 _olahPaketAkhir:
00085b 92ff      	PUSH R15
                 ;    1225     bit selesai_terima_akhir;
                 ;    1226     unsigned char data;
                 ;    1227     unsigned char buffer_paket_data[11];   // Ukuran buffer adalah [HEADER(7) + Data + CRC(2)]
                 ;    1228                                            // Data dapat berupa kode devais atau jumlah paket
                 ;    1229 
                 ;    1230     while(!selesai_terima_akhir)
00085c 972b      	SBIW R28,11
00085d 931a      	ST   -Y,R17
                 ;	selesai_terima_akhir -> R15.0
                 ;	data -> R17
                 ;	buffer_paket_data -> Y+1
                 _0xF7:
00085e fcf0      	SBRC R15,0
00085f c05b      	RJMP _0xF9
                 ;    1231     {
                 ;    1232         data= bacaDataSerialIR();
                 ;	selesai_terima_akhir -> R15.0
                 ;	buffer_paket_data -> Y+1
000860 940e 00ac 	CALL _bacaDataSerialIR
000862 2f1e      	MOV  R17,R30
                 ;    1233         //kirimDataSerial(data); //Debug log serial USB
                 ;    1234         buffer_paket_data[indek_data++]= data;
000863 2de8      	MOV  R30,R8
000864 9483      	INC  R8
000865 e0f0      	LDI  R31,0
000866 01de      	MOVW R26,R28
000867 9611      	ADIW R26,1
000868 0fea      	ADD  R30,R26
000869 1ffb      	ADC  R31,R27
00086a 8310      	ST   Z,R17
                 ;    1235 
                 ;    1236         if((indek_data == 1 && data != '<') || (indek_data == 2 && data != 0x45) || (indek_data == 3 && data != '>'))
00086b e0e1      	LDI  R30,LOW(1)
00086c 15e8      	CP   R30,R8
00086d f411      	BRNE _0xFB
00086e 331c      	CPI  R17,60
00086f f459      	BRNE _0xFD
                 _0xFB:
000870 e0e2      	LDI  R30,LOW(2)
000871 15e8      	CP   R30,R8
000872 f411      	BRNE _0xFE
000873 3415      	CPI  R17,69
000874 f431      	BRNE _0xFD
                 _0xFE:
000875 e0e3      	LDI  R30,LOW(3)
000876 15e8      	CP   R30,R8
000877 f411      	BRNE _0x100
000878 331e      	CPI  R17,62
000879 f409      	BRNE _0xFD
                 _0x100:
00087a c001      	RJMP _0xFA
                 _0xFD:
                 ;    1237             indek_data= 0;
00087b c03d      	RJMP _0x172
                 ;    1238         else if(indek_data == 5 && data != '|')
                 _0xFA:
00087c e0e5      	LDI  R30,LOW(5)
00087d 15e8      	CP   R30,R8
00087e f411      	BRNE _0x105
00087f 371c      	CPI  R17,124
000880 f409      	BRNE _0x106
                 _0x105:
000881 c001      	RJMP _0x104
                 _0x106:
                 ;    1239         	indek_data= 0;
000882 c036      	RJMP _0x172
                 ;    1240         else if(indek_data == 1)  // Tanda  paket mulai valid, set nilai timeout
                 _0x104:
000883 e0e1      	LDI  R30,LOW(1)
000884 15e8      	CP   R30,R8
000885 f439      	BRNE _0x108
                 ;    1241             time1= USART_TIMEOUT;
000886 e4e4      	LDI  R30,LOW(68)
000887 e0f0      	LDI  R31,HIGH(68)
000888 93e0 0298 	STS  _time1,R30
00088a 93f0 0299 	STS  _time1+1,R31
                 ;    1242         else if(status_perintah_tulis && indek_data == 9)// Deteksi akhir kiriman
00088c c02d      	RJMP _0x109
                 _0x108:
00088d fe30      	SBRS R3,0
00088e c003      	RJMP _0x10B
00088f e0e9      	LDI  R30,LOW(9)
000890 15e8      	CP   R30,R8
000891 f009      	BREQ _0x10C
                 _0x10B:
000892 c027      	RJMP _0x10A
                 _0x10C:
                 ;    1243 		{
                 ;    1244 			CRC= hitungCRC16(buffer_paket_data, 7);
                 ;	selesai_terima_akhir -> R15.0
                 ;	buffer_paket_data -> Y+1
000893 01fe      	MOVW R30,R28
000894 9631      	ADIW R30,1
000895 93fa      	ST   -Y,R31
000896 93ea      	ST   -Y,R30
000897 e0e7      	LDI  R30,LOW(7)
000898 93ea      	ST   -Y,R30
000899 d099      	RCALL _hitungCRC16
00089a 93e0 0290 	STS  _CRC,R30
00089c 93f0 0291 	STS  _CRC+1,R31
                 ;    1245 
                 ;    1246 			if(((unsigned char) CRC == buffer_paket_data[7]) && ((unsigned char) (CRC>>8) == buffer_paket_data[8]))
00089e 85e8      	LDD  R30,Y+8
00089f 91a0 0290 	LDS  R26,_CRC
0008a1 17ea      	CP   R30,R26
0008a2 f439      	BRNE _0x10E
0008a3 91e0 0291 	LDS  R30,_CRC+1
0008a5 70f0      	ANDI R31,HIGH(0x0)
0008a6 2fae      	MOV  R26,R30
0008a7 85e9      	LDD  R30,Y+9
0008a8 17ea      	CP   R30,R26
0008a9 f009      	BREQ _0x10F
                 _0x10E:
0008aa c00e      	RJMP _0x10D
                 _0x10F:
                 ;    1247 			{
                 ;    1248 				if((buffer_paket_data[3] == '\n') && (buffer_paket_data[5] == '\r'))
                 ;	selesai_terima_akhir -> R15.0
                 ;	buffer_paket_data -> Y+1
0008ab 81ac      	LDD  R26,Y+4
0008ac 30aa      	CPI  R26,LOW(0xA)
0008ad f419      	BRNE _0x111
0008ae 81ae      	LDD  R26,Y+6
0008af 30ad      	CPI  R26,LOW(0xD)
0008b0 f009      	BREQ _0x112
                 _0x111:
0008b1 c003      	RJMP _0x110
                 _0x112:
                 ;    1249       				selesai_terima_akhir= 1;
0008b2 9468      	SET
0008b3 f8f0      	BLD  R15,0
                 ;    1250 				else
0008b4 c004      	RJMP _0x113
                 _0x110:
                 ;    1251 				{
                 ;    1252 					status_paket= KONFIRMASI_GAGAL;
                 ;	selesai_terima_akhir -> R15.0
                 ;	buffer_paket_data -> Y+1
0008b5 e0e2      	LDI  R30,LOW(2)
0008b6 2eae      	MOV  R10,R30
                 ;    1253 					kirimKonfirmasiGAGAL();
0008b7 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1254 				}
                 _0x113:
                 ;    1255 			}
                 ;    1256 			indek_data= 0;
                 _0x10D:
                 _0x172:
0008b9 2488      	CLR  R8
                 ;    1257 		}
                 ;    1258     };
                 _0x10A:
                 _0x109:
0008ba cfa3      	RJMP _0xF7
                 _0xF9:
                 ;    1259 }
0008bb 8118      	LDD  R17,Y+0
                 _0x168:
0008bc 962c      	ADIW R28,12
0008bd 90ff      	POP  R15
0008be 9508      	RET
                 ;    1260 /************************************************************************************************************/
                 ;    1261 void terimaDataDariPemrogram(void)
                 ;    1262 {
                 _terimaDataDariPemrogram:
                 ;    1263     olahPaketPerintah();
0008bf 940e 0643 	CALL _olahPaketPerintah
                 ;    1264     if(status_perintah_tulis)
0008c1 fe30      	SBRS R3,0
0008c2 c004      	RJMP _0x114
                 ;    1265     {
                 ;    1266         olahPaketData();
0008c3 940e 0708 	CALL _olahPaketData
                 ;    1267         olahPaketAkhir();
0008c5 940e 085b 	CALL _olahPaketAkhir
                 ;    1268     }
                 ;    1269 }
                 _0x114:
0008c7 9508      	RET
                 ;    1270 /************************************************************************************************************/
                 ;    1271 // Fungsi Main
                 ;    1272 void main (void)
                 ;    1273 {
                 _main:
                 ;    1274     unsigned char i;
                 ;    1275 
                 ;    1276     // Crystal Oscillator division factor: 1
                 ;    1277     #pragma optsize-
                 ;    1278     CLKPR=0x80;
                 ;	i -> R17
0008c8 e8e0      	LDI  R30,LOW(128)
0008c9 93e0 0061 	STS  97,R30
                 ;    1279     CLKPR=0x00;
0008cb e0e0      	LDI  R30,LOW(0)
0008cc 93e0 0061 	STS  97,R30
                 ;    1280     #ifdef _OPTIMIZE_SIZE_
                 ;    1281     #pragma optsize+
                 ;    1282     #endif
                 ;    1283 
                 ;    1284     // Input/Output Ports initialization
                 ;    1285     // Port A initialization
                 ;    1286     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;    1287     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;    1288     PORTA=0x00;
0008ce bbeb      	OUT  0x1B,R30
                 ;    1289     DDRA=0x00;
0008cf bbea      	OUT  0x1A,R30
                 ;    1290 
                 ;    1291     // Port B initialization
                 ;    1292     // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=Out Func0=Out
                 ;    1293     // State7=0 State6=T State5=0 State4=0 State3=T State2=T State1=0 State0=0
                 ;    1294     PORTB=0x10;
0008d0 e1e0      	LDI  R30,LOW(16)
0008d1 bbe8      	OUT  0x18,R30
                 ;    1295     DDRB=0xB3;
0008d2 ebe3      	LDI  R30,LOW(179)
0008d3 bbe7      	OUT  0x17,R30
                 ;    1296 
                 ;    1297     // Port C initialization
                 ;    1298     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;    1299     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;    1300     PORTC=0x00;
0008d4 e0e0      	LDI  R30,LOW(0)
0008d5 bbe5      	OUT  0x15,R30
                 ;    1301     DDRC=0x00;
0008d6 bbe4      	OUT  0x14,R30
                 ;    1302 
                 ;    1303     // Port D initialization
                 ;    1304     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;    1305     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;    1306     PORTD=0b11110011;
0008d7 efe3      	LDI  R30,LOW(243)
0008d8 bbe2      	OUT  0x12,R30
                 ;    1307     DDRD=0b11001110;
0008d9 ecee      	LDI  R30,LOW(206)
0008da bbe1      	OUT  0x11,R30
                 ;    1308 
                 ;    1309     // Port E initialization
                 ;    1310     // Func2=In Func1=In Func0=In
                 ;    1311     // State2=T State1=T State0=T
                 ;    1312     PORTE=0x01;
0008db e0e1      	LDI  R30,LOW(1)
0008dc b9e7      	OUT  0x7,R30
                 ;    1313     DDRE=0x01;
0008dd b9e6      	OUT  0x6,R30
                 ;    1314 
                 ;    1315     // Analog Comparator initialization
                 ;    1316     // Analog Comparator: Off
                 ;    1317     // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ;    1318     ACSR=0x80;
0008de e8e0      	LDI  R30,LOW(128)
0008df b9e8      	OUT  0x8,R30
                 ;    1319 
                 ;    1320     //Inisialisasi Hardware
                 ;    1321     inisialisasiUSART();
0008e0 940e 0cfb 	CALL _inisialisasiUSART
                 ;    1322     inisialisasiSPILowSpeed();
0008e2 940e 0c54 	CALL _inisialisasiSPILowSpeed
                 ;    1323     inisialisasiSPIHighSpeed();
0008e4 940e 0c59 	CALL _inisialisasiSPIHighSpeed
                 ;    1324     inisialisasiTimer();
0008e6 940e 0cc3 	CALL _inisialisasiTimer
                 ;    1325     inisialisasiExtSRAM();
0008e8 940e 09e1 	CALL _inisialisasiExtSRAM
                 ;    1326     AKTIFKAN_LATCH();
0008ea 9892      	CBI  0x12,2
                 ;    1327 
                 ;    1328     //Pengkondisian awal transmisi
                 ;    1329     AKTIFKAN_TRANSMITTER_IR();
0008eb 9a53      	SBI  0xA,3
                 ;    1330     AKTIFKAN_SINYAL_CARRIER();
0008ec e1e9      	LDI  R30,LOW(25)
0008ed bde7      	OUT  0x27,R30
                 ;    1331     AKTIFKAN_RECEIVER_IR();
0008ee 9a54      	SBI  0xA,4
                 ;    1332     AKTIFKAN_RECEIVER_INTERRUPT_IR();
0008ef 9a57      	SBI  0xA,7
                 ;    1333 
                 ;    1334     for(;;)
                 _0x116:
                 ;    1335     {
                 ;    1336         inisialisasi();
0008f0 940e 03ad 	CALL _inisialisasi
                 ;    1337         terimaDataDariPemrogram();
0008f2 940e 08bf 	CALL _terimaDataDariPemrogram
                 ;    1338         if(!status_tulis_bertahap) menuISP(instruksi_pemrogram);
0008f4 fc31      	SBRC R3,1
0008f5 c004      	RJMP _0x118
0008f6 92da      	ST   -Y,R13
0008f7 940e 061d 	CALL _menuISP
                 ;    1339         //Penulisan bertahap untuk flash berukuran besar melebihi kapasitas SRAM
                 ;    1340         else if(status_tulis_bertahap)
0008f9 c01d      	RJMP _0x119
                 _0x118:
0008fa fe31      	SBRS R3,1
0008fb c01b      	RJMP _0x11A
                 ;    1341         {
                 ;    1342     	    status_paket= TDK_PERLU_KONFIRMASI;
0008fc 24aa      	CLR  R10
                 ;    1343         	jml_page_data= (unsigned int) (idxBufExtSRAM/2); //Benar bisa jalan OK
0008fd 91e0 0292 	LDS  R30,_idxBufExtSRAM
0008ff 91f0 0293 	LDS  R31,_idxBufExtSRAM+1
000901 95f6      	LSR  R31
000902 95e7      	ROR  R30
000903 93e0 0296 	STS  _jml_page_data,R30
000905 93f0 0297 	STS  _jml_page_data+1,R31
                 ;    1344         	LED_BIRU_ON();
000907 9893      	CBI  0x12,3
                 ;    1345         	alamat_akhir= ISPWriteHugeFlashMemory(jml_page_data, alamat_awal);
000908 93fa      	ST   -Y,R31
000909 93ea      	ST   -Y,R30
00090a 91e0 028c 	LDS  R30,_alamat_awal
00090c 91f0 028d 	LDS  R31,_alamat_awal+1
00090e 93fa      	ST   -Y,R31
00090f 93ea      	ST   -Y,R30
000910 940e 0a61 	CALL _ISPWriteHugeFlashMemory
000912 93e0 028e 	STS  _alamat_akhir,R30
000914 93f0 028f 	STS  _alamat_akhir+1,R31
                 ;    1346         	LED_BIRU_OFF();
000916 9a93      	SBI  0x12,3
                 ;    1347     	}
                 ;    1348         status_paket= AKHIR_PROSES; //Set penanda akhir proses
                 _0x11A:
                 _0x119:
000917 e0e5      	LDI  R30,LOW(5)
000918 2eae      	MOV  R10,R30
                 ;    1349         kirimKonfirmasiIDLE();
000919 940e 02b1 	CALL _kirimKonfirmasiIDLE
                 ;    1350         for(i=0;i<4;i++)
00091b e010      	LDI  R17,LOW(0)
                 _0x11C:
00091c 3014      	CPI  R17,4
00091d f490      	BRSH _0x11D
                 ;    1351         {
                 ;    1352             LED_MERAH_ON();
00091e 9838      	CBI  0x7,0
                 ;    1353             LED_BIRU_OFF();
00091f 9a93      	SBI  0x12,3
                 ;    1354             delay_ms(200);
000920 ece8      	LDI  R30,LOW(200)
000921 e0f0      	LDI  R31,HIGH(200)
000922 93fa      	ST   -Y,R31
000923 93ea      	ST   -Y,R30
000924 940e 0d1b 	CALL _delay_ms
                 ;    1355             LED_MERAH_OFF();
000926 9a38      	SBI  0x7,0
                 ;    1356             LED_BIRU_ON();
000927 9893      	CBI  0x12,3
                 ;    1357             delay_ms(200);
000928 ece8      	LDI  R30,LOW(200)
000929 e0f0      	LDI  R31,HIGH(200)
00092a 93fa      	ST   -Y,R31
00092b 93ea      	ST   -Y,R30
00092c 940e 0d1b 	CALL _delay_ms
                 ;    1358         };
00092e 5f1f      	SUBI R17,-1
00092f cfec      	RJMP _0x11C
                 _0x11D:
                 ;    1359     };
000930 cfbf      	RJMP _0x116
                 ;    1360 }
                 _0x11E:
000931 0000      	NOP
000932 cffe      	RJMP _0x11E
                 ;    1361 #include "crc.h"
                 ;    1362 
                 ;    1363 unsigned int hitungCRC16(unsigned char *data, unsigned char len)
                 ;    1364 {
                 _hitungCRC16:
                 ;    1365 	unsigned int sum= 0;
                 ;    1366 	unsigned char j;
                 ;    1367 
                 ;    1368 	for(j= 0; j <= len-1; ++j)
000933 940e 0d52 	CALL __SAVELOCR4
                 ;	*data -> Y+5
                 ;	len -> Y+4
                 ;	sum -> R16,R17
                 ;	j -> R19
000935 e000      	LDI  R16,0
000936 e010      	LDI  R17,0
000937 e030      	LDI  R19,LOW(0)
                 _0x120:
000938 81ec      	LDD  R30,Y+4
000939 50e1      	SUBI R30,LOW(1)
00093a 17e3      	CP   R30,R19
00093b f110      	BRLO _0x121
                 ;    1369 	{
                 ;    1370 		unsigned char i;
                 ;    1371 
                 ;    1372 		sum^= *data++;
00093c 9721      	SBIW R28,1
                 ;	*data -> Y+6
                 ;	len -> Y+5
                 ;	i -> Y+0
00093d 81ae      	LDD  R26,Y+6
00093e 81bf      	LDD  R27,Y+6+1
00093f 91ed      	LD   R30,X+
000940 83ae      	STD  Y+6,R26
000941 83bf      	STD  Y+6+1,R27
000942 e0f0      	LDI  R31,0
000943 270e
000944 271f      	__EORWRR 16,17,30,31
                 ;    1373 
                 ;    1374 		for(i= 0; i < 8; ++i)
000945 e0e0      	LDI  R30,LOW(0)
000946 83e8      	ST   Y,R30
                 _0x123:
000947 81a8      	LD   R26,Y
000948 30a8      	CPI  R26,LOW(0x8)
000949 f488      	BRSH _0x124
                 ;    1375 		{
                 ;    1376 			if(sum & 1)
00094a ff00      	SBRS R16,0
00094b c009      	RJMP _0x125
                 ;    1377 				sum= (sum >> 1) ^ POLYNOM;
00094c 01f8      	MOVW R30,R16
00094d 95f6      	LSR  R31
00094e 95e7      	ROR  R30
00094f e0a1      	LDI  R26,LOW(40961)
000950 eab0      	LDI  R27,HIGH(40961)
000951 27ea      	EOR  R30,R26
000952 27fb      	EOR  R31,R27
000953 018f      	MOVW R16,R30
                 ;    1378 			else
000954 c002      	RJMP _0x126
                 _0x125:
                 ;    1379 				sum= (sum >> 1);
000955 9516      	LSR  R17
000956 9507      	ROR  R16
                 ;    1380 		};
                 _0x126:
000957 81e8      	LD   R30,Y
000958 5fef      	SUBI R30,-LOW(1)
000959 83e8      	ST   Y,R30
00095a cfec      	RJMP _0x123
                 _0x124:
                 ;    1381 	};
00095b 9621      	ADIW R28,1
00095c 5f3f      	SUBI R19,-LOW(1)
00095d cfda      	RJMP _0x120
                 _0x121:
                 ;    1382 
                 ;    1383 	return sum;
00095e 01f8      	MOVW R30,R16
00095f 940e 0d59 	CALL __LOADLOCR4
000961 9627      	ADIW R28,7
000962 9508      	RET
                 ;    1384 }
                 ;    1385 #include "debug.h"
                 ;    1386 
                 ;    1387 //debugging program
                 ;    1388 unsigned int alamat_EEPROM;
                 
                 	.DSEG
                 _alamat_EEPROM:
0003a0           	.BYTE 0x2
                 ;    1389 
                 ;    1390 void tulis_EEPROM(unsigned char data)
                 ;    1391 {
                 
                 	.CSEG
                 ;    1392 
                 ;    1393   /* Tunggu sampai syarat kondisi terpenuhi  */
                 ;    1394   if(alamat_EEPROM<EEPROM_ADDRESS_MAX)
                 ;	data -> Y+0
                 ;    1395     {
                 ;    1396       /* Tunggu sampai proses penulisan EEPROM sebelumnya selesai*/
                 ;    1397       while(EECR & (1<<EEWE));
                 ;    1398 
                 ;    1399       /* Setting alamat dan data register EEPROM */
                 ;    1400       EEAR = alamat_EEPROM;
                 ;    1401       EEDR = data;
                 ;    1402 
                 ;    1403      /* Mengaktifkan EEPROM Master Write Enable (EEMWE) */
                 ;    1404       EECR |= (1<<EEMWE);
                 ;    1405 
                 ;    1406      /* Mulai menuliskan data dengan mengaktifkan EEPROM Write Enable (EEWE) */
                 ;    1407       EECR |= (1<<EEWE);
                 ;    1408 
                 ;    1409      /* Penambahan (increment) alamat EEPROM */
                 ;    1410       alamat_EEPROM++;
                 ;    1411     }
                 ;    1412 }
                 ;    1413 #include "eeprom.h"
                 ;    1414 #include "extsram/extsram.h"
                 ;    1415 #include "isp/isp.h"
                 ;    1416 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    1421 
                 ;    1422 void ISPWriteEEPROM(unsigned int jml_byte_data)
                 ;    1423 {
                 _ISPWriteEEPROM:
                 ;    1424     //Variabel Tulis Data EEPROM Memory Byte Mode
                 ;    1425     unsigned char data;
                 ;    1426     unsigned int i;
                 ;    1427     unsigned int addr_EEPROM_memory;
                 ;    1428 
                 ;    1429     addr_EEPROM_memory= 0;
000963 940e 0d50 	CALL __SAVELOCR6
                 ;	jml_byte_data -> Y+6
                 ;	data -> R17
                 ;	i -> R18,R19
                 ;	addr_EEPROM_memory -> R20,R21
000965 e040
000966 e050      	__GETWRN 20,21,0
                 ;    1430     i=0;
000967 e020
000968 e030      	__GETWRN 18,19,0
                 ;    1431 
                 ;    1432     while(jml_byte_data>0)
                 _0x12B:
000969 81ae      	LDD  R26,Y+6
00096a 81bf      	LDD  R27,Y+6+1
00096b 940e 0d4c 	CALL __CPW02
00096d f518      	BRSH _0x12D
                 ;    1433     {
                 ;    1434         /** Instruksi Write EEPROM Memory pada Serial Programming **/
                 ;    1435         data= bacaExtSRAM(i++);
00096e 01f9      	MOVW R30,R18
00096f 5f2f
000970 4f3f      	__ADDWRN 18,19,1
000971 93fa      	ST   -Y,R31
000972 93ea      	ST   -Y,R30
000973 d072      	RCALL _bacaExtSRAM
000974 2f1e      	MOV  R17,R30
                 ;    1436         if(data!=0xFF)
000975 3f1f      	CPI  R17,255
000976 f091      	BREQ _0x12E
                 ;    1437         {
                 ;    1438             SPIMasterKirimData(0xC0);
000977 ece0      	LDI  R30,LOW(192)
000978 93ea      	ST   -Y,R30
000979 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1439             SPIMasterKirimData(addr_EEPROM_memory>>8);
00097b 2fe5      	MOV  R30,R21
00097c 70f0      	ANDI R31,HIGH(0x0)
00097d 93ea      	ST   -Y,R30
00097e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1440             SPIMasterKirimData(addr_EEPROM_memory);
000980 934a      	ST   -Y,R20
000981 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1441             SPIMasterKirimData(data);
000983 931a      	ST   -Y,R17
000984 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1442 
                 ;    1443             /*** Polling Data EEPROM Memory ***/
                 ;    1444             ISPPollingEEPROM(addr_EEPROM_memory);
000986 935a      	ST   -Y,R21
000987 934a      	ST   -Y,R20
000988 d033      	RCALL _ISPPollingEEPROM
                 ;    1445         }
                 ;    1446 
                 ;    1447         /* Autoincrement alamat untuk writing EEPROM memory dan parameter polling EEPROM memory */
                 ;    1448         addr_EEPROM_memory++;
                 _0x12E:
000989 5f4f
00098a 4f5f      	__ADDWRN 20,21,1
                 ;    1449 
                 ;    1450         jml_byte_data--;
00098b 81ee      	LDD  R30,Y+6
00098c 81ff      	LDD  R31,Y+6+1
00098d 9731      	SBIW R30,1
00098e 83ee      	STD  Y+6,R30
00098f 83ff      	STD  Y+6+1,R31
                 ;    1451     }
000990 cfd8      	RJMP _0x12B
                 _0x12D:
                 ;    1452 }
000991 c026      	RJMP _0x167
                 ;    1453 
                 ;    1454 void ISPReadEEPROM(unsigned int addr_EEPROM_memory_max)
                 ;    1455 {
                 _ISPReadEEPROM:
                 ;    1456     unsigned char data_EEPROM;
                 ;    1457     unsigned int addr_EEPROM_memory;
                 ;    1458     unsigned int i;
                 ;    1459 
                 ;    1460     addr_EEPROM_memory= 0;
000992 940e 0d50 	CALL __SAVELOCR6
                 ;	addr_EEPROM_memory_max -> Y+6
                 ;	data_EEPROM -> R17
                 ;	addr_EEPROM_memory -> R18,R19
                 ;	i -> R20,R21
000994 e020
000995 e030      	__GETWRN 18,19,0
                 ;    1461     i= 0;
000996 e040
000997 e050      	__GETWRN 20,21,0
                 ;    1462 
                 ;    1463     while(addr_EEPROM_memory<addr_EEPROM_memory_max)
                 _0x12F:
000998 81ee      	LDD  R30,Y+6
000999 81ff      	LDD  R31,Y+6+1
00099a 172e      	CP   R18,R30
00099b 073f      	CPC  R19,R31
00099c f4d8      	BRSH _0x131
                 ;    1464     {
                 ;    1465         /*** Instruksi Read EEPROM Memory pada Serial Programming ***/
                 ;    1466         //Read EEPROM Memory Low Byte
                 ;    1467         SPIMasterKirimData(0xA0);
00099d eae0      	LDI  R30,LOW(160)
00099e 93ea      	ST   -Y,R30
00099f 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1468         SPIMasterKirimData(addr_EEPROM_memory>>8);
0009a1 2fe3      	MOV  R30,R19
0009a2 70f0      	ANDI R31,HIGH(0x0)
0009a3 93ea      	ST   -Y,R30
0009a4 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1469         SPIMasterKirimData(addr_EEPROM_memory);
0009a6 932a      	ST   -Y,R18
0009a7 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1470         data_EEPROM=SPIMasterKirimData(0x00);
0009a9 e0e0      	LDI  R30,LOW(0)
0009aa 93ea      	ST   -Y,R30
0009ab 940e 0c5e 	CALL _SPIMasterKirimData
0009ad 2f1e      	MOV  R17,R30
                 ;    1471         tulisExtSRAM(i++, data_EEPROM);
0009ae 01fa      	MOVW R30,R20
0009af 5f4f
0009b0 4f5f      	__ADDWRN 20,21,1
0009b1 93fa      	ST   -Y,R31
0009b2 93ea      	ST   -Y,R30
0009b3 931a      	ST   -Y,R17
0009b4 d043      	RCALL _tulisExtSRAM
                 ;    1472 
                 ;    1473         /* Autoincrement alamat EEPROM memory */
                 ;    1474         addr_EEPROM_memory++;
0009b5 5f2f
0009b6 4f3f      	__ADDWRN 18,19,1
                 ;    1475     };
0009b7 cfe0      	RJMP _0x12F
                 _0x131:
                 ;    1476 }
                 _0x167:
0009b8 940e 0d57 	CALL __LOADLOCR6
0009ba 9628      	ADIW R28,8
0009bb 9508      	RET
                 ;    1477 
                 ;    1478 void ISPPollingEEPROM(unsigned int addr_EEPROM_memory)
                 ;    1479 {
                 _ISPPollingEEPROM:
                 ;    1480     unsigned char ulang_polling_EEPROM;
                 ;    1481     unsigned char data_EEPROM_memory;
                 ;    1482 
                 ;    1483     //Reload jumlah pengulangan polling data EEPROM memory
                 ;    1484     ulang_polling_EEPROM= ULANG_POLLING_EEPROM_MAX;
0009bc 931a      	ST   -Y,R17
0009bd 930a      	ST   -Y,R16
                 ;	addr_EEPROM_memory -> Y+2
                 ;	ulang_polling_EEPROM -> R17
                 ;	data_EEPROM_memory -> R16
0009be e012      	LDI  R17,LOW(2)
                 ;    1485 
                 ;    1486     while(ulang_polling_EEPROM>0)
                 _0x132:
0009bf 3011      	CPI  R17,1
0009c0 f0e0      	BRLO _0x134
                 ;    1487     {
                 ;    1488         /*** Instruksi Read EEPROM pada Serial Programming ***/
                 ;    1489         SPIMasterKirimData(0xA0);
0009c1 eae0      	LDI  R30,LOW(160)
0009c2 93ea      	ST   -Y,R30
0009c3 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1490         SPIMasterKirimData(addr_EEPROM_memory>>8);
0009c5 81eb      	LDD  R30,Y+3
0009c6 70f0      	ANDI R31,HIGH(0x0)
0009c7 93ea      	ST   -Y,R30
0009c8 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1491         SPIMasterKirimData(addr_EEPROM_memory);
0009ca 81ea      	LDD  R30,Y+2
0009cb 93ea      	ST   -Y,R30
0009cc 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1492         data_EEPROM_memory=SPIMasterKirimData(0x00);
0009ce e0e0      	LDI  R30,LOW(0)
0009cf 93ea      	ST   -Y,R30
0009d0 940e 0c5e 	CALL _SPIMasterKirimData
0009d2 2f0e      	MOV  R16,R30
                 ;    1493         if(data_EEPROM_memory==0xFF) delay_ms(9);
0009d3 3f0f      	CPI  R16,255
0009d4 f431      	BRNE _0x135
0009d5 e0e9      	LDI  R30,LOW(9)
0009d6 e0f0      	LDI  R31,HIGH(9)
0009d7 93fa      	ST   -Y,R31
0009d8 93ea      	ST   -Y,R30
0009d9 940e 0d1b 	CALL _delay_ms
                 ;    1494         ulang_polling_EEPROM--;
                 _0x135:
0009db 5011      	SUBI R17,1
                 ;    1495     }
0009dc cfe2      	RJMP _0x132
                 _0x134:
                 ;    1496 }
0009dd 8119      	LDD  R17,Y+1
0009de 8108      	LDD  R16,Y+0
0009df 9624      	ADIW R28,4
0009e0 9508      	RET
                 ;    1497 #include "extsram.h"
                 ;    1498 
                 ;    1499 /************************************************************************************************************/
                 ;    1500 // Fungsi Inisialisasi SRAM Eksternal
                 ;    1501 void inisialisasiExtSRAM(void)
                 ;    1502 {
                 _inisialisasiExtSRAM:
                 ;    1503     // External Interrupt(s) initialization
                 ;    1504     // INT0: Off
                 ;    1505     // INT1: Off
                 ;    1506     // INT2: Off
                 ;    1507     // Interrupt on any change on pins PCINT0-7: Off
                 ;    1508     // Interrupt on any change on pins PCINT8-15: Off
                 ;    1509     // External SRAM page configuration:
                 ;    1510     //              -              / 0000h - 1FFFh
                 ;    1511     // Lower page wait state(s): None
                 ;    1512     // Upper page wait state(s): None
                 ;    1513     MCUCR=0x80;
0009e1 e8e0      	LDI  R30,LOW(128)
0009e2 bfe5      	OUT  0x35,R30
                 ;    1514     EMCUCR=0x00;
0009e3 e0e0      	LDI  R30,LOW(0)
0009e4 bfe6      	OUT  0x36,R30
                 ;    1515 }
0009e5 9508      	RET
                 ;    1516 /************************************************************************************************************/
                 ;    1517 // Fungsi Pembacaan SRAM Eksternal
                 ;    1518 unsigned char bacaExtSRAM(unsigned int addr_read_ext_SRAM)
                 ;    1519 {
                 _bacaExtSRAM:
                 ;    1520     unsigned char *ptr_data = (unsigned char *) (addr_read_ext_SRAM + OFFSET_ADDR_EXT_SRAM);
                 ;    1521     unsigned char data;
                 ;    1522     DDRC = 0xFF;
0009e6 940e 0d52 	CALL __SAVELOCR4
                 ;	addr_read_ext_SRAM -> Y+4
                 ;	*ptr_data -> R16,R17
                 ;	data -> R19
0009e8 81ec      	LDD  R30,Y+4
0009e9 81fd      	LDD  R31,Y+4+1
0009ea 50e0      	SUBI R30,LOW(-1280)
0009eb 4ffb      	SBCI R31,HIGH(-1280)
0009ec 018f      	MOVW R16,R30
0009ed efef      	LDI  R30,LOW(255)
0009ee bbe4      	OUT  0x14,R30
                 ;    1523     PORTC = 0x00;
0009ef e0e0      	LDI  R30,LOW(0)
0009f0 bbe5      	OUT  0x15,R30
                 ;    1524     data= *ptr_data;
0009f1 01d8      	MOVW R26,R16
0009f2 913c      	LD   R19,X
                 ;    1525     return data;
0009f3 2fe3      	MOV  R30,R19
0009f4 940e 0d59 	CALL __LOADLOCR4
0009f6 9626      	ADIW R28,6
0009f7 9508      	RET
                 ;    1526 }
                 ;    1527 /************************************************************************************************************/
                 ;    1528 // Fungsi Penulisan SRAM Eksternal
                 ;    1529 void tulisExtSRAM(unsigned int addr_write_ext_SRAM, unsigned char data)
                 ;    1530 {
                 _tulisExtSRAM:
                 ;    1531     unsigned char *ptr_data = (unsigned char *) (addr_write_ext_SRAM + OFFSET_ADDR_EXT_SRAM);
                 ;    1532     DDRC = 0xFF;
0009f8 931a      	ST   -Y,R17
0009f9 930a      	ST   -Y,R16
                 ;	addr_write_ext_SRAM -> Y+3
                 ;	data -> Y+2
                 ;	*ptr_data -> R16,R17
0009fa 81eb      	LDD  R30,Y+3
0009fb 81fc      	LDD  R31,Y+3+1
0009fc 50e0      	SUBI R30,LOW(-1280)
0009fd 4ffb      	SBCI R31,HIGH(-1280)
0009fe 018f      	MOVW R16,R30
0009ff efef      	LDI  R30,LOW(255)
000a00 bbe4      	OUT  0x14,R30
                 ;    1533     PORTC = 0x00;
000a01 e0e0      	LDI  R30,LOW(0)
000a02 bbe5      	OUT  0x15,R30
                 ;    1534     *ptr_data= data;
000a03 81ea      	LDD  R30,Y+2
000a04 01d8      	MOVW R26,R16
000a05 93ec      	ST   X,R30
                 ;    1535 }
000a06 8119      	LDD  R17,Y+1
000a07 8108      	LDD  R16,Y+0
000a08 9625      	ADIW R28,5
000a09 9508      	RET
                 ;    1536 #include "flash.h"
                 ;    1537 #include "extsram/extsram.h"
                 ;    1538 #include "isp/isp.h"
                 ;    1539 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    1544 
                 ;    1545 /***  Operasi Penulisan Memori Flash Page Mode***/
                 ;    1546 void ISPWriteFlashMemory(unsigned int jml_page_data)
                 ;    1547 {
                 _ISPWriteFlashMemory:
                 ;    1548     //Variabel Tulis Data Flash Memory
                 ;    1549     unsigned int addr_flash_memory_page;
                 ;    1550     unsigned char data_low_byte, data_high_byte;
                 ;    1551     unsigned int i;
                 ;    1552 
                 ;    1553     addr_flash_memory_page=0x00;
000a0a 940e 0d50 	CALL __SAVELOCR6
                 ;	jml_page_data -> Y+6
                 ;	addr_flash_memory_page -> R16,R17
                 ;	data_low_byte -> R19
                 ;	data_high_byte -> R18
                 ;	i -> R20,R21
000a0c e000
000a0d e010      	__GETWRN 16,17,0
                 ;    1554     i=0;
000a0e e040
000a0f e050      	__GETWRN 20,21,0
                 ;    1555 
                 ;    1556     while(jml_page_data>0)
                 _0x136:
000a10 81ae      	LDD  R26,Y+6
000a11 81bf      	LDD  R27,Y+6+1
000a12 940e 0d4c 	CALL __CPW02
000a14 f010      	BRLO PC+3
000a15 940c 0a60 	JMP _0x138
                 ;    1557     {
                 ;    1558         //Baca data memori dari SRAM Eksternal
                 ;    1559         data_low_byte=bacaExtSRAM(i++);
000a17 01fa      	MOVW R30,R20
000a18 5f4f
000a19 4f5f      	__ADDWRN 20,21,1
000a1a 93fa      	ST   -Y,R31
000a1b 93ea      	ST   -Y,R30
000a1c 940e 09e6 	CALL _bacaExtSRAM
000a1e 2f3e      	MOV  R19,R30
                 ;    1560         data_high_byte=bacaExtSRAM(i++);
000a1f 01fa      	MOVW R30,R20
000a20 5f4f
000a21 4f5f      	__ADDWRN 20,21,1
000a22 93fa      	ST   -Y,R31
000a23 93ea      	ST   -Y,R30
000a24 940e 09e6 	CALL _bacaExtSRAM
000a26 2f2e      	MOV  R18,R30
                 ;    1561 
                 ;    1562         /*** Instruksi Load Program Memory Page pada Serial Programming ***/
                 ;    1563         //Load Program Memory Low Byte
                 ;    1564         SPIMasterKirimData(0x40);
000a27 e4e0      	LDI  R30,LOW(64)
000a28 93ea      	ST   -Y,R30
000a29 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1565         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000a2b 2fe1      	MOV  R30,R17
000a2c 70f0      	ANDI R31,HIGH(0x0)
000a2d 93ea      	ST   -Y,R30
000a2e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1566         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000a30 930a      	ST   -Y,R16
000a31 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1567         SPIMasterKirimData(data_low_byte);  //data low byte
000a33 933a      	ST   -Y,R19
000a34 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1568 
                 ;    1569         /*** Instruksi Load Program Memory Page pada Serial Programming ***/
                 ;    1570         //Load Program Memory High Byte
                 ;    1571         SPIMasterKirimData(0x48);
000a36 e4e8      	LDI  R30,LOW(72)
000a37 93ea      	ST   -Y,R30
000a38 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1572         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000a3a 2fe1      	MOV  R30,R17
000a3b 70f0      	ANDI R31,HIGH(0x0)
000a3c 93ea      	ST   -Y,R30
000a3d 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1573         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000a3f 930a      	ST   -Y,R16
000a40 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1574         SPIMasterKirimData(data_high_byte);  //data high byte
000a42 932a      	ST   -Y,R18
000a43 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1575 
                 ;    1576         /*** Instruksi Write Program Memory Page pada Serial Programming ***/
                 ;    1577         SPIMasterKirimData(0x4C);
000a45 e4ec      	LDI  R30,LOW(76)
000a46 93ea      	ST   -Y,R30
000a47 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1578         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000a49 2fe1      	MOV  R30,R17
000a4a 70f0      	ANDI R31,HIGH(0x0)
000a4b 93ea      	ST   -Y,R30
000a4c 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1579         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000a4e 930a      	ST   -Y,R16
000a4f 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1580         SPIMasterKirimData(0x00);
000a51 e0e0      	LDI  R30,LOW(0)
000a52 93ea      	ST   -Y,R30
000a53 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1581 
                 ;    1582         /*** Polling Data Flash Memory ***/
                 ;    1583         ISPPollingFlashMemory(addr_flash_memory_page);
000a55 931a      	ST   -Y,R17
000a56 930a      	ST   -Y,R16
000a57 d10c      	RCALL _ISPPollingFlashMemory
                 ;    1584 
                 ;    1585         /* Autoincrement alamat untuk writing flash memory dan parameter polling flash memory */
                 ;    1586         addr_flash_memory_page++;
000a58 5f0f
000a59 4f1f      	__ADDWRN 16,17,1
                 ;    1587 
                 ;    1588         jml_page_data--;
000a5a 81ee      	LDD  R30,Y+6
000a5b 81ff      	LDD  R31,Y+6+1
000a5c 9731      	SBIW R30,1
000a5d 83ee      	STD  Y+6,R30
000a5e 83ff      	STD  Y+6+1,R31
                 ;    1589     };
000a5f cfb0      	RJMP _0x136
                 _0x138:
                 ;    1590 }
000a60 c0a8      	RJMP _0x166
                 ;    1591 
                 ;    1592 /***  Operasi Penulisan Memori Flash Page Mode Secara Bertahap***/
                 ;    1593 unsigned int ISPWriteHugeFlashMemory(unsigned int jml_page_data, unsigned int addr_page_flash_terakhir)
                 ;    1594 {
                 _ISPWriteHugeFlashMemory:
                 ;    1595     //Variabel Tulis Data Flash Memory
                 ;    1596     unsigned int addr_flash_memory_page;
                 ;    1597     unsigned char data_low_byte, data_high_byte;
                 ;    1598     unsigned int i;
                 ;    1599 
                 ;    1600     addr_flash_memory_page=addr_page_flash_terakhir;
000a61 940e 0d50 	CALL __SAVELOCR6
                 ;	jml_page_data -> Y+8
                 ;	addr_page_flash_terakhir -> Y+6
                 ;	addr_flash_memory_page -> R16,R17
                 ;	data_low_byte -> R19
                 ;	data_high_byte -> R18
                 ;	i -> R20,R21
000a63 810e
000a64 811f      	__GETWRS 16,17,6
                 ;    1601     i=0;
000a65 e040
000a66 e050      	__GETWRN 20,21,0
                 ;    1602 
                 ;    1603     if(awal_akses_devais)
000a67 fe20      	SBRS R2,0
000a68 c006      	RJMP _0x139
                 ;    1604     {
                 ;    1605         enterProgrammingMode();
000a69 940e 0c65 	CALL _enterProgrammingMode
                 ;    1606         chipErase();
000a6b 940e 0c87 	CALL _chipErase
                 ;    1607         awal_akses_devais=0;
000a6d 94e8      	CLT
000a6e f820      	BLD  R2,0
                 ;    1608     }
                 ;    1609 
                 ;    1610     //enterProgrammingMode();
                 ;    1611     while(jml_page_data>0)
                 _0x139:
                 _0x13A:
000a6f 85a8      	LDD  R26,Y+8
000a70 85b9      	LDD  R27,Y+8+1
000a71 940e 0d4c 	CALL __CPW02
000a73 f010      	BRLO PC+3
000a74 940c 0ac1 	JMP _0x13C
                 ;    1612     {
                 ;    1613         //Baca data memori dari SRAM Eksternal
                 ;    1614         data_low_byte=bacaExtSRAM(i++);
000a76 01fa      	MOVW R30,R20
000a77 5f4f
000a78 4f5f      	__ADDWRN 20,21,1
000a79 93fa      	ST   -Y,R31
000a7a 93ea      	ST   -Y,R30
000a7b 940e 09e6 	CALL _bacaExtSRAM
000a7d 2f3e      	MOV  R19,R30
                 ;    1615         data_high_byte=bacaExtSRAM(i++);
000a7e 01fa      	MOVW R30,R20
000a7f 5f4f
000a80 4f5f      	__ADDWRN 20,21,1
000a81 93fa      	ST   -Y,R31
000a82 93ea      	ST   -Y,R30
000a83 940e 09e6 	CALL _bacaExtSRAM
000a85 2f2e      	MOV  R18,R30
                 ;    1616 
                 ;    1617         /*** Instruksi Load Program Memory Page pada Serial Programming ***/
                 ;    1618         //Load Program Memory Low Byte
                 ;    1619         SPIMasterKirimData(0x40);
000a86 e4e0      	LDI  R30,LOW(64)
000a87 93ea      	ST   -Y,R30
000a88 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1620         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000a8a 2fe1      	MOV  R30,R17
000a8b 70f0      	ANDI R31,HIGH(0x0)
000a8c 93ea      	ST   -Y,R30
000a8d 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1621         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000a8f 930a      	ST   -Y,R16
000a90 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1622         SPIMasterKirimData(data_low_byte);  //data low byte
000a92 933a      	ST   -Y,R19
000a93 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1623 
                 ;    1624         /*** Instruksi Load Program Memory Page pada Serial Programming ***/
                 ;    1625         //Load Program Memory High Byte
                 ;    1626         SPIMasterKirimData(0x48);
000a95 e4e8      	LDI  R30,LOW(72)
000a96 93ea      	ST   -Y,R30
000a97 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1627         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000a99 2fe1      	MOV  R30,R17
000a9a 70f0      	ANDI R31,HIGH(0x0)
000a9b 93ea      	ST   -Y,R30
000a9c 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1628         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000a9e 930a      	ST   -Y,R16
000a9f 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1629         SPIMasterKirimData(data_high_byte);  //data high byte
000aa1 932a      	ST   -Y,R18
000aa2 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1630 
                 ;    1631         /*** Instruksi Write Program Memory Page pada Serial Programming ***/
                 ;    1632         SPIMasterKirimData(0x4C);
000aa4 e4ec      	LDI  R30,LOW(76)
000aa5 93ea      	ST   -Y,R30
000aa6 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1633         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000aa8 2fe1      	MOV  R30,R17
000aa9 70f0      	ANDI R31,HIGH(0x0)
000aaa 93ea      	ST   -Y,R30
000aab 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1634         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000aad 930a      	ST   -Y,R16
000aae 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1635         SPIMasterKirimData(0x00);
000ab0 e0e0      	LDI  R30,LOW(0)
000ab1 93ea      	ST   -Y,R30
000ab2 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1636 
                 ;    1637         /*** Polling Data Flash Memory ***/
                 ;    1638         ISPPollingFlashMemory(addr_flash_memory_page);
000ab4 931a      	ST   -Y,R17
000ab5 930a      	ST   -Y,R16
000ab6 d0ad      	RCALL _ISPPollingFlashMemory
                 ;    1639 
                 ;    1640         /* Autoincrement alamat untuk writing flash memory dan parameter polling flash memory */
                 ;    1641         addr_flash_memory_page++;
000ab7 5f0f
000ab8 4f1f      	__ADDWRN 16,17,1
                 ;    1642 
                 ;    1643         //Simpan alamat halaman flash terakhir yang telah diakses
                 ;    1644         addr_page_flash_terakhir= addr_flash_memory_page;
000ab9 830e
000aba 831f      	__PUTWSR 16,17,6
                 ;    1645 
                 ;    1646         //Decrement
                 ;    1647         jml_page_data--;
000abb 85e8      	LDD  R30,Y+8
000abc 85f9      	LDD  R31,Y+8+1
000abd 9731      	SBIW R30,1
000abe 87e8      	STD  Y+8,R30
000abf 87f9      	STD  Y+8+1,R31
                 ;    1648     };
000ac0 cfae      	RJMP _0x13A
                 _0x13C:
                 ;    1649 
                 ;    1650     if(akhir_akses_devais)leaveProgrammingMode();
000ac1 fe21      	SBRS R2,1
000ac2 c002      	RJMP _0x13D
000ac3 940e 0c9e 	CALL _leaveProgrammingMode
                 ;    1651     return addr_page_flash_terakhir;
                 _0x13D:
000ac5 81ee      	LDD  R30,Y+6
000ac6 81ff      	LDD  R31,Y+6+1
000ac7 c098      	RJMP _0x165
                 ;    1652 }
                 ;    1653 
                 ;    1654 /***  Operasi Pembacaan Memori Flash Page Mode ***/
                 ;    1655 void ISPReadFlashMemory(unsigned int page_flash_max)
                 ;    1656 {
                 _ISPReadFlashMemory:
                 ;    1657      unsigned char data_flash;
                 ;    1658      unsigned int addr_flash_memory_page;
                 ;    1659      unsigned int i;
                 ;    1660 
                 ;    1661      data_flash= 0;
000ac8 940e 0d50 	CALL __SAVELOCR6
                 ;	page_flash_max -> Y+6
                 ;	data_flash -> R17
                 ;	addr_flash_memory_page -> R18,R19
                 ;	i -> R20,R21
000aca e010      	LDI  R17,LOW(0)
                 ;    1662      addr_flash_memory_page= 0;
000acb e020
000acc e030      	__GETWRN 18,19,0
                 ;    1663      i= 0;
000acd e040
000ace e050      	__GETWRN 20,21,0
                 ;    1664 
                 ;    1665      while(addr_flash_memory_page<page_flash_max)
                 _0x13E:
000acf 81ee      	LDD  R30,Y+6
000ad0 81ff      	LDD  R31,Y+6+1
000ad1 172e      	CP   R18,R30
000ad2 073f      	CPC  R19,R31
000ad3 f5a8      	BRSH _0x140
                 ;    1666      {
                 ;    1667           /*** Instruksi Read Program Memory pada Serial Programming ***/
                 ;    1668           //Read Program Memory Low Byte
                 ;    1669           SPIMasterKirimData(0x20);
000ad4 e2e0      	LDI  R30,LOW(32)
000ad5 93ea      	ST   -Y,R30
000ad6 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1670           SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000ad8 2fe3      	MOV  R30,R19
000ad9 70f0      	ANDI R31,HIGH(0x0)
000ada 93ea      	ST   -Y,R30
000adb 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1671           SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000add 932a      	ST   -Y,R18
000ade 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1672           data_flash= SPIMasterKirimData(0x00);
000ae0 e0e0      	LDI  R30,LOW(0)
000ae1 93ea      	ST   -Y,R30
000ae2 940e 0c5e 	CALL _SPIMasterKirimData
000ae4 2f1e      	MOV  R17,R30
                 ;    1673           tulisExtSRAM(i++, data_flash);
000ae5 01fa      	MOVW R30,R20
000ae6 5f4f
000ae7 4f5f      	__ADDWRN 20,21,1
000ae8 93fa      	ST   -Y,R31
000ae9 93ea      	ST   -Y,R30
000aea 931a      	ST   -Y,R17
000aeb 940e 09f8 	CALL _tulisExtSRAM
                 ;    1674 
                 ;    1675           //Read Program Memory High Byte
                 ;    1676           SPIMasterKirimData(0x28);
000aed e2e8      	LDI  R30,LOW(40)
000aee 93ea      	ST   -Y,R30
000aef 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1677           SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000af1 2fe3      	MOV  R30,R19
000af2 70f0      	ANDI R31,HIGH(0x0)
000af3 93ea      	ST   -Y,R30
000af4 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1678           SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000af6 932a      	ST   -Y,R18
000af7 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1679           data_flash= SPIMasterKirimData(0x00);
000af9 e0e0      	LDI  R30,LOW(0)
000afa 93ea      	ST   -Y,R30
000afb 940e 0c5e 	CALL _SPIMasterKirimData
000afd 2f1e      	MOV  R17,R30
                 ;    1680           tulisExtSRAM(i++, data_flash);
000afe 01fa      	MOVW R30,R20
000aff 5f4f
000b00 4f5f      	__ADDWRN 20,21,1
000b01 93fa      	ST   -Y,R31
000b02 93ea      	ST   -Y,R30
000b03 931a      	ST   -Y,R17
000b04 940e 09f8 	CALL _tulisExtSRAM
                 ;    1681 
                 ;    1682           /* Autoincrement alamat untuk writing flash memory dan parameter polling flash memory */
                 ;    1683           addr_flash_memory_page++;
000b06 5f2f
000b07 4f3f      	__ADDWRN 18,19,1
                 ;    1684      };
000b08 cfc6      	RJMP _0x13E
                 _0x140:
                 ;    1685 }
                 _0x166:
000b09 940e 0d57 	CALL __LOADLOCR6
000b0b 9628      	ADIW R28,8
000b0c 9508      	RET
                 ;    1686 /***  Operasi Pembacaan Memori Flash Page Mode ***/
                 ;    1687 unsigned int ISPReadHugeFlashMemory(unsigned int jml_halaman_flash, unsigned int addr_page_flash_terakhir)
                 ;    1688 {
                 _ISPReadHugeFlashMemory:
                 ;    1689      unsigned char data_flash;
                 ;    1690      unsigned int addr_flash_memory_page;
                 ;    1691      unsigned int i;
                 ;    1692 
                 ;    1693      addr_flash_memory_page= addr_page_flash_terakhir;
000b0d 940e 0d50 	CALL __SAVELOCR6
                 ;	jml_halaman_flash -> Y+8
                 ;	addr_page_flash_terakhir -> Y+6
                 ;	data_flash -> R17
                 ;	addr_flash_memory_page -> R18,R19
                 ;	i -> R20,R21
000b0f 812e
000b10 813f      	__GETWRS 18,19,6
                 ;    1694      i= 0;
000b11 e040
000b12 e050      	__GETWRN 20,21,0
                 ;    1695 
                 ;    1696      if(awal_akses_devais)
000b13 fe20      	SBRS R2,0
000b14 c004      	RJMP _0x141
                 ;    1697     {
                 ;    1698         enterProgrammingMode();
000b15 940e 0c65 	CALL _enterProgrammingMode
                 ;    1699         awal_akses_devais=0;
000b17 94e8      	CLT
000b18 f820      	BLD  R2,0
                 ;    1700     }
                 ;    1701 
                 ;    1702      while(jml_halaman_flash>0)
                 _0x141:
                 _0x142:
000b19 85a8      	LDD  R26,Y+8
000b1a 85b9      	LDD  R27,Y+8+1
000b1b 940e 0d4c 	CALL __CPW02
000b1d f5e0      	BRSH _0x144
                 ;    1703      {
                 ;    1704           /*** Instruksi Read Program Memory pada Serial Programming ***/
                 ;    1705           //Read Program Memory Low Byte
                 ;    1706           SPIMasterKirimData(0x20);
000b1e e2e0      	LDI  R30,LOW(32)
000b1f 93ea      	ST   -Y,R30
000b20 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1707           SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000b22 2fe3      	MOV  R30,R19
000b23 70f0      	ANDI R31,HIGH(0x0)
000b24 93ea      	ST   -Y,R30
000b25 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1708           SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000b27 932a      	ST   -Y,R18
000b28 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1709           data_flash= SPIMasterKirimData(0x00);
000b2a e0e0      	LDI  R30,LOW(0)
000b2b 93ea      	ST   -Y,R30
000b2c 940e 0c5e 	CALL _SPIMasterKirimData
000b2e 2f1e      	MOV  R17,R30
                 ;    1710           tulisExtSRAM(i++, data_flash);
000b2f 01fa      	MOVW R30,R20
000b30 5f4f
000b31 4f5f      	__ADDWRN 20,21,1
000b32 93fa      	ST   -Y,R31
000b33 93ea      	ST   -Y,R30
000b34 931a      	ST   -Y,R17
000b35 940e 09f8 	CALL _tulisExtSRAM
                 ;    1711 
                 ;    1712           //Read Program Memory High Byte
                 ;    1713           SPIMasterKirimData(0x28);
000b37 e2e8      	LDI  R30,LOW(40)
000b38 93ea      	ST   -Y,R30
000b39 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1714           SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000b3b 2fe3      	MOV  R30,R19
000b3c 70f0      	ANDI R31,HIGH(0x0)
000b3d 93ea      	ST   -Y,R30
000b3e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1715           SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000b40 932a      	ST   -Y,R18
000b41 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1716           data_flash= SPIMasterKirimData(0x00);
000b43 e0e0      	LDI  R30,LOW(0)
000b44 93ea      	ST   -Y,R30
000b45 940e 0c5e 	CALL _SPIMasterKirimData
000b47 2f1e      	MOV  R17,R30
                 ;    1717           tulisExtSRAM(i++, data_flash);
000b48 01fa      	MOVW R30,R20
000b49 5f4f
000b4a 4f5f      	__ADDWRN 20,21,1
000b4b 93fa      	ST   -Y,R31
000b4c 93ea      	ST   -Y,R30
000b4d 931a      	ST   -Y,R17
000b4e 940e 09f8 	CALL _tulisExtSRAM
                 ;    1718 
                 ;    1719           /* Autoincrement alamat untuk writing flash memory dan parameter polling flash memory */
                 ;    1720           addr_flash_memory_page++;
000b50 5f2f
000b51 4f3f      	__ADDWRN 18,19,1
                 ;    1721 
                 ;    1722           //Simpan alamat halaman flash terakhir yang telah diakses
                 ;    1723           addr_page_flash_terakhir= addr_flash_memory_page;
000b52 832e
000b53 833f      	__PUTWSR 18,19,6
                 ;    1724 
                 ;    1725          //Decrement
                 ;    1726          jml_halaman_flash--;
000b54 85e8      	LDD  R30,Y+8
000b55 85f9      	LDD  R31,Y+8+1
000b56 9731      	SBIW R30,1
000b57 87e8      	STD  Y+8,R30
000b58 87f9      	STD  Y+8+1,R31
                 ;    1727      };
000b59 cfbf      	RJMP _0x142
                 _0x144:
                 ;    1728      if(akhir_akses_devais)leaveProgrammingMode();
000b5a fe21      	SBRS R2,1
000b5b c002      	RJMP _0x145
000b5c 940e 0c9e 	CALL _leaveProgrammingMode
                 ;    1729      return addr_page_flash_terakhir;
                 _0x145:
000b5e 81ee      	LDD  R30,Y+6
000b5f 81ff      	LDD  R31,Y+6+1
                 _0x165:
000b60 940e 0d57 	CALL __LOADLOCR6
000b62 962a      	ADIW R28,10
000b63 9508      	RET
                 ;    1730 }
                 ;    1731 
                 ;    1732 /***  Operasi Polling Memori Flash Byte Mode untuk Menunggu Kesiapan Penulisan Byte Berikutnya***/
                 ;    1733 void ISPPollingFlashMemory(unsigned int addr_flash_memory_page)
                 ;    1734 {
                 _ISPPollingFlashMemory:
                 ;    1735     unsigned char ulang_polling_flash;
                 ;    1736     unsigned char data_flash_memory;
                 ;    1737 
                 ;    1738     //Reload jumlah pengulangan polling data flash memory
                 ;    1739     ulang_polling_flash=ULANG_POLLING_FLASH_MAX;
000b64 931a      	ST   -Y,R17
000b65 930a      	ST   -Y,R16
                 ;	addr_flash_memory_page -> Y+2
                 ;	ulang_polling_flash -> R17
                 ;	data_flash_memory -> R16
000b66 e012      	LDI  R17,LOW(2)
                 ;    1740 
                 ;    1741     //Polling Address Low Byte
                 ;    1742     while(ulang_polling_flash>0)
                 _0x146:
000b67 3011      	CPI  R17,1
000b68 f0e8      	BRLO _0x148
                 ;    1743     {
                 ;    1744         /*** Instruksi Read Program Memory pada Serial Programming ***/
                 ;    1745         SPIMasterKirimData(0x20);
000b69 e2e0      	LDI  R30,LOW(32)
000b6a 93ea      	ST   -Y,R30
000b6b 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1746         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000b6d 81eb      	LDD  R30,Y+3
000b6e 70f0      	ANDI R31,HIGH(0x0)
000b6f 93ea      	ST   -Y,R30
000b70 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1747         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000b72 81ea      	LDD  R30,Y+2
000b73 93ea      	ST   -Y,R30
000b74 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1748         data_flash_memory=SPIMasterKirimData(0x00);
000b76 e0e0      	LDI  R30,LOW(0)
000b77 93ea      	ST   -Y,R30
000b78 940e 0c5e 	CALL _SPIMasterKirimData
000b7a 2f0e      	MOV  R16,R30
                 ;    1749         ulang_polling_flash--;
000b7b 5011      	SUBI R17,1
                 ;    1750         if(data_flash_memory==0xFF)
000b7c 3f0f      	CPI  R16,255
000b7d f439      	BRNE _0x149
                 ;    1751         {
                 ;    1752             delay_ms(4.5);
000b7e e0e4      	LDI  R30,LOW(4)
000b7f e0f0      	LDI  R31,HIGH(4)
000b80 93fa      	ST   -Y,R31
000b81 93ea      	ST   -Y,R30
000b82 940e 0d1b 	CALL _delay_ms
                 ;    1753             ulang_polling_flash= 0;
000b84 e010      	LDI  R17,LOW(0)
                 ;    1754         }
                 ;    1755     };
                 _0x149:
000b85 cfe1      	RJMP _0x146
                 _0x148:
                 ;    1756 
                 ;    1757     //Reload jumlah pengulangan polling data flash memory
                 ;    1758     ulang_polling_flash=ULANG_POLLING_FLASH_MAX;
000b86 e012      	LDI  R17,LOW(2)
                 ;    1759 
                 ;    1760     //Polling Address High Byte
                 ;    1761     while(ulang_polling_flash>0)
                 _0x14A:
000b87 3011      	CPI  R17,1
000b88 f0e8      	BRLO _0x14C
                 ;    1762     {
                 ;    1763         /*** Instruksi Read Program Memory pada Serial Programming ***/
                 ;    1764         SPIMasterKirimData(0x28);
000b89 e2e8      	LDI  R30,LOW(40)
000b8a 93ea      	ST   -Y,R30
000b8b 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1765         SPIMasterKirimData((unsigned char)(addr_flash_memory_page>>8));
000b8d 81eb      	LDD  R30,Y+3
000b8e 70f0      	ANDI R31,HIGH(0x0)
000b8f 93ea      	ST   -Y,R30
000b90 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1766         SPIMasterKirimData((unsigned char) addr_flash_memory_page);
000b92 81ea      	LDD  R30,Y+2
000b93 93ea      	ST   -Y,R30
000b94 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1767         data_flash_memory=SPIMasterKirimData(0x00);
000b96 e0e0      	LDI  R30,LOW(0)
000b97 93ea      	ST   -Y,R30
000b98 940e 0c5e 	CALL _SPIMasterKirimData
000b9a 2f0e      	MOV  R16,R30
                 ;    1768         ulang_polling_flash--;
000b9b 5011      	SUBI R17,1
                 ;    1769         if(data_flash_memory==0xFF)
000b9c 3f0f      	CPI  R16,255
000b9d f439      	BRNE _0x14D
                 ;    1770         {
                 ;    1771             delay_ms(4.5);
000b9e e0e4      	LDI  R30,LOW(4)
000b9f e0f0      	LDI  R31,HIGH(4)
000ba0 93fa      	ST   -Y,R31
000ba1 93ea      	ST   -Y,R30
000ba2 940e 0d1b 	CALL _delay_ms
                 ;    1772             ulang_polling_flash= 0;
000ba4 e010      	LDI  R17,LOW(0)
                 ;    1773         }
                 ;    1774     };
                 _0x14D:
000ba5 cfe1      	RJMP _0x14A
                 _0x14C:
                 ;    1775 }
000ba6 8119      	LDD  R17,Y+1
000ba7 8108      	LDD  R16,Y+0
000ba8 9624      	ADIW R28,4
000ba9 9508      	RET
                 ;    1776 #include "fuse.h"
                 ;    1777 #include "extsram/extsram.h"
                 ;    1778 #include "isp/isp.h"
                 ;    1779 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    1784 
                 ;    1785 /*** Operasi Baca Kode Devais ***/
                 ;    1786 void ISPReadDevaisSignature(void)
                 ;    1787 {
                 _ISPReadDevaisSignature:
                 ;    1788     unsigned char i;
                 ;    1789 
                 ;    1790     /*** Instruksi Read Signature Byte pada Serial Programming ***/
                 ;    1791     //Devais Signature Byte ATmega8535
                 ;    1792     //0x00 0x1E
                 ;    1793     //0x01 0x93
                 ;    1794     //0x02 0x08
                 ;    1795     inisialisasiSPILowSpeed();
000baa 931a      	ST   -Y,R17
                 ;	i -> R17
000bab 940e 0c54 	CALL _inisialisasiSPILowSpeed
                 ;    1796     enterProgrammingMode();
000bad 940e 0c65 	CALL _enterProgrammingMode
                 ;    1797     for(i=0;i<3;i++)
000baf e010      	LDI  R17,LOW(0)
                 _0x14F:
000bb0 3013      	CPI  R17,3
000bb1 f4d0      	BRSH _0x150
                 ;    1798     {
                 ;    1799         SPIMasterKirimData(0x30);
000bb2 e3e0      	LDI  R30,LOW(48)
000bb3 93ea      	ST   -Y,R30
000bb4 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1800         SPIMasterKirimData(0x00);
000bb6 e0e0      	LDI  R30,LOW(0)
000bb7 93ea      	ST   -Y,R30
000bb8 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1801         SPIMasterKirimData(i);
000bba 931a      	ST   -Y,R17
000bbb 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1802         devais_signature[i]=SPIMasterKirimData(0x00);
000bbd 2fe1      	MOV  R30,R17
000bbe e0f0      	LDI  R31,0
000bbf 57ea      	SUBI R30,LOW(-_devais_signature)
000bc0 4ffd      	SBCI R31,HIGH(-_devais_signature)
000bc1 93ff      	PUSH R31
000bc2 93ef      	PUSH R30
000bc3 e0e0      	LDI  R30,LOW(0)
000bc4 93ea      	ST   -Y,R30
000bc5 940e 0c5e 	CALL _SPIMasterKirimData
000bc7 91af      	POP  R26
000bc8 91bf      	POP  R27
000bc9 93ec      	ST   X,R30
                 ;    1803     }
000bca 5f1f      	SUBI R17,-1
000bcb cfe4      	RJMP _0x14F
                 _0x150:
                 ;    1804     leaveProgrammingMode();
000bcc 940e 0c9e 	CALL _leaveProgrammingMode
                 ;    1805     inisialisasiSPIHighSpeed();
000bce 940e 0c59 	CALL _inisialisasiSPIHighSpeed
                 ;    1806 }
000bd0 c069      	RJMP _0x164
                 ;    1807 
                 ;    1808 /****************************************************************************************/
                 ;    1809 //0xD9 -->> unprog clk (int clk), unprog EESAVE, prog BOOTSz1 & BOOTSz1, unprog BOOTRST
                 ;    1810 //0xC9 -->> prog clk (ext clk), unprog EESAVE, prog BOOTSz1 & BOOTSz1, unprog BOOTRST
                 ;    1811 //0xE4 -->> programmed clk 8MHz, programmed SUT0
                 ;    1812 //0xEF -->> unprogrammed clk, programmed SUT0
                 ;    1813 /****************************************************************************************/
                 ;    1814 
                 ;    1815 //************** Operasi Fuse Low Byte **************//
                 ;    1816 /*
                 ;    1817 Konfigurasi Fuse Low Byte
                 ;    1818 Bit 7 -->> BODLEVEL  |  Bit 3 -->> CKSEL3
                 ;    1819 Bit 6 -->> BODEN     |  Bit 2 -->> CKSEL2
                 ;    1820 Bit 5 -->> SUT1      |  Bit 1 -->> CKSEL1
                 ;    1821 Bit 4 -->> SUT0      |  Bit 0 -->> CKSEL1
                 ;    1822 "0" = programmed
                 ;    1823 "1" = unprogrammed
                 ;    1824 */
                 ;    1825 
                 ;    1826 /*** Operasi Baca Fuse Low Byte ***/
                 ;    1827 unsigned char ISPReadLowFuseBits(void)
                 ;    1828 {
                 _ISPReadLowFuseBits:
                 ;    1829     unsigned char fuse_low_byte;
                 ;    1830 
                 ;    1831     /*** Instruksi Read Fuse Low Bits pada Serial Programming ***/
                 ;    1832     SPIMasterKirimData(0x50);
000bd1 931a      	ST   -Y,R17
                 ;	fuse_low_byte -> R17
000bd2 e5e0      	LDI  R30,LOW(80)
000bd3 93ea      	ST   -Y,R30
000bd4 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1833     SPIMasterKirimData(0x00);
000bd6 e0e0      	LDI  R30,LOW(0)
000bd7 93ea      	ST   -Y,R30
000bd8 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1834     SPIMasterKirimData(0x00);
000bda e0e0      	LDI  R30,LOW(0)
000bdb 93ea      	ST   -Y,R30
000bdc 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1835     fuse_low_byte=SPIMasterKirimData(0x00);
000bde e0e0      	LDI  R30,LOW(0)
000bdf 93ea      	ST   -Y,R30
000be0 940e 0c5e 	CALL _SPIMasterKirimData
000be2 2f1e      	MOV  R17,R30
                 ;    1836     return fuse_low_byte;
000be3 2fe1      	MOV  R30,R17
000be4 c055      	RJMP _0x164
                 ;    1837 }
                 ;    1838 
                 ;    1839 /*** Operasi Tulis Fuse Low Byte ***/
                 ;    1840 void ISPWriteLowFuseBits(unsigned char fuse_low_byte)
                 ;    1841 {
                 _ISPWriteLowFuseBits:
                 ;    1842     /*** Instruksi Write Fuse Low Bits pada Serial Programming ***/
                 ;    1843     SPIMasterKirimData(0xAC);
                 ;	fuse_low_byte -> Y+0
000be5 eaec      	LDI  R30,LOW(172)
000be6 93ea      	ST   -Y,R30
000be7 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1844     SPIMasterKirimData(0xA0);
000be9 eae0      	LDI  R30,LOW(160)
000bea 93ea      	ST   -Y,R30
000beb 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1845     SPIMasterKirimData(0x00);
000bed e0e0      	LDI  R30,LOW(0)
000bee 93ea      	ST   -Y,R30
000bef 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1846     SPIMasterKirimData(fuse_low_byte);
000bf1 81e8      	LD   R30,Y
000bf2 93ea      	ST   -Y,R30
000bf3 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1847     delay_ms(5);
000bf5 e0e5      	LDI  R30,LOW(5)
000bf6 e0f0      	LDI  R31,HIGH(5)
000bf7 93fa      	ST   -Y,R31
000bf8 93ea      	ST   -Y,R30
000bf9 940e 0d1b 	CALL _delay_ms
                 ;    1848 }
000bfb c056      	RJMP _0x163
                 ;    1849 
                 ;    1850 //************** Operasi Fuse High Byte **************//
                 ;    1851 /*
                 ;    1852 Konfigurasi Fuse High Byte
                 ;    1853 Bit 7 -->> @@@@@     |  Bit 3 -->> EESAVE
                 ;    1854 Bit 6 -->> @@@@@     |  Bit 2 -->> BOOTSZ1
                 ;    1855 Bit 5 -->> SPIEN     |  Bit 1 -->> BOOTSZ0
                 ;    1856 Bit 4 -->> CKOPT     |  Bit 0 -->> BOOTRST
                 ;    1857 "0" = programmed
                 ;    1858 "1" = unprogrammed
                 ;    1859 Ket: @@@@@ Tergantung Devais
                 ;    1860 */
                 ;    1861 
                 ;    1862 /*** Operasi Baca Fuse High Byte ***/
                 ;    1863 unsigned char ISPReadHighFuseBits(void)
                 ;    1864 {
                 _ISPReadHighFuseBits:
                 ;    1865     unsigned char fuse_high_byte;
                 ;    1866 
                 ;    1867     /*** Instruksi Read Fuse High Bits pada Serial Programming ***/
                 ;    1868     SPIMasterKirimData(0x58);
000bfc 931a      	ST   -Y,R17
                 ;	fuse_high_byte -> R17
000bfd e5e8      	LDI  R30,LOW(88)
000bfe 93ea      	ST   -Y,R30
000bff 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1869     SPIMasterKirimData(0x08);
000c01 e0e8      	LDI  R30,LOW(8)
000c02 93ea      	ST   -Y,R30
000c03 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1870     SPIMasterKirimData(0x00);
000c05 e0e0      	LDI  R30,LOW(0)
000c06 93ea      	ST   -Y,R30
000c07 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1871     fuse_high_byte=SPIMasterKirimData(0x00);
000c09 e0e0      	LDI  R30,LOW(0)
000c0a 93ea      	ST   -Y,R30
000c0b 940e 0c5e 	CALL _SPIMasterKirimData
000c0d 2f1e      	MOV  R17,R30
                 ;    1872     return fuse_high_byte;
000c0e 2fe1      	MOV  R30,R17
000c0f c02a      	RJMP _0x164
                 ;    1873 }
                 ;    1874 
                 ;    1875 /*** Operasi Tulis Fuse High Byte ***/
                 ;    1876 void ISPWriteHighFuseBits(unsigned char fuse_high_byte)
                 ;    1877 {
                 _ISPWriteHighFuseBits:
                 ;    1878     /*** Instruksi Write Fuse High Bits pada Serial Programming ***/
                 ;    1879     SPIMasterKirimData(0xAC);
                 ;	fuse_high_byte -> Y+0
000c10 eaec      	LDI  R30,LOW(172)
000c11 93ea      	ST   -Y,R30
000c12 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1880     SPIMasterKirimData(0xA8);
000c14 eae8      	LDI  R30,LOW(168)
000c15 93ea      	ST   -Y,R30
000c16 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1881     SPIMasterKirimData(0xFF);
000c18 efef      	LDI  R30,LOW(255)
000c19 93ea      	ST   -Y,R30
000c1a 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1882     SPIMasterKirimData(fuse_high_byte);
000c1c 81e8      	LD   R30,Y
000c1d 93ea      	ST   -Y,R30
000c1e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1883     delay_ms(5);
000c20 e0e5      	LDI  R30,LOW(5)
000c21 e0f0      	LDI  R31,HIGH(5)
000c22 93fa      	ST   -Y,R31
000c23 93ea      	ST   -Y,R30
000c24 940e 0d1b 	CALL _delay_ms
                 ;    1884 }
000c26 c02b      	RJMP _0x163
                 ;    1885 
                 ;    1886 unsigned char ISPReadExtendedFuseBits(void)
                 ;    1887 {
                 _ISPReadExtendedFuseBits:
                 ;    1888     unsigned char extended_fuse_byte;
                 ;    1889 
                 ;    1890     /*** Instruksi Read Extended Fuse Byte pada Serial Programming ***/
                 ;    1891     SPIMasterKirimData(0x50);
000c27 931a      	ST   -Y,R17
                 ;	extended_fuse_byte -> R17
000c28 e5e0      	LDI  R30,LOW(80)
000c29 93ea      	ST   -Y,R30
000c2a 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1892     SPIMasterKirimData(0x08);
000c2c e0e8      	LDI  R30,LOW(8)
000c2d 93ea      	ST   -Y,R30
000c2e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1893     SPIMasterKirimData(0x00);
000c30 e0e0      	LDI  R30,LOW(0)
000c31 93ea      	ST   -Y,R30
000c32 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1894     extended_fuse_byte= SPIMasterKirimData(0x00);
000c34 e0e0      	LDI  R30,LOW(0)
000c35 93ea      	ST   -Y,R30
000c36 940e 0c5e 	CALL _SPIMasterKirimData
000c38 2f1e      	MOV  R17,R30
                 ;    1895     return extended_fuse_byte;
000c39 2fe1      	MOV  R30,R17
                 _0x164:
000c3a 9119      	LD   R17,Y+
000c3b 9508      	RET
                 ;    1896 }
                 ;    1897 
                 ;    1898 void ISPWriteExtendedBits(unsigned char fuse_extended_byte)
                 ;    1899 {
                 _ISPWriteExtendedBits:
                 ;    1900     /*** Instruksi Write Fuse High Bits pada Serial Programming ***/
                 ;    1901     SPIMasterKirimData(0xAC);
                 ;	fuse_extended_byte -> Y+0
000c3c eaec      	LDI  R30,LOW(172)
000c3d 93ea      	ST   -Y,R30
000c3e 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1902     SPIMasterKirimData(0xA4);
000c40 eae4      	LDI  R30,LOW(164)
000c41 93ea      	ST   -Y,R30
000c42 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1903     SPIMasterKirimData(0xFF);
000c44 efef      	LDI  R30,LOW(255)
000c45 93ea      	ST   -Y,R30
000c46 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1904     SPIMasterKirimData(fuse_extended_byte);
000c48 81e8      	LD   R30,Y
000c49 93ea      	ST   -Y,R30
000c4a 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1905     delay_ms(5);
000c4c e0e5      	LDI  R30,LOW(5)
000c4d e0f0      	LDI  R31,HIGH(5)
000c4e 93fa      	ST   -Y,R31
000c4f 93ea      	ST   -Y,R30
000c50 940e 0d1b 	CALL _delay_ms
                 ;    1906 }
                 _0x163:
000c52 9621      	ADIW R28,1
000c53 9508      	RET
                 ;    1907 #include "isp.h"
                 ;    1908 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    1913 
                 ;    1914 void inisialisasiSPILowSpeed(void)
                 ;    1915 {
                 _inisialisasiSPILowSpeed:
                 ;    1916     // SPI initialization
                 ;    1917     // SPI Type: Master
                 ;    1918     // SPI Clock Rate: 86,400 kHz
                 ;    1919     // SPI Clock Phase: Cycle Half
                 ;    1920     // SPI Clock Polarity: Low
                 ;    1921     // SPI Data Order: MSB First
                 ;    1922     SPCR=0x53;
000c54 e5e3      	LDI  R30,LOW(83)
000c55 b9ed      	OUT  0xD,R30
                 ;    1923     SPSR=0x00;
000c56 e0e0      	LDI  R30,LOW(0)
000c57 b9ee      	OUT  0xE,R30
                 ;    1924 }
000c58 9508      	RET
                 ;    1925 
                 ;    1926 void inisialisasiSPIHighSpeed(void)
                 ;    1927 {
                 _inisialisasiSPIHighSpeed:
                 ;    1928     // SPI initialization
                 ;    1929     // SPI Type: Master
                 ;    1930     // SPI Clock Rate: 2*172,800 kHz
                 ;    1931     // SPI Clock Phase: Cycle Half
                 ;    1932     // SPI Clock Polarity: Low
                 ;    1933     // SPI Data Order: MSB First
                 ;    1934     SPCR=0x52;
000c59 e5e2      	LDI  R30,LOW(82)
000c5a b9ed      	OUT  0xD,R30
                 ;    1935     SPSR=0x01;
000c5b e0e1      	LDI  R30,LOW(1)
000c5c b9ee      	OUT  0xE,R30
                 ;    1936 }
000c5d 9508      	RET
                 ;    1937 
                 ;    1938 unsigned char SPIMasterKirimData(unsigned char data)
                 ;    1939 {
                 _SPIMasterKirimData:
                 ;    1940     //Start Transmission
                 ;    1941     SPDR = data;
                 ;	data -> Y+0
000c5e 81e8      	LD   R30,Y
000c5f b9ef      	OUT  0xF,R30
                 ;    1942     //Tunggu sampai SPI Interrupt Flag set
                 ;    1943     while(!(SPSR & (1<<SPIF)));
                 _0x151:
000c60 9b77      	SBIS 0xE,7
000c61 cffe      	RJMP _0x151
                 ;    1944     return SPDR;
000c62 b1ef      	IN   R30,0xF
000c63 9621      	ADIW R28,1
000c64 9508      	RET
                 ;    1945 }
                 ;    1946 
                 ;    1947 void enterProgrammingMode(void)
                 ;    1948 {
                 _enterProgrammingMode:
                 ;    1949     /*** Instruksi Programming Enable pada Serial Programming ***/
                 ;    1950     //Reset harus diberi pulsa positif minimal selama 2 siklus clock CPU setelah pin SCK diset 0
                 ;    1951     SCK=0;
000c65 98c7      	CBI  0x18,7
                 ;    1952     RESET_SLAVE_NONAKTIF();
000c66 9ac4      	SBI  0x18,4
                 ;    1953     delay_ms(1);
000c67 e0e1      	LDI  R30,LOW(1)
000c68 e0f0      	LDI  R31,HIGH(1)
000c69 93fa      	ST   -Y,R31
000c6a 93ea      	ST   -Y,R30
000c6b 940e 0d1b 	CALL _delay_ms
                 ;    1954     RESET_SLAVE_AKTIF();
000c6d b3e8      	IN   R30,0x18
000c6e 70e0      	ANDI R30,LOW(0x0)
000c6f bbe8      	OUT  0x18,R30
                 ;    1955     //Menunggu waktu tunda minimal selama 20 ms
                 ;    1956     delay_ms(20);
000c70 e1e4      	LDI  R30,LOW(20)
000c71 e0f0      	LDI  R31,HIGH(20)
000c72 93fa      	ST   -Y,R31
000c73 93ea      	ST   -Y,R30
000c74 940e 0d1b 	CALL _delay_ms
                 ;    1957     SPIMasterKirimData(0xAC);
000c76 eaec      	LDI  R30,LOW(172)
000c77 93ea      	ST   -Y,R30
000c78 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1958     SPIMasterKirimData(0x53);
000c7a e5e3      	LDI  R30,LOW(83)
000c7b 93ea      	ST   -Y,R30
000c7c 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1959     SPIMasterKirimData(0x00);
000c7e e0e0      	LDI  R30,LOW(0)
000c7f 93ea      	ST   -Y,R30
000c80 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1960     SPIMasterKirimData(0x00);
000c82 e0e0      	LDI  R30,LOW(0)
000c83 93ea      	ST   -Y,R30
000c84 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1961 }
000c86 9508      	RET
                 ;    1962 
                 ;    1963 void chipErase(void)
                 ;    1964 {
                 _chipErase:
                 ;    1965     SPIMasterKirimData(0xAC);
000c87 eaec      	LDI  R30,LOW(172)
000c88 93ea      	ST   -Y,R30
000c89 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1966     SPIMasterKirimData(0x80);
000c8b e8e0      	LDI  R30,LOW(128)
000c8c 93ea      	ST   -Y,R30
000c8d 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1967     SPIMasterKirimData(0x00);
000c8f e0e0      	LDI  R30,LOW(0)
000c90 93ea      	ST   -Y,R30
000c91 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1968     SPIMasterKirimData(0x00);
000c93 e0e0      	LDI  R30,LOW(0)
000c94 93ea      	ST   -Y,R30
000c95 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1969     //Menunggu waktu tunda minimal selama 10 ms
                 ;    1970     delay_ms(10);
000c97 e0ea      	LDI  R30,LOW(10)
000c98 e0f0      	LDI  R31,HIGH(10)
000c99 93fa      	ST   -Y,R31
000c9a 93ea      	ST   -Y,R30
000c9b 940e 0d1b 	CALL _delay_ms
                 ;    1971 }
000c9d 9508      	RET
                 ;    1972 
                 ;    1973 void leaveProgrammingMode(void)
                 ;    1974 {
                 _leaveProgrammingMode:
                 ;    1975     RESET_SLAVE_NONAKTIF();
000c9e 9ac4      	SBI  0x18,4
                 ;    1976     //Indikator Leave Programming Mode yaitu matinya LED reset pada MK Target
                 ;    1977 }
000c9f 9508      	RET
                 ;    1978 /************************************************************************************************************/
                 ;    1979 unsigned char cekEksistensiDevais(void)
                 ;    1980 {
                 _cekEksistensiDevais:
                 ;    1981    unsigned char status_eksistensi_devais;
                 ;    1982    unsigned char respon_devais;
                 ;    1983 
                 ;    1984    do
000ca0 931a      	ST   -Y,R17
000ca1 930a      	ST   -Y,R16
                 ;	status_eksistensi_devais -> R17
                 ;	respon_devais -> R16
                 _0x155:
                 ;    1985    {
                 ;    1986        enterProgrammingMode();
000ca2 940e 0c65 	CALL _enterProgrammingMode
                 ;    1987        SPIMasterKirimData(0xAC);
000ca4 eaec      	LDI  R30,LOW(172)
000ca5 93ea      	ST   -Y,R30
000ca6 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1988        SPIMasterKirimData(0x53);
000ca8 e5e3      	LDI  R30,LOW(83)
000ca9 93ea      	ST   -Y,R30
000caa 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1989        respon_devais= SPIMasterKirimData(0x00);
000cac e0e0      	LDI  R30,LOW(0)
000cad 93ea      	ST   -Y,R30
000cae 940e 0c5e 	CALL _SPIMasterKirimData
000cb0 2f0e      	MOV  R16,R30
                 ;    1990        SPIMasterKirimData(0x00);
000cb1 e0e0      	LDI  R30,LOW(0)
000cb2 93ea      	ST   -Y,R30
000cb3 940e 0c5e 	CALL _SPIMasterKirimData
                 ;    1991        if(respon_devais!=0x53) kirimKonfirmasiGAGAL();
000cb5 3503      	CPI  R16,83
000cb6 f019      	BREQ _0x157
000cb7 940e 0331 	CALL _kirimKonfirmasiGAGAL
                 ;    1992        else status_eksistensi_devais= 1;
000cb9 c001      	RJMP _0x158
                 _0x157:
000cba e011      	LDI  R17,LOW(1)
                 ;    1993        leaveProgrammingMode();
                 _0x158:
000cbb 940e 0c9e 	CALL _leaveProgrammingMode
                 ;    1994    }
                 ;    1995    while(!status_eksistensi_devais);
000cbd 3010      	CPI  R17,0
000cbe f319      	BREQ _0x155
                 ;    1996    return status_eksistensi_devais;
000cbf 2fe1      	MOV  R30,R17
000cc0 9109      	LD   R16,Y+
000cc1 9119      	LD   R17,Y+
000cc2 9508      	RET
                 ;    1997 }
                 ;    1998 #include "timer.h"
                 ;    1999 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    2004 
                 ;    2005 void inisialisasiTimer(void)
                 ;    2006 {
                 _inisialisasiTimer:
                 ;    2007     // Timer/Counter 0 initialization
                 ;    2008     // Clock source: System Clock
                 ;    2009     // Clock value: 11059,200 kHz
                 ;    2010     // Mode: CTC top=OCR0
                 ;    2011     // OC0 output: Toggle on compare match
                 ;    2012     TCCR0=0x19;
000cc3 e1e9      	LDI  R30,LOW(25)
000cc4 bfe3      	OUT  0x33,R30
                 ;    2013     TCNT0=0x00;
000cc5 e0e0      	LDI  R30,LOW(0)
000cc6 bfe2      	OUT  0x32,R30
                 ;    2014     OCR0=0x04;
000cc7 e0e4      	LDI  R30,LOW(4)
000cc8 bfe1      	OUT  0x31,R30
                 ;    2015 
                 ;    2016     // Timer/Counter 1 initialization
                 ;    2017     // Clock source: System Clock
                 ;    2018     // Clock value: 1382,400 kHz
                 ;    2019     // Mode: Normal top=FFFFh
                 ;    2020     // OC1A output: Discon.
                 ;    2021     // OC1B output: Discon.
                 ;    2022     // Noise Canceler: Off
                 ;    2023     // Input Capture on Falling Edge
                 ;    2024     // Timer 1 Overflow Interrupt: Off
                 ;    2025     // Input Capture Interrupt: Off
                 ;    2026     // Compare A Match Interrupt: On
                 ;    2027     // Compare B Match Interrupt: Off
                 ;    2028     TCCR1A=0x00;
000cc9 e0e0      	LDI  R30,LOW(0)
000cca bdef      	OUT  0x2F,R30
                 ;    2029     TCCR1B=0x02;
000ccb e0e2      	LDI  R30,LOW(2)
000ccc bdee      	OUT  0x2E,R30
                 ;    2030     TCNT1H=0x00;
000ccd e0e0      	LDI  R30,LOW(0)
000cce bded      	OUT  0x2D,R30
                 ;    2031     TCNT1L=0x00;
000ccf bdec      	OUT  0x2C,R30
                 ;    2032     ICR1H=0x00;
000cd0 bde5      	OUT  0x25,R30
                 ;    2033     ICR1L=0x00;
000cd1 bde4      	OUT  0x24,R30
                 ;    2034     OCR1AH=0x6B;
000cd2 e6eb      	LDI  R30,LOW(107)
000cd3 bdeb      	OUT  0x2B,R30
                 ;    2035     OCR1AL=0xFF;
000cd4 efef      	LDI  R30,LOW(255)
000cd5 bdea      	OUT  0x2A,R30
                 ;    2036     OCR1BH=0x00;
000cd6 e0e0      	LDI  R30,LOW(0)
000cd7 bde9      	OUT  0x29,R30
                 ;    2037     OCR1BL=0x00;
000cd8 bde8      	OUT  0x28,R30
                 ;    2038 
                 ;    2039     // Timer/Counter 2 initialization
                 ;    2040     // Clock source: System Clock
                 ;    2041     // Clock value: 11059,200 kHz
                 ;    2042     // Mode: CTC top=OCR2
                 ;    2043     // OC2 output: Toggle on compare match
                 ;    2044     ASSR=0x00;
000cd9 bde6      	OUT  0x26,R30
                 ;    2045     TCCR2=0x19;
000cda e1e9      	LDI  R30,LOW(25)
000cdb bde7      	OUT  0x27,R30
                 ;    2046     TCNT2=0x00;
000cdc e0e0      	LDI  R30,LOW(0)
000cdd bde3      	OUT  0x23,R30
                 ;    2047     OCR2=0x91;
000cde e9e1      	LDI  R30,LOW(145)
000cdf bde2      	OUT  0x22,R30
                 ;    2048 
                 ;    2049     // Timer/Counter 3 initialization
                 ;    2050     // Clock value: Timer 3 Stopped
                 ;    2051     // Mode: Normal top=FFFFh
                 ;    2052     // Noise Canceler: Off
                 ;    2053     // Input Capture on Falling Edge
                 ;    2054     // OC3A output: Discon.
                 ;    2055     // OC3B output: Discon.
                 ;    2056     // Timer 3 Overflow Interrupt: Off
                 ;    2057     // Input Capture Interrupt: Off
                 ;    2058     // Compare A Match Interrupt: Off
                 ;    2059     // Compare B Match Interrupt: Off
                 ;    2060     TCCR3A=0x00;
000ce0 e0e0      	LDI  R30,LOW(0)
000ce1 93e0 008b 	STS  139,R30
                 ;    2061     TCCR3B=0x00;
000ce3 93e0 008a 	STS  138,R30
                 ;    2062     TCNT3H=0x00;
000ce5 93e0 0089 	STS  137,R30
                 ;    2063     TCNT3L=0x00;
000ce7 93e0 0088 	STS  136,R30
                 ;    2064     ICR3H=0x00;
000ce9 93e0 0081 	STS  129,R30
                 ;    2065     ICR3L=0x00;
000ceb 93e0 0080 	STS  128,R30
                 ;    2066     OCR3AH=0x00;
000ced 93e0 0087 	STS  135,R30
                 ;    2067     OCR3AL=0x00;
000cef 93e0 0086 	STS  134,R30
                 ;    2068     OCR3BH=0x00;
000cf1 93e0 0085 	STS  133,R30
                 ;    2069     OCR3BL=0x00;
000cf3 93e0 0084 	STS  132,R30
                 ;    2070 
                 ;    2071     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ;    2072     TIMSK=0x40;
000cf5 e4e0      	LDI  R30,LOW(64)
000cf6 bfe9      	OUT  0x39,R30
                 ;    2073     ETIMSK=0x00;
000cf7 e0e0      	LDI  R30,LOW(0)
000cf8 93e0 007d 	STS  125,R30
                 ;    2074 }
000cfa 9508      	RET
                 ;    2075 #include "usart.h"
                 ;    2076 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;    2081 
                 ;    2082 void inisialisasiUSART()
                 ;    2083 {
                 _inisialisasiUSART:
                 ;    2084     // USART0 initialization
                 ;    2085     // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ;    2086     // USART0 Receiver: On
                 ;    2087     // USART0 Transmitter: On
                 ;    2088     // USART0 Mode: Asynchronous
                 ;    2089     // USART0 Baud Rate: 2400
                 ;    2090     UCSR0A=0x00;
000cfb e0e0      	LDI  R30,LOW(0)
000cfc b9eb      	OUT  0xB,R30
                 ;    2091     UCSR0B=0x98;
000cfd e9e8      	LDI  R30,LOW(152)
000cfe b9ea      	OUT  0xA,R30
                 ;    2092     UCSR0C=0x8E;
000cff e8ee      	LDI  R30,LOW(142)
000d00 bde0      	OUT  0x20,R30
                 ;    2093     UBRR0H=0x01;
000d01 e0e1      	LDI  R30,LOW(1)
000d02 bde0      	OUT  0x20,R30
                 ;    2094     UBRR0L=0x1F;
000d03 e1ef      	LDI  R30,LOW(31)
000d04 b9e9      	OUT  0x9,R30
                 ;    2095 
                 ;    2096     // USART1 initialization
                 ;    2097     // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ;    2098     // USART1 Receiver: Off
                 ;    2099     // USART1 Transmitter: On
                 ;    2100     // USART1 Mode: Asynchronous
                 ;    2101     // USART1 Baud Rate: 2400
                 ;    2102     UCSR1A=0x00;
000d05 e0e0      	LDI  R30,LOW(0)
000d06 b9e2      	OUT  0x2,R30
                 ;    2103     UCSR1B=0x08;
000d07 e0e8      	LDI  R30,LOW(8)
000d08 b9e1      	OUT  0x1,R30
                 ;    2104     UCSR1C=0x8E;
000d09 e8ee      	LDI  R30,LOW(142)
000d0a bfec      	OUT  0x3C,R30
                 ;    2105     UBRR1H=0x01;
000d0b e0e1      	LDI  R30,LOW(1)
000d0c bfec      	OUT  0x3C,R30
                 ;    2106     UBRR1L=0x1F;
000d0d e1ef      	LDI  R30,LOW(31)
000d0e b9e0      	OUT  0x0,R30
                 ;    2107 }
000d0f 9508      	RET
                 ;    2108 
                 ;    2109 void kirimDataSerialIR(unsigned char data)
                 ;    2110 {
                 _kirimDataSerialIR:
                 ;    2111     //Wait for empty transmit buffer
                 ;    2112     while (!(UCSR0A & (1<<UDRE)));
                 ;	data -> Y+0
                 _0x159:
000d10 9b5d      	SBIS 0xB,5
000d11 cffe      	RJMP _0x159
                 ;    2113     UDR0=data;
000d12 81e8      	LD   R30,Y
000d13 b9ec      	OUT  0xC,R30
                 ;    2114 }
000d14 c004      	RJMP _0x162
                 ;    2115 
                 ;    2116 //Pengiriman data serial untuk debugging program
                 ;    2117 void kirimDataSerial(unsigned char data)
                 ;    2118 {
                 _kirimDataSerial:
                 ;    2119     //Wait for empty transmit buffer
                 ;    2120     while (!(UCSR1A & (1<<UDRE)));
                 ;	data -> Y+0
                 _0x15C:
000d15 9b15      	SBIS 0x2,5
000d16 cffe      	RJMP _0x15C
                 ;    2121     UDR1=data;
000d17 81e8      	LD   R30,Y
000d18 b9e3      	OUT  0x3,R30
                 ;    2122 }
                 _0x162:
000d19 9621      	ADIW R28,1
000d1a 9508      	RET
                 
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 _delay_ms:
000d1b 91e9      	ld   r30,y+
000d1c 91f9      	ld   r31,y+
000d1d 9630      	adiw r30,0
000d1e f039      	breq __delay_ms1
                 __delay_ms0:
000d1f ec8d
000d20 e09a
000d21 9701
000d22 f7f1      	__DELAY_USW 0xACD
000d23 95a8      	wdr
000d24 9731      	sbiw r30,1
000d25 f7c9      	brne __delay_ms0
                 __delay_ms1:
000d26 9508      	ret
                 
                 __LSLW4:
000d27 0fee      	LSL  R30
000d28 1fff      	ROL  R31
                 __LSLW3:
000d29 0fee      	LSL  R30
000d2a 1fff      	ROL  R31
                 __LSLW2:
000d2b 0fee      	LSL  R30
000d2c 1fff      	ROL  R31
000d2d 0fee      	LSL  R30
000d2e 1fff      	ROL  R31
000d2f 9508      	RET
                 
                 __LSRW4:
000d30 95f6      	LSR  R31
000d31 95e7      	ROR  R30
                 __LSRW3:
000d32 95f6      	LSR  R31
000d33 95e7      	ROR  R30
                 __LSRW2:
000d34 95f6      	LSR  R31
000d35 95e7      	ROR  R30
000d36 95f6      	LSR  R31
000d37 95e7      	ROR  R30
000d38 9508      	RET
                 
                 __DIVW21U:
000d39 2400      	CLR  R0
000d3a 2411      	CLR  R1
000d3b e190      	LDI  R25,16
                 __DIVW21U1:
000d3c 0faa      	LSL  R26
000d3d 1fbb      	ROL  R27
000d3e 1c00      	ROL  R0
000d3f 1c11      	ROL  R1
000d40 1a0e      	SUB  R0,R30
000d41 0a1f      	SBC  R1,R31
000d42 f418      	BRCC __DIVW21U2
000d43 0e0e      	ADD  R0,R30
000d44 1e1f      	ADC  R1,R31
000d45 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d46 60a1      	SBR  R26,1
                 __DIVW21U3:
000d47 959a      	DEC  R25
000d48 f799      	BRNE __DIVW21U1
000d49 01fd      	MOVW R30,R26
000d4a 01d0      	MOVW R26,R0
000d4b 9508      	RET
                 
                 __CPW02:
000d4c 2400      	CLR  R0
000d4d 160a      	CP   R0,R26
000d4e 060b      	CPC  R0,R27
000d4f 9508      	RET
                 
                 __SAVELOCR6:
000d50 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d51 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d52 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d53 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d54 931a      	ST   -Y,R17
000d55 930a      	ST   -Y,R16
000d56 9508      	RET
                 
                 __LOADLOCR6:
000d57 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d58 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d59 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d5a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d5b 8119      	LDD  R17,Y+1
000d5c 8108      	LD   R16,Y
000d5d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega162 register use summary:
r0 :  17 r1 :   8 r2 :  55 r3 :  21 r4 :   3 r5 :  24 r6 :   3 r7 :   4 
r8 :  38 r9 :  13 r10:  20 r11:  13 r12:   0 r13:  11 r14:   0 r15:  35 
r16:  78 r17: 178 r18:  48 r19:  41 r20:  29 r21:  20 r22:   4 r23:   2 
r24:  11 r25:   7 r26: 117 r27:  48 r28:  70 r29:   1 r30:1098 r31: 225 
x  :  17 y  : 501 z  :  27 
Registers used: 33 out of 35 (94.3%)

ATmega162 instruction use summary:
adc   :  12 add   :  12 adiw  :  60 and   :   0 andi  :  22 asr   :   0 
bclr  :   0 bld   :  69 brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 
break :   0 breq  :  24 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  10 brlt  :   0 brmi  :   0 brne  : 100 brpl  :   0 
brsh  :  19 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  : 330 cbi   :  39 cbr   :   0 clc   :   0 clh   :   0 
cli   :  17 cln   :   0 clr   :  22 cls   :   0 clt   :  22 clv   :   0 
clz   :   0 com   :   0 cp    :  66 cpc   :  10 cpi   :  72 cpse  :   0 
dec   :   2 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   6 inc   :   9 jmp   :  33 ld    :  54 ldd   :  80 
ldi   : 432 lds   :  73 lpm   :   7 lsl   :   5 lsr   :  10 mov   :  96 
movw  :  70 mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   1 
or    :   0 ori   :   0 out   :  71 pop   :  11 push  :  12 rcall :  11 
ret   :  52 reti  :   2 rjmp  : 161 rol   :   7 ror   :  10 sbc   :   1 
sbci  :  34 sbi   :  42 sbic  :   0 sbis  :   3 sbiw  :  27 sbr   :   1 
sbrc  :   7 sbrs  :  27 sec   :   0 seh   :   0 sei   :  16 sen   :   0 
ser   :   0 ses   :   0 set   :  27 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 366 std   :  38 sts   : 105 sub   :   1 subi  :  57 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 59 out of 111 (53.2%)

ATmega162 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001abc   6842      2   6844   16384  41.8%
[.dseg] 0x000100 0x0003a2      0    418    418    1024  40.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
