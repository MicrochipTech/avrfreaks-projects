
the_clapper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000854  000008e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000854  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800126  00800126  0000090e  2**0
                  ALLOC
  3 .stab         000009e4  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00001570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef7  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000032c  00000000  00000000  0000256f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c3  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b56  00000000  00000000  000035a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000040f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__bad_interrupt>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__vector_14>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	1b c0       	rjmp	.+54     	; 0x5e <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	e4 e5       	ldi	r30, 0x54	; 84
  3c:	f8 e0       	ldi	r31, 0x08	; 8
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	a6 32       	cpi	r26, 0x26	; 38
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	11 e0       	ldi	r17, 0x01	; 1
  4c:	a6 e2       	ldi	r26, 0x26	; 38
  4e:	b1 e0       	ldi	r27, 0x01	; 1
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a8 34       	cpi	r26, 0x48	; 72
  56:	b1 07       	cpc	r27, r17
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	f7 d2       	rcall	.+1518   	; 0x64a <main>
  5c:	f9 c3       	rjmp	.+2034   	; 0x850 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <__vector_14>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

// Timer0 overflow interrupt
ISR(TIMER0_OVF_vect) {
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	2f 93       	push	r18
  6c:	3f 93       	push	r19
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
//	wdt_reset();
	unsigned long m = timer0_millis;
  76:	80 91 26 01 	lds	r24, 0x0126
  7a:	90 91 27 01 	lds	r25, 0x0127
  7e:	a0 91 28 01 	lds	r26, 0x0128
  82:	b0 91 29 01 	lds	r27, 0x0129
	unsigned char f = timer0_fract;
  86:	30 91 45 01 	lds	r19, 0x0145
	
	m += MILLIS_INC;
	f += FRACT_INC;
  8a:	23 2f       	mov	r18, r19
  8c:	20 5d       	subi	r18, 0xD0	; 208
	if (f >= FRACT_MAX) {
  8e:	2d 37       	cpi	r18, 0x7D	; 125
  90:	20 f4       	brcc	.+8      	; 0x9a <__vector_14+0x3a>
ISR(TIMER0_OVF_vect) {
//	wdt_reset();
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;
	
	m += MILLIS_INC;
  92:	40 96       	adiw	r24, 0x10	; 16
  94:	a1 1d       	adc	r26, r1
  96:	b1 1d       	adc	r27, r1
  98:	05 c0       	rjmp	.+10     	; 0xa4 <__vector_14+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
  9a:	23 2f       	mov	r18, r19
  9c:	2d 54       	subi	r18, 0x4D	; 77
		m += 1;
  9e:	41 96       	adiw	r24, 0x11	; 17
  a0:	a1 1d       	adc	r26, r1
  a2:	b1 1d       	adc	r27, r1
	}
	timer0_fract = f;
  a4:	20 93 45 01 	sts	0x0145, r18
	timer0_millis = m;
  a8:	80 93 26 01 	sts	0x0126, r24
  ac:	90 93 27 01 	sts	0x0127, r25
  b0:	a0 93 28 01 	sts	0x0128, r26
  b4:	b0 93 29 01 	sts	0x0129, r27
	timer0_overflow_count++;
  b8:	80 91 2a 01 	lds	r24, 0x012A
  bc:	90 91 2b 01 	lds	r25, 0x012B
  c0:	a0 91 2c 01 	lds	r26, 0x012C
  c4:	b0 91 2d 01 	lds	r27, 0x012D
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	80 93 2a 01 	sts	0x012A, r24
  d2:	90 93 2b 01 	sts	0x012B, r25
  d6:	a0 93 2c 01 	sts	0x012C, r26
  da:	b0 93 2d 01 	sts	0x012D, r27
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <millis>:

unsigned long millis(void) {
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
	unsigned long mil;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  f8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  fa:	f8 94       	cli
		mil = timer0_millis;
  fc:	00 91 26 01 	lds	r16, 0x0126
 100:	10 91 27 01 	lds	r17, 0x0127
 104:	20 91 28 01 	lds	r18, 0x0128
 108:	30 91 29 01 	lds	r19, 0x0129
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 10c:	8f bf       	out	0x3f, r24	; 63
	}
	return mil;
}
 10e:	b8 01       	movw	r22, r16
 110:	c9 01       	movw	r24, r18
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 118:	4f 92       	push	r4
 11a:	5f 92       	push	r5
 11c:	6f 92       	push	r6
 11e:	7f 92       	push	r7
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <map+0x1e>
 136:	00 d0       	rcall	.+0      	; 0x138 <map+0x20>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	29 01       	movw	r4, r18
 13e:	3a 01       	movw	r6, r20
 140:	e9 82       	std	Y+1, r14	; 0x01
 142:	fa 82       	std	Y+2, r15	; 0x02
 144:	0b 83       	std	Y+3, r16	; 0x03
 146:	1c 83       	std	Y+4, r17	; 0x04
 148:	76 01       	movw	r14, r12
 14a:	65 01       	movw	r12, r10
 14c:	2d 89       	ldd	r18, Y+21	; 0x15
 14e:	3e 89       	ldd	r19, Y+22	; 0x16
 150:	4f 89       	ldd	r20, Y+23	; 0x17
 152:	58 8d       	ldd	r21, Y+24	; 0x18
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 154:	64 19       	sub	r22, r4
 156:	75 09       	sbc	r23, r5
 158:	86 09       	sbc	r24, r6
 15a:	97 09       	sbc	r25, r7
 15c:	2c 19       	sub	r18, r12
 15e:	3d 09       	sbc	r19, r13
 160:	4e 09       	sbc	r20, r14
 162:	5f 09       	sbc	r21, r15
 164:	df d2       	rcall	.+1470   	; 0x724 <__mulsi3>
 166:	29 81       	ldd	r18, Y+1	; 0x01
 168:	3a 81       	ldd	r19, Y+2	; 0x02
 16a:	4b 81       	ldd	r20, Y+3	; 0x03
 16c:	5c 81       	ldd	r21, Y+4	; 0x04
 16e:	24 19       	sub	r18, r4
 170:	35 09       	sbc	r19, r5
 172:	46 09       	sbc	r20, r6
 174:	57 09       	sbc	r21, r7
 176:	03 d3       	rcall	.+1542   	; 0x77e <__divmodsi4>
 178:	89 01       	movw	r16, r18
 17a:	9a 01       	movw	r18, r20
 17c:	0c 0d       	add	r16, r12
 17e:	1d 1d       	adc	r17, r13
 180:	2e 1d       	adc	r18, r14
 182:	3f 1d       	adc	r19, r15
}
 184:	b8 01       	movw	r22, r16
 186:	c9 01       	movw	r24, r18
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	7f 90       	pop	r7
 1a6:	6f 90       	pop	r6
 1a8:	5f 90       	pop	r5
 1aa:	4f 90       	pop	r4
 1ac:	08 95       	ret

000001ae <micros>:

unsigned long micros(void) {
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
	unsigned long m;
	uint8_t t;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 1b2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1b4:	f8 94       	cli
		m = timer0_overflow_count;
 1b6:	00 91 2a 01 	lds	r16, 0x012A
 1ba:	10 91 2b 01 	lds	r17, 0x012B
 1be:	20 91 2c 01 	lds	r18, 0x012C
 1c2:	30 91 2d 01 	lds	r19, 0x012D
		#if defined(TCNT0)
		t = TCNT0;
 1c6:	86 b5       	in	r24, 0x26	; 38
		#error TIMER 0 not defined
		#endif

		
		#ifdef TIFR0
		if ((TIFR0 & _BV(TOV0)) && (t < 255))
 1c8:	a8 9b       	sbis	0x15, 0	; 21
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <micros+0x2a>
 1cc:	8f 3f       	cpi	r24, 0xFF	; 255
 1ce:	21 f0       	breq	.+8      	; 0x1d8 <micros+0x2a>
		m++;
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	2f 4f       	sbci	r18, 0xFF	; 255
 1d6:	3f 4f       	sbci	r19, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1d8:	9f bf       	out	0x3f, r25	; 63
		#else
		if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
		#endif
	}	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1da:	32 2f       	mov	r19, r18
 1dc:	21 2f       	mov	r18, r17
 1de:	10 2f       	mov	r17, r16
 1e0:	00 27       	eor	r16, r16
 1e2:	08 0f       	add	r16, r24
 1e4:	11 1d       	adc	r17, r1
 1e6:	21 1d       	adc	r18, r1
 1e8:	31 1d       	adc	r19, r1
 1ea:	46 e0       	ldi	r20, 0x06	; 6
 1ec:	00 0f       	add	r16, r16
 1ee:	11 1f       	adc	r17, r17
 1f0:	22 1f       	adc	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	4a 95       	dec	r20
 1f6:	d1 f7       	brne	.-12     	; 0x1ec <micros+0x3e>
}
 1f8:	b8 01       	movw	r22, r16
 1fa:	c9 01       	movw	r24, r18
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <delay>:

void delay(unsigned long ms) {
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 212:	cd df       	rcall	.-102    	; 0x1ae <micros>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	ec 01       	movw	r28, r24

	while (ms > 0) {
 21a:	0e c0       	rjmp	.+28     	; 0x238 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
 21c:	c8 df       	rcall	.-112    	; 0x1ae <micros>
 21e:	6c 1b       	sub	r22, r28
 220:	7d 0b       	sbc	r23, r29
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	68 3e       	cpi	r22, 0xE8	; 232
 226:	78 07       	cpc	r23, r24
 228:	38 f0       	brcs	.+14     	; 0x238 <delay+0x36>
			ms--;
 22a:	08 94       	sec
 22c:	c1 08       	sbc	r12, r1
 22e:	d1 08       	sbc	r13, r1
 230:	e1 08       	sbc	r14, r1
 232:	f1 08       	sbc	r15, r1
			start += 1000;
 234:	c8 51       	subi	r28, 0x18	; 24
 236:	dc 4f       	sbci	r29, 0xFC	; 252
}

void delay(unsigned long ms) {
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 238:	c1 14       	cp	r12, r1
 23a:	d1 04       	cpc	r13, r1
 23c:	e1 04       	cpc	r14, r1
 23e:	f1 04       	cpc	r15, r1
 240:	69 f7       	brne	.-38     	; 0x21c <delay+0x1a>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <triggerRelay>:
				sbi(OUTPUTS_PORT, GRN_LED_PIN);      
			}
		}
}

void triggerRelay(void){
 250:	cf 93       	push	r28
 252:	df 93       	push	r29

	sbi(OUTPUTS_PORT, GRN_LED_PIN); // Turn on the Green LED
 254:	5a 9a       	sbi	0x0b, 2	; 11
	
	// toggle the relay output
	uint8_t val = bit_get( OUTPUTS_PORT, bit(RELAY_PIN) ); 
 256:	8b b1       	in	r24, 0x0b	; 11
	bit_write( !val, OUTPUTS_PORT, bit(RELAY_PIN) );
 258:	80 fd       	sbrc	r24, 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <triggerRelay+0x10>
 25c:	58 9a       	sbi	0x0b, 0	; 11
 25e:	01 c0       	rjmp	.+2      	; 0x262 <triggerRelay+0x12>
 260:	58 98       	cbi	0x0b, 0	; 11
				sbi(OUTPUTS_PORT, GRN_LED_PIN);      
			}
		}
}

void triggerRelay(void){
 262:	c4 e0       	ldi	r28, 0x04	; 4
 264:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t val = bit_get( OUTPUTS_PORT, bit(RELAY_PIN) ); 
	bit_write( !val, OUTPUTS_PORT, bit(RELAY_PIN) );
	
	// Blink the green LED a few times for more visual feedback.
	for (int i=0; i < 4; i++){
		cbi(OUTPUTS_PORT, GRN_LED_PIN);
 266:	5a 98       	cbi	0x0b, 2	; 11
		delay(75);
 268:	6b e4       	ldi	r22, 0x4B	; 75
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	c8 df       	rcall	.-112    	; 0x202 <delay>
		sbi(OUTPUTS_PORT, GRN_LED_PIN);
 272:	5a 9a       	sbi	0x0b, 2	; 11
		delay(75);
 274:	6b e4       	ldi	r22, 0x4B	; 75
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	c2 df       	rcall	.-124    	; 0x202 <delay>
 27e:	21 97       	sbiw	r28, 0x01	; 1
	// toggle the relay output
	uint8_t val = bit_get( OUTPUTS_PORT, bit(RELAY_PIN) ); 
	bit_write( !val, OUTPUTS_PORT, bit(RELAY_PIN) );
	
	// Blink the green LED a few times for more visual feedback.
	for (int i=0; i < 4; i++){
 280:	91 f7       	brne	.-28     	; 0x266 <triggerRelay+0x16>
		delay(75);
		sbi(OUTPUTS_PORT, GRN_LED_PIN);
		delay(75);
	}
	
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <checkClaps>:

// Sees if our clap matches the programmed sequence
boolean checkClaps(void){
 288:	2f 92       	push	r2
 28a:	3f 92       	push	r3
 28c:	4f 92       	push	r4
 28e:	5f 92       	push	r5
 290:	6f 92       	push	r6
 292:	7f 92       	push	r7
 294:	8f 92       	push	r8
 296:	9f 92       	push	r9
 298:	af 92       	push	r10
 29a:	bf 92       	push	r11
 29c:	cf 92       	push	r12
 29e:	df 92       	push	r13
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
  // Normalize the times
  for (int i=0;i<maximumClaps;i++) {
    clapReadings[i]= map(clapReadings[i],0, maxClapInterval, 0, 100);      
    timeDiff = abs(clapReadings[i]-secretCode[i]);
    if (timeDiff > rejectValue) // Individual value too far out of whack
      return false;
 2ac:	c1 e3       	ldi	r28, 0x31	; 49
 2ae:	d1 e0       	ldi	r29, 0x01	; 1
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	26 2e       	mov	r2, r22
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	36 2e       	mov	r3, r22
	}
	
}

// Sees if our clap matches the programmed sequence
boolean checkClaps(void){
 2b8:	d1 01       	movw	r26, r2
 2ba:	fe 01       	movw	r30, r28
 
  // Check if the number of claps
  unsigned int currentClapCount = 0;
  unsigned int secretClapCount = 0;
  unsigned int maxClapInterval = 0;   // We use this later to normalize the times.
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
// Sees if our clap matches the programmed sequence
boolean checkClaps(void){
 
  // Check if the number of claps
  unsigned int currentClapCount = 0;
  unsigned int secretClapCount = 0;
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0

// Sees if our clap matches the programmed sequence
boolean checkClaps(void){
 
  // Check if the number of claps
  unsigned int currentClapCount = 0;
 2c4:	88 24       	eor	r8, r8
 2c6:	99 24       	eor	r9, r9
  unsigned int secretClapCount = 0;
  unsigned int maxClapInterval = 0;   // We use this later to normalize the times.
  
  for (int i=0;i<maximumClaps;i++)  {
    if (clapReadings[i] > 0)
 2c8:	81 91       	ld	r24, Z+
 2ca:	91 91       	ld	r25, Z+
 2cc:	18 16       	cp	r1, r24
 2ce:	19 06       	cpc	r1, r25
 2d0:	1c f4       	brge	.+6      	; 0x2d8 <checkClaps+0x50>
		currentClapCount++;
 2d2:	08 94       	sec
 2d4:	81 1c       	adc	r8, r1
 2d6:	91 1c       	adc	r9, r1
    if (secretCode[i] > 0)
 2d8:	2d 91       	ld	r18, X+
 2da:	3d 91       	ld	r19, X+
 2dc:	12 16       	cp	r1, r18
 2de:	13 06       	cpc	r1, r19
 2e0:	14 f4       	brge	.+4      	; 0x2e6 <checkClaps+0x5e>
		secretClapCount++;
 2e2:	6f 5f       	subi	r22, 0xFF	; 255
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	48 17       	cp	r20, r24
 2e8:	59 07       	cpc	r21, r25
 2ea:	08 f4       	brcc	.+2      	; 0x2ee <checkClaps+0x66>
 2ec:	ac 01       	movw	r20, r24
  // Check if the number of claps
  unsigned int currentClapCount = 0;
  unsigned int secretClapCount = 0;
  unsigned int maxClapInterval = 0;   // We use this later to normalize the times.
  
  for (int i=0;i<maximumClaps;i++)  {
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	e5 34       	cpi	r30, 0x45	; 69
 2f2:	f8 07       	cpc	r31, r24
 2f4:	49 f7       	brne	.-46     	; 0x2c8 <checkClaps+0x40>
    if (clapReadings[i] > maxClapInterval) 	// collect normalization data while we're looping.
		maxClapInterval = clapReadings[i];
  }
  
  // If we're recording a new clap, save the info and get out of here.
  if (programmingFlag==true) {
 2f6:	80 91 2e 01 	lds	r24, 0x012E
 2fa:	88 23       	and	r24, r24
 2fc:	09 f4       	brne	.+2      	; 0x300 <__stack+0x1>
 2fe:	53 c0       	rjmp	.+166    	; 0x3a6 <__stack+0xa7>
 300:	05 e0       	ldi	r16, 0x05	; 5
 302:	11 e0       	ldi	r17, 0x01	; 1
	  
      for (int i=0;i<maximumClaps;i++) // normalize the times
		secretCode[i]= map(clapReadings[i],0, maxClapInterval, 0, 100); 
 304:	4a 01       	movw	r8, r20
 306:	aa 24       	eor	r10, r10
 308:	bb 24       	eor	r11, r11
 30a:	69 91       	ld	r22, Y+
 30c:	79 91       	ld	r23, Y+
 30e:	88 27       	eor	r24, r24
 310:	77 fd       	sbrc	r23, 7
 312:	80 95       	com	r24
 314:	98 2f       	mov	r25, r24
	}
	return mil;
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 316:	24 e6       	ldi	r18, 0x64	; 100
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	02 d2       	rcall	.+1028   	; 0x724 <__mulsi3>
 320:	a5 01       	movw	r20, r10
 322:	94 01       	movw	r18, r8
 324:	2c d2       	rcall	.+1112   	; 0x77e <__divmodsi4>
  
  // If we're recording a new clap, save the info and get out of here.
  if (programmingFlag==true) {
	  
      for (int i=0;i<maximumClaps;i++) // normalize the times
		secretCode[i]= map(clapReadings[i],0, maxClapInterval, 0, 100); 
 326:	f8 01       	movw	r30, r16
 328:	21 93       	st	Z+, r18
 32a:	31 93       	st	Z+, r19
 32c:	8f 01       	movw	r16, r30
  }
  
  // If we're recording a new clap, save the info and get out of here.
  if (programmingFlag==true) {
	  
      for (int i=0;i<maximumClaps;i++) // normalize the times
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	c5 34       	cpi	r28, 0x45	; 69
 332:	df 07       	cpc	r29, r31
 334:	51 f7       	brne	.-44     	; 0x30a <__stack+0xb>
		secretCode[i]= map(clapReadings[i],0, maxClapInterval, 0, 100); 

      // And flash the lights in the recorded pattern to let us know it's been programmed.
      cbi(OUTPUTS_PORT, GRN_LED_PIN);
 336:	5a 98       	cbi	0x0b, 2	; 11
      cbi(OUTPUTS_PORT, RED_LED_PIN);
 338:	59 98       	cbi	0x0b, 1	; 11
      delay(450);
 33a:	62 ec       	ldi	r22, 0xC2	; 194
 33c:	71 e0       	ldi	r23, 0x01	; 1
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	5f df       	rcall	.-322    	; 0x202 <delay>
      sbi(OUTPUTS_PORT, GRN_LED_PIN);
 344:	5a 9a       	sbi	0x0b, 2	; 11
      sbi(OUTPUTS_PORT, RED_LED_PIN);
 346:	59 9a       	sbi	0x0b, 1	; 11
      delay(50);
 348:	62 e3       	ldi	r22, 0x32	; 50
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	58 df       	rcall	.-336    	; 0x202 <delay>
	}
	return mil;
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 352:	54 e6       	ldi	r21, 0x64	; 100
 354:	c5 2e       	mov	r12, r21
 356:	d1 2c       	mov	r13, r1
 358:	e1 2c       	mov	r14, r1
 35a:	f1 2c       	mov	r15, r1
      delay(450);
      sbi(OUTPUTS_PORT, GRN_LED_PIN);
      sbi(OUTPUTS_PORT, RED_LED_PIN);
      delay(50);
      for (int j=0; j<maximumClaps ; j++) {
        cbi(OUTPUTS_PORT, GRN_LED_PIN);
 35c:	5a 98       	cbi	0x0b, 2	; 11
        cbi(OUTPUTS_PORT, RED_LED_PIN);  
 35e:	59 98       	cbi	0x0b, 1	; 11
        // only turn it on if there's a delay
        if (secretCode[j] > 0) {                                   
 360:	f1 01       	movw	r30, r2
 362:	61 91       	ld	r22, Z+
 364:	71 91       	ld	r23, Z+
 366:	1f 01       	movw	r2, r30
 368:	16 16       	cp	r1, r22
 36a:	17 06       	cpc	r1, r23
 36c:	7c f4       	brge	.+30     	; 0x38c <__stack+0x8d>
          delay( map(secretCode[j],0, 100, 0, maxClapInterval) ); // Expand the time back out to what it was. Roughly. 
 36e:	88 27       	eor	r24, r24
 370:	77 fd       	sbrc	r23, 7
 372:	80 95       	com	r24
 374:	98 2f       	mov	r25, r24
	}
	return mil;
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 376:	a5 01       	movw	r20, r10
 378:	94 01       	movw	r18, r8
 37a:	d4 d1       	rcall	.+936    	; 0x724 <__mulsi3>
 37c:	a7 01       	movw	r20, r14
 37e:	96 01       	movw	r18, r12
 380:	fe d1       	rcall	.+1020   	; 0x77e <__divmodsi4>
      for (int j=0; j<maximumClaps ; j++) {
        cbi(OUTPUTS_PORT, GRN_LED_PIN);
        cbi(OUTPUTS_PORT, RED_LED_PIN);  
        // only turn it on if there's a delay
        if (secretCode[j] > 0) {                                   
          delay( map(secretCode[j],0, 100, 0, maxClapInterval) ); // Expand the time back out to what it was. Roughly. 
 382:	ca 01       	movw	r24, r20
 384:	b9 01       	movw	r22, r18
 386:	3d df       	rcall	.-390    	; 0x202 <delay>
          sbi(OUTPUTS_PORT, GRN_LED_PIN);
 388:	5a 9a       	sbi	0x0b, 2	; 11
          sbi(OUTPUTS_PORT, RED_LED_PIN);
 38a:	59 9a       	sbi	0x0b, 1	; 11
        }
        delay(50);
 38c:	62 e3       	ldi	r22, 0x32	; 50
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	36 df       	rcall	.-404    	; 0x202 <delay>
      cbi(OUTPUTS_PORT, RED_LED_PIN);
      delay(450);
      sbi(OUTPUTS_PORT, GRN_LED_PIN);
      sbi(OUTPUTS_PORT, RED_LED_PIN);
      delay(50);
      for (int j=0; j<maximumClaps ; j++) {
 396:	f9 e1       	ldi	r31, 0x19	; 25
 398:	2f 16       	cp	r2, r31
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	3f 06       	cpc	r3, r31
 39e:	f1 f6       	brne	.-68     	; 0x35c <__stack+0x5d>
          sbi(OUTPUTS_PORT, GRN_LED_PIN);
          sbi(OUTPUTS_PORT, RED_LED_PIN);
        }
        delay(50);
      }
	  programmingFlag = false;
 3a0:	10 92 2e 01 	sts	0x012E, r1
 3a4:	35 c0       	rjmp	.+106    	; 0x410 <__stack+0x111>
	  return false; 	// We don't flip the relay when we are recording a new clap.
  }
  
  if (currentClapCount != secretClapCount)
 3a6:	86 16       	cp	r8, r22
 3a8:	97 06       	cpc	r9, r23
 3aa:	91 f5       	brne	.+100    	; 0x410 <__stack+0x111>
 3ac:	00 e0       	ldi	r16, 0x00	; 0
 3ae:	10 e0       	ldi	r17, 0x00	; 0
  //  Compare the relative intervals between our claps
  int totaltimeDifferences=0;
  int timeDiff=0;
  // Normalize the times
  for (int i=0;i<maximumClaps;i++) {
    clapReadings[i]= map(clapReadings[i],0, maxClapInterval, 0, 100);      
 3b0:	2a 01       	movw	r4, r20
 3b2:	66 24       	eor	r6, r6
 3b4:	77 24       	eor	r7, r7
 3b6:	68 81       	ld	r22, Y
 3b8:	79 81       	ldd	r23, Y+1	; 0x01
 3ba:	88 27       	eor	r24, r24
 3bc:	77 fd       	sbrc	r23, 7
 3be:	80 95       	com	r24
 3c0:	98 2f       	mov	r25, r24
	}
	return mil;
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 3c2:	24 e6       	ldi	r18, 0x64	; 100
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	ac d1       	rcall	.+856    	; 0x724 <__mulsi3>
 3cc:	a3 01       	movw	r20, r6
 3ce:	92 01       	movw	r18, r4
 3d0:	d6 d1       	rcall	.+940    	; 0x77e <__divmodsi4>
 3d2:	69 01       	movw	r12, r18
 3d4:	7a 01       	movw	r14, r20
  //  Compare the relative intervals between our claps
  int totaltimeDifferences=0;
  int timeDiff=0;
  // Normalize the times
  for (int i=0;i<maximumClaps;i++) {
    clapReadings[i]= map(clapReadings[i],0, maxClapInterval, 0, 100);      
 3d6:	c9 92       	st	Y+, r12
 3d8:	d9 92       	st	Y+, r13
    timeDiff = abs(clapReadings[i]-secretCode[i]);
 3da:	f1 01       	movw	r30, r2
 3dc:	81 91       	ld	r24, Z+
 3de:	91 91       	ld	r25, Z+
 3e0:	1f 01       	movw	r2, r30
 3e2:	28 1b       	sub	r18, r24
 3e4:	39 0b       	sbc	r19, r25
 3e6:	37 ff       	sbrs	r19, 7
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <__stack+0xf1>
 3ea:	30 95       	com	r19
 3ec:	21 95       	neg	r18
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
    if (timeDiff > rejectValue) // Individual value too far out of whack
 3f0:	2a 31       	cpi	r18, 0x1A	; 26
 3f2:	31 05       	cpc	r19, r1
 3f4:	6c f4       	brge	.+26     	; 0x410 <__stack+0x111>
      return false;
    totaltimeDifferences += timeDiff;
 3f6:	02 0f       	add	r16, r18
 3f8:	13 1f       	adc	r17, r19
  
  //  Compare the relative intervals between our claps
  int totaltimeDifferences=0;
  int timeDiff=0;
  // Normalize the times
  for (int i=0;i<maximumClaps;i++) {
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	c5 34       	cpi	r28, 0x45	; 69
 3fe:	df 07       	cpc	r29, r31
 400:	d1 f6       	brne	.-76     	; 0x3b6 <__stack+0xb7>
    if (timeDiff > rejectValue) // Individual value too far out of whack
      return false;
    totaltimeDifferences += timeDiff;
  }
  // Check the accuracy
  if (totaltimeDifferences/secretClapCount>averageRejectValue)
 402:	c8 01       	movw	r24, r16
 404:	b4 01       	movw	r22, r8
 406:	a7 d1       	rcall	.+846    	; 0x756 <__udivmodhi4>
          sbi(OUTPUTS_PORT, RED_LED_PIN);
        }
        delay(50);
      }
	  programmingFlag = false;
	  return false; 	// We don't flip the relay when we are recording a new clap.
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	60 31       	cpi	r22, 0x10	; 16
 40c:	71 05       	cpc	r23, r1
 40e:	08 f0       	brcs	.+2      	; 0x412 <__stack+0x113>
  // Normalize the times
  for (int i=0;i<maximumClaps;i++) {
    clapReadings[i]= map(clapReadings[i],0, maxClapInterval, 0, 100);      
    timeDiff = abs(clapReadings[i]-secretCode[i]);
    if (timeDiff > rejectValue) // Individual value too far out of whack
      return false;
 410:	80 e0       	ldi	r24, 0x00	; 0
  // Check the accuracy
  if (totaltimeDifferences/secretClapCount>averageRejectValue)
    return false; 

  return true;
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	7f 90       	pop	r7
 42c:	6f 90       	pop	r6
 42e:	5f 90       	pop	r5
 430:	4f 90       	pop	r4
 432:	3f 90       	pop	r3
 434:	2f 90       	pop	r2
 436:	08 95       	ret

00000438 <writeToEEPROM>:

const byte EEPROM_ID = 0x99;	// used to identify if valid data in EEPROM
const int ID_ADDR = 0;			// the EEPROM address used to store the ID
const int CODE_ADDR = 1;		// the starting EEPROM address used to store the clapping sequence data

void writeToEEPROM(void) {
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
	eeprom_busy_wait(); // Wait till EEPROM is ready
 440:	f9 99       	sbic	0x1f, 1	; 31
 442:	fe cf       	rjmp	.-4      	; 0x440 <writeToEEPROM+0x8>
	eeprom_write_byte((unsigned char *) ID_ADDR, EEPROM_ID);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	69 e9       	ldi	r22, 0x99	; 153
 44a:	e2 d1       	rcall	.+964    	; 0x810 <__eewr_byte_tn88>
 44c:	05 e0       	ldi	r16, 0x05	; 5
 44e:	11 e0       	ldi	r17, 0x01	; 1
	int ADDR_COUNTER = CODE_ADDR;	// counter to increment the address location
 450:	c1 e0       	ldi	r28, 0x01	; 1
 452:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<maximumClaps;i++) { 
		eeprom_write_word(ADDR_COUNTER, secretCode[i]);
 454:	f8 01       	movw	r30, r16
 456:	61 91       	ld	r22, Z+
 458:	71 91       	ld	r23, Z+
 45a:	8f 01       	movw	r16, r30
 45c:	ce 01       	movw	r24, r28
 45e:	e6 d1       	rcall	.+972    	; 0x82c <__eewr_word_tn88>
		ADDR_COUNTER += 2;
 460:	22 96       	adiw	r28, 0x02	; 2

void writeToEEPROM(void) {
	eeprom_busy_wait(); // Wait till EEPROM is ready
	eeprom_write_byte((unsigned char *) ID_ADDR, EEPROM_ID);
	int ADDR_COUNTER = CODE_ADDR;	// counter to increment the address location
	for(int i=0;i<maximumClaps;i++) { 
 462:	c5 31       	cpi	r28, 0x15	; 21
 464:	d1 05       	cpc	r29, r1
 466:	b1 f7       	brne	.-20     	; 0x454 <writeToEEPROM+0x1c>
		eeprom_write_word(ADDR_COUNTER, secretCode[i]);
		ADDR_COUNTER += 2;
	}
}
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <readFromEEPROM>:

void readFromEEPROM(void) {
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
	byte id = eeprom_read_byte(ID_ADDR);
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	bc d1       	rcall	.+888    	; 0x7f8 <__eerd_byte_tn88>
	
	// If ID doesn't match, store the default sequence
	if( id != EEPROM_ID) {
 480:	89 39       	cpi	r24, 0x99	; 153
 482:	11 f0       	breq	.+4      	; 0x488 <readFromEEPROM+0x16>
		int secretCode[] = {100, 50, 50, 0, 0, 0, 0, 0, 0, 0 };
		writeToEEPROM();
 484:	d9 df       	rcall	.-78     	; 0x438 <writeToEEPROM>
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <readFromEEPROM+0x32>
 488:	05 e0       	ldi	r16, 0x05	; 5
 48a:	11 e0       	ldi	r17, 0x01	; 1

void readFromEEPROM(void) {
	byte id = eeprom_read_byte(ID_ADDR);
	
	// If ID doesn't match, store the default sequence
	if( id != EEPROM_ID) {
 48c:	c1 e0       	ldi	r28, 0x01	; 1
 48e:	d0 e0       	ldi	r29, 0x00	; 0
		int secretCode[] = {100, 50, 50, 0, 0, 0, 0, 0, 0, 0 };
		writeToEEPROM();
	} else { // Else, load the previously saved sequence
		int ADDR_COUNTER = CODE_ADDR;
		for(int i=0;i<maximumClaps;i++) {
			secretCode[i] = eeprom_read_word(ADDR_COUNTER);
 490:	ce 01       	movw	r24, r28
 492:	ba d1       	rcall	.+884    	; 0x808 <__eerd_word_tn88>
 494:	f8 01       	movw	r30, r16
 496:	81 93       	st	Z+, r24
 498:	91 93       	st	Z+, r25
 49a:	8f 01       	movw	r16, r30
			ADDR_COUNTER += 2;
 49c:	22 96       	adiw	r28, 0x02	; 2
	if( id != EEPROM_ID) {
		int secretCode[] = {100, 50, 50, 0, 0, 0, 0, 0, 0, 0 };
		writeToEEPROM();
	} else { // Else, load the previously saved sequence
		int ADDR_COUNTER = CODE_ADDR;
		for(int i=0;i<maximumClaps;i++) {
 49e:	c5 31       	cpi	r28, 0x15	; 21
 4a0:	d1 05       	cpc	r29, r1
 4a2:	b1 f7       	brne	.-20     	; 0x490 <readFromEEPROM+0x1e>
			secretCode[i] = eeprom_read_word(ADDR_COUNTER);
			ADDR_COUNTER += 2;
		}
	}
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <analogRead>:

uint16_t analogRead(void) {
	uint8_t low, high;
	sbi(ADCSRA,ADSC); // Start Conversion
 4ae:	80 91 7a 00 	lds	r24, 0x007A
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	80 93 7a 00 	sts	0x007A, r24
	while( bit_is_clear(ADCSRA,ADIF) ); // Wait for conversion to finish
 4b8:	80 91 7a 00 	lds	r24, 0x007A
 4bc:	84 ff       	sbrs	r24, 4
 4be:	fc cf       	rjmp	.-8      	; 0x4b8 <analogRead+0xa>
	low = ADCL;
 4c0:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
 4c4:	90 91 79 00 	lds	r25, 0x0079
	return (high << 8) | low; // Return the combined bytes
 4c8:	39 2f       	mov	r19, r25
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	82 2b       	or	r24, r18
 4d0:	93 2b       	or	r25, r19
}
 4d2:	08 95       	ret

000004d4 <listenToClaps>:
	}

}

// Records the timing of claps.
void listenToClaps(void) {
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
			checkClaps();		// We're in programming mode so check the claps to capture the data
			writeToEEPROM();	// Write the new values to EEPROM
			
			// Blink the LED's alternately to show that program is complete.
			cbi(OUTPUTS_PORT, RED_LED_PIN);
			sbi(OUTPUTS_PORT, GRN_LED_PIN);
 4e0:	e1 e3       	ldi	r30, 0x31	; 49
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
// Records the timing of claps.
void listenToClaps(void) {

	// Reset the clap array
	for (int i=0;i<maximumClaps;i++)
		clapReadings[i]=0;
 4e4:	11 92       	st	Z+, r1
 4e6:	11 92       	st	Z+, r1

// Records the timing of claps.
void listenToClaps(void) {

	// Reset the clap array
	for (int i=0;i<maximumClaps;i++)
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	e5 34       	cpi	r30, 0x45	; 69
 4ec:	f8 07       	cpc	r31, r24
 4ee:	d1 f7       	brne	.-12     	; 0x4e4 <listenToClaps+0x10>
		clapReadings[i]=0;
	
	int currentClapNumber=0; // Incrementer for the array.
	unsigned int start = millis(); // Reference for when this clap started.
 4f0:	01 de       	rcall	.-1022   	; 0xf4 <millis>
 4f2:	8b 01       	movw	r16, r22
 4f4:	9c 01       	movw	r18, r24
	unsigned int now = millis();
 4f6:	fe dd       	rcall	.-1028   	; 0xf4 <millis>
	
	cbi(OUTPUTS_PORT, GRN_LED_PIN); // we blink the LED for a bit as a visual indicator of the clap.
 4f8:	5a 98       	cbi	0x0b, 2	; 11
	
	if(programmingFlag==true)
 4fa:	80 91 2e 01 	lds	r24, 0x012E
 4fe:	81 11       	cpse	r24, r1
		cbi(OUTPUTS_PORT, RED_LED_PIN); // and the red one too if we're programming a new clap.
 500:	59 98       	cbi	0x0b, 1	; 11
		
	delay(clapFadeTime); // wait for this peak to fade before we listen to the next one.
 502:	64 e6       	ldi	r22, 0x64	; 100
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	7b de       	rcall	.-778    	; 0x202 <delay>
	sbi(OUTPUTS_PORT, GRN_LED_PIN);
 50c:	5a 9a       	sbi	0x0b, 2	; 11
	
	if (programmingFlag==true)
 50e:	80 91 2e 01 	lds	r24, 0x012E
 512:	81 11       	cpse	r24, r1
		sbi(OUTPUTS_PORT, RED_LED_PIN);
 514:	59 9a       	sbi	0x0b, 1	; 11
	}

}

// Records the timing of claps.
void listenToClaps(void) {
 516:	ee 24       	eor	r14, r14
 518:	ff 24       	eor	r15, r15
	if (programmingFlag==true)
		sbi(OUTPUTS_PORT, RED_LED_PIN);

	do {
		//listen for the next clap or wait for it to timeout.
		clapSensorValue = analogRead();
 51a:	c9 df       	rcall	.-110    	; 0x4ae <analogRead>
 51c:	90 93 30 01 	sts	0x0130, r25
 520:	80 93 2f 01 	sts	0x012F, r24

		if (clapSensorValue >=threshold) //got another clap...
 524:	20 91 46 01 	lds	r18, 0x0146
 528:	30 91 47 01 	lds	r19, 0x0147
 52c:	82 17       	cp	r24, r18
 52e:	93 07       	cpc	r25, r19
 530:	08 f1       	brcs	.+66     	; 0x574 <listenToClaps+0xa0>
		{
			//record the delay time.
			now = millis();
 532:	e0 dd       	rcall	.-1088   	; 0xf4 <millis>
 534:	dc 01       	movw	r26, r24
 536:	cb 01       	movw	r24, r22
 538:	ec 01       	movw	r28, r24
			clapReadings[currentClapNumber] = now-start;
 53a:	f7 01       	movw	r30, r14
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	ef 5c       	subi	r30, 0xCF	; 207
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	ce 01       	movw	r24, r28
 546:	80 1b       	sub	r24, r16
 548:	91 0b       	sbc	r25, r17
 54a:	91 83       	std	Z+1, r25	; 0x01
 54c:	80 83       	st	Z, r24
			currentClapNumber ++; // increment the counter
 54e:	08 94       	sec
 550:	e1 1c       	adc	r14, r1
 552:	f1 1c       	adc	r15, r1
			start=now;
			// and reset our timer for the next clap
			cbi(OUTPUTS_PORT, GRN_LED_PIN);
 554:	5a 98       	cbi	0x0b, 2	; 11

			if (programmingFlag==true)
 556:	80 91 2e 01 	lds	r24, 0x012E
 55a:	81 11       	cpse	r24, r1
				cbi(OUTPUTS_PORT, RED_LED_PIN); // and the red one too if we're programming a new clap.
 55c:	59 98       	cbi	0x0b, 1	; 11
			
			delay(clapFadeTime); // again, a little delay to let the clap decay.
 55e:	64 e6       	ldi	r22, 0x64	; 100
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	4d de       	rcall	.-870    	; 0x202 <delay>
			sbi(OUTPUTS_PORT, GRN_LED_PIN);
 568:	5a 9a       	sbi	0x0b, 2	; 11
			if (programmingFlag==true)
 56a:	80 91 2e 01 	lds	r24, 0x012E
 56e:	81 11       	cpse	r24, r1
				sbi(OUTPUTS_PORT, RED_LED_PIN);
 570:	59 9a       	sbi	0x0b, 1	; 11
		{
			//record the delay time.
			now = millis();
			clapReadings[currentClapNumber] = now-start;
			currentClapNumber ++; // increment the counter
			start=now;
 572:	8e 01       	movw	r16, r28
			sbi(OUTPUTS_PORT, GRN_LED_PIN);
			if (programmingFlag==true)
				sbi(OUTPUTS_PORT, RED_LED_PIN);
		}
		
		now=millis();
 574:	bf dd       	rcall	.-1154   	; 0xf4 <millis>
	
		//did we timeout or run out of claps?
		} while ((now-start < clappingComplete) && (currentClapNumber < maximumClaps));
 576:	60 1b       	sub	r22, r16
 578:	71 0b       	sbc	r23, r17
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	68 3e       	cpi	r22, 0xE8	; 232
 57e:	78 07       	cpc	r23, r24
 580:	20 f4       	brcc	.+8      	; 0x58a <listenToClaps+0xb6>
 582:	8a e0       	ldi	r24, 0x0A	; 10
 584:	e8 16       	cp	r14, r24
 586:	f1 04       	cpc	r15, r1
 588:	44 f2       	brlt	.-112    	; 0x51a <listenToClaps+0x46>

		// We've got our clap recorded, lets see if it's valid
		if (programmingFlag==false) {
 58a:	80 91 2e 01 	lds	r24, 0x012E
 58e:	88 23       	and	r24, r24
 590:	c1 f4       	brne	.+48     	; 0x5c2 <listenToClaps+0xee>
			if (checkClaps() == true)
 592:	7a de       	rcall	.-780    	; 0x288 <checkClaps>
 594:	88 23       	and	r24, r24
 596:	11 f0       	breq	.+4      	; 0x59c <listenToClaps+0xc8>
				triggerRelay();
 598:	5b de       	rcall	.-842    	; 0x250 <triggerRelay>
 59a:	29 c0       	rjmp	.+82     	; 0x5ee <listenToClaps+0x11a>
			else {
				cbi(OUTPUTS_PORT, GRN_LED_PIN); // We didn't unlock, so blink the red LED as visual feedback.
 59c:	5a 98       	cbi	0x0b, 2	; 11
 59e:	c4 e0       	ldi	r28, 0x04	; 4
 5a0:	d0 e0       	ldi	r29, 0x00	; 0
				for (int i=0;i<4;i++){
					sbi(OUTPUTS_PORT, RED_LED_PIN);
 5a2:	59 9a       	sbi	0x0b, 1	; 11
					delay(100);
 5a4:	64 e6       	ldi	r22, 0x64	; 100
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	2a de       	rcall	.-940    	; 0x202 <delay>
					cbi(OUTPUTS_PORT, RED_LED_PIN);
 5ae:	59 98       	cbi	0x0b, 1	; 11
					delay(100);
 5b0:	64 e6       	ldi	r22, 0x64	; 100
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	24 de       	rcall	.-952    	; 0x202 <delay>
 5ba:	21 97       	sbiw	r28, 0x01	; 1
		if (programmingFlag==false) {
			if (checkClaps() == true)
				triggerRelay();
			else {
				cbi(OUTPUTS_PORT, GRN_LED_PIN); // We didn't unlock, so blink the red LED as visual feedback.
				for (int i=0;i<4;i++){
 5bc:	91 f7       	brne	.-28     	; 0x5a2 <listenToClaps+0xce>
					sbi(OUTPUTS_PORT, RED_LED_PIN);
					delay(100);
					cbi(OUTPUTS_PORT, RED_LED_PIN);
					delay(100);
				}
				sbi(OUTPUTS_PORT, GRN_LED_PIN);
 5be:	5a 9a       	sbi	0x0b, 2	; 11
 5c0:	16 c0       	rjmp	.+44     	; 0x5ee <listenToClaps+0x11a>
			}
		} else {
			checkClaps();		// We're in programming mode so check the claps to capture the data
 5c2:	62 de       	rcall	.-828    	; 0x288 <checkClaps>
			writeToEEPROM();	// Write the new values to EEPROM
 5c4:	39 df       	rcall	.-398    	; 0x438 <writeToEEPROM>
			
			// Blink the LED's alternately to show that program is complete.
			cbi(OUTPUTS_PORT, RED_LED_PIN);
 5c6:	59 98       	cbi	0x0b, 1	; 11
			sbi(OUTPUTS_PORT, GRN_LED_PIN);
 5c8:	5a 9a       	sbi	0x0b, 2	; 11
 5ca:	c3 e0       	ldi	r28, 0x03	; 3
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i=0;i<3;i++) {
				delay(100);
 5ce:	64 e6       	ldi	r22, 0x64	; 100
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	15 de       	rcall	.-982    	; 0x202 <delay>
				sbi(OUTPUTS_PORT, RED_LED_PIN);
 5d8:	59 9a       	sbi	0x0b, 1	; 11
				cbi(OUTPUTS_PORT, GRN_LED_PIN);
 5da:	5a 98       	cbi	0x0b, 2	; 11
				delay(100);
 5dc:	64 e6       	ldi	r22, 0x64	; 100
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e de       	rcall	.-996    	; 0x202 <delay>
				cbi(OUTPUTS_PORT, RED_LED_PIN);
 5e6:	59 98       	cbi	0x0b, 1	; 11
				sbi(OUTPUTS_PORT, GRN_LED_PIN);      
 5e8:	5a 9a       	sbi	0x0b, 2	; 11
 5ea:	21 97       	sbiw	r28, 0x01	; 1
			writeToEEPROM();	// Write the new values to EEPROM
			
			// Blink the LED's alternately to show that program is complete.
			cbi(OUTPUTS_PORT, RED_LED_PIN);
			sbi(OUTPUTS_PORT, GRN_LED_PIN);
			for (int i=0;i<3;i++) {
 5ec:	81 f7       	brne	.-32     	; 0x5ce <listenToClaps+0xfa>
				delay(100);
				cbi(OUTPUTS_PORT, RED_LED_PIN);
				sbi(OUTPUTS_PORT, GRN_LED_PIN);      
			}
		}
}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	08 95       	ret

000005fc <getThreshold>:
	low = ADCL;
	high = ADCH;
	return (high << 8) | low; // Return the combined bytes
}

long getThreshold(void) {
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
	sbi(ADMUX, MUX0); // Select channel ADC1
 604:	cc e7       	ldi	r28, 0x7C	; 124
 606:	d0 e0       	ldi	r29, 0x00	; 0
 608:	88 81       	ld	r24, Y
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	88 83       	st	Y, r24
	long val;
	uint16_t analogValue = analogRead();
 60e:	4f df       	rcall	.-354    	; 0x4ae <analogRead>
	val = map(analogValue, 0, 1023, 50, 1000);
	cbi(ADMUX, MUX0);
 610:	28 81       	ld	r18, Y
 612:	2e 7f       	andi	r18, 0xFE	; 254
 614:	28 83       	st	Y, r18

long getThreshold(void) {
	sbi(ADMUX, MUX0); // Select channel ADC1
	long val;
	uint16_t analogValue = analogRead();
	val = map(analogValue, 0, 1023, 50, 1000);
 616:	bc 01       	movw	r22, r24
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return mil;
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 61c:	26 eb       	ldi	r18, 0xB6	; 182
 61e:	33 e0       	ldi	r19, 0x03	; 3
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	7f d0       	rcall	.+254    	; 0x724 <__mulsi3>
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	33 e0       	ldi	r19, 0x03	; 3
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	a7 d0       	rcall	.+334    	; 0x77e <__divmodsi4>
 630:	89 01       	movw	r16, r18
 632:	9a 01       	movw	r18, r20
 634:	0e 5c       	subi	r16, 0xCE	; 206
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	2f 4f       	sbci	r18, 0xFF	; 255
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
	long val;
	uint16_t analogValue = analogRead();
	val = map(analogValue, 0, 1023, 50, 1000);
	cbi(ADMUX, MUX0);
	return val;
 63c:	b8 01       	movw	r22, r16
 63e:	c9 01       	movw	r24, r18
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	08 95       	ret

0000064a <main>:
	}
}

int main(void) {
	
	OUTPUTS_DDR = (1<<RELAY_PIN)|(1<<RED_LED_PIN)|(1<<GRN_LED_PIN);
 64a:	87 e0       	ldi	r24, 0x07	; 7
 64c:	8a b9       	out	0x0a, r24	; 10
	OUTPUTS_PORT = (1<<GRN_LED_PIN);
 64e:	84 e0       	ldi	r24, 0x04	; 4
 650:	8b b9       	out	0x0b, r24	; 11
	
	BUTTON_PORT = bit(PROGRAM_BTN_PIN); // Internal pull-ups on inputs
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	85 b9       	out	0x05, r24	; 5
	BUTTON_DDR = bit(PROGRAM_BTN_PIN);
 656:	84 b9       	out	0x04, r24	; 4
	
	DIDR0 = bit(ADC0D)|bit(ADC1D); // Disable PC0 & PC1 digital inputs
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	80 93 7e 00 	sts	0x007E, r24
	
	cbi(PRR,PRADC);	// Turn on ADC
 65e:	80 91 64 00 	lds	r24, 0x0064
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	80 93 64 00 	sts	0x0064, r24
	ADCSRA |= bit(ADPS0)|bit(ADPS1)|bit(ADPS2); // ADC Speed = ck/128
 668:	80 91 7a 00 	lds	r24, 0x007A
 66c:	87 60       	ori	r24, 0x07	; 7
 66e:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= bit(REFS0); // AVcc Reference, Channel = ADC0
 672:	80 91 7c 00 	lds	r24, 0x007C
 676:	80 64       	ori	r24, 0x40	; 64
 678:	80 93 7c 00 	sts	0x007C, r24
	sbi(ADCSRA,ADEN); // Enable ADC
 67c:	80 91 7a 00 	lds	r24, 0x007A
 680:	80 68       	ori	r24, 0x80	; 128
 682:	80 93 7a 00 	sts	0x007A, r24
	
	TCCR0A |= bit(CS01)|bit(CS00); // Initialize timer0 with a prescaler of 64
 686:	85 b5       	in	r24, 0x25	; 37
 688:	83 60       	ori	r24, 0x03	; 3
 68a:	85 bd       	out	0x25, r24	; 37
	sbi(TIMSK0, TOIE0); 	// enable timer 0 overflow interrupt
 68c:	80 91 6e 00 	lds	r24, 0x006E
 690:	81 60       	ori	r24, 0x01	; 1
 692:	80 93 6e 00 	sts	0x006E, r24
	
	readFromEEPROM(); // Read the previously stored sequence, if it exists
 696:	ed de       	rcall	.-550    	; 0x472 <readFromEEPROM>
	
	sei(); // enable global interrupts
 698:	78 94       	sei
	
	boolean btnReleased = true; // when button is held, allows only one relay trigger until the button is released
 69a:	c1 e0       	ldi	r28, 0x01	; 1
		threshold = getThreshold(); // Set the sensor threshold
		clapSensorValue = analogRead(); // Listen for a clap
  
		// See if the programming button is pressed
		if ( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
			programmingFlag = true;	// Set the programming flag
 69c:	d1 e0       	ldi	r29, 0x01	; 1
	boolean btnReleased = true; // when button is held, allows only one relay trigger until the button is released
	
    while(1) {
		
		// Get the analog values
		threshold = getThreshold(); // Set the sensor threshold
 69e:	ae df       	rcall	.-164    	; 0x5fc <getThreshold>
 6a0:	dc 01       	movw	r26, r24
 6a2:	cb 01       	movw	r24, r22
 6a4:	90 93 47 01 	sts	0x0147, r25
 6a8:	80 93 46 01 	sts	0x0146, r24
		clapSensorValue = analogRead(); // Listen for a clap
 6ac:	00 df       	rcall	.-512    	; 0x4ae <analogRead>
 6ae:	90 93 30 01 	sts	0x0130, r25
 6b2:	80 93 2f 01 	sts	0x012F, r24
  
		// See if the programming button is pressed
		if ( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
 6b6:	18 99       	sbic	0x03, 0	; 3
 6b8:	1f c0       	rjmp	.+62     	; 0x6f8 <main+0xae>
			programmingFlag = true;	// Set the programming flag
 6ba:	d0 93 2e 01 	sts	0x012E, r29
			// Loop while the button is held
			unsigned int start = millis();
 6be:	1a dd       	rcall	.-1484   	; 0xf4 <millis>
			while( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
				// See if the button has been held longer than the set hold time
				if( btnReleased && ((millis()-start) >= holdTriggerTime) ) {
 6c0:	6b 01       	movw	r12, r22
 6c2:	ee 24       	eor	r14, r14
 6c4:	ff 24       	eor	r15, r15
		// See if the programming button is pressed
		if ( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
			programmingFlag = true;	// Set the programming flag
			// Loop while the button is held
			unsigned int start = millis();
			while( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
 6c6:	15 c0       	rjmp	.+42     	; 0x6f2 <main+0xa8>
				// See if the button has been held longer than the set hold time
				if( btnReleased && ((millis()-start) >= holdTriggerTime) ) {
 6c8:	cc 23       	and	r28, r28
 6ca:	99 f0       	breq	.+38     	; 0x6f2 <main+0xa8>
 6cc:	13 dd       	rcall	.-1498   	; 0xf4 <millis>
 6ce:	dc 01       	movw	r26, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	8c 19       	sub	r24, r12
 6d4:	9d 09       	sbc	r25, r13
 6d6:	ae 09       	sbc	r26, r14
 6d8:	bf 09       	sbc	r27, r15
 6da:	88 35       	cpi	r24, 0x58	; 88
 6dc:	22 e0       	ldi	r18, 0x02	; 2
 6de:	92 07       	cpc	r25, r18
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	a2 07       	cpc	r26, r18
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	b2 07       	cpc	r27, r18
 6e8:	20 f0       	brcs	.+8      	; 0x6f2 <main+0xa8>
					programmingFlag = false;	// Remove the programming flag
 6ea:	10 92 2e 01 	sts	0x012E, r1
					btnReleased=false;			// Change the button released flag
					triggerRelay();				// Trigger the relay
 6ee:	b0 dd       	rcall	.-1184   	; 0x250 <triggerRelay>
			unsigned int start = millis();
			while( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
				// See if the button has been held longer than the set hold time
				if( btnReleased && ((millis()-start) >= holdTriggerTime) ) {
					programmingFlag = false;	// Remove the programming flag
					btnReleased=false;			// Change the button released flag
 6f0:	c0 e0       	ldi	r28, 0x00	; 0
		// See if the programming button is pressed
		if ( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
			programmingFlag = true;	// Set the programming flag
			// Loop while the button is held
			unsigned int start = millis();
			while( bit_is_clear(BUTTON_PIN_PORT, PROGRAM_BTN_PIN) ) {
 6f2:	18 9b       	sbis	0x03, 0	; 3
 6f4:	e9 cf       	rjmp	.-46     	; 0x6c8 <main+0x7e>
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <main+0xb0>
					programmingFlag = false;	// Remove the programming flag
					btnReleased=false;			// Change the button released flag
					triggerRelay();				// Trigger the relay
				}
			}
		} else btnReleased = true; /* Else, the button has been released so change the flag */
 6f8:	c1 e0       	ldi	r28, 0x01	; 1
		
		// Turn on the Red LED if we're programming a new clap
		if ( programmingFlag )
 6fa:	80 91 2e 01 	lds	r24, 0x012E
 6fe:	88 23       	and	r24, r24
 700:	11 f0       	breq	.+4      	; 0x706 <main+0xbc>
			sbi(OUTPUTS_PORT,RED_LED_PIN);	
 702:	59 9a       	sbi	0x0b, 1	; 11
 704:	01 c0       	rjmp	.+2      	; 0x708 <main+0xbe>
		else
			cbi(OUTPUTS_PORT,RED_LED_PIN);
 706:	59 98       	cbi	0x0b, 1	; 11
  
		// Listen to claps if analog reading is greater than threshold
		if ( clapSensorValue >= threshold )
 708:	20 91 2f 01 	lds	r18, 0x012F
 70c:	30 91 30 01 	lds	r19, 0x0130
 710:	80 91 46 01 	lds	r24, 0x0146
 714:	90 91 47 01 	lds	r25, 0x0147
 718:	28 17       	cp	r18, r24
 71a:	39 07       	cpc	r19, r25
 71c:	08 f4       	brcc	.+2      	; 0x720 <main+0xd6>
 71e:	bf cf       	rjmp	.-130    	; 0x69e <main+0x54>
			listenToClaps();
 720:	d9 de       	rcall	.-590    	; 0x4d4 <listenToClaps>
 722:	bd cf       	rjmp	.-134    	; 0x69e <main+0x54>

00000724 <__mulsi3>:
 724:	ff 27       	eor	r31, r31
 726:	ee 27       	eor	r30, r30
 728:	bb 27       	eor	r27, r27
 72a:	aa 27       	eor	r26, r26

0000072c <__mulsi3_loop>:
 72c:	60 ff       	sbrs	r22, 0
 72e:	04 c0       	rjmp	.+8      	; 0x738 <__mulsi3_skip1>
 730:	a2 0f       	add	r26, r18
 732:	b3 1f       	adc	r27, r19
 734:	e4 1f       	adc	r30, r20
 736:	f5 1f       	adc	r31, r21

00000738 <__mulsi3_skip1>:
 738:	22 0f       	add	r18, r18
 73a:	33 1f       	adc	r19, r19
 73c:	44 1f       	adc	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	89 f7       	brne	.-30     	; 0x72c <__mulsi3_loop>
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	76 07       	cpc	r23, r22
 74e:	71 f7       	brne	.-36     	; 0x72c <__mulsi3_loop>

00000750 <__mulsi3_exit>:
 750:	cf 01       	movw	r24, r30
 752:	bd 01       	movw	r22, r26
 754:	08 95       	ret

00000756 <__udivmodhi4>:
 756:	aa 1b       	sub	r26, r26
 758:	bb 1b       	sub	r27, r27
 75a:	51 e1       	ldi	r21, 0x11	; 17
 75c:	07 c0       	rjmp	.+14     	; 0x76c <__udivmodhi4_ep>

0000075e <__udivmodhi4_loop>:
 75e:	aa 1f       	adc	r26, r26
 760:	bb 1f       	adc	r27, r27
 762:	a6 17       	cp	r26, r22
 764:	b7 07       	cpc	r27, r23
 766:	10 f0       	brcs	.+4      	; 0x76c <__udivmodhi4_ep>
 768:	a6 1b       	sub	r26, r22
 76a:	b7 0b       	sbc	r27, r23

0000076c <__udivmodhi4_ep>:
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	5a 95       	dec	r21
 772:	a9 f7       	brne	.-22     	; 0x75e <__udivmodhi4_loop>
 774:	80 95       	com	r24
 776:	90 95       	com	r25
 778:	bc 01       	movw	r22, r24
 77a:	cd 01       	movw	r24, r26
 77c:	08 95       	ret

0000077e <__divmodsi4>:
 77e:	97 fb       	bst	r25, 7
 780:	09 2e       	mov	r0, r25
 782:	05 26       	eor	r0, r21
 784:	0e d0       	rcall	.+28     	; 0x7a2 <__divmodsi4_neg1>
 786:	57 fd       	sbrc	r21, 7
 788:	04 d0       	rcall	.+8      	; 0x792 <__divmodsi4_neg2>
 78a:	14 d0       	rcall	.+40     	; 0x7b4 <__udivmodsi4>
 78c:	0a d0       	rcall	.+20     	; 0x7a2 <__divmodsi4_neg1>
 78e:	00 1c       	adc	r0, r0
 790:	38 f4       	brcc	.+14     	; 0x7a0 <__divmodsi4_exit>

00000792 <__divmodsi4_neg2>:
 792:	50 95       	com	r21
 794:	40 95       	com	r20
 796:	30 95       	com	r19
 798:	21 95       	neg	r18
 79a:	3f 4f       	sbci	r19, 0xFF	; 255
 79c:	4f 4f       	sbci	r20, 0xFF	; 255
 79e:	5f 4f       	sbci	r21, 0xFF	; 255

000007a0 <__divmodsi4_exit>:
 7a0:	08 95       	ret

000007a2 <__divmodsi4_neg1>:
 7a2:	f6 f7       	brtc	.-4      	; 0x7a0 <__divmodsi4_exit>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__udivmodsi4>:
 7b4:	a1 e2       	ldi	r26, 0x21	; 33
 7b6:	1a 2e       	mov	r1, r26
 7b8:	aa 1b       	sub	r26, r26
 7ba:	bb 1b       	sub	r27, r27
 7bc:	fd 01       	movw	r30, r26
 7be:	0d c0       	rjmp	.+26     	; 0x7da <__udivmodsi4_ep>

000007c0 <__udivmodsi4_loop>:
 7c0:	aa 1f       	adc	r26, r26
 7c2:	bb 1f       	adc	r27, r27
 7c4:	ee 1f       	adc	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	a2 17       	cp	r26, r18
 7ca:	b3 07       	cpc	r27, r19
 7cc:	e4 07       	cpc	r30, r20
 7ce:	f5 07       	cpc	r31, r21
 7d0:	20 f0       	brcs	.+8      	; 0x7da <__udivmodsi4_ep>
 7d2:	a2 1b       	sub	r26, r18
 7d4:	b3 0b       	sbc	r27, r19
 7d6:	e4 0b       	sbc	r30, r20
 7d8:	f5 0b       	sbc	r31, r21

000007da <__udivmodsi4_ep>:
 7da:	66 1f       	adc	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	1a 94       	dec	r1
 7e4:	69 f7       	brne	.-38     	; 0x7c0 <__udivmodsi4_loop>
 7e6:	60 95       	com	r22
 7e8:	70 95       	com	r23
 7ea:	80 95       	com	r24
 7ec:	90 95       	com	r25
 7ee:	9b 01       	movw	r18, r22
 7f0:	ac 01       	movw	r20, r24
 7f2:	bd 01       	movw	r22, r26
 7f4:	cf 01       	movw	r24, r30
 7f6:	08 95       	ret

000007f8 <__eerd_byte_tn88>:
 7f8:	f9 99       	sbic	0x1f, 1	; 31
 7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <__eerd_byte_tn88>
 7fc:	1f ba       	out	0x1f, r1	; 31
 7fe:	81 bd       	out	0x21, r24	; 33
 800:	f8 9a       	sbi	0x1f, 0	; 31
 802:	99 27       	eor	r25, r25
 804:	80 b5       	in	r24, 0x20	; 32
 806:	08 95       	ret

00000808 <__eerd_word_tn88>:
 808:	a8 e1       	ldi	r26, 0x18	; 24
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	42 e0       	ldi	r20, 0x02	; 2
 80e:	13 c0       	rjmp	.+38     	; 0x836 <__eerd_blraw_tn88>

00000810 <__eewr_byte_tn88>:
 810:	26 2f       	mov	r18, r22

00000812 <__eewr_r18_tn88>:
 812:	f9 99       	sbic	0x1f, 1	; 31
 814:	fe cf       	rjmp	.-4      	; 0x812 <__eewr_r18_tn88>
 816:	1f ba       	out	0x1f, r1	; 31
 818:	1f ba       	out	0x1f, r1	; 31
 81a:	81 bd       	out	0x21, r24	; 33
 81c:	20 bd       	out	0x20, r18	; 32
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	fa 9a       	sbi	0x1f, 2	; 31
 824:	f9 9a       	sbi	0x1f, 1	; 31
 826:	0f be       	out	0x3f, r0	; 63
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	08 95       	ret

0000082c <__eewr_word_tn88>:
 82c:	f1 df       	rcall	.-30     	; 0x810 <__eewr_byte_tn88>
 82e:	27 2f       	mov	r18, r23
 830:	f0 cf       	rjmp	.-32     	; 0x812 <__eewr_r18_tn88>

00000832 <__eerd_block_tn88>:
 832:	dc 01       	movw	r26, r24
 834:	86 2f       	mov	r24, r22

00000836 <__eerd_blraw_tn88>:
 836:	e8 2f       	mov	r30, r24
 838:	f9 99       	sbic	0x1f, 1	; 31
 83a:	fe cf       	rjmp	.-4      	; 0x838 <__eerd_blraw_tn88+0x2>
 83c:	1f ba       	out	0x1f, r1	; 31
 83e:	05 c0       	rjmp	.+10     	; 0x84a <__eerd_blraw_tn88+0x14>
 840:	e1 bd       	out	0x21, r30	; 33
 842:	f8 9a       	sbi	0x1f, 0	; 31
 844:	e3 95       	inc	r30
 846:	00 b4       	in	r0, 0x20	; 32
 848:	0d 92       	st	X+, r0
 84a:	41 50       	subi	r20, 0x01	; 1
 84c:	c8 f7       	brcc	.-14     	; 0x840 <__eerd_blraw_tn88+0xa>
 84e:	08 95       	ret

00000850 <_exit>:
 850:	f8 94       	cli

00000852 <__stop_program>:
 852:	ff cf       	rjmp	.-2      	; 0x852 <__stop_program>
