
x14-30xx_interupt_gear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002f4  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800064  00800064  0000038c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ed  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001dc  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000be  00000000  00000000  00000675  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  00000733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014b  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	40 c0       	rjmp	.+128    	; 0x96 <__vector_10>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 ef       	ldi	r30, 0xF4	; 244
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a3 37       	cpi	r26, 0x73	; 115
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	48 d1       	rcall	.+656    	; 0x2e6 <main>
  56:	4c c1       	rjmp	.+664    	; 0x2f0 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_6>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_TIMER0_OVF)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
  66:	9f 93       	push	r25
	TCNT0=0;	//reset the counter
  68:	12 be       	out	0x32, r1	; 50
	if (uTock > 0)
  6a:	80 91 60 00 	lds	r24, 0x0060
  6e:	90 91 61 00 	lds	r25, 0x0061
  72:	89 2b       	or	r24, r25
  74:	49 f0       	breq	.+18     	; 0x88 <__vector_6+0x2e>
	{
      uTock--;      //This counts down to a longer tock.  (a time reference for longer based timers
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	90 91 61 00 	lds	r25, 0x0061
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	90 93 61 00 	sts	0x0061, r25
  84:	80 93 60 00 	sts	0x0060, r24
	}
}
  88:	9f 91       	pop	r25
  8a:	8f 91       	pop	r24
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_10>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(ANA_COMP_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31

	if(u08State==0)	//not used anymore
  ac:	80 91 62 00 	lds	r24, 0x0062
  b0:	88 23       	and	r24, r24
  b2:	19 f4       	brne	.+6      	; 0xba <__vector_10+0x24>
	{
		ACSR=0x00;		//disable the analog comparitor
  b4:	18 b8       	out	0x08, r1	; 8
		defSolenoidPort |= (1<<defSolenoidPin);	//turn on the solenoid
  b6:	96 9a       	sbi	0x12, 6	; 18
  b8:	62 c0       	rjmp	.+196    	; 0x17e <__stack+0x9f>
//		boolWaitingForProp=false;	//we are no longer waiting for the analog comparitor
	}
	else if(u08State==1)		//are we counting the RPM of the propeller?
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	51 f5       	brne	.+84     	; 0x116 <__stack+0x37>
	{

		switch (u08SubState)	//This switch statement is the main state machine
  c2:	80 91 65 00 	lds	r24, 0x0065
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <__vector_10+0x3c>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <__vector_10+0x3a>
  ce:	57 c0       	rjmp	.+174    	; 0x17e <__stack+0x9f>
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <__stack+0x7>
        {		

			case 0:		//has the propeller fired the analog comparitor for the first time in this reading?
				TCCR1A=0x00;
  d2:	1f bc       	out	0x2f, r1	; 47
				TCCR1B=(1<<ICNC1)|(1<<CS12);	//start the 16 counter, since a blade of the propeller passed the analog comparitor
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	8e bd       	out	0x2e, r24	; 46
				TCCR1C=0x00;
  d8:	12 bc       	out	0x22, r1	; 34
				u08SubState=u08SubState+1;	//we need to read the time between analog comparitor interrupts next time through
  da:	80 91 65 00 	lds	r24, 0x0065
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 65 00 	sts	0x0065, r24
  e4:	4c c0       	rjmp	.+152    	; 0x17e <__stack+0x9f>
			break;

			case 1:		//has the propeller fired the analog comparitor for the second time in this reading?
				intRPM[u08RpmCounter]=TCNT1;	//store the 16 bit counter, this is the speed between interrupts
  e6:	e0 91 72 00 	lds	r30, 0x0072
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8c b5       	in	r24, 0x2c	; 44
  ee:	9d b5       	in	r25, 0x2d	; 45
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	e9 59       	subi	r30, 0x99	; 153
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	91 83       	std	Z+1, r25	; 0x01
  fa:	80 83       	st	Z, r24
				u08RpmCounter++;	//next time through, the speed between interrupts is stored in the array location
  fc:	80 91 72 00 	lds	r24, 0x0072
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 72 00 	sts	0x0072, r24
				//if(u08RpmCounter>2)	//are we taking several readings of the RPM?
				//{
					u08State = 2;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 62 00 	sts	0x0062, r24
				//}
				TCCR1B=0x00;	//stop the 16 bit counter, we don't need it for a number based upon the RPM
 10c:	1e bc       	out	0x2e, r1	; 46
				TCNT1 = 0x00;	//reset the 16 bit counter for next time
 10e:	1d bc       	out	0x2d, r1	; 45
 110:	1c bc       	out	0x2c, r1	; 44
				ACSR = 0x00;	//turn off the analog interrupt since we don't need it anymore
 112:	18 b8       	out	0x08, r1	; 8
 114:	34 c0       	rjmp	.+104    	; 0x17e <__stack+0x9f>
			break;
		}
	}
	else if(u08State==2)	//setting a specific time from the blade passing
 116:	80 91 62 00 	lds	r24, 0x0062
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	81 f5       	brne	.+96     	; 0x17e <__stack+0x9f>
	{
		ACSR=0x00;		//disable the analog comparitor
 11e:	18 b8       	out	0x08, r1	; 8
		//setup timer 1 to compare match at a specific time period (1/2 of the current RPM)
		TCNT1=0x00;		//reset the counter 1
 120:	1d bc       	out	0x2d, r1	; 45
 122:	1c bc       	out	0x2c, r1	; 44

		//OCR1A=intRPM[0]/defBladePosDivider;	//this is used to turn on an LED to illuminate the propeller


		#ifdef defHitTheBlade	//are we going to try to hit the second blade that goes by after the analog interrupt blade?
			intTemp=(intRPM[0]*2)-intTemp;	//set the timing to hit the second blade, minus the solenoid delay
 124:	80 91 67 00 	lds	r24, 0x0067
 128:	90 91 68 00 	lds	r25, 0x0068
 12c:	20 91 70 00 	lds	r18, 0x0070
 130:	30 91 71 00 	lds	r19, 0x0071
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	82 1b       	sub	r24, r18
 13a:	93 0b       	sbc	r25, r19
 13c:	90 93 71 00 	sts	0x0071, r25
 140:	80 93 70 00 	sts	0x0070, r24
		#else	//we are going to shoot the pellet between the first and second blade passing
			
			intTemp=intRPM[0]/2;			//First, we are going to find 1.5 times the time beween the blades 
			intTemp=(intRPM[0]*2)-intTemp;	//  passing the IR sensor.
		#endif
		if(intTemp < defTimer1TicksForSolenoid)		//Is the propeller rotating too fast?
 144:	80 91 70 00 	lds	r24, 0x0070
 148:	90 91 71 00 	lds	r25, 0x0071
		{
			//houston, we have a problem
		}
		intTemp=intTemp - defTimer1TicksForSolenoid;	//subtract the solenoid-to-pellet delay to get time to activate the solenoid
 14c:	80 91 70 00 	lds	r24, 0x0070
 150:	90 91 71 00 	lds	r25, 0x0071
 154:	80 54       	subi	r24, 0x40	; 64
 156:	91 40       	sbci	r25, 0x01	; 1
 158:	90 93 71 00 	sts	0x0071, r25
 15c:	80 93 70 00 	sts	0x0070, r24
		OCR1A=intTemp;	//load in the time to delay before firing the solenoid
 160:	80 91 70 00 	lds	r24, 0x0070
 164:	90 91 71 00 	lds	r25, 0x0071
 168:	9b bd       	out	0x2b, r25	; 43
 16a:	8a bd       	out	0x2a, r24	; 42


		TIMSK |= (1<<OCIE1A);		//turn on the timer1 output compare match
 16c:	89 b7       	in	r24, 0x39	; 57
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	89 bf       	out	0x39, r24	; 57
		TCCR1A = 0x00;
 172:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = (1<<ICNC1)|(1<<CS12);	//start the 16 counter, since a blade of the propeller passed the analog comparitor
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	8e bd       	out	0x2e, r24	; 46
		TCCR1C = 0x00;
 178:	12 bc       	out	0x22, r1	; 34
		u08Timer1State=0;
 17a:	10 92 6f 00 	sts	0x006F, r1
	}

}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <toggleLED>:
//       none
//----------------------------------------------------------------------------
void toggleLED()
{
	//blink the LED
	if(u08Toggle==0)	//is it time to turn on the LED?
 194:	80 91 66 00 	lds	r24, 0x0066
 198:	88 23       	and	r24, r24
 19a:	29 f4       	brne	.+10     	; 0x1a6 <toggleLED+0x12>
	{
		u08Toggle=1;	//turn off the LED next time
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 66 00 	sts	0x0066, r24
		defStatusLedPort |= (1<<defStatusLedPin);	//turn on the LED
 1a2:	c2 9a       	sbi	0x18, 2	; 24
 1a4:	08 95       	ret
	}
	else	//it must be time to turn off the LED
	{
		u08Toggle=0;	//turn on the LED next time
 1a6:	10 92 66 00 	sts	0x0066, r1
		defStatusLedPort &= ~(1<<defStatusLedPin);	//turn off the LED
 1aa:	c2 98       	cbi	0x18, 2	; 24
 1ac:	08 95       	ret

000001ae <__vector_4>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_TIMER1_COMPA)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	//blink the LED
	if(u08Timer1State==0)		//Is the prop at the correct place to turn on the LED to freeze the prop
 1d0:	80 91 6f 00 	lds	r24, 0x006F
 1d4:	88 23       	and	r24, r24
 1d6:	c1 f4       	brne	.+48     	; 0x208 <__vector_4+0x5a>
	{
		TCCR1B &= ~(1<<CS12);	//turn off the timer1 compare match, it will be reloaded to turn off the LED
 1d8:	8e b5       	in	r24, 0x2e	; 46
 1da:	8b 7f       	andi	r24, 0xFB	; 251
 1dc:	8e bd       	out	0x2e, r24	; 46
		toggleLED();
 1de:	da df       	rcall	.-76     	; 0x194 <toggleLED>
		defSolenoidPort |= (1<<defSolenoidPin);
 1e0:	96 9a       	sbi	0x12, 6	; 18
		u08Timer1State++;		//we don't want to go back in here next time
 1e2:	80 91 6f 00 	lds	r24, 0x006F
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 6f 00 	sts	0x006F, r24
		TCNT1=0x00;		//reset the counter 1
 1ec:	1d bc       	out	0x2d, r1	; 45
 1ee:	1c bc       	out	0x2c, r1	; 44
		OCR1A=defLedOnTime;	//set the timer1 compare match value, this is the time to turn off the LED after it is turned on
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9b bd       	out	0x2b, r25	; 43
 1f6:	8a bd       	out	0x2a, r24	; 42
		TIMSK |= (1<<OCIE1A);		//turn on the timer1 output compare match
 1f8:	89 b7       	in	r24, 0x39	; 57
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	89 bf       	out	0x39, r24	; 57
		TCCR1A = 0x00;
 1fe:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = (1<<ICNC1)|(1<<CS12);	//start the 16 counter, we want to turn off the LED after a short blink
 200:	84 e8       	ldi	r24, 0x84	; 132
 202:	8e bd       	out	0x2e, r24	; 46
		TCCR1C = 0x00;		
 204:	12 bc       	out	0x22, r1	; 34
 206:	07 c0       	rjmp	.+14     	; 0x216 <__vector_4+0x68>
	}
	else	//it must be time to turn off the LED
	{
		TCCR1B &= ~(1<<CS12);	//turn off the timer1 compare match
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	8e bd       	out	0x2e, r24	; 46
		toggleLED();
 20e:	c2 df       	rcall	.-124    	; 0x194 <toggleLED>
		u08State=1;		//don't go back in here until the button pressed
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 62 00 	sts	0x0062, r24
	}
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <SrvTock>:
//Returns:
//       none
//----------------------------------------------------------------------------
void SrvTock(void)
{
    if (uTock == 0)
 238:	80 91 60 00 	lds	r24, 0x0060
 23c:	90 91 61 00 	lds	r25, 0x0061
 240:	89 2b       	or	r24, r25
 242:	09 f0       	breq	.+2      	; 0x246 <SrvTock+0xe>
 244:	40 c0       	rjmp	.+128    	; 0x2c6 <SrvTock+0x8e>
    {
        uTock = 200;   //reload the Tock (20mS) timer
 246:	88 ec       	ldi	r24, 0xC8	; 200
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 61 00 	sts	0x0061, r25
 24e:	80 93 60 00 	sts	0x0060, r24
		wdt_reset();	//reset the watchdog
 252:	a8 95       	wdr

	    switch (u08State)	//This switch statement is the main state machine
 254:	80 91 62 00 	lds	r24, 0x0062
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	19 f0       	breq	.+6      	; 0x262 <SrvTock+0x2a>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	99 f5       	brne	.+102    	; 0x2c6 <SrvTock+0x8e>
 260:	1b c0       	rjmp	.+54     	; 0x298 <SrvTock+0x60>
					}				
				}
			break;
*/
			case 1:		//read RPM of the propeller (stores the time between the blades passing the IR sensor)
				if(uTmrState>0)		//we only go in here after the pushbutton has been pressed
 262:	80 91 64 00 	lds	r24, 0x0064
 266:	88 23       	and	r24, r24
 268:	39 f0       	breq	.+14     	; 0x278 <SrvTock+0x40>
				{
					uTmrState--;	//then count down to letting the user push the sample button again
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	80 93 64 00 	sts	0x0064, r24
					if(uTmrState==20)	//is it time to release the solenoid?
 270:	84 31       	cpi	r24, 0x14	; 20
 272:	49 f5       	brne	.+82     	; 0x2c6 <SrvTock+0x8e>
					{
						defSolenoidPort &= ~(1<<defSolenoidPin);	//release the solenoid, since we are done with it
 274:	96 98       	cbi	0x12, 6	; 18
 276:	08 95       	ret

					}
				}
				else
				{
					if(CHECKBIT(defFireButtonPort,defFireButtonPin)==0)		//Has the user pressed the sample RPM button?
 278:	b4 99       	sbic	0x16, 4	; 22
 27a:	25 c0       	rjmp	.+74     	; 0x2c6 <SrvTock+0x8e>
					{
						uTmrState=25;	//don't go back into here for awhile
 27c:	89 e1       	ldi	r24, 0x19	; 25
 27e:	80 93 64 00 	sts	0x0064, r24
						u08SubState=0;	//setup the analog interrupt to be in the correct state
 282:	10 92 65 00 	sts	0x0065, r1
						if(u08RpmCounter>3)	//have we reached the end of the RPM storage array?
 286:	80 91 72 00 	lds	r24, 0x0072
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	10 f0       	brcs	.+4      	; 0x292 <SrvTock+0x5a>
						{
							u08RpmCounter=0;	//yes, then start over with the array
 28e:	10 92 72 00 	sts	0x0072, r1
						}
						//disable any interrupt flags before the analog comparitor has been enabled!
						ACSR = (1<<ACI)|(1<<ACIE)|(1<<ACIS1)|(0<<ACIS0);	//turn on the analog comparitor interrupt					
 292:	8a e1       	ldi	r24, 0x1A	; 26
 294:	88 b9       	out	0x08, r24	; 8
 296:	08 95       	ret
					}
				}
			break;

			case 2:		//This sets a specific time from analog interrupt using timer1
				if(uTmrState>0)		//we only go in here after the pushbutton has been pressed
 298:	80 91 64 00 	lds	r24, 0x0064
 29c:	88 23       	and	r24, r24
 29e:	21 f0       	breq	.+8      	; 0x2a8 <SrvTock+0x70>
				{
					uTmrState--;	//then count down to letting the user push the sample button again
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	80 93 64 00 	sts	0x0064, r24
 2a6:	08 95       	ret
				}
				else
				{
					if(CHECKBIT(defFireButtonPort,defFireButtonPin)==0)		//Has the user pressed the sample RPM button?
 2a8:	b4 99       	sbic	0x16, 4	; 22
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <SrvTock+0x8e>
					{
						uTmrState=25;	//don't go back into here for awhile
 2ac:	89 e1       	ldi	r24, 0x19	; 25
 2ae:	80 93 64 00 	sts	0x0064, r24
						u08SubState=0;	//setup the analog interrupt to be in the correct state
 2b2:	10 92 65 00 	sts	0x0065, r1
						if(u08RpmCounter>3)	//have we reached the end of the RPM storage array?
 2b6:	80 91 72 00 	lds	r24, 0x0072
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	10 f0       	brcs	.+4      	; 0x2c2 <SrvTock+0x8a>
						{
							u08RpmCounter=0;	//yes, then start over with the array
 2be:	10 92 72 00 	sts	0x0072, r1
						}
						//disable any interrupt flags before the analog comparitor has been enabled!
						ACSR = (1<<ACI)|(1<<ACIE)|(1<<ACIS1)|(0<<ACIS0);	//turn on the analog comparitor interrupt, we are looking for a blade to pass
 2c2:	8a e1       	ldi	r24, 0x1A	; 26
 2c4:	88 b9       	out	0x08, r24	; 8
 2c6:	08 95       	ret

000002c8 <uCinit>:
//Returns:
//       none
//----------------------------------------------------------------------------
void uCinit(void)
{
	PORTB=0b00011000;	//to enable a pullup resistor on this port, set the bit to "1"
 2c8:	88 e1       	ldi	r24, 0x18	; 24
 2ca:	88 bb       	out	0x18, r24	; 24
	DDRB=0b11100100;  	//to set the pin as an output, set the bit to "1"
 2cc:	84 ee       	ldi	r24, 0xE4	; 228
 2ce:	87 bb       	out	0x17, r24	; 23
	PORTD=0b00000000;     	//to enable a pullup resistor on this port, set the bit to "1"
 2d0:	12 ba       	out	0x12, r1	; 18
	DDRD=0b11111111;   	//to set the pin as an output, set the bit to "1"
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	81 bb       	out	0x11, r24	; 17

	//This sets up an 8 bit 
	TIMSK = (1<<TOIE0);	//Enable a timer overflow interrupt
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	89 bf       	out	0x39, r24	; 57
	TCCR0A = 0;			//just a normal overflow
 2da:	10 be       	out	0x30, r1	; 48
	TCCR0B = (1<<CS00);	//count with cpu clock/8
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	83 bf       	out	0x33, r24	; 51

	DIDR = (1<<AIN1D)|(1<<AIN0D);		//turn off the digital input pins on the analog comparitor pins
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	81 b9       	out	0x01, r24	; 1
}
 2e4:	08 95       	ret

000002e6 <main>:
//       integer (no idea where this integer is returned to)
//----------------------------------------------------------------------------
// Main loop
int main( void )
{
	uCinit();		//go through the initialization process for the microcontroller
 2e6:	f0 df       	rcall	.-32     	; 0x2c8 <uCinit>
	sei();        	//enable interrupts
 2e8:	78 94       	sei


	while(1)       // go into an infinite loop here
	{
		wdt_reset();	//reset the watchdog
 2ea:	a8 95       	wdr
       	SrvTock();        //go to the tock every 20ms
 2ec:	a5 df       	rcall	.-182    	; 0x238 <SrvTock>
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <main+0x4>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
