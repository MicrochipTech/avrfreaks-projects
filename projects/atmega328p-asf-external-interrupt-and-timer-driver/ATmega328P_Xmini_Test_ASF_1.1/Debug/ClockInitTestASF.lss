
ClockInitTestASF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  000004da  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000100  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012df  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000792  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000151b  00000000  00000000  0000207b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000030c  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000eb53  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000097f  00000000  00000000  000123f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00012d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000039ae  00000000  00000000  00012e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__vector_1>
   6:	00 00       	nop
   8:	81 c0       	rjmp	.+258    	; 0x10c <__vector_2>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__vector_3>
   e:	00 00       	nop
  10:	cf c0       	rjmp	.+414    	; 0x1b0 <__vector_4>
  12:	00 00       	nop
  14:	f6 c0       	rjmp	.+492    	; 0x202 <__vector_5>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	d4 d1       	rcall	.+936    	; 0x42e <main>
  86:	ed c1       	rjmp	.+986    	; 0x462 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <sysclk_init>:
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 93 64 00 	sts	0x0064, r24
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
  90:	80 91 61 00 	lds	r24, 0x0061
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	59 f0       	breq	.+22     	; 0xae <sysclk_init+0x24>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
  98:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
  9a:	f8 94       	cli
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  9c:	5f 93       	push	r21
  9e:	50 e8       	ldi	r21, 0x80	; 128
  a0:	50 93 61 00 	sts	0x0061, r21
  a4:	53 e0       	ldi	r21, 0x03	; 3
  a6:	50 93 61 00 	sts	0x0061, r21
  aa:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  ac:	8f bf       	out	0x3f, r24	; 63
  ae:	08 95       	ret

000000b0 <board_init>:
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  b0:	2d 98       	cbi	0x05, 5	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  b2:	25 9a       	sbi	0x04, 5	; 4
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
  b4:	27 98       	cbi	0x04, 7	; 4
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
  b6:	2f 9a       	sbi	0x05, 7	; 5
  b8:	08 95       	ret

000000ba <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	e0 91 08 01 	lds	r30, 0x0108
  e0:	f0 91 09 01 	lds	r31, 0x0109
  e4:	30 97       	sbiw	r30, 0x00	; 0
  e6:	09 f0       	breq	.+2      	; 0xea <__vector_1+0x30>
  e8:	09 95       	icall
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_2>:
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
 12e:	e0 91 06 01 	lds	r30, 0x0106
 132:	f0 91 07 01 	lds	r31, 0x0107
 136:	30 97       	sbiw	r30, 0x00	; 0
 138:	09 f0       	breq	.+2      	; 0x13c <__vector_2+0x30>
 13a:	09 95       	icall
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_3>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	e0 91 04 01 	lds	r30, 0x0104
 184:	f0 91 05 01 	lds	r31, 0x0105
 188:	30 97       	sbiw	r30, 0x00	; 0
 18a:	09 f0       	breq	.+2      	; 0x18e <__vector_3+0x30>
 18c:	09 95       	icall
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_4>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	e0 91 02 01 	lds	r30, 0x0102
 1d6:	f0 91 03 01 	lds	r31, 0x0103
 1da:	30 97       	sbiw	r30, 0x00	; 0
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <__vector_4+0x30>
 1de:	09 95       	icall
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_5>:
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	e0 91 00 01 	lds	r30, 0x0100
 228:	f0 91 01 01 	lds	r31, 0x0101
 22c:	30 97       	sbiw	r30, 0x00	; 0
 22e:	09 f0       	breq	.+2      	; 0x232 <__vector_5+0x30>
 230:	09 95       	icall
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <ext_int_pcint_clear_flag>:
 254:	98 ee       	ldi	r25, 0xE8	; 232
 256:	98 0f       	add	r25, r24
 258:	95 30       	cpi	r25, 0x05	; 5
 25a:	10 f4       	brcc	.+4      	; 0x260 <ext_int_pcint_clear_flag+0xc>
 25c:	da 9a       	sbi	0x1b, 2	; 27
 25e:	08 95       	ret
 260:	90 ef       	ldi	r25, 0xF0	; 240
 262:	98 0f       	add	r25, r24
 264:	97 30       	cpi	r25, 0x07	; 7
 266:	10 f4       	brcc	.+4      	; 0x26c <ext_int_pcint_clear_flag+0x18>
 268:	d9 9a       	sbi	0x1b, 1	; 27
 26a:	08 95       	ret
 26c:	88 50       	subi	r24, 0x08	; 8
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	08 f4       	brcc	.+2      	; 0x274 <ext_int_pcint_clear_flag+0x20>
 272:	d8 9a       	sbi	0x1b, 0	; 27
 274:	08 95       	ret

00000276 <ext_int_pcint_enable>:
 276:	98 ee       	ldi	r25, 0xE8	; 232
 278:	98 0f       	add	r25, r24
 27a:	95 30       	cpi	r25, 0x05	; 5
 27c:	a8 f4       	brcc	.+42     	; 0x2a8 <ext_int_pcint_enable+0x32>
 27e:	e8 e6       	ldi	r30, 0x68	; 104
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	94 60       	ori	r25, 0x04	; 4
 286:	90 83       	st	Z, r25
 288:	ed e6       	ldi	r30, 0x6D	; 109
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	40 81       	ld	r20, Z
 28e:	87 70       	andi	r24, 0x07	; 7
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <ext_int_pcint_enable+0x26>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <ext_int_pcint_enable+0x22>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret
 2a8:	90 ef       	ldi	r25, 0xF0	; 240
 2aa:	98 0f       	add	r25, r24
 2ac:	97 30       	cpi	r25, 0x07	; 7
 2ae:	a8 f4       	brcc	.+42     	; 0x2da <ext_int_pcint_enable+0x64>
 2b0:	e8 e6       	ldi	r30, 0x68	; 104
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	92 60       	ori	r25, 0x02	; 2
 2b8:	90 83       	st	Z, r25
 2ba:	ec e6       	ldi	r30, 0x6C	; 108
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	40 81       	ld	r20, Z
 2c0:	87 70       	andi	r24, 0x07	; 7
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <ext_int_pcint_enable+0x58>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <ext_int_pcint_enable+0x54>
 2d2:	cb 01       	movw	r24, r22
 2d4:	84 2b       	or	r24, r20
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret
 2da:	98 ef       	ldi	r25, 0xF8	; 248
 2dc:	98 0f       	add	r25, r24
 2de:	98 30       	cpi	r25, 0x08	; 8
 2e0:	a0 f4       	brcc	.+40     	; 0x30a <ext_int_pcint_enable+0x94>
 2e2:	e8 e6       	ldi	r30, 0x68	; 104
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	91 60       	ori	r25, 0x01	; 1
 2ea:	90 83       	st	Z, r25
 2ec:	eb e6       	ldi	r30, 0x6B	; 107
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	40 81       	ld	r20, Z
 2f2:	87 70       	andi	r24, 0x07	; 7
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <ext_int_pcint_enable+0x8a>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <ext_int_pcint_enable+0x86>
 304:	cb 01       	movw	r24, r22
 306:	84 2b       	or	r24, r20
 308:	80 83       	st	Z, r24
 30a:	08 95       	ret

0000030c <ext_int_pcint_disable>:
 30c:	98 ee       	ldi	r25, 0xE8	; 232
 30e:	98 0f       	add	r25, r24
 310:	95 30       	cpi	r25, 0x05	; 5
 312:	88 f4       	brcc	.+34     	; 0x336 <ext_int_pcint_disable+0x2a>
 314:	ed e6       	ldi	r30, 0x6D	; 109
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	40 81       	ld	r20, Z
 31a:	87 70       	andi	r24, 0x07	; 7
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <ext_int_pcint_disable+0x1c>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	8a 95       	dec	r24
 32a:	e2 f7       	brpl	.-8      	; 0x324 <ext_int_pcint_disable+0x18>
 32c:	cb 01       	movw	r24, r22
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	80 83       	st	Z, r24
 334:	08 95       	ret
 336:	90 ef       	ldi	r25, 0xF0	; 240
 338:	98 0f       	add	r25, r24
 33a:	97 30       	cpi	r25, 0x07	; 7
 33c:	88 f4       	brcc	.+34     	; 0x360 <ext_int_pcint_disable+0x54>
 33e:	ec e6       	ldi	r30, 0x6C	; 108
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	40 81       	ld	r20, Z
 344:	87 70       	andi	r24, 0x07	; 7
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <ext_int_pcint_disable+0x46>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	8a 95       	dec	r24
 354:	e2 f7       	brpl	.-8      	; 0x34e <ext_int_pcint_disable+0x42>
 356:	cb 01       	movw	r24, r22
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	80 83       	st	Z, r24
 35e:	08 95       	ret
 360:	98 ef       	ldi	r25, 0xF8	; 248
 362:	98 0f       	add	r25, r24
 364:	98 30       	cpi	r25, 0x08	; 8
 366:	80 f4       	brcc	.+32     	; 0x388 <ext_int_pcint_disable+0x7c>
 368:	eb e6       	ldi	r30, 0x6B	; 107
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	40 81       	ld	r20, Z
 36e:	87 70       	andi	r24, 0x07	; 7
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <ext_int_pcint_disable+0x70>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <ext_int_pcint_disable+0x6c>
 380:	cb 01       	movw	r24, r22
 382:	80 95       	com	r24
 384:	84 23       	and	r24, r20
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <ext_int_pcint_init>:

void ext_int_pcint_init(ioport_pin_t pin)
{
 38a:	cf 93       	push	r28
 38c:	c8 2f       	mov	r28, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(pin);
 38e:	be df       	rcall	.-132    	; 0x30c <ext_int_pcint_disable>
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 390:	8c 2f       	mov	r24, r28
 392:	87 70       	andi	r24, 0x07	; 7
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <ext_int_pcint_init+0x14>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	8a 95       	dec	r24
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <ext_int_pcint_init+0x10>
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 3a2:	ec 2f       	mov	r30, r28
 3a4:	e6 95       	lsr	r30
 3a6:	e6 95       	lsr	r30
 3a8:	e6 95       	lsr	r30
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	af 01       	movw	r20, r30
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	e4 0f       	add	r30, r20
 3b4:	f5 1f       	adc	r31, r21
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
 3b6:	b0 96       	adiw	r30, 0x20	; 32
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 3b8:	82 2f       	mov	r24, r18
 3ba:	80 95       	com	r24
 3bc:	91 81       	ldd	r25, Z+1	; 0x01
 3be:	89 23       	and	r24, r25
 3c0:	81 83       	std	Z+1, r24	; 0x01
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 3c2:	82 81       	ldd	r24, Z+2	; 0x02
 3c4:	28 2b       	or	r18, r24
 3c6:	22 83       	std	Z+2, r18	; 0x02
	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	ioport_configure_pin(pin, IOPORT_DIR_INPUT | IOPORT_PULL_UP);

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(pin);
 3c8:	8c 2f       	mov	r24, r28
 3ca:	44 df       	rcall	.-376    	; 0x254 <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(pin);
 3cc:	8c 2f       	mov	r24, r28
 3ce:	53 df       	rcall	.-346    	; 0x276 <ext_int_pcint_enable>
}
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(ioport_pin_t ext_int, ext_int_callback_t callback)
{
	if (ext_int == EXT_INT0_PIN) {
 3d4:	8a 31       	cpi	r24, 0x1A	; 26
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <ext_int_set_interrupt_callback+0xe>
		ext_int_int0_callback = callback;
 3d8:	70 93 09 01 	sts	0x0109, r23
 3dc:	60 93 08 01 	sts	0x0108, r22
 3e0:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
 3e2:	8b 31       	cpi	r24, 0x1B	; 27
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <ext_int_set_interrupt_callback+0x1c>
		ext_int_int1_callback = callback;
 3e6:	70 93 07 01 	sts	0x0107, r23
 3ea:	60 93 06 01 	sts	0x0106, r22
 3ee:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
 3f0:	98 ef       	ldi	r25, 0xF8	; 248
 3f2:	98 0f       	add	r25, r24
 3f4:	98 30       	cpi	r25, 0x08	; 8
 3f6:	28 f4       	brcc	.+10     	; 0x402 <ext_int_set_interrupt_callback+0x2e>
		ext_int_pcint0_callback = callback;
 3f8:	70 93 05 01 	sts	0x0105, r23
 3fc:	60 93 04 01 	sts	0x0104, r22
 400:	08 95       	ret
	} else
	if (ext_int >= PC_INT8_PIN && ext_int <=PC_INT14_PIN) {
 402:	90 ef       	ldi	r25, 0xF0	; 240
 404:	98 0f       	add	r25, r24
 406:	97 30       	cpi	r25, 0x07	; 7
 408:	28 f4       	brcc	.+10     	; 0x414 <ext_int_set_interrupt_callback+0x40>
		ext_int_pcint1_callback = callback;
 40a:	70 93 03 01 	sts	0x0103, r23
 40e:	60 93 02 01 	sts	0x0102, r22
 412:	08 95       	ret
	} else
	if (ext_int >= PC_INT16_PIN && ext_int <=PC_INT20_PIN) {
 414:	88 51       	subi	r24, 0x18	; 24
 416:	85 30       	cpi	r24, 0x05	; 5
 418:	20 f4       	brcc	.+8      	; 0x422 <ext_int_set_interrupt_callback+0x4e>
		ext_int_pcint2_callback = callback;
 41a:	70 93 01 01 	sts	0x0101, r23
 41e:	60 93 00 01 	sts	0x0100, r22
 422:	08 95       	ret

00000424 <sw0_int_callback>:
#include <ext_int_mega.h>

static void sw0_int_callback(void)
{
	// Toggle LED0 only on sw pressed (inverted logic)
	if(!ioport_get_pin_level(SW0_GPIO)) ioport_toggle_pin(LED0_GPIO);
 424:	1f 99       	sbic	0x03, 7	; 3
 426:	02 c0       	rjmp	.+4      	; 0x42c <sw0_int_callback+0x8>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
 428:	80 e2       	ldi	r24, 0x20	; 32
 42a:	83 b9       	out	0x03, r24	; 3
 42c:	08 95       	ret

0000042e <main>:
}

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 42e:	2d de       	rcall	.-934    	; 0x8a <sysclk_init>

	board_init();
 430:	3f de       	rcall	.-898    	; 0xb0 <board_init>

	/* Insert application code here, after the board has been initialized. */
	
	/* Disable Global interrupt */
	cpu_irq_disable();
 432:	f8 94       	cli

    /* Set Interrupt CallBack Function **/
	ext_int_set_interrupt_callback(SW0_GPIO, sw0_int_callback);
 434:	62 e1       	ldi	r22, 0x12	; 18
 436:	72 e0       	ldi	r23, 0x02	; 2
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	cc df       	rcall	.-104    	; 0x3d4 <ext_int_set_interrupt_callback>
	
	/* Enable the Ext Int */
	ext_int_pcint_init(SW0_GPIO);
 43c:	8f e0       	ldi	r24, 0x0F	; 15
 43e:	a5 df       	rcall	.-182    	; 0x38a <ext_int_pcint_init>
 440:	80 e2       	ldi	r24, 0x20	; 32
 442:	83 b9       	out	0x03, r24	; 3
 444:	85 e8       	ldi	r24, 0x85	; 133
 446:	95 e4       	ldi	r25, 0x45	; 69
 448:	a1 e0       	ldi	r26, 0x01	; 1
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	a1 09       	sbc	r26, r1
 450:	b1 09       	sbc	r27, r1
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	a1 05       	cpc	r26, r1
 456:	b1 05       	cpc	r27, r1
 458:	c9 f7       	brne	.-14     	; 0x44c <main+0x1e>
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	83 b9       	out	0x03, r24	; 3
	ioport_toggle_pin(LED0_GPIO);
	delay_ms(500);
	ioport_toggle_pin(LED0_GPIO);
	
	/* Enable Global interrupt */
	cpu_irq_enable();
 45e:	78 94       	sei
 460:	ff cf       	rjmp	.-2      	; 0x460 <main+0x32>

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
