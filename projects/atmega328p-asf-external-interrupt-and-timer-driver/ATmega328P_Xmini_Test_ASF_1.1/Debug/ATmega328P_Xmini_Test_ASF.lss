
ATmega328P_Xmini_Test_ASF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800100  00800100  00000882  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000240  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002007  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000966  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000020cd  00000000  00000000  0000345f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000840  00000000  00000000  0000552c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000f047  00000000  00000000  00005d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001368  00000000  00000000  00014db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f0  00000000  00000000  0001611b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003dd3  00000000  00000000  0001630b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__vector_1>
   6:	00 00       	nop
   8:	35 c2       	rjmp	.+1130   	; 0x474 <__vector_2>
   a:	00 00       	nop
   c:	5c c2       	rjmp	.+1208   	; 0x4c6 <__vector_3>
   e:	00 00       	nop
  10:	83 c2       	rjmp	.+1286   	; 0x518 <__vector_4>
  12:	00 00       	nop
  14:	aa c2       	rjmp	.+1364   	; 0x56a <__vector_5>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9b c0       	rjmp	.+310    	; 0x154 <__vector_7>
  1e:	00 00       	nop
  20:	14 c1       	rjmp	.+552    	; 0x24a <__vector_8>
  22:	00 00       	nop
  24:	b6 c1       	rjmp	.+876    	; 0x392 <__vector_9>
  26:	00 00       	nop
  28:	39 c1       	rjmp	.+626    	; 0x29c <__vector_10>
  2a:	00 00       	nop
  2c:	6a c0       	rjmp	.+212    	; 0x102 <__vector_11>
  2e:	00 00       	nop
  30:	e3 c0       	rjmp	.+454    	; 0x1f8 <__vector_12>
  32:	00 00       	nop
  34:	85 c1       	rjmp	.+778    	; 0x340 <__vector_13>
  36:	00 00       	nop
  38:	3b c0       	rjmp	.+118    	; 0xb0 <__vector_14>
  3a:	00 00       	nop
  3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__vector_15>
  3e:	00 00       	nop
  40:	56 c1       	rjmp	.+684    	; 0x2ee <__vector_16>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	8c d3       	rcall	.+1816   	; 0x79e <main>
  86:	c1 c3       	rjmp	.+1922   	; 0x80a <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <sysclk_init>:
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 93 64 00 	sts	0x0064, r24
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
  90:	80 91 61 00 	lds	r24, 0x0061
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  94:	83 30       	cpi	r24, 0x03	; 3
  96:	59 f0       	breq	.+22     	; 0xae <sysclk_init+0x24>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
  98:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
  9a:	f8 94       	cli
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  9c:	5f 93       	push	r21
  9e:	50 e8       	ldi	r21, 0x80	; 128
  a0:	50 93 61 00 	sts	0x0061, r21
  a4:	53 e0       	ldi	r21, 0x03	; 3
  a6:	50 93 61 00 	sts	0x0061, r21
  aa:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  ac:	8f bf       	out	0x3f, r24	; 63
  ae:	08 95       	ret

000000b0 <__vector_14>:
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	3f 93       	push	r19
  be:	4f 93       	push	r20
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
  d2:	e0 91 12 01 	lds	r30, 0x0112
  d6:	f0 91 13 01 	lds	r31, 0x0113
  da:	30 97       	sbiw	r30, 0x00	; 0
  dc:	09 f0       	breq	.+2      	; 0xe0 <__vector_14+0x30>
  de:	09 95       	icall
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	7f 91       	pop	r23
  ee:	6f 91       	pop	r22
  f0:	5f 91       	pop	r21
  f2:	4f 91       	pop	r20
  f4:	3f 91       	pop	r19
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_11>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
 124:	e0 91 0c 01 	lds	r30, 0x010C
 128:	f0 91 0d 01 	lds	r31, 0x010D
 12c:	30 97       	sbiw	r30, 0x00	; 0
 12e:	09 f0       	breq	.+2      	; 0x132 <__vector_11+0x30>
 130:	09 95       	icall
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_7>:
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	e0 91 04 01 	lds	r30, 0x0104
 17a:	f0 91 05 01 	lds	r31, 0x0105
 17e:	30 97       	sbiw	r30, 0x00	; 0
 180:	09 f0       	breq	.+2      	; 0x184 <__vector_7+0x30>
 182:	09 95       	icall
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_15>:
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	e0 91 10 01 	lds	r30, 0x0110
 1cc:	f0 91 11 01 	lds	r31, 0x0111
 1d0:	30 97       	sbiw	r30, 0x00	; 0
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <__vector_15+0x30>
 1d4:	09 95       	icall
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_12>:
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	e0 91 0a 01 	lds	r30, 0x010A
 21e:	f0 91 0b 01 	lds	r31, 0x010B
 222:	30 97       	sbiw	r30, 0x00	; 0
 224:	09 f0       	breq	.+2      	; 0x228 <__vector_12+0x30>
 226:	09 95       	icall
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_8>:
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	3f 93       	push	r19
 258:	4f 93       	push	r20
 25a:	5f 93       	push	r21
 25c:	6f 93       	push	r22
 25e:	7f 93       	push	r23
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
 26c:	e0 91 02 01 	lds	r30, 0x0102
 270:	f0 91 03 01 	lds	r31, 0x0103
 274:	30 97       	sbiw	r30, 0x00	; 0
 276:	09 f0       	breq	.+2      	; 0x27a <__vector_8+0x30>
 278:	09 95       	icall
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <__vector_10>:
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
 2be:	e0 91 06 01 	lds	r30, 0x0106
 2c2:	f0 91 07 01 	lds	r31, 0x0107
 2c6:	30 97       	sbiw	r30, 0x00	; 0
 2c8:	09 f0       	breq	.+2      	; 0x2cc <__vector_10+0x30>
 2ca:	09 95       	icall
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_16>:
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
 310:	e0 91 0e 01 	lds	r30, 0x010E
 314:	f0 91 0f 01 	lds	r31, 0x010F
 318:	30 97       	sbiw	r30, 0x00	; 0
 31a:	09 f0       	breq	.+2      	; 0x31e <__vector_16+0x30>
 31c:	09 95       	icall
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_13>:
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
 362:	e0 91 08 01 	lds	r30, 0x0108
 366:	f0 91 09 01 	lds	r31, 0x0109
 36a:	30 97       	sbiw	r30, 0x00	; 0
 36c:	09 f0       	breq	.+2      	; 0x370 <__vector_13+0x30>
 36e:	09 95       	icall
 370:	ff 91       	pop	r31
 372:	ef 91       	pop	r30
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_9>:
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
 3b4:	e0 91 00 01 	lds	r30, 0x0100
 3b8:	f0 91 01 01 	lds	r31, 0x0101
 3bc:	30 97       	sbiw	r30, 0x00	; 0
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__vector_9+0x30>
 3c0:	09 95       	icall
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <tc1_enable>:
 3e4:	e4 e6       	ldi	r30, 0x64	; 100
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	80 83       	st	Z, r24
 3ee:	08 95       	ret

000003f0 <tc1_disable>:
 3f0:	e4 e6       	ldi	r30, 0x64	; 100
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	88 60       	ori	r24, 0x08	; 8
 3f8:	80 83       	st	Z, r24
 3fa:	08 95       	ret

000003fc <tc1_set_ovf_interrupt_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 3fc:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
 3fe:	f8 94       	cli

void tc1_set_ovf_interrupt_callback(tc_callback_t callback)
{
	irqflags_t iflags = cpu_irq_save();
	
	tc_tcc1_ovf_callback = callback;
 400:	90 93 09 01 	sts	0x0109, r25
 404:	80 93 08 01 	sts	0x0108, r24
	TIFR1 |= (1<<TOV1);
 408:	b0 9a       	sbi	0x16, 0	; 22
	TIMSK1 |= (1<<TOIE1);
 40a:	ef e6       	ldi	r30, 0x6F	; 111
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 414:	2f bf       	out	0x3f, r18	; 63
 416:	08 95       	ret

00000418 <board_init>:
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 418:	2d 98       	cbi	0x05, 5	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 41a:	25 9a       	sbi	0x04, 5	; 4
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 41c:	27 98       	cbi	0x04, 7	; 4
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
 41e:	2f 9a       	sbi	0x05, 7	; 5
 420:	08 95       	ret

00000422 <__vector_1>:
	/* Clear the INTn interrupt flag */
	ext_int_clear_flag(pin);

	/* Enable the interrupt */
	ext_int_enable(pin);
}
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	e0 91 1c 01 	lds	r30, 0x011C
 448:	f0 91 1d 01 	lds	r31, 0x011D
 44c:	30 97       	sbiw	r30, 0x00	; 0
 44e:	09 f0       	breq	.+2      	; 0x452 <__vector_1+0x30>
 450:	09 95       	icall
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_2>:
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
 496:	e0 91 1a 01 	lds	r30, 0x011A
 49a:	f0 91 1b 01 	lds	r31, 0x011B
 49e:	30 97       	sbiw	r30, 0x00	; 0
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__vector_2+0x30>
 4a2:	09 95       	icall
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_3>:
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
 4e8:	e0 91 18 01 	lds	r30, 0x0118
 4ec:	f0 91 19 01 	lds	r31, 0x0119
 4f0:	30 97       	sbiw	r30, 0x00	; 0
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__vector_3+0x30>
 4f4:	09 95       	icall
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_4>:
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	2f 93       	push	r18
 524:	3f 93       	push	r19
 526:	4f 93       	push	r20
 528:	5f 93       	push	r21
 52a:	6f 93       	push	r22
 52c:	7f 93       	push	r23
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
 532:	af 93       	push	r26
 534:	bf 93       	push	r27
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
 53a:	e0 91 16 01 	lds	r30, 0x0116
 53e:	f0 91 17 01 	lds	r31, 0x0117
 542:	30 97       	sbiw	r30, 0x00	; 0
 544:	09 f0       	breq	.+2      	; 0x548 <__vector_4+0x30>
 546:	09 95       	icall
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_5>:
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
 58c:	e0 91 14 01 	lds	r30, 0x0114
 590:	f0 91 15 01 	lds	r31, 0x0115
 594:	30 97       	sbiw	r30, 0x00	; 0
 596:	09 f0       	breq	.+2      	; 0x59a <__vector_5+0x30>
 598:	09 95       	icall
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <ext_int_pcint_clear_flag>:
 5bc:	98 ee       	ldi	r25, 0xE8	; 232
 5be:	98 0f       	add	r25, r24
 5c0:	95 30       	cpi	r25, 0x05	; 5
 5c2:	10 f4       	brcc	.+4      	; 0x5c8 <ext_int_pcint_clear_flag+0xc>
 5c4:	da 9a       	sbi	0x1b, 2	; 27
 5c6:	08 95       	ret
 5c8:	90 ef       	ldi	r25, 0xF0	; 240
 5ca:	98 0f       	add	r25, r24
 5cc:	97 30       	cpi	r25, 0x07	; 7
 5ce:	10 f4       	brcc	.+4      	; 0x5d4 <ext_int_pcint_clear_flag+0x18>
 5d0:	d9 9a       	sbi	0x1b, 1	; 27
 5d2:	08 95       	ret
 5d4:	88 50       	subi	r24, 0x08	; 8
 5d6:	88 30       	cpi	r24, 0x08	; 8
 5d8:	08 f4       	brcc	.+2      	; 0x5dc <ext_int_pcint_clear_flag+0x20>
 5da:	d8 9a       	sbi	0x1b, 0	; 27
 5dc:	08 95       	ret

000005de <ext_int_pcint_enable>:
 5de:	98 ee       	ldi	r25, 0xE8	; 232
 5e0:	98 0f       	add	r25, r24
 5e2:	95 30       	cpi	r25, 0x05	; 5
 5e4:	a8 f4       	brcc	.+42     	; 0x610 <ext_int_pcint_enable+0x32>
 5e6:	e8 e6       	ldi	r30, 0x68	; 104
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	90 81       	ld	r25, Z
 5ec:	94 60       	ori	r25, 0x04	; 4
 5ee:	90 83       	st	Z, r25
 5f0:	ed e6       	ldi	r30, 0x6D	; 109
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	40 81       	ld	r20, Z
 5f6:	87 70       	andi	r24, 0x07	; 7
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	b9 01       	movw	r22, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <ext_int_pcint_enable+0x26>
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <ext_int_pcint_enable+0x22>
 608:	cb 01       	movw	r24, r22
 60a:	84 2b       	or	r24, r20
 60c:	80 83       	st	Z, r24
 60e:	08 95       	ret
 610:	90 ef       	ldi	r25, 0xF0	; 240
 612:	98 0f       	add	r25, r24
 614:	97 30       	cpi	r25, 0x07	; 7
 616:	a8 f4       	brcc	.+42     	; 0x642 <ext_int_pcint_enable+0x64>
 618:	e8 e6       	ldi	r30, 0x68	; 104
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	90 81       	ld	r25, Z
 61e:	92 60       	ori	r25, 0x02	; 2
 620:	90 83       	st	Z, r25
 622:	ec e6       	ldi	r30, 0x6C	; 108
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	40 81       	ld	r20, Z
 628:	87 70       	andi	r24, 0x07	; 7
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	b9 01       	movw	r22, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <ext_int_pcint_enable+0x58>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	8a 95       	dec	r24
 638:	e2 f7       	brpl	.-8      	; 0x632 <ext_int_pcint_enable+0x54>
 63a:	cb 01       	movw	r24, r22
 63c:	84 2b       	or	r24, r20
 63e:	80 83       	st	Z, r24
 640:	08 95       	ret
 642:	98 ef       	ldi	r25, 0xF8	; 248
 644:	98 0f       	add	r25, r24
 646:	98 30       	cpi	r25, 0x08	; 8
 648:	a0 f4       	brcc	.+40     	; 0x672 <ext_int_pcint_enable+0x94>
 64a:	e8 e6       	ldi	r30, 0x68	; 104
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	90 81       	ld	r25, Z
 650:	91 60       	ori	r25, 0x01	; 1
 652:	90 83       	st	Z, r25
 654:	eb e6       	ldi	r30, 0x6B	; 107
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	40 81       	ld	r20, Z
 65a:	87 70       	andi	r24, 0x07	; 7
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	b9 01       	movw	r22, r18
 662:	02 c0       	rjmp	.+4      	; 0x668 <ext_int_pcint_enable+0x8a>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	8a 95       	dec	r24
 66a:	e2 f7       	brpl	.-8      	; 0x664 <ext_int_pcint_enable+0x86>
 66c:	cb 01       	movw	r24, r22
 66e:	84 2b       	or	r24, r20
 670:	80 83       	st	Z, r24
 672:	08 95       	ret

00000674 <ext_int_pcint_disable>:
 674:	98 ee       	ldi	r25, 0xE8	; 232
 676:	98 0f       	add	r25, r24
 678:	95 30       	cpi	r25, 0x05	; 5
 67a:	88 f4       	brcc	.+34     	; 0x69e <ext_int_pcint_disable+0x2a>
 67c:	ed e6       	ldi	r30, 0x6D	; 109
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	40 81       	ld	r20, Z
 682:	87 70       	andi	r24, 0x07	; 7
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	b9 01       	movw	r22, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <ext_int_pcint_disable+0x1c>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	8a 95       	dec	r24
 692:	e2 f7       	brpl	.-8      	; 0x68c <ext_int_pcint_disable+0x18>
 694:	cb 01       	movw	r24, r22
 696:	80 95       	com	r24
 698:	84 23       	and	r24, r20
 69a:	80 83       	st	Z, r24
 69c:	08 95       	ret
 69e:	90 ef       	ldi	r25, 0xF0	; 240
 6a0:	98 0f       	add	r25, r24
 6a2:	97 30       	cpi	r25, 0x07	; 7
 6a4:	88 f4       	brcc	.+34     	; 0x6c8 <ext_int_pcint_disable+0x54>
 6a6:	ec e6       	ldi	r30, 0x6C	; 108
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	40 81       	ld	r20, Z
 6ac:	87 70       	andi	r24, 0x07	; 7
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	b9 01       	movw	r22, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <ext_int_pcint_disable+0x46>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	8a 95       	dec	r24
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <ext_int_pcint_disable+0x42>
 6be:	cb 01       	movw	r24, r22
 6c0:	80 95       	com	r24
 6c2:	84 23       	and	r24, r20
 6c4:	80 83       	st	Z, r24
 6c6:	08 95       	ret
 6c8:	98 ef       	ldi	r25, 0xF8	; 248
 6ca:	98 0f       	add	r25, r24
 6cc:	98 30       	cpi	r25, 0x08	; 8
 6ce:	80 f4       	brcc	.+32     	; 0x6f0 <ext_int_pcint_disable+0x7c>
 6d0:	eb e6       	ldi	r30, 0x6B	; 107
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	40 81       	ld	r20, Z
 6d6:	87 70       	andi	r24, 0x07	; 7
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	b9 01       	movw	r22, r18
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <ext_int_pcint_disable+0x70>
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	8a 95       	dec	r24
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <ext_int_pcint_disable+0x6c>
 6e8:	cb 01       	movw	r24, r22
 6ea:	80 95       	com	r24
 6ec:	84 23       	and	r24, r20
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret

000006f2 <ext_int_pcint_init>:

void ext_int_pcint_init(ioport_pin_t pin)
{
 6f2:	cf 93       	push	r28
 6f4:	c8 2f       	mov	r28, r24
	/* Disable the interrupt */
	ext_int_pcint_disable(pin);
 6f6:	be df       	rcall	.-132    	; 0x674 <ext_int_pcint_disable>
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 6f8:	8c 2f       	mov	r24, r28
 6fa:	87 70       	andi	r24, 0x07	; 7
 6fc:	21 e0       	ldi	r18, 0x01	; 1
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <ext_int_pcint_init+0x14>
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	8a 95       	dec	r24
 708:	e2 f7       	brpl	.-8      	; 0x702 <ext_int_pcint_init+0x10>
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 70a:	ec 2f       	mov	r30, r28
 70c:	e6 95       	lsr	r30
 70e:	e6 95       	lsr	r30
 710:	e6 95       	lsr	r30
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET)));
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	af 01       	movw	r20, r30
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	e4 0f       	add	r30, r20
 71c:	f5 1f       	adc	r31, r21
 * \brief: To get the base address of port number
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
	return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS +
 71e:	b0 96       	adiw	r30, 0x20	; 32
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 720:	82 2f       	mov	r24, r18
 722:	80 95       	com	r24
 724:	91 81       	ldd	r25, Z+1	; 0x01
 726:	89 23       	and	r24, r25
 728:	81 83       	std	Z+1, r24	; 0x01
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 72a:	82 81       	ldd	r24, Z+2	; 0x02
 72c:	28 2b       	or	r18, r24
 72e:	22 83       	std	Z+2, r18	; 0x02
	/* Enable IRQ pin as input */
	/* Enable the pullup for the IRQ pin */
	ioport_configure_pin(pin, IOPORT_DIR_INPUT | IOPORT_PULL_UP);

	/* Clear the PCINTn interrupt flag */
	ext_int_pcint_clear_flag(pin);
 730:	8c 2f       	mov	r24, r28
 732:	44 df       	rcall	.-376    	; 0x5bc <ext_int_pcint_clear_flag>

	/* Enable the interrupt */
	ext_int_pcint_enable(pin);
 734:	8c 2f       	mov	r24, r28
 736:	53 df       	rcall	.-346    	; 0x5de <ext_int_pcint_enable>
}
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <ext_int_set_interrupt_callback>:

void ext_int_set_interrupt_callback(ioport_pin_t ext_int, ext_int_callback_t callback)
{
	if (ext_int == EXT_INT0_PIN) {
 73c:	8a 31       	cpi	r24, 0x1A	; 26
 73e:	29 f4       	brne	.+10     	; 0x74a <ext_int_set_interrupt_callback+0xe>
		ext_int_int0_callback = callback;
 740:	70 93 1d 01 	sts	0x011D, r23
 744:	60 93 1c 01 	sts	0x011C, r22
 748:	08 95       	ret
	} else
	if (ext_int == EXT_INT1_PIN) {
 74a:	8b 31       	cpi	r24, 0x1B	; 27
 74c:	29 f4       	brne	.+10     	; 0x758 <ext_int_set_interrupt_callback+0x1c>
		ext_int_int1_callback = callback;
 74e:	70 93 1b 01 	sts	0x011B, r23
 752:	60 93 1a 01 	sts	0x011A, r22
 756:	08 95       	ret
	} else
	if (ext_int >= PC_INT0_PIN && ext_int <=PC_INT7_PIN) {
 758:	98 ef       	ldi	r25, 0xF8	; 248
 75a:	98 0f       	add	r25, r24
 75c:	98 30       	cpi	r25, 0x08	; 8
 75e:	28 f4       	brcc	.+10     	; 0x76a <ext_int_set_interrupt_callback+0x2e>
		ext_int_pcint0_callback = callback;
 760:	70 93 19 01 	sts	0x0119, r23
 764:	60 93 18 01 	sts	0x0118, r22
 768:	08 95       	ret
	} else
	if (ext_int >= PC_INT8_PIN && ext_int <=PC_INT14_PIN) {
 76a:	90 ef       	ldi	r25, 0xF0	; 240
 76c:	98 0f       	add	r25, r24
 76e:	97 30       	cpi	r25, 0x07	; 7
 770:	28 f4       	brcc	.+10     	; 0x77c <ext_int_set_interrupt_callback+0x40>
		ext_int_pcint1_callback = callback;
 772:	70 93 17 01 	sts	0x0117, r23
 776:	60 93 16 01 	sts	0x0116, r22
 77a:	08 95       	ret
	} else
	if (ext_int >= PC_INT16_PIN && ext_int <=PC_INT20_PIN) {
 77c:	88 51       	subi	r24, 0x18	; 24
 77e:	85 30       	cpi	r24, 0x05	; 5
 780:	20 f4       	brcc	.+8      	; 0x78a <ext_int_set_interrupt_callback+0x4e>
		ext_int_pcint2_callback = callback;
 782:	70 93 15 01 	sts	0x0115, r23
 786:	60 93 14 01 	sts	0x0114, r22
 78a:	08 95       	ret

0000078c <sw0_int_callback>:
volatile bool run_once;

static void sw0_int_callback(void)
{
	// Set run_once only on SW0 pressed (inverted logic)
	if(!ioport_get_pin_level(SW0_GPIO)) run_once = 1;
 78c:	1f 99       	sbic	0x03, 7	; 3
 78e:	03 c0       	rjmp	.+6      	; 0x796 <sw0_int_callback+0xa>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	80 93 1e 01 	sts	0x011E, r24
 796:	08 95       	ret

00000798 <tcnt1_ovf_int_callback>:
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	83 b9       	out	0x03, r24	; 3
 79c:	08 95       	ret

0000079e <main>:
}

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
 79e:	75 dc       	rcall	.-1814   	; 0x8a <sysclk_init>

	board_init();
 7a0:	3b de       	rcall	.-906    	; 0x418 <board_init>

	/* Insert application code here, after the board has been initialized. */
	
	run_once = 0;
 7a2:	10 92 1e 01 	sts	0x011E, r1
	toggle = 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 1f 01 	sts	0x011F, r24
	
	/* Disable Global interrupt */
	cpu_irq_disable();
 7ac:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 7ae:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 7b0:	f8 94       	cli

static inline void tc1_write_count(uint16_t cnt_value)
{
	irqflags_t iflags = cpu_irq_save();
	
	TCNT1 = cnt_value;
 7b2:	10 92 85 00 	sts	0x0085, r1
 7b6:	10 92 84 00 	sts	0x0084, r1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 7ba:	8f bf       	out	0x3f, r24	; 63
	tc1_write_count(0);
	//tc2_write_count(0);
	
	/* Enable TC clock before setup */
	//tc0_enable();
	tc1_enable();
 7bc:	13 de       	rcall	.-986    	; 0x3e4 <tc1_enable>
}

static inline void tc1_write_clock_source(enum tc01_clksel_t tc_clksel_enum)
{
	// TODO - write FOC1A FOC1B to 0 if pwm mode or set clock before setting pwm mode
	TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | tc_clksel_enum;
 7be:	e1 e8       	ldi	r30, 0x81	; 129
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	88 7f       	andi	r24, 0xF8	; 248
 7c6:	82 60       	ori	r24, 0x02	; 2
 7c8:	80 83       	st	Z, r24
	tc1_write_clock_source(TC01_CLKSEL_PS_8); // No clock no party...
	//tc2_write_clock_source(TC2_CLKSEL_PS_1024); // No clock no party...

	/* Set TC Overflow Interrupt CallBack Function */
	//tc0_set_ovf_interrupt_callback(tcnt0_ovf_int_callback);
	tc1_set_ovf_interrupt_callback(tcnt1_ovf_int_callback);
 7ca:	8c ec       	ldi	r24, 0xCC	; 204
 7cc:	93 e0       	ldi	r25, 0x03	; 3
 7ce:	16 de       	rcall	.-980    	; 0x3fc <tc1_set_ovf_interrupt_callback>
	//tc2_set_ovf_interrupt_callback(tcnt2_ovf_int_callback);
	
	/* Disable TC clock */
	//tc0_disable();
	tc1_disable();
 7d0:	0f de       	rcall	.-994    	; 0x3f0 <tc1_disable>
	//tc2_disable();

    /* Set External Interrupt CallBack Function */
	ext_int_set_interrupt_callback(SW0_GPIO, sw0_int_callback);
 7d2:	66 ec       	ldi	r22, 0xC6	; 198
 7d4:	73 e0       	ldi	r23, 0x03	; 3
 7d6:	8f e0       	ldi	r24, 0x0F	; 15
 7d8:	b1 df       	rcall	.-158    	; 0x73c <ext_int_set_interrupt_callback>
	
	/* Enable the Ext Int */
	ext_int_pcint_init(SW0_GPIO);
 7da:	8f e0       	ldi	r24, 0x0F	; 15
 7dc:	8a df       	rcall	.-236    	; 0x6f2 <ext_int_pcint_init>
	
	/* Enable Global interrupt */
	cpu_irq_enable();
 7de:	78 94       	sei
				//tc2_disable();
				ioport_set_pin_level(LED0_GPIO, 0);
			}
			
			run_once = 0;
			toggle = !toggle;
 7e0:	c1 e0       	ldi	r28, 0x01	; 1
	
	/* Enable Global interrupt */
	cpu_irq_enable();
	
	while (1) {
		if(run_once)
 7e2:	80 91 1e 01 	lds	r24, 0x011E
 7e6:	88 23       	and	r24, r24
 7e8:	e1 f3       	breq	.-8      	; 0x7e2 <main+0x44>
		{
			if(toggle)
 7ea:	80 91 1f 01 	lds	r24, 0x011F
 7ee:	88 23       	and	r24, r24
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <main+0x58>
			{
				/* Enable TC clock */
				//tc0_enable();
				tc1_enable();
 7f2:	f8 dd       	rcall	.-1040   	; 0x3e4 <tc1_enable>
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <main+0x5c>
			}
			else
			{
				/* Disable TC0 clock */
				//tc0_disable();
				tc1_disable();
 7f6:	fc dd       	rcall	.-1032   	; 0x3f0 <tc1_disable>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 7f8:	2d 98       	cbi	0x05, 5	; 5
				//tc2_disable();
				ioport_set_pin_level(LED0_GPIO, 0);
			}
			
			run_once = 0;
 7fa:	10 92 1e 01 	sts	0x011E, r1
			toggle = !toggle;
 7fe:	80 91 1f 01 	lds	r24, 0x011F
 802:	8c 27       	eor	r24, r28
 804:	80 93 1f 01 	sts	0x011F, r24
 808:	ec cf       	rjmp	.-40     	; 0x7e2 <main+0x44>

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
