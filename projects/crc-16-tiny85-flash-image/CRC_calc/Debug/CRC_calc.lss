
CRC_calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .crc          00000002  00001ffe  00001ffe  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000007  00800060  00800060  0000017e  2**0
                  ALLOC
  4 .stab         000006cc  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000020  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000001cf  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000107  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000184  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000024  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000000ee  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000073  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000010  00000000  00000000  00000f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a7 36       	cpi	r26, 0x67	; 103
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
	uint16_t word = 0;
	uint16_t flash_index = 0;

int main(void)
{
	PORTB |= (1 << PB3) | (1 << PB4);				// set outputs high for LED off
  40:	88 b3       	in	r24, 0x18	; 24
  42:	88 61       	ori	r24, 0x18	; 24
  44:	88 bb       	out	0x18, r24	; 24
	DDRB |= (1 << PB3) | (1 << PB4);				// enable outputs
  46:	87 b3       	in	r24, 0x17	; 23
  48:	88 61       	ori	r24, 0x18	; 24
  4a:	87 bb       	out	0x17, r24	; 23
  4c:	80 91 64 00 	lds	r24, 0x0064
  50:	90 91 65 00 	lds	r25, 0x0065
  54:	e0 e0       	ldi	r30, 0x00	; 0
  56:	f0 e0       	ldi	r31, 0x00	; 0

	for (flash_index = 0; flash_index <= FLASHEND-2; flash_index++)
	{
		byte = pgm_read_byte(flash_index);
  58:	24 91       	lpm	r18, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
  5a:	82 27       	eor	r24, r18
  5c:	38 2f       	mov	r19, r24
  5e:	32 95       	swap	r19
  60:	38 27       	eor	r19, r24
  62:	03 2e       	mov	r0, r19
  64:	36 95       	lsr	r19
  66:	36 95       	lsr	r19
  68:	30 25       	eor	r19, r0
  6a:	03 2e       	mov	r0, r19
  6c:	36 95       	lsr	r19
  6e:	30 25       	eor	r19, r0
  70:	37 70       	andi	r19, 0x07	; 7
  72:	08 2e       	mov	r0, r24
  74:	89 2f       	mov	r24, r25
  76:	36 95       	lsr	r19
  78:	07 94       	ror	r0
  7a:	37 95       	ror	r19
  7c:	90 2d       	mov	r25, r0
  7e:	83 27       	eor	r24, r19
  80:	06 94       	lsr	r0
  82:	37 95       	ror	r19
  84:	90 25       	eor	r25, r0
  86:	83 27       	eor	r24, r19
  88:	31 96       	adiw	r30, 0x01	; 1
int main(void)
{
	PORTB |= (1 << PB3) | (1 << PB4);				// set outputs high for LED off
	DDRB |= (1 << PB3) | (1 << PB4);				// enable outputs

	for (flash_index = 0; flash_index <= FLASHEND-2; flash_index++)
  8a:	ee 3f       	cpi	r30, 0xFE	; 254
  8c:	3f e1       	ldi	r19, 0x1F	; 31
  8e:	f3 07       	cpc	r31, r19
  90:	19 f7       	brne	.-58     	; 0x58 <main+0x18>
  92:	20 93 66 00 	sts	0x0066, r18
  96:	90 93 65 00 	sts	0x0065, r25
  9a:	80 93 64 00 	sts	0x0064, r24
  9e:	f0 93 61 00 	sts	0x0061, r31
  a2:	e0 93 60 00 	sts	0x0060, r30
	{
		byte = pgm_read_byte(flash_index);
		crc = _crc16_update(crc, byte);
	}

	word = pgm_read_word(&(actual_crc));
  a6:	ee ef       	ldi	r30, 0xFE	; 254
  a8:	ff e1       	ldi	r31, 0x1F	; 31
  aa:	25 91       	lpm	r18, Z+
  ac:	34 91       	lpm	r19, Z
  ae:	30 93 63 00 	sts	0x0063, r19
  b2:	20 93 62 00 	sts	0x0062, r18

	if (crc == word)								// set breakpoint here to get actual CRC value
  b6:	28 17       	cp	r18, r24
  b8:	39 07       	cpc	r19, r25
  ba:	11 f0       	breq	.+4      	; 0xc0 <main+0x80>
	{
		PORTB &= ~(1 << PB4);						// turn on LED
	} 
	else
	{
		PORTB &= ~(1 << PB3);						// turn on LED
  bc:	c3 98       	cbi	0x18, 3	; 24
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x7e>

	word = pgm_read_word(&(actual_crc));

	if (crc == word)								// set breakpoint here to get actual CRC value
	{
		PORTB &= ~(1 << PB4);						// turn on LED
  c0:	c4 98       	cbi	0x18, 4	; 24
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x7e>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
