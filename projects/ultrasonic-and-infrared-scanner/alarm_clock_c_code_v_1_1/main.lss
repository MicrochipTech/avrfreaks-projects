
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c70  00000000  00000000  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00003c70  00003d24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080006c  0080006c  00003d3a  2**0
                  ALLOC
  3 .noinit       00000000  00800092  00800092  00003d3a  2**0
                  CONTENTS
  4 .eeprom       0000000a  00810000  00003c7c  00003d30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .stab         00003834  00000000  00000000  00003d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000017f8  00000000  00000000  00007570  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 08 	jmp	0x11b4
       4:	0c 94 83 10 	jmp	0x2106
       8:	0c 94 f5 08 	jmp	0x11ea
       c:	0c 94 f5 08 	jmp	0x11ea
      10:	0c 94 f5 08 	jmp	0x11ea
      14:	0c 94 6e 0f 	jmp	0x1edc
      18:	0c 94 f5 08 	jmp	0x11ea
      1c:	0c 94 f5 08 	jmp	0x11ea
      20:	0c 94 f5 08 	jmp	0x11ea
      24:	0c 94 f5 08 	jmp	0x11ea
      28:	0c 94 f5 08 	jmp	0x11ea
      2c:	0c 94 4b 0f 	jmp	0x1e96
      30:	0c 94 f5 08 	jmp	0x11ea
      34:	0c 94 73 10 	jmp	0x20e6
      38:	0c 94 f5 08 	jmp	0x11ea
      3c:	0c 94 f5 08 	jmp	0x11ea
      40:	0c 94 f5 08 	jmp	0x11ea
      44:	0c 94 f5 08 	jmp	0x11ea
      48:	0c 94 f5 08 	jmp	0x11ea
      4c:	0c 94 f5 08 	jmp	0x11ea
      50:	0c 94 f5 08 	jmp	0x11ea

00000054 <__ctors_end>:
	...
      60:	00 00       	nop
      62:	5f 00       	.word	0x005f	; ????
      64:	00 00       	nop
      66:	00 00       	nop
      68:	00 00       	nop
      6a:	07 00       	.word	0x0007	; ????
      6c:	00 00       	nop
      6e:	07 00       	.word	0x0007	; ????
      70:	00 00       	nop
      72:	14 00       	.word	0x0014	; ????
      74:	7f 00       	.word	0x007f	; ????
      76:	14 00       	.word	0x0014	; ????
      78:	7f 00       	.word	0x007f	; ????
      7a:	14 00       	.word	0x0014	; ????
      7c:	24 00       	.word	0x0024	; ????
      7e:	2a 00       	.word	0x002a	; ????
      80:	7f 00       	.word	0x007f	; ????
      82:	2a 00       	.word	0x002a	; ????
      84:	12 00       	.word	0x0012	; ????
      86:	23 00       	.word	0x0023	; ????
      88:	13 00       	.word	0x0013	; ????
      8a:	08 00       	.word	0x0008	; ????
      8c:	64 00       	.word	0x0064	; ????
      8e:	62 00       	.word	0x0062	; ????
      90:	36 00       	.word	0x0036	; ????
      92:	49 00       	.word	0x0049	; ????
      94:	55 00       	.word	0x0055	; ????
      96:	22 00       	.word	0x0022	; ????
      98:	50 00       	.word	0x0050	; ????
      9a:	00 00       	nop
      9c:	05 00       	.word	0x0005	; ????
      9e:	03 00       	.word	0x0003	; ????
      a0:	00 00       	nop
      a2:	00 00       	nop
      a4:	00 00       	nop
      a6:	1c 00       	.word	0x001c	; ????
      a8:	22 00       	.word	0x0022	; ????
      aa:	41 00       	.word	0x0041	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	41 00       	.word	0x0041	; ????
      b2:	22 00       	.word	0x0022	; ????
      b4:	1c 00       	.word	0x001c	; ????
      b6:	00 00       	nop
      b8:	08 00       	.word	0x0008	; ????
      ba:	2a 00       	.word	0x002a	; ????
      bc:	1c 00       	.word	0x001c	; ????
      be:	2a 00       	.word	0x002a	; ????
      c0:	08 00       	.word	0x0008	; ????
      c2:	08 00       	.word	0x0008	; ????
      c4:	08 00       	.word	0x0008	; ????
      c6:	3e 00       	.word	0x003e	; ????
      c8:	08 00       	.word	0x0008	; ????
      ca:	08 00       	.word	0x0008	; ????
      cc:	00 00       	nop
      ce:	50 00       	.word	0x0050	; ????
      d0:	30 00       	.word	0x0030	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	08 00       	.word	0x0008	; ????
      d8:	08 00       	.word	0x0008	; ????
      da:	08 00       	.word	0x0008	; ????
      dc:	08 00       	.word	0x0008	; ????
      de:	08 00       	.word	0x0008	; ????
      e0:	00 00       	nop
      e2:	60 00       	.word	0x0060	; ????
      e4:	60 00       	.word	0x0060	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	20 00       	.word	0x0020	; ????
      ec:	10 00       	.word	0x0010	; ????
      ee:	08 00       	.word	0x0008	; ????
      f0:	04 00       	.word	0x0004	; ????
      f2:	02 00       	.word	0x0002	; ????
      f4:	3e 00       	.word	0x003e	; ????
      f6:	51 00       	.word	0x0051	; ????
      f8:	49 00       	.word	0x0049	; ????
      fa:	45 00       	.word	0x0045	; ????
      fc:	3e 00       	.word	0x003e	; ????
      fe:	00 00       	nop
     100:	42 00       	.word	0x0042	; ????
     102:	7f 00       	.word	0x007f	; ????
     104:	40 00       	.word	0x0040	; ????
     106:	00 00       	nop
     108:	42 00       	.word	0x0042	; ????
     10a:	61 00       	.word	0x0061	; ????
     10c:	51 00       	.word	0x0051	; ????
     10e:	49 00       	.word	0x0049	; ????
     110:	46 00       	.word	0x0046	; ????
     112:	21 00       	.word	0x0021	; ????
     114:	41 00       	.word	0x0041	; ????
     116:	45 00       	.word	0x0045	; ????
     118:	4b 00       	.word	0x004b	; ????
     11a:	31 00       	.word	0x0031	; ????
     11c:	18 00       	.word	0x0018	; ????
     11e:	14 00       	.word	0x0014	; ????
     120:	12 00       	.word	0x0012	; ????
     122:	7f 00       	.word	0x007f	; ????
     124:	10 00       	.word	0x0010	; ????
     126:	27 00       	.word	0x0027	; ????
     128:	45 00       	.word	0x0045	; ????
     12a:	45 00       	.word	0x0045	; ????
     12c:	45 00       	.word	0x0045	; ????
     12e:	39 00       	.word	0x0039	; ????
     130:	3c 00       	.word	0x003c	; ????
     132:	4a 00       	.word	0x004a	; ????
     134:	49 00       	.word	0x0049	; ????
     136:	49 00       	.word	0x0049	; ????
     138:	30 00       	.word	0x0030	; ????
     13a:	01 00       	.word	0x0001	; ????
     13c:	71 00       	.word	0x0071	; ????
     13e:	09 00       	.word	0x0009	; ????
     140:	05 00       	.word	0x0005	; ????
     142:	03 00       	.word	0x0003	; ????
     144:	36 00       	.word	0x0036	; ????
     146:	49 00       	.word	0x0049	; ????
     148:	49 00       	.word	0x0049	; ????
     14a:	49 00       	.word	0x0049	; ????
     14c:	36 00       	.word	0x0036	; ????
     14e:	06 00       	.word	0x0006	; ????
     150:	49 00       	.word	0x0049	; ????
     152:	49 00       	.word	0x0049	; ????
     154:	29 00       	.word	0x0029	; ????
     156:	1e 00       	.word	0x001e	; ????
     158:	00 00       	nop
     15a:	36 00       	.word	0x0036	; ????
     15c:	36 00       	.word	0x0036	; ????
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	00 00       	nop
     164:	56 00       	.word	0x0056	; ????
     166:	36 00       	.word	0x0036	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	08 00       	.word	0x0008	; ????
     170:	14 00       	.word	0x0014	; ????
     172:	22 00       	.word	0x0022	; ????
     174:	41 00       	.word	0x0041	; ????
     176:	14 00       	.word	0x0014	; ????
     178:	14 00       	.word	0x0014	; ????
     17a:	14 00       	.word	0x0014	; ????
     17c:	14 00       	.word	0x0014	; ????
     17e:	14 00       	.word	0x0014	; ????
     180:	41 00       	.word	0x0041	; ????
     182:	22 00       	.word	0x0022	; ????
     184:	14 00       	.word	0x0014	; ????
     186:	08 00       	.word	0x0008	; ????
     188:	00 00       	nop
     18a:	02 00       	.word	0x0002	; ????
     18c:	01 00       	.word	0x0001	; ????
     18e:	51 00       	.word	0x0051	; ????
     190:	09 00       	.word	0x0009	; ????
     192:	06 00       	.word	0x0006	; ????
     194:	32 00       	.word	0x0032	; ????
     196:	49 00       	.word	0x0049	; ????
     198:	79 00       	.word	0x0079	; ????
     19a:	41 00       	.word	0x0041	; ????
     19c:	3e 00       	.word	0x003e	; ????
     19e:	7e 00       	.word	0x007e	; ????
     1a0:	11 00       	.word	0x0011	; ????
     1a2:	11 00       	.word	0x0011	; ????
     1a4:	11 00       	.word	0x0011	; ????
     1a6:	7e 00       	.word	0x007e	; ????
     1a8:	7f 00       	.word	0x007f	; ????
     1aa:	49 00       	.word	0x0049	; ????
     1ac:	49 00       	.word	0x0049	; ????
     1ae:	49 00       	.word	0x0049	; ????
     1b0:	36 00       	.word	0x0036	; ????
     1b2:	3e 00       	.word	0x003e	; ????
     1b4:	41 00       	.word	0x0041	; ????
     1b6:	41 00       	.word	0x0041	; ????
     1b8:	41 00       	.word	0x0041	; ????
     1ba:	22 00       	.word	0x0022	; ????
     1bc:	7f 00       	.word	0x007f	; ????
     1be:	41 00       	.word	0x0041	; ????
     1c0:	41 00       	.word	0x0041	; ????
     1c2:	22 00       	.word	0x0022	; ????
     1c4:	1c 00       	.word	0x001c	; ????
     1c6:	7f 00       	.word	0x007f	; ????
     1c8:	49 00       	.word	0x0049	; ????
     1ca:	49 00       	.word	0x0049	; ????
     1cc:	49 00       	.word	0x0049	; ????
     1ce:	41 00       	.word	0x0041	; ????
     1d0:	7f 00       	.word	0x007f	; ????
     1d2:	09 00       	.word	0x0009	; ????
     1d4:	09 00       	.word	0x0009	; ????
     1d6:	01 00       	.word	0x0001	; ????
     1d8:	01 00       	.word	0x0001	; ????
     1da:	3e 00       	.word	0x003e	; ????
     1dc:	41 00       	.word	0x0041	; ????
     1de:	41 00       	.word	0x0041	; ????
     1e0:	51 00       	.word	0x0051	; ????
     1e2:	32 00       	.word	0x0032	; ????
     1e4:	7f 00       	.word	0x007f	; ????
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	08 00       	.word	0x0008	; ????
     1ea:	08 00       	.word	0x0008	; ????
     1ec:	7f 00       	.word	0x007f	; ????
     1ee:	00 00       	nop
     1f0:	41 00       	.word	0x0041	; ????
     1f2:	7f 00       	.word	0x007f	; ????
     1f4:	41 00       	.word	0x0041	; ????
     1f6:	00 00       	nop
     1f8:	20 00       	.word	0x0020	; ????
     1fa:	40 00       	.word	0x0040	; ????
     1fc:	41 00       	.word	0x0041	; ????
     1fe:	3f 00       	.word	0x003f	; ????
     200:	01 00       	.word	0x0001	; ????
     202:	7f 00       	.word	0x007f	; ????
     204:	08 00       	.word	0x0008	; ????
     206:	14 00       	.word	0x0014	; ????
     208:	22 00       	.word	0x0022	; ????
     20a:	41 00       	.word	0x0041	; ????
     20c:	7f 00       	.word	0x007f	; ????
     20e:	40 00       	.word	0x0040	; ????
     210:	40 00       	.word	0x0040	; ????
     212:	40 00       	.word	0x0040	; ????
     214:	40 00       	.word	0x0040	; ????
     216:	7f 00       	.word	0x007f	; ????
     218:	02 00       	.word	0x0002	; ????
     21a:	04 00       	.word	0x0004	; ????
     21c:	02 00       	.word	0x0002	; ????
     21e:	7f 00       	.word	0x007f	; ????
     220:	7f 00       	.word	0x007f	; ????
     222:	04 00       	.word	0x0004	; ????
     224:	08 00       	.word	0x0008	; ????
     226:	10 00       	.word	0x0010	; ????
     228:	7f 00       	.word	0x007f	; ????
     22a:	3e 00       	.word	0x003e	; ????
     22c:	41 00       	.word	0x0041	; ????
     22e:	41 00       	.word	0x0041	; ????
     230:	41 00       	.word	0x0041	; ????
     232:	3e 00       	.word	0x003e	; ????
     234:	7f 00       	.word	0x007f	; ????
     236:	09 00       	.word	0x0009	; ????
     238:	09 00       	.word	0x0009	; ????
     23a:	09 00       	.word	0x0009	; ????
     23c:	06 00       	.word	0x0006	; ????
     23e:	3e 00       	.word	0x003e	; ????
     240:	41 00       	.word	0x0041	; ????
     242:	51 00       	.word	0x0051	; ????
     244:	21 00       	.word	0x0021	; ????
     246:	5e 00       	.word	0x005e	; ????
     248:	7f 00       	.word	0x007f	; ????
     24a:	09 00       	.word	0x0009	; ????
     24c:	19 00       	.word	0x0019	; ????
     24e:	29 00       	.word	0x0029	; ????
     250:	46 00       	.word	0x0046	; ????
     252:	46 00       	.word	0x0046	; ????
     254:	49 00       	.word	0x0049	; ????
     256:	49 00       	.word	0x0049	; ????
     258:	49 00       	.word	0x0049	; ????
     25a:	31 00       	.word	0x0031	; ????
     25c:	01 00       	.word	0x0001	; ????
     25e:	01 00       	.word	0x0001	; ????
     260:	7f 00       	.word	0x007f	; ????
     262:	01 00       	.word	0x0001	; ????
     264:	01 00       	.word	0x0001	; ????
     266:	3f 00       	.word	0x003f	; ????
     268:	40 00       	.word	0x0040	; ????
     26a:	40 00       	.word	0x0040	; ????
     26c:	40 00       	.word	0x0040	; ????
     26e:	3f 00       	.word	0x003f	; ????
     270:	1f 00       	.word	0x001f	; ????
     272:	20 00       	.word	0x0020	; ????
     274:	40 00       	.word	0x0040	; ????
     276:	20 00       	.word	0x0020	; ????
     278:	1f 00       	.word	0x001f	; ????
     27a:	7f 00       	.word	0x007f	; ????
     27c:	20 00       	.word	0x0020	; ????
     27e:	18 00       	.word	0x0018	; ????
     280:	20 00       	.word	0x0020	; ????
     282:	7f 00       	.word	0x007f	; ????
     284:	63 00       	.word	0x0063	; ????
     286:	14 00       	.word	0x0014	; ????
     288:	08 00       	.word	0x0008	; ????
     28a:	14 00       	.word	0x0014	; ????
     28c:	63 00       	.word	0x0063	; ????
     28e:	03 00       	.word	0x0003	; ????
     290:	04 00       	.word	0x0004	; ????
     292:	78 00       	.word	0x0078	; ????
     294:	04 00       	.word	0x0004	; ????
     296:	03 00       	.word	0x0003	; ????
     298:	61 00       	.word	0x0061	; ????
     29a:	51 00       	.word	0x0051	; ????
     29c:	49 00       	.word	0x0049	; ????
     29e:	45 00       	.word	0x0045	; ????
     2a0:	43 00       	.word	0x0043	; ????
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	7f 00       	.word	0x007f	; ????
     2a8:	41 00       	.word	0x0041	; ????
     2aa:	41 00       	.word	0x0041	; ????
     2ac:	02 00       	.word	0x0002	; ????
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	08 00       	.word	0x0008	; ????
     2b2:	10 00       	.word	0x0010	; ????
     2b4:	20 00       	.word	0x0020	; ????
     2b6:	41 00       	.word	0x0041	; ????
     2b8:	41 00       	.word	0x0041	; ????
     2ba:	7f 00       	.word	0x007f	; ????
     2bc:	00 00       	nop
     2be:	00 00       	nop
     2c0:	04 00       	.word	0x0004	; ????
     2c2:	02 00       	.word	0x0002	; ????
     2c4:	01 00       	.word	0x0001	; ????
     2c6:	02 00       	.word	0x0002	; ????
     2c8:	04 00       	.word	0x0004	; ????
     2ca:	40 00       	.word	0x0040	; ????
     2cc:	40 00       	.word	0x0040	; ????
     2ce:	40 00       	.word	0x0040	; ????
     2d0:	40 00       	.word	0x0040	; ????
     2d2:	40 00       	.word	0x0040	; ????
     2d4:	00 00       	nop
     2d6:	01 00       	.word	0x0001	; ????
     2d8:	02 00       	.word	0x0002	; ????
     2da:	04 00       	.word	0x0004	; ????
     2dc:	00 00       	nop
     2de:	20 00       	.word	0x0020	; ????
     2e0:	54 00       	.word	0x0054	; ????
     2e2:	54 00       	.word	0x0054	; ????
     2e4:	54 00       	.word	0x0054	; ????
     2e6:	78 00       	.word	0x0078	; ????
     2e8:	7f 00       	.word	0x007f	; ????
     2ea:	48 00       	.word	0x0048	; ????
     2ec:	44 00       	.word	0x0044	; ????
     2ee:	44 00       	.word	0x0044	; ????
     2f0:	38 00       	.word	0x0038	; ????
     2f2:	38 00       	.word	0x0038	; ????
     2f4:	44 00       	.word	0x0044	; ????
     2f6:	44 00       	.word	0x0044	; ????
     2f8:	44 00       	.word	0x0044	; ????
     2fa:	20 00       	.word	0x0020	; ????
     2fc:	38 00       	.word	0x0038	; ????
     2fe:	44 00       	.word	0x0044	; ????
     300:	44 00       	.word	0x0044	; ????
     302:	48 00       	.word	0x0048	; ????
     304:	7f 00       	.word	0x007f	; ????
     306:	38 00       	.word	0x0038	; ????
     308:	54 00       	.word	0x0054	; ????
     30a:	54 00       	.word	0x0054	; ????
     30c:	54 00       	.word	0x0054	; ????
     30e:	18 00       	.word	0x0018	; ????
     310:	08 00       	.word	0x0008	; ????
     312:	7e 00       	.word	0x007e	; ????
     314:	09 00       	.word	0x0009	; ????
     316:	01 00       	.word	0x0001	; ????
     318:	02 00       	.word	0x0002	; ????
     31a:	08 00       	.word	0x0008	; ????
     31c:	54 00       	.word	0x0054	; ????
     31e:	54 00       	.word	0x0054	; ????
     320:	54 00       	.word	0x0054	; ????
     322:	3c 00       	.word	0x003c	; ????
     324:	7f 00       	.word	0x007f	; ????
     326:	08 00       	.word	0x0008	; ????
     328:	04 00       	.word	0x0004	; ????
     32a:	04 00       	.word	0x0004	; ????
     32c:	78 00       	.word	0x0078	; ????
     32e:	00 00       	nop
     330:	44 00       	.word	0x0044	; ????
     332:	7d 00       	.word	0x007d	; ????
     334:	40 00       	.word	0x0040	; ????
     336:	00 00       	nop
     338:	20 00       	.word	0x0020	; ????
     33a:	40 00       	.word	0x0040	; ????
     33c:	44 00       	.word	0x0044	; ????
     33e:	3d 00       	.word	0x003d	; ????
     340:	00 00       	nop
     342:	00 00       	nop
     344:	7f 00       	.word	0x007f	; ????
     346:	10 00       	.word	0x0010	; ????
     348:	28 00       	.word	0x0028	; ????
     34a:	44 00       	.word	0x0044	; ????
     34c:	00 00       	nop
     34e:	41 00       	.word	0x0041	; ????
     350:	7f 00       	.word	0x007f	; ????
     352:	40 00       	.word	0x0040	; ????
     354:	00 00       	nop
     356:	7c 00       	.word	0x007c	; ????
     358:	04 00       	.word	0x0004	; ????
     35a:	18 00       	.word	0x0018	; ????
     35c:	04 00       	.word	0x0004	; ????
     35e:	78 00       	.word	0x0078	; ????
     360:	7c 00       	.word	0x007c	; ????
     362:	08 00       	.word	0x0008	; ????
     364:	04 00       	.word	0x0004	; ????
     366:	04 00       	.word	0x0004	; ????
     368:	78 00       	.word	0x0078	; ????
     36a:	38 00       	.word	0x0038	; ????
     36c:	44 00       	.word	0x0044	; ????
     36e:	44 00       	.word	0x0044	; ????
     370:	44 00       	.word	0x0044	; ????
     372:	38 00       	.word	0x0038	; ????
     374:	7c 00       	.word	0x007c	; ????
     376:	14 00       	.word	0x0014	; ????
     378:	14 00       	.word	0x0014	; ????
     37a:	14 00       	.word	0x0014	; ????
     37c:	08 00       	.word	0x0008	; ????
     37e:	08 00       	.word	0x0008	; ????
     380:	14 00       	.word	0x0014	; ????
     382:	14 00       	.word	0x0014	; ????
     384:	18 00       	.word	0x0018	; ????
     386:	7c 00       	.word	0x007c	; ????
     388:	7c 00       	.word	0x007c	; ????
     38a:	08 00       	.word	0x0008	; ????
     38c:	04 00       	.word	0x0004	; ????
     38e:	04 00       	.word	0x0004	; ????
     390:	08 00       	.word	0x0008	; ????
     392:	48 00       	.word	0x0048	; ????
     394:	54 00       	.word	0x0054	; ????
     396:	54 00       	.word	0x0054	; ????
     398:	54 00       	.word	0x0054	; ????
     39a:	20 00       	.word	0x0020	; ????
     39c:	04 00       	.word	0x0004	; ????
     39e:	3f 00       	.word	0x003f	; ????
     3a0:	44 00       	.word	0x0044	; ????
     3a2:	40 00       	.word	0x0040	; ????
     3a4:	20 00       	.word	0x0020	; ????
     3a6:	3c 00       	.word	0x003c	; ????
     3a8:	40 00       	.word	0x0040	; ????
     3aa:	40 00       	.word	0x0040	; ????
     3ac:	20 00       	.word	0x0020	; ????
     3ae:	7c 00       	.word	0x007c	; ????
     3b0:	1c 00       	.word	0x001c	; ????
     3b2:	20 00       	.word	0x0020	; ????
     3b4:	40 00       	.word	0x0040	; ????
     3b6:	20 00       	.word	0x0020	; ????
     3b8:	1c 00       	.word	0x001c	; ????
     3ba:	3c 00       	.word	0x003c	; ????
     3bc:	40 00       	.word	0x0040	; ????
     3be:	30 00       	.word	0x0030	; ????
     3c0:	40 00       	.word	0x0040	; ????
     3c2:	3c 00       	.word	0x003c	; ????
     3c4:	44 00       	.word	0x0044	; ????
     3c6:	28 00       	.word	0x0028	; ????
     3c8:	10 00       	.word	0x0010	; ????
     3ca:	28 00       	.word	0x0028	; ????
     3cc:	44 00       	.word	0x0044	; ????
     3ce:	0c 00       	.word	0x000c	; ????
     3d0:	50 00       	.word	0x0050	; ????
     3d2:	50 00       	.word	0x0050	; ????
     3d4:	50 00       	.word	0x0050	; ????
     3d6:	3c 00       	.word	0x003c	; ????
     3d8:	44 00       	.word	0x0044	; ????
     3da:	64 00       	.word	0x0064	; ????
     3dc:	54 00       	.word	0x0054	; ????
     3de:	4c 00       	.word	0x004c	; ????
     3e0:	44 00       	.word	0x0044	; ????
     3e2:	00 00       	nop
     3e4:	08 00       	.word	0x0008	; ????
     3e6:	36 00       	.word	0x0036	; ????
     3e8:	41 00       	.word	0x0041	; ????
     3ea:	00 00       	nop
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	7f 00       	.word	0x007f	; ????
     3f2:	00 00       	nop
     3f4:	00 00       	nop
     3f6:	00 00       	nop
     3f8:	41 00       	.word	0x0041	; ????
     3fa:	36 00       	.word	0x0036	; ????
     3fc:	08 00       	.word	0x0008	; ????
     3fe:	00 00       	nop
     400:	08 00       	.word	0x0008	; ????
     402:	08 00       	.word	0x0008	; ????
     404:	2a 00       	.word	0x002a	; ????
     406:	1c 00       	.word	0x001c	; ????
     408:	08 00       	.word	0x0008	; ????
     40a:	08 00       	.word	0x0008	; ????
     40c:	1c 00       	.word	0x001c	; ????
     40e:	2a 00       	.word	0x002a	; ????
     410:	08 00       	.word	0x0008	; ????
     412:	08 00       	.word	0x0008	; ????

00000414 <strSetTheTime>:
     414:	53 65 74 20 74 68 65 20 54 69 6d 65 ff              Set the Time.

00000421 <strSetTheAlarm>:
     421:	53 65 74 20 74 68 65 20 41 6c 61 72 6d ff           Set the Alarm.

0000042f <strTarget>:
     42f:	54 61 72 62 75 74 ff                                Tarbut.

00000436 <strLock>:
     436:	4c 6f 63 6b ff                                      Lock.

0000043b <strPatrol>:
     43b:	50 61 74 72 6f 6c ff                                Patrol.

00000442 <strHow>:
     442:	54 68 69 73 20 69 73 20 6d 61 74 74 ff              This is matt.

0000044f <strAudio>:
     44f:	41 55 44 49 4f 20 3d 20 ff                          AUDIO = .

00000458 <strRange>:
     458:	52 41 4e 47 45 20 3d 20 ff                          RANGE = .

00000461 <strRequals>:
     461:	52 3d 20 ff                                         R= .

00000465 <strAlarmOff>:
     465:	41 6c 61 72 6d 20 4f 66 66 ff                       Alarm Off.

0000046f <strAlarmOn>:
     46f:	41 6c 61 72 6d 20 4f 6e ff                          Alarm On.

00000478 <strJan>:
     478:	4a 61 6e 2e ff                                      Jan..

0000047d <strFeb>:
     47d:	46 65 62 2e ff                                      Feb..

00000482 <strMarch>:
     482:	4d 61 72 2e ff                                      Mar..

00000487 <strApril>:
     487:	41 70 72 2e ff                                      Apr..

0000048c <strMay>:
     48c:	4d 61 79 20 ff                                      May .

00000491 <strJune>:
     491:	4a 75 6e 65 ff                                      June.

00000496 <strJuly>:
     496:	4a 75 6c 79 ff                                      July.

0000049b <strAug>:
     49b:	41 75 67 2e ff                                      Aug..

000004a0 <strSept>:
     4a0:	53 65 70 2e ff                                      Sep..

000004a5 <strOct>:
     4a5:	4f 63 74 2e ff                                      Oct..

000004aa <strNov>:
     4aa:	4e 6f 76 2e ff                                      Nov..

000004af <strDec>:
     4af:	44 65 63 2e ff                                      Dec..

000004b4 <strAM>:
     4b4:	41 4d ff                                            AM.

000004b7 <strPM>:
     4b7:	50 4d ff                                            PM.

000004ba <strPhotoTriggerValue>:
     4ba:	50 68 6f 74 6f 20 54 72 69 67 67 65 72 20 56 61     Photo Trigger Va
     4ca:	6c 75 65 ff                                         lue.

000004ce <strDarkRoom>:
     4ce:	44 61 72 6b 20 52 6f 6f 6d 3d 39 30 30 ff           Dark Room=900.

000004dc <strBrightRoom>:
     4dc:	42 72 69 67 68 74 20 52 6f 6f 6d 3d 31 33 35 ff     Bright Room=135.

000004ec <strPhotocellReading>:
     4ec:	50 68 6f 74 6f 20 52 65 61 64 69 6e 67 3d ff        Photo Reading=.

000004fb <strSetTriggerValue>:
     4fb:	53 65 74 20 54 72 69 67 67 65 72 20 56 61 6c 75     Set Trigger Valu
     50b:	65 3a ff                                            e:.

0000050e <strBacklightOffTime>:
     50e:	42 61 63 6b 6c 69 67 68 74 20 4f 66 66 20 54 69     Backlight Off Ti
     51e:	6d 65 ff                                            me.

00000521 <strBacklightOnTime>:
     521:	42 61 63 6b 6c 69 67 68 74 20 4f 6e 20 54 69 6d     Backlight On Tim
     531:	65 ff                                               e.

00000533 <strUsuallyTen>:
     533:	28 55 73 75 61 6c 6c 79 20 31 30 3a 30 30 70 6d     (Usually 10:00pm
     543:	29 ff                                               ).

00000545 <strUsuallySix>:
     545:	28 55 73 75 61 6c 6c 79 20 36 3a 30 30 61 6d 29     (Usually 6:00am)
     555:	ff                                                  .

00000556 <strColonZero>:
     556:	3a 30 30 ff                                         :00.

0000055a <strBigFont0>:
     55a:	00 80 f0 f8 fc 7e 1e 1e 1e 7e fc f8 f0 80 00 00     .....~...~......
     56a:	00 ff ff ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
     57a:	00 03 1f 3f 7f fc f0 f0 f0 fc 7f 3f 1f 03 00 00     ...?.......?....
     58a:	00 c0 e0 e0 f0 78 fc fe fe fe 00 00 00 00 00 00     .....x..........
     59a:	00 03 01 01 00 00 ff ff ff ff 00 00 00 00 00 00     ................
     5aa:	00 f0 f0 f0 f0 f0 ff ff ff ff f0 f0 f0 f0 00 00     ................
     5ba:	00 e0 f8 fc fc 3e 1e 1e 1e 3e fc fc f8 e0 00 00     .....>...>......
     5ca:	00 00 00 00 00 80 c0 e0 f0 fc 7f 3f 1f 03 00 00     ...........?....
     5da:	00 c0 f8 fc ff ff ff f3 f1 f0 f0 f0 f0 f0 00 00     ................
     5ea:	00 c0 f0 fc fc 3e 1e 1e 1e 3e fc fc f8 e0 00 00     .....>...>......
     5fa:	00 00 00 00 00 00 3c 3c 3c 7e ff ff e7 c1 00 00     ......<<<~......
     60a:	00 06 1e 7e 7e f8 f0 f0 f0 f8 7f 7f 3f 0f 00 00     ...~~.......?...
     61a:	00 fe fe fe fe 00 00 00 fe fe fe fe 00 00 00 00     ................
     62a:	00 ff ff ff ff f8 f8 f8 ff ff ff ff f8 f8 00 00     ................
	...
     642:	ff ff ff ff 00 00 00 00 00 fe fe fe fe 1e 1e 1e     ................
     652:	1e 1e 1e 1e 1e 00 00 00 00 1f 3f 3f 1f 0f 0f 0f     ..........??....
     662:	0f 1f fe fe fc f0 00 00 00 06 1e 7e 7e f8 f0 f0     ...........~~...
     672:	f0 f8 7f 3f 1f 07 00 00 00 80 e0 f8 fc 7c 1e 1e     ...?.........|..
     682:	1e 3e 7e 7c 78 60 00 00 00 ff ff ff ff 3c 1e 1e     .>~|x`.......<..
     692:	1e 3e fc fc f8 e0 00 00 00 03 1f 3f 7f f8 f0 f0     .>.........?....
     6a2:	f0 f8 7f 7f 3f 0f 00 00 00 1e 1e 1e 1e 1e 1e 1e     ....?...........
     6b2:	de fe fe fe 3e 1e 00 00 00 00 00 00 80 f0 fc ff     ....>...........
     6c2:	7f 0f 03 00 00 00 00 00 00 00 00 f8 ff ff ff 07     ................
	...
     6da:	00 f0 f8 fc fc 3e 1e 1e 1e 3e fc fc f8 f0 00 00     .....>...>......
     6ea:	00 81 e7 f7 ff 7e 3c 3c 3c 7e ff ff e7 81 00 00     .....~<<<~......
     6fa:	00 0f 3f 7f 7f f8 f0 f0 f0 f8 7f 7f 3f 0f 00 00     ..?.........?...
     70a:	00 e0 f8 fc fc 3e 1e 1e 1e 3e fc f8 f0 80 00 00     .....>...>......
     71a:	00 0f 3f 7f 7f f8 f0 f0 f0 78 ff ff ff ff 00 00     ..?......x......
     72a:	00 0c 3c 7c fc f8 f0 f0 f0 7c 7f 3f 0f 03 00 00     ..<|.....|.?....

0000073a <strBigFontPeriod>:
	...
     75e:	00 f8 f8 f8 f8 f8 00 00 00 00 00 00                 ............

0000076a <strBigFontColon>:
     76a:	00 00 00 00 00 00 e0 e0 e0 e0 00 00 00 00 00 00     ................
     77a:	00 00 00 00 00 00 81 81 81 81 00 00 00 00 00 00     ................
     78a:	00 00 00 00 00 00 07 07 07 07 00 00 00 00 00 00     ................

0000079a <strSegTbl>:
     79a:	7e 30 6d 79 33 5b 5f 70 7f 7b                       ~0my3[_p.{

000007a4 <str50>:
     7a4:	43 6c 6f 63 6b 20 53 65 74 75 70 ff 00 00 00 00     Clock Setup.....
     7b4:	00 00 00 00 00 00 53 65 74 20 41 6c 61 72 6d 20     ......Set Alarm 
     7c4:	4f 4e 2f 4f 46 46 ff 00 00 00 00 00 53 65 74 20     ON/OFF......Set 
     7d4:	43 6c 6f 63 6b ff 00 00 00 00 00 00 00 00 00 00     Clock...........
     7e4:	00 00 53 65 74 20 41 6c 61 72 6d ff 00 00 00 00     ..Set Alarm.....
	...
     7fc:	53 65 74 20 42 61 63 6b 6c 69 67 68 74 20 54 69     Set Backlight Ti
     80c:	6d 65 ff 00 00 00 50 68 6f 74 6f 20 54 72 69 67     me....Photo Trig
     81c:	67 65 72 20 56 61 6c 75 65 ff 00 00 41 62 6f 75     ger Value...Abou
     82c:	74 20 54 68 69 73 20 43 6c 6f 63 6b ff 00 00 00     t This Clock....
     83c:	00 00 45 58 49 54 ff 00 00 00 00 00 00 00 00 00     ..EXIT..........
	...

00000854 <str51>:
     854:	4f 44 45 20 54 4f 20 53 50 4f 54 ff 00 00 00 00     ODE TO SPOT.....
     864:	00 00 00 00 00 00 46 65 6c 69 73 20 43 61 74 74     ......Felis Catt
     874:	75 73 ff 00 00 00 00 00 00 00 00 00 69 73 20 79     us..........is y
     884:	6f 75 72 20 74 61 78 6f 6e 6f 6d 69 63 ff 00 00     our taxonomic...
     894:	00 00 6e 6f 6d 65 6e 63 6c 61 74 75 72 65 ff 00     ..nomenclature..
	...
     8ac:	61 6e 20 65 6e 64 6f 74 68 65 72 6d 69 63 ff 00     an endothermic..
     8bc:	00 00 00 00 00 00 71 75 61 64 72 75 70 65 64 2c     ......quadruped,
     8cc:	ff 00 00 00 00 00 00 00 00 00 00 00 63 61 72 6e     ............carn
     8dc:	69 76 6f 72 6f 75 73 ff 00 00 00 00 00 00 00 00     ivorous.........
     8ec:	00 00 62 79 20 6e 61 74 75 72 65 3f ff 00 00 00     ..by nature?....
	...

00000904 <str64>:
     904:	44 65 73 69 67 6e 65 72 3a ff 00 00 00 00 00 00     Designer:.......
     914:	00 00 00 00 00 00 4d 61 74 74 20 4d 65 65 72 69     ......Matt Meeri
     924:	61 6e ff 00 00 00 00 00 00 00 00 00 43 68 61 6e     an..........Chan
     934:	75 74 65 2c 20 4b 61 6e 73 61 73 ff 00 00 00 00     ute, Kansas.....
     944:	00 00 41 75 67 2e 20 32 30 30 35 20 56 31 2e 31     ..Aug. 2005 V1.1
     954:	ff 00 00 00 00 00 00 00 75 43 6f 6e 74 72 6f 6c     ........uControl
     964:	3a 20 41 54 4d 45 47 41 33 32 ff 00 00 00 43 6c     : ATMEGA32....Cl
     974:	6f 63 6b 3d 34 4d 48 7a ff 00 00 00 00 00 00 00     ock=4MHz........
     984:	00 00 00 00 52 65 62 65 63 63 61 20 69 73 20 61     ....Rebecca is a
     994:	20 62 61 62 65 21 ff 00 00 00 28 61 6e 79 20 6b      babe!....(any k
     9a4:	65 79 20 65 78 69 74 73 29 ff 00 00 00 00 00 00     ey exits).......

000009b4 <strKustom>:
	...
     9d4:	c0 f0 f0 f8 f8 78 3c 3c 1c 1c 1c 1c 1c 1c 18 38     .....x<<.......8
     9e4:	38 78 78 70 70 f0 e0 e0 e0 c0 c0 80 80 80 00 00     8xxpp...........
     9f4:	80 80 80 c0 c0 e0 e0 e0 f0 70 70 78 78 38 38 38     .........ppxx888
     a04:	1c 1c 1c 1c 1c 1c 3c 3c 78 78 f8 f0 e0 c0 80 00     ......<<xx......
	...
     a50:	00 00 fc ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
	...
     a68:	00 80 c1 e1 e1 f3 f3 ff 7f 7f 3f 3f 7f 7f ff fb     ..........??....
     a78:	f3 e1 e1 c1 80 00 00 00 00 00 00 00 00 00 00 00     ................
     a88:	00 00 00 00 00 00 01 ff ff ff ff fe 00 00 00 00     ................
	...
     ac8:	80 80 80 c0 c0 c0 c0 e0 e0 e0 f0 f3 ff ff ff fe     ................
     ad8:	f8 f8 78 78 78 38 38 3c bc 9c fc fc fc fc fc 7e     ..xxx88<.......~
     ae8:	3f 1f 1f 1f 1f 1f 1c 1c 1e 1e 1e 1e 1e 1e 1e 1c     ?...............
     af8:	1f 1f 1f 1f 3f 3f 7e fe fc fc fc fc fc bc 3c 38     ....??~.......<8
     b08:	38 78 78 78 f8 f8 fc ff ff 7f e7 f1 e0 e0 e0 c0     8xxx............
     b18:	c0 c0 80 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
     b3c:	00 00 80 e0 e0 f0 fc fe 3e 3e 1f 0f 0f 07 07 03     ........>>......
     b4c:	01 01 01 01 00 00 00 00 00 01 0f 3f 3f ff ff fe     ...........??...
     b5c:	f8 f8 fc ff 7f 3f 0f 0f 03 01 00 c0 f0 fc fe fe     .....?..........
     b6c:	fe ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
     b7c:	fc f0 e0 00 00 03 07 0f 3f 7f fe fc f8 f0 fe ff     ........?.......
     b8c:	ff 3f 3f 0f 01 00 00 00 00 00 00 01 01 03 03 03     .??.............
     b9c:	07 0f 0f 1f 1f 3e fe fc f0 e0 e0 c0 00 00 00 00     .....>..........
	...
     bbc:	00 00 01 07 07 0f 1f 3f 7c 78 f8 f0 f0 e0 e0 e0     .......?|x......
     bcc:	c0 80 80 80 80 00 00 00 00 80 f0 f8 fe ff ff 7f     ................
     bdc:	1f 1f 1f ff fe f8 f0 f0 e0 80 00 07 0f 1f 3f 3f     ..............??
     bec:	7f 7f 7f 7f ff ff ff ff ff ff ff 7f 7f 7f 7f 3f     ...............?
     bfc:	1f 0f 07 00 80 c0 e0 f0 f8 fe 7f 1f 1f 0f 3f 7f     ..............?.
     c0c:	ff fe fc f0 80 00 00 00 00 80 80 80 80 c0 e0 e0     ................
     c1c:	e0 f0 f0 f8 78 7c 3f 1f 0f 0f 07 03 00 00 00 00     ....x|?.........
	...
     c48:	01 01 01 03 03 03 03 07 07 0f 0f cf fe ff ff 7f     ................
     c58:	1f 1f 1c 1c 1c 1c 1c 3c 3d 39 3f 3f 3f 3f 3f 7e     .......<=9?????~
     c68:	fc f8 f8 f8 f8 b8 b8 38 38 38 38 38 38 38 38 b8     .......88888888.
     c78:	b8 f8 f8 f8 fc fc 7e 3f 3f 3f 3f 3f 3f 3d 3c 1c     ......~??????=<.
     c88:	1c 1c 1c 1c 1f 1f 3f ff ff fe e7 8f 0f 07 07 03     ......?.........
     c98:	03 03 03 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     cd0:	00 00 1e 7f ff ff ff 80 80 00 00 00 00 00 00 00     ................
	...
     ce8:	00 81 83 83 c7 cf cf ff fe fe 7c 7c fe fe ff cf     ..........||....
     cf8:	cf c7 83 83 81 00 00 00 00 00 00 00 00 00 00 00     ................
     d08:	00 00 00 00 00 00 80 ff ff ff ff 3f 00 00 00 00     ...........?....
	...
     d54:	03 07 0f 0f 1f 1e 1c 3c 3c 38 38 38 38 3c 3c 1c     .......<<8888<<.
     d64:	1c 1e 1e 1e 1f 07 07 07 07 03 03 01 01 00 00 00     ................
     d74:	00 01 01 03 03 07 07 07 1f 1f 3e 3e 3e 7c 7c 7c     ..........>>>|||
     d84:	7c 7c 78 78 78 3c 3c 3c 3e 3f 3f 1f 07 03 00 00     ||xxx<<<>??.....
	...

00000db4 <strStop>:
	...
     e4c:	00 00 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ebc:	00 80 e0 f0 fc fe ff ff 3f 00 00 00 00 c0 e0 f8     ........?.......
     ecc:	fe ff ff ff 1f 03 00 00 80 e0 e0 f0 f0 f8 f8 f8     ................
     edc:	f8 f8 f8 f8 f8 78 78 78 78 38 38 38 18 10 10 d0     .....xxxx888....
     eec:	f0 f0 fc fe ff ff 3f 00 00 00 00 00 00 00 00 00     ......?.........
     efc:	00 00 00 00 00 c0 e0 f0 fc fe ff ff 3f 00 00 00     ............?...
	...
     f18:	00 00 80 c0 c0 e0 e0 f0 f0 f0 f0 00 00 00 00 00     ................
     f28:	00 00 00 00 00 00 00 80 c0 e0 f8 fc 00 00 00 00     ................
     f38:	00 80 e0 f8 fe ff ff ff ff ef e3 e0 e0 e0 f0 fc     ................
     f48:	ff ff ff ff 7f 6f 63 40 00 c0 f0 f8 fe ff ff ff     .....oc@........
     f58:	ff ef e3 e1 e1 61 40 40 00 00 00 00 00 00 c0 e0     .....a@@........
     f68:	f8 fe ff ff 7f 3f 1f 07 03 00 00 00 00 00 00 00     .....?..........
     f78:	00 00 00 00 c0 e0 f8 fe ff ff 7f 3f 1f 07 03 00     ...........?....
	...
     f90:	00 80 c0 e0 f0 f8 fc fe ff 7f 1f 0f 07 03 07 1f     ................
     fa0:	ff ff ff ff fc 00 00 00 00 00 00 c0 f0 fc fe 3f     ...............?
     fb0:	1f 07 03 01 00 00 00 e0 fc ff ff ff 3f 0f 03 01     ............?...
     fc0:	01 01 c1 f8 fe ff ff 7f 1f 07 01 00 00 80 f0 fc     ................
     fd0:	ff ff ff 3f 0f 03 01 01 01 01 80 80 80 c0 40 00     ...?..........@.
     fe0:	00 00 c0 f0 fc ff ff 3f 0f 07 03 01 00 00 00 00     .......?........
	...
     ff8:	c0 f0 fc ff ff 3f 0f 07 03 01 00 00 00 00 00 00     .....?..........
    1008:	00 00 00 00 00 00 e0 fc fe ff ff ff 1f 0f 07 01     ................
    1018:	00 00 00 00 80 e0 f8 ff ff ff 7f 3f 0f 00 80 80     ...........?....
    1028:	a0 bc 3f 0f 03 01 00 00 00 00 00 00 00 f8 ff 7f     ..?.............
    1038:	1f 07 01 00 00 00 00 00 00 38 7f 7f 3f 1f 07 00     .........8..?...
    1048:	00 00 00 00 00 03 0f 0f 0f 1f 1f 1f 1f 0f 0f 0f     ................
    1058:	07 07 03 03 01 00 00 00 00 04 1f 1f 1f 3f 3e 3e     .............?>>
    1068:	3e 3e 3e 1e 1e 1e 1e 1e 1e 1e 0e 0e 0c 04 04 04     >>>.............
    1078:	1f 1f 1f 3f 3e 3e 3e 3e 3e 1e 1e 1e 1e 1e 1e 1e     ...?>>>>>.......
    1088:	0e 0e 0c 04 04 04 00 07 0f 0f 1f 1f 1e 3e 3e 1e     .............>>.
    1098:	1e 1e 1f 0f 0f 0f 07 03 03 01 00 00 06 0f 1f 1f     ................
    10a8:	0f 0f 06 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000011b4 <__init>:
    11b4:	11 24       	eor	r1, r1
    11b6:	1f be       	out	0x3f, r1	; 63
    11b8:	cf e5       	ldi	r28, 0x5F	; 95
    11ba:	d8 e0       	ldi	r29, 0x08	; 8
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	cd bf       	out	0x3d, r28	; 61

000011c0 <__do_copy_data>:
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	a0 e6       	ldi	r26, 0x60	; 96
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e0 e7       	ldi	r30, 0x70	; 112
    11c8:	fc e3       	ldi	r31, 0x3C	; 60
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0

000011cc <.do_copy_data_loop>:
    11cc:	05 90       	lpm	r0, Z+
    11ce:	0d 92       	st	X+, r0

000011d0 <.do_copy_data_start>:
    11d0:	ac 36       	cpi	r26, 0x6C	; 108
    11d2:	b1 07       	cpc	r27, r17
    11d4:	d9 f7       	brne	.-10     	; 0x11cc

000011d6 <__do_clear_bss>:
    11d6:	10 e0       	ldi	r17, 0x00	; 0
    11d8:	ac e6       	ldi	r26, 0x6C	; 108
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0

000011de <.do_clear_bss_loop>:
    11de:	1d 92       	st	X+, r1

000011e0 <.do_clear_bss_start>:
    11e0:	a2 39       	cpi	r26, 0x92	; 146
    11e2:	b1 07       	cpc	r27, r17
    11e4:	e1 f7       	brne	.-8      	; 0x11de
    11e6:	0c 94 93 10 	jmp	0x2126

000011ea <__bad_interrupt>:
    11ea:	0c 94 00 00 	jmp	0x0

000011ee <set_line>:
//Returns:
//       none
//----------------------------------------------------------------------------
void set_line(unsigned char uLineNumber)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	21 97       	sbiw	r28, 0x01	; 1
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	89 83       	std	Y+1, r24	; 0x01
    //unsigned char uTango=0;
    write_command(0x10);	//column address high
    1204:	80 e1       	ldi	r24, 0x10	; 16
    1206:	0e 94 bf 1a 	call	0x357e
    write_command(0x00);	//column address low
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 bf 1a 	call	0x357e

    uLineNumber=uLineNumber+0xb0;   //add an offset of B0h to the line number
    1210:	80 eb       	ldi	r24, 0xB0	; 176
    1212:	99 81       	ldd	r25, Y+1	; 0x01
    1214:	89 0f       	add	r24, r25
    1216:	89 83       	std	Y+1, r24	; 0x01
    write_command(uLineNumber);
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	0e 94 bf 1a 	call	0x357e
    121e:	21 96       	adiw	r28, 0x01	; 1
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <write_data>:
    //NOTE:  in the orginal 8051 assembly code from Apollo Display this routine fell through
    //  to the write_command function.
}


//----------------------------------------------------------------------------
//Routine:     write_data (write data to the graphical LCD)
//
//Function:
//		This function serially writes data to the LCD display
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void write_data(unsigned char uLCDData)
{
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	21 97       	sbiw	r28, 0x01	; 1
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	89 83       	std	Y+1, r24	; 0x01
    sbi(defLCDContPort,defLcdRD);       //change state on the read line of the LCD
    1246:	80 91 38 00 	lds	r24, 0x0038
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	80 93 38 00 	sts	0x0038, r24
    sbi(defLCDContPort,defLcdA0);       //set A0 on the LCD for a command
    1250:	80 91 38 00 	lds	r24, 0x0038
    1254:	84 60       	ori	r24, 0x04	; 4
    1256:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdCS1);      //clear the Chip Select on the LCD for
    125a:	80 91 38 00 	lds	r24, 0x0038
    125e:	8e 7f       	andi	r24, 0xFE	; 254
    1260:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdWR);       //change state on the Write line of the LCD
    1264:	80 91 38 00 	lds	r24, 0x0038
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	80 93 38 00 	sts	0x0038, r24
	send_serial_data(uLCDData);					//send the data to the LCD serially
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	0e 94 52 09 	call	0x12a4
    sbi(defLCDContPort,defLcdWR);
    1274:	80 91 38 00 	lds	r24, 0x0038
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	80 93 38 00 	sts	0x0038, r24
    sbi(defLCDContPort,defLcdCS1);      //now set the Chip Select on the LCD
    127e:	80 91 38 00 	lds	r24, 0x0038
    1282:	81 60       	ori	r24, 0x01	; 1
    1284:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdRD);       //change state on the read line of the LCD
    1288:	80 91 38 00 	lds	r24, 0x0038
    128c:	8f 7e       	andi	r24, 0xEF	; 239
    128e:	80 93 38 00 	sts	0x0038, r24
    1292:	21 96       	adiw	r28, 0x01	; 1
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <send_serial_data>:
}


//----------------------------------------------------------------------------
//Routine:     send_serial_data  (send serial data to the LCD)
//
//Function:
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void send_serial_data(unsigned char uLCDSerial)
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	23 97       	sbiw	r28, 0x03	; 3
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	89 83       	std	Y+1, r24	; 0x01
	unsigned char uBitCount;
	unsigned char uLCDTempSerial;

	uLCDTempSerial=uLCDSerial;	//get the data
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	8b 83       	std	Y+3, r24	; 0x03
	uLCDTempSerial=uLCDTempSerial & 0x80;		//clear all the bits but D7
    12be:	90 e8       	ldi	r25, 0x80	; 128
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	89 23       	and	r24, r25
    12c4:	8b 83       	std	Y+3, r24	; 0x03

    //outp(uLCDTempSerial,defLCDDataPort);   //ouput data
	if(uLCDTempSerial==0x80)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	80 38       	cpi	r24, 0x80	; 128
    12ca:	31 f4       	brne	.+12     	; 0x12d8
	{
		sbi(defLCDDataPort,defLcdS1);
    12cc:	80 91 3b 00 	lds	r24, 0x003B
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	80 93 3b 00 	sts	0x003B, r24
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4
	}
	else
	{
		cbi(defLCDDataPort,defLcdS1);
    12d8:	8f e7       	ldi	r24, 0x7F	; 127
    12da:	90 91 3b 00 	lds	r25, 0x003B
    12de:	89 23       	and	r24, r25
    12e0:	80 93 3b 00 	sts	0x003B, r24
	}
	asm("nop");
    12e4:	00 00       	nop
	cbi(defLCDDataPort,defLcdSCL);	//clear the clock
    12e6:	80 91 3b 00 	lds	r24, 0x003B
    12ea:	8f 7b       	andi	r24, 0xBF	; 191
    12ec:	80 93 3b 00 	sts	0x003B, r24
	asm("nop");
    12f0:	00 00       	nop
	sbi(defLCDDataPort,defLcdSCL);	//set the clock
    12f2:	80 91 3b 00 	lds	r24, 0x003B
    12f6:	80 64       	ori	r24, 0x40	; 64
    12f8:	80 93 3b 00 	sts	0x003B, r24
	for(uBitCount=0;uBitCount<7;uBitCount++)
    12fc:	1a 82       	std	Y+2, r1	; 0x02
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	87 30       	cpi	r24, 0x07	; 7
    1302:	50 f5       	brcc	.+84     	; 0x1358
	{
		uLCDTempSerial=uLCDSerial;	//get the data
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	8b 83       	std	Y+3, r24	; 0x03
		uLCDTempSerial = uLCDTempSerial << 1;       // shift Bits one left
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 0f       	add	r24, r24
    130c:	8b 83       	std	Y+3, r24	; 0x03
		uLCDSerial=uLCDTempSerial;	//save the data
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	89 83       	std	Y+1, r24	; 0x01
		uLCDTempSerial=uLCDTempSerial & 0x80;		//clear all the bits but D7
    1312:	90 e8       	ldi	r25, 0x80	; 128
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	89 23       	and	r24, r25
    1318:	8b 83       	std	Y+3, r24	; 0x03
		//outp(uLCDTempSerial,defLCDDataPort);   //ouput data
		if(uLCDTempSerial==0x80)
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	80 38       	cpi	r24, 0x80	; 128
    131e:	31 f4       	brne	.+12     	; 0x132c
		{
			sbi(defLCDDataPort,defLcdS1);
    1320:	80 91 3b 00 	lds	r24, 0x003B
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	80 93 3b 00 	sts	0x003B, r24
    132a:	06 c0       	rjmp	.+12     	; 0x1338
		}
		else
		{
			cbi(defLCDDataPort,defLcdS1);
    132c:	8f e7       	ldi	r24, 0x7F	; 127
    132e:	90 91 3b 00 	lds	r25, 0x003B
    1332:	89 23       	and	r24, r25
    1334:	80 93 3b 00 	sts	0x003B, r24
		}
		asm("nop");
    1338:	00 00       	nop
		cbi(defLCDDataPort,defLcdSCL);	//clear the clock
    133a:	80 91 3b 00 	lds	r24, 0x003B
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	80 93 3b 00 	sts	0x003B, r24
		asm("nop");
    1344:	00 00       	nop
		sbi(defLCDDataPort,defLcdSCL);	//set the clock
    1346:	80 91 3b 00 	lds	r24, 0x003B
    134a:	80 64       	ori	r24, 0x40	; 64
    134c:	80 93 3b 00 	sts	0x003B, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	8a 83       	std	Y+2, r24	; 0x02
    1356:	d3 cf       	rjmp	.-90     	; 0x12fe
    1358:	23 96       	adiw	r28, 0x03	; 3
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <write_char>:
	}
}

//----------------------------------------------------------------------------
//Routine:     write_char (write an ASCII character to the display)
//
//Function:
//
//       The font file starts at zero, a space.
//		Note:  The routine set_line(XX); needs to be called to set the line for
//			characters to be displayed upon.
//
//Varibles passed:
//       uWriteLcdChar (the character to write to the LCD)
//Returns:
//       none
//----------------------------------------------------------------------------
void write_char(unsigned char uWriteLcdChar, bool boolCharInvert)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	29 97       	sbiw	r28, 0x09	; 9
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	unsigned char uLoaded=0;
    1382:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char uDelta;
	unsigned int intEpsilon;

	for(uLoaded=0;uLoaded<5;uLoaded++)
    1384:	1b 82       	std	Y+3, r1	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	85 30       	cpi	r24, 0x05	; 5
    138a:	38 f5       	brcc	.+78     	; 0x13da
	{
		intEpsilon=(uWriteLcdChar*5)+uLoaded;	//figure out the offset to the slice of the character
    138c:	99 81       	ldd	r25, Y+1	; 0x01
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	98 9f       	mul	r25, r24
    1392:	90 01       	movw	r18, r0
    1394:	11 24       	eor	r1, r1
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	99 27       	eor	r25, r25
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	8d 83       	std	Y+5, r24	; 0x05
    13a0:	9e 83       	std	Y+6, r25	; 0x06
		uDelta=PRG_RDB(&font5x7[intEpsilon]);	//get the raw data character data out of flash
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	c9 01       	movw	r24, r18
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	8c 5a       	subi	r24, 0xAC	; 172
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	8f 83       	std	Y+7, r24	; 0x07
    13b2:	98 87       	std	Y+8, r25	; 0x08
    13b4:	ef 81       	ldd	r30, Y+7	; 0x07
    13b6:	f8 85       	ldd	r31, Y+8	; 0x08
    13b8:	84 91       	lpm	r24, Z
    13ba:	89 87       	std	Y+9, r24	; 0x09
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	8c 83       	std	Y+4, r24	; 0x04
		if(boolCharInvert)
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	88 23       	and	r24, r24
    13c4:	19 f0       	breq	.+6      	; 0x13cc
		{
			uDelta=uDelta^255;
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	80 95       	com	r24
    13ca:	8c 83       	std	Y+4, r24	; 0x04
		}
		write_data(uDelta);		//write the data to the display
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	0e 94 18 09 	call	0x1230
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	8f 5f       	subi	r24, 0xFF	; 255
    13d6:	8b 83       	std	Y+3, r24	; 0x03
    13d8:	d6 cf       	rjmp	.-84     	; 0x1386
	}

	if(boolCharInvert)	//a blue character on a white background
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	88 23       	and	r24, r24
    13de:	21 f0       	breq	.+8      	; 0x13e8
	{
		write_data(0xff);	//this puts a verticle, on pixel space between characters
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	0e 94 18 09 	call	0x1230
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee
	}
	else	//a white character on a blue background
	{
		write_data(0x00);	//This puts a verticle, off pixel space between characters
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	0e 94 18 09 	call	0x1230
    13ee:	29 96       	adiw	r28, 0x09	; 9
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <clear_display>:
	}

}

//----------------------------------------------------------------------------
//Routine:     clear_display (clears the currently displayed screen)
//
//Function:
//
//		This function steps through the 8 rows on the 128x64 pixel LCD display and
//		turns off all the display bits.
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void clear_display(void)
{
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	22 97       	sbiw	r28, 0x02	; 2
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
	unsigned char uVertPix=0;
    1414:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uCurrLine=0;
    1416:	1a 82       	std	Y+2, r1	; 0x02

	for(uCurrLine=0;uCurrLine<8;uCurrLine++)
    1418:	1a 82       	std	Y+2, r1	; 0x02
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	90 f4       	brcc	.+36     	; 0x1444
	{
		set_line(uCurrLine);	//sets the current line to display information upon
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	0e 94 f7 08 	call	0x11ee
		for(uVertPix=0;uVertPix<=128;uVertPix++)	//step through the 128 bytes on each row on the LCD
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	81 38       	cpi	r24, 0x81	; 129
    142c:	38 f4       	brcc	.+14     	; 0x143c
		{
			write_data(0);		//clear off the current byte in the LCD
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	0e 94 18 09 	call	0x1230
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	f6 cf       	rjmp	.-20     	; 0x1428
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	eb cf       	rjmp	.-42     	; 0x141a
    1444:	22 96       	adiw	r28, 0x02	; 2
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <get_status>:
		}
	}
}

//----------------------------------------------------------------------------
//Routine:     get_status (get the status from the graphical LCD)
//
//Function:
//		Is this only for a parallel bus?
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
unsigned char get_status(void)
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	21 97       	sbiw	r28, 0x01	; 1
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    unsigned char uLCDStatus;

    //outp(0xFF,defLCDDataPort);   //release the data bus
	sbi(defLCDDataPort,defLcdS1);
    146a:	80 91 3b 00 	lds	r24, 0x003B
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	80 93 3b 00 	sts	0x003B, r24
	sbi(defLCDDataPort,defLcdSCL);
    1474:	80 91 3b 00 	lds	r24, 0x003B
    1478:	80 64       	ori	r24, 0x40	; 64
    147a:	80 93 3b 00 	sts	0x003B, r24

    cbi(defLCDContPort,defLcdA0);       //clear A0 on the LCD for a command
    147e:	80 91 38 00 	lds	r24, 0x0038
    1482:	8b 7f       	andi	r24, 0xFB	; 251
    1484:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdCS1);      //clear the Chip Select on the LCD for
    1488:	80 91 38 00 	lds	r24, 0x0038
    148c:	8e 7f       	andi	r24, 0xFE	; 254
    148e:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdRD);       //clear the Read line on the LCD
    1492:	80 91 38 00 	lds	r24, 0x0038
    1496:	8f 7e       	andi	r24, 0xEF	; 239
    1498:	80 93 38 00 	sts	0x0038, r24
    uLCDStatus=inp(defLCDDataPort);
    149c:	80 91 3b 00 	lds	r24, 0x003B
    14a0:	89 83       	std	Y+1, r24	; 0x01
    sbi(defLCDContPort,defLcdRD);       //set the Read line on the LCD
    14a2:	80 91 38 00 	lds	r24, 0x0038
    14a6:	80 61       	ori	r24, 0x10	; 16
    14a8:	80 93 38 00 	sts	0x0038, r24
    sbi(defLCDContPort,defLcdCS1);      //set the Chip Select line on the LCD
    14ac:	80 91 38 00 	lds	r24, 0x0038
    14b0:	81 60       	ori	r24, 0x01	; 1
    14b2:	80 93 38 00 	sts	0x0038, r24
    return(uLCDStatus);
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	99 27       	eor	r25, r25
    14ba:	21 96       	adiw	r28, 0x01	; 1
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <moveCursorToColumn>:
}

//----------------------------------------------------------------------------
//Routine:     moveCursorToColumn (moves the cursor to a specific location
//
//Function:
//				This function moves the current cursor on the row to whatever
//				column number is passed to it.  The command to the LCD to move the
//				cursor takes two bytes.  The high byte is in the format 0x1* and the
//				low byte is in the format 0x0*.  (where * is a number from 0x00 to
//				0x0f.
//Varibles passed:
//       uCurSpaces (the number of spaces from the left of the display)
//Returns:
//       none
//----------------------------------------------------------------------------
void moveCursorToColumn(unsigned char uCurSpaces)
{
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	22 97       	sbiw	r28, 0x02	; 2
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	89 83       	std	Y+1, r24	; 0x01
	unsigned char x;

	x=uCurSpaces & 0xF0;	//first, we get rid of the low nibble
    14e2:	90 ef       	ldi	r25, 0xF0	; 240
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	89 23       	and	r24, r25
    14e8:	8a 83       	std	Y+2, r24	; 0x02
	x=x>>1;		//then, we shift the high nibble down to the low nibble
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	86 95       	lsr	r24
    14ee:	8a 83       	std	Y+2, r24	; 0x02
	x=x>>1;
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	86 95       	lsr	r24
    14f4:	8a 83       	std	Y+2, r24	; 0x02
	x=x>>1;
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	86 95       	lsr	r24
    14fa:	8a 83       	std	Y+2, r24	; 0x02
	x=x>>1;
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	86 95       	lsr	r24
    1500:	8a 83       	std	Y+2, r24	; 0x02
	x=x+0x10;	//we then add 0x10 to it to tell the LCD it is a column address
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 5f       	subi	r24, 0xF0	; 240
    1506:	8a 83       	std	Y+2, r24	; 0x02
	write_command(x);	//set the high byte of the column address
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	0e 94 bf 1a 	call	0x357e
	x=uCurSpaces & 0x0F;	//next, we get rid of the orginal high nibble
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	8f 70       	andi	r24, 0x0F	; 15
    1512:	8a 83       	std	Y+2, r24	; 0x02
	write_command(x);	//set the low byte of the column address
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	0e 94 bf 1a 	call	0x357e
    151a:	22 96       	adiw	r28, 0x02	; 2
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <write_pixel_spaces>:
}

//----------------------------------------------------------------------------
//Routine:     write_pixel_spaces (write spaces to a row)
//
//Function:
//			This function fills pixels with white spaces.  For Example,
//			if the number passed to it is one, it writes in 8 verticle pixels that
//			are not active on the current row.
//Varibles passed:
//       uPixelSpaces
//Returns:
//       none
//----------------------------------------------------------------------------
void write_pixel_spaces(unsigned char uPixelSpaces)
{
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	22 97       	sbiw	r28, 0x02	; 2
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	89 83       	std	Y+1, r24	; 0x01
	unsigned char r;

	for(r=0;r<uPixelSpaces;r++)
    1542:	1a 82       	std	Y+2, r1	; 0x02
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	98 17       	cp	r25, r24
    154a:	38 f4       	brcc	.+14     	; 0x155a
	{
		write_data(00);		//write the data to the display
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	0e 94 18 09 	call	0x1230
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	8f 5f       	subi	r24, 0xFF	; 255
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	f5 cf       	rjmp	.-22     	; 0x1544
    155a:	22 96       	adiw	r28, 0x02	; 2
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <alphabet>:
//Returns:
//       none
//----------------------------------------------------------------------------
void alphabet(void)
{	
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	2a 97       	sbiw	r28, 0x0a	; 10
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
	unsigned char uAlphaLine=0;
    1580:	19 82       	std	Y+1, r1	; 0x01
	unsigned char uAlpha;
	unsigned char uBeta;
	unsigned char uGama=0x00;
    1582:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char uDelta;
	unsigned int intEpsilon;

	for(uAlphaLine=0;uAlphaLine<8;uAlphaLine++)
    1584:	19 82       	std	Y+1, r1	; 0x01
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 30       	cpi	r24, 0x08	; 8
    158a:	08 f0       	brcs	.+2      	; 0x158e
    158c:	3e c0       	rjmp	.+124    	; 0x160a
	{
		set_line(uAlphaLine);	//set the line for writing
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	0e 94 f7 08 	call	0x11ee
		for(uAlpha=0;uAlpha<21;uAlpha++)
    1594:	1a 82       	std	Y+2, r1	; 0x02
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	85 31       	cpi	r24, 0x15	; 21
    159a:	98 f5       	brcc	.+102    	; 0x1602
		{			
			if(uGama>95)	//have we got to the end of the font set?
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	80 36       	cpi	r24, 0x60	; 96
    15a0:	08 f0       	brcs	.+2      	; 0x15a4
			{
				uGama=0x00;	//yes, we got to the end, reset the font character counter
    15a2:	1c 82       	std	Y+4, r1	; 0x04
			}
			for(uBeta=0;uBeta<5;uBeta++)	//This steps through the 5 characters for the ASCII character
    15a4:	1b 82       	std	Y+3, r1	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	85 30       	cpi	r24, 0x05	; 5
    15aa:	08 f5       	brcc	.+66     	; 0x15ee
			{
				intEpsilon=(uGama*5)+uBeta;	//figure out the offset to the slice of the character
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	85 e0       	ldi	r24, 0x05	; 5
    15b0:	98 9f       	mul	r25, r24
    15b2:	90 01       	movw	r18, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	99 27       	eor	r25, r25
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	8e 83       	std	Y+6, r24	; 0x06
    15c0:	9f 83       	std	Y+7, r25	; 0x07
				uDelta=PRG_RDB(&font5x7[intEpsilon]);	//get the raw data character data out of flash
    15c2:	2e 81       	ldd	r18, Y+6	; 0x06
    15c4:	3f 81       	ldd	r19, Y+7	; 0x07
    15c6:	c9 01       	movw	r24, r18
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	8c 5a       	subi	r24, 0xAC	; 172
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	88 87       	std	Y+8, r24	; 0x08
    15d2:	99 87       	std	Y+9, r25	; 0x09
    15d4:	e8 85       	ldd	r30, Y+8	; 0x08
    15d6:	f9 85       	ldd	r31, Y+9	; 0x09
    15d8:	84 91       	lpm	r24, Z
    15da:	8a 87       	std	Y+10, r24	; 0x0a
    15dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    15de:	8d 83       	std	Y+5, r24	; 0x05
				write_data(uDelta);		//write the data to the display
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	0e 94 18 09 	call	0x1230
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    15ec:	dc cf       	rjmp	.-72     	; 0x15a6
			}
			write_data(0);	//put in a space between characters
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	0e 94 18 09 	call	0x1230
			uGama=uGama+1;
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	8c 83       	std	Y+4, r24	; 0x04
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	8a 83       	std	Y+2, r24	; 0x02
    1600:	ca cf       	rjmp	.-108    	; 0x1596
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	be cf       	rjmp	.-132    	; 0x1586
    160a:	2a 96       	adiw	r28, 0x0a	; 10
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	08 95       	ret

0000161c <kustom_image>:
		}
	}
}

//----------------------------------------------------------------------------
//Routine:     kustom_image (write the kustom signals logo to the full screen)
//
//Function:
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void kustom_image(void)
{
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	26 97       	sbiw	r28, 0x06	; 6
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
	unsigned int uByteCounter;		//count off every byte, there are 128 bytes in each row
	unsigned char uRowCounter;		//count off all 8 rows on the screen
	
	for(uRowCounter=0;uRowCounter<8;uRowCounter++)		//there are 8 rows to write
    1630:	1b 82       	std	Y+3, r1	; 0x03
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 30       	cpi	r24, 0x08	; 8
    1636:	58 f5       	brcc	.+86     	; 0x168e
	{
		set_line(uRowCounter);	//set the row for writing
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	0e 94 f7 08 	call	0x11ee
		for(uByteCounter=0;uByteCounter<127;uByteCounter++)	//128 bytes of data in each row
    163e:	19 82       	std	Y+1, r1	; 0x01
    1640:	1a 82       	std	Y+2, r1	; 0x02
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	8f 37       	cpi	r24, 0x7F	; 127
    1648:	91 05       	cpc	r25, r1
    164a:	e8 f4       	brcc	.+58     	; 0x1686
		{
			write_data(PRG_RDB(&strKustom[(128*uRowCounter)+uByteCounter]));	//get the raw data
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	99 27       	eor	r25, r25
    1650:	9c 01       	movw	r18, r24
    1652:	36 95       	lsr	r19
    1654:	32 2f       	mov	r19, r18
    1656:	22 27       	eor	r18, r18
    1658:	37 95       	ror	r19
    165a:	27 95       	ror	r18
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	82 0f       	add	r24, r18
    1662:	93 1f       	adc	r25, r19
    1664:	8c 54       	subi	r24, 0x4C	; 76
    1666:	96 4f       	sbci	r25, 0xF6	; 246
    1668:	8c 83       	std	Y+4, r24	; 0x04
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	ec 81       	ldd	r30, Y+4	; 0x04
    166e:	fd 81       	ldd	r31, Y+5	; 0x05
    1670:	84 91       	lpm	r24, Z
    1672:	8e 83       	std	Y+6, r24	; 0x06
    1674:	8e 81       	ldd	r24, Y+6	; 0x06
    1676:	0e 94 18 09 	call	0x1230
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	de cf       	rjmp	.-68     	; 0x1642
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	d2 cf       	rjmp	.-92     	; 0x1632
    168e:	26 96       	adiw	r28, 0x06	; 6
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <stop_image>:
			//  character data out of flash, 128 bytes for each row of data.
		}
	}
}

void stop_image(void)
{
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	26 97       	sbiw	r28, 0x06	; 6
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
	unsigned int uByteCounter;		//count off every byte, there are 128 bytes in each row
	unsigned char uRowCounter;		//count off all 8 rows on the screen
	
	for(uRowCounter=0;uRowCounter<8;uRowCounter++)		//there are 8 rows to write
    16b4:	1b 82       	std	Y+3, r1	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	88 30       	cpi	r24, 0x08	; 8
    16ba:	58 f5       	brcc	.+86     	; 0x1712
	{
		set_line(uRowCounter);	//set the row for writing
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	0e 94 f7 08 	call	0x11ee
		for(uByteCounter=0;uByteCounter<127;uByteCounter++)	//128 bytes of data in each row
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	1a 82       	std	Y+2, r1	; 0x02
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	8f 37       	cpi	r24, 0x7F	; 127
    16cc:	91 05       	cpc	r25, r1
    16ce:	e8 f4       	brcc	.+58     	; 0x170a
		{
			write_data(PRG_RDB(&strStop[(128*uRowCounter)+uByteCounter]));	//get the raw data
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	99 27       	eor	r25, r25
    16d4:	9c 01       	movw	r18, r24
    16d6:	36 95       	lsr	r19
    16d8:	32 2f       	mov	r19, r18
    16da:	22 27       	eor	r18, r18
    16dc:	37 95       	ror	r19
    16de:	27 95       	ror	r18
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	8c 54       	subi	r24, 0x4C	; 76
    16ea:	92 4f       	sbci	r25, 0xF2	; 242
    16ec:	8c 83       	std	Y+4, r24	; 0x04
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	ec 81       	ldd	r30, Y+4	; 0x04
    16f2:	fd 81       	ldd	r31, Y+5	; 0x05
    16f4:	84 91       	lpm	r24, Z
    16f6:	8e 83       	std	Y+6, r24	; 0x06
    16f8:	8e 81       	ldd	r24, Y+6	; 0x06
    16fa:	0e 94 18 09 	call	0x1230
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	de cf       	rjmp	.-68     	; 0x16c6
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	d2 cf       	rjmp	.-92     	; 0x16b6
    1712:	26 96       	adiw	r28, 0x06	; 6
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <BigDigits>:
			//  character data out of flash, 128 bytes for each row of data.
		}
	}
}


//Parameters for the passed variables:
//	uStartRow: 0 to 7, the start row of the big text
//	uStartColum:  0 to 112, the pixel count to start the number from the left side of the display
//  IntNumber:  0 to 999, the number to display in big pixels
//	uPeriodPos:  NOT IMPLIMENTED:  0 to 6, the position to display the period, ".", in the number
//  boolInvert: if true, blue on a white background, if false, white on a blue background

void BigDigits(unsigned char uStartRow, unsigned char uStartColumn, unsigned int intNumber, unsigned char uNumbersDisplayed, bool boolInvert)
{
    1724:	0f 93       	push	r16
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	61 97       	sbiw	r28, 0x11	; 17
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	6a 83       	std	Y+2, r22	; 0x02
    173e:	4b 83       	std	Y+3, r20	; 0x03
    1740:	5c 83       	std	Y+4, r21	; 0x04
    1742:	2d 83       	std	Y+5, r18	; 0x05
    1744:	0e 83       	std	Y+6, r16	; 0x06
	unsigned char uAlpha;
	unsigned char uBeta;
	unsigned char uGamma;
	
	unsigned int intTor;
	unsigned int intS;
	
	bool boolFirstNonZero=false;
    1746:	1e 86       	std	Y+14, r1	; 0x0e

	integerToArray(intNumber);	//convert the big font number to a string
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	0e 94 ed 10 	call	0x21da
	set_line(uStartRow);		//set the line for writing a string of characters
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);	//write white spaces to get to the right column
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	0e 94 66 0a 	call	0x14cc
	boolFirstNonZero=false;	//preperation for the blanking the leading zeros
    175c:	1e 86       	std	Y+14, r1	; 0x0e
	for(uGamma=1;uGamma<4;uGamma++)	//this for loop writes the top 1/3 of each of the 3 digits
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 87       	std	Y+9, r24	; 0x09
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	08 f0       	brcs	.+2      	; 0x176a
    1768:	67 c0       	rjmp	.+206    	; 0x1838
	{
		uBeta=str[uGamma]-0x30;		//convert the number into an ASCII character
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	99 27       	eor	r25, r25
    176e:	fc 01       	movw	r30, r24
    1770:	e4 57       	subi	r30, 0x74	; 116
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	80 53       	subi	r24, 0x30	; 48
    1778:	88 87       	std	Y+8, r24	; 0x08
		if(uBeta==0 && uGamma==1)	//if there is a zero in the hundreds place, then write a blank space
    177a:	88 85       	ldd	r24, Y+8	; 0x08
    177c:	88 23       	and	r24, r24
    177e:	39 f4       	brne	.+14     	; 0x178e
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	21 f4       	brne	.+8      	; 0x178e
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    1786:	8f e0       	ldi	r24, 0x0F	; 15
    1788:	0e 94 96 0a 	call	0x152c
    178c:	51 c0       	rjmp	.+162    	; 0x1830
		}
		else if(uBeta==0 && uGamma==2 && boolFirstNonZero==false && uNumbersDisplayed<2)
    178e:	88 85       	ldd	r24, Y+8	; 0x08
    1790:	88 23       	and	r24, r24
    1792:	69 f4       	brne	.+26     	; 0x17ae
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	51 f4       	brne	.+20     	; 0x17ae
    179a:	8e 85       	ldd	r24, Y+14	; 0x0e
    179c:	88 23       	and	r24, r24
    179e:	39 f4       	brne	.+14     	; 0x17ae
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	20 f4       	brcc	.+8      	; 0x17ae
		//go write spaces if the hundreds digit was zero and tens digit is zero
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    17a6:	8f e0       	ldi	r24, 0x0F	; 15
    17a8:	0e 94 96 0a 	call	0x152c
    17ac:	41 c0       	rjmp	.+130    	; 0x1830
		}
		else if(uBeta==0 && uGamma==3 && boolFirstNonZero==false && uNumbersDisplayed<1)
    17ae:	88 85       	ldd	r24, Y+8	; 0x08
    17b0:	88 23       	and	r24, r24
    17b2:	69 f4       	brne	.+26     	; 0x17ce
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	51 f4       	brne	.+20     	; 0x17ce
    17ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    17bc:	88 23       	and	r24, r24
    17be:	39 f4       	brne	.+14     	; 0x17ce
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	88 23       	and	r24, r24
    17c4:	21 f4       	brne	.+8      	; 0x17ce
		//go write spaces if the hundreds digit was zero, the tens digit is zero, 
		//  and the ones digit is zero
		{
			//moveCursorToColumn(uStartColumn+15);	//write white spaces to get to the right column
			write_pixel_spaces(15);	//write white spaces to get to the right column
    17c6:	8f e0       	ldi	r24, 0x0F	; 15
    17c8:	0e 94 96 0a 	call	0x152c
    17cc:	31 c0       	rjmp	.+98     	; 0x1830
		}
		else
		{
			boolFirstNonZero=true;	//we must have had our first non-zero digit
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	8e 87       	std	Y+14, r24	; 0x0e
			for(uAlpha=0;uAlpha<15;uAlpha++)	//get the top 16 bytes out of flash for the current digit
    17d2:	1f 82       	std	Y+7, r1	; 0x07
    17d4:	8f 81       	ldd	r24, Y+7	; 0x07
    17d6:	8f 30       	cpi	r24, 0x0F	; 15
    17d8:	58 f5       	brcc	.+86     	; 0x1830
			{		
				intTor=(uBeta*48)+uAlpha;	//calculate the offset to the character we need
    17da:	98 85       	ldd	r25, Y+8	; 0x08
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	98 9f       	mul	r25, r24
    17e0:	90 01       	movw	r18, r0
    17e2:	11 24       	eor	r1, r1
    17e4:	8f 81       	ldd	r24, Y+7	; 0x07
    17e6:	99 27       	eor	r25, r25
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	8a 87       	std	Y+10, r24	; 0x0a
    17ee:	9b 87       	std	Y+11, r25	; 0x0b
				intS=PRG_RDB(&strBigFont0[intTor]);	//get the raw data character data out of flash
    17f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f4:	86 5a       	subi	r24, 0xA6	; 166
    17f6:	9a 4f       	sbci	r25, 0xFA	; 250
    17f8:	8f 87       	std	Y+15, r24	; 0x0f
    17fa:	98 8b       	std	Y+16, r25	; 0x10
    17fc:	ef 85       	ldd	r30, Y+15	; 0x0f
    17fe:	f8 89       	ldd	r31, Y+16	; 0x10
    1800:	84 91       	lpm	r24, Z
    1802:	89 8b       	std	Y+17, r24	; 0x11
    1804:	89 89       	ldd	r24, Y+17	; 0x11
    1806:	99 27       	eor	r25, r25
    1808:	8c 87       	std	Y+12, r24	; 0x0c
    180a:	9d 87       	std	Y+13, r25	; 0x0d
				if(boolInvert)
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	88 23       	and	r24, r24
    1810:	41 f0       	breq	.+16     	; 0x1822
				{
					intS=intS^255;
    1812:	8c 85       	ldd	r24, Y+12	; 0x0c
    1814:	9d 85       	ldd	r25, Y+13	; 0x0d
    1816:	2f ef       	ldi	r18, 0xFF	; 255
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	82 27       	eor	r24, r18
    181c:	93 27       	eor	r25, r19
    181e:	8c 87       	std	Y+12, r24	; 0x0c
    1820:	9d 87       	std	Y+13, r25	; 0x0d
				}
				write_data(intS);		//write the data to the display
    1822:	8c 85       	ldd	r24, Y+12	; 0x0c
    1824:	0e 94 18 09 	call	0x1230
    1828:	8f 81       	ldd	r24, Y+7	; 0x07
    182a:	8f 5f       	subi	r24, 0xFF	; 255
    182c:	8f 83       	std	Y+7, r24	; 0x07
    182e:	d2 cf       	rjmp	.-92     	; 0x17d4
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	89 87       	std	Y+9, r24	; 0x09
    1836:	95 cf       	rjmp	.-214    	; 0x1762
			}
		}
	}
	set_line(uStartRow+1);		//set the line for writing a string of characters
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	0e 94 66 0a 	call	0x14cc
	boolFirstNonZero=false;	//preperation for the blanking the leading zeros
    1846:	1e 86       	std	Y+14, r1	; 0x0e
	for(uGamma=1;uGamma<4;uGamma++)	//this for loop writes the middle 1/3 of each of the 3 digits
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 87       	std	Y+9, r24	; 0x09
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	84 30       	cpi	r24, 0x04	; 4
    1850:	08 f0       	brcs	.+2      	; 0x1854
    1852:	68 c0       	rjmp	.+208    	; 0x1924
	{
		uBeta=str[uGamma]-0x30;
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	99 27       	eor	r25, r25
    1858:	fc 01       	movw	r30, r24
    185a:	e4 57       	subi	r30, 0x74	; 116
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	80 53       	subi	r24, 0x30	; 48
    1862:	88 87       	std	Y+8, r24	; 0x08
		if(uBeta==0 && uGamma==1)	//if there is a zero in the hundreds place, then write a blank space
    1864:	88 85       	ldd	r24, Y+8	; 0x08
    1866:	88 23       	and	r24, r24
    1868:	39 f4       	brne	.+14     	; 0x1878
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	21 f4       	brne	.+8      	; 0x1878
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    1870:	8f e0       	ldi	r24, 0x0F	; 15
    1872:	0e 94 96 0a 	call	0x152c
    1876:	52 c0       	rjmp	.+164    	; 0x191c
		}
		else if(uBeta==0 && uGamma==2 && boolFirstNonZero==false && uNumbersDisplayed<2)
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	88 23       	and	r24, r24
    187c:	69 f4       	brne	.+26     	; 0x1898
    187e:	89 85       	ldd	r24, Y+9	; 0x09
    1880:	82 30       	cpi	r24, 0x02	; 2
    1882:	51 f4       	brne	.+20     	; 0x1898
    1884:	8e 85       	ldd	r24, Y+14	; 0x0e
    1886:	88 23       	and	r24, r24
    1888:	39 f4       	brne	.+14     	; 0x1898
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	20 f4       	brcc	.+8      	; 0x1898
		//go write spaces if the hundreds digit was zero and tens digit is zero
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    1890:	8f e0       	ldi	r24, 0x0F	; 15
    1892:	0e 94 96 0a 	call	0x152c
    1896:	42 c0       	rjmp	.+132    	; 0x191c
		}
		else if(uBeta==0 && uGamma==3 && boolFirstNonZero==false && uNumbersDisplayed<1)
    1898:	88 85       	ldd	r24, Y+8	; 0x08
    189a:	88 23       	and	r24, r24
    189c:	69 f4       	brne	.+26     	; 0x18b8
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	51 f4       	brne	.+20     	; 0x18b8
    18a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18a6:	88 23       	and	r24, r24
    18a8:	39 f4       	brne	.+14     	; 0x18b8
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	88 23       	and	r24, r24
    18ae:	21 f4       	brne	.+8      	; 0x18b8
		//go write spaces if the hundreds digit was zero, the tens digit is zero, 
		//  and the ones digit is zero
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	0e 94 96 0a 	call	0x152c
    18b6:	32 c0       	rjmp	.+100    	; 0x191c
		}
		else
		{
			boolFirstNonZero=true;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	8e 87       	std	Y+14, r24	; 0x0e
			for(uAlpha=16;uAlpha<31;uAlpha++)	//get the middle 16 bytes out of flash for the current digit
    18bc:	80 e1       	ldi	r24, 0x10	; 16
    18be:	8f 83       	std	Y+7, r24	; 0x07
    18c0:	8f 81       	ldd	r24, Y+7	; 0x07
    18c2:	8f 31       	cpi	r24, 0x1F	; 31
    18c4:	58 f5       	brcc	.+86     	; 0x191c
			{		
				intTor=(uBeta*48)+uAlpha;	//calculate the offset to the character we need
    18c6:	98 85       	ldd	r25, Y+8	; 0x08
    18c8:	80 e3       	ldi	r24, 0x30	; 48
    18ca:	98 9f       	mul	r25, r24
    18cc:	90 01       	movw	r18, r0
    18ce:	11 24       	eor	r1, r1
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	99 27       	eor	r25, r25
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	8a 87       	std	Y+10, r24	; 0x0a
    18da:	9b 87       	std	Y+11, r25	; 0x0b
				intS=PRG_RDB(&strBigFont0[intTor]);	//get the raw data character data out of flash
    18dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18de:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e0:	86 5a       	subi	r24, 0xA6	; 166
    18e2:	9a 4f       	sbci	r25, 0xFA	; 250
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    18ea:	f8 89       	ldd	r31, Y+16	; 0x10
    18ec:	84 91       	lpm	r24, Z
    18ee:	89 8b       	std	Y+17, r24	; 0x11
    18f0:	89 89       	ldd	r24, Y+17	; 0x11
    18f2:	99 27       	eor	r25, r25
    18f4:	8c 87       	std	Y+12, r24	; 0x0c
    18f6:	9d 87       	std	Y+13, r25	; 0x0d
				if(boolInvert)
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	88 23       	and	r24, r24
    18fc:	41 f0       	breq	.+16     	; 0x190e
				{
					intS=intS^255;
    18fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1900:	9d 85       	ldd	r25, Y+13	; 0x0d
    1902:	2f ef       	ldi	r18, 0xFF	; 255
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	82 27       	eor	r24, r18
    1908:	93 27       	eor	r25, r19
    190a:	8c 87       	std	Y+12, r24	; 0x0c
    190c:	9d 87       	std	Y+13, r25	; 0x0d
				}
				write_data(intS);		//write the data to the display
    190e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1910:	0e 94 18 09 	call	0x1230
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	d2 cf       	rjmp	.-92     	; 0x18c0
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	8f 5f       	subi	r24, 0xFF	; 255
    1920:	89 87       	std	Y+9, r24	; 0x09
    1922:	94 cf       	rjmp	.-216    	; 0x184c
			}
		}
	}
	set_line(uStartRow+2);		//set the line for writing a string of characters
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	8e 5f       	subi	r24, 0xFE	; 254
    1928:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	0e 94 66 0a 	call	0x14cc
	boolFirstNonZero=false;	//preperation for the blanking the leading zeros
    1932:	1e 86       	std	Y+14, r1	; 0x0e
	for(uGamma=1;uGamma<4;uGamma++)	//this loop writes the bottom 1/3 of each of the 3 digits
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	89 87       	std	Y+9, r24	; 0x09
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	08 f0       	brcs	.+2      	; 0x1940
    193e:	68 c0       	rjmp	.+208    	; 0x1a10
	{
		uBeta=str[uGamma]-0x30;		//convert the number into an ASCII character
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	99 27       	eor	r25, r25
    1944:	fc 01       	movw	r30, r24
    1946:	e4 57       	subi	r30, 0x74	; 116
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	80 53       	subi	r24, 0x30	; 48
    194e:	88 87       	std	Y+8, r24	; 0x08
		if(uBeta==0 && uGamma==1)	//if there is a zero in the hundreds place, then write a blank space
    1950:	88 85       	ldd	r24, Y+8	; 0x08
    1952:	88 23       	and	r24, r24
    1954:	39 f4       	brne	.+14     	; 0x1964
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	21 f4       	brne	.+8      	; 0x1964
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    195c:	8f e0       	ldi	r24, 0x0F	; 15
    195e:	0e 94 96 0a 	call	0x152c
    1962:	52 c0       	rjmp	.+164    	; 0x1a08
		}
		else if(uBeta==0 && uGamma==2 && boolFirstNonZero==false && uNumbersDisplayed<2)
    1964:	88 85       	ldd	r24, Y+8	; 0x08
    1966:	88 23       	and	r24, r24
    1968:	69 f4       	brne	.+26     	; 0x1984
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	51 f4       	brne	.+20     	; 0x1984
    1970:	8e 85       	ldd	r24, Y+14	; 0x0e
    1972:	88 23       	and	r24, r24
    1974:	39 f4       	brne	.+14     	; 0x1984
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	20 f4       	brcc	.+8      	; 0x1984
		//go write spaces if the hundreds digit was zero and tens digit is zero
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    197c:	8f e0       	ldi	r24, 0x0F	; 15
    197e:	0e 94 96 0a 	call	0x152c
    1982:	42 c0       	rjmp	.+132    	; 0x1a08
		}
		else if(uBeta==0 && uGamma==3 && boolFirstNonZero==false && uNumbersDisplayed<1)
    1984:	88 85       	ldd	r24, Y+8	; 0x08
    1986:	88 23       	and	r24, r24
    1988:	69 f4       	brne	.+26     	; 0x19a4
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	51 f4       	brne	.+20     	; 0x19a4
    1990:	8e 85       	ldd	r24, Y+14	; 0x0e
    1992:	88 23       	and	r24, r24
    1994:	39 f4       	brne	.+14     	; 0x19a4
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	88 23       	and	r24, r24
    199a:	21 f4       	brne	.+8      	; 0x19a4
		//go write spaces if the hundreds digit was zero, the tens digit is zero, 
		//  and the ones digit is zero
		{
			write_pixel_spaces(15);	//write white spaces to get to the right column
    199c:	8f e0       	ldi	r24, 0x0F	; 15
    199e:	0e 94 96 0a 	call	0x152c
    19a2:	32 c0       	rjmp	.+100    	; 0x1a08
		}
		else
		{
			boolFirstNonZero=true;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	8e 87       	std	Y+14, r24	; 0x0e
			for(uAlpha=32;uAlpha<47;uAlpha++)	//get the bottom 16 bytes out of flash for the current digit
    19a8:	80 e2       	ldi	r24, 0x20	; 32
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
    19ae:	8f 32       	cpi	r24, 0x2F	; 47
    19b0:	58 f5       	brcc	.+86     	; 0x1a08
			{		
				intTor=(uBeta*48)+uAlpha;	//calculate the offset to the character we need
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	80 e3       	ldi	r24, 0x30	; 48
    19b6:	98 9f       	mul	r25, r24
    19b8:	90 01       	movw	r18, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	99 27       	eor	r25, r25
    19c0:	82 0f       	add	r24, r18
    19c2:	93 1f       	adc	r25, r19
    19c4:	8a 87       	std	Y+10, r24	; 0x0a
    19c6:	9b 87       	std	Y+11, r25	; 0x0b
				intS=PRG_RDB(&strBigFont0[intTor]);	//get the raw data character data out of flash
    19c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    19cc:	86 5a       	subi	r24, 0xA6	; 166
    19ce:	9a 4f       	sbci	r25, 0xFA	; 250
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
    19d2:	98 8b       	std	Y+16, r25	; 0x10
    19d4:	ef 85       	ldd	r30, Y+15	; 0x0f
    19d6:	f8 89       	ldd	r31, Y+16	; 0x10
    19d8:	84 91       	lpm	r24, Z
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	99 27       	eor	r25, r25
    19e0:	8c 87       	std	Y+12, r24	; 0x0c
    19e2:	9d 87       	std	Y+13, r25	; 0x0d
				if(boolInvert)
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	88 23       	and	r24, r24
    19e8:	41 f0       	breq	.+16     	; 0x19fa
				{
					intS=intS^255;	//inverts the background with forground color, This exclusive or's the value from flash
    19ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ee:	2f ef       	ldi	r18, 0xFF	; 255
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	82 27       	eor	r24, r18
    19f4:	93 27       	eor	r25, r19
    19f6:	8c 87       	std	Y+12, r24	; 0x0c
    19f8:	9d 87       	std	Y+13, r25	; 0x0d
				}
				write_data(intS);		//write the data to the display
    19fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    19fc:	0e 94 18 09 	call	0x1230
    1a00:	8f 81       	ldd	r24, Y+7	; 0x07
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	8f 83       	std	Y+7, r24	; 0x07
    1a06:	d2 cf       	rjmp	.-92     	; 0x19ac
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	89 87       	std	Y+9, r24	; 0x09
    1a0e:	94 cf       	rjmp	.-216    	; 0x1938
    1a10:	61 96       	adiw	r28, 0x11	; 17
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <write_eagle_display>:
			}
		}
	}
}

//----------------------------------------------------------------------------
//Routine:     write_eagle_display (write a bit-mapped image to the graphical LCD)
//
//Function:
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void write_eagle_display(void)
{
    1a24:	0f 93       	push	r16
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	//drawText(string to print, column to start on, line (row) to put the text upon, invert the colors?)
	//drawText((unsigned char *)strPatrol,93,0,false);
	//drawText((unsigned char *)strTarget,10,0,false);
	//drawText((unsigned char *)strLock,55,4,false);

	//BigDigits(unsigned char uStartRow, unsigned char uStartColumn, unsigned int intNumber, unsigned char )

	//BigDigits(5,40,156,0,true);

	//write an example time to the display
	BigDigits(1,50,59,0,false);
    1a2e:	00 e0       	ldi	r16, 0x00	; 0
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	4b e3       	ldi	r20, 0x3B	; 59
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	62 e3       	ldi	r22, 0x32	; 50
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 92 0b 	call	0x1724
	subLargeCOlon(1,52,false);
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	64 e3       	ldi	r22, 0x34	; 52
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 7c 0d 	call	0x1af8
	BigDigits(1,10,12,0,false);
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	4c e0       	ldi	r20, 0x0C	; 12
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	6a e0       	ldi	r22, 0x0A	; 10
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0e 94 92 0b 	call	0x1724
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <drawText>:
}


//----------------------------------------------------------------------------
//Routine:     drawText (prints an array of 5x7 characters to the LCD)
//
//Function:
//		This function draws a string of data to the LCD in 5x7 pixel format.
//		The X (column) and Y (row) position is passed to the array.  The position
//		numbers start from the upper left hand corner of the display.
//
//Varibles passed:
//      unsigned char *pts:  This is a pointer to the array that will be printing to the LCD
//		unsigned char uPosition:  (value =0 to 120) this is the number of pixels from the left side of the
//			screen that the text will start.  (it sets the column start position of the text)
//		unsigned char uRow:  (value = 0 to 7) this sets the row the text will be printed upon.
//		ubool boolInvert:  When false- white characters on a blue background
//			when true - blue characters on a white background.
//Returns:
//       none
//----------------------------------------------------------------------------
void drawText(unsigned char *pts,unsigned char uPosition,unsigned char uRow, bool boolInvert)
{
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	29 97       	sbiw	r28, 0x09	; 9
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	6b 83       	std	Y+3, r22	; 0x03
    1a7a:	4c 83       	std	Y+4, r20	; 0x04
    1a7c:	2d 83       	std	Y+5, r18	; 0x05
	unsigned char x=0;
    1a7e:	1e 82       	std	Y+6, r1	; 0x06

	if(uRow!=255 && uPosition!=255)	//when the row and column is 255, do not set the cursor position, use the current one
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	8f 3f       	cpi	r24, 0xFF	; 255
    1a84:	49 f0       	breq	.+18     	; 0x1a98
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8a:	31 f0       	breq	.+12     	; 0x1a98
	{
		set_line(uRow);	//set the line (row) for writing
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	0e 94 f7 08 	call	0x11ee
		moveCursorToColumn(uPosition);	//set the number of pixels from the left to start writing.
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	0e 94 66 0a 	call	0x14cc
	}
	if(boolInvert)	//a blue character on a white background
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f0       	breq	.+6      	; 0x1aa4
	{
		write_data(0xff);	//this puts a verticle, one pixel space between characters
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	0e 94 18 09 	call	0x1230
	}

	while(x!=0xff)		//The array will be terminated with a 0xFF character
    1aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa8:	c1 f0       	breq	.+48     	; 0x1ada
	{
		x=PRG_RDB(pts);		//get the byte out of flash based upon the pointer,
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	8f 83       	std	Y+7, r24	; 0x07
    1ab0:	98 87       	std	Y+8, r25	; 0x08
    1ab2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ab4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ab6:	84 91       	lpm	r24, Z
    1ab8:	89 87       	std	Y+9, r24	; 0x09
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	8e 83       	std	Y+6, r24	; 0x06
		if(x!=0xff)		//have we reached the end of the display array?
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac2:	81 f3       	breq	.-32     	; 0x1aa4
		{
			write_char(x-32,boolInvert);	//adjust the character to the font table and 
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	80 52       	subi	r24, 0x20	; 32
    1ac8:	6d 81       	ldd	r22, Y+5	; 0x05
    1aca:	0e 94 b5 09 	call	0x136a
				// then write it to the screen.
			pts++;	//advance the pointer to the flash table in preparation for the next reading.
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	e5 cf       	rjmp	.-54     	; 0x1aa4
		}
	}
	if(!boolInvert)	//a blue character on a white background, takes off the 8 pixels on the end of the text
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	88 23       	and	r24, r24
    1ade:	19 f4       	brne	.+6      	; 0x1ae6
	{
		write_data(0x00);	//this puts a verticle, on pixel space after the line has printed
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	0e 94 18 09 	call	0x1230
    1ae6:	29 96       	adiw	r28, 0x09	; 9
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <subLargeCOlon>:
	}

}


//Parameters for the passed variables:
//	uStartRow: 0 to 7, the start row of the big text
//	uStartColum:  0 to 112, the pixel count to start the number from the left side of the display
//  boolInvert: if true, blue on a white background, if false, white on a blue background
void subLargeCOlon(unsigned char uStartRow, unsigned char uStartColumn, bool boolInvert)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	2a 97       	sbiw	r28, 0x0a	; 10
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	6a 83       	std	Y+2, r22	; 0x02
    1b10:	4b 83       	std	Y+3, r20	; 0x03
	unsigned char uAlpha;
	unsigned int intS;
	
	bool boolFirstNonZero=false;
    1b12:	1f 82       	std	Y+7, r1	; 0x07

	set_line(uStartRow);		//set the line for writing a string of characters
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);	//write white spaces to get to the right column
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	0e 94 66 0a 	call	0x14cc
	boolFirstNonZero=true;	//we must have had our first non-zero digit
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	8f 83       	std	Y+7, r24	; 0x07
	for(uAlpha=0;uAlpha<15;uAlpha++)	//get the top 16 bytes out of flash for the current digit
    1b24:	1c 82       	std	Y+4, r1	; 0x04
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	8f 30       	cpi	r24, 0x0F	; 15
    1b2a:	00 f5       	brcc	.+64     	; 0x1b6c
	{		
		intS=PRG_RDB(&strBigFontColon[uAlpha]);	//get the raw data character data out of flash
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	99 27       	eor	r25, r25
    1b30:	86 59       	subi	r24, 0x96	; 150
    1b32:	98 4f       	sbci	r25, 0xF8	; 248
    1b34:	88 87       	std	Y+8, r24	; 0x08
    1b36:	99 87       	std	Y+9, r25	; 0x09
    1b38:	e8 85       	ldd	r30, Y+8	; 0x08
    1b3a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b3c:	84 91       	lpm	r24, Z
    1b3e:	8a 87       	std	Y+10, r24	; 0x0a
    1b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b42:	99 27       	eor	r25, r25
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	9e 83       	std	Y+6, r25	; 0x06
		if(boolInvert)
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	88 23       	and	r24, r24
    1b4c:	41 f0       	breq	.+16     	; 0x1b5e
		{
			intS=intS^255;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	82 27       	eor	r24, r18
    1b58:	93 27       	eor	r25, r19
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
		}
		write_data(intS);		//write the data to the display
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	0e 94 18 09 	call	0x1230
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	8c 83       	std	Y+4, r24	; 0x04
    1b6a:	dd cf       	rjmp	.-70     	; 0x1b26
	}
	set_line(uStartRow+1);		//set the line for writing a string of characters
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	0e 94 66 0a 	call	0x14cc
	for(uAlpha=16;uAlpha<31;uAlpha++)	//get the middle 16 bytes out of flash for the current digit
    1b7a:	80 e1       	ldi	r24, 0x10	; 16
    1b7c:	8c 83       	std	Y+4, r24	; 0x04
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	8f 31       	cpi	r24, 0x1F	; 31
    1b82:	00 f5       	brcc	.+64     	; 0x1bc4
	{		
		intS=PRG_RDB(&strBigFontColon[uAlpha]);	//get the raw data character data out of flash
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	99 27       	eor	r25, r25
    1b88:	86 59       	subi	r24, 0x96	; 150
    1b8a:	98 4f       	sbci	r25, 0xF8	; 248
    1b8c:	88 87       	std	Y+8, r24	; 0x08
    1b8e:	99 87       	std	Y+9, r25	; 0x09
    1b90:	e8 85       	ldd	r30, Y+8	; 0x08
    1b92:	f9 85       	ldd	r31, Y+9	; 0x09
    1b94:	84 91       	lpm	r24, Z
    1b96:	8a 87       	std	Y+10, r24	; 0x0a
    1b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9a:	99 27       	eor	r25, r25
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
		if(boolInvert)
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	88 23       	and	r24, r24
    1ba4:	41 f0       	breq	.+16     	; 0x1bb6
		{
			intS=intS^255;
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	2f ef       	ldi	r18, 0xFF	; 255
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	82 27       	eor	r24, r18
    1bb0:	93 27       	eor	r25, r19
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
		}
		write_data(intS);		//write the data to the display
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	0e 94 18 09 	call	0x1230
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	8c 83       	std	Y+4, r24	; 0x04
    1bc2:	dd cf       	rjmp	.-70     	; 0x1b7e
	}
	set_line(uStartRow+2);		//set the line for writing a string of characters
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	8e 5f       	subi	r24, 0xFE	; 254
    1bc8:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	0e 94 66 0a 	call	0x14cc
	boolFirstNonZero=false;	//preperation for the blanking the leading zeros
    1bd2:	1f 82       	std	Y+7, r1	; 0x07
	boolFirstNonZero=true;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
	for(uAlpha=32;uAlpha<47;uAlpha++)	//get the bottom 16 bytes out of flash for the current digit
    1bd8:	80 e2       	ldi	r24, 0x20	; 32
    1bda:	8c 83       	std	Y+4, r24	; 0x04
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	8f 32       	cpi	r24, 0x2F	; 47
    1be0:	00 f5       	brcc	.+64     	; 0x1c22
	{		
		intS=PRG_RDB(&strBigFontColon[uAlpha]);	//get the raw data character data out of flash
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	99 27       	eor	r25, r25
    1be6:	86 59       	subi	r24, 0x96	; 150
    1be8:	98 4f       	sbci	r25, 0xF8	; 248
    1bea:	88 87       	std	Y+8, r24	; 0x08
    1bec:	99 87       	std	Y+9, r25	; 0x09
    1bee:	e8 85       	ldd	r30, Y+8	; 0x08
    1bf0:	f9 85       	ldd	r31, Y+9	; 0x09
    1bf2:	84 91       	lpm	r24, Z
    1bf4:	8a 87       	std	Y+10, r24	; 0x0a
    1bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bf8:	99 27       	eor	r25, r25
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
		if(boolInvert)
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	88 23       	and	r24, r24
    1c02:	41 f0       	breq	.+16     	; 0x1c14
		{
			intS=intS^255;	//inverts the background with forground color, This exclusive or's the value from flash
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	2f ef       	ldi	r18, 0xFF	; 255
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	82 27       	eor	r24, r18
    1c0e:	93 27       	eor	r25, r19
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	9e 83       	std	Y+6, r25	; 0x06
		}
		write_data(intS);		//write the data to the display
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	0e 94 18 09 	call	0x1230
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
    1c20:	dd cf       	rjmp	.-70     	; 0x1bdc
    1c22:	2a 96       	adiw	r28, 0x0a	; 10
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <paintMenu>:
//Returns:
//       none
//----------------------------------------------------------------------------
void paintMenu(unsigned char *pts,unsigned char uMinHighlight,unsigned char uMaxHighlight)
{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	25 97       	sbiw	r28, 0x05	; 5
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	6b 83       	std	Y+3, r22	; 0x03
    1c4e:	4c 83       	std	Y+4, r20	; 0x04
	unsigned char x;
	
	if(uMinHighlight != 0 && uMaxHighlight != 0)	//do not put up the highlight when 
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	88 23       	and	r24, r24
    1c54:	99 f0       	breq	.+38     	; 0x1c7c
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	88 23       	and	r24, r24
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c
		// the min and max highlight value is 0 and 0.
	{
		if(uSelectedLine > uMaxHighlight)	//have we reached the bottom of the area to highlight?
    1c5c:	90 91 91 00 	lds	r25, 0x0091
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	89 17       	cp	r24, r25
    1c64:	18 f4       	brcc	.+6      	; 0x1c6c
		{
			uSelectedLine=uMinHighlight;	//yes, circle back around to the top of the area we can highlight
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	80 93 91 00 	sts	0x0091, r24
		}
		if(uSelectedLine < uMinHighlight)	//have we reached the top of the area to highlight?
    1c6c:	90 91 91 00 	lds	r25, 0x0091
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	98 17       	cp	r25, r24
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c
		{
			uSelectedLine=uMaxHighlight;	//yes, circle back around to the bottom of the area we can hightlight
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	80 93 91 00 	sts	0x0091, r24
		}
	}
	//the next line draws the title line on the menu
	drawText(&pts[0],0,0,false);	//string, column, line, inverted
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	0e 94 30 0d 	call	0x1a60
	//The next line was "for(x=1;x<7;x++)" when there was soft button labels
	for(x=1;x<8;x++)	//This steps through the main area on lines 1 to 7
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	88 30       	cpi	r24, 0x08	; 8
    1c92:	60 f5       	brcc	.+88     	; 0x1cec
	{		
		if(uMinHighlight != 0 && uMaxHighlight != 0 && uSelectedLine==x)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 23       	and	r24, r24
    1c98:	b9 f0       	breq	.+46     	; 0x1cc8
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	88 23       	and	r24, r24
    1c9e:	a1 f0       	breq	.+40     	; 0x1cc8
    1ca0:	90 91 91 00 	lds	r25, 0x0091
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	98 17       	cp	r25, r24
    1ca8:	79 f4       	brne	.+30     	; 0x1cc8
		{	//only go in here when we are reached the highlighted line, there is only one
			//This prints the non highlighted lines, 22 is the offset in the 2d 
			// table to the line we want to display
			drawText(&pts[x*22],defTab,x,true);	//string, column, line, inverted
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	86 e1       	ldi	r24, 0x16	; 22
    1cae:	98 9f       	mul	r25, r24
    1cb0:	90 01       	movw	r18, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	4d 81       	ldd	r20, Y+5	; 0x05
    1cc0:	6a e0       	ldi	r22, 0x0A	; 10
    1cc2:	0e 94 30 0d 	call	0x1a60
    1cc6:	0e c0       	rjmp	.+28     	; 0x1ce4
			/*
			if(uState==50 && (x==1 || x==2))	
			{	//go in here if we are in the main menu, on the audio (line 1) or range (line 2) line
				if(x==1)	//we must be on the audio line
				{
					write_char(uAudio+0x10,true);	//write the highlighted audio value to 
						// the end of "AUDIO = "
				}
				if(x==2)
				{
					write_char(uRange+0x10,true);	//write the highlighted range value to
						// the end of "RANGE = "
				}
			}*/
		}
		else
		{	//print all the non highlighted menu items
			drawText(&pts[x*22],defTab,x,false);	//string, column, line, inverted
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	86 e1       	ldi	r24, 0x16	; 22
    1ccc:	98 9f       	mul	r25, r24
    1cce:	90 01       	movw	r18, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	4d 81       	ldd	r20, Y+5	; 0x05
    1cde:	6a e0       	ldi	r22, 0x0A	; 10
    1ce0:	0e 94 30 0d 	call	0x1a60
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	d1 cf       	rjmp	.-94     	; 0x1c8e
    1cec:	25 96       	adiw	r28, 0x05	; 5
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <uCinit>:
//Returns:
//       none
//----------------------------------------------------------------------------
void uCinit(void)
{
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
   outp(0xF0,DDRA);           //PortA, Pin 5 is an ADC input
    1d06:	80 ef       	ldi	r24, 0xF0	; 240
    1d08:	80 93 3a 00 	sts	0x003A, r24
   outp(0x0F,PORTA);			//enable the pull up resistor for the POrtA, Pin 5
    1d0c:	8f e0       	ldi	r24, 0x0F	; 15
    1d0e:	80 93 3b 00 	sts	0x003B, r24
   outp(0x1F,DDRB);           //only the push buttons are input pins
    1d12:	8f e1       	ldi	r24, 0x1F	; 31
    1d14:	80 93 37 00 	sts	0x0037, r24
   outp(0xE0,PORTB);          //enable pull-up resistors
    1d18:	80 ee       	ldi	r24, 0xE0	; 224
    1d1a:	80 93 38 00 	sts	0x0038, r24
   outp(0xFF,DDRC);           //use all pins on PortA for output
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	80 93 34 00 	sts	0x0034, r24
   //outp(0xFC,PORTC);          //the pullup resistors are on all pins except the LCD control lines
   outp(0xF1,DDRD);           //Portd is mostly inputs, except for the backlight enable, and the audio alarm output
    1d24:	81 ef       	ldi	r24, 0xF1	; 241
    1d26:	80 93 31 00 	sts	0x0031, r24
   outp(0x0E,PORTD);          //PortD has allmost all the pullup resistors enabled
    1d2a:	8e e0       	ldi	r24, 0x0E	; 14
    1d2c:	80 93 32 00 	sts	0x0032, r24
   
   cbi(defLCDContPort,defLcdRES);       //keep the display in reset
    1d30:	80 91 38 00 	lds	r24, 0x0038
    1d34:	8d 7f       	andi	r24, 0xFD	; 253
    1d36:	80 93 38 00 	sts	0x0038, r24
   //8 bit timer 0 initialization, used for the 20mS tock.
    outp((1<<TOIE0) | (1<<TOIE2), TIMSK);   //enable timer 0 and timer 2 overflow
    1d3a:	81 e4       	ldi	r24, 0x41	; 65
    1d3c:	80 93 59 00 	sts	0x0059, r24
    outp(0,TCNT0);             // reset TCNT0
    1d40:	10 92 52 00 	sts	0x0052, r1
    outp(1,TCCR0);             // count with cpu clock/1024
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	80 93 53 00 	sts	0x0053, r24
	
	//ADC input
	ADMUX=0x00;
    1d4a:	10 92 27 00 	sts	0x0027, r1
	ADCSRA=0x86;
    1d4e:	86 e8       	ldi	r24, 0x86	; 134
    1d50:	80 93 26 00 	sts	0x0026, r24
	SFIOR&=0x00; 	
    1d54:	80 91 50 00 	lds	r24, 0x0050
    1d58:	10 92 50 00 	sts	0x0050, r1


	//8 bit timer 1 initialization, used for the 32.768KHz crystal (Real Time Clock)
	outp((1<<CS20) | (1<<CS22), TCCR2);	//divide by 128 for timer counter 2
    1d5c:	85 e0       	ldi	r24, 0x05	; 5
    1d5e:	80 93 45 00 	sts	0x0045, r24
    ASSR = (1<<AS2);        // select asynchronous operation of Timer2
    1d62:	88 e0       	ldi	r24, 0x08	; 8
    1d64:	80 93 42 00 	sts	0x0042, r24
    while((ASSR & 0x01) | (ASSR & 0x04));       // wait for TCN2UB and TCR2UB to be cleared
    1d68:	80 91 42 00 	lds	r24, 0x0042
    1d6c:	99 27       	eor	r25, r25
    1d6e:	9c 01       	movw	r18, r24
    1d70:	21 70       	andi	r18, 0x01	; 1
    1d72:	30 70       	andi	r19, 0x00	; 0
    1d74:	80 91 42 00 	lds	r24, 0x0042
    1d78:	99 27       	eor	r25, r25
    1d7a:	84 70       	andi	r24, 0x04	; 4
    1d7c:	90 70       	andi	r25, 0x00	; 0
    1d7e:	82 2b       	or	r24, r18
    1d80:	93 2b       	or	r25, r19
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	09 f0       	breq	.+2      	; 0x1d88
    1d86:	f0 cf       	rjmp	.-32     	; 0x1d68
	
    //external interrupt 0 initialization, for pulse from the eagle counting unit
	/*
	outp((1<<INT0), GIMSK);    // enable external int0
	outp((1<<ISC00)|(1<<ISC01), MCUCR);    // rising egde on int0 generates the interrupt
	outp((1<<ISC00), MCUCR);    //a change on int0 generates an interrupt
	*/
    //set OC1A pin as output, required for output toggling
    //DDRD = _BV(PD5);

    //enable 8 bit PWM, select inverted PWM
    //TCCR1A =  _BV(PWM10) | _BV(COM1A1) | _BV(COM1A0);
    
    // timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
    // PWM frequency will be MCU clock / 8 / 512, e.g. with 4Mhz Crystal 977 Hz.
//    TCCR1B = _BV(CS11) | _BV(CTC1);
	//if (eeprom_rb(EEKey1)!=defKey1 || eeprom_rb(EEKey2)!=defKey2 || eeprom_rb(EEKey3)!=defKey3)
	//{


/*
	intAlarmMin=eeprom_read_word(&MyEepVar);
	if(intAlarmMin>59)
	{
		intAlarmMin=1;
	}
	intAlarmHour=eeprom_read_word(&defAlarmHour);
	if(intAlarmHour>23)
	{
		intAlarmHour=6;
	}
*/
//	OCR1AL = 50;

//Get values stored in EEPROM
	if(eeprom_read_word((uint16_t*)&EEKey) != 789)		//have we written to the EEPROM before?
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 f3 1d 	call	0x3be6
    1d90:	23 e0       	ldi	r18, 0x03	; 3
    1d92:	85 31       	cpi	r24, 0x15	; 21
    1d94:	92 07       	cpc	r25, r18
    1d96:	11 f1       	breq	.+68     	; 0x1ddc
	{
		eeprom_write_word((uint16_t*)&EEKey,789);	//set the key value to let us know that we have written to EEPROM before
    1d98:	65 e1       	ldi	r22, 0x15	; 21
    1d9a:	73 e0       	ldi	r23, 0x03	; 3
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 0b 1e 	call	0x3c16
		eeprom_write_word((uint16_t*)&EEMinute,6);	//set all of the default EEPROM values
    1da4:	66 e0       	ldi	r22, 0x06	; 6
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 0b 1e 	call	0x3c16
		eeprom_write_word((uint16_t*)&EEHour,6);
    1db0:	66 e0       	ldi	r22, 0x06	; 6
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 0b 1e 	call	0x3c16
		eeprom_write_word((uint16_t*)&EEPhotoTriggerValue,600);
    1dbc:	68 e5       	ldi	r22, 0x58	; 88
    1dbe:	72 e0       	ldi	r23, 0x02	; 2
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 0b 1e 	call	0x3c16
		eeprom_write_byte((u08*)&EEBacklightOnHour,6);
    1dc8:	66 e0       	ldi	r22, 0x06	; 6
    1dca:	88 e0       	ldi	r24, 0x08	; 8
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 00 1e 	call	0x3c00
		eeprom_write_byte((u08*)&EEBacklightOffHour,22);	
    1dd2:	66 e1       	ldi	r22, 0x16	; 22
    1dd4:	89 e0       	ldi	r24, 0x09	; 9
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 00 1e 	call	0x3c00
	}
	intAlarmMin = eeprom_read_word((uint16_t*)&EEMinute);	//Get the Alarm minute out of EERPOM
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 f3 1d 	call	0x3be6
    1de4:	90 93 83 00 	sts	0x0083, r25
    1de8:	80 93 82 00 	sts	0x0082, r24
	if(intAlarmMin>59)		//Is the Alarm Minute an illegal value?
    1dec:	80 91 82 00 	lds	r24, 0x0082
    1df0:	90 91 83 00 	lds	r25, 0x0083
    1df4:	8c 33       	cpi	r24, 0x3C	; 60
    1df6:	91 05       	cpc	r25, r1
    1df8:	30 f0       	brcs	.+12     	; 0x1e06
	{
		intAlarmMin=5;	//yes, then reset the alarm minute to a legal value
    1dfa:	85 e0       	ldi	r24, 0x05	; 5
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	90 93 83 00 	sts	0x0083, r25
    1e02:	80 93 82 00 	sts	0x0082, r24
	}
	intAlarmHour = eeprom_read_word((uint16_t*)&EEHour);	//get the alarm hour out of EEPROM
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 f3 1d 	call	0x3be6
    1e0e:	90 93 87 00 	sts	0x0087, r25
    1e12:	80 93 86 00 	sts	0x0086, r24
	if(intAlarmHour>23)		//is the alarm hour an illegal value?
    1e16:	80 91 86 00 	lds	r24, 0x0086
    1e1a:	90 91 87 00 	lds	r25, 0x0087
    1e1e:	88 31       	cpi	r24, 0x18	; 24
    1e20:	91 05       	cpc	r25, r1
    1e22:	30 f0       	brcs	.+12     	; 0x1e30
	{
		intAlarmHour=5;		//yes, then reset the alarm hour to a legal value
    1e24:	85 e0       	ldi	r24, 0x05	; 5
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 87 00 	sts	0x0087, r25
    1e2c:	80 93 86 00 	sts	0x0086, r24
	}
	intUserPhotoTriggerValue = eeprom_read_word((uint16_t*)&EEPhotoTriggerValue);	//get the alarm hour out of EEPROM
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 f3 1d 	call	0x3be6
    1e38:	90 93 89 00 	sts	0x0089, r25
    1e3c:	80 93 88 00 	sts	0x0088, r24
	if(intUserPhotoTriggerValue>1000)		//is the intUserPhotoTriggerValue an illegal value?
    1e40:	80 91 88 00 	lds	r24, 0x0088
    1e44:	90 91 89 00 	lds	r25, 0x0089
    1e48:	23 e0       	ldi	r18, 0x03	; 3
    1e4a:	89 3e       	cpi	r24, 0xE9	; 233
    1e4c:	92 07       	cpc	r25, r18
    1e4e:	30 f0       	brcs	.+12     	; 0x1e5c
	{
		intUserPhotoTriggerValue=500;		//yes, then reset the intUserPhotoTriggerValue to a legal value
    1e50:	84 ef       	ldi	r24, 0xF4	; 244
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	90 93 89 00 	sts	0x0089, r25
    1e58:	80 93 88 00 	sts	0x0088, r24
	}
	uBacklightOnHour = eeprom_read_byte((u08*)&EEBacklightOnHour);		//get the backlight on time out of EERPOM
    1e5c:	88 e0       	ldi	r24, 0x08	; 8
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 eb 1d 	call	0x3bd6
    1e64:	80 93 84 00 	sts	0x0084, r24
	if(uBacklightOnHour>23)		//is the backlight on hour an illegal value?
    1e68:	80 91 84 00 	lds	r24, 0x0084
    1e6c:	88 31       	cpi	r24, 0x18	; 24
    1e6e:	18 f0       	brcs	.+6      	; 0x1e76
	{
		uBacklightOnHour=6;		//yes, then reset the ram value to a legal value
    1e70:	86 e0       	ldi	r24, 0x06	; 6
    1e72:	80 93 84 00 	sts	0x0084, r24
	}
	uBacklightOffHour = eeprom_read_byte((u08*)&EEBacklightOffHour);	//get the backlight off time out of EERPOM
    1e76:	89 e0       	ldi	r24, 0x09	; 9
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 eb 1d 	call	0x3bd6
    1e7e:	80 93 81 00 	sts	0x0081, r24
	if(uBacklightOffHour>23)	//is the backlight off hour an illegal value?
    1e82:	80 91 81 00 	lds	r24, 0x0081
    1e86:	88 31       	cpi	r24, 0x18	; 24
    1e88:	18 f0       	brcs	.+6      	; 0x1e90
	{
		uBacklightOffHour=22;	//yes then reset the ram value to a legal value
    1e8a:	86 e1       	ldi	r24, 0x16	; 22
    1e8c:	80 93 81 00 	sts	0x0081, r24
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret

00001e96 <__vector_11>:
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW0)
{
    1e96:	1f 92       	push	r1
    1e98:	0f 92       	push	r0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	8f 93       	push	r24
    1ea2:	9f 93       	push	r25
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
	if (uTock > 0)
    1eac:	80 91 60 00 	lds	r24, 0x0060
    1eb0:	90 91 61 00 	lds	r25, 0x0061
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	49 f0       	breq	.+18     	; 0x1eca
	{
      uTock--;      //This counts down to a 20ms tock.  (which is run in the main loop)
    1eb8:	80 91 60 00 	lds	r24, 0x0060
    1ebc:	90 91 61 00 	lds	r25, 0x0061
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	90 93 61 00 	sts	0x0061, r25
    1ec6:	80 93 60 00 	sts	0x0060, r24
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	0f 90       	pop	r0
    1ed8:	1f 90       	pop	r1
    1eda:	18 95       	reti

00001edc <__vector_5>:
	}
}

//----------------------------------------------------------------------------
//Routine:     signal(sig_overflow2)  (timer 2 overflow interrupt)
//
//Function:    signal handler for tcnt2 overflow interrupt
//              happens every second.  This is based upon the 32.768 KHz crystal
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW2)	//timer 2 overflow
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	2f 93       	push	r18
    1ee8:	3f 93       	push	r19
    1eea:	4f 93       	push	r20
    1eec:	5f 93       	push	r21
    1eee:	6f 93       	push	r22
    1ef0:	7f 93       	push	r23
    1ef2:	8f 93       	push	r24
    1ef4:	9f 93       	push	r25
    1ef6:	af 93       	push	r26
    1ef8:	bf 93       	push	r27
    1efa:	ef 93       	push	r30
    1efc:	ff 93       	push	r31
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	if(uState!=60)	//when we are in the "set time" state, don't advance the time
    1f06:	80 91 6c 00 	lds	r24, 0x006C
    1f0a:	8c 33       	cpi	r24, 0x3C	; 60
    1f0c:	09 f4       	brne	.+2      	; 0x1f10
    1f0e:	d8 c0       	rjmp	.+432    	; 0x20c0
	{
		if (++t.intSec==60) //keep track of time, date, month, and year
    1f10:	80 91 75 00 	lds	r24, 0x0075
    1f14:	90 91 76 00 	lds	r25, 0x0076
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	90 93 76 00 	sts	0x0076, r25
    1f1e:	80 93 75 00 	sts	0x0075, r24
    1f22:	8c 33       	cpi	r24, 0x3C	; 60
    1f24:	91 05       	cpc	r25, r1
    1f26:	09 f0       	breq	.+2      	; 0x1f2a
    1f28:	cb c0       	rjmp	.+406    	; 0x20c0
		{
			t.intSec=0;
    1f2a:	10 92 76 00 	sts	0x0076, r1
    1f2e:	10 92 75 00 	sts	0x0075, r1
			if (++t.intMin==60)
    1f32:	80 91 77 00 	lds	r24, 0x0077
    1f36:	90 91 78 00 	lds	r25, 0x0078
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	90 93 78 00 	sts	0x0078, r25
    1f40:	80 93 77 00 	sts	0x0077, r24
    1f44:	8c 33       	cpi	r24, 0x3C	; 60
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f0       	breq	.+2      	; 0x1f4c
    1f4a:	ba c0       	rjmp	.+372    	; 0x20c0
			{
				t.intMin=0;
    1f4c:	10 92 78 00 	sts	0x0078, r1
    1f50:	10 92 77 00 	sts	0x0077, r1
				if (++t.intHour==24)
    1f54:	80 91 79 00 	lds	r24, 0x0079
    1f58:	90 91 7a 00 	lds	r25, 0x007A
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	90 93 7a 00 	sts	0x007A, r25
    1f62:	80 93 79 00 	sts	0x0079, r24
    1f66:	88 31       	cpi	r24, 0x18	; 24
    1f68:	91 05       	cpc	r25, r1
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e
    1f6c:	a9 c0       	rjmp	.+338    	; 0x20c0
				{
					t.intHour=0;
    1f6e:	10 92 7a 00 	sts	0x007A, r1
    1f72:	10 92 79 00 	sts	0x0079, r1
					if (++t.intDay==32)
    1f76:	80 91 7b 00 	lds	r24, 0x007B
    1f7a:	90 91 7c 00 	lds	r25, 0x007C
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	90 93 7c 00 	sts	0x007C, r25
    1f84:	80 93 7b 00 	sts	0x007B, r24
    1f88:	80 32       	cpi	r24, 0x20	; 32
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	81 f4       	brne	.+32     	; 0x1fae
					{
						t.intMonth++;
    1f8e:	80 91 7d 00 	lds	r24, 0x007D
    1f92:	90 91 7e 00 	lds	r25, 0x007E
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	90 93 7e 00 	sts	0x007E, r25
    1f9c:	80 93 7d 00 	sts	0x007D, r24
						t.intDay=1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	90 93 7c 00 	sts	0x007C, r25
    1fa8:	80 93 7b 00 	sts	0x007B, r24
    1fac:	73 c0       	rjmp	.+230    	; 0x2094
					}
					else if (t.intDay==31)
    1fae:	80 91 7b 00 	lds	r24, 0x007B
    1fb2:	90 91 7c 00 	lds	r25, 0x007C
    1fb6:	8f 31       	cpi	r24, 0x1F	; 31
    1fb8:	91 05       	cpc	r25, r1
    1fba:	69 f5       	brne	.+90     	; 0x2016
					{
						if ((t.intMonth==4) || (t.intMonth==6) || (t.intMonth==9) || (t.intMonth==11))
    1fbc:	80 91 7d 00 	lds	r24, 0x007D
    1fc0:	90 91 7e 00 	lds	r25, 0x007E
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	b1 f0       	breq	.+44     	; 0x1ff6
    1fca:	80 91 7d 00 	lds	r24, 0x007D
    1fce:	90 91 7e 00 	lds	r25, 0x007E
    1fd2:	86 30       	cpi	r24, 0x06	; 6
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	79 f0       	breq	.+30     	; 0x1ff6
    1fd8:	80 91 7d 00 	lds	r24, 0x007D
    1fdc:	90 91 7e 00 	lds	r25, 0x007E
    1fe0:	89 30       	cpi	r24, 0x09	; 9
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	41 f0       	breq	.+16     	; 0x1ff6
    1fe6:	80 91 7d 00 	lds	r24, 0x007D
    1fea:	90 91 7e 00 	lds	r25, 0x007E
    1fee:	8b 30       	cpi	r24, 0x0B	; 11
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6
    1ff4:	4f c0       	rjmp	.+158    	; 0x2094
						{
							t.intMonth++;
    1ff6:	80 91 7d 00 	lds	r24, 0x007D
    1ffa:	90 91 7e 00 	lds	r25, 0x007E
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	90 93 7e 00 	sts	0x007E, r25
    2004:	80 93 7d 00 	sts	0x007D, r24
							t.intDay=1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	90 93 7c 00 	sts	0x007C, r25
    2010:	80 93 7b 00 	sts	0x007B, r24
    2014:	3f c0       	rjmp	.+126    	; 0x2094
						}
					}
					else if (t.intDay==30)
    2016:	80 91 7b 00 	lds	r24, 0x007B
    201a:	90 91 7c 00 	lds	r25, 0x007C
    201e:	8e 31       	cpi	r24, 0x1E	; 30
    2020:	91 05       	cpc	r25, r1
    2022:	b9 f4       	brne	.+46     	; 0x2052
					{
						if(t.intMonth==2)
    2024:	80 91 7d 00 	lds	r24, 0x007D
    2028:	90 91 7e 00 	lds	r25, 0x007E
    202c:	82 30       	cpi	r24, 0x02	; 2
    202e:	91 05       	cpc	r25, r1
    2030:	89 f5       	brne	.+98     	; 0x2094
						{
							t.intMonth++;
    2032:	80 91 7d 00 	lds	r24, 0x007D
    2036:	90 91 7e 00 	lds	r25, 0x007E
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	90 93 7e 00 	sts	0x007E, r25
    2040:	80 93 7d 00 	sts	0x007D, r24
							t.intDay=1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	90 93 7c 00 	sts	0x007C, r25
    204c:	80 93 7b 00 	sts	0x007B, r24
    2050:	21 c0       	rjmp	.+66     	; 0x2094
						}
					}
					else if (t.intDay==29)
    2052:	80 91 7b 00 	lds	r24, 0x007B
    2056:	90 91 7c 00 	lds	r25, 0x007C
    205a:	8d 31       	cpi	r24, 0x1D	; 29
    205c:	91 05       	cpc	r25, r1
    205e:	d1 f4       	brne	.+52     	; 0x2094
					{
						if((t.intMonth==2) && (not_leap()))
    2060:	80 91 7d 00 	lds	r24, 0x007D
    2064:	90 91 7e 00 	lds	r25, 0x007E
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	91 05       	cpc	r25, r1
    206c:	99 f4       	brne	.+38     	; 0x2094
    206e:	0e 94 b7 10 	call	0x216e
    2072:	88 23       	and	r24, r24
    2074:	79 f0       	breq	.+30     	; 0x2094
						{
							t.intMonth++;
    2076:	80 91 7d 00 	lds	r24, 0x007D
    207a:	90 91 7e 00 	lds	r25, 0x007E
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	90 93 7e 00 	sts	0x007E, r25
    2084:	80 93 7d 00 	sts	0x007D, r24
							t.intDay=1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	90 93 7c 00 	sts	0x007C, r25
    2090:	80 93 7b 00 	sts	0x007B, r24
						}
					}
					if (t.intMonth==13)
    2094:	80 91 7d 00 	lds	r24, 0x007D
    2098:	90 91 7e 00 	lds	r25, 0x007E
    209c:	8d 30       	cpi	r24, 0x0D	; 13
    209e:	91 05       	cpc	r25, r1
    20a0:	79 f4       	brne	.+30     	; 0x20c0
					{
						t.intMonth=1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	90 93 7e 00 	sts	0x007E, r25
    20aa:	80 93 7d 00 	sts	0x007D, r24
						t.intYear++;
    20ae:	80 91 7f 00 	lds	r24, 0x007F
    20b2:	90 91 80 00 	lds	r25, 0x0080
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	90 93 80 00 	sts	0x0080, r25
    20bc:	80 93 7f 00 	sts	0x007F, r24
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	ff 91       	pop	r31
    20c6:	ef 91       	pop	r30
    20c8:	bf 91       	pop	r27
    20ca:	af 91       	pop	r26
    20cc:	9f 91       	pop	r25
    20ce:	8f 91       	pop	r24
    20d0:	7f 91       	pop	r23
    20d2:	6f 91       	pop	r22
    20d4:	5f 91       	pop	r21
    20d6:	4f 91       	pop	r20
    20d8:	3f 91       	pop	r19
    20da:	2f 91       	pop	r18
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	0f 90       	pop	r0
    20e2:	1f 90       	pop	r1
    20e4:	18 95       	reti

000020e6 <__vector_13>:
					}
				}
			}
		}
	}	
}


SIGNAL(SIG_UART_RECV)      
/* signal handler for receive complete interrupt */
{
    20e6:	1f 92       	push	r1
    20e8:	0f 92       	push	r0
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	0f 92       	push	r0
    20ee:	11 24       	eor	r1, r1
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <__vector_1>:
    //register unsigned char inByte;

    //inByte = inp(UDR);        /* read byte for UART data buffer */
}

//----------------------------------------------------------------------------
//Routine:		SIGNAL(SIG_INTERRUPT0)	(signal handler for external interrupt int0)
//
//Function:		
//             
//
//Varibles passed:
//       none
//Returns:
//       integer (no idea where this integer is returned to)
SIGNAL(SIG_INTERRUPT0)     
{
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	0f 90       	pop	r0
    2122:	1f 90       	pop	r1
    2124:	18 95       	reti

00002126 <main>:
}


//----------------------------------------------------------------------------
//Routine:     main (the main loop of the program)
//
//Function:    This is where to program will exicute until an interrupt happens or
//              someone yanks the power plug.
//
//Varibles passed:
//       none
//Returns:
//       integer (no idea where this integer is returned to)
//----------------------------------------------------------------------------
// Main loop
int main( void )
{
    2126:	cf e5       	ldi	r28, 0x5F	; 95
    2128:	d8 e0       	ldi	r29, 0x08	; 8
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	cd bf       	out	0x3d, r28	; 61
	wdt_reset();	//reset the watchdog
    212e:	a8 95       	wdr
	uCinit();		//go through the initialization process for the microcontroller
    2130:	0e 94 7f 0e 	call	0x1cfe
	InitLCD();		//initialize the graphical LCD, lcd.h file
    2134:	0e 94 83 1a 	call	0x3506
	sei();        // enable interrupts
    2138:	78 94       	sei
	sbi(PORTD,defBacklightOn);	//turn on the backlight
    213a:	80 91 32 00 	lds	r24, 0x0032
    213e:	80 68       	ori	r24, 0x80	; 128
    2140:	80 93 32 00 	sts	0x0032, r24
	t.intDay=1;		//It is the first day of the month on powerup
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	90 93 7c 00 	sts	0x007C, r25
    214c:	80 93 7b 00 	sts	0x007B, r24
	t.intMonth=1;	//It is January on powerup
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	90 93 7e 00 	sts	0x007E, r25
    2158:	80 93 7d 00 	sts	0x007D, r24
	t.intYear=5;		//start out at 2005 (the t.year variable only keeps track of the last 3 digits)
    215c:	85 e0       	ldi	r24, 0x05	; 5
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	90 93 80 00 	sts	0x0080, r25
    2164:	80 93 7f 00 	sts	0x007F, r24
	while(1)       // go into an infinite loop here
	{
        SrvTock();        //go to the tock every 20ms
    2168:	0e 94 4c 11 	call	0x2298
    216c:	fd cf       	rjmp	.-6      	; 0x2168

0000216e <not_leap>:
	}
	return 0; 
}

//----------------------------------------------------------------------------
//Routine:       not_leap
//
//Function:      This routine is used for determining if it is not a leap year.
//
//Varibles passed:
//       none
//Returns:
//       returns a true if it is not a leap year
//		 returns a false if it is a leap year
//----------------------------------------------------------------------------
unsigned char not_leap(void) //check for leap year
{
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	22 97       	sbiw	r28, 0x02	; 2
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
	if (!(t.intYear%100))
    2182:	80 91 7f 00 	lds	r24, 0x007F
    2186:	90 91 80 00 	lds	r25, 0x0080
    218a:	24 e6       	ldi	r18, 0x64	; 100
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	b9 01       	movw	r22, r18
    2190:	0e 94 24 1e 	call	0x3c48
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	69 f4       	brne	.+26     	; 0x21b2
		return (char)(t.intYear%400);
    2198:	80 91 7f 00 	lds	r24, 0x007F
    219c:	90 91 80 00 	lds	r25, 0x0080
    21a0:	20 e9       	ldi	r18, 0x90	; 144
    21a2:	31 e0       	ldi	r19, 0x01	; 1
    21a4:	b9 01       	movw	r22, r18
    21a6:	0e 94 24 1e 	call	0x3c48
    21aa:	99 27       	eor	r25, r25
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4
	else
		return (char)(t.intYear%4);
    21b2:	80 91 7f 00 	lds	r24, 0x007F
    21b6:	90 91 80 00 	lds	r25, 0x0080
    21ba:	83 70       	andi	r24, 0x03	; 3
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	99 27       	eor	r25, r25
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	9a 83       	std	Y+2, r25	; 0x02
}
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	22 96       	adiw	r28, 0x02	; 2
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <integerToArray>:

//----------------------------------------------------------------------------
//Routine:       my_itoa  (my interger to array conversion)
//
//Function:      Takes an integer and moves it into an array.
//                Otherwise known as binary to BCD conversion in assembly.
//                This routine was copied off of a newsgroup.
//                The binary value is passed to the routine and the destination
//                is a string called str
//
//Varibles passed:
//       arg:  a character to be converted to BCD
//Returns:
//       none
//----------------------------------------------------------------------------
void integerToArray(unsigned int intNumToString)
{
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	28 97       	sbiw	r28, 0x08	; 8
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    int minus = 0;
    21f2:	1b 82       	std	Y+3, r1	; 0x03
    21f4:	1c 82       	std	Y+4, r1	; 0x04
    int d;
    char *ptr;

    strcpy (str,"0000");
    21f6:	67 e6       	ldi	r22, 0x67	; 103
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	8c e8       	ldi	r24, 0x8C	; 140
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 1d 1e 	call	0x3c3a
    ptr = &str[sizeof(str) -1];
    2202:	80 e9       	ldi	r24, 0x90	; 144
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	8f 83       	std	Y+7, r24	; 0x07
    2208:	98 87       	std	Y+8, r25	; 0x08
    *ptr-- = '\0';
    220a:	de 01       	movw	r26, r28
    220c:	17 96       	adiw	r26, 0x07	; 7
    220e:	8d 91       	ld	r24, X+
    2210:	9c 91       	ld	r25, X
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	fc 01       	movw	r30, r24
    2216:	10 82       	st	Z, r1
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	8d 93       	st	X+, r24
    221c:	9c 93       	st	X, r25
    221e:	11 97       	sbiw	r26, 0x01	; 1
    if (intNumToString < 0)
    {
          minus = 1; intNumToString = -intNumToString;
    }
    while (intNumToString > 0)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	09 f1       	breq	.+66     	; 0x226a
    {
         d = intNumToString % 10;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	2a e0       	ldi	r18, 0x0A	; 10
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	b9 01       	movw	r22, r18
    2232:	0e 94 24 1e 	call	0x3c48
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	9e 83       	std	Y+6, r25	; 0x06
         *ptr-- = d + '0';
    223a:	de 01       	movw	r26, r28
    223c:	17 96       	adiw	r26, 0x07	; 7
    223e:	8d 91       	ld	r24, X+
    2240:	9c 91       	ld	r25, X
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	2d 81       	ldd	r18, Y+5	; 0x05
    2246:	20 5d       	subi	r18, 0xD0	; 208
    2248:	fc 01       	movw	r30, r24
    224a:	20 83       	st	Z, r18
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	8d 93       	st	X+, r24
    2250:	9c 93       	st	X, r25
    2252:	11 97       	sbiw	r26, 0x01	; 1
         intNumToString /= 10;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	2a e0       	ldi	r18, 0x0A	; 10
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	b9 01       	movw	r22, r18
    225e:	0e 94 24 1e 	call	0x3c48
    2262:	cb 01       	movw	r24, r22
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	db cf       	rjmp	.-74     	; 0x2220
     }
    if (minus)
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	29 f0       	breq	.+10     	; 0x227c
        *ptr = '-';
    2272:	ef 81       	ldd	r30, Y+7	; 0x07
    2274:	f8 85       	ldd	r31, Y+8	; 0x08
    2276:	8d e2       	ldi	r24, 0x2D	; 45
    2278:	80 83       	st	Z, r24
    227a:	05 c0       	rjmp	.+10     	; 0x2286
    else
        ptr++;
    227c:	8f 81       	ldd	r24, Y+7	; 0x07
    227e:	98 85       	ldd	r25, Y+8	; 0x08
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	28 96       	adiw	r28, 0x08	; 8
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	08 95       	ret

00002298 <SrvTock>:
}


//----------------------------------------------------------------------------
//Routine:       SrvTock  (Service the tock)
//
//Function:      Exicute the tock every 20mS from the main loop.
//
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void SrvTock(void)
{
    2298:	0f 93       	push	r16
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	64 97       	sbiw	r28, 0x14	; 20
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    //unsigned char uCanteen;
	//bool boolNewData=false;

    if (uTock == 0)
    22ae:	80 91 60 00 	lds	r24, 0x0060
    22b2:	90 91 61 00 	lds	r25, 0x0061
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	11 f0       	breq	.+4      	; 0x22be
    22ba:	0c 94 79 1a 	jmp	0x34f2
    {
        uTock = defTock;   //reload the Tock (20mS) timer
    22be:	87 e3       	ldi	r24, 0x37	; 55
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	90 93 61 00 	sts	0x0061, r25
    22c6:	80 93 60 00 	sts	0x0060, r24
        if(uBtnUpTmr!=0)     //the debounce timer for Menu Button 1
    22ca:	80 91 6d 00 	lds	r24, 0x006D
    22ce:	88 23       	and	r24, r24
    22d0:	29 f0       	breq	.+10     	; 0x22dc
        {
            uBtnUpTmr--;     //decrement the menu button 1 debounce timer
    22d2:	80 91 6d 00 	lds	r24, 0x006D
    22d6:	81 50       	subi	r24, 0x01	; 1
    22d8:	80 93 6d 00 	sts	0x006D, r24
        }
        if(uBtnDwnTmr!=0)     //the debounce timer for Menu Button 2
    22dc:	80 91 6e 00 	lds	r24, 0x006E
    22e0:	88 23       	and	r24, r24
    22e2:	29 f0       	breq	.+10     	; 0x22ee
        {
            uBtnDwnTmr--;     //decrement the menu button 2 debounce timer
    22e4:	80 91 6e 00 	lds	r24, 0x006E
    22e8:	81 50       	subi	r24, 0x01	; 1
    22ea:	80 93 6e 00 	sts	0x006E, r24
        }
        if(uBtnEnterTmr!=0)     //the debounce timer for Menu Button 3
    22ee:	80 91 6f 00 	lds	r24, 0x006F
    22f2:	88 23       	and	r24, r24
    22f4:	29 f0       	breq	.+10     	; 0x2300
        {
            uBtnEnterTmr--;     //decrement the menu button 3 debounce timer
    22f6:	80 91 6f 00 	lds	r24, 0x006F
    22fa:	81 50       	subi	r24, 0x01	; 1
    22fc:	80 93 6f 00 	sts	0x006F, r24
        }

        switch (uState)
    2300:	80 91 6c 00 	lds	r24, 0x006C
    2304:	28 2f       	mov	r18, r24
    2306:	33 27       	eor	r19, r19
    2308:	2b 8b       	std	Y+19, r18	; 0x13
    230a:	3c 8b       	std	Y+20, r19	; 0x14
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	8c 33       	cpi	r24, 0x3C	; 60
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318
    2316:	ed c2       	rjmp	.+1498   	; 0x28f2
    2318:	2b 89       	ldd	r18, Y+19	; 0x13
    231a:	3c 89       	ldd	r19, Y+20	; 0x14
    231c:	2d 33       	cpi	r18, 0x3D	; 61
    231e:	31 05       	cpc	r19, r1
    2320:	cc f4       	brge	.+50     	; 0x2354
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e
    232c:	4f c0       	rjmp	.+158    	; 0x23cc
    232e:	2b 89       	ldd	r18, Y+19	; 0x13
    2330:	3c 89       	ldd	r19, Y+20	; 0x14
    2332:	23 30       	cpi	r18, 0x03	; 3
    2334:	31 05       	cpc	r19, r1
    2336:	34 f4       	brge	.+12     	; 0x2344
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	9c 89       	ldd	r25, Y+20	; 0x14
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	29 f1       	breq	.+74     	; 0x238a
    2340:	0c 94 79 1a 	jmp	0x34f2
    2344:	2b 89       	ldd	r18, Y+19	; 0x13
    2346:	3c 89       	ldd	r19, Y+20	; 0x14
    2348:	22 33       	cpi	r18, 0x32	; 50
    234a:	31 05       	cpc	r19, r1
    234c:	09 f4       	brne	.+2      	; 0x2350
    234e:	e6 c1       	rjmp	.+972    	; 0x271c
    2350:	0c 94 79 1a 	jmp	0x34f2
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	8e 33       	cpi	r24, 0x3E	; 62
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360
    235e:	6d c6       	rjmp	.+3290   	; 0x303a
    2360:	2b 89       	ldd	r18, Y+19	; 0x13
    2362:	3c 89       	ldd	r19, Y+20	; 0x14
    2364:	2e 33       	cpi	r18, 0x3E	; 62
    2366:	31 05       	cpc	r19, r1
    2368:	0c f4       	brge	.+2      	; 0x236c
    236a:	2a c5       	rjmp	.+2644   	; 0x2dc0
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	8f 33       	cpi	r24, 0x3F	; 63
    2372:	91 05       	cpc	r25, r1
    2374:	09 f4       	brne	.+2      	; 0x2378
    2376:	5d c7       	rjmp	.+3770   	; 0x3232
    2378:	2b 89       	ldd	r18, Y+19	; 0x13
    237a:	3c 89       	ldd	r19, Y+20	; 0x14
    237c:	20 34       	cpi	r18, 0x40	; 64
    237e:	31 05       	cpc	r19, r1
    2380:	11 f4       	brne	.+4      	; 0x2386
    2382:	0c 94 20 1a 	jmp	0x3440
    2386:	0c 94 79 1a 	jmp	0x34f2
        {
            case 0:  //Does the current state match state 0?
                if(uTmrState==200) 
    238a:	80 91 62 00 	lds	r24, 0x0062
    238e:	88 3c       	cpi	r24, 0xC8	; 200
    2390:	11 f4       	brne	.+4      	; 0x2396
                {
					stop_image();		//write the stop image
    2392:	0e 94 50 0b 	call	0x16a0
				}
                if(uTmrState==100) 
    2396:	80 91 62 00 	lds	r24, 0x0062
    239a:	84 36       	cpi	r24, 0x64	; 100
    239c:	11 f4       	brne	.+4      	; 0x23a2
                {
					kustom_image();		//write the K((( logo to the screen
    239e:	0e 94 0e 0b 	call	0x161c
				}
                uTmrState--;
    23a2:	80 91 62 00 	lds	r24, 0x0062
    23a6:	81 50       	subi	r24, 0x01	; 1
    23a8:	80 93 62 00 	sts	0x0062, r24
                
                if(uTmrState==0)
    23ac:	80 91 62 00 	lds	r24, 0x0062
    23b0:	88 23       	and	r24, r24
    23b2:	11 f0       	breq	.+4      	; 0x23b8
    23b4:	0c 94 79 1a 	jmp	0x34f2
                {
					clear_display();	//clear the whole display
    23b8:	0e 94 00 0a 	call	0x1400
					uTmrState=1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	80 93 62 00 	sts	0x0062, r24
					uState=2;
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	80 93 6c 00 	sts	0x006C, r24
					//write_eagle_display();		//This writes a  big 1 through 9 to the display
                }
            break;
    23c8:	0c 94 79 1a 	jmp	0x34f2
			
			case 2:		//This shows the main clock display
                if(uTmrState==0)
    23cc:	80 91 62 00 	lds	r24, 0x0062
    23d0:	88 23       	and	r24, r24
    23d2:	09 f0       	breq	.+2      	; 0x23d6
    23d4:	ea c0       	rjmp	.+468    	; 0x25aa
                {
					//uTmrState = 255;	//Go in here every (.02)(255) = 5.1 seconds
					if(boolPowerupBlink==true)
    23d6:	80 91 66 00 	lds	r24, 0x0066
    23da:	99 27       	eor	r25, r25
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	49 f4       	brne	.+18     	; 0x23f4
					{
						uTmrState = 75;		//update the display at much higher rate when the time has not been set
    23e2:	8b e4       	ldi	r24, 0x4B	; 75
    23e4:	80 93 62 00 	sts	0x0062, r24
						sbi(defPORTD,defBacklightOn);	//always have the backlight on when we are  in the powerup flashing
    23e8:	80 91 32 00 	lds	r24, 0x0032
    23ec:	80 68       	ori	r24, 0x80	; 128
    23ee:	80 93 32 00 	sts	0x0032, r24
    23f2:	37 c0       	rjmp	.+110    	; 0x2462
					}
					else
					{
						uTmrState = 255;	//Go in here every (.02)(255) = 5.1 seconds, update the display
    23f4:	8f ef       	ldi	r24, 0xFF	; 255
    23f6:	80 93 62 00 	sts	0x0062, r24
						if(uBacklightOffHour<=t.intHour || uBacklightOnHour>t.intHour)	//is it nighttime?
    23fa:	80 91 81 00 	lds	r24, 0x0081
    23fe:	28 2f       	mov	r18, r24
    2400:	33 27       	eor	r19, r19
    2402:	80 91 79 00 	lds	r24, 0x0079
    2406:	90 91 7a 00 	lds	r25, 0x007A
    240a:	82 17       	cp	r24, r18
    240c:	93 07       	cpc	r25, r19
    240e:	60 f4       	brcc	.+24     	; 0x2428
    2410:	80 91 84 00 	lds	r24, 0x0084
    2414:	28 2f       	mov	r18, r24
    2416:	33 27       	eor	r19, r19
    2418:	80 91 79 00 	lds	r24, 0x0079
    241c:	90 91 7a 00 	lds	r25, 0x007A
    2420:	82 17       	cp	r24, r18
    2422:	93 07       	cpc	r25, r19
    2424:	08 f0       	brcs	.+2      	; 0x2428
    2426:	18 c0       	rjmp	.+48     	; 0x2458
						{	
							if(intPhotocellValue>intUserPhotoTriggerValue)	//is it dark out?
    2428:	20 91 73 00 	lds	r18, 0x0073
    242c:	30 91 74 00 	lds	r19, 0x0074
    2430:	80 91 88 00 	lds	r24, 0x0088
    2434:	90 91 89 00 	lds	r25, 0x0089
    2438:	82 17       	cp	r24, r18
    243a:	93 07       	cpc	r25, r19
    243c:	38 f4       	brcc	.+14     	; 0x244c
							{
								cbi(defPORTD,defBacklightOn);	//turn off the backlight
    243e:	8f e7       	ldi	r24, 0x7F	; 127
    2440:	90 91 32 00 	lds	r25, 0x0032
    2444:	89 23       	and	r24, r25
    2446:	80 93 32 00 	sts	0x0032, r24
    244a:	0b c0       	rjmp	.+22     	; 0x2462
							}
							else	//it is not dark out
							{
								sbi(defPORTD,defBacklightOn);	//so, turn on the backlight
    244c:	80 91 32 00 	lds	r24, 0x0032
    2450:	80 68       	ori	r24, 0x80	; 128
    2452:	80 93 32 00 	sts	0x0032, r24
    2456:	05 c0       	rjmp	.+10     	; 0x2462
							}
						}
						else	//it is not nighttime, so turn on the backlight during the day
						{
							sbi(defPORTD,defBacklightOn);	//turn on the backlight
    2458:	80 91 32 00 	lds	r24, 0x0032
    245c:	80 68       	ori	r24, 0x80	; 128
    245e:	80 93 32 00 	sts	0x0032, r24
						}
					}

					if(t.intHour<8)	//This moves the time and date every 8 hours to prevent screen burn in
    2462:	80 91 79 00 	lds	r24, 0x0079
    2466:	90 91 7a 00 	lds	r25, 0x007A
    246a:	88 30       	cpi	r24, 0x08	; 8
    246c:	91 05       	cpc	r25, r1
    246e:	30 f5       	brcc	.+76     	; 0x24bc
					{
						if(uRefreshDisplay!=0)	//when we enter this 8 hour time period, the display needs to be cleared for the new data
    2470:	80 91 72 00 	lds	r24, 0x0072
    2474:	88 23       	and	r24, r24
    2476:	21 f0       	breq	.+8      	; 0x2480
						{
							uRefreshDisplay=0;	//do not go in here again for this 8 hour period
    2478:	10 92 72 00 	sts	0x0072, r1
							clear_display();	//clear the whole display
    247c:	0e 94 00 0a 	call	0x1400
						}
						ShowLargeTime(20,3);		//uStartColumn, uRow
    2480:	63 e0       	ldi	r22, 0x03	; 3
    2482:	84 e1       	ldi	r24, 0x14	; 20
    2484:	0e 94 8d 1c 	call	0x391a
						if(boolAlarmOn==false)	//Is the alarm off?
    2488:	80 91 71 00 	lds	r24, 0x0071
    248c:	88 23       	and	r24, r24
    248e:	41 f4       	brne	.+16     	; 0x24a0
						{
							drawText((unsigned char *)strAlarmOff,40,6,false);	//show alarm on/off state (column, row)
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	46 e0       	ldi	r20, 0x06	; 6
    2494:	68 e2       	ldi	r22, 0x28	; 40
    2496:	85 e6       	ldi	r24, 0x65	; 101
    2498:	94 e0       	ldi	r25, 0x04	; 4
    249a:	0e 94 30 0d 	call	0x1a60
    249e:	07 c0       	rjmp	.+14     	; 0x24ae
						}
						else
						{
							drawText((unsigned char *)strAlarmOn,40,6,false);	//show that the alarm is on (column, row)
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	46 e0       	ldi	r20, 0x06	; 6
    24a4:	68 e2       	ldi	r22, 0x28	; 40
    24a6:	8f e6       	ldi	r24, 0x6F	; 111
    24a8:	94 e0       	ldi	r25, 0x04	; 4
    24aa:	0e 94 30 0d 	call	0x1a60
						}
							
						write_date(30,7,0,false);	//show the month, day, and year (column, row, numbers to blank)
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	67 e0       	ldi	r22, 0x07	; 7
    24b4:	8e e1       	ldi	r24, 0x1E	; 30
    24b6:	0e 94 f9 1a 	call	0x35f2
    24ba:	54 c0       	rjmp	.+168    	; 0x2564
					}
					else if(t.intHour<16)	//This moves the time and date every 8 hours to prevent screen burn in
    24bc:	80 91 79 00 	lds	r24, 0x0079
    24c0:	90 91 7a 00 	lds	r25, 0x007A
    24c4:	80 31       	cpi	r24, 0x10	; 16
    24c6:	91 05       	cpc	r25, r1
    24c8:	38 f5       	brcc	.+78     	; 0x2518
					{
						if(uRefreshDisplay!=1)	//when we enter this 8 hour time period, the display needs to be cleared for the new data
    24ca:	80 91 72 00 	lds	r24, 0x0072
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	29 f0       	breq	.+10     	; 0x24dc
						{
							uRefreshDisplay=1;	//do not go in here again for this 8 hour period
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 72 00 	sts	0x0072, r24
							clear_display();	//clear the whole display
    24d8:	0e 94 00 0a 	call	0x1400
						}
						ShowLargeTime(0,2);		//uStartColumn, uRow
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	0e 94 8d 1c 	call	0x391a
						if(boolAlarmOn==false)	//Is the alarm off?
    24e4:	80 91 71 00 	lds	r24, 0x0071
    24e8:	88 23       	and	r24, r24
    24ea:	41 f4       	brne	.+16     	; 0x24fc
						{
							drawText((unsigned char *)strAlarmOff,0,6,false);	//show alarm on/off state (column, row)
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	46 e0       	ldi	r20, 0x06	; 6
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	85 e6       	ldi	r24, 0x65	; 101
    24f4:	94 e0       	ldi	r25, 0x04	; 4
    24f6:	0e 94 30 0d 	call	0x1a60
    24fa:	07 c0       	rjmp	.+14     	; 0x250a
						}
						else
						{
							drawText((unsigned char *)strAlarmOn,0,6,false);	//show that the alarm is on (column, row)
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	46 e0       	ldi	r20, 0x06	; 6
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	8f e6       	ldi	r24, 0x6F	; 111
    2504:	94 e0       	ldi	r25, 0x04	; 4
    2506:	0e 94 30 0d 	call	0x1a60
						}
						write_date(0,7,0,false);	//show the month, day, and year (column, row, numbers to blank)
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	67 e0       	ldi	r22, 0x07	; 7
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 f9 1a 	call	0x35f2
    2516:	26 c0       	rjmp	.+76     	; 0x2564
					}
					else	//This moves the time and date every 8 hours to prevent screen burn in
					{
						if(uRefreshDisplay!=2)	//when we enter this 8 hour time period, the display needs to be cleared for the new data
    2518:	80 91 72 00 	lds	r24, 0x0072
    251c:	82 30       	cpi	r24, 0x02	; 2
    251e:	29 f0       	breq	.+10     	; 0x252a
						{
							uRefreshDisplay=2;	//do not go in here again for this 8 hour period
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	80 93 72 00 	sts	0x0072, r24
							clear_display();	//clear the whole display
    2526:	0e 94 00 0a 	call	0x1400
						}
						ShowLargeTime(0,0);		//uStartColumn, uRow
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	0e 94 8d 1c 	call	0x391a
						if(boolAlarmOn==false)	//Is the alarm off?
    2532:	80 91 71 00 	lds	r24, 0x0071
    2536:	88 23       	and	r24, r24
    2538:	41 f4       	brne	.+16     	; 0x254a
						{
							drawText((unsigned char *)strAlarmOff,10,6,false);	//show alarm on/off state (column, row)
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	46 e0       	ldi	r20, 0x06	; 6
    253e:	6a e0       	ldi	r22, 0x0A	; 10
    2540:	85 e6       	ldi	r24, 0x65	; 101
    2542:	94 e0       	ldi	r25, 0x04	; 4
    2544:	0e 94 30 0d 	call	0x1a60
    2548:	07 c0       	rjmp	.+14     	; 0x2558
						}
						else
						{
							drawText((unsigned char *)strAlarmOn,10,6,false);	//show that the alarm is on (column, row)
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	46 e0       	ldi	r20, 0x06	; 6
    254e:	6a e0       	ldi	r22, 0x0A	; 10
    2550:	8f e6       	ldi	r24, 0x6F	; 111
    2552:	94 e0       	ldi	r25, 0x04	; 4
    2554:	0e 94 30 0d 	call	0x1a60
						}
						write_date(defTab,7,0,false);	//show the month, day, and year (column, row, numbers to blank)
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	40 e0       	ldi	r20, 0x00	; 0
    255c:	67 e0       	ldi	r22, 0x07	; 7
    255e:	8a e0       	ldi	r24, 0x0A	; 10
    2560:	0e 94 f9 1a 	call	0x35f2
					}
					if((intAlarmHour==t.intHour) && (intAlarmMin==t.intMin) && (boolAlarmOn==true))
    2564:	20 91 79 00 	lds	r18, 0x0079
    2568:	30 91 7a 00 	lds	r19, 0x007A
    256c:	80 91 86 00 	lds	r24, 0x0086
    2570:	90 91 87 00 	lds	r25, 0x0087
    2574:	28 17       	cp	r18, r24
    2576:	39 07       	cpc	r19, r25
    2578:	09 f0       	breq	.+2      	; 0x257c
    257a:	5c c0       	rjmp	.+184    	; 0x2634
    257c:	20 91 77 00 	lds	r18, 0x0077
    2580:	30 91 78 00 	lds	r19, 0x0078
    2584:	80 91 82 00 	lds	r24, 0x0082
    2588:	90 91 83 00 	lds	r25, 0x0083
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	09 f0       	breq	.+2      	; 0x2594
    2592:	50 c0       	rjmp	.+160    	; 0x2634
    2594:	80 91 71 00 	lds	r24, 0x0071
    2598:	99 27       	eor	r25, r25
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	91 05       	cpc	r25, r1
    259e:	09 f0       	breq	.+2      	; 0x25a2
    25a0:	49 c0       	rjmp	.+146    	; 0x2634
					{	//sound the alarm if it is correct hour, minute, and if the alarm is enabled
						boolSoundAlarm=true;	//sound the alarm!!!
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	80 93 70 00 	sts	0x0070, r24
    25a8:	45 c0       	rjmp	.+138    	; 0x2634
					}
                }
				else
				{
	                uTmrState--;	//count down to the next time we can update the LCD display
    25aa:	80 91 62 00 	lds	r24, 0x0062
    25ae:	81 50       	subi	r24, 0x01	; 1
    25b0:	80 93 62 00 	sts	0x0062, r24
					
					if(uTmrState==15)
    25b4:	80 91 62 00 	lds	r24, 0x0062
    25b8:	8f 30       	cpi	r24, 0x0F	; 15
    25ba:	39 f4       	brne	.+14     	; 0x25ca
					{
						ADMUX=0;	//select analog channel 0 for the ADC conversion
    25bc:	10 92 27 00 	sts	0x0027, r1
						ADCSRA|=0x40;	//start the ADC conversion process
    25c0:	80 91 26 00 	lds	r24, 0x0026
    25c4:	80 64       	ori	r24, 0x40	; 64
    25c6:	80 93 26 00 	sts	0x0026, r24
					}
					if(uTmrState==10)
    25ca:	80 91 62 00 	lds	r24, 0x0062
    25ce:	8a 30       	cpi	r24, 0x0A	; 10
    25d0:	81 f4       	brne	.+32     	; 0x25f2
					{
						uTmrGeneral=40;
    25d2:	88 e2       	ldi	r24, 0x28	; 40
    25d4:	80 93 64 00 	sts	0x0064, r24
						ADCSRA|=0x10;	//return the ADC, the 10 bit value is stored in the integer ADC
    25d8:	80 91 26 00 	lds	r24, 0x0026
    25dc:	80 61       	ori	r24, 0x10	; 16
    25de:	80 93 26 00 	sts	0x0026, r24
						intPhotocellValue=ADC;	//get the ADC value and store it
    25e2:	80 91 24 00 	lds	r24, 0x0024
    25e6:	90 91 25 00 	lds	r25, 0x0025
    25ea:	90 93 74 00 	sts	0x0074, r25
    25ee:	80 93 73 00 	sts	0x0073, r24
					}
					if(uTmrState==50 && boolPowerupBlink==true)	//blink the whole display when the unit has just
    25f2:	80 91 62 00 	lds	r24, 0x0062
    25f6:	82 33       	cpi	r24, 0x32	; 50
    25f8:	41 f4       	brne	.+16     	; 0x260a
    25fa:	80 91 66 00 	lds	r24, 0x0066
    25fe:	99 27       	eor	r25, r25
    2600:	81 30       	cpi	r24, 0x01	; 1
    2602:	91 05       	cpc	r25, r1
    2604:	11 f4       	brne	.+4      	; 0x260a
					{		// been powered up and the time has not been set
						clear_display();	//clear the whole display
    2606:	0e 94 00 0a 	call	0x1400
					}
					if((boolSoundAlarm==true) && (uTmrState<15))	//Is it time to turn on the alarm, boolAlarmOn 
    260a:	80 91 70 00 	lds	r24, 0x0070
    260e:	99 27       	eor	r25, r25
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	91 05       	cpc	r25, r1
    2614:	51 f4       	brne	.+20     	; 0x262a
    2616:	80 91 62 00 	lds	r24, 0x0062
    261a:	8f 30       	cpi	r24, 0x0F	; 15
    261c:	30 f4       	brcc	.+12     	; 0x262a
					{							//	for the alarm clock?
						sbi(defPORTD,defAlarmPin);	//take the I/O pin high to sound the alarm
    261e:	80 91 32 00 	lds	r24, 0x0032
    2622:	81 60       	ori	r24, 0x01	; 1
    2624:	80 93 32 00 	sts	0x0032, r24
    2628:	05 c0       	rjmp	.+10     	; 0x2634
					}
					else
					{
						cbi(defPORTD,defAlarmPin);	//this turns off the alarm for a few seconds
    262a:	80 91 32 00 	lds	r24, 0x0032
    262e:	8e 7f       	andi	r24, 0xFE	; 254
    2630:	80 93 32 00 	sts	0x0032, r24
					}
				}
                if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    2634:	80 91 39 00 	lds	r24, 0x0039
    2638:	99 27       	eor	r25, r25
    263a:	96 95       	lsr	r25
    263c:	87 95       	ror	r24
    263e:	96 95       	lsr	r25
    2640:	87 95       	ror	r24
    2642:	81 70       	andi	r24, 0x01	; 1
    2644:	90 70       	andi	r25, 0x00	; 0
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	a9 f4       	brne	.+42     	; 0x2674
    264a:	80 91 6d 00 	lds	r24, 0x006D
    264e:	88 23       	and	r24, r24
    2650:	89 f4       	brne	.+34     	; 0x2674
				{				
					boolSoundAlarm=false;	//when any button is pressed, turn off the alarm
    2652:	10 92 70 00 	sts	0x0070, r1
					boolPowerupBlink=false;		//don't blink the time on powerup anymore
    2656:	10 92 66 00 	sts	0x0066, r1
					cbi(defPORTD,defAlarmPin);	//this turns off the alarm off, the bool value above too
    265a:	80 91 32 00 	lds	r24, 0x0032
    265e:	8e 7f       	andi	r24, 0xFE	; 254
    2660:	80 93 32 00 	sts	0x0032, r24
					sbi(defPORTD,defBacklightOn);	//turn on the backlight, when a button is pressed
    2664:	80 91 32 00 	lds	r24, 0x0032
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	80 93 32 00 	sts	0x0032, r24
					uBtnUpTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    266e:	8e e0       	ldi	r24, 0x0E	; 14
    2670:	80 93 6d 00 	sts	0x006D, r24
				}
                if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    2674:	80 91 39 00 	lds	r24, 0x0039
    2678:	99 27       	eor	r25, r25
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	96 95       	lsr	r25
    2680:	87 95       	ror	r24
    2682:	96 95       	lsr	r25
    2684:	87 95       	ror	r24
    2686:	81 70       	andi	r24, 0x01	; 1
    2688:	90 70       	andi	r25, 0x00	; 0
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	a9 f4       	brne	.+42     	; 0x26b8
    268e:	80 91 6e 00 	lds	r24, 0x006E
    2692:	88 23       	and	r24, r24
    2694:	89 f4       	brne	.+34     	; 0x26b8
				{
					boolSoundAlarm=false;	//when any button is pressed, turn off the alarm
    2696:	10 92 70 00 	sts	0x0070, r1
					boolPowerupBlink=false;		//don't blink the time on powerup anymore
    269a:	10 92 66 00 	sts	0x0066, r1
					cbi(defPORTD,defAlarmPin);	//this turns off the alarm off, the bool value above too
    269e:	80 91 32 00 	lds	r24, 0x0032
    26a2:	8e 7f       	andi	r24, 0xFE	; 254
    26a4:	80 93 32 00 	sts	0x0032, r24
					sbi(defPORTD,defBacklightOn);	//turn on the backlight, when a button is pressed
    26a8:	80 91 32 00 	lds	r24, 0x0032
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	80 93 32 00 	sts	0x0032, r24
					uBtnDwnTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    26b2:	8e e0       	ldi	r24, 0x0E	; 14
    26b4:	80 93 6e 00 	sts	0x006E, r24
				}
                if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    26b8:	80 91 39 00 	lds	r24, 0x0039
    26bc:	99 27       	eor	r25, r25
    26be:	96 95       	lsr	r25
    26c0:	87 95       	ror	r24
    26c2:	81 70       	andi	r24, 0x01	; 1
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	09 f0       	breq	.+2      	; 0x26cc
    26ca:	13 c7       	rjmp	.+3622   	; 0x34f2
    26cc:	80 91 6f 00 	lds	r24, 0x006F
    26d0:	88 23       	and	r24, r24
    26d2:	09 f0       	breq	.+2      	; 0x26d6
    26d4:	0e c7       	rjmp	.+3612   	; 0x34f2
				{
					sbi(defPORTD,defBacklightOn);	//turn on the backlight, when a button is pressed
    26d6:	80 91 32 00 	lds	r24, 0x0032
    26da:	80 68       	ori	r24, 0x80	; 128
    26dc:	80 93 32 00 	sts	0x0032, r24
					boolPowerupBlink=false;		//don't blink the time since the menu has been entered
    26e0:	10 92 66 00 	sts	0x0066, r1
					if(boolSoundAlarm == true)	//is the alarm sounding?
    26e4:	80 91 70 00 	lds	r24, 0x0070
    26e8:	99 27       	eor	r25, r25
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	91 05       	cpc	r25, r1
    26ee:	41 f4       	brne	.+16     	; 0x2700
					{	//the alarm is sounding, turn it off!
						boolSoundAlarm=false;	//when any button is pressed, turn off the alarm
    26f0:	10 92 70 00 	sts	0x0070, r1
						cbi(defPORTD,defAlarmPin);	//this turns off the alarm off, the bool value above too
    26f4:	80 91 32 00 	lds	r24, 0x0032
    26f8:	8e 7f       	andi	r24, 0xFE	; 254
    26fa:	80 93 32 00 	sts	0x0032, r24
    26fe:	09 c0       	rjmp	.+18     	; 0x2712
					}
					else	//the alarm is not sounding
					{
						uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    2700:	8e e0       	ldi	r24, 0x0E	; 14
    2702:	80 93 6f 00 	sts	0x006F, r24
						uState=50;
    2706:	82 e3       	ldi	r24, 0x32	; 50
    2708:	80 93 6c 00 	sts	0x006C, r24
						uSelectedLine=1;	//start out with the alarm set button highlighted
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 93 91 00 	sts	0x0091, r24
					}
                    uTmrState=defStateTm;       //reload the state timer to stay in this state
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	80 93 62 00 	sts	0x0062, r24
				}
			break;
    2718:	0c 94 79 1a 	jmp	0x34f2

			case 50:	//displays the main menu, allows the user to make a selection from the main menu
				if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    271c:	80 91 39 00 	lds	r24, 0x0039
    2720:	99 27       	eor	r25, r25
    2722:	96 95       	lsr	r25
    2724:	87 95       	ror	r24
    2726:	96 95       	lsr	r25
    2728:	87 95       	ror	r24
    272a:	81 70       	andi	r24, 0x01	; 1
    272c:	90 70       	andi	r25, 0x00	; 0
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	91 f4       	brne	.+36     	; 0x2756
    2732:	80 91 6d 00 	lds	r24, 0x006D
    2736:	88 23       	and	r24, r24
    2738:	71 f4       	brne	.+28     	; 0x2756
				{				
					uSelectedLine--;
    273a:	80 91 91 00 	lds	r24, 0x0091
    273e:	81 50       	subi	r24, 0x01	; 1
    2740:	80 93 91 00 	sts	0x0091, r24
					paintMenu((unsigned char *)str50,defState50HighlightMin,defState50HighlightMax);
    2744:	47 e0       	ldi	r20, 0x07	; 7
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	84 ea       	ldi	r24, 0xA4	; 164
    274a:	97 e0       	ldi	r25, 0x07	; 7
    274c:	0e 94 1a 0e 	call	0x1c34
					uBtnUpTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    2750:	8e e0       	ldi	r24, 0x0E	; 14
    2752:	80 93 6d 00 	sts	0x006D, r24
				}
				if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    2756:	80 91 39 00 	lds	r24, 0x0039
    275a:	99 27       	eor	r25, r25
    275c:	96 95       	lsr	r25
    275e:	87 95       	ror	r24
    2760:	96 95       	lsr	r25
    2762:	87 95       	ror	r24
    2764:	96 95       	lsr	r25
    2766:	87 95       	ror	r24
    2768:	81 70       	andi	r24, 0x01	; 1
    276a:	90 70       	andi	r25, 0x00	; 0
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	91 f4       	brne	.+36     	; 0x2794
    2770:	80 91 6e 00 	lds	r24, 0x006E
    2774:	88 23       	and	r24, r24
    2776:	71 f4       	brne	.+28     	; 0x2794
				{
					uSelectedLine++;
    2778:	80 91 91 00 	lds	r24, 0x0091
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	80 93 91 00 	sts	0x0091, r24
					paintMenu((unsigned char *)str50,defState50HighlightMin,defState50HighlightMax);
    2782:	47 e0       	ldi	r20, 0x07	; 7
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	84 ea       	ldi	r24, 0xA4	; 164
    2788:	97 e0       	ldi	r25, 0x07	; 7
    278a:	0e 94 1a 0e 	call	0x1c34
					uBtnDwnTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    278e:	8e e0       	ldi	r24, 0x0E	; 14
    2790:	80 93 6e 00 	sts	0x006E, r24
				}
				if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    2794:	80 91 39 00 	lds	r24, 0x0039
    2798:	99 27       	eor	r25, r25
    279a:	96 95       	lsr	r25
    279c:	87 95       	ror	r24
    279e:	81 70       	andi	r24, 0x01	; 1
    27a0:	90 70       	andi	r25, 0x00	; 0
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	09 f0       	breq	.+2      	; 0x27a8
    27a6:	92 c0       	rjmp	.+292    	; 0x28cc
    27a8:	80 91 6f 00 	lds	r24, 0x006F
    27ac:	88 23       	and	r24, r24
    27ae:	09 f0       	breq	.+2      	; 0x27b2
    27b0:	8d c0       	rjmp	.+282    	; 0x28cc
				{	
			        switch (uSelectedLine)	//the set button was pressed
    27b2:	80 91 91 00 	lds	r24, 0x0091
    27b6:	28 2f       	mov	r18, r24
    27b8:	33 27       	eor	r19, r19
    27ba:	29 83       	std	Y+1, r18	; 0x01
    27bc:	3a 83       	std	Y+2, r19	; 0x02
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	9a 81       	ldd	r25, Y+2	; 0x02
    27c2:	84 30       	cpi	r24, 0x04	; 4
    27c4:	91 05       	cpc	r25, r1
    27c6:	09 f4       	brne	.+2      	; 0x27ca
    27c8:	5e c0       	rjmp	.+188    	; 0x2886
    27ca:	29 81       	ldd	r18, Y+1	; 0x01
    27cc:	3a 81       	ldd	r19, Y+2	; 0x02
    27ce:	25 30       	cpi	r18, 0x05	; 5
    27d0:	31 05       	cpc	r19, r1
    27d2:	84 f4       	brge	.+32     	; 0x27f4
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	91 05       	cpc	r25, r1
    27dc:	81 f1       	breq	.+96     	; 0x283e
    27de:	29 81       	ldd	r18, Y+1	; 0x01
    27e0:	3a 81       	ldd	r19, Y+2	; 0x02
    27e2:	23 30       	cpi	r18, 0x03	; 3
    27e4:	31 05       	cpc	r19, r1
    27e6:	ec f5       	brge	.+122    	; 0x2862
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	91 05       	cpc	r25, r1
    27f0:	a1 f0       	breq	.+40     	; 0x281a
    27f2:	69 c0       	rjmp	.+210    	; 0x28c6
    27f4:	29 81       	ldd	r18, Y+1	; 0x01
    27f6:	3a 81       	ldd	r19, Y+2	; 0x02
    27f8:	26 30       	cpi	r18, 0x06	; 6
    27fa:	31 05       	cpc	r19, r1
    27fc:	09 f4       	brne	.+2      	; 0x2800
    27fe:	57 c0       	rjmp	.+174    	; 0x28ae
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	86 30       	cpi	r24, 0x06	; 6
    2806:	91 05       	cpc	r25, r1
    2808:	0c f4       	brge	.+2      	; 0x280c
    280a:	48 c0       	rjmp	.+144    	; 0x289c
    280c:	29 81       	ldd	r18, Y+1	; 0x01
    280e:	3a 81       	ldd	r19, Y+2	; 0x02
    2810:	27 30       	cpi	r18, 0x07	; 7
    2812:	31 05       	cpc	r19, r1
    2814:	09 f4       	brne	.+2      	; 0x2818
    2816:	52 c0       	rjmp	.+164    	; 0x28bc
    2818:	56 c0       	rjmp	.+172    	; 0x28c6
					{
						case 1:		//Set the Alarm On/off
							if(boolAlarmOn==true)	//was the alarm on?
    281a:	80 91 71 00 	lds	r24, 0x0071
    281e:	99 27       	eor	r25, r25
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	91 05       	cpc	r25, r1
    2824:	19 f4       	brne	.+6      	; 0x282c
							{
								boolAlarmOn=false;	//if so, then turn off the alarm
    2826:	10 92 71 00 	sts	0x0071, r1
    282a:	03 c0       	rjmp	.+6      	; 0x2832
							}
							else
							{
								boolAlarmOn=true;	//the alarm was not on, so turn on the alarm
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	80 93 71 00 	sts	0x0071, r24
							}
							uTmrState=3;	//This lets state 2 paint the screen correctly
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	80 93 62 00 	sts	0x0062, r24
							uState=0;		//go back to main clock display, clearing the display first
    2838:	10 92 6c 00 	sts	0x006C, r1
						break;
    283c:	44 c0       	rjmp	.+136    	; 0x28c6
						case 2:		//Set the Clock
							clear_display();	//clear the whole display
    283e:	0e 94 00 0a 	call	0x1400
							uTimeSetState=0;	//start out in the set the hour state
    2842:	10 92 85 00 	sts	0x0085, r1
							uState=60;		//move to the set-the-clock state
    2846:	8c e3       	ldi	r24, 0x3C	; 60
    2848:	80 93 6c 00 	sts	0x006C, r24
							uTmrState=5;
    284c:	85 e0       	ldi	r24, 0x05	; 5
    284e:	80 93 62 00 	sts	0x0062, r24
							drawText((unsigned char *)strSetTheTime,0,0,false);		//show the "set the time" title
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	84 e1       	ldi	r24, 0x14	; 20
    285a:	94 e0       	ldi	r25, 0x04	; 4
    285c:	0e 94 30 0d 	call	0x1a60
						break;
    2860:	32 c0       	rjmp	.+100    	; 0x28c6
						case 3:		//Set the Alarm time
							clear_display();	//clear the whole display
    2862:	0e 94 00 0a 	call	0x1400
							uTimeSetState=0;	//start out in the set the alarm hour state
    2866:	10 92 85 00 	sts	0x0085, r1
							uState=61;		//move to the set-the-alarm state
    286a:	8d e3       	ldi	r24, 0x3D	; 61
    286c:	80 93 6c 00 	sts	0x006C, r24
							uTmrState=5;
    2870:	85 e0       	ldi	r24, 0x05	; 5
    2872:	80 93 62 00 	sts	0x0062, r24
							drawText((unsigned char *)strSetTheAlarm,0,0,false);		//show the "set the Alarm" title
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	81 e2       	ldi	r24, 0x21	; 33
    287e:	94 e0       	ldi	r25, 0x04	; 4
    2880:	0e 94 30 0d 	call	0x1a60
						break;
    2884:	20 c0       	rjmp	.+64     	; 0x28c6
						case 4:		//set the backlight times
							uState=62;
    2886:	8e e3       	ldi	r24, 0x3E	; 62
    2888:	80 93 6c 00 	sts	0x006C, r24
							clear_display();	//clear the whole display
    288c:	0e 94 00 0a 	call	0x1400
							uTimeSetState=0;	//set the "backlight off time" first
    2890:	10 92 85 00 	sts	0x0085, r1
							uTmrState=defStateTm+2;		//allow the new state to paint the new screen
    2894:	8a ec       	ldi	r24, 0xCA	; 202
    2896:	80 93 62 00 	sts	0x0062, r24
						break;
    289a:	15 c0       	rjmp	.+42     	; 0x28c6
						case 5:		//set the photo trigger value
							uState=63;
    289c:	8f e3       	ldi	r24, 0x3F	; 63
    289e:	80 93 6c 00 	sts	0x006C, r24
							clear_display();	//clear the whole display
    28a2:	0e 94 00 0a 	call	0x1400
							uTmrState=defStateTm+2;		//allow the new state to paint the new screen
    28a6:	8a ec       	ldi	r24, 0xCA	; 202
    28a8:	80 93 62 00 	sts	0x0062, r24
						break;
    28ac:	0c c0       	rjmp	.+24     	; 0x28c6
						case 6:		//Show the "About this clock" information
							uState=64;
    28ae:	80 e4       	ldi	r24, 0x40	; 64
    28b0:	80 93 6c 00 	sts	0x006C, r24
							uTmrState=5;
    28b4:	85 e0       	ldi	r24, 0x05	; 5
    28b6:	80 93 62 00 	sts	0x0062, r24
						break;
    28ba:	05 c0       	rjmp	.+10     	; 0x28c6
						case 7:		//the exit button
							uTmrState=3;	//This lets state 0 paint the screen correctly
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	80 93 62 00 	sts	0x0062, r24
							uState=0;	//go back to the main display, clearing the display first
    28c2:	10 92 6c 00 	sts	0x006C, r1
						break;
					}
					uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    28c6:	8e e0       	ldi	r24, 0x0E	; 14
    28c8:	80 93 6f 00 	sts	0x006F, r24
				}
				if(uTmrState==defStateTm)
    28cc:	80 91 62 00 	lds	r24, 0x0062
    28d0:	88 3c       	cpi	r24, 0xC8	; 200
    28d2:	09 f0       	breq	.+2      	; 0x28d6
    28d4:	0e c6       	rjmp	.+3100   	; 0x34f2
				{
					clear_display();	//clear the whole display
    28d6:	0e 94 00 0a 	call	0x1400
					paintMenu((unsigned char *)str50,defState50HighlightMin,defState50HighlightMax);	//string, column, line, inverted
    28da:	47 e0       	ldi	r20, 0x07	; 7
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	84 ea       	ldi	r24, 0xA4	; 164
    28e0:	97 e0       	ldi	r25, 0x07	; 7
    28e2:	0e 94 1a 0e 	call	0x1c34
					uTmrState--;	//don't go in here again
    28e6:	80 91 62 00 	lds	r24, 0x0062
    28ea:	81 50       	subi	r24, 0x01	; 1
    28ec:	80 93 62 00 	sts	0x0062, r24
				}
			break;
    28f0:	00 c6       	rjmp	.+3072   	; 0x34f2
			
			//uTimeSetState = 0 set the hour
			//uTimeSetState = 1 set the minute
			//uTimeSetState = 2 set the month
			//uTimeSetState = 3 set the day
			//uTimeSetState = 4 set the year
			case 60:	//We are going to set the time
				//has the up button been pressed?
				if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    28f2:	80 91 39 00 	lds	r24, 0x0039
    28f6:	99 27       	eor	r25, r25
    28f8:	96 95       	lsr	r25
    28fa:	87 95       	ror	r24
    28fc:	96 95       	lsr	r25
    28fe:	87 95       	ror	r24
    2900:	81 70       	andi	r24, 0x01	; 1
    2902:	90 70       	andi	r25, 0x00	; 0
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	09 f0       	breq	.+2      	; 0x290a
    2908:	ba c0       	rjmp	.+372    	; 0x2a7e
    290a:	80 91 6d 00 	lds	r24, 0x006D
    290e:	88 23       	and	r24, r24
    2910:	09 f0       	breq	.+2      	; 0x2914
    2912:	b5 c0       	rjmp	.+362    	; 0x2a7e
				{
					switch(uTimeSetState)	//what are we going to set?
    2914:	80 91 85 00 	lds	r24, 0x0085
    2918:	28 2f       	mov	r18, r24
    291a:	33 27       	eor	r19, r19
    291c:	2b 83       	std	Y+3, r18	; 0x03
    291e:	3c 83       	std	Y+4, r19	; 0x04
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	91 05       	cpc	r25, r1
    2928:	09 f4       	brne	.+2      	; 0x292c
    292a:	50 c0       	rjmp	.+160    	; 0x29cc
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	23 30       	cpi	r18, 0x03	; 3
    2932:	31 05       	cpc	r19, r1
    2934:	54 f4       	brge	.+20     	; 0x294a
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	99 f0       	breq	.+38     	; 0x2964
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	3c 81       	ldd	r19, Y+4	; 0x04
    2942:	21 30       	cpi	r18, 0x01	; 1
    2944:	31 05       	cpc	r19, r1
    2946:	41 f1       	breq	.+80     	; 0x2998
    2948:	94 c0       	rjmp	.+296    	; 0x2a72
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	83 30       	cpi	r24, 0x03	; 3
    2950:	91 05       	cpc	r25, r1
    2952:	09 f4       	brne	.+2      	; 0x2956
    2954:	59 c0       	rjmp	.+178    	; 0x2a08
    2956:	2b 81       	ldd	r18, Y+3	; 0x03
    2958:	3c 81       	ldd	r19, Y+4	; 0x04
    295a:	24 30       	cpi	r18, 0x04	; 4
    295c:	31 05       	cpc	r19, r1
    295e:	09 f4       	brne	.+2      	; 0x2962
    2960:	71 c0       	rjmp	.+226    	; 0x2a44
    2962:	87 c0       	rjmp	.+270    	; 0x2a72
					{
						case 0:		//set the hour
							if(t.intHour<23)		//have we reached the maximum hour count?
    2964:	80 91 79 00 	lds	r24, 0x0079
    2968:	90 91 7a 00 	lds	r25, 0x007A
    296c:	87 31       	cpi	r24, 0x17	; 23
    296e:	91 05       	cpc	r25, r1
    2970:	50 f4       	brcc	.+20     	; 0x2986
							{
								t.intHour++;		//no, increment the hour
    2972:	80 91 79 00 	lds	r24, 0x0079
    2976:	90 91 7a 00 	lds	r25, 0x007A
    297a:	01 96       	adiw	r24, 0x01	; 1
    297c:	90 93 7a 00 	sts	0x007A, r25
    2980:	80 93 79 00 	sts	0x0079, r24
    2984:	04 c0       	rjmp	.+8      	; 0x298e
							}
							else	
							{
								t.intHour=0;		//reset the hour count since we have reached the 23rd hour
    2986:	10 92 7a 00 	sts	0x007A, r1
    298a:	10 92 79 00 	sts	0x0079, r1
							}
							ShowLargeTime(0,2);		//uStartColumn, uRow
    298e:	62 e0       	ldi	r22, 0x02	; 2
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	0e 94 8d 1c 	call	0x391a

						break;
    2996:	6d c0       	rjmp	.+218    	; 0x2a72
						case 1:		//set the minute
							if(t.intMin<59)		//have we reached the maximum minute count?
    2998:	80 91 77 00 	lds	r24, 0x0077
    299c:	90 91 78 00 	lds	r25, 0x0078
    29a0:	8b 33       	cpi	r24, 0x3B	; 59
    29a2:	91 05       	cpc	r25, r1
    29a4:	50 f4       	brcc	.+20     	; 0x29ba
							{
								t.intMin++;		//no, then increment the minute
    29a6:	80 91 77 00 	lds	r24, 0x0077
    29aa:	90 91 78 00 	lds	r25, 0x0078
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	90 93 78 00 	sts	0x0078, r25
    29b4:	80 93 77 00 	sts	0x0077, r24
    29b8:	04 c0       	rjmp	.+8      	; 0x29c2
							}
							else		
							{
								t.intMin=0;		//reset the hour count since we have reached the 59th minute
    29ba:	10 92 78 00 	sts	0x0078, r1
    29be:	10 92 77 00 	sts	0x0077, r1
							}
							ShowLargeTime(0,2);		//uStartColumn, uRow
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0e 94 8d 1c 	call	0x391a
						break;
    29ca:	53 c0       	rjmp	.+166    	; 0x2a72
						case 2:		//set the month
							if(t.intMonth<12)		//have we reached passed december?
    29cc:	80 91 7d 00 	lds	r24, 0x007D
    29d0:	90 91 7e 00 	lds	r25, 0x007E
    29d4:	8c 30       	cpi	r24, 0x0C	; 12
    29d6:	91 05       	cpc	r25, r1
    29d8:	50 f4       	brcc	.+20     	; 0x29ee
							{
								t.intMonth++;		//no, then increment the month
    29da:	80 91 7d 00 	lds	r24, 0x007D
    29de:	90 91 7e 00 	lds	r25, 0x007E
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	90 93 7e 00 	sts	0x007E, r25
    29e8:	80 93 7d 00 	sts	0x007D, r24
    29ec:	06 c0       	rjmp	.+12     	; 0x29fa
							}
							else
							{
								t.intMonth=1;		//yes, then reset the month to January
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	90 93 7e 00 	sts	0x007E, r25
    29f6:	80 93 7d 00 	sts	0x007D, r24
							}
							write_date(defTab,7,0,false);
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	8a e0       	ldi	r24, 0x0A	; 10
    2a02:	0e 94 f9 1a 	call	0x35f2
						break;
    2a06:	35 c0       	rjmp	.+106    	; 0x2a72
						case 3:		//set the day
							if(t.intDay<31)		//have we reached the maximum day?
    2a08:	80 91 7b 00 	lds	r24, 0x007B
    2a0c:	90 91 7c 00 	lds	r25, 0x007C
    2a10:	8f 31       	cpi	r24, 0x1F	; 31
    2a12:	91 05       	cpc	r25, r1
    2a14:	50 f4       	brcc	.+20     	; 0x2a2a
							{
								t.intDay++;		//no, then increment the day
    2a16:	80 91 7b 00 	lds	r24, 0x007B
    2a1a:	90 91 7c 00 	lds	r25, 0x007C
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	90 93 7c 00 	sts	0x007C, r25
    2a24:	80 93 7b 00 	sts	0x007B, r24
    2a28:	06 c0       	rjmp	.+12     	; 0x2a36
							}
							else
							{
								t.intDay=1;		//yes, then reset the day to the start of the month
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	90 93 7c 00 	sts	0x007C, r25
    2a32:	80 93 7b 00 	sts	0x007B, r24
							}
							write_date(defTab,7,0,false);
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	67 e0       	ldi	r22, 0x07	; 7
    2a3c:	8a e0       	ldi	r24, 0x0A	; 10
    2a3e:	0e 94 f9 1a 	call	0x35f2
						break;
    2a42:	17 c0       	rjmp	.+46     	; 0x2a72
						case 4:		//set the year
							if(t.intYear<999)		//have we reached the maximum year number?
    2a44:	80 91 7f 00 	lds	r24, 0x007F
    2a48:	90 91 80 00 	lds	r25, 0x0080
    2a4c:	33 e0       	ldi	r19, 0x03	; 3
    2a4e:	87 3e       	cpi	r24, 0xE7	; 231
    2a50:	93 07       	cpc	r25, r19
    2a52:	48 f4       	brcc	.+18     	; 0x2a66
							{
								t.intYear++;		//no, then increment the year
    2a54:	80 91 7f 00 	lds	r24, 0x007F
    2a58:	90 91 80 00 	lds	r25, 0x0080
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	90 93 80 00 	sts	0x0080, r25
    2a62:	80 93 7f 00 	sts	0x007F, r24
							}
							write_date(defTab,7,0,false);
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	67 e0       	ldi	r22, 0x07	; 7
    2a6c:	8a e0       	ldi	r24, 0x0A	; 10
    2a6e:	0e 94 f9 1a 	call	0x35f2
						break;
					}
					uTmrState=defDlyAfterBtnPress; //load up the blink timer for the range level number
    2a72:	86 e9       	ldi	r24, 0x96	; 150
    2a74:	80 93 62 00 	sts	0x0062, r24
					uBtnUpTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    2a78:	8e e0       	ldi	r24, 0x0E	; 14
    2a7a:	80 93 6d 00 	sts	0x006D, r24
				}
				//has the down button been pressed?
				if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    2a7e:	80 91 39 00 	lds	r24, 0x0039
    2a82:	99 27       	eor	r25, r25
    2a84:	96 95       	lsr	r25
    2a86:	87 95       	ror	r24
    2a88:	96 95       	lsr	r25
    2a8a:	87 95       	ror	r24
    2a8c:	96 95       	lsr	r25
    2a8e:	87 95       	ror	r24
    2a90:	81 70       	andi	r24, 0x01	; 1
    2a92:	90 70       	andi	r25, 0x00	; 0
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	09 f0       	breq	.+2      	; 0x2a9a
    2a98:	bb c0       	rjmp	.+374    	; 0x2c10
    2a9a:	80 91 6e 00 	lds	r24, 0x006E
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4
    2aa2:	b6 c0       	rjmp	.+364    	; 0x2c10
				{
					switch(uTimeSetState)	//what are we going to set?
    2aa4:	80 91 85 00 	lds	r24, 0x0085
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	33 27       	eor	r19, r19
    2aac:	2d 83       	std	Y+5, r18	; 0x05
    2aae:	3e 83       	std	Y+6, r19	; 0x06
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc
    2aba:	52 c0       	rjmp	.+164    	; 0x2b60
    2abc:	2d 81       	ldd	r18, Y+5	; 0x05
    2abe:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac0:	23 30       	cpi	r18, 0x03	; 3
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	54 f4       	brge	.+20     	; 0x2ada
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	99 f0       	breq	.+38     	; 0x2af4
    2ace:	2d 81       	ldd	r18, Y+5	; 0x05
    2ad0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ad2:	21 30       	cpi	r18, 0x01	; 1
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	49 f1       	breq	.+82     	; 0x2b2a
    2ad8:	95 c0       	rjmp	.+298    	; 0x2c04
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	83 30       	cpi	r24, 0x03	; 3
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6
    2ae4:	5b c0       	rjmp	.+182    	; 0x2b9c
    2ae6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae8:	3e 81       	ldd	r19, Y+6	; 0x06
    2aea:	24 30       	cpi	r18, 0x04	; 4
    2aec:	31 05       	cpc	r19, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2
    2af0:	73 c0       	rjmp	.+230    	; 0x2bd8
    2af2:	88 c0       	rjmp	.+272    	; 0x2c04
					{
						case 0:		//set the hour
							if(t.intHour!=0)		//have we reached the minimum day?
    2af4:	80 91 79 00 	lds	r24, 0x0079
    2af8:	90 91 7a 00 	lds	r25, 0x007A
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	51 f0       	breq	.+20     	; 0x2b14
							{
								t.intHour--;		//no, then decrement the day
    2b00:	80 91 79 00 	lds	r24, 0x0079
    2b04:	90 91 7a 00 	lds	r25, 0x007A
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	90 93 7a 00 	sts	0x007A, r25
    2b0e:	80 93 79 00 	sts	0x0079, r24
    2b12:	06 c0       	rjmp	.+12     	; 0x2b20
							}
							else
							{
								t.intHour=23;		//yes, then rese the hour to the highest possible value
    2b14:	87 e1       	ldi	r24, 0x17	; 23
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	90 93 7a 00 	sts	0x007A, r25
    2b1c:	80 93 79 00 	sts	0x0079, r24
							}
							ShowLargeTime(0,2);		//uStartColumn, uRow
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	0e 94 8d 1c 	call	0x391a
						break;
    2b28:	6d c0       	rjmp	.+218    	; 0x2c04
						case 1:		//set the minute
							if(t.intMin!=0)		//have we reached the minimum minute?
    2b2a:	80 91 77 00 	lds	r24, 0x0077
    2b2e:	90 91 78 00 	lds	r25, 0x0078
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	51 f0       	breq	.+20     	; 0x2b4a
							{
								t.intMin--;		//no, then decrement the minute
    2b36:	80 91 77 00 	lds	r24, 0x0077
    2b3a:	90 91 78 00 	lds	r25, 0x0078
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	90 93 78 00 	sts	0x0078, r25
    2b44:	80 93 77 00 	sts	0x0077, r24
    2b48:	06 c0       	rjmp	.+12     	; 0x2b56
							}
							else
							{
								t.intMin=59;		//yes, then reset the minute to highest possible value
    2b4a:	8b e3       	ldi	r24, 0x3B	; 59
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	90 93 78 00 	sts	0x0078, r25
    2b52:	80 93 77 00 	sts	0x0077, r24
							}
							ShowLargeTime(0,2);		//uStartColumn, uRow
    2b56:	62 e0       	ldi	r22, 0x02	; 2
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	0e 94 8d 1c 	call	0x391a
						break;
    2b5e:	52 c0       	rjmp	.+164    	; 0x2c04
						case 2:		//set the month
							if(t.intMonth!=1)		//have we reached the minimum month
    2b60:	80 91 7d 00 	lds	r24, 0x007D
    2b64:	90 91 7e 00 	lds	r25, 0x007E
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	51 f0       	breq	.+20     	; 0x2b82
							{
								t.intMonth--;			//no, then decrement the month
    2b6e:	80 91 7d 00 	lds	r24, 0x007D
    2b72:	90 91 7e 00 	lds	r25, 0x007E
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	90 93 7e 00 	sts	0x007E, r25
    2b7c:	80 93 7d 00 	sts	0x007D, r24
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e
							}
							else
							{
								t.intMonth=12;		//yes, then reset the month to decmenber
    2b82:	8c e0       	ldi	r24, 0x0C	; 12
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	90 93 7e 00 	sts	0x007E, r25
    2b8a:	80 93 7d 00 	sts	0x007D, r24
							}
							write_date(defTab,7,0,false);
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	67 e0       	ldi	r22, 0x07	; 7
    2b94:	8a e0       	ldi	r24, 0x0A	; 10
    2b96:	0e 94 f9 1a 	call	0x35f2
						break;
    2b9a:	34 c0       	rjmp	.+104    	; 0x2c04
						case 3:		//set the day
							if(t.intDay!=1)		//have we reached the minimum day?
    2b9c:	80 91 7b 00 	lds	r24, 0x007B
    2ba0:	90 91 7c 00 	lds	r25, 0x007C
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	51 f0       	breq	.+20     	; 0x2bbe
							{
								t.intDay--;		//no, then decrement the day
    2baa:	80 91 7b 00 	lds	r24, 0x007B
    2bae:	90 91 7c 00 	lds	r25, 0x007C
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	90 93 7c 00 	sts	0x007C, r25
    2bb8:	80 93 7b 00 	sts	0x007B, r24
    2bbc:	06 c0       	rjmp	.+12     	; 0x2bca
							}
							else
							{
								t.intDay=31;		//yes, then reset the day to the highest possible value
    2bbe:	8f e1       	ldi	r24, 0x1F	; 31
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	90 93 7c 00 	sts	0x007C, r25
    2bc6:	80 93 7b 00 	sts	0x007B, r24
							}
							write_date(defTab,7,0,false);
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	67 e0       	ldi	r22, 0x07	; 7
    2bd0:	8a e0       	ldi	r24, 0x0A	; 10
    2bd2:	0e 94 f9 1a 	call	0x35f2
						break;
    2bd6:	16 c0       	rjmp	.+44     	; 0x2c04
						case 4:		//set the year
							if(t.intYear>1)		//have we reached before 2005?  (intYear only holds the last 3 digits of the current year)
    2bd8:	80 91 7f 00 	lds	r24, 0x007F
    2bdc:	90 91 80 00 	lds	r25, 0x0080
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	91 05       	cpc	r25, r1
    2be4:	48 f0       	brcs	.+18     	; 0x2bf8
							{
								t.intYear--;		//no, then decrement the year
    2be6:	80 91 7f 00 	lds	r24, 0x007F
    2bea:	90 91 80 00 	lds	r25, 0x0080
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	90 93 80 00 	sts	0x0080, r25
    2bf4:	80 93 7f 00 	sts	0x007F, r24
							}
							write_date(defTab,7,0,false);
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	67 e0       	ldi	r22, 0x07	; 7
    2bfe:	8a e0       	ldi	r24, 0x0A	; 10
    2c00:	0e 94 f9 1a 	call	0x35f2
						break;
					}
					uTmrState=defDlyAfterBtnPress; //load up the blink timer for the range level number
    2c04:	86 e9       	ldi	r24, 0x96	; 150
    2c06:	80 93 62 00 	sts	0x0062, r24
					uBtnDwnTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    2c0a:	8e e0       	ldi	r24, 0x0E	; 14
    2c0c:	80 93 6e 00 	sts	0x006E, r24
				}
				//has the enter button been pressed?
				if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    2c10:	80 91 39 00 	lds	r24, 0x0039
    2c14:	99 27       	eor	r25, r25
    2c16:	96 95       	lsr	r25
    2c18:	87 95       	ror	r24
    2c1a:	81 70       	andi	r24, 0x01	; 1
    2c1c:	90 70       	andi	r25, 0x00	; 0
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	21 f5       	brne	.+72     	; 0x2c6a
    2c22:	80 91 6f 00 	lds	r24, 0x006F
    2c26:	88 23       	and	r24, r24
    2c28:	01 f5       	brne	.+64     	; 0x2c6a
				{		//exit out of the set time
					uTimeSetState++;
    2c2a:	80 91 85 00 	lds	r24, 0x0085
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	80 93 85 00 	sts	0x0085, r24
					if (uTimeSetState == 2)	//refresh the time when we go to change the month
    2c34:	80 91 85 00 	lds	r24, 0x0085
    2c38:	82 30       	cpi	r24, 0x02	; 2
    2c3a:	21 f4       	brne	.+8      	; 0x2c44
					{
						ShowLargeTime(0,2);		//uStartColumn, uRow
    2c3c:	62 e0       	ldi	r22, 0x02	; 2
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	0e 94 8d 1c 	call	0x391a
					}
					uTmrState=defSettingBlinkOff+1;		//as soon as the the enter button is pressed, the next thing to change will start blinking
    2c44:	81 e5       	ldi	r24, 0x51	; 81
    2c46:	80 93 62 00 	sts	0x0062, r24
					if(uTimeSetState > 4)
    2c4a:	80 91 85 00 	lds	r24, 0x0085
    2c4e:	85 30       	cpi	r24, 0x05	; 5
    2c50:	48 f0       	brcs	.+18     	; 0x2c64
					{
						uState=50;	//go back to the main menu state
    2c52:	82 e3       	ldi	r24, 0x32	; 50
    2c54:	80 93 6c 00 	sts	0x006C, r24
						uSelectedLine=defState50HighlightMax;	//set the highlighted line for the next state
    2c58:	87 e0       	ldi	r24, 0x07	; 7
    2c5a:	80 93 91 00 	sts	0x0091, r24
						uTmrState=defStateTm+1;       //reload the state timer to stay in this state
    2c5e:	89 ec       	ldi	r24, 0xC9	; 201
    2c60:	80 93 62 00 	sts	0x0062, r24
					}
					uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    2c64:	8e e0       	ldi	r24, 0x0E	; 14
    2c66:	80 93 6f 00 	sts	0x006F, r24
				}
				uTmrState--;	//count down to a blink for the range number
    2c6a:	80 91 62 00 	lds	r24, 0x0062
    2c6e:	81 50       	subi	r24, 0x01	; 1
    2c70:	80 93 62 00 	sts	0x0062, r24
				if(uTmrState==0)
    2c74:	80 91 62 00 	lds	r24, 0x0062
    2c78:	88 23       	and	r24, r24
    2c7a:	19 f4       	brne	.+6      	; 0x2c82
				{
					uTmrState=defSettingBlinkOff;	//reset the range blinking number
    2c7c:	80 e5       	ldi	r24, 0x50	; 80
    2c7e:	80 93 62 00 	sts	0x0062, r24
				}
				if(uTmrState==defSettingBlinkOff)	//this code turns off the character that is blinking
    2c82:	80 91 62 00 	lds	r24, 0x0062
    2c86:	80 35       	cpi	r24, 0x50	; 80
    2c88:	09 f0       	breq	.+2      	; 0x2c8c
    2c8a:	4b c0       	rjmp	.+150    	; 0x2d22
				{
					switch(uTimeSetState)	//what are we going to set?
    2c8c:	80 91 85 00 	lds	r24, 0x0085
    2c90:	28 2f       	mov	r18, r24
    2c92:	33 27       	eor	r19, r19
    2c94:	2f 83       	std	Y+7, r18	; 0x07
    2c96:	38 87       	std	Y+8, r19	; 0x08
    2c98:	8f 81       	ldd	r24, Y+7	; 0x07
    2c9a:	98 85       	ldd	r25, Y+8	; 0x08
    2c9c:	82 30       	cpi	r24, 0x02	; 2
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	61 f1       	breq	.+88     	; 0x2cfa
    2ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ca4:	38 85       	ldd	r19, Y+8	; 0x08
    2ca6:	23 30       	cpi	r18, 0x03	; 3
    2ca8:	31 05       	cpc	r19, r1
    2caa:	54 f4       	brge	.+20     	; 0x2cc0
    2cac:	8f 81       	ldd	r24, Y+7	; 0x07
    2cae:	98 85       	ldd	r25, Y+8	; 0x08
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	89 f0       	breq	.+34     	; 0x2cd6
    2cb4:	2f 81       	ldd	r18, Y+7	; 0x07
    2cb6:	38 85       	ldd	r19, Y+8	; 0x08
    2cb8:	21 30       	cpi	r18, 0x01	; 1
    2cba:	31 05       	cpc	r19, r1
    2cbc:	a9 f0       	breq	.+42     	; 0x2ce8
    2cbe:	31 c0       	rjmp	.+98     	; 0x2d22
    2cc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc2:	98 85       	ldd	r25, Y+8	; 0x08
    2cc4:	83 30       	cpi	r24, 0x03	; 3
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	f9 f0       	breq	.+62     	; 0x2d08
    2cca:	2f 81       	ldd	r18, Y+7	; 0x07
    2ccc:	38 85       	ldd	r19, Y+8	; 0x08
    2cce:	24 30       	cpi	r18, 0x04	; 4
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	09 f1       	breq	.+66     	; 0x2d16
    2cd4:	26 c0       	rjmp	.+76     	; 0x2d22
					{
						case 0:		//set the hour
							BigDigits(2,0,0,0,false);
    2cd6:	00 e0       	ldi	r16, 0x00	; 0
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	0e 94 92 0b 	call	0x1724
						break;
    2ce6:	1d c0       	rjmp	.+58     	; 0x2d22
						case 1:		//set the minute
							BigDigits(2,61,0,0,false);		//the column was 60
    2ce8:	00 e0       	ldi	r16, 0x00	; 0
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	50 e0       	ldi	r21, 0x00	; 0
    2cf0:	6d e3       	ldi	r22, 0x3D	; 61
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	0e 94 92 0b 	call	0x1724
						break;
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22
						case 2:		//set the month
							write_date(defTab,7,1,false);
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	67 e0       	ldi	r22, 0x07	; 7
    2d00:	8a e0       	ldi	r24, 0x0A	; 10
    2d02:	0e 94 f9 1a 	call	0x35f2
						break;
    2d06:	0d c0       	rjmp	.+26     	; 0x2d22
						case 3:		//set the day
							write_date(defTab,7,2,false);
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	42 e0       	ldi	r20, 0x02	; 2
    2d0c:	67 e0       	ldi	r22, 0x07	; 7
    2d0e:	8a e0       	ldi	r24, 0x0A	; 10
    2d10:	0e 94 f9 1a 	call	0x35f2
						break;
    2d14:	06 c0       	rjmp	.+12     	; 0x2d22
						case 4:		//set the year
							write_date(defTab,7,3,false);
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	43 e0       	ldi	r20, 0x03	; 3
    2d1a:	67 e0       	ldi	r22, 0x07	; 7
    2d1c:	8a e0       	ldi	r24, 0x0A	; 10
    2d1e:	0e 94 f9 1a 	call	0x35f2
						break;
					}
				}
				if(uTmrState==defSettingBlinkOn)	//this code turns on the character that is blinking
    2d22:	80 91 62 00 	lds	r24, 0x0062
    2d26:	88 32       	cpi	r24, 0x28	; 40
    2d28:	09 f0       	breq	.+2      	; 0x2d2c
    2d2a:	e3 c3       	rjmp	.+1990   	; 0x34f2
				{
					switch(uTimeSetState)	//what are we going to set?
    2d2c:	80 91 85 00 	lds	r24, 0x0085
    2d30:	28 2f       	mov	r18, r24
    2d32:	33 27       	eor	r19, r19
    2d34:	29 87       	std	Y+9, r18	; 0x09
    2d36:	3a 87       	std	Y+10, r19	; 0x0a
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	82 30       	cpi	r24, 0x02	; 2
    2d3e:	91 05       	cpc	r25, r1
    2d40:	51 f1       	breq	.+84     	; 0x2d96
    2d42:	29 85       	ldd	r18, Y+9	; 0x09
    2d44:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d46:	23 30       	cpi	r18, 0x03	; 3
    2d48:	31 05       	cpc	r19, r1
    2d4a:	54 f4       	brge	.+20     	; 0x2d60
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	89 f0       	breq	.+34     	; 0x2d76
    2d54:	29 85       	ldd	r18, Y+9	; 0x09
    2d56:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d58:	21 30       	cpi	r18, 0x01	; 1
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	b9 f0       	breq	.+46     	; 0x2d8c
    2d5e:	c9 c3       	rjmp	.+1938   	; 0x34f2
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	83 30       	cpi	r24, 0x03	; 3
    2d66:	91 05       	cpc	r25, r1
    2d68:	e9 f0       	breq	.+58     	; 0x2da4
    2d6a:	29 85       	ldd	r18, Y+9	; 0x09
    2d6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d6e:	24 30       	cpi	r18, 0x04	; 4
    2d70:	31 05       	cpc	r19, r1
    2d72:	f9 f0       	breq	.+62     	; 0x2db2
    2d74:	be c3       	rjmp	.+1916   	; 0x34f2
					{
						case 0:		//set the hour
							ShowLargeTime(0,2);		//uStartColumn, uRow
    2d76:	62 e0       	ldi	r22, 0x02	; 2
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	0e 94 8d 1c 	call	0x391a
							write_date(defTab,7,0,false);
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	40 e0       	ldi	r20, 0x00	; 0
    2d82:	67 e0       	ldi	r22, 0x07	; 7
    2d84:	8a e0       	ldi	r24, 0x0A	; 10
    2d86:	0e 94 f9 1a 	call	0x35f2
						break;
    2d8a:	b3 c3       	rjmp	.+1894   	; 0x34f2
						case 1:		//set the minute
							ShowLargeTime(0,2);		//uStartColumn, uRow
    2d8c:	62 e0       	ldi	r22, 0x02	; 2
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0e 94 8d 1c 	call	0x391a
						break;
    2d94:	ae c3       	rjmp	.+1884   	; 0x34f2
						case 2:		//set the month
							write_date(defTab,7,0,false);
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	67 e0       	ldi	r22, 0x07	; 7
    2d9c:	8a e0       	ldi	r24, 0x0A	; 10
    2d9e:	0e 94 f9 1a 	call	0x35f2
						break;
    2da2:	a7 c3       	rjmp	.+1870   	; 0x34f2
						case 3:		//set the day
							write_date(defTab,7,0,false);
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	67 e0       	ldi	r22, 0x07	; 7
    2daa:	8a e0       	ldi	r24, 0x0A	; 10
    2dac:	0e 94 f9 1a 	call	0x35f2
						break;
    2db0:	a0 c3       	rjmp	.+1856   	; 0x34f2
						case 4:		//set the year
							write_date(defTab,7,0,false);
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	67 e0       	ldi	r22, 0x07	; 7
    2db8:	8a e0       	ldi	r24, 0x0A	; 10
    2dba:	0e 94 f9 1a 	call	0x35f2
						break;
					}
				}				
			break;
    2dbe:	99 c3       	rjmp	.+1842   	; 0x34f2

			//uTimeSetState = 0 set the hour
			//uTimeSetState = 1 set the minute
			//intAlarmMin
			//intAlarmHour
			case 61:	//We are going to set the alarm clock time
				//has the up button been pressed?
				if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    2dc0:	80 91 39 00 	lds	r24, 0x0039
    2dc4:	99 27       	eor	r25, r25
    2dc6:	96 95       	lsr	r25
    2dc8:	87 95       	ror	r24
    2dca:	96 95       	lsr	r25
    2dcc:	87 95       	ror	r24
    2dce:	81 70       	andi	r24, 0x01	; 1
    2dd0:	90 70       	andi	r25, 0x00	; 0
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8
    2dd6:	4e c0       	rjmp	.+156    	; 0x2e74
    2dd8:	80 91 6d 00 	lds	r24, 0x006D
    2ddc:	88 23       	and	r24, r24
    2dde:	09 f0       	breq	.+2      	; 0x2de2
    2de0:	49 c0       	rjmp	.+146    	; 0x2e74
				{
					switch(uTimeSetState)	//what are we going to set?
    2de2:	80 91 85 00 	lds	r24, 0x0085
    2de6:	28 2f       	mov	r18, r24
    2de8:	33 27       	eor	r19, r19
    2dea:	2b 87       	std	Y+11, r18	; 0x0b
    2dec:	3c 87       	std	Y+12, r19	; 0x0c
    2dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	31 f0       	breq	.+12     	; 0x2e02
    2df6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2df8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2dfa:	21 30       	cpi	r18, 0x01	; 1
    2dfc:	31 05       	cpc	r19, r1
    2dfe:	d9 f0       	breq	.+54     	; 0x2e36
    2e00:	33 c0       	rjmp	.+102    	; 0x2e68
					{
						case 0:		//set the hour
							if(intAlarmHour<23)		//have we reached the maximum hour count?
    2e02:	80 91 86 00 	lds	r24, 0x0086
    2e06:	90 91 87 00 	lds	r25, 0x0087
    2e0a:	87 31       	cpi	r24, 0x17	; 23
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	50 f4       	brcc	.+20     	; 0x2e24
							{
								intAlarmHour++;		//no, increment the hour
    2e10:	80 91 86 00 	lds	r24, 0x0086
    2e14:	90 91 87 00 	lds	r25, 0x0087
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	90 93 87 00 	sts	0x0087, r25
    2e1e:	80 93 86 00 	sts	0x0086, r24
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c
							}
							else	
							{
								intAlarmHour=0;		//reset the hour count since we have reached the 23rd hour
    2e24:	10 92 87 00 	sts	0x0087, r1
    2e28:	10 92 86 00 	sts	0x0086, r1
							}
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	0e 94 f6 1c 	call	0x39ec

						break;
    2e34:	19 c0       	rjmp	.+50     	; 0x2e68
						case 1:		//set the minute
							if(intAlarmMin<59)		//have we reached the maximum minute count?
    2e36:	80 91 82 00 	lds	r24, 0x0082
    2e3a:	90 91 83 00 	lds	r25, 0x0083
    2e3e:	8b 33       	cpi	r24, 0x3B	; 59
    2e40:	91 05       	cpc	r25, r1
    2e42:	50 f4       	brcc	.+20     	; 0x2e58
							{
								intAlarmMin++;		//no, then increment the minute
    2e44:	80 91 82 00 	lds	r24, 0x0082
    2e48:	90 91 83 00 	lds	r25, 0x0083
    2e4c:	01 96       	adiw	r24, 0x01	; 1
    2e4e:	90 93 83 00 	sts	0x0083, r25
    2e52:	80 93 82 00 	sts	0x0082, r24
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60
							}
							else		
							{
								intAlarmMin=0;		//reset the hour count since we have reached the 59th minute
    2e58:	10 92 83 00 	sts	0x0083, r1
    2e5c:	10 92 82 00 	sts	0x0082, r1
							}
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    2e60:	62 e0       	ldi	r22, 0x02	; 2
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	0e 94 f6 1c 	call	0x39ec
						break;
					}
					uTmrState=defDlyAfterBtnPress; //load up the blink timer for the range level number
    2e68:	86 e9       	ldi	r24, 0x96	; 150
    2e6a:	80 93 62 00 	sts	0x0062, r24
					uBtnUpTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    2e6e:	8e e0       	ldi	r24, 0x0E	; 14
    2e70:	80 93 6d 00 	sts	0x006D, r24
				}
				//has the down button been pressed?
				if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    2e74:	80 91 39 00 	lds	r24, 0x0039
    2e78:	99 27       	eor	r25, r25
    2e7a:	96 95       	lsr	r25
    2e7c:	87 95       	ror	r24
    2e7e:	96 95       	lsr	r25
    2e80:	87 95       	ror	r24
    2e82:	96 95       	lsr	r25
    2e84:	87 95       	ror	r24
    2e86:	81 70       	andi	r24, 0x01	; 1
    2e88:	90 70       	andi	r25, 0x00	; 0
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	09 f0       	breq	.+2      	; 0x2e90
    2e8e:	50 c0       	rjmp	.+160    	; 0x2f30
    2e90:	80 91 6e 00 	lds	r24, 0x006E
    2e94:	88 23       	and	r24, r24
    2e96:	09 f0       	breq	.+2      	; 0x2e9a
    2e98:	4b c0       	rjmp	.+150    	; 0x2f30
				{
					switch(uTimeSetState)	//what are we going to set?
    2e9a:	80 91 85 00 	lds	r24, 0x0085
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	33 27       	eor	r19, r19
    2ea2:	2d 87       	std	Y+13, r18	; 0x0d
    2ea4:	3e 87       	std	Y+14, r19	; 0x0e
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	31 f0       	breq	.+12     	; 0x2eba
    2eae:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eb0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eb2:	21 30       	cpi	r18, 0x01	; 1
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	e1 f0       	breq	.+56     	; 0x2ef0
    2eb8:	35 c0       	rjmp	.+106    	; 0x2f24
					{
						case 0:		//set the hour
							if(intAlarmHour!=0)		//have we reached the minimum day?
    2eba:	80 91 86 00 	lds	r24, 0x0086
    2ebe:	90 91 87 00 	lds	r25, 0x0087
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	51 f0       	breq	.+20     	; 0x2eda
							{
								intAlarmHour--;		//no, then decrement the day
    2ec6:	80 91 86 00 	lds	r24, 0x0086
    2eca:	90 91 87 00 	lds	r25, 0x0087
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	90 93 87 00 	sts	0x0087, r25
    2ed4:	80 93 86 00 	sts	0x0086, r24
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6
							}
							else
							{
								intAlarmHour=23;		//yes, then rese the hour to the highest possible value
    2eda:	87 e1       	ldi	r24, 0x17	; 23
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	90 93 87 00 	sts	0x0087, r25
    2ee2:	80 93 86 00 	sts	0x0086, r24
							}
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    2ee6:	62 e0       	ldi	r22, 0x02	; 2
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0e 94 f6 1c 	call	0x39ec
						break;
    2eee:	1a c0       	rjmp	.+52     	; 0x2f24
						case 1:		//set the minute
							if(intAlarmMin!=0)		//have we reached the minimum minute?
    2ef0:	80 91 82 00 	lds	r24, 0x0082
    2ef4:	90 91 83 00 	lds	r25, 0x0083
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	51 f0       	breq	.+20     	; 0x2f10
							{
								intAlarmMin--;		//no, then decrement the minute
    2efc:	80 91 82 00 	lds	r24, 0x0082
    2f00:	90 91 83 00 	lds	r25, 0x0083
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	90 93 83 00 	sts	0x0083, r25
    2f0a:	80 93 82 00 	sts	0x0082, r24
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c
							}
							else
							{
								intAlarmMin=59;		//yes, then reset the minute to highest possible value
    2f10:	8b e3       	ldi	r24, 0x3B	; 59
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	90 93 83 00 	sts	0x0083, r25
    2f18:	80 93 82 00 	sts	0x0082, r24
							}
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    2f1c:	62 e0       	ldi	r22, 0x02	; 2
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	0e 94 f6 1c 	call	0x39ec
						break;
					}
					uTmrState=defDlyAfterBtnPress; //load up the blink timer for the range level number
    2f24:	86 e9       	ldi	r24, 0x96	; 150
    2f26:	80 93 62 00 	sts	0x0062, r24
					uBtnDwnTmr=defBtnDbn;	//load up the debounce timer, so we don't immediately go back in here
    2f2a:	8e e0       	ldi	r24, 0x0E	; 14
    2f2c:	80 93 6e 00 	sts	0x006E, r24
				}
				//has the enter button been pressed?
				if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    2f30:	80 91 39 00 	lds	r24, 0x0039
    2f34:	99 27       	eor	r25, r25
    2f36:	96 95       	lsr	r25
    2f38:	87 95       	ror	r24
    2f3a:	81 70       	andi	r24, 0x01	; 1
    2f3c:	90 70       	andi	r25, 0x00	; 0
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	61 f5       	brne	.+88     	; 0x2f9a
    2f42:	80 91 6f 00 	lds	r24, 0x006F
    2f46:	88 23       	and	r24, r24
    2f48:	41 f5       	brne	.+80     	; 0x2f9a
				{		//exit out of the set time
					uTimeSetState++;
    2f4a:	80 91 85 00 	lds	r24, 0x0085
    2f4e:	8f 5f       	subi	r24, 0xFF	; 255
    2f50:	80 93 85 00 	sts	0x0085, r24
					uTmrState=defSettingBlinkOff+1;		//as soon as the the enter button is pressed, the next thing to change will start blinking
    2f54:	81 e5       	ldi	r24, 0x51	; 81
    2f56:	80 93 62 00 	sts	0x0062, r24
					if(uTimeSetState > 1)
    2f5a:	80 91 85 00 	lds	r24, 0x0085
    2f5e:	82 30       	cpi	r24, 0x02	; 2
    2f60:	c8 f0       	brcs	.+50     	; 0x2f94
					{
						eeprom_write_word((uint16_t*)&EEHour,intAlarmHour);	//store the alarm hour in EEPROM when the user has set a new value
    2f62:	60 91 86 00 	lds	r22, 0x0086
    2f66:	70 91 87 00 	lds	r23, 0x0087
    2f6a:	84 e0       	ldi	r24, 0x04	; 4
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 0b 1e 	call	0x3c16
						eeprom_write_word((uint16_t*)&EEMinute,intAlarmMin);	//store the alarm minute in EEPROM when the user has set a new value
    2f72:	60 91 82 00 	lds	r22, 0x0082
    2f76:	70 91 83 00 	lds	r23, 0x0083
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 0b 1e 	call	0x3c16
						uState=50;	//go back to the main menu state
    2f82:	82 e3       	ldi	r24, 0x32	; 50
    2f84:	80 93 6c 00 	sts	0x006C, r24
						uSelectedLine=defState50HighlightMax;	//set the highlighted line for the next state
    2f88:	87 e0       	ldi	r24, 0x07	; 7
    2f8a:	80 93 91 00 	sts	0x0091, r24
						uTmrState=defStateTm+1;       //reload the state timer to stay in this state
    2f8e:	89 ec       	ldi	r24, 0xC9	; 201
    2f90:	80 93 62 00 	sts	0x0062, r24
					}
					uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    2f94:	8e e0       	ldi	r24, 0x0E	; 14
    2f96:	80 93 6f 00 	sts	0x006F, r24
				}
				uTmrState--;	//count down to a blink for the range number
    2f9a:	80 91 62 00 	lds	r24, 0x0062
    2f9e:	81 50       	subi	r24, 0x01	; 1
    2fa0:	80 93 62 00 	sts	0x0062, r24
				if(uTmrState==0)
    2fa4:	80 91 62 00 	lds	r24, 0x0062
    2fa8:	88 23       	and	r24, r24
    2faa:	19 f4       	brne	.+6      	; 0x2fb2
				{
					uTmrState=defSettingBlinkOff;	//reset the range blinking number
    2fac:	80 e5       	ldi	r24, 0x50	; 80
    2fae:	80 93 62 00 	sts	0x0062, r24
				}
				if(uTmrState==defSettingBlinkOff)	//this code turns off the character that is blinking
    2fb2:	80 91 62 00 	lds	r24, 0x0062
    2fb6:	80 35       	cpi	r24, 0x50	; 80
    2fb8:	09 f5       	brne	.+66     	; 0x2ffc
				{
					switch(uTimeSetState)	//what are we going to set?
    2fba:	80 91 85 00 	lds	r24, 0x0085
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	33 27       	eor	r19, r19
    2fc2:	2f 87       	std	Y+15, r18	; 0x0f
    2fc4:	38 8b       	std	Y+16, r19	; 0x10
    2fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc8:	98 89       	ldd	r25, Y+16	; 0x10
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	31 f0       	breq	.+12     	; 0x2fda
    2fce:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fd0:	38 89       	ldd	r19, Y+16	; 0x10
    2fd2:	21 30       	cpi	r18, 0x01	; 1
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	51 f0       	breq	.+20     	; 0x2fec
    2fd8:	11 c0       	rjmp	.+34     	; 0x2ffc
					{
						case 0:		//set the hour
							BigDigits(2,0,0,0,false);
    2fda:	00 e0       	ldi	r16, 0x00	; 0
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	0e 94 92 0b 	call	0x1724
						break;
    2fea:	08 c0       	rjmp	.+16     	; 0x2ffc
						case 1:		//set the minute
							BigDigits(2,61,0,0,false);		//the column was 60
    2fec:	00 e0       	ldi	r16, 0x00	; 0
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	50 e0       	ldi	r21, 0x00	; 0
    2ff4:	6d e3       	ldi	r22, 0x3D	; 61
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	0e 94 92 0b 	call	0x1724
						break;
					}
				}
				if(uTmrState==defSettingBlinkOn)	//this code turns on the character that is blinking
    2ffc:	80 91 62 00 	lds	r24, 0x0062
    3000:	88 32       	cpi	r24, 0x28	; 40
    3002:	09 f0       	breq	.+2      	; 0x3006
    3004:	76 c2       	rjmp	.+1260   	; 0x34f2
				{
					switch(uTimeSetState)	//what are we going to set?
    3006:	80 91 85 00 	lds	r24, 0x0085
    300a:	28 2f       	mov	r18, r24
    300c:	33 27       	eor	r19, r19
    300e:	29 8b       	std	Y+17, r18	; 0x11
    3010:	3a 8b       	std	Y+18, r19	; 0x12
    3012:	89 89       	ldd	r24, Y+17	; 0x11
    3014:	9a 89       	ldd	r25, Y+18	; 0x12
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	31 f0       	breq	.+12     	; 0x3026
    301a:	29 89       	ldd	r18, Y+17	; 0x11
    301c:	3a 89       	ldd	r19, Y+18	; 0x12
    301e:	21 30       	cpi	r18, 0x01	; 1
    3020:	31 05       	cpc	r19, r1
    3022:	31 f0       	breq	.+12     	; 0x3030
    3024:	66 c2       	rjmp	.+1228   	; 0x34f2
					{
						case 0:		//set the hour
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    3026:	62 e0       	ldi	r22, 0x02	; 2
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	0e 94 f6 1c 	call	0x39ec
						break;
    302e:	61 c2       	rjmp	.+1218   	; 0x34f2
						case 1:		//set the minute
							ShowLargeAlarmTime(0,2);		//uStartColumn, uRow
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 f6 1c 	call	0x39ec
						break;
					}
				}				
			break;
    3038:	5c c2       	rjmp	.+1208   	; 0x34f2

			case 62:	//sets the backlight on and off times
                if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    303a:	80 91 39 00 	lds	r24, 0x0039
    303e:	99 27       	eor	r25, r25
    3040:	96 95       	lsr	r25
    3042:	87 95       	ror	r24
    3044:	96 95       	lsr	r25
    3046:	87 95       	ror	r24
    3048:	81 70       	andi	r24, 0x01	; 1
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	71 f5       	brne	.+92     	; 0x30ac
    3050:	80 91 6d 00 	lds	r24, 0x006D
    3054:	88 23       	and	r24, r24
    3056:	51 f5       	brne	.+84     	; 0x30ac
                {
					if(uTimeSetState==0)	//are we setting the backlight off time?
    3058:	80 91 85 00 	lds	r24, 0x0085
    305c:	88 23       	and	r24, r24
    305e:	71 f4       	brne	.+28     	; 0x307c
					{
						if(uBacklightOffHour==23)	//is it time to cycle the hour back around?
    3060:	80 91 81 00 	lds	r24, 0x0081
    3064:	87 31       	cpi	r24, 0x17	; 23
    3066:	19 f4       	brne	.+6      	; 0x306e
						{
							uBacklightOffHour=0;
    3068:	10 92 81 00 	sts	0x0081, r1
    306c:	05 c0       	rjmp	.+10     	; 0x3078
						}
						else
						{
							uBacklightOffHour++;	//increase the hour
    306e:	80 91 81 00 	lds	r24, 0x0081
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	80 93 81 00 	sts	0x0081, r24
						}
						setBacklightOffTime();		//show the new backlight off hour on the display
    3078:	0e 94 5f 1d 	call	0x3abe
					}
					if(uTimeSetState==1)	//are we setting the backlight on time?
    307c:	80 91 85 00 	lds	r24, 0x0085
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	71 f4       	brne	.+28     	; 0x30a0
					{
						if(uBacklightOnHour==23)	//is it time to cycle the backlight on hour around?
    3084:	80 91 84 00 	lds	r24, 0x0084
    3088:	87 31       	cpi	r24, 0x17	; 23
    308a:	19 f4       	brne	.+6      	; 0x3092
						{
							uBacklightOnHour=0;
    308c:	10 92 84 00 	sts	0x0084, r1
    3090:	05 c0       	rjmp	.+10     	; 0x309c
						}
						else
						{
							uBacklightOnHour++;		//increase the backlight on hour
    3092:	80 91 84 00 	lds	r24, 0x0084
    3096:	8f 5f       	subi	r24, 0xFF	; 255
    3098:	80 93 84 00 	sts	0x0084, r24
						}
						setBacklightOnTime();	//update the backlight on time on the the display
    309c:	0e 94 a5 1d 	call	0x3b4a
					}
                    uTmrState=defDlyAfterBtnPress;  //load up the blink timer
    30a0:	86 e9       	ldi	r24, 0x96	; 150
    30a2:	80 93 62 00 	sts	0x0062, r24
                    uBtnUpTmr=defBtnDbn;    //load up the debounce timer, so we don't immediately go back in here
    30a6:	8e e0       	ldi	r24, 0x0E	; 14
    30a8:	80 93 6d 00 	sts	0x006D, r24
				}
                //has the down button been pressed?
                if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    30ac:	80 91 39 00 	lds	r24, 0x0039
    30b0:	99 27       	eor	r25, r25
    30b2:	96 95       	lsr	r25
    30b4:	87 95       	ror	r24
    30b6:	96 95       	lsr	r25
    30b8:	87 95       	ror	r24
    30ba:	96 95       	lsr	r25
    30bc:	87 95       	ror	r24
    30be:	81 70       	andi	r24, 0x01	; 1
    30c0:	90 70       	andi	r25, 0x00	; 0
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	81 f5       	brne	.+96     	; 0x3126
    30c6:	80 91 6e 00 	lds	r24, 0x006E
    30ca:	88 23       	and	r24, r24
    30cc:	61 f5       	brne	.+88     	; 0x3126
                {
					if(uTimeSetState==0)
    30ce:	80 91 85 00 	lds	r24, 0x0085
    30d2:	88 23       	and	r24, r24
    30d4:	79 f4       	brne	.+30     	; 0x30f4
					{
						if(uBacklightOffHour==0)
    30d6:	80 91 81 00 	lds	r24, 0x0081
    30da:	88 23       	and	r24, r24
    30dc:	21 f4       	brne	.+8      	; 0x30e6
						{
							uBacklightOffHour=23;
    30de:	87 e1       	ldi	r24, 0x17	; 23
    30e0:	80 93 81 00 	sts	0x0081, r24
    30e4:	05 c0       	rjmp	.+10     	; 0x30f0
						}
						else
						{
							uBacklightOffHour--;
    30e6:	80 91 81 00 	lds	r24, 0x0081
    30ea:	81 50       	subi	r24, 0x01	; 1
    30ec:	80 93 81 00 	sts	0x0081, r24
						}
						setBacklightOffTime();
    30f0:	0e 94 5f 1d 	call	0x3abe
					}
					if(uTimeSetState==1)
    30f4:	80 91 85 00 	lds	r24, 0x0085
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	79 f4       	brne	.+30     	; 0x311a
					{
						if(uBacklightOnHour==0)
    30fc:	80 91 84 00 	lds	r24, 0x0084
    3100:	88 23       	and	r24, r24
    3102:	21 f4       	brne	.+8      	; 0x310c
						{
							uBacklightOnHour=23;
    3104:	87 e1       	ldi	r24, 0x17	; 23
    3106:	80 93 84 00 	sts	0x0084, r24
    310a:	05 c0       	rjmp	.+10     	; 0x3116
						}
						else
						{
							uBacklightOnHour--;
    310c:	80 91 84 00 	lds	r24, 0x0084
    3110:	81 50       	subi	r24, 0x01	; 1
    3112:	80 93 84 00 	sts	0x0084, r24
						}
						setBacklightOnTime();
    3116:	0e 94 a5 1d 	call	0x3b4a
					}
                    uTmrState=defDlyAfterBtnPress;  //load up the blink timer
    311a:	86 e9       	ldi	r24, 0x96	; 150
    311c:	80 93 62 00 	sts	0x0062, r24
                    uBtnDwnTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    3120:	8e e0       	ldi	r24, 0x0E	; 14
    3122:	80 93 6e 00 	sts	0x006E, r24
				}                
				//has the enter button been pressed?
                if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    3126:	80 91 39 00 	lds	r24, 0x0039
    312a:	99 27       	eor	r25, r25
    312c:	96 95       	lsr	r25
    312e:	87 95       	ror	r24
    3130:	81 70       	andi	r24, 0x01	; 1
    3132:	90 70       	andi	r25, 0x00	; 0
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	31 f5       	brne	.+76     	; 0x3184
    3138:	80 91 6f 00 	lds	r24, 0x006F
    313c:	88 23       	and	r24, r24
    313e:	11 f5       	brne	.+68     	; 0x3184
                {   //pressing the enter button takes us back to the main menu
					if(uTimeSetState==0)
    3140:	80 91 85 00 	lds	r24, 0x0085
    3144:	88 23       	and	r24, r24
    3146:	31 f4       	brne	.+12     	; 0x3154
					{
						uTimeSetState=1;	//go allow the user to set the backlight on time
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	80 93 85 00 	sts	0x0085, r24
						//if the display is blinking this makes sure the value is written when we go to set the backlight off time
						setBacklightOffTime();	//update the backlight on time on the the display
    314e:	0e 94 5f 1d 	call	0x3abe
    3152:	15 c0       	rjmp	.+42     	; 0x317e
					}
					else
					{
						eeprom_write_byte((u08*)&EEBacklightOnHour,uBacklightOnHour);	//store the backlight Hour on value in EEPROM
    3154:	60 91 84 00 	lds	r22, 0x0084
    3158:	88 e0       	ldi	r24, 0x08	; 8
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 00 1e 	call	0x3c00
						eeprom_write_byte((u08*)&EEBacklightOffHour,uBacklightOffHour);//store the backlight on hour in EEPROM
    3160:	60 91 81 00 	lds	r22, 0x0081
    3164:	89 e0       	ldi	r24, 0x09	; 9
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 00 1e 	call	0x3c00
						uState=50;      //go back to the Main Menu
    316c:	82 e3       	ldi	r24, 0x32	; 50
    316e:	80 93 6c 00 	sts	0x006C, r24
						uTmrState=defStateTm+1;       //reload the state timer
    3172:	89 ec       	ldi	r24, 0xC9	; 201
    3174:	80 93 62 00 	sts	0x0062, r24
						uSelectedLine=defState50HighlightMax;	//when we get back to the main menu, the exit button will be highlighted
    3178:	87 e0       	ldi	r24, 0x07	; 7
    317a:	80 93 91 00 	sts	0x0091, r24
					}
                    uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    317e:	8e e0       	ldi	r24, 0x0E	; 14
    3180:	80 93 6f 00 	sts	0x006F, r24
                }				
                //from here to the break blinks the Trigger Value
                uTmrState--;    //count down to a blink
    3184:	80 91 62 00 	lds	r24, 0x0062
    3188:	81 50       	subi	r24, 0x01	; 1
    318a:	80 93 62 00 	sts	0x0062, r24
                if(uTmrState==0)
    318e:	80 91 62 00 	lds	r24, 0x0062
    3192:	88 23       	and	r24, r24
    3194:	19 f4       	brne	.+6      	; 0x319c
                {
                    uTmrState=defSettingBlinkOff;   //reset the number blinking timer
    3196:	80 e5       	ldi	r24, 0x50	; 80
    3198:	80 93 62 00 	sts	0x0062, r24
                }
                if(uTmrState==defSettingBlinkOff)   //turn off the number
    319c:	80 91 62 00 	lds	r24, 0x0062
    31a0:	80 35       	cpi	r24, 0x50	; 80
    31a2:	89 f4       	brne	.+34     	; 0x31c6
                {
					if(uTimeSetState==0)
    31a4:	80 91 85 00 	lds	r24, 0x0085
    31a8:	88 23       	and	r24, r24
    31aa:	39 f4       	brne	.+14     	; 0x31ba
					{
						set_line(2);	//The trigger value is on line 5
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	0e 94 f7 08 	call	0x11ee
						write_pixel_spaces(33); //write over the digits that are not used anymore
    31b2:	81 e2       	ldi	r24, 0x21	; 33
    31b4:	0e 94 96 0a 	call	0x152c
    31b8:	06 c0       	rjmp	.+12     	; 0x31c6
					}
					else
					{
						set_line(5);	//The trigger value is on line 5
    31ba:	85 e0       	ldi	r24, 0x05	; 5
    31bc:	0e 94 f7 08 	call	0x11ee
						write_pixel_spaces(33); //write over the digits that are not used anymore
    31c0:	81 e2       	ldi	r24, 0x21	; 33
    31c2:	0e 94 96 0a 	call	0x152c
					}
                }
                if(uTmrState==defSettingBlinkOn)    //make the minimum Speed number visible
    31c6:	80 91 62 00 	lds	r24, 0x0062
    31ca:	88 32       	cpi	r24, 0x28	; 40
    31cc:	49 f4       	brne	.+18     	; 0x31e0
                {
					if(uTimeSetState==0)
    31ce:	80 91 85 00 	lds	r24, 0x0085
    31d2:	88 23       	and	r24, r24
    31d4:	19 f4       	brne	.+6      	; 0x31dc
					{
						setBacklightOffTime();
    31d6:	0e 94 5f 1d 	call	0x3abe
    31da:	02 c0       	rjmp	.+4      	; 0x31e0
					}
					else
					{
						setBacklightOnTime();
    31dc:	0e 94 a5 1d 	call	0x3b4a
					}
                }
				if(uTmrState>defStateTm)	//paint the new screen for the backlight on and off times
    31e0:	80 91 62 00 	lds	r24, 0x0062
    31e4:	89 3c       	cpi	r24, 0xC9	; 201
    31e6:	08 f4       	brcc	.+2      	; 0x31ea
    31e8:	84 c1       	rjmp	.+776    	; 0x34f2
				{
					drawText((unsigned char *)strBacklightOffTime,0,0,false);	//colum, row, no highlight
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	40 e0       	ldi	r20, 0x00	; 0
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	8e e0       	ldi	r24, 0x0E	; 14
    31f2:	95 e0       	ldi	r25, 0x05	; 5
    31f4:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strUsuallyTen,defTab,1,false);	//colum, row, no highlight
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	41 e0       	ldi	r20, 0x01	; 1
    31fc:	6a e0       	ldi	r22, 0x0A	; 10
    31fe:	83 e3       	ldi	r24, 0x33	; 51
    3200:	95 e0       	ldi	r25, 0x05	; 5
    3202:	0e 94 30 0d 	call	0x1a60
					setBacklightOffTime();
    3206:	0e 94 5f 1d 	call	0x3abe
					drawText((unsigned char *)strBacklightOnTime,0,3,false);	//colum, row, no highlight
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	43 e0       	ldi	r20, 0x03	; 3
    320e:	60 e0       	ldi	r22, 0x00	; 0
    3210:	81 e2       	ldi	r24, 0x21	; 33
    3212:	95 e0       	ldi	r25, 0x05	; 5
    3214:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strUsuallySix,defTab,4,false);	//colum, row, no highlight
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	44 e0       	ldi	r20, 0x04	; 4
    321c:	6a e0       	ldi	r22, 0x0A	; 10
    321e:	85 e4       	ldi	r24, 0x45	; 69
    3220:	95 e0       	ldi	r25, 0x05	; 5
    3222:	0e 94 30 0d 	call	0x1a60
					setBacklightOnTime();
    3226:	0e 94 a5 1d 	call	0x3b4a
					uTmrState=defSettingBlinkOff+1;	//don't go in here again and start the blining of the active backlight off time
    322a:	81 e5       	ldi	r24, 0x51	; 81
    322c:	80 93 62 00 	sts	0x0062, r24
				}			
			break;
    3230:	60 c1       	rjmp	.+704    	; 0x34f2

			case 63:	//allows the user to change the photo trigger value
                if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    3232:	80 91 39 00 	lds	r24, 0x0039
    3236:	99 27       	eor	r25, r25
    3238:	96 95       	lsr	r25
    323a:	87 95       	ror	r24
    323c:	96 95       	lsr	r25
    323e:	87 95       	ror	r24
    3240:	81 70       	andi	r24, 0x01	; 1
    3242:	90 70       	andi	r25, 0x00	; 0
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	49 f5       	brne	.+82     	; 0x329a
    3248:	80 91 6d 00 	lds	r24, 0x006D
    324c:	88 23       	and	r24, r24
    324e:	29 f5       	brne	.+74     	; 0x329a
                {
					if(intUserPhotoTriggerValue<975)
    3250:	80 91 88 00 	lds	r24, 0x0088
    3254:	90 91 89 00 	lds	r25, 0x0089
    3258:	33 e0       	ldi	r19, 0x03	; 3
    325a:	8f 3c       	cpi	r24, 0xCF	; 207
    325c:	93 07       	cpc	r25, r19
    325e:	48 f4       	brcc	.+18     	; 0x3272
					{
						intUserPhotoTriggerValue=intUserPhotoTriggerValue+25;
    3260:	80 91 88 00 	lds	r24, 0x0088
    3264:	90 91 89 00 	lds	r25, 0x0089
    3268:	49 96       	adiw	r24, 0x19	; 25
    326a:	90 93 89 00 	sts	0x0089, r25
    326e:	80 93 88 00 	sts	0x0088, r24
					}
					set_line(5);
    3272:	85 e0       	ldi	r24, 0x05	; 5
    3274:	0e 94 f7 08 	call	0x11ee
                    write_pixel_spaces(20);
    3278:	84 e1       	ldi	r24, 0x14	; 20
    327a:	0e 94 96 0a 	call	0x152c
					write_small_numbers(intUserPhotoTriggerValue,false,3);	//
    327e:	43 e0       	ldi	r20, 0x03	; 3
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	80 91 88 00 	lds	r24, 0x0088
    3286:	90 91 89 00 	lds	r25, 0x0089
    328a:	0e 94 3a 1c 	call	0x3874

                    uTmrState=defDlyAfterBtnPress;  //load up the blink timer
    328e:	86 e9       	ldi	r24, 0x96	; 150
    3290:	80 93 62 00 	sts	0x0062, r24
                    uBtnUpTmr=defBtnDbn;    //load up the debounce timer, so we don't immediately go back in here
    3294:	8e e0       	ldi	r24, 0x0E	; 14
    3296:	80 93 6d 00 	sts	0x006D, r24
				}
                //has the down button been pressed?
                if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    329a:	80 91 39 00 	lds	r24, 0x0039
    329e:	99 27       	eor	r25, r25
    32a0:	96 95       	lsr	r25
    32a2:	87 95       	ror	r24
    32a4:	96 95       	lsr	r25
    32a6:	87 95       	ror	r24
    32a8:	96 95       	lsr	r25
    32aa:	87 95       	ror	r24
    32ac:	81 70       	andi	r24, 0x01	; 1
    32ae:	90 70       	andi	r25, 0x00	; 0
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	41 f5       	brne	.+80     	; 0x3304
    32b4:	80 91 6e 00 	lds	r24, 0x006E
    32b8:	88 23       	and	r24, r24
    32ba:	21 f5       	brne	.+72     	; 0x3304
                {
					if(intUserPhotoTriggerValue>25)
    32bc:	80 91 88 00 	lds	r24, 0x0088
    32c0:	90 91 89 00 	lds	r25, 0x0089
    32c4:	8a 31       	cpi	r24, 0x1A	; 26
    32c6:	91 05       	cpc	r25, r1
    32c8:	48 f0       	brcs	.+18     	; 0x32dc
					{
						intUserPhotoTriggerValue=intUserPhotoTriggerValue-25;
    32ca:	80 91 88 00 	lds	r24, 0x0088
    32ce:	90 91 89 00 	lds	r25, 0x0089
    32d2:	49 97       	sbiw	r24, 0x19	; 25
    32d4:	90 93 89 00 	sts	0x0089, r25
    32d8:	80 93 88 00 	sts	0x0088, r24
					}
					set_line(5);
    32dc:	85 e0       	ldi	r24, 0x05	; 5
    32de:	0e 94 f7 08 	call	0x11ee
                    write_pixel_spaces(20);
    32e2:	84 e1       	ldi	r24, 0x14	; 20
    32e4:	0e 94 96 0a 	call	0x152c
					write_small_numbers(intUserPhotoTriggerValue,false,3);	//
    32e8:	43 e0       	ldi	r20, 0x03	; 3
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	80 91 88 00 	lds	r24, 0x0088
    32f0:	90 91 89 00 	lds	r25, 0x0089
    32f4:	0e 94 3a 1c 	call	0x3874
                    uTmrState=defDlyAfterBtnPress;  //load up the blink timer
    32f8:	86 e9       	ldi	r24, 0x96	; 150
    32fa:	80 93 62 00 	sts	0x0062, r24
                    uBtnDwnTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    32fe:	8e e0       	ldi	r24, 0x0E	; 14
    3300:	80 93 6e 00 	sts	0x006E, r24
				}
                //has the enter button been pressed?
                if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    3304:	80 91 39 00 	lds	r24, 0x0039
    3308:	99 27       	eor	r25, r25
    330a:	96 95       	lsr	r25
    330c:	87 95       	ror	r24
    330e:	81 70       	andi	r24, 0x01	; 1
    3310:	90 70       	andi	r25, 0x00	; 0
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	c1 f4       	brne	.+48     	; 0x3346
    3316:	80 91 6f 00 	lds	r24, 0x006F
    331a:	88 23       	and	r24, r24
    331c:	a1 f4       	brne	.+40     	; 0x3346
                {   //pressing the enter button takes us back to the main menu
					eeprom_write_word((uint16_t*)&EEPhotoTriggerValue,intUserPhotoTriggerValue);	//store the phototrigger value in EEPROM when the user has set a new value
    331e:	60 91 88 00 	lds	r22, 0x0088
    3322:	70 91 89 00 	lds	r23, 0x0089
    3326:	86 e0       	ldi	r24, 0x06	; 6
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 0b 1e 	call	0x3c16
                    uState=50;      //go back to the Main Menu
    332e:	82 e3       	ldi	r24, 0x32	; 50
    3330:	80 93 6c 00 	sts	0x006C, r24
                    uTmrState=defStateTm+1;       //reload the state timer
    3334:	89 ec       	ldi	r24, 0xC9	; 201
    3336:	80 93 62 00 	sts	0x0062, r24
					uSelectedLine=defState50HighlightMax;	//when we get back to the main menu, the exit button will be highlighted
    333a:	87 e0       	ldi	r24, 0x07	; 7
    333c:	80 93 91 00 	sts	0x0091, r24
                    uBtnEnterTmr=defBtnDbn;   //load up the debounce timer, so we don't immediately go back in here
    3340:	8e e0       	ldi	r24, 0x0E	; 14
    3342:	80 93 6f 00 	sts	0x006F, r24
                }
                //from here to the break blinks the Trigger Value
                uTmrState--;    //count down to a blink
    3346:	80 91 62 00 	lds	r24, 0x0062
    334a:	81 50       	subi	r24, 0x01	; 1
    334c:	80 93 62 00 	sts	0x0062, r24
                if(uTmrState==0)
    3350:	80 91 62 00 	lds	r24, 0x0062
    3354:	88 23       	and	r24, r24
    3356:	19 f4       	brne	.+6      	; 0x335e
                {
                    uTmrState=defSettingBlinkOff;   //reset the number blinking timer
    3358:	80 e5       	ldi	r24, 0x50	; 80
    335a:	80 93 62 00 	sts	0x0062, r24
                }
                if(uTmrState==defSettingBlinkOff)   //turn off the number
    335e:	80 91 62 00 	lds	r24, 0x0062
    3362:	80 35       	cpi	r24, 0x50	; 80
    3364:	69 f4       	brne	.+26     	; 0x3380
                {
					set_line(5);	//The trigger value is on line 5
    3366:	85 e0       	ldi	r24, 0x05	; 5
    3368:	0e 94 f7 08 	call	0x11ee
                    write_pixel_spaces(90); //write over the digits that are not used anymore
    336c:	8a e5       	ldi	r24, 0x5A	; 90
    336e:	0e 94 96 0a 	call	0x152c
					ADMUX=0;	//select analog channel 0 for the ADC conversion
    3372:	10 92 27 00 	sts	0x0027, r1
					ADCSRA|=0x40;	//start the ADC conversion process
    3376:	80 91 26 00 	lds	r24, 0x0026
    337a:	80 64       	ori	r24, 0x40	; 64
    337c:	80 93 26 00 	sts	0x0026, r24
                }
                if(uTmrState==defSettingBlinkOn)    //make the minimum Speed number visible
    3380:	80 91 62 00 	lds	r24, 0x0062
    3384:	88 32       	cpi	r24, 0x28	; 40
    3386:	81 f5       	brne	.+96     	; 0x33e8
                {
					uTmrGeneral=40;
    3388:	88 e2       	ldi	r24, 0x28	; 40
    338a:	80 93 64 00 	sts	0x0064, r24
					ADCSRA|=0x10;	//return the ADC, the 10 bit value is stored in the integer ADC
    338e:	80 91 26 00 	lds	r24, 0x0026
    3392:	80 61       	ori	r24, 0x10	; 16
    3394:	80 93 26 00 	sts	0x0026, r24
                    drawText((unsigned char *)strPhotocellReading,defTab,3,false);	//put up the label for the 
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	43 e0       	ldi	r20, 0x03	; 3
    339c:	6a e0       	ldi	r22, 0x0A	; 10
    339e:	8c ee       	ldi	r24, 0xEC	; 236
    33a0:	94 e0       	ldi	r25, 0x04	; 4
    33a2:	0e 94 30 0d 	call	0x1a60
					write_char(0x00,false);	//A white space 
    33a6:	60 e0       	ldi	r22, 0x00	; 0
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	0e 94 b5 09 	call	0x136a
					write_small_numbers(ADC,false,3);	//write the 3 digit ADC
    33ae:	43 e0       	ldi	r20, 0x03	; 3
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	80 91 24 00 	lds	r24, 0x0024
    33b6:	90 91 25 00 	lds	r25, 0x0025
    33ba:	0e 94 3a 1c 	call	0x3874
					drawText((unsigned char *)strSetTriggerValue,defTab,4,false);	//colum, row, no highlight
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	44 e0       	ldi	r20, 0x04	; 4
    33c2:	6a e0       	ldi	r22, 0x0A	; 10
    33c4:	8b ef       	ldi	r24, 0xFB	; 251
    33c6:	94 e0       	ldi	r25, 0x04	; 4
    33c8:	0e 94 30 0d 	call	0x1a60
					set_line(5);
    33cc:	85 e0       	ldi	r24, 0x05	; 5
    33ce:	0e 94 f7 08 	call	0x11ee
                    write_pixel_spaces(20);
    33d2:	84 e1       	ldi	r24, 0x14	; 20
    33d4:	0e 94 96 0a 	call	0x152c
					write_small_numbers(intUserPhotoTriggerValue,false,3);	//
    33d8:	43 e0       	ldi	r20, 0x03	; 3
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	80 91 88 00 	lds	r24, 0x0088
    33e0:	90 91 89 00 	lds	r25, 0x0089
    33e4:	0e 94 3a 1c 	call	0x3874
                }
				if(uTmrState>defStateTm)	//paint the new screen
    33e8:	80 91 62 00 	lds	r24, 0x0062
    33ec:	89 3c       	cpi	r24, 0xC9	; 201
    33ee:	08 f4       	brcc	.+2      	; 0x33f2
    33f0:	80 c0       	rjmp	.+256    	; 0x34f2
				{
					drawText((unsigned char *)strPhotoTriggerValue,0,0,false);	//colum, row, no highlight
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	8a eb       	ldi	r24, 0xBA	; 186
    33fa:	94 e0       	ldi	r25, 0x04	; 4
    33fc:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strDarkRoom,defTab,1,false);	//colum, row, no highlight
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	6a e0       	ldi	r22, 0x0A	; 10
    3406:	8e ec       	ldi	r24, 0xCE	; 206
    3408:	94 e0       	ldi	r25, 0x04	; 4
    340a:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strBrightRoom,defTab,2,false);	//colum, row, no highlight
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	42 e0       	ldi	r20, 0x02	; 2
    3412:	6a e0       	ldi	r22, 0x0A	; 10
    3414:	8c ed       	ldi	r24, 0xDC	; 220
    3416:	94 e0       	ldi	r25, 0x04	; 4
    3418:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strPhotocellReading,defTab,3,false);	//colum, row, no highlight
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	43 e0       	ldi	r20, 0x03	; 3
    3420:	6a e0       	ldi	r22, 0x0A	; 10
    3422:	8c ee       	ldi	r24, 0xEC	; 236
    3424:	94 e0       	ldi	r25, 0x04	; 4
    3426:	0e 94 30 0d 	call	0x1a60
					drawText((unsigned char *)strSetTriggerValue,defTab,4,false);	//colum, row, no highlight
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	44 e0       	ldi	r20, 0x04	; 4
    342e:	6a e0       	ldi	r22, 0x0A	; 10
    3430:	8b ef       	ldi	r24, 0xFB	; 251
    3432:	94 e0       	ldi	r25, 0x04	; 4
    3434:	0e 94 30 0d 	call	0x1a60
					uTmrState=defSettingBlinkOff+1;	//don't go in here again and 
    3438:	81 e5       	ldi	r24, 0x51	; 81
    343a:	80 93 62 00 	sts	0x0062, r24
				}
			break;
    343e:	59 c0       	rjmp	.+178    	; 0x34f2

			case 64:	//This puts up the "about this clock" information
				if(bit_is_clear(defPushBtnPort,defUpBtn) && uBtnUpTmr==0)  //is the Menu button 1 pressed?
    3440:	80 91 39 00 	lds	r24, 0x0039
    3444:	99 27       	eor	r25, r25
    3446:	96 95       	lsr	r25
    3448:	87 95       	ror	r24
    344a:	96 95       	lsr	r25
    344c:	87 95       	ror	r24
    344e:	81 70       	andi	r24, 0x01	; 1
    3450:	90 70       	andi	r25, 0x00	; 0
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	69 f4       	brne	.+26     	; 0x3470
    3456:	80 91 6d 00 	lds	r24, 0x006D
    345a:	88 23       	and	r24, r24
    345c:	49 f4       	brne	.+18     	; 0x3470
				{				
					uTmrState=defStateTm;
    345e:	88 ec       	ldi	r24, 0xC8	; 200
    3460:	80 93 62 00 	sts	0x0062, r24
					uState=50;			//go back to the main menu
    3464:	82 e3       	ldi	r24, 0x32	; 50
    3466:	80 93 6c 00 	sts	0x006C, r24
					uBtnUpTmr=defBtnDbn;   	//load up the debounce timer, so we don't immediately go back in here
    346a:	8e e0       	ldi	r24, 0x0E	; 14
    346c:	80 93 6d 00 	sts	0x006D, r24
				}
				if(bit_is_clear(defPushBtnPort,defDownBtn) && uBtnDwnTmr==0)  //is the Menu button 2 pressed?
    3470:	80 91 39 00 	lds	r24, 0x0039
    3474:	99 27       	eor	r25, r25
    3476:	96 95       	lsr	r25
    3478:	87 95       	ror	r24
    347a:	96 95       	lsr	r25
    347c:	87 95       	ror	r24
    347e:	96 95       	lsr	r25
    3480:	87 95       	ror	r24
    3482:	81 70       	andi	r24, 0x01	; 1
    3484:	90 70       	andi	r25, 0x00	; 0
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	69 f4       	brne	.+26     	; 0x34a4
    348a:	80 91 6e 00 	lds	r24, 0x006E
    348e:	88 23       	and	r24, r24
    3490:	49 f4       	brne	.+18     	; 0x34a4
				{
					uTmrState=defStateTm;
    3492:	88 ec       	ldi	r24, 0xC8	; 200
    3494:	80 93 62 00 	sts	0x0062, r24
					uState=50;			//go back to the main menu
    3498:	82 e3       	ldi	r24, 0x32	; 50
    349a:	80 93 6c 00 	sts	0x006C, r24
					uBtnDwnTmr=defBtnDbn;   	//load up the debounce timer, so we don't immediately go back in here
    349e:	8e e0       	ldi	r24, 0x0E	; 14
    34a0:	80 93 6e 00 	sts	0x006E, r24
				}
				if(bit_is_clear(defPushBtnPort,defEnterBtn) && uBtnEnterTmr==0)  //is the Menu button 2 pressed?
    34a4:	80 91 39 00 	lds	r24, 0x0039
    34a8:	99 27       	eor	r25, r25
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	81 70       	andi	r24, 0x01	; 1
    34b0:	90 70       	andi	r25, 0x00	; 0
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	69 f4       	brne	.+26     	; 0x34d0
    34b6:	80 91 6f 00 	lds	r24, 0x006F
    34ba:	88 23       	and	r24, r24
    34bc:	49 f4       	brne	.+18     	; 0x34d0
				{	
					uTmrState=defStateTm;
    34be:	88 ec       	ldi	r24, 0xC8	; 200
    34c0:	80 93 62 00 	sts	0x0062, r24
					uState=50;			//go back to the main menu
    34c4:	82 e3       	ldi	r24, 0x32	; 50
    34c6:	80 93 6c 00 	sts	0x006C, r24
					uBtnEnterTmr=defBtnDbn;   	//load up the debounce timer, so we don't immediately go back in here
    34ca:	8e e0       	ldi	r24, 0x0E	; 14
    34cc:	80 93 6f 00 	sts	0x006F, r24
				}
				if(uTmrState==5)
    34d0:	80 91 62 00 	lds	r24, 0x0062
    34d4:	85 30       	cpi	r24, 0x05	; 5
    34d6:	69 f4       	brne	.+26     	; 0x34f2
				{
					clear_display();	//clear the whole display
    34d8:	0e 94 00 0a 	call	0x1400
					paintMenu((unsigned char *)str64,defState64HighlightMin,defState64HighlightMax);	//string, column, line, inverted
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	84 e0       	ldi	r24, 0x04	; 4
    34e2:	99 e0       	ldi	r25, 0x09	; 9
    34e4:	0e 94 1a 0e 	call	0x1c34
					uTmrState--;	//don't go in here again
    34e8:	80 91 62 00 	lds	r24, 0x0062
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	80 93 62 00 	sts	0x0062, r24
    34f2:	64 96       	adiw	r28, 0x14	; 20
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
    34fe:	df 91       	pop	r29
    3500:	cf 91       	pop	r28
    3502:	0f 91       	pop	r16
    3504:	08 95       	ret

00003506 <InitLCD>:
				}
			break;

		}
	}
}

void InitLCD(void)
{
    3506:	cf 93       	push	r28
    3508:	df 93       	push	r29
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
//	u08 uEVR=0x20;
//	u08 uRR=0x27;
	
	sbi(defLCDContPort,defLcdRES);       //take the display out of reset
    350e:	80 91 38 00 	lds	r24, 0x0038
    3512:	82 60       	ori	r24, 0x02	; 2
    3514:	80 93 38 00 	sts	0x0038, r24

	write_command(0xe2);		//reset display, datasheet
    3518:	82 ee       	ldi	r24, 0xE2	; 226
    351a:	0e 94 bf 1a 	call	0x357e
	//write_command(0xa2);		//lcd bias setting, not used for the old oprex display!!!!
	write_command(0xa1);		//reverse segment driver select, must be set to 0xa1.
    351e:	81 ea       	ldi	r24, 0xA1	; 161
    3520:	0e 94 bf 1a 	call	0x357e
	write_command(0xc0);		//common output normal, datasheet
    3524:	80 ec       	ldi	r24, 0xC0	; 192
    3526:	0e 94 bf 1a 	call	0x357e
	write_command(0xa6);
    352a:	86 ea       	ldi	r24, 0xA6	; 166
    352c:	0e 94 bf 1a 	call	0x357e
	//write_command(0xc8);
	#ifdef defS1D15605			//older Optrex displays, F-51553
		write_command(0x24);	//v5 resistor ratio, S1D15605 driver IC
    3530:	84 e2       	ldi	r24, 0x24	; 36
    3532:	0e 94 bf 1a 	call	0x357e
	#else						//new Optrex Displays, F-51852
		write_command(0xe6);	//Driver on/off, NJU6676 driver IC
	#endif
	write_command(0x81);		//electronic volume set, datasheet
    3536:	81 e8       	ldi	r24, 0x81	; 129
    3538:	0e 94 bf 1a 	call	0x357e
	#ifdef defS1D15605			//older Optrex displays, F-51553
		write_command(0x10);		//electronic volume init, datasheet
    353c:	80 e1       	ldi	r24, 0x10	; 16
    353e:	0e 94 bf 1a 	call	0x357e
	#else						//new Optrex Displays, F-51852
		write_command(0x20);	//the second part of the electronic volume set
	#endif
	write_command(0x2f);		//power control, datasheet:  turn on everything
    3542:	8f e2       	ldi	r24, 0x2F	; 47
    3544:	0e 94 bf 1a 	call	0x357e
	write_command(0x40);		//start line set, datasheet:  start on line address 0
    3548:	80 e4       	ldi	r24, 0x40	; 64
    354a:	0e 94 bf 1a 	call	0x357e
	write_command(0xb0);		//page address set, datasheet: page address 0
    354e:	80 eb       	ldi	r24, 0xB0	; 176
    3550:	0e 94 bf 1a 	call	0x357e
	write_command(0x10);		//column address high, datasheet
    3554:	80 e1       	ldi	r24, 0x10	; 16
    3556:	0e 94 bf 1a 	call	0x357e
	write_command(0x00);		//column address low, datasheet
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	0e 94 bf 1a 	call	0x357e
	write_command(0xaf);		//turn on the display, in datasheet
    3560:	8f ea       	ldi	r24, 0xAF	; 175
    3562:	0e 94 bf 1a 	call	0x357e
	#ifdef defS1D15605			//older Optrex displays, F-51553
		write_command(0x1b);	//v5 resistor ratio, S1D15605 driver IC
    3566:	8b e1       	ldi	r24, 0x1B	; 27
    3568:	0e 94 bf 1a 	call	0x357e
	#else						//new Optrex Displays, F-51852
		write_command(uRR);	//resistor ratio, was 0x27!!!!!!
		write_command(0xe7);	//Driver on/off, NJU6676 driver IC
	#endif
	write_command(0x81);		//electronic volume set
    356c:	81 e8       	ldi	r24, 0x81	; 129
    356e:	0e 94 bf 1a 	call	0x357e
	#ifdef defS1D15605			//older Optrex displays, F-51553
		write_command(0x30);	//the second part of the electronic volume set
    3572:	80 e3       	ldi	r24, 0x30	; 48
    3574:	0e 94 bf 1a 	call	0x357e
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	08 95       	ret

0000357e <write_command>:
	#else						//new Optrex Displays, F-51852
		write_command(uEVR);	//the second part of the electronic volume set, was 0x20!!!!!
	#endif

/*
	//These are the commands that TVI Electronics uses to initialize the Optrex LCD
	write_command(0xA3);	//LCD bias 1/7th (0xA3)
	write_command(0xA1);	//ADC select reverse
	write_command(0xC0);	//common output normal
	write_command(0xA6);	//display normal
	write_command(0x26);	//V5 resistor ratio
	write_command(0x81);	//electronic volume set
	write_command(0x20);	//electronic volume init
	write_command(0x2F);	//power control set
	
//	write_command(0x40);		//start line set, datasheet:  start on line address 0
//	write_command(0xb0);		//page address set, datasheet: page address 0
//	write_command(0x10);		//column address high, datasheet
//	write_command(0x00);		//column address low, datasheet
	
	write_command(0xAF);	//display on
*/
}

//----------------------------------------------------------------------------
//Routine:     write_command (write a command to the graphical LCD)
//
//Function:
//			This function serially writes a command to the Optrex LCD
//Varibles passed:
//       uLcdCommand:  The control command to send to the LCD
//Returns:
//       none
//----------------------------------------------------------------------------
void write_command(unsigned char uLcdCommand)
{
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	21 97       	sbiw	r28, 0x01	; 1
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
    3592:	89 83       	std	Y+1, r24	; 0x01
    sbi(defLCDContPort,defLcdRD);       //change state on the read line of the LCD
    3594:	80 91 38 00 	lds	r24, 0x0038
    3598:	80 61       	ori	r24, 0x10	; 16
    359a:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdA0);       //clear A0 on the LCD for a command
    359e:	80 91 38 00 	lds	r24, 0x0038
    35a2:	8b 7f       	andi	r24, 0xFB	; 251
    35a4:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdCS1);      //clear the Chip Select on the LCD for
    35a8:	80 91 38 00 	lds	r24, 0x0038
    35ac:	8e 7f       	andi	r24, 0xFE	; 254
    35ae:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdWR);       //change state on the Write line of the LCD
    35b2:	80 91 38 00 	lds	r24, 0x0038
    35b6:	87 7f       	andi	r24, 0xF7	; 247
    35b8:	80 93 38 00 	sts	0x0038, r24
	send_serial_data(uLcdCommand);					//send the data to the LCD serially
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	0e 94 52 09 	call	0x12a4
    sbi(defLCDContPort,defLcdWR);		//we are done writing to the LCD
    35c2:	80 91 38 00 	lds	r24, 0x0038
    35c6:	88 60       	ori	r24, 0x08	; 8
    35c8:	80 93 38 00 	sts	0x0038, r24
    sbi(defLCDContPort,defLcdCS1);      //now set the Chip Select on the LCD
    35cc:	80 91 38 00 	lds	r24, 0x0038
    35d0:	81 60       	ori	r24, 0x01	; 1
    35d2:	80 93 38 00 	sts	0x0038, r24
    cbi(defLCDContPort,defLcdRD);       //change state on the read line of the LCD
    35d6:	80 91 38 00 	lds	r24, 0x0038
    35da:	8f 7e       	andi	r24, 0xEF	; 239
    35dc:	80 93 38 00 	sts	0x0038, r24
    35e0:	21 96       	adiw	r28, 0x01	; 1
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <write_date>:
}

//----------------------------------------------------------------------------
//Routine:     write_date
//
//Function:		This subroutine takes the current month, day and year and puts
//		it on the bottom of line of the LCD display.  The format is "month" 
//		(abbreviated), day (two digits), and the year (The year always starts
//		with the number 2, and then three digits)
//			
//Varibles passed:
//		uStartRow: 0 to 7, the start row of the big text
//		uStartColum:  0 to 112, the pixel count to start the number from the left side of the display
//		uBlank:  Blank the month day or year
//			=0  don't blank anything
//			=1  Blank the Month
//			=2  Blank the day
//			=3  Blank the year
//  	boolInvert: if true, blue on a white background, if false, white on a blue background
//Returns:
//       none
//----------------------------------------------------------------------------
void write_date(unsigned char uStartColumn,unsigned char uRow, unsigned char uBlank,bool boolInvert)
{
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	26 97       	sbiw	r28, 0x06	; 6
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	6a 83       	std	Y+2, r22	; 0x02
    360a:	4b 83       	std	Y+3, r20	; 0x03
    360c:	2c 83       	std	Y+4, r18	; 0x04
	set_line(uRow);		//set the line for writing a string of characters
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	0e 94 f7 08 	call	0x11ee
	moveCursorToColumn(uStartColumn);	//write white spaces to get to the right column
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	0e 94 66 0a 	call	0x14cc
	if(uBlank != 1)	//go in here if we are not blanking the month
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	81 30       	cpi	r24, 0x01	; 1
    361e:	09 f4       	brne	.+2      	; 0x3622
    3620:	c5 c0       	rjmp	.+394    	; 0x37ac
	{
		switch(t.intMonth)	//find the month string based upon an integer
    3622:	80 91 7d 00 	lds	r24, 0x007D
    3626:	90 91 7e 00 	lds	r25, 0x007E
    362a:	8d 83       	std	Y+5, r24	; 0x05
    362c:	9e 83       	std	Y+6, r25	; 0x06
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	86 30       	cpi	r24, 0x06	; 6
    3634:	91 05       	cpc	r25, r1
    3636:	09 f4       	brne	.+2      	; 0x363a
    3638:	7d c0       	rjmp	.+250    	; 0x3734
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	87 30       	cpi	r24, 0x07	; 7
    3640:	91 05       	cpc	r25, r1
    3642:	28 f5       	brcc	.+74     	; 0x368e
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	9e 81       	ldd	r25, Y+6	; 0x06
    3648:	83 30       	cpi	r24, 0x03	; 3
    364a:	91 05       	cpc	r25, r1
    364c:	09 f4       	brne	.+2      	; 0x3650
    364e:	5a c0       	rjmp	.+180    	; 0x3704
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	9e 81       	ldd	r25, Y+6	; 0x06
    3654:	84 30       	cpi	r24, 0x04	; 4
    3656:	91 05       	cpc	r25, r1
    3658:	68 f4       	brcc	.+26     	; 0x3674
    365a:	8d 81       	ldd	r24, Y+5	; 0x05
    365c:	9e 81       	ldd	r25, Y+6	; 0x06
    365e:	81 30       	cpi	r24, 0x01	; 1
    3660:	91 05       	cpc	r25, r1
    3662:	09 f4       	brne	.+2      	; 0x3666
    3664:	3f c0       	rjmp	.+126    	; 0x36e4
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	9e 81       	ldd	r25, Y+6	; 0x06
    366a:	82 30       	cpi	r24, 0x02	; 2
    366c:	91 05       	cpc	r25, r1
    366e:	09 f4       	brne	.+2      	; 0x3672
    3670:	41 c0       	rjmp	.+130    	; 0x36f4
    3672:	97 c0       	rjmp	.+302    	; 0x37a2
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	84 30       	cpi	r24, 0x04	; 4
    367a:	91 05       	cpc	r25, r1
    367c:	09 f4       	brne	.+2      	; 0x3680
    367e:	4a c0       	rjmp	.+148    	; 0x3714
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	85 30       	cpi	r24, 0x05	; 5
    3686:	91 05       	cpc	r25, r1
    3688:	09 f4       	brne	.+2      	; 0x368c
    368a:	4c c0       	rjmp	.+152    	; 0x3724
    368c:	8a c0       	rjmp	.+276    	; 0x37a2
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	89 30       	cpi	r24, 0x09	; 9
    3694:	91 05       	cpc	r25, r1
    3696:	09 f4       	brne	.+2      	; 0x369a
    3698:	65 c0       	rjmp	.+202    	; 0x3764
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	8a 30       	cpi	r24, 0x0A	; 10
    36a0:	91 05       	cpc	r25, r1
    36a2:	68 f4       	brcc	.+26     	; 0x36be
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	87 30       	cpi	r24, 0x07	; 7
    36aa:	91 05       	cpc	r25, r1
    36ac:	09 f4       	brne	.+2      	; 0x36b0
    36ae:	4a c0       	rjmp	.+148    	; 0x3744
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	88 30       	cpi	r24, 0x08	; 8
    36b6:	91 05       	cpc	r25, r1
    36b8:	09 f4       	brne	.+2      	; 0x36bc
    36ba:	4c c0       	rjmp	.+152    	; 0x3754
    36bc:	72 c0       	rjmp	.+228    	; 0x37a2
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	8b 30       	cpi	r24, 0x0B	; 11
    36c4:	91 05       	cpc	r25, r1
    36c6:	09 f4       	brne	.+2      	; 0x36ca
    36c8:	5d c0       	rjmp	.+186    	; 0x3784
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	8b 30       	cpi	r24, 0x0B	; 11
    36d0:	91 05       	cpc	r25, r1
    36d2:	08 f4       	brcc	.+2      	; 0x36d6
    36d4:	4f c0       	rjmp	.+158    	; 0x3774
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	8c 30       	cpi	r24, 0x0C	; 12
    36dc:	91 05       	cpc	r25, r1
    36de:	09 f4       	brne	.+2      	; 0x36e2
    36e0:	59 c0       	rjmp	.+178    	; 0x3794
    36e2:	5f c0       	rjmp	.+190    	; 0x37a2
		{
			case 1:		//January
				drawText((unsigned char *)strJan,uStartColumn,uRow,boolInvert);	//show the month on the display
    36e4:	2c 81       	ldd	r18, Y+4	; 0x04
    36e6:	4a 81       	ldd	r20, Y+2	; 0x02
    36e8:	69 81       	ldd	r22, Y+1	; 0x01
    36ea:	88 e7       	ldi	r24, 0x78	; 120
    36ec:	94 e0       	ldi	r25, 0x04	; 4
    36ee:	0e 94 30 0d 	call	0x1a60
			break;
    36f2:	57 c0       	rjmp	.+174    	; 0x37a2
			case 2:		//February
				drawText((unsigned char *)strFeb,uStartColumn,uRow,boolInvert);	//show the month on the display
    36f4:	2c 81       	ldd	r18, Y+4	; 0x04
    36f6:	4a 81       	ldd	r20, Y+2	; 0x02
    36f8:	69 81       	ldd	r22, Y+1	; 0x01
    36fa:	8d e7       	ldi	r24, 0x7D	; 125
    36fc:	94 e0       	ldi	r25, 0x04	; 4
    36fe:	0e 94 30 0d 	call	0x1a60
			break;
    3702:	4f c0       	rjmp	.+158    	; 0x37a2
			case 3:		//March
				drawText((unsigned char *)strMarch,uStartColumn,uRow,boolInvert);	//show the month on the display
    3704:	2c 81       	ldd	r18, Y+4	; 0x04
    3706:	4a 81       	ldd	r20, Y+2	; 0x02
    3708:	69 81       	ldd	r22, Y+1	; 0x01
    370a:	82 e8       	ldi	r24, 0x82	; 130
    370c:	94 e0       	ldi	r25, 0x04	; 4
    370e:	0e 94 30 0d 	call	0x1a60
			break;
    3712:	47 c0       	rjmp	.+142    	; 0x37a2
			case 4:		//April
				drawText((unsigned char *)strApril,uStartColumn,uRow,boolInvert);	//show the month on the display
    3714:	2c 81       	ldd	r18, Y+4	; 0x04
    3716:	4a 81       	ldd	r20, Y+2	; 0x02
    3718:	69 81       	ldd	r22, Y+1	; 0x01
    371a:	87 e8       	ldi	r24, 0x87	; 135
    371c:	94 e0       	ldi	r25, 0x04	; 4
    371e:	0e 94 30 0d 	call	0x1a60
			break;
    3722:	3f c0       	rjmp	.+126    	; 0x37a2
			case 5:
				drawText((unsigned char *)strMay,uStartColumn,uRow,boolInvert);	//show the month on the display
    3724:	2c 81       	ldd	r18, Y+4	; 0x04
    3726:	4a 81       	ldd	r20, Y+2	; 0x02
    3728:	69 81       	ldd	r22, Y+1	; 0x01
    372a:	8c e8       	ldi	r24, 0x8C	; 140
    372c:	94 e0       	ldi	r25, 0x04	; 4
    372e:	0e 94 30 0d 	call	0x1a60
			break;
    3732:	37 c0       	rjmp	.+110    	; 0x37a2
			case 6:
				drawText((unsigned char *)strJune,uStartColumn,uRow,boolInvert);	//show the month on the display
    3734:	2c 81       	ldd	r18, Y+4	; 0x04
    3736:	4a 81       	ldd	r20, Y+2	; 0x02
    3738:	69 81       	ldd	r22, Y+1	; 0x01
    373a:	81 e9       	ldi	r24, 0x91	; 145
    373c:	94 e0       	ldi	r25, 0x04	; 4
    373e:	0e 94 30 0d 	call	0x1a60
			break;
    3742:	2f c0       	rjmp	.+94     	; 0x37a2
			case 7:
				drawText((unsigned char *)strJuly,uStartColumn,uRow,boolInvert);	//show the month on the display
    3744:	2c 81       	ldd	r18, Y+4	; 0x04
    3746:	4a 81       	ldd	r20, Y+2	; 0x02
    3748:	69 81       	ldd	r22, Y+1	; 0x01
    374a:	86 e9       	ldi	r24, 0x96	; 150
    374c:	94 e0       	ldi	r25, 0x04	; 4
    374e:	0e 94 30 0d 	call	0x1a60
			break;
    3752:	27 c0       	rjmp	.+78     	; 0x37a2
			case 8:
				drawText((unsigned char *)strAug,uStartColumn,uRow,boolInvert);	//show the month on the display
    3754:	2c 81       	ldd	r18, Y+4	; 0x04
    3756:	4a 81       	ldd	r20, Y+2	; 0x02
    3758:	69 81       	ldd	r22, Y+1	; 0x01
    375a:	8b e9       	ldi	r24, 0x9B	; 155
    375c:	94 e0       	ldi	r25, 0x04	; 4
    375e:	0e 94 30 0d 	call	0x1a60
			break;
    3762:	1f c0       	rjmp	.+62     	; 0x37a2
			case 9:
				drawText((unsigned char *)strSept,uStartColumn,uRow,boolInvert);	//show the month on the display
    3764:	2c 81       	ldd	r18, Y+4	; 0x04
    3766:	4a 81       	ldd	r20, Y+2	; 0x02
    3768:	69 81       	ldd	r22, Y+1	; 0x01
    376a:	80 ea       	ldi	r24, 0xA0	; 160
    376c:	94 e0       	ldi	r25, 0x04	; 4
    376e:	0e 94 30 0d 	call	0x1a60
			break;
    3772:	17 c0       	rjmp	.+46     	; 0x37a2
			case 10:
				drawText((unsigned char *)strOct,uStartColumn,uRow,boolInvert);	//show the month on the display
    3774:	2c 81       	ldd	r18, Y+4	; 0x04
    3776:	4a 81       	ldd	r20, Y+2	; 0x02
    3778:	69 81       	ldd	r22, Y+1	; 0x01
    377a:	85 ea       	ldi	r24, 0xA5	; 165
    377c:	94 e0       	ldi	r25, 0x04	; 4
    377e:	0e 94 30 0d 	call	0x1a60
			break;
    3782:	0f c0       	rjmp	.+30     	; 0x37a2
			case 11:		//November
				drawText((unsigned char *)strNov,uStartColumn,uRow,boolInvert);	//show the month on the display
    3784:	2c 81       	ldd	r18, Y+4	; 0x04
    3786:	4a 81       	ldd	r20, Y+2	; 0x02
    3788:	69 81       	ldd	r22, Y+1	; 0x01
    378a:	8a ea       	ldi	r24, 0xAA	; 170
    378c:	94 e0       	ldi	r25, 0x04	; 4
    378e:	0e 94 30 0d 	call	0x1a60
			break;
    3792:	07 c0       	rjmp	.+14     	; 0x37a2
			case 12:		//December
				drawText((unsigned char *)strDec,uStartColumn,uRow,boolInvert);	//show the month on the display
    3794:	2c 81       	ldd	r18, Y+4	; 0x04
    3796:	4a 81       	ldd	r20, Y+2	; 0x02
    3798:	69 81       	ldd	r22, Y+1	; 0x01
    379a:	8f ea       	ldi	r24, 0xAF	; 175
    379c:	94 e0       	ldi	r25, 0x04	; 4
    379e:	0e 94 30 0d 	call	0x1a60
			break;
		}
		write_char(0x00,false);	//write a space between the month and day
    37a2:	60 e0       	ldi	r22, 0x00	; 0
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	0e 94 b5 09 	call	0x136a
    37aa:	17 c0       	rjmp	.+46     	; 0x37da
	}
	else	//we are putting spaces in for the month
	{
		write_char(0x00,false);	//A white space to keep the day and year in their right place
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);
    37bc:	60 e0       	ldi	r22, 0x00	; 0
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	0e 94 b5 09 	call	0x136a
		write_data(0x00);		//this puts a verticle, one pixel space to keep the day and year in their correct positions
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 18 09 	call	0x1230

	}
	if(uBlank!=2)	//are we blanking the day?
    37da:	8b 81       	ldd	r24, Y+3	; 0x03
    37dc:	82 30       	cpi	r24, 0x02	; 2
    37de:	69 f0       	breq	.+26     	; 0x37fa
	{
		write_small_numbers(t.intDay,false,2);	//put the day after the month, suppress leading 0
    37e0:	42 e0       	ldi	r20, 0x02	; 2
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	80 91 7b 00 	lds	r24, 0x007B
    37e8:	90 91 7c 00 	lds	r25, 0x007C
    37ec:	0e 94 3a 1c 	call	0x3874
		write_char(12,false);	//This is a comma to display after the day
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	8c e0       	ldi	r24, 0x0C	; 12
    37f4:	0e 94 b5 09 	call	0x136a
    37f8:	0c c0       	rjmp	.+24     	; 0x3812
	}
	else	//yes, we are putting up spaces where the day should be
	{
		write_char(0x00,false);	//A white space
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	0e 94 b5 09 	call	0x136a
	}	
	if(uBlank!=3)	//are we blanking the year?
    3812:	8b 81       	ldd	r24, Y+3	; 0x03
    3814:	83 30       	cpi	r24, 0x03	; 3
    3816:	89 f0       	breq	.+34     	; 0x383a
	{
		write_char(0x00,false);	//A white space after comma, between the day and year
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	0e 94 b5 09 	call	0x136a
		write_char(18,false);		// put up a "2" for the first digit in year
    3820:	60 e0       	ldi	r22, 0x00	; 0
    3822:	82 e1       	ldi	r24, 0x12	; 18
    3824:	0e 94 b5 09 	call	0x136a
		write_small_numbers(t.intYear,false,3);	//put up the last three digits of the year, don't suppress the leading zeros (3 digits)
    3828:	43 e0       	ldi	r20, 0x03	; 3
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	80 91 7f 00 	lds	r24, 0x007F
    3830:	90 91 80 00 	lds	r25, 0x0080
    3834:	0e 94 3a 1c 	call	0x3874
    3838:	14 c0       	rjmp	.+40     	; 0x3862
	}
	else	//yes, we are blanking the year
	{
		write_char(0x00,false);	//A white space to cover whatever was there.
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space 
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space 
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space 
    3852:	60 e0       	ldi	r22, 0x00	; 0
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	0e 94 b5 09 	call	0x136a
		write_char(0x00,false);	//A white space 
    385a:	60 e0       	ldi	r22, 0x00	; 0
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	0e 94 b5 09 	call	0x136a
    3862:	26 96       	adiw	r28, 0x06	; 6
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	08 95       	ret

00003874 <write_small_numbers>:
	}
}

//----------------------------------------------------------------------------
//Routine:     write_small_numbers
//
//Function:		This routine takes a integer that is passed to it and displays
//		the integer on the LCD.  It does this by doing a BCD conversion on the
//		the integer.  The maximum input value is 999 and the lowest input value
//		is 0.  (the number is displayed in 5x7 format)
//			
//Varibles passed:
//		intSmallNum: 0 to 999, This number will be displayed on the LCD
//		boolBlankZero:  if true, then blank the leading zeros
//		uNumbersDisplayed:  1= one number displayed
//			2=two numbers displayed
//			3= three numbers displayed
//Returns:
//       none
//----------------------------------------------------------------------------
void write_small_numbers(unsigned int intSmallNum, bool boolBlankZero, unsigned char uNumbersDisplayed)
{
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	26 97       	sbiw	r28, 0x06	; 6
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	6b 83       	std	Y+3, r22	; 0x03
    388e:	4c 83       	std	Y+4, r20	; 0x04
	unsigned char uGamma;
	unsigned char uBeta;
	
	
	integerToArray(intSmallNum);	//take an integer and convert (BCD) it into a 3 byte array
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	0e 94 ed 10 	call	0x21da
	for(uGamma=1;uGamma<4;uGamma++)	//loop through the 3 digits in the array
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	84 30       	cpi	r24, 0x04	; 4
    38a0:	98 f5       	brcc	.+102    	; 0x3908
	{
		uBeta=str[uGamma]-32;		//convert a number in the array into an ASCII character
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	99 27       	eor	r25, r25
    38a6:	fc 01       	movw	r30, r24
    38a8:	e4 57       	subi	r30, 0x74	; 116
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	80 81       	ld	r24, Z
    38ae:	80 52       	subi	r24, 0x20	; 32
    38b0:	8e 83       	std	Y+6, r24	; 0x06
		if(boolBlankZero==false || uBeta!=16)	//do we need to blank the leading zeros?
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	88 23       	and	r24, r24
    38b6:	21 f0       	breq	.+8      	; 0x38c0
    38b8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ba:	80 31       	cpi	r24, 0x10	; 16
    38bc:	09 f4       	brne	.+2      	; 0x38c0
    38be:	20 c0       	rjmp	.+64     	; 0x3900
		{
			if(uNumbersDisplayed==1 && uGamma==3)	//go in here only if we are displaying one digit
    38c0:	8c 81       	ldd	r24, Y+4	; 0x04
    38c2:	81 30       	cpi	r24, 0x01	; 1
    38c4:	41 f4       	brne	.+16     	; 0x38d6
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	83 30       	cpi	r24, 0x03	; 3
    38ca:	29 f4       	brne	.+10     	; 0x38d6
			{
				write_char(uBeta,false);	//put the character on the LCD
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	8e 81       	ldd	r24, Y+6	; 0x06
    38d0:	0e 94 b5 09 	call	0x136a
    38d4:	15 c0       	rjmp	.+42     	; 0x3900
			}
			else if(uNumbersDisplayed ==2 && uGamma>=2)	//go in here only if we are displaying two digits
    38d6:	8c 81       	ldd	r24, Y+4	; 0x04
    38d8:	82 30       	cpi	r24, 0x02	; 2
    38da:	41 f4       	brne	.+16     	; 0x38ec
    38dc:	8d 81       	ldd	r24, Y+5	; 0x05
    38de:	82 30       	cpi	r24, 0x02	; 2
    38e0:	28 f0       	brcs	.+10     	; 0x38ec
			{
				write_char(uBeta,false);	//put the character on the LCD
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	8e 81       	ldd	r24, Y+6	; 0x06
    38e6:	0e 94 b5 09 	call	0x136a
    38ea:	0a c0       	rjmp	.+20     	; 0x3900
			}
			else if(uNumbersDisplayed ==3 && uGamma>=1)	//go in here only if we are displaying three digits
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	83 30       	cpi	r24, 0x03	; 3
    38f0:	39 f4       	brne	.+14     	; 0x3900
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	88 23       	and	r24, r24
    38f6:	21 f0       	breq	.+8      	; 0x3900
			{
				write_char(uBeta,false);	//put the character on the LCD
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	8e 81       	ldd	r24, Y+6	; 0x06
    38fc:	0e 94 b5 09 	call	0x136a
    3900:	8d 81       	ldd	r24, Y+5	; 0x05
    3902:	8f 5f       	subi	r24, 0xFF	; 255
    3904:	8d 83       	std	Y+5, r24	; 0x05
    3906:	ca cf       	rjmp	.-108    	; 0x389c
    3908:	26 96       	adiw	r28, 0x06	; 6
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	08 95       	ret

0000391a <ShowLargeTime>:
			}
		}
	}
}

//----------------------------------------------------------------------------
//Routine:     showLargeTime
//
//Function:		This routine displays the current time in large numbers,
//		which is 24x16 format.  It displays AM or PM in small letters depending
//		on the time of day.
//			
//Varibles passed:
//		uStartColumn:  sets the upperleft hand X position of the time
//		uRow:  sets the upper left hand Y pistion of the time
//
//Returns:
//       none
//----------------------------------------------------------------------------
void ShowLargeTime(unsigned char uStartColumn, unsigned char uRow)
{
    391a:	0f 93       	push	r16
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    3924:	24 97       	sbiw	r28, 0x04	; 4
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	6a 83       	std	Y+2, r22	; 0x02
	unsigned int intTempHour;

	if(t.intHour>11)	//Do we need to set the PM notification?
    3934:	80 91 79 00 	lds	r24, 0x0079
    3938:	90 91 7a 00 	lds	r25, 0x007A
    393c:	8c 30       	cpi	r24, 0x0C	; 12
    393e:	91 05       	cpc	r25, r1
    3940:	c8 f0       	brcs	.+50     	; 0x3974
	{
		intTempHour=t.intHour-12;	//yes, set the hours to approapriate time
    3942:	80 91 79 00 	lds	r24, 0x0079
    3946:	90 91 7a 00 	lds	r25, 0x007A
    394a:	0c 97       	sbiw	r24, 0x0c	; 12
    394c:	8b 83       	std	Y+3, r24	; 0x03
    394e:	9c 83       	std	Y+4, r25	; 0x04
		if(intTempHour==0)		//show 12 instead of the zero hour
    3950:	8b 81       	ldd	r24, Y+3	; 0x03
    3952:	9c 81       	ldd	r25, Y+4	; 0x04
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	21 f4       	brne	.+8      	; 0x3960
		{
			intTempHour=12;
    3958:	8c e0       	ldi	r24, 0x0C	; 12
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	8b 83       	std	Y+3, r24	; 0x03
    395e:	9c 83       	std	Y+4, r25	; 0x04
		}
		drawText((unsigned char *)strPM,uStartColumn+95,uRow,false);	//show the PM indication
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 5a       	subi	r24, 0xA1	; 161
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	4a 81       	ldd	r20, Y+2	; 0x02
    3968:	68 2f       	mov	r22, r24
    396a:	87 eb       	ldi	r24, 0xB7	; 183
    396c:	94 e0       	ldi	r25, 0x04	; 4
    396e:	0e 94 30 0d 	call	0x1a60
    3972:	17 c0       	rjmp	.+46     	; 0x39a2
	}
	else	//show the AM notification
	{
		intTempHour=t.intHour;	
    3974:	80 91 79 00 	lds	r24, 0x0079
    3978:	90 91 7a 00 	lds	r25, 0x007A
    397c:	8b 83       	std	Y+3, r24	; 0x03
    397e:	9c 83       	std	Y+4, r25	; 0x04
		if(intTempHour==0)
    3980:	8b 81       	ldd	r24, Y+3	; 0x03
    3982:	9c 81       	ldd	r25, Y+4	; 0x04
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	21 f4       	brne	.+8      	; 0x3990
		{
			intTempHour=12;	//show 12 instead of the 0 hour
    3988:	8c e0       	ldi	r24, 0x0C	; 12
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	8b 83       	std	Y+3, r24	; 0x03
    398e:	9c 83       	std	Y+4, r25	; 0x04
		}
		drawText((unsigned char *)strAM,uStartColumn+95,uRow,false);	//show the AM notification
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	81 5a       	subi	r24, 0xA1	; 161
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	4a 81       	ldd	r20, Y+2	; 0x02
    3998:	68 2f       	mov	r22, r24
    399a:	84 eb       	ldi	r24, 0xB4	; 180
    399c:	94 e0       	ldi	r25, 0x04	; 4
    399e:	0e 94 30 0d 	call	0x1a60
	}
	BigDigits(uRow,uStartColumn+45,t.intMin,2,false);	//show the minute 45 pixels after the start of the time (2 digits)
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	83 5d       	subi	r24, 0xD3	; 211
    39a6:	00 e0       	ldi	r16, 0x00	; 0
    39a8:	22 e0       	ldi	r18, 0x02	; 2
    39aa:	40 91 77 00 	lds	r20, 0x0077
    39ae:	50 91 78 00 	lds	r21, 0x0078
    39b2:	68 2f       	mov	r22, r24
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	0e 94 92 0b 	call	0x1724
	subLargeCOlon(uRow,uStartColumn+45,false);		//show the colon between the hour and minute
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	83 5d       	subi	r24, 0xD3	; 211
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	68 2f       	mov	r22, r24
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	0e 94 7c 0d 	call	0x1af8
	BigDigits(uRow,uStartColumn,intTempHour,0,false);	//show the hour, we don't need to see the 0 in the 10's digit
    39c8:	00 e0       	ldi	r16, 0x00	; 0
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	4b 81       	ldd	r20, Y+3	; 0x03
    39ce:	5c 81       	ldd	r21, Y+4	; 0x04
    39d0:	69 81       	ldd	r22, Y+1	; 0x01
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	0e 94 92 0b 	call	0x1724
    39d8:	24 96       	adiw	r28, 0x04	; 4
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	0f 91       	pop	r16
    39ea:	08 95       	ret

000039ec <ShowLargeAlarmTime>:

}

//----------------------------------------------------------------------------
//Routine:     showLargeAlarmTime
//
//Function:		This routine displays the alarm time in large numbers,
//		which is 24x16 format.  It displays AM or PM in small letters depending
//		on the time of day.
//			
//Varibles passed:
//		uStartColumn:  sets the upperleft hand X position of the time
//		uRow:  sets the upper left hand Y pistion of the time
//
//Returns:
//       none
//----------------------------------------------------------------------------
void ShowLargeAlarmTime(unsigned char uStartColumn, unsigned char uRow)
{
    39ec:	0f 93       	push	r16
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	24 97       	sbiw	r28, 0x04	; 4
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	6a 83       	std	Y+2, r22	; 0x02
	unsigned int intTempHour;

	if(intAlarmHour>11)	//Do we need to set the PM notification?
    3a06:	80 91 86 00 	lds	r24, 0x0086
    3a0a:	90 91 87 00 	lds	r25, 0x0087
    3a0e:	8c 30       	cpi	r24, 0x0C	; 12
    3a10:	91 05       	cpc	r25, r1
    3a12:	c8 f0       	brcs	.+50     	; 0x3a46
	{
		intTempHour=intAlarmHour-12;	//yes, set the hours to approapriate time
    3a14:	80 91 86 00 	lds	r24, 0x0086
    3a18:	90 91 87 00 	lds	r25, 0x0087
    3a1c:	0c 97       	sbiw	r24, 0x0c	; 12
    3a1e:	8b 83       	std	Y+3, r24	; 0x03
    3a20:	9c 83       	std	Y+4, r25	; 0x04
		if(intTempHour==0)		//show 12 instead of the zero hour
    3a22:	8b 81       	ldd	r24, Y+3	; 0x03
    3a24:	9c 81       	ldd	r25, Y+4	; 0x04
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	21 f4       	brne	.+8      	; 0x3a32
		{
			intTempHour=12;
    3a2a:	8c e0       	ldi	r24, 0x0C	; 12
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	8b 83       	std	Y+3, r24	; 0x03
    3a30:	9c 83       	std	Y+4, r25	; 0x04
		}
		drawText((unsigned char *)strPM,uStartColumn+95,uRow,false);	//show the PM indication
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	81 5a       	subi	r24, 0xA1	; 161
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	4a 81       	ldd	r20, Y+2	; 0x02
    3a3a:	68 2f       	mov	r22, r24
    3a3c:	87 eb       	ldi	r24, 0xB7	; 183
    3a3e:	94 e0       	ldi	r25, 0x04	; 4
    3a40:	0e 94 30 0d 	call	0x1a60
    3a44:	17 c0       	rjmp	.+46     	; 0x3a74
	}
	else	//show the AM notification
	{
		intTempHour=intAlarmHour;	
    3a46:	80 91 86 00 	lds	r24, 0x0086
    3a4a:	90 91 87 00 	lds	r25, 0x0087
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
    3a50:	9c 83       	std	Y+4, r25	; 0x04
		if(intTempHour==0)
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	9c 81       	ldd	r25, Y+4	; 0x04
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	21 f4       	brne	.+8      	; 0x3a62
		{
			intTempHour=12;	//show 12 instead of the 0 hour
    3a5a:	8c e0       	ldi	r24, 0x0C	; 12
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	9c 83       	std	Y+4, r25	; 0x04
		}
		drawText((unsigned char *)strAM,uStartColumn+95,uRow,false);	//show the AM notification
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	81 5a       	subi	r24, 0xA1	; 161
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	4a 81       	ldd	r20, Y+2	; 0x02
    3a6a:	68 2f       	mov	r22, r24
    3a6c:	84 eb       	ldi	r24, 0xB4	; 180
    3a6e:	94 e0       	ldi	r25, 0x04	; 4
    3a70:	0e 94 30 0d 	call	0x1a60
	}
	BigDigits(uRow,uStartColumn+45,intAlarmMin,2,false);	//show the minute 45 pixels after the start of the time (2 digits)
    3a74:	89 81       	ldd	r24, Y+1	; 0x01
    3a76:	83 5d       	subi	r24, 0xD3	; 211
    3a78:	00 e0       	ldi	r16, 0x00	; 0
    3a7a:	22 e0       	ldi	r18, 0x02	; 2
    3a7c:	40 91 82 00 	lds	r20, 0x0082
    3a80:	50 91 83 00 	lds	r21, 0x0083
    3a84:	68 2f       	mov	r22, r24
    3a86:	8a 81       	ldd	r24, Y+2	; 0x02
    3a88:	0e 94 92 0b 	call	0x1724
	subLargeCOlon(uRow,uStartColumn+45,false);		//show the colon between the hour and minute
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	83 5d       	subi	r24, 0xD3	; 211
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	68 2f       	mov	r22, r24
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	0e 94 7c 0d 	call	0x1af8
	BigDigits(uRow,uStartColumn,intTempHour,0,false);	//show the hour, we don't need to see the 0 in the 10's digit
    3a9a:	00 e0       	ldi	r16, 0x00	; 0
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa0:	5c 81       	ldd	r21, Y+4	; 0x04
    3aa2:	69 81       	ldd	r22, Y+1	; 0x01
    3aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa6:	0e 94 92 0b 	call	0x1724
    3aaa:	24 96       	adiw	r28, 0x04	; 4
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	0f 91       	pop	r16
    3abc:	08 95       	ret

00003abe <setBacklightOffTime>:

}

//----------------------------------------------------------------------------
//Routine:     setBacklightOffTime
//
//Function:		This routine is for the "setting of the backlight times" menu selection.
//		It formats line 2 (from the top of the screen) to allow the user to change the 
//		backlight off hour.  It formats the line by putting up the hour, colon, the minute(00),
//		and the AM or PM label.  
//			
//Varibles passed:
//		none
//
//Returns:
//      none
//----------------------------------------------------------------------------
void setBacklightOffTime(void)
{
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
	set_line(2);	//line 2 will have the backlight off time, only the hour is adjustable
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	0e 94 f7 08 	call	0x11ee
	write_pixel_spaces(20);	//move in the left side of the screen a bit
    3acc:	84 e1       	ldi	r24, 0x14	; 20
    3ace:	0e 94 96 0a 	call	0x152c
	if(uBacklightOffHour<=12)	//do we need to show the AM time?
    3ad2:	80 91 81 00 	lds	r24, 0x0081
    3ad6:	8d 30       	cpi	r24, 0x0D	; 13
    3ad8:	98 f4       	brcc	.+38     	; 0x3b00
	{
		if(uBacklightOffHour==0)	//when the hour is zero, it is actually 12:00am
    3ada:	80 91 81 00 	lds	r24, 0x0081
    3ade:	88 23       	and	r24, r24
    3ae0:	39 f4       	brne	.+14     	; 0x3af0
		{
			write_small_numbers(12,false,2);	//show the AM time (hour)
    3ae2:	42 e0       	ldi	r20, 0x02	; 2
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	8c e0       	ldi	r24, 0x0C	; 12
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	0e 94 3a 1c 	call	0x3874
    3aee:	10 c0       	rjmp	.+32     	; 0x3b10
		}
		else
		{
			write_small_numbers(uBacklightOffHour,false,2);	//show the AM time (hour)
    3af0:	80 91 81 00 	lds	r24, 0x0081
    3af4:	99 27       	eor	r25, r25
    3af6:	42 e0       	ldi	r20, 0x02	; 2
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	0e 94 3a 1c 	call	0x3874
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10
		}
	}
	else
	{
		write_small_numbers(uBacklightOffHour-12,false,2);	//show the pM time (hour)
    3b00:	80 91 81 00 	lds	r24, 0x0081
    3b04:	99 27       	eor	r25, r25
    3b06:	0c 97       	sbiw	r24, 0x0c	; 12
    3b08:	42 e0       	ldi	r20, 0x02	; 2
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	0e 94 3a 1c 	call	0x3874
	}
	drawText((unsigned char *)strColonZero,255,255,false);	//colum, row, no highlight, show ":00" for the minute
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	4f ef       	ldi	r20, 0xFF	; 255
    3b14:	6f ef       	ldi	r22, 0xFF	; 255
    3b16:	86 e5       	ldi	r24, 0x56	; 86
    3b18:	95 e0       	ldi	r25, 0x05	; 5
    3b1a:	0e 94 30 0d 	call	0x1a60
	if(uBacklightOffHour<12)	//do we need to put up the AM or PM label?
    3b1e:	80 91 81 00 	lds	r24, 0x0081
    3b22:	8c 30       	cpi	r24, 0x0C	; 12
    3b24:	40 f4       	brcc	.+16     	; 0x3b36
	{
		drawText((unsigned char *)strAM,255,255,false);	//colum, row, no highlight, put up the AM label
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	4f ef       	ldi	r20, 0xFF	; 255
    3b2a:	6f ef       	ldi	r22, 0xFF	; 255
    3b2c:	84 eb       	ldi	r24, 0xB4	; 180
    3b2e:	94 e0       	ldi	r25, 0x04	; 4
    3b30:	0e 94 30 0d 	call	0x1a60
    3b34:	07 c0       	rjmp	.+14     	; 0x3b44
	}
	else
	{
		drawText((unsigned char *)strPM,255,255,false);	//colum, row, no highlight, put up the PM label
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	4f ef       	ldi	r20, 0xFF	; 255
    3b3a:	6f ef       	ldi	r22, 0xFF	; 255
    3b3c:	87 eb       	ldi	r24, 0xB7	; 183
    3b3e:	94 e0       	ldi	r25, 0x04	; 4
    3b40:	0e 94 30 0d 	call	0x1a60
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <setBacklightOnTime>:
	}
}

//----------------------------------------------------------------------------
//Routine:     setBacklightOnTime
//
//Function:		This routine is for the "setting of the backlight times" menu selection.
//		It formats line 5 (from the top of the screen) to allow the user to change the 
//		backlight on hour.  It formats the line by putting up the hour, colon, the minute(00),
//		and the AM or PM label.  
//			
//Varibles passed:
//		none
//
//Returns:
//      none
//----------------------------------------------------------------------------
void setBacklightOnTime(void)
{
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
	set_line(5);	//line 5 will have the backlight on time, only the hour is adjustable
    3b52:	85 e0       	ldi	r24, 0x05	; 5
    3b54:	0e 94 f7 08 	call	0x11ee
	write_pixel_spaces(20);	//move in the left side of the screen a bit
    3b58:	84 e1       	ldi	r24, 0x14	; 20
    3b5a:	0e 94 96 0a 	call	0x152c
	if(uBacklightOnHour<=12)
    3b5e:	80 91 84 00 	lds	r24, 0x0084
    3b62:	8d 30       	cpi	r24, 0x0D	; 13
    3b64:	98 f4       	brcc	.+38     	; 0x3b8c
	{
		if(uBacklightOnHour==0)		//when the hour is zero, it is actually 12:00am
    3b66:	80 91 84 00 	lds	r24, 0x0084
    3b6a:	88 23       	and	r24, r24
    3b6c:	39 f4       	brne	.+14     	; 0x3b7c
		{
			write_small_numbers(12,false,2);	//show the AM time (hour)
    3b6e:	42 e0       	ldi	r20, 0x02	; 2
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	8c e0       	ldi	r24, 0x0C	; 12
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 3a 1c 	call	0x3874
    3b7a:	10 c0       	rjmp	.+32     	; 0x3b9c
		}
		else
		{
			write_small_numbers(uBacklightOnHour,false,2);	//show the AM time (hour)
    3b7c:	80 91 84 00 	lds	r24, 0x0084
    3b80:	99 27       	eor	r25, r25
    3b82:	42 e0       	ldi	r20, 0x02	; 2
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	0e 94 3a 1c 	call	0x3874
    3b8a:	08 c0       	rjmp	.+16     	; 0x3b9c
		}
	}
	else
	{
		write_small_numbers(uBacklightOnHour-12,false,2);	//show the pM time (hour)
    3b8c:	80 91 84 00 	lds	r24, 0x0084
    3b90:	99 27       	eor	r25, r25
    3b92:	0c 97       	sbiw	r24, 0x0c	; 12
    3b94:	42 e0       	ldi	r20, 0x02	; 2
    3b96:	60 e0       	ldi	r22, 0x00	; 0
    3b98:	0e 94 3a 1c 	call	0x3874
	}
	drawText((unsigned char *)strColonZero,255,255,false);	//colum, row, no highlight, show ":00" for the time
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	4f ef       	ldi	r20, 0xFF	; 255
    3ba0:	6f ef       	ldi	r22, 0xFF	; 255
    3ba2:	86 e5       	ldi	r24, 0x56	; 86
    3ba4:	95 e0       	ldi	r25, 0x05	; 5
    3ba6:	0e 94 30 0d 	call	0x1a60
	if(uBacklightOnHour<12)		//do we need to put up the AM or PM label?
    3baa:	80 91 84 00 	lds	r24, 0x0084
    3bae:	8c 30       	cpi	r24, 0x0C	; 12
    3bb0:	40 f4       	brcc	.+16     	; 0x3bc2
	{
		drawText((unsigned char *)strAM,255,255,false);	//colum, row, no highlight, put up the AM label
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	4f ef       	ldi	r20, 0xFF	; 255
    3bb6:	6f ef       	ldi	r22, 0xFF	; 255
    3bb8:	84 eb       	ldi	r24, 0xB4	; 180
    3bba:	94 e0       	ldi	r25, 0x04	; 4
    3bbc:	0e 94 30 0d 	call	0x1a60
    3bc0:	07 c0       	rjmp	.+14     	; 0x3bd0
	}
	else
	{
		drawText((unsigned char *)strPM,255,255,false);	//colum, row, no highlight, put up the PM label
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	4f ef       	ldi	r20, 0xFF	; 255
    3bc6:	6f ef       	ldi	r22, 0xFF	; 255
    3bc8:	87 eb       	ldi	r24, 0xB7	; 183
    3bca:	94 e0       	ldi	r25, 0x04	; 4
    3bcc:	0e 94 30 0d 	call	0x1a60
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	08 95       	ret

00003bd6 <eeprom_read_byte>:
    3bd6:	e1 99       	sbic	0x1c, 1	; 28
    3bd8:	fe cf       	rjmp	.-4      	; 0x3bd6
    3bda:	9f bb       	out	0x1f, r25	; 31
    3bdc:	8e bb       	out	0x1e, r24	; 30
    3bde:	e0 9a       	sbi	0x1c, 0	; 28
    3be0:	99 27       	eor	r25, r25
    3be2:	8d b3       	in	r24, 0x1d	; 29
    3be4:	08 95       	ret

00003be6 <eeprom_read_word>:
    3be6:	e1 99       	sbic	0x1c, 1	; 28
    3be8:	fe cf       	rjmp	.-4      	; 0x3be6
    3bea:	9f bb       	out	0x1f, r25	; 31
    3bec:	8e bb       	out	0x1e, r24	; 30
    3bee:	e0 9a       	sbi	0x1c, 0	; 28
    3bf0:	01 96       	adiw	r24, 0x01	; 1
    3bf2:	0d b2       	in	r0, 0x1d	; 29
    3bf4:	9f bb       	out	0x1f, r25	; 31
    3bf6:	8e bb       	out	0x1e, r24	; 30
    3bf8:	e0 9a       	sbi	0x1c, 0	; 28
    3bfa:	80 2d       	mov	r24, r0
    3bfc:	9d b3       	in	r25, 0x1d	; 29
    3bfe:	08 95       	ret

00003c00 <eeprom_write_byte>:
    3c00:	e1 99       	sbic	0x1c, 1	; 28
    3c02:	fe cf       	rjmp	.-4      	; 0x3c00
    3c04:	9f bb       	out	0x1f, r25	; 31
    3c06:	8e bb       	out	0x1e, r24	; 30
    3c08:	6d bb       	out	0x1d, r22	; 29
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	e2 9a       	sbi	0x1c, 2	; 28
    3c10:	e1 9a       	sbi	0x1c, 1	; 28
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	08 95       	ret

00003c16 <eeprom_write_word>:
    3c16:	ff ef       	ldi	r31, 0xFF	; 255
    3c18:	0f b6       	in	r0, 0x3f	; 63

00003c1a <eeprom_write_word_start>:
    3c1a:	e1 99       	sbic	0x1c, 1	; 28
    3c1c:	fe cf       	rjmp	.-4      	; 0x3c1a
    3c1e:	9f bb       	out	0x1f, r25	; 31
    3c20:	8e bb       	out	0x1e, r24	; 30
    3c22:	6d bb       	out	0x1d, r22	; 29
    3c24:	f8 94       	cli
    3c26:	e2 9a       	sbi	0x1c, 2	; 28
    3c28:	e1 9a       	sbi	0x1c, 1	; 28
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	f0 ff       	sbrs	r31, 0
    3c2e:	08 95       	ret
    3c30:	8f 5f       	subi	r24, 0xFF	; 255
    3c32:	9f 4f       	sbci	r25, 0xFF	; 255
    3c34:	67 2f       	mov	r22, r23
    3c36:	ff 27       	eor	r31, r31
    3c38:	f0 cf       	rjmp	.-32     	; 0x3c1a

00003c3a <strcpy>:
    3c3a:	fb 01       	movw	r30, r22
    3c3c:	dc 01       	movw	r26, r24

00003c3e <.strcpy_loop>:
    3c3e:	01 90       	ld	r0, Z+
    3c40:	0d 92       	st	X+, r0
    3c42:	00 20       	and	r0, r0
    3c44:	e1 f7       	brne	.-8      	; 0x3c3e
    3c46:	08 95       	ret

00003c48 <__udivmodhi4>:
    3c48:	aa 1b       	sub	r26, r26
    3c4a:	bb 1b       	sub	r27, r27
    3c4c:	51 e1       	ldi	r21, 0x11	; 17
    3c4e:	07 c0       	rjmp	.+14     	; 0x3c5e

00003c50 <__udivmodhi4_loop>:
    3c50:	aa 1f       	adc	r26, r26
    3c52:	bb 1f       	adc	r27, r27
    3c54:	a6 17       	cp	r26, r22
    3c56:	b7 07       	cpc	r27, r23
    3c58:	10 f0       	brcs	.+4      	; 0x3c5e
    3c5a:	a6 1b       	sub	r26, r22
    3c5c:	b7 0b       	sbc	r27, r23

00003c5e <__udivmodhi4_ep>:
    3c5e:	88 1f       	adc	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	5a 95       	dec	r21
    3c64:	a9 f7       	brne	.-22     	; 0x3c50
    3c66:	80 95       	com	r24
    3c68:	90 95       	com	r25
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	08 95       	ret
