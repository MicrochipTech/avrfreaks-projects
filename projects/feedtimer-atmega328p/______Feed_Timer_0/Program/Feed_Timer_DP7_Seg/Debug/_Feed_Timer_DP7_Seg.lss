
_Feed_Timer_DP7_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00002d4e  00002e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d4e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000235  0080015a  0080015a  00002e5c  2**0
                  ALLOC
  3 .eeprom       000002bd  00810000  00810000  00002e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007219  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d0f  00000000  00000000  0000a709  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001065  00000000  00000000  0000b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b30  00000000  00000000  0000c480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a79  00000000  00000000  0000cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002eb5  00000000  00000000  0000ea29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  000118de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__vector_7>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__vector_14>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 20       	and	r2, r0
      6a:	20 2d       	mov	r18, r0
	...

0000006d <_ZZ4mainE3__c_2>:
      6d:	20 20 2d 20 00                                        - .

00000072 <_ZZ4mainE3__c_1>:
      72:	20 2d 20 20 00                                       -  .

00000077 <_ZZ4mainE3__c_0>:
      77:	2d 20 20 20 00                                      -   .

0000007c <_ZZ4mainE3__c>:
      7c:	44 41 52 54 00                                      DART.

00000081 <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_6>:
      81:	53 20 4e 20 00                                      S N .

00000086 <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_5>:
      86:	45 3d 30 20 00                                      E=0 .

0000008b <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_4>:
      8b:	45 52 52 4f 00                                      ERRO.

00000090 <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_3>:
      90:	53 20 4e 20 00                                      S N .

00000095 <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_2>:
      95:	45 52 52 4f 00                                      ERRO.

0000009a <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_1>:
      9a:	53 20 4e 20 00                                      S N .

0000009f <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c_0>:
      9f:	45 52 52 4f 00                                      ERRO.

000000a4 <_ZZN16class_Feed_Timer13ProcessInputsEvE3__c>:
      a4:	53 20 4e 20 00                                      S N .

000000a9 <_ZZN16class_Feed_Timer15GetEventTypeStrEhE3__c_3>:
      a9:	49 4e 56 4c 00                                      INVL.

000000ae <_ZZN16class_Feed_Timer15GetEventTypeStrEhE3__c_2>:
      ae:	56 41 5a 49 00                                      VAZI.

000000b3 <_ZZN16class_Feed_Timer15GetEventTypeStrEhE3__c_1>:
      b3:	53 45 4d 41 00                                      SEMA.

000000b8 <_ZZN16class_Feed_Timer15GetEventTypeStrEhE3__c_0>:
      b8:	44 49 41 52 00                                      DIAR.

000000bd <_ZZN16class_Feed_Timer15GetEventTypeStrEhE3__c>:
      bd:	52 45 50 54 00                                      REPT.

000000c2 <_ZZN16class_Feed_Timer15GetIncOptionStrE15enum_INC_OPTIONE3__c_3>:
      c2:	49 4e 56 4c 00                                      INVL.

000000c7 <_ZZN16class_Feed_Timer15GetIncOptionStrE15enum_INC_OPTIONE3__c_2>:
      c7:	53 41 49 20 00                                      SAI .

000000cc <_ZZN16class_Feed_Timer15GetIncOptionStrE15enum_INC_OPTIONE3__c_1>:
      cc:	53 45 4d 41 00                                      SEMA.

000000d1 <_ZZN16class_Feed_Timer15GetIncOptionStrE15enum_INC_OPTIONE3__c_0>:
      d1:	44 49 41 52 00                                      DIAR.

000000d6 <_ZZN16class_Feed_Timer15GetIncOptionStrE15enum_INC_OPTIONE3__c>:
      d6:	52 45 50 54 00                                      REPT.

000000db <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c_4>:
      db:	49 4e 56 4c 00                                      INVL.

000000e0 <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c_3>:
      e0:	53 41 49 20 00                                      SAI .

000000e5 <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c_2>:
      e5:	52 53 2d 34 00                                      RS-4.

000000ea <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c_1>:
      ea:	44 45 2d 33 00                                      DE-3.

000000ef <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c_0>:
      ef:	49 43 2d 32 00                                      IC-2.

000000f4 <_ZZN16class_Feed_Timer14GetMenuItemStrE14enum_MENU_ITEME3__c>:
      f4:	48 52 2d 31 00                                      HR-1.

000000f9 <_ZZN16class_Feed_Timer13InputWeekDaysERhbE3__c_3>:
      f9:	23 00                                               #.

000000fb <_ZZN16class_Feed_Timer13InputWeekDaysERhbE3__c_2>:
      fb:	20 00                                                .

000000fd <_ZZN16class_Feed_Timer13InputWeekDaysERhbE3__c_1>:
      fd:	23 00                                               #.

000000ff <_ZZN16class_Feed_Timer13InputWeekDaysERhbE3__c_0>:
      ff:	20 00                                                .

00000101 <_ZZN16class_Feed_Timer13InputWeekDaysERhbE3__c>:
     101:	2d 00                                               -.

00000103 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_10>:
     103:	20 20 00                                              .

00000106 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_9>:
     106:	20 20 00                                              .

00000109 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_8>:
     109:	53 53 00                                            SS.

0000010c <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_7>:
     10c:	4d 4d 00                                            MM.

0000010f <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_6>:
     10f:	4d 4d 00                                            MM.

00000112 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_5>:
     112:	48 48 00                                            HH.

00000115 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_4>:
     115:	2d 2d 00                                            --.

00000118 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_3>:
     118:	2d 2d 00                                            --.

0000011b <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_2>:
     11b:	53 53 00                                            SS.

0000011e <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_1>:
     11e:	4d 4d 00                                            MM.

00000121 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c_0>:
     121:	4d 4d 00                                            MM.

00000124 <_ZZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bbE3__c>:
     124:	48 48 00                                            HH.

00000127 <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_6>:
     127:	49 56 00                                            IV.

0000012a <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_5>:
     12a:	44 4f 00                                            DO.

0000012d <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_4>:
     12d:	53 41 00                                            SA.

00000130 <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_3>:
     130:	53 58 00                                            SX.

00000133 <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_2>:
     133:	51 49 00                                            QI.

00000136 <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_1>:
     136:	51 41 00                                            QA.

00000139 <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c_0>:
     139:	54 45 00                                            TE.

0000013c <_ZZN16class_Feed_Timer18GetWeekDayShortStrEhE3__c>:
     13c:	53 45 00                                            SE.

0000013f <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_6>:
     13f:	49 4e 56 4c 00                                      INVL.

00000144 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_5>:
     144:	44 4f 4d 20 00                                      DOM .

00000149 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_4>:
     149:	53 41 42 20 00                                      SAB .

0000014e <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_3>:
     14e:	53 45 58 20 00                                      SEX .

00000153 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_2>:
     153:	51 55 49 20 00                                      QUI .

00000158 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_1>:
     158:	51 55 41 20 00                                      QUA .

0000015d <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_0>:
     15d:	54 45 52 20 00                                      TER .

00000162 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c>:
     162:	53 45 47 20 00                                      SEG .

00000167 <_ZZN19class_Display_7_Seg3ClsEvE3__c>:
     167:	20 20 20 20 00                                          .

0000016c <_ZL34_FEED_TIMER_DISP_7_SEG_ASCII_Table>:
     16c:	00 01 40 41 00 00 22 5c 00 00 00 20 39 0f 00 00     ..@A.."\... 9...
     17c:	0c 40 88 52 3f 06 5b 4f 66 6d 7d 07 7f 6f 00 00     .@.R?.[Ofm}..o..
     18c:	00 48 00 53 00 77 7c 39 5e 79 71 6f 76 06 1e 7e     .H.S.w|9^yqov..~
     19c:	38 37 54 3f 73 67 33 6d 78 3e 1c 2a 76 6e 5b 39     87T?sg3mx>.*vn[9
     1ac:	64 0f 23 08 02 00                                   d.#...

000001b2 <__ctors_start>:
     1b2:	18 0f       	add	r17, r24
     1b4:	dd 11       	cpse	r29, r13

000001b6 <__ctors_end>:
     1b6:	11 24       	eor	r1, r1
     1b8:	1f be       	out	0x3f, r1	; 63
     1ba:	cf ef       	ldi	r28, 0xFF	; 255
     1bc:	d8 e0       	ldi	r29, 0x08	; 8
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	cd bf       	out	0x3d, r28	; 61

000001c2 <__do_copy_data>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	a0 e0       	ldi	r26, 0x00	; 0
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	ee e4       	ldi	r30, 0x4E	; 78
     1ca:	fd e2       	ldi	r31, 0x2D	; 45
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <__do_copy_data+0x10>
     1ce:	05 90       	lpm	r0, Z+
     1d0:	0d 92       	st	X+, r0
     1d2:	aa 35       	cpi	r26, 0x5A	; 90
     1d4:	b1 07       	cpc	r27, r17
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <__do_copy_data+0xc>

000001d8 <__do_clear_bss>:
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	aa e5       	ldi	r26, 0x5A	; 90
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <.do_clear_bss_start>

000001e0 <.do_clear_bss_loop>:
     1e0:	1d 92       	st	X+, r1

000001e2 <.do_clear_bss_start>:
     1e2:	af 38       	cpi	r26, 0x8F	; 143
     1e4:	b2 07       	cpc	r27, r18
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <.do_clear_bss_loop>

000001e8 <__do_global_ctors>:
     1e8:	10 e0       	ldi	r17, 0x00	; 0
     1ea:	cb ed       	ldi	r28, 0xDB	; 219
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <__do_global_ctors+0x10>
     1f0:	21 97       	sbiw	r28, 0x01	; 1
     1f2:	fe 01       	movw	r30, r28
     1f4:	0e 94 8a 13 	call	0x2714	; 0x2714 <__tablejump2__>
     1f8:	c9 3d       	cpi	r28, 0xD9	; 217
     1fa:	d1 07       	cpc	r29, r17
     1fc:	c9 f7       	brne	.-14     	; 0x1f0 <__do_global_ctors+0x8>
     1fe:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <main>
     202:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>:
		/* Set Timer 0 Disable                                                  */
		/************************************************************************/
		void inline SetTimer0_OFF()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0&=~(1<<OCIE0A);
     20a:	ee e6       	ldi	r30, 0x6E	; 110
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	8d 7f       	andi	r24, 0xFD	; 253
     212:	80 83       	st	Z, r24
     214:	08 95       	ret

00000216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>:
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case don't be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     216:	ee e6       	ldi	r30, 0x6E	; 110
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	82 60       	ori	r24, 0x02	; 2
     21e:	80 83       	st	Z, r24
     220:	08 95       	ret

00000222 <_ZN16class_Feed_Timer13ClockCallBackEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ClockCallBack()
{
     222:	9f 92       	push	r9
     224:	af 92       	push	r10
     226:	bf 92       	push	r11
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	27 97       	sbiw	r28, 0x07	; 7
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
	//PROCESS TIME
	//////////////////////////////
	//pump tick count
	//TickCount++;
	//pump second
	Ptrs->Second++;
     248:	e0 91 01 01 	lds	r30, 0x0101
     24c:	f0 91 02 01 	lds	r31, 0x0102
     250:	82 81       	ldd	r24, Z+2	; 0x02
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	82 83       	std	Z+2, r24	; 0x02
	//if greater 59
	if (Ptrs->Second>59)	{
     256:	82 81       	ldd	r24, Z+2	; 0x02
     258:	8c 33       	cpi	r24, 0x3C	; 60
     25a:	b8 f0       	brcs	.+46     	; 0x28a <_ZN16class_Feed_Timer13ClockCallBackEv+0x68>
		//clear second
		Ptrs->Second=0;
     25c:	12 82       	std	Z+2, r1	; 0x02
		//pump minute
		Ptrs->Minute++;
     25e:	81 81       	ldd	r24, Z+1	; 0x01
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	81 83       	std	Z+1, r24	; 0x01
		//if greater 59
		if (Ptrs->Minute>59)	{
     264:	81 81       	ldd	r24, Z+1	; 0x01
     266:	8c 33       	cpi	r24, 0x3C	; 60
     268:	80 f0       	brcs	.+32     	; 0x28a <_ZN16class_Feed_Timer13ClockCallBackEv+0x68>
			//clear minute
			Ptrs->Minute=0;
     26a:	11 82       	std	Z+1, r1	; 0x01
			//pump hour
			Ptrs->Hour++;
     26c:	80 81       	ld	r24, Z
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	80 83       	st	Z, r24
			//if greater 23
			if (Ptrs->Hour>23)  {
     272:	80 81       	ld	r24, Z
     274:	88 31       	cpi	r24, 0x18	; 24
     276:	48 f0       	brcs	.+18     	; 0x28a <_ZN16class_Feed_Timer13ClockCallBackEv+0x68>
				//clear hour
				Ptrs->Hour=0;
     278:	10 82       	st	Z, r1
				//pump week day
				Ptrs->WeekDay++;
     27a:	83 81       	ldd	r24, Z+3	; 0x03
     27c:	8f 5f       	subi	r24, 0xFF	; 255
     27e:	83 83       	std	Z+3, r24	; 0x03
				//if greater 7
				if (Ptrs->WeekDay>7)	Ptrs->WeekDay=1; //Set to Monday=1
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	88 30       	cpi	r24, 0x08	; 8
     284:	10 f0       	brcs	.+4      	; 0x28a <_ZN16class_Feed_Timer13ClockCallBackEv+0x68>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	/////////////////////////////
	/// Enable interrupts to avoid long time in this callback
	/////////////////////////////
	sei();
     28a:	78 94       	sei
	struct EventStruct		*EventP,EventTmp;
	struct EventCountStruct *EventCountP;
	event_Type				 Event;
	int8_t					 EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
     28c:	8c eb       	ldi	r24, 0xBC	; 188
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     294:	b1 2c       	mov	r11, r1
	int8_t					 EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
     296:	0d e6       	ldi	r16, 0x6D	; 109
     298:	11 e0       	ldi	r17, 0x01	; 1
	event_Type				 Event;
	int8_t					 EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	e9 2e       	mov	r14, r25
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	f9 2e       	mov	r15, r25
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     2a2:	c8 2e       	mov	r12, r24
     2a4:	88 0f       	add	r24, r24
     2a6:	dd 08       	sbc	r13, r13
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
						dp.MotorOFF();
						SleepState=true;
     2a8:	aa 24       	eor	r10, r10
     2aa:	a3 94       	inc	r10
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     2ac:	8b 2d       	mov	r24, r11
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	8c 15       	cp	r24, r12
     2b2:	9d 05       	cpc	r25, r13
     2b4:	0c f0       	brlt	.+2      	; 0x2b8 <_ZN16class_Feed_Timer13ClockCallBackEv+0x96>
     2b6:	de c0       	rjmp	.+444    	; 0x474 <_ZN16class_Feed_Timer13ClockCallBackEv+0x252>
	//for(uint8_t i=0;i<EVENT_SIZE;i++)
	{
		Event=static_cast<event_Type>(eeprom_read_byte(&EventP->Event));
     2b8:	c7 01       	movw	r24, r14
     2ba:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
     2be:	98 2e       	mov	r9, r24
		switch (Event)
     2c0:	31 e0       	ldi	r19, 0x01	; 1
     2c2:	83 17       	cp	r24, r19
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <_ZN16class_Feed_Timer13ClockCallBackEv+0xb4>
     2c6:	83 17       	cp	r24, r19
     2c8:	08 f4       	brcc	.+2      	; 0x2cc <_ZN16class_Feed_Timer13ClockCallBackEv+0xaa>
     2ca:	b4 c0       	rjmp	.+360    	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
     2cc:	53 e0       	ldi	r21, 0x03	; 3
     2ce:	58 17       	cp	r21, r24
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <_ZN16class_Feed_Timer13ClockCallBackEv+0xb2>
     2d2:	6a c0       	rjmp	.+212    	; 0x3a8 <_ZN16class_Feed_Timer13ClockCallBackEv+0x186>
     2d4:	af c0       	rjmp	.+350    	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
			////////////////////////
			// REPEAT EVENT
			////////////////////////
			case event_Type::REPEAT:
				//time to load from hours,minute?
				if (EventCountP->Flags.SeparateFlag.LoadFrom==false && EventCountP->Count==0)
     2d6:	f8 01       	movw	r30, r16
     2d8:	80 81       	ld	r24, Z
     2da:	41 81       	ldd	r20, Z+1	; 0x01
     2dc:	52 81       	ldd	r21, Z+2	; 0x02
     2de:	63 81       	ldd	r22, Z+3	; 0x03
     2e0:	74 81       	ldd	r23, Z+4	; 0x04
     2e2:	80 fd       	sbrc	r24, 0
     2e4:	39 c0       	rjmp	.+114    	; 0x358 <_ZN16class_Feed_Timer13ClockCallBackEv+0x136>
     2e6:	41 15       	cp	r20, r1
     2e8:	51 05       	cpc	r21, r1
     2ea:	61 05       	cpc	r22, r1
     2ec:	71 05       	cpc	r23, r1
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <_ZN16class_Feed_Timer13ClockCallBackEv+0xd0>
     2f0:	51 c0       	rjmp	.+162    	; 0x394 <_ZN16class_Feed_Timer13ClockCallBackEv+0x172>
				{
					//yes, update count from hours and minute
					eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     2f2:	47 e0       	ldi	r20, 0x07	; 7
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	b7 01       	movw	r22, r14
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.Hour*60+(uint16_t)EventTmp.Minute)*60L;
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	2b 81       	ldd	r18, Y+3	; 0x03
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	fc e3       	ldi	r31, 0x3C	; 60
     308:	8f 9f       	mul	r24, r31
     30a:	20 0d       	add	r18, r0
     30c:	31 1d       	adc	r19, r1
     30e:	11 24       	eor	r1, r1
					//translate to seconds motor on and subtract from hour and minutes
					EventCountP->Count-=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     310:	4d 81       	ldd	r20, Y+5	; 0x05
				if (EventCountP->Flags.SeparateFlag.LoadFrom==false && EventCountP->Count==0)
				{
					//yes, update count from hours and minute
					eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.Hour*60+(uint16_t)EventTmp.Minute)*60L;
     312:	ac e3       	ldi	r26, 0x3C	; 60
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	0e 94 4e 13 	call	0x269c	; 0x269c <__umulhisi3>
					//translate to seconds motor on and subtract from hour and minutes
					EventCountP->Count-=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     31a:	2e 81       	ldd	r18, Y+6	; 0x06
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	5c e3       	ldi	r21, 0x3C	; 60
     320:	45 9f       	mul	r20, r21
     322:	20 0d       	add	r18, r0
     324:	31 1d       	adc	r19, r1
     326:	11 24       	eor	r1, r1
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	82 1b       	sub	r24, r18
     32e:	93 0b       	sbc	r25, r19
     330:	a1 09       	sbc	r26, r1
     332:	b1 09       	sbc	r27, r1
     334:	f8 01       	movw	r30, r16
     336:	81 83       	std	Z+1, r24	; 0x01
     338:	92 83       	std	Z+2, r25	; 0x02
     33a:	a3 83       	std	Z+3, r26	; 0x03
     33c:	b4 83       	std	Z+4, r27	; 0x04
					//set flag to true
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     33e:	90 81       	ld	r25, Z
     340:	91 60       	ori	r25, 0x01	; 1
     342:	90 83       	st	Z, r25

					//if second event the turn motor off
					if (EventCountP->Flags.SeparateFlag.Counting)
     344:	91 ff       	sbrs	r25, 1
     346:	04 c0       	rjmp	.+8      	; 0x350 <_ZN16class_Feed_Timer13ClockCallBackEv+0x12e>
		/* Turn Feed Motor OFF                                                  */
		/************************************************************************/
		void	inline MotorOFF(void)
		{
			//PUT MOTOR PORT TO INPUT HI-Z DO DISABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     348:	3c 98       	cbi	0x07, 4	; 7
					{
						//set motor OFF
						dp.MotorOFF();
						//sleep
						SleepState=true;						
     34a:	90 92 00 01 	sts	0x0100, r9
     34e:	72 c0       	rjmp	.+228    	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
					}
					else
					{
						//set counting true
						EventCountP->Flags.SeparateFlag.Counting=true;
     350:	92 60       	ori	r25, 0x02	; 2
     352:	f8 01       	movw	r30, r16
     354:	90 83       	st	Z, r25
     356:	6e c0       	rjmp	.+220    	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
					}
				}
				else
				{
					//time to load from MinuteMotorON,SecondMotorON?
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     358:	41 15       	cp	r20, r1
     35a:	51 05       	cpc	r21, r1
     35c:	61 05       	cpc	r22, r1
     35e:	71 05       	cpc	r23, r1
     360:	c9 f4       	brne	.+50     	; 0x394 <_ZN16class_Feed_Timer13ClockCallBackEv+0x172>
					{
						//yes, update count from MinuteMotorON,SecondMotorON
						eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     362:	47 e0       	ldi	r20, 0x07	; 7
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	b7 01       	movw	r22, r14
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
						//translate to seconds and load count
						EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     370:	2d 81       	ldd	r18, Y+5	; 0x05
     372:	8e 81       	ldd	r24, Y+6	; 0x06
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	fc e3       	ldi	r31, 0x3C	; 60
     378:	2f 9f       	mul	r18, r31
     37a:	80 0d       	add	r24, r0
     37c:	91 1d       	adc	r25, r1
     37e:	11 24       	eor	r1, r1
     380:	a0 e0       	ldi	r26, 0x00	; 0
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	f8 01       	movw	r30, r16
     386:	81 83       	std	Z+1, r24	; 0x01
     388:	92 83       	std	Z+2, r25	; 0x02
     38a:	a3 83       	std	Z+3, r26	; 0x03
     38c:	b4 83       	std	Z+4, r27	; 0x04
						//set flag to false
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
     38e:	80 81       	ld	r24, Z
						EventCountP->Flags.SeparateFlag.Counting=true;
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	57 c0       	rjmp	.+174    	; 0x442 <_ZN16class_Feed_Timer13ClockCallBackEv+0x220>
						SleepState=false;
					}
					else
					{
						//decrement count
						EventCountP->Count--;
     394:	41 50       	subi	r20, 0x01	; 1
     396:	51 09       	sbc	r21, r1
     398:	61 09       	sbc	r22, r1
     39a:	71 09       	sbc	r23, r1
     39c:	f8 01       	movw	r30, r16
     39e:	41 83       	std	Z+1, r20	; 0x01
     3a0:	52 83       	std	Z+2, r21	; 0x02
     3a2:	63 83       	std	Z+3, r22	; 0x03
     3a4:	74 83       	std	Z+4, r23	; 0x04
     3a6:	46 c0       	rjmp	.+140    	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
			// DIARY OR WEEKLY EVENT
			////////////////////////
			case event_Type::DIARY:
			case event_Type::WEEKLY:
				//check if time arise
				eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     3a8:	47 e0       	ldi	r20, 0x07	; 7
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	b7 01       	movw	r22, r14
     3ae:	ce 01       	movw	r24, r28
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
				//check time
				if (EventTmp.Hour==Ptrs->Hour && EventTmp.Minute==Ptrs->Minute && Ptrs->Second==0 && (EventTmp.WeekDays & (1<<(Ptrs->WeekDay-1))))
     3b6:	e0 91 01 01 	lds	r30, 0x0101
     3ba:	f0 91 02 01 	lds	r31, 0x0102
     3be:	80 81       	ld	r24, Z
     3c0:	9a 81       	ldd	r25, Y+2	; 0x02
     3c2:	98 13       	cpse	r25, r24
     3c4:	24 c0       	rjmp	.+72     	; 0x40e <_ZN16class_Feed_Timer13ClockCallBackEv+0x1ec>
     3c6:	81 81       	ldd	r24, Z+1	; 0x01
     3c8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ca:	98 13       	cpse	r25, r24
     3cc:	20 c0       	rjmp	.+64     	; 0x40e <_ZN16class_Feed_Timer13ClockCallBackEv+0x1ec>
     3ce:	82 81       	ldd	r24, Z+2	; 0x02
     3d0:	81 11       	cpse	r24, r1
     3d2:	1d c0       	rjmp	.+58     	; 0x40e <_ZN16class_Feed_Timer13ClockCallBackEv+0x1ec>
     3d4:	23 81       	ldd	r18, Z+3	; 0x03
     3d6:	8c 81       	ldd	r24, Y+4	; 0x04
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1c0>
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	2a 95       	dec	r18
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <_ZN16class_Feed_Timer13ClockCallBackEv+0x1bc>
     3e6:	80 ff       	sbrs	r24, 0
     3e8:	12 c0       	rjmp	.+36     	; 0x40e <_ZN16class_Feed_Timer13ClockCallBackEv+0x1ec>
				{
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	4e 81       	ldd	r20, Y+6	; 0x06
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	3c e3       	ldi	r19, 0x3C	; 60
     3f2:	83 9f       	mul	r24, r19
     3f4:	40 0d       	add	r20, r0
     3f6:	51 1d       	adc	r21, r1
     3f8:	11 24       	eor	r1, r1
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	f8 01       	movw	r30, r16
     400:	41 83       	std	Z+1, r20	; 0x01
     402:	52 83       	std	Z+2, r21	; 0x02
     404:	63 83       	std	Z+3, r22	; 0x03
     406:	74 83       	std	Z+4, r23	; 0x04
					//set flag to false
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     408:	80 81       	ld	r24, Z
					EventCountP->Flags.SeparateFlag.Counting=true;
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	1a c0       	rjmp	.+52     	; 0x442 <_ZN16class_Feed_Timer13ClockCallBackEv+0x220>
					dp.MotorON();
					SleepState=false;					
				}
				else
				{
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     40e:	f8 01       	movw	r30, r16
     410:	80 81       	ld	r24, Z
     412:	80 ff       	sbrs	r24, 0
     414:	20 c0       	rjmp	.+64     	; 0x456 <_ZN16class_Feed_Timer13ClockCallBackEv+0x234>
     416:	f8 01       	movw	r30, r16
     418:	41 81       	ldd	r20, Z+1	; 0x01
     41a:	52 81       	ldd	r21, Z+2	; 0x02
     41c:	63 81       	ldd	r22, Z+3	; 0x03
     41e:	74 81       	ldd	r23, Z+4	; 0x04
     420:	45 2b       	or	r20, r21
     422:	46 2b       	or	r20, r22
     424:	47 2b       	or	r20, r23
     426:	b9 f4       	brne	.+46     	; 0x456 <_ZN16class_Feed_Timer13ClockCallBackEv+0x234>
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
     428:	8e 7f       	andi	r24, 0xFE	; 254
     42a:	8d 7f       	andi	r24, 0xFD	; 253
     42c:	80 83       	st	Z, r24
     42e:	3c 98       	cbi	0x07, 4	; 7
						dp.MotorOFF();
						SleepState=true;
     430:	a0 92 00 01 	sts	0x0100, r10
			////////////////////////
			case event_Type::EMPTY:			
			break;
		}
		//next event
		EventP++;
     434:	f7 e0       	ldi	r31, 0x07	; 7
     436:	ef 0e       	add	r14, r31
     438:	f1 1c       	adc	r15, r1
		EventCountP++;		
     43a:	0b 5f       	subi	r16, 0xFB	; 251
     43c:	1f 4f       	sbci	r17, 0xFF	; 255
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     43e:	b3 94       	inc	r11
     440:	35 cf       	rjmp	.-406    	; 0x2ac <_ZN16class_Feed_Timer13ClockCallBackEv+0x8a>
				{
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
					//set flag to false
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
					EventCountP->Flags.SeparateFlag.Counting=true;
     442:	82 60       	ori	r24, 0x02	; 2
     444:	80 83       	st	Z, r24
					//set motor ON
					dp.EnableIO();
     446:	81 e6       	ldi	r24, 0x61	; 97
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Turn Feed Motor ON                                                   */
		/************************************************************************/
		void	inline MotorON(void)
		{
			//PUT MOTOR PORT TO OUTPUT DIRECTION TO ENABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     44e:	3c 9a       	sbi	0x07, 4	; 7
					dp.MotorON();
					SleepState=false;					
     450:	10 92 00 01 	sts	0x0100, r1
     454:	ef cf       	rjmp	.-34     	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
						SleepState=true;
					}
					else
					{
						//count--
						if (EventCountP->Flags.SeparateFlag.Counting) EventCountP->Count--;
     456:	81 ff       	sbrs	r24, 1
     458:	ed cf       	rjmp	.-38     	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
     45a:	f8 01       	movw	r30, r16
     45c:	81 81       	ldd	r24, Z+1	; 0x01
     45e:	92 81       	ldd	r25, Z+2	; 0x02
     460:	a3 81       	ldd	r26, Z+3	; 0x03
     462:	b4 81       	ldd	r27, Z+4	; 0x04
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	a1 09       	sbc	r26, r1
     468:	b1 09       	sbc	r27, r1
     46a:	81 83       	std	Z+1, r24	; 0x01
     46c:	92 83       	std	Z+2, r25	; 0x02
     46e:	a3 83       	std	Z+3, r26	; 0x03
     470:	b4 83       	std	Z+4, r27	; 0x04
     472:	e0 cf       	rjmp	.-64     	; 0x434 <_ZN16class_Feed_Timer13ClockCallBackEv+0x212>
		}
		//next event
		EventP++;
		EventCountP++;		
	}
}
     474:	27 96       	adiw	r28, 0x07	; 7
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	bf 90       	pop	r11
     492:	af 90       	pop	r10
     494:	9f 90       	pop	r9
     496:	08 95       	ret

00000498 <_ZN16class_Feed_TimerC1Ev>:
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
class_Feed_Timer::class_Feed_Timer()
{
	dp.SetSecondCallBack(class_Feed_Timer::ClockCallBack);
     498:	61 e1       	ldi	r22, 0x11	; 17
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	81 e6       	ldi	r24, 0x61	; 97
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>

000004a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  hour,minute,second,weeday			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::GetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	6b 01       	movw	r12, r22
     4b8:	7a 01       	movw	r14, r20
     4ba:	59 01       	movw	r10, r18
	uint8_t h2,m2,s2,w2;
	
	//loop for correct get time without interrupt

	//get time 
	h1=Ptrs->Hour;
     4bc:	e0 91 01 01 	lds	r30, 0x0101
     4c0:	f0 91 02 01 	lds	r31, 0x0102
     4c4:	50 81       	ld	r21, Z
	m1=Ptrs->Minute;
     4c6:	31 81       	ldd	r19, Z+1	; 0x01
	s1=Ptrs->Second;
     4c8:	92 81       	ldd	r25, Z+2	; 0x02
	w1=Ptrs->WeekDay;
     4ca:	83 81       	ldd	r24, Z+3	; 0x03
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
     4cc:	a0 81       	ld	r26, Z
		m2=Ptrs->Minute;
     4ce:	b1 81       	ldd	r27, Z+1	; 0x01
		s2=Ptrs->Second;
     4d0:	c2 81       	ldd	r28, Z+2	; 0x02
		w2=Ptrs->WeekDay;
     4d2:	73 81       	ldd	r23, Z+3	; 0x03
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     4d4:	5a 17       	cp	r21, r26
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x3e>
//	| @INPUT   :				  													|
//	| @OUTPUT  :  hour,minute,second,weeday			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::GetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     4d8:	87 2f       	mov	r24, r23
     4da:	9c 2f       	mov	r25, r28
     4dc:	3b 2f       	mov	r19, r27
     4de:	5a 2f       	mov	r21, r26
     4e0:	f5 cf       	rjmp	.-22     	; 0x4cc <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x28>
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
		s2=Ptrs->Second;
		w2=Ptrs->WeekDay;
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     4e2:	3b 13       	cpse	r19, r27
     4e4:	f9 cf       	rjmp	.-14     	; 0x4d8 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
     4e6:	9c 13       	cpse	r25, r28
     4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
     4ea:	87 13       	cpse	r24, r23
     4ec:	f5 cf       	rjmp	.-22     	; 0x4d8 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
		m1=m2;
		s1=s2;
		w1=w2;
	}
	//return correct time
	hourParm=h2;
     4ee:	f6 01       	movw	r30, r12
     4f0:	50 83       	st	Z, r21
	minuteParm=m2;
     4f2:	f7 01       	movw	r30, r14
     4f4:	30 83       	st	Z, r19
	secondParm=s2;
     4f6:	f5 01       	movw	r30, r10
     4f8:	90 83       	st	Z, r25
	weekdayParm=w2;
     4fa:	f8 01       	movw	r30, r16
     4fc:	80 83       	st	Z, r24
}
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	df 90       	pop	r13
     50a:	cf 90       	pop	r12
     50c:	bf 90       	pop	r11
     50e:	af 90       	pop	r10
     510:	08 95       	ret

00000512 <_ZN16class_Feed_Timer7SetTimeERhS0_S0_S0_>:
//	| @INPUT   :  hour,minute,second,weekday										|
//	| @OUTPUT  :  hour,minute,second,weekday			                            |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::SetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
	//save SREG
	uint8_t sreg=SREG;
     516:	8f b7       	in	r24, 0x3f	; 63
	//clear interrupts
	cli();
     518:	f8 94       	cli
	//set time
	Ptrs->Hour=hourParm;
     51a:	e0 91 01 01 	lds	r30, 0x0101
     51e:	f0 91 02 01 	lds	r31, 0x0102
     522:	db 01       	movw	r26, r22
     524:	9c 91       	ld	r25, X
     526:	90 83       	st	Z, r25
	Ptrs->Minute=minuteParm;
     528:	da 01       	movw	r26, r20
     52a:	9c 91       	ld	r25, X
     52c:	91 83       	std	Z+1, r25	; 0x01
	Ptrs->Second=secondParm;
     52e:	d9 01       	movw	r26, r18
     530:	9c 91       	ld	r25, X
     532:	92 83       	std	Z+2, r25	; 0x02
	Ptrs->WeekDay=weekdayParm;
     534:	d8 01       	movw	r26, r16
     536:	9c 91       	ld	r25, X
     538:	93 83       	std	Z+3, r25	; 0x03
	//restore SREG
	SREG=sreg;
     53a:	8f bf       	out	0x3f, r24	; 63
}
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <_ZN16class_Feed_Timer12ClearAndExitEv>:
//	| @INPUT   :  WeekDay															|
//	| @OUTPUT  :  return weekDay number						                        |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ClearAndExit()
{
     542:	cf 93       	push	r28
	//clear screen
	dp.Cls();
     544:	81 e6       	ldi	r24, 0x61	; 97
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	//clear all points
	for(uint8_t i=1;i<=4;i++)
     54c:	c1 e0       	ldi	r28, 0x01	; 1
		dp.DispSetPoint(i,false);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	6c 2f       	mov	r22, r28
     552:	81 e6       	ldi	r24, 0x61	; 97
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
void	class_Feed_Timer::ClearAndExit()
{
	//clear screen
	dp.Cls();
	//clear all points
	for(uint8_t i=1;i<=4;i++)
     55a:	cf 5f       	subi	r28, 0xFF	; 255
     55c:	c5 30       	cpi	r28, 0x05	; 5
     55e:	b9 f7       	brne	.-18     	; 0x54e <_ZN16class_Feed_Timer12ClearAndExitEv+0xc>
		dp.DispSetPoint(i,false);
	//time to clear
	time.DelayMsS(10);
     560:	6a e0       	ldi	r22, 0x0A	; 10
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	88 e6       	ldi	r24, 0x68	; 104
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
	//disable timer0 
	this->SetTimer0_OFF();
}
     56c:	cf 91       	pop	r28
	for(uint8_t i=1;i<=4;i++)
		dp.DispSetPoint(i,false);
	//time to clear
	time.DelayMsS(10);
	//disable timer0 
	this->SetTimer0_OFF();
     56e:	0c 94 05 01 	jmp	0x20a	; 0x20a <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>

00000572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>:
//	| @INPUT   :  hour,minute														|
//	| @OUTPUT  :  return true if both parms entered ok		                        |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool	class_Feed_Timer::InputHourMinOrMinSec(uint8_t &hourMin,uint8_t &minSec,bool inputHourMin/* =true */,bool newInput/* =true */)
{
     572:	2f 92       	push	r2
     574:	3f 92       	push	r3
     576:	4f 92       	push	r4
     578:	5f 92       	push	r5
     57a:	6f 92       	push	r6
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	28 97       	sbiw	r28, 0x08	; 8
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	5c 01       	movw	r10, r24
     5a8:	4b 01       	movw	r8, r22
     5aa:	3a 01       	movw	r6, r20
     5ac:	42 2e       	mov	r4, r18
	bool		bBlink=false,
				bRap=false;
	uint32_t	tRap;
				
	//New input?
	if (newInput)
     5ae:	00 23       	and	r16, r16
     5b0:	21 f0       	breq	.+8      	; 0x5ba <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x48>
	{
		//yes,set to max to flash
		hourMinTmp=0xff;
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	88 87       	std	Y+8, r24	; 0x08
		minSecTmp=0xff;
     5b6:	8f 83       	std	Y+7, r24	; 0x07
     5b8:	1a c0       	rjmp	.+52     	; 0x5ee <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x7c>
	{
		//else get actual time
		if (inputHourMin)
		{
			//get Hour and Minute
			this->GetTime(hourMinTmp,minSecTmp,tmp1,tmp2);	
     5ba:	8e 01       	movw	r16, r28
     5bc:	0b 5f       	subi	r16, 0xFB	; 251
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	9e 01       	movw	r18, r28
		minSecTmp=0xff;
	}
	else
	{
		//else get actual time
		if (inputHourMin)
     5c2:	44 20       	and	r4, r4
     5c4:	49 f0       	breq	.+18     	; 0x5d8 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x66>
		{
			//get Hour and Minute
			this->GetTime(hourMinTmp,minSecTmp,tmp1,tmp2);	
     5c6:	2a 5f       	subi	r18, 0xFA	; 250
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	ae 01       	movw	r20, r28
     5cc:	49 5f       	subi	r20, 0xF9	; 249
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	be 01       	movw	r22, r28
     5d2:	68 5f       	subi	r22, 0xF8	; 248
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x76>
		}
		else
		{
			//get Minute and Second
			this->GetTime(tmp1,hourMinTmp,minSecTmp,tmp2);
     5d8:	29 5f       	subi	r18, 0xF9	; 249
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	ae 01       	movw	r20, r28
     5de:	48 5f       	subi	r20, 0xF8	; 248
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	be 01       	movw	r22, r28
     5e4:	6a 5f       	subi	r22, 0xFA	; 250
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	c5 01       	movw	r24, r10
     5ea:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
		}
	}
	//set hour Minute separator
	dp.DispSetPoint(2,true);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	81 e6       	ldi	r24, 0x61	; 97
     5f4:	93 e0       	ldi	r25, 0x03	; 3
     5f6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	//Enable timer0
	this->SetTimer0_ON();
     5fa:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
	//enable io
	dp.EnableIO();
     5fe:	81 e6       	ldi	r24, 0x61	; 97
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
	//Set Time To Exit and Flash
	time.SetElapsed(&tExit);
     606:	6f e5       	ldi	r22, 0x5F	; 95
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	88 e6       	ldi	r24, 0x68	; 104
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	time.SetElapsed(&tBlink);
     612:	6b e5       	ldi	r22, 0x5B	; 91
     614:	71 e0       	ldi	r23, 0x01	; 1
     616:	88 e6       	ldi	r24, 0x68	; 104
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	//Wait and key release
	dp.KeyWaitRelease();
     61e:	81 e6       	ldi	r24, 0x61	; 97
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
	time.DelayMsI(KEY_DELAY);
     626:	4e e5       	ldi	r20, 0x5E	; 94
     628:	51 e0       	ldi	r21, 0x01	; 1
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	88 e6       	ldi	r24, 0x68	; 104
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	uint8_t		hourMinTmp,
				minSecTmp,
				tmp1,
				tmp2;
	bool		bBlink=false,
				bRap=false;
     636:	51 2c       	mov	r5, r1
	KeyCode		key;	
	uint8_t		hourMinTmp,
				minSecTmp,
				tmp1,
				tmp2;
	bool		bBlink=false,
     638:	31 2c       	mov	r3, r1
	{
		//time to Blink
		if (time.GetElapsed(&tBlink)>TIME_TO_BLINK)
		{
			time.SetElapsed(&tBlink);
			bBlink=!bBlink;
     63a:	22 24       	eor	r2, r2
     63c:	23 94       	inc	r2
			{
				dp.PutSF(PSTR("--"));
			}
			else
			{
				sprintf(bf,"%02d",minSecTmp);
     63e:	05 e1       	ldi	r16, 0x15	; 21
     640:	11 e0       	ldi	r17, 0x01	; 1
     642:	93 e6       	ldi	r25, 0x63	; 99
     644:	e9 2e       	mov	r14, r25
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	f9 2e       	mov	r15, r25
	//MAIN INPUT LOOP
	//////////////////////////
	for(;;)
	{
		//time to Blink
		if (time.GetElapsed(&tBlink)>TIME_TO_BLINK)
     64a:	6b e5       	ldi	r22, 0x5B	; 91
     64c:	71 e0       	ldi	r23, 0x01	; 1
     64e:	88 e6       	ldi	r24, 0x68	; 104
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
     656:	65 3f       	cpi	r22, 0xF5	; 245
     658:	71 40       	sbci	r23, 0x01	; 1
     65a:	81 05       	cpc	r24, r1
     65c:	91 05       	cpc	r25, r1
     65e:	38 f0       	brcs	.+14     	; 0x66e <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0xfc>
		{
			time.SetElapsed(&tBlink);
     660:	6b e5       	ldi	r22, 0x5B	; 91
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	88 e6       	ldi	r24, 0x68	; 104
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
			bBlink=!bBlink;
     66c:	32 24       	eor	r3, r2
		}
		//time to flash?
		if (bBlink)
     66e:	33 20       	and	r3, r3
     670:	f1 f1       	breq	.+124    	; 0x6ee <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x17c>
		{
			//set point
			dp.DispSetPoint(2,true);
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	81 e6       	ldi	r24, 0x61	; 97
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			//yes, show HH and MM if not entered yet
			dp.Home();
     67e:	81 e6       	ldi	r24, 0x61	; 97
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
			if (hourMinTmp==0xff)
     686:	88 85       	ldd	r24, Y+8	; 0x08
     688:	8f 3f       	cpi	r24, 0xFF	; 255
     68a:	61 f4       	brne	.+24     	; 0x6a4 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x132>
			{
				inputHourMin?dp.PutSF(PSTR("HH")):dp.PutSF(PSTR("MM"));
     68c:	44 20       	and	r4, r4
     68e:	19 f0       	breq	.+6      	; 0x696 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x124>
     690:	64 e2       	ldi	r22, 0x24	; 36
     692:	71 e0       	ldi	r23, 0x01	; 1
     694:	02 c0       	rjmp	.+4      	; 0x69a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x128>
     696:	61 e2       	ldi	r22, 0x21	; 33
     698:	71 e0       	ldi	r23, 0x01	; 1
     69a:	81 e6       	ldi	r24, 0x61	; 97
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
     6a2:	14 c0       	rjmp	.+40     	; 0x6cc <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x15a>
			}
			else
			{
				sprintf(bf,"%02d",hourMinTmp);
     6a4:	1f 92       	push	r1
     6a6:	8f 93       	push	r24
     6a8:	1f 93       	push	r17
     6aa:	0f 93       	push	r16
     6ac:	ff 92       	push	r15
     6ae:	ef 92       	push	r14
     6b0:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
				dp.PutS(bf);
     6b4:	63 e6       	ldi	r22, 0x63	; 99
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	81 e6       	ldi	r24, 0x61	; 97
     6ba:	93 e0       	ldi	r25, 0x03	; 3
     6bc:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
			}
			dp.Locate(3);
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	81 e6       	ldi	r24, 0x61	; 97
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
			if (minSecTmp==0xff)
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	8f 3f       	cpi	r24, 0xFF	; 255
     6da:	09 f0       	breq	.+2      	; 0x6de <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x16c>
     6dc:	3f c0       	rjmp	.+126    	; 0x75c <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1ea>
			{
				inputHourMin?dp.PutSF(PSTR("MM")):dp.PutSF(PSTR("SS"));
     6de:	44 20       	and	r4, r4
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x176>
     6e2:	6e e1       	ldi	r22, 0x1E	; 30
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	35 c0       	rjmp	.+106    	; 0x752 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1e0>
     6e8:	6b e1       	ldi	r22, 0x1B	; 27
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	32 c0       	rjmp	.+100    	; 0x752 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1e0>
			}
		}
		else
		{
			//set point off
			dp.DispSetPoint(2,false);
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	81 e6       	ldi	r24, 0x61	; 97
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			//no, show "  " and "  " if not entered yet
			dp.Home();
     6fa:	81 e6       	ldi	r24, 0x61	; 97
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
			if (hourMinTmp==0xff)
     702:	88 85       	ldd	r24, Y+8	; 0x08
     704:	8f 3f       	cpi	r24, 0xFF	; 255
     706:	39 f4       	brne	.+14     	; 0x716 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1a4>
			{
				dp.PutSF(PSTR("--"));
     708:	68 e1       	ldi	r22, 0x18	; 24
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	81 e6       	ldi	r24, 0x61	; 97
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
     714:	14 c0       	rjmp	.+40     	; 0x73e <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1cc>
			}
			else
			{
				sprintf(bf,"%02d",hourMinTmp);
     716:	1f 92       	push	r1
     718:	8f 93       	push	r24
     71a:	1f 93       	push	r17
     71c:	0f 93       	push	r16
     71e:	ff 92       	push	r15
     720:	ef 92       	push	r14
     722:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
				dp.PutS(bf);
     726:	63 e6       	ldi	r22, 0x63	; 99
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	81 e6       	ldi	r24, 0x61	; 97
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
			}
			dp.Locate(3);
     73e:	63 e0       	ldi	r22, 0x03	; 3
     740:	81 e6       	ldi	r24, 0x61	; 97
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
			if (minSecTmp==0xff)
     748:	8f 81       	ldd	r24, Y+7	; 0x07
     74a:	8f 3f       	cpi	r24, 0xFF	; 255
     74c:	39 f4       	brne	.+14     	; 0x75c <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x1ea>
			{
				dp.PutSF(PSTR("--"));
     74e:	65 e1       	ldi	r22, 0x15	; 21
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	81 e6       	ldi	r24, 0x61	; 97
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
     75a:	14 c0       	rjmp	.+40     	; 0x784 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x212>
			}
			else
			{
				sprintf(bf,"%02d",minSecTmp);
     75c:	1f 92       	push	r1
     75e:	8f 93       	push	r24
     760:	1f 93       	push	r17
     762:	0f 93       	push	r16
     764:	ff 92       	push	r15
     766:	ef 92       	push	r14
     768:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
				dp.PutS(bf);
     76c:	63 e6       	ldi	r22, 0x63	; 99
     76e:	71 e0       	ldi	r23, 0x01	; 1
     770:	81 e6       	ldi	r24, 0x61	; 97
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
			}
		}
		//read keyboard
		key=dp.KeyReadFlash();
     784:	81 e6       	ldi	r24, 0x61	; 97
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     78c:	6c 01       	movw	r12, r24
		//clear time to exit if any key pressed
		if (key!=KeyCode::NONE)
     78e:	89 2b       	or	r24, r25
     790:	a9 f0       	breq	.+42     	; 0x7bc <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x24a>
		{
			time.SetElapsed(&tExit);
     792:	6f e5       	ldi	r22, 0x5F	; 95
     794:	71 e0       	ldi	r23, 0x01	; 1
     796:	88 e6       	ldi	r24, 0x68	; 104
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
			if (time.GetElapsed(&tRap)>TIME_TO_RAPID)
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	88 e6       	ldi	r24, 0x68	; 104
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
     7ac:	61 3d       	cpi	r22, 0xD1	; 209
     7ae:	77 40       	sbci	r23, 0x07	; 7
     7b0:	81 05       	cpc	r24, r1
     7b2:	91 05       	cpc	r25, r1
     7b4:	58 f0       	brcs	.+22     	; 0x7cc <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x25a>
			{
				bRap=true;
     7b6:	55 24       	eor	r5, r5
     7b8:	53 94       	inc	r5
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x25a>
			}
		}
		else
		{
			bRap=false;
			time.SetElapsed(&tRap);
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	88 e6       	ldi	r24, 0x68	; 104
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
				bRap=true;
			}
		}
		else
		{
			bRap=false;
     7ca:	51 2c       	mov	r5, r1
			time.SetElapsed(&tRap);
		}
		//exit if exit time expired
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
     7cc:	6f e5       	ldi	r22, 0x5F	; 95
     7ce:	71 e0       	ldi	r23, 0x01	; 1
     7d0:	88 e6       	ldi	r24, 0x68	; 104
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
     7d8:	61 33       	cpi	r22, 0x31	; 49
     7da:	75 47       	sbci	r23, 0x75	; 117
     7dc:	81 05       	cpc	r24, r1
     7de:	91 05       	cpc	r25, r1
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x27a>
		{
			//clear and exit
			ClearAndExit();
     7e2:	c5 01       	movw	r24, r10
     7e4:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
			return false;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	a6 c0       	rjmp	.+332    	; 0x938 <__stack+0x39>
		}
		//process keys
		switch (static_cast<uint8_t>(key))
     7ec:	dd 24       	eor	r13, r13
     7ee:	22 e0       	ldi	r18, 0x02	; 2
     7f0:	c2 16       	cp	r12, r18
     7f2:	d1 04       	cpc	r13, r1
     7f4:	a1 f0       	breq	.+40     	; 0x81e <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2ac>
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	c8 16       	cp	r12, r24
     7fa:	d1 04       	cpc	r13, r1
     7fc:	71 f1       	breq	.+92     	; 0x85a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2e8>
     7fe:	ca 94       	dec	r12
     800:	cd 28       	or	r12, r13
     802:	09 f0       	breq	.+2      	; 0x806 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x294>
     804:	22 cf       	rjmp	.-444    	; 0x64a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0xd8>
		{
			case static_cast<uint8_t>(KeyCode::DOWN):
				//decrement time
				hourMinTmp++;
     806:	88 85       	ldd	r24, Y+8	; 0x08
     808:	8f 5f       	subi	r24, 0xFF	; 255
				//input Hour Min?
				if (inputHourMin)
     80a:	44 20       	and	r4, r4
     80c:	21 f0       	breq	.+8      	; 0x816 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2a4>
				{
					//process hour
					if (hourMinTmp>23) hourMinTmp=0;
     80e:	88 31       	cpi	r24, 0x18	; 24
     810:	20 f4       	brcc	.+8      	; 0x81a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2a8>
		//process keys
		switch (static_cast<uint8_t>(key))
		{
			case static_cast<uint8_t>(KeyCode::DOWN):
				//decrement time
				hourMinTmp++;
     812:	88 87       	std	Y+8, r24	; 0x08
     814:	09 c0       	rjmp	.+18     	; 0x828 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2b6>
					if (hourMinTmp>23) hourMinTmp=0;
				}
				else
				{
					//process minute
					if (hourMinTmp>59) hourMinTmp=0;
     816:	8c 33       	cpi	r24, 0x3C	; 60
     818:	e0 f3       	brcs	.-8      	; 0x812 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2a0>
				hourMinTmp++;
				//input Hour Min?
				if (inputHourMin)
				{
					//process hour
					if (hourMinTmp>23) hourMinTmp=0;
     81a:	18 86       	std	Y+8, r1	; 0x08
     81c:	05 c0       	rjmp	.+10     	; 0x828 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2b6>
				//key delay
				bRap?time.DelayMsI(KEY_DELAY_RAPID):time.DelayMsI(KEY_DELAY);
			break;
			case static_cast<uint8_t>(KeyCode::UP):
				//increment time
				minSecTmp++;
     81e:	8f 81       	ldd	r24, Y+7	; 0x07
     820:	8f 5f       	subi	r24, 0xFF	; 255
				if (minSecTmp>59) minSecTmp=0;
     822:	8c 33       	cpi	r24, 0x3C	; 60
     824:	c0 f4       	brcc	.+48     	; 0x856 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2e4>
				//key delay
				bRap?time.DelayMsI(KEY_DELAY_RAPID):time.DelayMsI(KEY_DELAY);
			break;
			case static_cast<uint8_t>(KeyCode::UP):
				//increment time
				minSecTmp++;
     826:	8f 83       	std	Y+7, r24	; 0x07
				{
					//process minute
					if (hourMinTmp>59) hourMinTmp=0;
				}
				//key delay
				bRap?time.DelayMsI(KEY_DELAY_RAPID):time.DelayMsI(KEY_DELAY);
     828:	55 20       	and	r5, r5
     82a:	59 f0       	breq	.+22     	; 0x842 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2d0>
     82c:	46 e9       	ldi	r20, 0x96	; 150
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	88 e6       	ldi	r24, 0x68	; 104
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
     83c:	55 24       	eor	r5, r5
     83e:	53 94       	inc	r5
     840:	04 cf       	rjmp	.-504    	; 0x64a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0xd8>
     842:	4e e5       	ldi	r20, 0x5E	; 94
     844:	51 e0       	ldi	r21, 0x01	; 1
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	88 e6       	ldi	r24, 0x68	; 104
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
     852:	51 2c       	mov	r5, r1
     854:	fa ce       	rjmp	.-524    	; 0x64a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0xd8>
			break;
			case static_cast<uint8_t>(KeyCode::UP):
				//increment time
				minSecTmp++;
				if (minSecTmp>59) minSecTmp=0;
     856:	1f 82       	std	Y+7, r1	; 0x07
     858:	e7 cf       	rjmp	.-50     	; 0x828 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2b6>
				//key delay
				bRap?time.DelayMsI(KEY_DELAY_RAPID):time.DelayMsI(KEY_DELAY);
			break;		
			case static_cast<uint8_t>(KeyCode::ENTER):
				//check if hour minute set
				if (hourMinTmp==0xff || minSecTmp==0xff)
     85a:	98 85       	ldd	r25, Y+8	; 0x08
     85c:	9f 3f       	cpi	r25, 0xFF	; 255
     85e:	21 f0       	breq	.+8      	; 0x868 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2f6>
     860:	8f 81       	ldd	r24, Y+7	; 0x07
     862:	8f 3f       	cpi	r24, 0xFF	; 255
     864:	09 f0       	breq	.+2      	; 0x868 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2f6>
     866:	56 c0       	rjmp	.+172    	; 0x914 <__stack+0x15>
     868:	8a e0       	ldi	r24, 0x0A	; 10
     86a:	d8 2e       	mov	r13, r24
				{
					for(uint8_t i=0;i<10;i++)
					{
						dp.Home();
     86c:	81 e6       	ldi	r24, 0x61	; 97
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
						if (hourMinTmp==0xff) inputHourMin? dp.PutSF(PSTR("HH")):dp.PutSF(PSTR("MM"));
     874:	88 85       	ldd	r24, Y+8	; 0x08
     876:	8f 3f       	cpi	r24, 0xFF	; 255
     878:	59 f4       	brne	.+22     	; 0x890 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x31e>
     87a:	44 20       	and	r4, r4
     87c:	19 f0       	breq	.+6      	; 0x884 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x312>
     87e:	62 e1       	ldi	r22, 0x12	; 18
     880:	71 e0       	ldi	r23, 0x01	; 1
     882:	02 c0       	rjmp	.+4      	; 0x888 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x316>
     884:	6f e0       	ldi	r22, 0x0F	; 15
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	81 e6       	ldi	r24, 0x61	; 97
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
						dp.Locate(3);
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	81 e6       	ldi	r24, 0x61	; 97
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
						if (minSecTmp==0xff) inputHourMin? dp.PutSF(PSTR("MM")):dp.PutSF(PSTR("SS"));
     89a:	8f 81       	ldd	r24, Y+7	; 0x07
     89c:	8f 3f       	cpi	r24, 0xFF	; 255
     89e:	59 f4       	brne	.+22     	; 0x8b6 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x344>
     8a0:	44 20       	and	r4, r4
     8a2:	19 f0       	breq	.+6      	; 0x8aa <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x338>
     8a4:	6c e0       	ldi	r22, 0x0C	; 12
     8a6:	71 e0       	ldi	r23, 0x01	; 1
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x33c>
     8aa:	69 e0       	ldi	r22, 0x09	; 9
     8ac:	71 e0       	ldi	r23, 0x01	; 1
     8ae:	81 e6       	ldi	r24, 0x61	; 97
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
						time.DelayMsI(100);
     8b6:	44 e6       	ldi	r20, 0x64	; 100
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	88 e6       	ldi	r24, 0x68	; 104
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
						dp.Home();
     8c6:	81 e6       	ldi	r24, 0x61	; 97
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
						if (hourMinTmp==0xff) dp.PutSF(PSTR("  "));
     8ce:	88 85       	ldd	r24, Y+8	; 0x08
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	31 f4       	brne	.+12     	; 0x8e0 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x36e>
     8d4:	66 e0       	ldi	r22, 0x06	; 6
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	81 e6       	ldi	r24, 0x61	; 97
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
						dp.Locate(3);
     8e0:	63 e0       	ldi	r22, 0x03	; 3
     8e2:	81 e6       	ldi	r24, 0x61	; 97
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
						if (minSecTmp==0xff) dp.PutSF(PSTR("  "));
     8ea:	8f 81       	ldd	r24, Y+7	; 0x07
     8ec:	8f 3f       	cpi	r24, 0xFF	; 255
     8ee:	31 f4       	brne	.+12     	; 0x8fc <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x38a>
     8f0:	63 e0       	ldi	r22, 0x03	; 3
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	81 e6       	ldi	r24, 0x61	; 97
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
						time.DelayMsI(100);						
     8fc:	44 e6       	ldi	r20, 0x64	; 100
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	88 e6       	ldi	r24, 0x68	; 104
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
     90c:	da 94       	dec	r13
			break;		
			case static_cast<uint8_t>(KeyCode::ENTER):
				//check if hour minute set
				if (hourMinTmp==0xff || minSecTmp==0xff)
				{
					for(uint8_t i=0;i<10;i++)
     90e:	d1 10       	cpse	r13, r1
     910:	ad cf       	rjmp	.-166    	; 0x86c <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0x2fa>
     912:	9b ce       	rjmp	.-714    	; 0x64a <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb+0xd8>
					}
				}
				else
				{
					//set New Time
					hourMin=hourMinTmp;
     914:	f4 01       	movw	r30, r8
     916:	90 83       	st	Z, r25
					minSec=minSecTmp;
     918:	f3 01       	movw	r30, r6
     91a:	80 83       	st	Z, r24
					//clear screen clear point timer 0
					dp.DispSetPoint(2,false);
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	62 e0       	ldi	r22, 0x02	; 2
     920:	81 e6       	ldi	r24, 0x61	; 97
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
					//wait key release
					dp.KeyWaitRelease();					
     928:	81 e6       	ldi	r24, 0x61	; 97
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
					ClearAndExit();
     930:	c5 01       	movw	r24, r10
     932:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
					return true;					
     936:	81 e0       	ldi	r24, 0x01	; 1
				}
			break;	
		}
	}
}
     938:	28 96       	adiw	r28, 0x08	; 8
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	bf 90       	pop	r11
     956:	af 90       	pop	r10
     958:	9f 90       	pop	r9
     95a:	8f 90       	pop	r8
     95c:	7f 90       	pop	r7
     95e:	6f 90       	pop	r6
     960:	5f 90       	pop	r5
     962:	4f 90       	pop	r4
     964:	3f 90       	pop	r3
     966:	2f 90       	pop	r2
     968:	08 95       	ret

0000096a <_ZN16class_Feed_Timer12InputWeekDayERhb>:
//	| @INPUT   :  WeekDay															|
//	| @OUTPUT  :  return weekDay number						                        |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool	class_Feed_Timer::InputWeekDay(uint8_t &weekDay,bool newInput/* =true */)
{
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	28 97       	sbiw	r28, 0x08	; 8
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	7c 01       	movw	r14, r24
     990:	6b 01       	movw	r12, r22
	KeyCode		key;
	uint8_t		h,m,s,w;
	uint32_t	tExit;
	
	//New input?
	if (newInput)
     992:	44 23       	and	r20, r20
     994:	19 f0       	breq	.+6      	; 0x99c <_ZN16class_Feed_Timer12InputWeekDayERhb+0x32>
	{
		//yes
		w=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	8d 83       	std	Y+5, r24	; 0x05
     99a:	0e c0       	rjmp	.+28     	; 0x9b8 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x4e>
	}
	else
	{
		//else get weekday
		this->GetTime(h,m,s,w);
     99c:	8e 01       	movw	r16, r28
     99e:	0b 5f       	subi	r16, 0xFB	; 251
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	9e 01       	movw	r18, r28
     9a4:	2a 5f       	subi	r18, 0xFA	; 250
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	ae 01       	movw	r20, r28
     9aa:	49 5f       	subi	r20, 0xF9	; 249
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	be 01       	movw	r22, r28
     9b0:	68 5f       	subi	r22, 0xF8	; 248
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
	}
	//set hour Minute separator
	dp.DispSetPoint(3,true);
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	81 e6       	ldi	r24, 0x61	; 97
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	//Enable timer0
	this->SetTimer0_ON();
     9c4:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
	//enable io
	dp.EnableIO();
     9c8:	81 e6       	ldi	r24, 0x61	; 97
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
	//Set Time To Exit and Flash
	time.SetElapsed(&tExit);
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	88 e6       	ldi	r24, 0x68	; 104
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	//Wait and key release
	dp.KeyWaitRelease();
     9de:	81 e6       	ldi	r24, 0x61	; 97
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
	time.DelayMsI(KEY_DELAY);
     9e6:	4e e5       	ldi	r20, 0x5E	; 94
     9e8:	51 e0       	ldi	r21, 0x01	; 1
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	88 e6       	ldi	r24, 0x68	; 104
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
				time.DelayMsI(KEY_DELAY);
				break;
			case KeyCode::UP:
				//increment weekday
				w++;
				if (w>static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY)) w=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     9f6:	11 e0       	ldi	r17, 0x01	; 1
		switch (key)
		{
			case KeyCode::DOWN:
				//decrement weekday
				w--;
				if (w<static_cast<uint8_t>(enum_WEEK_DAY::MONDAY)) w=static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY);
     9f8:	07 e0       	ldi	r16, 0x07	; 7
	//////////////////////////
	//MAIN INPUT LOOP
	//////////////////////////
	for(;;)
	{
		dp.Home();
     9fa:	81 e6       	ldi	r24, 0x61	; 97
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
     a02:	ed 81       	ldd	r30, Y+5	; 0x05
     a04:	e1 50       	subi	r30, 0x01	; 1
     a06:	e7 30       	cpi	r30, 0x07	; 7
     a08:	40 f4       	brcc	.+16     	; 0xa1a <_ZN16class_Feed_Timer12InputWeekDayERhb+0xb0>
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	e4 5b       	subi	r30, 0xB4	; 180
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	60 81       	ld	r22, Z
     a16:	71 81       	ldd	r23, Z+1	; 0x01
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <_ZN16class_Feed_Timer12InputWeekDayERhb+0xb4>
		dp.PutSF(this->GetWeekDayStr(w));
     a1a:	6f e3       	ldi	r22, 0x3F	; 63
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	81 e6       	ldi	r24, 0x61	; 97
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
		//read keys
		key=dp.KeyReadFlash();
     a26:	81 e6       	ldi	r24, 0x61	; 97
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     a2e:	5c 01       	movw	r10, r24
		//clear elapsed time if any key pressed
		if (key!=KeyCode::NONE)
     a30:	89 2b       	or	r24, r25
     a32:	39 f0       	breq	.+14     	; 0xa42 <_ZN16class_Feed_Timer12InputWeekDayERhb+0xd8>
		{
			time.SetElapsed(&tExit);
     a34:	be 01       	movw	r22, r28
     a36:	6f 5f       	subi	r22, 0xFF	; 255
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	88 e6       	ldi	r24, 0x68	; 104
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
		}
		//exit time to exit reached
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
     a42:	be 01       	movw	r22, r28
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	88 e6       	ldi	r24, 0x68	; 104
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
     a50:	61 33       	cpi	r22, 0x31	; 49
     a52:	75 47       	sbci	r23, 0x75	; 117
     a54:	81 05       	cpc	r24, r1
     a56:	91 05       	cpc	r25, r1
     a58:	58 f0       	brcs	.+22     	; 0xa70 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x106>
		{
			//disable timer,clear screen point
			dp.DispSetPoint(3,false);
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	63 e0       	ldi	r22, 0x03	; 3
     a5e:	81 e6       	ldi	r24, 0x61	; 97
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			ClearAndExit();
     a66:	c7 01       	movw	r24, r14
     a68:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
			//set weekday no set
			return false;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	32 c0       	rjmp	.+100    	; 0xad4 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x16a>
		}	
		
		
		//----------------------------------------
		//process keys
		switch (key)
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	a8 16       	cp	r10, r24
     a74:	b1 04       	cpc	r11, r1
     a76:	a9 f0       	breq	.+42     	; 0xaa2 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x138>
     a78:	e3 e0       	ldi	r30, 0x03	; 3
     a7a:	ae 16       	cp	r10, r30
     a7c:	b1 04       	cpc	r11, r1
     a7e:	c9 f0       	breq	.+50     	; 0xab2 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x148>
     a80:	aa 94       	dec	r10
     a82:	ab 28       	or	r10, r11
     a84:	09 f0       	breq	.+2      	; 0xa88 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x11e>
     a86:	b9 cf       	rjmp	.-142    	; 0x9fa <_ZN16class_Feed_Timer12InputWeekDayERhb+0x90>
		{
			case KeyCode::DOWN:
				//decrement weekday
				w--;
     a88:	8d 81       	ldd	r24, Y+5	; 0x05
     a8a:	81 50       	subi	r24, 0x01	; 1
				if (w<static_cast<uint8_t>(enum_WEEK_DAY::MONDAY)) w=static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY);
     a8c:	71 f4       	brne	.+28     	; 0xaaa <_ZN16class_Feed_Timer12InputWeekDayERhb+0x140>
     a8e:	0d 83       	std	Y+5, r16	; 0x05
				//key delay
				time.DelayMsI(KEY_DELAY);
     a90:	4e e5       	ldi	r20, 0x5E	; 94
     a92:	51 e0       	ldi	r21, 0x01	; 1
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	88 e6       	ldi	r24, 0x68	; 104
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
				break;
     aa0:	ac cf       	rjmp	.-168    	; 0x9fa <_ZN16class_Feed_Timer12InputWeekDayERhb+0x90>
			case KeyCode::UP:
				//increment weekday
				w++;
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
				if (w>static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY)) w=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     aa6:	88 30       	cpi	r24, 0x08	; 8
     aa8:	10 f4       	brcc	.+4      	; 0xaae <_ZN16class_Feed_Timer12InputWeekDayERhb+0x144>
				//key delay
				time.DelayMsI(KEY_DELAY);
				break;
			case KeyCode::UP:
				//increment weekday
				w++;
     aaa:	8d 83       	std	Y+5, r24	; 0x05
     aac:	f1 cf       	rjmp	.-30     	; 0xa90 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x126>
				if (w>static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY)) w=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     aae:	1d 83       	std	Y+5, r17	; 0x05
     ab0:	ef cf       	rjmp	.-34     	; 0xa90 <_ZN16class_Feed_Timer12InputWeekDayERhb+0x126>
				//key delay
				time.DelayMsI(KEY_DELAY);
			break;
			case KeyCode::ENTER:
				//set week day
				weekDay=w;
     ab2:	8d 81       	ldd	r24, Y+5	; 0x05
     ab4:	f6 01       	movw	r30, r12
     ab6:	80 83       	st	Z, r24
				//disable timer,clear screen point
				dp.KeyWaitRelease();
     ab8:	81 e6       	ldi	r24, 0x61	; 97
     aba:	93 e0       	ldi	r25, 0x03	; 3
     abc:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
				dp.DispSetPoint(3,false);
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	63 e0       	ldi	r22, 0x03	; 3
     ac4:	81 e6       	ldi	r24, 0x61	; 97
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
				ClearAndExit();
     acc:	c7 01       	movw	r24, r14
     ace:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
				return true;				
     ad2:	81 e0       	ldi	r24, 0x01	; 1
			case KeyCode::ENTER_REPEAT:
			case KeyCode::NONE:
			break;
		}			
	}
}
     ad4:	28 96       	adiw	r28, 0x08	; 8
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	08 95       	ret

00000af6 <_ZN16class_Feed_Timer13InputWeekDaysERhb>:
//	| @INPUT   :  WeekDays															|
//	| @OUTPUT  :  return in weekDay bit0=1 Monsay Set,..,bit7=1 Sunday set          |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool	class_Feed_Timer::InputWeekDays(uint8_t &weekDays,bool newInput/* =true */)
{
     af6:	3f 92       	push	r3
     af8:	4f 92       	push	r4
     afa:	5f 92       	push	r5
     afc:	6f 92       	push	r6
     afe:	7f 92       	push	r7
     b00:	8f 92       	push	r8
     b02:	9f 92       	push	r9
     b04:	af 92       	push	r10
     b06:	bf 92       	push	r11
     b08:	cf 92       	push	r12
     b0a:	df 92       	push	r13
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x24>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x26>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	5c 01       	movw	r10, r24
     b22:	4b 01       	movw	r8, r22
	uint8_t		WDay,		//Hold Day of week
				WDays;		//Hold all Days of week
	uint32_t	tExit;
	
	//New input?
	if (newInput)
     b24:	41 11       	cpse	r20, r1
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x38>
		WDays=0;
	}
	else
	{
		//get week days
		WDays=weekDays;
     b28:	fb 01       	movw	r30, r22
     b2a:	50 80       	ld	r5, Z
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x3a>
	
	//New input?
	if (newInput)
	{
		//yes, clear all week days
		WDays=0;
     b2e:	51 2c       	mov	r5, r1
		WDays=weekDays;
	}
	//set week day as monday
	WDay=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
	//Enable timer0
	this->SetTimer0_ON();
     b30:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
	//enable io
	dp.EnableIO();
     b34:	81 e6       	ldi	r24, 0x61	; 97
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
	//Set Time To Exit and Flash
	time.SetElapsed(&tExit);
     b3c:	be 01       	movw	r22, r28
     b3e:	6f 5f       	subi	r22, 0xFF	; 255
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	88 e6       	ldi	r24, 0x68	; 104
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	//Wait and key release
	dp.KeyWaitRelease();
     b4a:	81 e6       	ldi	r24, 0x61	; 97
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
	time.DelayMsI(KEY_DELAY);
     b52:	4e e5       	ldi	r20, 0x5E	; 94
     b54:	51 e0       	ldi	r21, 0x01	; 1
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	88 e6       	ldi	r24, 0x68	; 104
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	{
		//get week days
		WDays=weekDays;
	}
	//set week day as monday
	WDay=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     b62:	44 24       	eor	r4, r4
     b64:	43 94       	inc	r4
     b66:	04 2d       	mov	r16, r4
     b68:	10 e0       	ldi	r17, 0x00	; 0
		dp.Home();
		dp.PutSF(this->GetWeekDayShortStr(WDay));
		dp.PutSF(PSTR("-"));
		//show if weekday is selected
		dp.Locate(4);
		if ((WDays & (1<<(WDay-1)))==0)
     b6a:	01 50       	subi	r16, 0x01	; 1
     b6c:	11 09       	sbc	r17, r1
     b6e:	e5 2c       	mov	r14, r5
     b70:	f1 2c       	mov	r15, r1
     b72:	00 2e       	mov	r0, r16
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x84>
     b76:	f5 94       	asr	r15
     b78:	e7 94       	ror	r14
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x80>
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	ef 22       	and	r14, r31
     b82:	ff 24       	eor	r15, r15
     b84:	33 24       	eor	r3, r3
     b86:	3a 94       	dec	r3
     b88:	34 0c       	add	r3, r4
     b8a:	c3 2c       	mov	r12, r3
     b8c:	d1 2c       	mov	r13, r1
     b8e:	c6 01       	movw	r24, r12
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	9c 01       	movw	r18, r24
     b96:	22 5c       	subi	r18, 0xC2	; 194
     b98:	3e 4f       	sbci	r19, 0xFE	; 254
     b9a:	69 01       	movw	r12, r18
	//////////////////////////
	//MAIN INPUT LOOP
	//////////////////////////
	for(;;)
	{
		dp.Home();
     b9c:	81 e6       	ldi	r24, 0x61	; 97
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
     ba4:	36 e0       	ldi	r19, 0x06	; 6
     ba6:	33 15       	cp	r19, r3
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0xbc>
     baa:	f6 01       	movw	r30, r12
     bac:	60 81       	ld	r22, Z
     bae:	71 81       	ldd	r23, Z+1	; 0x01
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0xc0>
     bb2:	67 e2       	ldi	r22, 0x27	; 39
     bb4:	71 e0       	ldi	r23, 0x01	; 1
		dp.PutSF(this->GetWeekDayShortStr(WDay));
     bb6:	81 e6       	ldi	r24, 0x61	; 97
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
		dp.PutSF(PSTR("-"));
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	71 e0       	ldi	r23, 0x01	; 1
     bc2:	81 e6       	ldi	r24, 0x61	; 97
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
		//show if weekday is selected
		dp.Locate(4);
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
		if ((WDays & (1<<(WDay-1)))==0)
     bd4:	e1 14       	cp	r14, r1
     bd6:	f1 04       	cpc	r15, r1
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0xea>
		{
			dp.PutSF(PSTR(" "));
     bda:	6f ef       	ldi	r22, 0xFF	; 255
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0xee>
		}
		else
		{
			dp.PutSF(PSTR("#"));
     be0:	6d ef       	ldi	r22, 0xFD	; 253
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	81 e6       	ldi	r24, 0x61	; 97
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
		}
		//read keys
		key=dp.KeyReadFlash();
     bec:	81 e6       	ldi	r24, 0x61	; 97
     bee:	93 e0       	ldi	r25, 0x03	; 3
     bf0:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     bf4:	3c 01       	movw	r6, r24
		//clear elapsed time if any key pressed
		if (key!=KeyCode::NONE)
     bf6:	89 2b       	or	r24, r25
     bf8:	39 f0       	breq	.+14     	; 0xc08 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x112>
		{
			time.SetElapsed(&tExit);
     bfa:	be 01       	movw	r22, r28
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	88 e6       	ldi	r24, 0x68	; 104
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
		}
		//exit time to exit reached
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	88 e6       	ldi	r24, 0x68	; 104
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
     c16:	61 33       	cpi	r22, 0x31	; 49
     c18:	75 47       	sbci	r23, 0x75	; 117
     c1a:	81 05       	cpc	r24, r1
     c1c:	91 05       	cpc	r25, r1
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x134>
		{
			//disable timer,clear screen point
			ClearAndExit();
     c20:	c5 01       	movw	r24, r10
     c22:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
			//set weekdays not set
			return false;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	49 c0       	rjmp	.+146    	; 0xcbc <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x1c6>
		}
		//process keys
		switch (key)
     c2a:	22 e0       	ldi	r18, 0x02	; 2
     c2c:	62 16       	cp	r6, r18
     c2e:	71 04       	cpc	r7, r1
     c30:	51 f0       	breq	.+20     	; 0xc46 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x150>
     c32:	33 e0       	ldi	r19, 0x03	; 3
     c34:	63 16       	cp	r6, r19
     c36:	71 04       	cpc	r7, r1
     c38:	b9 f1       	breq	.+110    	; 0xca8 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x1b2>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	68 16       	cp	r6, r24
     c3e:	71 04       	cpc	r7, r1
     c40:	09 f0       	breq	.+2      	; 0xc44 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x14e>
     c42:	ac cf       	rjmp	.-168    	; 0xb9c <_ZN16class_Feed_Timer13InputWeekDaysERhb+0xa6>
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x15e>
		{
	
			case KeyCode::UP:
			//increment weekday
				WDay++;
     c46:	43 94       	inc	r4
				if (WDay>static_cast<uint8_t>(enum_WEEK_DAY::SUNDAY)) WDay=static_cast<uint8_t>(enum_WEEK_DAY::MONDAY);
     c48:	e7 e0       	ldi	r30, 0x07	; 7
     c4a:	e4 15       	cp	r30, r4
     c4c:	20 f5       	brcc	.+72     	; 0xc96 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x1a0>
     c4e:	44 24       	eor	r4, r4
     c50:	43 94       	inc	r4
     c52:	21 c0       	rjmp	.+66     	; 0xc96 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x1a0>
				//key delay
				time.DelayMsI(KEY_DELAY);
			break;
			case KeyCode::DOWN:
			//change weekday selection
				WDays^=(1<<(WDay-1));
     c54:	00 2e       	mov	r0, r16
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x164>
     c58:	66 0c       	add	r6, r6
     c5a:	0a 94       	dec	r0
     c5c:	ea f7       	brpl	.-6      	; 0xc58 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x162>
     c5e:	56 24       	eor	r5, r6
				dp.Locate(4);
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	81 e6       	ldi	r24, 0x61	; 97
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
				if ((WDays & (1<<(WDay-1)))==0)
     c6a:	85 2d       	mov	r24, r5
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x17e>
     c70:	95 95       	asr	r25
     c72:	87 95       	ror	r24
     c74:	0a 95       	dec	r16
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x17a>
     c78:	80 fd       	sbrc	r24, 0
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x18c>
				{
					dp.PutSF(PSTR(" "));
     c7c:	6b ef       	ldi	r22, 0xFB	; 251
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x190>
				}
				else
				{
					dp.PutSF(PSTR("#"));
     c82:	69 ef       	ldi	r22, 0xF9	; 249
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	81 e6       	ldi	r24, 0x61	; 97
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
				}	
				dp.KeyWaitRelease();
     c8e:	81 e6       	ldi	r24, 0x61	; 97
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
				time.DelayMsI(KEY_DELAY);
     c96:	4e e5       	ldi	r20, 0x5E	; 94
     c98:	51 e0       	ldi	r21, 0x01	; 1
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	88 e6       	ldi	r24, 0x68	; 104
     ca0:	93 e0       	ldi	r25, 0x03	; 3
     ca2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
			break;
     ca6:	5f cf       	rjmp	.-322    	; 0xb66 <_ZN16class_Feed_Timer13InputWeekDaysERhb+0x70>
			case KeyCode::ENTER:
				//set week day
				weekDays=WDays;
     ca8:	f4 01       	movw	r30, r8
     caa:	50 82       	st	Z, r5
				//disable timer,clear screen point
				dp.KeyWaitRelease();
     cac:	81 e6       	ldi	r24, 0x61	; 97
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
				ClearAndExit();
     cb4:	c5 01       	movw	r24, r10
     cb6:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
				return true;
     cba:	81 e0       	ldi	r24, 0x01	; 1
			case KeyCode::ENTER_REPEAT:
			case KeyCode::NONE:
			break;					
		}
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	9f 90       	pop	r9
     cda:	8f 90       	pop	r8
     cdc:	7f 90       	pop	r7
     cde:	6f 90       	pop	r6
     ce0:	5f 90       	pop	r5
     ce2:	4f 90       	pop	r4
     ce4:	3f 90       	pop	r3
     ce6:	08 95       	ret

00000ce8 <_ZN16class_Feed_Timer8InitTimeEv>:
//	| @INPUT   :																	|
//	| @OUTPUT  :											                        |
//	| @REMARKS :  if boot is cold new time is requested if hot set new time			|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::InitTime()
{
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_ZN16class_Feed_Timer8InitTimeEv+0xe>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <_ZN16class_Feed_Timer8InitTimeEv+0x10>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	uint8_t		h=0xff,
     cfc:	2f ef       	ldi	r18, 0xFF	; 255
     cfe:	2c 83       	std	Y+4, r18	; 0x04
				m=0xff,
     d00:	2b 83       	std	Y+3, r18	; 0x03
				s=0,
     d02:	1a 82       	std	Y+2, r1	; 0x02
				w=0xff;
     d04:	29 83       	std	Y+1, r18	; 0x01
	
	//get boot type
	if (this->Ptrs->BootKey==_BOOT_KEY)
     d06:	e0 91 01 01 	lds	r30, 0x0101
     d0a:	f0 91 02 01 	lds	r31, 0x0102
     d0e:	44 81       	ldd	r20, Z+4	; 0x04
     d10:	55 81       	ldd	r21, Z+5	; 0x05
     d12:	66 81       	ldd	r22, Z+6	; 0x06
     d14:	77 81       	ldd	r23, Z+7	; 0x07
     d16:	46 32       	cpi	r20, 0x26	; 38
     d18:	59 45       	sbci	r21, 0x59	; 89
     d1a:	61 44       	sbci	r22, 0x41	; 65
     d1c:	71 43       	sbci	r23, 0x31	; 49
     d1e:	71 f1       	breq	.+92     	; 0xd7c <_ZN16class_Feed_Timer8InitTimeEv+0x94>
     d20:	7c 01       	movw	r14, r24
	{
		//return if hot, no need to set time
		return;
	}
	//set boot hot
	this->Ptrs->BootKey=_BOOT_KEY;
     d22:	86 e2       	ldi	r24, 0x26	; 38
     d24:	99 e5       	ldi	r25, 0x59	; 89
     d26:	a1 e4       	ldi	r26, 0x41	; 65
     d28:	b1 e3       	ldi	r27, 0x31	; 49
     d2a:	84 83       	std	Z+4, r24	; 0x04
     d2c:	95 83       	std	Z+5, r25	; 0x05
     d2e:	a6 83       	std	Z+6, r26	; 0x06
     d30:	b7 83       	std	Z+7, r27	; 0x07
	//Get Hour
	do{
	} while (this->InputHourMinOrMinSec(h,m,true,true)==false);
     d32:	01 e0       	ldi	r16, 0x01	; 1
     d34:	21 e0       	ldi	r18, 0x01	; 1
     d36:	ae 01       	movw	r20, r28
     d38:	4d 5f       	subi	r20, 0xFD	; 253
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	be 01       	movw	r22, r28
     d3e:	6c 5f       	subi	r22, 0xFC	; 252
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	c7 01       	movw	r24, r14
     d44:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
		return;
	}
	//set boot hot
	this->Ptrs->BootKey=_BOOT_KEY;
	//Get Hour
	do{
     d48:	88 23       	and	r24, r24
     d4a:	99 f3       	breq	.-26     	; 0xd32 <_ZN16class_Feed_Timer8InitTimeEv+0x4a>
	} while (this->InputHourMinOrMinSec(h,m,true,true)==false);
	//get Day of Week
	do{
	} while (this->InputWeekDay(w,true)==false);
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5f       	subi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	c7 01       	movw	r24, r14
     d56:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN16class_Feed_Timer12InputWeekDayERhb>
	this->Ptrs->BootKey=_BOOT_KEY;
	//Get Hour
	do{
	} while (this->InputHourMinOrMinSec(h,m,true,true)==false);
	//get Day of Week
	do{
     d5a:	88 23       	and	r24, r24
     d5c:	b9 f3       	breq	.-18     	; 0xd4c <_ZN16class_Feed_Timer8InitTimeEv+0x64>
	} while (this->InputWeekDay(w,true)==false);
	//Set Time and week day
	this->SetTime(h,m,s,w);
     d5e:	8e 01       	movw	r16, r28
     d60:	0f 5f       	subi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	9e 01       	movw	r18, r28
     d66:	2e 5f       	subi	r18, 0xFE	; 254
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	ae 01       	movw	r20, r28
     d6c:	4d 5f       	subi	r20, 0xFD	; 253
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	be 01       	movw	r22, r28
     d72:	6c 5f       	subi	r22, 0xFC	; 252
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	c7 01       	movw	r24, r14
     d78:	0e 94 89 02 	call	0x512	; 0x512 <_ZN16class_Feed_Timer7SetTimeERhS0_S0_S0_>
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	08 95       	ret

00000d92 <_ZN16class_Feed_Timer8ShowLIVEEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ShowLIVE()
{
     d92:	cf 93       	push	r28
	static uint8_t	live=0;
	
	
	if (++live>10)
     d94:	80 91 5a 01 	lds	r24, 0x015A
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	80 93 5a 01 	sts	0x015A, r24
     d9e:	8b 30       	cpi	r24, 0x0B	; 11
     da0:	18 f1       	brcs	.+70     	; 0xde8 <_ZN16class_Feed_Timer8ShowLIVEEv+0x56>
	{
		//enable IO State
		dp.EnableIO();
     da2:	81 e6       	ldi	r24, 0x61	; 97
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
		live=0;
     daa:	10 92 5a 01 	sts	0x015A, r1
		//enable timer 0
		SetTimer0_ON();
     dae:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     db2:	c1 e0       	ldi	r28, 0x01	; 1
		{
			dp.DispSetPoint(i,true);
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	6c 2f       	mov	r22, r28
     db8:	81 e6       	ldi	r24, 0x61	; 97
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			time.DelayMsI(65);
     dc0:	41 e4       	ldi	r20, 0x41	; 65
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	88 e6       	ldi	r24, 0x68	; 104
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
			dp.DispSetPoint(i,false);
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	6c 2f       	mov	r22, r28
     dd4:	81 e6       	ldi	r24, 0x61	; 97
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
		dp.EnableIO();
		live=0;
		//enable timer 0
		SetTimer0_ON();
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     ddc:	cf 5f       	subi	r28, 0xFF	; 255
     dde:	c5 30       	cpi	r28, 0x05	; 5
     de0:	49 f7       	brne	.-46     	; 0xdb4 <_ZN16class_Feed_Timer8ShowLIVEEv+0x22>
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
	}
}
     de2:	cf 91       	pop	r28
			dp.DispSetPoint(i,true);
			time.DelayMsI(65);
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
     de4:	0c 94 05 01 	jmp	0x20a	; 0x20a <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
	}
}
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <_ZN16class_Feed_Timer8EventAddER11EventStruct>:
//	| @INPUT   :  Event to add  													|
//	| @OUTPUT  :  return true if Add is okf			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool class_Feed_Timer::EventAdd(struct EventStruct &Event)
{
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	27 97       	sbiw	r28, 0x07	; 7
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	8b 01       	movw	r16, r22
	int8_t tmp;
	uint8_t sreg;
	struct EventStruct EventTmp;
	
	//save SREG
	sreg=SREG;
     e10:	bf b6       	in	r11, 0x3f	; 63
	//disable interrupts
	cli();
     e12:	f8 94       	cli
	if (Event.Event==static_cast<uint8_t>(enum_EVENT_TYPE::DIARY)) Event.WeekDays=0xff; //set to 1 all days of week 
     e14:	fb 01       	movw	r30, r22
     e16:	90 81       	ld	r25, Z
     e18:	92 30       	cpi	r25, 0x02	; 2
     e1a:	19 f4       	brne	.+6      	; 0xe22 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x36>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	83 83       	std	Z+3, r24	; 0x03
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x3e>
	if (Event.Event==static_cast<uint8_t>(enum_EVENT_TYPE::REPEAT)) Event.WeekDays=0;	//set to 0 all days of week per precaution
     e22:	91 30       	cpi	r25, 0x01	; 1
     e24:	11 f4       	brne	.+4      	; 0xe2a <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x3e>
     e26:	fb 01       	movw	r30, r22
     e28:	13 82       	std	Z+3, r1	; 0x03
	//compute Xor Check
	Event.XorCheck=Event.Event ^ Event.Hour ^ Event.Minute ^ Event.WeekDays ^ Event.MinuteMotorON ^ Event.SecondMotorON;
     e2a:	f8 01       	movw	r30, r16
     e2c:	81 81       	ldd	r24, Z+1	; 0x01
     e2e:	89 27       	eor	r24, r25
     e30:	92 81       	ldd	r25, Z+2	; 0x02
     e32:	89 27       	eor	r24, r25
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	89 27       	eor	r24, r25
     e38:	94 81       	ldd	r25, Z+4	; 0x04
     e3a:	89 27       	eor	r24, r25
     e3c:	95 81       	ldd	r25, Z+5	; 0x05
     e3e:	89 27       	eor	r24, r25
     e40:	86 83       	std	Z+6, r24	; 0x06
	//Get Event Size
	tmp=eeprom_read_byte(&EE_EventsSize);
     e42:	8c eb       	ldi	r24, 0xBC	; 188
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
	tmp++;
     e4a:	ee 24       	eor	r14, r14
     e4c:	e3 94       	inc	r14
     e4e:	e8 0e       	add	r14, r24
     e50:	f4 e6       	ldi	r31, 0x64	; 100
     e52:	fe 15       	cp	r31, r14
     e54:	14 f4       	brge	.+4      	; 0xe5a <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x6e>
     e56:	84 e6       	ldi	r24, 0x64	; 100
     e58:	e8 2e       	mov	r14, r24
	if (tmp>EVENT_SIZE) tmp=EVENT_SIZE;
	eeprom_write_byte(&EE_EventsSize,tmp);
     e5a:	6e 2d       	mov	r22, r14
     e5c:	8c eb       	ldi	r24, 0xBC	; 188
     e5e:	92 e0       	ldi	r25, 0x02	; 2
     e60:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <eeprom_write_byte>
	// new event
	eeprom_write_block(&Event,&EE_Events[tmp-1],sizeof(Event));
     e64:	0e 2c       	mov	r0, r14
     e66:	00 0c       	add	r0, r0
     e68:	ff 08       	sbc	r15, r15
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	e2 1a       	sub	r14, r18
     e6e:	f1 08       	sbc	r15, r1
     e70:	27 e0       	ldi	r18, 0x07	; 7
     e72:	2e 9d       	mul	r18, r14
     e74:	c0 01       	movw	r24, r0
     e76:	2f 9d       	mul	r18, r15
     e78:	90 0d       	add	r25, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	fc 01       	movw	r30, r24
     e7e:	e0 50       	subi	r30, 0x00	; 0
     e80:	f0 40       	sbci	r31, 0x00	; 0
     e82:	6f 01       	movw	r12, r30
     e84:	47 e0       	ldi	r20, 0x07	; 7
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	bf 01       	movw	r22, r30
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 56 16 	call	0x2cac	; 0x2cac <eeprom_write_block>
	//read back to check if write ok
	eeprom_read_block(&EventTmp,&EE_Events[tmp-1],sizeof(Event));
     e90:	47 e0       	ldi	r20, 0x07	; 7
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	b6 01       	movw	r22, r12
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
	//clear flags and counter
	EventsCount[tmp-1].Flags.SeparateFlag.LoadFrom=false;
     e9e:	85 e0       	ldi	r24, 0x05	; 5
     ea0:	8e 9d       	mul	r24, r14
     ea2:	f0 01       	movw	r30, r0
     ea4:	8f 9d       	mul	r24, r15
     ea6:	f0 0d       	add	r31, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	e3 59       	subi	r30, 0x93	; 147
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	80 81       	ld	r24, Z
	EventsCount[tmp-1].Flags.SeparateFlag.Counting=false;
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8d 7f       	andi	r24, 0xFD	; 253
     eb4:	80 83       	st	Z, r24
	EventsCount[tmp-1].Count=0;
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	12 82       	std	Z+2, r1	; 0x02
     eba:	13 82       	std	Z+3, r1	; 0x03
     ebc:	14 82       	std	Z+4, r1	; 0x04
	//restore SREG
	SREG=sreg;
     ebe:	bf be       	out	0x3f, r11	; 63
	//return state
	if (memcmp(&Event,&EventTmp,sizeof(Event))==0)
     ec0:	47 e0       	ldi	r20, 0x07	; 7
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	be 01       	movw	r22, r28
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	c8 01       	movw	r24, r16
     ecc:	0e 94 90 13 	call	0x2720	; 0x2720 <memcmp>
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	89 2b       	or	r24, r25
     ed4:	09 f0       	breq	.+2      	; 0xed8 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0xec>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	else
		return false;
}
     ed8:	82 2f       	mov	r24, r18
     eda:	27 96       	adiw	r28, 0x07	; 7
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	08 95       	ret

00000efa <_ZN16class_Feed_Timer11EventDeleteEh>:
//	| @INPUT   :  eventNumber to delete												|
//	| @OUTPUT  :  return true if Add is okf			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool class_Feed_Timer::EventDelete(uint8_t eventNumber)
{
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	28 97       	sbiw	r28, 0x08	; 8
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
	uint8_t sreg,EvCount;
	struct EventStruct *EvPSource,*EvPDestiny,EvBuffer;
	
	//save SREG
	sreg=SREG;
     f22:	9f b6       	in	r9, 0x3f	; 63
	//disable interrupts
	cli();
     f24:	f8 94       	cli
		/* Turn Feed Motor OFF                                                  */
		/************************************************************************/
		void	inline MotorOFF(void)
		{
			//PUT MOTOR PORT TO INPUT HI-Z DO DISABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     f26:	3c 98       	cbi	0x07, 4	; 7
	//prevent motor on during this process
	dp.MotorOFF();
	//Get Event Size
	EvCount=eeprom_read_byte(&EE_EventsSize);
     f28:	8c eb       	ldi	r24, 0xBC	; 188
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	68 87       	std	Y+8, r22	; 0x08
     f2e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
     f32:	08 2f       	mov	r16, r24
	//return false if eventNumber>eventcount
	if (eventNumber>=EvCount) return false;
     f34:	68 85       	ldd	r22, Y+8	; 0x08
     f36:	68 17       	cp	r22, r24
     f38:	08 f0       	brcs	.+2      	; 0xf3c <_ZN16class_Feed_Timer11EventDeleteEh+0x42>
     f3a:	52 c0       	rjmp	.+164    	; 0xfe0 <_ZN16class_Feed_Timer11EventDeleteEh+0xe6>
	//if only one event set event count to 0
	if (EvCount==1)
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	31 f4       	brne	.+12     	; 0xf4c <_ZN16class_Feed_Timer11EventDeleteEh+0x52>
	{
		EvCount=0;
		eeprom_write_byte(&EE_EventsSize,EvCount);
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	8c eb       	ldi	r24, 0xBC	; 188
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <eeprom_write_byte>
     f4a:	48 c0       	rjmp	.+144    	; 0xfdc <_ZN16class_Feed_Timer11EventDeleteEh+0xe2>
		return true;
	}
	else
	{
		//move Source Events to Destiny Events and decrement EventCount	
		EvPDestiny=&EE_Events[eventNumber];
     f4c:	26 2f       	mov	r18, r22
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	87 e0       	ldi	r24, 0x07	; 7
     f52:	82 9f       	mul	r24, r18
     f54:	a0 01       	movw	r20, r0
     f56:	83 9f       	mul	r24, r19
     f58:	50 0d       	add	r21, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	ba 01       	movw	r22, r20
     f5e:	60 50       	subi	r22, 0x00	; 0
     f60:	70 40       	sbci	r23, 0x00	; 0
     f62:	6b 01       	movw	r12, r22
		EvPSource=&EE_Events[eventNumber+1];
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	82 9f       	mul	r24, r18
     f6a:	a0 01       	movw	r20, r0
     f6c:	83 9f       	mul	r24, r19
     f6e:	50 0d       	add	r21, r0
     f70:	11 24       	eor	r1, r1
     f72:	ca 01       	movw	r24, r20
     f74:	80 50       	subi	r24, 0x00	; 0
     f76:	90 40       	sbci	r25, 0x00	; 0
     f78:	7c 01       	movw	r14, r24
     f7a:	8d e6       	ldi	r24, 0x6D	; 109
     f7c:	a8 2e       	mov	r10, r24
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	b8 2e       	mov	r11, r24
		for(uint8_t i=0;i<EvCount;i++)	
     f82:	10 e0       	ldi	r17, 0x00	; 0
			//move valid blocks
			eeprom_read_block(&EvBuffer,EvPSource,sizeof(EvBuffer));
			eeprom_write_block(&EvBuffer,EvPDestiny,sizeof(EvBuffer));
			EvPSource++;
			EvPDestiny++;
			EventsCount[i]=EventsCount[i+1];
     f84:	95 e0       	ldi	r25, 0x05	; 5
     f86:	89 2e       	mov	r8, r25
     f88:	75 e0       	ldi	r23, 0x05	; 5
     f8a:	a7 0e       	add	r10, r23
     f8c:	b1 1c       	adc	r11, r1
	else
	{
		//move Source Events to Destiny Events and decrement EventCount	
		EvPDestiny=&EE_Events[eventNumber];
		EvPSource=&EE_Events[eventNumber+1];
		for(uint8_t i=0;i<EvCount;i++)	
     f8e:	10 17       	cp	r17, r16
     f90:	f1 f0       	breq	.+60     	; 0xfce <_ZN16class_Feed_Timer11EventDeleteEh+0xd4>
		{
			//move valid blocks
			eeprom_read_block(&EvBuffer,EvPSource,sizeof(EvBuffer));
     f92:	47 e0       	ldi	r20, 0x07	; 7
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	b7 01       	movw	r22, r14
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
			eeprom_write_block(&EvBuffer,EvPDestiny,sizeof(EvBuffer));
     fa0:	47 e0       	ldi	r20, 0x07	; 7
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	b6 01       	movw	r22, r12
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 56 16 	call	0x2cac	; 0x2cac <eeprom_write_block>
			EvPSource++;
     fae:	97 e0       	ldi	r25, 0x07	; 7
     fb0:	e9 0e       	add	r14, r25
     fb2:	f1 1c       	adc	r15, r1
			EvPDestiny++;
     fb4:	67 e0       	ldi	r22, 0x07	; 7
     fb6:	c6 0e       	add	r12, r22
     fb8:	d1 1c       	adc	r13, r1
			EventsCount[i]=EventsCount[i+1];
     fba:	f5 01       	movw	r30, r10
     fbc:	d5 01       	movw	r26, r10
     fbe:	15 97       	sbiw	r26, 0x05	; 5
     fc0:	88 2d       	mov	r24, r8
     fc2:	01 90       	ld	r0, Z+
     fc4:	0d 92       	st	X+, r0
     fc6:	8a 95       	dec	r24
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <_ZN16class_Feed_Timer11EventDeleteEh+0xc8>
	else
	{
		//move Source Events to Destiny Events and decrement EventCount	
		EvPDestiny=&EE_Events[eventNumber];
		EvPSource=&EE_Events[eventNumber+1];
		for(uint8_t i=0;i<EvCount;i++)	
     fca:	1f 5f       	subi	r17, 0xFF	; 255
     fcc:	dd cf       	rjmp	.-70     	; 0xf88 <_ZN16class_Feed_Timer11EventDeleteEh+0x8e>
			EvPDestiny++;
			EventsCount[i]=EventsCount[i+1];
		}
	}
	//event--
	EvCount--;
     fce:	6f ef       	ldi	r22, 0xFF	; 255
     fd0:	61 0f       	add	r22, r17
	eeprom_write_byte(&EE_EventsSize,EvCount);
     fd2:	8c eb       	ldi	r24, 0xBC	; 188
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <eeprom_write_byte>
	//restore SREG 
	SREG=sreg;
     fda:	9f be       	out	0x3f, r9	; 63
	//return true
	return true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <_ZN16class_Feed_Timer11EventDeleteEh+0xe8>
	//prevent motor on during this process
	dp.MotorOFF();
	//Get Event Size
	EvCount=eeprom_read_byte(&EE_EventsSize);
	//return false if eventNumber>eventcount
	if (eventNumber>=EvCount) return false;
     fe0:	80 e0       	ldi	r24, 0x00	; 0
	eeprom_write_byte(&EE_EventsSize,EvCount);
	//restore SREG 
	SREG=sreg;
	//return true
	return true;
}
     fe2:	28 96       	adiw	r28, 0x08	; 8
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	08 95       	ret

00001008 <_ZN16class_Feed_Timer15ShowEventNumberEh>:
//	| @INPUT   :  EventNumber	  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ShowEventNumber(uint8_t eventNumber)
{
    1008:	cf 93       	push	r28
    100a:	c6 2f       	mov	r28, r22
	dp.DispSetPoint(1,true);
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	81 e6       	ldi	r24, 0x61	; 97
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	dp.DispSetPoint(3,true);
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	63 e0       	ldi	r22, 0x03	; 3
    101c:	81 e6       	ldi	r24, 0x61	; 97
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	sprintf(bf,"E%02d ",static_cast<int>(eventNumber));
    1024:	1f 92       	push	r1
    1026:	cf 93       	push	r28
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	9f 93       	push	r25
    102e:	8f 93       	push	r24
    1030:	83 e6       	ldi	r24, 0x63	; 99
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	9f 93       	push	r25
    1036:	8f 93       	push	r24
    1038:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
	dp.Home();
    103c:	81 e6       	ldi	r24, 0x61	; 97
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
	dp.PutS(bf);
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	63 e6       	ldi	r22, 0x63	; 99
    1052:	71 e0       	ldi	r23, 0x01	; 1
    1054:	81 e6       	ldi	r24, 0x61	; 97
    1056:	93 e0       	ldi	r25, 0x03	; 3
}
    1058:	cf 91       	pop	r28
{
	dp.DispSetPoint(1,true);
	dp.DispSetPoint(3,true);
	sprintf(bf,"E%02d ",static_cast<int>(eventNumber));
	dp.Home();
	dp.PutS(bf);
    105a:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>

0000105e <_ZN16class_Feed_Timer12ShowWeekDaysEh>:
//	| @INPUT   :  WeekDays bit0=1 Monday,..,bit7=1 Sunday							|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ShowWeekDays(uint8_t weekDays)
{
    105e:	cf 93       	push	r28
    1060:	c6 2f       	mov	r28, r22
	//first column
	dp.Home();
    1062:	81 e6       	ldi	r24, 0x61	; 97
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
    106a:	8c 2f       	mov	r24, r28
    106c:	80 71       	andi	r24, 0x10	; 16
	if ((weekDays & (1<<0))==0 && (weekDays & (1<<4))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
    106e:	c0 fd       	sbrc	r28, 0
    1070:	04 c0       	rjmp	.+8      	; 0x107a <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x1c>
    1072:	81 11       	cpse	r24, r1
    1074:	31 c0       	rjmp	.+98     	; 0x10d8 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x7a>
    1076:	6c e1       	ldi	r22, 0x1C	; 28
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x22>
	if ((weekDays & (1<<0))!=0 && (weekDays & (1<<4))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
    107a:	81 11       	cpse	r24, r1
    107c:	2f c0       	rjmp	.+94     	; 0x10dc <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x7e>
    107e:	6d e1       	ldi	r22, 0x1D	; 29
    1080:	81 e6       	ldi	r24, 0x61	; 97
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
    1088:	8c 2f       	mov	r24, r28
    108a:	80 72       	andi	r24, 0x20	; 32
	if ((weekDays & (1<<0))==0 && (weekDays & (1<<4))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
	if ((weekDays & (1<<0))!=0 && (weekDays & (1<<4))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
	//second column
	if ((weekDays & (1<<1))==0 && (weekDays & (1<<5))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
    108c:	c1 fd       	sbrc	r28, 1
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x3a>
    1090:	81 11       	cpse	r24, r1
    1092:	26 c0       	rjmp	.+76     	; 0x10e0 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x82>
    1094:	6c e1       	ldi	r22, 0x1C	; 28
    1096:	03 c0       	rjmp	.+6      	; 0x109e <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x40>
	if ((weekDays & (1<<1))!=0 && (weekDays & (1<<5))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
    1098:	81 11       	cpse	r24, r1
    109a:	24 c0       	rjmp	.+72     	; 0x10e4 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x86>
    109c:	6d e1       	ldi	r22, 0x1D	; 29
    109e:	81 e6       	ldi	r24, 0x61	; 97
    10a0:	93 e0       	ldi	r25, 0x03	; 3
    10a2:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
    10a6:	8c 2f       	mov	r24, r28
    10a8:	80 74       	andi	r24, 0x40	; 64
	if ((weekDays & (1<<1))==0 && (weekDays & (1<<5))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
	if ((weekDays & (1<<1))!=0 && (weekDays & (1<<5))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
	//third column
	if ((weekDays & (1<<2))==0 && (weekDays & (1<<6))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
    10aa:	c2 fd       	sbrc	r28, 2
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x58>
    10ae:	81 11       	cpse	r24, r1
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x8a>
    10b2:	6c e1       	ldi	r22, 0x1C	; 28
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x5e>
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
    10b6:	81 11       	cpse	r24, r1
    10b8:	19 c0       	rjmp	.+50     	; 0x10ec <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x8e>
    10ba:	6d e1       	ldi	r22, 0x1D	; 29
    10bc:	81 e6       	ldi	r24, 0x61	; 97
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
	if ((weekDays & (1<<2))==0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
	//forty column
	if ((weekDays & (1<<3))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
    10c4:	c3 fd       	sbrc	r28, 3
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x6e>
    10c8:	6c e1       	ldi	r22, 0x1C	; 28
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x70>
	if ((weekDays & (1<<3))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
    10cc:	6d e1       	ldi	r22, 0x1D	; 29
    10ce:	81 e6       	ldi	r24, 0x61	; 97
    10d0:	93 e0       	ldi	r25, 0x03	; 3
}
    10d2:	cf 91       	pop	r28
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
	if ((weekDays & (1<<2))==0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
	//forty column
	if ((weekDays & (1<<3))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
	if ((weekDays & (1<<3))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
    10d4:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
{
	//first column
	dp.Home();
	if ((weekDays & (1<<0))==0 && (weekDays & (1<<4))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
	if ((weekDays & (1<<0))!=0 && (weekDays & (1<<4))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
	if ((weekDays & (1<<0))==0 && (weekDays & (1<<4))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
    10d8:	6e e1       	ldi	r22, 0x1E	; 30
    10da:	d2 cf       	rjmp	.-92     	; 0x1080 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x22>
	if ((weekDays & (1<<0))!=0 && (weekDays & (1<<4))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
    10dc:	6f e1       	ldi	r22, 0x1F	; 31
    10de:	d0 cf       	rjmp	.-96     	; 0x1080 <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x22>
	//second column
	if ((weekDays & (1<<1))==0 && (weekDays & (1<<5))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
	if ((weekDays & (1<<1))!=0 && (weekDays & (1<<5))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
	if ((weekDays & (1<<1))==0 && (weekDays & (1<<5))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
    10e0:	6e e1       	ldi	r22, 0x1E	; 30
    10e2:	dd cf       	rjmp	.-70     	; 0x109e <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x40>
	if ((weekDays & (1<<1))!=0 && (weekDays & (1<<5))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
    10e4:	6f e1       	ldi	r22, 0x1F	; 31
    10e6:	db cf       	rjmp	.-74     	; 0x109e <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x40>
	//third column
	if ((weekDays & (1<<2))==0 && (weekDays & (1<<6))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::FS));
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))==0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::GS));
	if ((weekDays & (1<<2))==0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::RS));
    10e8:	6e e1       	ldi	r22, 0x1E	; 30
    10ea:	e8 cf       	rjmp	.-48     	; 0x10bc <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x5e>
	if ((weekDays & (1<<2))!=0 && (weekDays & (1<<6))!=0) dp.PutC(static_cast<uint8_t>(enum_CONTROL::US));
    10ec:	6f e1       	ldi	r22, 0x1F	; 31
    10ee:	e6 cf       	rjmp	.-52     	; 0x10bc <_ZN16class_Feed_Timer12ShowWeekDaysEh+0x5e>

000010f0 <_ZN16class_Feed_Timer7GetVBatEv>:
	             /(1024*Rg)\
	             |---------|
	             \   10    /
	 ______________________________________________
	*/
	return (((Rv+Rg)/10)*dp.ADCGetValue()*VRef)/((1024*Rg)/10);
    10f0:	81 e6       	ldi	r24, 0x61	; 97
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 cc 11 	call	0x2398	; 0x2398 <_ZN19class_Display_7_Seg11ADCGetValueEv>
    10f8:	dc 01       	movw	r26, r24
    10fa:	24 e2       	ldi	r18, 0x24	; 36
    10fc:	39 ec       	ldi	r19, 0xC9	; 201
    10fe:	4c e1       	ldi	r20, 0x1C	; 28
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__muluhisi3>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3c e5       	ldi	r19, 0x5C	; 92
    110a:	43 e0       	ldi	r20, 0x03	; 3
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	0e 94 2f 13 	call	0x265e	; 0x265e <__divmodsi4>
}
    1112:	c9 01       	movw	r24, r18
    1114:	08 95       	ret

00001116 <_ZN16class_Feed_Timer14GetVBatAverageEv>:
uint16_t class_Feed_Timer::GetVBatAverage()
{
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	8c 01       	movw	r16, r24
    1126:	c0 e2       	ldi	r28, 0x20	; 32
	uint32_t sum=0;
    1128:	c1 2c       	mov	r12, r1
    112a:	d1 2c       	mov	r13, r1
    112c:	76 01       	movw	r14, r12
	
	for(uint8_t i=0;i<32;i++)
	{
		sum=sum+GetVBat();
    112e:	c8 01       	movw	r24, r16
    1130:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN16class_Feed_Timer7GetVBatEv>
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	c8 0e       	add	r12, r24
    113e:	d9 1e       	adc	r13, r25
    1140:	ea 1e       	adc	r14, r26
    1142:	fb 1e       	adc	r15, r27
		time.DelayMsI(16);
    1144:	40 e1       	ldi	r20, 0x10	; 16
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	88 e6       	ldi	r24, 0x68	; 104
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
    1154:	c1 50       	subi	r28, 0x01	; 1
}
uint16_t class_Feed_Timer::GetVBatAverage()
{
	uint32_t sum=0;
	
	for(uint8_t i=0;i<32;i++)
    1156:	59 f7       	brne	.-42     	; 0x112e <_ZN16class_Feed_Timer14GetVBatAverageEv+0x18>
	{
		sum=sum+GetVBat();
		time.DelayMsI(16);
	}
	return sum/32;
    1158:	d7 01       	movw	r26, r14
    115a:	c6 01       	movw	r24, r12
    115c:	25 e0       	ldi	r18, 0x05	; 5
    115e:	b6 95       	lsr	r27
    1160:	a7 95       	ror	r26
    1162:	97 95       	ror	r25
    1164:	87 95       	ror	r24
    1166:	2a 95       	dec	r18
    1168:	d1 f7       	brne	.-12     	; 0x115e <_ZN16class_Feed_Timer14GetVBatAverageEv+0x48>
}
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <_ZN16class_Feed_Timer14GetVBatPercentEv>:
uint16_t class_Feed_Timer::GetVBatPercent()
{
	const int32_t vLow=4000L;			//minimal battery level
	const int32_t vHigh=6500L;			//max battery level
	
	return ((GetVBatAverage()-vLow)*100L)/(vHigh-vLow);
    117a:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN16class_Feed_Timer14GetVBatAverageEv>
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	60 5a       	subi	r22, 0xA0	; 160
    1188:	7f 40       	sbci	r23, 0x0F	; 15
    118a:	81 09       	sbc	r24, r1
    118c:	91 09       	sbc	r25, r1
    118e:	29 e1       	ldi	r18, 0x19	; 25
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	0e 94 2f 13 	call	0x265e	; 0x265e <__divmodsi4>
}
    119a:	c9 01       	movw	r24, r18
    119c:	08 95       	ret

0000119e <_ZN16class_Feed_Timer13ProcessInputsEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ProcessInputs()
{	
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	64 97       	sbiw	r28, 0x14	; 20
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	7c 01       	movw	r14, r24
	bool		bRep=false;
	struct EventStruct	Event;
	
	
	//Enable I/O Timer 0
	dp.EnableIO();
    11d0:	81 e6       	ldi	r24, 0x61	; 97
    11d2:	93 e0       	ldi	r25, 0x03	; 3
    11d4:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
	this->SetTimer0_ON();
    11d8:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
	//Clear Time To Exit
	time.SetElapsed(&tExit);
    11dc:	be 01       	movw	r22, r28
    11de:	64 5f       	subi	r22, 0xF4	; 244
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	88 e6       	ldi	r24, 0x68	; 104
    11e4:	93 e0       	ldi	r25, 0x03	; 3
    11e6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	time.SetElapsed(&tRep);
    11ea:	be 01       	movw	r22, r28
    11ec:	68 5f       	subi	r22, 0xF8	; 248
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	88 e6       	ldi	r24, 0x68	; 104
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
	
	key=dp.KeyReadFlash();
    11f8:	81 e6       	ldi	r24, 0x61	; 97
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
	
	switch (key)
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6a>
    1206:	ea c0       	rjmp	.+468    	; 0x13dc <_ZN16class_Feed_Timer13ProcessInputsEv+0x23e>
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <_ZN16class_Feed_Timer13ProcessInputsEv+0x72>
    120e:	8c c4       	rjmp	.+2328   	; 0x1b28 <_ZN16class_Feed_Timer13ProcessInputsEv+0x98a>
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	09 f0       	breq	.+2      	; 0x1216 <_ZN16class_Feed_Timer13ProcessInputsEv+0x78>
    1214:	c5 c4       	rjmp	.+2442   	; 0x1ba0 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa02>
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
					this->GetTime(h,m1,s,w);
					sprintf(bf,"%02d%02d",h,m1);
    1216:	ba e0       	ldi	r27, 0x0A	; 10
    1218:	ab 2e       	mov	r10, r27
    121a:	b1 e0       	ldi	r27, 0x01	; 1
    121c:	bb 2e       	mov	r11, r27
    121e:	13 e6       	ldi	r17, 0x63	; 99
    1220:	c1 2e       	mov	r12, r17
    1222:	11 e0       	ldi	r17, 0x01	; 1
    1224:	d1 2e       	mov	r13, r17
		/////////////////////
		case KeyCode::DOWN:
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
    1226:	be 01       	movw	r22, r28
    1228:	6f 5f       	subi	r22, 0xFF	; 255
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	88 e6       	ldi	r24, 0x68	; 104
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
				dp.DispSetPoint(2,true);
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	81 e6       	ldi	r24, 0x61	; 97
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
				do{
					this->GetTime(h,m1,s,w);
    1240:	8e 01       	movw	r16, r28
    1242:	00 5f       	subi	r16, 0xF0	; 240
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	9e 01       	movw	r18, r28
    1248:	2f 5e       	subi	r18, 0xEF	; 239
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	ae 01       	movw	r20, r28
    124e:	4d 5e       	subi	r20, 0xED	; 237
    1250:	5f 4f       	sbci	r21, 0xFF	; 255
    1252:	be 01       	movw	r22, r28
    1254:	6c 5e       	subi	r22, 0xEC	; 236
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	c7 01       	movw	r24, r14
    125a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					sprintf(bf,"%02d%02d",h,m1);
    125e:	8b 89       	ldd	r24, Y+19	; 0x13
    1260:	1f 92       	push	r1
    1262:	8f 93       	push	r24
    1264:	8c 89       	ldd	r24, Y+20	; 0x14
    1266:	1f 92       	push	r1
    1268:	8f 93       	push	r24
    126a:	bf 92       	push	r11
    126c:	af 92       	push	r10
    126e:	df 92       	push	r13
    1270:	cf 92       	push	r12
    1272:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
					dp.Locate(1);
    1276:	61 e0       	ldi	r22, 0x01	; 1
    1278:	81 e6       	ldi	r24, 0x61	; 97
    127a:	93 e0       	ldi	r25, 0x03	; 3
    127c:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
					dp.PutS(bf);
    1280:	63 e6       	ldi	r22, 0x63	; 99
    1282:	71 e0       	ldi	r23, 0x01	; 1
    1284:	81 e6       	ldi	r24, 0x61	; 97
    1286:	93 e0       	ldi	r25, 0x03	; 3
    1288:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<1500);
    128c:	be 01       	movw	r22, r28
    128e:	6f 5f       	subi	r22, 0xFF	; 255
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	88 e6       	ldi	r24, 0x68	; 104
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	6c 3d       	cpi	r22, 0xDC	; 220
    12a6:	75 40       	sbci	r23, 0x05	; 5
    12a8:	81 05       	cpc	r24, r1
    12aa:	91 05       	cpc	r25, r1
    12ac:	48 f2       	brcs	.-110    	; 0x1240 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa2>
					this->GetTime(h,m1,s,w);
					sprintf(bf,"%02d%02d",h,m1);
					dp.Locate(1);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	62 e0       	ldi	r22, 0x02	; 2
    12b2:	81 e6       	ldi	r24, 0x61	; 97
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
				//show WeekDay
				dp.DispSetPoint(3,true);
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	63 e0       	ldi	r22, 0x03	; 3
    12be:	81 e6       	ldi	r24, 0x61	; 97
    12c0:	93 e0       	ldi	r25, 0x03	; 3
    12c2:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
				time.SetElapsed(&tShow);
    12c6:	be 01       	movw	r22, r28
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	88 e6       	ldi	r24, 0x68	; 104
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
				do{
					this->GetTime(h,m1,s,w);
    12d4:	8e 01       	movw	r16, r28
    12d6:	00 5f       	subi	r16, 0xF0	; 240
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	9e 01       	movw	r18, r28
    12dc:	2f 5e       	subi	r18, 0xEF	; 239
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	ae 01       	movw	r20, r28
    12e2:	4d 5e       	subi	r20, 0xED	; 237
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	be 01       	movw	r22, r28
    12e8:	6c 5e       	subi	r22, 0xEC	; 236
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	c7 01       	movw	r24, r14
    12ee:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	81 e6       	ldi	r24, 0x61	; 97
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
    12fc:	e8 89       	ldd	r30, Y+16	; 0x10
    12fe:	e1 50       	subi	r30, 0x01	; 1
    1300:	e7 30       	cpi	r30, 0x07	; 7
    1302:	40 f4       	brcc	.+16     	; 0x1314 <_ZN16class_Feed_Timer13ProcessInputsEv+0x176>
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	e4 5b       	subi	r30, 0xB4	; 180
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <_ZN16class_Feed_Timer13ProcessInputsEv+0x17a>
					dp.PutSF(this->GetWeekDayStr(w));
    1314:	6f e3       	ldi	r22, 0x3F	; 63
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	81 e6       	ldi	r24, 0x61	; 97
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
				} while (time.GetElapsed(&tShow)<1500);			
    1320:	be 01       	movw	r22, r28
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	88 e6       	ldi	r24, 0x68	; 104
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
				//show WeekDay
				dp.DispSetPoint(3,true);
				time.SetElapsed(&tShow);
				do{
    132e:	6c 3d       	cpi	r22, 0xDC	; 220
    1330:	75 40       	sbci	r23, 0x05	; 5
    1332:	81 05       	cpc	r24, r1
    1334:	91 05       	cpc	r25, r1
    1336:	70 f2       	brcs	.-100    	; 0x12d4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x136>
					this->GetTime(h,m1,s,w);
					dp.Locate(1);
					dp.PutSF(this->GetWeekDayStr(w));
				} while (time.GetElapsed(&tShow)<1500);			
				dp.DispSetPoint(3,false);	
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	63 e0       	ldi	r22, 0x03	; 3
    133c:	81 e6       	ldi	r24, 0x61	; 97
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
				//show Second
				time.SetElapsed(&tShow);
    1344:	be 01       	movw	r22, r28
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	88 e6       	ldi	r24, 0x68	; 104
    134c:	93 e0       	ldi	r25, 0x03	; 3
    134e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
				dp.Cls();
    1352:	81 e6       	ldi	r24, 0x61	; 97
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
				do{
					this->GetTime(h,m1,s,w);
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
    135a:	e3 e1       	ldi	r30, 0x13	; 19
    135c:	8e 2e       	mov	r8, r30
    135e:	e1 e0       	ldi	r30, 0x01	; 1
    1360:	9e 2e       	mov	r9, r30
				dp.DispSetPoint(3,false);	
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
					this->GetTime(h,m1,s,w);
    1362:	8e 01       	movw	r16, r28
    1364:	00 5f       	subi	r16, 0xF0	; 240
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	9e 01       	movw	r18, r28
    136a:	2f 5e       	subi	r18, 0xEF	; 239
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	ae 01       	movw	r20, r28
    1370:	4d 5e       	subi	r20, 0xED	; 237
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	be 01       	movw	r22, r28
    1376:	6c 5e       	subi	r22, 0xEC	; 236
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	c7 01       	movw	r24, r14
    137c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	81 e6       	ldi	r24, 0x61	; 97
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
					sprintf(bf,"  %02d",s);
    138a:	89 89       	ldd	r24, Y+17	; 0x11
    138c:	1f 92       	push	r1
    138e:	8f 93       	push	r24
    1390:	9f 92       	push	r9
    1392:	8f 92       	push	r8
    1394:	df 92       	push	r13
    1396:	cf 92       	push	r12
    1398:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
					dp.PutS(bf);
    139c:	63 e6       	ldi	r22, 0x63	; 99
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	81 e6       	ldi	r24, 0x61	; 97
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<4000);						
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	88 e6       	ldi	r24, 0x68	; 104
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
				} while (time.GetElapsed(&tShow)<1500);			
				dp.DispSetPoint(3,false);	
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	60 3a       	cpi	r22, 0xA0	; 160
    13c4:	7f 40       	sbci	r23, 0x0F	; 15
    13c6:	81 05       	cpc	r24, r1
    13c8:	91 05       	cpc	r25, r1
    13ca:	58 f2       	brcs	.-106    	; 0x1362 <_ZN16class_Feed_Timer13ProcessInputsEv+0x1c4>
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<4000);						
				//exit if key none
				key=dp.KeyReadFlash();
    13cc:	81 e6       	ldi	r24, 0x61	; 97
    13ce:	93 e0       	ldi	r25, 0x03	; 3
    13d0:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
				if (key==KeyCode::NONE)
    13d4:	89 2b       	or	r24, r25
    13d6:	09 f0       	breq	.+2      	; 0x13da <_ZN16class_Feed_Timer13ProcessInputsEv+0x23c>
    13d8:	26 cf       	rjmp	.-436    	; 0x1226 <_ZN16class_Feed_Timer13ProcessInputsEv+0x88>
    13da:	a2 c3       	rjmp	.+1860   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
		/////////////////////
		// KEY UP? 
		/////////////////////
		case KeyCode::UP:
			//show MENU Item
			dp.Locate(1);
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	81 e6       	ldi	r24, 0x61	; 97
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
			dp.PutSF(this->GetMenuItemStr(menuItem));
    13e6:	64 ef       	ldi	r22, 0xF4	; 244
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	81 e6       	ldi	r24, 0x61	; 97
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
			//wait key release
			dp.KeyWaitRelease();
    13f2:	81 e6       	ldi	r24, 0x61	; 97
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
			time.DelayMsI(KEY_DELAY);
    13fa:	4e e5       	ldi	r20, 0x5E	; 94
    13fc:	51 e0       	ldi	r21, 0x01	; 1
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	88 e6       	ldi	r24, 0x68	; 104
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
void class_Feed_Timer::ProcessInputs()
{	
	//My vars
	KeyCode		key;
	uint8_t		h,m1,m2,s,w;
	menu_Item	menuItem=menu_Item::SET_TIME;
    140a:	01 e0       	ldi	r16, 0x01	; 1
    140c:	10 e0       	ldi	r17, 0x00	; 0
    140e:	58 01       	movw	r10, r16
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	a2 1a       	sub	r10, r18
    1414:	b1 08       	sbc	r11, r1
    1416:	c5 01       	movw	r24, r10
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	ec 5c       	subi	r30, 0xCC	; 204
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	6f 01       	movw	r12, r30
			dp.KeyWaitRelease();
			time.DelayMsI(KEY_DELAY);
			for(;;)
			{
				//show MENU Item
				dp.Locate(1);
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	81 e6       	ldi	r24, 0x61	; 97
    1428:	93 e0       	ldi	r25, 0x03	; 3
    142a:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
    142e:	f5 e0       	ldi	r31, 0x05	; 5
    1430:	af 16       	cp	r10, r31
    1432:	b1 04       	cpc	r11, r1
    1434:	20 f4       	brcc	.+8      	; 0x143e <_ZN16class_Feed_Timer13ProcessInputsEv+0x2a0>
    1436:	f6 01       	movw	r30, r12
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2a4>
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+

const char * class_Feed_Timer::GetMenuItemStr(menu_Item menuItemNumber)
{
	switch (menuItemNumber)
    143e:	6b ed       	ldi	r22, 0xDB	; 219
    1440:	70 e0       	ldi	r23, 0x00	; 0
			time.DelayMsI(KEY_DELAY);
			for(;;)
			{
				//show MENU Item
				dp.Locate(1);
				dp.PutSF(this->GetMenuItemStr(menuItem));
    1442:	81 e6       	ldi	r24, 0x61	; 97
    1444:	93 e0       	ldi	r25, 0x03	; 3
    1446:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
				//read key again
				key=dp.KeyReadFlash();
    144a:	81 e6       	ldi	r24, 0x61	; 97
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    1452:	4c 01       	movw	r8, r24
				//set time to exit if any key pressed
				if (key!=KeyCode::NONE) time.SetElapsed(&tExit);
    1454:	89 2b       	or	r24, r25
    1456:	39 f0       	breq	.+14     	; 0x1466 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2c8>
    1458:	be 01       	movw	r22, r28
    145a:	64 5f       	subi	r22, 0xF4	; 244
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	88 e6       	ldi	r24, 0x68	; 104
    1460:	93 e0       	ldi	r25, 0x03	; 3
    1462:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
				if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
    1466:	be 01       	movw	r22, r28
    1468:	64 5f       	subi	r22, 0xF4	; 244
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	88 e6       	ldi	r24, 0x68	; 104
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
    1474:	61 33       	cpi	r22, 0x31	; 49
    1476:	75 47       	sbci	r23, 0x75	; 117
    1478:	81 05       	cpc	r24, r1
    147a:	91 05       	cpc	r25, r1
    147c:	08 f0       	brcs	.+2      	; 0x1480 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2e2>
    147e:	50 c3       	rjmp	.+1696   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
					//yes, disable timer0 IO clear screen and exit
					ClearAndExit();
					return;
				}
				//process keys
				switch (key)
    1480:	22 e0       	ldi	r18, 0x02	; 2
    1482:	82 16       	cp	r8, r18
    1484:	91 04       	cpc	r9, r1
    1486:	79 f0       	breq	.+30     	; 0x14a6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x308>
    1488:	33 e0       	ldi	r19, 0x03	; 3
    148a:	83 16       	cp	r8, r19
    148c:	91 04       	cpc	r9, r1
    148e:	d9 f0       	breq	.+54     	; 0x14c6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x328>
    1490:	8a 94       	dec	r8
    1492:	89 28       	or	r8, r9
    1494:	39 f6       	brne	.-114    	; 0x1424 <_ZN16class_Feed_Timer13ProcessInputsEv+0x286>
				{
					case KeyCode::DOWN:
						menuItem=static_cast<menu_Item>(static_cast<uint8_t>(menuItem)-1);
    1496:	11 27       	eor	r17, r17
    1498:	01 50       	subi	r16, 0x01	; 1
    149a:	11 09       	sbc	r17, r1
						if (static_cast<uint8_t>(menuItem)<static_cast<uint8_t>(menu_Item::SET_TIME)) menuItem=menu_Item::SET_TIME;
    149c:	01 11       	cpse	r16, r1
    149e:	0a c0       	rjmp	.+20     	; 0x14b4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x316>
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x316>
						time.DelayMsI(KEY_DELAY);
					break;
					case KeyCode::UP:
						menuItem=static_cast<menu_Item>(static_cast<uint8_t>(menuItem)+1);
    14a6:	11 27       	eor	r17, r17
    14a8:	0f 5f       	subi	r16, 0xFF	; 255
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
						if (static_cast<uint8_t>(menuItem)>static_cast<uint8_t>(menu_Item::EXIT)) menuItem=menu_Item::EXIT;
    14ac:	06 30       	cpi	r16, 0x06	; 6
    14ae:	10 f0       	brcs	.+4      	; 0x14b4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x316>
    14b0:	05 e0       	ldi	r16, 0x05	; 5
    14b2:	10 e0       	ldi	r17, 0x00	; 0
						time.DelayMsI(KEY_DELAY);
    14b4:	4e e5       	ldi	r20, 0x5E	; 94
    14b6:	51 e0       	ldi	r21, 0x01	; 1
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	88 e6       	ldi	r24, 0x68	; 104
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
					break;
    14c4:	a4 cf       	rjmp	.-184    	; 0x140e <_ZN16class_Feed_Timer13ProcessInputsEv+0x270>
					case KeyCode::ENTER:
						/////////////////////////////
						//  EXECUTE MENU OPTIONS
						/////////////////////////////
						dp.KeyWaitRelease();
    14c6:	81 e6       	ldi	r24, 0x61	; 97
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
						switch (menuItem)
    14ce:	03 30       	cpi	r16, 0x03	; 3
    14d0:	11 05       	cpc	r17, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x338>
    14d4:	b9 c1       	rjmp	.+882    	; 0x1848 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6aa>
    14d6:	b4 f4       	brge	.+44     	; 0x1504 <_ZN16class_Feed_Timer13ProcessInputsEv+0x366>
    14d8:	01 30       	cpi	r16, 0x01	; 1
    14da:	11 05       	cpc	r17, r1
    14dc:	e1 f0       	breq	.+56     	; 0x1516 <_ZN16class_Feed_Timer13ProcessInputsEv+0x378>
    14de:	02 30       	cpi	r16, 0x02	; 2
    14e0:	11 05       	cpc	r17, r1
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x348>
    14e4:	94 cf       	rjmp	.-216    	; 0x140e <_ZN16class_Feed_Timer13ProcessInputsEv+0x270>
							////////////////////////
							//  INCLUDE EVENT
							////////////////////////
							case menu_Item::INCLUDE:
								//wait key release
								dp.KeyWaitRelease();
    14e6:	81 e6       	ldi	r24, 0x61	; 97
    14e8:	93 e0       	ldi	r25, 0x03	; 3
    14ea:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
								time.DelayMsI(KEY_DELAY);
    14ee:	4e e5       	ldi	r20, 0x5E	; 94
    14f0:	51 e0       	ldi	r21, 0x01	; 1
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	88 e6       	ldi	r24, 0x68	; 104
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
{	
	//My vars
	KeyCode		key;
	uint8_t		h,m1,m2,s,w;
	menu_Item	menuItem=menu_Item::SET_TIME;
	inc_Option	incOption=inc_Option::REPEAT;
    14fe:	01 e0       	ldi	r16, 0x01	; 1
    1500:	10 e0       	ldi	r17, 0x00	; 0
    1502:	70 c0       	rjmp	.+224    	; 0x15e4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x446>
					case KeyCode::ENTER:
						/////////////////////////////
						//  EXECUTE MENU OPTIONS
						/////////////////////////////
						dp.KeyWaitRelease();
						switch (menuItem)
    1504:	04 30       	cpi	r16, 0x04	; 4
    1506:	11 05       	cpc	r17, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <_ZN16class_Feed_Timer13ProcessInputsEv+0x36e>
    150a:	06 c3       	rjmp	.+1548   	; 0x1b18 <_ZN16class_Feed_Timer13ProcessInputsEv+0x97a>
    150c:	05 30       	cpi	r16, 0x05	; 5
    150e:	11 05       	cpc	r17, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <_ZN16class_Feed_Timer13ProcessInputsEv+0x376>
    1512:	06 c3       	rjmp	.+1548   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
    1514:	7c cf       	rjmp	.-264    	; 0x140e <_ZN16class_Feed_Timer13ProcessInputsEv+0x270>
							////////////////////////
							//  SET TIME
							////////////////////////
							case menu_Item::SET_TIME:
								//Get Time
								this->GetTime(h,m1,s,w);
    1516:	8e 01       	movw	r16, r28
    1518:	00 5f       	subi	r16, 0xF0	; 240
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	9e 01       	movw	r18, r28
    151e:	2f 5e       	subi	r18, 0xEF	; 239
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	ae 01       	movw	r20, r28
    1524:	4d 5e       	subi	r20, 0xED	; 237
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	be 01       	movw	r22, r28
    152a:	6c 5e       	subi	r22, 0xEC	; 236
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	c7 01       	movw	r24, r14
    1530:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
								//set time
								if (this->InputHourMinOrMinSec(h,m1,s,false)==false)
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	89 89       	ldd	r24, Y+17	; 0x11
    1538:	81 11       	cpse	r24, r1
    153a:	01 c0       	rjmp	.+2      	; 0x153e <_ZN16class_Feed_Timer13ProcessInputsEv+0x3a0>
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	ae 01       	movw	r20, r28
    1542:	4d 5e       	subi	r20, 0xED	; 237
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	be 01       	movw	r22, r28
    1548:	6c 5e       	subi	r22, 0xEC	; 236
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	c7 01       	movw	r24, r14
    154e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <_ZN16class_Feed_Timer13ProcessInputsEv+0x3ba>
    1556:	e4 c2       	rjmp	.+1480   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
									//return
									ClearAndExit();
									return;
								}
								//set week day
								if (this->InputWeekDay(w,false)==false)
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	be 01       	movw	r22, r28
    155c:	60 5f       	subi	r22, 0xF0	; 240
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	c7 01       	movw	r24, r14
    1562:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN16class_Feed_Timer12InputWeekDayERhb>
    1566:	88 23       	and	r24, r24
    1568:	09 f4       	brne	.+2      	; 0x156c <_ZN16class_Feed_Timer13ProcessInputsEv+0x3ce>
    156a:	da c2       	rjmp	.+1460   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
									//return if no parms entered
									ClearAndExit();
									return;
								}
								//set time and week day
								this->SetTime(h,m1,s,w);
    156c:	8e 01       	movw	r16, r28
    156e:	00 5f       	subi	r16, 0xF0	; 240
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	9e 01       	movw	r18, r28
    1574:	2f 5e       	subi	r18, 0xEF	; 239
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	ae 01       	movw	r20, r28
    157a:	4d 5e       	subi	r20, 0xED	; 237
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	be 01       	movw	r22, r28
    1580:	6c 5e       	subi	r22, 0xEC	; 236
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 89 02 	call	0x512	; 0x512 <_ZN16class_Feed_Timer7SetTimeERhS0_S0_S0_>
    158a:	ca c2       	rjmp	.+1428   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+

const char * class_Feed_Timer::GetIncOptionStr(inc_Option incOptionNumber)
{
	switch (incOptionNumber)
    158c:	62 ec       	ldi	r22, 0xC2	; 194
    158e:	70 e0       	ldi	r23, 0x00	; 0
								time.DelayMsI(KEY_DELAY);
								for(;;)
								{
									//show option message
									dp.Locate(1);
									dp.PutSF(GetIncOptionStr(incOption));									
    1590:	81 e6       	ldi	r24, 0x61	; 97
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
									//read key
									key=dp.KeyReadFlash();
    1598:	81 e6       	ldi	r24, 0x61	; 97
    159a:	93 e0       	ldi	r25, 0x03	; 3
    159c:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    15a0:	6c 01       	movw	r12, r24
									//clear time to exit if key pressed
									if (key!=KeyCode::NONE)
    15a2:	89 2b       	or	r24, r25
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x416>
									{
										time.SetElapsed(&tExit);
    15a6:	be 01       	movw	r22, r28
    15a8:	64 5f       	subi	r22, 0xF4	; 244
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	88 e6       	ldi	r24, 0x68	; 104
    15ae:	93 e0       	ldi	r25, 0x03	; 3
    15b0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
									}
									//exit from here if time to exit overflow
									if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
    15b4:	be 01       	movw	r22, r28
    15b6:	64 5f       	subi	r22, 0xF4	; 244
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	88 e6       	ldi	r24, 0x68	; 104
    15bc:	93 e0       	ldi	r25, 0x03	; 3
    15be:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
    15c2:	61 33       	cpi	r22, 0x31	; 49
    15c4:	75 47       	sbci	r23, 0x75	; 117
    15c6:	81 05       	cpc	r24, r1
    15c8:	91 05       	cpc	r25, r1
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <_ZN16class_Feed_Timer13ProcessInputsEv+0x430>
    15cc:	a9 c2       	rjmp	.+1362   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
									{
										ClearAndExit();
										return;
									}
									//process keys according
									switch (key)
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	cf 16       	cp	r12, r31
    15d2:	d1 04       	cpc	r13, r1
    15d4:	09 f1       	breq	.+66     	; 0x1618 <_ZN16class_Feed_Timer13ProcessInputsEv+0x47a>
    15d6:	23 e0       	ldi	r18, 0x03	; 3
    15d8:	c2 16       	cp	r12, r18
    15da:	d1 04       	cpc	r13, r1
    15dc:	69 f1       	breq	.+90     	; 0x1638 <_ZN16class_Feed_Timer13ProcessInputsEv+0x49a>
    15de:	ca 94       	dec	r12
    15e0:	cd 28       	or	r12, r13
    15e2:	91 f0       	breq	.+36     	; 0x1608 <_ZN16class_Feed_Timer13ProcessInputsEv+0x46a>
								dp.KeyWaitRelease();
								time.DelayMsI(KEY_DELAY);
								for(;;)
								{
									//show option message
									dp.Locate(1);
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	81 e6       	ldi	r24, 0x61	; 97
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
    15ee:	c8 01       	movw	r24, r16
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	84 30       	cpi	r24, 0x04	; 4
    15f4:	91 05       	cpc	r25, r1
    15f6:	50 f6       	brcc	.-108    	; 0x158c <_ZN16class_Feed_Timer13ProcessInputsEv+0x3ee>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	fc 01       	movw	r30, r24
    15fe:	e4 5d       	subi	r30, 0xD4	; 212
    1600:	fe 4f       	sbci	r31, 0xFE	; 254
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	c4 cf       	rjmp	.-120    	; 0x1590 <_ZN16class_Feed_Timer13ProcessInputsEv+0x3f2>
									//process keys according
									switch (key)
									{
										//Previous item
										case KeyCode::DOWN:
											incOption=static_cast<inc_Option>(static_cast<uint8_t>(incOption)-1);
    1608:	11 27       	eor	r17, r17
    160a:	01 50       	subi	r16, 0x01	; 1
    160c:	11 09       	sbc	r17, r1
											if (static_cast<uint8_t>(incOption)<static_cast<uint8_t>(inc_Option::REPEAT)) incOption=inc_Option::REPEAT;
    160e:	01 11       	cpse	r16, r1
    1610:	0a c0       	rjmp	.+20     	; 0x1626 <_ZN16class_Feed_Timer13ProcessInputsEv+0x488>
    1612:	01 e0       	ldi	r16, 0x01	; 1
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <_ZN16class_Feed_Timer13ProcessInputsEv+0x488>
											time.DelayMsI(KEY_DELAY);										
										break;
										//Next item		
										case KeyCode::UP:
											incOption=static_cast<inc_Option>(static_cast<uint8_t>(incOption)+1);
    1618:	11 27       	eor	r17, r17
    161a:	0f 5f       	subi	r16, 0xFF	; 255
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
											if (static_cast<uint8_t>(incOption)>static_cast<uint8_t>(inc_Option::EXIT)) incOption=inc_Option::EXIT;
    161e:	05 30       	cpi	r16, 0x05	; 5
    1620:	10 f0       	brcs	.+4      	; 0x1626 <_ZN16class_Feed_Timer13ProcessInputsEv+0x488>
    1622:	04 e0       	ldi	r16, 0x04	; 4
    1624:	10 e0       	ldi	r17, 0x00	; 0
											time.DelayMsI(KEY_DELAY);
    1626:	4e e5       	ldi	r20, 0x5E	; 94
    1628:	51 e0       	ldi	r21, 0x01	; 1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	88 e6       	ldi	r24, 0x68	; 104
    1630:	93 e0       	ldi	r25, 0x03	; 3
    1632:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
										break;
    1636:	d6 cf       	rjmp	.-84     	; 0x15e4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x446>
										//Execute Item
										case KeyCode::ENTER:
											switch (incOption)
    1638:	02 30       	cpi	r16, 0x02	; 2
    163a:	11 05       	cpc	r17, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <_ZN16class_Feed_Timer13ProcessInputsEv+0x4a2>
    163e:	7b c0       	rjmp	.+246    	; 0x1736 <_ZN16class_Feed_Timer13ProcessInputsEv+0x598>
    1640:	24 f4       	brge	.+8      	; 0x164a <_ZN16class_Feed_Timer13ProcessInputsEv+0x4ac>
    1642:	01 30       	cpi	r16, 0x01	; 1
    1644:	11 05       	cpc	r17, r1
    1646:	69 f1       	breq	.+90     	; 0x16a2 <_ZN16class_Feed_Timer13ProcessInputsEv+0x504>
    1648:	cd cf       	rjmp	.-102    	; 0x15e4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x446>
    164a:	03 30       	cpi	r16, 0x03	; 3
    164c:	11 05       	cpc	r17, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <_ZN16class_Feed_Timer13ProcessInputsEv+0x4b4>
    1650:	ca c0       	rjmp	.+404    	; 0x17e6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x648>
    1652:	04 30       	cpi	r16, 0x04	; 4
    1654:	11 05       	cpc	r17, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <_ZN16class_Feed_Timer13ProcessInputsEv+0x4bc>
    1658:	63 c2       	rjmp	.+1222   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
    165a:	c4 cf       	rjmp	.-120    	; 0x15e4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x446>
														{
															//exit if no input
															ClearAndExit();
															return;
														}
														if (this->InputHourMinOrMinSec(m2,s,false)==false)
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	ae 01       	movw	r20, r28
    1660:	4f 5e       	subi	r20, 0xEF	; 239
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
    1664:	be 01       	movw	r22, r28
    1666:	6e 5e       	subi	r22, 0xEE	; 238
    1668:	7f 4f       	sbci	r23, 0xFF	; 255
    166a:	c7 01       	movw	r24, r14
    166c:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <_ZN16class_Feed_Timer13ProcessInputsEv+0x4d8>
    1674:	55 c2       	rjmp	.+1194   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
															//exit if no input
															ClearAndExit();
															return;
														}
														//Confirm Yes(KEY_DOWN) or No(KEY_UP)
														this->SetTimer0_ON();
    1676:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
														dp.Home();
    167a:	81 e6       	ldi	r24, 0x61	; 97
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("S N "));
    1682:	64 ea       	ldi	r22, 0xA4	; 164
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	81 e6       	ldi	r24, 0x61	; 97
    1688:	93 e0       	ldi	r25, 0x03	; 3
    168a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
														key=dp.KeyRead();
    168e:	81 e6       	ldi	r24, 0x61	; 97
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN19class_Display_7_Seg7KeyReadEv>
														if (key==KeyCode::DOWN) break;
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	89 f0       	breq	.+34     	; 0x16be <_ZN16class_Feed_Timer13ProcessInputsEv+0x520>
														if (key==KeyCode::UP)
    169c:	02 97       	sbiw	r24, 0x02	; 2
    169e:	09 f4       	brne	.+2      	; 0x16a2 <_ZN16class_Feed_Timer13ProcessInputsEv+0x504>
    16a0:	3f c2       	rjmp	.+1150   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
												// INCLUSION REPEAT
												///////////////////////
												case inc_Option::REPEAT:
													for(;;)
													{
														if (this->InputHourMinOrMinSec(h,m1)==false)
    16a2:	01 e0       	ldi	r16, 0x01	; 1
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	ae 01       	movw	r20, r28
    16a8:	4d 5e       	subi	r20, 0xED	; 237
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	be 01       	movw	r22, r28
    16ae:	6c 5e       	subi	r22, 0xEC	; 236
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	c7 01       	movw	r24, r14
    16b4:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    16b8:	81 11       	cpse	r24, r1
    16ba:	d0 cf       	rjmp	.-96     	; 0x165c <_ZN16class_Feed_Timer13ProcessInputsEv+0x4be>
    16bc:	31 c2       	rjmp	.+1122   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
														}
													}
													///////////////////////////
													//  Add new Repeat Event
													///////////////////////////
													Event.Event=static_cast<uint8_t>(enum_EVENT_TYPE::REPEAT);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
													Event.Hour=h;
    16c2:	8c 89       	ldd	r24, Y+20	; 0x14
    16c4:	8a 83       	std	Y+2, r24	; 0x02
													Event.Minute=m1;
    16c6:	8b 89       	ldd	r24, Y+19	; 0x13
    16c8:	8b 83       	std	Y+3, r24	; 0x03
													Event.MinuteMotorON=m2;
    16ca:	8a 89       	ldd	r24, Y+18	; 0x12
    16cc:	8d 83       	std	Y+5, r24	; 0x05
													Event.SecondMotorON=s;
    16ce:	89 89       	ldd	r24, Y+17	; 0x11
    16d0:	8e 83       	std	Y+6, r24	; 0x06
													if (this->EventAdd(Event)==false)
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	c7 01       	movw	r24, r14
    16da:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN16class_Feed_Timer8EventAddER11EventStruct>
    16de:	81 11       	cpse	r24, r1
    16e0:	0a c2       	rjmp	.+1044   	; 0x1af6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x958>
													{
														//show Error and exit
														dp.Home();
    16e2:	81 e6       	ldi	r24, 0x61	; 97
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("ERRO"));
    16ea:	6f e9       	ldi	r22, 0x9F	; 159
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	9f c0       	rjmp	.+318    	; 0x182e <_ZN16class_Feed_Timer13ProcessInputsEv+0x690>
														{
															//exit if no input
															ClearAndExit();
															return;
														}
														if (this->InputHourMinOrMinSec(m2,s,false)==false)
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	ae 01       	movw	r20, r28
    16f4:	4f 5e       	subi	r20, 0xEF	; 239
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255
    16f8:	be 01       	movw	r22, r28
    16fa:	6e 5e       	subi	r22, 0xEE	; 238
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	c7 01       	movw	r24, r14
    1700:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    1704:	88 23       	and	r24, r24
    1706:	09 f4       	brne	.+2      	; 0x170a <_ZN16class_Feed_Timer13ProcessInputsEv+0x56c>
    1708:	0b c2       	rjmp	.+1046   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
															//exit if no input
															ClearAndExit();
															return;
														}
														//Confirm Yes(KEY_DOWN) or No(KEY_UP)
														this->SetTimer0_ON();
    170a:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
														dp.Home();
    170e:	81 e6       	ldi	r24, 0x61	; 97
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("S N "));
    1716:	6a e9       	ldi	r22, 0x9A	; 154
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	81 e6       	ldi	r24, 0x61	; 97
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
														key=dp.KeyRead();
    1722:	81 e6       	ldi	r24, 0x61	; 97
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN19class_Display_7_Seg7KeyReadEv>
														if (key==KeyCode::DOWN) break;
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	89 f0       	breq	.+34     	; 0x1752 <_ZN16class_Feed_Timer13ProcessInputsEv+0x5b4>
														if (key==KeyCode::UP)
    1730:	02 97       	sbiw	r24, 0x02	; 2
    1732:	09 f4       	brne	.+2      	; 0x1736 <_ZN16class_Feed_Timer13ProcessInputsEv+0x598>
    1734:	f5 c1       	rjmp	.+1002   	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
												// INCLUSION DIARY
												///////////////////////
												case inc_Option::DIARY:
													for(;;)
													{
														if (this->InputHourMinOrMinSec(h,m1)==false)
    1736:	01 e0       	ldi	r16, 0x01	; 1
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	ae 01       	movw	r20, r28
    173c:	4d 5e       	subi	r20, 0xED	; 237
    173e:	5f 4f       	sbci	r21, 0xFF	; 255
    1740:	be 01       	movw	r22, r28
    1742:	6c 5e       	subi	r22, 0xEC	; 236
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	c7 01       	movw	r24, r14
    1748:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    174c:	81 11       	cpse	r24, r1
    174e:	d0 cf       	rjmp	.-96     	; 0x16f0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x552>
    1750:	e7 c1       	rjmp	.+974    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
														}														
													}
													///////////////////////////
													//  Add new Diary Event
													///////////////////////////
													Event.Event=static_cast<uint8_t>(enum_EVENT_TYPE::DIARY);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	89 83       	std	Y+1, r24	; 0x01
													Event.Hour=h;
    1756:	8c 89       	ldd	r24, Y+20	; 0x14
    1758:	8a 83       	std	Y+2, r24	; 0x02
													Event.Minute=m1;
    175a:	8b 89       	ldd	r24, Y+19	; 0x13
    175c:	8b 83       	std	Y+3, r24	; 0x03
													Event.MinuteMotorON=m2;
    175e:	8a 89       	ldd	r24, Y+18	; 0x12
    1760:	8d 83       	std	Y+5, r24	; 0x05
													Event.SecondMotorON=s;
    1762:	89 89       	ldd	r24, Y+17	; 0x11
    1764:	8e 83       	std	Y+6, r24	; 0x06
													if (this->EventAdd(Event)==false)
    1766:	be 01       	movw	r22, r28
    1768:	6f 5f       	subi	r22, 0xFF	; 255
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	c7 01       	movw	r24, r14
    176e:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN16class_Feed_Timer8EventAddER11EventStruct>
    1772:	81 11       	cpse	r24, r1
    1774:	c0 c1       	rjmp	.+896    	; 0x1af6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x958>
													{
														//show Error and exit
														dp.Home();
    1776:	81 e6       	ldi	r24, 0x61	; 97
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("ERRO"));
    177e:	65 e9       	ldi	r22, 0x95	; 149
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	55 c0       	rjmp	.+170    	; 0x182e <_ZN16class_Feed_Timer13ProcessInputsEv+0x690>
														{
															//exit if no input
															ClearAndExit();
															return;
														}
														if (this->InputHourMinOrMinSec(h,m1)==false)
    1784:	01 e0       	ldi	r16, 0x01	; 1
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	ae 01       	movw	r20, r28
    178a:	4d 5e       	subi	r20, 0xED	; 237
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	be 01       	movw	r22, r28
    1790:	6c 5e       	subi	r22, 0xEC	; 236
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	c7 01       	movw	r24, r14
    1796:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x602>
    179e:	c0 c1       	rjmp	.+896    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
														{
															//exit if no input
															ClearAndExit();
															return;
														}
														if (this->InputHourMinOrMinSec(m2,s,false)==false)
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	ae 01       	movw	r20, r28
    17a4:	4f 5e       	subi	r20, 0xEF	; 239
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	be 01       	movw	r22, r28
    17aa:	6e 5e       	subi	r22, 0xEE	; 238
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c7 01       	movw	r24, r14
    17b0:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN16class_Feed_Timer20InputHourMinOrMinSecERhS0_bb>
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <_ZN16class_Feed_Timer13ProcessInputsEv+0x61c>
    17b8:	b3 c1       	rjmp	.+870    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
															//exit if no input
															ClearAndExit();
															return;
														}
														//Confirm Yes(KEY_DOWN) or No(KEY_UP)
														this->SetTimer0_ON();
    17ba:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
														dp.Home();
    17be:	81 e6       	ldi	r24, 0x61	; 97
    17c0:	93 e0       	ldi	r25, 0x03	; 3
    17c2:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("S N "));
    17c6:	60 e9       	ldi	r22, 0x90	; 144
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	81 e6       	ldi	r24, 0x61	; 97
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
														key=dp.KeyRead();
    17d2:	81 e6       	ldi	r24, 0x61	; 97
    17d4:	93 e0       	ldi	r25, 0x03	; 3
    17d6:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN19class_Display_7_Seg7KeyReadEv>
														if (key==KeyCode::DOWN) break;
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	69 f0       	breq	.+26     	; 0x17fa <_ZN16class_Feed_Timer13ProcessInputsEv+0x65c>
														if (key==KeyCode::UP)
    17e0:	02 97       	sbiw	r24, 0x02	; 2
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x648>
    17e4:	9d c1       	rjmp	.+826    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
												// INCLUSION WEEKLY
												///////////////////////
												case inc_Option::WEEKLY:
													for(;;)
													{
														if (this->InputWeekDays(w)==false)
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	be 01       	movw	r22, r28
    17ea:	60 5f       	subi	r22, 0xF0	; 240
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	c7 01       	movw	r24, r14
    17f0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN16class_Feed_Timer13InputWeekDaysERhb>
    17f4:	81 11       	cpse	r24, r1
    17f6:	c6 cf       	rjmp	.-116    	; 0x1784 <_ZN16class_Feed_Timer13ProcessInputsEv+0x5e6>
    17f8:	93 c1       	rjmp	.+806    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
														}
													}
													///////////////////////////
													//  Add new Weekly Event
													///////////////////////////
													Event.Event=static_cast<uint8_t>(enum_EVENT_TYPE::WEEKLY);
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	89 83       	std	Y+1, r24	; 0x01
													Event.Hour=h;
    17fe:	8c 89       	ldd	r24, Y+20	; 0x14
    1800:	8a 83       	std	Y+2, r24	; 0x02
													Event.Minute=m1;
    1802:	8b 89       	ldd	r24, Y+19	; 0x13
    1804:	8b 83       	std	Y+3, r24	; 0x03
													Event.MinuteMotorON=m2;
    1806:	8a 89       	ldd	r24, Y+18	; 0x12
    1808:	8d 83       	std	Y+5, r24	; 0x05
													Event.SecondMotorON=s;
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	8e 83       	std	Y+6, r24	; 0x06
													Event.WeekDays=w;
    180e:	88 89       	ldd	r24, Y+16	; 0x10
    1810:	8c 83       	std	Y+4, r24	; 0x04
													if (this->EventAdd(Event)==false)
    1812:	be 01       	movw	r22, r28
    1814:	6f 5f       	subi	r22, 0xFF	; 255
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	c7 01       	movw	r24, r14
    181a:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN16class_Feed_Timer8EventAddER11EventStruct>
    181e:	81 11       	cpse	r24, r1
    1820:	6a c1       	rjmp	.+724    	; 0x1af6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x958>
													{
														//show Error and exit
														dp.Home();
    1822:	81 e6       	ldi	r24, 0x61	; 97
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
														dp.PutSF(PSTR("ERRO"));
    182a:	6b e8       	ldi	r22, 0x8B	; 139
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	81 e6       	ldi	r24, 0x61	; 97
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
														time.DelayMsI(TIME_TO_SHOW_ERROR);
    1836:	40 ed       	ldi	r20, 0xD0	; 208
    1838:	57 e0       	ldi	r21, 0x07	; 7
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	88 e6       	ldi	r24, 0x68	; 104
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
    1846:	57 c1       	rjmp	.+686    	; 0x1af6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x958>
							//  DELETE EVENT
							////////////////////////
							case menu_Item::DELETE:
							{
								//get Size
								int8_t  EvSize=static_cast<int8_t>(eeprom_read_byte(&EE_EventsSize));
    1848:	8c eb       	ldi	r24, 0xBC	; 188
    184a:	92 e0       	ldi	r25, 0x02	; 2
    184c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
    1850:	48 2e       	mov	r4, r24
								int8_t  EvCount=0,ShowType=0;
								struct EventStruct *EvP=&EE_Events[0],EvTmp;
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	c3 2e       	mov	r12, r19
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	d3 2e       	mov	r13, r19
							////////////////////////
							case menu_Item::DELETE:
							{
								//get Size
								int8_t  EvSize=static_cast<int8_t>(eeprom_read_byte(&EE_EventsSize));
								int8_t  EvCount=0,ShowType=0;
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	00 e0       	ldi	r16, 0x00	; 0
	menu_Item	menuItem=menu_Item::SET_TIME;
	inc_Option	incOption=inc_Option::REPEAT;
	uint32_t	tExit;
	uint32_t	tShow;
	uint32_t	tRep;
	bool		bRep=false;
    185e:	51 2c       	mov	r5, r1
											case 1:
												dp.DispSetPoint(1,false);
												dp.DispSetPoint(2,true);
												dp.DispSetPoint(3,false);		
												dp.DispSetPoint(4,false);									
												sprintf(bf,"%02d%02d",EvTmp.Hour,EvTmp.Minute);
    1860:	4a e0       	ldi	r20, 0x0A	; 10
    1862:	a4 2e       	mov	r10, r20
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	b4 2e       	mov	r11, r20
    1868:	53 e6       	ldi	r21, 0x63	; 99
    186a:	85 2e       	mov	r8, r21
    186c:	51 e0       	ldi	r21, 0x01	; 1
    186e:	95 2e       	mov	r9, r21
								struct EventStruct *EvP=&EE_Events[0],EvTmp;
								//main delete loop
								for(;;)
								{
									//read event
									eeprom_read_block(&EvTmp,&EvP->Event,sizeof(EvTmp));
    1870:	47 e0       	ldi	r20, 0x07	; 7
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	b6 01       	movw	r22, r12
    1876:	ce 01       	movw	r24, r28
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <eeprom_read_block>
									//show events if size>0
									if (EvSize>0)
    187e:	14 14       	cp	r1, r4
    1880:	0c f0       	brlt	.+2      	; 0x1884 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6e6>
    1882:	a3 c0       	rjmp	.+326    	; 0x19ca <_ZN16class_Feed_Timer13ProcessInputsEv+0x82c>
									{
										//show event according ShowType
										switch (ShowType)
    1884:	11 30       	cpi	r17, 0x01	; 1
    1886:	09 f4       	brne	.+2      	; 0x188a <_ZN16class_Feed_Timer13ProcessInputsEv+0x6ec>
    1888:	4f c0       	rjmp	.+158    	; 0x1928 <_ZN16class_Feed_Timer13ProcessInputsEv+0x78a>
    188a:	1c f4       	brge	.+6      	; 0x1892 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6f4>
    188c:	11 23       	and	r17, r17
    188e:	21 f1       	breq	.+72     	; 0x18d8 <_ZN16class_Feed_Timer13ProcessInputsEv+0x73a>
    1890:	a7 c0       	rjmp	.+334    	; 0x19e0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x842>
    1892:	12 30       	cpi	r17, 0x02	; 2
    1894:	09 f4       	brne	.+2      	; 0x1898 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6fa>
    1896:	65 c0       	rjmp	.+202    	; 0x1962 <_ZN16class_Feed_Timer13ProcessInputsEv+0x7c4>
    1898:	13 30       	cpi	r17, 0x03	; 3
    189a:	09 f0       	breq	.+2      	; 0x189e <_ZN16class_Feed_Timer13ProcessInputsEv+0x700>
    189c:	a1 c0       	rjmp	.+322    	; 0x19e0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x842>
												sprintf(bf,"%02d%02d",EvTmp.MinuteMotorON,EvTmp.SecondMotorON);
												dp.Home();
												dp.PutS(bf);
											break;
											case 3:
												dp.DispSetPoint(1,false);
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	81 e6       	ldi	r24, 0x61	; 97
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(2,false);
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	81 e6       	ldi	r24, 0x61	; 97
    18b0:	93 e0       	ldi	r25, 0x03	; 3
    18b2:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(3,false);
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	63 e0       	ldi	r22, 0x03	; 3
    18ba:	81 e6       	ldi	r24, 0x61	; 97
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(4,false);
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	64 e0       	ldi	r22, 0x04	; 4
    18c6:	81 e6       	ldi	r24, 0x61	; 97
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												this->ShowWeekDays(EvTmp.WeekDays);
    18ce:	6c 81       	ldd	r22, Y+4	; 0x04
    18d0:	c7 01       	movw	r24, r14
    18d2:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN16class_Feed_Timer12ShowWeekDaysEh>
											break;									
    18d6:	84 c0       	rjmp	.+264    	; 0x19e0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x842>
									{
										//show event according ShowType
										switch (ShowType)
										{
											case 0:
												dp.DispSetPoint(2,false);
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	62 e0       	ldi	r22, 0x02	; 2
    18dc:	81 e6       	ldi	r24, 0x61	; 97
    18de:	93 e0       	ldi	r25, 0x03	; 3
    18e0:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(4,false);
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	64 e0       	ldi	r22, 0x04	; 4
    18e8:	81 e6       	ldi	r24, 0x61	; 97
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												this->ShowEventNumber(EvCount+1);
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	60 0f       	add	r22, r16
    18f4:	c7 01       	movw	r24, r14
    18f6:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN16class_Feed_Timer15ShowEventNumberEh>
												dp.Locate(4);
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	81 e6       	ldi	r24, 0x61	; 97
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
												dp.PutSF(this->GetEventTypeStr(EvTmp.Event));
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	e4 30       	cpi	r30, 0x04	; 4
    1908:	40 f4       	brcc	.+16     	; 0x191a <_ZN16class_Feed_Timer13ProcessInputsEv+0x77c>
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ec 5d       	subi	r30, 0xDC	; 220
    1912:	fe 4f       	sbci	r31, 0xFE	; 254
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	02 c0       	rjmp	.+4      	; 0x191e <_ZN16class_Feed_Timer13ProcessInputsEv+0x780>
    191a:	69 ea       	ldi	r22, 0xA9	; 169
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	81 e6       	ldi	r24, 0x61	; 97
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
											break;
    1926:	5c c0       	rjmp	.+184    	; 0x19e0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x842>
											case 1:
												dp.DispSetPoint(1,false);
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	81 e6       	ldi	r24, 0x61	; 97
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(2,true);
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	81 e6       	ldi	r24, 0x61	; 97
    193a:	93 e0       	ldi	r25, 0x03	; 3
    193c:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(3,false);		
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	81 e6       	ldi	r24, 0x61	; 97
    1946:	93 e0       	ldi	r25, 0x03	; 3
    1948:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(4,false);									
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	64 e0       	ldi	r22, 0x04	; 4
    1950:	81 e6       	ldi	r24, 0x61	; 97
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												sprintf(bf,"%02d%02d",EvTmp.Hour,EvTmp.Minute);
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	1f 92       	push	r1
    195c:	8f 93       	push	r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	1c c0       	rjmp	.+56     	; 0x199a <_ZN16class_Feed_Timer13ProcessInputsEv+0x7fc>
												dp.Home();
												dp.PutS(bf);
											break;
											case 2:
												dp.DispSetPoint(1,false);
    1962:	40 e0       	ldi	r20, 0x00	; 0
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	81 e6       	ldi	r24, 0x61	; 97
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(2,true);
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	81 e6       	ldi	r24, 0x61	; 97
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(3,false);
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	63 e0       	ldi	r22, 0x03	; 3
    197e:	81 e6       	ldi	r24, 0x61	; 97
    1980:	93 e0       	ldi	r25, 0x03	; 3
    1982:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												dp.DispSetPoint(4,true);
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	81 e6       	ldi	r24, 0x61	; 97
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
												sprintf(bf,"%02d%02d",EvTmp.MinuteMotorON,EvTmp.SecondMotorON);
    1992:	8e 81       	ldd	r24, Y+6	; 0x06
    1994:	1f 92       	push	r1
    1996:	8f 93       	push	r24
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	1f 92       	push	r1
    199c:	8f 93       	push	r24
    199e:	bf 92       	push	r11
    19a0:	af 92       	push	r10
    19a2:	9f 92       	push	r9
    19a4:	8f 92       	push	r8
    19a6:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
												dp.Home();
    19aa:	81 e6       	ldi	r24, 0x61	; 97
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
												dp.PutS(bf);
    19b2:	63 e6       	ldi	r22, 0x63	; 99
    19b4:	71 e0       	ldi	r23, 0x01	; 1
    19b6:	81 e6       	ldi	r24, 0x61	; 97
    19b8:	93 e0       	ldi	r25, 0x03	; 3
    19ba:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
											break;
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	0b c0       	rjmp	.+22     	; 0x19e0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x842>
											break;									
										}
									}
									else
									{
										dp.Home();
    19ca:	81 e6       	ldi	r24, 0x61	; 97
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
										dp.PutSF(PSTR("E=0 "));
    19d2:	66 e8       	ldi	r22, 0x86	; 134
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	81 e6       	ldi	r24, 0x61	; 97
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
    19de:	93 c0       	rjmp	.+294    	; 0x1b06 <_ZN16class_Feed_Timer13ProcessInputsEv+0x968>
										time.DelayMsI(TIME_TO_SHOW_ERROR);
										ClearAndExit();
										return;
									}
									//read keyboard
									key=dp.KeyReadFlash();
    19e0:	81 e6       	ldi	r24, 0x61	; 97
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    19e8:	3c 01       	movw	r6, r24
									//clear time to exit if key pressed
									if (key!=KeyCode::NONE)
									{
										time.SetElapsed(&tExit);
    19ea:	be 01       	movw	r22, r28
										return;
									}
									//read keyboard
									key=dp.KeyReadFlash();
									//clear time to exit if key pressed
									if (key!=KeyCode::NONE)
    19ec:	89 2b       	or	r24, r25
    19ee:	a9 f0       	breq	.+42     	; 0x1a1a <_ZN16class_Feed_Timer13ProcessInputsEv+0x87c>
									{
										time.SetElapsed(&tExit);
    19f0:	64 5f       	subi	r22, 0xF4	; 244
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	88 e6       	ldi	r24, 0x68	; 104
    19f6:	93 e0       	ldi	r25, 0x03	; 3
    19f8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
										if (time.GetElapsed(&tRep)>TIME_TO_RAPID)
    19fc:	be 01       	movw	r22, r28
    19fe:	68 5f       	subi	r22, 0xF8	; 248
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	88 e6       	ldi	r24, 0x68	; 104
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
    1a0a:	61 3d       	cpi	r22, 0xD1	; 209
    1a0c:	77 40       	sbci	r23, 0x07	; 7
    1a0e:	81 05       	cpc	r24, r1
    1a10:	91 05       	cpc	r25, r1
    1a12:	50 f0       	brcs	.+20     	; 0x1a28 <_ZN16class_Feed_Timer13ProcessInputsEv+0x88a>
										{
											bRep=true;
    1a14:	55 24       	eor	r5, r5
    1a16:	53 94       	inc	r5
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <_ZN16class_Feed_Timer13ProcessInputsEv+0x88a>
										}
									}
									else
									{
										bRep=false;
										time.SetElapsed(&tRep);
    1a1a:	68 5f       	subi	r22, 0xF8	; 248
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	88 e6       	ldi	r24, 0x68	; 104
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
											bRep=true;
										}
									}
									else
									{
										bRep=false;
    1a26:	51 2c       	mov	r5, r1
										time.SetElapsed(&tRep);
									}
									//exit from here if time to exit overflow
									if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
    1a28:	be 01       	movw	r22, r28
    1a2a:	64 5f       	subi	r22, 0xF4	; 244
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	88 e6       	ldi	r24, 0x68	; 104
    1a30:	93 e0       	ldi	r25, 0x03	; 3
    1a32:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
    1a36:	61 33       	cpi	r22, 0x31	; 49
    1a38:	75 47       	sbci	r23, 0x75	; 117
    1a3a:	81 05       	cpc	r24, r1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <_ZN16class_Feed_Timer13ProcessInputsEv+0x8a4>
    1a40:	6f c0       	rjmp	.+222    	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
									{
										ClearAndExit();
										return;
									}
									//process according key
									switch (key)
    1a42:	32 e0       	ldi	r19, 0x02	; 2
    1a44:	63 16       	cp	r6, r19
    1a46:	71 04       	cpc	r7, r1
    1a48:	89 f0       	breq	.+34     	; 0x1a6c <_ZN16class_Feed_Timer13ProcessInputsEv+0x8ce>
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	68 16       	cp	r6, r24
    1a4e:	71 04       	cpc	r7, r1
    1a50:	49 f1       	breq	.+82     	; 0x1aa4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x906>
    1a52:	6a 94       	dec	r6
    1a54:	67 28       	or	r6, r7
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <_ZN16class_Feed_Timer13ProcessInputsEv+0x8bc>
    1a58:	0b cf       	rjmp	.-490    	; 0x1870 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6d2>
									{
										case KeyCode::DOWN:
											//change show type
											ShowType++;
    1a5a:	1f 5f       	subi	r17, 0xFF	; 255
											if (ShowType>3) ShowType=0;
    1a5c:	14 30       	cpi	r17, 0x04	; 4
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <_ZN16class_Feed_Timer13ProcessInputsEv+0x8c4>
    1a60:	10 e0       	ldi	r17, 0x00	; 0
											dp.KeyWaitRelease();
    1a62:	81 e6       	ldi	r24, 0x61	; 97
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
										break;
    1a6a:	02 cf       	rjmp	.-508    	; 0x1870 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6d2>
										case KeyCode::UP:
											//next event
											EvP++;
											EvCount++;
    1a6c:	0f 5f       	subi	r16, 0xFF	; 255
											//if reach max the set to max
											if (EvCount>(EvSize-1))
    1a6e:	04 15       	cp	r16, r4
    1a70:	24 f4       	brge	.+8      	; 0x1a7a <_ZN16class_Feed_Timer13ProcessInputsEv+0x8dc>
											if (ShowType>3) ShowType=0;
											dp.KeyWaitRelease();
										break;
										case KeyCode::UP:
											//next event
											EvP++;
    1a72:	e7 e0       	ldi	r30, 0x07	; 7
    1a74:	ce 0e       	add	r12, r30
    1a76:	d1 1c       	adc	r13, r1
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <_ZN16class_Feed_Timer13ProcessInputsEv+0x8e6>
											EvCount++;
											//if reach max the set to max
											if (EvCount>(EvSize-1))
											{
												EvCount=0;
												EvP=&EE_Events[0];
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	c9 2e       	mov	r12, r25
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	d9 2e       	mov	r13, r25
											EvP++;
											EvCount++;
											//if reach max the set to max
											if (EvCount>(EvSize-1))
											{
												EvCount=0;
    1a82:	00 e0       	ldi	r16, 0x00	; 0
												EvP=&EE_Events[0];
											}
											//time
											bRep?time.DelayMsI(KEY_DELAY_RAPID):time.DelayMsI(KEY_DELAY);
    1a84:	55 20       	and	r5, r5
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <_ZN16class_Feed_Timer13ProcessInputsEv+0x8f4>
    1a88:	46 e9       	ldi	r20, 0x96	; 150
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <_ZN16class_Feed_Timer13ProcessInputsEv+0x8fc>
    1a92:	4e e5       	ldi	r20, 0x5E	; 94
    1a94:	51 e0       	ldi	r21, 0x01	; 1
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	88 e6       	ldi	r24, 0x68	; 104
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
    1aa2:	e6 ce       	rjmp	.-564    	; 0x1870 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6d2>
										break;
										case KeyCode::ENTER:
											//read option key_up(yes) key_down(no)
											this->SetTimer0_ON();
    1aa4:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
											dp.Home();
    1aa8:	81 e6       	ldi	r24, 0x61	; 97
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN19class_Display_7_Seg4HomeEv>
											dp.PutSF(PSTR("S N "));
    1ab0:	61 e8       	ldi	r22, 0x81	; 129
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	81 e6       	ldi	r24, 0x61	; 97
    1ab6:	93 e0       	ldi	r25, 0x03	; 3
    1ab8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
											dp.KeyWaitRelease();
    1abc:	81 e6       	ldi	r24, 0x61	; 97
    1abe:	93 e0       	ldi	r25, 0x03	; 3
    1ac0:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
											key=dp.KeyRead();
    1ac4:	81 e6       	ldi	r24, 0x61	; 97
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN19class_Display_7_Seg7KeyReadEv>
    1acc:	6c 01       	movw	r12, r24
											//clear and exit
											ClearAndExit();
    1ace:	c7 01       	movw	r24, r14
    1ad0:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
											if (key==KeyCode::UP)
    1ad4:	f2 e0       	ldi	r31, 0x02	; 2
    1ad6:	cf 16       	cp	r12, r31
    1ad8:	d1 04       	cpc	r13, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <_ZN16class_Feed_Timer13ProcessInputsEv+0x940>
    1adc:	63 c0       	rjmp	.+198    	; 0x1ba4 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa06>
											{
												//return
												return;
											}
											//delete event
											EventDelete(EvCount);
    1ade:	60 2f       	mov	r22, r16
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN16class_Feed_Timer11EventDeleteEh>
											//Show Event number
											this->SetTimer0_ON();
    1ae6:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
											dp.DispSetPoint(2,false);
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	62 e0       	ldi	r22, 0x02	; 2
    1aee:	81 e6       	ldi	r24, 0x61	; 97
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
											this->ShowEventNumber(eeprom_read_byte(&EE_EventsSize));
    1af6:	8c eb       	ldi	r24, 0xBC	; 188
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <eeprom_read_byte>
    1afe:	68 2f       	mov	r22, r24
    1b00:	c7 01       	movw	r24, r14
    1b02:	0e 94 04 08 	call	0x1008	; 0x1008 <_ZN16class_Feed_Timer15ShowEventNumberEh>
											time.DelayMsI(TIME_EVENT_NUMBER_SHOW);
    1b06:	40 ed       	ldi	r20, 0xD0	; 208
    1b08:	57 e0       	ldi	r21, 0x07	; 7
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	88 e6       	ldi	r24, 0x68	; 104
    1b10:	93 e0       	ldi	r25, 0x03	; 3
    1b12:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <_ZN16class_Feed_Timer13ProcessInputsEv+0x982>
							break;
							////////////////////////
							//  RESET
							////////////////////////
							case menu_Item::RESET:
								cli();
    1b18:	f8 94       	cli
								asm("jmp 0");
    1b1a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
							break;
    1b1e:	77 cc       	rjmp	.-1810   	; 0x140e <_ZN16class_Feed_Timer13ProcessInputsEv+0x270>
							////////////////////////
							//  EXIT
							////////////////////////
							case menu_Item::EXIT:
								//exit
								ClearAndExit();
    1b20:	c7 01       	movw	r24, r14
    1b22:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
								return;
    1b26:	3e c0       	rjmp	.+124    	; 0x1ba4 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa06>
		/////////////////////
		// KEY ENTER?
		/////////////////////
		case KeyCode::ENTER:
			//Show batt level
			time.SetElapsed(&tShow);
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	88 e6       	ldi	r24, 0x68	; 104
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN10class_Time10SetElapsedEPm>
			dp.Cls();
    1b36:	81 e6       	ldi	r24, 0x61	; 97
    1b38:	93 e0       	ldi	r25, 0x03	; 3
    1b3a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
			do{
				dp.Locate(1);
				sprintf(bf,"B%3d",GetVBatPercent());
    1b3e:	8a e1       	ldi	r24, 0x1A	; 26
    1b40:	c8 2e       	mov	r12, r24
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	d8 2e       	mov	r13, r24
    1b46:	03 e6       	ldi	r16, 0x63	; 99
    1b48:	11 e0       	ldi	r17, 0x01	; 1
		case KeyCode::ENTER:
			//Show batt level
			time.SetElapsed(&tShow);
			dp.Cls();
			do{
				dp.Locate(1);
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	81 e6       	ldi	r24, 0x61	; 97
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
				sprintf(bf,"B%3d",GetVBatPercent());
    1b54:	c7 01       	movw	r24, r14
    1b56:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN16class_Feed_Timer14GetVBatPercentEv>
    1b5a:	9f 93       	push	r25
    1b5c:	8f 93       	push	r24
    1b5e:	df 92       	push	r13
    1b60:	cf 92       	push	r12
    1b62:	1f 93       	push	r17
    1b64:	0f 93       	push	r16
    1b66:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
				dp.PutS(bf);
    1b6a:	63 e6       	ldi	r22, 0x63	; 99
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	81 e6       	ldi	r24, 0x61	; 97
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
			} while (time.GetElapsed(&tShow)<4000);
    1b76:	be 01       	movw	r22, r28
    1b78:	6f 5f       	subi	r22, 0xFF	; 255
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	88 e6       	ldi	r24, 0x68	; 104
    1b7e:	93 e0       	ldi	r25, 0x03	; 3
    1b80:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN10class_Time10GetElapsedEPm>
		/////////////////////
		case KeyCode::ENTER:
			//Show batt level
			time.SetElapsed(&tShow);
			dp.Cls();
			do{
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	60 3a       	cpi	r22, 0xA0	; 160
    1b92:	7f 40       	sbci	r23, 0x0F	; 15
    1b94:	81 05       	cpc	r24, r1
    1b96:	91 05       	cpc	r25, r1
    1b98:	c0 f2       	brcs	.-80     	; 0x1b4a <_ZN16class_Feed_Timer13ProcessInputsEv+0x9ac>
				dp.Locate(1);
				sprintf(bf,"B%3d",GetVBatPercent());
				dp.PutS(bf);
			} while (time.GetElapsed(&tShow)<4000);
			//clear and exit
			ClearAndExit();
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN16class_Feed_Timer12ClearAndExitEv>
		case KeyCode::ENTER_REPEAT:
		case KeyCode::NONE:
		break;		
	}
	//Set timer IO OFF
	this->SetTimer0_OFF();
    1ba0:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
}
    1ba4:	64 96       	adiw	r28, 0x14	; 20
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	5f 90       	pop	r5
    1bce:	4f 90       	pop	r4
    1bd0:	08 95       	ret

00001bd2 <main>:
		opcode[0].CompMask=0xf3;
	}	
};

int main()
{
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <main+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <main+0x8>
    1bda:	1f 92       	push	r1
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	
	class_Feed_Timer	ft;
    1be0:	ce 01       	movw	r24, r28
    1be2:	05 96       	adiw	r24, 0x05	; 5
    1be4:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN16class_Feed_TimerC1Ev>
// ClockCallBack loop test
// 	for(;;)
// 		ft.ClockCallBack();

	//ENABLE GLOBAL INTERRUPTS
	sei();
    1be8:	78 94       	sei
// 		key=dp.KeyReadFlash();
// 		if (key==KEY_DOWN) dp.MotorON(); else dp.MotorOFF();
// 	}

	//SHOW DART IF KEY DOWN PRESSED DURING RESET
	if (dp.KeyReadFlash()==KeyCode::DOWN)
    1bea:	81 e6       	ldi	r24, 0x61	; 97
    1bec:	93 e0       	ldi	r25, 0x03	; 3
    1bee:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	b1 f4       	brne	.+44     	; 0x1c22 <main+0x50>
	{
		dp.Cls();
    1bf6:	81 e6       	ldi	r24, 0x61	; 97
    1bf8:	93 e0       	ldi	r25, 0x03	; 3
    1bfa:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
		dp.PutSF(PSTR("DART"));
    1bfe:	6c e7       	ldi	r22, 0x7C	; 124
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	81 e6       	ldi	r24, 0x61	; 97
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
		dp.KeyWaitRelease();
    1c0a:	81 e6       	ldi	r24, 0x61	; 97
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
		time.DelayMsI(500);
    1c12:	44 ef       	ldi	r20, 0xF4	; 244
    1c14:	51 e0       	ldi	r21, 0x01	; 1
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	88 e6       	ldi	r24, 0x68	; 104
    1c1c:	93 e0       	ldi	r25, 0x03	; 3
    1c1e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	}

	//ANIMATION OF BOOT START

	dp.Cls();
    1c22:	81 e6       	ldi	r24, 0x61	; 97
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("-   "));
    1c2a:	67 e7       	ldi	r22, 0x77	; 119
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	81 e6       	ldi	r24, 0x61	; 97
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	88 e6       	ldi	r24, 0x68	; 104
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
    1c46:	81 e6       	ldi	r24, 0x61	; 97
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR(" -  "));
    1c4e:	62 e7       	ldi	r22, 0x72	; 114
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	81 e6       	ldi	r24, 0x61	; 97
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	88 e6       	ldi	r24, 0x68	; 104
    1c64:	93 e0       	ldi	r25, 0x03	; 3
    1c66:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
    1c6a:	81 e6       	ldi	r24, 0x61	; 97
    1c6c:	93 e0       	ldi	r25, 0x03	; 3
    1c6e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("  - "));
    1c72:	6d e6       	ldi	r22, 0x6D	; 109
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	81 e6       	ldi	r24, 0x61	; 97
    1c78:	93 e0       	ldi	r25, 0x03	; 3
    1c7a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
    1c7e:	4a ef       	ldi	r20, 0xFA	; 250
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	88 e6       	ldi	r24, 0x68	; 104
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
    1c8e:	81 e6       	ldi	r24, 0x61	; 97
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("   -"));
    1c96:	68 e6       	ldi	r22, 0x68	; 104
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	81 e6       	ldi	r24, 0x61	; 97
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
    1ca2:	4a ef       	ldi	r20, 0xFA	; 250
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	88 e6       	ldi	r24, 0x68	; 104
    1cac:	93 e0       	ldi	r25, 0x03	; 3
    1cae:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
    1cb2:	81 e6       	ldi	r24, 0x61	; 97
    1cb4:	93 e0       	ldi	r25, 0x03	; 3
    1cb6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	time.DelayMsI(250);
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	88 e6       	ldi	r24, 0x68	; 104
    1cc4:	93 e0       	ldi	r25, 0x03	; 3
    1cc6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>

	//SHOW VERSION

	dp.DispSetPoint(2,true);
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	81 e6       	ldi	r24, 0x61	; 97
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	sprintf(bf,"V%3d",_FEED_TIMER_7_SEGMENTS_VERSION);
    1cd6:	1f 92       	push	r1
    1cd8:	8f e7       	ldi	r24, 0x7F	; 127
    1cda:	8f 93       	push	r24
    1cdc:	8f e1       	ldi	r24, 0x1F	; 31
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9f 93       	push	r25
    1ce2:	8f 93       	push	r24
    1ce4:	83 e6       	ldi	r24, 0x63	; 99
    1ce6:	91 e0       	ldi	r25, 0x01	; 1
    1ce8:	9f 93       	push	r25
    1cea:	8f 93       	push	r24
    1cec:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
	dp.Cls();
    1cf0:	81 e6       	ldi	r24, 0x61	; 97
    1cf2:	93 e0       	ldi	r25, 0x03	; 3
    1cf4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutS(bf);
    1cf8:	63 e6       	ldi	r22, 0x63	; 99
    1cfa:	71 e0       	ldi	r23, 0x01	; 1
    1cfc:	81 e6       	ldi	r24, 0x61	; 97
    1cfe:	93 e0       	ldi	r25, 0x03	; 3
    1d00:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
	time.DelayMsI(2000);
    1d04:	40 ed       	ldi	r20, 0xD0	; 208
    1d06:	57 e0       	ldi	r21, 0x07	; 7
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	88 e6       	ldi	r24, 0x68	; 104
    1d0e:	93 e0       	ldi	r25, 0x03	; 3
    1d10:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
	dp.DispSetPoint(2,false);
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	62 e0       	ldi	r22, 0x02	; 2
    1d18:	81 e6       	ldi	r24, 0x61	; 97
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
	dp.Cls();
    1d20:	81 e6       	ldi	r24, 0x61	; 97
    1d22:	93 e0       	ldi	r25, 0x03	; 3
    1d24:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>

	//INITIALIZE TIME IF BOOT IS COLD
	
	ft.InitTime();
    1d28:	ce 01       	movw	r24, r28
    1d2a:	05 96       	adiw	r24, 0x05	; 5
    1d2c:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN16class_Feed_Timer8InitTimeEv>

	///////////////////////////////////////
	//MAIN LOOP
	///////////////////////////////////////

	dp.Cls();
    1d30:	81 e6       	ldi	r24, 0x61	; 97
    1d32:	93 e0       	ldi	r25, 0x03	; 3
    1d34:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
		
			for(;;)
			{
				dp.Locate(1);
				ft.GetTime(h,m,s,w);
				sprintf(bf,"%02d%02d",h,m);
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	e8 2e       	mov	r14, r24
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	f8 2e       	mov	r15, r24
    1d4c:	93 e6       	ldi	r25, 0x63	; 99
    1d4e:	c9 2e       	mov	r12, r25
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	d9 2e       	mov	r13, r25
	dp.Cls();
	for(;;)
	{
		//ENTER IN SLEEP SAVE MODE TO REDUCE POWER MORE
		
		if (ft.SleepState)
    1d54:	80 91 00 01 	lds	r24, 0x0100
    1d58:	88 23       	and	r24, r24
    1d5a:	61 f0       	breq	.+24     	; 0x1d74 <main+0x1a2>
		{
			//SAVE IO STATE TO REDUCE POWER
			dp.DisableIO();
    1d5c:	81 e6       	ldi	r24, 0x61	; 97
    1d5e:	93 e0       	ldi	r25, 0x03	; 3
    1d60:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN19class_Display_7_Seg9DisableIOEv>
			//SLEEP
			dp.PutToSleep();
    1d64:	81 e6       	ldi	r24, 0x61	; 97
    1d66:	93 e0       	ldi	r25, 0x03	; 3
    1d68:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN19class_Display_7_Seg10PutToSleepEv>
			//SHOW FEED BACK OPERATIONAL
			ft.ShowLIVE();			
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	05 96       	adiw	r24, 0x05	; 5
    1d70:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN16class_Feed_Timer8ShowLIVEEv>
		}
		
		//SHOW TIME IF MOTOR ON
		
		if (dp.MotorGetState()==true)
    1d74:	81 e6       	ldi	r24, 0x61	; 97
    1d76:	93 e0       	ldi	r25, 0x03	; 3
    1d78:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN19class_Display_7_Seg13MotorGetStateEv>
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <main+0x1b0>
    1d80:	52 c0       	rjmp	.+164    	; 0x1e26 <main+0x254>
		{
			dp.EnableIO();
    1d82:	81 e6       	ldi	r24, 0x61	; 97
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN19class_Display_7_Seg8EnableIOEv>
			ft.SetTimer0_ON();
    1d8a:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN16class_Feed_Timer12SetTimer0_ONEv.isra.3>
			dp.DispSetPoint(2,true);
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	81 e6       	ldi	r24, 0x61	; 97
    1d94:	93 e0       	ldi	r25, 0x03	; 3
    1d96:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
    1d9a:	81 e6       	ldi	r24, 0x61	; 97
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
		
			//SHOW TIME WHILE MOTOR ON
		
			for(;;)
			{
				dp.Locate(1);
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	81 e6       	ldi	r24, 0x61	; 97
    1da6:	93 e0       	ldi	r25, 0x03	; 3
    1da8:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN19class_Display_7_Seg6LocateEh>
				ft.GetTime(h,m,s,w);
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5f       	subi	r16, 0xFF	; 255
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	9e 01       	movw	r18, r28
    1db4:	2e 5f       	subi	r18, 0xFE	; 254
    1db6:	3f 4f       	sbci	r19, 0xFF	; 255
    1db8:	ae 01       	movw	r20, r28
    1dba:	4d 5f       	subi	r20, 0xFD	; 253
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	be 01       	movw	r22, r28
    1dc0:	6c 5f       	subi	r22, 0xFC	; 252
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	05 96       	adiw	r24, 0x05	; 5
    1dc8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
				sprintf(bf,"%02d%02d",h,m);
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	1f 92       	push	r1
    1dd0:	8f 93       	push	r24
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	1f 92       	push	r1
    1dd6:	8f 93       	push	r24
    1dd8:	ff 92       	push	r15
    1dda:	ef 92       	push	r14
    1ddc:	df 92       	push	r13
    1dde:	cf 92       	push	r12
    1de0:	0e 94 9d 13 	call	0x273a	; 0x273a <sprintf>
				dp.PutS(bf);
    1de4:	63 e6       	ldi	r22, 0x63	; 99
    1de6:	71 e0       	ldi	r23, 0x01	; 1
    1de8:	81 e6       	ldi	r24, 0x61	; 97
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN19class_Display_7_Seg4PutSEPKc>
				if (dp.MotorGetState()==false) break;
    1df0:	81 e6       	ldi	r24, 0x61	; 97
    1df2:	93 e0       	ldi	r25, 0x03	; 3
    1df4:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN19class_Display_7_Seg13MotorGetStateEv>
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	81 11       	cpse	r24, r1
    1e04:	ce cf       	rjmp	.-100    	; 0x1da2 <main+0x1d0>
			}
			dp.DispSetPoint(2,false);
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	81 e6       	ldi	r24, 0x61	; 97
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
    1e12:	81 e6       	ldi	r24, 0x61	; 97
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN19class_Display_7_Seg3ClsEv>
			ft.SetTimer0_OFF();
    1e1a:	0e 94 05 01 	call	0x20a	; 0x20a <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
			dp.DisableIO();
    1e1e:	81 e6       	ldi	r24, 0x61	; 97
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN19class_Display_7_Seg9DisableIOEv>
		}
		
		//PROCESS INPUT KEYS
		
		ft.ProcessInputs();
    1e26:	ce 01       	movw	r24, r28
    1e28:	05 96       	adiw	r24, 0x05	; 5
    1e2a:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN16class_Feed_Timer13ProcessInputsEv>
		
	}
    1e2e:	92 cf       	rjmp	.-220    	; 0x1d54 <main+0x182>

00001e30 <_GLOBAL__sub_I_time>:
//  +--------------------------------------+
//  |        GLOBAL CLASSES          	   |
//  +--------------------------------------+
// 

class_Time			time;
    1e30:	88 e6       	ldi	r24, 0x68	; 104
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_ZN10class_TimeC1Ev>
class_Display_7_Seg	dp;
    1e38:	81 e6       	ldi	r24, 0x61	; 97
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <_ZN19class_Display_7_SegC1Ev>

00001e40 <_Z11DisplayScanv>:
	
	//first turn all digits off
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
								 				(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1e40:	88 b1       	in	r24, 0x08	; 8
    1e42:	8f 60       	ori	r24, 0x0F	; 15
    1e44:	88 b9       	out	0x08, r24	; 8
	//turn all segments off
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);	
    1e46:	8b b1       	in	r24, 0x0b	; 11
    1e48:	88 61       	ori	r24, 0x18	; 24
    1e4a:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
		    									(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1e4c:	8b b1       	in	r24, 0x0b	; 11
    1e4e:	87 6e       	ori	r24, 0xE7	; 231
    1e50:	8b b9       	out	0x0b, r24	; 11
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    1e52:	80 91 71 03 	lds	r24, 0x0371
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	18 f4       	brcc	.+6      	; 0x1e62 <_Z11DisplayScanv+0x22>
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    1e5c:	80 93 71 03 	sts	0x0371, r24
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <_Z11DisplayScanv+0x26>
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    1e62:	10 92 71 03 	sts	0x0371, r1
	//put display buffer content on display
	tmp=_Display_7_Seg.Buffer[_Display_7_Seg.BufferIndex] & (~(1<<_DISPLAY_SEG_P));
    1e66:	e0 91 71 03 	lds	r30, 0x0371
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	ef 58       	subi	r30, 0x8F	; 143
    1e6e:	fc 4f       	sbci	r31, 0xFC	; 252
    1e70:	81 81       	ldd	r24, Z+1	; 0x01
	//check bits
	if ((tmp & (1<<_DISPLAY_SEG_A))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT);
    1e72:	80 fd       	sbrc	r24, 0
    1e74:	59 98       	cbi	0x0b, 1	; 11
	if ((tmp & (1<<_DISPLAY_SEG_B))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT);
    1e76:	81 fd       	sbrc	r24, 1
    1e78:	5a 98       	cbi	0x0b, 2	; 11
	if ((tmp & (1<<_DISPLAY_SEG_C))!=0)	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT);
    1e7a:	82 fd       	sbrc	r24, 2
    1e7c:	5c 98       	cbi	0x0b, 4	; 11
	if ((tmp & (1<<_DISPLAY_SEG_D))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT);
    1e7e:	83 fd       	sbrc	r24, 3
    1e80:	5e 98       	cbi	0x0b, 6	; 11
	if ((tmp & (1<<_DISPLAY_SEG_E))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1e82:	84 fd       	sbrc	r24, 4
    1e84:	5f 98       	cbi	0x0b, 7	; 11
	if ((tmp & (1<<_DISPLAY_SEG_F))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT);
    1e86:	85 fd       	sbrc	r24, 5
    1e88:	58 98       	cbi	0x0b, 0	; 11
	if ((tmp & (1<<_DISPLAY_SEG_G))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT);
    1e8a:	86 fd       	sbrc	r24, 6
    1e8c:	5d 98       	cbi	0x0b, 5	; 11
    //turn point on or off
     if ((_Display_7_Seg.PtrBufferBits & (1<<_Display_7_Seg.BufferIndex))!=0)
    1e8e:	80 91 76 03 	lds	r24, 0x0376
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	00 90 71 03 	lds	r0, 0x0371
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <_Z11DisplayScanv+0x5e>
    1e9a:	95 95       	asr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <_Z11DisplayScanv+0x5a>
    1ea2:	80 fd       	sbrc	r24, 0
	 {
		_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    1ea4:	5b 98       	cbi	0x0b, 3	; 11
	 }
	//enable digit
	switch (_Display_7_Seg.BufferIndex)
    1ea6:	80 91 71 03 	lds	r24, 0x0371
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	41 f0       	breq	.+16     	; 0x1ebe <_Z11DisplayScanv+0x7e>
    1eae:	28 f0       	brcs	.+10     	; 0x1eba <_Z11DisplayScanv+0x7a>
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	39 f0       	breq	.+14     	; 0x1ec2 <_Z11DisplayScanv+0x82>
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	39 f0       	breq	.+14     	; 0x1ec6 <_Z11DisplayScanv+0x86>
    1eb8:	08 95       	ret
	{
		case 0:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1eba:	43 98       	cbi	0x08, 3	; 8
		break;
    1ebc:	08 95       	ret
		case 1:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT);
    1ebe:	42 98       	cbi	0x08, 2	; 8
		break;
    1ec0:	08 95       	ret
		case 2:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT);
    1ec2:	41 98       	cbi	0x08, 1	; 8
		break;
    1ec4:	08 95       	ret
		case 3:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT);
    1ec6:	40 98       	cbi	0x08, 0	; 8
    1ec8:	08 95       	ret

00001eca <_ZN19class_Display_7_Seg14KeysInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeysInitialize()
{
		//set keys input with pull up
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_OUTPUT|=(1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT);
    1eca:	85 b1       	in	r24, 0x05	; 5
    1ecc:	87 60       	ori	r24, 0x07	; 7
    1ece:	85 b9       	out	0x05, r24	; 5
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT));
    1ed0:	84 b1       	in	r24, 0x04	; 4
    1ed2:	88 7f       	andi	r24, 0xF8	; 248
    1ed4:	84 b9       	out	0x04, r24	; 4
    1ed6:	08 95       	ret

00001ed8 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>:
//	| @INPUT   :																	|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysInitialize()
{
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	ec 01       	movw	r28, r24
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1ee0:	1f b7       	in	r17, 0x3f	; 63
	//disable interrupts
	cli();
    1ee2:	f8 94       	cli
	//program Segments and digits to output off state
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    1ee4:	8b b1       	in	r24, 0x0b	; 11
    1ee6:	88 61       	ori	r24, 0x18	; 24
    1ee8:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    1eea:	9a b1       	in	r25, 0x0a	; 10
    1eec:	98 61       	ori	r25, 0x18	; 24
    1eee:	9a b9       	out	0x0a, r25	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1ef0:	9b b1       	in	r25, 0x0b	; 11
    1ef2:	97 6e       	ori	r25, 0xE7	; 231
    1ef4:	9b b9       	out	0x0b, r25	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1ef6:	9a b1       	in	r25, 0x0a	; 10
    1ef8:	97 6e       	ori	r25, 0xE7	; 231
    1efa:	9a b9       	out	0x0a, r25	; 10
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1efc:	98 b1       	in	r25, 0x08	; 8
    1efe:	9f 60       	ori	r25, 0x0F	; 15
    1f00:	98 b9       	out	0x08, r25	; 8
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   |=	(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1f02:	97 b1       	in	r25, 0x07	; 7
    1f04:	9f 60       	ori	r25, 0x0F	; 15
    1f06:	97 b9       	out	0x07, r25	; 7
    //Set interrupt timer routine
    Time.SetTimeInterruptCallback(DisplayScan);
    1f08:	60 e2       	ldi	r22, 0x20	; 32
    1f0a:	7f e0       	ldi	r23, 0x0F	; 15
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>
    //enable timer interrupt
    Time.SetInterruptState(true);					 
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	ce 01       	movw	r24, r28
    1f16:	0e 94 2c 13 	call	0x2658	; 0x2658 <_ZN10class_Time17SetInterruptStateEb>
	//restore SREG
	SREG=sreg;
    1f1a:	1f bf       	out	0x3f, r17	; 63
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	08 95       	ret

00001f24 <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysUnInitialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1f24:	9f b7       	in	r25, 0x3f	; 63
	//disable interrupts
	cli();
    1f26:	f8 94       	cli
	//program all select displays and segments to input high z
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1f28:	8a b1       	in	r24, 0x0a	; 10
    1f2a:	87 7e       	andi	r24, 0xE7	; 231
    1f2c:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1f2e:	8b b1       	in	r24, 0x0b	; 11
    1f30:	87 7e       	andi	r24, 0xE7	; 231
    1f32:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    1f34:	8a b1       	in	r24, 0x0a	; 10
    1f36:	88 71       	andi	r24, 0x18	; 24
    1f38:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    1f3a:	8b b1       	in	r24, 0x0b	; 11
    1f3c:	88 71       	andi	r24, 0x18	; 24
    1f3e:	8b b9       	out	0x0b, r24	; 11


	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    1f40:	87 b1       	in	r24, 0x07	; 7
    1f42:	80 7f       	andi	r24, 0xF0	; 240
    1f44:	87 b9       	out	0x07, r24	; 7

	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|    \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    1f46:	88 b1       	in	r24, 0x08	; 8
    1f48:	80 7f       	andi	r24, 0xF0	; 240
    1f4a:	88 b9       	out	0x08, r24	; 8
	//Set interrupt timer routine
	//restore SREG
	SREG=sreg;
    1f4c:	9f bf       	out	0x3f, r25	; 63
    1f4e:	08 95       	ret

00001f50 <_ZN19class_Display_7_Seg15MotorInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorInitialize()
{
	//PROGRAM PORT TO INPUT HI-Z TO DISABLE MOTOR
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1f50:	44 98       	cbi	0x08, 4	; 8
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1f52:	3c 98       	cbi	0x07, 4	; 7
    1f54:	08 95       	ret

00001f56 <_ZN19class_Display_7_Seg17MotorUnInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorUnInitialize()
{
	//PORTS input high z (motor automatically disable)
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1f56:	3c 98       	cbi	0x07, 4	; 7
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1f58:	44 98       	cbi	0x08, 4	; 8
    1f5a:	08 95       	ret

00001f5c <_ZN19class_Display_7_Seg16Timer2InitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Timer2Initialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1f5c:	2f b7       	in	r18, 0x3f	; 63
	//disable interrupts
	cli();
    1f5e:	f8 94       	cli
	//disable timer interrupts
	TIMSK2&=~(1<<OCIE2A);
    1f60:	80 91 70 00 	lds	r24, 0x0070
    1f64:	8d 7f       	andi	r24, 0xFD	; 253
    1f66:	80 93 70 00 	sts	0x0070, r24
	//set asynchronous mode external xtal 32.768Hz
	ASSR|=(1<<AS2);
    1f6a:	80 91 b6 00 	lds	r24, 0x00B6
    1f6e:	80 62       	ori	r24, 0x20	; 32
    1f70:	80 93 b6 00 	sts	0x00B6, r24
	//set OCR2A to 31 to generate 1Hz interrupt using 32.768Hz xtal
	OCR2A=31;
    1f74:	8f e1       	ldi	r24, 0x1F	; 31
    1f76:	80 93 b3 00 	sts	0x00B3, r24
	//wait assert
	do {} while ((ASSR & (1<<OCR2AUB))==0);
    1f7a:	80 91 b6 00 	lds	r24, 0x00B6
    1f7e:	83 ff       	sbrs	r24, 3
    1f80:	fc cf       	rjmp	.-8      	; 0x1f7a <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x1e>
	//clear timer 2
	TCNT2=0;
    1f82:	10 92 b2 00 	sts	0x00B2, r1
	//wait assert
	do {} while ((ASSR & (1<<TCN2UB))==0);
    1f86:	80 91 b6 00 	lds	r24, 0x00B6
    1f8a:	84 ff       	sbrs	r24, 4
    1f8c:	fc cf       	rjmp	.-8      	; 0x1f86 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x2a>
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
    1f8e:	80 91 b0 00 	lds	r24, 0x00B0
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
	TCCR2A|=tmp;
    1f92:	90 91 b0 00 	lds	r25, 0x00B0
    1f96:	92 60       	ori	r25, 0x02	; 2
	do {} while ((ASSR & (1<<TCN2UB))==0);
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
    1f98:	8e 7f       	andi	r24, 0xFE	; 254
	TCCR2A|=tmp;
    1f9a:	89 2b       	or	r24, r25
    1f9c:	80 93 b0 00 	sts	0x00B0, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2AUB))==0);
    1fa0:	80 91 b6 00 	lds	r24, 0x00B6
    1fa4:	81 ff       	sbrs	r24, 1
    1fa6:	fc cf       	rjmp	.-8      	; 0x1fa0 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x44>
	tmp=TCCR2B;
    1fa8:	80 91 b1 00 	lds	r24, 0x00B1
	tmp&=(1<<WGM22);
    1fac:	88 70       	andi	r24, 0x08	; 8
	tmp|=(1<<CS22)|(1<<CS21)|(1<<CS20);
    1fae:	87 60       	ori	r24, 0x07	; 7
	TCCR2B=tmp;
    1fb0:	80 93 b1 00 	sts	0x00B1, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2BUB))==0);
    1fb4:	80 91 b6 00 	lds	r24, 0x00B6
    1fb8:	80 ff       	sbrs	r24, 0
    1fba:	fc cf       	rjmp	.-8      	; 0x1fb4 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x58>
	//enable interrupt
	TIMSK2|=(1<<OCIE2A);
    1fbc:	80 91 70 00 	lds	r24, 0x0070
    1fc0:	82 60       	ori	r24, 0x02	; 2
    1fc2:	80 93 70 00 	sts	0x0070, r24
	//restore SREG
	SREG=sreg;
    1fc6:	2f bf       	out	0x3f, r18	; 63
    1fc8:	08 95       	ret

00001fca <__vector_7>:
//	| @REMARKS :  This ISR is called each second									|
//	+-------------------------------------------------------------------------------+


ISR(TIMER2_COMPA_vect)
{
    1fca:	1f 92       	push	r1
    1fcc:	0f 92       	push	r0
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	0f 92       	push	r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	2f 93       	push	r18
    1fd6:	3f 93       	push	r19
    1fd8:	4f 93       	push	r20
    1fda:	5f 93       	push	r21
    1fdc:	6f 93       	push	r22
    1fde:	7f 93       	push	r23
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	af 93       	push	r26
    1fe6:	bf 93       	push	r27
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
	if (_Display_7_Seg.SecondCallBack!=nullptr) _Display_7_Seg.SecondCallBack();
    1fec:	e0 91 78 03 	lds	r30, 0x0378
    1ff0:	f0 91 79 03 	lds	r31, 0x0379
    1ff4:	30 97       	sbiw	r30, 0x00	; 0
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <__vector_7+0x30>
    1ff8:	09 95       	icall
}
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	bf 91       	pop	r27
    2000:	af 91       	pop	r26
    2002:	9f 91       	pop	r25
    2004:	8f 91       	pop	r24
    2006:	7f 91       	pop	r23
    2008:	6f 91       	pop	r22
    200a:	5f 91       	pop	r21
    200c:	4f 91       	pop	r20
    200e:	3f 91       	pop	r19
    2010:	2f 91       	pop	r18
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <_ZN19class_Display_7_Seg12DispSetPointEhb>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void    class_Display_7_Seg::DispSetPoint(uint8_t digit,bool digitState)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    201c:	61 50       	subi	r22, 0x01	; 1
    201e:	64 30       	cpi	r22, 0x04	; 4
    2020:	c0 f4       	brcc	.+48     	; 0x2052 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x36>
	{
    	//yes set segments
        digit=digit-1;
        switch (digitState)
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	20 91 76 03 	lds	r18, 0x0376
    2028:	41 30       	cpi	r20, 0x01	; 1
    202a:	51 05       	cpc	r21, r1
    202c:	59 f0       	breq	.+22     	; 0x2044 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x28>
        {
            case false:
                _Display_7_Seg.PtrBufferBits&=~(1<<digit);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x1a>
    2034:	88 0f       	add	r24, r24
    2036:	6a 95       	dec	r22
    2038:	ea f7       	brpl	.-6      	; 0x2034 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x18>
    203a:	80 95       	com	r24
    203c:	82 23       	and	r24, r18
    203e:	80 93 76 03 	sts	0x0376, r24
        	break;
    2042:	08 95       	ret
            case true:
                _Display_7_Seg.PtrBufferBits|=(1<<digit);
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2c>
    2046:	44 0f       	add	r20, r20
    2048:	6a 95       	dec	r22
    204a:	ea f7       	brpl	.-6      	; 0x2046 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2a>
    204c:	42 2b       	or	r20, r18
    204e:	40 93 76 03 	sts	0x0376, r20
    2052:	08 95       	ret

00002054 <_ZN19class_Display_7_Seg12DispSetASCIIEhh>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DispSetASCII(uint8_t asciiCode,uint8_t digit)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    2054:	8f ef       	ldi	r24, 0xFF	; 255
    2056:	84 0f       	add	r24, r20
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	70 f4       	brcc	.+28     	; 0x2078 <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
	{
		//yes set segments
		if (asciiCode>=FS && asciiCode<('_'+2))
    205c:	84 ee       	ldi	r24, 0xE4	; 228
    205e:	86 0f       	add	r24, r22
    2060:	85 34       	cpi	r24, 0x45	; 69
    2062:	50 f4       	brcc	.+20     	; 0x2078 <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
		{
			_Display_7_Seg.Buffer[digit-1]=pgm_read_byte(&_FEED_TIMER_DISP_7_SEG_ASCII_Table[asciiCode-FS]);	
    2064:	e6 2f       	mov	r30, r22
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	e0 5b       	subi	r30, 0xB0	; 176
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	e4 91       	lpm	r30, Z
    206e:	a4 2f       	mov	r26, r20
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	af 58       	subi	r26, 0x8F	; 143
    2074:	bc 4f       	sbci	r27, 0xFC	; 252
    2076:	ec 93       	st	X, r30
    2078:	08 95       	ret

0000207a <_ZN19class_Display_7_Seg4HomeEv>:
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 77 03 	sts	0x0377, r24
    2080:	08 95       	ret

00002082 <_ZN19class_Display_7_Seg6LocateEh>:
    2082:	60 93 77 03 	sts	0x0377, r22
    2086:	08 95       	ret

00002088 <_ZN19class_Display_7_Seg4PutCEc>:
//	| @INPUT   : asciiCode										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutC(char asciiCode)
{
		if (_Display_7_Seg.Col>=1 && _Display_7_Seg.Col<=_DISP_7_SEG_NUM_DIGITS)
    2088:	40 91 77 03 	lds	r20, 0x0377
    208c:	2f ef       	ldi	r18, 0xFF	; 255
    208e:	24 0f       	add	r18, r20
    2090:	24 30       	cpi	r18, 0x04	; 4
    2092:	10 f4       	brcc	.+4      	; 0x2098 <_ZN19class_Display_7_Seg4PutCEc+0x10>
		{
			DispSetASCII(asciiCode,_Display_7_Seg.Col);
    2094:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN19class_Display_7_Seg12DispSetASCIIEhh>
		}
		_Display_7_Seg.Col++;
    2098:	80 91 77 03 	lds	r24, 0x0377
    209c:	8f 5f       	subi	r24, 0xFF	; 255
    209e:	80 93 77 03 	sts	0x0377, r24
    20a2:	08 95       	ret

000020a4 <_ZN19class_Display_7_Seg4PutSEPKc>:
//	| @NAME    : PutS						  										|
//	| @INPUT   : asciiString									                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutS(const char *asciiString)
{
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	8c 01       	movw	r16, r24
    20ae:	eb 01       	movw	r28, r22
	  unsigned char data;
	  //send until zero is found
	  for(;;)
	  {
		  //get char for sram
		  data=*asciiString;
    20b0:	69 91       	ld	r22, Y+
		  //check if end
		  if (data==0) break;
    20b2:	66 23       	and	r22, r22
    20b4:	21 f0       	breq	.+8      	; 0x20be <_ZN19class_Display_7_Seg4PutSEPKc+0x1a>
		  //process according data
		  PutC(data);
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
		  //next char
		  asciiString++;
	  }
    20bc:	f9 cf       	rjmp	.-14     	; 0x20b0 <_ZN19class_Display_7_Seg4PutSEPKc+0xc>
}
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	08 95       	ret

000020c8 <_ZN19class_Display_7_Seg5PutSFEPKc>:
//	| @NAME    : PutSF						  										|
//	| @INPUT   : asciiStringFlash 								                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutSF(const char *asciiStringFlash)
{
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	8c 01       	movw	r16, r24
    20d2:	eb 01       	movw	r28, r22
	unsigned char data;
	//send until zero is found
	for(;;)
	{
		//get char for sram
		data=pgm_read_byte(asciiStringFlash);
    20d4:	fe 01       	movw	r30, r28
    20d6:	64 91       	lpm	r22, Z
		//check if end
		if (data==0) break;
    20d8:	66 23       	and	r22, r22
    20da:	29 f0       	breq	.+10     	; 0x20e6 <_ZN19class_Display_7_Seg5PutSFEPKc+0x1e>
		//process according data
		PutC(data);
    20dc:	c8 01       	movw	r24, r16
    20de:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN19class_Display_7_Seg4PutCEc>
		//next char
		asciiStringFlash++;
    20e2:	21 96       	adiw	r28, 0x01	; 1
	}
    20e4:	f7 cf       	rjmp	.-18     	; 0x20d4 <_ZN19class_Display_7_Seg5PutSFEPKc+0xc>
}
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <_ZN19class_Display_7_Seg3ClsEv>:
//	| @NAME    : Cls				  												|
//	| @INPUT   : ASCII code to clear							                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    20f6:	c1 e7       	ldi	r28, 0x71	; 113
    20f8:	d3 e0       	ldi	r29, 0x03	; 3
    20fa:	11 e0       	ldi	r17, 0x01	; 1
    20fc:	1e 83       	std	Y+6, r17	; 0x06
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
    20fe:	67 e6       	ldi	r22, 0x67	; 103
    2100:	71 e0       	ldi	r23, 0x01	; 1
    2102:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN19class_Display_7_Seg5PutSFEPKc>
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    2106:	1e 83       	std	Y+6, r17	; 0x06
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
	Locate(1);
}
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	08 95       	ret

00002110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>:
KeyCode	class_Display_7_Seg::KeyReadFlash()
{
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    2110:	83 b1       	in	r24, 0x03	; 3
    //check LED key	
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KeyCode::DOWN;
    2112:	82 ff       	sbrs	r24, 2
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x14>
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KeyCode::UP;
    2116:	81 ff       	sbrs	r24, 1
    2118:	08 c0       	rjmp	.+16     	; 0x212a <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x1a>
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KeyCode::ENTER;
    211a:	80 ff       	sbrs	r24, 0
    211c:	09 c0       	rjmp	.+18     	; 0x2130 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x20>
	//else none pressed
    return KeyCode::NONE;
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	08 95       	ret
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    //check LED key	
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KeyCode::DOWN;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	08 95       	ret
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KeyCode::UP;
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	08 95       	ret
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KeyCode::ENTER;
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	90 e0       	ldi	r25, 0x00	; 0
	//else none pressed
    return KeyCode::NONE;
}
    2134:	08 95       	ret

00002136 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	ec 01       	movw	r28, r24
	  while (KeyReadFlash()!=KeyCode::NONE) Time.DelayMsI(20);			//check at 20ms
    213c:	ce 01       	movw	r24, r28
    213e:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    2142:	89 2b       	or	r24, r25
    2144:	41 f0       	breq	.+16     	; 0x2156 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x20>
    2146:	44 e1       	ldi	r20, 0x14	; 20
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>
    2154:	f3 cf       	rjmp	.-26     	; 0x213c <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x6>
	  Time.DelayMsI(100);										        //debounce time
    2156:	44 e6       	ldi	r20, 0x64	; 100
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	ce 01       	movw	r24, r28
}
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
	  while (KeyReadFlash()!=KeyCode::NONE) Time.DelayMsI(20);			//check at 20ms
	  Time.DelayMsI(100);										        //debounce time
    2164:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <_ZN10class_Time8DelayMsIEm>

00002168 <_ZN19class_Display_7_Seg7KeyReadEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  : KeyCode							                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
KeyCode	class_Display_7_Seg::KeyRead()
{
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	ec 01       	movw	r28, r24
	KeyCode tmp,last;
	uint8_t ct;
	static bool repeat,first;
	
	tmp=KeyReadFlash();
    2176:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    217a:	8c 01       	movw	r16, r24
	if (tmp==KeyCode::NONE)
    217c:	89 2b       	or	r24, r25
    217e:	99 f5       	brne	.+102    	; 0x21e6 <_ZN19class_Display_7_Seg7KeyReadEv+0x7e>
	{
		repeat=false;
    2180:	10 92 70 03 	sts	0x0370, r1
		do{
			Time.DelayMsS(20);
    2184:	64 e1       	ldi	r22, 0x14	; 20
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	ce 01       	movw	r24, r28
    218a:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
			tmp=KeyReadFlash();
    218e:	ce 01       	movw	r24, r28
    2190:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    2194:	8c 01       	movw	r16, r24
	
	tmp=KeyReadFlash();
	if (tmp==KeyCode::NONE)
	{
		repeat=false;
		do{
    2196:	89 2b       	or	r24, r25
    2198:	a9 f3       	breq	.-22     	; 0x2184 <_ZN19class_Display_7_Seg7KeyReadEv+0x1c>
    219a:	f1 2c       	mov	r15, r1
			last=tmp;
			Time.DelayMsS(20);
			ct++;
			if (ct>25)
			{
				repeat=true;
    219c:	ee 24       	eor	r14, r14
    219e:	e3 94       	inc	r14
			tmp=KeyReadFlash();
		} while (tmp==KeyCode::NONE);
		ct=0;
		do{
			last=tmp;
			Time.DelayMsS(20);
    21a0:	64 e1       	ldi	r22, 0x14	; 20
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	ce 01       	movw	r24, r28
    21a6:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
			ct++;
    21aa:	f3 94       	inc	r15
			if (ct>25)
    21ac:	89 e1       	ldi	r24, 0x19	; 25
    21ae:	8f 15       	cp	r24, r15
    21b0:	98 f4       	brcc	.+38     	; 0x21d8 <_ZN19class_Display_7_Seg7KeyReadEv+0x70>
			{
				repeat=true;
    21b2:	e0 92 70 03 	sts	0x0370, r14
				first=true;
    21b6:	e0 92 6f 03 	sts	0x036F, r14
				switch (static_cast<uint8_t>(tmp))
    21ba:	c8 01       	movw	r24, r16
    21bc:	99 27       	eor	r25, r25
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	91 05       	cpc	r25, r1
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <_ZN19class_Display_7_Seg7KeyReadEv+0x68>
    21c4:	83 30       	cpi	r24, 0x03	; 3
    21c6:	91 05       	cpc	r25, r1
    21c8:	29 f0       	breq	.+10     	; 0x21d4 <_ZN19class_Display_7_Seg7KeyReadEv+0x6c>
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <_ZN19class_Display_7_Seg7KeyReadEv+0x70>
    21ce:	36 c0       	rjmp	.+108    	; 0x223c <_ZN19class_Display_7_Seg7KeyReadEv+0xd4>
				{
					case static_cast<uint8_t>(KeyCode::DOWN):
						return KeyCode::DOWN_OVER;
					case static_cast<uint8_t>(KeyCode::UP):
						return KeyCode::UP_OVER;
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	37 c0       	rjmp	.+110    	; 0x2242 <_ZN19class_Display_7_Seg7KeyReadEv+0xda>
					case static_cast<uint8_t>(KeyCode::ENTER):
						return KeyCode::ENTER_OVER;
    21d4:	86 e0       	ldi	r24, 0x06	; 6
    21d6:	35 c0       	rjmp	.+106    	; 0x2242 <_ZN19class_Display_7_Seg7KeyReadEv+0xda>
				}
			}
			tmp=KeyReadFlash();
    21d8:	ce 01       	movw	r24, r28
    21da:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
		do{
			Time.DelayMsS(20);
			tmp=KeyReadFlash();
		} while (tmp==KeyCode::NONE);
		ct=0;
		do{
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	31 f1       	breq	.+76     	; 0x222e <_ZN19class_Display_7_Seg7KeyReadEv+0xc6>
    21e2:	8c 01       	movw	r16, r24
    21e4:	dd cf       	rjmp	.-70     	; 0x21a0 <_ZN19class_Display_7_Seg7KeyReadEv+0x38>
		Time.DelayMsS(50);
		return last;
	}
	else
	{
		if (repeat==true)
    21e6:	80 91 70 03 	lds	r24, 0x0370
    21ea:	88 23       	and	r24, r24
    21ec:	01 f1       	breq	.+64     	; 0x222e <_ZN19class_Display_7_Seg7KeyReadEv+0xc6>
		{
			if (first==true)
    21ee:	80 91 6f 03 	lds	r24, 0x036F
    21f2:	88 23       	and	r24, r24
    21f4:	41 f0       	breq	.+16     	; 0x2206 <_ZN19class_Display_7_Seg7KeyReadEv+0x9e>
			{
				Time.DelayMsS(500);
    21f6:	64 ef       	ldi	r22, 0xF4	; 244
    21f8:	71 e0       	ldi	r23, 0x01	; 1
    21fa:	ce 01       	movw	r24, r28
    21fc:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
				first=false;
    2200:	10 92 6f 03 	sts	0x036F, r1
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <_ZN19class_Display_7_Seg7KeyReadEv+0xa8>
			}
			else
			{
				Time.DelayMsS(150);
    2206:	66 e9       	ldi	r22, 0x96	; 150
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	ce 01       	movw	r24, r28
    220c:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
			}
			switch (static_cast<uint8_t>(tmp))
    2210:	c8 01       	movw	r24, r16
    2212:	99 27       	eor	r25, r25
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	91 05       	cpc	r25, r1
    2218:	31 f0       	breq	.+12     	; 0x2226 <_ZN19class_Display_7_Seg7KeyReadEv+0xbe>
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	91 05       	cpc	r25, r1
    221e:	29 f0       	breq	.+10     	; 0x222a <_ZN19class_Display_7_Seg7KeyReadEv+0xc2>
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	29 f4       	brne	.+10     	; 0x222e <_ZN19class_Display_7_Seg7KeyReadEv+0xc6>
    2224:	0d c0       	rjmp	.+26     	; 0x2240 <_ZN19class_Display_7_Seg7KeyReadEv+0xd8>
			{
				case static_cast<uint8_t>(KeyCode::DOWN):
					return KeyCode::DOWN_REPEAT;
				case static_cast<uint8_t>(KeyCode::UP):
					return KeyCode::UP_REPEAT;
    2226:	88 e0       	ldi	r24, 0x08	; 8
    2228:	0c c0       	rjmp	.+24     	; 0x2242 <_ZN19class_Display_7_Seg7KeyReadEv+0xda>
				case static_cast<uint8_t>(KeyCode::ENTER):
					return KeyCode::ENTER_REPEAT;
    222a:	89 e0       	ldi	r24, 0x09	; 9
    222c:	0a c0       	rjmp	.+20     	; 0x2242 <_ZN19class_Display_7_Seg7KeyReadEv+0xda>
			}
		}
	}
	Time.DelayMsS(50);
    222e:	62 e3       	ldi	r22, 0x32	; 50
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN10class_Time8DelayMsSEj>
	return tmp;
    2238:	c8 01       	movw	r24, r16
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <_ZN19class_Display_7_Seg7KeyReadEv+0xdc>
				repeat=true;
				first=true;
				switch (static_cast<uint8_t>(tmp))
				{
					case static_cast<uint8_t>(KeyCode::DOWN):
						return KeyCode::DOWN_OVER;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <_ZN19class_Display_7_Seg7KeyReadEv+0xda>
				Time.DelayMsS(150);
			}
			switch (static_cast<uint8_t>(tmp))
			{
				case static_cast<uint8_t>(KeyCode::DOWN):
					return KeyCode::DOWN_REPEAT;
    2240:	87 e0       	ldi	r24, 0x07	; 7
    2242:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}
	Time.DelayMsS(50);
	return tmp;
}
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	08 95       	ret

00002252 <_ZN19class_Display_7_Seg10PutToSleepEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutToSleep()
{
		//disable interrupts
		cli();
    2252:	f8 94       	cli
		//set sleep to POWER SAVE to keep timer2 running
		set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    2254:	83 b7       	in	r24, 0x33	; 51
    2256:	81 7f       	andi	r24, 0xF1	; 241
    2258:	86 60       	ori	r24, 0x06	; 6
    225a:	83 bf       	out	0x33, r24	; 51
		//enable sleep
		sleep_enable();
    225c:	83 b7       	in	r24, 0x33	; 51
    225e:	81 60       	ori	r24, 0x01	; 1
    2260:	83 bf       	out	0x33, r24	; 51
		//enable global interrupt
		sei();
    2262:	78 94       	sei
		//put CPU to sleep
		sleep_cpu();
    2264:	88 95       	sleep
		//disable sleep mode
		sleep_disable();
    2266:	83 b7       	in	r24, 0x33	; 51
    2268:	8e 7f       	andi	r24, 0xFE	; 254
    226a:	83 bf       	out	0x33, r24	; 51
    226c:	08 95       	ret

0000226e <_ZN19class_Display_7_Seg9DisableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisableIO()
{
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	ec 01       	movw	r28, r24
		//save SREG
		uint8_t sreg=SREG;
    2276:	1f b7       	in	r17, 0x3f	; 63
		//disable interrupts
		cli();
    2278:	f8 94       	cli
		//uninitialized hardware ports
		//KeysUnInitialize();
		DisplaysUnInitialize();
    227a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>
		MotorUnInitialize();	
    227e:	ce 01       	movw	r24, r28
    2280:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_ZN19class_Display_7_Seg17MotorUnInitializeEv>
		//restore SREG state
		SREG=sreg;
    2284:	1f bf       	out	0x3f, r17	; 63
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	08 95       	ret

0000228e <_ZN19class_Display_7_Seg8EnableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::EnableIO()
{
    228e:	cf 93       	push	r28
		//save SREG
		uint8_t sreg=SREG;
    2290:	cf b7       	in	r28, 0x3f	; 63
		//disable interrupts
		cli();
    2292:	f8 94       	cli
		//restore hardware ports state
		//KeysInitialize();
		DisplaysInitialize();
    2294:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
		//MotorInitialize();
		
		//_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
		
		//restore SREG state
		SREG=sreg;
    2298:	cf bf       	out	0x3f, r28	; 63
}
    229a:	cf 91       	pop	r28
    229c:	08 95       	ret

0000229e <_ZN19class_Display_7_Seg13MotorGetStateEv>:
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool  class_Display_7_Seg::MotorGetState()
{
	if ((_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR & (1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT))==0)
    229e:	87 b1       	in	r24, 0x07	; 7
	}
	else
	{
		return true;
	}
}
    22a0:	82 95       	swap	r24
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	08 95       	ret

000022a6 <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::SetSecondCallBack(void (*SecondCallBack)(void))
{
	//Set call back function 
	_Display_7_Seg.SecondCallBack=SecondCallBack;
    22a6:	70 93 79 03 	sts	0x0379, r23
    22aa:	60 93 78 03 	sts	0x0378, r22
    22ae:	08 95       	ret

000022b0 <_ZN19class_Display_7_Seg13ADCInitializeEh>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::ADCInitialize(uint8_t prescalerFactor)
{
	uint8_t sreg,prescalerLog;
	//save SREG
	sreg=SREG;
    22b0:	2f b7       	in	r18, 0x3f	; 63
	//disable interrupts
	cli();
    22b2:	f8 94       	cli
	//set ADC input with high z
	_FEED_TIMER_DISP_7_ADC_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_ADC_BIT);
    22b4:	45 98       	cbi	0x08, 5	; 8
	_FEED_TIMER_DISP_7_ADC_DIR   &=~(1<<_FEED_TIMER_DISP_7_ADC_BIT);
    22b6:	3d 98       	cbi	0x07, 5	; 7
	//set reference to internal 1.1volt
	ADMUX|=(1<<REFS1)|(1<<REFS0);
    22b8:	80 91 7c 00 	lds	r24, 0x007C
    22bc:	80 6c       	ori	r24, 0xC0	; 192
    22be:	80 93 7c 00 	sts	0x007C, r24
	//no left adjust
	ADMUX&=~(1<<ADLAR);
    22c2:	80 91 7c 00 	lds	r24, 0x007C
    22c6:	8f 7d       	andi	r24, 0xDF	; 223
    22c8:	80 93 7c 00 	sts	0x007C, r24
	//select channel 5
	ADMUX&=~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
    22cc:	80 91 7c 00 	lds	r24, 0x007C
    22d0:	80 7f       	andi	r24, 0xF0	; 240
    22d2:	80 93 7c 00 	sts	0x007C, r24
	ADMUX|= ((0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0));
    22d6:	80 91 7c 00 	lds	r24, 0x007C
    22da:	85 60       	ori	r24, 0x05	; 5
    22dc:	80 93 7c 00 	sts	0x007C, r24
	//first compute log2(prescalerFactor)
	prescalerLog=7;
	if (prescalerFactor==0) prescalerFactor=1;
    22e0:	61 11       	cpse	r22, r1
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x36>
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	87 e0       	ldi	r24, 0x07	; 7
	for(;;)
	{
		//exit if log computed checking bit 7
		if ((prescalerFactor & (1<<7))!=0) break;
    22e8:	67 fd       	sbrc	r22, 7
    22ea:	03 c0       	rjmp	.+6      	; 0x22f2 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x42>
		//shift value
		prescalerFactor<<=1;
    22ec:	66 0f       	add	r22, r22
		//compute log
		prescalerLog--;
    22ee:	81 50       	subi	r24, 0x01	; 1
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
	do {
		
	} while ((ADCSRA & (1<<ADSC))!=0);
	//restore SREG
	SREG=sreg;
    22f0:	fb cf       	rjmp	.-10     	; 0x22e8 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x38>
		prescalerFactor<<=1;
		//compute log
		prescalerLog--;
	}
	//Set prescaler
	if ((prescalerLog & (1<<0))==0)	ADCSRA&=~(1<<ADPS0); else ADCSRA|=(1<<ADPS0);
    22f2:	90 91 7a 00 	lds	r25, 0x007A
    22f6:	80 fd       	sbrc	r24, 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <_ZN19class_Display_7_Seg13ADCInitializeEh+0x4e>
    22fa:	9e 7f       	andi	r25, 0xFE	; 254
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x50>
    22fe:	91 60       	ori	r25, 0x01	; 1
    2300:	90 93 7a 00 	sts	0x007A, r25
	if ((prescalerLog & (1<<1))==0)	ADCSRA&=~(1<<ADPS1); else ADCSRA|=(1<<ADPS1);
    2304:	90 91 7a 00 	lds	r25, 0x007A
    2308:	81 fd       	sbrc	r24, 1
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x60>
    230c:	9d 7f       	andi	r25, 0xFD	; 253
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x62>
    2310:	92 60       	ori	r25, 0x02	; 2
    2312:	90 93 7a 00 	sts	0x007A, r25
	if ((prescalerLog & (1<<2))==0)	ADCSRA&=~(1<<ADPS2); else ADCSRA|=(1<<ADPS2);
    2316:	82 fd       	sbrc	r24, 2
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x72>
    231a:	80 91 7a 00 	lds	r24, 0x007A
    231e:	8b 7f       	andi	r24, 0xFB	; 251
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x78>
    2322:	80 91 7a 00 	lds	r24, 0x007A
    2326:	84 60       	ori	r24, 0x04	; 4
    2328:	80 93 7a 00 	sts	0x007A, r24
	//start first conversion
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
    232c:	80 91 7a 00 	lds	r24, 0x007A
    2330:	80 6c       	ori	r24, 0xC0	; 192
    2332:	80 93 7a 00 	sts	0x007A, r24
	do {
		
	} while ((ADCSRA & (1<<ADSC))!=0);
    2336:	80 91 7a 00 	lds	r24, 0x007A
	if ((prescalerLog & (1<<0))==0)	ADCSRA&=~(1<<ADPS0); else ADCSRA|=(1<<ADPS0);
	if ((prescalerLog & (1<<1))==0)	ADCSRA&=~(1<<ADPS1); else ADCSRA|=(1<<ADPS1);
	if ((prescalerLog & (1<<2))==0)	ADCSRA&=~(1<<ADPS2); else ADCSRA|=(1<<ADPS2);
	//start first conversion
	ADCSRA|=(1<<ADEN)|(1<<ADSC);
	do {
    233a:	86 fd       	sbrc	r24, 6
    233c:	fc cf       	rjmp	.-8      	; 0x2336 <_ZN19class_Display_7_Seg13ADCInitializeEh+0x86>
		
	} while ((ADCSRA & (1<<ADSC))!=0);
	//restore SREG
	SREG=sreg;
    233e:	2f bf       	out	0x3f, r18	; 63
    2340:	08 95       	ret

00002342 <_ZN19class_Display_7_Seg10InitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+


void    class_Display_7_Seg::Initialize()
{
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	ec 01       	movw	r28, r24
    uint8_t sreg;

    //save SREG
    sreg=SREG;
    234a:	1f b7       	in	r17, 0x3f	; 63
	//Initialize KEYS Hardware
	KeysInitialize();
    234c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_ZN19class_Display_7_Seg14KeysInitializeEv>
	//Initialize Display Hardware
	DisplaysInitialize();
    2350:	ce 01       	movw	r24, r28
    2352:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
	//Initialize Motor Hardware
	MotorInitialize();
    2356:	ce 01       	movw	r24, r28
    2358:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN19class_Display_7_Seg15MotorInitializeEv>
	//Initialize Timer 2
	Timer2Initialize();
    235c:	ce 01       	movw	r24, r28
    235e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN19class_Display_7_Seg16Timer2InitializeEv>
	//ADCInitialize
	ADCInitialize(32);
    2362:	60 e2       	ldi	r22, 0x20	; 32
    2364:	ce 01       	movw	r24, r28
    2366:	0e 94 58 11 	call	0x22b0	; 0x22b0 <_ZN19class_Display_7_Seg13ADCInitializeEh>
	//clear Display Buffer
	memset(_Display_7_Seg.Buffer,0,sizeof(_Display_7_Seg.Buffer));
    236a:	10 92 72 03 	sts	0x0372, r1
    236e:	10 92 73 03 	sts	0x0373, r1
    2372:	10 92 74 03 	sts	0x0374, r1
    2376:	10 92 75 03 	sts	0x0375, r1
    //restore SREG state
    SREG=sreg;
    237a:	1f bf       	out	0x3f, r17	; 63
}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	08 95       	ret

00002384 <_ZN19class_Display_7_SegC1Ev>:
//	| @NAME    :  General WIFI IO Initialization  		                            |
//	| @INPUT   :  none                                                              |
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_ZN10class_TimeC1Ev>
{
	//Initialize PID
    Initialize();
    238e:	ce 01       	movw	r24, r28
}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
{
	//Initialize PID
    Initialize();
    2394:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <_ZN19class_Display_7_Seg10InitializeEv>

00002398 <_ZN19class_Display_7_Seg11ADCGetValueEv>:
{
	uint8_t sreg;
	uint16_t adcValue;
	
	//save SREG
	sreg=SREG;
    2398:	2f b7       	in	r18, 0x3f	; 63
	//start conversion
	ADCSRA|=(1<<ADSC);
    239a:	80 91 7a 00 	lds	r24, 0x007A
    239e:	80 64       	ori	r24, 0x40	; 64
    23a0:	80 93 7a 00 	sts	0x007A, r24
	//wait finish
	do{
		
	} while ((ADCSRA & (1<<ADSC))!=0);
    23a4:	80 91 7a 00 	lds	r24, 0x007A
	//save SREG
	sreg=SREG;
	//start conversion
	ADCSRA|=(1<<ADSC);
	//wait finish
	do{
    23a8:	86 fd       	sbrc	r24, 6
    23aa:	fc cf       	rjmp	.-8      	; 0x23a4 <_ZN19class_Display_7_Seg11ADCGetValueEv+0xc>
		
	} while ((ADCSRA & (1<<ADSC))!=0);
	//disable interrupts
	cli();
    23ac:	f8 94       	cli
	//get value
	adcValue=ADC;
    23ae:	80 91 78 00 	lds	r24, 0x0078
    23b2:	90 91 79 00 	lds	r25, 0x0079
	//restore interrupts
	SREG=sreg;
    23b6:	2f bf       	out	0x3f, r18	; 63
	//return value
	return adcValue;
}
    23b8:	08 95       	ret

000023ba <_GLOBAL__sub_I__Display_7_Seg>:
/*
 +--------------------------------------+
 |        STRUCTS               	 	|
 +--------------------------------------+
*/
struct _FEED_TIMER_DISP_7_SEG_Struct
    23ba:	e1 e7       	ldi	r30, 0x71	; 113
    23bc:	f3 e0       	ldi	r31, 0x03	; 3
    23be:	10 82       	st	Z, r1
    23c0:	15 82       	std	Z+5, r1	; 0x05
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	86 83       	std	Z+6, r24	; 0x06
    23c6:	10 86       	std	Z+8, r1	; 0x08
    23c8:	17 82       	std	Z+7, r1	; 0x07
    23ca:	08 95       	ret

000023cc <_Z14_timeInterruptv>:
//	| REMARKS :  to used callback function define a routine following format                |
//  |            callback(uint8_t Hour,uint8_t Minute,uint8_t Second);                      |
//	+---------------------------------------------------------------------------------------+
void   _timeInterrupt()
{
    if (_time.InterruptInUse)
    23cc:	80 91 81 03 	lds	r24, 0x0381
    23d0:	88 23       	and	r24, r24
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <_Z14_timeInterruptv+0x16>
    {
        if (_time.TimeInterruptCallBack!=nullptr) _time.TimeInterruptCallBack();
    23d4:	e0 91 8d 03 	lds	r30, 0x038D
    23d8:	f0 91 8e 03 	lds	r31, 0x038E
    23dc:	30 97       	sbiw	r30, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <_Z14_timeInterruptv+0x16>
    23e0:	09 94       	ijmp
    23e2:	08 95       	ret

000023e4 <_Z10_timeClockv>:
//	|			 this callback function if activated is called 10 times per second			|
//	+---------------------------------------------------------------------------------------+
void    _timeClock()
{
    //check if on
    if (_time.TimeInUse)
    23e4:	80 91 80 03 	lds	r24, 0x0380
    23e8:	88 23       	and	r24, r24
    23ea:	09 f4       	brne	.+2      	; 0x23ee <_Z10_timeClockv+0xa>
    23ec:	4d c0       	rjmp	.+154    	; 0x2488 <_Z10_timeClockv+0xa4>
    {
        //Time to pump Time?
        _time.Milliseconds++;
    23ee:	80 91 7d 03 	lds	r24, 0x037D
    23f2:	90 91 7e 03 	lds	r25, 0x037E
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	90 93 7e 03 	sts	0x037E, r25
    23fc:	80 93 7d 03 	sts	0x037D, r24
        if (_time.Milliseconds<TIME_TIMER_FREQ/10) return;
    2400:	80 91 7d 03 	lds	r24, 0x037D
    2404:	90 91 7e 03 	lds	r25, 0x037E
    2408:	8d 37       	cpi	r24, 0x7D	; 125
    240a:	91 05       	cpc	r25, r1
    240c:	e8 f1       	brcs	.+122    	; 0x2488 <_Z10_timeClockv+0xa4>
        //clear timer pump
        _time.Milliseconds=0;
    240e:	10 92 7e 03 	sts	0x037E, r1
    2412:	10 92 7d 03 	sts	0x037D, r1
        //tenth of seconds
        _time.Tenth++;
    2416:	80 91 7f 03 	lds	r24, 0x037F
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	80 93 7f 03 	sts	0x037F, r24
        if (_time.Tenth>9)
    2420:	80 91 7f 03 	lds	r24, 0x037F
    2424:	8a 30       	cpi	r24, 0x0A	; 10
    2426:	18 f1       	brcs	.+70     	; 0x246e <_Z10_timeClockv+0x8a>
        {
            _time.Tenth=0;
    2428:	10 92 7f 03 	sts	0x037F, r1
            //yes, pump Seconds
            _time.Second++;
    242c:	80 91 7c 03 	lds	r24, 0x037C
    2430:	8f 5f       	subi	r24, 0xFF	; 255
    2432:	80 93 7c 03 	sts	0x037C, r24
            if (_time.Second>59)
    2436:	80 91 7c 03 	lds	r24, 0x037C
    243a:	8c 33       	cpi	r24, 0x3C	; 60
    243c:	c0 f0       	brcs	.+48     	; 0x246e <_Z10_timeClockv+0x8a>
            {
                //yes, pump Minutes clear second
                _time.Second=0;
    243e:	10 92 7c 03 	sts	0x037C, r1
                _time.Minute++;
    2442:	80 91 7b 03 	lds	r24, 0x037B
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	80 93 7b 03 	sts	0x037B, r24
                if (_time.Minute>59)
    244c:	80 91 7b 03 	lds	r24, 0x037B
    2450:	8c 33       	cpi	r24, 0x3C	; 60
    2452:	68 f0       	brcs	.+26     	; 0x246e <_Z10_timeClockv+0x8a>
                {
                    //yes, pump Hours clear Minute
                    _time.Minute=0;
    2454:	10 92 7b 03 	sts	0x037B, r1
                    _time.Hour++;
    2458:	80 91 7a 03 	lds	r24, 0x037A
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 7a 03 	sts	0x037A, r24
                    if (_time.Hour>23) _time.Hour=0;
    2462:	80 91 7a 03 	lds	r24, 0x037A
    2466:	88 31       	cpi	r24, 0x18	; 24
    2468:	10 f0       	brcs	.+4      	; 0x246e <_Z10_timeClockv+0x8a>
    246a:	10 92 7a 03 	sts	0x037A, r1
                }
            }
        }
        //callback function giving to defined routine parms hour,min,second (updated each second)
        if (_time.TimeClockCallBack!=nullptr) _time.TimeClockCallBack(_time.Hour,_time.Minute,_time.Second);
    246e:	e0 91 8b 03 	lds	r30, 0x038B
    2472:	f0 91 8c 03 	lds	r31, 0x038C
    2476:	30 97       	sbiw	r30, 0x00	; 0
    2478:	39 f0       	breq	.+14     	; 0x2488 <_Z10_timeClockv+0xa4>
    247a:	40 91 7c 03 	lds	r20, 0x037C
    247e:	60 91 7b 03 	lds	r22, 0x037B
    2482:	80 91 7a 03 	lds	r24, 0x037A
    2486:	09 94       	ijmp
    2488:	08 95       	ret

0000248a <_ZN10class_Time10InitializeEv>:
void class_Time::Initialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    248a:	9f b7       	in	r25, 0x3f	; 63
    //Disable Interrupts
    cli();
    248c:	f8 94       	cli
		TCNT0=0;
		//enable timer compare A interrupt
		TIMSK|=(1<<OCIE0);
	#elif defined(_AVR_IOM328P_H_)
		//WGM02=0;WGM01=1;WGM00=0 MODE CTC
		TCCR0A&=~(1<<WGM00);
    248e:	84 b5       	in	r24, 0x24	; 36
    2490:	8e 7f       	andi	r24, 0xFE	; 254
    2492:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<WGM01);
    2494:	84 b5       	in	r24, 0x24	; 36
    2496:	82 60       	ori	r24, 0x02	; 2
    2498:	84 bd       	out	0x24, r24	; 36
		TCCR0B&=~(1<<WGM02);
    249a:	85 b5       	in	r24, 0x25	; 37
    249c:	87 7f       	andi	r24, 0xF7	; 247
    249e:	85 bd       	out	0x25, r24	; 37
		//CS02=0;CS01=1;CS00=0 clock divided by 8 altered in this software normal 256
		TCCR0B|=(1<<CS01);
    24a0:	85 b5       	in	r24, 0x25	; 37
    24a2:	82 60       	ori	r24, 0x02	; 2
    24a4:	85 bd       	out	0x25, r24	; 37
		TCCR0B&=~((1<<CS02)|(1<<CS00));
    24a6:	85 b5       	in	r24, 0x25	; 37
    24a8:	8a 7f       	andi	r24, 0xFA	; 250
    24aa:	85 bd       	out	0x25, r24	; 37
		//program divisor
		OCR0A=(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ)-1;
    24ac:	83 e6       	ldi	r24, 0x63	; 99
    24ae:	87 bd       	out	0x27, r24	; 39
		TCNT0=0;
    24b0:	16 bc       	out	0x26, r1	; 38
		//enable timer compare A interrupt
		TIMSK0|=(1<<OCIE0A);
    24b2:	ee e6       	ldi	r30, 0x6E	; 110
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	82 60       	ori	r24, 0x02	; 2
    24ba:	80 83       	st	Z, r24
	#elif defined(_AVR_IOM328P_H_)
	#elif defined(_AVR_IOM8_H_)
	#endif
#endif		
    //Restore Interrupts
    SREG=sreg;
    24bc:	9f bf       	out	0x3f, r25	; 63
    24be:	08 95       	ret

000024c0 <_ZN10class_TimeC1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_Time::class_Time()
    24c0:	cf 93       	push	r28
{
	unsigned char sreg;

    //save SREG
	sreg=SREG;
    24c2:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
	cli();
    24c4:	f8 94       	cli
    //Check if already Initialized
    if (_time.Initialized==false)
    24c6:	20 91 82 03 	lds	r18, 0x0382
    24ca:	21 11       	cpse	r18, r1
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <_ZN10class_TimeC1Ev+0x18>
    {
        //set initialized
        _time.Initialized=true;
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	20 93 82 03 	sts	0x0382, r18
        //Initialize
        Initialize();
    24d4:	0e 94 45 12 	call	0x248a	; 0x248a <_ZN10class_Time10InitializeEv>
    }
    
    //Restore SREG state
	SREG=sreg;
    24d8:	cf bf       	out	0x3f, r28	; 63
}
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <__vector_14>:
		    _timeInterrupt();
		    _timeClock();
        }
    #elif defined(_AVR_IOM328P_H_)
        ISR(TIMER0_COMPA_vect)
        {
    24de:	1f 92       	push	r1
    24e0:	0f 92       	push	r0
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	0f 92       	push	r0
    24e6:	11 24       	eor	r1, r1
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
		    //enable interrupts to permit that other pending interrupts is executed more fast as possible
		    sei();		
    2500:	78 94       	sei
            _time.TimerTick+=TIME_1MS;
    2502:	ea e7       	ldi	r30, 0x7A	; 122
    2504:	f3 e0       	ldi	r31, 0x03	; 3
    2506:	21 85       	ldd	r18, Z+9	; 0x09
    2508:	32 85       	ldd	r19, Z+10	; 0x0a
    250a:	43 85       	ldd	r20, Z+11	; 0x0b
    250c:	54 85       	ldd	r21, Z+12	; 0x0c
    250e:	65 85       	ldd	r22, Z+13	; 0x0d
    2510:	76 85       	ldd	r23, Z+14	; 0x0e
    2512:	87 85       	ldd	r24, Z+15	; 0x0f
    2514:	90 89       	ldd	r25, Z+16	; 0x10
    2516:	24 53       	subi	r18, 0x34	; 52
    2518:	33 43       	sbci	r19, 0x33	; 51
    251a:	43 43       	sbci	r20, 0x33	; 51
    251c:	5f 4f       	sbci	r21, 0xFF	; 255
    251e:	6f 4f       	sbci	r22, 0xFF	; 255
    2520:	7f 4f       	sbci	r23, 0xFF	; 255
    2522:	8f 4f       	sbci	r24, 0xFF	; 255
    2524:	9f 4f       	sbci	r25, 0xFF	; 255
    2526:	21 87       	std	Z+9, r18	; 0x09
    2528:	32 87       	std	Z+10, r19	; 0x0a
    252a:	43 87       	std	Z+11, r20	; 0x0b
    252c:	54 87       	std	Z+12, r21	; 0x0c
    252e:	65 87       	std	Z+13, r22	; 0x0d
    2530:	76 87       	std	Z+14, r23	; 0x0e
    2532:	87 87       	std	Z+15, r24	; 0x0f
    2534:	90 8b       	std	Z+16, r25	; 0x10
		    _timeInterrupt();
    2536:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_Z14_timeInterruptv>
            _timeClock();
    253a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <_Z10_timeClockv>
        }
    253e:	ff 91       	pop	r31
    2540:	ef 91       	pop	r30
    2542:	bf 91       	pop	r27
    2544:	af 91       	pop	r26
    2546:	9f 91       	pop	r25
    2548:	8f 91       	pop	r24
    254a:	7f 91       	pop	r23
    254c:	6f 91       	pop	r22
    254e:	5f 91       	pop	r21
    2550:	4f 91       	pop	r20
    2552:	3f 91       	pop	r19
    2554:	2f 91       	pop	r18
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <_ZN10class_Time8DelayMsSEj>:
					"sbiw r24,1			\t\n"	\
					"brne _delayMsS10	\t\n"	\
					:"+r" (t1Ms)
					:
					:"r24","r25"
					);
    2560:	4a ef       	ldi	r20, 0xFA	; 250
    2562:	50 e0       	ldi	r21, 0x00	; 0
    //  time used by external while loop not computed
    //  but is used 7 clocks each millisecond loop this yields
    //  7000 clock more than necessary. using a crystal of 16Mhz
    //  performs a error ~0.0004% in one second
    //----------------------------------------------------------------------
	while (time!=0)
    2564:	61 15       	cp	r22, r1
    2566:	71 05       	cpc	r23, r1
    2568:	39 f0       	breq	.+14     	; 0x2578 <_delayMsS10+0xa>
					"sbiw r24,1			\t\n"	\
					"brne _delayMsS10	\t\n"	\
					:"+r" (t1Ms)
					:
					:"r24","r25"
					);
    256a:	9a 01       	movw	r18, r20
    256c:	c9 01       	movw	r24, r18

0000256e <_delayMsS10>:
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <_delayMsS10>
//		do {
//			asm("nop");
//			t--;
//		} while (t!=0);
		time--;
    2572:	61 50       	subi	r22, 0x01	; 1
    2574:	71 09       	sbc	r23, r1
    2576:	f6 cf       	rjmp	.-20     	; 0x2564 <_ZN10class_Time8DelayMsSEj+0x4>
	}
}
    2578:	08 95       	ret

0000257a <_ZN10class_Time15GetMillisecondsEv>:
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetMilliseconds()
{
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
    257e:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    2580:	60 91 86 03 	lds	r22, 0x0386
    2584:	70 91 87 03 	lds	r23, 0x0387
    2588:	80 91 88 03 	lds	r24, 0x0388
    258c:	90 91 89 03 	lds	r25, 0x0389
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
            tmp1=GetTimeTick();
            sei();
    2590:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    2592:	00 91 86 03 	lds	r16, 0x0386
    2596:	10 91 87 03 	lds	r17, 0x0387
    259a:	20 91 88 03 	lds	r18, 0x0388
    259e:	30 91 89 03 	lds	r19, 0x0389

uint32_t class_Time::GetMilliseconds()
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
    25a2:	60 17       	cp	r22, r16
    25a4:	71 07       	cpc	r23, r17
    25a6:	82 07       	cpc	r24, r18
    25a8:	93 07       	cpc	r25, r19
    25aa:	49 f7       	brne	.-46     	; 0x257e <_ZN10class_Time15GetMillisecondsEv+0x4>
            sei();
            tmp2=GetTimeTick();
        } while (tmp1!=tmp2);
        //return tick value
        return tmp2;
}
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	08 95       	ret

000025b2 <_ZN10class_Time10SetElapsedEPm>:
//	| INPUT   :  -> tickTimerVariable					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::SetElapsed(uint32_t * timeVariable)
{
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	eb 01       	movw	r28, r22
	*timeVariable=GetMilliseconds();
    25b8:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN10class_Time15GetMillisecondsEv>
    25bc:	68 83       	st	Y, r22
    25be:	79 83       	std	Y+1, r23	; 0x01
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	9b 83       	std	Y+3, r25	; 0x03
}
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	08 95       	ret

000025ca <_ZN10class_Time10GetElapsedEPm>:
//	| INPUT   :  * tickTimerVariable					                            |
//	| OUTPUT  :  Elapsed time in ticks					                            |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
uint32_t class_Time::GetElapsed(uint32_t * timeVariable)
{
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	eb 01       	movw	r28, r22
	return (GetMilliseconds()-*timeVariable);				//Get difference between actual tick and save tick
    25d4:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN10class_Time15GetMillisecondsEv>
    25d8:	08 81       	ld	r16, Y
    25da:	19 81       	ldd	r17, Y+1	; 0x01
    25dc:	2a 81       	ldd	r18, Y+2	; 0x02
    25de:	3b 81       	ldd	r19, Y+3	; 0x03
    25e0:	60 1b       	sub	r22, r16
    25e2:	71 0b       	sbc	r23, r17
    25e4:	82 0b       	sbc	r24, r18
    25e6:	93 0b       	sbc	r25, r19
}
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	1f 91       	pop	r17
    25ee:	0f 91       	pop	r16
    25f0:	08 95       	ret

000025f2 <_ZN10class_Time8DelayMsIEm>:
//	| INPUT   :  timeMs in milliseconds					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::DelayMsI(uint32_t timeMs)
{
    25f2:	8f 92       	push	r8
    25f4:	9f 92       	push	r9
    25f6:	af 92       	push	r10
    25f8:	bf 92       	push	r11
    25fa:	cf 92       	push	r12
    25fc:	df 92       	push	r13
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	ec 01       	movw	r28, r24
    260c:	6a 01       	movw	r12, r20
    260e:	7b 01       	movw	r14, r22
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
    2610:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN10class_Time15GetMillisecondsEv>
    2614:	4b 01       	movw	r8, r22
    2616:	5c 01       	movw	r10, r24
	do{
		tmp2=GetMilliseconds();
    2618:	ce 01       	movw	r24, r28
    261a:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN10class_Time15GetMillisecondsEv>
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
    261e:	8b 01       	movw	r16, r22
    2620:	9c 01       	movw	r18, r24
    2622:	08 19       	sub	r16, r8
    2624:	19 09       	sbc	r17, r9
    2626:	2a 09       	sbc	r18, r10
    2628:	3b 09       	sbc	r19, r11
void	class_Time::DelayMsI(uint32_t timeMs)
{
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
	do{
    262a:	0c 15       	cp	r16, r12
    262c:	1d 05       	cpc	r17, r13
    262e:	2e 05       	cpc	r18, r14
    2630:	3f 05       	cpc	r19, r15
    2632:	90 f3       	brcs	.-28     	; 0x2618 <_ZN10class_Time8DelayMsIEm+0x26>
		tmp2=GetMilliseconds();
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	08 95       	ret

0000264e <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>:
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetTimeInterruptCallback(void (*TimeInterruptCallback)(void))
{
	//avoid routines that get more than 720uS long to execute
	_time.TimeInterruptCallBack=TimeInterruptCallback;
    264e:	70 93 8e 03 	sts	0x038E, r23
    2652:	60 93 8d 03 	sts	0x038D, r22
    2656:	08 95       	ret

00002658 <_ZN10class_Time17SetInterruptStateEb>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetInterruptState(bool inUse=false)
{
	_time.InterruptInUse=inUse;
    2658:	60 93 81 03 	sts	0x0381, r22
    265c:	08 95       	ret

0000265e <__divmodsi4>:
    265e:	05 2e       	mov	r0, r21
    2660:	97 fb       	bst	r25, 7
    2662:	1e f4       	brtc	.+6      	; 0x266a <__divmodsi4+0xc>
    2664:	00 94       	com	r0
    2666:	0e 94 46 13 	call	0x268c	; 0x268c <__negsi2>
    266a:	57 fd       	sbrc	r21, 7
    266c:	07 d0       	rcall	.+14     	; 0x267c <__divmodsi4_neg2>
    266e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__udivmodsi4>
    2672:	07 fc       	sbrc	r0, 7
    2674:	03 d0       	rcall	.+6      	; 0x267c <__divmodsi4_neg2>
    2676:	4e f4       	brtc	.+18     	; 0x268a <__divmodsi4_exit>
    2678:	0c 94 46 13 	jmp	0x268c	; 0x268c <__negsi2>

0000267c <__divmodsi4_neg2>:
    267c:	50 95       	com	r21
    267e:	40 95       	com	r20
    2680:	30 95       	com	r19
    2682:	21 95       	neg	r18
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	4f 4f       	sbci	r20, 0xFF	; 255
    2688:	5f 4f       	sbci	r21, 0xFF	; 255

0000268a <__divmodsi4_exit>:
    268a:	08 95       	ret

0000268c <__negsi2>:
    268c:	90 95       	com	r25
    268e:	80 95       	com	r24
    2690:	70 95       	com	r23
    2692:	61 95       	neg	r22
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	8f 4f       	sbci	r24, 0xFF	; 255
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	08 95       	ret

0000269c <__umulhisi3>:
    269c:	a2 9f       	mul	r26, r18
    269e:	b0 01       	movw	r22, r0
    26a0:	b3 9f       	mul	r27, r19
    26a2:	c0 01       	movw	r24, r0
    26a4:	a3 9f       	mul	r26, r19
    26a6:	70 0d       	add	r23, r0
    26a8:	81 1d       	adc	r24, r1
    26aa:	11 24       	eor	r1, r1
    26ac:	91 1d       	adc	r25, r1
    26ae:	b2 9f       	mul	r27, r18
    26b0:	70 0d       	add	r23, r0
    26b2:	81 1d       	adc	r24, r1
    26b4:	11 24       	eor	r1, r1
    26b6:	91 1d       	adc	r25, r1
    26b8:	08 95       	ret

000026ba <__muluhisi3>:
    26ba:	0e 94 4e 13 	call	0x269c	; 0x269c <__umulhisi3>
    26be:	a5 9f       	mul	r26, r21
    26c0:	90 0d       	add	r25, r0
    26c2:	b4 9f       	mul	r27, r20
    26c4:	90 0d       	add	r25, r0
    26c6:	a4 9f       	mul	r26, r20
    26c8:	80 0d       	add	r24, r0
    26ca:	91 1d       	adc	r25, r1
    26cc:	11 24       	eor	r1, r1
    26ce:	08 95       	ret

000026d0 <__udivmodsi4>:
    26d0:	a1 e2       	ldi	r26, 0x21	; 33
    26d2:	1a 2e       	mov	r1, r26
    26d4:	aa 1b       	sub	r26, r26
    26d6:	bb 1b       	sub	r27, r27
    26d8:	fd 01       	movw	r30, r26
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <__udivmodsi4_ep>

000026dc <__udivmodsi4_loop>:
    26dc:	aa 1f       	adc	r26, r26
    26de:	bb 1f       	adc	r27, r27
    26e0:	ee 1f       	adc	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	a2 17       	cp	r26, r18
    26e6:	b3 07       	cpc	r27, r19
    26e8:	e4 07       	cpc	r30, r20
    26ea:	f5 07       	cpc	r31, r21
    26ec:	20 f0       	brcs	.+8      	; 0x26f6 <__udivmodsi4_ep>
    26ee:	a2 1b       	sub	r26, r18
    26f0:	b3 0b       	sbc	r27, r19
    26f2:	e4 0b       	sbc	r30, r20
    26f4:	f5 0b       	sbc	r31, r21

000026f6 <__udivmodsi4_ep>:
    26f6:	66 1f       	adc	r22, r22
    26f8:	77 1f       	adc	r23, r23
    26fa:	88 1f       	adc	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	1a 94       	dec	r1
    2700:	69 f7       	brne	.-38     	; 0x26dc <__udivmodsi4_loop>
    2702:	60 95       	com	r22
    2704:	70 95       	com	r23
    2706:	80 95       	com	r24
    2708:	90 95       	com	r25
    270a:	9b 01       	movw	r18, r22
    270c:	ac 01       	movw	r20, r24
    270e:	bd 01       	movw	r22, r26
    2710:	cf 01       	movw	r24, r30
    2712:	08 95       	ret

00002714 <__tablejump2__>:
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	05 90       	lpm	r0, Z+
    271a:	f4 91       	lpm	r31, Z
    271c:	e0 2d       	mov	r30, r0
    271e:	09 94       	ijmp

00002720 <memcmp>:
    2720:	fb 01       	movw	r30, r22
    2722:	dc 01       	movw	r26, r24
    2724:	04 c0       	rjmp	.+8      	; 0x272e <memcmp+0xe>
    2726:	8d 91       	ld	r24, X+
    2728:	01 90       	ld	r0, Z+
    272a:	80 19       	sub	r24, r0
    272c:	21 f4       	brne	.+8      	; 0x2736 <memcmp+0x16>
    272e:	41 50       	subi	r20, 0x01	; 1
    2730:	50 40       	sbci	r21, 0x00	; 0
    2732:	c8 f7       	brcc	.-14     	; 0x2726 <memcmp+0x6>
    2734:	88 1b       	sub	r24, r24
    2736:	99 0b       	sbc	r25, r25
    2738:	08 95       	ret

0000273a <sprintf>:
    273a:	ae e0       	ldi	r26, 0x0E	; 14
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 ea       	ldi	r30, 0xA3	; 163
    2740:	f3 e1       	ldi	r31, 0x13	; 19
    2742:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0x1c>
    2746:	0d 89       	ldd	r16, Y+21	; 0x15
    2748:	1e 89       	ldd	r17, Y+22	; 0x16
    274a:	86 e0       	ldi	r24, 0x06	; 6
    274c:	8c 83       	std	Y+4, r24	; 0x04
    274e:	1a 83       	std	Y+2, r17	; 0x02
    2750:	09 83       	std	Y+1, r16	; 0x01
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	9f e7       	ldi	r25, 0x7F	; 127
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	ae 01       	movw	r20, r28
    275c:	47 5e       	subi	r20, 0xE7	; 231
    275e:	5f 4f       	sbci	r21, 0xFF	; 255
    2760:	6f 89       	ldd	r22, Y+23	; 0x17
    2762:	78 8d       	ldd	r23, Y+24	; 0x18
    2764:	ce 01       	movw	r24, r28
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	0e 94 c0 13 	call	0x2780	; 0x2780 <vfprintf>
    276c:	2f 81       	ldd	r18, Y+7	; 0x07
    276e:	38 85       	ldd	r19, Y+8	; 0x08
    2770:	f8 01       	movw	r30, r16
    2772:	e2 0f       	add	r30, r18
    2774:	f3 1f       	adc	r31, r19
    2776:	10 82       	st	Z, r1
    2778:	2e 96       	adiw	r28, 0x0e	; 14
    277a:	e4 e0       	ldi	r30, 0x04	; 4
    277c:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0x1c>

00002780 <vfprintf>:
    2780:	ac e0       	ldi	r26, 0x0C	; 12
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e6 ec       	ldi	r30, 0xC6	; 198
    2786:	f3 e1       	ldi	r31, 0x13	; 19
    2788:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__>
    278c:	7c 01       	movw	r14, r24
    278e:	6b 01       	movw	r12, r22
    2790:	8a 01       	movw	r16, r20
    2792:	fc 01       	movw	r30, r24
    2794:	17 82       	std	Z+7, r1	; 0x07
    2796:	16 82       	std	Z+6, r1	; 0x06
    2798:	83 81       	ldd	r24, Z+3	; 0x03
    279a:	81 ff       	sbrs	r24, 1
    279c:	bd c1       	rjmp	.+890    	; 0x2b18 <vfprintf+0x398>
    279e:	ce 01       	movw	r24, r28
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	4c 01       	movw	r8, r24
    27a4:	f7 01       	movw	r30, r14
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	f6 01       	movw	r30, r12
    27aa:	93 fd       	sbrc	r25, 3
    27ac:	85 91       	lpm	r24, Z+
    27ae:	93 ff       	sbrs	r25, 3
    27b0:	81 91       	ld	r24, Z+
    27b2:	6f 01       	movw	r12, r30
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <vfprintf+0x3a>
    27b8:	ab c1       	rjmp	.+854    	; 0x2b10 <vfprintf+0x390>
    27ba:	85 32       	cpi	r24, 0x25	; 37
    27bc:	39 f4       	brne	.+14     	; 0x27cc <vfprintf+0x4c>
    27be:	93 fd       	sbrc	r25, 3
    27c0:	85 91       	lpm	r24, Z+
    27c2:	93 ff       	sbrs	r25, 3
    27c4:	81 91       	ld	r24, Z+
    27c6:	6f 01       	movw	r12, r30
    27c8:	85 32       	cpi	r24, 0x25	; 37
    27ca:	29 f4       	brne	.+10     	; 0x27d6 <vfprintf+0x56>
    27cc:	b7 01       	movw	r22, r14
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    27d4:	e7 cf       	rjmp	.-50     	; 0x27a4 <vfprintf+0x24>
    27d6:	51 2c       	mov	r5, r1
    27d8:	31 2c       	mov	r3, r1
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	20 32       	cpi	r18, 0x20	; 32
    27de:	a0 f4       	brcc	.+40     	; 0x2808 <vfprintf+0x88>
    27e0:	8b 32       	cpi	r24, 0x2B	; 43
    27e2:	69 f0       	breq	.+26     	; 0x27fe <vfprintf+0x7e>
    27e4:	30 f4       	brcc	.+12     	; 0x27f2 <vfprintf+0x72>
    27e6:	80 32       	cpi	r24, 0x20	; 32
    27e8:	59 f0       	breq	.+22     	; 0x2800 <vfprintf+0x80>
    27ea:	83 32       	cpi	r24, 0x23	; 35
    27ec:	69 f4       	brne	.+26     	; 0x2808 <vfprintf+0x88>
    27ee:	20 61       	ori	r18, 0x10	; 16
    27f0:	2c c0       	rjmp	.+88     	; 0x284a <vfprintf+0xca>
    27f2:	8d 32       	cpi	r24, 0x2D	; 45
    27f4:	39 f0       	breq	.+14     	; 0x2804 <vfprintf+0x84>
    27f6:	80 33       	cpi	r24, 0x30	; 48
    27f8:	39 f4       	brne	.+14     	; 0x2808 <vfprintf+0x88>
    27fa:	21 60       	ori	r18, 0x01	; 1
    27fc:	26 c0       	rjmp	.+76     	; 0x284a <vfprintf+0xca>
    27fe:	22 60       	ori	r18, 0x02	; 2
    2800:	24 60       	ori	r18, 0x04	; 4
    2802:	23 c0       	rjmp	.+70     	; 0x284a <vfprintf+0xca>
    2804:	28 60       	ori	r18, 0x08	; 8
    2806:	21 c0       	rjmp	.+66     	; 0x284a <vfprintf+0xca>
    2808:	27 fd       	sbrc	r18, 7
    280a:	27 c0       	rjmp	.+78     	; 0x285a <vfprintf+0xda>
    280c:	30 ed       	ldi	r19, 0xD0	; 208
    280e:	38 0f       	add	r19, r24
    2810:	3a 30       	cpi	r19, 0x0A	; 10
    2812:	78 f4       	brcc	.+30     	; 0x2832 <vfprintf+0xb2>
    2814:	26 ff       	sbrs	r18, 6
    2816:	06 c0       	rjmp	.+12     	; 0x2824 <vfprintf+0xa4>
    2818:	fa e0       	ldi	r31, 0x0A	; 10
    281a:	5f 9e       	mul	r5, r31
    281c:	30 0d       	add	r19, r0
    281e:	11 24       	eor	r1, r1
    2820:	53 2e       	mov	r5, r19
    2822:	13 c0       	rjmp	.+38     	; 0x284a <vfprintf+0xca>
    2824:	8a e0       	ldi	r24, 0x0A	; 10
    2826:	38 9e       	mul	r3, r24
    2828:	30 0d       	add	r19, r0
    282a:	11 24       	eor	r1, r1
    282c:	33 2e       	mov	r3, r19
    282e:	20 62       	ori	r18, 0x20	; 32
    2830:	0c c0       	rjmp	.+24     	; 0x284a <vfprintf+0xca>
    2832:	8e 32       	cpi	r24, 0x2E	; 46
    2834:	21 f4       	brne	.+8      	; 0x283e <vfprintf+0xbe>
    2836:	26 fd       	sbrc	r18, 6
    2838:	6b c1       	rjmp	.+726    	; 0x2b10 <vfprintf+0x390>
    283a:	20 64       	ori	r18, 0x40	; 64
    283c:	06 c0       	rjmp	.+12     	; 0x284a <vfprintf+0xca>
    283e:	8c 36       	cpi	r24, 0x6C	; 108
    2840:	11 f4       	brne	.+4      	; 0x2846 <vfprintf+0xc6>
    2842:	20 68       	ori	r18, 0x80	; 128
    2844:	02 c0       	rjmp	.+4      	; 0x284a <vfprintf+0xca>
    2846:	88 36       	cpi	r24, 0x68	; 104
    2848:	41 f4       	brne	.+16     	; 0x285a <vfprintf+0xda>
    284a:	f6 01       	movw	r30, r12
    284c:	93 fd       	sbrc	r25, 3
    284e:	85 91       	lpm	r24, Z+
    2850:	93 ff       	sbrs	r25, 3
    2852:	81 91       	ld	r24, Z+
    2854:	6f 01       	movw	r12, r30
    2856:	81 11       	cpse	r24, r1
    2858:	c1 cf       	rjmp	.-126    	; 0x27dc <vfprintf+0x5c>
    285a:	98 2f       	mov	r25, r24
    285c:	9f 7d       	andi	r25, 0xDF	; 223
    285e:	95 54       	subi	r25, 0x45	; 69
    2860:	93 30       	cpi	r25, 0x03	; 3
    2862:	28 f4       	brcc	.+10     	; 0x286e <vfprintf+0xee>
    2864:	0c 5f       	subi	r16, 0xFC	; 252
    2866:	1f 4f       	sbci	r17, 0xFF	; 255
    2868:	ff e3       	ldi	r31, 0x3F	; 63
    286a:	f9 83       	std	Y+1, r31	; 0x01
    286c:	0d c0       	rjmp	.+26     	; 0x2888 <vfprintf+0x108>
    286e:	83 36       	cpi	r24, 0x63	; 99
    2870:	31 f0       	breq	.+12     	; 0x287e <vfprintf+0xfe>
    2872:	83 37       	cpi	r24, 0x73	; 115
    2874:	71 f0       	breq	.+28     	; 0x2892 <vfprintf+0x112>
    2876:	83 35       	cpi	r24, 0x53	; 83
    2878:	09 f0       	breq	.+2      	; 0x287c <vfprintf+0xfc>
    287a:	5b c0       	rjmp	.+182    	; 0x2932 <vfprintf+0x1b2>
    287c:	22 c0       	rjmp	.+68     	; 0x28c2 <vfprintf+0x142>
    287e:	f8 01       	movw	r30, r16
    2880:	80 81       	ld	r24, Z
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	0e 5f       	subi	r16, 0xFE	; 254
    2886:	1f 4f       	sbci	r17, 0xFF	; 255
    2888:	44 24       	eor	r4, r4
    288a:	43 94       	inc	r4
    288c:	51 2c       	mov	r5, r1
    288e:	54 01       	movw	r10, r8
    2890:	15 c0       	rjmp	.+42     	; 0x28bc <vfprintf+0x13c>
    2892:	38 01       	movw	r6, r16
    2894:	f2 e0       	ldi	r31, 0x02	; 2
    2896:	6f 0e       	add	r6, r31
    2898:	71 1c       	adc	r7, r1
    289a:	f8 01       	movw	r30, r16
    289c:	a0 80       	ld	r10, Z
    289e:	b1 80       	ldd	r11, Z+1	; 0x01
    28a0:	26 ff       	sbrs	r18, 6
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <vfprintf+0x12a>
    28a4:	65 2d       	mov	r22, r5
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <vfprintf+0x12e>
    28aa:	6f ef       	ldi	r22, 0xFF	; 255
    28ac:	7f ef       	ldi	r23, 0xFF	; 255
    28ae:	c5 01       	movw	r24, r10
    28b0:	2c 87       	std	Y+12, r18	; 0x0c
    28b2:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <strnlen>
    28b6:	2c 01       	movw	r4, r24
    28b8:	83 01       	movw	r16, r6
    28ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    28bc:	2f 77       	andi	r18, 0x7F	; 127
    28be:	22 2e       	mov	r2, r18
    28c0:	17 c0       	rjmp	.+46     	; 0x28f0 <vfprintf+0x170>
    28c2:	38 01       	movw	r6, r16
    28c4:	f2 e0       	ldi	r31, 0x02	; 2
    28c6:	6f 0e       	add	r6, r31
    28c8:	71 1c       	adc	r7, r1
    28ca:	f8 01       	movw	r30, r16
    28cc:	a0 80       	ld	r10, Z
    28ce:	b1 80       	ldd	r11, Z+1	; 0x01
    28d0:	26 ff       	sbrs	r18, 6
    28d2:	03 c0       	rjmp	.+6      	; 0x28da <vfprintf+0x15a>
    28d4:	65 2d       	mov	r22, r5
    28d6:	70 e0       	ldi	r23, 0x00	; 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x15e>
    28da:	6f ef       	ldi	r22, 0xFF	; 255
    28dc:	7f ef       	ldi	r23, 0xFF	; 255
    28de:	c5 01       	movw	r24, r10
    28e0:	2c 87       	std	Y+12, r18	; 0x0c
    28e2:	0e 94 92 15 	call	0x2b24	; 0x2b24 <strnlen_P>
    28e6:	2c 01       	movw	r4, r24
    28e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    28ea:	20 68       	ori	r18, 0x80	; 128
    28ec:	22 2e       	mov	r2, r18
    28ee:	83 01       	movw	r16, r6
    28f0:	23 fc       	sbrc	r2, 3
    28f2:	1b c0       	rjmp	.+54     	; 0x292a <vfprintf+0x1aa>
    28f4:	83 2d       	mov	r24, r3
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	48 16       	cp	r4, r24
    28fa:	59 06       	cpc	r5, r25
    28fc:	b0 f4       	brcc	.+44     	; 0x292a <vfprintf+0x1aa>
    28fe:	b7 01       	movw	r22, r14
    2900:	80 e2       	ldi	r24, 0x20	; 32
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2908:	3a 94       	dec	r3
    290a:	f4 cf       	rjmp	.-24     	; 0x28f4 <vfprintf+0x174>
    290c:	f5 01       	movw	r30, r10
    290e:	27 fc       	sbrc	r2, 7
    2910:	85 91       	lpm	r24, Z+
    2912:	27 fe       	sbrs	r2, 7
    2914:	81 91       	ld	r24, Z+
    2916:	5f 01       	movw	r10, r30
    2918:	b7 01       	movw	r22, r14
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2920:	31 10       	cpse	r3, r1
    2922:	3a 94       	dec	r3
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	4f 1a       	sub	r4, r31
    2928:	51 08       	sbc	r5, r1
    292a:	41 14       	cp	r4, r1
    292c:	51 04       	cpc	r5, r1
    292e:	71 f7       	brne	.-36     	; 0x290c <vfprintf+0x18c>
    2930:	e5 c0       	rjmp	.+458    	; 0x2afc <vfprintf+0x37c>
    2932:	84 36       	cpi	r24, 0x64	; 100
    2934:	11 f0       	breq	.+4      	; 0x293a <vfprintf+0x1ba>
    2936:	89 36       	cpi	r24, 0x69	; 105
    2938:	39 f5       	brne	.+78     	; 0x2988 <vfprintf+0x208>
    293a:	f8 01       	movw	r30, r16
    293c:	27 ff       	sbrs	r18, 7
    293e:	07 c0       	rjmp	.+14     	; 0x294e <vfprintf+0x1ce>
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	0c 5f       	subi	r16, 0xFC	; 252
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	08 c0       	rjmp	.+16     	; 0x295e <vfprintf+0x1de>
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	07 2e       	mov	r0, r23
    2954:	00 0c       	add	r0, r0
    2956:	88 0b       	sbc	r24, r24
    2958:	99 0b       	sbc	r25, r25
    295a:	0e 5f       	subi	r16, 0xFE	; 254
    295c:	1f 4f       	sbci	r17, 0xFF	; 255
    295e:	2f 76       	andi	r18, 0x6F	; 111
    2960:	72 2e       	mov	r7, r18
    2962:	97 ff       	sbrs	r25, 7
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <vfprintf+0x1f8>
    2966:	90 95       	com	r25
    2968:	80 95       	com	r24
    296a:	70 95       	com	r23
    296c:	61 95       	neg	r22
    296e:	7f 4f       	sbci	r23, 0xFF	; 255
    2970:	8f 4f       	sbci	r24, 0xFF	; 255
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	20 68       	ori	r18, 0x80	; 128
    2976:	72 2e       	mov	r7, r18
    2978:	2a e0       	ldi	r18, 0x0A	; 10
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	a4 01       	movw	r20, r8
    297e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__ultoa_invert>
    2982:	a8 2e       	mov	r10, r24
    2984:	a8 18       	sub	r10, r8
    2986:	44 c0       	rjmp	.+136    	; 0x2a10 <vfprintf+0x290>
    2988:	85 37       	cpi	r24, 0x75	; 117
    298a:	29 f4       	brne	.+10     	; 0x2996 <vfprintf+0x216>
    298c:	2f 7e       	andi	r18, 0xEF	; 239
    298e:	b2 2e       	mov	r11, r18
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	25 c0       	rjmp	.+74     	; 0x29e0 <vfprintf+0x260>
    2996:	f2 2f       	mov	r31, r18
    2998:	f9 7f       	andi	r31, 0xF9	; 249
    299a:	bf 2e       	mov	r11, r31
    299c:	8f 36       	cpi	r24, 0x6F	; 111
    299e:	c1 f0       	breq	.+48     	; 0x29d0 <vfprintf+0x250>
    29a0:	18 f4       	brcc	.+6      	; 0x29a8 <vfprintf+0x228>
    29a2:	88 35       	cpi	r24, 0x58	; 88
    29a4:	79 f0       	breq	.+30     	; 0x29c4 <vfprintf+0x244>
    29a6:	b4 c0       	rjmp	.+360    	; 0x2b10 <vfprintf+0x390>
    29a8:	80 37       	cpi	r24, 0x70	; 112
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <vfprintf+0x232>
    29ac:	88 37       	cpi	r24, 0x78	; 120
    29ae:	21 f0       	breq	.+8      	; 0x29b8 <vfprintf+0x238>
    29b0:	af c0       	rjmp	.+350    	; 0x2b10 <vfprintf+0x390>
    29b2:	2f 2f       	mov	r18, r31
    29b4:	20 61       	ori	r18, 0x10	; 16
    29b6:	b2 2e       	mov	r11, r18
    29b8:	b4 fe       	sbrs	r11, 4
    29ba:	0d c0       	rjmp	.+26     	; 0x29d6 <vfprintf+0x256>
    29bc:	8b 2d       	mov	r24, r11
    29be:	84 60       	ori	r24, 0x04	; 4
    29c0:	b8 2e       	mov	r11, r24
    29c2:	09 c0       	rjmp	.+18     	; 0x29d6 <vfprintf+0x256>
    29c4:	24 ff       	sbrs	r18, 4
    29c6:	0a c0       	rjmp	.+20     	; 0x29dc <vfprintf+0x25c>
    29c8:	9f 2f       	mov	r25, r31
    29ca:	96 60       	ori	r25, 0x06	; 6
    29cc:	b9 2e       	mov	r11, r25
    29ce:	06 c0       	rjmp	.+12     	; 0x29dc <vfprintf+0x25c>
    29d0:	28 e0       	ldi	r18, 0x08	; 8
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	05 c0       	rjmp	.+10     	; 0x29e0 <vfprintf+0x260>
    29d6:	20 e1       	ldi	r18, 0x10	; 16
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <vfprintf+0x260>
    29dc:	20 e1       	ldi	r18, 0x10	; 16
    29de:	32 e0       	ldi	r19, 0x02	; 2
    29e0:	f8 01       	movw	r30, r16
    29e2:	b7 fe       	sbrs	r11, 7
    29e4:	07 c0       	rjmp	.+14     	; 0x29f4 <vfprintf+0x274>
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	0c 5f       	subi	r16, 0xFC	; 252
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <vfprintf+0x280>
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 5f       	subi	r16, 0xFE	; 254
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	a4 01       	movw	r20, r8
    2a02:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__ultoa_invert>
    2a06:	a8 2e       	mov	r10, r24
    2a08:	a8 18       	sub	r10, r8
    2a0a:	fb 2d       	mov	r31, r11
    2a0c:	ff 77       	andi	r31, 0x7F	; 127
    2a0e:	7f 2e       	mov	r7, r31
    2a10:	76 fe       	sbrs	r7, 6
    2a12:	0b c0       	rjmp	.+22     	; 0x2a2a <vfprintf+0x2aa>
    2a14:	37 2d       	mov	r19, r7
    2a16:	3e 7f       	andi	r19, 0xFE	; 254
    2a18:	a5 14       	cp	r10, r5
    2a1a:	50 f4       	brcc	.+20     	; 0x2a30 <vfprintf+0x2b0>
    2a1c:	74 fe       	sbrs	r7, 4
    2a1e:	0a c0       	rjmp	.+20     	; 0x2a34 <vfprintf+0x2b4>
    2a20:	72 fc       	sbrc	r7, 2
    2a22:	08 c0       	rjmp	.+16     	; 0x2a34 <vfprintf+0x2b4>
    2a24:	37 2d       	mov	r19, r7
    2a26:	3e 7e       	andi	r19, 0xEE	; 238
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <vfprintf+0x2b4>
    2a2a:	ba 2c       	mov	r11, r10
    2a2c:	37 2d       	mov	r19, r7
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <vfprintf+0x2b6>
    2a30:	ba 2c       	mov	r11, r10
    2a32:	01 c0       	rjmp	.+2      	; 0x2a36 <vfprintf+0x2b6>
    2a34:	b5 2c       	mov	r11, r5
    2a36:	34 ff       	sbrs	r19, 4
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <vfprintf+0x2d4>
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ea 0d       	add	r30, r10
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	80 81       	ld	r24, Z
    2a42:	80 33       	cpi	r24, 0x30	; 48
    2a44:	11 f4       	brne	.+4      	; 0x2a4a <vfprintf+0x2ca>
    2a46:	39 7e       	andi	r19, 0xE9	; 233
    2a48:	09 c0       	rjmp	.+18     	; 0x2a5c <vfprintf+0x2dc>
    2a4a:	32 ff       	sbrs	r19, 2
    2a4c:	06 c0       	rjmp	.+12     	; 0x2a5a <vfprintf+0x2da>
    2a4e:	b3 94       	inc	r11
    2a50:	b3 94       	inc	r11
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <vfprintf+0x2dc>
    2a54:	83 2f       	mov	r24, r19
    2a56:	86 78       	andi	r24, 0x86	; 134
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <vfprintf+0x2dc>
    2a5a:	b3 94       	inc	r11
    2a5c:	33 fd       	sbrc	r19, 3
    2a5e:	13 c0       	rjmp	.+38     	; 0x2a86 <vfprintf+0x306>
    2a60:	30 ff       	sbrs	r19, 0
    2a62:	06 c0       	rjmp	.+12     	; 0x2a70 <vfprintf+0x2f0>
    2a64:	5a 2c       	mov	r5, r10
    2a66:	b3 14       	cp	r11, r3
    2a68:	18 f4       	brcc	.+6      	; 0x2a70 <vfprintf+0x2f0>
    2a6a:	53 0c       	add	r5, r3
    2a6c:	5b 18       	sub	r5, r11
    2a6e:	b3 2c       	mov	r11, r3
    2a70:	b3 14       	cp	r11, r3
    2a72:	68 f4       	brcc	.+26     	; 0x2a8e <vfprintf+0x30e>
    2a74:	b7 01       	movw	r22, r14
    2a76:	80 e2       	ldi	r24, 0x20	; 32
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	3c 87       	std	Y+12, r19	; 0x0c
    2a7c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2a80:	b3 94       	inc	r11
    2a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a84:	f5 cf       	rjmp	.-22     	; 0x2a70 <vfprintf+0x2f0>
    2a86:	b3 14       	cp	r11, r3
    2a88:	10 f4       	brcc	.+4      	; 0x2a8e <vfprintf+0x30e>
    2a8a:	3b 18       	sub	r3, r11
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <vfprintf+0x310>
    2a8e:	31 2c       	mov	r3, r1
    2a90:	34 ff       	sbrs	r19, 4
    2a92:	12 c0       	rjmp	.+36     	; 0x2ab8 <vfprintf+0x338>
    2a94:	b7 01       	movw	r22, r14
    2a96:	80 e3       	ldi	r24, 0x30	; 48
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	3c 87       	std	Y+12, r19	; 0x0c
    2a9c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2aa0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aa2:	32 ff       	sbrs	r19, 2
    2aa4:	17 c0       	rjmp	.+46     	; 0x2ad4 <vfprintf+0x354>
    2aa6:	31 fd       	sbrc	r19, 1
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <vfprintf+0x330>
    2aaa:	88 e7       	ldi	r24, 0x78	; 120
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <vfprintf+0x334>
    2ab0:	88 e5       	ldi	r24, 0x58	; 88
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	b7 01       	movw	r22, r14
    2ab6:	0c c0       	rjmp	.+24     	; 0x2ad0 <vfprintf+0x350>
    2ab8:	83 2f       	mov	r24, r19
    2aba:	86 78       	andi	r24, 0x86	; 134
    2abc:	59 f0       	breq	.+22     	; 0x2ad4 <vfprintf+0x354>
    2abe:	31 ff       	sbrs	r19, 1
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <vfprintf+0x346>
    2ac2:	8b e2       	ldi	r24, 0x2B	; 43
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <vfprintf+0x348>
    2ac6:	80 e2       	ldi	r24, 0x20	; 32
    2ac8:	37 fd       	sbrc	r19, 7
    2aca:	8d e2       	ldi	r24, 0x2D	; 45
    2acc:	b7 01       	movw	r22, r14
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2ad4:	a5 14       	cp	r10, r5
    2ad6:	38 f4       	brcc	.+14     	; 0x2ae6 <vfprintf+0x366>
    2ad8:	b7 01       	movw	r22, r14
    2ada:	80 e3       	ldi	r24, 0x30	; 48
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2ae2:	5a 94       	dec	r5
    2ae4:	f7 cf       	rjmp	.-18     	; 0x2ad4 <vfprintf+0x354>
    2ae6:	aa 94       	dec	r10
    2ae8:	f4 01       	movw	r30, r8
    2aea:	ea 0d       	add	r30, r10
    2aec:	f1 1d       	adc	r31, r1
    2aee:	80 81       	ld	r24, Z
    2af0:	b7 01       	movw	r22, r14
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2af8:	a1 10       	cpse	r10, r1
    2afa:	f5 cf       	rjmp	.-22     	; 0x2ae6 <vfprintf+0x366>
    2afc:	33 20       	and	r3, r3
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <vfprintf+0x382>
    2b00:	51 ce       	rjmp	.-862    	; 0x27a4 <vfprintf+0x24>
    2b02:	b7 01       	movw	r22, r14
    2b04:	80 e2       	ldi	r24, 0x20	; 32
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <fputc>
    2b0c:	3a 94       	dec	r3
    2b0e:	f6 cf       	rjmp	.-20     	; 0x2afc <vfprintf+0x37c>
    2b10:	f7 01       	movw	r30, r14
    2b12:	86 81       	ldd	r24, Z+6	; 0x06
    2b14:	97 81       	ldd	r25, Z+7	; 0x07
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <vfprintf+0x39c>
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	9f ef       	ldi	r25, 0xFF	; 255
    2b1c:	2c 96       	adiw	r28, 0x0c	; 12
    2b1e:	e2 e1       	ldi	r30, 0x12	; 18
    2b20:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__>

00002b24 <strnlen_P>:
    2b24:	fc 01       	movw	r30, r24
    2b26:	05 90       	lpm	r0, Z+
    2b28:	61 50       	subi	r22, 0x01	; 1
    2b2a:	70 40       	sbci	r23, 0x00	; 0
    2b2c:	01 10       	cpse	r0, r1
    2b2e:	d8 f7       	brcc	.-10     	; 0x2b26 <strnlen_P+0x2>
    2b30:	80 95       	com	r24
    2b32:	90 95       	com	r25
    2b34:	8e 0f       	add	r24, r30
    2b36:	9f 1f       	adc	r25, r31
    2b38:	08 95       	ret

00002b3a <strnlen>:
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	61 50       	subi	r22, 0x01	; 1
    2b3e:	70 40       	sbci	r23, 0x00	; 0
    2b40:	01 90       	ld	r0, Z+
    2b42:	01 10       	cpse	r0, r1
    2b44:	d8 f7       	brcc	.-10     	; 0x2b3c <strnlen+0x2>
    2b46:	80 95       	com	r24
    2b48:	90 95       	com	r25
    2b4a:	8e 0f       	add	r24, r30
    2b4c:	9f 1f       	adc	r25, r31
    2b4e:	08 95       	ret

00002b50 <fputc>:
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	fb 01       	movw	r30, r22
    2b5a:	23 81       	ldd	r18, Z+3	; 0x03
    2b5c:	21 fd       	sbrc	r18, 1
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <fputc+0x16>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	9f ef       	ldi	r25, 0xFF	; 255
    2b64:	28 c0       	rjmp	.+80     	; 0x2bb6 <fputc+0x66>
    2b66:	22 ff       	sbrs	r18, 2
    2b68:	16 c0       	rjmp	.+44     	; 0x2b96 <fputc+0x46>
    2b6a:	46 81       	ldd	r20, Z+6	; 0x06
    2b6c:	57 81       	ldd	r21, Z+7	; 0x07
    2b6e:	24 81       	ldd	r18, Z+4	; 0x04
    2b70:	35 81       	ldd	r19, Z+5	; 0x05
    2b72:	42 17       	cp	r20, r18
    2b74:	53 07       	cpc	r21, r19
    2b76:	44 f4       	brge	.+16     	; 0x2b88 <fputc+0x38>
    2b78:	a0 81       	ld	r26, Z
    2b7a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b7c:	9d 01       	movw	r18, r26
    2b7e:	2f 5f       	subi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	31 83       	std	Z+1, r19	; 0x01
    2b84:	20 83       	st	Z, r18
    2b86:	8c 93       	st	X, r24
    2b88:	26 81       	ldd	r18, Z+6	; 0x06
    2b8a:	37 81       	ldd	r19, Z+7	; 0x07
    2b8c:	2f 5f       	subi	r18, 0xFF	; 255
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	37 83       	std	Z+7, r19	; 0x07
    2b92:	26 83       	std	Z+6, r18	; 0x06
    2b94:	10 c0       	rjmp	.+32     	; 0x2bb6 <fputc+0x66>
    2b96:	eb 01       	movw	r28, r22
    2b98:	09 2f       	mov	r16, r25
    2b9a:	18 2f       	mov	r17, r24
    2b9c:	00 84       	ldd	r0, Z+8	; 0x08
    2b9e:	f1 85       	ldd	r31, Z+9	; 0x09
    2ba0:	e0 2d       	mov	r30, r0
    2ba2:	09 95       	icall
    2ba4:	89 2b       	or	r24, r25
    2ba6:	e1 f6       	brne	.-72     	; 0x2b60 <fputc+0x10>
    2ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    2baa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	9f 83       	std	Y+7, r25	; 0x07
    2bb0:	8e 83       	std	Y+6, r24	; 0x06
    2bb2:	81 2f       	mov	r24, r17
    2bb4:	90 2f       	mov	r25, r16
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	08 95       	ret

00002bc0 <__ultoa_invert>:
    2bc0:	fa 01       	movw	r30, r20
    2bc2:	aa 27       	eor	r26, r26
    2bc4:	28 30       	cpi	r18, 0x08	; 8
    2bc6:	51 f1       	breq	.+84     	; 0x2c1c <__ultoa_invert+0x5c>
    2bc8:	20 31       	cpi	r18, 0x10	; 16
    2bca:	81 f1       	breq	.+96     	; 0x2c2c <__ultoa_invert+0x6c>
    2bcc:	e8 94       	clt
    2bce:	6f 93       	push	r22
    2bd0:	6e 7f       	andi	r22, 0xFE	; 254
    2bd2:	6e 5f       	subi	r22, 0xFE	; 254
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	af 4f       	sbci	r26, 0xFF	; 255
    2bdc:	b1 e0       	ldi	r27, 0x01	; 1
    2bde:	3e d0       	rcall	.+124    	; 0x2c5c <__ultoa_invert+0x9c>
    2be0:	b4 e0       	ldi	r27, 0x04	; 4
    2be2:	3c d0       	rcall	.+120    	; 0x2c5c <__ultoa_invert+0x9c>
    2be4:	67 0f       	add	r22, r23
    2be6:	78 1f       	adc	r23, r24
    2be8:	89 1f       	adc	r24, r25
    2bea:	9a 1f       	adc	r25, r26
    2bec:	a1 1d       	adc	r26, r1
    2bee:	68 0f       	add	r22, r24
    2bf0:	79 1f       	adc	r23, r25
    2bf2:	8a 1f       	adc	r24, r26
    2bf4:	91 1d       	adc	r25, r1
    2bf6:	a1 1d       	adc	r26, r1
    2bf8:	6a 0f       	add	r22, r26
    2bfa:	71 1d       	adc	r23, r1
    2bfc:	81 1d       	adc	r24, r1
    2bfe:	91 1d       	adc	r25, r1
    2c00:	a1 1d       	adc	r26, r1
    2c02:	20 d0       	rcall	.+64     	; 0x2c44 <__ultoa_invert+0x84>
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <__ultoa_invert+0x48>
    2c06:	68 94       	set
    2c08:	3f 91       	pop	r19
    2c0a:	2a e0       	ldi	r18, 0x0A	; 10
    2c0c:	26 9f       	mul	r18, r22
    2c0e:	11 24       	eor	r1, r1
    2c10:	30 19       	sub	r19, r0
    2c12:	30 5d       	subi	r19, 0xD0	; 208
    2c14:	31 93       	st	Z+, r19
    2c16:	de f6       	brtc	.-74     	; 0x2bce <__ultoa_invert+0xe>
    2c18:	cf 01       	movw	r24, r30
    2c1a:	08 95       	ret
    2c1c:	46 2f       	mov	r20, r22
    2c1e:	47 70       	andi	r20, 0x07	; 7
    2c20:	40 5d       	subi	r20, 0xD0	; 208
    2c22:	41 93       	st	Z+, r20
    2c24:	b3 e0       	ldi	r27, 0x03	; 3
    2c26:	0f d0       	rcall	.+30     	; 0x2c46 <__ultoa_invert+0x86>
    2c28:	c9 f7       	brne	.-14     	; 0x2c1c <__ultoa_invert+0x5c>
    2c2a:	f6 cf       	rjmp	.-20     	; 0x2c18 <__ultoa_invert+0x58>
    2c2c:	46 2f       	mov	r20, r22
    2c2e:	4f 70       	andi	r20, 0x0F	; 15
    2c30:	40 5d       	subi	r20, 0xD0	; 208
    2c32:	4a 33       	cpi	r20, 0x3A	; 58
    2c34:	18 f0       	brcs	.+6      	; 0x2c3c <__ultoa_invert+0x7c>
    2c36:	49 5d       	subi	r20, 0xD9	; 217
    2c38:	31 fd       	sbrc	r19, 1
    2c3a:	40 52       	subi	r20, 0x20	; 32
    2c3c:	41 93       	st	Z+, r20
    2c3e:	02 d0       	rcall	.+4      	; 0x2c44 <__ultoa_invert+0x84>
    2c40:	a9 f7       	brne	.-22     	; 0x2c2c <__ultoa_invert+0x6c>
    2c42:	ea cf       	rjmp	.-44     	; 0x2c18 <__ultoa_invert+0x58>
    2c44:	b4 e0       	ldi	r27, 0x04	; 4
    2c46:	a6 95       	lsr	r26
    2c48:	97 95       	ror	r25
    2c4a:	87 95       	ror	r24
    2c4c:	77 95       	ror	r23
    2c4e:	67 95       	ror	r22
    2c50:	ba 95       	dec	r27
    2c52:	c9 f7       	brne	.-14     	; 0x2c46 <__ultoa_invert+0x86>
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	61 05       	cpc	r22, r1
    2c58:	71 05       	cpc	r23, r1
    2c5a:	08 95       	ret
    2c5c:	9b 01       	movw	r18, r22
    2c5e:	ac 01       	movw	r20, r24
    2c60:	0a 2e       	mov	r0, r26
    2c62:	06 94       	lsr	r0
    2c64:	57 95       	ror	r21
    2c66:	47 95       	ror	r20
    2c68:	37 95       	ror	r19
    2c6a:	27 95       	ror	r18
    2c6c:	ba 95       	dec	r27
    2c6e:	c9 f7       	brne	.-14     	; 0x2c62 <__ultoa_invert+0xa2>
    2c70:	62 0f       	add	r22, r18
    2c72:	73 1f       	adc	r23, r19
    2c74:	84 1f       	adc	r24, r20
    2c76:	95 1f       	adc	r25, r21
    2c78:	a0 1d       	adc	r26, r0
    2c7a:	08 95       	ret

00002c7c <eeprom_read_block>:
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22

00002c80 <eeprom_read_blraw>:
    2c80:	fc 01       	movw	r30, r24
    2c82:	f9 99       	sbic	0x1f, 1	; 31
    2c84:	fe cf       	rjmp	.-4      	; 0x2c82 <eeprom_read_blraw+0x2>
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <eeprom_read_blraw+0x14>
    2c88:	f2 bd       	out	0x22, r31	; 34
    2c8a:	e1 bd       	out	0x21, r30	; 33
    2c8c:	f8 9a       	sbi	0x1f, 0	; 31
    2c8e:	31 96       	adiw	r30, 0x01	; 1
    2c90:	00 b4       	in	r0, 0x20	; 32
    2c92:	0d 92       	st	X+, r0
    2c94:	41 50       	subi	r20, 0x01	; 1
    2c96:	50 40       	sbci	r21, 0x00	; 0
    2c98:	b8 f7       	brcc	.-18     	; 0x2c88 <eeprom_read_blraw+0x8>
    2c9a:	08 95       	ret

00002c9c <eeprom_read_byte>:
    2c9c:	f9 99       	sbic	0x1f, 1	; 31
    2c9e:	fe cf       	rjmp	.-4      	; 0x2c9c <eeprom_read_byte>
    2ca0:	92 bd       	out	0x22, r25	; 34
    2ca2:	81 bd       	out	0x21, r24	; 33
    2ca4:	f8 9a       	sbi	0x1f, 0	; 31
    2ca6:	99 27       	eor	r25, r25
    2ca8:	80 b5       	in	r24, 0x20	; 32
    2caa:	08 95       	ret

00002cac <eeprom_write_block>:
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	03 c0       	rjmp	.+6      	; 0x2cb8 <eeprom_write_block+0xc>
    2cb2:	2d 91       	ld	r18, X+
    2cb4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <eeprom_write_r18>
    2cb8:	41 50       	subi	r20, 0x01	; 1
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	d0 f7       	brcc	.-12     	; 0x2cb2 <eeprom_write_block+0x6>
    2cbe:	08 95       	ret

00002cc0 <eeprom_write_byte>:
    2cc0:	26 2f       	mov	r18, r22

00002cc2 <eeprom_write_r18>:
    2cc2:	f9 99       	sbic	0x1f, 1	; 31
    2cc4:	fe cf       	rjmp	.-4      	; 0x2cc2 <eeprom_write_r18>
    2cc6:	1f ba       	out	0x1f, r1	; 31
    2cc8:	92 bd       	out	0x22, r25	; 34
    2cca:	81 bd       	out	0x21, r24	; 33
    2ccc:	20 bd       	out	0x20, r18	; 32
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	fa 9a       	sbi	0x1f, 2	; 31
    2cd4:	f9 9a       	sbi	0x1f, 1	; 31
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	08 95       	ret

00002cdc <__prologue_saves__>:
    2cdc:	2f 92       	push	r2
    2cde:	3f 92       	push	r3
    2ce0:	4f 92       	push	r4
    2ce2:	5f 92       	push	r5
    2ce4:	6f 92       	push	r6
    2ce6:	7f 92       	push	r7
    2ce8:	8f 92       	push	r8
    2cea:	9f 92       	push	r9
    2cec:	af 92       	push	r10
    2cee:	bf 92       	push	r11
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	ca 1b       	sub	r28, r26
    2d06:	db 0b       	sbc	r29, r27
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	09 94       	ijmp

00002d14 <__epilogue_restores__>:
    2d14:	2a 88       	ldd	r2, Y+18	; 0x12
    2d16:	39 88       	ldd	r3, Y+17	; 0x11
    2d18:	48 88       	ldd	r4, Y+16	; 0x10
    2d1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d20:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d22:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d24:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d26:	b9 84       	ldd	r11, Y+9	; 0x09
    2d28:	c8 84       	ldd	r12, Y+8	; 0x08
    2d2a:	df 80       	ldd	r13, Y+7	; 0x07
    2d2c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d2e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d30:	0c 81       	ldd	r16, Y+4	; 0x04
    2d32:	1b 81       	ldd	r17, Y+3	; 0x03
    2d34:	aa 81       	ldd	r26, Y+2	; 0x02
    2d36:	b9 81       	ldd	r27, Y+1	; 0x01
    2d38:	ce 0f       	add	r28, r30
    2d3a:	d1 1d       	adc	r29, r1
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	ed 01       	movw	r28, r26
    2d48:	08 95       	ret

00002d4a <_exit>:
    2d4a:	f8 94       	cli

00002d4c <__stop_program>:
    2d4c:	ff cf       	rjmp	.-2      	; 0x2d4c <__stop_program>
