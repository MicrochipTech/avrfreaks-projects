
_Feed_Timer_DP7_Seg_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001ce6  00001d9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800130  00800130  00001dca  2**0
                  ALLOC
  3 .eeprom       000002bd  00810000  00810000  00001dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001050  00000000  00000000  00002088  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000448  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00003520  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000318  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005a71  00000000  00000000  00003867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fbe  00000000  00000000  000092d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001421  00000000  00000000  0000a296  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008f8  00000000  00000000  0000b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001654  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002489  00000000  00000000  0000d604  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002e8  00000000  00000000  0000fa8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
       8:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      14:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      18:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      1c:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_7>
      20:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      24:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      28:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      30:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      34:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      38:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_14>
      3c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      4c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      54:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      58:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      5c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      60:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>

00000068 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_6>:
      68:	49 4e 56 4c 00                                      INVL.

0000006d <_ZZN16class_Feed_Timer8InitTimeEbE3__c>:
      6d:	20 20 00                                              .

00000070 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_0>:
      70:	44 53 45 4d 00                                      DSEM.

00000075 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_1>:
      75:	48 48 00                                            HH.

00000078 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_2>:
      78:	4d 4d 00                                            MM.

0000007b <_ZZN16class_Feed_Timer8InitTimeEbE3__c_3>:
      7b:	44 53 45 4d 00                                      DSEM.

00000080 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_4>:
      80:	48 48 20 20 00                                      HH  .

00000085 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_5>:
      85:	20 20 4d 4d 00                                        MM.

0000008a <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_4>:
      8a:	49 4e 56 4c 00                                      INVL.

0000008f <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c>:
      8f:	48 52 2d 31 00                                      HR-1.

00000094 <_ZZ4mainE3__c>:
      94:	44 41 52 54 00                                      DART.

00000099 <_ZZ4mainE3__c_0>:
      99:	2d 20 20 20 00                                      -   .

0000009e <_ZZ4mainE3__c_1>:
      9e:	20 2d 20 20 00                                       -  .

000000a3 <_ZZ4mainE3__c_2>:
      a3:	20 20 2d 20 00                                        - .

000000a8 <_ZZ4mainE3__c_3>:
      a8:	20 20 20 2d 00                                         -.

000000ad <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c>:
      ad:	53 45 47 20 00                                      SEG .

000000b2 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_0>:
      b2:	54 45 52 20 00                                      TER .

000000b7 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_1>:
      b7:	51 55 41 20 00                                      QUA .

000000bc <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_2>:
      bc:	51 55 49 20 00                                      QUI .

000000c1 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_3>:
      c1:	53 45 58 20 00                                      SEX .

000000c6 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_4>:
      c6:	53 41 42 20 00                                      SAB .

000000cb <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_5>:
      cb:	44 4f 4d 20 00                                      DOM .

000000d0 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_0>:
      d0:	49 43 2d 32 00                                      IC-2.

000000d5 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_1>:
      d5:	44 45 2d 33 00                                      DE-3.

000000da <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_2>:
      da:	52 53 2d 34 00                                      RS-4.

000000df <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_3>:
      df:	53 41 49 20 00                                      SAI .

000000e4 <_ZL34_FEED_TIMER_DISP_7_SEG_ASCII_Table>:
      e4:	00 00 22 00 00 00 00 20 39 0f 00 00 0c 40 88 52     ..".... 9....@.R
      f4:	3f 06 5b 4f 66 6d 7d 07 7f 6f 00 00 00 48 00 53     ?.[Ofm}..o...H.S
     104:	00 77 7c 39 5e 79 71 6f 76 06 1e 7e 38 37 54 3f     .w|9^yqov..~87T?
     114:	73 67 33 6d 78 3e 1c 2a 76 6e 5b 39 64 0f 23 08     sg3mx>.*vn[9d.#.
     124:	02                                                  .

00000125 <_ZZN19class_Display_7_Seg3ClsEvE3__c>:
     125:	20 20 20 20 00                                          .

0000012a <__ctors_start>:
     12a:	15 08       	sbc	r1, r5
     12c:	05 0a       	sbc	r0, r21

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d8 e0       	ldi	r29, 0x08	; 8
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 ee       	ldi	r30, 0xE6	; 230
     142:	fc e1       	ldi	r31, 0x1C	; 28
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a0 33       	cpi	r26, 0x30	; 48
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	23 e0       	ldi	r18, 0x03	; 3
     152:	a0 e3       	ldi	r26, 0x30	; 48
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	ab 35       	cpi	r26, 0x5B	; 91
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>

00000160 <__do_global_ctors>:
     160:	11 e0       	ldi	r17, 0x01	; 1
     162:	ce e2       	ldi	r28, 0x2E	; 46
     164:	d1 e0       	ldi	r29, 0x01	; 1
     166:	04 c0       	rjmp	.+8      	; 0x170 <__do_global_ctors+0x10>
     168:	22 97       	sbiw	r28, 0x02	; 2
     16a:	fe 01       	movw	r30, r28
     16c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__tablejump__>
     170:	ca 32       	cpi	r28, 0x2A	; 42
     172:	d1 07       	cpc	r29, r17
     174:	c9 f7       	brne	.-14     	; 0x168 <__do_global_ctors+0x8>
     176:	0e 94 d2 06 	call	0xda4	; 0xda4 <main>
     17a:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <_exit>

0000017e <__bad_interrupt>:
     17e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>:
		/* Set Timer 0 Disable                                                  */
		/************************************************************************/
		void inline SetTimer0_OFF()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0&=~(1<<OCIE0A);
     182:	ee e6       	ldi	r30, 0x6E	; 110
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	80 83       	st	Z, r24
     18c:	08 95       	ret

0000018e <_ZN16class_Feed_Timer13ClockCallBackEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ClockCallBack()
{
     18e:	af 92       	push	r10
     190:	bf 92       	push	r11
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	27 97       	sbiw	r28, 0x07	; 7
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
	//PROCESS TIME
	//////////////////////////////
	//pump tick count
	//TickCount++;
	//pump second
	Ptrs->Second++;
     1b2:	e0 91 01 01 	lds	r30, 0x0101
     1b6:	f0 91 02 01 	lds	r31, 0x0102
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
     1be:	82 83       	std	Z+2, r24	; 0x02
	//if greater 59
	if (Ptrs->Second>59)	{
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	8c 33       	cpi	r24, 0x3C	; 60
     1c4:	b8 f0       	brcs	.+46     	; 0x1f4 <_ZN16class_Feed_Timer13ClockCallBackEv+0x66>
		//clear second
		Ptrs->Second=0;
     1c6:	12 82       	std	Z+2, r1	; 0x02
		//pump minute
		Ptrs->Minute++;
     1c8:	81 81       	ldd	r24, Z+1	; 0x01
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	81 83       	std	Z+1, r24	; 0x01
		//if greater 59
		if (Ptrs->Minute>59)	{
     1ce:	81 81       	ldd	r24, Z+1	; 0x01
     1d0:	8c 33       	cpi	r24, 0x3C	; 60
     1d2:	80 f0       	brcs	.+32     	; 0x1f4 <_ZN16class_Feed_Timer13ClockCallBackEv+0x66>
			//clear minute
			Ptrs->Minute=0;
     1d4:	11 82       	std	Z+1, r1	; 0x01
			//pump hour
			Ptrs->Hour++;
     1d6:	80 81       	ld	r24, Z
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 83       	st	Z, r24
			//if greater 23
			if (Ptrs->Hour>23)  {
     1dc:	80 81       	ld	r24, Z
     1de:	88 31       	cpi	r24, 0x18	; 24
     1e0:	48 f0       	brcs	.+18     	; 0x1f4 <_ZN16class_Feed_Timer13ClockCallBackEv+0x66>
				//clear hour
				Ptrs->Hour=0;
     1e2:	10 82       	st	Z, r1
				//pump week day
				Ptrs->WeekDay++;
     1e4:	83 81       	ldd	r24, Z+3	; 0x03
     1e6:	8f 5f       	subi	r24, 0xFF	; 255
     1e8:	83 83       	std	Z+3, r24	; 0x03
				//if greater 7
				if (Ptrs->WeekDay>7)	Ptrs->WeekDay=1; //Set to Monday=1
     1ea:	83 81       	ldd	r24, Z+3	; 0x03
     1ec:	88 30       	cpi	r24, 0x08	; 8
     1ee:	10 f0       	brcs	.+4      	; 0x1f4 <_ZN16class_Feed_Timer13ClockCallBackEv+0x66>
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	/////////////////////////////
	/// Enable interrupts to avoid long time in this callback
	/////////////////////////////
	sei();
     1f4:	78 94       	sei
	/////////////////////////////
	struct EventStruct *EventP,EventTmp;
	struct EventCountStruct *EventCountP;
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
     1f6:	8c eb       	ldi	r24, 0xBC	; 188
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__eerd_byte_m328p>
     1fe:	c8 2e       	mov	r12, r24
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     200:	d1 2c       	mov	r13, r1
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
     202:	0a e3       	ldi	r16, 0x3A	; 58
     204:	11 e0       	ldi	r17, 0x01	; 1
	struct EventCountStruct *EventCountP;
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	e8 2e       	mov	r14, r24
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	f8 2e       	mov	r15, r24
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
						dp.MotorOFF();
						SleepState=true;
     20e:	bb 24       	eor	r11, r11
     210:	b3 94       	inc	r11
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     212:	9c c0       	rjmp	.+312    	; 0x34c <_ZN16class_Feed_Timer13ClockCallBackEv+0x1be>
	//for(uint8_t i=0;i<EVENT_SIZE;i++)
	{
		Event=eeprom_read_byte(&EventP->Event);
     214:	c7 01       	movw	r24, r14
     216:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__eerd_byte_m328p>
     21a:	a8 2e       	mov	r10, r24
		switch (Event)
     21c:	31 e0       	ldi	r19, 0x01	; 1
     21e:	83 17       	cp	r24, r19
     220:	21 f0       	breq	.+8      	; 0x22a <_ZN16class_Feed_Timer13ClockCallBackEv+0x9c>
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	a8 12       	cpse	r10, r24
     226:	8c c0       	rjmp	.+280    	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
     228:	55 c0       	rjmp	.+170    	; 0x2d4 <_ZN16class_Feed_Timer13ClockCallBackEv+0x146>
			////////////////////////
			// REPEAT EVENT
			////////////////////////
			case EVENT_TYPE::REPEAT:
				//time to load from hours,minute?
				if (EventCountP->Flags.SeparateFlag.LoadFrom==false && EventCountP->Count==0)
     22a:	f8 01       	movw	r30, r16
     22c:	80 81       	ld	r24, Z
     22e:	80 fd       	sbrc	r24, 0
     230:	2e c0       	rjmp	.+92     	; 0x28e <_ZN16class_Feed_Timer13ClockCallBackEv+0x100>
     232:	41 81       	ldd	r20, Z+1	; 0x01
     234:	52 81       	ldd	r21, Z+2	; 0x02
     236:	63 81       	ldd	r22, Z+3	; 0x03
     238:	74 81       	ldd	r23, Z+4	; 0x04
     23a:	45 2b       	or	r20, r21
     23c:	46 2b       	or	r20, r22
     23e:	47 2b       	or	r20, r23
     240:	09 f0       	breq	.+2      	; 0x244 <_ZN16class_Feed_Timer13ClockCallBackEv+0xb6>
     242:	71 c0       	rjmp	.+226    	; 0x326 <_ZN16class_Feed_Timer13ClockCallBackEv+0x198>
				{
					//yes, update count from hours and minute
					eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     244:	47 e0       	ldi	r20, 0x07	; 7
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	b7 01       	movw	r22, r14
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__eerd_block_m328p>
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.Hour*60+(uint16_t)EventTmp.Minute)*60L;
     252:	8a 81       	ldd	r24, Y+2	; 0x02
     254:	2b 81       	ldd	r18, Y+3	; 0x03
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	fc e3       	ldi	r31, 0x3C	; 60
     25a:	8f 9f       	mul	r24, r31
     25c:	20 0d       	add	r18, r0
     25e:	31 1d       	adc	r19, r1
     260:	11 24       	eor	r1, r1
     262:	ac e3       	ldi	r26, 0x3C	; 60
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	0e 94 4d 0b 	call	0x169a	; 0x169a <__umulhisi3>
     26a:	f8 01       	movw	r30, r16
     26c:	61 83       	std	Z+1, r22	; 0x01
     26e:	72 83       	std	Z+2, r23	; 0x02
     270:	83 83       	std	Z+3, r24	; 0x03
     272:	94 83       	std	Z+4, r25	; 0x04
					//set flag to true
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     274:	80 81       	ld	r24, Z
     276:	81 60       	ori	r24, 0x01	; 1
     278:	80 83       	st	Z, r24

					//if second event the turn motor off
					if (EventCountP->Flags.SeparateFlag.Counting)
     27a:	81 ff       	sbrs	r24, 1
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_ZN16class_Feed_Timer13ClockCallBackEv+0xf8>
		/* Turn Feed Motor OFF                                                  */
		/************************************************************************/
		void	inline MotorOFF(void)
		{
			//PUT MOTOR PORT TO INPUT HI-Z DO DISABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     27e:	3c 98       	cbi	0x07, 4	; 7
					{
						//set motor OFF
						dp.MotorOFF();
						//sleep
						SleepState=true;						
     280:	a0 92 00 01 	sts	0x0100, r10
     284:	5d c0       	rjmp	.+186    	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
					}
					else
					{
						//set counting true
						EventCountP->Flags.SeparateFlag.Counting=true;
     286:	82 60       	ori	r24, 0x02	; 2
     288:	f8 01       	movw	r30, r16
     28a:	80 83       	st	Z, r24
     28c:	59 c0       	rjmp	.+178    	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
					}
				}
				else
				{
					//time to load from MinuteMotorON,SecondMotorON?
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     28e:	f8 01       	movw	r30, r16
     290:	81 81       	ldd	r24, Z+1	; 0x01
     292:	92 81       	ldd	r25, Z+2	; 0x02
     294:	a3 81       	ldd	r26, Z+3	; 0x03
     296:	b4 81       	ldd	r27, Z+4	; 0x04
     298:	89 2b       	or	r24, r25
     29a:	8a 2b       	or	r24, r26
     29c:	8b 2b       	or	r24, r27
     29e:	09 f0       	breq	.+2      	; 0x2a2 <_ZN16class_Feed_Timer13ClockCallBackEv+0x114>
     2a0:	42 c0       	rjmp	.+132    	; 0x326 <_ZN16class_Feed_Timer13ClockCallBackEv+0x198>
					{
						//yes, update count from MinuteMotorON,SecondMotorON
						eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     2a2:	47 e0       	ldi	r20, 0x07	; 7
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	b7 01       	movw	r22, r14
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__eerd_block_m328p>
						//translate to seconds and load count
						EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     2b0:	2d 81       	ldd	r18, Y+5	; 0x05
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	fc e3       	ldi	r31, 0x3C	; 60
     2b8:	2f 9f       	mul	r18, r31
     2ba:	80 0d       	add	r24, r0
     2bc:	91 1d       	adc	r25, r1
     2be:	11 24       	eor	r1, r1
     2c0:	a0 e0       	ldi	r26, 0x00	; 0
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	f8 01       	movw	r30, r16
     2c6:	81 83       	std	Z+1, r24	; 0x01
     2c8:	92 83       	std	Z+2, r25	; 0x02
     2ca:	a3 83       	std	Z+3, r26	; 0x03
     2cc:	b4 83       	std	Z+4, r27	; 0x04
						//set flag to false
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
     2ce:	80 81       	ld	r24, Z
						EventCountP->Flags.SeparateFlag.Counting=true;
     2d0:	8e 7f       	andi	r24, 0xFE	; 254
     2d2:	50 c0       	rjmp	.+160    	; 0x374 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1e6>
			////////////////////////
			// DIARY EVENT
			////////////////////////
			case EVENT_TYPE::DIARY:
				//check if time arise
				eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     2d4:	47 e0       	ldi	r20, 0x07	; 7
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	b7 01       	movw	r22, r14
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__eerd_block_m328p>
				//check time
				if (EventTmp.Hour==Ptrs->Hour && EventTmp.Minute==Ptrs->Minute && Ptrs->Second==0)
     2e2:	e0 91 01 01 	lds	r30, 0x0101
     2e6:	f0 91 02 01 	lds	r31, 0x0102
     2ea:	80 81       	ld	r24, Z
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	98 13       	cpse	r25, r24
     2f0:	4b c0       	rjmp	.+150    	; 0x388 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1fa>
     2f2:	81 81       	ldd	r24, Z+1	; 0x01
     2f4:	9b 81       	ldd	r25, Y+3	; 0x03
     2f6:	98 13       	cpse	r25, r24
     2f8:	47 c0       	rjmp	.+142    	; 0x388 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1fa>
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	88 23       	and	r24, r24
     2fe:	49 f1       	breq	.+82     	; 0x352 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1c4>
     300:	43 c0       	rjmp	.+134    	; 0x388 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1fa>
					dp.MotorON();
					SleepState=false;					
				}
				else
				{
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     302:	f8 01       	movw	r30, r16
     304:	81 81       	ldd	r24, Z+1	; 0x01
     306:	92 81       	ldd	r25, Z+2	; 0x02
     308:	a3 81       	ldd	r26, Z+3	; 0x03
     30a:	b4 81       	ldd	r27, Z+4	; 0x04
     30c:	89 2b       	or	r24, r25
     30e:	8a 2b       	or	r24, r26
     310:	8b 2b       	or	r24, r27
     312:	39 f4       	brne	.+14     	; 0x322 <_ZN16class_Feed_Timer13ClockCallBackEv+0x194>
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
     314:	2e 7f       	andi	r18, 0xFE	; 254
     316:	2d 7f       	andi	r18, 0xFD	; 253
     318:	20 83       	st	Z, r18
     31a:	3c 98       	cbi	0x07, 4	; 7
						dp.MotorOFF();
						SleepState=true;
     31c:	b0 92 00 01 	sts	0x0100, r11
     320:	0f c0       	rjmp	.+30     	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
					}
					else
					{
						//count--
						if (EventCountP->Flags.SeparateFlag.Counting) EventCountP->Count--;
     322:	21 ff       	sbrs	r18, 1
     324:	0d c0       	rjmp	.+26     	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
     326:	f8 01       	movw	r30, r16
     328:	41 81       	ldd	r20, Z+1	; 0x01
     32a:	52 81       	ldd	r21, Z+2	; 0x02
     32c:	63 81       	ldd	r22, Z+3	; 0x03
     32e:	74 81       	ldd	r23, Z+4	; 0x04
     330:	41 50       	subi	r20, 0x01	; 1
     332:	51 09       	sbc	r21, r1
     334:	61 09       	sbc	r22, r1
     336:	71 09       	sbc	r23, r1
     338:	41 83       	std	Z+1, r20	; 0x01
     33a:	52 83       	std	Z+2, r21	; 0x02
     33c:	63 83       	std	Z+3, r22	; 0x03
     33e:	74 83       	std	Z+4, r23	; 0x04
			////////////////////////
			case EVENT_TYPE::WEEKLY:
			break;			
		}
		//next event
		EventP++;
     340:	f7 e0       	ldi	r31, 0x07	; 7
     342:	ef 0e       	add	r14, r31
     344:	f1 1c       	adc	r15, r1
		EventCountP++;		
     346:	0b 5f       	subi	r16, 0xFB	; 251
     348:	1f 4f       	sbci	r17, 0xFF	; 255
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     34a:	d3 94       	inc	r13
     34c:	dc 10       	cpse	r13, r12
     34e:	62 cf       	rjmp	.-316    	; 0x214 <_ZN16class_Feed_Timer13ClockCallBackEv+0x86>
     350:	20 c0       	rjmp	.+64     	; 0x392 <_ZN16class_Feed_Timer13ClockCallBackEv+0x204>
				eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
				//check time
				if (EventTmp.Hour==Ptrs->Hour && EventTmp.Minute==Ptrs->Minute && Ptrs->Second==0)
				{
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     352:	2d 81       	ldd	r18, Y+5	; 0x05
     354:	8e 81       	ldd	r24, Y+6	; 0x06
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	3c e3       	ldi	r19, 0x3C	; 60
     35a:	23 9f       	mul	r18, r19
     35c:	80 0d       	add	r24, r0
     35e:	91 1d       	adc	r25, r1
     360:	11 24       	eor	r1, r1
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	f8 01       	movw	r30, r16
     368:	81 83       	std	Z+1, r24	; 0x01
     36a:	92 83       	std	Z+2, r25	; 0x02
     36c:	a3 83       	std	Z+3, r26	; 0x03
     36e:	b4 83       	std	Z+4, r27	; 0x04
					//set flag to false
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     370:	80 81       	ld	r24, Z
					EventCountP->Flags.SeparateFlag.Counting=true;
     372:	81 60       	ori	r24, 0x01	; 1
     374:	82 60       	ori	r24, 0x02	; 2
     376:	80 83       	st	Z, r24
					//set motor ON
					dp.EnableIO();
     378:	8e e2       	ldi	r24, 0x2E	; 46
     37a:	93 e0       	ldi	r25, 0x03	; 3
     37c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Turn Feed Motor ON                                                   */
		/************************************************************************/
		void	inline MotorON(void)
		{
			//PUT MOTOR PORT TO OUTPUT DIRECTION TO ENABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     380:	3c 9a       	sbi	0x07, 4	; 7
					dp.MotorON();
					SleepState=false;					
     382:	10 92 00 01 	sts	0x0100, r1
     386:	dc cf       	rjmp	.-72     	; 0x340 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1b2>
				}
				else
				{
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     388:	f8 01       	movw	r30, r16
     38a:	20 81       	ld	r18, Z
     38c:	20 fd       	sbrc	r18, 0
     38e:	b9 cf       	rjmp	.-142    	; 0x302 <_ZN16class_Feed_Timer13ClockCallBackEv+0x174>
     390:	c8 cf       	rjmp	.-112    	; 0x322 <_ZN16class_Feed_Timer13ClockCallBackEv+0x194>
		}
		//next event
		EventP++;
		EventCountP++;		
	}
}
     392:	27 96       	adiw	r28, 0x07	; 7
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	08 95       	ret

000003b4 <_ZN16class_Feed_TimerC1Ev>:
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
class_Feed_Timer::class_Feed_Timer()
{
	dp.SetSecondCallBack(class_Feed_Timer::ClockCallBack);
     3b4:	67 ec       	ldi	r22, 0xC7	; 199
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	8e e2       	ldi	r24, 0x2E	; 46
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>

000003c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  hour,minute,second,weeday			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::GetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
	uint8_t h2,m2,s2,w2;
	
	//loop for correct get time without interrupt

	//get time 
	h1=Ptrs->Hour;
     3cc:	e0 91 01 01 	lds	r30, 0x0101
     3d0:	f0 91 02 01 	lds	r31, 0x0102
     3d4:	c0 81       	ld	r28, Z
	m1=Ptrs->Minute;
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
	s1=Ptrs->Second;
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
	w1=Ptrs->WeekDay;
     3da:	b3 81       	ldd	r27, Z+3	; 0x03
     3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x30>
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
		s2=Ptrs->Second;
     3de:	8a 2f       	mov	r24, r26
	w1=Ptrs->WeekDay;
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
     3e0:	9d 2f       	mov	r25, r29
		s2=Ptrs->Second;
		w2=Ptrs->WeekDay;
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     3e2:	ce 2d       	mov	r28, r14
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x2e>
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
		s2=Ptrs->Second;
     3e6:	8a 2f       	mov	r24, r26
		w2=Ptrs->WeekDay;
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     3e8:	9d 2f       	mov	r25, r29
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x2e>
     3ec:	8a 2f       	mov	r24, r26
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
		s2=Ptrs->Second;
		w2=Ptrs->WeekDay;
     3ee:	bf 2d       	mov	r27, r15
	s1=Ptrs->Second;
	w1=Ptrs->WeekDay;
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
     3f0:	e0 80       	ld	r14, Z
		m2=Ptrs->Minute;
     3f2:	d1 81       	ldd	r29, Z+1	; 0x01
		s2=Ptrs->Second;
     3f4:	a2 81       	ldd	r26, Z+2	; 0x02
		w2=Ptrs->WeekDay;
     3f6:	f3 80       	ldd	r15, Z+3	; 0x03
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     3f8:	ce 11       	cpse	r28, r14
     3fa:	f1 cf       	rjmp	.-30     	; 0x3de <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x1e>
     3fc:	9d 13       	cpse	r25, r29
     3fe:	f3 cf       	rjmp	.-26     	; 0x3e6 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x26>
     400:	8a 13       	cpse	r24, r26
     402:	f4 cf       	rjmp	.-24     	; 0x3ec <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x2c>
     404:	bf 11       	cpse	r27, r15
     406:	f3 cf       	rjmp	.-26     	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x2e>
		m1=m2;
		s1=s2;
		w1=w2;
	}
	//return correct time
	hourParm=h2;
     408:	fb 01       	movw	r30, r22
     40a:	c0 83       	st	Z, r28
	minuteParm=m2;
     40c:	fa 01       	movw	r30, r20
     40e:	90 83       	st	Z, r25
	secondParm=s2;
     410:	f9 01       	movw	r30, r18
     412:	80 83       	st	Z, r24
	weekdayParm=w2;
     414:	f8 01       	movw	r30, r16
     416:	b0 83       	st	Z, r27
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	08 95       	ret

00000426 <_ZN16class_Feed_Timer8InitTimeEb>:
//	| @INPUT   :																	|
//	| @OUTPUT  :											                        |
//	| @REMARKS :  if boot is cold new time is requested if hot set new time			|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::InitTime(bool forceInit)
{
     426:	4f 92       	push	r4
     428:	5f 92       	push	r5
     42a:	6f 92       	push	r6
     42c:	7f 92       	push	r7
     42e:	8f 92       	push	r8
     430:	9f 92       	push	r9
     432:	af 92       	push	r10
     434:	bf 92       	push	r11
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	2c 97       	sbiw	r28, 0x0c	; 12
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	c6 2e       	mov	r12, r22
	#define		TIME_TO_EXIT	30000
	
	uint8_t		h=0xff,
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	2c 87       	std	Y+12, r18	; 0x0c
				m=0xff,
     45c:	2b 87       	std	Y+11, r18	; 0x0b
				s=0xff,
     45e:	2a 87       	std	Y+10, r18	; 0x0a
				w=0xff;
     460:	29 87       	std	Y+9, r18	; 0x09
	bool		bBlink=true,
				bWeek=false;
	char		key;
	
	//get boot type
	if (this->Ptrs->BootKey==_BOOT_KEY)
     462:	e0 91 01 01 	lds	r30, 0x0101
     466:	f0 91 02 01 	lds	r31, 0x0102
     46a:	44 81       	ldd	r20, Z+4	; 0x04
     46c:	55 81       	ldd	r21, Z+5	; 0x05
     46e:	66 81       	ldd	r22, Z+6	; 0x06
     470:	77 81       	ldd	r23, Z+7	; 0x07
     472:	46 32       	cpi	r20, 0x26	; 38
     474:	59 45       	sbci	r21, 0x59	; 89
     476:	61 44       	sbci	r22, 0x41	; 65
     478:	71 43       	sbci	r23, 0x31	; 49
     47a:	19 f4       	brne	.+6      	; 0x482 <_ZN16class_Feed_Timer8InitTimeEb+0x5c>
	{
		//hot boot
		if (forceInit==false)
     47c:	c1 10       	cpse	r12, r1
     47e:	03 c0       	rjmp	.+6      	; 0x486 <_ZN16class_Feed_Timer8InitTimeEb+0x60>
     480:	16 c2       	rjmp	.+1068   	; 0x8ae <_ZN16class_Feed_Timer8InitTimeEb+0x488>
			//no make anythink return
			return;			
		}
	}
	//if force initialization get current time
	if (forceInit)
     482:	cc 20       	and	r12, r12
     484:	71 f0       	breq	.+28     	; 0x4a2 <_ZN16class_Feed_Timer8InitTimeEb+0x7c>
	{
		this->GetTime(h,m,s,w);
     486:	8e 01       	movw	r16, r28
     488:	07 5f       	subi	r16, 0xF7	; 247
     48a:	1f 4f       	sbci	r17, 0xFF	; 255
     48c:	9e 01       	movw	r18, r28
     48e:	26 5f       	subi	r18, 0xF6	; 246
     490:	3f 4f       	sbci	r19, 0xFF	; 255
     492:	ae 01       	movw	r20, r28
     494:	45 5f       	subi	r20, 0xF5	; 245
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	be 01       	movw	r22, r28
     49a:	64 5f       	subi	r22, 0xF4	; 244
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
	}
	//cold boot ? set hot
	this->Ptrs->BootKey=_BOOT_KEY;		
     4a2:	e0 91 01 01 	lds	r30, 0x0101
     4a6:	f0 91 02 01 	lds	r31, 0x0102
     4aa:	86 e2       	ldi	r24, 0x26	; 38
     4ac:	99 e5       	ldi	r25, 0x59	; 89
     4ae:	a1 e4       	ldi	r26, 0x41	; 65
     4b0:	b1 e3       	ldi	r27, 0x31	; 49
     4b2:	84 83       	std	Z+4, r24	; 0x04
     4b4:	95 83       	std	Z+5, r25	; 0x05
     4b6:	a6 83       	std	Z+6, r26	; 0x06
     4b8:	b7 83       	std	Z+7, r27	; 0x07
	//SET TIME
	time.SetElapsed(&tBlink);
     4ba:	8e 01       	movw	r16, r28
     4bc:	0b 5f       	subi	r16, 0xFB	; 251
     4be:	1f 4f       	sbci	r17, 0xFF	; 255
     4c0:	b8 01       	movw	r22, r16
     4c2:	85 e3       	ldi	r24, 0x35	; 53
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
	time.SetElapsed(&tExit);
     4ca:	44 24       	eor	r4, r4
     4cc:	43 94       	inc	r4
     4ce:	51 2c       	mov	r5, r1
     4d0:	4c 0e       	add	r4, r28
     4d2:	5d 1e       	adc	r5, r29
     4d4:	b2 01       	movw	r22, r4
     4d6:	85 e3       	ldi	r24, 0x35	; 53
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
				s=0xff,
				w=0xff;
	uint32_t	tBlink,
				tExit;
	bool		bBlink=true,
				bWeek=false;
     4de:	d1 2c       	mov	r13, r1
				m=0xff,
				s=0xff,
				w=0xff;
	uint32_t	tBlink,
				tExit;
	bool		bBlink=true,
     4e0:	bb 24       	eor	r11, r11
     4e2:	b3 94       	inc	r11
	time.SetElapsed(&tBlink);
	time.SetElapsed(&tExit);
	for(;;)
	{
		//time to blink?
		if (time.GetElapsed(&tBlink)>500)
     4e4:	80 2e       	mov	r8, r16
     4e6:	71 2e       	mov	r7, r17
		{
			//clear blink time
			time.SetElapsed(&tBlink);
			//change blink state
			bBlink=!bBlink;
     4e8:	aa 24       	eor	r10, r10
     4ea:	a3 94       	inc	r10
					{
						dp.PutSF(PSTR("MM"));
					}
					else
					{
						sprintf(bf,"%02d",m);
     4ec:	0e e0       	ldi	r16, 0x0E	; 14
     4ee:	11 e0       	ldi	r17, 0x01	; 1
     4f0:	70 e3       	ldi	r23, 0x30	; 48
     4f2:	e7 2e       	mov	r14, r23
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	f7 2e       	mov	r15, r23
		}
		//read keys
		key=dp.KeyReadFlash();
		if (key!=KEY_NONE)
		{
			time.SetElapsed(&tExit);
     4f8:	64 2c       	mov	r6, r4
			case KEY_DOWN:
				if (bWeek)
				{
					w--;
					if (w==254) w=7;
					if (w==0) w=7;
     4fa:	e7 e0       	ldi	r30, 0x07	; 7
     4fc:	9e 2e       	mov	r9, r30
	time.SetElapsed(&tBlink);
	time.SetElapsed(&tExit);
	for(;;)
	{
		//time to blink?
		if (time.GetElapsed(&tBlink)>500)
     4fe:	68 2d       	mov	r22, r8
     500:	77 2d       	mov	r23, r7
     502:	85 e3       	ldi	r24, 0x35	; 53
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
     50a:	65 3f       	cpi	r22, 0xF5	; 245
     50c:	71 40       	sbci	r23, 0x01	; 1
     50e:	81 05       	cpc	r24, r1
     510:	91 05       	cpc	r25, r1
     512:	38 f0       	brcs	.+14     	; 0x522 <_ZN16class_Feed_Timer8InitTimeEb+0xfc>
		{
			//clear blink time
			time.SetElapsed(&tBlink);
     514:	68 2d       	mov	r22, r8
     516:	77 2d       	mov	r23, r7
     518:	85 e3       	ldi	r24, 0x35	; 53
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
			//change blink state
			bBlink=!bBlink;
     520:	ba 24       	eor	r11, r10
		}
		//SHOW values
		switch (bBlink)
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	b8 16       	cp	r11, r24
     526:	09 f4       	brne	.+2      	; 0x52a <_ZN16class_Feed_Timer8InitTimeEb+0x104>
     528:	41 c0       	rjmp	.+130    	; 0x5ac <_ZN16class_Feed_Timer8InitTimeEb+0x186>
		{
			case false:
				if (bWeek)
     52a:	dd 20       	and	r13, r13
     52c:	69 f0       	breq	.+26     	; 0x548 <_ZN16class_Feed_Timer8InitTimeEb+0x122>
				{
					dp.Home();
     52e:	8e e2       	ldi	r24, 0x2E	; 46
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
					if (w==0xff)
     536:	89 85       	ldd	r24, Y+9	; 0x09
     538:	8f 3f       	cpi	r24, 0xFF	; 255
     53a:	09 f0       	breq	.+2      	; 0x53e <_ZN16class_Feed_Timer8InitTimeEb+0x118>
     53c:	43 c0       	rjmp	.+134    	; 0x5c4 <_ZN16class_Feed_Timer8InitTimeEb+0x19e>
					{
						dp.Cls();
     53e:	8e e2       	ldi	r24, 0x2E	; 46
     540:	93 e0       	ldi	r25, 0x03	; 3
     542:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
     546:	9e c0       	rjmp	.+316    	; 0x684 <_ZN16class_Feed_Timer8InitTimeEb+0x25e>
						dp.PutSF(GetWeekDayStr(w));
					}						
				}
				else
				{
					dp.DispSetPoint(2,false);
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	8e e2       	ldi	r24, 0x2E	; 46
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					dp.Home();
     554:	8e e2       	ldi	r24, 0x2E	; 46
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
					if (h==0xff)
     55c:	8c 85       	ldd	r24, Y+12	; 0x0c
     55e:	8f 3f       	cpi	r24, 0xFF	; 255
     560:	29 f4       	brne	.+10     	; 0x56c <_ZN16class_Feed_Timer8InitTimeEb+0x146>
					{
						dp.Cls();
     562:	8e e2       	ldi	r24, 0x2E	; 46
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
     56a:	14 c0       	rjmp	.+40     	; 0x594 <_ZN16class_Feed_Timer8InitTimeEb+0x16e>
					}
					else
					{
						sprintf(bf,"%02d",h);
     56c:	1f 92       	push	r1
     56e:	8f 93       	push	r24
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	ff 92       	push	r15
     576:	ef 92       	push	r14
     578:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
						dp.PutS(bf);
     57c:	60 e3       	ldi	r22, 0x30	; 48
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	8e e2       	ldi	r24, 0x2E	; 46
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
					}
					dp.Locate(3);
     594:	63 e0       	ldi	r22, 0x03	; 3
     596:	8e e2       	ldi	r24, 0x2E	; 46
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
					if (m==0xff)
     59e:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a0:	8f 3f       	cpi	r24, 0xFF	; 255
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <_ZN16class_Feed_Timer8InitTimeEb+0x180>
     5a4:	5b c0       	rjmp	.+182    	; 0x65c <_ZN16class_Feed_Timer8InitTimeEb+0x236>
					{
						dp.PutSF(PSTR("  "));
     5a6:	6d e6       	ldi	r22, 0x6D	; 109
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	53 c0       	rjmp	.+166    	; 0x652 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
						dp.PutS(bf);
					}						
				}
			break;
			case true:
				if (bWeek)
     5ac:	dd 20       	and	r13, r13
     5ae:	f9 f0       	breq	.+62     	; 0x5ee <_ZN16class_Feed_Timer8InitTimeEb+0x1c8>
				{
					dp.Home();
     5b0:	8e e2       	ldi	r24, 0x2E	; 46
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
					if (w==0xff)
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	8f 3f       	cpi	r24, 0xFF	; 255
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <_ZN16class_Feed_Timer8InitTimeEb+0x19e>
					{
						dp.PutSF(PSTR("DSEM"));
     5be:	60 e7       	ldi	r22, 0x70	; 112
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	47 c0       	rjmp	.+142    	; 0x652 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
					}
					else
					{
						dp.DispSetPoint(3,true);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	8e e2       	ldi	r24, 0x2E	; 46
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     5d0:	e9 85       	ldd	r30, Y+9	; 0x09
     5d2:	e1 50       	subi	r30, 0x01	; 1
     5d4:	e7 30       	cpi	r30, 0x07	; 7
     5d6:	40 f4       	brcc	.+16     	; 0x5e8 <_ZN16class_Feed_Timer8InitTimeEb+0x1c2>
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	e8 5e       	subi	r30, 0xE8	; 232
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	60 81       	ld	r22, Z
     5e4:	71 81       	ldd	r23, Z+1	; 0x01
     5e6:	35 c0       	rjmp	.+106    	; 0x652 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
     5e8:	68 e6       	ldi	r22, 0x68	; 104
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	32 c0       	rjmp	.+100    	; 0x652 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
						dp.PutSF(GetWeekDayStr(w));	
					}
				}
				else
				{
					dp.DispSetPoint(2,true);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	62 e0       	ldi	r22, 0x02	; 2
     5f2:	8e e2       	ldi	r24, 0x2E	; 46
     5f4:	93 e0       	ldi	r25, 0x03	; 3
     5f6:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					dp.Home();
     5fa:	8e e2       	ldi	r24, 0x2E	; 46
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
					if (h==0xff)
     602:	8c 85       	ldd	r24, Y+12	; 0x0c
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	39 f4       	brne	.+14     	; 0x616 <_ZN16class_Feed_Timer8InitTimeEb+0x1f0>
					{
						dp.PutSF(PSTR("HH"));
     608:	65 e7       	ldi	r22, 0x75	; 117
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	8e e2       	ldi	r24, 0x2E	; 46
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
     614:	14 c0       	rjmp	.+40     	; 0x63e <_ZN16class_Feed_Timer8InitTimeEb+0x218>
					}
					else
					{
						sprintf(bf,"%02d",h);
     616:	1f 92       	push	r1
     618:	8f 93       	push	r24
     61a:	1f 93       	push	r17
     61c:	0f 93       	push	r16
     61e:	ff 92       	push	r15
     620:	ef 92       	push	r14
     622:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
						dp.PutS(bf);
     626:	60 e3       	ldi	r22, 0x30	; 48
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	8e e2       	ldi	r24, 0x2E	; 46
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
					}
					dp.Locate(3);
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	8e e2       	ldi	r24, 0x2E	; 46
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
					if (m==0xff)
     648:	8b 85       	ldd	r24, Y+11	; 0x0b
     64a:	8f 3f       	cpi	r24, 0xFF	; 255
     64c:	39 f4       	brne	.+14     	; 0x65c <_ZN16class_Feed_Timer8InitTimeEb+0x236>
					{
						dp.PutSF(PSTR("MM"));
     64e:	68 e7       	ldi	r22, 0x78	; 120
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8e e2       	ldi	r24, 0x2E	; 46
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
     65a:	14 c0       	rjmp	.+40     	; 0x684 <_ZN16class_Feed_Timer8InitTimeEb+0x25e>
					}
					else
					{
						sprintf(bf,"%02d",m);
     65c:	1f 92       	push	r1
     65e:	8f 93       	push	r24
     660:	1f 93       	push	r17
     662:	0f 93       	push	r16
     664:	ff 92       	push	r15
     666:	ef 92       	push	r14
     668:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
						dp.PutS(bf);
     66c:	60 e3       	ldi	r22, 0x30	; 48
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	8e e2       	ldi	r24, 0x2E	; 46
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
					}
				}
			break;
		}
		//read keys
		key=dp.KeyReadFlash();
     684:	8e e2       	ldi	r24, 0x2E	; 46
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     68c:	48 2e       	mov	r4, r24
		if (key!=KEY_NONE)
     68e:	88 23       	and	r24, r24
     690:	31 f0       	breq	.+12     	; 0x69e <_ZN16class_Feed_Timer8InitTimeEb+0x278>
		{
			time.SetElapsed(&tExit);
     692:	66 2d       	mov	r22, r6
     694:	75 2d       	mov	r23, r5
     696:	85 e3       	ldi	r24, 0x35	; 53
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
		}
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT && forceInit)
     69e:	66 2d       	mov	r22, r6
     6a0:	75 2d       	mov	r23, r5
     6a2:	85 e3       	ldi	r24, 0x35	; 53
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
     6aa:	61 33       	cpi	r22, 0x31	; 49
     6ac:	75 47       	sbci	r23, 0x75	; 117
     6ae:	81 05       	cpc	r24, r1
     6b0:	91 05       	cpc	r25, r1
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <_ZN16class_Feed_Timer8InitTimeEb+0x290>
     6b4:	e0 c0       	rjmp	.+448    	; 0x876 <_ZN16class_Feed_Timer8InitTimeEb+0x450>
     6b6:	c1 10       	cpse	r12, r1
     6b8:	ea c0       	rjmp	.+468    	; 0x88e <_ZN16class_Feed_Timer8InitTimeEb+0x468>
     6ba:	dd c0       	rjmp	.+442    	; 0x876 <_ZN16class_Feed_Timer8InitTimeEb+0x450>
		//process key
		switch (key)
		{
			//pump hour
			case KEY_DOWN:
				if (bWeek)
     6bc:	dd 20       	and	r13, r13
     6be:	61 f0       	breq	.+24     	; 0x6d8 <_ZN16class_Feed_Timer8InitTimeEb+0x2b2>
				{
					w--;
     6c0:	89 85       	ldd	r24, Y+9	; 0x09
     6c2:	81 50       	subi	r24, 0x01	; 1
					if (w==254) w=7;
     6c4:	8e 3f       	cpi	r24, 0xFE	; 254
     6c6:	11 f0       	breq	.+4      	; 0x6cc <_ZN16class_Feed_Timer8InitTimeEb+0x2a6>
		{
			//pump hour
			case KEY_DOWN:
				if (bWeek)
				{
					w--;
     6c8:	89 87       	std	Y+9, r24	; 0x09
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <_ZN16class_Feed_Timer8InitTimeEb+0x2a8>
					if (w==254) w=7;
     6cc:	99 86       	std	Y+9, r9	; 0x09
					if (w==0) w=7;
     6ce:	89 85       	ldd	r24, Y+9	; 0x09
     6d0:	81 11       	cpse	r24, r1
     6d2:	1c c0       	rjmp	.+56     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
     6d4:	99 86       	std	Y+9, r9	; 0x09
     6d6:	1a c0       	rjmp	.+52     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
				}
				else
				{
					if (++h>23) h=0;						
     6d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	8c 87       	std	Y+12, r24	; 0x0c
     6de:	88 31       	cpi	r24, 0x18	; 24
     6e0:	a8 f0       	brcs	.+42     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
     6e2:	1c 86       	std	Y+12, r1	; 0x0c
     6e4:	13 c0       	rjmp	.+38     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
				}
				time.DelayMsI(200);
			break;
			//pump minute
			case KEY_UP:
				if (bWeek)
     6e6:	dd 20       	and	r13, r13
     6e8:	59 f0       	breq	.+22     	; 0x700 <_ZN16class_Feed_Timer8InitTimeEb+0x2da>
				{
					w++;
     6ea:	89 85       	ldd	r24, Y+9	; 0x09
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
					if (w==0) w=1;
     6ee:	11 f0       	breq	.+4      	; 0x6f4 <_ZN16class_Feed_Timer8InitTimeEb+0x2ce>
			break;
			//pump minute
			case KEY_UP:
				if (bWeek)
				{
					w++;
     6f0:	89 87       	std	Y+9, r24	; 0x09
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <_ZN16class_Feed_Timer8InitTimeEb+0x2d0>
					if (w==0) w=1;
     6f4:	a9 86       	std	Y+9, r10	; 0x09
					if (w>7) w=1;
     6f6:	89 85       	ldd	r24, Y+9	; 0x09
     6f8:	88 30       	cpi	r24, 0x08	; 8
     6fa:	40 f0       	brcs	.+16     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
     6fc:	a9 86       	std	Y+9, r10	; 0x09
     6fe:	06 c0       	rjmp	.+12     	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
				}
				else
				{
					if (++m>59) m=0;						
     700:	8b 85       	ldd	r24, Y+11	; 0x0b
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	8b 87       	std	Y+11, r24	; 0x0b
     706:	8c 33       	cpi	r24, 0x3C	; 60
     708:	08 f0       	brcs	.+2      	; 0x70c <_ZN16class_Feed_Timer8InitTimeEb+0x2e6>
     70a:	1b 86       	std	Y+11, r1	; 0x0b
				}
				time.DelayMsI(200);
     70c:	48 ec       	ldi	r20, 0xC8	; 200
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	85 e3       	ldi	r24, 0x35	; 53
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
			break;
     71c:	f0 ce       	rjmp	.-544    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
			//check if time to update week day of exit
			case KEY_ENTER:
				dp.KeyWaitRelease();
     71e:	8e e2       	ldi	r24, 0x2E	; 46
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
				time.DelayMsI(KEY_DELAY);
     726:	4e e5       	ldi	r20, 0x5E	; 94
     728:	51 e0       	ldi	r21, 0x01	; 1
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	85 e3       	ldi	r24, 0x35	; 53
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
				if (bWeek)
     736:	dd 20       	and	r13, r13
     738:	09 f4       	brne	.+2      	; 0x73c <_ZN16class_Feed_Timer8InitTimeEb+0x316>
     73a:	3e c0       	rjmp	.+124    	; 0x7b8 <_ZN16class_Feed_Timer8InitTimeEb+0x392>
				{
					if (w==0xff)
     73c:	89 85       	ldd	r24, Y+9	; 0x09
     73e:	8f 3f       	cpi	r24, 0xFF	; 255
     740:	19 f5       	brne	.+70     	; 0x788 <_ZN16class_Feed_Timer8InitTimeEb+0x362>
     742:	45 e0       	ldi	r20, 0x05	; 5
     744:	44 2e       	mov	r4, r20
					{
						for(uint8_t i=0;i<5;i++)
						{
							dp.Home();
     746:	8e e2       	ldi	r24, 0x2E	; 46
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
							dp.PutSF(PSTR("DSEM"));
     74e:	6b e7       	ldi	r22, 0x7B	; 123
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8e e2       	ldi	r24, 0x2E	; 46
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
							time.DelayMsI(KEY_DELAY);
     75a:	4e e5       	ldi	r20, 0x5E	; 94
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	85 e3       	ldi	r24, 0x35	; 53
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
							dp.Cls();
     76a:	8e e2       	ldi	r24, 0x2E	; 46
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
							time.DelayMsI(KEY_DELAY);
     772:	4e e5       	ldi	r20, 0x5E	; 94
     774:	51 e0       	ldi	r21, 0x01	; 1
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	85 e3       	ldi	r24, 0x35	; 53
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
     782:	4a 94       	dec	r4
				time.DelayMsI(KEY_DELAY);
				if (bWeek)
				{
					if (w==0xff)
					{
						for(uint8_t i=0;i<5;i++)
     784:	01 f7       	brne	.-64     	; 0x746 <_ZN16class_Feed_Timer8InitTimeEb+0x320>
     786:	bb ce       	rjmp	.-650    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
						}							
					}
					else
					{
						//clear dot clear screen
						dp.DispSetPoint(3,false);
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	8e e2       	ldi	r24, 0x2E	; 46
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
						dp.Cls();
     794:	8e e2       	ldi	r24, 0x2E	; 46
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
						//set time
						cli();
     79c:	f8 94       	cli
						Ptrs->Hour=h;
     79e:	e0 91 01 01 	lds	r30, 0x0101
     7a2:	f0 91 02 01 	lds	r31, 0x0102
     7a6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7a8:	80 83       	st	Z, r24
						Ptrs->Minute=m;
     7aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ac:	81 83       	std	Z+1, r24	; 0x01
						Ptrs->Second=0;
     7ae:	12 82       	std	Z+2, r1	; 0x02
						Ptrs->WeekDay=w;
     7b0:	89 85       	ldd	r24, Y+9	; 0x09
     7b2:	83 83       	std	Z+3, r24	; 0x03
						sei();
     7b4:	78 94       	sei
     7b6:	7b c0       	rjmp	.+246    	; 0x8ae <_ZN16class_Feed_Timer8InitTimeEb+0x488>
						return;					
					}
				}
				else
				{
					if (h==0xff)
     7b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ba:	8f 3f       	cpi	r24, 0xFF	; 255
     7bc:	49 f5       	brne	.+82     	; 0x810 <_ZN16class_Feed_Timer8InitTimeEb+0x3ea>
					{
						dp.DispSetPoint(2,false);
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	8e e2       	ldi	r24, 0x2E	; 46
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     7ca:	35 e0       	ldi	r19, 0x05	; 5
     7cc:	43 2e       	mov	r4, r19
						for(uint8_t i=0;i<5;i++)
						{
							dp.Home();
     7ce:	8e e2       	ldi	r24, 0x2E	; 46
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
							dp.PutSF(PSTR("HH  "));
     7d6:	60 e8       	ldi	r22, 0x80	; 128
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	8e e2       	ldi	r24, 0x2E	; 46
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
							time.DelayMsI(KEY_DELAY);
     7e2:	4e e5       	ldi	r20, 0x5E	; 94
     7e4:	51 e0       	ldi	r21, 0x01	; 1
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	85 e3       	ldi	r24, 0x35	; 53
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
							dp.Cls();
     7f2:	8e e2       	ldi	r24, 0x2E	; 46
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
							time.DelayMsI(KEY_DELAY);
     7fa:	4e e5       	ldi	r20, 0x5E	; 94
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	85 e3       	ldi	r24, 0x35	; 53
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
     80a:	4a 94       	dec	r4
				else
				{
					if (h==0xff)
					{
						dp.DispSetPoint(2,false);
						for(uint8_t i=0;i<5;i++)
     80c:	01 f7       	brne	.-64     	; 0x7ce <_ZN16class_Feed_Timer8InitTimeEb+0x3a8>
     80e:	77 ce       	rjmp	.-786    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
							time.DelayMsI(KEY_DELAY);
						}
					}
					else
					{
						if (m==0xff)
     810:	8b 85       	ldd	r24, Y+11	; 0x0b
						{
							dp.DispSetPoint(2,false);
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	62 e0       	ldi	r22, 0x02	; 2
							time.DelayMsI(KEY_DELAY);
						}
					}
					else
					{
						if (m==0xff)
     816:	8f 3f       	cpi	r24, 0xFF	; 255
     818:	39 f5       	brne	.+78     	; 0x868 <_ZN16class_Feed_Timer8InitTimeEb+0x442>
						{
							dp.DispSetPoint(2,false);
     81a:	8e e2       	ldi	r24, 0x2E	; 46
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     822:	25 e0       	ldi	r18, 0x05	; 5
     824:	42 2e       	mov	r4, r18
							for(uint8_t i=0;i<5;i++)
							{
								dp.Home();
     826:	8e e2       	ldi	r24, 0x2E	; 46
     828:	93 e0       	ldi	r25, 0x03	; 3
     82a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN19class_Display_7_Seg4HomeEv>
								dp.PutSF(PSTR("  MM"));
     82e:	65 e8       	ldi	r22, 0x85	; 133
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	8e e2       	ldi	r24, 0x2E	; 46
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
								time.DelayMsI(KEY_DELAY);
     83a:	4e e5       	ldi	r20, 0x5E	; 94
     83c:	51 e0       	ldi	r21, 0x01	; 1
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	85 e3       	ldi	r24, 0x35	; 53
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
								dp.Cls();
     84a:	8e e2       	ldi	r24, 0x2E	; 46
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
								time.DelayMsI(KEY_DELAY);
     852:	4e e5       	ldi	r20, 0x5E	; 94
     854:	51 e0       	ldi	r21, 0x01	; 1
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	85 e3       	ldi	r24, 0x35	; 53
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
     862:	4a 94       	dec	r4
					else
					{
						if (m==0xff)
						{
							dp.DispSetPoint(2,false);
							for(uint8_t i=0;i<5;i++)
     864:	01 f7       	brne	.-64     	; 0x826 <_ZN16class_Feed_Timer8InitTimeEb+0x400>
     866:	4b ce       	rjmp	.-874    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
							}
						}
						else
						{
							//clear second point
							dp.DispSetPoint(2,false);
     868:	8e e2       	ldi	r24, 0x2E	; 46
     86a:	93 e0       	ldi	r25, 0x03	; 3
     86c:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
							//set input week day mode
							bWeek=true;								
     870:	dd 24       	eor	r13, r13
     872:	d3 94       	inc	r13
     874:	44 ce       	rjmp	.-888    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
			dp.DispSetPoint(2,false);
			dp.DispSetPoint(3,false);
			return;
		}
		//process key
		switch (key)
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	48 16       	cp	r4, r24
     87a:	09 f4       	brne	.+2      	; 0x87e <_ZN16class_Feed_Timer8InitTimeEb+0x458>
     87c:	34 cf       	rjmp	.-408    	; 0x6e6 <_ZN16class_Feed_Timer8InitTimeEb+0x2c0>
     87e:	23 e0       	ldi	r18, 0x03	; 3
     880:	42 16       	cp	r4, r18
     882:	09 f4       	brne	.+2      	; 0x886 <_ZN16class_Feed_Timer8InitTimeEb+0x460>
     884:	4c cf       	rjmp	.-360    	; 0x71e <_ZN16class_Feed_Timer8InitTimeEb+0x2f8>
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	48 12       	cpse	r4, r24
     88a:	39 ce       	rjmp	.-910    	; 0x4fe <_ZN16class_Feed_Timer8InitTimeEb+0xd8>
     88c:	17 cf       	rjmp	.-466    	; 0x6bc <_ZN16class_Feed_Timer8InitTimeEb+0x296>
		{
			time.SetElapsed(&tExit);
		}
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT && forceInit)
		{
			dp.Cls();
     88e:	8e e2       	ldi	r24, 0x2E	; 46
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
			dp.DispSetPoint(2,false);
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	62 e0       	ldi	r22, 0x02	; 2
     89a:	8e e2       	ldi	r24, 0x2E	; 46
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.DispSetPoint(3,false);
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	8e e2       	ldi	r24, 0x2E	; 46
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					}
				}
			break;
		}
	}
}
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	7f 90       	pop	r7
     8d4:	6f 90       	pop	r6
     8d6:	5f 90       	pop	r5
     8d8:	4f 90       	pop	r4
     8da:	08 95       	ret

000008dc <_ZN16class_Feed_Timer8ShowLIVEEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ShowLIVE()
{
     8dc:	cf 93       	push	r28
	static uint8_t	live=0;
	
	
	if (++live>10)
     8de:	80 91 3c 03 	lds	r24, 0x033C
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	80 93 3c 03 	sts	0x033C, r24
     8e8:	8b 30       	cpi	r24, 0x0B	; 11
     8ea:	30 f1       	brcs	.+76     	; 0x938 <__stack+0x39>
	{
		//enable IO State
		dp.EnableIO();
     8ec:	8e e2       	ldi	r24, 0x2E	; 46
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN19class_Display_7_Seg8EnableIOEv>
		live=0;
     8f4:	10 92 3c 03 	sts	0x033C, r1
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     8f8:	80 91 6e 00 	lds	r24, 0x006E
     8fc:	82 60       	ori	r24, 0x02	; 2
     8fe:	80 93 6e 00 	sts	0x006E, r24
		dp.EnableIO();
		live=0;
		//enable timer 0
		SetTimer0_ON();
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     902:	c1 e0       	ldi	r28, 0x01	; 1
		{
			dp.DispSetPoint(i,true);
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	6c 2f       	mov	r22, r28
     908:	8e e2       	ldi	r24, 0x2E	; 46
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			time.DelayMsI(65);
     910:	41 e4       	ldi	r20, 0x41	; 65
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	85 e3       	ldi	r24, 0x35	; 53
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
			dp.DispSetPoint(i,false);
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	6c 2f       	mov	r22, r28
     924:	8e e2       	ldi	r24, 0x2E	; 46
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
		dp.EnableIO();
		live=0;
		//enable timer 0
		SetTimer0_ON();
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     92c:	cf 5f       	subi	r28, 0xFF	; 255
     92e:	c5 30       	cpi	r28, 0x05	; 5
     930:	49 f7       	brne	.-46     	; 0x904 <__stack+0x5>
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
	}
}
     932:	cf 91       	pop	r28
			dp.DispSetPoint(i,true);
			time.DelayMsI(65);
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
     934:	0c 94 c1 00 	jmp	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
	}
}
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <_ZN16class_Feed_Timer8EventAddER11EventStruct>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  return true if Add is okf			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool class_Feed_Timer::EventAdd(struct EventStruct &Event)
{
     93c:	bf 92       	push	r11
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	27 97       	sbiw	r28, 0x07	; 7
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	8b 01       	movw	r16, r22
	uint8_t tmp,sreg;
	struct EventStruct EventTmp;
	
	//save SREG
	sreg=SREG;
     960:	bf b6       	in	r11, 0x3f	; 63
	//disable interrupts
	cli();
     962:	f8 94       	cli
	//if event is diary then weekdays=0
	if (Event.Event==EVENT_TYPE::DIARY) Event.WeekDays=0;
     964:	fb 01       	movw	r30, r22
     966:	90 81       	ld	r25, Z
     968:	92 30       	cpi	r25, 0x02	; 2
     96a:	09 f4       	brne	.+2      	; 0x96e <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x32>
     96c:	13 82       	std	Z+3, r1	; 0x03
	//compute Xor Check
	Event.XorCheck=Event.Event ^ Event.Hour ^ Event.Minute ^ Event.WeekDays ^ Event.MinuteMotorON ^ Event.SecondMotorON;
     96e:	f8 01       	movw	r30, r16
     970:	81 81       	ldd	r24, Z+1	; 0x01
     972:	89 27       	eor	r24, r25
     974:	92 81       	ldd	r25, Z+2	; 0x02
     976:	89 27       	eor	r24, r25
     978:	93 81       	ldd	r25, Z+3	; 0x03
     97a:	89 27       	eor	r24, r25
     97c:	94 81       	ldd	r25, Z+4	; 0x04
     97e:	89 27       	eor	r24, r25
     980:	95 81       	ldd	r25, Z+5	; 0x05
     982:	89 27       	eor	r24, r25
     984:	86 83       	std	Z+6, r24	; 0x06
	//Get Event Size
	tmp=eeprom_read_byte(&EE_EventsSize);
     986:	8c eb       	ldi	r24, 0xBC	; 188
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__eerd_byte_m328p>
	tmp++;
     98e:	e8 2e       	mov	r14, r24
     990:	e3 94       	inc	r14
     992:	f4 e6       	ldi	r31, 0x64	; 100
     994:	fe 15       	cp	r31, r14
     996:	10 f4       	brcc	.+4      	; 0x99c <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x60>
     998:	f4 e6       	ldi	r31, 0x64	; 100
     99a:	ef 2e       	mov	r14, r31
	if (tmp>EVENT_SIZE) tmp=EVENT_SIZE;
	eeprom_write_byte(&EE_EventsSize,tmp);
     99c:	6e 2d       	mov	r22, r14
     99e:	8c eb       	ldi	r24, 0xBC	; 188
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__eewr_byte_m328p>
	//Add new event
	eeprom_write_block(&Event,&EE_Events[tmp-1],sizeof(Event));
     9a6:	f1 2c       	mov	r15, r1
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	e8 1a       	sub	r14, r24
     9ac:	f1 08       	sbc	r15, r1
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	8e 9d       	mul	r24, r14
     9b2:	60 01       	movw	r12, r0
     9b4:	8f 9d       	mul	r24, r15
     9b6:	d0 0c       	add	r13, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	e0 e0       	ldi	r30, 0x00	; 0
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	ce 0e       	add	r12, r30
     9c0:	df 1e       	adc	r13, r31
     9c2:	47 e0       	ldi	r20, 0x07	; 7
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	b6 01       	movw	r22, r12
     9c8:	c8 01       	movw	r24, r16
     9ca:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__eewr_block_m328p>
	//read back to check if write ok
	eeprom_read_block(&EventTmp,&EE_Events[tmp-1],sizeof(Event));
     9ce:	47 e0       	ldi	r20, 0x07	; 7
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	b6 01       	movw	r22, r12
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__eerd_block_m328p>
	//clear flags and counter
	EventsCount[tmp-1].Flags.SeparateFlag.LoadFrom=false;
     9dc:	85 e0       	ldi	r24, 0x05	; 5
     9de:	8e 9d       	mul	r24, r14
     9e0:	f0 01       	movw	r30, r0
     9e2:	8f 9d       	mul	r24, r15
     9e4:	f0 0d       	add	r31, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	e6 5c       	subi	r30, 0xC6	; 198
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	80 81       	ld	r24, Z
	EventsCount[tmp-1].Flags.SeparateFlag.Counting=false;
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	8d 7f       	andi	r24, 0xFD	; 253
     9f2:	80 83       	st	Z, r24
	EventsCount[tmp-1].Count=0;
     9f4:	11 82       	std	Z+1, r1	; 0x01
     9f6:	12 82       	std	Z+2, r1	; 0x02
     9f8:	13 82       	std	Z+3, r1	; 0x03
     9fa:	14 82       	std	Z+4, r1	; 0x04
	//restore SREG
	SREG=sreg;
     9fc:	bf be       	out	0x3f, r11	; 63
	//return state
	if (memcmp(&Event,&EventTmp,sizeof(Event))==0)
     9fe:	47 e0       	ldi	r20, 0x07	; 7
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	c8 01       	movw	r24, r16
     a0a:	0e 94 5f 0b 	call	0x16be	; 0x16be <memcmp>
     a0e:	9c 01       	movw	r18, r24
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	23 2b       	or	r18, r19
     a14:	09 f0       	breq	.+2      	; 0xa18 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0xdc>
     a16:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	else
		return false;
}
     a18:	27 96       	adiw	r28, 0x07	; 7
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	1f 91       	pop	r17
     a2a:	0f 91       	pop	r16
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	df 90       	pop	r13
     a32:	cf 90       	pop	r12
     a34:	bf 90       	pop	r11
     a36:	08 95       	ret

00000a38 <_ZN16class_Feed_Timer13ProcessInputsEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ProcessInputs()
{
     a38:	8f 92       	push	r8
     a3a:	9f 92       	push	r9
     a3c:	af 92       	push	r10
     a3e:	bf 92       	push	r11
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	2c 97       	sbiw	r28, 0x0c	; 12
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	7c 01       	movw	r14, r24
	uint32_t	tExit;
	uint32_t	tShow;
	
	
	//Enable I/O Timer 0
	dp.EnableIO();
     a62:	8e e2       	ldi	r24, 0x2E	; 46
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     a6a:	80 91 6e 00 	lds	r24, 0x006E
     a6e:	82 60       	ori	r24, 0x02	; 2
     a70:	80 93 6e 00 	sts	0x006E, r24
	
	//Enable I/O Timer 0
	dp.EnableIO();
	this->SetTimer0_ON();
	//Clear Time To Exit
	time.SetElapsed(&tExit);
     a74:	6e 01       	movw	r12, r28
     a76:	25 e0       	ldi	r18, 0x05	; 5
     a78:	c2 0e       	add	r12, r18
     a7a:	d1 1c       	adc	r13, r1
     a7c:	b6 01       	movw	r22, r12
     a7e:	85 e3       	ldi	r24, 0x35	; 53
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
	
	key=dp.KeyReadFlash();
     a86:	8e e2       	ldi	r24, 0x2E	; 46
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
	
	switch (key)
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	21 f0       	breq	.+8      	; 0xa9a <_ZN16class_Feed_Timer13ProcessInputsEv+0x62>
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	09 f0       	breq	.+2      	; 0xa98 <_ZN16class_Feed_Timer13ProcessInputsEv+0x60>
     a96:	71 c1       	rjmp	.+738    	; 0xd7a <_ZN16class_Feed_Timer13ProcessInputsEv+0x342>
     a98:	e0 c0       	rjmp	.+448    	; 0xc5a <_ZN16class_Feed_Timer13ProcessInputsEv+0x222>
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
					this->GetTime(h,m,s,w);
					sprintf(bf,"%02d%02d",h,m);
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	a8 2e       	mov	r10, r24
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	b8 2e       	mov	r11, r24
     aa2:	90 e3       	ldi	r25, 0x30	; 48
     aa4:	c9 2e       	mov	r12, r25
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	d9 2e       	mov	r13, r25
		/////////////////////
		case KEY_DOWN:
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	85 e3       	ldi	r24, 0x35	; 53
     ab2:	93 e0       	ldi	r25, 0x03	; 3
     ab4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
				dp.DispSetPoint(2,true);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	62 e0       	ldi	r22, 0x02	; 2
     abc:	8e e2       	ldi	r24, 0x2E	; 46
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
				do{
					this->GetTime(h,m,s,w);
     ac4:	8e 01       	movw	r16, r28
     ac6:	07 5f       	subi	r16, 0xF7	; 247
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	9e 01       	movw	r18, r28
     acc:	26 5f       	subi	r18, 0xF6	; 246
     ace:	3f 4f       	sbci	r19, 0xFF	; 255
     ad0:	ae 01       	movw	r20, r28
     ad2:	45 5f       	subi	r20, 0xF5	; 245
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	be 01       	movw	r22, r28
     ad8:	64 5f       	subi	r22, 0xF4	; 244
     ada:	7f 4f       	sbci	r23, 0xFF	; 255
     adc:	c7 01       	movw	r24, r14
     ade:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					sprintf(bf,"%02d%02d",h,m);
     ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae4:	1f 92       	push	r1
     ae6:	8f 93       	push	r24
     ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
     aea:	1f 92       	push	r1
     aec:	8f 93       	push	r24
     aee:	bf 92       	push	r11
     af0:	af 92       	push	r10
     af2:	df 92       	push	r13
     af4:	cf 92       	push	r12
     af6:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
					dp.Locate(1);
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	8e e2       	ldi	r24, 0x2E	; 46
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
					dp.PutS(bf);
     b04:	60 e3       	ldi	r22, 0x30	; 48
     b06:	71 e0       	ldi	r23, 0x01	; 1
     b08:	8e e2       	ldi	r24, 0x2E	; 46
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<1500);
     b10:	be 01       	movw	r22, r28
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	85 e3       	ldi	r24, 0x35	; 53
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	6c 3d       	cpi	r22, 0xDC	; 220
     b2a:	75 40       	sbci	r23, 0x05	; 5
     b2c:	81 05       	cpc	r24, r1
     b2e:	91 05       	cpc	r25, r1
     b30:	48 f2       	brcs	.-110    	; 0xac4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x8c>
					this->GetTime(h,m,s,w);
					sprintf(bf,"%02d%02d",h,m);
					dp.Locate(1);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	62 e0       	ldi	r22, 0x02	; 2
     b36:	8e e2       	ldi	r24, 0x2E	; 46
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
				//show WeekDay
				time.SetElapsed(&tShow);
     b3e:	be 01       	movw	r22, r28
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	85 e3       	ldi	r24, 0x35	; 53
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
				do{
					this->GetTime(h,m,s,w);
     b4c:	8e 01       	movw	r16, r28
     b4e:	07 5f       	subi	r16, 0xF7	; 247
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	9e 01       	movw	r18, r28
     b54:	26 5f       	subi	r18, 0xF6	; 246
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	ae 01       	movw	r20, r28
     b5a:	45 5f       	subi	r20, 0xF5	; 245
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	be 01       	movw	r22, r28
     b60:	64 5f       	subi	r22, 0xF4	; 244
     b62:	7f 4f       	sbci	r23, 0xFF	; 255
     b64:	c7 01       	movw	r24, r14
     b66:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	8e e2       	ldi	r24, 0x2E	; 46
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
     b74:	e9 85       	ldd	r30, Y+9	; 0x09
     b76:	e1 50       	subi	r30, 0x01	; 1
     b78:	e7 30       	cpi	r30, 0x07	; 7
     b7a:	40 f4       	brcc	.+16     	; 0xb8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x154>
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e8 5e       	subi	r30, 0xE8	; 232
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	60 81       	ld	r22, Z
     b88:	71 81       	ldd	r23, Z+1	; 0x01
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <_ZN16class_Feed_Timer13ProcessInputsEv+0x158>
     b8c:	68 e6       	ldi	r22, 0x68	; 104
     b8e:	70 e0       	ldi	r23, 0x00	; 0
					dp.PutSF(this->GetWeekDayStr(w));
     b90:	8e e2       	ldi	r24, 0x2E	; 46
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
				} while (time.GetElapsed(&tShow)<1500);				
     b98:	be 01       	movw	r22, r28
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	85 e3       	ldi	r24, 0x35	; 53
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
				//show WeekDay
				time.SetElapsed(&tShow);
				do{
     ba6:	6c 3d       	cpi	r22, 0xDC	; 220
     ba8:	75 40       	sbci	r23, 0x05	; 5
     baa:	81 05       	cpc	r24, r1
     bac:	91 05       	cpc	r25, r1
     bae:	70 f2       	brcs	.-100    	; 0xb4c <_ZN16class_Feed_Timer13ProcessInputsEv+0x114>
					this->GetTime(h,m,s,w);
					dp.Locate(1);
					dp.PutSF(this->GetWeekDayStr(w));
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
     bb0:	be 01       	movw	r22, r28
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	85 e3       	ldi	r24, 0x35	; 53
     bb8:	93 e0       	ldi	r25, 0x03	; 3
     bba:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
				dp.Cls();
     bbe:	8e e2       	ldi	r24, 0x2E	; 46
     bc0:	93 e0       	ldi	r25, 0x03	; 3
     bc2:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
				do{
					this->GetTime(h,m,s,w);
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
     bc6:	1c e0       	ldi	r17, 0x0C	; 12
     bc8:	81 2e       	mov	r8, r17
     bca:	11 e0       	ldi	r17, 0x01	; 1
     bcc:	91 2e       	mov	r9, r17
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
					this->GetTime(h,m,s,w);
     bce:	8e 01       	movw	r16, r28
     bd0:	07 5f       	subi	r16, 0xF7	; 247
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	9e 01       	movw	r18, r28
     bd6:	26 5f       	subi	r18, 0xF6	; 246
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
     bda:	ae 01       	movw	r20, r28
     bdc:	45 5f       	subi	r20, 0xF5	; 245
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	be 01       	movw	r22, r28
     be2:	64 5f       	subi	r22, 0xF4	; 244
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	c7 01       	movw	r24, r14
     be8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	8e e2       	ldi	r24, 0x2E	; 46
     bf0:	93 e0       	ldi	r25, 0x03	; 3
     bf2:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
					sprintf(bf,"  %02d",s);
     bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bf8:	1f 92       	push	r1
     bfa:	8f 93       	push	r24
     bfc:	9f 92       	push	r9
     bfe:	8f 92       	push	r8
     c00:	df 92       	push	r13
     c02:	cf 92       	push	r12
     c04:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
					dp.PutS(bf);
     c08:	60 e3       	ldi	r22, 0x30	; 48
     c0a:	71 e0       	ldi	r23, 0x01	; 1
     c0c:	8e e2       	ldi	r24, 0x2E	; 46
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<4000);				
     c14:	be 01       	movw	r22, r28
     c16:	6f 5f       	subi	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	85 e3       	ldi	r24, 0x35	; 53
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
					dp.PutSF(this->GetWeekDayStr(w));
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	60 3a       	cpi	r22, 0xA0	; 160
     c30:	7f 40       	sbci	r23, 0x0F	; 15
     c32:	81 05       	cpc	r24, r1
     c34:	91 05       	cpc	r25, r1
     c36:	58 f2       	brcs	.-106    	; 0xbce <_ZN16class_Feed_Timer13ProcessInputsEv+0x196>
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<4000);				
				//exit if key none
				key=dp.KeyReadFlash();
     c38:	8e e2       	ldi	r24, 0x2E	; 46
     c3a:	93 e0       	ldi	r25, 0x03	; 3
     c3c:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
				if (key==KEY_NONE)
     c40:	81 11       	cpse	r24, r1
     c42:	33 cf       	rjmp	.-410    	; 0xaaa <_ZN16class_Feed_Timer13ProcessInputsEv+0x72>
				{
					//disable time and IO
					dp.Cls();
     c44:	8e e2       	ldi	r24, 0x2E	; 46
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
					dp.DispSetPoint(2,false);
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	8e e2       	ldi	r24, 0x2E	; 46
     c52:	93 e0       	ldi	r25, 0x03	; 3
     c54:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     c58:	90 c0       	rjmp	.+288    	; 0xd7a <_ZN16class_Feed_Timer13ProcessInputsEv+0x342>
		/////////////////////
		// KEY UP? 
		/////////////////////
		case KEY_UP:
			//show MENU Item
			dp.Locate(1);
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	8e e2       	ldi	r24, 0x2E	; 46
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
			dp.PutSF(this->GetMenuItemStr(menuItem));
     c64:	6f e8       	ldi	r22, 0x8F	; 143
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	8e e2       	ldi	r24, 0x2E	; 46
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
			//wait key release
			dp.KeyWaitRelease();
     c70:	8e e2       	ldi	r24, 0x2E	; 46
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
			time.DelayMsI(KEY_DELAY);
     c78:	4e e5       	ldi	r20, 0x5E	; 94
     c7a:	51 e0       	ldi	r21, 0x01	; 1
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	85 e3       	ldi	r24, 0x35	; 53
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	#define		TIME_TO_EXIT	30000
	
	//My vars
	char		key;
	uint8_t		h,m,s,w,
				menuItem=1;
     c88:	11 e0       	ldi	r17, 0x01	; 1
				dp.Locate(1);
				dp.PutSF(this->GetMenuItemStr(menuItem));
				//read key again
				key=dp.KeyReadFlash();
				//set time to exit if any key pressed
				if (key!=KEY_NONE) time.SetElapsed(&tExit);
     c8a:	bd 2c       	mov	r11, r13
			dp.KeyWaitRelease();
			time.DelayMsI(KEY_DELAY);
			for(;;)
			{
				//show MENU Item
				dp.Locate(1);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	8e e2       	ldi	r24, 0x2E	; 46
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
     c96:	01 2f       	mov	r16, r17
     c98:	01 50       	subi	r16, 0x01	; 1
     c9a:	05 30       	cpi	r16, 0x05	; 5
     c9c:	48 f4       	brcc	.+18     	; 0xcb0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x278>
     c9e:	e0 2f       	mov	r30, r16
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ea 5d       	subi	r30, 0xDA	; 218
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	60 81       	ld	r22, Z
     cac:	71 81       	ldd	r23, Z+1	; 0x01
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x27c>
     cb0:	6a e8       	ldi	r22, 0x8A	; 138
     cb2:	70 e0       	ldi	r23, 0x00	; 0
				dp.PutSF(this->GetMenuItemStr(menuItem));
     cb4:	8e e2       	ldi	r24, 0x2E	; 46
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
				//read key again
				key=dp.KeyReadFlash();
     cbc:	8e e2       	ldi	r24, 0x2E	; 46
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     cc4:	d8 2e       	mov	r13, r24
				//set time to exit if any key pressed
				if (key!=KEY_NONE) time.SetElapsed(&tExit);
     cc6:	88 23       	and	r24, r24
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <_ZN16class_Feed_Timer13ProcessInputsEv+0x29e>
     cca:	6c 2d       	mov	r22, r12
     ccc:	7b 2d       	mov	r23, r11
     cce:	85 e3       	ldi	r24, 0x35	; 53
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <_ZN10class_Time10SetElapsedEPm>
				if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
     cd6:	6c 2d       	mov	r22, r12
     cd8:	7b 2d       	mov	r23, r11
     cda:	85 e3       	ldi	r24, 0x35	; 53
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN10class_Time10GetElapsedEPm>
     ce2:	61 33       	cpi	r22, 0x31	; 49
     ce4:	75 47       	sbci	r23, 0x75	; 117
     ce6:	81 05       	cpc	r24, r1
     ce8:	91 05       	cpc	r25, r1
     cea:	08 f0       	brcs	.+2      	; 0xcee <_ZN16class_Feed_Timer13ProcessInputsEv+0x2b6>
     cec:	3f c0       	rjmp	.+126    	; 0xd6c <_ZN16class_Feed_Timer13ProcessInputsEv+0x334>
					this->SetTimer0_OFF();
					dp.Cls();
					return;
				}
				//process keys
				switch (key)
     cee:	32 e0       	ldi	r19, 0x02	; 2
     cf0:	d3 16       	cp	r13, r19
     cf2:	99 f0       	breq	.+38     	; 0xd1a <_ZN16class_Feed_Timer13ProcessInputsEv+0x2e2>
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	d8 16       	cp	r13, r24
     cf8:	e9 f0       	breq	.+58     	; 0xd34 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2fc>
     cfa:	21 e0       	ldi	r18, 0x01	; 1
     cfc:	d2 12       	cpse	r13, r18
     cfe:	c6 cf       	rjmp	.-116    	; 0xc8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x254>
				{
					case KEY_DOWN:
						menuItem--;
						if (menuItem<1) menuItem=1;
     d00:	01 11       	cpse	r16, r1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ce>
     d04:	01 e0       	ldi	r16, 0x01	; 1
						time.DelayMsI(KEY_DELAY);
     d06:	4e e5       	ldi	r20, 0x5E	; 94
     d08:	51 e0       	ldi	r21, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	85 e3       	ldi	r24, 0x35	; 53
     d10:	93 e0       	ldi	r25, 0x03	; 3
     d12:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
					break;
     d16:	10 2f       	mov	r17, r16
     d18:	b9 cf       	rjmp	.-142    	; 0xc8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x254>
					case KEY_UP:
						menuItem++;
     d1a:	1f 5f       	subi	r17, 0xFF	; 255
     d1c:	16 30       	cpi	r17, 0x06	; 6
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ea>
     d20:	15 e0       	ldi	r17, 0x05	; 5
						if (menuItem>MENU_ITENS) menuItem=MENU_ITENS;
						time.DelayMsI(KEY_DELAY);
     d22:	4e e5       	ldi	r20, 0x5E	; 94
     d24:	51 e0       	ldi	r21, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	85 e3       	ldi	r24, 0x35	; 53
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
					break;
     d32:	ac cf       	rjmp	.-168    	; 0xc8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x254>
					case KEY_ENTER:
						//EXECUT ACCORDING
						dp.KeyWaitRelease();
     d34:	8e e2       	ldi	r24, 0x2E	; 46
     d36:	93 e0       	ldi	r25, 0x03	; 3
     d38:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
						time.DelayMsI(KEY_DELAY);
     d3c:	4e e5       	ldi	r20, 0x5E	; 94
     d3e:	51 e0       	ldi	r21, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	85 e3       	ldi	r24, 0x35	; 53
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
						switch (menuItem)
     d4c:	14 30       	cpi	r17, 0x04	; 4
     d4e:	51 f0       	breq	.+20     	; 0xd64 <_ZN16class_Feed_Timer13ProcessInputsEv+0x32c>
     d50:	15 30       	cpi	r17, 0x05	; 5
     d52:	61 f0       	breq	.+24     	; 0xd6c <_ZN16class_Feed_Timer13ProcessInputsEv+0x334>
     d54:	11 30       	cpi	r17, 0x01	; 1
     d56:	09 f0       	breq	.+2      	; 0xd5a <_ZN16class_Feed_Timer13ProcessInputsEv+0x322>
     d58:	99 cf       	rjmp	.-206    	; 0xc8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x254>
						{
							case MENU_ITEN::SET_TIME:
								//Set Time
								this->InitTime(true);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	c7 01       	movw	r24, r14
     d5e:	0e 94 13 02 	call	0x426	; 0x426 <_ZN16class_Feed_Timer8InitTimeEb>
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <_ZN16class_Feed_Timer13ProcessInputsEv+0x334>
								this->SetTimer0_OFF();
								dp.Cls();
								return;
							break;
							case MENU_ITEN::RESET:
								cli();
     d64:	f8 94       	cli
								asm("jmp 0");
     d66:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
							break;
     d6a:	90 cf       	rjmp	.-224    	; 0xc8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x254>
							case MENU_ITEN::EXIT:
								//exit
								this->SetTimer0_OFF();
     d6c:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
								dp.Cls();
     d70:	8e e2       	ldi	r24, 0x2E	; 46
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <_ZN16class_Feed_Timer13ProcessInputsEv+0x346>
		/////////////////////
		case KEY_ENTER:
		break;
	}
	//Set timer IO OFF
	this->SetTimer0_OFF();
     d7a:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
}
     d7e:	2c 96       	adiw	r28, 0x0c	; 12
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	08 95       	ret

00000da4 <main>:
       ==================================================================================
*/


int main()
{
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2c 97       	sbiw	r28, 0x0c	; 12
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
	
	//LOCAL VARIABLES
	
	class_Feed_Timer	ft;
     db8:	8e 01       	movw	r16, r28
     dba:	04 5f       	subi	r16, 0xF4	; 244
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	c8 01       	movw	r24, r16
     dc0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN16class_Feed_TimerC1Ev>
// 	Event.Minute=15;
// 	Event.WeekDays=0;
// 	Event.MinuteMotorON=0;
// 	Event.SecondMotorON=5;
// 	ft.EventAdd(Event);
for(uint8_t i=0;i<24;i++)
     dc4:	f1 2c       	mov	r15, r1
{
	Event.Event=EVENT_TYPE::DIARY;
     dc6:	42 e0       	ldi	r20, 0x02	; 2
     dc8:	c4 2e       	mov	r12, r20
	Event.Hour=i;
	Event.Minute=15;
     dca:	5f e0       	ldi	r21, 0x0F	; 15
     dcc:	d5 2e       	mov	r13, r21
	Event.WeekDays=0;
	Event.MinuteMotorON=0;
	Event.SecondMotorON=5;
     dce:	65 e0       	ldi	r22, 0x05	; 5
     dd0:	e6 2e       	mov	r14, r22
// 	Event.MinuteMotorON=0;
// 	Event.SecondMotorON=5;
// 	ft.EventAdd(Event);
for(uint8_t i=0;i<24;i++)
{
	Event.Event=EVENT_TYPE::DIARY;
     dd2:	c9 82       	std	Y+1, r12	; 0x01
	Event.Hour=i;
     dd4:	fa 82       	std	Y+2, r15	; 0x02
	Event.Minute=15;
     dd6:	db 82       	std	Y+3, r13	; 0x03
	Event.WeekDays=0;
     dd8:	1c 82       	std	Y+4, r1	; 0x04
	Event.MinuteMotorON=0;
     dda:	1d 82       	std	Y+5, r1	; 0x05
	Event.SecondMotorON=5;
     ddc:	ee 82       	std	Y+6, r14	; 0x06
	ft.EventAdd(Event);
     dde:	be 01       	movw	r22, r28
     de0:	6f 5f       	subi	r22, 0xFF	; 255
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN16class_Feed_Timer8EventAddER11EventStruct>
// 	Event.Minute=15;
// 	Event.WeekDays=0;
// 	Event.MinuteMotorON=0;
// 	Event.SecondMotorON=5;
// 	ft.EventAdd(Event);
for(uint8_t i=0;i<24;i++)
     dea:	f3 94       	inc	r15
     dec:	28 e1       	ldi	r18, 0x18	; 24
     dee:	f2 12       	cpse	r15, r18
     df0:	f0 cf       	rjmp	.-32     	; 0xdd2 <main+0x2e>
	
// 	for(;;)
// 		ft.ClockCallBack();

	//ENABLE GLOBAL INTERRUPTS
	sei();
     df2:	78 94       	sei
  
  
	//SHOW DART IF KEY DOWN PRESSED DURING RESET
	if (dp.KeyReadFlash()==KEY_DOWN)
     df4:	8e e2       	ldi	r24, 0x2E	; 46
     df6:	93 e0       	ldi	r25, 0x03	; 3
     df8:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	b1 f4       	brne	.+44     	; 0xe2c <main+0x88>
	{
		dp.Cls();
     e00:	8e e2       	ldi	r24, 0x2E	; 46
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
		dp.PutSF(PSTR("DART"));
     e08:	64 e9       	ldi	r22, 0x94	; 148
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	8e e2       	ldi	r24, 0x2E	; 46
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
		dp.KeyWaitRelease();
     e14:	8e e2       	ldi	r24, 0x2E	; 46
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
		time.DelayMsI(500);
     e1c:	44 ef       	ldi	r20, 0xF4	; 244
     e1e:	51 e0       	ldi	r21, 0x01	; 1
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	85 e3       	ldi	r24, 0x35	; 53
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	}
	//ANIMATION OF BOOT START
	dp.Cls();
     e2c:	8e e2       	ldi	r24, 0x2E	; 46
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("-   "));
     e34:	69 e9       	ldi	r22, 0x99	; 153
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	8e e2       	ldi	r24, 0x2E	; 46
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	85 e3       	ldi	r24, 0x35	; 53
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     e50:	8e e2       	ldi	r24, 0x2E	; 46
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR(" -  "));
     e58:	6e e9       	ldi	r22, 0x9E	; 158
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	8e e2       	ldi	r24, 0x2E	; 46
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     e64:	4a ef       	ldi	r20, 0xFA	; 250
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	85 e3       	ldi	r24, 0x35	; 53
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     e74:	8e e2       	ldi	r24, 0x2E	; 46
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("  - "));
     e7c:	63 ea       	ldi	r22, 0xA3	; 163
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8e e2       	ldi	r24, 0x2E	; 46
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     e88:	4a ef       	ldi	r20, 0xFA	; 250
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	85 e3       	ldi	r24, 0x35	; 53
     e92:	93 e0       	ldi	r25, 0x03	; 3
     e94:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     e98:	8e e2       	ldi	r24, 0x2E	; 46
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("   -"));
     ea0:	68 ea       	ldi	r22, 0xA8	; 168
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	8e e2       	ldi	r24, 0x2E	; 46
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	85 e3       	ldi	r24, 0x35	; 53
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     ebc:	8e e2       	ldi	r24, 0x2E	; 46
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	time.DelayMsI(250);
     ec4:	4a ef       	ldi	r20, 0xFA	; 250
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	85 e3       	ldi	r24, 0x35	; 53
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	//SHOW VERSION
	sprintf(bf,"V%3d",_FEED_TIMER_7_SEGMENTS_VERSION);
     ed4:	1f 92       	push	r1
     ed6:	84 e6       	ldi	r24, 0x64	; 100
     ed8:	8f 93       	push	r24
     eda:	83 e1       	ldi	r24, 0x13	; 19
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	9f 93       	push	r25
     ee0:	8f 93       	push	r24
     ee2:	80 e3       	ldi	r24, 0x30	; 48
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
	dp.Cls();
     eee:	8e e2       	ldi	r24, 0x2E	; 46
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutS(bf);
     ef6:	60 e3       	ldi	r22, 0x30	; 48
     ef8:	71 e0       	ldi	r23, 0x01	; 1
     efa:	8e e2       	ldi	r24, 0x2E	; 46
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
	time.DelayMsI(2000);
     f02:	40 ed       	ldi	r20, 0xD0	; 208
     f04:	57 e0       	ldi	r21, 0x07	; 7
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	85 e3       	ldi	r24, 0x35	; 53
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     f12:	8e e2       	ldi	r24, 0x2E	; 46
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
	//INITIALIZE TIME IS BOOT IS COLD
	ft.InitTime();
     f1a:	8e 01       	movw	r16, r28
     f1c:	04 5f       	subi	r16, 0xF4	; 244
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 13 02 	call	0x426	; 0x426 <_ZN16class_Feed_Timer8InitTimeEb>
	dp.Cls();
     f28:	8e e2       	ldi	r24, 0x2E	; 46
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
			//SAVE IO STATE TO REDUCE POWER
			dp.DisableIO();
			//SLEEP
			dp.PutToSleep();
			//SHOW FEED BACK OPERATIONAL
			ft.ShowLIVE();			
     f3c:	58 01       	movw	r10, r16
			dp.Cls();
			for(;;)
			{
				dp.Locate(1);
				ft.GetTime(h,m,s,w);
				sprintf(bf,"%02d%02d",h,m);
     f3e:	23 e0       	ldi	r18, 0x03	; 3
     f40:	e2 2e       	mov	r14, r18
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	f2 2e       	mov	r15, r18
     f46:	30 e3       	ldi	r19, 0x30	; 48
     f48:	c3 2e       	mov	r12, r19
     f4a:	31 e0       	ldi	r19, 0x01	; 1
     f4c:	d3 2e       	mov	r13, r19
// 		time.DelayMsI(50);
// 	}
	for(;;)
	{
		//ENTER IN SLEEP SAVE MODE TO REDUCE POWER MORE
		if (ft.SleepState)
     f4e:	80 91 00 01 	lds	r24, 0x0100
     f52:	88 23       	and	r24, r24
     f54:	59 f0       	breq	.+22     	; 0xf6c <main+0x1c8>
		{
			//SAVE IO STATE TO REDUCE POWER
			dp.DisableIO();
     f56:	8e e2       	ldi	r24, 0x2E	; 46
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN19class_Display_7_Seg9DisableIOEv>
			//SLEEP
			dp.PutToSleep();
     f5e:	8e e2       	ldi	r24, 0x2E	; 46
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN19class_Display_7_Seg10PutToSleepEv>
			//SHOW FEED BACK OPERATIONAL
			ft.ShowLIVE();			
     f66:	c5 01       	movw	r24, r10
     f68:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN16class_Feed_Timer8ShowLIVEEv>
		}
		//show time if motor on

		if (dp.MotorGetState()==true)
     f6c:	8e e2       	ldi	r24, 0x2E	; 46
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN19class_Display_7_Seg13MotorGetStateEv>
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <main+0x1d6>
     f78:	54 c0       	rjmp	.+168    	; 0x1022 <main+0x27e>
		{
			dp.EnableIO();
     f7a:	8e e2       	ldi	r24, 0x2E	; 46
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     f82:	80 91 6e 00 	lds	r24, 0x006E
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	80 93 6e 00 	sts	0x006E, r24

		if (dp.MotorGetState()==true)
		{
			dp.EnableIO();
			ft.SetTimer0_ON();
			dp.DispSetPoint(2,true);
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	62 e0       	ldi	r22, 0x02	; 2
     f90:	8e e2       	ldi	r24, 0x2E	; 46
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
     f98:	8e e2       	ldi	r24, 0x2E	; 46
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
			for(;;)
			{
				dp.Locate(1);
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	8e e2       	ldi	r24, 0x2E	; 46
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN19class_Display_7_Seg6LocateEh>
				ft.GetTime(h,m,s,w);
     faa:	8e 01       	movw	r16, r28
     fac:	08 5f       	subi	r16, 0xF8	; 248
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	9e 01       	movw	r18, r28
     fb2:	27 5f       	subi	r18, 0xF7	; 247
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	ae 01       	movw	r20, r28
     fb8:	46 5f       	subi	r20, 0xF6	; 246
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	be 01       	movw	r22, r28
     fbe:	65 5f       	subi	r22, 0xF5	; 245
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	c5 01       	movw	r24, r10
     fc4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
				sprintf(bf,"%02d%02d",h,m);
     fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     fca:	1f 92       	push	r1
     fcc:	8f 93       	push	r24
     fce:	8b 85       	ldd	r24, Y+11	; 0x0b
     fd0:	1f 92       	push	r1
     fd2:	8f 93       	push	r24
     fd4:	ff 92       	push	r15
     fd6:	ef 92       	push	r14
     fd8:	df 92       	push	r13
     fda:	cf 92       	push	r12
     fdc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <sprintf>
				dp.PutS(bf);
     fe0:	60 e3       	ldi	r22, 0x30	; 48
     fe2:	71 e0       	ldi	r23, 0x01	; 1
     fe4:	8e e2       	ldi	r24, 0x2E	; 46
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4PutSEPKc>
				if (dp.MotorGetState()==false) break;
     fec:	8e e2       	ldi	r24, 0x2E	; 46
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN19class_Display_7_Seg13MotorGetStateEv>
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	81 11       	cpse	r24, r1
    1000:	cf cf       	rjmp	.-98     	; 0xfa0 <main+0x1fc>
			}
			dp.DispSetPoint(2,false);
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	62 e0       	ldi	r22, 0x02	; 2
    1006:	8e e2       	ldi	r24, 0x2E	; 46
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	0e 94 32 09 	call	0x1264	; 0x1264 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
    100e:	8e e2       	ldi	r24, 0x2E	; 46
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN19class_Display_7_Seg3ClsEv>
			ft.SetTimer0_OFF();
    1016:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
			dp.DisableIO();
    101a:	8e e2       	ldi	r24, 0x2E	; 46
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN19class_Display_7_Seg9DisableIOEv>
		}
		//PROCESS INPUT KEYS
		ft.ProcessInputs();
    1022:	c5 01       	movw	r24, r10
    1024:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN16class_Feed_Timer13ProcessInputsEv>
// 		sprintf(bf,"%4d",(int)EventsCount[0].Count);
// 		dp.Locate(1);
// 		dp.PutS(bf);
// 		time.DelayMsI(50);
// 	}
	for(;;)
    1028:	92 cf       	rjmp	.-220    	; 0xf4e <main+0x1aa>

0000102a <_GLOBAL__sub_I_time>:
//  +--------------------------------------+
//  |        GLOBAL CLASSES          	   |
//  +--------------------------------------+
// 

class_Time			time;
    102a:	85 e3       	ldi	r24, 0x35	; 53
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN10class_TimeC1Ev>
class_Display_7_Seg	dp;
    1032:	8e e2       	ldi	r24, 0x2E	; 46
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0c 94 28 09 	jmp	0x1250	; 0x1250 <_ZN19class_Display_7_SegC1Ev>

0000103a <_Z11DisplayScanv>:
	
	//first turn all digits off
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
								 				(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    103a:	88 b1       	in	r24, 0x08	; 8
    103c:	8f 60       	ori	r24, 0x0F	; 15
    103e:	88 b9       	out	0x08, r24	; 8
	//turn all segments off
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);	
    1040:	8b b1       	in	r24, 0x0b	; 11
    1042:	88 61       	ori	r24, 0x18	; 24
    1044:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
		    									(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1046:	8b b1       	in	r24, 0x0b	; 11
    1048:	87 6e       	ori	r24, 0xE7	; 231
    104a:	8b b9       	out	0x0b, r24	; 11
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    104c:	80 91 3d 03 	lds	r24, 0x033D
    1050:	8f 5f       	subi	r24, 0xFF	; 255
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	18 f4       	brcc	.+6      	; 0x105c <_Z11DisplayScanv+0x22>
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    1056:	80 93 3d 03 	sts	0x033D, r24
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <_Z11DisplayScanv+0x26>
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    105c:	10 92 3d 03 	sts	0x033D, r1
	//put display buffer content on display
	tmp=_Display_7_Seg.Buffer[_Display_7_Seg.BufferIndex] & (~(1<<_DISPLAY_SEG_P));
    1060:	e0 91 3d 03 	lds	r30, 0x033D
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	e3 5c       	subi	r30, 0xC3	; 195
    1068:	fc 4f       	sbci	r31, 0xFC	; 252
    106a:	81 81       	ldd	r24, Z+1	; 0x01
	//check bits
	if ((tmp & (1<<_DISPLAY_SEG_A))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT);
    106c:	80 fd       	sbrc	r24, 0
    106e:	59 98       	cbi	0x0b, 1	; 11
	if ((tmp & (1<<_DISPLAY_SEG_B))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT);
    1070:	81 fd       	sbrc	r24, 1
    1072:	5a 98       	cbi	0x0b, 2	; 11
	if ((tmp & (1<<_DISPLAY_SEG_C))!=0)	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT);
    1074:	82 fd       	sbrc	r24, 2
    1076:	5c 98       	cbi	0x0b, 4	; 11
	if ((tmp & (1<<_DISPLAY_SEG_D))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT);
    1078:	83 fd       	sbrc	r24, 3
    107a:	5e 98       	cbi	0x0b, 6	; 11
	if ((tmp & (1<<_DISPLAY_SEG_E))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    107c:	84 fd       	sbrc	r24, 4
    107e:	5f 98       	cbi	0x0b, 7	; 11
	if ((tmp & (1<<_DISPLAY_SEG_F))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT);
    1080:	85 fd       	sbrc	r24, 5
    1082:	58 98       	cbi	0x0b, 0	; 11
	if ((tmp & (1<<_DISPLAY_SEG_G))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT);
    1084:	86 fd       	sbrc	r24, 6
    1086:	5d 98       	cbi	0x0b, 5	; 11
    //turn point on or off
     if ((_Display_7_Seg.PtrBufferBits & (1<<_Display_7_Seg.BufferIndex))!=0)
    1088:	80 91 42 03 	lds	r24, 0x0342
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	20 91 3d 03 	lds	r18, 0x033D
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <_Z11DisplayScanv+0x60>
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <_Z11DisplayScanv+0x5c>
    109e:	80 fd       	sbrc	r24, 0
	 {
		_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    10a0:	5b 98       	cbi	0x0b, 3	; 11
	 }
	//enable digit
	switch (_Display_7_Seg.BufferIndex)
    10a2:	21 30       	cpi	r18, 0x01	; 1
    10a4:	41 f0       	breq	.+16     	; 0x10b6 <_Z11DisplayScanv+0x7c>
    10a6:	28 f0       	brcs	.+10     	; 0x10b2 <_Z11DisplayScanv+0x78>
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	39 f0       	breq	.+14     	; 0x10ba <_Z11DisplayScanv+0x80>
    10ac:	23 30       	cpi	r18, 0x03	; 3
    10ae:	41 f4       	brne	.+16     	; 0x10c0 <_Z11DisplayScanv+0x86>
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <_Z11DisplayScanv+0x84>
	{
		case 0:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    10b2:	43 98       	cbi	0x08, 3	; 8
		break;
    10b4:	08 95       	ret
		case 1:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT);
    10b6:	42 98       	cbi	0x08, 2	; 8
		break;
    10b8:	08 95       	ret
		case 2:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT);
    10ba:	41 98       	cbi	0x08, 1	; 8
		break;
    10bc:	08 95       	ret
		case 3:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT);
    10be:	40 98       	cbi	0x08, 0	; 8
    10c0:	08 95       	ret

000010c2 <_ZN19class_Display_7_Seg14KeysInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeysInitialize()
{
		//set keys input with pull up
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_OUTPUT|=(1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT);
    10c2:	85 b1       	in	r24, 0x05	; 5
    10c4:	87 60       	ori	r24, 0x07	; 7
    10c6:	85 b9       	out	0x05, r24	; 5
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT));
    10c8:	84 b1       	in	r24, 0x04	; 4
    10ca:	88 7f       	andi	r24, 0xF8	; 248
    10cc:	84 b9       	out	0x04, r24	; 4
    10ce:	08 95       	ret

000010d0 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>:
//	| @INPUT   :																	|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysInitialize()
{
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	d8 2f       	mov	r29, r24
    10d8:	c9 2f       	mov	r28, r25
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    10da:	1f b7       	in	r17, 0x3f	; 63
	//disable interrupts
	cli();
    10dc:	f8 94       	cli
	//program Segments and digits to output off state
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    10de:	2b b1       	in	r18, 0x0b	; 11
    10e0:	28 61       	ori	r18, 0x18	; 24
    10e2:	2b b9       	out	0x0b, r18	; 11
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    10e4:	2a b1       	in	r18, 0x0a	; 10
    10e6:	28 61       	ori	r18, 0x18	; 24
    10e8:	2a b9       	out	0x0a, r18	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    10ea:	2b b1       	in	r18, 0x0b	; 11
    10ec:	27 6e       	ori	r18, 0xE7	; 231
    10ee:	2b b9       	out	0x0b, r18	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    10f0:	2a b1       	in	r18, 0x0a	; 10
    10f2:	27 6e       	ori	r18, 0xE7	; 231
    10f4:	2a b9       	out	0x0a, r18	; 10
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    10f6:	28 b1       	in	r18, 0x08	; 8
    10f8:	2f 60       	ori	r18, 0x0F	; 15
    10fa:	28 b9       	out	0x08, r18	; 8
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   |=	(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    10fc:	27 b1       	in	r18, 0x07	; 7
    10fe:	2f 60       	ori	r18, 0x0F	; 15
    1100:	27 b9       	out	0x07, r18	; 7
    //Set interrupt timer routine
    Time.SetTimeInterruptCallback(DisplayScan);
    1102:	6d e1       	ldi	r22, 0x1D	; 29
    1104:	78 e0       	ldi	r23, 0x08	; 8
    1106:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>
    //enable timer interrupt
    Time.SetInterruptState(true);					 
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	8d 2f       	mov	r24, r29
    110e:	9c 2f       	mov	r25, r28
    1110:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN10class_Time17SetInterruptStateEb>
	//restore SREG
	SREG=sreg;
    1114:	1f bf       	out	0x3f, r17	; 63
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	08 95       	ret

0000111e <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysUnInitialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    111e:	9f b7       	in	r25, 0x3f	; 63
	//disable interrupts
	cli();
    1120:	f8 94       	cli
	//program all select displays and segments to input high z
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1122:	8a b1       	in	r24, 0x0a	; 10
    1124:	87 7e       	andi	r24, 0xE7	; 231
    1126:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1128:	8b b1       	in	r24, 0x0b	; 11
    112a:	87 7e       	andi	r24, 0xE7	; 231
    112c:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    112e:	8a b1       	in	r24, 0x0a	; 10
    1130:	88 71       	andi	r24, 0x18	; 24
    1132:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    1134:	8b b1       	in	r24, 0x0b	; 11
    1136:	88 71       	andi	r24, 0x18	; 24
    1138:	8b b9       	out	0x0b, r24	; 11


	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    113a:	87 b1       	in	r24, 0x07	; 7
    113c:	80 7f       	andi	r24, 0xF0	; 240
    113e:	87 b9       	out	0x07, r24	; 7

	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|    \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    1140:	88 b1       	in	r24, 0x08	; 8
    1142:	80 7f       	andi	r24, 0xF0	; 240
    1144:	88 b9       	out	0x08, r24	; 8
	//Set interrupt timer routine
	//restore SREG
	SREG=sreg;
    1146:	9f bf       	out	0x3f, r25	; 63
    1148:	08 95       	ret

0000114a <_ZN19class_Display_7_Seg15MotorInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorInitialize()
{
	//PROGRAM PORT TO INPUT HI-Z TO DISABLE MOTOR
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    114a:	44 98       	cbi	0x08, 4	; 8
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    114c:	3c 98       	cbi	0x07, 4	; 7
    114e:	08 95       	ret

00001150 <_ZN19class_Display_7_Seg17MotorUnInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorUnInitialize()
{
	//PORTS input high z (motor automatically disable)
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1150:	3c 98       	cbi	0x07, 4	; 7
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1152:	44 98       	cbi	0x08, 4	; 8
    1154:	08 95       	ret

00001156 <_ZN19class_Display_7_Seg16Timer2InitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Timer2Initialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1156:	2f b7       	in	r18, 0x3f	; 63
	//disable interrupts
	cli();
    1158:	f8 94       	cli
	//disable timer interrupts
	TIMSK2&=~(1<<OCIE2A);
    115a:	80 91 70 00 	lds	r24, 0x0070
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	80 93 70 00 	sts	0x0070, r24
	//set asynchronous mode external xtal 32.768Hz
	ASSR|=(1<<AS2);
    1164:	80 91 b6 00 	lds	r24, 0x00B6
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	80 93 b6 00 	sts	0x00B6, r24
	//set OCR2A to 31 to generate 1Hz interrupt using 32.768Hz xtal
	OCR2A=31;
    116e:	8f e1       	ldi	r24, 0x1F	; 31
    1170:	80 93 b3 00 	sts	0x00B3, r24
	//wait assert
	do {} while ((ASSR & (1<<OCR2AUB))==0);
    1174:	80 91 b6 00 	lds	r24, 0x00B6
    1178:	83 ff       	sbrs	r24, 3
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x1e>
	//clear timer 2
	TCNT2=0;
    117c:	10 92 b2 00 	sts	0x00B2, r1
	//wait assert
	do {} while ((ASSR & (1<<TCN2UB))==0);
    1180:	80 91 b6 00 	lds	r24, 0x00B6
    1184:	84 ff       	sbrs	r24, 4
    1186:	fc cf       	rjmp	.-8      	; 0x1180 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x2a>
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
    1188:	90 91 b0 00 	lds	r25, 0x00B0
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
	TCCR2A|=tmp;
    118c:	80 91 b0 00 	lds	r24, 0x00B0
	do {} while ((ASSR & (1<<TCN2UB))==0);
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	9e 7f       	andi	r25, 0xFE	; 254
	TCCR2A|=tmp;
    1194:	89 2b       	or	r24, r25
    1196:	80 93 b0 00 	sts	0x00B0, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2AUB))==0);
    119a:	80 91 b6 00 	lds	r24, 0x00B6
    119e:	81 ff       	sbrs	r24, 1
    11a0:	fc cf       	rjmp	.-8      	; 0x119a <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x44>
	tmp=TCCR2B;
    11a2:	80 91 b1 00 	lds	r24, 0x00B1
	tmp&=(1<<WGM22);
    11a6:	88 70       	andi	r24, 0x08	; 8
	tmp|=(1<<CS22)|(1<<CS21)|(1<<CS20);
    11a8:	87 60       	ori	r24, 0x07	; 7
	TCCR2B=tmp;
    11aa:	80 93 b1 00 	sts	0x00B1, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2BUB))==0);
    11ae:	80 91 b6 00 	lds	r24, 0x00B6
    11b2:	80 ff       	sbrs	r24, 0
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x58>
	//enable interrupt
	TIMSK2|=(1<<OCIE2A);
    11b6:	80 91 70 00 	lds	r24, 0x0070
    11ba:	82 60       	ori	r24, 0x02	; 2
    11bc:	80 93 70 00 	sts	0x0070, r24
	//restore SREG
	SREG=sreg;
    11c0:	2f bf       	out	0x3f, r18	; 63
    11c2:	08 95       	ret

000011c4 <__vector_7>:
//	| @REMARKS :  This ISR is called each second									|
//	+-------------------------------------------------------------------------------+


ISR(TIMER2_COMPA_vect)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
	if (_Display_7_Seg.SecondCallBack!=nullptr) _Display_7_Seg.SecondCallBack();
    11e6:	e0 91 44 03 	lds	r30, 0x0344
    11ea:	f0 91 45 03 	lds	r31, 0x0345
    11ee:	30 97       	sbiw	r30, 0x00	; 0
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <__vector_7+0x30>
    11f2:	09 95       	icall
}
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <_ZN19class_Display_7_Seg10InitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+


void    class_Display_7_Seg::Initialize()
{
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
    uint8_t sreg;

    //save SREG
    sreg=SREG;
    121e:	1f b7       	in	r17, 0x3f	; 63
	//Initialize KEYS Hardware
	KeysInitialize();
    1220:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN19class_Display_7_Seg14KeysInitializeEv>
	//Initialize Display Hardware
	DisplaysInitialize();
    1224:	ce 01       	movw	r24, r28
    1226:	0e 94 68 08 	call	0x10d0	; 0x10d0 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
	//Initialize Motor Hardware
	MotorInitialize();
    122a:	ce 01       	movw	r24, r28
    122c:	0e 94 a5 08 	call	0x114a	; 0x114a <_ZN19class_Display_7_Seg15MotorInitializeEv>
	//Initialize Timer 2
	Timer2Initialize();
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN19class_Display_7_Seg16Timer2InitializeEv>
	//clear Display Buffer
	memset(_Display_7_Seg.Buffer,0,sizeof(_Display_7_Seg.Buffer));
    1236:	10 92 3e 03 	sts	0x033E, r1
    123a:	10 92 3f 03 	sts	0x033F, r1
    123e:	10 92 40 03 	sts	0x0340, r1
    1242:	10 92 41 03 	sts	0x0341, r1
    //restore SREG state
    SREG=sreg;
    1246:	1f bf       	out	0x3f, r17	; 63
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	08 95       	ret

00001250 <_ZN19class_Display_7_SegC1Ev>:
//	| @NAME    :  General WIFI IO Initialization  		                            |
//	| @INPUT   :  none                                                              |
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN10class_TimeC1Ev>
{
	//Initialize PID
    Initialize();
    125a:	ce 01       	movw	r24, r28
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
{
	//Initialize PID
    Initialize();
    1260:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <_ZN19class_Display_7_Seg10InitializeEv>

00001264 <_ZN19class_Display_7_Seg12DispSetPointEhb>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void    class_Display_7_Seg::DispSetPoint(uint8_t digit,bool digitState)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    1264:	61 50       	subi	r22, 0x01	; 1
    1266:	64 30       	cpi	r22, 0x04	; 4
    1268:	d0 f4       	brcc	.+52     	; 0x129e <_ZN19class_Display_7_Seg12DispSetPointEhb+0x3a>
	{
    	//yes set segments
        digit=digit-1;
        switch (digitState)
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	20 91 42 03 	lds	r18, 0x0342
    1270:	41 30       	cpi	r20, 0x01	; 1
    1272:	51 05       	cpc	r21, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2a>
        {
            case false:
                _Display_7_Seg.PtrBufferBits&=~(1<<digit);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	06 2e       	mov	r0, r22
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x1c>
    127e:	88 0f       	add	r24, r24
    1280:	0a 94       	dec	r0
    1282:	ea f7       	brpl	.-6      	; 0x127e <_ZN19class_Display_7_Seg12DispSetPointEhb+0x1a>
    1284:	80 95       	com	r24
    1286:	82 23       	and	r24, r18
    1288:	80 93 42 03 	sts	0x0342, r24
        	break;
    128c:	08 95       	ret
            case true:
                _Display_7_Seg.PtrBufferBits|=(1<<digit);
    128e:	06 2e       	mov	r0, r22
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x30>
    1292:	44 0f       	add	r20, r20
    1294:	0a 94       	dec	r0
    1296:	ea f7       	brpl	.-6      	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2e>
    1298:	42 2b       	or	r20, r18
    129a:	40 93 42 03 	sts	0x0342, r20
    129e:	08 95       	ret

000012a0 <_ZN19class_Display_7_Seg12DispSetASCIIEhh>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DispSetASCII(uint8_t asciiCode,uint8_t digit)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    12a0:	84 2f       	mov	r24, r20
    12a2:	81 50       	subi	r24, 0x01	; 1
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	70 f4       	brcc	.+28     	; 0x12c4 <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
	{
		//yes set segments
		if (asciiCode>=' ' && asciiCode<('_'+2))
    12a8:	86 2f       	mov	r24, r22
    12aa:	80 52       	subi	r24, 0x20	; 32
    12ac:	81 34       	cpi	r24, 0x41	; 65
    12ae:	50 f4       	brcc	.+20     	; 0x12c4 <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
		{
			_Display_7_Seg.Buffer[digit-1]=pgm_read_byte(&_FEED_TIMER_DISP_7_SEG_ASCII_Table[asciiCode-' ']);	
    12b0:	e6 2f       	mov	r30, r22
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ec 53       	subi	r30, 0x3C	; 60
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	e4 91       	lpm	r30, Z
    12ba:	a4 2f       	mov	r26, r20
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	a3 5c       	subi	r26, 0xC3	; 195
    12c0:	bc 4f       	sbci	r27, 0xFC	; 252
    12c2:	ec 93       	st	X, r30
    12c4:	08 95       	ret

000012c6 <_ZN19class_Display_7_Seg4HomeEv>:
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 43 03 	sts	0x0343, r24
    12cc:	08 95       	ret

000012ce <_ZN19class_Display_7_Seg6LocateEh>:
    12ce:	60 93 43 03 	sts	0x0343, r22
    12d2:	08 95       	ret

000012d4 <_ZN19class_Display_7_Seg4PutCEc>:
//	| @INPUT   : asciiCode										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutC(char asciiCode)
{
		if (_Display_7_Seg.Col>=1 && _Display_7_Seg.Col<=_DISP_7_SEG_NUM_DIGITS)
    12d4:	40 91 43 03 	lds	r20, 0x0343
    12d8:	24 2f       	mov	r18, r20
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	24 30       	cpi	r18, 0x04	; 4
    12de:	10 f4       	brcc	.+4      	; 0x12e4 <_ZN19class_Display_7_Seg4PutCEc+0x10>
		{
			DispSetASCII(asciiCode,_Display_7_Seg.Col);
    12e0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_ZN19class_Display_7_Seg12DispSetASCIIEhh>
		}
		_Display_7_Seg.Col++;
    12e4:	80 91 43 03 	lds	r24, 0x0343
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 43 03 	sts	0x0343, r24
    12ee:	08 95       	ret

000012f0 <_ZN19class_Display_7_Seg4PutSEPKc>:
//	| @NAME    : PutS						  										|
//	| @INPUT   : asciiString									                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutS(const char *asciiString)
{
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	8c 01       	movw	r16, r24
    12fa:	eb 01       	movw	r28, r22
	  unsigned char data;
	  //send until zero is found
	  for(;;)
	  {
		  //get char for sram
		  data=*asciiString;
    12fc:	69 91       	ld	r22, Y+
		  //check if end
		  if (data==0) break;
    12fe:	66 23       	and	r22, r22
    1300:	21 f0       	breq	.+8      	; 0x130a <_ZN19class_Display_7_Seg4PutSEPKc+0x1a>
		  //process according data
		  PutC(data);
    1302:	c8 01       	movw	r24, r16
    1304:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN19class_Display_7_Seg4PutCEc>
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutS(const char *asciiString)
{
	  unsigned char data;
	  //send until zero is found
	  for(;;)
    1308:	f9 cf       	rjmp	.-14     	; 0x12fc <_ZN19class_Display_7_Seg4PutSEPKc+0xc>
		  //process according data
		  PutC(data);
		  //next char
		  asciiString++;
	  }
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <_ZN19class_Display_7_Seg5PutSFEPKc>:
//	| @NAME    : PutSF						  										|
//	| @INPUT   : asciiStringFlash 								                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutSF(const char *asciiStringFlash)
{
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	8c 01       	movw	r16, r24
    131e:	eb 01       	movw	r28, r22
	unsigned char data;
	//send until zero is found
	for(;;)
	{
		//get char for sram
		data=pgm_read_byte(asciiStringFlash);
    1320:	fe 01       	movw	r30, r28
    1322:	64 91       	lpm	r22, Z
		//check if end
		if (data==0) break;
    1324:	66 23       	and	r22, r22
    1326:	29 f0       	breq	.+10     	; 0x1332 <_ZN19class_Display_7_Seg5PutSFEPKc+0x1e>
		//process according data
		PutC(data);
    1328:	c8 01       	movw	r24, r16
    132a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN19class_Display_7_Seg4PutCEc>
		//next char
		asciiStringFlash++;
    132e:	21 96       	adiw	r28, 0x01	; 1
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutSF(const char *asciiStringFlash)
{
	unsigned char data;
	//send until zero is found
	for(;;)
    1330:	f7 cf       	rjmp	.-18     	; 0x1320 <_ZN19class_Display_7_Seg5PutSFEPKc+0xc>
		//process according data
		PutC(data);
		//next char
		asciiStringFlash++;
	}
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	08 95       	ret

0000133c <_ZN19class_Display_7_Seg3ClsEv>:
//	| @NAME    : Cls				  												|
//	| @INPUT   : ASCII code to clear							                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    1342:	c3 e4       	ldi	r28, 0x43	; 67
    1344:	d3 e0       	ldi	r29, 0x03	; 3
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	18 83       	st	Y, r17
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
    134a:	65 e2       	ldi	r22, 0x25	; 37
    134c:	71 e0       	ldi	r23, 0x01	; 1
    134e:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN19class_Display_7_Seg5PutSFEPKc>
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    1352:	18 83       	st	Y, r17
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
	Locate(1);
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	08 95       	ret

0000135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>:
char	class_Display_7_Seg::KeyReadFlash()
{
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    135c:	83 b1       	in	r24, 0x03	; 3
    //check LED key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KEY_DOWN;
    135e:	82 ff       	sbrs	r24, 2
    1360:	06 c0       	rjmp	.+12     	; 0x136e <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x12>
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KEY_UP;
    1362:	81 ff       	sbrs	r24, 1
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x16>
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KEY_ENTER;
    1366:	80 ff       	sbrs	r24, 0
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x1a>
	//else none pressed
    return KEY_NONE;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	08 95       	ret
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    //check LED key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KEY_DOWN;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	08 95       	ret
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KEY_UP;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	08 95       	ret
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KEY_ENTER;
    1376:	83 e0       	ldi	r24, 0x03	; 3
	//else none pressed
    return KEY_NONE;
}
    1378:	08 95       	ret

0000137a <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
	  while (KeyReadFlash()!=KEY_NONE) Time.DelayMsI(20);				//check at 20ms
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x16>
    1382:	44 e1       	ldi	r20, 0x14	; 20
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	ce 01       	movw	r24, r28
    138c:	0e 94 1d 0b 	call	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    1396:	81 11       	cpse	r24, r1
    1398:	f4 cf       	rjmp	.-24     	; 0x1382 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x8>
	  Time.DelayMsI(100);										         //debounce time
    139a:	44 e6       	ldi	r20, 0x64	; 100
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	ce 01       	movw	r24, r28
}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
	  while (KeyReadFlash()!=KEY_NONE) Time.DelayMsI(20);				//check at 20ms
	  Time.DelayMsI(100);										         //debounce time
    13a8:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_ZN10class_Time8DelayMsIEm>

000013ac <_ZN19class_Display_7_Seg10PutToSleepEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutToSleep()
{
		//disable interrupts
		cli();
    13ac:	f8 94       	cli
		//set sleep to POWER SAVE to keep timer2 running
		set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    13ae:	83 b7       	in	r24, 0x33	; 51
    13b0:	81 7f       	andi	r24, 0xF1	; 241
    13b2:	86 60       	ori	r24, 0x06	; 6
    13b4:	83 bf       	out	0x33, r24	; 51
		//enable sleep
		sleep_enable();
    13b6:	83 b7       	in	r24, 0x33	; 51
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	83 bf       	out	0x33, r24	; 51
		//enable global interrupt
		sei();
    13bc:	78 94       	sei
		//put CPU to sleep
		sleep_cpu();
    13be:	88 95       	sleep
		//disable sleep mode
		sleep_disable();
    13c0:	83 b7       	in	r24, 0x33	; 51
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	83 bf       	out	0x33, r24	; 51
    13c6:	08 95       	ret

000013c8 <_ZN19class_Display_7_Seg9DisableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisableIO()
{
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	ec 01       	movw	r28, r24
		//save SREG
		uint8_t sreg=SREG;
    13d0:	1f b7       	in	r17, 0x3f	; 63
		//disable interrupts
		cli();
    13d2:	f8 94       	cli
		//uninitialized hardware ports
		//KeysUnInitialize();
		DisplaysUnInitialize();
    13d4:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>
		MotorUnInitialize();	
    13d8:	ce 01       	movw	r24, r28
    13da:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN19class_Display_7_Seg17MotorUnInitializeEv>
		//restore SREG state
		SREG=sreg;
    13de:	1f bf       	out	0x3f, r17	; 63
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	08 95       	ret

000013e8 <_ZN19class_Display_7_Seg8EnableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::EnableIO()
{
    13e8:	cf 93       	push	r28
		//save SREG
		uint8_t sreg=SREG;
    13ea:	cf b7       	in	r28, 0x3f	; 63
		//disable interrupts
		cli();
    13ec:	f8 94       	cli
		//restore hardware ports state
		//KeysInitialize();
		DisplaysInitialize();
    13ee:	0e 94 68 08 	call	0x10d0	; 0x10d0 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
		//MotorInitialize();
		
		//_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
		
		//restore SREG state
		SREG=sreg;
    13f2:	cf bf       	out	0x3f, r28	; 63
}
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <_ZN19class_Display_7_Seg13MotorGetStateEv>:
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool  class_Display_7_Seg::MotorGetState()
{
	if ((_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR & (1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT))==0)
    13f8:	87 b1       	in	r24, 0x07	; 7
	}
	else
	{
		return true;
	}
}
    13fa:	82 95       	swap	r24
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	08 95       	ret

00001400 <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::SetSecondCallBack(void (*SecondCallBack)(void))
{
	//Set call back function 
	_Display_7_Seg.SecondCallBack=SecondCallBack;
    1400:	70 93 45 03 	sts	0x0345, r23
    1404:	60 93 44 03 	sts	0x0344, r22
    1408:	08 95       	ret

0000140a <_GLOBAL__sub_I__Display_7_Seg>:
/*
 +--------------------------------------+
 |        STRUCTS               	 	|
 +--------------------------------------+
*/
struct _FEED_TIMER_DISP_7_SEG_Struct
    140a:	10 92 3d 03 	sts	0x033D, r1
    140e:	10 92 42 03 	sts	0x0342, r1
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	80 93 43 03 	sts	0x0343, r24
    1418:	10 92 45 03 	sts	0x0345, r1
    141c:	10 92 44 03 	sts	0x0344, r1
    1420:	08 95       	ret

00001422 <_Z14_timeInterruptv>:
//	| REMARKS :  to used callback function define a routine following format                |
//  |            callback(uint8_t Hour,uint8_t Minute,uint8_t Second);                      |
//	+---------------------------------------------------------------------------------------+
void   _timeInterrupt()
{
    if (_time.InterruptInUse)
    1422:	80 91 4d 03 	lds	r24, 0x034D
    1426:	88 23       	and	r24, r24
    1428:	39 f0       	breq	.+14     	; 0x1438 <_Z14_timeInterruptv+0x16>
    {
        if (_time.TimeInterruptCallBack!=nullptr) _time.TimeInterruptCallBack();
    142a:	e0 91 59 03 	lds	r30, 0x0359
    142e:	f0 91 5a 03 	lds	r31, 0x035A
    1432:	30 97       	sbiw	r30, 0x00	; 0
    1434:	09 f0       	breq	.+2      	; 0x1438 <_Z14_timeInterruptv+0x16>
    1436:	09 94       	ijmp
    1438:	08 95       	ret

0000143a <_Z10_timeClockv>:
//	|			 this callback function if activated is called 10 times per second			|
//	+---------------------------------------------------------------------------------------+
void    _timeClock()
{
    //check if on
    if (_time.TimeInUse)
    143a:	80 91 4c 03 	lds	r24, 0x034C
    143e:	88 23       	and	r24, r24
    1440:	09 f4       	brne	.+2      	; 0x1444 <_Z10_timeClockv+0xa>
    1442:	4d c0       	rjmp	.+154    	; 0x14de <_Z10_timeClockv+0xa4>
    {
        //Time to pump Time?
        _time.Milliseconds++;
    1444:	80 91 49 03 	lds	r24, 0x0349
    1448:	90 91 4a 03 	lds	r25, 0x034A
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	90 93 4a 03 	sts	0x034A, r25
    1452:	80 93 49 03 	sts	0x0349, r24
        if (_time.Milliseconds<TIME_TIMER_FREQ/10) return;
    1456:	80 91 49 03 	lds	r24, 0x0349
    145a:	90 91 4a 03 	lds	r25, 0x034A
    145e:	8d 37       	cpi	r24, 0x7D	; 125
    1460:	91 05       	cpc	r25, r1
    1462:	e8 f1       	brcs	.+122    	; 0x14de <_Z10_timeClockv+0xa4>
        //clear timer pump
        _time.Milliseconds=0;
    1464:	10 92 4a 03 	sts	0x034A, r1
    1468:	10 92 49 03 	sts	0x0349, r1
        //tenth of seconds
        _time.Tenth++;
    146c:	80 91 4b 03 	lds	r24, 0x034B
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 4b 03 	sts	0x034B, r24
        if (_time.Tenth>9)
    1476:	80 91 4b 03 	lds	r24, 0x034B
    147a:	8a 30       	cpi	r24, 0x0A	; 10
    147c:	18 f1       	brcs	.+70     	; 0x14c4 <_Z10_timeClockv+0x8a>
        {
            _time.Tenth=0;
    147e:	10 92 4b 03 	sts	0x034B, r1
            //yes, pump Seconds
            _time.Second++;
    1482:	80 91 48 03 	lds	r24, 0x0348
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	80 93 48 03 	sts	0x0348, r24
            if (_time.Second>59)
    148c:	80 91 48 03 	lds	r24, 0x0348
    1490:	8c 33       	cpi	r24, 0x3C	; 60
    1492:	c0 f0       	brcs	.+48     	; 0x14c4 <_Z10_timeClockv+0x8a>
            {
                //yes, pump Minutes clear second
                _time.Second=0;
    1494:	10 92 48 03 	sts	0x0348, r1
                _time.Minute++;
    1498:	80 91 47 03 	lds	r24, 0x0347
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	80 93 47 03 	sts	0x0347, r24
                if (_time.Minute>59)
    14a2:	80 91 47 03 	lds	r24, 0x0347
    14a6:	8c 33       	cpi	r24, 0x3C	; 60
    14a8:	68 f0       	brcs	.+26     	; 0x14c4 <_Z10_timeClockv+0x8a>
                {
                    //yes, pump Hours clear Minute
                    _time.Minute=0;
    14aa:	10 92 47 03 	sts	0x0347, r1
                    _time.Hour++;
    14ae:	80 91 46 03 	lds	r24, 0x0346
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	80 93 46 03 	sts	0x0346, r24
                    if (_time.Hour>23) _time.Hour=0;
    14b8:	80 91 46 03 	lds	r24, 0x0346
    14bc:	88 31       	cpi	r24, 0x18	; 24
    14be:	10 f0       	brcs	.+4      	; 0x14c4 <_Z10_timeClockv+0x8a>
    14c0:	10 92 46 03 	sts	0x0346, r1
                }
            }
        }
        //callback function giving to defined routine parms hour,min,second (updated each second)
        if (_time.TimeClockCallBack!=nullptr) _time.TimeClockCallBack(_time.Hour,_time.Minute,_time.Second);
    14c4:	e0 91 57 03 	lds	r30, 0x0357
    14c8:	f0 91 58 03 	lds	r31, 0x0358
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	39 f0       	breq	.+14     	; 0x14de <_Z10_timeClockv+0xa4>
    14d0:	40 91 48 03 	lds	r20, 0x0348
    14d4:	60 91 47 03 	lds	r22, 0x0347
    14d8:	80 91 46 03 	lds	r24, 0x0346
    14dc:	09 94       	ijmp
    14de:	08 95       	ret

000014e0 <_ZN10class_Time10InitializeEv>:
void class_Time::Initialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    14e0:	9f b7       	in	r25, 0x3f	; 63
    //Disable Interrupts
    cli();
    14e2:	f8 94       	cli
		TCNT0=0;
		//enable timer compare A interrupt
		TIMSK|=(1<<OCIE0);
	#elif defined(_AVR_IOM328P_H_)
		//WGM02=0;WGM01=1;WGM00=0 MODE CTC
		TCCR0A&=~(1<<WGM00);
    14e4:	84 b5       	in	r24, 0x24	; 36
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<WGM01);
    14ea:	84 b5       	in	r24, 0x24	; 36
    14ec:	82 60       	ori	r24, 0x02	; 2
    14ee:	84 bd       	out	0x24, r24	; 36
		TCCR0B&=~(1<<WGM02);
    14f0:	85 b5       	in	r24, 0x25	; 37
    14f2:	87 7f       	andi	r24, 0xF7	; 247
    14f4:	85 bd       	out	0x25, r24	; 37
		//CS02=0;CS01=1;CS00=0 clock divided by 8 altered in this software normal 256
		TCCR0B|=(1<<CS01);
    14f6:	85 b5       	in	r24, 0x25	; 37
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	85 bd       	out	0x25, r24	; 37
		TCCR0B&=~((1<<CS02)|(1<<CS00));
    14fc:	85 b5       	in	r24, 0x25	; 37
    14fe:	8a 7f       	andi	r24, 0xFA	; 250
    1500:	85 bd       	out	0x25, r24	; 37
		//program divisor
		OCR0A=(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ)-1;
    1502:	83 e6       	ldi	r24, 0x63	; 99
    1504:	87 bd       	out	0x27, r24	; 39
		TCNT0=0;
    1506:	16 bc       	out	0x26, r1	; 38
		//enable timer compare A interrupt
		TIMSK0|=(1<<OCIE0A);
    1508:	ee e6       	ldi	r30, 0x6E	; 110
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	80 83       	st	Z, r24
	#elif defined(_AVR_IOM328P_H_)
	#elif defined(_AVR_IOM8_H_)
	#endif
#endif		
    //Restore Interrupts
    SREG=sreg;
    1512:	9f bf       	out	0x3f, r25	; 63
    1514:	08 95       	ret

00001516 <_ZN10class_TimeC1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_Time::class_Time()
    1516:	cf 93       	push	r28
{
	unsigned char sreg;

    //save SREG
	sreg=SREG;
    1518:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
	cli();
    151a:	f8 94       	cli
    //Check if already Initialized
    if (_time.Initialized==false)
    151c:	20 91 4e 03 	lds	r18, 0x034E
    1520:	21 11       	cpse	r18, r1
    1522:	05 c0       	rjmp	.+10     	; 0x152e <_ZN10class_TimeC1Ev+0x18>
    {
        //set initialized
        _time.Initialized=true;
    1524:	21 e0       	ldi	r18, 0x01	; 1
    1526:	20 93 4e 03 	sts	0x034E, r18
        //Initialize
        Initialize();
    152a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN10class_Time10InitializeEv>
    }
    
    //Restore SREG state
	SREG=sreg;
    152e:	cf bf       	out	0x3f, r28	; 63
}
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <__vector_14>:
		    _timeInterrupt();
		    _timeClock();
        }
    #elif defined(_AVR_IOM328P_H_)
        ISR(TIMER0_COMPA_vect)
        {
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
		    //enable interrupts to permit that other pending interrupts is executed more fast as possible
		    sei();		
    1556:	78 94       	sei
            _time.TimerTick+=TIME_1MS;
    1558:	ef e4       	ldi	r30, 0x4F	; 79
    155a:	f3 e0       	ldi	r31, 0x03	; 3
    155c:	20 81       	ld	r18, Z
    155e:	31 81       	ldd	r19, Z+1	; 0x01
    1560:	42 81       	ldd	r20, Z+2	; 0x02
    1562:	53 81       	ldd	r21, Z+3	; 0x03
    1564:	64 81       	ldd	r22, Z+4	; 0x04
    1566:	75 81       	ldd	r23, Z+5	; 0x05
    1568:	86 81       	ldd	r24, Z+6	; 0x06
    156a:	97 81       	ldd	r25, Z+7	; 0x07
    156c:	24 53       	subi	r18, 0x34	; 52
    156e:	33 43       	sbci	r19, 0x33	; 51
    1570:	43 43       	sbci	r20, 0x33	; 51
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	6f 4f       	sbci	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	20 83       	st	Z, r18
    157e:	31 83       	std	Z+1, r19	; 0x01
    1580:	42 83       	std	Z+2, r20	; 0x02
    1582:	53 83       	std	Z+3, r21	; 0x03
    1584:	64 83       	std	Z+4, r22	; 0x04
    1586:	75 83       	std	Z+5, r23	; 0x05
    1588:	86 83       	std	Z+6, r24	; 0x06
    158a:	97 83       	std	Z+7, r25	; 0x07
		    _timeInterrupt();
    158c:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z14_timeInterruptv>
            _timeClock();
    1590:	0e 94 1d 0a 	call	0x143a	; 0x143a <_Z10_timeClockv>
        }
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <_ZN10class_Time15GetMillisecondsEv>:
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetMilliseconds()
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
    15ba:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    15bc:	00 91 52 03 	lds	r16, 0x0352
    15c0:	10 91 53 03 	lds	r17, 0x0353
    15c4:	20 91 54 03 	lds	r18, 0x0354
    15c8:	30 91 55 03 	lds	r19, 0x0355
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
            tmp1=GetTimeTick();
            sei();
    15cc:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    15ce:	80 91 52 03 	lds	r24, 0x0352
    15d2:	90 91 53 03 	lds	r25, 0x0353
    15d6:	a0 91 54 03 	lds	r26, 0x0354
    15da:	b0 91 55 03 	lds	r27, 0x0355

uint32_t class_Time::GetMilliseconds()
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
    15de:	08 17       	cp	r16, r24
    15e0:	19 07       	cpc	r17, r25
    15e2:	2a 07       	cpc	r18, r26
    15e4:	3b 07       	cpc	r19, r27
    15e6:	49 f7       	brne	.-46     	; 0x15ba <_ZN10class_Time15GetMillisecondsEv+0x4>
            sei();
            tmp2=GetTimeTick();
        } while (tmp1!=tmp2);
        //return tick value
        return tmp2;
}
    15e8:	b8 01       	movw	r22, r16
    15ea:	c9 01       	movw	r24, r18
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	08 95       	ret

000015f2 <_ZN10class_Time10SetElapsedEPm>:
//	| INPUT   :  -> tickTimerVariable					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::SetElapsed(uint32_t * timeVariable)
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	eb 01       	movw	r28, r22
	*timeVariable=GetMilliseconds();
    15f8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN10class_Time15GetMillisecondsEv>
    15fc:	68 83       	st	Y, r22
    15fe:	79 83       	std	Y+1, r23	; 0x01
    1600:	8a 83       	std	Y+2, r24	; 0x02
    1602:	9b 83       	std	Y+3, r25	; 0x03
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <_ZN10class_Time10GetElapsedEPm>:
//	| INPUT   :  * tickTimerVariable					                            |
//	| OUTPUT  :  Elapsed time in ticks					                            |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
uint32_t class_Time::GetElapsed(uint32_t * timeVariable)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	eb 01       	movw	r28, r22
	return (GetMilliseconds()-*timeVariable);				//Get difference between actual tick and save tick
    1614:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN10class_Time15GetMillisecondsEv>
    1618:	8b 01       	movw	r16, r22
    161a:	9c 01       	movw	r18, r24
    161c:	88 81       	ld	r24, Y
    161e:	99 81       	ldd	r25, Y+1	; 0x01
    1620:	aa 81       	ldd	r26, Y+2	; 0x02
    1622:	bb 81       	ldd	r27, Y+3	; 0x03
    1624:	08 1b       	sub	r16, r24
    1626:	19 0b       	sbc	r17, r25
    1628:	2a 0b       	sbc	r18, r26
    162a:	3b 0b       	sbc	r19, r27
}
    162c:	b8 01       	movw	r22, r16
    162e:	c9 01       	movw	r24, r18
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <_ZN10class_Time8DelayMsIEm>:
//	| INPUT   :  timeMs in milliseconds					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::DelayMsI(uint32_t timeMs)
{
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	ec 01       	movw	r28, r24
    1650:	6a 01       	movw	r12, r20
    1652:	7b 01       	movw	r14, r22
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
    1654:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN10class_Time15GetMillisecondsEv>
    1658:	4b 01       	movw	r8, r22
    165a:	5c 01       	movw	r10, r24
	do{
		tmp2=GetMilliseconds();
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN10class_Time15GetMillisecondsEv>
void	class_Time::DelayMsI(uint32_t timeMs)
{
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
	do{
    1662:	68 19       	sub	r22, r8
    1664:	79 09       	sbc	r23, r9
    1666:	8a 09       	sbc	r24, r10
    1668:	9b 09       	sbc	r25, r11
    166a:	6c 15       	cp	r22, r12
    166c:	7d 05       	cpc	r23, r13
    166e:	8e 05       	cpc	r24, r14
    1670:	9f 05       	cpc	r25, r15
    1672:	a0 f3       	brcs	.-24     	; 0x165c <_ZN10class_Time8DelayMsIEm+0x22>
		tmp2=GetMilliseconds();
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	df 90       	pop	r13
    167e:	cf 90       	pop	r12
    1680:	bf 90       	pop	r11
    1682:	af 90       	pop	r10
    1684:	9f 90       	pop	r9
    1686:	8f 90       	pop	r8
    1688:	08 95       	ret

0000168a <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>:
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetTimeInterruptCallback(void (*TimeInterruptCallback)(void))
{
	//avoid routines that get more than 720uS long to execute
	_time.TimeInterruptCallBack=TimeInterruptCallback;
    168a:	70 93 5a 03 	sts	0x035A, r23
    168e:	60 93 59 03 	sts	0x0359, r22
    1692:	08 95       	ret

00001694 <_ZN10class_Time17SetInterruptStateEb>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetInterruptState(bool inUse=false)
{
	_time.InterruptInUse=inUse;
    1694:	60 93 4d 03 	sts	0x034D, r22
    1698:	08 95       	ret

0000169a <__umulhisi3>:
    169a:	a2 9f       	mul	r26, r18
    169c:	b0 01       	movw	r22, r0
    169e:	b3 9f       	mul	r27, r19
    16a0:	c0 01       	movw	r24, r0
    16a2:	a3 9f       	mul	r26, r19
    16a4:	01 d0       	rcall	.+2      	; 0x16a8 <__umulhisi3+0xe>
    16a6:	b2 9f       	mul	r27, r18
    16a8:	70 0d       	add	r23, r0
    16aa:	81 1d       	adc	r24, r1
    16ac:	11 24       	eor	r1, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	08 95       	ret

000016b2 <__tablejump2__>:
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31

000016b6 <__tablejump__>:
    16b6:	05 90       	lpm	r0, Z+
    16b8:	f4 91       	lpm	r31, Z
    16ba:	e0 2d       	mov	r30, r0
    16bc:	09 94       	ijmp

000016be <memcmp>:
    16be:	fb 01       	movw	r30, r22
    16c0:	dc 01       	movw	r26, r24
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <memcmp+0xe>
    16c4:	8d 91       	ld	r24, X+
    16c6:	01 90       	ld	r0, Z+
    16c8:	80 19       	sub	r24, r0
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <memcmp+0x16>
    16cc:	41 50       	subi	r20, 0x01	; 1
    16ce:	50 40       	sbci	r21, 0x00	; 0
    16d0:	c8 f7       	brcc	.-14     	; 0x16c4 <memcmp+0x6>
    16d2:	88 1b       	sub	r24, r24
    16d4:	99 0b       	sbc	r25, r25
    16d6:	08 95       	ret

000016d8 <sprintf>:
    16d8:	ae e0       	ldi	r26, 0x0E	; 14
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e7       	ldi	r30, 0x72	; 114
    16de:	fb e0       	ldi	r31, 0x0B	; 11
    16e0:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x1c>
    16e4:	0d 89       	ldd	r16, Y+21	; 0x15
    16e6:	1e 89       	ldd	r17, Y+22	; 0x16
    16e8:	86 e0       	ldi	r24, 0x06	; 6
    16ea:	8c 83       	std	Y+4, r24	; 0x04
    16ec:	1a 83       	std	Y+2, r17	; 0x02
    16ee:	09 83       	std	Y+1, r16	; 0x01
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	9f e7       	ldi	r25, 0x7F	; 127
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	ce 01       	movw	r24, r28
    16fa:	49 96       	adiw	r24, 0x19	; 25
    16fc:	ac 01       	movw	r20, r24
    16fe:	6f 89       	ldd	r22, Y+23	; 0x17
    1700:	78 8d       	ldd	r23, Y+24	; 0x18
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	0e 94 8e 0b 	call	0x171c	; 0x171c <vfprintf>
    170a:	ef 81       	ldd	r30, Y+7	; 0x07
    170c:	f8 85       	ldd	r31, Y+8	; 0x08
    170e:	e0 0f       	add	r30, r16
    1710:	f1 1f       	adc	r31, r17
    1712:	10 82       	st	Z, r1
    1714:	2e 96       	adiw	r28, 0x0e	; 14
    1716:	e4 e0       	ldi	r30, 0x04	; 4
    1718:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x1c>

0000171c <vfprintf>:
    171c:	ac e0       	ldi	r26, 0x0C	; 12
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e9       	ldi	r30, 0x94	; 148
    1722:	fb e0       	ldi	r31, 0x0B	; 11
    1724:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__prologue_saves__>
    1728:	7c 01       	movw	r14, r24
    172a:	6b 01       	movw	r12, r22
    172c:	8a 01       	movw	r16, r20
    172e:	fc 01       	movw	r30, r24
    1730:	17 82       	std	Z+7, r1	; 0x07
    1732:	16 82       	std	Z+6, r1	; 0x06
    1734:	83 81       	ldd	r24, Z+3	; 0x03
    1736:	81 ff       	sbrs	r24, 1
    1738:	c6 c1       	rjmp	.+908    	; 0x1ac6 <vfprintf+0x3aa>
    173a:	88 24       	eor	r8, r8
    173c:	83 94       	inc	r8
    173e:	91 2c       	mov	r9, r1
    1740:	8c 0e       	add	r8, r28
    1742:	9d 1e       	adc	r9, r29
    1744:	f7 01       	movw	r30, r14
    1746:	93 81       	ldd	r25, Z+3	; 0x03
    1748:	f6 01       	movw	r30, r12
    174a:	93 fd       	sbrc	r25, 3
    174c:	85 91       	lpm	r24, Z+
    174e:	93 ff       	sbrs	r25, 3
    1750:	81 91       	ld	r24, Z+
    1752:	6f 01       	movw	r12, r30
    1754:	88 23       	and	r24, r24
    1756:	09 f4       	brne	.+2      	; 0x175a <vfprintf+0x3e>
    1758:	b2 c1       	rjmp	.+868    	; 0x1abe <vfprintf+0x3a2>
    175a:	85 32       	cpi	r24, 0x25	; 37
    175c:	39 f4       	brne	.+14     	; 0x176c <vfprintf+0x50>
    175e:	93 fd       	sbrc	r25, 3
    1760:	85 91       	lpm	r24, Z+
    1762:	93 ff       	sbrs	r25, 3
    1764:	81 91       	ld	r24, Z+
    1766:	6f 01       	movw	r12, r30
    1768:	85 32       	cpi	r24, 0x25	; 37
    176a:	29 f4       	brne	.+10     	; 0x1776 <vfprintf+0x5a>
    176c:	b7 01       	movw	r22, r14
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1774:	e7 cf       	rjmp	.-50     	; 0x1744 <vfprintf+0x28>
    1776:	51 2c       	mov	r5, r1
    1778:	31 2c       	mov	r3, r1
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	20 32       	cpi	r18, 0x20	; 32
    177e:	a8 f4       	brcc	.+42     	; 0x17aa <vfprintf+0x8e>
    1780:	8b 32       	cpi	r24, 0x2B	; 43
    1782:	61 f0       	breq	.+24     	; 0x179c <vfprintf+0x80>
    1784:	28 f4       	brcc	.+10     	; 0x1790 <vfprintf+0x74>
    1786:	80 32       	cpi	r24, 0x20	; 32
    1788:	51 f0       	breq	.+20     	; 0x179e <vfprintf+0x82>
    178a:	83 32       	cpi	r24, 0x23	; 35
    178c:	71 f4       	brne	.+28     	; 0x17aa <vfprintf+0x8e>
    178e:	0b c0       	rjmp	.+22     	; 0x17a6 <vfprintf+0x8a>
    1790:	8d 32       	cpi	r24, 0x2D	; 45
    1792:	39 f0       	breq	.+14     	; 0x17a2 <vfprintf+0x86>
    1794:	80 33       	cpi	r24, 0x30	; 48
    1796:	49 f4       	brne	.+18     	; 0x17aa <vfprintf+0x8e>
    1798:	21 60       	ori	r18, 0x01	; 1
    179a:	28 c0       	rjmp	.+80     	; 0x17ec <vfprintf+0xd0>
    179c:	22 60       	ori	r18, 0x02	; 2
    179e:	24 60       	ori	r18, 0x04	; 4
    17a0:	25 c0       	rjmp	.+74     	; 0x17ec <vfprintf+0xd0>
    17a2:	28 60       	ori	r18, 0x08	; 8
    17a4:	23 c0       	rjmp	.+70     	; 0x17ec <vfprintf+0xd0>
    17a6:	20 61       	ori	r18, 0x10	; 16
    17a8:	21 c0       	rjmp	.+66     	; 0x17ec <vfprintf+0xd0>
    17aa:	27 fd       	sbrc	r18, 7
    17ac:	27 c0       	rjmp	.+78     	; 0x17fc <vfprintf+0xe0>
    17ae:	38 2f       	mov	r19, r24
    17b0:	30 53       	subi	r19, 0x30	; 48
    17b2:	3a 30       	cpi	r19, 0x0A	; 10
    17b4:	78 f4       	brcc	.+30     	; 0x17d4 <vfprintf+0xb8>
    17b6:	26 ff       	sbrs	r18, 6
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <vfprintf+0xaa>
    17ba:	fa e0       	ldi	r31, 0x0A	; 10
    17bc:	5f 9e       	mul	r5, r31
    17be:	30 0d       	add	r19, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	53 2e       	mov	r5, r19
    17c4:	13 c0       	rjmp	.+38     	; 0x17ec <vfprintf+0xd0>
    17c6:	8a e0       	ldi	r24, 0x0A	; 10
    17c8:	38 9e       	mul	r3, r24
    17ca:	30 0d       	add	r19, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	33 2e       	mov	r3, r19
    17d0:	20 62       	ori	r18, 0x20	; 32
    17d2:	0c c0       	rjmp	.+24     	; 0x17ec <vfprintf+0xd0>
    17d4:	8e 32       	cpi	r24, 0x2E	; 46
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <vfprintf+0xc4>
    17d8:	26 fd       	sbrc	r18, 6
    17da:	71 c1       	rjmp	.+738    	; 0x1abe <vfprintf+0x3a2>
    17dc:	20 64       	ori	r18, 0x40	; 64
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0xd0>
    17e0:	8c 36       	cpi	r24, 0x6C	; 108
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <vfprintf+0xcc>
    17e4:	20 68       	ori	r18, 0x80	; 128
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <vfprintf+0xd0>
    17e8:	88 36       	cpi	r24, 0x68	; 104
    17ea:	41 f4       	brne	.+16     	; 0x17fc <vfprintf+0xe0>
    17ec:	f6 01       	movw	r30, r12
    17ee:	93 fd       	sbrc	r25, 3
    17f0:	85 91       	lpm	r24, Z+
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	81 91       	ld	r24, Z+
    17f6:	6f 01       	movw	r12, r30
    17f8:	81 11       	cpse	r24, r1
    17fa:	c0 cf       	rjmp	.-128    	; 0x177c <vfprintf+0x60>
    17fc:	98 2f       	mov	r25, r24
    17fe:	95 54       	subi	r25, 0x45	; 69
    1800:	93 30       	cpi	r25, 0x03	; 3
    1802:	18 f0       	brcs	.+6      	; 0x180a <vfprintf+0xee>
    1804:	90 52       	subi	r25, 0x20	; 32
    1806:	93 30       	cpi	r25, 0x03	; 3
    1808:	28 f4       	brcc	.+10     	; 0x1814 <vfprintf+0xf8>
    180a:	0c 5f       	subi	r16, 0xFC	; 252
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	ff e3       	ldi	r31, 0x3F	; 63
    1810:	f9 83       	std	Y+1, r31	; 0x01
    1812:	0d c0       	rjmp	.+26     	; 0x182e <vfprintf+0x112>
    1814:	83 36       	cpi	r24, 0x63	; 99
    1816:	31 f0       	breq	.+12     	; 0x1824 <vfprintf+0x108>
    1818:	83 37       	cpi	r24, 0x73	; 115
    181a:	71 f0       	breq	.+28     	; 0x1838 <vfprintf+0x11c>
    181c:	83 35       	cpi	r24, 0x53	; 83
    181e:	09 f0       	breq	.+2      	; 0x1822 <vfprintf+0x106>
    1820:	5e c0       	rjmp	.+188    	; 0x18de <vfprintf+0x1c2>
    1822:	23 c0       	rjmp	.+70     	; 0x186a <vfprintf+0x14e>
    1824:	f8 01       	movw	r30, r16
    1826:	80 81       	ld	r24, Z
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	0e 5f       	subi	r16, 0xFE	; 254
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	44 24       	eor	r4, r4
    1830:	43 94       	inc	r4
    1832:	51 2c       	mov	r5, r1
    1834:	54 01       	movw	r10, r8
    1836:	15 c0       	rjmp	.+42     	; 0x1862 <vfprintf+0x146>
    1838:	38 01       	movw	r6, r16
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	6f 0e       	add	r6, r31
    183e:	71 1c       	adc	r7, r1
    1840:	f8 01       	movw	r30, r16
    1842:	a0 80       	ld	r10, Z
    1844:	b1 80       	ldd	r11, Z+1	; 0x01
    1846:	26 ff       	sbrs	r18, 6
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <vfprintf+0x134>
    184a:	65 2d       	mov	r22, r5
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0x138>
    1850:	6f ef       	ldi	r22, 0xFF	; 255
    1852:	7f ef       	ldi	r23, 0xFF	; 255
    1854:	c5 01       	movw	r24, r10
    1856:	2c 87       	std	Y+12, r18	; 0x0c
    1858:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <strnlen>
    185c:	2c 01       	movw	r4, r24
    185e:	83 01       	movw	r16, r6
    1860:	2c 85       	ldd	r18, Y+12	; 0x0c
    1862:	6f e7       	ldi	r22, 0x7F	; 127
    1864:	26 2e       	mov	r2, r22
    1866:	22 22       	and	r2, r18
    1868:	18 c0       	rjmp	.+48     	; 0x189a <vfprintf+0x17e>
    186a:	38 01       	movw	r6, r16
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	6f 0e       	add	r6, r31
    1870:	71 1c       	adc	r7, r1
    1872:	f8 01       	movw	r30, r16
    1874:	a0 80       	ld	r10, Z
    1876:	b1 80       	ldd	r11, Z+1	; 0x01
    1878:	26 ff       	sbrs	r18, 6
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x166>
    187c:	65 2d       	mov	r22, r5
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x16a>
    1882:	6f ef       	ldi	r22, 0xFF	; 255
    1884:	7f ef       	ldi	r23, 0xFF	; 255
    1886:	c5 01       	movw	r24, r10
    1888:	2c 87       	std	Y+12, r18	; 0x0c
    188a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <strnlen_P>
    188e:	2c 01       	movw	r4, r24
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	50 e8       	ldi	r21, 0x80	; 128
    1894:	25 2e       	mov	r2, r21
    1896:	22 2a       	or	r2, r18
    1898:	83 01       	movw	r16, r6
    189a:	23 fc       	sbrc	r2, 3
    189c:	1c c0       	rjmp	.+56     	; 0x18d6 <vfprintf+0x1ba>
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x190>
    18a0:	b7 01       	movw	r22, r14
    18a2:	80 e2       	ldi	r24, 0x20	; 32
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    18aa:	3a 94       	dec	r3
    18ac:	83 2d       	mov	r24, r3
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	48 16       	cp	r4, r24
    18b2:	59 06       	cpc	r5, r25
    18b4:	a8 f3       	brcs	.-22     	; 0x18a0 <vfprintf+0x184>
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <vfprintf+0x1ba>
    18b8:	f5 01       	movw	r30, r10
    18ba:	27 fc       	sbrc	r2, 7
    18bc:	85 91       	lpm	r24, Z+
    18be:	27 fe       	sbrs	r2, 7
    18c0:	81 91       	ld	r24, Z+
    18c2:	5f 01       	movw	r10, r30
    18c4:	b7 01       	movw	r22, r14
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    18cc:	31 10       	cpse	r3, r1
    18ce:	3a 94       	dec	r3
    18d0:	f1 e0       	ldi	r31, 0x01	; 1
    18d2:	4f 1a       	sub	r4, r31
    18d4:	51 08       	sbc	r5, r1
    18d6:	41 14       	cp	r4, r1
    18d8:	51 04       	cpc	r5, r1
    18da:	71 f7       	brne	.-36     	; 0x18b8 <vfprintf+0x19c>
    18dc:	ed c0       	rjmp	.+474    	; 0x1ab8 <vfprintf+0x39c>
    18de:	84 36       	cpi	r24, 0x64	; 100
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <vfprintf+0x1ca>
    18e2:	89 36       	cpi	r24, 0x69	; 105
    18e4:	41 f5       	brne	.+80     	; 0x1936 <vfprintf+0x21a>
    18e6:	f8 01       	movw	r30, r16
    18e8:	27 ff       	sbrs	r18, 7
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <vfprintf+0x1de>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	0c 5f       	subi	r16, 0xFC	; 252
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	08 c0       	rjmp	.+16     	; 0x190a <vfprintf+0x1ee>
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	88 27       	eor	r24, r24
    1900:	77 fd       	sbrc	r23, 7
    1902:	80 95       	com	r24
    1904:	98 2f       	mov	r25, r24
    1906:	0e 5f       	subi	r16, 0xFE	; 254
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	4f e6       	ldi	r20, 0x6F	; 111
    190c:	b4 2e       	mov	r11, r20
    190e:	b2 22       	and	r11, r18
    1910:	97 ff       	sbrs	r25, 7
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <vfprintf+0x20a>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	f0 e8       	ldi	r31, 0x80	; 128
    1924:	bf 2a       	or	r11, r31
    1926:	2a e0       	ldi	r18, 0x0A	; 10
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	a4 01       	movw	r20, r8
    192c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__ultoa_invert>
    1930:	a8 2e       	mov	r10, r24
    1932:	a8 18       	sub	r10, r8
    1934:	43 c0       	rjmp	.+134    	; 0x19bc <vfprintf+0x2a0>
    1936:	85 37       	cpi	r24, 0x75	; 117
    1938:	31 f4       	brne	.+12     	; 0x1946 <vfprintf+0x22a>
    193a:	3f ee       	ldi	r19, 0xEF	; 239
    193c:	b3 2e       	mov	r11, r19
    193e:	b2 22       	and	r11, r18
    1940:	2a e0       	ldi	r18, 0x0A	; 10
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	24 c0       	rjmp	.+72     	; 0x198e <vfprintf+0x272>
    1946:	99 ef       	ldi	r25, 0xF9	; 249
    1948:	b9 2e       	mov	r11, r25
    194a:	b2 22       	and	r11, r18
    194c:	8f 36       	cpi	r24, 0x6F	; 111
    194e:	b9 f0       	breq	.+46     	; 0x197e <vfprintf+0x262>
    1950:	20 f4       	brcc	.+8      	; 0x195a <vfprintf+0x23e>
    1952:	88 35       	cpi	r24, 0x58	; 88
    1954:	09 f0       	breq	.+2      	; 0x1958 <vfprintf+0x23c>
    1956:	b3 c0       	rjmp	.+358    	; 0x1abe <vfprintf+0x3a2>
    1958:	0d c0       	rjmp	.+26     	; 0x1974 <vfprintf+0x258>
    195a:	80 37       	cpi	r24, 0x70	; 112
    195c:	21 f0       	breq	.+8      	; 0x1966 <vfprintf+0x24a>
    195e:	88 37       	cpi	r24, 0x78	; 120
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x248>
    1962:	ad c0       	rjmp	.+346    	; 0x1abe <vfprintf+0x3a2>
    1964:	02 c0       	rjmp	.+4      	; 0x196a <vfprintf+0x24e>
    1966:	20 e1       	ldi	r18, 0x10	; 16
    1968:	b2 2a       	or	r11, r18
    196a:	b4 fe       	sbrs	r11, 4
    196c:	0b c0       	rjmp	.+22     	; 0x1984 <vfprintf+0x268>
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	b8 2a       	or	r11, r24
    1972:	08 c0       	rjmp	.+16     	; 0x1984 <vfprintf+0x268>
    1974:	24 ff       	sbrs	r18, 4
    1976:	09 c0       	rjmp	.+18     	; 0x198a <vfprintf+0x26e>
    1978:	e6 e0       	ldi	r30, 0x06	; 6
    197a:	be 2a       	or	r11, r30
    197c:	06 c0       	rjmp	.+12     	; 0x198a <vfprintf+0x26e>
    197e:	28 e0       	ldi	r18, 0x08	; 8
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	05 c0       	rjmp	.+10     	; 0x198e <vfprintf+0x272>
    1984:	20 e1       	ldi	r18, 0x10	; 16
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	02 c0       	rjmp	.+4      	; 0x198e <vfprintf+0x272>
    198a:	20 e1       	ldi	r18, 0x10	; 16
    198c:	32 e0       	ldi	r19, 0x02	; 2
    198e:	f8 01       	movw	r30, r16
    1990:	b7 fe       	sbrs	r11, 7
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <vfprintf+0x286>
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0c 5f       	subi	r16, 0xFC	; 252
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	06 c0       	rjmp	.+12     	; 0x19ae <vfprintf+0x292>
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 5f       	subi	r16, 0xFE	; 254
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	a4 01       	movw	r20, r8
    19b0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__ultoa_invert>
    19b4:	a8 2e       	mov	r10, r24
    19b6:	a8 18       	sub	r10, r8
    19b8:	ff e7       	ldi	r31, 0x7F	; 127
    19ba:	bf 22       	and	r11, r31
    19bc:	b6 fe       	sbrs	r11, 6
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <vfprintf+0x2ba>
    19c0:	2b 2d       	mov	r18, r11
    19c2:	2e 7f       	andi	r18, 0xFE	; 254
    19c4:	a5 14       	cp	r10, r5
    19c6:	50 f4       	brcc	.+20     	; 0x19dc <vfprintf+0x2c0>
    19c8:	b4 fe       	sbrs	r11, 4
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <vfprintf+0x2c4>
    19cc:	b2 fc       	sbrc	r11, 2
    19ce:	08 c0       	rjmp	.+16     	; 0x19e0 <vfprintf+0x2c4>
    19d0:	2b 2d       	mov	r18, r11
    19d2:	2e 7e       	andi	r18, 0xEE	; 238
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <vfprintf+0x2c4>
    19d6:	7a 2c       	mov	r7, r10
    19d8:	2b 2d       	mov	r18, r11
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <vfprintf+0x2c6>
    19dc:	7a 2c       	mov	r7, r10
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <vfprintf+0x2c6>
    19e0:	75 2c       	mov	r7, r5
    19e2:	24 ff       	sbrs	r18, 4
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <vfprintf+0x2e4>
    19e6:	fe 01       	movw	r30, r28
    19e8:	ea 0d       	add	r30, r10
    19ea:	f1 1d       	adc	r31, r1
    19ec:	80 81       	ld	r24, Z
    19ee:	80 33       	cpi	r24, 0x30	; 48
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <vfprintf+0x2da>
    19f2:	29 7e       	andi	r18, 0xE9	; 233
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <vfprintf+0x2ec>
    19f6:	22 ff       	sbrs	r18, 2
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <vfprintf+0x2ea>
    19fa:	73 94       	inc	r7
    19fc:	73 94       	inc	r7
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <vfprintf+0x2ec>
    1a00:	82 2f       	mov	r24, r18
    1a02:	86 78       	andi	r24, 0x86	; 134
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <vfprintf+0x2ec>
    1a06:	73 94       	inc	r7
    1a08:	23 fd       	sbrc	r18, 3
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <vfprintf+0x318>
    1a0c:	20 ff       	sbrs	r18, 0
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <vfprintf+0x312>
    1a10:	5a 2c       	mov	r5, r10
    1a12:	73 14       	cp	r7, r3
    1a14:	60 f4       	brcc	.+24     	; 0x1a2e <vfprintf+0x312>
    1a16:	53 0c       	add	r5, r3
    1a18:	57 18       	sub	r5, r7
    1a1a:	73 2c       	mov	r7, r3
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <vfprintf+0x312>
    1a1e:	b7 01       	movw	r22, r14
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	2c 87       	std	Y+12, r18	; 0x0c
    1a26:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1a2a:	73 94       	inc	r7
    1a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a2e:	73 14       	cp	r7, r3
    1a30:	b0 f3       	brcs	.-20     	; 0x1a1e <vfprintf+0x302>
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <vfprintf+0x320>
    1a34:	73 14       	cp	r7, r3
    1a36:	10 f4       	brcc	.+4      	; 0x1a3c <vfprintf+0x320>
    1a38:	37 18       	sub	r3, r7
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <vfprintf+0x322>
    1a3c:	31 2c       	mov	r3, r1
    1a3e:	24 ff       	sbrs	r18, 4
    1a40:	12 c0       	rjmp	.+36     	; 0x1a66 <vfprintf+0x34a>
    1a42:	b7 01       	movw	r22, r14
    1a44:	80 e3       	ldi	r24, 0x30	; 48
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	2c 87       	std	Y+12, r18	; 0x0c
    1a4a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1a4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a50:	22 ff       	sbrs	r18, 2
    1a52:	1e c0       	rjmp	.+60     	; 0x1a90 <vfprintf+0x374>
    1a54:	21 ff       	sbrs	r18, 1
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <vfprintf+0x342>
    1a58:	88 e5       	ldi	r24, 0x58	; 88
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x346>
    1a5e:	88 e7       	ldi	r24, 0x78	; 120
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	b7 01       	movw	r22, r14
    1a64:	0c c0       	rjmp	.+24     	; 0x1a7e <vfprintf+0x362>
    1a66:	82 2f       	mov	r24, r18
    1a68:	86 78       	andi	r24, 0x86	; 134
    1a6a:	91 f0       	breq	.+36     	; 0x1a90 <vfprintf+0x374>
    1a6c:	21 fd       	sbrc	r18, 1
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <vfprintf+0x358>
    1a70:	80 e2       	ldi	r24, 0x20	; 32
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <vfprintf+0x35a>
    1a74:	8b e2       	ldi	r24, 0x2B	; 43
    1a76:	27 fd       	sbrc	r18, 7
    1a78:	8d e2       	ldi	r24, 0x2D	; 45
    1a7a:	b7 01       	movw	r22, r14
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <vfprintf+0x374>
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 e3       	ldi	r24, 0x30	; 48
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1a8e:	5a 94       	dec	r5
    1a90:	a5 14       	cp	r10, r5
    1a92:	c0 f3       	brcs	.-16     	; 0x1a84 <vfprintf+0x368>
    1a94:	aa 94       	dec	r10
    1a96:	f4 01       	movw	r30, r8
    1a98:	ea 0d       	add	r30, r10
    1a9a:	f1 1d       	adc	r31, r1
    1a9c:	b7 01       	movw	r22, r14
    1a9e:	80 81       	ld	r24, Z
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1aa6:	a1 10       	cpse	r10, r1
    1aa8:	f5 cf       	rjmp	.-22     	; 0x1a94 <vfprintf+0x378>
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <vfprintf+0x39c>
    1aac:	b7 01       	movw	r22, r14
    1aae:	80 e2       	ldi	r24, 0x20	; 32
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <fputc>
    1ab6:	3a 94       	dec	r3
    1ab8:	31 10       	cpse	r3, r1
    1aba:	f8 cf       	rjmp	.-16     	; 0x1aac <vfprintf+0x390>
    1abc:	43 ce       	rjmp	.-890    	; 0x1744 <vfprintf+0x28>
    1abe:	f7 01       	movw	r30, r14
    1ac0:	26 81       	ldd	r18, Z+6	; 0x06
    1ac2:	37 81       	ldd	r19, Z+7	; 0x07
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x3ae>
    1ac6:	2f ef       	ldi	r18, 0xFF	; 255
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	c9 01       	movw	r24, r18
    1acc:	2c 96       	adiw	r28, 0x0c	; 12
    1ace:	e2 e1       	ldi	r30, 0x12	; 18
    1ad0:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__epilogue_restores__>

00001ad4 <__eerd_block_m328p>:
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22

00001ad8 <__eerd_blraw_m328p>:
    1ad8:	fc 01       	movw	r30, r24
    1ada:	f9 99       	sbic	0x1f, 1	; 31
    1adc:	fe cf       	rjmp	.-4      	; 0x1ada <__eerd_blraw_m328p+0x2>
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <__eerd_blraw_m328p+0x14>
    1ae0:	f2 bd       	out	0x22, r31	; 34
    1ae2:	e1 bd       	out	0x21, r30	; 33
    1ae4:	f8 9a       	sbi	0x1f, 0	; 31
    1ae6:	31 96       	adiw	r30, 0x01	; 1
    1ae8:	00 b4       	in	r0, 0x20	; 32
    1aea:	0d 92       	st	X+, r0
    1aec:	41 50       	subi	r20, 0x01	; 1
    1aee:	50 40       	sbci	r21, 0x00	; 0
    1af0:	b8 f7       	brcc	.-18     	; 0x1ae0 <__eerd_blraw_m328p+0x8>
    1af2:	08 95       	ret

00001af4 <__eerd_byte_m328p>:
    1af4:	f9 99       	sbic	0x1f, 1	; 31
    1af6:	fe cf       	rjmp	.-4      	; 0x1af4 <__eerd_byte_m328p>
    1af8:	92 bd       	out	0x22, r25	; 34
    1afa:	81 bd       	out	0x21, r24	; 33
    1afc:	f8 9a       	sbi	0x1f, 0	; 31
    1afe:	99 27       	eor	r25, r25
    1b00:	80 b5       	in	r24, 0x20	; 32
    1b02:	08 95       	ret

00001b04 <__eewr_block_m328p>:
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <__eewr_block_m328p+0xc>
    1b0a:	2d 91       	ld	r18, X+
    1b0c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__eewr_r18_m328p>
    1b10:	41 50       	subi	r20, 0x01	; 1
    1b12:	50 40       	sbci	r21, 0x00	; 0
    1b14:	d0 f7       	brcc	.-12     	; 0x1b0a <__eewr_block_m328p+0x6>
    1b16:	08 95       	ret

00001b18 <__eewr_byte_m328p>:
    1b18:	26 2f       	mov	r18, r22

00001b1a <__eewr_r18_m328p>:
    1b1a:	f9 99       	sbic	0x1f, 1	; 31
    1b1c:	fe cf       	rjmp	.-4      	; 0x1b1a <__eewr_r18_m328p>
    1b1e:	1f ba       	out	0x1f, r1	; 31
    1b20:	92 bd       	out	0x22, r25	; 34
    1b22:	81 bd       	out	0x21, r24	; 33
    1b24:	20 bd       	out	0x20, r18	; 32
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	fa 9a       	sbi	0x1f, 2	; 31
    1b2c:	f9 9a       	sbi	0x1f, 1	; 31
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	08 95       	ret

00001b34 <strnlen_P>:
    1b34:	fc 01       	movw	r30, r24
    1b36:	05 90       	lpm	r0, Z+
    1b38:	61 50       	subi	r22, 0x01	; 1
    1b3a:	70 40       	sbci	r23, 0x00	; 0
    1b3c:	01 10       	cpse	r0, r1
    1b3e:	d8 f7       	brcc	.-10     	; 0x1b36 <strnlen_P+0x2>
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	8e 0f       	add	r24, r30
    1b46:	9f 1f       	adc	r25, r31
    1b48:	08 95       	ret

00001b4a <strnlen>:
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	61 50       	subi	r22, 0x01	; 1
    1b4e:	70 40       	sbci	r23, 0x00	; 0
    1b50:	01 90       	ld	r0, Z+
    1b52:	01 10       	cpse	r0, r1
    1b54:	d8 f7       	brcc	.-10     	; 0x1b4c <strnlen+0x2>
    1b56:	80 95       	com	r24
    1b58:	90 95       	com	r25
    1b5a:	8e 0f       	add	r24, r30
    1b5c:	9f 1f       	adc	r25, r31
    1b5e:	08 95       	ret

00001b60 <fputc>:
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	8c 01       	movw	r16, r24
    1b6a:	eb 01       	movw	r28, r22
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	81 fd       	sbrc	r24, 1
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <fputc+0x18>
    1b72:	0f ef       	ldi	r16, 0xFF	; 255
    1b74:	1f ef       	ldi	r17, 0xFF	; 255
    1b76:	1a c0       	rjmp	.+52     	; 0x1bac <fputc+0x4c>
    1b78:	82 ff       	sbrs	r24, 2
    1b7a:	0d c0       	rjmp	.+26     	; 0x1b96 <fputc+0x36>
    1b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	28 17       	cp	r18, r24
    1b86:	39 07       	cpc	r19, r25
    1b88:	64 f4       	brge	.+24     	; 0x1ba2 <fputc+0x42>
    1b8a:	e8 81       	ld	r30, Y
    1b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8e:	01 93       	st	Z+, r16
    1b90:	f9 83       	std	Y+1, r31	; 0x01
    1b92:	e8 83       	st	Y, r30
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <fputc+0x42>
    1b96:	e8 85       	ldd	r30, Y+8	; 0x08
    1b98:	f9 85       	ldd	r31, Y+9	; 0x09
    1b9a:	80 2f       	mov	r24, r16
    1b9c:	09 95       	icall
    1b9e:	89 2b       	or	r24, r25
    1ba0:	41 f7       	brne	.-48     	; 0x1b72 <fputc+0x12>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	9f 83       	std	Y+7, r25	; 0x07
    1baa:	8e 83       	std	Y+6, r24	; 0x06
    1bac:	c8 01       	movw	r24, r16
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret

00001bb8 <__ultoa_invert>:
    1bb8:	fa 01       	movw	r30, r20
    1bba:	aa 27       	eor	r26, r26
    1bbc:	28 30       	cpi	r18, 0x08	; 8
    1bbe:	51 f1       	breq	.+84     	; 0x1c14 <__ultoa_invert+0x5c>
    1bc0:	20 31       	cpi	r18, 0x10	; 16
    1bc2:	81 f1       	breq	.+96     	; 0x1c24 <__ultoa_invert+0x6c>
    1bc4:	e8 94       	clt
    1bc6:	6f 93       	push	r22
    1bc8:	6e 7f       	andi	r22, 0xFE	; 254
    1bca:	6e 5f       	subi	r22, 0xFE	; 254
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	af 4f       	sbci	r26, 0xFF	; 255
    1bd4:	b1 e0       	ldi	r27, 0x01	; 1
    1bd6:	3e d0       	rcall	.+124    	; 0x1c54 <__ultoa_invert+0x9c>
    1bd8:	b4 e0       	ldi	r27, 0x04	; 4
    1bda:	3c d0       	rcall	.+120    	; 0x1c54 <__ultoa_invert+0x9c>
    1bdc:	67 0f       	add	r22, r23
    1bde:	78 1f       	adc	r23, r24
    1be0:	89 1f       	adc	r24, r25
    1be2:	9a 1f       	adc	r25, r26
    1be4:	a1 1d       	adc	r26, r1
    1be6:	68 0f       	add	r22, r24
    1be8:	79 1f       	adc	r23, r25
    1bea:	8a 1f       	adc	r24, r26
    1bec:	91 1d       	adc	r25, r1
    1bee:	a1 1d       	adc	r26, r1
    1bf0:	6a 0f       	add	r22, r26
    1bf2:	71 1d       	adc	r23, r1
    1bf4:	81 1d       	adc	r24, r1
    1bf6:	91 1d       	adc	r25, r1
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	20 d0       	rcall	.+64     	; 0x1c3c <__ultoa_invert+0x84>
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <__ultoa_invert+0x48>
    1bfe:	68 94       	set
    1c00:	3f 91       	pop	r19
    1c02:	2a e0       	ldi	r18, 0x0A	; 10
    1c04:	26 9f       	mul	r18, r22
    1c06:	11 24       	eor	r1, r1
    1c08:	30 19       	sub	r19, r0
    1c0a:	30 5d       	subi	r19, 0xD0	; 208
    1c0c:	31 93       	st	Z+, r19
    1c0e:	de f6       	brtc	.-74     	; 0x1bc6 <__ultoa_invert+0xe>
    1c10:	cf 01       	movw	r24, r30
    1c12:	08 95       	ret
    1c14:	46 2f       	mov	r20, r22
    1c16:	47 70       	andi	r20, 0x07	; 7
    1c18:	40 5d       	subi	r20, 0xD0	; 208
    1c1a:	41 93       	st	Z+, r20
    1c1c:	b3 e0       	ldi	r27, 0x03	; 3
    1c1e:	0f d0       	rcall	.+30     	; 0x1c3e <__ultoa_invert+0x86>
    1c20:	c9 f7       	brne	.-14     	; 0x1c14 <__ultoa_invert+0x5c>
    1c22:	f6 cf       	rjmp	.-20     	; 0x1c10 <__ultoa_invert+0x58>
    1c24:	46 2f       	mov	r20, r22
    1c26:	4f 70       	andi	r20, 0x0F	; 15
    1c28:	40 5d       	subi	r20, 0xD0	; 208
    1c2a:	4a 33       	cpi	r20, 0x3A	; 58
    1c2c:	18 f0       	brcs	.+6      	; 0x1c34 <__ultoa_invert+0x7c>
    1c2e:	49 5d       	subi	r20, 0xD9	; 217
    1c30:	31 fd       	sbrc	r19, 1
    1c32:	40 52       	subi	r20, 0x20	; 32
    1c34:	41 93       	st	Z+, r20
    1c36:	02 d0       	rcall	.+4      	; 0x1c3c <__ultoa_invert+0x84>
    1c38:	a9 f7       	brne	.-22     	; 0x1c24 <__ultoa_invert+0x6c>
    1c3a:	ea cf       	rjmp	.-44     	; 0x1c10 <__ultoa_invert+0x58>
    1c3c:	b4 e0       	ldi	r27, 0x04	; 4
    1c3e:	a6 95       	lsr	r26
    1c40:	97 95       	ror	r25
    1c42:	87 95       	ror	r24
    1c44:	77 95       	ror	r23
    1c46:	67 95       	ror	r22
    1c48:	ba 95       	dec	r27
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__ultoa_invert+0x86>
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	61 05       	cpc	r22, r1
    1c50:	71 05       	cpc	r23, r1
    1c52:	08 95       	ret
    1c54:	9b 01       	movw	r18, r22
    1c56:	ac 01       	movw	r20, r24
    1c58:	0a 2e       	mov	r0, r26
    1c5a:	06 94       	lsr	r0
    1c5c:	57 95       	ror	r21
    1c5e:	47 95       	ror	r20
    1c60:	37 95       	ror	r19
    1c62:	27 95       	ror	r18
    1c64:	ba 95       	dec	r27
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__ultoa_invert+0xa2>
    1c68:	62 0f       	add	r22, r18
    1c6a:	73 1f       	adc	r23, r19
    1c6c:	84 1f       	adc	r24, r20
    1c6e:	95 1f       	adc	r25, r21
    1c70:	a0 1d       	adc	r26, r0
    1c72:	08 95       	ret

00001c74 <__prologue_saves__>:
    1c74:	2f 92       	push	r2
    1c76:	3f 92       	push	r3
    1c78:	4f 92       	push	r4
    1c7a:	5f 92       	push	r5
    1c7c:	6f 92       	push	r6
    1c7e:	7f 92       	push	r7
    1c80:	8f 92       	push	r8
    1c82:	9f 92       	push	r9
    1c84:	af 92       	push	r10
    1c86:	bf 92       	push	r11
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	ca 1b       	sub	r28, r26
    1c9e:	db 0b       	sbc	r29, r27
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	09 94       	ijmp

00001cac <__epilogue_restores__>:
    1cac:	2a 88       	ldd	r2, Y+18	; 0x12
    1cae:	39 88       	ldd	r3, Y+17	; 0x11
    1cb0:	48 88       	ldd	r4, Y+16	; 0x10
    1cb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cbe:	b9 84       	ldd	r11, Y+9	; 0x09
    1cc0:	c8 84       	ldd	r12, Y+8	; 0x08
    1cc2:	df 80       	ldd	r13, Y+7	; 0x07
    1cc4:	ee 80       	ldd	r14, Y+6	; 0x06
    1cc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1cc8:	0c 81       	ldd	r16, Y+4	; 0x04
    1cca:	1b 81       	ldd	r17, Y+3	; 0x03
    1ccc:	aa 81       	ldd	r26, Y+2	; 0x02
    1cce:	b9 81       	ldd	r27, Y+1	; 0x01
    1cd0:	ce 0f       	add	r28, r30
    1cd2:	d1 1d       	adc	r29, r1
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	ed 01       	movw	r28, r26
    1ce0:	08 95       	ret

00001ce2 <_exit>:
    1ce2:	f8 94       	cli

00001ce4 <__stop_program>:
    1ce4:	ff cf       	rjmp	.-2      	; 0x1ce4 <__stop_program>
