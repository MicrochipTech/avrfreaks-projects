
_Feed_Timer_DP7_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001d16  00001dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d16  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800130  00800130  00001dfa  2**0
                  ALLOC
  3 .eeprom       000002bd  00810000  00810000  00001dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005174  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c3f  00000000  00000000  00007580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d02  00000000  00000000  000081bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000854  00000000  00000000  00008ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001523  00000000  00000000  00009718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001dbb  00000000  00000000  0000ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  0000c9f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
       8:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      14:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      18:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      1c:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_7>
      20:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      24:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      28:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      30:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      34:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      38:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_14>
      3c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      4c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      54:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      58:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      5c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      60:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 20       	and	r2, r0
      6a:	20 2d       	mov	r18, r0
	...

0000006d <_ZZ4mainE3__c_2>:
      6d:	20 20 2d 20 00                                        - .

00000072 <_ZZ4mainE3__c_1>:
      72:	20 2d 20 20 00                                       -  .

00000077 <_ZZ4mainE3__c_0>:
      77:	2d 20 20 20 00                                      -   .

0000007c <_ZZ4mainE3__c>:
      7c:	44 41 52 54 00                                      DART.

00000081 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_4>:
      81:	49 4e 56 4c 00                                      INVL.

00000086 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_3>:
      86:	53 41 49 20 00                                      SAI .

0000008b <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_2>:
      8b:	52 53 2d 34 00                                      RS-4.

00000090 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_1>:
      90:	44 45 2d 33 00                                      DE-3.

00000095 <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c_0>:
      95:	49 43 2d 32 00                                      IC-2.

0000009a <_ZZN16class_Feed_Timer14GetMenuItemStrEhE3__c>:
      9a:	48 52 2d 31 00                                      HR-1.

0000009f <_ZZN16class_Feed_Timer8InitTimeEbE3__c_5>:
      9f:	20 20 4d 4d 00                                        MM.

000000a4 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_4>:
      a4:	48 48 20 20 00                                      HH  .

000000a9 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_3>:
      a9:	44 53 45 4d 00                                      DSEM.

000000ae <_ZZN16class_Feed_Timer8InitTimeEbE3__c_2>:
      ae:	4d 4d 00                                            MM.

000000b1 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_1>:
      b1:	48 48 00                                            HH.

000000b4 <_ZZN16class_Feed_Timer8InitTimeEbE3__c_0>:
      b4:	44 53 45 4d 00                                      DSEM.

000000b9 <_ZZN16class_Feed_Timer8InitTimeEbE3__c>:
      b9:	20 20 00                                              .

000000bc <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_6>:
      bc:	49 4e 56 4c 00                                      INVL.

000000c1 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_5>:
      c1:	44 4f 4d 20 00                                      DOM .

000000c6 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_4>:
      c6:	53 41 42 20 00                                      SAB .

000000cb <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_3>:
      cb:	53 45 58 20 00                                      SEX .

000000d0 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_2>:
      d0:	51 55 49 20 00                                      QUI .

000000d5 <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_1>:
      d5:	51 55 41 20 00                                      QUA .

000000da <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c_0>:
      da:	54 45 52 20 00                                      TER .

000000df <_ZZN16class_Feed_Timer13GetWeekDayStrEhE3__c>:
      df:	53 45 47 20 00                                      SEG .

000000e4 <_ZZN19class_Display_7_Seg3ClsEvE3__c>:
      e4:	20 20 20 20 00                                          .

000000e9 <_ZL34_FEED_TIMER_DISP_7_SEG_ASCII_Table>:
      e9:	00 00 22 00 00 00 00 20 39 0f 00 00 0c 40 88 52     ..".... 9....@.R
      f9:	3f 06 5b 4f 66 6d 7d 07 7f 6f 00 00 00 48 00 53     ?.[Ofm}..o...H.S
     109:	00 77 7c 39 5e 79 71 6f 76 06 1e 7e 38 37 54 3f     .w|9^yqov..~87T?
     119:	73 67 33 6d 78 3e 1c 2a 76 6e 5b 39 64 0f 23 08     sg3mx>.*vn[9d.#.
     129:	02                                                  .

0000012a <__ctors_start>:
     12a:	2c 08       	sbc	r2, r12
     12c:	1a 0a       	sbc	r1, r26

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d8 e0       	ldi	r29, 0x08	; 8
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 e1       	ldi	r30, 0x16	; 22
     142:	fd e1       	ldi	r31, 0x1D	; 29
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a0 33       	cpi	r26, 0x30	; 48
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	23 e0       	ldi	r18, 0x03	; 3
     152:	a0 e3       	ldi	r26, 0x30	; 48
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	af 35       	cpi	r26, 0x5F	; 95
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>

00000160 <__do_global_ctors>:
     160:	10 e0       	ldi	r17, 0x00	; 0
     162:	c7 e9       	ldi	r28, 0x97	; 151
     164:	d0 e0       	ldi	r29, 0x00	; 0
     166:	04 c0       	rjmp	.+8      	; 0x170 <__do_global_ctors+0x10>
     168:	21 97       	sbiw	r28, 0x01	; 1
     16a:	fe 01       	movw	r30, r28
     16c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__tablejump2__>
     170:	c5 39       	cpi	r28, 0x95	; 149
     172:	d1 07       	cpc	r29, r17
     174:	c9 f7       	brne	.-14     	; 0x168 <__do_global_ctors+0x8>
     176:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <main>
     17a:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <_exit>

0000017e <__bad_interrupt>:
     17e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>:
		/* Set Timer 0 Disable                                                  */
		/************************************************************************/
		void inline SetTimer0_OFF()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0&=~(1<<OCIE0A);
     182:	ee e6       	ldi	r30, 0x6E	; 110
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	8d 7f       	andi	r24, 0xFD	; 253
     18a:	80 83       	st	Z, r24
     18c:	08 95       	ret

0000018e <_ZN16class_Feed_Timer13ClockCallBackEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::ClockCallBack()
{
     18e:	af 92       	push	r10
     190:	bf 92       	push	r11
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	27 97       	sbiw	r28, 0x07	; 7
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f be       	out	0x3f, r0	; 63
     1b0:	cd bf       	out	0x3d, r28	; 61
	//////////////////////////////
	//PROCESS TIME
	//////////////////////////////
	
	//pump tick count
	TickCount++;
     1b2:	80 91 31 01 	lds	r24, 0x0131
     1b6:	90 91 32 01 	lds	r25, 0x0132
     1ba:	a0 91 33 01 	lds	r26, 0x0133
     1be:	b0 91 34 01 	lds	r27, 0x0134
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	a1 1d       	adc	r26, r1
     1c6:	b1 1d       	adc	r27, r1
     1c8:	80 93 31 01 	sts	0x0131, r24
     1cc:	90 93 32 01 	sts	0x0132, r25
     1d0:	a0 93 33 01 	sts	0x0133, r26
     1d4:	b0 93 34 01 	sts	0x0134, r27
	//pump second
	Ptrs->Second++;
     1d8:	e0 91 01 01 	lds	r30, 0x0101
     1dc:	f0 91 02 01 	lds	r31, 0x0102
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	82 83       	std	Z+2, r24	; 0x02
	//if greater 59
	if (Ptrs->Second>59)	{
     1e6:	82 81       	ldd	r24, Z+2	; 0x02
     1e8:	8c 33       	cpi	r24, 0x3C	; 60
     1ea:	b8 f0       	brcs	.+46     	; 0x21a <_ZN16class_Feed_Timer13ClockCallBackEv+0x8c>
		//clear second
		Ptrs->Second=0;
     1ec:	12 82       	std	Z+2, r1	; 0x02
		//pump minute
		Ptrs->Minute++;
     1ee:	81 81       	ldd	r24, Z+1	; 0x01
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	81 83       	std	Z+1, r24	; 0x01
		//if greater 59
		if (Ptrs->Minute>59)	{
     1f4:	81 81       	ldd	r24, Z+1	; 0x01
     1f6:	8c 33       	cpi	r24, 0x3C	; 60
     1f8:	80 f0       	brcs	.+32     	; 0x21a <_ZN16class_Feed_Timer13ClockCallBackEv+0x8c>
			//clear minute
			Ptrs->Minute=0;
     1fa:	11 82       	std	Z+1, r1	; 0x01
			//pump hour
			Ptrs->Hour++;
     1fc:	80 81       	ld	r24, Z
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 83       	st	Z, r24
			//if greater 23
			if (Ptrs->Hour>23)  {
     202:	80 81       	ld	r24, Z
     204:	88 31       	cpi	r24, 0x18	; 24
     206:	48 f0       	brcs	.+18     	; 0x21a <_ZN16class_Feed_Timer13ClockCallBackEv+0x8c>
				//clear hour
				Ptrs->Hour=0;
     208:	10 82       	st	Z, r1
				//pump week day
				Ptrs->WeekDay++;
     20a:	83 81       	ldd	r24, Z+3	; 0x03
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	83 83       	std	Z+3, r24	; 0x03
				//if greater 7
				if (Ptrs->WeekDay>7)	Ptrs->WeekDay=1; //Set to Monday=1
     210:	83 81       	ldd	r24, Z+3	; 0x03
     212:	88 30       	cpi	r24, 0x08	; 8
     214:	10 f0       	brcs	.+4      	; 0x21a <_ZN16class_Feed_Timer13ClockCallBackEv+0x8c>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	83 83       	std	Z+3, r24	; 0x03
	/////////////////////////////
	struct EventStruct *EventP,EventTmp;
	struct EventCountStruct *EventCountP;
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
     21a:	8c eb       	ldi	r24, 0xBC	; 188
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     222:	c8 2e       	mov	r12, r24
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     224:	d1 2c       	mov	r13, r1
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
     226:	0f e3       	ldi	r16, 0x3F	; 63
     228:	11 e0       	ldi	r17, 0x01	; 1
	struct EventCountStruct *EventCountP;
	uint8_t	Event,EventSize;
	//Get Events Size
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	e8 2e       	mov	r14, r24
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	f8 2e       	mov	r15, r24
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
						dp.MotorOFF();
						SleepState=true;
     232:	bb 24       	eor	r11, r11
     234:	b3 94       	inc	r11
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     236:	dc 14       	cp	r13, r12
     238:	09 f4       	brne	.+2      	; 0x23c <_ZN16class_Feed_Timer13ClockCallBackEv+0xae>
     23a:	c2 c0       	rjmp	.+388    	; 0x3c0 <_ZN16class_Feed_Timer13ClockCallBackEv+0x232>
	//for(uint8_t i=0;i<EVENT_SIZE;i++)
	{
		Event=eeprom_read_byte(&EventP->Event);
     23c:	c7 01       	movw	r24, r14
     23e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
     242:	a8 2e       	mov	r10, r24
		switch (Event)
     244:	31 e0       	ldi	r19, 0x01	; 1
     246:	83 17       	cp	r24, r19
     248:	29 f0       	breq	.+10     	; 0x254 <_ZN16class_Feed_Timer13ClockCallBackEv+0xc6>
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	a8 16       	cp	r10, r24
     24e:	09 f4       	brne	.+2      	; 0x252 <_ZN16class_Feed_Timer13ClockCallBackEv+0xc4>
     250:	5c c0       	rjmp	.+184    	; 0x30a <_ZN16class_Feed_Timer13ClockCallBackEv+0x17c>
     252:	96 c0       	rjmp	.+300    	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
			////////////////////////
			// REPEAT EVENT
			////////////////////////
			case EVENT_TYPE::REPEAT:
				//time to load from hours,minute?
				if (EventCountP->Flags.SeparateFlag.LoadFrom==false && EventCountP->Count==0)
     254:	f8 01       	movw	r30, r16
     256:	80 81       	ld	r24, Z
     258:	41 81       	ldd	r20, Z+1	; 0x01
     25a:	52 81       	ldd	r21, Z+2	; 0x02
     25c:	63 81       	ldd	r22, Z+3	; 0x03
     25e:	74 81       	ldd	r23, Z+4	; 0x04
     260:	80 fd       	sbrc	r24, 0
     262:	2b c0       	rjmp	.+86     	; 0x2ba <_ZN16class_Feed_Timer13ClockCallBackEv+0x12c>
     264:	41 15       	cp	r20, r1
     266:	51 05       	cpc	r21, r1
     268:	61 05       	cpc	r22, r1
     26a:	71 05       	cpc	r23, r1
     26c:	09 f0       	breq	.+2      	; 0x270 <_ZN16class_Feed_Timer13ClockCallBackEv+0xe2>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <_ZN16class_Feed_Timer13ClockCallBackEv+0x168>
				{
					//yes, update count from hours and minute
					eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     270:	47 e0       	ldi	r20, 0x07	; 7
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	b7 01       	movw	r22, r14
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <eeprom_read_block>
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.Hour*60+(uint16_t)EventTmp.Minute)*60L;
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	2b 81       	ldd	r18, Y+3	; 0x03
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	fc e3       	ldi	r31, 0x3C	; 60
     286:	8f 9f       	mul	r24, r31
     288:	20 0d       	add	r18, r0
     28a:	31 1d       	adc	r19, r1
     28c:	11 24       	eor	r1, r1
     28e:	ac e3       	ldi	r26, 0x3C	; 60
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	0e 94 5f 0b 	call	0x16be	; 0x16be <__umulhisi3>
     296:	f8 01       	movw	r30, r16
     298:	61 83       	std	Z+1, r22	; 0x01
     29a:	72 83       	std	Z+2, r23	; 0x02
     29c:	83 83       	std	Z+3, r24	; 0x03
     29e:	94 83       	std	Z+4, r25	; 0x04
					//set flag to true
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     2a0:	90 81       	ld	r25, Z
     2a2:	91 60       	ori	r25, 0x01	; 1
     2a4:	90 83       	st	Z, r25

					//if second event the turn motor off
					if (EventCountP->Flags.SeparateFlag.Counting)
     2a6:	91 ff       	sbrs	r25, 1
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <_ZN16class_Feed_Timer13ClockCallBackEv+0x124>
		/* Turn Feed Motor OFF                                                  */
		/************************************************************************/
		void	inline MotorOFF(void)
		{
			//PUT MOTOR PORT TO INPUT HI-Z DO DISABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     2aa:	3c 98       	cbi	0x07, 4	; 7
					{
						//set motor OFF
						dp.MotorOFF();
						//sleep
						SleepState=true;						
     2ac:	a0 92 00 01 	sts	0x0100, r10
     2b0:	67 c0       	rjmp	.+206    	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
					}
					else
					{
						//set counting true
						EventCountP->Flags.SeparateFlag.Counting=true;
     2b2:	92 60       	ori	r25, 0x02	; 2
     2b4:	f8 01       	movw	r30, r16
     2b6:	90 83       	st	Z, r25
     2b8:	63 c0       	rjmp	.+198    	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
					}
				}
				else
				{
					//time to load from MinuteMotorON,SecondMotorON?
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     2ba:	41 15       	cp	r20, r1
     2bc:	51 05       	cpc	r21, r1
     2be:	61 05       	cpc	r22, r1
     2c0:	71 05       	cpc	r23, r1
     2c2:	c9 f4       	brne	.+50     	; 0x2f6 <_ZN16class_Feed_Timer13ClockCallBackEv+0x168>
					{
						//yes, update count from MinuteMotorON,SecondMotorON
						eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     2c4:	47 e0       	ldi	r20, 0x07	; 7
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	b7 01       	movw	r22, r14
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <eeprom_read_block>
						//translate to seconds and load count
						EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     2d2:	2d 81       	ldd	r18, Y+5	; 0x05
     2d4:	8e 81       	ldd	r24, Y+6	; 0x06
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc e3       	ldi	r31, 0x3C	; 60
     2da:	2f 9f       	mul	r18, r31
     2dc:	80 0d       	add	r24, r0
     2de:	91 1d       	adc	r25, r1
     2e0:	11 24       	eor	r1, r1
     2e2:	a0 e0       	ldi	r26, 0x00	; 0
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	f8 01       	movw	r30, r16
     2e8:	81 83       	std	Z+1, r24	; 0x01
     2ea:	92 83       	std	Z+2, r25	; 0x02
     2ec:	a3 83       	std	Z+3, r26	; 0x03
     2ee:	b4 83       	std	Z+4, r27	; 0x04
						//set flag to false
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
     2f0:	80 81       	ld	r24, Z
						EventCountP->Flags.SeparateFlag.Counting=true;
     2f2:	8e 7f       	andi	r24, 0xFE	; 254
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <_ZN16class_Feed_Timer13ClockCallBackEv+0x200>
						SleepState=false;
					}
					else
					{
						//decrement count
						EventCountP->Count--;
     2f6:	41 50       	subi	r20, 0x01	; 1
     2f8:	51 09       	sbc	r21, r1
     2fa:	61 09       	sbc	r22, r1
     2fc:	71 09       	sbc	r23, r1
     2fe:	f8 01       	movw	r30, r16
     300:	41 83       	std	Z+1, r20	; 0x01
     302:	52 83       	std	Z+2, r21	; 0x02
     304:	63 83       	std	Z+3, r22	; 0x03
     306:	74 83       	std	Z+4, r23	; 0x04
     308:	3b c0       	rjmp	.+118    	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
			////////////////////////
			// DIARY EVENT
			////////////////////////
			case EVENT_TYPE::DIARY:
				//check if time arise
				eeprom_read_block(&EventTmp,&EventP->Event,sizeof(EventTmp));
     30a:	47 e0       	ldi	r20, 0x07	; 7
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	b7 01       	movw	r22, r14
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <eeprom_read_block>
				//check time
				if (EventTmp.Hour==Ptrs->Hour && EventTmp.Minute==Ptrs->Minute && Ptrs->Second==0)
     318:	e0 91 01 01 	lds	r30, 0x0101
     31c:	f0 91 02 01 	lds	r31, 0x0102
     320:	80 81       	ld	r24, Z
     322:	9a 81       	ldd	r25, Y+2	; 0x02
     324:	98 13       	cpse	r25, r24
     326:	19 c0       	rjmp	.+50     	; 0x35a <_ZN16class_Feed_Timer13ClockCallBackEv+0x1cc>
     328:	81 81       	ldd	r24, Z+1	; 0x01
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	98 13       	cpse	r25, r24
     32e:	15 c0       	rjmp	.+42     	; 0x35a <_ZN16class_Feed_Timer13ClockCallBackEv+0x1cc>
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	81 11       	cpse	r24, r1
     334:	12 c0       	rjmp	.+36     	; 0x35a <_ZN16class_Feed_Timer13ClockCallBackEv+0x1cc>
				{
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	4e 81       	ldd	r20, Y+6	; 0x06
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	3c e3       	ldi	r19, 0x3C	; 60
     33e:	83 9f       	mul	r24, r19
     340:	40 0d       	add	r20, r0
     342:	51 1d       	adc	r21, r1
     344:	11 24       	eor	r1, r1
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	f8 01       	movw	r30, r16
     34c:	41 83       	std	Z+1, r20	; 0x01
     34e:	52 83       	std	Z+2, r21	; 0x02
     350:	63 83       	std	Z+3, r22	; 0x03
     352:	74 83       	std	Z+4, r23	; 0x04
					//set flag to false
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
     354:	80 81       	ld	r24, Z
					EventCountP->Flags.SeparateFlag.Counting=true;
     356:	81 60       	ori	r24, 0x01	; 1
     358:	1a c0       	rjmp	.+52     	; 0x38e <_ZN16class_Feed_Timer13ClockCallBackEv+0x200>
					dp.MotorON();
					SleepState=false;					
				}
				else
				{
					if (EventCountP->Flags.SeparateFlag.LoadFrom==true && EventCountP->Count==0)
     35a:	f8 01       	movw	r30, r16
     35c:	80 81       	ld	r24, Z
     35e:	80 ff       	sbrs	r24, 0
     360:	20 c0       	rjmp	.+64     	; 0x3a2 <_ZN16class_Feed_Timer13ClockCallBackEv+0x214>
     362:	f8 01       	movw	r30, r16
     364:	41 81       	ldd	r20, Z+1	; 0x01
     366:	52 81       	ldd	r21, Z+2	; 0x02
     368:	63 81       	ldd	r22, Z+3	; 0x03
     36a:	74 81       	ldd	r23, Z+4	; 0x04
     36c:	45 2b       	or	r20, r21
     36e:	46 2b       	or	r20, r22
     370:	47 2b       	or	r20, r23
     372:	b9 f4       	brne	.+46     	; 0x3a2 <_ZN16class_Feed_Timer13ClockCallBackEv+0x214>
					{
						//yes, disable motor
						EventCountP->Flags.SeparateFlag.LoadFrom=false;
						EventCountP->Flags.SeparateFlag.Counting=false;
     374:	8e 7f       	andi	r24, 0xFE	; 254
     376:	8d 7f       	andi	r24, 0xFD	; 253
     378:	80 83       	st	Z, r24
     37a:	3c 98       	cbi	0x07, 4	; 7
						dp.MotorOFF();
						SleepState=true;
     37c:	b0 92 00 01 	sts	0x0100, r11
			////////////////////////
			case EVENT_TYPE::WEEKLY:
			break;			
		}
		//next event
		EventP++;
     380:	f7 e0       	ldi	r31, 0x07	; 7
     382:	ef 0e       	add	r14, r31
     384:	f1 1c       	adc	r15, r1
		EventCountP++;		
     386:	0b 5f       	subi	r16, 0xFB	; 251
     388:	1f 4f       	sbci	r17, 0xFF	; 255
	EventSize=eeprom_read_byte(&EE_EventsSize);
	//Get pointers to first elements
	EventP=&EE_Events[0];
	EventCountP=&EventsCount[0];
	//Scan all existents Events
	for(uint8_t i=0;i<EventSize;i++)
     38a:	d3 94       	inc	r13
     38c:	54 cf       	rjmp	.-344    	; 0x236 <_ZN16class_Feed_Timer13ClockCallBackEv+0xa8>
				{
					//translate to seconds and load count
					EventCountP->Count=((uint16_t)EventTmp.MinuteMotorON*60+(uint16_t)EventTmp.SecondMotorON);
					//set flag to false
					EventCountP->Flags.SeparateFlag.LoadFrom=true;
					EventCountP->Flags.SeparateFlag.Counting=true;
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	80 83       	st	Z, r24
					//set motor ON
					dp.EnableIO();
     392:	83 e3       	ldi	r24, 0x33	; 51
     394:	93 e0       	ldi	r25, 0x03	; 3
     396:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Turn Feed Motor ON                                                   */
		/************************************************************************/
		void	inline MotorON(void)
		{
			//PUT MOTOR PORT TO OUTPUT DIRECTION TO ENABLE MOTOR
			_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
     39a:	3c 9a       	sbi	0x07, 4	; 7
					dp.MotorON();
					SleepState=false;					
     39c:	10 92 00 01 	sts	0x0100, r1
     3a0:	ef cf       	rjmp	.-34     	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
						SleepState=true;
					}
					else
					{
						//count--
						if (EventCountP->Flags.SeparateFlag.Counting) EventCountP->Count--;
     3a2:	81 ff       	sbrs	r24, 1
     3a4:	ed cf       	rjmp	.-38     	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
     3a6:	f8 01       	movw	r30, r16
     3a8:	81 81       	ldd	r24, Z+1	; 0x01
     3aa:	92 81       	ldd	r25, Z+2	; 0x02
     3ac:	a3 81       	ldd	r26, Z+3	; 0x03
     3ae:	b4 81       	ldd	r27, Z+4	; 0x04
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	a1 09       	sbc	r26, r1
     3b4:	b1 09       	sbc	r27, r1
     3b6:	81 83       	std	Z+1, r24	; 0x01
     3b8:	92 83       	std	Z+2, r25	; 0x02
     3ba:	a3 83       	std	Z+3, r26	; 0x03
     3bc:	b4 83       	std	Z+4, r27	; 0x04
     3be:	e0 cf       	rjmp	.-64     	; 0x380 <_ZN16class_Feed_Timer13ClockCallBackEv+0x1f2>
		}
		//next event
		EventP++;
		EventCountP++;		
	}
}
     3c0:	27 96       	adiw	r28, 0x07	; 7
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	08 95       	ret

000003e2 <_ZN16class_Feed_TimerC1Ev>:
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
class_Feed_Timer::class_Feed_Timer()
{
	dp.SetSecondCallBack(class_Feed_Timer::ClockCallBack);
     3e2:	67 ec       	ldi	r22, 0xC7	; 199
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	83 e3       	ldi	r24, 0x33	; 51
     3e8:	93 e0       	ldi	r25, 0x03	; 3
     3ea:	0c 94 15 0a 	jmp	0x142a	; 0x142a <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>

000003ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  hour,minute,second,weeday			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::GetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     3ee:	af 92       	push	r10
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	6b 01       	movw	r12, r22
     402:	7a 01       	movw	r14, r20
     404:	59 01       	movw	r10, r18
	uint8_t h2,m2,s2,w2;
	
	//loop for correct get time without interrupt

	//get time 
	h1=Ptrs->Hour;
     406:	e0 91 01 01 	lds	r30, 0x0101
     40a:	f0 91 02 01 	lds	r31, 0x0102
     40e:	50 81       	ld	r21, Z
	m1=Ptrs->Minute;
     410:	31 81       	ldd	r19, Z+1	; 0x01
	s1=Ptrs->Second;
     412:	92 81       	ldd	r25, Z+2	; 0x02
	w1=Ptrs->WeekDay;
     414:	83 81       	ldd	r24, Z+3	; 0x03
	for(;;)
	{
		//get time again to check if no has updated
		h2=Ptrs->Hour;
     416:	a0 81       	ld	r26, Z
		m2=Ptrs->Minute;
     418:	b1 81       	ldd	r27, Z+1	; 0x01
		s2=Ptrs->Second;
     41a:	c2 81       	ldd	r28, Z+2	; 0x02
		w2=Ptrs->WeekDay;
     41c:	73 81       	ldd	r23, Z+3	; 0x03
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     41e:	5a 17       	cp	r21, r26
     420:	29 f0       	breq	.+10     	; 0x42c <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x3e>
//	| @INPUT   :				  													|
//	| @OUTPUT  :  hour,minute,second,weeday			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::GetTime(uint8_t &hourParm,uint8_t &minuteParm,uint8_t &secondParm,uint8_t &weekdayParm)
{
     422:	87 2f       	mov	r24, r23
     424:	9c 2f       	mov	r25, r28
     426:	3b 2f       	mov	r19, r27
     428:	5a 2f       	mov	r21, r26
     42a:	f5 cf       	rjmp	.-22     	; 0x416 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x28>
		h2=Ptrs->Hour;
		m2=Ptrs->Minute;
		s2=Ptrs->Second;
		w2=Ptrs->WeekDay;
		//check if igual then break if yes
		if (h1==h2 && m1==m2 && s1==s2 && w1==w2) break;
     42c:	3b 13       	cpse	r19, r27
     42e:	f9 cf       	rjmp	.-14     	; 0x422 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
     430:	9c 13       	cpse	r25, r28
     432:	f7 cf       	rjmp	.-18     	; 0x422 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
     434:	87 13       	cpse	r24, r23
     436:	f5 cf       	rjmp	.-22     	; 0x422 <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_+0x34>
		m1=m2;
		s1=s2;
		w1=w2;
	}
	//return correct time
	hourParm=h2;
     438:	f6 01       	movw	r30, r12
     43a:	50 83       	st	Z, r21
	minuteParm=m2;
     43c:	f7 01       	movw	r30, r14
     43e:	30 83       	st	Z, r19
	secondParm=s2;
     440:	f5 01       	movw	r30, r10
     442:	90 83       	st	Z, r25
	weekdayParm=w2;
     444:	f8 01       	movw	r30, r16
     446:	80 83       	st	Z, r24
}
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	08 95       	ret

0000045c <_ZN16class_Feed_Timer8InitTimeEb>:
//	| @INPUT   :																	|
//	| @OUTPUT  :											                        |
//	| @REMARKS :  if boot is cold new time is requested if hot set new time			|
//	+-------------------------------------------------------------------------------+
void	class_Feed_Timer::InitTime(bool forceInit)
{
     45c:	8f 92       	push	r8
     45e:	9f 92       	push	r9
     460:	af 92       	push	r10
     462:	bf 92       	push	r11
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2c 97       	sbiw	r28, 0x0c	; 12
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	fc 01       	movw	r30, r24
     486:	b6 2e       	mov	r11, r22
	#define		TIME_TO_EXIT	30000
	
	uint8_t		h=0xff,
     488:	9f ef       	ldi	r25, 0xFF	; 255
     48a:	9c 87       	std	Y+12, r25	; 0x0c
				m=0xff,
     48c:	9b 87       	std	Y+11, r25	; 0x0b
				s=0xff,
     48e:	9a 87       	std	Y+10, r25	; 0x0a
				w=0xff;
     490:	99 87       	std	Y+9, r25	; 0x09
	bool		bBlink=true,
				bWeek=false;
	char		key;
	
	//get boot type
	if (this->Ptrs->BootKey==_BOOT_KEY)
     492:	a0 91 01 01 	lds	r26, 0x0101
     496:	b0 91 02 01 	lds	r27, 0x0102
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	8d 91       	ld	r24, X+
     49e:	9d 91       	ld	r25, X+
     4a0:	0d 90       	ld	r0, X+
     4a2:	bc 91       	ld	r27, X
     4a4:	a0 2d       	mov	r26, r0
     4a6:	86 32       	cpi	r24, 0x26	; 38
     4a8:	99 45       	sbci	r25, 0x59	; 89
     4aa:	a1 44       	sbci	r26, 0x41	; 65
     4ac:	b1 43       	sbci	r27, 0x31	; 49
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <_ZN16class_Feed_Timer8InitTimeEb+0x5a>
	{
		//hot boot
		if (forceInit==false)
     4b0:	61 11       	cpse	r22, r1
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <_ZN16class_Feed_Timer8InitTimeEb+0x5e>
     4b4:	14 c2       	rjmp	.+1064   	; 0x8de <_ZN16class_Feed_Timer8InitTimeEb+0x482>
			//no make anythink return
			return;			
		}
	}
	//if force initialization get current time
	if (forceInit)
     4b6:	66 23       	and	r22, r22
     4b8:	79 f0       	breq	.+30     	; 0x4d8 <_ZN16class_Feed_Timer8InitTimeEb+0x7c>
	{
		this->GetTime(h,m,s,w);
     4ba:	8e 01       	movw	r16, r28
     4bc:	07 5f       	subi	r16, 0xF7	; 247
     4be:	1f 4f       	sbci	r17, 0xFF	; 255
     4c0:	9e 01       	movw	r18, r28
     4c2:	26 5f       	subi	r18, 0xF6	; 246
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	ae 01       	movw	r20, r28
     4c8:	45 5f       	subi	r20, 0xF5	; 245
     4ca:	5f 4f       	sbci	r21, 0xFF	; 255
     4cc:	be 01       	movw	r22, r28
     4ce:	64 5f       	subi	r22, 0xF4	; 244
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	cf 01       	movw	r24, r30
     4d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
	}
	//cold boot ? set hot
	this->Ptrs->BootKey=_BOOT_KEY;		
     4d8:	e0 91 01 01 	lds	r30, 0x0101
     4dc:	f0 91 02 01 	lds	r31, 0x0102
     4e0:	86 e2       	ldi	r24, 0x26	; 38
     4e2:	99 e5       	ldi	r25, 0x59	; 89
     4e4:	a1 e4       	ldi	r26, 0x41	; 65
     4e6:	b1 e3       	ldi	r27, 0x31	; 49
     4e8:	84 83       	std	Z+4, r24	; 0x04
     4ea:	95 83       	std	Z+5, r25	; 0x05
     4ec:	a6 83       	std	Z+6, r26	; 0x06
     4ee:	b7 83       	std	Z+7, r27	; 0x07
	//SET TIME
	time.SetElapsed(&tBlink);
     4f0:	be 01       	movw	r22, r28
     4f2:	6b 5f       	subi	r22, 0xFB	; 251
     4f4:	7f 4f       	sbci	r23, 0xFF	; 255
     4f6:	8a e3       	ldi	r24, 0x3A	; 58
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
	time.SetElapsed(&tExit);
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	8a e3       	ldi	r24, 0x3A	; 58
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
				s=0xff,
				w=0xff;
	uint32_t	tBlink,
				tExit;
	bool		bBlink=true,
				bWeek=false;
     50c:	d1 2c       	mov	r13, r1
				m=0xff,
				s=0xff,
				w=0xff;
	uint32_t	tBlink,
				tExit;
	bool		bBlink=true,
     50e:	cc 24       	eor	r12, r12
     510:	c3 94       	inc	r12
		if (time.GetElapsed(&tBlink)>500)
		{
			//clear blink time
			time.SetElapsed(&tBlink);
			//change blink state
			bBlink=!bBlink;
     512:	aa 24       	eor	r10, r10
     514:	a3 94       	inc	r10
					{
						dp.PutSF(PSTR("MM"));
					}
					else
					{
						sprintf(bf,"%02d",m);
     516:	0e e0       	ldi	r16, 0x0E	; 14
     518:	11 e0       	ldi	r17, 0x01	; 1
     51a:	45 e3       	ldi	r20, 0x35	; 53
     51c:	e4 2e       	mov	r14, r20
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	f4 2e       	mov	r15, r20
			case KEY_DOWN:
				if (bWeek)
				{
					w--;
					if (w==254) w=7;
					if (w==0) w=7;
     522:	57 e0       	ldi	r21, 0x07	; 7
     524:	95 2e       	mov	r9, r21
	time.SetElapsed(&tBlink);
	time.SetElapsed(&tExit);
	for(;;)
	{
		//time to blink?
		if (time.GetElapsed(&tBlink)>500)
     526:	be 01       	movw	r22, r28
     528:	6b 5f       	subi	r22, 0xFB	; 251
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	8a e3       	ldi	r24, 0x3A	; 58
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
     534:	65 3f       	cpi	r22, 0xF5	; 245
     536:	71 40       	sbci	r23, 0x01	; 1
     538:	81 05       	cpc	r24, r1
     53a:	91 05       	cpc	r25, r1
     53c:	40 f0       	brcs	.+16     	; 0x54e <_ZN16class_Feed_Timer8InitTimeEb+0xf2>
		{
			//clear blink time
			time.SetElapsed(&tBlink);
     53e:	be 01       	movw	r22, r28
     540:	6b 5f       	subi	r22, 0xFB	; 251
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	8a e3       	ldi	r24, 0x3A	; 58
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
			//change blink state
			bBlink=!bBlink;
     54c:	ca 24       	eor	r12, r10
		}
		//SHOW values
		switch (bBlink)
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	c8 16       	cp	r12, r24
     552:	09 f4       	brne	.+2      	; 0x556 <_ZN16class_Feed_Timer8InitTimeEb+0xfa>
     554:	41 c0       	rjmp	.+130    	; 0x5d8 <_ZN16class_Feed_Timer8InitTimeEb+0x17c>
		{
			case false:
				if (bWeek)
     556:	dd 20       	and	r13, r13
     558:	69 f0       	breq	.+26     	; 0x574 <_ZN16class_Feed_Timer8InitTimeEb+0x118>
				{
					dp.Home();
     55a:	83 e3       	ldi	r24, 0x33	; 51
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
					if (w==0xff)
     562:	89 85       	ldd	r24, Y+9	; 0x09
     564:	8f 3f       	cpi	r24, 0xFF	; 255
     566:	09 f0       	breq	.+2      	; 0x56a <_ZN16class_Feed_Timer8InitTimeEb+0x10e>
     568:	43 c0       	rjmp	.+134    	; 0x5f0 <_ZN16class_Feed_Timer8InitTimeEb+0x194>
					{
						dp.Cls();
     56a:	83 e3       	ldi	r24, 0x33	; 51
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
     572:	9e c0       	rjmp	.+316    	; 0x6b0 <_ZN16class_Feed_Timer8InitTimeEb+0x254>
						dp.PutSF(GetWeekDayStr(w));
					}						
				}
				else
				{
					dp.DispSetPoint(2,false);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	62 e0       	ldi	r22, 0x02	; 2
     578:	83 e3       	ldi	r24, 0x33	; 51
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					dp.Home();
     580:	83 e3       	ldi	r24, 0x33	; 51
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
					if (h==0xff)
     588:	8c 85       	ldd	r24, Y+12	; 0x0c
     58a:	8f 3f       	cpi	r24, 0xFF	; 255
     58c:	29 f4       	brne	.+10     	; 0x598 <_ZN16class_Feed_Timer8InitTimeEb+0x13c>
					{
						dp.Cls();
     58e:	83 e3       	ldi	r24, 0x33	; 51
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
     596:	14 c0       	rjmp	.+40     	; 0x5c0 <_ZN16class_Feed_Timer8InitTimeEb+0x164>
					}
					else
					{
						sprintf(bf,"%02d",h);
     598:	1f 92       	push	r1
     59a:	8f 93       	push	r24
     59c:	1f 93       	push	r17
     59e:	0f 93       	push	r16
     5a0:	ff 92       	push	r15
     5a2:	ef 92       	push	r14
     5a4:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
						dp.PutS(bf);
     5a8:	65 e3       	ldi	r22, 0x35	; 53
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	83 e3       	ldi	r24, 0x33	; 51
     5ae:	93 e0       	ldi	r25, 0x03	; 3
     5b0:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
					}
					dp.Locate(3);
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	83 e3       	ldi	r24, 0x33	; 51
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
					if (m==0xff)
     5ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <_ZN16class_Feed_Timer8InitTimeEb+0x176>
     5d0:	5b c0       	rjmp	.+182    	; 0x688 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
					{
						dp.PutSF(PSTR("  "));
     5d2:	69 eb       	ldi	r22, 0xB9	; 185
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	53 c0       	rjmp	.+166    	; 0x67e <_ZN16class_Feed_Timer8InitTimeEb+0x222>
						dp.PutS(bf);
					}						
				}
			break;
			case true:
				if (bWeek)
     5d8:	dd 20       	and	r13, r13
     5da:	f9 f0       	breq	.+62     	; 0x61a <_ZN16class_Feed_Timer8InitTimeEb+0x1be>
				{
					dp.Home();
     5dc:	83 e3       	ldi	r24, 0x33	; 51
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
					if (w==0xff)
     5e4:	89 85       	ldd	r24, Y+9	; 0x09
     5e6:	8f 3f       	cpi	r24, 0xFF	; 255
     5e8:	19 f4       	brne	.+6      	; 0x5f0 <_ZN16class_Feed_Timer8InitTimeEb+0x194>
					{
						dp.PutSF(PSTR("DSEM"));
     5ea:	64 eb       	ldi	r22, 0xB4	; 180
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	47 c0       	rjmp	.+142    	; 0x67e <_ZN16class_Feed_Timer8InitTimeEb+0x222>
					}
					else
					{
						dp.DispSetPoint(3,true);
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	83 e3       	ldi	r24, 0x33	; 51
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     5fc:	e9 85       	ldd	r30, Y+9	; 0x09
     5fe:	e1 50       	subi	r30, 0x01	; 1
     600:	e7 30       	cpi	r30, 0x07	; 7
     602:	40 f4       	brcc	.+16     	; 0x614 <_ZN16class_Feed_Timer8InitTimeEb+0x1b8>
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	ee 5d       	subi	r30, 0xDE	; 222
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	60 81       	ld	r22, Z
     610:	71 81       	ldd	r23, Z+1	; 0x01
     612:	35 c0       	rjmp	.+106    	; 0x67e <_ZN16class_Feed_Timer8InitTimeEb+0x222>
						dp.PutSF(GetWeekDayStr(w));	
     614:	6c eb       	ldi	r22, 0xBC	; 188
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	32 c0       	rjmp	.+100    	; 0x67e <_ZN16class_Feed_Timer8InitTimeEb+0x222>
					}
				}
				else
				{
					dp.DispSetPoint(2,true);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	83 e3       	ldi	r24, 0x33	; 51
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					dp.Home();
     626:	83 e3       	ldi	r24, 0x33	; 51
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
					if (h==0xff)
     62e:	8c 85       	ldd	r24, Y+12	; 0x0c
     630:	8f 3f       	cpi	r24, 0xFF	; 255
     632:	39 f4       	brne	.+14     	; 0x642 <_ZN16class_Feed_Timer8InitTimeEb+0x1e6>
					{
						dp.PutSF(PSTR("HH"));
     634:	61 eb       	ldi	r22, 0xB1	; 177
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	83 e3       	ldi	r24, 0x33	; 51
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
     640:	14 c0       	rjmp	.+40     	; 0x66a <_ZN16class_Feed_Timer8InitTimeEb+0x20e>
					}
					else
					{
						sprintf(bf,"%02d",h);
     642:	1f 92       	push	r1
     644:	8f 93       	push	r24
     646:	1f 93       	push	r17
     648:	0f 93       	push	r16
     64a:	ff 92       	push	r15
     64c:	ef 92       	push	r14
     64e:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
						dp.PutS(bf);
     652:	65 e3       	ldi	r22, 0x35	; 53
     654:	71 e0       	ldi	r23, 0x01	; 1
     656:	83 e3       	ldi	r24, 0x33	; 51
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
					}
					dp.Locate(3);
     66a:	63 e0       	ldi	r22, 0x03	; 3
     66c:	83 e3       	ldi	r24, 0x33	; 51
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
					if (m==0xff)
     674:	8b 85       	ldd	r24, Y+11	; 0x0b
     676:	8f 3f       	cpi	r24, 0xFF	; 255
     678:	39 f4       	brne	.+14     	; 0x688 <_ZN16class_Feed_Timer8InitTimeEb+0x22c>
					{
						dp.PutSF(PSTR("MM"));
     67a:	6e ea       	ldi	r22, 0xAE	; 174
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	83 e3       	ldi	r24, 0x33	; 51
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
     686:	14 c0       	rjmp	.+40     	; 0x6b0 <_ZN16class_Feed_Timer8InitTimeEb+0x254>
					}
					else
					{
						sprintf(bf,"%02d",m);
     688:	1f 92       	push	r1
     68a:	8f 93       	push	r24
     68c:	1f 93       	push	r17
     68e:	0f 93       	push	r16
     690:	ff 92       	push	r15
     692:	ef 92       	push	r14
     694:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
						dp.PutS(bf);
     698:	65 e3       	ldi	r22, 0x35	; 53
     69a:	71 e0       	ldi	r23, 0x01	; 1
     69c:	83 e3       	ldi	r24, 0x33	; 51
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
					}
				}
			break;
		}
		//read keys
		key=dp.KeyReadFlash();
     6b0:	83 e3       	ldi	r24, 0x33	; 51
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     6b8:	88 2e       	mov	r8, r24
		if (key!=KEY_NONE)
     6ba:	88 23       	and	r24, r24
     6bc:	39 f0       	breq	.+14     	; 0x6cc <_ZN16class_Feed_Timer8InitTimeEb+0x270>
		{
			time.SetElapsed(&tExit);
     6be:	be 01       	movw	r22, r28
     6c0:	6f 5f       	subi	r22, 0xFF	; 255
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	8a e3       	ldi	r24, 0x3A	; 58
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
		}
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT && forceInit)
     6cc:	be 01       	movw	r22, r28
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	8a e3       	ldi	r24, 0x3A	; 58
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
     6da:	61 33       	cpi	r22, 0x31	; 49
     6dc:	75 47       	sbci	r23, 0x75	; 117
     6de:	81 05       	cpc	r24, r1
     6e0:	91 05       	cpc	r25, r1
     6e2:	10 f0       	brcs	.+4      	; 0x6e8 <_ZN16class_Feed_Timer8InitTimeEb+0x28c>
     6e4:	b1 10       	cpse	r11, r1
     6e6:	eb c0       	rjmp	.+470    	; 0x8be <_ZN16class_Feed_Timer8InitTimeEb+0x462>
			dp.DispSetPoint(2,false);
			dp.DispSetPoint(3,false);
			return;
		}
		//process key
		switch (key)
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	88 12       	cpse	r8, r24
     6ec:	1d c0       	rjmp	.+58     	; 0x728 <_ZN16class_Feed_Timer8InitTimeEb+0x2cc>
				}
				time.DelayMsI(200);
			break;
			//pump minute
			case KEY_UP:
				if (bWeek)
     6ee:	dd 20       	and	r13, r13
     6f0:	59 f0       	breq	.+22     	; 0x708 <_ZN16class_Feed_Timer8InitTimeEb+0x2ac>
				{
					w++;
     6f2:	89 85       	ldd	r24, Y+9	; 0x09
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
					if (w==0) w=1;
     6f6:	11 f0       	breq	.+4      	; 0x6fc <_ZN16class_Feed_Timer8InitTimeEb+0x2a0>
			break;
			//pump minute
			case KEY_UP:
				if (bWeek)
				{
					w++;
     6f8:	89 87       	std	Y+9, r24	; 0x09
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <_ZN16class_Feed_Timer8InitTimeEb+0x2a2>
					if (w==0) w=1;
     6fc:	a9 86       	std	Y+9, r10	; 0x09
					if (w>7) w=1;
     6fe:	89 85       	ldd	r24, Y+9	; 0x09
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	48 f0       	brcs	.+18     	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
     704:	a9 86       	std	Y+9, r10	; 0x09
     706:	07 c0       	rjmp	.+14     	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
				}
				else
				{
					if (++m>59) m=0;						
     708:	8b 85       	ldd	r24, Y+11	; 0x0b
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	8c 33       	cpi	r24, 0x3C	; 60
     70e:	10 f4       	brcc	.+4      	; 0x714 <_ZN16class_Feed_Timer8InitTimeEb+0x2b8>
     710:	8b 87       	std	Y+11, r24	; 0x0b
     712:	01 c0       	rjmp	.+2      	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
     714:	1b 86       	std	Y+11, r1	; 0x0b
				}
				time.DelayMsI(200);
     716:	48 ec       	ldi	r20, 0xC8	; 200
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	8a e3       	ldi	r24, 0x3A	; 58
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
			break;
     726:	ff ce       	rjmp	.-514    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
			dp.DispSetPoint(2,false);
			dp.DispSetPoint(3,false);
			return;
		}
		//process key
		switch (key)
     728:	23 e0       	ldi	r18, 0x03	; 3
     72a:	82 12       	cpse	r8, r18
     72c:	af c0       	rjmp	.+350    	; 0x88c <_ZN16class_Feed_Timer8InitTimeEb+0x430>
				}
				time.DelayMsI(200);
			break;
			//check if time to update week day of exit
			case KEY_ENTER:
				dp.KeyWaitRelease();
     72e:	83 e3       	ldi	r24, 0x33	; 51
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
				time.DelayMsI(KEY_DELAY);
     736:	4e e5       	ldi	r20, 0x5E	; 94
     738:	51 e0       	ldi	r21, 0x01	; 1
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	8a e3       	ldi	r24, 0x3A	; 58
     740:	93 e0       	ldi	r25, 0x03	; 3
     742:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
				if (bWeek)
     746:	dd 20       	and	r13, r13
     748:	09 f4       	brne	.+2      	; 0x74c <_ZN16class_Feed_Timer8InitTimeEb+0x2f0>
     74a:	3f c0       	rjmp	.+126    	; 0x7ca <_ZN16class_Feed_Timer8InitTimeEb+0x36e>
				{
					if (w==0xff)
     74c:	89 85       	ldd	r24, Y+9	; 0x09
     74e:	8f 3f       	cpi	r24, 0xFF	; 255
     750:	21 f5       	brne	.+72     	; 0x79a <_ZN16class_Feed_Timer8InitTimeEb+0x33e>
     752:	25 e0       	ldi	r18, 0x05	; 5
     754:	82 2e       	mov	r8, r18
					{
						for(uint8_t i=0;i<5;i++)
						{
							dp.Home();
     756:	83 e3       	ldi	r24, 0x33	; 51
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
							dp.PutSF(PSTR("DSEM"));
     75e:	69 ea       	ldi	r22, 0xA9	; 169
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	83 e3       	ldi	r24, 0x33	; 51
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
							time.DelayMsI(KEY_DELAY);
     76a:	4e e5       	ldi	r20, 0x5E	; 94
     76c:	51 e0       	ldi	r21, 0x01	; 1
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	8a e3       	ldi	r24, 0x3A	; 58
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
							dp.Cls();
     77a:	83 e3       	ldi	r24, 0x33	; 51
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
							time.DelayMsI(KEY_DELAY);
     782:	4e e5       	ldi	r20, 0x5E	; 94
     784:	51 e0       	ldi	r21, 0x01	; 1
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	8a e3       	ldi	r24, 0x3A	; 58
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
     792:	8a 94       	dec	r8
				time.DelayMsI(KEY_DELAY);
				if (bWeek)
				{
					if (w==0xff)
					{
						for(uint8_t i=0;i<5;i++)
     794:	81 10       	cpse	r8, r1
     796:	df cf       	rjmp	.-66     	; 0x756 <_ZN16class_Feed_Timer8InitTimeEb+0x2fa>
     798:	c6 ce       	rjmp	.-628    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
						}							
					}
					else
					{
						//clear dot clear screen
						dp.DispSetPoint(3,false);
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	83 e3       	ldi	r24, 0x33	; 51
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
						dp.Cls();
     7a6:	83 e3       	ldi	r24, 0x33	; 51
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
						//set time
						cli();
     7ae:	f8 94       	cli
						Ptrs->Hour=h;
     7b0:	e0 91 01 01 	lds	r30, 0x0101
     7b4:	f0 91 02 01 	lds	r31, 0x0102
     7b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ba:	80 83       	st	Z, r24
						Ptrs->Minute=m;
     7bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     7be:	81 83       	std	Z+1, r24	; 0x01
						Ptrs->Second=0;
     7c0:	12 82       	std	Z+2, r1	; 0x02
						Ptrs->WeekDay=w;
     7c2:	89 85       	ldd	r24, Y+9	; 0x09
     7c4:	83 83       	std	Z+3, r24	; 0x03
						sei();
     7c6:	78 94       	sei
						//exit settings
						return;					
     7c8:	8a c0       	rjmp	.+276    	; 0x8de <_ZN16class_Feed_Timer8InitTimeEb+0x482>
					}
				}
				else
				{
					if (h==0xff)
     7ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     7cc:	8f 3f       	cpi	r24, 0xFF	; 255
     7ce:	51 f5       	brne	.+84     	; 0x824 <_ZN16class_Feed_Timer8InitTimeEb+0x3c8>
					{
						dp.DispSetPoint(2,false);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	62 e0       	ldi	r22, 0x02	; 2
     7d4:	83 e3       	ldi	r24, 0x33	; 51
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     7dc:	95 e0       	ldi	r25, 0x05	; 5
     7de:	89 2e       	mov	r8, r25
						for(uint8_t i=0;i<5;i++)
						{
							dp.Home();
     7e0:	83 e3       	ldi	r24, 0x33	; 51
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
							dp.PutSF(PSTR("HH  "));
     7e8:	64 ea       	ldi	r22, 0xA4	; 164
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	83 e3       	ldi	r24, 0x33	; 51
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
							time.DelayMsI(KEY_DELAY);
     7f4:	4e e5       	ldi	r20, 0x5E	; 94
     7f6:	51 e0       	ldi	r21, 0x01	; 1
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	8a e3       	ldi	r24, 0x3A	; 58
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
							dp.Cls();
     804:	83 e3       	ldi	r24, 0x33	; 51
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
							time.DelayMsI(KEY_DELAY);
     80c:	4e e5       	ldi	r20, 0x5E	; 94
     80e:	51 e0       	ldi	r21, 0x01	; 1
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	8a e3       	ldi	r24, 0x3A	; 58
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
     81c:	8a 94       	dec	r8
				else
				{
					if (h==0xff)
					{
						dp.DispSetPoint(2,false);
						for(uint8_t i=0;i<5;i++)
     81e:	81 10       	cpse	r8, r1
     820:	df cf       	rjmp	.-66     	; 0x7e0 <_ZN16class_Feed_Timer8InitTimeEb+0x384>
     822:	81 ce       	rjmp	.-766    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
							time.DelayMsI(KEY_DELAY);
						}
					}
					else
					{
						if (m==0xff)
     824:	8b 85       	ldd	r24, Y+11	; 0x0b
						{
							dp.DispSetPoint(2,false);
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	62 e0       	ldi	r22, 0x02	; 2
							time.DelayMsI(KEY_DELAY);
						}
					}
					else
					{
						if (m==0xff)
     82a:	8f 3f       	cpi	r24, 0xFF	; 255
     82c:	41 f5       	brne	.+80     	; 0x87e <_ZN16class_Feed_Timer8InitTimeEb+0x422>
						{
							dp.DispSetPoint(2,false);
     82e:	83 e3       	ldi	r24, 0x33	; 51
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	88 2e       	mov	r8, r24
							for(uint8_t i=0;i<5;i++)
							{
								dp.Home();
     83a:	83 e3       	ldi	r24, 0x33	; 51
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN19class_Display_7_Seg4HomeEv>
								dp.PutSF(PSTR("  MM"));
     842:	6f e9       	ldi	r22, 0x9F	; 159
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	83 e3       	ldi	r24, 0x33	; 51
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
								time.DelayMsI(KEY_DELAY);
     84e:	4e e5       	ldi	r20, 0x5E	; 94
     850:	51 e0       	ldi	r21, 0x01	; 1
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	8a e3       	ldi	r24, 0x3A	; 58
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
								dp.Cls();
     85e:	83 e3       	ldi	r24, 0x33	; 51
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
								time.DelayMsI(KEY_DELAY);
     866:	4e e5       	ldi	r20, 0x5E	; 94
     868:	51 e0       	ldi	r21, 0x01	; 1
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	8a e3       	ldi	r24, 0x3A	; 58
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
     876:	8a 94       	dec	r8
					else
					{
						if (m==0xff)
						{
							dp.DispSetPoint(2,false);
							for(uint8_t i=0;i<5;i++)
     878:	81 10       	cpse	r8, r1
     87a:	df cf       	rjmp	.-66     	; 0x83a <_ZN16class_Feed_Timer8InitTimeEb+0x3de>
     87c:	54 ce       	rjmp	.-856    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
							}
						}
						else
						{
							//clear second point
							dp.DispSetPoint(2,false);
     87e:	83 e3       	ldi	r24, 0x33	; 51
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
							//set input week day mode
							bWeek=true;								
     886:	dd 24       	eor	r13, r13
     888:	d3 94       	inc	r13
     88a:	4d ce       	rjmp	.-870    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
			dp.DispSetPoint(2,false);
			dp.DispSetPoint(3,false);
			return;
		}
		//process key
		switch (key)
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	88 12       	cpse	r8, r24
     890:	4a ce       	rjmp	.-876    	; 0x526 <_ZN16class_Feed_Timer8InitTimeEb+0xca>
		{
			//pump hour
			case KEY_DOWN:
				if (bWeek)
     892:	dd 20       	and	r13, r13
     894:	61 f0       	breq	.+24     	; 0x8ae <_ZN16class_Feed_Timer8InitTimeEb+0x452>
				{
					w--;
     896:	89 85       	ldd	r24, Y+9	; 0x09
     898:	81 50       	subi	r24, 0x01	; 1
					if (w==254) w=7;
     89a:	8e 3f       	cpi	r24, 0xFE	; 254
     89c:	11 f0       	breq	.+4      	; 0x8a2 <_ZN16class_Feed_Timer8InitTimeEb+0x446>
		{
			//pump hour
			case KEY_DOWN:
				if (bWeek)
				{
					w--;
     89e:	89 87       	std	Y+9, r24	; 0x09
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <_ZN16class_Feed_Timer8InitTimeEb+0x448>
					if (w==254) w=7;
     8a2:	99 86       	std	Y+9, r9	; 0x09
					if (w==0) w=7;
     8a4:	89 85       	ldd	r24, Y+9	; 0x09
     8a6:	81 11       	cpse	r24, r1
     8a8:	36 cf       	rjmp	.-404    	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
     8aa:	99 86       	std	Y+9, r9	; 0x09
     8ac:	34 cf       	rjmp	.-408    	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
				}
				else
				{
					if (++h>23) h=0;						
     8ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	88 31       	cpi	r24, 0x18	; 24
     8b4:	10 f4       	brcc	.+4      	; 0x8ba <_ZN16class_Feed_Timer8InitTimeEb+0x45e>
     8b6:	8c 87       	std	Y+12, r24	; 0x0c
     8b8:	2e cf       	rjmp	.-420    	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
     8ba:	1c 86       	std	Y+12, r1	; 0x0c
     8bc:	2c cf       	rjmp	.-424    	; 0x716 <_ZN16class_Feed_Timer8InitTimeEb+0x2ba>
		{
			time.SetElapsed(&tExit);
		}
		if (time.GetElapsed(&tExit)>TIME_TO_EXIT && forceInit)
		{
			dp.Cls();
     8be:	83 e3       	ldi	r24, 0x33	; 51
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
			dp.DispSetPoint(2,false);
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	62 e0       	ldi	r22, 0x02	; 2
     8ca:	83 e3       	ldi	r24, 0x33	; 51
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.DispSetPoint(3,false);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	63 e0       	ldi	r22, 0x03	; 3
     8d6:	83 e3       	ldi	r24, 0x33	; 51
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
					}
				}
			break;
		}
	}
}
     8de:	2c 96       	adiw	r28, 0x0c	; 12
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	08 95       	ret

00000904 <_ZN16class_Feed_Timer8ShowLIVEEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ShowLIVE()
{
     904:	cf 93       	push	r28
	static uint8_t	live=0;
	
	
	if (++live>10)
     906:	80 91 30 01 	lds	r24, 0x0130
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	80 93 30 01 	sts	0x0130, r24
     910:	8b 30       	cpi	r24, 0x0B	; 11
     912:	30 f1       	brcs	.+76     	; 0x960 <_ZN16class_Feed_Timer8ShowLIVEEv+0x5c>
	{
		//enable IO State
		dp.EnableIO();
     914:	83 e3       	ldi	r24, 0x33	; 51
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN19class_Display_7_Seg8EnableIOEv>
		live=0;
     91c:	10 92 30 01 	sts	0x0130, r1
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     920:	80 91 6e 00 	lds	r24, 0x006E
     924:	82 60       	ori	r24, 0x02	; 2
     926:	80 93 6e 00 	sts	0x006E, r24
		dp.EnableIO();
		live=0;
		//enable timer 0
		SetTimer0_ON();
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     92a:	c1 e0       	ldi	r28, 0x01	; 1
		{
			dp.DispSetPoint(i,true);
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	6c 2f       	mov	r22, r28
     930:	83 e3       	ldi	r24, 0x33	; 51
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			time.DelayMsI(65);
     938:	41 e4       	ldi	r20, 0x41	; 65
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	8a e3       	ldi	r24, 0x3A	; 58
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
			dp.DispSetPoint(i,false);
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	6c 2f       	mov	r22, r28
     94c:	83 e3       	ldi	r24, 0x33	; 51
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
		dp.EnableIO();
		live=0;
		//enable timer 0
		SetTimer0_ON();
		//show live status using displays dots
		for(uint8_t i=1;i<=4;i++)
     954:	cf 5f       	subi	r28, 0xFF	; 255
     956:	c5 30       	cpi	r28, 0x05	; 5
     958:	49 f7       	brne	.-46     	; 0x92c <_ZN16class_Feed_Timer8ShowLIVEEv+0x28>
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
	}
}
     95a:	cf 91       	pop	r28
			dp.DispSetPoint(i,true);
			time.DelayMsI(65);
			dp.DispSetPoint(i,false);
		}
		//disable timer 0
		SetTimer0_OFF();
     95c:	0c 94 c1 00 	jmp	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
	}
}
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_ZN16class_Feed_Timer8EventAddER11EventStruct>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  return true if Add is okf			                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool class_Feed_Timer::EventAdd(struct EventStruct &Event)
{
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	27 97       	sbiw	r28, 0x07	; 7
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
     986:	8b 01       	movw	r16, r22
	uint8_t tmp,sreg;
	struct EventStruct EventTmp;
	
	//save SREG
	sreg=SREG;
     988:	bf b6       	in	r11, 0x3f	; 63
	//disable interrupts
	cli();
     98a:	f8 94       	cli
	//if event is diary then weekdays=0
	if (Event.Event==EVENT_TYPE::DIARY) Event.WeekDays=0;
     98c:	fb 01       	movw	r30, r22
     98e:	90 81       	ld	r25, Z
     990:	92 30       	cpi	r25, 0x02	; 2
     992:	09 f4       	brne	.+2      	; 0x996 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x32>
     994:	13 82       	std	Z+3, r1	; 0x03
	//compute Xor Check
	Event.XorCheck=Event.Event ^ Event.Hour ^ Event.Minute ^ Event.WeekDays ^ Event.MinuteMotorON ^ Event.SecondMotorON;
     996:	f8 01       	movw	r30, r16
     998:	81 81       	ldd	r24, Z+1	; 0x01
     99a:	89 27       	eor	r24, r25
     99c:	92 81       	ldd	r25, Z+2	; 0x02
     99e:	89 27       	eor	r24, r25
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	89 27       	eor	r24, r25
     9a4:	94 81       	ldd	r25, Z+4	; 0x04
     9a6:	89 27       	eor	r24, r25
     9a8:	95 81       	ldd	r25, Z+5	; 0x05
     9aa:	89 27       	eor	r24, r25
     9ac:	86 83       	std	Z+6, r24	; 0x06
	//Get Event Size
	tmp=eeprom_read_byte(&EE_EventsSize);
     9ae:	8c eb       	ldi	r24, 0xBC	; 188
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <eeprom_read_byte>
	tmp++;
     9b6:	ee 24       	eor	r14, r14
     9b8:	e3 94       	inc	r14
     9ba:	e8 0e       	add	r14, r24
     9bc:	f4 e6       	ldi	r31, 0x64	; 100
     9be:	fe 15       	cp	r31, r14
     9c0:	10 f4       	brcc	.+4      	; 0x9c6 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0x62>
     9c2:	84 e6       	ldi	r24, 0x64	; 100
     9c4:	e8 2e       	mov	r14, r24
	if (tmp>EVENT_SIZE) tmp=EVENT_SIZE;
	eeprom_write_byte(&EE_EventsSize,tmp);
     9c6:	6e 2d       	mov	r22, r14
     9c8:	8c eb       	ldi	r24, 0xBC	; 188
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <eeprom_write_byte>
	//Add new event
	eeprom_write_block(&Event,&EE_Events[tmp-1],sizeof(Event));
     9d0:	f1 2c       	mov	r15, r1
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	e2 1a       	sub	r14, r18
     9d6:	f1 08       	sbc	r15, r1
     9d8:	27 e0       	ldi	r18, 0x07	; 7
     9da:	2e 9d       	mul	r18, r14
     9dc:	c0 01       	movw	r24, r0
     9de:	2f 9d       	mul	r18, r15
     9e0:	90 0d       	add	r25, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	fc 01       	movw	r30, r24
     9e6:	e0 50       	subi	r30, 0x00	; 0
     9e8:	f0 40       	sbci	r31, 0x00	; 0
     9ea:	6f 01       	movw	r12, r30
     9ec:	47 e0       	ldi	r20, 0x07	; 7
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	bf 01       	movw	r22, r30
     9f2:	c8 01       	movw	r24, r16
     9f4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <eeprom_write_block>
	//read back to check if write ok
	eeprom_read_block(&EventTmp,&EE_Events[tmp-1],sizeof(Event));
     9f8:	47 e0       	ldi	r20, 0x07	; 7
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	b6 01       	movw	r22, r12
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <eeprom_read_block>
	//clear flags and counter
	EventsCount[tmp-1].Flags.SeparateFlag.LoadFrom=false;
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	8e 9d       	mul	r24, r14
     a0a:	f0 01       	movw	r30, r0
     a0c:	8f 9d       	mul	r24, r15
     a0e:	f0 0d       	add	r31, r0
     a10:	11 24       	eor	r1, r1
     a12:	e1 5c       	subi	r30, 0xC1	; 193
     a14:	fe 4f       	sbci	r31, 0xFE	; 254
     a16:	80 81       	ld	r24, Z
	EventsCount[tmp-1].Flags.SeparateFlag.Counting=false;
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	8d 7f       	andi	r24, 0xFD	; 253
     a1c:	80 83       	st	Z, r24
	EventsCount[tmp-1].Count=0;
     a1e:	11 82       	std	Z+1, r1	; 0x01
     a20:	12 82       	std	Z+2, r1	; 0x02
     a22:	13 82       	std	Z+3, r1	; 0x03
     a24:	14 82       	std	Z+4, r1	; 0x04
	//restore SREG
	SREG=sreg;
     a26:	bf be       	out	0x3f, r11	; 63
	//return state
	if (memcmp(&Event,&EventTmp,sizeof(Event))==0)
     a28:	47 e0       	ldi	r20, 0x07	; 7
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	be 01       	movw	r22, r28
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	c8 01       	movw	r24, r16
     a34:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <memcmp>
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	89 2b       	or	r24, r25
     a3c:	09 f0       	breq	.+2      	; 0xa40 <_ZN16class_Feed_Timer8EventAddER11EventStruct+0xdc>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	else
		return false;
}
     a40:	82 2f       	mov	r24, r18
     a42:	27 96       	adiw	r28, 0x07	; 7
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	bf 90       	pop	r11
     a60:	08 95       	ret

00000a62 <_ZN16class_Feed_Timer13ProcessInputsEv>:
//	| @INPUT   :				  													|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void class_Feed_Timer::ProcessInputs()
{
     a62:	8f 92       	push	r8
     a64:	9f 92       	push	r9
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	2c 97       	sbiw	r28, 0x0c	; 12
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	7c 01       	movw	r14, r24
	uint32_t	tExit;
	uint32_t	tShow;
	
	
	//Enable I/O Timer 0
	dp.EnableIO();
     a8c:	83 e3       	ldi	r24, 0x33	; 51
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     a94:	80 91 6e 00 	lds	r24, 0x006E
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	80 93 6e 00 	sts	0x006E, r24
	
	//Enable I/O Timer 0
	dp.EnableIO();
	this->SetTimer0_ON();
	//Clear Time To Exit
	time.SetElapsed(&tExit);
     a9e:	be 01       	movw	r22, r28
     aa0:	6b 5f       	subi	r22, 0xFB	; 251
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	8a e3       	ldi	r24, 0x3A	; 58
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
	
	key=dp.KeyReadFlash();
     aac:	83 e3       	ldi	r24, 0x33	; 51
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
	
	switch (key)
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	49 f4       	brne	.+18     	; 0xaca <_ZN16class_Feed_Timer13ProcessInputsEv+0x68>
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
					this->GetTime(h,m,s,w);
					sprintf(bf,"%02d%02d",h,m);
     ab8:	53 e0       	ldi	r21, 0x03	; 3
     aba:	a5 2e       	mov	r10, r21
     abc:	51 e0       	ldi	r21, 0x01	; 1
     abe:	b5 2e       	mov	r11, r21
     ac0:	65 e3       	ldi	r22, 0x35	; 53
     ac2:	c6 2e       	mov	r12, r22
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	d6 2e       	mov	r13, r22
     ac8:	1c c0       	rjmp	.+56     	; 0xb02 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa0>
	//Clear Time To Exit
	time.SetElapsed(&tExit);
	
	key=dp.KeyReadFlash();
	
	switch (key)
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	09 f0       	breq	.+2      	; 0xad0 <_ZN16class_Feed_Timer13ProcessInputsEv+0x6e>
     ace:	65 c1       	rjmp	.+714    	; 0xd9a <_ZN16class_Feed_Timer13ProcessInputsEv+0x338>
		/////////////////////
		// KEY UP? 
		/////////////////////
		case KEY_UP:
			//show MENU Item
			dp.Locate(1);
     ad0:	61 e0       	ldi	r22, 0x01	; 1
     ad2:	83 e3       	ldi	r24, 0x33	; 51
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
			dp.PutSF(this->GetMenuItemStr(menuItem));
     ada:	6a e9       	ldi	r22, 0x9A	; 154
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	83 e3       	ldi	r24, 0x33	; 51
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
			//wait key release
			dp.KeyWaitRelease();
     ae6:	83 e3       	ldi	r24, 0x33	; 51
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
			time.DelayMsI(KEY_DELAY);
     aee:	4e e5       	ldi	r20, 0x5E	; 94
     af0:	51 e0       	ldi	r21, 0x01	; 1
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	8a e3       	ldi	r24, 0x3A	; 58
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	#define		TIME_TO_EXIT	30000
	
	//My vars
	char		key;
	uint8_t		h,m,s,w,
				menuItem=1;
     afe:	11 e0       	ldi	r17, 0x01	; 1
     b00:	15 c1       	rjmp	.+554    	; 0xd2c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ca>
		/////////////////////
		case KEY_DOWN:
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
     b02:	be 01       	movw	r22, r28
     b04:	6f 5f       	subi	r22, 0xFF	; 255
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	8a e3       	ldi	r24, 0x3A	; 58
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
				dp.DispSetPoint(2,true);
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	83 e3       	ldi	r24, 0x33	; 51
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
				do{
					this->GetTime(h,m,s,w);
     b1c:	8e 01       	movw	r16, r28
     b1e:	07 5f       	subi	r16, 0xF7	; 247
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	9e 01       	movw	r18, r28
     b24:	26 5f       	subi	r18, 0xF6	; 246
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	ae 01       	movw	r20, r28
     b2a:	45 5f       	subi	r20, 0xF5	; 245
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	be 01       	movw	r22, r28
     b30:	64 5f       	subi	r22, 0xF4	; 244
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	c7 01       	movw	r24, r14
     b36:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					sprintf(bf,"%02d%02d",h,m);
     b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3c:	1f 92       	push	r1
     b3e:	8f 93       	push	r24
     b40:	8c 85       	ldd	r24, Y+12	; 0x0c
     b42:	1f 92       	push	r1
     b44:	8f 93       	push	r24
     b46:	bf 92       	push	r11
     b48:	af 92       	push	r10
     b4a:	df 92       	push	r13
     b4c:	cf 92       	push	r12
     b4e:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
					dp.Locate(1);
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
					dp.PutS(bf);
     b5c:	65 e3       	ldi	r22, 0x35	; 53
     b5e:	71 e0       	ldi	r23, 0x01	; 1
     b60:	83 e3       	ldi	r24, 0x33	; 51
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<1500);
     b68:	be 01       	movw	r22, r28
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	8a e3       	ldi	r24, 0x3A	; 58
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
			for(;;)
			{
				//show Time
				time.SetElapsed(&tShow);
				dp.DispSetPoint(2,true);
				do{
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	6c 3d       	cpi	r22, 0xDC	; 220
     b82:	75 40       	sbci	r23, 0x05	; 5
     b84:	81 05       	cpc	r24, r1
     b86:	91 05       	cpc	r25, r1
     b88:	48 f2       	brcs	.-110    	; 0xb1c <_ZN16class_Feed_Timer13ProcessInputsEv+0xba>
					this->GetTime(h,m,s,w);
					sprintf(bf,"%02d%02d",h,m);
					dp.Locate(1);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	62 e0       	ldi	r22, 0x02	; 2
     b8e:	83 e3       	ldi	r24, 0x33	; 51
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
				//show WeekDay
				time.SetElapsed(&tShow);
     b96:	be 01       	movw	r22, r28
     b98:	6f 5f       	subi	r22, 0xFF	; 255
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	8a e3       	ldi	r24, 0x3A	; 58
     b9e:	93 e0       	ldi	r25, 0x03	; 3
     ba0:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
				do{
					this->GetTime(h,m,s,w);
     ba4:	8e 01       	movw	r16, r28
     ba6:	07 5f       	subi	r16, 0xF7	; 247
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	9e 01       	movw	r18, r28
     bac:	26 5f       	subi	r18, 0xF6	; 246
     bae:	3f 4f       	sbci	r19, 0xFF	; 255
     bb0:	ae 01       	movw	r20, r28
     bb2:	45 5f       	subi	r20, 0xF5	; 245
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	be 01       	movw	r22, r28
     bb8:	64 5f       	subi	r22, 0xF4	; 244
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	c7 01       	movw	r24, r14
     bbe:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	83 e3       	ldi	r24, 0x33	; 51
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
     bcc:	e9 85       	ldd	r30, Y+9	; 0x09
     bce:	e1 50       	subi	r30, 0x01	; 1
     bd0:	e7 30       	cpi	r30, 0x07	; 7
     bd2:	40 f4       	brcc	.+16     	; 0xbe4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x182>
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	ee 5d       	subi	r30, 0xDE	; 222
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <_ZN16class_Feed_Timer13ProcessInputsEv+0x186>
					dp.PutSF(this->GetWeekDayStr(w));
     be4:	6c eb       	ldi	r22, 0xBC	; 188
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	83 e3       	ldi	r24, 0x33	; 51
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
				} while (time.GetElapsed(&tShow)<1500);				
     bf0:	be 01       	movw	r22, r28
     bf2:	6f 5f       	subi	r22, 0xFF	; 255
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	8a e3       	ldi	r24, 0x3A	; 58
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<1500);
				dp.DispSetPoint(2,false);
				//show WeekDay
				time.SetElapsed(&tShow);
				do{
     bfe:	6c 3d       	cpi	r22, 0xDC	; 220
     c00:	75 40       	sbci	r23, 0x05	; 5
     c02:	81 05       	cpc	r24, r1
     c04:	91 05       	cpc	r25, r1
     c06:	70 f2       	brcs	.-100    	; 0xba4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x142>
					this->GetTime(h,m,s,w);
					dp.Locate(1);
					dp.PutSF(this->GetWeekDayStr(w));
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	8a e3       	ldi	r24, 0x3A	; 58
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
				dp.Cls();
     c16:	83 e3       	ldi	r24, 0x33	; 51
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
				do{
					this->GetTime(h,m,s,w);
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
     c1e:	3c e0       	ldi	r19, 0x0C	; 12
     c20:	83 2e       	mov	r8, r19
     c22:	31 e0       	ldi	r19, 0x01	; 1
     c24:	93 2e       	mov	r9, r19
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
					this->GetTime(h,m,s,w);
     c26:	8e 01       	movw	r16, r28
     c28:	07 5f       	subi	r16, 0xF7	; 247
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	9e 01       	movw	r18, r28
     c2e:	26 5f       	subi	r18, 0xF6	; 246
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	ae 01       	movw	r20, r28
     c34:	45 5f       	subi	r20, 0xF5	; 245
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	be 01       	movw	r22, r28
     c3a:	64 5f       	subi	r22, 0xF4	; 244
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	c7 01       	movw	r24, r14
     c40:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
					dp.Locate(1);
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	83 e3       	ldi	r24, 0x33	; 51
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
					sprintf(bf,"  %02d",s);
     c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c50:	1f 92       	push	r1
     c52:	8f 93       	push	r24
     c54:	9f 92       	push	r9
     c56:	8f 92       	push	r8
     c58:	df 92       	push	r13
     c5a:	cf 92       	push	r12
     c5c:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
					dp.PutS(bf);
     c60:	65 e3       	ldi	r22, 0x35	; 53
     c62:	71 e0       	ldi	r23, 0x01	; 1
     c64:	83 e3       	ldi	r24, 0x33	; 51
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
				} while (time.GetElapsed(&tShow)<4000);				
     c6c:	be 01       	movw	r22, r28
     c6e:	6f 5f       	subi	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	8a e3       	ldi	r24, 0x3A	; 58
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
					dp.PutSF(this->GetWeekDayStr(w));
				} while (time.GetElapsed(&tShow)<1500);				
				//show Second
				time.SetElapsed(&tShow);
				dp.Cls();
				do{
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	60 3a       	cpi	r22, 0xA0	; 160
     c88:	7f 40       	sbci	r23, 0x0F	; 15
     c8a:	81 05       	cpc	r24, r1
     c8c:	91 05       	cpc	r25, r1
     c8e:	58 f2       	brcs	.-106    	; 0xc26 <_ZN16class_Feed_Timer13ProcessInputsEv+0x1c4>
					dp.Locate(1);
					sprintf(bf,"  %02d",s);
					dp.PutS(bf);
				} while (time.GetElapsed(&tShow)<4000);				
				//exit if key none
				key=dp.KeyReadFlash();
     c90:	83 e3       	ldi	r24, 0x33	; 51
     c92:	93 e0       	ldi	r25, 0x03	; 3
     c94:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
				if (key==KEY_NONE)
     c98:	81 11       	cpse	r24, r1
     c9a:	33 cf       	rjmp	.-410    	; 0xb02 <_ZN16class_Feed_Timer13ProcessInputsEv+0xa0>
				{
					//disable time and IO
					dp.Cls();
     c9c:	83 e3       	ldi	r24, 0x33	; 51
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
					dp.DispSetPoint(2,false);
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	83 e3       	ldi	r24, 0x33	; 51
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
     cb0:	74 c0       	rjmp	.+232    	; 0xd9a <_ZN16class_Feed_Timer13ProcessInputsEv+0x338>
			dp.KeyWaitRelease();
			time.DelayMsI(KEY_DELAY);
			for(;;)
			{
				//show MENU Item
				dp.Locate(1);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	83 e3       	ldi	r24, 0x33	; 51
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
     cbc:	34 e0       	ldi	r19, 0x04	; 4
     cbe:	3b 15       	cp	r19, r11
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <_ZN16class_Feed_Timer13ProcessInputsEv+0x262>
     cc2:	41 c0       	rjmp	.+130    	; 0xd46 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2e4>
     cc4:	f6 01       	movw	r30, r12
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
				dp.PutSF(this->GetMenuItemStr(menuItem));
     cca:	83 e3       	ldi	r24, 0x33	; 51
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
				//read key again
				key=dp.KeyReadFlash();
     cd2:	83 e3       	ldi	r24, 0x33	; 51
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     cda:	08 2f       	mov	r16, r24
				//set time to exit if any key pressed
				if (key!=KEY_NONE) time.SetElapsed(&tExit);
     cdc:	88 23       	and	r24, r24
     cde:	39 f0       	breq	.+14     	; 0xcee <_ZN16class_Feed_Timer13ProcessInputsEv+0x28c>
     ce0:	be 01       	movw	r22, r28
     ce2:	6b 5f       	subi	r22, 0xFB	; 251
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	8a e3       	ldi	r24, 0x3A	; 58
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	0e 94 09 0b 	call	0x1612	; 0x1612 <_ZN10class_Time10SetElapsedEPm>
				if (time.GetElapsed(&tExit)>TIME_TO_EXIT)
     cee:	be 01       	movw	r22, r28
     cf0:	6b 5f       	subi	r22, 0xFB	; 251
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	8a e3       	ldi	r24, 0x3A	; 58
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN10class_Time10GetElapsedEPm>
     cfc:	61 33       	cpi	r22, 0x31	; 49
     cfe:	75 47       	sbci	r23, 0x75	; 117
     d00:	81 05       	cpc	r24, r1
     d02:	91 05       	cpc	r25, r1
     d04:	08 f0       	brcs	.+2      	; 0xd08 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2a6>
     d06:	42 c0       	rjmp	.+132    	; 0xd8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x32a>
					this->SetTimer0_OFF();
					dp.Cls();
					return;
				}
				//process keys
				switch (key)
     d08:	02 30       	cpi	r16, 0x02	; 2
     d0a:	01 f1       	breq	.+64     	; 0xd4c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ea>
     d0c:	03 30       	cpi	r16, 0x03	; 3
     d0e:	19 f1       	breq	.+70     	; 0xd56 <_ZN16class_Feed_Timer13ProcessInputsEv+0x2f4>
     d10:	01 30       	cpi	r16, 0x01	; 1
     d12:	79 f6       	brne	.-98     	; 0xcb2 <_ZN16class_Feed_Timer13ProcessInputsEv+0x250>
     d14:	1b 2d       	mov	r17, r11
				{
					case KEY_DOWN:
						menuItem--;
						if (menuItem<1) menuItem=1;
     d16:	b1 10       	cpse	r11, r1
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ba>
     d1a:	11 e0       	ldi	r17, 0x01	; 1
						time.DelayMsI(KEY_DELAY);
					break;
					case KEY_UP:
						menuItem++;
						if (menuItem>MENU_ITENS) menuItem=MENU_ITENS;
						time.DelayMsI(KEY_DELAY);
     d1c:	4e e5       	ldi	r20, 0x5E	; 94
     d1e:	51 e0       	ldi	r21, 0x01	; 1
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	8a e3       	ldi	r24, 0x3A	; 58
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
     d2c:	bb 24       	eor	r11, r11
     d2e:	ba 94       	dec	r11
     d30:	b1 0e       	add	r11, r17
     d32:	cb 2c       	mov	r12, r11
     d34:	d1 2c       	mov	r13, r1
     d36:	c6 01       	movw	r24, r12
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	9c 01       	movw	r18, r24
     d3e:	28 5e       	subi	r18, 0xE8	; 232
     d40:	3e 4f       	sbci	r19, 0xFE	; 254
     d42:	69 01       	movw	r12, r18
     d44:	b6 cf       	rjmp	.-148    	; 0xcb2 <_ZN16class_Feed_Timer13ProcessInputsEv+0x250>
			dp.KeyWaitRelease();
			time.DelayMsI(KEY_DELAY);
			for(;;)
			{
				//show MENU Item
				dp.Locate(1);
     d46:	61 e8       	ldi	r22, 0x81	; 129
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	bf cf       	rjmp	.-130    	; 0xcca <_ZN16class_Feed_Timer13ProcessInputsEv+0x268>
						menuItem--;
						if (menuItem<1) menuItem=1;
						time.DelayMsI(KEY_DELAY);
					break;
					case KEY_UP:
						menuItem++;
     d4c:	1f 5f       	subi	r17, 0xFF	; 255
     d4e:	16 30       	cpi	r17, 0x06	; 6
     d50:	28 f3       	brcs	.-54     	; 0xd1c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ba>
     d52:	15 e0       	ldi	r17, 0x05	; 5
     d54:	e3 cf       	rjmp	.-58     	; 0xd1c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ba>
						if (menuItem>MENU_ITENS) menuItem=MENU_ITENS;
						time.DelayMsI(KEY_DELAY);
					break;
					case KEY_ENTER:
						//EXECUT ACCORDING
						dp.KeyWaitRelease();
     d56:	83 e3       	ldi	r24, 0x33	; 51
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
						time.DelayMsI(KEY_DELAY);
     d5e:	4e e5       	ldi	r20, 0x5E	; 94
     d60:	51 e0       	ldi	r21, 0x01	; 1
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	8a e3       	ldi	r24, 0x3A	; 58
     d68:	93 e0       	ldi	r25, 0x03	; 3
     d6a:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
						switch (menuItem)
     d6e:	14 30       	cpi	r17, 0x04	; 4
     d70:	49 f0       	breq	.+18     	; 0xd84 <_ZN16class_Feed_Timer13ProcessInputsEv+0x322>
     d72:	15 30       	cpi	r17, 0x05	; 5
     d74:	59 f0       	breq	.+22     	; 0xd8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x32a>
     d76:	11 30       	cpi	r17, 0x01	; 1
     d78:	c9 f6       	brne	.-78     	; 0xd2c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ca>
						{
							case MENU_ITEN::SET_TIME:
								//Set Time
								this->InitTime(true);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	c7 01       	movw	r24, r14
     d7e:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN16class_Feed_Timer8InitTimeEb>
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <_ZN16class_Feed_Timer13ProcessInputsEv+0x32a>
								this->SetTimer0_OFF();
								dp.Cls();
								return;
							break;
							case MENU_ITEN::RESET:
								cli();
     d84:	f8 94       	cli
								asm("jmp 0");
     d86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
							break;
     d8a:	d0 cf       	rjmp	.-96     	; 0xd2c <_ZN16class_Feed_Timer13ProcessInputsEv+0x2ca>
							case MENU_ITEN::EXIT:
								//exit
								this->SetTimer0_OFF();
     d8c:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
								dp.Cls();
     d90:	83 e3       	ldi	r24, 0x33	; 51
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
								return;
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <_ZN16class_Feed_Timer13ProcessInputsEv+0x33c>
		/////////////////////
		case KEY_ENTER:
		break;
	}
	//Set timer IO OFF
	this->SetTimer0_OFF();
     d9a:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
}
     d9e:	2c 96       	adiw	r28, 0x0c	; 12
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	08 95       	ret

00000dc4 <main>:
       ==================================================================================
*/


int main()
{
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	2c 97       	sbiw	r28, 0x0c	; 12
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
	
	//LOCAL VARIABLES
	
	class_Feed_Timer	ft;
     dd8:	ce 01       	movw	r24, r28
     dda:	0c 96       	adiw	r24, 0x0c	; 12
     ddc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN16class_Feed_TimerC1Ev>
	struct EventStruct  Event;
	uint8_t				h,m,s,w;
	
	Event.Event=EVENT_TYPE::REPEAT;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	89 83       	std	Y+1, r24	; 0x01
	Event.Hour=0;
     de4:	1a 82       	std	Y+2, r1	; 0x02
	Event.Minute=15;
     de6:	8f e0       	ldi	r24, 0x0F	; 15
     de8:	8b 83       	std	Y+3, r24	; 0x03
	Event.WeekDays=0;
     dea:	1c 82       	std	Y+4, r1	; 0x04
	Event.MinuteMotorON=0;
     dec:	1d 82       	std	Y+5, r1	; 0x05
	Event.SecondMotorON=5;
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	8e 83       	std	Y+6, r24	; 0x06
	ft.EventAdd(Event);
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	ce 01       	movw	r24, r28
     dfa:	0c 96       	adiw	r24, 0x0c	; 12
     dfc:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN16class_Feed_Timer8EventAddER11EventStruct>
	Event.Event=EVENT_TYPE::DIARY;
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	89 83       	std	Y+1, r24	; 0x01
	Event.Hour=23;
     e04:	87 e1       	ldi	r24, 0x17	; 23
     e06:	8a 83       	std	Y+2, r24	; 0x02
	Event.Minute=00;
     e08:	1b 82       	std	Y+3, r1	; 0x03
	Event.WeekDays=0;
     e0a:	1c 82       	std	Y+4, r1	; 0x04
	Event.MinuteMotorON=0;
     e0c:	1d 82       	std	Y+5, r1	; 0x05
	Event.SecondMotorON=10;
     e0e:	8a e0       	ldi	r24, 0x0A	; 10
     e10:	8e 83       	std	Y+6, r24	; 0x06
	ft.EventAdd(Event);
     e12:	be 01       	movw	r22, r28
     e14:	6f 5f       	subi	r22, 0xFF	; 255
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	ce 01       	movw	r24, r28
     e1a:	0c 96       	adiw	r24, 0x0c	; 12
     e1c:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN16class_Feed_Timer8EventAddER11EventStruct>
	
// 	for(;;)
// 		ft.ClockCallBack();

	//ENABLE GLOBAL INTERRUPTS
	sei();
     e20:	78 94       	sei
  
  
	//SHOW DART IF KEY DOWN PRESSED DURING RESET
	if (dp.KeyReadFlash()==KEY_DOWN)
     e22:	83 e3       	ldi	r24, 0x33	; 51
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	b1 f4       	brne	.+44     	; 0xe5a <main+0x96>
	{
		dp.Cls();
     e2e:	83 e3       	ldi	r24, 0x33	; 51
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
		dp.PutSF(PSTR("DART"));
     e36:	6c e7       	ldi	r22, 0x7C	; 124
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	83 e3       	ldi	r24, 0x33	; 51
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
		#ifndef DEBUG
			dp.KeyWaitRelease();
     e42:	83 e3       	ldi	r24, 0x33	; 51
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>
			time.DelayMsI(500);
     e4a:	44 ef       	ldi	r20, 0xF4	; 244
     e4c:	51 e0       	ldi	r21, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	8a e3       	ldi	r24, 0x3A	; 58
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
		#endif
	}
	//ANIMATION OF BOOT START
	dp.Cls();
     e5a:	83 e3       	ldi	r24, 0x33	; 51
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("-   "));
     e62:	67 e7       	ldi	r22, 0x77	; 119
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	83 e3       	ldi	r24, 0x33	; 51
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     e6e:	4a ef       	ldi	r20, 0xFA	; 250
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	8a e3       	ldi	r24, 0x3A	; 58
     e78:	93 e0       	ldi	r25, 0x03	; 3
     e7a:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     e7e:	83 e3       	ldi	r24, 0x33	; 51
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR(" -  "));
     e86:	62 e7       	ldi	r22, 0x72	; 114
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	83 e3       	ldi	r24, 0x33	; 51
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     e92:	4a ef       	ldi	r20, 0xFA	; 250
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	8a e3       	ldi	r24, 0x3A	; 58
     e9c:	93 e0       	ldi	r25, 0x03	; 3
     e9e:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     ea2:	83 e3       	ldi	r24, 0x33	; 51
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("  - "));
     eaa:	6d e6       	ldi	r22, 0x6D	; 109
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	83 e3       	ldi	r24, 0x33	; 51
     eb0:	93 e0       	ldi	r25, 0x03	; 3
     eb2:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     eb6:	4a ef       	ldi	r20, 0xFA	; 250
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8a e3       	ldi	r24, 0x3A	; 58
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     ec6:	83 e3       	ldi	r24, 0x33	; 51
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutSF(PSTR("   -"));
     ece:	68 e6       	ldi	r22, 0x68	; 104
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	83 e3       	ldi	r24, 0x33	; 51
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
	time.DelayMsI(250);
     eda:	4a ef       	ldi	r20, 0xFA	; 250
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	8a e3       	ldi	r24, 0x3A	; 58
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     eea:	83 e3       	ldi	r24, 0x33	; 51
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	time.DelayMsI(250);
     ef2:	4a ef       	ldi	r20, 0xFA	; 250
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	8a e3       	ldi	r24, 0x3A	; 58
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	//SHOW VERSION
	sprintf(bf,"V%3d",_FEED_TIMER_7_SEGMENTS_VERSION);
     f02:	1f 92       	push	r1
     f04:	84 e6       	ldi	r24, 0x64	; 100
     f06:	8f 93       	push	r24
     f08:	83 e1       	ldi	r24, 0x13	; 19
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	85 e3       	ldi	r24, 0x35	; 53
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
	dp.Cls();
     f1c:	83 e3       	ldi	r24, 0x33	; 51
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	dp.PutS(bf);
     f24:	65 e3       	ldi	r22, 0x35	; 53
     f26:	71 e0       	ldi	r23, 0x01	; 1
     f28:	83 e3       	ldi	r24, 0x33	; 51
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
	time.DelayMsI(2000);
     f30:	40 ed       	ldi	r20, 0xD0	; 208
     f32:	57 e0       	ldi	r21, 0x07	; 7
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8a e3       	ldi	r24, 0x3A	; 58
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
	dp.Cls();
     f40:	83 e3       	ldi	r24, 0x33	; 51
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
	//INITIALIZE TIME IS BOOT IS COLD
	ft.InitTime();
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	0c 96       	adiw	r24, 0x0c	; 12
     f4e:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN16class_Feed_Timer8InitTimeEb>
	dp.Cls();
     f52:	83 e3       	ldi	r24, 0x33	; 51
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
			dp.Cls();
			for(;;)
			{
				dp.Locate(1);
				ft.GetTime(h,m,s,w);
				sprintf(bf,"%02d%02d",h,m);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	e8 2e       	mov	r14, r24
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	f8 2e       	mov	r15, r24
     f6e:	95 e3       	ldi	r25, 0x35	; 53
     f70:	c9 2e       	mov	r12, r25
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	d9 2e       	mov	r13, r25
// 		time.DelayMsI(50);
// 	}
	for(;;)
	{
		//ENTER IN SLEEP SAVE MODE TO REDUCE POWER MORE
		if (ft.SleepState)
     f76:	80 91 00 01 	lds	r24, 0x0100
     f7a:	88 23       	and	r24, r24
     f7c:	61 f0       	breq	.+24     	; 0xf96 <main+0x1d2>
		{
			//SAVE IO STATE TO REDUCE POWER
			dp.DisableIO();
     f7e:	83 e3       	ldi	r24, 0x33	; 51
     f80:	93 e0       	ldi	r25, 0x03	; 3
     f82:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN19class_Display_7_Seg9DisableIOEv>
			//SLEEP
			dp.PutToSleep();
     f86:	83 e3       	ldi	r24, 0x33	; 51
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN19class_Display_7_Seg10PutToSleepEv>
			//SHOW FEED BACK OPERATIONAL
			ft.ShowLIVE();			
     f8e:	ce 01       	movw	r24, r28
     f90:	0c 96       	adiw	r24, 0x0c	; 12
     f92:	0e 94 82 04 	call	0x904	; 0x904 <_ZN16class_Feed_Timer8ShowLIVEEv>
		}
		//show time if motor on

		if (dp.MotorGetState()==true)
     f96:	83 e3       	ldi	r24, 0x33	; 51
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN19class_Display_7_Seg13MotorGetStateEv>
     f9e:	88 23       	and	r24, r24
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <main+0x1e0>
     fa2:	55 c0       	rjmp	.+170    	; 0x104e <main+0x28a>
		{
			dp.EnableIO();
     fa4:	83 e3       	ldi	r24, 0x33	; 51
     fa6:	93 e0       	ldi	r25, 0x03	; 3
     fa8:	0e 94 09 0a 	call	0x1412	; 0x1412 <_ZN19class_Display_7_Seg8EnableIOEv>
		/* Set Timer 0 Enable                                                   */
		/************************************************************************/
		void inline SetTimer0_ON()
		{
			//disable TIMER 0 caution when change TIMER drive TIMER USED to update bellow software, in this case dont be a TIMER2
			TIMSK0|=(1<<OCIE0A);
     fac:	80 91 6e 00 	lds	r24, 0x006E
     fb0:	82 60       	ori	r24, 0x02	; 2
     fb2:	80 93 6e 00 	sts	0x006E, r24

		if (dp.MotorGetState()==true)
		{
			dp.EnableIO();
			ft.SetTimer0_ON();
			dp.DispSetPoint(2,true);
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	83 e3       	ldi	r24, 0x33	; 51
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
     fc2:	83 e3       	ldi	r24, 0x33	; 51
     fc4:	93 e0       	ldi	r25, 0x03	; 3
     fc6:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
			for(;;)
			{
				dp.Locate(1);
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	83 e3       	ldi	r24, 0x33	; 51
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN19class_Display_7_Seg6LocateEh>
				ft.GetTime(h,m,s,w);
     fd4:	8e 01       	movw	r16, r28
     fd6:	08 5f       	subi	r16, 0xF8	; 248
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	9e 01       	movw	r18, r28
     fdc:	27 5f       	subi	r18, 0xF7	; 247
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	ae 01       	movw	r20, r28
     fe2:	46 5f       	subi	r20, 0xF6	; 246
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	be 01       	movw	r22, r28
     fe8:	65 5f       	subi	r22, 0xF5	; 245
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	ce 01       	movw	r24, r28
     fee:	0c 96       	adiw	r24, 0x0c	; 12
     ff0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN16class_Feed_Timer7GetTimeERhS0_S0_S0_>
				sprintf(bf,"%02d%02d",h,m);
     ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff6:	1f 92       	push	r1
     ff8:	8f 93       	push	r24
     ffa:	8b 85       	ldd	r24, Y+11	; 0x0b
     ffc:	1f 92       	push	r1
     ffe:	8f 93       	push	r24
    1000:	ff 92       	push	r15
    1002:	ef 92       	push	r14
    1004:	df 92       	push	r13
    1006:	cf 92       	push	r12
    1008:	0e 94 81 0b 	call	0x1702	; 0x1702 <sprintf>
				dp.PutS(bf);
    100c:	65 e3       	ldi	r22, 0x35	; 53
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	83 e3       	ldi	r24, 0x33	; 51
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN19class_Display_7_Seg4PutSEPKc>
				if (dp.MotorGetState()==false) break;
    1018:	83 e3       	ldi	r24, 0x33	; 51
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN19class_Display_7_Seg13MotorGetStateEv>
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	81 11       	cpse	r24, r1
    102c:	ce cf       	rjmp	.-100    	; 0xfca <main+0x206>
			}
			dp.DispSetPoint(2,false);
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	83 e3       	ldi	r24, 0x33	; 51
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 49 09 	call	0x1292	; 0x1292 <_ZN19class_Display_7_Seg12DispSetPointEhb>
			dp.Cls();
    103a:	83 e3       	ldi	r24, 0x33	; 51
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN19class_Display_7_Seg3ClsEv>
			ft.SetTimer0_OFF();
    1042:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN16class_Feed_Timer13SetTimer0_OFFEv.isra.2>
			dp.DisableIO();
    1046:	83 e3       	ldi	r24, 0x33	; 51
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <_ZN19class_Display_7_Seg9DisableIOEv>
		}
		//PROCESS INPUT KEYS
		ft.ProcessInputs();
    104e:	ce 01       	movw	r24, r28
    1050:	0c 96       	adiw	r24, 0x0c	; 12
    1052:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN16class_Feed_Timer13ProcessInputsEv>
	}
    1056:	8f cf       	rjmp	.-226    	; 0xf76 <main+0x1b2>

00001058 <_GLOBAL__sub_I_time>:
//  +--------------------------------------+
//  |        GLOBAL CLASSES          	   |
//  +--------------------------------------+
// 

class_Time			time;
    1058:	8a e3       	ldi	r24, 0x3A	; 58
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN10class_TimeC1Ev>
class_Display_7_Seg	dp;
    1060:	83 e3       	ldi	r24, 0x33	; 51
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0c 94 3f 09 	jmp	0x127e	; 0x127e <_ZN19class_Display_7_SegC1Ev>

00001068 <_Z11DisplayScanv>:
	
	//first turn all digits off
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
								 				(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1068:	88 b1       	in	r24, 0x08	; 8
    106a:	8f 60       	ori	r24, 0x0F	; 15
    106c:	88 b9       	out	0x08, r24	; 8
	//turn all segments off
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);	
    106e:	8b b1       	in	r24, 0x0b	; 11
    1070:	88 61       	ori	r24, 0x18	; 24
    1072:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT|=	(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
		    									(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1074:	8b b1       	in	r24, 0x0b	; 11
    1076:	87 6e       	ori	r24, 0xE7	; 231
    1078:	8b b9       	out	0x0b, r24	; 11
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    107a:	80 91 41 03 	lds	r24, 0x0341
    107e:	8f 5f       	subi	r24, 0xFF	; 255
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	18 f4       	brcc	.+6      	; 0x108a <_Z11DisplayScanv+0x22>
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
									
	//pump display index count
	_Display_7_Seg.BufferIndex++;
    1084:	80 93 41 03 	sts	0x0341, r24
    1088:	02 c0       	rjmp	.+4      	; 0x108e <_Z11DisplayScanv+0x26>
	if (_Display_7_Seg.BufferIndex>=_DISP_7_SEG_NUM_DIGITS)	_Display_7_Seg.BufferIndex=0;
    108a:	10 92 41 03 	sts	0x0341, r1
	//put display buffer content on display
	tmp=_Display_7_Seg.Buffer[_Display_7_Seg.BufferIndex] & (~(1<<_DISPLAY_SEG_P));
    108e:	e0 91 41 03 	lds	r30, 0x0341
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	ef 5b       	subi	r30, 0xBF	; 191
    1096:	fc 4f       	sbci	r31, 0xFC	; 252
    1098:	81 81       	ldd	r24, Z+1	; 0x01
	//check bits
	if ((tmp & (1<<_DISPLAY_SEG_A))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT);
    109a:	80 fd       	sbrc	r24, 0
    109c:	59 98       	cbi	0x0b, 1	; 11
	if ((tmp & (1<<_DISPLAY_SEG_B))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT);
    109e:	81 fd       	sbrc	r24, 1
    10a0:	5a 98       	cbi	0x0b, 2	; 11
	if ((tmp & (1<<_DISPLAY_SEG_C))!=0)	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT);
    10a2:	82 fd       	sbrc	r24, 2
    10a4:	5c 98       	cbi	0x0b, 4	; 11
	if ((tmp & (1<<_DISPLAY_SEG_D))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT);
    10a6:	83 fd       	sbrc	r24, 3
    10a8:	5e 98       	cbi	0x0b, 6	; 11
	if ((tmp & (1<<_DISPLAY_SEG_E))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    10aa:	84 fd       	sbrc	r24, 4
    10ac:	5f 98       	cbi	0x0b, 7	; 11
	if ((tmp & (1<<_DISPLAY_SEG_F))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT);
    10ae:	85 fd       	sbrc	r24, 5
    10b0:	58 98       	cbi	0x0b, 0	; 11
	if ((tmp & (1<<_DISPLAY_SEG_G))!=0)	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT);
    10b2:	86 fd       	sbrc	r24, 6
    10b4:	5d 98       	cbi	0x0b, 5	; 11
    //turn point on or off
     if ((_Display_7_Seg.PtrBufferBits & (1<<_Display_7_Seg.BufferIndex))!=0)
    10b6:	80 91 46 03 	lds	r24, 0x0346
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	00 90 41 03 	lds	r0, 0x0341
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <_Z11DisplayScanv+0x5e>
    10c2:	95 95       	asr	r25
    10c4:	87 95       	ror	r24
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <_Z11DisplayScanv+0x5a>
    10ca:	80 fd       	sbrc	r24, 0
	 {
		_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    10cc:	5b 98       	cbi	0x0b, 3	; 11
	 }
	//enable digit
	switch (_Display_7_Seg.BufferIndex)
    10ce:	80 91 41 03 	lds	r24, 0x0341
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	41 f0       	breq	.+16     	; 0x10e6 <_Z11DisplayScanv+0x7e>
    10d6:	28 f0       	brcs	.+10     	; 0x10e2 <_Z11DisplayScanv+0x7a>
    10d8:	82 30       	cpi	r24, 0x02	; 2
    10da:	39 f0       	breq	.+14     	; 0x10ea <_Z11DisplayScanv+0x82>
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	39 f0       	breq	.+14     	; 0x10ee <_Z11DisplayScanv+0x86>
    10e0:	08 95       	ret
	{
		case 0:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    10e2:	43 98       	cbi	0x08, 3	; 8
		break;
    10e4:	08 95       	ret
		case 1:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT);
    10e6:	42 98       	cbi	0x08, 2	; 8
		break;
    10e8:	08 95       	ret
		case 2:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT);
    10ea:	41 98       	cbi	0x08, 1	; 8
		break;
    10ec:	08 95       	ret
		case 3:
			_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT);
    10ee:	40 98       	cbi	0x08, 0	; 8
    10f0:	08 95       	ret

000010f2 <_ZN19class_Display_7_Seg14KeysInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeysInitialize()
{
		//set keys input with pull up
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_OUTPUT|=(1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT);
    10f2:	85 b1       	in	r24, 0x05	; 5
    10f4:	87 60       	ori	r24, 0x07	; 7
    10f6:	85 b9       	out	0x05, r24	; 5
		_FEED_TIMER_DISP_7_SEG_KEY_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT));
    10f8:	84 b1       	in	r24, 0x04	; 4
    10fa:	88 7f       	andi	r24, 0xF8	; 248
    10fc:	84 b9       	out	0x04, r24	; 4
    10fe:	08 95       	ret

00001100 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>:
//	| @INPUT   :																	|
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysInitialize()
{
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1108:	1f b7       	in	r17, 0x3f	; 63
	//disable interrupts
	cli();
    110a:	f8 94       	cli
	//program Segments and digits to output off state
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    110c:	8b b1       	in	r24, 0x0b	; 11
    110e:	88 61       	ori	r24, 0x18	; 24
    1110:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT);
    1112:	9a b1       	in	r25, 0x0a	; 10
    1114:	98 61       	ori	r25, 0x18	; 24
    1116:	9a b9       	out	0x0a, r25	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT  |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    1118:	9b b1       	in	r25, 0x0b	; 11
    111a:	97 6e       	ori	r25, 0xE7	; 231
    111c:	9b b9       	out	0x0b, r25	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 |=(1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
											   (1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT);
    111e:	9a b1       	in	r25, 0x0a	; 10
    1120:	97 6e       	ori	r25, 0xE7	; 231
    1122:	9a b9       	out	0x0a, r25	; 10
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT|= (1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    1124:	98 b1       	in	r25, 0x08	; 8
    1126:	9f 60       	ori	r25, 0x0F	; 15
    1128:	98 b9       	out	0x08, r25	; 8
	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   |=	(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT);
    112a:	97 b1       	in	r25, 0x07	; 7
    112c:	9f 60       	ori	r25, 0x0F	; 15
    112e:	97 b9       	out	0x07, r25	; 7
    //Set interrupt timer routine
    Time.SetTimeInterruptCallback(DisplayScan);
    1130:	64 e3       	ldi	r22, 0x34	; 52
    1132:	78 e0       	ldi	r23, 0x08	; 8
    1134:	ce 01       	movw	r24, r28
    1136:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>
    //enable timer interrupt
    Time.SetInterruptState(true);					 
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN10class_Time17SetInterruptStateEb>
	//restore SREG
	SREG=sreg;
    1142:	1f bf       	out	0x3f, r17	; 63
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	08 95       	ret

0000114c <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisplaysUnInitialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    114c:	9f b7       	in	r25, 0x3f	; 63
	//disable interrupts
	cli();
    114e:	f8 94       	cli
	//program all select displays and segments to input high z
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1150:	8a b1       	in	r24, 0x0a	; 10
    1152:	87 7e       	andi	r24, 0xE7	; 231
    1154:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG1_PORT_OUTPUT	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG1_C_BIT)|(1<<_FEED_TIMER_DISP_7_SEG_SEG1_P_BIT));
    1156:	8b b1       	in	r24, 0x0b	; 11
    1158:	87 7e       	andi	r24, 0xE7	; 231
    115a:	8b b9       	out	0x0b, r24	; 11
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_DIR	 &=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    115c:	8a b1       	in	r24, 0x0a	; 10
    115e:	88 71       	andi	r24, 0x18	; 24
    1160:	8a b9       	out	0x0a, r24	; 10
	_FEED_TIMER_DISP_7_SEG_SEG2_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_SEG2_F_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_A_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_B_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_G_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_D_BIT)|		\
												(1<<_FEED_TIMER_DISP_7_SEG_SEG2_E_BIT));
    1162:	8b b1       	in	r24, 0x0b	; 11
    1164:	88 71       	andi	r24, 0x18	; 24
    1166:	8b b9       	out	0x0b, r24	; 11


	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_DIR   &=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|   \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    1168:	87 b1       	in	r24, 0x07	; 7
    116a:	80 7f       	andi	r24, 0xF0	; 240
    116c:	87 b9       	out	0x07, r24	; 7

	_FEED_TIMER_DISP_7_SEG_DIGITS_PORT_OUTPUT&=~((1<<_FEED_TIMER_DISP_7_SEG_DIGITS_1_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_2_BIT)|    \
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_3_BIT)|	\
												(1<<_FEED_TIMER_DISP_7_SEG_DIGITS_4_BIT));
    116e:	88 b1       	in	r24, 0x08	; 8
    1170:	80 7f       	andi	r24, 0xF0	; 240
    1172:	88 b9       	out	0x08, r24	; 8
	//Set interrupt timer routine
	//restore SREG
	SREG=sreg;
    1174:	9f bf       	out	0x3f, r25	; 63
    1176:	08 95       	ret

00001178 <_ZN19class_Display_7_Seg15MotorInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorInitialize()
{
	//PROGRAM PORT TO INPUT HI-Z TO DISABLE MOTOR
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1178:	44 98       	cbi	0x08, 4	; 8
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    117a:	3c 98       	cbi	0x07, 4	; 7
    117c:	08 95       	ret

0000117e <_ZN19class_Display_7_Seg17MotorUnInitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::MotorUnInitialize()
{
	//PORTS input high z (motor automatically disable)
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    117e:	3c 98       	cbi	0x07, 4	; 7
	_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_OUTPUT&=~(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
    1180:	44 98       	cbi	0x08, 4	; 8
    1182:	08 95       	ret

00001184 <_ZN19class_Display_7_Seg16Timer2InitializeEv>:
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Timer2Initialize()
{
	uint8_t sreg;
	//save SREG
	sreg=SREG;
    1184:	2f b7       	in	r18, 0x3f	; 63
	//disable interrupts
	cli();
    1186:	f8 94       	cli
	//disable timer interrupts
	TIMSK2&=~(1<<OCIE2A);
    1188:	80 91 70 00 	lds	r24, 0x0070
    118c:	8d 7f       	andi	r24, 0xFD	; 253
    118e:	80 93 70 00 	sts	0x0070, r24
	//set asynchronous mode external xtal 32.768Hz
	ASSR|=(1<<AS2);
    1192:	80 91 b6 00 	lds	r24, 0x00B6
    1196:	80 62       	ori	r24, 0x20	; 32
    1198:	80 93 b6 00 	sts	0x00B6, r24
	//set OCR2A to 31 to generate 1Hz interrupt using 32.768Hz xtal
	OCR2A=31;
    119c:	8f e1       	ldi	r24, 0x1F	; 31
    119e:	80 93 b3 00 	sts	0x00B3, r24
	//wait assert
	do {} while ((ASSR & (1<<OCR2AUB))==0);
    11a2:	80 91 b6 00 	lds	r24, 0x00B6
    11a6:	83 ff       	sbrs	r24, 3
    11a8:	fc cf       	rjmp	.-8      	; 0x11a2 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x1e>
	//clear timer 2
	TCNT2=0;
    11aa:	10 92 b2 00 	sts	0x00B2, r1
	//wait assert
	do {} while ((ASSR & (1<<TCN2UB))==0);
    11ae:	80 91 b6 00 	lds	r24, 0x00B6
    11b2:	84 ff       	sbrs	r24, 4
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x2a>
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
    11b6:	80 91 b0 00 	lds	r24, 0x00B0
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
	TCCR2A|=tmp;
    11ba:	90 91 b0 00 	lds	r25, 0x00B0
    11be:	92 60       	ori	r25, 0x02	; 2
	do {} while ((ASSR & (1<<TCN2UB))==0);
	//set mode CTC prescaler x2014
	uint8_t tmp;
	tmp=TCCR2A;
	tmp|=(1<<WGM21);
	tmp&=~(1<<WGM20);
    11c0:	8e 7f       	andi	r24, 0xFE	; 254
	TCCR2A|=tmp;
    11c2:	89 2b       	or	r24, r25
    11c4:	80 93 b0 00 	sts	0x00B0, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2AUB))==0);
    11c8:	80 91 b6 00 	lds	r24, 0x00B6
    11cc:	81 ff       	sbrs	r24, 1
    11ce:	fc cf       	rjmp	.-8      	; 0x11c8 <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x44>
	tmp=TCCR2B;
    11d0:	80 91 b1 00 	lds	r24, 0x00B1
	tmp&=(1<<WGM22);
    11d4:	88 70       	andi	r24, 0x08	; 8
	tmp|=(1<<CS22)|(1<<CS21)|(1<<CS20);
    11d6:	87 60       	ori	r24, 0x07	; 7
	TCCR2B=tmp;
    11d8:	80 93 b1 00 	sts	0x00B1, r24
	//wait assert
	do {} while ((ASSR & (1<<TCR2BUB))==0);
    11dc:	80 91 b6 00 	lds	r24, 0x00B6
    11e0:	80 ff       	sbrs	r24, 0
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <_ZN19class_Display_7_Seg16Timer2InitializeEv+0x58>
	//enable interrupt
	TIMSK2|=(1<<OCIE2A);
    11e4:	80 91 70 00 	lds	r24, 0x0070
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	80 93 70 00 	sts	0x0070, r24
	//restore SREG
	SREG=sreg;
    11ee:	2f bf       	out	0x3f, r18	; 63
    11f0:	08 95       	ret

000011f2 <__vector_7>:
//	| @REMARKS :  This ISR is called each second									|
//	+-------------------------------------------------------------------------------+


ISR(TIMER2_COMPA_vect)
{
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
	if (_Display_7_Seg.SecondCallBack!=nullptr) _Display_7_Seg.SecondCallBack();
    1214:	e0 91 48 03 	lds	r30, 0x0348
    1218:	f0 91 49 03 	lds	r31, 0x0349
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	09 f0       	breq	.+2      	; 0x1222 <__vector_7+0x30>
    1220:	09 95       	icall
}
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <_ZN19class_Display_7_Seg10InitializeEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+


void    class_Display_7_Seg::Initialize()
{
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	ec 01       	movw	r28, r24
    uint8_t sreg;

    //save SREG
    sreg=SREG;
    124c:	1f b7       	in	r17, 0x3f	; 63
	//Initialize KEYS Hardware
	KeysInitialize();
    124e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_ZN19class_Display_7_Seg14KeysInitializeEv>
	//Initialize Display Hardware
	DisplaysInitialize();
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
	//Initialize Motor Hardware
	MotorInitialize();
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN19class_Display_7_Seg15MotorInitializeEv>
	//Initialize Timer 2
	Timer2Initialize();
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN19class_Display_7_Seg16Timer2InitializeEv>
	//clear Display Buffer
	memset(_Display_7_Seg.Buffer,0,sizeof(_Display_7_Seg.Buffer));
    1264:	10 92 42 03 	sts	0x0342, r1
    1268:	10 92 43 03 	sts	0x0343, r1
    126c:	10 92 44 03 	sts	0x0344, r1
    1270:	10 92 45 03 	sts	0x0345, r1
    //restore SREG state
    SREG=sreg;
    1274:	1f bf       	out	0x3f, r17	; 63
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	08 95       	ret

0000127e <_ZN19class_Display_7_SegC1Ev>:
//	| @NAME    :  General WIFI IO Initialization  		                            |
//	| @INPUT   :  none                                                              |
//	| @OUTPUT  :  none								                                |
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24
    1284:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN10class_TimeC1Ev>
{
	//Initialize PID
    Initialize();
    1288:	ce 01       	movw	r24, r28
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
//	| @REMARKS :													                |
//	+-------------------------------------------------------------------------------+
class_Display_7_Seg::class_Display_7_Seg()
{
	//Initialize PID
    Initialize();
    128e:	0c 94 22 09 	jmp	0x1244	; 0x1244 <_ZN19class_Display_7_Seg10InitializeEv>

00001292 <_ZN19class_Display_7_Seg12DispSetPointEhb>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void    class_Display_7_Seg::DispSetPoint(uint8_t digit,bool digitState)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    1292:	61 50       	subi	r22, 0x01	; 1
    1294:	64 30       	cpi	r22, 0x04	; 4
    1296:	c0 f4       	brcc	.+48     	; 0x12c8 <_ZN19class_Display_7_Seg12DispSetPointEhb+0x36>
	{
    	//yes set segments
        digit=digit-1;
        switch (digitState)
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	20 91 46 03 	lds	r18, 0x0346
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	51 05       	cpc	r21, r1
    12a2:	59 f0       	breq	.+22     	; 0x12ba <_ZN19class_Display_7_Seg12DispSetPointEhb+0x28>
        {
            case false:
                _Display_7_Seg.PtrBufferBits&=~(1<<digit);
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <_ZN19class_Display_7_Seg12DispSetPointEhb+0x1a>
    12aa:	88 0f       	add	r24, r24
    12ac:	6a 95       	dec	r22
    12ae:	ea f7       	brpl	.-6      	; 0x12aa <_ZN19class_Display_7_Seg12DispSetPointEhb+0x18>
    12b0:	80 95       	com	r24
    12b2:	82 23       	and	r24, r18
    12b4:	80 93 46 03 	sts	0x0346, r24
        	break;
    12b8:	08 95       	ret
            case true:
                _Display_7_Seg.PtrBufferBits|=(1<<digit);
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2c>
    12bc:	44 0f       	add	r20, r20
    12be:	6a 95       	dec	r22
    12c0:	ea f7       	brpl	.-6      	; 0x12bc <_ZN19class_Display_7_Seg12DispSetPointEhb+0x2a>
    12c2:	42 2b       	or	r20, r18
    12c4:	40 93 46 03 	sts	0x0346, r20
    12c8:	08 95       	ret

000012ca <_ZN19class_Display_7_Seg12DispSetASCIIEhh>:
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DispSetASCII(uint8_t asciiCode,uint8_t digit)
{
	//check if digit in range
	if (digit>=1 && digit<=_DISP_7_SEG_NUM_DIGITS)
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	84 0f       	add	r24, r20
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	70 f4       	brcc	.+28     	; 0x12ee <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
	{
		//yes set segments
		if (asciiCode>=' ' && asciiCode<('_'+2))
    12d2:	80 ee       	ldi	r24, 0xE0	; 224
    12d4:	86 0f       	add	r24, r22
    12d6:	81 34       	cpi	r24, 0x41	; 65
    12d8:	50 f4       	brcc	.+20     	; 0x12ee <_ZN19class_Display_7_Seg12DispSetASCIIEhh+0x24>
		{
			_Display_7_Seg.Buffer[digit-1]=pgm_read_byte(&_FEED_TIMER_DISP_7_SEG_ASCII_Table[asciiCode-' ']);	
    12da:	e6 2f       	mov	r30, r22
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	e7 53       	subi	r30, 0x37	; 55
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	e4 91       	lpm	r30, Z
    12e4:	a4 2f       	mov	r26, r20
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	af 5b       	subi	r26, 0xBF	; 191
    12ea:	bc 4f       	sbci	r27, 0xFC	; 252
    12ec:	ec 93       	st	X, r30
    12ee:	08 95       	ret

000012f0 <_ZN19class_Display_7_Seg4HomeEv>:
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 47 03 	sts	0x0347, r24
    12f6:	08 95       	ret

000012f8 <_ZN19class_Display_7_Seg6LocateEh>:
    12f8:	60 93 47 03 	sts	0x0347, r22
    12fc:	08 95       	ret

000012fe <_ZN19class_Display_7_Seg4PutCEc>:
//	| @INPUT   : asciiCode										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutC(char asciiCode)
{
		if (_Display_7_Seg.Col>=1 && _Display_7_Seg.Col<=_DISP_7_SEG_NUM_DIGITS)
    12fe:	40 91 47 03 	lds	r20, 0x0347
    1302:	2f ef       	ldi	r18, 0xFF	; 255
    1304:	24 0f       	add	r18, r20
    1306:	24 30       	cpi	r18, 0x04	; 4
    1308:	10 f4       	brcc	.+4      	; 0x130e <_ZN19class_Display_7_Seg4PutCEc+0x10>
		{
			DispSetASCII(asciiCode,_Display_7_Seg.Col);
    130a:	0e 94 65 09 	call	0x12ca	; 0x12ca <_ZN19class_Display_7_Seg12DispSetASCIIEhh>
		}
		_Display_7_Seg.Col++;
    130e:	80 91 47 03 	lds	r24, 0x0347
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 47 03 	sts	0x0347, r24
    1318:	08 95       	ret

0000131a <_ZN19class_Display_7_Seg4PutSEPKc>:
//	| @NAME    : PutS						  										|
//	| @INPUT   : asciiString									                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutS(const char *asciiString)
{
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	8c 01       	movw	r16, r24
    1324:	eb 01       	movw	r28, r22
	  unsigned char data;
	  //send until zero is found
	  for(;;)
	  {
		  //get char for sram
		  data=*asciiString;
    1326:	69 91       	ld	r22, Y+
		  //check if end
		  if (data==0) break;
    1328:	66 23       	and	r22, r22
    132a:	21 f0       	breq	.+8      	; 0x1334 <_ZN19class_Display_7_Seg4PutSEPKc+0x1a>
		  //process according data
		  PutC(data);
    132c:	c8 01       	movw	r24, r16
    132e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN19class_Display_7_Seg4PutCEc>
		  //next char
		  asciiString++;
	  }
    1332:	f9 cf       	rjmp	.-14     	; 0x1326 <_ZN19class_Display_7_Seg4PutSEPKc+0xc>
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	08 95       	ret

0000133e <_ZN19class_Display_7_Seg5PutSFEPKc>:
//	| @NAME    : PutSF						  										|
//	| @INPUT   : asciiStringFlash 								                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutSF(const char *asciiStringFlash)
{
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	8c 01       	movw	r16, r24
    1348:	eb 01       	movw	r28, r22
	unsigned char data;
	//send until zero is found
	for(;;)
	{
		//get char for sram
		data=pgm_read_byte(asciiStringFlash);
    134a:	fe 01       	movw	r30, r28
    134c:	64 91       	lpm	r22, Z
		//check if end
		if (data==0) break;
    134e:	66 23       	and	r22, r22
    1350:	29 f0       	breq	.+10     	; 0x135c <_ZN19class_Display_7_Seg5PutSFEPKc+0x1e>
		//process according data
		PutC(data);
    1352:	c8 01       	movw	r24, r16
    1354:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN19class_Display_7_Seg4PutCEc>
		//next char
		asciiStringFlash++;
    1358:	21 96       	adiw	r28, 0x01	; 1
	}
    135a:	f7 cf       	rjmp	.-18     	; 0x134a <_ZN19class_Display_7_Seg5PutSFEPKc+0xc>
}
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <_ZN19class_Display_7_Seg3ClsEv>:
//	| @NAME    : Cls				  												|
//	| @INPUT   : ASCII code to clear							                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    136c:	c1 e4       	ldi	r28, 0x41	; 65
    136e:	d3 e0       	ldi	r29, 0x03	; 3
    1370:	11 e0       	ldi	r17, 0x01	; 1
    1372:	1e 83       	std	Y+6, r17	; 0x06
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
    1374:	64 ee       	ldi	r22, 0xE4	; 228
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 9f 09 	call	0x133e	; 0x133e <_ZN19class_Display_7_Seg5PutSFEPKc>
//	| @INPUT   : col 1..6										                    |
//	| @OUTPUT  :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::Locate(uint8_t dispCol)
{
	_Display_7_Seg.Col=dispCol;
    137c:	1e 83       	std	Y+6, r17	; 0x06
void	class_Display_7_Seg::Cls()
{
	Locate(1);
	PutSF(PSTR("    "));
	Locate(1);
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	08 95       	ret

00001386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>:
char	class_Display_7_Seg::KeyReadFlash()
{
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    1386:	83 b1       	in	r24, 0x03	; 3
    //check LED key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KEY_DOWN;
    1388:	82 ff       	sbrs	r24, 2
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x12>
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KEY_UP;
    138c:	81 ff       	sbrs	r24, 1
    138e:	06 c0       	rjmp	.+12     	; 0x139c <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x16>
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KEY_ENTER;
    1390:	80 ff       	sbrs	r24, 0
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <_ZN19class_Display_7_Seg12KeyReadFlashEv+0x1a>
	//else none pressed
    return KEY_NONE;
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	08 95       	ret
    uint8_t tmp;

    //assume no key read
    tmp=_FEED_TIMER_DISP_7_SEG_KEY_PORT_INPUT;
    //check LED key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_DOWN_BIT))==0) return KEY_DOWN;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	08 95       	ret
    //check LED MODE key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_UP_BIT))==0) return KEY_UP;
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	08 95       	ret
    //check DOOR key
    if ((tmp & (1<<_FEED_TIMER_DISP_7_SEG_KEY_ENTER_BIT))==0) return KEY_ENTER;
    13a0:	83 e0       	ldi	r24, 0x03	; 3
	//else none pressed
    return KEY_NONE;
}
    13a2:	08 95       	ret

000013a4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	ec 01       	movw	r28, r24
	  while (KeyReadFlash()!=KEY_NONE) Time.DelayMsI(20);				//check at 20ms
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN19class_Display_7_Seg12KeyReadFlashEv>
    13b0:	88 23       	and	r24, r24
    13b2:	41 f0       	breq	.+16     	; 0x13c4 <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x20>
    13b4:	44 e1       	ldi	r20, 0x14	; 20
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>
    13c2:	f3 cf       	rjmp	.-26     	; 0x13aa <_ZN19class_Display_7_Seg14KeyWaitReleaseEv+0x6>
	  Time.DelayMsI(100);										         //debounce time
    13c4:	44 e6       	ldi	r20, 0x64	; 100
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	ce 01       	movw	r24, r28
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::KeyWaitRelease()
{
	  while (KeyReadFlash()!=KEY_NONE) Time.DelayMsI(20);				//check at 20ms
	  Time.DelayMsI(100);										         //debounce time
    13d2:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_ZN10class_Time8DelayMsIEm>

000013d6 <_ZN19class_Display_7_Seg10PutToSleepEv>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::PutToSleep()
{
		//disable interrupts
		cli();
    13d6:	f8 94       	cli
		//set sleep to POWER SAVE to keep timer2 running
		set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    13d8:	83 b7       	in	r24, 0x33	; 51
    13da:	81 7f       	andi	r24, 0xF1	; 241
    13dc:	86 60       	ori	r24, 0x06	; 6
    13de:	83 bf       	out	0x33, r24	; 51
		//enable sleep
		sleep_enable();
    13e0:	83 b7       	in	r24, 0x33	; 51
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	83 bf       	out	0x33, r24	; 51
		//enable global interrupt
		sei();
    13e6:	78 94       	sei
		//put CPU to sleep
		sleep_cpu();
    13e8:	88 95       	sleep
		//disable sleep mode
		sleep_disable();
    13ea:	83 b7       	in	r24, 0x33	; 51
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	83 bf       	out	0x33, r24	; 51
    13f0:	08 95       	ret

000013f2 <_ZN19class_Display_7_Seg9DisableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::DisableIO()
{
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
		//save SREG
		uint8_t sreg=SREG;
    13fa:	1f b7       	in	r17, 0x3f	; 63
		//disable interrupts
		cli();
    13fc:	f8 94       	cli
		//uninitialized hardware ports
		//KeysUnInitialize();
		DisplaysUnInitialize();
    13fe:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN19class_Display_7_Seg20DisplaysUnInitializeEv>
		MotorUnInitialize();	
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN19class_Display_7_Seg17MotorUnInitializeEv>
		//restore SREG state
		SREG=sreg;
    1408:	1f bf       	out	0x3f, r17	; 63
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	08 95       	ret

00001412 <_ZN19class_Display_7_Seg8EnableIOEv>:
//	| @INPUT   :  												                    |
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::EnableIO()
{
    1412:	cf 93       	push	r28
		//save SREG
		uint8_t sreg=SREG;
    1414:	cf b7       	in	r28, 0x3f	; 63
		//disable interrupts
		cli();
    1416:	f8 94       	cli
		//restore hardware ports state
		//KeysInitialize();
		DisplaysInitialize();
    1418:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN19class_Display_7_Seg18DisplaysInitializeEv>
		//MotorInitialize();
		
		//_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR	|=(1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT);
		
		//restore SREG state
		SREG=sreg;
    141c:	cf bf       	out	0x3f, r28	; 63
}
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <_ZN19class_Display_7_Seg13MotorGetStateEv>:
//	| @OUTPUT  :									                                |
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
bool  class_Display_7_Seg::MotorGetState()
{
	if ((_FEED_TIMER_DISP_7_SEG_MOTOR_PORT_DIR & (1<<_FEED_TIMER_DISP_7_SEG_MOTOR_BIT))==0)
    1422:	87 b1       	in	r24, 0x07	; 7
	}
	else
	{
		return true;
	}
}
    1424:	82 95       	swap	r24
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	08 95       	ret

0000142a <_ZN19class_Display_7_Seg17SetSecondCallBackEPFvvE>:
//	| @REMARKS :																	|
//	+-------------------------------------------------------------------------------+
void	class_Display_7_Seg::SetSecondCallBack(void (*SecondCallBack)(void))
{
	//Set call back function 
	_Display_7_Seg.SecondCallBack=SecondCallBack;
    142a:	70 93 49 03 	sts	0x0349, r23
    142e:	60 93 48 03 	sts	0x0348, r22
    1432:	08 95       	ret

00001434 <_GLOBAL__sub_I__Display_7_Seg>:
/*
 +--------------------------------------+
 |        STRUCTS               	 	|
 +--------------------------------------+
*/
struct _FEED_TIMER_DISP_7_SEG_Struct
    1434:	e1 e4       	ldi	r30, 0x41	; 65
    1436:	f3 e0       	ldi	r31, 0x03	; 3
    1438:	10 82       	st	Z, r1
    143a:	15 82       	std	Z+5, r1	; 0x05
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	86 83       	std	Z+6, r24	; 0x06
    1440:	10 86       	std	Z+8, r1	; 0x08
    1442:	17 82       	std	Z+7, r1	; 0x07
    1444:	08 95       	ret

00001446 <_Z14_timeInterruptv>:
//	| REMARKS :  to used callback function define a routine following format                |
//  |            callback(uint8_t Hour,uint8_t Minute,uint8_t Second);                      |
//	+---------------------------------------------------------------------------------------+
void   _timeInterrupt()
{
    if (_time.InterruptInUse)
    1446:	80 91 51 03 	lds	r24, 0x0351
    144a:	88 23       	and	r24, r24
    144c:	39 f0       	breq	.+14     	; 0x145c <_Z14_timeInterruptv+0x16>
    {
        if (_time.TimeInterruptCallBack!=nullptr) _time.TimeInterruptCallBack();
    144e:	e0 91 5d 03 	lds	r30, 0x035D
    1452:	f0 91 5e 03 	lds	r31, 0x035E
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	09 f0       	breq	.+2      	; 0x145c <_Z14_timeInterruptv+0x16>
    145a:	09 94       	ijmp
    145c:	08 95       	ret

0000145e <_Z10_timeClockv>:
//	|			 this callback function if activated is called 10 times per second			|
//	+---------------------------------------------------------------------------------------+
void    _timeClock()
{
    //check if on
    if (_time.TimeInUse)
    145e:	80 91 50 03 	lds	r24, 0x0350
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <_Z10_timeClockv+0xa>
    1466:	4d c0       	rjmp	.+154    	; 0x1502 <_Z10_timeClockv+0xa4>
    {
        //Time to pump Time?
        _time.Milliseconds++;
    1468:	80 91 4d 03 	lds	r24, 0x034D
    146c:	90 91 4e 03 	lds	r25, 0x034E
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	90 93 4e 03 	sts	0x034E, r25
    1476:	80 93 4d 03 	sts	0x034D, r24
        if (_time.Milliseconds<TIME_TIMER_FREQ/10) return;
    147a:	80 91 4d 03 	lds	r24, 0x034D
    147e:	90 91 4e 03 	lds	r25, 0x034E
    1482:	8d 37       	cpi	r24, 0x7D	; 125
    1484:	91 05       	cpc	r25, r1
    1486:	e8 f1       	brcs	.+122    	; 0x1502 <_Z10_timeClockv+0xa4>
        //clear timer pump
        _time.Milliseconds=0;
    1488:	10 92 4e 03 	sts	0x034E, r1
    148c:	10 92 4d 03 	sts	0x034D, r1
        //tenth of seconds
        _time.Tenth++;
    1490:	80 91 4f 03 	lds	r24, 0x034F
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	80 93 4f 03 	sts	0x034F, r24
        if (_time.Tenth>9)
    149a:	80 91 4f 03 	lds	r24, 0x034F
    149e:	8a 30       	cpi	r24, 0x0A	; 10
    14a0:	18 f1       	brcs	.+70     	; 0x14e8 <_Z10_timeClockv+0x8a>
        {
            _time.Tenth=0;
    14a2:	10 92 4f 03 	sts	0x034F, r1
            //yes, pump Seconds
            _time.Second++;
    14a6:	80 91 4c 03 	lds	r24, 0x034C
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	80 93 4c 03 	sts	0x034C, r24
            if (_time.Second>59)
    14b0:	80 91 4c 03 	lds	r24, 0x034C
    14b4:	8c 33       	cpi	r24, 0x3C	; 60
    14b6:	c0 f0       	brcs	.+48     	; 0x14e8 <_Z10_timeClockv+0x8a>
            {
                //yes, pump Minutes clear second
                _time.Second=0;
    14b8:	10 92 4c 03 	sts	0x034C, r1
                _time.Minute++;
    14bc:	80 91 4b 03 	lds	r24, 0x034B
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	80 93 4b 03 	sts	0x034B, r24
                if (_time.Minute>59)
    14c6:	80 91 4b 03 	lds	r24, 0x034B
    14ca:	8c 33       	cpi	r24, 0x3C	; 60
    14cc:	68 f0       	brcs	.+26     	; 0x14e8 <_Z10_timeClockv+0x8a>
                {
                    //yes, pump Hours clear Minute
                    _time.Minute=0;
    14ce:	10 92 4b 03 	sts	0x034B, r1
                    _time.Hour++;
    14d2:	80 91 4a 03 	lds	r24, 0x034A
    14d6:	8f 5f       	subi	r24, 0xFF	; 255
    14d8:	80 93 4a 03 	sts	0x034A, r24
                    if (_time.Hour>23) _time.Hour=0;
    14dc:	80 91 4a 03 	lds	r24, 0x034A
    14e0:	88 31       	cpi	r24, 0x18	; 24
    14e2:	10 f0       	brcs	.+4      	; 0x14e8 <_Z10_timeClockv+0x8a>
    14e4:	10 92 4a 03 	sts	0x034A, r1
                }
            }
        }
        //callback function giving to defined routine parms hour,min,second (updated each second)
        if (_time.TimeClockCallBack!=nullptr) _time.TimeClockCallBack(_time.Hour,_time.Minute,_time.Second);
    14e8:	e0 91 5b 03 	lds	r30, 0x035B
    14ec:	f0 91 5c 03 	lds	r31, 0x035C
    14f0:	30 97       	sbiw	r30, 0x00	; 0
    14f2:	39 f0       	breq	.+14     	; 0x1502 <_Z10_timeClockv+0xa4>
    14f4:	40 91 4c 03 	lds	r20, 0x034C
    14f8:	60 91 4b 03 	lds	r22, 0x034B
    14fc:	80 91 4a 03 	lds	r24, 0x034A
    1500:	09 94       	ijmp
    1502:	08 95       	ret

00001504 <_ZN10class_Time10InitializeEv>:
void class_Time::Initialize()
{
    unsigned char sreg;

    //Save SREG
    sreg=SREG;
    1504:	9f b7       	in	r25, 0x3f	; 63
    //Disable Interrupts
    cli();
    1506:	f8 94       	cli
		TCNT0=0;
		//enable timer compare A interrupt
		TIMSK|=(1<<OCIE0);
	#elif defined(_AVR_IOM328P_H_)
		//WGM02=0;WGM01=1;WGM00=0 MODE CTC
		TCCR0A&=~(1<<WGM00);
    1508:	84 b5       	in	r24, 0x24	; 36
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	84 bd       	out	0x24, r24	; 36
		TCCR0A|=(1<<WGM01);
    150e:	84 b5       	in	r24, 0x24	; 36
    1510:	82 60       	ori	r24, 0x02	; 2
    1512:	84 bd       	out	0x24, r24	; 36
		TCCR0B&=~(1<<WGM02);
    1514:	85 b5       	in	r24, 0x25	; 37
    1516:	87 7f       	andi	r24, 0xF7	; 247
    1518:	85 bd       	out	0x25, r24	; 37
		//CS02=0;CS01=1;CS00=0 clock divided by 8 altered in this software normal 256
		TCCR0B|=(1<<CS01);
    151a:	85 b5       	in	r24, 0x25	; 37
    151c:	82 60       	ori	r24, 0x02	; 2
    151e:	85 bd       	out	0x25, r24	; 37
		TCCR0B&=~((1<<CS02)|(1<<CS00));
    1520:	85 b5       	in	r24, 0x25	; 37
    1522:	8a 7f       	andi	r24, 0xFA	; 250
    1524:	85 bd       	out	0x25, r24	; 37
		//program divisor
		OCR0A=(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ)-1;
    1526:	83 e6       	ldi	r24, 0x63	; 99
    1528:	87 bd       	out	0x27, r24	; 39
		TCNT0=0;
    152a:	16 bc       	out	0x26, r1	; 38
		//enable timer compare A interrupt
		TIMSK0|=(1<<OCIE0A);
    152c:	ee e6       	ldi	r30, 0x6E	; 110
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	80 83       	st	Z, r24
	#elif defined(_AVR_IOM328P_H_)
	#elif defined(_AVR_IOM8_H_)
	#endif
#endif		
    //Restore Interrupts
    SREG=sreg;
    1536:	9f bf       	out	0x3f, r25	; 63
    1538:	08 95       	ret

0000153a <_ZN10class_TimeC1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_Time::class_Time()
    153a:	cf 93       	push	r28
{
	unsigned char sreg;

    //save SREG
	sreg=SREG;
    153c:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
	cli();
    153e:	f8 94       	cli
    //Check if already Initialized
    if (_time.Initialized==false)
    1540:	20 91 52 03 	lds	r18, 0x0352
    1544:	21 11       	cpse	r18, r1
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <_ZN10class_TimeC1Ev+0x18>
    {
        //set initialized
        _time.Initialized=true;
    1548:	21 e0       	ldi	r18, 0x01	; 1
    154a:	20 93 52 03 	sts	0x0352, r18
        //Initialize
        Initialize();
    154e:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN10class_Time10InitializeEv>
    }
    
    //Restore SREG state
	SREG=sreg;
    1552:	cf bf       	out	0x3f, r28	; 63
}
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <__vector_14>:
		    _timeInterrupt();
		    _timeClock();
        }
    #elif defined(_AVR_IOM328P_H_)
        ISR(TIMER0_COMPA_vect)
        {
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
		    //enable interrupts to permit that other pending interrupts is executed more fast as possible
		    sei();		
    157a:	78 94       	sei
            _time.TimerTick+=TIME_1MS;
    157c:	ea e4       	ldi	r30, 0x4A	; 74
    157e:	f3 e0       	ldi	r31, 0x03	; 3
    1580:	21 85       	ldd	r18, Z+9	; 0x09
    1582:	32 85       	ldd	r19, Z+10	; 0x0a
    1584:	43 85       	ldd	r20, Z+11	; 0x0b
    1586:	54 85       	ldd	r21, Z+12	; 0x0c
    1588:	65 85       	ldd	r22, Z+13	; 0x0d
    158a:	76 85       	ldd	r23, Z+14	; 0x0e
    158c:	87 85       	ldd	r24, Z+15	; 0x0f
    158e:	90 89       	ldd	r25, Z+16	; 0x10
    1590:	24 53       	subi	r18, 0x34	; 52
    1592:	33 43       	sbci	r19, 0x33	; 51
    1594:	43 43       	sbci	r20, 0x33	; 51
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	6f 4f       	sbci	r22, 0xFF	; 255
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	21 87       	std	Z+9, r18	; 0x09
    15a2:	32 87       	std	Z+10, r19	; 0x0a
    15a4:	43 87       	std	Z+11, r20	; 0x0b
    15a6:	54 87       	std	Z+12, r21	; 0x0c
    15a8:	65 87       	std	Z+13, r22	; 0x0d
    15aa:	76 87       	std	Z+14, r23	; 0x0e
    15ac:	87 87       	std	Z+15, r24	; 0x0f
    15ae:	90 8b       	std	Z+16, r25	; 0x10
		    _timeInterrupt();
    15b0:	0e 94 23 0a 	call	0x1446	; 0x1446 <_Z14_timeInterruptv>
            _timeClock();
    15b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <_Z10_timeClockv>
        }
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <_ZN10class_Time15GetMillisecondsEv>:
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetMilliseconds()
{
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
    15de:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    15e0:	60 91 56 03 	lds	r22, 0x0356
    15e4:	70 91 57 03 	lds	r23, 0x0357
    15e8:	80 91 58 03 	lds	r24, 0x0358
    15ec:	90 91 59 03 	lds	r25, 0x0359
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
            tmp1=GetTimeTick();
            sei();
    15f0:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    15f2:	00 91 56 03 	lds	r16, 0x0356
    15f6:	10 91 57 03 	lds	r17, 0x0357
    15fa:	20 91 58 03 	lds	r18, 0x0358
    15fe:	30 91 59 03 	lds	r19, 0x0359

uint32_t class_Time::GetMilliseconds()
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
    1602:	60 17       	cp	r22, r16
    1604:	71 07       	cpc	r23, r17
    1606:	82 07       	cpc	r24, r18
    1608:	93 07       	cpc	r25, r19
    160a:	49 f7       	brne	.-46     	; 0x15de <_ZN10class_Time15GetMillisecondsEv+0x4>
            sei();
            tmp2=GetTimeTick();
        } while (tmp1!=tmp2);
        //return tick value
        return tmp2;
}
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <_ZN10class_Time10SetElapsedEPm>:
//	| INPUT   :  -> tickTimerVariable					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::SetElapsed(uint32_t * timeVariable)
{
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	eb 01       	movw	r28, r22
	*timeVariable=GetMilliseconds();
    1618:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN10class_Time15GetMillisecondsEv>
    161c:	68 83       	st	Y, r22
    161e:	79 83       	std	Y+1, r23	; 0x01
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	9b 83       	std	Y+3, r25	; 0x03
}
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <_ZN10class_Time10GetElapsedEPm>:
//	| INPUT   :  * tickTimerVariable					                            |
//	| OUTPUT  :  Elapsed time in ticks					                            |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
uint32_t class_Time::GetElapsed(uint32_t * timeVariable)
{
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	eb 01       	movw	r28, r22
	return (GetMilliseconds()-*timeVariable);				//Get difference between actual tick and save tick
    1634:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN10class_Time15GetMillisecondsEv>
    1638:	08 81       	ld	r16, Y
    163a:	19 81       	ldd	r17, Y+1	; 0x01
    163c:	2a 81       	ldd	r18, Y+2	; 0x02
    163e:	3b 81       	ldd	r19, Y+3	; 0x03
    1640:	60 1b       	sub	r22, r16
    1642:	71 0b       	sbc	r23, r17
    1644:	82 0b       	sbc	r24, r18
    1646:	93 0b       	sbc	r25, r19
}
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <_ZN10class_Time8DelayMsIEm>:
//	| INPUT   :  timeMs in milliseconds					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::DelayMsI(uint32_t timeMs)
{
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
    166c:	6a 01       	movw	r12, r20
    166e:	7b 01       	movw	r14, r22
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
    1670:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN10class_Time15GetMillisecondsEv>
    1674:	4b 01       	movw	r8, r22
    1676:	5c 01       	movw	r10, r24
	do{
		tmp2=GetMilliseconds();
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN10class_Time15GetMillisecondsEv>
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
    167e:	8b 01       	movw	r16, r22
    1680:	9c 01       	movw	r18, r24
    1682:	08 19       	sub	r16, r8
    1684:	19 09       	sbc	r17, r9
    1686:	2a 09       	sbc	r18, r10
    1688:	3b 09       	sbc	r19, r11
void	class_Time::DelayMsI(uint32_t timeMs)
{
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             						//get actual tick value
	do{
    168a:	0c 15       	cp	r16, r12
    168c:	1d 05       	cpc	r17, r13
    168e:	2e 05       	cpc	r18, r14
    1690:	3f 05       	cpc	r19, r15
    1692:	90 f3       	brcs	.-28     	; 0x1678 <_ZN10class_Time8DelayMsIEm+0x26>
		tmp2=GetMilliseconds();
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	bf 90       	pop	r11
    16a6:	af 90       	pop	r10
    16a8:	9f 90       	pop	r9
    16aa:	8f 90       	pop	r8
    16ac:	08 95       	ret

000016ae <_ZN10class_Time24SetTimeInterruptCallbackEPFvvE>:
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetTimeInterruptCallback(void (*TimeInterruptCallback)(void))
{
	//avoid routines that get more than 720uS long to execute
	_time.TimeInterruptCallBack=TimeInterruptCallback;
    16ae:	70 93 5e 03 	sts	0x035E, r23
    16b2:	60 93 5d 03 	sts	0x035D, r22
    16b6:	08 95       	ret

000016b8 <_ZN10class_Time17SetInterruptStateEb>:
//	| OUTPUT  :                                                                     |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void    class_Time::SetInterruptState(bool inUse=false)
{
	_time.InterruptInUse=inUse;
    16b8:	60 93 51 03 	sts	0x0351, r22
    16bc:	08 95       	ret

000016be <__umulhisi3>:
    16be:	a2 9f       	mul	r26, r18
    16c0:	b0 01       	movw	r22, r0
    16c2:	b3 9f       	mul	r27, r19
    16c4:	c0 01       	movw	r24, r0
    16c6:	a3 9f       	mul	r26, r19
    16c8:	70 0d       	add	r23, r0
    16ca:	81 1d       	adc	r24, r1
    16cc:	11 24       	eor	r1, r1
    16ce:	91 1d       	adc	r25, r1
    16d0:	b2 9f       	mul	r27, r18
    16d2:	70 0d       	add	r23, r0
    16d4:	81 1d       	adc	r24, r1
    16d6:	11 24       	eor	r1, r1
    16d8:	91 1d       	adc	r25, r1
    16da:	08 95       	ret

000016dc <__tablejump2__>:
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	05 90       	lpm	r0, Z+
    16e2:	f4 91       	lpm	r31, Z
    16e4:	e0 2d       	mov	r30, r0
    16e6:	09 94       	ijmp

000016e8 <memcmp>:
    16e8:	fb 01       	movw	r30, r22
    16ea:	dc 01       	movw	r26, r24
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <memcmp+0xe>
    16ee:	8d 91       	ld	r24, X+
    16f0:	01 90       	ld	r0, Z+
    16f2:	80 19       	sub	r24, r0
    16f4:	21 f4       	brne	.+8      	; 0x16fe <memcmp+0x16>
    16f6:	41 50       	subi	r20, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	c8 f7       	brcc	.-14     	; 0x16ee <memcmp+0x6>
    16fc:	88 1b       	sub	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	08 95       	ret

00001702 <sprintf>:
    1702:	ae e0       	ldi	r26, 0x0E	; 14
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e8       	ldi	r30, 0x87	; 135
    1708:	fb e0       	ldi	r31, 0x0B	; 11
    170a:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__prologue_saves__+0x1c>
    170e:	0d 89       	ldd	r16, Y+21	; 0x15
    1710:	1e 89       	ldd	r17, Y+22	; 0x16
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	8c 83       	std	Y+4, r24	; 0x04
    1716:	1a 83       	std	Y+2, r17	; 0x02
    1718:	09 83       	std	Y+1, r16	; 0x01
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f e7       	ldi	r25, 0x7F	; 127
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	ae 01       	movw	r20, r28
    1724:	47 5e       	subi	r20, 0xE7	; 231
    1726:	5f 4f       	sbci	r21, 0xFF	; 255
    1728:	6f 89       	ldd	r22, Y+23	; 0x17
    172a:	78 8d       	ldd	r23, Y+24	; 0x18
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 a4 0b 	call	0x1748	; 0x1748 <vfprintf>
    1734:	2f 81       	ldd	r18, Y+7	; 0x07
    1736:	38 85       	ldd	r19, Y+8	; 0x08
    1738:	f8 01       	movw	r30, r16
    173a:	e2 0f       	add	r30, r18
    173c:	f3 1f       	adc	r31, r19
    173e:	10 82       	st	Z, r1
    1740:	2e 96       	adiw	r28, 0x0e	; 14
    1742:	e4 e0       	ldi	r30, 0x04	; 4
    1744:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__epilogue_restores__+0x1c>

00001748 <vfprintf>:
    1748:	ac e0       	ldi	r26, 0x0C	; 12
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ea ea       	ldi	r30, 0xAA	; 170
    174e:	fb e0       	ldi	r31, 0x0B	; 11
    1750:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__prologue_saves__>
    1754:	7c 01       	movw	r14, r24
    1756:	6b 01       	movw	r12, r22
    1758:	8a 01       	movw	r16, r20
    175a:	fc 01       	movw	r30, r24
    175c:	17 82       	std	Z+7, r1	; 0x07
    175e:	16 82       	std	Z+6, r1	; 0x06
    1760:	83 81       	ldd	r24, Z+3	; 0x03
    1762:	81 ff       	sbrs	r24, 1
    1764:	bd c1       	rjmp	.+890    	; 0x1ae0 <vfprintf+0x398>
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	4c 01       	movw	r8, r24
    176c:	f7 01       	movw	r30, r14
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	f6 01       	movw	r30, r12
    1772:	93 fd       	sbrc	r25, 3
    1774:	85 91       	lpm	r24, Z+
    1776:	93 ff       	sbrs	r25, 3
    1778:	81 91       	ld	r24, Z+
    177a:	6f 01       	movw	r12, r30
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <vfprintf+0x3a>
    1780:	ab c1       	rjmp	.+854    	; 0x1ad8 <vfprintf+0x390>
    1782:	85 32       	cpi	r24, 0x25	; 37
    1784:	39 f4       	brne	.+14     	; 0x1794 <vfprintf+0x4c>
    1786:	93 fd       	sbrc	r25, 3
    1788:	85 91       	lpm	r24, Z+
    178a:	93 ff       	sbrs	r25, 3
    178c:	81 91       	ld	r24, Z+
    178e:	6f 01       	movw	r12, r30
    1790:	85 32       	cpi	r24, 0x25	; 37
    1792:	29 f4       	brne	.+10     	; 0x179e <vfprintf+0x56>
    1794:	b7 01       	movw	r22, r14
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    179c:	e7 cf       	rjmp	.-50     	; 0x176c <vfprintf+0x24>
    179e:	51 2c       	mov	r5, r1
    17a0:	31 2c       	mov	r3, r1
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	20 32       	cpi	r18, 0x20	; 32
    17a6:	a0 f4       	brcc	.+40     	; 0x17d0 <vfprintf+0x88>
    17a8:	8b 32       	cpi	r24, 0x2B	; 43
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <vfprintf+0x7e>
    17ac:	30 f4       	brcc	.+12     	; 0x17ba <vfprintf+0x72>
    17ae:	80 32       	cpi	r24, 0x20	; 32
    17b0:	59 f0       	breq	.+22     	; 0x17c8 <vfprintf+0x80>
    17b2:	83 32       	cpi	r24, 0x23	; 35
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <vfprintf+0x88>
    17b6:	20 61       	ori	r18, 0x10	; 16
    17b8:	2c c0       	rjmp	.+88     	; 0x1812 <vfprintf+0xca>
    17ba:	8d 32       	cpi	r24, 0x2D	; 45
    17bc:	39 f0       	breq	.+14     	; 0x17cc <vfprintf+0x84>
    17be:	80 33       	cpi	r24, 0x30	; 48
    17c0:	39 f4       	brne	.+14     	; 0x17d0 <vfprintf+0x88>
    17c2:	21 60       	ori	r18, 0x01	; 1
    17c4:	26 c0       	rjmp	.+76     	; 0x1812 <vfprintf+0xca>
    17c6:	22 60       	ori	r18, 0x02	; 2
    17c8:	24 60       	ori	r18, 0x04	; 4
    17ca:	23 c0       	rjmp	.+70     	; 0x1812 <vfprintf+0xca>
    17cc:	28 60       	ori	r18, 0x08	; 8
    17ce:	21 c0       	rjmp	.+66     	; 0x1812 <vfprintf+0xca>
    17d0:	27 fd       	sbrc	r18, 7
    17d2:	27 c0       	rjmp	.+78     	; 0x1822 <vfprintf+0xda>
    17d4:	30 ed       	ldi	r19, 0xD0	; 208
    17d6:	38 0f       	add	r19, r24
    17d8:	3a 30       	cpi	r19, 0x0A	; 10
    17da:	78 f4       	brcc	.+30     	; 0x17fa <vfprintf+0xb2>
    17dc:	26 ff       	sbrs	r18, 6
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0xa4>
    17e0:	fa e0       	ldi	r31, 0x0A	; 10
    17e2:	5f 9e       	mul	r5, r31
    17e4:	30 0d       	add	r19, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	53 2e       	mov	r5, r19
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <vfprintf+0xca>
    17ec:	8a e0       	ldi	r24, 0x0A	; 10
    17ee:	38 9e       	mul	r3, r24
    17f0:	30 0d       	add	r19, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	33 2e       	mov	r3, r19
    17f6:	20 62       	ori	r18, 0x20	; 32
    17f8:	0c c0       	rjmp	.+24     	; 0x1812 <vfprintf+0xca>
    17fa:	8e 32       	cpi	r24, 0x2E	; 46
    17fc:	21 f4       	brne	.+8      	; 0x1806 <vfprintf+0xbe>
    17fe:	26 fd       	sbrc	r18, 6
    1800:	6b c1       	rjmp	.+726    	; 0x1ad8 <vfprintf+0x390>
    1802:	20 64       	ori	r18, 0x40	; 64
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <vfprintf+0xca>
    1806:	8c 36       	cpi	r24, 0x6C	; 108
    1808:	11 f4       	brne	.+4      	; 0x180e <vfprintf+0xc6>
    180a:	20 68       	ori	r18, 0x80	; 128
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <vfprintf+0xca>
    180e:	88 36       	cpi	r24, 0x68	; 104
    1810:	41 f4       	brne	.+16     	; 0x1822 <vfprintf+0xda>
    1812:	f6 01       	movw	r30, r12
    1814:	93 fd       	sbrc	r25, 3
    1816:	85 91       	lpm	r24, Z+
    1818:	93 ff       	sbrs	r25, 3
    181a:	81 91       	ld	r24, Z+
    181c:	6f 01       	movw	r12, r30
    181e:	81 11       	cpse	r24, r1
    1820:	c1 cf       	rjmp	.-126    	; 0x17a4 <vfprintf+0x5c>
    1822:	98 2f       	mov	r25, r24
    1824:	9f 7d       	andi	r25, 0xDF	; 223
    1826:	95 54       	subi	r25, 0x45	; 69
    1828:	93 30       	cpi	r25, 0x03	; 3
    182a:	28 f4       	brcc	.+10     	; 0x1836 <vfprintf+0xee>
    182c:	0c 5f       	subi	r16, 0xFC	; 252
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	ff e3       	ldi	r31, 0x3F	; 63
    1832:	f9 83       	std	Y+1, r31	; 0x01
    1834:	0d c0       	rjmp	.+26     	; 0x1850 <vfprintf+0x108>
    1836:	83 36       	cpi	r24, 0x63	; 99
    1838:	31 f0       	breq	.+12     	; 0x1846 <vfprintf+0xfe>
    183a:	83 37       	cpi	r24, 0x73	; 115
    183c:	71 f0       	breq	.+28     	; 0x185a <vfprintf+0x112>
    183e:	83 35       	cpi	r24, 0x53	; 83
    1840:	09 f0       	breq	.+2      	; 0x1844 <vfprintf+0xfc>
    1842:	5b c0       	rjmp	.+182    	; 0x18fa <vfprintf+0x1b2>
    1844:	22 c0       	rjmp	.+68     	; 0x188a <vfprintf+0x142>
    1846:	f8 01       	movw	r30, r16
    1848:	80 81       	ld	r24, Z
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	0e 5f       	subi	r16, 0xFE	; 254
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	44 24       	eor	r4, r4
    1852:	43 94       	inc	r4
    1854:	51 2c       	mov	r5, r1
    1856:	54 01       	movw	r10, r8
    1858:	15 c0       	rjmp	.+42     	; 0x1884 <vfprintf+0x13c>
    185a:	38 01       	movw	r6, r16
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	6f 0e       	add	r6, r31
    1860:	71 1c       	adc	r7, r1
    1862:	f8 01       	movw	r30, r16
    1864:	a0 80       	ld	r10, Z
    1866:	b1 80       	ldd	r11, Z+1	; 0x01
    1868:	26 ff       	sbrs	r18, 6
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <vfprintf+0x12a>
    186c:	65 2d       	mov	r22, r5
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0x12e>
    1872:	6f ef       	ldi	r22, 0xFF	; 255
    1874:	7f ef       	ldi	r23, 0xFF	; 255
    1876:	c5 01       	movw	r24, r10
    1878:	2c 87       	std	Y+12, r18	; 0x0c
    187a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <strnlen>
    187e:	2c 01       	movw	r4, r24
    1880:	83 01       	movw	r16, r6
    1882:	2c 85       	ldd	r18, Y+12	; 0x0c
    1884:	2f 77       	andi	r18, 0x7F	; 127
    1886:	22 2e       	mov	r2, r18
    1888:	17 c0       	rjmp	.+46     	; 0x18b8 <vfprintf+0x170>
    188a:	38 01       	movw	r6, r16
    188c:	f2 e0       	ldi	r31, 0x02	; 2
    188e:	6f 0e       	add	r6, r31
    1890:	71 1c       	adc	r7, r1
    1892:	f8 01       	movw	r30, r16
    1894:	a0 80       	ld	r10, Z
    1896:	b1 80       	ldd	r11, Z+1	; 0x01
    1898:	26 ff       	sbrs	r18, 6
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <vfprintf+0x15a>
    189c:	65 2d       	mov	r22, r5
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0x15e>
    18a2:	6f ef       	ldi	r22, 0xFF	; 255
    18a4:	7f ef       	ldi	r23, 0xFF	; 255
    18a6:	c5 01       	movw	r24, r10
    18a8:	2c 87       	std	Y+12, r18	; 0x0c
    18aa:	0e 94 76 0d 	call	0x1aec	; 0x1aec <strnlen_P>
    18ae:	2c 01       	movw	r4, r24
    18b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b2:	20 68       	ori	r18, 0x80	; 128
    18b4:	22 2e       	mov	r2, r18
    18b6:	83 01       	movw	r16, r6
    18b8:	23 fc       	sbrc	r2, 3
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <vfprintf+0x1aa>
    18bc:	83 2d       	mov	r24, r3
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	48 16       	cp	r4, r24
    18c2:	59 06       	cpc	r5, r25
    18c4:	b0 f4       	brcc	.+44     	; 0x18f2 <vfprintf+0x1aa>
    18c6:	b7 01       	movw	r22, r14
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    18d0:	3a 94       	dec	r3
    18d2:	f4 cf       	rjmp	.-24     	; 0x18bc <vfprintf+0x174>
    18d4:	f5 01       	movw	r30, r10
    18d6:	27 fc       	sbrc	r2, 7
    18d8:	85 91       	lpm	r24, Z+
    18da:	27 fe       	sbrs	r2, 7
    18dc:	81 91       	ld	r24, Z+
    18de:	5f 01       	movw	r10, r30
    18e0:	b7 01       	movw	r22, r14
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    18e8:	31 10       	cpse	r3, r1
    18ea:	3a 94       	dec	r3
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	4f 1a       	sub	r4, r31
    18f0:	51 08       	sbc	r5, r1
    18f2:	41 14       	cp	r4, r1
    18f4:	51 04       	cpc	r5, r1
    18f6:	71 f7       	brne	.-36     	; 0x18d4 <vfprintf+0x18c>
    18f8:	e5 c0       	rjmp	.+458    	; 0x1ac4 <vfprintf+0x37c>
    18fa:	84 36       	cpi	r24, 0x64	; 100
    18fc:	11 f0       	breq	.+4      	; 0x1902 <vfprintf+0x1ba>
    18fe:	89 36       	cpi	r24, 0x69	; 105
    1900:	39 f5       	brne	.+78     	; 0x1950 <vfprintf+0x208>
    1902:	f8 01       	movw	r30, r16
    1904:	27 ff       	sbrs	r18, 7
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <vfprintf+0x1ce>
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	08 c0       	rjmp	.+16     	; 0x1926 <vfprintf+0x1de>
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	07 2e       	mov	r0, r23
    191c:	00 0c       	add	r0, r0
    191e:	88 0b       	sbc	r24, r24
    1920:	99 0b       	sbc	r25, r25
    1922:	0e 5f       	subi	r16, 0xFE	; 254
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	2f 76       	andi	r18, 0x6F	; 111
    1928:	72 2e       	mov	r7, r18
    192a:	97 ff       	sbrs	r25, 7
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x1f8>
    192e:	90 95       	com	r25
    1930:	80 95       	com	r24
    1932:	70 95       	com	r23
    1934:	61 95       	neg	r22
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	20 68       	ori	r18, 0x80	; 128
    193e:	72 2e       	mov	r7, r18
    1940:	2a e0       	ldi	r18, 0x0A	; 10
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	a4 01       	movw	r20, r8
    1946:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__ultoa_invert>
    194a:	a8 2e       	mov	r10, r24
    194c:	a8 18       	sub	r10, r8
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <vfprintf+0x290>
    1950:	85 37       	cpi	r24, 0x75	; 117
    1952:	29 f4       	brne	.+10     	; 0x195e <vfprintf+0x216>
    1954:	2f 7e       	andi	r18, 0xEF	; 239
    1956:	b2 2e       	mov	r11, r18
    1958:	2a e0       	ldi	r18, 0x0A	; 10
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	25 c0       	rjmp	.+74     	; 0x19a8 <vfprintf+0x260>
    195e:	f2 2f       	mov	r31, r18
    1960:	f9 7f       	andi	r31, 0xF9	; 249
    1962:	bf 2e       	mov	r11, r31
    1964:	8f 36       	cpi	r24, 0x6F	; 111
    1966:	c1 f0       	breq	.+48     	; 0x1998 <vfprintf+0x250>
    1968:	18 f4       	brcc	.+6      	; 0x1970 <vfprintf+0x228>
    196a:	88 35       	cpi	r24, 0x58	; 88
    196c:	79 f0       	breq	.+30     	; 0x198c <vfprintf+0x244>
    196e:	b4 c0       	rjmp	.+360    	; 0x1ad8 <vfprintf+0x390>
    1970:	80 37       	cpi	r24, 0x70	; 112
    1972:	19 f0       	breq	.+6      	; 0x197a <vfprintf+0x232>
    1974:	88 37       	cpi	r24, 0x78	; 120
    1976:	21 f0       	breq	.+8      	; 0x1980 <vfprintf+0x238>
    1978:	af c0       	rjmp	.+350    	; 0x1ad8 <vfprintf+0x390>
    197a:	2f 2f       	mov	r18, r31
    197c:	20 61       	ori	r18, 0x10	; 16
    197e:	b2 2e       	mov	r11, r18
    1980:	b4 fe       	sbrs	r11, 4
    1982:	0d c0       	rjmp	.+26     	; 0x199e <vfprintf+0x256>
    1984:	8b 2d       	mov	r24, r11
    1986:	84 60       	ori	r24, 0x04	; 4
    1988:	b8 2e       	mov	r11, r24
    198a:	09 c0       	rjmp	.+18     	; 0x199e <vfprintf+0x256>
    198c:	24 ff       	sbrs	r18, 4
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <vfprintf+0x25c>
    1990:	9f 2f       	mov	r25, r31
    1992:	96 60       	ori	r25, 0x06	; 6
    1994:	b9 2e       	mov	r11, r25
    1996:	06 c0       	rjmp	.+12     	; 0x19a4 <vfprintf+0x25c>
    1998:	28 e0       	ldi	r18, 0x08	; 8
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <vfprintf+0x260>
    199e:	20 e1       	ldi	r18, 0x10	; 16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vfprintf+0x260>
    19a4:	20 e1       	ldi	r18, 0x10	; 16
    19a6:	32 e0       	ldi	r19, 0x02	; 2
    19a8:	f8 01       	movw	r30, r16
    19aa:	b7 fe       	sbrs	r11, 7
    19ac:	07 c0       	rjmp	.+14     	; 0x19bc <vfprintf+0x274>
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	0c 5f       	subi	r16, 0xFC	; 252
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x280>
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 5f       	subi	r16, 0xFE	; 254
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	a4 01       	movw	r20, r8
    19ca:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__ultoa_invert>
    19ce:	a8 2e       	mov	r10, r24
    19d0:	a8 18       	sub	r10, r8
    19d2:	fb 2d       	mov	r31, r11
    19d4:	ff 77       	andi	r31, 0x7F	; 127
    19d6:	7f 2e       	mov	r7, r31
    19d8:	76 fe       	sbrs	r7, 6
    19da:	0b c0       	rjmp	.+22     	; 0x19f2 <vfprintf+0x2aa>
    19dc:	37 2d       	mov	r19, r7
    19de:	3e 7f       	andi	r19, 0xFE	; 254
    19e0:	a5 14       	cp	r10, r5
    19e2:	50 f4       	brcc	.+20     	; 0x19f8 <vfprintf+0x2b0>
    19e4:	74 fe       	sbrs	r7, 4
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <vfprintf+0x2b4>
    19e8:	72 fc       	sbrc	r7, 2
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <vfprintf+0x2b4>
    19ec:	37 2d       	mov	r19, r7
    19ee:	3e 7e       	andi	r19, 0xEE	; 238
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <vfprintf+0x2b4>
    19f2:	ba 2c       	mov	r11, r10
    19f4:	37 2d       	mov	r19, r7
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <vfprintf+0x2b6>
    19f8:	ba 2c       	mov	r11, r10
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <vfprintf+0x2b6>
    19fc:	b5 2c       	mov	r11, r5
    19fe:	34 ff       	sbrs	r19, 4
    1a00:	0d c0       	rjmp	.+26     	; 0x1a1c <vfprintf+0x2d4>
    1a02:	fe 01       	movw	r30, r28
    1a04:	ea 0d       	add	r30, r10
    1a06:	f1 1d       	adc	r31, r1
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 33       	cpi	r24, 0x30	; 48
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <vfprintf+0x2ca>
    1a0e:	39 7e       	andi	r19, 0xE9	; 233
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <vfprintf+0x2dc>
    1a12:	32 ff       	sbrs	r19, 2
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <vfprintf+0x2da>
    1a16:	b3 94       	inc	r11
    1a18:	b3 94       	inc	r11
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <vfprintf+0x2dc>
    1a1c:	83 2f       	mov	r24, r19
    1a1e:	86 78       	andi	r24, 0x86	; 134
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <vfprintf+0x2dc>
    1a22:	b3 94       	inc	r11
    1a24:	33 fd       	sbrc	r19, 3
    1a26:	13 c0       	rjmp	.+38     	; 0x1a4e <vfprintf+0x306>
    1a28:	30 ff       	sbrs	r19, 0
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfprintf+0x2f0>
    1a2c:	5a 2c       	mov	r5, r10
    1a2e:	b3 14       	cp	r11, r3
    1a30:	18 f4       	brcc	.+6      	; 0x1a38 <vfprintf+0x2f0>
    1a32:	53 0c       	add	r5, r3
    1a34:	5b 18       	sub	r5, r11
    1a36:	b3 2c       	mov	r11, r3
    1a38:	b3 14       	cp	r11, r3
    1a3a:	68 f4       	brcc	.+26     	; 0x1a56 <vfprintf+0x30e>
    1a3c:	b7 01       	movw	r22, r14
    1a3e:	80 e2       	ldi	r24, 0x20	; 32
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	3c 87       	std	Y+12, r19	; 0x0c
    1a44:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1a48:	b3 94       	inc	r11
    1a4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a4c:	f5 cf       	rjmp	.-22     	; 0x1a38 <vfprintf+0x2f0>
    1a4e:	b3 14       	cp	r11, r3
    1a50:	10 f4       	brcc	.+4      	; 0x1a56 <vfprintf+0x30e>
    1a52:	3b 18       	sub	r3, r11
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <vfprintf+0x310>
    1a56:	31 2c       	mov	r3, r1
    1a58:	34 ff       	sbrs	r19, 4
    1a5a:	12 c0       	rjmp	.+36     	; 0x1a80 <vfprintf+0x338>
    1a5c:	b7 01       	movw	r22, r14
    1a5e:	80 e3       	ldi	r24, 0x30	; 48
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	3c 87       	std	Y+12, r19	; 0x0c
    1a64:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1a68:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a6a:	32 ff       	sbrs	r19, 2
    1a6c:	17 c0       	rjmp	.+46     	; 0x1a9c <vfprintf+0x354>
    1a6e:	31 fd       	sbrc	r19, 1
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <vfprintf+0x330>
    1a72:	88 e7       	ldi	r24, 0x78	; 120
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x334>
    1a78:	88 e5       	ldi	r24, 0x58	; 88
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	b7 01       	movw	r22, r14
    1a7e:	0c c0       	rjmp	.+24     	; 0x1a98 <vfprintf+0x350>
    1a80:	83 2f       	mov	r24, r19
    1a82:	86 78       	andi	r24, 0x86	; 134
    1a84:	59 f0       	breq	.+22     	; 0x1a9c <vfprintf+0x354>
    1a86:	31 ff       	sbrs	r19, 1
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <vfprintf+0x346>
    1a8a:	8b e2       	ldi	r24, 0x2B	; 43
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <vfprintf+0x348>
    1a8e:	80 e2       	ldi	r24, 0x20	; 32
    1a90:	37 fd       	sbrc	r19, 7
    1a92:	8d e2       	ldi	r24, 0x2D	; 45
    1a94:	b7 01       	movw	r22, r14
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1a9c:	a5 14       	cp	r10, r5
    1a9e:	38 f4       	brcc	.+14     	; 0x1aae <vfprintf+0x366>
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	80 e3       	ldi	r24, 0x30	; 48
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1aaa:	5a 94       	dec	r5
    1aac:	f7 cf       	rjmp	.-18     	; 0x1a9c <vfprintf+0x354>
    1aae:	aa 94       	dec	r10
    1ab0:	f4 01       	movw	r30, r8
    1ab2:	ea 0d       	add	r30, r10
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	80 81       	ld	r24, Z
    1ab8:	b7 01       	movw	r22, r14
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1ac0:	a1 10       	cpse	r10, r1
    1ac2:	f5 cf       	rjmp	.-22     	; 0x1aae <vfprintf+0x366>
    1ac4:	33 20       	and	r3, r3
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <vfprintf+0x382>
    1ac8:	51 ce       	rjmp	.-862    	; 0x176c <vfprintf+0x24>
    1aca:	b7 01       	movw	r22, r14
    1acc:	80 e2       	ldi	r24, 0x20	; 32
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <fputc>
    1ad4:	3a 94       	dec	r3
    1ad6:	f6 cf       	rjmp	.-20     	; 0x1ac4 <vfprintf+0x37c>
    1ad8:	f7 01       	movw	r30, r14
    1ada:	86 81       	ldd	r24, Z+6	; 0x06
    1adc:	97 81       	ldd	r25, Z+7	; 0x07
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0x39c>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	2c 96       	adiw	r28, 0x0c	; 12
    1ae6:	e2 e1       	ldi	r30, 0x12	; 18
    1ae8:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__epilogue_restores__>

00001aec <strnlen_P>:
    1aec:	fc 01       	movw	r30, r24
    1aee:	05 90       	lpm	r0, Z+
    1af0:	61 50       	subi	r22, 0x01	; 1
    1af2:	70 40       	sbci	r23, 0x00	; 0
    1af4:	01 10       	cpse	r0, r1
    1af6:	d8 f7       	brcc	.-10     	; 0x1aee <strnlen_P+0x2>
    1af8:	80 95       	com	r24
    1afa:	90 95       	com	r25
    1afc:	8e 0f       	add	r24, r30
    1afe:	9f 1f       	adc	r25, r31
    1b00:	08 95       	ret

00001b02 <strnlen>:
    1b02:	fc 01       	movw	r30, r24
    1b04:	61 50       	subi	r22, 0x01	; 1
    1b06:	70 40       	sbci	r23, 0x00	; 0
    1b08:	01 90       	ld	r0, Z+
    1b0a:	01 10       	cpse	r0, r1
    1b0c:	d8 f7       	brcc	.-10     	; 0x1b04 <strnlen+0x2>
    1b0e:	80 95       	com	r24
    1b10:	90 95       	com	r25
    1b12:	8e 0f       	add	r24, r30
    1b14:	9f 1f       	adc	r25, r31
    1b16:	08 95       	ret

00001b18 <fputc>:
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	fb 01       	movw	r30, r22
    1b22:	23 81       	ldd	r18, Z+3	; 0x03
    1b24:	21 fd       	sbrc	r18, 1
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <fputc+0x16>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	9f ef       	ldi	r25, 0xFF	; 255
    1b2c:	28 c0       	rjmp	.+80     	; 0x1b7e <fputc+0x66>
    1b2e:	22 ff       	sbrs	r18, 2
    1b30:	16 c0       	rjmp	.+44     	; 0x1b5e <fputc+0x46>
    1b32:	46 81       	ldd	r20, Z+6	; 0x06
    1b34:	57 81       	ldd	r21, Z+7	; 0x07
    1b36:	24 81       	ldd	r18, Z+4	; 0x04
    1b38:	35 81       	ldd	r19, Z+5	; 0x05
    1b3a:	42 17       	cp	r20, r18
    1b3c:	53 07       	cpc	r21, r19
    1b3e:	44 f4       	brge	.+16     	; 0x1b50 <fputc+0x38>
    1b40:	a0 81       	ld	r26, Z
    1b42:	b1 81       	ldd	r27, Z+1	; 0x01
    1b44:	9d 01       	movw	r18, r26
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	31 83       	std	Z+1, r19	; 0x01
    1b4c:	20 83       	st	Z, r18
    1b4e:	8c 93       	st	X, r24
    1b50:	26 81       	ldd	r18, Z+6	; 0x06
    1b52:	37 81       	ldd	r19, Z+7	; 0x07
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	37 83       	std	Z+7, r19	; 0x07
    1b5a:	26 83       	std	Z+6, r18	; 0x06
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <fputc+0x66>
    1b5e:	eb 01       	movw	r28, r22
    1b60:	09 2f       	mov	r16, r25
    1b62:	18 2f       	mov	r17, r24
    1b64:	00 84       	ldd	r0, Z+8	; 0x08
    1b66:	f1 85       	ldd	r31, Z+9	; 0x09
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	09 95       	icall
    1b6c:	89 2b       	or	r24, r25
    1b6e:	e1 f6       	brne	.-72     	; 0x1b28 <fputc+0x10>
    1b70:	8e 81       	ldd	r24, Y+6	; 0x06
    1b72:	9f 81       	ldd	r25, Y+7	; 0x07
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	9f 83       	std	Y+7, r25	; 0x07
    1b78:	8e 83       	std	Y+6, r24	; 0x06
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	90 2f       	mov	r25, r16
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <__ultoa_invert>:
    1b88:	fa 01       	movw	r30, r20
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	28 30       	cpi	r18, 0x08	; 8
    1b8e:	51 f1       	breq	.+84     	; 0x1be4 <__ultoa_invert+0x5c>
    1b90:	20 31       	cpi	r18, 0x10	; 16
    1b92:	81 f1       	breq	.+96     	; 0x1bf4 <__ultoa_invert+0x6c>
    1b94:	e8 94       	clt
    1b96:	6f 93       	push	r22
    1b98:	6e 7f       	andi	r22, 0xFE	; 254
    1b9a:	6e 5f       	subi	r22, 0xFE	; 254
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	af 4f       	sbci	r26, 0xFF	; 255
    1ba4:	b1 e0       	ldi	r27, 0x01	; 1
    1ba6:	3e d0       	rcall	.+124    	; 0x1c24 <__ultoa_invert+0x9c>
    1ba8:	b4 e0       	ldi	r27, 0x04	; 4
    1baa:	3c d0       	rcall	.+120    	; 0x1c24 <__ultoa_invert+0x9c>
    1bac:	67 0f       	add	r22, r23
    1bae:	78 1f       	adc	r23, r24
    1bb0:	89 1f       	adc	r24, r25
    1bb2:	9a 1f       	adc	r25, r26
    1bb4:	a1 1d       	adc	r26, r1
    1bb6:	68 0f       	add	r22, r24
    1bb8:	79 1f       	adc	r23, r25
    1bba:	8a 1f       	adc	r24, r26
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	6a 0f       	add	r22, r26
    1bc2:	71 1d       	adc	r23, r1
    1bc4:	81 1d       	adc	r24, r1
    1bc6:	91 1d       	adc	r25, r1
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	20 d0       	rcall	.+64     	; 0x1c0c <__ultoa_invert+0x84>
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__ultoa_invert+0x48>
    1bce:	68 94       	set
    1bd0:	3f 91       	pop	r19
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	26 9f       	mul	r18, r22
    1bd6:	11 24       	eor	r1, r1
    1bd8:	30 19       	sub	r19, r0
    1bda:	30 5d       	subi	r19, 0xD0	; 208
    1bdc:	31 93       	st	Z+, r19
    1bde:	de f6       	brtc	.-74     	; 0x1b96 <__ultoa_invert+0xe>
    1be0:	cf 01       	movw	r24, r30
    1be2:	08 95       	ret
    1be4:	46 2f       	mov	r20, r22
    1be6:	47 70       	andi	r20, 0x07	; 7
    1be8:	40 5d       	subi	r20, 0xD0	; 208
    1bea:	41 93       	st	Z+, r20
    1bec:	b3 e0       	ldi	r27, 0x03	; 3
    1bee:	0f d0       	rcall	.+30     	; 0x1c0e <__ultoa_invert+0x86>
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__ultoa_invert+0x5c>
    1bf2:	f6 cf       	rjmp	.-20     	; 0x1be0 <__ultoa_invert+0x58>
    1bf4:	46 2f       	mov	r20, r22
    1bf6:	4f 70       	andi	r20, 0x0F	; 15
    1bf8:	40 5d       	subi	r20, 0xD0	; 208
    1bfa:	4a 33       	cpi	r20, 0x3A	; 58
    1bfc:	18 f0       	brcs	.+6      	; 0x1c04 <__ultoa_invert+0x7c>
    1bfe:	49 5d       	subi	r20, 0xD9	; 217
    1c00:	31 fd       	sbrc	r19, 1
    1c02:	40 52       	subi	r20, 0x20	; 32
    1c04:	41 93       	st	Z+, r20
    1c06:	02 d0       	rcall	.+4      	; 0x1c0c <__ultoa_invert+0x84>
    1c08:	a9 f7       	brne	.-22     	; 0x1bf4 <__ultoa_invert+0x6c>
    1c0a:	ea cf       	rjmp	.-44     	; 0x1be0 <__ultoa_invert+0x58>
    1c0c:	b4 e0       	ldi	r27, 0x04	; 4
    1c0e:	a6 95       	lsr	r26
    1c10:	97 95       	ror	r25
    1c12:	87 95       	ror	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	ba 95       	dec	r27
    1c1a:	c9 f7       	brne	.-14     	; 0x1c0e <__ultoa_invert+0x86>
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	61 05       	cpc	r22, r1
    1c20:	71 05       	cpc	r23, r1
    1c22:	08 95       	ret
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	0a 2e       	mov	r0, r26
    1c2a:	06 94       	lsr	r0
    1c2c:	57 95       	ror	r21
    1c2e:	47 95       	ror	r20
    1c30:	37 95       	ror	r19
    1c32:	27 95       	ror	r18
    1c34:	ba 95       	dec	r27
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <__ultoa_invert+0xa2>
    1c38:	62 0f       	add	r22, r18
    1c3a:	73 1f       	adc	r23, r19
    1c3c:	84 1f       	adc	r24, r20
    1c3e:	95 1f       	adc	r25, r21
    1c40:	a0 1d       	adc	r26, r0
    1c42:	08 95       	ret

00001c44 <eeprom_read_block>:
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22

00001c48 <eeprom_read_blraw>:
    1c48:	fc 01       	movw	r30, r24
    1c4a:	f9 99       	sbic	0x1f, 1	; 31
    1c4c:	fe cf       	rjmp	.-4      	; 0x1c4a <eeprom_read_blraw+0x2>
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <eeprom_read_blraw+0x14>
    1c50:	f2 bd       	out	0x22, r31	; 34
    1c52:	e1 bd       	out	0x21, r30	; 33
    1c54:	f8 9a       	sbi	0x1f, 0	; 31
    1c56:	31 96       	adiw	r30, 0x01	; 1
    1c58:	00 b4       	in	r0, 0x20	; 32
    1c5a:	0d 92       	st	X+, r0
    1c5c:	41 50       	subi	r20, 0x01	; 1
    1c5e:	50 40       	sbci	r21, 0x00	; 0
    1c60:	b8 f7       	brcc	.-18     	; 0x1c50 <eeprom_read_blraw+0x8>
    1c62:	08 95       	ret

00001c64 <eeprom_read_byte>:
    1c64:	f9 99       	sbic	0x1f, 1	; 31
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <eeprom_read_byte>
    1c68:	92 bd       	out	0x22, r25	; 34
    1c6a:	81 bd       	out	0x21, r24	; 33
    1c6c:	f8 9a       	sbi	0x1f, 0	; 31
    1c6e:	99 27       	eor	r25, r25
    1c70:	80 b5       	in	r24, 0x20	; 32
    1c72:	08 95       	ret

00001c74 <eeprom_write_block>:
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <eeprom_write_block+0xc>
    1c7a:	2d 91       	ld	r18, X+
    1c7c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <eeprom_write_r18>
    1c80:	41 50       	subi	r20, 0x01	; 1
    1c82:	50 40       	sbci	r21, 0x00	; 0
    1c84:	d0 f7       	brcc	.-12     	; 0x1c7a <eeprom_write_block+0x6>
    1c86:	08 95       	ret

00001c88 <eeprom_write_byte>:
    1c88:	26 2f       	mov	r18, r22

00001c8a <eeprom_write_r18>:
    1c8a:	f9 99       	sbic	0x1f, 1	; 31
    1c8c:	fe cf       	rjmp	.-4      	; 0x1c8a <eeprom_write_r18>
    1c8e:	1f ba       	out	0x1f, r1	; 31
    1c90:	92 bd       	out	0x22, r25	; 34
    1c92:	81 bd       	out	0x21, r24	; 33
    1c94:	20 bd       	out	0x20, r18	; 32
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	fa 9a       	sbi	0x1f, 2	; 31
    1c9c:	f9 9a       	sbi	0x1f, 1	; 31
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	08 95       	ret

00001ca4 <__prologue_saves__>:
    1ca4:	2f 92       	push	r2
    1ca6:	3f 92       	push	r3
    1ca8:	4f 92       	push	r4
    1caa:	5f 92       	push	r5
    1cac:	6f 92       	push	r6
    1cae:	7f 92       	push	r7
    1cb0:	8f 92       	push	r8
    1cb2:	9f 92       	push	r9
    1cb4:	af 92       	push	r10
    1cb6:	bf 92       	push	r11
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	ca 1b       	sub	r28, r26
    1cce:	db 0b       	sbc	r29, r27
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	09 94       	ijmp

00001cdc <__epilogue_restores__>:
    1cdc:	2a 88       	ldd	r2, Y+18	; 0x12
    1cde:	39 88       	ldd	r3, Y+17	; 0x11
    1ce0:	48 88       	ldd	r4, Y+16	; 0x10
    1ce2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ce4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ce6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ce8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cea:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cec:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cee:	b9 84       	ldd	r11, Y+9	; 0x09
    1cf0:	c8 84       	ldd	r12, Y+8	; 0x08
    1cf2:	df 80       	ldd	r13, Y+7	; 0x07
    1cf4:	ee 80       	ldd	r14, Y+6	; 0x06
    1cf6:	fd 80       	ldd	r15, Y+5	; 0x05
    1cf8:	0c 81       	ldd	r16, Y+4	; 0x04
    1cfa:	1b 81       	ldd	r17, Y+3	; 0x03
    1cfc:	aa 81       	ldd	r26, Y+2	; 0x02
    1cfe:	b9 81       	ldd	r27, Y+1	; 0x01
    1d00:	ce 0f       	add	r28, r30
    1d02:	d1 1d       	adc	r29, r1
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	ed 01       	movw	r28, r26
    1d10:	08 95       	ret

00001d12 <_exit>:
    1d12:	f8 94       	cli

00001d14 <__stop_program>:
    1d14:	ff cf       	rjmp	.-2      	; 0x1d14 <__stop_program>
