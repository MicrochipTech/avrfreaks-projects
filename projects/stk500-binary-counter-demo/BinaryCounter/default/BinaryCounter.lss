
BinaryCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001f6  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000135  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000242  00000000  00000000  00000549  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011e  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000058  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ec       	ldi	r30, 0xC6	; 198
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a2 36       	cpi	r26, 0x62	; 98
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	0c d0       	rcall	.+24     	; 0x6e <main>
  56:	35 c0       	rjmp	.+106    	; 0xc2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <AVRInit_InputPort>:

#include <avr/io.h>


int AVRInit_InputPort (void)
{
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	87 bb       	out	0x17, r24	; 23
	DDRB = 0xFF;	// set PORTB for input
	return 1;
}
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	08 95       	ret

00000064 <AVRInit_OutputPort>:

int AVRInit_OutputPort (void)
{
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	81 bb       	out	0x11, r24	; 17
	DDRD = 0xFF;	// set PORTD for output
	return 1;
}	
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	08 95       	ret

0000006e <main>:
extern void AVRInit_InputPort();
extern void AVRInit_OutputPort();


int main (void)
{
  6e:	0f 93       	push	r16
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
	AVRInit_InputPort();
  76:	f1 df       	rcall	.-30     	; 0x5a <AVRInit_InputPort>
	AVRInit_OutputPort();
  78:	f5 df       	rcall	.-22     	; 0x64 <AVRInit_OutputPort>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	c0 e5       	ldi	r28, 0x50	; 80
  7c:	d3 ec       	ldi	r29, 0xC3	; 195
			count = count - 1;		// Decrement counter.	
			_delay_loop_2(50000);	// Delay for aditional 500ms.
		}
		else						// If count is equal to 0x00 reset to 0xFF.
		{
			count = 0xFF;
  7e:	0f ef       	ldi	r16, 0xFF	; 255
  80:	10 e0       	ldi	r17, 0x00	; 0
	AVRInit_InputPort();
	AVRInit_OutputPort();
	
	while (1)
	{
		if (count != 0x00) 			// Check to see if counter is not 0x00.
  82:	80 91 60 00 	lds	r24, 0x0060
  86:	90 91 61 00 	lds	r25, 0x0061
  8a:	00 97       	sbiw	r24, 0x00	; 0
  8c:	89 f0       	breq	.+34     	; 0xb0 <main+0x42>
		{							// Count was initilized to 0xFF.
			SetPort(count);
  8e:	15 d0       	rcall	.+42     	; 0xba <SetPort>
  90:	ce 01       	movw	r24, r28
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x24>
			_delay_loop_2(50000); 	// Delay for 500ms.
			count = count - 1;		// Decrement counter.	
  96:	80 91 60 00 	lds	r24, 0x0060
  9a:	90 91 61 00 	lds	r25, 0x0061
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
  a8:	ce 01       	movw	r24, r28
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3c>
  ae:	e9 cf       	rjmp	.-46     	; 0x82 <main+0x14>
			_delay_loop_2(50000);	// Delay for aditional 500ms.
		}
		else						// If count is equal to 0x00 reset to 0xFF.
		{
			count = 0xFF;
  b0:	10 93 61 00 	sts	0x0061, r17
  b4:	00 93 60 00 	sts	0x0060, r16
  b8:	e4 cf       	rjmp	.-56     	; 0x82 <main+0x14>

000000ba <SetPort>:

#include <avr/io.h>

int SetPort (set_value)
{
  ba:	88 bb       	out	0x18, r24	; 24

	PORTB = set_value;		
	return(1);

}
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
