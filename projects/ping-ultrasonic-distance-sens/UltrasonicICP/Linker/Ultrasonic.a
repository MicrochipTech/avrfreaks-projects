;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2/11/2009
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega32
;Program type        : Application
;Clock frequency     : 8.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 512
;*****************************************************/
;//#define DEBUG
;#define DEBUG2
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;unsigned char run=3;
;float time=0;
;void getDist();
;void sendData();
;
;// Timer 1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     #ifdef DEBUG
; 0000 0029        printf("\n\rICP");
; 0000 002A     #endif
; 0000 002B     if(run == 0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C     {
; 0000 002D         #ifdef DEBUG
; 0000 002E             printf("\n\rStart");
; 0000 002F         #endif
; 0000 0030         TCCR1B |= 0x02; //Start Timer 1
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0031         TCCR1B &= 0xBF; //Falling edge
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0032         run = 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033         #ifdef DEBUG
; 0000 0034             printf("\n\r1Run = %d",run);
; 0000 0035         #endif
; 0000 0036     }
; 0000 0037     else if(run == 1)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0038     {
; 0000 0039         time = TCNT1;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A         TCCR1B &= 0xF8; // Disable Timer 1
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B         TCNT1 = 0x0000; //Clear Timer 1
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C         TIMSK &= 0xDF; // Disable ICP
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D         DDRD |= 0x40; //Set PIND.6 as out
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003E         TCCR1B |= 0x40; //Rising edge
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003F         run = 3;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0040         #ifdef DEBUG
; 0000 0041             printf("\n\rEND TCNT = %f 2Run = %d",time,run);
; 0000 0042         #endif
; 0000 0043         #ifdef DEBUG2
; 0000 0044             sendData();
;PCODE: $00000038 VOL: 0
; 0000 0045         #endif
; 0000 0046     }
; 0000 0047     else
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0048     {
; 0000 0049         #ifdef DEBUG
; 0000 004A             printf("\n\rrun = %d",run);
; 0000 004B         #endif
; 0000 004C         run = 0;
;PCODE: $0000003B VOL: 0
; 0000 004D         #ifdef DEBUG
; 0000 004E             printf("\n\rrun = %d",run);
; 0000 004F         #endif
; 0000 0050     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0051 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0056 {
;PCODE: $00000041 VOL: 0
; 0000 0057 // Declare your local variables here
; 0000 0058 
; 0000 0059 // Input/Output Ports initialization
; 0000 005A // Port A initialization
; 0000 005B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D PORTA=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005E DDRA=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005F 
; 0000 0060 // Port B initialization
; 0000 0061 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 0062 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 0063 PORTB=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0064 DDRB=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0065 
; 0000 0066 // Port C initialization
; 0000 0067 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0068 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0069 PORTC=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006A DDRC=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006B 
; 0000 006C // Port D initialization
; 0000 006D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006F PORTD=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0070 DDRD=0x40;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0071 
; 0000 0072 // Timer/Counter 0 initialization
; 0000 0073 // Clock source: System Clock
; 0000 0074 // Clock value: Timer 0 Stopped
; 0000 0075 // Mode: Normal top=FFh
; 0000 0076 // OC0 output: Disconnected
; 0000 0077 TCCR0=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0078 TCNT0=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0079 OCR0=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 1 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: 1000 kHz
; 0000 007E // Mode: Normal top=FFFFh
; 0000 007F // OC1A output: Discon.
; 0000 0080 // OC1B output: Discon.
; 0000 0081 // Noise Canceler: Off
; 0000 0082 // Input Capture on Rising Edge
; 0000 0083 // Timer 1 Overflow Interrupt: Off
; 0000 0084 // Input Capture Interrupt: On
; 0000 0085 // Compare A Match Interrupt: Off
; 0000 0086 // Compare B Match Interrupt: Off
; 0000 0087 TCCR1A=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0088 TCCR1B=0x40; //Initially disable TMR1
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0089 TCNT1H=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008A TCNT1L=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008B ICR1H=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008C ICR1L=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008D OCR1AH=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008E OCR1AL=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008F OCR1BH=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0090 OCR1BL=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0091 
; 0000 0092 // Timer/Counter 2 initialization
; 0000 0093 // Clock source: System Clock
; 0000 0094 // Clock value: Timer 2 Stopped
; 0000 0095 // Mode: Normal top=FFh
; 0000 0096 // OC2 output: Disconnected
; 0000 0097 ASSR=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0098 TCCR2=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0099 TCNT2=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009A OCR2=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009B 
; 0000 009C // External Interrupt(s) initialization
; 0000 009D // INT0: Off
; 0000 009E // INT1: Off
; 0000 009F // INT2: Off
; 0000 00A0 MCUCR=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A1 MCUCSR=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A4 TIMSK=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A5 
; 0000 00A6 // USART initialization
; 0000 00A7 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A8 // USART Receiver: On
; 0000 00A9 // USART Transmitter: On
; 0000 00AA // USART Mode: Asynchronous
; 0000 00AB // USART Baud Rate: 9600
; 0000 00AC UCSRA=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AD UCSRB=0x18;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AE UCSRC=0x86;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AF UBRRH=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B0 UBRRL=0x33;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B1 
; 0000 00B2 // Analog Comparator initialization
; 0000 00B3 // Analog Comparator: Off
; 0000 00B4 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B5 ACSR=0x80;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B6 SFIOR=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B7 
; 0000 00B8 // Global enable interrupts
; 0000 00B9 #asm("sei")
;PCODE: $00000088 VOL: 0
	sei
;PCODE: $00000089 VOL: 0
; 0000 00BA printf("Welcome");
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BB 
; 0000 00BC while (1)
;PCODE: $00000091 VOL: 0
; 0000 00BD       {
; 0000 00BE         delay_ms(500);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00BF         getDist();
;PCODE: $00000095 VOL: 0
; 0000 00C0         #ifdef DEBUG
; 0000 00C1             printf("\n\r3Run = %d",run);
; 0000 00C2         #endif
; 0000 00C3       };
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C4 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;void getDist()
; 0000 00C7 {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00C8     #ifdef DEBUG2
; 0000 00C9         printf("\n\rGET");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CA     #endif
; 0000 00CB     // Output Burst signal
; 0000 00CC     TIMSK &= 0xDF; // Disable ICP           //Problem2--
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00CD     DDRD |= 0x40; //Set PIND.6 as out       //--Problem2
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00CE     PORTD |= 0x40;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CF     delay_us(5);
;PCODE: $000000B0 VOL: 0
; 0000 00D0     PORTD.6 &= 0xBF;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D1     DDRD &= 0xBF; // Set PORTD.6 as in
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00D2     PORTD &= 0xBF; //Tri-state
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00D3     run = 2;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00D4     #ifdef DEBUG
; 0000 00D5         printf("\n\r4Run = %d",run);
; 0000 00D6     #endif
; 0000 00D7     TIMSK |= 0x20; // Enable ICP  //Problem1
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D8 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;void sendData()
; 0000 00DB {
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00DC     printf("\n\rTCNT1 = %u -- Distance = %f",TCNT1,(float)(time*340.0/2000000.0));
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00DD }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
