
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000698  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000698  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800064  00800064  00000730  2**0
                  ALLOC
  3 .noinit       00000000  00800071  00800071  00000730  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000730  2**0
                  CONTENTS
  5 .stab         00000354  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000196  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000003de  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000090  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000046d  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000029  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e9       	ldi	r30, 0x98	; 152
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	03 c0       	rjmp	.+6      	; 0x40 <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	c8 95       	lpm
  3c:	31 96       	adiw	r30, 0x01	; 1
  3e:	0d 92       	st	X+, r0

00000040 <.do_copy_data_start>:
  40:	a4 36       	cpi	r26, 0x64	; 100
  42:	b1 07       	cpc	r27, r17
  44:	d1 f7       	brne	.-12     	; 0x3a <.do_copy_data_loop>

00000046 <__do_clear_bss>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a4 e6       	ldi	r26, 0x64	; 100
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a1 37       	cpi	r26, 0x71	; 113
  52:	b1 07       	cpc	r27, r17
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	01 c0       	rjmp	.+2      	; 0x5a <main>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
//       interger (no idea where this integer is returned to)
//----------------------------------------------------------------------------
// Main loop
int main( void )
{
  5a:	cf ed       	ldi	r28, 0xDF	; 223
  5c:	d0 e0       	ldi	r29, 0x00	; 0
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61
	cli();
  62:	f8 94       	cli
	uCinit();			//go through the initialization process for the microcontroller
  64:	04 d0       	rcall	.+8      	; 0x6e <uCinit>
	sei();				//enable interrupts
  66:	78 94       	sei
	while(1)			//go into an infinite loop here
	{
		wdt_reset();      //reset the watchdog, oh ya, kick his ass across the floor
  68:	a8 95       	wdr
		SrvTock();        //go to the tock every 20ms
  6a:	59 d1       	rcall	.+690    	; 0x31e <SrvTock>
  6c:	fd cf       	rjmp	.-6      	; 0x68 <main+0xe>

0000006e <uCinit>:
	}
   return 0; 
}

//----------------------------------------------------------------------------
//Routine:     uCinit  (initialization of the microcontroller)
//
//Function:    initialize the I/O lines, timers, interrupts, etc.
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void uCinit(void)
{
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	//port initialization
	PORTB = 0b11110111;		//no pullups
  76:	87 ef       	ldi	r24, 0xF7	; 247
  78:	80 93 38 00 	sts	0x0038, r24
	DDRB = 0b10101000;     	//use almost all the pins on PortB for output
  7c:	88 ea       	ldi	r24, 0xA8	; 168
  7e:	80 93 37 00 	sts	0x0037, r24
	PORTD = 0b00100000;		//almost no pullups
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	80 93 32 00 	sts	0x0032, r24
	DDRD = 0b11111111; 		//use almost all the pins for output, except the interrupt pins
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 93 31 00 	sts	0x0031, r24

	//8 bit timer initialization (timer 0)
	TIMSK = (1<<TOIE0);   	//Enable TCNT0 overflow
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 93 59 00 	sts	0x0059, r24
	TCNT0 = 0;         		//reset TCNT0
  94:	10 92 52 00 	sts	0x0052, r1
	TCCR0A = 0;				//just a normal overflow
  98:	10 92 50 00 	sts	0x0050, r1
	TCCR0B = (1<<CS00)|(1<<CS01);        	//count with cpu clock/64
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	80 93 53 00 	sts	0x0053, r24
	
	//16 bit timer, generates a 39KHz modulated signal for the IR receivers
	TCCR1A = (1<<COM1A0)|(1<<WGM10)|(1<<WGM11);
  a2:	83 e4       	ldi	r24, 0x43	; 67
  a4:	80 93 4f 00 	sts	0x004F, r24
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS10);
  a8:	89 e1       	ldi	r24, 0x19	; 25
  aa:	80 93 4e 00 	sts	0x004E, r24
	OCR1AH = 0x01;		//setup the timer to output a 39KHz signal
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 4b 00 	sts	0x004B, r24
	OCR1AL = 0x08;		
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	80 93 4a 00 	sts	0x004A, r24

	//UART transmitt enable
    UCSRA = 0x00;
  ba:	10 92 2b 00 	sts	0x002B, r1
	UCSRB = (1<<TXEN);					//transmitt enable
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	80 93 2a 00 	sts	0x002A, r24
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1);		//8 data bits
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 23 00 	sts	0x0023, r24
	UBRRH = 0;
  ca:	10 92 22 00 	sts	0x0022, r1
	UBRRL = 129;						//9600 baud at 20 MHz, if the clock is 4MHz, this value needs to be 25
  ce:	81 e8       	ldi	r24, 0x81	; 129
  d0:	80 93 29 00 	sts	0x0029, r24

	turnOffVisibleLeds();		//turn off all of the visible LED's
  d4:	aa d2       	rcall	.+1364   	; 0x62a <turnOffVisibleLeds>
	PORTD |= (1<<defSolenoid);	//turn on the solenoid to hold the bucket up
  d6:	80 91 32 00 	lds	r24, 0x0032
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 93 32 00 	sts	0x0032, r24
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <__vector_6>:
}

//****************************************************************************
//----------------------------------------------------------------------------
//Routine:     ISR (SIG_OVERFLOW0)  (timer 0 overflow interrupt)
//
//Function:    signal handler for tcnt0 overflow interrupt
//              happens every 0.8192 mS, with a 20 MHz clock
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
ISR (SIG_OVERFLOW0)
{	//timer tock
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	24 97       	sbiw	r28, 0x04	; 4
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61
	if(u08TmrTock>0)		//counts down to a 20mS tock
 116:	80 91 64 00 	lds	r24, 0x0064
 11a:	88 23       	and	r24, r24
 11c:	29 f0       	breq	.+10     	; 0x128 <__vector_6+0x42>
	{				//NOTE:  this was orginally an integer called intTock.  
		u08TmrTock--;	// It was found that the integer was being corrupted, so it was broke into two bytes
 11e:	80 91 64 00 	lds	r24, 0x0064
 122:	81 50       	subi	r24, 0x01	; 1
 124:	80 93 64 00 	sts	0x0064, r24
	}
	if(boolAlarm==false)		//has the solenoid been released yet?
 128:	80 91 69 00 	lds	r24, 0x0069
 12c:	88 23       	and	r24, r24
 12e:	09 f0       	breq	.+2      	; 0x132 <__vector_6+0x4c>
 130:	d6 c0       	rjmp	.+428    	; 0x2de <__vector_6+0x1f8>
	{
		if (u08TmrIR==0)	//is it time to start an IR sensor reading?
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	88 23       	and	r24, r24
 138:	09 f0       	breq	.+2      	; 0x13c <__vector_6+0x56>
 13a:	60 c0       	rjmp	.+192    	; 0x1fc <__vector_6+0x116>
		{
			u08TmrIR=defScanningRate;		//reload the IR sensor counter
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	80 93 60 00 	sts	0x0060, r24
			if(u08SensorReadNumber==4)	//is it time to reset the sensor counter?
 142:	80 91 61 00 	lds	r24, 0x0061
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	21 f4       	brne	.+8      	; 0x152 <__vector_6+0x6c>
			{
				u08SensorReadNumber=1;		
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 61 00 	sts	0x0061, r24
 150:	05 c0       	rjmp	.+10     	; 0x15c <__vector_6+0x76>
			}
			else
			{
				u08SensorReadNumber++;	//read from the next sensor
 152:	80 91 61 00 	lds	r24, 0x0061
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 61 00 	sts	0x0061, r24
			}
			TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<<CS10);		//turn on the 38KHz to the address decoder
 15c:	89 e1       	ldi	r24, 0x19	; 25
 15e:	80 93 4e 00 	sts	0x004E, r24
			switch(u08SensorReadNumber)	//turn on the IR LED using the address decoder
 162:	80 91 61 00 	lds	r24, 0x0061
 166:	28 2f       	mov	r18, r24
 168:	33 27       	eor	r19, r19
 16a:	3a 83       	std	Y+2, r19	; 0x02
 16c:	29 83       	std	Y+1, r18	; 0x01
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	09 f1       	breq	.+66     	; 0x1ba <__vector_6+0xd4>
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	3a 81       	ldd	r19, Y+2	; 0x02
 17c:	23 30       	cpi	r18, 0x03	; 3
 17e:	31 05       	cpc	r19, r1
 180:	34 f4       	brge	.+12     	; 0x18e <__vector_6+0xa8>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	61 f0       	breq	.+24     	; 0x1a4 <__vector_6+0xbe>
 18c:	a8 c0       	rjmp	.+336    	; 0x2de <__vector_6+0x1f8>
 18e:	29 81       	ldd	r18, Y+1	; 0x01
 190:	3a 81       	ldd	r19, Y+2	; 0x02
 192:	23 30       	cpi	r18, 0x03	; 3
 194:	31 05       	cpc	r19, r1
 196:	e1 f0       	breq	.+56     	; 0x1d0 <__vector_6+0xea>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	91 05       	cpc	r25, r1
 1a0:	11 f1       	breq	.+68     	; 0x1e6 <__vector_6+0x100>
 1a2:	9d c0       	rjmp	.+314    	; 0x2de <__vector_6+0x1f8>
			{
				case 1:
					PORTD &= ~(1<<def74ls138A0);	//turn on the first infrared LED
 1a4:	80 91 32 00 	lds	r24, 0x0032
 1a8:	87 7f       	andi	r24, 0xF7	; 247
 1aa:	80 93 32 00 	sts	0x0032, r24
					PORTD &= ~(1<<def74ls138A1);
 1ae:	80 91 32 00 	lds	r24, 0x0032
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	80 93 32 00 	sts	0x0032, r24
				break;
 1b8:	92 c0       	rjmp	.+292    	; 0x2de <__vector_6+0x1f8>
				case 2:
					PORTD |= (1<<def74ls138A0);	//turn on the second infrared LED
 1ba:	80 91 32 00 	lds	r24, 0x0032
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 93 32 00 	sts	0x0032, r24
					PORTD &= ~(1<<def74ls138A1);
 1c4:	80 91 32 00 	lds	r24, 0x0032
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	80 93 32 00 	sts	0x0032, r24
				break;
 1ce:	87 c0       	rjmp	.+270    	; 0x2de <__vector_6+0x1f8>
				case 3:
					PORTD &= ~(1<<def74ls138A0);	//turn on the third infrared LED
 1d0:	80 91 32 00 	lds	r24, 0x0032
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	80 93 32 00 	sts	0x0032, r24
					PORTD |= (1<<def74ls138A1);
 1da:	80 91 32 00 	lds	r24, 0x0032
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	80 93 32 00 	sts	0x0032, r24
				break;
 1e4:	7c c0       	rjmp	.+248    	; 0x2de <__vector_6+0x1f8>
				case 4:
					PORTD |= (1<<def74ls138A0);	//turn on the fourth infrared LED
 1e6:	80 91 32 00 	lds	r24, 0x0032
 1ea:	88 60       	ori	r24, 0x08	; 8
 1ec:	80 93 32 00 	sts	0x0032, r24
					PORTD |= (1<<def74ls138A1);
 1f0:	80 91 32 00 	lds	r24, 0x0032
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	80 93 32 00 	sts	0x0032, r24
				break;
 1fa:	71 c0       	rjmp	.+226    	; 0x2de <__vector_6+0x1f8>
			}
		}
		else if (u08TmrIR==defScanningRate/2)		//is it time to read the IR sensors?
 1fc:	80 91 60 00 	lds	r24, 0x0060
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	09 f0       	breq	.+2      	; 0x206 <__vector_6+0x120>
 204:	67 c0       	rjmp	.+206    	; 0x2d4 <__vector_6+0x1ee>
		{
			switch(u08SensorReadNumber)	//which sensor are we on?
 206:	80 91 61 00 	lds	r24, 0x0061
 20a:	28 2f       	mov	r18, r24
 20c:	33 27       	eor	r19, r19
 20e:	3c 83       	std	Y+4, r19	; 0x04
 210:	2b 83       	std	Y+3, r18	; 0x03
 212:	8b 81       	ldd	r24, Y+3	; 0x03
 214:	9c 81       	ldd	r25, Y+4	; 0x04
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	91 05       	cpc	r25, r1
 21a:	31 f1       	breq	.+76     	; 0x268 <__vector_6+0x182>
 21c:	2b 81       	ldd	r18, Y+3	; 0x03
 21e:	3c 81       	ldd	r19, Y+4	; 0x04
 220:	23 30       	cpi	r18, 0x03	; 3
 222:	31 05       	cpc	r19, r1
 224:	34 f4       	brge	.+12     	; 0x232 <__vector_6+0x14c>
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	91 05       	cpc	r25, r1
 22e:	61 f0       	breq	.+24     	; 0x248 <__vector_6+0x162>
 230:	4a c0       	rjmp	.+148    	; 0x2c6 <__vector_6+0x1e0>
 232:	2b 81       	ldd	r18, Y+3	; 0x03
 234:	3c 81       	ldd	r19, Y+4	; 0x04
 236:	23 30       	cpi	r18, 0x03	; 3
 238:	31 05       	cpc	r19, r1
 23a:	31 f1       	breq	.+76     	; 0x288 <__vector_6+0x1a2>
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	9c 81       	ldd	r25, Y+4	; 0x04
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	91 05       	cpc	r25, r1
 244:	89 f1       	breq	.+98     	; 0x2a8 <__vector_6+0x1c2>
 246:	3f c0       	rjmp	.+126    	; 0x2c6 <__vector_6+0x1e0>
			{
				case 1:		//are we on the first sensor?
					if(bit_is_set(PINB,defIrRx1))	//are we receiving a signal from the IR sensor
 248:	80 91 36 00 	lds	r24, 0x0036
 24c:	99 27       	eor	r25, r25
 24e:	84 70       	andi	r24, 0x04	; 4
 250:	90 70       	andi	r25, 0x00	; 0
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	31 f0       	breq	.+12     	; 0x262 <__vector_6+0x17c>
					{
						u08Ir1Detect=u08Ir1Detect+1;	//increment the sensor interruption counter
 256:	80 91 65 00 	lds	r24, 0x0065
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 65 00 	sts	0x0065, r24
 260:	32 c0       	rjmp	.+100    	; 0x2c6 <__vector_6+0x1e0>
					}
					else
					{
						u08Ir1Detect=0;	//reset the sensor interruption counter, it must have been a false trigger
 262:	10 92 65 00 	sts	0x0065, r1
					}
				break;
 266:	2f c0       	rjmp	.+94     	; 0x2c6 <__vector_6+0x1e0>
				case 2:		//are we on the second sensor?
					if(bit_is_set(PINB,defIrRx2))	//are we receiving a signal from the IR sensor
 268:	80 91 36 00 	lds	r24, 0x0036
 26c:	99 27       	eor	r25, r25
 26e:	82 70       	andi	r24, 0x02	; 2
 270:	90 70       	andi	r25, 0x00	; 0
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	31 f0       	breq	.+12     	; 0x282 <__vector_6+0x19c>
					{
						u08Ir2Detect=u08Ir2Detect+1;	//increment the sensor interruption counter
 276:	80 91 66 00 	lds	r24, 0x0066
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 66 00 	sts	0x0066, r24
 280:	22 c0       	rjmp	.+68     	; 0x2c6 <__vector_6+0x1e0>
					}
					else
					{
						u08Ir2Detect=0;	//reset the sensor interruption counter, it must have been a false trigger
 282:	10 92 66 00 	sts	0x0066, r1
					}
				break;
 286:	1f c0       	rjmp	.+62     	; 0x2c6 <__vector_6+0x1e0>
				case 3:		//are we on the third sensor?
					if(bit_is_set(PINB,defIrRx3))	//are we receiving a signal from the IR sensor
 288:	80 91 36 00 	lds	r24, 0x0036
 28c:	99 27       	eor	r25, r25
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	90 70       	andi	r25, 0x00	; 0
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	31 f0       	breq	.+12     	; 0x2a2 <__vector_6+0x1bc>
					{
						u08Ir3Detect=u08Ir3Detect+1;	//increment the sensor interruption counter
 296:	80 91 67 00 	lds	r24, 0x0067
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 67 00 	sts	0x0067, r24
 2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <__vector_6+0x1e0>
					}
					else
					{
						u08Ir3Detect=0;	//reset the sensor interruption counter, it must have been a false trigger
 2a2:	10 92 67 00 	sts	0x0067, r1
					}
				break;
 2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <__vector_6+0x1e0>
				case 4:		//are we on the fourth sensor?
					//PORTD &= ~(1<<defBriteLED2);	//off
					if(bit_is_set(PINB,defIrRx4))	//are we receiving a signal from the IR sensor
 2a8:	80 91 36 00 	lds	r24, 0x0036
 2ac:	99 27       	eor	r25, r25
 2ae:	80 71       	andi	r24, 0x10	; 16
 2b0:	90 70       	andi	r25, 0x00	; 0
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <__vector_6+0x1dc>
					{
						u08Ir4Detect=u08Ir4Detect+1;	//increment the sensor interruption counter
 2b6:	80 91 68 00 	lds	r24, 0x0068
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 68 00 	sts	0x0068, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__vector_6+0x1e0>
						//PORTD &= ~(1<<defBriteLED1);	//off
					}
					else
					{
						u08Ir4Detect=0;	//reset the sensor interruption counter, it must have been a false trigger
 2c2:	10 92 68 00 	sts	0x0068, r1
					}
				break;
			}
			u08TmrIR--;			//go on in the timer countdown
 2c6:	80 91 60 00 	lds	r24, 0x0060
 2ca:	81 50       	subi	r24, 0x01	; 1
 2cc:	80 93 60 00 	sts	0x0060, r24
			turn_Off_ir();		//since we are done using the IR, turn it off
 2d0:	1d d0       	rcall	.+58     	; 0x30c <turn_Off_ir>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <__vector_6+0x1f8>
		}
		else
		{
			u08TmrIR--;		//keep counting down to the next sensor reading
 2d4:	80 91 60 00 	lds	r24, 0x0060
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	80 93 60 00 	sts	0x0060, r24
 2de:	24 96       	adiw	r28, 0x04	; 4
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <turn_Off_ir>:
		}
	}
}

//----------------------------------------------------------------------------
//Routine:       turn_off_ir (turn of the infrared LEDs)
//
//Function:      This routine turns off timer 1, which is sending out the 39KHz
//				 signal to the IR LED's
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void turn_Off_ir()
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
 314:	10 92 4e 00 	sts	0x004E, r1
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <SrvTock>:
}

//****************************************************************************
//----------------------------------------------------------------------------
//Routine:       SrvTock  (Service the tock)
//
//Function:      Exicute the tock every 20mS from the main loop.
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void SrvTock(void)
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	22 97       	sbiw	r28, 0x02	; 2
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
	if (u08TmrTock==0 )		//has a 20mS tock happened?
 332:	80 91 64 00 	lds	r24, 0x0064
 336:	88 23       	and	r24, r24
 338:	09 f0       	breq	.+2      	; 0x33c <SrvTock+0x1e>
 33a:	f4 c0       	rjmp	.+488    	; 0x524 <SrvTock+0x206>
	{
		u08TmrTock=25;	//reload the 20mS tock timer
 33c:	89 e1       	ldi	r24, 0x19	; 25
 33e:	80 93 64 00 	sts	0x0064, r24

		switch (u08State)	//controls the very small state machine
 342:	80 91 6a 00 	lds	r24, 0x006A
 346:	99 27       	eor	r25, r25
 348:	00 97       	sbiw	r24, 0x00	; 0
 34a:	09 f0       	breq	.+2      	; 0x34e <SrvTock+0x30>
 34c:	eb c0       	rjmp	.+470    	; 0x524 <SrvTock+0x206>
		{
			case 0:		//first 30 seconds after powerup, show any  interruption in the sensors by flashing LED's
				if(u08Ir1Detect>0)		//has sensor 1 had an interruption?
 34e:	80 91 65 00 	lds	r24, 0x0065
 352:	88 23       	and	r24, r24
 354:	51 f0       	breq	.+20     	; 0x36a <SrvTock+0x4c>
				{
					u08Summary = u08Summary | 0x01;		//yes, then set the sensor 1 flag
 356:	80 91 6b 00 	lds	r24, 0x006B
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	80 93 6b 00 	sts	0x006B, r24
					u08Ir1Detect=0;						//reset the sensor 1 interruption counter
 360:	10 92 65 00 	sts	0x0065, r1
					u08Blink1=defNumBlinks;				//allow the visible LED's to show the interruption
 364:	84 e1       	ldi	r24, 0x14	; 20
 366:	80 93 6e 00 	sts	0x006E, r24
				}
				if(u08Ir2Detect>0)		//has sensor 2 had an interruption?
 36a:	80 91 66 00 	lds	r24, 0x0066
 36e:	88 23       	and	r24, r24
 370:	51 f0       	breq	.+20     	; 0x386 <SrvTock+0x68>
				{
					u08Summary = u08Summary | 0x02;		//yes, then set the sensor 2 flag
 372:	80 91 6b 00 	lds	r24, 0x006B
 376:	82 60       	ori	r24, 0x02	; 2
 378:	80 93 6b 00 	sts	0x006B, r24
					u08Ir2Detect=0;						//reset the sensor 2 interruption counter
 37c:	10 92 66 00 	sts	0x0066, r1
					u08Blink2=defNumBlinks;				//allow the visible LED's to show the interruption
 380:	84 e1       	ldi	r24, 0x14	; 20
 382:	80 93 70 00 	sts	0x0070, r24
				}
				if(u08Ir3Detect>0)		//has sensor 3 had an interruption?
 386:	80 91 67 00 	lds	r24, 0x0067
 38a:	88 23       	and	r24, r24
 38c:	51 f0       	breq	.+20     	; 0x3a2 <SrvTock+0x84>
				{
					u08Summary = u08Summary | 0x04;		//yes, then set the sensor 3 flag
 38e:	80 91 6b 00 	lds	r24, 0x006B
 392:	84 60       	ori	r24, 0x04	; 4
 394:	80 93 6b 00 	sts	0x006B, r24
					u08Ir3Detect=0;						//reset the sensor 3 interruption counter
 398:	10 92 67 00 	sts	0x0067, r1
					u08Blink3=defNumBlinks;				//allow the visible LED's to show the interruption
 39c:	84 e1       	ldi	r24, 0x14	; 20
 39e:	80 93 6d 00 	sts	0x006D, r24
				}
				if(u08Ir4Detect>0)		//has sensor 4 had an interruption?
 3a2:	80 91 68 00 	lds	r24, 0x0068
 3a6:	88 23       	and	r24, r24
 3a8:	51 f0       	breq	.+20     	; 0x3be <SrvTock+0xa0>
				{
					u08Summary = u08Summary | 0x08;		//yes, then set the sensor 4 flag
 3aa:	80 91 6b 00 	lds	r24, 0x006B
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	80 93 6b 00 	sts	0x006B, r24
					u08Ir4Detect=0;						//reset the sensor 4 interruption counter
 3b4:	10 92 68 00 	sts	0x0068, r1
					u08Blink4=defNumBlinks;				//allow the visible LED's to show the interruption
 3b8:	84 e1       	ldi	r24, 0x14	; 20
 3ba:	80 93 6f 00 	sts	0x006F, r24
				}
				UDR=u08Summary;		//send the sensor status out of the UART
 3be:	80 91 6b 00 	lds	r24, 0x006B
 3c2:	80 93 2c 00 	sts	0x002C, r24
				if(u08Summary >0 && u16Tmr30Sec==0)	//has the sensors been interrupted?
 3c6:	80 91 6b 00 	lds	r24, 0x006B
 3ca:	88 23       	and	r24, r24
 3cc:	71 f0       	breq	.+28     	; 0x3ea <SrvTock+0xcc>
 3ce:	80 91 62 00 	lds	r24, 0x0062
 3d2:	90 91 63 00 	lds	r25, 0x0063
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	41 f4       	brne	.+16     	; 0x3ea <SrvTock+0xcc>
				{
					PORTD &= ~(1<<defSolenoid);	//yes, then release the solenoid!
 3da:	80 91 32 00 	lds	r24, 0x0032
 3de:	8f 7b       	andi	r24, 0xBF	; 191
 3e0:	80 93 32 00 	sts	0x0032, r24
					boolAlarm=true;				//set the flag to show the solenoid has been released
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 69 00 	sts	0x0069, r24
				}
				
				if(u16Tmr30Sec==150 || u16Tmr30Sec==100 || u16Tmr30Sec==50)
 3ea:	80 91 62 00 	lds	r24, 0x0062
 3ee:	90 91 63 00 	lds	r25, 0x0063
 3f2:	86 39       	cpi	r24, 0x96	; 150
 3f4:	91 05       	cpc	r25, r1
 3f6:	79 f0       	breq	.+30     	; 0x416 <SrvTock+0xf8>
 3f8:	80 91 62 00 	lds	r24, 0x0062
 3fc:	90 91 63 00 	lds	r25, 0x0063
 400:	84 36       	cpi	r24, 0x64	; 100
 402:	91 05       	cpc	r25, r1
 404:	41 f0       	breq	.+16     	; 0x416 <SrvTock+0xf8>
 406:	80 91 62 00 	lds	r24, 0x0062
 40a:	90 91 63 00 	lds	r25, 0x0063
 40e:	82 33       	cpi	r24, 0x32	; 50
 410:	91 05       	cpc	r25, r1
 412:	09 f0       	breq	.+2      	; 0x416 <SrvTock+0xf8>
 414:	01 c0       	rjmp	.+2      	; 0x418 <SrvTock+0xfa>
				{
					turnOnVisibleLeds();	//blink all of the LED's before we enable solenoid
 416:	25 d1       	rcall	.+586    	; 0x662 <turnOnVisibleLeds>
				}
				if(u16Tmr30Sec==110 || u16Tmr30Sec==60 || u16Tmr30Sec==10)
 418:	80 91 62 00 	lds	r24, 0x0062
 41c:	90 91 63 00 	lds	r25, 0x0063
 420:	8e 36       	cpi	r24, 0x6E	; 110
 422:	91 05       	cpc	r25, r1
 424:	79 f0       	breq	.+30     	; 0x444 <SrvTock+0x126>
 426:	80 91 62 00 	lds	r24, 0x0062
 42a:	90 91 63 00 	lds	r25, 0x0063
 42e:	8c 33       	cpi	r24, 0x3C	; 60
 430:	91 05       	cpc	r25, r1
 432:	41 f0       	breq	.+16     	; 0x444 <SrvTock+0x126>
 434:	80 91 62 00 	lds	r24, 0x0062
 438:	90 91 63 00 	lds	r25, 0x0063
 43c:	8a 30       	cpi	r24, 0x0A	; 10
 43e:	91 05       	cpc	r25, r1
 440:	09 f0       	breq	.+2      	; 0x444 <SrvTock+0x126>
 442:	01 c0       	rjmp	.+2      	; 0x446 <SrvTock+0x128>
				{
					turnOffVisibleLeds();	//blink all of the LED's before we enable solenoid
 444:	f2 d0       	rcall	.+484    	; 0x62a <turnOffVisibleLeds>
				}
				if(u16Tmr30Sec!=0)		//is it time to enable the solenoid?
 446:	80 91 62 00 	lds	r24, 0x0062
 44a:	90 91 63 00 	lds	r25, 0x0063
 44e:	00 97       	sbiw	r24, 0x00	; 0
 450:	59 f0       	breq	.+22     	; 0x468 <SrvTock+0x14a>
				{
					u16Tmr30Sec--;		//count down to enableing the solenoid
 452:	80 91 62 00 	lds	r24, 0x0062
 456:	90 91 63 00 	lds	r25, 0x0063
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	90 93 63 00 	sts	0x0063, r25
 460:	80 93 62 00 	sts	0x0062, r24
					u08Summary=0;
 464:	10 92 6b 00 	sts	0x006B, r1
				}
				
				u08TmrFlash++;				//count out the blinking of the high intensity LED's
 468:	80 91 6c 00 	lds	r24, 0x006C
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 6c 00 	sts	0x006C, r24
				switch (u08TmrFlash)		//this shows two blinks on one LED and then two flashes on the other LED
 472:	80 91 6c 00 	lds	r24, 0x006C
 476:	28 2f       	mov	r18, r24
 478:	33 27       	eor	r19, r19
 47a:	3a 83       	std	Y+2, r19	; 0x02
 47c:	29 83       	std	Y+1, r18	; 0x01
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	81 31       	cpi	r24, 0x11	; 17
 484:	91 05       	cpc	r25, r1
 486:	09 f4       	brne	.+2      	; 0x48a <SrvTock+0x16c>
 488:	43 c0       	rjmp	.+134    	; 0x510 <SrvTock+0x1f2>
 48a:	29 81       	ldd	r18, Y+1	; 0x01
 48c:	3a 81       	ldd	r19, Y+2	; 0x02
 48e:	22 31       	cpi	r18, 0x12	; 18
 490:	31 05       	cpc	r19, r1
 492:	dc f4       	brge	.+54     	; 0x4ca <SrvTock+0x1ac>
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	91 05       	cpc	r25, r1
 49c:	99 f1       	breq	.+102    	; 0x504 <SrvTock+0x1e6>
 49e:	29 81       	ldd	r18, Y+1	; 0x01
 4a0:	3a 81       	ldd	r19, Y+2	; 0x02
 4a2:	24 30       	cpi	r18, 0x04	; 4
 4a4:	31 05       	cpc	r19, r1
 4a6:	34 f4       	brge	.+12     	; 0x4b4 <SrvTock+0x196>
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	9a 81       	ldd	r25, Y+2	; 0x02
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	91 05       	cpc	r25, r1
 4b0:	39 f1       	breq	.+78     	; 0x500 <SrvTock+0x1e2>
 4b2:	38 c0       	rjmp	.+112    	; 0x524 <SrvTock+0x206>
 4b4:	29 81       	ldd	r18, Y+1	; 0x01
 4b6:	3a 81       	ldd	r19, Y+2	; 0x02
 4b8:	25 30       	cpi	r18, 0x05	; 5
 4ba:	31 05       	cpc	r19, r1
 4bc:	29 f1       	breq	.+74     	; 0x508 <SrvTock+0x1ea>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	9a 81       	ldd	r25, Y+2	; 0x02
 4c2:	87 30       	cpi	r24, 0x07	; 7
 4c4:	91 05       	cpc	r25, r1
 4c6:	11 f1       	breq	.+68     	; 0x50c <SrvTock+0x1ee>
 4c8:	2d c0       	rjmp	.+90     	; 0x524 <SrvTock+0x206>
 4ca:	29 81       	ldd	r18, Y+1	; 0x01
 4cc:	3a 81       	ldd	r19, Y+2	; 0x02
 4ce:	25 31       	cpi	r18, 0x15	; 21
 4d0:	31 05       	cpc	r19, r1
 4d2:	11 f1       	breq	.+68     	; 0x518 <SrvTock+0x1fa>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	86 31       	cpi	r24, 0x16	; 22
 4da:	91 05       	cpc	r25, r1
 4dc:	34 f4       	brge	.+12     	; 0x4ea <SrvTock+0x1cc>
 4de:	29 81       	ldd	r18, Y+1	; 0x01
 4e0:	3a 81       	ldd	r19, Y+2	; 0x02
 4e2:	23 31       	cpi	r18, 0x13	; 19
 4e4:	31 05       	cpc	r19, r1
 4e6:	b1 f0       	breq	.+44     	; 0x514 <SrvTock+0x1f6>
 4e8:	1d c0       	rjmp	.+58     	; 0x524 <SrvTock+0x206>
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	87 31       	cpi	r24, 0x17	; 23
 4f0:	91 05       	cpc	r25, r1
 4f2:	a1 f0       	breq	.+40     	; 0x51c <SrvTock+0x1fe>
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	3a 81       	ldd	r19, Y+2	; 0x02
 4f8:	21 32       	cpi	r18, 0x21	; 33
 4fa:	31 05       	cpc	r19, r1
 4fc:	89 f0       	breq	.+34     	; 0x520 <SrvTock+0x202>
 4fe:	12 c0       	rjmp	.+36     	; 0x524 <SrvTock+0x206>
				{
					case 1:
						showBlinkA();			//turn on the blinking LED's
 500:	1a d0       	rcall	.+52     	; 0x536 <showBlinkA>
					break;
 502:	10 c0       	rjmp	.+32     	; 0x524 <SrvTock+0x206>
					case 3:
						turnOffVisibleLeds();	//turn off the blinking LED's
 504:	92 d0       	rcall	.+292    	; 0x62a <turnOffVisibleLeds>
					break;
 506:	0e c0       	rjmp	.+28     	; 0x524 <SrvTock+0x206>
					case 5:
						showBlinkA();			//turn on the blinking LED's
 508:	16 d0       	rcall	.+44     	; 0x536 <showBlinkA>
					break;
 50a:	0c c0       	rjmp	.+24     	; 0x524 <SrvTock+0x206>
					case 7:
						turnOffVisibleLeds();	//turn off the blinking LED's
 50c:	8e d0       	rcall	.+284    	; 0x62a <turnOffVisibleLeds>
					break;
 50e:	0a c0       	rjmp	.+20     	; 0x524 <SrvTock+0x206>
					case 17:
						showBlinkB();			//turn on the blinking LED's
 510:	3d d0       	rcall	.+122    	; 0x58c <showBlinkB>
					break;
 512:	08 c0       	rjmp	.+16     	; 0x524 <SrvTock+0x206>
					case 19:
						turnOffVisibleLeds();	//turn off the blinking LED's
 514:	8a d0       	rcall	.+276    	; 0x62a <turnOffVisibleLeds>
					break;
 516:	06 c0       	rjmp	.+12     	; 0x524 <SrvTock+0x206>
					case 21:
						showBlinkB();			//turn on the blinking LED's
 518:	39 d0       	rcall	.+114    	; 0x58c <showBlinkB>
					break;
 51a:	04 c0       	rjmp	.+8      	; 0x524 <SrvTock+0x206>
					case 23:
						turnOffVisibleLeds();	//turn off the blinking LED's
 51c:	86 d0       	rcall	.+268    	; 0x62a <turnOffVisibleLeds>
					break;
 51e:	02 c0       	rjmp	.+4      	; 0x524 <SrvTock+0x206>
					case 33:
						u08TmrFlash=0;			//reset the flash LED counter back to zero
 520:	10 92 6c 00 	sts	0x006C, r1
 524:	22 96       	adiw	r28, 0x02	; 2
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	f8 94       	cli
 52a:	de bf       	out	0x3e, r29	; 62
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	cd bf       	out	0x3d, r28	; 61
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <showBlinkA>:
					break;
				}
				//}
			break;
		}
	}
}

//----------------------------------------------------------------------------
//Routine:       showBlinkA 
//
//Function:      This routine does the first blink for the visible LED
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void showBlinkA(void)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	if(u08Blink1 != 0)					//are we still blinking this LED?
 53e:	80 91 6e 00 	lds	r24, 0x006E
 542:	88 23       	and	r24, r24
 544:	29 f0       	breq	.+10     	; 0x550 <showBlinkA+0x1a>
	{
		PORTB |= (1<<defBriteLED3);	//turn on the LED for the blinking!
 546:	80 91 38 00 	lds	r24, 0x0038
 54a:	80 62       	ori	r24, 0x20	; 32
 54c:	80 93 38 00 	sts	0x0038, r24
	}
	if(u08Blink2 != 0)					//are we still blinking this LED?
 550:	80 91 70 00 	lds	r24, 0x0070
 554:	88 23       	and	r24, r24
 556:	29 f0       	breq	.+10     	; 0x562 <showBlinkA+0x2c>
	{	
		PORTB |= (1<<defBriteLED4);	//turn on the LED for the blinking!
 558:	80 91 38 00 	lds	r24, 0x0038
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	80 93 38 00 	sts	0x0038, r24
	}
	if(u08Blink3 != 0)					//are we still blinking this LED?
 562:	80 91 6d 00 	lds	r24, 0x006D
 566:	88 23       	and	r24, r24
 568:	29 f0       	breq	.+10     	; 0x574 <showBlinkA+0x3e>
	{
		PORTB |= (1<<defBriteLED4);	//turn on the LED for the blinking!
 56a:	80 91 38 00 	lds	r24, 0x0038
 56e:	80 68       	ori	r24, 0x80	; 128
 570:	80 93 38 00 	sts	0x0038, r24
	}
	if(u08Blink4 != 0)					//are we still blinking this LED?
 574:	80 91 6f 00 	lds	r24, 0x006F
 578:	88 23       	and	r24, r24
 57a:	29 f0       	breq	.+10     	; 0x586 <showBlinkA+0x50>
	{
		PORTD |= (1<<defBriteLED2);	//turn on the LED for the blinking!
 57c:	80 91 32 00 	lds	r24, 0x0032
 580:	80 62       	ori	r24, 0x20	; 32
 582:	80 93 32 00 	sts	0x0032, r24
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <showBlinkB>:
	}

}

//----------------------------------------------------------------------------
//Routine:       showBlinkB
//
//Function:      This routine does the second blink for the visible LEDs
//
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void showBlinkB(void)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
	if(u08Blink1 != 0)					//are we still blinking this LED?
 594:	80 91 6e 00 	lds	r24, 0x006E
 598:	88 23       	and	r24, r24
 59a:	71 f0       	breq	.+28     	; 0x5b8 <showBlinkB+0x2c>
	{
		PORTD |= (1<<defBriteLED1);	//turn on the LED for the blinking!
 59c:	80 91 32 00 	lds	r24, 0x0032
 5a0:	80 61       	ori	r24, 0x10	; 16
 5a2:	80 93 32 00 	sts	0x0032, r24
		if(boolAlarm==false)			//only count down when the solenoid has not been released
 5a6:	80 91 69 00 	lds	r24, 0x0069
 5aa:	88 23       	and	r24, r24
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <showBlinkB+0x2c>
		{
			u08Blink1--;				//count down to the next blink for this LED
 5ae:	80 91 6e 00 	lds	r24, 0x006E
 5b2:	81 50       	subi	r24, 0x01	; 1
 5b4:	80 93 6e 00 	sts	0x006E, r24
		}
	}
	if(u08Blink2 != 0)					//are we still blinking this LED?
 5b8:	80 91 70 00 	lds	r24, 0x0070
 5bc:	88 23       	and	r24, r24
 5be:	71 f0       	breq	.+28     	; 0x5dc <showBlinkB+0x50>
	{	
		PORTB |= (1<<defBriteLED3);	//turn on the LED for the blinking!
 5c0:	80 91 38 00 	lds	r24, 0x0038
 5c4:	80 62       	ori	r24, 0x20	; 32
 5c6:	80 93 38 00 	sts	0x0038, r24
		if(boolAlarm==false)			//only count down when the solenoid has not been released
 5ca:	80 91 69 00 	lds	r24, 0x0069
 5ce:	88 23       	and	r24, r24
 5d0:	29 f4       	brne	.+10     	; 0x5dc <showBlinkB+0x50>
		{
			u08Blink2--;				//count down to the next blink for this LED
 5d2:	80 91 70 00 	lds	r24, 0x0070
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	80 93 70 00 	sts	0x0070, r24
		}
	}
	if(u08Blink3 != 0)					//are we still blinking this LED?
 5dc:	80 91 6d 00 	lds	r24, 0x006D
 5e0:	88 23       	and	r24, r24
 5e2:	71 f0       	breq	.+28     	; 0x600 <showBlinkB+0x74>
	{
		PORTD |= (1<<defBriteLED2);	//turn on the LED for the blinking!
 5e4:	80 91 32 00 	lds	r24, 0x0032
 5e8:	80 62       	ori	r24, 0x20	; 32
 5ea:	80 93 32 00 	sts	0x0032, r24
		if(boolAlarm==false)			//only count down when the solenoid has not been released
 5ee:	80 91 69 00 	lds	r24, 0x0069
 5f2:	88 23       	and	r24, r24
 5f4:	29 f4       	brne	.+10     	; 0x600 <showBlinkB+0x74>
		{
			u08Blink3--;				//count down to the next blink for this LED
 5f6:	80 91 6d 00 	lds	r24, 0x006D
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	80 93 6d 00 	sts	0x006D, r24
		}
	}
	if(u08Blink4 != 0)					//are we still blinking this LED?
 600:	80 91 6f 00 	lds	r24, 0x006F
 604:	88 23       	and	r24, r24
 606:	71 f0       	breq	.+28     	; 0x624 <showBlinkB+0x98>
	{
		PORTD |= (1<<defBriteLED1);	//turn on the LED for the blinking!
 608:	80 91 32 00 	lds	r24, 0x0032
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	80 93 32 00 	sts	0x0032, r24
		if(boolAlarm==false)			//only count down when the solenoid has not been released
 612:	80 91 69 00 	lds	r24, 0x0069
 616:	88 23       	and	r24, r24
 618:	29 f4       	brne	.+10     	; 0x624 <showBlinkB+0x98>
		{
			u08Blink4--;				//count down to the next blink for this LED
 61a:	80 91 6f 00 	lds	r24, 0x006F
 61e:	81 50       	subi	r24, 0x01	; 1
 620:	80 93 6f 00 	sts	0x006F, r24
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <turnOffVisibleLeds>:
		}
	}
}

//----------------------------------------------------------------------------
//Routine:       turnOffVisibleLeds 
//
//Function:      There are four visible LEDs that point down, two red and two blue.
//				 This routine turns them all off
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void turnOffVisibleLeds(void)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1<<defBriteLED1);	//turn off visible LED 1 on powerup
 632:	80 91 32 00 	lds	r24, 0x0032
 636:	8f 7e       	andi	r24, 0xEF	; 239
 638:	80 93 32 00 	sts	0x0032, r24
	PORTD &= ~(1<<defBriteLED2);	//turn off visible LED 2 on powerup
 63c:	80 91 32 00 	lds	r24, 0x0032
 640:	8f 7d       	andi	r24, 0xDF	; 223
 642:	80 93 32 00 	sts	0x0032, r24
	PORTB &= ~(1<<defBriteLED3);	//turn off visible LED 3 on powerup
 646:	80 91 38 00 	lds	r24, 0x0038
 64a:	8f 7d       	andi	r24, 0xDF	; 223
 64c:	80 93 38 00 	sts	0x0038, r24
	PORTB &= ~(1<<defBriteLED4);	//turn off visible LED 4 on powerup
 650:	9f e7       	ldi	r25, 0x7F	; 127
 652:	80 91 38 00 	lds	r24, 0x0038
 656:	89 23       	and	r24, r25
 658:	80 93 38 00 	sts	0x0038, r24
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <turnOnVisibleLeds>:
}

//----------------------------------------------------------------------------
//Routine:       turnOnVisibleLeds 
//
//Function:      There are four visible LEDs that point down, two red and two blue.
//				 This routine turns them all on
//Varibles passed:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void turnOnVisibleLeds(void)
{
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1<<defBriteLED1);	//turn off visible LED 1 on powerup
 66a:	80 91 32 00 	lds	r24, 0x0032
 66e:	80 61       	ori	r24, 0x10	; 16
 670:	80 93 32 00 	sts	0x0032, r24
	PORTD |= (1<<defBriteLED2);	//turn off visible LED 2 on powerup
 674:	80 91 32 00 	lds	r24, 0x0032
 678:	80 62       	ori	r24, 0x20	; 32
 67a:	80 93 32 00 	sts	0x0032, r24
	PORTB |= (1<<defBriteLED3);	//turn off visible LED 3 on powerup
 67e:	80 91 38 00 	lds	r24, 0x0038
 682:	80 62       	ori	r24, 0x20	; 32
 684:	80 93 38 00 	sts	0x0038, r24
	PORTB |= (1<<defBriteLED4);	//turn off visible LED 4 on powerup
 688:	80 91 38 00 	lds	r24, 0x0038
 68c:	80 68       	ori	r24, 0x80	; 128
 68e:	80 93 38 00 	sts	0x0038, r24
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret
