
AVRASM ver. 2.1.51  D:\Stewart\My Documents\AVRproj\M328-ST7565\M328-ST7565.asm Wed Dec 19 14:51:32 2012

[builtin](2): Including file 'C:\Program Files\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.46\AvrAssembler/Include\m328pdef.inc'
D:\Stewart\My Documents\AVRproj\M328-ST7565\M328-ST7565.asm(17): Including file 'D:\Stewart\My Documents\AVRproj\M328-ST7565\macros.inc'
D:\Stewart\My Documents\AVRproj\M328-ST7565\M328-ST7565.asm(382): Including file 'D:\Stewart\My Documents\AVRproj\M328-ST7565\subs.asm'
D:\Stewart\My Documents\AVRproj\M328-ST7565\M328-ST7565.asm(383): Including file 'D:\Stewart\My Documents\AVRproj\M328-ST7565\ST7565.asm'
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328P
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328PDEF_INC_
                 #define _M328PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328P
                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 ;
                 ; see the ST7565.asm file for the LCD stuff
                 ;
                 ; For 8Mhz clk. 
                 ;
                 ; Most of this is my own but some bits came off the internet and are
                 ; indicated with origins.
                 ; The font is a modified one, original was from Adafruit (where I got the screen). Just some bit-swapping.
                 ; 
                 ; 
                 ; Use for whatever you want. 
                 
                 
                 ;.include	"m328pdef.inc"		; if using AS4, pick a processor. Not required for AS6.
                 ;.include	"m168def.inc"
                 .include	"macros.inc"
                 
                 .macro	sb
                 	sbr	@0,(1<<@1)
                 .endmacro
                 
                 .macro	cb
                 	cbr	@0,(1<<@1)
                 .endmacro
                 
                 
                 ; sets the output stream to either null/serial/ram
                 .macro	stream
                 	push	temp1
                 	ldi	temp1,@0
                 	sts	stream_destination,temp1
                 	pop	temp1
                 .endmacro
                 
                 
                 
                 ; Jump if Equal
                 .macro	jeq
                 	cpi	@0,@1
                 	brne	m1
                 	rjmp	@2
                 m1:
                 .endmacro
                 
                 ; Jump if Not Equal
                 .macro	jne
                 	cpi	@0,@1
                 	brne	@2
                 .endmacro
                 
                 
                 ; milliseconds delay. 8-bit
                 .macro	msdelay
                 	ldi	temp1,@0
                 	call	sd1
                 .endmacro
                 
                 ; centi-seconds delay (1/10th sec) 8-bit
                 .macro	csdelay
                 	ldi	temp1,@0
                 	call	sd2
                 .endmacro
                 
                 
                 ; sends a string to the output stream
                 .macro	stringout
                 	call	sendstring
                 	.db	@0,0
                 .endmacro
                 
                 ; sends a CR/LF to the o/p stream
                 .macro	newline
                 	call	newln
                 .endmacro
                 
                 
                 ; 
                 .macro	ldx
                 	.if @0==1
                 	ldi	xl,low(@1)
                 	ldi	xh,high(@1)
                 	.elif @0==2
                 	ldi	xl,low(2*@1)
                 	ldi	xh,high(2*@1)
                 	.else
                 	.error "must be ram or rom"
                 	.endif
                 .endmacro
                 
                 .macro	ldy
                 	.if @0==1
                 	ldi	yl,low(@1)
                 	ldi	yh,high(@1)
                 	.elif @0==2
                 	ldi	yl,low(2*@1)
                 	ldi	yh,high(2*@1)
                 	.else
                 	.error "must be ram or rom"
                 	.endif
                 .endmacro
                 
                 .macro	ldz
                 	.if @0==1
                 	ldi	ZL,low(@1)
                 	ldi	ZH,high(@1)
                 	.elif @0==2
                 	ldi	ZL,low(2*@1)
                 	ldi	ZH,high(2*@1)
                 	.else
                 	.error "must be ram or rom"
                 	.endif
                 .endmacro
                 
                 .macro	ldACC
                 	.if @0==1
                 	ldi	accL,low(@1)
                 	ldi	accH,high(@1)
                 	.elif @0==2
                 	ldi	accL,low(2*@1)
                 	ldi	accH,high(2*@1)
                 	.else
                 	.error "must be ram or rom"
                 	.endif
                 .endmacro
                 
                 
                 ; sends a single char to the output stream
                 .macro	send
                 	push	temp1
                 	ldi	temp1,@0
                 	call	stream_out
                 	pop	temp1
                 .endmacro
                 
                 
                 
                 .macro	lcd_clear
                 	call	LCD_clearscreen
                 .endmacro
                 
                 .macro	lcd_set		; sets cursor position row,coll
                 	push	temp1
                 	ldi	temp1,@0
                 	sts	row,temp1
                 	ldi	temp1,@1
                 	sts	coll,temp1
                 	pop	temp1
                 .endmacro
                 
                 .macro	lcd_page	; use with put_LCDchar for direct row writes, no curs pos
                 	ldi	temp1,@0
                 	sts	Lpage,temp1
                 	call	lcd_set_page
                 .endmacro
                 
                 .macro	lcd_coll		; sets the pixel col in the page
                 	ldi	temp1,@0
                 	sts	Lcoll,temp1
                 	call	lcd_set_coll
                 .endmacro
                 
                 
                 
                 .macro	lcd_invert
                 	sb	bitflags,invert
                 .endmacro
                 
                 
                 .macro	lcd_normal
                 	cb	bitflags,invert
                 .endmacro
                 
                 
                 ;************************************************************************/
                 ;*                                                                      */
                 ;*                      Delay Macro 8 ... 65543 Cycle                   */
                 ;*                                                                      */
                 ;*              Author: Peter Dannegger                                 */
                 ;*                                                                      */
                 ;************************************************************************/
                 ;cydelay 8 ... 65543 cycle
                 .macro  cydelay
                         ldi     r24, low( @0 - 8 )
                         ldi     r25, high( @0 - 8 )
                         sbiw    r24, 4
                         brcc    pc - 1
                         cpi     r24, 0xFD
                         brcs    pc + 4
                         breq    pc + 3
                         cpi     r24, 0xFF
                         breq    pc + 1
                 .endmacro
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;*****************************************************************
                 ;*	file: macros.inc
                 ;*
                 ;*	Description:
                 ;*	Source file for application note AVR001 - Conditional Assembly
                 ;*	and Portability Macros.
                 ;*
                 ;*	Defines a number of macros that makes it easier to access
                 ;*	IO registers and extended IO registers (or SRAM locations up
                 ;*  to adress $FF if applicable).
                 ;*	The macros can be used to produce code that assembles to
                 ;*	any target AVR, without considering if the accessed IO
                 ;*	registers are located in low, standard or extended IO space
                 ;*
                 ;* $Revision: 2.2 $
                 ;* $Author: jllassen $
                 ;* $Date: Wednesday, January 26, 2005 10:55:18 UTC $
                 ;*****************************************************************
                 
                 
                 ;*********************************************************
                 ;*	Byte access anywhere in IO or lower $FF of data space
                 ;* 	STORE - Store register in IO or data space
                 ;* 	LOAD  - Load register from IO or data space
                 ;*********************************************************
                 
                 .macro store 		;Arguments: Address, Register
                 	.if	@0>0x3F
                 		sts	@0, @1
                 	.else
                 		out	@0, @1
                 	.endif
                 .endmacro
                 
                 .macro load 		;Arguments: Register, Address
                 	.if	@1>0x3F
                 		lds	@0, @1
                 	.else
                 		in	@0, @1
                 	.endif
                 .endmacro
                 
                 .equ	true		= 0xff
                 .equ	false		= 0
                 
                 .equ	cr		= 0x0d
                 .equ	lf		= 0x0a
                 
                 ; output stream destinations
                 .equ	null_stream	= 0	; nowhere
                 .equ	serial_stream	= 1	; serial out
                 .equ	memory_stream	= 2	; RAM
                 .equ	lcd_stream	= 3	; LCD screen
                 
                 .equ	ram = 1			; used for the ldX/ldY/ldZ/ldACC macros
                 .equ	rom = 2
                 
                 
                 ;==============================================================
                 ;.def	 =		r0	; 
                 ;.def	 =		r1	;
                 .def	zero	=	r2	; always contains zero
                 ;.def	 =		r3	;
                 ;.def	 =		r4	;-rand used to produce randonm numbers
                 ;.def	 =		r5	;-rand
                 ;.def	 =		r6	;-rand
                 ;.def	 =		r7	;-rand
                 ;.def	 =		r8	;
                 ;.def	 =		r9	; 
                 ;.def	 =		r10	; 
                 ;.def	 =		r11	; 
                 ;.def	 =		r12	; 
                 ;.def	 =		r13	; 
                 ;.def	 =		r14	; 
                 ;.def	 =		r15	; 
                 
                 .def	temp1	=	r16	; temp register
                 .def	temp2	=	r17	; temp register
                 .def	temp3	=	r18	; temp register
                 .def	loopcounter =	r19	; used for loop counting
                 ;.def	 =		r20		; 
                 ;.def	 =		r21		; 
                 ;.def	 =		r22		; 
                 
                 .def	bitflags =	r23	; assorted bit flags ----|
                 ;							 |
                 ; r24 & 25 can be used for 16-bit operations             |
                 .def	accL =		r24	;			 |
                 .def	accH =		r25	;			 |
                 ;********************************			 |
                 ; These are the bitflags-bits. Use with sb & cb macros <-| 
                 .equ	invert		= 0	; set every second in T0 int routine
                 ;.equ			= 1	; for LCD
                 ;.equ			= 2	; 
                 ;.equ			= 3	; 
                 ;.equ			= 4	; 
                 ;.equ			= 5	; 
                 ;.equ			= 6	; 
                 ;.equ			= 7	; 
                 
                 
                 
                 
                 ;==============================================================================
                 ;==============================================================================
                 .dseg                        ; Start data segment
                 
000100           stream_destination:	.byte	1	; where an output stream is sent
                 					; (null, serial, memory, lcd)
                 ;==============================================================================
                 
                 .cseg
                 ; ATmega328/168 vectors, 2 bytes per entry
                 	.org	0x0000
000000 940c 0032 	jmp	RESET			; Reset Handler
                 	.org	0x0002
                 ;	jmp	EXT_INT0		; IRQ0 Handler
                 	.org	0x0004
                 ;	jmp	EXT_INT1		; IRQ1 Handler
                 	.org	0x0006
                 ;	jmp	PCINT0			; PCINT0 Handler
                 	.org	0x0008
                 ;	jmp	PCINT1			; PCINT1 Handler
                 	.org	0x000A
                 ;	jmp	PCINT2			; PCINT2 Handler
                 	.org	0x000C
                 ;	jmp	WDT			; Watchdog Timer Handler
                 	.org	0x000E
                 ;	jmp	TIM2_COMPA		; Timer2 Compare A Handler
                 	.org	0x0010
                 ;	jmp	TIM2_COMPB		; Timer2 Compare B Handler
                 	.org	0x0012
                 ;	jmp	TIM2_OVF		; Timer2 Overflow Handler
                 	.org	0x0014
                 ;	jmp	TIM1_CAPT		; Timer1 Capture Handler
                 	.org	0x0016
                 ;	jmp	TIM1_COMPA		; Timer1 Compare A Handler
                 	.org	0x0018
                 ;	jmp	TIM1_COMPB		; Timer1 Compare B Handler
                 	.org	0x001A
                 ;	jmp	TIM1_OVF		; Timer1 Overflow Handler
                 	.org	0x001C
                 ;	jmp	TIM0_COMPA		; Timer0 Compare A Handler
                 	.org	0x001E
                 ;	jmp	TIM0_COMPB		; Timer0 Compare B Handler
                 	.org	0x0020
                 ;	jmp	TIM0_OVF		; Timer0 Overflow Handler
                 	.org	0x0022
                 ;	jmp	SPI_STC			; SPI Transfer Complete Handler
                 	.org	0x0024
                 ;	jmp	USART_RXC		; USART, RX Complete Handler
                 	.org	0x0026
                 ;	jmp	USART_UDRE		; USART, UDR Empty Handler
                 	.org	0x0028
                 ;	jmp	USART_TXC		; USART, TX Complete Handler
                 	.org	0x002A
                 ;	jmp	ADC			; ADC Conversion Complete Handler
                 	.org	0x002C
                 ;	jmp	EE_RDY			; EEPROM Ready Handler
                 	.org	0x002E
                 ;	jmp	ANA_COMP		; Analog Comparator Handler
                 	.org	0x0030
                 ;	jmp	TWI			; 2-wire Serial Interface Handler
                 	.org	0x0032
                 ;	jmp	SPM_RDY			; Store Program Memory Ready Handler
                 
                 
                 	
                 
                 
                 ;******************************************************************************
                 ;			reset vector (code start)
                 ;******************************************************************************
                 
                 RESET:
                 ; basic ports setup
                 ;******************************************************************************
                 ; port-D
                 ; bits are assigned as....
                 ; 0-RXD		(in)  0		; RS485 receive
                 ; 1-TXD		(out) 1		; RS485 transmit
                 ; 2-INT0		(in)  0		; 
                 ; 3-INT1		(out) 1		; 
                 ; 4-RS485 DIR	(out) 1		; RS485 low=RX high=TX
                 ; 5-n/u		(in)  0		; 
                 ; 6-n/u		(in)  0		; 
                 ; 7-n/u		(in)  0		; 
000032 ef0a      	ldi	temp1,0b11111010
000033 b90a      	out	DDRD,temp1
000034 ec0f      	ldi	temp1,0b11001111 ; pullups and levels (RS485=RX on startup)
000035 b90b      	out	PORTD,temp1
                 ;******************************************************************************
                 ; port-C (ADC inputs)
                 ; bits are assigned as....
                 ; 0-n/u		(out) 1		; 
                 ; 1-n/u		(out) 1		; 
                 ; 2-n/u		(out) 1		; 
                 ; 3-n/u		(out) 1		; 
                 ; 4-n/u		(in)  0		; 
                 ; 5-n/u		(in)  0		; 
                 ; 6-RST pin	(in)  0		; reset pin
                 ; 7-NO bit 7 implimented
000036 ef0f      	ldi	temp1,0b11111111; all out's
000037 b907      	out	DDRC,temp1	; set direction
000038 2700      	clr	temp1
000039 b908      	out	PORTC,temp1	; start all OFF
                 ;******************************************************************************
                 ; port-B
                 ; bits are assigned as....
                 ; 0-			(in)  0		; 
                 ; 1-			(in)  0		; 
                 ; 2-SS			(out) 1		; SS for SPI port
                 ; 3-MOSI			(out) 1		; MOSI
                 ; 4-MISO			(in)  0		; MISO
                 ; 5-SCK			(out) 1		; clock for SPI port
                 ; 6-			(in)  0		; used for xtal
                 ; 7-			(in)  0		; used for xtal
                 
00003a e20c      	ldi	temp1,0b00101100	;
00003b b904      	out	DDRB,temp1
00003c e20c      	ldi	temp1,0b00101100
00003d b905      	out	PORTB,temp1
                 
                 ;******************************************************************************
                 ;	end of port setup
                 ;******************************************************************************
                 
00003e 2422      	clr	zero			; always a zero (r2)
                 
                 ; set up random number seed
00003f e505      	ldi	temp1,0x55
000040 2e40      	mov	r4,temp1
000041 ea0a      	ldi	temp1,0xaa
000042 2e50      	mov	r5,temp1
000043 e505      	ldi	temp1,0x55
000044 2e60      	mov	r6,temp1
000045 ea0a      	ldi	temp1,0xaa
000046 2e70      	mov	r7,temp1
                 
000047 2777      	clr	bitflags
                 
                 ; clear ram to zero
000048 e0e0
000049 e0f1      	ldZ	ram,SRAM_START
00004a e030      	ldi	loopcounter,0		; 256 bytes of ram
00004b e018      	ldi	temp2,(SRAM_SIZE/256)	; how many pages of 256 bytes
                 
00004c 9221      wploop:	st	z+,zero			; write 0's to ram
00004d 953a      	dec	loopcounter		; inner loop
00004e f7e9      	brne	wploop
00004f 951a      	dec	temp2
000050 f7d9      	brne	wploop			; outer loop
                 
                 
                 ; set up stack
000051 e008      	ldi	temp1,high(RAMEND)	; Init SP
000052 bf0e      	out	SPH,temp1
000053 ef0f      	ldi	temp1,low(RAMEND)
000054 bf0d      	out	SPL,temp1
                 
000055 940e 01d2 	call	init_st7565		; starts LCD screen
                 
000057 930f
000058 e003
000059 9300 0100
00005b 910f      	stream	lcd_stream		; o/p stream to screen
                 
                 
                 ; quick demo
                 ; =============================================================================
                 ; =============================================================================
                 
00005c d007      main:	rcall	topbox			; basic frame & text
00005d d094      	rcall	showallchars		; pages through all chars
00005e 940e 027d 	lcd_clear			; clears screen
000060 e10e
000061 940e 0197 	csdelay	30			; wait 3 sec (30 x 0.1 sec)
000063 cff8      	rjmp	main			; cycle forever
                 
                 ; =============================================================================
                 ; =============================================================================
                 
                 
                 topbox:
000064 d025      	rcall	box1			; draws frame
                 
000065 930f
000066 e001
000067 9300 0101
000069 e001
00006a 9300 0102
00006c 910f      	lcd_set	1,1			; position for write
                 
00006d 6071      	lcd_invert			; 'clear' chars, black backgound
00006e 940e 014e
000070 4820
000071 6c65
000072 6f6c
000073 7720
000074 726f
000075 646c
000076 0020      	stringout " Hello world "
000077 7f7e      	lcd_normal			; and back to normal black chars
                 
000078 930f
000079 e002
00007a 9300 0101
00007c e001
00007d 9300 0102
00007f 910f      	lcd_set	2,1			; position for write
000080 940e 014e
000082 4820
000083 6c65
000084 6f6c
000085 7720
000086 726f
000087 646c
000088 0020      	stringout " Hello world "
000089 9508      	ret
                 
                 ; writes a frame around the top half of the screen
00008a e000
00008b 9300 0104
00008d 940e 02b8 box1:	lcd_coll 0		; positions to the horizontal pixel (0..127) on the current page
00008f e000
000090 9300 0103
000092 940e 02c6 	lcd_page 0		; sets the page (0..7)
                 
000094 ed05      	ldi	temp1,213	; top left corner box char
000095 d1c6      	rcall	put_LCDchar	; writes at the current horizontal pixel pos and page
                 
000096 ec0d      	ldi	temp1,205	; horizontal strip box char
000097 e117      	ldi	temp2,23
000098 d1a8      	rcall	put_many
                 
000099 eb08      	ldi	temp1,184	; top right corner box char
00009a d1c1      	rcall	put_LCDchar
                 ; and so on......
00009b e000
00009c 9300 0104
00009e 940e 02b8 	lcd_coll 0
0000a0 e001
0000a1 9300 0103
0000a3 940e 02c6 	lcd_page 1
0000a5 eb03      	ldi	temp1,179
0000a6 d1b5      	rcall	put_LCDchar
                 
0000a7 e000
0000a8 9300 0104
0000aa 940e 02b8 	lcd_coll 0
0000ac e002
0000ad 9300 0103
0000af 940e 02c6 	lcd_page 2
0000b1 eb03      	ldi	temp1,179
0000b2 d1a9      	rcall	put_LCDchar
                 
0000b3 e000
0000b4 9300 0104
0000b6 940e 02b8 	lcd_coll 0
0000b8 e003
0000b9 9300 0103
0000bb 940e 02c6 	lcd_page 3
0000bd ed04      	ldi	temp1,212
0000be d19d      	rcall	put_LCDchar
                 
0000bf ec0d      	ldi	temp1,205
0000c0 e117      	ldi	temp2,23
0000c1 d17f      	rcall	put_many
                 
0000c2 eb0e      	ldi	temp1,190
0000c3 d198      	rcall	put_LCDchar
                 
0000c4 e708
0000c5 9300 0104
0000c7 940e 02b8 	lcd_coll 120
0000c9 e001
0000ca 9300 0103
0000cc 940e 02c6 	lcd_page 1
0000ce eb03      	ldi	temp1,179
0000cf d18c      	rcall	put_LCDchar
                 
0000d0 e708
0000d1 9300 0104
0000d3 940e 02b8 	lcd_coll 120
0000d5 e002
0000d6 9300 0103
0000d8 940e 02c6 	lcd_page 2
0000da eb03      	ldi	temp1,179
0000db d180      	rcall	put_LCDchar
0000dc 9508      	ret
                 
                 
                 ; writes random big numbers
0000dd e505
0000de 9300 0104
0000e0 940e 02b8 answ:	lcd_coll 85		; horizontal pixel location
0000e2 e001
0000e3 9300 0103
0000e5 940e 02c6 	lcd_page 1		; vertical page (row)
0000e7 940e 01bd 	call	getone		; random number (0...9)
0000e9 940e 02cb 	call	put_num16
0000eb 940e 0312 	call	lcd_point	; then the decimal point
0000ed 940e 01bd 	call	getone		; random number (0...9)
0000ef 940e 02cb 	call	put_num16
0000f1 9508      	ret
                 
                 
                 
                 ; fills the bottom half of the screen with a flipping display as
                 ; all the chars are shown. cr & lf are filtered out.
                 showallchars:
0000f2 940e 00dd 	call	answ			; random double sized numbers
0000f4 930f
0000f5 e004
0000f6 9300 0101
0000f8 e000
0000f9 9300 0102
0000fb 910f      	lcd_set	4,0			; position for write, below topbox
0000fc e534      	ldi	loopcounter,84
0000fd e000      	ldi	temp1,0			
0000fe 300d
0000ff f409
000100 c004      wr:	jeq	temp1,0x0d,skp		; filter out cr/lf
000101 300a
000102 f409
000103 c001      	jeq	temp1,0x0a,skp
000104 d102      	rcall	lcd_char		; uses row/coll with autoinc
000105 9503      skp:	inc	temp1
000106 953a      	dec	loopcounter
000107 f7b1      	brne	wr
000108 930f      	push	temp1
000109 e10e
00010a 940e 0197 	csdelay	30			; 3-sec delay
                 
00010c 940e 00dd 	call	answ			; random double sized numbers
00010e 930f
00010f e004
000110 9300 0101
000112 e000
000113 9300 0102
000115 910f      	lcd_set	4,0			; position for write
000116 e534      	ldi	loopcounter,84
000117 910f      	pop	temp1
000118 d0ee      wr2:	rcall	lcd_char		; uses row/coll with autoinc
000119 9503      	inc	temp1
00011a 953a      	dec	loopcounter
00011b f7e1      	brne	wr2
00011c 930f      	push	temp1
00011d e10e
00011e 940e 0197 	csdelay	30			; 3-sec delay
                 
000120 940e 00dd 	call	answ			; random double sized numbers
000122 930f
000123 e004
000124 9300 0101
000126 e000
000127 9300 0102
000129 910f      	lcd_set	4,0			; position for write
00012a e534      	ldi	loopcounter,84
00012b 910f      	pop	temp1
00012c d0da      wr3:	rcall	lcd_char		; uses row/coll with autoinc
00012d 9503      	inc	temp1
00012e 953a      	dec	loopcounter
00012f f7e1      	brne	wr3
000130 930f      	push	temp1
000131 e10e
000132 940e 0197 	csdelay	30			; 3-sec delay
                 
000134 940e 00dd 	call	answ			; random double sized numbers
000136 930f
000137 e004
000138 9300 0101
00013a e000
00013b 9300 0102
00013d 910f      	lcd_set	4,0			; position for write
00013e e534      	ldi	loopcounter,84
00013f 910f      	pop	temp1
000140 300d
000141 f409
000142 c004      wr4:	jeq	temp1,0x0d,skp2		; char value wrapped round
000143 300a
000144 f409
000145 c001      	jeq	temp1,0x0a,skp2		; so filter out cr/lf again
000146 d0c0      	rcall	lcd_char		; uses row/coll with autoinc
000147 9503      skp2:	inc	temp1
000148 953a      	dec	loopcounter
000149 f7b1      	brne	wr4
00014a e10e
00014b 940e 0197 	csdelay	30			; 3-sec delay
00014d 9508      	ret
                 
                 
                 
                 
                 .include	"subs.asm"
                 
                 
                 
                 ;****************************************************************
                 ; DiSPLayRom - Send a null terminated message to the output stream
                 ; This version works with
                 ; micros that don't support enhanced LPM
                 ; instructions.
                 ; Uses Z,R0,temp1
                 ;****************************************************************
                 sendstring:
00014e 91ff      	pop	ZH
00014f 91ef      	pop	ZL		;move Stack Pointer to Z-register
000150 930f      	push	temp1
000151 920f      	push	r0
                 
000152 0fee      	lsl	ZL		;shift Z-register over for
000153 1fff      	rol	ZH		;LPM operations
000154 95c8      DR10:	lpm	 		;byte character from rom
000155 9631      	adiw	ZL,1		;inc Z-register
000156 2d00      	mov	temp1,r0
000157 3000      	cpi	temp1,0		;test for end of string
000158 f011      	breq	Rone0		;jmp when end of string
000159 d069      	rcall	stream_out	;diSPLay data
00015a cff9      	rjmp	DR10
                 
00015b 95f6      Rone0:	lsr	ZH		;restore the Stack by pointing
00015c 95e7      	ror	ZL		;Z just past the rom-based string
00015d 900f      	pop	r0
00015e 910f      	pop	temp1
00015f 93ef      	push	ZL		;then push it on the Stack so
000160 93ff      	push	ZH		;the return operation places it
000161 9508      	ret			;in the Program Counter
                 
                 
                 
                 ; hex to ascii by lookup table
000162 93ef      h_a:	push	ZL
000163 93ff      	push	ZH
000164 edec
000165 e0f2      	ldz	rom,table1
000166 700f      	andi	temp1,0b00001111
000167 0fe0      	add	ZL,temp1
000168 f408      	brcc	J2
000169 95f3      	inc	ZH
00016a 9104      J2:	lpm	temp1,z
00016b 91ff      	pop	ZH
00016c 91ef      	pop	ZL
00016d 9508      	ret
                 
00016e 3130
00016f 3332
000170 3534
000171 3736
000172 3938
000173 4241
000174 4443
000175 4645      table1:	.db	'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
                 
                 
                 
                 
                 
                 
                 
                 ; *****************************************************************************
                 ; DESCR: sends a char to the o/p stream as two ascii hex chars
                 ; ENTRY: data in temp1
                 ; EXIT: 
                 ; CHANGES: 
                 ; USES: 
                 ; *****************************************************************************
                 hexout:
000176 930f      	push	temp1
000177 930f      	push	temp1
000178 9502      	swap	temp1
000179 dfe8      	rcall	h_a
00017a d048      	rcall	stream_out
00017b 910f      	pop	temp1
00017c dfe5      	rcall	h_a
00017d d045      	rcall	stream_out
00017e 910f      	pop	temp1
00017f 9508      	ret
                 
                 
                 
                 ; *****************************************************************************
                 ; DESCR: sends a cr & lf to the output stream
                 ; ENTRY: -
                 ; EXIT: two chars sent
                 ; CHANGES: -
                 ; USES: stream_out
                 ; *****************************************************************************
000180 930f      newln:	push	temp1
000181 e00d      	ldi	temp1,0x0d
000182 d040      	rcall	stream_out
000183 e00a      	ldi	temp1,0x0a
000184 d03e      	rcall	stream_out
000185 910f      	pop	temp1
000186 9508      	ret
                 
                 
                 ; *****************************************************************************
                 ; DESCR: software delay of 1ms @8mhz
                 ; ENTRY: ms count to delay in temp1
                 ; EXIT: 
                 ; CHANGES: 
                 ; USES: 
                 ; *****************************************************************************
                 ; temp1-ms delay
000187 938f      sd1:	push	r24
000188 939f      	push	r25
000189 e388
00018a e19f
00018b 9704
00018c f7f0
00018d 3f8d
00018e f018
00018f f011
000190 3f8f
000191 f001      paws:	cydelay	8000
000192 950a      	dec	temp1
000193 f7a9      	brne	paws
000194 919f      	pop	r25
000195 918f      	pop	r24
000196 9508      	ret
                 
                 
                 
                 ; *****************************************************************************
                 ; DESCR: software delay of 100ms @8mhz
                 ; ENTRY: temp1=number of 100ms steps to delay
                 ; EXIT: 
                 ; CHANGES: 
                 ; USES: 
                 ; *****************************************************************************
000197 938f      sd2:	push	r24
000198 939f      	push	r25
000199 931f      	push	temp2
                 
00019a e114      sd3:	ldi	temp2,20	; inner loop of 20 for 0.1 sec
00019b e388
00019c e99c
00019d 9704
00019e f7f0
00019f 3f8d
0001a0 f018
0001a1 f011
0001a2 3f8f
0001a3 f001      sd4:	cydelay	40000	; 5ms
0001a4 951a      	dec	temp2
0001a5 f7a9      	brne	sd4		; falls through after 0.1 sec
                 
0001a6 950a      	dec	temp1
0001a7 f791      	brne	sd3		; repeat 0.1 sec delay temp1 times
                 
0001a8 911f      	pop	temp2
0001a9 919f      	pop	r25
0001aa 918f      	pop	r24
0001ab 9508      	ret
                 
                 
                 ; **********************************************************************************************
                 ; taken from AVR freaks. random num gen
                 ;
                 ;peret - Oct 12, 2007 - 02:12 AM
                 ;Post subject: Here's a good, quick RNG. 
                 ;The period (2^31-1) is prime so it's not easy to short-circuit it. 
                 ;Half the time it takes 6 cycles and the other half it takes 15, 
                 ;for an average of 10.5, if it's register-based as shown. 
                 ;You can make a quicker, shorter one by using a 15 or 16 bit algorithm instead of 31. 
                 ;How to choose the polynomial? It's a black art, but CRC polynomials generally 
                 ;work well. 
                 ;In fact this kind of RNG is mathematically the same as taking the CRC of an 
                 ;infinite string of 1's. If you already have a CRC routine in your code you get an RNG for free.
                 ;
                 ;Code:
                 ; 31-bit random number
                 ; primitive polynomial order 31
                 ; (1)0100000 10101010 10010101 10110101 (20 AA 95 B5)
                 ; shift before XOR
                 rand_31:
0001ac 0c44      	lsl	r4		; shift first
0001ad 1c55      	rol	r5
0001ae 1c66      	rol	r6
0001af 1c77      	rol	r7
0001b0 fe77      	sbrs	r7,7		; test MSB	
0001b1 9508      	ret			; clear, no XOR
                 
0001b2 931f      	push	temp2
0001b3 eb15      	ldi	temp2,0xB5	; first poly byte
0001b4 2641      	eor	r4,temp2	; XOR it in
0001b5 e915      	ldi	temp2,0x95	; second byte of poly
0001b6 2651      	eor	r5,temp2
0001b7 ea1a      	ldi	temp2,0xAA	; same routine
0001b8 2661      	eor	r6,temp2
0001b9 e210      	ldi	temp2,0x20
0001ba 2671      	eor	r7,temp2
0001bb 911f      	pop	temp2
0001bc 9508      	ret 
                 ; *************************************************************************************************
                 
                 ; gets a number between 0..9
0001bd dfee      getone:	rcall	rand_31
0001be 2d06      	mov	temp1,r6
0001bf 700f      	andi	temp1,0b00001111
0001c0 300a      	cpi	temp1,10
0001c1 f7d8      	brsh	getone		; just loop till in range 0..9
0001c2 9508      	ret
                 
                 
                 
                 
                 ; *****************************************************************************
                 ; DESCR: sends a char to the choosen o/p stream. (serial or memory buffer)
                 ; ENTRY: [stream_destination] loaded with stream value. 
                 ; 0=null, 1=serial, 2=memory, 3=lcd
                 ; EXIT: -
                 ; CHANGES: 
                 ; USES: 
                 ; *****************************************************************************
                 
                 ; bits of this are removed as not present in this skeleton project
                 stream_out:
0001c3 931f      	push	temp2
0001c4 9110 0100 	lds	temp2,stream_destination
0001c6 2311      	tst	temp2
0001c7 f409      	brne	somewhere
0001c8 c004      	rjmp	str_ex			; null so just exit
                 somewhere:
                 ;	jeq	temp2,serial_stream,serout
                 ;	jeq	temp2,memory_stream,memout
0001c9 3013
0001ca f409
0001cb c003      	jeq	temp2,lcd_stream,lcdout
0001cc c000      	rjmp	str_ex			; unknown so just exit
                 
                 ;serout:	call	sersend		; char to serial port
                 ;	rjmp	str_ex
                 
                 memout:
                 ;	call	Pmem		; 'print' the char to ram
0001cd 911f      str_ex:	pop	temp2
0001ce 9508      	ret
                 
0001cf 940e 0207 lcdout:	call	lcd_char
0001d1 cffb      	rjmp	str_ex
                 
                 
                 
                 
                 .include	"ST7565.asm"
                 
                 
                 /*
                 *******************************************************************************************
                 Use for whatever you want. I make no claims to suitability of purpose or functionality.
                 Your on your own with this. It you dont like how it does something then change it.
                 Supplied to the public domain, no restrictions.
                 StewieTee
                 *******************************************************************************************
                 
                 
                 
                 
                 Its rough and not optimised but it suits my needs. Feel free to clean it up
                 and make it a work of art :)
                 
                 There is no actual cursor on the screen, it just means where the next char
                 gets written to.
                 
                 assorted macros in the macros.inc file to ease use
                 
                 This module enables a serial ST7565 128x64 graphic LCD to be used without
                 having to map the whole thing into ram. It writes the data (characters)
                 direct to the screen using character cell row/collum adressing.
                 Its for use in text-mode, not full graphic.
                 You get 8 rows of 21 chars. Limited double size display, numbers only
                 (see towards end of file)
                 
                 To bit-map the complete display would use 1024 bytes of ram, this lets you do
                 neat graphics. Using the routines below gives you no 'real' graphics except
                 what you can do with box-drawing chars. Not as fancy but only takes 5-bytes
                 of ram. Many projects just need to show text so this is fine.
                 
                 This example uses software SPI so you dont have to share the hardware 
                 SPI port, which in my case is running a RFM12 in interrupt routines.
                 The display is a low priority item so if the write process is constantly 
                 interrupted by the RFM12 stuff and whatever other interrupts are running,
                 it does not really matter.
                 
                 It uses 5 bytes of ram and 5 port bits for the assorted control signals
                 
                 A 'normal' 16x2 lcd display needs 7 signals (if in 4-bit mode). This only
                 uses 5 and you have a bigger display to play with.
                 
                 You can only write to the screen, not read from it. Its a limitation
                 of the cheap serial (and very usefull) screens.
                 Available from:
                 http://www.adafruit.com/products/250
                 
                 The displays run at 3.3V and I'm using an ATMEGA328P @ 8Mhz, also at 3.3V, + RFM12B
                 so interfacing is easy, no levelshifting required.
                 
                 If you just need text/numbers, the font table can be reduced to loose the box-drawing
                 and other special chars.
                 
                 */
                 
                 ; pins used for control (bit-banged SPI)
                 ; change to suit your needs
                 #define	LCD_CS		PORTC,0		; chip-select
                 #define	LCD_CS_DIR	DDRC,0		; chip-select pin direction
                 
                 #define	LCD_RST		PORTC,1		; reset pin
                 #define	LCD_RST_DIR	DDRC,1		; reset pin direction
                 
                 #define	LCD_A0		PORTC,2		; register/screen select
                 #define	LCD_A0_DIR	DDRC,2		; register/screen select pin direction
                 
                 #define	LCD_SCLK	PORTC,3		; serial clock
                 #define	LCD_SCLK_DIR	DDRC,3		; serial clock pin direction
                 
                 #define	LCD_SID		PORTD,7		; serial data (m-s-bit 1st)
                 #define	LCD_SID_DIR	DDRD,7		; serial data pin direction
                 
                 
                 ; commands etc for screen setup and driving
                 #define CMD_DISPLAY_OFF   0xAE
                 #define CMD_DISPLAY_ON    0xAF
                 
                 #define CMD_SET_DISP_START_LINE  0x40
                 #define CMD_SET_PAGE  0xB0
                 
                 #define CMD_SET_COLUMN_UPPER  0x10
                 #define CMD_SET_COLUMN_LOWER  0x01
                 
                 #define CMD_SET_ADC_NORMAL  0xA0
                 #define CMD_SET_ADC_REVERSE 0xA1
                 
                 #define CMD_SET_DISP_NORMAL 0xA6
                 #define CMD_SET_DISP_REVERSE 0xA7
                 
                 #define CMD_SET_ALLPTS_NORMAL 0xA4
                 #define CMD_SET_ALLPTS_ON  0xA5
                 #define CMD_SET_BIAS_9 0xA2 
                 #define CMD_SET_BIAS_7 0xA3
                 
                 #define CMD_RMW  0xE0
                 #define CMD_RMW_CLEAR 0xEE
                 #define CMD_INTERNAL_RESET  0xE2
                 #define CMD_SET_COM_NORMAL  0xC0
                 #define CMD_SET_COM_REVERSE  0xC8
                 #define CMD_SET_POWER_CONTROL  0x28
                 #define CMD_SET_RESISTOR_RATIO  0x20
                 #define CMD_SET_VOLUME_FIRST  0x81
                 #define CMD_SET_VOLUME_SECOND  0
                 #define CMD_SET_STATIC_OFF  0xAC
                 #define CMD_SET_STATIC_ON  0xAD
                 #define CMD_SET_STATIC_REG  0x0
                 #define CMD_SET_BOOSTER_FIRST  0xF8
                 #define CMD_SET_BOOSTER_234  0
                 #define CMD_SET_BOOSTER_5  1
                 #define CMD_SET_BOOSTER_6  3
                 #define CMD_NOP  0xE3
                 #define CMD_TEST  0xF0
                 
                 
                 .dseg
000101           row:		.byte	1	; LCD row pos for text cell positioning
000102           coll:		.byte	1	; collum as above for text cell positioning
                 
000103           Lpage:		.byte	1	; LCD page. Display is 8 pages (rows of pixels, 8 bits high, vertical)
000104           Lcoll:		.byte	1	; actual LCD collum address. Which byte of pixels (0...127) along the row
000105           Lwidth:		.byte	1	; width of big LCD chars. Nums and dot/comma are different
                 
                 
                 
                 
                 .cseg
                 
                 ; call this on power-up to initialise the display
                 init_st7565:
0001d2 9a38      	sbi	LCD_CS_DIR	; output
0001d3 9a40      	sbi	LCD_CS		; select pin high (not selected)
                 
0001d4 9a3a      	sbi	LCD_A0_DIR	; outputs
0001d5 9a42      	sbi	LCD_A0		; set high
                 
0001d6 9a39      	sbi	LCD_RST_DIR	; output
0001d7 9a41      	sbi	LCD_RST		; reset pin high
                 
0001d8 9a57      	sbi	LCD_SID_DIR	; output
0001d9 9a5f      	sbi	LCD_SID		; serial pin high
                 
0001da 9a3b      	sbi	LCD_SCLK_DIR	; output
0001db 9843      	cbi	LCD_SCLK	; clk pin low
                 
0001dc 9840      	cbi	LCD_CS		; LCD now selected/active
                 ; control pins now in startup state, ready to do a hard reset on display
0001dd 9841      	cbi	LCD_RST		; pull low to reset
0001de e00a
0001df 940e 0187 	msdelay	10		; wait 10ms
0001e1 9a41      	sbi	LCD_RST		; and back high again
0001e2 9a40      	sbi	LCD_CS		; and de-select
0001e3 e002
0001e4 940e 0187 	msdelay	2		; 2ms
                 
                 ; now start the initialisation of internal registers
0001e6 ea03      	ldi	temp1,CMD_SET_BIAS_7
0001e7 d05d      	rcall	LCD_command
                 
0001e8 ea00      	ldi	temp1,CMD_SET_ADC_NORMAL
0001e9 d05b      	rcall	LCD_command
                 
0001ea ec08      	ldi	temp1,CMD_SET_COM_REVERSE
0001eb d059      	rcall	LCD_command
                 
0001ec e600      	ldi	temp1,CMD_SET_DISP_START_LINE | 0x20
0001ed d057      	rcall	LCD_command
                 
0001ee e20c      	ldi	temp1,(CMD_SET_POWER_CONTROL | 0x4)
0001ef d055      	rcall	LCD_command
0001f0 e302
0001f1 940e 0187 	msdelay	50
                 
0001f3 e20e      	ldi	temp1,(CMD_SET_POWER_CONTROL | 0x6)
0001f4 d050      	rcall	LCD_command
0001f5 e302
0001f6 940e 0187 	msdelay	50
                 
0001f8 e20f      	ldi	temp1,(CMD_SET_POWER_CONTROL | 0x7)
0001f9 d04b      	rcall	LCD_command
0001fa e302
0001fb 940e 0187 	msdelay	50
                 
0001fd e206      	ldi	temp1,(CMD_SET_RESISTOR_RATIO | 0x6)
0001fe d046      	rcall	LCD_command
                 
                 ; next two are sent as a pair, 1st one enters a mode, 2nd is the value
0001ff e801      	ldi	temp1,CMD_SET_VOLUME_FIRST
000200 d044      	rcall	LCD_command
000201 e10e      	ldi	temp1,30		; 0..63 for contrast
000202 d042      	rcall	LCD_command
                 
000203 d079      	rcall	LCD_clearscreen		; clears and sets to page-0, display coll-0
                 					; (and row/coll=0)
                 
000204 ea0f      	ldi	temp1,CMD_DISPLAY_ON	; display ON
000205 d03f      	rcall	LCD_command
                 
000206 9508      	ret
                 
                 
                 ; **********************************************************************************
                 ; this is the basic "write a char to the screen" routine.
                 ; if you write past the end of the row, it wraps to the next one.
                 ; If you write off the bottom of the screen, it wraps to the top. No Scroll.
                 ; use the macro [lcd_set row,coll] to position the write location
                 ; then the char in temp1 goes to row/coll on screen
                 ; takes 195uSec to write a char or about 33ms per full-screen
                 ; (1-char at 57.6k = 173uSec)
                 ; The chacter positions are calculated each time from the current row/coll
                 ; values so the chars are on a fixed grid on the screen.
                 ; for exact horizontal pixel postioning, see 'lcd_set_coll' below.
                 ; If you write off-grid then another write (grid based write) can corrupt an existing screen char
                 ; if they overlap.
                 lcd_char:
000207 920f      	push	r0
000208 921f      	push	r1
000209 930f      	push	temp1
                 ; filter-out and action cr/lf 
00020a 300d
00020b f411      	jne	temp1,0x0d,tlf
00020c d023      	rcall	lcd_cr
00020d c01e      	rjmp	chardone
00020e 300a
00020f f411      tlf:	jne	temp1,0x0a,rest
000210 d025      	rcall	lcd_lf
000211 c01a      	rjmp	chardone
                 
                 ; 1st set the collum address. Each char is 6-pixels wide
000212 9100 0102 rest:	lds	temp1,coll	; get the char position (0..20)
000214 e016      	ldi	temp2,6		; 6 wide
000215 9f01      	mul	temp1,temp2	; get pixel collum pos
000216 9200 0104 	sts	Lcoll,r0	; save in ram
000218 d09f      	rcall	lcd_set_coll	; set it
                 ; now set the page, 0..7
000219 9100 0101 	lds	temp1,row
00021b 9300 0103 	sts	Lpage,temp1
00021d d0a8      	rcall	lcd_set_page
                 ; restore the char to show
00021e 910f      	pop	temp1		; char to display
00021f 930f      	push	temp1		; and resave
000220 d03b      	rcall	put_LCDchar	; send to screen
                 ; now update cursor pos
000221 9100 0102 	lds	temp1,coll
000223 9503      	inc	temp1
000224 3105      	cpi	temp1,21
000225 f008      	brlo	nocolinc
000226 2700      	clr	temp1
                 nocolinc:
000227 9300 0102 	sts	coll,temp1	; save back to ram
000229 2300      	tst	temp1		; see if zero so as to adjust row
00022a f409      	brne	chardone
                 ; if falls thru then adjust row value
00022b d00a      	rcall	lcd_lf
                 chardone:
00022c 910f      	pop	temp1
00022d 901f      	pop	r1
00022e 900f      	pop	r0
00022f 9508      	ret
                 
                 ; process a CR
000230 930f      lcd_cr:	push	temp1
000231 2700      	clr	temp1
000232 9300 0102 	sts	coll,temp1
000234 910f      	pop	temp1
000235 9508      	ret
                 
                 ; process a Line-feed
000236 930f      lcd_lf:	push	temp1
000237 9100 0101 	lds	temp1,row
000239 9503      	inc	temp1
00023a 3008      	cpi	temp1,8
00023b f008      	brlo	norowinc
00023c 2700      	clr	temp1
                 norowinc:
00023d 9300 0101 	sts	row,temp1
00023f 910f      	pop	temp1
000240 9508      	ret
                 
                 
                 
                 
                 
                 
                 ; char in temp1, count in temp2. Works in the curent PAGE (row)
                 ; this does not use character-cell row/coll addressing as in lcd_putchar.
                 ; instead it uses the current page and horizontal pixel position
                 put_many:
000241 d01a      	rcall	put_LCDchar
000242 951a      	dec	temp2
000243 f7e9      	brne	put_many
000244 9508      	ret
                 
                 
                 
                 
                 
                 ; to send comands to the display.
                 LCD_command:
000245 9842      	cbi	LCD_A0		; register select
000246 c002      	rjmp	reg
                 LCD_send:
000247 fd70      	sbrc	bitflags,invert	; invert
000248 9500      	com	temp1
                 
000249 930f      reg:	push	temp1
00024a 933f      	push	loopcounter
00024b e038      	ldi	loopcounter,8
00024c 9840      	cbi	LCD_CS
00024d 9843      LClp:	cbi	LCD_SCLK
00024e 1f00      	rol	temp1
00024f f010      	brcs	LC1
000250 985f      	cbi	LCD_SID		; clear op bit
000251 c001      	rjmp	doclk
000252 9a5f      LC1:	sbi	LCD_SID		; set o/p bit
000253 0000      doclk:	nop
000254 9a43      	sbi	LCD_SCLK
000255 953a      	dec	loopcounter
000256 f7b1      	brne	LClp
000257 9a40      	sbi	LCD_CS		; deselect display
000258 913f      	pop	loopcounter
000259 9a42      	sbi	LCD_A0
00025a 910f      	pop	temp1
00025b 9508      	ret
                 
                 
                 
                 ; takes about 120uSec at 8Mhz. 1-char at 57.6 = 173uSec
                 ; if the byte represents an alph-num char then a vertical 8-pixel strip is inserted
                 ; between each char. If a graphic then no 'blank' strip so the graphics
                 ; join together
                 ; This writes to the current page.
                 put_LCDchar:
00025c 93ef      	push	zl
00025d 93ff      	push	zh
00025e 930f      	push	temp1
00025f 931f      	push	temp2
000260 920f      	push	r0
000261 921f      	push	r1
                 
000262 3b00      	cpi	temp1,0xb0	; decide if to send a vertical 8-pixel strip
000263 f018      	brlo	doextra		; between chars
000264 3e00      	cpi	temp1,0xe0
000265 f408      	brsh	doextra
000266 c004      	rjmp	posit
                 
                 doextra:
000267 930f      	push	temp1
000268 2700      	clr	temp1		; inserts a leading pixel space between chars
000269 dfdd      	rcall	LCD_send	; ie a vertical row. 8 pixels between alpha-num chars
00026a 910f      	pop	temp1
                 
                 ; work out the start of a char bit pattern
00026b e0ee
00026c e0f8      posit:	ldZ	rom,font_base
00026d e015      	ldi	temp2,5		; font pattern is 5-bytes per char
00026e 9f01      	mul	temp1,temp2
00026f 0de0      	add	zl,r0
000270 1df1      	adc	zh,r1		; Z points at char pattern
                 
000271 e015      	ldi	temp2,5		; 5 bytes per char
                 
000272 9105      dochar:	lpm	temp1,z+	; send the 5 bytes (a complete character pattern) 
000273 dfd3      	rcall	LCD_send
000274 951a      	dec	temp2
000275 f7e1      	brne	dochar
                 
000276 901f      	pop	r1
000277 900f      	pop	r0
000278 911f      	pop	temp2
000279 910f      	pop	temp1
00027a 91ff      	pop	zh
00027b 91ef      	pop	zl
00027c 9508      	ret
                 
                 
                 ; wipes the screen and sets start position to 0,0 (top left) for chars
                 LCD_clearscreen:
00027d eb00      	ldi	temp1,CMD_SET_PAGE		; sets to page-0
00027e dfc6      	rcall	LCD_command
00027f e000      	ldi	temp1,0				; fill value (all bits off)
000280 d02c      	rcall	fillpage			; write it to a complete page (text line)
000281 eb01      	ldi	temp1,(CMD_SET_PAGE +1)		; page 1
000282 dfc2      	rcall	LCD_command
000283 e000      	ldi	temp1,0
000284 d028      	rcall	fillpage
000285 eb02      	ldi	temp1,(CMD_SET_PAGE + 2)	; page 2
000286 dfbe      	rcall	LCD_command
000287 e000      	ldi	temp1,0
000288 d024      	rcall	fillpage
000289 eb03      	ldi	temp1,(CMD_SET_PAGE + 3)
00028a dfba      	rcall	LCD_command
00028b e000      	ldi	temp1,0
00028c d020      	rcall	fillpage
00028d eb04      	ldi	temp1,(CMD_SET_PAGE + 4)
00028e dfb6      	rcall	LCD_command
00028f e000      	ldi	temp1,0
000290 d01c      	rcall	fillpage
000291 eb05      	ldi	temp1,(CMD_SET_PAGE + 5)
000292 dfb2      	rcall	LCD_command
000293 e000      	ldi	temp1,0
000294 d018      	rcall	fillpage
000295 eb06      	ldi	temp1,(CMD_SET_PAGE + 6)
000296 dfae      	rcall	LCD_command
000297 e000      	ldi	temp1,0
000298 d014      	rcall	fillpage
000299 eb07      	ldi	temp1,(CMD_SET_PAGE + 7)
00029a dfaa      	rcall	LCD_command
00029b e000      	ldi	temp1,0
00029c d010      	rcall	fillpage
                 ; set to top-LHS of screen
00029d e000
00029e 9300 0104
0002a0 940e 02b8 	lcd_coll 0
0002a2 e000
0002a3 9300 0103
0002a5 940e 02c6 	lcd_page 0
0002a7 2700      	clr	temp1
0002a8 9300 0101 	sts	row,temp1
0002aa 9300 0102 	sts	coll,temp1
0002ac 9508      	ret
                 
                 
                 ; fills a page (row) with the byte value (vertical 8-pixel strip) in temp1
                 fillpage:
0002ad 930f      	push	temp1
0002ae e100      	ldi	temp1,CMD_SET_COLUMN_UPPER
0002af df95      	rcall	LCD_command
0002b0 e001      	ldi	temp1,CMD_SET_COLUMN_LOWER
0002b1 df93      	rcall	LCD_command
0002b2 910f      	pop	temp1
                 
0002b3 e831      	ldi	loopcounter,129
0002b4 df92      lloop:	rcall	LCD_send
0002b5 953a      	dec	loopcounter
0002b6 f7e9      	brne	lloop
0002b7 9508      	ret
                 
                 
                 
                 
                 ; sets the collum pixel location (0...127)
                 ; addr in Lcol
                 ; use the macro lcd_col. ie 'lcd_col 83' to set the 
                 ; horizontal position to 83 pixels along the current page (row)
                 ; only useful for exact horizontal character position writes.
                 ; 'lcd_putchar' fits chars onto an exact regular grid based on
                 ; the row/col co-ordinate which is character based.
                 ; by using lcd_set_col, this specifies an exact horizontal position
                 ; to write a char using 'put_LCDchar' which writes a character at the
                 ; current horizontal location (0...127) on the current page (row) 0...7
                 lcd_set_coll:
0002b8 930f      	push	temp1
0002b9 9100 0104 	lds	temp1,Lcoll
0002bb 930f      	push	temp1
0002bc 7f00      	andi	temp1,0b11110000
0002bd 9502      	swap	temp1
0002be 6100      	ori	temp1,CMD_SET_COLUMN_UPPER
0002bf df85      	rcall	LCD_command
0002c0 910f      	pop	temp1
0002c1 700f      	andi	temp1,0b00001111
0002c2 6001      	ori	temp1,CMD_SET_COLUMN_LOWER
0002c3 df81      	rcall	LCD_command
0002c4 910f      	pop	temp1
0002c5 9508      	ret
                 
                 ; sets the page (row). A page is 128 vertical sections, 8-pixels high each
                 ; use the macro lcd_page
                 lcd_set_page:
0002c6 9100 0103 	lds	temp1,Lpage
0002c8 6b00      	ori	temp1,CMD_SET_PAGE
0002c9 df7b      	rcall	LCD_command
0002ca 9508      	ret
                 
                 
                 
                 
                 ; ************************************************************************
                 ; The large numbers section below was a bit of a messy afterthought
                 ;
                 ; ************************************************************************
                 ;
                 ; double size numbers and space/comma/plus/minus/decimal-point
                 ;
                 ; to use this, use the macros...
                 ; 	lcd_coll 0
                 ;	lcd_page 0
                 ; to set the display address. each number is double width & height
                 ; so the above sets to top left of display
                 ; the next double hieght/width row is
                 ;	lcd_coll 0
                 ;	lcd_page 2
                 ; 
                 ; This is only for large numbers, not text. The text is only small chars.
                 ;
                 ; Use actual numbers, not ascii. 1=1, not '1'
                 ; ***********************************************************************
                 put_num16:
0002cb 93ef      	push	zl
0002cc 93ff      	push	zh
0002cd 930f      	push	temp1
0002ce 931f      	push	temp2
0002cf 920f      	push	r0
0002d0 921f      	push	r1
                 
0002d1 e8e2
0002d2 e0f6      	ldZ	rom,num16
0002d3 e11c      	ldi	temp2,28
0002d4 9f01      	mul	temp1,temp2
0002d5 0de0      	add	zl,r0
0002d6 1df1      	adc	zh,r1		; z points at char pattern
0002d7 e01e      	ldi	temp2,14
                 
                 dochar1:
0002d8 9105      	lpm	temp1,z+
0002d9 df6d      	rcall	LCD_send
0002da 951a      	dec	temp2
0002db f7e1      	brne	dochar1
                 
0002dc 9100 0104 	lds	temp1,Lcoll	; is unchanged from writing 1st 2 blocks
0002de dfd9      	rcall	lcd_set_coll	; 2nd batch of 14 bytes starts at same coll
                 
0002df 9100 0103 	lds	temp1,Lpage
0002e1 9503      	inc	temp1		; next row
0002e2 9300 0103 	sts	Lpage,temp1	; update in ram
0002e4 dfe1      	rcall	lcd_set_page	; and set it
                 
0002e5 e01e      	ldi	temp2,14
                 dochar3:
0002e6 9105      	lpm	temp1,z+
0002e7 df5f      	rcall	LCD_send
0002e8 951a      	dec	temp2
0002e9 f7e1      	brne	dochar3
                 
0002ea 9100 0104 	lds	temp1,Lcoll
0002ec e01e      	ldi	temp2,14
0002ed 0f01      	add	temp1,temp2
0002ee 9300 0104 	sts	Lcoll,temp1
0002f0 dfc7      	rcall	lcd_set_coll	; 
                 
0002f1 9100 0103 	lds	temp1,Lpage	; adjust to the page above for start of next char
0002f3 950a      	dec	temp1
0002f4 9300 0103 	sts	Lpage,temp1
0002f6 dfcf      	rcall	lcd_set_page
                 
0002f7 901f      	pop	r1
0002f8 900f      	pop	r0
0002f9 911f      	pop	temp2
0002fa 910f      	pop	temp1
0002fb 91ff      	pop	zh
0002fc 91ef      	pop	zl
0002fd 9508      	ret
                 
                 
                 
                 
                 
                 
                 ; call the relevant routine to insert the big char
                 lcd_comma:
0002fe 93ef      	push	zl
0002ff 93ff      	push	zh
000300 930f      	push	temp1
000301 931f      	push	temp2
000302 e018      	ldi	temp2,8		; width
000303 9310 0105 	sts	Lwidth,temp2
000305 eeee
000306 e0f7      	ldZ	rom,comma
000307 c013      	rjmp	dpnk
                 
                 lcd_space:
000308 93ef      	push	zl
000309 93ff      	push	zh
00030a 930f      	push	temp1
00030b 931f      	push	temp2
00030c e01e      	ldi	temp2,14		; width
00030d 9310 0105 	sts	Lwidth,temp2
00030f e9ea
000310 e0f7      	ldZ	rom,space
000311 c009      	rjmp	dpnk
                 
                 lcd_point:
000312 93ef      	push	zl
000313 93ff      	push	zh
000314 930f      	push	temp1
000315 931f      	push	temp2
000316 e018      	ldi	temp2,8		; width
000317 9310 0105 	sts	Lwidth,temp2
000319 efee
00031a e0f7      	ldZ	rom,point
00031b d005      dpnk:	rcall	punk		; insert punctuation
                 	
00031c 911f      	pop	temp2
00031d 910f      	pop	temp1
00031e 91ff      	pop	zh
00031f 91ef      	pop	zl
000320 9508      	ret	
                 
                 
                 
                 
                 
                 
                 
                 
                 punk:
000321 e018      	ldi	temp2,8
                 dochar4:
000322 9105      	lpm	temp1,z+
000323 df23      	rcall	LCD_send
000324 951a      	dec	temp2
000325 f7e1      	brne	dochar4
                 
000326 9100 0104 	lds	temp1,Lcoll
000328 df8f      	rcall	lcd_set_coll	; 2nd batch of 14 bytes
000329 9100 0103 	lds	temp1,Lpage
00032b 930f      	push	temp1
00032c 9503      	inc	temp1		; next row
00032d 7007      	andi	temp1,0b00000111
00032e 9300 0103 	sts	Lpage,temp1
000330 df95      	rcall	lcd_set_page
                 
000331 e018      	ldi	temp2,8
                 dochar5:
000332 9105      	lpm	temp1,z+
000333 df13      	rcall	LCD_send
000334 951a      	dec	temp2
000335 f7e1      	brne	dochar5
                 
000336 9100 0104 	lds	temp1,Lcoll
000338 5f08      	subi	temp1,-8
000339 9300 0104 	sts	Lcoll,temp1
00033b df7c      	rcall	lcd_set_coll
                 
00033c 910f      	pop	temp1
00033d 9300 0103 	sts	Lpage,temp1
00033f df86      	rcall	lcd_set_page
000340 9508      	ret
                 
                 
                 
                 
                 
                 
                 
                 ; Table is referenced by the number 0...9 in temp1 for 'put_num16' routine.
                 ; 10 gives a large space, 11 is a plus sign, 12 a minus
                 
                 num16:
                 ;0
000341 0000
000342 f8e0
000343 061c      	.db	0x00, 0x00, 0xE0, 0xF8, 0x1C, 0x06, 0x06, 0x06,\
000344 0606
000345 1c06
000346 e0f8
000347 0000      		0x06, 0x1C, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,\
000348 0000
000349 3f0f
00034a c070
00034b c0c0      		0x0F, 0x3F, 0x70, 0xC0, 0xC0, 0xC0, 0xC0, 0x70,\
00034c 70c0
00034d 0f3f
00034e 0000      		0x3F, 0x0F, 0x00, 0x00                         
                 
                 ;1
00034f 0000
000350 1818
000351 0c1c      	.db	0x00, 0x00, 0x18, 0x18, 0x1C, 0x0C, 0xFC, 0xFE, \
000352 fefc
000353 0000
000354 0000
000355 0000      		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
000356 0000
000357 c0c0
000358 c0c0
000359 ffff      		0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, \
00035a c0c0
00035b c0c0
00035c 0000      		0xC0, 0xC0, 0x00, 0x00                         
                 
                 ;2
00035d 3800
00035e 0c3c
00035f 0606      	.db	0x00, 0x38, 0x3C, 0x0C, 0x06, 0x06, 0x06, 0x06, \
000360 0606
000361 8c06
000362 70fc
000363 0000      		0x06, 0x8C, 0xFC, 0x70, 0x00, 0x00, 0x00, 0xC0, \
000364 c000
000365 f0e0
000366 ccd8
000367 c6c6      		0xE0, 0xF0, 0xD8, 0xCC, 0xC6, 0xC6, 0xC3, 0xC1, \
000368 c1c3
000369 c0c0
00036a 0000      		0xC0, 0xC0, 0x00, 0x00                         
                 
                 ;3
00036b 0000
00036c 0c00
00036d 860c      	.db	0x00, 0x00, 0x00, 0x0C, 0x0C, 0x86, 0x86, 0x86, \
00036e 8686
00036f 7cce
000370 0038
000371 0000      		0xCE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, \
000372 0000
000373 e060
000374 c1c0
000375 c1c1      		0x60, 0xE0, 0xC0, 0xC1, 0xC1, 0xC1, 0xC3, 0x63, \
000376 63c3
000377 3c7e
000378 0000      		0x7E, 0x3C, 0x00, 0x00                         
                 
                 ;4
000379 0000
00037a 8000
00037b 70e0      	.db	0x00, 0x00, 0x00, 0x80, 0xE0, 0x70, 0x1C, 0x0E, \
00037c 0e1c
00037d fefe
00037e 0000
00037f 0000      		0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, \
000380 1c00
000381 1b1e
000382 d819
000383 d8d8      		0x1E, 0x1B, 0x19, 0xD8, 0xD8, 0xD8, 0xFF, 0xFF, \
000384 ffff
000385 d8d8
000386 0000      		0xD8, 0xD8, 0x00, 0x00                         
                 
                 ;5
000387 0000
000388 fefe
000389 c686      	.db	0x00, 0x00, 0xFE, 0xFE, 0x86, 0xC6, 0xC6, 0xC6, \
00038a c6c6
00038b 86c6
00038c 0086
00038d 0000      		0xC6, 0x86, 0x86, 0x00, 0x00, 0x00, 0x00, 0x60, \
00038e 6000
00038f c161
000390 c0c1
000391 c0c0      		0x61, 0xC1, 0xC1, 0xC0, 0xC0, 0xC0, 0xC0, 0x61, \
000392 61c0
000393 1e7f
000394 0000      		0x7F, 0x1E, 0x00, 0x00                         
                 
                 ;6
000395 0000
000396 f0c0
000397 9c38      	.db	0x00, 0x00, 0xC0, 0xF0, 0x38, 0x9C, 0x8C, 0x86, \
000398 868c
000399 0686
00039a 0606
00039b 0000      		0x86, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, \
00039c 0000
00039d 7f1f
00039e c163
00039f c1c1      		0x1F, 0x7F, 0x63, 0xC1, 0xC1, 0xC1, 0xC1, 0xE3, \
0003a0 e3c1
0003a1 3c7f
0003a2 0000      		0x7F, 0x3C, 0x00, 0x00                         
                 
                 ;7
0003a3 0000
0003a4 1e1e
0003a5 0606      	.db	0x00, 0x00, 0x1E, 0x1E, 0x06, 0x06, 0x06, 0x06, \
0003a6 0606
0003a7 f686
0003a8 1efe
0003a9 0000      		0x86, 0xF6, 0xFE, 0x1E, 0x00, 0x00, 0x00, 0x00, \
0003aa 0000
0003ab 0000
0003ac 0000
0003ad fce0      		0x00, 0x00, 0x00, 0x00, 0xE0, 0xFC, 0x3F, 0x07, \
0003ae 073f
0003af 0000
0003b0 0000      		0x00, 0x00, 0x00, 0x00                         
                 
                 ;8                                                               
0003b1 0000
0003b2 7c38
0003b3 86ce      	.db	0x00, 0x00, 0x38, 0x7C, 0xCE, 0x86, 0x86, 0x86, \
0003b4 8686
0003b5 ce86
0003b6 387c
0003b7 0000      		0x86, 0xCE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, \
0003b8 0000
0003b9 7e3c
0003ba c1e3
0003bb c1c1      		0x3C, 0x7E, 0xE3, 0xC1, 0xC1, 0xC1, 0xC1, 0xE3, \
0003bc e3c1
0003bd 3c7e
0003be 0000      		0x7E, 0x3C, 0x00, 0x00                          
                 
                 ;9                                                               
0003bf 0000
0003c0 fc78
0003c1 068e      	.db	0x00, 0x00, 0x78, 0xFC, 0x8E, 0x06, 0x06, 0x06, \
0003c2 0606
0003c3 8c06
0003c4 f0fc
0003c5 0000      		0x06, 0x8C, 0xFC, 0xF0, 0x00, 0x00, 0x00, 0x00, \
0003c6 0000
0003c7 c1c0
0003c8 c3c1
0003c9 63c3      		0xC0, 0xC1, 0xC1, 0xC3, 0xC3, 0x63, 0x73, 0x39, \
0003ca 3973
0003cb 071f
0003cc 0000      		0x1F, 0x07, 0x00, 0x00
                 ;10
0003cd 0000
0003ce 0000
0003cf 0000      space:	.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
0003d0 0000
0003d1 0000
0003d2 0000
0003d3 0000      		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
0003d4 0000
0003d5 0000
0003d6 0000
0003d7 0000      		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
0003d8 0000
0003d9 0000
0003da 0000      		0x00, 0x00, 0x00, 0x00                         
                 
                 ;11
0003db 0000
0003dc 0000
0003dd 0000
0003de f0f0
0003df 0000
0003e0 0000
0003e1 0000      plus:	.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
0003e2 0600
0003e3 0606
0003e4 0606
0003e5 ffff
0003e6 0606
0003e7 0606
0003e8 0006      	.db	0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0xFF, 0xFF, 0x06, 0x06,0x06, 0x06, 0x06, 0x00
                 
                 ;12
0003e9 0000
0003ea 0000
0003eb 0000
0003ec 0000
0003ed 0000
0003ee 0000
0003ef 0000      minus:	.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
0003f0 0600
0003f1 0606
0003f2 0606
0003f3 0606
0003f4 0606
0003f5 0606
0003f6 0006      	.db	0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00
                 
                 
                 ;, 
0003f7 0000
0003f8 0000
0003f9 0000      comma:	.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
0003fa 0000
0003fb 8000
0003fc 70e0
0003fd 2070
0003fe 0000      		0x00, 0x80, 0xE0, 0x70, 0x70, 0x20, 0x00, 0x00
                 		
                 		
                 ;. point
0003ff 0000
000400 0000
000401 0000      point:	.db 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\
000402 0000
000403 0000
000404 7020
000405 2070
000406 0000      		0x00, 0x00, 0x20, 0x70, 0x70, 0x20, 0x00, 0x00
                 
                 
                 
                 
                 
                 ; 256 patterns, 5 bytes wide per char
                 font_base:
000407 0000
000408 0000      	.db	0x00, 0x00, 0x00, 0x00, 0x00,\
000409 3e00
00040a 4f5b      		0x3E, 0x5B, 0x4F, 0x5B, 0x3E,\
00040b 3e5b
00040c 6b3e
00040d 6b4f      		0x3E, 0x6B, 0x4F, 0x6B, 0x3E,\
00040e 1c3e
00040f 7c3e      		0x1C, 0x3E, 0x7C, 0x3E, 0x1C,\
000410 1c3e
000411 3c18
000412 3c7e      		0x18, 0x3C, 0x7E, 0x3C, 0x18,\
000413 1c18
000414 7d57      		0x1C, 0x57, 0x7D, 0x57, 0x1C,\
000415 1c57
000416 5e1c
000417 5e7f      		0x1C, 0x5E, 0x7F, 0x5E, 0x1C,\
000418 001c
000419 3c18      		0x00, 0x18, 0x3C, 0x18, 0x00,\
00041a 0018
00041b e7ff
00041c e7c3      		0xFF, 0xE7, 0xC3, 0xE7, 0xFF,\
00041d 00ff
00041e 2418      		0x00, 0x18, 0x24, 0x18, 0x00,\
00041f 0018
000420 e7ff
000421 e7db      		0xFF, 0xE7, 0xDB, 0xE7, 0xFF,\
000422 30ff
000423 3a48      		0x30, 0x48, 0x3A, 0x06, 0x0E,\
000424 0e06
000425 2926
000426 2979      		0x26, 0x29, 0x79, 0x29, 0x26,\
000427 4026
000428 057f      		0x40, 0x7F, 0x05, 0x05, 0x07,\
000429 0705
00042a 7f40
00042b 2505      		0x40, 0x7F, 0x05, 0x25, 0x3F,\
00042c 5a3f
00042d e73c      		0x5A, 0x3C, 0xE7, 0x3C, 0x5A,\
00042e 5a3c
00042f 3e7f
000430 1c1c      		0x7F, 0x3E, 0x1C, 0x1C, 0x08,\
000431 0808
000432 1c1c      		0x08, 0x1C, 0x1C, 0x3E, 0x7F,\
000433 7f3e
000434 2214
000435 227f      		0x14, 0x22, 0x7F, 0x22, 0x14,\
000436 5f14
000437 005f      		0x5F, 0x5F, 0x00, 0x5F, 0x5F,\
000438 5f5f
000439 0906
00043a 017f      		0x06, 0x09, 0x7F, 0x01, 0x7F,\
00043b 007f
00043c 8966      		0x00, 0x66, 0x89, 0x95, 0x6A,\
00043d 6a95
00043e 6060
00043f 6060      		0x60, 0x60, 0x60, 0x60, 0x60,\
000440 9460
000441 ffa2      		0x94, 0xA2, 0xFF, 0xA2, 0x94,\
000442 94a2
000443 0408
000444 047e      		0x08, 0x04, 0x7E, 0x04, 0x08,\
000445 1008
000446 7e20      		0x10, 0x20, 0x7E, 0x20, 0x10,\
000447 1020
000448 0808
000449 1c2a      		0x08, 0x08, 0x2A, 0x1C, 0x08,\
00044a 0808
00044b 2a1c      		0x08, 0x1C, 0x2A, 0x08, 0x08,\
00044c 0808
00044d 101e
00044e 1010      		0x1E, 0x10, 0x10, 0x10, 0x10,\
00044f 0c10
000450 0c1e      		0x0C, 0x1E, 0x0C, 0x1E, 0x0C,\
000451 0c1e
000452 3830
000453 383e      		0x30, 0x38, 0x3E, 0x38, 0x30,\
000454 0630
000455 3e0e      		0x06, 0x0E, 0x3E, 0x0E, 0x06,\
000456 060e
000457 0000
000458 0000      		0x00, 0x00, 0x00, 0x00, 0x00,\
000459 0000
00045a 5f00      		0x00, 0x00, 0x5F, 0x00, 0x00,\
00045b 0000
00045c 0700
00045d 0700      		0x00, 0x07, 0x00, 0x07, 0x00,\
00045e 1400
00045f 147f      		0x14, 0x7F, 0x14, 0x7F, 0x14,\
000460 147f
000461 2a24
000462 2a7f      		0x24, 0x2A, 0x7F, 0x2A, 0x12,\
000463 2312
000464 0813      		0x23, 0x13, 0x08, 0x64, 0x62,\
000465 6264
000466 4936
000467 2056      		0x36, 0x49, 0x56, 0x20, 0x50,\
000468 0050
000469 0708      		0x00, 0x08, 0x07, 0x03, 0x00,\
00046a 0003
00046b 1c00
00046c 4122      		0x00, 0x1C, 0x22, 0x41, 0x00,\
00046d 0000
00046e 2241      		0x00, 0x41, 0x22, 0x1C, 0x00,\
00046f 001c
000470 1c2a
000471 1c7f      		0x2A, 0x1C, 0x7F, 0x1C, 0x2A,\
000472 082a
000473 3e08      		0x08, 0x08, 0x3E, 0x08, 0x08,\
000474 0808
000475 8000
000476 3070      		0x00, 0x80, 0x70, 0x30, 0x00,\
000477 0800
000478 0808      		0x08, 0x08, 0x08, 0x08, 0x08,\
000479 0808
00047a 0000
00047b 6060      		0x00, 0x00, 0x60, 0x60, 0x00,\
00047c 2000
00047d 0810      		0x20, 0x10, 0x08, 0x04, 0x02,\
00047e 0204
00047f 513e
000480 4549      		0x3E, 0x51, 0x49, 0x45, 0x3E,\
000481 003e
000482 7f42      		0x00, 0x42, 0x7F, 0x40, 0x00,\
000483 0040
000484 4972
000485 4949      		0x72, 0x49, 0x49, 0x49, 0x46,\
000486 2146
000487 4941      		0x21, 0x41, 0x49, 0x4D, 0x33,\
000488 334d
000489 1418
00048a 7f12      		0x18, 0x14, 0x12, 0x7F, 0x10,\
00048b 2710
00048c 4545      		0x27, 0x45, 0x45, 0x45, 0x39,\
00048d 3945
00048e 4a3c
00048f 4949      		0x3C, 0x4A, 0x49, 0x49, 0x31,\
000490 4131
000491 1121      		0x41, 0x21, 0x11, 0x09, 0x07,\
000492 0709
000493 4936
000494 4949      		0x36, 0x49, 0x49, 0x49, 0x36,\
000495 4636
000496 4949      		0x46, 0x49, 0x49, 0x29, 0x1E,\
000497 1e29
000498 0000
000499 0014      		0x00, 0x00, 0x14, 0x00, 0x00,\
00049a 0000
00049b 3440      		0x00, 0x40, 0x34, 0x00, 0x00,\
00049c 0000
00049d 0800
00049e 2214      		0x00, 0x08, 0x14, 0x22, 0x41,\
00049f 1441
0004a0 1414      		0x14, 0x14, 0x14, 0x14, 0x14,\
0004a1 1414
0004a2 4100
0004a3 1422      		0x00, 0x41, 0x22, 0x14, 0x08,\
0004a4 0208
0004a5 5901      		0x02, 0x01, 0x59, 0x09, 0x06,\
0004a6 0609
0004a7 413e
0004a8 595d      		0x3E, 0x41, 0x5D, 0x59, 0x4E,\
0004a9 7c4e
0004aa 1112      		0x7C, 0x12, 0x11, 0x12, 0x7C,\
0004ab 7c12
0004ac 497f
0004ad 4949      		0x7F, 0x49, 0x49, 0x49, 0x36,\
0004ae 3e36
0004af 4141      		0x3E, 0x41, 0x41, 0x41, 0x22,\
0004b0 2241
0004b1 417f
0004b2 4141      		0x7F, 0x41, 0x41, 0x41, 0x3E,\
0004b3 7f3e
0004b4 4949      		0x7F, 0x49, 0x49, 0x49, 0x41,\
0004b5 4149
0004b6 097f
0004b7 0909      		0x7F, 0x09, 0x09, 0x09, 0x01,\
0004b8 3e01
0004b9 4141      		0x3E, 0x41, 0x41, 0x51, 0x73,\
0004ba 7351
0004bb 087f
0004bc 0808      		0x7F, 0x08, 0x08, 0x08, 0x7F,\
0004bd 007f
0004be 7f41      		0x00, 0x41, 0x7F, 0x41, 0x00,\
0004bf 0041
0004c0 4020
0004c1 3f41      		0x20, 0x40, 0x41, 0x3F, 0x01,\
0004c2 7f01
0004c3 1408      		0x7F, 0x08, 0x14, 0x22, 0x41,\
0004c4 4122
0004c5 407f
0004c6 4040      		0x7F, 0x40, 0x40, 0x40, 0x40,\
0004c7 7f40
0004c8 1c02      		0x7F, 0x02, 0x1C, 0x02, 0x7F,\
0004c9 7f02
0004ca 047f
0004cb 1008      		0x7F, 0x04, 0x08, 0x10, 0x7F,\
0004cc 3e7f
0004cd 4141      		0x3E, 0x41, 0x41, 0x41, 0x3E,\
0004ce 3e41
0004cf 097f
0004d0 0909      		0x7F, 0x09, 0x09, 0x09, 0x06,\
0004d1 3e06
0004d2 5141      		0x3E, 0x41, 0x51, 0x21, 0x5E,\
0004d3 5e21
0004d4 097f
0004d5 2919      		0x7F, 0x09, 0x19, 0x29, 0x46,\
0004d6 2646
0004d7 4949      		0x26, 0x49, 0x49, 0x49, 0x32,\
0004d8 3249
0004d9 0103
0004da 017f      		0x03, 0x01, 0x7F, 0x01, 0x03,\
0004db 3f03
0004dc 4040      		0x3F, 0x40, 0x40, 0x40, 0x3F,\
0004dd 3f40
0004de 201f
0004df 2040      		0x1F, 0x20, 0x40, 0x20, 0x1F,\
0004e0 3f1f
0004e1 3840      		0x3F, 0x40, 0x38, 0x40, 0x3F,\
0004e2 3f40
0004e3 1463
0004e4 1408      		0x63, 0x14, 0x08, 0x14, 0x63,\
0004e5 0363
0004e6 7804      		0x03, 0x04, 0x78, 0x04, 0x03,\
0004e7 0304
0004e8 5961
0004e9 4d49      		0x61, 0x59, 0x49, 0x4D, 0x43,\
0004ea 0043
0004eb 417f      		0x00, 0x7F, 0x41, 0x41, 0x41,\
0004ec 4141
0004ed 0402
0004ee 1008      		0x02, 0x04, 0x08, 0x10, 0x20,\
0004ef 0020
0004f0 4141      		0x00, 0x41, 0x41, 0x41, 0x7F,\
0004f1 7f41
0004f2 0204
0004f3 0201      		0x04, 0x02, 0x01, 0x02, 0x04,\
0004f4 4004
0004f5 4040      		0x40, 0x40, 0x40, 0x40, 0x40,\
0004f6 4040
0004f7 0300
0004f8 0807      		0x00, 0x03, 0x07, 0x08, 0x00,\
0004f9 2000
0004fa 5454      		0x20, 0x54, 0x54, 0x78, 0x40,\
0004fb 4078
0004fc 287f
0004fd 4444      		0x7F, 0x28, 0x44, 0x44, 0x38,\
0004fe 3838
0004ff 4444      		0x38, 0x44, 0x44, 0x44, 0x28,\
000500 2844
000501 4438
000502 2844      		0x38, 0x44, 0x44, 0x28, 0x7F,\
000503 387f
000504 5454      		0x38, 0x54, 0x54, 0x54, 0x18,\
000505 1854
000506 0800
000507 097e      		0x00, 0x08, 0x7E, 0x09, 0x02,\
000508 1802
000509 a4a4      		0x18, 0xA4, 0xA4, 0x9C, 0x78,\
00050a 789c
00050b 087f
00050c 0404      		0x7F, 0x08, 0x04, 0x04, 0x78,\
00050d 0078
00050e 7d44      		0x00, 0x44, 0x7D, 0x40, 0x00,\
00050f 0040
000510 4020
000511 3d40      		0x20, 0x40, 0x40, 0x3D, 0x00,\
000512 7f00
000513 2810      		0x7F, 0x10, 0x28, 0x44, 0x00,\
000514 0044
000515 4100
000516 407f      		0x00, 0x41, 0x7F, 0x40, 0x00,\
000517 7c00
000518 7804      		0x7C, 0x04, 0x78, 0x04, 0x78,\
000519 7804
00051a 087c
00051b 0404      		0x7C, 0x08, 0x04, 0x04, 0x78,\
00051c 3878
00051d 4444      		0x38, 0x44, 0x44, 0x44, 0x38,\
00051e 3844
00051f 18fc
000520 2424      		0xFC, 0x18, 0x24, 0x24, 0x18,\
000521 1818
000522 2424      		0x18, 0x24, 0x24, 0x18, 0xFC,\
000523 fc18
000524 087c
000525 0404      		0x7C, 0x08, 0x04, 0x04, 0x08,\
000526 4808
000527 5454      		0x48, 0x54, 0x54, 0x54, 0x24,\
000528 2454
000529 0404
00052a 443f      		0x04, 0x04, 0x3F, 0x44, 0x24,\
00052b 3c24
00052c 4040      		0x3C, 0x40, 0x40, 0x20, 0x7C,\
00052d 7c20
00052e 201c
00052f 2040      		0x1C, 0x20, 0x40, 0x20, 0x1C,\
000530 3c1c
000531 3040      		0x3C, 0x40, 0x30, 0x40, 0x3C,\
000532 3c40
000533 2844
000534 2810      		0x44, 0x28, 0x10, 0x28, 0x44,\
000535 4c44
000536 9090      		0x4C, 0x90, 0x90, 0x90, 0x7C,\
000537 7c90
000538 6444
000539 4c54      		0x44, 0x64, 0x54, 0x4C, 0x44,\
00053a 0044
00053b 3608      		0x00, 0x08, 0x36, 0x41, 0x00,\
00053c 0041
00053d 0000
00053e 0077      		0x00, 0x00, 0x77, 0x00, 0x00,\
00053f 0000
000540 3641      		0x00, 0x41, 0x36, 0x08, 0x00,\
000541 0008
000542 0102
000543 0402      		0x02, 0x01, 0x02, 0x04, 0x02,\
000544 3c02
000545 2326      		0x3C, 0x26, 0x23, 0x26, 0x3C,\
000546 3c26
000547 a11e
000548 61a1      		0x1E, 0xA1, 0xA1, 0x61, 0x12,\
000549 3a12
00054a 4040      		0x3A, 0x40, 0x40, 0x20, 0x7A,\
00054b 7a20
00054c 5438
00054d 5554      		0x38, 0x54, 0x54, 0x55, 0x59,\
00054e 2159
00054f 5555      		0x21, 0x55, 0x55, 0x79, 0x41,\
000550 4179
000551 5421
000552 7854      		0x21, 0x54, 0x54, 0x78, 0x41,\
000553 2141
000554 5455      		0x21, 0x55, 0x54, 0x78, 0x40,\
000555 4078
000556 5420
000557 7955      		0x20, 0x54, 0x55, 0x79, 0x40,\
000558 0c40
000559 521e      		0x0C, 0x1E, 0x52, 0x72, 0x12,\
00055a 1272
00055b 5539
00055c 5555      		0x39, 0x55, 0x55, 0x55, 0x59,\
00055d 3959
00055e 5454      		0x39, 0x54, 0x54, 0x54, 0x59,\
00055f 5954
000560 5539
000561 5454      		0x39, 0x55, 0x54, 0x54, 0x58,\
000562 0058
000563 4500      		0x00, 0x00, 0x45, 0x7C, 0x41,\
000564 417c
000565 0200
000566 7d45      		0x00, 0x02, 0x45, 0x7D, 0x42,\
000567 0042
000568 4501      		0x00, 0x01, 0x45, 0x7C, 0x40,\
000569 407c
00056a 29f0
00056b 2924      		0xF0, 0x29, 0x24, 0x29, 0xF0,\
00056c f0f0
00056d 2528      		0xF0, 0x28, 0x25, 0x28, 0xF0,\
00056e f028
00056f 547c
000570 4555      		0x7C, 0x54, 0x55, 0x45, 0x00,\
000571 2000
000572 5454      		0x20, 0x54, 0x54, 0x7C, 0x54,\
000573 547c
000574 0a7c
000575 7f09      		0x7C, 0x0A, 0x09, 0x7F, 0x49,\
000576 3249
000577 4949      		0x32, 0x49, 0x49, 0x49, 0x32,\
000578 3249
000579 4832
00057a 4848      		0x32, 0x48, 0x48, 0x48, 0x32,\
00057b 3232
00057c 484a      		0x32, 0x4A, 0x48, 0x48, 0x30,\
00057d 3048
00057e 413a
00057f 2141      		0x3A, 0x41, 0x41, 0x21, 0x7A,\
000580 3a7a
000581 4042      		0x3A, 0x42, 0x40, 0x20, 0x78,\
000582 7820
000583 9d00
000584 a0a0      		0x00, 0x9D, 0xA0, 0xA0, 0x7D,\
000585 397d
000586 4444      		0x39, 0x44, 0x44, 0x44, 0x39,\
000587 3944
000588 403d
000589 4040      		0x3D, 0x40, 0x40, 0x40, 0x3D,\
00058a 3c3d
00058b ff24      		0x3C, 0x24, 0xFF, 0x24, 0x24,\
00058c 2424
00058d 7e48
00058e 4349      		0x48, 0x7E, 0x49, 0x43, 0x66,\
00058f 2b66
000590 fc2f      		0x2B, 0x2F, 0xFC, 0x2F, 0x2B,\
000591 2b2f
000592 09ff
000593 f629      		0xFF, 0x09, 0x29, 0xF6, 0x20,\
000594 c020
000595 7e88      		0xC0, 0x88, 0x7E, 0x09, 0x03,\
000596 0309
000597 5420
000598 7954      		0x20, 0x54, 0x54, 0x79, 0x41,\
000599 0041
00059a 4400      		0x00, 0x00, 0x44, 0x7D, 0x41,\
00059b 417d
00059c 4830
00059d 4a48      		0x30, 0x48, 0x48, 0x4A, 0x32,\
00059e 3832
00059f 4040      		0x38, 0x40, 0x40, 0x22, 0x7A,\
0005a0 7a22
0005a1 7a00
0005a2 0a0a      		0x00, 0x7A, 0x0A, 0x0A, 0x72,\
0005a3 7d72
0005a4 190d      		0x7D, 0x0D, 0x19, 0x31, 0x7D,\
0005a5 7d31
0005a6 2926
0005a7 2f29      		0x26, 0x29, 0x29, 0x2F, 0x28,\
0005a8 2628
0005a9 2929      		0x26, 0x29, 0x29, 0x29, 0x26,\
0005aa 2629
0005ab 4830
0005ac 404d      		0x30, 0x48, 0x4D, 0x40, 0x20,\
0005ad 3820
0005ae 0808      		0x38, 0x08, 0x08, 0x08, 0x08,\
0005af 0808
0005b0 0808
0005b1 0808      		0x08, 0x08, 0x08, 0x08, 0x38,\
0005b2 2f38
0005b3 c810      		0x2F, 0x10, 0xC8, 0xAC, 0xBA,\
0005b4 baac
0005b5 102f
0005b6 3428      		0x2F, 0x10, 0x28, 0x34, 0xFA,\
0005b7 00fa
0005b8 7b00      		0x00, 0x00, 0x7B, 0x00, 0x00,\
0005b9 0000
0005ba 1408
0005bb 142a      		0x08, 0x14, 0x2A, 0x14, 0x22,\
0005bc 2222
0005bd 2a14      		0x22, 0x14, 0x2A, 0x14, 0x08,\
0005be 0814
0005bf 00aa
0005c0 0055      		0xAA, 0x00, 0x55, 0x00, 0xAA,\
0005c1 aaaa
0005c2 aa55      		0xAA, 0x55, 0xAA, 0x55, 0xAA,\
0005c3 aa55
0005c4 aa55
0005c5 aa55      		0x55, 0xAA, 0x55, 0xAA, 0x55,\
0005c6 0055
0005c7 0000      		0x00, 0x00, 0x00, 0xFF, 0x00,\
0005c8 00ff
0005c9 1010
0005ca ff10      		0x10, 0x10, 0x10, 0xFF, 0x00,\
0005cb 1400
0005cc 1414      		0x14, 0x14, 0x14, 0xFF, 0x00,\
0005cd 00ff
0005ce 1010
0005cf 00ff      		0x10, 0x10, 0xFF, 0x00, 0xFF,\
0005d0 10ff
0005d1 f010      		0x10, 0x10, 0xF0, 0x10, 0xF0,\
0005d2 f010
0005d3 1414
0005d4 fc14      		0x14, 0x14, 0x14, 0xFC, 0x00,\
0005d5 1400
0005d6 f714      		0x14, 0x14, 0xF7, 0x00, 0xFF,\
0005d7 ff00
0005d8 0000
0005d9 00ff      		0x00, 0x00, 0xFF, 0x00, 0xFF,\
0005da 14ff
0005db f414      		0x14, 0x14, 0xF4, 0x04, 0xFC,\
0005dc fc04
0005dd 1414
0005de 1017      		0x14, 0x14, 0x17, 0x10, 0x1F,\
0005df 101f
0005e0 1f10      		0x10, 0x10, 0x1F, 0x10, 0x1F,\
0005e1 1f10
0005e2 1414
0005e3 1f14      		0x14, 0x14, 0x14, 0x1F, 0x00,\
0005e4 1000
0005e5 1010      		0x10, 0x10, 0x10, 0xF0, 0x00,\
0005e6 00f0
0005e7 0000
0005e8 1f00      		0x00, 0x00, 0x00, 0x1F, 0x10,\
0005e9 1010
0005ea 1010      		0x10, 0x10, 0x10, 0x1F, 0x10,\
0005eb 101f
0005ec 1010
0005ed f010      		0x10, 0x10, 0x10, 0xF0, 0x10,\
0005ee 0010
0005ef 0000      		0x00, 0x00, 0x00, 0xFF, 0x10,\
0005f0 10ff
0005f1 1010
0005f2 1010      		0x10, 0x10, 0x10, 0x10, 0x10,\
0005f3 1010
0005f4 1010      		0x10, 0x10, 0x10, 0xFF, 0x10,\
0005f5 10ff
0005f6 0000
0005f7 ff00      		0x00, 0x00, 0x00, 0xFF, 0x14,\
0005f8 0014
0005f9 ff00      		0x00, 0x00, 0xFF, 0x00, 0xFF,\
0005fa ff00
0005fb 0000
0005fc 101f      		0x00, 0x00, 0x1F, 0x10, 0x17,\
0005fd 0017
0005fe fc00      		0x00, 0x00, 0xFC, 0x04, 0xF4,\
0005ff f404
000600 1414
000601 1017      		0x14, 0x14, 0x17, 0x10, 0x17,\
000602 1417
000603 f414      		0x14, 0x14, 0xF4, 0x04, 0xF4,\
000604 f404
000605 0000
000606 00ff      		0x00, 0x00, 0xFF, 0x00, 0xF7,\
000607 14f7
000608 1414      		0x14, 0x14, 0x14, 0x14, 0x14,\
000609 1414
00060a 1414
00060b 00f7      		0x14, 0x14, 0xF7, 0x00, 0xF7,\
00060c 14f7
00060d 1414      		0x14, 0x14, 0x14, 0x17, 0x14,\
00060e 1417
00060f 1010
000610 101f      		0x10, 0x10, 0x1F, 0x10, 0x1F,\
000611 141f
000612 1414      		0x14, 0x14, 0x14, 0xF4, 0x14,\
000613 14f4
000614 1010
000615 10f0      		0x10, 0x10, 0xF0, 0x10, 0xF0,\
000616 00f0
000617 1f00      		0x00, 0x00, 0x1F, 0x10, 0x1F,\
000618 1f10
000619 0000
00061a 1f00      		0x00, 0x00, 0x00, 0x1F, 0x14,\
00061b 0014
00061c 0000      		0x00, 0x00, 0x00, 0xFC, 0x14,\
00061d 14fc
00061e 0000
00061f 10f0      		0x00, 0x00, 0xF0, 0x10, 0xF0,\
000620 10f0
000621 ff10      		0x10, 0x10, 0xFF, 0x10, 0xFF,\
000622 ff10
000623 1414
000624 ff14      		0x14, 0x14, 0x14, 0xFF, 0x14,\
000625 1014
000626 1010      		0x10, 0x10, 0x10, 0x1F, 0x00,\
000627 001f
000628 0000
000629 f000      		0x00, 0x00, 0x00, 0xF0, 0x10,\
00062a ff10
00062b ffff      		0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\
00062c ffff
00062d f0f0
00062e f0f0      		0xF0, 0xF0, 0xF0, 0xF0, 0xF0,\
00062f fff0
000630 ffff      		0xFF, 0xFF, 0xFF, 0x00, 0x00,\
000631 0000
000632 0000
000633 ff00      		0x00, 0x00, 0x00, 0xFF, 0xFF,\
000634 00ff
000635 0000      		0x00, 0x00, 0x00, 0x00, 0x00,\
000636 0000
000637 4438
000638 3844      		0x38, 0x44, 0x44, 0x38, 0x44,\
000639 7c44
00063a 2a2a      		0x7C, 0x2A, 0x2A, 0x3E, 0x14,\
00063b 143e
00063c 027e
00063d 0602      		0x7E, 0x02, 0x02, 0x06, 0x06,\
00063e 0206
00063f 027e      		0x02, 0x7E, 0x02, 0x7E, 0x02,\
000640 027e
000641 5563
000642 4149      		0x63, 0x55, 0x49, 0x41, 0x63,\
000643 3863
000644 4444      		0x38, 0x44, 0x44, 0x3C, 0x04,\
000645 043c
000646 7e40
000647 1e20      		0x40, 0x7E, 0x20, 0x1E, 0x20,\
000648 0620
000649 7e02      		0x06, 0x02, 0x7E, 0x02, 0x02,\
00064a 0202
00064b a599
00064c a5e7      		0x99, 0xA5, 0xE7, 0xA5, 0x99,\
00064d 1c99
00064e 492a      		0x1C, 0x2A, 0x49, 0x2A, 0x1C,\
00064f 1c2a
000650 724c
000651 7201      		0x4C, 0x72, 0x01, 0x72, 0x4C,\
000652 304c
000653 4d4a      		0x30, 0x4A, 0x4D, 0x4D, 0x30,\
000654 304d
000655 4830
000656 4878      		0x30, 0x48, 0x78, 0x48, 0x30,\
000657 bc30
000658 5a62      		0xBC, 0x62, 0x5A, 0x46, 0x3D,\
000659 3d46
00065a 493e
00065b 4949      		0x3E, 0x49, 0x49, 0x49, 0x00,\
00065c 7e00
00065d 0101      		0x7E, 0x01, 0x01, 0x01, 0x7E,\
00065e 7e01
00065f 2a2a
000660 2a2a      		0x2A, 0x2A, 0x2A, 0x2A, 0x2A,\
000661 442a
000662 5f44      		0x44, 0x44, 0x5F, 0x44, 0x44,\
000663 4444
000664 5140
000665 444a      		0x40, 0x51, 0x4A, 0x44, 0x40,\
000666 4040
000667 4a44      		0x40, 0x44, 0x4A, 0x51, 0x40,\
000668 4051
000669 0000
00066a 01ff      		0x00, 0x00, 0xFF, 0x01, 0x03,\
00066b e003
00066c ff80      		0xE0, 0x80, 0xFF, 0x00, 0x00,\
00066d 0000
00066e 0808
00066f 6b6b      		0x08, 0x08, 0x6B, 0x6B, 0x08,\
000670 3608
000671 3612      		0x36, 0x12, 0x36, 0x24, 0x36,\
000672 3624
000673 0f06
000674 0f09      		0x06, 0x0F, 0x09, 0x0F, 0x06,\
000675 0006
000676 1800      		0x00, 0x00, 0x18, 0x18, 0x00,\
000677 0018
000678 0000
000679 1010      		0x00, 0x00, 0x10, 0x10, 0x00,\
00067a 3000
00067b ff40      		0x30, 0x40, 0xFF, 0x01, 0x01,\
00067c 0101
00067d 1f00
00067e 0101      		0x00, 0x1F, 0x01, 0x01, 0x1E,\
00067f 001e
000680 1d19      		0x00, 0x19, 0x1D, 0x17, 0x12,\
000681 1217
000682 3c00
000683 3c3c      		0x00, 0x3C, 0x3C, 0x3C, 0x3C,\
000684 003c
000685 ffff
000686 ffff      		0x00, 0xFF, 0xFF, 0xFF, 0xFF
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
r0 :  12 r1 :   8 r2 :   2 r3 :   0 r4 :   3 r5 :   3 r6 :   4 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 270 r17:  56 r18:   0 r19:  16 r20:   0 r21:   0 r22:   0 r23:   4 
r24:  12 r25:   6 r26:   0 r27:   0 r28:   0 r29:   0 r30:  25 r31:  24 
x  :   0 y  :   0 z  :   7 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   4 adiw  :   1 and   :   0 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   3 brcs  :   3 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  40 cbi   :   7 cbr   :   1 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   8 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :  17 cpse  :   0 dec   :  18 eor   :   4 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   9 jmp   :   1 
ld    :   0 ldd   :   0 ldi   : 137 lds   :  14 lpm   :  10 lsl   :   2 
lsr   :   1 mov   :   6 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :   1 or    :   0 ori   :   3 out   :   8 pop   :  55 
push  :  63 rcall :  81 ret   :  28 reti  :   0 rjmp  :  17 rol   :   5 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :  15 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   1 sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   1 std   :   0 sts   :  45 
sub   :   0 subi  :   1 swap  :   2 tst   :   2 wdr   :   0 
Instructions used: 47 out of 113 (41.6%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d0e   1526   1720   3246   32768   9.9%
[.dseg] 0x000100 0x000106      0      6      6    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
