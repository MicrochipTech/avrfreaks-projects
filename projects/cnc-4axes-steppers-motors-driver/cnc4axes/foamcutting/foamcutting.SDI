,,,       
,,,       
,,,       ;* Fichier : foam cutting.asm                                                                  *
,,,       ;* Titre: interface pour la commande d'un fil chaud cnc                            *
,,,       ;* Version: 1.0                                                                                    *
,,,       ;* Auteur: ludomercet                                                                  *
,,,       ;* Date: 01/05/2010    de création                                                             *
,,,       ;* Date: 24/05/2010 ok pour génération du fichier .hex                                 *
,,,       ;* Date: 09/11/2008 fichier en theorie ok                                                              *
,,,       ;* date: 18/12/2008 la partie multiplexage marche après 1 semaine de   *
,,,       ;*                                     tests et mise au point                                                          *
,,,       ;* date: 26/12/2008 tout est ok emmission midi                                                 *
,,,       ;*                                                                                                     *       
,,,       ;*                                                                                                                                             *
,,,       ;************************************************************************
,,,       
,,,       
,,,       .include "m32def.inc"  ; nom du fichiers de références des registres
,,,       
,,,       ;***** Created: 2009-11-03 14:40 ******* Source: ATmega32.xml ************
,,,       ;*************************************************************************
,,,       ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
,,,       ;* 
,,,       ;* Number            : AVR000
,,,       ;* File Name         : "m32def.inc"
,,,       ;* Title             : Register/Bit Definitions for the ATmega32
,,,       ;* Date              : 2009-11-03
,,,       ;* Version           : 2.35
,,,       ;* Support E-mail    : avr@atmel.com
,,,       ;* Target MCU        : ATmega32
,,,       ;* 
,,,       ;* DESCRIPTION
,,,       ;* When including this file in the assembly program file, all I/O register 
,,,       ;* names and I/O register bit names appearing in the data book can be used.
,,,       ;* In addition, the six registers forming the three data pointers X, Y and 
,,,       ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
,,,       ;* SRAM is also defined 
,,,       ;* 
,,,       ;* The Register names are represented by their hexadecimal address.
,,,       ;* 
,,,       ;* The Register Bit names are represented by their bit number (0-7).
,,,       ;* 
,,,       ;* Please observe the difference in using the bit names with instructions
,,,       ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
,,,       ;* (skip if bit in register set/cleared). The following example illustrates
,,,       ;* this:
,,,       ;* 
,,,       ;* in    r16,PORTB             ;read PORTB latch
,,,       ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
,,,       ;* out   PORTB,r16             ;output to PORTB
,,,       ;* 
,,,       ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
,,,       ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
,,,       ;* rjmp  TOV0_is_set           ;jump if set
,,,       ;* ...                         ;otherwise do something else
,,,       ;*************************************************************************
,,,       
,,,       #ifndef _M32DEF_INC_
,,,       #define _M32DEF_INC_
,,,       
,,,       
,,,       #pragma partinc 0
,,,       
,,,       ; ***** SPECIFY DEVICE ***************************************************
,,,       .device ATmega32
,,,       #pragma AVRPART ADMIN PART_NAME ATmega32
,,,       .equ   SIGNATURE_000   = 0x1e
,,,       .equ   SIGNATURE_001   = 0x95
,,,       .equ   SIGNATURE_002   = 0x02
,,,       
,,,       #pragma AVRPART CORE CORE_VERSION V2E
,,,       
,,,       
,,,       ; ***** I/O REGISTER DEFINITIONS *****************************************
,,,       ; NOTE:
,,,       ; Definitions marked "MEMORY MAPPED"are extended I/O ports
,,,       ; and cannot be used with IN/OUT instructions
,,,       .equ   SREG    = 0x3f
,,,       .equ   SPL     = 0x3d
,,,       .equ   SPH     = 0x3e
,,,       .equ   OCR0    = 0x3c
,,,       .equ   GICR    = 0x3b
,,,       .equ   GIFR    = 0x3a
,,,       .equ   TIMSK   = 0x39
,,,       .equ   TIFR    = 0x38
,,,       .equ   SPMCR   = 0x37
,,,       .equ   TWCR    = 0x36
,,,       .equ   MCUCR   = 0x35
,,,       .equ   MCUCSR  = 0x34
,,,       .equ   TCCR0   = 0x33
,,,       .equ   TCNT0   = 0x32
,,,       .equ   OSCCAL  = 0x31
,,,       .equ   OCDR    = 0x31
,,,       .equ   SFIOR   = 0x30
,,,       .equ   TCCR1A  = 0x2f
,,,       .equ   TCCR1B  = 0x2e
,,,       .equ   TCNT1L  = 0x2c
,,,       .equ   TCNT1H  = 0x2d
,,,       .equ   OCR1AL  = 0x2a
,,,       .equ   OCR1AH  = 0x2b
,,,       .equ   OCR1BL  = 0x28
,,,       .equ   OCR1BH  = 0x29
,,,       .equ   ICR1L   = 0x26
,,,       .equ   ICR1H   = 0x27
,,,       .equ   TCCR2   = 0x25
,,,       .equ   TCNT2   = 0x24
,,,       .equ   OCR2    = 0x23
,,,       .equ   ASSR    = 0x22
,,,       .equ   WDTCR   = 0x21
,,,       .equ   UBRRH   = 0x20
,,,       .equ   UCSRC   = 0x20
,,,       .equ   EEARL   = 0x1e
,,,       .equ   EEARH   = 0x1f
,,,       .equ   EEDR    = 0x1d
,,,       .equ   EECR    = 0x1c
,,,       .equ   PORTA   = 0x1b
,,,       .equ   DDRA    = 0x1a
,,,       .equ   PINA    = 0x19
,,,       .equ   PORTB   = 0x18
,,,       .equ   DDRB    = 0x17
,,,       .equ   PINB    = 0x16
,,,       .equ   PORTC   = 0x15
,,,       .equ   DDRC    = 0x14
,,,       .equ   PINC    = 0x13
,,,       .equ   PORTD   = 0x12
,,,       .equ   DDRD    = 0x11
,,,       .equ   PIND    = 0x10
,,,       .equ   SPDR    = 0x0f
,,,       .equ   SPSR    = 0x0e
,,,       .equ   SPCR    = 0x0d
,,,       .equ   UDR     = 0x0c
,,,       .equ   UCSRA   = 0x0b
,,,       .equ   UCSRB   = 0x0a
,,,       .equ   UBRRL   = 0x09
,,,       .equ   ACSR    = 0x08
,,,       .equ   ADMUX   = 0x07
,,,       .equ   ADCSRA  = 0x06
,,,       .equ   ADCH    = 0x05
,,,       .equ   ADCL    = 0x04
,,,       .equ   TWDR    = 0x03
,,,       .equ   TWAR    = 0x02
,,,       .equ   TWSR    = 0x01
,,,       .equ   TWBR    = 0x00
,,,       
,,,       
,,,       ; ***** BIT DEFINITIONS **************************************************
,,,       
,,,       ; ***** EEPROM ***********************
,,,       ; EEDR - EEPROM Data Register
,,,       .equ   EEDR0   = 0     ; EEPROM Data Register bit 0
,,,       .equ   EEDR1   = 1     ; EEPROM Data Register bit 1
,,,       .equ   EEDR2   = 2     ; EEPROM Data Register bit 2
,,,       .equ   EEDR3   = 3     ; EEPROM Data Register bit 3
,,,       .equ   EEDR4   = 4     ; EEPROM Data Register bit 4
,,,       .equ   EEDR5   = 5     ; EEPROM Data Register bit 5
,,,       .equ   EEDR6   = 6     ; EEPROM Data Register bit 6
,,,       .equ   EEDR7   = 7     ; EEPROM Data Register bit 7
,,,       
,,,       ; EECR - EEPROM Control Register
,,,       .equ   EERE    = 0     ; EEPROM Read Enable
,,,       .equ   EEWE    = 1     ; EEPROM Write Enable
,,,       .equ   EEMWE   = 2     ; EEPROM Master Write Enable
,,,       .equ   EERIE   = 3     ; EEPROM Ready Interrupt Enable
,,,       
,,,       
,,,       ; ***** WATCHDOG *********************
,,,       ; WDTCR - Watchdog Timer Control Register
,,,       .equ   WDP0    = 0     ; Watch Dog Timer Prescaler bit 0
,,,       .equ   WDP1    = 1     ; Watch Dog Timer Prescaler bit 1
,,,       .equ   WDP2    = 2     ; Watch Dog Timer Prescaler bit 2
,,,       .equ   WDE     = 3     ; Watch Dog Enable
,,,       .equ   WDTOE   = 4     ; RW
,,,       .equ   WDDE    = WDTOE ; For compatibility
,,,       
,,,       
,,,       ; ***** EXTERNAL_INTERRUPT ***********
,,,       ; GICR - General Interrupt Control Register
,,,       .equ   GIMSK   = GICR  ; For compatibility
,,,       .equ   IVCE    = 0     ; Interrupt Vector Change Enable
,,,       .equ   IVSEL   = 1     ; Interrupt Vector Select
,,,       .equ   INT2    = 5     ; External Interrupt Request 2 Enable
,,,       .equ   INT0    = 6     ; External Interrupt Request 0 Enable
,,,       .equ   INT1    = 7     ; External Interrupt Request 1 Enable
,,,       
,,,       ; GIFR - General Interrupt Flag Register
,,,       .equ   INTF2   = 5     ; External Interrupt Flag 2
,,,       .equ   INTF0   = 6     ; External Interrupt Flag 0
,,,       .equ   INTF1   = 7     ; External Interrupt Flag 1
,,,       
,,,       ; MCUCR - General Interrupt Control Register
,,,       .equ   ISC00   = 0     ; Interrupt Sense Control 0 Bit 0
,,,       .equ   ISC01   = 1     ; Interrupt Sense Control 0 Bit 1
,,,       .equ   ISC10   = 2     ; Interrupt Sense Control 1 Bit 0
,,,       .equ   ISC11   = 3     ; Interrupt Sense Control 1 Bit 1
,,,       
,,,       ; MCUCSR - MCU Control And Status Register
,,,       .equ   ISC2    = 6     ; Interrupt Sense Control 2
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_0 **************
,,,       ; TCCR0 - Timer/Counter Control Register
,,,       .equ   CS00    = 0     ; Clock Select 1
,,,       .equ   CS01    = 1     ; Clock Select 1
,,,       .equ   CS02    = 2     ; Clock Select 2
,,,       .equ   WGM01   = 3     ; Waveform Generation Mode 1
,,,       .equ   CTC0    = WGM01 ; For compatibility
,,,       .equ   COM00   = 4     ; Compare match Output Mode 0
,,,       .equ   COM01   = 5     ; Compare Match Output Mode 1
,,,       .equ   WGM00   = 6     ; Waveform Generation Mode
,,,       .equ   PWM0    = WGM00 ; For compatibility
,,,       .equ   FOC0    = 7     ; Force Output Compare
,,,       
,,,       ; TCNT0 - Timer/Counter Register
,,,       .equ   TCNT0_0 = 0     ; 
,,,       .equ   TCNT0_1 = 1     ; 
,,,       .equ   TCNT0_2 = 2     ; 
,,,       .equ   TCNT0_3 = 3     ; 
,,,       .equ   TCNT0_4 = 4     ; 
,,,       .equ   TCNT0_5 = 5     ; 
,,,       .equ   TCNT0_6 = 6     ; 
,,,       .equ   TCNT0_7 = 7     ; 
,,,       
,,,       ; OCR0 - Output Compare Register
,,,       .equ   OCR0_0  = 0     ; 
,,,       .equ   OCR0_1  = 1     ; 
,,,       .equ   OCR0_2  = 2     ; 
,,,       .equ   OCR0_3  = 3     ; 
,,,       .equ   OCR0_4  = 4     ; 
,,,       .equ   OCR0_5  = 5     ; 
,,,       .equ   OCR0_6  = 6     ; 
,,,       .equ   OCR0_7  = 7     ; 
,,,       
,,,       ; TIMSK - Timer/Counter Interrupt Mask Register
,,,       .equ   TOIE0   = 0     ; Timer/Counter0 Overflow Interrupt Enable
,,,       .equ   OCIE0   = 1     ; Timer/Counter0 Output Compare Match Interrupt register
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag register
,,,       .equ   TOV0    = 0     ; Timer/Counter0 Overflow Flag
,,,       .equ   OCF0    = 1     ; Output Compare Flag 0
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_2 **************
,,,       ; TIMSK - Timer/Counter Interrupt Mask register
,,,       .equ   TOIE2   = 6     ; Timer/Counter2 Overflow Interrupt Enable
,,,       .equ   OCIE2   = 7     ; Timer/Counter2 Output Compare Match Interrupt Enable
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag Register
,,,       .equ   TOV2    = 6     ; Timer/Counter2 Overflow Flag
,,,       .equ   OCF2    = 7     ; Output Compare Flag 2
,,,       
,,,       ; TCCR2 - Timer/Counter2 Control Register
,,,       .equ   CS20    = 0     ; Clock Select bit 0
,,,       .equ   CS21    = 1     ; Clock Select bit 1
,,,       .equ   CS22    = 2     ; Clock Select bit 2
,,,       .equ   WGM21   = 3     ; Clear Timer/Counter2 on Compare Match
,,,       .equ   CTC2    = WGM21 ; For compatibility
,,,       .equ   COM20   = 4     ; Compare Output Mode bit 0
,,,       .equ   COM21   = 5     ; Compare Output Mode bit 1
,,,       .equ   WGM20   = 6     ; Pulse Width Modulator Enable
,,,       .equ   PWM2    = WGM20 ; For compatibility
,,,       .equ   FOC2    = 7     ; Force Output Compare
,,,       
,,,       ; TCNT2 - Timer/Counter2
,,,       .equ   TCNT2_0 = 0     ; Timer/Counter 2 bit 0
,,,       .equ   TCNT2_1 = 1     ; Timer/Counter 2 bit 1
,,,       .equ   TCNT2_2 = 2     ; Timer/Counter 2 bit 2
,,,       .equ   TCNT2_3 = 3     ; Timer/Counter 2 bit 3
,,,       .equ   TCNT2_4 = 4     ; Timer/Counter 2 bit 4
,,,       .equ   TCNT2_5 = 5     ; Timer/Counter 2 bit 5
,,,       .equ   TCNT2_6 = 6     ; Timer/Counter 2 bit 6
,,,       .equ   TCNT2_7 = 7     ; Timer/Counter 2 bit 7
,,,       
,,,       ; OCR2 - Timer/Counter2 Output Compare Register
,,,       .equ   OCR2_0  = 0     ; Timer/Counter2 Output Compare Register Bit 0
,,,       .equ   OCR2_1  = 1     ; Timer/Counter2 Output Compare Register Bit 1
,,,       .equ   OCR2_2  = 2     ; Timer/Counter2 Output Compare Register Bit 2
,,,       .equ   OCR2_3  = 3     ; Timer/Counter2 Output Compare Register Bit 3
,,,       .equ   OCR2_4  = 4     ; Timer/Counter2 Output Compare Register Bit 4
,,,       .equ   OCR2_5  = 5     ; Timer/Counter2 Output Compare Register Bit 5
,,,       .equ   OCR2_6  = 6     ; Timer/Counter2 Output Compare Register Bit 6
,,,       .equ   OCR2_7  = 7     ; Timer/Counter2 Output Compare Register Bit 7
,,,       
,,,       ; ASSR - Asynchronous Status Register
,,,       .equ   TCR2UB  = 0     ; Timer/counter Control Register2 Update Busy
,,,       .equ   OCR2UB  = 1     ; Output Compare Register2 Update Busy
,,,       .equ   TCN2UB  = 2     ; Timer/Counter2 Update Busy
,,,       .equ   AS2     = 3     ; Asynchronous Timer/counter2
,,,       
,,,       
,,,       ; ***** TIMER_COUNTER_1 **************
,,,       ; TIMSK - Timer/Counter Interrupt Mask Register
,,,       .equ   TOIE1   = 2     ; Timer/Counter1 Overflow Interrupt Enable
,,,       .equ   OCIE1B  = 3     ; Timer/Counter1 Output CompareB Match Interrupt Enable
,,,       .equ   OCIE1A  = 4     ; Timer/Counter1 Output CompareA Match Interrupt Enable
,,,       .equ   TICIE1  = 5     ; Timer/Counter1 Input Capture Interrupt Enable
,,,       
,,,       ; TIFR - Timer/Counter Interrupt Flag register
,,,       .equ   TOV1    = 2     ; Timer/Counter1 Overflow Flag
,,,       .equ   OCF1B   = 3     ; Output Compare Flag 1B
,,,       .equ   OCF1A   = 4     ; Output Compare Flag 1A
,,,       .equ   ICF1    = 5     ; Input Capture Flag 1
,,,       
,,,       ; TCCR1A - Timer/Counter1 Control Register A
,,,       .equ   WGM10   = 0     ; Waveform Generation Mode
,,,       .equ   PWM10   = WGM10 ; For compatibility
,,,       .equ   WGM11   = 1     ; Waveform Generation Mode
,,,       .equ   PWM11   = WGM11 ; For compatibility
,,,       .equ   FOC1B   = 2     ; Force Output Compare 1B
,,,       .equ   FOC1A   = 3     ; Force Output Compare 1A
,,,       .equ   COM1B0  = 4     ; Compare Output Mode 1B, bit 0
,,,       .equ   COM1B1  = 5     ; Compare Output Mode 1B, bit 1
,,,       .equ   COM1A0  = 6     ; Compare Ouput Mode 1A, bit 0
,,,       .equ   COM1A1  = 7     ; Compare Output Mode 1A, bit 1
,,,       
,,,       ; TCCR1B - Timer/Counter1 Control Register B
,,,       .equ   CS10    = 0     ; Prescaler source of Timer/Counter 1
,,,       .equ   CS11    = 1     ; Prescaler source of Timer/Counter 1
,,,       .equ   CS12    = 2     ; Prescaler source of Timer/Counter 1
,,,       .equ   WGM12   = 3     ; Waveform Generation Mode
,,,       .equ   CTC10   = WGM12 ; For compatibility
,,,       .equ   CTC1    = WGM12 ; For compatibility
,,,       .equ   WGM13   = 4     ; Waveform Generation Mode
,,,       .equ   CTC11   = WGM13 ; For compatibility
,,,       .equ   ICES1   = 6     ; Input Capture 1 Edge Select
,,,       .equ   ICNC1   = 7     ; Input Capture 1 Noise Canceler
,,,       
,,,       
,,,       ; ***** SPI **************************
,,,       ; SPDR - SPI Data Register
,,,       .equ   SPDR0   = 0     ; SPI Data Register bit 0
,,,       .equ   SPDR1   = 1     ; SPI Data Register bit 1
,,,       .equ   SPDR2   = 2     ; SPI Data Register bit 2
,,,       .equ   SPDR3   = 3     ; SPI Data Register bit 3
,,,       .equ   SPDR4   = 4     ; SPI Data Register bit 4
,,,       .equ   SPDR5   = 5     ; SPI Data Register bit 5
,,,       .equ   SPDR6   = 6     ; SPI Data Register bit 6
,,,       .equ   SPDR7   = 7     ; SPI Data Register bit 7
,,,       
,,,       ; SPSR - SPI Status Register
,,,       .equ   SPI2X   = 0     ; Double SPI Speed Bit
,,,       .equ   WCOL    = 6     ; Write Collision Flag
,,,       .equ   SPIF    = 7     ; SPI Interrupt Flag
,,,       
,,,       ; SPCR - SPI Control Register
,,,       .equ   SPR0    = 0     ; SPI Clock Rate Select 0
,,,       .equ   SPR1    = 1     ; SPI Clock Rate Select 1
,,,       .equ   CPHA    = 2     ; Clock Phase
,,,       .equ   CPOL    = 3     ; Clock polarity
,,,       .equ   MSTR    = 4     ; Master/Slave Select
,,,       .equ   DORD    = 5     ; Data Order
,,,       .equ   SPE     = 6     ; SPI Enable
,,,       .equ   SPIE    = 7     ; SPI Interrupt Enable
,,,       
,,,       
,,,       ; ***** USART ************************
,,,       ; UDR - USART I/O Data Register
,,,       .equ   UDR0    = 0     ; USART I/O Data Register bit 0
,,,       .equ   UDR1    = 1     ; USART I/O Data Register bit 1
,,,       .equ   UDR2    = 2     ; USART I/O Data Register bit 2
,,,       .equ   UDR3    = 3     ; USART I/O Data Register bit 3
,,,       .equ   UDR4    = 4     ; USART I/O Data Register bit 4
,,,       .equ   UDR5    = 5     ; USART I/O Data Register bit 5
,,,       .equ   UDR6    = 6     ; USART I/O Data Register bit 6
,,,       .equ   UDR7    = 7     ; USART I/O Data Register bit 7
,,,       
,,,       ; UCSRA - USART Control and Status Register A
,,,       .equ   USR     = UCSRA ; For compatibility
,,,       .equ   MPCM    = 0     ; Multi-processor Communication Mode
,,,       .equ   U2X     = 1     ; Double the USART transmission speed
,,,       .equ   UPE     = 2     ; Parity Error
,,,       .equ   PE      = UPE   ; For compatibility
,,,       .equ   DOR     = 3     ; Data overRun
,,,       .equ   FE      = 4     ; Framing Error
,,,       .equ   UDRE    = 5     ; USART Data Register Empty
,,,       .equ   TXC     = 6     ; USART Transmitt Complete
,,,       .equ   RXC     = 7     ; USART Receive Complete
,,,       
,,,       ; UCSRB - USART Control and Status Register B
,,,       .equ   UCR     = UCSRB ; For compatibility
,,,       .equ   TXB8    = 0     ; Transmit Data Bit 8
,,,       .equ   RXB8    = 1     ; Receive Data Bit 8
,,,       .equ   UCSZ2   = 2     ; Character Size
,,,       .equ   CHR9    = UCSZ2 ; For compatibility
,,,       .equ   TXEN    = 3     ; Transmitter Enable
,,,       .equ   RXEN    = 4     ; Receiver Enable
,,,       .equ   UDRIE   = 5     ; USART Data register Empty Interrupt Enable
,,,       .equ   TXCIE   = 6     ; TX Complete Interrupt Enable
,,,       .equ   RXCIE   = 7     ; RX Complete Interrupt Enable
,,,       
,,,       ; UCSRC - USART Control and Status Register C
,,,       .equ   UCPOL   = 0     ; Clock Polarity
,,,       .equ   UCSZ0   = 1     ; Character Size
,,,       .equ   UCSZ1   = 2     ; Character Size
,,,       .equ   USBS    = 3     ; Stop Bit Select
,,,       .equ   UPM0    = 4     ; Parity Mode Bit 0
,,,       .equ   UPM1    = 5     ; Parity Mode Bit 1
,,,       .equ   UMSEL   = 6     ; USART Mode Select
,,,       .equ   URSEL   = 7     ; Register Select
,,,       
,,,       .equ   UBRRHI  = UBRRH ; For compatibility
,,,       
,,,       ; ***** ANALOG_COMPARATOR ************
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   ACME    = 3     ; Analog Comparator Multiplexer Enable
,,,       
,,,       ; ACSR - Analog Comparator Control And Status Register
,,,       .equ   ACIS0   = 0     ; Analog Comparator Interrupt Mode Select bit 0
,,,       .equ   ACIS1   = 1     ; Analog Comparator Interrupt Mode Select bit 1
,,,       .equ   ACIC    = 2     ; Analog Comparator Input Capture Enable
,,,       .equ   ACIE    = 3     ; Analog Comparator Interrupt Enable
,,,       .equ   ACI     = 4     ; Analog Comparator Interrupt Flag
,,,       .equ   ACO     = 5     ; Analog Compare Output
,,,       .equ   ACBG    = 6     ; Analog Comparator Bandgap Select
,,,       .equ   ACD     = 7     ; Analog Comparator Disable
,,,       
,,,       
,,,       ; ***** AD_CONVERTER *****************
,,,       ; ADMUX - The ADC multiplexer Selection Register
,,,       .equ   MUX0    = 0     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX1    = 1     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX2    = 2     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX3    = 3     ; Analog Channel and Gain Selection Bits
,,,       .equ   MUX4    = 4     ; Analog Channel and Gain Selection Bits
,,,       .equ   ADLAR   = 5     ; Left Adjust Result
,,,       .equ   REFS0   = 6     ; Reference Selection Bit 0
,,,       .equ   REFS1   = 7     ; Reference Selection Bit 1
,,,       
,,,       ; ADCSRA - The ADC Control and Status register
,,,       .equ   ADCSR   = ADCSRA        ; For compatibility
,,,       .equ   ADPS0   = 0     ; ADC  Prescaler Select Bits
,,,       .equ   ADPS1   = 1     ; ADC  Prescaler Select Bits
,,,       .equ   ADPS2   = 2     ; ADC  Prescaler Select Bits
,,,       .equ   ADIE    = 3     ; ADC Interrupt Enable
,,,       .equ   ADIF    = 4     ; ADC Interrupt Flag
,,,       .equ   ADATE   = 5     ; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
,,,       .equ   ADFR    = ADATE ; For compatibility
,,,       .equ   ADSC    = 6     ; ADC Start Conversion
,,,       .equ   ADEN    = 7     ; ADC Enable
,,,       
,,,       ; ADCH - ADC Data Register High Byte
,,,       .equ   ADCH0   = 0     ; ADC Data Register High Byte Bit 0
,,,       .equ   ADCH1   = 1     ; ADC Data Register High Byte Bit 1
,,,       .equ   ADCH2   = 2     ; ADC Data Register High Byte Bit 2
,,,       .equ   ADCH3   = 3     ; ADC Data Register High Byte Bit 3
,,,       .equ   ADCH4   = 4     ; ADC Data Register High Byte Bit 4
,,,       .equ   ADCH5   = 5     ; ADC Data Register High Byte Bit 5
,,,       .equ   ADCH6   = 6     ; ADC Data Register High Byte Bit 6
,,,       .equ   ADCH7   = 7     ; ADC Data Register High Byte Bit 7
,,,       
,,,       ; ADCL - ADC Data Register Low Byte
,,,       .equ   ADCL0   = 0     ; ADC Data Register Low Byte Bit 0
,,,       .equ   ADCL1   = 1     ; ADC Data Register Low Byte Bit 1
,,,       .equ   ADCL2   = 2     ; ADC Data Register Low Byte Bit 2
,,,       .equ   ADCL3   = 3     ; ADC Data Register Low Byte Bit 3
,,,       .equ   ADCL4   = 4     ; ADC Data Register Low Byte Bit 4
,,,       .equ   ADCL5   = 5     ; ADC Data Register Low Byte Bit 5
,,,       .equ   ADCL6   = 6     ; ADC Data Register Low Byte Bit 6
,,,       .equ   ADCL7   = 7     ; ADC Data Register Low Byte Bit 7
,,,       
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   ADTS0   = 5     ; ADC Auto Trigger Source 0
,,,       .equ   ADTS1   = 6     ; ADC Auto Trigger Source 1
,,,       .equ   ADTS2   = 7     ; ADC Auto Trigger Source 2
,,,       
,,,       
,,,       ; ***** PORTA ************************
,,,       ; PORTA - Port A Data Register
,,,       .equ   PORTA0  = 0     ; Port A Data Register bit 0
,,,       .equ   PA0     = 0     ; For compatibility
,,,       .equ   PORTA1  = 1     ; Port A Data Register bit 1
,,,       .equ   PA1     = 1     ; For compatibility
,,,       .equ   PORTA2  = 2     ; Port A Data Register bit 2
,,,       .equ   PA2     = 2     ; For compatibility
,,,       .equ   PORTA3  = 3     ; Port A Data Register bit 3
,,,       .equ   PA3     = 3     ; For compatibility
,,,       .equ   PORTA4  = 4     ; Port A Data Register bit 4
,,,       .equ   PA4     = 4     ; For compatibility
,,,       .equ   PORTA5  = 5     ; Port A Data Register bit 5
,,,       .equ   PA5     = 5     ; For compatibility
,,,       .equ   PORTA6  = 6     ; Port A Data Register bit 6
,,,       .equ   PA6     = 6     ; For compatibility
,,,       .equ   PORTA7  = 7     ; Port A Data Register bit 7
,,,       .equ   PA7     = 7     ; For compatibility
,,,       
,,,       ; DDRA - Port A Data Direction Register
,,,       .equ   DDA0    = 0     ; Data Direction Register, Port A, bit 0
,,,       .equ   DDA1    = 1     ; Data Direction Register, Port A, bit 1
,,,       .equ   DDA2    = 2     ; Data Direction Register, Port A, bit 2
,,,       .equ   DDA3    = 3     ; Data Direction Register, Port A, bit 3
,,,       .equ   DDA4    = 4     ; Data Direction Register, Port A, bit 4
,,,       .equ   DDA5    = 5     ; Data Direction Register, Port A, bit 5
,,,       .equ   DDA6    = 6     ; Data Direction Register, Port A, bit 6
,,,       .equ   DDA7    = 7     ; Data Direction Register, Port A, bit 7
,,,       
,,,       ; PINA - Port A Input Pins
,,,       .equ   PINA0   = 0     ; Input Pins, Port A bit 0
,,,       .equ   PINA1   = 1     ; Input Pins, Port A bit 1
,,,       .equ   PINA2   = 2     ; Input Pins, Port A bit 2
,,,       .equ   PINA3   = 3     ; Input Pins, Port A bit 3
,,,       .equ   PINA4   = 4     ; Input Pins, Port A bit 4
,,,       .equ   PINA5   = 5     ; Input Pins, Port A bit 5
,,,       .equ   PINA6   = 6     ; Input Pins, Port A bit 6
,,,       .equ   PINA7   = 7     ; Input Pins, Port A bit 7
,,,       
,,,       
,,,       ; ***** PORTB ************************
,,,       ; PORTB - Port B Data Register
,,,       .equ   PORTB0  = 0     ; Port B Data Register bit 0
,,,       .equ   PB0     = 0     ; For compatibility
,,,       .equ   PORTB1  = 1     ; Port B Data Register bit 1
,,,       .equ   PB1     = 1     ; For compatibility
,,,       .equ   PORTB2  = 2     ; Port B Data Register bit 2
,,,       .equ   PB2     = 2     ; For compatibility
,,,       .equ   PORTB3  = 3     ; Port B Data Register bit 3
,,,       .equ   PB3     = 3     ; For compatibility
,,,       .equ   PORTB4  = 4     ; Port B Data Register bit 4
,,,       .equ   PB4     = 4     ; For compatibility
,,,       .equ   PORTB5  = 5     ; Port B Data Register bit 5
,,,       .equ   PB5     = 5     ; For compatibility
,,,       .equ   PORTB6  = 6     ; Port B Data Register bit 6
,,,       .equ   PB6     = 6     ; For compatibility
,,,       .equ   PORTB7  = 7     ; Port B Data Register bit 7
,,,       .equ   PB7     = 7     ; For compatibility
,,,       
,,,       ; DDRB - Port B Data Direction Register
,,,       .equ   DDB0    = 0     ; Port B Data Direction Register bit 0
,,,       .equ   DDB1    = 1     ; Port B Data Direction Register bit 1
,,,       .equ   DDB2    = 2     ; Port B Data Direction Register bit 2
,,,       .equ   DDB3    = 3     ; Port B Data Direction Register bit 3
,,,       .equ   DDB4    = 4     ; Port B Data Direction Register bit 4
,,,       .equ   DDB5    = 5     ; Port B Data Direction Register bit 5
,,,       .equ   DDB6    = 6     ; Port B Data Direction Register bit 6
,,,       .equ   DDB7    = 7     ; Port B Data Direction Register bit 7
,,,       
,,,       ; PINB - Port B Input Pins
,,,       .equ   PINB0   = 0     ; Port B Input Pins bit 0
,,,       .equ   PINB1   = 1     ; Port B Input Pins bit 1
,,,       .equ   PINB2   = 2     ; Port B Input Pins bit 2
,,,       .equ   PINB3   = 3     ; Port B Input Pins bit 3
,,,       .equ   PINB4   = 4     ; Port B Input Pins bit 4
,,,       .equ   PINB5   = 5     ; Port B Input Pins bit 5
,,,       .equ   PINB6   = 6     ; Port B Input Pins bit 6
,,,       .equ   PINB7   = 7     ; Port B Input Pins bit 7
,,,       
,,,       
,,,       ; ***** PORTC ************************
,,,       ; PORTC - Port C Data Register
,,,       .equ   PORTC0  = 0     ; Port C Data Register bit 0
,,,       .equ   PC0     = 0     ; For compatibility
,,,       .equ   PORTC1  = 1     ; Port C Data Register bit 1
,,,       .equ   PC1     = 1     ; For compatibility
,,,       .equ   PORTC2  = 2     ; Port C Data Register bit 2
,,,       .equ   PC2     = 2     ; For compatibility
,,,       .equ   PORTC3  = 3     ; Port C Data Register bit 3
,,,       .equ   PC3     = 3     ; For compatibility
,,,       .equ   PORTC4  = 4     ; Port C Data Register bit 4
,,,       .equ   PC4     = 4     ; For compatibility
,,,       .equ   PORTC5  = 5     ; Port C Data Register bit 5
,,,       .equ   PC5     = 5     ; For compatibility
,,,       .equ   PORTC6  = 6     ; Port C Data Register bit 6
,,,       .equ   PC6     = 6     ; For compatibility
,,,       .equ   PORTC7  = 7     ; Port C Data Register bit 7
,,,       .equ   PC7     = 7     ; For compatibility
,,,       
,,,       ; DDRC - Port C Data Direction Register
,,,       .equ   DDC0    = 0     ; Port C Data Direction Register bit 0
,,,       .equ   DDC1    = 1     ; Port C Data Direction Register bit 1
,,,       .equ   DDC2    = 2     ; Port C Data Direction Register bit 2
,,,       .equ   DDC3    = 3     ; Port C Data Direction Register bit 3
,,,       .equ   DDC4    = 4     ; Port C Data Direction Register bit 4
,,,       .equ   DDC5    = 5     ; Port C Data Direction Register bit 5
,,,       .equ   DDC6    = 6     ; Port C Data Direction Register bit 6
,,,       .equ   DDC7    = 7     ; Port C Data Direction Register bit 7
,,,       
,,,       ; PINC - Port C Input Pins
,,,       .equ   PINC0   = 0     ; Port C Input Pins bit 0
,,,       .equ   PINC1   = 1     ; Port C Input Pins bit 1
,,,       .equ   PINC2   = 2     ; Port C Input Pins bit 2
,,,       .equ   PINC3   = 3     ; Port C Input Pins bit 3
,,,       .equ   PINC4   = 4     ; Port C Input Pins bit 4
,,,       .equ   PINC5   = 5     ; Port C Input Pins bit 5
,,,       .equ   PINC6   = 6     ; Port C Input Pins bit 6
,,,       .equ   PINC7   = 7     ; Port C Input Pins bit 7
,,,       
,,,       
,,,       ; ***** PORTD ************************
,,,       ; PORTD - Port D Data Register
,,,       .equ   PORTD0  = 0     ; Port D Data Register bit 0
,,,       .equ   PD0     = 0     ; For compatibility
,,,       .equ   PORTD1  = 1     ; Port D Data Register bit 1
,,,       .equ   PD1     = 1     ; For compatibility
,,,       .equ   PORTD2  = 2     ; Port D Data Register bit 2
,,,       .equ   PD2     = 2     ; For compatibility
,,,       .equ   PORTD3  = 3     ; Port D Data Register bit 3
,,,       .equ   PD3     = 3     ; For compatibility
,,,       .equ   PORTD4  = 4     ; Port D Data Register bit 4
,,,       .equ   PD4     = 4     ; For compatibility
,,,       .equ   PORTD5  = 5     ; Port D Data Register bit 5
,,,       .equ   PD5     = 5     ; For compatibility
,,,       .equ   PORTD6  = 6     ; Port D Data Register bit 6
,,,       .equ   PD6     = 6     ; For compatibility
,,,       .equ   PORTD7  = 7     ; Port D Data Register bit 7
,,,       .equ   PD7     = 7     ; For compatibility
,,,       
,,,       ; DDRD - Port D Data Direction Register
,,,       .equ   DDD0    = 0     ; Port D Data Direction Register bit 0
,,,       .equ   DDD1    = 1     ; Port D Data Direction Register bit 1
,,,       .equ   DDD2    = 2     ; Port D Data Direction Register bit 2
,,,       .equ   DDD3    = 3     ; Port D Data Direction Register bit 3
,,,       .equ   DDD4    = 4     ; Port D Data Direction Register bit 4
,,,       .equ   DDD5    = 5     ; Port D Data Direction Register bit 5
,,,       .equ   DDD6    = 6     ; Port D Data Direction Register bit 6
,,,       .equ   DDD7    = 7     ; Port D Data Direction Register bit 7
,,,       
,,,       ; PIND - Port D Input Pins
,,,       .equ   PIND0   = 0     ; Port D Input Pins bit 0
,,,       .equ   PIND1   = 1     ; Port D Input Pins bit 1
,,,       .equ   PIND2   = 2     ; Port D Input Pins bit 2
,,,       .equ   PIND3   = 3     ; Port D Input Pins bit 3
,,,       .equ   PIND4   = 4     ; Port D Input Pins bit 4
,,,       .equ   PIND5   = 5     ; Port D Input Pins bit 5
,,,       .equ   PIND6   = 6     ; Port D Input Pins bit 6
,,,       .equ   PIND7   = 7     ; Port D Input Pins bit 7
,,,       
,,,       
,,,       ; ***** CPU **************************
,,,       ; SREG - Status Register
,,,       .equ   SREG_C  = 0     ; Carry Flag
,,,       .equ   SREG_Z  = 1     ; Zero Flag
,,,       .equ   SREG_N  = 2     ; Negative Flag
,,,       .equ   SREG_V  = 3     ; Two's Complement Overflow Flag
,,,       .equ   SREG_S  = 4     ; Sign Bit
,,,       .equ   SREG_H  = 5     ; Half Carry Flag
,,,       .equ   SREG_T  = 6     ; Bit Copy Storage
,,,       .equ   SREG_I  = 7     ; Global Interrupt Enable
,,,       
,,,       ; MCUCR - MCU Control Register
,,,       ;.equ  ISC00   = 0     ; Interrupt Sense Control 0 Bit 0
,,,       ;.equ  ISC01   = 1     ; Interrupt Sense Control 0 Bit 1
,,,       ;.equ  ISC10   = 2     ; Interrupt Sense Control 1 Bit 0
,,,       ;.equ  ISC11   = 3     ; Interrupt Sense Control 1 Bit 1
,,,       .equ   SM0     = 4     ; Sleep Mode Select
,,,       .equ   SM1     = 5     ; Sleep Mode Select
,,,       .equ   SM2     = 6     ; Sleep Mode Select
,,,       .equ   SE      = 7     ; Sleep Enable
,,,       
,,,       ; MCUCSR - MCU Control And Status Register
,,,       .equ   MCUSR   = MCUCSR        ; For compatibility
,,,       .equ   PORF    = 0     ; Power-on reset flag
,,,       .equ   EXTRF   = 1     ; External Reset Flag
,,,       .equ   BORF    = 2     ; Brown-out Reset Flag
,,,       .equ   WDRF    = 3     ; Watchdog Reset Flag
,,,       .equ   JTRF    = 4     ; JTAG Reset Flag
,,,       .equ   JTD     = 7     ; JTAG Interface Disable
,,,       
,,,       ; OSCCAL - Oscillator Calibration Value
,,,       .equ   CAL0    = 0     ; Oscillator Calibration Value Bit0
,,,       .equ   CAL1    = 1     ; Oscillator Calibration Value Bit1
,,,       .equ   CAL2    = 2     ; Oscillator Calibration Value Bit2
,,,       .equ   CAL3    = 3     ; Oscillator Calibration Value Bit3
,,,       .equ   CAL4    = 4     ; Oscillator Calibration Value Bit4
,,,       .equ   CAL5    = 5     ; Oscillator Calibration Value Bit5
,,,       .equ   CAL6    = 6     ; Oscillator Calibration Value Bit6
,,,       .equ   CAL7    = 7     ; Oscillator Calibration Value Bit7
,,,       
,,,       ; SFIOR - Special Function IO Register
,,,       .equ   PSR10   = 0     ; Prescaler Reset Timer/Counter1&0
,,,       .equ   PSR2    = 1     ; Prescaler Reset Timer/Counter2
,,,       .equ   PUD     = 2     ; Pull-up Disable
,,,       
,,,       
,,,       ; ***** BOOT_LOAD ********************
,,,       ; SPMCR - Store Program Memory Control Register
,,,       .equ   SPMEN   = 0     ; Store Program Memory Enable
,,,       .equ   PGERS   = 1     ; Page Erase
,,,       .equ   PGWRT   = 2     ; Page Write
,,,       .equ   BLBSET  = 3     ; Boot Lock Bit Set
,,,       .equ   RWWSRE  = 4     ; Read While Write secion read enable
,,,       .equ   ASRE    = RWWSRE        ; For compatibility
,,,       .equ   RWWSB   = 6     ; Read While Write Section Busy
,,,       .equ   ASB     = RWWSB ; For compatibility
,,,       .equ   SPMIE   = 7     ; SPM Interrupt Enable
,,,       
,,,       
,,,       ; ***** TWI **************************
,,,       ; TWBR - TWI Bit Rate register
,,,       .equ   TWBR0   = 0     ; 
,,,       .equ   TWBR1   = 1     ; 
,,,       .equ   TWBR2   = 2     ; 
,,,       .equ   TWBR3   = 3     ; 
,,,       .equ   TWBR4   = 4     ; 
,,,       .equ   TWBR5   = 5     ; 
,,,       .equ   TWBR6   = 6     ; 
,,,       .equ   TWBR7   = 7     ; 
,,,       
,,,       ; TWCR - TWI Control Register
,,,       .equ   TWIE    = 0     ; TWI Interrupt Enable
,,,       .equ   TWEN    = 2     ; TWI Enable Bit
,,,       .equ   TWWC    = 3     ; TWI Write Collition Flag
,,,       .equ   TWSTO   = 4     ; TWI Stop Condition Bit
,,,       .equ   TWSTA   = 5     ; TWI Start Condition Bit
,,,       .equ   TWEA    = 6     ; TWI Enable Acknowledge Bit
,,,       .equ   TWINT   = 7     ; TWI Interrupt Flag
,,,       
,,,       ; TWSR - TWI Status Register
,,,       .equ   TWPS0   = 0     ; TWI Prescaler bits
,,,       .equ   TWPS1   = 1     ; TWI Prescaler bits
,,,       .equ   TWS3    = 3     ; TWI Status
,,,       .equ   TWS4    = 4     ; TWI Status
,,,       .equ   TWS5    = 5     ; TWI Status
,,,       .equ   TWS6    = 6     ; TWI Status
,,,       .equ   TWS7    = 7     ; TWI Status
,,,       
,,,       ; TWDR - TWI Data register
,,,       .equ   TWD0    = 0     ; TWI Data Register Bit 0
,,,       .equ   TWD1    = 1     ; TWI Data Register Bit 1
,,,       .equ   TWD2    = 2     ; TWI Data Register Bit 2
,,,       .equ   TWD3    = 3     ; TWI Data Register Bit 3
,,,       .equ   TWD4    = 4     ; TWI Data Register Bit 4
,,,       .equ   TWD5    = 5     ; TWI Data Register Bit 5
,,,       .equ   TWD6    = 6     ; TWI Data Register Bit 6
,,,       .equ   TWD7    = 7     ; TWI Data Register Bit 7
,,,       
,,,       ; TWAR - TWI (Slave) Address register
,,,       .equ   TWGCE   = 0     ; TWI General Call Recognition Enable Bit
,,,       .equ   TWA0    = 1     ; TWI (Slave) Address register Bit 0
,,,       .equ   TWA1    = 2     ; TWI (Slave) Address register Bit 1
,,,       .equ   TWA2    = 3     ; TWI (Slave) Address register Bit 2
,,,       .equ   TWA3    = 4     ; TWI (Slave) Address register Bit 3
,,,       .equ   TWA4    = 5     ; TWI (Slave) Address register Bit 4
,,,       .equ   TWA5    = 6     ; TWI (Slave) Address register Bit 5
,,,       .equ   TWA6    = 7     ; TWI (Slave) Address register Bit 6
,,,       
,,,       
,,,       
,,,       ; ***** LOCKSBITS ********************************************************
,,,       .equ   LB1     = 0     ; Lock bit
,,,       .equ   LB2     = 1     ; Lock bit
,,,       .equ   BLB01   = 2     ; Boot Lock bit
,,,       .equ   BLB02   = 3     ; Boot Lock bit
,,,       .equ   BLB11   = 4     ; Boot lock bit
,,,       .equ   BLB12   = 5     ; Boot lock bit
,,,       
,,,       
,,,       ; ***** FUSES ************************************************************
,,,       ; LOW fuse bits
,,,       .equ   CKSEL0  = 0     ; Select Clock Source
,,,       .equ   CKSEL1  = 1     ; Select Clock Source
,,,       .equ   CKSEL2  = 2     ; Select Clock Source
,,,       .equ   CKSEL3  = 3     ; Select Clock Source
,,,       .equ   BODEN   = 6     ; Brown out detector enable
,,,       .equ   BODLEVEL        = 7     ; Brown out detector trigger level
,,,       
,,,       ; HIGH fuse bits
,,,       .equ   BOOTRST = 0     ; Select Reset Vector
,,,       .equ   BOOTSZ0 = 1     ; Select Boot Size
,,,       .equ   BOOTSZ1 = 2     ; Select Boot Size
,,,       .equ   EESAVE  = 3     ; EEPROM memory is preserved through chip erase
,,,       .equ   SPIEN   = 5     ; Enable Serial programming and Data Downloading
,,,       .equ   JTAGEN  = 6     ; Enable JTAG
,,,       .equ   OCDEN   = 7     ; Enable OCD
,,,       
,,,       
,,,       
,,,       ; ***** CPU REGISTER DEFINITIONS *****************************************
,,,       .def   XH      = r27
,,,       .def   XL      = r26
,,,       .def   YH      = r29
,,,       .def   YL      = r28
,,,       .def   ZH      = r31
,,,       .def   ZL      = r30
,,,       
,,,       
,,,       
,,,       ; ***** DATA MEMORY DECLARATIONS *****************************************
,,,       .equ   FLASHEND        = 0x3fff        ; Note: Word address
,,,       .equ   IOEND   = 0x003f
,,,       .equ   SRAM_START      = 0x0060
,,,       .equ   SRAM_SIZE       = 2048
,,,       .equ   RAMEND  = 0x085f
,,,       .equ   XRAMEND = 0x0000
,,,       .equ   E2END   = 0x03ff
,,,       .equ   EEPROMEND       = 0x03ff
,,,       .equ   EEADRBITS       = 10
,,,       #pragma AVRPART MEMORY PROG_FLASH 32768
,,,       #pragma AVRPART MEMORY EEPROM 1024
,,,       #pragma AVRPART MEMORY INT_SRAM SIZE 2048
,,,       #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
,,,       
,,,       
,,,       
,,,       ; ***** BOOTLOADER DECLARATIONS ******************************************
,,,       .equ   NRWW_START_ADDR = 0x3800
,,,       .equ   NRWW_STOP_ADDR  = 0x3fff
,,,       .equ   RWW_START_ADDR  = 0x0
,,,       .equ   RWW_STOP_ADDR   = 0x37ff
,,,       .equ   PAGESIZE        = 64
,,,       .equ   FIRSTBOOTSTART  = 0x3f00
,,,       .equ   SECONDBOOTSTART = 0x3e00
,,,       .equ   THIRDBOOTSTART  = 0x3c00
,,,       .equ   FOURTHBOOTSTART = 0x3800
,,,       .equ   SMALLBOOTSTART  = FIRSTBOOTSTART
,,,       .equ   LARGEBOOTSTART  = FOURTHBOOTSTART
,,,       
,,,       
,,,       
,,,       ; ***** INTERRUPT VECTORS ************************************************
,,,       .equ   INT0addr        = 0x0002        ; External Interrupt Request 0
,,,       .equ   INT1addr        = 0x0004        ; External Interrupt Request 1
,,,       .equ   INT2addr        = 0x0006        ; External Interrupt Request 2
,,,       .equ   OC2addr = 0x0008        ; Timer/Counter2 Compare Match
,,,       .equ   OVF2addr        = 0x000a        ; Timer/Counter2 Overflow
,,,       .equ   ICP1addr        = 0x000c        ; Timer/Counter1 Capture Event
,,,       .equ   OC1Aaddr        = 0x000e        ; Timer/Counter1 Compare Match A
,,,       .equ   OC1Baddr        = 0x0010        ; Timer/Counter1 Compare Match B
,,,       .equ   OVF1addr        = 0x0012        ; Timer/Counter1 Overflow
,,,       .equ   OC0addr = 0x0014        ; Timer/Counter0 Compare Match
,,,       .equ   OVF0addr        = 0x0016        ; Timer/Counter0 Overflow
,,,       .equ   SPIaddr = 0x0018        ; Serial Transfer Complete
,,,       .equ   URXCaddr        = 0x001a        ; USART, Rx Complete
,,,       .equ   UDREaddr        = 0x001c        ; USART Data Register Empty
,,,       .equ   UTXCaddr        = 0x001e        ; USART, Tx Complete
,,,       .equ   ADCCaddr        = 0x0020        ; ADC Conversion Complete
,,,       .equ   ERDYaddr        = 0x0022        ; EEPROM Ready
,,,       .equ   ACIaddr = 0x0024        ; Analog Comparator
,,,       .equ   TWIaddr = 0x0026        ; 2-wire Serial Interface
,,,       .equ   SPMRaddr        = 0x0028        ; Store Program Memory Ready
,,,       
,,,       .equ   INT_VECTORS_SIZE        = 42    ; size in words
,,,       
,,,       #endif  /* _M32DEF_INC_ */
,,,       
,,,       
,,,       
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Déclaration des Variables                                     
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,              .def canal =r10                 ; registre du canal midi
,,,              .def a =R16                             ; registre équivalent à accumulateur (X51)
,,,              .def sauvreg = R17              ; registre de sauvegarde de SREG
,,,           .def comptX = R18          ; registres de flag
,,,           .def comptY = R19                  ; valeurs des notes
,,,              .def comptX1 =R20                       ; registre de note 
,,,              .def comptY1 = R21                      ; registre d'usage
,,,              .def etat =R22
,,,              .def chauff= R23                                ; etat de la chauffe
,,,              .def pwm = R24
,,,              .def pwm_consigne =R25
,,,       
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Déclaration des zones de variables dans la sram
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       .DSEG
,,,       .ORG 0x0060
0000C0,0000,midrecin,midrecin:      .BYTE 3                 ; zone de 3 octets pour valeur uart midi in
0000C6,0000,midrecout,midrecout:     .BYTE 3                 ; zone de 3 octets pour valeur uart pédalier
0000CC,0000,valeurnote,valeurnote:    .BYTE 4                 ; zone de 4 octets pour valeur de chaques notes
,,,       
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Déclaration des Vecteurs d'interruptions
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       .CSEG
,,,       .ORG 0x0000                    ;début zone mémoire programme
,,,       
000000,C045,,       rjmp RESET ; Reset Handler
000002,C013,,       rjmp EXT_INT0 ; IRQ0 Handler
000004,C013,,       rjmp EXT_INT1 ; IRQ1 Handler
000006,C030,,       rjmp EXT_INT2 ; IRQ2 Handler
000008,C030,,       rjmp TIM2_COMP ; Timer2 Compare Handler
00000A,C030,,       rjmp TIM2_OVF ; Timer2 Overflow Handler
00000C,C030,,       rjmp TIM1_CAPT ; Timer1 Capture Handler
00000E,C030,,       rjmp TIM1_COMPA ; Timer1 CompareA Handler
000010,C030,,       rjmp TIM1_COMPB ; Timer1 CompareB Handler
000012,C030,,       rjmp TIM1_OVF ; Timer1 Overflow Handler
000014,C030,,       rjmp TIM0_COMP ; Timer0 Compare Handler
000016,C030,,       rjmp TIM0_OVF ; Timer0 Overflow Handler
000018,C030,,       rjmp SPI_STC ; SPI Transfer Complete Handler
00001A,C030,,       rjmp USART_RXC ; USART RX Complete Handler
00001C,C030,,       rjmp USART_UDRE ; UDR Empty Handler
00001E,C030,,       rjmp USART_TXC ; USART TX Complete Handler
000020,C030,,       rjmp V_ADC ; ADC Conversion Complete Handler
000022,C030,,       rjmp EE_RDY ; EEPROM Ready Handler
000024,C030,,       rjmp ANA_COMP ; Analog Comparator Handler
000026,C030,,       rjmp TWI ; Two-wire Serial Interface Handler
000028,C030,,       rjmp SPM_RDY ; Store Program Memory Ready Handler
,,,              
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Routines de traitement des interruptions
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       
,,,       
00002A,9518,,       EXT_INT0:       reti
,,,              EXT_INT1:       
,,,              
,,,       ;*************************
,,,       ; PILOTAG DE LA CHAUFFE
,,,       ;*************************
,,,       
,,,                                      
00002C,B71F,,                               in sauvreg,sreg
00002E,931F,,                               push sauvreg
000030,930F,,                               push a
,,,                                      
,,,                      ; génération du timer à X khz 
,,,                      ;----------------------------
,,,       
,,,       
000032,3071,,                               cpi chauff,1    ;test niveau haut ou bas de l'horloge
000034,F469,,                               brne etat1
,,,                      
000036,9AC5,,                               sbi portb,5             ; niveau haut horloge
000038,E071,,                               ldi chauff,1
,,,       
00003A,9BB4,,                               sbis pinb,4             ; test chauff manuelle
00003C,C00C,,                               rjmp chauff_pc
00003E,9583,,                               inc pwm                 ; incremente le compteur de passage
000040,3684,,                               cpi pwm,100
000042,F411,,                               brne plus
000044,E080,,                               ldi pwm,$00             ; on est à 100, on remet le compteur à 0 et on met l'opto en marche.
000046,9AC6,,                               sbi portb,6             ;
,,,       
,,,                                      
000048,1789,plus,plus:                  cp pwm,pwm_consigne             ;  pwm = consigne
00004A,F409,,                               brne plus1                              ; éteint la chauff
00004C,98C6,,                               cbi portb,6
,,,       
,,,       plus1:
00004E,C008,,                               rjmp sortie
,,,       
000050,98C5,etat1,etat1:                 cbi portb,5             ; niveau bas de l'horloge
000052,E070,,                               ldi chauff,0
000054,C005,,                               rjmp sortie
,,,       
000056,9BB3,chauff_pc,chauff_pc:             sbis pinb,3                     ;lecture du bit 3 (pin 16 de la db25) pour lire l'etat du pwm fournit par le pc
000058,C002,,                               rjmp clear6
00005A,9AC6,,                               sbi portb,6                             ; opto en marche
00005C,C001,,                               rjmp sortie                             ; 
00005E,98C6,clear6,clear6:                        cbi portb,6                             ; opto eteint
,,,              
,,,       
000060,910F,sortie,sortie:                        pop a
000062,911F,,                               pop sauvreg
000064,BF1F,,                               out sreg,sauvreg
,,,                                      
000066,9518,,                               reti
000068,9518,,       EXT_INT2:       reti
00006A,9518,,       TIM2_COMP:      reti
00006C,9518,,       TIM2_OVF :      reti
00006E,9518,,       TIM1_CAPT:      reti
000070,9518,,       TIM1_COMPA:     reti
000072,9518,,       TIM1_COMPB :    reti
000074,9518,,       TIM1_OVF :      reti
000076,9518,,       TIM0_COMP:      reti
,,,       
,,,       ;*************************
,,,       ; PILOTAG DE LA CHAUFFE
,,,       ;*************************
,,,       
,,,              TIM0_OVF :      
,,,                                      
,,,       /*                             in sauvreg,sreg
,,,                                      push sauvreg
,,,                                      push a
,,,                                      
,,,                      ; génération du timer à X khz 
,,,                      ;----------------------------
,,,       
,,,       
,,,                                      cpi chauff,1    ;test niveau haut ou bas de l'horloge
,,,                                      brne etat1
,,,                      
,,,                                      sbi portb,5             ; niveau haut horloge
,,,                                      ldi chauff,1
,,,       
,,,                                      sbis pinb,4             ; test chauff manuelle
,,,                                      rjmp chauff_pc
,,,                                      inc pwm                 ; incremente le compteur de passage
,,,                                      cpi pwm,100
,,,                                      brne plus
,,,                                      ldi pwm,$00             ; on est à 100, on remet le compteur à 0 et on met l'opto en marche.
,,,                                      sbi portb,6             ;
,,,       
,,,                                      
,,,       plus:                  cp pwm,pwm_consigne             ;  pwm = consigne
,,,                                      brne plus1                              ; éteint la chauff
,,,                                      cbi portb,6
,,,       
,,,       plus1:
,,,                                      rjmp sortie
,,,       
,,,       etat1:                 cbi portb,5             ; niveau bas de l'horloge
,,,                                      ldi chauff,0
,,,                                      rjmp sortie
,,,       
,,,       chauff_pc:             sbis pinb,3                     ;lecture du bit 3 (pin 16 de la db25) pour lire l'etat du pwm fournit par le pc
,,,                                      rjmp clear6
,,,                                      sbi portb,6                             ; opto en marche
,,,                                      rjmp sortie                             ; 
,,,       clear6:                        cbi portb,6                             ; opto eteint
,,,              
,,,       
,,,       sortie:                        pop a
,,,                                      pop sauvreg
,,,                                      out sreg,sauvreg  */
,,,              
000078,9518,,                                       reti
,,,       
,,,       
00007A,9518,,       SPI_STC :       reti
00007C,9518,,       USART_RXC:      reti
00007E,9518,,       USART_UDRE :    reti
000080,9518,,       USART_TXC:      reti
000082,9518,,       V_ADC :         reti
000084,9518,,       EE_RDY :                reti
000086,9518,,       ANA_COMP :      reti
000088,9518,,       TWI :           reti
00008A,9518,,       SPM_RDY :       reti
,,,       
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Programme de RESET
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       ; ATTENTION !!!
,,,       ; si utilisation d'un quartz : vérifier les flags au chargement du 
,,,       ; programme dans la puce !
,,,       
00008C,E008,RESET,RESET:         ldi a,high(RAMEND)
00008E,BF0E,,                       out SPH,a
000090,E50F,,                       ldi     a,low(RAMEND)
000092,BF0D,,                       out     SPL,a           ; Initialisation de la pile à l'état bas
,,,       
,,,       ; initialisation des port 
,,,       ;-------------------------   
,,,       
000094,EF0F,,                   ldi a,0b11111111    ; port d en in/out avec uart tx en out
,,,                                                                      ; d7 nc existe pas
,,,                                                                      ; d6 entrée des multiplexeurs
,,,                                                                      ; d5 entrée | haute 
,,,                                                                      ; d4 entrée | canal midi
,,,                                                                      ; d3 entrée |
,,,                                                                      ; d2 entrée | basse
,,,                                                                      ; d1 sortie emission des données midi
,,,                                                                      ; d0 entrée réception des données midi
000096,BB0A,,                   out ddra,a                  ; 
000098,EC0C,,                   ldi a,$cc                   ; port d resistence de rapel
00009A,BB0B,,                   out porta,a         ; 
00009C,E10F,,                       ldi a,$1f                       ; multiplexeur en off et addresse à 0
00009E,BB08,,                       out portb,a                     ; 
0000A0,EE0F,,                       ldi a,0b11101111        ; port b en out 
,,,                                                                      ; b7 sortie sélection du 1er multiplexeur
,,,                                                                      ; b6 sortie sélection du 2eme multiplexeur
,,,                                                                      ; b5 sortie sélection du 3eme multiplexeur
,,,                                                                      ; b4 sortie sélection du 4eme multiplexeur
,,,                                                                      ; b3 nc n'est pas utilisé
,,,                                                                      ; b2 sortie addresse des entrée du multiplexeur
,,,                                                                      ; b1 sortie addresse des entrée du multiplexeur 
,,,                                                                      ; b0 sortie addresse des entrée du multiplexeur
0000A2,BB07,,                       out ddrb,a                      ;
0000A4,E10F,,                       ldi a,$1f                       ; multiplexeur en off et addresse à 0
0000A6,BB08,,                       out portb,a                     ; 
0000A8,EF0F,,                   ldi a,0b11111111    ; port d en in/out avec uart tx en out
,,,                                                                      ; d7 nc existe pas
,,,                                                                      ; d6 entrée des multiplexeurs
,,,                                                                      ; d5 entrée | haute 
,,,                                                                      ; d4 entrée | canal midi
,,,                                                                      ; d3 entrée |
,,,                                                                      ; d2 entrée | basse
,,,                                                                      ; d1 sortie emission des données midi
,,,                                                                      ; d0 entrée réception des données midi
0000AA,BB04,,                   out ddrc,a                  ; 
0000AC,EC0C,,                   ldi a,$cc                   ; port d resistence de rapel
0000AE,BB05,,                   out portc,a         ; 
,,,                          
0000B0,E000,,                   ldi a,0b00000000    ; port d en in/out avec uart tx en out
,,,                                                                      ; d7 nc existe pas
,,,                                                                      ; d6 entrée des multiplexeurs
,,,                                                                      ; d5 entrée | haute 
,,,                                                                      ; d4 entrée | canal midi
,,,                                                                      ; d3 entrée |
,,,                                                                      ; d2 entrée | basse
,,,                                                                      ; d1 sortie emission des données midi
,,,                                                                      ; d0 entrée réception des données midi
0000B2,BB01,,                   out ddrd,a                  ; 
0000B4,E000,,                       ldi a,$00                       ; port d resistence de rapel
0000B6,BB02,,                   out portd,a         ; 
,,,       /*
,,,        DDRA  = 0xFF;         // sortie moteur x et y
,,,        PORTA = 0xCC;         // moteurs position 1
,,,        PORTB = 0X1F;         // pullup en entrée
,,,        DDRB  = 0xE0;         // sortie en partie haute et entrée en partie basse
,,,        PORTB = 0x1F;
,,,        DDRC  = 0xFF;         // sortie moteur x1 et y1
,,,        PORTC = 0xCC;         // moteurs position 1
,,,        PORTD = 0x00;         // pull up off
,,,        DDRD  = 0x00;         // entrée moteur x,x1,y,y1 */
,,,       
,,,       ; remise à 0 des compteurs
,,,       ;-------------------------
,,,       
0000B8,E021,,               ldi comptX,$01
0000BA,E031,,               ldi comptY,$01
0000BC,E041,,               ldi comptX1,$01
0000BE,E051,,               ldi comptY1,$01
,,,       
,,,       
,,,       ; initialisation timer0
,,,       ;----------------------
,,,       
0000C0,E001,,               ldi a,$01
0000C2,BF09,,               out timsk,a
0000C4,EF0A,,               ldi a,$fa
0000C6,BF02,,               out tcnt0,a
0000C8,E002,,               ldi a,$02
0000CA,BF03,,               out tccr0,a
,,,       
,,,       ; initialisation 
,,,       ;----------------
,,,       
0000CC,E392,,               ldi pwm_consigne,50
,,,       
0000CE,9478,,               sei                                     ; interruption en marche
,,,       
,,,       
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Programme principal
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       
,,,       ; Lecture de l'eeprom
,,,       ;--------------------
,,,       
,,,       
,,,       ;***************
,,,       ; MODE JEDICUT *
,,,       ;***************
,,,       ; 
,,,       ; mode avec gestion de la chauffe, timer pour control des moteurs.
,,,       ; 3 timer possible : 2000, 4000, 10000, peut etre 20000?
,,,       ; moteur en pas entier ou demi pas, peut être 1/4 de pas
,,,       
,,,       jedicut:
,,,       
,,,       ;buzz 1 fois
,,,       
,,,       ;              rcall buzzer03
,,,       
,,,       jedicut1:
0000D0,9BB2,,               sbis pinb,2             ; test si le pc à mit les moteur en marche
0000D2,CFFE,,               rjmp jedicut1   ; non on boucle
,,,       ;**************************************************************************
,,,       ;axe X
,,,       ;**************************************************************************    
0000D4,FD60,,               sbrc etat,0             ; test etatX
0000D6,C004,,               rjmp test_avanceX       ;
0000D8,9B80,,               sbis pind,0             ;test bit avance X à 1
0000DA,C07C,,               rjmp axe_Y              ; non on passe au suivant
0000DC,6061,,               ori etat,$01    ; etatx = 1
0000DE,C07A,,               rjmp axe_Y              ;
,,,       
,,,       test_avanceX:
0000E0,9980,,               sbic pind,0             ;
0000E2,C078,,               rjmp axe_Y              ;
0000E4,7F6E,,               andi etat,$fe   ; etatx = 0
0000E6,9B81,,               sbis pind,1             ; test bit de sens
0000E8,C03B,,               rjmp reverse_X  ;
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     avance moteur X
,,,       //----------------------------------------------------------------------------
,,,                      
0000EA,9523,,               inc comptX
0000EC,3028,,               cpi comptX,8            ; test !!!!!!!!!!!!!!!!!!!!!!!!
0000EE,F409,,               brne avanceX            ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,                      
0000F0,E020,,               ldi comptX,$00
,,,       
,,,       avanceX:
0000F2,3020,,               cpi comptX,0
0000F4,F181,,               breq X1
0000F6,3021,,               cpi comptX,1
0000F8,F149,,               breq X2
0000FA,3022,,               cpi comptX,2
0000FC,F111,,               breq X3
0000FE,3023,,               cpi comptX,3
000100,F0D9,,               breq X4
000102,3024,,               cpi comptX,4
000104,F0A1,,               breq X5
000106,3025,,               cpi comptX,5
000108,F069,,               breq X6
00010A,3026,,               cpi comptX,6
00010C,F031,,               breq X7
00010E,3027,,               cpi comptX,7
,,,       ;              breq X8
,,,       ;              ldi comptX,$00
,,,                      
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       X8:
000110,B30B,,               in a,porta
000112,7F00,,               andi a,$f0
000114,6001,,               ori a,$01
000116,BB0B,,               out porta,a
000118,C05D,,               rjmp axe_Y
,,,       X7:
00011A,B30B,,               in a,porta
00011C,7F00,,               andi a,$f0
00011E,6003,,               ori a,$03
000120,BB0B,,               out porta,a
000122,C058,,               rjmp axe_Y
,,,       X6:
000124,B30B,,               in a,porta
000126,7F00,,               andi a,$f0
000128,6002,,               ori a,$02
00012A,BB0B,,               out porta,a
00012C,C053,,               rjmp axe_Y
,,,       X5:
00012E,B30B,,               in a,porta
000130,7F00,,               andi a,$f0
000132,6006,,               ori a,$06
000134,BB0B,,               out porta,a
000136,C04E,,               rjmp axe_Y
,,,       X4:
000138,B30B,,               in a,porta
00013A,7F00,,               andi a,$f0
00013C,6004,,               ori a,$04
00013E,BB0B,,               out porta,a
000140,C049,,               rjmp axe_Y
,,,       X3:
000142,B30B,,               in a,porta
000144,7F00,,               andi a,$f0
000146,600C,,               ori a,$0c
000148,BB0B,,               out porta,a
00014A,C044,,               rjmp axe_Y
,,,       X2:
00014C,B30B,,               in a,porta
00014E,7F00,,               andi a,$f0
000150,6008,,               ori a,$08
000152,BB0B,,               out porta,a
000154,C03F,,               rjmp axe_Y
,,,       X1:
000156,B30B,,               in a,porta
000158,7F00,,               andi a,$f0
00015A,6009,,               ori a,$09
00015C,BB0B,,               out porta,a
00015E,C03A,,               rjmp axe_Y
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     recule moteur X
,,,       //----------------------------------------------------------------------------
,,,       
,,,       reverse_X:
,,,       
000160,3020,,               cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
000162,F409,,               brne decX                       ; test !!!!!!!!!!!!!!!!!!!!!!!
000164,E028,,               ldi comptX,$08
,,,                      
000166,952A,decX,decX:  dec comptX
,,,       
000168,3020,,               cpi comptX,0
00016A,F091,,               breq XR1
00016C,3021,,               cpi comptX,1
00016E,F0A9,,               breq XR2
000170,3022,,               cpi comptX,2
000172,F0C1,,               breq XR3
000174,3023,,               cpi comptX,3
000176,F0D9,,               breq XR4
000178,3024,,               cpi comptX,4
00017A,F0F1,,               breq XR5
00017C,3025,,               cpi comptX,5
00017E,F109,,               breq XR6
000180,3026,,               cpi comptx,6
000182,F121,,               breq XR7
000184,3027,,               cpi comptx,7
,,,       ;              breq XR8
,,,       ;              ldi comptX,$00
,,,       ;              rjmp XR1
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       XR8:
000186,B30B,,               in a,porta
000188,7F00,,               andi a,$f0
00018A,6001,,               ori a,$01
00018C,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
00018E,C022,,               rjmp axe_Y
,,,       XR1:
000190,B30B,,               in a,porta
000192,7F00,,               andi a,$f0
000194,6009,,               ori a,$09
000196,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
000198,C01D,,               rjmp axe_Y
,,,       XR2:
00019A,B30B,,               in a,porta
00019C,7F00,,               andi a,$f0
00019E,6008,,               ori a,$08
0001A0,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
0001A2,C018,,               rjmp axe_Y
,,,       XR3:
0001A4,B30B,,               in a,porta
0001A6,7F00,,               andi a,$f0
0001A8,600C,,               ori a,$0c
0001AA,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
0001AC,C013,,               rjmp axe_Y
,,,       XR4:
0001AE,B30B,,               in a,porta
0001B0,7F00,,               andi a,$f0
0001B2,6004,,               ori a,$04
0001B4,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
0001B6,C00E,,               rjmp axe_Y
,,,       XR5:
0001B8,B30B,,               in a,porta
0001BA,7F00,,               andi a,$f0
0001BC,6006,,               ori a,$06
0001BE,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
0001C0,C009,,               rjmp axe_Y
,,,       XR6:
0001C2,B30B,,               in a,porta
0001C4,7F00,,               andi a,$f0
0001C6,6002,,               ori a,$02
0001C8,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
0001CA,C004,,               rjmp axe_Y
,,,       XR7:
0001CC,B30B,,               in a,porta
0001CE,7F00,,               andi a,$f0
0001D0,6003,,               ori a,$03
0001D2,BB0B,,               out porta,a
,,,       ;              cpi comptX,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y                      ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX,$08
,,,       ;              rjmp axe_Y
,,,       
,,,       
,,,       ;**************************************************************************
,,,       ;axe Y
,,,       ;**************************************************************************
,,,       
,,,       axe_Y:
,,,       
0001D4,FD61,,               sbrc etat,1             ; test etatX
0001D6,C004,,               rjmp test_avanceY       ;
0001D8,9B82,,               sbis pind,2             ;test bit avance X à 1
0001DA,C07C,,               rjmp axe_X1             ; non on passe au suivant
0001DC,6062,,               ori etat,$02    ; etatx = 1
0001DE,C07A,,               rjmp axe_X1             ;
,,,       
,,,       test_avanceY:
0001E0,9982,,               sbic pind,2             ;
0001E2,C078,,               rjmp axe_X1             ;
0001E4,7F6D,,               andi etat,$fd   ; etatx = 0
0001E6,9B83,,               sbis pind,3             ; test bit de sens
0001E8,C03B,,               rjmp reverse_Y  ;
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     avance moteur Y
,,,       //----------------------------------------------------------------------------
,,,                      
0001EA,9533,,               inc comptY
0001EC,3038,,               cpi comptY,8            ; test !!!!!!!!!!!!!!!!!!!!!!!!
0001EE,F409,,               brne avanceY    ; test !!!!!!!!!!!!!!!!!!!!!!!
0001F0,E030,,               ldi comptY,$00
,,,       
,,,       avanceY:
0001F2,3030,,               cpi comptY,0
0001F4,F181,,               breq Y1
0001F6,3031,,               cpi comptY,1
0001F8,F149,,               breq Y2
0001FA,3032,,               cpi comptY,2
0001FC,F111,,               breq Y3
0001FE,3033,,               cpi comptY,3
000200,F0D9,,               breq Y4
000202,3034,,               cpi comptY,4
000204,F0A1,,               breq Y5
000206,3035,,               cpi comptY,5
000208,F069,,               breq Y6
00020A,3036,,               cpi comptY,6
00020C,F031,,               breq Y7
00020E,3037,,               cpi comptY,7
,,,       ;              breq Y8
,,,       ;              ldi comptY,$00
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       Y8:
000210,B30B,,               in a,porta
000212,700F,,               andi a,$0f
000214,6100,,               ori a,$10
000216,BB0B,,               out porta,a
000218,C05D,,               rjmp axe_X1
,,,       Y7:
00021A,B30B,,               in a,porta
00021C,700F,,               andi a,$0f
00021E,6300,,               ori a,$30
000220,BB0B,,               out porta,a
000222,C058,,               rjmp axe_X1
,,,       Y6:
000224,B30B,,               in a,porta
000226,700F,,               andi a,$0f
000228,6200,,               ori a,$20
00022A,BB0B,,               out porta,a
00022C,C053,,               rjmp axe_X1
,,,       Y5:
00022E,B30B,,               in a,porta
000230,700F,,               andi a,$0f
000232,6600,,               ori a,$60
000234,BB0B,,               out porta,a
000236,C04E,,               rjmp axe_X1
,,,       Y4:
000238,B30B,,               in a,porta
00023A,700F,,               andi a,$0f
00023C,6400,,               ori a,$40
00023E,BB0B,,               out porta,a
000240,C049,,               rjmp axe_X1
,,,       Y3:
000242,B30B,,               in a,porta
000244,700F,,               andi a,$0f
000246,6C00,,               ori a,$c0
000248,BB0B,,               out porta,a
00024A,C044,,               rjmp axe_X1
,,,       Y2:
00024C,B30B,,               in a,porta
00024E,700F,,               andi a,$0f
000250,6800,,               ori a,$80
000252,BB0B,,               out porta,a
000254,C03F,,               rjmp axe_X1
,,,       Y1:
000256,B30B,,               in a,porta
000258,700F,,               andi a,$0f
00025A,6900,,               ori a,$90
00025C,BB0B,,               out porta,a
00025E,C03A,,               rjmp axe_X1
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     recule moteur Y
,,,       //----------------------------------------------------------------------------
,,,       
,,,       reverse_Y:
,,,       
000260,3030,,               cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
000262,F409,,               brne decY               ; test !!!!!!!!!!!!!!!!!!!!!!!
000264,E038,,               ldi comptY,$08
,,,                      
000266,953A,decY,decY:  dec comptY
,,,       
000268,3030,,               cpi comptY,0
00026A,F091,,               breq YR1
00026C,3031,,               cpi comptY,1
00026E,F0A9,,               breq YR2
000270,3032,,               cpi comptY,2
000272,F0C1,,               breq YR3
000274,3033,,               cpi comptY,3
000276,F0D9,,               breq YR4
000278,3034,,               cpi comptY,4
00027A,F0F1,,               breq YR5
00027C,3035,,               cpi comptY,5
00027E,F109,,               breq YR6
000280,3036,,               cpi comptY,6
000282,F121,,               breq YR7
000284,3037,,               cpi comptY,7
,,,       ;              breq YR8
,,,       ;              ldi comptY,$00
,,,       ;              rjmp YR1
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       YR8:
000286,B30B,,               in a,porta
000288,700F,,               andi a,$0f
00028A,6100,,               ori a,$10
00028C,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
00028E,C022,,               rjmp axe_X1
,,,       YR1:
000290,B30B,,               in a,porta
000292,700F,,               andi a,$0f
000294,6900,,               ori a,$90
000296,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
000298,C01D,,               rjmp axe_X1
,,,       YR2:
00029A,B30B,,               in a,porta
00029C,700F,,               andi a,$0f
00029E,6800,,               ori a,$80
0002A0,BB0B,,               out porta,a
,,,       ;;             cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
0002A2,C018,,               rjmp axe_X1
,,,       YR3:
0002A4,B30B,,               in a,porta
0002A6,700F,,               andi a,$0f
0002A8,6C00,,               ori a,$c0
0002AA,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
0002AC,C013,,               rjmp axe_X1
,,,       YR4:
0002AE,B30B,,               in a,porta
0002B0,700F,,               andi a,$0f
0002B2,6400,,               ori a,$40
0002B4,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
0002B6,C00E,,               rjmp axe_X1
,,,       YR5:
0002B8,B30B,,               in a,porta
0002BA,700F,,               andi a,$0f
0002BC,6600,,               ori a,$60
0002BE,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
0002C0,C009,,               rjmp axe_X1
,,,       YR6:
0002C2,B30B,,               in a,porta
0002C4,700F,,               andi a,$0f
0002C6,6200,,               ori a,$20
0002C8,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
0002CA,C004,,               rjmp axe_X1
,,,       YR7:
0002CC,B30B,,               in a,porta
0002CE,700F,,               andi a,$0f
0002D0,6300,,               ori a,$30
0002D2,BB0B,,               out porta,a
,,,       ;              cpi comptY,0            ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_X1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY,$08
,,,       ;              rjmp axe_X1
,,,       
,,,                      
,,,       ;**************************************************************************
,,,       ;axe X1
,,,       ;**************************************************************************    
,,,       
,,,       axe_X1:
,,,       
0002D4,FD62,,               sbrc etat,2             ; test etatX
0002D6,C004,,               rjmp test_avanceX1      ;
0002D8,9B84,,               sbis pind,4             ;test bit avance X à 1
0002DA,C07C,,               rjmp axe_Y1             ; non on passe au suivant
0002DC,6064,,               ori etat,$04    ; etatx = 1
0002DE,C07A,,               rjmp axe_Y1             ;
,,,       
,,,       test_avanceX1:
0002E0,9984,,               sbic pind,4     ;
0002E2,C078,,               rjmp axe_Y1             ;
0002E4,7F6B,,               andi etat,$fb   ; etatx = 0
0002E6,9B85,,               sbis pind,5             ; test bit de sens
0002E8,C03B,,               rjmp reverse_X1 ;
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     avance moteur X1
,,,       //----------------------------------------------------------------------------
,,,                      
0002EA,9543,,               inc comptX1
0002EC,3048,,               cpi comptX1,8           ; test !!!!!!!!!!!!!!!!!!!!!!!!
0002EE,F409,,               brne avanceX1   ; test !!!!!!!!!!!!!!!!!!!!!!!
0002F0,E040,,               ldi comptX1,$00
,,,       
,,,       avanceX1:
0002F2,3040,,               cpi comptX1,0
0002F4,F181,,               breq X11
0002F6,3041,,               cpi comptX1,1
0002F8,F149,,               breq X12
0002FA,3042,,               cpi comptX1,2
0002FC,F111,,               breq X13
0002FE,3043,,               cpi comptX1,3
000300,F0D9,,               breq X14
000302,3044,,               cpi comptX1,4
000304,F0A1,,               breq X15
000306,3045,,               cpi comptX1,5
000308,F069,,               breq X16
00030A,3046,,               cpi comptX1,6
00030C,F031,,               breq X17
00030E,3047,,               cpi comptX1,7
,,,       ;              breq X18
,,,       ;              ldi comptX1,$00
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       X18:
000310,B305,,               in a,portc
000312,700F,,               andi a,$0f
000314,6100,,               ori a,$10
000316,BB05,,               out portc,a
000318,C05D,,               rjmp axe_Y1
,,,       X17:
00031A,B305,,               in a,portc
00031C,700F,,               andi a,$0f
00031E,6300,,               ori a,$30
000320,BB05,,               out portc,a
000322,C058,,               rjmp axe_Y1
,,,       X16:
000324,B305,,               in a,portc
000326,700F,,               andi a,$0f
000328,6200,,               ori a,$20
00032A,BB05,,               out portc,a
00032C,C053,,               rjmp axe_Y1
,,,       X15:
00032E,B305,,               in a,portc
000330,700F,,               andi a,$0f
000332,6600,,               ori a,$60
000334,BB05,,               out portc,a
000336,C04E,,               rjmp axe_Y1
,,,       X14:
000338,B305,,               in a,portc
00033A,700F,,               andi a,$0f
00033C,6400,,               ori a,$40
00033E,BB05,,               out portc,a
000340,C049,,               rjmp axe_Y1
,,,       X13:
000342,B305,,               in a,portc
000344,700F,,               andi a,$0f
000346,6C00,,               ori a,$c0
000348,BB05,,               out portc,a
00034A,C044,,               rjmp axe_Y1
,,,       X12:
00034C,B305,,               in a,portc
00034E,700F,,               andi a,$0f
000350,6800,,               ori a,$80
000352,BB05,,               out portc,a
000354,C03F,,               rjmp axe_Y1
,,,       X11:
000356,B305,,               in a,portc
000358,700F,,               andi a,$0f
00035A,6900,,               ori a,$90
00035C,BB05,,               out portc,a
00035E,C03A,,               rjmp axe_Y1
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     recule moteur X1
,,,       //----------------------------------------------------------------------------
,,,       
,,,       reverse_X1:
,,,       
000360,3040,,               cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
000362,F409,,               brne decX1                      ; test !!!!!!!!!!!!!!!!!!!!!!!
000364,E048,,               ldi comptX1,$08
,,,                      
000366,954A,decX1,decX1: dec comptX1
,,,       
000368,3040,,               cpi comptX1,0
00036A,F091,,               breq X1R1
00036C,3041,,               cpi comptX1,1
00036E,F0A9,,               breq X1R2
000370,3042,,               cpi comptX1,2
000372,F0C1,,               breq X1R3
000374,3043,,               cpi comptX1,3
000376,F0D9,,               breq X1R4
000378,3044,,               cpi comptX1,4
00037A,F0F1,,               breq X1R5
00037C,3045,,               cpi comptX1,5
00037E,F109,,               breq X1R6
000380,3046,,               cpi comptX1,6
000382,F121,,               breq X1R7
000384,3047,,               cpi comptX1,7
,,,       ;              breq X1R8
,,,       ;              ldi comptX1,$00
,,,       ;              rjmp X1R1
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       X1R8:
000386,B305,,               in a,portc
000388,700F,,               andi a,$0f
00038A,6100,,               ori a,$10
00038C,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
00038E,C022,,               rjmp axe_Y1
,,,       X1R1:
000390,B305,,               in a,portc
000392,700F,,               andi a,$0f
000394,6900,,               ori a,$90
000396,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
000398,C01D,,               rjmp axe_Y1
,,,       X1R2:
00039A,B305,,               in a,portc
00039C,700F,,               andi a,$0f
00039E,6800,,               ori a,$80
0003A0,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
0003A2,C018,,               rjmp axe_Y1
,,,       X1R3:
0003A4,B305,,               in a,portc
0003A6,700F,,               andi a,$0f
0003A8,6C00,,               ori a,$c0
0003AA,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
0003AC,C013,,               rjmp axe_Y1
,,,       X1R4:
0003AE,B305,,               in a,portc
0003B0,700F,,               andi a,$0f
0003B2,6400,,               ori a,$40
0003B4,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
0003B6,C00E,,               rjmp axe_Y1
,,,       X1R5:
0003B8,B305,,               in a,portc
0003BA,700F,,               andi a,$0f
0003BC,6600,,               ori a,$60
0003BE,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
0003C0,C009,,               rjmp axe_Y1
,,,       X1R6:
0003C2,B305,,               in a,portc
0003C4,700F,,               andi a,$0f
0003C6,6200,,               ori a,$20
0003C8,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
0003CA,C004,,               rjmp axe_Y1
,,,       X1R7:
0003CC,B305,,               in a,portc
0003CE,700F,,               andi a,$0f
0003D0,6300,,               ori a,$30
0003D2,BB05,,               out portc,a
,,,       ;              cpi comptX1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne axe_Y1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptX1,$08
,,,       ;              rjmp axe_Y1
,,,       
,,,       ;
,,,       ;**************************************************************************
,,,       ;axe Y1
,,,       ;**************************************************************************
,,,       
,,,       axe_Y1:
,,,       
0003D4,FD63,,               sbrc etat,3             ; test etatX
0003D6,C004,,               rjmp test_avanceY1      ;
0003D8,9B86,,               sbis pind,6             ;test bit avance X à 1
0003DA,C07C,,               rjmp suite1             ; non on passe au suivant
0003DC,6068,,               ori etat,$08    ; etatx = 1
0003DE,C07A,,               rjmp suite1             ;
,,,       
,,,       test_avanceY1:
0003E0,9986,,               sbic pind,6             ;
0003E2,C078,,               rjmp suite1             ;
0003E4,7F67,,               andi etat,$f7   ; etatx = 0
0003E6,9B87,,               sbis pind,7             ; test bit de sens
0003E8,C03B,,               rjmp reverse_Y1 ;
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     avance moteur Y1
,,,       //----------------------------------------------------------------------------
,,,                      
0003EA,9553,,               inc comptY1
0003EC,3058,,               cpi comptY1,8           ; test !!!!!!!!!!!!!!!!!!!!!!!!
0003EE,F409,,               brne avanceY1   ; test !!!!!!!!!!!!!!!!!!!!!!!
0003F0,E050,,               ldi comptY1,$00
,,,       
,,,       avanceY1:
0003F2,3050,,               cpi comptY1,0
0003F4,F181,,               breq Y11
0003F6,3051,,               cpi comptY1,1
0003F8,F149,,               breq Y12
0003FA,3052,,               cpi comptY1,2
0003FC,F111,,               breq Y13
0003FE,3053,,               cpi comptY1,3
000400,F0D9,,               breq Y14
000402,3054,,               cpi comptY1,4
000404,F0A1,,               breq Y15
000406,3055,,               cpi comptY1,5
000408,F069,,               breq Y16
00040A,3056,,               cpi comptY1,6
00040C,F031,,               breq Y17
00040E,3057,,               cpi comptY1,7
,,,       ;              breq Y18
,,,       ;              ldi comptY1,$00
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       Y18:
000410,B305,,               in a,portc
000412,7F00,,               andi a,$f0
000414,6001,,               ori a,$01
000416,BB05,,               out portc,a
000418,C05D,,               rjmp suite1
,,,       Y17:
00041A,B305,,               in a,portc
00041C,7F00,,               andi a,$f0
00041E,6003,,               ori a,$03
000420,BB05,,               out portc,a
000422,C058,,               rjmp suite1
,,,       Y16:
000424,B305,,               in a,portc
000426,7F00,,               andi a,$f0
000428,6002,,               ori a,$02
00042A,BB05,,               out portc,a
00042C,C053,,               rjmp suite1
,,,       Y15:
00042E,B305,,               in a,portc
000430,7F00,,               andi a,$f0
000432,6006,,               ori a,$06
000434,BB05,,               out portc,a
000436,C04E,,               rjmp suite1
,,,       Y14:
000438,B305,,               in a,portc
00043A,7F00,,               andi a,$f0
00043C,6004,,               ori a,$04
00043E,BB05,,               out portc,a
000440,C049,,               rjmp suite1
,,,       Y13:
000442,B305,,               in a,portc
000444,7F00,,               andi a,$f0
000446,600C,,               ori a,$0c
000448,BB05,,               out portc,a
00044A,C044,,               rjmp suite1
,,,       Y12:
00044C,B305,,               in a,portc
00044E,7F00,,               andi a,$f0
000450,6008,,               ori a,$08
000452,BB05,,               out portc,a
000454,C03F,,               rjmp suite1
,,,       Y11:
000456,B305,,               in a,portc
000458,7F00,,               andi a,$f0
00045A,6009,,               ori a,$09
00045C,BB05,,               out portc,a
00045E,C03A,,               rjmp suite1
,,,       
,,,       //----------------------------------------------------------------------------
,,,       //     recule moteur Y1
,,,       //----------------------------------------------------------------------------
,,,       
,,,       reverse_Y1:
,,,       
000460,3050,,               cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
000462,F409,,               brne decY1                      ; test !!!!!!!!!!!!!!!!!!!!!!!
000464,E058,,               ldi comptY1,$08
,,,       
000466,955A,decY1,decY1: dec comptY1
,,,       
000468,3050,,               cpi comptY1,0
00046A,F091,,               breq Y1R1
00046C,3051,,               cpi comptY1,1
00046E,F0A9,,               breq Y1R2
000470,3052,,               cpi comptY1,2
000472,F0C1,,               breq Y1R3
000474,3053,,               cpi comptY1,3
000476,F0D9,,               breq Y1R4
000478,3054,,               cpi comptY1,4
00047A,F0F1,,               breq Y1R5
00047C,3055,,               cpi comptY1,5
00047E,F109,,               breq Y1R6
000480,3056,,               cpi comptY1,6
000482,F121,,               breq Y1R7
000484,3057,,               cpi comptY1,7
,,,       ;              breq Y1R8
,,,       ;              ldi comptY1,$00
,,,       ;              rjmp Y1R1
,,,       
,,,       ;envoie sur le port    
,,,                      
,,,       Y1R8:
000486,B305,,               in a,portc
000488,7F00,,               andi a,$f0
00048A,6001,,               ori a,$01
00048C,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
00048E,C022,,               rjmp suite1
,,,       Y1R1:
000490,B305,,               in a,portc
000492,7F00,,               andi a,$f0
000494,6009,,               ori a,$09
000496,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1             ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
000498,C01D,,               rjmp suite1
,,,       Y1R2:
00049A,B305,,               in a,portc
00049C,7F00,,               andi a,$f0
00049E,6008,,               ori a,$08
0004A0,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
0004A2,C018,,               rjmp suite1
,,,       Y1R3:
0004A4,B305,,               in a,portc
0004A6,7F00,,               andi a,$f0
0004A8,600C,,               ori a,$0c
0004AA,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
0004AC,C013,,               rjmp suite1
,,,       Y1R4:
0004AE,B305,,               in a,portc
0004B0,7F00,,               andi a,$f0
0004B2,6004,,               ori a,$04
0004B4,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
0004B6,C00E,,               rjmp suite1
,,,       Y1R5:
0004B8,B305,,               in a,portc
0004BA,7F00,,               andi a,$f0
0004BC,6006,,               ori a,$06
0004BE,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
0004C0,C009,,               rjmp suite1
,,,       Y1R6:
0004C2,B305,,               in a,portc
0004C4,7F00,,               andi a,$f0
0004C6,6002,,               ori a,$02
0004C8,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
0004CA,C004,,               rjmp suite1
,,,       Y1R7:
0004CC,B305,,               in a,portc
0004CE,7F00,,               andi a,$f0
0004D0,6003,,               ori a,$03
0004D2,BB05,,               out portc,a
,,,       ;              cpi comptY1,0           ; test !!!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              brne suite1                     ; test !!!!!!!!!!!!!!!!!!!!!!!
,,,       ;              ldi comptY1,$08
,,,       ;              rjmp suite1
,,,       
,,,                      
,,,                      
,,,       suite1:                
,,,       
,,,       
,,,       
0004D4,CDFD,,               rjmp jedicut
,,,       
,,,       ;*************
,,,       ; MODE IPL5X *
,,,       ;*************
,,,       ;
,,,       ; mode où la gestion des moteurs est optimisé.
,,,       
,,,       ipl5x :
,,,       
,,,       ; buzz 2 fois
,,,       
,,,       ;              rcall buzzer03
,,,       ;              rcall tempo
,,,       ;              rcall buzzer03
,,,       
0004D6,CFFF,,               rjmp ipl5x
,,,       
,,,       ;*************
,,,       ; MODE EMC2  *
,,,       ;*************
,,,       ; 
,,,       ; mode test avec gestion de la chauffe en fonction de la vitesse des moteurs.
,,,       
,,,       emc2 :
,,,       
,,,       ; buzz 3 fois
,,,       
,,,       ;              rcall buzzer03
,,,       ;              rcall tempo
,,,       ;              rcall buzzer03
,,,       ;              rcall tempo
,,,       ;              rcall buzzer03
,,,                      
0004D8,CFFF,,               rjmp emc2
,,,       
,,,              
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       ;Sous-Programmes
,,,       ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
,,,       
,,,       ;-------
,,,       ;buzzer
,,,       ;-------
,,,       
,,,       ; buzzer pendant 1/8 de seconde 
,,,       
,,,       ;buzzer03:
,,,       ; va chier pauvre con                  
,,,       
,,,
,,,
