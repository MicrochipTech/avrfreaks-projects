
ch_disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000077e  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800064  00000782  000007f6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000007f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022d  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000501  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000132  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000494  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a6  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
   2:	ac c0       	rjmp	.+344    	; 0x15c <__bad_interrupt>
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
   6:	aa c0       	rjmp	.+340    	; 0x15c <__bad_interrupt>
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
   a:	a8 c0       	rjmp	.+336    	; 0x15c <__bad_interrupt>
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__vector_6>
   e:	a6 c0       	rjmp	.+332    	; 0x15c <__bad_interrupt>
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	a4 c0       	rjmp	.+328    	; 0x15c <__bad_interrupt>
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	a2 c0       	rjmp	.+324    	; 0x15c <__bad_interrupt>
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
  1a:	a0 c0       	rjmp	.+320    	; 0x15c <__bad_interrupt>
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	9e c0       	rjmp	.+316    	; 0x15c <__bad_interrupt>
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	9c c0       	rjmp	.+312    	; 0x15c <__bad_interrupt>
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>

00000026 <strLedScrn1>:
  26:	f8 03 80 07 e0 1e 80 07 80 07 e0 1e 80 07 f8 03     ................
  36:	00 00 00                                            ...

00000039 <strLedScrn2>:
  39:	e0 0f 10 10 08 20 08 20 28 21 88 22 50 14 20 08     ..... . (!."P. .
  49:	08 00 00 00                                         ....

0000004d <strLedScrn3>:
  4d:	fc 3f 02 40 11 88 81 90 81 90 11 88 02 40 fc 3f     .?.@.........@.?
  5d:	00 00 00                                            ...

00000060 <strLedScrn4>:
  60:	00 41 86 20 49 10 f9 0f 49 10 86 20 00 41 00 00     .A. I...I.. .A..
  70:	00 00 00                                            ...

00000073 <strLedScrn5>:
  73:	00 fe 00 83 80 82 40 82 40 fe 40 41 c0 20 c0 1f     ......@.@.@A. ..
  83:	00 00 00                                            ...

00000086 <strLedScrn6>:
  86:	fc ff fe ff ff ff 0f 00 07 00 0f 00 1e 00 1c 00     ................
  96:	00 00 00                                            ...

00000099 <strLedScrn7>:
  99:	00 38 c0 45 2c 82 12 82 12 82 2c 82 c0 45 00 38     .8.E,.....,..E.8
  a9:	00 00 00                                            ...

000000ac <strLedScrn8>:
  ac:	18 00 78 80 f8 81 f8 ff f8 ff fc 81 7a 80 19 00     ..x.........z...
  bc:	00 00 00                                            ...

000000bf <strLedScrn9>:
  bf:	80 24 d0 36 f8 3f fc ff fc ff f8 3f d0 36 80 24     .$.6.?.....?.6.$
  cf:	00 00 00                                            ...

000000d2 <strLedScrn10>:
  d2:	00 00 00                                            ...

000000d5 <strLedScrn11>:
  d5:	00 00 00                                            ...

000000d8 <str1>:
  d8:	00 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
  e8:	00 00 00                                            ...

000000eb <str2>:
	...
  f3:	12 00 11 00 19 00 16 00 00 00 00 00                 ............

000000ff <str3>:
  ff:	40 04 20 08 20 09 c0 06 00 00 00 00 00 00 00 00     @. . ...........
 10f:	00 00 00 00                                         ....

00000113 <str4>:
	...
 11b:	00 00 c0 01 00 01 c0 07 00 00 00                    ...........

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf e5       	ldi	r28, 0x5F	; 95
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	a0 e6       	ldi	r26, 0x60	; 96
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	ee e7       	ldi	r30, 0x7E	; 126
 13a:	f7 e0       	ldi	r31, 0x07	; 7
 13c:	02 c0       	rjmp	.+4      	; 0x142 <.do_copy_data_start>

0000013e <.do_copy_data_loop>:
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0

00000142 <.do_copy_data_start>:
 142:	a4 36       	cpi	r26, 0x64	; 100
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <.do_copy_data_loop>

00000148 <__do_clear_bss>:
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	a4 e6       	ldi	r26, 0x64	; 100
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	ac 3a       	cpi	r26, 0xAC	; 172
 154:	b1 07       	cpc	r27, r17
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	02 d0       	rcall	.+4      	; 0x15e <main>
 15a:	0f c3       	rjmp	.+1566   	; 0x77a <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__heap_end>

0000015e <main>:
//Returns:
//       integer (no idea where this integer is returned to)
//----------------------------------------------------------------------------
// Main loop
int main( void )
{
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	uCinit();		//go through the initialization process for the microcontroller
 166:	e1 d2       	rcall	.+1474   	; 0x72a <uCinit>
	sei();        	//enable interrupts
 168:	78 94       	sei
	u08State=0;		//start out state
 16a:	10 92 87 00 	sts	0x0087, r1

	while(1)       // go into an infinite loop here
	{
        SrvTock();        //go to the tock every 20ms
 16e:	df d0       	rcall	.+446    	; 0x32e <SrvTock>
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0x10>

00000172 <__vector_6>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
SIGNAL(SIG_OVERFLOW0)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	0f 92       	push	r0
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
	u08 u08IntTemp;

	if (uTock > 0)
 19e:	80 91 60 00 	lds	r24, 0x0060
 1a2:	90 91 61 00 	lds	r25, 0x0061
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	49 f0       	breq	.+18     	; 0x1bc <__vector_6+0x4a>
	{
      uTock--;      //This counts down to a 20ms tock.  (which is run in the main loop)
 1aa:	80 91 60 00 	lds	r24, 0x0060
 1ae:	90 91 61 00 	lds	r25, 0x0061
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	90 93 61 00 	sts	0x0061, r25
 1b8:	80 93 60 00 	sts	0x0060, r24
	}

	if(boolFirstFrame==true)	//are we showing the first image?
 1bc:	80 91 aa 00 	lds	r24, 0x00AA
 1c0:	88 23       	and	r24, r24
 1c2:	b9 f1       	breq	.+110    	; 0x232 <__vector_6+0xc0>
	{
		SETBIT(PORTB,6);		//debug
 1c4:	a8 e3       	ldi	r26, 0x38	; 56
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	e8 e3       	ldi	r30, 0x38	; 56
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	8c 93       	st	X, r24
		if((u08DimmingLevel == u08TmrDimming) && u08DimmingLevel>0)	//is it time to turn on the display?
 1d2:	90 91 85 00 	lds	r25, 0x0085
 1d6:	80 91 74 00 	lds	r24, 0x0074
 1da:	98 17       	cp	r25, r24
 1dc:	31 f4       	brne	.+12     	; 0x1ea <__vector_6+0x78>
 1de:	80 91 85 00 	lds	r24, 0x0085
 1e2:	88 23       	and	r24, r24
 1e4:	11 f0       	breq	.+4      	; 0x1ea <__vector_6+0x78>
		{
			setupBits();	//convert the 16 byte input array into the output array for the display
 1e6:	bf d1       	rcall	.+894    	; 0x566 <setupBits>
			display16Bytes();	//load the output array into the display drivers
 1e8:	37 d2       	rcall	.+1134   	; 0x658 <display16Bytes>
		}
		if(u08TmrDimming==0)	//it is time to turn off the display?
 1ea:	80 91 74 00 	lds	r24, 0x0074
 1ee:	88 23       	and	r24, r24
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <__vector_6+0x82>
 1f2:	46 c0       	rjmp	.+140    	; 0x280 <__stack+0x21>
		{
			SETBIT(PORTB,3);
 1f4:	a8 e3       	ldi	r26, 0x38	; 56
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e8 e3       	ldi	r30, 0x38	; 56
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	8c 93       	st	X, r24
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)	//step through the 16 display bytes
 202:	19 82       	std	Y+1, r1	; 0x01
 204:	0a c0       	rjmp	.+20     	; 0x21a <__vector_6+0xa8>
			{
				u08DisplayData[u08IntTemp]=0;	//turn off the display
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	eb 58       	subi	r30, 0x8B	; 139
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	10 82       	st	Z, r1
			display16Bytes();	//load the output array into the display drivers
		}
		if(u08TmrDimming==0)	//it is time to turn off the display?
		{
			SETBIT(PORTB,3);
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)	//step through the 16 display bytes
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	80 31       	cpi	r24, 0x10	; 16
 21e:	98 f3       	brcs	.-26     	; 0x206 <__vector_6+0x94>
			{
				u08DisplayData[u08IntTemp]=0;	//turn off the display
			}
			display16Bytes();	//load the output array into the display drivers
 220:	1b d2       	rcall	.+1078   	; 0x658 <display16Bytes>
			CLEARBIT(PORTB,3);	//debug
 222:	a8 e3       	ldi	r26, 0x38	; 56
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e8 e3       	ldi	r30, 0x38	; 56
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	87 7f       	andi	r24, 0xF7	; 247
 22e:	8c 93       	st	X, r24
 230:	27 c0       	rjmp	.+78     	; 0x280 <__stack+0x21>
		}
	}
	else	//we must be showing the second image
	{
		CLEARBIT(PORTB,6);	//debug
 232:	a8 e3       	ldi	r26, 0x38	; 56
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	e8 e3       	ldi	r30, 0x38	; 56
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8f 7b       	andi	r24, 0xBF	; 191
 23e:	8c 93       	st	X, r24
		if(u08DimmingLevel == u08TmrDimming)	//is it time to turn off the display?
 240:	90 91 85 00 	lds	r25, 0x0085
 244:	80 91 74 00 	lds	r24, 0x0074
 248:	98 17       	cp	r25, r24
 24a:	81 f4       	brne	.+32     	; 0x26c <__stack+0xd>
		{
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)	//step through the 16 display bytes
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	0a c0       	rjmp	.+20     	; 0x264 <__stack+0x5>
			{
				u08DisplayData[u08IntTemp]=0;	//turn off the display
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	eb 58       	subi	r30, 0x8B	; 139
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	10 82       	st	Z, r1
	else	//we must be showing the second image
	{
		CLEARBIT(PORTB,6);	//debug
		if(u08DimmingLevel == u08TmrDimming)	//is it time to turn off the display?
		{
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)	//step through the 16 display bytes
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	80 31       	cpi	r24, 0x10	; 16
 268:	98 f3       	brcs	.-26     	; 0x250 <__vector_6+0xde>
			{
				u08DisplayData[u08IntTemp]=0;	//turn off the display
			}
			display16Bytes();	//load the output array into the display drivers
 26a:	f6 d1       	rcall	.+1004   	; 0x658 <display16Bytes>
		}
		if(u08TmrDimming==0 && u08DimmingLevel<(defIntPwmDimming))	//it is time to turn on the display?
 26c:	80 91 74 00 	lds	r24, 0x0074
 270:	88 23       	and	r24, r24
 272:	31 f4       	brne	.+12     	; 0x280 <__stack+0x21>
 274:	80 91 85 00 	lds	r24, 0x0085
 278:	89 32       	cpi	r24, 0x29	; 41
 27a:	10 f4       	brcc	.+4      	; 0x280 <__stack+0x21>
		{
			setupBits();	//convert the 16 byte input array into the output array for the display
 27c:	74 d1       	rcall	.+744    	; 0x566 <setupBits>
			display16Bytes();	//load the output array into the display drivers
 27e:	ec d1       	rcall	.+984    	; 0x658 <display16Bytes>
		}
	}

	if(u08TmrDimming==0)	//have we reached the end of a PWM dimming cycle?
 280:	80 91 74 00 	lds	r24, 0x0074
 284:	88 23       	and	r24, r24
 286:	d1 f5       	brne	.+116    	; 0x2fc <__stack+0x9d>
	{
		u08TmrDimming=defIntPwmDimming;	//was 41 //reset the dimming timer
 288:	89 e2       	ldi	r24, 0x29	; 41
 28a:	80 93 74 00 	sts	0x0074, r24
		
		if(boolFirstFrame==true)	//are we displaying the first frame?
 28e:	80 91 aa 00 	lds	r24, 0x00AA
 292:	88 23       	and	r24, r24
 294:	c9 f0       	breq	.+50     	; 0x2c8 <__stack+0x69>
		{
			boolFirstFrame=false;	//display the second frame next time through
 296:	10 92 aa 00 	sts	0x00AA, r1
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)
 29a:	19 82       	std	Y+1, r1	; 0x01
 29c:	11 c0       	rjmp	.+34     	; 0x2c0 <__stack+0x61>
			{
				u08Input[u08IntTemp]=u08FirImage[u08IntTemp];	//load up the first image in the display array
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	e7 57       	subi	r30, 0x77	; 119
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	f9 01       	movw	r30, r18
 2b4:	e7 56       	subi	r30, 0x67	; 103
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
		u08TmrDimming=defIntPwmDimming;	//was 41 //reset the dimming timer
		
		if(boolFirstFrame==true)	//are we displaying the first frame?
		{
			boolFirstFrame=false;	//display the second frame next time through
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	89 83       	std	Y+1, r24	; 0x01
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 31       	cpi	r24, 0x10	; 16
 2c4:	60 f3       	brcs	.-40     	; 0x29e <__stack+0x3f>
 2c6:	1f c0       	rjmp	.+62     	; 0x306 <__stack+0xa7>
				u08Input[u08IntTemp]=u08FirImage[u08IntTemp];	//load up the first image in the display array
			}
		}
		else	//we must be displaying the second frame
		{
			boolFirstFrame=true;	//display the first frame next time through
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 aa 00 	sts	0x00AA, r24
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)
 2ce:	19 82       	std	Y+1, r1	; 0x01
 2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <__stack+0x95>
			{
				u08Input[u08IntTemp]=u08SecImage[u08IntTemp];	//load up the second image in the display array
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	ec 59       	subi	r30, 0x9C	; 156
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 81       	ld	r24, Z
 2e6:	f9 01       	movw	r30, r18
 2e8:	e7 56       	subi	r30, 0x67	; 103
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	80 83       	st	Z, r24
			}
		}
		else	//we must be displaying the second frame
		{
			boolFirstFrame=true;	//display the first frame next time through
			for(u08IntTemp=0;u08IntTemp<16;u08IntTemp++)
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	80 31       	cpi	r24, 0x10	; 16
 2f8:	60 f3       	brcs	.-40     	; 0x2d2 <__stack+0x73>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <__stack+0xa7>
			}
		}
	}
	else
	{
		u08TmrDimming--;	//we are PWM dimming the display
 2fc:	80 91 74 00 	lds	r24, 0x0074
 300:	81 50       	subi	r24, 0x01	; 1
 302:	80 93 74 00 	sts	0x0074, r24
	}
	
}
 306:	0f 90       	pop	r0
 308:	cf 91       	pop	r28
 30a:	df 91       	pop	r29
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <SrvTock>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void SrvTock(void)
{
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	2c 97       	sbiw	r28, 0x0c	; 12
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
    if (uTock == 0)
 342:	80 91 60 00 	lds	r24, 0x0060
 346:	90 91 61 00 	lds	r25, 0x0061
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	09 f0       	breq	.+2      	; 0x350 <SrvTock+0x22>
 34e:	cd c0       	rjmp	.+410    	; 0x4ea <SrvTock+0x1bc>
    {
        uTock = defTock;   //reload the Tock (20mS) timer
 350:	8a ef       	ldi	r24, 0xFA	; 250
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 61 00 	sts	0x0061, r25
 358:	80 93 60 00 	sts	0x0060, r24

		if(uboolFadeIn==true)	//is the display fading in?
 35c:	80 91 88 00 	lds	r24, 0x0088
 360:	88 23       	and	r24, r24
 362:	59 f0       	breq	.+22     	; 0x37a <SrvTock+0x4c>
		{
			u08DimmingLevel++;	//increase the intensity of the display
 364:	80 91 85 00 	lds	r24, 0x0085
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	80 93 85 00 	sts	0x0085, r24
			if(u08DimmingLevel>(defIntPwmDimming-1))	//was 35	//are we done increasing the intensity?
 36e:	80 91 85 00 	lds	r24, 0x0085
 372:	89 32       	cpi	r24, 0x29	; 41
 374:	10 f0       	brcs	.+4      	; 0x37a <SrvTock+0x4c>
			{
				uboolFadeIn=false;	//stop increasing the intensity of the display
 376:	10 92 88 00 	sts	0x0088, r1
			}
		}

		if(uboolFadeOut==true)	//is the display fading out?
 37a:	80 91 86 00 	lds	r24, 0x0086
 37e:	88 23       	and	r24, r24
 380:	59 f0       	breq	.+22     	; 0x398 <SrvTock+0x6a>
		{
			u08DimmingLevel--;		//decrease the intensity of the of the display
 382:	80 91 85 00 	lds	r24, 0x0085
 386:	81 50       	subi	r24, 0x01	; 1
 388:	80 93 85 00 	sts	0x0085, r24
			if(u08DimmingLevel==0)	//are we done increasing the intensity?	(note: this leaves the display slightly on)
 38c:	80 91 85 00 	lds	r24, 0x0085
 390:	88 23       	and	r24, r24
 392:	11 f4       	brne	.+4      	; 0x398 <SrvTock+0x6a>
			{
				uboolFadeOut=false;	//stop decreasing the intensity 
 394:	10 92 86 00 	sts	0x0086, r1
			}
		}

		//This switch statement is the main state machine
        switch (u08State)
 398:	80 91 87 00 	lds	r24, 0x0087
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	00 97       	sbiw	r24, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <SrvTock+0x78>
 3a4:	a2 c0       	rjmp	.+324    	; 0x4ea <SrvTock+0x1bc>
        {
			case 0:
				u08StateTmr--;
 3a6:	80 91 62 00 	lds	r24, 0x0062
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	80 93 62 00 	sts	0x0062, r24
				if(u08StateTmr==100)	//is it time to fade in?
 3b0:	80 91 62 00 	lds	r24, 0x0062
 3b4:	84 36       	cpi	r24, 0x64	; 100
 3b6:	09 f0       	breq	.+2      	; 0x3ba <SrvTock+0x8c>
 3b8:	91 c0       	rjmp	.+290    	; 0x4dc <SrvTock+0x1ae>
				{
					for(u08Temp=0;u08Temp<16;u08Temp++)	//load all 16 bytes from flash into the ram array
 3ba:	10 92 ab 00 	sts	0x00AB, r1
 3be:	68 c0       	rjmp	.+208    	; 0x490 <SrvTock+0x162>
					{
						if(u08FrameDisplay==0)
 3c0:	80 91 a9 00 	lds	r24, 0x00A9
 3c4:	88 23       	and	r24, r24
 3c6:	b1 f4       	brne	.+44     	; 0x3f4 <SrvTock+0xc6>
						{
							u08SecImage[u08Temp]=pgm_read_byte(&strLedScrn3[u08Temp]);
 3c8:	80 91 ab 00 	lds	r24, 0x00AB
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	80 91 ab 00 	lds	r24, 0x00AB
 3d4:	88 2f       	mov	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	83 5b       	subi	r24, 0xB3	; 179
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	9c 87       	std	Y+12, r25	; 0x0c
 3de:	8b 87       	std	Y+11, r24	; 0x0b
 3e0:	eb 85       	ldd	r30, Y+11	; 0x0b
 3e2:	fc 85       	ldd	r31, Y+12	; 0x0c
 3e4:	84 91       	lpm	r24, Z+
 3e6:	8a 87       	std	Y+10, r24	; 0x0a
 3e8:	8a 85       	ldd	r24, Y+10	; 0x0a
 3ea:	f9 01       	movw	r30, r18
 3ec:	ec 59       	subi	r30, 0x9C	; 156
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	80 83       	st	Z, r24
 3f2:	49 c0       	rjmp	.+146    	; 0x486 <SrvTock+0x158>
						}
						else if(u08FrameDisplay==1)
 3f4:	80 91 a9 00 	lds	r24, 0x00A9
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	b1 f4       	brne	.+44     	; 0x428 <SrvTock+0xfa>
						{
							u08FirImage[u08Temp]=pgm_read_byte(&strLedScrn6[u08Temp]);
 3fc:	80 91 ab 00 	lds	r24, 0x00AB
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	80 91 ab 00 	lds	r24, 0x00AB
 408:	88 2f       	mov	r24, r24
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	8a 57       	subi	r24, 0x7A	; 122
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 87       	std	Y+9, r25	; 0x09
 412:	88 87       	std	Y+8, r24	; 0x08
 414:	e8 85       	ldd	r30, Y+8	; 0x08
 416:	f9 85       	ldd	r31, Y+9	; 0x09
 418:	84 91       	lpm	r24, Z+
 41a:	8f 83       	std	Y+7, r24	; 0x07
 41c:	8f 81       	ldd	r24, Y+7	; 0x07
 41e:	f9 01       	movw	r30, r18
 420:	e7 57       	subi	r30, 0x77	; 119
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	80 83       	st	Z, r24
 426:	2f c0       	rjmp	.+94     	; 0x486 <SrvTock+0x158>
						}
						else if(u08FrameDisplay==2)
 428:	80 91 a9 00 	lds	r24, 0x00A9
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	b1 f4       	brne	.+44     	; 0x45c <SrvTock+0x12e>
						{
							u08SecImage[u08Temp]=pgm_read_byte(&strLedScrn7[u08Temp]);
 430:	80 91 ab 00 	lds	r24, 0x00AB
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	80 91 ab 00 	lds	r24, 0x00AB
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	87 56       	subi	r24, 0x67	; 103
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	9e 83       	std	Y+6, r25	; 0x06
 446:	8d 83       	std	Y+5, r24	; 0x05
 448:	ed 81       	ldd	r30, Y+5	; 0x05
 44a:	fe 81       	ldd	r31, Y+6	; 0x06
 44c:	84 91       	lpm	r24, Z+
 44e:	8c 83       	std	Y+4, r24	; 0x04
 450:	8c 81       	ldd	r24, Y+4	; 0x04
 452:	f9 01       	movw	r30, r18
 454:	ec 59       	subi	r30, 0x9C	; 156
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	80 83       	st	Z, r24
 45a:	15 c0       	rjmp	.+42     	; 0x486 <SrvTock+0x158>
						}
						else
						{
							u08FirImage[u08Temp]=pgm_read_byte(&strLedScrn9[u08Temp]);
 45c:	80 91 ab 00 	lds	r24, 0x00AB
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	80 91 ab 00 	lds	r24, 0x00AB
 468:	88 2f       	mov	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	81 54       	subi	r24, 0x41	; 65
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	9b 83       	std	Y+3, r25	; 0x03
 472:	8a 83       	std	Y+2, r24	; 0x02
 474:	ea 81       	ldd	r30, Y+2	; 0x02
 476:	fb 81       	ldd	r31, Y+3	; 0x03
 478:	84 91       	lpm	r24, Z+
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	f9 01       	movw	r30, r18
 480:	e7 57       	subi	r30, 0x77	; 119
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	80 83       	st	Z, r24
        {
			case 0:
				u08StateTmr--;
				if(u08StateTmr==100)	//is it time to fade in?
				{
					for(u08Temp=0;u08Temp<16;u08Temp++)	//load all 16 bytes from flash into the ram array
 486:	80 91 ab 00 	lds	r24, 0x00AB
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 ab 00 	sts	0x00AB, r24
 490:	80 91 ab 00 	lds	r24, 0x00AB
 494:	80 31       	cpi	r24, 0x10	; 16
 496:	08 f4       	brcc	.+2      	; 0x49a <SrvTock+0x16c>
 498:	93 cf       	rjmp	.-218    	; 0x3c0 <SrvTock+0x92>
						else
						{
							u08FirImage[u08Temp]=pgm_read_byte(&strLedScrn9[u08Temp]);
						}
					}
					if(u08FrameDisplay==0 || u08FrameDisplay==2)
 49a:	80 91 a9 00 	lds	r24, 0x00A9
 49e:	88 23       	and	r24, r24
 4a0:	21 f0       	breq	.+8      	; 0x4aa <SrvTock+0x17c>
 4a2:	80 91 a9 00 	lds	r24, 0x00A9
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <SrvTock+0x182>
					{
						uboolFadeIn=true;	//fade in the current image
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 88 00 	sts	0x0088, r24
					}
					if(u08FrameDisplay==1 || u08FrameDisplay==3)
 4b0:	80 91 a9 00 	lds	r24, 0x00A9
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <SrvTock+0x192>
 4b8:	80 91 a9 00 	lds	r24, 0x00A9
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	19 f4       	brne	.+6      	; 0x4c6 <SrvTock+0x198>
					{
						uboolFadeOut=true;	//fade out the current image
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 86 00 	sts	0x0086, r24
					}
					u08FrameDisplay++;	//advance to the next image in the display
 4c6:	80 91 a9 00 	lds	r24, 0x00A9
 4ca:	8f 5f       	subi	r24, 0xFF	; 255
 4cc:	80 93 a9 00 	sts	0x00A9, r24
					if(u08FrameDisplay>3)	//is it time to reset the image steps?
 4d0:	80 91 a9 00 	lds	r24, 0x00A9
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	10 f0       	brcs	.+4      	; 0x4dc <SrvTock+0x1ae>
					{
						u08FrameDisplay=0;	//reset back to the first image
 4d8:	10 92 a9 00 	sts	0x00A9, r1
					}
				}
				if(u08StateTmr==0)	//is it time to reset the fade-in/fade-out timer?
 4dc:	80 91 62 00 	lds	r24, 0x0062
 4e0:	88 23       	and	r24, r24
 4e2:	19 f4       	brne	.+6      	; 0x4ea <SrvTock+0x1bc>
				{
					u08StateTmr=101;
 4e4:	85 e6       	ldi	r24, 0x65	; 101
 4e6:	80 93 62 00 	sts	0x0062, r24
				}
			break;

		}
	}
}
 4ea:	2c 96       	adiw	r28, 0x0c	; 12
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	cf 91       	pop	r28
 4f8:	df 91       	pop	r29
 4fa:	08 95       	ret

000004fc <bitReverseAByte>:

//Reverses the order of bits in a byte. (the MSB is swapped with LSB, etc.)
unsigned char bitReverseAByte(unsigned char u08ByteToReverse )
{
 4fc:	df 93       	push	r29
 4fe:	cf 93       	push	r28
 500:	0f 92       	push	r0
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	89 83       	std	Y+1, r24	; 0x01
    u08ByteToReverse = ((u08ByteToReverse >> 1) & 0x55) | ((u08ByteToReverse << 1) & 0xaa);
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	86 95       	lsr	r24
 50c:	28 2f       	mov	r18, r24
 50e:	25 75       	andi	r18, 0x55	; 85
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	8a 7a       	andi	r24, 0xAA	; 170
 51c:	82 2b       	or	r24, r18
 51e:	89 83       	std	Y+1, r24	; 0x01
    u08ByteToReverse = ((u08ByteToReverse >> 2) & 0x33) | ((u08ByteToReverse << 2) & 0xcc);
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	86 95       	lsr	r24
 524:	86 95       	lsr	r24
 526:	28 2f       	mov	r18, r24
 528:	23 73       	andi	r18, 0x33	; 51
 52a:	89 81       	ldd	r24, Y+1	; 0x01
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	8c 7c       	andi	r24, 0xCC	; 204
 53a:	82 2b       	or	r24, r18
 53c:	89 83       	std	Y+1, r24	; 0x01
    u08ByteToReverse = ((u08ByteToReverse >> 4) & 0x0f) | ((u08ByteToReverse << 4) & 0xf0);
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	82 95       	swap	r24
 542:	8f 70       	andi	r24, 0x0F	; 15
 544:	28 2f       	mov	r18, r24
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	88 2f       	mov	r24, r24
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	82 95       	swap	r24
 54e:	92 95       	swap	r25
 550:	90 7f       	andi	r25, 0xF0	; 240
 552:	98 27       	eor	r25, r24
 554:	80 7f       	andi	r24, 0xF0	; 240
 556:	98 27       	eor	r25, r24
 558:	82 2b       	or	r24, r18
 55a:	89 83       	std	Y+1, r24	; 0x01
    return u08ByteToReverse;   
 55c:	89 81       	ldd	r24, Y+1	; 0x01
} 
 55e:	0f 90       	pop	r0
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <setupBits>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void setupBits(void)
{
 566:	ff 92       	push	r15
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	0f 92       	push	r0
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
	u08 u08CountThrough;

	for(u08CountThrough=0; u08CountThrough<16; u08CountThrough+=2)	//go through all 8 of the driver chips (each chip takes 2 bytes)
 576:	19 82       	std	Y+1, r1	; 0x01
 578:	64 c0       	rjmp	.+200    	; 0x642 <setupBits+0xdc>
	{
		//byte 0, lower nibble;  reverse the lower byte and then mask off the lower nibble
		u08DisplayData[u08CountThrough+1]=bitReverseAByte(u08Input[u08CountThrough]) & 0xF0;	
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	88 2f       	mov	r24, r24
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	8c 01       	movw	r16, r24
 582:	0f 5f       	subi	r16, 0xFF	; 255
 584:	1f 4f       	sbci	r17, 0xFF	; 255
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	e7 56       	subi	r30, 0x67	; 103
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	80 81       	ld	r24, Z
 594:	b3 df       	rcall	.-154    	; 0x4fc <bitReverseAByte>
 596:	80 7f       	andi	r24, 0xF0	; 240
 598:	f8 01       	movw	r30, r16
 59a:	eb 58       	subi	r30, 0x8B	; 139
 59c:	ff 4f       	sbci	r31, 0xFF	; 255
 59e:	80 83       	st	Z, r24
		//byte 0, upper nibble;  shift the upper nibble 4 positions lower and then write to the output array
		u08DisplayData[u08CountThrough] = u08Input[u08CountThrough] >> 4;		
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	fc 01       	movw	r30, r24
 5ae:	e7 56       	subi	r30, 0x67	; 103
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	80 81       	ld	r24, Z
 5b4:	82 95       	swap	r24
 5b6:	8f 70       	andi	r24, 0x0F	; 15
 5b8:	f9 01       	movw	r30, r18
 5ba:	eb 58       	subi	r30, 0x8B	; 139
 5bc:	ff 4f       	sbci	r31, 0xFF	; 255
 5be:	80 83       	st	Z, r24
		//byte 1, lower nibble;  take the upper byte, lower nibble 4 positions to the left
		u08DisplayData[u08CountThrough] = u08DisplayData[u08CountThrough] | (u08Input[u08CountThrough+1] << 4);
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	fc 01       	movw	r30, r24
 5ce:	eb 58       	subi	r30, 0x8B	; 139
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	80 81       	ld	r24, Z
 5d4:	48 2f       	mov	r20, r24
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	fc 01       	movw	r30, r24
 5e0:	e7 56       	subi	r30, 0x67	; 103
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	80 81       	ld	r24, Z
 5e6:	88 2f       	mov	r24, r24
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	82 95       	swap	r24
 5ec:	92 95       	swap	r25
 5ee:	90 7f       	andi	r25, 0xF0	; 240
 5f0:	98 27       	eor	r25, r24
 5f2:	80 7f       	andi	r24, 0xF0	; 240
 5f4:	98 27       	eor	r25, r24
 5f6:	84 2b       	or	r24, r20
 5f8:	f9 01       	movw	r30, r18
 5fa:	eb 58       	subi	r30, 0x8B	; 139
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	80 83       	st	Z, r24
		//byte 1, upper nibble;  reverse the upper byte, mask off the upper nibble and then "or" the results
		u08DisplayData[u08CountThrough+1] = u08DisplayData[u08CountThrough+1] | (bitReverseAByte(u08Input[u08CountThrough+1])&0x0F);
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	8c 01       	movw	r16, r24
 608:	0f 5f       	subi	r16, 0xFF	; 255
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	88 2f       	mov	r24, r24
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	fc 01       	movw	r30, r24
 616:	eb 58       	subi	r30, 0x8B	; 139
 618:	ff 4f       	sbci	r31, 0xFF	; 255
 61a:	80 81       	ld	r24, Z
 61c:	f8 2e       	mov	r15, r24
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	88 2f       	mov	r24, r24
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	fc 01       	movw	r30, r24
 628:	e7 56       	subi	r30, 0x67	; 103
 62a:	ff 4f       	sbci	r31, 0xFF	; 255
 62c:	80 81       	ld	r24, Z
 62e:	66 df       	rcall	.-308    	; 0x4fc <bitReverseAByte>
 630:	8f 70       	andi	r24, 0x0F	; 15
 632:	8f 29       	or	r24, r15
 634:	f8 01       	movw	r30, r16
 636:	eb 58       	subi	r30, 0x8B	; 139
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	80 83       	st	Z, r24
//----------------------------------------------------------------------------
void setupBits(void)
{
	u08 u08CountThrough;

	for(u08CountThrough=0; u08CountThrough<16; u08CountThrough+=2)	//go through all 8 of the driver chips (each chip takes 2 bytes)
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	8e 5f       	subi	r24, 0xFE	; 254
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	80 31       	cpi	r24, 0x10	; 16
 646:	08 f4       	brcc	.+2      	; 0x64a <setupBits+0xe4>
 648:	98 cf       	rjmp	.-208    	; 0x57a <setupBits+0x14>
		//byte 1, lower nibble;  take the upper byte, lower nibble 4 positions to the left
		u08DisplayData[u08CountThrough] = u08DisplayData[u08CountThrough] | (u08Input[u08CountThrough+1] << 4);
		//byte 1, upper nibble;  reverse the upper byte, mask off the upper nibble and then "or" the results
		u08DisplayData[u08CountThrough+1] = u08DisplayData[u08CountThrough+1] | (bitReverseAByte(u08Input[u08CountThrough+1])&0x0F);
	}
}
 64a:	0f 90       	pop	r0
 64c:	cf 91       	pop	r28
 64e:	df 91       	pop	r29
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	08 95       	ret

00000658 <display16Bytes>:
//       none
//Returns:
//       none
//----------------------------------------------------------------------------
void display16Bytes(void)
{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	00 d0       	rcall	.+0      	; 0x65e <display16Bytes+0x6>
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	volatile u08 u08Counter=1;		//this int holds the bit mask to shift through the 16 bit integer
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	89 83       	std	Y+1, r24	; 0x01
	
	//defDispDriverPort &= ~(1<<defLedLatch);		//start out with all of the lines going to the driver chip held low
	//defDispDriverPort &= ~(1<<defLedEnable);
	//defDispDriverPort &= ~(1<<defLedData);
	//defDispDriverPort &= ~(1<<defLedClock);
	asm volatile("nop");
 668:	00 00       	nop
	defDispDriverPort |= (1<<defLedLatch);	//take the latch high to start loading in data
 66a:	ab e3       	ldi	r26, 0x3B	; 59
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	eb e3       	ldi	r30, 0x3B	; 59
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	82 60       	ori	r24, 0x02	; 2
 676:	8c 93       	st	X, r24
	defDispDriverPort |= (1<<defLedEnable);	//turn the drivers off while shift in data
 678:	ab e3       	ldi	r26, 0x3B	; 59
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	eb e3       	ldi	r30, 0x3B	; 59
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	88 60       	ori	r24, 0x08	; 8
 684:	8c 93       	st	X, r24
	for(u08CurrentByte=0;u08CurrentByte<16;u08CurrentByte++)	//cycle through all 16 bytes that are to be displayed
 686:	1b 82       	std	Y+3, r1	; 0x03
 688:	39 c0       	rjmp	.+114    	; 0x6fc <display16Bytes+0xa4>
	{
		u08Counter=1;	//reset the bit shift counter
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	89 83       	std	Y+1, r24	; 0x01
		for(u08ShiftCounter=0;u08ShiftCounter<8;u08ShiftCounter++)	//cycle through each bit in the 16 bytes
 68e:	1a 82       	std	Y+2, r1	; 0x02
 690:	2f c0       	rjmp	.+94     	; 0x6f0 <display16Bytes+0x98>
		{
			if(u08DisplayData[u08CurrentByte] & u08Counter)		//This uses a bit mask to set the data line 
 692:	8b 81       	ldd	r24, Y+3	; 0x03
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	fc 01       	movw	r30, r24
 69a:	eb 58       	subi	r30, 0x8B	; 139
 69c:	ff 4f       	sbci	r31, 0xFF	; 255
 69e:	90 81       	ld	r25, Z
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	89 23       	and	r24, r25
 6a4:	88 23       	and	r24, r24
 6a6:	41 f0       	breq	.+16     	; 0x6b8 <display16Bytes+0x60>
			{
				defDispDriverPort |= (1<<defLedData);		//we want to turn on the corresponding LED driver output using the data line
 6a8:	ab e3       	ldi	r26, 0x3B	; 59
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	eb e3       	ldi	r30, 0x3B	; 59
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	8c 93       	st	X, r24
 6b6:	07 c0       	rjmp	.+14     	; 0x6c6 <display16Bytes+0x6e>
			}
			else
			{
				defDispDriverPort &= ~(1<<defLedData);		//we want to turn off the corresponding LED driver output
 6b8:	ab e3       	ldi	r26, 0x3B	; 59
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	eb e3       	ldi	r30, 0x3B	; 59
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	8e 7f       	andi	r24, 0xFE	; 254
 6c4:	8c 93       	st	X, r24
			}
			u08Counter = (u08Counter<<1);	//shift the bitmask to the left
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	88 0f       	add	r24, r24
 6ca:	89 83       	std	Y+1, r24	; 0x01
			defDispDriverPort |= (1<<defLedClock);			//clock the data into the LED driver chip
 6cc:	ab e3       	ldi	r26, 0x3B	; 59
 6ce:	b0 e0       	ldi	r27, 0x00	; 0
 6d0:	eb e3       	ldi	r30, 0x3B	; 59
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	84 60       	ori	r24, 0x04	; 4
 6d8:	8c 93       	st	X, r24
			asm volatile("nop");
 6da:	00 00       	nop
			defDispDriverPort &= ~(1<<defLedClock);		//get the clock line ready for next time
 6dc:	ab e3       	ldi	r26, 0x3B	; 59
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	eb e3       	ldi	r30, 0x3B	; 59
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	8b 7f       	andi	r24, 0xFB	; 251
 6e8:	8c 93       	st	X, r24
	defDispDriverPort |= (1<<defLedLatch);	//take the latch high to start loading in data
	defDispDriverPort |= (1<<defLedEnable);	//turn the drivers off while shift in data
	for(u08CurrentByte=0;u08CurrentByte<16;u08CurrentByte++)	//cycle through all 16 bytes that are to be displayed
	{
		u08Counter=1;	//reset the bit shift counter
		for(u08ShiftCounter=0;u08ShiftCounter<8;u08ShiftCounter++)	//cycle through each bit in the 16 bytes
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	8a 83       	std	Y+2, r24	; 0x02
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	88 30       	cpi	r24, 0x08	; 8
 6f4:	70 f2       	brcs	.-100    	; 0x692 <display16Bytes+0x3a>
	//defDispDriverPort &= ~(1<<defLedData);
	//defDispDriverPort &= ~(1<<defLedClock);
	asm volatile("nop");
	defDispDriverPort |= (1<<defLedLatch);	//take the latch high to start loading in data
	defDispDriverPort |= (1<<defLedEnable);	//turn the drivers off while shift in data
	for(u08CurrentByte=0;u08CurrentByte<16;u08CurrentByte++)	//cycle through all 16 bytes that are to be displayed
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	8b 83       	std	Y+3, r24	; 0x03
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	80 31       	cpi	r24, 0x10	; 16
 700:	20 f2       	brcs	.-120    	; 0x68a <display16Bytes+0x32>
			defDispDriverPort |= (1<<defLedClock);			//clock the data into the LED driver chip
			asm volatile("nop");
			defDispDriverPort &= ~(1<<defLedClock);		//get the clock line ready for next time
		}
	}	
	defDispDriverPort &= ~(1<<defLedLatch);	//take the latch low to latch in the data
 702:	ab e3       	ldi	r26, 0x3B	; 59
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	eb e3       	ldi	r30, 0x3B	; 59
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	8d 7f       	andi	r24, 0xFD	; 253
 70e:	8c 93       	st	X, r24
	defDispDriverPort &= ~(1<<defLedEnable);	//turn the drivers on after the data has been loaded into the driver ic
 710:	ab e3       	ldi	r26, 0x3B	; 59
 712:	b0 e0       	ldi	r27, 0x00	; 0
 714:	eb e3       	ldi	r30, 0x3B	; 59
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	8c 93       	st	X, r24
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <uCinit>:
//				none
//Returns:
//       		none
//----------------------------------------------------------------------------
void uCinit(void)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
		PORTA=0x10;          	//enable pull-up resistors
 732:	eb e3       	ldi	r30, 0x3B	; 59
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 e1       	ldi	r24, 0x10	; 16
 738:	80 83       	st	Z, r24
		DDRA=0xEF;   			//set PORTA to outputs
 73a:	ea e3       	ldi	r30, 0x3A	; 58
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	8f ee       	ldi	r24, 0xEF	; 239
 740:	80 83       	st	Z, r24
		PORTB=0xE0;          	//enable pull-up resistors
 742:	e8 e3       	ldi	r30, 0x38	; 56
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 ee       	ldi	r24, 0xE0	; 224
 748:	80 83       	st	Z, r24
		DDRB=0xFF;   			//set PORTB to outputs
 74a:	e7 e3       	ldi	r30, 0x37	; 55
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	80 83       	st	Z, r24

		//8 bit timer initialization (timer 0)
		TIMSK=(1<<TOIE0);   //Enable TCNT0 overflow
 752:	e9 e5       	ldi	r30, 0x59	; 89
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	80 83       	st	Z, r24
		TCNT0H=0;         	// reset TCNT0
 75a:	e4 e3       	ldi	r30, 0x34	; 52
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	10 82       	st	Z, r1
		TCNT0L=0;         	// reset TCNT0
 760:	e2 e5       	ldi	r30, 0x52	; 82
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	10 82       	st	Z, r1
		TCCR0A=0;			//just a normal overflow
 766:	e5 e3       	ldi	r30, 0x35	; 53
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	10 82       	st	Z, r1
		TCCR0B=(1<<CS01);	//|(1<<CS00);        	//count with cpu clock/1
 76c:	e3 e5       	ldi	r30, 0x53	; 83
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	80 83       	st	Z, r24
}
 774:	cf 91       	pop	r28
 776:	df 91       	pop	r29
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
