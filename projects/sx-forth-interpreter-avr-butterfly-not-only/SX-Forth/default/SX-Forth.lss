
SX-Forth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001ad6  00001b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800100  00800100  00001b6a  2**0
                  ALLOC
  3 .noinit       00000000  00800298  00800298  00001b6a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001b6a  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000e3d  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002079  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000020a  00000000  00000000  00004e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f6c  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ca1  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 02 	jmp	0x4dc <__init>
       4:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
       8:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
       c:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      10:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      14:	0c 94 1e 0c 	jmp	0x183c <__vector_5>
      18:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      1c:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      20:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      24:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      28:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      2c:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      30:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      34:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      38:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      3c:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      40:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      44:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      48:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      4c:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      50:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      54:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>
      58:	0c 94 89 02 	jmp	0x512 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	53 02       	muls	r21, r19
      5e:	32 09       	sbc	r19, r2
      60:	00 65       	ori	r16, 0x50	; 80
      62:	03 61       	ori	r16, 0x13	; 19
      64:	04 00       	.word	0x0004	; ????
      66:	62 03       	mulsu	r22, r18
      68:	8d 04       	cpc	r8, r13
      6a:	00 60       	ori	r16, 0x00	; 0
      6c:	03 bb       	out	0x13, r16	; 19
      6e:	04 00       	.word	0x0004	; ????
      70:	5d 03       	fmul	r21, r21
      72:	e6 04       	cpc	r14, r6
      74:	00 5b       	subi	r16, 0xB0	; 176
      76:	03 12       	cpse	r0, r19
      78:	05 00       	.word	0x0005	; ????
      7a:	58 03       	fmul	r21, r16
      7c:	28 05       	cpc	r18, r8
      7e:	00 52       	subi	r16, 0x20	; 32
      80:	03 37       	cpi	r16, 0x73	; 115
      82:	05 00       	.word	0x0005	; ????
      84:	48 03       	fmul	r20, r16
      86:	87 05       	cpc	r24, r7
      88:	01 4f       	sbci	r16, 0xF1	; 241
      8a:	03 40       	sbci	r16, 0x03	; 3
      8c:	05 01       	movw	r0, r10
      8e:	4c 03       	fmul	r20, r20
      90:	66 05       	cpc	r22, r6
      92:	01 55       	subi	r16, 0x51	; 81
      94:	03 33       	cpi	r16, 0x33	; 51
      96:	05 00       	.word	0x0005	; ????
      98:	44 03       	mulsu	r20, r20
      9a:	90 05       	cpc	r25, r0
      9c:	00 3a       	cpi	r16, 0xA0	; 160
      9e:	03 b2       	in	r0, 0x13	; 19
      a0:	05 00       	.word	0x0005	; ????
      a2:	3f 03       	fmul	r19, r23
      a4:	ab 05       	cpc	r26, r11
      a6:	00 37       	cpi	r16, 0x70	; 112
      a8:	03 cb       	rjmp	.-2554   	; 0xfffff6b0 <__eeprom_end+0xff7ef6b0>
      aa:	05 00       	.word	0x0005	; ????
      ac:	34 03       	mulsu	r19, r20
      ae:	d5 05       	cpc	r29, r5
      b0:	00 30       	cpi	r16, 0x00	; 0
      b2:	03 df       	rcall	.-506    	; 0xfffffeba <__eeprom_end+0xff7efeba>
      b4:	05 00       	.word	0x0005	; ????
      b6:	2c 03       	fmul	r18, r20
      b8:	ea 05       	cpc	r30, r10
      ba:	00 29       	or	r16, r0
      bc:	03 f4       	brvc	.+0      	; 0xbe <__ctors_end+0x62>
      be:	05 00       	.word	0x0005	; ????
      c0:	25 03       	mulsu	r18, r21
      c2:	0a 06       	cpc	r0, r26
      c4:	00 21       	and	r16, r0
      c6:	03 20       	and	r0, r3
      c8:	06 00       	.word	0x0006	; ????
      ca:	1f 03       	fmul	r17, r23
      cc:	36 06       	cpc	r3, r22
      ce:	00 1d       	adc	r16, r0
      d0:	03 4c       	sbci	r16, 0xC3	; 195
      d2:	06 00       	.word	0x0006	; ????
      d4:	1b 03       	fmul	r17, r19
      d6:	63 06       	cpc	r6, r19
      d8:	00 19       	sub	r16, r0
      da:	03 7f       	andi	r16, 0xF3	; 243
      dc:	06 00       	.word	0x0006	; ????
      de:	16 03       	mulsu	r17, r22
      e0:	96 06       	cpc	r9, r22
      e2:	00 12       	cpse	r0, r16
      e4:	03 dd       	rcall	.-1530   	; 0xfffffaec <__eeprom_end+0xff7efaec>
      e6:	06 00       	.word	0x0006	; ????
      e8:	0e 03       	fmul	r16, r22
      ea:	f3 06       	cpc	r15, r19
      ec:	00 0a       	sbc	r0, r16
      ee:	03 0b       	sbc	r16, r19
      f0:	07 00       	.word	0x0007	; ????
      f2:	07 03       	mulsu	r16, r23
      f4:	23 07       	cpc	r18, r19
      f6:	00 04       	cpc	r0, r0
      f8:	03 3f       	cpi	r16, 0xF3	; 243
      fa:	07 00       	.word	0x0007	; ????
      fc:	02 03       	mulsu	r16, r18
      fe:	5b 07       	cpc	r21, r27
     100:	00 ff       	sbrs	r16, 0
     102:	02 77       	andi	r16, 0x72	; 114
     104:	07 00       	.word	0x0007	; ????
     106:	fd 02       	muls	r31, r29
     108:	93 07       	cpc	r25, r19
     10a:	00 fa       	bst	r0, 0
     10c:	02 af       	std	Z+58, r16	; 0x3a
     10e:	07 00       	.word	0x0007	; ????
     110:	f8 02       	muls	r31, r24
     112:	cb 07       	cpc	r28, r27
     114:	00 f5       	brcc	.+64     	; 0x156 <__ctors_end+0xfa>
     116:	02 d0       	rcall	.+4      	; 0x11c <__ctors_end+0xc0>
     118:	07 00       	.word	0x0007	; ????
     11a:	f2 02       	muls	r31, r18
     11c:	d7 07       	cpc	r29, r23
     11e:	00 ef       	ldi	r16, 0xF0	; 240
     120:	02 de       	rcall	.-1020   	; 0xfffffd26 <__eeprom_end+0xff7efd26>
     122:	07 00       	.word	0x0007	; ????
     124:	ec 02       	muls	r30, r28
     126:	e7 07       	cpc	r30, r23
     128:	00 e9       	ldi	r16, 0x90	; 144
     12a:	02 f1       	brmi	.+64     	; 0x16c <__ctors_end+0x110>
     12c:	07 00       	.word	0x0007	; ????
     12e:	e7 02       	muls	r30, r23
     130:	fb 07       	cpc	r31, r27
     132:	00 e4       	ldi	r16, 0x40	; 64
     134:	02 00       	.word	0x0002	; ????
     136:	08 00       	.word	0x0008	; ????
     138:	e1 02       	muls	r30, r17
     13a:	07 08       	sbc	r0, r7
     13c:	00 de       	rcall	.-1024   	; 0xfffffd3e <__eeprom_end+0xff7efd3e>
     13e:	02 0e       	add	r0, r18
     140:	08 00       	.word	0x0008	; ????
     142:	db 02       	muls	r29, r27
     144:	17 08       	sbc	r1, r7
     146:	00 d8       	rcall	.-4096   	; 0xfffff148 <__eeprom_end+0xff7ef148>
     148:	02 21       	and	r16, r2
     14a:	08 00       	.word	0x0008	; ????
     14c:	d5 02       	muls	r29, r21
     14e:	2b 08       	sbc	r2, r11
     150:	00 cd       	rjmp	.-1536   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     152:	02 46       	sbci	r16, 0x62	; 98
     154:	08 00       	.word	0x0008	; ????
     156:	c5 02       	muls	r28, r21
     158:	61 08       	sbc	r6, r1
     15a:	00 bd       	out	0x20, r16	; 32
     15c:	02 7c       	andi	r16, 0xC2	; 194
     15e:	08 00       	.word	0x0008	; ????
     160:	d1 02       	muls	r29, r17
     162:	34 08       	sbc	r3, r4
     164:	00 c8       	rjmp	.-4096   	; 0xfffff166 <__eeprom_end+0xff7ef166>
     166:	02 4f       	sbci	r16, 0xF2	; 242
     168:	08 00       	.word	0x0008	; ????
     16a:	c1 02       	muls	r28, r17
     16c:	6a 08       	sbc	r6, r10
     16e:	00 b8       	out	0x00, r0	; 0
     170:	02 85       	ldd	r16, Z+10	; 0x0a
     172:	08 00       	.word	0x0008	; ????
     174:	af 02       	muls	r26, r31
     176:	97 08       	sbc	r9, r7
     178:	00 a9       	ldd	r16, Z+48	; 0x30
     17a:	02 91       	ld	r16, -Z
     17c:	0a 00       	.word	0x000a	; ????
     17e:	a6 02       	muls	r26, r22
     180:	a3 08       	sbc	r10, r3
     182:	01 a1       	ldd	r16, Z+33	; 0x21
     184:	02 b5       	in	r16, 0x22	; 34
     186:	08 01       	movw	r0, r16
     188:	9b 02       	muls	r25, r27
     18a:	bf 08       	sbc	r11, r15
     18c:	01 98       	cbi	0x00, 1	; 0
     18e:	02 c2       	rjmp	.+1028   	; 0x594 <OSCCAL_calibration+0x66>
     190:	08 01       	movw	r0, r16
     192:	93 02       	muls	r25, r19
     194:	e8 08       	sbc	r14, r8
     196:	01 89       	ldd	r16, Z+17	; 0x11
     198:	02 1c       	adc	r0, r2
     19a:	09 00       	.word	0x0009	; ????
     19c:	9b 03       	fmulsu	r17, r19
     19e:	24 04       	cpc	r2, r4
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	03 2b       	or	r16, r19
     1a4:	04 00       	.word	0x0004	; ????
     1a6:	92 03       	fmuls	r17, r18
     1a8:	32 04       	cpc	r3, r2
     1aa:	00 8d       	ldd	r16, Z+24	; 0x18
     1ac:	03 36       	cpi	r16, 0x63	; 99
     1ae:	04 00       	.word	0x0004	; ????
     1b0:	7d 03       	fmul	r23, r21
     1b2:	44 04       	cpc	r4, r4
     1b4:	00 6d       	ori	r16, 0xD0	; 208
     1b6:	03 59       	subi	r16, 0x93	; 147
     1b8:	04 00       	.word	0x0004	; ????
     1ba:	67 03       	mulsu	r22, r23
     1bc:	5d 04       	cpc	r5, r13
     1be:	00 74       	andi	r16, 0x40	; 64
     1c0:	03 47       	sbci	r16, 0x73	; 115
     1c2:	04 00       	.word	0x0004	; ????
     1c4:	7d 02       	muls	r23, r29
     1c6:	8b 09       	sbc	r24, r11
     1c8:	00 76       	andi	r16, 0x60	; 96
     1ca:	02 a9       	ldd	r16, Z+50	; 0x32
     1cc:	09 01       	movw	r0, r18
     1ce:	87 03       	fmuls	r16, r23
     1d0:	3b 04       	cpc	r3, r11
     1d2:	00 81       	ld	r16, Z
     1d4:	03 41       	sbci	r16, 0x13	; 19
     1d6:	04 00       	.word	0x0004	; ????
     1d8:	83 02       	muls	r24, r19
     1da:	66 09       	sbc	r22, r6
     1dc:	00 4e       	sbci	r16, 0xE0	; 224
     1de:	02 36       	cpi	r16, 0x62	; 98
     1e0:	02 02       	muls	r16, r18
     1e2:	30 02       	muls	r19, r16
     1e4:	0c 02       	muls	r16, r28
     1e6:	02 07       	cpc	r16, r18
     1e8:	02 f1       	brmi	.+64     	; 0x22a <MEM_STR_DUMP+0x1e>
     1ea:	01 02       	muls	r16, r17
     1ec:	00 00       	nop
     1ee:	00 00       	nop
	...

000001f1 <MEM_FILL>:
     1f1:	4a 21 20 49 21 20 44 4f 20 4a 40 20 21 49 42 2b     J! I! DO J@ !IB+
     201:	20 4c 4f 4f 50 00                                    LOOP.

00000207 <MEM_FILL_>:
     207:	46 49 4c 4c 00                                      FILL.

0000020c <MEM_STR_DUMP>:
     20c:	49 21 20 31 30 30 20 44 4f 20 40 49 42 2b 20 44     I! 100 DO @IB+ D
     21c:	55 50 20 3d 3d 30 5f 45 58 49 54 20 2e 43 20 4c     UP ==0_EXIT .C L
     22c:	4f 4f 50 00                                         OOP.

00000230 <MEM_STR_DUMP_>:
     230:	44 55 4d 50 22 00                                   DUMP".

00000236 <MEM_DUMP>:
     236:	49 21 20 44 4f 20 49 2e 20 40 49 42 2b 20 2e 20     I! DO I. @IB+ . 
     246:	43 52 20 4c 4f 4f 50 00                             CR LOOP.

0000024e <MEM_DUMP_>:
     24e:	44 55 4d 50 00                                      DUMP.

00000253 <C_FUNCTION_CALL_BY_NAME>:
     253:	43 41 4c 4c 00                                      CALL.

00000258 <c_DICT>:
     258:	6d 02 28 09 64 02 2d 09 00 00 00 00                 m.(.d.-.....

00000264 <_C_FUNCTION_1>:
     264:	43 5f 46 75 6e 63 5f 31 00                          C_Func_1.

0000026d <_C_FUNCTION_0>:
     26d:	43 5f 46 75 6e 63 5f 30 00                          C_Func_0.

00000276 <CHECK_PAUSE>:
     276:	3f 50 41 55 53 45 00                                ?PAUSE.

0000027d <PAUSE>:
     27d:	50 41 55 53 45 00                                   PAUSE.

00000283 <WORDS>:
     283:	57 4f 52 44 53 00                                   WORDS.

00000289 <ZERO_TOS_BREAK>:
     289:	3d 3d 30 5f 42 52 45 41 4b 00                       ==0_BREAK.

00000293 <LOOP>:
     293:	4c 4f 4f 50 00                                      LOOP.

00000298 <DO>:
     298:	44 4f 00                                            DO.

0000029b <ENDIF>:
     29b:	45 4e 44 49 46 00                                   ENDIF.

000002a1 <ELSE>:
     2a1:	45 4c 53 45 00                                      ELSE.

000002a6 <IF>:
     2a6:	49 46 00                                            IF.

000002a9 <USER_ENTRY>:
     2a9:	3f 55 53 45 52 00                                   ?USER.

000002af <ZERO_TOS_EXIT>:
     2af:	3d 3d 30 5f 45 58 49 54 00                          ==0_EXIT.

000002b8 <IND_I_STORE_BYTE_INC>:
     2b8:	21 49 42 2b 00                                      !IB+.

000002bd <IND_I_STORE_BYTE>:
     2bd:	21 49 42 00                                         !IB.

000002c1 <IND_I_STORE_INC>:
     2c1:	21 49 2b 00                                         !I+.

000002c5 <IND_I_STORE>:
     2c5:	21 49 00                                            !I.

000002c8 <IND_I_FETCH_BYTE_INC>:
     2c8:	40 49 42 2b 00                                      @IB+.

000002cd <IND_I_FETCH_BYTE>:
     2cd:	40 49 42 00                                         @IB.

000002d1 <IND_I_FETCH_INC>:
     2d1:	40 49 2b 00                                         @I+.

000002d5 <IND_I_FETCH>:
     2d5:	40 49 00                                            @I.

000002d8 <DEC_J>:
     2d8:	4a 2d 00                                            J-.

000002db <INC_J>:
     2db:	4a 2b 00                                            J+.

000002de <DISPLAY_J>:
     2de:	4a 2e 00                                            J..

000002e1 <FETCH_J>:
     2e1:	4a 40 00                                            J@.

000002e4 <STORE_J>:
     2e4:	4a 21 00                                            J!.

000002e7 <ADDR_J>:
     2e7:	4a 00                                               J.

000002e9 <DEC_I>:
     2e9:	49 2d 00                                            I-.

000002ec <INC_I>:
     2ec:	49 2b 00                                            I+.

000002ef <DISPLAY_I>:
     2ef:	49 2e 00                                            I..

000002f2 <FETCH_I>:
     2f2:	49 40 00                                            I@.

000002f5 <STORE_I>:
     2f5:	49 21 00                                            I!.

000002f8 <ADDR_I>:
     2f8:	49 00                                               I.

000002fa <LOWER_OR_EQUAL>:
     2fa:	3c 3d 00                                            <=.

000002fd <LOWER>:
     2fd:	3c 00                                               <.

000002ff <GREATHER_OR_EQUAL>:
     2ff:	3e 3d 00                                            >=.

00000302 <GREATHER>:
     302:	3e 00                                               >.

00000304 <NOT_EQUAL>:
     304:	3c 3e 00                                            <>.

00000307 <EQUAL>:
     307:	3d 3d 00                                            ==.

0000030a <RSH_>:
     30a:	52 53 48 00                                         RSH.

0000030e <LSH_>:
     30e:	4c 53 48 00                                         LSH.

00000312 <MOD_>:
     312:	4d 4f 44 00                                         MOD.

00000316 <SCALE_>:
     316:	2a 2f 00                                            */.

00000319 <DIV_>:
     319:	2f 00                                               /.

0000031b <MULT>:
     31b:	2a 00                                               *.

0000031d <DIFF>:
     31d:	2d 00                                               -.

0000031f <ADD_>:
     31f:	2b 00                                               +.

00000321 <AND_>:
     321:	41 4e 44 00                                         AND.

00000325 <XOR_>:
     325:	58 4f 52 00                                         XOR.

00000329 <OR__>:
     329:	4f 52 00                                            OR.

0000032c <ABS_>:
     32c:	41 42 53 00                                         ABS.

00000330 <NOT_>:
     330:	4e 4f 54 00                                         NOT.

00000334 <DEC_>:
     334:	2d 31 00                                            -1.

00000337 <INC_>:
     337:	2b 31 00                                            +1.

0000033a <SWAP_>:
     33a:	53 57 41 50 00                                      SWAP.

0000033f <DROP_>:
     33f:	44 52 4f 50 00                                      DROP.

00000344 <DUP_>:
     344:	44 55 50 00                                         DUP.

00000348 <CLEAR_STACKS>:
     348:	2e 43 53 00                                         .CS.

0000034c <ASK_RETURN_STACK>:
     34c:	2e 52 00                                            .R.

0000034f <ASK_DATA_STACK>:
     34f:	2e 53 00                                            .S.

00000352 <DOT_TOS_STRING>:
     352:	2e 22 00                                            .".

00000355 <CR_>:
     355:	43 52 00                                            CR.

00000358 <DOT_TOS_CHAR>:
     358:	2e 43 00                                            .C.

0000035b <DOT_TOS>:
     35b:	2e 00                                               ..

0000035d <FETCH_BYTE>:
     35d:	40 42 00                                            @B.

00000360 <FETCH>:
     360:	40 00                                               @.

00000362 <STORE_BYTE>:
     362:	21 42 00                                            !B.

00000365 <STORE>:
     365:	21 00                                               !.

00000367 <FLASH_>:
     367:	46 4c 41 53 48 00                                   FLASH.

0000036d <EEPROM_>:
     36d:	45 45 50 52 4f 4d 00                                EEPROM.

00000374 <USER_RAM>:
     374:	52 41 4d 5f 55 53 45 52 00                          RAM_USER.

0000037d <RAM_>:
     37d:	52 41 4d 00                                         RAM.

00000381 <STEP_NO>:
     381:	53 54 45 50 2d 00                                   STEP-.

00000387 <STEP_YES>:
     387:	53 54 45 50 2b 00                                   STEP+.

0000038d <DBG_NO>:
     38d:	44 42 47 2d 00                                      DBG-.

00000392 <DBG_YES>:
     392:	44 42 47 2b 00                                      DBG+.

00000397 <BASE_HEX>:
     397:	48 45 58 00                                         HEX.

0000039b <BASE_DEC>:
     39b:	44 45 43 00                                         DEC.

0000039f <errMsg>:
     39f:	32 04 25 04 14 04 05 04 ed 03 de 03 c7 03 af 03     2.%.............

000003af <_PARSER_RING_BUFFER_FULL_>:
     3af:	50 41 52 53 45 52 5f 52 49 4e 47 5f 42 55 46 46     PARSER_RING_BUFF
     3bf:	45 52 5f 46 55 4c 4c 00                             ER_FULL.

000003c7 <_STDIN_RING_BUFFER_FULL_>:
     3c7:	53 54 44 49 4e 5f 52 49 4e 47 5f 42 55 46 46 45     STDIN_RING_BUFFE
     3d7:	52 5f 46 55 4c 4c 00                                R_FULL.

000003de <_WRITE_DISABLED_>:
     3de:	57 52 49 54 45 5f 44 49 53 41 42 4c 45 44 00        WRITE_DISABLED.

000003ed <_INSUFFICIENT_PARAMETERS_>:
     3ed:	49 4e 53 55 46 46 49 43 49 45 4e 54 5f 50 41 52     INSUFFICIENT_PAR
     3fd:	41 4d 45 54 45 52 53 00                             AMETERS.

00000405 <_MEMORY_UNKNOWN_>:
     405:	4d 45 4d 4f 52 59 5f 55 4e 4b 4e 4f 57 4e 00        MEMORY_UNKNOWN.

00000414 <_FUNCTION_UNKNOWN_>:
     414:	46 55 4e 43 54 49 4f 4e 5f 55 4e 4b 4e 4f 57 4e     FUNCTION_UNKNOWN
	...

00000425 <_WORD_UNKNOWN_>:
     425:	57 4f 52 44 5f 55 4e 4b 4e 4f 57 4e 00              WORD_UNKNOWN.

00000432 <_STACK_FULL_>:
     432:	53 54 41 43 4b 5f 46 55 4c 4c 00                    STACK_FULL.

0000043d <__c.13>:
     43d:	20 2d 3e 20 00                                       -> .

00000442 <__c.11>:
     442:	07 43 5f 46 75 6e 63 5f 30 28 29 20 72 65 61 63     .C_Func_0() reac
     452:	68 65 64 20 21 00                                   hed !.

00000458 <__c.10>:
     458:	07 43 5f 46 75 6e 63 5f 31 28 29 20 72 65 61 63     .C_Func_1() reac
     468:	68 65 64 20 21 00                                   hed !.

0000046e <__c.7>:
     46e:	20 50 41 55 53 45 3a 20 5b 45 5d 20 45 78 69 74      PAUSE: [E] Exit
     47e:	2c 20 75 73 65 72 20 2d 3e 20 00                    , user -> .

00000489 <__c.8>:
     489:	45 0d 00                                            E..

0000048c <__c.9>:
     48c:	2e 0d 00                                            ...

0000048f <__c.5>:
     48f:	0d 3e 00                                            .>.

00000492 <__c.6>:
     492:	08 20 00                                            . .

00000495 <__c.12>:
     495:	0d 55 73 65 72 20 3e 00                             .User >.

0000049d <__c.1>:
     49d:	0d 0d 3e 00                                         ..>.

000004a1 <__c.2>:
     4a1:	0d 5b 00                                            .[.

000004a4 <__c.3>:
     4a4:	5d 20 00                                            ] .

000004a7 <__c.4>:
     4a7:	0d 0d 3e 00                                         ..>.

000004ab <__c.0>:
     4ab:	0d 41 56 52 20 53 58 2d 46 6f 72 74 68 20 32 30     .AVR SX-Forth 20
     4bb:	30 36 30 37 31 33 20 5b 56 2e 46 6f 72 65 73 74     060713 [V.Forest
     4cb:	6f 20 2d 20 43 6f 6d 6d 2e 53 45 43 5d 0d 0d 3e     o - Comm.SEC]..>
	...

000004dc <__init>:
     4dc:	11 24       	eor	r1, r1
     4de:	1f be       	out	0x3f, r1	; 63
     4e0:	cf ef       	ldi	r28, 0xFF	; 255
     4e2:	d4 e0       	ldi	r29, 0x04	; 4
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	cd bf       	out	0x3d, r28	; 61

000004e8 <__do_copy_data>:
     4e8:	11 e0       	ldi	r17, 0x01	; 1
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b1 e0       	ldi	r27, 0x01	; 1
     4ee:	e6 ed       	ldi	r30, 0xD6	; 214
     4f0:	fa e1       	ldi	r31, 0x1A	; 26
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <.do_copy_data_start>

000004f4 <.do_copy_data_loop>:
     4f4:	05 90       	lpm	r0, Z+
     4f6:	0d 92       	st	X+, r0

000004f8 <.do_copy_data_start>:
     4f8:	a0 30       	cpi	r26, 0x00	; 0
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <.do_copy_data_loop>

000004fe <__do_clear_bss>:
     4fe:	12 e0       	ldi	r17, 0x02	; 2
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a8 39       	cpi	r26, 0x98	; 152
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0c 94 42 0c 	jmp	0x1884 <main>

00000512 <__bad_interrupt>:
     512:	0c 94 00 00 	jmp	0x0 <__vectors>

00000516 <DelayMSEC>:
	u8 i;

	 while (millisec--)
		{
		for (i=0; i<125; i++)
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	2f ef       	ldi	r18, 0xFF	; 255
     51a:	8f 3f       	cpi	r24, 0xFF	; 255
     51c:	92 07       	cpc	r25, r18
     51e:	31 f0       	breq	.+12     	; 0x52c <DelayMSEC+0x16>
     520:	2c e7       	ldi	r18, 0x7C	; 124
			asm volatile ("nop"::);
     522:	00 00       	nop
     524:	21 50       	subi	r18, 0x01	; 1
     526:	27 ff       	sbrs	r18, 7
     528:	fc cf       	rjmp	.-8      	; 0x522 <DelayMSEC+0xc>
     52a:	f5 cf       	rjmp	.-22     	; 0x516 <DelayMSEC>
     52c:	08 95       	ret

0000052e <OSCCAL_calibration>:
     52e:	cf 93       	push	r28
     530:	c0 e0       	ldi	r28, 0x00	; 0
     532:	80 e8       	ldi	r24, 0x80	; 128
     534:	80 93 61 00 	sts	0x0061, r24
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	80 93 61 00 	sts	0x0061, r24
     53e:	c0 93 70 00 	sts	0x0070, r28
     542:	88 e0       	ldi	r24, 0x08	; 8
     544:	80 93 b6 00 	sts	0x00B6, r24
     548:	88 ec       	ldi	r24, 0xC8	; 200
     54a:	80 93 b3 00 	sts	0x00B3, r24
     54e:	c0 93 6e 00 	sts	0x006E, r28
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 81 00 	sts	0x0081, r24
     558:	80 93 b0 00 	sts	0x00B0, r24
     55c:	80 91 b6 00 	lds	r24, 0x00B6
     560:	28 2f       	mov	r18, r24
     562:	33 27       	eor	r19, r19
     564:	21 70       	andi	r18, 0x01	; 1
     566:	30 70       	andi	r19, 0x00	; 0
     568:	80 91 b6 00 	lds	r24, 0x00B6
     56c:	99 27       	eor	r25, r25
     56e:	84 70       	andi	r24, 0x04	; 4
     570:	90 70       	andi	r25, 0x00	; 0
     572:	28 2b       	or	r18, r24
     574:	39 2b       	or	r19, r25
     576:	23 2b       	or	r18, r19
     578:	89 f7       	brne	.-30     	; 0x55c <OSCCAL_calibration+0x2e>
     57a:	88 ee       	ldi	r24, 0xE8	; 232
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	0e 94 8b 02 	call	0x516 <DelayMSEC>
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	51 e0       	ldi	r21, 0x01	; 1
     586:	46 bb       	out	0x16, r20	; 22
     588:	47 bb       	out	0x17, r20	; 23
     58a:	10 92 85 00 	sts	0x0085, r1
     58e:	10 92 84 00 	sts	0x0084, r1
     592:	10 92 b2 00 	sts	0x00B2, r1
     596:	b9 9b       	sbis	0x17, 1	; 23
     598:	fe cf       	rjmp	.-4      	; 0x596 <OSCCAL_calibration+0x68>
     59a:	10 92 81 00 	sts	0x0081, r1
     59e:	b0 9b       	sbis	0x16, 0	; 22
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <OSCCAL_calibration+0x7a>
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	3f ef       	ldi	r19, 0xFF	; 255
     5a6:	0a c0       	rjmp	.+20     	; 0x5bc <OSCCAL_calibration+0x8e>
     5a8:	90 91 84 00 	lds	r25, 0x0084
     5ac:	80 91 85 00 	lds	r24, 0x0085
     5b0:	28 2f       	mov	r18, r24
     5b2:	33 27       	eor	r19, r19
     5b4:	32 2f       	mov	r19, r18
     5b6:	22 27       	eor	r18, r18
     5b8:	29 0f       	add	r18, r25
     5ba:	31 1d       	adc	r19, r1
     5bc:	88 e1       	ldi	r24, 0x18	; 24
     5be:	2b 36       	cpi	r18, 0x6B	; 107
     5c0:	38 07       	cpc	r19, r24
     5c2:	20 f0       	brcs	.+8      	; 0x5cc <OSCCAL_calibration+0x9e>
     5c4:	80 91 66 00 	lds	r24, 0x0066
     5c8:	81 50       	subi	r24, 0x01	; 1
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <OSCCAL_calibration+0xaa>
     5cc:	28 5e       	subi	r18, 0xE8	; 232
     5ce:	37 41       	sbci	r19, 0x17	; 23
     5d0:	30 f4       	brcc	.+12     	; 0x5de <OSCCAL_calibration+0xb0>
     5d2:	80 91 66 00 	lds	r24, 0x0066
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	80 93 66 00 	sts	0x0066, r24
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <OSCCAL_calibration+0xb2>
     5de:	c1 e0       	ldi	r28, 0x01	; 1
     5e0:	50 93 81 00 	sts	0x0081, r21
     5e4:	cc 23       	and	r28, r28
     5e6:	79 f2       	breq	.-98     	; 0x586 <OSCCAL_calibration+0x58>
     5e8:	80 e8       	ldi	r24, 0x80	; 128
     5ea:	80 93 61 00 	sts	0x0061, r24
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 93 61 00 	sts	0x0061, r24
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <RTC_init>:
		}
	}

void RTC_init( void )
	{
	// SX Timer Interrupt Tick occurs any MSEC_SYSTEM_TICK, running from the RTC 32.768kHz crystal Asyncronous Timer 2
	DelayMSEC(100);                        // wait for external crystal to stabilise after a power-on
     5f8:	84 e6       	ldi	r24, 0x64	; 100
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 8b 02 	call	0x516 <DelayMSEC>

	ClearPortBit(TIMSK2, TOIE2);           // disable OCIE2A and TOIE2
     600:	80 91 70 00 	lds	r24, 0x0070
     604:	8e 7f       	andi	r24, 0xFE	; 254
     606:	80 93 70 00 	sts	0x0070, r24
	ASSR = (1 << AS2);                     // select asynchronous operation of Timer2
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	80 93 b6 00 	sts	0x00B6, r24
	TCNT2 = 0;                             // clear TCNT2A
     610:	10 92 b2 00 	sts	0x00B2, r1

	#if (MSEC_SYSTEM_TICK <= 8)
	 TCCR2A = (1<<CS20);                          // no precaler: 32.768 kHz       7.8125 msec each Timer2 overflow interrupt
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 b0 00 	sts	0x00B0, r24
	#elif (MSEC_SYSTEM_TICK <= 63)
	 TCCR2A = (1<<CS21);                          // precaler: 32.768 kHz /   8  = 62.5   msec each Timer2 overflow interrupt
	#elif (MSEC_SYSTEM_TICK <= 250)
	 TCCR2A = (1<<CS21) | (1<<CS20);              // precaler: 32.768 kHz /  32  = 250    msec each Timer2 overflow interrupt
	#elif (MSEC_SYSTEM_TICK <= 500)
	 TCCR2A = (1<<CS22);                          // precaler: 32.768 kHz /  64  = 500    msec each Timer2 overflow interrupt
	#elif (MSEC_SYSTEM_TICK <= 1000)
	 TCCR2A = (1<<CS22) | (1<<CS20);              // precaler: 32.768 kHz / 128  = 1       sec each Timer2 overflow interrupt
	#elif (MSEC_SYSTEM_TICK <= 2000)
	 TCCR2A = (1<<CS22) | (1<<CS21);              // precaler: 32.768 kHz / 256  = 2       sec each Timer2 overflow interrupt
	#else
	 TCCR2A = (1<<CS22) | (1<<CS21) | (1<<CS20);  // precaler: 32.768 kHz / 1024 = 8       sec each Timer2 overflow interrupt
	#endif

	while((ASSR & 0x01) | (ASSR & 0x04)) ; // wait for TCN2UB and TCR2UB to be cleared
     61a:	80 91 b6 00 	lds	r24, 0x00B6
     61e:	28 2f       	mov	r18, r24
     620:	33 27       	eor	r19, r19
     622:	21 70       	andi	r18, 0x01	; 1
     624:	30 70       	andi	r19, 0x00	; 0
     626:	80 91 b6 00 	lds	r24, 0x00B6
     62a:	99 27       	eor	r25, r25
     62c:	84 70       	andi	r24, 0x04	; 4
     62e:	90 70       	andi	r25, 0x00	; 0
     630:	28 2b       	or	r18, r24
     632:	39 2b       	or	r19, r25
     634:	23 2b       	or	r18, r19
     636:	89 f7       	brne	.-30     	; 0x61a <RTC_init+0x22>

	TIFR2 = 0xFF;                          // clear interrupt-flags
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	87 bb       	out	0x17, r24	; 23
	SetPortBit(TIMSK2, TOIE2);             // enable Timer2 overflow interrupt
     63c:	80 91 70 00 	lds	r24, 0x0070
     640:	81 60       	ori	r24, 0x01	; 1
     642:	80 93 70 00 	sts	0x0070, r24
     646:	08 95       	ret

00000648 <EEPROM_Read>:
	}

//==============================================================================================================================
//                                              Internal EEPROM
//==============================================================================================================================

void EEPROM_Read(s8 *ramDest, s16 eepromAddr, s16 readLen)
	{
     648:	fc 01       	movw	r30, r24
	// Wait for completion of previous EEPROM write
	while(EECR & (1<<EEWE)) ;
     64a:	f9 99       	sbic	0x1f, 1	; 31
     64c:	fe cf       	rjmp	.-4      	; 0x64a <EEPROM_Read+0x2>

	#if (FIRMWARE_IS_INTERRUPTS_DRIVEN == 0)
	 cli();
	#endif

	while (readLen-- > 0)
		{
		// Set up the EEPROM address
		EEAR = eepromAddr++;
		// Start EEPROM read
		EECR |= (1<<EERE);

		// Store EEPROM readed data into RAM Destination Buffer
		*(ramDest++) = EEDR;
     64e:	ca 01       	movw	r24, r20
     650:	41 50       	subi	r20, 0x01	; 1
     652:	50 40       	sbci	r21, 0x00	; 0
     654:	18 16       	cp	r1, r24
     656:	19 06       	cpc	r1, r25
     658:	4c f4       	brge	.+18     	; 0x66c <EEPROM_Read+0x24>
     65a:	cb 01       	movw	r24, r22
     65c:	6f 5f       	subi	r22, 0xFF	; 255
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	92 bd       	out	0x22, r25	; 34
     662:	81 bd       	out	0x21, r24	; 33
     664:	f8 9a       	sbi	0x1f, 0	; 31
     666:	80 b5       	in	r24, 0x20	; 32
     668:	81 93       	st	Z+, r24
     66a:	f1 cf       	rjmp	.-30     	; 0x64e <EEPROM_Read+0x6>
     66c:	08 95       	ret

0000066e <EEPROM_Write>:
		}

	#if (FIRMWARE_IS_INTERRUPTS_DRIVEN == 0)
	 sei();
	#endif
	}

void EEPROM_Write(s16 eepromAddr, s8 *ramSource, s16 writeLen)
	{
     66e:	9c 01       	movw	r18, r24
     670:	fb 01       	movw	r30, r22
	#if (FIRMWARE_IS_INTERRUPTS_DRIVEN == 0)
	 cli();
	#endif

	while (writeLen--)
		{
		// Wait for completion of previous or current EEPROM write
		while(EECR & (1<<EEWE)) ;

		// Set up the EEPROM address
		EEAR = eepromAddr++;
		EEDR = *(ramSource++);
		// Write logical one to EEMWE
		EECR |= (1<<EEMWE);
		// Start EEPROM write
		EECR |= (1<<EEWE);
     672:	41 50       	subi	r20, 0x01	; 1
     674:	50 40       	sbci	r21, 0x00	; 0
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	4f 3f       	cpi	r20, 0xFF	; 255
     67a:	58 07       	cpc	r21, r24
     67c:	61 f0       	breq	.+24     	; 0x696 <EEPROM_Write+0x28>
     67e:	f9 99       	sbic	0x1f, 1	; 31
     680:	fe cf       	rjmp	.-4      	; 0x67e <EEPROM_Write+0x10>
     682:	c9 01       	movw	r24, r18
     684:	2f 5f       	subi	r18, 0xFF	; 255
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	92 bd       	out	0x22, r25	; 34
     68a:	81 bd       	out	0x21, r24	; 33
     68c:	81 91       	ld	r24, Z+
     68e:	80 bd       	out	0x20, r24	; 32
     690:	fa 9a       	sbi	0x1f, 2	; 31
     692:	f9 9a       	sbi	0x1f, 1	; 31
     694:	ee cf       	rjmp	.-36     	; 0x672 <EEPROM_Write+0x4>
     696:	08 95       	ret

00000698 <USART_Init>:
		}

	#if (FIRMWARE_IS_INTERRUPTS_DRIVEN == 0)
	 sei();
	#endif
	}


//------------------------------------------------------------------------------------------------------------------------------
//                                        ERROR TRAP Function
//------------------------------------------------------------------------------------------------------------------------------

// 'errCode' defines the index in the user terminal messages table used if STDIO_USED is set to TRUE
#define  STACK_FULL                          0
#define  WORD_UNKNOWN                        1
#define  FUNCTION_UNKNOWN                    2
#define  MEMORY_UNKNOWN                      3
#define  INSUFFICIENT_PARAMETERS             4
#define  WRITE_DISABLED                      5
#define  STDIN_RING_BUFFER_FULL              6
#define  PARSER_RING_BUFFER_FULL             7

#if STDIO_USED
 const s8 _STACK_FULL_[] PROGMEM                      = "STACK_FULL";
 const s8 _WORD_UNKNOWN_[] PROGMEM                    = "WORD_UNKNOWN";
 const s8 _FUNCTION_UNKNOWN_[] PROGMEM                = "FUNCTION_UNKNOWN";
 const s8 _MEMORY_UNKNOWN_[] PROGMEM                  = "MEMORY_UNKNOWN";
 const s8 _INSUFFICIENT_PARAMETERS_[] PROGMEM         = "INSUFFICIENT_PARAMETERS";
 const s8 _WRITE_DISABLED_[] PROGMEM                  = "WRITE_DISABLED";
 const s8 _STDIN_RING_BUFFER_FULL_[] PROGMEM          = "STDIN_RING_BUFFER_FULL";
 const s8 _PARSER_RING_BUFFER_FULL_[] PROGMEM         = "PARSER_RING_BUFFER_FULL";


// user terminal errors messages table 'errMsg[]', 'errCode' is used as the index for message printout
 const s8 *errMsg[] PROGMEM = {
	_STACK_FULL_,
	_WORD_UNKNOWN_,
	_FUNCTION_UNKNOWN_,
	_MEMORY_UNKNOWN_,
	_INSUFFICIENT_PARAMETERS_,
	_WRITE_DISABLED_,
	_STDIN_RING_BUFFER_FULL_,
	_PARSER_RING_BUFFER_FULL_
	};
#endif

// result code for C and Forth functions / words
#ifndef CONTINUE
	#define CONTINUE  0
#endif
#ifndef READY
	#define READY     1
#endif
#ifndef EXIT
	#define EXIT      -1
#endif
SX_FORTH_VARIABLE s8 resCode;

// readables from the Forth terminal as '.ERR' and '.ERRCNT' ... cleared when readed
SX_FORTH_VARIABLE u8 err;
SX_FORTH_VARIABLE u8 errCnt;

void Error(u8 errCode)
	{
  #if STDIO_USED
	PGM_VOID_P  msgTable;
	PGM_P       msgPtr;
  #endif

	// always flush dataSTACK and returnSTACK
	dataTOS = 0;
  #if STDIO_USED
	returnTOS = 0;
  #endif
	// count errors and save the least 'errCode'
	err = errCode;
	++errCnt;

	// any call to 'void Error(s8 errCode)' set resCode to EXIT
	resCode = EXIT;

	// errors signalling if hardware dependent ... but we can have ALWAYS evidence of errors for making correct decisions !
  #if STDIO_USED
	// ... if user terminal available ... print 'errCode' to user
	USART_PutFlashString(PSTR(" -> "));
	msgTable = errMsg;
	errCode <<= 1;
	msgTable += errCode;
	msgPtr = (PGM_P)(pgm_read_word(msgTable));
	USART_PutFlashString(msgPtr);
	USART_Rx_Flush();
  #else
	// ... if user terminal is NOT available ... sound a Buzzer, blink a Leds, ...
	// define a user procedure for quit signalling ... Button pressed, ... , at least Reset the hardware
  #endif
	}

//------------------------------------------------------------------------------------------------------------------------------
//                                      C and Forth unified PUSH and POP Functions
//------------------------------------------------------------------------------------------------------------------------------

s16 Pop(void)
	{
	if (dataTOS >= 1)
		return(dataSTACK[--dataTOS]);
	else
		{
		Error(INSUFFICIENT_PARAMETERS);
		return(0);
		}
	}

void Push(s16 value)
	{
	if (dataTOS < (DATA_STACK_MAX_ENTRIES-1))
		dataSTACK[dataTOS++] = value;
	else
		Error(STACK_FULL);
	}


#if STDIO_USED
//==============================================================================================================================
//                                STDIO, SHELL, PARSER and Forth INTERPRETER Functions
//==============================================================================================================================

void USART_Init(u16 ubrrBaudrate) // UBRR used value
	{
     698:	9c 01       	movw	r18, r24
	// Set baud rate
	UBRRH = (u16)(ubrrBaudrate >> 8);
     69a:	83 2f       	mov	r24, r19
     69c:	99 27       	eor	r25, r25
     69e:	80 93 c5 00 	sts	0x00C5, r24
	UBRRL = (u16)(ubrrBaudrate);
     6a2:	20 93 c4 00 	sts	0x00C4, r18
	// Enable 2x speed
	UCSRA = (1<<U2X);
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transmitter
	UCSRB = (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
     6ac:	88 e1       	ldi	r24, 0x18	; 24
     6ae:	80 93 c1 00 	sts	0x00C1, r24
	// Async. mode, 8N1
	UCSRC = (0<<UMSEL)|(0<<UPM0)|(0<<USBS)|(3<<UCSZ0)|(0<<UCPOL);
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 c2 00 	sts	0x00C2, r24
     6b8:	08 95       	ret

000006ba <USART_Tx>:
	}

void USART_Tx(s8 txChar)
	{
     6ba:	98 2f       	mov	r25, r24
	// return after 'txChar' transmission
	while (!(UCSRA & (1<<UDRE))) ;
     6bc:	80 91 c0 00 	lds	r24, 0x00C0
     6c0:	85 ff       	sbrs	r24, 5
     6c2:	fc cf       	rjmp	.-8      	; 0x6bc <USART_Tx+0x2>
	UDR = txChar;
     6c4:	90 93 c6 00 	sts	0x00C6, r25
     6c8:	08 95       	ret

000006ca <USART_PutFlashString>:
	}

s16 USART_Rx_Check(void)
	{
	// return -1 if not 'rxChar' ready, else 0x0000 ... 0x00FF 'rxChar'
	if ((UCSRA & (1<<RXC)))
		return ((s16)(UDR) & 0x00FF);
	else
		return (-1);
	}

void USART_Rx_Flush(void)
	{
	do {
		DelayMSEC(100);
		} while (USART_Rx_Check() >= 0);
	}

void USART_PutRamString(s8 *s)
	{
  	while (*s)
		USART_Tx(*s++);
	}

void USART_PutRamString_UpperCase(s8 *s)
	{
	// put string from RAM, convert to upper case alphabetic characters
	while (*s)
		{
		*s = toupper(*s);
		USART_Tx(*s++);
		}
	}

#if 0
 void USART_PutRamBuffer(s8 *b, u8 len)
	{
	while (len--)
		USART_Tx(*b++);
	}
#endif

void USART_PutFlashString(const s8 *s)
	{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
	s8 c;

	do	{
		c = pgm_read_byte(s++);
     6d0:	fe 01       	movw	r30, r28
     6d2:	21 96       	adiw	r28, 0x01	; 1
     6d4:	84 91       	lpm	r24, Z
		if (c == '\0')
     6d6:	88 23       	and	r24, r24
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <USART_PutFlashString+0x16>
			break;
		USART_Tx(c);
     6da:	0e 94 5d 03 	call	0x6ba <USART_Tx>
	 	} while(1);
     6de:	f8 cf       	rjmp	.-16     	; 0x6d0 <USART_PutFlashString+0x6>
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <USART_Rx_Check>:
     6e6:	80 91 c0 00 	lds	r24, 0x00C0
     6ea:	87 ff       	sbrs	r24, 7
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <USART_Rx_Check+0x10>
     6ee:	80 91 c6 00 	lds	r24, 0x00C6
     6f2:	99 27       	eor	r25, r25
     6f4:	08 95       	ret
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	9f ef       	ldi	r25, 0xFF	; 255
     6fa:	08 95       	ret

000006fc <USART_Rx_Flush>:
     6fc:	84 e6       	ldi	r24, 0x64	; 100
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 8b 02 	call	0x516 <DelayMSEC>
     704:	0e 94 73 03 	call	0x6e6 <USART_Rx_Check>
     708:	99 23       	and	r25, r25
     70a:	c4 f7       	brge	.-16     	; 0x6fc <USART_Rx_Flush>
     70c:	08 95       	ret

0000070e <Error>:
     70e:	1f 93       	push	r17
     710:	18 2f       	mov	r17, r24
     712:	10 92 0a 01 	sts	0x010A, r1
     716:	10 92 e7 01 	sts	0x01E7, r1
     71a:	80 93 e8 01 	sts	0x01E8, r24
     71e:	80 91 94 02 	lds	r24, 0x0294
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	80 93 94 02 	sts	0x0294, r24
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	80 93 05 01 	sts	0x0105, r24
     72e:	8d e3       	ldi	r24, 0x3D	; 61
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
     736:	11 0f       	add	r17, r17
     738:	e1 2f       	mov	r30, r17
     73a:	ff 27       	eor	r31, r31
     73c:	e1 56       	subi	r30, 0x61	; 97
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
     740:	85 91       	lpm	r24, Z+
     742:	94 91       	lpm	r25, Z
     744:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
     748:	0e 94 7e 03 	call	0x6fc <USART_Rx_Flush>
     74c:	1f 91       	pop	r17
     74e:	08 95       	ret

00000750 <Push>:
     750:	20 91 0a 01 	lds	r18, 0x010A
     754:	2f 30       	cpi	r18, 0x0F	; 15
     756:	60 f4       	brcc	.+24     	; 0x770 <Push+0x20>
     758:	e2 2f       	mov	r30, r18
     75a:	ff 27       	eor	r31, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	ee 58       	subi	r30, 0x8E	; 142
     762:	fd 4f       	sbci	r31, 0xFD	; 253
     764:	91 83       	std	Z+1, r25	; 0x01
     766:	80 83       	st	Z, r24
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	20 93 0a 01 	sts	0x010A, r18
     76e:	08 95       	ret
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 87 03 	call	0x70e <Error>
     776:	08 95       	ret

00000778 <Pop>:
     778:	80 91 0a 01 	lds	r24, 0x010A
     77c:	88 23       	and	r24, r24
     77e:	61 f0       	breq	.+24     	; 0x798 <Pop+0x20>
     780:	81 50       	subi	r24, 0x01	; 1
     782:	80 93 0a 01 	sts	0x010A, r24
     786:	e8 2f       	mov	r30, r24
     788:	ff 27       	eor	r31, r31
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 58       	subi	r30, 0x8E	; 142
     790:	fd 4f       	sbci	r31, 0xFD	; 253
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	08 95       	ret
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	0e 94 87 03 	call	0x70e <Error>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 95       	ret

000007a4 <USART_PutRamString>:
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	88 81       	ld	r24, Y
     7ac:	88 23       	and	r24, r24
     7ae:	31 f0       	breq	.+12     	; 0x7bc <USART_PutRamString+0x18>
     7b0:	89 91       	ld	r24, Y+
     7b2:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     7b6:	88 81       	ld	r24, Y
     7b8:	88 23       	and	r24, r24
     7ba:	d1 f7       	brne	.-12     	; 0x7b0 <USART_PutRamString+0xc>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <USART_PutRamString_UpperCase>:
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
     7c8:	88 81       	ld	r24, Y
     7ca:	88 23       	and	r24, r24
     7cc:	61 f0       	breq	.+24     	; 0x7e6 <USART_PutRamString_UpperCase+0x24>
     7ce:	88 81       	ld	r24, Y
     7d0:	99 27       	eor	r25, r25
     7d2:	87 fd       	sbrc	r24, 7
     7d4:	90 95       	com	r25
     7d6:	0e 94 58 0d 	call	0x1ab0 <toupper>
     7da:	89 93       	st	Y+, r24
     7dc:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     7e0:	88 81       	ld	r24, Y
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f7       	brne	.-24     	; 0x7ce <USART_PutRamString_UpperCase+0xc>
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <xtoi>:
	}

s16 xtoi (s8 *s)
	{
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
	s16 res = 0;
     7f6:	00 e0       	ldi	r16, 0x00	; 0
     7f8:	10 e0       	ldi	r17, 0x00	; 0
	s8  tmp;

	while (*s != '\0')
		{
		tmp = toupper(*s);
		if ((tmp >= '0') && (tmp <= '9'))
			tmp -= '0';
		else if ((tmp >= 'A') && (tmp <= 'F'))
			tmp = tmp - 'A' + 10;
		else
			break;
		res <<= 4;
		res |= tmp;
		++s;
     7fa:	88 81       	ld	r24, Y
     7fc:	88 23       	and	r24, r24
     7fe:	f1 f0       	breq	.+60     	; 0x83c <xtoi+0x50>
     800:	88 81       	ld	r24, Y
     802:	99 27       	eor	r25, r25
     804:	87 fd       	sbrc	r24, 7
     806:	90 95       	com	r25
     808:	0e 94 58 0d 	call	0x1ab0 <toupper>
     80c:	28 2f       	mov	r18, r24
     80e:	80 53       	subi	r24, 0x30	; 48
     810:	8a 30       	cpi	r24, 0x0A	; 10
     812:	10 f4       	brcc	.+4      	; 0x818 <xtoi+0x2c>
     814:	28 2f       	mov	r18, r24
     816:	05 c0       	rjmp	.+10     	; 0x822 <xtoi+0x36>
     818:	82 2f       	mov	r24, r18
     81a:	81 54       	subi	r24, 0x41	; 65
     81c:	86 30       	cpi	r24, 0x06	; 6
     81e:	70 f4       	brcc	.+28     	; 0x83c <xtoi+0x50>
     820:	27 53       	subi	r18, 0x37	; 55
     822:	34 e0       	ldi	r19, 0x04	; 4
     824:	00 0f       	add	r16, r16
     826:	11 1f       	adc	r17, r17
     828:	3a 95       	dec	r19
     82a:	e1 f7       	brne	.-8      	; 0x824 <xtoi+0x38>
     82c:	82 2f       	mov	r24, r18
     82e:	99 27       	eor	r25, r25
     830:	87 fd       	sbrc	r24, 7
     832:	90 95       	com	r25
     834:	08 2b       	or	r16, r24
     836:	19 2b       	or	r17, r25
     838:	21 96       	adiw	r28, 0x01	; 1
     83a:	df cf       	rjmp	.-66     	; 0x7fa <xtoi+0xe>
		}
	return (res);
	}
     83c:	c8 01       	movw	r24, r16
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <F_DecimalBASE>:


// BUILTIN 'numberBase'
#define  DECIMAL     10
#define  EXADECIMAL  16 // default BASE
SX_FORTH_VARIABLE s16 numberBase;

// BUILTIN 'debug' and 'step'
SX_FORTH_VARIABLE s8 debug;   // default 0=FALSE
SX_FORTH_VARIABLE s8 step;

//** builtin interpreter I and J variables *********************************
SX_FORTH_VARIABLE s16 i_var, j_var;


// 'memoryType' used on memories access functions
#define  RAM      0
#define  EEPROM   1
#define  FLASH    2
SX_FORTH_VARIABLE u8 memoryType; // default RAM

// The Forth STDIN Channel is the STDIO Terminal for interaction with User and MEMORIES when it execute a Script
#define  TERMINAL_STDIN       0  // default
#define  RAM_STDIN            1
#define  EEPROM_STDIN         2
#define  FLASH_STDIN          3
SX_FORTH_VARIABLE u8    forth_Interpreter_Stdin_Channel;
SX_FORTH_VARIABLE s8    *forth_Interpreter_Stdin_MemoryAddress;   // default is NULL

// The Forth STDOUT Channel is usually the STDIO Terminal but the channel can be redirected to MEMORIES or other PORTs
#define  TERMINAL_STDOUT      0  // default
#define  RAM_STDOUT           1
#define  EEPROM_STDOUT        2
#define  PORT_STDOUT          3
SX_FORTH_VARIABLE u8    forth_Interpreter_Stdout_Channel;
SX_FORTH_VARIABLE s8    *forth_Interpreter_Stdout_MemoryAddress;  // default is NULL

// C and Forth Data STACK (Last IN, First OUT behaviour)
#define DATA_STACK_MAX_ENTRIES      16
SX_FORTH_VARIABLE u8    dataTOS;    // Top Of C and Forth DATA Stack
SX_FORTH_VARIABLE s16   dataSTACK[DATA_STACK_MAX_ENTRIES];

// Forth RETURN STACK (Last IN, First OUT behaviour)
#define RETURN_STACK_MAX_ENTRIES    4
SX_FORTH_VARIABLE u8    returnTOS;    // Top Of Forth RETURN Stack
SX_FORTH_VARIABLE u8    returnSTACK[RETURN_STACK_MAX_ENTRIES];

// common scratch variables for Forth and C
SX_FORTH_VARIABLE s16 s16Tmp0, s16Tmp1, s16Tmp2;
SX_FORTH_VARIABLE u8  u8Tmp0;

//------------------------------------------------------------------------------------------------------------------------------
//                                           Forth Return STACK and STATE
//------------------------------------------------------------------------------------------------------------------------------

// 'forth_StateFlags' flags
#define EXEC_ALL_WORDS                    0x00
#define SKIP_NOT_ALWAYS_EXECUTABLE_WORDS  0x01
#define DO_LOOP_BREAK                     0x02

s8 forth_StateFlags;                    // default EXEC_ALL_WORDS
s8 forth_Branching;
s8 forth_ElseEndifSkiping;

//** builtin interpreter 'variables' *****************************************

// BUILTIN 'numberBase'
const s8 BASE_DEC[] PROGMEM       = "DEC";
void F_DecimalBASE(void)
	{
	numberBase = DECIMAL;
     848:	8a e0       	ldi	r24, 0x0A	; 10
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 5b 01 	sts	0x015B, r25
     850:	80 93 5a 01 	sts	0x015A, r24
     854:	08 95       	ret

00000856 <F_HexadecimalBASE>:
	}

const s8 BASE_HEX[] PROGMEM       = "HEX";  // default
void F_HexadecimalBASE(void)
	{
	numberBase = EXADECIMAL;
     856:	80 e1       	ldi	r24, 0x10	; 16
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 5b 01 	sts	0x015B, r25
     85e:	80 93 5a 01 	sts	0x015A, r24
     862:	08 95       	ret

00000864 <F_DBG_Yes>:
	}

// BUILTIN 'debug' and 'step'
const s8 DBG_YES[] PROGMEM        = "DBG+";
void F_DBG_Yes(void)
	{
	debug = TRUE;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 4d 01 	sts	0x014D, r24
     86a:	08 95       	ret

0000086c <F_DBG_No>:
	}

const s8 DBG_NO[] PROGMEM         = "DBG-";   // default
void F_DBG_No(void)
	{
	debug = FALSE;
     86c:	10 92 4d 01 	sts	0x014D, r1
	step  = FALSE;
     870:	10 92 92 02 	sts	0x0292, r1
     874:	08 95       	ret

00000876 <F_Step_Yes>:
	}

// BUILTIN interpreter 'step'ing
const s8 STEP_YES[] PROGMEM       = "STEP+";
void F_Step_Yes(void)
	{
	debug = TRUE;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 93 4d 01 	sts	0x014D, r24
	step  = TRUE;
     87c:	80 93 92 02 	sts	0x0292, r24
     880:	08 95       	ret

00000882 <F_Step_No>:
	}

const s8 STEP_NO[] PROGMEM        = "STEP-";   // default
void F_Step_No(void)
	{
	step = FALSE;
     882:	10 92 92 02 	sts	0x0292, r1
     886:	08 95       	ret

00000888 <F_Ram>:
	}


// BUILTIN 'memoryType'
const s8 RAM_[] PROGMEM           = "RAM";    // default
void F_Ram(void)
	{
	memoryType = RAM;
     888:	10 92 00 01 	sts	0x0100, r1
     88c:	08 95       	ret

0000088e <F_UserRamADDR>:
	}

// BUILTIN 'ramUser'
#if RAM_USER_APPLICATION_BYTES
 s8 ramUser[RAM_USER_APPLICATION_BYTES];
 const s8 USER_RAM[] PROGMEM      = "RAM_USER"; // ( -- ramUserADDR )
 void F_UserRamADDR(void)
	{
	memoryType = RAM;
     88e:	10 92 00 01 	sts	0x0100, r1
	dataSTACK[dataTOS++] = (s16)(ramUser);
     892:	80 91 0a 01 	lds	r24, 0x010A
     896:	e8 2f       	mov	r30, r24
     898:	ff 27       	eor	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ee 58       	subi	r30, 0x8E	; 142
     8a0:	fd 4f       	sbci	r31, 0xFD	; 253
     8a2:	2b e0       	ldi	r18, 0x0B	; 11
     8a4:	31 e0       	ldi	r19, 0x01	; 1
     8a6:	31 83       	std	Z+1, r19	; 0x01
     8a8:	20 83       	st	Z, r18
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 0a 01 	sts	0x010A, r24
     8b0:	08 95       	ret

000008b2 <F_Eeprom>:
	}
#endif

const s8 EEPROM_[] PROGMEM        = "EEPROM";
void F_Eeprom(void)
	{
	memoryType = EEPROM;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 00 01 	sts	0x0100, r24
     8b8:	08 95       	ret

000008ba <F_Flash>:
	}

const s8 FLASH_[] PROGMEM        = "FLASH";
void F_Flash(void)
	{
	memoryType = FLASH;
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	80 93 00 01 	sts	0x0100, r24
     8c0:	08 95       	ret

000008c2 <F_StoreWord>:
	}


//** builtin interpreter 'immediate words' executed on the fly ***************

// data stack operation
// NOTE: Store (!) and Fetch (@) words are executed based on the current 'memoryType' value (default to RAM)

const s8 STORE[] PROGMEM          = "!";
void F_StoreWord(void)
	{
	// (w addr -- )

	s16Tmp0 = Pop();
     8c2:	0e 94 bc 03 	call	0x778 <Pop>
     8c6:	90 93 09 01 	sts	0x0109, r25
     8ca:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     8ce:	0e 94 bc 03 	call	0x778 <Pop>
     8d2:	90 93 02 01 	sts	0x0102, r25
     8d6:	80 93 01 01 	sts	0x0101, r24
	if (memoryType == RAM)
     8da:	20 91 00 01 	lds	r18, 0x0100
     8de:	22 23       	and	r18, r18
     8e0:	39 f4       	brne	.+14     	; 0x8f0 <F_StoreWord+0x2e>
		*((s16 *)(s16Tmp0)) = s16Tmp1;
     8e2:	e0 91 08 01 	lds	r30, 0x0108
     8e6:	f0 91 09 01 	lds	r31, 0x0109
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
     8ee:	08 95       	ret
	else if (memoryType == EEPROM)
     8f0:	21 30       	cpi	r18, 0x01	; 1
     8f2:	59 f4       	brne	.+22     	; 0x90a <F_StoreWord+0x48>
		EEPROM_Write(s16Tmp0, (s8 *)(&s16Tmp1), 2);
     8f4:	42 e0       	ldi	r20, 0x02	; 2
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	71 e0       	ldi	r23, 0x01	; 1
     8fc:	80 91 08 01 	lds	r24, 0x0108
     900:	90 91 09 01 	lds	r25, 0x0109
     904:	0e 94 37 03 	call	0x66e <EEPROM_Write>
     908:	08 95       	ret
	else if (memoryType == FLASH)
     90a:	22 30       	cpi	r18, 0x02	; 2
     90c:	11 f4       	brne	.+4      	; 0x912 <F_StoreWord+0x50>
		Error(WRITE_DISABLED);
     90e:	85 e0       	ldi	r24, 0x05	; 5
     910:	01 c0       	rjmp	.+2      	; 0x914 <F_StoreWord+0x52>
	else Error(MEMORY_UNKNOWN);
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 87 03 	call	0x70e <Error>
     918:	08 95       	ret

0000091a <F_StoreByte>:
	}

const s8 STORE_BYTE[] PROGMEM     = "!B";
void F_StoreByte(void)
	{
	// (b addr -- )
	s16Tmp0 = Pop();
     91a:	0e 94 bc 03 	call	0x778 <Pop>
     91e:	90 93 09 01 	sts	0x0109, r25
     922:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop() & 0xFF;
     926:	0e 94 bc 03 	call	0x778 <Pop>
     92a:	99 27       	eor	r25, r25
     92c:	90 93 02 01 	sts	0x0102, r25
     930:	80 93 01 01 	sts	0x0101, r24
	if (memoryType == RAM)
     934:	80 91 00 01 	lds	r24, 0x0100
     938:	88 23       	and	r24, r24
     93a:	41 f4       	brne	.+16     	; 0x94c <F_StoreByte+0x32>
		*((s8 *)(s16Tmp0)) = (s8)(s16Tmp1);
     93c:	e0 91 08 01 	lds	r30, 0x0108
     940:	f0 91 09 01 	lds	r31, 0x0109
     944:	80 91 01 01 	lds	r24, 0x0101
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret
	else if (memoryType == EEPROM)
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	59 f4       	brne	.+22     	; 0x966 <F_StoreByte+0x4c>
		EEPROM_Write(s16Tmp0, (s8 *)(&s16Tmp1), 1);
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	80 91 08 01 	lds	r24, 0x0108
     95c:	90 91 09 01 	lds	r25, 0x0109
     960:	0e 94 37 03 	call	0x66e <EEPROM_Write>
     964:	08 95       	ret
	else if (memoryType == FLASH)
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	11 f4       	brne	.+4      	; 0x96e <F_StoreByte+0x54>
		Error(WRITE_DISABLED);
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	01 c0       	rjmp	.+2      	; 0x970 <F_StoreByte+0x56>
	else Error(MEMORY_UNKNOWN);
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	0e 94 87 03 	call	0x70e <Error>
     974:	08 95       	ret

00000976 <F_FetchWord>:
	}

const s8 FETCH[] PROGMEM          = "@";
void F_FetchWord(void)
	{
	// (addr -- w)
	s16Tmp0 = Pop();
     976:	0e 94 bc 03 	call	0x778 <Pop>
     97a:	fc 01       	movw	r30, r24
     97c:	90 93 09 01 	sts	0x0109, r25
     980:	80 93 08 01 	sts	0x0108, r24
	if (memoryType == RAM)
     984:	80 91 00 01 	lds	r24, 0x0100
     988:	88 23       	and	r24, r24
     98a:	19 f4       	brne	.+6      	; 0x992 <F_FetchWord+0x1c>
		Push( *((s16 *)(s16Tmp0)) );
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	0d c0       	rjmp	.+26     	; 0x9ac <F_FetchWord+0x36>
	else if (memoryType == EEPROM)
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	71 f4       	brne	.+28     	; 0x9b2 <F_FetchWord+0x3c>
		{
		EEPROM_Read((s8 *)(&s16Tmp1), s16Tmp0, 2);
     996:	42 e0       	ldi	r20, 0x02	; 2
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	bf 01       	movw	r22, r30
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 24 03 	call	0x648 <EEPROM_Read>
		Push(s16Tmp1);
     9a4:	80 91 01 01 	lds	r24, 0x0101
     9a8:	90 91 02 01 	lds	r25, 0x0102
     9ac:	0e 94 a8 03 	call	0x750 <Push>
     9b0:	08 95       	ret
		}
	else if (memoryType == FLASH)
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	39 f4       	brne	.+14     	; 0x9c4 <F_FetchWord+0x4e>
		{
		s16Tmp1 = pgm_read_word((s16 *)(s16Tmp0));
     9b6:	85 91       	lpm	r24, Z+
     9b8:	94 91       	lpm	r25, Z
     9ba:	90 93 02 01 	sts	0x0102, r25
     9be:	80 93 01 01 	sts	0x0101, r24
     9c2:	f4 cf       	rjmp	.-24     	; 0x9ac <F_FetchWord+0x36>
		Push(s16Tmp1);
		}
	else Error(MEMORY_UNKNOWN);
     9c4:	83 e0       	ldi	r24, 0x03	; 3
     9c6:	0e 94 87 03 	call	0x70e <Error>
     9ca:	08 95       	ret

000009cc <F_FetchByte>:
	}

const s8 FETCH_BYTE[] PROGMEM     = "@B";
void F_FetchByte(void)
	{
	// (addr -- b)
	s16Tmp0 = Pop();
     9cc:	0e 94 bc 03 	call	0x778 <Pop>
     9d0:	fc 01       	movw	r30, r24
     9d2:	90 93 09 01 	sts	0x0109, r25
     9d6:	80 93 08 01 	sts	0x0108, r24
	if (memoryType == RAM)
     9da:	80 91 00 01 	lds	r24, 0x0100
     9de:	88 23       	and	r24, r24
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <F_FetchByte+0x1c>
		Push(*((s16 *)(s16Tmp0)) & 0xFF);
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <F_FetchByte+0x36>
	else if (memoryType == EEPROM)
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	79 f4       	brne	.+30     	; 0xa0a <F_FetchByte+0x3e>
		{
		EEPROM_Read((s8 *)(&s16Tmp1), s16Tmp0, 2);
     9ec:	42 e0       	ldi	r20, 0x02	; 2
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	bf 01       	movw	r22, r30
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 24 03 	call	0x648 <EEPROM_Read>
		Push(s16Tmp1 & 0xFF);
     9fa:	80 91 01 01 	lds	r24, 0x0101
     9fe:	90 91 02 01 	lds	r25, 0x0102
     a02:	90 70       	andi	r25, 0x00	; 0
     a04:	0e 94 a8 03 	call	0x750 <Push>
     a08:	08 95       	ret
		}
	else if (memoryType == FLASH)
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	39 f4       	brne	.+14     	; 0xa1c <F_FetchByte+0x50>
		{
		s16Tmp1 = pgm_read_word((s16 *)(s16Tmp0));
     a0e:	85 91       	lpm	r24, Z+
     a10:	94 91       	lpm	r25, Z
     a12:	90 93 02 01 	sts	0x0102, r25
     a16:	80 93 01 01 	sts	0x0101, r24
     a1a:	f3 cf       	rjmp	.-26     	; 0xa02 <F_FetchByte+0x36>
		Push(s16Tmp1 & 0xFF);
		}
	else Error(MEMORY_UNKNOWN);
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	0e 94 87 03 	call	0x70e <Error>
     a22:	08 95       	ret

00000a24 <F_Dot_TOS>:
	}

// dataTOS content display
const s8 DOT_TOS[] PROGMEM          = ".";
void F_Dot_TOS(void)
	{
	// (w -- ) Destructive Print, using BASE, of the contents of dataTOS
	s16Tmp0 = Pop();
     a24:	0e 94 bc 03 	call	0x778 <Pop>
     a28:	90 93 09 01 	sts	0x0109, r25
     a2c:	80 93 08 01 	sts	0x0108, r24
	itoa(s16Tmp0, value_String, numberBase);
     a30:	40 91 5a 01 	lds	r20, 0x015A
     a34:	50 91 5b 01 	lds	r21, 0x015B
     a38:	6e e4       	ldi	r22, 0x4E	; 78
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	0e 94 b1 0c 	call	0x1962 <itoa>
	USART_PutRamString_UpperCase(value_String);
     a40:	8e e4       	ldi	r24, 0x4E	; 78
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 e1 03 	call	0x7c2 <USART_PutRamString_UpperCase>
	USART_Tx(' ');
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     a4e:	08 95       	ret

00000a50 <F_Dot_TOS_Char>:
	}

// dataTOS print as a character
const s8 DOT_TOS_CHAR[] PROGMEM     = ".C";     // like Forth 'emit'
void F_Dot_TOS_Char(void)
	{
	// (b -- ) ASCII Character PrintOUT of dataTOS
	s16Tmp0 = Pop();
     a50:	0e 94 bc 03 	call	0x778 <Pop>
     a54:	90 93 09 01 	sts	0x0109, r25
     a58:	80 93 08 01 	sts	0x0108, r24
	USART_Tx( (s8)(s16Tmp0 & 0xFF) );
     a5c:	80 91 08 01 	lds	r24, 0x0108
     a60:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     a64:	08 95       	ret

00000a66 <F_PutCR>:
	}

// CR print
const s8 CR_[] PROGMEM            = "CR";     // like Forth 'CR'
void F_PutCR(void)
	{
	USART_Tx(CR);
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     a6c:	08 95       	ret

00000a6e <F_Dot_String>:
	}

// dataTOS indirect string print, dataTOS dropped
const s8 DOT_TOS_STRING[] PROGMEM     = ".\"";
void F_Dot_String(void)
	{
	// (strAddr -- ) ASCII String PrintOUT with dataTOS used as pointer to RAM
	s16Tmp0 = Pop();
     a6e:	0e 94 bc 03 	call	0x778 <Pop>
     a72:	90 93 09 01 	sts	0x0109, r25
     a76:	80 93 08 01 	sts	0x0108, r24
	USART_PutRamString( (s8 *)(s16Tmp0) );
     a7a:	0e 94 d2 03 	call	0x7a4 <USART_PutRamString>
     a7e:	08 95       	ret

00000a80 <F_Ask_DataSTACK>:
	}

const s8 ASK_DATA_STACK[] PROGMEM         = ".S";
void F_Ask_DataSTACK(void)
	{
	// ( -- ) Non Destructive Print, using BASE, of dataSTACK contents
	// USART_Tx(CR);
	u8Tmp0 = dataTOS;
     a80:	80 91 0a 01 	lds	r24, 0x010A
     a84:	80 93 6f 02 	sts	0x026F, r24
	while (u8Tmp0)
		{
		itoa(dataSTACK[--u8Tmp0], value_String, numberBase);
		USART_PutRamString_UpperCase(value_String);
		USART_Tx(' ');
     a88:	88 23       	and	r24, r24
     a8a:	f9 f0       	breq	.+62     	; 0xaca <F_Ask_DataSTACK+0x4a>
     a8c:	80 91 6f 02 	lds	r24, 0x026F
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	80 93 6f 02 	sts	0x026F, r24
     a96:	e8 2f       	mov	r30, r24
     a98:	ff 27       	eor	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	ee 58       	subi	r30, 0x8E	; 142
     aa0:	fd 4f       	sbci	r31, 0xFD	; 253
     aa2:	40 91 5a 01 	lds	r20, 0x015A
     aa6:	50 91 5b 01 	lds	r21, 0x015B
     aaa:	6e e4       	ldi	r22, 0x4E	; 78
     aac:	71 e0       	ldi	r23, 0x01	; 1
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	0e 94 b1 0c 	call	0x1962 <itoa>
     ab6:	8e e4       	ldi	r24, 0x4E	; 78
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 e1 03 	call	0x7c2 <USART_PutRamString_UpperCase>
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     ac4:	80 91 6f 02 	lds	r24, 0x026F
     ac8:	df cf       	rjmp	.-66     	; 0xa88 <F_Ask_DataSTACK+0x8>
     aca:	08 95       	ret

00000acc <F_Ask_ReturnSTACK>:
		}
	}

// return stack display
const s8 ASK_RETURN_STACK[] PROGMEM         = ".R";
void F_Ask_ReturnSTACK(void)
	{
	// ( -- ) Non Destructive Print of all returnSTACK contents
	// USART_Tx(CR);
	u8Tmp0 = returnTOS;
     acc:	80 91 e7 01 	lds	r24, 0x01E7
     ad0:	80 93 6f 02 	sts	0x026F, r24
	while (u8Tmp0)
		{
		USART_PutRamString(stdin_TokenPointersRingBuffer[returnSTACK[--u8Tmp0]]);
		USART_Tx(' ');
     ad4:	88 23       	and	r24, r24
     ad6:	d1 f0       	breq	.+52     	; 0xb0c <F_Ask_ReturnSTACK+0x40>
     ad8:	80 91 6f 02 	lds	r24, 0x026F
     adc:	81 50       	subi	r24, 0x01	; 1
     ade:	80 93 6f 02 	sts	0x026F, r24
     ae2:	e8 2f       	mov	r30, r24
     ae4:	ff 27       	eor	r31, r31
     ae6:	e4 5a       	subi	r30, 0xA4	; 164
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	80 81       	ld	r24, Z
     aec:	e8 2f       	mov	r30, r24
     aee:	ff 27       	eor	r31, r31
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	ec 59       	subi	r30, 0x9C	; 156
     af6:	fe 4f       	sbci	r31, 0xFE	; 254
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	0e 94 d2 03 	call	0x7a4 <USART_PutRamString>
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	0e 94 5d 03 	call	0x6ba <USART_Tx>
     b06:	80 91 6f 02 	lds	r24, 0x026F
     b0a:	e4 cf       	rjmp	.-56     	; 0xad4 <F_Ask_ReturnSTACK+0x8>
     b0c:	08 95       	ret

00000b0e <F_Print_And_ClearSTACKs>:
		}
	}

// print and clear interpreter stacks
const s8 CLEAR_STACKS[] PROGMEM  = ".CS";
void F_Print_And_ClearSTACKs(void)
	{
	// ( ... -- ) Destructive Display of all STACKs contents
	F_Ask_DataSTACK();
     b0e:	0e 94 40 05 	call	0xa80 <F_Ask_DataSTACK>
	dataTOS = 0;
     b12:	10 92 0a 01 	sts	0x010A, r1
	F_Ask_ReturnSTACK();
     b16:	0e 94 66 05 	call	0xacc <F_Ask_ReturnSTACK>
	returnTOS = 0;
     b1a:	10 92 e7 01 	sts	0x01E7, r1
     b1e:	08 95       	ret

00000b20 <F_Dup>:
	}

// data stack operators
const s8 DUP_[] PROGMEM           = "DUP";
void F_Dup(void)
	{
	if (dataTOS >= 1)
     b20:	20 91 0a 01 	lds	r18, 0x010A
     b24:	22 23       	and	r18, r18
     b26:	99 f0       	breq	.+38     	; 0xb4e <F_Dup+0x2e>
		{
		s16Tmp0 = dataSTACK[dataTOS - 1];
     b28:	e2 2f       	mov	r30, r18
     b2a:	ff 27       	eor	r31, r31
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 58       	subi	r30, 0x8E	; 142
     b32:	fd 4f       	sbci	r31, 0xFD	; 253
     b34:	92 91       	ld	r25, -Z
     b36:	82 91       	ld	r24, -Z
     b38:	32 96       	adiw	r30, 0x02	; 2
     b3a:	90 93 09 01 	sts	0x0109, r25
     b3e:	80 93 08 01 	sts	0x0108, r24
		dataSTACK[dataTOS++] = s16Tmp0;
     b42:	91 83       	std	Z+1, r25	; 0x01
     b44:	80 83       	st	Z, r24
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 93 0a 01 	sts	0x010A, r18
     b4c:	08 95       	ret
		}
	else Error(INSUFFICIENT_PARAMETERS);
     b4e:	84 e0       	ldi	r24, 0x04	; 4
     b50:	0e 94 87 03 	call	0x70e <Error>
     b54:	08 95       	ret

00000b56 <F_Drop>:
	}

const s8 DROP_[] PROGMEM          = "DROP";
void F_Drop(void)
	{
	s16Tmp0 = Pop();
     b56:	0e 94 bc 03 	call	0x778 <Pop>
     b5a:	90 93 09 01 	sts	0x0109, r25
     b5e:	80 93 08 01 	sts	0x0108, r24
     b62:	08 95       	ret

00000b64 <F_Swap>:
	}

const s8 SWAP_[] PROGMEM          = "SWAP";
void F_Swap(void)
	{
	s16Tmp0 = Pop();
     b64:	0e 94 bc 03 	call	0x778 <Pop>
     b68:	90 93 09 01 	sts	0x0109, r25
     b6c:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     b70:	0e 94 bc 03 	call	0x778 <Pop>
     b74:	90 93 02 01 	sts	0x0102, r25
     b78:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp0);
     b7c:	80 91 08 01 	lds	r24, 0x0108
     b80:	90 91 09 01 	lds	r25, 0x0109
     b84:	0e 94 a8 03 	call	0x750 <Push>
	Push(s16Tmp1);
     b88:	80 91 01 01 	lds	r24, 0x0101
     b8c:	90 91 02 01 	lds	r25, 0x0102
     b90:	0e 94 a8 03 	call	0x750 <Push>
     b94:	08 95       	ret

00000b96 <F_Inc>:
	}


// unary operators ( w -- wRes )
const s8 INC_[] PROGMEM           = "+1";
 void F_Inc(void)
	{
	s16Tmp0 = Pop();
     b96:	0e 94 bc 03 	call	0x778 <Pop>
	Push(++s16Tmp0);
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	90 93 09 01 	sts	0x0109, r25
     ba0:	80 93 08 01 	sts	0x0108, r24
     ba4:	0e 94 a8 03 	call	0x750 <Push>
     ba8:	08 95       	ret

00000baa <F_Dec>:
	}

const s8 DEC_[] PROGMEM           = "-1";
void F_Dec(void)
	{
	s16Tmp0 = Pop();
     baa:	0e 94 bc 03 	call	0x778 <Pop>
	Push(--s16Tmp0);
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	90 93 09 01 	sts	0x0109, r25
     bb4:	80 93 08 01 	sts	0x0108, r24
     bb8:	0e 94 a8 03 	call	0x750 <Push>
     bbc:	08 95       	ret

00000bbe <F_Not>:
	}

const s8 NOT_[] PROGMEM           = "NOT";
void F_Not(void)
	{
	s16Tmp0 = Pop();
     bbe:	0e 94 bc 03 	call	0x778 <Pop>
     bc2:	90 93 09 01 	sts	0x0109, r25
     bc6:	80 93 08 01 	sts	0x0108, r24
	Push(s16Tmp0 ^ 0xFFFF);
     bca:	80 95       	com	r24
     bcc:	90 95       	com	r25
     bce:	0e 94 a8 03 	call	0x750 <Push>
     bd2:	08 95       	ret

00000bd4 <F_Abs>:
	}

const s8 ABS_[] PROGMEM           = "ABS";
void F_Abs(void)
	{
	s16Tmp0 = Pop();
     bd4:	0e 94 bc 03 	call	0x778 <Pop>
     bd8:	90 93 09 01 	sts	0x0109, r25
     bdc:	80 93 08 01 	sts	0x0108, r24
	Push(s16Tmp0 & 0x7FFF);
     be0:	9f 77       	andi	r25, 0x7F	; 127
     be2:	0e 94 a8 03 	call	0x750 <Push>
     be6:	08 95       	ret

00000be8 <F_Or>:
	}

 // binary operators ( w1 w2 -- wRes )
const s8 OR__[] PROGMEM           = "OR";
void F_Or(void)
	{
	s16Tmp0 = Pop();
     be8:	0e 94 bc 03 	call	0x778 <Pop>
     bec:	90 93 09 01 	sts	0x0109, r25
     bf0:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     bf4:	0e 94 bc 03 	call	0x778 <Pop>
     bf8:	9c 01       	movw	r18, r24
     bfa:	90 93 02 01 	sts	0x0102, r25
     bfe:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 | s16Tmp0);
     c02:	80 91 08 01 	lds	r24, 0x0108
     c06:	90 91 09 01 	lds	r25, 0x0109
     c0a:	82 2b       	or	r24, r18
     c0c:	93 2b       	or	r25, r19
     c0e:	0e 94 a8 03 	call	0x750 <Push>
     c12:	08 95       	ret

00000c14 <F_Xor>:
	}

const s8 XOR_[] PROGMEM           = "XOR";
void F_Xor(void)
	{
	s16Tmp0 = Pop();
     c14:	0e 94 bc 03 	call	0x778 <Pop>
     c18:	90 93 09 01 	sts	0x0109, r25
     c1c:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     c20:	0e 94 bc 03 	call	0x778 <Pop>
     c24:	9c 01       	movw	r18, r24
     c26:	90 93 02 01 	sts	0x0102, r25
     c2a:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 ^ s16Tmp0);
     c2e:	80 91 08 01 	lds	r24, 0x0108
     c32:	90 91 09 01 	lds	r25, 0x0109
     c36:	82 27       	eor	r24, r18
     c38:	93 27       	eor	r25, r19
     c3a:	0e 94 a8 03 	call	0x750 <Push>
     c3e:	08 95       	ret

00000c40 <F_And>:
	}

const s8 AND_[] PROGMEM           = "AND";
void F_And(void)
	{
	s16Tmp0 = Pop();
     c40:	0e 94 bc 03 	call	0x778 <Pop>
     c44:	90 93 09 01 	sts	0x0109, r25
     c48:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     c4c:	0e 94 bc 03 	call	0x778 <Pop>
     c50:	9c 01       	movw	r18, r24
     c52:	90 93 02 01 	sts	0x0102, r25
     c56:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 & s16Tmp0);
     c5a:	80 91 08 01 	lds	r24, 0x0108
     c5e:	90 91 09 01 	lds	r25, 0x0109
     c62:	82 23       	and	r24, r18
     c64:	93 23       	and	r25, r19
     c66:	0e 94 a8 03 	call	0x750 <Push>
     c6a:	08 95       	ret

00000c6c <F_Add>:
	}

const s8 ADD_[] PROGMEM           = "+";
void F_Add(void)
	{
	s16Tmp0 = Pop();
     c6c:	0e 94 bc 03 	call	0x778 <Pop>
     c70:	90 93 09 01 	sts	0x0109, r25
     c74:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     c78:	0e 94 bc 03 	call	0x778 <Pop>
     c7c:	9c 01       	movw	r18, r24
     c7e:	90 93 02 01 	sts	0x0102, r25
     c82:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 + s16Tmp0);
     c86:	80 91 08 01 	lds	r24, 0x0108
     c8a:	90 91 09 01 	lds	r25, 0x0109
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	0e 94 a8 03 	call	0x750 <Push>
     c96:	08 95       	ret

00000c98 <F_Diff>:
	}

const s8 DIFF[] PROGMEM           = "-";
void F_Diff(void)
	{
	s16Tmp0 = Pop();
     c98:	0e 94 bc 03 	call	0x778 <Pop>
     c9c:	90 93 09 01 	sts	0x0109, r25
     ca0:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     ca4:	0e 94 bc 03 	call	0x778 <Pop>
     ca8:	9c 01       	movw	r18, r24
     caa:	90 93 02 01 	sts	0x0102, r25
     cae:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 - s16Tmp0);
     cb2:	80 91 08 01 	lds	r24, 0x0108
     cb6:	90 91 09 01 	lds	r25, 0x0109
     cba:	28 1b       	sub	r18, r24
     cbc:	39 0b       	sbc	r19, r25
     cbe:	c9 01       	movw	r24, r18
     cc0:	0e 94 a8 03 	call	0x750 <Push>
     cc4:	08 95       	ret

00000cc6 <F_Mult>:
	}

const s8 MULT[] PROGMEM           = "*";
void F_Mult(void)
	{
	s16Tmp0 = Pop();
     cc6:	0e 94 bc 03 	call	0x778 <Pop>
     cca:	90 93 09 01 	sts	0x0109, r25
     cce:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     cd2:	0e 94 bc 03 	call	0x778 <Pop>
     cd6:	9c 01       	movw	r18, r24
     cd8:	90 93 02 01 	sts	0x0102, r25
     cdc:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 * s16Tmp0);
     ce0:	80 91 08 01 	lds	r24, 0x0108
     ce4:	90 91 09 01 	lds	r25, 0x0109
     ce8:	28 9f       	mul	r18, r24
     cea:	a0 01       	movw	r20, r0
     cec:	29 9f       	mul	r18, r25
     cee:	50 0d       	add	r21, r0
     cf0:	38 9f       	mul	r19, r24
     cf2:	50 0d       	add	r21, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	ca 01       	movw	r24, r20
     cf8:	0e 94 a8 03 	call	0x750 <Push>
     cfc:	08 95       	ret

00000cfe <F_Div>:
	}

const s8 DIV_[] PROGMEM           = "/";
void F_Div(void)
	{
	s16Tmp0 = Pop();
     cfe:	0e 94 bc 03 	call	0x778 <Pop>
     d02:	90 93 09 01 	sts	0x0109, r25
     d06:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     d0a:	0e 94 bc 03 	call	0x778 <Pop>
     d0e:	90 93 02 01 	sts	0x0102, r25
     d12:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 / s16Tmp0);
     d16:	20 91 08 01 	lds	r18, 0x0108
     d1a:	30 91 09 01 	lds	r19, 0x0109
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 09 0d 	call	0x1a12 <__divmodhi4>
     d24:	cb 01       	movw	r24, r22
     d26:	0e 94 a8 03 	call	0x750 <Push>
     d2a:	08 95       	ret

00000d2c <F_Scaling>:
	}

const s8 SCALE_[] PROGMEM        = "*/";  // ( a b c -- r ) r=(a*b)/c is s16, but calculations use s32
void F_Scaling(void)
	{
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
	u32 tmpA, tmpB, tmpC;

	s16Tmp0 = Pop();  // c
     d34:	0e 94 bc 03 	call	0x778 <Pop>
     d38:	90 93 09 01 	sts	0x0109, r25
     d3c:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();  // b
     d40:	0e 94 bc 03 	call	0x778 <Pop>
     d44:	90 93 02 01 	sts	0x0102, r25
     d48:	80 93 01 01 	sts	0x0101, r24
	s16Tmp2 = Pop();  // a
     d4c:	0e 94 bc 03 	call	0x778 <Pop>
     d50:	bc 01       	movw	r22, r24
     d52:	90 93 e6 01 	sts	0x01E6, r25
     d56:	80 93 e5 01 	sts	0x01E5, r24
	tmpC = (u32)(s16Tmp0);
     d5a:	80 91 08 01 	lds	r24, 0x0108
     d5e:	90 91 09 01 	lds	r25, 0x0109
     d62:	7c 01       	movw	r14, r24
     d64:	00 27       	eor	r16, r16
     d66:	f7 fc       	sbrc	r15, 7
     d68:	00 95       	com	r16
     d6a:	10 2f       	mov	r17, r16
	tmpB = (u32)(s16Tmp1);
     d6c:	80 91 01 01 	lds	r24, 0x0101
     d70:	90 91 02 01 	lds	r25, 0x0102
     d74:	9c 01       	movw	r18, r24
     d76:	44 27       	eor	r20, r20
     d78:	37 fd       	sbrc	r19, 7
     d7a:	40 95       	com	r20
     d7c:	54 2f       	mov	r21, r20
	tmpA = (u32)(s16Tmp2) & 0xFFFF;
     d7e:	cb 01       	movw	r24, r22
     d80:	aa 27       	eor	r26, r26
     d82:	97 fd       	sbrc	r25, 7
     d84:	a0 95       	com	r26
     d86:	ba 2f       	mov	r27, r26
     d88:	a0 70       	andi	r26, 0x00	; 0
     d8a:	b0 70       	andi	r27, 0x00	; 0
	tmpA = tmpA * tmpB;
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 ea 0c 	call	0x19d4 <__mulsi3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
	tmpA = tmpA / tmpC;
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	a8 01       	movw	r20, r16
     d9e:	97 01       	movw	r18, r14
     da0:	0e 94 1c 0d 	call	0x1a38 <__udivmodsi4>
     da4:	da 01       	movw	r26, r20
     da6:	c9 01       	movw	r24, r18
	tmpA &= 0xFFFF;
     da8:	a0 70       	andi	r26, 0x00	; 0
     daa:	b0 70       	andi	r27, 0x00	; 0
	Push((s16)(tmpA));
     dac:	0e 94 a8 03 	call	0x750 <Push>
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	08 95       	ret

00000dba <F_Mod>:
	}


const s8 MOD_[] PROGMEM           = "MOD";
void F_Mod(void)
	{
	s16Tmp0 = Pop();
     dba:	0e 94 bc 03 	call	0x778 <Pop>
     dbe:	90 93 09 01 	sts	0x0109, r25
     dc2:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     dc6:	0e 94 bc 03 	call	0x778 <Pop>
     dca:	90 93 02 01 	sts	0x0102, r25
     dce:	80 93 01 01 	sts	0x0101, r24
	Push(s16Tmp1 % s16Tmp0);
     dd2:	20 91 08 01 	lds	r18, 0x0108
     dd6:	30 91 09 01 	lds	r19, 0x0109
     dda:	b9 01       	movw	r22, r18
     ddc:	0e 94 09 0d 	call	0x1a12 <__divmodhi4>
     de0:	0e 94 a8 03 	call	0x750 <Push>
     de4:	08 95       	ret

00000de6 <F_ShiftLEFT>:
	}

const s8 LSH_[] PROGMEM           = "LSH";
void F_ShiftLEFT(void)
	{
	s16Tmp0 = Pop() & 0x1F;
     de6:	0e 94 bc 03 	call	0x778 <Pop>
     dea:	8f 71       	andi	r24, 0x1F	; 31
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	90 93 09 01 	sts	0x0109, r25
     df2:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     df6:	0e 94 bc 03 	call	0x778 <Pop>
	Push(s16Tmp1 <<= s16Tmp0);
     dfa:	00 90 08 01 	lds	r0, 0x0108
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <F_ShiftLEFT+0x1e>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <F_ShiftLEFT+0x1a>
     e08:	90 93 02 01 	sts	0x0102, r25
     e0c:	80 93 01 01 	sts	0x0101, r24
     e10:	0e 94 a8 03 	call	0x750 <Push>
     e14:	08 95       	ret

00000e16 <F_ShiftRIGTH>:
	}

const s8 RSH_[] PROGMEM           = "RSH";
void F_ShiftRIGTH(void)
	{
	s16Tmp0 = Pop() & 0x1F;
     e16:	0e 94 bc 03 	call	0x778 <Pop>
     e1a:	8f 71       	andi	r24, 0x1F	; 31
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	90 93 09 01 	sts	0x0109, r25
     e22:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     e26:	0e 94 bc 03 	call	0x778 <Pop>
	Push(s16Tmp1 >>= s16Tmp0);
     e2a:	00 90 08 01 	lds	r0, 0x0108
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <F_ShiftRIGTH+0x1e>
     e30:	95 95       	asr	r25
     e32:	87 95       	ror	r24
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <F_ShiftRIGTH+0x1a>
     e38:	90 93 02 01 	sts	0x0102, r25
     e3c:	80 93 01 01 	sts	0x0101, r24
     e40:	0e 94 a8 03 	call	0x750 <Push>
     e44:	08 95       	ret

00000e46 <F_Equal>:
	}

// comparisons
const s8 EQUAL[] PROGMEM          = "==";
void F_Equal(void)
	{
	s16Tmp0 = Pop();
     e46:	0e 94 bc 03 	call	0x778 <Pop>
     e4a:	90 93 09 01 	sts	0x0109, r25
     e4e:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     e52:	0e 94 bc 03 	call	0x778 <Pop>
     e56:	9c 01       	movw	r18, r24
     e58:	90 93 02 01 	sts	0x0102, r25
     e5c:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 == s16Tmp0)
     e60:	80 91 08 01 	lds	r24, 0x0108
     e64:	90 91 09 01 	lds	r25, 0x0109
     e68:	28 17       	cp	r18, r24
     e6a:	39 07       	cpc	r19, r25
     e6c:	19 f4       	brne	.+6      	; 0xe74 <F_Equal+0x2e>
		Push(-1);                         // Forth 'True'
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	9f ef       	ldi	r25, 0xFF	; 255
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <F_Equal+0x32>
	else
		Push(0);                          // Forth 'False'
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 a8 03 	call	0x750 <Push>
     e7c:	08 95       	ret

00000e7e <F_NotEqual>:
	}

const s8 NOT_EQUAL[] PROGMEM      = "<>";
void F_NotEqual(void)
	{
	s16Tmp0 = Pop();
     e7e:	0e 94 bc 03 	call	0x778 <Pop>
     e82:	90 93 09 01 	sts	0x0109, r25
     e86:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     e8a:	0e 94 bc 03 	call	0x778 <Pop>
     e8e:	9c 01       	movw	r18, r24
     e90:	90 93 02 01 	sts	0x0102, r25
     e94:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 != s16Tmp0)
     e98:	80 91 08 01 	lds	r24, 0x0108
     e9c:	90 91 09 01 	lds	r25, 0x0109
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	19 f0       	breq	.+6      	; 0xeac <F_NotEqual+0x2e>
		Push(-1);                         // Forth 'True'
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <F_NotEqual+0x32>
	else
		Push(0);                          // Forth 'False'
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 a8 03 	call	0x750 <Push>
     eb4:	08 95       	ret

00000eb6 <F_Greather>:
	}

const s8 GREATHER[] PROGMEM       = ">";
void F_Greather(void)
	{
	s16Tmp0 = Pop();
     eb6:	0e 94 bc 03 	call	0x778 <Pop>
     eba:	90 93 09 01 	sts	0x0109, r25
     ebe:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     ec2:	0e 94 bc 03 	call	0x778 <Pop>
     ec6:	9c 01       	movw	r18, r24
     ec8:	90 93 02 01 	sts	0x0102, r25
     ecc:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 > s16Tmp0)
     ed0:	80 91 08 01 	lds	r24, 0x0108
     ed4:	90 91 09 01 	lds	r25, 0x0109
     ed8:	82 17       	cp	r24, r18
     eda:	93 07       	cpc	r25, r19
     edc:	1c f4       	brge	.+6      	; 0xee4 <F_Greather+0x2e>
		Push(-1);                         // Forth 'True'
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <F_Greather+0x32>
	else
		Push(0);                          // Forth 'False'
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 a8 03 	call	0x750 <Push>
     eec:	08 95       	ret

00000eee <F_GreatherOrEqual>:
	}

const s8 GREATHER_OR_EQUAL[] PROGMEM = ">=";
void F_GreatherOrEqual(void)
	{
	s16Tmp0 = Pop();
     eee:	0e 94 bc 03 	call	0x778 <Pop>
     ef2:	90 93 09 01 	sts	0x0109, r25
     ef6:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     efa:	0e 94 bc 03 	call	0x778 <Pop>
     efe:	9c 01       	movw	r18, r24
     f00:	90 93 02 01 	sts	0x0102, r25
     f04:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 >= s16Tmp0)
     f08:	80 91 08 01 	lds	r24, 0x0108
     f0c:	90 91 09 01 	lds	r25, 0x0109
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	1c f0       	brlt	.+6      	; 0xf1c <F_GreatherOrEqual+0x2e>
		Push(-1);                         // Forth 'True'
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <F_GreatherOrEqual+0x32>
	else
		Push(0);                          // Forth 'False'
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 a8 03 	call	0x750 <Push>
     f24:	08 95       	ret

00000f26 <F_Lower>:
	}

const s8 LOWER[] PROGMEM          = "<";
void F_Lower(void)
	{
	s16Tmp0 = Pop();
     f26:	0e 94 bc 03 	call	0x778 <Pop>
     f2a:	90 93 09 01 	sts	0x0109, r25
     f2e:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     f32:	0e 94 bc 03 	call	0x778 <Pop>
     f36:	9c 01       	movw	r18, r24
     f38:	90 93 02 01 	sts	0x0102, r25
     f3c:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 < s16Tmp0)
     f40:	80 91 08 01 	lds	r24, 0x0108
     f44:	90 91 09 01 	lds	r25, 0x0109
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	1c f4       	brge	.+6      	; 0xf54 <F_Lower+0x2e>
		Push(-1);                         // Forth 'True'
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <F_Lower+0x32>
	else
		Push(0);                          // Forth 'False'
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 a8 03 	call	0x750 <Push>
     f5c:	08 95       	ret

00000f5e <F_LowerOrEqual>:
	}

const s8 LOWER_OR_EQUAL[] PROGMEM = "<=";
void F_LowerOrEqual(void)
	{
	s16Tmp0 = Pop();
     f5e:	0e 94 bc 03 	call	0x778 <Pop>
     f62:	90 93 09 01 	sts	0x0109, r25
     f66:	80 93 08 01 	sts	0x0108, r24
	s16Tmp1 = Pop();
     f6a:	0e 94 bc 03 	call	0x778 <Pop>
     f6e:	9c 01       	movw	r18, r24
     f70:	90 93 02 01 	sts	0x0102, r25
     f74:	80 93 01 01 	sts	0x0101, r24
	if (s16Tmp1 <= s16Tmp0)
     f78:	80 91 08 01 	lds	r24, 0x0108
     f7c:	90 91 09 01 	lds	r25, 0x0109
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	1c f0       	brlt	.+6      	; 0xf8c <F_LowerOrEqual+0x2e>
		Push(-1);                         // Forth 'True'
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <F_LowerOrEqual+0x32>
	else
		Push(0);                          // Forth 'False'
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 a8 03 	call	0x750 <Push>
     f94:	08 95       	ret

00000f96 <F_Addr_I>:
	}


//** builtin interpreter I and J variables *********************************

const s8 ADDR_I[] PROGMEM         = "I";  // push I variable address on TOS
void F_Addr_I(void)
	{
	Push((s16)(&i_var));
     f96:	8b e4       	ldi	r24, 0x4B	; 75
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 a8 03 	call	0x750 <Push>
     f9e:	08 95       	ret

00000fa0 <F_Store_I>:
	}

const s8 STORE_I[] PROGMEM        = "I!";  // store TOS into I variable
void F_Store_I(void)
	{
	i_var = Pop();
     fa0:	0e 94 bc 03 	call	0x778 <Pop>
     fa4:	90 93 4c 01 	sts	0x014C, r25
     fa8:	80 93 4b 01 	sts	0x014B, r24
     fac:	08 95       	ret

00000fae <F_Fetch_I>:
	}

const s8 FETCH_I[] PROGMEM        = "I@";  // fetch into TOS the cirrent value of the I variable
void F_Fetch_I(void)
	{
	Push(i_var);
     fae:	80 91 4b 01 	lds	r24, 0x014B
     fb2:	90 91 4c 01 	lds	r25, 0x014C
     fb6:	0e 94 a8 03 	call	0x750 <Push>
     fba:	08 95       	ret

00000fbc <F_Display_I>:
	}

const s8 DISPLAY_I[] PROGMEM      = "I.";  // display the I variable current value
void F_Display_I(void)
	{
	Push(i_var);
     fbc:	80 91 4b 01 	lds	r24, 0x014B
     fc0:	90 91 4c 01 	lds	r25, 0x014C
     fc4:	0e 94 a8 03 	call	0x750 <Push>
	F_Dot_TOS();
     fc8:	0e 94 12 05 	call	0xa24 <F_Dot_TOS>
     fcc:	08 95       	ret

00000fce <F_Inc_I>:
	}

const s8 INC_I[] PROGMEM          = "I+";  // increment the I variable
void F_Inc_I(void)
	{
	++i_var;
     fce:	80 91 4b 01 	lds	r24, 0x014B
     fd2:	90 91 4c 01 	lds	r25, 0x014C
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	90 93 4c 01 	sts	0x014C, r25
     fdc:	80 93 4b 01 	sts	0x014B, r24
     fe0:	08 95       	ret

00000fe2 <F_Dec_I>:
	}

const s8 DEC_I[] PROGMEM          = "I-";  // decrement the I variable
void F_Dec_I(void)
	{
	--i_var;
     fe2:	80 91 4b 01 	lds	r24, 0x014B
     fe6:	90 91 4c 01 	lds	r25, 0x014C
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	90 93 4c 01 	sts	0x014C, r25
     ff0:	80 93 4b 01 	sts	0x014B, r24
     ff4:	08 95       	ret

00000ff6 <F_Addr_J>:
	}


const s8 ADDR_J[] PROGMEM         = "J";  // push J variable address on TOS
void F_Addr_J(void)
	{
	Push((s16)(&j_var));
     ff6:	80 e6       	ldi	r24, 0x60	; 96
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 a8 03 	call	0x750 <Push>
     ffe:	08 95       	ret

00001000 <F_Store_J>:
	}

const s8 STORE_J[] PROGMEM        = "J!";  // store TOS into J variable
void F_Store_J(void)
	{
	j_var = Pop();
    1000:	0e 94 bc 03 	call	0x778 <Pop>
    1004:	90 93 61 01 	sts	0x0161, r25
    1008:	80 93 60 01 	sts	0x0160, r24
    100c:	08 95       	ret

0000100e <F_Fetch_J>:
	}

const s8 FETCH_J[] PROGMEM        = "J@";  // fetch into TOS the current value of the J variable
void F_Fetch_J(void)
	{
	Push(j_var);
    100e:	80 91 60 01 	lds	r24, 0x0160
    1012:	90 91 61 01 	lds	r25, 0x0161
    1016:	0e 94 a8 03 	call	0x750 <Push>
    101a:	08 95       	ret

0000101c <F_Display_J>:
	}

const s8 DISPLAY_J[] PROGMEM      = "J.";  // display the J variable current value
void F_Display_J(void)
	{
	Push(j_var);
    101c:	80 91 60 01 	lds	r24, 0x0160
    1020:	90 91 61 01 	lds	r25, 0x0161
    1024:	0e 94 a8 03 	call	0x750 <Push>
	F_Dot_TOS();
    1028:	0e 94 12 05 	call	0xa24 <F_Dot_TOS>
    102c:	08 95       	ret

0000102e <F_Inc_J>:
	}

const s8 INC_J[] PROGMEM          = "J+";  // increment the J variable
void F_Inc_J(void)
	{
	++j_var;
    102e:	80 91 60 01 	lds	r24, 0x0160
    1032:	90 91 61 01 	lds	r25, 0x0161
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	90 93 61 01 	sts	0x0161, r25
    103c:	80 93 60 01 	sts	0x0160, r24
    1040:	08 95       	ret

00001042 <F_Dec_J>:
	}

const s8 DEC_J[] PROGMEM          = "J-";  // decrement the J variable
void F_Dec_J(void)
	{
	--j_var;
    1042:	80 91 60 01 	lds	r24, 0x0160
    1046:	90 91 61 01 	lds	r25, 0x0161
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	90 93 61 01 	sts	0x0161, r25
    1050:	80 93 60 01 	sts	0x0160, r24
    1054:	08 95       	ret

00001056 <F_I_IndirectFetch>:
	}


//** variable I indirect operators ********************************************
const s8 IND_I_FETCH[] PROGMEM   = "@I";  // fetch s16 memory &MEM into TOS using &I variable as 'I INDIRECT FETCH' address
void F_I_IndirectFetch(void)
	{
	Push(i_var);
    1056:	80 91 4b 01 	lds	r24, 0x014B
    105a:	90 91 4c 01 	lds	r25, 0x014C
    105e:	0e 94 a8 03 	call	0x750 <Push>
	F_FetchWord();
    1062:	0e 94 bb 04 	call	0x976 <F_FetchWord>
    1066:	08 95       	ret

00001068 <F_I_IndirectFetchInc>:
	}

const s8 IND_I_FETCH_INC[] PROGMEM   = "@I+";  // ... same as '@I' with two post-increment of I
void F_I_IndirectFetchInc(void)
	{
	Push(i_var);
    1068:	80 91 4b 01 	lds	r24, 0x014B
    106c:	90 91 4c 01 	lds	r25, 0x014C
    1070:	0e 94 a8 03 	call	0x750 <Push>
	F_FetchWord();
    1074:	0e 94 bb 04 	call	0x976 <F_FetchWord>
	i_var += 2;
    1078:	80 91 4b 01 	lds	r24, 0x014B
    107c:	90 91 4c 01 	lds	r25, 0x014C
    1080:	02 96       	adiw	r24, 0x02	; 2
    1082:	90 93 4c 01 	sts	0x014C, r25
    1086:	80 93 4b 01 	sts	0x014B, r24
    108a:	08 95       	ret

0000108c <F_I_IndirectFetchByte>:
	}

const s8 IND_I_FETCH_BYTE[] PROGMEM = "@IB";  // fetch s8 memory &MEM into TOS using &I variable as 'I INDIRECT FETCH' address
void F_I_IndirectFetchByte(void)
	{
	Push(i_var);
    108c:	80 91 4b 01 	lds	r24, 0x014B
    1090:	90 91 4c 01 	lds	r25, 0x014C
    1094:	0e 94 a8 03 	call	0x750 <Push>
	F_FetchByte();
    1098:	0e 94 e6 04 	call	0x9cc <F_FetchByte>
    109c:	08 95       	ret

0000109e <F_I_IndirectFetchByteInc>:
	}

const s8 IND_I_FETCH_BYTE_INC[] PROGMEM = "@IB+";  // ... same as '@IB' with post-increment of I
void F_I_IndirectFetchByteInc(void)
	{
	Push(i_var);
    109e:	80 91 4b 01 	lds	r24, 0x014B
    10a2:	90 91 4c 01 	lds	r25, 0x014C
    10a6:	0e 94 a8 03 	call	0x750 <Push>
	F_FetchByte();
    10aa:	0e 94 e6 04 	call	0x9cc <F_FetchByte>
	++i_var;
    10ae:	80 91 4b 01 	lds	r24, 0x014B
    10b2:	90 91 4c 01 	lds	r25, 0x014C
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 4c 01 	sts	0x014C, r25
    10bc:	80 93 4b 01 	sts	0x014B, r24
    10c0:	08 95       	ret

000010c2 <F_I_IndirectStore>:
	}

const s8 IND_I_STORE[] PROGMEM   = "!I";  // store TOS to s16 memory &MEM using &I variable as 'I INDIRECT STORE' address
void F_I_IndirectStore(void)
	{
	Push(i_var);
    10c2:	80 91 4b 01 	lds	r24, 0x014B
    10c6:	90 91 4c 01 	lds	r25, 0x014C
    10ca:	0e 94 a8 03 	call	0x750 <Push>
	F_StoreWord();
    10ce:	0e 94 61 04 	call	0x8c2 <F_StoreWord>
    10d2:	08 95       	ret

000010d4 <F_I_IndirectStoreInc>:
	}

const s8 IND_I_STORE_INC[] PROGMEM       = "!I+";  // same as '!I' but with two I post-increment
void F_I_IndirectStoreInc(void)
	{
	Push(i_var);
    10d4:	80 91 4b 01 	lds	r24, 0x014B
    10d8:	90 91 4c 01 	lds	r25, 0x014C
    10dc:	0e 94 a8 03 	call	0x750 <Push>
	F_StoreWord();
    10e0:	0e 94 61 04 	call	0x8c2 <F_StoreWord>
	i_var += 2;
    10e4:	80 91 4b 01 	lds	r24, 0x014B
    10e8:	90 91 4c 01 	lds	r25, 0x014C
    10ec:	02 96       	adiw	r24, 0x02	; 2
    10ee:	90 93 4c 01 	sts	0x014C, r25
    10f2:	80 93 4b 01 	sts	0x014B, r24
    10f6:	08 95       	ret

000010f8 <F_I_IndirectStoreByte>:
	}

const s8 IND_I_STORE_BYTE[] PROGMEM = "!IB";  // store TOS to s8 memory &MEM using &I variable as 'I INDIRECT STORE' address
void F_I_IndirectStoreByte(void)
	{
	Push(i_var);
    10f8:	80 91 4b 01 	lds	r24, 0x014B
    10fc:	90 91 4c 01 	lds	r25, 0x014C
    1100:	0e 94 a8 03 	call	0x750 <Push>
	F_StoreByte();
    1104:	0e 94 8d 04 	call	0x91a <F_StoreByte>
    1108:	08 95       	ret

0000110a <F_I_IndirectStoreByteInc>:
	}

const s8 IND_I_STORE_BYTE_INC[] PROGMEM  = "!IB+";  // same as '!IB' but with I post-increment
void F_I_IndirectStoreByteInc(void)
	{
	Push(i_var);
    110a:	80 91 4b 01 	lds	r24, 0x014B
    110e:	90 91 4c 01 	lds	r25, 0x014C
    1112:	0e 94 a8 03 	call	0x750 <Push>
	F_StoreByte();
    1116:	0e 94 8d 04 	call	0x91a <F_StoreByte>
	++i_var;
    111a:	80 91 4b 01 	lds	r24, 0x014B
    111e:	90 91 4c 01 	lds	r25, 0x014C
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	90 93 4c 01 	sts	0x014C, r25
    1128:	80 93 4b 01 	sts	0x014B, r24
    112c:	08 95       	ret

0000112e <F_Zero_T0S_Exit>:
	}


// EXIT if TOS is 0
const s8 ZERO_TOS_EXIT[] PROGMEM                = "==0_EXIT";
void F_Zero_T0S_Exit(void)
	{
	s16Tmp0 = Pop();
    112e:	0e 94 bc 03 	call	0x778 <Pop>
    1132:	90 93 09 01 	sts	0x0109, r25
    1136:	80 93 08 01 	sts	0x0108, r24
	if (s16Tmp0 == 0)
    113a:	89 2b       	or	r24, r25
    113c:	19 f4       	brne	.+6      	; 0x1144 <F_Zero_T0S_Exit+0x16>
		resCode = EXIT;  // Exit if TOS is zero
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	80 93 05 01 	sts	0x0105, r24
    1144:	08 95       	ret

00001146 <F_If>:
	}

// Ask for User Entry
const s8 USER_ENTRY[] PROGMEM    = "?USER";
void F_User_Entry(void)
	{
	u8 mem_Forth_Interpreter_Stdin_Channel = forth_Interpreter_Stdin_Channel;

	USART_PutFlashString(PSTR("\rUser >"));
	forth_Interpreter_Stdin_Channel = TERMINAL_STDIN;
	STDIN_Get_String();
	forth_Interpreter_Stdin_Channel = mem_Forth_Interpreter_Stdin_Channel;
	}


// IF ... [ELSE ...] ENDIF construct
/*
TOS is used for set the behaviour of the IF ... [ELSE ...] ENDIF construct.

When word IF happen :
	if TOS is TRUE
		flag 'forth_ElseEndifSkiping' is set to TRUE,
		so next words inside IF-ELSE(or IF-ENDIF) are executed while the ELSE or ENDIF words happen.
	if TOS is FALSE
		flag 'forth_ElseEndifSkiping' is set to FALSE and 'forth_StateFlags' is set to SKIP_NOT_ALWAYS_EXECUTABLE_WORDS,
		so next words inside IF-ELSE(or IF-ENDIF) are silently discarted while the ELSE or ENDIF words happen.
	drop TOS

When ELSE word happen :
	if flag 'forth_ElseEndifSkiping' is set to TRUE,
		the flag 'forth_StateFlags' is set to SKIP_NOT_ALWAYS_EXECUTABLE_WORDS,
		so next words inside ELSE-ENDIF are silently discarted while the ENDIF word happen.
	if flag 'forth_ElseEndifSkiping' is set to FALSE,
		the flag 'forth_StateFlags' is set to EXEC_ALL_WORDS,
		so next words inside ELSE-ENDIF are executed.

When ENDIF word happen :
	the flag 'forth_StateFlags' is inconditionally set to EXEC_ALL_WORDS,
	so execution continue from word that follow ENDIF.

Examples:
	"5 1 > IF ..x.. ELSE ..y.. ENDIF"
	Execute the '..x..' words inside IF-ELSE and silently discard the '..y..' words inside ELSE-ENDIF.
*/
const s8 IF[] PROGMEM                = "IF";
void F_If(void)
	{
	s16Tmp0 = Pop();
    1146:	0e 94 bc 03 	call	0x778 <Pop>
    114a:	90 93 09 01 	sts	0x0109, r25
    114e:	80 93 08 01 	sts	0x0108, r24
	if (s16Tmp0 != 0)
    1152:	89 2b       	or	r24, r25
    1154:	21 f0       	breq	.+8      	; 0x115e <F_If+0x18>
		forth_ElseEndifSkiping = TRUE;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 e4 01 	sts	0x01E4, r24
    115c:	08 95       	ret
	else
		{
		forth_ElseEndifSkiping = FALSE;
    115e:	10 92 e4 01 	sts	0x01E4, r1
		forth_StateFlags = SKIP_NOT_ALWAYS_EXECUTABLE_WORDS;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 62 01 	sts	0x0162, r24
    1168:	08 95       	ret

0000116a <F_Else>:
		}
	}

const s8 ELSE[] PROGMEM              = "ELSE";
void F_Else(void)
	{
	if (forth_ElseEndifSkiping == TRUE)
    116a:	80 91 e4 01 	lds	r24, 0x01E4
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	19 f4       	brne	.+6      	; 0x1178 <F_Else+0xe>
		forth_StateFlags = SKIP_NOT_ALWAYS_EXECUTABLE_WORDS;
    1172:	80 93 62 01 	sts	0x0162, r24
    1176:	08 95       	ret
	else
		forth_StateFlags = EXEC_ALL_WORDS;
    1178:	10 92 62 01 	sts	0x0162, r1
    117c:	08 95       	ret

0000117e <F_Endif>:
	}

const s8 ENDIF[] PROGMEM             = "ENDIF";
void F_Endif(void)
	{
	forth_StateFlags = EXEC_ALL_WORDS;
    117e:	10 92 62 01 	sts	0x0162, r1
    1182:	08 95       	ret

00001184 <F_Do>:
	}

// DO ... LOOP construct
/*
TOS is used for set how many iterations are required on a DO ... LOOP construct.
DO ... LOOP iterations can be aborted using an inner test '?xxxx' (like '?0_EXIT') exit word.

When word DO happen :
 the address of current word DO is pushed on the 'returnSTACK',
 if TOS is lower then or equal to 0 ... next words are silently discarted while the LOOP word happen.
 else ... next words are executed while the LOOP word happen.

When LOOP word happen :
 the address of word DO, previously pushed on the 'returnSTACK', is popped and TOS is decremented by 1,
 if TOS is lower then or equal to 0 or DO_LOOP_BREAK is true ...
	 DO ... LOOP loop is exited continuing into next parser word.
 else ... execute the DO word with the just popped before from the 'returnSTACK'.

Examples:
	"5 DO ... LOOP"   execute five time the '...' inner loop words.
*/
const s8 DO[] PROGMEM                = "DO";
void F_Do(void)
	{
	if (dataTOS >= 1)
    1184:	20 91 0a 01 	lds	r18, 0x010A
    1188:	22 23       	and	r18, r18
    118a:	f1 f0       	breq	.+60     	; 0x11c8 <F_Do+0x44>
		{
		returnSTACK[returnTOS++] = forth_CurrentIndex;
    118c:	90 91 e7 01 	lds	r25, 0x01E7
    1190:	e9 2f       	mov	r30, r25
    1192:	ff 27       	eor	r31, r31
    1194:	e4 5a       	subi	r30, 0xA4	; 164
    1196:	fe 4f       	sbci	r31, 0xFE	; 254
    1198:	80 91 93 02 	lds	r24, 0x0293
    119c:	80 83       	st	Z, r24
    119e:	9f 5f       	subi	r25, 0xFF	; 255
    11a0:	90 93 e7 01 	sts	0x01E7, r25
		if (dataSTACK[dataTOS - 1] <= 0)
    11a4:	e2 2f       	mov	r30, r18
    11a6:	ff 27       	eor	r31, r31
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	e0 59       	subi	r30, 0x90	; 144
    11ae:	fd 4f       	sbci	r31, 0xFD	; 253
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	18 16       	cp	r1, r24
    11b6:	19 06       	cpc	r1, r25
    11b8:	24 f0       	brlt	.+8      	; 0x11c2 <F_Do+0x3e>
			forth_StateFlags = SKIP_NOT_ALWAYS_EXECUTABLE_WORDS;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 62 01 	sts	0x0162, r24
    11c0:	08 95       	ret
		else
			forth_StateFlags = EXEC_ALL_WORDS;
    11c2:	10 92 62 01 	sts	0x0162, r1
    11c6:	08 95       	ret
		}
	else Error(INSUFFICIENT_PARAMETERS);
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	0e 94 87 03 	call	0x70e <Error>
    11ce:	08 95       	ret

000011d0 <F_Loop>:
	}

const s8 LOOP[] PROGMEM              = "LOOP";
void F_Loop(void)
	{
	if ((dataTOS >= 1) && (returnTOS >= 1))
    11d0:	20 91 0a 01 	lds	r18, 0x010A
    11d4:	22 23       	and	r18, r18
    11d6:	61 f1       	breq	.+88     	; 0x1230 <F_Loop+0x60>
    11d8:	80 91 e7 01 	lds	r24, 0x01E7
    11dc:	88 23       	and	r24, r24
    11de:	41 f1       	breq	.+80     	; 0x1230 <F_Loop+0x60>
		{
		u8Tmp0 = returnSTACK[--returnTOS];
    11e0:	81 50       	subi	r24, 0x01	; 1
    11e2:	80 93 e7 01 	sts	0x01E7, r24
    11e6:	e8 2f       	mov	r30, r24
    11e8:	ff 27       	eor	r31, r31
    11ea:	e4 5a       	subi	r30, 0xA4	; 164
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	30 81       	ld	r19, Z
    11f0:	30 93 6f 02 	sts	0x026F, r19
		if ((--dataSTACK[dataTOS - 1] <= 0) || (forth_StateFlags & DO_LOOP_BREAK))
    11f4:	e2 2f       	mov	r30, r18
    11f6:	ff 27       	eor	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	e0 59       	subi	r30, 0x90	; 144
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	18 16       	cp	r1, r24
    120c:	19 06       	cpc	r1, r25
    120e:	24 f4       	brge	.+8      	; 0x1218 <F_Loop+0x48>
    1210:	80 91 62 01 	lds	r24, 0x0162
    1214:	81 ff       	sbrs	r24, 1
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <F_Loop+0x54>
			{
			--dataTOS;                    // ... drop TOS and exit the DO...LOOP
    1218:	21 50       	subi	r18, 0x01	; 1
    121a:	20 93 0a 01 	sts	0x010A, r18
			forth_StateFlags = EXEC_ALL_WORDS;
    121e:	10 92 62 01 	sts	0x0162, r1
    1222:	08 95       	ret
			}
		else
			{
			forth_Branching = TRUE;       // ... then skip next 'forth_CurrentIndex' increment
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 63 01 	sts	0x0163, r24
			forth_CurrentIndex = u8Tmp0;  // ... and continue the DO...LOOP
    122a:	30 93 93 02 	sts	0x0293, r19
    122e:	08 95       	ret
			}
		}
	else Error(INSUFFICIENT_PARAMETERS);
    1230:	84 e0       	ldi	r24, 0x04	; 4
    1232:	0e 94 87 03 	call	0x70e <Error>
    1236:	08 95       	ret

00001238 <F_Zero_T0S_Break>:
	}

// BREAK a DO ... LOOP if TOS is 0
const s8 ZERO_TOS_BREAK[] PROGMEM   = "==0_BREAK";
void F_Zero_T0S_Break(void)
	{
	s16Tmp0 = Pop();
    1238:	0e 94 bc 03 	call	0x778 <Pop>
    123c:	90 93 09 01 	sts	0x0109, r25
    1240:	80 93 08 01 	sts	0x0108, r24
	if (s16Tmp0 == 0)
    1244:	89 2b       	or	r24, r25
    1246:	19 f4       	brne	.+6      	; 0x124e <F_Zero_T0S_Break+0x16>
		forth_StateFlags = SKIP_NOT_ALWAYS_EXECUTABLE_WORDS + DO_LOOP_BREAK;
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	80 93 62 01 	sts	0x0162, r24
    124e:	08 95       	ret

00001250 <C_Func_0>:
	}

const s8 WORDS[] PROGMEM             = "WORDS";
void F_Words_Display(void);

const s8 PAUSE[] PROGMEM             = "PAUSE";
void F_Pause(void);

const s8 CHECK_PAUSE[] PROGMEM       = "?PAUSE";
void F_CheckPause(void);

//------------------------------------------------------------------------------
//    C Functions CALL from Forth and C_Functions_DICTIONARY
//------------------------------------------------------------------------------

// From Forth we can call a C function 'by name' using the following command format :
//
//       **************************************************************
//       ** ...in_param_push... "C_funcName CALL ...out_param_pop... **
//       **************************************************************
//
// ... input parameters, if required, can be pushed on dataSTACK before CALL,
// ... then input the C function name using "C_funcName followed by word CALL,
// ... output parameters, if any, can be popped from the dataSTACK after the CALL
//
// ... "C_funcName string is CASE SENSITIVE like all strings in Forth.


// ... set to TRUE only for 'CALL' from Forth Tests,
// ... can be used as TEMPLATE for write C function callable by Forth
#define  C_CALL_TEMPLATE   TRUE

#if C_CALL_TEMPLATE
 const s8 _C_FUNCTION_0[] PROGMEM          = "C_Func_0";
 void C_Func_0(void)
	{
	// check 'resCode' for EXIT, or 'err' for any ERRORs
	USART_PutFlashString(PSTR("\7C_Func_0() reached !"));
    1250:	82 e4       	ldi	r24, 0x42	; 66
    1252:	94 e0       	ldi	r25, 0x04	; 4
    1254:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1258:	08 95       	ret

0000125a <C_Func_1>:
	}

 const s8 _C_FUNCTION_1[] PROGMEM          = "C_Func_1";
 void C_Func_1(void)
	{
	// check 'resCode' for EXIT, or 'err' for any ERRORs
	USART_PutFlashString(PSTR("\7C_Func_1() reached !"));
    125a:	88 e5       	ldi	r24, 0x58	; 88
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1262:	08 95       	ret

00001264 <F_C_FunctionCALL_by_Name>:
	}

#endif

typedef struct PROGMEM
	{
	PGM_P       c_STR;             // dictionary C_funcName string
	C_FUNC      c_C_Func;          // dictionary address of called Function
	} BUILTIN_C_DICTIONARY;

const BUILTIN_C_DICTIONARY c_DICT[] PROGMEM = {
	// C functions DICTIONARY --------------------------
  #if C_CALL_TEMPLATE
	{_C_FUNCTION_0,               C_Func_0},
	{_C_FUNCTION_1,               C_Func_1},
  #endif
	// End of Builtin DICTIONARY -----------------------
	{NULL,                        NULL}
	};

const s8 C_FUNCTION_CALL_BY_NAME[] PROGMEM  = "CALL";
void F_C_FunctionCALL_by_Name(void)
	{
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
	u8          c_dictionary_index = 0;
    126a:	10 e0       	ldi	r17, 0x00	; 0
	PGM_P       c_STR;             // dictionary C_funcName string
	C_FUNC      c_C_Func;          // dictionary address of called Function

	// Search if c_STR it's defined, CASE SENSITIVE, into the C BUILTIN DICTIONARY ...

	s16Tmp0 = Pop();                     // pop the C_funcName string pointer from TOS
    126c:	0e 94 bc 03 	call	0x778 <Pop>
    1270:	90 93 09 01 	sts	0x0109, r25
    1274:	80 93 08 01 	sts	0x0108, r24
	c_dictionary_index = 0;

	do {
		c_STR = (PGM_P)(pgm_read_word(&c_DICT[c_dictionary_index].c_STR));
    1278:	c1 2f       	mov	r28, r17
    127a:	dd 27       	eor	r29, r29
    127c:	cc 0f       	add	r28, r28
    127e:	dd 1f       	adc	r29, r29
    1280:	cc 0f       	add	r28, r28
    1282:	dd 1f       	adc	r29, r29
    1284:	fe 01       	movw	r30, r28
    1286:	e8 5a       	subi	r30, 0xA8	; 168
    1288:	fd 4f       	sbci	r31, 0xFD	; 253
    128a:	65 91       	lpm	r22, Z+
    128c:	74 91       	lpm	r23, Z
		if (c_STR)
    128e:	61 15       	cp	r22, r1
    1290:	71 05       	cpc	r23, r1
    1292:	91 f0       	breq	.+36     	; 0x12b8 <F_C_FunctionCALL_by_Name+0x54>
			{
			if (strcmp_P((s8 *)(s16Tmp0), c_STR) == 0)
    1294:	80 91 08 01 	lds	r24, 0x0108
    1298:	90 91 09 01 	lds	r25, 0x0109
    129c:	0e 94 a7 0c 	call	0x194e <strcmp_P>
    12a0:	89 2b       	or	r24, r25
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <F_C_FunctionCALL_by_Name+0x5c>
				{
				c_C_Func = (C_FUNC)(pgm_read_word(&c_DICT[c_dictionary_index].c_C_Func));
    12a4:	fe 01       	movw	r30, r28
    12a6:	e6 5a       	subi	r30, 0xA6	; 166
    12a8:	fd 4f       	sbci	r31, 0xFD	; 253
    12aa:	85 91       	lpm	r24, Z+
    12ac:	94 91       	lpm	r25, Z
				if (c_C_Func != NULL)
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	49 f0       	breq	.+18     	; 0x12c4 <F_C_FunctionCALL_by_Name+0x60>
					c_C_Func();    // CALL the required C Function
    12b2:	fc 01       	movw	r30, r24
    12b4:	09 95       	icall
				break;
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <F_C_FunctionCALL_by_Name+0x60>
				}
			}
		else
			{
			Error(FUNCTION_UNKNOWN);
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	0e 94 87 03 	call	0x70e <Error>
			break;
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <F_C_FunctionCALL_by_Name+0x60>
			}
		++c_dictionary_index;
    12c0:	1f 5f       	subi	r17, 0xFF	; 255
		} while (1);
    12c2:	da cf       	rjmp	.-76     	; 0x1278 <F_C_FunctionCALL_by_Name+0x14>
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	08 95       	ret

000012cc <F_Words_Display>:
	}


//------------------------------------------------------------------------------
//                   EMBEDDED Forth Words SOURCE Scripts
//------------------------------------------------------------------------------

const s8 MEM_DUMP_[] PROGMEM         = "DUMP";  // (len addr -- ) print memory
const s8 MEM_DUMP[] PROGMEM          = "I! DO I. @IB+ . CR LOOP";

const s8 MEM_STR_DUMP_[] PROGMEM     = "DUMP\"";  // (addr -- ) print string using TOS as the memory pointer
const s8 MEM_STR_DUMP[] PROGMEM      = "I! 100 DO @IB+ DUP ==0_EXIT .C LOOP";

const s8 MEM_FILL_[] PROGMEM         = "FILL";  // (len addr val -- ) fill memory
const s8 MEM_FILL[] PROGMEM          = "J! I! DO J@ !IB+ LOOP";



//------------------------------------------------------------------------------------------------------------------------------
//                                     BuiltIN Forth DICTIONARY
//------------------------------------------------------------------------------------------------------------------------------

#define EXEC_ALWAYS_MASK        0x01
#define EMBEDDED_SOURCE_MASK    0x02

typedef struct PROGMEM
	{
	PGM_P       forth_STR;             // dictionary Command String
	C_FUNC      forth_C_Func;          // dictionary called C Command Function
	u8          forth_ExcecutionFlag;  // if set to EXEC_ALWAYS_MASK unconditionally executed this word,
												  // else the word is executed only if 'forth_StateFlags == EXEC_ALL_TOKENS'
	} BUILTIN_FORTH_DICTIONARY;

const BUILTIN_FORTH_DICTIONARY forth_DICT[] PROGMEM = {

	//** C Functions CALL from Forth using C_Functions_DICTIONARY ************
	{C_FUNCTION_CALL_BY_NAME,  F_C_FunctionCALL_by_Name,  0},

	//** builtin interpreter 'immediate words' executed on the fly ***********
	// dataTOS operation
	{STORE,                    F_StoreWord,               0},
	{STORE_BYTE,               F_StoreByte,               0},
	{FETCH,                    F_FetchWord,               0},
	{FETCH_BYTE,               F_FetchByte,               0},

	// destructive stack(s) print
	{DOT_TOS,                  F_Dot_TOS,                 0},
	{DOT_TOS_CHAR,             F_Dot_TOS_Char,            0},
	{DOT_TOS_STRING,           F_Dot_String,              0},
	{CLEAR_STACKS,             F_Print_And_ClearSTACKs,   EXEC_ALWAYS_MASK},

	// stack(s) display
	{ASK_DATA_STACK,           F_Ask_DataSTACK,           EXEC_ALWAYS_MASK},
	{ASK_RETURN_STACK,         F_Ask_ReturnSTACK,         EXEC_ALWAYS_MASK},

	// CR printing
	{CR_,                      F_PutCR,                   0},

	// stack oparators
	{DUP_,                     F_Dup,                     0},
	{SWAP_,                    F_Swap,                    0},
	{DROP_,                    F_Drop,                    0},

	// unary operators ( w -- wRes )
	{INC_,                     F_Inc,                     0},
	{DEC_,                     F_Dec,                     0},
	{NOT_,                     F_Not,                     0},
	{ABS_,                     F_Abs,                     0},
	// binary operators ( w1 w2 -- wRes )
	{OR__,                     F_Or,                      0},
	{XOR_,                     F_Xor,                     0},
	{AND_,                     F_And,                     0},
	{ADD_,                     F_Add,                     0},
	{DIFF,                     F_Diff,                    0},
	{MULT,                     F_Mult,                    0},
	{DIV_,                     F_Div,                     0},
	{SCALE_,                   F_Scaling,                 0},
	{MOD_,                     F_Mod,                     0},
	{LSH_,                     F_ShiftLEFT,               0},
	{RSH_,                     F_ShiftRIGTH,              0},
	// tests comparison ( w1 w2 -- Res )
	{EQUAL,                    F_Equal,                   0},
	{NOT_EQUAL,                F_NotEqual,                0},
	{GREATHER,                 F_Greather,                0},
	{GREATHER_OR_EQUAL,        F_GreatherOrEqual,         0},
	{LOWER,                    F_Lower,                   0},
	{LOWER_OR_EQUAL,           F_LowerOrEqual,            0},

	//** builtin interpreter I and J variables *********************************
	{ADDR_I,                   F_Addr_I,                  0},
	{STORE_I,                  F_Store_I,                 0},
	{FETCH_I,                  F_Fetch_I,                 0},
	{DISPLAY_I,                F_Display_I,               0},
	{INC_I,                    F_Inc_I,                   0},
	{DEC_I,                    F_Dec_I,                   0},

	{ADDR_J,                   F_Addr_J,                  0},
	{STORE_J,                  F_Store_J,                 0},
	{FETCH_J,                  F_Fetch_J,                 0},
	{DISPLAY_J,                F_Display_J,               0},
	{INC_J,                    F_Inc_J,                   0},
	{DEC_J,                    F_Dec_J,                   0},

  //** builtin interpreter I indirect operators ********************************
	{IND_I_FETCH,              F_I_IndirectFetch,         0},
	{IND_I_FETCH_BYTE,         F_I_IndirectFetchByte,     0},
	{IND_I_STORE,              F_I_IndirectStore,         0},
	{IND_I_STORE_BYTE,         F_I_IndirectStoreByte,     0},
	{IND_I_FETCH_INC,          F_I_IndirectFetchInc,      0},
	{IND_I_FETCH_BYTE_INC,     F_I_IndirectFetchByteInc,  0},
	{IND_I_STORE_INC,          F_I_IndirectStoreInc,      0},
	{IND_I_STORE_BYTE_INC,     F_I_IndirectStoreByteInc,  0},

	// EXIT if TOS is 0
	{ZERO_TOS_EXIT,            F_Zero_T0S_Exit,           0},
	// User Entry, acquire a user string CR or ESC terminated
	{USER_ENTRY,               F_User_Entry,              0},

	// IF ... [ELSE ...] ENDIF construct
	{IF,                       F_If,                      EXEC_ALWAYS_MASK},
	{ELSE,                     F_Else,                    EXEC_ALWAYS_MASK},
	{ENDIF,                    F_Endif,                   EXEC_ALWAYS_MASK},

	// DO ... LOOP construct
	{DO,                       F_Do,                      EXEC_ALWAYS_MASK},
	{LOOP,                     F_Loop,                    EXEC_ALWAYS_MASK},
	// BREAK the DO ... LOOP if TOS is 0
	{ZERO_TOS_BREAK,           F_Zero_T0S_Break,          0},

	//** builtin interpreter variables ***************************************
	{BASE_DEC,                 F_DecimalBASE,             0},
	{BASE_HEX,                 F_HexadecimalBASE,         0},
	{DBG_YES,                  F_DBG_Yes,                 0},
	{DBG_NO,                   F_DBG_No,                  0},
	{RAM_,                     F_Ram,                     0},
	{EEPROM_,                  F_Eeprom,                  0},
	{FLASH_,                   F_Flash,                   0},
	//** USER RAM area *******************************************************
  #if RAM_USER_APPLICATION_BYTES
	{USER_RAM,                  F_UserRamADDR,            0},
  #endif

	//** PAUSE words
	{PAUSE,                    F_Pause,                   0},
	{CHECK_PAUSE,              F_CheckPause,              EXEC_ALWAYS_MASK},

	//** STEP words
	{STEP_YES,                 F_Step_Yes,                0},
	{STEP_NO,                  F_Step_No,                 0},

	//** Words DICTIONARY Display
	{WORDS,                    F_Words_Display,           0},

	//** EMBEDDED Forth Words SOURCE Scripts ************************************
	{MEM_DUMP_,                (C_FUNC)(MEM_DUMP),       EMBEDDED_SOURCE_MASK},
	{MEM_STR_DUMP_,            (C_FUNC)(MEM_STR_DUMP),   EMBEDDED_SOURCE_MASK},
	{MEM_FILL_,                (C_FUNC)(MEM_FILL),       EMBEDDED_SOURCE_MASK},

	// End of Builtin DICTIONARY ------------------------------------------------
	{NULL,                     NULL,                      0}
	};

void F_Words_Display(void)
	{
	// Display all DICTIONARY words
	PGM_P forth_STR; // pointer to current dictionary 'forth_STR'

	s16Tmp0 = 0;
    12cc:	10 92 09 01 	sts	0x0109, r1
    12d0:	10 92 08 01 	sts	0x0108, r1
	do {
		forth_STR = (PGM_P)(pgm_read_word(&forth_DICT[s16Tmp0].forth_STR));
    12d4:	80 91 08 01 	lds	r24, 0x0108
    12d8:	90 91 09 01 	lds	r25, 0x0109
    12dc:	fc 01       	movw	r30, r24
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	e4 5a       	subi	r30, 0xA4	; 164
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	85 91       	lpm	r24, Z+
    12f0:	94 91       	lpm	r25, Z
		if (forth_STR)
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	79 f0       	breq	.+30     	; 0x1314 <F_Words_Display+0x48>
			{
			USART_PutFlashString(forth_STR);
    12f6:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
			USART_Tx(CR);
    12fa:	8d e0       	ldi	r24, 0x0D	; 13
    12fc:	0e 94 5d 03 	call	0x6ba <USART_Tx>
			}
		else
			break;
		++s16Tmp0;
    1300:	80 91 08 01 	lds	r24, 0x0108
    1304:	90 91 09 01 	lds	r25, 0x0109
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	90 93 09 01 	sts	0x0109, r25
    130e:	80 93 08 01 	sts	0x0108, r24
		} while (1);
    1312:	e0 cf       	rjmp	.-64     	; 0x12d4 <F_Words_Display+0x8>
    1314:	08 95       	ret

00001316 <F_Pause>:
	}

void F_Pause(void)
	{
	USART_PutFlashString(PSTR(" PAUSE: [E] Exit, user -> "));
    1316:	8e e6       	ldi	r24, 0x6E	; 110
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
	while (1)
		{
		s16Tmp0 = USART_Rx_Check();
    131e:	0e 94 73 03 	call	0x6e6 <USART_Rx_Check>
    1322:	90 93 09 01 	sts	0x0109, r25
    1326:	80 93 08 01 	sts	0x0108, r24
		if (s16Tmp0 >= 0)
    132a:	97 fd       	sbrc	r25, 7
    132c:	f8 cf       	rjmp	.-16     	; 0x131e <F_Pause+0x8>
			{
			if (toupper(s16Tmp0) == 'E')
    132e:	0e 94 58 0d 	call	0x1ab0 <toupper>
    1332:	85 34       	cpi	r24, 0x45	; 69
    1334:	91 05       	cpc	r25, r1
    1336:	41 f4       	brne	.+16     	; 0x1348 <F_Pause+0x32>
				{
				USART_PutFlashString(PSTR("E\r"));
    1338:	89 e8       	ldi	r24, 0x89	; 137
    133a:	94 e0       	ldi	r25, 0x04	; 4
    133c:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
				resCode = EXIT;
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	80 93 05 01 	sts	0x0105, r24
    1346:	08 95       	ret
				}
			else
				USART_PutFlashString(PSTR(".\r"));
    1348:	8c e8       	ldi	r24, 0x8C	; 140
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1350:	08 95       	ret

00001352 <F_CheckPause>:
			break;
			}
		}
	}

void F_CheckPause(void)
	{
	s16Tmp0 = USART_Rx_Check();
    1352:	0e 94 73 03 	call	0x6e6 <USART_Rx_Check>
    1356:	90 93 09 01 	sts	0x0109, r25
    135a:	80 93 08 01 	sts	0x0108, r24
	if (s16Tmp0 >= 0)
    135e:	97 fd       	sbrc	r25, 7
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <F_CheckPause+0x14>
		{
		F_Pause();
    1362:	0e 94 8b 09 	call	0x1316 <F_Pause>
    1366:	08 95       	ret

00001368 <Inc_Stdin_StringPushIndex>:
		}
	}


//------------------------------------------------------------------------------------------------------------------------------
//                                              Forth INTERPRETER
//------------------------------------------------------------------------------------------------------------------------------

// Both the STDIN Channel and the STDOUT Channel of the Forth INTERPRETER use ASCII strings terminated with CR.
void Inc_Stdin_StringPushIndex(void)
	{
	if (++stdin_StringPushIndex >= MAX_STDIN_STRING_LENGTH)
    1368:	80 91 03 01 	lds	r24, 0x0103
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 03 01 	sts	0x0103, r24
    1372:	85 38       	cpi	r24, 0x85	; 133
    1374:	10 f0       	brcs	.+4      	; 0x137a <Inc_Stdin_StringPushIndex+0x12>
		stdin_StringPushIndex = 0;
    1376:	10 92 03 01 	sts	0x0103, r1
	if (stdin_StringPushIndex == stdin_StringPopIndex)
    137a:	90 91 03 01 	lds	r25, 0x0103
    137e:	80 91 95 02 	lds	r24, 0x0295
    1382:	98 17       	cp	r25, r24
    1384:	19 f4       	brne	.+6      	; 0x138c <Inc_Stdin_StringPushIndex+0x24>
		Error(STDIN_RING_BUFFER_FULL);
    1386:	86 e0       	ldi	r24, 0x06	; 6
    1388:	0e 94 87 03 	call	0x70e <Error>
    138c:	08 95       	ret

0000138e <Dec_Stdin_StringPushIndex>:
	}

void Dec_Stdin_StringPushIndex(void)
	{
	if (stdin_StringPushIndex == 0)
    138e:	80 91 03 01 	lds	r24, 0x0103
    1392:	88 23       	and	r24, r24
    1394:	11 f4       	brne	.+4      	; 0x139a <Dec_Stdin_StringPushIndex+0xc>
		stdin_StringPushIndex = MAX_STDIN_STRING_LENGTH - 1;
    1396:	84 e8       	ldi	r24, 0x84	; 132
    1398:	01 c0       	rjmp	.+2      	; 0x139c <Dec_Stdin_StringPushIndex+0xe>
	else
		--stdin_StringPushIndex;
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	80 93 03 01 	sts	0x0103, r24
    13a0:	08 95       	ret

000013a2 <STDIN_Get_String>:
	}

void Inc_Stdin_StringPopIndex(void)
	{
	if (++stdin_StringPopIndex >= MAX_STDIN_STRING_LENGTH)
		stdin_StringPopIndex = 0;
	}

/* --- 'STDIN_Get_String()' ---
 *
 * The STDIN strings are acquired, one at a time, using the 'STDIN_Get_String()' function.
 * The 'STDIN_Get_String()' function use the 'forth_Interpreter_StdinChannel' variable and
 * the 'forth_Interpreter_StdinMemoryAddress' address to get a string fron the current STDIN Channel.
 * The 'STDIN_Get_String()' function use a RAM ring buffer 'stdin_StringRingBuffer' to store the input stream.
 */
void STDIN_Get_String(void)
	{
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	21 97       	sbiw	r28, 0x01	; 1
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
	s16   rxChar;
	s8    txChar;
	s8    *strMemAddr = forth_Interpreter_Stdin_MemoryAddress;;
    13ba:	00 91 70 02 	lds	r16, 0x0270
    13be:	10 91 71 02 	lds	r17, 0x0271

	resCode = READY;
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	80 93 05 01 	sts	0x0105, r24
	switch (forth_Interpreter_Stdin_Channel)
    13c8:	80 91 06 01 	lds	r24, 0x0106
    13cc:	99 27       	eor	r25, r25
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <STDIN_Get_String+0x34>
    13d4:	65 c0       	rjmp	.+202    	; 0x14a0 <STDIN_Get_String+0xfe>
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	24 f4       	brge	.+8      	; 0x13e4 <STDIN_Get_String+0x42>
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <STDIN_Get_String+0x40>
    13e0:	4e c0       	rjmp	.+156    	; 0x147e <STDIN_Get_String+0xdc>
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <STDIN_Get_String+0x48>
    13e4:	03 97       	sbiw	r24, 0x03	; 3
    13e6:	09 f4       	brne	.+2      	; 0x13ea <STDIN_Get_String+0x48>
    13e8:	73 c0       	rjmp	.+230    	; 0x14d0 <STDIN_Get_String+0x12e>
		{
		default :
		case TERMINAL_STDIN :
			// get ready characters from TERMINAL_STDIN into RAM 'stdin_StringRingBuffer', one at a time
			resCode = CONTINUE;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 05 01 	sts	0x0105, r24
			rxChar = USART_Rx_Check();
    13f0:	0e 94 73 03 	call	0x6e6 <USART_Rx_Check>
    13f4:	9c 01       	movw	r18, r24
			if (rxChar >= 0)
    13f6:	97 fd       	sbrc	r25, 7
    13f8:	7c c0       	rjmp	.+248    	; 0x14f2 <STDIN_Get_String+0x150>
				{
				txChar = (s8)(rxChar & 0xFF);
    13fa:	89 83       	std	Y+1, r24	; 0x01
				if (txChar == ESC)
    13fc:	8b 31       	cpi	r24, 0x1B	; 27
    13fe:	59 f4       	brne	.+22     	; 0x1416 <STDIN_Get_String+0x74>
					{
					USART_Rx_Flush();
    1400:	0e 94 7e 03 	call	0x6fc <USART_Rx_Flush>
					stdin_StringPushIndex = stdin_StringPopIndex;
    1404:	80 91 95 02 	lds	r24, 0x0295
    1408:	80 93 03 01 	sts	0x0103, r24
					USART_PutFlashString(PSTR("\r>"));
    140c:	8f e8       	ldi	r24, 0x8F	; 143
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1414:	2e c0       	rjmp	.+92     	; 0x1472 <STDIN_Get_String+0xd0>
					txChar = BEL;
					}
				else if (txChar == BS)
    1416:	88 30       	cpi	r24, 0x08	; 8
    1418:	a1 f4       	brne	.+40     	; 0x1442 <STDIN_Get_String+0xa0>
					{
					if (stdin_StringPushIndex != stdin_StringPopIndex)
    141a:	90 91 03 01 	lds	r25, 0x0103
    141e:	80 91 95 02 	lds	r24, 0x0295
    1422:	98 17       	cp	r25, r24
    1424:	31 f1       	breq	.+76     	; 0x1472 <STDIN_Get_String+0xd0>
						{
						Dec_Stdin_StringPushIndex();
    1426:	0e 94 c7 09 	call	0x138e <Dec_Stdin_StringPushIndex>
						stdin_StringRingBuffer[stdin_StringPushIndex] = '\0';
    142a:	80 91 03 01 	lds	r24, 0x0103
    142e:	e8 2f       	mov	r30, r24
    1430:	ff 27       	eor	r31, r31
    1432:	e7 51       	subi	r30, 0x17	; 23
    1434:	fe 4f       	sbci	r31, 0xFE	; 254
    1436:	10 82       	st	Z, r1
						USART_PutFlashString(PSTR("\b "));
    1438:	82 e9       	ldi	r24, 0x92	; 146
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1440:	1a c0       	rjmp	.+52     	; 0x1476 <STDIN_Get_String+0xd4>
						}
					else
						txChar = BEL;
					}
				else if (txChar == CR)
    1442:	8d 30       	cpi	r24, 0x0D	; 13
    1444:	51 f4       	brne	.+20     	; 0x145a <STDIN_Get_String+0xb8>
					{
					if (stdin_StringPushIndex != stdin_StringPopIndex)
    1446:	90 91 03 01 	lds	r25, 0x0103
    144a:	80 91 95 02 	lds	r24, 0x0295
    144e:	98 17       	cp	r25, r24
    1450:	81 f0       	breq	.+32     	; 0x1472 <STDIN_Get_String+0xd0>
						resCode = READY;
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	80 93 05 01 	sts	0x0105, r24
    1458:	0e c0       	rjmp	.+28     	; 0x1476 <STDIN_Get_String+0xd4>
					else
						txChar = BEL;
					}
				else if (txChar >= ' ')
    145a:	80 32       	cpi	r24, 0x20	; 32
    145c:	54 f0       	brlt	.+20     	; 0x1472 <STDIN_Get_String+0xd0>
					{
					stdin_StringRingBuffer[stdin_StringPushIndex] = txChar;
    145e:	80 91 03 01 	lds	r24, 0x0103
    1462:	e8 2f       	mov	r30, r24
    1464:	ff 27       	eor	r31, r31
    1466:	e7 51       	subi	r30, 0x17	; 23
    1468:	fe 4f       	sbci	r31, 0xFE	; 254
    146a:	20 83       	st	Z, r18
					Inc_Stdin_StringPushIndex();
    146c:	0e 94 b4 09 	call	0x1368 <Inc_Stdin_StringPushIndex>
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <STDIN_Get_String+0xd4>
					}
				else
					txChar = BEL;
    1472:	87 e0       	ldi	r24, 0x07	; 7
    1474:	89 83       	std	Y+1, r24	; 0x01
				USART_Tx(txChar);
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	0e 94 5d 03 	call	0x6ba <USART_Tx>
				}
			break;
    147c:	3a c0       	rjmp	.+116    	; 0x14f2 <STDIN_Get_String+0x150>

		case RAM_STDIN :
			do { // copy string from RAM 'forth_Interpreter_Stdin_MemoryAddress' into RAM 'stdin_StringRingBuffer'
				txChar = *strMemAddr;
    147e:	f8 01       	movw	r30, r16
    1480:	90 81       	ld	r25, Z
    1482:	99 83       	std	Y+1, r25	; 0x01
				if (txChar <= 0)
    1484:	19 16       	cp	r1, r25
    1486:	ac f5       	brge	.+106    	; 0x14f2 <STDIN_Get_String+0x150>
					break;
				++strMemAddr;
    1488:	0f 5f       	subi	r16, 0xFF	; 255
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
				stdin_StringRingBuffer[stdin_StringPushIndex] = txChar;
    148c:	80 91 03 01 	lds	r24, 0x0103
    1490:	e8 2f       	mov	r30, r24
    1492:	ff 27       	eor	r31, r31
    1494:	e7 51       	subi	r30, 0x17	; 23
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	90 83       	st	Z, r25
				Inc_Stdin_StringPushIndex();
    149a:	0e 94 b4 09 	call	0x1368 <Inc_Stdin_StringPushIndex>
				} while (1);
    149e:	ef cf       	rjmp	.-34     	; 0x147e <STDIN_Get_String+0xdc>
			break;

		case EEPROM_STDIN :
			do { // copy string from EEPROM 'forth_Interpreter_Stdin_MemoryAddress' into RAM 'stdin_StringRingBuffer'
				EEPROM_Read(&txChar, (s16)(strMemAddr++), 1);
    14a0:	c8 01       	movw	r24, r16
    14a2:	0f 5f       	subi	r16, 0xFF	; 255
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	bc 01       	movw	r22, r24
    14ac:	ce 01       	movw	r24, r28
    14ae:	84 0f       	add	r24, r20
    14b0:	95 1f       	adc	r25, r21
    14b2:	0e 94 24 03 	call	0x648 <EEPROM_Read>
				if (txChar <= 0)
    14b6:	99 81       	ldd	r25, Y+1	; 0x01
    14b8:	19 16       	cp	r1, r25
    14ba:	dc f4       	brge	.+54     	; 0x14f2 <STDIN_Get_String+0x150>
					break;
				stdin_StringRingBuffer[stdin_StringPushIndex] = txChar;
    14bc:	80 91 03 01 	lds	r24, 0x0103
    14c0:	e8 2f       	mov	r30, r24
    14c2:	ff 27       	eor	r31, r31
    14c4:	e7 51       	subi	r30, 0x17	; 23
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	90 83       	st	Z, r25
				Inc_Stdin_StringPushIndex();
    14ca:	0e 94 b4 09 	call	0x1368 <Inc_Stdin_StringPushIndex>
				} while (1);
    14ce:	e8 cf       	rjmp	.-48     	; 0x14a0 <STDIN_Get_String+0xfe>
			break;

		case FLASH_STDIN :
			do { // copy string from FLASH 'forth_Interpreter_Stdin_MemoryAddress' into RAM 'stdin_StringRingBuffer'
				txChar = pgm_read_byte(strMemAddr++);
    14d0:	f8 01       	movw	r30, r16
    14d2:	0f 5f       	subi	r16, 0xFF	; 255
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	94 91       	lpm	r25, Z
    14d8:	99 83       	std	Y+1, r25	; 0x01
				if (txChar <= 0)
    14da:	19 16       	cp	r1, r25
    14dc:	54 f4       	brge	.+20     	; 0x14f2 <STDIN_Get_String+0x150>
					break;
				stdin_StringRingBuffer[stdin_StringPushIndex] = txChar;
    14de:	80 91 03 01 	lds	r24, 0x0103
    14e2:	e8 2f       	mov	r30, r24
    14e4:	ff 27       	eor	r31, r31
    14e6:	e7 51       	subi	r30, 0x17	; 23
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	90 83       	st	Z, r25
				Inc_Stdin_StringPushIndex();
    14ec:	0e 94 b4 09 	call	0x1368 <Inc_Stdin_StringPushIndex>
				} while (1);
    14f0:	ef cf       	rjmp	.-34     	; 0x14d0 <STDIN_Get_String+0x12e>
			break;
		}

	if (resCode == READY)
    14f2:	80 91 05 01 	lds	r24, 0x0105
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	49 f4       	brne	.+18     	; 0x150c <STDIN_Get_String+0x16a>
		{ // Terminate string
		stdin_StringRingBuffer[stdin_StringPushIndex] = '\0';
    14fa:	80 91 03 01 	lds	r24, 0x0103
    14fe:	e8 2f       	mov	r30, r24
    1500:	ff 27       	eor	r31, r31
    1502:	e7 51       	subi	r30, 0x17	; 23
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	10 82       	st	Z, r1
		Inc_Stdin_StringPushIndex();
    1508:	0e 94 b4 09 	call	0x1368 <Inc_Stdin_StringPushIndex>
    150c:	21 96       	adiw	r28, 0x01	; 1
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <F_User_Entry>:
    1522:	1f 93       	push	r17
    1524:	10 91 06 01 	lds	r17, 0x0106
    1528:	85 e9       	ldi	r24, 0x95	; 149
    152a:	94 e0       	ldi	r25, 0x04	; 4
    152c:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1530:	10 92 06 01 	sts	0x0106, r1
    1534:	0e 94 d1 09 	call	0x13a2 <STDIN_Get_String>
    1538:	10 93 06 01 	sts	0x0106, r17
    153c:	1f 91       	pop	r17
    153e:	08 95       	ret

00001540 <Inc_Stdin_StringPopIndex>:
    1540:	80 91 95 02 	lds	r24, 0x0295
    1544:	8f 5f       	subi	r24, 0xFF	; 255
    1546:	80 93 95 02 	sts	0x0295, r24
    154a:	85 38       	cpi	r24, 0x85	; 133
    154c:	10 f0       	brcs	.+4      	; 0x1552 <Inc_Stdin_StringPopIndex+0x12>
    154e:	10 92 95 02 	sts	0x0295, r1
    1552:	08 95       	ret

00001554 <STDIN_Parse_String>:
		}
	}

/* --- 'STDIN_Parse_String()' ---
 *
 * When an STDIN string is acquired by 'STDIN_Get_String()' into the RAM ring buffer 'stdin_StringRingBuffer'
 * the string is PARSED into Token(s) and Token(s) pointers are stored in another RAM ring buffer named
 * 'stdin_TokenPointersRingBuffer' where the Forth INTERPRETER interpret in place the STDIN input Token(s) stream.
 */
void STDIN_Parse_String(void)
	{
    1554:	cf 93       	push	r28
	s8    c, inToken = 0;
    1556:	c0 e0       	ldi	r28, 0x00	; 0
	// Parser operate always on RAM string in the 'stdin_StringRingBuffer'
	while (stdin_StringPopIndex != stdin_StringPushIndex)
		{
		c = stdin_StringRingBuffer[stdin_StringPopIndex];
		if (c <= 0)
			break;
		if (inToken == 0)
			{
			if (c <= ' ')
				stdin_StringRingBuffer[stdin_StringPopIndex] = '\0';
			else
				{
				++inToken;
				if (parser_NextIndex >= MAX_TOKEN_POINTERS_IN_THE_PARSER_RING_BUFFER)
					parser_NextIndex = 0;
				stdin_TokenPointersRingBuffer[parser_NextIndex++] = &stdin_StringRingBuffer[stdin_StringPopIndex];
				}
			}
		else
			{
			if (c <= ' ')
				{
				inToken = 0;
				stdin_StringRingBuffer[stdin_StringPopIndex] = '\0';
				}
			}
		Inc_Stdin_StringPopIndex();
    1558:	90 91 95 02 	lds	r25, 0x0295
    155c:	80 91 03 01 	lds	r24, 0x0103
    1560:	98 17       	cp	r25, r24
    1562:	49 f1       	breq	.+82     	; 0x15b6 <STDIN_Parse_String+0x62>
    1564:	80 91 95 02 	lds	r24, 0x0295
    1568:	a8 2f       	mov	r26, r24
    156a:	bb 27       	eor	r27, r27
    156c:	a7 51       	subi	r26, 0x17	; 23
    156e:	be 4f       	sbci	r27, 0xFE	; 254
    1570:	8c 91       	ld	r24, X
    1572:	18 16       	cp	r1, r24
    1574:	04 f5       	brge	.+64     	; 0x15b6 <STDIN_Parse_String+0x62>
    1576:	cc 23       	and	r28, r28
    1578:	b9 f4       	brne	.+46     	; 0x15a8 <STDIN_Parse_String+0x54>
    157a:	81 32       	cpi	r24, 0x21	; 33
    157c:	c4 f0       	brlt	.+48     	; 0x15ae <STDIN_Parse_String+0x5a>
    157e:	c1 e0       	ldi	r28, 0x01	; 1
    1580:	80 91 04 01 	lds	r24, 0x0104
    1584:	80 34       	cpi	r24, 0x40	; 64
    1586:	10 f0       	brcs	.+4      	; 0x158c <STDIN_Parse_String+0x38>
    1588:	10 92 04 01 	sts	0x0104, r1
    158c:	80 91 04 01 	lds	r24, 0x0104
    1590:	e8 2f       	mov	r30, r24
    1592:	ff 27       	eor	r31, r31
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	ec 59       	subi	r30, 0x9C	; 156
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	b1 83       	std	Z+1, r27	; 0x01
    159e:	a0 83       	st	Z, r26
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	80 93 04 01 	sts	0x0104, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <STDIN_Parse_String+0x5c>
    15a8:	81 32       	cpi	r24, 0x21	; 33
    15aa:	14 f4       	brge	.+4      	; 0x15b0 <STDIN_Parse_String+0x5c>
    15ac:	c0 e0       	ldi	r28, 0x00	; 0
    15ae:	cc 93       	st	X, r28
    15b0:	0e 94 a0 0a 	call	0x1540 <Inc_Stdin_StringPopIndex>
    15b4:	d1 cf       	rjmp	.-94     	; 0x1558 <STDIN_Parse_String+0x4>
		}
	stdin_StringRingBuffer[stdin_StringPopIndex] = '\0';
    15b6:	80 91 95 02 	lds	r24, 0x0295
    15ba:	e8 2f       	mov	r30, r24
    15bc:	ff 27       	eor	r31, r31
    15be:	e7 51       	subi	r30, 0x17	; 23
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	10 82       	st	Z, r1
	Inc_Stdin_StringPopIndex();
    15c4:	0e 94 a0 0a 	call	0x1540 <Inc_Stdin_StringPopIndex>
	resCode = READY;
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	80 93 05 01 	sts	0x0105, r24
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <Forth_Interpreter>:
	}

/* --- 'Forth_Interpreter()' ---
 *
 * When a call to 'STDIN_Get_String()' return a ready string in the 'stdin_StringRingBuffer' from the STDIN current
 * channel, the Forth INTERPRETER call the 'STDIN_Parse_String()' to parse Token(s) on 'stdin_TokenPointersRingBuffer'
 * where the Forth INTERPRETER interpret the STDIN input Token(s) stream.
 * Any Token can be a NUMBER, a STRING pointer or a Forth WORD that Forth INTERPRETER process ... then it call
 * 'STDIN_Get_String()' for a next STDIN string ... call 'STDIN_Parse_String()' when a string is ready, interpret and
 * execute the new Token(s) ... and so on.
 */

// 'forth_StateFlags' flags
#define EXEC_ALL_WORDS                    0x00
#define SKIP_NOT_ALWAYS_EXECUTABLE_WORDS  0x01
#define DO_LOOP_BREAK                     0x02

s8 forth_StateFlags;                    // default EXEC_ALL_WORDS
s8 forth_Branching;
s8 forth_ElseEndifSkiping;

void Forth_Interpreter(void)
	{
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
	u8          forth_Dictionary_Index;    // current builtin Dictionary index
	C_FUNC      forth_C_Func;              // dictionary called C Command Function
	PGM_P       forth_STR;                 // pointer to current dictionary 'forth_STR'
	u8          forth_ExcecutionFlag;      // if set to EXEC_ALWAYS_MASK unconditionally executed this word,
														// else the word is executed only if 'forth_StateFlags == EXEC_ALL_TOKENS'
	s8          *current_Token;            // current pointer into Token(s) Ring Buffer


	// Get next string from current 'forth_Interpreter_Stdin_Channel'
	STDIN_Get_String();
    15dc:	0e 94 d1 09 	call	0x13a2 <STDIN_Get_String>
	if (resCode == READY)
    15e0:	80 91 05 01 	lds	r24, 0x0105
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	09 f0       	breq	.+2      	; 0x15ea <Forth_Interpreter+0x18>
    15e8:	fb c0       	rjmp	.+502    	; 0x17e0 <Forth_Interpreter+0x20e>
		{
		// Parse the new string into 'stdin_TokenPointersRingBuffer'
		STDIN_Parse_String();
    15ea:	0e 94 aa 0a 	call	0x1554 <STDIN_Parse_String>
		if (resCode == READY)
    15ee:	80 91 05 01 	lds	r24, 0x0105
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <Forth_Interpreter+0x26>
    15f6:	f4 c0       	rjmp	.+488    	; 0x17e0 <Forth_Interpreter+0x20e>
			{
			// Interpret all incoming Token(s)
			while (resCode == READY)
				{
				current_Token = stdin_TokenPointersRingBuffer[forth_CurrentIndex];
    15f8:	80 91 93 02 	lds	r24, 0x0293
    15fc:	e8 2f       	mov	r30, r24
    15fe:	ff 27       	eor	r31, r31
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	ec 59       	subi	r30, 0x9C	; 156
    1606:	fe 4f       	sbci	r31, 0xFE	; 254
    1608:	c0 81       	ld	r28, Z
    160a:	d1 81       	ldd	r29, Z+1	; 0x01
				if (forth_CurrentIndex == parser_NextIndex)
    160c:	90 91 04 01 	lds	r25, 0x0104
    1610:	89 17       	cp	r24, r25
    1612:	41 f4       	brne	.+16     	; 0x1624 <Forth_Interpreter+0x52>
					{
					resCode = CONTINUE;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 05 01 	sts	0x0105, r24
					USART_PutFlashString(PSTR("\r\r>"));
    161a:	8d e9       	ldi	r24, 0x9D	; 157
    161c:	94 e0       	ldi	r25, 0x04	; 4
    161e:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
					break;
    1622:	de c0       	rjmp	.+444    	; 0x17e0 <Forth_Interpreter+0x20e>
					}

				if (debug)
    1624:	80 91 4d 01 	lds	r24, 0x014D
    1628:	88 23       	and	r24, r24
    162a:	a1 f0       	breq	.+40     	; 0x1654 <Forth_Interpreter+0x82>
					{
					// Display the current Token (can be a Word, a Number or a String)
					USART_PutFlashString(PSTR("\r["));
    162c:	81 ea       	ldi	r24, 0xA1	; 161
    162e:	94 e0       	ldi	r25, 0x04	; 4
    1630:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
					USART_PutRamString(stdin_TokenPointersRingBuffer[forth_CurrentIndex]);
    1634:	80 91 93 02 	lds	r24, 0x0293
    1638:	e8 2f       	mov	r30, r24
    163a:	ff 27       	eor	r31, r31
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ec 59       	subi	r30, 0x9C	; 156
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	0e 94 d2 03 	call	0x7a4 <USART_PutRamString>
					USART_PutFlashString(PSTR("] "));
    164c:	84 ea       	ldi	r24, 0xA4	; 164
    164e:	94 e0       	ldi	r25, 0x04	; 4
    1650:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
					}

				if (isdigit(current_Token[0]))
    1654:	08 81       	ld	r16, Y
    1656:	80 2f       	mov	r24, r16
    1658:	99 27       	eor	r25, r25
    165a:	87 fd       	sbrc	r24, 7
    165c:	90 95       	com	r25
    165e:	0e 94 52 0d 	call	0x1aa4 <isdigit>
    1662:	89 2b       	or	r24, r25
    1664:	39 f1       	breq	.+78     	; 0x16b4 <Forth_Interpreter+0xe2>
					{
					// Token NUMBER start with a digit character ...
					// ... then convert to 's16' number based on current number BASE ...
					// ... and push it on the Interpreter DATA STACK
					if (forth_StateFlags == EXEC_ALL_WORDS)
    1666:	80 91 62 01 	lds	r24, 0x0162
    166a:	88 23       	and	r24, r24
    166c:	09 f0       	breq	.+2      	; 0x1670 <Forth_Interpreter+0x9e>
    166e:	a2 c0       	rjmp	.+324    	; 0x17b4 <Forth_Interpreter+0x1e2>
						{
						if (dataTOS < (DATA_STACK_MAX_ENTRIES-1))
    1670:	40 91 0a 01 	lds	r20, 0x010A
    1674:	4f 30       	cpi	r20, 0x0F	; 15
    1676:	08 f0       	brcs	.+2      	; 0x167a <Forth_Interpreter+0xa8>
    1678:	98 c0       	rjmp	.+304    	; 0x17aa <Forth_Interpreter+0x1d8>
							{
							if (numberBase == 10)
    167a:	80 91 5a 01 	lds	r24, 0x015A
    167e:	90 91 5b 01 	lds	r25, 0x015B
    1682:	24 2f       	mov	r18, r20
    1684:	33 27       	eor	r19, r19
    1686:	4f 5f       	subi	r20, 0xFF	; 255
    1688:	0a 97       	sbiw	r24, 0x0a	; 10
    168a:	59 f4       	brne	.+22     	; 0x16a2 <Forth_Interpreter+0xd0>
								dataSTACK[dataTOS++] = atoi (current_Token);
    168c:	89 01       	movw	r16, r18
    168e:	02 0f       	add	r16, r18
    1690:	13 1f       	adc	r17, r19
    1692:	0e 58       	subi	r16, 0x8E	; 142
    1694:	1d 4f       	sbci	r17, 0xFD	; 253
    1696:	40 93 0a 01 	sts	0x010A, r20
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 67 0c 	call	0x18ce <atoi>
    16a0:	22 c0       	rjmp	.+68     	; 0x16e6 <Forth_Interpreter+0x114>
							else
								dataSTACK[dataTOS++] = xtoi (current_Token);
    16a2:	89 01       	movw	r16, r18
    16a4:	02 0f       	add	r16, r18
    16a6:	13 1f       	adc	r17, r19
    16a8:	0e 58       	subi	r16, 0x8E	; 142
    16aa:	1d 4f       	sbci	r17, 0xFD	; 253
    16ac:	40 93 0a 01 	sts	0x010A, r20
    16b0:	ce 01       	movw	r24, r28
    16b2:	17 c0       	rjmp	.+46     	; 0x16e2 <Forth_Interpreter+0x110>
							}
						else
							Error(STACK_FULL);
						}
					}
				else if (current_Token[0] == '\\')
    16b4:	0c 35       	cpi	r16, 0x5C	; 92
    16b6:	d9 f4       	brne	.+54     	; 0x16ee <Forth_Interpreter+0x11c>
					{
					// Token EXADECIMAL CHARACTER CODE start with a '\' character ...
					// ... push it's 'hexadecimal escape code' on the Interpreter DATA STACK independently of current BASE for numbers
					if (forth_StateFlags == EXEC_ALL_WORDS)
    16b8:	80 91 62 01 	lds	r24, 0x0162
    16bc:	88 23       	and	r24, r24
    16be:	09 f0       	breq	.+2      	; 0x16c2 <Forth_Interpreter+0xf0>
    16c0:	79 c0       	rjmp	.+242    	; 0x17b4 <Forth_Interpreter+0x1e2>
						{
						if (dataTOS < (DATA_STACK_MAX_ENTRIES-1))
    16c2:	90 91 0a 01 	lds	r25, 0x010A
    16c6:	9f 30       	cpi	r25, 0x0F	; 15
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <Forth_Interpreter+0xfa>
    16ca:	6f c0       	rjmp	.+222    	; 0x17aa <Forth_Interpreter+0x1d8>
							dataSTACK[dataTOS++] = xtoi (current_Token + 1);
    16cc:	09 2f       	mov	r16, r25
    16ce:	11 27       	eor	r17, r17
    16d0:	00 0f       	add	r16, r16
    16d2:	11 1f       	adc	r17, r17
    16d4:	0e 58       	subi	r16, 0x8E	; 142
    16d6:	1d 4f       	sbci	r17, 0xFD	; 253
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	90 93 0a 01 	sts	0x010A, r25
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 f6 03 	call	0x7ec <xtoi>
    16e6:	f8 01       	movw	r30, r16
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	63 c0       	rjmp	.+198    	; 0x17b4 <Forth_Interpreter+0x1e2>
						else
							Error(STACK_FULL);
						}
					}
				else if (current_Token[0] == '"')
    16ee:	02 32       	cpi	r16, 0x22	; 34
    16f0:	49 f5       	brne	.+82     	; 0x1744 <Forth_Interpreter+0x172>
					{
					// Token STRING start with a " character ...
					// ... push it's address on the Interpreter DATA STACK
					if (forth_StateFlags == EXEC_ALL_WORDS)
    16f2:	80 91 62 01 	lds	r24, 0x0162
    16f6:	88 23       	and	r24, r24
    16f8:	09 f0       	breq	.+2      	; 0x16fc <Forth_Interpreter+0x12a>
    16fa:	5c c0       	rjmp	.+184    	; 0x17b4 <Forth_Interpreter+0x1e2>
						{
						if (dataTOS < (DATA_STACK_MAX_ENTRIES-1))
    16fc:	90 91 0a 01 	lds	r25, 0x010A
    1700:	9f 30       	cpi	r25, 0x0F	; 15
    1702:	08 f0       	brcs	.+2      	; 0x1706 <Forth_Interpreter+0x134>
    1704:	52 c0       	rjmp	.+164    	; 0x17aa <Forth_Interpreter+0x1d8>
							dataSTACK[dataTOS++] = (s16)(current_Token + 1);
    1706:	e9 2f       	mov	r30, r25
    1708:	ff 27       	eor	r31, r31
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 58       	subi	r30, 0x8E	; 142
    1710:	fd 4f       	sbci	r31, 0xFD	; 253
    1712:	21 96       	adiw	r28, 0x01	; 1
    1714:	d1 83       	std	Z+1, r29	; 0x01
    1716:	c0 83       	st	Z, r28
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	90 93 0a 01 	sts	0x010A, r25
    171e:	4a c0       	rjmp	.+148    	; 0x17b4 <Forth_Interpreter+0x1e2>
						else
							Error(STACK_FULL);
						}
					}
				else
					{
					// if not NUMBER or STRING ...
					// ... then search if it's defined, CASE INSENSITIVE, into the Forth BUILTIN DICTIONARY ...
					forth_Dictionary_Index = 0;
					do {
						forth_STR = (PGM_P)(pgm_read_word(&forth_DICT[forth_Dictionary_Index].forth_STR));
						if (forth_STR)
							{
							if (strcasecmp_P(stdin_TokenPointersRingBuffer[forth_CurrentIndex], forth_STR) == 0)
								{
								forth_C_Func = (C_FUNC)(pgm_read_word(&forth_DICT[forth_Dictionary_Index].forth_C_Func));
								forth_ExcecutionFlag = pgm_read_byte(&forth_DICT[forth_Dictionary_Index].forth_ExcecutionFlag);
								if (forth_StateFlags == EXEC_ALL_WORDS)
									{
									if (forth_ExcecutionFlag & EMBEDDED_SOURCE_MASK)
										{ // parse the EMBEDDED Forth SOURCE string in FLASH and Continue
										forth_Interpreter_Stdin_Channel = FLASH_STDIN;
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	80 93 06 01 	sts	0x0106, r24
										forth_Interpreter_Stdin_MemoryAddress = (s8 *)(forth_C_Func);
    1726:	30 93 71 02 	sts	0x0271, r19
    172a:	20 93 70 02 	sts	0x0270, r18
										STDIN_Get_String();
    172e:	0e 94 d1 09 	call	0x13a2 <STDIN_Get_String>
										forth_Interpreter_Stdin_Channel = TERMINAL_STDIN;
    1732:	c0 93 06 01 	sts	0x0106, r28
										forth_Interpreter_Stdin_MemoryAddress = NULL;
    1736:	10 93 71 02 	sts	0x0271, r17
    173a:	00 93 70 02 	sts	0x0270, r16
										STDIN_Parse_String();
    173e:	0e 94 aa 0a 	call	0x1554 <STDIN_Parse_String>
    1742:	38 c0       	rjmp	.+112    	; 0x17b4 <Forth_Interpreter+0x1e2>
    1744:	ff 24       	eor	r15, r15
    1746:	85 e0       	ldi	r24, 0x05	; 5
    1748:	f8 9e       	mul	r15, r24
    174a:	e0 01       	movw	r28, r0
    174c:	11 24       	eor	r1, r1
    174e:	fe 01       	movw	r30, r28
    1750:	e4 5a       	subi	r30, 0xA4	; 164
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	65 91       	lpm	r22, Z+
    1756:	74 91       	lpm	r23, Z
    1758:	61 15       	cp	r22, r1
    175a:	71 05       	cpc	r23, r1
    175c:	29 f1       	breq	.+74     	; 0x17a8 <Forth_Interpreter+0x1d6>
    175e:	80 91 93 02 	lds	r24, 0x0293
    1762:	e8 2f       	mov	r30, r24
    1764:	ff 27       	eor	r31, r31
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	ec 59       	subi	r30, 0x9C	; 156
    176c:	fe 4f       	sbci	r31, 0xFE	; 254
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	0e 94 94 0c 	call	0x1928 <strcasecmp_P>
    1776:	8c 01       	movw	r16, r24
    1778:	89 2b       	or	r24, r25
    177a:	d1 f4       	brne	.+52     	; 0x17b0 <Forth_Interpreter+0x1de>
    177c:	fe 01       	movw	r30, r28
    177e:	e2 5a       	subi	r30, 0xA2	; 162
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	25 91       	lpm	r18, Z+
    1784:	34 91       	lpm	r19, Z
    1786:	fe 01       	movw	r30, r28
    1788:	e0 5a       	subi	r30, 0xA0	; 160
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	84 91       	lpm	r24, Z
    178e:	c0 91 62 01 	lds	r28, 0x0162
    1792:	99 27       	eor	r25, r25
    1794:	cc 23       	and	r28, r28
    1796:	19 f4       	brne	.+6      	; 0x179e <Forth_Interpreter+0x1cc>
    1798:	81 fd       	sbrc	r24, 1
    179a:	c2 cf       	rjmp	.-124    	; 0x1720 <Forth_Interpreter+0x14e>
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <Forth_Interpreter+0x1d0>
										}
									else
										forth_C_Func();        // exec current word
									}
								else
									{
									if (forth_ExcecutionFlag & EXEC_ALWAYS_MASK)
    179e:	80 ff       	sbrs	r24, 0
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <Forth_Interpreter+0x1e2>
										forth_C_Func();        // exec current word
    17a2:	f9 01       	movw	r30, r18
    17a4:	09 95       	icall
									}
								break;
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <Forth_Interpreter+0x1e2>
								}
							}
						else
							{
							Error(WORD_UNKNOWN);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 87 03 	call	0x70e <Error>
							break;
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <Forth_Interpreter+0x1e2>
							}
						++forth_Dictionary_Index;
    17b0:	f3 94       	inc	r15
						} while (1);
    17b2:	c9 cf       	rjmp	.-110    	; 0x1746 <Forth_Interpreter+0x174>
					}

				if (forth_Branching == TRUE)
    17b4:	80 91 63 01 	lds	r24, 0x0163
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	19 f4       	brne	.+6      	; 0x17c2 <Forth_Interpreter+0x1f0>
					// ... then skip next 'forth_CurrentIndex' increment
					forth_Branching = FALSE;
    17bc:	10 92 63 01 	sts	0x0163, r1
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <Forth_Interpreter+0x1fa>
				else
					++forth_CurrentIndex;
    17c2:	80 91 93 02 	lds	r24, 0x0293
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 93 02 	sts	0x0293, r24

				// Do a user STEP or PAUSE/EXIT behaviour
				if (step)
    17cc:	80 91 92 02 	lds	r24, 0x0292
    17d0:	88 23       	and	r24, r24
    17d2:	19 f0       	breq	.+6      	; 0x17da <Forth_Interpreter+0x208>
					F_Pause();
    17d4:	0e 94 8b 09 	call	0x1316 <F_Pause>
    17d8:	0a cf       	rjmp	.-492    	; 0x15ee <Forth_Interpreter+0x1c>
				else
					F_CheckPause();
    17da:	0e 94 a9 09 	call	0x1352 <F_CheckPause>
    17de:	07 cf       	rjmp	.-498    	; 0x15ee <Forth_Interpreter+0x1c>
				}
			}
		}
	if (resCode == EXIT)
    17e0:	80 91 05 01 	lds	r24, 0x0105
    17e4:	8f 3f       	cpi	r24, 0xFF	; 255
    17e6:	21 f5       	brne	.+72     	; 0x1830 <Forth_Interpreter+0x25e>
		{
		// Restart the Forth INTERPRETER
		forth_StateFlags = EXEC_ALL_WORDS;
    17e8:	10 92 62 01 	sts	0x0162, r1
		dataTOS = 0;
    17ec:	10 92 0a 01 	sts	0x010A, r1
		returnTOS = 0;
    17f0:	10 92 e7 01 	sts	0x01E7, r1

		// Set the STDIN current channel in use
		forth_Interpreter_Stdin_Channel = TERMINAL_STDIN;
    17f4:	10 92 06 01 	sts	0x0106, r1
		forth_Interpreter_Stdin_MemoryAddress = NULL;
    17f8:	10 92 71 02 	sts	0x0271, r1
    17fc:	10 92 70 02 	sts	0x0270, r1

		// Clear system RING buffers and variables
		memset(stdin_TokenPointersRingBuffer, 0, sizeof(stdin_TokenPointersRingBuffer));
    1800:	80 e8       	ldi	r24, 0x80	; 128
    1802:	e4 e6       	ldi	r30, 0x64	; 100
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    1806:	11 92       	st	Z+, r1
    1808:	8a 95       	dec	r24
    180a:	e9 f7       	brne	.-6      	; 0x1806 <Forth_Interpreter+0x234>
		memset(stdin_StringRingBuffer, 0, sizeof(stdin_StringRingBuffer));
    180c:	86 e8       	ldi	r24, 0x86	; 134
    180e:	e9 ee       	ldi	r30, 0xE9	; 233
    1810:	f1 e0       	ldi	r31, 0x01	; 1
    1812:	11 92       	st	Z+, r1
    1814:	8a 95       	dec	r24
    1816:	e9 f7       	brne	.-6      	; 0x1812 <Forth_Interpreter+0x240>
		parser_NextIndex = forth_CurrentIndex = 0;
    1818:	10 92 93 02 	sts	0x0293, r1
    181c:	10 92 04 01 	sts	0x0104, r1
		stdin_StringPushIndex = stdin_StringPopIndex = 0;
    1820:	10 92 95 02 	sts	0x0295, r1
    1824:	10 92 03 01 	sts	0x0103, r1
		USART_PutFlashString(PSTR("\r\r>"));
    1828:	87 ea       	ldi	r24, 0xA7	; 167
    182a:	94 e0       	ldi	r25, 0x04	; 4
    182c:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	08 95       	ret

0000183c <__vector_5>:
		}
	}

//=========================================================================================================================
#endif // STDIO_USED



//==============================================================================================================================
//                         APPLICATION is Driven by RTC Timer and Peripherals Interrupts
//==============================================================================================================================

// SX Timer Interrupt Tick occurs any MSEC_SYSTEM_TICK (running from the RTC 32.768kHz crystal)
ISR(TIMER2_OVF_vect)
	{
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
	//--- Do Timing Services based on MSEC_SYSTEM_TICK ---
	#if STDIO_USED
	 Forth_Interpreter();
    185e:	0e 94 e9 0a 	call	0x15d2 <Forth_Interpreter>
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <main>:
	#endif
	}

s16 main( void )
	{
    1884:	cf ef       	ldi	r28, 0xFF	; 255
    1886:	d4 e0       	ldi	r29, 0x04	; 4
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	cd bf       	out	0x3d, r28	; 61
	// calibrate the OSCCAL byte
	OSCCAL_calibration();
    188c:	0e 94 97 02 	call	0x52e <OSCCAL_calibration>
	// set Clock Prescaler Change Enable
	CLKPR = (1<<CLKPCE);
    1890:	80 e8       	ldi	r24, 0x80	; 128
    1892:	80 93 61 00 	sts	0x0061, r24
	// set prescaler = 8, Internal RC 8MHz / 8 = 1MHz
	CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	80 93 61 00 	sts	0x0061, r24

	// SX Timer Interrupt Tick occurs any MSEC_SYSTEM_TICK, running from the 32.768kHz crystal on Asyncronous Timer 2
	RTC_init();
    189c:	0e 94 fc 02 	call	0x5f8 <RTC_init>

	#if STDIO_USED
	 // UBRR = Fosc / (8 * baud) - 1 ... for U2XN=1, page 172 and 195 of ATmega169V(P)
	 USART_Init(12);  // UBRR for 'baudrate' 9600bps N81 at 1MHZ
    18a0:	8c e0       	ldi	r24, 0x0C	; 12
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 4c 03 	call	0x698 <USART_Init>
	 USART_PutFlashString(PSTR("\rAVR SX-Forth 20060713 [V.Foresto - Comm.SEC]\r\r>"));
    18a8:	8b ea       	ldi	r24, 0xAB	; 171
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 65 03 	call	0x6ca <USART_PutFlashString>
	 numberBase = EXADECIMAL;
    18b0:	80 e1       	ldi	r24, 0x10	; 16
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 93 5b 01 	sts	0x015B, r25
    18b8:	80 93 5a 01 	sts	0x015A, r24
	#endif

	sei();
    18bc:	78 94       	sei

	while (1)
		{
		sleep_mode();
    18be:	83 b7       	in	r24, 0x33	; 51
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	83 bf       	out	0x33, r24	; 51
    18c4:	88 95       	sleep
    18c6:	83 b7       	in	r24, 0x33	; 51
    18c8:	8e 7f       	andi	r24, 0xFE	; 254
    18ca:	83 bf       	out	0x33, r24	; 51
    18cc:	f8 cf       	rjmp	.-16     	; 0x18be <main+0x3a>

000018ce <atoi>:
    18ce:	fc 01       	movw	r30, r24
    18d0:	88 27       	eor	r24, r24
    18d2:	99 27       	eor	r25, r25
    18d4:	e8 94       	clt
    18d6:	21 91       	ld	r18, Z+
    18d8:	22 23       	and	r18, r18
    18da:	f1 f0       	breq	.+60     	; 0x1918 <atoi+0x4a>
    18dc:	20 32       	cpi	r18, 0x20	; 32
    18de:	d9 f3       	breq	.-10     	; 0x18d6 <atoi+0x8>
    18e0:	29 30       	cpi	r18, 0x09	; 9
    18e2:	c9 f3       	breq	.-14     	; 0x18d6 <atoi+0x8>
    18e4:	2a 30       	cpi	r18, 0x0A	; 10
    18e6:	b9 f3       	breq	.-18     	; 0x18d6 <atoi+0x8>
    18e8:	2c 30       	cpi	r18, 0x0C	; 12
    18ea:	a9 f3       	breq	.-22     	; 0x18d6 <atoi+0x8>
    18ec:	2d 30       	cpi	r18, 0x0D	; 13
    18ee:	99 f3       	breq	.-26     	; 0x18d6 <atoi+0x8>
    18f0:	26 37       	cpi	r18, 0x76	; 118
    18f2:	89 f3       	breq	.-30     	; 0x18d6 <atoi+0x8>
    18f4:	2b 32       	cpi	r18, 0x2B	; 43
    18f6:	19 f0       	breq	.+6      	; 0x18fe <atoi+0x30>
    18f8:	2d 32       	cpi	r18, 0x2D	; 45
    18fa:	21 f4       	brne	.+8      	; 0x1904 <atoi+0x36>
    18fc:	68 94       	set
    18fe:	21 91       	ld	r18, Z+
    1900:	22 23       	and	r18, r18
    1902:	51 f0       	breq	.+20     	; 0x1918 <atoi+0x4a>
    1904:	20 33       	cpi	r18, 0x30	; 48
    1906:	44 f0       	brlt	.+16     	; 0x1918 <atoi+0x4a>
    1908:	2a 33       	cpi	r18, 0x3A	; 58
    190a:	34 f4       	brge	.+12     	; 0x1918 <atoi+0x4a>
    190c:	20 53       	subi	r18, 0x30	; 48
    190e:	0e 94 d2 0c 	call	0x19a4 <__mulhi_const_10>
    1912:	82 0f       	add	r24, r18
    1914:	91 1d       	adc	r25, r1
    1916:	f3 cf       	rjmp	.-26     	; 0x18fe <atoi+0x30>
    1918:	81 15       	cp	r24, r1
    191a:	91 05       	cpc	r25, r1
    191c:	21 f0       	breq	.+8      	; 0x1926 <atoi+0x58>
    191e:	1e f4       	brtc	.+6      	; 0x1926 <atoi+0x58>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	08 95       	ret

00001928 <strcasecmp_P>:
    1928:	fb 01       	movw	r30, r22
    192a:	dc 01       	movw	r26, r24
    192c:	8d 91       	ld	r24, X+
    192e:	05 90       	lpm	r0, Z+
    1930:	60 2d       	mov	r22, r0
    1932:	50 2d       	mov	r21, r0
    1934:	50 62       	ori	r21, 0x20	; 32
    1936:	51 36       	cpi	r21, 0x61	; 97
    1938:	24 f0       	brlt	.+8      	; 0x1942 <strcasecmp_P+0x1a>
    193a:	5b 37       	cpi	r21, 0x7B	; 123
    193c:	14 f4       	brge	.+4      	; 0x1942 <strcasecmp_P+0x1a>
    193e:	60 62       	ori	r22, 0x20	; 32
    1940:	80 62       	ori	r24, 0x20	; 32
    1942:	86 1b       	sub	r24, r22
    1944:	11 f4       	brne	.+4      	; 0x194a <strcasecmp_P+0x22>
    1946:	00 20       	and	r0, r0
    1948:	89 f7       	brne	.-30     	; 0x192c <strcasecmp_P+0x4>
    194a:	99 0b       	sbc	r25, r25
    194c:	08 95       	ret

0000194e <strcmp_P>:
    194e:	fb 01       	movw	r30, r22
    1950:	dc 01       	movw	r26, r24
    1952:	8d 91       	ld	r24, X+
    1954:	05 90       	lpm	r0, Z+
    1956:	80 19       	sub	r24, r0
    1958:	11 f4       	brne	.+4      	; 0x195e <strcmp_P+0x10>
    195a:	00 20       	and	r0, r0
    195c:	d1 f7       	brne	.-12     	; 0x1952 <strcmp_P+0x4>
    195e:	99 0b       	sbc	r25, r25
    1960:	08 95       	ret

00001962 <itoa>:
    1962:	fb 01       	movw	r30, r22
    1964:	9f 01       	movw	r18, r30
    1966:	e8 94       	clt
    1968:	42 30       	cpi	r20, 0x02	; 2
    196a:	c4 f0       	brlt	.+48     	; 0x199c <itoa+0x3a>
    196c:	45 32       	cpi	r20, 0x25	; 37
    196e:	b4 f4       	brge	.+44     	; 0x199c <itoa+0x3a>
    1970:	4a 30       	cpi	r20, 0x0A	; 10
    1972:	29 f4       	brne	.+10     	; 0x197e <itoa+0x1c>
    1974:	97 fb       	bst	r25, 7
    1976:	1e f4       	brtc	.+6      	; 0x197e <itoa+0x1c>
    1978:	90 95       	com	r25
    197a:	81 95       	neg	r24
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	64 2f       	mov	r22, r20
    1980:	77 27       	eor	r23, r23
    1982:	0e 94 3e 0d 	call	0x1a7c <__udivmodhi4>
    1986:	80 5d       	subi	r24, 0xD0	; 208
    1988:	8a 33       	cpi	r24, 0x3A	; 58
    198a:	0c f0       	brlt	.+2      	; 0x198e <itoa+0x2c>
    198c:	89 5d       	subi	r24, 0xD9	; 217
    198e:	81 93       	st	Z+, r24
    1990:	cb 01       	movw	r24, r22
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	a1 f7       	brne	.-24     	; 0x197e <itoa+0x1c>
    1996:	16 f4       	brtc	.+4      	; 0x199c <itoa+0x3a>
    1998:	5d e2       	ldi	r21, 0x2D	; 45
    199a:	51 93       	st	Z+, r21
    199c:	10 82       	st	Z, r1
    199e:	c9 01       	movw	r24, r18
    19a0:	0c 94 da 0c 	jmp	0x19b4 <strrev>

000019a4 <__mulhi_const_10>:
    19a4:	7a e0       	ldi	r23, 0x0A	; 10
    19a6:	97 9f       	mul	r25, r23
    19a8:	90 2d       	mov	r25, r0
    19aa:	87 9f       	mul	r24, r23
    19ac:	80 2d       	mov	r24, r0
    19ae:	91 0d       	add	r25, r1
    19b0:	11 24       	eor	r1, r1
    19b2:	08 95       	ret

000019b4 <strrev>:
    19b4:	dc 01       	movw	r26, r24
    19b6:	fc 01       	movw	r30, r24
    19b8:	01 90       	ld	r0, Z+
    19ba:	00 20       	and	r0, r0
    19bc:	e9 f7       	brne	.-6      	; 0x19b8 <strrev+0x4>
    19be:	32 97       	sbiw	r30, 0x02	; 2
    19c0:	ae 17       	cp	r26, r30
    19c2:	bf 07       	cpc	r27, r31
    19c4:	30 f4       	brcc	.+12     	; 0x19d2 <strrev+0x1e>
    19c6:	7c 91       	ld	r23, X
    19c8:	60 81       	ld	r22, Z
    19ca:	70 83       	st	Z, r23
    19cc:	31 97       	sbiw	r30, 0x01	; 1
    19ce:	6d 93       	st	X+, r22
    19d0:	f7 cf       	rjmp	.-18     	; 0x19c0 <strrev+0xc>
    19d2:	08 95       	ret

000019d4 <__mulsi3>:
    19d4:	62 9f       	mul	r22, r18
    19d6:	d0 01       	movw	r26, r0
    19d8:	73 9f       	mul	r23, r19
    19da:	f0 01       	movw	r30, r0
    19dc:	82 9f       	mul	r24, r18
    19de:	e0 0d       	add	r30, r0
    19e0:	f1 1d       	adc	r31, r1
    19e2:	64 9f       	mul	r22, r20
    19e4:	e0 0d       	add	r30, r0
    19e6:	f1 1d       	adc	r31, r1
    19e8:	92 9f       	mul	r25, r18
    19ea:	f0 0d       	add	r31, r0
    19ec:	83 9f       	mul	r24, r19
    19ee:	f0 0d       	add	r31, r0
    19f0:	74 9f       	mul	r23, r20
    19f2:	f0 0d       	add	r31, r0
    19f4:	65 9f       	mul	r22, r21
    19f6:	f0 0d       	add	r31, r0
    19f8:	99 27       	eor	r25, r25
    19fa:	72 9f       	mul	r23, r18
    19fc:	b0 0d       	add	r27, r0
    19fe:	e1 1d       	adc	r30, r1
    1a00:	f9 1f       	adc	r31, r25
    1a02:	63 9f       	mul	r22, r19
    1a04:	b0 0d       	add	r27, r0
    1a06:	e1 1d       	adc	r30, r1
    1a08:	f9 1f       	adc	r31, r25
    1a0a:	bd 01       	movw	r22, r26
    1a0c:	cf 01       	movw	r24, r30
    1a0e:	11 24       	eor	r1, r1
    1a10:	08 95       	ret

00001a12 <__divmodhi4>:
    1a12:	97 fb       	bst	r25, 7
    1a14:	09 2e       	mov	r0, r25
    1a16:	07 26       	eor	r0, r23
    1a18:	0a d0       	rcall	.+20     	; 0x1a2e <__divmodhi4_neg1>
    1a1a:	77 fd       	sbrc	r23, 7
    1a1c:	04 d0       	rcall	.+8      	; 0x1a26 <__divmodhi4_neg2>
    1a1e:	2e d0       	rcall	.+92     	; 0x1a7c <__udivmodhi4>
    1a20:	06 d0       	rcall	.+12     	; 0x1a2e <__divmodhi4_neg1>
    1a22:	00 20       	and	r0, r0
    1a24:	1a f4       	brpl	.+6      	; 0x1a2c <__divmodhi4_exit>

00001a26 <__divmodhi4_neg2>:
    1a26:	70 95       	com	r23
    1a28:	61 95       	neg	r22
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a2c <__divmodhi4_exit>:
    1a2c:	08 95       	ret

00001a2e <__divmodhi4_neg1>:
    1a2e:	f6 f7       	brtc	.-4      	; 0x1a2c <__divmodhi4_exit>
    1a30:	90 95       	com	r25
    1a32:	81 95       	neg	r24
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__udivmodsi4>:
    1a38:	a1 e2       	ldi	r26, 0x21	; 33
    1a3a:	1a 2e       	mov	r1, r26
    1a3c:	aa 1b       	sub	r26, r26
    1a3e:	bb 1b       	sub	r27, r27
    1a40:	fd 01       	movw	r30, r26
    1a42:	0d c0       	rjmp	.+26     	; 0x1a5e <__udivmodsi4_ep>

00001a44 <__udivmodsi4_loop>:
    1a44:	aa 1f       	adc	r26, r26
    1a46:	bb 1f       	adc	r27, r27
    1a48:	ee 1f       	adc	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	a2 17       	cp	r26, r18
    1a4e:	b3 07       	cpc	r27, r19
    1a50:	e4 07       	cpc	r30, r20
    1a52:	f5 07       	cpc	r31, r21
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__udivmodsi4_ep>
    1a56:	a2 1b       	sub	r26, r18
    1a58:	b3 0b       	sbc	r27, r19
    1a5a:	e4 0b       	sbc	r30, r20
    1a5c:	f5 0b       	sbc	r31, r21

00001a5e <__udivmodsi4_ep>:
    1a5e:	66 1f       	adc	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	1a 94       	dec	r1
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <__udivmodsi4_loop>
    1a6a:	60 95       	com	r22
    1a6c:	70 95       	com	r23
    1a6e:	80 95       	com	r24
    1a70:	90 95       	com	r25
    1a72:	9b 01       	movw	r18, r22
    1a74:	ac 01       	movw	r20, r24
    1a76:	bd 01       	movw	r22, r26
    1a78:	cf 01       	movw	r24, r30
    1a7a:	08 95       	ret

00001a7c <__udivmodhi4>:
    1a7c:	aa 1b       	sub	r26, r26
    1a7e:	bb 1b       	sub	r27, r27
    1a80:	51 e1       	ldi	r21, 0x11	; 17
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <__udivmodhi4_ep>

00001a84 <__udivmodhi4_loop>:
    1a84:	aa 1f       	adc	r26, r26
    1a86:	bb 1f       	adc	r27, r27
    1a88:	a6 17       	cp	r26, r22
    1a8a:	b7 07       	cpc	r27, r23
    1a8c:	10 f0       	brcs	.+4      	; 0x1a92 <__udivmodhi4_ep>
    1a8e:	a6 1b       	sub	r26, r22
    1a90:	b7 0b       	sbc	r27, r23

00001a92 <__udivmodhi4_ep>:
    1a92:	88 1f       	adc	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	5a 95       	dec	r21
    1a98:	a9 f7       	brne	.-22     	; 0x1a84 <__udivmodhi4_loop>
    1a9a:	80 95       	com	r24
    1a9c:	90 95       	com	r25
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	08 95       	ret

00001aa4 <isdigit>:
    1aa4:	91 11       	cpse	r25, r1
    1aa6:	0a c0       	rjmp	.+20     	; 0x1abc <__ctype_isfalse>
    1aa8:	80 53       	subi	r24, 0x30	; 48
    1aaa:	8a 50       	subi	r24, 0x0A	; 10
    1aac:	e0 f7       	brcc	.-8      	; 0x1aa6 <isdigit+0x2>
    1aae:	08 95       	ret

00001ab0 <toupper>:
    1ab0:	8f 93       	push	r24
    1ab2:	09 d0       	rcall	.+18     	; 0x1ac6 <isalpha>
    1ab4:	8f 91       	pop	r24
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <toupper+0xa>
    1ab8:	8f 7d       	andi	r24, 0xDF	; 223
    1aba:	08 95       	ret

00001abc <__ctype_isfalse>:
    1abc:	99 27       	eor	r25, r25
    1abe:	88 27       	eor	r24, r24

00001ac0 <__ctype_istrue>:
    1ac0:	08 95       	ret

00001ac2 <isupper>:
    1ac2:	85 fd       	sbrc	r24, 5
    1ac4:	fb cf       	rjmp	.-10     	; 0x1abc <__ctype_isfalse>

00001ac6 <isalpha>:
    1ac6:	80 62       	ori	r24, 0x20	; 32

00001ac8 <islower>:
    1ac8:	91 11       	cpse	r25, r1
    1aca:	f8 cf       	rjmp	.-16     	; 0x1abc <__ctype_isfalse>
    1acc:	81 36       	cpi	r24, 0x61	; 97
    1ace:	ec f3       	brlt	.-6      	; 0x1aca <islower+0x2>
    1ad0:	8b 37       	cpi	r24, 0x7B	; 123
    1ad2:	dc f7       	brge	.-10     	; 0x1aca <islower+0x2>
    1ad4:	08 95       	ret
