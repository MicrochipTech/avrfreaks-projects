
pcbot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000408  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000084  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000007c  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001b6  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000148  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00000d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c2  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0c 94 a7 00 	jmp	0x14e	; 0x14e <main>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <right>:
#define TOGGLEBIT(x,b) x^=(1<<b) 	//Toggles the particular bit 


void right(void)   		
{
  ca:	c6 98       	cbi	0x18, 6	; 24
CLEARBIT(PORTB,6);
CLEARBIT(PORTB,5);
  cc:	c5 98       	cbi	0x18, 5	; 24
CLEARBIT(PORTE,3);
  ce:	1b 98       	cbi	0x03, 3	; 3
SETBIT(PORTE,2);
  d0:	1a 9a       	sbi	0x03, 2	; 3
  d2:	08 95       	ret

000000d4 <left>:
}

void left(void)			
{
  d4:	c0 98       	cbi	0x18, 0	; 24
CLEARBIT(PORTB,0);
SETBIT(PORTB,5);
  d6:	c5 9a       	sbi	0x18, 5	; 24
CLEARBIT(PORTE,3);
  d8:	1b 98       	cbi	0x03, 3	; 3
CLEARBIT(PORTE,2);
  da:	1a 98       	cbi	0x03, 2	; 3
  dc:	08 95       	ret

000000de <str>:
}

void str(void)			
{
  de:	c6 98       	cbi	0x18, 6	; 24
CLEARBIT(PORTB,6);
SETBIT(PORTB,5);
  e0:	c5 9a       	sbi	0x18, 5	; 24
CLEARBIT(PORTE,3);
  e2:	1b 98       	cbi	0x03, 3	; 3
SETBIT(PORTE,2);
  e4:	1a 9a       	sbi	0x03, 2	; 3
  e6:	08 95       	ret

000000e8 <back>:
}
void back(void)			
{
  e8:	c5 98       	cbi	0x18, 5	; 24
CLEARBIT(PORTB,5);
SETBIT(PORTB,6);
  ea:	c6 9a       	sbi	0x18, 6	; 24
CLEARBIT(PORTE,2);
  ec:	1a 98       	cbi	0x03, 2	; 3
SETBIT(PORTE,3);
  ee:	1b 9a       	sbi	0x03, 3	; 3
  f0:	08 95       	ret

000000f2 <stop>:
}

void stop(void)
{
  f2:	c6 98       	cbi	0x18, 6	; 24
CLEARBIT(PORTB,6);
CLEARBIT(PORTB,5);
  f4:	c5 98       	cbi	0x18, 5	; 24
CLEARBIT(PORTE,3);
  f6:	1b 98       	cbi	0x03, 3	; 3
CLEARBIT(PORTE,2);
  f8:	1a 98       	cbi	0x03, 2	; 3
  fa:	08 95       	ret

000000fc <uart_init>:
}
void uart_init(void)
{
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 99 00 	sts	0x0099, r24
	UBRR1L=0x67;
	UBRR1H=0x00;
 102:	10 92 98 00 	sts	0x0098, r1
	UCSR1B=0x18;
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 9d 00 	sts	0x009D, r24
 112:	08 95       	ret

00000114 <uart_rec>:
}
unsigned char uart_rec(void)
{
 114:	80 91 9b 00 	lds	r24, 0x009B
 118:	87 ff       	sbrs	r24, 7
 11a:	fc cf       	rjmp	.-8      	; 0x114 <uart_rec>
	while(!(UCSR1A & (1<<RXC)));
	return UDR1;
 11c:	80 91 9c 00 	lds	r24, 0x009C
}
 120:	99 27       	eor	r25, r25
 122:	08 95       	ret

00000124 <trans>:
void trans(unsigned char data)
{
 124:	98 2f       	mov	r25, r24
	while (!(UCSR1A & (1<<UDRE)));
 126:	80 91 9b 00 	lds	r24, 0x009B
 12a:	85 ff       	sbrs	r24, 5
 12c:	fc cf       	rjmp	.-8      	; 0x126 <trans+0x2>
	UDR1=data;
 12e:	90 93 9c 00 	sts	0x009C, r25
 132:	08 95       	ret

00000134 <transtring>:
}
void transtring(char string[100])
{
 134:	fc 01       	movw	r30, r24
 136:	07 c0       	rjmp	.+14     	; 0x146 <transtring+0x12>
 138:	80 91 9b 00 	lds	r24, 0x009B
 13c:	85 ff       	sbrs	r24, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <transtring+0x4>
 140:	90 93 9c 00 	sts	0x009C, r25
 144:	31 96       	adiw	r30, 0x01	; 1
unsigned int n=0;
while(string[n]!='\0')
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	b1 f7       	brne	.-20     	; 0x138 <transtring+0x4>
 14c:	08 95       	ret

0000014e <main>:
{
trans(string[n]);
n++;
}
}
int main(void)
{
 14e:	be 9a       	sbi	0x17, 6	; 23
unsigned char rxd;
//intialize motor ports
SETBIT(DDRB,6);
SETBIT(DDRB,5);
 150:	bd 9a       	sbi	0x17, 5	; 23
SETBIT(DDRE,3);
 152:	13 9a       	sbi	0x02, 3	; 2
SETBIT(DDRE,2);
 154:	12 9a       	sbi	0x02, 2	; 2
CLEARBIT(PORTB,6);
 156:	c6 98       	cbi	0x18, 6	; 24
CLEARBIT(PORTB,5);
 158:	c5 98       	cbi	0x18, 5	; 24
CLEARBIT(PORTE,3);
 15a:	1b 98       	cbi	0x03, 3	; 3
CLEARBIT(PORTE,2);
 15c:	1a 98       	cbi	0x03, 2	; 3
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	80 93 99 00 	sts	0x0099, r24
 164:	10 92 98 00 	sts	0x0098, r1
 168:	88 e1       	ldi	r24, 0x18	; 24
 16a:	80 93 9a 00 	sts	0x009A, r24
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 9d 00 	sts	0x009D, r24

uart_init();


while(1)
{
//recieve function
while(!(CHECKBIT(UCSR1A,RXC1)));  //wait until command is received
 174:	80 91 9b 00 	lds	r24, 0x009B
 178:	87 ff       	sbrs	r24, 7
 17a:	fc cf       	rjmp	.-8      	; 0x174 <main+0x26>
rxd = UDR1;
 17c:	80 91 9c 00 	lds	r24, 0x009C

if(rxd=='f')
 180:	86 36       	cpi	r24, 0x66	; 102
 182:	29 f4       	brne	.+10     	; 0x18e <main+0x40>
	{
	str();
 184:	0e 94 6f 00 	call	0xde	; 0xde <str>
	transtring("\nforward");
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	06 c0       	rjmp	.+12     	; 0x19a <main+0x4c>
	}

else if(rxd=='l')
 18e:	8c 36       	cpi	r24, 0x6C	; 108
 190:	39 f4       	brne	.+14     	; 0x1a0 <main+0x52>
	{
	left();
 192:	0e 94 6a 00 	call	0xd4	; 0xd4 <left>
	transtring("\nleft");
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 9a 00 	call	0x134	; 0x134 <transtring>
 19e:	ea cf       	rjmp	.-44     	; 0x174 <main+0x26>
	}


else if(rxd=='r')
 1a0:	82 37       	cpi	r24, 0x72	; 114
 1a2:	29 f4       	brne	.+10     	; 0x1ae <main+0x60>
	{
	right();
 1a4:	0e 94 65 00 	call	0xca	; 0xca <right>
	transtring("\nright");
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <main+0x4c>
	}
else if(rxd=='b')
 1ae:	82 36       	cpi	r24, 0x62	; 98
 1b0:	29 f4       	brne	.+10     	; 0x1bc <main+0x6e>
	{
	back();
 1b2:	0e 94 74 00 	call	0xe8	; 0xe8 <back>
	transtring("\nback");
 1b6:	86 e1       	ldi	r24, 0x16	; 22
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	ef cf       	rjmp	.-34     	; 0x19a <main+0x4c>
	}
else if(rxd=='s')
 1bc:	83 37       	cpi	r24, 0x73	; 115
 1be:	29 f4       	brne	.+10     	; 0x1ca <main+0x7c>
	{
	stop();
 1c0:	0e 94 79 00 	call	0xf2	; 0xf2 <stop>
	transtring("\nStop");
 1c4:	8c e1       	ldi	r24, 0x1C	; 28
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	e8 cf       	rjmp	.-48     	; 0x19a <main+0x4c>
	}
else
	{
	transtring("\ninvald");
 1ca:	82 e2       	ldi	r24, 0x22	; 34
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 9a 00 	call	0x134	; 0x134 <transtring>
	stop();
 1d2:	0e 94 79 00 	call	0xf2	; 0xf2 <stop>
 1d6:	ce cf       	rjmp	.-100    	; 0x174 <main+0x26>
