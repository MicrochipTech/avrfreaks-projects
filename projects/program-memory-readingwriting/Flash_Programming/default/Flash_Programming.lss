
Flash_Programming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00000462  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   00000062  0000fc00  0000fc00  00000648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000152  00800232  00800232  000006aa  2**0
                  ALLOC
  4 .debug_aranges 00000048  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000012f  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000697  00000000  00000000  00000821  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000024e  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056c  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c4  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034b  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_19>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_30>
  7c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_31>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a2 33       	cpi	r26, 0x32	; 50
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
  ae:	13 e0       	ldi	r17, 0x03	; 3
  b0:	a2 e3       	ldi	r26, 0x32	; 50
  b2:	b2 e0       	ldi	r27, 0x02	; 2
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a4 38       	cpi	r26, 0x84	; 132
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 65 00 	call	0xca	; 0xca <main>
  c2:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <main>:
#include <util/delay.h>

BOOTLOADER_SECTION void write_flash_page(unsigned int FlashAddr, unsigned char *buf);

int main()
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	c0 50       	subi	r28, 0x00	; 0
  d4:	d2 40       	sbci	r29, 0x02	; 2
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[256] = {"This string was written to and read from flash memory by the Flash_Programming program.\r\n"};
  e0:	de 01       	movw	r26, r28
  e2:	11 96       	adiw	r26, 0x01	; 1
  e4:	e1 e3       	ldi	r30, 0x31	; 49
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	8a e5       	ldi	r24, 0x5A	; 90
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x20>
  f2:	86 ea       	ldi	r24, 0xA6	; 166
  f4:	fe 01       	movw	r30, r28
  f6:	e5 5a       	subi	r30, 0xA5	; 165
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	df 01       	movw	r26, r30
  fc:	1d 92       	st	X+, r1
  fe:	8a 95       	dec	r24
 100:	e9 f7       	brne	.-6      	; 0xfc <main+0x32>
	char read_buffer[256];

	asm("SEI");
 102:	78 94       	sei
	uart1_init(UART_BAUD_SELECT(BAUD, F_CPU));
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 c7 01 	call	0x38e	; 0x38e <uart1_init>

	uart1_puts("Writing string to flash.\r\n");
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 14 02 	call	0x428	; 0x428 <uart1_puts>
	write_flash_page(0x6400, buffer);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	94 e6       	ldi	r25, 0x64	; 100
 118:	be 01       	movw	r22, r28
 11a:	6f 5f       	subi	r22, 0xFF	; 255
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <write_flash_page>


	uart1_puts("Reading from flash:\r\n");
 122:	8b e1       	ldi	r24, 0x1B	; 27
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 14 02 	call	0x428	; 0x428 <uart1_puts>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0; i<256; i++)
	{
		read_buffer[i] = pgm_read_byte(0x6400+i);
 12e:	ae 01       	movw	r20, r28
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5e 4f       	sbci	r21, 0xFE	; 254
 134:	20 50       	subi	r18, 0x00	; 0
 136:	3c 49       	sbci	r19, 0x9C	; 156
 138:	f9 01       	movw	r30, r18
 13a:	84 91       	lpm	r24, Z+
 13c:	20 50       	subi	r18, 0x00	; 0
 13e:	34 46       	sbci	r19, 0x64	; 100
 140:	fa 01       	movw	r30, r20
 142:	e2 0f       	add	r30, r18
 144:	f3 1f       	adc	r31, r19
 146:	80 83       	st	Z, r24
	uart1_puts("Writing string to flash.\r\n");
	write_flash_page(0x6400, buffer);


	uart1_puts("Reading from flash:\r\n");
	for(int i=0; i<256; i++)
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	20 30       	cpi	r18, 0x00	; 0
 150:	3f 07       	cpc	r19, r31
 152:	81 f7       	brne	.-32     	; 0x134 <main+0x6a>
	{
		read_buffer[i] = pgm_read_byte(0x6400+i);
	}

	read_buffer[255] = '\0';
 154:	fe 01       	movw	r30, r28
 156:	e0 50       	subi	r30, 0x00	; 0
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	10 82       	st	Z, r1
	uart1_puts(read_buffer);
 15c:	ca 01       	movw	r24, r20
 15e:	0e 94 14 02 	call	0x428	; 0x428 <uart1_puts>
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x98>

00000164 <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 178:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 17a:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 17c:	e0 91 d8 02 	lds	r30, 0x02D8
 180:	ef 5f       	subi	r30, 0xFF	; 255
 182:	e3 78       	andi	r30, 0x83	; 131
    
    if ( tmphead == UART_RxTail ) {
 184:	80 91 d9 02 	lds	r24, 0x02D9
 188:	e8 17       	cp	r30, r24
 18a:	11 f4       	brne	.+4      	; 0x190 <__vector_18+0x2c>
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <__vector_18+0x3c>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 190:	89 2f       	mov	r24, r25
 192:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 194:	e0 93 d8 02 	sts	0x02D8, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ee 5a       	subi	r30, 0xAE	; 174
 19c:	fd 4f       	sbci	r31, 0xFD	; 253
 19e:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 1a0:	80 93 da 02 	sts	0x02DA, r24
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <__vector_19>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1ca:	90 91 d6 02 	lds	r25, 0x02D6
 1ce:	80 91 d7 02 	lds	r24, 0x02D7
 1d2:	98 17       	cp	r25, r24
 1d4:	61 f0       	breq	.+24     	; 0x1ee <__vector_19+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1d6:	e0 91 d7 02 	lds	r30, 0x02D7
 1da:	ef 5f       	subi	r30, 0xFF	; 255
 1dc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 1de:	e0 93 d7 02 	sts	0x02D7, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 5c       	subi	r30, 0xCE	; 206
 1e6:	fd 4f       	sbci	r31, 0xFD	; 253
 1e8:	80 81       	ld	r24, Z
 1ea:	8c b9       	out	0x0c, r24	; 12
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <__vector_19+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 1ee:	55 98       	cbi	0x0a, 5	; 10
    }
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 202:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 204:	10 92 d6 02 	sts	0x02D6, r1
    UART_TxTail = 0;
 208:	10 92 d7 02 	sts	0x02D7, r1
    UART_RxHead = 0;
 20c:	10 92 d8 02 	sts	0x02D8, r1
    UART_RxTail = 0;
 210:	10 92 d9 02 	sts	0x02D9, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 214:	97 ff       	sbrs	r25, 7
 216:	03 c0       	rjmp	.+6      	; 0x21e <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	8b b9       	out	0x0b, r24	; 11
   		baudrate &= ~0x8000;
 21c:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 21e:	30 93 90 00 	sts	0x0090, r19
    UBRR0L = (unsigned char) baudrate;
 222:	29 b9       	out	0x09, r18	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 95 00 	sts	0x0095, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 22e:	08 95       	ret

00000230 <uart_clear_rxbuffer>:

void uart_clear_rxbuffer()
{
	UART_RxHead = 0;
 230:	10 92 d8 02 	sts	0x02D8, r1
    UART_RxTail = 0;
 234:	10 92 d9 02 	sts	0x02D9, r1
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0

	for(int q=0; q<UART_RX_BUFFER_SIZE; q++)
	{
		UART_RxBuf[q] = '\0';
 23c:	fc 01       	movw	r30, r24
 23e:	ee 5a       	subi	r30, 0xAE	; 174
 240:	fd 4f       	sbci	r31, 0xFD	; 253
 242:	10 82       	st	Z, r1
void uart_clear_rxbuffer()
{
	UART_RxHead = 0;
    UART_RxTail = 0;

	for(int q=0; q<UART_RX_BUFFER_SIZE; q++)
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	84 38       	cpi	r24, 0x84	; 132
 248:	91 05       	cpc	r25, r1
 24a:	c1 f7       	brne	.-16     	; 0x23c <uart_clear_rxbuffer+0xc>
	{
		UART_RxBuf[q] = '\0';
	}
}
 24c:	08 95       	ret

0000024e <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 24e:	90 91 d8 02 	lds	r25, 0x02D8
 252:	80 91 d9 02 	lds	r24, 0x02D9
 256:	98 17       	cp	r25, r24
 258:	19 f4       	brne	.+6      	; 0x260 <uart_getc+0x12>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	31 e0       	ldi	r19, 0x01	; 1
 25e:	12 c0       	rjmp	.+36     	; 0x284 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 260:	e0 91 d9 02 	lds	r30, 0x02D9
 264:	ef 5f       	subi	r30, 0xFF	; 255
 266:	e3 78       	andi	r30, 0x83	; 131
    UART_RxTail = tmptail; 
 268:	e0 93 d9 02 	sts	0x02D9, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	ee 5a       	subi	r30, 0xAE	; 174
 270:	fd 4f       	sbci	r31, 0xFD	; 253
 272:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 274:	20 91 da 02 	lds	r18, 0x02DA
 278:	92 2f       	mov	r25, r18
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	ac 01       	movw	r20, r24
 27e:	43 0f       	add	r20, r19
 280:	51 1d       	adc	r21, r1
 282:	9a 01       	movw	r18, r20

}/* uart_getc */
 284:	c9 01       	movw	r24, r18
 286:	08 95       	ret

00000288 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 288:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 28a:	90 91 d6 02 	lds	r25, 0x02D6
 28e:	9f 5f       	subi	r25, 0xFF	; 255
 290:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 292:	80 91 d7 02 	lds	r24, 0x02D7
 296:	98 17       	cp	r25, r24
 298:	e1 f3       	breq	.-8      	; 0x292 <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 29a:	e9 2f       	mov	r30, r25
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ee 5c       	subi	r30, 0xCE	; 206
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 2a4:	90 93 d6 02 	sts	0x02D6, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2a8:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 2aa:	08 95       	ret

000002ac <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	0e 94 44 01 	call	0x288	; 0x288 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 2ba:	88 81       	ld	r24, Y
 2bc:	88 23       	and	r24, r24
 2be:	d1 f7       	brne	.-12     	; 0x2b4 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ec 01       	movw	r28, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
 2ce:	0e 94 44 01 	call	0x288	; 0x288 <uart_putc>
 2d2:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	84 91       	lpm	r24, Z+
 2d8:	88 23       	and	r24, r24
 2da:	c9 f7       	brne	.-14     	; 0x2ce <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 2f6:	90 91 9b 00 	lds	r25, 0x009B
    data = UART1_DATA;
 2fa:	20 91 9c 00 	lds	r18, 0x009C
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 2fe:	e0 91 81 03 	lds	r30, 0x0381
 302:	ef 5f       	subi	r30, 0xFF	; 255
 304:	e3 78       	andi	r30, 0x83	; 131
    
    if ( tmphead == UART1_RxTail ) {
 306:	80 91 82 03 	lds	r24, 0x0382
 30a:	e8 17       	cp	r30, r24
 30c:	11 f4       	brne	.+4      	; 0x312 <__vector_30+0x30>
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	08 c0       	rjmp	.+16     	; 0x322 <__vector_30+0x40>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
 312:	89 2f       	mov	r24, r25
 314:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 316:	e0 93 81 03 	sts	0x0381, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	e5 50       	subi	r30, 0x05	; 5
 31e:	fd 4f       	sbci	r31, 0xFD	; 253
 320:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
 322:	80 93 83 03 	sts	0x0383, r24
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 34c:	90 91 7f 03 	lds	r25, 0x037F
 350:	80 91 80 03 	lds	r24, 0x0380
 354:	98 17       	cp	r25, r24
 356:	69 f0       	breq	.+26     	; 0x372 <__vector_31+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 358:	e0 91 80 03 	lds	r30, 0x0380
 35c:	ef 5f       	subi	r30, 0xFF	; 255
 35e:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 360:	e0 93 80 03 	sts	0x0380, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	e5 52       	subi	r30, 0x25	; 37
 368:	fd 4f       	sbci	r31, 0xFD	; 253
 36a:	80 81       	ld	r24, Z
 36c:	80 93 9c 00 	sts	0x009C, r24
 370:	05 c0       	rjmp	.+10     	; 0x37c <__vector_31+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 372:	80 91 9a 00 	lds	r24, 0x009A
 376:	8f 7d       	andi	r24, 0xDF	; 223
 378:	80 93 9a 00 	sts	0x009A, r24
    }
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <uart1_init>:
Purpose:  initialize UART1 and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
 38e:	9c 01       	movw	r18, r24
    UART1_TxHead = 0;
 390:	10 92 7f 03 	sts	0x037F, r1
    UART1_TxTail = 0;
 394:	10 92 80 03 	sts	0x0380, r1
    UART1_RxHead = 0;
 398:	10 92 81 03 	sts	0x0381, r1
    UART1_RxTail = 0;
 39c:	10 92 82 03 	sts	0x0382, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 3a0:	97 ff       	sbrs	r25, 7
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <uart1_init+0x1e>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	80 93 9b 00 	sts	0x009B, r24
      baudrate &= ~0x8000;
 3aa:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
 3ac:	30 93 98 00 	sts	0x0098, r19
    UBRR1L = (unsigned char) baudrate;
 3b0:	20 93 99 00 	sts	0x0099, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
 3b4:	88 e9       	ldi	r24, 0x98	; 152
 3b6:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	80 93 9d 00 	sts	0x009D, r24
    #endif 
}/* uart_init */
 3c0:	08 95       	ret

000003c2 <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
 3c2:	90 91 81 03 	lds	r25, 0x0381
 3c6:	80 91 82 03 	lds	r24, 0x0382
 3ca:	98 17       	cp	r25, r24
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <uart1_getc+0x12>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	31 e0       	ldi	r19, 0x01	; 1
 3d2:	12 c0       	rjmp	.+36     	; 0x3f8 <uart1_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
 3d4:	e0 91 82 03 	lds	r30, 0x0382
 3d8:	ef 5f       	subi	r30, 0xFF	; 255
 3da:	e3 78       	andi	r30, 0x83	; 131
    UART1_RxTail = tmptail; 
 3dc:	e0 93 82 03 	sts	0x0382, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	e5 50       	subi	r30, 0x05	; 5
 3e4:	fd 4f       	sbci	r31, 0xFD	; 253
 3e6:	30 81       	ld	r19, Z
    
    return (UART1_LastRxError << 8) + data;
 3e8:	20 91 83 03 	lds	r18, 0x0383
 3ec:	92 2f       	mov	r25, r18
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	43 0f       	add	r20, r19
 3f4:	51 1d       	adc	r21, r1
 3f6:	9a 01       	movw	r18, r20

}/* uart1_getc */
 3f8:	c9 01       	movw	r24, r18
 3fa:	08 95       	ret

000003fc <uart1_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart1_putc(unsigned char data)
{
 3fc:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 3fe:	90 91 7f 03 	lds	r25, 0x037F
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 406:	80 91 80 03 	lds	r24, 0x0380
 40a:	98 17       	cp	r25, r24
 40c:	e1 f3       	breq	.-8      	; 0x406 <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 40e:	e9 2f       	mov	r30, r25
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	e5 52       	subi	r30, 0x25	; 37
 414:	fd 4f       	sbci	r31, 0xFD	; 253
 416:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
 418:	90 93 7f 03 	sts	0x037F, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 41c:	80 91 9a 00 	lds	r24, 0x009A
 420:	80 62       	ori	r24, 0x20	; 32
 422:	80 93 9a 00 	sts	0x009A, r24

}/* uart1_putc */
 426:	08 95       	ret

00000428 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	ec 01       	movw	r28, r24
 42e:	03 c0       	rjmp	.+6      	; 0x436 <uart1_puts+0xe>
    while (*s) 
      uart1_putc(*s++);
 430:	21 96       	adiw	r28, 0x01	; 1
 432:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
 436:	88 81       	ld	r24, Y
 438:	88 23       	and	r24, r24
 43a:	d1 f7       	brne	.-12     	; 0x430 <uart1_puts+0x8>
      uart1_putc(*s++);

}/* uart1_puts */
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
 448:	02 c0       	rjmp	.+4      	; 0x44e <uart1_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
 44a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart1_putc>
 44e:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 450:	21 96       	adiw	r28, 0x01	; 1
 452:	84 91       	lpm	r24, Z+
 454:	88 23       	and	r24, r24
 456:	c9 f7       	brne	.-14     	; 0x44a <uart1_puts_p+0x8>
      uart1_putc(c);

}/* uart1_puts_p */
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>

Disassembly of section .bootloader:

0000fc00 <write_flash_page>:
// write_flash_page
// Arguments: FlashAddr is the byte address for the start of the flash page to be written.
//			  buf is the 256 byte array to be written to FlashAddr
/////////////////////////////////////////////////
BOOTLOADER_SECTION void write_flash_page(unsigned int FlashAddr, unsigned char *buf)
{
    fc00:	ac 01       	movw	r20, r24
	unsigned int pagptr;

	eeprom_busy_wait();
    fc02:	e1 99       	sbic	0x1c, 1	; 28
    fc04:	fe cf       	rjmp	.-4      	; 0xfc02 <write_flash_page+0x2>
	boot_page_erase(FlashAddr);                  //erase one Flash page
    fc06:	83 e0       	ldi	r24, 0x03	; 3
    fc08:	fa 01       	movw	r30, r20
    fc0a:	80 93 68 00 	sts	0x0068, r24
    fc0e:	e8 95       	spm
	boot_spm_busy_wait();
    fc10:	80 91 68 00 	lds	r24, 0x0068
    fc14:	80 fd       	sbrc	r24, 0
    fc16:	fc cf       	rjmp	.-8      	; 0xfc10 <write_flash_page+0x10>
    fc18:	db 01       	movw	r26, r22
    fc1a:	e0 e0       	ldi	r30, 0x00	; 0
    fc1c:	f0 e0       	ldi	r31, 0x00	; 0
	for(pagptr = 0; pagptr < SPM_PAGESIZE; pagptr += 2) //fill data to Flash buffer
	{
  		boot_page_fill(pagptr, buf[pagptr] | (buf[pagptr + 1] << 8));
    fc1e:	61 e0       	ldi	r22, 0x01	; 1
    fc20:	11 96       	adiw	r26, 0x01	; 1
    fc22:	3c 91       	ld	r19, X
    fc24:	11 97       	sbiw	r26, 0x01	; 1
    fc26:	20 e0       	ldi	r18, 0x00	; 0
    fc28:	8c 91       	ld	r24, X
    fc2a:	90 e0       	ldi	r25, 0x00	; 0
    fc2c:	82 2b       	or	r24, r18
    fc2e:	93 2b       	or	r25, r19
    fc30:	0c 01       	movw	r0, r24
    fc32:	60 93 68 00 	sts	0x0068, r22
    fc36:	e8 95       	spm
    fc38:	11 24       	eor	r1, r1
	unsigned int pagptr;

	eeprom_busy_wait();
	boot_page_erase(FlashAddr);                  //erase one Flash page
	boot_spm_busy_wait();
	for(pagptr = 0; pagptr < SPM_PAGESIZE; pagptr += 2) //fill data to Flash buffer
    fc3a:	32 96       	adiw	r30, 0x02	; 2
    fc3c:	12 96       	adiw	r26, 0x02	; 2
    fc3e:	81 e0       	ldi	r24, 0x01	; 1
    fc40:	e0 30       	cpi	r30, 0x00	; 0
    fc42:	f8 07       	cpc	r31, r24
    fc44:	69 f7       	brne	.-38     	; 0xfc20 <write_flash_page+0x20>
	{
  		boot_page_fill(pagptr, buf[pagptr] | (buf[pagptr + 1] << 8));
	}

	boot_page_write(FlashAddr);                  //write buffer to one Flash page
    fc46:	85 e0       	ldi	r24, 0x05	; 5
    fc48:	fa 01       	movw	r30, r20
    fc4a:	80 93 68 00 	sts	0x0068, r24
    fc4e:	e8 95       	spm
	boot_spm_busy_wait();                        //wait Flash page write finish
    fc50:	80 91 68 00 	lds	r24, 0x0068
    fc54:	80 fd       	sbrc	r24, 0
    fc56:	fc cf       	rjmp	.-8      	; 0xfc50 <write_flash_page+0x50>
	boot_rww_enable();                  //enable application section
    fc58:	81 e1       	ldi	r24, 0x11	; 17
    fc5a:	80 93 68 00 	sts	0x0068, r24
    fc5e:	e8 95       	spm
}
    fc60:	08 95       	ret
