
dmxtopwm4chan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002b  00800100  00800100  000003bc  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000007d  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000048d  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000199  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f6  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012b  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019c  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 32       	cpi	r26, 0x2B	; 43
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  88:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pwmsetup>:
int mod0 = 0;
int mod1 = 0;

void pwmsetup(void){
//set direction registers to PWM mode:
	DDRB 	= 0b00001000;
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	84 b9       	out	0x04, r24	; 4
	DDRD 	= 0b01101000;
  94:	88 e6       	ldi	r24, 0x68	; 104
  96:	8a b9       	out	0x0a, r24	; 10
//Configure Timer/Counter Contol Regiseters	
	TCCR0A	= 0b10100011;
  98:	93 ea       	ldi	r25, 0xA3	; 163
  9a:	94 bd       	out	0x24, r25	; 36
	TCCR0B	= 0b00000001; 
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	85 bd       	out	0x25, r24	; 37
	TCCR2A	= 0b10100011;
  a0:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B	= 0b00000001;
  a4:	80 93 b1 00 	sts	0x00B1, r24
};
  a8:	08 95       	ret

000000aa <init_dmx>:

unsigned char *init_dmx (int ch, int size) {
//set baud rate:
	UBRR0H	= 0b00000000;
  aa:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L	= DMX_SYNC;
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	20 93 c4 00 	sts	0x00C4, r18
//configure USART Control/Status Registers:
	UCSR0A	= 0b00000010;
  b4:	22 e0       	ldi	r18, 0x02	; 2
  b6:	20 93 c0 00 	sts	0x00C0, r18
	UCSR0B	= 0b10010000;
  ba:	20 e9       	ldi	r18, 0x90	; 144
  bc:	20 93 c1 00 	sts	0x00C1, r18
	UCSR0C	= 0b00001110;
  c0:	2e e0       	ldi	r18, 0x0E	; 14
  c2:	20 93 c2 00 	sts	0x00C2, r18
// buffer clear
	dmx_mode = 0;
  c6:	10 92 26 01 	sts	0x0126, r1
	dmx_addr = 0;
  ca:	10 92 25 01 	sts	0x0125, r1
  ce:	10 92 24 01 	sts	0x0124, r1
	dmx_ch = ch;
  d2:	90 93 21 01 	sts	0x0121, r25
  d6:	80 93 20 01 	sts	0x0120, r24
	dmx_size = size;
  da:	70 93 23 01 	sts	0x0123, r23
  de:	60 93 22 01 	sts	0x0122, r22
	if (size > DMX_BUF_SIZE) {
  e2:	69 31       	cpi	r22, 0x19	; 25
  e4:	71 05       	cpc	r23, r1
  e6:	34 f0       	brlt	.+12     	; 0xf4 <init_dmx+0x4a>
		dmx_size = DMX_BUF_SIZE;
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 23 01 	sts	0x0123, r25
  f0:	80 93 22 01 	sts	0x0122, r24
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <init_dmx+0x56>
	}//end if
    for (i = 0; i < dmx_size; i ++) {
        dmx_buf[i] = 0;
  fa:	e8 5f       	subi	r30, 0xF8	; 248
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	10 82       	st	Z, r1
 100:	f9 01       	movw	r30, r18
	dmx_ch = ch;
	dmx_size = size;
	if (size > DMX_BUF_SIZE) {
		dmx_size = DMX_BUF_SIZE;
	}//end if
    for (i = 0; i < dmx_size; i ++) {
 102:	80 91 22 01 	lds	r24, 0x0122
 106:	90 91 23 01 	lds	r25, 0x0123
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	e8 17       	cp	r30, r24
 110:	f9 07       	cpc	r31, r25
 112:	9c f3       	brlt	.-26     	; 0xfa <init_dmx+0x50>
 114:	f0 93 2a 01 	sts	0x012A, r31
 118:	e0 93 29 01 	sts	0x0129, r30
        dmx_buf[i] = 0;
    }//end for
    return (unsigned char *)&dmx_buf;
};
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	08 95       	ret

00000122 <__vector_18>:

ISR (USART_RX_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	register unsigned char flg, dat;

    flg = UCSR0A;
 13a:	80 91 c0 00 	lds	r24, 0x00C0
    dat = UDR0;
 13e:	40 91 c6 00 	lds	r20, 0x00C6

    if (flg & 0x0c) {
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	c9 01       	movw	r24, r18
 148:	8c 70       	andi	r24, 0x0C	; 12
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	89 2b       	or	r24, r25
 14e:	59 f0       	breq	.+22     	; 0x166 <__vector_18+0x44>
        // data over run, parity error
        dmx_mode = 99; // data error
 150:	83 e6       	ldi	r24, 0x63	; 99
 152:	80 93 26 01 	sts	0x0126, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_18+0x3a>
        while (UCSR0A & 0x80) { dat = UDR0; } // buffer clear
 158:	80 91 c6 00 	lds	r24, 0x00C6
 15c:	80 91 c0 00 	lds	r24, 0x00C0
 160:	87 fd       	sbrc	r24, 7
 162:	fa cf       	rjmp	.-12     	; 0x158 <__vector_18+0x36>
 164:	64 c0       	rjmp	.+200    	; 0x22e <__vector_18+0x10c>
        return;
    }
	else if (flg & 0x10) {
 166:	24 ff       	sbrs	r18, 4
 168:	04 c0       	rjmp	.+8      	; 0x172 <__vector_18+0x50>
        // Frame error, detect BreakTime
        dmx_mode = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 26 01 	sts	0x0126, r24
 170:	5e c0       	rjmp	.+188    	; 0x22e <__vector_18+0x10c>
        return;
    };
    
    if (dmx_mode == 1) {
 172:	80 91 26 01 	lds	r24, 0x0126
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	61 f4       	brne	.+24     	; 0x192 <__vector_18+0x70>
        // Start Code
        if (dat == 0) {
 17a:	44 23       	and	r20, r20
 17c:	31 f4       	brne	.+12     	; 0x18a <__vector_18+0x68>
            // Start Code = 0
            dmx_addr = 0;
 17e:	10 92 25 01 	sts	0x0125, r1
 182:	10 92 24 01 	sts	0x0124, r1
            dmx_mode = 2;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	01 c0       	rjmp	.+2      	; 0x18c <__vector_18+0x6a>
        }
        else {
            // Start Code error
            dmx_mode = 99;
 18a:	83 e6       	ldi	r24, 0x63	; 99
 18c:	80 93 26 01 	sts	0x0126, r24
 190:	1e c0       	rjmp	.+60     	; 0x1ce <__vector_18+0xac>
        };
    } 
	else if (dmx_mode == 2) {
 192:	80 91 26 01 	lds	r24, 0x0126
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	d1 f4       	brne	.+52     	; 0x1ce <__vector_18+0xac>
        // DMX base address

        if (dmx_addr == dmx_ch) {
 19a:	20 91 24 01 	lds	r18, 0x0124
 19e:	30 91 25 01 	lds	r19, 0x0125
 1a2:	80 91 20 01 	lds	r24, 0x0120
 1a6:	90 91 21 01 	lds	r25, 0x0121
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	31 f4       	brne	.+12     	; 0x1bc <__vector_18+0x9a>
            dmx_addr = 0;
 1b0:	10 92 25 01 	sts	0x0125, r1
 1b4:	10 92 24 01 	sts	0x0124, r1
            dmx_mode = 3;
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	e8 cf       	rjmp	.-48     	; 0x18c <__vector_18+0x6a>
        } 
		else {
            dmx_addr ++;
 1bc:	80 91 24 01 	lds	r24, 0x0124
 1c0:	90 91 25 01 	lds	r25, 0x0125
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 25 01 	sts	0x0125, r25
 1ca:	80 93 24 01 	sts	0x0124, r24
        };
    };
    
    if (dmx_mode == 3) {
 1ce:	80 91 26 01 	lds	r24, 0x0126
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	f1 f4       	brne	.+60     	; 0x212 <__vector_18+0xf0>
        // recieve the data
        dmx_buf[dmx_addr] = dat;
 1d6:	e0 91 24 01 	lds	r30, 0x0124
 1da:	f0 91 25 01 	lds	r31, 0x0125
 1de:	e8 5f       	subi	r30, 0xF8	; 248
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	40 83       	st	Z, r20
        dmx_addr ++;
 1e4:	80 91 24 01 	lds	r24, 0x0124
 1e8:	90 91 25 01 	lds	r25, 0x0125
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 25 01 	sts	0x0125, r25
 1f2:	80 93 24 01 	sts	0x0124, r24
        if (dmx_addr >= dmx_size) {
 1f6:	20 91 24 01 	lds	r18, 0x0124
 1fa:	30 91 25 01 	lds	r19, 0x0125
 1fe:	80 91 22 01 	lds	r24, 0x0122
 202:	90 91 23 01 	lds	r25, 0x0123
 206:	28 17       	cp	r18, r24
 208:	39 07       	cpc	r19, r25
 20a:	1c f0       	brlt	.+6      	; 0x212 <__vector_18+0xf0>
            // complete receive
            dmx_mode = 4;
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	80 93 26 01 	sts	0x0126, r24
        };
    };
    
	OCR0A	= dmx_buf[0];
 212:	80 91 08 01 	lds	r24, 0x0108
 216:	87 bd       	out	0x27, r24	; 39
	OCR0B	= dmx_buf[1];
 218:	80 91 09 01 	lds	r24, 0x0109
 21c:	88 bd       	out	0x28, r24	; 40
	OCR2A	= dmx_buf[2];
 21e:	80 91 0a 01 	lds	r24, 0x010A
 222:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B	= dmx_buf[3];
 226:	80 91 0b 01 	lds	r24, 0x010B
 22a:	80 93 b4 00 	sts	0x00B4, r24
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <colorotate>:


void colorotate(void){
	red 	= 0x00;
	grn 	= 0x00;
 246:	10 92 05 01 	sts	0x0105, r1
	blu 	= 0x00;
 24a:	10 92 06 01 	sts	0x0106, r1
	wht 	= 0x00;
 24e:	10 92 07 01 	sts	0x0107, r1
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	60 e0       	ldi	r22, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 258:	e0 e2       	ldi	r30, 0x20	; 32
 25a:	fe e4       	ldi	r31, 0x4E	; 78
 25c:	06 c0       	rjmp	.+12     	; 0x26a <colorotate+0x24>
 25e:	cf 01       	movw	r24, r30
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <colorotate+0x1a>
 264:	2f 5f       	subi	r18, 0xFF	; 255
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	64 2f       	mov	r22, r20
 26a:	46 2f       	mov	r20, r22
 26c:	4f 5f       	subi	r20, 0xFF	; 255
	for (j=0;j<40;j++){red++;_delay_ms(10);};	
 26e:	28 32       	cpi	r18, 0x28	; 40
 270:	31 05       	cpc	r19, r1
 272:	ac f3       	brlt	.-22     	; 0x25e <colorotate+0x18>
 274:	60 93 04 01 	sts	0x0104, r22
 278:	30 93 28 01 	sts	0x0128, r19
 27c:	20 93 27 01 	sts	0x0127, r18
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	20 e2       	ldi	r18, 0x20	; 32
 286:	3e e4       	ldi	r19, 0x4E	; 78
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
	while(1){
		for(j = 0; j <120; j++){
			if((j>=0)&&(j<40)){
 28c:	48 32       	cpi	r20, 0x28	; 40
 28e:	51 05       	cpc	r21, r1
 290:	30 f4       	brcc	.+12     	; 0x29e <colorotate+0x58>
				grn++;
 292:	7f 5f       	subi	r23, 0xFF	; 255
 294:	c9 01       	movw	r24, r18
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <colorotate+0x50>
				_delay_ms(10);
				red--;
 29a:	61 50       	subi	r22, 0x01	; 1
 29c:	14 c0       	rjmp	.+40     	; 0x2c6 <colorotate+0x80>
				_delay_ms(10);
			}
			else if((j>=40)&&(j<80)){
 29e:	ca 01       	movw	r24, r20
 2a0:	88 97       	sbiw	r24, 0x28	; 40
 2a2:	88 97       	sbiw	r24, 0x28	; 40
 2a4:	30 f4       	brcc	.+12     	; 0x2b2 <colorotate+0x6c>
				grn--;
 2a6:	71 50       	subi	r23, 0x01	; 1
 2a8:	c9 01       	movw	r24, r18
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <colorotate+0x64>
				_delay_ms(10);
				blu++;
 2ae:	ef 5f       	subi	r30, 0xFF	; 255
 2b0:	0a c0       	rjmp	.+20     	; 0x2c6 <colorotate+0x80>
				_delay_ms(10);
			}
			else if((j>=80)&&(j<120)){
 2b2:	ca 01       	movw	r24, r20
 2b4:	80 55       	subi	r24, 0x50	; 80
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	88 97       	sbiw	r24, 0x28	; 40
 2ba:	40 f4       	brcc	.+16     	; 0x2cc <colorotate+0x86>
				blu--;
 2bc:	e1 50       	subi	r30, 0x01	; 1
 2be:	c9 01       	movw	r24, r18
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <colorotate+0x7a>
				_delay_ms(10);
				red++;
 2c4:	6f 5f       	subi	r22, 0xFF	; 255
 2c6:	c9 01       	movw	r24, r18
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <colorotate+0x82>
				_delay_ms(10);
			}
			OCR0A	= 1*red;
 2cc:	67 bd       	out	0x27, r22	; 39
			OCR0B	= 1*grn;
 2ce:	78 bd       	out	0x28, r23	; 40
			OCR2A	= 1*blu;
 2d0:	e0 93 b3 00 	sts	0x00B3, r30
			OCR2B	= 1*wht;
 2d4:	10 92 b4 00 	sts	0x00B4, r1
 2d8:	c9 01       	movw	r24, r18
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <colorotate+0x94>
 2de:	c9 01       	movw	r24, r18
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <colorotate+0x9a>
 2e4:	c9 01       	movw	r24, r18
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <colorotate+0xa0>
 2ea:	c9 01       	movw	r24, r18
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <colorotate+0xa6>
 2f0:	4f 5f       	subi	r20, 0xFF	; 255
 2f2:	5f 4f       	sbci	r21, 0xFF	; 255
	grn 	= 0x00;
	blu 	= 0x00;
	wht 	= 0x00;
	for (j=0;j<40;j++){red++;_delay_ms(10);};	
	while(1){
		for(j = 0; j <120; j++){
 2f4:	48 37       	cpi	r20, 0x78	; 120
 2f6:	51 05       	cpc	r21, r1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <colorotate+0xb6>
 2fa:	c6 cf       	rjmp	.-116    	; 0x288 <colorotate+0x42>
 2fc:	c7 cf       	rjmp	.-114    	; 0x28c <colorotate+0x46>

000002fe <preset>:
	};//end while
};//end colorotate

void preset(void){
//change these to get different colors.
	red 	= 0x00;
 2fe:	10 92 04 01 	sts	0x0104, r1
	grn 	= 0xff;
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 93 05 01 	sts	0x0105, r24
	blu 	= 0x00;
 308:	10 92 06 01 	sts	0x0106, r1
	wht 	= 0x00;
 30c:	10 92 07 01 	sts	0x0107, r1
//change the multipliers to scale output, but note that any overflow from color (ie red > 255)
//will cause unpredictable behaviour 
	OCR0A	= 1*red;
 310:	17 bc       	out	0x27, r1	; 39
	OCR0B	= 1*grn;
 312:	88 bd       	out	0x28, r24	; 40
	OCR2A	= 1*blu;
 314:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B	= 1*wht;
 318:	10 92 b4 00 	sts	0x00B4, r1

};//end preset
 31c:	08 95       	ret

0000031e <main>:



int main(void){
	volatile unsigned char *dmx_buf;
	pwmsetup();
 31e:	0e 94 48 00 	call	0x90	; 0x90 <pwmsetup>
	dmx_buf = init_dmx(i * DMX_SIZE, DMX_SIZE);
 322:	80 91 29 01 	lds	r24, 0x0129
 326:	90 91 2a 01 	lds	r25, 0x012A
 32a:	23 e0       	ldi	r18, 0x03	; 3
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	2a 95       	dec	r18
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0xe>
 334:	68 e0       	ldi	r22, 0x08	; 8
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 55 00 	call	0xaa	; 0xaa <init_dmx>
	sei();
 33c:	78 94       	sei
	
//comment out to to change to a different mode.
	colorotate();
 33e:	0e 94 23 01 	call	0x246	; 0x246 <colorotate>
 342:	ff cf       	rjmp	.-2      	; 0x342 <main+0x24>

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
