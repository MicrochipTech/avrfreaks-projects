###############################################################################
#                                                                             #
#                                                       16/Nov/2010  23:07:19 #
# IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel Tiny AVR                     #
# Copyright (C) 1996-2010 IAR Systems AB.                                     #
#                                                                             #
#    Source file  =  C:\Documents and Settings\bhammill\My                    #
#                    Documents\Customer\Static\IAR2\main.c                    #
#    Command line =  "C:\Documents and Settings\bhammill\My                   #
#                    Documents\Customer\Static\IAR2\main.c" --cpu=tiny4 -mt   #
#                    -o "C:\Documents and Settings\bhammill\My                #
#                    Documents\Customer\Static\IAR2\Debug\Obj\" -lCN          #
#                    "C:\Documents and Settings\bhammill\My                   #
#                    Documents\Customer\Static\IAR2\Debug\List\" -lB          #
#                    "C:\Documents and Settings\bhammill\My                   #
#                    Documents\Customer\Static\IAR2\Debug\List\"              #
#                    --initializers_in_flash -z3 --no_cse --no_inline         #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -e -I "C:\Program Files\IAR            #
#                    Systems\Embedded Workbench 5.4_3\avr\INC\" -I            #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.4_3\avr\INC\CLIB\"                                     #
#    List file    =  C:\Documents and Settings\bhammill\My                    #
#                    Documents\Customer\Static\IAR2\Debug\List\main.lst       #
#    Object file  =  C:\Documents and Settings\bhammill\My                    #
#                    Documents\Customer\Static\IAR2\Debug\Obj\main.r90        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\bhammill\My Documents\Customer\Static\IAR2\main.c
      1          #include <ioavr.h>

   \                                 In  segment ABSOLUTE, at 0x3c
   \   <__C9> volatile __io _A_CCP
   \                     _A_CCP:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37
   \   <__C20> volatile __io _A_CLKMSR
   \                     _A_CLKMSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36
   \   <__C23> volatile __io _A_CLKPSR
   \                     _A_CLKPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   <__C29> volatile __io _A_VLMCSR
   \                     _A_VLMCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   <__C43> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d
   \   <__C46> volatile __io _A_TCCR0B
   \                     _A_TCCR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   <__C52> volatile __io _A_TIMSK0
   \                     _A_TIMSK0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28
   \   <__C59> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x26
   \   <__C63> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x24
   \   <__C67> volatile __io _A_OCR0B
   \                     _A_OCR0B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x22
   \   <__C71> volatile __io _A_ICR0
   \                     _A_ICR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x1f
   \   <__C74> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x15
   \   <__C80> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x14
   \   <__C83> volatile __io _A_EIFR
   \                     _A_EIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x13
   \   <__C86> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12
   \   <__C89> volatile __io _A_PCICR
   \                     _A_PCICR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc
   \   <__C98> volatile __io _A_PORTCR
   \                     _A_PORTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3
   \   <__C101> volatile __io _A_PUEB
   \                     _A_PUEB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2
   \   <__C104> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x1
   \   <__C107> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1
      2          #include <inavr.h>
      3          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      4          char led = 0;
   \                     led:
   \   00000000                      DS8 1
      5          
      6          #pragma vector = INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
      7          __interrupt void ext_int0_isr(void)
   \                     ext_int0_isr:
      8          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
      9          // Place your code here
     10          
     11          if (led == 0)
   \   0000000A   ....               LDI     R30, LOW(led)
   \   0000000C   ....               LDI     R31, (led) >> 8
   \   0000000E   8100               LD      R16, Z
   \   00000010   2300               TST     R16
   \   00000012   F429               BRNE    ??ext_int0_isr_0
     12              led = 1;
   \   00000014   E001               LDI     R16, 1
   \   00000016   ....               LDI     R30, LOW(led)
   \   00000018   ....               LDI     R31, (led) >> 8
   \   0000001A   8300               ST      Z, R16
   \   0000001C   C004               RJMP    ??ext_int0_isr_1
     13          else
     14              led = 0;
   \                     ??ext_int0_isr_0:
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               LDI     R30, LOW(led)
   \   00000022   ....               LDI     R31, (led) >> 8
   \   00000024   8300               ST      Z, R16
     15          
     16          }
   \                     ??ext_int0_isr_1:
   \   00000026   BF1F               OUT     0x3F, R17
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   91E9               LD      R30, Y+
   \   0000002E   91F9               LD      R31, Y+
   \   00000030   9518               RETI
     17          
     18          // Timer 0 overflow interrupt service routine
     19          #pragma vector = TIM0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     20          __interrupt void timer0_ovf_isr(void)
   \                     timer0_ovf_isr:
     21          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
     22          // Place your code here
     23          if (led == 0)
   \   0000000A   ....               LDI     R30, LOW(led)
   \   0000000C   ....               LDI     R31, (led) >> 8
   \   0000000E   8100               LD      R16, Z
   \   00000010   2300               TST     R16
   \   00000012   F429               BRNE    ??timer0_ovf_isr_0
     24              led = 1;
   \   00000014   E001               LDI     R16, 1
   \   00000016   ....               LDI     R30, LOW(led)
   \   00000018   ....               LDI     R31, (led) >> 8
   \   0000001A   8300               ST      Z, R16
   \   0000001C   C004               RJMP    ??timer0_ovf_isr_1
     25          else
     26              led = 0;
   \                     ??timer0_ovf_isr_0:
   \   0000001E   E000               LDI     R16, 0
   \   00000020   ....               LDI     R30, LOW(led)
   \   00000022   ....               LDI     R31, (led) >> 8
   \   00000024   8300               ST      Z, R16
     27          
     28          }
   \                     ??timer0_ovf_isr_1:
   \   00000026   BF1F               OUT     0x3F, R17
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   91E9               LD      R30, Y+
   \   0000002E   91F9               LD      R31, Y+
   \   00000030   9518               RETI
     29          
     30          
     31          

   \                                 In  segment CODE, align 2, keep-with-next
     32          int main( void )
   \                     main:
     33          {
     34            
     35            
     36            // Main Clock source: Calibrated Internal 8 MHz Osc.
     37          // Critical section that can't be optimized.
     38          CCP=0xD8;
   \   00000000   ED08               LDI     R16, 216
   \   00000002   BF0C               OUT     0x3C, R16
     39          CLKMSR=0x00;
   \   00000004   E000               LDI     R16, 0
   \   00000006   BF07               OUT     0x37, R16
     40          // Clock Prescaler division factor: 16
     41          CCP=0xD8;
   \   00000008   ED08               LDI     R16, 216
   \   0000000A   BF0C               OUT     0x3C, R16
     42          CLKPSR=0x04;
   \   0000000C   E004               LDI     R16, 4
   \   0000000E   BF06               OUT     0x36, R16
     43          
     44          
     45          
     46          // Voltage Level Monitor
     47          // Trigger Level: Voltage Level Monitor Disabled
     48          // Interrupt: Off
     49          VLMCSR=0x00;
   \   00000010   E000               LDI     R16, 0
   \   00000012   BF04               OUT     0x34, R16
     50          
     51          // Input/Output Ports initialization
     52          // Port B initialization
     53          // Pull-up initialization
     54          PUEB=0x00;
   \   00000014   E000               LDI     R16, 0
   \   00000016   B903               OUT     0x03, R16
     55          // Func3=In Func2=In Func1=Out Func0=Out 
     56          // State3=T State2=T State1=0 State0=0 
     57          PORTB=0x00;
   \   00000018   E000               LDI     R16, 0
   \   0000001A   B902               OUT     0x02, R16
     58          DDRB=0x03;
   \   0000001C   E003               LDI     R16, 3
   \   0000001E   B901               OUT     0x01, R16
     59          
     60          // Break Before Make Mode PORTB: Off
     61          PORTCR=0x00;
   \   00000020   E000               LDI     R16, 0
   \   00000022   B90C               OUT     0x0C, R16
     62          
     63          // Timer/Counter 0 initialization
     64          // Clock source: System Clock
     65          // Clock value: 125.000 kHz
     66          // Mode: Normal top=FFFFh
     67          // Input Capture on Falling Edge
     68          // Input Capture Noise Canceler: Off
     69          // OC0A output: Disconnected
     70          // OC0B output: Disconnected
     71          TCCR0A=0x00;
   \   00000024   E000               LDI     R16, 0
   \   00000026   BD0E               OUT     0x2E, R16
     72          TCCR0B=0x03;
   \   00000028   E003               LDI     R16, 3
   \   0000002A   BD0D               OUT     0x2D, R16
     73          TCNT0=0x0000;
   \   0000002C   E000               LDI     R16, 0
   \   0000002E   E010               LDI     R17, 0
   \   00000030   BD19               OUT     0x29, R17
   \   00000032   BD08               OUT     0x28, R16
     74          ICR0=0x0000;
   \   00000034   E000               LDI     R16, 0
   \   00000036   E010               LDI     R17, 0
   \   00000038   BD13               OUT     0x23, R17
   \   0000003A   BD02               OUT     0x22, R16
     75          OCR0A=0x0000;
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   E010               LDI     R17, 0
   \   00000040   BD17               OUT     0x27, R17
   \   00000042   BD06               OUT     0x26, R16
     76          OCR0B=0x0000; 
   \   00000044   E000               LDI     R16, 0
   \   00000046   E010               LDI     R17, 0
   \   00000048   BD15               OUT     0x25, R17
   \   0000004A   BD04               OUT     0x24, R16
     77          
     78          // External Interrupt(s) initialization
     79          // INT0: On
     80          // INT0 Mode: Falling Edge
     81          // Interrupt on any change on pins PCINT0-3: Off
     82          EICRA=0x02;
   \   0000004C   E002               LDI     R16, 2
   \   0000004E   BB05               OUT     0x15, R16
     83          EIMSK=0x01;
   \   00000050   E001               LDI     R16, 1
   \   00000052   BB03               OUT     0x13, R16
     84          EIFR=0x01;
   \   00000054   E001               LDI     R16, 1
   \   00000056   BB04               OUT     0x14, R16
     85          PCICR=0x00;
   \   00000058   E000               LDI     R16, 0
   \   0000005A   BB02               OUT     0x12, R16
     86          
     87          // Timer/Counter 0 Interrupt(s) initialization
     88          TIMSK0=0x01;
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   BD0B               OUT     0x2B, R16
     89          
     90          // Analog Comparator initialization
     91          // Analog Comparator: Off
     92          // Analog Comparator Input Capture by Timer/Counter 0: Off
     93          ACSR=0x80;
   \   00000060   E800               LDI     R16, 128
   \   00000062   BB0F               OUT     0x1F, R16
     94          
     95          // Global enable interrupts
     96          
     97          __enable_interrupt();
   \   00000064   9478               SEI
   \   00000066   C002               RJMP    ??main_0
     98          
     99          while(1)
    100          {
    101            
    102            if (led == 0)
    103              PORTB = 0xFE;
   \                     ??main_1:
   \   00000068   EF0E               LDI     R16, 254
   \   0000006A   B902               OUT     0x02, R16
   \                     ??main_0:
   \   0000006C   ....               LDI     R30, LOW(led)
   \   0000006E   ....               LDI     R31, (led) >> 8
   \   00000070   8100               LD      R16, Z
   \   00000072   2300               TST     R16
   \   00000074   F3C9               BREQ    ??main_1
    104            
    105            else
    106              PORTB = 0xFD;
   \   00000076   EF0D               LDI     R16, 253
   \   00000078   B902               OUT     0x02, R16
   \   0000007A   CFF8               RJMP    ??main_0
   \   0000007C                      REQUIRE _A_CCP
   \   0000007C                      REQUIRE _A_CLKMSR
   \   0000007C                      REQUIRE _A_OCR0B
   \   0000007C                      REQUIRE _A_ICR0
   \   0000007C                      REQUIRE _A_ACSR
   \   0000007C                      REQUIRE _A_EICRA
   \   0000007C                      REQUIRE _A_EIFR
   \   0000007C                      REQUIRE _A_EIMSK
   \   0000007C                      REQUIRE _A_PCICR
   \   0000007C                      REQUIRE _A_PORTCR
   \   0000007C                      REQUIRE _A_PUEB
   \   0000007C                      REQUIRE _A_PORTB
   \   0000007C                      REQUIRE _A_DDRB
   \   0000007C                      REQUIRE _A_CLKPSR
   \   0000007C                      REQUIRE _A_VLMCSR
   \   0000007C                      REQUIRE _A_TCCR0A
   \   0000007C                      REQUIRE _A_TCCR0B
   \   0000007C                      REQUIRE _A_TIMSK0
   \   0000007C                      REQUIRE _A_TCNT0
   \   0000007C                      REQUIRE _A_OCR0A
    107          }
    108            
    109          
    110          }

   \                                 In  segment INTVEC, offset 0x2, root
   \                     `??ext_int0_isr??INTVEC 2`:
   \   00000002   ....               RJMP    ext_int0_isr

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??timer0_ovf_isr??INTVEC 8`:
   \   00000008   ....               RJMP    timer0_ovf_isr

   Maximum stack usage in bytes:

     Function       CSTACK RSTACK
     --------       ------ ------
     ext_int0_isr       4      2
     main               0      2
     timer0_ovf_isr     4      2


   Segment part sizes:

     Function/Label             Bytes
     --------------             -----
     _A_CCP                        1
     _A_CLKMSR                     1
     _A_CLKPSR                     1
     _A_VLMCSR                     1
     _A_TCCR0A                     1
     _A_TCCR0B                     1
     _A_TIMSK0                     1
     _A_TCNT0                      2
     _A_OCR0A                      2
     _A_OCR0B                      2
     _A_ICR0                       2
     _A_ACSR                       1
     _A_EICRA                      1
     _A_EIFR                       1
     _A_EIMSK                      1
     _A_PCICR                      1
     _A_PORTCR                     1
     _A_PUEB                       1
     _A_PORTB                      1
     _A_DDRB                       1
     led                           1
     ext_int0_isr                 50
     timer0_ovf_isr               50
     main                        124
     ??ext_int0_isr??INTVEC 2      2
     ??timer0_ovf_isr??INTVEC 8    2
      Others                       6

 
  24 bytes in segment ABSOLUTE
 224 bytes in segment CODE
   6 bytes in segment INITTAB
   4 bytes in segment INTVEC
   1 byte  in segment NEAR_Z
 
 224 bytes of CODE memory (+  4 bytes shared)
   1 byte  of DATA memory (+ 30 bytes shared)

Errors: none
Warnings: none
