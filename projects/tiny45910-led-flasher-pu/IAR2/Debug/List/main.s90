///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      16/Nov/2010  23:07:19 /
// IAR C/C++ Compiler V5.50.0.50277/W32 for Atmel Tiny AVR                    /
// Copyright (C) 1996-2010 IAR Systems AB.                                    /
//                                                                            /
//    Source file  =  C:\Documents and Settings\bhammill\My                   /
//                    Documents\Customer\Static\IAR2\main.c                   /
//    Command line =  "C:\Documents and Settings\bhammill\My                  /
//                    Documents\Customer\Static\IAR2\main.c" --cpu=tiny4 -mt  /
//                    -o "C:\Documents and Settings\bhammill\My               /
//                    Documents\Customer\Static\IAR2\Debug\Obj\" -lCN         /
//                    "C:\Documents and Settings\bhammill\My                  /
//                    Documents\Customer\Static\IAR2\Debug\List\" -lB         /
//                    "C:\Documents and Settings\bhammill\My                  /
//                    Documents\Customer\Static\IAR2\Debug\List\"             /
//                    --initializers_in_flash -z3 --no_cse --no_inline        /
//                    --no_code_motion --no_cross_call --no_clustering        /
//                    --no_tbaa --debug -e -I "C:\Program Files\IAR           /
//                    Systems\Embedded Workbench 5.4_3\avr\INC\" -I           /
//                    "C:\Program Files\IAR Systems\Embedded Workbench        /
//                    5.4_3\avr\INC\CLIB\"                                    /
//    List file    =  C:\Documents and Settings\bhammill\My                   /
//                    Documents\Customer\Static\IAR2\Debug\List\main.s90      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??ext_int0_isr??INTVEC 2`
        PUBWEAK `??timer0_ovf_isr??INTVEC 8`
        PUBWEAK _A_ACSR
        PUBWEAK _A_CCP
        PUBWEAK _A_CLKMSR
        PUBWEAK _A_CLKPSR
        PUBWEAK _A_DDRB
        PUBWEAK _A_EICRA
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_ICR0
        PUBWEAK _A_OCR0A
        PUBWEAK _A_OCR0B
        PUBWEAK _A_PCICR
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTCR
        PUBWEAK _A_PUEB
        PUBWEAK _A_TCCR0A
        PUBWEAK _A_TCCR0B
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TIMSK0
        PUBWEAK _A_VLMCSR
        PUBLIC ext_int0_isr
        PUBLIC led
        PUBLIC main
        PUBLIC timer0_ovf_isr

ext_int0_isr        SYMBOL "ext_int0_isr"
`??ext_int0_isr??INTVEC 2` SYMBOL "??INTVEC 2", ext_int0_isr
timer0_ovf_isr      SYMBOL "timer0_ovf_isr"
`??timer0_ovf_isr??INTVEC 8` SYMBOL "??INTVEC 8", timer0_ovf_isr

// C:\Documents and Settings\bhammill\My Documents\Customer\Static\IAR2\main.c
//    1 #include <ioavr.h>

        ASEGN ABSOLUTE:DATA:NOROOT,03cH
// <__C9> volatile __io _A_CCP
_A_CCP:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,037H
// <__C20> volatile __io _A_CLKMSR
_A_CLKMSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,036H
// <__C23> volatile __io _A_CLKPSR
_A_CLKPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,034H
// <__C29> volatile __io _A_VLMCSR
_A_VLMCSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02eH
// <__C43> volatile __io _A_TCCR0A
_A_TCCR0A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02dH
// <__C46> volatile __io _A_TCCR0B
_A_TCCR0B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// <__C52> volatile __io _A_TIMSK0
_A_TIMSK0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,028H
// <__C59> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,026H
// <__C63> volatile __io _A_OCR0A
_A_OCR0A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,024H
// <__C67> volatile __io _A_OCR0B
_A_OCR0B:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,022H
// <__C71> volatile __io _A_ICR0
_A_ICR0:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
// <__C74> volatile __io _A_ACSR
_A_ACSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,015H
// <__C80> volatile __io _A_EICRA
_A_EICRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,014H
// <__C83> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,013H
// <__C86> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,012H
// <__C89> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0cH
// <__C98> volatile __io _A_PORTCR
_A_PORTCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03H
// <__C101> volatile __io _A_PUEB
_A_PUEB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02H
// <__C104> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,01H
// <__C107> volatile __io _A_DDRB
_A_DDRB:
        DS8 1
//    2 #include <inavr.h>
//    3 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//    4 char led = 0;
led:
        DS8 1
//    5 
//    6 #pragma vector = INT0_vect

        RSEG CODE:CODE:NOROOT(1)
//    7 __interrupt void ext_int0_isr(void)
ext_int0_isr:
//    8 {
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R17
        ST      -Y, R16
        IN      R17, 0x3F
//    9 // Place your code here
//   10 
//   11 if (led == 0)
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        LD      R16, Z
        TST     R16
        BRNE    ??ext_int0_isr_0
//   12     led = 1;
        LDI     R16, 1
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        ST      Z, R16
        RJMP    ??ext_int0_isr_1
//   13 else
//   14     led = 0;
??ext_int0_isr_0:
        LDI     R16, 0
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        ST      Z, R16
//   15 
//   16 }
??ext_int0_isr_1:
        OUT     0x3F, R17
        LD      R16, Y+
        LD      R17, Y+
        LD      R30, Y+
        LD      R31, Y+
        RETI
//   17 
//   18 // Timer 0 overflow interrupt service routine
//   19 #pragma vector = TIM0_OVF_vect

        RSEG CODE:CODE:NOROOT(1)
//   20 __interrupt void timer0_ovf_isr(void)
timer0_ovf_isr:
//   21 {
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R17
        ST      -Y, R16
        IN      R17, 0x3F
//   22 // Place your code here
//   23 if (led == 0)
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        LD      R16, Z
        TST     R16
        BRNE    ??timer0_ovf_isr_0
//   24     led = 1;
        LDI     R16, 1
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        ST      Z, R16
        RJMP    ??timer0_ovf_isr_1
//   25 else
//   26     led = 0;
??timer0_ovf_isr_0:
        LDI     R16, 0
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        ST      Z, R16
//   27 
//   28 }
??timer0_ovf_isr_1:
        OUT     0x3F, R17
        LD      R16, Y+
        LD      R17, Y+
        LD      R30, Y+
        LD      R31, Y+
        RETI
//   29 
//   30 
//   31 

        RSEG CODE:CODE:NOROOT(1)
//   32 int main( void )
main:
//   33 {
//   34   
//   35   
//   36   // Main Clock source: Calibrated Internal 8 MHz Osc.
//   37 // Critical section that can't be optimized.
//   38 CCP=0xD8;
        LDI     R16, 216
        OUT     0x3C, R16
//   39 CLKMSR=0x00;
        LDI     R16, 0
        OUT     0x37, R16
//   40 // Clock Prescaler division factor: 16
//   41 CCP=0xD8;
        LDI     R16, 216
        OUT     0x3C, R16
//   42 CLKPSR=0x04;
        LDI     R16, 4
        OUT     0x36, R16
//   43 
//   44 
//   45 
//   46 // Voltage Level Monitor
//   47 // Trigger Level: Voltage Level Monitor Disabled
//   48 // Interrupt: Off
//   49 VLMCSR=0x00;
        LDI     R16, 0
        OUT     0x34, R16
//   50 
//   51 // Input/Output Ports initialization
//   52 // Port B initialization
//   53 // Pull-up initialization
//   54 PUEB=0x00;
        LDI     R16, 0
        OUT     0x03, R16
//   55 // Func3=In Func2=In Func1=Out Func0=Out 
//   56 // State3=T State2=T State1=0 State0=0 
//   57 PORTB=0x00;
        LDI     R16, 0
        OUT     0x02, R16
//   58 DDRB=0x03;
        LDI     R16, 3
        OUT     0x01, R16
//   59 
//   60 // Break Before Make Mode PORTB: Off
//   61 PORTCR=0x00;
        LDI     R16, 0
        OUT     0x0C, R16
//   62 
//   63 // Timer/Counter 0 initialization
//   64 // Clock source: System Clock
//   65 // Clock value: 125.000 kHz
//   66 // Mode: Normal top=FFFFh
//   67 // Input Capture on Falling Edge
//   68 // Input Capture Noise Canceler: Off
//   69 // OC0A output: Disconnected
//   70 // OC0B output: Disconnected
//   71 TCCR0A=0x00;
        LDI     R16, 0
        OUT     0x2E, R16
//   72 TCCR0B=0x03;
        LDI     R16, 3
        OUT     0x2D, R16
//   73 TCNT0=0x0000;
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x29, R17
        OUT     0x28, R16
//   74 ICR0=0x0000;
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x23, R17
        OUT     0x22, R16
//   75 OCR0A=0x0000;
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x27, R17
        OUT     0x26, R16
//   76 OCR0B=0x0000; 
        LDI     R16, 0
        LDI     R17, 0
        OUT     0x25, R17
        OUT     0x24, R16
//   77 
//   78 // External Interrupt(s) initialization
//   79 // INT0: On
//   80 // INT0 Mode: Falling Edge
//   81 // Interrupt on any change on pins PCINT0-3: Off
//   82 EICRA=0x02;
        LDI     R16, 2
        OUT     0x15, R16
//   83 EIMSK=0x01;
        LDI     R16, 1
        OUT     0x13, R16
//   84 EIFR=0x01;
        LDI     R16, 1
        OUT     0x14, R16
//   85 PCICR=0x00;
        LDI     R16, 0
        OUT     0x12, R16
//   86 
//   87 // Timer/Counter 0 Interrupt(s) initialization
//   88 TIMSK0=0x01;
        LDI     R16, 1
        OUT     0x2B, R16
//   89 
//   90 // Analog Comparator initialization
//   91 // Analog Comparator: Off
//   92 // Analog Comparator Input Capture by Timer/Counter 0: Off
//   93 ACSR=0x80;
        LDI     R16, 128
        OUT     0x1F, R16
//   94 
//   95 // Global enable interrupts
//   96 
//   97 __enable_interrupt();
        SEI
        RJMP    ??main_0
//   98 
//   99 while(1)
//  100 {
//  101   
//  102   if (led == 0)
//  103     PORTB = 0xFE;
??main_1:
        LDI     R16, 254
        OUT     0x02, R16
??main_0:
        LDI     R30, LOW(led)
        LDI     R31, (led) >> 8
        LD      R16, Z
        TST     R16
        BREQ    ??main_1
//  104   
//  105   else
//  106     PORTB = 0xFD;
        LDI     R16, 253
        OUT     0x02, R16
        RJMP    ??main_0
        REQUIRE _A_CCP
        REQUIRE _A_CLKMSR
        REQUIRE _A_OCR0B
        REQUIRE _A_ICR0
        REQUIRE _A_ACSR
        REQUIRE _A_EICRA
        REQUIRE _A_EIFR
        REQUIRE _A_EIMSK
        REQUIRE _A_PCICR
        REQUIRE _A_PORTCR
        REQUIRE _A_PUEB
        REQUIRE _A_PORTB
        REQUIRE _A_DDRB
        REQUIRE _A_CLKPSR
        REQUIRE _A_VLMCSR
        REQUIRE _A_TCCR0A
        REQUIRE _A_TCCR0B
        REQUIRE _A_TIMSK0
        REQUIRE _A_TCNT0
        REQUIRE _A_OCR0A
//  107 }
//  108   
//  109 
//  110 }

        COMMON INTVEC:CODE:ROOT(1)
        ORG 2
`??ext_int0_isr??INTVEC 2`:
        RJMP    ext_int0_isr

        COMMON INTVEC:CODE:ROOT(1)
        ORG 8
`??timer0_ovf_isr??INTVEC 8`:
        RJMP    timer0_ovf_isr

        RSEG INITTAB:DATA:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        END
// 
//  24 bytes in segment ABSOLUTE
// 224 bytes in segment CODE
//   6 bytes in segment INITTAB
//   4 bytes in segment INTVEC
//   1 byte  in segment NEAR_Z
// 
// 224 bytes of CODE memory (+  4 bytes shared)
//   1 byte  of DATA memory (+ 30 bytes shared)
//
//Errors: none
//Warnings: none
