
_HD44780_Drive_V200.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00001998  00001a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080008c  0080008c  00001a58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cdd  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  00006a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a90  00000000  00000000  00007400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00007e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001417  00000000  00000000  0000860c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b6  00000000  00000000  00009a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000bcd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	eb c0       	rjmp	.+470    	; 0x1d8 <__ctors_end>
       2:	05 c1       	rjmp	.+522    	; 0x20e <__bad_interrupt>
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	03 c1       	rjmp	.+518    	; 0x20e <__bad_interrupt>
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	01 c1       	rjmp	.+514    	; 0x20e <__bad_interrupt>
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	ff c0       	rjmp	.+510    	; 0x20e <__bad_interrupt>
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	07 c8       	rjmp	.-4082   	; 0xfffff022 <__eeprom_end+0xff7ef022>
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	fb c0       	rjmp	.+502    	; 0x20e <__bad_interrupt>
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	f9 c0       	rjmp	.+498    	; 0x20e <__bad_interrupt>
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	f7 c0       	rjmp	.+494    	; 0x20e <__bad_interrupt>
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	f5 c0       	rjmp	.+490    	; 0x20e <__bad_interrupt>
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	04 01       	movw	r0, r8
      28:	05 06       	cpc	r0, r21
      2a:	01 06       	cpc	r0, r17
      2c:	07 01       	movw	r0, r14
      2e:	07 02       	muls	r16, r23

00000030 <_ZL12_lcd_BigRow1>:
      30:	00 01 02 02 04 03 03 02 00 00                       ..........

0000003a <_ZL15_lcd_BigNumber7>:
      3a:	1f 1f 1b 1b 1b 1b 1f 1f                             ........

00000042 <_ZL15_lcd_BigNumber6>:
      42:	1f 1f 03 03 03 03 1f 1f                             ........

0000004a <_ZL15_lcd_BigNumber5>:
      4a:	1f 1f 18 18 18 18 1f 1f                             ........

00000052 <_ZL15_lcd_BigNumber4>:
      52:	1b 1b 1b 1b 1b 1b 1f 1f                             ........

0000005a <_ZL15_lcd_BigNumber3>:
      5a:	1f 1f 18 18 18 18 18 18                             ........

00000062 <_ZL15_lcd_BigNumber2>:
      62:	1f 1f 03 03 03 03 03 03                             ........

0000006a <_ZL15_lcd_BigNumber1>:
      6a:	03 03 03 03 03 03 03 03                             ........

00000072 <_ZL15_lcd_BigNumber0>:
      72:	1f 1f 1b 1b 1b 1b 1b 1b                             ........

0000007a <_ZZ4mainE3__c_19>:
      7a:	52 45 44 45 46 49 4e 45 44 20 43 48 41 52 53 2e     REDEFINED CHARS.
	...

0000008b <_ZZ4mainE3__c_18>:
      8b:	57 52 49 54 45 20 44 49 52 45 43 54 4c 59 20 20     WRITE DIRECTLY  
	...

0000009c <_ZZ4mainE3__c_17>:
      9c:	43 55 52 53 4f 52 20 4c 45 46 54 20 20 00           CURSOR LEFT  .

000000aa <_ZZ4mainE3__c_16>:
      aa:	43 55 52 53 4f 52 20 52 49 47 48 54 00              CURSOR RIGHT.

000000b7 <_ZZ4mainE3__c_15>:
      b7:	42 69 67 20 4e 75 6d 62 65 72 3d 00                 Big Number=.

000000c3 <_ZZ4mainE3__c_14>:
      c3:	53 63 72 65 65 6e 20 52 65 73 74 6f 72 65 00        Screen Restore.

000000d2 <_ZZ4mainE3__c_13>:
      d2:	30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35     0123456789012345
	...

000000e3 <_ZZ4mainE3__c_12>:
      e3:	30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35     0123456789012345
	...

000000f4 <_ZZ4mainE3__c_11>:
      f4:	73 61 76 65 20 49 6e 74 6f 20 53 52 41 4d 20 20     save Into SRAM  
	...

00000105 <_ZZ4mainE3__c_10>:
     105:	4e 65 78 74 20 4d 73 67 2e 20 57 69 6c 6c 20 20     Next Msg. Will  
	...

00000116 <_ZZ4mainE3__c_9>:
     116:	43 75 72 73 6f 72 20 4f 66 66 20 41 67 61 69 6e     Cursor Off Again
	...

00000127 <_ZZ4mainE3__c_8>:
     127:	53 65 74 20 42 6c 69 6e 6b 20 4f 66 66 00           Set Blink Off.

00000135 <_ZZ4mainE3__c_7>:
     135:	53 65 74 20 42 6c 69 6e 6b 20 4f 6e 00              Set Blink On.

00000142 <_ZZ4mainE3__c_6>:
     142:	43 75 72 73 6f 72 20 4f 6e 20 00                    Cursor On .

0000014d <_ZZ4mainE3__c_5>:
     14d:	43 75 72 73 6f 72 20 4f 66 66 00                    Cursor Off.

00000158 <_ZZ4mainE3__c_4>:
     158:	53 63 72 6f 6c 6c 20 52 69 67 68 74 00              Scroll Right.

00000165 <_ZZ4mainE3__c_3>:
     165:	53 63 72 6f 6c 6c 20 4c 65 66 74 00                 Scroll Left.

00000171 <_ZZ4mainE3__c_2>:
     171:	50 75 74 43 20 50 75 74 53 20 50 75 74 53 46 0d     PutC PutS PutSF.
     181:	0a 41 6c 6c 6f 77 20 43 52 20 26 20 4c 46 00        .Allow CR & LF.

00000190 <_ZZ4mainE3__c_1>:
     190:	48 44 34 34 37 30 00                                HD4470.

00000197 <_ZZ4mainE3__c_0>:
     197:	44 45 4d 4f 20 4c 4f 4f 50 20 43 4f 55 4e 54 20     DEMO LOOP COUNT 
	...

000001a8 <_ZZ4mainE3__c>:
     1a8:	4c 43 44 20 50 72 65 73 65 6e 74 3f 59 65 73 00     LCD Present?Yes.

000001b8 <_ZL12newChar4_Box>:
     1b8:	00 0a 15 0e 04 00 11 0e                             ........

000001c0 <_ZL12newChar3_Box>:
     1c0:	00 0e 11 11 11 0e 00 00                             ........

000001c8 <_ZL12newChar2_Box>:
     1c8:	04 04 0a 0a 11 11 1f 00                             ........

000001d0 <_ZL12newChar1_Box>:
     1d0:	00 1f 11 11 11 11 1f 00                             ........

000001d8 <__ctors_end>:
     1d8:	11 24       	eor	r1, r1
     1da:	1f be       	out	0x3f, r1	; 63
     1dc:	cf e5       	ldi	r28, 0x5F	; 95
     1de:	d4 e0       	ldi	r29, 0x04	; 4
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	cd bf       	out	0x3d, r28	; 61

000001e4 <__do_copy_data>:
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	a0 e6       	ldi	r26, 0x60	; 96
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e8 e9       	ldi	r30, 0x98	; 152
     1ec:	f9 e1       	ldi	r31, 0x19	; 25
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__do_copy_data+0x10>
     1f0:	05 90       	lpm	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	ac 38       	cpi	r26, 0x8C	; 140
     1f6:	b1 07       	cpc	r27, r17
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__do_copy_data+0xc>

000001fa <__do_clear_bss>:
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	ac e8       	ldi	r26, 0x8C	; 140
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	01 c0       	rjmp	.+2      	; 0x204 <.do_clear_bss_start>

00000202 <.do_clear_bss_loop>:
     202:	1d 92       	st	X+, r1

00000204 <.do_clear_bss_start>:
     204:	a5 3a       	cpi	r26, 0xA5	; 165
     206:	b2 07       	cpc	r27, r18
     208:	e1 f7       	brne	.-8      	; 0x202 <.do_clear_bss_loop>
     20a:	43 d4       	rcall	.+2182   	; 0xa92 <main>
     20c:	c3 cb       	rjmp	.-2170   	; 0xfffff994 <__eeprom_end+0xff7ef994>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <_ZL7delayMsj>:
//	| OUTPUT  :																		|
//	| REMARKS :																		|
//	+-------------------------------------------------------------------------------+

static void delayMs(uint16_t timeMS)
{
     210:	9c 01       	movw	r18, r24
	timeCount=(F_CPU)/4000;
	//generate N milliseconds time
	for(;;)
	{
		//exit if zero(0)
		if (timeMS==0) break;
     212:	89 2b       	or	r24, r25
     214:	41 f0       	breq	.+16     	; 0x226 <_ZL7delayMsj+0x16>
     216:	40 ed       	ldi	r20, 0xD0	; 208
     218:	57 e0       	ldi	r21, 0x07	; 7
					 "sbiw r24,1		    \t\n"	\
					 "brne 1b               \t\n"   \
					 :"+r" (timeCount)
					 :
					 :"r24","r25"
					 );
     21a:	ca 01       	movw	r24, r20
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <_ZL7delayMsj+0xc>
		//pump Time
		timeMS--;
     220:	21 50       	subi	r18, 0x01	; 1
     222:	31 09       	sbc	r19, r1
	timeCount=(F_CPU)/4000;
	//generate N milliseconds time
	for(;;)
	{
		//exit if zero(0)
		if (timeMS==0) break;
     224:	d1 f7       	brne	.-12     	; 0x21a <_ZL7delayMsj+0xa>
     226:	08 95       	ret

00000228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>:
//	| @OUTPUT  :  ----																|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+

void	class_HD44780_Drive::Interface(_lcd_INTERFACE lcdControlState,uint8_t *data)
{
     228:	fc 01       	movw	r30, r24
uint8_t sreg,tmp;

	//Save SREG state and disable interrupts
	sreg=SREG;
     22a:	2f b7       	in	r18, 0x3f	; 63
	cli();
     22c:	f8 94       	cli

	// case WRITE
	if (lcdControlState==_lcd_INTERFACE::CMD_WRITE || lcdControlState==_lcd_INTERFACE::DATA_WRITE)
     22e:	61 15       	cp	r22, r1
     230:	71 05       	cpc	r23, r1
     232:	21 f0       	breq	.+8      	; 0x23c <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x14>
     234:	62 30       	cpi	r22, 0x02	; 2
     236:	71 05       	cpc	r23, r1
     238:	d1 f4       	brne	.+52     	; 0x26e <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x46>
     23a:	03 c0       	rjmp	.+6      	; 0x242 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x1a>
	{
		if (lcdControlState==_lcd_INTERFACE::CMD_WRITE)
		{
			// Set RS=0 and WR=0 for command write
			_lcd_RS_OUTPUT&=~(1<<_lcd_RS_BIT);
     23c:	90 98       	cbi	0x12, 0	; 18
			_lcd_RW_OUTPUT&=~(1<<_lcd_RW_BIT);
     23e:	91 98       	cbi	0x12, 1	; 18
     240:	02 c0       	rjmp	.+4      	; 0x246 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x1e>
		}
		if (lcdControlState==_lcd_INTERFACE::DATA_WRITE)
		{
			// Set RS=1 and WR=0 for data write
			_lcd_RS_OUTPUT|=(1<<_lcd_RS_BIT);
     242:	90 9a       	sbi	0x12, 0	; 18
			_lcd_RW_OUTPUT&=~(1<<_lcd_RW_BIT);
     244:	91 98       	cbi	0x12, 1	; 18
		}
		// check interface size
		if (InterfaceSize==_lcd_INTERFACE::SIZE_8_BITS)
     246:	84 81       	ldd	r24, Z+4	; 0x04
     248:	95 81       	ldd	r25, Z+5	; 0x05
     24a:	08 97       	sbiw	r24, 0x08	; 8
     24c:	31 f4       	brne	.+12     	; 0x25a <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x32>
		{
			//8bits!! program as output and send data output 8 bits
			_lcd_DATA_OUTPUT=*data;
     24e:	da 01       	movw	r26, r20
     250:	8c 91       	ld	r24, X
     252:	82 bb       	out	0x12, r24	; 18
			//Set port to output
			_lcd_DATA_DIR=0xff;
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	81 bb       	out	0x11, r24	; 17
     258:	0a c0       	rjmp	.+20     	; 0x26e <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x46>
		}
		else
		{
			//4bits|| program as output with shift and send 4 bits data
			tmp=*data>>4;
			_lcd_DATA_OUTPUT=((~static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK)) & _lcd_DATA_OUTPUT)|(tmp<<_lcd_DATA_BIT);
     25a:	92 b3       	in	r25, 0x12	; 18
			_lcd_DATA_DIR=0xff;
		}
		else
		{
			//4bits|| program as output with shift and send 4 bits data
			tmp=*data>>4;
     25c:	da 01       	movw	r26, r20
     25e:	8c 91       	ld	r24, X
			_lcd_DATA_OUTPUT=((~static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK)) & _lcd_DATA_OUTPUT)|(tmp<<_lcd_DATA_BIT);
     260:	80 7f       	andi	r24, 0xF0	; 240
     262:	9f 70       	andi	r25, 0x0F	; 15
     264:	98 2b       	or	r25, r24
     266:	92 bb       	out	0x12, r25	; 18
			//Set port to output
			_lcd_DATA_DIR|=static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK);
     268:	81 b3       	in	r24, 0x11	; 17
     26a:	80 6f       	ori	r24, 0xF0	; 240
     26c:	81 bb       	out	0x11, r24	; 17
		}
	}
	//case READ
	if (lcdControlState==_lcd_INTERFACE::CMD_READ)
     26e:	61 30       	cpi	r22, 0x01	; 1
     270:	71 05       	cpc	r23, r1
     272:	19 f4       	brne	.+6      	; 0x27a <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x52>
	{
		// Set RS=0 and WR=1 for command read
		_lcd_RS_OUTPUT&=~(1<<_lcd_RS_BIT);
     274:	90 98       	cbi	0x12, 0	; 18
		_lcd_RW_OUTPUT|=(1<<_lcd_RW_BIT);
     276:	91 9a       	sbi	0x12, 1	; 18
     278:	05 c0       	rjmp	.+10     	; 0x284 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x5c>
	}
	//case READ
	if (lcdControlState==_lcd_INTERFACE::DATA_READ)
     27a:	63 30       	cpi	r22, 0x03	; 3
     27c:	71 05       	cpc	r23, r1
     27e:	11 f4       	brne	.+4      	; 0x284 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x5c>
	{
		// Set RS=1 and WR=1 for data read
		_lcd_RS_OUTPUT|=(1<<_lcd_RS_BIT);
     280:	90 9a       	sbi	0x12, 0	; 18
		_lcd_RW_OUTPUT|=(1<<_lcd_RW_BIT);
     282:	91 9a       	sbi	0x12, 1	; 18
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	//E high
	_lcd_E_OUTPUT|=(1<<_lcd_E_BIT);
     290:	92 9a       	sbi	0x12, 2	; 18
	...
	//Pweh
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");	
     29a:	00 00       	nop
	// read data from interface if the case
	if (lcdControlState==_lcd_INTERFACE::CMD_READ || lcdControlState==_lcd_INTERFACE::DATA_READ)
     29c:	6d 7f       	andi	r22, 0xFD	; 253
     29e:	61 30       	cpi	r22, 0x01	; 1
     2a0:	71 05       	cpc	r23, r1
     2a2:	61 f4       	brne	.+24     	; 0x2bc <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x94>
	{
		//read data according interface
		if (InterfaceSize==_lcd_INTERFACE::SIZE_8_BITS)
     2a4:	84 81       	ldd	r24, Z+4	; 0x04
     2a6:	95 81       	ldd	r25, Z+5	; 0x05
     2a8:	08 97       	sbiw	r24, 0x08	; 8
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x8c>
		{
			//read data
			*data=(_lcd_DATA_INPUT);
     2ac:	80 b3       	in	r24, 0x10	; 16
     2ae:	fa 01       	movw	r30, r20
     2b0:	80 83       	st	Z, r24
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh+0x94>
		}
		else
		{
			// read and shift
			tmp=(_lcd_DATA_INPUT & static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK))>>_lcd_DATA_BIT;
     2b4:	80 b3       	in	r24, 0x10	; 16
			// put into correctly position
			*data=tmp<<4;
     2b6:	80 7f       	andi	r24, 0xF0	; 240
     2b8:	da 01       	movw	r26, r20
     2ba:	8c 93       	st	X, r24
	...
	}
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
     2c4:	00 00       	nop
	//E low
	_lcd_E_OUTPUT&=~(1<<_lcd_E_BIT);
     2c6:	92 98       	cbi	0x12, 2	; 18
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	// set all to pull up
	_lcd_DATA_OUTPUT|=static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK);
     2d0:	82 b3       	in	r24, 0x12	; 18
     2d2:	80 6f       	ori	r24, 0xF0	; 240
     2d4:	82 bb       	out	0x12, r24	; 18
	// set as input
	_lcd_DATA_DIR&=~static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK);
     2d6:	81 b3       	in	r24, 0x11	; 17
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	81 bb       	out	0x11, r24	; 17
	...
	asm("nop");
	asm("nop");
	asm("nop");
	asm("nop");
	//restore SREG state
	SREG=sreg;
     2e4:	2f bf       	out	0x3f, r18	; 63
     2e6:	08 95       	ret

000002e8 <_ZN19class_HD44780_Drive7CmdReadEv>:
//	| @INPUT   :  																	|
//	| @OUTPUT  :  Address read bits 0..6 and busy state bit 7						|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
uint8_t class_HD44780_Drive::CmdRead()
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <_ZN19class_HD44780_Drive7CmdReadEv+0xa>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	8c 01       	movw	r16, r24
uint8_t tmp1,tmp2;

	Interface(_lcd_INTERFACE::CMD_READ,&tmp1);
     2f8:	ae 01       	movw	r20, r28
     2fa:	4e 5f       	subi	r20, 0xFE	; 254
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	92 df       	rcall	.-220    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>

	// check if 4 bits interface
	if (InterfaceSize==_lcd_INTERFACE::SIZE_4_BITS)
     304:	f8 01       	movw	r30, r16
     306:	84 81       	ldd	r24, Z+4	; 0x04
     308:	95 81       	ldd	r25, Z+5	; 0x05
     30a:	04 97       	sbiw	r24, 0x04	; 4
     30c:	79 f4       	brne	.+30     	; 0x32c <_ZN19class_HD44780_Drive7CmdReadEv+0x44>
	{
		// yes, read again
		Interface(_lcd_INTERFACE::CMD_READ,&tmp2);
     30e:	ae 01       	movw	r20, r28
     310:	4f 5f       	subi	r20, 0xFF	; 255
     312:	5f 4f       	sbci	r21, 0xFF	; 255
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	c8 01       	movw	r24, r16
     31a:	86 df       	rcall	.-244    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
		// return addr from 4 bits interface
		return (tmp1 & 0x0f0) | (tmp2>>4);
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	98 2f       	mov	r25, r24
     320:	92 95       	swap	r25
     322:	9f 70       	andi	r25, 0x0F	; 15
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	80 7f       	andi	r24, 0xF0	; 240
     328:	89 2b       	or	r24, r25
     32a:	01 c0       	rjmp	.+2      	; 0x32e <_ZN19class_HD44780_Drive7CmdReadEv+0x46>
	}
	else
	{
		//else return in 8 bits interface
		return tmp1;
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret

0000033c <_ZN19class_HD44780_Drive4BusyEv>:
//	| @INPUT   :  																	|
//	| @OUTPUT  :  return true if busy												|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
bool class_HD44780_Drive::Busy()
{
     33c:	cf 93       	push	r28
	#ifdef __DISPLAY_MODE_TEST__
		return false;
	#endif
	// check busy?
	if (BusyUse)
     33e:	fc 01       	movw	r30, r24
     340:	c0 85       	ldd	r28, Z+8	; 0x08
     342:	cc 23       	and	r28, r28
     344:	31 f0       	breq	.+12     	; 0x352 <_ZN19class_HD44780_Drive4BusyEv+0x16>
	{
		//yes, read
		if (CmdRead() & (1<<static_cast<uint8_t>(_lcd_BIT::BUSY)))
     346:	d0 df       	rcall	.-96     	; 0x2e8 <_ZN19class_HD44780_Drive7CmdReadEv>
     348:	c8 2f       	mov	r28, r24
     34a:	cc 1f       	adc	r28, r28
     34c:	cc 27       	eor	r28, r28
     34e:	cc 1f       	adc	r28, r28
     350:	04 c0       	rjmp	.+8      	; 0x35a <_ZN19class_HD44780_Drive4BusyEv+0x1e>
			return false;
	}
	else
	{
		//no, wait a busy delay
		delayMs(BusyDelay);
     352:	fc 01       	movw	r30, r24
     354:	82 85       	ldd	r24, Z+10	; 0x0a
     356:	93 85       	ldd	r25, Z+11	; 0x0b
     358:	5b df       	rcall	.-330    	; 0x210 <_ZL7delayMsj>
		// return not busy
		return false;
	}
}	
     35a:	8c 2f       	mov	r24, r28
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <_ZN19class_HD44780_Drive8CmdWriteEh>:
//	| @INPUT   :  data to be write													|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::CmdWrite(uint8_t data)
{
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	1f 92       	push	r1
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	8c 01       	movw	r16, r24
     370:	69 83       	std	Y+1, r22	; 0x01

	// wait exit busy 
	while (Busy());
     372:	c8 01       	movw	r24, r16
     374:	e3 df       	rcall	.-58     	; 0x33c <_ZN19class_HD44780_Drive4BusyEv>
     376:	81 11       	cpse	r24, r1
     378:	fc cf       	rjmp	.-8      	; 0x372 <_ZN19class_HD44780_Drive8CmdWriteEh+0x12>
	// send data
	Interface(_lcd_INTERFACE::CMD_WRITE,&data);
     37a:	ae 01       	movw	r20, r28
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	c8 01       	movw	r24, r16
     386:	50 df       	rcall	.-352    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>

	// check if 4 bits interface send low part

	if (InterfaceSize==_lcd_INTERFACE::SIZE_4_BITS)
     388:	f8 01       	movw	r30, r16
     38a:	84 81       	ldd	r24, Z+4	; 0x04
     38c:	95 81       	ldd	r25, Z+5	; 0x05
     38e:	04 97       	sbiw	r24, 0x04	; 4
     390:	59 f4       	brne	.+22     	; 0x3a8 <_ZN19class_HD44780_Drive8CmdWriteEh+0x48>
	{
		// yes, read again
		data<<=4;
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	82 95       	swap	r24
     396:	80 7f       	andi	r24, 0xF0	; 240
     398:	89 83       	std	Y+1, r24	; 0x01
		Interface(_lcd_INTERFACE::CMD_WRITE,&data);
     39a:	ae 01       	movw	r20, r28
     39c:	4f 5f       	subi	r20, 0xFF	; 255
     39e:	5f 4f       	sbci	r21, 0xFF	; 255
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	c8 01       	movw	r24, r16
     3a6:	40 df       	rcall	.-384    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
	}
}
     3a8:	0f 90       	pop	r0
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh>:
//	| @INPUT   : 																	|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  Enable And program all used pin of Display						|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::InterfaceInitialize(_lcd_INTERFACE lcdInterfaceType,uint8_t numberOfRows,uint8_t numberOfCols)
{
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	8c 01       	movw	r16, r24
     3ca:	e4 2e       	mov	r14, r20
    uint8_t sreg,tmp;

    //save SREG state and disabled interrupts
    sreg=SREG;
     3cc:	df b6       	in	r13, 0x3f	; 63
    cli();
     3ce:	f8 94       	cli
    // Set general characteristics
    Rows=numberOfRows;
     3d0:	fc 01       	movw	r30, r24
     3d2:	41 83       	std	Z+1, r20	; 0x01
    Row=1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	80 83       	st	Z, r24
    Cols=numberOfCols;
     3d8:	23 83       	std	Z+3, r18	; 0x03
    Col=1;
     3da:	82 83       	std	Z+2, r24	; 0x02
    // Process according interface type
    switch (static_cast<uint8_t>(lcdInterfaceType))
     3dc:	cb 01       	movw	r24, r22
     3de:	99 27       	eor	r25, r25
     3e0:	84 30       	cpi	r24, 0x04	; 4
     3e2:	91 05       	cpc	r25, r1
     3e4:	19 f0       	breq	.+6      	; 0x3ec <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh+0x38>
     3e6:	08 97       	sbiw	r24, 0x08	; 8
     3e8:	59 f0       	breq	.+22     	; 0x400 <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh+0x4c>
     3ea:	10 c0       	rjmp	.+32     	; 0x40c <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh+0x58>
    {
        //------------------------------
        //| Initialize 4 bits Interface
        //------------------------------
        case static_cast<uint8_t>(_lcd_INTERFACE::SIZE_4_BITS):
            InterfaceSize=lcdInterfaceType;
     3ec:	f8 01       	movw	r30, r16
     3ee:	75 83       	std	Z+5, r23	; 0x05
     3f0:	64 83       	std	Z+4, r22	; 0x04
            //Set data input with pull up 4 bits
            _lcd_DATA_OUTPUT|=static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK);
     3f2:	82 b3       	in	r24, 0x12	; 18
     3f4:	80 6f       	ori	r24, 0xF0	; 240
     3f6:	82 bb       	out	0x12, r24	; 18
            _lcd_DATA_DIR&=~static_cast<uint8_t>(_lcd_INTERFACE::DATA_MASK);
     3f8:	81 b3       	in	r24, 0x11	; 17
     3fa:	8f 70       	andi	r24, 0x0F	; 15
     3fc:	81 bb       	out	0x11, r24	; 17
            break;
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh+0x58>
        //------------------------------
        //| Initialize 8 bits Interface
        //------------------------------
        case static_cast<uint8_t>(_lcd_INTERFACE::SIZE_8_BITS):
            InterfaceSize=lcdInterfaceType;
     400:	f8 01       	movw	r30, r16
     402:	75 83       	std	Z+5, r23	; 0x05
     404:	64 83       	std	Z+4, r22	; 0x04
            //Set data input with pull up 8 bits
            _lcd_DATA_OUTPUT=0xff;
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	82 bb       	out	0x12, r24	; 18
            _lcd_DATA_DIR=0X00;
     40a:	11 ba       	out	0x11, r1	; 17
            break;
    }
    //Set E output low level
    _lcd_E_OUTPUT&=~(1<<_lcd_E_BIT);
     40c:	92 98       	cbi	0x12, 2	; 18
    _lcd_E_DIR|=(1<<_lcd_E_BIT);
     40e:	8a 9a       	sbi	0x11, 2	; 17
    //Set RW output high level (read)
    _lcd_RW_OUTPUT|=(1<<_lcd_RW_BIT);
     410:	91 9a       	sbi	0x12, 1	; 18
    _lcd_RW_DIR|=(1<<_lcd_RW_BIT);
     412:	89 9a       	sbi	0x11, 1	; 17
    //Set RS output high level (command)
    _lcd_RS_OUTPUT|=(1<<_lcd_RS_BIT);
     414:	90 9a       	sbi	0x12, 0	; 18
    _lcd_RS_DIR|=(1<<_lcd_RS_BIT);
     416:	88 9a       	sbi	0x11, 0	; 17
    //wait power stabilize
	#ifndef __DISPLAY_MODE_TEST__
		delayMs(100);
     418:	84 e6       	ldi	r24, 0x64	; 100
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	f9 de       	rcall	.-526    	; 0x210 <_ZL7delayMsj>
	#endif
    //send start control initialization
    tmp=static_cast<uint8_t>(_lcd_CMD::FUNCTION_SET) | (1<<static_cast<uint8_t>(_lcd_BIT::DL)) | (1<<static_cast<uint8_t>(_lcd_BIT::N)) | (0<<static_cast<uint8_t>(_lcd_BIT::F));
     41e:	0f 2e       	mov	r0, r31
     420:	f8 e3       	ldi	r31, 0x38	; 56
     422:	ff 2e       	mov	r15, r31
     424:	f0 2d       	mov	r31, r0
     426:	f9 82       	std	Y+1, r15	; 0x01
    Interface(_lcd_INTERFACE::CMD_WRITE,&tmp);
     428:	ae 01       	movw	r20, r28
     42a:	4f 5f       	subi	r20, 0xFF	; 255
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	c8 01       	movw	r24, r16
     434:	f9 de       	rcall	.-526    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
	#ifndef __DISPLAY_MODE_TEST__
		delayMs(8);
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	ea de       	rcall	.-556    	; 0x210 <_ZL7delayMsj>
	#endif
    tmp=static_cast<uint8_t>(_lcd_CMD::FUNCTION_SET) | (1<<static_cast<uint8_t>(_lcd_BIT::DL)) | (1<<static_cast<uint8_t>(_lcd_BIT::N)) | (0<<static_cast<uint8_t>(_lcd_BIT::F));
     43c:	f9 82       	std	Y+1, r15	; 0x01
    Interface(_lcd_INTERFACE::CMD_WRITE,&tmp);
     43e:	ae 01       	movw	r20, r28
     440:	4f 5f       	subi	r20, 0xFF	; 255
     442:	5f 4f       	sbci	r21, 0xFF	; 255
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	c8 01       	movw	r24, r16
     44a:	ee de       	rcall	.-548    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
	#ifndef __DISPLAY_MODE_TEST__
		delayMs(1);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	df de       	rcall	.-578    	; 0x210 <_ZL7delayMsj>
	#endif
    tmp=static_cast<uint8_t>(_lcd_CMD::FUNCTION_SET) | (1<<static_cast<uint8_t>(_lcd_BIT::DL)) | (1<<static_cast<uint8_t>(_lcd_BIT::N)) | (0<<static_cast<uint8_t>(_lcd_BIT::F));
     452:	f9 82       	std	Y+1, r15	; 0x01
    Interface(_lcd_INTERFACE::CMD_WRITE,&tmp);
     454:	ae 01       	movw	r20, r28
     456:	4f 5f       	subi	r20, 0xFF	; 255
     458:	5f 4f       	sbci	r21, 0xFF	; 255
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	c8 01       	movw	r24, r16
     460:	e3 de       	rcall	.-570    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
	#ifndef __DISPLAY_MODE_TEST__
		delayMs(5);
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	d4 de       	rcall	.-600    	; 0x210 <_ZL7delayMsj>
	#endif
	if (numberOfRows==1)
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	ef 12       	cpse	r14, r31
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__stack+0x17>
	{
		CmdWrite(static_cast<uint8_t>(_lcd_CMD::FUNCTION_SET) | (0<<static_cast<uint8_t>(_lcd_BIT::DL)) | (0<<static_cast<uint8_t>(_lcd_BIT::N)) | (0<<static_cast<uint8_t>(_lcd_BIT::F)));
     46e:	60 e2       	ldi	r22, 0x20	; 32
     470:	c8 01       	movw	r24, r16
     472:	76 df       	rcall	.-276    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     474:	03 c0       	rjmp	.+6      	; 0x47c <__stack+0x1d>
	}
	else
	{
		CmdWrite(static_cast<uint8_t>(_lcd_CMD::FUNCTION_SET) | (0<<static_cast<uint8_t>(_lcd_BIT::DL)) | (1<<static_cast<uint8_t>(_lcd_BIT::N)) | (0<<static_cast<uint8_t>(_lcd_BIT::F)));
     476:	68 e2       	ldi	r22, 0x28	; 40
     478:	c8 01       	movw	r24, r16
     47a:	72 df       	rcall	.-284    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
	}
    REG2=static_cast<uint8_t>(_lcd_CMD::ENTRY_MODE_SET) | (1<<static_cast<uint8_t>(_lcd_BIT::ID)) | (0<<static_cast<uint8_t>(_lcd_BIT::S));
     47c:	86 e0       	ldi	r24, 0x06	; 6
     47e:	f8 01       	movw	r30, r16
     480:	86 83       	std	Z+6, r24	; 0x06
    CmdWrite(REG2);
     482:	66 e0       	ldi	r22, 0x06	; 6
     484:	c8 01       	movw	r24, r16
     486:	6c df       	rcall	.-296    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
    REG3=static_cast<uint8_t>(_lcd_CMD::ON_OFF) | (1<<static_cast<uint8_t>(_lcd_BIT::D)) | (1<<static_cast<uint8_t>(_lcd_BIT::C)) | (0<<static_cast<uint8_t>(_lcd_BIT::B));
     488:	8e e0       	ldi	r24, 0x0E	; 14
     48a:	f8 01       	movw	r30, r16
     48c:	87 83       	std	Z+7, r24	; 0x07
    CmdWrite(REG3);
     48e:	6e e0       	ldi	r22, 0x0E	; 14
     490:	c8 01       	movw	r24, r16
     492:	66 df       	rcall	.-308    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
    //restore SREG state
    SREG=sreg;
     494:	df be       	out	0x3f, r13	; 63
}
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	08 95       	ret

000004a8 <_ZN19class_HD44780_Drive9DataWriteEh>:
//	| @INPUT   :  data to be write													|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::DataWrite(uint8_t data)
{
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	1f 92       	push	r1
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	8c 01       	movw	r16, r24
     4b8:	69 83       	std	Y+1, r22	; 0x01
	// wait exit busy 
	while (Busy());
     4ba:	c8 01       	movw	r24, r16
     4bc:	3f df       	rcall	.-386    	; 0x33c <_ZN19class_HD44780_Drive4BusyEv>
     4be:	81 11       	cpse	r24, r1
     4c0:	fc cf       	rjmp	.-8      	; 0x4ba <_ZN19class_HD44780_Drive9DataWriteEh+0x12>
	// send data
	Interface(_lcd_INTERFACE::DATA_WRITE,&data);
     4c2:	ae 01       	movw	r20, r28
     4c4:	4f 5f       	subi	r20, 0xFF	; 255
     4c6:	5f 4f       	sbci	r21, 0xFF	; 255
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	c8 01       	movw	r24, r16
     4ce:	ac de       	rcall	.-680    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>

	// check if 4 bits interface send low part
	if (InterfaceSize==_lcd_INTERFACE::SIZE_4_BITS)
     4d0:	f8 01       	movw	r30, r16
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	95 81       	ldd	r25, Z+5	; 0x05
     4d6:	04 97       	sbiw	r24, 0x04	; 4
     4d8:	59 f4       	brne	.+22     	; 0x4f0 <_ZN19class_HD44780_Drive9DataWriteEh+0x48>
	{
		// yes, read again
		data<<=4;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	82 95       	swap	r24
     4de:	80 7f       	andi	r24, 0xF0	; 240
     4e0:	89 83       	std	Y+1, r24	; 0x01
		Interface(_lcd_INTERFACE::DATA_WRITE,&data);
     4e2:	ae 01       	movw	r20, r28
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	c8 01       	movw	r24, r16
     4ee:	9c de       	rcall	.-712    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
	}
}	
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <_ZN19class_HD44780_Drive8DataReadEv>:
//	| @INPUT   :  																	|
//	| @OUTPUT  :  data																|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
uint8_t class_HD44780_Drive::DataRead()
{
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	00 d0       	rcall	.+0      	; 0x506 <_ZN19class_HD44780_Drive8DataReadEv+0xa>
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	8c 01       	movw	r16, r24
uint8_t tmp1,tmp2;

	// wait exit busy 
	while (Busy());
     50c:	c8 01       	movw	r24, r16
     50e:	16 df       	rcall	.-468    	; 0x33c <_ZN19class_HD44780_Drive4BusyEv>
     510:	81 11       	cpse	r24, r1
     512:	fc cf       	rjmp	.-8      	; 0x50c <_ZN19class_HD44780_Drive8DataReadEv+0x10>

	// read data
	Interface(_lcd_INTERFACE::DATA_READ,&tmp1);
     514:	ae 01       	movw	r20, r28
     516:	4e 5f       	subi	r20, 0xFE	; 254
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	63 e0       	ldi	r22, 0x03	; 3
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	c8 01       	movw	r24, r16
     520:	83 de       	rcall	.-762    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>

	// check if 4 bits interface
	if (InterfaceSize==_lcd_INTERFACE::SIZE_4_BITS)
     522:	f8 01       	movw	r30, r16
     524:	84 81       	ldd	r24, Z+4	; 0x04
     526:	95 81       	ldd	r25, Z+5	; 0x05
     528:	04 97       	sbiw	r24, 0x04	; 4
     52a:	79 f4       	brne	.+30     	; 0x54a <_ZN19class_HD44780_Drive8DataReadEv+0x4e>
	{
		// yes, read again
		Interface(_lcd_INTERFACE::DATA_READ,&tmp2);
     52c:	ae 01       	movw	r20, r28
     52e:	4f 5f       	subi	r20, 0xFF	; 255
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	c8 01       	movw	r24, r16
     538:	77 de       	rcall	.-786    	; 0x228 <_ZN19class_HD44780_Drive9InterfaceE18enum_lcd_INTERFACEPh>
		// return addr from 4 bits interface
		return (tmp1 & 0x0f0) | (tmp2>>4);
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	98 2f       	mov	r25, r24
     53e:	92 95       	swap	r25
     540:	9f 70       	andi	r25, 0x0F	; 15
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	80 7f       	andi	r24, 0xF0	; 240
     546:	89 2b       	or	r24, r25
     548:	01 c0       	rjmp	.+2      	; 0x54c <_ZN19class_HD44780_Drive8DataReadEv+0x50>
	}
	else
	{
		//else return in 8 bits interface
		return tmp1;
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <_ZN19class_HD44780_Drive13PresenceCheckE18enum_lcd_INTERFACE>:
//	| @INPUT   :  lcdIntefaceType lcd_SIZE_4_BITS or lcd_SIZE_8_BITS				|
//	| @OUTPUT  :  true present, false not present                                   |
//	| @REMARKS :  this function must be used preferred before lcdInit				|
//	+-------------------------------------------------------------------------------+
bool class_HD44780_Drive::PresenceCheck(_lcd_INTERFACE lcdInterfaceType)
{
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
    uint8_t tmp,a,b;
    //save busy use
    tmp=BusyUse;
     564:	08 85       	ldd	r16, Y+8	; 0x08
		//	| @OUTPUT  :  ----																|
		//	| @REMARKS :  																	|
		//	+-------------------------------------------------------------------------------+
		void	inline SetBusyUse(bool busyType)
		{
			BusyUse=busyType;
     566:	18 86       	std	Y+8, r1	; 0x08
    //disable busy
    SetBusyUse(false);
    //Initialize display interface
    InterfaceInitialize(lcdInterfaceType,Rows,Cols);
     568:	2b 81       	ldd	r18, Y+3	; 0x03
     56a:	49 81       	ldd	r20, Y+1	; 0x01
     56c:	23 df       	rcall	.-442    	; 0x3b4 <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh>
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::SetDDRAMAddr(uint8_t addr)
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::DDRAM_ADDR) | (addr & 0x7f));
     56e:	60 e8       	ldi	r22, 0x80	; 128
     570:	ce 01       	movw	r24, r28
     572:	f6 de       	rcall	.-532    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
    //Initialize display interface
    InterfaceInitialize(lcdInterfaceType,Rows,Cols);
    //set ddram to 0
    SetDDRAMAddr(0);
    //write 27 18 in consecutive address 0 & 1
    DataWrite(27);
     574:	6b e1       	ldi	r22, 0x1B	; 27
     576:	ce 01       	movw	r24, r28
     578:	97 df       	rcall	.-210    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
    DataWrite(18);
     57a:	62 e1       	ldi	r22, 0x12	; 18
     57c:	ce 01       	movw	r24, r28
     57e:	94 df       	rcall	.-216    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::SetDDRAMAddr(uint8_t addr)
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::DDRAM_ADDR) | (addr & 0x7f));
     580:	60 e8       	ldi	r22, 0x80	; 128
     582:	ce 01       	movw	r24, r28
     584:	ed de       	rcall	.-550    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
    //write 27 18 in consecutive address 0 & 1
    DataWrite(27);
    DataWrite(18);
    //read address 0 & 1 to check
    SetDDRAMAddr(0);
    a=DataRead();
     586:	ce 01       	movw	r24, r28
     588:	b9 df       	rcall	.-142    	; 0x4fc <_ZN19class_HD44780_Drive8DataReadEv>
     58a:	18 2f       	mov	r17, r24
    b=DataRead();
     58c:	ce 01       	movw	r24, r28
     58e:	b6 df       	rcall	.-148    	; 0x4fc <_ZN19class_HD44780_Drive8DataReadEv>
     590:	98 2f       	mov	r25, r24
     592:	08 87       	std	Y+8, r16	; 0x08
    //Restore busy use value
    SetBusyUse(tmp);
    if (a==27 && b==18)
     594:	1b 31       	cpi	r17, 0x1B	; 27
     596:	29 f4       	brne	.+10     	; 0x5a2 <_ZN19class_HD44780_Drive13PresenceCheckE18enum_lcd_INTERFACE+0x48>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	92 31       	cpi	r25, 0x12	; 18
     59c:	19 f0       	breq	.+6      	; 0x5a4 <_ZN19class_HD44780_Drive13PresenceCheckE18enum_lcd_INTERFACE+0x4a>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <_ZN19class_HD44780_Drive13PresenceCheckE18enum_lcd_INTERFACE+0x4a>
        return true;
    }
    else
    {
        //display not present
        return false;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <_ZN19class_HD44780_Drive3ClsEv>:
//	| @INPUT   : 																	|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  Set Display Row to 1 and Col to 1									|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::Cls()
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ec 01       	movw	r28, r24
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::CLEAR));
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	d4 de       	rcall	.-600    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
	Col=1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	8a 83       	std	Y+2, r24	; 0x02
	Row=1;
     5bc:	88 83       	st	Y, r24
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <_ZN19class_HD44780_DriveC1E18enum_lcd_INTERFACEhh>:
//  |             numberOfRows, numnberOfCols                                       |
//	| @OUTPUT  :                                                                    |
//	| @REMARKS :  interrupts are disabled during initialization then restored		|
//	+-------------------------------------------------------------------------------+

class_HD44780_Drive::class_HD44780_Drive(_lcd_INTERFACE lcdInterfaceType,uint8_t numberOfRows,uint8_t numberOfCols)
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
     5d0:	8b 01       	movw	r16, r22
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9d 83       	std	Y+5, r25	; 0x05
     5d8:	8c 83       	std	Y+4, r24	; 0x04
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	88 87       	std	Y+8, r24	; 0x08
     5de:	19 86       	std	Y+9, r1	; 0x09
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9b 87       	std	Y+11, r25	; 0x0b
     5e6:	8a 87       	std	Y+10, r24	; 0x0a
{
    uint8_t sreg;

    //Save SREG
    sreg=SREG;
     5e8:	ff b6       	in	r15, 0x3f	; 63
    //Disable Interrupts
    cli();
     5ea:	f8 94       	cli
     5ec:	18 86       	std	Y+8, r1	; 0x08
		//	| OUTPUT  :  ----																|
		//	| REMARKS :  																	|
		//	+-------------------------------------------------------------------------------+
		void	inline SetBusyDelay(unsigned int time)
		{
			BusyDelay=time;
     5ee:	84 e1       	ldi	r24, 0x14	; 20
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	9b 87       	std	Y+11, r25	; 0x0b
     5f4:	8a 87       	std	Y+10, r24	; 0x0a
    SetBusyUse(false);
    SetBusyDelay(20);
    //Initialize interface
    InterfaceInitialize(lcdInterfaceType,numberOfRows,numberOfCols);
     5f6:	ce 01       	movw	r24, r28
     5f8:	dd de       	rcall	.-582    	; 0x3b4 <_ZN19class_HD44780_Drive19InterfaceInitializeE18enum_lcd_INTERFACEhh>
    //first check if present
    PresentFlag=PresenceCheck(lcdInterfaceType);
     5fa:	b8 01       	movw	r22, r16
     5fc:	ce 01       	movw	r24, r28
     5fe:	ad df       	rcall	.-166    	; 0x55a <_ZN19class_HD44780_Drive13PresenceCheckE18enum_lcd_INTERFACE>
     600:	89 87       	std	Y+9, r24	; 0x09
    if (PresentFlag==true)
     602:	88 23       	and	r24, r24
     604:	11 f0       	breq	.+4      	; 0x60a <_ZN19class_HD44780_DriveC1E18enum_lcd_INTERFACEhh+0x46>
    {
        //Clear screen and set number of rows and cols
        Cls();
     606:	ce 01       	movw	r24, r28
     608:	d2 df       	rcall	.-92     	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
    }
    //set screen buffer char and pattern to null
    ScrSavePtr=nullptr;
     60a:	1d 86       	std	Y+13, r1	; 0x0d
     60c:	1c 86       	std	Y+12, r1	; 0x0c
    PatternSavePtr=nullptr;
     60e:	1f 86       	std	Y+15, r1	; 0x0f
     610:	1e 86       	std	Y+14, r1	; 0x0e
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	9b 87       	std	Y+11, r25	; 0x0b
     618:	8a 87       	std	Y+10, r24	; 0x0a
		//	| @OUTPUT  :  ----																|
		//	| @REMARKS :  																	|
		//	+-------------------------------------------------------------------------------+
		void	inline SetBusyUse(bool busyType)
		{
			BusyUse=busyType;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	88 87       	std	Y+8, r24	; 0x08
    SetBusyDelay(2);
    SetBusyUse(true);
    //restore SREG state
    SREG=sreg;
     61e:	ff be       	out	0x3f, r15	; 63
    //return lcd present status
    //return PresentFlag;
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	ff 90       	pop	r15
     62a:	08 95       	ret

0000062c <_ZN19class_HD44780_Drive10ScrollLeftEv>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::ScrollLeft()
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::SHIFT) | (1<<static_cast<uint8_t>(_lcd_BIT::SC)) | (0<<static_cast<uint8_t>(_lcd_BIT::RL)));
     62c:	68 e1       	ldi	r22, 0x18	; 24
     62e:	98 de       	rcall	.-720    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     630:	08 95       	ret

00000632 <_ZN19class_HD44780_Drive11ScrollRightEv>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::ScrollRight()
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::SHIFT) | (1<<static_cast<uint8_t>(_lcd_BIT::SC)) | (1<<static_cast<uint8_t>(_lcd_BIT::RL)));
     632:	6c e1       	ldi	r22, 0x1C	; 28
     634:	95 de       	rcall	.-726    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     636:	08 95       	ret

00000638 <_ZN19class_HD44780_Drive14SetCursorStateEb>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::SetCursorState(bool cursorState)
{
	if (cursorState)
     638:	66 23       	and	r22, r22
     63a:	29 f0       	breq	.+10     	; 0x646 <_ZN19class_HD44780_Drive14SetCursorStateEb+0xe>
	{
		REG3|=(1<<static_cast<uint8_t>(_lcd_BIT::C));
     63c:	fc 01       	movw	r30, r24
     63e:	27 81       	ldd	r18, Z+7	; 0x07
     640:	22 60       	ori	r18, 0x02	; 2
     642:	27 83       	std	Z+7, r18	; 0x07
     644:	04 c0       	rjmp	.+8      	; 0x64e <_ZN19class_HD44780_Drive14SetCursorStateEb+0x16>
	}
	else
	{
		REG3&=~(1<<static_cast<uint8_t>(_lcd_BIT::C));
     646:	fc 01       	movw	r30, r24
     648:	27 81       	ldd	r18, Z+7	; 0x07
     64a:	2d 7f       	andi	r18, 0xFD	; 253
     64c:	27 83       	std	Z+7, r18	; 0x07
	}
	//send command to display
	CmdWrite(REG3);
     64e:	fc 01       	movw	r30, r24
     650:	67 81       	ldd	r22, Z+7	; 0x07
     652:	86 de       	rcall	.-756    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     654:	08 95       	ret

00000656 <_ZN19class_HD44780_Drive16MoveCursorToLeftEv>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::MoveCursorToLeft()
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::SHIFT) | (0<<static_cast<uint8_t>(_lcd_BIT::SC)) | (0<<static_cast<uint8_t>(_lcd_BIT::RL)));
     656:	60 e1       	ldi	r22, 0x10	; 16
     658:	83 de       	rcall	.-762    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     65a:	08 95       	ret

0000065c <_ZN19class_HD44780_Drive17MoveCursorToRightEv>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::MoveCursorToRight()
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::SHIFT) | (0<<static_cast<uint8_t>(_lcd_BIT::SC)) | (1<<static_cast<uint8_t>(_lcd_BIT::RL)));
     65c:	64 e1       	ldi	r22, 0x14	; 20
     65e:	80 de       	rcall	.-768    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     660:	08 95       	ret

00000662 <_ZN19class_HD44780_Drive19SetCursorBlinkStateEb>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::SetCursorBlinkState(bool blinkState)
{
	if (blinkState)
     662:	66 23       	and	r22, r22
     664:	29 f0       	breq	.+10     	; 0x670 <_ZN19class_HD44780_Drive19SetCursorBlinkStateEb+0xe>
	{
		REG3|=(1<<static_cast<uint8_t>(_lcd_BIT::B));
     666:	fc 01       	movw	r30, r24
     668:	27 81       	ldd	r18, Z+7	; 0x07
     66a:	21 60       	ori	r18, 0x01	; 1
     66c:	27 83       	std	Z+7, r18	; 0x07
     66e:	04 c0       	rjmp	.+8      	; 0x678 <_ZN19class_HD44780_Drive19SetCursorBlinkStateEb+0x16>
	}
	else
	{
		REG3&=~(1<<static_cast<uint8_t>(_lcd_BIT::B));
     670:	fc 01       	movw	r30, r24
     672:	27 81       	ldd	r18, Z+7	; 0x07
     674:	2e 7f       	andi	r18, 0xFE	; 254
     676:	27 83       	std	Z+7, r18	; 0x07
	}
	//send command to display
	CmdWrite(REG3);
     678:	fc 01       	movw	r30, r24
     67a:	67 81       	ldd	r22, Z+7	; 0x07
     67c:	71 de       	rcall	.-798    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     67e:	08 95       	ret

00000680 <_ZN19class_HD44780_Drive6LocateEhh>:
//	+-------------------------------------------------------------------------------+
void class_HD44780_Drive::Locate(uint8_t row,uint8_t col)
{
uint8_t tmp;

	if (row>=1 && row<=Rows && col>=1 && col<=Cols)
     680:	66 23       	and	r22, r22
     682:	a9 f0       	breq	.+42     	; 0x6ae <_ZN19class_HD44780_Drive6LocateEhh+0x2e>
     684:	fc 01       	movw	r30, r24
     686:	21 81       	ldd	r18, Z+1	; 0x01
     688:	26 17       	cp	r18, r22
     68a:	88 f0       	brcs	.+34     	; 0x6ae <_ZN19class_HD44780_Drive6LocateEhh+0x2e>
     68c:	44 23       	and	r20, r20
     68e:	79 f0       	breq	.+30     	; 0x6ae <_ZN19class_HD44780_Drive6LocateEhh+0x2e>
     690:	23 81       	ldd	r18, Z+3	; 0x03
     692:	24 17       	cp	r18, r20
     694:	60 f0       	brcs	.+24     	; 0x6ae <_ZN19class_HD44780_Drive6LocateEhh+0x2e>
	{
		Row=row;
     696:	60 83       	st	Z, r22
		Col=col;
     698:	42 83       	std	Z+2, r20	; 0x02
		row--;
		col--;
     69a:	41 50       	subi	r20, 0x01	; 1
		tmp=static_cast<uint8_t>(_lcd_CMD::DDRAM_ADDR) + (col & 0x3f);
     69c:	4f 73       	andi	r20, 0x3F	; 63
		if (row!=0) tmp+=0x40;
     69e:	61 30       	cpi	r22, 0x01	; 1
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <_ZN19class_HD44780_Drive6LocateEhh+0x28>
	{
		Row=row;
		Col=col;
		row--;
		col--;
		tmp=static_cast<uint8_t>(_lcd_CMD::DDRAM_ADDR) + (col & 0x3f);
     6a2:	60 e8       	ldi	r22, 0x80	; 128
     6a4:	64 0f       	add	r22, r20
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <_ZN19class_HD44780_Drive6LocateEhh+0x2c>
		if (row!=0) tmp+=0x40;
     6a8:	60 ec       	ldi	r22, 0xC0	; 192
     6aa:	64 0f       	add	r22, r20
		CmdWrite(tmp);
     6ac:	59 de       	rcall	.-846    	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     6ae:	08 95       	ret

000006b0 <_ZN19class_HD44780_Drive4PutCEc>:
//	| @INPUT   :  character character to be displayed								|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PutC(char character)
{
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ec 01       	movw	r28, r24
	DataWrite(character);
     6b6:	f8 de       	rcall	.-528    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
	Col++;
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	8a 83       	std	Y+2, r24	; 0x02
	if (Col>Cols)
     6be:	9b 81       	ldd	r25, Y+3	; 0x03
     6c0:	98 17       	cp	r25, r24
     6c2:	40 f4       	brcc	.+16     	; 0x6d4 <_ZN19class_HD44780_Drive4PutCEc+0x24>
	{
		Col=1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8a 83       	std	Y+2, r24	; 0x02
		Row++;
     6c8:	68 81       	ld	r22, Y
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	68 83       	st	Y, r22
		Locate(Row,Col);
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	ce 01       	movw	r24, r28
     6d2:	d6 df       	rcall	.-84     	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
	}
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <_ZN19class_HD44780_Drive4PutSEPc>:
//	| @INPUT   :  *msg string into sram												|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PutS(char *string)
{
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	fb 01       	movw	r30, r22
	  uint8_t data;
	  //send until zero is found
	  for(;;)
	  {
        //get char for sram
        	  data=*string;
     6e6:	60 81       	ld	r22, Z
        //check if end
    	  if (data==0) break;
     6e8:	66 23       	and	r22, r22
     6ea:	f9 f0       	breq	.+62     	; 0x72a <_ZN19class_HD44780_Drive4PutSEPc+0x50>
     6ec:	8f 01       	movw	r16, r30
     6ee:	ec 01       	movw	r28, r24
     6f0:	0f 5f       	subi	r16, 0xFF	; 255
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
        	      Row++;
        	      Locate(Row,Col);
        	      break;
        	  //carriage return?
        	  case '\r':
        	      Col=1;
     6f4:	ff 24       	eor	r15, r15
     6f6:	f3 94       	inc	r15
        //get char for sram
        	  data=*string;
        //check if end
    	  if (data==0) break;
        //process according data
    	  switch (data)
     6f8:	6a 30       	cpi	r22, 0x0A	; 10
     6fa:	19 f0       	breq	.+6      	; 0x702 <_ZN19class_HD44780_Drive4PutSEPc+0x28>
     6fc:	6d 30       	cpi	r22, 0x0D	; 13
     6fe:	41 f0       	breq	.+16     	; 0x710 <_ZN19class_HD44780_Drive4PutSEPc+0x36>
     700:	0d c0       	rjmp	.+26     	; 0x71c <_ZN19class_HD44780_Drive4PutSEPc+0x42>
    	  {
        	  //new line ?
        	  case '\n':
        	      Row++;
     702:	68 81       	ld	r22, Y
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	68 83       	st	Y, r22
        	      Locate(Row,Col);
     708:	4a 81       	ldd	r20, Y+2	; 0x02
     70a:	ce 01       	movw	r24, r28
     70c:	b9 df       	rcall	.-142    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
        	      break;
     70e:	08 c0       	rjmp	.+16     	; 0x720 <_ZN19class_HD44780_Drive4PutSEPc+0x46>
        	  //carriage return?
        	  case '\r':
        	      Col=1;
     710:	fa 82       	std	Y+2, r15	; 0x02
        	      Locate(Row,Col);
     712:	4f 2d       	mov	r20, r15
     714:	68 81       	ld	r22, Y
     716:	ce 01       	movw	r24, r28
     718:	b3 df       	rcall	.-154    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
        	      break;
     71a:	02 c0       	rjmp	.+4      	; 0x720 <_ZN19class_HD44780_Drive4PutSEPc+0x46>
        	  //other char?
        	  default:
        	     PutC(data);
     71c:	ce 01       	movw	r24, r28
     71e:	c8 df       	rcall	.-112    	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
	  uint8_t data;
	  //send until zero is found
	  for(;;)
	  {
        //get char for sram
        	  data=*string;
     720:	f8 01       	movw	r30, r16
     722:	61 91       	ld	r22, Z+
     724:	8f 01       	movw	r16, r30
        //check if end
    	  if (data==0) break;
     726:	61 11       	cpse	r22, r1
     728:	e7 cf       	rjmp	.-50     	; 0x6f8 <_ZN19class_HD44780_Drive4PutSEPc+0x1e>
        	     break;
    	  }
    	  //next char
    	  string++;
	  }
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	08 95       	ret

00000736 <_ZN19class_HD44780_Drive5PutSFEPKc>:
//	| @INPUT   :  *msg string into sram												|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PutSF(const char *string)
{
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	8c 01       	movw	r16, r24
     742:	eb 01       	movw	r28, r22
	  uint8_t data;
	  //send until zero is found
	  for(;;)
	  {
        //get data form progmem
            data=pgm_read_byte(string);
     744:	fb 01       	movw	r30, r22
     746:	64 91       	lpm	r22, Z
        //check if end
    	  if (data==0) break;
     748:	66 23       	and	r22, r22
     74a:	e9 f0       	breq	.+58     	; 0x786 <_ZN19class_HD44780_Drive5PutSFEPKc+0x50>
        	      Row++;
        	      Locate(Row,Col);
        	      break;
        	  //carriage return?
        	  case '\r':
        	      Col=1;
     74c:	ff 24       	eor	r15, r15
     74e:	f3 94       	inc	r15
        //get data form progmem
            data=pgm_read_byte(string);
        //check if end
    	  if (data==0) break;
        //process according data
    	  switch (data)
     750:	6a 30       	cpi	r22, 0x0A	; 10
     752:	19 f0       	breq	.+6      	; 0x75a <_ZN19class_HD44780_Drive5PutSFEPKc+0x24>
     754:	6d 30       	cpi	r22, 0x0D	; 13
     756:	49 f0       	breq	.+18     	; 0x76a <_ZN19class_HD44780_Drive5PutSFEPKc+0x34>
     758:	0f c0       	rjmp	.+30     	; 0x778 <_ZN19class_HD44780_Drive5PutSFEPKc+0x42>
    	  {
        	  //new line ?
        	  case '\n':
        	      Row++;
     75a:	f8 01       	movw	r30, r16
     75c:	60 81       	ld	r22, Z
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	60 83       	st	Z, r22
        	      Locate(Row,Col);
     762:	42 81       	ldd	r20, Z+2	; 0x02
     764:	c8 01       	movw	r24, r16
     766:	8c df       	rcall	.-232    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
        	      break;
     768:	09 c0       	rjmp	.+18     	; 0x77c <_ZN19class_HD44780_Drive5PutSFEPKc+0x46>
        	  //carriage return?
        	  case '\r':
        	      Col=1;
     76a:	f8 01       	movw	r30, r16
     76c:	f2 82       	std	Z+2, r15	; 0x02
        	      Locate(Row,Col);
     76e:	4f 2d       	mov	r20, r15
     770:	60 81       	ld	r22, Z
     772:	c8 01       	movw	r24, r16
     774:	85 df       	rcall	.-246    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
        	      break;
     776:	02 c0       	rjmp	.+4      	; 0x77c <_ZN19class_HD44780_Drive5PutSFEPKc+0x46>
        	  //other char?
        	  default:
        	     PutC(data);
     778:	c8 01       	movw	r24, r16
     77a:	9a df       	rcall	.-204    	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
        	     break;
    	  }
    	  //next char
    	  string++;
     77c:	21 96       	adiw	r28, 0x01	; 1
	  uint8_t data;
	  //send until zero is found
	  for(;;)
	  {
        //get data form progmem
            data=pgm_read_byte(string);
     77e:	fe 01       	movw	r30, r28
     780:	64 91       	lpm	r22, Z
        //check if end
    	  if (data==0) break;
     782:	61 11       	cpse	r22, r1
     784:	e5 cf       	rjmp	.-54     	; 0x750 <_ZN19class_HD44780_Drive5PutSFEPKc+0x1a>
        	     break;
    	  }
    	  //next char
    	  string++;
	  }
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	08 95       	ret

00000792 <_ZN19class_HD44780_Drive12SetCGRAMAddrEh>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::SetCGRAMAddr(uint8_t addr)
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::CGRAM_ADDR) | (addr & 0x3f));
     792:	6f 73       	andi	r22, 0x3F	; 63
     794:	60 64       	ori	r22, 0x40	; 64
     796:	e4 dd       	rcall	.-1080   	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     798:	08 95       	ret

0000079a <_ZN19class_HD44780_Drive12SetDDRAMAddrEh>:
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::SetDDRAMAddr(uint8_t addr)
{
	CmdWrite(static_cast<uint8_t>(_lcd_CMD::DDRAM_ADDR) | (addr & 0x7f));
     79a:	60 68       	ori	r22, 0x80	; 128
     79c:	e1 dd       	rcall	.-1086   	; 0x360 <_ZN19class_HD44780_Drive8CmdWriteEh>
     79e:	08 95       	ret

000007a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>:
//	|	     *fString	flash string with 8 sequential definitions byte				|
//	| @OUTPUT  : 																	|
//	| @REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::RedefineChar(uint8_t character,const char *fString)
{
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	8c 01       	movw	r16, r24
     7ae:	ea 01       	movw	r28, r20
uint8_t i;
	// set initial address of character to be redefined
	SetCGRAMAddr(character<<3);
     7b0:	66 0f       	add	r22, r22
     7b2:	66 0f       	add	r22, r22
     7b4:	66 0f       	add	r22, r22
     7b6:	ed df       	rcall	.-38     	; 0x792 <_ZN19class_HD44780_Drive12SetCGRAMAddrEh>
     7b8:	7e 01       	movw	r14, r28
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	e8 0e       	add	r14, r24
     7be:	f1 1c       	adc	r15, r1
	// redefine character
	for(i=0;i<8;i++)
	{
		//get character from flash and redefine
		DataWrite(pgm_read_byte(fString));
     7c0:	fe 01       	movw	r30, r28
     7c2:	64 91       	lpm	r22, Z
     7c4:	c8 01       	movw	r24, r16
     7c6:	70 de       	rcall	.-800    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
		fString++;
     7c8:	21 96       	adiw	r28, 0x01	; 1
{
uint8_t i;
	// set initial address of character to be redefined
	SetCGRAMAddr(character<<3);
	// redefine character
	for(i=0;i<8;i++)
     7ca:	ce 15       	cp	r28, r14
     7cc:	df 05       	cpc	r29, r15
     7ce:	c1 f7       	brne	.-16     	; 0x7c0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc+0x20>
	{
		//get character from flash and redefine
		DataWrite(pgm_read_byte(fString));
		fString++;
	}
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <_ZN19class_HD44780_Drive10LCDBigInitEv>:
//	| OUTPUT  :  ----																|
//	| REMARKS :  Interrupts are disabled during initialization						|
//	+-------------------------------------------------------------------------------+

void	class_HD44780_Drive::LCDBigInit()
{
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
    uint8_t sreg;
    //save SREG and disable interrupts during initialization
    sreg=SREG;
     7e6:	1f b7       	in	r17, 0x3f	; 63
    cli();
     7e8:	f8 94       	cli
    //lcd.PutSF((const char*)&toto[0]);
    RedefineChar(0,(const char*)&_lcd_BigNumber0);
     7ea:	42 e7       	ldi	r20, 0x72	; 114
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	d7 df       	rcall	.-82     	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(1,(const char*)&_lcd_BigNumber1);
     7f2:	4a e6       	ldi	r20, 0x6A	; 106
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	ce 01       	movw	r24, r28
     7fa:	d2 df       	rcall	.-92     	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(2,(const char*)&_lcd_BigNumber2);
     7fc:	42 e6       	ldi	r20, 0x62	; 98
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	ce 01       	movw	r24, r28
     804:	cd df       	rcall	.-102    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(3,(const char*)&_lcd_BigNumber3);
     806:	4a e5       	ldi	r20, 0x5A	; 90
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	ce 01       	movw	r24, r28
     80e:	c8 df       	rcall	.-112    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(4,(const char*)&_lcd_BigNumber4);
     810:	42 e5       	ldi	r20, 0x52	; 82
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	64 e0       	ldi	r22, 0x04	; 4
     816:	ce 01       	movw	r24, r28
     818:	c3 df       	rcall	.-122    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(5,(const char*)&_lcd_BigNumber5);
     81a:	4a e4       	ldi	r20, 0x4A	; 74
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	65 e0       	ldi	r22, 0x05	; 5
     820:	ce 01       	movw	r24, r28
     822:	be df       	rcall	.-132    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(6,(const char*)&_lcd_BigNumber6);
     824:	42 e4       	ldi	r20, 0x42	; 66
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	66 e0       	ldi	r22, 0x06	; 6
     82a:	ce 01       	movw	r24, r28
     82c:	b9 df       	rcall	.-142    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    RedefineChar(7,(const char*)&_lcd_BigNumber7);
     82e:	4a e3       	ldi	r20, 0x3A	; 58
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	67 e0       	ldi	r22, 0x07	; 7
     834:	ce 01       	movw	r24, r28
     836:	b4 df       	rcall	.-152    	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
    // restore SREG state
    SREG=sreg;
     838:	1f bf       	out	0x3f, r17	; 63
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	08 95       	ret

00000842 <_ZN19class_HD44780_Drive7PutCBigEc>:
//	| INPUT   :  																	|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PutCBig(char asciiDigit)
{
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	8c 01       	movw	r16, r24
     84c:	c6 2f       	mov	r28, r22

    // check if space
    if (asciiDigit==' ')
     84e:	60 32       	cpi	r22, 0x20	; 32
     850:	a1 f4       	brne	.+40     	; 0x87a <_ZN19class_HD44780_Drive7PutCBigEc+0x38>
    {
        Locate(1,Col);
     852:	fc 01       	movw	r30, r24
     854:	42 81       	ldd	r20, Z+2	; 0x02
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	13 df       	rcall	.-474    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		DataWrite(' ');
     85a:	60 e2       	ldi	r22, 0x20	; 32
     85c:	c8 01       	movw	r24, r16
     85e:	24 de       	rcall	.-952    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
        Locate(2,Col);
     860:	f8 01       	movw	r30, r16
     862:	42 81       	ldd	r20, Z+2	; 0x02
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	c8 01       	movw	r24, r16
     868:	0b df       	rcall	.-490    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		DataWrite(' ');
     86a:	60 e2       	ldi	r22, 0x20	; 32
     86c:	c8 01       	movw	r24, r16
     86e:	1c de       	rcall	.-968    	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
        Col++;
     870:	f8 01       	movw	r30, r16
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	82 83       	std	Z+2, r24	; 0x02
     878:	20 c0       	rjmp	.+64     	; 0x8ba <_ZN19class_HD44780_Drive7PutCBigEc+0x78>
    }
    else
    {
        // check if valid digit
        if (asciiDigit>='0' && asciiDigit<='9')
     87a:	80 ed       	ldi	r24, 0xD0	; 208
     87c:	86 0f       	add	r24, r22
     87e:	8a 30       	cpi	r24, 0x0A	; 10
     880:	e0 f4       	brcc	.+56     	; 0x8ba <_ZN19class_HD44780_Drive7PutCBigEc+0x78>
        {
            // 1st locate at 1 row and col
            Locate(1,Col);
     882:	f8 01       	movw	r30, r16
     884:	42 81       	ldd	r20, Z+2	; 0x02
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	c8 01       	movw	r24, r16
     88a:	fa de       	rcall	.-524    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
            // convert ascii to number and get array index m for ROW 1
            DataWrite(pgm_read_byte(&_lcd_BigRow1[asciiDigit & 0x0f]));
     88c:	cf 70       	andi	r28, 0x0F	; 15
     88e:	d0 e0       	ldi	r29, 0x00	; 0
     890:	fe 01       	movw	r30, r28
     892:	e0 5d       	subi	r30, 0xD0	; 208
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	64 91       	lpm	r22, Z
     898:	c8 01       	movw	r24, r16
     89a:	06 de       	rcall	.-1012   	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
            // convert ascii to number and get array index m for ROW 2
            Locate(2,Col);
     89c:	f8 01       	movw	r30, r16
     89e:	42 81       	ldd	r20, Z+2	; 0x02
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	c8 01       	movw	r24, r16
     8a4:	ed de       	rcall	.-550    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
            DataWrite(pgm_read_byte(&_lcd_BigRow2[asciiDigit & 0x0f]));
     8a6:	fe 01       	movw	r30, r28
     8a8:	ea 5d       	subi	r30, 0xDA	; 218
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	64 91       	lpm	r22, Z
     8ae:	c8 01       	movw	r24, r16
     8b0:	fb dd       	rcall	.-1034   	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
            Col++;
     8b2:	f8 01       	movw	r30, r16
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
     8b8:	82 83       	std	Z+2, r24	; 0x02
        }
    }
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <_ZN19class_HD44780_Drive7PutSBigEPc>:
//	| INPUT   :  string into sram													|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PutSBig(char *string)
{
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	eb 01       	movw	r28, r22
    //main string puts loop
    for(;;)
    {
        //exit if 0 end
        if (*string==0) break;
     8ce:	68 81       	ld	r22, Y
     8d0:	66 23       	and	r22, r22
     8d2:	39 f0       	breq	.+14     	; 0x8e2 <_ZN19class_HD44780_Drive7PutSBigEPc+0x1e>
     8d4:	8c 01       	movw	r16, r24
     8d6:	21 96       	adiw	r28, 0x01	; 1
        //print big number
        PutCBig(*string++);
     8d8:	c8 01       	movw	r24, r16
     8da:	b3 df       	rcall	.-154    	; 0x842 <_ZN19class_HD44780_Drive7PutCBigEc>
{
    //main string puts loop
    for(;;)
    {
        //exit if 0 end
        if (*string==0) break;
     8dc:	69 91       	ld	r22, Y+
     8de:	61 11       	cpse	r22, r1
     8e0:	fb cf       	rjmp	.-10     	; 0x8d8 <_ZN19class_HD44780_Drive7PutSBigEPc+0x14>
        //print big number
        PutCBig(*string++);
    }
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <_ZN19class_HD44780_Drive7ScrSaveEv>:
//	| INPUT   :                             										|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::ScrSave()
{
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	8c 01       	movw	r16, r24
    uint8_t *p;

    //memory already allocated?
    if (ScrSavePtr==nullptr)
     8fc:	fc 01       	movw	r30, r24
     8fe:	84 85       	ldd	r24, Z+12	; 0x0c
     900:	95 85       	ldd	r25, Z+13	; 0x0d
     902:	89 2b       	or	r24, r25
     904:	59 f4       	brne	.+22     	; 0x91c <_ZN19class_HD44780_Drive7ScrSaveEv+0x30>
    {
        //no, allocate then
        ScrSavePtr=malloc(Rows*Cols);
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	83 81       	ldd	r24, Z+3	; 0x03
     90a:	98 9f       	mul	r25, r24
     90c:	c0 01       	movw	r24, r0
     90e:	11 24       	eor	r1, r1
     910:	4e d4       	rcall	.+2204   	; 0x11ae <malloc>
     912:	f8 01       	movw	r30, r16
     914:	95 87       	std	Z+13, r25	; 0x0d
     916:	84 87       	std	Z+12, r24	; 0x0c
        //return if error when alloc memory
        if (ScrSavePtr==nullptr) return;
     918:	89 2b       	or	r24, r25
     91a:	21 f1       	breq	.+72     	; 0x964 <_ZN19class_HD44780_Drive7ScrSaveEv+0x78>
    }
    //save screen data
    p=(uint8_t*)ScrSavePtr;
     91c:	f8 01       	movw	r30, r16
     91e:	e4 84       	ldd	r14, Z+12	; 0x0c
     920:	f5 84       	ldd	r15, Z+13	; 0x0d

    for(uint8_t i=1;i<=Rows;i++)
     922:	81 81       	ldd	r24, Z+1	; 0x01
     924:	81 11       	cpse	r24, r1
     926:	16 c0       	rjmp	.+44     	; 0x954 <_ZN19class_HD44780_Drive7ScrSaveEv+0x68>
     928:	1d c0       	rjmp	.+58     	; 0x964 <_ZN19class_HD44780_Drive7ScrSaveEv+0x78>
    {
        for(uint8_t j=1;j<=Cols;j++)
     92a:	cd 2d       	mov	r28, r13
        {
            Locate(i,j);
     92c:	4c 2f       	mov	r20, r28
     92e:	6d 2f       	mov	r22, r29
     930:	c8 01       	movw	r24, r16
     932:	a6 de       	rcall	.-692    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
            *p=DataRead();
     934:	c8 01       	movw	r24, r16
     936:	e2 dd       	rcall	.-1084   	; 0x4fc <_ZN19class_HD44780_Drive8DataReadEv>
     938:	f7 01       	movw	r30, r14
     93a:	81 93       	st	Z+, r24
     93c:	7f 01       	movw	r14, r30
    //save screen data
    p=(uint8_t*)ScrSavePtr;

    for(uint8_t i=1;i<=Rows;i++)
    {
        for(uint8_t j=1;j<=Cols;j++)
     93e:	cf 5f       	subi	r28, 0xFF	; 255
     940:	f8 01       	movw	r30, r16
     942:	83 81       	ldd	r24, Z+3	; 0x03
     944:	8c 17       	cp	r24, r28
     946:	90 f7       	brcc	.-28     	; 0x92c <_ZN19class_HD44780_Drive7ScrSaveEv+0x40>
        if (ScrSavePtr==nullptr) return;
    }
    //save screen data
    p=(uint8_t*)ScrSavePtr;

    for(uint8_t i=1;i<=Rows;i++)
     948:	df 5f       	subi	r29, 0xFF	; 255
     94a:	f8 01       	movw	r30, r16
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	8d 17       	cp	r24, r29
     950:	20 f4       	brcc	.+8      	; 0x95a <_ZN19class_HD44780_Drive7ScrSaveEv+0x6e>
     952:	08 c0       	rjmp	.+16     	; 0x964 <_ZN19class_HD44780_Drive7ScrSaveEv+0x78>
     954:	d1 e0       	ldi	r29, 0x01	; 1
    {
        for(uint8_t j=1;j<=Cols;j++)
     956:	dd 24       	eor	r13, r13
     958:	d3 94       	inc	r13
     95a:	f8 01       	movw	r30, r16
     95c:	83 81       	ldd	r24, Z+3	; 0x03
     95e:	81 11       	cpse	r24, r1
     960:	e4 cf       	rjmp	.-56     	; 0x92a <_ZN19class_HD44780_Drive7ScrSaveEv+0x3e>
     962:	f2 cf       	rjmp	.-28     	; 0x948 <_ZN19class_HD44780_Drive7ScrSaveEv+0x5c>
            Locate(i,j);
            *p=DataRead();
            p++;
        }
    }
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	08 95       	ret

00000974 <_ZN19class_HD44780_Drive10ScrRestoreEv>:
//	| INPUT   :                             										|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::ScrRestore()
{
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
   uint8_t *p;

   //return if error when alloc memory

   if (ScrSavePtr==nullptr) return;
     982:	fc 01       	movw	r30, r24
     984:	e4 84       	ldd	r14, Z+12	; 0x0c
     986:	f5 84       	ldd	r15, Z+13	; 0x0d
     988:	e1 14       	cp	r14, r1
     98a:	f1 04       	cpc	r15, r1
     98c:	11 f1       	breq	.+68     	; 0x9d2 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x5e>

   //restore screen data
   p=(uint8_t*)ScrSavePtr;

   for(uint8_t i=1;i<=Rows;i++)
     98e:	21 81       	ldd	r18, Z+1	; 0x01
     990:	21 11       	cpse	r18, r1
     992:	16 c0       	rjmp	.+44     	; 0x9c0 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x4c>
     994:	1e c0       	rjmp	.+60     	; 0x9d2 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x5e>
   {
       for(uint8_t j=1;j<=Cols;j++)
     996:	cd 2d       	mov	r28, r13
       {
           Locate(i,j);
     998:	4c 2f       	mov	r20, r28
     99a:	6d 2f       	mov	r22, r29
     99c:	c8 01       	movw	r24, r16
     99e:	70 de       	rcall	.-800    	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
           DataWrite(*p);
     9a0:	f7 01       	movw	r30, r14
     9a2:	61 91       	ld	r22, Z+
     9a4:	7f 01       	movw	r14, r30
     9a6:	c8 01       	movw	r24, r16
     9a8:	7f dd       	rcall	.-1282   	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
   //restore screen data
   p=(uint8_t*)ScrSavePtr;

   for(uint8_t i=1;i<=Rows;i++)
   {
       for(uint8_t j=1;j<=Cols;j++)
     9aa:	cf 5f       	subi	r28, 0xFF	; 255
     9ac:	f8 01       	movw	r30, r16
     9ae:	83 81       	ldd	r24, Z+3	; 0x03
     9b0:	8c 17       	cp	r24, r28
     9b2:	90 f7       	brcc	.-28     	; 0x998 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x24>
   if (ScrSavePtr==nullptr) return;

   //restore screen data
   p=(uint8_t*)ScrSavePtr;

   for(uint8_t i=1;i<=Rows;i++)
     9b4:	df 5f       	subi	r29, 0xFF	; 255
     9b6:	f8 01       	movw	r30, r16
     9b8:	81 81       	ldd	r24, Z+1	; 0x01
     9ba:	8d 17       	cp	r24, r29
     9bc:	28 f4       	brcc	.+10     	; 0x9c8 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x54>
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x5e>
     9c0:	8c 01       	movw	r16, r24
     9c2:	d1 e0       	ldi	r29, 0x01	; 1
   {
       for(uint8_t j=1;j<=Cols;j++)
     9c4:	dd 24       	eor	r13, r13
     9c6:	d3 94       	inc	r13
     9c8:	f8 01       	movw	r30, r16
     9ca:	83 81       	ldd	r24, Z+3	; 0x03
     9cc:	81 11       	cpse	r24, r1
     9ce:	e3 cf       	rjmp	.-58     	; 0x996 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x22>
     9d0:	f1 cf       	rjmp	.-30     	; 0x9b4 <_ZN19class_HD44780_Drive10ScrRestoreEv+0x40>
           Locate(i,j);
           DataWrite(*p);
           p++;
       }
   }
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	08 95       	ret

000009e2 <_ZN19class_HD44780_Drive11PatternSaveEv>:
//	| INPUT   :                             										|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PatternSave()
{
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	8c 01       	movw	r16, r24
  uint8_t *p;

    //memory already allocated?
    if (PatternSavePtr==nullptr)
     9f4:	fc 01       	movw	r30, r24
     9f6:	86 85       	ldd	r24, Z+14	; 0x0e
     9f8:	97 85       	ldd	r25, Z+15	; 0x0f
     9fa:	89 2b       	or	r24, r25
     9fc:	41 f4       	brne	.+16     	; 0xa0e <_ZN19class_HD44780_Drive11PatternSaveEv+0x2c>
    {
        //no, allocate then
        PatternSavePtr=malloc(64);
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	d5 d3       	rcall	.+1962   	; 0x11ae <malloc>
     a04:	f8 01       	movw	r30, r16
     a06:	97 87       	std	Z+15, r25	; 0x0f
     a08:	86 87       	std	Z+14, r24	; 0x0e
        //return if error when alloc memory
        if (PatternSavePtr==nullptr) return;
     a0a:	89 2b       	or	r24, r25
     a0c:	91 f0       	breq	.+36     	; 0xa32 <_ZN19class_HD44780_Drive11PatternSaveEv+0x50>
    }

    //restore pattern data
    p=(uint8_t*)PatternSavePtr;
     a0e:	f8 01       	movw	r30, r16
     a10:	e6 84       	ldd	r14, Z+14	; 0x0e
     a12:	f7 84       	ldd	r15, Z+15	; 0x0f
     a14:	67 01       	movw	r12, r14
     a16:	f0 e4       	ldi	r31, 0x40	; 64
     a18:	cf 0e       	add	r12, r31
     a1a:	d1 1c       	adc	r13, r1
     a1c:	e7 01       	movw	r28, r14
     a1e:	6c 2f       	mov	r22, r28
     a20:	6e 19       	sub	r22, r14

    for(uint8_t i=0;i<64;i++)
    {
        SetCGRAMAddr(i);
     a22:	c8 01       	movw	r24, r16
     a24:	b6 de       	rcall	.-660    	; 0x792 <_ZN19class_HD44780_Drive12SetCGRAMAddrEh>
        *p=DataRead();
     a26:	c8 01       	movw	r24, r16
     a28:	69 dd       	rcall	.-1326   	; 0x4fc <_ZN19class_HD44780_Drive8DataReadEv>
     a2a:	89 93       	st	Y+, r24
    }

    //restore pattern data
    p=(uint8_t*)PatternSavePtr;

    for(uint8_t i=0;i<64;i++)
     a2c:	cc 15       	cp	r28, r12
     a2e:	dd 05       	cpc	r29, r13
     a30:	b1 f7       	brne	.-20     	; 0xa1e <_ZN19class_HD44780_Drive11PatternSaveEv+0x3c>
        SetCGRAMAddr(i);
        *p=DataRead();
        p++;
    }   

}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <_ZN19class_HD44780_Drive14PatternRestoreEv>:
//	| INPUT   :                             										|
//	| OUTPUT  :  ----																|
//	| REMARKS :  																	|
//	+-------------------------------------------------------------------------------+
void	class_HD44780_Drive::PatternRestore()
{
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
    uint8_t *p;

    //return if error when alloc memory

    if (PatternSavePtr==nullptr) return;
     a54:	fc 01       	movw	r30, r24
     a56:	e6 84       	ldd	r14, Z+14	; 0x0e
     a58:	f7 84       	ldd	r15, Z+15	; 0x0f
     a5a:	e1 14       	cp	r14, r1
     a5c:	f1 04       	cpc	r15, r1
     a5e:	81 f0       	breq	.+32     	; 0xa80 <_ZN19class_HD44780_Drive14PatternRestoreEv+0x3c>
     a60:	8c 01       	movw	r16, r24
     a62:	67 01       	movw	r12, r14
     a64:	f0 e4       	ldi	r31, 0x40	; 64
     a66:	cf 0e       	add	r12, r31
     a68:	d1 1c       	adc	r13, r1
     a6a:	e7 01       	movw	r28, r14
     a6c:	6c 2f       	mov	r22, r28
     a6e:	6e 19       	sub	r22, r14
    //restore pattern data
    p=(uint8_t*)PatternSavePtr;

    for(uint8_t i=0;i<64;i++)
    {
        SetCGRAMAddr(i);
     a70:	c8 01       	movw	r24, r16
     a72:	8f de       	rcall	.-738    	; 0x792 <_ZN19class_HD44780_Drive12SetCGRAMAddrEh>
        DataWrite(*p);
     a74:	69 91       	ld	r22, Y+
     a76:	c8 01       	movw	r24, r16
     a78:	17 dd       	rcall	.-1490   	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
    if (PatternSavePtr==nullptr) return;

    //restore pattern data
    p=(uint8_t*)PatternSavePtr;

    for(uint8_t i=0;i<64;i++)
     a7a:	cc 15       	cp	r28, r12
     a7c:	dd 05       	cpc	r29, r13
     a7e:	b1 f7       	brne	.-20     	; 0xa6c <_ZN19class_HD44780_Drive14PatternRestoreEv+0x28>
    {
        SetCGRAMAddr(i);
        DataWrite(*p);
        p++;
    }
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <main>:
const char newChar3_Box[8] PROGMEM ={0X00,0X0E,0X11,0X11,0X11,0X0E,0X00,0X00};	//into the flash define a new character 3 image, in this case a ROUND BOX
const char newChar4_Box[8] PROGMEM ={0X00,0X0A,0X15,0X0E,0X04,0X00,0X11,0X0E};	//into the flash define a new character 4 image, in this case a FACE


int main()
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	ab 97       	sbiw	r28, 0x2b	; 43
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
	// DEMO Below demonstrating use o this Drive
	//

	
	
	class_Time				time;										//Initialize Timer Class
     aa6:	ce 01       	movw	r24, r28
     aa8:	85 96       	adiw	r24, 0x25	; 37
     aaa:	ad d2       	rcall	.+1370   	; 0x1006 <_ZN10class_TimeC1Ev>
	class_HD44780_Drive		lcd(_lcd_INTERFACE::SIZE_4_BITS,2,16);		//Initialize LCD with 2 row 16 columns interface of 4 bits
     aac:	20 e1       	ldi	r18, 0x10	; 16
     aae:	42 e0       	ldi	r20, 0x02	; 2
     ab0:	64 e0       	ldi	r22, 0x04	; 4
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	ce 01       	movw	r24, r28
     ab6:	45 96       	adiw	r24, 0x15	; 21
     ab8:	85 dd       	rcall	.-1270   	; 0x5c4 <_ZN19class_HD44780_DriveC1E18enum_lcd_INTERFACEhh>
	int  count=1;								//Demos Count

	#define		_DELAY_BETWEEN_DEMOS	2000
	//ENABLE GLOBAL INTERRUPTS

	sei();
     aba:	78 94       	sei
	//MAIN LOOP

	//------------------------------------------------------------------------------------------------------
	//check if LCD is present

	if (lcd.Present())
     abc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     abe:	88 23       	and	r24, r24
     ac0:	91 f1       	breq	.+100    	; 0xb26 <main+0x94>
	{
		//YES, show message
		lcd.SetCursorState(false);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	ce 01       	movw	r24, r28
     ac6:	45 96       	adiw	r24, 0x15	; 21
     ac8:	b7 dd       	rcall	.-1170   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		lcd.PutSF(PSTR("LCD Present?Yes"));		//Show present
     aca:	68 ea       	ldi	r22, 0xA8	; 168
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	ce 01       	movw	r24, r28
     ad0:	45 96       	adiw	r24, 0x15	; 21
     ad2:	31 de       	rcall	.-926    	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		{
			PORTB^=(1<<_LED_WARNING_);			//Blink LED
			time.DelayMillisByInterrupt(250);	//0.5Hz LED Blink
		}
	}
	time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//OFF by one(1) second
     ad4:	40 ed       	ldi	r20, 0xD0	; 208
     ad6:	57 e0       	ldi	r21, 0x07	; 7
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	ce 01       	movw	r24, r28
     ade:	85 96       	adiw	r24, 0x25	; 37
     ae0:	3e d3       	rcall	.+1660   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
	
	class_Time				time;										//Initialize Timer Class
	class_HD44780_Drive		lcd(_lcd_INTERFACE::SIZE_4_BITS,2,16);		//Initialize LCD with 2 row 16 columns interface of 4 bits

	char buf[20];								//sprintf buffer	
	int  count=1;								//Demos Count
     ae2:	01 e0       	ldi	r16, 0x01	; 1
     ae4:	10 e0       	ldi	r17, 0x00	; 0
		// SHOW DEMO LOOP COUNTER
		lcd.Cls();												//Clear Screen
					  //1234567890123456
		lcd.PutSF(PSTR("DEMO LOOP COUNT "));					//Show Version print characters into FLASH
		lcd.Locate(2,1);
		sprintf(buf,   "     [%4d]     ",count++);
     ae6:	0f 2e       	mov	r0, r31
     ae8:	f6 e6       	ldi	r31, 0x66	; 102
     aea:	af 2e       	mov	r10, r31
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	bf 2e       	mov	r11, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	7c 01       	movw	r14, r24
		//------------------------------------------------------------------------------------------------------
		// SHOW DRIVE VERSION
		lcd.Cls();												//Clear Screen
		lcd.PutSF(PSTR("HD4470"));								//Show Version print characters into FLASH
		lcd.Locate(2,1);
		sprintf(buf,"Version %d.%02d",lcd.GetVersionMajor(),lcd.GetVersionMinor());
     af8:	0f 2e       	mov	r0, r31
     afa:	f6 e7       	ldi	r31, 0x76	; 118
     afc:	6f 2e       	mov	r6, r31
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	7f 2e       	mov	r7, r31
     b02:	f0 2d       	mov	r31, r0
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//Wait One(1) Second
		//------------------------------------------------------------------------------------------------------
		// SCROLL LEFT
		lcd.Cls();												//Clear Screen
		lcd.Locate(1,6);										//Locate cursor row 1 column
		lcd.PutSF(PSTR("Scroll Left"));							//Write Scroll Left characters into Flash
     b04:	0f 2e       	mov	r0, r31
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	5f 2e       	mov	r5, r31
     b0a:	f0 2d       	mov	r31, r0
		//------------------------------------------------------------------------------------------------------
		// BIG NUMBERS
		lcd.PatternSave();										//Save Screen Pattern area
		lcd.Cls();												//Clear Screen
		lcd.LCDBigInit();										//Initialize Big Numbers
		for(uint16_t i=0;i<1000;i++)							//Count 0 to 9999
     b0c:	21 2c       	mov	r2, r1
     b0e:	41 2c       	mov	r4, r1
		{
			lcd.Locate(1,1);									//Locate
			lcd.PutSF(PSTR("Big Number="));
			sprintf(buf,"%03d",i);								//format
     b10:	0f 2e       	mov	r0, r31
     b12:	f6 e8       	ldi	r31, 0x86	; 134
     b14:	cf 2e       	mov	r12, r31
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	df 2e       	mov	r13, r31
     b1a:	f0 2d       	mov	r31, r0
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
		//------------------------------------------------------------------------------------------------------
		// MOVE CURSOR LEFT
		lcd.Cls();												//Clear Screen
		lcd.SetCursorState(true);								//Enable cursor
		lcd.PutSF(PSTR("CURSOR LEFT  "));						//Show Cursor Right character into flash
     b1c:	0f 2e       	mov	r0, r31
     b1e:	fd e0       	ldi	r31, 0x0D	; 13
     b20:	3f 2e       	mov	r3, r31
     b22:	f0 2d       	mov	r31, r0
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <main+0xae>
	else
	{
		//NO, put here a code if lcd not present like blink a LED etc,
		#define _LED_WARNING_ 0

		DDRB|=(1<<_LED_WARNING_);
     b26:	b8 9a       	sbi	0x17, 0	; 23

		for(;;)
		{
			PORTB^=(1<<_LED_WARNING_);			//Blink LED
     b28:	11 e0       	ldi	r17, 0x01	; 1
     b2a:	88 b3       	in	r24, 0x18	; 24
     b2c:	81 27       	eor	r24, r17
     b2e:	88 bb       	out	0x18, r24	; 24
			time.DelayMillisByInterrupt(250);	//0.5Hz LED Blink
     b30:	4a ef       	ldi	r20, 0xFA	; 250
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	ce 01       	movw	r24, r28
     b3a:	85 96       	adiw	r24, 0x25	; 37
     b3c:	10 d3       	rcall	.+1568   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
	//MAIN LOOP

	//------------------------------------------------------------------------------------------------------
	//check if LCD is present

	if (lcd.Present())
     b3e:	f5 cf       	rjmp	.-22     	; 0xb2a <main+0x98>
	//==============================================================================
	for(;;)
	{
		//------------------------------------------------------------------------------------------------------
		// SHOW DEMO LOOP COUNTER
		lcd.Cls();												//Clear Screen
     b40:	ce 01       	movw	r24, r28
     b42:	45 96       	adiw	r24, 0x15	; 21
     b44:	34 dd       	rcall	.-1432   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
					  //1234567890123456
		lcd.PutSF(PSTR("DEMO LOOP COUNT "));					//Show Version print characters into FLASH
     b46:	67 e9       	ldi	r22, 0x97	; 151
     b48:	71 e0       	ldi	r23, 0x01	; 1
     b4a:	ce 01       	movw	r24, r28
     b4c:	45 96       	adiw	r24, 0x15	; 21
     b4e:	f3 dd       	rcall	.-1050   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.Locate(2,1);
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	ce 01       	movw	r24, r28
     b56:	45 96       	adiw	r24, 0x15	; 21
     b58:	93 dd       	rcall	.-1242   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		sprintf(buf,   "     [%4d]     ",count++);
     b5a:	48 01       	movw	r8, r16
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	89 1a       	sub	r8, r25
     b60:	99 0a       	sbc	r9, r25
     b62:	1f 93       	push	r17
     b64:	0f 93       	push	r16
     b66:	bf 92       	push	r11
     b68:	af 92       	push	r10
     b6a:	ff 92       	push	r15
     b6c:	ef 92       	push	r14
     b6e:	4c d4       	rcall	.+2200   	; 0x1408 <sprintf>
		lcd.PutS(buf);											//Print characters from SRAM
     b70:	b7 01       	movw	r22, r14
     b72:	ce 01       	movw	r24, r28
     b74:	45 96       	adiw	r24, 0x15	; 21
     b76:	b1 dd       	rcall	.-1182   	; 0x6da <_ZN19class_HD44780_Drive4PutSEPc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//Wait One(1) Second
     b78:	40 ed       	ldi	r20, 0xD0	; 208
     b7a:	57 e0       	ldi	r21, 0x07	; 7
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	ce 01       	movw	r24, r28
     b82:	85 96       	adiw	r24, 0x25	; 37
     b84:	ec d2       	rcall	.+1496   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SHOW DRIVE VERSION
		lcd.Cls();												//Clear Screen
     b86:	ce 01       	movw	r24, r28
     b88:	45 96       	adiw	r24, 0x15	; 21
     b8a:	11 dd       	rcall	.-1502   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("HD4470"));								//Show Version print characters into FLASH
     b8c:	60 e9       	ldi	r22, 0x90	; 144
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	ce 01       	movw	r24, r28
     b92:	45 96       	adiw	r24, 0x15	; 21
     b94:	d0 dd       	rcall	.-1120   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.Locate(2,1);
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	ce 01       	movw	r24, r28
     b9c:	45 96       	adiw	r24, 0x15	; 21
     b9e:	70 dd       	rcall	.-1312   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		sprintf(buf,"Version %d.%02d",lcd.GetVersionMajor(),lcd.GetVersionMinor());
     ba0:	1f 92       	push	r1
     ba2:	1f 92       	push	r1
     ba4:	1f 92       	push	r1
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	8f 93       	push	r24
     baa:	7f 92       	push	r7
     bac:	6f 92       	push	r6
     bae:	ff 92       	push	r15
     bb0:	ef 92       	push	r14
     bb2:	2a d4       	rcall	.+2132   	; 0x1408 <sprintf>
		lcd.PutS(buf);											//Print characters from SRAM	
     bb4:	b7 01       	movw	r22, r14
     bb6:	ce 01       	movw	r24, r28
     bb8:	45 96       	adiw	r24, 0x15	; 21
     bba:	8f dd       	rcall	.-1250   	; 0x6da <_ZN19class_HD44780_Drive4PutSEPc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//Wait One(1) Second
     bbc:	40 ed       	ldi	r20, 0xD0	; 208
     bbe:	57 e0       	ldi	r21, 0x07	; 7
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	ce 01       	movw	r24, r28
     bc6:	85 96       	adiw	r24, 0x25	; 37
     bc8:	ca d2       	rcall	.+1428   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// PUTC PUTS PUTSF ALLOWING CR(CARRIAGE RETURN) AND LF(LINE FEED)
		lcd.Cls();												//Clear Screen
     bca:	ce 01       	movw	r24, r28
     bcc:	45 96       	adiw	r24, 0x15	; 21
     bce:	ef dc       	rcall	.-1570   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		//123456789123456
		lcd.PutSF(PSTR("PutC PutS PutSF\r\nAllow CR & LF"));	//Show PutC PutS PutSF characters into FLASH
     bd0:	61 e7       	ldi	r22, 0x71	; 113
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	ce 01       	movw	r24, r28
     bd6:	45 96       	adiw	r24, 0x15	; 21
     bd8:	ae dd       	rcall	.-1188   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//Wait One(1) Second
     bda:	40 ed       	ldi	r20, 0xD0	; 208
     bdc:	57 e0       	ldi	r21, 0x07	; 7
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	ce 01       	movw	r24, r28
     be4:	85 96       	adiw	r24, 0x25	; 37
     be6:	bb d2       	rcall	.+1398   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SCROLL LEFT
		lcd.Cls();												//Clear Screen
     be8:	ce 01       	movw	r24, r28
     bea:	45 96       	adiw	r24, 0x15	; 21
     bec:	e0 dc       	rcall	.-1600   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.Locate(1,6);										//Locate cursor row 1 column
     bee:	46 e0       	ldi	r20, 0x06	; 6
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	ce 01       	movw	r24, r28
     bf4:	45 96       	adiw	r24, 0x15	; 21
     bf6:	44 dd       	rcall	.-1400   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		lcd.PutSF(PSTR("Scroll Left"));							//Write Scroll Left characters into Flash
     bf8:	65 e6       	ldi	r22, 0x65	; 101
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	ce 01       	movw	r24, r28
     bfe:	45 96       	adiw	r24, 0x15	; 21
     c00:	9a dd       	rcall	.-1228   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	15 2d       	mov	r17, r5
		for(uint8_t i=0;i<5;i++)								//Scroll LEFT 5 times
		{
			lcd.ScrollLeft();
     c0e:	ce 01       	movw	r24, r28
     c10:	45 96       	adiw	r24, 0x15	; 21
     c12:	0c dd       	rcall	.-1512   	; 0x62c <_ZN19class_HD44780_Drive10ScrollLeftEv>
			time.DelayMillisByInterrupt(500);
     c14:	44 ef       	ldi	r20, 0xF4	; 244
     c16:	51 e0       	ldi	r21, 0x01	; 1
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	ce 01       	movw	r24, r28
     c1e:	85 96       	adiw	r24, 0x25	; 37
     c20:	9e d2       	rcall	.+1340   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
     c22:	11 50       	subi	r17, 0x01	; 1
		//------------------------------------------------------------------------------------------------------
		// SCROLL LEFT
		lcd.Cls();												//Clear Screen
		lcd.Locate(1,6);										//Locate cursor row 1 column
		lcd.PutSF(PSTR("Scroll Left"));							//Write Scroll Left characters into Flash
		for(uint8_t i=0;i<5;i++)								//Scroll LEFT 5 times
     c24:	a1 f7       	brne	.-24     	; 0xc0e <main+0x17c>
		{
			lcd.ScrollLeft();
			time.DelayMillisByInterrupt(500);
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     c26:	40 ed       	ldi	r20, 0xD0	; 208
     c28:	57 e0       	ldi	r21, 0x07	; 7
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	ce 01       	movw	r24, r28
     c30:	85 96       	adiw	r24, 0x25	; 37
     c32:	95 d2       	rcall	.+1322   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SCROLL RIGHT
		lcd.Cls();												//Clear Screen
     c34:	ce 01       	movw	r24, r28
     c36:	45 96       	adiw	r24, 0x15	; 21
     c38:	ba dc       	rcall	.-1676   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Scroll Right"));						//Write Scroll Right characters into Flash
     c3a:	68 e5       	ldi	r22, 0x58	; 88
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	ce 01       	movw	r24, r28
     c40:	45 96       	adiw	r24, 0x15	; 21
     c42:	79 dd       	rcall	.-1294   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
     c44:	15 2d       	mov	r17, r5
		for(uint8_t i=0;i<5;i++)								//Scroll LEFT 5 times
		{
			lcd.ScrollRight();
     c46:	ce 01       	movw	r24, r28
     c48:	45 96       	adiw	r24, 0x15	; 21
     c4a:	f3 dc       	rcall	.-1562   	; 0x632 <_ZN19class_HD44780_Drive11ScrollRightEv>
			time.DelayMillisByInterrupt(500);
     c4c:	44 ef       	ldi	r20, 0xF4	; 244
     c4e:	51 e0       	ldi	r21, 0x01	; 1
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	ce 01       	movw	r24, r28
     c56:	85 96       	adiw	r24, 0x25	; 37
     c58:	82 d2       	rcall	.+1284   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
     c5a:	11 50       	subi	r17, 0x01	; 1
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
		//------------------------------------------------------------------------------------------------------
		// SCROLL RIGHT
		lcd.Cls();												//Clear Screen
		lcd.PutSF(PSTR("Scroll Right"));						//Write Scroll Right characters into Flash
		for(uint8_t i=0;i<5;i++)								//Scroll LEFT 5 times
     c5c:	a1 f7       	brne	.-24     	; 0xc46 <main+0x1b4>
		{
			lcd.ScrollRight();
			time.DelayMillisByInterrupt(500);
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     c5e:	40 ed       	ldi	r20, 0xD0	; 208
     c60:	57 e0       	ldi	r21, 0x07	; 7
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	ce 01       	movw	r24, r28
     c68:	85 96       	adiw	r24, 0x25	; 37
     c6a:	79 d2       	rcall	.+1266   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SET CURSOR OFF
		lcd.Cls();												//Clear Screen
     c6c:	ce 01       	movw	r24, r28
     c6e:	45 96       	adiw	r24, 0x15	; 21
     c70:	9e dc       	rcall	.-1732   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Cursor Off"));							//Show Cursor Off characters into flash
     c72:	6d e4       	ldi	r22, 0x4D	; 77
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	ce 01       	movw	r24, r28
     c78:	45 96       	adiw	r24, 0x15	; 21
     c7a:	5d dd       	rcall	.-1350   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.SetCursorState(false);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	ce 01       	movw	r24, r28
     c80:	45 96       	adiw	r24, 0x15	; 21
     c82:	da dc       	rcall	.-1612   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//OFF by one(2) second
     c84:	40 ed       	ldi	r20, 0xD0	; 208
     c86:	57 e0       	ldi	r21, 0x07	; 7
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	ce 01       	movw	r24, r28
     c8e:	85 96       	adiw	r24, 0x25	; 37
     c90:	66 d2       	rcall	.+1228   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		//SET CURSOR ON	
		lcd.Cls();												//Clear Screen
     c92:	ce 01       	movw	r24, r28
     c94:	45 96       	adiw	r24, 0x15	; 21
     c96:	8b dc       	rcall	.-1770   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Cursor On "));							//Show Cursor On characters into flash
     c98:	62 e4       	ldi	r22, 0x42	; 66
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	ce 01       	movw	r24, r28
     c9e:	45 96       	adiw	r24, 0x15	; 21
     ca0:	4a dd       	rcall	.-1388   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.SetCursorState(true);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	ce 01       	movw	r24, r28
     ca6:	45 96       	adiw	r24, 0x15	; 21
     ca8:	c7 dc       	rcall	.-1650   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//ON by one(2) second
     caa:	40 ed       	ldi	r20, 0xD0	; 208
     cac:	57 e0       	ldi	r21, 0x07	; 7
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	ce 01       	movw	r24, r28
     cb4:	85 96       	adiw	r24, 0x25	; 37
     cb6:	53 d2       	rcall	.+1190   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SET BLINK ON
		lcd.Cls();												//Clear Screen
     cb8:	ce 01       	movw	r24, r28
     cba:	45 96       	adiw	r24, 0x15	; 21
     cbc:	78 dc       	rcall	.-1808   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Set Blink On"));						//Show Blink On characters into flash
     cbe:	65 e3       	ldi	r22, 0x35	; 53
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	ce 01       	movw	r24, r28
     cc4:	45 96       	adiw	r24, 0x15	; 21
     cc6:	37 dd       	rcall	.-1426   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.SetCursorBlinkState(true);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	ce 01       	movw	r24, r28
     ccc:	45 96       	adiw	r24, 0x15	; 21
     cce:	c9 dc       	rcall	.-1646   	; 0x662 <_ZN19class_HD44780_Drive19SetCursorBlinkStateEb>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//ON by one(2) second
     cd0:	40 ed       	ldi	r20, 0xD0	; 208
     cd2:	57 e0       	ldi	r21, 0x07	; 7
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	ce 01       	movw	r24, r28
     cda:	85 96       	adiw	r24, 0x25	; 37
     cdc:	40 d2       	rcall	.+1152   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SET BLINK OFF
		lcd.Cls();												//Clear Screen
     cde:	ce 01       	movw	r24, r28
     ce0:	45 96       	adiw	r24, 0x15	; 21
     ce2:	65 dc       	rcall	.-1846   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Set Blink Off"));						//Show Blink Off characters into flash
     ce4:	67 e2       	ldi	r22, 0x27	; 39
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	ce 01       	movw	r24, r28
     cea:	45 96       	adiw	r24, 0x15	; 21
     cec:	24 dd       	rcall	.-1464   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.SetCursorBlinkState(false);
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	ce 01       	movw	r24, r28
     cf2:	45 96       	adiw	r24, 0x15	; 21
     cf4:	b6 dc       	rcall	.-1684   	; 0x662 <_ZN19class_HD44780_Drive19SetCursorBlinkStateEb>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//ON by one(2) second
     cf6:	40 ed       	ldi	r20, 0xD0	; 208
     cf8:	57 e0       	ldi	r21, 0x07	; 7
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	ce 01       	movw	r24, r28
     d00:	85 96       	adiw	r24, 0x25	; 37
     d02:	2d d2       	rcall	.+1114   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		//SET CURSOR OFF
		lcd.Cls();												//Clear Screen
     d04:	ce 01       	movw	r24, r28
     d06:	45 96       	adiw	r24, 0x15	; 21
     d08:	52 dc       	rcall	.-1884   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Cursor Off Again"));					//Show Cursor Off Again characters into flash
     d0a:	66 e1       	ldi	r22, 0x16	; 22
     d0c:	71 e0       	ldi	r23, 0x01	; 1
     d0e:	ce 01       	movw	r24, r28
     d10:	45 96       	adiw	r24, 0x15	; 21
     d12:	11 dd       	rcall	.-1502   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.SetCursorState(false);
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	45 96       	adiw	r24, 0x15	; 21
     d1a:	8e dc       	rcall	.-1764   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//OFF by one(2) second
     d1c:	40 ed       	ldi	r20, 0xD0	; 208
     d1e:	57 e0       	ldi	r21, 0x07	; 7
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	ce 01       	movw	r24, r28
     d26:	85 96       	adiw	r24, 0x25	; 37
     d28:	1a d2       	rcall	.+1076   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// SAVE SCREEN
		lcd.Cls();												//Clear Screen
     d2a:	ce 01       	movw	r24, r28
     d2c:	45 96       	adiw	r24, 0x15	; 21
     d2e:	3f dc       	rcall	.-1922   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		              //1234567890123456
		lcd.PutSF(PSTR("Next Msg. Will  "));					//Show Save This Screen characters into flash
     d30:	65 e0       	ldi	r22, 0x05	; 5
     d32:	71 e0       	ldi	r23, 0x01	; 1
     d34:	ce 01       	movw	r24, r28
     d36:	45 96       	adiw	r24, 0x15	; 21
     d38:	fe dc       	rcall	.-1540   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.Locate(2,1);
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	62 e0       	ldi	r22, 0x02	; 2
     d3e:	ce 01       	movw	r24, r28
     d40:	45 96       	adiw	r24, 0x15	; 21
     d42:	9e dc       	rcall	.-1732   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		lcd.PutSF(PSTR("save Into SRAM  "));					//Show Into Sram characters into flash
     d44:	64 ef       	ldi	r22, 0xF4	; 244
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	ce 01       	movw	r24, r28
     d4a:	45 96       	adiw	r24, 0x15	; 21
     d4c:	f4 dc       	rcall	.-1560   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//OFF by one(2) second
     d4e:	40 ed       	ldi	r20, 0xD0	; 208
     d50:	57 e0       	ldi	r21, 0x07	; 7
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	ce 01       	movw	r24, r28
     d58:	85 96       	adiw	r24, 0x25	; 37
     d5a:	01 d2       	rcall	.+1026   	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		lcd.Cls();
     d5c:	ce 01       	movw	r24, r28
     d5e:	45 96       	adiw	r24, 0x15	; 21
     d60:	26 dc       	rcall	.-1972   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.Locate(1,1);
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	ce 01       	movw	r24, r28
     d68:	45 96       	adiw	r24, 0x15	; 21
     d6a:	8a dc       	rcall	.-1772   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
	    lcd.PutSF(PSTR("0123456789012345"));
     d6c:	63 ee       	ldi	r22, 0xE3	; 227
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	ce 01       	movw	r24, r28
     d72:	45 96       	adiw	r24, 0x15	; 21
     d74:	e0 dc       	rcall	.-1600   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.Locate(2,1);
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	62 e0       	ldi	r22, 0x02	; 2
     d7a:	ce 01       	movw	r24, r28
     d7c:	45 96       	adiw	r24, 0x15	; 21
     d7e:	80 dc       	rcall	.-1792   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		lcd.PutSF(PSTR("0123456789012345"));
     d80:	62 ed       	ldi	r22, 0xD2	; 210
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	ce 01       	movw	r24, r28
     d86:	45 96       	adiw	r24, 0x15	; 21
     d88:	d6 dc       	rcall	.-1620   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.ScrSave();											//Screen Saved
     d8a:	ce 01       	movw	r24, r28
     d8c:	45 96       	adiw	r24, 0x15	; 21
     d8e:	ae dd       	rcall	.-1188   	; 0x8ec <_ZN19class_HD44780_Drive7ScrSaveEv>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		//OFF by one(2) second
     d90:	40 ed       	ldi	r20, 0xD0	; 208
     d92:	57 e0       	ldi	r21, 0x07	; 7
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	ce 01       	movw	r24, r28
     d9a:	85 96       	adiw	r24, 0x25	; 37
     d9c:	e0 d1       	rcall	.+960    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// RESTORE SCREEN
		lcd.Cls();
     d9e:	ce 01       	movw	r24, r28
     da0:	45 96       	adiw	r24, 0x15	; 21
     da2:	05 dc       	rcall	.-2038   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.PutSF(PSTR("Screen Restore"));
     da4:	63 ec       	ldi	r22, 0xC3	; 195
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	ce 01       	movw	r24, r28
     daa:	45 96       	adiw	r24, 0x15	; 21
     dac:	c4 dc       	rcall	.-1656   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		
     dae:	40 ed       	ldi	r20, 0xD0	; 208
     db0:	57 e0       	ldi	r21, 0x07	; 7
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	ce 01       	movw	r24, r28
     db8:	85 96       	adiw	r24, 0x25	; 37
     dba:	d1 d1       	rcall	.+930    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		lcd.ScrRestore();										//Restore Screen
     dbc:	ce 01       	movw	r24, r28
     dbe:	45 96       	adiw	r24, 0x15	; 21
     dc0:	d9 dd       	rcall	.-1102   	; 0x974 <_ZN19class_HD44780_Drive10ScrRestoreEv>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     dc2:	40 ed       	ldi	r20, 0xD0	; 208
     dc4:	57 e0       	ldi	r21, 0x07	; 7
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	ce 01       	movw	r24, r28
     dcc:	85 96       	adiw	r24, 0x25	; 37
     dce:	c7 d1       	rcall	.+910    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// BIG NUMBERS
		lcd.PatternSave();										//Save Screen Pattern area
     dd0:	ce 01       	movw	r24, r28
     dd2:	45 96       	adiw	r24, 0x15	; 21
     dd4:	06 de       	rcall	.-1012   	; 0x9e2 <_ZN19class_HD44780_Drive11PatternSaveEv>
		lcd.Cls();												//Clear Screen
     dd6:	ce 01       	movw	r24, r28
     dd8:	45 96       	adiw	r24, 0x15	; 21
     dda:	e9 db       	rcall	.-2094   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.LCDBigInit();										//Initialize Big Numbers
     ddc:	ce 01       	movw	r24, r28
     dde:	45 96       	adiw	r24, 0x15	; 21
     de0:	fe dc       	rcall	.-1540   	; 0x7de <_ZN19class_HD44780_Drive10LCDBigInitEv>
		for(uint16_t i=0;i<1000;i++)							//Count 0 to 9999
     de2:	02 2d       	mov	r16, r2
     de4:	14 2d       	mov	r17, r4
		{
			lcd.Locate(1,1);									//Locate
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	ce 01       	movw	r24, r28
     dec:	45 96       	adiw	r24, 0x15	; 21
     dee:	48 dc       	rcall	.-1904   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
			lcd.PutSF(PSTR("Big Number="));
     df0:	67 eb       	ldi	r22, 0xB7	; 183
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	ce 01       	movw	r24, r28
     df6:	45 96       	adiw	r24, 0x15	; 21
     df8:	9e dc       	rcall	.-1732   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
			sprintf(buf,"%03d",i);								//format
     dfa:	1f 93       	push	r17
     dfc:	0f 93       	push	r16
     dfe:	df 92       	push	r13
     e00:	cf 92       	push	r12
     e02:	ff 92       	push	r15
     e04:	ef 92       	push	r14
     e06:	00 d3       	rcall	.+1536   	; 0x1408 <sprintf>
			lcd.PutSBig(buf);									//print PigNumber
     e08:	b7 01       	movw	r22, r14
     e0a:	ce 01       	movw	r24, r28
     e0c:	45 96       	adiw	r24, 0x15	; 21
     e0e:	5a dd       	rcall	.-1356   	; 0x8c4 <_ZN19class_HD44780_Drive7PutSBigEPc>
			time.DelayMillisByInterrupt(10);					//10ms
     e10:	4a e0       	ldi	r20, 0x0A	; 10
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	ce 01       	movw	r24, r28
     e1a:	85 96       	adiw	r24, 0x25	; 37
     e1c:	a0 d1       	rcall	.+832    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// BIG NUMBERS
		lcd.PatternSave();										//Save Screen Pattern area
		lcd.Cls();												//Clear Screen
		lcd.LCDBigInit();										//Initialize Big Numbers
		for(uint16_t i=0;i<1000;i++)							//Count 0 to 9999
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	08 3e       	cpi	r16, 0xE8	; 232
     e30:	93 e0       	ldi	r25, 0x03	; 3
     e32:	19 07       	cpc	r17, r25
     e34:	c1 f6       	brne	.-80     	; 0xde6 <main+0x354>
			lcd.PutSF(PSTR("Big Number="));
			sprintf(buf,"%03d",i);								//format
			lcd.PutSBig(buf);									//print PigNumber
			time.DelayMillisByInterrupt(10);					//10ms
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);		
     e36:	40 ed       	ldi	r20, 0xD0	; 208
     e38:	57 e0       	ldi	r21, 0x07	; 7
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	ce 01       	movw	r24, r28
     e40:	85 96       	adiw	r24, 0x25	; 37
     e42:	8d d1       	rcall	.+794    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		lcd.PatternRestore();									//Restore old patterns
     e44:	ce 01       	movw	r24, r28
     e46:	45 96       	adiw	r24, 0x15	; 21
     e48:	fd dd       	rcall	.-1030   	; 0xa44 <_ZN19class_HD44780_Drive14PatternRestoreEv>
		//------------------------------------------------------------------------------------------------------
		// MOVE CURSOR RIGHT
		lcd.Cls();												//Clear Screen
     e4a:	ce 01       	movw	r24, r28
     e4c:	45 96       	adiw	r24, 0x15	; 21
     e4e:	af db       	rcall	.-2210   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.SetCursorState(true);								//Enable cursor
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	ce 01       	movw	r24, r28
     e54:	45 96       	adiw	r24, 0x15	; 21
     e56:	f0 db       	rcall	.-2080   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		lcd.PutSF(PSTR("CURSOR RIGHT"));						//Show Cursor Right character into flash
     e58:	6a ea       	ldi	r22, 0xAA	; 170
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	45 96       	adiw	r24, 0x15	; 21
     e60:	6a dc       	rcall	.-1836   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		lcd.Locate(1,1);										//Set cursor at row 1 column 1
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	ce 01       	movw	r24, r28
     e68:	45 96       	adiw	r24, 0x15	; 21
     e6a:	0a dc       	rcall	.-2028   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
     e6c:	1c e0       	ldi	r17, 0x0C	; 12
		for(uint8_t i=0;i<12;i++)
		{
			lcd.MoveCursorToRight();							//move cursor
     e6e:	ce 01       	movw	r24, r28
     e70:	45 96       	adiw	r24, 0x15	; 21
     e72:	f4 db       	rcall	.-2072   	; 0x65c <_ZN19class_HD44780_Drive17MoveCursorToRightEv>
			time.DelayMillisByInterrupt(250);					//250ms at cursor move
     e74:	4a ef       	ldi	r20, 0xFA	; 250
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	ce 01       	movw	r24, r28
     e7e:	85 96       	adiw	r24, 0x25	; 37
     e80:	6e d1       	rcall	.+732    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
     e82:	11 50       	subi	r17, 0x01	; 1
		// MOVE CURSOR RIGHT
		lcd.Cls();												//Clear Screen
		lcd.SetCursorState(true);								//Enable cursor
		lcd.PutSF(PSTR("CURSOR RIGHT"));						//Show Cursor Right character into flash
		lcd.Locate(1,1);										//Set cursor at row 1 column 1
		for(uint8_t i=0;i<12;i++)
     e84:	a1 f7       	brne	.-24     	; 0xe6e <main+0x3dc>
		{
			lcd.MoveCursorToRight();							//move cursor
			time.DelayMillisByInterrupt(250);					//250ms at cursor move
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     e86:	40 ed       	ldi	r20, 0xD0	; 208
     e88:	57 e0       	ldi	r21, 0x07	; 7
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	ce 01       	movw	r24, r28
     e90:	85 96       	adiw	r24, 0x25	; 37
     e92:	65 d1       	rcall	.+714    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// MOVE CURSOR LEFT
		lcd.Cls();												//Clear Screen
     e94:	ce 01       	movw	r24, r28
     e96:	45 96       	adiw	r24, 0x15	; 21
     e98:	8a db       	rcall	.-2284   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.SetCursorState(true);								//Enable cursor
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	ce 01       	movw	r24, r28
     e9e:	45 96       	adiw	r24, 0x15	; 21
     ea0:	cb db       	rcall	.-2154   	; 0x638 <_ZN19class_HD44780_Drive14SetCursorStateEb>
		lcd.PutSF(PSTR("CURSOR LEFT  "));						//Show Cursor Right character into flash
     ea2:	6c e9       	ldi	r22, 0x9C	; 156
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	ce 01       	movw	r24, r28
     ea8:	45 96       	adiw	r24, 0x15	; 21
     eaa:	45 dc       	rcall	.-1910   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
     eac:	13 2d       	mov	r17, r3
		for(uint8_t i=0;i<13;i++)
		{
			lcd.MoveCursorToLeft();								//move cursor
     eae:	ce 01       	movw	r24, r28
     eb0:	45 96       	adiw	r24, 0x15	; 21
     eb2:	d1 db       	rcall	.-2142   	; 0x656 <_ZN19class_HD44780_Drive16MoveCursorToLeftEv>
			time.DelayMillisByInterrupt(250);					//250ms at cursor move
     eb4:	4a ef       	ldi	r20, 0xFA	; 250
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	ce 01       	movw	r24, r28
     ebe:	85 96       	adiw	r24, 0x25	; 37
     ec0:	4e d1       	rcall	.+668    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
     ec2:	11 50       	subi	r17, 0x01	; 1
		//------------------------------------------------------------------------------------------------------
		// MOVE CURSOR LEFT
		lcd.Cls();												//Clear Screen
		lcd.SetCursorState(true);								//Enable cursor
		lcd.PutSF(PSTR("CURSOR LEFT  "));						//Show Cursor Right character into flash
		for(uint8_t i=0;i<13;i++)
     ec4:	a1 f7       	brne	.-24     	; 0xeae <main+0x41c>
		{
			lcd.MoveCursorToLeft();								//move cursor
			time.DelayMillisByInterrupt(250);					//250ms at cursor move
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     ec6:	40 ed       	ldi	r20, 0xD0	; 208
     ec8:	57 e0       	ldi	r21, 0x07	; 7
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	ce 01       	movw	r24, r28
     ed0:	85 96       	adiw	r24, 0x25	; 37
     ed2:	45 d1       	rcall	.+650    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// WRITE DIRECTLY TO CHARACTERS RAM
		lcd.Cls();												//Clear Screen
     ed4:	ce 01       	movw	r24, r28
     ed6:	45 96       	adiw	r24, 0x15	; 21
     ed8:	6a db       	rcall	.-2348   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.Locate(2,1);
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	62 e0       	ldi	r22, 0x02	; 2
     ede:	ce 01       	movw	r24, r28
     ee0:	45 96       	adiw	r24, 0x15	; 21
     ee2:	ce db       	rcall	.-2148   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
					  //1234567890123456
		lcd.PutSF(PSTR("WRITE DIRECTLY  "));					//Show Cursor Right character into flash
     ee4:	6b e8       	ldi	r22, 0x8B	; 139
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	45 96       	adiw	r24, 0x15	; 21
     eec:	24 dc       	rcall	.-1976   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		for(uint8_t i=0;i<lcd.GetCols();i++)
     eee:	88 8d       	ldd	r24, Y+24	; 0x18
     ef0:	88 23       	and	r24, r24
     ef2:	a1 f0       	breq	.+40     	; 0xf1c <main+0x48a>
		{
			lcd.SetDDRAMAddr(i);								//Set directly ram address
     ef4:	61 2f       	mov	r22, r17
     ef6:	ce 01       	movw	r24, r28
     ef8:	45 96       	adiw	r24, 0x15	; 21
     efa:	4f dc       	rcall	.-1890   	; 0x79a <_ZN19class_HD44780_Drive12SetDDRAMAddrEh>
     efc:	61 e4       	ldi	r22, 0x41	; 65
     efe:	61 0f       	add	r22, r17
			lcd.DataWrite(i+'A');								//Write directly into ram chars 'A,B,C,D....'
     f00:	ce 01       	movw	r24, r28
     f02:	45 96       	adiw	r24, 0x15	; 21
     f04:	d1 da       	rcall	.-2654   	; 0x4a8 <_ZN19class_HD44780_Drive9DataWriteEh>
			time.DelayMillisByInterrupt(250);					//250ms between writes to visible show A,B,C,D.....characters at screen slowly
     f06:	4a ef       	ldi	r20, 0xFA	; 250
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	ce 01       	movw	r24, r28
     f10:	85 96       	adiw	r24, 0x25	; 37
     f12:	25 d1       	rcall	.+586    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		// WRITE DIRECTLY TO CHARACTERS RAM
		lcd.Cls();												//Clear Screen
		lcd.Locate(2,1);
					  //1234567890123456
		lcd.PutSF(PSTR("WRITE DIRECTLY  "));					//Show Cursor Right character into flash
		for(uint8_t i=0;i<lcd.GetCols();i++)
     f14:	1f 5f       	subi	r17, 0xFF	; 255
     f16:	88 8d       	ldd	r24, Y+24	; 0x18
     f18:	18 17       	cp	r17, r24
     f1a:	60 f3       	brcs	.-40     	; 0xef4 <main+0x462>
		{
			lcd.SetDDRAMAddr(i);								//Set directly ram address
			lcd.DataWrite(i+'A');								//Write directly into ram chars 'A,B,C,D....'
			time.DelayMillisByInterrupt(250);					//250ms between writes to visible show A,B,C,D.....characters at screen slowly
		}
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     f1c:	40 ed       	ldi	r20, 0xD0	; 208
     f1e:	57 e0       	ldi	r21, 0x07	; 7
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	ce 01       	movw	r24, r28
     f26:	85 96       	adiw	r24, 0x25	; 37
     f28:	1a d1       	rcall	.+564    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		//------------------------------------------------------------------------------------------------------
		// REDEFINE CHARACTER
		lcd.Cls();												//Clear Screen
     f2a:	ce 01       	movw	r24, r28
     f2c:	45 96       	adiw	r24, 0x15	; 21
     f2e:	3f db       	rcall	.-2434   	; 0x5ae <_ZN19class_HD44780_Drive3ClsEv>
		lcd.Locate(2,1);
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	ce 01       	movw	r24, r28
     f36:	45 96       	adiw	r24, 0x15	; 21
     f38:	a3 db       	rcall	.-2234   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
					  //1234567890123456
		lcd.PutSF(PSTR("REDEFINED CHARS."));					//Show Cursor Right character into flash
     f3a:	6a e7       	ldi	r22, 0x7A	; 122
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	ce 01       	movw	r24, r28
     f40:	45 96       	adiw	r24, 0x15	; 21
     f42:	f9 db       	rcall	.-2062   	; 0x736 <_ZN19class_HD44780_Drive5PutSFEPKc>
		
	
		lcd.RedefineChar(1,newChar1_Box);						//Redefine character ASCII 1 to a box
     f44:	40 ed       	ldi	r20, 0xD0	; 208
     f46:	51 e0       	ldi	r21, 0x01	; 1
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	ce 01       	movw	r24, r28
     f4c:	45 96       	adiw	r24, 0x15	; 21
     f4e:	28 dc       	rcall	.-1968   	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
		lcd.RedefineChar(2,newChar2_Box);						//Redefine character ASCII 2 to a triangle
     f50:	48 ec       	ldi	r20, 0xC8	; 200
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	62 e0       	ldi	r22, 0x02	; 2
     f56:	ce 01       	movw	r24, r28
     f58:	45 96       	adiw	r24, 0x15	; 21
     f5a:	22 dc       	rcall	.-1980   	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
		lcd.RedefineChar(3,newChar3_Box);						//Redefine character ASCII 4 to a round box
     f5c:	40 ec       	ldi	r20, 0xC0	; 192
     f5e:	51 e0       	ldi	r21, 0x01	; 1
     f60:	63 e0       	ldi	r22, 0x03	; 3
     f62:	ce 01       	movw	r24, r28
     f64:	45 96       	adiw	r24, 0x15	; 21
     f66:	1c dc       	rcall	.-1992   	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
		lcd.RedefineChar(4,newChar4_Box);						//Redefine character ASCII 5 to a face
     f68:	48 eb       	ldi	r20, 0xB8	; 184
     f6a:	51 e0       	ldi	r21, 0x01	; 1
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	ce 01       	movw	r24, r28
     f70:	45 96       	adiw	r24, 0x15	; 21
     f72:	16 dc       	rcall	.-2004   	; 0x7a0 <_ZN19class_HD44780_Drive12RedefineCharEhPKc>
		lcd.Locate(1,1);										//Locate at 1,1						
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	ce 01       	movw	r24, r28
     f7a:	45 96       	adiw	r24, 0x15	; 21
     f7c:	81 db       	rcall	.-2302   	; 0x680 <_ZN19class_HD44780_Drive6LocateEhh>
		lcd.PutC(0x01);lcd.PutC(0x01);lcd.PutC(' ');			//Draw 2 boxex
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	ce 01       	movw	r24, r28
     f82:	45 96       	adiw	r24, 0x15	; 21
     f84:	95 db       	rcall	.-2262   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	ce 01       	movw	r24, r28
     f8a:	45 96       	adiw	r24, 0x15	; 21
     f8c:	91 db       	rcall	.-2270   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     f8e:	60 e2       	ldi	r22, 0x20	; 32
     f90:	ce 01       	movw	r24, r28
     f92:	45 96       	adiw	r24, 0x15	; 21
     f94:	8d db       	rcall	.-2278   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
		lcd.PutC(0x02);lcd.PutC(0x02);lcd.PutC(' ');			//Draw 2 triangle2
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	ce 01       	movw	r24, r28
     f9a:	45 96       	adiw	r24, 0x15	; 21
     f9c:	89 db       	rcall	.-2286   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	ce 01       	movw	r24, r28
     fa2:	45 96       	adiw	r24, 0x15	; 21
     fa4:	85 db       	rcall	.-2294   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     fa6:	60 e2       	ldi	r22, 0x20	; 32
     fa8:	ce 01       	movw	r24, r28
     faa:	45 96       	adiw	r24, 0x15	; 21
     fac:	81 db       	rcall	.-2302   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
		lcd.PutC(0x03);lcd.PutC(0x03);lcd.PutC(' ');			//Draw 2 round boxes
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	ce 01       	movw	r24, r28
     fb2:	45 96       	adiw	r24, 0x15	; 21
     fb4:	7d db       	rcall	.-2310   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     fb6:	63 e0       	ldi	r22, 0x03	; 3
     fb8:	ce 01       	movw	r24, r28
     fba:	45 96       	adiw	r24, 0x15	; 21
     fbc:	79 db       	rcall	.-2318   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     fbe:	60 e2       	ldi	r22, 0x20	; 32
     fc0:	ce 01       	movw	r24, r28
     fc2:	45 96       	adiw	r24, 0x15	; 21
     fc4:	75 db       	rcall	.-2326   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
		lcd.PutC(0x04);lcd.PutC(0x04);lcd.PutC(' ');			//Draw 2 faces
     fc6:	64 e0       	ldi	r22, 0x04	; 4
     fc8:	ce 01       	movw	r24, r28
     fca:	45 96       	adiw	r24, 0x15	; 21
     fcc:	71 db       	rcall	.-2334   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     fce:	64 e0       	ldi	r22, 0x04	; 4
     fd0:	ce 01       	movw	r24, r28
     fd2:	45 96       	adiw	r24, 0x15	; 21
     fd4:	6d db       	rcall	.-2342   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
     fd6:	60 e2       	ldi	r22, 0x20	; 32
     fd8:	ce 01       	movw	r24, r28
     fda:	45 96       	adiw	r24, 0x15	; 21
     fdc:	69 db       	rcall	.-2350   	; 0x6b0 <_ZN19class_HD44780_Drive4PutCEc>
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
     fde:	40 ed       	ldi	r20, 0xD0	; 208
     fe0:	57 e0       	ldi	r21, 0x07	; 7
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	ce 01       	movw	r24, r28
     fe8:	85 96       	adiw	r24, 0x25	; 37
     fea:	b9 d0       	rcall	.+370    	; 0x115e <_ZN10class_Time22DelayMillisByInterruptEm>
		// SHOW DEMO LOOP COUNTER
		lcd.Cls();												//Clear Screen
					  //1234567890123456
		lcd.PutSF(PSTR("DEMO LOOP COUNT "));					//Show Version print characters into FLASH
		lcd.Locate(2,1);
		sprintf(buf,   "     [%4d]     ",count++);
     fec:	84 01       	movw	r16, r8
		lcd.PutC(0x01);lcd.PutC(0x01);lcd.PutC(' ');			//Draw 2 boxex
		lcd.PutC(0x02);lcd.PutC(0x02);lcd.PutC(' ');			//Draw 2 triangle2
		lcd.PutC(0x03);lcd.PutC(0x03);lcd.PutC(' ');			//Draw 2 round boxes
		lcd.PutC(0x04);lcd.PutC(0x04);lcd.PutC(' ');			//Draw 2 faces
		time.DelayMillisByInterrupt(_DELAY_BETWEEN_DEMOS);
	}
     fee:	a8 cd       	rjmp	.-1200   	; 0xb40 <main+0xae>

00000ff0 <_ZN10class_Time10InitializeEv>:
{
    unsigned char sreg;
	uint16_t	  prescaler;

    //Save SREG
    sreg=SREG;
     ff0:	9f b7       	in	r25, 0x3f	; 63
    //Disable Interrupts
    cli();
     ff2:	f8 94       	cli
		TCNT0=0;
		//enable timer compare A interrupt
		TIMSK0|=(1<<OCIE0A);
	#elif defined(_AVR_IOM8_H_)
		//clock divided by 256 Timer0 Overflow
		TCCR0 = (1<<CS02)|(0<<CS01)|(0<<CS00);
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	83 bf       	out	0x33, r24	; 51
		TCNT0 =256-(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ);
     ff8:	87 ee       	ldi	r24, 0xE7	; 231
     ffa:	82 bf       	out	0x32, r24	; 50
		//Enable TIMER0 CTC interrupt
		TIMSK|=(1<<TOIE0);
     ffc:	89 b7       	in	r24, 0x39	; 57
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	89 bf       	out	0x39, r24	; 57
	#elif defined(_AVR_IOM328P_H_)
	#elif defined(_AVR_IOM8_H_)
	#endif
#endif		
    //Restore Interrupts
    SREG=sreg;
    1002:	9f bf       	out	0x3f, r25	; 63
    1004:	08 95       	ret

00001006 <_ZN10class_TimeC1Ev>:
//	| NAME    :  timeInit								                            |
//	| INPUT   :  none								                                |
//	| OUTPUT  :  none								                                |
//	| REMARKS :  									                                |
//	+-------------------------------------------------------------------------------+
class_Time::class_Time()
    1006:	cf 93       	push	r28
{
	unsigned char sreg;

    //save SREG
	sreg=SREG;
    1008:	cf b7       	in	r28, 0x3f	; 63
    //Disable Interrupts
	cli();
    100a:	f8 94       	cli
    //Check if already Initialized
    if (_time.Initialized==false)
    100c:	20 91 94 00 	lds	r18, 0x0094
    1010:	21 11       	cpse	r18, r1
    1012:	04 c0       	rjmp	.+8      	; 0x101c <_ZN10class_TimeC1Ev+0x16>
    {
        //set initialized
        _time.Initialized=true;
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	20 93 94 00 	sts	0x0094, r18
        //Initialize
        Initialize();
    101a:	ea df       	rcall	.-44     	; 0xff0 <_ZN10class_Time10InitializeEv>
    }
    
    //Restore SREG state
	SREG=sreg;
    101c:	cf bf       	out	0x3f, r28	; 63
}
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <__vector_9>:
		    _timeInterrupt();
            _timeClock();
        }
    #elif defined(_AVR_IOM8_H_)
        ISR(TIMER0_OVF_vect)
        {
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31

            #define tcnt0_value (256-(F_CPU/TIME_TIMER_DIV/TIME_TIMER_FREQ))

		    TCNT0=tcnt0_value;
    1044:	87 ee       	ldi	r24, 0xE7	; 231
    1046:	82 bf       	out	0x32, r24	; 50
		    sei();
    1048:	78 94       	sei
           _time.TimerTick+=TIME_1MS;
    104a:	ec e8       	ldi	r30, 0x8C	; 140
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	21 85       	ldd	r18, Z+9	; 0x09
    1050:	32 85       	ldd	r19, Z+10	; 0x0a
    1052:	43 85       	ldd	r20, Z+11	; 0x0b
    1054:	54 85       	ldd	r21, Z+12	; 0x0c
    1056:	65 85       	ldd	r22, Z+13	; 0x0d
    1058:	76 85       	ldd	r23, Z+14	; 0x0e
    105a:	87 85       	ldd	r24, Z+15	; 0x0f
    105c:	90 89       	ldd	r25, Z+16	; 0x10
    105e:	24 53       	subi	r18, 0x34	; 52
    1060:	33 43       	sbci	r19, 0x33	; 51
    1062:	43 43       	sbci	r20, 0x33	; 51
    1064:	5f 4f       	sbci	r21, 0xFF	; 255
    1066:	6f 4f       	sbci	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	21 87       	std	Z+9, r18	; 0x09
    1070:	32 87       	std	Z+10, r19	; 0x0a
    1072:	43 87       	std	Z+11, r20	; 0x0b
    1074:	54 87       	std	Z+12, r21	; 0x0c
    1076:	65 87       	std	Z+13, r22	; 0x0d
    1078:	76 87       	std	Z+14, r23	; 0x0e
    107a:	87 87       	std	Z+15, r24	; 0x0f
    107c:	90 8b       	std	Z+16, r25	; 0x10
//	| REMARKS :  to used callback function define a routine following format                |
//  |            callback(uint8_t Hour,uint8_t Minute,uint8_t Second);                      |
//	+---------------------------------------------------------------------------------------+
static void _timeInterrupt()
{
    if (_time.InterruptInUse)
    107e:	87 81       	ldd	r24, Z+7	; 0x07
    1080:	88 23       	and	r24, r24
    1082:	39 f0       	breq	.+14     	; 0x1092 <__vector_9+0x70>
    {
        if (_time.TimeInterruptCallBackFunc!=nullptr) _time.TimeInterruptCallBackFunc();
    1084:	e0 91 9f 00 	lds	r30, 0x009F
    1088:	f0 91 a0 00 	lds	r31, 0x00A0
    108c:	30 97       	sbiw	r30, 0x00	; 0
    108e:	09 f0       	breq	.+2      	; 0x1092 <__vector_9+0x70>
    1090:	09 95       	icall
//	|			 this callback function if activated is called 10 times per second			|
//	+---------------------------------------------------------------------------------------+
static void _timeClock()
{
    //check if on
    if (_time.TimeInUse)
    1092:	80 91 92 00 	lds	r24, 0x0092
    1096:	88 23       	and	r24, r24
    1098:	d9 f1       	breq	.+118    	; 0x1110 <__vector_9+0xee>
    {
        //Time to pump Time?
        _time.Milliseconds++;
    109a:	ec e8       	ldi	r30, 0x8C	; 140
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	83 81       	ldd	r24, Z+3	; 0x03
    10a0:	94 81       	ldd	r25, Z+4	; 0x04
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	94 83       	std	Z+4, r25	; 0x04
    10a6:	83 83       	std	Z+3, r24	; 0x03
        if (_time.Milliseconds<TIME_TIMER_FREQ/10) return;
    10a8:	83 81       	ldd	r24, Z+3	; 0x03
    10aa:	94 81       	ldd	r25, Z+4	; 0x04
    10ac:	8d 37       	cpi	r24, 0x7D	; 125
    10ae:	91 05       	cpc	r25, r1
    10b0:	78 f1       	brcs	.+94     	; 0x1110 <__vector_9+0xee>
        //clear timer pump
        _time.Milliseconds=0;
    10b2:	14 82       	std	Z+4, r1	; 0x04
    10b4:	13 82       	std	Z+3, r1	; 0x03
        //tenth of seconds
        _time.Tenth++;
    10b6:	85 81       	ldd	r24, Z+5	; 0x05
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	85 83       	std	Z+5, r24	; 0x05
        if (_time.Tenth>9)
    10bc:	85 81       	ldd	r24, Z+5	; 0x05
    10be:	8a 30       	cpi	r24, 0x0A	; 10
    10c0:	b8 f0       	brcs	.+46     	; 0x10f0 <__vector_9+0xce>
        {
            _time.Tenth=0;
    10c2:	15 82       	std	Z+5, r1	; 0x05
            //yes, pump Seconds
            _time.Second++;
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	82 83       	std	Z+2, r24	; 0x02
            if (_time.Second>59)
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	8c 33       	cpi	r24, 0x3C	; 60
    10ce:	80 f0       	brcs	.+32     	; 0x10f0 <__vector_9+0xce>
            {
                //yes, pump Minutes clear second
                _time.Second=0;
    10d0:	12 82       	std	Z+2, r1	; 0x02
                _time.Minute++;
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
    10d6:	81 83       	std	Z+1, r24	; 0x01
                if (_time.Minute>59)
    10d8:	81 81       	ldd	r24, Z+1	; 0x01
    10da:	8c 33       	cpi	r24, 0x3C	; 60
    10dc:	48 f0       	brcs	.+18     	; 0x10f0 <__vector_9+0xce>
                {
                    //yes, pump Hours clear Minute
                    _time.Minute=0;
    10de:	11 82       	std	Z+1, r1	; 0x01
                    _time.Hour++;
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
                    if (_time.Hour>23) _time.Hour=0;
    10e6:	80 81       	ld	r24, Z
    10e8:	88 31       	cpi	r24, 0x18	; 24
    10ea:	10 f0       	brcs	.+4      	; 0x10f0 <__vector_9+0xce>
    10ec:	10 92 8c 00 	sts	0x008C, r1
                }
            }
        }
        //callback function giving to defined routine parms hour,min,second (updated each second)
        if (_time.TimeClockCallBackFunc!=nullptr) _time.TimeClockCallBackFunc(_time.Hour,_time.Minute,_time.Second);
    10f0:	e0 91 9d 00 	lds	r30, 0x009D
    10f4:	f0 91 9e 00 	lds	r31, 0x009E
    10f8:	30 97       	sbiw	r30, 0x00	; 0
    10fa:	51 f0       	breq	.+20     	; 0x1110 <__vector_9+0xee>
    10fc:	ac e8       	ldi	r26, 0x8C	; 140
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	12 96       	adiw	r26, 0x02	; 2
    1102:	4c 91       	ld	r20, X
    1104:	12 97       	sbiw	r26, 0x02	; 2
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	6c 91       	ld	r22, X
    110a:	11 97       	sbiw	r26, 0x01	; 1
    110c:	8c 91       	ld	r24, X
    110e:	09 95       	icall
		    TCNT0=tcnt0_value;
		    sei();
           _time.TimerTick+=TIME_1MS;
	       _timeInterrupt();
           _timeClock();
        }
    1110:	ff 91       	pop	r31
    1112:	ef 91       	pop	r30
    1114:	bf 91       	pop	r27
    1116:	af 91       	pop	r26
    1118:	9f 91       	pop	r25
    111a:	8f 91       	pop	r24
    111c:	7f 91       	pop	r23
    111e:	6f 91       	pop	r22
    1120:	5f 91       	pop	r21
    1122:	4f 91       	pop	r20
    1124:	3f 91       	pop	r19
    1126:	2f 91       	pop	r18
    1128:	0f 90       	pop	r0
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	0f 90       	pop	r0
    112e:	1f 90       	pop	r1
    1130:	18 95       	reti

00001132 <_ZN10class_Time15GetMillisecondsEv>:
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetMilliseconds()
{
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    1136:	ec e8       	ldi	r30, 0x8C	; 140
    1138:	f0 e0       	ldi	r31, 0x00	; 0
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
    113a:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    113c:	04 85       	ldd	r16, Z+12	; 0x0c
    113e:	15 85       	ldd	r17, Z+13	; 0x0d
    1140:	26 85       	ldd	r18, Z+14	; 0x0e
    1142:	37 85       	ldd	r19, Z+15	; 0x0f
        //This routine avoid Tick increments during read of consecutive Ticks
        do
        {
            sei();
            tmp1=GetTimeTick();
            sei();
    1144:	78 94       	sei
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+

uint32_t class_Time::GetTimeTick()
{
    return *((uint32_t*)((uint8_t*)&_time.TimerTick+3));
    1146:	64 85       	ldd	r22, Z+12	; 0x0c
    1148:	75 85       	ldd	r23, Z+13	; 0x0d
    114a:	86 85       	ldd	r24, Z+14	; 0x0e
    114c:	97 85       	ldd	r25, Z+15	; 0x0f

uint32_t class_Time::GetMilliseconds()
{
        uint32_t tmp1=0, tmp2=0;
        //This routine avoid Tick increments during read of consecutive Ticks
        do
    114e:	06 17       	cp	r16, r22
    1150:	17 07       	cpc	r17, r23
    1152:	28 07       	cpc	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	89 f7       	brne	.-30     	; 0x113a <_ZN10class_Time15GetMillisecondsEv+0x8>
            sei();
            tmp2=GetTimeTick();
        } while (tmp1!=tmp2);
        //return tick value
        return tmp2;
}
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <_ZN10class_Time22DelayMillisByInterruptEm>:
//	| INPUT   :  timeMs in milliseconds					                            |
//	| OUTPUT  :  								                                    |
//	| REMARKS :  								                                    |
//	+-------------------------------------------------------------------------------+
void	class_Time::DelayMillisByInterrupt(uint32_t timeMs)
{
    115e:	8f 92       	push	r8
    1160:	9f 92       	push	r9
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	4a 01       	movw	r8, r20
    1176:	5b 01       	movw	r10, r22
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             					//get actual tick value
    1178:	dc df       	rcall	.-72     	; 0x1132 <_ZN10class_Time15GetMillisecondsEv>
    117a:	6b 01       	movw	r12, r22
    117c:	7c 01       	movw	r14, r24
	do{
		tmp2=GetMilliseconds();
    117e:	ce 01       	movw	r24, r28
    1180:	d8 df       	rcall	.-80     	; 0x1132 <_ZN10class_Time15GetMillisecondsEv>
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	8c 19       	sub	r24, r12
    1188:	9d 09       	sbc	r25, r13
    118a:	ae 09       	sbc	r26, r14
    118c:	bf 09       	sbc	r27, r15
void	class_Time::DelayMillisByInterrupt(uint32_t timeMs)
{
	uint32_t tmp1,tmp2;

	tmp1=GetMilliseconds();             					//get actual tick value
	do{
    118e:	88 15       	cp	r24, r8
    1190:	99 05       	cpc	r25, r9
    1192:	aa 05       	cpc	r26, r10
    1194:	bb 05       	cpc	r27, r11
    1196:	98 f3       	brcs	.-26     	; 0x117e <_ZN10class_Time22DelayMillisByInterruptEm+0x20>
		tmp2=GetMilliseconds();
	} while ((tmp2-tmp1)<timeMs);							//wait reach a predefined value tick
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	08 95       	ret

000011ae <malloc>:
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	91 05       	cpc	r25, r1
    11b6:	10 f4       	brcc	.+4      	; 0x11bc <malloc+0xe>
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	e0 91 a3 00 	lds	r30, 0x00A3
    11c0:	f0 91 a4 00 	lds	r31, 0x00A4
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	c0 e0       	ldi	r28, 0x00	; 0
    11ca:	d0 e0       	ldi	r29, 0x00	; 0
    11cc:	30 97       	sbiw	r30, 0x00	; 0
    11ce:	11 f1       	breq	.+68     	; 0x1214 <malloc+0x66>
    11d0:	40 81       	ld	r20, Z
    11d2:	51 81       	ldd	r21, Z+1	; 0x01
    11d4:	48 17       	cp	r20, r24
    11d6:	59 07       	cpc	r21, r25
    11d8:	c0 f0       	brcs	.+48     	; 0x120a <malloc+0x5c>
    11da:	48 17       	cp	r20, r24
    11dc:	59 07       	cpc	r21, r25
    11de:	61 f4       	brne	.+24     	; 0x11f8 <malloc+0x4a>
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 97       	sbiw	r28, 0x00	; 0
    11e6:	19 f0       	breq	.+6      	; 0x11ee <malloc+0x40>
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	2b c0       	rjmp	.+86     	; 0x1244 <malloc+0x96>
    11ee:	90 93 a4 00 	sts	0x00A4, r25
    11f2:	80 93 a3 00 	sts	0x00A3, r24
    11f6:	26 c0       	rjmp	.+76     	; 0x1244 <malloc+0x96>
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	19 f0       	breq	.+6      	; 0x1204 <malloc+0x56>
    11fe:	42 17       	cp	r20, r18
    1200:	53 07       	cpc	r21, r19
    1202:	18 f4       	brcc	.+6      	; 0x120a <malloc+0x5c>
    1204:	9a 01       	movw	r18, r20
    1206:	be 01       	movw	r22, r28
    1208:	df 01       	movw	r26, r30
    120a:	ef 01       	movw	r28, r30
    120c:	02 80       	ldd	r0, Z+2	; 0x02
    120e:	f3 81       	ldd	r31, Z+3	; 0x03
    1210:	e0 2d       	mov	r30, r0
    1212:	dc cf       	rjmp	.-72     	; 0x11cc <malloc+0x1e>
    1214:	21 15       	cp	r18, r1
    1216:	31 05       	cpc	r19, r1
    1218:	09 f1       	breq	.+66     	; 0x125c <malloc+0xae>
    121a:	28 1b       	sub	r18, r24
    121c:	39 0b       	sbc	r19, r25
    121e:	24 30       	cpi	r18, 0x04	; 4
    1220:	31 05       	cpc	r19, r1
    1222:	90 f4       	brcc	.+36     	; 0x1248 <malloc+0x9a>
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	8d 91       	ld	r24, X+
    1228:	9c 91       	ld	r25, X
    122a:	13 97       	sbiw	r26, 0x03	; 3
    122c:	61 15       	cp	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	21 f0       	breq	.+8      	; 0x123a <malloc+0x8c>
    1232:	fb 01       	movw	r30, r22
    1234:	93 83       	std	Z+3, r25	; 0x03
    1236:	82 83       	std	Z+2, r24	; 0x02
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <malloc+0x94>
    123a:	90 93 a4 00 	sts	0x00A4, r25
    123e:	80 93 a3 00 	sts	0x00A3, r24
    1242:	fd 01       	movw	r30, r26
    1244:	32 96       	adiw	r30, 0x02	; 2
    1246:	44 c0       	rjmp	.+136    	; 0x12d0 <malloc+0x122>
    1248:	fd 01       	movw	r30, r26
    124a:	e2 0f       	add	r30, r18
    124c:	f3 1f       	adc	r31, r19
    124e:	81 93       	st	Z+, r24
    1250:	91 93       	st	Z+, r25
    1252:	22 50       	subi	r18, 0x02	; 2
    1254:	31 09       	sbc	r19, r1
    1256:	2d 93       	st	X+, r18
    1258:	3c 93       	st	X, r19
    125a:	3a c0       	rjmp	.+116    	; 0x12d0 <malloc+0x122>
    125c:	20 91 a1 00 	lds	r18, 0x00A1
    1260:	30 91 a2 00 	lds	r19, 0x00A2
    1264:	23 2b       	or	r18, r19
    1266:	41 f4       	brne	.+16     	; 0x1278 <malloc+0xca>
    1268:	20 91 62 00 	lds	r18, 0x0062
    126c:	30 91 63 00 	lds	r19, 0x0063
    1270:	30 93 a2 00 	sts	0x00A2, r19
    1274:	20 93 a1 00 	sts	0x00A1, r18
    1278:	20 91 60 00 	lds	r18, 0x0060
    127c:	30 91 61 00 	lds	r19, 0x0061
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	41 f4       	brne	.+16     	; 0x1296 <malloc+0xe8>
    1286:	2d b7       	in	r18, 0x3d	; 61
    1288:	3e b7       	in	r19, 0x3e	; 62
    128a:	40 91 64 00 	lds	r20, 0x0064
    128e:	50 91 65 00 	lds	r21, 0x0065
    1292:	24 1b       	sub	r18, r20
    1294:	35 0b       	sbc	r19, r21
    1296:	e0 91 a1 00 	lds	r30, 0x00A1
    129a:	f0 91 a2 00 	lds	r31, 0x00A2
    129e:	e2 17       	cp	r30, r18
    12a0:	f3 07       	cpc	r31, r19
    12a2:	a0 f4       	brcc	.+40     	; 0x12cc <malloc+0x11e>
    12a4:	2e 1b       	sub	r18, r30
    12a6:	3f 0b       	sbc	r19, r31
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
    12ac:	78 f0       	brcs	.+30     	; 0x12cc <malloc+0x11e>
    12ae:	ac 01       	movw	r20, r24
    12b0:	4e 5f       	subi	r20, 0xFE	; 254
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	24 17       	cp	r18, r20
    12b6:	35 07       	cpc	r19, r21
    12b8:	48 f0       	brcs	.+18     	; 0x12cc <malloc+0x11e>
    12ba:	4e 0f       	add	r20, r30
    12bc:	5f 1f       	adc	r21, r31
    12be:	50 93 a2 00 	sts	0x00A2, r21
    12c2:	40 93 a1 00 	sts	0x00A1, r20
    12c6:	81 93       	st	Z+, r24
    12c8:	91 93       	st	Z+, r25
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <malloc+0x122>
    12cc:	e0 e0       	ldi	r30, 0x00	; 0
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	cf 01       	movw	r24, r30
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <free>:
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <free+0xe>
    12e4:	8c c0       	rjmp	.+280    	; 0x13fe <free+0x126>
    12e6:	fc 01       	movw	r30, r24
    12e8:	32 97       	sbiw	r30, 0x02	; 2
    12ea:	13 82       	std	Z+3, r1	; 0x03
    12ec:	12 82       	std	Z+2, r1	; 0x02
    12ee:	00 91 a3 00 	lds	r16, 0x00A3
    12f2:	10 91 a4 00 	lds	r17, 0x00A4
    12f6:	01 15       	cp	r16, r1
    12f8:	11 05       	cpc	r17, r1
    12fa:	81 f4       	brne	.+32     	; 0x131c <free+0x44>
    12fc:	20 81       	ld	r18, Z
    12fe:	31 81       	ldd	r19, Z+1	; 0x01
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	20 91 a1 00 	lds	r18, 0x00A1
    1308:	30 91 a2 00 	lds	r19, 0x00A2
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	79 f5       	brne	.+94     	; 0x1370 <free+0x98>
    1312:	f0 93 a2 00 	sts	0x00A2, r31
    1316:	e0 93 a1 00 	sts	0x00A1, r30
    131a:	71 c0       	rjmp	.+226    	; 0x13fe <free+0x126>
    131c:	d8 01       	movw	r26, r16
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	ae 17       	cp	r26, r30
    1324:	bf 07       	cpc	r27, r31
    1326:	50 f4       	brcc	.+20     	; 0x133c <free+0x64>
    1328:	12 96       	adiw	r26, 0x02	; 2
    132a:	2d 91       	ld	r18, X+
    132c:	3c 91       	ld	r19, X
    132e:	13 97       	sbiw	r26, 0x03	; 3
    1330:	ad 01       	movw	r20, r26
    1332:	21 15       	cp	r18, r1
    1334:	31 05       	cpc	r19, r1
    1336:	09 f1       	breq	.+66     	; 0x137a <free+0xa2>
    1338:	d9 01       	movw	r26, r18
    133a:	f3 cf       	rjmp	.-26     	; 0x1322 <free+0x4a>
    133c:	9d 01       	movw	r18, r26
    133e:	da 01       	movw	r26, r20
    1340:	33 83       	std	Z+3, r19	; 0x03
    1342:	22 83       	std	Z+2, r18	; 0x02
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	86 0f       	add	r24, r22
    134a:	97 1f       	adc	r25, r23
    134c:	82 17       	cp	r24, r18
    134e:	93 07       	cpc	r25, r19
    1350:	69 f4       	brne	.+26     	; 0x136c <free+0x94>
    1352:	ec 01       	movw	r28, r24
    1354:	28 81       	ld	r18, Y
    1356:	39 81       	ldd	r19, Y+1	; 0x01
    1358:	26 0f       	add	r18, r22
    135a:	37 1f       	adc	r19, r23
    135c:	2e 5f       	subi	r18, 0xFE	; 254
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	31 83       	std	Z+1, r19	; 0x01
    1362:	20 83       	st	Z, r18
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	93 83       	std	Z+3, r25	; 0x03
    136a:	82 83       	std	Z+2, r24	; 0x02
    136c:	45 2b       	or	r20, r21
    136e:	29 f4       	brne	.+10     	; 0x137a <free+0xa2>
    1370:	f0 93 a4 00 	sts	0x00A4, r31
    1374:	e0 93 a3 00 	sts	0x00A3, r30
    1378:	42 c0       	rjmp	.+132    	; 0x13fe <free+0x126>
    137a:	13 96       	adiw	r26, 0x03	; 3
    137c:	fc 93       	st	X, r31
    137e:	ee 93       	st	-X, r30
    1380:	12 97       	sbiw	r26, 0x02	; 2
    1382:	ed 01       	movw	r28, r26
    1384:	49 91       	ld	r20, Y+
    1386:	59 91       	ld	r21, Y+
    1388:	9e 01       	movw	r18, r28
    138a:	24 0f       	add	r18, r20
    138c:	35 1f       	adc	r19, r21
    138e:	e2 17       	cp	r30, r18
    1390:	f3 07       	cpc	r31, r19
    1392:	71 f4       	brne	.+28     	; 0x13b0 <free+0xd8>
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	84 0f       	add	r24, r20
    139a:	95 1f       	adc	r25, r21
    139c:	02 96       	adiw	r24, 0x02	; 2
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	9c 93       	st	X, r25
    13a2:	8e 93       	st	-X, r24
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	13 96       	adiw	r26, 0x03	; 3
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
    13ae:	12 97       	sbiw	r26, 0x02	; 2
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	d8 01       	movw	r26, r16
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	8d 91       	ld	r24, X+
    13ba:	9c 91       	ld	r25, X
    13bc:	13 97       	sbiw	r26, 0x03	; 3
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <free+0xf0>
    13c2:	f8 01       	movw	r30, r16
    13c4:	8c 01       	movw	r16, r24
    13c6:	f6 cf       	rjmp	.-20     	; 0x13b4 <free+0xdc>
    13c8:	8d 91       	ld	r24, X+
    13ca:	9c 91       	ld	r25, X
    13cc:	98 01       	movw	r18, r16
    13ce:	2e 5f       	subi	r18, 0xFE	; 254
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	82 0f       	add	r24, r18
    13d4:	93 1f       	adc	r25, r19
    13d6:	20 91 a1 00 	lds	r18, 0x00A1
    13da:	30 91 a2 00 	lds	r19, 0x00A2
    13de:	28 17       	cp	r18, r24
    13e0:	39 07       	cpc	r19, r25
    13e2:	69 f4       	brne	.+26     	; 0x13fe <free+0x126>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <free+0x11a>
    13e8:	10 92 a4 00 	sts	0x00A4, r1
    13ec:	10 92 a3 00 	sts	0x00A3, r1
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <free+0x11e>
    13f2:	13 82       	std	Z+3, r1	; 0x03
    13f4:	12 82       	std	Z+2, r1	; 0x02
    13f6:	10 93 a2 00 	sts	0x00A2, r17
    13fa:	00 93 a1 00 	sts	0x00A1, r16
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <sprintf>:
    1408:	ae e0       	ldi	r26, 0x0E	; 14
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e0       	ldi	r30, 0x09	; 9
    140e:	fa e0       	ldi	r31, 0x0A	; 10
    1410:	98 c2       	rjmp	.+1328   	; 0x1942 <__prologue_saves__+0x1c>
    1412:	0d 89       	ldd	r16, Y+21	; 0x15
    1414:	1e 89       	ldd	r17, Y+22	; 0x16
    1416:	86 e0       	ldi	r24, 0x06	; 6
    1418:	8c 83       	std	Y+4, r24	; 0x04
    141a:	1a 83       	std	Y+2, r17	; 0x02
    141c:	09 83       	std	Y+1, r16	; 0x01
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	9f e7       	ldi	r25, 0x7F	; 127
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	ae 01       	movw	r20, r28
    1428:	47 5e       	subi	r20, 0xE7	; 231
    142a:	5f 4f       	sbci	r21, 0xFF	; 255
    142c:	6f 89       	ldd	r22, Y+23	; 0x17
    142e:	78 8d       	ldd	r23, Y+24	; 0x18
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	09 d0       	rcall	.+18     	; 0x1448 <vfprintf>
    1436:	2f 81       	ldd	r18, Y+7	; 0x07
    1438:	38 85       	ldd	r19, Y+8	; 0x08
    143a:	f8 01       	movw	r30, r16
    143c:	e2 0f       	add	r30, r18
    143e:	f3 1f       	adc	r31, r19
    1440:	10 82       	st	Z, r1
    1442:	2e 96       	adiw	r28, 0x0e	; 14
    1444:	e4 e0       	ldi	r30, 0x04	; 4
    1446:	99 c2       	rjmp	.+1330   	; 0x197a <__epilogue_restores__+0x1c>

00001448 <vfprintf>:
    1448:	ac e0       	ldi	r26, 0x0C	; 12
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e2       	ldi	r30, 0x29	; 41
    144e:	fa e0       	ldi	r31, 0x0A	; 10
    1450:	6a c2       	rjmp	.+1236   	; 0x1926 <__prologue_saves__>
    1452:	7c 01       	movw	r14, r24
    1454:	6b 01       	movw	r12, r22
    1456:	8a 01       	movw	r16, r20
    1458:	fc 01       	movw	r30, r24
    145a:	17 82       	std	Z+7, r1	; 0x07
    145c:	16 82       	std	Z+6, r1	; 0x06
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	81 ff       	sbrs	r24, 1
    1462:	b0 c1       	rjmp	.+864    	; 0x17c4 <vfprintf+0x37c>
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	4c 01       	movw	r8, r24
    146a:	f7 01       	movw	r30, r14
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	f6 01       	movw	r30, r12
    1470:	93 fd       	sbrc	r25, 3
    1472:	85 91       	lpm	r24, Z+
    1474:	93 ff       	sbrs	r25, 3
    1476:	81 91       	ld	r24, Z+
    1478:	6f 01       	movw	r12, r30
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <vfprintf+0x38>
    147e:	9e c1       	rjmp	.+828    	; 0x17bc <vfprintf+0x374>
    1480:	85 32       	cpi	r24, 0x25	; 37
    1482:	39 f4       	brne	.+14     	; 0x1492 <vfprintf+0x4a>
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	6f 01       	movw	r12, r30
    148e:	85 32       	cpi	r24, 0x25	; 37
    1490:	21 f4       	brne	.+8      	; 0x149a <vfprintf+0x52>
    1492:	b7 01       	movw	r22, r14
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	b1 d1       	rcall	.+866    	; 0x17fa <fputc>
    1498:	e8 cf       	rjmp	.-48     	; 0x146a <vfprintf+0x22>
    149a:	51 2c       	mov	r5, r1
    149c:	31 2c       	mov	r3, r1
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	20 32       	cpi	r18, 0x20	; 32
    14a2:	a0 f4       	brcc	.+40     	; 0x14cc <vfprintf+0x84>
    14a4:	8b 32       	cpi	r24, 0x2B	; 43
    14a6:	69 f0       	breq	.+26     	; 0x14c2 <vfprintf+0x7a>
    14a8:	30 f4       	brcc	.+12     	; 0x14b6 <vfprintf+0x6e>
    14aa:	80 32       	cpi	r24, 0x20	; 32
    14ac:	59 f0       	breq	.+22     	; 0x14c4 <vfprintf+0x7c>
    14ae:	83 32       	cpi	r24, 0x23	; 35
    14b0:	69 f4       	brne	.+26     	; 0x14cc <vfprintf+0x84>
    14b2:	20 61       	ori	r18, 0x10	; 16
    14b4:	2c c0       	rjmp	.+88     	; 0x150e <vfprintf+0xc6>
    14b6:	8d 32       	cpi	r24, 0x2D	; 45
    14b8:	39 f0       	breq	.+14     	; 0x14c8 <vfprintf+0x80>
    14ba:	80 33       	cpi	r24, 0x30	; 48
    14bc:	39 f4       	brne	.+14     	; 0x14cc <vfprintf+0x84>
    14be:	21 60       	ori	r18, 0x01	; 1
    14c0:	26 c0       	rjmp	.+76     	; 0x150e <vfprintf+0xc6>
    14c2:	22 60       	ori	r18, 0x02	; 2
    14c4:	24 60       	ori	r18, 0x04	; 4
    14c6:	23 c0       	rjmp	.+70     	; 0x150e <vfprintf+0xc6>
    14c8:	28 60       	ori	r18, 0x08	; 8
    14ca:	21 c0       	rjmp	.+66     	; 0x150e <vfprintf+0xc6>
    14cc:	27 fd       	sbrc	r18, 7
    14ce:	27 c0       	rjmp	.+78     	; 0x151e <vfprintf+0xd6>
    14d0:	30 ed       	ldi	r19, 0xD0	; 208
    14d2:	38 0f       	add	r19, r24
    14d4:	3a 30       	cpi	r19, 0x0A	; 10
    14d6:	78 f4       	brcc	.+30     	; 0x14f6 <vfprintf+0xae>
    14d8:	26 ff       	sbrs	r18, 6
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <vfprintf+0xa0>
    14dc:	fa e0       	ldi	r31, 0x0A	; 10
    14de:	5f 9e       	mul	r5, r31
    14e0:	30 0d       	add	r19, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	53 2e       	mov	r5, r19
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <vfprintf+0xc6>
    14e8:	8a e0       	ldi	r24, 0x0A	; 10
    14ea:	38 9e       	mul	r3, r24
    14ec:	30 0d       	add	r19, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	33 2e       	mov	r3, r19
    14f2:	20 62       	ori	r18, 0x20	; 32
    14f4:	0c c0       	rjmp	.+24     	; 0x150e <vfprintf+0xc6>
    14f6:	8e 32       	cpi	r24, 0x2E	; 46
    14f8:	21 f4       	brne	.+8      	; 0x1502 <vfprintf+0xba>
    14fa:	26 fd       	sbrc	r18, 6
    14fc:	5f c1       	rjmp	.+702    	; 0x17bc <vfprintf+0x374>
    14fe:	20 64       	ori	r18, 0x40	; 64
    1500:	06 c0       	rjmp	.+12     	; 0x150e <vfprintf+0xc6>
    1502:	8c 36       	cpi	r24, 0x6C	; 108
    1504:	11 f4       	brne	.+4      	; 0x150a <vfprintf+0xc2>
    1506:	20 68       	ori	r18, 0x80	; 128
    1508:	02 c0       	rjmp	.+4      	; 0x150e <vfprintf+0xc6>
    150a:	88 36       	cpi	r24, 0x68	; 104
    150c:	41 f4       	brne	.+16     	; 0x151e <vfprintf+0xd6>
    150e:	f6 01       	movw	r30, r12
    1510:	93 fd       	sbrc	r25, 3
    1512:	85 91       	lpm	r24, Z+
    1514:	93 ff       	sbrs	r25, 3
    1516:	81 91       	ld	r24, Z+
    1518:	6f 01       	movw	r12, r30
    151a:	81 11       	cpse	r24, r1
    151c:	c1 cf       	rjmp	.-126    	; 0x14a0 <vfprintf+0x58>
    151e:	98 2f       	mov	r25, r24
    1520:	9f 7d       	andi	r25, 0xDF	; 223
    1522:	95 54       	subi	r25, 0x45	; 69
    1524:	93 30       	cpi	r25, 0x03	; 3
    1526:	28 f4       	brcc	.+10     	; 0x1532 <vfprintf+0xea>
    1528:	0c 5f       	subi	r16, 0xFC	; 252
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	ff e3       	ldi	r31, 0x3F	; 63
    152e:	f9 83       	std	Y+1, r31	; 0x01
    1530:	0d c0       	rjmp	.+26     	; 0x154c <vfprintf+0x104>
    1532:	83 36       	cpi	r24, 0x63	; 99
    1534:	31 f0       	breq	.+12     	; 0x1542 <vfprintf+0xfa>
    1536:	83 37       	cpi	r24, 0x73	; 115
    1538:	71 f0       	breq	.+28     	; 0x1556 <vfprintf+0x10e>
    153a:	83 35       	cpi	r24, 0x53	; 83
    153c:	09 f0       	breq	.+2      	; 0x1540 <vfprintf+0xf8>
    153e:	57 c0       	rjmp	.+174    	; 0x15ee <vfprintf+0x1a6>
    1540:	21 c0       	rjmp	.+66     	; 0x1584 <vfprintf+0x13c>
    1542:	f8 01       	movw	r30, r16
    1544:	80 81       	ld	r24, Z
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	0e 5f       	subi	r16, 0xFE	; 254
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	44 24       	eor	r4, r4
    154e:	43 94       	inc	r4
    1550:	51 2c       	mov	r5, r1
    1552:	54 01       	movw	r10, r8
    1554:	14 c0       	rjmp	.+40     	; 0x157e <vfprintf+0x136>
    1556:	38 01       	movw	r6, r16
    1558:	f2 e0       	ldi	r31, 0x02	; 2
    155a:	6f 0e       	add	r6, r31
    155c:	71 1c       	adc	r7, r1
    155e:	f8 01       	movw	r30, r16
    1560:	a0 80       	ld	r10, Z
    1562:	b1 80       	ldd	r11, Z+1	; 0x01
    1564:	26 ff       	sbrs	r18, 6
    1566:	03 c0       	rjmp	.+6      	; 0x156e <vfprintf+0x126>
    1568:	65 2d       	mov	r22, r5
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x12a>
    156e:	6f ef       	ldi	r22, 0xFF	; 255
    1570:	7f ef       	ldi	r23, 0xFF	; 255
    1572:	c5 01       	movw	r24, r10
    1574:	2c 87       	std	Y+12, r18	; 0x0c
    1576:	36 d1       	rcall	.+620    	; 0x17e4 <strnlen>
    1578:	2c 01       	movw	r4, r24
    157a:	83 01       	movw	r16, r6
    157c:	2c 85       	ldd	r18, Y+12	; 0x0c
    157e:	2f 77       	andi	r18, 0x7F	; 127
    1580:	22 2e       	mov	r2, r18
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <vfprintf+0x168>
    1584:	38 01       	movw	r6, r16
    1586:	f2 e0       	ldi	r31, 0x02	; 2
    1588:	6f 0e       	add	r6, r31
    158a:	71 1c       	adc	r7, r1
    158c:	f8 01       	movw	r30, r16
    158e:	a0 80       	ld	r10, Z
    1590:	b1 80       	ldd	r11, Z+1	; 0x01
    1592:	26 ff       	sbrs	r18, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x154>
    1596:	65 2d       	mov	r22, r5
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x158>
    159c:	6f ef       	ldi	r22, 0xFF	; 255
    159e:	7f ef       	ldi	r23, 0xFF	; 255
    15a0:	c5 01       	movw	r24, r10
    15a2:	2c 87       	std	Y+12, r18	; 0x0c
    15a4:	14 d1       	rcall	.+552    	; 0x17ce <strnlen_P>
    15a6:	2c 01       	movw	r4, r24
    15a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    15aa:	20 68       	ori	r18, 0x80	; 128
    15ac:	22 2e       	mov	r2, r18
    15ae:	83 01       	movw	r16, r6
    15b0:	23 fc       	sbrc	r2, 3
    15b2:	19 c0       	rjmp	.+50     	; 0x15e6 <vfprintf+0x19e>
    15b4:	83 2d       	mov	r24, r3
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	48 16       	cp	r4, r24
    15ba:	59 06       	cpc	r5, r25
    15bc:	a0 f4       	brcc	.+40     	; 0x15e6 <vfprintf+0x19e>
    15be:	b7 01       	movw	r22, r14
    15c0:	80 e2       	ldi	r24, 0x20	; 32
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	1a d1       	rcall	.+564    	; 0x17fa <fputc>
    15c6:	3a 94       	dec	r3
    15c8:	f5 cf       	rjmp	.-22     	; 0x15b4 <vfprintf+0x16c>
    15ca:	f5 01       	movw	r30, r10
    15cc:	27 fc       	sbrc	r2, 7
    15ce:	85 91       	lpm	r24, Z+
    15d0:	27 fe       	sbrs	r2, 7
    15d2:	81 91       	ld	r24, Z+
    15d4:	5f 01       	movw	r10, r30
    15d6:	b7 01       	movw	r22, r14
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0f d1       	rcall	.+542    	; 0x17fa <fputc>
    15dc:	31 10       	cpse	r3, r1
    15de:	3a 94       	dec	r3
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	4f 1a       	sub	r4, r31
    15e4:	51 08       	sbc	r5, r1
    15e6:	41 14       	cp	r4, r1
    15e8:	51 04       	cpc	r5, r1
    15ea:	79 f7       	brne	.-34     	; 0x15ca <vfprintf+0x182>
    15ec:	de c0       	rjmp	.+444    	; 0x17aa <vfprintf+0x362>
    15ee:	84 36       	cpi	r24, 0x64	; 100
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <vfprintf+0x1ae>
    15f2:	89 36       	cpi	r24, 0x69	; 105
    15f4:	31 f5       	brne	.+76     	; 0x1642 <vfprintf+0x1fa>
    15f6:	f8 01       	movw	r30, r16
    15f8:	27 ff       	sbrs	r18, 7
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <vfprintf+0x1c2>
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	0c 5f       	subi	r16, 0xFC	; 252
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	08 c0       	rjmp	.+16     	; 0x161a <vfprintf+0x1d2>
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	07 2e       	mov	r0, r23
    1610:	00 0c       	add	r0, r0
    1612:	88 0b       	sbc	r24, r24
    1614:	99 0b       	sbc	r25, r25
    1616:	0e 5f       	subi	r16, 0xFE	; 254
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	2f 76       	andi	r18, 0x6F	; 111
    161c:	72 2e       	mov	r7, r18
    161e:	97 ff       	sbrs	r25, 7
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <vfprintf+0x1ec>
    1622:	90 95       	com	r25
    1624:	80 95       	com	r24
    1626:	70 95       	com	r23
    1628:	61 95       	neg	r22
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	20 68       	ori	r18, 0x80	; 128
    1632:	72 2e       	mov	r7, r18
    1634:	2a e0       	ldi	r18, 0x0A	; 10
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	a4 01       	movw	r20, r8
    163a:	17 d1       	rcall	.+558    	; 0x186a <__ultoa_invert>
    163c:	a8 2e       	mov	r10, r24
    163e:	a8 18       	sub	r10, r8
    1640:	43 c0       	rjmp	.+134    	; 0x16c8 <vfprintf+0x280>
    1642:	85 37       	cpi	r24, 0x75	; 117
    1644:	29 f4       	brne	.+10     	; 0x1650 <vfprintf+0x208>
    1646:	2f 7e       	andi	r18, 0xEF	; 239
    1648:	b2 2e       	mov	r11, r18
    164a:	2a e0       	ldi	r18, 0x0A	; 10
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	25 c0       	rjmp	.+74     	; 0x169a <vfprintf+0x252>
    1650:	f2 2f       	mov	r31, r18
    1652:	f9 7f       	andi	r31, 0xF9	; 249
    1654:	bf 2e       	mov	r11, r31
    1656:	8f 36       	cpi	r24, 0x6F	; 111
    1658:	c1 f0       	breq	.+48     	; 0x168a <vfprintf+0x242>
    165a:	18 f4       	brcc	.+6      	; 0x1662 <vfprintf+0x21a>
    165c:	88 35       	cpi	r24, 0x58	; 88
    165e:	79 f0       	breq	.+30     	; 0x167e <vfprintf+0x236>
    1660:	ad c0       	rjmp	.+346    	; 0x17bc <vfprintf+0x374>
    1662:	80 37       	cpi	r24, 0x70	; 112
    1664:	19 f0       	breq	.+6      	; 0x166c <vfprintf+0x224>
    1666:	88 37       	cpi	r24, 0x78	; 120
    1668:	21 f0       	breq	.+8      	; 0x1672 <vfprintf+0x22a>
    166a:	a8 c0       	rjmp	.+336    	; 0x17bc <vfprintf+0x374>
    166c:	2f 2f       	mov	r18, r31
    166e:	20 61       	ori	r18, 0x10	; 16
    1670:	b2 2e       	mov	r11, r18
    1672:	b4 fe       	sbrs	r11, 4
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <vfprintf+0x248>
    1676:	8b 2d       	mov	r24, r11
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	b8 2e       	mov	r11, r24
    167c:	09 c0       	rjmp	.+18     	; 0x1690 <vfprintf+0x248>
    167e:	24 ff       	sbrs	r18, 4
    1680:	0a c0       	rjmp	.+20     	; 0x1696 <vfprintf+0x24e>
    1682:	9f 2f       	mov	r25, r31
    1684:	96 60       	ori	r25, 0x06	; 6
    1686:	b9 2e       	mov	r11, r25
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <vfprintf+0x24e>
    168a:	28 e0       	ldi	r18, 0x08	; 8
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	05 c0       	rjmp	.+10     	; 0x169a <vfprintf+0x252>
    1690:	20 e1       	ldi	r18, 0x10	; 16
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x252>
    1696:	20 e1       	ldi	r18, 0x10	; 16
    1698:	32 e0       	ldi	r19, 0x02	; 2
    169a:	f8 01       	movw	r30, r16
    169c:	b7 fe       	sbrs	r11, 7
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <vfprintf+0x266>
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	0c 5f       	subi	r16, 0xFC	; 252
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x272>
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 5f       	subi	r16, 0xFE	; 254
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	a4 01       	movw	r20, r8
    16bc:	d6 d0       	rcall	.+428    	; 0x186a <__ultoa_invert>
    16be:	a8 2e       	mov	r10, r24
    16c0:	a8 18       	sub	r10, r8
    16c2:	fb 2d       	mov	r31, r11
    16c4:	ff 77       	andi	r31, 0x7F	; 127
    16c6:	7f 2e       	mov	r7, r31
    16c8:	76 fe       	sbrs	r7, 6
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <vfprintf+0x29a>
    16cc:	37 2d       	mov	r19, r7
    16ce:	3e 7f       	andi	r19, 0xFE	; 254
    16d0:	a5 14       	cp	r10, r5
    16d2:	50 f4       	brcc	.+20     	; 0x16e8 <vfprintf+0x2a0>
    16d4:	74 fe       	sbrs	r7, 4
    16d6:	0a c0       	rjmp	.+20     	; 0x16ec <vfprintf+0x2a4>
    16d8:	72 fc       	sbrc	r7, 2
    16da:	08 c0       	rjmp	.+16     	; 0x16ec <vfprintf+0x2a4>
    16dc:	37 2d       	mov	r19, r7
    16de:	3e 7e       	andi	r19, 0xEE	; 238
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <vfprintf+0x2a4>
    16e2:	ba 2c       	mov	r11, r10
    16e4:	37 2d       	mov	r19, r7
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <vfprintf+0x2a6>
    16e8:	ba 2c       	mov	r11, r10
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x2a6>
    16ec:	b5 2c       	mov	r11, r5
    16ee:	34 ff       	sbrs	r19, 4
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <vfprintf+0x2c4>
    16f2:	fe 01       	movw	r30, r28
    16f4:	ea 0d       	add	r30, r10
    16f6:	f1 1d       	adc	r31, r1
    16f8:	80 81       	ld	r24, Z
    16fa:	80 33       	cpi	r24, 0x30	; 48
    16fc:	11 f4       	brne	.+4      	; 0x1702 <vfprintf+0x2ba>
    16fe:	39 7e       	andi	r19, 0xE9	; 233
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x2cc>
    1702:	32 ff       	sbrs	r19, 2
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <vfprintf+0x2ca>
    1706:	b3 94       	inc	r11
    1708:	b3 94       	inc	r11
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <vfprintf+0x2cc>
    170c:	83 2f       	mov	r24, r19
    170e:	86 78       	andi	r24, 0x86	; 134
    1710:	09 f0       	breq	.+2      	; 0x1714 <vfprintf+0x2cc>
    1712:	b3 94       	inc	r11
    1714:	33 fd       	sbrc	r19, 3
    1716:	12 c0       	rjmp	.+36     	; 0x173c <vfprintf+0x2f4>
    1718:	30 ff       	sbrs	r19, 0
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfprintf+0x2e0>
    171c:	5a 2c       	mov	r5, r10
    171e:	b3 14       	cp	r11, r3
    1720:	18 f4       	brcc	.+6      	; 0x1728 <vfprintf+0x2e0>
    1722:	53 0c       	add	r5, r3
    1724:	5b 18       	sub	r5, r11
    1726:	b3 2c       	mov	r11, r3
    1728:	b3 14       	cp	r11, r3
    172a:	60 f4       	brcc	.+24     	; 0x1744 <vfprintf+0x2fc>
    172c:	b7 01       	movw	r22, r14
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	3c 87       	std	Y+12, r19	; 0x0c
    1734:	62 d0       	rcall	.+196    	; 0x17fa <fputc>
    1736:	b3 94       	inc	r11
    1738:	3c 85       	ldd	r19, Y+12	; 0x0c
    173a:	f6 cf       	rjmp	.-20     	; 0x1728 <vfprintf+0x2e0>
    173c:	b3 14       	cp	r11, r3
    173e:	10 f4       	brcc	.+4      	; 0x1744 <vfprintf+0x2fc>
    1740:	3b 18       	sub	r3, r11
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vfprintf+0x2fe>
    1744:	31 2c       	mov	r3, r1
    1746:	34 ff       	sbrs	r19, 4
    1748:	11 c0       	rjmp	.+34     	; 0x176c <vfprintf+0x324>
    174a:	b7 01       	movw	r22, r14
    174c:	80 e3       	ldi	r24, 0x30	; 48
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	3c 87       	std	Y+12, r19	; 0x0c
    1752:	53 d0       	rcall	.+166    	; 0x17fa <fputc>
    1754:	3c 85       	ldd	r19, Y+12	; 0x0c
    1756:	32 ff       	sbrs	r19, 2
    1758:	16 c0       	rjmp	.+44     	; 0x1786 <vfprintf+0x33e>
    175a:	31 fd       	sbrc	r19, 1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x31c>
    175e:	88 e7       	ldi	r24, 0x78	; 120
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x320>
    1764:	88 e5       	ldi	r24, 0x58	; 88
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	b7 01       	movw	r22, r14
    176a:	0c c0       	rjmp	.+24     	; 0x1784 <vfprintf+0x33c>
    176c:	83 2f       	mov	r24, r19
    176e:	86 78       	andi	r24, 0x86	; 134
    1770:	51 f0       	breq	.+20     	; 0x1786 <vfprintf+0x33e>
    1772:	31 ff       	sbrs	r19, 1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x332>
    1776:	8b e2       	ldi	r24, 0x2B	; 43
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vfprintf+0x334>
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	37 fd       	sbrc	r19, 7
    177e:	8d e2       	ldi	r24, 0x2D	; 45
    1780:	b7 01       	movw	r22, r14
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	3a d0       	rcall	.+116    	; 0x17fa <fputc>
    1786:	a5 14       	cp	r10, r5
    1788:	30 f4       	brcc	.+12     	; 0x1796 <vfprintf+0x34e>
    178a:	b7 01       	movw	r22, r14
    178c:	80 e3       	ldi	r24, 0x30	; 48
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	34 d0       	rcall	.+104    	; 0x17fa <fputc>
    1792:	5a 94       	dec	r5
    1794:	f8 cf       	rjmp	.-16     	; 0x1786 <vfprintf+0x33e>
    1796:	aa 94       	dec	r10
    1798:	f4 01       	movw	r30, r8
    179a:	ea 0d       	add	r30, r10
    179c:	f1 1d       	adc	r31, r1
    179e:	80 81       	ld	r24, Z
    17a0:	b7 01       	movw	r22, r14
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2a d0       	rcall	.+84     	; 0x17fa <fputc>
    17a6:	a1 10       	cpse	r10, r1
    17a8:	f6 cf       	rjmp	.-20     	; 0x1796 <vfprintf+0x34e>
    17aa:	33 20       	and	r3, r3
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <vfprintf+0x368>
    17ae:	5d ce       	rjmp	.-838    	; 0x146a <vfprintf+0x22>
    17b0:	b7 01       	movw	r22, r14
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	21 d0       	rcall	.+66     	; 0x17fa <fputc>
    17b8:	3a 94       	dec	r3
    17ba:	f7 cf       	rjmp	.-18     	; 0x17aa <vfprintf+0x362>
    17bc:	f7 01       	movw	r30, r14
    17be:	86 81       	ldd	r24, Z+6	; 0x06
    17c0:	97 81       	ldd	r25, Z+7	; 0x07
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x380>
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	9f ef       	ldi	r25, 0xFF	; 255
    17c8:	2c 96       	adiw	r28, 0x0c	; 12
    17ca:	e2 e1       	ldi	r30, 0x12	; 18
    17cc:	c8 c0       	rjmp	.+400    	; 0x195e <__epilogue_restores__>

000017ce <strnlen_P>:
    17ce:	fc 01       	movw	r30, r24
    17d0:	05 90       	lpm	r0, Z+
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	70 40       	sbci	r23, 0x00	; 0
    17d6:	01 10       	cpse	r0, r1
    17d8:	d8 f7       	brcc	.-10     	; 0x17d0 <strnlen_P+0x2>
    17da:	80 95       	com	r24
    17dc:	90 95       	com	r25
    17de:	8e 0f       	add	r24, r30
    17e0:	9f 1f       	adc	r25, r31
    17e2:	08 95       	ret

000017e4 <strnlen>:
    17e4:	fc 01       	movw	r30, r24
    17e6:	61 50       	subi	r22, 0x01	; 1
    17e8:	70 40       	sbci	r23, 0x00	; 0
    17ea:	01 90       	ld	r0, Z+
    17ec:	01 10       	cpse	r0, r1
    17ee:	d8 f7       	brcc	.-10     	; 0x17e6 <strnlen+0x2>
    17f0:	80 95       	com	r24
    17f2:	90 95       	com	r25
    17f4:	8e 0f       	add	r24, r30
    17f6:	9f 1f       	adc	r25, r31
    17f8:	08 95       	ret

000017fa <fputc>:
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	fb 01       	movw	r30, r22
    1804:	23 81       	ldd	r18, Z+3	; 0x03
    1806:	21 fd       	sbrc	r18, 1
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <fputc+0x16>
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	28 c0       	rjmp	.+80     	; 0x1860 <fputc+0x66>
    1810:	22 ff       	sbrs	r18, 2
    1812:	16 c0       	rjmp	.+44     	; 0x1840 <fputc+0x46>
    1814:	46 81       	ldd	r20, Z+6	; 0x06
    1816:	57 81       	ldd	r21, Z+7	; 0x07
    1818:	24 81       	ldd	r18, Z+4	; 0x04
    181a:	35 81       	ldd	r19, Z+5	; 0x05
    181c:	42 17       	cp	r20, r18
    181e:	53 07       	cpc	r21, r19
    1820:	44 f4       	brge	.+16     	; 0x1832 <fputc+0x38>
    1822:	a0 81       	ld	r26, Z
    1824:	b1 81       	ldd	r27, Z+1	; 0x01
    1826:	9d 01       	movw	r18, r26
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	31 83       	std	Z+1, r19	; 0x01
    182e:	20 83       	st	Z, r18
    1830:	8c 93       	st	X, r24
    1832:	26 81       	ldd	r18, Z+6	; 0x06
    1834:	37 81       	ldd	r19, Z+7	; 0x07
    1836:	2f 5f       	subi	r18, 0xFF	; 255
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	37 83       	std	Z+7, r19	; 0x07
    183c:	26 83       	std	Z+6, r18	; 0x06
    183e:	10 c0       	rjmp	.+32     	; 0x1860 <fputc+0x66>
    1840:	eb 01       	movw	r28, r22
    1842:	09 2f       	mov	r16, r25
    1844:	18 2f       	mov	r17, r24
    1846:	00 84       	ldd	r0, Z+8	; 0x08
    1848:	f1 85       	ldd	r31, Z+9	; 0x09
    184a:	e0 2d       	mov	r30, r0
    184c:	09 95       	icall
    184e:	89 2b       	or	r24, r25
    1850:	e1 f6       	brne	.-72     	; 0x180a <fputc+0x10>
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	9f 83       	std	Y+7, r25	; 0x07
    185a:	8e 83       	std	Y+6, r24	; 0x06
    185c:	81 2f       	mov	r24, r17
    185e:	90 2f       	mov	r25, r16
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <__ultoa_invert>:
    186a:	fa 01       	movw	r30, r20
    186c:	aa 27       	eor	r26, r26
    186e:	28 30       	cpi	r18, 0x08	; 8
    1870:	51 f1       	breq	.+84     	; 0x18c6 <__ultoa_invert+0x5c>
    1872:	20 31       	cpi	r18, 0x10	; 16
    1874:	81 f1       	breq	.+96     	; 0x18d6 <__ultoa_invert+0x6c>
    1876:	e8 94       	clt
    1878:	6f 93       	push	r22
    187a:	6e 7f       	andi	r22, 0xFE	; 254
    187c:	6e 5f       	subi	r22, 0xFE	; 254
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	8f 4f       	sbci	r24, 0xFF	; 255
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	af 4f       	sbci	r26, 0xFF	; 255
    1886:	b1 e0       	ldi	r27, 0x01	; 1
    1888:	3e d0       	rcall	.+124    	; 0x1906 <__ultoa_invert+0x9c>
    188a:	b4 e0       	ldi	r27, 0x04	; 4
    188c:	3c d0       	rcall	.+120    	; 0x1906 <__ultoa_invert+0x9c>
    188e:	67 0f       	add	r22, r23
    1890:	78 1f       	adc	r23, r24
    1892:	89 1f       	adc	r24, r25
    1894:	9a 1f       	adc	r25, r26
    1896:	a1 1d       	adc	r26, r1
    1898:	68 0f       	add	r22, r24
    189a:	79 1f       	adc	r23, r25
    189c:	8a 1f       	adc	r24, r26
    189e:	91 1d       	adc	r25, r1
    18a0:	a1 1d       	adc	r26, r1
    18a2:	6a 0f       	add	r22, r26
    18a4:	71 1d       	adc	r23, r1
    18a6:	81 1d       	adc	r24, r1
    18a8:	91 1d       	adc	r25, r1
    18aa:	a1 1d       	adc	r26, r1
    18ac:	20 d0       	rcall	.+64     	; 0x18ee <__ultoa_invert+0x84>
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <__ultoa_invert+0x48>
    18b0:	68 94       	set
    18b2:	3f 91       	pop	r19
    18b4:	2a e0       	ldi	r18, 0x0A	; 10
    18b6:	26 9f       	mul	r18, r22
    18b8:	11 24       	eor	r1, r1
    18ba:	30 19       	sub	r19, r0
    18bc:	30 5d       	subi	r19, 0xD0	; 208
    18be:	31 93       	st	Z+, r19
    18c0:	de f6       	brtc	.-74     	; 0x1878 <__ultoa_invert+0xe>
    18c2:	cf 01       	movw	r24, r30
    18c4:	08 95       	ret
    18c6:	46 2f       	mov	r20, r22
    18c8:	47 70       	andi	r20, 0x07	; 7
    18ca:	40 5d       	subi	r20, 0xD0	; 208
    18cc:	41 93       	st	Z+, r20
    18ce:	b3 e0       	ldi	r27, 0x03	; 3
    18d0:	0f d0       	rcall	.+30     	; 0x18f0 <__ultoa_invert+0x86>
    18d2:	c9 f7       	brne	.-14     	; 0x18c6 <__ultoa_invert+0x5c>
    18d4:	f6 cf       	rjmp	.-20     	; 0x18c2 <__ultoa_invert+0x58>
    18d6:	46 2f       	mov	r20, r22
    18d8:	4f 70       	andi	r20, 0x0F	; 15
    18da:	40 5d       	subi	r20, 0xD0	; 208
    18dc:	4a 33       	cpi	r20, 0x3A	; 58
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <__ultoa_invert+0x7c>
    18e0:	49 5d       	subi	r20, 0xD9	; 217
    18e2:	31 fd       	sbrc	r19, 1
    18e4:	40 52       	subi	r20, 0x20	; 32
    18e6:	41 93       	st	Z+, r20
    18e8:	02 d0       	rcall	.+4      	; 0x18ee <__ultoa_invert+0x84>
    18ea:	a9 f7       	brne	.-22     	; 0x18d6 <__ultoa_invert+0x6c>
    18ec:	ea cf       	rjmp	.-44     	; 0x18c2 <__ultoa_invert+0x58>
    18ee:	b4 e0       	ldi	r27, 0x04	; 4
    18f0:	a6 95       	lsr	r26
    18f2:	97 95       	ror	r25
    18f4:	87 95       	ror	r24
    18f6:	77 95       	ror	r23
    18f8:	67 95       	ror	r22
    18fa:	ba 95       	dec	r27
    18fc:	c9 f7       	brne	.-14     	; 0x18f0 <__ultoa_invert+0x86>
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	61 05       	cpc	r22, r1
    1902:	71 05       	cpc	r23, r1
    1904:	08 95       	ret
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	0a 2e       	mov	r0, r26
    190c:	06 94       	lsr	r0
    190e:	57 95       	ror	r21
    1910:	47 95       	ror	r20
    1912:	37 95       	ror	r19
    1914:	27 95       	ror	r18
    1916:	ba 95       	dec	r27
    1918:	c9 f7       	brne	.-14     	; 0x190c <__ultoa_invert+0xa2>
    191a:	62 0f       	add	r22, r18
    191c:	73 1f       	adc	r23, r19
    191e:	84 1f       	adc	r24, r20
    1920:	95 1f       	adc	r25, r21
    1922:	a0 1d       	adc	r26, r0
    1924:	08 95       	ret

00001926 <__prologue_saves__>:
    1926:	2f 92       	push	r2
    1928:	3f 92       	push	r3
    192a:	4f 92       	push	r4
    192c:	5f 92       	push	r5
    192e:	6f 92       	push	r6
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	ca 1b       	sub	r28, r26
    1950:	db 0b       	sbc	r29, r27
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	09 94       	ijmp

0000195e <__epilogue_restores__>:
    195e:	2a 88       	ldd	r2, Y+18	; 0x12
    1960:	39 88       	ldd	r3, Y+17	; 0x11
    1962:	48 88       	ldd	r4, Y+16	; 0x10
    1964:	5f 84       	ldd	r5, Y+15	; 0x0f
    1966:	6e 84       	ldd	r6, Y+14	; 0x0e
    1968:	7d 84       	ldd	r7, Y+13	; 0x0d
    196a:	8c 84       	ldd	r8, Y+12	; 0x0c
    196c:	9b 84       	ldd	r9, Y+11	; 0x0b
    196e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1970:	b9 84       	ldd	r11, Y+9	; 0x09
    1972:	c8 84       	ldd	r12, Y+8	; 0x08
    1974:	df 80       	ldd	r13, Y+7	; 0x07
    1976:	ee 80       	ldd	r14, Y+6	; 0x06
    1978:	fd 80       	ldd	r15, Y+5	; 0x05
    197a:	0c 81       	ldd	r16, Y+4	; 0x04
    197c:	1b 81       	ldd	r17, Y+3	; 0x03
    197e:	aa 81       	ldd	r26, Y+2	; 0x02
    1980:	b9 81       	ldd	r27, Y+1	; 0x01
    1982:	ce 0f       	add	r28, r30
    1984:	d1 1d       	adc	r29, r1
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	ed 01       	movw	r28, r26
    1992:	08 95       	ret

00001994 <_exit>:
    1994:	f8 94       	cli

00001996 <__stop_program>:
    1996:	ff cf       	rjmp	.-2      	; 0x1996 <__stop_program>
