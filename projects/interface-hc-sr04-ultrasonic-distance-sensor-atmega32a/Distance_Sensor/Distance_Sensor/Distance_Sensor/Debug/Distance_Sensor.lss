
Distance_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000026  00800060  00800060  0000062c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000041d  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e2  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e6  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e8  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000234  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000217  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 38       	cpi	r26, 0x86	; 134
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  74:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <execute>:
volatile int i=0;
volatile char ready_to_display = 0 ;

void execute(unsigned char cmd,unsigned char data)
{
	PORTB &= ~(1<<SS) ;				// Pull down SS, initialise packet
  7c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = cmd ;					// Start cmd transmision
  7e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));		// wait trasnf to finish									// Test PIN used on debug
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <execute+0x4>
	SPDR = data ;					// start data transmision
  84:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));		// wait trasnf to finish
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <execute+0xa>
	PORTB |= (1<<SS) ;				// terminate packet,pull SS high
  8a:	c4 9a       	sbi	0x18, 4	; 24
  8c:	08 95       	ret

0000008e <Fire_Sensor>:
}

void Fire_Sensor() 
{
	PORTD |= (1<<Trig);				// Set Trig pin high for 10us to start measure.    
  8e:	90 9a       	sbi	0x12, 0	; 18
	Busy_measure =1 ;               // We going to start new measure, so sensor is busy !
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 69 00 	sts	0x0069, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8a e1       	ldi	r24, 0x1A	; 26
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <Fire_Sensor+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <Fire_Sensor+0x10>
	_delay_us(10);					// 10us Delay.
	PORTD &= ~(1<<Trig);			// Set Trig pin LOW.
  9e:	90 98       	cbi	0x12, 0	; 18
  a0:	08 95       	ret

000000a2 <main>:
}



int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	2c 97       	sbiw	r28, 0x0c	; 12
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	// INT1 Use/Configuration	
	DDRD &= ~(1<<INT1_pin);		// Set PD2 as input (Using for interrupt INT1).
  b6:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<INT1_pin);		// Enable PD2 pull-up resistor.
  b8:	93 9a       	sbi	0x12, 3	; 18
	GICR  |= (1<<INT1);			// Enable INT1 interrupts.
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC10) ;		// Trigger INT1 on any logic change.
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 bf       	out	0x35, r24	; 53
	// Trig Conf
	DDRD |= (1<<Trig);			// Triger pin as output
  c6:	88 9a       	sbi	0x11, 0	; 17
	PORTD &= ~(1<<Trig);		// LOW
  c8:	90 98       	cbi	0x12, 0	; 18
	//SPI Use/Configuration	
	DDRB = (1<<MOSI) | (1<<SS) | (1<<SCK) ;     // outputs for SPI
  ca:	80 eb       	ldi	r24, 0xB0	; 176
  cc:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);   // SPI as master
  ce:	81 e5       	ldi	r24, 0x51	; 81
  d0:	8d b9       	out	0x0d, r24	; 13
	// Use/Configuration	 of Timer0 (8 bit timer)
	TCCR0 |= (1<<CS00);						   // NO prescaller , evvery tick is 1us  - START 
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;								   // Clear counter
  d8:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1<<TOIE0);					   // Enable Timer0-Overflow interrupts
  da:	89 b7       	in	r24, 0x39	; 57
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	89 bf       	out	0x39, r24	; 57
	sei();										// Global interrupts Enabled.
  e0:	78 94       	sei
		
		
	// MAX7219 configuration	
	execute(DecodingMode,0b00001111)  ;   // enable decoding for digits 0,1,2,3
  e2:	6f e0       	ldi	r22, 0x0F	; 15
  e4:	89 e0       	ldi	r24, 0x09	; 9
  e6:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
	execute(SetScanLimit,4)	;			  // how many segments we have connect. 4 in our case
  ea:	64 e0       	ldi	r22, 0x04	; 4
  ec:	8b e0       	ldi	r24, 0x0B	; 11
  ee:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
	execute(TurnOnOff,1);				  // TURN max7219 ON
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
	execute(SetLight,2) ;				  // 0-16 values , 16 is the  MAX light
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
							
			// Sensor datasheet says that can measure 2-400cm , so 4th digit no need. Its optional
							
				if(ready_to_display==1)
				{
					distance_avg= (distance[0]+distance[1]+distance[2]+distance[3]+distance[4])/5 ; // AVG distance , to avoid some errors
 102:	0f 2e       	mov	r0, r31
 104:	f3 e7       	ldi	r31, 0x73	; 115
 106:	2f 2e       	mov	r2, r31
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	3f 2e       	mov	r3, r31
 10c:	f0 2d       	mov	r31, r0
					ready_to_display=0;
							
								Digit0 = (distance_avg % 10) ;				// find 1st digit
 10e:	0f 2e       	mov	r0, r31
 110:	fa e0       	ldi	r31, 0x0A	; 10
 112:	4f 2e       	mov	r4, r31
 114:	51 2c       	mov	r5, r1
 116:	61 2c       	mov	r6, r1
 118:	71 2c       	mov	r7, r1
 11a:	f0 2d       	mov	r31, r0
								Digit1 = (distance_avg%100)/10 ;			// find 2nd digit
 11c:	0f 2e       	mov	r0, r31
 11e:	f4 e6       	ldi	r31, 0x64	; 100
 120:	8f 2e       	mov	r8, r31
 122:	91 2c       	mov	r9, r1
 124:	a1 2c       	mov	r10, r1
 126:	b1 2c       	mov	r11, r1
 128:	f0 2d       	mov	r31, r0
								Digit2 = (distance_avg%1000) / 100 ;		// find 3rd digit
 12a:	0f 2e       	mov	r0, r31
 12c:	f8 ee       	ldi	r31, 0xE8	; 232
 12e:	cf 2e       	mov	r12, r31
 130:	f3 e0       	ldi	r31, 0x03	; 3
 132:	df 2e       	mov	r13, r31
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
 138:	f0 2d       	mov	r31, r0
	

	
	while(1)
	{
			if(Busy_measure == 0)
 13a:	80 91 69 00 	lds	r24, 0x0069
 13e:	81 11       	cpse	r24, r1
 140:	0b c0       	rjmp	.+22     	; 0x158 <main+0xb6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	36 e7       	ldi	r19, 0x76	; 118
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	30 40       	sbci	r19, 0x00	; 0
 14c:	40 40       	sbci	r20, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xa6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xb0>
 152:	00 00       	nop
			{
				_delay_ms(Delay_Until_New_Measure);			// Dont fire sensor very often.In order to prevent trigger signal to the echo signal (datasheet)
				Fire_Sensor();								// Start new measure.
 154:	0e 94 47 00 	call	0x8e	; 0x8e <Fire_Sensor>
			}					
							
							
			// Sensor datasheet says that can measure 2-400cm , so 4th digit no need. Its optional
							
				if(ready_to_display==1)
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	69 f7       	brne	.-38     	; 0x13a <main+0x98>
				{
					distance_avg= (distance[0]+distance[1]+distance[2]+distance[3]+distance[4])/5 ; // AVG distance , to avoid some errors
 160:	af e6       	ldi	r26, 0x6F	; 111
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	4d 91       	ld	r20, X+
 166:	5d 91       	ld	r21, X+
 168:	6d 91       	ld	r22, X+
 16a:	7c 91       	ld	r23, X
 16c:	f1 01       	movw	r30, r2
 16e:	00 81       	ld	r16, Z
 170:	11 81       	ldd	r17, Z+1	; 0x01
 172:	22 81       	ldd	r18, Z+2	; 0x02
 174:	33 81       	ldd	r19, Z+3	; 0x03
 176:	a7 e7       	ldi	r26, 0x77	; 119
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	8d 91       	ld	r24, X+
 17c:	9d 91       	ld	r25, X+
 17e:	0d 90       	ld	r0, X+
 180:	bc 91       	ld	r27, X
 182:	a0 2d       	mov	r26, r0
 184:	89 87       	std	Y+9, r24	; 0x09
 186:	9a 87       	std	Y+10, r25	; 0x0a
 188:	ab 87       	std	Y+11, r26	; 0x0b
 18a:	bc 87       	std	Y+12, r27	; 0x0c
 18c:	ab e7       	ldi	r26, 0x7B	; 123
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	8d 91       	ld	r24, X+
 192:	9d 91       	ld	r25, X+
 194:	0d 90       	ld	r0, X+
 196:	bc 91       	ld	r27, X
 198:	a0 2d       	mov	r26, r0
 19a:	89 83       	std	Y+1, r24	; 0x01
 19c:	9a 83       	std	Y+2, r25	; 0x02
 19e:	ab 83       	std	Y+3, r26	; 0x03
 1a0:	bc 83       	std	Y+4, r27	; 0x04
 1a2:	af e7       	ldi	r26, 0x7F	; 127
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	8d 91       	ld	r24, X+
 1a8:	9d 91       	ld	r25, X+
 1aa:	0d 90       	ld	r0, X+
 1ac:	bc 91       	ld	r27, X
 1ae:	a0 2d       	mov	r26, r0
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	af 83       	std	Y+7, r26	; 0x07
 1b6:	b8 87       	std	Y+8, r27	; 0x08
 1b8:	40 0f       	add	r20, r16
 1ba:	51 1f       	adc	r21, r17
 1bc:	62 1f       	adc	r22, r18
 1be:	73 1f       	adc	r23, r19
 1c0:	89 85       	ldd	r24, Y+9	; 0x09
 1c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c4:	ab 85       	ldd	r26, Y+11	; 0x0b
 1c6:	bc 85       	ldd	r27, Y+12	; 0x0c
 1c8:	48 0f       	add	r20, r24
 1ca:	59 1f       	adc	r21, r25
 1cc:	6a 1f       	adc	r22, r26
 1ce:	7b 1f       	adc	r23, r27
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	ab 81       	ldd	r26, Y+3	; 0x03
 1d6:	bc 81       	ldd	r27, Y+4	; 0x04
 1d8:	84 0f       	add	r24, r20
 1da:	95 1f       	adc	r25, r21
 1dc:	a6 1f       	adc	r26, r22
 1de:	b7 1f       	adc	r27, r23
 1e0:	2d 81       	ldd	r18, Y+5	; 0x05
 1e2:	3e 81       	ldd	r19, Y+6	; 0x06
 1e4:	4f 81       	ldd	r20, Y+7	; 0x07
 1e6:	58 85       	ldd	r21, Y+8	; 0x08
 1e8:	28 0f       	add	r18, r24
 1ea:	39 1f       	adc	r19, r25
 1ec:	4a 1f       	adc	r20, r26
 1ee:	5b 1f       	adc	r21, r27
 1f0:	ca 01       	movw	r24, r20
 1f2:	b9 01       	movw	r22, r18
 1f4:	25 e0       	ldi	r18, 0x05	; 5
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 200:	20 93 6a 00 	sts	0x006A, r18
 204:	30 93 6b 00 	sts	0x006B, r19
 208:	40 93 6c 00 	sts	0x006C, r20
 20c:	50 93 6d 00 	sts	0x006D, r21
					ready_to_display=0;
 210:	10 92 60 00 	sts	0x0060, r1
							
								Digit0 = (distance_avg % 10) ;				// find 1st digit
 214:	60 91 6a 00 	lds	r22, 0x006A
 218:	70 91 6b 00 	lds	r23, 0x006B
 21c:	80 91 6c 00 	lds	r24, 0x006C
 220:	90 91 6d 00 	lds	r25, 0x006D
 224:	a3 01       	movw	r20, r6
 226:	92 01       	movw	r18, r4
 228:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 22c:	16 2f       	mov	r17, r22
 22e:	60 93 84 00 	sts	0x0084, r22
								Digit1 = (distance_avg%100)/10 ;			// find 2nd digit
 232:	60 91 6a 00 	lds	r22, 0x006A
 236:	70 91 6b 00 	lds	r23, 0x006B
 23a:	80 91 6c 00 	lds	r24, 0x006C
 23e:	90 91 6d 00 	lds	r25, 0x006D
 242:	a5 01       	movw	r20, r10
 244:	94 01       	movw	r18, r8
 246:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 24a:	a3 01       	movw	r20, r6
 24c:	92 01       	movw	r18, r4
 24e:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 252:	20 93 6e 00 	sts	0x006E, r18
								Digit2 = (distance_avg%1000) / 100 ;		// find 3rd digit
 256:	60 91 6a 00 	lds	r22, 0x006A
 25a:	70 91 6b 00 	lds	r23, 0x006B
 25e:	80 91 6c 00 	lds	r24, 0x006C
 262:	90 91 6d 00 	lds	r25, 0x006D
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 26e:	a5 01       	movw	r20, r10
 270:	94 01       	movw	r18, r8
 272:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 276:	20 93 85 00 	sts	0x0085, r18
								Digit3 = (distance_avg/1000) ;				// find 4th digit
 27a:	60 91 6a 00 	lds	r22, 0x006A
 27e:	70 91 6b 00 	lds	r23, 0x006B
 282:	80 91 6c 00 	lds	r24, 0x006C
 286:	90 91 6d 00 	lds	r25, 0x006D
 28a:	a7 01       	movw	r20, r14
 28c:	96 01       	movw	r18, r12
 28e:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 292:	20 93 83 00 	sts	0x0083, r18
								
								// Dont display 0 if its not nessecary. Example for 0001 it displays 1. For 0012 displays 12.
								// n digit and n-1 must be 0 to turn the off. Example 1001, its silly display 1[][]1
								
								execute(SetValueOfDigit0,Digit0);
 296:	61 2f       	mov	r22, r17
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
								if(Digit3 == 0)
 29e:	60 91 83 00 	lds	r22, 0x0083
 2a2:	61 11       	cpse	r22, r1
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <main+0x20e>
								{
									execute(SetValueOfDigit3,0x0F);			// Digit-3 is OFF if display value is 0
 2a6:	6f e0       	ldi	r22, 0x0F	; 15
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <main+0x214>
								}
								else
								{
									execute(SetValueOfDigit3,Digit3);
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
								}
								if (Digit2 == 0 && Digit3 == 0)
 2b6:	60 91 85 00 	lds	r22, 0x0085
 2ba:	61 11       	cpse	r22, r1
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <main+0x22e>
 2be:	80 91 83 00 	lds	r24, 0x0083
 2c2:	81 11       	cpse	r24, r1
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <main+0x22e>
								{
									execute(SetValueOfDigit2,0x0F);		// Digit-2 is  off
 2c6:	6f e0       	ldi	r22, 0x0F	; 15
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <main+0x234>
								}
								else
								{
									execute(SetValueOfDigit2,Digit2);
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
								}
								if(Digit3==0 && Digit2==0 && Digit1==0)
 2d6:	80 91 83 00 	lds	r24, 0x0083
 2da:	81 11       	cpse	r24, r1
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <main+0x256>
 2de:	80 91 85 00 	lds	r24, 0x0085
 2e2:	81 11       	cpse	r24, r1
 2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <main+0x256>
 2e6:	80 91 6e 00 	lds	r24, 0x006E
 2ea:	81 11       	cpse	r24, r1
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <main+0x256>
								{
									
									execute(SetValueOfDigit1,0x0F);		 //  Digit-1 is  off
 2ee:	6f e0       	ldi	r22, 0x0F	; 15
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
 2f6:	21 cf       	rjmp	.-446    	; 0x13a <main+0x98>
								}
								else
								{
									execute(SetValueOfDigit1,Digit1);
 2f8:	60 91 6e 00 	lds	r22, 0x006E
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 3e 00 	call	0x7c	; 0x7c <execute>
 302:	1b cf       	rjmp	.-458    	; 0x13a <main+0x98>

00000304 <__vector_11>:
}



ISR(TIMER0_OVF_vect)  // Here every time Timer0 Overflow
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
	if(Activated_sensor)	   // Only if sensor is active
 318:	80 91 68 00 	lds	r24, 0x0068
 31c:	88 23       	and	r24, r24
 31e:	91 f1       	breq	.+100    	; 0x384 <__vector_11+0x80>
	{
		Timer0_counter++;          // How many times Timer0 got OVF ?
 320:	80 91 64 00 	lds	r24, 0x0064
 324:	90 91 65 00 	lds	r25, 0x0065
 328:	a0 91 66 00 	lds	r26, 0x0066
 32c:	b0 91 67 00 	lds	r27, 0x0067
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	a1 1d       	adc	r26, r1
 334:	b1 1d       	adc	r27, r1
 336:	80 93 64 00 	sts	0x0064, r24
 33a:	90 93 65 00 	sts	0x0065, r25
 33e:	a0 93 66 00 	sts	0x0066, r26
 342:	b0 93 67 00 	sts	0x0067, r27
		uint32_t ticks = Timer0_counter * 256 + TCNT0;		// calculate total Timer0 ticks
 346:	80 91 64 00 	lds	r24, 0x0064
 34a:	90 91 65 00 	lds	r25, 0x0065
 34e:	a0 91 66 00 	lds	r26, 0x0066
 352:	b0 91 67 00 	lds	r27, 0x0067
 356:	22 b7       	in	r18, 0x32	; 50
		TimeOUT=0;
 358:	10 92 63 00 	sts	0x0063, r1
ISR(TIMER0_OVF_vect)  // Here every time Timer0 Overflow
{
	if(Activated_sensor)	   // Only if sensor is active
	{
		Timer0_counter++;          // How many times Timer0 got OVF ?
		uint32_t ticks = Timer0_counter * 256 + TCNT0;		// calculate total Timer0 ticks
 35c:	ba 2f       	mov	r27, r26
 35e:	a9 2f       	mov	r26, r25
 360:	98 2f       	mov	r25, r24
 362:	88 27       	eor	r24, r24
 364:	82 0f       	add	r24, r18
 366:	91 1d       	adc	r25, r1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
		TimeOUT=0;
		if(ticks > max_ticks)
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	9f 49       	sbci	r25, 0x9F	; 159
 370:	a4 42       	sbci	r26, 0x24	; 36
 372:	b1 05       	cpc	r27, r1
 374:	38 f0       	brcs	.+14     	; 0x384 <__vector_11+0x80>
		{
			Activated_sensor=0;	 // ** Free the sensor to new measures**/
 376:	10 92 68 00 	sts	0x0068, r1
			Busy_measure=0;		 //  *************************
 37a:	10 92 69 00 	sts	0x0069, r1
			TimeOUT =1 ;        // Timeout ; Used it as you want.
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 63 00 	sts	0x0063, r24
			
		}
				
	}

}
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__vector_2>:


ISR(INT1_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
	     if (Busy_measure==1.)		// Care only if sensor is started
 3be:	60 91 69 00 	lds	r22, 0x0069
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__floatsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	5f e3       	ldi	r21, 0x3F	; 63
 3d4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__cmpsf2>
 3d8:	81 11       	cpse	r24, r1
 3da:	52 c0       	rjmp	.+164    	; 0x480 <__vector_2+0xe8>
		 {
		       if (Activated_sensor == 0)  // High_Pulse '0' -> '1' , start time measure
 3dc:	80 91 68 00 	lds	r24, 0x0068
 3e0:	81 11       	cpse	r24, r1
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__vector_2+0x66>
					{ 
					TCNT0 = 0;			    // Reset Timer0/Counter	
 3e4:	12 be       	out	0x32, r1	; 50
			        Activated_sensor = 1;	// Now its not free
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 68 00 	sts	0x0068, r24
			        Timer0_counter = 0;		// Clear counter
 3ec:	10 92 64 00 	sts	0x0064, r1
 3f0:	10 92 65 00 	sts	0x0065, r1
 3f4:	10 92 66 00 	sts	0x0066, r1
 3f8:	10 92 67 00 	sts	0x0067, r1
 3fc:	41 c0       	rjmp	.+130    	; 0x480 <__vector_2+0xe8>
			        } 
					else					// Low Pulse '1' -> '0', we have  our result
					{
			        Activated_sensor = 0 ; 
 3fe:	10 92 68 00 	sts	0x0068, r1
			        distance[i] = (Timer0_counter * 256 + TCNT0) / (F_CPU_div * 58);  
 402:	c0 91 61 00 	lds	r28, 0x0061
 406:	d0 91 62 00 	lds	r29, 0x0062
 40a:	80 91 64 00 	lds	r24, 0x0064
 40e:	90 91 65 00 	lds	r25, 0x0065
 412:	a0 91 66 00 	lds	r26, 0x0066
 416:	b0 91 67 00 	lds	r27, 0x0067
 41a:	22 b7       	in	r18, 0x32	; 50
 41c:	ba 2f       	mov	r27, r26
 41e:	a9 2f       	mov	r26, r25
 420:	98 2f       	mov	r25, r24
 422:	88 27       	eor	r24, r24
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	62 0f       	add	r22, r18
 42a:	71 1d       	adc	r23, r1
 42c:	81 1d       	adc	r24, r1
 42e:	91 1d       	adc	r25, r1
 430:	20 ed       	ldi	r18, 0xD0	; 208
 432:	31 e0       	ldi	r19, 0x01	; 1
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	0e 94 b8 02 	call	0x570	; 0x570 <__udivmodsi4>
 43c:	cc 0f       	add	r28, r28
 43e:	dd 1f       	adc	r29, r29
 440:	cc 0f       	add	r28, r28
 442:	dd 1f       	adc	r29, r29
 444:	c1 59       	subi	r28, 0x91	; 145
 446:	df 4f       	sbci	r29, 0xFF	; 255
 448:	28 83       	st	Y, r18
 44a:	39 83       	std	Y+1, r19	; 0x01
 44c:	4a 83       	std	Y+2, r20	; 0x02
 44e:	5b 83       	std	Y+3, r21	; 0x03
					 // us/58 = .. cm.  Every 8 ticks is 1us (8Mhz clock, NO prescaler). http://www.micropik.com/PDF/HCSR04.pdf 
			        Busy_measure = 0 ;    // Ready for new measure
 450:	10 92 69 00 	sts	0x0069, r1
					i++;
 454:	80 91 61 00 	lds	r24, 0x0061
 458:	90 91 62 00 	lds	r25, 0x0062
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	90 93 62 00 	sts	0x0062, r25
 462:	80 93 61 00 	sts	0x0061, r24
						if(i==5)			// we got the 5 value we wanted; reset pointer and rdy to diplay value
 466:	80 91 61 00 	lds	r24, 0x0061
 46a:	90 91 62 00 	lds	r25, 0x0062
 46e:	05 97       	sbiw	r24, 0x05	; 5
 470:	39 f4       	brne	.+14     	; 0x480 <__vector_2+0xe8>
						{
							i=0;					//clear pointer
 472:	10 92 62 00 	sts	0x0062, r1
 476:	10 92 61 00 	sts	0x0061, r1
							ready_to_display=1;		// we can diplay the distance, after we find the AVG
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 60 00 	sts	0x0060, r24
						
		        }
	        }
	
	
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__cmpsf2>:
 4a6:	40 d0       	rcall	.+128    	; 0x528 <__fp_cmp>
 4a8:	08 f4       	brcc	.+2      	; 0x4ac <__cmpsf2+0x6>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	08 95       	ret

000004ae <__floatunsisf>:
 4ae:	e8 94       	clt
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__floatsisf+0x12>

000004b2 <__floatsisf>:
 4b2:	97 fb       	bst	r25, 7
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__floatsisf+0x12>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	99 23       	and	r25, r25
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <__floatsisf+0x40>
 4c8:	f9 2f       	mov	r31, r25
 4ca:	96 e9       	ldi	r25, 0x96	; 150
 4cc:	bb 27       	eor	r27, r27
 4ce:	93 95       	inc	r25
 4d0:	f6 95       	lsr	r31
 4d2:	87 95       	ror	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	f1 11       	cpse	r31, r1
 4dc:	f8 cf       	rjmp	.-16     	; 0x4ce <__floatsisf+0x1c>
 4de:	fa f4       	brpl	.+62     	; 0x51e <__floatsisf+0x6c>
 4e0:	bb 0f       	add	r27, r27
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__floatsisf+0x36>
 4e4:	60 ff       	sbrs	r22, 0
 4e6:	1b c0       	rjmp	.+54     	; 0x51e <__floatsisf+0x6c>
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	16 c0       	rjmp	.+44     	; 0x51e <__floatsisf+0x6c>
 4f2:	88 23       	and	r24, r24
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__floatsisf+0x48>
 4f6:	96 e9       	ldi	r25, 0x96	; 150
 4f8:	11 c0       	rjmp	.+34     	; 0x51c <__floatsisf+0x6a>
 4fa:	77 23       	and	r23, r23
 4fc:	21 f0       	breq	.+8      	; 0x506 <__floatsisf+0x54>
 4fe:	9e e8       	ldi	r25, 0x8E	; 142
 500:	87 2f       	mov	r24, r23
 502:	76 2f       	mov	r23, r22
 504:	05 c0       	rjmp	.+10     	; 0x510 <__floatsisf+0x5e>
 506:	66 23       	and	r22, r22
 508:	71 f0       	breq	.+28     	; 0x526 <__floatsisf+0x74>
 50a:	96 e8       	ldi	r25, 0x86	; 134
 50c:	86 2f       	mov	r24, r22
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	2a f0       	brmi	.+10     	; 0x51e <__floatsisf+0x6c>
 514:	9a 95       	dec	r25
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	da f7       	brpl	.-10     	; 0x514 <__floatsisf+0x62>
 51e:	88 0f       	add	r24, r24
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	97 f9       	bld	r25, 7
 526:	08 95       	ret

00000528 <__fp_cmp>:
 528:	99 0f       	add	r25, r25
 52a:	00 08       	sbc	r0, r0
 52c:	55 0f       	add	r21, r21
 52e:	aa 0b       	sbc	r26, r26
 530:	e0 e8       	ldi	r30, 0x80	; 128
 532:	fe ef       	ldi	r31, 0xFE	; 254
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	e8 07       	cpc	r30, r24
 53a:	f9 07       	cpc	r31, r25
 53c:	c0 f0       	brcs	.+48     	; 0x56e <__fp_cmp+0x46>
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	e4 07       	cpc	r30, r20
 544:	f5 07       	cpc	r31, r21
 546:	98 f0       	brcs	.+38     	; 0x56e <__fp_cmp+0x46>
 548:	62 1b       	sub	r22, r18
 54a:	73 0b       	sbc	r23, r19
 54c:	84 0b       	sbc	r24, r20
 54e:	95 0b       	sbc	r25, r21
 550:	39 f4       	brne	.+14     	; 0x560 <__fp_cmp+0x38>
 552:	0a 26       	eor	r0, r26
 554:	61 f0       	breq	.+24     	; 0x56e <__fp_cmp+0x46>
 556:	23 2b       	or	r18, r19
 558:	24 2b       	or	r18, r20
 55a:	25 2b       	or	r18, r21
 55c:	21 f4       	brne	.+8      	; 0x566 <__fp_cmp+0x3e>
 55e:	08 95       	ret
 560:	0a 26       	eor	r0, r26
 562:	09 f4       	brne	.+2      	; 0x566 <__fp_cmp+0x3e>
 564:	a1 40       	sbci	r26, 0x01	; 1
 566:	a6 95       	lsr	r26
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	81 1d       	adc	r24, r1
 56c:	81 1d       	adc	r24, r1
 56e:	08 95       	ret

00000570 <__udivmodsi4>:
 570:	a1 e2       	ldi	r26, 0x21	; 33
 572:	1a 2e       	mov	r1, r26
 574:	aa 1b       	sub	r26, r26
 576:	bb 1b       	sub	r27, r27
 578:	fd 01       	movw	r30, r26
 57a:	0d c0       	rjmp	.+26     	; 0x596 <__udivmodsi4_ep>

0000057c <__udivmodsi4_loop>:
 57c:	aa 1f       	adc	r26, r26
 57e:	bb 1f       	adc	r27, r27
 580:	ee 1f       	adc	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	a2 17       	cp	r26, r18
 586:	b3 07       	cpc	r27, r19
 588:	e4 07       	cpc	r30, r20
 58a:	f5 07       	cpc	r31, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__udivmodsi4_ep>
 58e:	a2 1b       	sub	r26, r18
 590:	b3 0b       	sbc	r27, r19
 592:	e4 0b       	sbc	r30, r20
 594:	f5 0b       	sbc	r31, r21

00000596 <__udivmodsi4_ep>:
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a 94       	dec	r1
 5a0:	69 f7       	brne	.-38     	; 0x57c <__udivmodsi4_loop>
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	80 95       	com	r24
 5a8:	90 95       	com	r25
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
 5ae:	bd 01       	movw	r22, r26
 5b0:	cf 01       	movw	r24, r30
 5b2:	08 95       	ret

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
