
lm35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023c  00800100  000014da  0000156e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080033c  0080033c  000017aa  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ff  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002758  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013ad  00000000  00000000  000043c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001835  00000000  00000000  0000576e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00006fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048a  00000000  00000000  000071f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c82  00000000  00000000  0000767e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00008300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ed       	ldi	r30, 0xDA	; 218
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 34       	cpi	r26, 0x40	; 64
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:




int main( void )
{
      ce:	9f 92       	push	r9
      d0:	af 92       	push	r10
      d2:	bf 92       	push	r11
      d4:	cf 92       	push	r12
      d6:	df 92       	push	r13
      d8:	ef 92       	push	r14
      da:	ff 92       	push	r15
      dc:	0f 93       	push	r16
      de:	1f 93       	push	r17
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29

float temp,light;
uint8_t i,loop;

	MCUCSR = 0x80;			//disable jtab to make portC to work
      e4:	80 e8       	ldi	r24, 0x80	; 128
      e6:	84 bf       	out	0x34, r24	; 52
	MCUCSR = 0x80;
      e8:	84 bf       	out	0x34, r24	; 52

lcd_ddr=0xFF;
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	84 bb       	out	0x14, r24	; 20
lcd_port=0xFF;
      ee:	85 bb       	out	0x15, r24	; 21

//Initialize LCD module
InitLCD(LS_BLINK|LS_ULINE);
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 cf 03 	call	0x79e	; 0x79e <InitLCD>

LCDClear();
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>


InitADC();
      fe:	0e 94 46 02 	call	0x48c	; 0x48c <InitADC>


LCDWriteStringXY(0,0,"***PANOSCURE***");
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     112:	c9 e1       	ldi	r28, 0x19	; 25
     114:	d0 e0       	ldi	r29, 0x00	; 0
{




      temp=ReadADC(2);  //Read ADC Channel 0
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	0e 94 4b 02 	call	0x496	; 0x496 <ReadADC>
	  temp=(5*temp*100)/1024; //this algorithm gives the actual temperature
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	bc 01       	movw	r22, r24
     122:	cd 01       	movw	r24, r26
     124:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__floatunsisf>
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 ea       	ldi	r20, 0xA0	; 160
     12e:	50 e4       	ldi	r21, 0x40	; 64
     130:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3>
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	48 ec       	ldi	r20, 0xC8	; 200
     13a:	52 e4       	ldi	r21, 0x42	; 66
     13c:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3>
     140:	7b 01       	movw	r14, r22
     142:	8c 01       	movw	r16, r24
	  
      light=ReadADC(3);  //Read ADC Channel 1
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 4b 02 	call	0x496	; 0x496 <ReadADC>
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__floatunsisf>
     156:	5b 01       	movw	r10, r22
     158:	6c 01       	movw	r12, r24


      LCDWriteStringXY(0,1,"***Temp*Light***");
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     162:	80 e1       	ldi	r24, 0x10	; 16
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
      LCDWriteStringXY(2,2,"Temp = ");
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	62 e0       	ldi	r22, 0x02	; 2
     16e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     172:	81 e2       	ldi	r24, 0x21	; 33
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
	  //LCDWriteStringXY(2,3,"Light = ");

      LCDWriteDecimals(9,2,temp,2);	//this function returns the value with 2 decimals
     17a:	c8 01       	movw	r24, r16
     17c:	b7 01       	movw	r22, r14
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e8       	ldi	r20, 0x80	; 128
     184:	5a e3       	ldi	r21, 0x3A	; 58
     186:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
     18e:	89 e0       	ldi	r24, 0x09	; 9
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	62 e0       	ldi	r22, 0x02	; 2
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	02 e0       	ldi	r16, 0x02	; 2
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCDWriteDecimals>
	  //LCDWriteDecimals(9,3,light,3);
	  		
	LCDWriteStringXY(0,3,"                ");
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	63 e0       	ldi	r22, 0x03	; 3
     1a2:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     1a6:	89 e2       	ldi	r24, 0x29	; 41
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>

	if(light>950)
     1ae:	c6 01       	movw	r24, r12
     1b0:	b5 01       	movw	r22, r10
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e8       	ldi	r19, 0x80	; 128
     1b6:	4d e6       	ldi	r20, 0x6D	; 109
     1b8:	54 e4       	ldi	r21, 0x44	; 68
     1ba:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     1be:	18 16       	cp	r1, r24
     1c0:	14 f4       	brge	.+4      	; 0x1c6 <main+0xf8>
     1c2:	99 24       	eor	r9, r9
     1c4:	4e c1       	rjmp	.+668    	; 0x462 <main+0x394>
	{loop=0;}
	else if(light<950 && light>900)
     1c6:	c6 01       	movw	r24, r12
     1c8:	b5 01       	movw	r22, r10
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e8       	ldi	r19, 0x80	; 128
     1ce:	4d e6       	ldi	r20, 0x6D	; 109
     1d0:	54 e4       	ldi	r21, 0x44	; 68
     1d2:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     1d6:	88 23       	and	r24, r24
     1d8:	6c f4       	brge	.+26     	; 0x1f4 <main+0x126>
     1da:	c6 01       	movw	r24, r12
     1dc:	b5 01       	movw	r22, r10
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	41 e6       	ldi	r20, 0x61	; 97
     1e4:	54 e4       	ldi	r21, 0x44	; 68
     1e6:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     1ea:	18 16       	cp	r1, r24
     1ec:	1c f4       	brge	.+6      	; 0x1f4 <main+0x126>
     1ee:	99 24       	eor	r9, r9
     1f0:	93 94       	inc	r9
     1f2:	37 c1       	rjmp	.+622    	; 0x462 <main+0x394>
	{loop=1;}
	else if(light<850 && light>800)
     1f4:	c6 01       	movw	r24, r12
     1f6:	b5 01       	movw	r22, r10
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e8       	ldi	r19, 0x80	; 128
     1fc:	44 e5       	ldi	r20, 0x54	; 84
     1fe:	54 e4       	ldi	r21, 0x44	; 68
     200:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     204:	88 23       	and	r24, r24
     206:	6c f4       	brge	.+26     	; 0x222 <main+0x154>
     208:	c6 01       	movw	r24, r12
     20a:	b5 01       	movw	r22, r10
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	48 e4       	ldi	r20, 0x48	; 72
     212:	54 e4       	ldi	r21, 0x44	; 68
     214:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     218:	18 16       	cp	r1, r24
     21a:	1c f4       	brge	.+6      	; 0x222 <main+0x154>
     21c:	02 e0       	ldi	r16, 0x02	; 2
     21e:	90 2e       	mov	r9, r16
     220:	20 c1       	rjmp	.+576    	; 0x462 <main+0x394>
	{loop=2;}
	else if(light<800 && light>750)
     222:	c6 01       	movw	r24, r12
     224:	b5 01       	movw	r22, r10
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	48 e4       	ldi	r20, 0x48	; 72
     22c:	54 e4       	ldi	r21, 0x44	; 68
     22e:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     232:	88 23       	and	r24, r24
     234:	6c f4       	brge	.+26     	; 0x250 <main+0x182>
     236:	c6 01       	movw	r24, r12
     238:	b5 01       	movw	r22, r10
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e8       	ldi	r19, 0x80	; 128
     23e:	4b e3       	ldi	r20, 0x3B	; 59
     240:	54 e4       	ldi	r21, 0x44	; 68
     242:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     246:	18 16       	cp	r1, r24
     248:	1c f4       	brge	.+6      	; 0x250 <main+0x182>
     24a:	13 e0       	ldi	r17, 0x03	; 3
     24c:	91 2e       	mov	r9, r17
     24e:	09 c1       	rjmp	.+530    	; 0x462 <main+0x394>
	{loop=3;}
	else if(light<750 && light>700)
     250:	c6 01       	movw	r24, r12
     252:	b5 01       	movw	r22, r10
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e8       	ldi	r19, 0x80	; 128
     258:	4b e3       	ldi	r20, 0x3B	; 59
     25a:	54 e4       	ldi	r21, 0x44	; 68
     25c:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     260:	88 23       	and	r24, r24
     262:	6c f4       	brge	.+26     	; 0x27e <main+0x1b0>
     264:	c6 01       	movw	r24, r12
     266:	b5 01       	movw	r22, r10
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	4f e2       	ldi	r20, 0x2F	; 47
     26e:	54 e4       	ldi	r21, 0x44	; 68
     270:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     274:	18 16       	cp	r1, r24
     276:	1c f4       	brge	.+6      	; 0x27e <main+0x1b0>
     278:	b4 e0       	ldi	r27, 0x04	; 4
     27a:	9b 2e       	mov	r9, r27
     27c:	f2 c0       	rjmp	.+484    	; 0x462 <main+0x394>
	{loop=4;}
	else if(light<700 && light>650)
     27e:	c6 01       	movw	r24, r12
     280:	b5 01       	movw	r22, r10
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	4f e2       	ldi	r20, 0x2F	; 47
     288:	54 e4       	ldi	r21, 0x44	; 68
     28a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     28e:	88 23       	and	r24, r24
     290:	6c f4       	brge	.+26     	; 0x2ac <main+0x1de>
     292:	c6 01       	movw	r24, r12
     294:	b5 01       	movw	r22, r10
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e8       	ldi	r19, 0x80	; 128
     29a:	42 e2       	ldi	r20, 0x22	; 34
     29c:	54 e4       	ldi	r21, 0x44	; 68
     29e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     2a2:	18 16       	cp	r1, r24
     2a4:	1c f4       	brge	.+6      	; 0x2ac <main+0x1de>
     2a6:	a5 e0       	ldi	r26, 0x05	; 5
     2a8:	9a 2e       	mov	r9, r26
     2aa:	db c0       	rjmp	.+438    	; 0x462 <main+0x394>
	{loop=5;}
	else if(light<650 && light>600)
     2ac:	c6 01       	movw	r24, r12
     2ae:	b5 01       	movw	r22, r10
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e8       	ldi	r19, 0x80	; 128
     2b4:	42 e2       	ldi	r20, 0x22	; 34
     2b6:	54 e4       	ldi	r21, 0x44	; 68
     2b8:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     2bc:	88 23       	and	r24, r24
     2be:	6c f4       	brge	.+26     	; 0x2da <main+0x20c>
     2c0:	c6 01       	movw	r24, r12
     2c2:	b5 01       	movw	r22, r10
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	46 e1       	ldi	r20, 0x16	; 22
     2ca:	54 e4       	ldi	r21, 0x44	; 68
     2cc:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     2d0:	18 16       	cp	r1, r24
     2d2:	1c f4       	brge	.+6      	; 0x2da <main+0x20c>
     2d4:	f6 e0       	ldi	r31, 0x06	; 6
     2d6:	9f 2e       	mov	r9, r31
     2d8:	c4 c0       	rjmp	.+392    	; 0x462 <main+0x394>
	{loop=6;}
	else if(light<600 && light>550)
     2da:	c6 01       	movw	r24, r12
     2dc:	b5 01       	movw	r22, r10
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	46 e1       	ldi	r20, 0x16	; 22
     2e4:	54 e4       	ldi	r21, 0x44	; 68
     2e6:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     2ea:	88 23       	and	r24, r24
     2ec:	6c f4       	brge	.+26     	; 0x308 <main+0x23a>
     2ee:	c6 01       	movw	r24, r12
     2f0:	b5 01       	movw	r22, r10
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e8       	ldi	r19, 0x80	; 128
     2f6:	49 e0       	ldi	r20, 0x09	; 9
     2f8:	54 e4       	ldi	r21, 0x44	; 68
     2fa:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     2fe:	18 16       	cp	r1, r24
     300:	1c f4       	brge	.+6      	; 0x308 <main+0x23a>
     302:	e7 e0       	ldi	r30, 0x07	; 7
     304:	9e 2e       	mov	r9, r30
     306:	ad c0       	rjmp	.+346    	; 0x462 <main+0x394>
	{loop=7;}
	else if(light<550 && light>500)
     308:	c6 01       	movw	r24, r12
     30a:	b5 01       	movw	r22, r10
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e8       	ldi	r19, 0x80	; 128
     310:	49 e0       	ldi	r20, 0x09	; 9
     312:	54 e4       	ldi	r21, 0x44	; 68
     314:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     318:	88 23       	and	r24, r24
     31a:	6c f4       	brge	.+26     	; 0x336 <main+0x268>
     31c:	c6 01       	movw	r24, r12
     31e:	b5 01       	movw	r22, r10
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	4a ef       	ldi	r20, 0xFA	; 250
     326:	53 e4       	ldi	r21, 0x43	; 67
     328:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     32c:	18 16       	cp	r1, r24
     32e:	1c f4       	brge	.+6      	; 0x336 <main+0x268>
     330:	78 e0       	ldi	r23, 0x08	; 8
     332:	97 2e       	mov	r9, r23
     334:	96 c0       	rjmp	.+300    	; 0x462 <main+0x394>
	{loop=8;}
	else if(light<500 && light>450)
     336:	c6 01       	movw	r24, r12
     338:	b5 01       	movw	r22, r10
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	4a ef       	ldi	r20, 0xFA	; 250
     340:	53 e4       	ldi	r21, 0x43	; 67
     342:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     346:	88 23       	and	r24, r24
     348:	6c f4       	brge	.+26     	; 0x364 <main+0x296>
     34a:	c6 01       	movw	r24, r12
     34c:	b5 01       	movw	r22, r10
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	41 ee       	ldi	r20, 0xE1	; 225
     354:	53 e4       	ldi	r21, 0x43	; 67
     356:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     35a:	18 16       	cp	r1, r24
     35c:	1c f4       	brge	.+6      	; 0x364 <main+0x296>
     35e:	69 e0       	ldi	r22, 0x09	; 9
     360:	96 2e       	mov	r9, r22
     362:	7f c0       	rjmp	.+254    	; 0x462 <main+0x394>
	{loop=9;}
	else if(light<450 && light>400)
     364:	c6 01       	movw	r24, r12
     366:	b5 01       	movw	r22, r10
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	41 ee       	ldi	r20, 0xE1	; 225
     36e:	53 e4       	ldi	r21, 0x43	; 67
     370:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     374:	88 23       	and	r24, r24
     376:	6c f4       	brge	.+26     	; 0x392 <main+0x2c4>
     378:	c6 01       	movw	r24, r12
     37a:	b5 01       	movw	r22, r10
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	48 ec       	ldi	r20, 0xC8	; 200
     382:	53 e4       	ldi	r21, 0x43	; 67
     384:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     388:	18 16       	cp	r1, r24
     38a:	1c f4       	brge	.+6      	; 0x392 <main+0x2c4>
     38c:	5a e0       	ldi	r21, 0x0A	; 10
     38e:	95 2e       	mov	r9, r21
     390:	68 c0       	rjmp	.+208    	; 0x462 <main+0x394>
	{loop=10;}
	else if(light<400 && light>350)
     392:	c6 01       	movw	r24, r12
     394:	b5 01       	movw	r22, r10
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	48 ec       	ldi	r20, 0xC8	; 200
     39c:	53 e4       	ldi	r21, 0x43	; 67
     39e:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     3a2:	88 23       	and	r24, r24
     3a4:	6c f4       	brge	.+26     	; 0x3c0 <main+0x2f2>
     3a6:	c6 01       	movw	r24, r12
     3a8:	b5 01       	movw	r22, r10
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4f ea       	ldi	r20, 0xAF	; 175
     3b0:	53 e4       	ldi	r21, 0x43	; 67
     3b2:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     3b6:	18 16       	cp	r1, r24
     3b8:	1c f4       	brge	.+6      	; 0x3c0 <main+0x2f2>
     3ba:	4b e0       	ldi	r20, 0x0B	; 11
     3bc:	94 2e       	mov	r9, r20
     3be:	51 c0       	rjmp	.+162    	; 0x462 <main+0x394>
	{loop=11;}
	else if(light<350 && light>300)
     3c0:	c6 01       	movw	r24, r12
     3c2:	b5 01       	movw	r22, r10
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	4f ea       	ldi	r20, 0xAF	; 175
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     3d0:	88 23       	and	r24, r24
     3d2:	6c f4       	brge	.+26     	; 0x3ee <main+0x320>
     3d4:	c6 01       	movw	r24, r12
     3d6:	b5 01       	movw	r22, r10
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	46 e9       	ldi	r20, 0x96	; 150
     3de:	53 e4       	ldi	r21, 0x43	; 67
     3e0:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     3e4:	18 16       	cp	r1, r24
     3e6:	1c f4       	brge	.+6      	; 0x3ee <main+0x320>
     3e8:	3c e0       	ldi	r19, 0x0C	; 12
     3ea:	93 2e       	mov	r9, r19
     3ec:	3a c0       	rjmp	.+116    	; 0x462 <main+0x394>
	{loop=12;}
	else if(light<300 && light>200)
     3ee:	c6 01       	movw	r24, r12
     3f0:	b5 01       	movw	r22, r10
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	46 e9       	ldi	r20, 0x96	; 150
     3f8:	53 e4       	ldi	r21, 0x43	; 67
     3fa:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     3fe:	88 23       	and	r24, r24
     400:	6c f4       	brge	.+26     	; 0x41c <main+0x34e>
     402:	c6 01       	movw	r24, r12
     404:	b5 01       	movw	r22, r10
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	48 e4       	ldi	r20, 0x48	; 72
     40c:	53 e4       	ldi	r21, 0x43	; 67
     40e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     412:	18 16       	cp	r1, r24
     414:	1c f4       	brge	.+6      	; 0x41c <main+0x34e>
     416:	2d e0       	ldi	r18, 0x0D	; 13
     418:	92 2e       	mov	r9, r18
     41a:	23 c0       	rjmp	.+70     	; 0x462 <main+0x394>
	{loop=13;}
	else if(light<200 && light>100)
     41c:	c6 01       	movw	r24, r12
     41e:	b5 01       	movw	r22, r10
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	48 e4       	ldi	r20, 0x48	; 72
     426:	53 e4       	ldi	r21, 0x43	; 67
     428:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     42c:	88 23       	and	r24, r24
     42e:	6c f4       	brge	.+26     	; 0x44a <main+0x37c>
     430:	c6 01       	movw	r24, r12
     432:	b5 01       	movw	r22, r10
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	48 ec       	ldi	r20, 0xC8	; 200
     43a:	52 e4       	ldi	r21, 0x42	; 66
     43c:	0e 94 bb 06 	call	0xd76	; 0xd76 <__gtsf2>
     440:	18 16       	cp	r1, r24
     442:	1c f4       	brge	.+6      	; 0x44a <main+0x37c>
     444:	9e e0       	ldi	r25, 0x0E	; 14
     446:	99 2e       	mov	r9, r25
     448:	0c c0       	rjmp	.+24     	; 0x462 <main+0x394>
	{loop=14;}
	else if(light<100)
     44a:	c6 01       	movw	r24, r12
     44c:	b5 01       	movw	r22, r10
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	48 ec       	ldi	r20, 0xC8	; 200
     454:	52 e4       	ldi	r21, 0x42	; 66
     456:	0e 94 1b 07 	call	0xe36	; 0xe36 <__ltsf2>
     45a:	88 23       	and	r24, r24
     45c:	14 f4       	brge	.+4      	; 0x462 <main+0x394>
     45e:	8f e0       	ldi	r24, 0x0F	; 15
     460:	98 2e       	mov	r9, r24
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	09 c0       	rjmp	.+18     	; 0x478 <main+0x3aa>
	{loop=15;}


    for(i=0;i<loop;i++)
	{
	LCDGotoXY(i,3);
     466:	81 2f       	mov	r24, r17
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
	LCDByte(255,1);
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
	{loop=14;}
	else if(light<100)
	{loop=15;}


    for(i=0;i<loop;i++)
     476:	1f 5f       	subi	r17, 0xFF	; 255
     478:	19 15       	cp	r17, r9
     47a:	a8 f3       	brcs	.-22     	; 0x466 <main+0x398>
     47c:	80 e1       	ldi	r24, 0x10	; 16
     47e:	97 e2       	ldi	r25, 0x27	; 39
     480:	fe 01       	movw	r30, r28
     482:	31 97       	sbiw	r30, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <main+0x3b4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     486:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     488:	d9 f7       	brne	.-10     	; 0x480 <main+0x3b2>
     48a:	45 ce       	rjmp	.-886    	; 0x116 <main+0x48>

0000048c <InitADC>:



void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
     48c:	80 e4       	ldi	r24, 0x40	; 64
     48e:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
     490:	87 e8       	ldi	r24, 0x87	; 135
     492:	86 b9       	out	0x06, r24	; 6
}
     494:	08 95       	ret

00000496 <ReadADC>:



void InitADC()
{
ADMUX=(1<<REFS0);                         // For Aref=AVcc;
     496:	90 e4       	ldi	r25, 0x40	; 64
     498:	97 b9       	out	0x07, r25	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
     49a:	97 e8       	ldi	r25, 0x87	; 135
     49c:	96 b9       	out	0x06, r25	; 6
uint16_t ReadADC(uint8_t ch)
{
   InitADC();
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX|=ch;
     49e:	97 b1       	in	r25, 0x07	; 7
     4a0:	87 70       	andi	r24, 0x07	; 7
     4a2:	89 2b       	or	r24, r25
     4a4:	87 b9       	out	0x07, r24	; 7

   //Start Single conversion
   ADCSRA|=(1<<ADSC);
     4a6:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
     4a8:	34 9b       	sbis	0x06, 4	; 6
     4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <ReadADC+0x12>
   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
     4ac:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
     4ae:	24 b1       	in	r18, 0x04	; 4
     4b0:	35 b1       	in	r19, 0x05	; 5
}
     4b2:	c9 01       	movw	r24, r18
     4b4:	08 95       	ret

000004b6 <initial_menu>:
return line_num;
}


void initial_menu(uint8_t table_number)
{
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
uint8_t i,j;
line_num=0;	//i make it zero so when it returns to start over again from beginning
     4c2:	10 92 3d 03 	sts	0x033D, r1
     4c6:	10 92 3c 03 	sts	0x033C, r1
	
	
	//here i select the menu i selected depending the table_number
	if(table_number==0)
     4ca:	88 23       	and	r24, r24
     4cc:	51 f4       	brne	.+20     	; 0x4e2 <initial_menu+0x2c>
	{
	memcpy(menu_table, line_data, sizeof(line_data));
     4ce:	a0 e4       	ldi	r26, 0x40	; 64
     4d0:	b3 e0       	ldi	r27, 0x03	; 3
     4d2:	ea e3       	ldi	r30, 0x3A	; 58
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	80 e6       	ldi	r24, 0x60	; 96
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	81 50       	subi	r24, 0x01	; 1
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <initial_menu+0x22>
     4e0:	17 c0       	rjmp	.+46     	; 0x510 <initial_menu+0x5a>
	}
	else if(table_number==1)
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	51 f4       	brne	.+20     	; 0x4fa <initial_menu+0x44>
	{
	memcpy(menu_table, first_sub, sizeof(first_sub));
     4e6:	a0 e4       	ldi	r26, 0x40	; 64
     4e8:	b3 e0       	ldi	r27, 0x03	; 3
     4ea:	ea e9       	ldi	r30, 0x9A	; 154
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 e4       	ldi	r24, 0x40	; 64
     4f0:	01 90       	ld	r0, Z+
     4f2:	0d 92       	st	X+, r0
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <initial_menu+0x3a>
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <initial_menu+0x5a>
	}
	else if(table_number==2)
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	49 f4       	brne	.+18     	; 0x510 <initial_menu+0x5a>
	{
	memcpy(menu_table, second_sub, sizeof(second_sub));
     4fe:	a0 e4       	ldi	r26, 0x40	; 64
     500:	b3 e0       	ldi	r27, 0x03	; 3
     502:	ea ed       	ldi	r30, 0xDA	; 218
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	80 e4       	ldi	r24, 0x40	; 64
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	e1 f7       	brne	.-8      	; 0x508 <initial_menu+0x52>
	}
	//end of menu selection

LCDClear();
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	10 e0       	ldi	r17, 0x00	; 0
     51c:	15 c0       	rjmp	.+42     	; 0x548 <initial_menu+0x92>
{
	//this for, prints one or four lines depending the selection 
	//of the lcd_menu.h file. If it is 16x2 lcd or 16x4
	for(j=0;j<LCD_TYPE;j++)
		{
			if(menu_table[j][i] != '#')
     51e:	88 81       	ld	r24, Y
     520:	83 32       	cpi	r24, 0x23	; 35
     522:	41 f0       	breq	.+16     	; 0x534 <initial_menu+0x7e>
			{
			LCDGotoXY(i,j);
     524:	8e 2d       	mov	r24, r14
     526:	6f 2d       	mov	r22, r15
     528:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
			LCDByte(menu_table[j][i], 1);
     52c:	88 81       	ld	r24, Y
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
LCDClear();
for(i=0;i<15;i++)
{
	//this for, prints one or four lines depending the selection 
	//of the lcd_menu.h file. If it is 16x2 lcd or 16x4
	for(j=0;j<LCD_TYPE;j++)
     534:	f3 94       	inc	r15
     536:	60 96       	adiw	r28, 0x10	; 16
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	f8 16       	cp	r15, r24
     53c:	81 f7       	brne	.-32     	; 0x51e <initial_menu+0x68>
     53e:	0f 5f       	subi	r16, 0xFF	; 255
     540:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(menu_table, second_sub, sizeof(second_sub));
	}
	//end of menu selection

LCDClear();
for(i=0;i<15;i++)
     542:	0f 30       	cpi	r16, 0x0F	; 15
     544:	11 05       	cpc	r17, r1
     546:	31 f0       	breq	.+12     	; 0x554 <initial_menu+0x9e>
     548:	e0 2e       	mov	r14, r16
     54a:	e8 01       	movw	r28, r16
     54c:	c0 5c       	subi	r28, 0xC0	; 192
     54e:	dc 4f       	sbci	r29, 0xFC	; 252
     550:	ff 24       	eor	r15, r15
     552:	e5 cf       	rjmp	.-54     	; 0x51e <initial_menu+0x68>



	
}
LCDGotoXY(15,0);
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
LCDByte(127, 1);
     55c:	8f e7       	ldi	r24, 0x7F	; 127
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>

}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	08 95       	ret

00000572 <rotate_menu>:
char menu_table[0][16];	//We copy the desired table here



uint8_t rotate_menu(uint8_t direction, uint8_t table_number)
{
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	98 2f       	mov	r25, r24
uint8_t i,j,k;



	//here i select the menu i selected depending the table_number
	if(table_number==0)
     57e:	66 23       	and	r22, r22
     580:	69 f4       	brne	.+26     	; 0x59c <rotate_menu+0x2a>
	{
	number_of_lines = 6;
     582:	86 e0       	ldi	r24, 0x06	; 6
     584:	80 93 3f 03 	sts	0x033F, r24
 	memcpy(menu_table, line_data, sizeof(line_data));
     588:	a0 e4       	ldi	r26, 0x40	; 64
     58a:	b3 e0       	ldi	r27, 0x03	; 3
     58c:	ea e3       	ldi	r30, 0x3A	; 58
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	80 e6       	ldi	r24, 0x60	; 96
     592:	01 90       	ld	r0, Z+
     594:	0d 92       	st	X+, r0
     596:	81 50       	subi	r24, 0x01	; 1
     598:	e1 f7       	brne	.-8      	; 0x592 <rotate_menu+0x20>
     59a:	1d c0       	rjmp	.+58     	; 0x5d6 <rotate_menu+0x64>
	}
	else if(table_number==1)
     59c:	61 30       	cpi	r22, 0x01	; 1
     59e:	69 f4       	brne	.+26     	; 0x5ba <rotate_menu+0x48>
	{
	number_of_lines = 4;
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	80 93 3f 03 	sts	0x033F, r24
	memcpy(menu_table, first_sub, sizeof(first_sub));
     5a6:	a0 e4       	ldi	r26, 0x40	; 64
     5a8:	b3 e0       	ldi	r27, 0x03	; 3
     5aa:	ea e9       	ldi	r30, 0x9A	; 154
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	01 90       	ld	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <rotate_menu+0x3e>
     5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <rotate_menu+0x64>
	}
	else if(table_number==2)
     5ba:	62 30       	cpi	r22, 0x02	; 2
     5bc:	61 f4       	brne	.+24     	; 0x5d6 <rotate_menu+0x64>
	{
	number_of_lines = 3;
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	80 93 3f 03 	sts	0x033F, r24
	memcpy(menu_table, second_sub, sizeof(second_sub));
     5c4:	a0 e4       	ldi	r26, 0x40	; 64
     5c6:	b3 e0       	ldi	r27, 0x03	; 3
     5c8:	ea ed       	ldi	r30, 0xDA	; 218
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	80 e4       	ldi	r24, 0x40	; 64
     5ce:	01 90       	ld	r0, Z+
     5d0:	0d 92       	st	X+, r0
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <rotate_menu+0x5c>
	}
	//end of menu selection

	if(previews_table_number != table_number) //if we change menu starts over the line_num
     5d6:	80 91 3e 03 	lds	r24, 0x033E
     5da:	86 17       	cp	r24, r22
     5dc:	21 f0       	breq	.+8      	; 0x5e6 <rotate_menu+0x74>
	{line_num=0;}
     5de:	10 92 3d 03 	sts	0x033D, r1
     5e2:	10 92 3c 03 	sts	0x033C, r1

	if(direction==0)
     5e6:	99 23       	and	r25, r25
     5e8:	a1 f4       	brne	.+40     	; 0x612 <rotate_menu+0xa0>
	{
	line_num--;	
     5ea:	80 91 3c 03 	lds	r24, 0x033C
     5ee:	90 91 3d 03 	lds	r25, 0x033D
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	90 93 3d 03 	sts	0x033D, r25
     5f8:	80 93 3c 03 	sts	0x033C, r24
	if(line_num<0)
     5fc:	97 ff       	sbrs	r25, 7
     5fe:	23 c0       	rjmp	.+70     	; 0x646 <rotate_menu+0xd4>
	{line_num=number_of_lines-1;}	
     600:	80 91 3f 03 	lds	r24, 0x033F
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	90 93 3d 03 	sts	0x033D, r25
     60c:	80 93 3c 03 	sts	0x033C, r24
     610:	1a c0       	rjmp	.+52     	; 0x646 <rotate_menu+0xd4>
	}

	else if(direction==1)
     612:	91 30       	cpi	r25, 0x01	; 1
     614:	a9 f4       	brne	.+42     	; 0x640 <rotate_menu+0xce>
	{
	line_num++;
     616:	20 91 3c 03 	lds	r18, 0x033C
     61a:	30 91 3d 03 	lds	r19, 0x033D
     61e:	2f 5f       	subi	r18, 0xFF	; 255
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	30 93 3d 03 	sts	0x033D, r19
     626:	20 93 3c 03 	sts	0x033C, r18
	if(line_num>number_of_lines-1)
     62a:	80 91 3f 03 	lds	r24, 0x033F
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	28 17       	cp	r18, r24
     632:	39 07       	cpc	r19, r25
     634:	44 f0       	brlt	.+16     	; 0x646 <rotate_menu+0xd4>
	{line_num=0;}
     636:	10 92 3d 03 	sts	0x033D, r1
     63a:	10 92 3c 03 	sts	0x033C, r1
     63e:	03 c0       	rjmp	.+6      	; 0x646 <rotate_menu+0xd4>
	}

	else if(direction==2)
     640:	92 30       	cpi	r25, 0x02	; 2
     642:	09 f4       	brne	.+2      	; 0x646 <rotate_menu+0xd4>
     644:	52 c0       	rjmp	.+164    	; 0x6ea <rotate_menu+0x178>
	{
	return line_num;
	}

previews_table_number=table_number;	//keeps the previews menu so if it change to start the line number from 0 again
     646:	60 93 3e 03 	sts	0x033E, r22

LCDClear();
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	39 c0       	rjmp	.+114    	; 0x6ca <rotate_menu+0x158>
		for(j=0;j<4;j++)
		{
	
			for(i=0;i<15;i++)
			{
				if(menu_table[line_num+j][i] != '#' && line_num+j<number_of_lines)
     658:	20 91 3c 03 	lds	r18, 0x033C
     65c:	30 91 3d 03 	lds	r19, 0x033D
     660:	20 0f       	add	r18, r16
     662:	31 1f       	adc	r19, r17
     664:	f9 01       	movw	r30, r18
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	9a 95       	dec	r25
     66e:	e1 f7       	brne	.-8      	; 0x668 <rotate_menu+0xf6>
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	e0 5c       	subi	r30, 0xC0	; 192
     676:	fc 4f       	sbci	r31, 0xFC	; 252
     678:	80 81       	ld	r24, Z
     67a:	83 32       	cpi	r24, 0x23	; 35
     67c:	e9 f0       	breq	.+58     	; 0x6b8 <rotate_menu+0x146>
     67e:	80 91 3f 03 	lds	r24, 0x033F
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	28 17       	cp	r18, r24
     686:	39 07       	cpc	r19, r25
     688:	bc f4       	brge	.+46     	; 0x6b8 <rotate_menu+0x146>
				{
				LCDGotoXY(i,j);
     68a:	8c 2f       	mov	r24, r28
     68c:	6f 2d       	mov	r22, r15
     68e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
				LCDByte(menu_table[line_num+j][i], 1);
     692:	e0 91 3c 03 	lds	r30, 0x033C
     696:	f0 91 3d 03 	lds	r31, 0x033D
     69a:	e0 0f       	add	r30, r16
     69c:	f1 1f       	adc	r31, r17
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	8a 95       	dec	r24
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <rotate_menu+0x12e>
     6a8:	ec 0f       	add	r30, r28
     6aa:	fd 1f       	adc	r31, r29
     6ac:	e0 5c       	subi	r30, 0xC0	; 192
     6ae:	fc 4f       	sbci	r31, 0xFC	; 252
     6b0:	80 81       	ld	r24, Z
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
     6b8:	21 96       	adiw	r28, 0x01	; 1

k=0;
		for(j=0;j<4;j++)
		{
	
			for(i=0;i<15;i++)
     6ba:	cf 30       	cpi	r28, 0x0F	; 15
     6bc:	d1 05       	cpc	r29, r1
     6be:	61 f6       	brne	.-104    	; 0x658 <rotate_menu+0xe6>
     6c0:	0f 5f       	subi	r16, 0xFF	; 255
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
}
	else if(LCD_TYPE==4)
	{

k=0;
		for(j=0;j<4;j++)
     6c4:	04 30       	cpi	r16, 0x04	; 4
     6c6:	11 05       	cpc	r17, r1
     6c8:	21 f0       	breq	.+8      	; 0x6d2 <rotate_menu+0x160>
     6ca:	f0 2e       	mov	r15, r16
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	d0 e0       	ldi	r29, 0x00	; 0
     6d0:	c3 cf       	rjmp	.-122    	; 0x658 <rotate_menu+0xe6>





LCDGotoXY(15,0);
     6d2:	8f e0       	ldi	r24, 0x0F	; 15
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
LCDByte(127, 1);
     6da:	8f e7       	ldi	r24, 0x7F	; 127
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
     6e2:	80 e5       	ldi	r24, 0x50	; 80
     6e4:	93 ec       	ldi	r25, 0xC3	; 195
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <rotate_menu+0x174>
_delay_ms(100);
return line_num;
     6ea:	80 91 3c 03 	lds	r24, 0x033C
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	08 95       	ret

000006fa <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     6fa:	84 b3       	in	r24, 0x14	; 20
     6fc:	80 7f       	andi	r24, 0xF0	; 240
     6fe:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
     700:	ad 9a       	sbi	0x15, 5	; 21
	CLEAR_RS();		//Read status
     702:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	8a 95       	dec	r24
     708:	f1 f7       	brne	.-4      	; 0x706 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	af 9a       	sbi	0x15, 7	; 21
     70e:	82 2f       	mov	r24, r18
     710:	8a 95       	dec	r24
     712:	f1 f7       	brne	.-4      	; 0x710 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
     714:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
     716:	82 95       	swap	r24
     718:	80 7f       	andi	r24, 0xF0	; 240
     71a:	92 2f       	mov	r25, r18
     71c:	9a 95       	dec	r25
     71e:	f1 f7       	brne	.-4      	; 0x71c <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     720:	af 98       	cbi	0x15, 7	; 21
     722:	92 2f       	mov	r25, r18
     724:	9a 95       	dec	r25
     726:	f1 f7       	brne	.-4      	; 0x724 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
     728:	af 9a       	sbi	0x15, 7	; 21
     72a:	92 2f       	mov	r25, r18
     72c:	9a 95       	dec	r25
     72e:	f1 f7       	brne	.-4      	; 0x72c <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
     730:	93 b3       	in	r25, 0x13	; 19
     732:	92 2f       	mov	r25, r18
     734:	9a 95       	dec	r25
     736:	f1 f7       	brne	.-4      	; 0x734 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     738:	af 98       	cbi	0x15, 7	; 21
     73a:	92 2f       	mov	r25, r18
     73c:	9a 95       	dec	r25
     73e:	f1 f7       	brne	.-4      	; 0x73c <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
     740:	87 fd       	sbrc	r24, 7
     742:	e4 cf       	rjmp	.-56     	; 0x70c <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
     744:	ad 98       	cbi	0x15, 5	; 21
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     746:	84 b3       	in	r24, 0x14	; 20
     748:	8f 60       	ori	r24, 0x0F	; 15
     74a:	84 bb       	out	0x14, r24	; 20

}
     74c:	08 95       	ret

0000074e <LCDByte>:




void LCDByte(uint8_t c,uint8_t isdata)
{
     74e:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
     750:	66 23       	and	r22, r22
     752:	11 f4       	brne	.+4      	; 0x758 <LCDByte+0xa>
	CLEAR_RS();
     754:	ae 98       	cbi	0x15, 6	; 21
     756:	01 c0       	rjmp	.+2      	; 0x75a <LCDByte+0xc>
else
	SET_RS();
     758:	ae 9a       	sbi	0x15, 6	; 21
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	82 2f       	mov	r24, r18
     75e:	8a 95       	dec	r24
     760:	f1 f7       	brne	.-4      	; 0x75e <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
     762:	af 9a       	sbi	0x15, 7	; 21

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     764:	85 b3       	in	r24, 0x15	; 21
     766:	93 2f       	mov	r25, r19
     768:	92 95       	swap	r25
     76a:	9f 70       	andi	r25, 0x0F	; 15
     76c:	80 7f       	andi	r24, 0xF0	; 240
     76e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     770:	95 bb       	out	0x15, r25	; 21
     772:	82 2f       	mov	r24, r18
     774:	8a 95       	dec	r24
     776:	f1 f7       	brne	.-4      	; 0x774 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     778:	af 98       	cbi	0x15, 7	; 21
     77a:	82 2f       	mov	r24, r18
     77c:	8a 95       	dec	r24
     77e:	f1 f7       	brne	.-4      	; 0x77c <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
     780:	af 9a       	sbi	0x15, 7	; 21

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     782:	85 b3       	in	r24, 0x15	; 21
     784:	3f 70       	andi	r19, 0x0F	; 15
     786:	80 7f       	andi	r24, 0xF0	; 240
     788:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
     78a:	85 bb       	out	0x15, r24	; 21
     78c:	82 2f       	mov	r24, r18
     78e:	8a 95       	dec	r24
     790:	f1 f7       	brne	.-4      	; 0x78e <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     792:	af 98       	cbi	0x15, 7	; 21
     794:	2a 95       	dec	r18
     796:	f1 f7       	brne	.-4      	; 0x794 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
     798:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDBusyLoop>
}
     79c:	08 95       	ret

0000079e <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     79e:	1f 93       	push	r17
     7a0:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7a2:	88 e9       	ldi	r24, 0x98	; 152
     7a4:	9a e3       	ldi	r25, 0x3A	; 58
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     7aa:	84 b3       	in	r24, 0x14	; 20
     7ac:	8f 60       	ori	r24, 0x0F	; 15
     7ae:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
     7b0:	a7 9a       	sbi	0x14, 7	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     7b2:	a6 9a       	sbi	0x14, 6	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     7b4:	a5 9a       	sbi	0x14, 5	; 20

	LCD_DATA_PORT&=0XF0;
     7b6:	85 b3       	in	r24, 0x15	; 21
     7b8:	80 7f       	andi	r24, 0xF0	; 240
     7ba:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
     7bc:	af 98       	cbi	0x15, 7	; 21
	CLEAR_RW();
     7be:	ad 98       	cbi	0x15, 5	; 21
	CLEAR_RS();
     7c0:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	98 2f       	mov	r25, r24
     7c6:	9a 95       	dec	r25
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     7ca:	af 9a       	sbi	0x15, 7	; 21
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     7cc:	a9 9a       	sbi	0x15, 1	; 21
     7ce:	98 2f       	mov	r25, r24
     7d0:	9a 95       	dec	r25
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
     7d4:	af 98       	cbi	0x15, 7	; 21
     7d6:	8a 95       	dec	r24
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     7da:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     7de:	81 2f       	mov	r24, r17
     7e0:	8c 60       	ori	r24, 0x0C	; 12
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     7e8:	88 e2       	ldi	r24, 0x28	; 40
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
}
     7f0:	1f 91       	pop	r17
     7f2:	08 95       	ret

000007f4 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
	msg++;
     802:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     804:	88 81       	ld	r24, Y
     806:	88 23       	and	r24, r24
     808:	c9 f7       	brne	.-14     	; 0x7fc <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	00 d0       	rcall	.+0      	; 0x81e <LCDWriteInt+0xe>
     81e:	00 d0       	rcall	.+0      	; 0x820 <LCDWriteInt+0x10>
     820:	0f 92       	push	r0
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	9c 01       	movw	r18, r24
     828:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     82a:	fe 01       	movw	r30, r28
     82c:	31 96       	adiw	r30, 0x01	; 1
     82e:	85 e0       	ldi	r24, 0x05	; 5
     830:	df 01       	movw	r26, r30
     832:	1d 92       	st	X+, r1
     834:	8a 95       	dec	r24
     836:	e9 f7       	brne	.-6      	; 0x832 <LCDWriteInt+0x22>
     838:	fe 01       	movw	r30, r28
     83a:	35 96       	adiw	r30, 0x05	; 5
     83c:	0d c0       	rjmp	.+26     	; 0x858 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     83e:	c9 01       	movw	r24, r18
     840:	6a e0       	ldi	r22, 0x0A	; 10
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     848:	80 83       	st	Z, r24
	val=val/10;
     84a:	c9 01       	movw	r24, r18
     84c:	6a e0       	ldi	r22, 0x0A	; 10
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     854:	9b 01       	movw	r18, r22
     856:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     858:	21 15       	cp	r18, r1
     85a:	31 05       	cpc	r19, r1
     85c:	81 f7       	brne	.-32     	; 0x83e <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     85e:	bf ef       	ldi	r27, 0xFF	; 255
     860:	0f 3f       	cpi	r16, 0xFF	; 255
     862:	1b 07       	cpc	r17, r27
     864:	79 f4       	brne	.+30     	; 0x884 <LCDWriteInt+0x74>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	02 c0       	rjmp	.+4      	; 0x876 <LCDWriteInt+0x66>
     872:	2f 5f       	subi	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	fa 01       	movw	r30, r20
     878:	e2 0f       	add	r30, r18
     87a:	f3 1f       	adc	r31, r19
     87c:	80 81       	ld	r24, Z
     87e:	88 23       	and	r24, r24
     880:	c1 f3       	breq	.-16     	; 0x872 <LCDWriteInt+0x62>
     882:	04 c0       	rjmp	.+8      	; 0x88c <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     884:	25 e0       	ldi	r18, 0x05	; 5
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	20 1b       	sub	r18, r16
     88a:	31 0b       	sbc	r19, r17
     88c:	7e 01       	movw	r14, r28
     88e:	08 94       	sec
     890:	e1 1c       	adc	r14, r1
     892:	f1 1c       	adc	r15, r1
     894:	e2 0e       	add	r14, r18
     896:	f3 1e       	adc	r15, r19
     898:	89 01       	movw	r16, r18
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     89c:	f7 01       	movw	r30, r14
     89e:	81 91       	ld	r24, Z+
     8a0:	7f 01       	movw	r14, r30
     8a2:	80 5d       	subi	r24, 0xD0	; 208
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     8aa:	0f 5f       	subi	r16, 0xFF	; 255
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255
     8ae:	05 30       	cpi	r16, 0x05	; 5
     8b0:	11 05       	cpc	r17, r1
     8b2:	a4 f3       	brlt	.-24     	; 0x89c <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	cf 91       	pop	r28
     8c0:	df 91       	pop	r29
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	08 95       	ret

000008cc <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
	if(x<16)
     8cc:	80 31       	cpi	r24, 0x10	; 16
     8ce:	90 f4       	brcc	.+36     	; 0x8f4 <LCDGotoXY+0x28>
	{

 if(y==3)
     8d0:	63 30       	cpi	r22, 0x03	; 3
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <LCDGotoXY+0xa>
 x+=208;  //the only way to get to line 4
     8d4:	80 53       	subi	r24, 0x30	; 48
 
   x|=0b10000000; //in case y=0 comes here and in case y=3 after the x+=208 modification
     8d6:	98 2f       	mov	r25, r24
     8d8:	90 68       	ori	r25, 0x80	; 128
  

  if(y==1) 
     8da:	61 30       	cpi	r22, 0x01	; 1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <LCDGotoXY+0x18>
   x|=0b01000000;
     8de:	98 2f       	mov	r25, r24
     8e0:	90 6c       	ori	r25, 0xC0	; 192
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <LCDGotoXY+0x20>
  else if(y==2) 
     8e4:	62 30       	cpi	r22, 0x02	; 2
     8e6:	11 f4       	brne	.+4      	; 0x8ec <LCDGotoXY+0x20>
   x|=0b00010000;
     8e8:	98 2f       	mov	r25, r24
     8ea:	90 69       	ori	r25, 0x90	; 144
  //else if(y==3) 
   //x|=0b00000000;

  

LCDCmd(x);
     8ec:	89 2f       	mov	r24, r25
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
     8f4:	08 95       	ret

000008f6 <LCDWriteDecimals>:

/*
-Function displays 2 dp floating at x and y location on Hitachi HD44780 LCD
*/

void LCDWriteDecimals(int x, int y, float val, int field_length) {
     8f6:	3f 92       	push	r3
     8f8:	4f 92       	push	r4
     8fa:	5f 92       	push	r5
     8fc:	6f 92       	push	r6
     8fe:	7f 92       	push	r7
     900:	8f 92       	push	r8
     902:	9f 92       	push	r9
     904:	af 92       	push	r10
     906:	bf 92       	push	r11
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	38 2e       	mov	r3, r24
     91a:	76 2e       	mov	r7, r22
     91c:	49 01       	movw	r8, r18
     91e:	5a 01       	movw	r10, r20
     920:	28 01       	movw	r4, r16

  int n = (int)val , c=0;
     922:	ca 01       	movw	r24, r20
     924:	b9 01       	movw	r22, r18
     926:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fixsfsi>
     92a:	6b 01       	movw	r12, r22
     92c:	7c 01       	movw	r14, r24
     92e:	8b 01       	movw	r16, r22
  int neg = -1*n;
  float valab = -1*val;
 
  if( 0<=val ){ // for positive
     930:	c5 01       	movw	r24, r10
     932:	b4 01       	movw	r22, r8
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__gesf2>
     940:	63 2c       	mov	r6, r3
     942:	63 94       	inc	r6
     944:	88 23       	and	r24, r24
     946:	84 f1       	brlt	.+96     	; 0x9a8 <LCDWriteDecimals+0xb2>
   
     LCDGotoXY( x, y);
     948:	83 2d       	mov	r24, r3
     94a:	67 2d       	mov	r22, r7
     94c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteString("+");
     950:	8a e1       	ldi	r24, 0x1A	; 26
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
     LCDGotoXY( x+1, y);
     958:	86 2d       	mov	r24, r6
     95a:	67 2d       	mov	r22, r7
     95c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteInt( n ,field_length);
     960:	c6 01       	movw	r24, r12
     962:	b2 01       	movw	r22, r4
     964:	0e 94 08 04 	call	0x810	; 0x810 <LCDWriteInt>
     968:	e0 e0       	ldi	r30, 0x00	; 0
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	07 c0       	rjmp	.+14     	; 0x97c <LCDWriteDecimals+0x86>
   
     while ( n>0 ){ //count digits
       c++;
     96e:	31 96       	adiw	r30, 0x01	; 1
       n/=10;
     970:	c8 01       	movw	r24, r16
     972:	6a e0       	ldi	r22, 0x0A	; 10
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     97a:	8b 01       	movw	r16, r22
     LCDGotoXY( x, y);
     LCDWriteString("+");
     LCDGotoXY( x+1, y);
     LCDWriteInt( n ,field_length);
   
     while ( n>0 ){ //count digits
     97c:	10 16       	cp	r1, r16
     97e:	11 06       	cpc	r1, r17
     980:	b4 f3       	brlt	.-20     	; 0x96e <LCDWriteDecimals+0x78>
       c++;
       n/=10;
     }
   
     LCDGotoXY( x+c+1, y);
     982:	13 2d       	mov	r17, r3
     984:	1e 0f       	add	r17, r30
     986:	81 2f       	mov	r24, r17
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	67 2d       	mov	r22, r7
     98c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteString(".");
     990:	8c e1       	ldi	r24, 0x1C	; 28
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
   
     LCDGotoXY( x+c+2, y );
     998:	81 2f       	mov	r24, r17
     99a:	8e 5f       	subi	r24, 0xFE	; 254
     99c:	67 2d       	mov	r22, r7
     99e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteInt( ( (int)(val*10.0) ) % 10 ,1);
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	34 c0       	rjmp	.+104    	; 0xa10 <LCDWriteDecimals+0x11a>
*/

void LCDWriteDecimals(int x, int y, float val, int field_length) {

  int n = (int)val , c=0;
  int neg = -1*n;
     9a8:	cc 27       	eor	r28, r28
     9aa:	dd 27       	eor	r29, r29
     9ac:	cc 19       	sub	r28, r12
     9ae:	dd 09       	sbc	r29, r13
   
   }
 
   else { //for negative
 
    LCDGotoXY( x, y);
     9b0:	83 2d       	mov	r24, r3
     9b2:	67 2d       	mov	r22, r7
     9b4:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteString("-");
     9b8:	8e e1       	ldi	r24, 0x1E	; 30
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
     LCDGotoXY( x+1, y);
     9c0:	86 2d       	mov	r24, r6
     9c2:	67 2d       	mov	r22, r7
     9c4:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteInt( neg ,field_length);
     9c8:	ce 01       	movw	r24, r28
     9ca:	b2 01       	movw	r22, r4
     9cc:	0e 94 08 04 	call	0x810	; 0x810 <LCDWriteInt>
     9d0:	e0 e0       	ldi	r30, 0x00	; 0
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <LCDWriteDecimals+0xee>
   
    while ( neg>0 ){
       c++;
     9d6:	31 96       	adiw	r30, 0x01	; 1
       neg/=10;
     9d8:	ce 01       	movw	r24, r28
     9da:	6a e0       	ldi	r22, 0x0A	; 10
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     9e2:	eb 01       	movw	r28, r22
    LCDGotoXY( x, y);
     LCDWriteString("-");
     LCDGotoXY( x+1, y);
     LCDWriteInt( neg ,field_length);
   
    while ( neg>0 ){
     9e4:	1c 16       	cp	r1, r28
     9e6:	1d 06       	cpc	r1, r29
     9e8:	b4 f3       	brlt	.-20     	; 0x9d6 <LCDWriteDecimals+0xe0>
       c++;
       neg/=10;
     }
   
     LCDGotoXY( x+c+1, y);
     9ea:	13 2d       	mov	r17, r3
     9ec:	1e 0f       	add	r17, r30
     9ee:	81 2f       	mov	r24, r17
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	67 2d       	mov	r22, r7
     9f4:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteString(".");
     9f8:	8c e1       	ldi	r24, 0x1C	; 28
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
   
     LCDGotoXY( x+c+2, y );
     a00:	81 2f       	mov	r24, r17
     a02:	8e 5f       	subi	r24, 0xFE	; 254
     a04:	67 2d       	mov	r22, r7
     a06:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     LCDWriteInt( ( (int)( valab*10.0) ) % 10 ,1);
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	90 58       	subi	r25, 0x80	; 128
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e2       	ldi	r20, 0x20	; 32
     a16:	51 e4       	ldi	r21, 0x41	; 65
     a18:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3>
     a1c:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fixsfsi>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	6a e0       	ldi	r22, 0x0A	; 10
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	0e 94 08 04 	call	0x810	; 0x810 <LCDWriteInt>
   
     LCDGotoXY( x+c+3, y);
     a34:	81 2f       	mov	r24, r17
     a36:	8d 5f       	subi	r24, 0xFD	; 253
     a38:	67 2d       	mov	r22, r7
     a3a:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     if(( (int)(val*100.0) ) % 10 != 0 && ( (int)(val*100.0) ) % 10 != 1 && ( (int)(val*100.0) ) % 10 != 2&& ( (int)(val*100.0) ) % 10 != 3&& ( (int)(val*100.0) ) % 10 != 4&& ( (int)(val*100.0) ) % 10 != 5&& ( (int)(val*100.0) ) % 10 != 6&& ( (int)(val*100.0) ) % 10 != 7&& ( (int)(val*100.0) ) % 10 != 8&& ( (int)(val*100.0) ) % 10 != 9)
     a3e:	c5 01       	movw	r24, r10
     a40:	b4 01       	movw	r22, r8
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	48 ec       	ldi	r20, 0xC8	; 200
     a48:	52 e4       	ldi	r21, 0x42	; 66
     a4a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__mulsf3>
     a4e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fixsfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	6a e0       	ldi	r22, 0x0A	; 10
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     a5e:	8a 30       	cpi	r24, 0x0A	; 10
     a60:	91 05       	cpc	r25, r1
     a62:	10 f0       	brcs	.+4      	; 0xa68 <LCDWriteDecimals+0x172>
	 LCDWriteInt(0,1);
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
	 else
     LCDWriteInt( ( (int)(val*100.0) ) % 10 ,1);
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	0e 94 08 04 	call	0x810	; 0x810 <LCDWriteInt>
 
   }
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	6f 90       	pop	r6
     a8c:	5f 90       	pop	r5
     a8e:	4f 90       	pop	r4
     a90:	3f 90       	pop	r3
     a92:	08 95       	ret

00000a94 <LCDscroll>:




void LCDscroll(const char *scroling_text, uint8_t line_scroll)
{
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	7c 01       	movw	r14, r24
     ab2:	86 2e       	mov	r8, r22
	line_scroll: Which line to scroll. '0' for first and '1' for second

	*****************************************************************/
 unsigned char i;
   uint8_t m=0,j;
   uint8_t scroling_text_length = strlen(scroling_text);
     ab4:	fc 01       	movw	r30, r24
     ab6:	01 90       	ld	r0, Z+
     ab8:	00 20       	and	r0, r0
     aba:	e9 f7       	brne	.-6      	; 0xab6 <LCDscroll+0x22>
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	9e 2e       	mov	r9, r30
     ac0:	98 1a       	sub	r9, r24

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
     ac2:	89 e1       	ldi	r24, 0x19	; 25
     ac4:	89 15       	cp	r24, r9
     ac6:	20 f4       	brcc	.+8      	; 0xad0 <LCDscroll+0x3c>
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	e8 2e       	mov	r14, r24
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	f8 2e       	mov	r15, r24
     ad0:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
    LCDWriteStringXY(i,line_scroll,scroling_text);
     ad6:	81 2f       	mov	r24, r17
     ad8:	68 2d       	mov	r22, r8
     ada:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
     ade:	c7 01       	movw	r24, r14
     ae0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCDWriteString>
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <LCDscroll+0x52>
    _delay_loop_2(0);
    _delay_loop_2(0);
	_delay_loop_2(0);
   _delay_loop_2(0);
 
    LCDClear();
     aea:	ce 01       	movw	r24, r28
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <LCDscroll+0x58>
     af0:	ce 01       	movw	r24, r28
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <LCDscroll+0x5e>
     af6:	ce 01       	movw	r24, r28
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <LCDscroll+0x64>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
   uint8_t scroling_text_length = strlen(scroling_text);

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
     b04:	1f 5f       	subi	r17, 0xFF	; 255
     b06:	10 31       	cpi	r17, 0x10	; 16
     b08:	31 f7       	brne	.-52     	; 0xad6 <LCDscroll+0x42>
     b0a:	00 e0       	ldi	r16, 0x00	; 0
     b0c:	cc 24       	eor	r12, r12
     b0e:	dd 24       	eor	r13, r13
   
   for(j=0;j<scroling_text_length;j++)
   {	
   
   	
   if(j>=scroling_text_length-i)
     b10:	69 2c       	mov	r6, r9
     b12:	77 24       	eor	r7, r7
     b14:	25 c0       	rjmp	.+74     	; 0xb60 <LCDscroll+0xcc>
   uint8_t scroling_text_length = strlen(scroling_text);

if(scroling_text_length>=26)	//if text bigger than 25 chars sends warning message to the lcd
scroling_text="Text limit 25 chars";

 for (i=0;i<SCREEN_SIZE;i++) {
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	c0 e0       	ldi	r28, 0x00	; 0
     b1a:	d0 e0       	ldi	r29, 0x00	; 0
   
   for(j=0;j<scroling_text_length;j++)
   {	
   
   	
   if(j>=scroling_text_length-i)
     b1c:	53 01       	movw	r10, r6
     b1e:	a0 1a       	sub	r10, r16
     b20:	b1 08       	sbc	r11, r1
     b22:	ca 15       	cp	r28, r10
     b24:	db 05       	cpc	r29, r11
     b26:	64 f0       	brlt	.+24     	; 0xb40 <LCDscroll+0xac>
   {
   LCDGotoXY(m,line_scroll);
     b28:	81 2f       	mov	r24, r17
     b2a:	68 2d       	mov	r22, r8
     b2c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCDGotoXY>
   LCDByte(scroling_text[j],1);
     b30:	f7 01       	movw	r30, r14
     b32:	ec 0f       	add	r30, r28
     b34:	fd 1f       	adc	r31, r29
     b36:	80 81       	ld	r24, Z
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCDByte>
   m++;
     b3e:	1f 5f       	subi	r17, 0xFF	; 255
     b40:	21 96       	adiw	r28, 0x01	; 1

 for (i=0;i<scroling_text_length;i++) {
   
   m=0;
   
   for(j=0;j<scroling_text_length;j++)
     b42:	c9 15       	cp	r28, r9
     b44:	70 f3       	brcs	.-36     	; 0xb22 <LCDscroll+0x8e>
     b46:	c6 01       	movw	r24, r12
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <LCDscroll+0xb4>
 }

	
    

 for (i=0;i<scroling_text_length;i++) {
     b4c:	c6 01       	movw	r24, r12
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <LCDscroll+0xba>
     b52:	c6 01       	movw	r24, r12
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <LCDscroll+0xc0>
     b58:	c6 01       	movw	r24, r12
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <LCDscroll+0xc6>
     b5e:	0f 5f       	subi	r16, 0xFF	; 255
     b60:	09 15       	cp	r16, r9
     b62:	c8 f2       	brcs	.-78     	; 0xb16 <LCDscroll+0x82>
   
   
 }


}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	9f 90       	pop	r9
     b7a:	8f 90       	pop	r8
     b7c:	7f 90       	pop	r7
     b7e:	6f 90       	pop	r6
     b80:	08 95       	ret

00000b82 <__mulsf3>:
     b82:	a0 e2       	ldi	r26, 0x20	; 32
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e7 ec       	ldi	r30, 0xC7	; 199
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__prologue_saves__>
     b8e:	69 83       	std	Y+1, r22	; 0x01
     b90:	7a 83       	std	Y+2, r23	; 0x02
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	9c 83       	std	Y+4, r25	; 0x04
     b96:	2d 83       	std	Y+5, r18	; 0x05
     b98:	3e 83       	std	Y+6, r19	; 0x06
     b9a:	4f 83       	std	Y+7, r20	; 0x07
     b9c:	58 87       	std	Y+8, r21	; 0x08
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	be 01       	movw	r22, r28
     ba4:	67 5f       	subi	r22, 0xF7	; 247
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     bac:	ce 01       	movw	r24, r28
     bae:	05 96       	adiw	r24, 0x05	; 5
     bb0:	be 01       	movw	r22, r28
     bb2:	6f 5e       	subi	r22, 0xEF	; 239
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     bba:	99 85       	ldd	r25, Y+9	; 0x09
     bbc:	92 30       	cpi	r25, 0x02	; 2
     bbe:	88 f0       	brcs	.+34     	; 0xbe2 <__mulsf3+0x60>
     bc0:	89 89       	ldd	r24, Y+17	; 0x11
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	c8 f0       	brcs	.+50     	; 0xbf8 <__mulsf3+0x76>
     bc6:	94 30       	cpi	r25, 0x04	; 4
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <__mulsf3+0x4e>
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	51 f4       	brne	.+20     	; 0xbe2 <__mulsf3+0x60>
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__mulsf3+0x56>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	29 f4       	brne	.+10     	; 0xbde <__mulsf3+0x5c>
     bd4:	92 30       	cpi	r25, 0x02	; 2
     bd6:	81 f4       	brne	.+32     	; 0xbf8 <__mulsf3+0x76>
     bd8:	84 e3       	ldi	r24, 0x34	; 52
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	c6 c0       	rjmp	.+396    	; 0xd6a <__mulsf3+0x1e8>
     bde:	92 30       	cpi	r25, 0x02	; 2
     be0:	49 f4       	brne	.+18     	; 0xbf4 <__mulsf3+0x72>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	9a 85       	ldd	r25, Y+10	; 0x0a
     be6:	8a 89       	ldd	r24, Y+18	; 0x12
     be8:	98 13       	cpse	r25, r24
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	2a 87       	std	Y+10, r18	; 0x0a
     bee:	ce 01       	movw	r24, r28
     bf0:	09 96       	adiw	r24, 0x09	; 9
     bf2:	bb c0       	rjmp	.+374    	; 0xd6a <__mulsf3+0x1e8>
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	49 f4       	brne	.+18     	; 0xc0a <__mulsf3+0x88>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	8a 89       	ldd	r24, Y+18	; 0x12
     bfe:	98 13       	cpse	r25, r24
     c00:	21 e0       	ldi	r18, 0x01	; 1
     c02:	2a 8b       	std	Y+18, r18	; 0x12
     c04:	ce 01       	movw	r24, r28
     c06:	41 96       	adiw	r24, 0x11	; 17
     c08:	b0 c0       	rjmp	.+352    	; 0xd6a <__mulsf3+0x1e8>
     c0a:	2d 84       	ldd	r2, Y+13	; 0x0d
     c0c:	3e 84       	ldd	r3, Y+14	; 0x0e
     c0e:	4f 84       	ldd	r4, Y+15	; 0x0f
     c10:	58 88       	ldd	r5, Y+16	; 0x10
     c12:	6d 88       	ldd	r6, Y+21	; 0x15
     c14:	7e 88       	ldd	r7, Y+22	; 0x16
     c16:	8f 88       	ldd	r8, Y+23	; 0x17
     c18:	98 8c       	ldd	r9, Y+24	; 0x18
     c1a:	ee 24       	eor	r14, r14
     c1c:	ff 24       	eor	r15, r15
     c1e:	87 01       	movw	r16, r14
     c20:	aa 24       	eor	r10, r10
     c22:	bb 24       	eor	r11, r11
     c24:	65 01       	movw	r12, r10
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	e0 e0       	ldi	r30, 0x00	; 0
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	c1 01       	movw	r24, r2
     c34:	81 70       	andi	r24, 0x01	; 1
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	89 2b       	or	r24, r25
     c3a:	e9 f0       	breq	.+58     	; 0xc76 <__mulsf3+0xf4>
     c3c:	e6 0c       	add	r14, r6
     c3e:	f7 1c       	adc	r15, r7
     c40:	08 1d       	adc	r16, r8
     c42:	19 1d       	adc	r17, r9
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22
     c48:	2a 0d       	add	r18, r10
     c4a:	3b 1d       	adc	r19, r11
     c4c:	4c 1d       	adc	r20, r12
     c4e:	5d 1d       	adc	r21, r13
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e6 14       	cp	r14, r6
     c5a:	f7 04       	cpc	r15, r7
     c5c:	08 05       	cpc	r16, r8
     c5e:	19 05       	cpc	r17, r9
     c60:	20 f4       	brcc	.+8      	; 0xc6a <__mulsf3+0xe8>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ba 01       	movw	r22, r20
     c6c:	a9 01       	movw	r20, r18
     c6e:	48 0f       	add	r20, r24
     c70:	59 1f       	adc	r21, r25
     c72:	6a 1f       	adc	r22, r26
     c74:	7b 1f       	adc	r23, r27
     c76:	aa 0c       	add	r10, r10
     c78:	bb 1c       	adc	r11, r11
     c7a:	cc 1c       	adc	r12, r12
     c7c:	dd 1c       	adc	r13, r13
     c7e:	97 fe       	sbrs	r9, 7
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <__mulsf3+0x110>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	a8 2a       	or	r10, r24
     c8c:	b9 2a       	or	r11, r25
     c8e:	ca 2a       	or	r12, r26
     c90:	db 2a       	or	r13, r27
     c92:	31 96       	adiw	r30, 0x01	; 1
     c94:	e0 32       	cpi	r30, 0x20	; 32
     c96:	f1 05       	cpc	r31, r1
     c98:	49 f0       	breq	.+18     	; 0xcac <__mulsf3+0x12a>
     c9a:	66 0c       	add	r6, r6
     c9c:	77 1c       	adc	r7, r7
     c9e:	88 1c       	adc	r8, r8
     ca0:	99 1c       	adc	r9, r9
     ca2:	56 94       	lsr	r5
     ca4:	47 94       	ror	r4
     ca6:	37 94       	ror	r3
     ca8:	27 94       	ror	r2
     caa:	c3 cf       	rjmp	.-122    	; 0xc32 <__mulsf3+0xb0>
     cac:	fa 85       	ldd	r31, Y+10	; 0x0a
     cae:	ea 89       	ldd	r30, Y+18	; 0x12
     cb0:	2b 89       	ldd	r18, Y+19	; 0x13
     cb2:	3c 89       	ldd	r19, Y+20	; 0x14
     cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb8:	28 0f       	add	r18, r24
     cba:	39 1f       	adc	r19, r25
     cbc:	2e 5f       	subi	r18, 0xFE	; 254
     cbe:	3f 4f       	sbci	r19, 0xFF	; 255
     cc0:	17 c0       	rjmp	.+46     	; 0xcf0 <__mulsf3+0x16e>
     cc2:	ca 01       	movw	r24, r20
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	90 70       	andi	r25, 0x00	; 0
     cc8:	89 2b       	or	r24, r25
     cca:	61 f0       	breq	.+24     	; 0xce4 <__mulsf3+0x162>
     ccc:	16 95       	lsr	r17
     cce:	07 95       	ror	r16
     cd0:	f7 94       	ror	r15
     cd2:	e7 94       	ror	r14
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	b0 e8       	ldi	r27, 0x80	; 128
     cdc:	e8 2a       	or	r14, r24
     cde:	f9 2a       	or	r15, r25
     ce0:	0a 2b       	or	r16, r26
     ce2:	1b 2b       	or	r17, r27
     ce4:	76 95       	lsr	r23
     ce6:	67 95       	ror	r22
     ce8:	57 95       	ror	r21
     cea:	47 95       	ror	r20
     cec:	2f 5f       	subi	r18, 0xFF	; 255
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	77 fd       	sbrc	r23, 7
     cf2:	e7 cf       	rjmp	.-50     	; 0xcc2 <__mulsf3+0x140>
     cf4:	0c c0       	rjmp	.+24     	; 0xd0e <__mulsf3+0x18c>
     cf6:	44 0f       	add	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	66 1f       	adc	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	17 fd       	sbrc	r17, 7
     d00:	41 60       	ori	r20, 0x01	; 1
     d02:	ee 0c       	add	r14, r14
     d04:	ff 1c       	adc	r15, r15
     d06:	00 1f       	adc	r16, r16
     d08:	11 1f       	adc	r17, r17
     d0a:	21 50       	subi	r18, 0x01	; 1
     d0c:	30 40       	sbci	r19, 0x00	; 0
     d0e:	40 30       	cpi	r20, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	59 07       	cpc	r21, r25
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	69 07       	cpc	r22, r25
     d18:	90 e4       	ldi	r25, 0x40	; 64
     d1a:	79 07       	cpc	r23, r25
     d1c:	60 f3       	brcs	.-40     	; 0xcf6 <__mulsf3+0x174>
     d1e:	2b 8f       	std	Y+27, r18	; 0x1b
     d20:	3c 8f       	std	Y+28, r19	; 0x1c
     d22:	db 01       	movw	r26, r22
     d24:	ca 01       	movw	r24, r20
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	a0 70       	andi	r26, 0x00	; 0
     d2c:	b0 70       	andi	r27, 0x00	; 0
     d2e:	80 34       	cpi	r24, 0x40	; 64
     d30:	91 05       	cpc	r25, r1
     d32:	a1 05       	cpc	r26, r1
     d34:	b1 05       	cpc	r27, r1
     d36:	61 f4       	brne	.+24     	; 0xd50 <__mulsf3+0x1ce>
     d38:	47 fd       	sbrc	r20, 7
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <__mulsf3+0x1ce>
     d3c:	e1 14       	cp	r14, r1
     d3e:	f1 04       	cpc	r15, r1
     d40:	01 05       	cpc	r16, r1
     d42:	11 05       	cpc	r17, r1
     d44:	29 f0       	breq	.+10     	; 0xd50 <__mulsf3+0x1ce>
     d46:	40 5c       	subi	r20, 0xC0	; 192
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	6f 4f       	sbci	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	40 78       	andi	r20, 0x80	; 128
     d50:	1a 8e       	std	Y+26, r1	; 0x1a
     d52:	fe 17       	cp	r31, r30
     d54:	11 f0       	breq	.+4      	; 0xd5a <__mulsf3+0x1d8>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	8a 8f       	std	Y+26, r24	; 0x1a
     d5a:	4d 8f       	std	Y+29, r20	; 0x1d
     d5c:	5e 8f       	std	Y+30, r21	; 0x1e
     d5e:	6f 8f       	std	Y+31, r22	; 0x1f
     d60:	78 a3       	std	Y+32, r23	; 0x20
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	89 8f       	std	Y+25, r24	; 0x19
     d66:	ce 01       	movw	r24, r28
     d68:	49 96       	adiw	r24, 0x19	; 25
     d6a:	0e 94 67 08 	call	0x10ce	; 0x10ce <__pack_f>
     d6e:	a0 96       	adiw	r28, 0x20	; 32
     d70:	e2 e1       	ldi	r30, 0x12	; 18
     d72:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__epilogue_restores__>

00000d76 <__gtsf2>:
     d76:	a8 e1       	ldi	r26, 0x18	; 24
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__prologue_saves__+0x18>
     d82:	69 83       	std	Y+1, r22	; 0x01
     d84:	7a 83       	std	Y+2, r23	; 0x02
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	2d 83       	std	Y+5, r18	; 0x05
     d8c:	3e 83       	std	Y+6, r19	; 0x06
     d8e:	4f 83       	std	Y+7, r20	; 0x07
     d90:	58 87       	std	Y+8, r21	; 0x08
     d92:	89 e0       	ldi	r24, 0x09	; 9
     d94:	e8 2e       	mov	r14, r24
     d96:	f1 2c       	mov	r15, r1
     d98:	ec 0e       	add	r14, r28
     d9a:	fd 1e       	adc	r15, r29
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	b7 01       	movw	r22, r14
     da2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     da6:	8e 01       	movw	r16, r28
     da8:	0f 5e       	subi	r16, 0xEF	; 239
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	ce 01       	movw	r24, r28
     dae:	05 96       	adiw	r24, 0x05	; 5
     db0:	b8 01       	movw	r22, r16
     db2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	40 f0       	brcs	.+16     	; 0xdcc <__gtsf2+0x56>
     dbc:	89 89       	ldd	r24, Y+17	; 0x11
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	28 f0       	brcs	.+10     	; 0xdcc <__gtsf2+0x56>
     dc2:	c7 01       	movw	r24, r14
     dc4:	b8 01       	movw	r22, r16
     dc6:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fpcmp_parts_f>
     dca:	01 c0       	rjmp	.+2      	; 0xdce <__gtsf2+0x58>
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	68 96       	adiw	r28, 0x18	; 24
     dd0:	e6 e0       	ldi	r30, 0x06	; 6
     dd2:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__epilogue_restores__+0x18>

00000dd6 <__gesf2>:
     dd6:	a8 e1       	ldi	r26, 0x18	; 24
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 ef       	ldi	r30, 0xF1	; 241
     ddc:	f6 e0       	ldi	r31, 0x06	; 6
     dde:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__prologue_saves__+0x18>
     de2:	69 83       	std	Y+1, r22	; 0x01
     de4:	7a 83       	std	Y+2, r23	; 0x02
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	2d 83       	std	Y+5, r18	; 0x05
     dec:	3e 83       	std	Y+6, r19	; 0x06
     dee:	4f 83       	std	Y+7, r20	; 0x07
     df0:	58 87       	std	Y+8, r21	; 0x08
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	e8 2e       	mov	r14, r24
     df6:	f1 2c       	mov	r15, r1
     df8:	ec 0e       	add	r14, r28
     dfa:	fd 1e       	adc	r15, r29
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	b7 01       	movw	r22, r14
     e02:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     e06:	8e 01       	movw	r16, r28
     e08:	0f 5e       	subi	r16, 0xEF	; 239
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	ce 01       	movw	r24, r28
     e0e:	05 96       	adiw	r24, 0x05	; 5
     e10:	b8 01       	movw	r22, r16
     e12:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <__gesf2+0x56>
     e1c:	89 89       	ldd	r24, Y+17	; 0x11
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	28 f0       	brcs	.+10     	; 0xe2c <__gesf2+0x56>
     e22:	c7 01       	movw	r24, r14
     e24:	b8 01       	movw	r22, r16
     e26:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fpcmp_parts_f>
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <__gesf2+0x58>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	68 96       	adiw	r28, 0x18	; 24
     e30:	e6 e0       	ldi	r30, 0x06	; 6
     e32:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__epilogue_restores__+0x18>

00000e36 <__ltsf2>:
     e36:	a8 e1       	ldi	r26, 0x18	; 24
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e2       	ldi	r30, 0x21	; 33
     e3c:	f7 e0       	ldi	r31, 0x07	; 7
     e3e:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <__prologue_saves__+0x18>
     e42:	69 83       	std	Y+1, r22	; 0x01
     e44:	7a 83       	std	Y+2, r23	; 0x02
     e46:	8b 83       	std	Y+3, r24	; 0x03
     e48:	9c 83       	std	Y+4, r25	; 0x04
     e4a:	2d 83       	std	Y+5, r18	; 0x05
     e4c:	3e 83       	std	Y+6, r19	; 0x06
     e4e:	4f 83       	std	Y+7, r20	; 0x07
     e50:	58 87       	std	Y+8, r21	; 0x08
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	e8 2e       	mov	r14, r24
     e56:	f1 2c       	mov	r15, r1
     e58:	ec 0e       	add	r14, r28
     e5a:	fd 1e       	adc	r15, r29
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	b7 01       	movw	r22, r14
     e62:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     e66:	8e 01       	movw	r16, r28
     e68:	0f 5e       	subi	r16, 0xEF	; 239
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	ce 01       	movw	r24, r28
     e6e:	05 96       	adiw	r24, 0x05	; 5
     e70:	b8 01       	movw	r22, r16
     e72:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	40 f0       	brcs	.+16     	; 0xe8c <__ltsf2+0x56>
     e7c:	89 89       	ldd	r24, Y+17	; 0x11
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	28 f0       	brcs	.+10     	; 0xe8c <__ltsf2+0x56>
     e82:	c7 01       	movw	r24, r14
     e84:	b8 01       	movw	r22, r16
     e86:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fpcmp_parts_f>
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <__ltsf2+0x58>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	68 96       	adiw	r28, 0x18	; 24
     e90:	e6 e0       	ldi	r30, 0x06	; 6
     e92:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__epilogue_restores__+0x18>

00000e96 <__fixsfsi>:
     e96:	ac e0       	ldi	r26, 0x0C	; 12
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e5       	ldi	r30, 0x51	; 81
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__prologue_saves__+0x20>
     ea2:	69 83       	std	Y+1, r22	; 0x01
     ea4:	7a 83       	std	Y+2, r23	; 0x02
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	be 01       	movw	r22, r28
     eb0:	6b 5f       	subi	r22, 0xFB	; 251
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__unpack_f>
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	61 f1       	breq	.+88     	; 0xf16 <__fixsfsi+0x80>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	50 f1       	brcs	.+84     	; 0xf16 <__fixsfsi+0x80>
     ec2:	84 30       	cpi	r24, 0x04	; 4
     ec4:	21 f4       	brne	.+8      	; 0xece <__fixsfsi+0x38>
     ec6:	8e 81       	ldd	r24, Y+6	; 0x06
     ec8:	88 23       	and	r24, r24
     eca:	51 f1       	breq	.+84     	; 0xf20 <__fixsfsi+0x8a>
     ecc:	2e c0       	rjmp	.+92     	; 0xf2a <__fixsfsi+0x94>
     ece:	2f 81       	ldd	r18, Y+7	; 0x07
     ed0:	38 85       	ldd	r19, Y+8	; 0x08
     ed2:	37 fd       	sbrc	r19, 7
     ed4:	20 c0       	rjmp	.+64     	; 0xf16 <__fixsfsi+0x80>
     ed6:	6e 81       	ldd	r22, Y+6	; 0x06
     ed8:	2f 31       	cpi	r18, 0x1F	; 31
     eda:	31 05       	cpc	r19, r1
     edc:	1c f0       	brlt	.+6      	; 0xee4 <__fixsfsi+0x4e>
     ede:	66 23       	and	r22, r22
     ee0:	f9 f0       	breq	.+62     	; 0xf20 <__fixsfsi+0x8a>
     ee2:	23 c0       	rjmp	.+70     	; 0xf2a <__fixsfsi+0x94>
     ee4:	8e e1       	ldi	r24, 0x1E	; 30
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	82 1b       	sub	r24, r18
     eea:	93 0b       	sbc	r25, r19
     eec:	29 85       	ldd	r18, Y+9	; 0x09
     eee:	3a 85       	ldd	r19, Y+10	; 0x0a
     ef0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ef2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <__fixsfsi+0x68>
     ef6:	56 95       	lsr	r21
     ef8:	47 95       	ror	r20
     efa:	37 95       	ror	r19
     efc:	27 95       	ror	r18
     efe:	8a 95       	dec	r24
     f00:	d2 f7       	brpl	.-12     	; 0xef6 <__fixsfsi+0x60>
     f02:	66 23       	and	r22, r22
     f04:	b1 f0       	breq	.+44     	; 0xf32 <__fixsfsi+0x9c>
     f06:	50 95       	com	r21
     f08:	40 95       	com	r20
     f0a:	30 95       	com	r19
     f0c:	21 95       	neg	r18
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	4f 4f       	sbci	r20, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	0e c0       	rjmp	.+28     	; 0xf32 <__fixsfsi+0x9c>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <__fixsfsi+0x9c>
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f ef       	ldi	r20, 0xFF	; 255
     f26:	5f e7       	ldi	r21, 0x7F	; 127
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__fixsfsi+0x9c>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e8       	ldi	r21, 0x80	; 128
     f32:	b9 01       	movw	r22, r18
     f34:	ca 01       	movw	r24, r20
     f36:	2c 96       	adiw	r28, 0x0c	; 12
     f38:	e2 e0       	ldi	r30, 0x02	; 2
     f3a:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__epilogue_restores__+0x20>

00000f3e <__floatunsisf>:
     f3e:	a8 e0       	ldi	r26, 0x08	; 8
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 ea       	ldi	r30, 0xA5	; 165
     f44:	f7 e0       	ldi	r31, 0x07	; 7
     f46:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__prologue_saves__+0x10>
     f4a:	7b 01       	movw	r14, r22
     f4c:	8c 01       	movw	r16, r24
     f4e:	61 15       	cp	r22, r1
     f50:	71 05       	cpc	r23, r1
     f52:	81 05       	cpc	r24, r1
     f54:	91 05       	cpc	r25, r1
     f56:	19 f4       	brne	.+6      	; 0xf5e <__floatunsisf+0x20>
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	60 c0       	rjmp	.+192    	; 0x101e <__floatunsisf+0xe0>
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	8e e1       	ldi	r24, 0x1E	; 30
     f64:	c8 2e       	mov	r12, r24
     f66:	d1 2c       	mov	r13, r1
     f68:	dc 82       	std	Y+4, r13	; 0x04
     f6a:	cb 82       	std	Y+3, r12	; 0x03
     f6c:	ed 82       	std	Y+5, r14	; 0x05
     f6e:	fe 82       	std	Y+6, r15	; 0x06
     f70:	0f 83       	std	Y+7, r16	; 0x07
     f72:	18 87       	std	Y+8, r17	; 0x08
     f74:	c8 01       	movw	r24, r16
     f76:	b7 01       	movw	r22, r14
     f78:	0e 94 18 08 	call	0x1030	; 0x1030 <__clzsi2>
     f7c:	fc 01       	movw	r30, r24
     f7e:	31 97       	sbiw	r30, 0x01	; 1
     f80:	f7 ff       	sbrs	r31, 7
     f82:	3b c0       	rjmp	.+118    	; 0xffa <__floatunsisf+0xbc>
     f84:	22 27       	eor	r18, r18
     f86:	33 27       	eor	r19, r19
     f88:	2e 1b       	sub	r18, r30
     f8a:	3f 0b       	sbc	r19, r31
     f8c:	57 01       	movw	r10, r14
     f8e:	68 01       	movw	r12, r16
     f90:	02 2e       	mov	r0, r18
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <__floatunsisf+0x5e>
     f94:	d6 94       	lsr	r13
     f96:	c7 94       	ror	r12
     f98:	b7 94       	ror	r11
     f9a:	a7 94       	ror	r10
     f9c:	0a 94       	dec	r0
     f9e:	d2 f7       	brpl	.-12     	; 0xf94 <__floatunsisf+0x56>
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <__floatunsisf+0x7c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	aa 1f       	adc	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	2a 95       	dec	r18
     fbc:	d2 f7       	brpl	.-12     	; 0xfb2 <__floatunsisf+0x74>
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	a1 09       	sbc	r26, r1
     fc2:	b1 09       	sbc	r27, r1
     fc4:	8e 21       	and	r24, r14
     fc6:	9f 21       	and	r25, r15
     fc8:	a0 23       	and	r26, r16
     fca:	b1 23       	and	r27, r17
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	a1 05       	cpc	r26, r1
     fd0:	b1 05       	cpc	r27, r1
     fd2:	21 f0       	breq	.+8      	; 0xfdc <__floatunsisf+0x9e>
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	4a 29       	or	r20, r10
     fde:	5b 29       	or	r21, r11
     fe0:	6c 29       	or	r22, r12
     fe2:	7d 29       	or	r23, r13
     fe4:	4d 83       	std	Y+5, r20	; 0x05
     fe6:	5e 83       	std	Y+6, r21	; 0x06
     fe8:	6f 83       	std	Y+7, r22	; 0x07
     fea:	78 87       	std	Y+8, r23	; 0x08
     fec:	8e e1       	ldi	r24, 0x1E	; 30
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	8e 1b       	sub	r24, r30
     ff2:	9f 0b       	sbc	r25, r31
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	12 c0       	rjmp	.+36     	; 0x101e <__floatunsisf+0xe0>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	81 f0       	breq	.+32     	; 0x101e <__floatunsisf+0xe0>
     ffe:	0e 2e       	mov	r0, r30
    1000:	04 c0       	rjmp	.+8      	; 0x100a <__floatunsisf+0xcc>
    1002:	ee 0c       	add	r14, r14
    1004:	ff 1c       	adc	r15, r15
    1006:	00 1f       	adc	r16, r16
    1008:	11 1f       	adc	r17, r17
    100a:	0a 94       	dec	r0
    100c:	d2 f7       	brpl	.-12     	; 0x1002 <__floatunsisf+0xc4>
    100e:	ed 82       	std	Y+5, r14	; 0x05
    1010:	fe 82       	std	Y+6, r15	; 0x06
    1012:	0f 83       	std	Y+7, r16	; 0x07
    1014:	18 87       	std	Y+8, r17	; 0x08
    1016:	ce 1a       	sub	r12, r30
    1018:	df 0a       	sbc	r13, r31
    101a:	dc 82       	std	Y+4, r13	; 0x04
    101c:	cb 82       	std	Y+3, r12	; 0x03
    101e:	1a 82       	std	Y+2, r1	; 0x02
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	0e 94 67 08 	call	0x10ce	; 0x10ce <__pack_f>
    1028:	28 96       	adiw	r28, 0x08	; 8
    102a:	ea e0       	ldi	r30, 0x0A	; 10
    102c:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__epilogue_restores__+0x10>

00001030 <__clzsi2>:
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	7b 01       	movw	r14, r22
    103a:	8c 01       	movw	r16, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	e8 16       	cp	r14, r24
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	f8 06       	cpc	r15, r24
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	08 07       	cpc	r16, r24
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	18 07       	cpc	r17, r24
    104c:	88 f4       	brcc	.+34     	; 0x1070 <__clzsi2+0x40>
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	e8 16       	cp	r14, r24
    1052:	f1 04       	cpc	r15, r1
    1054:	01 05       	cpc	r16, r1
    1056:	11 05       	cpc	r17, r1
    1058:	31 f0       	breq	.+12     	; 0x1066 <__clzsi2+0x36>
    105a:	28 f0       	brcs	.+10     	; 0x1066 <__clzsi2+0x36>
    105c:	88 e0       	ldi	r24, 0x08	; 8
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	17 c0       	rjmp	.+46     	; 0x1094 <__clzsi2+0x64>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__clzsi2+0x64>
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	e8 16       	cp	r14, r24
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	f8 06       	cpc	r15, r24
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	08 07       	cpc	r16, r24
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	18 07       	cpc	r17, r24
    1080:	28 f0       	brcs	.+10     	; 0x108c <__clzsi2+0x5c>
    1082:	88 e1       	ldi	r24, 0x18	; 24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a0 e0       	ldi	r26, 0x00	; 0
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__clzsi2+0x64>
    108c:	80 e1       	ldi	r24, 0x10	; 16
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	20 e2       	ldi	r18, 0x20	; 32
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	28 1b       	sub	r18, r24
    109e:	39 0b       	sbc	r19, r25
    10a0:	4a 0b       	sbc	r20, r26
    10a2:	5b 0b       	sbc	r21, r27
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <__clzsi2+0x7e>
    10a6:	16 95       	lsr	r17
    10a8:	07 95       	ror	r16
    10aa:	f7 94       	ror	r15
    10ac:	e7 94       	ror	r14
    10ae:	8a 95       	dec	r24
    10b0:	d2 f7       	brpl	.-12     	; 0x10a6 <__clzsi2+0x76>
    10b2:	f7 01       	movw	r30, r14
    10b4:	e4 5c       	subi	r30, 0xC4	; 196
    10b6:	fd 4f       	sbci	r31, 0xFD	; 253
    10b8:	80 81       	ld	r24, Z
    10ba:	28 1b       	sub	r18, r24
    10bc:	31 09       	sbc	r19, r1
    10be:	41 09       	sbc	r20, r1
    10c0:	51 09       	sbc	r21, r1
    10c2:	c9 01       	movw	r24, r18
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <__pack_f>:
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	fc 01       	movw	r30, r24
    10da:	e4 80       	ldd	r14, Z+4	; 0x04
    10dc:	f5 80       	ldd	r15, Z+5	; 0x05
    10de:	06 81       	ldd	r16, Z+6	; 0x06
    10e0:	17 81       	ldd	r17, Z+7	; 0x07
    10e2:	d1 80       	ldd	r13, Z+1	; 0x01
    10e4:	80 81       	ld	r24, Z
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	48 f4       	brcc	.+18     	; 0x10fc <__pack_f+0x2e>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e1       	ldi	r26, 0x10	; 16
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 2a       	or	r14, r24
    10f4:	f9 2a       	or	r15, r25
    10f6:	0a 2b       	or	r16, r26
    10f8:	1b 2b       	or	r17, r27
    10fa:	a5 c0       	rjmp	.+330    	; 0x1246 <__stack+0x147>
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	09 f4       	brne	.+2      	; 0x1102 <__stack+0x3>
    1100:	9f c0       	rjmp	.+318    	; 0x1240 <__stack+0x141>
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	21 f4       	brne	.+8      	; 0x110e <__stack+0xf>
    1106:	ee 24       	eor	r14, r14
    1108:	ff 24       	eor	r15, r15
    110a:	87 01       	movw	r16, r14
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <__stack+0x19>
    110e:	e1 14       	cp	r14, r1
    1110:	f1 04       	cpc	r15, r1
    1112:	01 05       	cpc	r16, r1
    1114:	11 05       	cpc	r17, r1
    1116:	19 f4       	brne	.+6      	; 0x111e <__stack+0x1f>
    1118:	e0 e0       	ldi	r30, 0x00	; 0
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	96 c0       	rjmp	.+300    	; 0x124a <__stack+0x14b>
    111e:	62 81       	ldd	r22, Z+2	; 0x02
    1120:	73 81       	ldd	r23, Z+3	; 0x03
    1122:	9f ef       	ldi	r25, 0xFF	; 255
    1124:	62 38       	cpi	r22, 0x82	; 130
    1126:	79 07       	cpc	r23, r25
    1128:	0c f0       	brlt	.+2      	; 0x112c <__stack+0x2d>
    112a:	5b c0       	rjmp	.+182    	; 0x11e2 <__stack+0xe3>
    112c:	22 e8       	ldi	r18, 0x82	; 130
    112e:	3f ef       	ldi	r19, 0xFF	; 255
    1130:	26 1b       	sub	r18, r22
    1132:	37 0b       	sbc	r19, r23
    1134:	2a 31       	cpi	r18, 0x1A	; 26
    1136:	31 05       	cpc	r19, r1
    1138:	2c f0       	brlt	.+10     	; 0x1144 <__stack+0x45>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	2a c0       	rjmp	.+84     	; 0x1198 <__stack+0x99>
    1144:	b8 01       	movw	r22, r16
    1146:	a7 01       	movw	r20, r14
    1148:	02 2e       	mov	r0, r18
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__stack+0x55>
    114c:	76 95       	lsr	r23
    114e:	67 95       	ror	r22
    1150:	57 95       	ror	r21
    1152:	47 95       	ror	r20
    1154:	0a 94       	dec	r0
    1156:	d2 f7       	brpl	.-12     	; 0x114c <__stack+0x4d>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__stack+0x6b>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	aa 1f       	adc	r26, r26
    1168:	bb 1f       	adc	r27, r27
    116a:	2a 95       	dec	r18
    116c:	d2 f7       	brpl	.-12     	; 0x1162 <__stack+0x63>
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	a1 09       	sbc	r26, r1
    1172:	b1 09       	sbc	r27, r1
    1174:	8e 21       	and	r24, r14
    1176:	9f 21       	and	r25, r15
    1178:	a0 23       	and	r26, r16
    117a:	b1 23       	and	r27, r17
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	a1 05       	cpc	r26, r1
    1180:	b1 05       	cpc	r27, r1
    1182:	21 f0       	breq	.+8      	; 0x118c <__stack+0x8d>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	9a 01       	movw	r18, r20
    118e:	ab 01       	movw	r20, r22
    1190:	28 2b       	or	r18, r24
    1192:	39 2b       	or	r19, r25
    1194:	4a 2b       	or	r20, r26
    1196:	5b 2b       	or	r21, r27
    1198:	da 01       	movw	r26, r20
    119a:	c9 01       	movw	r24, r18
    119c:	8f 77       	andi	r24, 0x7F	; 127
    119e:	90 70       	andi	r25, 0x00	; 0
    11a0:	a0 70       	andi	r26, 0x00	; 0
    11a2:	b0 70       	andi	r27, 0x00	; 0
    11a4:	80 34       	cpi	r24, 0x40	; 64
    11a6:	91 05       	cpc	r25, r1
    11a8:	a1 05       	cpc	r26, r1
    11aa:	b1 05       	cpc	r27, r1
    11ac:	39 f4       	brne	.+14     	; 0x11bc <__stack+0xbd>
    11ae:	27 ff       	sbrs	r18, 7
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <__stack+0xc5>
    11b2:	20 5c       	subi	r18, 0xC0	; 192
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	4f 4f       	sbci	r20, 0xFF	; 255
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <__stack+0xc5>
    11bc:	21 5c       	subi	r18, 0xC1	; 193
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	4f 4f       	sbci	r20, 0xFF	; 255
    11c2:	5f 4f       	sbci	r21, 0xFF	; 255
    11c4:	e0 e0       	ldi	r30, 0x00	; 0
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	20 30       	cpi	r18, 0x00	; 0
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	3a 07       	cpc	r19, r26
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	4a 07       	cpc	r20, r26
    11d2:	a0 e4       	ldi	r26, 0x40	; 64
    11d4:	5a 07       	cpc	r21, r26
    11d6:	10 f0       	brcs	.+4      	; 0x11dc <__stack+0xdd>
    11d8:	e1 e0       	ldi	r30, 0x01	; 1
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	79 01       	movw	r14, r18
    11de:	8a 01       	movw	r16, r20
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <__stack+0x131>
    11e2:	60 38       	cpi	r22, 0x80	; 128
    11e4:	71 05       	cpc	r23, r1
    11e6:	64 f5       	brge	.+88     	; 0x1240 <__stack+0x141>
    11e8:	fb 01       	movw	r30, r22
    11ea:	e1 58       	subi	r30, 0x81	; 129
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	d8 01       	movw	r26, r16
    11f0:	c7 01       	movw	r24, r14
    11f2:	8f 77       	andi	r24, 0x7F	; 127
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	a0 70       	andi	r26, 0x00	; 0
    11f8:	b0 70       	andi	r27, 0x00	; 0
    11fa:	80 34       	cpi	r24, 0x40	; 64
    11fc:	91 05       	cpc	r25, r1
    11fe:	a1 05       	cpc	r26, r1
    1200:	b1 05       	cpc	r27, r1
    1202:	39 f4       	brne	.+14     	; 0x1212 <__stack+0x113>
    1204:	e7 fe       	sbrs	r14, 7
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <__stack+0x123>
    1208:	80 e4       	ldi	r24, 0x40	; 64
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	04 c0       	rjmp	.+8      	; 0x121a <__stack+0x11b>
    1212:	8f e3       	ldi	r24, 0x3F	; 63
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e8 0e       	add	r14, r24
    121c:	f9 1e       	adc	r15, r25
    121e:	0a 1f       	adc	r16, r26
    1220:	1b 1f       	adc	r17, r27
    1222:	17 ff       	sbrs	r17, 7
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <__stack+0x131>
    1226:	16 95       	lsr	r17
    1228:	07 95       	ror	r16
    122a:	f7 94       	ror	r15
    122c:	e7 94       	ror	r14
    122e:	31 96       	adiw	r30, 0x01	; 1
    1230:	87 e0       	ldi	r24, 0x07	; 7
    1232:	16 95       	lsr	r17
    1234:	07 95       	ror	r16
    1236:	f7 94       	ror	r15
    1238:	e7 94       	ror	r14
    123a:	8a 95       	dec	r24
    123c:	d1 f7       	brne	.-12     	; 0x1232 <__stack+0x133>
    123e:	05 c0       	rjmp	.+10     	; 0x124a <__stack+0x14b>
    1240:	ee 24       	eor	r14, r14
    1242:	ff 24       	eor	r15, r15
    1244:	87 01       	movw	r16, r14
    1246:	ef ef       	ldi	r30, 0xFF	; 255
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	6e 2f       	mov	r22, r30
    124c:	67 95       	ror	r22
    124e:	66 27       	eor	r22, r22
    1250:	67 95       	ror	r22
    1252:	90 2f       	mov	r25, r16
    1254:	9f 77       	andi	r25, 0x7F	; 127
    1256:	d7 94       	ror	r13
    1258:	dd 24       	eor	r13, r13
    125a:	d7 94       	ror	r13
    125c:	8e 2f       	mov	r24, r30
    125e:	86 95       	lsr	r24
    1260:	49 2f       	mov	r20, r25
    1262:	46 2b       	or	r20, r22
    1264:	58 2f       	mov	r21, r24
    1266:	5d 29       	or	r21, r13
    1268:	b7 01       	movw	r22, r14
    126a:	ca 01       	movw	r24, r20
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	08 95       	ret

00001278 <__unpack_f>:
    1278:	fc 01       	movw	r30, r24
    127a:	db 01       	movw	r26, r22
    127c:	40 81       	ld	r20, Z
    127e:	51 81       	ldd	r21, Z+1	; 0x01
    1280:	22 81       	ldd	r18, Z+2	; 0x02
    1282:	62 2f       	mov	r22, r18
    1284:	6f 77       	andi	r22, 0x7F	; 127
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	22 1f       	adc	r18, r18
    128a:	22 27       	eor	r18, r18
    128c:	22 1f       	adc	r18, r18
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	89 2f       	mov	r24, r25
    1292:	88 0f       	add	r24, r24
    1294:	82 2b       	or	r24, r18
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	99 1f       	adc	r25, r25
    129c:	99 27       	eor	r25, r25
    129e:	99 1f       	adc	r25, r25
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	9c 93       	st	X, r25
    12a4:	11 97       	sbiw	r26, 0x01	; 1
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	a9 f5       	brne	.+106    	; 0x1316 <__unpack_f+0x9e>
    12ac:	41 15       	cp	r20, r1
    12ae:	51 05       	cpc	r21, r1
    12b0:	61 05       	cpc	r22, r1
    12b2:	71 05       	cpc	r23, r1
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__unpack_f+0x42>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	37 c0       	rjmp	.+110    	; 0x1328 <__unpack_f+0xb0>
    12ba:	82 e8       	ldi	r24, 0x82	; 130
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	13 96       	adiw	r26, 0x03	; 3
    12c0:	9c 93       	st	X, r25
    12c2:	8e 93       	st	-X, r24
    12c4:	12 97       	sbiw	r26, 0x02	; 2
    12c6:	9a 01       	movw	r18, r20
    12c8:	ab 01       	movw	r20, r22
    12ca:	67 e0       	ldi	r22, 0x07	; 7
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	44 1f       	adc	r20, r20
    12d2:	55 1f       	adc	r21, r21
    12d4:	6a 95       	dec	r22
    12d6:	d1 f7       	brne	.-12     	; 0x12cc <__unpack_f+0x54>
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	8c 93       	st	X, r24
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <__unpack_f+0x80>
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	44 1f       	adc	r20, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	13 97       	sbiw	r26, 0x03	; 3
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	13 96       	adiw	r26, 0x03	; 3
    12f2:	9c 93       	st	X, r25
    12f4:	8e 93       	st	-X, r24
    12f6:	12 97       	sbiw	r26, 0x02	; 2
    12f8:	20 30       	cpi	r18, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	38 07       	cpc	r19, r24
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	48 07       	cpc	r20, r24
    1302:	80 e4       	ldi	r24, 0x40	; 64
    1304:	58 07       	cpc	r21, r24
    1306:	58 f3       	brcs	.-42     	; 0x12de <__unpack_f+0x66>
    1308:	14 96       	adiw	r26, 0x04	; 4
    130a:	2d 93       	st	X+, r18
    130c:	3d 93       	st	X+, r19
    130e:	4d 93       	st	X+, r20
    1310:	5c 93       	st	X, r21
    1312:	17 97       	sbiw	r26, 0x07	; 7
    1314:	08 95       	ret
    1316:	2f 3f       	cpi	r18, 0xFF	; 255
    1318:	31 05       	cpc	r19, r1
    131a:	79 f4       	brne	.+30     	; 0x133a <__unpack_f+0xc2>
    131c:	41 15       	cp	r20, r1
    131e:	51 05       	cpc	r21, r1
    1320:	61 05       	cpc	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	19 f4       	brne	.+6      	; 0x132c <__unpack_f+0xb4>
    1326:	84 e0       	ldi	r24, 0x04	; 4
    1328:	8c 93       	st	X, r24
    132a:	08 95       	ret
    132c:	64 ff       	sbrs	r22, 4
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <__unpack_f+0xbe>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8c 93       	st	X, r24
    1334:	12 c0       	rjmp	.+36     	; 0x135a <__unpack_f+0xe2>
    1336:	1c 92       	st	X, r1
    1338:	10 c0       	rjmp	.+32     	; 0x135a <__unpack_f+0xe2>
    133a:	2f 57       	subi	r18, 0x7F	; 127
    133c:	30 40       	sbci	r19, 0x00	; 0
    133e:	13 96       	adiw	r26, 0x03	; 3
    1340:	3c 93       	st	X, r19
    1342:	2e 93       	st	-X, r18
    1344:	12 97       	sbiw	r26, 0x02	; 2
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	8c 93       	st	X, r24
    134a:	87 e0       	ldi	r24, 0x07	; 7
    134c:	44 0f       	add	r20, r20
    134e:	55 1f       	adc	r21, r21
    1350:	66 1f       	adc	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	8a 95       	dec	r24
    1356:	d1 f7       	brne	.-12     	; 0x134c <__unpack_f+0xd4>
    1358:	70 64       	ori	r23, 0x40	; 64
    135a:	14 96       	adiw	r26, 0x04	; 4
    135c:	4d 93       	st	X+, r20
    135e:	5d 93       	st	X+, r21
    1360:	6d 93       	st	X+, r22
    1362:	7c 93       	st	X, r23
    1364:	17 97       	sbiw	r26, 0x07	; 7
    1366:	08 95       	ret

00001368 <__fpcmp_parts_f>:
    1368:	1f 93       	push	r17
    136a:	dc 01       	movw	r26, r24
    136c:	fb 01       	movw	r30, r22
    136e:	9c 91       	ld	r25, X
    1370:	92 30       	cpi	r25, 0x02	; 2
    1372:	08 f4       	brcc	.+2      	; 0x1376 <__fpcmp_parts_f+0xe>
    1374:	47 c0       	rjmp	.+142    	; 0x1404 <__fpcmp_parts_f+0x9c>
    1376:	80 81       	ld	r24, Z
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	08 f4       	brcc	.+2      	; 0x137e <__fpcmp_parts_f+0x16>
    137c:	43 c0       	rjmp	.+134    	; 0x1404 <__fpcmp_parts_f+0x9c>
    137e:	94 30       	cpi	r25, 0x04	; 4
    1380:	51 f4       	brne	.+20     	; 0x1396 <__fpcmp_parts_f+0x2e>
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	1c 91       	ld	r17, X
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	99 f5       	brne	.+102    	; 0x13f0 <__fpcmp_parts_f+0x88>
    138a:	81 81       	ldd	r24, Z+1	; 0x01
    138c:	68 2f       	mov	r22, r24
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	61 1b       	sub	r22, r17
    1392:	71 09       	sbc	r23, r1
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <__fpcmp_parts_f+0xac>
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	21 f0       	breq	.+8      	; 0x13a2 <__fpcmp_parts_f+0x3a>
    139a:	92 30       	cpi	r25, 0x02	; 2
    139c:	31 f4       	brne	.+12     	; 0x13aa <__fpcmp_parts_f+0x42>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	b9 f1       	breq	.+110    	; 0x1410 <__fpcmp_parts_f+0xa8>
    13a2:	81 81       	ldd	r24, Z+1	; 0x01
    13a4:	88 23       	and	r24, r24
    13a6:	89 f1       	breq	.+98     	; 0x140a <__fpcmp_parts_f+0xa2>
    13a8:	2d c0       	rjmp	.+90     	; 0x1404 <__fpcmp_parts_f+0x9c>
    13aa:	11 96       	adiw	r26, 0x01	; 1
    13ac:	1c 91       	ld	r17, X
    13ae:	11 97       	sbiw	r26, 0x01	; 1
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	f1 f0       	breq	.+60     	; 0x13f0 <__fpcmp_parts_f+0x88>
    13b4:	81 81       	ldd	r24, Z+1	; 0x01
    13b6:	18 17       	cp	r17, r24
    13b8:	d9 f4       	brne	.+54     	; 0x13f0 <__fpcmp_parts_f+0x88>
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	2d 91       	ld	r18, X+
    13be:	3c 91       	ld	r19, X
    13c0:	13 97       	sbiw	r26, 0x03	; 3
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	82 17       	cp	r24, r18
    13c8:	93 07       	cpc	r25, r19
    13ca:	94 f0       	brlt	.+36     	; 0x13f0 <__fpcmp_parts_f+0x88>
    13cc:	28 17       	cp	r18, r24
    13ce:	39 07       	cpc	r19, r25
    13d0:	bc f0       	brlt	.+46     	; 0x1400 <__fpcmp_parts_f+0x98>
    13d2:	14 96       	adiw	r26, 0x04	; 4
    13d4:	8d 91       	ld	r24, X+
    13d6:	9d 91       	ld	r25, X+
    13d8:	0d 90       	ld	r0, X+
    13da:	bc 91       	ld	r27, X
    13dc:	a0 2d       	mov	r26, r0
    13de:	24 81       	ldd	r18, Z+4	; 0x04
    13e0:	35 81       	ldd	r19, Z+5	; 0x05
    13e2:	46 81       	ldd	r20, Z+6	; 0x06
    13e4:	57 81       	ldd	r21, Z+7	; 0x07
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	4a 07       	cpc	r20, r26
    13ec:	5b 07       	cpc	r21, r27
    13ee:	18 f4       	brcc	.+6      	; 0x13f6 <__fpcmp_parts_f+0x8e>
    13f0:	11 23       	and	r17, r17
    13f2:	41 f0       	breq	.+16     	; 0x1404 <__fpcmp_parts_f+0x9c>
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <__fpcmp_parts_f+0xa2>
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	a4 07       	cpc	r26, r20
    13fc:	b5 07       	cpc	r27, r21
    13fe:	40 f4       	brcc	.+16     	; 0x1410 <__fpcmp_parts_f+0xa8>
    1400:	11 23       	and	r17, r17
    1402:	19 f0       	breq	.+6      	; 0x140a <__fpcmp_parts_f+0xa2>
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <__fpcmp_parts_f+0xac>
    140a:	6f ef       	ldi	r22, 0xFF	; 255
    140c:	7f ef       	ldi	r23, 0xFF	; 255
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <__fpcmp_parts_f+0xac>
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	cb 01       	movw	r24, r22
    1416:	1f 91       	pop	r17
    1418:	08 95       	ret

0000141a <__divmodhi4>:
    141a:	97 fb       	bst	r25, 7
    141c:	09 2e       	mov	r0, r25
    141e:	07 26       	eor	r0, r23
    1420:	0a d0       	rcall	.+20     	; 0x1436 <__divmodhi4_neg1>
    1422:	77 fd       	sbrc	r23, 7
    1424:	04 d0       	rcall	.+8      	; 0x142e <__divmodhi4_neg2>
    1426:	0c d0       	rcall	.+24     	; 0x1440 <__udivmodhi4>
    1428:	06 d0       	rcall	.+12     	; 0x1436 <__divmodhi4_neg1>
    142a:	00 20       	and	r0, r0
    142c:	1a f4       	brpl	.+6      	; 0x1434 <__divmodhi4_exit>

0000142e <__divmodhi4_neg2>:
    142e:	70 95       	com	r23
    1430:	61 95       	neg	r22
    1432:	7f 4f       	sbci	r23, 0xFF	; 255

00001434 <__divmodhi4_exit>:
    1434:	08 95       	ret

00001436 <__divmodhi4_neg1>:
    1436:	f6 f7       	brtc	.-4      	; 0x1434 <__divmodhi4_exit>
    1438:	90 95       	com	r25
    143a:	81 95       	neg	r24
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__udivmodhi4>:
    1440:	aa 1b       	sub	r26, r26
    1442:	bb 1b       	sub	r27, r27
    1444:	51 e1       	ldi	r21, 0x11	; 17
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <__udivmodhi4_ep>

00001448 <__udivmodhi4_loop>:
    1448:	aa 1f       	adc	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	a6 17       	cp	r26, r22
    144e:	b7 07       	cpc	r27, r23
    1450:	10 f0       	brcs	.+4      	; 0x1456 <__udivmodhi4_ep>
    1452:	a6 1b       	sub	r26, r22
    1454:	b7 0b       	sbc	r27, r23

00001456 <__udivmodhi4_ep>:
    1456:	88 1f       	adc	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	5a 95       	dec	r21
    145c:	a9 f7       	brne	.-22     	; 0x1448 <__udivmodhi4_loop>
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	08 95       	ret

00001468 <__prologue_saves__>:
    1468:	2f 92       	push	r2
    146a:	3f 92       	push	r3
    146c:	4f 92       	push	r4
    146e:	5f 92       	push	r5
    1470:	6f 92       	push	r6
    1472:	7f 92       	push	r7
    1474:	8f 92       	push	r8
    1476:	9f 92       	push	r9
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	ca 1b       	sub	r28, r26
    1492:	db 0b       	sbc	r29, r27
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	09 94       	ijmp

000014a0 <__epilogue_restores__>:
    14a0:	2a 88       	ldd	r2, Y+18	; 0x12
    14a2:	39 88       	ldd	r3, Y+17	; 0x11
    14a4:	48 88       	ldd	r4, Y+16	; 0x10
    14a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    14aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    14b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    14b2:	b9 84       	ldd	r11, Y+9	; 0x09
    14b4:	c8 84       	ldd	r12, Y+8	; 0x08
    14b6:	df 80       	ldd	r13, Y+7	; 0x07
    14b8:	ee 80       	ldd	r14, Y+6	; 0x06
    14ba:	fd 80       	ldd	r15, Y+5	; 0x05
    14bc:	0c 81       	ldd	r16, Y+4	; 0x04
    14be:	1b 81       	ldd	r17, Y+3	; 0x03
    14c0:	aa 81       	ldd	r26, Y+2	; 0x02
    14c2:	b9 81       	ldd	r27, Y+1	; 0x01
    14c4:	ce 0f       	add	r28, r30
    14c6:	d1 1d       	adc	r29, r1
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	ed 01       	movw	r28, r26
    14d4:	08 95       	ret

000014d6 <_exit>:
    14d6:	f8 94       	cli

000014d8 <__stop_program>:
    14d8:	ff cf       	rjmp	.-2      	; 0x14d8 <__stop_program>
