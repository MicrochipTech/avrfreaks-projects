
test.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  00800074  0000021e  00000292  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009d  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000044b  00000000  00000000  0000038f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024f  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  00000a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011d  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000166  00000000  00000000  00000fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	9b c0       	rjmp	.+310    	; 0x13e <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e0       	ldi	r30, 0x0A	; 10
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a4 37       	cpi	r26, 0x74	; 116
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a4 e7       	ldi	r26, 0x74	; 116
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 37       	cpi	r26, 0x78	; 120
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4e d0       	rcall	.+156    	; 0xee <main>
  52:	d9 c0       	rjmp	.+434    	; 0x206 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_i2c>:
#include "uart.h"
#include "i2csniff.h"


void init_i2c( void )
{
  56:	c2 9a       	sbi	0x18, 2	; 24
  SCL = 1;
  SCL_DDR = 1;				// force busy waiting
  58:	ba 9a       	sbi	0x17, 2	; 23
  SDA = 1;
  5a:	c0 9a       	sbi	0x18, 0	; 24
  SDA_DDR = 0;				// listen only, no ACK, no data
  5c:	b8 98       	cbi	0x17, 0	; 23
  USICR = 1<<USIWM1^1<<USIWM0;		// I2C, no counter
  5e:	80 e3       	ldi	r24, 0x30	; 48
  60:	8d b9       	out	0x0d, r24	; 13
}
  62:	08 95       	ret

00000064 <putnibble>:


void putnibble( u8 j )
{
  64:	8f 70       	andi	r24, 0x0F	; 15
  j &= 0x0F;
  if( j > 9 )
  66:	8a 30       	cpi	r24, 0x0A	; 10
  68:	08 f0       	brcs	.+2      	; 0x6c <putnibble+0x8>
    j += 'A' - '0' - 10;
  6a:	89 5f       	subi	r24, 0xF9	; 249
  uputchar( j + '0' );
  6c:	80 5d       	subi	r24, 0xD0	; 208
  6e:	a4 d0       	rcall	.+328    	; 0x1b8 <uputchar>
}
  70:	08 95       	ret

00000072 <i2c_sniff>:


void i2c_sniff( void )
{
  72:	af 92       	push	r10
  74:	bf 92       	push	r11
  76:	cf 92       	push	r12
  78:	df 92       	push	r13
  7a:	ef 92       	push	r14
  7c:	ff 92       	push	r15
  7e:	0f 93       	push	r16
  80:	1f 93       	push	r17
  82:	00 e0       	ldi	r16, 0x00	; 0
  u8 i;

  for(;;){
    i = USISR;
    if( i & 1<<USIPF ){			// STOP received
      USICR = 1<<USIWM1^1<<USIWM0;	// I2C, no counter
  84:	50 e3       	ldi	r21, 0x30	; 48
  86:	a5 2e       	mov	r10, r21
      USISR = 1<<USIPF;			// clear USISIF
  88:	40 e2       	ldi	r20, 0x20	; 32
  8a:	b4 2e       	mov	r11, r20
      continue;
    }

    if( i & 1<<USISIF ){		// START received
      while( SCL_PIN );			// wait until SCL = low
      USICR = 1<<USIWM1^1<<USIWM0^1<<USICS1^1<<USICS0;
  8c:	3c e3       	ldi	r19, 0x3C	; 60
  8e:	c3 2e       	mov	r12, r19
					// I2C, get data on neg. edge
      USISR = 1<<USISIF^1<<USIOIF^(0x0F & -16);
  90:	20 ec       	ldi	r18, 0xC0	; 192
  92:	d2 2e       	mov	r13, r18
      if( ++get_ack & 1 ){		// toggle read data / ACK
	USISR = 1<<USIOIF^(0x0F & -2);	// count 2 edges
	putnibble( i >> 4 );
	putnibble( i );
      }else{
	USISR = 1<<USIOIF^(0x0F & -16);	// count 16 edges
  94:	90 e4       	ldi	r25, 0x40	; 64
  96:	e9 2e       	mov	r14, r25
    }

    if( i & 1<<USIOIF ){		// Data / ACK received
      i = USIDR;
      if( ++get_ack & 1 ){		// toggle read data / ACK
	USISR = 1<<USIOIF^(0x0F & -2);	// count 2 edges
  98:	8e e4       	ldi	r24, 0x4E	; 78
  9a:	f8 2e       	mov	r15, r24
{
  u8 get_ack = 0;
  u8 i;

  for(;;){
    i = USISR;
  9c:	8e b1       	in	r24, 0x0e	; 14
    if( i & 1<<USIPF ){			// STOP received
  9e:	85 ff       	sbrs	r24, 5
  a0:	06 c0       	rjmp	.+12     	; 0xae <i2c_sniff+0x3c>
      USICR = 1<<USIWM1^1<<USIWM0;	// I2C, no counter
  a2:	ad b8       	out	0x0d, r10	; 13
      USISR = 1<<USIPF;			// clear USISIF
  a4:	be b8       	out	0x0e, r11	; 14
      uputs( STOP LINEFEED );
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	96 d0       	rcall	.+300    	; 0x1d8 <uputs_>
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <i2c_sniff+0x2a>
      continue;
    }

    if( i & 1<<USISIF ){		// START received
  ae:	87 ff       	sbrs	r24, 7
  b0:	08 c0       	rjmp	.+16     	; 0xc2 <i2c_sniff+0x50>
      while( SCL_PIN );			// wait until SCL = low
  b2:	b2 99       	sbic	0x16, 2	; 22
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <i2c_sniff+0x40>
      USICR = 1<<USIWM1^1<<USIWM0^1<<USICS1^1<<USICS0;
  b6:	cd b8       	out	0x0d, r12	; 13
					// I2C, get data on neg. edge
      USISR = 1<<USISIF^1<<USIOIF^(0x0F & -16);
  b8:	de b8       	out	0x0e, r13	; 14
					// clear USISIF, count 16 edges
      get_ack = 0;
      uputchar( START );
  ba:	83 e7       	ldi	r24, 0x73	; 115
  bc:	7d d0       	rcall	.+250    	; 0x1b8 <uputchar>
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	ed cf       	rjmp	.-38     	; 0x9c <i2c_sniff+0x2a>
      continue;
    }

    if( i & 1<<USIOIF ){		// Data / ACK received
  c2:	86 ff       	sbrs	r24, 6
  c4:	eb cf       	rjmp	.-42     	; 0x9c <i2c_sniff+0x2a>
      i = USIDR;
  c6:	1f b1       	in	r17, 0x0f	; 15
      if( ++get_ack & 1 ){		// toggle read data / ACK
  c8:	0f 5f       	subi	r16, 0xFF	; 255
  ca:	00 ff       	sbrs	r16, 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <i2c_sniff+0x6c>
	USISR = 1<<USIOIF^(0x0F & -2);	// count 2 edges
  ce:	fe b8       	out	0x0e, r15	; 14
	putnibble( i >> 4 );
  d0:	81 2f       	mov	r24, r17
  d2:	82 95       	swap	r24
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	c6 df       	rcall	.-116    	; 0x64 <putnibble>
	putnibble( i );
  d8:	81 2f       	mov	r24, r17
  da:	c4 df       	rcall	.-120    	; 0x64 <putnibble>
  dc:	df cf       	rjmp	.-66     	; 0x9c <i2c_sniff+0x2a>
      }else{
	USISR = 1<<USIOIF^(0x0F & -16);	// count 16 edges
  de:	ee b8       	out	0x0e, r14	; 14
	uputchar( i & 1 ? NACK : ACK );
  e0:	10 fd       	sbrc	r17, 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <i2c_sniff+0x76>
  e4:	81 e6       	ldi	r24, 0x61	; 97
  e6:	01 c0       	rjmp	.+2      	; 0xea <i2c_sniff+0x78>
  e8:	8e e6       	ldi	r24, 0x6E	; 110
  ea:	66 d0       	rcall	.+204    	; 0x1b8 <uputchar>
  ec:	d7 cf       	rjmp	.-82     	; 0x9c <i2c_sniff+0x2a>

000000ee <main>:
#include "uart.h"
#include "i2csniff.h"


int main( void )
{
  ee:	80 e4       	ldi	r24, 0x40	; 64
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	07 d0       	rcall	.+14     	; 0x102 <init_uart>
  init_uart( XTAL / BAUD );
  init_i2c();
  f4:	b0 df       	rcall	.-160    	; 0x56 <init_i2c>
  sei();
  f6:	78 94       	sei
  uputs( "I2C-Sniffer:" LINEFEED );
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	6d d0       	rcall	.+218    	; 0x1d8 <uputs_>
  i2c_sniff();
  fe:	b9 df       	rcall	.-142    	; 0x72 <i2c_sniff>
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x12>

00000102 <init_uart>:
static u8 tx_state;
static u8 tx_data;
					// count up and wrap around

void init_uart( u16 bauddiv )
{
 102:	9c 01       	movw	r18, r24
 104:	41 ea       	ldi	r20, 0xA1	; 161
 106:	03 c0       	rjmp	.+6      	; 0x10e <init_uart+0xc>
  u8 prescaler = 1<<CTC1^1<<COM1A1^1<<CS10;

  while( bauddiv & 0xFF00 ){		// until compare value <= 8bit
    prescaler++;
 108:	4f 5f       	subi	r20, 0xFF	; 255
    bauddiv >>= 1;
 10a:	36 95       	lsr	r19
 10c:	27 95       	ror	r18

void init_uart( u16 bauddiv )
{
  u8 prescaler = 1<<CTC1^1<<COM1A1^1<<CS10;

  while( bauddiv & 0xFF00 ){		// until compare value <= 8bit
 10e:	c9 01       	movw	r24, r18
 110:	80 70       	andi	r24, 0x00	; 0
 112:	89 2b       	or	r24, r25
 114:	c9 f7       	brne	.-14     	; 0x108 <init_uart+0x6>
    prescaler++;
    bauddiv >>= 1;
  }
  OCR1A = 0;
 116:	1e bc       	out	0x2e, r1	; 46
  OCR1C = bauddiv-1;
 118:	82 2f       	mov	r24, r18
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	8d bd       	out	0x2d, r24	; 45
  TCCR1 = prescaler;
 11e:	40 bf       	out	0x30, r20	; 48
  TX_OUT = TX_HIGH;
 120:	80 b7       	in	r24, 0x30	; 48
 122:	80 61       	ori	r24, 0x10	; 16
 124:	80 bf       	out	0x30, r24	; 48
  GTCCR = 1<<FOC1A;			// output high
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	8c bd       	out	0x2c, r24	; 44
  STX_DDR = 1;				// output enable
 12a:	b9 9a       	sbi	0x17, 1	; 23
  TIMSK = 1<<OCIE1A;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	89 bf       	out	0x39, r24	; 57
  tx_state = 0;
 130:	10 92 76 01 	sts	0x0176, r1
  tx_in = 0;
 134:	10 92 74 01 	sts	0x0174, r1
  tx_out = 0;
 138:	10 92 75 01 	sts	0x0175, r1
}
 13c:	08 95       	ret

0000013e <__vector_3>:


ISR( TIM1_COMPA_vect )
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
  if( tx_state ){
 150:	80 91 76 01 	lds	r24, 0x0176
 154:	88 23       	and	r24, r24
 156:	89 f0       	breq	.+34     	; 0x17a <__vector_3+0x3c>
    tx_state--;
 158:	81 50       	subi	r24, 0x01	; 1
 15a:	80 93 76 01 	sts	0x0176, r24
    TX_OUT = TX_HIGH;
 15e:	80 b7       	in	r24, 0x30	; 48
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 bf       	out	0x30, r24	; 48
    if( tx_data & 1 )			// lsb first
 164:	90 91 77 01 	lds	r25, 0x0177
 168:	90 ff       	sbrs	r25, 0
 16a:	03 c0       	rjmp	.+6      	; 0x172 <__vector_3+0x34>
      TX_OUT = TX_LOW;
 16c:	80 b7       	in	r24, 0x30	; 48
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 bf       	out	0x30, r24	; 48
    tx_data >>= 1;
 172:	96 95       	lsr	r25
 174:	90 93 77 01 	sts	0x0177, r25
 178:	16 c0       	rjmp	.+44     	; 0x1a6 <__vector_3+0x68>
    return;
  }
  if( tx_in != tx_out ){		// next byte to sent
 17a:	90 91 75 01 	lds	r25, 0x0175
 17e:	80 91 74 01 	lds	r24, 0x0174
 182:	89 17       	cp	r24, r25
 184:	81 f0       	breq	.+32     	; 0x1a6 <__vector_3+0x68>
    tx_data = tx_buff[tx_out];
 186:	e9 2f       	mov	r30, r25
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ec 58       	subi	r30, 0x8C	; 140
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	80 81       	ld	r24, Z
 190:	80 93 77 01 	sts	0x0177, r24
    ROLLOVER( tx_out, TX0_SIZE );
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	90 93 75 01 	sts	0x0175, r25
    tx_state = 9;
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	80 93 76 01 	sts	0x0176, r24
    TX_OUT = TX_LOW;			// start bit
 1a0:	80 b7       	in	r24, 0x30	; 48
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	80 bf       	out	0x30, r24	; 48
  }
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <uputchar>:


void uputchar( u8 c )
{
 1b8:	e0 91 74 01 	lds	r30, 0x0174
  u8 i = tx_in;

  ROLLOVER( i, TX0_SIZE );
 1bc:	9e 2f       	mov	r25, r30
 1be:	9f 5f       	subi	r25, 0xFF	; 255
  tx_buff[tx_in] = ~c;			// complement for stop bit after data
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ec 58       	subi	r30, 0x8C	; 140
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 95       	com	r24
 1c8:	80 83       	st	Z, r24
  while( i == vu8(tx_out));		// until at least one byte free
 1ca:	80 91 75 01 	lds	r24, 0x0175
 1ce:	98 17       	cp	r25, r24
 1d0:	e1 f3       	breq	.-8      	; 0x1ca <uputchar+0x12>
					// tx_out modified by interrupt !
  tx_in = i;
 1d2:	90 93 74 01 	sts	0x0174, r25
}
 1d6:	08 95       	ret

000001d8 <uputs_>:


void uputs_( u8 *s )
{
 1d8:	dc 01       	movw	r26, r24
 1da:	e0 91 74 01 	lds	r30, 0x0174
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <uputs_+0x22>
  while( *s )
 1e0:	9e 2f       	mov	r25, r30
 1e2:	9f 5f       	subi	r25, 0xFF	; 255
void uputchar( u8 c )
{
  u8 i = tx_in;

  ROLLOVER( i, TX0_SIZE );
  tx_buff[tx_in] = ~c;			// complement for stop bit after data
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 58       	subi	r30, 0x8C	; 140
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 95       	com	r24
 1ec:	80 83       	st	Z, r24
  while( i == vu8(tx_out));		// until at least one byte free
 1ee:	80 91 75 01 	lds	r24, 0x0175
 1f2:	98 17       	cp	r25, r24
 1f4:	e1 f3       	breq	.-8      	; 0x1ee <uputs_+0x16>


void uputs_( u8 *s )
{
  while( *s )
    uputchar( *s++ );
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	e9 2f       	mov	r30, r25
}


void uputs_( u8 *s )
{
  while( *s )
 1fa:	8c 91       	ld	r24, X
 1fc:	88 23       	and	r24, r24
 1fe:	81 f7       	brne	.-32     	; 0x1e0 <uputs_+0x8>
 200:	e0 93 74 01 	sts	0x0174, r30
    uputchar( *s++ );
}
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
