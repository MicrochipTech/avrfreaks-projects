
V18test_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000204  00800060  000008bc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ae  00800264  00800264  00000b54  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000dfb  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000413  00000000  00000000  000022b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000480  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000298  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000480  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fd6  00000000  00000000  0000325c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  00004232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_12>
  34:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 31       	cpi	r26, 0x12	; 18
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 03 	call	0x7be	; 0x7be <main>
  8a:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <response_io_status.constprop.1>:
	}
	return frameHasError;
}


static int response_io_status(sft_t *sft, uint8_t *stab,
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
								uint8_t *response, int offset) {
	uint8_t sBit = sft->address;
  9e:	dc 01       	movw	r26, r24
  a0:	16 96       	adiw	r26, 0x06	; 6
  a2:	ed 91       	ld	r30, X+
  a4:	fc 91       	ld	r31, X
  a6:	17 97       	sbiw	r26, 0x07	; 7
	uint8_t startByte = (uint8_t)(sBit / 8);
	uint8_t nOBytes = (uint8_t)(sft->nb / 8) + ((sft->nb % 8)?1:0);
  a8:	18 96       	adiw	r26, 0x08	; 8
  aa:	8d 91       	ld	r24, X+
  ac:	9c 91       	ld	r25, X
  ae:	19 97       	sbiw	r26, 0x09	; 9
	uint8_t bytesToThread = nOBytes + ((sft->address % 8)?1:0);
  b0:	af 01       	movw	r20, r30
  b2:	47 70       	andi	r20, 0x07	; 7
  b4:	55 27       	eor	r21, r21

static int response_io_status(sft_t *sft, uint8_t *stab,
								uint8_t *response, int offset) {
	uint8_t sBit = sft->address;
	uint8_t startByte = (uint8_t)(sBit / 8);
	uint8_t nOBytes = (uint8_t)(sft->nb / 8) + ((sft->nb % 8)?1:0);
  b6:	dc 01       	movw	r26, r24
  b8:	a7 70       	andi	r26, 0x07	; 7
  ba:	bb 27       	eor	r27, r27
  bc:	31 e0       	ldi	r19, 0x01	; 1
  be:	ab 2b       	or	r26, r27
  c0:	09 f4       	brne	.+2      	; 0xc4 <response_io_status.constprop.1+0x32>
  c2:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t bytesToThread = nOBytes + ((sft->address % 8)?1:0);
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	41 15       	cp	r20, r1
  c8:	51 05       	cpc	r21, r1
  ca:	09 f4       	brne	.+2      	; 0xce <response_io_status.constprop.1+0x3c>
  cc:	20 e0       	ldi	r18, 0x00	; 0

static int response_io_status(sft_t *sft, uint8_t *stab,
								uint8_t *response, int offset) {
	uint8_t sBit = sft->address;
	uint8_t startByte = (uint8_t)(sBit / 8);
	uint8_t nOBytes = (uint8_t)(sft->nb / 8) + ((sft->nb % 8)?1:0);
  ce:	23 0f       	add	r18, r19
  d0:	97 fd       	sbrc	r25, 7
  d2:	07 96       	adiw	r24, 0x07	; 7
  d4:	33 e0       	ldi	r19, 0x03	; 3
  d6:	95 95       	asr	r25
  d8:	87 95       	ror	r24
  da:	3a 95       	dec	r19
  dc:	e1 f7       	brne	.-8      	; 0xd6 <response_io_status.constprop.1+0x44>
	uint8_t bytesToThread = nOBytes + ((sft->address % 8)?1:0);
  de:	82 0f       	add	r24, r18


static int response_io_status(sft_t *sft, uint8_t *stab,
								uint8_t *response, int offset) {
	uint8_t sBit = sft->address;
	uint8_t startByte = (uint8_t)(sBit / 8);
  e0:	e6 95       	lsr	r30
  e2:	e6 95       	lsr	r30
  e4:	e6 95       	lsr	r30
	}
	return frameHasError;
}


static int response_io_status(sft_t *sft, uint8_t *stab,
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e7 57       	subi	r30, 0x77	; 119
  ea:	fd 4f       	sbci	r31, 0xFD	; 253
  ec:	6d 5f       	subi	r22, 0xFD	; 253
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	db 01       	movw	r26, r22
		destByte = stab[startByte + ic];
		// shift it to push out unnecessary bits
		// and place wanted Bits starting from the Low side of the Byte
		destByte = destByte >> (sBit % 8);
		// now we have 8 - (sBit % 8) bits to fill from the next byte
		intermByte = stab[startByte + ic + 1] << (8 - (sBit % 8));
  f2:	c8 e0       	ldi	r28, 0x08	; 8
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	c4 1b       	sub	r28, r20
  f8:	d5 0b       	sbc	r29, r21
  fa:	10 c0       	rjmp	.+32     	; 0x11c <response_io_status.constprop.1+0x8a>
	uint8_t ic;
	uint8_t destByte = 0, intermByte = 0;

	for (ic = 0; ic < bytesToThread; ic++){
		// getting the first byte where we have to get Bit's from
		destByte = stab[startByte + ic];
  fc:	e1 90       	ld	r14, Z+
		// shift it to push out unnecessary bits
		// and place wanted Bits starting from the Low side of the Byte
		destByte = destByte >> (sBit % 8);
  fe:	f1 2c       	mov	r15, r1
 100:	04 2e       	mov	r0, r20
 102:	02 c0       	rjmp	.+4      	; 0x108 <response_io_status.constprop.1+0x76>
 104:	f5 94       	asr	r15
 106:	e7 94       	ror	r14
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <response_io_status.constprop.1+0x72>
		// now we have 8 - (sBit % 8) bits to fill from the next byte
		intermByte = stab[startByte + ic + 1] << (8 - (sBit % 8));
 10c:	00 81       	ld	r16, Z
 10e:	0c 2e       	mov	r0, r28
 110:	01 c0       	rjmp	.+2      	; 0x114 <response_io_status.constprop.1+0x82>
 112:	00 0f       	add	r16, r16
 114:	0a 94       	dec	r0
 116:	ea f7       	brpl	.-6      	; 0x112 <response_io_status.constprop.1+0x80>

		// now we have missing Bits left aligned in intermByte
		// stick them together
		destByte |= intermByte;
 118:	0e 29       	or	r16, r14
		response[offset++] = destByte;
 11a:	0d 93       	st	X+, r16
	uint8_t nOBytes = (uint8_t)(sft->nb / 8) + ((sft->nb % 8)?1:0);
	uint8_t bytesToThread = nOBytes + ((sft->address % 8)?1:0);
	uint8_t ic;
	uint8_t destByte = 0, intermByte = 0;

	for (ic = 0; ic < bytesToThread; ic++){
 11c:	9a 2f       	mov	r25, r26
 11e:	96 1b       	sub	r25, r22
 120:	98 17       	cp	r25, r24
 122:	60 f3       	brcs	.-40     	; 0xfc <response_io_status.constprop.1+0x6a>
	}
	return frameHasError;
}


static int response_io_status(sft_t *sft, uint8_t *stab,
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
		// stick them together
		destByte |= intermByte;
		response[offset++] = destByte;
	}

	return offset;
 128:	2d 5f       	subi	r18, 0xFD	; 253
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
}
 12c:	c9 01       	movw	r24, r18
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	08 95       	ret

0000013c <check_crc16>:

	return (crc_hi << 8 | crc_lo);
}

/* If CRC is correct returns msg_length else returns INVALID_CRC */
static int check_crc16(uint8_t *msg, const int msg_length) {
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	9b 01       	movw	r18, r22
 144:	ab 01       	movw	r20, r22
 146:	fc 01       	movw	r30, r24
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

/* Fast CRC */
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length) {
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
 148:	1f ef       	ldi	r17, 0xFF	; 255
		0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

/* Fast CRC */
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length) {
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	0b c0       	rjmp	.+22     	; 0x164 <check_crc16+0x28>
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
	unsigned int i; // will index into CRC lookup

	//pass through message buffer
	while (buffer_length--) {
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
 14e:	a1 91       	ld	r26, Z+
 150:	ac 27       	eor	r26, r28
 152:	b0 e0       	ldi	r27, 0x00	; 0
		crc_hi = crc_lo ^ table_crc_hi[i];
 154:	ed 01       	movw	r28, r26
 156:	cd 59       	subi	r28, 0x9D	; 157
 158:	df 4f       	sbci	r29, 0xFF	; 255
 15a:	c8 81       	ld	r28, Y
 15c:	c1 27       	eor	r28, r17
		crc_lo = table_crc_lo[i];
 15e:	ad 59       	subi	r26, 0x9D	; 157
 160:	be 4f       	sbci	r27, 0xFE	; 254
 162:	1c 91       	ld	r17, X
 164:	41 50       	subi	r20, 0x01	; 1
 166:	51 09       	sbc	r21, r1
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
	unsigned int i; // will index into CRC lookup

	//pass through message buffer
	while (buffer_length--) {
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	51 05       	cpc	r21, r1
 16c:	81 f7       	brne	.-32     	; 0x14e <check_crc16+0x12>
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
		crc_hi = crc_lo ^ table_crc_hi[i];
		crc_lo = table_crc_lo[i];
	}

	return (crc_hi << 8 | crc_lo);
 16e:	5c 2f       	mov	r21, r28
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	fa 01       	movw	r30, r20
 174:	e1 2b       	or	r30, r17
	int ret;
	uint16_t crc_calc;
	uint16_t crc_received;

	crc_calc = crc16(msg, msg_length - 2);
	crc_received = (msg[msg_length - 2] << 8) | msg[msg_length - 1];
 176:	28 0f       	add	r18, r24
 178:	39 1f       	adc	r19, r25
 17a:	d9 01       	movw	r26, r18
 17c:	12 97       	sbiw	r26, 0x02	; 2
 17e:	5c 91       	ld	r21, X
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	d9 01       	movw	r26, r18
 184:	11 97       	sbiw	r26, 0x01	; 1
 186:	8c 91       	ld	r24, X
 188:	9a 01       	movw	r18, r20
 18a:	28 2b       	or	r18, r24
 18c:	c9 01       	movw	r24, r18

	// Check CRC of msg
	if (crc_calc == crc_received) {
 18e:	e8 17       	cp	r30, r24
 190:	f9 07       	cpc	r31, r25
 192:	19 f0       	breq	.+6      	; 0x19a <check_crc16+0x5e>
		ret = msg_length;
	} else {
		ret = INVALID_CRC;
 194:	2f ee       	ldi	r18, 0xEF	; 239
 196:	3f ef       	ldi	r19, 0xFF	; 255
 198:	01 c0       	rjmp	.+2      	; 0x19c <check_crc16+0x60>
	crc_calc = crc16(msg, msg_length - 2);
	crc_received = (msg[msg_length - 2] << 8) | msg[msg_length - 1];

	// Check CRC of msg
	if (crc_calc == crc_received) {
		ret = msg_length;
 19a:	9b 01       	movw	r18, r22
	} else {
		ret = INVALID_CRC;
	}
	return ret;
}
 19c:	c9 01       	movw	r24, r18
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
 Function: UART Receive Complete interrupt
 Purpose:  called when the UART has received a character
 **************************************************************************/
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	uint8_t data;

//	Relay_Port ^= (1<<Relay_Mag2);

	// read UART status register and UART data register
	data = UART0_DATA;
 1b8:	8c b1       	in	r24, 0x0c	; 12
	
	// Visualize data on LED
	
	// bitTics is watched by another ISR to see a possible modbus frame timeout
	// each time we got a new byte we reset bitTics
	uart0_status.bitTics = 0;
 1ba:	10 92 66 02 	sts	0x0266, r1
 1be:	10 92 65 02 	sts	0x0265, r1

	// asking the modbus frame state machine where we are
	// and increment state if needed
	if (uart0_status.status == RS_Wait) {
 1c2:	90 91 64 02 	lds	r25, 0x0264
 1c6:	91 11       	cpse	r25, r1
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <__vector_11+0x2a>
		uart0_status.status = RS_Receiving;		
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	90 93 64 02 	sts	0x0264, r25
	}

	// only if modbus frame state machine is on receiving
	// we store the byte to the frame
	if (uart0_status.status == RS_Receiving) {
 1d0:	90 91 64 02 	lds	r25, 0x0264
 1d4:	91 30       	cpi	r25, 0x01	; 1
 1d6:	91 f4       	brne	.+36     	; 0x1fc <__vector_11+0x56>
		 
		UART_RxBuf[UART_RxHead] = data;
 1d8:	e0 91 8d 02 	lds	r30, 0x028D
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ee 50       	subi	r30, 0x0E	; 14
 1e0:	fd 4f       	sbci	r31, 0xFD	; 253
 1e2:	80 83       	st	Z, r24
		UART_RxHead++;		
 1e4:	80 91 8d 02 	lds	r24, 0x028D
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 8d 02 	sts	0x028D, r24
		if (UART_RxHead >= UART_RX_BUFFER_MASK) {
 1ee:	80 91 8d 02 	lds	r24, 0x028D
 1f2:	8f 31       	cpi	r24, 0x1F	; 31
 1f4:	18 f0       	brcs	.+6      	; 0x1fc <__vector_11+0x56>
			UART_RxHead = UART_RX_BUFFER_MASK;
 1f6:	8f e1       	ldi	r24, 0x1F	; 31
 1f8:	80 93 8d 02 	sts	0x028D, r24
		}
	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT )
/*************************************************************************
 Function: USART Rx Complete interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	unsigned char tmptail;

//	Relay_Port ^= (1<<Relay_Mag2);

	if (UART_TxHead != UART_TxTail) {
 220:	90 91 68 02 	lds	r25, 0x0268
 224:	80 91 67 02 	lds	r24, 0x0267
 228:	98 17       	cp	r25, r24
 22a:	71 f0       	breq	.+28     	; 0x248 <__vector_12+0x3a>
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 22c:	e0 91 67 02 	lds	r30, 0x0267
 230:	ef 5f       	subi	r30, 0xFF	; 255
 232:	ef 71       	andi	r30, 0x1F	; 31
		UART_TxTail = tmptail;
 234:	e0 93 67 02 	sts	0x0267, r30
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e7 59       	subi	r30, 0x97	; 151
 23c:	fd 4f       	sbci	r31, 0xFD	; 253
 23e:	80 81       	ld	r24, Z
 240:	8c b9       	out	0x0c, r24	; 12
		RS485_Port &= ~((1<<RS485_LTx));//Led Tx ON
 242:	94 98       	cbi	0x12, 4	; 18
		RS485_Port |= (1<<RS485_LRx);//Led Rx OFF
 244:	93 9a       	sbi	0x12, 3	; 18
 246:	03 c0       	rjmp	.+6      	; 0x24e <__vector_12+0x40>
	} else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~((1<<UART0_UDRIE));
 248:	55 98       	cbi	0x0a, 5	; 10
		RS485_Port |= (1<<RS485_LTx);//Led Tx OFF
 24a:	94 9a       	sbi	0x12, 4	; 18
		RS485_Port &= ~((1 << RS485_Send)); //Clear PIN DE+RE SN75176 for enable RX from serial line
 24c:	92 98       	cbi	0x12, 2	; 18
	}
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_13>:
/*************************************************************************
 Function: UART Data Register Empty interrupt
 Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/

ISR(USART0_TX_vect) {
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24

	if (is485) {
 26c:	80 91 62 00 	lds	r24, 0x0062
 270:	81 11       	cpse	r24, r1
		RS485_Port |= (1<<RS485_Send); //Enable to TX SN75176
 272:	92 9a       	sbi	0x12, 2	; 18
	}
}
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <uart_init>:
 Purpose:  initialize UART and set baudrate
 Input:    baudrate using macro UART_BAUD_SELECT()
 Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate) {
	UART_TxHead = 0;
 280:	10 92 68 02 	sts	0x0268, r1
	UART_TxTail = 0;
 284:	10 92 67 02 	sts	0x0267, r1
	UART_RxHead = 0;
 288:	10 92 8d 02 	sts	0x028D, r1
	/* enable UART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = ((1<<RXCIE)|((1<<RXEN)|((1<<TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if ( baudrate & 0x8000 )
 28c:	97 ff       	sbrs	r25, 7
 28e:	03 c0       	rjmp	.+6      	; 0x296 <uart_init+0x16>
	{
		UART0_STATUS = (1<<U2X); //Enable 2x speed
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 294:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRL = (unsigned char) baudrate;
 296:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char)(baudrate>>8);
 298:	90 bd       	out	0x20, r25	; 32
	
	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = ((1<<RXCIE)|(1<<RXEN)|(1<<TXEN)); //UCSZ2 will be cleared, so it combined with UCSZ1:0 sets the caracter size to 8.
 29a:	88 e9       	ldi	r24, 0x98	; 152
 29c:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
// #ifdef URSEL ... Original command
	//Set data frame format: asynchronous mode,no parity, 1 stop bit, 8 bit size
	UCSRC =((1<<URSEL)|(3<<UCSZ0));//Remaining bits will be clear
 29e:	86 e8       	ldi	r24, 0x86	; 134
 2a0:	80 bd       	out	0x20, r24	; 32
 2a2:	08 95       	ret

000002a4 <rs485_init>:
	}
}
/*************************************************************************/

void rs485_init(unsigned int baudrate) {
	is485 = TRUE;
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	20 93 62 00 	sts	0x0062, r18
	RS485_Port &= ~((1 << RS485_Send)); //Clear PIN DE+RE SN75176 for enable RX from serial line
 2aa:	92 98       	cbi	0x12, 2	; 18

//	UART0_CONTROL |= (1<<TXCIE0);
	uart_init(baudrate);
 2ac:	0c 94 40 01 	jmp	0x280	; 0x280 <uart_init>

000002b0 <uart_putc>:
 Returns:  none
 **************************************************************************/
void uart_putc(unsigned char data) {
	unsigned char tmphead;

	tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2b0:	90 91 68 02 	lds	r25, 0x0268
 2b4:	9f 5f       	subi	r25, 0xFF	; 255
 2b6:	9f 71       	andi	r25, 0x1F	; 31

	while (tmphead == UART_TxTail) {
 2b8:	20 91 67 02 	lds	r18, 0x0267
 2bc:	92 17       	cp	r25, r18
 2be:	e1 f3       	breq	.-8      	; 0x2b8 <uart_putc+0x8>
		;/* wait for free space in buffer */
	}

	if (is485){
 2c0:	20 91 62 00 	lds	r18, 0x0062
 2c4:	21 11       	cpse	r18, r1
		RS485_Port |= (1<<RS485_Send); //Set PIN Enable to TX
 2c6:	92 9a       	sbi	0x12, 2	; 18
		//RS485_Port |= (1<<RS485_LRx); //Led Rx OFF
		//RS485_Port &= ~(1<<RS485_LTx); //Led Tx ON
	}

	UART_TxBuf[tmphead] = data;
 2c8:	e9 2f       	mov	r30, r25
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e7 59       	subi	r30, 0x97	; 151
 2ce:	fd 4f       	sbci	r31, 0xFD	; 253
 2d0:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 2d2:	90 93 68 02 	sts	0x0268, r25

	/* enable UDRE interrupt */
	UART0_CONTROL |= ((1<<UART0_UDRIE));
 2d6:	55 9a       	sbi	0x0a, 5	; 10
 2d8:	08 95       	ret

000002da <modbus_slave_manage>:
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 2da:	cf 92       	push	r12
 2dc:	df 92       	push	r13
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	c0 51       	subi	r28, 0x10	; 16
 2f0:	d1 40       	sbci	r29, 0x01	; 1
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	fc 01       	movw	r30, r24
 2fe:	7b 01       	movw	r14, r22
	int resp_length = 0;
	int data, i;
	sft_t sft;
	uint8_t response[MAX_MESSAGE_LENGTH];

	sft.slave = query[offset - 1];
 300:	60 81       	ld	r22, Z
 302:	86 2f       	mov	r24, r22
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	c9 5f       	subi	r28, 0xF9	; 249
 308:	de 4f       	sbci	r29, 0xFE	; 254
 30a:	99 83       	std	Y+1, r25	; 0x01
 30c:	88 83       	st	Y, r24
 30e:	c7 50       	subi	r28, 0x07	; 7
 310:	d1 40       	sbci	r29, 0x01	; 1
	sft.function = query[offset];
 312:	71 81       	ldd	r23, Z+1	; 0x01
 314:	47 2f       	mov	r20, r23
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	c7 5f       	subi	r28, 0xF7	; 247
 31a:	de 4f       	sbci	r29, 0xFE	; 254
 31c:	59 83       	std	Y+1, r21	; 0x01
 31e:	48 83       	st	Y, r20
 320:	c9 50       	subi	r28, 0x09	; 9
 322:	d1 40       	sbci	r29, 0x01	; 1
	sft.address = (query[offset + 1] << 8) + query[offset + 2];
 324:	32 81       	ldd	r19, Z+2	; 0x02
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	a3 81       	ldd	r26, Z+3	; 0x03
 32a:	2a 0f       	add	r18, r26
 32c:	31 1d       	adc	r19, r1
 32e:	c5 5f       	subi	r28, 0xF5	; 245
 330:	de 4f       	sbci	r29, 0xFE	; 254
 332:	39 83       	std	Y+1, r19	; 0x01
 334:	28 83       	st	Y, r18
 336:	cb 50       	subi	r28, 0x0B	; 11
 338:	d1 40       	sbci	r29, 0x01	; 1

	if (sft.slave != SLAVE_ID && sft.slave != MODBUS_BROADCAST_ADDRESS) {
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 05       	cpc	r25, r1
 33e:	21 f0       	breq	.+8      	; 0x348 <modbus_slave_manage+0x6e>
 340:	8f 3f       	cpi	r24, 0xFF	; 255
 342:	91 05       	cpc	r25, r1
 344:	09 f0       	breq	.+2      	; 0x348 <modbus_slave_manage+0x6e>
 346:	a7 c1       	rjmp	.+846    	; 0x696 <__stack+0x237>
		return;
	}

	query_length -= CHECKSUM_LENGTH_RTU;

	switch (sft.function) {
 348:	74 30       	cpi	r23, 0x04	; 4
 34a:	09 f4       	brne	.+2      	; 0x34e <modbus_slave_manage+0x74>
 34c:	ab c0       	rjmp	.+342    	; 0x4a4 <__stack+0x45>
 34e:	40 f4       	brcc	.+16     	; 0x360 <modbus_slave_manage+0x86>
 350:	72 30       	cpi	r23, 0x02	; 2
 352:	a1 f1       	breq	.+104    	; 0x3bc <modbus_slave_manage+0xe2>
 354:	08 f0       	brcs	.+2      	; 0x358 <modbus_slave_manage+0x7e>
 356:	6d c0       	rjmp	.+218    	; 0x432 <modbus_slave_manage+0x158>
 358:	71 30       	cpi	r23, 0x01	; 1
 35a:	09 f0       	breq	.+2      	; 0x35e <modbus_slave_manage+0x84>
 35c:	63 c1       	rjmp	.+710    	; 0x624 <__stack+0x1c5>
 35e:	0c c0       	rjmp	.+24     	; 0x378 <modbus_slave_manage+0x9e>
 360:	76 30       	cpi	r23, 0x06	; 6
 362:	09 f4       	brne	.+2      	; 0x366 <modbus_slave_manage+0x8c>
 364:	25 c1       	rjmp	.+586    	; 0x5b0 <__stack+0x151>
 366:	08 f4       	brcc	.+2      	; 0x36a <modbus_slave_manage+0x90>
 368:	b5 c0       	rjmp	.+362    	; 0x4d4 <__stack+0x75>
 36a:	7f 30       	cpi	r23, 0x0F	; 15
 36c:	09 f4       	brne	.+2      	; 0x370 <modbus_slave_manage+0x96>
 36e:	41 c1       	rjmp	.+642    	; 0x5f2 <__stack+0x193>
 370:	70 31       	cpi	r23, 0x10	; 16
 372:	09 f0       	breq	.+2      	; 0x376 <modbus_slave_manage+0x9c>
 374:	57 c1       	rjmp	.+686    	; 0x624 <__stack+0x1c5>
 376:	2e c1       	rjmp	.+604    	; 0x5d4 <__stack+0x175>

	case FC_READ_COIL_STATUS:

		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
 378:	94 81       	ldd	r25, Z+4	; 0x04
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	75 81       	ldd	r23, Z+5	; 0x05
 37e:	87 0f       	add	r24, r23
 380:	91 1d       	adc	r25, r1
 382:	c3 5f       	subi	r28, 0xF3	; 243
 384:	de 4f       	sbci	r29, 0xFE	; 254
 386:	99 83       	std	Y+1, r25	; 0x01
 388:	88 83       	st	Y, r24
 38a:	cd 50       	subi	r28, 0x0D	; 13
 38c:	d1 40       	sbci	r29, 0x01	; 1

		if ((sft.address / 8 + ((sft.nb)?1:0)) > MAX_BitAddresses) {
 38e:	37 ff       	sbrs	r19, 7
 390:	02 c0       	rjmp	.+4      	; 0x396 <modbus_slave_manage+0xbc>
 392:	29 5f       	subi	r18, 0xF9	; 249
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	e3 e0       	ldi	r30, 0x03	; 3
 398:	35 95       	asr	r19
 39a:	27 95       	ror	r18
 39c:	ea 95       	dec	r30
 39e:	e1 f7       	brne	.-8      	; 0x398 <modbus_slave_manage+0xbe>
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	11 f4       	brne	.+4      	; 0x3ac <modbus_slave_manage+0xd2>
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	e2 0f       	add	r30, r18
 3ae:	f3 1f       	adc	r31, r19
 3b0:	b1 97       	sbiw	r30, 0x21	; 33
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <modbus_slave_manage+0xdc>
 3b4:	1e c1       	rjmp	.+572    	; 0x5f2 <__stack+0x193>
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 3b6:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	21 c0       	rjmp	.+66     	; 0x3fe <modbus_slave_manage+0x124>
					resp_length);
		}
		break;

	case FC_READ_INPUT_STATUS:
		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
 3bc:	94 81       	ldd	r25, Z+4	; 0x04
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	75 81       	ldd	r23, Z+5	; 0x05
 3c2:	87 0f       	add	r24, r23
 3c4:	91 1d       	adc	r25, r1
 3c6:	c3 5f       	subi	r28, 0xF3	; 243
 3c8:	de 4f       	sbci	r29, 0xFE	; 254
 3ca:	99 83       	std	Y+1, r25	; 0x01
 3cc:	88 83       	st	Y, r24
 3ce:	cd 50       	subi	r28, 0x0D	; 13
 3d0:	d1 40       	sbci	r29, 0x01	; 1

		if ((sft.address / 8 + ((sft.nb)?1:0)) > MAX_BitAddresses) {
 3d2:	37 ff       	sbrs	r19, 7
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <modbus_slave_manage+0x100>
 3d6:	29 5f       	subi	r18, 0xF9	; 249
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	73 e0       	ldi	r23, 0x03	; 3
 3dc:	35 95       	asr	r19
 3de:	27 95       	ror	r18
 3e0:	7a 95       	dec	r23
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <modbus_slave_manage+0x102>
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <modbus_slave_manage+0x116>
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	e2 0f       	add	r30, r18
 3f2:	f3 1f       	adc	r31, r19
 3f4:	b1 97       	sbiw	r30, 0x21	; 33
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <modbus_slave_manage+0x120>
 3f8:	fc c0       	rjmp	.+504    	; 0x5f2 <__stack+0x193>
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 3fa:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 3fc:	22 e0       	ldi	r18, 0x02	; 2
 3fe:	2a 83       	std	Y+2, r18	; 0x02
		if ((sft.address / 8 + ((sft.nb)?1:0)) > MAX_BitAddresses) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			// calculate amount of bytes to return
			response[resp_length++] = (sft.nb / 8) + ((sft.nb % 8) ? 1 : 0);
 400:	9c 01       	movw	r18, r24
 402:	27 70       	andi	r18, 0x07	; 7
 404:	33 27       	eor	r19, r19
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	23 2b       	or	r18, r19
 40a:	09 f4       	brne	.+2      	; 0x40e <modbus_slave_manage+0x134>
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	97 fd       	sbrc	r25, 7
 410:	07 96       	adiw	r24, 0x07	; 7
 412:	23 e0       	ldi	r18, 0x03	; 3
 414:	95 95       	asr	r25
 416:	87 95       	ror	r24
 418:	2a 95       	dec	r18
 41a:	e1 f7       	brne	.-8      	; 0x414 <modbus_slave_manage+0x13a>
 41c:	84 0f       	add	r24, r20
 41e:	8b 83       	std	Y+3, r24	; 0x03
			// give him the bit pattern of coils requested

			resp_length = response_io_status(
 420:	be 01       	movw	r22, r28
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	ce 01       	movw	r24, r28
 428:	8b 5f       	subi	r24, 0xFB	; 251
 42a:	9e 4f       	sbci	r25, 0xFE	; 254
 42c:	0e 94 49 00 	call	0x92	; 0x92 <response_io_status.constprop.1>
 430:	fb c0       	rjmp	.+502    	; 0x628 <__stack+0x1c9>

		}
		break;
	case FC_READ_HOLDING_REGISTERS:

		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
 432:	94 81       	ldd	r25, Z+4	; 0x04
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	75 81       	ldd	r23, Z+5	; 0x05
 438:	87 0f       	add	r24, r23
 43a:	91 1d       	adc	r25, r1
 43c:	c3 5f       	subi	r28, 0xF3	; 243
 43e:	de 4f       	sbci	r29, 0xFE	; 254
 440:	99 83       	std	Y+1, r25	; 0x01
 442:	88 83       	st	Y, r24
 444:	cd 50       	subi	r28, 0x0D	; 13
 446:	d1 40       	sbci	r29, 0x01	; 1

		if ((sft.address + sft.nb) >= MAX_WordAddress) {
 448:	89 01       	movw	r16, r18
 44a:	08 0f       	add	r16, r24
 44c:	19 1f       	adc	r17, r25
 44e:	02 33       	cpi	r16, 0x32	; 50
 450:	11 05       	cpc	r17, r1
 452:	0c f0       	brlt	.+2      	; 0x456 <modbus_slave_manage+0x17c>
 454:	ce c0       	rjmp	.+412    	; 0x5f2 <__stack+0x193>
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 456:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	9a 83       	std	Y+2, r25	; 0x02

		if ((sft.address + sft.nb) >= MAX_WordAddress) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
 45c:	88 0f       	add	r24, r24
 45e:	8b 83       	std	Y+3, r24	; 0x03
 460:	fe 01       	movw	r30, r28
 462:	34 96       	adiw	r30, 0x04	; 4
 464:	ae 01       	movw	r20, r28
 466:	4b 5f       	subi	r20, 0xFB	; 251
 468:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
		if ((sft.address + sft.nb) >= MAX_WordAddress) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
			for (i = (sft.address); i < (sft.address) + sft.nb; i++) {
 470:	12 c0       	rjmp	.+36     	; 0x496 <__stack+0x37>
				response[resp_length++] = actProfileData[i] >> 8;
 472:	d9 01       	movw	r26, r18
 474:	aa 0f       	add	r26, r26
 476:	bb 1f       	adc	r27, r27
 478:	a2 57       	subi	r26, 0x72	; 114
 47a:	bd 4f       	sbci	r27, 0xFD	; 253
 47c:	8d 91       	ld	r24, X+
 47e:	9c 91       	ld	r25, X
 480:	11 97       	sbiw	r26, 0x01	; 1
 482:	90 83       	st	Z, r25
				response[resp_length++] = actProfileData[i] & 0xFF;
 484:	8d 91       	ld	r24, X+
 486:	9c 91       	ld	r25, X
 488:	da 01       	movw	r26, r20
 48a:	8c 93       	st	X, r24
		if ((sft.address + sft.nb) >= MAX_WordAddress) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
			for (i = (sft.address); i < (sft.address) + sft.nb; i++) {
 48c:	2f 5f       	subi	r18, 0xFF	; 255
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	32 96       	adiw	r30, 0x02	; 2
 492:	4e 5f       	subi	r20, 0xFE	; 254
 494:	5f 4f       	sbci	r21, 0xFF	; 255
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 496:	cf 01       	movw	r24, r30
 498:	86 1b       	sub	r24, r22
 49a:	97 0b       	sbc	r25, r23
		if ((sft.address + sft.nb) >= MAX_WordAddress) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
			for (i = (sft.address); i < (sft.address) + sft.nb; i++) {
 49c:	20 17       	cp	r18, r16
 49e:	31 07       	cpc	r19, r17
 4a0:	44 f3       	brlt	.-48     	; 0x472 <__stack+0x13>
 4a2:	c2 c0       	rjmp	.+388    	; 0x628 <__stack+0x1c9>
				response[resp_length++] = actProfileData[i] & 0xFF;
			}
		}
		break;
	case FC_READ_INPUT_REGISTERS:
		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
 4a4:	94 81       	ldd	r25, Z+4	; 0x04
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	e5 81       	ldd	r30, Z+5	; 0x05
 4aa:	8e 0f       	add	r24, r30
 4ac:	91 1d       	adc	r25, r1
 4ae:	c3 5f       	subi	r28, 0xF3	; 243
 4b0:	de 4f       	sbci	r29, 0xFE	; 254
 4b2:	99 83       	std	Y+1, r25	; 0x01
 4b4:	88 83       	st	Y, r24
 4b6:	cd 50       	subi	r28, 0x0D	; 13
 4b8:	d1 40       	sbci	r29, 0x01	; 1
		if ((sft.address + sft.nb) > MAX_WordAddress) {
 4ba:	28 0f       	add	r18, r24
 4bc:	39 1f       	adc	r19, r25
 4be:	23 33       	cpi	r18, 0x33	; 51
 4c0:	31 05       	cpc	r19, r1
 4c2:	0c f0       	brlt	.+2      	; 0x4c6 <__stack+0x67>
 4c4:	96 c0       	rjmp	.+300    	; 0x5f2 <__stack+0x193>
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 4c6:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 4c8:	7a 83       	std	Y+2, r23	; 0x02
		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
		if ((sft.address + sft.nb) > MAX_WordAddress) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,response);
		} else {
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
 4ca:	88 0f       	add	r24, r24
 4cc:	8b 83       	std	Y+3, r24	; 0x03
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	aa c0       	rjmp	.+340    	; 0x628 <__stack+0x1c9>
		}
		break;
	case FC_FORCE_SINGLE_COIL:
		data = (query[offset + 3] << 8) + query[offset + 4];
 4d4:	a4 81       	ldd	r26, Z+4	; 0x04
 4d6:	75 81       	ldd	r23, Z+5	; 0x05
		if (sft.address > MAX_BitAddresses) {
 4d8:	21 32       	cpi	r18, 0x21	; 33
 4da:	31 05       	cpc	r19, r1
 4dc:	0c f0       	brlt	.+2      	; 0x4e0 <__stack+0x81>
 4de:	89 c0       	rjmp	.+274    	; 0x5f2 <__stack+0x193>
			resp_length = build_response_basis_rtu(&sft, response);
			response[resp_length++] = sft.nb << 1;
		}
		break;
	case FC_FORCE_SINGLE_COIL:
		data = (query[offset + 3] << 8) + query[offset + 4];
 4e0:	9a 2f       	mov	r25, r26
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	87 0f       	add	r24, r23
 4e6:	91 1d       	adc	r25, r1
		if (sft.address > MAX_BitAddresses) {
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,
					response);
		} else {

			if (data == 0xFF00 || data == 0x00) {
 4e8:	81 15       	cp	r24, r1
 4ea:	bf ef       	ldi	r27, 0xFF	; 255
 4ec:	9b 07       	cpc	r25, r27
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <__stack+0x97>
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__stack+0x97>
 4f4:	4d c0       	rjmp	.+154    	; 0x590 <__stack+0x131>
				changedBit.cBit = sft.address;
 4f6:	20 93 60 00 	sts	0x0060, r18

				if (data) {
 4fa:	89 2b       	or	r24, r25
 4fc:	f9 f0       	breq	.+62     	; 0x53c <__stack+0xdd>
					changedBit.cVal = TRUE;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 61 00 	sts	0x0061, r24
					((uint8_t*)systemBits)[(uint8_t)(sft.address / 8)] |= (1 << (sft.address % 8));
 504:	89 01       	movw	r16, r18
 506:	37 ff       	sbrs	r19, 7
 508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xaf>
 50a:	09 5f       	subi	r16, 0xF9	; 249
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	73 e0       	ldi	r23, 0x03	; 3
 510:	15 95       	asr	r17
 512:	07 95       	ror	r16
 514:	7a 95       	dec	r23
 516:	e1 f7       	brne	.-8      	; 0x510 <__stack+0xb1>
	}
		changedBit.cBit = 99;
		changedBit.cVal = 0;
		switchUSART(ON);

 518:	11 27       	eor	r17, r17
 51a:	07 57       	subi	r16, 0x77	; 119
 51c:	1d 4f       	sbci	r17, 0xFD	; 253
 51e:	c9 01       	movw	r24, r18
 520:	68 e0       	ldi	r22, 0x08	; 8
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__stack+0xd1>
 52e:	22 0f       	add	r18, r18
 530:	8a 95       	dec	r24
 532:	ea f7       	brpl	.-6      	; 0x52e <__stack+0xcf>
 534:	d8 01       	movw	r26, r16
 536:	8c 91       	ld	r24, X
 538:	82 2b       	or	r24, r18
 53a:	1e c0       	rjmp	.+60     	; 0x578 <__stack+0x119>
				} else {
					changedBit.cVal = FALSE;
 53c:	10 92 61 00 	sts	0x0061, r1
					((uint8_t*)systemBits)[(uint8_t)(sft.address / 8)] &= ~(1 << (sft.address % 8));
 540:	89 01       	movw	r16, r18
 542:	37 ff       	sbrs	r19, 7
 544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0xeb>
 546:	09 5f       	subi	r16, 0xF9	; 249
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	63 e0       	ldi	r22, 0x03	; 3
 54c:	15 95       	asr	r17
 54e:	07 95       	ror	r16
 550:	6a 95       	dec	r22
 552:	e1 f7       	brne	.-8      	; 0x54c <__stack+0xed>
 554:	11 27       	eor	r17, r17
 556:	07 57       	subi	r16, 0x77	; 119
 558:	1d 4f       	sbci	r17, 0xFD	; 253
 55a:	c9 01       	movw	r24, r18
 55c:	68 e0       	ldi	r22, 0x08	; 8
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	01 c0       	rjmp	.+2      	; 0x56c <__stack+0x10d>
 56a:	22 0f       	add	r18, r18
 56c:	8a 95       	dec	r24
 56e:	ea f7       	brpl	.-6      	; 0x56a <__stack+0x10b>
 570:	20 95       	com	r18
 572:	d8 01       	movw	r26, r16
 574:	8c 91       	ld	r24, X
 576:	82 23       	and	r24, r18
 578:	8c 93       	st	X, r24
	if (sft.slave != SLAVE_ID && sft.slave != MODBUS_BROADCAST_ADDRESS) {
		// Ignores the query (not for me)
		return;
	}

	query_length -= CHECKSUM_LENGTH_RTU;
 57a:	87 01       	movw	r16, r14
 57c:	02 50       	subi	r16, 0x02	; 2
 57e:	11 09       	sbc	r17, r1

				// In RTU mode, the CRC is computed and added
				//   to the query by modbus_send, the computed
				//   CRC will be same and optimization is
				//   (FIXME) possible here .
				memcpy(response, query, query_length);
 580:	a8 01       	movw	r20, r16
 582:	bf 01       	movw	r22, r30
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	0e 94 53 04 	call	0x8a6	; 0x8a6 <memcpy>
				resp_length = query_length;
 58c:	c8 01       	movw	r24, r16
 58e:	4c c0       	rjmp	.+152    	; 0x628 <__stack+0x1c9>

// Build the exception response 
static int response_exception(sft_t *sft, int exception_code, uint8_t *response) {
	int response_length;

	sft->function = sft->function + 0x80;
 590:	40 58       	subi	r20, 0x80	; 128
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	c7 5f       	subi	r28, 0xF7	; 247
 596:	de 4f       	sbci	r29, 0xFE	; 254
 598:	59 83       	std	Y+1, r21	; 0x01
 59a:	48 83       	st	Y, r20
 59c:	c9 50       	subi	r28, 0x09	; 9
 59e:	d1 40       	sbci	r29, 0x01	; 1
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 5a0:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 5a2:	4a 83       	std	Y+2, r20	; 0x02

	sft->function = sft->function + 0x80;
	response_length = build_response_basis_rtu(sft, response);

	// Positive exception code 
	response[response_length++] = -exception_code;
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	8b 83       	std	Y+3, r24	; 0x03
				memcpy(response, query, query_length);
				resp_length = query_length;
			} else {
				resp_length = response_exception(&sft, ILLEGAL_DATA_VALUE,
						response);
				changedBit.cBit = 99;
 5a8:	83 e6       	ldi	r24, 0x63	; 99
 5aa:	80 93 60 00 	sts	0x0060, r24
 5ae:	8f cf       	rjmp	.-226    	; 0x4ce <__stack+0x6f>
			}
		}
		break;
	case FC_PRESET_SINGLE_REGISTER:

		data = (query[offset + 3] << 8) + query[offset + 4];
 5b0:	a4 81       	ldd	r26, Z+4	; 0x04
 5b2:	75 81       	ldd	r23, Z+5	; 0x05

		if (sft.address >= MAX_WordAddress) {
 5b4:	22 33       	cpi	r18, 0x32	; 50
 5b6:	31 05       	cpc	r19, r1
 5b8:	0c f0       	brlt	.+2      	; 0x5bc <__stack+0x15d>
 5ba:	1b c0       	rjmp	.+54     	; 0x5f2 <__stack+0x193>
			}
		}
		break;
	case FC_PRESET_SINGLE_REGISTER:

		data = (query[offset + 3] << 8) + query[offset + 4];
 5bc:	9a 2f       	mov	r25, r26
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	87 0f       	add	r24, r23
 5c2:	91 1d       	adc	r25, r1
			resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS,
					response);
		} else {

			if ((sft.address < MAX_WordAddress)){
				actProfileData[sft.address] = data;
 5c4:	f9 01       	movw	r30, r18
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	e2 57       	subi	r30, 0x72	; 114
 5cc:	fd 4f       	sbci	r31, 0xFD	; 253
 5ce:	91 83       	std	Z+1, r25	; 0x01
 5d0:	80 83       	st	Z, r24
 5d2:	28 c0       	rjmp	.+80     	; 0x624 <__stack+0x1c5>
		resp_length = response_exception(&sft, ILLEGAL_DATA_ADDRESS, response);

		break;
	case FC_PRESET_MULTIPLE_REGISTERS:

		sft.nb = (query[offset + 3] << 8) + query[offset + 4];
 5d4:	94 81       	ldd	r25, Z+4	; 0x04
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	a5 81       	ldd	r26, Z+5	; 0x05
 5da:	8a 0f       	add	r24, r26
 5dc:	91 1d       	adc	r25, r1
 5de:	c3 5f       	subi	r28, 0xF3	; 243
 5e0:	de 4f       	sbci	r29, 0xFE	; 254
 5e2:	99 83       	std	Y+1, r25	; 0x01
 5e4:	88 83       	st	Y, r24
 5e6:	cd 50       	subi	r28, 0x0D	; 13
 5e8:	d1 40       	sbci	r29, 0x01	; 1

		if ((sft.address + sft.nb) > MAX_WordAddress) {
 5ea:	82 0f       	add	r24, r18
 5ec:	93 1f       	adc	r25, r19
 5ee:	c3 97       	sbiw	r24, 0x33	; 51
 5f0:	64 f0       	brlt	.+24     	; 0x60a <__stack+0x1ab>

// Build the exception response 
static int response_exception(sft_t *sft, int exception_code, uint8_t *response) {
	int response_length;

	sft->function = sft->function + 0x80;
 5f2:	40 58       	subi	r20, 0x80	; 128
 5f4:	5f 4f       	sbci	r21, 0xFF	; 255
 5f6:	c7 5f       	subi	r28, 0xF7	; 247
 5f8:	de 4f       	sbci	r29, 0xFE	; 254
 5fa:	59 83       	std	Y+1, r21	; 0x01
 5fc:	48 83       	st	Y, r20
 5fe:	c9 50       	subi	r28, 0x09	; 9
 600:	d1 40       	sbci	r29, 0x01	; 1
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 602:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 604:	4a 83       	std	Y+2, r20	; 0x02

	sft->function = sft->function + 0x80;
	response_length = build_response_basis_rtu(sft, response);

	// Positive exception code 
	response[response_length++] = -exception_code;
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	61 cf       	rjmp	.-318    	; 0x4cc <__stack+0x6d>
}

// Builds a RTU response header 
static int build_response_basis_rtu(sft_t *sft, uint8_t *response) {

	response[0] = sft->slave;
 60a:	69 83       	std	Y+1, r22	; 0x01
	response[1] = sft->function;
 60c:	7a 83       	std	Y+2, r23	; 0x02
//				holdingRegs[i] = (query[offset + j] << 8) + query[offset + j + 1];
			}

			resp_length = build_response_basis_rtu(&sft, response);
			// 4 to copy the address (2) and the no. of registers
			memcpy(response + resp_length, query + resp_length, 4);
 60e:	82 81       	ldd	r24, Z+2	; 0x02
 610:	93 81       	ldd	r25, Z+3	; 0x03
 612:	a4 81       	ldd	r26, Z+4	; 0x04
 614:	b5 81       	ldd	r27, Z+5	; 0x05
 616:	8b 83       	std	Y+3, r24	; 0x03
 618:	9c 83       	std	Y+4, r25	; 0x04
 61a:	ad 83       	std	Y+5, r26	; 0x05
 61c:	be 83       	std	Y+6, r27	; 0x06
			resp_length += 4;
 61e:	86 e0       	ldi	r24, 0x06	; 6
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <__stack+0x1c9>
}

void modbus_slave_manage(const uint8_t *query, int query_length) {

	int offset = HEADER_LENGTH_RTU;
	int resp_length = 0;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	4c 0f       	add	r20, r28
 62e:	5d 1f       	adc	r21, r29
 630:	48 0f       	add	r20, r24
 632:	59 1f       	adc	r21, r25
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

/* Fast CRC */
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length) {
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
 634:	7f ef       	ldi	r23, 0xFF	; 255
		0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

/* Fast CRC */
static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length) {
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
 636:	6f ef       	ldi	r22, 0xFF	; 255
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 638:	fe 01       	movw	r30, r28
 63a:	31 96       	adiw	r30, 0x01	; 1
 63c:	0c c0       	rjmp	.+24     	; 0x656 <__stack+0x1f7>
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
	unsigned int i; // will index into CRC lookup

	//pass through message buffer
	while (buffer_length--) {
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
 63e:	21 91       	ld	r18, Z+
 640:	26 27       	eor	r18, r22
 642:	30 e0       	ldi	r19, 0x00	; 0
		crc_hi = crc_lo ^ table_crc_hi[i];
 644:	d9 01       	movw	r26, r18
 646:	ad 59       	subi	r26, 0x9D	; 157
 648:	bf 4f       	sbci	r27, 0xFF	; 255
 64a:	6c 91       	ld	r22, X
 64c:	67 27       	eor	r22, r23
		crc_lo = table_crc_lo[i];
 64e:	d9 01       	movw	r26, r18
 650:	ad 59       	subi	r26, 0x9D	; 157
 652:	be 4f       	sbci	r27, 0xFE	; 254
 654:	7c 91       	ld	r23, X
	uint8_t crc_hi = 0xFF; // high CRC byte initialized
	uint8_t crc_lo = 0xFF; // low CRC byte initialized
	unsigned int i; // will index into CRC lookup

	//pass through message buffer
	while (buffer_length--) {
 656:	e4 17       	cp	r30, r20
 658:	f5 07       	cpc	r31, r21
 65a:	89 f7       	brne	.-30     	; 0x63e <__stack+0x1df>
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
		crc_hi = crc_lo ^ table_crc_hi[i];
		crc_lo = table_crc_lo[i];
	}

	return (crc_hi << 8 | crc_lo);
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	27 2b       	or	r18, r23

	uint16_t s_crc;
	int i;

	s_crc = crc16(query, query_length);
	query[query_length++] = s_crc >> 8;
 660:	60 83       	st	Z, r22
	query[query_length++] = s_crc & 0x00FF;
 662:	fe 01       	movw	r30, r28
 664:	e8 0f       	add	r30, r24
 666:	f9 1f       	adc	r31, r25
 668:	22 83       	std	Z+2, r18	; 0x02
 66a:	6c 01       	movw	r12, r24
 66c:	b2 e0       	ldi	r27, 0x02	; 2
 66e:	cb 0e       	add	r12, r27
 670:	d1 1c       	adc	r13, r1
 672:	ee 24       	eor	r14, r14
 674:	e3 94       	inc	r14
 676:	f1 2c       	mov	r15, r1
 678:	ec 0e       	add	r14, r28
 67a:	fd 1e       	adc	r15, r29
 67c:	87 01       	movw	r16, r14
 67e:	05 c0       	rjmp	.+10     	; 0x68a <__stack+0x22b>
	for (i = 0; i <= query_length; i++) { //for (i = 0; i < query_length; i++) { original part ... modificed by MiBu
		uart_putc(query[i]);
 680:	f8 01       	movw	r30, r16
 682:	81 91       	ld	r24, Z+
 684:	8f 01       	movw	r16, r30
 686:	0e 94 58 01 	call	0x2b0	; 0x2b0 <uart_putc>
	}

	return offset;
}

void modbus_slave_manage(const uint8_t *query, int query_length) {
 68a:	c8 01       	movw	r24, r16
 68c:	8e 19       	sub	r24, r14
 68e:	9f 09       	sbc	r25, r15
	int i;

	s_crc = crc16(query, query_length);
	query[query_length++] = s_crc >> 8;
	query[query_length++] = s_crc & 0x00FF;
	for (i = 0; i <= query_length; i++) { //for (i = 0; i < query_length; i++) { original part ... modificed by MiBu
 690:	c8 16       	cp	r12, r24
 692:	d9 06       	cpc	r13, r25
 694:	ac f7       	brge	.-22     	; 0x680 <__stack+0x221>
		break;
	case FC_REPORT_SLAVE_ID:
		break;
	}
	modbus_send(response, resp_length);	
}
 696:	c0 5f       	subi	r28, 0xF0	; 240
 698:	de 4f       	sbci	r29, 0xFE	; 254
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	df 90       	pop	r13
 6b2:	cf 90       	pop	r12
 6b4:	08 95       	ret

000006b6 <modbus_processSlaveFrame>:

void modbus_processSlaveFrame(uint8_t *query, int query_length) {
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	8c 01       	movw	r16, r24
 6c0:	eb 01       	movw	r28, r22
	uint8_t cnt = 0;

	if (check_crc16(query, query_length) == query_length) {
 6c2:	0e 94 9e 00 	call	0x13c	; 0x13c <check_crc16>
 6c6:	bc 01       	movw	r22, r24
 6c8:	8c 17       	cp	r24, r28
 6ca:	9d 07       	cpc	r25, r29
 6cc:	39 f4       	brne	.+14     	; 0x6dc <modbus_processSlaveFrame+0x26>
		modbus_slave_manage(query, query_length);
 6ce:	c8 01       	movw	r24, r16
	} else {
		for (cnt = 0; cnt < UART_RX_BUFFER_SIZE; cnt++) {
			query[cnt] = 0;
		}
	}	
}
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16

void modbus_processSlaveFrame(uint8_t *query, int query_length) {
	uint8_t cnt = 0;

	if (check_crc16(query, query_length) == query_length) {
		modbus_slave_manage(query, query_length);
 6d8:	0c 94 6d 01 	jmp	0x2da	; 0x2da <modbus_slave_manage>
 6dc:	f8 01       	movw	r30, r16
}

void modbus_processSlaveFrame(uint8_t *query, int query_length) {
	uint8_t cnt = 0;

	if (check_crc16(query, query_length) == query_length) {
 6de:	80 e2       	ldi	r24, 0x20	; 32
		modbus_slave_manage(query, query_length);
	} else {
		for (cnt = 0; cnt < UART_RX_BUFFER_SIZE; cnt++) {
			query[cnt] = 0;
 6e0:	11 92       	st	Z+, r1
 6e2:	81 50       	subi	r24, 0x01	; 1
	uint8_t cnt = 0;

	if (check_crc16(query, query_length) == query_length) {
		modbus_slave_manage(query, query_length);
	} else {
		for (cnt = 0; cnt < UART_RX_BUFFER_SIZE; cnt++) {
 6e4:	e9 f7       	brne	.-6      	; 0x6e0 <modbus_processSlaveFrame+0x2a>
			query[cnt] = 0;
		}
	}	
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <uart_flush>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart_flush(void) {
	uint8_t i8;
	UART_RxHead = 0;
 6f0:	10 92 8d 02 	sts	0x028D, r1
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
	for (i8 = 0; i8 < UART_RX_BUFFER_SIZE; i8++) {
		UART_RxBuf[i8] = 0;
 6f8:	fc 01       	movw	r30, r24
 6fa:	ee 50       	subi	r30, 0x0E	; 14
 6fc:	fd 4f       	sbci	r31, 0xFD	; 253
 6fe:	10 82       	st	Z, r1
 700:	01 96       	adiw	r24, 0x01	; 1
 Returns:  None
 **************************************************************************/
void uart_flush(void) {
	uint8_t i8;
	UART_RxHead = 0;
	for (i8 = 0; i8 < UART_RX_BUFFER_SIZE; i8++) {
 702:	80 32       	cpi	r24, 0x20	; 32
 704:	91 05       	cpc	r25, r1
 706:	c1 f7       	brne	.-16     	; 0x6f8 <uart_flush+0x8>
		UART_RxBuf[i8] = 0;
	}
}/* uart_flush */
 708:	08 95       	ret

0000070a <__vector_3>:
	}
	return ((systemBits[getByteForSysBit(b)] & (1 << getBitForSysBit(b))) ? 1 : 0);
}


ISR (TIMER2_COMP_vect) {
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
	
	if (uart0_status.status != RS_Wait) {
 718:	80 91 64 02 	lds	r24, 0x0264
 71c:	88 23       	and	r24, r24
 71e:	09 f1       	breq	.+66     	; 0x762 <__vector_3+0x58>
		uart0_status.bitTics++;
 720:	80 91 65 02 	lds	r24, 0x0265
 724:	90 91 66 02 	lds	r25, 0x0266
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	90 93 66 02 	sts	0x0266, r25
 72e:	80 93 65 02 	sts	0x0265, r24
		// this value is reset each time
		// we receive a new byte on UART
		if (uart0_status.bitTics >= FRAME_TIMEOUT_TICS) {
 732:	80 91 65 02 	lds	r24, 0x0265
 736:	90 91 66 02 	lds	r25, 0x0266
 73a:	83 97       	sbiw	r24, 0x23	; 35
 73c:	18 f0       	brcs	.+6      	; 0x744 <__vector_3+0x3a>
			// here we are if bitTics is more than 3.5 chars
			// that means frame complete or timeout for frame
			uart0_status.status = RS_FrameComplete;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	80 93 64 02 	sts	0x0264, r24
		}
		if ((uart0_status.bitTics <= FRAME_TIMEOUT_TICS)
 744:	80 91 65 02 	lds	r24, 0x0265
 748:	90 91 66 02 	lds	r25, 0x0266
 74c:	84 97       	sbiw	r24, 0x24	; 36
 74e:	48 f4       	brcc	.+18     	; 0x762 <__vector_3+0x58>
				&& (uart0_status.bitTics >= BYTE_TIMEOUT_TICS)) {
 750:	80 91 65 02 	lds	r24, 0x0265
 754:	90 91 66 02 	lds	r25, 0x0266
 758:	0f 97       	sbiw	r24, 0x0f	; 15
 75a:	18 f0       	brcs	.+6      	; 0x762 <__vector_3+0x58>
			// here we are if bitTics exceeds 1.5 chars
			// that means frame is useless
			// anyway we give it to higher instance for check
			// and exception handling
			uart0_status.status = RS_FrameComplete;
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	80 93 64 02 	sts	0x0264, r24
			
		}
	}

}
 762:	9f 91       	pop	r25
 764:	8f 91       	pop	r24
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <initInterrupts>:
void initInterrupts(void) {


	// TC2 used for Modbus Timeout and sysSec Counter

	TCCR2 |= ((1<<CS21));//Prescaler set clkt2s/8
 770:	85 b5       	in	r24, 0x25	; 37
 772:	82 60       	ori	r24, 0x02	; 2
 774:	85 bd       	out	0x25, r24	; 37
	OCR2 = 32; //32; Original value
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);//Enable interrupt from Timer/Counter2 Compare Match
 77a:	89 b7       	in	r24, 0x39	; 57
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	89 bf       	out	0x39, r24	; 57
 780:	08 95       	ret

00000782 <initPorts>:
}

void initPorts(void) {

	RS485_DirPort	= 0xFE; //Set Port as OUTPUT, but not RX
 782:	8e ef       	ldi	r24, 0xFE	; 254
 784:	81 bb       	out	0x11, r24	; 17
	RS485_Port		= 0xF9; //OFF Led Pin enable Rx SN75176) and Enable Pull-Up resistor on Rx pin
 786:	89 ef       	ldi	r24, 0xF9	; 249
 788:	82 bb       	out	0x12, r24	; 18
	Led_DirPort	= 0xFF; //Set Port as OUTPUT, for LED's debug
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	8a bb       	out	0x1a, r24	; 26
	Led_Port	= LedOFF;	//OFF all LED
 78e:	8b bb       	out	0x1b, r24	; 27
 790:	08 95       	ret

00000792 <initSysVars>:

void initSysVars(void) {
	uint8_t i8;

	for (i8 = 0; i8 < MaxActionBytes; i8++) {
		systemBits[i8] = 0; //Reset Byte Modbus in RAM
 792:	10 92 89 02 	sts	0x0289, r1
 796:	10 92 8a 02 	sts	0x028A, r1
 79a:	10 92 8b 02 	sts	0x028B, r1
 79e:	10 92 8c 02 	sts	0x028C, r1
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
	}
	for (i8 = 0; i8 < MAX_WordAddress; i8++) {
		actProfileData[i8] = 0;//Reset Word Modbus in RAM
 7a6:	fc 01       	movw	r30, r24
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	e2 57       	subi	r30, 0x72	; 114
 7ae:	fd 4f       	sbci	r31, 0xFD	; 253
 7b0:	11 82       	std	Z+1, r1	; 0x01
 7b2:	10 82       	st	Z, r1
 7b4:	01 96       	adiw	r24, 0x01	; 1
	uint8_t i8;

	for (i8 = 0; i8 < MaxActionBytes; i8++) {
		systemBits[i8] = 0; //Reset Byte Modbus in RAM
	}
	for (i8 = 0; i8 < MAX_WordAddress; i8++) {
 7b6:	82 33       	cpi	r24, 0x32	; 50
 7b8:	91 05       	cpc	r25, r1
 7ba:	a9 f7       	brne	.-22     	; 0x7a6 <initSysVars+0x14>
		actProfileData[i8] = 0;//Reset Word Modbus in RAM
	}
}
 7bc:	08 95       	ret

000007be <main>:

int main(void) {

	uint8_t oldStatus = 0;

	initSysVars();
 7be:	0e 94 c9 03 	call	0x792	; 0x792 <initSysVars>
	initPorts();
 7c2:	0e 94 c1 03 	call	0x782	; 0x782 <initPorts>

	// we use RS485 here, to go with RS232 just have a look at Modbus_uart.c/.h
	// and use the rs232 init function
	rs485_init(UART_BAUD_SELECT(38400,F_CPU));
 7c6:	89 e1       	ldi	r24, 0x19	; 25
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 52 01 	call	0x2a4	; 0x2a4 <rs485_init>
	initInterrupts();
 7ce:	0e 94 b8 03 	call	0x770	; 0x770 <initInterrupts>


	actProfileData[IDX_DW_Debug01] = 'C';
 7d2:	83 e4       	ldi	r24, 0x43	; 67
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	90 93 8f 02 	sts	0x028F, r25
 7da:	80 93 8e 02 	sts	0x028E, r24
	actProfileData[IDX_DW_Debug02] = 'i';
 7de:	89 e6       	ldi	r24, 0x69	; 105
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	90 93 91 02 	sts	0x0291, r25
 7e6:	80 93 90 02 	sts	0x0290, r24
	actProfileData[IDX_DW_Debug03] = 'a';
 7ea:	81 e6       	ldi	r24, 0x61	; 97
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	90 93 93 02 	sts	0x0293, r25
 7f2:	80 93 92 02 	sts	0x0292, r24
	actProfileData[IDX_DW_Debug04] = 'o'; 
 7f6:	8f e6       	ldi	r24, 0x6F	; 111
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	90 93 95 02 	sts	0x0295, r25
 7fe:	80 93 94 02 	sts	0x0294, r24
	actProfileData[IDX_DW_Debug05] = '_';
 802:	8f e5       	ldi	r24, 0x5F	; 95
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	90 93 97 02 	sts	0x0297, r25
 80a:	80 93 96 02 	sts	0x0296, r24
	actProfileData[IDX_DW_Debug06] = '!'; 
 80e:	81 e2       	ldi	r24, 0x21	; 33
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	90 93 99 02 	sts	0x0299, r25
 816:	80 93 98 02 	sts	0x0298, r24
	
	sei();
 81a:	78 94       	sei
	}
}

int main(void) {

	uint8_t oldStatus = 0;
 81c:	c0 e0       	ldi	r28, 0x00	; 0
	sei();
	

	for (;;) {
		
		RS485_Port |= (1<<RS485_LRx); // Led Rx OFF for debug (MiBu)
 81e:	93 9a       	sbi	0x12, 3	; 18
		if (oldStatus != uart0_status.status) {
 820:	80 91 64 02 	lds	r24, 0x0264
 824:	c8 17       	cp	r28, r24
 826:	d9 f3       	breq	.-10     	; 0x81e <main+0x60>
			oldStatus = uart0_status.status;
 828:	c0 91 64 02 	lds	r28, 0x0264
			
			if (uart0_status.status == RS_FrameComplete) {
 82c:	80 91 64 02 	lds	r24, 0x0264
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	a9 f7       	brne	.-22     	; 0x81e <main+0x60>
				if (UART_RxHead) {
 834:	80 91 8d 02 	lds	r24, 0x028D
 838:	88 23       	and	r24, r24
 83a:	41 f0       	breq	.+16     	; 0x84c <main+0x8e>
					RS485_Port &= ~(1<<RS485_LRx); // Led Rx ON for debug (MiBu)
 83c:	93 98       	cbi	0x12, 3	; 18
					modbus_processSlaveFrame((uint8_t*) UART_RxBuf, UART_RxHead);
 83e:	60 91 8d 02 	lds	r22, 0x028D
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	82 ef       	ldi	r24, 0xF2	; 242
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <modbus_processSlaveFrame>
				}
				uart_flush();
 84c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <uart_flush>
				uart0_status.status = RS_Wait;
 850:	10 92 64 02 	sts	0x0264, r1
 854:	e4 cf       	rjmp	.-56     	; 0x81e <main+0x60>

00000856 <__divmodhi4>:
 856:	97 fb       	bst	r25, 7
 858:	07 2e       	mov	r0, r23
 85a:	16 f4       	brtc	.+4      	; 0x860 <__divmodhi4+0xa>
 85c:	00 94       	com	r0
 85e:	07 d0       	rcall	.+14     	; 0x86e <__divmodhi4_neg1>
 860:	77 fd       	sbrc	r23, 7
 862:	09 d0       	rcall	.+18     	; 0x876 <__divmodhi4_neg2>
 864:	0e 94 3f 04 	call	0x87e	; 0x87e <__udivmodhi4>
 868:	07 fc       	sbrc	r0, 7
 86a:	05 d0       	rcall	.+10     	; 0x876 <__divmodhi4_neg2>
 86c:	3e f4       	brtc	.+14     	; 0x87c <__divmodhi4_exit>

0000086e <__divmodhi4_neg1>:
 86e:	90 95       	com	r25
 870:	81 95       	neg	r24
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__divmodhi4_neg2>:
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255

0000087c <__divmodhi4_exit>:
 87c:	08 95       	ret

0000087e <__udivmodhi4>:
 87e:	aa 1b       	sub	r26, r26
 880:	bb 1b       	sub	r27, r27
 882:	51 e1       	ldi	r21, 0x11	; 17
 884:	07 c0       	rjmp	.+14     	; 0x894 <__udivmodhi4_ep>

00000886 <__udivmodhi4_loop>:
 886:	aa 1f       	adc	r26, r26
 888:	bb 1f       	adc	r27, r27
 88a:	a6 17       	cp	r26, r22
 88c:	b7 07       	cpc	r27, r23
 88e:	10 f0       	brcs	.+4      	; 0x894 <__udivmodhi4_ep>
 890:	a6 1b       	sub	r26, r22
 892:	b7 0b       	sbc	r27, r23

00000894 <__udivmodhi4_ep>:
 894:	88 1f       	adc	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	5a 95       	dec	r21
 89a:	a9 f7       	brne	.-22     	; 0x886 <__udivmodhi4_loop>
 89c:	80 95       	com	r24
 89e:	90 95       	com	r25
 8a0:	bc 01       	movw	r22, r24
 8a2:	cd 01       	movw	r24, r26
 8a4:	08 95       	ret

000008a6 <memcpy>:
 8a6:	fb 01       	movw	r30, r22
 8a8:	dc 01       	movw	r26, r24
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <memcpy+0xa>
 8ac:	01 90       	ld	r0, Z+
 8ae:	0d 92       	st	X+, r0
 8b0:	41 50       	subi	r20, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	d8 f7       	brcc	.-10     	; 0x8ac <memcpy+0x6>
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
