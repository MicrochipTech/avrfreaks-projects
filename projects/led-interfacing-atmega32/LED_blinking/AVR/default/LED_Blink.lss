
LED_Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000036c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000084  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000003a  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019e  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000109  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000125  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000106  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 53 00 	jmp	0xa6	; 0xa6 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <port_init>:
#include <avr/interrupt.h>
#include <util/delay.h>

void port_init(void)
{
  8e:	12 ba       	out	0x12, r1	; 18
 PORTD = 0x00;
 DDRD  = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	81 bb       	out	0x11, r24	; 17
  94:	08 95       	ret

00000096 <init_devices>:
}

//call this routine to initialize all peripherals
void init_devices(void)
{
  96:	f8 94       	cli
  98:	12 ba       	out	0x12, r1	; 18
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 port_init();

 MCUCR = 0x00;
  9e:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
  a0:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
  a2:	19 be       	out	0x39, r1	; 57
  a4:	08 95       	ret

000000a6 <main>:
// sei(); //re-enable interrupts
 //all peripherals are now initialized
}


int main()
{
  a6:	0e 94 4b 00 	call	0x96	; 0x96 <init_devices>
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f0 e0       	ldi	r31, 0x00	; 0
 init_devices();
 
 while(1)
 {
    PORTD = 0xFF;
  b0:	22 bb       	out	0x12, r18	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	cf 01       	movw	r24, r30
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0xe>
    _delay_ms(500);
	
    PORTD = 0;
  b8:	12 ba       	out	0x12, r1	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	cf 01       	movw	r24, r30
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x16>
  c0:	f7 cf       	rjmp	.-18     	; 0xb0 <main+0xa>
