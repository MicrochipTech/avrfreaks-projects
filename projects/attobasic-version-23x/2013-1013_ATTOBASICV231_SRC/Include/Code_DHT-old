.if (DHT && RTC)
;********************************************************************
.include "include/Code_Math.inc";include 16 and 32 bit math routines
;********************************************************************
; DHTcommand: Read DHTxx temperature in Celsius.  The value returned
;	is integer and also stored in RAM@RT_I.  If parameter of "1" is 
;	passed then the data is converted to Fahrenheit..
;********************************************************************
DHTcommand:
	PushY						;save Y pointer
	clr		U					;Celsius without a parameter
	GoSub	pushU				;save on stack
	GoSub	interpretlinev			
	Gosub	popU				;retrieve parameter
	ldi		temp,1				;only values of [0..1] allowed
	cp		temp,U
	brpl	DHTcommanda			;branch if within range

	STOREI	ERRCode,$0C			;error code "C"
	Goto	Error	

DHTcommanda:
	sbrs	U,0					;skip next if bit 0 set
	rjmp	DHTcommandb
	SETB	GPIOR1,DHTUnit,temp	;user desires deg in Celsius
	rjmp	DHTcommand1
DHTcommandb:
	CLRB	GPIOR1,DHTUnit,temp	;user desires deg in Fahrenheit
;
DHTcommand1:
.if TESTING	; for testing
	STOREI16	RH_I,111,temp	;humidity, 10x
	STOREI16	RT_I,0x9200,temp;temperature, Celsius, 10x
.else
	rcall	DHTRead				;fetch DHT data
.endif
	LOAD	T,RT_I				;get integer into T
	LOAD	U,RT_D				;get decimal into U

	SKBS	GPIOR1,DHTUnit,temp	;skip next if deg in Celsius
	rjmp	DHTcommand2			;desire deg in Fahrenheit

	cpi		U,6					;compensate for rounding
	brlo	DHTcommand1a		;lower, leave integer alone		;
	inc		T					;round up by adding 1 to integer

DHTcommand1a:	;check for Fahrenheit or Celsius
	SKBS	GPIOR1,DHTSign,temp	;skip next if recognize sign
	andi	T,0x7f				;strip sign bit

	mov		U,T					;get integer into U
	GoSub	pushU				;put value on the stack
	PopY						;restore Y pointer
	ret							;return to caller
;
;   F = (C* 9 +2)/5+32;  // The +2 takes care of the better rounding 
DHTcommand2:	;calculate degrees in Fahrenheit
	bst		T,Bit7				;save sign bit in T
	andi	T,0x7f				;strip sign bit
	ldi		temp,10				;need 10x multiplier
	mul		T,temp				;multiply, result in r1:r0	
	clr		temp				;zero upper byte
	ADD16	r1,r0,temp,U		;add in the decimal portion

	;multiplicand = YH:YL, multiplier = H:T
	Copy16	YH,YL,r1,r0			;move result into YH:YL
	clr		H					;clear upper multiplier
	ldi		T,9					;load lower multiplier

	;result 3:0 = inbyteh:inbytel:H:T
	rcall	MPY16U				;calculate result
	Addi16	H,T,2				;add fudge factor for rounding

	; H:T / inchar:outchar = H:T, rem inbyte[h:l]
	clr		inchar				;zero upper byte
	ldi		outchar,50			;load divisor of 5 (10x for decimal shift)
	rcall	DIV16U				;calculate result
	brts	DHTcommand2a		;reading was negative, branch
	Addi16	H,T,32				;add 32 for Fahrenheit
	rjmp	DHTcommand2b		;save value

DHTcommand2a:	;calculate degrees in Fahrenheit. Subtract from
				; 32 for a negative reading 
	subi	T,low(32)
	sbci	H,high(32)
	neg		T

DHTcommand2b:
	mov		U,T					;save decimal result to U
	GoSub	pushU				;put value on the stack
	PopY						;restore Y pointer
	ret

DHTcommand9:
	STOREI	ERRCode,$0C			;error code "C"
	Goto	Error	
;
;********************************************************************
; DHHcommand: Read DHTxx humidity.
;********************************************************************
DHHcommand:
	PushY						;save Y pointer
	rcall	DHTRead				;fetch DHT data
	LOAD	U,RH_I				;get integer humidity in U
	GoSub	pushU				;save on stack
	PopY						;restore Y pointer
	ret
;
;********************************************************************
; DHRcommand: Return sensor status.  "1" means busy, "0" means ready
;********************************************************************
DHRcommand:
	clr		U					;preset U to "0"
	SKBC	GPIOR1,DHTBusy,temp	;okay to take a new reading
	ldi		U,1

DHRcommand1:
	GoSub	pushU				;put value on the stack
	ret
;
;********************************************************************
; DHScommand: Set or clear DHT "ignore sign" flag.  0 = ignore sign
;	1 = allow sign.  Default is "0", ignore sign
;********************************************************************
DHScommand:
	clr		U					;Ignore sign without a parameter
	GoSub	pushU				;save on stack
	GoSub	interpretlinev			
	Gosub	popU
	ldi		temp,1				;only values of [0..1] allowed
	cp		temp,U
	brmi	DHTcommand9			;branch if allowable exceeded 
	sbrs	U,0					;skip next if bit 0 set
	rjmp	DHScommand1
	SETB	GPIOR1,DHTSign,temp	;user desires deg in Celsius
	ret
;
DHScommand1:
	CLRB	GPIOR1,DHTSign,temp	;user desires deg in Fahrenheit
	ret

DHScommand9:
	STOREI	ERRCode,$0C			;error code "C"
	Goto	Error	
;
;********************************************************************
; DHTRead:  Initiates and reads the data from the DHT sensor.  The 
;	watchdog timer (16mS timeout) is used to detect a non-response 
;	condition, which invokes an error.  If there is a data and 
;	checksum mismatch, then an error is invoked.
;	- The data is stored in RAM at RT_I (integer), RT_D (decimal), 
;	  RH_I (integer), RH_D (decimal) in its native format. 
;	- Since the RTC feature is enabled then the TIMR0 counter value is
;	  saved and later restored so TIMR0's TCNT0 register can be used 
;	  to time the duration of the DHT's data pulse widths.  The TIMR0 
;	  clock divider is untouched.
;	USES:	temp, H, T, U, inbytel, inbyteh, Y-Ptr
;********************************************************************
DHTRead:
	PushStat					;save status register
	SKBC	GPIOR1,DHTBusy,temp	;okay to take a new reading
	rjmp	DHTRead7			;no, exit

	;enable watchdog timer for 16mS	
	STOREI	WDTCSR,(1<<WDCE|1<<WDE)
	STOREI	WDTCSR,((1<<WDIE)|(0<<WDP3)|(0<<WDP0)|(0<<WDE))
	wdr							;reset watchdog

	CLRB	GPIOR0,WDTIRQ		;insure WDTIRQ flag is clear

	;pulse the DHTPIN for 5mS to initiate data transfer
	ldi		temp,HTPulse		;load delay counter
	SETB	DHPORT-1,DHTPIN		;set DATA pin to output
	CLRB	DHPORT,DHTPIN		;set DATA pin low to initate xfer

DHTReada:
	Gosub	Delay1mS			;delay 1mS for pulse
	dec		temp				;decrement counter
	brne	DHTReada			;loop till zero

	SETB	DHPORT,DHTPIN		;release DATA pin
	CLRB	DHPORT-1,DHTPIN		;set DATA pin to input

	;enable pin-change interrupts for the DHTPIN
	STOREI	PCINT_I,(1<<PCINT_B);clear spurious PCINT's flag
	STOREI	PCINT_E,(1<<PCINT_B);enable pin-change IRQ's
	STOREI	PCINT_M,(1<<DHTPIN)	;enable PCINTx IRQ's

	;disable Timer OCRA Interupts
	CLRB	RTC_TIMSK,RTC_OCIEA,temp;disable RTC interrupts

	SetYPtr	RH_I				;set pointer to RAM

	ldi		inchar,HTBitTL+2	;load total bit counter (2 start bits + 40 data bits)
	ldi		inbytel,HTBits+2	;load bit counter (2 start bits + 8 data bits)
	ldi		inbyteh,HTBytes		;load data byte counter

	clr		U					;clear temporary holding register
	clr		T					;clear summing register

DHTRead1:
	LOAD	H,RTC_TCNT			;get current TCNT0 count
	sleep						;wait for IRQ
	nop							;benefit of the sleep instruction
	SKBC	GPIOR0,WDTIRQ		;skip next if WDTIRQ flag clear (no timeout)
	rjmp	DHTRead9			;sensor read timeout, jump for error

DHTRead1a:
	SKBS	DHPORT-2,DHTPIN		;skip next if DATA pin high
	rjmp	DHTRead1b			;DATA pin went low, check high time
	LOAD	H,TCNT0				;reload current TCNT0 count
	rjmp	DHTRead1

DHTRead1b:
	LOAD	temp,TCNT0			;get time duration from TIMR0
	sub		temp,H				;calculate difference
	cpi		temp,HTOne			;compare to high-bit duration
	brsh	DHTRead1d			;Must be a "1"
	rjmp	DHTRead1c			;detected a "0" bit, jump
;	cpi		temp,HTZero			;compare to lo-bit duration
;	brcc	DHTRead1c			;Must be a "0"

DHTRead1c:		;detected a "0" bit
	clc							;clear carry bit
	rjmp	DHTRead1e

DHTRead1d:		;detected a "1" bit
	sec							;set carry flag

DHTRead1e:		;rotate carry flag into bit position 0
	dec		inchar				;decrement total bit counter
	rol		U					;rotate bit into temp register
	dec		inbytel				;decrement bit counter
	brne	DHTRead1
	dec		inbyteh				;decrement byte counter
	breq	DHTRead1f			;finished fetching data, branch
	st		Y+,U				;save digit to RAM
	add		T,U					;add to summing register
	ldi		inbytel,HTBits		;re-load bit counter for 8 data bits
	rjmp	DHTRead1			;loop for more data

DHTRead1f:
	cp		U,T					;good checksum?
	brne	DHTRead8			;no, checksum error

DHTRead2:
	LOADI16	YH,YL,HTRdTmr 		;re-seed DHT read timeout
	STORE16	RT_TMR,YH,YL

	GoSub	WDDisable			;disable watchdog timer

	;re-enable Timer OCRA Interupts
	SETB	RTC_TIMSK,RTC_OCIEA,temp

;!!!!!!!!!!!!!!!!!!!!!!!!!
; add 5mS RTC offset
;!!!!!!!!!!!!!!!!!!!!!!!!!

	STOREI	PCINT_E,(0<<PCINT_B);disable pin-change IRQ's
	STOREI	PCINT_M,(0<<DHTPIN)	;disable PCINTx IRQ's
	STOREI	PCINT_I,(1<<PCINT_B);clear spurious PCINT's flag

DHTRead2a:	;Adjust RAM contents to show humidity
	SetYPtr	RH_D				;set pointer to RAM@RH_D
	LOAD16	inbytel,inbyteh,RH_I;set register to humidity value
	rcall	DHTConvert			;convert to integer and decima

DHTRead2b:	;Adjust RAM contents to show temperature
	SetYPtr	RT_D				;set pointer to RAM@RT_D
	LOAD16	inbytel,inbyteh,RT_I;set register to humidity value
	rcall	DHTConvert			;convert to integer and decimal

DHTRead7:
	PopStat						;restore status register
	ret

DHTRead8:	;bad checksum detected
	STOREI	ERRCode,$19
	Goto	Error	

DHTRead9:	;no response from DHT !!
	CLRB	GPIOR0,WDTIRQ		;set WDTIRQ flag
	STOREI	ERRCode,$18
	Goto	Error	
;
;*********************************************************************
;	DHTConvert:	Converts the 16-bit binary value in [inbyteh:inbytel]
;		to a separate integer and decimal.  Strips the sign bit before
;		conversion then adds it in after conversion.
;*********************************************************************
DHTConvert:
	bst		inbyteh,7			;save sign bit to T flag for later
	andi	inbyteh,0x7f		;strip off sign bit

	GoSub	BIN2BCD16			;convert to 6-digit BCD

	mov		temp,U				;copy decimal portion
	andi	temp,0x0F			;strip off upper digit
	st		Y,temp				;store humidity decimal to RAM@RH_D
	Subi16	YH,YL,1				;point to RAM@RH_I

	andi	U,0xF0				;strip low digit
	swap	U					;swap nibbles
	GoSub	decimaltobinary		;convert H:T:U to binary
	bld		U,7					;restore sign bit
	st		Y,U					;store humidity integer to RAM@RH_I
	ret							;return to caller

.endif
