Calling routines for "USB Serial I/O"
===============================================================================
RAM data:
	0A80 d cdc_line_coding
	0A88 b usb_configuration
	0A89 b cdc_line_rtsdtr
	0A8a b transmit_flush_timer
	0A8b b transmit_previous_timeout
	0A8c b usb_suspended
===============================================================================
********
usb_init: Initialize USB serial, sets "usb_configuratio@RAM" to "!0" if
	enumerated and "cdc_line_rtsdtr@RAM" = 0, enables global interrupts 
	and returns nothing.  
	- Uses R1 and R24
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_init

********
usb_shutdown: Shutdown and disconnect USB, sets "usb_suspended@RAM" to "1", 
	"usb_configuratio@RAM" to "0" and returns nothing.
	- Uses R24
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_shutdown

********
usb_configured:  Return 0 in R24 if the USB is not configured, or the 
	configuration number selected by the HOST once enumerated.
	- Uses R24

	call	usb_serial_configured

********
usb_serial_getchar: Get the next character from the RX buffer.  Returns with character 
	in R24 or 0XFFFF in R25:24 if nothing received.
	- Disables global interrupts during execution.
	- Uses R18, R19, R24 and R25

	call	usb_serial_getchar

********
usb_serial_available():  Returns the number of bytes available in the receive buffer
	in R24.
	- Uses R18, R24 and R25

	call	usb_serial_available

********
usb_serial_flush_input():  Discard any buffered bytes that have not been read.
	- Uses R18, R24 and R25

	call	usb_serial_flush_input

********
usb_serial_putchar(uint8_t c):  Transmit a single character held in R24.  Returns 0 in R24 on success or 
	0XFF in R24 if timeout or error
	- Uses R1, R18, R19, R20, R24 and R25
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_putchar

********
usb_serial_putchar_nowait(uint8_t c):  Transmit a single character held in R24.  This function always returns 
	immediately.  Returns 0 in R24 on success or 0XFF in R24 if there is no buffer space available.
	0XFF in R24 if timeout or error
	- Uses R24 and R25
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_putchar_nowait

********
usb_serial_write(const uint8_t *buffer, uint16_t size): Transmit a block of data.  Returns 0 
	in R24 on success, 0XFF in R24 on error.  This function is optimized for speed. Writing 
	64 byte blocks can achieve nearly the maximum possible USB speed.
	- Call with RAM buffer address in R25:24, block size in R23:22
	- Disables global interrupts during execution.
	- Uses R18, R19, R20, R21, R22, R23, R24, R25, R28, R29 (Y-ptr), R30 and R31 (Z-ptr)
	- Saves and restores R28 and R29 (Y-ptr).
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_write

********
usb_serial_flush_output(): Immediately transmit any buffered output by releasing the FIFO buffer for
	when the host wants it.
	- Uses R24 and R25
	- Disables global interrupts during execution.
	- NOTE: insure R1 = 0 before calling

	call	usb_serial_flush_output(void)

********
These functions read the various async serial settings.  They aren't actually 
	used by USB at all but they are set by the host so we can set them properly if we're converting the 
	USB to a real serial communication.

usb_serial_get_baud():			Returns with baud rate in R25:24:23:22
usb_serial_get_stopbits():		Returns with stop bits in R24
usb_serial_get_paritytype():		Returns with parity type in R24
usb_serial_get_numbits():		Returns with data bits in R24
usb_serial_get_control():		Returns with control bits in R24

********
This function writes the control signals, DCD, DSR, RI, etc
// There is no CTS signal.  If software on the host has transmitted
// data to you but you haven't been calling the getchar function,
// it remains buffered (either here or on the host) and can not be
// lost because you weren't listening at the right time, like it
// would in real serial communication.

usb_serial_set_control(uint8_t signals)


===================================================================
Receive Data Functions

#include <usb_serial.h>
usb_serial_available()

How many characters are waiting in the receive buffer?
This function returns the number of buffered bytes, or 0 if nothing is in the receive buffer. Double buffering is used, and this number only represents the first buffer, so in the case of non-zero return, additional bytes may be waiting in the second buffer but will not become visible with this function until the first buffer is fully consumed.

usb_serial_getchar()

Receive a character.
The next byte is returned (0 to 255), or -1 if an error or timeout occurs. If you wish to avoid waiting, usb_serial_available() should be called to verify at least 1 character is buffered so this function will return immediately.

usb_serial_flush_input()

Discard any buffered bytes that have not been read.
Transmit Data Functions

#include <usb_serial.h>
usb_serial_putchar(character)

Transmit a single character.
0 is returned if your character was transmitted successfully, or -1 if on timeout or error.

A timeout is implemented, so this function will always return. Subsequent calls after a timeout will NOT wait for a second timeout, but will immediately return with an error if transmission is not possible. This feature protects against lengthy delays when long strings of characters are transmitted without monitoring the return value. Only the first will wait for the timeout, all subsequent calls will not wait. Of course, when data transfer is possible again, your character is sent and timeout checking is reset to normal.

usb_serial_write(buffer, size)

Transmit a block of data.
0 returned on success, -1 on error.

This function is optimized for speed. Writing 64 byte blocks can achieve nearly the maximum possible USB speed.

usb_serial_putchar_nowait(character)

Transmit a single character.
0 is returned if your character was transmitted successfully, or -1 if on error.

This function always returns immediately. There is no timeout, so an error is returned if there is no buffer space available.

usb_serial_flush_output()

Transmit any buffered data as soon as possible.
Buffering in the USB controller is used to maximize throughput and minimize impact on your program's execution speed. Buffered data is automatically transmitted to the PC when your program does not perform more writes after a brief timeout, so normally this function is not necessary.

If you want to transmit all buffered data as soon as possible, this function causes any data buffered in the USB controller to be sent. Actual data USB transfer is always managed by the USB host (on your PC or Macintosh), so this function typically returns while data is still buffered, but will be transfered as soon as possible.

Serial Paramater Functions

#include <usb_serial.h>
usb_serial_get_baud()

Get the baud rate. Returned as a 32 bit unsigned long.
Data is always tranferred at full USB speed. This is merely the setting selected by the PC or Macintosh software, which is not used by USB. You do NOT need to constrain your transmission to this rate. However, many serial communication programs are coded very inefficiently because the programmer assumes "slow" data. You can easily overwhelm these programs, even when running on very fast machines, if you sustain full USB speed transfers!

Likewise, the host does not enforce this baud rate upon the software that is sending data to you. However, unlike real serial communication where you could lose data if you do not read fast enough, USB will always buffer data until you have read it. If the software does not implement timeouts, you may read at any speed and never lose a byte.

usb_serial_get_stopbits()

Get the number of stop bits.
USB_SERIAL_1_STOP
USB_SERIAL_1_5_STOP
USB_SERIAL_2_STOP
Stop bits are never included in the USB data stream. This is merely the setting selected by the PC software.

usb_serial_get_paritytype()

Get the parity type
USB_SERIAL_PARITY_NONE
USB_SERIAL_PARITY_ODD
USB_SERIAL_PARITY_EVEN
USB_SERIAL_PARITY_MARK
USB_SERIAL_PARITY_SPACE
Parity bits are never included in the USB data stream. This is merely the setting selected by the PC software.

usb_serial_get_numbits()

Get the number of data bits.
Possible values are 5, 6, 7, 8, 16. Data is always padded to full bytes when 5, 6 or 7 are selected.

usb_serial_get_control()

Get the RTS and DTR signal state.
The byte returned contains the following bits.

USB_SERIAL_DTR
USB_SERIAL_RTS
usb_serial_set_control(byte);

Set various control lines and status flags.
The following bits can be OR'd together to form the byte to transmit. This function should only be called if the byte is different from the previously transmitted one.

USB_SERIAL_DCD
USB_SERIAL_DSR
USB_SERIAL_BREAK
USB_SERIAL_RI
USB_SERIAL_FRAME_ERR
USB_SERIAL_PARITY_ERR
USB_SERIAL_OVERRUN_ERR
There is no CTS signal. If software on the host has transmitted data to you but you haven't been calling the getchar function, it remains buffered (either in local buffers or buffers on the host). It can not be lost because you weren't listening at the right time, like it would in real serial communication.

TODO: this function is untested. Does it work? Please email paul@pjrc.com if you have tried it....

=======================================
USB Connection Management Functions

#include <usb_serial.h>
usb_init()

Initialize the USB controller. This must be called before any others, typically as your program initializes everything. This function always returns immediately and never waits for any USB communication.
usb_configured()

Is the USB controller configured?
Returns 0 (false) if the host has not enumerated (auto-detected) and configured the USB controller. Returns non-zero (true) if configuration is complete.

Many PC and Macintosh drivers are not immediately ready to transfer data, even after configuration is complete. An additional delay of 1 second is generally a good idea to allow drivers to load on the PC before initiating data transfers.
