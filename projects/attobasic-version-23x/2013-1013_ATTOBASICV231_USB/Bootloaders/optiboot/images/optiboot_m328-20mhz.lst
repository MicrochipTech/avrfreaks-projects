
images/optiboot_m328-20mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000234  2**0
                  CONTENTS, READONLY
  2 .stab         00000b7c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a6e  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
    7e00:	0f 92       	push	r0
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	81 ff       	sbrs	r24, 1
    7e0c:	e3 d0       	rcall	.+454    	; 0x7fd4 <appStart>
    7e0e:	85 e0       	ldi	r24, 0x05	; 5
    7e10:	80 93 81 00 	sts	0x0081, r24
    7e14:	82 e0       	ldi	r24, 0x02	; 2
    7e16:	80 93 c0 00 	sts	0x00C0, r24
    7e1a:	88 e1       	ldi	r24, 0x18	; 24
    7e1c:	80 93 c1 00 	sts	0x00C1, r24
    7e20:	86 e0       	ldi	r24, 0x06	; 6
    7e22:	80 93 c2 00 	sts	0x00C2, r24
    7e26:	85 e1       	ldi	r24, 0x15	; 21
    7e28:	80 93 c4 00 	sts	0x00C4, r24
    7e2c:	8e e0       	ldi	r24, 0x0E	; 14
    7e2e:	bc d0       	rcall	.+376    	; 0x7fa8 <watchdogConfig>
    7e30:	25 9a       	sbi	0x04, 5	; 4
    7e32:	26 e0       	ldi	r18, 0x06	; 6
    7e34:	8c e3       	ldi	r24, 0x3C	; 60
    7e36:	9b ef       	ldi	r25, 0xFB	; 251
    7e38:	31 e0       	ldi	r19, 0x01	; 1
    7e3a:	90 93 85 00 	sts	0x0085, r25
    7e3e:	80 93 84 00 	sts	0x0084, r24
    7e42:	36 bb       	out	0x16, r19	; 22
    7e44:	b0 9b       	sbis	0x16, 0	; 22
    7e46:	fe cf       	rjmp	.-4      	; 0x7e44 <main+0x44>
    7e48:	1d 9a       	sbi	0x03, 5	; 3
    7e4a:	a8 95       	wdr
    7e4c:	21 50       	subi	r18, 0x01	; 1
    7e4e:	a9 f7       	brne	.-22     	; 0x7e3a <main+0x3a>
    7e50:	88 24       	eor	r8, r8
    7e52:	99 24       	eor	r9, r9
    7e54:	cc 24       	eor	r12, r12
    7e56:	c3 94       	inc	r12
    7e58:	f5 e0       	ldi	r31, 0x05	; 5
    7e5a:	df 2e       	mov	r13, r31
    7e5c:	e1 e1       	ldi	r30, 0x11	; 17
    7e5e:	ee 2e       	mov	r14, r30
    7e60:	73 e0       	ldi	r23, 0x03	; 3
    7e62:	f7 2e       	mov	r15, r23
    7e64:	95 d0       	rcall	.+298    	; 0x7f90 <getch>
    7e66:	81 34       	cpi	r24, 0x41	; 65
    7e68:	69 f4       	brne	.+26     	; 0x7e84 <main+0x84>
    7e6a:	92 d0       	rcall	.+292    	; 0x7f90 <getch>
    7e6c:	89 83       	std	Y+1, r24	; 0x01
    7e6e:	a2 d0       	rcall	.+324    	; 0x7fb4 <verifySpace>
    7e70:	89 81       	ldd	r24, Y+1	; 0x01
    7e72:	82 38       	cpi	r24, 0x82	; 130
    7e74:	11 f1       	breq	.+68     	; 0x7eba <main+0xba>
    7e76:	81 38       	cpi	r24, 0x81	; 129
    7e78:	11 f4       	brne	.+4      	; 0x7e7e <main+0x7e>
    7e7a:	85 e0       	ldi	r24, 0x05	; 5
    7e7c:	01 c0       	rjmp	.+2      	; 0x7e80 <main+0x80>
    7e7e:	83 e0       	ldi	r24, 0x03	; 3
    7e80:	80 d0       	rcall	.+256    	; 0x7f82 <putch>
    7e82:	7c c0       	rjmp	.+248    	; 0x7f7c <main+0x17c>
    7e84:	82 34       	cpi	r24, 0x42	; 66
    7e86:	11 f4       	brne	.+4      	; 0x7e8c <main+0x8c>
    7e88:	84 e1       	ldi	r24, 0x14	; 20
    7e8a:	03 c0       	rjmp	.+6      	; 0x7e92 <main+0x92>
    7e8c:	85 34       	cpi	r24, 0x45	; 69
    7e8e:	19 f4       	brne	.+6      	; 0x7e96 <main+0x96>
    7e90:	85 e0       	ldi	r24, 0x05	; 5
    7e92:	98 d0       	rcall	.+304    	; 0x7fc4 <getNch>
    7e94:	73 c0       	rjmp	.+230    	; 0x7f7c <main+0x17c>
    7e96:	85 35       	cpi	r24, 0x55	; 85
    7e98:	61 f4       	brne	.+24     	; 0x7eb2 <main+0xb2>
    7e9a:	7a d0       	rcall	.+244    	; 0x7f90 <getch>
    7e9c:	08 2f       	mov	r16, r24
    7e9e:	10 e0       	ldi	r17, 0x00	; 0
    7ea0:	77 d0       	rcall	.+238    	; 0x7f90 <getch>
    7ea2:	90 e0       	ldi	r25, 0x00	; 0
    7ea4:	98 2e       	mov	r9, r24
    7ea6:	88 24       	eor	r8, r8
    7ea8:	80 2a       	or	r8, r16
    7eaa:	91 2a       	or	r9, r17
    7eac:	88 0c       	add	r8, r8
    7eae:	99 1c       	adc	r9, r9
    7eb0:	64 c0       	rjmp	.+200    	; 0x7f7a <main+0x17a>
    7eb2:	86 35       	cpi	r24, 0x56	; 86
    7eb4:	21 f4       	brne	.+8      	; 0x7ebe <main+0xbe>
    7eb6:	84 e0       	ldi	r24, 0x04	; 4
    7eb8:	85 d0       	rcall	.+266    	; 0x7fc4 <getNch>
    7eba:	80 e0       	ldi	r24, 0x00	; 0
    7ebc:	e1 cf       	rjmp	.-62     	; 0x7e80 <main+0x80>
    7ebe:	84 36       	cpi	r24, 0x64	; 100
    7ec0:	09 f0       	breq	.+2      	; 0x7ec4 <main+0xc4>
    7ec2:	40 c0       	rjmp	.+128    	; 0x7f44 <main+0x144>
    7ec4:	65 d0       	rcall	.+202    	; 0x7f90 <getch>
    7ec6:	64 d0       	rcall	.+200    	; 0x7f90 <getch>
    7ec8:	b8 2e       	mov	r11, r24
    7eca:	62 d0       	rcall	.+196    	; 0x7f90 <getch>
    7ecc:	80 e0       	ldi	r24, 0x00	; 0
    7ece:	88 16       	cp	r8, r24
    7ed0:	80 e7       	ldi	r24, 0x70	; 112
    7ed2:	98 06       	cpc	r9, r24
    7ed4:	18 f4       	brcc	.+6      	; 0x7edc <main+0xdc>
    7ed6:	f4 01       	movw	r30, r8
    7ed8:	f7 be       	out	0x37, r15	; 55
    7eda:	e8 95       	spm
    7edc:	00 e0       	ldi	r16, 0x00	; 0
    7ede:	11 e0       	ldi	r17, 0x01	; 1
    7ee0:	57 d0       	rcall	.+174    	; 0x7f90 <getch>
    7ee2:	f8 01       	movw	r30, r16
    7ee4:	81 93       	st	Z+, r24
    7ee6:	8f 01       	movw	r16, r30
    7ee8:	be 16       	cp	r11, r30
    7eea:	d1 f7       	brne	.-12     	; 0x7ee0 <main+0xe0>
    7eec:	f0 e0       	ldi	r31, 0x00	; 0
    7eee:	8f 16       	cp	r8, r31
    7ef0:	f0 e7       	ldi	r31, 0x70	; 112
    7ef2:	9f 06       	cpc	r9, r31
    7ef4:	18 f0       	brcs	.+6      	; 0x7efc <main+0xfc>
    7ef6:	f4 01       	movw	r30, r8
    7ef8:	f7 be       	out	0x37, r15	; 55
    7efa:	e8 95       	spm
    7efc:	5b d0       	rcall	.+182    	; 0x7fb4 <verifySpace>
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	f4 01       	movw	r30, r8
    7f06:	a0 e0       	ldi	r26, 0x00	; 0
    7f08:	b1 e0       	ldi	r27, 0x01	; 1
    7f0a:	2c 91       	ld	r18, X
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
    7f0e:	11 96       	adiw	r26, 0x01	; 1
    7f10:	8c 91       	ld	r24, X
    7f12:	11 97       	sbiw	r26, 0x01	; 1
    7f14:	90 e0       	ldi	r25, 0x00	; 0
    7f16:	98 2f       	mov	r25, r24
    7f18:	88 27       	eor	r24, r24
    7f1a:	82 2b       	or	r24, r18
    7f1c:	93 2b       	or	r25, r19
    7f1e:	12 96       	adiw	r26, 0x02	; 2
    7f20:	0c 01       	movw	r0, r24
    7f22:	c7 be       	out	0x37, r12	; 55
    7f24:	e8 95       	spm
    7f26:	11 24       	eor	r1, r1
    7f28:	32 96       	adiw	r30, 0x02	; 2
    7f2a:	81 e0       	ldi	r24, 0x01	; 1
    7f2c:	a0 38       	cpi	r26, 0x80	; 128
    7f2e:	b8 07       	cpc	r27, r24
    7f30:	61 f7       	brne	.-40     	; 0x7f0a <main+0x10a>
    7f32:	f4 01       	movw	r30, r8
    7f34:	d7 be       	out	0x37, r13	; 55
    7f36:	e8 95       	spm
    7f38:	07 b6       	in	r0, 0x37	; 55
    7f3a:	00 fc       	sbrc	r0, 0
    7f3c:	fd cf       	rjmp	.-6      	; 0x7f38 <main+0x138>
    7f3e:	e7 be       	out	0x37, r14	; 55
    7f40:	e8 95       	spm
    7f42:	1c c0       	rjmp	.+56     	; 0x7f7c <main+0x17c>
    7f44:	84 37       	cpi	r24, 0x74	; 116
    7f46:	61 f4       	brne	.+24     	; 0x7f60 <main+0x160>
    7f48:	23 d0       	rcall	.+70     	; 0x7f90 <getch>
    7f4a:	22 d0       	rcall	.+68     	; 0x7f90 <getch>
    7f4c:	08 2f       	mov	r16, r24
    7f4e:	20 d0       	rcall	.+64     	; 0x7f90 <getch>
    7f50:	31 d0       	rcall	.+98     	; 0x7fb4 <verifySpace>
    7f52:	f4 01       	movw	r30, r8
    7f54:	85 91       	lpm	r24, Z+
    7f56:	4f 01       	movw	r8, r30
    7f58:	14 d0       	rcall	.+40     	; 0x7f82 <putch>
    7f5a:	01 50       	subi	r16, 0x01	; 1
    7f5c:	d1 f7       	brne	.-12     	; 0x7f52 <main+0x152>
    7f5e:	0e c0       	rjmp	.+28     	; 0x7f7c <main+0x17c>
    7f60:	85 37       	cpi	r24, 0x75	; 117
    7f62:	39 f4       	brne	.+14     	; 0x7f72 <main+0x172>
    7f64:	27 d0       	rcall	.+78     	; 0x7fb4 <verifySpace>
    7f66:	8e e1       	ldi	r24, 0x1E	; 30
    7f68:	0c d0       	rcall	.+24     	; 0x7f82 <putch>
    7f6a:	85 e9       	ldi	r24, 0x95	; 149
    7f6c:	0a d0       	rcall	.+20     	; 0x7f82 <putch>
    7f6e:	8f e0       	ldi	r24, 0x0F	; 15
    7f70:	87 cf       	rjmp	.-242    	; 0x7e80 <main+0x80>
    7f72:	81 35       	cpi	r24, 0x51	; 81
    7f74:	11 f4       	brne	.+4      	; 0x7f7a <main+0x17a>
    7f76:	88 e0       	ldi	r24, 0x08	; 8
    7f78:	17 d0       	rcall	.+46     	; 0x7fa8 <watchdogConfig>
    7f7a:	1c d0       	rcall	.+56     	; 0x7fb4 <verifySpace>
    7f7c:	80 e1       	ldi	r24, 0x10	; 16
    7f7e:	01 d0       	rcall	.+2      	; 0x7f82 <putch>
    7f80:	71 cf       	rjmp	.-286    	; 0x7e64 <main+0x64>

00007f82 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f82:	90 91 c0 00 	lds	r25, 0x00C0
    7f86:	95 ff       	sbrs	r25, 5
    7f88:	fc cf       	rjmp	.-8      	; 0x7f82 <putch>
  UART_UDR = ch;
    7f8a:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f8e:	08 95       	ret

00007f90 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f90:	80 91 c0 00 	lds	r24, 0x00C0
    7f94:	87 ff       	sbrs	r24, 7
    7f96:	fc cf       	rjmp	.-8      	; 0x7f90 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f98:	80 91 c0 00 	lds	r24, 0x00C0
    7f9c:	84 fd       	sbrc	r24, 4
    7f9e:	01 c0       	rjmp	.+2      	; 0x7fa2 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fa0:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fa2:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fa6:	08 95       	ret

00007fa8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fa8:	e0 e6       	ldi	r30, 0x60	; 96
    7faa:	f0 e0       	ldi	r31, 0x00	; 0
    7fac:	98 e1       	ldi	r25, 0x18	; 24
    7fae:	90 83       	st	Z, r25
  WDTCSR = x;
    7fb0:	80 83       	st	Z, r24
}
    7fb2:	08 95       	ret

00007fb4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fb4:	ed df       	rcall	.-38     	; 0x7f90 <getch>
    7fb6:	80 32       	cpi	r24, 0x20	; 32
    7fb8:	19 f0       	breq	.+6      	; 0x7fc0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fba:	88 e0       	ldi	r24, 0x08	; 8
    7fbc:	f5 df       	rcall	.-22     	; 0x7fa8 <watchdogConfig>
    7fbe:	ff cf       	rjmp	.-2      	; 0x7fbe <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fc0:	84 e1       	ldi	r24, 0x14	; 20
    7fc2:	df cf       	rjmp	.-66     	; 0x7f82 <putch>

00007fc4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fc4:	1f 93       	push	r17
    7fc6:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fc8:	e3 df       	rcall	.-58     	; 0x7f90 <getch>
    7fca:	11 50       	subi	r17, 0x01	; 1
    7fcc:	e9 f7       	brne	.-6      	; 0x7fc8 <getNch+0x4>
  verifySpace();
    7fce:	f2 df       	rcall	.-28     	; 0x7fb4 <verifySpace>
}
    7fd0:	1f 91       	pop	r17
    7fd2:	08 95       	ret

00007fd4 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fd4:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fd6:	80 e0       	ldi	r24, 0x00	; 0
    7fd8:	e7 df       	rcall	.-50     	; 0x7fa8 <watchdogConfig>
  __asm__ __volatile__ (
    7fda:	ee 27       	eor	r30, r30
    7fdc:	ff 27       	eor	r31, r31
    7fde:	09 94       	ijmp
