
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800100  00800100  00000472  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000125  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000070d  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000247  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000653  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000099  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	5c c0       	rjmp	.+184    	; 0xcc <__vector_9>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 30       	cpi	r26, 0x09	; 9
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	ce d0       	rcall	.+412    	; 0x1ee <main>
  52:	d3 c1       	rjmp	.+934    	; 0x3fa <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Init_all>:
///////////////////////////////////////
////  PWM_Init	Initializing PWM system
//////////////////
void PortInit(void)
{
DDRC=0; //all set as inputs 
  56:	17 b8       	out	0x07, r1	; 7
DDRB=0;
  58:	14 b8       	out	0x04, r1	; 4
DDRD=(1<PIND1);//for USART TXD
  5a:	1a b8       	out	0x0a, r1	; 10
////////////////////////////////////////////////////
void UART_Init(void)
{

// Baud Rate = 4800	
	UBRR0L=103;
  5c:	87 e6       	ldi	r24, 0x67	; 103
  5e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=0;
  62:	10 92 c5 00 	sts	0x00C5, r1

	// Set frame format: 8data, 1stop bit

UCSR0C=	(0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01); // Enable receiver and transmitter
  66:	86 e0       	ldi	r24, 0x06	; 6
  68:	80 93 c2 00 	sts	0x00C2, r24
UCSR0B=(0<<RXEN0)|(1<<TXEN0);
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	80 93 c1 00 	sts	0x00C1, r24

void Counter_Timer2_Init(void)
{

	
	TIMSK2=0;  //if 1 only overflow flag is enabled
  72:	10 92 70 00 	sts	0x0070, r1

	TCCR2A=0;
  76:	10 92 b0 00 	sts	0x00B0, r1

	TCCR2B=(1<<CS20)|(1<<CS21)|(0<<CS22);//setting prescaler ==clk/32
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	80 93 b1 00 	sts	0x00B1, r24
void PCINTInit (void)
	
	
	{
	
	PCICR=(1<<PCIE1);
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	80 93 68 00 	sts	0x0068, r24
	PCMSK1=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11)|(1<<PCINT12)|(1<<PCINT13);
  86:	8f e3       	ldi	r24, 0x3F	; 63
  88:	80 93 6c 00 	sts	0x006C, r24
UART_Init();
Counter_Timer2_Init();
PCINTInit();


}
  8c:	08 95       	ret

0000008e <PortInit>:
///////////////////////////////////////
////  PWM_Init	Initializing PWM system
//////////////////
void PortInit(void)
{
DDRC=0; //all set as inputs 
  8e:	17 b8       	out	0x07, r1	; 7
DDRB=0;
  90:	14 b8       	out	0x04, r1	; 4
DDRD=(1<PIND1);//for USART TXD
  92:	1a b8       	out	0x0a, r1	; 10


}
  94:	08 95       	ret

00000096 <UART_Init>:
////////////////////////////////////////////////////
void UART_Init(void)
{

// Baud Rate = 4800	
	UBRR0L=103;
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=0;
  9c:	10 92 c5 00 	sts	0x00C5, r1

	// Set frame format: 8data, 1stop bit

UCSR0C=	(0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01); // Enable receiver and transmitter
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	80 93 c2 00 	sts	0x00C2, r24
UCSR0B=(0<<RXEN0)|(1<<TXEN0);
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 93 c1 00 	sts	0x00C1, r24




}
  ac:	08 95       	ret

000000ae <Counter_Timer2_Init>:

void Counter_Timer2_Init(void)
{

	
	TIMSK2=0;  //if 1 only overflow flag is enabled
  ae:	10 92 70 00 	sts	0x0070, r1

	TCCR2A=0;
  b2:	10 92 b0 00 	sts	0x00B0, r1

	TCCR2B=(1<<CS20)|(1<<CS21)|(0<<CS22);//setting prescaler ==clk/32
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	80 93 b1 00 	sts	0x00B1, r24

	}
  bc:	08 95       	ret

000000be <PCINTInit>:
void PCINTInit (void)
	
	
	{
	
	PCICR=(1<<PCIE1);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 68 00 	sts	0x0068, r24
	PCMSK1=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11)|(1<<PCINT12)|(1<<PCINT13);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	80 93 6c 00 	sts	0x006C, r24
	
	
	}
  ca:	08 95       	ret

000000cc <__vector_9>:
/////////////////////////////////////////////////////////////////
////////////////TimerCounter2 Overflow Interrupt /////////////////
//////////////////////////////////////////////////////////////////

ISR(TIMER2_OVF_vect)//the timer just over flows after 1 ms and counts 0 to 255 in the next 1 ms
 {/*					//as servo signal is going to be between 1 and 2 ms this scheme works fine for RC signal decoding
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
if (CounterValue >= 1)
{
 Function=1;
	CounterValue=0;
	}*/
 }
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_4>:
 
 ////////////////////////////////////////////////////////////////////
 ////////////Pin Change Interrupt 2 /////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////
ISR(PCINT1_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
extern uint8_t CH2;// PORTC2,PCINT10 value
extern uint8_t CH3;	//PORTC3,PCINT11 value
extern uint8_t CH4;// PORTC4,PCINT12 value
extern uint8_t CH5;	//PORTC5,PCINT13 value
extern uint8_t STATUS_D; //port D value
uint8_t DValue=PINC;
  f0:	86 b1       	in	r24, 0x06	; 6
uint8_t temp2=PINC;
  f2:	26 b1       	in	r18, 0x06	; 6
static uint8_t temp;
STATUS_D = STATUS_D^DValue;//set bit for pin which changed signal.
  f4:	90 91 08 01 	lds	r25, 0x0108
  f8:	89 27       	eor	r24, r25
temp=STATUS_D;
  fa:	80 93 00 01 	sts	0x0100, r24
STATUS_D=temp;
DValue=temp2;
if ((CHECKBIT(STATUS_D, CH0Bit)))// if channel 0 signal changed
  fe:	98 2f       	mov	r25, r24
 100:	80 ff       	sbrs	r24, 0
 102:	09 c0       	rjmp	.+18     	; 0x116 <__vector_4+0x36>
{
if ((CHECKBIT(DValue,CH0Bit)))//if ch0 bit was set
 104:	20 ff       	sbrs	r18, 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <__vector_4+0x2e>
TCNT2=0;//initialize timer counter
 108:	10 92 b2 00 	sts	0x00B2, r1
 10c:	04 c0       	rjmp	.+8      	; 0x116 <__vector_4+0x36>
else CH0=TCNT2; //store timer counter in channel 0
 10e:	80 91 b2 00 	lds	r24, 0x00B2
 112:	80 93 01 01 	sts	0x0101, r24
}
STATUS_D=temp;
DValue=temp2;
if ((CHECKBIT(STATUS_D, CH1Bit)))// if channel 1 signal changed
 116:	91 ff       	sbrs	r25, 1
 118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_4+0x4c>
{
if ((CHECKBIT(DValue,CH1Bit)))//if ch1 bit was set
 11a:	21 ff       	sbrs	r18, 1
 11c:	03 c0       	rjmp	.+6      	; 0x124 <__vector_4+0x44>
TCNT2=0;//initialize timer counter
 11e:	10 92 b2 00 	sts	0x00B2, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <__vector_4+0x4c>
else CH1=TCNT2; //store timer counter in channel 1
 124:	80 91 b2 00 	lds	r24, 0x00B2
 128:	80 93 02 01 	sts	0x0102, r24
}
STATUS_D=temp;
DValue=temp2;
if ((CHECKBIT(STATUS_D, CH2Bit)))// if channel 2 signal changed
 12c:	92 ff       	sbrs	r25, 2
 12e:	09 c0       	rjmp	.+18     	; 0x142 <__vector_4+0x62>
{
if ((CHECKBIT(DValue,CH2Bit)))//if ch2 bit was set
 130:	22 ff       	sbrs	r18, 2
 132:	03 c0       	rjmp	.+6      	; 0x13a <__vector_4+0x5a>
TCNT2=0;//initialize timer counter
 134:	10 92 b2 00 	sts	0x00B2, r1
 138:	04 c0       	rjmp	.+8      	; 0x142 <__vector_4+0x62>
else CH2=TCNT2; //store timer counter in channel 2
 13a:	80 91 b2 00 	lds	r24, 0x00B2
 13e:	80 93 03 01 	sts	0x0103, r24
}
STATUS_D=temp;
DValue=temp2;
 if ((CHECKBIT(STATUS_D, CH3Bit)))// if channel 3 signal changed
 142:	93 ff       	sbrs	r25, 3
 144:	09 c0       	rjmp	.+18     	; 0x158 <__vector_4+0x78>
{
if ((CHECKBIT(DValue,CH3Bit)))//if ch3 bit was set
 146:	23 ff       	sbrs	r18, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <__vector_4+0x70>
TCNT2=0;//initialize timer counter
 14a:	10 92 b2 00 	sts	0x00B2, r1
 14e:	04 c0       	rjmp	.+8      	; 0x158 <__vector_4+0x78>
else CH3=TCNT2; //store timer counter in channel 3
 150:	80 91 b2 00 	lds	r24, 0x00B2
 154:	80 93 04 01 	sts	0x0104, r24
}
STATUS_D=temp;
 DValue=temp2;
 if ((CHECKBIT(STATUS_D, CH4Bit)))// if channel 4 signal changed
 158:	94 ff       	sbrs	r25, 4
 15a:	09 c0       	rjmp	.+18     	; 0x16e <__vector_4+0x8e>
{
if ((CHECKBIT(DValue,CH4Bit)))//if ch4 bit was set
 15c:	24 ff       	sbrs	r18, 4
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__vector_4+0x86>
TCNT2=0;//initialize timer counter
 160:	10 92 b2 00 	sts	0x00B2, r1
 164:	04 c0       	rjmp	.+8      	; 0x16e <__vector_4+0x8e>
else CH4=TCNT2; //store timer counter in channel 4
 166:	80 91 b2 00 	lds	r24, 0x00B2
 16a:	80 93 05 01 	sts	0x0105, r24
}
STATUS_D=temp;
 DValue=temp2;
if ((CHECKBIT(STATUS_D, CH5Bit)))// if channel 5 signal changed
 16e:	95 ff       	sbrs	r25, 5
 170:	09 c0       	rjmp	.+18     	; 0x184 <__vector_4+0xa4>
{
if ((CHECKBIT(DValue,CH5Bit)))//if ch5 bit was set
 172:	25 ff       	sbrs	r18, 5
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_4+0x9c>
TCNT2=0;//initialize timer counter
 176:	10 92 b2 00 	sts	0x00B2, r1
 17a:	04 c0       	rjmp	.+8      	; 0x184 <__vector_4+0xa4>
else CH5=TCNT2; //store timer counter in channel 5
 17c:	80 91 b2 00 	lds	r24, 0x00B2
 180:	80 93 06 01 	sts	0x0106, r24
}
STATUS_D=DValue;//store port D data in STATUS_D
 184:	20 93 08 01 	sts	0x0108, r18
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <USART_Transmit>:
}



void USART_Transmit( unsigned char data )
{
 198:	98 2f       	mov	r25, r24

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 19a:	80 91 c0 00 	lds	r24, 0x00C0
 19e:	85 ff       	sbrs	r24, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <USART_Transmit+0x2>
/* Put data into buffer, sends the data */
UDR0 = data;
 1a2:	90 93 c6 00 	sts	0x00C6, r25

}
 1a6:	08 95       	ret

000001a8 <Term_Send_Value_as_Digits>:
//***************************
// Convert byte to 3 ASCII digits and send
//***************************
void Term_Send_Value_as_Digits( uint8_t value )
{
 1a8:	28 2f       	mov	r18, r24
 1aa:	64 e6       	ldi	r22, 0x64	; 100
 1ac:	1a d1       	rcall	.+564    	; 0x3e2 <__udivmodqi4>
 1ae:	39 2f       	mov	r19, r25
 1b0:	82 2f       	mov	r24, r18
 1b2:	17 d1       	rcall	.+558    	; 0x3e2 <__udivmodqi4>
 1b4:	98 2f       	mov	r25, r24
 1b6:	90 5d       	subi	r25, 0xD0	; 208

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 1b8:	80 91 c0 00 	lds	r24, 0x00C0
 1bc:	85 ff       	sbrs	r24, 5
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <Term_Send_Value_as_Digits+0x10>
/* Put data into buffer, sends the data */
UDR0 = data;
 1c0:	90 93 c6 00 	sts	0x00C6, r25
 1c4:	83 2f       	mov	r24, r19
 1c6:	6a e0       	ldi	r22, 0x0A	; 10
 1c8:	0c d1       	rcall	.+536    	; 0x3e2 <__udivmodqi4>
 1ca:	28 2f       	mov	r18, r24
 1cc:	20 5d       	subi	r18, 0xD0	; 208
 1ce:	83 2f       	mov	r24, r19
 1d0:	08 d1       	rcall	.+528    	; 0x3e2 <__udivmodqi4>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 1d2:	80 91 c0 00 	lds	r24, 0x00C0
 1d6:	85 ff       	sbrs	r24, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <Term_Send_Value_as_Digits+0x2a>
/* Put data into buffer, sends the data */
UDR0 = data;
 1da:	20 93 c6 00 	sts	0x00C6, r18

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 1de:	80 91 c0 00 	lds	r24, 0x00C0
 1e2:	85 ff       	sbrs	r24, 5
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <Term_Send_Value_as_Digits+0x36>
        value -= 10;
    }
    
    USART_Transmit( digit );                  // Send 2nd digit
    
    USART_Transmit( '0' + value );            // Send first digit
 1e6:	90 5d       	subi	r25, 0xD0	; 208
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
/* Put data into buffer, sends the data */
UDR0 = data;
 1e8:	90 93 c6 00 	sts	0x00C6, r25
    }
    
    USART_Transmit( digit );                  // Send 2nd digit
    
    USART_Transmit( '0' + value );            // Send first digit
}
 1ec:	08 95       	ret

000001ee <main>:
 uint8_t STATUS_D;




int main(void) {
 1ee:	7f 92       	push	r7
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17

Init_all();
 204:	28 df       	rcall	.-432    	; 0x56 <Init_all>

sei();
 206:	78 94       	sei
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
/* Put data into buffer, sends the data */
UDR0 = data;
 208:	10 e2       	ldi	r17, 0x20	; 32

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 20a:	e3 e4       	ldi	r30, 0x43	; 67
 20c:	fe 2e       	mov	r15, r30
 20e:	08 e4       	ldi	r16, 0x48	; 72
 210:	71 e3       	ldi	r23, 0x31	; 49
 212:	77 2e       	mov	r7, r23
 214:	62 e3       	ldi	r22, 0x32	; 50
 216:	96 2e       	mov	r9, r22
 218:	53 e3       	ldi	r21, 0x33	; 51
 21a:	85 2e       	mov	r8, r21
 21c:	44 e3       	ldi	r20, 0x34	; 52
 21e:	b4 2e       	mov	r11, r20
 220:	35 e3       	ldi	r19, 0x35	; 53
 222:	a3 2e       	mov	r10, r19
 224:	26 e3       	ldi	r18, 0x36	; 54
 226:	c2 2e       	mov	r12, r18
 228:	9a e0       	ldi	r25, 0x0A	; 10
 22a:	d9 2e       	mov	r13, r25
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	e8 2e       	mov	r14, r24
 230:	80 91 c0 00 	lds	r24, 0x00C0
 234:	85 ff       	sbrs	r24, 5
 236:	fc cf       	rjmp	.-8      	; 0x230 <main+0x42>
/* Put data into buffer, sends the data */
UDR0 = data;
 238:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 23c:	80 91 c0 00 	lds	r24, 0x00C0
 240:	85 ff       	sbrs	r24, 5
 242:	fc cf       	rjmp	.-8      	; 0x23c <main+0x4e>
/* Put data into buffer, sends the data */
UDR0 = data;
 244:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 248:	80 91 c0 00 	lds	r24, 0x00C0
 24c:	85 ff       	sbrs	r24, 5
 24e:	fc cf       	rjmp	.-8      	; 0x248 <main+0x5a>
/* Put data into buffer, sends the data */
UDR0 = data;
 250:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 254:	80 91 c0 00 	lds	r24, 0x00C0
 258:	85 ff       	sbrs	r24, 5
 25a:	fc cf       	rjmp	.-8      	; 0x254 <main+0x66>
/* Put data into buffer, sends the data */
UDR0 = data;
 25c:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 260:	80 91 c0 00 	lds	r24, 0x00C0
 264:	85 ff       	sbrs	r24, 5
 266:	fc cf       	rjmp	.-8      	; 0x260 <main+0x72>
/* Put data into buffer, sends the data */
UDR0 = data;
 268:	70 92 c6 00 	sts	0x00C6, r7

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 26c:	80 91 c0 00 	lds	r24, 0x00C0
 270:	85 ff       	sbrs	r24, 5
 272:	fc cf       	rjmp	.-8      	; 0x26c <main+0x7e>
/* Put data into buffer, sends the data */
UDR0 = data;
 274:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('1');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH0);
 278:	80 91 01 01 	lds	r24, 0x0101
 27c:	95 df       	rcall	.-214    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 27e:	80 91 c0 00 	lds	r24, 0x00C0
 282:	85 ff       	sbrs	r24, 5
 284:	fc cf       	rjmp	.-8      	; 0x27e <main+0x90>
/* Put data into buffer, sends the data */
UDR0 = data;
 286:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 28a:	80 91 c0 00 	lds	r24, 0x00C0
 28e:	85 ff       	sbrs	r24, 5
 290:	fc cf       	rjmp	.-8      	; 0x28a <main+0x9c>
/* Put data into buffer, sends the data */
UDR0 = data;
 292:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 296:	80 91 c0 00 	lds	r24, 0x00C0
 29a:	85 ff       	sbrs	r24, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <main+0xa8>
/* Put data into buffer, sends the data */
UDR0 = data;
 29e:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2a2:	80 91 c0 00 	lds	r24, 0x00C0
 2a6:	85 ff       	sbrs	r24, 5
 2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <main+0xb4>
/* Put data into buffer, sends the data */
UDR0 = data;
 2aa:	90 92 c6 00 	sts	0x00C6, r9

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2ae:	80 91 c0 00 	lds	r24, 0x00C0
 2b2:	85 ff       	sbrs	r24, 5
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <main+0xc0>
/* Put data into buffer, sends the data */
UDR0 = data;
 2b6:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('2');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH1);
 2ba:	80 91 02 01 	lds	r24, 0x0102
 2be:	74 df       	rcall	.-280    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2c0:	80 91 c0 00 	lds	r24, 0x00C0
 2c4:	85 ff       	sbrs	r24, 5
 2c6:	fc cf       	rjmp	.-8      	; 0x2c0 <main+0xd2>
/* Put data into buffer, sends the data */
UDR0 = data;
 2c8:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2cc:	80 91 c0 00 	lds	r24, 0x00C0
 2d0:	85 ff       	sbrs	r24, 5
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <main+0xde>
/* Put data into buffer, sends the data */
UDR0 = data;
 2d4:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2d8:	80 91 c0 00 	lds	r24, 0x00C0
 2dc:	85 ff       	sbrs	r24, 5
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <main+0xea>
/* Put data into buffer, sends the data */
UDR0 = data;
 2e0:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2e4:	80 91 c0 00 	lds	r24, 0x00C0
 2e8:	85 ff       	sbrs	r24, 5
 2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <main+0xf6>
/* Put data into buffer, sends the data */
UDR0 = data;
 2ec:	80 92 c6 00 	sts	0x00C6, r8

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 2f0:	80 91 c0 00 	lds	r24, 0x00C0
 2f4:	85 ff       	sbrs	r24, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <main+0x102>
/* Put data into buffer, sends the data */
UDR0 = data;
 2f8:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('3');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH2);
 2fc:	80 91 03 01 	lds	r24, 0x0103
 300:	53 df       	rcall	.-346    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 302:	80 91 c0 00 	lds	r24, 0x00C0
 306:	85 ff       	sbrs	r24, 5
 308:	fc cf       	rjmp	.-8      	; 0x302 <__stack+0x3>
/* Put data into buffer, sends the data */
UDR0 = data;
 30a:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 30e:	80 91 c0 00 	lds	r24, 0x00C0
 312:	85 ff       	sbrs	r24, 5
 314:	fc cf       	rjmp	.-8      	; 0x30e <__stack+0xf>
/* Put data into buffer, sends the data */
UDR0 = data;
 316:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 31a:	80 91 c0 00 	lds	r24, 0x00C0
 31e:	85 ff       	sbrs	r24, 5
 320:	fc cf       	rjmp	.-8      	; 0x31a <__stack+0x1b>
/* Put data into buffer, sends the data */
UDR0 = data;
 322:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 326:	80 91 c0 00 	lds	r24, 0x00C0
 32a:	85 ff       	sbrs	r24, 5
 32c:	fc cf       	rjmp	.-8      	; 0x326 <__stack+0x27>
/* Put data into buffer, sends the data */
UDR0 = data;
 32e:	b0 92 c6 00 	sts	0x00C6, r11

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 332:	80 91 c0 00 	lds	r24, 0x00C0
 336:	85 ff       	sbrs	r24, 5
 338:	fc cf       	rjmp	.-8      	; 0x332 <__stack+0x33>
/* Put data into buffer, sends the data */
UDR0 = data;
 33a:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('4');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH3);
 33e:	80 91 04 01 	lds	r24, 0x0104
 342:	32 df       	rcall	.-412    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 344:	80 91 c0 00 	lds	r24, 0x00C0
 348:	85 ff       	sbrs	r24, 5
 34a:	fc cf       	rjmp	.-8      	; 0x344 <__stack+0x45>
/* Put data into buffer, sends the data */
UDR0 = data;
 34c:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 350:	80 91 c0 00 	lds	r24, 0x00C0
 354:	85 ff       	sbrs	r24, 5
 356:	fc cf       	rjmp	.-8      	; 0x350 <__stack+0x51>
/* Put data into buffer, sends the data */
UDR0 = data;
 358:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 35c:	80 91 c0 00 	lds	r24, 0x00C0
 360:	85 ff       	sbrs	r24, 5
 362:	fc cf       	rjmp	.-8      	; 0x35c <__stack+0x5d>
/* Put data into buffer, sends the data */
UDR0 = data;
 364:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 368:	80 91 c0 00 	lds	r24, 0x00C0
 36c:	85 ff       	sbrs	r24, 5
 36e:	fc cf       	rjmp	.-8      	; 0x368 <__stack+0x69>
/* Put data into buffer, sends the data */
UDR0 = data;
 370:	a0 92 c6 00 	sts	0x00C6, r10

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 374:	80 91 c0 00 	lds	r24, 0x00C0
 378:	85 ff       	sbrs	r24, 5
 37a:	fc cf       	rjmp	.-8      	; 0x374 <__stack+0x75>
/* Put data into buffer, sends the data */
UDR0 = data;
 37c:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('5');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH4);
 380:	80 91 05 01 	lds	r24, 0x0105
 384:	11 df       	rcall	.-478    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 386:	80 91 c0 00 	lds	r24, 0x00C0
 38a:	85 ff       	sbrs	r24, 5
 38c:	fc cf       	rjmp	.-8      	; 0x386 <__stack+0x87>
/* Put data into buffer, sends the data */
UDR0 = data;
 38e:	10 93 c6 00 	sts	0x00C6, r17

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 392:	80 91 c0 00 	lds	r24, 0x00C0
 396:	85 ff       	sbrs	r24, 5
 398:	fc cf       	rjmp	.-8      	; 0x392 <__stack+0x93>
/* Put data into buffer, sends the data */
UDR0 = data;
 39a:	f0 92 c6 00 	sts	0x00C6, r15

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 39e:	80 91 c0 00 	lds	r24, 0x00C0
 3a2:	85 ff       	sbrs	r24, 5
 3a4:	fc cf       	rjmp	.-8      	; 0x39e <__stack+0x9f>
/* Put data into buffer, sends the data */
UDR0 = data;
 3a6:	00 93 c6 00 	sts	0x00C6, r16

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3aa:	80 91 c0 00 	lds	r24, 0x00C0
 3ae:	85 ff       	sbrs	r24, 5
 3b0:	fc cf       	rjmp	.-8      	; 0x3aa <__stack+0xab>
/* Put data into buffer, sends the data */
UDR0 = data;
 3b2:	c0 92 c6 00 	sts	0x00C6, r12

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3b6:	80 91 c0 00 	lds	r24, 0x00C0
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <__stack+0xb7>
/* Put data into buffer, sends the data */
UDR0 = data;
 3be:	10 93 c6 00 	sts	0x00C6, r17
USART_Transmit(32);		//Transmit Space
USART_Transmit('C');
USART_Transmit('H');
USART_Transmit('6');
USART_Transmit(' ');
Term_Send_Value_as_Digits(CH5);
 3c2:	80 91 06 01 	lds	r24, 0x0106
 3c6:	f0 de       	rcall	.-544    	; 0x1a8 <Term_Send_Value_as_Digits>

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3c8:	80 91 c0 00 	lds	r24, 0x00C0
 3cc:	85 ff       	sbrs	r24, 5
 3ce:	fc cf       	rjmp	.-8      	; 0x3c8 <__stack+0xc9>
/* Put data into buffer, sends the data */
UDR0 = data;
 3d0:	d0 92 c6 00 	sts	0x00C6, r13

void USART_Transmit( unsigned char data )
{

/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) );
 3d4:	80 91 c0 00 	lds	r24, 0x00C0
 3d8:	85 ff       	sbrs	r24, 5
 3da:	fc cf       	rjmp	.-8      	; 0x3d4 <__stack+0xd5>
/* Put data into buffer, sends the data */
UDR0 = data;
 3dc:	e0 92 c6 00 	sts	0x00C6, r14
 3e0:	27 cf       	rjmp	.-434    	; 0x230 <main+0x42>

000003e2 <__udivmodqi4>:
 3e2:	99 1b       	sub	r25, r25
 3e4:	79 e0       	ldi	r23, 0x09	; 9
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <__udivmodqi4_ep>

000003e8 <__udivmodqi4_loop>:
 3e8:	99 1f       	adc	r25, r25
 3ea:	96 17       	cp	r25, r22
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__udivmodqi4_ep>
 3ee:	96 1b       	sub	r25, r22

000003f0 <__udivmodqi4_ep>:
 3f0:	88 1f       	adc	r24, r24
 3f2:	7a 95       	dec	r23
 3f4:	c9 f7       	brne	.-14     	; 0x3e8 <__udivmodqi4_loop>
 3f6:	80 95       	com	r24
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
