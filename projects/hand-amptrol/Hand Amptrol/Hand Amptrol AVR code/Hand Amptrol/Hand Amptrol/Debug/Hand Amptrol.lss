
Hand Amptrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  00800060  00800060  00000744  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008af  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ff  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000435  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c1  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f2  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 3b       	cpi	r26, 0xB6	; 182
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	c8 d0       	rcall	.+400    	; 0x1d4 <main>
  44:	33 c3       	rjmp	.+1638   	; 0x6ac <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_11>:
int16_t ADC_TEMP;
int16_t ADC_VALUE;
uint8_t SET_SWITCH_COUNT = 0;
uint8_t ADC_LOCK=0;

EMPTY_INTERRUPT(ADC_vect);
  48:	18 95       	reti

0000004a <adc_setup>:


void adc_setup(void)
{
	ADMUX &= ~(0x1f);
  4a:	87 b1       	in	r24, 0x07	; 7
  4c:	80 7e       	andi	r24, 0xE0	; 224
  4e:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (((ADC_MUX & 0x07)<<2) | (1<<ADC_MUX_POL) | (ADC_GAIN_HILOW & 0x01));
  50:	87 b1       	in	r24, 0x07	; 7
  52:	83 61       	ori	r24, 0x13	; 19
  54:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~((1<<REFS0) | (1<<REFS1));
  56:	87 b1       	in	r24, 0x07	; 7
  58:	8f 73       	andi	r24, 0x3F	; 63
  5a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<REFS1);
  5c:	3f 9a       	sbi	0x07, 7	; 7
	ADCSRA &= ~((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
  5e:	86 b1       	in	r24, 0x06	; 6
  60:	88 7f       	andi	r24, 0xF8	; 248
  62:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS2)) | (1<<ADEN) | (1<<ADIE);
  64:	86 b1       	in	r24, 0x06	; 6
  66:	8d 68       	ori	r24, 0x8D	; 141
  68:	86 b9       	out	0x06, r24	; 6
	ADCSRB &= ~((1<<GSEL) | (1<<MUX5));
  6a:	83 b1       	in	r24, 0x03	; 3
  6c:	87 7b       	andi	r24, 0xB7	; 183
  6e:	83 b9       	out	0x03, r24	; 3
	ADCSRB |= ((((ADC_MUX & 1<<3)>>3)<<MUX5) | (((ADC_GAIN_HILOW & 1<<1)>>1)<<GSEL)) | (1<<BIN) | (1<<REFS2);
  70:	83 b1       	in	r24, 0x03	; 3
  72:	88 69       	ori	r24, 0x98	; 152
  74:	83 b9       	out	0x03, r24	; 3
	DIDR0 |= (1<<ADC5D) | (1<<ADC6D);
  76:	81 b1       	in	r24, 0x01	; 1
  78:	80 6c       	ori	r24, 0xC0	; 192
  7a:	81 b9       	out	0x01, r24	; 1
  7c:	08 95       	ret

0000007e <adc_read>:
	
}

void adc_read(void)
{
	set_sleep_mode(SLEEP_MODE_ADC);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	87 7e       	andi	r24, 0xE7	; 231
  82:	88 60       	ori	r24, 0x08	; 8
  84:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
  86:	85 b7       	in	r24, 0x35	; 53
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	85 bf       	out	0x35, r24	; 53
	sei();
  8c:	78 94       	sei
	sleep_cpu();
  8e:	88 95       	sleep
	sleep_disable();
  90:	85 b7       	in	r24, 0x35	; 53
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	85 bf       	out	0x35, r24	; 53
  96:	08 95       	ret

00000098 <adc>:

}

void adc(void)
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
	ADMUX &= ~(1<<ADC_MUX_POL);
  9e:	39 98       	cbi	0x07, 1	; 7
	ADCSRB |= (1<<BIN);
  a0:	1f 9a       	sbi	0x03, 7	; 3
	adc_read();
  a2:	ed df       	rcall	.-38     	; 0x7e <adc_read>
	ADC_TEMP = ADCW;
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	80 93 a3 00 	sts	0x00A3, r24
  ac:	90 93 a4 00 	sts	0x00A4, r25
/* this is for 11bit bipolar sampling not working right at low voltage so will leave be	
*/
	if ((ADC_TEMP>>9)== 1) 
  b0:	29 2f       	mov	r18, r25
  b2:	25 95       	asr	r18
  b4:	39 2f       	mov	r19, r25
  b6:	33 0f       	add	r19, r19
  b8:	33 0b       	sbc	r19, r19
  ba:	21 30       	cpi	r18, 0x01	; 1
  bc:	31 05       	cpc	r19, r1
  be:	71 f4       	brne	.+28     	; 0xdc <adc+0x44>
	{
		ADMUX |= (1<<ADC_MUX_POL);
  c0:	39 9a       	sbi	0x07, 1	; 7
		ADCSRB &= ~(1<<BIN);
  c2:	1f 98       	cbi	0x03, 7	; 3
		adc_read();
  c4:	dc df       	rcall	.-72     	; 0x7e <adc_read>
		adc_read();
  c6:	db df       	rcall	.-74     	; 0x7e <adc_read>
		ADC_TEMP=-ADCW;		
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	91 95       	neg	r25
  ce:	81 95       	neg	r24
  d0:	91 09       	sbc	r25, r1
  d2:	90 93 a4 00 	sts	0x00A4, r25
  d6:	80 93 a3 00 	sts	0x00A3, r24
  da:	0a c0       	rjmp	.+20     	; 0xf0 <adc+0x58>

	}
	else
	{
		ADMUX &= ~(1<<ADC_MUX_POL);
  dc:	39 98       	cbi	0x07, 1	; 7
		ADCSRB &= ~(1<<BIN);
  de:	1f 98       	cbi	0x03, 7	; 3
		adc_read();
  e0:	ce df       	rcall	.-100    	; 0x7e <adc_read>
		adc_read();
  e2:	cd df       	rcall	.-102    	; 0x7e <adc_read>
		ADC_TEMP=ADCW;
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	90 93 a4 00 	sts	0x00A4, r25
  ec:	80 93 a3 00 	sts	0x00A3, r24
		
	}
/**/
	if (ADC_TEMP >= SET_SWITCH_LVL)
  f0:	80 91 a3 00 	lds	r24, 0x00A3
  f4:	90 91 a4 00 	lds	r25, 0x00A4
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	91 05       	cpc	r25, r1
  fc:	d4 f0       	brlt	.+52     	; 0x132 <adc+0x9a>
	{
		if (SET_SWITCH_COUNT <= SET_SWITCH_COUNT_LEN)
  fe:	80 91 61 00 	lds	r24, 0x0061
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	20 f4       	brcc	.+8      	; 0x10e <adc+0x76>
		{
			SET_SWITCH_COUNT++;			
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 61 00 	sts	0x0061, r24
 10c:	5f c0       	rjmp	.+190    	; 0x1cc <adc+0x134>
		} 
		else
		{
			if (SET_SWITCH_COUNT == (SET_SWITCH_COUNT_LEN+1))
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	39 f4       	brne	.+14     	; 0x120 <adc+0x88>
			{
				ADC_LOCK ^= 1;
 112:	20 91 60 00 	lds	r18, 0x0060
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	92 27       	eor	r25, r18
 11a:	90 93 60 00 	sts	0x0060, r25
 11e:	02 c0       	rjmp	.+4      	; 0x124 <adc+0x8c>
			}
			if (SET_SWITCH_COUNT <= SET_SWITCH_COUNT_LEN_2)
 120:	8f 3f       	cpi	r24, 0xFF	; 255
 122:	21 f0       	breq	.+8      	; 0x12c <adc+0x94>
			{
				SET_SWITCH_COUNT++;
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 61 00 	sts	0x0061, r24
 12a:	50 c0       	rjmp	.+160    	; 0x1cc <adc+0x134>
			}
			else
			{
				SET_SWITCH_COUNT=0;
 12c:	10 92 61 00 	sts	0x0061, r1
 130:	4d c0       	rjmp	.+154    	; 0x1cc <adc+0x134>
			}
		}
	}
	else
	{
		SET_SWITCH_COUNT=0;
 132:	10 92 61 00 	sts	0x0061, r1
		if (ADC_LOCK == 0)
 136:	20 91 60 00 	lds	r18, 0x0060
 13a:	21 11       	cpse	r18, r1
 13c:	47 c0       	rjmp	.+142    	; 0x1cc <adc+0x134>
		{
			ADC_BUFFER_SUM -= ADC_BUFFER[ADC_BUFFER_POS];
 13e:	c0 91 62 00 	lds	r28, 0x0062
 142:	ec 2f       	mov	r30, r28
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ed 59       	subi	r30, 0x9D	; 157
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	00 81       	ld	r16, Z
 150:	11 81       	ldd	r17, Z+1	; 0x01
 152:	22 27       	eor	r18, r18
 154:	17 fd       	sbrc	r17, 7
 156:	20 95       	com	r18
 158:	32 2f       	mov	r19, r18
 15a:	40 91 a5 00 	lds	r20, 0x00A5
 15e:	50 91 a6 00 	lds	r21, 0x00A6
 162:	60 91 a7 00 	lds	r22, 0x00A7
 166:	70 91 a8 00 	lds	r23, 0x00A8
 16a:	40 1b       	sub	r20, r16
 16c:	51 0b       	sbc	r21, r17
 16e:	62 0b       	sbc	r22, r18
 170:	73 0b       	sbc	r23, r19
			ADC_BUFFER[ADC_BUFFER_POS] = ADC_TEMP;
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
			ADC_BUFFER_SUM += ADC_BUFFER[ADC_BUFFER_POS];
 176:	aa 27       	eor	r26, r26
 178:	97 fd       	sbrc	r25, 7
 17a:	a0 95       	com	r26
 17c:	ba 2f       	mov	r27, r26
 17e:	48 0f       	add	r20, r24
 180:	59 1f       	adc	r21, r25
 182:	6a 1f       	adc	r22, r26
 184:	7b 1f       	adc	r23, r27
 186:	40 93 a5 00 	sts	0x00A5, r20
 18a:	50 93 a6 00 	sts	0x00A6, r21
 18e:	60 93 a7 00 	sts	0x00A7, r22
 192:	70 93 a8 00 	sts	0x00A8, r23
			if (ADC_BUFFER_POS == (ADC_BUFFER_POS_len-1) )
 196:	cf 31       	cpi	r28, 0x1F	; 31
 198:	19 f4       	brne	.+6      	; 0x1a0 <adc+0x108>
			{
				ADC_BUFFER_POS=0;
 19a:	10 92 62 00 	sts	0x0062, r1
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <adc+0x10e>
			}
			else
			{
				ADC_BUFFER_POS ++;
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	c0 93 62 00 	sts	0x0062, r28
			}
			ADC_VALUE = (ADC_BUFFER_SUM / ADC_BUFFER_POS_len);
 1a6:	db 01       	movw	r26, r22
 1a8:	ca 01       	movw	r24, r20
 1aa:	77 23       	and	r23, r23
 1ac:	1c f4       	brge	.+6      	; 0x1b4 <adc+0x11c>
 1ae:	4f 96       	adiw	r24, 0x1f	; 31
 1b0:	a1 1d       	adc	r26, r1
 1b2:	b1 1d       	adc	r27, r1
 1b4:	68 94       	set
 1b6:	14 f8       	bld	r1, 4
 1b8:	b5 95       	asr	r27
 1ba:	a7 95       	ror	r26
 1bc:	97 95       	ror	r25
 1be:	87 95       	ror	r24
 1c0:	16 94       	lsr	r1
 1c2:	d1 f7       	brne	.-12     	; 0x1b8 <adc+0x120>
 1c4:	90 93 aa 00 	sts	0x00AA, r25
 1c8:	80 93 a9 00 	sts	0x00A9, r24
		}
	}
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <main>:
uint8_t POT_OUTPUT;


int main(void)
{
	adc_setup();
 1d4:	3a df       	rcall	.-396    	; 0x4a <adc_setup>
	usi_spi_init();
 1d6:	70 d0       	rcall	.+224    	; 0x2b8 <usi_spi_init>
	DDRA |= (1<<PORTA4);
 1d8:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA |= (1<<PORTA4);
 1da:	dc 9a       	sbi	0x1b, 4	; 27
    while(1)
    {
	
		for (uint8_t i = 0; i < 25 ; i++)
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
		usi_putc(0x40);
		usi_putv(ADC_VALUE,10,4);
		usi_putv(POT_OUTPUT,10,4);		
		usi_putc(' ');
		usi_putc(' ');
		usi_putc(' ');
 1de:	d9 e1       	ldi	r29, 0x19	; 25
		_delay_us(500);

		}
		if (((ADC_VALUE+POT_OUTPUT_OFFSET)/POT_OUTPUT_SCALE) >= 255)
		{
			POT_OUTPUT=255;
 1e0:	1f ef       	ldi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	97 e0       	ldi	r25, 0x07	; 7
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x12>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x18>
 1ec:	00 00       	nop
    {
	
		for (uint8_t i = 0; i < 25 ; i++)
	{
		_delay_ms(1);	
		usi_putc(0xfe);
 1ee:	6e ef       	ldi	r22, 0xFE	; 254
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	76 d0       	rcall	.+236    	; 0x2e0 <usi_spi_out>
		usi_putc(0x45);
 1f4:	65 e4       	ldi	r22, 0x45	; 69
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	73 d0       	rcall	.+230    	; 0x2e0 <usi_spi_out>
		usi_putc(0x40);
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	70 d0       	rcall	.+224    	; 0x2e0 <usi_spi_out>
		usi_putv(ADC_VALUE,10,4);
 200:	44 e0       	ldi	r20, 0x04	; 4
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	80 91 a9 00 	lds	r24, 0x00A9
 208:	90 91 aa 00 	lds	r25, 0x00AA
 20c:	8a d0       	rcall	.+276    	; 0x322 <usi_putv>
		usi_putv(POT_OUTPUT,10,4);		
 20e:	80 91 ab 00 	lds	r24, 0x00AB
 212:	44 e0       	ldi	r20, 0x04	; 4
 214:	6a e0       	ldi	r22, 0x0A	; 10
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	84 d0       	rcall	.+264    	; 0x322 <usi_putv>
		usi_putc(' ');
 21a:	60 e2       	ldi	r22, 0x20	; 32
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	60 d0       	rcall	.+192    	; 0x2e0 <usi_spi_out>
		usi_putc(' ');
 220:	60 e2       	ldi	r22, 0x20	; 32
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	5d d0       	rcall	.+186    	; 0x2e0 <usi_spi_out>
		usi_putc(' ');
 226:	60 e2       	ldi	r22, 0x20	; 32
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	5a d0       	rcall	.+180    	; 0x2e0 <usi_spi_out>
 22c:	fd 2e       	mov	r15, r29
		for (uint8_t x = 0; x < 25 ; x++)
		{
		adc();
 22e:	34 df       	rcall	.-408    	; 0x98 <adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	87 ee       	ldi	r24, 0xE7	; 231
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <main+0x60>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x66>
 23a:	00 00       	nop
 23c:	fa 94       	dec	r15
		usi_putv(ADC_VALUE,10,4);
		usi_putv(POT_OUTPUT,10,4);		
		usi_putc(' ');
		usi_putc(' ');
		usi_putc(' ');
		for (uint8_t x = 0; x < 25 ; x++)
 23e:	b9 f7       	brne	.-18     	; 0x22e <main+0x5a>
		{
		adc();
		_delay_us(500);

		}
		if (((ADC_VALUE+POT_OUTPUT_OFFSET)/POT_OUTPUT_SCALE) >= 255)
 240:	60 91 a9 00 	lds	r22, 0x00A9
 244:	70 91 aa 00 	lds	r23, 0x00AA
 248:	6e 53       	subi	r22, 0x3E	; 62
 24a:	7e 4f       	sbci	r23, 0xFE	; 254
 24c:	88 27       	eor	r24, r24
 24e:	77 fd       	sbrc	r23, 7
 250:	80 95       	com	r24
 252:	98 2f       	mov	r25, r24
 254:	3a d1       	rcall	.+628    	; 0x4ca <__floatsisf>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 ec       	ldi	r20, 0xC0	; 192
 25c:	5f e3       	ldi	r21, 0x3F	; 63
 25e:	9f d0       	rcall	.+318    	; 0x39e <__divsf3>
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	4f e7       	ldi	r20, 0x7F	; 127
 26a:	53 e4       	ldi	r21, 0x43	; 67
 26c:	de d1       	rcall	.+956    	; 0x62a <__gesf2>
 26e:	88 23       	and	r24, r24
 270:	1c f0       	brlt	.+6      	; 0x278 <__stack+0x19>
		{
			POT_OUTPUT=255;
 272:	10 93 ab 00 	sts	0x00AB, r17
 276:	05 c0       	rjmp	.+10     	; 0x282 <__stack+0x23>
		}
		else
		{
			POT_OUTPUT = (ADC_VALUE+POT_OUTPUT_OFFSET)/POT_OUTPUT_SCALE;	
 278:	c7 01       	movw	r24, r14
 27a:	b6 01       	movw	r22, r12
 27c:	f8 d0       	rcall	.+496    	; 0x46e <__fixunssfsi>
 27e:	60 93 ab 00 	sts	0x00AB, r22
		}
		if (((ADC_VALUE+POT_OUTPUT_OFFSET)/POT_OUTPUT_SCALE) <= 0)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	a9 01       	movw	r20, r18
 288:	c7 01       	movw	r24, r14
 28a:	b6 01       	movw	r22, r12
 28c:	84 d0       	rcall	.+264    	; 0x396 <__cmpsf2>
 28e:	18 16       	cp	r1, r24
 290:	14 f0       	brlt	.+4      	; 0x296 <__stack+0x37>
		{
			POT_OUTPUT=0;
 292:	10 92 ab 00 	sts	0x00AB, r1
		}
		usi_spi_out(USI_SPI_CS1,POT_OUTPUT);
 296:	60 91 ab 00 	lds	r22, 0x00AB
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	21 d0       	rcall	.+66     	; 0x2e0 <usi_spi_out>
		if(POT_OUTPUT == 255)
 29e:	80 91 ab 00 	lds	r24, 0x00AB
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	11 f4       	brne	.+4      	; 0x2aa <__stack+0x4b>
		{
			PORTA &= ~(1<<PORTA4);
 2a6:	dc 98       	cbi	0x1b, 4	; 27
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <__stack+0x4d>
		}
		else
		{
			PORTA |= (1<<PORTA4);
 2aa:	dc 9a       	sbi	0x1b, 4	; 27
	DDRA |= (1<<PORTA4);
	PORTA |= (1<<PORTA4);
    while(1)
    {
	
		for (uint8_t i = 0; i < 25 ; i++)
 2ac:	cf 5f       	subi	r28, 0xFF	; 255
 2ae:	c9 31       	cpi	r28, 0x19	; 25
 2b0:	08 f4       	brcc	.+2      	; 0x2b4 <__stack+0x55>
 2b2:	97 cf       	rjmp	.-210    	; 0x1e2 <main+0xe>
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
 2b6:	95 cf       	rjmp	.-214    	; 0x1e2 <main+0xe>

000002b8 <usi_spi_init>:
}
*/

void usi_spi_init(void)
{
	USI_PORT |= (1<<USI_DI) | (1<<USI_SPI_CS1) | (1<<USI_SPI_CS2);
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	81 66       	ori	r24, 0x61	; 97
 2bc:	88 bb       	out	0x18, r24	; 24
	USI_PORT &= ~((1<<USI_DO) | (1<<USI_CLK));
 2be:	88 b3       	in	r24, 0x18	; 24
 2c0:	89 7f       	andi	r24, 0xF9	; 249
 2c2:	88 bb       	out	0x18, r24	; 24
	USI_DDR |= (1<<USI_DO) | (1<<USI_CLK) | (1<<USI_SPI_CS1) | (1<<USI_SPI_CS2);
 2c4:	87 b3       	in	r24, 0x17	; 23
 2c6:	86 66       	ori	r24, 0x66	; 102
 2c8:	87 bb       	out	0x17, r24	; 23
	USI_DDR &= ~(1<<USI_DI);
 2ca:	b8 98       	cbi	0x17, 0	; 23
	USICR |= (1<<USIWM0) | (1<<USICS1) | (1<<USICLK);
 2cc:	8d b1       	in	r24, 0x0d	; 13
 2ce:	8a 61       	ori	r24, 0x1A	; 26
 2d0:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	8f e5       	ldi	r24, 0x5F	; 95
 2d4:	9a ee       	ldi	r25, 0xEA	; 234
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <usi_spi_init+0x1e>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <usi_spi_init+0x24>
 2dc:	00 00       	nop
 2de:	08 95       	ret

000002e0 <usi_spi_out>:
	
}

void usi_spi_out(uint8_t usi_spi_cs, uint8_t usi_spi_out)
{
	USIDR = usi_spi_out;
 2e0:	6f b9       	out	0x0f, r22	; 15
	USISR |= (1<<USIOIF);
 2e2:	76 9a       	sbi	0x0e, 6	; 14
	USI_PORT &= ~(1<<usi_spi_cs);
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <usi_spi_out+0x10>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <usi_spi_out+0xc>
 2f4:	20 95       	com	r18
 2f6:	92 23       	and	r25, r18
 2f8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	85 e8       	ldi	r24, 0x85	; 133
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <usi_spi_out+0x1c>
 300:	00 00       	nop
	_delay_us(USI_CLK_Delay);
	while((	USISR & (1<<USIOIF)) != (1<<USIOIF))
 302:	76 99       	sbic	0x0e, 6	; 14
 304:	07 c0       	rjmp	.+14     	; 0x314 <usi_spi_out+0x34>
	{
		USICR |= (1<<USITC);
 306:	68 9a       	sbi	0x0d, 0	; 13
 308:	85 e8       	ldi	r24, 0x85	; 133
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <usi_spi_out+0x2a>
 30e:	00 00       	nop
{
	USIDR = usi_spi_out;
	USISR |= (1<<USIOIF);
	USI_PORT &= ~(1<<usi_spi_cs);
	_delay_us(USI_CLK_Delay);
	while((	USISR & (1<<USIOIF)) != (1<<USIOIF))
 310:	76 9b       	sbis	0x0e, 6	; 14
 312:	f9 cf       	rjmp	.-14     	; 0x306 <usi_spi_out+0x26>
	{
		USICR |= (1<<USITC);
		_delay_us(USI_CLK_Delay);		
	}
	USI_PORT &= ~((1<<USI_DO) | (1<<USI_CLK)); 
 314:	88 b3       	in	r24, 0x18	; 24
 316:	89 7f       	andi	r24, 0xF9	; 249
 318:	88 bb       	out	0x18, r24	; 24
	USI_PORT |=(1<<USI_SPI_CS1) | (1<<USI_SPI_CS2);
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	80 66       	ori	r24, 0x60	; 96
 31e:	88 bb       	out	0x18, r24	; 24
 320:	08 95       	ret

00000322 <usi_putv>:

}
char data[10];
void usi_putv(uint16_t lcd_varible, uint8_t lcd_numtype, uint8_t lcd_digits )
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	d4 2f       	mov	r29, r20
	uint8_t x=lcd_digits;
	
	itoa(lcd_varible, data,lcd_numtype);
 328:	46 2f       	mov	r20, r22
 32a:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 32c:	6c ea       	ldi	r22, 0xAC	; 172
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	80 d1       	rcall	.+768    	; 0x632 <itoa>
	for (uint8_t i=0; data[i] != 0x00 ; i++)
 332:	80 91 ac 00 	lds	r24, 0x00AC
 336:	88 23       	and	r24, r24
 338:	71 f0       	breq	.+28     	; 0x356 <usi_putv+0x34>
 33a:	cd 2f       	mov	r28, r29
 33c:	80 e0       	ldi	r24, 0x00	; 0
	{
		lcd_digits--;
 33e:	c1 50       	subi	r28, 0x01	; 1
void usi_putv(uint16_t lcd_varible, uint8_t lcd_numtype, uint8_t lcd_digits )
{
	uint8_t x=lcd_digits;
	
	itoa(lcd_varible, data,lcd_numtype);
	for (uint8_t i=0; data[i] != 0x00 ; i++)
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	e8 2f       	mov	r30, r24
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	e4 55       	subi	r30, 0x54	; 84
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	90 81       	ld	r25, Z
 34c:	91 11       	cpse	r25, r1
 34e:	f7 cf       	rjmp	.-18     	; 0x33e <usi_putv+0x1c>
	{
		lcd_digits--;
	}
	
	if (lcd_digits > x)
 350:	dc 17       	cp	r29, r28
 352:	d8 f0       	brcs	.+54     	; 0x38a <usi_putv+0x68>
 354:	01 c0       	rjmp	.+2      	; 0x358 <usi_putv+0x36>
void usi_putv(uint16_t lcd_varible, uint8_t lcd_numtype, uint8_t lcd_digits )
{
	uint8_t x=lcd_digits;
	
	itoa(lcd_varible, data,lcd_numtype);
	for (uint8_t i=0; data[i] != 0x00 ; i++)
 356:	cd 2f       	mov	r28, r29
	if (lcd_digits > x)
	{
		lcd_digits=0;
	}
	
	for (uint8_t i=0; i<lcd_digits; i++)
 358:	cc 23       	and	r28, r28
 35a:	39 f0       	breq	.+14     	; 0x36a <usi_putv+0x48>
 35c:	d0 e0       	ldi	r29, 0x00	; 0
	{
//		usi_spi_out(USI_SPI_CS2,' ');
		usi_putc(' ');
 35e:	60 e2       	ldi	r22, 0x20	; 32
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	be df       	rcall	.-132    	; 0x2e0 <usi_spi_out>
	if (lcd_digits > x)
	{
		lcd_digits=0;
	}
	
	for (uint8_t i=0; i<lcd_digits; i++)
 364:	df 5f       	subi	r29, 0xFF	; 255
 366:	dc 13       	cpse	r29, r28
 368:	fa cf       	rjmp	.-12     	; 0x35e <usi_putv+0x3c>
	{
//		usi_spi_out(USI_SPI_CS2,' ');
		usi_putc(' ');
	}
	for (uint8_t i=0; data[i] != 0x00; i++)
 36a:	60 91 ac 00 	lds	r22, 0x00AC
 36e:	66 23       	and	r22, r22
 370:	79 f0       	breq	.+30     	; 0x390 <usi_putv+0x6e>
	if (lcd_digits > x)
	{
		lcd_digits=0;
	}
	
	for (uint8_t i=0; i<lcd_digits; i++)
 372:	c0 e0       	ldi	r28, 0x00	; 0
//		usi_spi_out(USI_SPI_CS2,' ');
		usi_putc(' ');
	}
	for (uint8_t i=0; data[i] != 0x00; i++)
	{
		usi_putc(data[i]);
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	b4 df       	rcall	.-152    	; 0x2e0 <usi_spi_out>
	for (uint8_t i=0; i<lcd_digits; i++)
	{
//		usi_spi_out(USI_SPI_CS2,' ');
		usi_putc(' ');
	}
	for (uint8_t i=0; data[i] != 0x00; i++)
 378:	cf 5f       	subi	r28, 0xFF	; 255
 37a:	ec 2f       	mov	r30, r28
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	e4 55       	subi	r30, 0x54	; 84
 380:	ff 4f       	sbci	r31, 0xFF	; 255
 382:	60 81       	ld	r22, Z
 384:	61 11       	cpse	r22, r1
 386:	f6 cf       	rjmp	.-20     	; 0x374 <usi_putv+0x52>
 388:	03 c0       	rjmp	.+6      	; 0x390 <usi_putv+0x6e>
 38a:	60 91 ac 00 	lds	r22, 0x00AC
 38e:	f1 cf       	rjmp	.-30     	; 0x372 <usi_putv+0x50>
	{
		usi_putc(data[i]);
	}

}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <__cmpsf2>:
 396:	d4 d0       	rcall	.+424    	; 0x540 <__fp_cmp>
 398:	08 f4       	brcc	.+2      	; 0x39c <__cmpsf2+0x6>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	08 95       	ret

0000039e <__divsf3>:
 39e:	0c d0       	rcall	.+24     	; 0x3b8 <__divsf3x>
 3a0:	0a c1       	rjmp	.+532    	; 0x5b6 <__fp_round>
 3a2:	02 d1       	rcall	.+516    	; 0x5a8 <__fp_pscB>
 3a4:	40 f0       	brcs	.+16     	; 0x3b6 <__divsf3+0x18>
 3a6:	f9 d0       	rcall	.+498    	; 0x59a <__fp_pscA>
 3a8:	30 f0       	brcs	.+12     	; 0x3b6 <__divsf3+0x18>
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <__divsf3+0x16>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	19 f0       	breq	.+6      	; 0x3b6 <__divsf3+0x18>
 3b0:	eb c0       	rjmp	.+470    	; 0x588 <__fp_inf>
 3b2:	51 11       	cpse	r21, r1
 3b4:	34 c1       	rjmp	.+616    	; 0x61e <__fp_szero>
 3b6:	ee c0       	rjmp	.+476    	; 0x594 <__fp_nan>

000003b8 <__divsf3x>:
 3b8:	0f d1       	rcall	.+542    	; 0x5d8 <__fp_split3>
 3ba:	98 f3       	brcs	.-26     	; 0x3a2 <__divsf3+0x4>

000003bc <__divsf3_pse>:
 3bc:	99 23       	and	r25, r25
 3be:	c9 f3       	breq	.-14     	; 0x3b2 <__divsf3+0x14>
 3c0:	55 23       	and	r21, r21
 3c2:	b1 f3       	breq	.-20     	; 0x3b0 <__divsf3+0x12>
 3c4:	95 1b       	sub	r25, r21
 3c6:	55 0b       	sbc	r21, r21
 3c8:	bb 27       	eor	r27, r27
 3ca:	aa 27       	eor	r26, r26
 3cc:	62 17       	cp	r22, r18
 3ce:	73 07       	cpc	r23, r19
 3d0:	84 07       	cpc	r24, r20
 3d2:	38 f0       	brcs	.+14     	; 0x3e2 <__divsf3_pse+0x26>
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	44 1f       	adc	r20, r20
 3de:	aa 1f       	adc	r26, r26
 3e0:	a9 f3       	breq	.-22     	; 0x3cc <__divsf3_pse+0x10>
 3e2:	33 d0       	rcall	.+102    	; 0x44a <__divsf3_pse+0x8e>
 3e4:	0e 2e       	mov	r0, r30
 3e6:	3a f0       	brmi	.+14     	; 0x3f6 <__divsf3_pse+0x3a>
 3e8:	e0 e8       	ldi	r30, 0x80	; 128
 3ea:	30 d0       	rcall	.+96     	; 0x44c <__divsf3_pse+0x90>
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	50 40       	sbci	r21, 0x00	; 0
 3f0:	e6 95       	lsr	r30
 3f2:	00 1c       	adc	r0, r0
 3f4:	ca f7       	brpl	.-14     	; 0x3e8 <__divsf3_pse+0x2c>
 3f6:	29 d0       	rcall	.+82     	; 0x44a <__divsf3_pse+0x8e>
 3f8:	fe 2f       	mov	r31, r30
 3fa:	27 d0       	rcall	.+78     	; 0x44a <__divsf3_pse+0x8e>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	bb 1f       	adc	r27, r27
 404:	26 17       	cp	r18, r22
 406:	37 07       	cpc	r19, r23
 408:	48 07       	cpc	r20, r24
 40a:	ab 07       	cpc	r26, r27
 40c:	b0 e8       	ldi	r27, 0x80	; 128
 40e:	09 f0       	breq	.+2      	; 0x412 <__divsf3_pse+0x56>
 410:	bb 0b       	sbc	r27, r27
 412:	80 2d       	mov	r24, r0
 414:	bf 01       	movw	r22, r30
 416:	ff 27       	eor	r31, r31
 418:	93 58       	subi	r25, 0x83	; 131
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	2a f0       	brmi	.+10     	; 0x428 <__divsf3_pse+0x6c>
 41e:	9e 3f       	cpi	r25, 0xFE	; 254
 420:	51 05       	cpc	r21, r1
 422:	68 f0       	brcs	.+26     	; 0x43e <__divsf3_pse+0x82>
 424:	b1 c0       	rjmp	.+354    	; 0x588 <__fp_inf>
 426:	fb c0       	rjmp	.+502    	; 0x61e <__fp_szero>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	ec f3       	brlt	.-6      	; 0x426 <__divsf3_pse+0x6a>
 42c:	98 3e       	cpi	r25, 0xE8	; 232
 42e:	dc f3       	brlt	.-10     	; 0x426 <__divsf3_pse+0x6a>
 430:	86 95       	lsr	r24
 432:	77 95       	ror	r23
 434:	67 95       	ror	r22
 436:	b7 95       	ror	r27
 438:	f7 95       	ror	r31
 43a:	9f 5f       	subi	r25, 0xFF	; 255
 43c:	c9 f7       	brne	.-14     	; 0x430 <__divsf3_pse+0x74>
 43e:	88 0f       	add	r24, r24
 440:	91 1d       	adc	r25, r1
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret
 44a:	e1 e0       	ldi	r30, 0x01	; 1
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	bb 1f       	adc	r27, r27
 454:	62 17       	cp	r22, r18
 456:	73 07       	cpc	r23, r19
 458:	84 07       	cpc	r24, r20
 45a:	ba 07       	cpc	r27, r26
 45c:	20 f0       	brcs	.+8      	; 0x466 <__divsf3_pse+0xaa>
 45e:	62 1b       	sub	r22, r18
 460:	73 0b       	sbc	r23, r19
 462:	84 0b       	sbc	r24, r20
 464:	ba 0b       	sbc	r27, r26
 466:	ee 1f       	adc	r30, r30
 468:	88 f7       	brcc	.-30     	; 0x44c <__divsf3_pse+0x90>
 46a:	e0 95       	com	r30
 46c:	08 95       	ret

0000046e <__fixunssfsi>:
 46e:	bc d0       	rcall	.+376    	; 0x5e8 <__fp_splitA>
 470:	88 f0       	brcs	.+34     	; 0x494 <__fixunssfsi+0x26>
 472:	9f 57       	subi	r25, 0x7F	; 127
 474:	90 f0       	brcs	.+36     	; 0x49a <__fixunssfsi+0x2c>
 476:	b9 2f       	mov	r27, r25
 478:	99 27       	eor	r25, r25
 47a:	b7 51       	subi	r27, 0x17	; 23
 47c:	a0 f0       	brcs	.+40     	; 0x4a6 <__fixunssfsi+0x38>
 47e:	d1 f0       	breq	.+52     	; 0x4b4 <__fixunssfsi+0x46>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	1a f0       	brmi	.+6      	; 0x490 <__fixunssfsi+0x22>
 48a:	ba 95       	dec	r27
 48c:	c9 f7       	brne	.-14     	; 0x480 <__fixunssfsi+0x12>
 48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__fixunssfsi+0x46>
 490:	b1 30       	cpi	r27, 0x01	; 1
 492:	81 f0       	breq	.+32     	; 0x4b4 <__fixunssfsi+0x46>
 494:	c3 d0       	rcall	.+390    	; 0x61c <__fp_zero>
 496:	b1 e0       	ldi	r27, 0x01	; 1
 498:	08 95       	ret
 49a:	c0 c0       	rjmp	.+384    	; 0x61c <__fp_zero>
 49c:	67 2f       	mov	r22, r23
 49e:	78 2f       	mov	r23, r24
 4a0:	88 27       	eor	r24, r24
 4a2:	b8 5f       	subi	r27, 0xF8	; 248
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <__fixunssfsi+0x46>
 4a6:	b9 3f       	cpi	r27, 0xF9	; 249
 4a8:	cc f3       	brlt	.-14     	; 0x49c <__fixunssfsi+0x2e>
 4aa:	86 95       	lsr	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b3 95       	inc	r27
 4b2:	d9 f7       	brne	.-10     	; 0x4aa <__fixunssfsi+0x3c>
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__fixunssfsi+0x56>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__floatunsisf>:
 4c6:	e8 94       	clt
 4c8:	09 c0       	rjmp	.+18     	; 0x4dc <__floatsisf+0x12>

000004ca <__floatsisf>:
 4ca:	97 fb       	bst	r25, 7
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__floatsisf+0x12>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	99 23       	and	r25, r25
 4de:	a9 f0       	breq	.+42     	; 0x50a <__floatsisf+0x40>
 4e0:	f9 2f       	mov	r31, r25
 4e2:	96 e9       	ldi	r25, 0x96	; 150
 4e4:	bb 27       	eor	r27, r27
 4e6:	93 95       	inc	r25
 4e8:	f6 95       	lsr	r31
 4ea:	87 95       	ror	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b7 95       	ror	r27
 4f2:	f1 11       	cpse	r31, r1
 4f4:	f8 cf       	rjmp	.-16     	; 0x4e6 <__floatsisf+0x1c>
 4f6:	fa f4       	brpl	.+62     	; 0x536 <__floatsisf+0x6c>
 4f8:	bb 0f       	add	r27, r27
 4fa:	11 f4       	brne	.+4      	; 0x500 <__floatsisf+0x36>
 4fc:	60 ff       	sbrs	r22, 0
 4fe:	1b c0       	rjmp	.+54     	; 0x536 <__floatsisf+0x6c>
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	16 c0       	rjmp	.+44     	; 0x536 <__floatsisf+0x6c>
 50a:	88 23       	and	r24, r24
 50c:	11 f0       	breq	.+4      	; 0x512 <__floatsisf+0x48>
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	11 c0       	rjmp	.+34     	; 0x534 <__floatsisf+0x6a>
 512:	77 23       	and	r23, r23
 514:	21 f0       	breq	.+8      	; 0x51e <__floatsisf+0x54>
 516:	9e e8       	ldi	r25, 0x8E	; 142
 518:	87 2f       	mov	r24, r23
 51a:	76 2f       	mov	r23, r22
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__floatsisf+0x5e>
 51e:	66 23       	and	r22, r22
 520:	71 f0       	breq	.+28     	; 0x53e <__floatsisf+0x74>
 522:	96 e8       	ldi	r25, 0x86	; 134
 524:	86 2f       	mov	r24, r22
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	2a f0       	brmi	.+10     	; 0x536 <__floatsisf+0x6c>
 52c:	9a 95       	dec	r25
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	da f7       	brpl	.-10     	; 0x52c <__floatsisf+0x62>
 536:	88 0f       	add	r24, r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	97 f9       	bld	r25, 7
 53e:	08 95       	ret

00000540 <__fp_cmp>:
 540:	99 0f       	add	r25, r25
 542:	00 08       	sbc	r0, r0
 544:	55 0f       	add	r21, r21
 546:	aa 0b       	sbc	r26, r26
 548:	e0 e8       	ldi	r30, 0x80	; 128
 54a:	fe ef       	ldi	r31, 0xFE	; 254
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	e8 07       	cpc	r30, r24
 552:	f9 07       	cpc	r31, r25
 554:	c0 f0       	brcs	.+48     	; 0x586 <__fp_cmp+0x46>
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	e4 07       	cpc	r30, r20
 55c:	f5 07       	cpc	r31, r21
 55e:	98 f0       	brcs	.+38     	; 0x586 <__fp_cmp+0x46>
 560:	62 1b       	sub	r22, r18
 562:	73 0b       	sbc	r23, r19
 564:	84 0b       	sbc	r24, r20
 566:	95 0b       	sbc	r25, r21
 568:	39 f4       	brne	.+14     	; 0x578 <__fp_cmp+0x38>
 56a:	0a 26       	eor	r0, r26
 56c:	61 f0       	breq	.+24     	; 0x586 <__fp_cmp+0x46>
 56e:	23 2b       	or	r18, r19
 570:	24 2b       	or	r18, r20
 572:	25 2b       	or	r18, r21
 574:	21 f4       	brne	.+8      	; 0x57e <__fp_cmp+0x3e>
 576:	08 95       	ret
 578:	0a 26       	eor	r0, r26
 57a:	09 f4       	brne	.+2      	; 0x57e <__fp_cmp+0x3e>
 57c:	a1 40       	sbci	r26, 0x01	; 1
 57e:	a6 95       	lsr	r26
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	81 1d       	adc	r24, r1
 584:	81 1d       	adc	r24, r1
 586:	08 95       	ret

00000588 <__fp_inf>:
 588:	97 f9       	bld	r25, 7
 58a:	9f 67       	ori	r25, 0x7F	; 127
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	08 95       	ret

00000594 <__fp_nan>:
 594:	9f ef       	ldi	r25, 0xFF	; 255
 596:	80 ec       	ldi	r24, 0xC0	; 192
 598:	08 95       	ret

0000059a <__fp_pscA>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	09 06       	cpc	r0, r25
 5a6:	08 95       	ret

000005a8 <__fp_pscB>:
 5a8:	00 24       	eor	r0, r0
 5aa:	0a 94       	dec	r0
 5ac:	12 16       	cp	r1, r18
 5ae:	13 06       	cpc	r1, r19
 5b0:	14 06       	cpc	r1, r20
 5b2:	05 06       	cpc	r0, r21
 5b4:	08 95       	ret

000005b6 <__fp_round>:
 5b6:	09 2e       	mov	r0, r25
 5b8:	03 94       	inc	r0
 5ba:	00 0c       	add	r0, r0
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__fp_round+0xc>
 5be:	88 23       	and	r24, r24
 5c0:	52 f0       	brmi	.+20     	; 0x5d6 <__fp_round+0x20>
 5c2:	bb 0f       	add	r27, r27
 5c4:	40 f4       	brcc	.+16     	; 0x5d6 <__fp_round+0x20>
 5c6:	bf 2b       	or	r27, r31
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__fp_round+0x18>
 5ca:	60 ff       	sbrs	r22, 0
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <__fp_round+0x20>
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	8f 4f       	sbci	r24, 0xFF	; 255
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__fp_split3>:
 5d8:	57 fd       	sbrc	r21, 7
 5da:	90 58       	subi	r25, 0x80	; 128
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	59 f0       	breq	.+22     	; 0x5f8 <__fp_splitA+0x10>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	71 f0       	breq	.+28     	; 0x602 <__fp_splitA+0x1a>
 5e6:	47 95       	ror	r20

000005e8 <__fp_splitA>:
 5e8:	88 0f       	add	r24, r24
 5ea:	97 fb       	bst	r25, 7
 5ec:	99 1f       	adc	r25, r25
 5ee:	61 f0       	breq	.+24     	; 0x608 <__fp_splitA+0x20>
 5f0:	9f 3f       	cpi	r25, 0xFF	; 255
 5f2:	79 f0       	breq	.+30     	; 0x612 <__fp_splitA+0x2a>
 5f4:	87 95       	ror	r24
 5f6:	08 95       	ret
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	55 1f       	adc	r21, r21
 600:	f2 cf       	rjmp	.-28     	; 0x5e6 <__fp_split3+0xe>
 602:	46 95       	lsr	r20
 604:	f1 df       	rcall	.-30     	; 0x5e8 <__fp_splitA>
 606:	08 c0       	rjmp	.+16     	; 0x618 <__fp_splitA+0x30>
 608:	16 16       	cp	r1, r22
 60a:	17 06       	cpc	r1, r23
 60c:	18 06       	cpc	r1, r24
 60e:	99 1f       	adc	r25, r25
 610:	f1 cf       	rjmp	.-30     	; 0x5f4 <__fp_splitA+0xc>
 612:	86 95       	lsr	r24
 614:	71 05       	cpc	r23, r1
 616:	61 05       	cpc	r22, r1
 618:	08 94       	sec
 61a:	08 95       	ret

0000061c <__fp_zero>:
 61c:	e8 94       	clt

0000061e <__fp_szero>:
 61e:	bb 27       	eor	r27, r27
 620:	66 27       	eor	r22, r22
 622:	77 27       	eor	r23, r23
 624:	cb 01       	movw	r24, r22
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__gesf2>:
 62a:	8a df       	rcall	.-236    	; 0x540 <__fp_cmp>
 62c:	08 f4       	brcc	.+2      	; 0x630 <__gesf2+0x6>
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	08 95       	ret

00000632 <itoa>:
 632:	45 32       	cpi	r20, 0x25	; 37
 634:	51 05       	cpc	r21, r1
 636:	18 f4       	brcc	.+6      	; 0x63e <itoa+0xc>
 638:	42 30       	cpi	r20, 0x02	; 2
 63a:	08 f0       	brcs	.+2      	; 0x63e <itoa+0xc>
 63c:	04 c0       	rjmp	.+8      	; 0x646 <__itoa_ncheck>
 63e:	fb 01       	movw	r30, r22
 640:	10 82       	st	Z, r1
 642:	cb 01       	movw	r24, r22
 644:	08 95       	ret

00000646 <__itoa_ncheck>:
 646:	bb 27       	eor	r27, r27
 648:	4a 30       	cpi	r20, 0x0A	; 10
 64a:	31 f4       	brne	.+12     	; 0x658 <__itoa_ncheck+0x12>
 64c:	99 23       	and	r25, r25
 64e:	22 f4       	brpl	.+8      	; 0x658 <__itoa_ncheck+0x12>
 650:	bd e2       	ldi	r27, 0x2D	; 45
 652:	90 95       	com	r25
 654:	81 95       	neg	r24
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	01 c0       	rjmp	.+2      	; 0x65c <__utoa_common>

0000065a <__utoa_ncheck>:
 65a:	bb 27       	eor	r27, r27

0000065c <__utoa_common>:
 65c:	fb 01       	movw	r30, r22
 65e:	55 27       	eor	r21, r21
 660:	aa 27       	eor	r26, r26
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	aa 1f       	adc	r26, r26
 668:	a4 17       	cp	r26, r20
 66a:	10 f0       	brcs	.+4      	; 0x670 <__utoa_common+0x14>
 66c:	a4 1b       	sub	r26, r20
 66e:	83 95       	inc	r24
 670:	50 51       	subi	r21, 0x10	; 16
 672:	b9 f7       	brne	.-18     	; 0x662 <__utoa_common+0x6>
 674:	a0 5d       	subi	r26, 0xD0	; 208
 676:	aa 33       	cpi	r26, 0x3A	; 58
 678:	08 f0       	brcs	.+2      	; 0x67c <__utoa_common+0x20>
 67a:	a9 5d       	subi	r26, 0xD9	; 217
 67c:	a1 93       	st	Z+, r26
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	79 f7       	brne	.-34     	; 0x660 <__utoa_common+0x4>
 682:	b1 11       	cpse	r27, r1
 684:	b1 93       	st	Z+, r27
 686:	11 92       	st	Z+, r1
 688:	cb 01       	movw	r24, r22
 68a:	00 c0       	rjmp	.+0      	; 0x68c <strrev>

0000068c <strrev>:
 68c:	dc 01       	movw	r26, r24
 68e:	fc 01       	movw	r30, r24
 690:	67 2f       	mov	r22, r23
 692:	71 91       	ld	r23, Z+
 694:	77 23       	and	r23, r23
 696:	e1 f7       	brne	.-8      	; 0x690 <strrev+0x4>
 698:	32 97       	sbiw	r30, 0x02	; 2
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <strrev+0x18>
 69c:	7c 91       	ld	r23, X
 69e:	6d 93       	st	X+, r22
 6a0:	70 83       	st	Z, r23
 6a2:	62 91       	ld	r22, -Z
 6a4:	ae 17       	cp	r26, r30
 6a6:	bf 07       	cpc	r27, r31
 6a8:	c8 f3       	brcs	.-14     	; 0x69c <strrev+0x10>
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
