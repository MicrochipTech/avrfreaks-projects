/*!\mainpage RoboVoice

\author 	LieBtrau
\image html LieBtrau_anim.gif
\version	version 1.1
\section IntroSec Intro

Here you will find the implementation of a soundprocessing system.  The 
soundprocessing performed here is actually very basic.  It demonstrates the
basic principles behind reverberation, ringmodulation and vibrato-effects.
If you intend to do high performance audio processing, then this project is 
not really suited to you.  Because in that case you will need an audiocodec
(i.e. PCM3006) and a DSP-chip.  Here a simple 8bit microcontroller is used.
The only extra hardwarecomponents are a quadopamp, some resistors and some
capacitors.

\section Hardware

\subsection Description of the system
\image html F_3_7.gif
\n
In the image you can see a blockschematic of the system.  In this package a 
hardwareschematic (PDF-file) of the system is included.  In that schematic 
only the two filters and the DAC are given.  The ADC and the digital signal
processing block are built in the ATMEGA8535.  I had these already on a 
"startkerkit" I built earlier on.

\subsubsection Filters
The anti-aliasfilter and the reconstruction filter are equal.  They were 
designed with the following parameters:

	- passband frequency: 3kHz (still passes almost all voice frequencies)
	- passband ripple: 0.01dB
	- stopband frequency: 16kHz (equals half of the sample frequency)
	- stopband attenuation: 30dB

The maximum filterorder allowed was four, because otherwise the hardware
would be too cumbersome.  The filter approximation was set to Butterworth, 
because that type has the best trade-off between attenuation and phase
distortion.
These parameters were passed to the Win-Filters V3.1 program.  This program
calculates the transferfunction.  In this case, a fourth order one.
Luckily this program can also implement this transferfunction.  The multiple-
feedback form seemed most appropiate because only a small number of components
were needed.
Then the component values were rounded to E12-series.  After that the 
filterprototype was ready to be simulated in Orcad Pspice.


\image html simulation.bmp
In the image you can see the gain response in red and the group delay in green.

\subsection DAC

Unfortunately, the ATMEGA8535 doesn't have a DAC on board.  A PWM-dac, was first
built because it required very little hardware.  The disadvantage is
that the PWM-dac needs to work at a frequency that is atleast 72 times the 
sample frequency to get good quality.  The microcontroller however is too slow
to do this DA-conversion.
Finally an R-2R-ladder-dAC was chosen, because it is simple and it doesn't need
software resources of the microcontroller.

\section Software  

All of the effects here described were first simulated in Matlab.  Using
Matlab it is easier to adapt the algorithms until they produce the sound you
wished for.  This Matlab-code is also present in the documentation.
The soundeffects will not be described in depth, because there is already
enough specialized documentation for that.

\subsection PitchSubSec PitchShifting
The first effect I intended to make was frequencymultiplication of the sound.
This is also known as pitch-shifting.  Vocoders can perform pitchshifting,
but it was impossible to code one in this small a microcontroller.

\subsection ReverbSubSec Reverberation
Reverberation can be compared to an infinite number of echoes.  If these 
echoes are strong enough, then the sound can be very distorted.  Very much 
like a robot.

\subsection RingSubSec Ringmodulation
In radiotechnology ringmodulation is known as balance amplitude modulation.
You simply multiply a sinewave with the soundsamples.  The choice of the
frequency of the selected sinewave will determine the effect.

\subsection VibratoSubSec Vibrato
The vibrato sound effect is another example of a simple delay effect.  In the
vibrato effect, the length of the delay changes in time.  This makes it 
different from an echo-effect, which has a constant delay in time.  There are
several possibilities for changing the delay.  In this implementation, three
different functions are used: squarewave, sinewave and sawtooth.
 */