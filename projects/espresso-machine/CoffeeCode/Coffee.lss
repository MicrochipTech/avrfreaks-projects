
Coffee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000019c  2**0
                  ALLOC
  2 .stab         00000360  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000056d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000004f  00000000  00000000  0000058d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000108  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000089  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a7  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e1  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	29 c0       	rjmp	.+82     	; 0x56 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__vector_6>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__bad_interrupt>
  10:	22 c0       	rjmp	.+68     	; 0x56 <__bad_interrupt>
  12:	21 c0       	rjmp	.+66     	; 0x56 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__bad_interrupt>
  1a:	3c c0       	rjmp	.+120    	; 0x94 <__vector_13>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__bad_interrupt>
  1e:	1b c0       	rjmp	.+54     	; 0x56 <__bad_interrupt>
  20:	1a c0       	rjmp	.+52     	; 0x56 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e2       	ldi	r30, 0x28	; 40
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	03 c0       	rjmp	.+6      	; 0x3c <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	c8 95       	lpm
  38:	31 96       	adiw	r30, 0x01	; 1
  3a:	0d 92       	st	X+, r0

0000003c <.do_copy_data_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b1 07       	cpc	r27, r17
  40:	d1 f7       	brne	.-12     	; 0x36 <.do_copy_data_loop>

00000042 <__do_clear_bss>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	a3 36       	cpi	r26, 0x63	; 99
  4e:	b1 07       	cpc	r27, r17
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>
  52:	60 d0       	rcall	.+192    	; 0x114 <main>
  54:	68 c0       	rjmp	.+208    	; 0x126 <_exit>

00000056 <__bad_interrupt>:
  56:	d4 cf       	rjmp	.-88     	; 0x0 <__vectors>

00000058 <tLeds>:

// Test routine to toggle outputs
void
tLeds (void)
{
  58:	80 91 62 00 	lds	r24, 0x0062
  5c:	88 23       	and	r24, r24
  5e:	29 f4       	brne	.+10     	; 0x6a <tLeds+0x12>
static uint8_t bState;


if (bState == OFF)
	{
		bState = ON;
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	80 93 62 00 	sts	0x0062, r24
		PORTB |= (1 << 0); // Turn on LED1
  66:	c0 9a       	sbi	0x18, 0	; 24
  68:	08 95       	ret
	}
	else
	{
		bState = OFF;
  6a:	10 92 62 00 	sts	0x0062, r1
		PORTB &= ~(1 << 0); // Turn off LED1
  6e:	c0 98       	cbi	0x18, 0	; 24
  70:	08 95       	ret

00000072 <__vector_6>:
	}
}

// this function is called when timer1 compare matches OCR1A
ISR ( TIM1_COMPA_vect ) 
{
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
   ADCSRA |= (1 << ADEN);  // Enable ADC
  7e:	37 9a       	sbi	0x06, 7	; 6
   ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
  80:	33 9a       	sbi	0x06, 3	; 6
   MCUCR |= (1 << SM0); // Enter ADC Noise Reduction Mode, Conversion starts automatically when CPU Stops
  82:	85 b7       	in	r24, 0x35	; 53
  84:	88 60       	ori	r24, 0x08	; 8
  86:	85 bf       	out	0x35, r24	; 53
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <__vector_13>:
}

// this function is called when the ADC conversion is complete
ISR(ADC_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	
 static uint16_t adVal;	//16 bit storage for ADC result
   
 MCUCR &= ~(1 << SM0); 	// Disable ADC Noise Reduction Mode
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	85 bf       	out	0x35, r24	; 53
 ADCSRA &= ~(1 << ADIE);  	// Disable ADC Interrupt
  aa:	33 98       	cbi	0x06, 3	; 6
 ADCSRA &= ~(1 << ADEN);  	// Disable ADC
  ac:	37 98       	cbi	0x06, 7	; 6
 
 adVal = (uint16_t)ADCL + ((uint16_t)ADCH << 8); 
  ae:	24 b1       	in	r18, 0x04	; 4
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	99 27       	eor	r25, r25
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
  b8:	82 0f       	add	r24, r18
  ba:	91 1d       	adc	r25, r1
  bc:	90 93 61 00 	sts	0x0061, r25
  c0:	80 93 60 00 	sts	0x0060, r24
 	
  if(adVal < COF_TEMP_ON)
  c4:	87 3c       	cpi	r24, 0xC7	; 199
  c6:	91 05       	cpc	r25, r1
  c8:	10 f4       	brcc	.+4      	; 0xce <__vector_13+0x3a>
      {
         PORTB |= (1 << 0); // Turn on Relay 1
  ca:	c0 9a       	sbi	0x18, 0	; 24
  cc:	07 c0       	rjmp	.+14     	; 0xdc <__vector_13+0x48>
      }
  if (adVal >= COF_TEMP_OFF)
  ce:	88 3c       	cpi	r24, 0xC8	; 200
  d0:	91 05       	cpc	r25, r1
  d2:	08 f0       	brcs	.+2      	; 0xd6 <__vector_13+0x42>
		{
         PORTB &= ~(1 << 0); // Turn off Relay 1
  d4:	c0 98       	cbi	0x18, 0	; 24
		}

  if(adVal < STEAM_TEMP_ON)
  d6:	8b 3f       	cpi	r24, 0xFB	; 251
  d8:	91 05       	cpc	r25, r1
  da:	10 f4       	brcc	.+4      	; 0xe0 <__stack+0x1>
      {
         PORTB |= (1 << 1); // Turn on Relay 2
  dc:	c1 9a       	sbi	0x18, 1	; 24
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__stack+0x9>
      }
  if (adVal >= STEAM_TEMP_OFF)
  e0:	8c 3f       	cpi	r24, 0xFC	; 252
  e2:	91 05       	cpc	r25, r1
  e4:	08 f0       	brcs	.+2      	; 0xe8 <__stack+0x9>
		{
         PORTB &= ~(1 << 1); // Turn off relay 2
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <ioinit>:
		}
}




void
ioinit (void)			/* Note [6] */
{
  f8:	b8 9a       	sbi	0x17, 0	; 23
   DDRB |= (1 << 0); // Set PB 0  as output for Relay 1
   DDRB |= (1 << 1); // Set PB 1 as output for Relay 2
  fa:	b9 9a       	sbi	0x17, 1	; 23

 
  /*
    the frequency of the interrupt overflow is determined by the 
    prescaler and overflow value.
    freq = clock_frequency / ( 2 * prescaler * overflow_val)
    where prescaler can be 1, 8, 64, 256, or 1024
    clock_freq is 1MHz
    and overflow_val is 16bit
    the overflow value is placed in OCR1A, the prescale is set in TCCR1B
    so for example:
	Desired ADC Rate = 2 Hz	
    desired freq = 2Hz
    clock freq = 1MHz
    1MHz / (2Hz * 2 * 8) = 31250
    OCR1A = 31250 and the prescale is 8
  */

  TCCR1B = (1 << WGM12) | TIMER1_PRESCALE_8;
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	8e bd       	out	0x2e, r24	; 46
  OCR1A = (uint16_t)31250;
 100:	82 e1       	ldi	r24, 0x12	; 18
 102:	9a e7       	ldi	r25, 0x7A	; 122
 104:	9b bd       	out	0x2b, r25	; 43
 106:	8a bd       	out	0x2a, r24	; 42
  TIMSK1 |= 1 << OCIE1A;   // Output Compare Interrupt Enable (timer 1, OCR1A) 
 108:	61 9a       	sbi	0x0c, 1	; 12


  ADCSRA |= (1 << ADPS2) ;  // Set ADC prescaler to 16 - 62.5KHz sample rate @ 1MHz
 10a:	32 9a       	sbi	0x06, 2	; 6
 
  // No MUX values needed to be changed to use ADC0

  DIDR0 = (1 << ADC0D);	// Disable digital input on ADC0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	81 b9       	out	0x01, r24	; 1
   
  sei();   // Enable Global Interrupts
 110:	78 94       	sei
 112:	08 95       	ret

00000114 <main>:

}

int
main (void)
{
 114:	f1 df       	rcall	.-30     	; 0xf8 <ioinit>

    ioinit ();

    /* loop forever, the interrupts are doing the rest */

    for (;;)			/* Note sleep mode is defined in sleep.h */
        sleep_mode();
 116:	85 b7       	in	r24, 0x35	; 53
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	85 bf       	out	0x35, r24	; 53
 11c:	88 95       	sleep
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	85 bf       	out	0x35, r24	; 53
 124:	f8 cf       	rjmp	.-16     	; 0x116 <main+0x2>

00000126 <_exit>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <_exit>
