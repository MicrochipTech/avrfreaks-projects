
CH452.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002f4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007b  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fb  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000147  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034f  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000dd  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012c  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  b6:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <Position2Number>:
	} 
return 0;
}

unsigned char Position2Number(unsigned char Pos)
{
  be:	98 2f       	mov	r25, r24
	unsigned char temp = 0;
	if(!Pos) return 0xFF;
  c0:	88 23       	and	r24, r24
  c2:	11 f4       	brne	.+4      	; 0xc8 <Position2Number+0xa>
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	08 95       	ret
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Position2Number+0x12>
	while((Pos & 1) != 1)
		{
			temp++;
  cc:	8f 5f       	subi	r24, 0xFF	; 255
			Pos>>=1;
  ce:	96 95       	lsr	r25

unsigned char Position2Number(unsigned char Pos)
{
	unsigned char temp = 0;
	if(!Pos) return 0xFF;
	while((Pos & 1) != 1)
  d0:	90 ff       	sbrs	r25, 0
  d2:	fc cf       	rjmp	.-8      	; 0xcc <Position2Number+0xe>
		{
			temp++;
			Pos>>=1;
		}
	return temp;
}
  d4:	08 95       	ret

000000d6 <main>:
unsigned char Position2Number(unsigned char);

unsigned char Numbers[8] = {CH452_BCD_TEST,1,2,3,4,5,6,7};

int main(void)
{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
unsigned char dat,index,temp;
	CH452_Init();
  de:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CH452_Init>
	CH452_Write(CH452_RESET); 
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
	CH452_Write(CH452_SYSON2);
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
	CH452_Write(CH452_BCD);  
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	95 e0       	ldi	r25, 0x05	; 5
  f6:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
	CH452_Write(CH452_TWINKLE | 8); 
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	96 e0       	ldi	r25, 0x06	; 6
  fe:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
	for(dat = 0; dat < 8; dat++)				//Output Numbers on the Led Display.
	{
		CH452_Write((CH452_DIG0 + (dat<<8))| Numbers[dat]);
 106:	9c 2f       	mov	r25, r28
 108:	88 27       	eor	r24, r24
 10a:	80 50       	subi	r24, 0x00	; 0
 10c:	98 4f       	sbci	r25, 0xF8	; 248
 10e:	fe 01       	movw	r30, r28
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	20 81       	ld	r18, Z
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	82 2b       	or	r24, r18
 11a:	93 2b       	or	r25, r19
 11c:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
 120:	21 96       	adiw	r28, 0x01	; 1
	CH452_Init();
	CH452_Write(CH452_RESET); 
	CH452_Write(CH452_SYSON2);
	CH452_Write(CH452_BCD);  
	CH452_Write(CH452_TWINKLE | 8); 
	for(dat = 0; dat < 8; dat++)				//Output Numbers on the Led Display.
 122:	c8 30       	cpi	r28, 0x08	; 8
 124:	d1 05       	cpc	r29, r1
 126:	79 f7       	brne	.-34     	; 0x106 <main+0x30>
 128:	18 e0       	ldi	r17, 0x08	; 8
			}
			if(dat == B2thButtonPressed)
			{
				dat = Position2Number(index);	
				Numbers[dat]--;
				if(Numbers[dat] == 255) Numbers[dat] = 15; 				
 12a:	0f e0       	ldi	r16, 0x0F	; 15
	}

	index = 8;									//Start position of flashing digit.
	while(1)
	{	
		if(!(CH452_PIN & (1<<CH452_DOUT_PIN)))	// If you don`t want to use an external interrupt 				  
 12c:	b3 99       	sbic	0x16, 3	; 22
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x56>
		{					  					// on DOUT pin ,do polling like me.	
			dat = CH452_Read()>>4;
 130:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
			if(dat == B1thButtonPressed)
 138:	89 30       	cpi	r24, 0x09	; 9
 13a:	11 f5       	brne	.+68     	; 0x180 <main+0xaa>
			{
				dat = Position2Number(index);	//Get number of position.
 13c:	81 2f       	mov	r24, r17
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <Position2Number>
				Numbers[dat]++;					//Increment the current value of the flashing digit.
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 83       	st	Z, r24
				if(Numbers[dat] == 16) Numbers[dat] = 0; 				
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	09 f4       	brne	.+2      	; 0x158 <main+0x82>
 156:	10 82       	st	Z, r1
				CH452_Write((CH452_DIG0 + (dat<<8))| Numbers[dat]);
 158:	f9 01       	movw	r30, r18
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	32 2f       	mov	r19, r18
 164:	22 27       	eor	r18, r18
 166:	20 50       	subi	r18, 0x00	; 0
 168:	38 4f       	sbci	r19, 0xF8	; 248
 16a:	82 2b       	or	r24, r18
 16c:	93 2b       	or	r25, r19
 16e:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				while((CH452_Read()>>4) != B1thButtonReleased) {}; //Waiting when button will released.
 172:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 176:	82 95       	swap	r24
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	d1 f7       	brne	.-12     	; 0x172 <main+0x9c>
 17e:	d6 cf       	rjmp	.-84     	; 0x12c <main+0x56>
				continue;
			}
			if(dat == B2thButtonPressed)
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	09 f5       	brne	.+66     	; 0x1c6 <main+0xf0>
			{
				dat = Position2Number(index);	
 184:	81 2f       	mov	r24, r17
 186:	0e 94 5f 00 	call	0xbe	; 0xbe <Position2Number>
				Numbers[dat]--;
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 81       	ld	r24, Z
 196:	81 50       	subi	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
				if(Numbers[dat] == 255) Numbers[dat] = 15; 				
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0xca>
 19e:	00 83       	st	Z, r16
				CH452_Write((CH452_DIG0 + (dat<<8))| Numbers[dat]);
 1a0:	f9 01       	movw	r30, r18
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	32 2f       	mov	r19, r18
 1ac:	22 27       	eor	r18, r18
 1ae:	20 50       	subi	r18, 0x00	; 0
 1b0:	38 4f       	sbci	r19, 0xF8	; 248
 1b2:	82 2b       	or	r24, r18
 1b4:	93 2b       	or	r25, r19
 1b6:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				while((CH452_Read()>>4) != B2thButtonReleased) {};
 1ba:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 1be:	82 95       	swap	r24
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <main+0xe4>
 1c4:	b3 cf       	rjmp	.-154    	; 0x12c <main+0x56>
				continue;
			}
			if(dat == B3thButtonPressed)
 1c6:	8d 30       	cpi	r24, 0x0D	; 13
 1c8:	b9 f4       	brne	.+46     	; 0x1f8 <main+0x122>
			{
				CH452_Write(CH452_LEFTCYC);			//Left shift of the display.
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	93 e0       	ldi	r25, 0x03	; 3
 1ce:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				temp = Numbers[7];					
 1d2:	90 91 07 01 	lds	r25, 0x0107
 1d6:	e6 e0       	ldi	r30, 0x06	; 6
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
				for(dat = 7; dat > 0; dat--)		//Left shift of the Numbers.
				{
					Numbers[dat] = Numbers[dat - 1];	
 1da:	80 81       	ld	r24, Z
 1dc:	81 83       	std	Z+1, r24	; 0x01
 1de:	31 97       	sbiw	r30, 0x01	; 1
			}
			if(dat == B3thButtonPressed)
			{
				CH452_Write(CH452_LEFTCYC);			//Left shift of the display.
				temp = Numbers[7];					
				for(dat = 7; dat > 0; dat--)		//Left shift of the Numbers.
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	ef 3f       	cpi	r30, 0xFF	; 255
 1e4:	f8 07       	cpc	r31, r24
 1e6:	c9 f7       	brne	.-14     	; 0x1da <main+0x104>
				{
					Numbers[dat] = Numbers[dat - 1];	
				}
				Numbers[0] = temp;
 1e8:	91 83       	std	Z+1, r25	; 0x01
				while((CH452_Read()>>4) != B3thButtonReleased) {};
 1ea:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 1ee:	82 95       	swap	r24
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	85 30       	cpi	r24, 0x05	; 5
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <main+0x114>
 1f6:	9a cf       	rjmp	.-204    	; 0x12c <main+0x56>
				continue;
			}
			if(dat == B4thButtonPressed)
 1f8:	8e 30       	cpi	r24, 0x0E	; 14
 1fa:	b1 f4       	brne	.+44     	; 0x228 <main+0x152>
			{
				CH452_Write(CH452_RIGHTCYC);		
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	93 e0       	ldi	r25, 0x03	; 3
 200:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				temp = Numbers[0];						
 204:	90 91 00 01 	lds	r25, 0x0100
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	f1 e0       	ldi	r31, 0x01	; 1
				for(dat = 0; dat < 7; dat++)	
				{
					Numbers[dat] = Numbers[dat + 1];	
 20c:	81 81       	ldd	r24, Z+1	; 0x01
 20e:	81 93       	st	Z+, r24
			}
			if(dat == B4thButtonPressed)
			{
				CH452_Write(CH452_RIGHTCYC);		
				temp = Numbers[0];						
				for(dat = 0; dat < 7; dat++)	
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	e7 30       	cpi	r30, 0x07	; 7
 214:	f8 07       	cpc	r31, r24
 216:	d1 f7       	brne	.-12     	; 0x20c <main+0x136>
				{
					Numbers[dat] = Numbers[dat + 1];	
				}
				Numbers[7] = temp;
 218:	90 83       	st	Z, r25
				while((CH452_Read()>>4) != B4thButtonReleased) {};
 21a:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 21e:	82 95       	swap	r24
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	86 30       	cpi	r24, 0x06	; 6
 224:	d1 f7       	brne	.-12     	; 0x21a <main+0x144>
 226:	82 cf       	rjmp	.-252    	; 0x12c <main+0x56>
				continue;
			}
			if(dat == B5thButtonPressed)
 228:	8a 30       	cpi	r24, 0x0A	; 10
 22a:	89 f4       	brne	.+34     	; 0x24e <main+0x178>
			{
				if(index == 128) index = 1;			
 22c:	10 38       	cpi	r17, 0x80	; 128
 22e:	11 f4       	brne	.+4      	; 0x234 <main+0x15e>
 230:	11 e0       	ldi	r17, 0x01	; 1
 232:	01 c0       	rjmp	.+2      	; 0x236 <main+0x160>
				else index = index << 1;			//Left shift flashing digit.
 234:	11 0f       	add	r17, r17
				CH452_Write(CH452_TWINKLE | index);
 236:	81 2f       	mov	r24, r17
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	96 60       	ori	r25, 0x06	; 6
 23c:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				while((CH452_Read()>>4) != B5thButtonReleased) {};
 240:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 244:	82 95       	swap	r24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	d1 f7       	brne	.-12     	; 0x240 <main+0x16a>
 24c:	6f cf       	rjmp	.-290    	; 0x12c <main+0x56>
				continue;
			}
			if(dat == B6thButtonPressed)
 24e:	8f 30       	cpi	r24, 0x0F	; 15
 250:	89 f4       	brne	.+34     	; 0x274 <main+0x19e>
			{
				if(index == 1) index = 128;
 252:	11 30       	cpi	r17, 0x01	; 1
 254:	11 f4       	brne	.+4      	; 0x25a <main+0x184>
 256:	10 e8       	ldi	r17, 0x80	; 128
 258:	01 c0       	rjmp	.+2      	; 0x25c <main+0x186>
				else index = index >> 1;
 25a:	16 95       	lsr	r17
				CH452_Write(CH452_TWINKLE | index);
 25c:	81 2f       	mov	r24, r17
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	96 60       	ori	r25, 0x06	; 6
 262:	0e 94 44 01 	call	0x288	; 0x288 <CH452_Write>
				while((CH452_Read()>>4) != B6thButtonReleased) {};
 266:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 26a:	82 95       	swap	r24
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	87 30       	cpi	r24, 0x07	; 7
 270:	d1 f7       	brne	.-12     	; 0x266 <main+0x190>
 272:	5c cf       	rjmp	.-328    	; 0x12c <main+0x56>
				continue;
			}
			if(dat == BigButtonPressed)
 274:	8b 30       	cpi	r24, 0x0B	; 11
 276:	09 f0       	breq	.+2      	; 0x27a <main+0x1a4>
 278:	59 cf       	rjmp	.-334    	; 0x12c <main+0x56>
			{
			//	CH452_Write();
				while((CH452_Read()>>4) != BigButtonReleased) {};
 27a:	0e 94 55 01 	call	0x2aa	; 0x2aa <CH452_Read>
 27e:	82 95       	swap	r24
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	d1 f7       	brne	.-12     	; 0x27a <main+0x1a4>
 286:	52 cf       	rjmp	.-348    	; 0x12c <main+0x56>

00000288 <CH452_Write>:
#include	"CH452CMD.H"	

void CH452_Write(unsigned short cmd)
{
	unsigned char i;	  
	CH452_LOAD_CLR;                		
 288:	c0 98       	cbi	0x18, 0	; 24
 28a:	20 e0       	ldi	r18, 0x00	; 0
	for(i=0;i!=12;i++)				
	{
		if (cmd&1) {CH452_DIN_SET;}
 28c:	80 ff       	sbrs	r24, 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <CH452_Write+0xc>
 290:	c2 9a       	sbi	0x18, 2	; 24
 292:	01 c0       	rjmp	.+2      	; 0x296 <CH452_Write+0xe>
		else {CH452_DIN_CLR;}  
 294:	c2 98       	cbi	0x18, 2	; 24
    	CH452_DCLK_CLR;
 296:	c1 98       	cbi	0x18, 1	; 24
    	cmd>>=1;
    	CH452_DCLK_SET;             
 298:	c1 9a       	sbi	0x18, 1	; 24

void CH452_Write(unsigned short cmd)
{
	unsigned char i;	  
	CH452_LOAD_CLR;                		
	for(i=0;i!=12;i++)				
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	2c 30       	cpi	r18, 0x0C	; 12
 29e:	19 f0       	breq	.+6      	; 0x2a6 <CH452_Write+0x1e>
	{
		if (cmd&1) {CH452_DIN_SET;}
		else {CH452_DIN_CLR;}  
    	CH452_DCLK_CLR;
    	cmd>>=1;
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	f3 cf       	rjmp	.-26     	; 0x28c <CH452_Write+0x4>
    	CH452_DCLK_SET;             
	}
  	CH452_LOAD_SET;         
 2a6:	c0 9a       	sbi	0x18, 0	; 24
}
 2a8:	08 95       	ret

000002aa <CH452_Read>:
unsigned char CH452_Read( void )
{
	unsigned char i;
  	unsigned char cmd,keycode;					               
  	cmd=0x07;			               
  	CH452_LOAD_CLR;
 2aa:	c0 98       	cbi	0x18, 0	; 24
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	87 e0       	ldi	r24, 0x07	; 7
  	for(i=0;i!=4;i++)  
	{
		if (cmd&1) {CH452_DIN_SET;}
 2b0:	80 ff       	sbrs	r24, 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <CH452_Read+0xe>
 2b4:	c2 9a       	sbi	0x18, 2	; 24
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <CH452_Read+0x10>
		else {CH452_DIN_CLR;}  		      
 2b8:	c2 98       	cbi	0x18, 2	; 24
    	CH452_DCLK_CLR;			 
 2ba:	c1 98       	cbi	0x18, 1	; 24
    	cmd>>=1;			      
    	CH452_DCLK_SET;			      
 2bc:	c1 9a       	sbi	0x18, 1	; 24
{
	unsigned char i;
  	unsigned char cmd,keycode;					               
  	cmd=0x07;			               
  	CH452_LOAD_CLR;
  	for(i=0;i!=4;i++)  
 2be:	9f 5f       	subi	r25, 0xFF	; 255
 2c0:	94 30       	cpi	r25, 0x04	; 4
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <CH452_Read+0x1e>
	{
		if (cmd&1) {CH452_DIN_SET;}
		else {CH452_DIN_CLR;}  		      
    	CH452_DCLK_CLR;			 
    	cmd>>=1;			      
 2c4:	86 95       	lsr	r24
 2c6:	f4 cf       	rjmp	.-24     	; 0x2b0 <CH452_Read+0x6>
    	CH452_DCLK_SET;			      
 	}
  	CH452_LOAD_SET;				      
 2c8:	c0 9a       	sbi	0x18, 0	; 24
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
  	keycode=0;				      
  	for(i=0;i!=7;i++)
	{
		if (CH452_PIN & (1<<CH452_DOUT_PIN)) keycode++;      
 2ce:	b3 99       	sbic	0x16, 3	; 22
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
    	CH452_DCLK_CLR;			 
 2d2:	c1 98       	cbi	0x18, 1	; 24
		keycode<<=1;     
 2d4:	88 0f       	add	r24, r24
    	CH452_DCLK_SET;
 2d6:	c1 9a       	sbi	0x18, 1	; 24
    	cmd>>=1;			      
    	CH452_DCLK_SET;			      
 	}
  	CH452_LOAD_SET;				      
  	keycode=0;				      
  	for(i=0;i!=7;i++)
 2d8:	9f 5f       	subi	r25, 0xFF	; 255
 2da:	97 30       	cpi	r25, 0x07	; 7
 2dc:	c1 f7       	brne	.-16     	; 0x2ce <CH452_Read+0x24>
    	CH452_DCLK_CLR;			 
		keycode<<=1;     
    	CH452_DCLK_SET;
 	}
  	return(keycode);			     
}
 2de:	08 95       	ret

000002e0 <CH452_Init>:

void CH452_Init(void)
{
	CH452_DDR = (1<<CH452_DCLK_PIN) | (1<<CH452_DIN_PIN) | (1<<CH452_LOAD_PIN);
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	87 bb       	out	0x17, r24	; 23
	CH452_DDR &= ~(1<<CH452_DOUT_PIN);
 2e4:	bb 98       	cbi	0x17, 3	; 23
	CH452_PORT |= (1<<CH452_DCLK_PIN) | (1<<CH452_LOAD_PIN) | (1<<CH452_DOUT_PIN);
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	8b 60       	ori	r24, 0x0B	; 11
 2ea:	88 bb       	out	0x18, r24	; 24
	CH452_PORT &= ~(1<<CH452_DIN_PIN);
 2ec:	c2 98       	cbi	0x18, 2	; 24
}
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
