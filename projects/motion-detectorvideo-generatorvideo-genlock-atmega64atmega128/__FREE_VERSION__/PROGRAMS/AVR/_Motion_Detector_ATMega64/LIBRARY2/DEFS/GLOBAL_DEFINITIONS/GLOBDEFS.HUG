;<$DS_HEADER>
;+--------------------------------------------------------------------------------+              
;|João D´Artagnan A. Oliveira Programmer and Author; 				  |
;|										  |
;| All rights reserved.								  |
;|										  |
;|   Redistribution and use in source and binary forms, with or without		  |
;|  modification, are permitted provided that the following conditions are met:	  |
;|										  |
;|   * Redistributions of source code must retain the above copyright		  |
;|     notice, this list of conditions and the following disclaimer.		  |
;|										  |
;|   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  |
;|   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    |
;|   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   |
;|   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     |
;|   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	  |
;|   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	  |
;|   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	  |
;|   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	  |
;|   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	  |
;|   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   |
;|   POSSIBILITY OF SUCH DAMAGE.						  |
;|										  |
;|   Brasília, Brazil November 30,2015 	06:28 am				  |
;+--------------------------------------------------------------------------------+
;</$DS_HEADER>
;+--------------------------------------------------------------+---+
;+------------------------------------------------------+
;| BY JOÃO DARTAGNAN ANTUNES OLIVEIRA			|
;| DATA: 10/04/2000					|
;>------------------------------------------------------<
;| G L O B A L  D E F I N I T I O N   F I L E 		|
;+------------------------------------------------------+
#ifndef __GLOBAL_DEFINITIONS__
	#define	__GLOBAL_DEFINITIONS__
	.message "+--------------------+"
	.message "|                    |"
	.message "| GLOBAL DEFINITIONS |"
	.message "|                    |"
	.message "+--------------------+"
	;+------------------------------------------------------+
	;| R E G I S T E R S   D E F I N I T I O N S		|
	;+------------------------------------------------------+
	.DEF	Acc		= r24				;my Works registers
	.DEF	AccH		= r25
	.DEF	AccT		= r16
	.DEF	AccTH		= r17
	.DEF	Temp		= r18				;My temp registers
	.DEF	TempH		= r19
	;+------------------------------------------------------+
	;| C O N S T A N T S   D E F I N I T I O N S		|
	;+------------------------------------------------------+
	.EQU	_ON			= 0XFF
	.EQU	_OFF			= 0X00
	.EQU	_EVEN			= 0X00
	.EQU	_ODD			= 0XFF
	.EQU	_NONE			= 0X00
	.EQU	_LEFT			= 0X01
	.EQU	_RIGHT			= 0X02
	.EQU	_UP			= 0X03
	.EQU	_DOWN			= 0X04
	.EQU	_PRESSED		= 0X05
	.EQU	_RELEASED		= 0X06
	.EQU	_TIMEOUT		= 0X07
	.EQU	_YES			= 0XFF
	.EQU	_NO			= 0X00
	.EQU	_OK			= 0XFF
	.EQU	_NOTOK			= 0X00
	;+------------------------------------------------------+
	;| ASCII CODES						|
	;+------------------------------------------------------+
	.EQU	_NULLCHAR		= 0X00		;Null Char
	.EQU	_BS			= 0X08		;Back space
	.EQU	_TAB			= 0X09		;Tab
	.EQU	_CR			= 0X0D		;Carriage Return
	.EQU	_LF			= 0X0A		;Line Feed
	.EQU	_NC			= 0XFF		;null char(special use)
	.EQU	_ASCII_NUL		= 0X00		;Null
	.EQU	_ASCII_SOH		= 0X01		; (start of heading)       
	.EQU	_ASCII_STX		= 0X02		; (start of text)          
	.EQU	_ASCII_ETX		= 0X03		; (end of text)            
	.EQU	_ASCII_EOT		= 0X04		; (end of transmission) - Not the same as ETB    
	.EQU	_ASCII_ENQ		= 0X05		; (enquiry)                
	.EQU	_ASCII_ACK		= 0X06		; (acknowledge)            
	.EQU	_ASCII_BEL 		= 0X07		; (bell) - Caused teletype machines to ring a bell.  Causes a beep
	.EQU	_ASCII_BS		= 0X08		; (backspace) - Moves the cursor (or print head) move backwards (left)
	.EQU	_ASCII_TAB		= 0X09		; (horizontal tab) - Moves the cursor (or print head) right to the next
	.EQU	_ASCII_LF  		= 0X0A		; (NL line feed, new line) - Moves the cursor (or print head) to a new
	.EQU	_ASCII_VT		= 0X0B		; (vertical tab)           
	.EQU	_ASCII_FF 		= 0X0C		; (form feed) - Advances paper to the top of the next page (if the
	.EQU	_ASCII_CR 		= 0X0D		; (carriage return) - Moves the cursor all the way to the left, but does
	.EQU	_ASCII_SO 		= 0X0E			; (shift out) - Switches output device to alternate character set.            
	.EQU	_ASCII_SI		= 0X0F		; (shift in)  - Switches output device back to default character set.
	.EQU	_ASCII_DLE 		= 0X10		; (data link escape)       
	.EQU	_ASCII_DC1		= 0X11		; (device control 1)       
	.EQU	_ASCII_DC2		= 0X12		; (device control 2)       
	.EQU	_ASCII_DC3		= 0X13		; (device control 3)       
	.EQU	_ASCII_DC4		= 0X14		; (device control 4)       
	.EQU	_ASCII_NAK		= 0X15		; (negative acknowledge)   
	.EQU	_ASCII_SYN		= 0X16		; (synchronous idle)       
	.EQU	_ASCII_ETB 		= 0X17		; (end of transmission block) - Not the same as EOT  
	.EQU	_ASCII_CAN		= 0X18		; (cancel)                 
	.EQU	_ASCII_EM		= 0X19		; (end of medium)  
	.EQU	_ASCII_SUB 		= 0X1A		; (substitute)             
	.EQU	_ASCII_ESC		= 0X1B		; (escape) 
	.EQU	_ASCII_FS  		= 0X1C		; (file separator)
	.EQU	_ASCII_GS 		= 0X1D		; (group separator)
	.EQU	_ASCII_RS  		= 0X1E		; (record separator)
	.EQU	_ASCII_US 		= 0X1F		; (unit separator)         
	.EQU	_ASCII_SPACE		= 0X20
	.EQU	_ASCII_SP		= _ASCII_SPACE
	.EQU	_ASCII_DEL		= 0X7F
	;+------------------------------------------------------+
	;| MATH DEFINITIONS					|
	;+------------------------------------------------------+
	.EQU	_LONG		= 4		;size of long
	.EQU	_INTEGER	= 2		;size of integer
	.EQU	_WORD		= 2		;size of word
	.EQU	_BYTE		= 1		;size of byte
	;+------------------------------------------------------+
	;| CHARACTER DISPLAY DEFINITIONS CHIP HD44780		|
	;+------------------------------------------------------+
	
	.EQU	_DISP_LINE_1	= 0			;1 LINE 
	.EQU	_DISP_LINE_2	= 1			;2 LINE
	.EQU	_DISP_FONT_5X8	= 0			;5X8 FONT SIZE
	.EQU	_DISP_FONT_5X10	= 1			;5X10 FONT SIZE
	.EQU	_DISP_4BITS	= 0			;4 bits interface definitions
	.EQU	_DISP_8BITS	= 1			;8 bits interface definitions
	;+----------------------------------------
	;| WAVE DEFINITIONS
	;+----------------------------------------
	.EQU	_WAVE_DAC_8	= 8			;8 bits wave dac
	.EQU	_WAVE_DAC_16	= 16			;16 bits wave dac
	.EQU	_WAVE_DAC_24	= 24			;24 bits wave dac
	.EQU	_WAVE_DAC_32	= 32			;32 bits wave dac
	.EQU	_WAVE_FS_5500	= 5500			;5500 sample/second
	.EQU	_WAVE_FS_6000	= 6000			;6000 sample/second
	.EQU	_WAVE_FS_8000	= 8000			;8000 sample/second
	.EQU	_WAVE_FS_11025	= 11050			;11050 sample/second
	.EQU	_WAVE_FS_22050	= 22050			;22050 sample/second
	.EQU	_WAVE_FS_32000	= 32000			;32000 sample/second
	.EQU	_WAVE_FS_44100	= 44100			;44100 sample/second
	.EQU	_WAVE_SOURCE_FLASH	= 1		;wave into avr flash
	.EQU	_WAVE_SOURCE_SRAM	= 2		;wave into avr sram
	.EQU	_WAVE_SOURCE_DEVICE	= 3		;wave into device
	.EQU	_WAVE_STATUS_PLAYING	= 1		;wave status playing
	.EQU	_WAVE_STATUS_STOPED	= 2		;wave status stoped
	.EQU	_WAVE_STATUS_END	= 3		;wave status end
	;+------------------------------------------------------+
	;| S R A M  B O O T  T Y P E 				|
	;+------------------------------------------------------+
	.EQU	_SRAM_NOT_CLEAR	= 0			;NO CLEAR SRAM DURING BOOT
	.EQU	_SRAM_CLEAR	= 1			;CLEAR SRAM DURING BOOT
	;+------------------------------------------------------+
	;| T I M E R S  D E F I N I T I O N S			|
	;+------------------------------------------------------+
	.EQU	_TIMER_STOP	= 0B00000000			;timer stop
	.EQU	_TIMER_DIV_1	= 0B00000001			;timer divisor factor by 1
	.EQU	_TIMER_DIV_8	= 0B00000010			;timer divisor factor by 8
	.EQU	_TIMER_DIV_64	= 0B00000011			;timer divisor factor by 64
	.EQU	_TIMER_DIV_256	= 0B00000100			;timer divisor factor by 256
	.EQU	_TIMER_DIV_1024	= 0B00000101			;timer divisor factor by 1024
	.EQU	_TIMER_FALL	= 0B00000110			;timer Fall
	.EQU	_TIMER_RISE	= 0B00000111			;timer Rise
	;+----------------------------------------
	;| PRESCALER FACTOR FOR TIMER 0 ATMEGA128
	;+----------------------------------------
	.EQU	_TIMERM0_STOP	 = 0B00000000			;timer stop
	.EQU	_TIMERM0_DIV_1 	 = 0B00000001			;timer divisor factor by 1
	.EQU	_TIMERM0_DIV_8	 = 0B00000010			;timer divisor factor by 8
	.EQU	_TIMERM0_DIV_32	 = 0B00000011			;timer divisor factor by 32
	.EQU	_TIMERM0_DIV_64	 = 0B00000100			;timer divisor factor by 64
	.EQU	_TIMERM0_DIV_128 = 0B00000101			;timer divisor factor by 64
	.EQU	_TIMERM0_DIV_256 = 0B00000110			;timer divisor factor by 256
	.EQU	_TIMERM0_DIV_1024= 0B00000111			;timer divisor factor by 1024
	;+----------------------------------------
	;| PRESCALER FACTOR FOR TIMER 2 ATMEGA128
	;+----------------------------------------
	.EQU	_TIMERM2_STOP	 = 0B00000000			;timer stop
	.EQU	_TIMERM2_DIV_1 	 = 0B00000001			;timer divisor factor by 1
	.EQU	_TIMERM2_DIV_8	 = 0B00000010			;timer divisor factor by 8
	.EQU	_TIMERM2_DIV_32	 = 0B00000011			;timer divisor factor by 32
	.EQU	_TIMERM2_DIV_256 = 0B00000100			;timer divisor factor by 256
	.EQU	_TIMERM2_DIV_1024= 0B00000101			;timer divisor factor by 1024
	.EQU	_TIMERM2_FALL	 = 0B00000110			;timer fall
	.EQU	_TIMERM2_RISE	 = 0B00000111			;timer rise
	;+----------------------------------------
	;| PRESCALER FACTOR FOR TIMER 13 ATMEGA128
	;+----------------------------------------
	.EQU	_TIMERM13_STOP	  = 0B00000000			;timer stop
	.EQU	_TIMERM13_DIV_1   = 0B00000001			;timer divisor factor by 1
	.EQU	_TIMERM13_DIV_8	  = 0B00000010			;timer divisor factor by 8
	.EQU	_TIMERM13_DIV_64  = 0B00000011			;timer divisor factor by 64
	.EQU	_TIMERM13_DIV_256 = 0B00000100			;timer divisor factor by 256
	.EQU	_TIMERM13_DIV_1024= 0B00000101			;timer divisor factor by 1024
	.EQU	_TIMERM13_FALL    = 0B00000110			;timer FALL
	.EQU	_TIMERM13_RISE 	  = 0B00000111			;timer RISE
	;+----------------------------------------
	;| PRESCALER FACTOR ADC ATMEGA128
	;+----------------------------------------
	.EQU	_TIMERMADC_DIV_2   = 0B00000001			;timer divisor factor by 2
	.EQU	_TIMERMADC_DIV_4   = 0B00000010			;timer divisor factor by 4
	.EQU	_TIMERMADC_DIV_8   = 0B00000011			;timer divisor factor by 8
	.EQU	_TIMERMADC_DIV_16  = 0B00000100			;timer divisor factor by 16
	.EQU	_TIMERMADC_DIV_32  = 0B00000101			;timer divisor factor by 32
	.EQU	_TIMERMADC_DIV_64  = 0B00000110			;timer divisor factor by 64
	.EQU	_TIMERMADC_DIV_128 = 0B00000111			;timer divisor factor by 128
	;+----------------------------------------
	;| INTERRUPT SENSING TYPE
	;+----------------------------------------
	.EQU	_LOW_LEVEL		= 0
	.EQU	_FALLING_EDGE		= 2
	.EQU	_RISING_EDGE		= 3
	;+----------------------------------------
	;| TIMERS
	;+----------------------------------------
	.EQU	_TIMER_0		= 0
	.EQU	_TIMER_1		= 1
	.EQU	_TIMER_2		= 2
	.EQU	_TIMER_3		= 3
	;+----------------------------------------
	;| INTERRUPT SOURCE
	;+----------------------------------------
	.EQU	_EXTERNAL_0		= 0
	.EQU	_EXTERNAL_1		= 1
	.EQU	_EXTERNAL_2		= 2
	.EQU	_EXTERNAL_3		= 3
	.EQU	_EXTERNAL_4		= 4
	.EQU	_EXTERNAL_5		= 5
	.EQU	_EXTERNAL_6		= 6
	.EQU	_EXTERNAL_7		= 7
	;+----------------------------------------
	;| COMM PORTS DEFINITIONS
	;+----------------------------------------
	.EQU	COMM0			= 0
	.EQU	COMM1			= 1
	.EQU	COMM2			= 2
	.EQU	COMM3			= 3
	;+------------------------------------------------------+
	;| M A C R O  D E F I N I T I O N S			|
	;+------------------------------------------------------+
	;  +---------------------+
	;  | P W M  M A C R O S  |
	;  +---------------------+
	; /
	;|
	;| @0 	   - PWM Prescaler factor
	;| Destroy - Acc
	;| Obs:
	;| 	_PWM_XB_INIT Function Always program PWM output in normal mode
	;|	call _PWM_OUT_INVERTED macro to invert it when needed
	; ----------------
	;| INIT 8 BIT PWM |
	; ----------------
	.MACRO	_PWM_8B_INIT
		in	Acc,SREG					;Save SREG state
		cli
		push	Acc
		in	Acc,TCCR1B					;Get actual value
		andi	Acc,0b11111000					;Mask unused bits
		ori	Acc,@0						;set prescaler factor
		out	TCCR1B,Acc				
		ldi	Acc,(0<<PWM11) | (1<<PWM10) | (1<<COM1A1) | (0<<COM1A0)	;Normal PWM output 8 bits
		out	TCCR1A,Acc					;program	
		pop	Acc
		out	SREG,Acc					;restore SREG state
	.ENDMACRO
	; ----------------
	;| INIT 9 BIT PWM |
	; ----------------
	.MACRO	_PWM_9B_INIT
		in	Acc,SREG					;Save SREG state
		cli
		push	Acc
		in	Acc,TCCR1B					;Get actual value
		andi	Acc,0b11111000					;Mask unused bits
		ori	Acc,@0						;set prescaler factor
		out	TCCR1B,Acc				
		ldi	Acc,(1<<PWM11) | (0<<PWM10) | (1<<COM1A1) | (0<<COM1A0)	;Normal PWM output 9 bits
		out	TCCR1A,Acc					;program
		pop	Acc
		out	SREG,Acc					;restore SREG state
	.ENDMACRO
	; -----------------
	;| INIT 10 BIT PWM |
	; -----------------
	.MACRO	_PWM_10B_INIT
		in	Acc,SREG					;Save SREG state
		cli
		push	Acc
		in	Acc,TCCR1B					;Get actual value
		andi	Acc,0b11111000					;Mask unused bits
		ori	Acc,@0						;set prescaler factor
		out	TCCR1B,Acc				
		ldi	Acc,(1<<PWM11) | (1<<PWM10) | (1<<COM1A1) | (0<<COM1A0)	;Normal PWM output 10 bits
		out	TCCR1A,Acc					;program	
		pop	Acc
		out	SREG,Acc					;restore SREG state
	.ENDMACRO
	; --------------------------
	;| SET PWM OUTPUT AS NORMAL |
	; --------------------------
	.MACRO	_PWM_OUT_NORMAL
		in	Acc,SREG					;Save SREG state
		cli
		push	Acc
		in	Acc,TCCR1A
		andi	Acc,0b00111111					;Mask unused bits
		ori	Acc,(1<<COM1A1) | (0<<COM1A0)			;Normal output programed
		out	TCCR1A,Acc					;program	
		pop	Acc
		out	SREG,Acc					;restore SREG state
	.ENDMACRO
	; ----------------------------
	;| SET PWM OUTPUT AS INVERTED |
	; ----------------------------
	.MACRO	_PWM_OUT_INVERTED
		in	Acc,SREG					;Save SREG state
		cli
		push	Acc
		in	Acc,TCCR1A
		andi	Acc,0b00111111					;Mask unused bits
		ori	Acc,(1<<COM1A1) | (1<<COM1A0)			;Normal output programed
		out	TCCR1A,Acc					;program	
		pop	Acc
		out	SREG,Acc					;restore SREG state
	.ENDMACRO
	; ----------------------------------
	;| SEND VALUES INTO ACC:ACCH TO PWM |
	; ----------------------------------
	.MACRO	_PWM_OUT
		out	OCR1AH,AccH					;Define PWM output value
		out	OCR1AL,Acc
	.ENDMACRO
	; ------------------------------
	;| SEND IMEDIATE VALUES TO  PWM |
	;| @0 - Imetiate value input	|
	; ------------------------------
	.MACRO	_PWM_OUT_IMMEDIATE
		push	Acc
		ldi	Acc,high(@0)
		out	OCR1AH,Acc					;Define PWM output value
		ldi	Acc,low(@0)
		out	OCR1AL,Acc
		pop	Acc
	.ENDMACRO
	;  +----------------------------+
	;  | T I M E R S   M A C R O S  |
	;  +----------------------------+
	; /
	;|
	; ------------------------------
	;| TIMER 0 INITIALIZATION	|
	;| @0 - Prescaler division	|
	;| @1 - Timer division		|
	;| obs: Enable timer 0 interrupt|
	; ------------------------------
	.MACRO	_TIMER0_INIT		;Init timer 0 to count mode and enable 
		ldi	Acc,@0		;TCCR0=with prescaler factor
		out	TCCR0,Acc
		ldi	Acc,@1		;TCNT0=with division factor
		out	TCNT0,Acc
	.ENDMACRO
	;  +-----------------------------+
	;  | H A N D D L E  M A C R O S  |
	;  +-----------------------------+
	; /
	;|
	;+-----------------------------------
	;|SET HANDDLE ADDRESS ROUTINE
	;|
	;|EXAMPLE OF USE
	;|
	;|	_SET_HANDDLE _HDC_OVF0_VECT,ADDRESS_ROUTINE	;Set timer overflow 0 to jump ADDRESS_ROUTINE label
	;|
	;+-----------------------------------
	.MACRO	_SET_HANDDLE
		push	AccT		;save AccT 
		in	AccT,SREG	;save SREG state
		cli			;disable interrupts
		ldi	Acc,low(@1)	;get handdle address
		ldi	AccH,high(@1)	
		sts	@0+0,Acc	;set handdle
		sts	@0+1,AccH
		out	SREG,AccT	;restore SREG
		pop	AccT		;restore AccT
	.ENDMACRO
	;+-----------------------------------
	;|SAVE HANDDLE ADDRESS INTO SRAM OR REGISTER
	;|
	;|EXAMPLE OF USE
	;|
	;|	_SAVE_HANDDLE _HDC_OVF0_VECT,SRAM_SAVE_ADDRESS	;Set timer overflow 0 address into SRAM_SAVE_ADDRESS
	;|
	;+-----------------------------------
	.MACRO	_SAVE_HANDDLE
		push	AccT		;save AccT 
		in	AccT,SREG	;save SREG state
		cli			;disable interrupts
		lds	Acc,@0+0	;get handdle address
		lds	AccH,@0+1	
		sts	@1+0,Acc	;save handdle
		sts	@1+1,AccH
		out	SREG,AccT	;restore SREG
		pop	AccT		;restore AccT
	.ENDMACRO
	;+-----------------------------------
	;|CALL HANDDLE ADDRESS INTO SRAM OR REGISTER
	;|
	;|EXAMPLE OF USE
	;|
	;|	_CALL_HANDDLE SRAM_HANDDLE_ADDRESS		;call routine address SRAM_HANDDLE_ADDRESS
	;|
	;+-----------------------------------
	.MACRO	_CALL_HANDDLE
		lds	ZL,@0+0			;get handdle address into sram
		lds	ZH,@0+1
		icall				;call 
	.ENDMACRO
	
	;+-----------------------------------
	;|LOAD IMEDIATE POINTER REGISTERS
	;+-----------------------------------
	.MACRO	LDIAW				;load ACC register with imediate value word
		ldi	Acc,low(@0)
		ldi	AccH,high(@0)
	.ENDMACRO
	.MACRO	LDIAWT				;load ACCT register with imediate value word
		ldi	AccT,low(@0)
		ldi	AccTH,high(@0)
	.ENDMACRO
	.MACRO	LDIAL				;load ACCT register with imediate value long
		ldi	Acc,low(lwrd(@0))
		ldi	AccH,high(lwrd(@0))
		ldi	AccT,low(hwrd(@0))
		ldi	AccTH,high(hwrd(@0))
	.ENDMACRO
	.MACRO	LDIX				;load X register with imediate value
		ldi	XL,low(@0)
		ldi	XH,high(@0)
	.ENDMACRO
	.MACRO	LDIY				;load Y register with imediate value
		ldi	YL,low(@0)
		ldi	YH,high(@0)
	.ENDMACRO
	.MACRO	LDIZ				;load Z register with imediate value
		ldi	ZL,low(@0)
		ldi	ZH,high(@0)
	.ENDMACRO
	;+-----------------------------------
	;| CLEAR REGISTER WORD 
	;+-----------------------------------
	;
	;	clrw	valid registers X,Y,Z
	.MACRO	clrw
		clr	@0L
		clr	@0H
	.ENDMACRO
	;+-----------------------------------
	;| LOAD IMEDIATE REGISTER WORD INTO REGISTER PAIR
	;+-----------------------------------
	;
	;	ldiw	Z,var valid registers X,Y,Z
	.MACRO	ldiw
		ldi	@0L,low(@1)
		ldi	@0H,high(@1)
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO AccH:Acc
	;+-----------------------------------
	;
	;	ldsaw	mem
	.MACRO	ldsaw
		lds	Acc,@0
		lds	AccH,@0+1
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO AccTH:AccT:AccH:Acc
	;+-----------------------------------
	;
	;	ldsal	mem
	.MACRO	ldsal
		lds	Acc,@0
		lds	AccH,@0+1
		lds	AccT,@0+2
		lds	AccTH,@0+3
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO AccH:Acc with index
	;+-----------------------------------
	;
	;	lddaw	[X,Y,Z],offset
	.MACRO	lddaw
		ldd	Acc,@0+@1
		ldd	AccH,@0+@1+1
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO ACCTH:AccT
	;+-----------------------------------
	;
	;	ldsawt	mem
	.MACRO	ldsawt
		lds	AccT,@0
		lds	AccTH,@0+1
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO ACCTH:AccT with index
	;+-----------------------------------
	;
	;	lddawt	[X,Y,Z],index
	.MACRO	lddawt
		ldd	AccT,@0+@1
		ldd	AccTH,@0+@1+1
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO REGISTER PAIR
	;+-----------------------------------
	;
	;	ldsw	Z,mem valid registers X,Y,Z
	.MACRO	ldsw
		lds	@0L,@1
		lds	@0H,@1+1
	.ENDMACRO
	;+-----------------------------------
	;| LOAD MEMORY WORD INTO REGISTER PAIR indexed
	;+-----------------------------------
	;
	;	lddw	Z,mem valid registers X,Y,Z,index
	.MACRO	lddw
		ldd	@0L,@1+@2
		ldd	@0H,@1+@2+1
	.ENDMACRO
	;+-----------------------------------
	;| STORE ACC WORD TO MEMORY 
	;+-----------------------------------
	;
	;	stsaw	mem
	.MACRO	stsaw
		sts	@0,Acc
		sts	@0+1,AccH
	.ENDMACRO
	;+-----------------------------------
	;| STORE ACC WORD TO MEMORY with index
	;+-----------------------------------
	;
	;	stdaw	[X,Y,Z],index
	.MACRO	stdaw
		std	@0+@1,Acc
		std	@0+@1+1,AccH
	.ENDMACRO
	;+-----------------------------------
	;| STORE ACCT WORD TO MEMORY 
	;+-----------------------------------
	;
	;	stsawt	mem
	.MACRO	stsawt
		sts	@0,AccT
		sts	@0+1,AccTH
	.ENDMACRO
	;+-----------------------------------
	;| STORE ACC LONG WORD TO MEMORY 
	;+-----------------------------------
	;
	;	stsal	mem
	.MACRO	stsal
		sts	@0,Acc
		sts	@0+1,AccH
		sts	@0+2,AccT
		sts	@0+3,AccTH
	.ENDMACRO
	;+-----------------------------------
	;| STORE ACCT WORD TO MEMORY with index
	;+-----------------------------------
	;
	;	stdawt	[X,Y,Z],index
	.MACRO	stdawt
		std	@0+@1,AccT
		std	@0+@1+1,AccTH
	.ENDMACRO
	;+-----------------------------------
	;| STORE REGISTER PAIR INTO MEMORY
	;+-----------------------------------
	;
	;	stsw	mem,Z  valid registers X,Y,Z
	.MACRO	stsw
		sts	@0,@1L
		sts	@0+1,@1H
	.ENDMACRO
	;+-----------------------------------
	;| STORE REGISTER PAIR INTO MEMORY with index
	;+-----------------------------------
	;
	;	stdw	[X,Y,Z],Z  valid registers X,Y,Z,index
	.MACRO	stdw
		std	@0+@1,@2L
		std	@0+@1+1,@2H
	.ENDMACRO
	;+-----------------------------------
	;| ADD IMEDIATE TO REGISTER
	;+-----------------------------------
	;
	;	addi	var,imm
	.MACRO	addi
		subi	@0,-(@1)
	.ENDMACRO
	.MACRO	adci
		sbci	@0,-(@1)
	.ENDMACRO
	;+-----------------------------------
	;| SUB ACC IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	subiaw	var
	.MACRO	subiaw
		subi	Acc,low(@0)
		sbci	AccH,high(@0)
	.ENDMACRO
	;+-----------------------------------
	;| SUB ACCT IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	subiawt	var
	.MACRO	subiawt
		subi	AccT,low(@0)
		sbci	AccTH,high(@0)
	.ENDMACRO
	;+-----------------------------------
	;| SUB ACC IMEDIATE TO REGISTER PAIR LONG
	;+-----------------------------------
	;
	;	subial	var
	.MACRO	subial
		subi	Acc,low(lwrd(@0))
		sbci	AccH,high(lwrd(@0))
		sbci	AccT,low(hwrd(@0))
		sbci	AccTH,high(hwrd(@0))
	.ENDMACRO
	;+-----------------------------------
	;| ADD ACC IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	addiaw	var
	.MACRO	addiaw
		subi	Acc,low(-(@0))
		sbci	AccH,high(-(@0))
	.ENDMACRO
	;+-----------------------------------
	;| ADD ACCT IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	addiawt	var
	.MACRO	addiawt
		subi	AccT,low(-(@0))
		sbci	AccTH,high(-(@0))
	.ENDMACRO
	;+-----------------------------------
	;| ADD ACC IMEDIATE TO REGISTER PAIR LONG
	;+-----------------------------------
	;
	;	addial	var
	.MACRO	addial
		subi	Acc,low(lwrd(-(@0)))
		sbci	AccH,high(lwrd(-(@0)))
		sbci	AccT,low(hwrd(-(@0)))
		sbci	AccTH,high(hwrd(-(@0)))
	.ENDMACRO
	;+-----------------------------------
	;| SUB IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	subiw	var,imm valid registers X,Y,Z
	.MACRO	subiw
		subi	@0L,low(@1)
		sbci	@0H,high(@1)
	.ENDMACRO
	;+-----------------------------------
	;| LSL PAIR WORD
	;+-----------------------------------
	;
	;	lslw	var,imm valid registers X,Y,Z
	.MACRO	lslw
		lsl	@0L
		rol	@0H
	.ENDMACRO
	;+-----------------------------------
	;| LSR PAIR WORD
	;+-----------------------------------
	;
	;	lsrw	var,imm valid registers X,Y,Z
	.MACRO	lsrw
		lsr	@0H
		ror	@0L
	.ENDMACRO
	;+-----------------------------------
	;| ASR PAIR WORD
	;+-----------------------------------
	;
	;	asrw	var,imm valid registers X,Y,Z
	.MACRO	asrw
		asr	@0H
		ror	@0L
	.ENDMACRO
	;+-----------------------------------
	;| LSL AccH:Acc
	;+-----------------------------------
	;
	;	lslaw
	.MACRO	lslaw
		lsl	Acc
		rol	AccH
	.ENDMACRO
	;+-----------------------------------
	;| LSL AccTH:AccT
	;+-----------------------------------
	;
	;	lslawt
	.MACRO	lslawt
		lsl	AccT
		rol	AccTH
	.ENDMACRO
	;+-----------------------------------
	;| LSR AccH:Acc
	;+-----------------------------------
	;
	;	lsraw
	.MACRO	lsraw
		lsr	AccH
		ror	Acc
	.ENDMACRO
	;+-----------------------------------
	;| LSR AccTH:AccT
	;+-----------------------------------
	;
	;	lsrawt
	.MACRO	lsrawt
		lsr	AccTH
		ror	AccT
	.ENDMACRO
	;+-----------------------------------
	;| ASR AccH:Acc
	;+-----------------------------------
	;
	;	asraw
	.MACRO	asraw
		asr	AccH
		ror	Acc
	.ENDMACRO
	;+-----------------------------------
	;| ASR AccTH:AccT
	;+-----------------------------------
	;
	;	asrawt
	.MACRO	asrawt
		asr	AccTH
		ror	AccT
	.ENDMACRO
	;+-----------------------------------
	;| SUB PAIR WORD 
	;+-----------------------------------
	;
	;	subw	(imm valid registers X,Y,Z),(imm valid registers X,Y,Z)
	.MACRO	subw
		sub	@0L,@1L
		sbc	@0H,@1H
	.ENDMACRO
	;+-----------------------------------
	;| ADD IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	addiw	var,imm valid registers X,Y,Z
	.MACRO	addiw
		subi	@0L,low(-(@1))
		sbci	@0H,high(-(@1))
	.ENDMACRO
	;+-----------------------------------
	;| ADD PAIR WORD 
	;+-----------------------------------
	;
	;	addw	(valid registers X,Y,Z),(valid registers X,Y,Z)
	.MACRO	addw
		add	@0L,@1L
		adc	@0H,@1H
	.ENDMACRO
	;+-----------------------------------
	;| COMPARE IMEDIATE TO REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	cpiw	var,imm valid registers X,Y,Z
	.MACRO	cpiw
		cpi	@0L,low(@1)
		ldi	Temp,high(@1)
		cpc	@0H,Temp
	.ENDMACRO
	;+-----------------------------------
	;| COMPARE REGISTER PAIR WORD 
	;+-----------------------------------
	;
	;	cpw	valid registers X,Y,Z,valid registers X,Y,Z
	.MACRO	cpw
		cp	@0L,@1L
		cpc	@0H,@1H
	.ENDMACRO
	;+-----------------------------------
	;| COMPARE ACC IMEDIATE TO WORD
	;+-----------------------------------
	;
	;	cpiaw	imm destroy Temp
	.MACRO	cpiaw
		cpi	Acc,low(@0)
		ldi	Temp,high(@0)
		cpc	AccH,Temp
	.ENDMACRO
	;+-----------------------------------
	;| COMPARE ACCT IMEDIATE TO WORD
	;+-----------------------------------
	;
	;	cpiawt	imm destroy Temp
	.MACRO	cpiawt
		cpi	AccT,low(@0)
		ldi	Temp,high(@0)
		cpc	AccTH,Temp
	.ENDMACRO
	;+-----------------------------------
	;| COMPARE ACC IMEDIATE TO LONG
	;+-----------------------------------
	;
	;	cpial	imm destroy Temp
	.MACRO	cpial
		cpi	Acc,low(lwrd(@0))
		ldi	Temp,high(lwrd(@0))
		cpc	AccH,Temp
		ldi	Temp,low(hwrd(@0))
		cpc	AccT,Temp
		ldi	Temp,high(hwrd(@0))
		cpc	AccTH,Temp
	.ENDMACRO
	;+-----------------------------------
	;| 16 BITS PUSHS
	;+-----------------------------------
	;
	;	push AccH:Acc
	;
	.MACRO	pushaw
		push	Acc
		push	AccH
	.ENDMACRO
	;
	;	push AccTH:AccT
	;
	.MACRO	pushawt
		push	AccT
		push	AccTH
	.ENDMACRO
	;
	;	push TempH:Temp
	;
	.MACRO	pushTempW
		push	Temp
		push	TempH
	.ENDMACRO
	;
	;	push X(word),Y(Word),Z(Word)
	;
	.MACRO	pushw
		push	@0L
		push	@0H
	.ENDMACRO
	;+-----------------------------------
	;| 16 BITS POPS
	;+-----------------------------------
	;
	;	pop AccH:Acc
	;
	.MACRO	popaw
		pop	AccH
		pop	Acc
	.ENDMACRO
	;
	;	pop AccTH:AccT
	;
	.MACRO	popawt
		pop	AccTH
		pop	AccT
	.ENDMACRO
	;
	;	pop TempH:Temp
	;
	.MACRO	popTempW
		pop	TempH
		pop	Temp
	.ENDMACRO
	;
	;	pop X(word),Y(Word),Z(Word)
	;
	.MACRO	popw
		pop	@0H
		pop	@0L
	.ENDMACRO
	;+-----------------------------------
	;| LONG BRANCHS
	;+-----------------------------------
	.MACRO	lbrne
		breq	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbreq
		brne	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrcs
		brcc	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrcc
		brcs	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrlt
		brge	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrmi
		brpl	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrpo
		brmi	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrge
		brlt	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrsh
		brlo	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	.MACRO	lbrlo
		brsh	PC+2
		rjmp	@0			;*<NOCHANGE>*
	.ENDMACRO
	;+-----------------------------------
	;| LOOPS
	;+-----------------------------------
	.EQU	_LOOP_BYTE	= 3			;byte and integer control loop variables
	.EQU	_LOOP_INTEGER	= 6
		;+---------------------
		;| USAGE
		;|
		;| .DSEG
		;| X:	.BYTE _LOOP_BYTE	<--create a _LOOP_BYTE variable
		;| .CSEG
		;|
		;| FOR X,1,5,1			<--create counting from 1 to 5 step 1
		;|	do something		<--put your code here
		;| NEXT X			<--next X
		;+----------------------
	
		;+--------------------
		;| IMEDIATE FOR BYTE LOOP
		;|
		;| FOR X,i1,i2,i3
		;| X=loop variable
		;| i1=initial
		;| i2=end count
		;| i2=step
		;+--------------------
	.MACRO	FOR
		ldi	Temp,@1
		sts	@0+0,Temp			;store initial
		ldi	Temp,@2
		sts	@0+1,Temp			;store end
		ldi	Temp,@3
		sts	@0+2,Temp			;store step
		ldi	Temp,low(PC)			;save in stack return address
		push	Temp			
		ldi	Temp,high(PC-2)
		push	Temp
	.ENDMACRO
		;+--------------------
		;| IMEDIATE FOR INTEGER LOOP
		;| Syntax same a FOR
		;+--------------------
	.MACRO	FORi
		ldi	Temp,low(@1)
		sts	@0+0,Temp			;store initial
		ldi	Temp,high(@1)
		sts	@0+1,Temp
		ldi	Temp,low(@2)
		sts	@0+2,Temp			;store end
		ldi	Temp,high(@2)
		sts	@0+3,Temp
		ldi	Temp,low(@3)
		sts	@0+4,Temp			;store step
		ldi	Temp,high(@3)
		sts	@0+5,Temp
		ldi	Temp,low(PC)			;save in stack return address
		push	Temp			
		ldi	Temp,high(PC-2)
		push	Temp
	.ENDMACRO
		;+--------------------
		;| NEXT byte complement of FOR byte
		;|
		;| NEXT X
		;| X=loop variable
		;+--------------------
	.MACRO	NEXT
		lds	Temp,@0+0			;get variable
		lds	TempH,@0+2			;get increment
		add	Temp,TempH			;next variable
		sts	@0+0,Temp
		lds	TempH,@0+1			;get end
		inc	TempH
		cp	Temp,TempH			;variable reach end ?
		brsh	PC+2				;yes finish
		ret
		pop	TempH
		pop	Temp
	.ENDMACRO
		;+--------------------
		;| NEXTi integer complement of FORi integer
		;|
		;| NEXTi X
		;+--------------------
	.MACRO	NEXTi
		push	r0
		push	r1
		lds	Temp,@0+0			;get variable
		lds	TempH,@0+1
		lds	r0,@0+4				;get step
		lds	r1,@0+5
		add	Temp,r0				;next variable
		adc	TempH,r1
		sts	@0+0,Temp			;store back
		sts	@0+1,TempH
		lds	r0,@0+2				;get end
		lds	r1,@0+3
		cp	r0,Temp				;variable reach end ?
		cpc	r1,TempH
		pop	r1
		pop	r0
		brcs	PC+2				;yes, finish	
		ret					;return to for
		pop	TempH
		pop	Temp
	.ENDMACRO
		;+--------------------
		;| PUSH LOWER REGISTERS R0..R15
		;+--------------------
	.MACRO	_M_PUSH_LOWER_REGS
		push	r0
		push	r1
		push	r2
		push	r3
		push	r4
		push	r5
		push	r6
		push	r7
		push	r8
		push	r9
		push	r10
		push	r11
		push	r12
		push	r13
		push	r14
		push	r15
	.ENDMACRO
		;+--------------------
		;| PUSH UPPER REGISTERS R16..R31
		;+--------------------
	.MACRO	_M_PUSH_UPPER_REGS
		push	r16
		push	r17
		push	r18
		push	r19
		push	r20
		push	r21
		push	r22
		push	r23
		push	r24
		push	r25
		push	r26
		push	r27
		push	r28
		push	r29
		push	r30
		push	r31
	.ENDMACRO
		;+--------------------
		;| PUSH ALL REGISTERS R0..R31
		;+--------------------
	.MACRO	_M_PUSH_ALL_REGS
		_M_PUSH_LOWER_REGS
		_M_PUSH_UPPER_REGS
	.ENDMACRO
		;+--------------------
		;| POP LOWER REGISTERS R0..R15
		;+--------------------
	.MACRO	_M_POP_LOWER_REGS
		pop	r15
		pop	r14
		pop	r13
		pop	r12
		pop	r11
		pop	r10
		pop	r9
		pop	r8
		pop	r7
		pop	r6
		pop	r5
		pop	r4
		pop	r3
		pop	r2
		pop	r1
		pop	r0
	.ENDMACRO
		;+--------------------
		;| POP UPPER REGISTERS R16..R31
		;+--------------------
	.MACRO	_M_POP_UPPER_REGS
		pop	r31
		pop	r30
		pop	r29
		pop	r28
		pop	r27
		pop	r26
		pop	r25
		pop	r24
		pop	r23
		pop	r22
		pop	r21
		pop	r20
		pop	r19
		pop	r18
		pop	r17
		pop	r16
	.ENDMACRO
		;+--------------------
		;| POP ALL REGISTERS R0..R31
		;+--------------------
	.MACRO	_M_POP_ALL_REGS
		_M_POP_UPPER_REGS
		_M_POP_LOWER_REGS
	.ENDMACRO
#endif	
.exit
	


