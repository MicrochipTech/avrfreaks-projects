;<$DS_HEADER>
;+--------------------------------------------------------------------------------+              
;|João D´Artagnan A. Oliveira Programmer and Author; 				  |
;|										  |
;| All rights reserved.								  |
;|										  |
;|   Redistribution and use in source and binary forms, with or without		  |
;|  modification, are permitted provided that the following conditions are met:	  |
;|										  |
;|   * Redistributions of source code must retain the above copyright		  |
;|     notice, this list of conditions and the following disclaimer.		  |
;|										  |
;|   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  |
;|   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    |
;|   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   |
;|   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE     |
;|   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	  |
;|   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	  |
;|   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	  |
;|   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	  |
;|   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	  |
;|   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   |
;|   POSSIBILITY OF SUCH DAMAGE.						  |
;|										  |
;|   Brasília, Brazil November 30,2015 	06:28 am				  |
;+--------------------------------------------------------------------------------+
;</$DS_HEADER>
;+--------------------------------------------------------------+---+-----------+
;|										|
;| DATE:17/12/2001 VERSION 1.0							|
;>------------------------------------------------------------------------------<
;| I N T E G E R  R O U T I N E S	     					|
;| U N S I G N E D  B Y T E  T O  S T R I N G 					|
;+------------------------------------------------------------------------------+
;| THIS DRIVE HAS INTEND TO USE WITH AVRS WITH SRAM				|
;+------------------------------------------------------------------------------+
#ifndef	__INTEGER_UBTOS__
	#define __INTEGER_UBTOS__
	.message "[ (MATH) INTEGER UBTOS ]"
;+----------------------------------------------------------------------+
;| _UBTOS								|
;| Convert unsigned byte to string with left zero removal		|
;| with 0 terminator							|
;|								  	|
;| Input  : Acc unsigned byte input				  	|
;| Output : Z--> SRAM string output with 0			  	|
;+----------------------------------------------------------------------+
	_UBTOS:
		push	Acc					;save useds
		push	AccH
		ldi	ZL,low(_DF_STR)
		ldi	ZH,high(_DF_STR)
		ldi	AccH,'+'				;set positive
		st	Z+,AccH
		ldi	AccH,'0'				;load first digit
	_UBTOS00:
		subi	Acc,100					;find hundreds first
		brcs	_UBTOS10				;found ? branch
		inc	AccH					;digit count
		jmp 	_UBTOS00
	_UBTOS10:
		st	Z+,AccH					;store hundreds
		subi	Acc,-100				;restore original number
		ldi	AccH,'0'				;load first digit
	_UBTOS20:
		subi	Acc,10					;find  first
		brcs	_UBTOS30				;found ? branch
		inc	AccH					;digit count
		jmp 	_UBTOS20
	_UBTOS30:
		st	Z+,AccH					;store digit
		subi	Acc,-10					;restore units
		ori	Acc,0x30				;to ascii
		st	Z+,Acc					;store units
		clr	Acc
		st	Z+,Acc					;zero terminator
		ldi	ZL,low(_DF_STR)
		ldi	ZH,high(_DF_STR)
		ldi	Acc,2
	_UBTOS40:
		adiw	ZL,1
		ld	Acch,Z
		cpi	Acch,'0'				;zero ?
		brne	_UBTOS50				;branch if not
		dec	Acc
		brne	_UBTOS40
		adiw	ZL,1					;put into correct position
	_UBTOS50:
		pop	AccH					;restore useds
		pop	Acc
		ret
;+----------------------------------------------------------------------+
;| _UBTOSU								|
;| Convert unsigned byte to string ASCII with fixed size 4 chars using 	|
;| following format +nnn/0						|
;|								  	|
;| Input  : Acc unsigned byte input				  	|
;| Output : Z--> SRAM string output with 0			  	|
;+----------------------------------------------------------------------+
	_UBTOSU:
		push	Acc					;save useds
		call 	_UBTOS					;normal conversion
	_UBTOSU_10:
		ld	Acc,Z					;'+'?
		cpi	Acc,'+'
		breq	_UBTOSU_20				;yes, branch
		sbiw	ZL,1
		jmp 	_UBTOSU_10				;until find '+'
	_UBTOSU_20:
		pop	Acc
		ret	
;+----------------------------------------------------------------------+
;| _UBTOSUS								|
;| Convert unsigned byte to string ASCII with fixed size 4 chars using 	|
;| following format +nnn/0 and fill left zeros with space		|
;|								  	|
;| Input  : Acc unsigned byte input				  	|
;| Output : Z--> SRAM string output with 0			  	|
;+----------------------------------------------------------------------+
	_UBTOSUS:
		push	Acc					;save useds
		call 	_UBTOS					;normal conversion
		ldd	Acc,Z+1					;check if next byte is 0 terminator?
		cpi	Acc,0
		brne	_UBTOSUS_10				;no, branch
		sbiw	ZL,1					;else Z--
	_UBTOSUS_10:
		ld	Acc,Z					;'+'?
		cpi	Acc,'+'
		breq	_UBTOSUS_30				;yes, branch
		cpi	Acc,'0'					;zero ?
		brne	_UBTOSUS_20
		ldi	Acc,' '					;plase space instead zero
		st	Z,Acc
	_UBTOSUS_20:
		sbiw	ZL,1
		jmp 	_UBTOSUS_10				;until find '+'
	_UBTOSUS_30:
		pop	Acc
		ret	
#endif
.exit
	


