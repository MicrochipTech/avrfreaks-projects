;+----------------------------------------------------------------------+
;| DOUBLE PRECISION FLOAT POINT 	I				|
;| BY JOÃO DARTAGNAN ANTUNES OLIVEIRA					|
;| NEED FILES 								|
;|									|
;|	FILE		DIRECTORY					|
;|									|
;|	GLOBDEFS.INC	AVR\LIBRARY\DEFS\GLOBAL_DEFINITIONS\GlobDefs.inc|
;|	MATHCONS.INC	Avr\Library\Math\float_double\HEADER_MACROS\MathCons.Inc|
;|	DFINF.INC	Avr\Library\Math\float_double\DFInf.Inc		|
;|	DFNORM.INC	Avr\Library\Math\float_double\DFNorm.Inc	|
;|	DFXTOF.INC	Avr\Library\Math\float_double\DFXtof.Inc	|
;|	DFMULDIV.INC	Avr\Library\Math\float_double\DFMulDiv.Inc	|
;|	DFADDSUB.INC	Avr\Library\Math\float_double\DFAddSub.Inc	|
;|	DFLDXSTX.INC	Avr\Library\Math\float_double\DFLdXStX.Inc	|
;+--------------------------------------------------------------+---+---+
;| BY JOÃO DARTAGNAN ANTUNES OLIVEIRA				    |
;|								    |
;|	ESTAS ROTINAS FORAM DESENVOLVIDAS A MÉDIDAS QUE FORAM SENDO |
;| NECESSITADAS DURANTE AO LONGO DE ALGUNS ANOS. ELAS  SÃO  DE  USO |
;| LIVRE E QUAISQUER ALTERAÇÕES SERÃO PERMITIDAS, DESDE QUE O  NOME |
;| DO AUTOR FIGURE NO INÍCIO DE CADA PROGRAMA E QUE CASO, O USO DELAS|
;| PROVOQUE MAL FUNCIONAMENTO, OU PREJUÍZO A TERCEIROS O AUTOR FICA |
;| LIVRE DESTAS. TODAS AS ROTINAS FORAM TESTADAS E ESTÃO EM  USO EM |
;| SISTEMAS ONDE NENHUM PROBLEMA FOI RELATADO, TODAS FORAM FEITAS DA|
;| FORMA MAIS PRÓXIMA DA PROGRAMAÇÃO ORIENTADA A OBJETO (OOP) SEM A |
;| IMPLEMENTAÇÃO DE INSTANCIAMENTO 				    |
;|								    |
;| QUAISQUER DÚVIDAS MEU EMAIL E: dartagnanmath@hotmail.com 	    |
;| A MEDIDA DO POSSÍVEL RESPONDEREI A TODOS OS EMAILS.		    |
;+------------------------------------------------------------------+
;|								    |
;|	THIS ROUTINES THEY WERE DEVELOPED AT SAME TIME THAT WERE    |
;| NEEDED ALONG OF SOME YEARS. THEY ARE FOR USE FREE AND ANY        |
;| ALTERATIONS WILL BE PERMITED SINCE THAT AUTHOR NAME APPEAR AT    |
;| BEGINNER OF EACH PROGRAM, AND IF INCORRECT USE PRODUCE           |
;| MALFUNCIONS OR DAMAGE TO THIRD PARTIES THE AUTHOR STAY FREE.	    |
;| ALL ROTINES WERE TESTED AND STILL IN USE AT MANY SYSTEM AND NO   |
;| PROBLEM WERE RELATED. ALL ROTINES WERE MAKED AT CLOSED "ORIENTED |
;| OBJECT PROGRAMING" (OOP) WITHOUT INSTANCE IMPLEMENTATIONS:	    |
;|								    |
;| ANY QUESTIONS MY EMAIL IS dartagnanmath@hotmail.com		    |
;| SOON AS POSSIBLE AS ANSWER ALL EMAILS			    |
;+--------------------------------------------------------------+---+---+
;|									|
;| DATE:24/05/2001 VERSION 1.0						|
;>--------------------------------------------------------------+-------<
;| D O U B L E   F L O A T  P O I N T  R O U T I N E S	     	|
;| F L O A T  T O  S T R I N G  			 	|
;+--------------------------------------------------------------+
;| THIS DRIVE HAS INTEND TO USE WITH AVRS WITH SRAM		|
;+--------------------------------------------------------------+

;+---------------------------------------------------+
;| CONVERT DOUBLE FLOAT NUMBER TO STRING NUMBER AT   |
;| SCIENTIFIC NOTATION FORMAT			     |
;|                                                   |
;| Input  : Floating accumulator		     |
;| Output : _DF_STR number in ASCII scientific format|
;| Destroy: Acc,AccH,Flags                           |
;+---------------------------------------------------+

_DFFTOS:
	push	ZL					;save useds
	push	ZH
	push	YL
	push	YH
	push	Acc
	push	AccH
	ldi	ZL,low(_DF_BCD)				;point to bcd number
	ldi	ZH,high(_DF_BCD)
	ldi	YL,low(_DF_STR)				;point to output ASCII string
	ldi	YH,high(_DF_STR)
	ldd	Acc,Z+7					;see mantisa signal
	andi	Acc,0x80
	ldi	AccH,'+'				;assume plus sign
	breq	_DFFTOS00				;positive? branch
	ldi	AccH,'-'				;else turn negative
_DFFTOS00:
	st	Y+,AccH					;store signal
	ldi	AccH,7					;get digits in BCD and store in ASCII
_DFFTOS10:
	ld	Acc,Z+					;get bcd digit
	push	Acc					;save 
	swap	Acc					;high nibble first
	andi	Acc,0x0f				;mask digit
	ori	Acc,0x30				;convert to ascii
	st	Y+,Acc
	cpi	AccH,7					;first digit
	brne	_DFFTOS15
	lds	Acc,_DF_FMASK				;set decimal separator comma or point
	andi	Acc,(1<<2)
	ldi	Acc,','					;assume comma
	breq	_DFFTOS13
	ldi	Acc,'.'					;else point
_DFFTOS13:
	st	Y+,Acc					;set
_DFFTOS15:
	pop	Acc					;restore low nibble
	andi	Acc,0x0f				;mask digit
	ori	Acc,0x30				;convert to ascii
	st	Y+,Acc
	dec	AccH					;next two nibbles
	brne	_DFFTOS10
	ldi	Acc,'E'					;exponent char marc 'E'
	st	Y+,Acc
	ld	Acc,Z					;see exponent signal
	andi	Acc,0x40
	ldi	AccH,'+'				;assume plus sign
	breq	_DFFTOS20				;positive? branch
	ldi	AccH,'-'				;else turn negative
_DFFTOS20:
	st	Y+,AccH					;store exponent signal
	ld	Acc,Z+					;get bcd digit
	push	Acc					;save 
	swap	Acc					;high nibble first
	andi	Acc,0x03				;mask digit
	ori	Acc,0x30				;convert to ascii
	st	Y+,Acc
	pop	Acc					;restore low nibble
	andi	Acc,0x0f				;mask digit
	ori	Acc,0x30				;convert to ascii
	st	Y+,Acc
	clr	Acc					;zero terminate string
	st	Y+,Acc
	pop	AccH					;restore useds
	pop	Acc
	pop	YH
	pop	YL
	pop	ZH
	pop	ZL
	ret
	

