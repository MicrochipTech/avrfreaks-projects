
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000104  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000198  2**0
                  ALLOC
  3 .noinit       00000000  00800063  00800063  00000198  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000198  2**0
                  CONTENTS
  5 .stab         000005ac  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000052d  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__vector_8>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e0       	ldi	r30, 0x04	; 4
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 36       	cpi	r26, 0x63	; 99
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4f c0       	rjmp	.+158    	; 0xf8 <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__heap_end>

0000005c <__vector_8>:
volatile uint16_t pwm; /* Note [1] */
volatile uint8_t direction;

SIGNAL (SIG_OVERFLOW1) /* Note [2] */
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	2f 93       	push	r18
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
    switch (direction) /* Note [3] */
  6c:	80 91 60 00 	lds	r24, 0x0060
  70:	88 23       	and	r24, r24
  72:	19 f0       	breq	.+6      	; 0x7a <__vector_8+0x1e>
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	31 f5       	brne	.+76     	; 0xc4 <__vector_8+0x68>
  78:	14 c0       	rjmp	.+40     	; 0xa2 <__vector_8+0x46>
    {
        case UP:
            if (++pwm == 1023)
  7a:	80 91 61 00 	lds	r24, 0x0061
  7e:	90 91 62 00 	lds	r25, 0x0062
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	90 93 62 00 	sts	0x0062, r25
  88:	80 93 61 00 	sts	0x0061, r24
  8c:	80 91 61 00 	lds	r24, 0x0061
  90:	90 91 62 00 	lds	r25, 0x0062
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	93 40       	sbci	r25, 0x03	; 3
  98:	a9 f4       	brne	.+42     	; 0xc4 <__vector_8+0x68>
                direction = DOWN;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 60 00 	sts	0x0060, r24
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__vector_8+0x68>
            break;

        case DOWN:
            if (--pwm == 0)
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	90 91 62 00 	lds	r25, 0x0062
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	90 93 62 00 	sts	0x0062, r25
  b0:	80 93 61 00 	sts	0x0061, r24
  b4:	80 91 61 00 	lds	r24, 0x0061
  b8:	90 91 62 00 	lds	r25, 0x0062
  bc:	89 2b       	or	r24, r25
  be:	11 f4       	brne	.+4      	; 0xc4 <__vector_8+0x68>
                direction = UP;
  c0:	10 92 60 00 	sts	0x0060, r1
            break;
    }

    OCR = pwm; /* Note [4] */
  c4:	80 91 61 00 	lds	r24, 0x0061
  c8:	90 91 62 00 	lds	r25, 0x0062
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <ioinit>:
}

void
ioinit (void) /* Note [5] */
{
    /* tmr1 is 10-bit PWM */
    TCCR1A = _BV (PWM10) | _BV (PWM11) | _BV (XCOM11);
  e0:	83 e8       	ldi	r24, 0x83	; 131
  e2:	8f bd       	out	0x2f, r24	; 47

    /* tmr1 running on full MCU clock */
    TCCR1B = _BV (CS10);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	8e bd       	out	0x2e, r24	; 46

    /* set PWM value to 0 */
    OCR = 0;
  e8:	1b bc       	out	0x2b, r1	; 43
  ea:	1a bc       	out	0x2a, r1	; 42

    /* enable OC1 and PB2 as output */
    DDROC = _BV (OC1);
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	87 bb       	out	0x17, r24	; 23

static __inline__ void timer_enable_int (unsigned char ints)
{
#ifdef TIMSK
    TIMSK = ints;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	89 bf       	out	0x39, r24	; 57

    timer_enable_int (_BV (TOIE1));

    /* enable interrupts */
    sei ();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <main>:
}

int
main (void)
{
  f8:	cf e5       	ldi	r28, 0x5F	; 95
  fa:	d4 e0       	ldi	r29, 0x04	; 4
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
    ioinit ();
 100:	ef df       	rcall	.-34     	; 0xe0 <ioinit>
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0xa>
