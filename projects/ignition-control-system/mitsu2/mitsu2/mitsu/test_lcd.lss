
test_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800078  00800078  00000798  2**0
                  ALLOC
  3 .noinit       00000000  00800096  00800096  00000798  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000798  2**0
                  CONTENTS
  5 .stab         00002274  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000d34  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__vector_2>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__vector_4>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	44 c1       	rjmp	.+648    	; 0x29a <__vector_8>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	3a c0       	rjmp	.+116    	; 0x92 <__vector_14>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ee       	ldi	r30, 0xEC	; 236
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e7       	ldi	r26, 0x78	; 120
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 39       	cpi	r26, 0x96	; 150
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	4c c1       	rjmp	.+664    	; 0x2f2 <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__heap_end>

0000005c <__vector_2>:
const int channel = 4;
volatile div_t dfg;

SIGNAL (SIG_INTERRUPT1)
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
 num1=num;
  6a:	80 91 90 00 	lds	r24, 0x0090
  6e:	90 91 91 00 	lds	r25, 0x0091
  72:	90 93 93 00 	sts	0x0093, r25
  76:	80 93 92 00 	sts	0x0092, r24
 num=0;
  7a:	10 92 91 00 	sts	0x0091, r1
  7e:	10 92 90 00 	sts	0x0090, r1
 PORTB|= _BV(PB1);
  82:	c1 9a       	sbi	0x18, 1	; 24
  84:	9f 91       	pop	r25
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <__vector_14>:
}

INTERRUPT (SIG_ADC) {
  92:	78 94       	sei
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
        unsigned char adlow,adhigh;
        adlow=ADCL; //Do not combine the two lines into one C statement
  a6:	24 b1       	in	r18, 0x04	; 4
        adhigh=ADCH;
  a8:	85 b1       	in	r24, 0x05	; 5
        analog_result=(adhigh<<8)|(adlow & 0xFF);
  aa:	99 27       	eor	r25, r25
  ac:	98 2f       	mov	r25, r24
  ae:	88 27       	eor	r24, r24
  b0:	33 27       	eor	r19, r19
  b2:	82 2b       	or	r24, r18
  b4:	93 2b       	or	r25, r19
  b6:	90 93 7a 00 	sts	0x007A, r25
  ba:	80 93 79 00 	sts	0x0079, r24
        analog_busy=0;
  be:	10 92 78 00 	sts	0x0078, r1
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	3f 91       	pop	r19
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_4>:
}

SIGNAL (SIG_OVERFLOW2) /* Note [2] */
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
TCNT2=255-196;  //okolo 20Hz - 19.92Hz
  f6:	8b e3       	ldi	r24, 0x3B	; 59
  f8:	84 bd       	out	0x24, r24	; 36
PORTB&= ~_BV(PB1);
  fa:	c1 98       	cbi	0x18, 1	; 24
if ( ++asd == 10 )
  fc:	80 91 84 00 	lds	r24, 0x0084
 100:	90 91 85 00 	lds	r25, 0x0085
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 85 00 	sts	0x0085, r25
 10a:	80 93 84 00 	sts	0x0084, r24
 10e:	80 91 84 00 	lds	r24, 0x0084
 112:	90 91 85 00 	lds	r25, 0x0085
 116:	0a 97       	sbiw	r24, 0x0a	; 10
 118:	09 f0       	breq	.+2      	; 0x11c <__vector_4+0x48>
 11a:	aa c0       	rjmp	.+340    	; 0x270 <__vector_4+0x19c>
 {
	
	lcd_gotoxy(0,0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	7d d1       	rcall	.+762    	; 0x41c <lcd_gotoxy>
        itoa( num, buffer, 10);
 122:	80 91 90 00 	lds	r24, 0x0090
 126:	90 91 91 00 	lds	r25, 0x0091
 12a:	4a e0       	ldi	r20, 0x0A	; 10
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	66 e8       	ldi	r22, 0x86	; 134
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	ac d1       	rcall	.+856    	; 0x48c <itoa>
	lcd_puts(buffer);
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	60 d1       	rcall	.+704    	; 0x3fa <lcd_puts>
	lcd_puts("Hz");
 13a:	82 e6       	ldi	r24, 0x62	; 98
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	5d d1       	rcall	.+698    	; 0x3fa <lcd_puts>
	lcd_puts(",");
 140:	85 e6       	ldi	r24, 0x65	; 101
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	5a d1       	rcall	.+692    	; 0x3fa <lcd_puts>
	dfg = div(analog_result,400);
 146:	80 91 79 00 	lds	r24, 0x0079
 14a:	90 91 7a 00 	lds	r25, 0x007A
 14e:	60 e9       	ldi	r22, 0x90	; 144
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	a5 d2       	rcall	.+1354   	; 0x69e <__divmodhi4>
 154:	60 93 7b 00 	sts	0x007B, r22
 158:	70 93 7c 00 	sts	0x007C, r23
 15c:	80 93 7d 00 	sts	0x007D, r24
 160:	90 93 7e 00 	sts	0x007E, r25
	itoa( dfg.quot, buffer, 10);
 164:	80 91 7b 00 	lds	r24, 0x007B
 168:	90 91 7c 00 	lds	r25, 0x007C
 16c:	4a e0       	ldi	r20, 0x0A	; 10
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	66 e8       	ldi	r22, 0x86	; 134
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	8b d1       	rcall	.+790    	; 0x48c <itoa>
	lcd_puts(buffer);
 176:	86 e8       	ldi	r24, 0x86	; 134
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	3f d1       	rcall	.+638    	; 0x3fa <lcd_puts>
	lcd_puts(".");
 17c:	87 e6       	ldi	r24, 0x67	; 103
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	3c d1       	rcall	.+632    	; 0x3fa <lcd_puts>
	if (dfg.rem / 0.4 < 100) {lcd_puts("0");};
 182:	60 91 7d 00 	lds	r22, 0x007D
 186:	70 91 7e 00 	lds	r23, 0x007E
 18a:	88 27       	eor	r24, r24
 18c:	77 fd       	sbrc	r23, 7
 18e:	80 95       	com	r24
 190:	98 2f       	mov	r25, r24
 192:	1a d2       	rcall	.+1076   	; 0x5c8 <__floatsisf>
 194:	2d ec       	ldi	r18, 0xCD	; 205
 196:	3c ec       	ldi	r19, 0xCC	; 204
 198:	4c ec       	ldi	r20, 0xCC	; 204
 19a:	5e e3       	ldi	r21, 0x3E	; 62
 19c:	b2 d1       	rcall	.+868    	; 0x502 <__divsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	48 ec       	ldi	r20, 0xC8	; 200
 1a4:	52 e4       	ldi	r21, 0x42	; 66
 1a6:	1a d2       	rcall	.+1076   	; 0x5dc <__eqsf2>
 1a8:	88 23       	and	r24, r24
 1aa:	1c f4       	brge	.+6      	; 0x1b2 <__vector_4+0xde>
 1ac:	89 e6       	ldi	r24, 0x69	; 105
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	24 d1       	rcall	.+584    	; 0x3fa <lcd_puts>
	if (dfg.rem / 0.4 < 10)  {lcd_puts("0");};
 1b2:	60 91 7d 00 	lds	r22, 0x007D
 1b6:	70 91 7e 00 	lds	r23, 0x007E
 1ba:	88 27       	eor	r24, r24
 1bc:	77 fd       	sbrc	r23, 7
 1be:	80 95       	com	r24
 1c0:	98 2f       	mov	r25, r24
 1c2:	02 d2       	rcall	.+1028   	; 0x5c8 <__floatsisf>
 1c4:	2d ec       	ldi	r18, 0xCD	; 205
 1c6:	3c ec       	ldi	r19, 0xCC	; 204
 1c8:	4c ec       	ldi	r20, 0xCC	; 204
 1ca:	5e e3       	ldi	r21, 0x3E	; 62
 1cc:	9a d1       	rcall	.+820    	; 0x502 <__divsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e2       	ldi	r20, 0x20	; 32
 1d4:	51 e4       	ldi	r21, 0x41	; 65
 1d6:	02 d2       	rcall	.+1028   	; 0x5dc <__eqsf2>
 1d8:	88 23       	and	r24, r24
 1da:	1c f4       	brge	.+6      	; 0x1e2 <__vector_4+0x10e>
 1dc:	89 e6       	ldi	r24, 0x69	; 105
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0c d1       	rcall	.+536    	; 0x3fa <lcd_puts>
	itoa( dfg.rem / 0.4, buffer, 10);
 1e2:	60 91 7d 00 	lds	r22, 0x007D
 1e6:	70 91 7e 00 	lds	r23, 0x007E
 1ea:	88 27       	eor	r24, r24
 1ec:	77 fd       	sbrc	r23, 7
 1ee:	80 95       	com	r24
 1f0:	98 2f       	mov	r25, r24
 1f2:	ea d1       	rcall	.+980    	; 0x5c8 <__floatsisf>
 1f4:	2d ec       	ldi	r18, 0xCD	; 205
 1f6:	3c ec       	ldi	r19, 0xCC	; 204
 1f8:	4c ec       	ldi	r20, 0xCC	; 204
 1fa:	5e e3       	ldi	r21, 0x3E	; 62
 1fc:	82 d1       	rcall	.+772    	; 0x502 <__divsf3>
 1fe:	c7 d1       	rcall	.+910    	; 0x58e <__fixsfsi>
 200:	dc 01       	movw	r26, r24
 202:	cb 01       	movw	r24, r22
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	66 e8       	ldi	r22, 0x86	; 134
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	3f d1       	rcall	.+638    	; 0x48c <itoa>
	lcd_puts(buffer);
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	f3 d0       	rcall	.+486    	; 0x3fa <lcd_puts>
	lcd_puts("V     \n");
 214:	8b e6       	ldi	r24, 0x6B	; 107
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	f0 d0       	rcall	.+480    	; 0x3fa <lcd_puts>
	itoa( num1, buffer, 10);
 21a:	80 91 92 00 	lds	r24, 0x0092
 21e:	90 91 93 00 	lds	r25, 0x0093
 222:	4a e0       	ldi	r20, 0x0A	; 10
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	66 e8       	ldi	r22, 0x86	; 134
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	30 d1       	rcall	.+608    	; 0x48c <itoa>
        lcd_puts(buffer);
 22c:	86 e8       	ldi	r24, 0x86	; 134
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	e4 d0       	rcall	.+456    	; 0x3fa <lcd_puts>
	itoa( ++asd1, buffer, 10);
 232:	80 91 81 00 	lds	r24, 0x0081
 236:	90 91 82 00 	lds	r25, 0x0082
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 82 00 	sts	0x0082, r25
 240:	80 93 81 00 	sts	0x0081, r24
 244:	80 91 81 00 	lds	r24, 0x0081
 248:	90 91 82 00 	lds	r25, 0x0082
 24c:	4a e0       	ldi	r20, 0x0A	; 10
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	66 e8       	ldi	r22, 0x86	; 134
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	1b d1       	rcall	.+566    	; 0x48c <itoa>
	lcd_puts(",");
 256:	85 e6       	ldi	r24, 0x65	; 101
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	cf d0       	rcall	.+414    	; 0x3fa <lcd_puts>
	lcd_puts(buffer);
 25c:	86 e8       	ldi	r24, 0x86	; 134
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	cc d0       	rcall	.+408    	; 0x3fa <lcd_puts>
	lcd_puts("    ");
 262:	83 e7       	ldi	r24, 0x73	; 115
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	c9 d0       	rcall	.+402    	; 0x3fa <lcd_puts>
 	asd=0;
 268:	10 92 85 00 	sts	0x0085, r1
 26c:	10 92 84 00 	sts	0x0084, r1
 }
 num=0;
 270:	10 92 91 00 	sts	0x0091, r1
 274:	10 92 90 00 	sts	0x0090, r1
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_8>:
}

SIGNAL (SIG_OVERFLOW1) /* Note [2] */
{
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
TCNT1=65535-20;
 2a8:	8b ee       	ldi	r24, 0xEB	; 235
 2aa:	9f ef       	ldi	r25, 0xFF	; 255
 2ac:	9d bd       	out	0x2d, r25	; 45
 2ae:	8c bd       	out	0x2c, r24	; 44
    num++;
 2b0:	80 91 90 00 	lds	r24, 0x0090
 2b4:	90 91 91 00 	lds	r25, 0x0091
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 91 00 	sts	0x0091, r25
 2be:	80 93 90 00 	sts	0x0090, r24
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <ioinit>:
/*    switch (direction) 
    {
        case UP:
            if (++pwm == 900)
                direction = DOWN;
            break;
        case DOWN:
            if (--pwm == 50)
                direction = UP;
            break;
    }
    OCR = pwm; */
}

void
ioinit (void) /* Note [5] */
{
    cli();
 2d0:	f8 94       	cli
    /* tmr1 is 10-bit PWM */
//    TCCR1A = _BV (PWM10) | _BV (PWM11) | _BV (XCOM11);
//     TCCR1A = _BV (XCOM11);
    /* tmr1 running on full MCU clock */
    TCCR1B = _BV (CS10); // 4MHz/256 = 15625Hz
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	8e bd       	out	0x2e, r24	; 46
    TCCR2 = _BV (CS21)|_BV (CS20)|_BV (CS22);
 2d6:	87 e0       	ldi	r24, 0x07	; 7
 2d8:	85 bd       	out	0x25, r24	; 37

static __inline__ void timer_enable_int (unsigned char ints)
{
#ifdef TIMSK
    TIMSK = ints;
 2da:	84 e4       	ldi	r24, 0x44	; 68
 2dc:	89 bf       	out	0x39, r24	; 57
    /* set PWM value to 0 */
//     OCR = 511;
    /* enable OC1 and PB2 as output */
//     DDROC = _BV (OC1);
    timer_enable_int ( _BV (TOIE1) | _BV (TOIE2) );
    /* enable interrupts */
//    MCUCR = _BV (ISC11) | _BV (ISC10);
    MCUCR = _BV (ISC11);
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	85 bf       	out	0x35, r24	; 53
    GICR = _BV(INT1);
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	8b bf       	out	0x3b, r24	; 59
    ADMUX  = (1<<REFS1)|(1<<REFS0)|(channel );
 2e6:	84 ec       	ldi	r24, 0xC4	; 196
 2e8:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADIF)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADFR)|(1<<ADSC);
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	86 b9       	out	0x06, r24	; 6
    sei ();
 2ee:	78 94       	sei
 2f0:	08 95       	ret

000002f2 <main>:
}

int main(void)
{
 2f2:	cf e5       	ldi	r28, 0x5F	; 95
 2f4:	d4 e0       	ldi	r29, 0x04	; 4
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	cd bf       	out	0x3d, r28	; 61
    DDRD &=~ (1 << PD3); /* Pin PD2 input*/
 2fa:	8b 98       	cbi	0x11, 3	; 17
    PORTD |= (1 << PD3); /* Pin PD2 pull-up enabled*/
 2fc:	93 9a       	sbi	0x12, 3	; 18
    /*eeprom_write_byte (uint8_t *addr, uint8_t value)*/
    /* initialize display, cursor off */
    lcd_init(LCD_DISP_ON);
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	94 d0       	rcall	.+296    	; 0x42a <lcd_init>
    ioinit ();
 302:	e6 df       	rcall	.-52     	; 0x2d0 <ioinit>
    DDRB|= _BV(PB1);
 304:	b9 9a       	sbi	0x17, 1	; 23
    /*    eeprom_busy_wait ();
    num = eeprom_read_byte (sdf); */
    lcd_clrscr();   /* clear display home cursor */ 
 306:	87 d0       	rcall	.+270    	; 0x416 <lcd_clrscr>
    DDRB|= _BV(PB1);
 308:	b9 9a       	sbi	0x17, 1	; 23
 30a:	ff cf       	rjmp	.-2      	; 0x30a <main+0x18>

0000030c <toggle_e>:
#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 30c:	90 9a       	sbi	0x12, 0	; 18
    lcd_e_delay();
 30e:	00 c0       	rjmp	.+0      	; 0x310 <toggle_e+0x4>
    lcd_e_low();
 310:	90 98       	cbi	0x12, 0	; 18
 312:	08 95       	ret

00000314 <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	08 2f       	mov	r16, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 31a:	66 23       	and	r22, r22
 31c:	11 f0       	breq	.+4      	; 0x322 <lcd_write+0xe>
       lcd_rs_high();
 31e:	91 9a       	sbi	0x12, 1	; 18
 320:	01 c0       	rjmp	.+2      	; 0x324 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 322:	91 98       	cbi	0x12, 1	; 18
    }
    lcd_rw_low();
 324:	92 98       	cbi	0x12, 2	; 18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 326:	84 b3       	in	r24, 0x14	; 20
 328:	8f 60       	ori	r24, 0x0F	; 15
 32a:	84 bb       	out	0x14, r24	; 20

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 32c:	15 b3       	in	r17, 0x15	; 21
 32e:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 330:	80 2f       	mov	r24, r16
 332:	82 95       	swap	r24
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	81 2b       	or	r24, r17
 338:	85 bb       	out	0x15, r24	; 21
        lcd_e_toggle();
 33a:	e8 df       	rcall	.-48     	; 0x30c <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 33c:	0f 70       	andi	r16, 0x0F	; 15
 33e:	01 2b       	or	r16, r17
 340:	05 bb       	out	0x15, r16	; 21
        lcd_e_toggle();
 342:	e4 df       	rcall	.-56     	; 0x30c <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 344:	1f 60       	ori	r17, 0x0F	; 15
 346:	15 bb       	out	0x15, r17	; 21
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <lcd_read>:
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 34e:	88 23       	and	r24, r24
 350:	11 f0       	breq	.+4      	; 0x356 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 352:	91 9a       	sbi	0x12, 1	; 18
 354:	01 c0       	rjmp	.+2      	; 0x358 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 356:	91 98       	cbi	0x12, 1	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 358:	92 9a       	sbi	0x12, 2	; 18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 35a:	84 b3       	in	r24, 0x14	; 20
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	84 bb       	out	0x14, r24	; 20
        
        lcd_e_high();
 360:	90 9a       	sbi	0x12, 0	; 18
        lcd_e_delay();        
 362:	00 c0       	rjmp	.+0      	; 0x364 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 364:	83 b3       	in	r24, 0x13	; 19
        lcd_e_low();
 366:	90 98       	cbi	0x12, 0	; 18
        
        lcd_e_delay();                       /* Enable 500ns low       */
 368:	00 c0       	rjmp	.+0      	; 0x36a <lcd_read+0x1c>
        
        lcd_e_high();
 36a:	90 9a       	sbi	0x12, 0	; 18
        lcd_e_delay();
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 36e:	93 b3       	in	r25, 0x13	; 19
        lcd_e_low();
 370:	90 98       	cbi	0x12, 0	; 18
 372:	82 95       	swap	r24
 374:	80 7f       	andi	r24, 0xF0	; 240
 376:	9f 70       	andi	r25, 0x0F	; 15
 378:	89 2b       	or	r24, r25
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
        lcd_e_low();

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 37a:	99 27       	eor	r25, r25
 37c:	08 95       	ret

0000037e <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	e6 df       	rcall	.-52     	; 0x34e <lcd_read>
 382:	87 fd       	sbrc	r24, 7
 384:	fc cf       	rjmp	.-8      	; 0x37e <lcd_waitbusy>
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	de df       	rcall	.-68     	; 0x34e <lcd_read>
    
}/* lcd_waitbusy */
 392:	99 27       	eor	r25, r25
 394:	08 95       	ret

00000396 <lcd_getxy>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 396:	f3 df       	rcall	.-26     	; 0x37e <lcd_waitbusy>
}
 398:	99 27       	eor	r25, r25
 39a:	08 95       	ret

0000039c <lcd_data>:
 39c:	1f 93       	push	r17
 39e:	18 2f       	mov	r17, r24
 3a0:	ee df       	rcall	.-36     	; 0x37e <lcd_waitbusy>
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	81 2f       	mov	r24, r17
 3a6:	b6 df       	rcall	.-148    	; 0x314 <lcd_write>
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <lcd_command>:
 3ac:	1f 93       	push	r17
 3ae:	18 2f       	mov	r17, r24
 3b0:	e6 df       	rcall	.-52     	; 0x37e <lcd_waitbusy>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	81 2f       	mov	r24, r17
 3b6:	ae df       	rcall	.-164    	; 0x314 <lcd_write>
 3b8:	1f 91       	pop	r17
 3ba:	08 95       	ret

000003bc <lcd_putc>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 3bc:	1f 93       	push	r17
 3be:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 3c0:	de df       	rcall	.-68     	; 0x37e <lcd_waitbusy>
    if (c=='\n')
 3c2:	1a 30       	cpi	r17, 0x0A	; 10
 3c4:	41 f4       	brne	.+16     	; 0x3d6 <lcd_putc+0x1a>
 3c6:	80 34       	cpi	r24, 0x40	; 64
 3c8:	10 f4       	brcc	.+4      	; 0x3ce <lcd_putc+0x12>
 3ca:	80 e4       	ldi	r24, 0x40	; 64
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_putc+0x14>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	80 58       	subi	r24, 0x80	; 128
 3d2:	ec df       	rcall	.-40     	; 0x3ac <lcd_command>
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <lcd_putc+0x20>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	81 2f       	mov	r24, r17
 3da:	9c df       	rcall	.-200    	; 0x314 <lcd_write>
 3dc:	1f 91       	pop	r17
 3de:	08 95       	ret

000003e0 <lcd_puts_p>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	ec 01       	movw	r28, r24
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <lcd_puts_p+0xa>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 3e8:	e9 df       	rcall	.-46     	; 0x3bc <lcd_putc>
 3ea:	fe 01       	movw	r30, r28
 3ec:	21 96       	adiw	r28, 0x01	; 1
 3ee:	84 91       	lpm	r24, Z
 3f0:	88 23       	and	r24, r24
 3f2:	d1 f7       	brne	.-12     	; 0x3e8 <lcd_puts_p+0x8>
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <lcd_puts>:
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
 400:	01 c0       	rjmp	.+2      	; 0x404 <lcd_puts+0xa>
 402:	dc df       	rcall	.-72     	; 0x3bc <lcd_putc>
 404:	89 91       	ld	r24, Y+
 406:	88 23       	and	r24, r24
 408:	e1 f7       	brne	.-8      	; 0x402 <lcd_puts+0x8>
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <lcd_home>:
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	cc df       	rcall	.-104    	; 0x3ac <lcd_command>
 414:	08 95       	ret

00000416 <lcd_clrscr>:
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	c9 df       	rcall	.-110    	; 0x3ac <lcd_command>
 41a:	08 95       	ret

0000041c <lcd_gotoxy>:
 41c:	66 23       	and	r22, r22
 41e:	11 f4       	brne	.+4      	; 0x424 <lcd_gotoxy+0x8>
 420:	80 58       	subi	r24, 0x80	; 128
 422:	01 c0       	rjmp	.+2      	; 0x426 <lcd_gotoxy+0xa>
 424:	80 54       	subi	r24, 0x40	; 64
 426:	c2 df       	rcall	.-124    	; 0x3ac <lcd_command>
 428:	08 95       	ret

0000042a <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 432:	84 b3       	in	r24, 0x14	; 20
 434:	8f 60       	ori	r24, 0x0F	; 15
 436:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 438:	89 9a       	sbi	0x11, 1	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 43a:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 43c:	88 9a       	sbi	0x11, 0	; 17
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	9e e3       	ldi	r25, 0x3E	; 62
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <lcd_init+0x18>
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 446:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 448:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
 44a:	60 df       	rcall	.-320    	; 0x30c <toggle_e>
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	93 e1       	ldi	r25, 0x13	; 19
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_init+0x26>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 454:	5b df       	rcall	.-330    	; 0x30c <toggle_e>
 456:	00 e4       	ldi	r16, 0x40	; 64
 458:	10 e0       	ldi	r17, 0x00	; 0
 45a:	c8 01       	movw	r24, r16
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0x32>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 460:	55 df       	rcall	.-342    	; 0x30c <toggle_e>
 462:	c8 01       	movw	r24, r16
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__stack+0x5>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 468:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
 46a:	50 df       	rcall	.-352    	; 0x30c <toggle_e>
 46c:	c8 01       	movw	r24, r16
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__stack+0xf>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 472:	88 e2       	ldi	r24, 0x28	; 40
 474:	9b df       	rcall	.-202    	; 0x3ac <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	99 df       	rcall	.-206    	; 0x3ac <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 47a:	cd df       	rcall	.-102    	; 0x416 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	96 df       	rcall	.-212    	; 0x3ac <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 480:	8f 2d       	mov	r24, r15
 482:	94 df       	rcall	.-216    	; 0x3ac <lcd_command>
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	08 95       	ret

0000048c <itoa>:
 48c:	e6 2f       	mov	r30, r22
 48e:	f7 2f       	mov	r31, r23
 490:	2e 2f       	mov	r18, r30
 492:	3f 2f       	mov	r19, r31
 494:	e8 94       	clt
 496:	42 30       	cpi	r20, 0x02	; 2
 498:	c4 f0       	brlt	.+48     	; 0x4ca <terminate>
 49a:	45 32       	cpi	r20, 0x25	; 37
 49c:	b4 f4       	brge	.+44     	; 0x4ca <terminate>
 49e:	4a 30       	cpi	r20, 0x0A	; 10
 4a0:	29 f4       	brne	.+10     	; 0x4ac <divide_loop>
 4a2:	97 fb       	bst	r25, 7
 4a4:	1e f4       	brtc	.+6      	; 0x4ac <divide_loop>
 4a6:	90 95       	com	r25
 4a8:	81 95       	neg	r24
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255

000004ac <divide_loop>:
 4ac:	64 2f       	mov	r22, r20
 4ae:	77 27       	eor	r23, r23
 4b0:	09 d1       	rcall	.+530    	; 0x6c4 <__udivmodhi4>
 4b2:	80 5d       	subi	r24, 0xD0	; 208
 4b4:	8a 33       	cpi	r24, 0x3A	; 58
 4b6:	0c f0       	brlt	.+2      	; 0x4ba <L_10>
 4b8:	89 5d       	subi	r24, 0xD9	; 217

000004ba <L_10>:
 4ba:	81 93       	st	Z+, r24
 4bc:	86 2f       	mov	r24, r22
 4be:	97 2f       	mov	r25, r23
 4c0:	00 97       	sbiw	r24, 0x00	; 0
 4c2:	a1 f7       	brne	.-24     	; 0x4ac <divide_loop>
 4c4:	16 f4       	brtc	.+4      	; 0x4ca <terminate>
 4c6:	5d e2       	ldi	r21, 0x2D	; 45
 4c8:	51 93       	st	Z+, r21

000004ca <terminate>:
 4ca:	93 2f       	mov	r25, r19
 4cc:	82 2f       	mov	r24, r18
 4ce:	10 82       	st	Z, r1
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <strrev>

000004d2 <strrev>:
 4d2:	dc 01       	movw	r26, r24
 4d4:	fc 01       	movw	r30, r24

000004d6 <.strrev_eos>:
 4d6:	01 90       	ld	r0, Z+
 4d8:	00 20       	and	r0, r0
 4da:	e9 f7       	brne	.-6      	; 0x4d6 <.strrev_eos>
 4dc:	32 97       	sbiw	r30, 0x02	; 2

000004de <.strrev_loop>:
 4de:	ae 17       	cp	r26, r30
 4e0:	bf 07       	cpc	r27, r31
 4e2:	30 f4       	brcc	.+12     	; 0x4f0 <.strrev_done>
 4e4:	7c 91       	ld	r23, X
 4e6:	60 81       	ld	r22, Z
 4e8:	70 83       	st	Z, r23
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	6d 93       	st	X+, r22
 4ee:	f7 cf       	rjmp	.-18     	; 0x4de <.strrev_loop>

000004f0 <.strrev_done>:
 4f0:	08 95       	ret

000004f2 <__fp_inverse>:
 4f2:	59 2f       	mov	r21, r25
 4f4:	48 2f       	mov	r20, r24
 4f6:	37 2f       	mov	r19, r23
 4f8:	26 2f       	mov	r18, r22
 4fa:	9f e3       	ldi	r25, 0x3F	; 63
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	77 27       	eor	r23, r23
 500:	66 27       	eor	r22, r22

00000502 <__divsf3>:
 502:	ae d0       	rcall	.+348    	; 0x660 <__fp_split3>
 504:	01 d0       	rcall	.+2      	; 0x508 <__divsf3x>
 506:	91 c0       	rjmp	.+290    	; 0x62a <__fp_merge>

00000508 <__divsf3x>:
 508:	55 23       	and	r21, r21
 50a:	59 f0       	breq	.+22     	; 0x522 <___divsf3x_INF>
 50c:	99 23       	and	r25, r25
 50e:	69 f0       	breq	.+26     	; 0x52a <___divsf3x_ZERO>

00000510 <___divsf3x_10>:
 510:	9f 57       	subi	r25, 0x7F	; 127
 512:	5f 57       	subi	r21, 0x7F	; 127
 514:	95 1b       	sub	r25, r21
 516:	33 f4       	brvc	.+12     	; 0x524 <___divsf3x_100>
 518:	42 f4       	brpl	.+16     	; 0x52a <___divsf3x_ZERO>
 51a:	90 38       	cpi	r25, 0x80	; 128
 51c:	11 f4       	brne	.+4      	; 0x522 <___divsf3x_INF>
 51e:	91 58       	subi	r25, 0x81	; 129
 520:	05 c0       	rjmp	.+10     	; 0x52c <___divsf3x_110>

00000522 <___divsf3x_INF>:
 522:	9b c0       	rjmp	.+310    	; 0x65a <__fp_nan>

00000524 <___divsf3x_100>:
 524:	91 58       	subi	r25, 0x81	; 129
 526:	9f 3f       	cpi	r25, 0xFF	; 255
 528:	09 f4       	brne	.+2      	; 0x52c <___divsf3x_110>

0000052a <___divsf3x_ZERO>:
 52a:	b7 c0       	rjmp	.+366    	; 0x69a <__fp_zerox>

0000052c <___divsf3x_110>:
 52c:	bb 27       	eor	r27, r27
 52e:	11 24       	eor	r1, r1
 530:	62 17       	cp	r22, r18
 532:	73 07       	cpc	r23, r19
 534:	84 07       	cpc	r24, r20
 536:	30 f4       	brcc	.+12     	; 0x544 <___divsf3x_140>
 538:	66 0f       	add	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	bb 1f       	adc	r27, r27
 540:	91 50       	subi	r25, 0x01	; 1
 542:	98 f3       	brcs	.-26     	; 0x52a <___divsf3x_ZERO>

00000544 <___divsf3x_140>:
 544:	11 d0       	rcall	.+34     	; 0x568 <___divsf3x_loop200>
 546:	0f 92       	push	r0
 548:	0f d0       	rcall	.+30     	; 0x568 <___divsf3x_loop200>
 54a:	0f 92       	push	r0
 54c:	0d d0       	rcall	.+26     	; 0x568 <___divsf3x_loop200>

0000054e <___divsf3x_300>:
 54e:	a0 e8       	ldi	r26, 0x80	; 128
 550:	26 17       	cp	r18, r22
 552:	37 07       	cpc	r19, r23
 554:	48 07       	cpc	r20, r24
 556:	1b 06       	cpc	r1, r27
 558:	09 f0       	breq	.+2      	; 0x55c <___divsf3x_310>
 55a:	a0 48       	sbci	r26, 0x80	; 128

0000055c <___divsf3x_310>:
 55c:	ba 2f       	mov	r27, r26
 55e:	60 2d       	mov	r22, r0
 560:	7f 91       	pop	r23
 562:	8f 91       	pop	r24
 564:	00 24       	eor	r0, r0
 566:	08 95       	ret

00000568 <___divsf3x_loop200>:
 568:	a0 e8       	ldi	r26, 0x80	; 128
 56a:	00 24       	eor	r0, r0

0000056c <___divsf3x_loop210>:
 56c:	62 17       	cp	r22, r18
 56e:	73 07       	cpc	r23, r19
 570:	84 07       	cpc	r24, r20
 572:	b1 05       	cpc	r27, r1
 574:	28 f0       	brcs	.+10     	; 0x580 <___divsf3x_loop211>
 576:	62 1b       	sub	r22, r18
 578:	73 0b       	sbc	r23, r19
 57a:	84 0b       	sbc	r24, r20
 57c:	b1 09       	sbc	r27, r1
 57e:	0a 2a       	or	r0, r26

00000580 <___divsf3x_loop211>:
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	bb 1f       	adc	r27, r27
 588:	a6 95       	lsr	r26
 58a:	81 f7       	brne	.-32     	; 0x56c <___divsf3x_loop210>
 58c:	08 95       	ret

0000058e <__fixsfsi>:
 58e:	97 fb       	bst	r25, 7
 590:	73 d0       	rcall	.+230    	; 0x678 <__fp_split1>
 592:	9f 37       	cpi	r25, 0x7F	; 127
 594:	38 f0       	brcs	.+14     	; 0x5a4 <___fixsfsi_zero>
 596:	fe e9       	ldi	r31, 0x9E	; 158
 598:	f9 1b       	sub	r31, r25
 59a:	98 2f       	mov	r25, r24
 59c:	87 2f       	mov	r24, r23
 59e:	76 2f       	mov	r23, r22
 5a0:	6b 2f       	mov	r22, r27
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <___fixsfsi_10>

000005a4 <___fixsfsi_zero>:
 5a4:	77 c0       	rjmp	.+238    	; 0x694 <__fp_zero>

000005a6 <___fixsfsi_05>:
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22

000005ae <___fixsfsi_10>:
 5ae:	f1 50       	subi	r31, 0x01	; 1
 5b0:	d0 f7       	brcc	.-12     	; 0x5a6 <___fixsfsi_05>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <no_neg>

000005b4 <__fp_lneg>:
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255

000005c2 <no_neg>:
 5c2:	08 95       	ret

000005c4 <__floatunssisf>:
 5c4:	e8 94       	clt
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <___floatsisf_10>

000005c8 <__floatsisf>:
 5c8:	97 fb       	bst	r25, 7
 5ca:	0e f4       	brtc	.+2      	; 0x5ce <___floatsisf_10>
 5cc:	f3 df       	rcall	.-26     	; 0x5b4 <__fp_lneg>

000005ce <___floatsisf_10>:
 5ce:	b6 2f       	mov	r27, r22
 5d0:	67 2f       	mov	r22, r23
 5d2:	78 2f       	mov	r23, r24
 5d4:	89 2f       	mov	r24, r25
 5d6:	9e e9       	ldi	r25, 0x9E	; 158
 5d8:	00 24       	eor	r0, r0
 5da:	27 c0       	rjmp	.+78     	; 0x62a <__fp_merge>

000005dc <__eqsf2>:
 5dc:	0e d0       	rcall	.+28     	; 0x5fa <.fp_cmp>
 5de:	5e f0       	brts	.+22     	; 0x5f6 <.fp_cmp_gt>
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <.fp_cmp_ret>

000005e2 <__gesf2>:
 5e2:	0b d0       	rcall	.+22     	; 0x5fa <.fp_cmp>
 5e4:	26 f0       	brts	.+8      	; 0x5ee <.fp_cmp_lt>
 5e6:	01 c0       	rjmp	.+2      	; 0x5ea <.fp_cmp_ret>

000005e8 <__cmpsf2>:
 5e8:	08 d0       	rcall	.+16     	; 0x5fa <.fp_cmp>

000005ea <.fp_cmp_ret>:
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <.fp_cmp_eq>
 5ec:	20 f4       	brcc	.+8      	; 0x5f6 <.fp_cmp_gt>

000005ee <.fp_cmp_lt>:
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <.fp_cmp_eq>:
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <.fp_cmp_gt>:
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	08 95       	ret

000005fa <.fp_cmp>:
 5fa:	97 fb       	bst	r25, 7
 5fc:	09 2e       	mov	r0, r25
 5fe:	05 26       	eor	r0, r21
 600:	00 f8       	bld	r0, 0
 602:	68 94       	set
 604:	30 d0       	rcall	.+96     	; 0x666 <__fp_split2>
 606:	e8 94       	clt
 608:	07 fc       	sbrc	r0, 7
 60a:	07 c0       	rjmp	.+14     	; 0x61a <.fp_cmp_10>
 60c:	62 17       	cp	r22, r18
 60e:	73 07       	cpc	r23, r19
 610:	84 07       	cpc	r24, r20
 612:	95 07       	cpc	r25, r21
 614:	21 f0       	breq	.+8      	; 0x61e <.fp_cmp_20>
 616:	08 f4       	brcc	.+2      	; 0x61a <.fp_cmp_10>
 618:	00 94       	com	r0

0000061a <.fp_cmp_10>:
 61a:	07 94       	ror	r0
 61c:	98 94       	clz

0000061e <.fp_cmp_20>:
 61e:	08 95       	ret

00000620 <fp_merge_10>:
 620:	9a 95       	dec	r25
 622:	bb 0f       	add	r27, r27
 624:	66 1f       	adc	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24

0000062a <__fp_merge>:
 62a:	11 24       	eor	r1, r1
 62c:	99 23       	and	r25, r25
 62e:	a1 f0       	breq	.+40     	; 0x658 <fp_merge300>
 630:	88 23       	and	r24, r24
 632:	b2 f7       	brpl	.-20     	; 0x620 <fp_merge_10>
 634:	9f 3f       	cpi	r25, 0xFF	; 255
 636:	59 f0       	breq	.+22     	; 0x64e <fp_merge200>
 638:	bb 0f       	add	r27, r27
 63a:	48 f4       	brcc	.+18     	; 0x64e <fp_merge200>
 63c:	21 f4       	brne	.+8      	; 0x646 <fp_merge100>
 63e:	00 20       	and	r0, r0
 640:	11 f4       	brne	.+4      	; 0x646 <fp_merge100>
 642:	60 ff       	sbrs	r22, 0
 644:	04 c0       	rjmp	.+8      	; 0x64e <fp_merge200>

00000646 <fp_merge100>:
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255

0000064e <fp_merge200>:
 64e:	88 1f       	adc	r24, r24
 650:	97 95       	ror	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <fp_merge300>:
 658:	1d c0       	rjmp	.+58     	; 0x694 <__fp_zero>

0000065a <__fp_nan>:
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	08 95       	ret

00000660 <__fp_split3>:
 660:	05 2e       	mov	r0, r21
 662:	09 26       	eor	r0, r25
 664:	07 fa       	bst	r0, 7

00000666 <__fp_split2>:
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	79 f0       	breq	.+30     	; 0x68c <fp_split_nan>
 66e:	aa 27       	eor	r26, r26
 670:	a5 17       	cp	r26, r21
 672:	08 f0       	brcs	.+2      	; 0x676 <__fp_split2+0x10>
 674:	51 e0       	ldi	r21, 0x01	; 1
 676:	47 95       	ror	r20

00000678 <__fp_split1>:
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	9f 3f       	cpi	r25, 0xFF	; 255
 67e:	31 f0       	breq	.+12     	; 0x68c <fp_split_nan>
 680:	bb 27       	eor	r27, r27
 682:	b9 17       	cp	r27, r25
 684:	08 f0       	brcs	.+2      	; 0x688 <__fp_split1+0x10>
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	87 95       	ror	r24
 68a:	08 95       	ret

0000068c <fp_split_nan>:
 68c:	9f 91       	pop	r25
 68e:	9f 91       	pop	r25
 690:	11 24       	eor	r1, r1
 692:	e3 cf       	rjmp	.-58     	; 0x65a <__fp_nan>

00000694 <__fp_zero>:
 694:	66 27       	eor	r22, r22
 696:	77 27       	eor	r23, r23
 698:	88 27       	eor	r24, r24

0000069a <__fp_zerox>:
 69a:	99 27       	eor	r25, r25
 69c:	08 95       	ret

0000069e <__divmodhi4>:
 69e:	97 fb       	bst	r25, 7
 6a0:	09 2e       	mov	r0, r25
 6a2:	07 26       	eor	r0, r23
 6a4:	0a d0       	rcall	.+20     	; 0x6ba <__divmodhi4_neg1>
 6a6:	77 fd       	sbrc	r23, 7
 6a8:	04 d0       	rcall	.+8      	; 0x6b2 <__divmodhi4_neg2>
 6aa:	0c d0       	rcall	.+24     	; 0x6c4 <__udivmodhi4>
 6ac:	06 d0       	rcall	.+12     	; 0x6ba <__divmodhi4_neg1>
 6ae:	00 20       	and	r0, r0
 6b0:	1a f4       	brpl	.+6      	; 0x6b8 <__divmodhi4_exit>

000006b2 <__divmodhi4_neg2>:
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255

000006b8 <__divmodhi4_exit>:
 6b8:	08 95       	ret

000006ba <__divmodhi4_neg1>:
 6ba:	f6 f7       	brtc	.-4      	; 0x6b8 <__divmodhi4_exit>
 6bc:	90 95       	com	r25
 6be:	81 95       	neg	r24
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__udivmodhi4>:
 6c4:	aa 1b       	sub	r26, r26
 6c6:	bb 1b       	sub	r27, r27
 6c8:	51 e1       	ldi	r21, 0x11	; 17
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__udivmodhi4_ep>

000006cc <__udivmodhi4_loop>:
 6cc:	aa 1f       	adc	r26, r26
 6ce:	bb 1f       	adc	r27, r27
 6d0:	a6 17       	cp	r26, r22
 6d2:	b7 07       	cpc	r27, r23
 6d4:	10 f0       	brcs	.+4      	; 0x6da <__udivmodhi4_ep>
 6d6:	a6 1b       	sub	r26, r22
 6d8:	b7 0b       	sbc	r27, r23

000006da <__udivmodhi4_ep>:
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	5a 95       	dec	r21
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__udivmodhi4_loop>
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	bc 01       	movw	r22, r24
 6e8:	cd 01       	movw	r24, r26
 6ea:	08 95       	ret
