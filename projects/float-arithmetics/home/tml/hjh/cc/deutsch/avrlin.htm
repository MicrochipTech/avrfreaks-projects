<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title></title>
</head>
<body>
<a href="themen.htm">Themen</a> / <a href="00idx.htm">Inhaltsliste</a>
/ <a href="../english/avrlin.htm">Englisch</a><br>
<h2>ATMEL programmieren mit Linux</h2>
<h3><a name="content"></a> Content (automatic) </h3>
<ul>
  <li><a href="#content">#content</a> : Content (automatic) </li>
  <li><a href="#content">#content</a> : Installation </li>
  <li><a href="#content">#content</a> : &Uuml;bersetzen </li>
  <li><a href="#debug">#debug</a> : Debug/ Simulation </li>
  <li><a href="#gdb">#gdb</a> : Sitzung mit gdb </li>
  <li><a href="#gdb">#gdb</a> : Debugging </li>
  <li><a href="#gdb">#gdb</a> : Siehe auch </li>
  <li><a href="#gdb">#gdb</a> : www </li>
</ul>
<h3>Installation</h3>
avl-gcc ist im Paket Elektronik - avrprog enthalten.<br>
Die Installation erfolgt durch Synaptic oder aptitude , siehe <a
 href="../../linux/debian3.1/einricht.htm">../../linux/debian3.1/einricht.htm</a><br>
Installiere die Pakete<br>
<ul>
  <li>gcc-avr - Der Compiler<br>
  </li>
  <li>avr-libc - Libraries zum Binden<br>
  </li>
  <li>gdb-avr - Der Debugger<br>
  </li>
  <li>simulavr</li>
  <li>devhelp-book-gdb - bring u.a. <a
 href="file:///usr/share/devhelp/books/gdb-5.0/gdb_toc.html">file:///usr/share/devhelp/books/gdb-5.0/gdb_toc.html</a><br>
  </li>
</ul>
<br>
Nach der Installation:<br>
<code>/usr/bin : cd /usr/bin ; ls avr*</code> : Da sind die Kompiler
und
Hilfsprogramme<br>
<br>
In den Include-Pfad aufnehmen: $(HOME)/home/cc/avrinc<br>
<h3>&Uuml;bersetzen</h3>
cd home/cc/ts/avr/tsadc<br>
make<br>
<br>
Der verwendete <span style="font-style: italic;">makefile</span> ist
der gleiche, der auch f&uuml;r avrstudio und gcc-avr unter Windows
benutzt wird. <br>
<br>
Es entstehen dadurch alle .o-Dateien und tsadc.hex<br>
<h3><span style="font-style: italic;"><a name="debug"></a></span>Debug
/ Simulation</h3>
Danach Simulieren mit J&uuml;rgen Herberts simatmel:<br>
simatmel tsadc.hex<br>
<br>
oder<br>
simulavr&nbsp; -d atmega16 tsadc.hex<br>
<br>
Es gibt drei simulavr-Programme<br>
<ul>
  <li><span style="font-weight: bold;">simulavr</span> : f&uuml;hrt das
Programm aus. Aufrufen durch<br>
    <code> simulavr -d atmega16 --gdbserver</code><br>
Dann noch in einem anderen Fenster aufrufen:<br>
simulavr-disp 512 1024 60 8192<br>
Dann noch in einem anderen Fenster aufrufen:<br>
    <br>
gdb tsadc.elf<br>
    <br>
  </li>
  <li><span style="font-weight: bold;">simulavr-disp</span> : <br>
  </li>
  <li><span style="font-weight: bold;">simulavr-vcd</span> : <br>
  </li>
</ul>
<br>
<h3><a name="gdb"></a>Sitzung mit gdb</h3>
<code><br>
avr-gdb tsadc.elf<br>
disas[semble] main<br>
li[st] main<br>
break 36<br>
b 38<br>
x 0x70<br>
<br>
</code><br>
avr-gdbtui tsadc.elf<br>
b36<br>
b38<br>
<br>
Dann konnen folgende gdb-Befehle eingegeben werden: (Teile in eckigen
Klammern k&ouml;nnen durch TAB abgek&uuml;rzt werden.)<br>
<br>
at[tach] <br>
disp[play]&nbsp; <br>
avrp sollte dann die HEX-Datei brennen k&ouml;nnen, m&ouml;glicherweise
nur mit seriellem Programmer?<br>
<h3> Debugging </h3>
Starten:
<p><code>simulavr -g -p 1212 -d atmega8535 -P simulavr-disp</code>
</p>
In anderem Fenster<br>
<p>gdb qqtshar.elf<br>
target remote localhost:1212<br>
b 38<br>
cont[inue]<br>
</p>
quit<br>
<br>
cd ../qqtsfloa<br>
gdb qqtsfloa.elf<br>
target remote localhost:1212<br>
list main<br>
<br>
<br>
<h3>Siehe auch</h3>
<ul>
  <li><a href="winavr.htm">winavr.htm</a> - &Uuml;bersetzen mitdem
AVR Studio</li>
  <li><a href="../../atmel/ponyprog.htm">../../atmel/ponyprog.htm</a> -
Brennen mit Ponyprog<br>
  </li>
  <li><a href="avr/00idx.htm"> - Mehr Info &uuml;ber AVR </a></li>
  <li><a href="../../atmel/avr/compile.htm#gdb">../../atmel/avr/compile.htm#gdb</a>
  </li>
</ul>
<h3>www</h3>
<a href="http://www.nongnu.org/simulavr/">http://www.nongnu.org/simulavr/</a>
- <br>
<a href="http://www.unesols.com/links_pages/avr_links.htm">http://www.unesols.com/links_pages/avr_links.htm</a>
- Sammlung<br>
<br>
<font size="-1">marekm@amelek.gda.pl - a maintainer</font><br>
</body>
</html>
