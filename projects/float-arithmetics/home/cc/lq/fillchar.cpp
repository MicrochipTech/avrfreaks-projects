#include <heport.h>
#include <helq.h>


#ifndef DOSGNU
// must be compiled with DOSGHNU only
#endif

// this maps are used for programs which run under MSDOS, but
// want to work with ANSI codes instead with Codepage 437 Codes

bool chartablefilled = false ;
uint8_t charintable[256] = {			// convert DOS to ANSI
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,
65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,
97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,
113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,
129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,
161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,
177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,
193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,
225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,
241,242,243,244,245,246,247,248,249,250,251,252,253,254,255 } ;


uint8_t charouttable[256] =			// converts ANSI to DOS
{ 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,
65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,
97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,
113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,
129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,
161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,
177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,
193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,
209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,
225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,
241,242,243,244,245,246,247,248,249,250,251,252,253,254,255 } ;

// I use here : aguille as line over letter, from upper left corner
//				grave as line over letter, from lower left corner
//				umlaut as two dots over letter
//				rond as small o over letter
//				circonfles as small roof over letter
uint8_t charmapbasis[] = {
// DOS(CP850) - ANSII
		0x80 , 199, // 128 Character Ccedille
		0x81 , 252, // 129 uumlaut
		0x82 , 233, // 130 egrave
		0x83 , 226, // 131 acirconflex
		0x84 , 228, // 132 aumlaut
		0x85 , 224, // 133 aaguille
		0x86 , 229, // 134 arond
		0x87 , 231, // 135 ccedille
		0x88 , 234, // 136 ecironflex
		0x89 , 235, // 137 eumlaut
		0x8A , 232, // 138 eaguille
		0x8B , 239, // 139 iumlaut
		0x8C , 238, // 140 icirconflex
		0x8D , 236, // 141 iaguille
		0x8E , 196, // 142 Aumlaut
		0x8F , 197, // 143 Arond
		0x90 , 201, // 144 Egrave
		0x91 , 230, // 145 aelig
		0x92 , 198, // 146 AEligatur
		0x93 , 244, // 147 ocirconflex
		0x94 , 246, // 148 öumlaut
		0x95 , 242, // 149 oaguille
		0x96 , 251, // 150 ucirconflex
		0x97 , 249, // 151 uaguille
		0x98 , 255, // 152 yumlaut
		0x99 , 214, // 153 Oumlaut
		0x9A , 220, // 154 Uumlaut
		0x9B , 248, // 155 ostrich, o/lig, zero
		0x9C , 163, // 156 Pound
		0x9D , 216, // 157 O/lig, Ostrich
		0x9E , 215, // 158 x
//		0x9F ,		// 159 f  as function
		0xA0 , 225, // 160 agrave
		0xA1 , 237, // 161 igrave
		0xA2 , 243, // 162 ograve
		0xA3 , 250, // 163 ugrave
		0xA4 , 241, // 164 n~ enje
		0xA5 , 209, // 165 N~ ENJE
		0xA6 , 170, // 166 a over a line _
		0xA7 , 186, // 167 o over a line _
		0xA8 , 191, // 168 ? verkehrt
// DOS CODE UNCHECKED, UNFERTIG
//		0xA9 ,		// 169
//		0xAA ,		// 170
//		0xAB ,		// 171
//		0xAC ,		// 172
//		0xAD ,		// 173
//		0xAE ,		// 174
//		0xAF ,		// 175
//		0xB0 ,		// 176
//		0xB1 ,		// 177
//		0xB2 ,		// 178
//		0xB3 ,		// 179
//		0xB4 ,		// 180
//		0xB5 ,		// 181
//		0xB6 ,		// 182
//		0xB7 ,		// 183
//		0xB8 ,		// 184
//		0xB9 ,		// 185
//		0xBA ,		// 186
//		0xBB ,		// 187
//		0xBC ,		// 188
//		0xBD ,		// 189
//		0xBE ,		// 190
//		0xBF ,		// 191
//		0xC0 ,		// 192
		0xC1 , 223, // 193 -- -
//		0xC2 ,		// 194
//		0xC3 ,		// 195
//		0xC4 ,		// 196
//		0xC5 ,		// 197
//		0xC6 ,		// 198
//		0xC7 ,		// 199
//		0xC8 ,		// 200
//		0xC9 ,		// 201
//		0xCA ,		// 202
//		0xCB ,		// 203
//		0xCC ,		// 204
//		0xCD ,		// 205
//		0xCE ,		// 206
//		0xCF ,		// 207
//		0xD0 ,		// 208
//		0xD1 ,		// 209
//		0xD2 ,		// 210
//		0xD3 ,		// 211
//		0xD4 ,		// 212
//		0xD5 ,		// 213
//		0xD6 ,		// 214
//		0xD7 ,		// 215
//		0xD8 ,		// 216
//		0xD9 ,		// 217
//		0xDA ,		// 218
//		0xDB ,		// 219
//		0xDC ,		// 220
//		0xDD ,		// 221
//		0xDE ,		// 222
		0xE1 , 223, // 223 szlig sharp german s
//		0xE0 ,		// 224
//		0xE1 ,		// 225
//		0xE2 ,		// 226
//		0xE3 ,		// 227
//		0xE4 ,		// 228
//		0xE5 ,		// 229
//		0xE6 ,		// 230
//		0xE7 ,		// 231
//		0xE8 ,		// 232
//		0xE9 ,		// 233
//		0xEA ,		// 234
//		0xEB ,		// 235
//		0xEC ,		// 236
//		0xED ,		// 237
//		0xEE ,		// 238
//		0xEF ,		// 239
//		0xF0 ,		// 240
//		0xF1 ,		// 241
//		0xF2 ,		// 242
//		0xF3 ,		// 243
//		0xF4 ,		// 244
//		0xF5 ,		// 245
//		0xF6 ,		// 246
//		0xF7 ,		// 247
//		0xF8 ,		// 248
//		0xF9 ,		// 249
//		0xFA ,		// 250
//		0xFB ,		// 251
//		0xFC ,		// 252 small 3
//		0xFD ,		// 253 small high 2, square
//		0xFE ,		// 254
//		0xFF		// 255
		0,0				// end
} ;


void fillchartable()
{
int i ;
for ( i = 0 ; i < 256 ; ++i )
	{
	charintable[ i ] = i ;
	charouttable[ i ] = i ;
	}
for ( i = 0 ; charmapbasis[i] ; i+= 2 )
	{
	charintable[ charmapbasis[i] ] = charmapbasis[i+1] ;
	charouttable[ charmapbasis[i+1] ] = charmapbasis[i] ;
	}

chartablefilled = true ;
}
