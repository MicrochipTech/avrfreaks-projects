*************************************
Proj_1G: Basic display with intensity control.     A third simple pattern generator.

It introduces:
1.      The project subroutines:      initialise_display() and Inc_Display().	The purpose of these is to clarify the program operation. One initialises the LED display	and the other increments it. No exchange of data takes place.
Note that memory locations required by both the main routine and a subroutine are declared outside the main routine.

2.      The USART, the receiver/transmitter unit that enables the Atmega 328 to communicate with a PC.	The USART ISR, the response to keyboard activity provided the USART has been configured to generate an interrupt.

3.      Pointers:	A subroutine is usually allocated some memory space that is only visible to it.	Sometimes it is convenient for a subroutine to use memory space allocated to the routine that calls it.	Where this is the case the '&' symbol is used to signify that the calling routine is providing the memory.	The address of the memory location is passed to the subroutine rather than the contents.	The '*' symbol signifies that the subroutine is using memory supplied by the calling routine.  

4.      Subroutine I2C_Tx().	This uses the I2C bus to communicate with the PCB_A Atmega 328. This subroutine is not normally accessed directly by user projects.
Several program segments are used:	"waiting_for_I2C_master" and "send_byte_with_Ack(num_bytes)".	These crop up quite frequently and have therefore been defined to clarify program operation.

5.      Volatile variables
All variables used in the main() routine have permanent storage space in program memory.	Variables only used by the subroutines share a block of memory.	Every time a subroutine is called it has to initialise its variables.	This is not always convenient.		For example: two or more subroutines way need to share a variable.	Memory space allocated to this variable cannot be re-initialised every time the subroutine is called.	Memory space must therefore be permanently allocated to it.	The volatile key word is used to ensure this happens.

There is another situation in which the volatile key word is required:	A variable may be changed by in input from the hardware.  For example a timer interrupt.	This cannot be anticipated by the compiler.	Even though the variable is defined in the main() routine the volatile key word is still required.
This can be a bit subtle: sometimes it is worth using the volatile keyword to start with and then trying to remove it. 

Another tip:	Click on Tools/Options/Environment/Fonts and Colors/VA Brace matching and select a realy bright color.	This helps to clarify program flow.	Make sure that VA Brace Error uses a different color.


Operation	Press keys 1, 2, 3, or 4 to adjust the display intensity.