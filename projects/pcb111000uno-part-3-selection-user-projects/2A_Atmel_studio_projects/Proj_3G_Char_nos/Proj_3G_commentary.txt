*****************************************
//Proj_3G:  Demonstrates positive and negative binary numbers

A little program designed to illustrate how positive and negative 8 bit binary numbers work.	Note the most right hand bit is known as bit 0.  The most left hand bit is known as bit 7. 

8 bits can hold 2^8 (=256) different numbers.	The unsigned numbers 0 to 255	or the signed numbers -128, -127. . .0, 1. . . 127

Reset the program for a demonstration of unsigned numbers and press the middle switch to increment the numbers.	Notice how the binary pattern builds up as the numbers increase:		1 is 1           2 is 10            4 is 100            8 is 1000            16 is 1 0000            32 is 10 0000	64 is 100 0000          96 is 110 0000          112 is 111 0000         128 is 1000 0000          255 is 1111 1111

Release sw2 and press sw3 for a demonstration of signed numbers.  Note that -1 is 1111 1111
Press sw1 to decrement the number and notice that		-2 is 1111 1110         -4 is 1111 1100         -8 is 1111 1000         -16 is 1111 0000        -32 is 1110 0000	-64 is 1100 0000       -96 is 1010 0000       -112 is  1001 0000         -128 is 1000 0000

Pulse sw1 and notice that 127 equals 0111 1111 follows -128.	Hold sw1 down and the numbers steadily decrement to zero.

Therefore as the binary number increases from 0 to 0111 1111 the decimal number increases from 0 to 127.	Increasing the binary number by 1 switches the decimal number to -128.	Steadily increasing the binary number to 1111 1111 results in a steady increase on the decimal number to -1. 

For signed 8 bit numbers bit 7 is known as the sign bit.	The signed bit is zero for positive numbers and 1 for negative numbers.

Consider the number -32 it is 1110 0000	which equals 1000 0000 plus 0110 0000 	which equals -128 + 96 = -32.
Consider the number -112 it is 1001 0000	which equals 1000 0000 plus 0001 0000	which equals -128 + 16 = -112.

Therefore decode a signed 8 bit number in two stages:	treat the first 7 bits as a positive number.	If bit 7 is zero this is the answer and if bit 7 is 1 subtract 128.

Obtaining a negative number:	Consider 96: it is 0110 0000 in binary. Invert all the bits and add 1 to get 1001 1111 + 1 = 1010 0000 = -96


Display any negative number:
Toggle sw 3 and if the negative sign is ignored notice that the numbers always add up to 256