Serial Data Analyzer for EVK1100 evaluation board

Processor:
UC3A0512-0ES

Development tools:
AVR32 GNU toolchain v. 2.0.3
UC3A Software Framework v. 1.2.0ES
MSYS shell for Windows


This application was designed for recording and analysis of lower frequency bitstreams typically generated by IR-remote controls and simple
wireless devices. The bitstream is captured at an input pin, PB25, controlling a timer/capture module in the UC3.

The time between each level change of the input pin, "pulse length", is measured and stored into an array. The recording of the bitstream stops when
no level change occurs within 0.17 seconds. This is the maximum time, or pulse length possible to capture in this application, corresponing to
the 16bit counter value 65536. Minimum pulse length in theory is 2.7uS, equal to the counter value 1, but in order for the process in the program
to work properly, the shortest pulse should be about ten times this value. Of course this range can be changed by programming the timer prescaler.

When the recording reach the 0.17s timeout, the program continues in a processing stage. The pulse array is sorted, then the pulses are compared
to eachother to find the pulses that have approximately the same length. The result is stored into a smaller "pulse type" array, and pointers to
these entries are added to the original pulse array.

After this process, the bitstream "pulses" are converted to ASCII characters ranging from '0' to 'F' (hex), corresponding to max 16 different
pulse types. The ASCII string is printed on the screen (using RS232 terminal), together with an user interface where you can manually add
decode parameters and display the results. The program also display the average length of the "pulse types" in seconds.

When the manual decoding parameters seems to work for a device, the program can be set into a loop mode (no user interface), 
decoding data from the bitstream source automatically.


Examples of devices to analyse with this application:

* IR-remote controls, using a IR-demodulator.
* Wireless termometer, using the RF-receiver/demodulator.
* Wireless weather station sensors.
* Wireless switches.
* Computer keyboards.
* Serial communication, RS232 etc

Instead of using a demodulator for wireless devices, the bitstream can be picked up directly from the transmitter if a data-pin is available in it.


Setup:
The only hardware requirements are the EVK1100 board, a PC terminal at 57600 baud 8N1 and a demodulator or other bitstream source at the PB25 pin. 


User interface:
After EVK1100 reset, the program waits for a bitstream at the input pin. When timeout (no more pulses), the pulse string, pulse lengths and user
interface are displayed. The UI commands are as follows:

0..F - select a pulse type
L - replace selected pulse type with a line feed (splitting typically repeated code words)
T - replace selected pulse type by a tabulator
V - replace selected pulse type by a vertical tab
S - replace selected pulse type by a space

Z - enter a pulse type pattern correspinding to a binary zero
O - enter a pulse type pattern correspinding to a binary one

M - cycle trough biphase modulation types 
G - add a user defined separator (comma)
+ - move the separator right
- - move the separator left

U - Undo latest change
C - Clear all changes

P - Display a list of all the pulses, both original and sorted order.

R - Record a new bitstream
Q - leave user edit mode and decode bitstreams using the entered settings


Other information:
PWM timer output is configured, but not implemented in software. 
The program was developed as part of a student project at Vestfold Univerity College, Norway.  
If you have questions or suggestions regarding this software, email me at buen@operamail.com
