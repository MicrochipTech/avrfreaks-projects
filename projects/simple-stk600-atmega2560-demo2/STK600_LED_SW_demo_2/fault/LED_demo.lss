
LED_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  00000384  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800222  00800222  0000043a  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000029e  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000102  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000410  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000a6b1  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000173  00000000  00000000  0000bba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  0000bd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003417  00000000  00000000  0000bd6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_11>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_23>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 32       	cpi	r26, 0x2A	; 42
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
 122:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_23>:
	return 0;
}


ISR(TIMER0_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
      PORTC RESET LED_mask;  				// Turn on
 138:	98 b1       	in	r25, 0x08	; 8
 13a:	80 91 01 02 	lds	r24, 0x0201
 13e:	80 95       	com	r24
 140:	89 23       	and	r24, r25
 142:	88 b9       	out	0x08, r24	; 8

}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
      PORTC SET LED_mask;   				// Turn off
 160:	88 b1       	in	r24, 0x08	; 8
 162:	90 91 01 02 	lds	r25, 0x0201
 166:	89 2b       	or	r24, r25
 168:	88 b9       	out	0x08, r24	; 8
	  enable_update = TRUE;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 25 02 	sts	0x0225, r24
}
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_11>:

ISR(PCINT2_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
	switch_temp = ~PINK;
 18c:	80 91 06 01 	lds	r24, 0x0106
 190:	80 95       	com	r24
 192:	80 93 26 02 	sts	0x0226, r24
	if (switch_temp != 0x00){					// Skip if button release
 196:	80 91 26 02 	lds	r24, 0x0226
 19a:	88 23       	and	r24, r24
 19c:	49 f1       	breq	.+82     	; 0x1f0 <__vector_11+0x72>
		pulse_incr = 0x10;					// Maximum step = 16
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	80 93 00 02 	sts	0x0200, r24
		for (i=0x80;i > 0x00; i = i >> 1){
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	80 93 27 02 	sts	0x0227, r24
 1aa:	80 91 27 02 	lds	r24, 0x0227
 1ae:	88 23       	and	r24, r24
 1b0:	d9 f0       	breq	.+54     	; 0x1e8 <__vector_11+0x6a>
			if (switch_temp & i) break;
 1b2:	80 91 26 02 	lds	r24, 0x0226
 1b6:	90 91 27 02 	lds	r25, 0x0227
 1ba:	89 23       	and	r24, r25
 1bc:	39 f0       	breq	.+14     	; 0x1cc <__vector_11+0x4e>
 1be:	14 c0       	rjmp	.+40     	; 0x1e8 <__vector_11+0x6a>
 1c0:	80 91 26 02 	lds	r24, 0x0226
 1c4:	90 91 27 02 	lds	r25, 0x0227
 1c8:	89 23       	and	r24, r25
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_11+0x6a>
			pulse_incr -= 2;
 1cc:	80 91 00 02 	lds	r24, 0x0200
 1d0:	82 50       	subi	r24, 0x02	; 2
 1d2:	80 93 00 02 	sts	0x0200, r24
ISR(PCINT2_vect)
{
	switch_temp = ~PINK;
	if (switch_temp != 0x00){					// Skip if button release
		pulse_incr = 0x10;					// Maximum step = 16
		for (i=0x80;i > 0x00; i = i >> 1){
 1d6:	80 91 27 02 	lds	r24, 0x0227
 1da:	86 95       	lsr	r24
 1dc:	80 93 27 02 	sts	0x0227, r24
 1e0:	80 91 27 02 	lds	r24, 0x0227
 1e4:	81 11       	cpse	r24, r1
 1e6:	ec cf       	rjmp	.-40     	; 0x1c0 <__vector_11+0x42>
			if (switch_temp & i) break;
			pulse_incr -= 2;
		}
		brightness = INCREASING;
 1e8:	10 92 23 02 	sts	0x0223, r1
		slider_value = 0x00;				// Start new cycle with LED off
 1ec:	10 92 22 02 	sts	0x0222, r1
	}
}
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <timer0_init>:
void timer0_init(void)
{
// NOTE: Assumes DIV8 fuse set for 1 MHz operation
// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
// Variable Compare_A interrupt in between OVF to turn off the LED
	OCR0A = slider_value;
 1fe:	80 91 22 02 	lds	r24, 0x0222
 202:	87 bd       	out	0x27, r24	; 39
  	TCCR0A = (1 << WGM01) | (1 << WGM00); 	// Fast PWM Mode
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);		// Set prescaler to 64
 208:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);		// Compare A and OVF Interupt enabled 
 20a:	ee e6       	ldi	r30, 0x6E	; 110
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	83 60       	ori	r24, 0x03	; 3
 212:	80 83       	st	Z, r24
	TCNT0  = 0x00;
 214:	16 bc       	out	0x26, r1	; 38
 216:	08 95       	ret

00000218 <timer1_init>:
}

void timer1_init(void)
{
// Used for timing functions
	TCCR1A = 0x00;
 218:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS10);							// Normal operation, no clk prescaling
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 81 00 	sts	0x0081, r24
 222:	08 95       	ret

00000224 <LED_init>:
}

void LED_init(void)
{
	PORTC = 0xFF;							// All PORTC set (LED off)
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	88 b9       	out	0x08, r24	; 8
	DDRC = 0xFF;							// All PORTC output
 228:	87 b9       	out	0x07, r24	; 7
 22a:	08 95       	ret

0000022c <SW_init>:
}

void SW_init(void)
{
	PORTK = 0xFF;							// All PORTK set
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	80 93 08 01 	sts	0x0108, r24
	DDRK = 0x00;							// All PORTK input
 232:	10 92 07 01 	sts	0x0107, r1
	PCICR = 1 << PCIE2;						// Enable pin change interrupt 16..23
 236:	94 e0       	ldi	r25, 0x04	; 4
 238:	90 93 68 00 	sts	0x0068, r25
	PCMSK2 = 0xFF;							// Enable mask for PCINT
 23c:	80 93 6d 00 	sts	0x006D, r24
 240:	08 95       	ret

00000242 <power_init>:
}

void power_init(void)
{
	PRR0 = (1 << PRTWI) | (1 << PRTIM2) | (1 << PRSPI) | (1 << PRUSART0) | (1 << PRADC);		// Only Timer0 and Timer1 enabled
 242:	87 ec       	ldi	r24, 0xC7	; 199
 244:	80 93 64 00 	sts	0x0064, r24
	PRR1 = 0x3F;							// All disabled
 248:	8f e3       	ldi	r24, 0x3F	; 63
 24a:	80 93 65 00 	sts	0x0065, r24
	SMCR = (1 << SE);							// Enable Idle mode
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	83 bf       	out	0x33, r24	; 51
 252:	08 95       	ret

00000254 <log_scaled>:
}

uint8_t log_scaled(uint8_t slider)
{
 254:	e8 2f       	mov	r30, r24
	  128,131,134,138,141,145,150,154,
	  160,166,173,181,192,205,224,255};

	  scaled = slider / 4;				// first 128

	  if(slider >= 128){				// next 64
 256:	88 23       	and	r24, r24
 258:	1c f0       	brlt	.+6      	; 0x260 <log_scaled+0xc>
	   96, 98, 99,101,102,104,106,107,
	  109,111,113,115,118,120,123,125,
	  128,131,134,138,141,145,150,154,
	  160,166,173,181,192,205,224,255};

	  scaled = slider / 4;				// first 128
 25a:	86 95       	lsr	r24
 25c:	86 95       	lsr	r24
 25e:	02 c0       	rjmp	.+4      	; 0x264 <log_scaled+0x10>

	  if(slider >= 128){				// next 64
	  		scaled = (slider / 2) - 33;
 260:	86 95       	lsr	r24
 262:	81 52       	subi	r24, 0x21	; 33
	  }

	  if(slider >= 192){				// next 32
 264:	e0 3c       	cpi	r30, 0xC0	; 192
 266:	10 f0       	brcs	.+4      	; 0x26c <log_scaled+0x18>
	  		scaled = slider - 129;
 268:	8e 2f       	mov	r24, r30
 26a:	81 58       	subi	r24, 0x81	; 129
	  }

	  if(slider >=224){					// last 32
 26c:	e0 3e       	cpi	r30, 0xE0	; 224
 26e:	20 f0       	brcs	.+8      	; 0x278 <log_scaled+0x24>
	  		scaled = last32[slider - 224];
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ee 5d       	subi	r30, 0xDE	; 222
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	80 81       	ld	r24, Z
	  }

      return scaled;
}
 278:	08 95       	ret

0000027a <main>:
uint8_t log_scaled(uint8_t slider);

int main(void)
{

	timer0_init();
 27a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <timer0_init>
	timer1_init();
 27e:	0e 94 0c 01 	call	0x218	; 0x218 <timer1_init>

	LED_init();
 282:	0e 94 12 01 	call	0x224	; 0x224 <LED_init>
	SW_init();
 286:	0e 94 16 01 	call	0x22c	; 0x22c <SW_init>
	power_init();
 28a:	0e 94 21 01 	call	0x242	; 0x242 <power_init>

	sei();
 28e:	78 94       	sei
						if (LED_mask == 0x00) {LED_mask = 0x40; direction = RIGHT;}
					}
					else 							// direction = RIGHT
					{
						LED_mask = LED_mask >> 1;
						if (LED_mask == 0x00) {LED_mask = 0x02; direction = LEFT;}
 290:	68 94       	set
 292:	ff 24       	eor	r15, r15
 294:	f1 f8       	bld	r15, 1
				{
					brightness = INCREASING;
					if(direction == LEFT)
					{
						LED_mask = LED_mask << 1;
						if (LED_mask == 0x00) {LED_mask = 0x40; direction = RIGHT;}
 296:	00 e4       	ldi	r16, 0x40	; 64
 298:	11 e0       	ldi	r17, 0x01	; 1
		if(enable_update)
		{
			enable_update = FALSE;
			if(brightness == INCREASING)
			{
				if(slider_value < (256 - pulse_incr))				// pulse_incr can = 16 without overflow
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d1 e0       	ldi	r29, 0x01	; 1
	sei();

	while(1)
	{

		_SLEEP();
 29e:	88 95       	sleep

		if(enable_update)
 2a0:	80 91 25 02 	lds	r24, 0x0225
 2a4:	88 23       	and	r24, r24
 2a6:	d9 f3       	breq	.-10     	; 0x29e <main+0x24>
		{
			enable_update = FALSE;
 2a8:	10 92 25 02 	sts	0x0225, r1
			if(brightness == INCREASING)
 2ac:	80 91 23 02 	lds	r24, 0x0223
 2b0:	81 11       	cpse	r24, r1
 2b2:	26 c0       	rjmp	.+76     	; 0x300 <main+0x86>
			{
				if(slider_value < (256 - pulse_incr))				// pulse_incr can = 16 without overflow
 2b4:	20 91 22 02 	lds	r18, 0x0222
 2b8:	80 91 00 02 	lds	r24, 0x0200
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	ae 01       	movw	r20, r28
 2c0:	48 1b       	sub	r20, r24
 2c2:	51 09       	sbc	r21, r1
 2c4:	24 17       	cp	r18, r20
 2c6:	35 07       	cpc	r19, r21
 2c8:	c4 f4       	brge	.+48     	; 0x2fa <main+0x80>
				{
					enable_update = FALSE;
 2ca:	10 92 25 02 	sts	0x0225, r1
					slider_value += pulse_incr;
 2ce:	80 91 22 02 	lds	r24, 0x0222
 2d2:	90 91 00 02 	lds	r25, 0x0200
 2d6:	89 0f       	add	r24, r25
 2d8:	80 93 22 02 	sts	0x0222, r24
					//				slider_temp = (1 + slider_value + (slider_value * slider_value / 2)) >> 7;
					slider_temp = log_scaled(slider_value);
 2dc:	80 91 22 02 	lds	r24, 0x0222
 2e0:	0e 94 2a 01 	call	0x254	; 0x254 <log_scaled>
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 29 02 	sts	0x0229, r25
 2ea:	80 93 28 02 	sts	0x0228, r24
					OCR0A = slider_temp;
 2ee:	80 91 28 02 	lds	r24, 0x0228
 2f2:	90 91 29 02 	lds	r25, 0x0229
 2f6:	87 bd       	out	0x27, r24	; 39
 2f8:	d2 cf       	rjmp	.-92     	; 0x29e <main+0x24>
				}
				else								// slider_value >= 240
				{
					brightness = DECREASING;
 2fa:	10 93 23 02 	sts	0x0223, r17
 2fe:	cf cf       	rjmp	.-98     	; 0x29e <main+0x24>
				}
			}
			else
			{
				if(slider_value >= pulse_incr)
 300:	90 91 22 02 	lds	r25, 0x0222
 304:	80 91 00 02 	lds	r24, 0x0200
 308:	98 17       	cp	r25, r24
 30a:	c0 f0       	brcs	.+48     	; 0x33c <main+0xc2>
				{
					enable_update = FALSE;
 30c:	10 92 25 02 	sts	0x0225, r1
					slider_value -= pulse_incr;
 310:	80 91 22 02 	lds	r24, 0x0222
 314:	90 91 00 02 	lds	r25, 0x0200
 318:	89 1b       	sub	r24, r25
 31a:	80 93 22 02 	sts	0x0222, r24
					//				slider_temp = (1 + slider_value + (slider_value * slider_value / 2)) >> 7;
					slider_temp = log_scaled(slider_value);
 31e:	80 91 22 02 	lds	r24, 0x0222
 322:	0e 94 2a 01 	call	0x254	; 0x254 <log_scaled>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 29 02 	sts	0x0229, r25
 32c:	80 93 28 02 	sts	0x0228, r24
					OCR0A = slider_temp;
 330:	80 91 28 02 	lds	r24, 0x0228
 334:	90 91 29 02 	lds	r25, 0x0229
 338:	87 bd       	out	0x27, r24	; 39
 33a:	b1 cf       	rjmp	.-158    	; 0x29e <main+0x24>
				}
				else								// slider_value = 0
				{
					brightness = INCREASING;
 33c:	10 92 23 02 	sts	0x0223, r1
					if(direction == LEFT)
 340:	80 91 24 02 	lds	r24, 0x0224
 344:	81 11       	cpse	r24, r1
 346:	0e c0       	rjmp	.+28     	; 0x364 <main+0xea>
					{
						LED_mask = LED_mask << 1;
 348:	80 91 01 02 	lds	r24, 0x0201
 34c:	88 0f       	add	r24, r24
 34e:	80 93 01 02 	sts	0x0201, r24
						if (LED_mask == 0x00) {LED_mask = 0x40; direction = RIGHT;}
 352:	80 91 01 02 	lds	r24, 0x0201
 356:	81 11       	cpse	r24, r1
 358:	a2 cf       	rjmp	.-188    	; 0x29e <main+0x24>
 35a:	00 93 01 02 	sts	0x0201, r16
 35e:	10 93 24 02 	sts	0x0224, r17
 362:	9d cf       	rjmp	.-198    	; 0x29e <main+0x24>
					}
					else 							// direction = RIGHT
					{
						LED_mask = LED_mask >> 1;
 364:	80 91 01 02 	lds	r24, 0x0201
 368:	86 95       	lsr	r24
 36a:	80 93 01 02 	sts	0x0201, r24
						if (LED_mask == 0x00) {LED_mask = 0x02; direction = LEFT;}
 36e:	80 91 01 02 	lds	r24, 0x0201
 372:	81 11       	cpse	r24, r1
 374:	94 cf       	rjmp	.-216    	; 0x29e <main+0x24>
 376:	f0 92 01 02 	sts	0x0201, r15
 37a:	10 92 24 02 	sts	0x0224, r1
 37e:	8f cf       	rjmp	.-226    	; 0x29e <main+0x24>

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
