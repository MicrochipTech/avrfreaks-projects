                         .module Bounce.c
                         .area data(ram, con, rel)
 0000                 _memory::
 0000                   .blkb 16
                         .area idata
 0000 202020466C6173682044656D6F202020   .byte 32,32,32,'F,'l,'a,'s,'h,32,'D,'e,'m,'o,32,32,32
                         .area data(ram, con, rel)
 0010                   .blkb 16
                         .area idata
 0010 20202041565220426F756E6365202020   .byte 32,32,32,'A,'V,'R,32,'B,'o,'u,'n,'c,'e,32,32,32
                         .area data(ram, con, rel)
 0020                   .blkb 128
                         .area idata
 0020 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000   .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 005C 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000   .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0098 0000000000000000   .byte 0,0,0,0,0,0,0,0
                         .area data(ram, con, rel)
 00A0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00A0                   .dbsym s memory _memory A[160:10:16]c
 00A0                 _message::
 00A0                   .blkb 16
                         .area idata
 00A0 20202020202020202020202020202020   .byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
                         .area data(ram, con, rel)
 00B0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00B0                   .blkb 16
                         .area idata
 00B0 202054484520574F524C442753202020   .byte 32,32,'T,'H,'E,32,'W,'O,'R,'L,'D,39,'S,32,32,32
                         .area data(ram, con, rel)
 00C0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00C0                   .blkb 16
                         .area idata
 00C0 202020534D414C4C4553542C20202020   .byte 32,32,32,'S,'M,'A,'L,'L,'E,'S,'T,44,32,32,32,32
                         .area data(ram, con, rel)
 00D0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00D0                   .blkb 16
                         .area idata
 00D0 202020464153544553542C2020202020   .byte 32,32,32,'F,'A,'S,'T,'E,'S,'T,44,32,32,32,32,32
                         .area data(ram, con, rel)
 00E0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00E0                   .blkb 16
                         .area idata
 00E0 202020204E4F2D4943452C2020202020   .byte 32,32,32,32,'N,'O,45,'I,'C,'E,44,32,32,32,32,32
                         .area data(ram, con, rel)
 00F0                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 00F0                   .blkb 16
                         .area idata
 00F0 202020494E2D53595354454D20202020   .byte 32,32,32,'I,'N,45,'S,'Y,'S,'T,'E,'M,32,32,32,32
                         .area data(ram, con, rel)
 0100                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 0100                   .blkb 16
                         .area idata
 0100 20202044454255474745522120202020   .byte 32,32,32,'D,'E,'B,'U,'G,'G,'E,'R,33,32,32,32,32
                         .area data(ram, con, rel)
 0110                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 0110                   .blkb 16
                         .area idata
 0110 20202020202020202020202020202020   .byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
                         .area data(ram, con, rel)
 0120                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 0120                   .dbsym s message _message A[128:8:16]c
                         .area text(rom, con, rel)
 0000                   .dbfile C:\Studio+\Demos\ImageCraft\ATmega103_Bounce\Bounce.c
 0000                   .dbfunc s UART0_Init _UART0_Init fI
                         .even
 0000                 _UART0_Init::
 0000                   .dbline -1
 0000                   .dbline 46
                       ; // Bounce.c
                       ; //
                       ; // Flash Studio+ & In-System-Debugger (ISD) "Bounce" demo.
                       ; //
                       ; // Use with any ATMEL AVR CPU that has internal SRAM and an RS232
                       ; // port or with Flash 5in1 AVR Starter Kits for added features.
                       ; //
                       ; // Requires a version 1.6 (or later) ISD library or source file:
                       ; //    libISD16ATx.a or ISD16_ATx.s
                       ; 
                       ; // ****** USER SETTINGS ******
                       ; 
                       ; // Un-comment the CPU you are using.
                       ; // Remember to set the CPU & ISD library (if you are using one)
                       ; // in your ImageCraft project settings too!
                       ; //#define AT90S8515
                       ; #define ATMEGA103
                       ; 
                       ; // Clock frequency - set this to your clock frequency
                       ; #define FOSC 3686400                    // 3.6864Mhz
                       ; 
                       ; // Serial comms Baud rate - set this to your desired baud rate
                       ; #define BAUD 115200
                       ; 
                       ; // ***** END USER SETTINGS *****
                       ; 
                       ; #include <stdio.h>
                       ; #include <ina90.h>
                       ; #ifdef AT90S8515
                       ; #include <io8515.h>
                       ; #endif
                       ; #ifdef ATMEGA103
                       ; #include <iom103.h>
                       ; #endif
                       ; 
                       ; #define SIZEX 16                        // Size of bounce area
                       ; #define SIZEY 8
                       ; 
                       ; char memory[SIZEY+2][SIZEX] = {"   Flash Demo   ","   AVR Bounce   "};
                       ; char message[SIZEY][SIZEX] = {"                ","  THE WORLD'S   ",
                       ;     "   SMALLEST,    ","   FASTEST,     ","    NO-ICE,     ",
                       ;     "   IN-SYSTEM    ","   DEBUGGER!    ","                "};
                       ; 
                       ; 
                       ; void UART0_Init(void)
                       ; {
 0000                   .dbline 47
                       ;     UCR  = 0x00;                        // Disable while setting baud rate
 0000 2224              clr R2
 0002 2AB8              out 0xa,R2
 0004                   .dbline 48
                       ;     UBRR = (FOSC/(16*BAUD))-1;          // Set baud rate
 0004 81E0              ldi R24,1
 0006 89B9              out 0x9,R24
 0008                   .dbline 49
                       ;     UCR  = 0x18;                        // Enable Tx & Rx
 0008 88E1              ldi R24,24
 000A 8AB9              out 0xa,R24
 000C                   .dbline -2
 000C                   .dbline 50
                       ; }
 000C                 L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbfunc s INT0_Init _INT0_Init fI
                         .even
 000E                 _INT0_Init::
 000E                   .dbline -1
 000E                   .dbline 54
                       ; 
                       ; 
                       ; void INT0_Init(void)
                       ; {
 000E                   .dbline 60
                       ; #ifdef AT90S8515
                       ;     DDRD |= 0x08;                       // Set up PD3 (AVRDIL LED) = Output
                       ;     PORTD |= 0x04;                      // Turn on Pull-Up PD2 (INT0) = 1
                       ; #endif
                       ; #ifdef ATMEGA103
                       ;     PORTD |= 0x01;                      // Turn on Pull-Up PD0 (INT0) = 1
 000E 909A              sbi 0x12,0
 0010                   .dbline -2
 0010                   .dbline 62
                       ; #endif
                       ; }
 0010                 L2:
 0010                   .dbline 0 ; func end
 0010 0895              ret
 0012                   .dbfunc s MakeLedRed _MakeLedRed fI
                         .even
 0012                 _MakeLedRed::
 0012                   .dbline -1
 0012                   .dbline 66
                       ; 
                       ; 
                       ; void MakeLedRed(void)
                       ; {
 0012                   .dbline 67
                       ;     DDRD &= 0xf7;                       // Turn on red LED
 0012 81B3              in R24,0x11
 0014 877F              andi R24,247
 0016 81BB              out 0x11,R24
 0018                   .dbline -2
 0018                   .dbline 68
                       ; }
 0018                 L3:
 0018                   .dbline 0 ; func end
 0018 0895              ret
 001A                   .dbfunc s MakeLedGreen _MakeLedGreen fI
                         .even
 001A                 _MakeLedGreen::
 001A                   .dbline -1
 001A                   .dbline 72
                       ; 
                       ; 
                       ; void MakeLedGreen(void)
                       ; {
 001A                   .dbline 73
                       ;     DDRD |= 0x08;                       // Turn off red LED
 001A 8B9A              sbi 0x11,3
 001C                   .dbline -2
 001C                   .dbline 74
                       ; }
 001C                 L4:
 001C                   .dbline 0 ; func end
 001C 0895              ret
 001E                   .dbfunc s main _main fI
                       ;             dy -> R14
                       ;             dx -> R10
                       ;           oldY -> R20
                       ;           oldX -> R22
                       ;              y -> y+0
                       ;              x -> R12
                         .even
 001E                 _main::
 001E 2197              sbiw R28,1
 0020                   .dbline -1
 0020                   .dbline 78
                       ; 
                       ; 
                       ; void main(void)
                       ; {
 0020                   .dbline 82
                       ;     unsigned char x, y, oldX, oldY;
                       ;     char dx, dy;
                       ; 
                       ;     MCUCR |= 0x80;                      // Enable external sram (optional)
 0020 85B7              in R24,0x35
 0022 8068              ori R24,128
 0024 85BF              out 0x35,R24
 0026                   .dbline 84
                       ; 
                       ;     INT0_Init();
 0026 F3DF              xcall _INT0_Init
 0028                   .dbline 85
                       ;     UART0_Init();
 0028 EBDF              xcall _UART0_Init
 002A                   .dbline 90
                       ; #ifdef AT90S8515
                       ;     GIMSK |= 0x40;                      // Enable INT0 (AT90S8515)
                       ; #endif
                       ; #ifdef ATMEGA103
                       ;     EIMSK |= 0x01;                      // Enable INT0 (ATmega103)
 002A 89B7              in R24,0x39
 002C 8160              ori R24,1
 002E 89BF              out 0x39,R24
 0030                   .dbline 92
                       ; #endif
                       ;     SEI();                              // Enable interrupts
 0030 7894              sei
 0032                   .dbline 94
                       ; 
                       ;     for (y=0; y<SIZEY; y++)             // Initialise grid
 0032 0024              clr R0
 0034 0882              std y+0,R0
 0036 30C0              xjmp L9
 0038                 L6:
 0038                   .dbline 95
                       ;     {
 0038                   .dbline 96
                       ;         for (x=0; x<SIZEX; x++)
 0038 CC24              clr R12
 003A 28C0              xjmp L13
 003C                 L10:
 003C                   .dbline 97
 003C                   .dbline 98
 003C 80E0              ldi R24,<_message
 003E 90E0              ldi R25,>_message
 0040 2880              ldd R2,y+0
 0042 3324              clr R3
 0044 220C              lsl R2
 0046 331C              rol R3
 0048 220C              lsl R2
 004A 331C              rol R3
 004C 220C              lsl R2
 004E 331C              rol R3
 0050 220C              lsl R2
 0052 331C              rol R3
 0054 280E              add R2,R24
 0056 391E              adc R3,R25
 0058 EC2D              mov R30,R12
 005A FF27              clr R31
 005C E20D              add R30,R2
 005E F31D              adc R31,R3
 0060 2080              ldd R2,z+0
 0062 80E0              ldi R24,<_memory
 0064 90E0              ldi R25,>_memory
 0066 E881              ldd R30,y+0
 0068 FF27              clr R31
 006A 3296              adiw R30,2
 006C EE0F              lsl R30
 006E FF1F              rol R31
 0070 EE0F              lsl R30
 0072 FF1F              rol R31
 0074 EE0F              lsl R30
 0076 FF1F              rol R31
 0078 EE0F              lsl R30
 007A FF1F              rol R31
 007C E80F              add R30,R24
 007E F91F              adc R31,R25
 0080 AC2D              mov R26,R12
 0082 BB27              clr R27
 0084 AE0F              add R26,R30
 0086 BF1F              adc R27,R31
 0088 2C92              st x,R2
 008A                   .dbline 99
 008A                 L11:
 008A                   .dbline 96
 008A C394              inc R12
 008C                 L13:
 008C                   .dbline 96
 008C 8C2D              mov R24,R12
 008E 8031              cpi R24,16
 0090 A8F2              brlo L10
 0092                   .dbline 100
 0092                 L7:
 0092                   .dbline 94
 0092 0880              ldd R0,y+0
 0094 0394              inc R0
 0096 0882              std y+0,R0
 0098                 L9:
 0098                   .dbline 94
 0098 8881              ldd R24,y+0
 009A 8830              cpi R24,8
 009C 68F2              brlo L6
 009E                   .dbline 102
                       ;         {
                       ;             memory[y+2][x] = message[y][x];
                       ;         }
                       ;     }
                       ; 
                       ;     MakeLedRed();
 009E B9DF              xcall _MakeLedRed
 00A0                   .dbline 103
                       ;     x = 0;                              // Starting position
 00A0 CC24              clr R12
 00A2                   .dbline 104
                       ;     y = 3;
 00A2 83E0              ldi R24,3
 00A4 8883              std y+0,R24
 00A6                   .dbline 105
                       ;     memory[y+2][x] = 'O';
 00A6 80E0              ldi R24,<_memory
 00A8 90E0              ldi R25,>_memory
 00AA E881              ldd R30,y+0
 00AC FF27              clr R31
 00AE 3296              adiw R30,2
 00B0 EE0F              lsl R30
 00B2 FF1F              rol R31
 00B4 EE0F              lsl R30
 00B6 FF1F              rol R31
 00B8 EE0F              lsl R30
 00BA FF1F              rol R31
 00BC EE0F              lsl R30
 00BE FF1F              rol R31
 00C0 E80F              add R30,R24
 00C2 F91F              adc R31,R25
 00C4 AC2D              mov R26,R12
 00C6 BB27              clr R27
 00C8 AE0F              add R26,R30
 00CA BF1F              adc R27,R31
 00CC 8FE4              ldi R24,79
 00CE 8C93              st x,R24
 00D0                   .dbline 106
                       ;     oldX = x;
 00D0 6C2D              mov R22,R12
 00D2                   .dbline 107
                       ;     oldY = y;
 00D2 4881              ldd R20,y+0
 00D4                   .dbline 108
                       ;     dx = 1;                             // Right & down
 00D4 AA24              clr R10
 00D6 A394              inc R10
 00D8                   .dbline 109
                       ;     dy = 1;
 00D8 EE24              clr R14
 00DA E394              inc R14
 00DC                   .dbline 111
                       ; 
                       ;     for (;;)                            // Loop forever!!
 00DC                 L14:
 00DC                   .dbline 112
                       ;     {
 00DC                   .dbline 113
                       ;         memory[2+oldY][oldX] = message[oldY][oldX];
 00DC 80E0              ldi R24,<_message
 00DE 90E0              ldi R25,>_message
 00E0 242E              mov R2,R20
 00E2 3324              clr R3
 00E4 220C              lsl R2
 00E6 331C              rol R3
 00E8 220C              lsl R2
 00EA 331C              rol R3
 00EC 220C              lsl R2
 00EE 331C              rol R3
 00F0 220C              lsl R2
 00F2 331C              rol R3
 00F4 280E              add R2,R24
 00F6 391E              adc R3,R25
 00F8 E62F              mov R30,R22
 00FA FF27              clr R31
 00FC E20D              add R30,R2
 00FE F31D              adc R31,R3
 0100 2080              ldd R2,z+0
 0102 80E0              ldi R24,<_memory
 0104 90E0              ldi R25,>_memory
 0106 E42F              mov R30,R20
 0108 FF27              clr R31
 010A 3296              adiw R30,2
 010C EE0F              lsl R30
 010E FF1F              rol R31
 0110 EE0F              lsl R30
 0112 FF1F              rol R31
 0114 EE0F              lsl R30
 0116 FF1F              rol R31
 0118 EE0F              lsl R30
 011A FF1F              rol R31
 011C E80F              add R30,R24
 011E F91F              adc R31,R25
 0120 A62F              mov R26,R22
 0122 BB27              clr R27
 0124 AE0F              add R26,R30
 0126 BF1F              adc R27,R31
 0128 2C92              st x,R2
 012A                   .dbline 114
                       ;         x += dx;                        // Update ball's position
 012A CA0C              add R12,R10
 012C                   .dbline 115
                       ;         y += dy;
 012C 2880              ldd R2,y+0
 012E 2E0C              add R2,R14
 0130 2882              std y+0,R2
 0132                   .dbline 116
                       ;         memory[2+y][x] = 'O';
 0132 E881              ldd R30,y+0
 0134 FF27              clr R31
 0136 3296              adiw R30,2
 0138 EE0F              lsl R30
 013A FF1F              rol R31
 013C EE0F              lsl R30
 013E FF1F              rol R31
 0140 EE0F              lsl R30
 0142 FF1F              rol R31
 0144 EE0F              lsl R30
 0146 FF1F              rol R31
 0148 E80F              add R30,R24
 014A F91F              adc R31,R25
 014C AC2D              mov R26,R12
 014E BB27              clr R27
 0150 AE0F              add R26,R30
 0152 BF1F              adc R27,R31
 0154 8FE4              ldi R24,79
 0156 8C93              st x,R24
 0158                   .dbline 118
                       ; 
                       ;         if (x == 0 || x == (SIZEX-1))   // If ball is at the left or right edge
 0158 CC20              tst R12
 015A 19F0              breq L20
 015C 8C2D              mov R24,R12
 015E 8F30              cpi R24,15
 0160 11F4              brne L18
 0162                 L20:
 0162                   .dbline 119
                       ;         {
 0162                   .dbline 120
                       ;             dx =- dx;                   // Change direction
 0162 A194              neg R10
 0164                   .dbline 121
                       ;             MakeLedGreen();
 0164 5ADF              xcall _MakeLedGreen
 0166                   .dbline 122
                       ;         }
 0166                 L18:
 0166                   .dbline 124
                       ; 
                       ;         SetBreakHere();                 // Hard Breakpoint here
 0166 0E940000          xcall _SetBreakHere
 016A                   .dbline 126
                       ; 
                       ;         if (y==0 || y== (SIZEY-1))      // If ball is at the top or bottom edge
 016A 0880              ldd R0,y+0
 016C 0020              tst R0
 016E 19F0              breq L23
 0170 8881              ldd R24,y+0
 0172 8730              cpi R24,7
 0174 11F4              brne L21
 0176                 L23:
 0176                   .dbline 127
                       ;         {
 0176                   .dbline 128
                       ;             dy =- dy;                   // Change direction
 0176 E194              neg R14
 0178                   .dbline 129
                       ;             MakeLedRed();
 0178 4CDF              xcall _MakeLedRed
 017A                   .dbline 130
                       ;         }
 017A                 L21:
 017A                   .dbline 132
 017A 6C2D              mov R22,R12
 017C                   .dbline 133
 017C 4881              ldd R20,y+0
 017E                   .dbline 134
 017E                   .dbline 111
 017E                   .dbline 111
 017E AECF              xjmp L14
 0180                 X0:
 0180                   .dbline -2
 0180                 L5:
 0180 2196              adiw R28,1
 0182                   .dbline 0 ; func end
 0182 0895              ret
 0184                   .dbsym r dy 14 c
 0184                   .dbsym r dx 10 c
 0184                   .dbsym r oldY 20 c
 0184                   .dbsym r oldX 22 c
 0184                   .dbsym l y 0 c
 0184                   .dbsym r x 12 c
