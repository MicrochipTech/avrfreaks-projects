__text_start:
__start:
    009D E5CF      LDI	R28,0x5F
    009E E0D2      LDI	R29,2
    009F BFCD      OUT	P3D,R28
    00A0 BFDE      OUT	P3E,R29
    00A1 52C0      SUBI	R28,0x20
    00A2 40D0      SBCI	R29,0
    00A3 EA0A      LDI	R16,0xAA
    00A4 8308      STD	R16,0+Y
    00A5 2400      CLR	R0
    00A6 E8E0      LDI	R30,0x80
    00A7 E0F1      LDI	R31,1
    00A8 E011      LDI	R17,1
    00A9 38E0      CPI	R30,0x80
    00AA 07F1      CPC	R31,R17
    00AB F011      BEQ	0x00AE
    00AC 9201      ST	R0,Z+
    00AD CFFB      RJMP	0x00A9
    00AE 8300      STD	R16,0+Z
    00AF E1EA      LDI	R30,0x1A
    00B0 E0F0      LDI	R31,0
    00B1 E6A0      LDI	R26,0x60
    00B2 E0B0      LDI	R27,0
    00B3 E011      LDI	R17,1
    00B4 33EA      CPI	R30,0x3A
    00B5 07F1      CPC	R31,R17
    00B6 F021      BEQ	0x00BB
    00B7 95C8      LPM
    00B8 9631      ADIW	R30,1
    00B9 920D      ST	R0,X+
    00BA CFF9      RJMP	0x00B4
    00BB D011      RCALL	_main
_exit:
    00BC CFFF      RJMP	_exit
FILE: C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
(0000) // Bounce.c
(0001) //
(0002) // Flash Studio+ & In-System-Debugger (ISD) "Bounce" demo.
(0003) //
(0004) // Use with any ATMEL AVR CPU/starter kit that has an RS232
(0005) // port or with Flash AVR modules for added features.
(0006) //
(0007) // Requires a version 1.6 (or later) ISD library or source file:
(0008) //    libISD16ATx.a or ISD16_ATx.s
(0009) 
(0010) // ****** USER SETTINGS ******
(0011) 
(0012) // Un-comment the CPU you are using.
(0013) // Remember to set the CPU & ISD library (if you are using one)
(0014) // in your ImageCraft project settings too!
(0015) #define AT90S8515
(0016) //#define ATMEGA103
(0017) 
(0018) // Clock frequency - set this to your clock frequency
(0019) #define FOSC 3686400					// 3.6864Mhz
(0020) 
(0021) // Serial comms Baud rate - set this to your desired baud rate
(0022) #define BAUD 115200
(0023) 
(0024) // ***** END USER SETTINGS *****
(0025) 
(0026) #include <stdio.h>
(0027) #include <ina90.h>
(0028) #ifdef AT90S8515
(0029) #include <io8515.h>
(0030) #endif
(0031) #ifdef ATMEGA103
(0032) #include <iom103.h>
(0033) #endif
(0034) 
(0035) #define SIZEX 16						// Size of bounce area
(0036) #define SIZEY 8
(0037) 
(0038) char memory[SIZEY+2][SIZEX] = {"   Flash Demo   ","   AVR Bounce   "};
(0039) char message[SIZEY][SIZEX] = {"                ","  THE WORLD'S   ",
(0040) 	"   SMALLEST,    ","   FASTEST,     ","    NO-ICE,     ",
(0041) 	"   IN-SYSTEM    ","   DEBUGGER!    ","                "};
(0042) 
(0043) 
(0044) void UART0_Init(void)
(0045) {
(0046) 	UCR  = 0x00;						// Disable while setting baud rate
_UART0_Init:
    00BD 2422      CLR	R2
    00BE B82A      OUT	P0A,R2
(0047) 	UBRR = (FOSC/(16*BAUD))-1;			// Set baud rate
    00BF E081      LDI	R24,1
    00C0 B989      OUT	P09,R24
(0048) 	UCR  = 0x18;						// Enable Tx & Rx
    00C1 E188      LDI	R24,0x18
    00C2 B98A      OUT	P0A,R24
(0049) }
    00C3 9508      RET
(0050) 
(0051) 
(0052) void INT0_Init(void)
(0053) {
(0054) #ifdef AT90S8515
(0055) 	DDRD |= 0x08;						// Set up PD3 (AVRDIL LED) = Output
_INT0_Init:
    00C4 9A8B      SBI	P11,3
(0056) 	PORTD |= 0x04;						// Turn on Pull-Up PD2 (INT0) = 1
    00C5 9A92      SBI	P12,2
(0057) #endif
(0058) #ifdef ATMEGA103
(0059) 	PORTD |= 0x01;						// Turn on Pull-Up PD0 (INT0) = 1
(0060) #endif
(0061) }
    00C6 9508      RET
(0062) 
(0063) 
(0064) void MakeLedRed(void)
(0065) {
(0066) 	DDRD &= 0xf7;						// Turn on red LED
_MakeLedRed:
    00C7 B381      IN	R24,P11
    00C8 7F87      ANDI	R24,0xF7
    00C9 BB81      OUT	P11,R24
(0067) }
    00CA 9508      RET
(0068) 
(0069) 
(0070) void MakeLedGreen(void)
(0071) {
(0072) 	DDRD |= 0x08;						// Turn off red LED
_MakeLedGreen:
    00CB 9A8B      SBI	P11,3
(0073) }
    00CC 9508      RET
_main:
  dy                   --> R14
  dx                   --> R10
  oldY                 --> R20
  oldX                 --> R22
  y                    --> Y+0
  x                    --> R12
    00CD 9721      SBIW	R28,1
(0074) 
(0075) 
(0076) void main(void)
(0077) {
(0078) 	unsigned char x, y, oldX, oldY;
(0079) 	char dx, dy;
(0080) 
(0081) 	MCUCR |= 0x80;						// Enable external sram (optional)
    00CE B785      IN	R24,P35
    00CF 6880      ORI	R24,0x80
    00D0 BF85      OUT	P35,R24
(0082) 
(0083) 	INT0_Init();
    00D1 DFF2      RCALL	_INT0_Init
(0084) 	UART0_Init();
    00D2 DFEA      RCALL	_UART0_Init
(0085) #ifdef AT90S8515
(0086) 	GIMSK |= 0x40;						// Enable INT0 (AT90S8515)
    00D3 B78B      IN	R24,P3B
    00D4 6480      ORI	R24,0x40
    00D5 BF8B      OUT	P3B,R24
(0087) #endif
(0088) #ifdef ATMEGA103
(0089) 	EIMSK |= 0x01;						// Enable INT0 (ATmega103)
(0090) #endif
(0091) 	SEI();								// Enable interrupts
    00D6 9478      BSET	7
(0092) 
(0093) 	for (y=0; y<SIZEY; y++)				// Initialise grid
    00D7 2400      CLR	R0
    00D8 8208      STD	R0,0+Y
    00D9 C030      RJMP	0x010A
(0094) 	{
(0095) 		for (x=0; x<SIZEX; x++)
    00DA 24CC      CLR	R12
    00DB C028      RJMP	0x0104
(0096) 		{
(0097) 			memory[y+2][x] = message[y][x];
    00DC E080      LDI	R24,0
    00DD E091      LDI	R25,1
    00DE 8028      LDD	R2,0+Y
    00DF 2433      CLR	R3
    00E0 0C22      LSL	R2
    00E1 1C33      ROL	R3
    00E2 0C22      LSL	R2
    00E3 1C33      ROL	R3
    00E4 0C22      LSL	R2
    00E5 1C33      ROL	R3
    00E6 0C22      LSL	R2
    00E7 1C33      ROL	R3
    00E8 0E28      ADD	R2,R24
    00E9 1E39      ADC	R3,R25
    00EA 2DEC      MOV	R30,R12
    00EB 27FF      CLR	R31
    00EC 0DE2      ADD	R30,R2
    00ED 1DF3      ADC	R31,R3
    00EE 8020      LDD	R2,0+Z
    00EF E680      LDI	R24,0x60
    00F0 E090      LDI	R25,0
    00F1 81E8      LDD	R30,0+Y
    00F2 27FF      CLR	R31
    00F3 9632      ADIW	R30,2
    00F4 0FEE      LSL	R30
    00F5 1FFF      ROL	R31
    00F6 0FEE      LSL	R30
    00F7 1FFF      ROL	R31
    00F8 0FEE      LSL	R30
    00F9 1FFF      ROL	R31
    00FA 0FEE      LSL	R30
    00FB 1FFF      ROL	R31
    00FC 0FE8      ADD	R30,R24
    00FD 1FF9      ADC	R31,R25
    00FE 2DAC      MOV	R26,R12
    00FF 27BB      CLR	R27
    0100 0FAE      ADD	R26,R30
    0101 1FBF      ADC	R27,R31
    0102 922C      ST	R2,0(X)
(0098) 		}
    0103 94C3      INC	R12
    0104 2D8C      MOV	R24,R12
    0105 3180      CPI	R24,0x10
    0106 F2A8      BCS	0x00DC
(0099) 	}
    0107 8008      LDD	R0,0+Y
    0108 9403      INC	R0
    0109 8208      STD	R0,0+Y
    010A 8188      LDD	R24,0+Y
    010B 3088      CPI	R24,0x8
    010C F268      BCS	0x00DA
(0100) 
(0101) 	MakeLedRed();
    010D DFB9      RCALL	_MakeLedRed
(0102) 	x = 0;								// Starting position
    010E 24CC      CLR	R12
(0103) 	y = 3;
    010F E083      LDI	R24,3
    0110 8388      STD	R24,0+Y
(0104) 	memory[y+2][x] = 'O';
    0111 E680      LDI	R24,0x60
    0112 E090      LDI	R25,0
    0113 81E8      LDD	R30,0+Y
    0114 27FF      CLR	R31
    0115 9632      ADIW	R30,2
    0116 0FEE      LSL	R30
    0117 1FFF      ROL	R31
    0118 0FEE      LSL	R30
    0119 1FFF      ROL	R31
    011A 0FEE      LSL	R30
    011B 1FFF      ROL	R31
    011C 0FEE      LSL	R30
    011D 1FFF      ROL	R31
    011E 0FE8      ADD	R30,R24
    011F 1FF9      ADC	R31,R25
    0120 2DAC      MOV	R26,R12
    0121 27BB      CLR	R27
    0122 0FAE      ADD	R26,R30
    0123 1FBF      ADC	R27,R31
    0124 E48F      LDI	R24,0x4F
    0125 938C      ST	R24,0(X)
(0105) 	oldX = x;
    0126 2D6C      MOV	R22,R12
(0106) 	oldY = y;
    0127 8148      LDD	R20,0+Y
(0107) 	dx = 1;								// Right & down
    0128 24AA      CLR	R10
    0129 94A3      INC	R10
(0108) 	dy = 1;
    012A 24EE      CLR	R14
    012B 94E3      INC	R14
(0109) 
(0110) 	for (;;)							// Loop forever!!
(0111) 	{
(0112) 		memory[2+oldY][oldX] = message[oldY][oldX];
    012C E080      LDI	R24,0
    012D E091      LDI	R25,1
    012E 2E24      MOV	R2,R20
    012F 2433      CLR	R3
    0130 0C22      LSL	R2
    0131 1C33      ROL	R3
    0132 0C22      LSL	R2
    0133 1C33      ROL	R3
    0134 0C22      LSL	R2
    0135 1C33      ROL	R3
    0136 0C22      LSL	R2
    0137 1C33      ROL	R3
    0138 0E28      ADD	R2,R24
    0139 1E39      ADC	R3,R25
    013A 2FE6      MOV	R30,R22
    013B 27FF      CLR	R31
    013C 0DE2      ADD	R30,R2
    013D 1DF3      ADC	R31,R3
    013E 8020      LDD	R2,0+Z
    013F E680      LDI	R24,0x60
    0140 E090      LDI	R25,0
    0141 2FE4      MOV	R30,R20
    0142 27FF      CLR	R31
    0143 9632      ADIW	R30,2
    0144 0FEE      LSL	R30
    0145 1FFF      ROL	R31
    0146 0FEE      LSL	R30
    0147 1FFF      ROL	R31
    0148 0FEE      LSL	R30
    0149 1FFF      ROL	R31
    014A 0FEE      LSL	R30
    014B 1FFF      ROL	R31
    014C 0FE8      ADD	R30,R24
    014D 1FF9      ADC	R31,R25
    014E 2FA6      MOV	R26,R22
    014F 27BB      CLR	R27
    0150 0FAE      ADD	R26,R30
    0151 1FBF      ADC	R27,R31
    0152 922C      ST	R2,0(X)
(0113) 		x += dx;						// Update ball's position
    0153 0CCA      ADD	R12,R10
(0114) 		y += dy;
    0154 8028      LDD	R2,0+Y
    0155 0C2E      ADD	R2,R14
    0156 8228      STD	R2,0+Y
(0115) 		memory[2+y][x] = 'O';
    0157 81E8      LDD	R30,0+Y
    0158 27FF      CLR	R31
    0159 9632      ADIW	R30,2
    015A 0FEE      LSL	R30
    015B 1FFF      ROL	R31
    015C 0FEE      LSL	R30
    015D 1FFF      ROL	R31
    015E 0FEE      LSL	R30
    015F 1FFF      ROL	R31
    0160 0FEE      LSL	R30
    0161 1FFF      ROL	R31
    0162 0FE8      ADD	R30,R24
    0163 1FF9      ADC	R31,R25
    0164 2DAC      MOV	R26,R12
    0165 27BB      CLR	R27
    0166 0FAE      ADD	R26,R30
    0167 1FBF      ADC	R27,R31
    0168 E48F      LDI	R24,0x4F
    0169 938C      ST	R24,0(X)
(0116) 
(0117) 		if (x == 0 || x == (SIZEX-1))	// If ball is at the left or right edge
    016A 20CC      TST	R12
    016B F019      BEQ	0x016F
    016C 2D8C      MOV	R24,R12
    016D 308F      CPI	R24,0xF
    016E F411      BNE	0x0171
(0118) 		{
(0119) 			dx =- dx;					// Change direction
    016F 94A1      NEG	R10
(0120) 			MakeLedGreen();
    0170 DF5A      RCALL	_MakeLedGreen
(0121) 		}
(0122) 
(0123) 		SetBreakHere();	   				// breakpoint set here
    0171 D010      RCALL	_SetBreakHere
(0124) 
(0125) 		if (y==0 || y== (SIZEY-1))		// If ball is at the top or bottom edge
    0172 8008      LDD	R0,0+Y
    0173 2000      TST	R0
    0174 F019      BEQ	0x0178
    0175 8188      LDD	R24,0+Y
    0176 3087      CPI	R24,7
    0177 F411      BNE	0x017A
(0126) 		{
(0127) 			dy =- dy;					// Change direction
    0178 94E1      NEG	R14
(0128) 			MakeLedRed();
    0179 DF4D      RCALL	_MakeLedRed
(0129) 		}
(0130) 
(0131) 		oldX = x;						// Save ball's position
    017A 2D6C      MOV	R22,R12
(0132) 		oldY = y;
    017B 8148      LDD	R20,0+Y
(0133) 	}
FILE: <library>
    017C CFAF      RJMP	0x012C
    017D 9621      ADIW	R28,1
    017E 9508      RET
isd_ISD:
    017F C005      RJMP	0x0185
    0180 5349      SUBI	R20,0x39
    0181 0044      NOP
_SetBreakHere:
    0182 9A8A      SBI	P11,2
    0183 9892      CBI	P12,2
    0184 9508      RET
    0185 938F      PUSH	R24
    0186 939F      PUSH	R25
    0187 93AF      PUSH	R26
    0188 93BF      PUSH	R27
    0189 93CF      PUSH	R28
    018A 93DF      PUSH	R29
    018B 93EF      PUSH	R30
    018C 93FF      PUSH	R31
    018D B78F      IN	R24,P3F
    018E 9B92      SBIS	P12,2
    018F C002      RJMP	0x0192
    0190 D0AA      RCALL	_INT0_ISR
    0191 C096      RJMP	0x0228
    0192 E4C4      LDI	R28,0x44
    0193 D09F      RCALL	0x0233
    0194 9B5F      SBIS	P0B,7
    0195 CFFE      RJMP	0x0194
    0196 9B5C      SBIS	P0B,4
    0197 C002      RJMP	0x019A
    0198 B1DC      IN	R29,P0C
    0199 CFF8      RJMP	0x0192
    019A B1DC      IN	R29,P0C
    019B 34D9      CPI	R29,0x49
    019C F469      BNE	0x01AA
    019D E0C6      LDI	R28,6
    019E D094      RCALL	0x0233
    019F E1C6      LDI	R28,0x16
    01A0 D092      RCALL	0x0233
    01A1 E0C1      LDI	R28,1
    01A2 D090      RCALL	0x0233
    01A3 E0CA      LDI	R28,0xA
    01A4 D08E      RCALL	0x0233
    01A5 E0C0      LDI	R28,0
    01A6 D08C      RCALL	0x0233
    01A7 E0CA      LDI	R28,0xA
    01A8 D08A      RCALL	0x0233
    01A9 B1DC      IN	R29,P0C
    01AA 94E8      BCLR	6
    01AB 30D0      CPI	R29,0
    01AC F411      BNE	0x01AF
    01AD 9468      BSET	6
    01AE C002      RJMP	0x01B1
    01AF 30D1      CPI	R29,1
    01B0 F4D1      BNE	0x01CB
    01B1 B7AD      IN	R26,P3D
    01B2 B7BE      IN	R27,P3E
    01B3 9611      ADIW	R26,1
    01B4 E0F8      LDI	R31,0x8
    01B5 F00E      BRTS	0x01B7
    01B6 D07B      RCALL	0x0232
    01B7 F40E      BRTC	0x01B9
    01B8 91CD      LD	R28,X+
    01B9 95FA      DEC	R31
    01BA 30F0      CPI	R31,0
    01BB F7C9      BNE	0x01B5
    01BC F05E      BRTS	0x01C8
    01BD E1E8      LDI	R30,0x18
    01BE 91C2      LD	R28,-Z
    01BF D073      RCALL	0x0233
    01C0 13EF      CPSE	R30,R31
    01C1 CFFC      RJMP	0x01BE
    01C2 2FC8      MOV	R28,R24
    01C3 D06F      RCALL	0x0233
    01C4 B7CD      IN	R28,P3D
    01C5 D06D      RCALL	0x0233
    01C6 B7CE      IN	R28,P3E
    01C7 D06B      RCALL	0x0233
    01C8 D069      RCALL	0x0232
    01C9 D068      RCALL	0x0232
    01CA C04E      RJMP	0x0219
    01CB 30D2      CPI	R29,2
    01CC F439      BNE	0x01D4
    01CD E2A0      LDI	R26,0x20
    01CE E0B0      LDI	R27,0
    01CF E090      LDI	R25,0
    01D0 E6E0      LDI	R30,0x60
    01D1 E0F0      LDI	R31,0
    01D2 E0D0      LDI	R29,0
    01D3 C014      RJMP	0x01E8
    01D4 30D3      CPI	R29,3
    01D5 F511      BNE	0x01F8
    01D6 D060      RCALL	0x0237
    01D7 2FAC      MOV	R26,R28
    01D8 D05A      RCALL	0x0233
    01D9 D05D      RCALL	0x0237
    01DA 2FBC      MOV	R27,R28
    01DB D057      RCALL	0x0233
    01DC D05A      RCALL	0x0237
    01DD 2F9C      MOV	R25,R28
    01DE D054      RCALL	0x0233
    01DF D057      RCALL	0x0237
    01E0 2FEC      MOV	R30,R28
    01E1 D051      RCALL	0x0233
    01E2 D054      RCALL	0x0237
    01E3 2FFC      MOV	R31,R28
    01E4 D04E      RCALL	0x0233
    01E5 D051      RCALL	0x0237
    01E6 2FDC      MOV	R29,R28
    01E7 D04B      RCALL	0x0233
    01E8 32AC      CPI	R26,0x2C
    01E9 F431      BNE	0x01F0
    01EA 30B0      CPI	R27,0
    01EB F421      BNE	0x01F0
    01EC E3CF      LDI	R28,0x3F
    01ED D045      RCALL	0x0233
    01EE 95A3      INC	R26
    01EF FDB0      SBRC	R27,0
    01F0 D041      RCALL	0x0232
    01F1 17AE      CP	R26,R30
    01F2 F7A9      BNE	0x01E8
    01F3 17BF      CP	R27,R31
    01F4 F799      BNE	0x01E8
    01F5 179D      CP	R25,R29
    01F6 F789      BNE	0x01E8
    01F7 C021      RJMP	0x0219
    01F8 30D4      CPI	R29,4
    01F9 F4F9      BNE	0x0219
    01FA D03C      RCALL	0x0237
    01FB 2FAC      MOV	R26,R28
    01FC D036      RCALL	0x0233
    01FD D039      RCALL	0x0237
    01FE 2FBC      MOV	R27,R28
    01FF D033      RCALL	0x0233
    0200 D036      RCALL	0x0237
    0201 2F9C      MOV	R25,R28
    0202 D030      RCALL	0x0233
    0203 D033      RCALL	0x0237
    0204 2FEC      MOV	R30,R28
    0205 D02D      RCALL	0x0233
    0206 D030      RCALL	0x0237
    0207 2FFC      MOV	R31,R28
    0208 D02A      RCALL	0x0233
    0209 D02D      RCALL	0x0237
    020A 2FDC      MOV	R29,R28
    020B D027      RCALL	0x0233
    020C BBAF      OUT	P1F,R26
    020D BBBE      OUT	P1E,R27
    020E 9AE0      SBI	P1C,0
    020F 98E0      CBI	P1C,0
    0210 B3CD      IN	R28,P1D
    0211 D021      RCALL	0x0233
    0212 9611      ADIW	R26,1
    0213 17AE      CP	R26,R30
    0214 F7B9      BNE	0x020C
    0215 17BF      CP	R27,R31
    0216 F7A9      BNE	0x020C
    0217 179D      CP	R25,R29
    0218 F799      BNE	0x020C
    0219 E4C5      LDI	R28,0x45
    021A D018      RCALL	0x0233
    021B 9B5F      SBIS	P0B,7
    021C CFFE      RJMP	0x021B
    021D 9B5C      SBIS	P0B,4
    021E C002      RJMP	0x0221
    021F B1CC      IN	R28,P0C
    0220 CFF8      RJMP	0x0219
    0221 B1CC      IN	R28,P0C
    0222 FFC0      SBRS	R28,0
    0223 CF6E      RJMP	0x0192
    0224 FDC4      SBRC	R28,4
    0225 C002      RJMP	0x0228
    0226 9A92      SBI	P12,2
    0227 988A      CBI	P11,2
    0228 BF8F      OUT	P3F,R24
    0229 91FF      POP	R31
    022A 91EF      POP	R30
    022B 91DF      POP	R29
    022C 91CF      POP	R28
    022D 91BF      POP	R27
    022E 91AF      POP	R26
    022F 919F      POP	R25
    0230 918F      POP	R24
    0231 9518      RETI
    0232 91CD      LD	R28,X+
    0233 B9CC      OUT	P0C,R28
    0234 9B5D      SBIS	P0B,5
    0235 CFFE      RJMP	0x0234
    0236 9508      RET
    0237 9B5F      SBIS	P0B,7
    0238 CFFE      RJMP	0x0237
    0239 B1CC      IN	R28,P0C
    023A 9508      RET
_INT0_ISR:
    023B 9508      RET
