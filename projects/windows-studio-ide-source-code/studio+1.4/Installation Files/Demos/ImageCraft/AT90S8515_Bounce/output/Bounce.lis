                         .module Bounce.c
                         .area data(ram, con, rel)
 0000                 _memory::
 0000                   .blkb 16
                         .area idata
 0000 202020466C6173682044656D6F202020   .byte 32,32,32,'F,'l,'a,'s,'h,32,'D,'e,'m,'o,32,32,32
                         .area data(ram, con, rel)
 0010                   .blkb 16
                         .area idata
 0010 20202041565220426F756E6365202020   .byte 32,32,32,'A,'V,'R,32,'B,'o,'u,'n,'c,'e,32,32,32
                         .area data(ram, con, rel)
 0020                   .blkb 128
                         .area idata
 0020 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000   .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 005C 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000   .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0098 0000000000000000   .byte 0,0,0,0,0,0,0,0
                         .area data(ram, con, rel)
 00A0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00A0                   .dbsym s memory _memory A[160:10:16]c
 00A0                 _message::
 00A0                   .blkb 16
                         .area idata
 00A0 20202020202020202020202020202020   .byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
                         .area data(ram, con, rel)
 00B0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00B0                   .blkb 16
                         .area idata
 00B0 202054484520574F524C442753202020   .byte 32,32,'T,'H,'E,32,'W,'O,'R,'L,'D,39,'S,32,32,32
                         .area data(ram, con, rel)
 00C0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00C0                   .blkb 16
                         .area idata
 00C0 202020534D414C4C4553542C20202020   .byte 32,32,32,'S,'M,'A,'L,'L,'E,'S,'T,44,32,32,32,32
                         .area data(ram, con, rel)
 00D0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00D0                   .blkb 16
                         .area idata
 00D0 202020464153544553542C2020202020   .byte 32,32,32,'F,'A,'S,'T,'E,'S,'T,44,32,32,32,32,32
                         .area data(ram, con, rel)
 00E0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00E0                   .blkb 16
                         .area idata
 00E0 202020204E4F2D4943452C2020202020   .byte 32,32,32,32,'N,'O,45,'I,'C,'E,44,32,32,32,32,32
                         .area data(ram, con, rel)
 00F0                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 00F0                   .blkb 16
                         .area idata
 00F0 202020494E2D53595354454D20202020   .byte 32,32,32,'I,'N,45,'S,'Y,'S,'T,'E,'M,32,32,32,32
                         .area data(ram, con, rel)
 0100                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 0100                   .blkb 16
                         .area idata
 0100 20202044454255474745522120202020   .byte 32,32,32,'D,'E,'B,'U,'G,'G,'E,'R,33,32,32,32,32
                         .area data(ram, con, rel)
 0110                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 0110                   .blkb 16
                         .area idata
 0110 20202020202020202020202020202020   .byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
                         .area data(ram, con, rel)
 0120                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 0120                   .dbsym s message _message A[128:8:16]c
                         .area text(rom, con, rel)
 0000                   .dbfile C:\Studio+\Demos\ImageCraft\AT90S8515_Bounce\Bounce.c
 0000                   .dbfunc s UART0_Init _UART0_Init fI
                         .even
 0000                 _UART0_Init::
 0000                   .dbline -1
 0000                   .dbline 46
                       ; // Bounce.c
                       ; //
                       ; // Flash Studio+ & In-System-Debugger (ISD) "Bounce" demo.
                       ; //
                       ; // Use with any ATMEL AVR CPU/starter kit that has an RS232
                       ; // port or with Flash AVR modules for added features.
                       ; //
                       ; // Requires a version 1.6 (or later) ISD library or source file:
                       ; //    libISD16ATx.a or ISD16_ATx.s
                       ; 
                       ; // ****** USER SETTINGS ******
                       ; 
                       ; // Un-comment the CPU you are using.
                       ; // Remember to set the CPU & ISD library (if you are using one)
                       ; // in your ImageCraft project settings too!
                       ; #define AT90S8515
                       ; //#define ATMEGA103
                       ; 
                       ; // Clock frequency - set this to your clock frequency
                       ; #define FOSC 3686400                    // 3.6864Mhz
                       ; 
                       ; // Serial comms Baud rate - set this to your desired baud rate
                       ; #define BAUD 115200
                       ; 
                       ; // ***** END USER SETTINGS *****
                       ; 
                       ; #include <stdio.h>
                       ; #include <ina90.h>
                       ; #ifdef AT90S8515
                       ; #include <io8515.h>
                       ; #endif
                       ; #ifdef ATMEGA103
                       ; #include <iom103.h>
                       ; #endif
                       ; 
                       ; #define SIZEX 16                        // Size of bounce area
                       ; #define SIZEY 8
                       ; 
                       ; char memory[SIZEY+2][SIZEX] = {"   Flash Demo   ","   AVR Bounce   "};
                       ; char message[SIZEY][SIZEX] = {"                ","  THE WORLD'S   ",
                       ;     "   SMALLEST,    ","   FASTEST,     ","    NO-ICE,     ",
                       ;     "   IN-SYSTEM    ","   DEBUGGER!    ","                "};
                       ; 
                       ; 
                       ; void UART0_Init(void)
                       ; {
 0000                   .dbline 47
                       ;     UCR  = 0x00;                        // Disable while setting baud rate
 0000 2224              clr R2
 0002 2AB8              out 0xa,R2
 0004                   .dbline 48
                       ;     UBRR = (FOSC/(16*BAUD))-1;          // Set baud rate
 0004 81E0              ldi R24,1
 0006 89B9              out 0x9,R24
 0008                   .dbline 49
                       ;     UCR  = 0x18;                        // Enable Tx & Rx
 0008 88E1              ldi R24,24
 000A 8AB9              out 0xa,R24
 000C                   .dbline -2
 000C                   .dbline 50
                       ; }
 000C                 L1:
 000C                   .dbline 0 ; func end
 000C 0895              ret
 000E                   .dbfunc s INT0_Init _INT0_Init fI
                         .even
 000E                 _INT0_Init::
 000E                   .dbline -1
 000E                   .dbline 54
                       ; 
                       ; 
                       ; void INT0_Init(void)
                       ; {
 000E                   .dbline 56
                       ; #ifdef AT90S8515
                       ;     DDRD |= 0x08;                       // Set up PD3 (AVRDIL LED) = Output
 000E 8B9A              sbi 0x11,3
 0010                   .dbline 57
                       ;     PORTD |= 0x04;                      // Turn on Pull-Up PD2 (INT0) = 1
 0010 929A              sbi 0x12,2
 0012                   .dbline -2
 0012                   .dbline 62
                       ; #endif
                       ; #ifdef ATMEGA103
                       ;     PORTD |= 0x01;                      // Turn on Pull-Up PD0 (INT0) = 1
                       ; #endif
                       ; }
 0012                 L2:
 0012                   .dbline 0 ; func end
 0012 0895              ret
 0014                   .dbfunc s MakeLedRed _MakeLedRed fI
                         .even
 0014                 _MakeLedRed::
 0014                   .dbline -1
 0014                   .dbline 66
                       ; 
                       ; 
                       ; void MakeLedRed(void)
                       ; {
 0014                   .dbline 67
                       ;     DDRD &= 0xf7;                       // Turn on red LED
 0014 81B3              in R24,0x11
 0016 877F              andi R24,247
 0018 81BB              out 0x11,R24
 001A                   .dbline -2
 001A                   .dbline 68
                       ; }
 001A                 L3:
 001A                   .dbline 0 ; func end
 001A 0895              ret
 001C                   .dbfunc s MakeLedGreen _MakeLedGreen fI
                         .even
 001C                 _MakeLedGreen::
 001C                   .dbline -1
 001C                   .dbline 72
                       ; 
                       ; 
                       ; void MakeLedGreen(void)
                       ; {
 001C                   .dbline 73
                       ;     DDRD |= 0x08;                       // Turn off red LED
 001C 8B9A              sbi 0x11,3
 001E                   .dbline -2
 001E                   .dbline 74
                       ; }
 001E                 L4:
 001E                   .dbline 0 ; func end
 001E 0895              ret
 0020                   .dbfunc s main _main fI
                       ;             dy -> R14
                       ;             dx -> R10
                       ;           oldY -> R20
                       ;           oldX -> R22
                       ;              y -> y+0
                       ;              x -> R12
                         .even
 0020                 _main::
 0020 2197              sbiw R28,1
 0022                   .dbline -1
 0022                   .dbline 78
                       ; 
                       ; 
                       ; void main(void)
                       ; {
 0022                   .dbline 82
                       ;     unsigned char x, y, oldX, oldY;
                       ;     char dx, dy;
                       ; 
                       ;     MCUCR |= 0x80;                      // Enable external sram (optional)
 0022 85B7              in R24,0x35
 0024 8068              ori R24,128
 0026 85BF              out 0x35,R24
 0028                   .dbline 84
                       ; 
                       ;     INT0_Init();
 0028 F2DF              rcall _INT0_Init
 002A                   .dbline 85
                       ;     UART0_Init();
 002A EADF              rcall _UART0_Init
 002C                   .dbline 87
                       ; #ifdef AT90S8515
                       ;     GIMSK |= 0x40;                      // Enable INT0 (AT90S8515)
 002C 8BB7              in R24,0x3b
 002E 8064              ori R24,64
 0030 8BBF              out 0x3b,R24
 0032                   .dbline 92
                       ; #endif
                       ; #ifdef ATMEGA103
                       ;     EIMSK |= 0x01;                      // Enable INT0 (ATmega103)
                       ; #endif
                       ;     SEI();                              // Enable interrupts
 0032 7894              sei
 0034                   .dbline 94
                       ; 
                       ;     for (y=0; y<SIZEY; y++)             // Initialise grid
 0034 0024              clr R0
 0036 0882              std y+0,R0
 0038 30C0              rjmp L9
 003A                 L6:
 003A                   .dbline 95
                       ;     {
 003A                   .dbline 96
                       ;         for (x=0; x<SIZEX; x++)
 003A CC24              clr R12
 003C 28C0              rjmp L13
 003E                 L10:
 003E                   .dbline 97
 003E                   .dbline 98
 003E 80E0              ldi R24,<_message
 0040 90E0              ldi R25,>_message
 0042 2880              ldd R2,y+0
 0044 3324              clr R3
 0046 220C              lsl R2
 0048 331C              rol R3
 004A 220C              lsl R2
 004C 331C              rol R3
 004E 220C              lsl R2
 0050 331C              rol R3
 0052 220C              lsl R2
 0054 331C              rol R3
 0056 280E              add R2,R24
 0058 391E              adc R3,R25
 005A EC2D              mov R30,R12
 005C FF27              clr R31
 005E E20D              add R30,R2
 0060 F31D              adc R31,R3
 0062 2080              ldd R2,z+0
 0064 80E0              ldi R24,<_memory
 0066 90E0              ldi R25,>_memory
 0068 E881              ldd R30,y+0
 006A FF27              clr R31
 006C 3296              adiw R30,2
 006E EE0F              lsl R30
 0070 FF1F              rol R31
 0072 EE0F              lsl R30
 0074 FF1F              rol R31
 0076 EE0F              lsl R30
 0078 FF1F              rol R31
 007A EE0F              lsl R30
 007C FF1F              rol R31
 007E E80F              add R30,R24
 0080 F91F              adc R31,R25
 0082 AC2D              mov R26,R12
 0084 BB27              clr R27
 0086 AE0F              add R26,R30
 0088 BF1F              adc R27,R31
 008A 2C92              st x,R2
 008C                   .dbline 99
 008C                 L11:
 008C                   .dbline 96
 008C C394              inc R12
 008E                 L13:
 008E                   .dbline 96
 008E 8C2D              mov R24,R12
 0090 8031              cpi R24,16
 0092 A8F2              brlo L10
 0094                   .dbline 100
 0094                 L7:
 0094                   .dbline 94
 0094 0880              ldd R0,y+0
 0096 0394              inc R0
 0098 0882              std y+0,R0
 009A                 L9:
 009A                   .dbline 94
 009A 8881              ldd R24,y+0
 009C 8830              cpi R24,8
 009E 68F2              brlo L6
 00A0                   .dbline 102
                       ;         {
                       ;             memory[y+2][x] = message[y][x];
                       ;         }
                       ;     }
                       ; 
                       ;     MakeLedRed();
 00A0 B9DF              rcall _MakeLedRed
 00A2                   .dbline 103
                       ;     x = 0;                              // Starting position
 00A2 CC24              clr R12
 00A4                   .dbline 104
                       ;     y = 3;
 00A4 83E0              ldi R24,3
 00A6 8883              std y+0,R24
 00A8                   .dbline 105
                       ;     memory[y+2][x] = 'O';
 00A8 80E0              ldi R24,<_memory
 00AA 90E0              ldi R25,>_memory
 00AC E881              ldd R30,y+0
 00AE FF27              clr R31
 00B0 3296              adiw R30,2
 00B2 EE0F              lsl R30
 00B4 FF1F              rol R31
 00B6 EE0F              lsl R30
 00B8 FF1F              rol R31
 00BA EE0F              lsl R30
 00BC FF1F              rol R31
 00BE EE0F              lsl R30
 00C0 FF1F              rol R31
 00C2 E80F              add R30,R24
 00C4 F91F              adc R31,R25
 00C6 AC2D              mov R26,R12
 00C8 BB27              clr R27
 00CA AE0F              add R26,R30
 00CC BF1F              adc R27,R31
 00CE 8FE4              ldi R24,79
 00D0 8C93              st x,R24
 00D2                   .dbline 106
                       ;     oldX = x;
 00D2 6C2D              mov R22,R12
 00D4                   .dbline 107
                       ;     oldY = y;
 00D4 4881              ldd R20,y+0
 00D6                   .dbline 108
                       ;     dx = 1;                             // Right & down
 00D6 AA24              clr R10
 00D8 A394              inc R10
 00DA                   .dbline 109
                       ;     dy = 1;
 00DA EE24              clr R14
 00DC E394              inc R14
 00DE                   .dbline 111
                       ; 
                       ;     for (;;)                            // Loop forever!!
 00DE                 L14:
 00DE                   .dbline 112
                       ;     {
 00DE                   .dbline 113
                       ;         memory[2+oldY][oldX] = message[oldY][oldX];
 00DE 80E0              ldi R24,<_message
 00E0 90E0              ldi R25,>_message
 00E2 242E              mov R2,R20
 00E4 3324              clr R3
 00E6 220C              lsl R2
 00E8 331C              rol R3
 00EA 220C              lsl R2
 00EC 331C              rol R3
 00EE 220C              lsl R2
 00F0 331C              rol R3
 00F2 220C              lsl R2
 00F4 331C              rol R3
 00F6 280E              add R2,R24
 00F8 391E              adc R3,R25
 00FA E62F              mov R30,R22
 00FC FF27              clr R31
 00FE E20D              add R30,R2
 0100 F31D              adc R31,R3
 0102 2080              ldd R2,z+0
 0104 80E0              ldi R24,<_memory
 0106 90E0              ldi R25,>_memory
 0108 E42F              mov R30,R20
 010A FF27              clr R31
 010C 3296              adiw R30,2
 010E EE0F              lsl R30
 0110 FF1F              rol R31
 0112 EE0F              lsl R30
 0114 FF1F              rol R31
 0116 EE0F              lsl R30
 0118 FF1F              rol R31
 011A EE0F              lsl R30
 011C FF1F              rol R31
 011E E80F              add R30,R24
 0120 F91F              adc R31,R25
 0122 A62F              mov R26,R22
 0124 BB27              clr R27
 0126 AE0F              add R26,R30
 0128 BF1F              adc R27,R31
 012A 2C92              st x,R2
 012C                   .dbline 114
                       ;         x += dx;                        // Update ball's position
 012C CA0C              add R12,R10
 012E                   .dbline 115
                       ;         y += dy;
 012E 2880              ldd R2,y+0
 0130 2E0C              add R2,R14
 0132 2882              std y+0,R2
 0134                   .dbline 116
                       ;         memory[2+y][x] = 'O';
 0134 E881              ldd R30,y+0
 0136 FF27              clr R31
 0138 3296              adiw R30,2
 013A EE0F              lsl R30
 013C FF1F              rol R31
 013E EE0F              lsl R30
 0140 FF1F              rol R31
 0142 EE0F              lsl R30
 0144 FF1F              rol R31
 0146 EE0F              lsl R30
 0148 FF1F              rol R31
 014A E80F              add R30,R24
 014C F91F              adc R31,R25
 014E AC2D              mov R26,R12
 0150 BB27              clr R27
 0152 AE0F              add R26,R30
 0154 BF1F              adc R27,R31
 0156 8FE4              ldi R24,79
 0158 8C93              st x,R24
 015A                   .dbline 118
                       ; 
                       ;         if (x == 0 || x == (SIZEX-1))   // If ball is at the left or right edge
 015A CC20              tst R12
 015C 19F0              breq L20
 015E 8C2D              mov R24,R12
 0160 8F30              cpi R24,15
 0162 11F4              brne L18
 0164                 L20:
 0164                   .dbline 119
                       ;         {
 0164                   .dbline 120
                       ;             dx =- dx;                   // Change direction
 0164 A194              neg R10
 0166                   .dbline 121
                       ;             MakeLedGreen();
 0166 5ADF              rcall _MakeLedGreen
 0168                   .dbline 122
                       ;         }
 0168                 L18:
 0168                   .dbline 124
                       ; 
                       ;         SetBreakHere();                 // breakpoint set here
 0168 00D0              rcall _SetBreakHere
 016A                   .dbline 126
                       ; 
                       ;         if (y==0 || y== (SIZEY-1))      // If ball is at the top or bottom edge
 016A 0880              ldd R0,y+0
 016C 0020              tst R0
 016E 19F0              breq L23
 0170 8881              ldd R24,y+0
 0172 8730              cpi R24,7
 0174 11F4              brne L21
 0176                 L23:
 0176                   .dbline 127
                       ;         {
 0176                   .dbline 128
                       ;             dy =- dy;                   // Change direction
 0176 E194              neg R14
 0178                   .dbline 129
                       ;             MakeLedRed();
 0178 4DDF              rcall _MakeLedRed
 017A                   .dbline 130
                       ;         }
 017A                 L21:
 017A                   .dbline 132
 017A 6C2D              mov R22,R12
 017C                   .dbline 133
 017C 4881              ldd R20,y+0
 017E                   .dbline 134
 017E                   .dbline 111
 017E                   .dbline 111
 017E AFCF              rjmp L14
 0180                 X0:
 0180                   .dbline -2
 0180                 L5:
 0180 2196              adiw R28,1
 0182                   .dbline 0 ; func end
 0182 0895              ret
 0184                   .dbsym r dy 14 c
 0184                   .dbsym r dx 10 c
 0184                   .dbsym r oldY 20 c
 0184                   .dbsym r oldX 22 c
 0184                   .dbsym l y 0 c
 0184                   .dbsym r x 12 c
