
AVRASM ver. 1.54  C:\Studio+\Demos\AVR_Studio4\AT90S8515_Bounce\Bounce.asm Sat Apr 06 17:27:06 2002


         ; Bounce.asm
         ;
         ; Flash Studio+ & In-System-Debugger (ISD) "Bounce" demo.
         ; Use with any ATMEL AVR CPU that supports SRAM and an RS232
         ; port or with Flash 5in1 AVR Starter Kits for added features.
         
         ;.nolist
          .include "8515def.inc"					; Compiling for the AT90S8515
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number		:AVR000
         ;* File Name		:"8515def.inc"
         ;* Title		:Register/Bit Definitions for the AT90S8515
         ;* Date                 :99.01.28
         ;* Version              :1.30
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax		:+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail	:avr@atmel.com
         ;* Target MCU		:AT90S8515
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB		;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16		;output to PORTB
         ;*
         ;* in	r16,TIFR		;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0		;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set		;jump if set
         ;* ...				;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S8515
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH	=$3e
          .equ	SPL	=$3d
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
         
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	OCR0	=$31
         
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$25
          .equ	ICR1L	=$24
         
          .equ	WDTCR	=$21
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
         
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
         
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	=$0c
          .equ	USR	=$0b
          .equ	UCR	=$0a
          .equ	UBRR	=$09
          .equ	ACSR	=$08
         
         
         ;***** Bit Definitions
          .equ	INT1	=7
          .equ	INT0	=6
         
          .equ	INTF1	=7
          .equ	INTF0	=6
         
          .equ	TOIE1	=7
          .equ	OCIE1A	=6
          .equ	OCIE1B	=5
          .equ	TICIE1	=3
          .equ	TOIE0	=1
         
          .equ	TOV1	=7
          .equ	OCF1A	=6
          .equ	OCF1B	=5
          .equ	ICF1	=3
          .equ	TOV0	=1
         
          .equ	SRE	=7
          .equ	SRW	=6
          .equ	SE	=5
          .equ	SM	=4
          .equ	ISC11	=3
          .equ	ISC10	=2
          .equ	ISC01	=1
          .equ	ISC00	=0
         
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	PWM11	=1
          .equ	PWM10	=0
         
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC1	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
          .equ	WDDE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
          .equ	PA7	=7
          .equ	PA6	=6
          .equ	PA5	=5
          .equ	PA4	=4
          .equ	PA3	=3
          .equ	PA2	=2
          .equ	PA1	=1
          .equ	PA0	=0
         
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
          .equ	PC7	=7
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
          .equ	SPIF	=7
          .equ	WCOL	=6
         
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3
         
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
          .equ	ACD	=7
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND  =$25F	;Last On-Chip SRAM Location
          .equ	XRAMEND =$FFFF
          .equ	E2END	=$1FF
          .equ	FLASHEND=$FFF
         
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	INT1addr=$002	;External Interrupt1 Vector Address
          .equ	ICP1addr=$003	;Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$004	;Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$005	;Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$006	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$007	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$008	;SPI Interrupt Vector Address
          .equ	URXCaddr=$009	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$00a	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$00b	;UART Transmit Complete Interrupt Vector Address
          .equ	ACIaddr =$00c	;Analog Comparator Interrupt Vector Address
         ;.list
         
         ; ****** USER SETTINGS ******
         
         ; Clock frequency - set this to your clock frequency
          .equ FOSC = 3686400						; 3.6864Mhz
          
         ; Serial comms Baud rate - set this to your desired baud rate
          .equ BAUD = 115200
         
         ; ***** END USER SETTINGS *****
         
          .equ SIZEX = 16							; Size of bounce area
          .equ SIZEY = 8
         
          .def ballX = r1
          .def ballY = r2
          .def oldBallX = r3
          .def oldBallY = r4
          .def ballDX = r5
          .def ballDY = r6
         
          .dseg
          .org $60
          title:
000060      		.byte 2*SIZEX					; Title
          bounceArea:
000080      		.byte SIZEY*SIZEX				; Bounce area
         
          .cseg
          .org $0
000000 c07c      		rjmp main						; Reset Vector
         
         ; External Interrupt 0 is used by the ISD
         
          .cseg
          .org $2
000002 c07a      		rjmp main						; Unused Interrupt Vectors
000003 c079      		rjmp main
000004 c078      		rjmp main
000005 c077      		rjmp main
000006 c076      		rjmp main
000007 c075      		rjmp main
000008 c074      		rjmp main
000009 c073      		rjmp main
00000a c072      		rjmp main
00000b c071      		rjmp main
00000c c070      		rjmp main
         		
          .cseg
          titleText:
          		.db "   Flash Demo      AVR Bounce   "
00000d 2020
00000e 4620
00000f 616c
000010 6873
000011 4420
000012 6d65
000013 206f
000014 2020
000015 2020
000016 4120
000017 5256
000018 4220
000019 756f
00001a 636e
00001b 2065
00001c 2020
          message:
          		.db "                  THE WORLD'S      SMALLEST,       FASTEST,         NO-ICE,        IN-SYSTEM       DEBUGGER!                    "
00001d 2020
00001e 2020
00001f 2020
000020 2020
000021 2020
000022 2020
000023 2020
000024 2020
000025 2020
000026 4854
000027 2045
000028 4f57
000029 4c52
00002a 2744
00002b 2053
00002c 2020
00002d 2020
00002e 5320
00002f 414d
000030 4c4c
000031 5345
000032 2c54
000033 2020
000034 2020
000035 2020
000036 4620
000037 5341
000038 4554
000039 5453
00003a 202c
00003b 2020
00003c 2020
00003d 2020
00003e 2020
00003f 4f4e
000040 492d
000041 4543
000042 202c
000043 2020
000044 2020
000045 2020
000046 4920
000047 2d4e
000048 5953
000049 5453
00004a 4d45
00004b 2020
00004c 2020
00004d 2020
00004e 4420
00004f 4245
000050 4755
000051 4547
000052 2152
000053 2020
000054 2020
000055 2020
000056 2020
000057 2020
000058 2020
000059 2020
00005a 2020
00005b 2020
00005c 2020
         
          UART0_Init:
         
00005d 2788      		clr r24							; Disable while setting baud rate
00005e b98a      		out UCR, r24
00005f e081      		ldi r24, (FOSC/(16*BAUD))-1;
000060 b989      		out UBRR, r24					; Set baud rate
000061 e188      		ldi r24, (1<<RXEN)|(1<<TXEN)
000062 b98a      		out UCR, r24					; Enable Tx & Rx
000063 9508      		ret
         
          INT0_Init:
000064 9a8b      		sbi DDRD, 3
000065 9a92      		sbi PORTD, 2
000066 9508      		ret
         
          MakeLedRed:								; Turn on red LED
000067 b381      		in r24, DDRD
000068 7f87      		andi r24, $f7
000069 bb81      		out DDRD, r24
00006a 9508      		ret
         
          MakeLedGreen:							; Turn off red LED
00006b 9a8b      		sbi DDRD, 3
00006c 9508      		ret
         
          DrawBall:								; Draw the Ball
00006d e41f      		ldi r17, 'O'
00006e ff10      		sbrs r17, 0						; Skip next instruction
          EraseBall:
00006f e210      		ldi r17, ' '
000070 e8a0      		ldi XL, low(bounceArea)
000071 e0b0      		ldi XH, high(bounceArea)
000072 2d02      		mov r16, ballY
000073 2300      		tst r16
000074 f019      		breq DrawBall_MulX
          DrawBall_Mul:
000075 9650      		adiw XL, SIZEX
000076 950a      		dec r16
000077 f7e9      		brne DrawBall_Mul
          DrawBall_MulX:
000078 2700      		clr r16
000079 0da1      		add XL, ballX
00007a 1fb0      		adc XH, r16
00007b 931c      		st X, r17
00007c 9508      		ret
         
          main:
00007d e002      		ldi r16,0x02					; Put stack near top of SRAM (0x025F)
00007e bf0e      		out SPH,r16
00007f e50f      		ldi r16,0x5F
000080 bf0d      		out SPL,r16
         
000081 dfe2      		rcall INT0_Init					; Init Interrupt 0
000082 dfda      		rcall UART0_Init				; Init the UART
         
000083 b78b      		in r24, GIMSK					; Enable INT0 (AT90S8515)
000084 6480      		ori r24, 0x40
000085 bf8b      		out GIMSK, r24
         
000086 9478      		sei								; Enable interrupts
         
         										; Initialise Title
000087 e1ea      		ldi ZL, low(titleText*2)
000088 e0f0      		ldi ZH, high(titleText*2)
000089 e6a0      		ldi XL, low(title)
00008a e0b0      		ldi XH, high(title)
00008b e200      		ldi r16, 2*SIZEX
          WriteTitle:
00008c 95c8      		lpm
00008d 920d      		st X+, r0
00008e 9631      		adiw ZL, 1
00008f 950a      		dec r16
000090 f7d9      		brne WriteTitle
         										; Initialise Bounce area
000091 e3ea      		ldi ZL, low(message*2)
000092 e0f0      		ldi ZH, high(message*2)
000093 e8a0      		ldi XL, low(bounceArea)
000094 e0b0      		ldi XH, high(bounceArea)
000095 e800      		ldi r16, SIZEY*SIZEX
          WriteBounceArea:
000096 95c8      		lpm
000097 920d      		st X+, r0
000098 9631      		adiw ZL, 1
000099 950a      		dec r16
00009a f7d9      		brne WriteBounceArea
         
00009b dfcb      		rcall MakeLedRed				; Turn on Red LED
         
00009c 2411      		clr ballX						; Starting position (0, 3)
00009d e083      		ldi r24, 3
00009e 2e28      		mov ballY, r24
         
00009f dfcd      		rcall DrawBall					; Draw Ball
         
0000a0 2c31      		mov oldBallX, ballX
0000a1 2c42      		mov oldBallY, ballY
         
0000a2 2455      		clr ballDX						; Ball is moving right & down
0000a3 9453      		inc ballDX
0000a4 2466      		clr ballDY
0000a5 9463      		inc ballDY
         
          MainLoop:
         
0000a6 d029      		rcall SetBreakHere				; Set a Hard Breakpoint here
         
0000a7 e3ea      		ldi ZL, low(message*2)			; Restore message
0000a8 e0f0      		ldi ZH, high(message*2)
0000a9 e8a0      		ldi XL, low(bounceArea)
0000aa e0b0      		ldi XH, high(bounceArea)
0000ab 2d04      		mov r16, oldBallY
0000ac 2300      		tst r16
0000ad f021      		breq Restore_MulX
          Restore_Mul:
0000ae 9670      		adiw ZL, SIZEX
0000af 9650      		adiw XL, SIZEX
0000b0 950a      		dec r16
0000b1 f7e1      		brne Restore_Mul
          Restore_MulX:
0000b2 2700      		clr r16
0000b3 0de3      		add ZL, oldBallX
0000b4 1ff0      		adc ZH, r16
0000b5 0da3      		add XL, oldBallX
0000b6 1fb0      		adc XH, r16
0000b7 95c8      		lpm
0000b8 920c      		st X, r0
         
0000b9 0c15      		add ballX, ballDX				; Update ball's position
0000ba 0c26      		add ballY, ballDY
         
0000bb dfb1      		rcall DrawBall					; Draw the Ball
         
          TestBallX:
0000bc 2011      		tst ballX						; If ball is at left or right edge
0000bd f019      		breq BallOnXEdge
0000be 2d81      		mov r24, ballX
0000bf 308f      		cpi r24, SIZEX-1
0000c0 f411      		brne TestBallY
          BallOnXEdge:
0000c1 9451      		neg ballDX						; Change direction
0000c2 dfa8      		rcall MakeLedGreen
         		
          TestBallY:
0000c3 2022      		tst ballY						; If ball is at top or bottom edge
0000c4 f019      		breq BallOnYEdge
0000c5 2d82      		mov r24, ballY
0000c6 3087      		cpi r24, SIZEY-1
0000c7 f411      		brne SaveBallPos
          BallOnYEdge:
0000c8 9461      		neg ballDY						; Change direction
0000c9 df9d      		rcall MakeLedRed
         
          SaveBallPos:
0000ca 2c31      		mov oldBallX, ballX
0000cb 2c42      		mov oldBallY, ballY
         
0000cc cfd9      		rjmp MainLoop					; Loop forever
         
          .include "ISD16_AT90S8515.asm"			; ISD
         
         ; Filename: ISD16_AT90S8515.asm
         ; Version: 1.6 (13/3/2002)
         ; Copyright 2002 Flash Microsystems
         ; Modified from ISD15_ATmega103.asm (CB 19/02/2002)
         ; Moved "SetBreakHere" into the ISD signature (CB 7/3/2002)
         ; Removed "to PC" echoes to speed up "PC only" mode (CB 13/3/2002)
         ; Info-Block has a switch for Custom SRAM & EEPROM sizes (CB 13/3/2002)
         ; SRAM & EEPROM addresses are now 24 bit (CB 13/3/2002)
         ; Request codes are values now, not bit flags (CB 13/3/2002)
         
         ;******************************************************************************
         ;* AVR Studio+ ISD - THE WORLD'S SMALLEST, FASTEST, NO-ICE IN-SYSTEM DEBUGGER *
         ;******************************************************************************
         
         ; Studio+ In-System-Debugger (ISD) for use in the Atmel AT90S8515.
         
         ; ** LICENSE AGREEMENT **
         ; This program is made available FREE of CHARGE, providing it is used ONLY
         ; with the Flash PC WINDOWS STUDIO+ Software and in accordance with
         ; the license agreement terms of that software (refer to www.flash.co.uk web
         ; site for further details). You may also try out this program with a standard
         ; Windows ASCII Terminal Program.
         ; You may modify this program only for the purposes of merging-in your own
         ; Interrupt Routine as indicated, changing the AVR CPU program parameters,
         ; you may also remove sections of this program where indicated
         ; in order to reduce its size, any other user modifications are
         ; NOT permitted without the written consent of the Copyright Owner.
         ; Flash may offer variants of this program including a version which
         ; can simulate a UART via any two spare I/O pins of the AVR CPU. This license
         ; agreement also applies to any variants of this program which offer a
         ; SIMULATED UART.
         ; This program is protected by International Copyright Laws. 
         
          .equ VERSION = 0x16		; ISD version (1.6)
         
          .include "ISDAVR.inc"	; CPU definitions
         ; ISDAVR.inc
         ; Definitions for the AVR ISDs
         ; These ID values *MUST* match those in the Studio+ AVR DLL.
         
          .equ FAMILY_ATMELAVR = 1
         
          .equ CHIP_AT90S1200 = 1
          .equ CHIP_AT90S2313 = 2
          .equ CHIP_AT90S2323 = 3
          .equ CHIP_AT90S2343 = 4
          .equ CHIP_AT90S2333 = 5
          .equ CHIP_AT90S4433 = 6
          .equ CHIP_AT90S4414 = 7
          .equ CHIP_AT90S4434 = 8
          .equ CHIP_AT90C8534 = 9
          .equ CHIP_AT90S8515 = 10
          .equ CHIP_AT90S8535 = 11
          .equ CHIP_ATMEGA8 = 12
          .equ CHIP_ATMEGA16 = 13
          .equ CHIP_ATMEGA161 = 14
          .equ CHIP_ATMEGA163 = 15
          .equ CHIP_ATMEGA323 = 16
          .equ CHIP_ATMEGA64 = 17
          .equ CHIP_ATMEGA103 = 18
          .equ CHIP_ATMEGA128 = 19
          .equ CHIP_ATTINY11 = 20
          .equ CHIP_ATTINY12 = 21
          .equ CHIP_ATTINY15 = 22
          .equ CHIP_ATTINY22 = 23
          .equ CHIP_ATTINY28 = 24
         
         ; ****** Customizable settings START ******
         ; Adjust these settings to tailor the ISD for your target CPU.
         
          .equ CUSTOM_MEMORY = 0	; 1: Use Custom SRAMSIZE & EEPROMSIZE below
         						; 0: Use default memory sizes for CPU
          .equ SRAMSIZE = 512		; Size of custom SRAM
          .equ EEPROMSIZE = 512	; Size of custom EEPROM
         ; ****** Customizable settings END ******
         
          .equ INFOBLOCKSIZE = 6+(6*CUSTOM_MEMORY) ; Info-Block size
         
          .equ STACKBYTES = 10	; Number of stack bytes needed by this debugger
         
         ; ** CPU RESOURCES REQUIRED **
         ; Stack Space: 10 Bytes (Included in SP value displayed).
         ; Flash Memory: 374 bytes.
         ; The UART: The UART is used to Tx/Rx data to/from Studio+ running on your PC.
         
         ; ** USER'S INTERRUPT ROUTINE **
         ; Using Highest Priority Maskable Interrupt eg INT0. (Pin PD2 on the AT90S8515)
         ; The User can merge in their own ISR by placing the label "INT0_ISR::" just
         ; before it and a "ret" instruction to exit it.  The User's ISR should only
         ; push rigisters it uses onto the stack.  Also, they should put a 220 ohm
         ; resistor in series with the INT0 pin of the AVR CPU.
         ; To add an ISR to this file, comment out the call instruction where
         ; indicated and place the ISR code between the markers:
         ;    ****** Custom ISR ******
         ; To use INT0 for your own application, put a 220 ohm resistor in series
         ; with the INT0 pin of the AVR CPU.
         ; To make it easy to add an ISR, all the code labels defined within
         ; the ISD are prefixed with "isd_". To avoid conflicts, make sure the
         ; labels in the ISR start with something else.
         
         ; ** CPU STATUS TRANSMISSION **
         ; CPU Status Information is transmitted as follows:
         ;	ISD -> PC  'D'
         ;	If INFOBLOCK is required:
         ;		PC  -> ISD 'I'
         ;		ISD -> PC  <INFOBLOCK, see below>
         ;	PC  -> ISD <STUDIO+ REQUEST CODE, see below>
         ;		See "STUDIO+ REQUEST CODES" for info format.
         ;	ISD -> PC  'E' (End Condition)
         ;	PC  -> ISD <Continue Code, see below>
         ;	If more data is required (Continue Code = 'R'):
         ;		Start again!
          
         ; ** INFOBLOCK FORMAT **
         ;    Size (number of bytes inc. this one)
         ;    ISD Version
         ;    IC family code
         ;    IC code
         ;    Custom memory flag (1 = custom memory sizes follow)
         ;       SRAM size (Low byte)
         ;       SRAM size (Mid byte)
         ;       SRAM size (High byte)
         ;       EEPROM size (Low byte)
         ;       EEPROM size (Mid byte)
         ;       EEPROM size (High byte)
         ;    Number of stack bytes needed by debugger
         
         ; ** STUDIO+ REQUEST CODES **
          .equ SENDPC = 0			; Get the PC
         		   	 			; ISD Sends PC
          .equ SENDREGISTERS = 1	; Get the Registers
         						; ISD Sends Registers
          .equ SENDSFRS = 2		; Get SFRs
         						; ISD Sends SFRs (SRAM 0x20->0x5F)
          .equ SENDSRAM = 3		; Get SRAM
         			   			; PC Sends SRAMSTARTLOW (ISD echos)
         						; PC Sends SRAMSTARTHIGH (ISD echos)
         						; PC Sends SRAMENDLOW (ISD echos)
         						; PC Sends SRAMENDHIGH (ISD echos)
         						; ISD Sends SRAM DATA
          .equ SENDEEPROM = 4		; Get EEPROM
         						; PC Sends EEPROMLOW (ISD echos)
         						; PC Sends EEPROMHIGH (ISD echos) 
         						; PC Sends EEPROMENDLOW (ISD echos)
         						; PC Sends EEPROMENDHIGH (ISD echos)
         						; ISD Sends EEPROM DATA
         
         ; ** CONTINUE CODES **
         ;	'S' = Single Step
         ;	'C' = Continue to next breakpoint
         ;	'R' = Repeat (send more data)
         
          .cseg
          isd_ISD:
0000cd c005      		rjmp isd_PreserveRegs ; Bypass ISD Signature
          .db 'I','S','D',0		; ISD Signature,
0000ce 5349
0000cf 0044
         						; *MUST* be here (2 bytes from the
         						; beginning of the ISD routine)
         
         						; The Set Breakpoint Routine
         						; Call it to set a hard breakpoint.
          SetBreakHere:
0000d0 9a8a      		sbi DDRD, 2		; Set INT0 data direction to output
0000d1 9892      		cbi PORTD, 2	; Force INT0 low, cause an interrupt
0000d2 9508      		ret
         
          isd_PreserveRegs:
         						; PC pushed automatically
0000d3 938f      		push r24		; Preserve r24
0000d4 939f      		push r25		; Preserve r25
0000d5 93af      		push r26		; Preserve X
0000d6 93bf      		push r27
0000d7 93cf      		push r28		; Preserve Y
0000d8 93df      		push r29
0000d9 93ef      		push r30		; Preserve Z
0000da 93ff      		push r31
0000db b78f      		in r24, SREG	; Preserve SREG in r24
         
         ; Check the cause of the interrupt (INT0),
         ; Was it external (user) or internal (code breakpoint)?
         						; AT90S8515: Check the port
0000dc 9b92      		sbis PORTD, 2	; Skip if bit is set, user's interrupt
0000dd c001      		rjmp isd_DebugRoutine ; Jump to start of this debug routine
         
         ;    ****** Custom ISR ******
         
         ;		rcall INT0_ISR	; Call User's ISR
         						; Comment this line out if you're not using INT0
         						; or when adding an ISR to this file here.
         
         						; Add ISR here!!
         
0000de c096      		rjmp isd_RestoreStack ; Restore the stack & return from interrupt
         
         ;    ****** Custom ISR ******
         
          isd_DebugRoutine:		; Flash Microsystems ISD debugger
0000df e4c4      		ldi r28, 'D'
0000e0 d09f      		rcall isd_Put28	; Send "D"
          isd_WaitForPC:
0000e1 9b5f      		sbis USR, 7		; Wait for response from PC
0000e2 cffe      		rjmp isd_WaitForPC
         		
0000e3 9b5c      		sbis USR, 4		; Check for framing error
0000e4 c002      		rjmp isd_PCAcked ; No error, send data
0000e5 b1dc      		in r29, UDR		; read UDR to clear RXC
0000e6 cff8      		rjmp isd_DebugRoutine ; Try again		
         				
          isd_PCAcked:
0000e7 b1dc      		in r29, UDR		; Get Studio+ request code
0000e8 34d9      		cpi r29, 'I'	; Check if Studio+ wants an INFOBLOCK
0000e9 f469      		brne isd_TryJustPC ; If not, bypass INFOBLOCK output
         
0000ea e0c6      		ldi r28, INFOBLOCKSIZE
0000eb d094      		rcall isd_Put28	; Send Info-Block size
0000ec e1c6      		ldi r28, VERSION
0000ed d092      		rcall isd_Put28	; Send ISD version
0000ee e0c1      		ldi r28, FAMILY_ATMELAVR
0000ef d090      		rcall isd_Put28	; Send IC family code
0000f0 e0ca      		ldi r28, CHIP_AT90S8515
0000f1 d08e      		rcall isd_Put28	; Send CPU code
0000f2 e0c0      		ldi r28, CUSTOM_MEMORY
0000f3 d08c      		rcall isd_Put28	; Send "Custom Memory" flag
         
         ; ** Comment out this section if you're using the default memory sizes
         ;		ldi r28, SRAMSIZE&0xff
         ;		rcall isd_Put28
         ;		ldi r28, (SRAMSIZE>>8)&0xff
         ;		rcall isd_Put28
         ;		ldi r28, SRAMSIZE>>16
         ;		rcall isd_Put28	; Send SRAM size
         ;		ldi r28, EEPROMSIZE&0xff
         ;		rcall isd_Put28
         ;		ldi r28, (EEPROMSIZE>>8)&0xff
         ;		rcall isd_Put28
         ;		ldi r28, EEPROMSIZE>>16
         ;		rcall isd_Put28	; Send EEPROM size
         ; ** Section end
         
0000f4 e0ca      		ldi r28, STACKBYTES
0000f5 d08a      		rcall isd_Put28	; Send number of stack bytes used 
0000f6 b1dc      		in r29, UDR		; Read the request code	
         
          isd_TryJustPC:
0000f7 94e8      		clt				; Clear T Bit (send PC flag)
0000f8 30d0      		cpi r29, SENDPC	; If other data is wanted
0000f9 f411      		brne isd_TryRegs ; Don't set the PC flag
0000fa 9468      		set				; Set the PC flag
0000fb c002      		rjmp isd_SendRegs ; Send PC only
         
          isd_TryRegs:
0000fc 30d1      		cpi r29, SENDREGISTERS	; Does Studio+ want the Registers?
0000fd f4d1      		brne isd_TrySFRs ; If not, try SRAM
         
          isd_SendRegs:
0000fe b7ad      		in r26, SPL		; Set the pointer
0000ff b7be      		in r27, SPH
000100 9611      		adiw r26, 1
         
000101 e0f8      		ldi r31, 8		; Sending (or skipping for PC only) 8 bytes
          isd_SendReg1:
000102 f00e      		brts isd_SkipReg ; If sending the registers
000103 d07b      		rcall isd_PutXP	; Send the registers on the stack (R31->R24)
          isd_SkipReg:
000104 f40e      		brtc isd_NextReg ; If only sending the PC
000105 91cd      		ld r28, X+		; Get the pointer ready for sending the PC
          isd_NextReg:
000106 95fa      		dec r31
000107 30f0      		cpi r31, 0		; Done yet?
000108 f7c9      		brne isd_SendReg1 ; If not, send the next register
000109 f05e      		brts isd_SendPC	; branch if T bit SET to output PC Only
         						; Send Registers R23 to R0
00010a e1e8      		ldi	r30, 0x18	; Z points to R24 
          isd_SendReg2:
00010b 91c2      		ld	r28, -Z		; Get next register
00010c d073      		rcall isd_Put28	; Send it
00010d 13ef      		cpse r30, r31	; Done ?
00010e cffc      		rjmp isd_SendReg2
         		
00010f 2fc8      		mov r28, r24	; Get SREG
000110 d06f      		rcall isd_Put28	; Send SREG
         
000111 b7cd      		in	r28, SPL
000112 d06d      		rcall isd_Put28	; Send SPL
000113 b7ce      		in	r28, SPH
000114 d06b      		rcall isd_Put28	; Send SPH
         
          isd_SendPC:
000115 d069      		rcall isd_PutXP	; Send PC (High byte), X = SP+1
000116 d068      		rcall isd_PutXP	; Send PC (Low byte),  X = SP+2
         		
000117 c04e      		rjmp isd_End	; Go to End Condition
         
          isd_TrySFRs:
000118 30d2      		cpi r29, SENDSFRS ; Does Studio+ want the SFRs?
000119 f439      		brne isd_TrySram ; If not, try SRAM
         						; Send the SFRs
00011a e2a0      		ldi r26, 0x20	; Start of SFR block
00011b e0b0      		ldi r27, 0x00
00011c e090      		ldi r25, 0x00
00011d e6e0      		ldi r30, 0x60	; End of SFR block
00011e e0f0      		ldi r31, 0x00
00011f e0d0      		ldi r29, 0x00
000120 c014      		rjmp isd_SendSram
         
          isd_TrySram:
000121 30d3      		cpi r29, SENDSRAM ; Does Studio+ want the SRAM?
000122 f511      		brne isd_TryEeprom ; If not, try EEPROM
         						; Send SRAM
000123 d060      		rcall isd_Get28	; Read from PC SRAM start address (lo)
000124 2fac      		mov r26, r28	; Copy r28 to r26
000125 d05a      		rcall isd_Put28	; Echo back to PC
000126 d05d      		rcall isd_Get28	; Read from PC SRAM start address (mid)
000127 2fbc      		mov r27, r28	; Copy r28 to r27
000128 d057      		rcall isd_Put28	; Echo back to PC
000129 d05a      		rcall isd_Get28	; Read from PC SRAM start address (hi)
00012a 2f9c      		mov r25, r28	; Copy r28 to r25
00012b d054      		rcall isd_Put28	; Echo back to PC
00012c d057      		rcall isd_Get28	; Read from PC SRAM end address (lo)
00012d 2fec      		mov r30, r28	; Copy r28 to r30
00012e d051      		rcall isd_Put28	; Echo back to PC
00012f d054      		rcall isd_Get28	; Read from PC SRAM end address (mid)
000130 2ffc      		mov r31, r28	; Copy r28 to r31
000131 d04e      		rcall isd_Put28	; Echo back to PC
000132 d051      		rcall isd_Get28	; Read from PC SRAM end address (hi)
000133 2fdc      		mov r29, r28	; Copy r28 to r29
000134 d04b      		rcall isd_Put28	; Echo back to PC
          isd_SendSram:
000135 32ac      		cpi r26, 0x2C	; Cannot read UDR because we are using it!!
000136 f431      		brne isd_NextSram
000137 30b0      		cpi r27, 0x00
000138 f421      		brne isd_NextSram
000139 e3cf      		ldi r28, '?'	
00013a d045      		rcall isd_Put28	; Send a '?' character in place of UDR
00013b 95a3      		inc r26
00013c fdb0      		sbrc r27, 0		; Skip (Bit 0 will always be clear here!!)
          isd_NextSram:
00013d d041      		rcall isd_PutXP	; Send next SRAM byte
00013e 17ae      		cp r26, r30		; If not done
00013f f7a9      		brne isd_SendSram ; Send next byte
000140 17bf      		cp r27, r31		; If not done
000141 f799      		brne isd_SendSram ; Send next byte
000142 179d      		cp r25, r29		; If not done
000143 f789      		brne isd_SendSram ; Send next byte
         		
000144 c021      		rjmp isd_End	; Go to End Condition
         
          isd_TryEeprom:
000145 30d4      		cpi r29, SENDEEPROM ; Does Studio+ want EEPROM?
000146 f4f9      		brne isd_End	; If not, done!!
         						; Send EEPROM
000147 d03c      		rcall isd_Get28	; Read from PC EEPROM start address (lo)
000148 2fac      		mov r26, r28	; Copy r28 to r26
000149 d036      		rcall isd_Put28	; Echo back to PC
00014a d039      		rcall isd_Get28	; Read from PC EEPROM start address (mid)
00014b 2fbc      		mov r27, r28	; Copy r28 to r27
00014c d033      		rcall isd_Put28	; Echo back to PC
00014d d036      		rcall isd_Get28	; Read from PC EEPROM start address (hi)
00014e 2f9c      		mov r25, r28	; Copy r28 to r25
00014f d030      		rcall isd_Put28	; Echo back to PC
000150 d033      		rcall isd_Get28	; Read from PC EEPROM end address (lo)
000151 2fec      		mov r30, r28	; Copy r28 to r30
000152 d02d      		rcall isd_Put28	; Echo back to PC
000153 d030      		rcall isd_Get28	; Read from PC EEPROM end address (mid)
000154 2ffc      		mov r31, r28	; Copy r28 to r31
000155 d02a      		rcall isd_Put28	; Echo back to PC
000156 d02d      		rcall isd_Get28	; Read from PC EEPROM end address (hi)
000157 2fdc      		mov r29, r28	; Copy r28 to r29
000158 d027      		rcall isd_Put28	; Echo back to PC
          isd_SendEeprom:
000159 bbaf      		out	EEARH, r26
00015a bbbe      		out	EEARL, r27	; EEPROM read Address
00015b 9ae0      		sbi	EECR, EERE	; Read EEPROM
00015c 98e0      		cbi	EECR, EERE
00015d b3cd      		in	r28, EEDR	; Get EEPROM value
00015e d021      		rcall isd_Put28	; Send it
00015f 9611      		adiw r26,1
000160 17ae      		cp r26, r30		; If not done
000161 f7b9      		brne isd_SendEeprom ; Send next byte
000162 17bf      		cp r27, r31		; If not done
000163 f7a9      		brne isd_SendEeprom ; Send next byte
000164 179d      		cp r25, r29		; If not done
000165 f799      		brne isd_SendEeprom ; Send next byte
         
          isd_End:				; End Condition
         						; Send 'E' to Studio+
         						; then wait for continue code: 'S', 'C' or 'R' 
000166 e4c5      		ldi r28, 'E'
000167 d018      		rcall isd_Put28	; Send 'E'
          isd_WaitForPC2:
000168 9b5f      		sbis USR, 7		; Wait for Studio+ to send continue code
000169 cffe      		rjmp isd_WaitForPC2   
00016a 9b5c      		sbis USR, 4		; If no framing error
00016b c002      		rjmp isd_GotContCode ; Continue
00016c b1cc      		in r28, UDR		; Read UDR to clear RXC
00016d cff8      		rjmp isd_End	; Try again		
          isd_GotContCode:
00016e b1cc      		in r28, UDR		; Continue Code
00016f ffc0      		sbrs r28, 0		; If Studio+ wants more data (sent an "R")
000170 cf6e      		rjmp isd_DebugRoutine ; Loop back and repeat
000171 fdc4      		sbrc r28, 4		; Here for "C" and "S" Skip if "C"
000172 c002      		rjmp isd_RestoreStack ; Jump if "S" Single-Step
         						; Continue to next break
         							
000173 9a92      		sbi PORTD, 2	; Here for CONT Turn on INT0's Pull-Up
000174 988a      		cbi	DDRD, 2		; Set data direction to input
         
          isd_RestoreStack:
000175 bf8f      		out SREG, r24	; Restore SREG
000176 91ff      		pop r31			; Restore preserved registers
000177 91ef      		pop r30
000178 91df      		pop r29
000179 91cf      		pop r28
00017a 91bf      		pop r27
00017b 91af      		pop r26
00017c 919f      		pop r25
00017d 918f      		pop r24
00017e 9518      		reti			; Return from interrupt
         
         						; Send Data Subroutines
          isd_PutXP:
00017f 91cd      		ld r28, X+		; Get data via pointer (X)
          isd_Put28:
000180 b9cc      		out UDR,r28		; Send it 
          isd_WaitToSend:
000181 9b5d      		sbis USR,5		; Wait for it to send
000182 cffe       		rjmp isd_WaitToSend
000183 9508      		ret				; Done
         
          isd_Get28:
000184 9b5f      		sbis USR, 7		; Wait for the PC to send
000185 cffe      		rjmp isd_Get28
000186 b1cc      		in r28, UDR		; Read from PC
000187 9508      		ret				; Done
         
          .cseg					; External Interrupt 0 Vector
          .org $1
000001 c0cb      	rjmp isd_ISD
         		
          .exit
         
          .exit

Assembly complete with no errors.
