                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.2.0 #8008 (Jul  6 2012) (MINGW32)
                              4 ; This file was generated Tue May 28 10:02:43 2013
                              5 ;--------------------------------------------------------
                              6 	.module screen
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _ScreenDemo
                             14 	.globl _MoveCursor
                             15 	.globl _ClearScreen
                             16 	.globl _WaitKeypressed
                             17 	.globl _puts
                             18 	.globl _CX80_System_FNC_EntryPoint
                             19 ;--------------------------------------------------------
                             20 ; special function registers
                             21 ;--------------------------------------------------------
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DATA
   0000                      26 _CX80_System_FNC_EntryPoint::
   0000                      27 	.ds 2
                             28 ;--------------------------------------------------------
                             29 ; absolute external ram data
                             30 ;--------------------------------------------------------
                             31 	.area _DABS (ABS)
                             32 ;--------------------------------------------------------
                             33 ; global & static initialisations
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _GSINIT
                             37 	.area _GSFINAL
                             38 	.area _GSINIT
                             39 ;--------------------------------------------------------
                             40 ; Home
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _HOME
                             44 ;--------------------------------------------------------
                             45 ; code
                             46 ;--------------------------------------------------------
                             47 	.area _CODE
                             48 ;screen.c:29: void WaitKeypressed(void)
                             49 ;	---------------------------------
                             50 ; Function WaitKeypressed
                             51 ; ---------------------------------
   0000                      52 _WaitKeypressed_start::
   0000                      53 _WaitKeypressed:
                             54 ;screen.c:32: *CX80_System_FNC_EntryPoint = CX80_FNC_WAIT_FOR_KEYPRESSED;
   0000 2Ar00s00             55 	ld	hl,(_CX80_System_FNC_EntryPoint)
   0003 36 24                56 	ld	(hl),#0x24
                             57 ;screen.c:35: CX80_DO_SYSTEM_CALL;
   0005 CD 07 00             58 	call #0x0007
   0008 C9                   59 	ret
   0009                      60 _WaitKeypressed_end::
                             61 ;screen.c:38: void ClearScreen(void)
                             62 ;	---------------------------------
                             63 ; Function ClearScreen
                             64 ; ---------------------------------
   0009                      65 _ClearScreen_start::
   0009                      66 _ClearScreen:
                             67 ;screen.c:41: *CX80_System_FNC_EntryPoint = CX80_FNC_CLEAR_SCREEN;
   0009 2Ar00s00             68 	ld	hl,(_CX80_System_FNC_EntryPoint)
   000C 36 06                69 	ld	(hl),#0x06
                             70 ;screen.c:44: CX80_DO_SYSTEM_CALL;
   000E CD 07 00             71 	call #0x0007
   0011 C9                   72 	ret
   0012                      73 _ClearScreen_end::
                             74 ;screen.c:47: void MoveCursor(char row, char column)
                             75 ;	---------------------------------
                             76 ; Function MoveCursor
                             77 ; ---------------------------------
   0012                      78 _MoveCursor_start::
   0012                      79 _MoveCursor:
                             80 ;screen.c:55: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = row;
   0012 ED 5Br00s00          81 	ld	de,(_CX80_System_FNC_EntryPoint)
   0016 13                   82 	inc	de
   0017 21 02 00             83 	ld	hl, #2+0
   001A 39                   84 	add	hl, sp
   001B 7E                   85 	ld	a, (hl)
   001C 12                   86 	ld	(de),a
                             87 ;screen.c:56: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1H_ADDR) = column;
   001D ED 5Br00s00          88 	ld	de,(_CX80_System_FNC_EntryPoint)
   0021 13                   89 	inc	de
   0022 13                   90 	inc	de
   0023 FD 21 03 00          91 	ld	iy,#3
   0027 FD 39                92 	add	iy,sp
   0029 FD 7E 00             93 	ld	a,0 (iy)
   002C 12                   94 	ld	(de),a
                             95 ;screen.c:59: *CX80_System_FNC_EntryPoint = CX80_FNC_MOVE_CURSOR;
   002D 2Ar00s00             96 	ld	hl,(_CX80_System_FNC_EntryPoint)
   0030 36 0B                97 	ld	(hl),#0x0B
                             98 ;screen.c:62: CX80_DO_SYSTEM_CALL;
   0032 CD 07 00             99 	call #0x0007
   0035 C9                  100 	ret
   0036                     101 _MoveCursor_end::
                            102 ;screen.c:65: void ScreenDemo(void)
                            103 ;	---------------------------------
                            104 ; Function ScreenDemo
                            105 ; ---------------------------------
   0036                     106 _ScreenDemo_start::
   0036                     107 _ScreenDemo:
                            108 ;screen.c:67: ClearScreen();
   0036 CDr09s00            109 	call	_ClearScreen
                            110 ;screen.c:69: puts("Move cursor to 18, 14\n\r");
   0039 21r71s01            111 	ld	hl,#__str_0
   003C E5                  112 	push	hl
   003D CDr00s00            113 	call	_puts
                            114 ;screen.c:70: puts("Press key...\n\r"); 
   0040 21r89s01            115 	ld	hl, #__str_1
   0043 E3                  116 	ex	(sp),hl
   0044 CDr00s00            117 	call	_puts
                            118 ;screen.c:72: MoveCursor(14, 18);
   0047 21 0E 12            119 	ld	hl, #0x120E
   004A E3                  120 	ex	(sp),hl
   004B CDr12s00            121 	call	_MoveCursor
   004E F1                  122 	pop	af
                            123 ;screen.c:74: WaitKeypressed();
   004F CDr00s00            124 	call	_WaitKeypressed
                            125 ;screen.c:76: ClearScreen();
   0052 CDr09s00            126 	call	_ClearScreen
                            127 ;screen.c:77: puts("Move cursor to home\n\r");
   0055 21r98s01            128 	ld	hl,#__str_2
   0058 E5                  129 	push	hl
   0059 CDr00s00            130 	call	_puts
                            131 ;screen.c:78: puts("Press key...\n\r");
   005C 21r89s01            132 	ld	hl, #__str_1
   005F E3                  133 	ex	(sp),hl
   0060 CDr00s00            134 	call	_puts
   0063 F1                  135 	pop	af
                            136 ;screen.c:81: *CX80_System_FNC_EntryPoint = CX80_FNC_CURSOR_HOME;
   0064 2Ar00s00            137 	ld	hl,(_CX80_System_FNC_EntryPoint)
   0067 36 07               138 	ld	(hl),#0x07
                            139 ;screen.c:84: CX80_DO_SYSTEM_CALL;
   0069 CD 07 00            140 	call #0x0007
                            141 ;screen.c:86: WaitKeypressed();
   006C CDr00s00            142 	call	_WaitKeypressed
                            143 ;screen.c:88: ClearScreen();
   006F CDr09s00            144 	call	_ClearScreen
                            145 ;screen.c:89: puts("Cursor in block shape\n\r");
   0072 21rAEs01            146 	ld	hl,#__str_3
   0075 E5                  147 	push	hl
   0076 CDr00s00            148 	call	_puts
                            149 ;screen.c:90: puts("Press key...\n\r");
   0079 21r89s01            150 	ld	hl, #__str_1
   007C E3                  151 	ex	(sp),hl
   007D CDr00s00            152 	call	_puts
   0080 F1                  153 	pop	af
                            154 ;screen.c:93: *CX80_System_FNC_EntryPoint = CX80_FNC_BLOCK_CURSOR;
   0081 2Ar00s00            155 	ld	hl,(_CX80_System_FNC_EntryPoint)
   0084 36 14               156 	ld	(hl),#0x14
                            157 ;screen.c:96: CX80_DO_SYSTEM_CALL;
   0086 CD 07 00            158 	call #0x0007
                            159 ;screen.c:98: WaitKeypressed();
   0089 CDr00s00            160 	call	_WaitKeypressed
                            161 ;screen.c:100: ClearScreen();
   008C CDr09s00            162 	call	_ClearScreen
                            163 ;screen.c:101: puts("Cursor in underline shape\n\r");
   008F 21rC6s01            164 	ld	hl,#__str_4
   0092 E5                  165 	push	hl
   0093 CDr00s00            166 	call	_puts
                            167 ;screen.c:102: puts("Press key...\n\r");
   0096 21r89s01            168 	ld	hl, #__str_1
   0099 E3                  169 	ex	(sp),hl
   009A CDr00s00            170 	call	_puts
   009D F1                  171 	pop	af
                            172 ;screen.c:105: *CX80_System_FNC_EntryPoint = CX80_FNC_UNDERLINE_CURSOR;
   009E 2Ar00s00            173 	ld	hl,(_CX80_System_FNC_EntryPoint)
   00A1 36 15               174 	ld	(hl),#0x15
                            175 ;screen.c:108: CX80_DO_SYSTEM_CALL;
   00A3 CD 07 00            176 	call #0x0007
                            177 ;screen.c:110: WaitKeypressed();
   00A6 CDr00s00            178 	call	_WaitKeypressed
                            179 ;screen.c:112: ClearScreen();
   00A9 CDr09s00            180 	call	_ClearScreen
                            181 ;screen.c:113: puts("Hidden the cursor\n\r");
   00AC 21rE2s01            182 	ld	hl,#__str_5
   00AF E5                  183 	push	hl
   00B0 CDr00s00            184 	call	_puts
                            185 ;screen.c:114: puts("Press key...\n\r");
   00B3 21r89s01            186 	ld	hl, #__str_1
   00B6 E3                  187 	ex	(sp),hl
   00B7 CDr00s00            188 	call	_puts
   00BA F1                  189 	pop	af
                            190 ;screen.c:117: *CX80_System_FNC_EntryPoint = CX80_FNC_CURSOR_SHOW;
   00BB 2Ar00s00            191 	ld	hl,(_CX80_System_FNC_EntryPoint)
   00BE 36 0E               192 	ld	(hl),#0x0E
                            193 ;screen.c:118: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = 0;
   00C0 ED 5Br00s00         194 	ld	de,(_CX80_System_FNC_EntryPoint)
   00C4 13                  195 	inc	de
   00C5 3E 00               196 	ld	a,#0x00
   00C7 12                  197 	ld	(de),a
                            198 ;screen.c:121: CX80_DO_SYSTEM_CALL;
   00C8 CD 07 00            199 	call #0x0007
                            200 ;screen.c:123: WaitKeypressed();
   00CB CDr00s00            201 	call	_WaitKeypressed
                            202 ;screen.c:125: ClearScreen();
   00CE CDr09s00            203 	call	_ClearScreen
                            204 ;screen.c:126: puts("Show the cursor\n\r");
   00D1 21rF6s01            205 	ld	hl,#__str_6
   00D4 E5                  206 	push	hl
   00D5 CDr00s00            207 	call	_puts
                            208 ;screen.c:127: puts("Press key...\n\r");
   00D8 21r89s01            209 	ld	hl, #__str_1
   00DB E3                  210 	ex	(sp),hl
   00DC CDr00s00            211 	call	_puts
   00DF F1                  212 	pop	af
                            213 ;screen.c:130: *CX80_System_FNC_EntryPoint = CX80_FNC_CURSOR_SHOW;
   00E0 2Ar00s00            214 	ld	hl,(_CX80_System_FNC_EntryPoint)
   00E3 36 0E               215 	ld	(hl),#0x0E
                            216 ;screen.c:131: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = 1;
   00E5 ED 5Br00s00         217 	ld	de,(_CX80_System_FNC_EntryPoint)
   00E9 13                  218 	inc	de
   00EA 3E 01               219 	ld	a,#0x01
   00EC 12                  220 	ld	(de),a
                            221 ;screen.c:134: CX80_DO_SYSTEM_CALL;
   00ED CD 07 00            222 	call #0x0007
                            223 ;screen.c:136: WaitKeypressed();
   00F0 CDr00s00            224 	call	_WaitKeypressed
                            225 ;screen.c:138: ClearScreen();
   00F3 CDr09s00            226 	call	_ClearScreen
                            227 ;screen.c:139: puts("Change line dimension\n\r");
   00F6 21r08s02            228 	ld	hl,#__str_7
   00F9 E5                  229 	push	hl
   00FA CDr00s00            230 	call	_puts
                            231 ;screen.c:140: puts("Press key...\n\r");
   00FD 21r89s01            232 	ld	hl, #__str_1
   0100 E3                  233 	ex	(sp),hl
   0101 CDr00s00            234 	call	_puts
                            235 ;screen.c:142: MoveCursor(14, 0);
   0104 21 0E 00            236 	ld	hl, #0x000E
   0107 E3                  237 	ex	(sp),hl
   0108 CDr12s00            238 	call	_MoveCursor
   010B F1                  239 	pop	af
                            240 ;screen.c:145: *CX80_System_FNC_EntryPoint = CX80_FNC_SET_LINE_DIMENSION;
   010C 2Ar00s00            241 	ld	hl,(_CX80_System_FNC_EntryPoint)
   010F 36 0C               242 	ld	(hl),#0x0C
                            243 ;screen.c:146: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = '1';
   0111 ED 5Br00s00         244 	ld	de,(_CX80_System_FNC_EntryPoint)
   0115 13                  245 	inc	de
   0116 3E 31               246 	ld	a,#0x31
   0118 12                  247 	ld	(de),a
                            248 ;screen.c:149: CX80_DO_SYSTEM_CALL;
   0119 CD 07 00            249 	call #0x0007
                            250 ;screen.c:151: puts("NEW LINE");
   011C 21r20s02            251 	ld	hl,#__str_8
   011F E5                  252 	push	hl
   0120 CDr00s00            253 	call	_puts
   0123 F1                  254 	pop	af
                            255 ;screen.c:153: WaitKeypressed();
   0124 CDr00s00            256 	call	_WaitKeypressed
                            257 ;screen.c:155: ClearScreen();
   0127 CDr09s00            258 	call	_ClearScreen
                            259 ;screen.c:156: puts("Invert video signal\n\r");
   012A 21r29s02            260 	ld	hl,#__str_9
   012D E5                  261 	push	hl
   012E CDr00s00            262 	call	_puts
                            263 ;screen.c:157: puts("Press key...\n\r");
   0131 21r89s01            264 	ld	hl, #__str_1
   0134 E3                  265 	ex	(sp),hl
   0135 CDr00s00            266 	call	_puts
   0138 F1                  267 	pop	af
                            268 ;screen.c:160: *CX80_System_FNC_EntryPoint = CX80_FNC_INVERT_VIDEO_OUTPUT;
   0139 2Ar00s00            269 	ld	hl,(_CX80_System_FNC_EntryPoint)
   013C 36 16               270 	ld	(hl),#0x16
                            271 ;screen.c:161: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = 1;
   013E ED 5Br00s00         272 	ld	de,(_CX80_System_FNC_EntryPoint)
   0142 13                  273 	inc	de
   0143 3E 01               274 	ld	a,#0x01
   0145 12                  275 	ld	(de),a
                            276 ;screen.c:164: CX80_DO_SYSTEM_CALL;
   0146 CD 07 00            277 	call #0x0007
                            278 ;screen.c:166: WaitKeypressed();
   0149 CDr00s00            279 	call	_WaitKeypressed
                            280 ;screen.c:168: ClearScreen();
   014C CDr09s00            281 	call	_ClearScreen
                            282 ;screen.c:169: puts("Restore video signal\n\r");
   014F 21r3Fs02            283 	ld	hl,#__str_10
   0152 E5                  284 	push	hl
   0153 CDr00s00            285 	call	_puts
                            286 ;screen.c:170: puts("Press key...\n\r");
   0156 21r89s01            287 	ld	hl, #__str_1
   0159 E3                  288 	ex	(sp),hl
   015A CDr00s00            289 	call	_puts
   015D F1                  290 	pop	af
                            291 ;screen.c:173: *CX80_System_FNC_EntryPoint = CX80_FNC_INVERT_VIDEO_OUTPUT;
   015E 2Ar00s00            292 	ld	hl,(_CX80_System_FNC_EntryPoint)
   0161 36 16               293 	ld	(hl),#0x16
                            294 ;screen.c:174: *(CX80_System_FNC_EntryPoint + CX80_SYSTEM_REG1L_ADDR) = 0;
   0163 ED 5Br00s00         295 	ld	de,(_CX80_System_FNC_EntryPoint)
   0167 13                  296 	inc	de
   0168 3E 00               297 	ld	a,#0x00
   016A 12                  298 	ld	(de),a
                            299 ;screen.c:177: CX80_DO_SYSTEM_CALL;
   016B CD 07 00            300 	call #0x0007
                            301 ;screen.c:179: WaitKeypressed();
   016E C3r00s00            302 	jp	_WaitKeypressed
   0171                     303 _ScreenDemo_end::
   0171                     304 __str_0:
   0171 4D 6F 76 65 20 63   305 	.ascii "Move cursor to 18, 14"
        75 72 73 6F 72 20
        74 6F 20 31 38 2C
        20 31 34
   0186 0A                  306 	.db 0x0A
   0187 0D                  307 	.db 0x0D
   0188 00                  308 	.db 0x00
   0189                     309 __str_1:
   0189 50 72 65 73 73 20   310 	.ascii "Press key..."
        6B 65 79 2E 2E 2E
   0195 0A                  311 	.db 0x0A
   0196 0D                  312 	.db 0x0D
   0197 00                  313 	.db 0x00
   0198                     314 __str_2:
   0198 4D 6F 76 65 20 63   315 	.ascii "Move cursor to home"
        75 72 73 6F 72 20
        74 6F 20 68 6F 6D
        65
   01AB 0A                  316 	.db 0x0A
   01AC 0D                  317 	.db 0x0D
   01AD 00                  318 	.db 0x00
   01AE                     319 __str_3:
   01AE 43 75 72 73 6F 72   320 	.ascii "Cursor in block shape"
        20 69 6E 20 62 6C
        6F 63 6B 20 73 68
        61 70 65
   01C3 0A                  321 	.db 0x0A
   01C4 0D                  322 	.db 0x0D
   01C5 00                  323 	.db 0x00
   01C6                     324 __str_4:
   01C6 43 75 72 73 6F 72   325 	.ascii "Cursor in underline shape"
        20 69 6E 20 75 6E
        64 65 72 6C 69 6E
        65 20 73 68 61 70
        65
   01DF 0A                  326 	.db 0x0A
   01E0 0D                  327 	.db 0x0D
   01E1 00                  328 	.db 0x00
   01E2                     329 __str_5:
   01E2 48 69 64 64 65 6E   330 	.ascii "Hidden the cursor"
        20 74 68 65 20 63
        75 72 73 6F 72
   01F3 0A                  331 	.db 0x0A
   01F4 0D                  332 	.db 0x0D
   01F5 00                  333 	.db 0x00
   01F6                     334 __str_6:
   01F6 53 68 6F 77 20 74   335 	.ascii "Show the cursor"
        68 65 20 63 75 72
        73 6F 72
   0205 0A                  336 	.db 0x0A
   0206 0D                  337 	.db 0x0D
   0207 00                  338 	.db 0x00
   0208                     339 __str_7:
   0208 43 68 61 6E 67 65   340 	.ascii "Change line dimension"
        20 6C 69 6E 65 20
        64 69 6D 65 6E 73
        69 6F 6E
   021D 0A                  341 	.db 0x0A
   021E 0D                  342 	.db 0x0D
   021F 00                  343 	.db 0x00
   0220                     344 __str_8:
   0220 4E 45 57 20 4C 49   345 	.ascii "NEW LINE"
        4E 45
   0228 00                  346 	.db 0x00
   0229                     347 __str_9:
   0229 49 6E 76 65 72 74   348 	.ascii "Invert video signal"
        20 76 69 64 65 6F
        20 73 69 67 6E 61
        6C
   023C 0A                  349 	.db 0x0A
   023D 0D                  350 	.db 0x0D
   023E 00                  351 	.db 0x00
   023F                     352 __str_10:
   023F 52 65 73 74 6F 72   353 	.ascii "Restore video signal"
        65 20 76 69 64 65
        6F 20 73 69 67 6E
        61 6C
   0253 0A                  354 	.db 0x0A
   0254 0D                  355 	.db 0x0D
   0255 00                  356 	.db 0x00
                            357 ;screen.c:182: int main(void)
                            358 ;	---------------------------------
                            359 ; Function main
                            360 ; ---------------------------------
   0256                     361 _main_start::
   0256                     362 _main:
                            363 ;screen.c:186: CX80_System_FNC_EntryPoint = (char *)0x0000;
   0256 FD 21r00s00         364 	ld	iy,#_CX80_System_FNC_EntryPoint
   025A FD 36 00 00         365 	ld	0 (iy),#0x00
   025E FD 36 01 00         366 	ld	1 (iy),#0x00
                            367 ;screen.c:188: ClearScreen();
   0262 CDr09s00            368 	call	_ClearScreen
                            369 ;screen.c:190: puts("CX80 Screen Function Demo\n\r");
   0265 21r7Es02            370 	ld	hl,#__str_11
   0268 E5                  371 	push	hl
   0269 CDr00s00            372 	call	_puts
                            373 ;screen.c:191: puts("Press key...\n\r");
   026C 21r9As02            374 	ld	hl, #__str_12
   026F E3                  375 	ex	(sp),hl
   0270 CDr00s00            376 	call	_puts
   0273 F1                  377 	pop	af
                            378 ;screen.c:193: WaitKeypressed();
   0274 CDr00s00            379 	call	_WaitKeypressed
                            380 ;screen.c:195: ScreenDemo();
   0277 CDr36s00            381 	call	_ScreenDemo
                            382 ;screen.c:197: return 0;
   027A 21 00 00            383 	ld	hl,#0x0000
   027D C9                  384 	ret
   027E                     385 _main_end::
   027E                     386 __str_11:
   027E 43 58 38 30 20 53   387 	.ascii "CX80 Screen Function Demo"
        63 72 65 65 6E 20
        46 75 6E 63 74 69
        6F 6E 20 44 65 6D
        6F
   0297 0A                  388 	.db 0x0A
   0298 0D                  389 	.db 0x0D
   0299 00                  390 	.db 0x00
   029A                     391 __str_12:
   029A 50 72 65 73 73 20   392 	.ascii "Press key..."
        6B 65 79 2E 2E 2E
   02A6 0A                  393 	.db 0x0A
   02A7 0D                  394 	.db 0x0D
   02A8 00                  395 	.db 0x00
                            396 	.area _CODE
                            397 	.area _CABS (ABS)
