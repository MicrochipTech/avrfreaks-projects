
avrETH1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b60  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00007b60  00007c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000706  0080007c  0080007c  00007c30  2**0
                  ALLOC
  3 .eeprom       000000f0  00810000  00810000  00007c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000378  00000000  00000000  00007d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000071  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000320  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000014ed  00000000  00000000  00008429  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006947  00000000  00000000  00009916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001ea5  00000000  00000000  0001025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005b52  00000000  00000000  00012102  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a10  00000000  00000000  00017c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015b4  00000000  00000000  00018664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004072  00000000  00000000  00019c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  0001dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__ctors_end>
       4:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
       8:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
       c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      10:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      14:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      18:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      1c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      20:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      24:	0c 94 a1 37 	jmp	0x6f42	; 0x6f42 <__vector_9>
      28:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      2c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      30:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      34:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      38:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      3c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      40:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      44:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      48:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      4c:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      50:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__bad_interrupt>
      54:	cf 2c       	mov	r12, r15
      56:	76 2d       	mov	r23, r6
      58:	81 2d       	mov	r24, r1
      5a:	d2 2d       	mov	r29, r2
      5c:	da 2c       	mov	r13, r10
      5e:	ea 2c       	mov	r14, r10
      60:	2c 2d       	mov	r18, r12
      62:	69 2d       	mov	r22, r9
      64:	d2 2d       	mov	r29, r2
      66:	d2 2d       	mov	r29, r2
      68:	8c 2d       	mov	r24, r12
      6a:	97 2d       	mov	r25, r7
      6c:	a3 2d       	mov	r26, r3
      6e:	0b 2d       	mov	r16, r11
      70:	f5 2c       	mov	r15, r5
      72:	16 2d       	mov	r17, r6
      74:	c4 2d       	mov	r28, r4
      76:	00 2d       	mov	r16, r0
      78:	21 2d       	mov	r18, r1
      7a:	af 2d       	mov	r26, r15
      7c:	ba 2d       	mov	r27, r10

0000007e <__c.2083>:
      7e:	69 6e 69 74 3a 00                                   init:.

00000084 <SERVO_BMP_HEAD>:
      84:	42 4d 5e 13 00 00 00 00 00 00 3e 00 00 00 28 00     BM^.......>...(.
      94:	00 00 00 01 00 00 01 00 00 00 01 00 01 00 00 00     ................
      a4:	00 00 5e 00 00 00 10 0b 00 00 10 0b 00 00 02 00     ..^.............
      b4:	00 00 02 00 00 00 ff ff ff 00 c0 c0 c0 00           ..............

000000c2 <MCA25_START_JPG>:
      c2:	f9 81 ef 3f 83 00 82 71 00 58 3c 6d 6f 6e 69 74     ...?...q.X<monit
      d2:	6f 72 69 6e 67 2d 63 6f 6d 6d 61 6e 64 20 76 65     oring-command ve
      e2:	72 73 69 8c f9 f9 81 ef 3f 6f 6e 3d 22 31 2e 30     rsi.....?on="1.0
      f2:	22 20 74 61 6b 65 2d 70 69 63 3d 22 4e 4f 22 20     " take-pic="NO" 
     102:	73 65 6e 64 2d 70 69 78 8c f9 f9 81 ef 3f 65 6c     send-pix.....?el
     112:	2d 73 69 7a 65 3d 22 36 34 30 2a 34 38 30 22 20     -size="640*480" 
     122:	7a 6f 6f 6d 3d 22 31 30 22 2f 3e 42 00 8c f9 f9     zoom="10"/>B....
     132:	81 ef 3f 21 78 2d 62 74 2f 69 6d 61 67 69 6e 67     ..?!x-bt/imaging
     142:	2d 6d 6f 6e 69 74 6f 72 69 6e 67 2d 69 6d 61 67     -monitoring-imag
     152:	65 00 8c f9 f9 81 ef 0d 4c 00 06 06 01 80 4b f9     e.......L.....K.

00000162 <MCA25_START_CAPTURING>:
     162:	f9 81 ef 3f 83 00 69 71 00 3f 3c 6d 6f 6e 69 74     ...?..iq.?<monit
     172:	6f 72 69 6e 67 2d 63 6f 6d 6d 61 6e 64 20 76 65     oring-command ve
     182:	72 73 69 8c f9 f9 81 ef 3f 6f 6e 3d 22 31 2e 30     rsi.....?on="1.0
     192:	22 20 74 61 6b 65 2d 70 69 63 3d 22 59 45 53 22     " take-pic="YES"
     1a2:	20 7a 6f 6f 6d 3d 22 31 8c f9 f9 81 ef 3f 30 22      zoom="1.....?0"
     1b2:	2f 3e 42 00 21 78 2d 62 74 2f 69 6d 61 67 69 6e     />B.!x-bt/imagin
     1c2:	67 2d 6d 6f 6e 69 74 6f 72 69 6e 67 2d 8c f9 f9     g-monitoring-...
     1d2:	81 ef 19 69 6d 61 67 65 00 4c 00 06 06 01 80 50     ...image.L.....P
     1e2:	f9                                                  .

000001e3 <MCA25_CONFIG_640x480>:
     1e3:	f9 81 ef 3f 82 01 3b 01 00 03 49 01 35 3c 63 61     ...?..;...I.5<ca
     1f3:	6d 65 72 61 2d 73 65 74 74 69 6e 67 73 20 76 65     mera-settings ve
     203:	72 73 69 8c f9 f9 81 ef 3f 6f 6e 3d 22 31 2e 30     rsi.....?on="1.0
     213:	22 20 77 68 69 74 65 2d 62 61 6c 61 6e 63 65 3d     " white-balance=
     223:	22 4f 46 46 22 20 63 6f 8c f9 f9 81 ef 3f 6c 6f     "OFF" co.....?lo
     233:	72 2d 63 6f 6d 70 65 6e 73 61 74 69 6f 6e 3d 22     r-compensation="
     243:	31 33 22 20 66 75 6e 2d 6c 61 79 65 72 8c f9 f9     13" fun-layer...
     253:	81 ef 3f 3d 22 30 22 3e 3c 6d 6f 6e 69 74 6f 72     ..?="0"><monitor
     263:	69 6e 67 2d 66 6f 72 6d 61 74 20 65 6e 63 6f 64     ing-format encod
     273:	69 6e 8c f9 f9 81 ef 3f 67 3d 22 45 42 4d 50 22     in.....?g="EBMP"
     283:	20 70 69 78 65 6c 2d 73 69 7a 65 3d 22 38 30 2a      pixel-size="80*
     293:	36 30 22 20 63 6f 6c 8c f9 f9 81 ef 3f 6f 72 2d     60" col.....?or-
     2a3:	64 65 70 74 68 3d 22 38 22 2f 3e 0d 0a 3c 74 68     depth="8"/>..<th
     2b3:	75 6d 62 6e 61 69 6c 2d 66 6f 72 6d 8c f9 f9 81     umbnail-form....
     2c3:	ef 3f 61 74 20 65 6e 63 6f 64 69 6e 67 3d 22 45     .?at encoding="E
     2d3:	42 4d 50 22 20 70 69 78 65 6c 2d 73 69 7a 65 3d     BMP" pixel-size=
     2e3:	22 8c f9 f9 81 ef 3f 31 30 31 2a 38 30 22 20 63     ".....?101*80" c
     2f3:	6f 6c 6f 72 2d 64 65 70 74 68 3d 22 38 22 2f 3e     olor-depth="8"/>
     303:	0d 0a 3c 6e 61 74 8c f9 f9 81 ef 3f 69 76 65 2d     ..<nat.....?ive-
     313:	66 6f 72 6d 61 74 20 65 6e 63 6f 64 69 6e 67 3d     format encoding=
     323:	22 22 20 70 69 78 65 6c 2d 73 69 8c f9 f9 81 ef     "" pixel-si.....
     333:	3f 7a 65 3d 22 36 34 30 2a 34 38 30 22 2f 3e 0d     ?ze="640*480"/>.
     343:	0a 3c 2f 63 61 6d 65 72 61 2d 73 65 74 74 69 6e     .</camera-settin
     353:	8c f9 f9 81 ef 0b 67 73 3e 0d 0a af f9              ......gs>....

00000360 <__c.2353>:
     360:	0d 0d 0a 4f 4b 0d 0a 00                             ...OK...

00000368 <__c.2298>:
     368:	a0 00 1f 10 00 20 00 cb 00 00 00 01 4a 00 13 e3     ..... ......J...
     378:	3d 95 45 83 74 4a d7 9e c5 c1 6b e3 1e de 8e 00     =.E.tJ....k.....

00000388 <__c.2295>:
     388:	f9 21 ef 0d 0d 0a 4f 4b 0d 0a 48 f9 00              .!....OK..H..

00000395 <__c.2293>:
     395:	c5 c1 6b e3 1e de 8e 61 82 f9 00                    ..k....a...

000003a0 <__c.2291>:
     3a0:	46 00 13 e3 3d 95 45 83 74 4a d7 9e 00              F...=.E.tJ...

000003ad <__c.2283>:
     3ad:	f9 81 ef 37 80 00 1a 10 00 00                       ...7......

000003b7 <__c.2281>:
     3b7:	f9 01 ef 09 e1 05 83 8d 9a f9 00                    ...........

000003c2 <__c.2279>:
     3c2:	e3 05 83 8d 00                                      .....

000003c7 <__c.2275>:
     3c7:	f9 81 3f 01 ab f9 00                                ..?....

000003ce <__c.2273>:
     3ce:	f9 21 ef 0d 0d 0a 4f 4b 0d 0a 48 f9 00              .!....OK..H..

000003db <__c.2271>:
     3db:	41 54 2b 43 53 43 43 3d 32 2c 31 39 39 2c 42 39     AT+CSCC=2,199,B9
     3eb:	0d 00                                               ..

000003ed <__c.2268>:
     3ed:	f9 21 ef 0d 0d 0a 4f 4b 0d 0a 48 f9 00              .!....OK..H..

000003fa <__c.2266>:
     3fa:	f9 21 ef 1b 0d 0a 2b 43 53 43 43 3a 20 45 33 0d     .!....+CSCC: E3.
     40a:	0a b0 f9 00                                         ....

0000040e <__c.2264>:
     40e:	41 54 2b 43 53 43 43 3d 31 2c 31 39 39 0d 00        AT+CSCC=1,199..

0000041d <__c.2261>:
     41d:	f9 21 ef 0d 0d 0a 4f 4b 0d 0a 48 f9 00              .!....OK..H..

0000042a <__c.2259>:
     42a:	41 54 2a 45 41 43 53 3d 31 37 2c 31 0d 00           AT*EACS=17,1..

00000438 <__c.2256>:
     438:	f9 01 ef 09 e1 05 23 8d 9a f9 00                    ......#....

00000443 <__c.2254>:
     443:	e1 07 23 0c 01 00                                   ..#...

00000449 <__c.2251>:
     449:	f9 01 ef 0b e3 07 23 0c 01 79 f9 00                 ......#..y..

00000455 <__c.2249>:
     455:	e3 05 23 8d 00                                      ..#..

0000045a <__c.2246>:
     45a:	f9 23 73 01 02 f9 00                                .#s....

00000461 <__c.2243>:
     461:	f9 03 73 01 d7 f9 00                                ..s....

00000468 <__c.2240>:
     468:	41 54 2b 43 4d 55 58 3d 30 2c 30 2c 37 2c 33 31     AT+CMUX=0,0,7,31
	...

00000479 <__c.2237>:
     479:	0d 0d 0a 2b 43 4d 55 58 3a 20 28 30 29 2c 28 30     ...+CMUX: (0),(0
     489:	29 2c 28 31 2d 37 29 2c 28 33 31 29 2c 28 31 30     ),(1-7),(31),(10
     499:	29 2c 28 33 29 2c 28 33 30 29 2c 28 31 30 29 2c     ),(3),(30),(10),
     4a9:	28 31 2d 37 29 0d 0a 00                             (1-7)...

000004b1 <__c.2235>:
     4b1:	41 54 2b 43 4d 55 58 3d 3f 00                       AT+CMUX=?.

000004bb <__c.2232>:
     4bb:	0d 0a 4f 4b 0d 0a 00                                ..OK...

000004c2 <__c.2230>:
     4c2:	41 54 2b 49 50 52 3d 34 36 30 38 30 30 00           AT+IPR=460800.

000004d0 <__c.2227>:
     4d0:	2b 49 50 52 3a 20 28 29 2c 28 31 32 30 30 2c 32     +IPR: (),(1200,2
     4e0:	34 30 30 2c 34 38 30 30 2c 39 36 30 30 2c 31 39     400,4800,9600,19
     4f0:	32 30 30 2c 33 38 34 30 30 2c 35 37 36 30 30 2c     200,38400,57600,
     500:	34 36 30 38 30 30 29 0d 0a 0d 0a 4f 4b 0d 0a 00     460800)....OK...

00000510 <__c.2225>:
     510:	41 54 2b 49 50 52 3d 3f 00                          AT+IPR=?.

00000519 <__c.2221>:
     519:	41 54 26 46 00                                      AT&F.

0000051e <__c.2219>:
     51e:	41 54 26 46 00                                      AT&F.

00000523 <__c.2187>:
     523:	f9 81 ef 2f 83 00 17 42 00 14 78 2d 62 74 2f 63     .../...B..x-bt/c
     533:	61 6d 65 72 61 2d 69 6e 66 6f 00 90 f9 00           amera-info....

00000541 <__c.2185>:
     541:	a0 00 03 00                                         ....

00000545 <__c.2075>:
     545:	f9 01 ef 0b e3 07 23 0c 01 79 f9 00                 ......#..y..

00000551 <__c.2070>:
     551:	f9 01 ef 0b e3 07 23 0c 01 79 f9 00                 ......#..y..

0000055d <__c.2059>:
     55d:	20 63 75 72 20 70 6f 73 20 69 73 3a 20 00            cur pos is: .

0000056b <__c.2057>:
     56b:	43 41 4d 20 3a 20 72 65 71 20 62 79 74 65 20 00     CAM : req byte .

0000057b <__c.2039>:
     57b:	f9 03 73 01 d7 f9 00                                ..s....

00000582 <__c.2037>:
     582:	f9 01 ef 0b e3 07 23 0c 01 79 f9 00                 ......#..y..

0000058e <__c.2035>:
     58e:	e1 07 23 0c 01 00                                   ..#...

00000594 <__c.2028>:
     594:	f9 23 73 01 02 f9 00                                .#s....

0000059b <__c.2026>:
     59b:	f9 21 ef 0d 0d 0a 4f 4b 0d 0a 48 f9 00              .!....OK..H..

000005a8 <__c.2024>:
     5a8:	41 54 2a 45 43 55 52 3d 00                          AT*ECUR=.

000005b1 <__c.2019>:
     5b1:	f9 81 ef 07 83 00 03 a6 f9 00                       ..........

000005bb <__c.2228>:
     5bb:	22 3e 72 65 6d 6f 76 65 3c 2f 61 3e 3c 62 72 3e     ">remove</a><br>
	...

000005cc <__c.2226>:
     5cc:	20 3c 61 20 68 72 65 66 3d 22 2f 61 64 6d 2f 72      <a href="/adm/r
     5dc:	6d 2f 00                                            m/.

000005df <__c.2221>:
     5df:	4b 42 20 00                                         KB .

000005e3 <__c.2219>:
     5e3:	3c 2f 61 3e 00                                      </a>.

000005e8 <__c.2217>:
     5e8:	22 3e 00                                            ">.

000005eb <__c.2212>:
     5eb:	3c 61 20 68 72 65 66 3d 22 2f 66 73 2f 00           <a href="/fs/.

000005f9 <__c.2210>:
     5f9:	3c 69 6d 67 20 73 72 63 3d 22 2f 73 69 74 65 2f     <img src="/site/
     609:	66 69 63 6f 6e 2e 67 69 66 22 20 61 6c 69 67 6e     ficon.gif" align
     619:	3d 6d 69 64 64 6c 65 3e 20 00                       =middle> .

00000623 <PLOT_BMP_HEAD>:
     623:	42 4d 5e 13 00 00 00 00 00 00 3e 00 00 00 28 00     BM^.......>...(.
     633:	00 00 08 01 00 00 88 00 00 00 01 00 01 00 00 00     ................
     643:	00 00 5e 13 00 00 10 0b 00 00 10 0b 00 00 02 00     ..^.............
     653:	00 00 02 00 00 00 ff ff ff 00 ff 00 00 00           ..............

00000661 <PLOT_BMP_LEGEND>:
     661:	00 00 01 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     671:	00 01 00 00 01 00 00 01 00 00 01 00 00 01 00 00     ................
     681:	01 03 c3 81 02 04 41 e1 04 47 00 84 41 00 44 41     ......A..G..A.DA
     691:	02 46 41 01 83 81 00 00 01 00 00 01 00 00 01 00     .FA.............
     6a1:	00 01 00 00 01 00 00 01 00 00 01 00 00 01 01 c3     ................
     6b1:	81 00 84 41 70 84 47 00 84 41 00 84 41 01 86 41     ...Ap.G..A..A..A
     6c1:	00 83 81 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     6d1:	00 01 00 00 01 00 00 01 00 00 01 00 03 81 00 04     ................
     6e1:	41 00 04 47 00 04 41 00 04 41 00 06 41 00 03 81     A..G..A..A..A...
     6f1:	00 00 01 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     701:	00 01 00 00 01 00 00 01 01 c3 81 00 84 41 00 84     .............A..
     711:	47 00 84 41 00 84 41 01 86 41 00 83 81 00 00 01     G..A..A..A......
     721:	00 00 01 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     731:	00 01 00 00 01 03 c3 81 02 04 41 01 04 47 00 84     ..........A..G..
     741:	41 00 44 41 02 46 41 01 83 81 00 00 01 00 00 01     A.DA.FA.........
     751:	00 00 01 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     761:	00 01 03 83 81 02 44 41 00 44 47 00 c4 41 01 84     ......DA.DG..A..
     771:	41 00 46 41 03 83 81 00 00 01 00 00 01 00 00 01     A.FA............
     781:	00 00 01 00 00 01 00 00 01 00 00 01 00 00 01 00     ................
     791:	43 81 00 44 41 03 e4 47 01 44 41 01 44 41 00 c6     C..DA..G.DA.DA..
     7a1:	41 00 43 81 00 00 01 00 00 01 00 00 01 00 00 01     A.C.............
     7b1:	00 00 01 00 00 01 00 00 01 00 00 01 03 c3 81 02     ................
     7c1:	64 41 00 24 47 02 24 41 03 c4 41 02 06 41 03 c3     dA.$G.$A..A..A..
     7d1:	81 00 00 01 00 00 01 00 00 01 00 00 01 00 00 01     ................
     7e1:	00 1c 01 00 20 01 00 20 01 02 10 01 05 0c 01 02     .... .. ........
     7f1:	00 01 00 00 01                                      .....

000007f6 <HTTPD_RESPONSE_OK>:
     7f6:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 44 6f 63     HTTP/1.0 200 Doc
     806:	75 6d 65 6e 74 20 66 6f 6c 6c 6f 77 73 0d 0a 53     ument follows..S
     816:	65 72 76 65 72 3a 20 41 56 52 56 69 20 45 74 68     erver: AVRVi Eth
     826:	65 72 6e 65 74 20 49 4f 20 0d 0a 43 6f 6e 74 65     ernet IO ..Conte
     836:	6e 74 2d 54 79 70 65 3a 20 00                       nt-Type: .

00000840 <HTTPD_RESPONSE_401>:
     840:	48 54 54 50 2f 31 2e 31 20 34 30 31 20 41 75 74     HTTP/1.1 401 Aut
     850:	68 6f 72 69 7a 61 74 69 6f 6e 20 52 65 71 75 69     horization Requi
     860:	72 65 64 0d 0a 53 65 72 76 65 72 3a 20 41 56 52     red..Server: AVR
     870:	56 69 20 45 74 68 65 72 6e 65 74 20 49 4f 0d 0a     Vi Ethernet IO..
     880:	57 57 57 2d 41 75 74 68 65 6e 74 69 63 61 74 65     WWW-Authenticate
     890:	3a 20 42 61 73 69 63 20 72 65 61 6c 6d 3d 22 61     : Basic realm="a
     8a0:	64 6d 69 6e 20 7a 6f 6e 65 22 0d 0a 43 6f 6e 74     dmin zone"..Cont
     8b0:	65 6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68     ent-Type: text/h
     8c0:	74 6d 6c 0d 0a 0d 0a 3c 68 74 6d 6c 3e 34 30 31     tml....<html>401
     8d0:	20 61 75 74 68 20 72 65 71 75 69 72 65 64 3c 2f      auth required</
     8e0:	68 74 6d 6c 3e 00                                   html>.

000008e6 <HTTPD_RESPONSE_404>:
     8e6:	48 54 54 50 2f 31 2e 30 20 34 30 34 20 6e 6f 74     HTTP/1.0 404 not
     8f6:	20 66 6f 75 6e 64 0d 0a 53 65 72 76 65 72 3a 20      found..Server: 
     906:	41 56 52 56 69 20 45 74 68 65 72 6e 65 74 20 49     AVRVi Ethernet I
     916:	4f 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a     O..Content-Type:
     926:	20 74 65 78 74 2f 68 74 6d 6c 00                     text/html.

00000931 <HTTPD_CTYPE_HTML>:
     931:	74 65 78 74 2f 68 74 6d 6c 00                       text/html.

0000093b <HTTPD_CTYPE_BMP>:
     93b:	69 6d 61 67 65 2f 62 6d 70 00                       image/bmp.

00000945 <HTTPD_CTYPE_JPG>:
     945:	69 6d 61 67 65 2f 6a 70 65 67 00                    image/jpeg.

00000950 <HTTPD_CTYPE_PNG>:
     950:	69 6d 61 67 65 2f 70 6e 67 00                       image/png.

0000095a <HTTPD_CTYPE_GIF>:
     95a:	69 6d 61 67 65 2f 67 69 66 00                       image/gif.

00000964 <HTTPD_RNRN>:
     964:	0d 0a 0d 0a 00                                      .....

00000969 <HTTPD_FILE_INDEX_HTML>:
     969:	3c 68 74 6d 6c 3e 3c 68 65 61 64 3e 3c 53 54 59     <html><head><STY
     979:	4c 45 20 74 79 70 65 3d 22 74 65 78 74 2f 63 73     LE type="text/cs
     989:	73 22 3e 61 2e 6e 20 7b 77 69 64 74 68 3a 31 30     s">a.n {width:10
     999:	30 70 78 3b 68 65 69 67 68 74 3a 32 30 70 78 3b     0px;height:20px;
     9a9:	64 69 73 70 6c 61 79 3a 20 62 6c 6f 63 6b 3b 70     display: block;p
     9b9:	61 64 64 69 6e 67 3a 30 70 78 20 30 70 78 20 30     adding:0px 0px 0
     9c9:	70 78 20 31 32 70 78 3b 6d 61 72 67 69 6e 3a 30     px 12px;margin:0
     9d9:	70 78 20 32 30 70 78 20 32 70 78 20 31 30 70 78     px 20px 2px 10px
     9e9:	3b 62 61 63 6b 67 72 6f 75 6e 64 2d 63 6f 6c 6f     ;background-colo
     9f9:	72 3a 23 66 66 66 66 66 66 3b 62 6f 72 64 65 72     r:#ffffff;border
     a09:	3a 31 70 78 20 73 6f 6c 69 64 20 62 6c 61 63 6b     :1px solid black
     a19:	3b 74 65 78 74 2d 64 65 63 6f 72 61 74 69 6f 6e     ;text-decoration
     a29:	3a 20 6e 6f 6e 65 3b 66 6f 6e 74 2d 66 61 6d 69     : none;font-fami
     a39:	6c 79 3a 20 56 65 72 64 61 6e 61 2c 20 41 72 69     ly: Verdana, Ari
     a49:	61 6c 2c 20 48 65 6c 76 65 74 69 63 61 2c 20 73     al, Helvetica, s
     a59:	61 6e 73 2d 73 65 72 69 66 3b 66 6f 6e 74 2d 73     ans-serif;font-s
     a69:	69 7a 65 3a 20 31 35 70 78 3b 63 6f 6c 6f 72 3a     ize: 15px;color:
     a79:	23 30 30 30 30 30 30 3b 7d 61 2e 6e 3a 68 6f 76     #000000;}a.n:hov
     a89:	65 72 20 7b 70 61 64 64 69 6e 67 2d 6c 65 66 74     er {padding-left
     a99:	3a 20 33 70 78 3b 62 6f 72 64 65 72 2d 6c 65 66     : 3px;border-lef
     aa9:	74 3a 31 30 70 78 20 73 6f 6c 69 64 20 62 6c 61     t:10px solid bla
     ab9:	63 6b 3b 7d 3c 2f 73 74 79 6c 65 3e 3c 74 69 74     ck;}</style><tit
     ac9:	6c 65 3e 41 56 52 56 69 20 45 74 68 65 72 6e 65     le>AVRVi Etherne
     ad9:	74 20 49 4f 20 77 65 62 73 65 72 76 65 72 3c 2f     t IO webserver</
     ae9:	74 69 74 6c 65 3e 3c 2f 68 65 61 64 3e 3c 62 6f     title></head><bo
     af9:	64 79 3e 3c 63 65 6e 74 65 72 3e 3c 64 69 76 20     dy><center><div 
     b09:	73 74 79 6c 65 3d 22 62 6f 72 64 65 72 3a 20 31     style="border: 1
     b19:	70 78 20 73 6f 6c 69 64 20 62 6c 61 63 6b 3b 20     px solid black; 
     b29:	77 69 64 74 68 3a 20 38 30 30 70 78 3b 20 74 65     width: 800px; te
     b39:	78 74 2d 61 6c 69 67 6e 3a 20 6c 65 66 74 3b 22     xt-align: left;"
     b49:	3e 3c 64 69 76 20 73 74 79 6c 65 3d 22 62 61 63     ><div style="bac
     b59:	6b 67 72 6f 75 6e 64 3a 20 23 39 33 30 30 30 30     kground: #930000
     b69:	3b 20 63 6f 6c 6f 72 3a 23 66 66 66 66 66 66 3b     ; color:#ffffff;
     b79:	20 66 6f 6e 74 2d 73 69 7a 65 3a 20 35 30 70 78      font-size: 50px
     b89:	3b 20 74 65 78 74 2d 61 6c 69 67 6e 3a 20 72 69     ; text-align: ri
     b99:	67 68 74 3b 20 70 61 64 64 69 6e 67 2d 62 6f 74     ght; padding-bot
     ba9:	74 6f 6d 3a 20 31 35 70 78 3b 20 70 61 64 64 69     tom: 15px; paddi
     bb9:	6e 67 2d 74 6f 70 3a 20 31 35 70 78 3b 20 62 6f     ng-top: 15px; bo
     bc9:	72 64 65 72 2d 62 6f 74 74 6f 6d 3a 20 31 70 78     rder-bottom: 1px
     bd9:	20 73 6f 6c 69 64 20 77 68 69 74 65 3b 22 3e 41      solid white;">A
     be9:	56 52 56 69 20 45 74 68 65 72 6e 65 74 20 49 4f     VRVi Ethernet IO
     bf9:	3c 2f 64 69 76 3e 3c 64 69 76 20 73 74 79 6c 65     </div><div style
     c09:	3d 22 62 61 63 6b 67 72 6f 75 6e 64 3a 20 23 39     ="background: #9
     c19:	33 30 30 30 30 3b 20 68 65 69 67 68 74 3a 20 35     30000; height: 5
     c29:	70 78 3b 20 77 69 64 74 68 3a 20 38 30 30 70 78     px; width: 800px
     c39:	3b 22 3e 3c 2f 64 69 76 3e 3c 64 69 76 20 73 74     ;"></div><div st
     c49:	79 6c 65 3d 22 66 6c 6f 61 74 3a 20 6c 65 66 74     yle="float: left
     c59:	3b 20 62 61 63 6b 67 72 6f 75 6e 64 3a 20 23 63     ; background: #c
     c69:	30 63 30 63 30 3b 20 62 6f 72 64 65 72 2d 72 69     0c0c0; border-ri
     c79:	67 68 74 3a 20 31 70 78 20 73 6f 6c 69 64 20 62     ght: 1px solid b
     c89:	6c 61 63 6b 3b 20 77 69 64 74 68 3a 20 31 33 35     lack; width: 135
     c99:	70 78 3b 20 68 65 69 67 68 74 3a 20 35 36 30 70     px; height: 560p
     ca9:	78 3b 20 63 6f 6c 6f 72 3a 20 23 66 66 66 66 66     x; color: #fffff
     cb9:	66 3b 20 70 61 64 64 69 6e 67 2d 62 6f 74 74 6f     f; padding-botto
     cc9:	6d 3a 20 30 70 78 3b 22 3e 3c 62 72 3e 3c 61 20     m: 0px;"><br><a 
     cd9:	68 72 65 66 3d 22 2f 22 20 63 6c 61 73 73 3d 22     href="/" class="
     ce9:	6e 22 3e 6d 61 69 6e 3c 2f 61 3e 3c 62 72 3e 3c     n">main</a><br><
     cf9:	61 20 68 72 65 66 3d 22 2f 73 69 74 65 2f 74 65     a href="/site/te
     d09:	6d 70 2e 68 74 6d 22 20 63 6c 61 73 73 3d 22 6e     mp.htm" class="n
     d19:	22 3e 74 65 6d 70 6c 6f 67 3c 2f 61 3e 3c 62 72     ">templog</a><br
     d29:	3e 3c 61 20 68 72 65 66 3d 22 2f 73 69 74 65 2f     ><a href="/site/
     d39:	63 61 6d 2e 68 74 6d 22 20 63 6c 61 73 73 3d 22     cam.htm" class="
     d49:	6e 22 3e 77 65 62 63 61 6d 3c 2f 61 3e 3c 62 72     n">webcam</a><br
     d59:	3e 3c 61 20 68 72 65 66 3d 22 2f 66 73 2f 6c 73     ><a href="/fs/ls
     d69:	2e 68 74 6d 22 20 63 6c 61 73 73 3d 22 6e 22 3e     .htm" class="n">
     d79:	66 69 6c 65 20 6c 69 73 74 3c 2f 61 3e 3c 62 72     file list</a><br
     d89:	3e 3c 61 20 68 72 65 66 3d 22 2f 73 69 74 65 2f     ><a href="/site/
     d99:	69 6f 2e 68 74 6d 22 20 63 6c 61 73 73 3d 22 6e     io.htm" class="n
     da9:	22 3e 73 65 74 20 69 6f 3c 2f 61 3e 3c 62 72 3e     ">set io</a><br>
     db9:	3c 62 72 3e 3c 62 72 3e 3c 63 65 6e 74 65 72 20     <br><br><center 
     dc9:	73 74 79 6c 65 3d 22 63 6f 6c 6f 72 3a 23 30 30     style="color:#00
     dd9:	30 3b 22 3e 61 64 6d 69 6e 3a 3c 2f 63 65 6e 74     0;">admin:</cent
     de9:	65 72 3e 3c 61 20 68 72 65 66 3d 22 2f 61 64 6d     er><a href="/adm
     df9:	2f 75 70 2e 68 74 6d 22 20 63 6c 61 73 73 3d 22     /up.htm" class="
     e09:	6e 22 3e 75 70 6c 6f 61 64 20 66 69 6c 65 3c 2f     n">upload file</
     e19:	61 3e 3c 62 72 3e 3c 61 20 68 72 65 66 3d 22 2f     a><br><a href="/
     e29:	61 64 6d 2f 6d 6b 66 73 2e 68 74 6d 22 20 63 6c     adm/mkfs.htm" cl
     e39:	61 73 73 3d 22 6e 22 3e 66 6f 72 6d 61 74 20 66     ass="n">format f
     e49:	73 3c 2f 61 3e 3c 62 72 3e 3c 62 72 3e 3c 62 72     s</a><br><br><br
     e59:	3e 3c 62 72 3e 3c 2f 64 69 76 3e 3c 64 69 76 20     ><br></div><div 
     e69:	73 74 79 6c 65 3d 22 66 6c 6f 61 74 3a 20 6c 65     style="float: le
     e79:	66 74 3b 20 77 69 64 74 68 3a 20 36 35 30 70 78     ft; width: 650px
     e89:	3b 20 68 65 69 67 68 74 3a 20 35 35 30 70 78 3b     ; height: 550px;
     e99:	20 70 61 64 64 69 6e 67 3a 20 35 70 78 3b 22 3e      padding: 5px;">
     ea9:	3c 62 72 3e 24 24 46 46 3c 62 72 3e 3c 2f 64 69     <br>$$FF<br></di
     eb9:	76 3e 3c 64 69 76 20 73 74 79 6c 65 3d 22 63 6c     v><div style="cl
     ec9:	65 61 72 3a 20 62 6f 74 68 3b 20 62 6f 72 64 65     ear: both; borde
     ed9:	72 2d 74 6f 70 3a 20 31 70 78 20 73 6f 6c 69 64     r-top: 1px solid
     ee9:	20 62 6c 61 63 6b 3b 22 3e 3c 61 20 68 72 65 66      black;"><a href
     ef9:	3d 22 68 74 74 70 3a 2f 2f 77 77 77 2e 61 76 72     ="http://www.avr
     f09:	76 69 2e 63 6f 6d 22 3e 41 56 52 56 69 20 41 56     vi.com">AVRVi AV
     f19:	52 d3 eb d0 e9 c4 e2 d2 c7 c6 f7 3c 2f 61 3e 3c     R..........</a><
     f29:	2f 64 69 76 3e 3c 64 69 76 20 73 74 79 6c 65 3d     /div><div style=
     f39:	22 66 6c 6f 61 74 3a 72 69 67 68 74 3b 22 3e 24     "float:right;">$
     f49:	24 43 4b 3c 2f 64 69 76 3e 3c 2f 64 69 76 3e 3c     $CK</div></div><
     f59:	2f 63 65 6e 74 65 72 3e 3c 2f 62 6f 64 79 3e 3c     /center></body><
     f69:	2f 68 74 6d 6c 3e 00                                /html>.

00000f70 <HTTPD_FILE_SITE_START_HTML>:
     f70:	3c 63 65 6e 74 65 72 3e 3c 62 72 3e 3c 62 72 3e     <center><br><br>
     f80:	3c 68 31 3e 41 56 52 56 69 20 45 74 68 65 72 6e     <h1>AVRVi Ethern
     f90:	65 74 20 49 4f 20 57 65 62 73 65 72 76 65 72 20     et IO Webserver 
     fa0:	72 65 61 64 79 2e 2e 2e 3c 2f 68 31 3e 3c 62 72     ready...</h1><br
     fb0:	3e 3c 62 72 3e 3c 68 33 3e 24 24 43 4b 3c 2f 68     ><br><h3>$$CK</h
     fc0:	33 3e 3c 62 72 3e 45 4e 43 32 38 6a 36 30 20 72     3><br>ENC28j60 r
     fd0:	65 76 69 73 69 6f 6e 3a 20 24 24 3f 3f 20 3c 62     evision: $$?? <b
     fe0:	72 3e 3c 62 72 3e 3c 62 72 3e 4d 43 55 20 54 79     r><br><br>MCU Ty
     ff0:	70 65 3a 20 41 54 6d 65 67 61 33 32 3c 62 72 3e     pe: ATmega32<br>
    1000:	3c 62 72 3e 3c 62 72 3e 62 75 69 6c 64 3a 20 76     <br><br>build: v
    1010:	30 2e 32 20 20 2f 20 41 56 52 56 69 20 42 75 69     0.2  / AVRVi Bui
    1020:	6c 64 20 73 74 61 72 74 65 64 20 32 31 2e 35 2e     ld started 21.5.
    1030:	32 30 30 38 20 61 74 20 31 36 3a 32 33 3a 35 38     2008 at 16:23:58
    1040:	3c 2f 63 65 6e 74 65 72 3e 00                       </center>.

0000104a <HTTPD_FILE_SITE_FSLS_HTML>:
    104a:	24 24 4c 46 00                                      $$LF.

0000104f <HTTPD_FILE_SITE_RMOK_HTML>:
    104f:	66 69 6c 65 20 72 65 6d 6f 76 65 64 2e 20 3c 61     file removed. <a
    105f:	20 68 72 65 66 3d 22 2f 66 73 2f 6c 73 2e 68 74      href="/fs/ls.ht
    106f:	6d 22 3e 62 61 63 6b 20 74 6f 20 66 69 6c 65 20     m">back to file 
    107f:	6c 69 73 74 3c 2f 61 3e 00                          list</a>.

00001088 <HTTPD_FILE_SITE_UPOK_HTML>:
    1088:	75 70 6c 6f 61 64 20 64 6f 6e 65 2e 20 3c 61 20     upload done. <a 
    1098:	68 72 65 66 3d 22 2f 66 73 2f 6c 73 2e 68 74 6d     href="/fs/ls.htm
    10a8:	22 3e 67 6f 20 74 6f 20 66 69 6c 65 20 6c 69 73     ">go to file lis
    10b8:	74 3c 2f 61 3e 00                                   t</a>.

000010be <HTTPD_FILE_SITE_UPERR_HTML>:
    10be:	75 70 6c 6f 61 64 20 6d 69 67 68 74 20 68 61 76     upload might hav
    10ce:	65 20 3c 62 3e 46 41 49 4c 45 44 3c 2f 62 3e 2e     e <b>FAILED</b>.
    10de:	20 70 6c 65 61 73 65 20 63 68 65 63 6b 20 66 69      please check fi
    10ee:	6c 65 20 26 20 74 72 79 20 61 67 61 69 6e 2e 20     le & try again. 
    10fe:	3c 61 20 68 72 65 66 3d 22 2f 66 73 2f 6c 73 2e     <a href="/fs/ls.
    110e:	68 74 6d 22 3e 67 6f 20 74 6f 20 66 69 6c 65 20     htm">go to file 
    111e:	6c 69 73 74 3c 2f 61 3e 00                          list</a>.

00001127 <HTTPD_FILE_SITE_MKFS_HTML>:
    1127:	74 68 69 73 20 77 69 6c 6c 20 65 72 61 73 65 20     this will erase 
    1137:	61 6c 6c 20 64 61 74 61 21 20 73 75 72 65 20 3f     all data! sure ?
    1147:	20 3c 61 20 68 72 65 66 3d 22 2f 61 64 6d 2f 6d      <a href="/adm/m
    1157:	6b 66 73 32 2e 68 74 6d 22 3e 79 65 73 3c 2f 61     kfs2.htm">yes</a
    1167:	3e 00                                               >.

00001169 <HTTPD_FILE_SITE_MKFS2_HTML>:
    1169:	66 6f 72 6d 61 74 74 69 6e 67 20 64 61 74 61 66     formatting dataf
    1179:	6c 61 73 68 2e 2e 2e 20 74 68 69 73 20 6d 61 79     lash... this may
    1189:	20 74 61 6b 65 20 61 20 76 65 72 79 20 6c 6f 6e      take a very lon
    1199:	67 20 74 69 6d 65 20 28 7e 33 30 73 29 21 3c 62     g time (~30s)!<b
    11a9:	72 3e 70 6c 65 61 73 65 20 77 61 69 74 20 75 6e     r>please wait un
    11b9:	74 69 6c 20 73 74 61 74 75 73 20 6c 65 64 20 69     til status led i
    11c9:	73 20 73 77 69 74 63 68 65 64 20 6f 6e 2e 2e 2e     s switched on...
    11d9:	3c 62 72 3e 3c 62 72 3e 74 68 65 20 73 65 72 76     <br><br>the serv
    11e9:	65 72 20 77 69 6c 6c 20 6e 6f 74 20 72 65 73 70     er will not resp
    11f9:	6f 6e 64 20 74 6f 20 72 65 71 75 65 73 74 73 20     ond to requests 
    1209:	64 75 72 69 6e 67 20 66 6f 72 6d 61 74 21 00        during format!.

00001218 <HTTPD_FILE_SITE_TEMP_HTML>:
    1218:	3c 64 69 76 20 73 74 79 6c 65 3d 22 66 6c 6f 61     <div style="floa
    1228:	74 3a 20 6c 65 66 74 3b 20 6d 61 72 67 69 6e 2d     t: left; margin-
    1238:	6c 65 66 74 3a 20 31 30 70 78 3b 22 3e 3c 62 72     left: 10px;"><br
    1248:	3e 6c 61 73 74 20 32 34 68 3a 3c 62 72 3e 3c 69     >last 24h:<br><i
    1258:	6d 67 20 73 72 63 3d 22 2f 67 72 61 70 68 5f 30     mg src="/graph_0
    1268:	2e 62 6d 70 22 20 77 69 64 74 68 3d 22 32 36 34     .bmp" width="264
    1278:	22 20 68 65 69 67 68 74 3d 22 31 33 36 22 3e 3c     " height="136"><
    1288:	62 72 3e 3c 62 72 3e 3c 2f 64 69 76 3e 3c 64 69     br><br></div><di
    1298:	76 20 73 74 79 6c 65 3d 22 66 6c 6f 61 74 3a 20     v style="float: 
    12a8:	72 69 67 68 74 3b 20 6d 61 72 67 69 6e 2d 6c 65     right; margin-le
    12b8:	66 74 3a 20 31 30 70 78 3b 22 3e 3c 62 72 3e 6e     ft: 10px;"><br>n
    12c8:	6f 77 3a 3c 62 72 3e 3c 64 69 76 20 73 74 79 6c     ow:<br><div styl
    12d8:	65 3d 22 66 6f 6e 74 2d 73 69 7a 65 3a 20 31 30     e="font-size: 10
    12e8:	70 78 3b 20 62 61 63 6b 67 72 6f 75 6e 64 3a 20     px; background: 
    12f8:	23 63 63 63 63 63 63 3b 20 63 6f 6c 6f 72 3a 20     #cccccc; color: 
    1308:	23 30 30 30 30 46 46 3b 20 62 6f 72 64 65 72 3a     #0000FF; border:
    1318:	20 32 70 78 20 73 6f 6c 69 64 20 62 6c 61 63 6b      2px solid black
    1328:	3b 20 77 69 64 74 68 3a 20 32 30 30 70 78 3b 20     ; width: 200px; 
    1338:	70 61 64 64 69 6e 67 3a 20 35 70 78 3b 22 3e 24     padding: 5px;">$
    1348:	24 54 4e 20 43 3c 2f 64 69 76 3e 3c 62 72 3e 74     $TN C</div><br>t
    1358:	6f 64 61 79 20 6d 69 6e 2f 6d 61 78 3a 3c 62 72     oday min/max:<br
    1368:	3e 3c 64 69 76 20 73 74 79 6c 65 3d 22 66 6f 6e     ><div style="fon
    1378:	74 2d 73 69 7a 65 3a 20 31 30 70 78 3b 20 62 61     t-size: 10px; ba
    1388:	63 6b 67 72 6f 75 6e 64 3a 20 23 63 63 63 63 63     ckground: #ccccc
    1398:	63 3b 20 63 6f 6c 6f 72 3a 20 23 30 30 30 30 46     c; color: #0000F
    13a8:	46 3b 20 62 6f 72 64 65 72 3a 20 32 70 78 20 73     F; border: 2px s
    13b8:	6f 6c 69 64 20 62 6c 61 63 6b 3b 20 77 69 64 74     olid black; widt
    13c8:	68 3a 20 32 30 30 70 78 3b 20 70 61 64 64 69 6e     h: 200px; paddin
    13d8:	67 3a 20 35 70 78 3b 22 3e 24 24 54 2d 20 2f 20     g: 5px;">$$T- / 
    13e8:	24 24 54 2b 20 43 3c 2f 64 69 76 3e 3c 62 72 3e     $$T+ C</div><br>
    13f8:	3c 2f 64 69 76 3e 00                                </div>.

000013ff <HTTPD_FILE_SITE_CAM_HTML>:
    13ff:	3c 73 63 72 69 70 74 20 6c 61 6e 67 75 61 67 65     <script language
    140f:	3d 22 4a 61 76 61 53 63 72 69 70 74 22 20 74 79     ="JavaScript" ty
    141f:	70 65 3d 22 74 65 78 74 2f 6a 61 76 61 73 63 72     pe="text/javascr
    142f:	69 70 74 22 3e 76 61 72 20 69 65 20 3d 20 64 6f     ipt">var ie = do
    143f:	63 75 6d 65 6e 74 2e 61 6c 6c 20 3f 20 31 20 3a     cument.all ? 1 :
    144f:	20 30 3b 66 75 6e 63 74 69 6f 6e 20 61 28 65 29      0;function a(e)
    145f:	20 7b 72 65 74 75 72 6e 20 28 65 2e 6f 66 66 73      {return (e.offs
    146f:	65 74 50 61 72 65 6e 74 29 3f 65 2e 6f 66 66 73     etParent)?e.offs
    147f:	65 74 4c 65 66 74 2b 61 28 65 2e 6f 66 66 73 65     etLeft+a(e.offse
    148f:	74 50 61 72 65 6e 74 29 20 3a 20 65 2e 6f 66 66     tParent) : e.off
    149f:	73 65 74 4c 65 66 74 3b 7d 66 75 6e 63 74 69 6f     setLeft;}functio
    14af:	6e 20 63 6c 28 65 29 20 7b 69 66 20 28 21 65 29     n cl(e) {if (!e)
    14bf:	20 76 61 72 20 65 20 3d 20 77 69 6e 64 6f 77 2e      var e = window.
    14cf:	65 76 65 6e 74 3b 78 20 3d 20 65 2e 63 6c 69 65     event;x = e.clie
    14df:	6e 74 58 20 2b 20 64 6f 63 75 6d 65 6e 74 2e 62     ntX + document.b
    14ef:	6f 64 79 2e 73 63 72 6f 6c 6c 4c 65 66 74 3b 69     ody.scrollLeft;i
    14ff:	66 20 28 69 65 29 7b 78 20 2d 3d 20 61 28 64 6f     f (ie){x -= a(do
    150f:	63 75 6d 65 6e 74 5b 27 73 70 27 5d 29 3b 7d 65     cument['sp']);}e
    151f:	6c 73 65 7b 78 20 2d 3d 20 64 6f 63 75 6d 65 6e     lse{x -= documen
    152f:	74 5b 27 73 70 27 5d 2e 6f 66 66 73 65 74 4c 65     t['sp'].offsetLe
    153f:	66 74 3b 7d 78 20 3d 20 70 61 72 73 65 49 6e 74     ft;}x = parseInt
    154f:	28 78 2a 32 35 36 2f 36 34 30 29 3b 64 6f 63 75     (x*256/640);docu
    155f:	6d 65 6e 74 5b 27 73 70 27 5d 2e 73 72 63 3d 27     ment['sp'].src='
    156f:	2f 73 65 72 76 6f 5f 27 2b 78 2b 27 2e 62 6d 70     /servo_'+x+'.bmp
    157f:	3f 27 2b 4d 61 74 68 2e 72 6f 75 6e 64 28 4d 61     ?'+Math.round(Ma
    158f:	74 68 2e 72 61 6e 64 6f 6d 28 29 2a 39 39 39 39     th.random()*9999
    159f:	29 3b 72 65 74 75 72 6e 20 66 61 6c 73 65 3b 7d     );return false;}
    15af:	3c 2f 73 63 72 69 70 74 3e 3c 69 6d 67 20 73 72     </script><img sr
    15bf:	63 3d 22 2f 63 61 6d 2f 70 69 63 2e 6a 70 67 22     c="/cam/pic.jpg"
    15cf:	20 73 74 79 6c 65 3d 22 62 6f 72 64 65 72 3a 20      style="border: 
    15df:	31 70 78 20 73 6f 6c 69 64 20 62 6c 61 63 6b 3b     1px solid black;
    15ef:	22 20 77 69 64 74 68 3d 22 36 34 30 22 20 68 65     " width="640" he
    15ff:	69 67 68 74 3d 22 34 38 30 22 3e 3c 62 72 3e 73     ight="480"><br>s
    160f:	65 72 76 6f 20 70 6f 73 69 74 69 6f 6e 20 28 63     ervo position (c
    161f:	6c 69 63 6b 20 69 6e 73 69 64 65 20 73 6c 69 64     lick inside slid
    162f:	65 72 20 74 6f 20 73 65 74 20 73 65 72 76 6f 20     er to set servo 
    163f:	70 6f 73 29 3c 62 72 3e 3c 69 6d 67 20 73 72 63     pos)<br><img src
    164f:	3d 22 2f 73 65 72 76 6f 5f 39 39 39 2e 62 6d 70     ="/servo_999.bmp
    165f:	22 20 6e 61 6d 65 3d 22 73 70 22 20 77 69 64 74     " name="sp" widt
    166f:	68 3d 22 36 34 30 22 20 68 65 69 67 68 74 3d 22     h="640" height="
    167f:	31 35 22 20 62 6f 72 64 65 72 3d 31 20 6f 6e 43     15" border=1 onC
    168f:	6c 69 63 6b 3d 22 72 65 74 75 72 6e 20 63 6c 28     lick="return cl(
    169f:	65 76 65 6e 74 29 3b 22 3e 3c 62 72 3e 00           event);"><br>.

000016ad <HTTPD_FILE_SITE_UPLOAD_HTML>:
    16ad:	3c 68 32 3e 75 70 6c 6f 61 64 20 66 69 6c 65 20     <h2>upload file 
    16bd:	74 6f 20 64 61 74 61 66 6c 61 73 68 3a 3c 2f 68     to dataflash:</h
    16cd:	32 3e 3c 66 6f 72 6d 20 61 63 74 69 6f 6e 3d 22     2><form action="
    16dd:	2f 61 64 6d 2f 75 70 2e 68 74 6d 22 20 65 6e 63     /adm/up.htm" enc
    16ed:	74 79 70 65 3d 22 6d 75 6c 74 69 70 61 72 74 2f     type="multipart/
    16fd:	66 6f 72 6d 2d 64 61 74 61 22 20 6d 65 74 68 6f     form-data" metho
    170d:	64 3d 22 70 6f 73 74 22 3e 73 65 6c 65 63 74 20     d="post">select 
    171d:	66 69 6c 65 20 3a 20 3c 69 6e 70 75 74 20 74 79     file : <input ty
    172d:	70 65 3d 22 66 69 6c 65 22 20 73 69 7a 65 3d 22     pe="file" size="
    173d:	34 38 22 20 6e 61 6d 65 3d 22 66 69 6c 65 22 3e     48" name="file">
    174d:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
    175d:	6d 69 74 22 20 6e 61 6d 65 3d 22 75 70 6c 6f 61     mit" name="uploa
    176d:	64 22 3e 3c 2f 66 6f 72 6d 3e 3c 62 72 3e 3c 62     d"></form><br><b
    177d:	72 3e 57 41 52 4e 49 4e 47 3a 20 6f 6e 6c 79 20     r>WARNING: only 
    178d:	74 65 73 74 65 64 20 77 69 74 68 20 66 69 72 65     tested with fire
    179d:	66 6f 78 2f 6c 69 6e 75 78 00                       fox/linux.

000017a7 <HTTPD_FILE_SITE_IO_HTML>:
    17a7:	3c 68 32 3e 3c 75 3e 49 4f 20 50 6f 72 74 20 63     <h2><u>IO Port c
    17b7:	6f 6e 74 72 6f 6c 3a 3c 2f 75 3e 3c 2f 68 32 3e     ontrol:</u></h2>
    17c7:	3c 53 43 52 49 50 54 20 6c 61 6e 67 75 61 67 65     <SCRIPT language
    17d7:	3d 22 4a 61 76 61 53 63 72 69 70 74 22 20 74 79     ="JavaScript" ty
    17e7:	70 65 3d 22 74 65 78 74 2f 6a 61 76 61 73 63 72     pe="text/javascr
    17f7:	69 70 74 22 3e 66 75 6e 63 74 69 6f 6e 20 73 70     ipt">function sp
    1807:	28 6e 2c 73 29 20 7b 64 6f 63 75 6d 65 6e 74 5b     (n,s) {document[
    1817:	6e 5d 2e 73 72 63 3d 27 2f 73 65 74 2f 27 2b 6e     n].src='/set/'+n
    1827:	2b 27 5f 27 2b 73 2b 27 2e 67 69 66 3f 27 2b 4d     +'_'+s+'.gif?'+M
    1837:	61 74 68 2e 72 6f 75 6e 64 28 4d 61 74 68 2e 72     ath.round(Math.r
    1847:	61 6e 64 6f 6d 28 29 2a 39 39 39 39 29 3b 7d 3c     andom()*9999);}<
    1857:	2f 53 43 52 49 50 54 3e 43 6f 6e 74 72 6f 6c 3c     /SCRIPT>Control<
    1867:	68 72 20 2f 3e 53 74 61 74 75 73 20 4c 45 44 20     hr />Status LED 
    1877:	3c 69 6d 67 20 6e 61 6d 65 3d 22 43 30 22 20 73     <img name="C0" s
    1887:	72 63 3d 22 2f 73 65 74 2f 24 24 49 43 30 22 20     rc="/set/$$IC0" 
    1897:	68 65 69 67 68 74 3d 22 31 35 22 20 77 69 64 74     height="15" widt
    18a7:	68 3d 22 31 35 22 20 61 6c 69 67 6e 3d 6d 69 64     h="15" align=mid
    18b7:	64 6c 65 3e 20 5b 20 3c 61 20 68 72 65 66 3d 22     dle> [ <a href="
    18c7:	6a 61 76 61 73 63 72 69 70 74 3a 73 70 28 27 43     javascript:sp('C
    18d7:	30 27 2c 31 29 22 3e 6f 6e 3c 2f 61 3e 20 7c 20     0',1)">on</a> | 
    18e7:	3c 61 20 68 72 65 66 3d 22 6a 61 76 61 73 63 72     <a href="javascr
    18f7:	69 70 74 3a 73 70 28 27 43 30 27 2c 30 29 22 3e     ipt:sp('C0',0)">
    1907:	6f 66 66 3c 2f 61 3e 20 5d 20 28 50 4f 52 54 43     off</a> ] (PORTC
    1917:	2e 30 29 3c 62 72 3e 3c 62 72 3e 41 43 20 20 53     .0)<br><br>AC  S
    1927:	77 69 74 63 68 20 3c 69 6d 67 20 6e 61 6d 65 3d     witch <img name=
    1937:	22 43 36 22 20 73 72 63 3d 22 2f 73 65 74 2f 24     "C6" src="/set/$
    1947:	24 49 44 36 22 20 68 65 69 67 68 74 3d 22 31 35     $ID6" height="15
    1957:	22 20 77 69 64 74 68 3d 22 31 35 22 20 61 6c 69     " width="15" ali
    1967:	67 6e 3d 6d 69 64 64 6c 65 3e 20 5b 20 3c 61 20     gn=middle> [ <a 
    1977:	68 72 65 66 3d 22 6a 61 76 61 73 63 72 69 70 74     href="javascript
    1987:	3a 73 70 28 27 43 36 27 2c 31 29 22 3e 6f 6e 3c     :sp('C6',1)">on<
    1997:	2f 61 3e 20 7c 20 3c 61 20 68 72 65 66 3d 22 6a     /a> | <a href="j
    19a7:	61 76 61 73 63 72 69 70 74 3a 73 70 28 27 43 36     avascript:sp('C6
    19b7:	27 2c 30 29 22 3e 6f 66 66 3c 2f 61 3e 20 5d 20     ',0)">off</a> ] 
    19c7:	28 50 4f 52 54 43 2e 36 29 3c 62 72 3e 3c 62 72     (PORTC.6)<br><br
    19d7:	3e 43 6f 6d 70 75 74 65 72 20 53 57 20 3c 69 6d     >Computer SW <im
    19e7:	67 20 6e 61 6d 65 3d 22 43 37 22 20 73 72 63 3d     g name="C7" src=
    19f7:	22 2f 73 65 74 2f 24 24 49 44 37 22 20 68 65 69     "/set/$$ID7" hei
    1a07:	67 68 74 3d 22 31 35 22 20 77 69 64 74 68 3d 22     ght="15" width="
    1a17:	31 35 22 20 61 6c 69 67 6e 3d 6d 69 64 64 6c 65     15" align=middle
    1a27:	3e 20 5b 20 3c 61 20 68 72 65 66 3d 22 6a 61 76     > [ <a href="jav
    1a37:	61 73 63 72 69 70 74 3a 73 70 28 27 43 37 27 2c     ascript:sp('C7',
    1a47:	31 29 22 3e 6f 6e 3c 2f 61 3e 20 7c 20 3c 61 20     1)">on</a> | <a 
    1a57:	68 72 65 66 3d 22 6a 61 76 61 73 63 72 69 70 74     href="javascript
    1a67:	3a 73 70 28 27 43 37 27 2c 30 29 22 3e 6f 66 66     :sp('C7',0)">off
    1a77:	3c 2f 61 3e 20 5d 20 28 50 4f 52 54 43 2e 37 29     </a> ] (PORTC.7)
    1a87:	3c 62 72 3e 3c 62 72 3e 3c 62 72 3e 3c 62 72 3e     <br><br><br><br>
    1a97:	20 45 78 74 65 72 6e 20 53 74 61 74 75 73 3c 68      Extern Status<h
    1aa7:	72 20 2f 3e 50 4f 52 54 44 2e 33 20 3c 69 6d 67     r />PORTD.3 <img
    1ab7:	20 6e 61 6d 65 3d 22 44 33 22 20 73 72 63 3d 22      name="D3" src="
    1ac7:	2f 73 65 74 2f 24 24 49 44 30 22 20 68 65 69 67     /set/$$ID0" heig
    1ad7:	68 74 3d 22 31 35 22 20 77 69 64 74 68 3d 22 31     ht="15" width="1
    1ae7:	35 22 20 61 6c 69 67 6e 3d 6d 69 64 64 6c 65 3e     5" align=middle>
    1af7:	20 28 50 35 32 31 29 3c 62 72 3e 3c 62 72 3e 50      (P521)<br><br>P
    1b07:	4f 52 54 44 2e 36 20 3c 69 6d 67 20 6e 61 6d 65     ORTD.6 <img name
    1b17:	3d 22 44 36 22 20 73 72 63 3d 22 2f 73 65 74 2f     ="D6" src="/set/
    1b27:	24 24 49 44 31 22 20 68 65 69 67 68 74 3d 22 31     $$ID1" height="1
    1b37:	35 22 20 77 69 64 74 68 3d 22 31 35 22 20 61 6c     5" width="15" al
    1b47:	69 67 6e 3d 6d 69 64 64 6c 65 3e 20 28 50 35 32     ign=middle> (P52
    1b57:	31 29 3c 62 72 3e 3c 62 72 3e 00                    1)<br><br>.

00001b62 <HTTPD_FILE_NOT_FOUND>:
    1b62:	3c 68 74 6d 6c 3e 3c 62 6f 64 79 3e 34 30 34 3a     <html><body>404:
    1b72:	20 66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3c      file not found<
    1b82:	68 72 3e 41 56 52 56 69 20 45 74 68 65 72 6e 65     hr>AVRVi Etherne
    1b92:	74 20 49 4f 20 77 65 62 73 65 72 76 65 72 3c 2f     t IO webserver</
    1ba2:	62 6f 64 79 3e 3c 2f 68 74 6d 6c 3e 00              body></html>.

00001baf <HTTPD_BUTTON_RED>:
    1baf:	47 49 46 38 37 61 0f 00 0f 00 c2 08 00 b5 05 2b     GIF87a.........+
    1bbf:	cc 01 32 a7 1b 38 b1 47 5c bb 6f 7e d5 67 7e e6     ..2..8.G\.o~.g~.
    1bcf:	9a ab fc f6 f8 2c 00 00 00 00 0f 00 0f 00 00 03     .....,..........
    1bdf:	50 78 aa 56 6e 2b 1e 13 88 25 02 14 59 c4 bd 86     Px.Vn+...%..Y...
    1bef:	b0 31 c0 67 8a 0a 20 78 2c b6 66 13 20 ab ab 9c     .1.g.. x,.f. ...
    1bff:	c9 ce ac ef b4 1e 00 3f a0 ec 57 08 18 8d c0 e3     .......?..W.....
    1c0f:	b1 a4 6c 2a 09 87 e6 c0 19 50 10 02 83 2c 36 cb     ..l*.....P...,6.
    1c1f:	15 2c 04 dc 70 d6 1b b9 8a 03 64 c9 01 a3 81 46     .,..p.....d....F
    1c2f:	12 00 3b                                            ..;

00001c32 <HTTPD_BUTTON_GREEN>:
    1c32:	47 49 46 38 37 61 0f 00 0f 00 c2 08 00 58 a7 1b     GIF87a.......X..
    1c42:	54 b5 05 75 b1 47 61 cc 01 90 bb 6f 98 d5 67 bd     T..u.Ga....o..g.
    1c52:	e6 9a ff ff ff 2c 00 00 00 00 0f 00 0f 00 00 03     .....,..........
    1c62:	50 78 aa 56 6e 2b 1e 13 88 25 02 14 59 c4 bd 86     Px.Vn+...%..Y...
    1c72:	b0 31 c0 67 8a 0a 20 78 2c b6 66 13 20 ab ab 9c     .1.g.. x,.f. ...
    1c82:	c9 ce ac ef b4 1e 00 3f a0 ec 57 08 18 8d c0 e3     .......?..W.....
    1c92:	b1 a4 6c 2a 09 87 e6 c0 19 50 10 02 83 2c 36 cb     ..l*.....P...,6.
    1ca2:	15 2c 04 dc 70 d6 1b b9 8a 03 64 c9 01 a3 81 46     .,..p.....d....F
    1cb2:	12 00 3b                                            ..;

00001cb5 <HTTPD_FILE_ICON_GIF>:
    1cb5:	47 49 46 38 37 61 0c 00 12 00 80 01 00 00 00 00     GIF87a..........
    1cc5:	ff ff ff 2c 00 00 00 00 0c 00 12 00 00 02 22 84     ...,..........".
    1cd5:	0f a1 9a 1b e6 da 4a 52 b2 fb 5c be 76 b3 8e 1c     ......JR..\.v...
    1ce5:	9a 06 8d 53 47 a2 91 7a 9a ad fb 84 32 0b d7 70     ...SG..z....2..p
    1cf5:	01 00 3b                                            ..;

00001cf8 <HTTPD_CAM_BUSY_JPG>:
    1cf8:	ff d8 ff e0 00 10 4a 46 49 46 00 01 01 01 00 48     ......JFIF.....H
    1d08:	00 48 00 00 ff db 00 43 00 ff ff ff ff ff ff ff     .H.....C........
    1d18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d48:	ff ff ff ff ff ff ff ff ff ff c0 00 0b 08 00 60     ...............`
    1d58:	00 80 01 01 22 00 ff c4 00 17 00 01 01 01 01 00     ...."...........
	...
    1d74:	01 02 03 ff c4 00 2c 10 01 00 02 00 04 04 05 04     ......,.........
    1d84:	03 01 01 00 00 00 00 00 01 00 11 02 21 31 41 12     ............!1A.
    1d94:	51 71 d1 22 61 81 c1 f0 32 42 a1 b1 82 91 e1 43     Qq."a...2B.....C
    1da4:	72 ff da 00 08 01 01 00 00 3f 00 e7 11 11 11 12     r........?......
    1db4:	d3 57 b4 91 11 11 12 85 f9 06 ac d5 61 72 16 fc     .W..........ar..
    1dc4:	f7 f9 f0 90 0a b7 4b ac b5 8a 11 4b cb 51 ff 00     ......K....K.Q..
    1dd4:	20 0a b7 67 3e 9d ee 5e 11 2c 50 de e4 a1 14 bc      ..g>..^.,P.....
    1de4:	b5 1f f2 66 74 cb 80 bd 2f bc ca 15 66 9b 8e a7     ...ft.../...f...
    1df4:	cf 9e 4a f0 8e eb de 2b c2 bb 8f 68 a0 05 bc f9     ..J....+...h....
    1e04:	7f b0 80 99 d8 ff 00 67 cf 84 98 8a 6a 31 01 96     .......g....j1..
    1e14:	f5 9f 59 ac 1a 62 37 4e fd e6 4c 2a d4 d0 06 1e     ..Y..b7N..L*....
    1e24:	2a bc fd 0e f2 99 e1 c4 d0 65 b1 57 93 33 f6 7f     *........e.W.3..
    1e34:	2f 69 4f a1 eb da 30 e9 8b a7 b3 31 36 fd 07 5e     /iO...0....16..^
    1e44:	f2 19 61 c4 f3 a0 f9 f3 49 5f a0 eb de 3e c7 af     ..a.....I_...>..
    1e54:	68 b4 0b 04 f3 fd 49 88 28 42 af 6f 9f 34 ca 68     h.....I.(B.o.4.h
    1e64:	f1 70 bc b5 f4 cc d7 f3 d6 61 6d 59 25 71 2e f0     .p.......amY%q..
    1e74:	29 a3 1c 4e 79 ea 54 97 95 6d 77 2d b5 5b 40 a5     )..Ny.T..mw-.[@.
    1e84:	d6 fa c9 29 89 32 18 55 d6 05 34 63 89 72 bd 60     ...).2.U..4c.r.`
    1e94:	c4 9a 30 aa e6 cd 3e 1c 35 bb b5 e8 7c ca 62 26     ..0...>.5...|.b&
    1ea4:	83 c2 bc 9e dd e6 62 22 22 22 22 5c a9 cf 3d 89     ......b""""\..=.
    1eb4:	22 22 74 17 81 79 34 7e 24 1a c2 bb de 5d 6b b5     ""t..y4~$....]k.
    1ec4:	c6 16 d4 77 3f 5f 2e 4c 39 5b c8 fc b3 33 46 99     ...w?_.L9[...3F.
    1ed4:	19 de b5 a1 ed 35 4b 85 e2 db 31 cb d7 4e 92 1e     .....5K...1..N..
    1ee4:	1c 37 ba eb cb 59 46 f0 e2 bd 43 5f ee 64 d3 23     .7...YF...C_.d.#
    1ef4:	3b d6 b4 3d a6 a9 70 bc 5b 66 39 7a e9 d2 43 e8     ;..=..p.[f9z..C.
    1f04:	7a f6 95 68 c3 5a f0 99 f9 7c b9 31 67 84 77 bd     z..h.Z...|.1g.w.
    1f14:	7f be d3 11 36 53 85 2c 1b df d3 b4 9f 6f f2 f6     ....6S.,.....o..
    1f24:	99 32 ce 6f 12 55 1b bc 5f 3a eb 31 36 53 86 ac     .2.o.U.._:.16S..
    1f34:	1b ce f2 bf 9e d0 50 62 2c b4 f4 df 4f 38 11 c3     ......Pb,...O8..
    1f44:	c2 b4 8e 5c bd 65 00 c3 8b 31 6b 3a d3 7a 90 a7     ...\.e...1k:.z..
    1f54:	0d 58 37 9d e5 7f 3d a0 a0 c4 59 69 e9 be 9e 70     .X7...=...Yi...p
    1f64:	3e 04 de fb 49 8b 6f fc 92 af 80 37 be f3 11 11     >...I.o....7....
    1f74:	29 5b 90 b6 dc 91 12 89 54 9b dd 9a 92 d8 08 5e     )[......T......^
    1f84:	7a af eb 29 98 88 88 88 9b 6d e1 1a f2 fc 6b 27     z..).....m....k'
    1f94:	0b cc 33 ac dd 7a 48 89 ac 93 ab c5 7e 1d 0e 9e     ..3..zH.....~...
    1fa4:	f3 9a ae ba c9 ae 44 d7 0b cc be 57 9c 80 ad 56     ......D....W...V
    1fb4:	72 f0 bc c7 c8 73 90 17 49 78 5f 26 b5 a6 66 22     r....s..Ix_&..f"
    1fc4:	27 47 fe 7e 9e d3 18 be a7 af eb 29 ac 7a fa 7b     'G.~.......).z.{
    1fd4:	b3 25 d9 5a ed 0a de 7a 9e d2 e2 db 9d 17 20 d2     .%.Z...z...... .
    1fe4:	51 7e 53 5e 15 c9 45 f9 f3 39 70 9f 5d f2 cf 9e     Q~S^..E..9p.]...
    1ff4:	ff 00 b9 07 08 95 c5 7e 92 9f 7b d7 a9 ac c1 77     .......~..{....w
    2004:	96 b2 44 44 d7 17 d3 97 d3 f9 d3 b4 cb 9a bc d9     ..DD............
    2014:	71 3c 4d e9 94 93 5c 43 9b 84 be be d2 2a b6 c0     q<M...\C.....*..
    2024:	d3 72 f1 1a f0 97 ce f7 e9 20 a3 72 f1 06 66 1a     .r....... .r..f.
    2034:	79 dd fe 24 14 6e 5e 2a d0 05 df 59 98 88 88 88     y..$.n^*...Y....
    2044:	88 88 88 88 88 9f ff d9                             ........

0000204c <__c.2458>:
    204c:	2e 67 69 66 00                                      .gif.

00002051 <__c.2202>:
    2051:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 44 6f 63     HTTP/1.0 200 Doc
    2061:	75 6d 65 6e 74 20 66 6f 6c 6c 6f 77 73 0d 0a 43     ument follows..C
    2071:	6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 78     ontent-Type: tex
    2081:	74 2f 68 74 6d 6c 0d 0a 0d 0a 00                    t/html.....

0000208c <__c.2197>:
    208c:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00     ---------------.

0000209c <__c.2163>:
    209c:	61 64 6d 2f 00                                      adm/.

000020a1 <__c.2152>:
    20a1:	66 69 6c 65 6e 61 6d 65 3d 22 00                    filename=".

000020ac <__c.2144>:
    20ac:	61 64 6d 69 6e 3a 31 65 74 68 31 00                 admin:1eth1.

000020b8 <__c.2137>:
    20b8:	41 75 74 68 6f 72 69 7a 61 74 69 6f 6e 3a 20 42     Authorization: B
    20c8:	61 73 69 63 20 00                                   asic .

000020ce <__c.2135>:
    20ce:	61 64 6d 2f 00                                      adm/.

000020d3 <__c.2130>:
    20d3:	74 68 3a 20 00                                      th: .

000020d8 <__c.2128>:
    20d8:	61 64 6d 2f 00                                      adm/.

000020dd <__c.2126>:
    20dd:	61 64 6d 2f 6d 6b 66 73 32 00                       adm/mkfs2.

000020e7 <__c.2124>:
    20e7:	61 64 6d 2f 6d 6b 66 73 00                          adm/mkfs.

000020f0 <__c.2122>:
    20f0:	61 64 6d 2f 72 6d 2f 00                             adm/rm/.

000020f8 <__c.2120>:
    20f8:	61 64 6d 2f 75 70 00                                adm/up.

000020ff <__c.2118>:
    20ff:	66 73 2f 00                                         fs/.

00002103 <__c.2116>:
    2103:	73 65 74 2f 00                                      set/.

00002108 <__c.2114>:
    2108:	73 65 72 76 6f 5f 00                                servo_.

0000210f <__c.2112>:
    210f:	73 69 74 65 2f 73 65 72 76 6f 00                    site/servo.

0000211a <__c.2110>:
    211a:	63 61 6d 2f 62 75 73 79 00                          cam/busy.

00002123 <__c.2108>:
    2123:	63 61 6d 2f 70 69 63 00                             cam/pic.

0000212b <__c.2106>:
    212b:	66 73 2f 6c 73 00                                   fs/ls.

00002131 <__c.2104>:
    2131:	67 72 61 70 68 5f 30 00                             graph_0.

00002139 <__c.2102>:
    2139:	73 69 74 65 2f 66 69 63 6f 6e 00                    site/ficon.

00002144 <__c.2100>:
    2144:	73 69 74 65 2f 69 6f 00                             site/io.

0000214c <__c.2098>:
    214c:	73 69 74 65 2f 74 65 6d 70 00                       site/temp.

00002156 <__c.2096>:
    2156:	73 69 74 65 2f 63 61 6d 00                          site/cam.

0000215f <__c.2094>:
    215f:	69 6e 64 65 78 00                                   index.

00002165 <enc28j60_config>:
    2165:	04 00 05 1a 06 ff 07 1f 08 00 09 00 0a ff 0b 19     ................
    2175:	c1 00 c0 0d c2 32 ca ee cb 05 c4 12 c6 12 c7 0c     .....2..........
    2185:	e4 00 e5 56 e2 4c e3 41 e0 42 e1 30                 ...V.L.A.B.0

00002191 <__c.1469>:
    2191:	0d 0a 00                                            ...

00002194 <NTP_CLIENT_MONTH_TO_DAYS>:
    2194:	1f 1d 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000021a0 <__ctors_end>:
    21a0:	11 24       	eor	r1, r1
    21a2:	1f be       	out	0x3f, r1	; 63
    21a4:	cf e5       	ldi	r28, 0x5F	; 95
    21a6:	d8 e0       	ldi	r29, 0x08	; 8
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	cd bf       	out	0x3d, r28	; 61

000021ac <__do_copy_data>:
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	a0 e6       	ldi	r26, 0x60	; 96
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e0 e6       	ldi	r30, 0x60	; 96
    21b4:	fb e7       	ldi	r31, 0x7B	; 123
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <.do_copy_data_start>

000021b8 <.do_copy_data_loop>:
    21b8:	05 90       	lpm	r0, Z+
    21ba:	0d 92       	st	X+, r0

000021bc <.do_copy_data_start>:
    21bc:	ac 37       	cpi	r26, 0x7C	; 124
    21be:	b1 07       	cpc	r27, r17
    21c0:	d9 f7       	brne	.-10     	; 0x21b8 <.do_copy_data_loop>

000021c2 <__do_clear_bss>:
    21c2:	17 e0       	ldi	r17, 0x07	; 7
    21c4:	ac e7       	ldi	r26, 0x7C	; 124
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <.do_clear_bss_start>

000021ca <.do_clear_bss_loop>:
    21ca:	1d 92       	st	X+, r1

000021cc <.do_clear_bss_start>:
    21cc:	a2 38       	cpi	r26, 0x82	; 130
    21ce:	b1 07       	cpc	r27, r17
    21d0:	e1 f7       	brne	.-8      	; 0x21ca <.do_clear_bss_loop>
    21d2:	0e 94 ef 10 	call	0x21de	; 0x21de <main>
    21d6:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <_exit>

000021da <__bad_interrupt>:
    21da:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000021de <main>:

//global ethernetbuffer
unsigned char buffer[NIC_BUFFERSIZE];

int main(void){
    21de:	1f 93       	push	r17
	int len;
	unsigned int type;
	unsigned int port;
	
	DDRB  = 0xFF;
    21e0:	8f ef       	ldi	r24, 0xFF	; 255
    21e2:	87 bb       	out	0x17, r24	; 23
	DDRC  = 0xFF;
    21e4:	84 bb       	out	0x14, r24	; 20
	PORTB = 0xFF;
    21e6:	88 bb       	out	0x18, r24	; 24

	//flash status led 5 times
	led_init();
    21e8:	a0 9a       	sbi	0x14, 0	; 20
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	a0 e0       	ldi	r26, 0x00	; 0
    21f0:	b8 e4       	ldi	r27, 0x48	; 72
	for(unsigned b=0; b<5; b++){
		LED_STATUS_ON(); //PORTC |= (1<<3);
    21f2:	a8 9a       	sbi	0x15, 0	; 21
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f8:	cd 01       	movw	r24, r26
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <main+0x1c>
		for(int t=0; t<8; t++)
    21fe:	2f 5f       	subi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	28 30       	cpi	r18, 0x08	; 8
    2204:	31 05       	cpc	r19, r1
    2206:	c1 f7       	brne	.-16     	; 0x21f8 <main+0x1a>
			_delay_ms(10);
		LED_STATUS_OFF(); //PORTC &= ~(1<<3);
    2208:	a8 98       	cbi	0x15, 0	; 21
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	e0 e0       	ldi	r30, 0x00	; 0
    2210:	f8 e4       	ldi	r31, 0x48	; 72
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2212:	cf 01       	movw	r24, r30
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <main+0x36>
		for(int t=0; t<8; t++)
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	28 30       	cpi	r18, 0x08	; 8
    221e:	31 05       	cpc	r19, r1
    2220:	c1 f7       	brne	.-16     	; 0x2212 <main+0x34>
    2222:	4f 5f       	subi	r20, 0xFF	; 255
    2224:	5f 4f       	sbci	r21, 0xFF	; 255
    2226:	45 30       	cpi	r20, 0x05	; 5
    2228:	51 05       	cpc	r21, r1
    222a:	19 f7       	brne	.-58     	; 0x21f2 <main+0x14>
			_delay_ms(10);
	}	


	//initialise everything:
	softuart_init();
    222c:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <softuart_init>
	softuart_puts_progmem("init:");
    2230:	8e e7       	ldi	r24, 0x7E	; 126
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <softuart_puts_progmem2>
	softuart_putnewline();
    2238:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
	
	clock_init();
    223c:	0e 94 89 37 	call	0x6f12	; 0x6f12 <clock_init>
//	mpf10_init();
	servo_init();
    2240:	0e 94 b7 11 	call	0x236e	; 0x236e <servo_init>

//	mca25_init();
//	mca25_configure();
	nic_init();
    2244:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <nic_init>
	ntp_client_init();
    2248:	0e 94 ce 3b 	call	0x779c	; 0x779c <ntp_client_init>
//	lm75_init();
//	logger_init();
	tcp_init();
    224c:	0e 94 3c 30 	call	0x6078	; 0x6078 <tcp_init>
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	e0 e0       	ldi	r30, 0x00	; 0
    2256:	f8 e4       	ldi	r31, 0x48	; 72
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2258:	cf 01       	movw	r24, r30
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <main+0x7c>
//	http_client_init();

//	dataflash_init();
//	filesystem_init();
//	filesystem_format(); //erase filesystem! takes a long time !!
//	filesystem_list_files();

	//wait some time (800ms)
	for(int t=0; t<80; t++)
    225e:	2f 5f       	subi	r18, 0xFF	; 255
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	20 35       	cpi	r18, 0x50	; 80
    2264:	31 05       	cpc	r19, r1
    2266:	c1 f7       	brne	.-16     	; 0x2258 <main+0x7a>
			_delay_ms(10);

	//send an ntp time request
	ntp_client_send_request(buffer);
    2268:	8c e7       	ldi	r24, 0x7C	; 124
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 b8 3c 	call	0x7970	; 0x7970 <ntp_client_send_request>

	//main loop, never ends !
	while(1){
		//is there a packet ?
		len = nic_receive_packet(&buffer[0],NIC_BUFFERSIZE);
    2270:	6e e1       	ldi	r22, 0x1E	; 30
    2272:	74 e0       	ldi	r23, 0x04	; 4
    2274:	8c e7       	ldi	r24, 0x7C	; 124
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 54 39 	call	0x72a8	; 0x72a8 <nic_receive_packet>
    227c:	bc 01       	movw	r22, r24
		
    if (len>0){
    227e:	18 16       	cp	r1, r24
    2280:	19 06       	cpc	r1, r25
    2282:	0c f0       	brlt	.+2      	; 0x2286 <main+0xa8>
    2284:	49 c0       	rjmp	.+146    	; 0x2318 <main+0x13a>
			//softuart_puts_progmem("RX\n");
			//packet type
			type = (buffer[12]<<8) + buffer[13];
    2286:	80 91 88 00 	lds	r24, 0x0088
    228a:	99 27       	eor	r25, r25
    228c:	38 2f       	mov	r19, r24
    228e:	22 27       	eor	r18, r18
    2290:	80 91 89 00 	lds	r24, 0x0089
    2294:	28 0f       	add	r18, r24
    2296:	31 1d       	adc	r19, r1

			
			if(type == ETHERNET_TYPE_ARP){
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	26 30       	cpi	r18, 0x06	; 6
    229c:	38 07       	cpc	r19, r24
    229e:	69 f4       	brne	.+26     	; 0x22ba <main+0xdc>
				///ARP packet
				arp_packet_in(buffer,len);
    22a0:	8c e7       	ldi	r24, 0x7C	; 124
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	0e 94 4c 3a 	call	0x7498	; 0x7498 <arp_packet_in>
				//check if we have to call ntp_client:
				if (ntp_client_call_again == 1)
    22a8:	80 91 7d 07 	lds	r24, 0x077D
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	a1 f5       	brne	.+104    	; 0x2318 <main+0x13a>
					ntp_client_send_request(buffer);
    22b0:	8c e7       	ldi	r24, 0x7C	; 124
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 b8 3c 	call	0x7970	; 0x7970 <ntp_client_send_request>
    22b8:	2f c0       	rjmp	.+94     	; 0x2318 <main+0x13a>

			}else if (type == ETHERNET_TYPE_IP){
    22ba:	20 50       	subi	r18, 0x00	; 0
    22bc:	38 40       	sbci	r19, 0x08	; 8
    22be:	61 f5       	brne	.+88     	; 0x2318 <main+0x13a>
				///IP packet

				//ip protocol:
				unsigned char ip_protocol = buffer[IP_POS_IPTYPE];
    22c0:	10 91 93 00 	lds	r17, 0x0093

				switch (ip_protocol){
    22c4:	16 30       	cpi	r17, 0x06	; 6
    22c6:	49 f0       	breq	.+18     	; 0x22da <main+0xfc>
    22c8:	11 31       	cpi	r17, 0x11	; 17
    22ca:	61 f0       	breq	.+24     	; 0x22e4 <main+0x106>
    22cc:	11 30       	cpi	r17, 0x01	; 1
    22ce:	d9 f4       	brne	.+54     	; 0x2306 <main+0x128>
					///icmp packet:
					case (IP_PROTOCOL_ICMP):
						icmp_packet_in(&buffer[0],len);
    22d0:	8c e7       	ldi	r24, 0x7C	; 124
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 07 38 	call	0x700e	; 0x700e <icmp_packet_in>
    22d8:	1f c0       	rjmp	.+62     	; 0x2318 <main+0x13a>
						break;
	
					///tcp packet:
					case(IP_PROTOCOL_TCP):
						//port = (buffer[TCP_POS_DST_PORT]<<8) + buffer[TCP_POS_DST_PORT+1];
						tcp_packet_in(buffer,len);
    22da:	8c e7       	ldi	r24, 0x7C	; 124
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 4a 30 	call	0x6094	; 0x6094 <tcp_packet_in>
    22e2:	1a c0       	rjmp	.+52     	; 0x2318 <main+0x13a>
						break;

					///udp packet:
					case(IP_PROTOCOL_UDP):
						port = (buffer[UDP_POS_DEST_PORT]<<8) + buffer[UDP_POS_DEST_PORT+1];
						
						switch (port){
    22e4:	80 91 a0 00 	lds	r24, 0x00A0
    22e8:	99 27       	eor	r25, r25
    22ea:	98 2f       	mov	r25, r24
    22ec:	88 27       	eor	r24, r24
    22ee:	20 91 a1 00 	lds	r18, 0x00A1
    22f2:	82 0f       	add	r24, r18
    22f4:	91 1d       	adc	r25, r1
    22f6:	8b 5b       	subi	r24, 0xBB	; 187
    22f8:	9c 49       	sbci	r25, 0x9C	; 156
    22fa:	71 f4       	brne	.+28     	; 0x2318 <main+0x13a>
							//packet for udp client ?
							case(IP_PORT_NTP_CLIENT):
								ntp_client_decode_packet(buffer, len);
    22fc:	8c e7       	ldi	r24, 0x7C	; 124
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <ntp_client_decode_packet>
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <main+0x13a>
								break;

							//unknown udp packet:
							default:
								#if UDP_DEBUG
								softuart_puts_progmem("UDP : ?\r\n");
								#endif
								break;
						}
						
						break;

					///unknown:
					default:
						softuart_puts("??? : ip proto ");
    2306:	80 e6       	ldi	r24, 0x60	; 96
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <softuart_puts>
						softuart_put_uint8(ip_protocol);
    230e:	81 2f       	mov	r24, r17
    2310:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
						softuart_putnewline();
    2314:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
				}
			}
			
		}

		//calc new time:
		clock_do();
    2318:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <clock_do>

		//every new second:
		if (CLOCK_TEST_FLAG(CLOCK_SEC)){
    231c:	80 91 3e 07 	lds	r24, 0x073E
    2320:	82 ff       	sbrs	r24, 2
    2322:	a6 cf       	rjmp	.-180    	; 0x2270 <main+0x92>
			if (clock[CLOCK_SEC]&0x01)
    2324:	80 91 42 07 	lds	r24, 0x0742
    2328:	80 ff       	sbrs	r24, 0
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <main+0x152>
				LED_STATUS_ON();
    232c:	a8 9a       	sbi	0x15, 0	; 21
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <main+0x154>
			else
				LED_STATUS_OFF();
    2330:	a8 98       	cbi	0x15, 0	; 21
			//call tcp cleanup:
			tcp_ttl_cleanup();
    2332:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <tcp_ttl_cleanup>

			//call mca25 cleanup:
//			mca25_cleanup();

			//call templogger:
//			logger_do();

			//clear flag:
			CLOCK_CLEAR_FLAG(CLOCK_SEC);
    2336:	80 91 3e 07 	lds	r24, 0x073E
    233a:	8b 7f       	andi	r24, 0xFB	; 251
    233c:	80 93 3e 07 	sts	0x073E, r24
    2340:	97 cf       	rjmp	.-210    	; 0x2270 <main+0x92>

00002342 <servo_set_pos>:
	//initialise
	servo_set_pos(127);
}

void servo_set_pos(unsigned char val){
    2342:	80 93 9a 04 	sts	0x049A, r24
	#define CALC_1MS F_CPU/256/1000 //=28.8
	servo_pos = val;
	OCR2 = (CALC_1MS - 5 + (unsigned char)(((unsigned int)servo_pos*CALC_1MS)/255));
    2346:	99 27       	eor	r25, r25
    2348:	aa 27       	eor	r26, r26
    234a:	bb 27       	eor	r27, r27
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e8       	ldi	r19, 0x80	; 128
    2354:	40 e7       	ldi	r20, 0x70	; 112
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <__mulsi3>
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	38 e1       	ldi	r19, 0x18	; 24
    2360:	44 ee       	ldi	r20, 0xE4	; 228
    2362:	53 e0       	ldi	r21, 0x03	; 3
    2364:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    2368:	29 5e       	subi	r18, 0xE9	; 233
    236a:	23 bd       	out	0x23, r18	; 35
    236c:	08 95       	ret

0000236e <servo_init>:
    236e:	8e e6       	ldi	r24, 0x6E	; 110
    2370:	85 bd       	out	0x25, r24	; 37
    2372:	8f 9a       	sbi	0x11, 7	; 17
    2374:	8f e7       	ldi	r24, 0x7F	; 127
    2376:	0e 94 a1 11 	call	0x2342	; 0x2342 <servo_set_pos>
    237a:	08 95       	ret

0000237c <servo_generate_bmp>:
}

unsigned int servo_generate_bmp(unsigned char *buffer, unsigned int datapos, unsigned int len, unsigned int streampos, unsigned char source){
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	ec 01       	movw	r28, r24
	unsigned char out;
	unsigned int x;

	//step1: send bmp header (if requested)
	PGM_P header_ptr = SERVO_BMP_HEAD;
    2388:	e4 e8       	ldi	r30, 0x84	; 132
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	dc 01       	movw	r26, r24
    238e:	a6 0f       	add	r26, r22
    2390:	b7 1f       	adc	r27, r23
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <servo_generate_bmp+0x2c>

	for(x=streampos; x<SERVO_BMP_HEADER_LENGTH; x++){
		buffer[datapos++] = pgm_read_byte(header_ptr++);
    2394:	84 91       	lpm	r24, Z
    2396:	8d 93       	st	X+, r24
		streampos++;
		len--;
    2398:	41 50       	subi	r20, 0x01	; 1
    239a:	50 40       	sbci	r21, 0x00	; 0
		//no more data allowed
		if (len == 0)
    239c:	89 f1       	breq	.+98     	; 0x2400 <servo_generate_bmp+0x84>
    239e:	31 96       	adiw	r30, 0x01	; 1
    23a0:	6f 5f       	subi	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	2f 5f       	subi	r18, 0xFF	; 255
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	2e 33       	cpi	r18, 0x3E	; 62
    23aa:	31 05       	cpc	r19, r1
    23ac:	98 f3       	brcs	.-26     	; 0x2394 <servo_generate_bmp+0x18>
			return 0;
	}

	//step2 generate plot:
	//calculate position: streampos must be > PLOT_BMP_HEADER_LEN now...
	streampos -= SERVO_BMP_HEADER_LENGTH;

	//now show image:
	out = 0;
	unsigned char spos = servo_pos;
    23ae:	f0 90 9a 04 	lds	r15, 0x049A
	for(unsigned char i=streampos; i<256/8; i++){
    23b2:	12 2f       	mov	r17, r18
    23b4:	1e 53       	subi	r17, 0x3E	; 62
    23b6:	c6 0f       	add	r28, r22
    23b8:	d7 1f       	adc	r29, r23
    23ba:	00 e0       	ldi	r16, 0x00	; 0
    23bc:	15 c0       	rjmp	.+42     	; 0x23e8 <servo_generate_bmp+0x6c>
		for(unsigned char b=0; b<8; b++){
			out = out << 1;
    23be:	00 0f       	add	r16, r16
			if (i*8+b < spos){
    23c0:	9d 01       	movw	r18, r26
    23c2:	2e 0f       	add	r18, r30
    23c4:	3f 1f       	adc	r19, r31
    23c6:	8f 2d       	mov	r24, r15
    23c8:	99 27       	eor	r25, r25
    23ca:	28 17       	cp	r18, r24
    23cc:	39 07       	cpc	r19, r25
    23ce:	0c f4       	brge	.+2      	; 0x23d2 <servo_generate_bmp+0x56>
				out |= 1;
    23d0:	01 60       	ori	r16, 0x01	; 1
    23d2:	31 96       	adiw	r30, 0x01	; 1
    23d4:	e8 30       	cpi	r30, 0x08	; 8
    23d6:	f1 05       	cpc	r31, r1
    23d8:	91 f7       	brne	.-28     	; 0x23be <servo_generate_bmp+0x42>
			}
		}
		buffer[datapos++] = out;
    23da:	09 93       	st	Y+, r16
		len--;
    23dc:	41 50       	subi	r20, 0x01	; 1
    23de:	50 40       	sbci	r21, 0x00	; 0
		//streampos++;

		if (len == 0)
    23e0:	79 f0       	breq	.+30     	; 0x2400 <servo_generate_bmp+0x84>
    23e2:	6f 5f       	subi	r22, 0xFF	; 255
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	1f 5f       	subi	r17, 0xFF	; 255
    23e8:	10 32       	cpi	r17, 0x20	; 32
    23ea:	60 f4       	brcc	.+24     	; 0x2404 <servo_generate_bmp+0x88>
    23ec:	a1 2f       	mov	r26, r17
    23ee:	bb 27       	eor	r27, r27
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	aa 0f       	add	r26, r26
    23f4:	bb 1f       	adc	r27, r27
    23f6:	8a 95       	dec	r24
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <servo_generate_bmp+0x76>
    23fa:	e0 e0       	ldi	r30, 0x00	; 0
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	df cf       	rjmp	.-66     	; 0x23be <servo_generate_bmp+0x42>
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	70 e0       	ldi	r23, 0x00	; 0
			return 0;
	}

	return datapos;
}
    2404:	cb 01       	movw	r24, r22
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	08 95       	ret

00002412 <base64_reverse_lookup>:

//ACTIVATE DEBUG by editing this file:
#include "../debug.h"

unsigned char base64_reverse_lookup(unsigned char c){
    2412:	8d 33       	cpi	r24, 0x3D	; 61
    2414:	19 f4       	brne	.+6      	; 0x241c <base64_reverse_lookup+0xa>
	if (c=='=')
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	08 95       	ret
		return 0;

	if (c == '/')
    241c:	8f 32       	cpi	r24, 0x2F	; 47
    241e:	19 f4       	brne	.+6      	; 0x2426 <base64_reverse_lookup+0x14>
    2420:	80 e4       	ldi	r24, 0x40	; 64
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	08 95       	ret
		return (2*26+10+2);

	if (c == '+')
    2426:	8b 32       	cpi	r24, 0x2B	; 43
    2428:	19 f4       	brne	.+6      	; 0x2430 <base64_reverse_lookup+0x1e>
    242a:	8f e3       	ldi	r24, 0x3F	; 63
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	08 95       	ret
		return (2*26+10+1);

	if (c <= '9')
    2430:	8a 33       	cpi	r24, 0x3A	; 58
    2432:	10 f4       	brcc	.+4      	; 0x2438 <base64_reverse_lookup+0x26>
		return c+4; //(62+c)-'0';
    2434:	8c 5f       	subi	r24, 0xFC	; 252
    2436:	03 c0       	rjmp	.+6      	; 0x243e <base64_reverse_lookup+0x2c>

	if (c <= 'Z')
    2438:	8b 35       	cpi	r24, 0x5B	; 91
    243a:	18 f4       	brcc	.+6      	; 0x2442 <base64_reverse_lookup+0x30>
		return c-'A';
    243c:	81 54       	subi	r24, 0x41	; 65
    243e:	99 27       	eor	r25, r25
    2440:	08 95       	ret
	
	//else
	return (26+c)-'a';
    2442:	87 54       	subi	r24, 0x47	; 71
    2444:	99 27       	eor	r25, r25
}
    2446:	08 95       	ret

00002448 <base64_decode_4to3>:

//decode helper
void base64_decode_4to3(unsigned char* buf, unsigned char *res){
    2448:	df 92       	push	r13
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	ec 01       	movw	r28, r24
    2458:	7b 01       	movw	r14, r22
    245a:	8c 01       	movw	r16, r24
    245c:	dd 24       	eor	r13, r13
	for(unsigned char c=0; c<4; c++){
		buf[c] = base64_reverse_lookup(buf[c]);
    245e:	f8 01       	movw	r30, r16
    2460:	80 81       	ld	r24, Z
    2462:	0e 94 09 12 	call	0x2412	; 0x2412 <base64_reverse_lookup>
    2466:	f8 01       	movw	r30, r16
    2468:	81 93       	st	Z+, r24
    246a:	8f 01       	movw	r16, r30
    246c:	d3 94       	inc	r13
    246e:	f4 e0       	ldi	r31, 0x04	; 4
    2470:	df 16       	cp	r13, r31
    2472:	a9 f7       	brne	.-22     	; 0x245e <base64_decode_4to3+0x16>
	}
	res[0] = (buf[0]<<2) | (buf[1]>>4);
    2474:	98 81       	ld	r25, Y
    2476:	99 0f       	add	r25, r25
    2478:	99 0f       	add	r25, r25
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	82 95       	swap	r24
    247e:	8f 70       	andi	r24, 0x0F	; 15
    2480:	98 2b       	or	r25, r24
    2482:	f7 01       	movw	r30, r14
    2484:	90 83       	st	Z, r25
	res[1] = (buf[1]<<4) | (buf[2]>>2);
    2486:	99 81       	ldd	r25, Y+1	; 0x01
    2488:	92 95       	swap	r25
    248a:	90 7f       	andi	r25, 0xF0	; 240
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	86 95       	lsr	r24
    2490:	86 95       	lsr	r24
    2492:	98 2b       	or	r25, r24
    2494:	91 83       	std	Z+1, r25	; 0x01
	res[2] = ((buf[2]<<6)&0xC0) | buf[3];
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	82 95       	swap	r24
    249a:	88 0f       	add	r24, r24
    249c:	88 0f       	add	r24, r24
    249e:	80 7c       	andi	r24, 0xC0	; 192
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	89 2b       	or	r24, r25
    24a4:	82 83       	std	Z+2, r24	; 0x02
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	08 95       	ret

000024b6 <base64_decode>:
}

//decode string given by *buf, return decoded string in *buf!
void base64_decode(unsigned char *buf, unsigned char len){
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	ec 01       	movw	r28, r24
    24c4:	f6 2e       	mov	r15, r22
    24c6:	e6 2e       	mov	r14, r22
    24c8:	00 e0       	ldi	r16, 0x00	; 0
    24ca:	10 e0       	ldi	r17, 0x00	; 0
    24cc:	12 c0       	rjmp	.+36     	; 0x24f2 <base64_decode+0x3c>
unsigned char i=0;
unsigned char cnt = len;

while(cnt>=4){
		/*softuart_putc(buf[i*4]);
		softuart_putc(buf[i*4+1]);
		softuart_putc(buf[i*4+2]);
		softuart_putc(buf[i*4+3]);*/
		base64_decode_4to3(&buf[i*4], &buf[i*3]);
    24ce:	99 27       	eor	r25, r25
    24d0:	bc 01       	movw	r22, r24
    24d2:	66 0f       	add	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	68 0f       	add	r22, r24
    24d8:	79 1f       	adc	r23, r25
    24da:	6c 0f       	add	r22, r28
    24dc:	7d 1f       	adc	r23, r29
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	8c 0f       	add	r24, r28
    24e8:	9d 1f       	adc	r25, r29
    24ea:	0e 94 24 12 	call	0x2448	; 0x2448 <base64_decode_4to3>
		/*softuart_putc(buf[i*3]);
		softuart_putc(buf[i*3+1]);
		softuart_putc(buf[i*3+2]);*/
		i++;

		//len MUST be a multiple of 4 !
		cnt-=4;
    24ee:	8c ef       	ldi	r24, 0xFC	; 252
    24f0:	e8 0e       	add	r14, r24
    24f2:	80 2f       	mov	r24, r16
    24f4:	0f 5f       	subi	r16, 0xFF	; 255
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	93 e0       	ldi	r25, 0x03	; 3
    24fa:	9e 15       	cp	r25, r14
    24fc:	40 f3       	brcs	.-48     	; 0x24ce <base64_decode+0x18>
}
buf[(len/4)*3+1]=0;
    24fe:	f6 94       	lsr	r15
    2500:	f6 94       	lsr	r15
    2502:	8f 2d       	mov	r24, r15
    2504:	99 27       	eor	r25, r25
    2506:	fc 01       	movw	r30, r24
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	e8 0f       	add	r30, r24
    250e:	f9 1f       	adc	r31, r25
    2510:	ec 0f       	add	r30, r28
    2512:	fd 1f       	adc	r31, r29
    2514:	11 82       	std	Z+1, r1	; 0x01
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <port_set_portbit>:

//ACTIVATE DEBUG by editing this file:
#include "../debug.h"

void port_set_portbit(unsigned char portchar, unsigned char pin, unsigned char val){
    2524:	28 2f       	mov	r18, r24
	//volatile char *port;
	unsigned char data;

	//only allow bit0-bit7
	pin = (pin-'0') & 0x07;
    2526:	67 70       	andi	r22, 0x07	; 7
    2528:	e6 2f       	mov	r30, r22
    252a:	ff 27       	eor	r31, r31

	if (val)
    252c:	44 23       	and	r20, r20
    252e:	49 f0       	breq	.+18     	; 0x2542 <port_set_portbit+0x1e>
		data = (1<<pin);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <port_set_portbit+0x16>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	ea 95       	dec	r30
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <port_set_portbit+0x12>
    253e:	98 2f       	mov	r25, r24
    2540:	09 c0       	rjmp	.+18     	; 0x2554 <port_set_portbit+0x30>
	else
		data = ~(1<<pin);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 c0       	rjmp	.+4      	; 0x254c <port_set_portbit+0x28>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	ea 95       	dec	r30
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <port_set_portbit+0x24>
    2550:	98 2f       	mov	r25, r24
    2552:	90 95       	com	r25

	//WARNING: make sure not to set/clear used IO pins !!!
	switch (portchar){
    2554:	23 34       	cpi	r18, 0x43	; 67
    2556:	69 f0       	breq	.+26     	; 0x2572 <port_set_portbit+0x4e>
    2558:	24 34       	cpi	r18, 0x44	; 68
    255a:	29 f1       	breq	.+74     	; 0x25a6 <port_set_portbit+0x82>
    255c:	21 34       	cpi	r18, 0x41	; 65
    255e:	71 f5       	brne	.+92     	; 0x25bc <port_set_portbit+0x98>
		case('A'):
			if (val)
    2560:	44 23       	and	r20, r20
    2562:	19 f0       	breq	.+6      	; 0x256a <port_set_portbit+0x46>
				PORTA |= data;
    2564:	8b b3       	in	r24, 0x1b	; 27
    2566:	89 2b       	or	r24, r25
    2568:	02 c0       	rjmp	.+4      	; 0x256e <port_set_portbit+0x4a>
			else
				PORTA &= data;
    256a:	8b b3       	in	r24, 0x1b	; 27
    256c:	89 23       	and	r24, r25
    256e:	8b bb       	out	0x1b, r24	; 27
    2570:	08 95       	ret
    2572:	e6 2f       	mov	r30, r22
    2574:	ff 27       	eor	r31, r31
			break;
		case('C'):
		//	if (pin != 3)
		//		return;

			if (val)
    2576:	44 23       	and	r20, r20
    2578:	51 f0       	breq	.+20     	; 0x258e <port_set_portbit+0x6a>
			//	PORTC |= data;
			//	PORTC |=(1<<6);
				PORTC |=(1<<pin);
    257a:	25 b3       	in	r18, 0x15	; 21
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <port_set_portbit+0x62>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	ea 95       	dec	r30
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <port_set_portbit+0x5e>
    258a:	28 2b       	or	r18, r24
    258c:	0a c0       	rjmp	.+20     	; 0x25a2 <port_set_portbit+0x7e>
			else
			//	PORTC &= data;
			//	PORTC &= ~(1<<6);
				PORTC &=~(1<<pin);
    258e:	25 b3       	in	r18, 0x15	; 21
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <port_set_portbit+0x76>
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	ea 95       	dec	r30
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <port_set_portbit+0x72>
    259e:	80 95       	com	r24
    25a0:	28 23       	and	r18, r24
    25a2:	25 bb       	out	0x15, r18	; 21
    25a4:	08 95       	ret
			break;
		case('D'):
			if (pin != 7)
    25a6:	67 30       	cpi	r22, 0x07	; 7
    25a8:	49 f4       	brne	.+18     	; 0x25bc <port_set_portbit+0x98>
				return;
			if (val)
    25aa:	44 23       	and	r20, r20
    25ac:	21 f0       	breq	.+8      	; 0x25b6 <port_set_portbit+0x92>
				PORTD |= data;
    25ae:	82 b3       	in	r24, 0x12	; 18
    25b0:	89 2b       	or	r24, r25
    25b2:	82 bb       	out	0x12, r24	; 18
    25b4:	08 95       	ret
			else
				PORTD &= data;
    25b6:	82 b3       	in	r24, 0x12	; 18
    25b8:	89 23       	and	r24, r25
    25ba:	82 bb       	out	0x12, r24	; 18
    25bc:	08 95       	ret

000025be <port_get_portbit>:
			break;
		//case('B'):	port = &PORTB; break;		
		default:    return;
	}
	return;

/*
	//strange, this does not work (set=1 is ok, clear does not work...)
	if (val)
		val = (1<<pin);

	if (val){
		*port |= (val);
		softuart_putc('S');
	}else{
		(*port) = (*port) & (~(val));
		softuart_putc('C');
	}
*/
}

unsigned char port_get_portbit(unsigned char portchar, unsigned char pin){
    25be:	82 34       	cpi	r24, 0x42	; 66
    25c0:	a9 f0       	breq	.+42     	; 0x25ec <port_get_portbit+0x2e>
	volatile char *port;
	switch (portchar){
    25c2:	83 34       	cpi	r24, 0x43	; 67
    25c4:	18 f4       	brcc	.+6      	; 0x25cc <port_get_portbit+0xe>
    25c6:	81 34       	cpi	r24, 0x41	; 65
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <port_get_portbit+0x16>
    25ca:	0d c0       	rjmp	.+26     	; 0x25e6 <port_get_portbit+0x28>
    25cc:	83 34       	cpi	r24, 0x43	; 67
    25ce:	29 f0       	breq	.+10     	; 0x25da <port_get_portbit+0x1c>
    25d0:	84 34       	cpi	r24, 0x44	; 68
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <port_get_portbit+0x22>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	08 95       	ret
    25da:	e5 e3       	ldi	r30, 0x35	; 53
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <port_get_portbit+0x32>
    25e0:	e2 e3       	ldi	r30, 0x32	; 50
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <port_get_portbit+0x32>
    25e6:	eb e3       	ldi	r30, 0x3B	; 59
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <port_get_portbit+0x32>
		case('A'):	port = &PORTA; break;
    25ec:	e8 e3       	ldi	r30, 0x38	; 56
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
		case('B'):	port = &PORTB; break;
		case('C'):	port = &PORTC; break;
		case('D'):	port = &PORTD; break;
		default:    return 0;
	}

	pin = (pin-'0') & 0x07;

	if (*port & (1<<pin))
    25f0:	80 81       	ld	r24, Z
    25f2:	99 27       	eor	r25, r25
    25f4:	67 70       	andi	r22, 0x07	; 7
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <port_get_portbit+0x3e>
    25f8:	95 95       	asr	r25
    25fa:	87 95       	ror	r24
    25fc:	6a 95       	dec	r22
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <port_get_portbit+0x3a>
    2600:	81 70       	andi	r24, 0x01	; 1
    2602:	90 70       	andi	r25, 0x00	; 0
		return 1;
	//else 
	return 0;
}
    2604:	08 95       	ret

00002606 <mpf10_init>:
//ACTIVATE DEBUG by editing this file:
#include "../debug.h"

//intialise
void mpf10_init(void){
    2606:	94 9a       	sbi	0x12, 4	; 18
	//set io pin as output:
	MPF10_ENABLE_PORT |= (1<<MPF10_ENABLE_PIN);

	//set lamp off:
	MPF10_DISABLE();
    2608:	94 98       	cbi	0x12, 4	; 18
    260a:	08 95       	ret

0000260c <mpf10_fade>:
}

//fade light in/out (100khz(?) soft pwm)
void mpf10_fade(signed char fade){
    260c:	68 2f       	mov	r22, r24
	unsigned char time_on;

	if (fade == MPF10_FADE_IN)
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	11 f0       	breq	.+4      	; 0x2616 <mpf10_fade+0xa>
    2612:	44 e6       	ldi	r20, 0x64	; 100
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <mpf10_fade+0xc>
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	18 c0       	rjmp	.+48     	; 0x264c <mpf10_fade+0x40>
		time_on = 0;
	else
		time_on = 100;

	//fade slow in !
	for(unsigned char i=0; i<100; i++){
		for(unsigned char l=0; l<4; l++){
			for(unsigned char t=0; t<100; t++){
				if (t<=time_on)
    261c:	42 17       	cp	r20, r18
    261e:	10 f0       	brcs	.+4      	; 0x2624 <mpf10_fade+0x18>
					MPF10_ENABLE();
    2620:	94 9a       	sbi	0x12, 4	; 18
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <mpf10_fade+0x1a>
				else
					MPF10_DISABLE();
    2624:	94 98       	cbi	0x12, 4	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2626:	81 e3       	ldi	r24, 0x31	; 49
    2628:	8a 95       	dec	r24
    262a:	f1 f7       	brne	.-4      	; 0x2628 <mpf10_fade+0x1c>
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	24 36       	cpi	r18, 0x64	; 100
    2632:	31 05       	cpc	r19, r1
    2634:	99 f7       	brne	.-26     	; 0x261c <mpf10_fade+0x10>
    2636:	9f 5f       	subi	r25, 0xFF	; 255
    2638:	94 30       	cpi	r25, 0x04	; 4
    263a:	21 f4       	brne	.+8      	; 0x2644 <mpf10_fade+0x38>
    263c:	5f 5f       	subi	r21, 0xFF	; 255
    263e:	54 36       	cpi	r21, 0x64	; 100
    2640:	21 f4       	brne	.+8      	; 0x264a <mpf10_fade+0x3e>
    2642:	08 95       	ret
				//delay:
				_delay_us(20);
			}
		}
		time_on+=fade;
	}
}
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	e9 cf       	rjmp	.-46     	; 0x261c <mpf10_fade+0x10>
    264a:	46 0f       	add	r20, r22
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	fa cf       	rjmp	.-12     	; 0x2644 <mpf10_fade+0x38>

00002650 <mca25_cleanup>:
	}
}

//cleanup dead connection -> run this every second !
void mca25_cleanup(void){
    2650:	80 91 d2 04 	lds	r24, 0x04D2
    2654:	88 23       	and	r24, r24
    2656:	51 f0       	breq	.+20     	; 0x266c <mca25_cleanup+0x1c>
	if (mca25_pic_state != MCA25_PIC_STATE_IDLE){
		if (mca25_allocated_timeout == 0){
    2658:	80 91 c4 04 	lds	r24, 0x04C4
    265c:	88 23       	and	r24, r24
    265e:	19 f4       	brne	.+6      	; 0x2666 <mca25_cleanup+0x16>
			#if MCA25_DEBUG
			softuart_puts_progmem("CAM : allocation to socket ");
			softuart_put_uint8(mca25_allocated_for_socket);
			softuart_puts_progmem(" removed");
			softuart_putnewline();
			#endif	
			mca25_pic_state = MCA25_PIC_STATE_IDLE;
    2660:	10 92 d2 04 	sts	0x04D2, r1
    2664:	08 95       	ret
		}else{
			mca25_allocated_timeout--;
    2666:	81 50       	subi	r24, 0x01	; 1
    2668:	80 93 c4 04 	sts	0x04C4, r24
    266c:	08 95       	ret

0000266e <mca25_read_at_command>:
		}
	}
}

//grab jpg data & store in buffer
unsigned int mca25_grab_data(char *buffer, unsigned int datalen, unsigned long pos, unsigned char socketnum){
	int skip_count=0;
	unsigned char state=0;
	
	mca25_allocated_timeout = 5; //5sec timeout

	//cam is used by another user -> abort
	if ((mca25_pic_state != MCA25_PIC_STATE_IDLE) && (mca25_allocated_for_socket != socketnum)){
		return 0xFFFE;
	}

	//cam is no longer working -> reset !
	if ((mca25_pic_state == MCA25_PIC_STATE_CAM_ERROR) || (mca25_ready == 0)){
		//cam not initialised or missing!
		#if MCA25_DEBUG
		softuart_puts_progmem("CAM : grab -> cam error -> retry init!");
		softuart_putnewline();
		#endif
		mca25_init_cam();
		mca25_configure();
		//return 0xFFFF; //-> abort this image !
	}

	//we need to do a preview image:
	if (mca25_pic_state == MCA25_PIC_STATE_IDLE){
		mca25_start_image_grab(socketnum);
	}
		
#if 1
	softuart_puts_progmem("CAM : req byte ");
	softuart_put_uint16(pos);
	softuart_puts_progmem(" cur pos is: ");
	softuart_put_uint16(mca25_datapos);
	softuart_putnewline();
	//tcp stack requested data bytes we do no longer have...
	//hack: dont touch ethernetbuffer & hope that data is still available.
	//      if buffer was used during last transfer -> picture will have errors...
	if (pos<mca25_datapos){
		int adjust = (mca25_datapos-pos)-512;
		if (adjust == 0){
			//perfect
			return 512;
		}else if(adjust > 0){
			//we must shift the data:
			for(unsigned int a=0; a<512; a++){
				if (a+adjust <= 512)
					buffer[a] = buffer[a+adjust];
			}
			return adjust; //#adjusted bytes data
		}else{
			//>512 bytes of data seems to be lost -> no way to fix it...
			//-> dont touch the buffer, maybe we can use the data later ...
			return (adjust%512);
		}
	}else if(pos>mca25_datapos){
		//?! how could that happen ?
		//FIXME:
		//1) ignore the missing data & continue
		//2) skip camera data until we have the requestet data packet...
		//-> use (1), change to 2 later ?!
	}
#endif

	#if MCA25_DEBUG
	/*softuart_puts_progmem("CAM : grab data starting at byte ");
	softuart_put_uint16(pos>>16);
	softuart_put_uint16(pos&0xFFFF);
	softuart_puts_progmem(", current pos is ");
	softuart_put_uint16(mca25_datapos>>16);
	softuart_put_uint16(mca25_datapos&0xFFFF);
	softuart_putnewline();*/
	#endif

	unsigned int dcnt=0;
	unsigned int res=0;
	unsigned int bufpos=0;

	//we have received data -> send an ack !
	if ((mca25_pic_state == MCA25_PIC_STATE_JPG_DATA) || (mca25_pic_state ==  MCA25_PIC_STATE_LAST_DATA)){
		mca25_send_data_ack();
	}

	//do the statemachine
	while (state != 100){
		if (state == 0)
			res = mca25_read_mux_packet(&buffer[bufpos],6);
		else
			res = mca25_read_mux_packet(&buffer[bufpos],0);
		if (res == 0){
			#if MCA25_DEBUG 
			softuart_puts_progmem("TIMEOUT! (MUX J)");
			softuart_putnewline();
			softuart_puts_progmem("dcount=");
			softuart_put_uint16(dcnt);
			softuart_putnewline();
			#endif

			//cam error, disable !
			mca25_ready = 0;
			return 0xFFFF; //read failed -> exit!; 
		}
	
		if (bufpos>datalen){
			#if MCA25_DEBUG 
			softuart_puts_progmem("CAM : buf overflow! ");
			softuart_put_uint16(skip_count);
			softuart_put_uint16(bufpos);
			softuart_putnewline();
			#endif
			return 0xFFFF;
		}

		//new version, thanks to jesper ;)
		//softuart_put_uint8(mca25_buffer[1]);
		if ((mca25_mux_buffer[0] == 0x83) && (mca25_mux_buffer[1] == 0xEF) ){ //data channel & UIH packet
				dcnt++;
				
				switch (state){
					case 0: //check how many bytes cam want to send
						skip_count = ((int)mca25_mux_buffer[4]<<8) + mca25_mux_buffer[5];

						if (skip_count > datalen){
							skip_count = datalen;
						}
						
						if (skip_count > 3){
							//only handle data packets -> ignore packets smaller 3 bytes (=acks)
							skip_count    -= ((mca25_mux_buffer[2])>>1);
							bufpos        += (mca25_mux_buffer[2]>>1)-6;

							//last data packet ?!
							if (mca25_mux_buffer[3] == 0xA0){
								mca25_pic_state = MCA25_PIC_STATE_LAST_DATA; //no more data
							}else{
								mca25_pic_state = MCA25_PIC_STATE_JPG_DATA; //middle of pic
							}
							state = 1;
							
							if (skip_count <= 0){
								//softuart_putc('.');
								if (mca25_pic_state == MCA25_PIC_STATE_LAST_DATA){
									mca25_send_data_ack();

									//reconfigure mux channel (?!)
									mca25_puts_progmem("\xF9\x01\xEF\x0B\xE3\x07\x23\x0C\x01\x79\xF9");

									mca25_pic_state = MCA25_PIC_STATE_IDLE;
									mca25_datapos += bufpos;
									return bufpos;
								}else{
									mca25_datapos += bufpos;
							    return 0;
								}
							}
						}
						break;
					case 2:
					case 1:
						skip_count    -= ((mca25_mux_buffer[2])>>1);
						bufpos        += (mca25_mux_buffer[2]>>1)-0;
	
						if (skip_count <= 0){
							//softuart_putc('.');
							if (mca25_pic_state == MCA25_PIC_STATE_LAST_DATA){
								mca25_send_data_ack();

								//reconfigure mux channel (?!)
								mca25_puts_progmem("\xF9\x01\xEF\x0B\xE3\x07\x23\x0C\x01\x79\xF9");

								mca25_pic_state = MCA25_PIC_STATE_IDLE;
								mca25_datapos += bufpos;
								return bufpos; //last data packet !
							}else{
								mca25_datapos += bufpos;
								return 0; //state = 100;
							}
						}
						break;

					default:
						break;
				} //case
				//softuart_put_uint16(skip_count);
			}else if (mca25_mux_buffer[0] == 0x23){
				//channel 0x23
				mca25_handle_channel_x23();
			}else if (mca25_mux_buffer[0] == 0x03){ 
				//channel 0x03
				mca25_handle_channel_x03();
			}else{
				/*for(unsigned char f=0; f<40; f++){
					softuart_put_uint8(f);
					softuart_putc('>');
					softuart_put_uint8(mca25_buffer[f]);
					softuart_putnewline();
				}softuart_putnewline();softuart_putnewline();*/
			}
		}	
		//softuart_puts_progmem("count=");
		//softuart_put_uint16(dcnt);
		//preview image #i has been grabbed.
		#if MCA25_DEBUG
		softuart_putc(' ');
		#endif
	
	return 0xFFFF;
}

//start image grab, grab preview pictures and send jpg request
unsigned char mca25_start_image_grab(unsigned char socketnum){
	unsigned char state;
	unsigned char datapos;
	int skip_count=0;

	//switch light on (slow fade in !)
	//mpf10_fade(MPF10_FADE_IN);
	//without soft fade in:
	MPF10_ENABLE();

	//reset global data byte counter	
	mca25_datapos = 0;

	//allocate cam to current socket
	mca25_allocated_for_socket = socketnum;

	//reset state
	mca25_pic_state = MCA25_PIC_STATE_IDLE; //not ready

	if (mca25_ready == 0){
		//cam not initialised or missing!
		#if MCA25_DEBUG
		softuart_puts_progmem("CAM : cam not initialised or missing -> abort.");
		softuart_putnewline();
		#endif
		MPF10_DISABLE();
		return 0;
	}
		
	#if MCA25_DEBUG
	softuart_puts_progmem("CAM : starting image grab...");
	softuart_putnewline();
	softuart_puts_progmem("CAM : grabbing preview ");
	#endif
	
	//grab 5 preview pictures:
	for (char i=0; i<5; i++){
		#if MCA25_DEBUG
		softuart_put_uint8(i);
		#endif

		//softuart_put_uint8(mca25_brightness);
		//mca25_brightness = 0;

		if ((i==0) && (mca25_pic_state == MCA25_PIC_STATE_JPG_DATA)){
			// do not send start cmd ! an jpg request is already running 
			// -> use first "preview" to ack jpg data!
		}else{
			if (mca25_pic_state == MCA25_PIC_STATE_LAST_DATA){
				//last data -> send an ack !
				mca25_send_data_ack();
			}
		
			// send capture start cmd:
			mca25_puts_progmem2(MCA25_START_CAPTURING, sizeof(MCA25_START_CAPTURING)); 
		}

		state = 0;
		datapos = 0;
	
		// grab actual image and tell cam to keep it in RAM
		// we acknowledge the _preview_ image and download
		// the full size image later...
		while (state != 100){
			
			if( ! mca25_read_mux_packet(mca25_buffer,0)){
				#if MCA25_DEBUG 
				softuart_puts_progmem("TIMEOUT! (MUX4) / previewpic");
				softuart_put_uint8(i);
				softuart_putnewline();
				#endif

				//cam error, disable !
				mca25_ready = 0;
				MPF10_DISABLE();
				return 0; //read failed -> exit!; 
			}

			//new version, thanks to jesper ;)
			//softuart_put_uint8(mca25_buffer[1]);
			if ((mca25_mux_buffer[0] == 0x83) && (mca25_mux_buffer[1] == 0xEF) ){ //data channel & UIH packet
				//softuart_put_uint16(skip_count);
				switch (state){
					case 0: //check how many bytes cam want to send
						skip_count = ((int)mca25_mux_buffer[4]<<8) + mca25_mux_buffer[5];
						
						if (skip_count > 3){
							//only handle data packets -> ignore packets smaller 3 bytes (=acks)
							skip_count -= ((mca25_mux_buffer[2])>>1);

							//last data packet ?!
							if (mca25_buffer[0] == 0xA0) 
								state = 2;
							else 
								state = 1;

							//estimate picture brightness by grabbing some bmp preview pixels
							///mca25_estimate_brightness(mca25_buffer[28]);

							if (skip_count <= 0){
								//softuart_putc('.');
								mca25_send_data_ack();
								if (state == 2)
									state = 100;
								else
							    state = 0;
							}
						}
						break;
					case 2:
					case 1:
						skip_count -= ((mca25_mux_buffer[2])>>1);
						
						//estimate picture brightness by grabbing some bmp preview pixels
						///mca25_estimate_brightness(mca25_buffer[28]);

						if (skip_count <= 0){
							softuart_putc('.');
							mca25_send_data_ack();
							if (state == 2)
								state = 100;
							else
								state = 0;
						}
						break;

					default:
						break;
				} //case
				//softuart_put_uint16(skip_count);
			}else if (mca25_mux_buffer[0] == 0x23){
				//channel 0x23
				mca25_handle_channel_x23();
			}else if (mca25_mux_buffer[0] == 0x03){ 
				//channel 0x03
				mca25_handle_channel_x03();
			}else{
				for(unsigned char f=0; f<40; f++){
					softuart_put_uint8(f);
					softuart_putc('=');
					softuart_put_uint8(mca25_buffer[f]);
					softuart_putnewline();

				}softuart_putnewline();softuart_putnewline();//softuart_putc('.');
				/*softuart_put_uint8(mca25_buffer[1]);
				softuart_put_uint8(mca25_buffer[2]);
				softuart_put_uint8(mca25_buffer[3]);
				softuart_put_uint8(mca25_buffer[4]);
				softuart_putnewline();*/
			}
		}
		//preview image #i has been grabbed.
		#if MCA25_DEBUG
		softuart_putc('-');
		#endif
	}
	#if MCA25_DEBUG
	softuart_putnewline();
	softuart_puts_progmem("CAM : preview images done!");
	softuart_putnewline();
	softuart_puts_progmem("CAM : sending JPG grab request... ");
	softuart_putnewline();
	#endif

	// send capture start cmd:
	mca25_puts_progmem2(MCA25_START_JPG, sizeof(MCA25_START_JPG));
	#if MCA25_DEBUG
	//softuart_puts_progmem("done!");
	//softuart_putnewline();
	#endif

	//switch light off:
	MPF10_DISABLE();

	//cam has transferred no image byte yet -> 0
	mca25_datapos=0;
	mca25_pic_state = MCA25_PIC_STATE_PREVIEW_DONE; //preview done!
	return 1;
}

//configure mca25
unsigned char mca25_configure(void){
	unsigned char state=0;
	//unsigned char res = 0;
	int skip_count=0;

	mca25_pic_state = MCA25_PIC_STATE_IDLE;

	if (mca25_ready == 0){
		//cam not initialised or missing!
		#if MCA25_DEBUG
		softuart_puts_progmem("CAM : cam not initialised or missing -> abort.");
		softuart_putnewline();
		#endif
		return 0;
	}
		
	#if MCA25_DEBUG
	softuart_puts_progmem("CAM : configure...");
	#endif
	
	//config cam:
	mca25_puts_progmem2(MCA25_CONFIG_640x480, sizeof(MCA25_CONFIG_640x480)); 

	while (state != 100){
		if( ! mca25_read_mux_packet(mca25_buffer,0)){
				#if MCA25_DEBUG 
				softuart_puts_progmem("TIMEOUT! (MUX2)");
				softuart_putnewline();
				#endif

				//cam error, disable !
				mca25_ready = 0;
				return 0; //read failed -> exit!; 
		}

		if (mca25_mux_buffer[0] == 0x83){
			if (mca25_mux_buffer[1] == 0xEF){//UIH packet
				switch (state){
					case 0:
					case 1:
						// wait for cam ACK:
						// [F9 83 EF 07 A0 00 03 C7 F9
						//if (string_compare_progmem_plen("\xF9\x83\xEF\x07\xA0\x00\x03\xC7\xF9", mca25_buffer)){
						if (string_compare_progmem_plen("\xA0\x00\x03", mca25_buffer)){
							// request camera info:
							// [F9 81 EF 2F 83 00 17 42 00 14 78 2D 62 74 2F 63 
							//  61 6D 65 72 61 2D 69 6E 66 6F 00 90 F9]
							mca25_puts_progmem("\xF9\x81\xEF\x2F\x83\x00\x17\x42\x00\x14\x78\x2D\x62\x74\x2F\x63\x61\x6D\x65\x72\x61\x2D\x69\x6E\x66\x6F\x00\x90\xF9");	
							state = 2;
						}
						break;
					case 2:
						// ignore camera info ...
						// new version: read how many config bytes cam wants to send
						// in order to decide when we can continue!
						// thanks to jesper for this idea ;)  [now works with brand new, unused cams!]
						skip_count = ((int)mca25_mux_buffer[3]<<8) + mca25_mux_buffer[4];
						skip_count -= (mca25_mux_buffer[2]>>1);
						state = 3;
						
						break;
		
					case 3:
						//now skip the necessary amount of bytes:
						skip_count -= (mca25_mux_buffer[2]>>1);
		
						//finished !
						if (skip_count <= 0)
							state = 100;
						break;
		
					default:
						break;
				}
			}
		}else if (mca25_mux_buffer[0] == 0x23){
			//channel 0x23
			mca25_handle_channel_x23();
		}else if (mca25_mux_buffer[0] == 0x03){ 
			//channel 0x03
			mca25_handle_channel_x03();
		}else{
			softuart_putc('i');
		}
	}
	#if MCA25_DEBUG
	softuart_puts_progmem("done!");
	softuart_putnewline();
	#endif
	return 1;
}


//initialise
void mca25_init(void){
	//start with rev016
	mca25_is_rev017 = 0;
	mca25_allocated_timeout = 0;
	mca25_pic_state = MCA25_PIC_STATE_IDLE;

	mca25_init_cam();
}

//initialise webcam, return 0 if failed!
unsigned char mca25_init_cam(void){
	unsigned char state=0;
	#if MCA25_DEBUG 
	//unsigned char old_state=0xFF;
	#endif	

	//mark cam as not ready:
	mca25_ready	= 0;

	//make camreset pin output
	MCA25_RESET_PORT_DIR |=  (1<<MCA25_RESET_PIN); 
	PORTD |= (1<<1);  //UART TX = output
	PORTD &= ~(1<<0); //UART RX =  input

	MCA25_RESET_LO();

	//init uart
	if (mca25_is_rev017) 
		mca25_uart_init_19200();
	else
		mca25_uart_init_9600();

	//reset cam:
	MCA25_RESET_LO();
	_delay_ms(50);
	MCA25_RESET_HI();

	#if MCA25_DEBUG 
	softuart_puts_progmem("CAM : reset");
	softuart_putnewline();
	#endif
/*
	//WARNING: will block whole server if no cam connected !! -> DO NOT USE!

	//detect mca25 revision
	//KTY 105 016 sends always at 9600 baud
	//KTY 105 017 sends AT at 9600 and then switches to 19200 !!!
	unsigned int count;
	for (state = 0; state <4; state++){
		count=0;
		while((PIND & (1<<0))){}
		while(!(PIND & (1<<0))){ count++; }
		softuart_put_uint16(count);
		softuart_putnewline();
	}


	#if MCA25_DEBUG 
	softuart_puts_progmem("CAM : detected rev");
	if (count > 50)
		softuart_puts_progmem("016");
	else
		softuart_puts_progmem("017");
	softuart_putnewline();
	#endif
	
	//revision 017 !
	if (count < 50){
		mca25_uart_init_19200();
		//reset cam again:
		MCA25_RESET_LO();
		_delay_ms(50);
		MCA25_RESET_HI();
	}
*/

	#if MCA25_DEBUG 
	softuart_puts_progmem("CAM : init (takes ~5sec) ");
	#endif

	while (state != 100){
		//read cam data:
		if (state<10){
			//read AT command
			if ( ! mca25_read_at_command(mca25_buffer)){
				#if MCA25_DEBUG 
				softuart_puts_progmem("TIMEOUT! (AT) ");
				#endif
				if (state == 0){
					//maybe this is a bad/new (?) mca25 which wants to communicate at 19200 baud!
					//retry!
					mca25_uart_init_19200();	
					#if MCA25_DEBUG
					softuart_puts_progmem(" trying 19200 baud ");
					#endif
					if ( ! mca25_read_at_command(mca25_buffer)){
						#if MCA25_DEBUG 
						softuart_puts_progmem("TIMEOUT! (AT) ");
						softuart_putnewline();
						#endif
						return 0;
					}else{
						mca25_is_rev017 = 1;
					}
				}else{
					//state != 0 -> always exit
					#if MCA25_DEBUG
					softuart_putnewline();
					#endif
					return 0; //read failed -> exit! 
				}
			}
		}else{
			//read MUX packet
			if( ! mca25_read_mux_packet(mca25_buffer,0)){
				#if MCA25_DEBUG 
				softuart_puts_progmem("TIMEOUT! (MUX)");
				softuart_putnewline();
				#endif
				return 0; //read failed -> exit!; 
			}
		}
		#if MCA25_DEBUG 
		/*if (old_state != state){
			softuart_put_uint8(state);
			softuart_putc('-');
			old_state = state;
		}*/
		#endif
		switch (state){
			case 0:
				//we have to wait for AT&F:
				if (string_compare_progmem_plen("AT&F", mca25_buffer) || string_compare_progmem_plen("AT&F", &mca25_buffer[2])){
					mca25_send_ok();
					state = 1;
				}
				break;

			case 1:
				//wait for AT+IPR
				if (string_compare_progmem_plen("AT+IPR=?", mca25_buffer)){
					mca25_puts_progmem("+IPR: (),(1200,2400,4800,9600,19200,38400,57600,460800)\r\n\r\nOK\r\n");
					state = 2;
				}
				break;
			
			case 2:
				//wait for AT+IPR SET command
				if (string_compare_progmem_plen("AT+IPR=460800", mca25_buffer)){
					mca25_puts_progmem("\r\nOK\r\n"); //bubug: here only 1 \r before OK!
					//set higher baudrate:
					mca25_uart_init_460800();
					//wait ...
					state = 3;
				}
				break;

			case 3:
				//wait for mux info req
				if (string_compare_progmem_plen("AT+CMUX=?", mca25_buffer)){
					mca25_puts_progmem("\r\r\n+CMUX: (0),(0),(1-7),(31),(10),(3),(30),(10),(1-7)\r\n");
					state = 4;
				}
				break;

			case 4:
				//wait for mux enable request
				if (string_compare_progmem_plen("AT+CMUX=0,0,7,31", mca25_buffer)){
					#if MCA25_DEBUG 
					softuart_puts_progmem("at done, ");
					#endif
					mca25_send_ok();
					state = 10;
				}
				break;

			case 10:
					// wait for mux ch0 request:
					// [F9 03 3F 01 1C F9]
					//if (string_compare_progmem_plen("\xF9\x03\x3F\x01\x1C\xF9", mca25_buffer)){
					if ((mca25_mux_buffer[0] == 0x03) && (mca25_mux_buffer[2] == 0x01)){
						// send mux ch0 ack/open packet:
						// [F9 03 73  01 D7 F9]
						mca25_puts_progmem("\xF9\x03\x73\x01\xD7\xF9");
					  state = 11;
					}
					break;

				case 11:
					// wait for mux ch3 request:
					// [F9 23 3F 01 C9 F9]
					//if (string_compare_progmem_plen("\xF9\x23\x3F\x01\xC9\xF9", mca25_buffer)){
					if ((mca25_mux_buffer[0] == 0x23) && (mca25_mux_buffer[2] == 0x01)){
						// send mux ch3 ack/open packet:
						// [F9 23 73 01 02 F9]
						mca25_puts_progmem("\xF9\x23\x73\x01\x02\xF9");
					  state = 12;
					}
					break;

				case 12:
					// wait for config mux ch0 request:
					// [F9 03 EF 09 E3 05 23 8D FB F9]
					//if (string_compare_progmem_plen("\xF9\x03\xEF\x09\xE3\x05\x23\x8D\xFB\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\xE3\x05\x23\x8D", mca25_buffer)){
						// send mux ch0 config ack/open packet:
						// [F9 01 EF 0B E3 07 23 0C 01 79 F9]
						mca25_puts_progmem("\xF9\x01\xEF\x0B\xE3\x07\x23\x0C\x01\x79\xF9");
					  state = 13;
					}
					break;

				case 13:
					// wait for config mux ch3 request:
					// [F9 03 EF 09 E1 07 23 0C 01 FB F9]
					//if (string_compare_progmem_plen("\xF9\x03\xEF\x09\xE1\x07\x23\x0C\x01\xFB\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\xE1\x07\x23\x0C\x01", mca25_buffer)){
						// send mux ch3 config ack/open packet:
						// [F9 01 EF 09 E1 05 23 8D 9A F9]
						mca25_puts_progmem("\xF9\x01\xEF\x09\xE1\x05\x23\x8D\x9A\xF9");
					  state = 14;
					}
					break;

				case 14:
					// wait for AT*EACS.17.1.r:
					// [F9 23 EF 1B 41 54 2A 45 41 43 53 3D 31 37 2C 31 0D D1 F9]
					//if (memcmp(buf,"\xF9\x23\xEF\x1BAT*EACS=17,1\r\xD1\xF9",19) == 0){
					//if (string_compare_progmem_plen("\xF9\x23\xEF\x1B\x41\x54\x2A\x45\x41\x43\x53\x3D\x31\x37\x2C\x31\x0D\xD1\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\x41\x54\x2A\x45\x41\x43\x53\x3D\x31\x37\x2C\x31\x0D", mca25_buffer)){
						// send mux "\r\nOK\r\n" packet:
						// [F9 21 EF 0D 0D 0A 4F 4B 0D 0A 48  F9]
						mca25_puts_progmem("\xF9\x21\xEF\x0D\x0D\x0A\x4F\x4B\x0D\x0A\x48\xF9");
					  state = 15;
					}
					break;
					
				case 15:
					// wait for AT+CSCC=1,199\r5 peripheral AUTH req:
					// [F9 23 EF 1D 41 54 2B 43 53 43 43 3D 31 2C 31 39 39 0D 35 F9]
					//if (string_compare_progmem_plen("\xF9\x23\xEF\x1D\x41\x54\x2B\x43\x53\x43\x43\x3D\x31\x2C\x31\x39\x39\x0D\x35\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\x41\x54\x2B\x43\x53\x43\x43\x3D\x31\x2C\x31\x39\x39\x0D", mca25_buffer)){
						// send response token:
						//DONT// [F9 21 EF 1D 41 54 2B 43 53 43 43 3D 31 2C 31 39 39 0D 54 F9]
						// [F9 21 EF 1B 0D 0A 2B 43 53 43 43 3A 20 45 33 0D 0A B0 F9 ]
						//printf("\xF9\x21\xEF\x1D\x41\x54\x2B\x43\x53\x43"
						//			 "\x43\x3D\x31\x2C\x31\x39\x39\x0D\x54\xF9"); 
						mca25_puts_progmem("\xF9\x21\xEF\x1B\x0D\x0A\x2B\x43\x53\x43"
									 "\x43\x3A\x20\x45\x33\x0D\x0A\xB0\xF9");
									 
						//append ok:
						mca25_puts_progmem("\xF9\x21\xEF\x0D\x0D\x0A\x4F\x4B\x0D\x0A\x48\xF9");
					  state = 16;
					}
					break;
					
				case 16:
					// wait for AT+CSCC=2,199.B9\r AUTH2 req:
					// AT+CSCC.2.199.B9.r|
					// [F9 23 EF 23 41 54 2B 43 53 43 43 3D 32 2C 31 39 39 2C 42 39 0D FB F9]
					//if (string_compare_progmem_plen("\xF9\x23\xEF\x23\x41\x54\x2B\x43\x53\x43\x43\x3D\x32\x2C\x31\x39\x39\x2C\x42\x39\x0D\xFB\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\x41\x54\x2B\x43\x53\x43\x43\x3D\x32\x2C\x31\x39\x39\x2C\x42\x39\x0D", mca25_buffer)){
						// send response token: (OK)
						// [F9 21 EF 0D 0D 0A 4F 4B 0D 0A 48  F9]
						mca25_puts_progmem("\xF9\x21\xEF\x0D\x0D\x0A\x4F\x4B\x0D\x0A\x48\xF9");
						
						// now request data mux channel (ch1):
						// [F9 81 3F 01 AB F9]
						mca25_puts_progmem("\xF9\x81\x3F\x01\xAB\xF9");
					  state = 17;
					}
					break;
					
				case 17:
					// wait for mux ch1 ack:
					// [F9 81 73 01 60 F9]
					//if (string_compare_progmem_plen("\xF9\x81\x73\x01\x60\xF9", mca25_buffer)){
					if ((mca25_mux_buffer[0] == 0x81) && (mca25_mux_buffer[2] == 0x01)){
						// channel1 is now open!
					  state = 18;
					}
					break;
					
				case 18:
					// wait for ch1 mux config:
					// [F9 03 EF 09 E3 05 83 8D FB F9]
					//if (string_compare_progmem_plen("\xF9\x03\xEF\x09\xE3\x05\x83\x8D\xFB\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\xE3\x05\x83\x8D", mca25_buffer)){
						// send config response:
						// [F9 01 EF 09 E1 05 83 8D 9A F9]
						mca25_puts_progmem("\xF9\x01\xEF\x09\xE1\x05\x83\x8D\x9A\xF9");
						
						// now configure cam mode:
						// [ F9 81 EF 37 80 00 1A 10 00 01 00 46 00 13 E3 3D
						//   95 45 83 74 4A D7 9E C5 C1 6B E3 1E DE 8E 61 82 F9 ]
						// F9 81 EF 37 			= mux header
						// 80 00 1A 10 00 	= ???
						// 01 00 						= (256-6)Byte data, then wait for ACK
						// 46  00 13 E3 3D 95 45 83 74 4A D7 9E C5 C1 6B E3 1E DE 8E 61 ???
						mca25_puts_progmem("\xF9\x81\xEF\x37\x80\x00\x1A\x10\x00");
						//mca25_puts_progmem("\x02\x00");//buffsize 512 byte
						mca25_uart_putc(hi8(NIC_BUFFERSIZE-TCP_POS_TXDATA+6));
						mca25_uart_putc(lo8(NIC_BUFFERSIZE-TCP_POS_TXDATA+6));
						//"\x02\x28");//buffsize 546 data byte (but we have 6 dont care bytes) -> 546+6 = 552
						mca25_puts_progmem("\x46\x00\x13\xE3\x3D\x95\x45\x83\x74\x4A\xD7\x9E");
						mca25_puts_progmem("\xC5\xC1\x6B\xE3\x1E\xDE\x8E\x61\x82\xF9");
						mca25_puts_progmem("\xF9\x21\xEF\x0D\x0D\x0A\x4F\x4B\x0D\x0A\x48\xF9");
						
						state = 19;
					}
					break;
					
				case 19:
					// cam should now accept our settings:
					// [F9 83 EF 3F A0 00 1F 10 00 20 00 CB 00 00 00 01 4A 00
					//  13 E3 3D 95 45 83 74 4A D7 9E C5 C1 6B E3 1E DE 8E ED F9
					//if (string_compare_progmem_plen("\xF9\x83\xEF\x3F\xA0\x00\x1F\x10\x00\x20\x00\xCB\x00\x00\x00\x01\x4A\x00\x13\xE3\x3D\x95\x45\x83\x74\x4A\xD7\x9E\xC5\xC1\x6B\xE3\x1E\xDE\x8E\xED\xF9", mca25_buffer)){
					if (string_compare_progmem_plen("\xA0\x00\x1F\x10\x00\x20\x00\xCB\x00\x00\x00\x01\x4A\x00\x13\xE3\x3D\x95\x45\x83\x74\x4A\xD7\x9E\xC5\xC1\x6B\xE3\x1E\xDE\x8E", mca25_buffer)){
						state = 100; //-> exit init loop.
					#if MCA25_DEBUG 
					softuart_puts_progmem("mux. ");
					#endif
					
					}
					break;			

			default:
				break;
		}
	}
	#if MCA25_DEBUG 
	softuart_puts_progmem("ready"); //finished! CAM found & ready!");
	softuart_putnewline();
	#endif

	//cam is initialised:
	mca25_ready	= 1;

	return 0;
}

//send ok
void mca25_send_ok(void){
	mca25_puts_progmem("\r\r\nOK\r\n");
}

//read at command
unsigned char mca25_read_at_command(unsigned char *buffer){
    266e:	28 e0       	ldi	r18, 0x08	; 8
    2670:	20 93 3d 07 	sts	0x073D, r18
    2674:	fc 01       	movw	r30, r24
    2676:	9c 01       	movw	r18, r24
    2678:	28 5d       	subi	r18, 0xD8	; 216
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int cnt;

	//set timeout to t+8 seconds:
	clock_timeout_timer = 8;
	

	#if MCA25_DEBUG
	//softuart_puts_progmem("CAM : rx [");
	#endif
	for(cnt=0;cnt<MCA25_COMM_BUFFER_LEN;cnt++){
 		if (clock_timeout_timer == 0)
 				return 0;

		//wait for data in
		while (!(UCSRA & (1<<RXC))){
 			if (clock_timeout_timer == 0)
    267c:	80 91 3d 07 	lds	r24, 0x073D
    2680:	88 23       	and	r24, r24
    2682:	89 f0       	breq	.+34     	; 0x26a6 <mca25_read_at_command+0x38>
    2684:	5f 9b       	sbis	0x0b, 7	; 11
    2686:	fa cf       	rjmp	.-12     	; 0x267c <mca25_read_at_command+0xe>
 				return 0;
		}
		
		buffer[cnt] = UDR;
    2688:	8c b1       	in	r24, 0x0c	; 12
    268a:	80 83       	st	Z, r24
		if (buffer[cnt] == '\r' || buffer[cnt] == '\n'){
    268c:	8d 30       	cpi	r24, 0x0D	; 13
    268e:	11 f0       	breq	.+4      	; 0x2694 <mca25_read_at_command+0x26>
    2690:	8a 30       	cpi	r24, 0x0A	; 10
    2692:	11 f4       	brne	.+4      	; 0x2698 <mca25_read_at_command+0x2a>
			buffer[cnt] = '\0';
    2694:	10 82       	st	Z, r1
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <mca25_read_at_command+0x32>
    2698:	31 96       	adiw	r30, 0x01	; 1
    269a:	e2 17       	cp	r30, r18
    269c:	f3 07       	cpc	r31, r19
    269e:	71 f7       	brne	.-36     	; 0x267c <mca25_read_at_command+0xe>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	08 95       	ret
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
			break; //we have finished read.
		}
	}
	#if MCA25_DEBUG
	/*for(cnt=0;cnt<MCA25_COMM_BUFFER_LEN;cnt++){
		if (buffer[cnt] == 0)
			break;
		softuart_putc(buffer[cnt]);
	}
	softuart_puts_progmem("]\r\n");*/
	#endif
	return 1;
}
    26aa:	08 95       	ret

000026ac <mca25_puts_progmem2>:

//read mux packet
unsigned char mca25_read_mux_packet(unsigned char *buffer, unsigned char skipcount){
	unsigned char data;
	unsigned char state = 0;
	unsigned char len = 0;
	unsigned char crc = 0;
	unsigned char bufpos = 0;
	unsigned char muxbufpos = 0;

	//set timeout to t+3 seconds:
	clock_timeout_timer = 3;

	while (clock_timeout_timer > 0){
		//wait for incoming data: (abort if timeout!)
		while (!(UCSRA & (1<<RXC))){
			if (clock_timeout_timer == 0){
				#if MCA25_DEBUG
				softuart_put_uint8(state);
				softuart_put_uint8(len);
				#endif
				return 0;
			}
		}
	
		data = UDR;
	
		if ((state == 4) || (state ==5 )){
			if (skipcount == 0){
				buffer[bufpos++] = data;
			}else{
				skipcount--;
			}
		}

		LED_STATUS_ON();

		switch (state){
			case 0:	// waiting for start flag
				if (data == 0xF9){
					bufpos = 0;
					state = 1;
				}
				break;

			case 1: // address
				if (data == 0xF9){
					bufpos = 0;
				}else{
					muxbufpos = 0;
					mca25_mux_buffer[0] = data;
					state = 2;
				}
				break;
	
			case 2:	// frame type
				if (data != 0xF9){
					state = 3;
					mca25_mux_buffer[1] = data;
					muxbufpos = 2;
				}else{
					//strange ... happens sometime!
					state = 1;
					bufpos = 0;
				}
				break;
	
			case 3:	// frame length
				len = (data >> 1);

				//limt length
				if (len>31)
					len = 31;

				mca25_mux_buffer[muxbufpos++] = data;

				if (len > 0)
					state = 4;
				else
					state = 5;
				break;
	
			case 4:	// package data
				if (muxbufpos<6)
					mca25_mux_buffer[muxbufpos++] = data;
				len--;
				if (len == 0)
					state = 5;
				break;
	
			case 5: // checksum
				crc = 0xFF;
				crc = crc8_calc_byte_rev0x07(crc, mca25_mux_buffer[0]);
				crc = crc8_calc_byte_rev0x07(crc, mca25_mux_buffer[1]);
				crc = crc8_calc_byte_rev0x07(crc, mca25_mux_buffer[2]);
				crc = 0xFF - crc;
				if (crc != data){
					// -> bad crc !

					// special handling of the "buggy" config message
					// \xF9\x03\xEF\x09\xE1\x07\x23\x0C\x01\xFB\xF9
					if ((buffer[0] == 0xE1) && (buffer[1] == 0x07) && (buffer[3] == 0x0C)){
						//softuart_puts_progmem("CAM : buggy cfg detected");
						//read extra char for buggy config message:
						while (!(UCSRA & (1<<RXC))){
							if (clock_timeout_timer == 0)
								return 0;
						}
						data = UDR;
						//softuart_puts_progmem("skipped extra data.\r\n");
						state = 6;
					}else{
						#if MCA25_DEBUG
						softuart_puts_progmem("CAM : bad crc ");
						softuart_put_uint8(crc);
						softuart_putc(':');
						softuart_put_uint8(data);
						softuart_putnewline();
						#endif
						state = 0;
					}
				}else{
						state = 6;
				}
				break;
	
			case 6: // flag
				if (data != 0xF9){
					#if MCA25_DEBUG
					softuart_puts_progmem("CAM : bad packet ?! ");
					softuart_put_uint8(data);
					softuart_putnewline();
					#endif
					state = 0;
				}else{
					LED_STATUS_OFF();
					return 1;
				}
				break;

			default:
				break;
		}
	}
	LED_STATUS_OFF();
	return 0;
}


//put progmem data with given length,
//see mca25.h for the mca25_puts_progmem(s) macro !!
void mca25_puts_progmem2(PGM_P pointer, unsigned int len){
    26ac:	ac 01       	movw	r20, r24
    26ae:	a3 e3       	ldi	r26, 0x33	; 51
    26b0:	b7 e0       	ldi	r27, 0x07	; 7
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <mca25_puts_progmem2+0x26>
	//softuart_put_uint16(len);
	while (len--){
    26b4:	9a 01       	movw	r18, r20
		if (pgm_read_byte(pointer) == 0xF9)
    26b6:	fa 01       	movw	r30, r20
    26b8:	84 91       	lpm	r24, Z
    26ba:	89 3f       	cpi	r24, 0xF9	; 249
    26bc:	19 f4       	brne	.+6      	; 0x26c4 <mca25_puts_progmem2+0x18>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26be:	cd 01       	movw	r24, r26
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <mca25_puts_progmem2+0x14>
			_delay_ms(1);
		mca25_uart_putc(pgm_read_byte(pointer++));
    26c4:	5d 9b       	sbis	0x0b, 5	; 11
    26c6:	fe cf       	rjmp	.-4      	; 0x26c4 <mca25_puts_progmem2+0x18>
    26c8:	4f 5f       	subi	r20, 0xFF	; 255
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	f9 01       	movw	r30, r18
    26ce:	84 91       	lpm	r24, Z
    26d0:	8c b9       	out	0x0c, r24	; 12
    26d2:	61 50       	subi	r22, 0x01	; 1
    26d4:	70 40       	sbci	r23, 0x00	; 0
    26d6:	ff ef       	ldi	r31, 0xFF	; 255
    26d8:	6f 3f       	cpi	r22, 0xFF	; 255
    26da:	7f 07       	cpc	r23, r31
    26dc:	59 f7       	brne	.-42     	; 0x26b4 <mca25_puts_progmem2+0x8>
    26de:	08 95       	ret

000026e0 <mca25_send_ok>:
    26e0:	67 e0       	ldi	r22, 0x07	; 7
    26e2:	70 e0       	ldi	r23, 0x00	; 0
    26e4:	80 e6       	ldi	r24, 0x60	; 96
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    26ec:	08 95       	ret

000026ee <mca25_send_data_ack>:
    26ee:	69 e0       	ldi	r22, 0x09	; 9
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	81 eb       	ldi	r24, 0xB1	; 177
    26f4:	95 e0       	ldi	r25, 0x05	; 5
    26f6:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    26fa:	08 95       	ret

000026fc <mca25_uart_init_460800>:
	
	}
}

//initialise 460kbaud
void mca25_uart_init_460800(void){
    26fc:	86 e6       	ldi	r24, 0x66	; 102
    26fe:	9e e0       	ldi	r25, 0x0E	; 14
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <mca25_uart_init_460800+0x4>
	_delay_ms(2);
	UBRRH=(F_CPU / (460800L * 16L) - 1)>>8;
    2704:	10 bc       	out	0x20, r1	; 32
	UBRRL=(F_CPU / (460800L * 16L) - 1)&0xFF;
    2706:	19 b8       	out	0x09, r1	; 9
    2708:	08 95       	ret

0000270a <mca25_uart_init_9600>:
}

//initialise uart
void mca25_uart_init_9600(void){
    270a:	10 bc       	out	0x20, r1	; 32
	UBRRH = (F_CPU / (9600 * 16L) - 1)>>8;
	UBRRL = (F_CPU / (9600 * 16L) - 1)&0xFF;
    270c:	8f e2       	ldi	r24, 0x2F	; 47
    270e:	89 b9       	out	0x09, r24	; 9

	//activate uart TX+RX
	UCSRB |= (1<<TXEN)|(1<<RXEN);
    2710:	8a b1       	in	r24, 0x0a	; 10
    2712:	88 61       	ori	r24, 0x18	; 24
    2714:	8a b9       	out	0x0a, r24	; 10
	//async 8N1
	UCSRC |= (1<<URSEL)|(3<<UCSZ0);
    2716:	80 b5       	in	r24, 0x20	; 32
    2718:	86 68       	ori	r24, 0x86	; 134
    271a:	80 bd       	out	0x20, r24	; 32
    271c:	08 95       	ret

0000271e <mca25_uart_init_19200>:
}

//initialise uart
void mca25_uart_init_19200(void){
    271e:	10 bc       	out	0x20, r1	; 32
	UBRRH = (F_CPU / (19200 * 16L) - 1)>>8;
	UBRRL = (F_CPU / (19200 * 16L) - 1)&0xFF;
    2720:	87 e1       	ldi	r24, 0x17	; 23
    2722:	89 b9       	out	0x09, r24	; 9
    2724:	08 95       	ret

00002726 <mca25_read_mux_packet>:
    2726:	df 92       	push	r13
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	0f 93       	push	r16
    272e:	1f 93       	push	r17
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	ec 01       	movw	r28, r24
    2736:	e6 2e       	mov	r14, r22
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	80 93 3d 07 	sts	0x073D, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	00 e0       	ldi	r16, 0x00	; 0
    2742:	dd 24       	eor	r13, r13
    2744:	31 c0       	rjmp	.+98     	; 0x27a8 <mca25_read_mux_packet+0x82>
    2746:	80 91 3d 07 	lds	r24, 0x073D
    274a:	88 23       	and	r24, r24
    274c:	09 f4       	brne	.+2      	; 0x2750 <mca25_read_mux_packet+0x2a>
    274e:	89 c0       	rjmp	.+274    	; 0x2862 <mca25_read_mux_packet+0x13c>
    2750:	5f 9b       	sbis	0x0b, 7	; 11
    2752:	f9 cf       	rjmp	.-14     	; 0x2746 <mca25_read_mux_packet+0x20>
    2754:	1c b1       	in	r17, 0x0c	; 12
    2756:	89 2f       	mov	r24, r25
    2758:	84 50       	subi	r24, 0x04	; 4
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	48 f4       	brcc	.+18     	; 0x2770 <mca25_read_mux_packet+0x4a>
    275e:	ee 20       	and	r14, r14
    2760:	31 f4       	brne	.+12     	; 0x276e <mca25_read_mux_packet+0x48>
    2762:	fe 01       	movw	r30, r28
    2764:	ed 0d       	add	r30, r13
    2766:	f1 1d       	adc	r31, r1
    2768:	10 83       	st	Z, r17
    276a:	d3 94       	inc	r13
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <mca25_read_mux_packet+0x4a>
    276e:	ea 94       	dec	r14
    2770:	a8 9a       	sbi	0x15, 0	; 21
    2772:	93 30       	cpi	r25, 0x03	; 3
    2774:	21 f1       	breq	.+72     	; 0x27be <mca25_read_mux_packet+0x98>
    2776:	94 30       	cpi	r25, 0x04	; 4
    2778:	28 f4       	brcc	.+10     	; 0x2784 <mca25_read_mux_packet+0x5e>
    277a:	91 30       	cpi	r25, 0x01	; 1
    277c:	79 f0       	breq	.+30     	; 0x279c <mca25_read_mux_packet+0x76>
    277e:	92 30       	cpi	r25, 0x02	; 2
    2780:	a8 f4       	brcc	.+42     	; 0x27ac <mca25_read_mux_packet+0x86>
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <mca25_read_mux_packet+0x6e>
    2784:	95 30       	cpi	r25, 0x05	; 5
    2786:	c1 f1       	breq	.+112    	; 0x27f8 <mca25_read_mux_packet+0xd2>
    2788:	95 30       	cpi	r25, 0x05	; 5
    278a:	50 f1       	brcs	.+84     	; 0x27e0 <mca25_read_mux_packet+0xba>
    278c:	96 30       	cpi	r25, 0x06	; 6
    278e:	09 f0       	breq	.+2      	; 0x2792 <mca25_read_mux_packet+0x6c>
    2790:	62 c0       	rjmp	.+196    	; 0x2856 <mca25_read_mux_packet+0x130>
    2792:	55 c0       	rjmp	.+170    	; 0x283e <mca25_read_mux_packet+0x118>
    2794:	19 3f       	cpi	r17, 0xF9	; 249
    2796:	09 f0       	breq	.+2      	; 0x279a <mca25_read_mux_packet+0x74>
    2798:	5e c0       	rjmp	.+188    	; 0x2856 <mca25_read_mux_packet+0x130>
    279a:	57 c0       	rjmp	.+174    	; 0x284a <mca25_read_mux_packet+0x124>
    279c:	19 3f       	cpi	r17, 0xF9	; 249
    279e:	09 f4       	brne	.+2      	; 0x27a2 <mca25_read_mux_packet+0x7c>
    27a0:	55 c0       	rjmp	.+170    	; 0x284c <mca25_read_mux_packet+0x126>
    27a2:	10 93 c5 04 	sts	0x04C5, r17
    27a6:	92 e0       	ldi	r25, 0x02	; 2
    27a8:	ff 24       	eor	r15, r15
    27aa:	55 c0       	rjmp	.+170    	; 0x2856 <mca25_read_mux_packet+0x130>
    27ac:	19 3f       	cpi	r17, 0xF9	; 249
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <mca25_read_mux_packet+0x8c>
    27b0:	4c c0       	rjmp	.+152    	; 0x284a <mca25_read_mux_packet+0x124>
    27b2:	10 93 c6 04 	sts	0x04C6, r17
    27b6:	93 e0       	ldi	r25, 0x03	; 3
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	f8 2e       	mov	r15, r24
    27bc:	4c c0       	rjmp	.+152    	; 0x2856 <mca25_read_mux_packet+0x130>
    27be:	01 2f       	mov	r16, r17
    27c0:	06 95       	lsr	r16
    27c2:	af 2d       	mov	r26, r15
    27c4:	bb 27       	eor	r27, r27
    27c6:	ef 2d       	mov	r30, r15
    27c8:	ef 5f       	subi	r30, 0xFF	; 255
    27ca:	00 32       	cpi	r16, 0x20	; 32
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <mca25_read_mux_packet+0xaa>
    27ce:	4c c0       	rjmp	.+152    	; 0x2868 <mca25_read_mux_packet+0x142>
    27d0:	ab 53       	subi	r26, 0x3B	; 59
    27d2:	bb 4f       	sbci	r27, 0xFB	; 251
    27d4:	1c 93       	st	X, r17
    27d6:	fe 2e       	mov	r15, r30
    27d8:	00 23       	and	r16, r16
    27da:	e1 f1       	breq	.+120    	; 0x2854 <mca25_read_mux_packet+0x12e>
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	3b c0       	rjmp	.+118    	; 0x2856 <mca25_read_mux_packet+0x130>
    27e0:	85 e0       	ldi	r24, 0x05	; 5
    27e2:	8f 15       	cp	r24, r15
    27e4:	30 f0       	brcs	.+12     	; 0x27f2 <mca25_read_mux_packet+0xcc>
    27e6:	ef 2d       	mov	r30, r15
    27e8:	ff 27       	eor	r31, r31
    27ea:	eb 53       	subi	r30, 0x3B	; 59
    27ec:	fb 4f       	sbci	r31, 0xFB	; 251
    27ee:	10 83       	st	Z, r17
    27f0:	f3 94       	inc	r15
    27f2:	01 50       	subi	r16, 0x01	; 1
    27f4:	79 f1       	breq	.+94     	; 0x2854 <mca25_read_mux_packet+0x12e>
    27f6:	2f c0       	rjmp	.+94     	; 0x2856 <mca25_read_mux_packet+0x130>
    27f8:	60 91 c5 04 	lds	r22, 0x04C5
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	0e 94 9f 34 	call	0x693e	; 0x693e <crc8_calc_byte_rev0x07>
    2802:	60 91 c6 04 	lds	r22, 0x04C6
    2806:	0e 94 9f 34 	call	0x693e	; 0x693e <crc8_calc_byte_rev0x07>
    280a:	60 91 c7 04 	lds	r22, 0x04C7
    280e:	0e 94 9f 34 	call	0x693e	; 0x693e <crc8_calc_byte_rev0x07>
    2812:	80 95       	com	r24
    2814:	81 17       	cp	r24, r17
    2816:	89 f0       	breq	.+34     	; 0x283a <mca25_read_mux_packet+0x114>
    2818:	88 81       	ld	r24, Y
    281a:	81 3e       	cpi	r24, 0xE1	; 225
    281c:	c9 f4       	brne	.+50     	; 0x2850 <mca25_read_mux_packet+0x12a>
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	87 30       	cpi	r24, 0x07	; 7
    2822:	b1 f4       	brne	.+44     	; 0x2850 <mca25_read_mux_packet+0x12a>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	8c 30       	cpi	r24, 0x0C	; 12
    2828:	99 f4       	brne	.+38     	; 0x2850 <mca25_read_mux_packet+0x12a>
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <mca25_read_mux_packet+0x10e>
    282c:	80 91 3d 07 	lds	r24, 0x073D
    2830:	88 23       	and	r24, r24
    2832:	b9 f0       	breq	.+46     	; 0x2862 <mca25_read_mux_packet+0x13c>
    2834:	5f 9b       	sbis	0x0b, 7	; 11
    2836:	fa cf       	rjmp	.-12     	; 0x282c <mca25_read_mux_packet+0x106>
    2838:	8c b1       	in	r24, 0x0c	; 12
    283a:	96 e0       	ldi	r25, 0x06	; 6
    283c:	0c c0       	rjmp	.+24     	; 0x2856 <mca25_read_mux_packet+0x130>
    283e:	19 3f       	cpi	r17, 0xF9	; 249
    2840:	39 f4       	brne	.+14     	; 0x2850 <mca25_read_mux_packet+0x12a>
    2842:	a8 98       	cbi	0x15, 0	; 21
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	15 c0       	rjmp	.+42     	; 0x2874 <mca25_read_mux_packet+0x14e>
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	dd 24       	eor	r13, r13
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <mca25_read_mux_packet+0x130>
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <mca25_read_mux_packet+0x130>
    2854:	95 e0       	ldi	r25, 0x05	; 5
    2856:	80 91 3d 07 	lds	r24, 0x073D
    285a:	88 23       	and	r24, r24
    285c:	09 f0       	breq	.+2      	; 0x2860 <mca25_read_mux_packet+0x13a>
    285e:	78 cf       	rjmp	.-272    	; 0x2750 <mca25_read_mux_packet+0x2a>
    2860:	a8 98       	cbi	0x15, 0	; 21
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <mca25_read_mux_packet+0x14e>
    2868:	ab 53       	subi	r26, 0x3B	; 59
    286a:	bb 4f       	sbci	r27, 0xFB	; 251
    286c:	1c 93       	st	X, r17
    286e:	fe 2e       	mov	r15, r30
    2870:	0f e1       	ldi	r16, 0x1F	; 31
    2872:	b4 cf       	rjmp	.-152    	; 0x27dc <mca25_read_mux_packet+0xb6>
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	08 95       	ret

00002884 <mca25_init_cam>:
    2884:	1f 93       	push	r17
    2886:	10 92 9b 04 	sts	0x049B, r1
    288a:	8d 9a       	sbi	0x11, 5	; 17
    288c:	91 9a       	sbi	0x12, 1	; 18
    288e:	90 98       	cbi	0x12, 0	; 18
    2890:	95 98       	cbi	0x12, 5	; 18
    2892:	80 91 cb 04 	lds	r24, 0x04CB
    2896:	88 23       	and	r24, r24
    2898:	21 f0       	breq	.+8      	; 0x28a2 <mca25_init_cam+0x1e>
    289a:	10 bc       	out	0x20, r1	; 32
    289c:	87 e1       	ldi	r24, 0x17	; 23
    289e:	89 b9       	out	0x09, r24	; 9
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <mca25_init_cam+0x22>
    28a2:	0e 94 85 13 	call	0x270a	; 0x270a <mca25_uart_init_9600>
    28a6:	95 98       	cbi	0x12, 5	; 18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <mca25_init_cam+0x28>
    28b0:	95 9a       	sbi	0x12, 5	; 18
    28b2:	10 e0       	ldi	r17, 0x00	; 0
    28b4:	1a 30       	cpi	r17, 0x0A	; 10
    28b6:	b8 f4       	brcc	.+46     	; 0x28e6 <mca25_init_cam+0x62>
    28b8:	8c e9       	ldi	r24, 0x9C	; 156
    28ba:	94 e0       	ldi	r25, 0x04	; 4
    28bc:	0e 94 37 13 	call	0x266e	; 0x266e <mca25_read_at_command>
    28c0:	88 23       	and	r24, r24
    28c2:	c9 f4       	brne	.+50     	; 0x28f6 <mca25_init_cam+0x72>
    28c4:	11 23       	and	r17, r17
    28c6:	09 f0       	breq	.+2      	; 0x28ca <mca25_init_cam+0x46>
    28c8:	8b c1       	rjmp	.+790    	; 0x2be0 <mca25_init_cam+0x35c>
    28ca:	10 bc       	out	0x20, r1	; 32
    28cc:	87 e1       	ldi	r24, 0x17	; 23
    28ce:	89 b9       	out	0x09, r24	; 9
    28d0:	8c e9       	ldi	r24, 0x9C	; 156
    28d2:	94 e0       	ldi	r25, 0x04	; 4
    28d4:	0e 94 37 13 	call	0x266e	; 0x266e <mca25_read_at_command>
    28d8:	88 23       	and	r24, r24
    28da:	09 f4       	brne	.+2      	; 0x28de <mca25_init_cam+0x5a>
    28dc:	81 c1       	rjmp	.+770    	; 0x2be0 <mca25_init_cam+0x35c>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	80 93 cb 04 	sts	0x04CB, r24
    28e4:	38 c0       	rjmp	.+112    	; 0x2956 <mca25_init_cam+0xd2>
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	8c e9       	ldi	r24, 0x9C	; 156
    28ea:	94 e0       	ldi	r25, 0x04	; 4
    28ec:	0e 94 93 13 	call	0x2726	; 0x2726 <mca25_read_mux_packet>
    28f0:	88 23       	and	r24, r24
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <mca25_init_cam+0x72>
    28f4:	75 c1       	rjmp	.+746    	; 0x2be0 <mca25_init_cam+0x35c>
    28f6:	1c 30       	cpi	r17, 0x0C	; 12
    28f8:	09 f4       	brne	.+2      	; 0x28fc <mca25_init_cam+0x78>
    28fa:	b5 c0       	rjmp	.+362    	; 0x2a66 <mca25_init_cam+0x1e2>
    28fc:	1d 30       	cpi	r17, 0x0D	; 13
    28fe:	a8 f4       	brcc	.+42     	; 0x292a <mca25_init_cam+0xa6>
    2900:	13 30       	cpi	r17, 0x03	; 3
    2902:	09 f4       	brne	.+2      	; 0x2906 <mca25_init_cam+0x82>
    2904:	6a c0       	rjmp	.+212    	; 0x29da <mca25_init_cam+0x156>
    2906:	14 30       	cpi	r17, 0x04	; 4
    2908:	30 f4       	brcc	.+12     	; 0x2916 <mca25_init_cam+0x92>
    290a:	11 30       	cpi	r17, 0x01	; 1
    290c:	f1 f1       	breq	.+124    	; 0x298a <mca25_init_cam+0x106>
    290e:	12 30       	cpi	r17, 0x02	; 2
    2910:	08 f0       	brcs	.+2      	; 0x2914 <mca25_init_cam+0x90>
    2912:	4e c0       	rjmp	.+156    	; 0x29b0 <mca25_init_cam+0x12c>
    2914:	20 c0       	rjmp	.+64     	; 0x2956 <mca25_init_cam+0xd2>
    2916:	1a 30       	cpi	r17, 0x0A	; 10
    2918:	09 f4       	brne	.+2      	; 0x291c <mca25_init_cam+0x98>
    291a:	81 c0       	rjmp	.+258    	; 0x2a1e <mca25_init_cam+0x19a>
    291c:	1b 30       	cpi	r17, 0x0B	; 11
    291e:	08 f0       	brcs	.+2      	; 0x2922 <mca25_init_cam+0x9e>
    2920:	90 c0       	rjmp	.+288    	; 0x2a42 <mca25_init_cam+0x1be>
    2922:	14 30       	cpi	r17, 0x04	; 4
    2924:	09 f0       	breq	.+2      	; 0x2928 <mca25_init_cam+0xa4>
    2926:	53 c1       	rjmp	.+678    	; 0x2bce <mca25_init_cam+0x34a>
    2928:	6b c0       	rjmp	.+214    	; 0x2a00 <mca25_init_cam+0x17c>
    292a:	10 31       	cpi	r17, 0x10	; 16
    292c:	09 f4       	brne	.+2      	; 0x2930 <mca25_init_cam+0xac>
    292e:	ed c0       	rjmp	.+474    	; 0x2b0a <mca25_init_cam+0x286>
    2930:	11 31       	cpi	r17, 0x11	; 17
    2932:	38 f4       	brcc	.+14     	; 0x2942 <mca25_init_cam+0xbe>
    2934:	1e 30       	cpi	r17, 0x0E	; 14
    2936:	09 f4       	brne	.+2      	; 0x293a <mca25_init_cam+0xb6>
    2938:	bc c0       	rjmp	.+376    	; 0x2ab2 <mca25_init_cam+0x22e>
    293a:	1f 30       	cpi	r17, 0x0F	; 15
    293c:	08 f0       	brcs	.+2      	; 0x2940 <mca25_init_cam+0xbc>
    293e:	cc c0       	rjmp	.+408    	; 0x2ad8 <mca25_init_cam+0x254>
    2940:	a5 c0       	rjmp	.+330    	; 0x2a8c <mca25_init_cam+0x208>
    2942:	12 31       	cpi	r17, 0x12	; 18
    2944:	09 f4       	brne	.+2      	; 0x2948 <mca25_init_cam+0xc4>
    2946:	05 c1       	rjmp	.+522    	; 0x2b52 <mca25_init_cam+0x2ce>
    2948:	12 31       	cpi	r17, 0x12	; 18
    294a:	08 f4       	brcc	.+2      	; 0x294e <mca25_init_cam+0xca>
    294c:	f7 c0       	rjmp	.+494    	; 0x2b3c <mca25_init_cam+0x2b8>
    294e:	13 31       	cpi	r17, 0x13	; 19
    2950:	09 f0       	breq	.+2      	; 0x2954 <mca25_init_cam+0xd0>
    2952:	3d c1       	rjmp	.+634    	; 0x2bce <mca25_init_cam+0x34a>
    2954:	31 c1       	rjmp	.+610    	; 0x2bb8 <mca25_init_cam+0x334>
    2956:	4c e9       	ldi	r20, 0x9C	; 156
    2958:	54 e0       	ldi	r21, 0x04	; 4
    295a:	64 e0       	ldi	r22, 0x04	; 4
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	8e e1       	ldi	r24, 0x1E	; 30
    2960:	95 e0       	ldi	r25, 0x05	; 5
    2962:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2966:	88 23       	and	r24, r24
    2968:	61 f4       	brne	.+24     	; 0x2982 <mca25_init_cam+0xfe>
    296a:	4e e9       	ldi	r20, 0x9E	; 158
    296c:	54 e0       	ldi	r21, 0x04	; 4
    296e:	64 e0       	ldi	r22, 0x04	; 4
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	89 e1       	ldi	r24, 0x19	; 25
    2974:	95 e0       	ldi	r25, 0x05	; 5
    2976:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    297a:	88 23       	and	r24, r24
    297c:	11 f4       	brne	.+4      	; 0x2982 <mca25_init_cam+0xfe>
    297e:	10 e0       	ldi	r17, 0x00	; 0
    2980:	9b cf       	rjmp	.-202    	; 0x28b8 <mca25_init_cam+0x34>
    2982:	0e 94 70 13 	call	0x26e0	; 0x26e0 <mca25_send_ok>
    2986:	11 e0       	ldi	r17, 0x01	; 1
    2988:	97 cf       	rjmp	.-210    	; 0x28b8 <mca25_init_cam+0x34>
    298a:	4c e9       	ldi	r20, 0x9C	; 156
    298c:	54 e0       	ldi	r21, 0x04	; 4
    298e:	68 e0       	ldi	r22, 0x08	; 8
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	80 e1       	ldi	r24, 0x10	; 16
    2994:	95 e0       	ldi	r25, 0x05	; 5
    2996:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    299a:	88 23       	and	r24, r24
    299c:	09 f4       	brne	.+2      	; 0x29a0 <mca25_init_cam+0x11c>
    299e:	8c cf       	rjmp	.-232    	; 0x28b8 <mca25_init_cam+0x34>
    29a0:	6f e3       	ldi	r22, 0x3F	; 63
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	80 ed       	ldi	r24, 0xD0	; 208
    29a6:	94 e0       	ldi	r25, 0x04	; 4
    29a8:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    29ac:	12 e0       	ldi	r17, 0x02	; 2
    29ae:	84 cf       	rjmp	.-248    	; 0x28b8 <mca25_init_cam+0x34>
    29b0:	4c e9       	ldi	r20, 0x9C	; 156
    29b2:	54 e0       	ldi	r21, 0x04	; 4
    29b4:	6d e0       	ldi	r22, 0x0D	; 13
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	82 ec       	ldi	r24, 0xC2	; 194
    29ba:	94 e0       	ldi	r25, 0x04	; 4
    29bc:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    29c0:	88 23       	and	r24, r24
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <mca25_init_cam+0x142>
    29c4:	77 cf       	rjmp	.-274    	; 0x28b4 <mca25_init_cam+0x30>
    29c6:	66 e0       	ldi	r22, 0x06	; 6
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	8b eb       	ldi	r24, 0xBB	; 187
    29cc:	94 e0       	ldi	r25, 0x04	; 4
    29ce:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    29d2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <mca25_uart_init_460800>
    29d6:	13 e0       	ldi	r17, 0x03	; 3
    29d8:	6f cf       	rjmp	.-290    	; 0x28b8 <mca25_init_cam+0x34>
    29da:	4c e9       	ldi	r20, 0x9C	; 156
    29dc:	54 e0       	ldi	r21, 0x04	; 4
    29de:	69 e0       	ldi	r22, 0x09	; 9
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	81 eb       	ldi	r24, 0xB1	; 177
    29e4:	94 e0       	ldi	r25, 0x04	; 4
    29e6:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    29ea:	88 23       	and	r24, r24
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <mca25_init_cam+0x16c>
    29ee:	64 cf       	rjmp	.-312    	; 0x28b8 <mca25_init_cam+0x34>
    29f0:	67 e3       	ldi	r22, 0x37	; 55
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	89 e7       	ldi	r24, 0x79	; 121
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    29fc:	14 e0       	ldi	r17, 0x04	; 4
    29fe:	5c cf       	rjmp	.-328    	; 0x28b8 <mca25_init_cam+0x34>
    2a00:	4c e9       	ldi	r20, 0x9C	; 156
    2a02:	54 e0       	ldi	r21, 0x04	; 4
    2a04:	60 e1       	ldi	r22, 0x10	; 16
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	88 e6       	ldi	r24, 0x68	; 104
    2a0a:	94 e0       	ldi	r25, 0x04	; 4
    2a0c:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2a10:	88 23       	and	r24, r24
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <mca25_init_cam+0x192>
    2a14:	51 cf       	rjmp	.-350    	; 0x28b8 <mca25_init_cam+0x34>
    2a16:	0e 94 70 13 	call	0x26e0	; 0x26e0 <mca25_send_ok>
    2a1a:	1a e0       	ldi	r17, 0x0A	; 10
    2a1c:	64 cf       	rjmp	.-312    	; 0x28e6 <mca25_init_cam+0x62>
    2a1e:	80 91 c5 04 	lds	r24, 0x04C5
    2a22:	83 30       	cpi	r24, 0x03	; 3
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <mca25_init_cam+0x1a4>
    2a26:	5f cf       	rjmp	.-322    	; 0x28e6 <mca25_init_cam+0x62>
    2a28:	80 91 c7 04 	lds	r24, 0x04C7
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <mca25_init_cam+0x1ae>
    2a30:	5a cf       	rjmp	.-332    	; 0x28e6 <mca25_init_cam+0x62>
    2a32:	66 e0       	ldi	r22, 0x06	; 6
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	81 e6       	ldi	r24, 0x61	; 97
    2a38:	94 e0       	ldi	r25, 0x04	; 4
    2a3a:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2a3e:	1b e0       	ldi	r17, 0x0B	; 11
    2a40:	52 cf       	rjmp	.-348    	; 0x28e6 <mca25_init_cam+0x62>
    2a42:	80 91 c5 04 	lds	r24, 0x04C5
    2a46:	83 32       	cpi	r24, 0x23	; 35
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <mca25_init_cam+0x1c8>
    2a4a:	34 cf       	rjmp	.-408    	; 0x28b4 <mca25_init_cam+0x30>
    2a4c:	80 91 c7 04 	lds	r24, 0x04C7
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <mca25_init_cam+0x1d2>
    2a54:	2f cf       	rjmp	.-418    	; 0x28b4 <mca25_init_cam+0x30>
    2a56:	66 e0       	ldi	r22, 0x06	; 6
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	8a e5       	ldi	r24, 0x5A	; 90
    2a5c:	94 e0       	ldi	r25, 0x04	; 4
    2a5e:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2a62:	1c e0       	ldi	r17, 0x0C	; 12
    2a64:	40 cf       	rjmp	.-384    	; 0x28e6 <mca25_init_cam+0x62>
    2a66:	4c e9       	ldi	r20, 0x9C	; 156
    2a68:	54 e0       	ldi	r21, 0x04	; 4
    2a6a:	64 e0       	ldi	r22, 0x04	; 4
    2a6c:	70 e0       	ldi	r23, 0x00	; 0
    2a6e:	85 e5       	ldi	r24, 0x55	; 85
    2a70:	94 e0       	ldi	r25, 0x04	; 4
    2a72:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2a76:	88 23       	and	r24, r24
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <mca25_init_cam+0x1f8>
    2a7a:	35 cf       	rjmp	.-406    	; 0x28e6 <mca25_init_cam+0x62>
    2a7c:	6b e0       	ldi	r22, 0x0B	; 11
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	89 e4       	ldi	r24, 0x49	; 73
    2a82:	94 e0       	ldi	r25, 0x04	; 4
    2a84:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2a88:	1d e0       	ldi	r17, 0x0D	; 13
    2a8a:	2d cf       	rjmp	.-422    	; 0x28e6 <mca25_init_cam+0x62>
    2a8c:	4c e9       	ldi	r20, 0x9C	; 156
    2a8e:	54 e0       	ldi	r21, 0x04	; 4
    2a90:	65 e0       	ldi	r22, 0x05	; 5
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	83 e4       	ldi	r24, 0x43	; 67
    2a96:	94 e0       	ldi	r25, 0x04	; 4
    2a98:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <mca25_init_cam+0x21e>
    2aa0:	09 cf       	rjmp	.-494    	; 0x28b4 <mca25_init_cam+0x30>
    2aa2:	6a e0       	ldi	r22, 0x0A	; 10
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	88 e3       	ldi	r24, 0x38	; 56
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2aae:	1e e0       	ldi	r17, 0x0E	; 14
    2ab0:	1a cf       	rjmp	.-460    	; 0x28e6 <mca25_init_cam+0x62>
    2ab2:	4c e9       	ldi	r20, 0x9C	; 156
    2ab4:	54 e0       	ldi	r21, 0x04	; 4
    2ab6:	6d e0       	ldi	r22, 0x0D	; 13
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	8a e2       	ldi	r24, 0x2A	; 42
    2abc:	94 e0       	ldi	r25, 0x04	; 4
    2abe:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <mca25_init_cam+0x244>
    2ac6:	0f cf       	rjmp	.-482    	; 0x28e6 <mca25_init_cam+0x62>
    2ac8:	6c e0       	ldi	r22, 0x0C	; 12
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	8d e1       	ldi	r24, 0x1D	; 29
    2ace:	94 e0       	ldi	r25, 0x04	; 4
    2ad0:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2ad4:	1f e0       	ldi	r17, 0x0F	; 15
    2ad6:	07 cf       	rjmp	.-498    	; 0x28e6 <mca25_init_cam+0x62>
    2ad8:	4c e9       	ldi	r20, 0x9C	; 156
    2ada:	54 e0       	ldi	r21, 0x04	; 4
    2adc:	6e e0       	ldi	r22, 0x0E	; 14
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	8e e0       	ldi	r24, 0x0E	; 14
    2ae2:	94 e0       	ldi	r25, 0x04	; 4
    2ae4:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2ae8:	88 23       	and	r24, r24
    2aea:	09 f4       	brne	.+2      	; 0x2aee <mca25_init_cam+0x26a>
    2aec:	e3 ce       	rjmp	.-570    	; 0x28b4 <mca25_init_cam+0x30>
    2aee:	63 e1       	ldi	r22, 0x13	; 19
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	8a ef       	ldi	r24, 0xFA	; 250
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2afa:	6c e0       	ldi	r22, 0x0C	; 12
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	8d ee       	ldi	r24, 0xED	; 237
    2b00:	93 e0       	ldi	r25, 0x03	; 3
    2b02:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b06:	10 e1       	ldi	r17, 0x10	; 16
    2b08:	ee ce       	rjmp	.-548    	; 0x28e6 <mca25_init_cam+0x62>
    2b0a:	4c e9       	ldi	r20, 0x9C	; 156
    2b0c:	54 e0       	ldi	r21, 0x04	; 4
    2b0e:	61 e1       	ldi	r22, 0x11	; 17
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	8b ed       	ldi	r24, 0xDB	; 219
    2b14:	93 e0       	ldi	r25, 0x03	; 3
    2b16:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <mca25_init_cam+0x29c>
    2b1e:	e3 ce       	rjmp	.-570    	; 0x28e6 <mca25_init_cam+0x62>
    2b20:	6c e0       	ldi	r22, 0x0C	; 12
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	8e ec       	ldi	r24, 0xCE	; 206
    2b26:	93 e0       	ldi	r25, 0x03	; 3
    2b28:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b2c:	66 e0       	ldi	r22, 0x06	; 6
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	87 ec       	ldi	r24, 0xC7	; 199
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b38:	11 e1       	ldi	r17, 0x11	; 17
    2b3a:	d5 ce       	rjmp	.-598    	; 0x28e6 <mca25_init_cam+0x62>
    2b3c:	80 91 c5 04 	lds	r24, 0x04C5
    2b40:	81 38       	cpi	r24, 0x81	; 129
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <mca25_init_cam+0x2c2>
    2b44:	b7 ce       	rjmp	.-658    	; 0x28b4 <mca25_init_cam+0x30>
    2b46:	80 91 c7 04 	lds	r24, 0x04C7
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <mca25_init_cam+0x2cc>
    2b4e:	b2 ce       	rjmp	.-668    	; 0x28b4 <mca25_init_cam+0x30>
    2b50:	45 c0       	rjmp	.+138    	; 0x2bdc <mca25_init_cam+0x358>
    2b52:	4c e9       	ldi	r20, 0x9C	; 156
    2b54:	54 e0       	ldi	r21, 0x04	; 4
    2b56:	64 e0       	ldi	r22, 0x04	; 4
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	82 ec       	ldi	r24, 0xC2	; 194
    2b5c:	93 e0       	ldi	r25, 0x03	; 3
    2b5e:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2b62:	88 23       	and	r24, r24
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <mca25_init_cam+0x2e4>
    2b66:	bf ce       	rjmp	.-642    	; 0x28e6 <mca25_init_cam+0x62>
    2b68:	6a e0       	ldi	r22, 0x0A	; 10
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	87 eb       	ldi	r24, 0xB7	; 183
    2b6e:	93 e0       	ldi	r25, 0x03	; 3
    2b70:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b74:	69 e0       	ldi	r22, 0x09	; 9
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	8d ea       	ldi	r24, 0xAD	; 173
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b80:	5d 9b       	sbis	0x0b, 5	; 11
    2b82:	fe cf       	rjmp	.-4      	; 0x2b80 <mca25_init_cam+0x2fc>
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	8c b9       	out	0x0c, r24	; 12
    2b88:	5d 9b       	sbis	0x0b, 5	; 11
    2b8a:	fe cf       	rjmp	.-4      	; 0x2b88 <mca25_init_cam+0x304>
    2b8c:	8e ee       	ldi	r24, 0xEE	; 238
    2b8e:	8c b9       	out	0x0c, r24	; 12
    2b90:	6c e0       	ldi	r22, 0x0C	; 12
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	80 ea       	ldi	r24, 0xA0	; 160
    2b96:	93 e0       	ldi	r25, 0x03	; 3
    2b98:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2b9c:	6a e0       	ldi	r22, 0x0A	; 10
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	85 e9       	ldi	r24, 0x95	; 149
    2ba2:	93 e0       	ldi	r25, 0x03	; 3
    2ba4:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2ba8:	6c e0       	ldi	r22, 0x0C	; 12
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	88 e8       	ldi	r24, 0x88	; 136
    2bae:	93 e0       	ldi	r25, 0x03	; 3
    2bb0:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2bb4:	13 e1       	ldi	r17, 0x13	; 19
    2bb6:	97 ce       	rjmp	.-722    	; 0x28e6 <mca25_init_cam+0x62>
    2bb8:	4c e9       	ldi	r20, 0x9C	; 156
    2bba:	54 e0       	ldi	r21, 0x04	; 4
    2bbc:	6f e1       	ldi	r22, 0x1F	; 31
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	88 e6       	ldi	r24, 0x68	; 104
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2bc8:	88 23       	and	r24, r24
    2bca:	21 f4       	brne	.+8      	; 0x2bd4 <mca25_init_cam+0x350>
    2bcc:	8c ce       	rjmp	.-744    	; 0x28e6 <mca25_init_cam+0x62>
    2bce:	14 36       	cpi	r17, 0x64	; 100
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <mca25_init_cam+0x350>
    2bd2:	70 ce       	rjmp	.-800    	; 0x28b4 <mca25_init_cam+0x30>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	80 93 9b 04 	sts	0x049B, r24
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <mca25_init_cam+0x35c>
    2bdc:	12 e1       	ldi	r17, 0x12	; 18
    2bde:	83 ce       	rjmp	.-762    	; 0x28e6 <mca25_init_cam+0x62>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	1f 91       	pop	r17
    2be6:	08 95       	ret

00002be8 <mca25_init>:
    2be8:	10 92 cb 04 	sts	0x04CB, r1
    2bec:	10 92 c4 04 	sts	0x04C4, r1
    2bf0:	10 92 d2 04 	sts	0x04D2, r1
    2bf4:	0e 94 42 14 	call	0x2884	; 0x2884 <mca25_init_cam>
    2bf8:	08 95       	ret

00002bfa <mca25_handle_channel_x03>:
    2bfa:	80 91 c6 04 	lds	r24, 0x04C6
    2bfe:	8f 3e       	cpi	r24, 0xEF	; 239
    2c00:	89 f4       	brne	.+34     	; 0x2c24 <mca25_handle_channel_x03+0x2a>
    2c02:	4c e9       	ldi	r20, 0x9C	; 156
    2c04:	54 e0       	ldi	r21, 0x04	; 4
    2c06:	65 e0       	ldi	r22, 0x05	; 5
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	8e e8       	ldi	r24, 0x8E	; 142
    2c0c:	95 e0       	ldi	r25, 0x05	; 5
    2c0e:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2c12:	88 23       	and	r24, r24
    2c14:	79 f0       	breq	.+30     	; 0x2c34 <mca25_handle_channel_x03+0x3a>
    2c16:	6b e0       	ldi	r22, 0x0B	; 11
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	82 e8       	ldi	r24, 0x82	; 130
    2c1c:	95 e0       	ldi	r25, 0x05	; 5
    2c1e:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2c22:	08 95       	ret
    2c24:	8f 33       	cpi	r24, 0x3F	; 63
    2c26:	31 f4       	brne	.+12     	; 0x2c34 <mca25_handle_channel_x03+0x3a>
    2c28:	66 e0       	ldi	r22, 0x06	; 6
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	8b e7       	ldi	r24, 0x7B	; 123
    2c2e:	95 e0       	ldi	r25, 0x05	; 5
    2c30:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2c34:	08 95       	ret

00002c36 <mca25_handle_channel_x23>:
    2c36:	80 91 c6 04 	lds	r24, 0x04C6
    2c3a:	8f 3e       	cpi	r24, 0xEF	; 239
    2c3c:	89 f4       	brne	.+34     	; 0x2c60 <mca25_handle_channel_x23+0x2a>
    2c3e:	4c e9       	ldi	r20, 0x9C	; 156
    2c40:	54 e0       	ldi	r21, 0x04	; 4
    2c42:	68 e0       	ldi	r22, 0x08	; 8
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	88 ea       	ldi	r24, 0xA8	; 168
    2c48:	95 e0       	ldi	r25, 0x05	; 5
    2c4a:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2c4e:	88 23       	and	r24, r24
    2c50:	79 f0       	breq	.+30     	; 0x2c70 <mca25_handle_channel_x23+0x3a>
    2c52:	6c e0       	ldi	r22, 0x0C	; 12
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	8b e9       	ldi	r24, 0x9B	; 155
    2c58:	95 e0       	ldi	r25, 0x05	; 5
    2c5a:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2c5e:	08 95       	ret
    2c60:	8f 33       	cpi	r24, 0x3F	; 63
    2c62:	31 f4       	brne	.+12     	; 0x2c70 <mca25_handle_channel_x23+0x3a>
    2c64:	66 e0       	ldi	r22, 0x06	; 6
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	84 e9       	ldi	r24, 0x94	; 148
    2c6a:	95 e0       	ldi	r25, 0x05	; 5
    2c6c:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2c70:	08 95       	ret

00002c72 <mca25_configure>:
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	10 92 d2 04 	sts	0x04D2, r1
    2c7c:	80 91 9b 04 	lds	r24, 0x049B
    2c80:	88 23       	and	r24, r24
    2c82:	31 f4       	brne	.+12     	; 0x2c90 <mca25_configure+0x1e>
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <mca25_configure+0x18>
    2c86:	10 92 9b 04 	sts	0x049B, r1
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	5e c0       	rjmp	.+188    	; 0x2d4c <mca25_configure+0xda>
    2c90:	6d e7       	ldi	r22, 0x7D	; 125
    2c92:	71 e0       	ldi	r23, 0x01	; 1
    2c94:	83 ee       	ldi	r24, 0xE3	; 227
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2c9c:	10 e0       	ldi	r17, 0x00	; 0
    2c9e:	c0 e0       	ldi	r28, 0x00	; 0
    2ca0:	d0 e0       	ldi	r29, 0x00	; 0
    2ca2:	60 e0       	ldi	r22, 0x00	; 0
    2ca4:	8c e9       	ldi	r24, 0x9C	; 156
    2ca6:	94 e0       	ldi	r25, 0x04	; 4
    2ca8:	0e 94 93 13 	call	0x2726	; 0x2726 <mca25_read_mux_packet>
    2cac:	88 23       	and	r24, r24
    2cae:	59 f3       	breq	.-42     	; 0x2c86 <mca25_configure+0x14>
    2cb0:	80 91 c5 04 	lds	r24, 0x04C5
    2cb4:	83 38       	cpi	r24, 0x83	; 131
    2cb6:	c1 f5       	brne	.+112    	; 0x2d28 <mca25_configure+0xb6>
    2cb8:	80 91 c6 04 	lds	r24, 0x04C6
    2cbc:	8f 3e       	cpi	r24, 0xEF	; 239
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <mca25_configure+0x50>
    2cc0:	40 c0       	rjmp	.+128    	; 0x2d42 <mca25_configure+0xd0>
    2cc2:	12 30       	cpi	r17, 0x02	; 2
    2cc4:	b9 f0       	breq	.+46     	; 0x2cf4 <mca25_configure+0x82>
    2cc6:	12 30       	cpi	r17, 0x02	; 2
    2cc8:	18 f0       	brcs	.+6      	; 0x2cd0 <mca25_configure+0x5e>
    2cca:	13 30       	cpi	r17, 0x03	; 3
    2ccc:	d1 f5       	brne	.+116    	; 0x2d42 <mca25_configure+0xd0>
    2cce:	22 c0       	rjmp	.+68     	; 0x2d14 <mca25_configure+0xa2>
    2cd0:	4c e9       	ldi	r20, 0x9C	; 156
    2cd2:	54 e0       	ldi	r21, 0x04	; 4
    2cd4:	63 e0       	ldi	r22, 0x03	; 3
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	81 e4       	ldi	r24, 0x41	; 65
    2cda:	95 e0       	ldi	r25, 0x05	; 5
    2cdc:	0e 94 bd 22 	call	0x457a	; 0x457a <string_compare_progmem_plen2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	79 f1       	breq	.+94     	; 0x2d42 <mca25_configure+0xd0>
    2ce4:	6d e1       	ldi	r22, 0x1D	; 29
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	83 e2       	ldi	r24, 0x23	; 35
    2cea:	95 e0       	ldi	r25, 0x05	; 5
    2cec:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2cf0:	12 e0       	ldi	r17, 0x02	; 2
    2cf2:	d7 cf       	rjmp	.-82     	; 0x2ca2 <mca25_configure+0x30>
    2cf4:	80 91 c8 04 	lds	r24, 0x04C8
    2cf8:	99 27       	eor	r25, r25
    2cfa:	d8 2f       	mov	r29, r24
    2cfc:	cc 27       	eor	r28, r28
    2cfe:	80 91 c9 04 	lds	r24, 0x04C9
    2d02:	c8 0f       	add	r28, r24
    2d04:	d1 1d       	adc	r29, r1
    2d06:	80 91 c7 04 	lds	r24, 0x04C7
    2d0a:	86 95       	lsr	r24
    2d0c:	c8 1b       	sub	r28, r24
    2d0e:	d1 09       	sbc	r29, r1
    2d10:	13 e0       	ldi	r17, 0x03	; 3
    2d12:	c7 cf       	rjmp	.-114    	; 0x2ca2 <mca25_configure+0x30>
    2d14:	80 91 c7 04 	lds	r24, 0x04C7
    2d18:	86 95       	lsr	r24
    2d1a:	c8 1b       	sub	r28, r24
    2d1c:	d1 09       	sbc	r29, r1
    2d1e:	1c 16       	cp	r1, r28
    2d20:	1d 06       	cpc	r1, r29
    2d22:	0c f4       	brge	.+2      	; 0x2d26 <mca25_configure+0xb4>
    2d24:	be cf       	rjmp	.-132    	; 0x2ca2 <mca25_configure+0x30>
    2d26:	10 c0       	rjmp	.+32     	; 0x2d48 <mca25_configure+0xd6>
    2d28:	83 32       	cpi	r24, 0x23	; 35
    2d2a:	19 f4       	brne	.+6      	; 0x2d32 <mca25_configure+0xc0>
    2d2c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <mca25_handle_channel_x23>
    2d30:	08 c0       	rjmp	.+16     	; 0x2d42 <mca25_configure+0xd0>
    2d32:	83 30       	cpi	r24, 0x03	; 3
    2d34:	19 f4       	brne	.+6      	; 0x2d3c <mca25_configure+0xca>
    2d36:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <mca25_handle_channel_x03>
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <mca25_configure+0xd0>
    2d3c:	89 e6       	ldi	r24, 0x69	; 105
    2d3e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    2d42:	14 36       	cpi	r17, 0x64	; 100
    2d44:	09 f0       	breq	.+2      	; 0x2d48 <mca25_configure+0xd6>
    2d46:	ad cf       	rjmp	.-166    	; 0x2ca2 <mca25_configure+0x30>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	1f 91       	pop	r17
    2d52:	08 95       	ret

00002d54 <mca25_start_image_grab>:
    2d54:	af 92       	push	r10
    2d56:	bf 92       	push	r11
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	94 9a       	sbi	0x12, 4	; 18
    2d68:	10 92 cd 04 	sts	0x04CD, r1
    2d6c:	10 92 ce 04 	sts	0x04CE, r1
    2d70:	10 92 cf 04 	sts	0x04CF, r1
    2d74:	10 92 d0 04 	sts	0x04D0, r1
    2d78:	80 93 cc 04 	sts	0x04CC, r24
    2d7c:	10 92 d2 04 	sts	0x04D2, r1
    2d80:	80 91 9b 04 	lds	r24, 0x049B
    2d84:	88 23       	and	r24, r24
    2d86:	39 f4       	brne	.+14     	; 0x2d96 <mca25_start_image_grab+0x42>
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <mca25_start_image_grab+0x3a>
    2d8a:	10 92 9b 04 	sts	0x049B, r1
    2d8e:	94 98       	cbi	0x12, 4	; 18
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a9 c0       	rjmp	.+338    	; 0x2ee8 <mca25_start_image_grab+0x194>
    2d96:	00 e0       	ldi	r16, 0x00	; 0
    2d98:	10 e0       	ldi	r17, 0x00	; 0
    2d9a:	aa 24       	eor	r10, r10
    2d9c:	bb 24       	eor	r11, r11
    2d9e:	aa 20       	and	r10, r10
    2da0:	21 f4       	brne	.+8      	; 0x2daa <mca25_start_image_grab+0x56>
    2da2:	80 91 d2 04 	lds	r24, 0x04D2
    2da6:	82 30       	cpi	r24, 0x02	; 2
    2da8:	61 f0       	breq	.+24     	; 0x2dc2 <mca25_start_image_grab+0x6e>
    2daa:	80 91 d2 04 	lds	r24, 0x04D2
    2dae:	83 30       	cpi	r24, 0x03	; 3
    2db0:	11 f4       	brne	.+4      	; 0x2db6 <mca25_start_image_grab+0x62>
    2db2:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    2db6:	61 e8       	ldi	r22, 0x81	; 129
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	82 e6       	ldi	r24, 0x62	; 98
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2dc2:	dd 24       	eor	r13, r13
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	8c e9       	ldi	r24, 0x9C	; 156
    2dc8:	94 e0       	ldi	r25, 0x04	; 4
    2dca:	0e 94 93 13 	call	0x2726	; 0x2726 <mca25_read_mux_packet>
    2dce:	88 23       	and	r24, r24
    2dd0:	e1 f2       	breq	.-72     	; 0x2d8a <mca25_start_image_grab+0x36>
    2dd2:	80 91 c5 04 	lds	r24, 0x04C5
    2dd6:	83 38       	cpi	r24, 0x83	; 131
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <mca25_start_image_grab+0x88>
    2dda:	41 c0       	rjmp	.+130    	; 0x2e5e <mca25_start_image_grab+0x10a>
    2ddc:	80 91 c6 04 	lds	r24, 0x04C6
    2de0:	8f 3e       	cpi	r24, 0xEF	; 239
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <mca25_start_image_grab+0x92>
    2de4:	46 c0       	rjmp	.+140    	; 0x2e72 <mca25_start_image_grab+0x11e>
    2de6:	dd 20       	and	r13, r13
    2de8:	29 f0       	breq	.+10     	; 0x2df4 <mca25_start_image_grab+0xa0>
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	8d 15       	cp	r24, r13
    2dee:	08 f4       	brcc	.+2      	; 0x2df2 <mca25_start_image_grab+0x9e>
    2df0:	5b c0       	rjmp	.+182    	; 0x2ea8 <mca25_start_image_grab+0x154>
    2df2:	23 c0       	rjmp	.+70     	; 0x2e3a <mca25_start_image_grab+0xe6>
    2df4:	80 91 c9 04 	lds	r24, 0x04C9
    2df8:	99 27       	eor	r25, r25
    2dfa:	18 2f       	mov	r17, r24
    2dfc:	00 27       	eor	r16, r16
    2dfe:	80 91 ca 04 	lds	r24, 0x04CA
    2e02:	08 0f       	add	r16, r24
    2e04:	11 1d       	adc	r17, r1
    2e06:	04 30       	cpi	r16, 0x04	; 4
    2e08:	11 05       	cpc	r17, r1
    2e0a:	dc f2       	brlt	.-74     	; 0x2dc2 <mca25_start_image_grab+0x6e>
    2e0c:	80 91 c7 04 	lds	r24, 0x04C7
    2e10:	86 95       	lsr	r24
    2e12:	08 1b       	sub	r16, r24
    2e14:	11 09       	sbc	r17, r1
    2e16:	80 91 9c 04 	lds	r24, 0x049C
    2e1a:	80 3a       	cpi	r24, 0xA0	; 160
    2e1c:	19 f4       	brne	.+6      	; 0x2e24 <mca25_start_image_grab+0xd0>
    2e1e:	52 e0       	ldi	r21, 0x02	; 2
    2e20:	d5 2e       	mov	r13, r21
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <mca25_start_image_grab+0xd4>
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	d4 2e       	mov	r13, r20
    2e28:	10 16       	cp	r1, r16
    2e2a:	11 06       	cpc	r1, r17
    2e2c:	ec f1       	brlt	.+122    	; 0x2ea8 <mca25_start_image_grab+0x154>
    2e2e:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    2e32:	e2 e0       	ldi	r30, 0x02	; 2
    2e34:	de 16       	cp	r13, r30
    2e36:	29 f6       	brne	.-118    	; 0x2dc2 <mca25_start_image_grab+0x6e>
    2e38:	3b c0       	rjmp	.+118    	; 0x2eb0 <mca25_start_image_grab+0x15c>
    2e3a:	80 91 c7 04 	lds	r24, 0x04C7
    2e3e:	86 95       	lsr	r24
    2e40:	08 1b       	sub	r16, r24
    2e42:	11 09       	sbc	r17, r1
    2e44:	10 16       	cp	r1, r16
    2e46:	11 06       	cpc	r1, r17
    2e48:	7c f1       	brlt	.+94     	; 0x2ea8 <mca25_start_image_grab+0x154>
    2e4a:	8e e2       	ldi	r24, 0x2E	; 46
    2e4c:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    2e50:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    2e54:	f2 e0       	ldi	r31, 0x02	; 2
    2e56:	df 16       	cp	r13, r31
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <mca25_start_image_grab+0x108>
    2e5a:	b3 cf       	rjmp	.-154    	; 0x2dc2 <mca25_start_image_grab+0x6e>
    2e5c:	29 c0       	rjmp	.+82     	; 0x2eb0 <mca25_start_image_grab+0x15c>
    2e5e:	83 32       	cpi	r24, 0x23	; 35
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <mca25_start_image_grab+0x114>
    2e62:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <mca25_handle_channel_x23>
    2e66:	20 c0       	rjmp	.+64     	; 0x2ea8 <mca25_start_image_grab+0x154>
    2e68:	83 30       	cpi	r24, 0x03	; 3
    2e6a:	19 f4       	brne	.+6      	; 0x2e72 <mca25_start_image_grab+0x11e>
    2e6c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <mca25_handle_channel_x03>
    2e70:	1b c0       	rjmp	.+54     	; 0x2ea8 <mca25_start_image_grab+0x154>
    2e72:	c0 e0       	ldi	r28, 0x00	; 0
    2e74:	d0 e0       	ldi	r29, 0x00	; 0
    2e76:	3c e9       	ldi	r19, 0x9C	; 156
    2e78:	e3 2e       	mov	r14, r19
    2e7a:	34 e0       	ldi	r19, 0x04	; 4
    2e7c:	f3 2e       	mov	r15, r19
    2e7e:	8c 2f       	mov	r24, r28
    2e80:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    2e84:	8d e3       	ldi	r24, 0x3D	; 61
    2e86:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    2e8a:	f7 01       	movw	r30, r14
    2e8c:	81 91       	ld	r24, Z+
    2e8e:	7f 01       	movw	r14, r30
    2e90:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    2e94:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
    2e98:	21 96       	adiw	r28, 0x01	; 1
    2e9a:	c8 32       	cpi	r28, 0x28	; 40
    2e9c:	d1 05       	cpc	r29, r1
    2e9e:	79 f7       	brne	.-34     	; 0x2e7e <mca25_start_image_grab+0x12a>
    2ea0:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
    2ea4:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
    2ea8:	f4 e6       	ldi	r31, 0x64	; 100
    2eaa:	df 16       	cp	r13, r31
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <mca25_start_image_grab+0x15c>
    2eae:	8a cf       	rjmp	.-236    	; 0x2dc4 <mca25_start_image_grab+0x70>
    2eb0:	08 94       	sec
    2eb2:	a1 1c       	adc	r10, r1
    2eb4:	b1 1c       	adc	r11, r1
    2eb6:	85 e0       	ldi	r24, 0x05	; 5
    2eb8:	a8 16       	cp	r10, r24
    2eba:	b1 04       	cpc	r11, r1
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <mca25_start_image_grab+0x16c>
    2ebe:	6f cf       	rjmp	.-290    	; 0x2d9e <mca25_start_image_grab+0x4a>
    2ec0:	60 ea       	ldi	r22, 0xA0	; 160
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	82 ec       	ldi	r24, 0xC2	; 194
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    2ecc:	94 98       	cbi	0x12, 4	; 18
    2ece:	10 92 cd 04 	sts	0x04CD, r1
    2ed2:	10 92 ce 04 	sts	0x04CE, r1
    2ed6:	10 92 cf 04 	sts	0x04CF, r1
    2eda:	10 92 d0 04 	sts	0x04D0, r1
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	80 93 d2 04 	sts	0x04D2, r24
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	bf 90       	pop	r11
    2ef8:	af 90       	pop	r10
    2efa:	08 95       	ret

00002efc <mca25_grab_data>:
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	5c 01       	movw	r10, r24
    2f16:	4b 01       	movw	r8, r22
    2f18:	69 01       	movw	r12, r18
    2f1a:	7a 01       	movw	r14, r20
    2f1c:	85 e0       	ldi	r24, 0x05	; 5
    2f1e:	80 93 c4 04 	sts	0x04C4, r24
    2f22:	90 91 d2 04 	lds	r25, 0x04D2
    2f26:	99 23       	and	r25, r25
    2f28:	39 f0       	breq	.+14     	; 0x2f38 <mca25_grab_data+0x3c>
    2f2a:	80 91 cc 04 	lds	r24, 0x04CC
    2f2e:	80 17       	cp	r24, r16
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <mca25_grab_data+0x38>
    2f32:	1c c1       	rjmp	.+568    	; 0x316c <mca25_grab_data+0x270>
    2f34:	90 38       	cpi	r25, 0x80	; 128
    2f36:	21 f0       	breq	.+8      	; 0x2f40 <mca25_grab_data+0x44>
    2f38:	80 91 9b 04 	lds	r24, 0x049B
    2f3c:	88 23       	and	r24, r24
    2f3e:	21 f4       	brne	.+8      	; 0x2f48 <mca25_grab_data+0x4c>
    2f40:	0e 94 42 14 	call	0x2884	; 0x2884 <mca25_init_cam>
    2f44:	0e 94 39 16 	call	0x2c72	; 0x2c72 <mca25_configure>
    2f48:	80 91 d2 04 	lds	r24, 0x04D2
    2f4c:	88 23       	and	r24, r24
    2f4e:	19 f4       	brne	.+6      	; 0x2f56 <mca25_grab_data+0x5a>
    2f50:	80 2f       	mov	r24, r16
    2f52:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <mca25_start_image_grab>
    2f56:	8b e6       	ldi	r24, 0x6B	; 107
    2f58:	95 e0       	ldi	r25, 0x05	; 5
    2f5a:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <softuart_puts_progmem2>
    2f5e:	c6 01       	movw	r24, r12
    2f60:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <softuart_put_uint16>
    2f64:	8d e5       	ldi	r24, 0x5D	; 93
    2f66:	95 e0       	ldi	r25, 0x05	; 5
    2f68:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <softuart_puts_progmem2>
    2f6c:	80 91 cd 04 	lds	r24, 0x04CD
    2f70:	90 91 ce 04 	lds	r25, 0x04CE
    2f74:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <softuart_put_uint16>
    2f78:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
    2f7c:	80 91 cd 04 	lds	r24, 0x04CD
    2f80:	90 91 ce 04 	lds	r25, 0x04CE
    2f84:	a0 91 cf 04 	lds	r26, 0x04CF
    2f88:	b0 91 d0 04 	lds	r27, 0x04D0
    2f8c:	c8 16       	cp	r12, r24
    2f8e:	d9 06       	cpc	r13, r25
    2f90:	ea 06       	cpc	r14, r26
    2f92:	fb 06       	cpc	r15, r27
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <mca25_grab_data+0x9c>
    2f96:	54 c0       	rjmp	.+168    	; 0x3040 <mca25_grab_data+0x144>
    2f98:	ac 01       	movw	r20, r24
    2f9a:	4c 19       	sub	r20, r12
    2f9c:	5d 09       	sbc	r21, r13
    2f9e:	9a 01       	movw	r18, r20
    2fa0:	20 50       	subi	r18, 0x00	; 0
    2fa2:	32 40       	sbci	r19, 0x02	; 2
    2fa4:	19 f4       	brne	.+6      	; 0x2fac <mca25_grab_data+0xb0>
    2fa6:	c0 e0       	ldi	r28, 0x00	; 0
    2fa8:	d2 e0       	ldi	r29, 0x02	; 2
    2faa:	e2 c0       	rjmp	.+452    	; 0x3170 <mca25_grab_data+0x274>
    2fac:	12 16       	cp	r1, r18
    2fae:	13 06       	cpc	r1, r19
    2fb0:	ac f4       	brge	.+42     	; 0x2fdc <mca25_grab_data+0xe0>
    2fb2:	f5 01       	movw	r30, r10
    2fb4:	e4 0f       	add	r30, r20
    2fb6:	f5 1f       	adc	r31, r21
    2fb8:	e0 50       	subi	r30, 0x00	; 0
    2fba:	f2 40       	sbci	r31, 0x02	; 2
    2fbc:	d5 01       	movw	r26, r10
    2fbe:	e9 01       	movw	r28, r18
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	21 30       	cpi	r18, 0x01	; 1
    2fc4:	38 07       	cpc	r19, r24
    2fc6:	10 f4       	brcc	.+4      	; 0x2fcc <mca25_grab_data+0xd0>
    2fc8:	80 81       	ld	r24, Z
    2fca:	8c 93       	st	X, r24
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	31 96       	adiw	r30, 0x01	; 1
    2fd2:	11 96       	adiw	r26, 0x01	; 1
    2fd4:	24 17       	cp	r18, r20
    2fd6:	35 07       	cpc	r19, r21
    2fd8:	99 f7       	brne	.-26     	; 0x2fc0 <mca25_grab_data+0xc4>
    2fda:	ca c0       	rjmp	.+404    	; 0x3170 <mca25_grab_data+0x274>
    2fdc:	c9 01       	movw	r24, r18
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	72 e0       	ldi	r23, 0x02	; 2
    2fe2:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__divmodhi4>
    2fe6:	ec 01       	movw	r28, r24
    2fe8:	c3 c0       	rjmp	.+390    	; 0x3170 <mca25_grab_data+0x274>
    2fea:	10 92 9b 04 	sts	0x049B, r1
    2fee:	cf ef       	ldi	r28, 0xFF	; 255
    2ff0:	df ef       	ldi	r29, 0xFF	; 255
    2ff2:	be c0       	rjmp	.+380    	; 0x3170 <mca25_grab_data+0x274>
    2ff4:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    2ff8:	6b e0       	ldi	r22, 0x0B	; 11
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	81 e5       	ldi	r24, 0x51	; 81
    2ffe:	95 e0       	ldi	r25, 0x05	; 5
    3000:	06 c0       	rjmp	.+12     	; 0x300e <mca25_grab_data+0x112>
    3002:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    3006:	6b e0       	ldi	r22, 0x0B	; 11
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	85 e4       	ldi	r24, 0x45	; 69
    300c:	95 e0       	ldi	r25, 0x05	; 5
    300e:	0e 94 56 13 	call	0x26ac	; 0x26ac <mca25_puts_progmem2>
    3012:	10 92 d2 04 	sts	0x04D2, r1
    3016:	80 91 cd 04 	lds	r24, 0x04CD
    301a:	90 91 ce 04 	lds	r25, 0x04CE
    301e:	a0 91 cf 04 	lds	r26, 0x04CF
    3022:	b0 91 d0 04 	lds	r27, 0x04D0
    3026:	8e 0d       	add	r24, r14
    3028:	9f 1d       	adc	r25, r15
    302a:	a0 1f       	adc	r26, r16
    302c:	b1 1f       	adc	r27, r17
    302e:	80 93 cd 04 	sts	0x04CD, r24
    3032:	90 93 ce 04 	sts	0x04CE, r25
    3036:	a0 93 cf 04 	sts	0x04CF, r26
    303a:	b0 93 d0 04 	sts	0x04D0, r27
    303e:	98 c0       	rjmp	.+304    	; 0x3170 <mca25_grab_data+0x274>
    3040:	80 91 d2 04 	lds	r24, 0x04D2
    3044:	82 50       	subi	r24, 0x02	; 2
    3046:	82 30       	cpi	r24, 0x02	; 2
    3048:	10 f4       	brcc	.+4      	; 0x304e <mca25_grab_data+0x152>
    304a:	0e 94 77 13 	call	0x26ee	; 0x26ee <mca25_send_data_ack>
    304e:	00 e0       	ldi	r16, 0x00	; 0
    3050:	10 e0       	ldi	r17, 0x00	; 0
    3052:	ff 24       	eor	r15, r15
    3054:	c0 e0       	ldi	r28, 0x00	; 0
    3056:	d0 e0       	ldi	r29, 0x00	; 0
    3058:	85 c0       	rjmp	.+266    	; 0x3164 <mca25_grab_data+0x268>
    305a:	66 e0       	ldi	r22, 0x06	; 6
    305c:	01 c0       	rjmp	.+2      	; 0x3060 <mca25_grab_data+0x164>
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	c5 01       	movw	r24, r10
    3062:	8c 0f       	add	r24, r28
    3064:	9d 1f       	adc	r25, r29
    3066:	0e 94 93 13 	call	0x2726	; 0x2726 <mca25_read_mux_packet>
    306a:	99 27       	eor	r25, r25
    306c:	89 2b       	or	r24, r25
    306e:	09 f4       	brne	.+2      	; 0x3072 <mca25_grab_data+0x176>
    3070:	bc cf       	rjmp	.-136    	; 0x2fea <mca25_grab_data+0xee>
    3072:	8c 16       	cp	r8, r28
    3074:	9d 06       	cpc	r9, r29
    3076:	08 f4       	brcc	.+2      	; 0x307a <mca25_grab_data+0x17e>
    3078:	ba cf       	rjmp	.-140    	; 0x2fee <mca25_grab_data+0xf2>
    307a:	80 91 c5 04 	lds	r24, 0x04C5
    307e:	83 38       	cpi	r24, 0x83	; 131
    3080:	09 f0       	breq	.+2      	; 0x3084 <mca25_grab_data+0x188>
    3082:	67 c0       	rjmp	.+206    	; 0x3152 <mca25_grab_data+0x256>
    3084:	80 91 c6 04 	lds	r24, 0x04C6
    3088:	8f 3e       	cpi	r24, 0xEF	; 239
    308a:	09 f0       	breq	.+2      	; 0x308e <mca25_grab_data+0x192>
    308c:	6b c0       	rjmp	.+214    	; 0x3164 <mca25_grab_data+0x268>
    308e:	ff 20       	and	r15, r15
    3090:	29 f0       	breq	.+10     	; 0x309c <mca25_grab_data+0x1a0>
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	8f 15       	cp	r24, r15
    3096:	08 f4       	brcc	.+2      	; 0x309a <mca25_grab_data+0x19e>
    3098:	65 c0       	rjmp	.+202    	; 0x3164 <mca25_grab_data+0x268>
    309a:	31 c0       	rjmp	.+98     	; 0x30fe <mca25_grab_data+0x202>
    309c:	80 91 c9 04 	lds	r24, 0x04C9
    30a0:	99 27       	eor	r25, r25
    30a2:	18 2f       	mov	r17, r24
    30a4:	00 27       	eor	r16, r16
    30a6:	80 91 ca 04 	lds	r24, 0x04CA
    30aa:	08 0f       	add	r16, r24
    30ac:	11 1d       	adc	r17, r1
    30ae:	80 16       	cp	r8, r16
    30b0:	91 06       	cpc	r9, r17
    30b2:	08 f4       	brcc	.+2      	; 0x30b6 <mca25_grab_data+0x1ba>
    30b4:	84 01       	movw	r16, r8
    30b6:	04 30       	cpi	r16, 0x04	; 4
    30b8:	11 05       	cpc	r17, r1
    30ba:	7c f2       	brlt	.-98     	; 0x305a <mca25_grab_data+0x15e>
    30bc:	80 91 c7 04 	lds	r24, 0x04C7
    30c0:	86 95       	lsr	r24
    30c2:	99 27       	eor	r25, r25
    30c4:	08 1b       	sub	r16, r24
    30c6:	19 0b       	sbc	r17, r25
    30c8:	c8 0f       	add	r28, r24
    30ca:	d9 1f       	adc	r29, r25
    30cc:	26 97       	sbiw	r28, 0x06	; 6
    30ce:	80 91 c8 04 	lds	r24, 0x04C8
    30d2:	80 3a       	cpi	r24, 0xA0	; 160
    30d4:	11 f4       	brne	.+4      	; 0x30da <mca25_grab_data+0x1de>
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <mca25_grab_data+0x1e0>
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	80 93 d2 04 	sts	0x04D2, r24
    30e0:	10 16       	cp	r1, r16
    30e2:	11 06       	cpc	r1, r17
    30e4:	1c f4       	brge	.+6      	; 0x30ec <mca25_grab_data+0x1f0>
    30e6:	71 e0       	ldi	r23, 0x01	; 1
    30e8:	f7 2e       	mov	r15, r23
    30ea:	b9 cf       	rjmp	.-142    	; 0x305e <mca25_grab_data+0x162>
    30ec:	80 91 d2 04 	lds	r24, 0x04D2
    30f0:	7e 01       	movw	r14, r28
    30f2:	00 27       	eor	r16, r16
    30f4:	11 27       	eor	r17, r17
    30f6:	83 30       	cpi	r24, 0x03	; 3
    30f8:	09 f4       	brne	.+2      	; 0x30fc <mca25_grab_data+0x200>
    30fa:	7c cf       	rjmp	.-264    	; 0x2ff4 <mca25_grab_data+0xf8>
    30fc:	13 c0       	rjmp	.+38     	; 0x3124 <mca25_grab_data+0x228>
    30fe:	80 91 c7 04 	lds	r24, 0x04C7
    3102:	86 95       	lsr	r24
    3104:	99 27       	eor	r25, r25
    3106:	08 1b       	sub	r16, r24
    3108:	19 0b       	sbc	r17, r25
    310a:	c8 0f       	add	r28, r24
    310c:	d9 1f       	adc	r29, r25
    310e:	10 16       	cp	r1, r16
    3110:	11 06       	cpc	r1, r17
    3112:	44 f1       	brlt	.+80     	; 0x3164 <mca25_grab_data+0x268>
    3114:	80 91 d2 04 	lds	r24, 0x04D2
    3118:	7e 01       	movw	r14, r28
    311a:	00 27       	eor	r16, r16
    311c:	11 27       	eor	r17, r17
    311e:	83 30       	cpi	r24, 0x03	; 3
    3120:	09 f4       	brne	.+2      	; 0x3124 <mca25_grab_data+0x228>
    3122:	6f cf       	rjmp	.-290    	; 0x3002 <mca25_grab_data+0x106>
    3124:	80 91 cd 04 	lds	r24, 0x04CD
    3128:	90 91 ce 04 	lds	r25, 0x04CE
    312c:	a0 91 cf 04 	lds	r26, 0x04CF
    3130:	b0 91 d0 04 	lds	r27, 0x04D0
    3134:	8e 0d       	add	r24, r14
    3136:	9f 1d       	adc	r25, r15
    3138:	a0 1f       	adc	r26, r16
    313a:	b1 1f       	adc	r27, r17
    313c:	80 93 cd 04 	sts	0x04CD, r24
    3140:	90 93 ce 04 	sts	0x04CE, r25
    3144:	a0 93 cf 04 	sts	0x04CF, r26
    3148:	b0 93 d0 04 	sts	0x04D0, r27
    314c:	c0 e0       	ldi	r28, 0x00	; 0
    314e:	d0 e0       	ldi	r29, 0x00	; 0
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <mca25_grab_data+0x274>
    3152:	83 32       	cpi	r24, 0x23	; 35
    3154:	19 f4       	brne	.+6      	; 0x315c <mca25_grab_data+0x260>
    3156:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <mca25_handle_channel_x23>
    315a:	04 c0       	rjmp	.+8      	; 0x3164 <mca25_grab_data+0x268>
    315c:	83 30       	cpi	r24, 0x03	; 3
    315e:	11 f4       	brne	.+4      	; 0x3164 <mca25_grab_data+0x268>
    3160:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <mca25_handle_channel_x03>
    3164:	ff 20       	and	r15, r15
    3166:	09 f4       	brne	.+2      	; 0x316a <mca25_grab_data+0x26e>
    3168:	78 cf       	rjmp	.-272    	; 0x305a <mca25_grab_data+0x15e>
    316a:	79 cf       	rjmp	.-270    	; 0x305e <mca25_grab_data+0x162>
    316c:	ce ef       	ldi	r28, 0xFE	; 254
    316e:	df ef       	ldi	r29, 0xFF	; 255
    3170:	ce 01       	movw	r24, r28
    3172:	df 91       	pop	r29
    3174:	cf 91       	pop	r28
    3176:	1f 91       	pop	r17
    3178:	0f 91       	pop	r16
    317a:	ff 90       	pop	r15
    317c:	ef 90       	pop	r14
    317e:	df 90       	pop	r13
    3180:	cf 90       	pop	r12
    3182:	bf 90       	pop	r11
    3184:	af 90       	pop	r10
    3186:	9f 90       	pop	r9
    3188:	8f 90       	pop	r8
    318a:	08 95       	ret

0000318c <logger_output_temp>:
	}
}

//return LOGGER_NOW, LOGGER_MIN or LOGGER_MAX (temperature now, today min, today max)
void logger_output_temp(unsigned char *buffer, unsigned char type){
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	ec 01       	movw	r28, r24
    3194:	e6 2f       	mov	r30, r22
	unsigned char min=0xFF;
	unsigned char max=0x00;
	unsigned char val;
	unsigned char bufpos=0;

	unsigned char tnow = ((clock[CLOCK_HOUR]*60+clock[CLOCK_MIN])/6);
    3196:	80 91 40 07 	lds	r24, 0x0740
    319a:	2c e3       	ldi	r18, 0x3C	; 60
    319c:	82 9f       	mul	r24, r18
    319e:	c0 01       	movw	r24, r0
    31a0:	11 24       	eor	r1, r1
    31a2:	20 91 41 07 	lds	r18, 0x0741
    31a6:	82 0f       	add	r24, r18
    31a8:	91 1d       	adc	r25, r1
    31aa:	66 e0       	ldi	r22, 0x06	; 6
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__divmodhi4>
    31b2:	60 3f       	cpi	r22, 0xF0	; 240
    31b4:	08 f0       	brcs	.+2      	; 0x31b8 <logger_output_temp+0x2c>
    31b6:	6f ee       	ldi	r22, 0xEF	; 239
    31b8:	5f ef       	ldi	r21, 0xFF	; 255
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	a2 2f       	mov	r26, r18
    31c2:	bb 27       	eor	r27, r27
    31c4:	a0 50       	subi	r26, 0x00	; 0
    31c6:	b0 40       	sbci	r27, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    31c8:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__eeprom_read_byte_1C1D1E>
    31cc:	80 2d       	mov	r24, r0
	if (tnow > (23*60+59)/6)
		tnow = (23*60+59)/6;

	//only search from 0 o'clock to now !
	for(unsigned char i=0; i<=tnow; i++){
		val = eeprom_read_byte(&logger_temp_today[i]);
    31ce:	99 27       	eor	r25, r25
    31d0:	48 2f       	mov	r20, r24
    31d2:	85 17       	cp	r24, r21
    31d4:	08 f4       	brcc	.+2      	; 0x31d8 <logger_output_temp+0x4c>
    31d6:	58 2f       	mov	r21, r24
    31d8:	74 17       	cp	r23, r20
    31da:	08 f4       	brcc	.+2      	; 0x31de <logger_output_temp+0x52>
    31dc:	78 2f       	mov	r23, r24
    31de:	2f 5f       	subi	r18, 0xFF	; 255
    31e0:	3f 4f       	sbci	r19, 0xFF	; 255
    31e2:	62 17       	cp	r22, r18
    31e4:	68 f7       	brcc	.-38     	; 0x31c0 <logger_output_temp+0x34>
		if (val < min)
			min = val;
		if (val > max)
			max = val;
	}

	//now output data:
	if (type == LOGGER_MIN)
    31e6:	e1 30       	cpi	r30, 0x01	; 1
    31e8:	11 f4       	brne	.+4      	; 0x31ee <logger_output_temp+0x62>
    31ea:	65 2f       	mov	r22, r21
    31ec:	06 c0       	rjmp	.+12     	; 0x31fa <logger_output_temp+0x6e>
		val = min;
	else if (type == LOGGER_MAX)
    31ee:	e2 30       	cpi	r30, 0x02	; 2
    31f0:	11 f4       	brne	.+4      	; 0x31f6 <logger_output_temp+0x6a>
    31f2:	67 2f       	mov	r22, r23
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <logger_output_temp+0x6e>
		val = max;
	else
		val = logger_data; //eeprom_read_byte(&logger_temp_today[(clock[CLOCK_HOUR]*60+clock[CLOCK_MIN])/6]);
    31f6:	60 91 d6 04 	lds	r22, 0x04D6

	signed char t = val-(32<<1);
    31fa:	16 2f       	mov	r17, r22
    31fc:	10 54       	subi	r17, 0x40	; 64
	if (t>=0){
    31fe:	17 fd       	sbrc	r17, 7
    3200:	07 c0       	rjmp	.+14     	; 0x3210 <logger_output_temp+0x84>
		//copy string to buf:
		string_uint8_to_buffer(&buffer[bufpos], t>>1);
    3202:	61 2f       	mov	r22, r17
    3204:	65 95       	asr	r22
    3206:	ce 01       	movw	r24, r28
    3208:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <string_uint8_to_buffer>

		//overwrite left '0' with sign:
		buffer[bufpos] = ' ';
    320c:	80 e2       	ldi	r24, 0x20	; 32
    320e:	0d c0       	rjmp	.+26     	; 0x322a <logger_output_temp+0x9e>

		bufpos+=3;
	}else{
		string_uint8_to_buffer(&buffer[bufpos], (-t)>>1);
    3210:	61 2f       	mov	r22, r17
    3212:	77 27       	eor	r23, r23
    3214:	67 fd       	sbrc	r22, 7
    3216:	70 95       	com	r23
    3218:	70 95       	com	r23
    321a:	61 95       	neg	r22
    321c:	7f 4f       	sbci	r23, 0xFF	; 255
    321e:	75 95       	asr	r23
    3220:	67 95       	ror	r22
    3222:	ce 01       	movw	r24, r28
    3224:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <string_uint8_to_buffer>

		//overwrite left '0' with sign:
		buffer[bufpos] = '-';
    3228:	8d e2       	ldi	r24, 0x2D	; 45
    322a:	88 83       	st	Y, r24

		bufpos+=3;
	}
	buffer[bufpos++] = '.';
    322c:	8e e2       	ldi	r24, 0x2E	; 46
    322e:	8b 83       	std	Y+3, r24	; 0x03
	if ((t&1) == 0)
    3230:	10 fd       	sbrc	r17, 0
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <logger_output_temp+0xac>
		buffer[bufpos++] = '0';
    3234:	80 e3       	ldi	r24, 0x30	; 48
    3236:	01 c0       	rjmp	.+2      	; 0x323a <logger_output_temp+0xae>
	else
		buffer[bufpos++] = '5';
    3238:	85 e3       	ldi	r24, 0x35	; 53
    323a:	8c 83       	std	Y+4, r24	; 0x04
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	08 95       	ret

00003244 <logger_do>:
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	21 97       	sbiw	r28, 0x01	; 1
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	cd bf       	out	0x3d, r28	; 61
    3258:	80 91 d5 04 	lds	r24, 0x04D5
    325c:	81 50       	subi	r24, 0x01	; 1
    325e:	80 93 d5 04 	sts	0x04D5, r24
    3262:	88 23       	and	r24, r24
    3264:	a9 f5       	brne	.+106    	; 0x32d0 <logger_do+0x8c>
    3266:	19 82       	std	Y+1, r1	; 0x01
    3268:	87 e0       	ldi	r24, 0x07	; 7
    326a:	80 93 d5 04 	sts	0x04D5, r24
    326e:	ce 01       	movw	r24, r28
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	0e 94 ca 21 	call	0x4394	; 0x4394 <lm75_nonblocking_temp_read>
    3276:	38 2f       	mov	r19, r24
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	51 f5       	brne	.+84     	; 0x32d0 <logger_do+0x8c>
    327c:	80 91 40 07 	lds	r24, 0x0740
    3280:	2c e3       	ldi	r18, 0x3C	; 60
    3282:	82 9f       	mul	r24, r18
    3284:	c0 01       	movw	r24, r0
    3286:	11 24       	eor	r1, r1
    3288:	20 91 41 07 	lds	r18, 0x0741
    328c:	82 0f       	add	r24, r18
    328e:	91 1d       	adc	r25, r1
    3290:	66 e0       	ldi	r22, 0x06	; 6
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__divmodhi4>
    3298:	85 e0       	ldi	r24, 0x05	; 5
    329a:	6d 36       	cpi	r22, 0x6D	; 109
    329c:	78 07       	cpc	r23, r24
    329e:	a8 f4       	brcc	.+42     	; 0x32ca <logger_do+0x86>
    32a0:	80 91 d3 04 	lds	r24, 0x04D3
    32a4:	90 91 d4 04 	lds	r25, 0x04D4
    32a8:	68 17       	cp	r22, r24
    32aa:	79 07       	cpc	r23, r25
    32ac:	61 f0       	breq	.+24     	; 0x32c6 <logger_do+0x82>
    32ae:	70 93 d4 04 	sts	0x04D4, r23
    32b2:	60 93 d3 04 	sts	0x04D3, r22
    32b6:	db 01       	movw	r26, r22
    32b8:	b0 70       	andi	r27, 0x00	; 0
    32ba:	a0 50       	subi	r26, 0x00	; 0
    32bc:	b0 40       	sbci	r27, 0x00	; 0

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	08 2e       	mov	r0, r24
    32c2:	0e 94 a3 3d 	call	0x7b46	; 0x7b46 <__eeprom_write_byte_1C1D1E>
    32c6:	30 93 d5 04 	sts	0x04D5, r19
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	80 93 d6 04 	sts	0x04D6, r24
    32d0:	21 96       	adiw	r28, 0x01	; 1
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <logger_init>:
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	21 97       	sbiw	r28, 0x01	; 1
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	80 93 d5 04 	sts	0x04D5, r24
    32fe:	10 92 d4 04 	sts	0x04D4, r1
    3302:	10 92 d3 04 	sts	0x04D3, r1
    3306:	80 e4       	ldi	r24, 0x40	; 64
    3308:	80 93 d6 04 	sts	0x04D6, r24
    330c:	10 e0       	ldi	r17, 0x00	; 0
    330e:	ce 01       	movw	r24, r28
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	0e 94 ca 21 	call	0x4394	; 0x4394 <lm75_nonblocking_temp_read>
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	19 f0       	breq	.+6      	; 0x3320 <logger_init+0x3e>
    331a:	1f 5f       	subi	r17, 0xFF	; 255
    331c:	10 31       	cpi	r17, 0x10	; 16
    331e:	b9 f7       	brne	.-18     	; 0x330e <logger_init+0x2c>
    3320:	21 96       	adiw	r28, 0x01	; 1
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	08 95       	ret

00003334 <filesystem_format>:
}

//erase filesystem  !!! 
//FIXME: use dataflash erase instead !
void filesystem_format(){
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
	unsigned int i;

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS: formating... please wait (takes a long time) [");
	#endif
	//copy page 0 to dataflash buffer 0
	dataflash_copy_page_to_buffer(0, 0); //??? remove this, not neccessary!
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3342:	c0 e0       	ldi	r28, 0x00	; 0
    3344:	d0 e0       	ldi	r29, 0x00	; 0

	//clear buffer	
	for(i=0; i<256+8; i++)
			dataflash_write_to_page_buffer(i,0,0);
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	ce 01       	movw	r24, r28
    334c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3350:	21 96       	adiw	r28, 0x01	; 1
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	c8 30       	cpi	r28, 0x08	; 8
    3356:	d8 07       	cpc	r29, r24
    3358:	b1 f7       	brne	.-20     	; 0x3346 <filesystem_format+0x12>
    335a:	c0 e0       	ldi	r28, 0x00	; 0
    335c:	d0 e0       	ldi	r29, 0x00	; 0

	//copy buffer to all fs table sectors:
	for(i=0; i<FILESYSTEM_BLOCK_COUNT; i++){
		//store cleared buffer on flash:
		dataflash_copy_buffer_to_page(i,0);
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	ce 01       	movw	r24, r28
    3362:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>
    3366:	21 96       	adiw	r28, 0x01	; 1
    3368:	88 e0       	ldi	r24, 0x08	; 8
    336a:	c0 30       	cpi	r28, 0x00	; 0
    336c:	d8 07       	cpc	r29, r24
    336e:	b9 f7       	brne	.-18     	; 0x335e <filesystem_format+0x2a>
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	08 95       	ret

00003376 <filesystem_allocate_block>:
		#if FILESYSTEM_DEBUG
		softuart_putc('.');
		#endif
	}
	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("] done");
	softuart_putnewline();
	#endif
	
}

//list files in filesystem:
void filesystem_list_files(){
	unsigned int tmp,tmp2;
	unsigned char i,j,k;

	#if FILESYSTEM_DEBUG
	softuart_putnewline();
	softuart_puts_progmem(" <fid>  <start>  <size>    <filename>");
	softuart_putnewline();
  softuart_puts_progmem("---------------------------------------");
	softuart_putnewline();	
	#endif

	//search all filesystem table entries:
	for(i=0; i<FILESYSTEM_TABLE_SIZE; i++){
		//copy page i to dataflash buffer 0
		dataflash_copy_page_to_buffer(i, 0);

		//now read 11 filesystem entries:
		for(j=0; j<11; j++){
			//check if there is already a file with our id:
			tmp  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_HI, 0)<<8;
			tmp |= dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_LO, 0);

			if (tmp != 0){
				//print all:
				//for(tmp2=0; tmp2<24; tmp2++)
				//	rprintf("%x ",dataflash_read_buffer(j*24+tmp2,0));
				//rprintf("\r\n");

				//this is a active file -> print
				#if FILESYSTEM_DEBUG
				softuart_putc(' ');
				softuart_put_uint16(tmp);

				//print start/end sector:
				tmp  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_START_HI, 0);
				tmp  = tmp<<8;
				tmp += dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_START_LO, 0);
				tmp2  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_COUNT_HI, 0);
				tmp2  = tmp2<<8;
				tmp2 += dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_COUNT_LO, 0);

				softuart_putc(' ');
				softuart_putc(' ');
				softuart_put_uint16(tmp);
				softuart_puts_progmem("  / ");
				softuart_put_uint16(tmp2);
				
				softuart_puts_progmem("   ./");

				unsigned char c;
				for (k=0; k<8; k++){
					c = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_FILENAME_START + k, 0);
					if (c)
						softuart_putc(c);
					else
						break;
				}
				softuart_putc('.');
				for (k=0; k<3; k++){
					c = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_FILENAME_START + 8 +k, 0);
					if (c)
						softuart_putc(c);
					else
						break;
				}
				softuart_putnewline();
				#endif

			}
		}
	}
	#if FILESYSTEM_DEBUG
	softuart_putnewline();
	softuart_putnewline();
	#endif
}

unsigned char filesystem_filename_to_buffer(unsigned char *buffer, unsigned int fnpos){
	unsigned int pos = 0;
	unsigned char k;

	//add filename
	for (k=0; k<8; k++){
		buffer[pos] = dataflash_read_buffer(fnpos*24 + FILESYSTEM_FTABLE_FILENAME_START + k, 0);
		
		if (buffer[pos] == 0)
			break;
		
		pos++;
	}

	//add '.'
	buffer[pos++] = '.';

	for (k=0; k<3; k++){
		buffer[pos] = dataflash_read_buffer(fnpos*24 + FILESYSTEM_FTABLE_FILENAME_START + 8 + k, 0);
		
		if (buffer[pos] == 0)
			break;
		
		pos++;
	}
	return pos;
}


//generate filesystem index
unsigned int filesystem_generate_index(unsigned char *buffer, unsigned int datapos, unsigned int *len, unsigned int *offset){
	unsigned int i;
	unsigned char j,k;
	unsigned int tmp;
	unsigned int id;

	//every entry looks like:
	//IIIII_SSSSS_<a href="/fs/FFFFFFFF.EEE">FFFFFFFF.EEE</a><br>
	//-> 5+1+5+1+8+1+3+4 +25 +6= 28+25+6 bytes
	//unsigned int  skip_files = 0;
	//while((*offset) >= 59){
	//	(*offset) = (*offset) - 59;
	//	skip_files++;
	//}

	//file entry buffer:
	unsigned char list_entry[60];
	unsigned char list_pos = 0;

	//search all filesystem table entries:
	//-> slow !! we always walk through the whole list!! -> FIXME
	for(i=0; i<FILESYSTEM_TABLE_SIZE; i++){
		//copy page i to dataflash buffer 0
		dataflash_copy_page_to_buffer(i, 0);

		//now read 11 filesystem entries:
		for(j=0; j<11; j++){
			//check if there is already a file with our id:
			id  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_HI, 0)<<8;
			id |= dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_LO, 0);

			if (id != 0x0000){
				//if (skip_files == 0){
					#if FILESYSTEM_DEBUG
					softuart_puts_progmem("FS  : found id ");
					softuart_put_uint16(id);
					#endif
					//we expect this file -> print info!

					//intitialise entry buffer pos
					list_pos = 0;

					//add file id
					//string_uint16_to_buffer(&list_entry[list_pos], id);
					//list_pos += 5;
					string_progmem_to_buffer(PSTR("<img src=\"/site/ficon.gif\" align=middle> "), &list_entry[list_pos], 41);
					list_pos += 41;

					//add <a href="/fs/
					string_progmem_to_buffer(PSTR("<a href=\"/fs/"), &list_entry[list_pos], 13);
					list_pos += 13;

					//now copy requested data from list_entry buffer to 
					//tcp buffer:
					//if (list_pos>=60) softuart_puts_progmem("FS: OVERFLOW: ");softuart_put_uint8(list_pos);
					for(k=0; k<list_pos; k++){
						if ((*offset) > 0){
							(*offset)--;
						}else{
							buffer[datapos++] = list_entry[k];
							(*len)--;
							if ((*len) == 0)
								return 0;
						}
					}
					list_pos = 0;

					//add filename
					list_pos += filesystem_filename_to_buffer(&list_entry[list_pos], j);

					//add ">
					string_progmem_to_buffer(PSTR("\">"), &list_entry[list_pos], 2);
					list_pos += 2;

					//add filename again
					list_pos += filesystem_filename_to_buffer(&list_entry[list_pos], j);

					//add </a><br>
 					string_progmem_to_buffer(PSTR("</a>"), &list_entry[list_pos], 4);
					list_pos += 4;

					//add ' '
					list_entry[list_pos++] = ' ';
					
					tmp  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_COUNT_HI, 0)<<8;
					tmp += dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_BLOCK_COUNT_LO, 0);

					//convert to kbyte
					tmp  = tmp / 4; //*256/1024 = /4
					if (tmp == 0)
						tmp = 1;
					//add file size
					string_uint16_to_buffer(&list_entry[list_pos], tmp); 
					list_pos += 5;
				
					//add ' '
					string_progmem_to_buffer(PSTR("KB "), &list_entry[list_pos], 3);
					list_pos += 3;

					//now copy requested data from list_entry buffer to 
					//tcp buffer:
					//if (list_pos>=60) softuart_puts_progmem("FS: OVERFLOW: ");softuart_put_uint8(list_pos);
					for(k=0; k<list_pos; k++){
						if ((*offset) > 0){
							(*offset)--;
						}else{
							buffer[datapos++] = list_entry[k];
							(*len)--;
							if ((*len) == 0)
								return 0;
						}
					}

					//now add next data, reuse buffer, we do not want to use another 59byte buf !
 					list_pos = 0;

					//add a href part of remove file link:
					string_progmem_to_buffer(PSTR(" <a href=\"/adm/rm/"), &list_entry[list_pos], 18);
					list_pos += 18;

					//add filename
					//list_pos += filesystem_filename_to_buffer(&list_entry[list_pos], j);
					//add file id:
					string_uint16_to_buffer(&list_entry[list_pos], id);
					list_pos += 5;

					//add rest of href:
					string_progmem_to_buffer(PSTR("\">remove</a><br>"), &list_entry[list_pos], 16);
					list_pos += 16;

					//now copy requested data from list_entry buffer to 
					//tcp buffer:
					//if (list_pos>=60) softuart_puts_progmem("FS: OVERFLOW: ");softuart_put_uint8(list_pos);
					for(k=0; k<list_pos; k++){
						if ((*offset) > 0){
							(*offset)--;
						}else{
							buffer[datapos++] = list_entry[k];
							(*len)--;
							if ((*len) == 0)
								return 0;
						}
					}

					#if FILESYSTEM_DEBUG
					softuart_puts_progmem(" data created.\r\n");
					#endif
				//}else{
				//	skip_files--;
				//}
			}
		}
	}
	return datapos;
}

//read next byte to data ptr !
//return: 0 if eof file
//        1 otherwise
unsigned char filesystem_get_next_byte(unsigned char *data){
	//unsigned int tmp;

	//copy flash to buffer
	if (filesystem_file_pos == 0){
		dataflash_copy_page_to_buffer(filesystem_current_block, 0);
		for(unsigned char p=0; p<255; p++)
			filesystem_buffer[p] = dataflash_read_buffer(p,0);
	}

	*data = filesystem_buffer[filesystem_file_pos];
	filesystem_file_pos++;

	//block end or end of file ?!
	if ((filesystem_file_pos == 255)){
		filesystem_file_pos = 0;

		//load next block:		
		filesystem_current_block  = dataflash_read_buffer(FILESYSTEM_FILE_NEXT_HI, 0)<<8;
		filesystem_current_block |= dataflash_read_buffer(FILESYSTEM_FILE_NEXT_LO, 0);

		#if FILESYSTEM_DEBUG
		//softuart_puts_progmem("FS  : next block read: ");
		//softuart_put_uint16(filesystem_current_block);
		//softuart_putnewline();
		#endif
		if (filesystem_current_block == 0x0000)
			return 0; //eof file
	}
	return 1;
}


unsigned int filesystem_get_data_startat(unsigned char *buffer, unsigned int datapos, unsigned int len, unsigned int *data_ptr, unsigned int inside_block_pos){
// 	sunsigned int tmp;
	unsigned int count;
	//unsigned int pos;
	unsigned int i;
	while (*data_ptr != 0x0000){
		//copy block to buffer0:
		dataflash_copy_page_to_buffer(*data_ptr, 0);

		//get bytes used inside this block:
		count = dataflash_read_buffer(FILESYSTEM_FILE_BLOCK_USAGE,0)+1;

		//dump block:
		i=0;

		//calc first startbyte:
		if (inside_block_pos != 0){
			count = count - inside_block_pos;
			i = inside_block_pos;
			inside_block_pos = 0;
		}

		if ((count == 256) && (i == 0) && (len >=256)){
			dataflash_read_n_to_buffer(&buffer[datapos], 0);
			datapos += 256;
			len -= 256;
			//i+=...
			if (len == 0)
				return 0;
		}else{
			while (count > 0){
				buffer[datapos++] = dataflash_read_buffer(i,0);
				len--;
				//no more data allowed
				if (len == 0)
					return 0;
				count--;
				i++;
			}
		}
		//calc next block:
		*data_ptr  = dataflash_read_buffer(FILESYSTEM_FILE_NEXT_HI, 0)<<8;
		*data_ptr  = (*data_ptr) | dataflash_read_buffer(FILESYSTEM_FILE_NEXT_LO, 0);
		
		//tmp should be zero if this is the last block. but we have a flag for last block, too:
		if (dataflash_read_buffer(FILESYSTEM_FILE_BLOCKTAG,0) == 0xEE)
			*data_ptr = 0x0000; //last block!
	}
	return datapos;
}










unsigned int filesystem_get_data(unsigned char *buffer, unsigned int datapos, unsigned int len, unsigned long streampos, unsigned int fileid, unsigned int *data_ptr){
	//file was requested, search file:
	//unsigned int tmp;
	unsigned int count;
	unsigned int pos;


	//invalid fileid ?
	if (fileid == 0){
		#if FILESYSTEM_DEBUG
		softuart_puts_progmem("FS  : file not found.");
		softuart_putnewline();
		#endif
		return datapos;
	}

	//copy lookuptable page to dataflash buffer 0
	dataflash_copy_page_to_buffer(((fileid-1)/11), 0);
	
	//pos inside page is ?
	pos = 24*((fileid-1) % 11);

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : requested fid ");
	softuart_put_uint16(fileid);
	softuart_puts_progmem(", loc on block ");
	softuart_put_uint16((fileid-1)/11);
	softuart_puts_progmem(", pos ");
	softuart_put_uint8(pos);
	softuart_putnewline();
	#endif

	//get first block:
	*data_ptr  = dataflash_read_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_HI, 0)<<8;
	*data_ptr  = (*data_ptr) | dataflash_read_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_LO, 0);

	if (*data_ptr == 0x0000){
		buffer[datapos++] = '4';
		buffer[datapos++] = '0';
		buffer[datapos++] = '4';
		return datapos;
	}

	while (*data_ptr != 0x0000){
		//copy block to buffer0:
		dataflash_copy_page_to_buffer(*data_ptr, 0);

		//is this block requested ?
		if (streampos < 255){
			//get bytes used inside this block:
			count = dataflash_read_buffer(FILESYSTEM_FILE_BLOCK_USAGE,0)+1;
	
			//dump block:
			unsigned int i=0;

			//calc first startbyte:
			if (streampos != 0){
				count = count - streampos;
				i += streampos;
				streampos = 0;
			}
			
			while (count > 0){
				//if (streampos > 0){
				//	//FIXME: could be done muuuch faster (calculate skip count etc...) FIXME
				//	streampos--;
				//}else{
					buffer[datapos++] = dataflash_read_buffer(i,0);
					len--;
					//no more data allowed
					if (len == 0)
						return 0;
				//}
				count--;
				i++;
			}
		}else{
			//we skip this block -> decrease streampos:
			streampos -= 256;
		}

		//calc next block:
		*data_ptr  = dataflash_read_buffer(FILESYSTEM_FILE_NEXT_HI, 0)<<8;
		*data_ptr  = (*data_ptr) | dataflash_read_buffer(FILESYSTEM_FILE_NEXT_LO, 0);
		
		//tmp should be zero if this is the last block. but we have a flag for last block, too:
		if (dataflash_read_buffer(FILESYSTEM_FILE_BLOCKTAG,0) == 0xEE)
			*data_ptr = 0x0000; //last block!
	}
	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : file sent.");
	softuart_putnewline();
	#endif


	return datapos;
}

//search file table for the next free file id:
unsigned int filesystem_allocate_fileid(){
	unsigned int id;
	unsigned int tmp;
	unsigned char i,j;

	//start with invalid file id 
	id = 0;

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS: searching free id...");
	#endif

	//search all filesystem table entries:
	for(i=0; i<FILESYSTEM_TABLE_SIZE; i++){
		//copy page i to dataflash buffer 0
		dataflash_copy_page_to_buffer(i, 0);

		//now read 11 filesystem entries:
		for(j=0; j<11; j++){
			//check if there is already a file with our id:
			tmp  = dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_HI, 0)<<8;
			tmp |= dataflash_read_buffer(j*24 + FILESYSTEM_FTABLE_ID_LO, 0);
			
			//if current file has an id of 0 -> this slot is empty -> use this id !
			if (tmp == 0){
				id = 1 + i*11 + j; //fileid valid from 1...50*11-1 = 1...549
				#if FILESYSTEM_DEBUG
				softuart_puts_progmem(" found id ");
				softuart_put_uint16(id);
				softuart_putnewline();
				#endif
				return id;
			}
		}	
	}

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem(" failed. FS FULL!");
	softuart_putnewline();
	#endif
	return 0; //FAILED
}

//close file & story lookup info
void filesystem_close_file(){
	unsigned int pos;
	unsigned char i;

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : closing file ");
	softuart_put_uint16(filesystem_fileid);
	softuart_putnewline();
	#endif

	//check for invalid fileid:
	if (filesystem_fileid == 0)
		return;

	//store active buffer:
	dataflash_write_n_to_page_buffer(0,0,filesystem_buffer, filesystem_file_pos);
	filesystem_store_current_block(0);

	//store file info in lookup table!
	
	//copy lookuptable page to dataflash buffer 0
	dataflash_copy_page_to_buffer(((filesystem_fileid-1)/11), 0);
	
	//pos inside page is ?
	pos = 24*((filesystem_fileid-1) % 11);

	//step1: write file id:
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_ID_HI, 0, (filesystem_fileid>>8)&0xFF);
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_ID_LO, 0, (filesystem_fileid   )&0xFF);
	
	//step2: write timestamp
	///NOT SUPPORTED RIGHT NOW///
	
	//step3: write filename + ext:
	for(i=0; i<8; i++)
		dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_FILENAME_START + i, 0, filesystem_filename[i]);
	for(i=0; i<3; i++)
		dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_FILENAME_START + i + 8, 0, filesystem_filename_ext[i]);

	//step4: write start block address:
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_HI, 0, (filesystem_first_block>>8)&0xFF);
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_LO, 0, (filesystem_first_block   )&0xFF);

	//step5: write block count:
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_BLOCK_COUNT_HI, 0, (filesystem_block_count>>8)&0xFF);
	dataflash_write_to_page_buffer(pos + FILESYSTEM_FTABLE_BLOCK_COUNT_LO, 0, (filesystem_block_count   )&0xFF);

	//store data on flash:
	dataflash_copy_buffer_to_page((filesystem_fileid-1)/11,0);

	//reset vars:
	filesystem_status = FILESYSTEM_STATUS_IDLE;
	filesystem_fileid = 0;
	filesystem_first_block = 0;
	filesystem_current_block = 0;
	filesystem_file_pos = 0;
}


//alocate 264 byte block & store file info header inside:
unsigned int filesystem_allocate_block(){
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	c2 e3       	ldi	r28, 0x32	; 50
    337c:	d0 e0       	ldi	r29, 0x00	; 0
	//search block
	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : searching free block...");
	#endif
	for(unsigned int b=FILESYSTEM_TABLE_SIZE; b<FILESYSTEM_BLOCK_COUNT; b++){
		//copy selected page to buffer
		dataflash_copy_page_to_buffer(b, 1);
    337e:	61 e0       	ldi	r22, 0x01	; 1
    3380:	ce 01       	movw	r24, r28
    3382:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
	
		//rprintf("FS: checking block: [%d].\r\n",b);
		//is it free ? 
		//-> ignore b = current block !
		if ((dataflash_read_buffer(FILESYSTEM_FILE_FREETAG,1) != 0xE0) && (b != filesystem_current_block)){
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	91 e0       	ldi	r25, 0x01	; 1
    338c:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3390:	80 3e       	cpi	r24, 0xE0	; 224
    3392:	39 f0       	breq	.+14     	; 0x33a2 <filesystem_allocate_block+0x2c>
    3394:	80 91 e1 05 	lds	r24, 0x05E1
    3398:	90 91 e2 05 	lds	r25, 0x05E2
    339c:	c8 17       	cp	r28, r24
    339e:	d9 07       	cpc	r29, r25
    33a0:	39 f4       	brne	.+14     	; 0x33b0 <filesystem_allocate_block+0x3a>
    33a2:	21 96       	adiw	r28, 0x01	; 1
    33a4:	88 e0       	ldi	r24, 0x08	; 8
    33a6:	c0 30       	cpi	r28, 0x00	; 0
    33a8:	d8 07       	cpc	r29, r24
    33aa:	49 f7       	brne	.-46     	; 0x337e <filesystem_allocate_block+0x8>
    33ac:	c0 e0       	ldi	r28, 0x00	; 0
    33ae:	d0 e0       	ldi	r29, 0x00	; 0
			//-> free !
			#if FILESYSTEM_DEBUG
			softuart_puts_progmem(" found block ");
			softuart_put_uint16(b);
			softuart_putnewline();
			#endif
			return b;
		}
	}
	//no free block found :(
	#if FILESYSTEM_DEBUG
	softuart_puts_progmem(" FAILED -> FS FULL ?!");
	softuart_putnewline();
	#endif
	return 0;
}
    33b0:	ce 01       	movw	r24, r28
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	08 95       	ret

000033b8 <filesystem_store_current_block>:

//open a new file:
unsigned int filesystem_open_file_wr(unsigned char *filename, unsigned char *filename_ext){
	//make sure there is no open file !
	if (filesystem_status != FILESYSTEM_STATUS_IDLE)
		filesystem_close_file();
	
	//make file extension lowercase !!
	for(unsigned char i=0; i<3 && filename_ext[i] != 0; i++){
		if ((filename_ext[i] >= 'A') && (filename_ext[i] <= 'Z'))
			filename_ext[i] = filename_ext[i] - 'A' + 'a';
	}

	//protect filename, only allow a-zA-Z0-9_-
	for(unsigned char i=0; i<8; i++){
		if (filename[i] == 0)
			break;
		if (
					!((filename[i] >= 'a') && (filename[i] <= 'z')) &&
					!((filename[i] >= 'A') && (filename[i] <= 'Z')) &&
					!((filename[i] >= '0') && (filename[i] <= '9')) 
				){
			filename[i] = '_';
		}
	}

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : new file [");
	for(unsigned char i=0; i<8 && filename[i] != 0; i++)
		softuart_putc(filename[i]);
	softuart_putc('.');
	for(unsigned char i=0; i<3 && filename_ext[i] != 0; i++)
		softuart_putc(filename_ext[i]);
	softuart_putc(']');
	softuart_putnewline();
	#endif

	//check if file exists, returns 0 if file is unknown!
	filesystem_fileid = filesystem_search_file(filename, filename_ext);

	if (filesystem_fileid != 0){
		//file exists !!!
		//->delete file & replace it with the new data:
		#if FILESYSTEM_DEBUG
		softuart_puts_progmem("FS  : WARNING: overwriting existing file !");
		softuart_putnewline();
		#endif
		filesystem_delete_file(filesystem_fileid);
	}else{
		//new file -> get id:
		filesystem_fileid = filesystem_allocate_fileid();
	}

	filesystem_block_count = 1;

	//check for error:
	if (filesystem_fileid  == 0)
		return 0;

	//now search a free block adddress for the first block:
	unsigned int block = filesystem_allocate_block();

	//check for error:
	if (block == 0)
		return 0;

	//store info:
	filesystem_first_block = block;
	filesystem_current_block = block;
	for (unsigned char i=0; i<8; i++)
		filesystem_filename[i] = filename[i];
	for (unsigned char i=0; i<3; i++)
		filesystem_filename_ext[i] = filename_ext[i];

	//return first block:
	return block;
}

/*unsigned int filesystem_open_file_rd(unsigned char *filename, unsigned char *filename_ext){
	unsigned int pos;

	//make sure there is no open file !
	if (filesystem_status != FILESYSTEM_STATUS_IDLE)
		filesystem_close_file();
	
	//check if file exists, returns 0 if file is unknown!
	filesystem_fileid = filesystem_search_file(filename, filename_ext);

	if (filesystem_fileid != 0){
		//file exists !!!
		//->delete file & replace it with the new data:
		#if FILESYSTEM_DEBUG
		softuart_puts_progmem("FS  : open file for reading!");
		softuart_putnewline();
		#endif
	}else{
		//new file -> get id:
		#if FILESYSTEM_DEBUG
		softuart_puts_progmem("FS  : file not found!");
		softuart_putnewline();
		#endif
		return 0;
	}

	//pos inside page is ?
	pos = 24*((filesystem_fileid-1) % 11);

	#if FILESYSTEM_DEBUG
	softuart_puts_progmem("FS  : requested fid ");
	softuart_put_uint16(filesystem_fileid);
	softuart_puts_progmem(", loc on block ");
	softuart_put_uint16((filesystem_fileid-1)/11);
	softuart_puts_progmem(", pos ");
	softuart_put_uint8(pos);
	softuart_putnewline();
	#endif

	//get first block:
	filesystem_current_block  = dataflash_read_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_HI, 0)<<8;
	filesystem_current_block |= dataflash_read_buffer(pos + FILESYSTEM_FTABLE_BLOCK_START_LO, 0);

	filesystem_first_block = filesystem_current_block;
	
	for (unsigned char i=0; i<8; i++)
		filesystem_filename[i] = filename[i];
	for (unsigned char i=0; i<3; i++)
		filesystem_filename_ext[i] = filename_ext[i];

	filesystem_file_pos = 0;

	//return OK
	return 1;
}*/


//store len bytes of data in current open file. if last==1 close file after write:
void filesystem_write_data(unsigned char* data, unsigned int len, unsigned char last){
	//unsigned int next_block;
	//rprintf("FS: writing %d chars.\r\n",len);

	//check for invalid fileid:
	if (filesystem_fileid == 0)
		return;

	for( ; len>0; len--){
		//save data:
		///dataflash_write_to_page_buffer((unsigned int)filesystem_file_pos, 0, (*data));
		filesystem_buffer[filesystem_file_pos] = (*data);
		//rprintf("FS: saving %c\r\n",(*data));

		//block full or end of file ?!
		if ((filesystem_file_pos == 255) || (len==1 && last==1)){
			//step0: copy buffer to flash:
			dataflash_write_n_to_page_buffer(0,0,filesystem_buffer, 256);

			//store buffer:
			filesystem_store_current_block((filesystem_file_pos == 255) && !(len==1 && last==1));

			#if FILESYSTEM_DEBUG
			softuart_puts_progmem("FS  : storing block ");
			softuart_put_uint16(filesystem_current_block);
			softuart_puts_progmem(" on flash");
			softuart_putnewline();
			#endif

			//filesystem_file_pos = 0xFF; //next is filepos 0
		}

		*data++;
		filesystem_file_pos++;
		
	}
}

void filesystem_store_current_block(unsigned char not_last){
    33b8:	1f 93       	push	r17
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	18 2f       	mov	r17, r24
	unsigned int next_block;

	//step1: mark current block as used:
	dataflash_write_to_page_buffer(FILESYSTEM_FILE_FREETAG, 0, 0xE0);
    33c0:	40 ee       	ldi	r20, 0xE0	; 224
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	91 e0       	ldi	r25, 0x01	; 1
    33c8:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
	
	//step2: set filsystem rev
	dataflash_write_to_page_buffer(FILESYSTEM_FILE_REV, 0, FILESYSTEM_REVISION);
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	60 e0       	ldi	r22, 0x00	; 0
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	91 e0       	ldi	r25, 0x01	; 1
    33d4:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>

	//step3: save file id
	dataflash_write_to_page_buffer(FILESYSTEM_FILE_ID_LO, 0, filesystem_fileid&0xFF);
    33d8:	40 91 df 05 	lds	r20, 0x05DF
    33dc:	50 91 e0 05 	lds	r21, 0x05E0
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	91 e0       	ldi	r25, 0x01	; 1
    33e6:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
	dataflash_write_to_page_buffer(FILESYSTEM_FILE_ID_HI, 0, (filesystem_fileid>>8)&0xFF);
    33ea:	40 91 df 05 	lds	r20, 0x05DF
    33ee:	50 91 e0 05 	lds	r21, 0x05E0
    33f2:	45 2f       	mov	r20, r21
    33f4:	55 27       	eor	r21, r21
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>

	//step4: save block info (first/last block)
	if (filesystem_first_block == filesystem_current_block)
    3400:	20 91 d7 04 	lds	r18, 0x04D7
    3404:	30 91 d8 04 	lds	r19, 0x04D8
    3408:	80 91 e1 05 	lds	r24, 0x05E1
    340c:	90 91 e2 05 	lds	r25, 0x05E2
    3410:	28 17       	cp	r18, r24
    3412:	39 07       	cpc	r19, r25
    3414:	81 f4       	brne	.+32     	; 0x3436 <filesystem_store_current_block+0x7e>
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_BLOCKTAG, 0, 0x00);
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	86 e0       	ldi	r24, 0x06	; 6
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
	else if (!not_last)
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_BLOCKTAG, 0, 0xEE);
	else
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_BLOCKTAG, 0, 0xFF);

	//step 5: save block usage
	dataflash_write_to_page_buffer(FILESYSTEM_FILE_BLOCK_USAGE, 0, filesystem_file_pos);
    3422:	40 91 d9 04 	lds	r20, 0x04D9
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	87 e0       	ldi	r24, 0x07	; 7
    342a:	91 e0       	ldi	r25, 0x01	; 1
    342c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>

	//check if it is the last block
	if (not_last){
    3430:	11 23       	and	r17, r17
    3432:	f1 f4       	brne	.+60     	; 0x3470 <filesystem_store_current_block+0xb8>
    3434:	44 c0       	rjmp	.+136    	; 0x34be <filesystem_store_current_block+0x106>
    3436:	11 23       	and	r17, r17
    3438:	71 f4       	brne	.+28     	; 0x3456 <filesystem_store_current_block+0x9e>
    343a:	4e ee       	ldi	r20, 0xEE	; 238
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	86 e0       	ldi	r24, 0x06	; 6
    3440:	91 e0       	ldi	r25, 0x01	; 1
    3442:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3446:	40 91 d9 04 	lds	r20, 0x04D9
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	87 e0       	ldi	r24, 0x07	; 7
    344e:	91 e0       	ldi	r25, 0x01	; 1
    3450:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3454:	34 c0       	rjmp	.+104    	; 0x34be <filesystem_store_current_block+0x106>
    3456:	4f ef       	ldi	r20, 0xFF	; 255
    3458:	60 e0       	ldi	r22, 0x00	; 0
    345a:	86 e0       	ldi	r24, 0x06	; 6
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3462:	40 91 d9 04 	lds	r20, 0x04D9
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	87 e0       	ldi	r24, 0x07	; 7
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
		//not the last -> get next free block 

		//need to allocate next block!
		next_block = filesystem_allocate_block();
    3470:	0e 94 bb 19 	call	0x3376	; 0x3376 <filesystem_allocate_block>
    3474:	ec 01       	movw	r28, r24
		filesystem_block_count++;
    3476:	80 91 da 05 	lds	r24, 0x05DA
    347a:	90 91 db 05 	lds	r25, 0x05DB
    347e:	01 96       	adiw	r24, 0x01	; 1
    3480:	90 93 db 05 	sts	0x05DB, r25
    3484:	80 93 da 05 	sts	0x05DA, r24

		//step6: save next block pointer:
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_NEXT_LO, 0, next_block&0xFF);
    3488:	4c 2f       	mov	r20, r28
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	85 e0       	ldi	r24, 0x05	; 5
    348e:	91 e0       	ldi	r25, 0x01	; 1
    3490:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_NEXT_HI, 0, (next_block>>8)&0xFF);
    3494:	4d 2f       	mov	r20, r29
    3496:	55 27       	eor	r21, r21
    3498:	60 e0       	ldi	r22, 0x00	; 0
    349a:	84 e0       	ldi	r24, 0x04	; 4
    349c:	91 e0       	ldi	r25, 0x01	; 1
    349e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>

		//store in flash:
		dataflash_copy_buffer_to_page(filesystem_current_block,0);
    34a2:	80 91 e1 05 	lds	r24, 0x05E1
    34a6:	90 91 e2 05 	lds	r25, 0x05E2
    34aa:	60 e0       	ldi	r22, 0x00	; 0
    34ac:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>

		//no more free blocks -> exit  ///FIXME///
		if (next_block == 0){
    34b0:	20 97       	sbiw	r28, 0x00	; 0
    34b2:	01 f1       	breq	.+64     	; 0x34f4 <filesystem_store_current_block+0x13c>
			#if FILESYSTEM_DEBUG
			softuart_puts_progmem("FS  : no more blocks ?!");
			softuart_putnewline();
			#endif
			return;
		}

		//update block info
		filesystem_current_block = next_block;
    34b4:	d0 93 e2 05 	sts	0x05E2, r29
    34b8:	c0 93 e1 05 	sts	0x05E1, r28
    34bc:	1b c0       	rjmp	.+54     	; 0x34f4 <filesystem_store_current_block+0x13c>
	}else{
		//last block -> we do not need a next pointer
		//step6: save next block pointer:
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_NEXT_LO, 0, 0x00);
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	85 e0       	ldi	r24, 0x05	; 5
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_NEXT_HI, 0, 0x00);
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	84 e0       	ldi	r24, 0x04	; 4
    34d0:	91 e0       	ldi	r25, 0x01	; 1
    34d2:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
		
		dataflash_write_to_page_buffer(FILESYSTEM_FILE_BLOCK_USAGE, 0, filesystem_file_pos-1);
    34d6:	40 91 d9 04 	lds	r20, 0x04D9
    34da:	41 50       	subi	r20, 0x01	; 1
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	87 e0       	ldi	r24, 0x07	; 7
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>

		//store in flash:
		dataflash_copy_buffer_to_page(filesystem_current_block,0);
    34e6:	80 91 e1 05 	lds	r24, 0x05E1
    34ea:	90 91 e2 05 	lds	r25, 0x05E2
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	08 95       	ret

000034fc <filesystem_write_data>:
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	8c 01       	movw	r16, r24
    3508:	eb 01       	movw	r28, r22
    350a:	f4 2e       	mov	r15, r20
    350c:	80 91 df 05 	lds	r24, 0x05DF
    3510:	90 91 e0 05 	lds	r25, 0x05E0
    3514:	89 2b       	or	r24, r25
    3516:	b9 f5       	brne	.+110    	; 0x3586 <filesystem_write_data+0x8a>
    3518:	38 c0       	rjmp	.+112    	; 0x358a <filesystem_write_data+0x8e>
    351a:	e0 91 d9 04 	lds	r30, 0x04D9
    351e:	ff 27       	eor	r31, r31
    3520:	e6 52       	subi	r30, 0x26	; 38
    3522:	fb 4f       	sbci	r31, 0xFB	; 251
    3524:	d8 01       	movw	r26, r16
    3526:	8c 91       	ld	r24, X
    3528:	80 83       	st	Z, r24
    352a:	80 91 d9 04 	lds	r24, 0x04D9
    352e:	8f 3f       	cpi	r24, 0xFF	; 255
    3530:	31 f0       	breq	.+12     	; 0x353e <filesystem_write_data+0x42>
    3532:	c1 30       	cpi	r28, 0x01	; 1
    3534:	d1 05       	cpc	r29, r1
    3536:	f9 f4       	brne	.+62     	; 0x3576 <filesystem_write_data+0x7a>
    3538:	b1 e0       	ldi	r27, 0x01	; 1
    353a:	fb 16       	cp	r15, r27
    353c:	e1 f4       	brne	.+56     	; 0x3576 <filesystem_write_data+0x7a>
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	31 e0       	ldi	r19, 0x01	; 1
    3542:	4a ed       	ldi	r20, 0xDA	; 218
    3544:	54 e0       	ldi	r21, 0x04	; 4
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <dataflash_write_n_to_page_buffer>
    3550:	80 91 d9 04 	lds	r24, 0x04D9
    3554:	8f 3f       	cpi	r24, 0xFF	; 255
    3556:	19 f0       	breq	.+6      	; 0x355e <filesystem_write_data+0x62>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0a c0       	rjmp	.+20     	; 0x3572 <filesystem_write_data+0x76>
    355e:	c1 30       	cpi	r28, 0x01	; 1
    3560:	d1 05       	cpc	r29, r1
    3562:	29 f4       	brne	.+10     	; 0x356e <filesystem_write_data+0x72>
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	21 e0       	ldi	r18, 0x01	; 1
    356a:	f2 16       	cp	r15, r18
    356c:	11 f0       	breq	.+4      	; 0x3572 <filesystem_write_data+0x76>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <filesystem_store_current_block>
    3576:	0f 5f       	subi	r16, 0xFF	; 255
    3578:	1f 4f       	sbci	r17, 0xFF	; 255
    357a:	80 91 d9 04 	lds	r24, 0x04D9
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	80 93 d9 04 	sts	0x04D9, r24
    3584:	21 97       	sbiw	r28, 0x01	; 1
    3586:	20 97       	sbiw	r28, 0x00	; 0
    3588:	41 f6       	brne	.-112    	; 0x351a <filesystem_write_data+0x1e>
    358a:	df 91       	pop	r29
    358c:	cf 91       	pop	r28
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	ff 90       	pop	r15
    3594:	08 95       	ret

00003596 <filesystem_close_file>:
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	80 91 df 05 	lds	r24, 0x05DF
    35a6:	90 91 e0 05 	lds	r25, 0x05E0
    35aa:	89 2b       	or	r24, r25
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <filesystem_close_file+0x1a>
    35ae:	ab c0       	rjmp	.+342    	; 0x3706 <filesystem_close_file+0x170>
    35b0:	20 91 d9 04 	lds	r18, 0x04D9
    35b4:	33 27       	eor	r19, r19
    35b6:	4a ed       	ldi	r20, 0xDA	; 218
    35b8:	54 e0       	ldi	r21, 0x04	; 4
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	0e 94 62 36 	call	0x6cc4	; 0x6cc4 <dataflash_write_n_to_page_buffer>
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <filesystem_store_current_block>
    35ca:	80 91 df 05 	lds	r24, 0x05DF
    35ce:	90 91 e0 05 	lds	r25, 0x05E0
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	6b e0       	ldi	r22, 0x0B	; 11
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    35dc:	cb 01       	movw	r24, r22
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    35e4:	80 91 df 05 	lds	r24, 0x05DF
    35e8:	90 91 e0 05 	lds	r25, 0x05E0
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	6b e0       	ldi	r22, 0x0B	; 11
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    35f6:	8c 01       	movw	r16, r24
    35f8:	00 0f       	add	r16, r16
    35fa:	11 1f       	adc	r17, r17
    35fc:	08 0f       	add	r16, r24
    35fe:	19 1f       	adc	r17, r25
    3600:	73 e0       	ldi	r23, 0x03	; 3
    3602:	00 0f       	add	r16, r16
    3604:	11 1f       	adc	r17, r17
    3606:	7a 95       	dec	r23
    3608:	e1 f7       	brne	.-8      	; 0x3602 <filesystem_close_file+0x6c>
    360a:	40 91 df 05 	lds	r20, 0x05DF
    360e:	50 91 e0 05 	lds	r21, 0x05E0
    3612:	45 2f       	mov	r20, r21
    3614:	55 27       	eor	r21, r21
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	c8 01       	movw	r24, r16
    361a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    361e:	40 91 df 05 	lds	r20, 0x05DF
    3622:	50 91 e0 05 	lds	r21, 0x05E0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	c8 01       	movw	r24, r16
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3630:	e8 01       	movw	r28, r16
    3632:	26 96       	adiw	r28, 0x06	; 6
    3634:	54 ee       	ldi	r21, 0xE4	; 228
    3636:	e5 2e       	mov	r14, r21
    3638:	55 e0       	ldi	r21, 0x05	; 5
    363a:	f5 2e       	mov	r15, r21
    363c:	f7 01       	movw	r30, r14
    363e:	41 91       	ld	r20, Z+
    3640:	7f 01       	movw	r14, r30
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	ce 01       	movw	r24, r28
    3646:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    364a:	21 96       	adiw	r28, 0x01	; 1
    364c:	fc ee       	ldi	r31, 0xEC	; 236
    364e:	ef 16       	cp	r14, r31
    3650:	f5 e0       	ldi	r31, 0x05	; 5
    3652:	ff 06       	cpc	r15, r31
    3654:	99 f7       	brne	.-26     	; 0x363c <filesystem_close_file+0xa6>
    3656:	e8 01       	movw	r28, r16
    3658:	2e 96       	adiw	r28, 0x0e	; 14
    365a:	4c ed       	ldi	r20, 0xDC	; 220
    365c:	e4 2e       	mov	r14, r20
    365e:	45 e0       	ldi	r20, 0x05	; 5
    3660:	f4 2e       	mov	r15, r20
    3662:	f7 01       	movw	r30, r14
    3664:	41 91       	ld	r20, Z+
    3666:	7f 01       	movw	r14, r30
    3668:	60 e0       	ldi	r22, 0x00	; 0
    366a:	ce 01       	movw	r24, r28
    366c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3670:	21 96       	adiw	r28, 0x01	; 1
    3672:	ff ed       	ldi	r31, 0xDF	; 223
    3674:	ef 16       	cp	r14, r31
    3676:	f5 e0       	ldi	r31, 0x05	; 5
    3678:	ff 06       	cpc	r15, r31
    367a:	99 f7       	brne	.-26     	; 0x3662 <filesystem_close_file+0xcc>
    367c:	40 91 d7 04 	lds	r20, 0x04D7
    3680:	50 91 d8 04 	lds	r21, 0x04D8
    3684:	45 2f       	mov	r20, r21
    3686:	55 27       	eor	r21, r21
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	c8 01       	movw	r24, r16
    368c:	41 96       	adiw	r24, 0x11	; 17
    368e:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3692:	40 91 d7 04 	lds	r20, 0x04D7
    3696:	50 91 d8 04 	lds	r21, 0x04D8
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	c8 01       	movw	r24, r16
    369e:	42 96       	adiw	r24, 0x12	; 18
    36a0:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    36a4:	40 91 da 05 	lds	r20, 0x05DA
    36a8:	50 91 db 05 	lds	r21, 0x05DB
    36ac:	45 2f       	mov	r20, r21
    36ae:	55 27       	eor	r21, r21
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	c8 01       	movw	r24, r16
    36b4:	43 96       	adiw	r24, 0x13	; 19
    36b6:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    36ba:	40 91 da 05 	lds	r20, 0x05DA
    36be:	50 91 db 05 	lds	r21, 0x05DB
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	c8 01       	movw	r24, r16
    36c6:	44 96       	adiw	r24, 0x14	; 20
    36c8:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    36cc:	80 91 df 05 	lds	r24, 0x05DF
    36d0:	90 91 e0 05 	lds	r25, 0x05E0
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	6b e0       	ldi	r22, 0x0B	; 11
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    36de:	cb 01       	movw	r24, r22
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>
    36e6:	10 92 e3 05 	sts	0x05E3, r1
    36ea:	10 92 e0 05 	sts	0x05E0, r1
    36ee:	10 92 df 05 	sts	0x05DF, r1
    36f2:	10 92 d8 04 	sts	0x04D8, r1
    36f6:	10 92 d7 04 	sts	0x04D7, r1
    36fa:	10 92 e2 05 	sts	0x05E2, r1
    36fe:	10 92 e1 05 	sts	0x05E1, r1
    3702:	10 92 d9 04 	sts	0x04D9, r1
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	ff 90       	pop	r15
    3710:	ef 90       	pop	r14
    3712:	08 95       	ret

00003714 <filesystem_allocate_fileid>:
    3714:	bf 92       	push	r11
    3716:	cf 92       	push	r12
    3718:	df 92       	push	r13
    371a:	ef 92       	push	r14
    371c:	ff 92       	push	r15
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
    3726:	cc 24       	eor	r12, r12
    3728:	dd 24       	eor	r13, r13
    372a:	bc 2c       	mov	r11, r12
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	c6 01       	movw	r24, r12
    3730:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3734:	ee 24       	eor	r14, r14
    3736:	ff 24       	eor	r15, r15
    3738:	c0 e0       	ldi	r28, 0x00	; 0
    373a:	d0 e0       	ldi	r29, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	ce 01       	movw	r24, r28
    3740:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3744:	08 2f       	mov	r16, r24
    3746:	11 27       	eor	r17, r17
    3748:	10 2f       	mov	r17, r16
    374a:	00 27       	eor	r16, r16
    374c:	60 e0       	ldi	r22, 0x00	; 0
    374e:	ce 01       	movw	r24, r28
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3756:	99 27       	eor	r25, r25
    3758:	08 2b       	or	r16, r24
    375a:	19 2b       	or	r17, r25
    375c:	97 01       	movw	r18, r14
    375e:	2f 5f       	subi	r18, 0xFF	; 255
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	01 2b       	or	r16, r17
    3764:	39 f4       	brne	.+14     	; 0x3774 <filesystem_allocate_fileid+0x60>
    3766:	8b e0       	ldi	r24, 0x0B	; 11
    3768:	b8 9e       	mul	r11, r24
    376a:	c0 01       	movw	r24, r0
    376c:	11 24       	eor	r1, r1
    376e:	82 0f       	add	r24, r18
    3770:	93 1f       	adc	r25, r19
    3772:	0e c0       	rjmp	.+28     	; 0x3790 <filesystem_allocate_fileid+0x7c>
    3774:	79 01       	movw	r14, r18
    3776:	68 96       	adiw	r28, 0x18	; 24
    3778:	2b 30       	cpi	r18, 0x0B	; 11
    377a:	31 05       	cpc	r19, r1
    377c:	f9 f6       	brne	.-66     	; 0x373c <filesystem_allocate_fileid+0x28>
    377e:	08 94       	sec
    3780:	c1 1c       	adc	r12, r1
    3782:	d1 1c       	adc	r13, r1
    3784:	82 e3       	ldi	r24, 0x32	; 50
    3786:	c8 16       	cp	r12, r24
    3788:	d1 04       	cpc	r13, r1
    378a:	79 f6       	brne	.-98     	; 0x372a <filesystem_allocate_fileid+0x16>
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	df 90       	pop	r13
    379e:	cf 90       	pop	r12
    37a0:	bf 90       	pop	r11
    37a2:	08 95       	ret

000037a4 <filesystem_get_data>:
    37a4:	2f 92       	push	r2
    37a6:	3f 92       	push	r3
    37a8:	4f 92       	push	r4
    37aa:	5f 92       	push	r5
    37ac:	6f 92       	push	r6
    37ae:	7f 92       	push	r7
    37b0:	8f 92       	push	r8
    37b2:	9f 92       	push	r9
    37b4:	af 92       	push	r10
    37b6:	bf 92       	push	r11
    37b8:	cf 92       	push	r12
    37ba:	df 92       	push	r13
    37bc:	ef 92       	push	r14
    37be:	ff 92       	push	r15
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	2c 01       	movw	r4, r24
    37ca:	eb 01       	movw	r28, r22
    37cc:	1a 01       	movw	r2, r20
    37ce:	48 01       	movw	r8, r16
    37d0:	59 01       	movw	r10, r18
    37d2:	36 01       	movw	r6, r12
    37d4:	e1 14       	cp	r14, r1
    37d6:	f1 04       	cpc	r15, r1
    37d8:	09 f4       	brne	.+2      	; 0x37dc <filesystem_get_data+0x38>
    37da:	b8 c0       	rjmp	.+368    	; 0x394c <filesystem_get_data+0x1a8>
    37dc:	87 01       	movw	r16, r14
    37de:	01 50       	subi	r16, 0x01	; 1
    37e0:	10 40       	sbci	r17, 0x00	; 0
    37e2:	c8 01       	movw	r24, r16
    37e4:	6b e0       	ldi	r22, 0x0B	; 11
    37e6:	70 e0       	ldi	r23, 0x00	; 0
    37e8:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    37ec:	cb 01       	movw	r24, r22
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    37f4:	c8 01       	movw	r24, r16
    37f6:	6b e0       	ldi	r22, 0x0B	; 11
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    37fe:	7c 01       	movw	r14, r24
    3800:	ee 0c       	add	r14, r14
    3802:	ff 1c       	adc	r15, r15
    3804:	e8 0e       	add	r14, r24
    3806:	f9 1e       	adc	r15, r25
    3808:	13 e0       	ldi	r17, 0x03	; 3
    380a:	ee 0c       	add	r14, r14
    380c:	ff 1c       	adc	r15, r15
    380e:	1a 95       	dec	r17
    3810:	e1 f7       	brne	.-8      	; 0x380a <filesystem_get_data+0x66>
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	c7 01       	movw	r24, r14
    3816:	41 96       	adiw	r24, 0x11	; 17
    3818:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    381c:	08 2f       	mov	r16, r24
    381e:	11 27       	eor	r17, r17
    3820:	10 2f       	mov	r17, r16
    3822:	00 27       	eor	r16, r16
    3824:	d6 01       	movw	r26, r12
    3826:	0d 93       	st	X+, r16
    3828:	1c 93       	st	X, r17
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	c7 01       	movw	r24, r14
    382e:	42 96       	adiw	r24, 0x12	; 18
    3830:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3834:	99 27       	eor	r25, r25
    3836:	80 2b       	or	r24, r16
    3838:	91 2b       	or	r25, r17
    383a:	f6 01       	movw	r30, r12
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	80 83       	st	Z, r24
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	d9 f4       	brne	.+54     	; 0x387a <filesystem_get_data+0xd6>
    3844:	f2 01       	movw	r30, r4
    3846:	ec 0f       	add	r30, r28
    3848:	fd 1f       	adc	r31, r29
    384a:	34 e3       	ldi	r19, 0x34	; 52
    384c:	30 83       	st	Z, r19
    384e:	ce 01       	movw	r24, r28
    3850:	01 96       	adiw	r24, 0x01	; 1
    3852:	f2 01       	movw	r30, r4
    3854:	e8 0f       	add	r30, r24
    3856:	f9 1f       	adc	r31, r25
    3858:	20 e3       	ldi	r18, 0x30	; 48
    385a:	20 83       	st	Z, r18
    385c:	01 96       	adiw	r24, 0x01	; 1
    385e:	48 0e       	add	r4, r24
    3860:	59 1e       	adc	r5, r25
    3862:	d2 01       	movw	r26, r4
    3864:	3c 93       	st	X, r19
    3866:	ec 01       	movw	r28, r24
    3868:	21 96       	adiw	r28, 0x01	; 1
    386a:	70 c0       	rjmp	.+224    	; 0x394c <filesystem_get_data+0x1a8>
    386c:	c0 e0       	ldi	r28, 0x00	; 0
    386e:	d0 e0       	ldi	r29, 0x00	; 0
    3870:	6d c0       	rjmp	.+218    	; 0x394c <filesystem_get_data+0x1a8>
    3872:	f3 01       	movw	r30, r6
    3874:	11 82       	std	Z+1, r1	; 0x01
    3876:	10 82       	st	Z, r1
    3878:	69 c0       	rjmp	.+210    	; 0x394c <filesystem_get_data+0x1a8>
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3880:	ff ef       	ldi	r31, 0xFF	; 255
    3882:	8f 16       	cp	r8, r31
    3884:	91 04       	cpc	r9, r1
    3886:	a1 04       	cpc	r10, r1
    3888:	b1 04       	cpc	r11, r1
    388a:	98 f5       	brcc	.+102    	; 0x38f2 <filesystem_get_data+0x14e>
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	87 e0       	ldi	r24, 0x07	; 7
    3890:	91 e0       	ldi	r25, 0x01	; 1
    3892:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3896:	e8 2e       	mov	r14, r24
    3898:	ff 24       	eor	r15, r15
    389a:	08 94       	sec
    389c:	e1 1c       	adc	r14, r1
    389e:	f1 1c       	adc	r15, r1
    38a0:	81 14       	cp	r8, r1
    38a2:	91 04       	cpc	r9, r1
    38a4:	a1 04       	cpc	r10, r1
    38a6:	b1 04       	cpc	r11, r1
    38a8:	31 f4       	brne	.+12     	; 0x38b6 <filesystem_get_data+0x112>
    38aa:	00 e0       	ldi	r16, 0x00	; 0
    38ac:	10 e0       	ldi	r17, 0x00	; 0
    38ae:	62 01       	movw	r12, r4
    38b0:	cc 0e       	add	r12, r28
    38b2:	dd 1e       	adc	r13, r29
    38b4:	17 c0       	rjmp	.+46     	; 0x38e4 <filesystem_get_data+0x140>
    38b6:	84 01       	movw	r16, r8
    38b8:	e8 18       	sub	r14, r8
    38ba:	f9 08       	sbc	r15, r9
    38bc:	f8 cf       	rjmp	.-16     	; 0x38ae <filesystem_get_data+0x10a>
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	c8 01       	movw	r24, r16
    38c2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    38c6:	d6 01       	movw	r26, r12
    38c8:	8d 93       	st	X+, r24
    38ca:	6d 01       	movw	r12, r26
    38cc:	08 94       	sec
    38ce:	21 08       	sbc	r2, r1
    38d0:	31 08       	sbc	r3, r1
    38d2:	21 14       	cp	r2, r1
    38d4:	31 04       	cpc	r3, r1
    38d6:	51 f2       	breq	.-108    	; 0x386c <filesystem_get_data+0xc8>
    38d8:	21 96       	adiw	r28, 0x01	; 1
    38da:	08 94       	sec
    38dc:	e1 08       	sbc	r14, r1
    38de:	f1 08       	sbc	r15, r1
    38e0:	0f 5f       	subi	r16, 0xFF	; 255
    38e2:	1f 4f       	sbci	r17, 0xFF	; 255
    38e4:	e1 14       	cp	r14, r1
    38e6:	f1 04       	cpc	r15, r1
    38e8:	51 f7       	brne	.-44     	; 0x38be <filesystem_get_data+0x11a>
    38ea:	88 24       	eor	r8, r8
    38ec:	99 24       	eor	r9, r9
    38ee:	54 01       	movw	r10, r8
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <filesystem_get_data+0x15e>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	9f ef       	ldi	r25, 0xFF	; 255
    38f6:	af ef       	ldi	r26, 0xFF	; 255
    38f8:	bf ef       	ldi	r27, 0xFF	; 255
    38fa:	88 0e       	add	r8, r24
    38fc:	99 1e       	adc	r9, r25
    38fe:	aa 1e       	adc	r10, r26
    3900:	bb 1e       	adc	r11, r27
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	84 e0       	ldi	r24, 0x04	; 4
    3906:	91 e0       	ldi	r25, 0x01	; 1
    3908:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    390c:	08 2f       	mov	r16, r24
    390e:	11 27       	eor	r17, r17
    3910:	10 2f       	mov	r17, r16
    3912:	00 27       	eor	r16, r16
    3914:	d3 01       	movw	r26, r6
    3916:	0d 93       	st	X+, r16
    3918:	1c 93       	st	X, r17
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	85 e0       	ldi	r24, 0x05	; 5
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3924:	99 27       	eor	r25, r25
    3926:	08 2b       	or	r16, r24
    3928:	19 2b       	or	r17, r25
    392a:	f3 01       	movw	r30, r6
    392c:	11 83       	std	Z+1, r17	; 0x01
    392e:	00 83       	st	Z, r16
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	86 e0       	ldi	r24, 0x06	; 6
    3934:	91 e0       	ldi	r25, 0x01	; 1
    3936:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    393a:	8e 3e       	cpi	r24, 0xEE	; 238
    393c:	09 f4       	brne	.+2      	; 0x3940 <filesystem_get_data+0x19c>
    393e:	99 cf       	rjmp	.-206    	; 0x3872 <filesystem_get_data+0xce>
    3940:	d3 01       	movw	r26, r6
    3942:	8d 91       	ld	r24, X+
    3944:	9c 91       	ld	r25, X
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	09 f0       	breq	.+2      	; 0x394c <filesystem_get_data+0x1a8>
    394a:	97 cf       	rjmp	.-210    	; 0x387a <filesystem_get_data+0xd6>
    394c:	ce 01       	movw	r24, r28
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	1f 91       	pop	r17
    3954:	0f 91       	pop	r16
    3956:	ff 90       	pop	r15
    3958:	ef 90       	pop	r14
    395a:	df 90       	pop	r13
    395c:	cf 90       	pop	r12
    395e:	bf 90       	pop	r11
    3960:	af 90       	pop	r10
    3962:	9f 90       	pop	r9
    3964:	8f 90       	pop	r8
    3966:	7f 90       	pop	r7
    3968:	6f 90       	pop	r6
    396a:	5f 90       	pop	r5
    396c:	4f 90       	pop	r4
    396e:	3f 90       	pop	r3
    3970:	2f 90       	pop	r2
    3972:	08 95       	ret

00003974 <filesystem_get_next_byte>:
    3974:	ef 92       	push	r14
    3976:	ff 92       	push	r15
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	7c 01       	movw	r14, r24
    3982:	80 91 d9 04 	lds	r24, 0x04D9
    3986:	88 23       	and	r24, r24
    3988:	b1 f4       	brne	.+44     	; 0x39b6 <filesystem_get_next_byte+0x42>
    398a:	80 91 e1 05 	lds	r24, 0x05E1
    398e:	90 91 e2 05 	lds	r25, 0x05E2
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3998:	c0 e0       	ldi	r28, 0x00	; 0
    399a:	d0 e0       	ldi	r29, 0x00	; 0
    399c:	0a ed       	ldi	r16, 0xDA	; 218
    399e:	14 e0       	ldi	r17, 0x04	; 4
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	ce 01       	movw	r24, r28
    39a4:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    39a8:	f8 01       	movw	r30, r16
    39aa:	81 93       	st	Z+, r24
    39ac:	8f 01       	movw	r16, r30
    39ae:	21 96       	adiw	r28, 0x01	; 1
    39b0:	cf 3f       	cpi	r28, 0xFF	; 255
    39b2:	d1 05       	cpc	r29, r1
    39b4:	a9 f7       	brne	.-22     	; 0x39a0 <filesystem_get_next_byte+0x2c>
    39b6:	e0 91 d9 04 	lds	r30, 0x04D9
    39ba:	ff 27       	eor	r31, r31
    39bc:	e6 52       	subi	r30, 0x26	; 38
    39be:	fb 4f       	sbci	r31, 0xFB	; 251
    39c0:	80 81       	ld	r24, Z
    39c2:	f7 01       	movw	r30, r14
    39c4:	80 83       	st	Z, r24
    39c6:	80 91 d9 04 	lds	r24, 0x04D9
    39ca:	8f 5f       	subi	r24, 0xFF	; 255
    39cc:	80 93 d9 04 	sts	0x04D9, r24
    39d0:	80 91 d9 04 	lds	r24, 0x04D9
    39d4:	8f 3f       	cpi	r24, 0xFF	; 255
    39d6:	19 f0       	breq	.+6      	; 0x39de <filesystem_get_next_byte+0x6a>
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	2a c0       	rjmp	.+84     	; 0x3a32 <filesystem_get_next_byte+0xbe>
    39de:	10 92 d9 04 	sts	0x04D9, r1
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	84 e0       	ldi	r24, 0x04	; 4
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    39ec:	99 27       	eor	r25, r25
    39ee:	98 2f       	mov	r25, r24
    39f0:	88 27       	eor	r24, r24
    39f2:	90 93 e2 05 	sts	0x05E2, r25
    39f6:	80 93 e1 05 	sts	0x05E1, r24
    39fa:	00 91 e1 05 	lds	r16, 0x05E1
    39fe:	10 91 e2 05 	lds	r17, 0x05E2
    3a02:	60 e0       	ldi	r22, 0x00	; 0
    3a04:	85 e0       	ldi	r24, 0x05	; 5
    3a06:	91 e0       	ldi	r25, 0x01	; 1
    3a08:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3a0c:	99 27       	eor	r25, r25
    3a0e:	08 2b       	or	r16, r24
    3a10:	19 2b       	or	r17, r25
    3a12:	10 93 e2 05 	sts	0x05E2, r17
    3a16:	00 93 e1 05 	sts	0x05E1, r16
    3a1a:	80 91 e1 05 	lds	r24, 0x05E1
    3a1e:	90 91 e2 05 	lds	r25, 0x05E2
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	89 2b       	or	r24, r25
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <filesystem_get_next_byte+0xb6>
    3a28:	21 e0       	ldi	r18, 0x01	; 1
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	28 27       	eor	r18, r24
    3a2e:	82 2f       	mov	r24, r18
    3a30:	99 27       	eor	r25, r25
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	08 95       	ret

00003a40 <filesystem_filename_to_buffer>:
    3a40:	af 92       	push	r10
    3a42:	bf 92       	push	r11
    3a44:	cf 92       	push	r12
    3a46:	df 92       	push	r13
    3a48:	ef 92       	push	r14
    3a4a:	ff 92       	push	r15
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	5c 01       	movw	r10, r24
    3a56:	eb 01       	movw	r28, r22
    3a58:	cc 0f       	add	r28, r28
    3a5a:	dd 1f       	adc	r29, r29
    3a5c:	c6 0f       	add	r28, r22
    3a5e:	d7 1f       	adc	r29, r23
    3a60:	33 e0       	ldi	r19, 0x03	; 3
    3a62:	cc 0f       	add	r28, r28
    3a64:	dd 1f       	adc	r29, r29
    3a66:	3a 95       	dec	r19
    3a68:	e1 f7       	brne	.-8      	; 0x3a62 <filesystem_filename_to_buffer+0x22>
    3a6a:	8e 01       	movw	r16, r28
    3a6c:	0a 5f       	subi	r16, 0xFA	; 250
    3a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a70:	ee 24       	eor	r14, r14
    3a72:	ff 24       	eor	r15, r15
    3a74:	6c 01       	movw	r12, r24
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	c8 01       	movw	r24, r16
    3a7a:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3a7e:	f6 01       	movw	r30, r12
    3a80:	81 93       	st	Z+, r24
    3a82:	6f 01       	movw	r12, r30
    3a84:	88 23       	and	r24, r24
    3a86:	49 f0       	breq	.+18     	; 0x3a9a <filesystem_filename_to_buffer+0x5a>
    3a88:	08 94       	sec
    3a8a:	e1 1c       	adc	r14, r1
    3a8c:	f1 1c       	adc	r15, r1
    3a8e:	0f 5f       	subi	r16, 0xFF	; 255
    3a90:	1f 4f       	sbci	r17, 0xFF	; 255
    3a92:	f8 e0       	ldi	r31, 0x08	; 8
    3a94:	ef 16       	cp	r14, r31
    3a96:	f1 04       	cpc	r15, r1
    3a98:	71 f7       	brne	.-36     	; 0x3a76 <filesystem_filename_to_buffer+0x36>
    3a9a:	f5 01       	movw	r30, r10
    3a9c:	ee 0d       	add	r30, r14
    3a9e:	ff 1d       	adc	r31, r15
    3aa0:	8e e2       	ldi	r24, 0x2E	; 46
    3aa2:	80 83       	st	Z, r24
    3aa4:	08 94       	sec
    3aa6:	e1 1c       	adc	r14, r1
    3aa8:	f1 1c       	adc	r15, r1
    3aaa:	2e 96       	adiw	r28, 0x0e	; 14
    3aac:	8f 01       	movw	r16, r30
    3aae:	dd 24       	eor	r13, r13
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3ab8:	f8 01       	movw	r30, r16
    3aba:	81 83       	std	Z+1, r24	; 0x01
    3abc:	88 23       	and	r24, r24
    3abe:	51 f0       	breq	.+20     	; 0x3ad4 <filesystem_filename_to_buffer+0x94>
    3ac0:	08 94       	sec
    3ac2:	e1 1c       	adc	r14, r1
    3ac4:	f1 1c       	adc	r15, r1
    3ac6:	d3 94       	inc	r13
    3ac8:	21 96       	adiw	r28, 0x01	; 1
    3aca:	0f 5f       	subi	r16, 0xFF	; 255
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	f3 e0       	ldi	r31, 0x03	; 3
    3ad0:	df 16       	cp	r13, r31
    3ad2:	71 f7       	brne	.-36     	; 0x3ab0 <filesystem_filename_to_buffer+0x70>
    3ad4:	8e 2d       	mov	r24, r14
    3ad6:	99 27       	eor	r25, r25
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	bf 90       	pop	r11
    3aea:	af 90       	pop	r10
    3aec:	08 95       	ret

00003aee <filesystem_list_files>:
    3aee:	0f 93       	push	r16
    3af0:	1f 93       	push	r17
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	00 e0       	ldi	r16, 0x00	; 0
    3af8:	10 e0       	ldi	r17, 0x00	; 0
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	c8 01       	movw	r24, r16
    3afe:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3b02:	c0 e0       	ldi	r28, 0x00	; 0
    3b04:	d0 e0       	ldi	r29, 0x00	; 0
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	ce 01       	movw	r24, r28
    3b0a:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	ce 01       	movw	r24, r28
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3b18:	68 96       	adiw	r28, 0x18	; 24
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	c8 30       	cpi	r28, 0x08	; 8
    3b1e:	d8 07       	cpc	r29, r24
    3b20:	91 f7       	brne	.-28     	; 0x3b06 <filesystem_list_files+0x18>
    3b22:	0f 5f       	subi	r16, 0xFF	; 255
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	02 33       	cpi	r16, 0x32	; 50
    3b28:	11 05       	cpc	r17, r1
    3b2a:	39 f7       	brne	.-50     	; 0x3afa <filesystem_list_files+0xc>
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	08 95       	ret

00003b36 <filesystem_search_file>:
    3b36:	2f 92       	push	r2
    3b38:	3f 92       	push	r3
    3b3a:	4f 92       	push	r4
    3b3c:	5f 92       	push	r5
    3b3e:	6f 92       	push	r6
    3b40:	7f 92       	push	r7
    3b42:	8f 92       	push	r8
    3b44:	9f 92       	push	r9
    3b46:	af 92       	push	r10
    3b48:	bf 92       	push	r11
    3b4a:	cf 92       	push	r12
    3b4c:	df 92       	push	r13
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	21 97       	sbiw	r28, 0x01	; 1
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	2c 01       	movw	r4, r24
    3b6c:	3b 01       	movw	r6, r22
    3b6e:	fb 01       	movw	r30, r22
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	0a c0       	rjmp	.+20     	; 0x3b88 <filesystem_search_file+0x52>
    3b74:	89 2f       	mov	r24, r25
    3b76:	81 54       	subi	r24, 0x41	; 65
    3b78:	8a 31       	cpi	r24, 0x1A	; 26
    3b7a:	10 f4       	brcc	.+4      	; 0x3b80 <filesystem_search_file+0x4a>
    3b7c:	90 5e       	subi	r25, 0xE0	; 224
    3b7e:	90 83       	st	Z, r25
    3b80:	2f 5f       	subi	r18, 0xFF	; 255
    3b82:	31 96       	adiw	r30, 0x01	; 1
    3b84:	23 30       	cpi	r18, 0x03	; 3
    3b86:	19 f0       	breq	.+6      	; 0x3b8e <filesystem_search_file+0x58>
    3b88:	90 81       	ld	r25, Z
    3b8a:	99 23       	and	r25, r25
    3b8c:	99 f7       	brne	.-26     	; 0x3b74 <filesystem_search_file+0x3e>
    3b8e:	88 24       	eor	r8, r8
    3b90:	99 24       	eor	r9, r9
    3b92:	60 e0       	ldi	r22, 0x00	; 0
    3b94:	c4 01       	movw	r24, r8
    3b96:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3b9a:	cc 24       	eor	r12, r12
    3b9c:	dd 24       	eor	r13, r13
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	c6 01       	movw	r24, r12
    3ba2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3ba6:	99 27       	eor	r25, r25
    3ba8:	b8 2e       	mov	r11, r24
    3baa:	aa 24       	eor	r10, r10
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	c6 01       	movw	r24, r12
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3bb6:	99 27       	eor	r25, r25
    3bb8:	a8 2a       	or	r10, r24
    3bba:	b9 2a       	or	r11, r25
    3bbc:	a1 14       	cp	r10, r1
    3bbe:	b1 04       	cpc	r11, r1
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <filesystem_search_file+0x8e>
    3bc2:	47 c0       	rjmp	.+142    	; 0x3c52 <filesystem_search_file+0x11c>
    3bc4:	f2 01       	movw	r30, r4
    3bc6:	10 81       	ld	r17, Z
    3bc8:	60 e0       	ldi	r22, 0x00	; 0
    3bca:	c6 01       	movw	r24, r12
    3bcc:	06 96       	adiw	r24, 0x06	; 6
    3bce:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3bd2:	18 17       	cp	r17, r24
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <filesystem_search_file+0xa2>
    3bd6:	3d c0       	rjmp	.+122    	; 0x3c52 <filesystem_search_file+0x11c>
    3bd8:	12 01       	movw	r2, r4
    3bda:	67 e0       	ldi	r22, 0x07	; 7
    3bdc:	e6 2e       	mov	r14, r22
    3bde:	f1 2c       	mov	r15, r1
    3be0:	ec 0c       	add	r14, r12
    3be2:	fd 1c       	adc	r15, r13
    3be4:	01 e0       	ldi	r16, 0x01	; 1
    3be6:	09 83       	std	Y+1, r16	; 0x01
    3be8:	f1 01       	movw	r30, r2
    3bea:	11 81       	ldd	r17, Z+1	; 0x01
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	c7 01       	movw	r24, r14
    3bf0:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3bf4:	18 13       	cpse	r17, r24
    3bf6:	19 82       	std	Y+1, r1	; 0x01
    3bf8:	f1 01       	movw	r30, r2
    3bfa:	81 81       	ldd	r24, Z+1	; 0x01
    3bfc:	88 23       	and	r24, r24
    3bfe:	41 f4       	brne	.+16     	; 0x3c10 <filesystem_search_file+0xda>
    3c00:	5e e0       	ldi	r21, 0x0E	; 14
    3c02:	25 2e       	mov	r2, r21
    3c04:	31 2c       	mov	r3, r1
    3c06:	2c 0c       	add	r2, r12
    3c08:	3d 1c       	adc	r3, r13
    3c0a:	ee 24       	eor	r14, r14
    3c0c:	ff 24       	eor	r15, r15
    3c0e:	0a c0       	rjmp	.+20     	; 0x3c24 <filesystem_search_file+0xee>
    3c10:	0f 5f       	subi	r16, 0xFF	; 255
    3c12:	08 94       	sec
    3c14:	21 1c       	adc	r2, r1
    3c16:	31 1c       	adc	r3, r1
    3c18:	08 94       	sec
    3c1a:	e1 1c       	adc	r14, r1
    3c1c:	f1 1c       	adc	r15, r1
    3c1e:	08 30       	cpi	r16, 0x08	; 8
    3c20:	79 f3       	breq	.-34     	; 0x3c00 <filesystem_search_file+0xca>
    3c22:	e2 cf       	rjmp	.-60     	; 0x3be8 <filesystem_search_file+0xb2>
    3c24:	f3 01       	movw	r30, r6
    3c26:	ee 0d       	add	r30, r14
    3c28:	ff 1d       	adc	r31, r15
    3c2a:	10 81       	ld	r17, Z
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	c1 01       	movw	r24, r2
    3c30:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3c34:	18 13       	cpse	r17, r24
    3c36:	19 82       	std	Y+1, r1	; 0x01
    3c38:	08 94       	sec
    3c3a:	e1 1c       	adc	r14, r1
    3c3c:	f1 1c       	adc	r15, r1
    3c3e:	08 94       	sec
    3c40:	21 1c       	adc	r2, r1
    3c42:	31 1c       	adc	r3, r1
    3c44:	f3 e0       	ldi	r31, 0x03	; 3
    3c46:	ef 16       	cp	r14, r31
    3c48:	f1 04       	cpc	r15, r1
    3c4a:	61 f7       	brne	.-40     	; 0x3c24 <filesystem_search_file+0xee>
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	81 30       	cpi	r24, 0x01	; 1
    3c50:	a1 f0       	breq	.+40     	; 0x3c7a <filesystem_search_file+0x144>
    3c52:	e8 e1       	ldi	r30, 0x18	; 24
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	ce 0e       	add	r12, r30
    3c58:	df 1e       	adc	r13, r31
    3c5a:	f8 e0       	ldi	r31, 0x08	; 8
    3c5c:	cf 16       	cp	r12, r31
    3c5e:	f1 e0       	ldi	r31, 0x01	; 1
    3c60:	df 06       	cpc	r13, r31
    3c62:	09 f0       	breq	.+2      	; 0x3c66 <filesystem_search_file+0x130>
    3c64:	9c cf       	rjmp	.-200    	; 0x3b9e <filesystem_search_file+0x68>
    3c66:	08 94       	sec
    3c68:	81 1c       	adc	r8, r1
    3c6a:	91 1c       	adc	r9, r1
    3c6c:	82 e3       	ldi	r24, 0x32	; 50
    3c6e:	88 16       	cp	r8, r24
    3c70:	91 04       	cpc	r9, r1
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <filesystem_search_file+0x140>
    3c74:	8e cf       	rjmp	.-228    	; 0x3b92 <filesystem_search_file+0x5c>
    3c76:	aa 24       	eor	r10, r10
    3c78:	bb 24       	eor	r11, r11
    3c7a:	c5 01       	movw	r24, r10
    3c7c:	21 96       	adiw	r28, 0x01	; 1
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	de bf       	out	0x3e, r29	; 62
    3c84:	0f be       	out	0x3f, r0	; 63
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	df 91       	pop	r29
    3c8a:	cf 91       	pop	r28
    3c8c:	1f 91       	pop	r17
    3c8e:	0f 91       	pop	r16
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	bf 90       	pop	r11
    3c9a:	af 90       	pop	r10
    3c9c:	9f 90       	pop	r9
    3c9e:	8f 90       	pop	r8
    3ca0:	7f 90       	pop	r7
    3ca2:	6f 90       	pop	r6
    3ca4:	5f 90       	pop	r5
    3ca6:	4f 90       	pop	r4
    3ca8:	3f 90       	pop	r3
    3caa:	2f 90       	pop	r2
    3cac:	08 95       	ret

00003cae <filesystem_delete_file>:
    3cae:	cf 92       	push	r12
    3cb0:	df 92       	push	r13
    3cb2:	ef 92       	push	r14
    3cb4:	ff 92       	push	r15
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <filesystem_delete_file+0x16>
    3cc2:	71 c0       	rjmp	.+226    	; 0x3da6 <filesystem_delete_file+0xf8>
    3cc4:	8c 01       	movw	r16, r24
    3cc6:	01 50       	subi	r16, 0x01	; 1
    3cc8:	10 40       	sbci	r17, 0x00	; 0
    3cca:	c8 01       	movw	r24, r16
    3ccc:	6b e0       	ldi	r22, 0x0B	; 11
    3cce:	70 e0       	ldi	r23, 0x00	; 0
    3cd0:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    3cd4:	7b 01       	movw	r14, r22
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	c7 01       	movw	r24, r14
    3cda:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3cde:	c8 01       	movw	r24, r16
    3ce0:	6b e0       	ldi	r22, 0x0B	; 11
    3ce2:	70 e0       	ldi	r23, 0x00	; 0
    3ce4:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    3ce8:	8c 01       	movw	r16, r24
    3cea:	00 0f       	add	r16, r16
    3cec:	11 1f       	adc	r17, r17
    3cee:	08 0f       	add	r16, r24
    3cf0:	19 1f       	adc	r17, r25
    3cf2:	a3 e0       	ldi	r26, 0x03	; 3
    3cf4:	00 0f       	add	r16, r16
    3cf6:	11 1f       	adc	r17, r17
    3cf8:	aa 95       	dec	r26
    3cfa:	e1 f7       	brne	.-8      	; 0x3cf4 <filesystem_delete_file+0x46>
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	c8 01       	movw	r24, r16
    3d00:	41 96       	adiw	r24, 0x11	; 17
    3d02:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3d06:	c8 2e       	mov	r12, r24
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	c8 01       	movw	r24, r16
    3d0c:	42 96       	adiw	r24, 0x12	; 18
    3d0e:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3d12:	d8 2e       	mov	r13, r24
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	c8 01       	movw	r24, r16
    3d1a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	60 e0       	ldi	r22, 0x00	; 0
    3d22:	c8 01       	movw	r24, r16
    3d24:	01 96       	adiw	r24, 0x01	; 1
    3d26:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	c7 01       	movw	r24, r14
    3d2e:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>
    3d32:	c0 e0       	ldi	r28, 0x00	; 0
    3d34:	d0 e0       	ldi	r29, 0x00	; 0
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	0e 94 33 36 	call	0x6c66	; 0x6c66 <dataflash_write_to_page_buffer>
    3d40:	21 96       	adiw	r28, 0x01	; 1
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	c8 30       	cpi	r28, 0x08	; 8
    3d46:	d8 07       	cpc	r29, r24
    3d48:	b1 f7       	brne	.-20     	; 0x3d36 <filesystem_delete_file+0x88>
    3d4a:	8c 2d       	mov	r24, r12
    3d4c:	99 27       	eor	r25, r25
    3d4e:	d8 2f       	mov	r29, r24
    3d50:	cc 27       	eor	r28, r28
    3d52:	8d 2d       	mov	r24, r13
    3d54:	99 27       	eor	r25, r25
    3d56:	c8 2b       	or	r28, r24
    3d58:	d9 2b       	or	r29, r25
    3d5a:	23 c0       	rjmp	.+70     	; 0x3da2 <filesystem_delete_file+0xf4>
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	ce 01       	movw	r24, r28
    3d60:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	84 e0       	ldi	r24, 0x04	; 4
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3d6e:	08 2f       	mov	r16, r24
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	85 e0       	ldi	r24, 0x05	; 5
    3d74:	91 e0       	ldi	r25, 0x01	; 1
    3d76:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3d7a:	e8 2e       	mov	r14, r24
    3d7c:	60 e0       	ldi	r22, 0x00	; 0
    3d7e:	86 e0       	ldi	r24, 0x06	; 6
    3d80:	91 e0       	ldi	r25, 0x01	; 1
    3d82:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3d86:	8e 3e       	cpi	r24, 0xEE	; 238
    3d88:	71 f0       	breq	.+28     	; 0x3da6 <filesystem_delete_file+0xf8>
    3d8a:	11 27       	eor	r17, r17
    3d8c:	10 2f       	mov	r17, r16
    3d8e:	00 27       	eor	r16, r16
    3d90:	8e 2d       	mov	r24, r14
    3d92:	99 27       	eor	r25, r25
    3d94:	08 2b       	or	r16, r24
    3d96:	19 2b       	or	r17, r25
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <dataflash_copy_buffer_to_page>
    3da0:	e8 01       	movw	r28, r16
    3da2:	20 97       	sbiw	r28, 0x00	; 0
    3da4:	d9 f6       	brne	.-74     	; 0x3d5c <filesystem_delete_file+0xae>
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	0f 91       	pop	r16
    3dae:	ff 90       	pop	r15
    3db0:	ef 90       	pop	r14
    3db2:	df 90       	pop	r13
    3db4:	cf 90       	pop	r12
    3db6:	08 95       	ret

00003db8 <filesystem_open_file_wr>:
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	8c 01       	movw	r16, r24
    3dc2:	eb 01       	movw	r28, r22
    3dc4:	80 91 e3 05 	lds	r24, 0x05E3
    3dc8:	88 23       	and	r24, r24
    3dca:	11 f0       	breq	.+4      	; 0x3dd0 <filesystem_open_file_wr+0x18>
    3dcc:	0e 94 cb 1a 	call	0x3596	; 0x3596 <filesystem_close_file>
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	0a c0       	rjmp	.+20     	; 0x3dea <filesystem_open_file_wr+0x32>
    3dd6:	89 2f       	mov	r24, r25
    3dd8:	81 54       	subi	r24, 0x41	; 65
    3dda:	8a 31       	cpi	r24, 0x1A	; 26
    3ddc:	10 f4       	brcc	.+4      	; 0x3de2 <filesystem_open_file_wr+0x2a>
    3dde:	90 5e       	subi	r25, 0xE0	; 224
    3de0:	90 83       	st	Z, r25
    3de2:	2f 5f       	subi	r18, 0xFF	; 255
    3de4:	31 96       	adiw	r30, 0x01	; 1
    3de6:	23 30       	cpi	r18, 0x03	; 3
    3de8:	19 f0       	breq	.+6      	; 0x3df0 <filesystem_open_file_wr+0x38>
    3dea:	90 81       	ld	r25, Z
    3dec:	99 23       	and	r25, r25
    3dee:	99 f7       	brne	.-26     	; 0x3dd6 <filesystem_open_file_wr+0x1e>
    3df0:	f8 01       	movw	r30, r16
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	3f e5       	ldi	r19, 0x5F	; 95
    3df6:	90 81       	ld	r25, Z
    3df8:	99 23       	and	r25, r25
    3dfa:	79 f0       	breq	.+30     	; 0x3e1a <filesystem_open_file_wr+0x62>
    3dfc:	89 2f       	mov	r24, r25
    3dfe:	81 56       	subi	r24, 0x61	; 97
    3e00:	8a 31       	cpi	r24, 0x1A	; 26
    3e02:	38 f0       	brcs	.+14     	; 0x3e12 <filesystem_open_file_wr+0x5a>
    3e04:	80 5e       	subi	r24, 0xE0	; 224
    3e06:	8a 31       	cpi	r24, 0x1A	; 26
    3e08:	20 f0       	brcs	.+8      	; 0x3e12 <filesystem_open_file_wr+0x5a>
    3e0a:	90 53       	subi	r25, 0x30	; 48
    3e0c:	9a 30       	cpi	r25, 0x0A	; 10
    3e0e:	08 f0       	brcs	.+2      	; 0x3e12 <filesystem_open_file_wr+0x5a>
    3e10:	30 83       	st	Z, r19
    3e12:	2f 5f       	subi	r18, 0xFF	; 255
    3e14:	31 96       	adiw	r30, 0x01	; 1
    3e16:	28 30       	cpi	r18, 0x08	; 8
    3e18:	71 f7       	brne	.-36     	; 0x3df6 <filesystem_open_file_wr+0x3e>
    3e1a:	be 01       	movw	r22, r28
    3e1c:	c8 01       	movw	r24, r16
    3e1e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <filesystem_search_file>
    3e22:	90 93 e0 05 	sts	0x05E0, r25
    3e26:	80 93 df 05 	sts	0x05DF, r24
    3e2a:	80 91 df 05 	lds	r24, 0x05DF
    3e2e:	90 91 e0 05 	lds	r25, 0x05E0
    3e32:	89 2b       	or	r24, r25
    3e34:	39 f0       	breq	.+14     	; 0x3e44 <filesystem_open_file_wr+0x8c>
    3e36:	80 91 df 05 	lds	r24, 0x05DF
    3e3a:	90 91 e0 05 	lds	r25, 0x05E0
    3e3e:	0e 94 57 1e 	call	0x3cae	; 0x3cae <filesystem_delete_file>
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <filesystem_open_file_wr+0x98>
    3e44:	0e 94 8a 1b 	call	0x3714	; 0x3714 <filesystem_allocate_fileid>
    3e48:	90 93 e0 05 	sts	0x05E0, r25
    3e4c:	80 93 df 05 	sts	0x05DF, r24
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	90 93 db 05 	sts	0x05DB, r25
    3e58:	80 93 da 05 	sts	0x05DA, r24
    3e5c:	80 91 df 05 	lds	r24, 0x05DF
    3e60:	90 91 e0 05 	lds	r25, 0x05E0
    3e64:	89 2b       	or	r24, r25
    3e66:	19 f4       	brne	.+6      	; 0x3e6e <filesystem_open_file_wr+0xb6>
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	1f c0       	rjmp	.+62     	; 0x3eac <filesystem_open_file_wr+0xf4>
    3e6e:	0e 94 bb 19 	call	0x3376	; 0x3376 <filesystem_allocate_block>
    3e72:	9c 01       	movw	r18, r24
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	d1 f0       	breq	.+52     	; 0x3eac <filesystem_open_file_wr+0xf4>
    3e78:	90 93 d8 04 	sts	0x04D8, r25
    3e7c:	80 93 d7 04 	sts	0x04D7, r24
    3e80:	90 93 e2 05 	sts	0x05E2, r25
    3e84:	80 93 e1 05 	sts	0x05E1, r24
    3e88:	e4 ee       	ldi	r30, 0xE4	; 228
    3e8a:	f5 e0       	ldi	r31, 0x05	; 5
    3e8c:	d8 01       	movw	r26, r16
    3e8e:	8d 91       	ld	r24, X+
    3e90:	81 93       	st	Z+, r24
    3e92:	85 e0       	ldi	r24, 0x05	; 5
    3e94:	ec 3e       	cpi	r30, 0xEC	; 236
    3e96:	f8 07       	cpc	r31, r24
    3e98:	d1 f7       	brne	.-12     	; 0x3e8e <filesystem_open_file_wr+0xd6>
    3e9a:	88 81       	ld	r24, Y
    3e9c:	80 93 dc 05 	sts	0x05DC, r24
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	80 93 dd 05 	sts	0x05DD, r24
    3ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea8:	80 93 de 05 	sts	0x05DE, r24
    3eac:	c9 01       	movw	r24, r18
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	1f 91       	pop	r17
    3eb4:	0f 91       	pop	r16
    3eb6:	08 95       	ret

00003eb8 <filesystem_init>:
    3eb8:	10 92 e3 05 	sts	0x05E3, r1
    3ebc:	10 92 e0 05 	sts	0x05E0, r1
    3ec0:	10 92 df 05 	sts	0x05DF, r1
    3ec4:	10 92 d8 04 	sts	0x04D8, r1
    3ec8:	10 92 d7 04 	sts	0x04D7, r1
    3ecc:	10 92 e2 05 	sts	0x05E2, r1
    3ed0:	10 92 e1 05 	sts	0x05E1, r1
    3ed4:	10 92 d9 04 	sts	0x04D9, r1
    3ed8:	60 e0       	ldi	r22, 0x00	; 0
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3ee2:	60 e0       	ldi	r22, 0x00	; 0
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3eec:	8f 3f       	cpi	r24, 0xFF	; 255
    3eee:	49 f4       	brne	.+18     	; 0x3f02 <filesystem_init+0x4a>
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3efa:	8f 3f       	cpi	r24, 0xFF	; 255
    3efc:	11 f4       	brne	.+4      	; 0x3f02 <filesystem_init+0x4a>
    3efe:	0e 94 9a 19 	call	0x3334	; 0x3334 <filesystem_format>
    3f02:	08 95       	ret

00003f04 <filesystem_get_data_startat>:
    3f04:	6f 92       	push	r6
    3f06:	7f 92       	push	r7
    3f08:	8f 92       	push	r8
    3f0a:	9f 92       	push	r9
    3f0c:	af 92       	push	r10
    3f0e:	bf 92       	push	r11
    3f10:	cf 92       	push	r12
    3f12:	df 92       	push	r13
    3f14:	ef 92       	push	r14
    3f16:	ff 92       	push	r15
    3f18:	0f 93       	push	r16
    3f1a:	1f 93       	push	r17
    3f1c:	cf 93       	push	r28
    3f1e:	df 93       	push	r29
    3f20:	3c 01       	movw	r6, r24
    3f22:	7b 01       	movw	r14, r22
    3f24:	6a 01       	movw	r12, r20
    3f26:	49 01       	movw	r8, r18
    3f28:	6e c0       	rjmp	.+220    	; 0x4006 <filesystem_get_data_startat+0x102>
    3f2a:	60 e0       	ldi	r22, 0x00	; 0
    3f2c:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    3f30:	60 e0       	ldi	r22, 0x00	; 0
    3f32:	87 e0       	ldi	r24, 0x07	; 7
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3f3a:	c8 2f       	mov	r28, r24
    3f3c:	dd 27       	eor	r29, r29
    3f3e:	21 96       	adiw	r28, 0x01	; 1
    3f40:	01 15       	cp	r16, r1
    3f42:	11 05       	cpc	r17, r1
    3f44:	19 f4       	brne	.+6      	; 0x3f4c <filesystem_get_data_startat+0x48>
    3f46:	00 e0       	ldi	r16, 0x00	; 0
    3f48:	10 e0       	ldi	r17, 0x00	; 0
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <filesystem_get_data_startat+0x4c>
    3f4c:	c0 1b       	sub	r28, r16
    3f4e:	d1 0b       	sbc	r29, r17
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	c0 30       	cpi	r28, 0x00	; 0
    3f54:	d8 07       	cpc	r29, r24
    3f56:	21 f0       	breq	.+8      	; 0x3f60 <filesystem_get_data_startat+0x5c>
    3f58:	53 01       	movw	r10, r6
    3f5a:	ae 0c       	add	r10, r14
    3f5c:	bf 1c       	adc	r11, r15
    3f5e:	2e c0       	rjmp	.+92     	; 0x3fbc <filesystem_get_data_startat+0xb8>
    3f60:	01 15       	cp	r16, r1
    3f62:	11 05       	cpc	r17, r1
    3f64:	c9 f7       	brne	.-14     	; 0x3f58 <filesystem_get_data_startat+0x54>
    3f66:	9f ef       	ldi	r25, 0xFF	; 255
    3f68:	c9 16       	cp	r12, r25
    3f6a:	d1 04       	cpc	r13, r1
    3f6c:	a9 f3       	breq	.-22     	; 0x3f58 <filesystem_get_data_startat+0x54>
    3f6e:	a0 f3       	brcs	.-24     	; 0x3f58 <filesystem_get_data_startat+0x54>
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	c3 01       	movw	r24, r6
    3f74:	8e 0d       	add	r24, r14
    3f76:	9f 1d       	adc	r25, r15
    3f78:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <dataflash_read_n_to_buffer>
    3f7c:	e0 e0       	ldi	r30, 0x00	; 0
    3f7e:	ff ef       	ldi	r31, 0xFF	; 255
    3f80:	ce 0e       	add	r12, r30
    3f82:	df 1e       	adc	r13, r31
    3f84:	c1 14       	cp	r12, r1
    3f86:	d1 04       	cpc	r13, r1
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <filesystem_get_data_startat+0x88>
    3f8a:	44 c0       	rjmp	.+136    	; 0x4014 <filesystem_get_data_startat+0x110>
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	91 e0       	ldi	r25, 0x01	; 1
    3f90:	e8 0e       	add	r14, r24
    3f92:	f9 1e       	adc	r15, r25
    3f94:	15 c0       	rjmp	.+42     	; 0x3fc0 <filesystem_get_data_startat+0xbc>
    3f96:	60 e0       	ldi	r22, 0x00	; 0
    3f98:	c8 01       	movw	r24, r16
    3f9a:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3f9e:	f5 01       	movw	r30, r10
    3fa0:	81 93       	st	Z+, r24
    3fa2:	5f 01       	movw	r10, r30
    3fa4:	08 94       	sec
    3fa6:	c1 08       	sbc	r12, r1
    3fa8:	d1 08       	sbc	r13, r1
    3faa:	c1 14       	cp	r12, r1
    3fac:	d1 04       	cpc	r13, r1
    3fae:	91 f1       	breq	.+100    	; 0x4014 <filesystem_get_data_startat+0x110>
    3fb0:	08 94       	sec
    3fb2:	e1 1c       	adc	r14, r1
    3fb4:	f1 1c       	adc	r15, r1
    3fb6:	21 97       	sbiw	r28, 0x01	; 1
    3fb8:	0f 5f       	subi	r16, 0xFF	; 255
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	20 97       	sbiw	r28, 0x00	; 0
    3fbe:	59 f7       	brne	.-42     	; 0x3f96 <filesystem_get_data_startat+0x92>
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	84 e0       	ldi	r24, 0x04	; 4
    3fc4:	91 e0       	ldi	r25, 0x01	; 1
    3fc6:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3fca:	08 2f       	mov	r16, r24
    3fcc:	11 27       	eor	r17, r17
    3fce:	10 2f       	mov	r17, r16
    3fd0:	00 27       	eor	r16, r16
    3fd2:	f4 01       	movw	r30, r8
    3fd4:	11 83       	std	Z+1, r17	; 0x01
    3fd6:	00 83       	st	Z, r16
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	85 e0       	ldi	r24, 0x05	; 5
    3fdc:	91 e0       	ldi	r25, 0x01	; 1
    3fde:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3fe2:	99 27       	eor	r25, r25
    3fe4:	08 2b       	or	r16, r24
    3fe6:	19 2b       	or	r17, r25
    3fe8:	f4 01       	movw	r30, r8
    3fea:	11 83       	std	Z+1, r17	; 0x01
    3fec:	00 83       	st	Z, r16
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	86 e0       	ldi	r24, 0x06	; 6
    3ff2:	91 e0       	ldi	r25, 0x01	; 1
    3ff4:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    3ff8:	8e 3e       	cpi	r24, 0xEE	; 238
    3ffa:	19 f4       	brne	.+6      	; 0x4002 <filesystem_get_data_startat+0xfe>
    3ffc:	f4 01       	movw	r30, r8
    3ffe:	11 82       	std	Z+1, r1	; 0x01
    4000:	10 82       	st	Z, r1
    4002:	00 e0       	ldi	r16, 0x00	; 0
    4004:	10 e0       	ldi	r17, 0x00	; 0
    4006:	f4 01       	movw	r30, r8
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	09 f0       	breq	.+2      	; 0x4012 <filesystem_get_data_startat+0x10e>
    4010:	8c cf       	rjmp	.-232    	; 0x3f2a <filesystem_get_data_startat+0x26>
    4012:	02 c0       	rjmp	.+4      	; 0x4018 <filesystem_get_data_startat+0x114>
    4014:	ee 24       	eor	r14, r14
    4016:	ff 24       	eor	r15, r15
    4018:	c7 01       	movw	r24, r14
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	1f 91       	pop	r17
    4020:	0f 91       	pop	r16
    4022:	ff 90       	pop	r15
    4024:	ef 90       	pop	r14
    4026:	df 90       	pop	r13
    4028:	cf 90       	pop	r12
    402a:	bf 90       	pop	r11
    402c:	af 90       	pop	r10
    402e:	9f 90       	pop	r9
    4030:	8f 90       	pop	r8
    4032:	7f 90       	pop	r7
    4034:	6f 90       	pop	r6
    4036:	08 95       	ret

00004038 <filesystem_generate_index>:
    4038:	2f 92       	push	r2
    403a:	3f 92       	push	r3
    403c:	4f 92       	push	r4
    403e:	5f 92       	push	r5
    4040:	6f 92       	push	r6
    4042:	7f 92       	push	r7
    4044:	8f 92       	push	r8
    4046:	9f 92       	push	r9
    4048:	af 92       	push	r10
    404a:	bf 92       	push	r11
    404c:	cf 92       	push	r12
    404e:	df 92       	push	r13
    4050:	ef 92       	push	r14
    4052:	ff 92       	push	r15
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	c5 54       	subi	r28, 0x45	; 69
    4062:	d0 40       	sbci	r29, 0x00	; 0
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	24 96       	adiw	r28, 0x04	; 4
    4070:	9f af       	std	Y+63, r25	; 0x3f
    4072:	8e af       	std	Y+62, r24	; 0x3e
    4074:	24 97       	sbiw	r28, 0x04	; 4
    4076:	5b 01       	movw	r10, r22
    4078:	3a 01       	movw	r6, r20
    407a:	49 01       	movw	r8, r18
    407c:	22 96       	adiw	r28, 0x02	; 2
    407e:	1f ae       	std	Y+63, r1	; 0x3f
    4080:	1e ae       	std	Y+62, r1	; 0x3e
    4082:	22 97       	sbiw	r28, 0x02	; 2
    4084:	60 e0       	ldi	r22, 0x00	; 0
    4086:	22 96       	adiw	r28, 0x02	; 2
    4088:	8e ad       	ldd	r24, Y+62	; 0x3e
    408a:	9f ad       	ldd	r25, Y+63	; 0x3f
    408c:	22 97       	sbiw	r28, 0x02	; 2
    408e:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    4092:	1f ae       	std	Y+63, r1	; 0x3f
    4094:	1e ae       	std	Y+62, r1	; 0x3e
    4096:	22 24       	eor	r2, r2
    4098:	33 24       	eor	r3, r3
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	c1 01       	movw	r24, r2
    409e:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    40a2:	99 27       	eor	r25, r25
    40a4:	58 2e       	mov	r5, r24
    40a6:	44 24       	eor	r4, r4
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	c1 01       	movw	r24, r2
    40ac:	01 96       	adiw	r24, 0x01	; 1
    40ae:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    40b2:	99 27       	eor	r25, r25
    40b4:	48 2a       	or	r4, r24
    40b6:	59 2a       	or	r5, r25
    40b8:	41 14       	cp	r4, r1
    40ba:	51 04       	cpc	r5, r1
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <filesystem_generate_index+0x88>
    40be:	ff c0       	rjmp	.+510    	; 0x42be <filesystem_generate_index+0x286>
    40c0:	49 e2       	ldi	r20, 0x29	; 41
    40c2:	50 e0       	ldi	r21, 0x00	; 0
    40c4:	7e 01       	movw	r14, r28
    40c6:	08 94       	sec
    40c8:	e1 1c       	adc	r14, r1
    40ca:	f1 1c       	adc	r15, r1
    40cc:	b7 01       	movw	r22, r14
    40ce:	89 ef       	ldi	r24, 0xF9	; 249
    40d0:	95 e0       	ldi	r25, 0x05	; 5
    40d2:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    40d6:	4d e0       	ldi	r20, 0x0D	; 13
    40d8:	50 e0       	ldi	r21, 0x00	; 0
    40da:	be 01       	movw	r22, r28
    40dc:	66 5d       	subi	r22, 0xD6	; 214
    40de:	7f 4f       	sbci	r23, 0xFF	; 255
    40e0:	8b ee       	ldi	r24, 0xEB	; 235
    40e2:	95 e0       	ldi	r25, 0x05	; 5
    40e4:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    40e8:	d7 01       	movw	r26, r14
    40ea:	9e 01       	movw	r18, r28
    40ec:	29 5c       	subi	r18, 0xC9	; 201
    40ee:	3f 4f       	sbci	r19, 0xFF	; 255
    40f0:	24 96       	adiw	r28, 0x04	; 4
    40f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    40f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    40f6:	24 97       	sbiw	r28, 0x04	; 4
    40f8:	4a 0d       	add	r20, r10
    40fa:	5b 1d       	adc	r21, r11
    40fc:	f4 01       	movw	r30, r8
    40fe:	80 81       	ld	r24, Z
    4100:	91 81       	ldd	r25, Z+1	; 0x01
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	21 f0       	breq	.+8      	; 0x410e <filesystem_generate_index+0xd6>
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	80 83       	st	Z, r24
    410c:	11 c0       	rjmp	.+34     	; 0x4130 <filesystem_generate_index+0xf8>
    410e:	8c 91       	ld	r24, X
    4110:	fa 01       	movw	r30, r20
    4112:	80 83       	st	Z, r24
    4114:	f3 01       	movw	r30, r6
    4116:	80 81       	ld	r24, Z
    4118:	91 81       	ldd	r25, Z+1	; 0x01
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	91 83       	std	Z+1, r25	; 0x01
    411e:	80 83       	st	Z, r24
    4120:	89 2b       	or	r24, r25
    4122:	09 f4       	brne	.+2      	; 0x4126 <filesystem_generate_index+0xee>
    4124:	e8 c0       	rjmp	.+464    	; 0x42f6 <filesystem_generate_index+0x2be>
    4126:	08 94       	sec
    4128:	a1 1c       	adc	r10, r1
    412a:	b1 1c       	adc	r11, r1
    412c:	4f 5f       	subi	r20, 0xFF	; 255
    412e:	5f 4f       	sbci	r21, 0xFF	; 255
    4130:	11 96       	adiw	r26, 0x01	; 1
    4132:	a2 17       	cp	r26, r18
    4134:	b3 07       	cpc	r27, r19
    4136:	11 f7       	brne	.-60     	; 0x40fc <filesystem_generate_index+0xc4>
    4138:	6e ad       	ldd	r22, Y+62	; 0x3e
    413a:	7f ad       	ldd	r23, Y+63	; 0x3f
    413c:	6e 01       	movw	r12, r28
    413e:	08 94       	sec
    4140:	c1 1c       	adc	r12, r1
    4142:	d1 1c       	adc	r13, r1
    4144:	c6 01       	movw	r24, r12
    4146:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <filesystem_filename_to_buffer>
    414a:	18 2f       	mov	r17, r24
    414c:	b6 01       	movw	r22, r12
    414e:	68 0f       	add	r22, r24
    4150:	71 1d       	adc	r23, r1
    4152:	42 e0       	ldi	r20, 0x02	; 2
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	88 ee       	ldi	r24, 0xE8	; 232
    4158:	95 e0       	ldi	r25, 0x05	; 5
    415a:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    415e:	1e 5f       	subi	r17, 0xFE	; 254
    4160:	6e ad       	ldd	r22, Y+62	; 0x3e
    4162:	7f ad       	ldd	r23, Y+63	; 0x3f
    4164:	c6 01       	movw	r24, r12
    4166:	81 0f       	add	r24, r17
    4168:	91 1d       	adc	r25, r1
    416a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <filesystem_filename_to_buffer>
    416e:	01 2f       	mov	r16, r17
    4170:	08 0f       	add	r16, r24
    4172:	b6 01       	movw	r22, r12
    4174:	60 0f       	add	r22, r16
    4176:	71 1d       	adc	r23, r1
    4178:	44 e0       	ldi	r20, 0x04	; 4
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	83 ee       	ldi	r24, 0xE3	; 227
    417e:	95 e0       	ldi	r25, 0x05	; 5
    4180:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    4184:	0c 5f       	subi	r16, 0xFC	; 252
    4186:	f6 01       	movw	r30, r12
    4188:	e0 0f       	add	r30, r16
    418a:	f1 1d       	adc	r31, r1
    418c:	04 50       	subi	r16, 0x04	; 4
    418e:	80 e2       	ldi	r24, 0x20	; 32
    4190:	80 83       	st	Z, r24
    4192:	f0 2f       	mov	r31, r16
    4194:	fb 5f       	subi	r31, 0xFB	; 251
    4196:	fd af       	std	Y+61, r31	; 0x3d
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	c1 01       	movw	r24, r2
    419c:	43 96       	adiw	r24, 0x13	; 19
    419e:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    41a2:	28 2f       	mov	r18, r24
    41a4:	33 27       	eor	r19, r19
    41a6:	f2 2e       	mov	r15, r18
    41a8:	ee 24       	eor	r14, r14
    41aa:	60 e0       	ldi	r22, 0x00	; 0
    41ac:	c1 01       	movw	r24, r2
    41ae:	44 96       	adiw	r24, 0x14	; 20
    41b0:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    41b4:	b7 01       	movw	r22, r14
    41b6:	68 0f       	add	r22, r24
    41b8:	71 1d       	adc	r23, r1
    41ba:	76 95       	lsr	r23
    41bc:	67 95       	ror	r22
    41be:	76 95       	lsr	r23
    41c0:	67 95       	ror	r22
    41c2:	61 15       	cp	r22, r1
    41c4:	71 05       	cpc	r23, r1
    41c6:	11 f4       	brne	.+4      	; 0x41cc <filesystem_generate_index+0x194>
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	c6 01       	movw	r24, r12
    41ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    41d0:	83 0f       	add	r24, r19
    41d2:	91 1d       	adc	r25, r1
    41d4:	0e 94 d7 22 	call	0x45ae	; 0x45ae <string_uint16_to_buffer>
    41d8:	06 5f       	subi	r16, 0xF6	; 246
    41da:	b6 01       	movw	r22, r12
    41dc:	60 0f       	add	r22, r16
    41de:	71 1d       	adc	r23, r1
    41e0:	43 e0       	ldi	r20, 0x03	; 3
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	8f ed       	ldi	r24, 0xDF	; 223
    41e6:	95 e0       	ldi	r25, 0x05	; 5
    41e8:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	10 2f       	mov	r17, r16
    41f0:	1d 5f       	subi	r17, 0xFD	; 253
    41f2:	a6 01       	movw	r20, r12
    41f4:	24 96       	adiw	r28, 0x04	; 4
    41f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    41f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    41fa:	24 97       	sbiw	r28, 0x04	; 4
    41fc:	aa 0d       	add	r26, r10
    41fe:	bb 1d       	adc	r27, r11
    4200:	1c c0       	rjmp	.+56     	; 0x423a <filesystem_generate_index+0x202>
    4202:	f4 01       	movw	r30, r8
    4204:	80 81       	ld	r24, Z
    4206:	91 81       	ldd	r25, Z+1	; 0x01
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	21 f0       	breq	.+8      	; 0x4214 <filesystem_generate_index+0x1dc>
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
    4212:	12 c0       	rjmp	.+36     	; 0x4238 <filesystem_generate_index+0x200>
    4214:	fa 01       	movw	r30, r20
    4216:	e2 0f       	add	r30, r18
    4218:	f1 1d       	adc	r31, r1
    421a:	80 81       	ld	r24, Z
    421c:	8c 93       	st	X, r24
    421e:	f3 01       	movw	r30, r6
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	01 97       	sbiw	r24, 0x01	; 1
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	89 2b       	or	r24, r25
    422c:	09 f4       	brne	.+2      	; 0x4230 <filesystem_generate_index+0x1f8>
    422e:	63 c0       	rjmp	.+198    	; 0x42f6 <filesystem_generate_index+0x2be>
    4230:	08 94       	sec
    4232:	a1 1c       	adc	r10, r1
    4234:	b1 1c       	adc	r11, r1
    4236:	11 96       	adiw	r26, 0x01	; 1
    4238:	2f 5f       	subi	r18, 0xFF	; 255
    423a:	21 17       	cp	r18, r17
    423c:	11 f7       	brne	.-60     	; 0x4202 <filesystem_generate_index+0x1ca>
    423e:	42 e1       	ldi	r20, 0x12	; 18
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	7e 01       	movw	r14, r28
    4244:	08 94       	sec
    4246:	e1 1c       	adc	r14, r1
    4248:	f1 1c       	adc	r15, r1
    424a:	b7 01       	movw	r22, r14
    424c:	8c ec       	ldi	r24, 0xCC	; 204
    424e:	95 e0       	ldi	r25, 0x05	; 5
    4250:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    4254:	b2 01       	movw	r22, r4
    4256:	ce 01       	movw	r24, r28
    4258:	43 96       	adiw	r24, 0x13	; 19
    425a:	0e 94 d7 22 	call	0x45ae	; 0x45ae <string_uint16_to_buffer>
    425e:	40 e1       	ldi	r20, 0x10	; 16
    4260:	50 e0       	ldi	r21, 0x00	; 0
    4262:	be 01       	movw	r22, r28
    4264:	68 5e       	subi	r22, 0xE8	; 232
    4266:	7f 4f       	sbci	r23, 0xFF	; 255
    4268:	8b eb       	ldi	r24, 0xBB	; 187
    426a:	95 e0       	ldi	r25, 0x05	; 5
    426c:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    4270:	d7 01       	movw	r26, r14
    4272:	9e 01       	movw	r18, r28
    4274:	28 5d       	subi	r18, 0xD8	; 216
    4276:	3f 4f       	sbci	r19, 0xFF	; 255
    4278:	24 96       	adiw	r28, 0x04	; 4
    427a:	4e ad       	ldd	r20, Y+62	; 0x3e
    427c:	5f ad       	ldd	r21, Y+63	; 0x3f
    427e:	24 97       	sbiw	r28, 0x04	; 4
    4280:	4a 0d       	add	r20, r10
    4282:	5b 1d       	adc	r21, r11
    4284:	f4 01       	movw	r30, r8
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	00 97       	sbiw	r24, 0x00	; 0
    428c:	21 f0       	breq	.+8      	; 0x4296 <filesystem_generate_index+0x25e>
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	91 83       	std	Z+1, r25	; 0x01
    4292:	80 83       	st	Z, r24
    4294:	10 c0       	rjmp	.+32     	; 0x42b6 <filesystem_generate_index+0x27e>
    4296:	8c 91       	ld	r24, X
    4298:	fa 01       	movw	r30, r20
    429a:	80 83       	st	Z, r24
    429c:	f3 01       	movw	r30, r6
    429e:	80 81       	ld	r24, Z
    42a0:	91 81       	ldd	r25, Z+1	; 0x01
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	80 83       	st	Z, r24
    42a8:	89 2b       	or	r24, r25
    42aa:	29 f1       	breq	.+74     	; 0x42f6 <filesystem_generate_index+0x2be>
    42ac:	08 94       	sec
    42ae:	a1 1c       	adc	r10, r1
    42b0:	b1 1c       	adc	r11, r1
    42b2:	4f 5f       	subi	r20, 0xFF	; 255
    42b4:	5f 4f       	sbci	r21, 0xFF	; 255
    42b6:	11 96       	adiw	r26, 0x01	; 1
    42b8:	a2 17       	cp	r26, r18
    42ba:	b3 07       	cpc	r27, r19
    42bc:	19 f7       	brne	.-58     	; 0x4284 <filesystem_generate_index+0x24c>
    42be:	2e ad       	ldd	r18, Y+62	; 0x3e
    42c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    42c2:	2f 5f       	subi	r18, 0xFF	; 255
    42c4:	3f 4f       	sbci	r19, 0xFF	; 255
    42c6:	3f af       	std	Y+63, r19	; 0x3f
    42c8:	2e af       	std	Y+62, r18	; 0x3e
    42ca:	88 e1       	ldi	r24, 0x18	; 24
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	28 0e       	add	r2, r24
    42d0:	39 1e       	adc	r3, r25
    42d2:	98 e0       	ldi	r25, 0x08	; 8
    42d4:	29 16       	cp	r2, r25
    42d6:	91 e0       	ldi	r25, 0x01	; 1
    42d8:	39 06       	cpc	r3, r25
    42da:	09 f0       	breq	.+2      	; 0x42de <filesystem_generate_index+0x2a6>
    42dc:	de ce       	rjmp	.-580    	; 0x409a <filesystem_generate_index+0x62>
    42de:	22 96       	adiw	r28, 0x02	; 2
    42e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    42e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    42e4:	22 97       	sbiw	r28, 0x02	; 2
    42e6:	31 96       	adiw	r30, 0x01	; 1
    42e8:	22 96       	adiw	r28, 0x02	; 2
    42ea:	ff af       	std	Y+63, r31	; 0x3f
    42ec:	ee af       	std	Y+62, r30	; 0x3e
    42ee:	22 97       	sbiw	r28, 0x02	; 2
    42f0:	f2 97       	sbiw	r30, 0x32	; 50
    42f2:	19 f0       	breq	.+6      	; 0x42fa <filesystem_generate_index+0x2c2>
    42f4:	c7 ce       	rjmp	.-626    	; 0x4084 <filesystem_generate_index+0x4c>
    42f6:	aa 24       	eor	r10, r10
    42f8:	bb 24       	eor	r11, r11
    42fa:	c5 01       	movw	r24, r10
    42fc:	cb 5b       	subi	r28, 0xBB	; 187
    42fe:	df 4f       	sbci	r29, 0xFF	; 255
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	ff 90       	pop	r15
    4314:	ef 90       	pop	r14
    4316:	df 90       	pop	r13
    4318:	cf 90       	pop	r12
    431a:	bf 90       	pop	r11
    431c:	af 90       	pop	r10
    431e:	9f 90       	pop	r9
    4320:	8f 90       	pop	r8
    4322:	7f 90       	pop	r7
    4324:	6f 90       	pop	r6
    4326:	5f 90       	pop	r5
    4328:	4f 90       	pop	r4
    432a:	3f 90       	pop	r3
    432c:	2f 90       	pop	r2
    432e:	08 95       	ret

00004330 <lm75_init>:
#define LM75_ANSWER_DATA_NACK     0x58

volatile unsigned char lm75_state;
volatile unsigned int lm75_temp_tmp;
void lm75_init(void) {
    4330:	11 b8       	out	0x01, r1	; 1
	//initialize TWI clock: TWPS = 0 => prescaler = 1 
	#if defined(TWPS0)
		//has prescaler (mega128 & newer)
		TWSR = 0;//0;
	#endif
	//slow...
	TWBR = 20; //f(SCL) = F_CPU / (16+2*TWBR)*4^TWPS)
    4332:	84 e1       	ldi	r24, 0x14	; 20
    4334:	80 b9       	out	0x00, r24	; 0

	lm75_state = LM75_STATE_IDLE;
    4336:	10 92 ec 05 	sts	0x05EC, r1

	lm75_temp_tmp = (32<<1);
    433a:	80 e4       	ldi	r24, 0x40	; 64
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	90 93 ee 05 	sts	0x05EE, r25
    4342:	80 93 ed 05 	sts	0x05ED, r24
    4346:	08 95       	ret

00004348 <lm75_send_start>:
}

//do a nonblocking read. this function must be called
// ? times in order to read a value.
// returns 1 if new value measured, otherwise 0
unsigned char lm75_nonblocking_temp_read(unsigned char *data){
	unsigned char retval = 0;

	switch(lm75_state){
		//send start cmd & wait for TWI to send it:
		case(LM75_STATE_IDLE):
			lm75_send_start();
			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_START)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_DEVICE_ADDRESS;
			break;

		//send device address:
		case(LM75_STATE_DEVICE_ADDRESS):
			lm75_send_device_address(LM75_DEVICE_ID | LM75_WRITE);

			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_SLAVE_W_ACK)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_WRITE_CMD0;
			break;

		//send "set temp pointer" cmd
		case(LM75_STATE_WRITE_CMD0):
			lm75_send_byte(0x00);

			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_DATA_ACK)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_START2;
			break;

		//send a second start:
		case(LM75_STATE_START2):
			lm75_send_start();

			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_RESTART)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_DEVICE_ADDRESS2;
			break;

		//send address again:
		case(LM75_STATE_DEVICE_ADDRESS2):
			lm75_send_device_address(LM75_DEVICE_ID | LM75_READ);

			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_SLAVE_R_ACK)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_DATA_HI;
			break;

		//read data hi:
		case(LM75_STATE_DATA_HI):
			lm75_temp_tmp = (lm75_read()<<8);

			//check for error:
			if ((TWSR & 0xF8) != LM75_ANSWER_DATA_NACK)
				lm75_state = LM75_STATE_ERROR; 
			else
				lm75_state = LM75_STATE_DATA_LO;
			break;

		//read data lo:
		case(LM75_STATE_DATA_LO):
			lm75_temp_tmp |= lm75_read();

			//is temp negative ? -> convert
			if (lm75_temp_tmp&0x8000){
				//convert from 2s complement:
				lm75_temp_tmp = (0xFFFF-lm75_temp_tmp)|0x8000;
			}
			
			//tttt tttt t000 0000 -> 0000 000t tttt tttt
			lm75_temp_tmp = lm75_temp_tmp>>7;

			//now convert temperature to an 8 bit value.
			//-> we are interested in -32.0 to +96.5 degrees
			lm75_temp_tmp = lm75_temp_tmp + (32<<1);

			//limit range 1:
			if (lm75_temp_tmp < 0)
				lm75_temp_tmp = 0;

			//limit range 2:
			if (lm75_temp_tmp >= 255){
				lm75_temp_tmp = 255;
				return 0;
			}

/*
			//convert to temp vale. 205 = 20.5 °C
			//tttt tttt t000 0000 -> 0000 000t tttt tttt
			lm75_temp_tmp = lm75_temp_tmp>>7;

			//convert to temp vale. 205 = 20.5 °C
			(*data) = ((lm75_temp_tmp>>1)&0x007F)*10; 
	
			//add 0.5°C step:
			if (lm75_temp_tmp&0x0001)
				*data = (*data) + 5;
			//is temp negative ?
			if (lm75_temp_tmp&0x0100)
				*data = -(*data);
*/
			(*data) = (lm75_temp_tmp)&0xFF;
			//success:
			retval = 1;

			//dont check for error, next state is always stop:
		case(LM75_STATE_STOP):
		default:
			lm75_send_stop();
			lm75_state = LM75_STATE_IDLE; 
			break;
		case(LM75_STATE_ERROR):
			#if LM75_DEBUG
				softuart_puts_progmem("LM75: error in state ");
				softuart_put_uint8(lm75_state);
				softuart_puts_progmem(" TWSR=");
				softuart_put_uint8(TWSR);
				softuart_putnewline();
			#endif
			lm75_state = LM75_STATE_STOP;
	}

	return retval;
}

void lm75_send_start(){
    4348:	84 ea       	ldi	r24, 0xA4	; 164
    434a:	86 bf       	out	0x36, r24	; 54
	//start cond.
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
    434c:	06 b6       	in	r0, 0x36	; 54
    434e:	07 fe       	sbrs	r0, 7
    4350:	fd cf       	rjmp	.-6      	; 0x434c <lm75_send_start+0x4>
    4352:	08 95       	ret

00004354 <lm75_send_stop>:
}

void lm75_send_stop(){
    4354:	84 e9       	ldi	r24, 0x94	; 148
    4356:	86 bf       	out	0x36, r24	; 54
    4358:	08 95       	ret

0000435a <lm75_send_device_address>:
	//stop condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
}

void lm75_send_device_address(unsigned char addr){
    435a:	83 b9       	out	0x03, r24	; 3
	//send device address (including pge offset + write/read flag)
	TWDR = addr;
	TWCR = (1 << TWINT) | (1 << TWEN);
    435c:	84 e8       	ldi	r24, 0x84	; 132
    435e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
    4360:	06 b6       	in	r0, 0x36	; 54
    4362:	07 fe       	sbrs	r0, 7
    4364:	fd cf       	rjmp	.-6      	; 0x4360 <lm75_send_device_address+0x6>
    4366:	08 95       	ret

00004368 <lm75_send_byte>:
}

void lm75_send_byte(unsigned char byte){
    4368:	83 b9       	out	0x03, r24	; 3
	TWDR = byte;
	TWCR = (1 << TWINT) | (1 << TWEN);
    436a:	84 e8       	ldi	r24, 0x84	; 132
    436c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
    436e:	06 b6       	in	r0, 0x36	; 54
    4370:	07 fe       	sbrs	r0, 7
    4372:	fd cf       	rjmp	.-6      	; 0x436e <lm75_send_byte+0x6>
    4374:	08 95       	ret

00004376 <lm75_read>:
}

unsigned char lm75_read(){
    4376:	84 e8       	ldi	r24, 0x84	; 132
    4378:	86 bf       	out	0x36, r24	; 54
	//start read transmission
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
    437a:	06 b6       	in	r0, 0x36	; 54
    437c:	07 fe       	sbrs	r0, 7
    437e:	fd cf       	rjmp	.-6      	; 0x437a <lm75_read+0x4>
	return TWDR;
    4380:	83 b1       	in	r24, 0x03	; 3
}
    4382:	99 27       	eor	r25, r25
    4384:	08 95       	ret

00004386 <lm75_write>:

void lm75_write(unsigned char data){
    4386:	83 b9       	out	0x03, r24	; 3
	//load byte to data reg and start transmission
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);
    4388:	84 e8       	ldi	r24, 0x84	; 132
    438a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
    438c:	06 b6       	in	r0, 0x36	; 54
    438e:	07 fe       	sbrs	r0, 7
    4390:	fd cf       	rjmp	.-6      	; 0x438c <lm75_write+0x6>
    4392:	08 95       	ret

00004394 <lm75_nonblocking_temp_read>:
    4394:	fc 01       	movw	r30, r24
    4396:	80 91 ec 05 	lds	r24, 0x05EC
    439a:	83 30       	cpi	r24, 0x03	; 3
    439c:	c9 f1       	breq	.+114    	; 0x4410 <lm75_nonblocking_temp_read+0x7c>
    439e:	84 30       	cpi	r24, 0x04	; 4
    43a0:	28 f4       	brcc	.+10     	; 0x43ac <lm75_nonblocking_temp_read+0x18>
    43a2:	81 30       	cpi	r24, 0x01	; 1
    43a4:	e1 f0       	breq	.+56     	; 0x43de <lm75_nonblocking_temp_read+0x4a>
    43a6:	82 30       	cpi	r24, 0x02	; 2
    43a8:	38 f5       	brcc	.+78     	; 0x43f8 <lm75_nonblocking_temp_read+0x64>
    43aa:	0d c0       	rjmp	.+26     	; 0x43c6 <lm75_nonblocking_temp_read+0x32>
    43ac:	85 30       	cpi	r24, 0x05	; 5
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <lm75_nonblocking_temp_read+0x1e>
    43b0:	47 c0       	rjmp	.+142    	; 0x4440 <lm75_nonblocking_temp_read+0xac>
    43b2:	85 30       	cpi	r24, 0x05	; 5
    43b4:	c0 f1       	brcs	.+112    	; 0x4426 <lm75_nonblocking_temp_read+0x92>
    43b6:	86 30       	cpi	r24, 0x06	; 6
    43b8:	09 f4       	brne	.+2      	; 0x43bc <lm75_nonblocking_temp_read+0x28>
    43ba:	57 c0       	rjmp	.+174    	; 0x446a <lm75_nonblocking_temp_read+0xd6>
    43bc:	88 30       	cpi	r24, 0x08	; 8
    43be:	09 f4       	brne	.+2      	; 0x43c2 <lm75_nonblocking_temp_read+0x2e>
    43c0:	ac c0       	rjmp	.+344    	; 0x451a <lm75_nonblocking_temp_read+0x186>
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	a5 c0       	rjmp	.+330    	; 0x4510 <lm75_nonblocking_temp_read+0x17c>
    43c6:	84 ea       	ldi	r24, 0xA4	; 164
    43c8:	86 bf       	out	0x36, r24	; 54
    43ca:	06 b6       	in	r0, 0x36	; 54
    43cc:	07 fe       	sbrs	r0, 7
    43ce:	fd cf       	rjmp	.-6      	; 0x43ca <lm75_nonblocking_temp_read+0x36>
    43d0:	81 b1       	in	r24, 0x01	; 1
    43d2:	88 7f       	andi	r24, 0xF8	; 248
    43d4:	88 30       	cpi	r24, 0x08	; 8
    43d6:	09 f0       	breq	.+2      	; 0x43da <lm75_nonblocking_temp_read+0x46>
    43d8:	44 c0       	rjmp	.+136    	; 0x4462 <lm75_nonblocking_temp_read+0xce>
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	9f c0       	rjmp	.+318    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    43de:	80 e9       	ldi	r24, 0x90	; 144
    43e0:	83 b9       	out	0x03, r24	; 3
    43e2:	84 e8       	ldi	r24, 0x84	; 132
    43e4:	86 bf       	out	0x36, r24	; 54
    43e6:	06 b6       	in	r0, 0x36	; 54
    43e8:	07 fe       	sbrs	r0, 7
    43ea:	fd cf       	rjmp	.-6      	; 0x43e6 <lm75_nonblocking_temp_read+0x52>
    43ec:	81 b1       	in	r24, 0x01	; 1
    43ee:	88 7f       	andi	r24, 0xF8	; 248
    43f0:	88 31       	cpi	r24, 0x18	; 24
    43f2:	b9 f5       	brne	.+110    	; 0x4462 <lm75_nonblocking_temp_read+0xce>
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	92 c0       	rjmp	.+292    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    43f8:	13 b8       	out	0x03, r1	; 3
    43fa:	84 e8       	ldi	r24, 0x84	; 132
    43fc:	86 bf       	out	0x36, r24	; 54
    43fe:	06 b6       	in	r0, 0x36	; 54
    4400:	07 fe       	sbrs	r0, 7
    4402:	fd cf       	rjmp	.-6      	; 0x43fe <lm75_nonblocking_temp_read+0x6a>
    4404:	81 b1       	in	r24, 0x01	; 1
    4406:	88 7f       	andi	r24, 0xF8	; 248
    4408:	88 32       	cpi	r24, 0x28	; 40
    440a:	59 f5       	brne	.+86     	; 0x4462 <lm75_nonblocking_temp_read+0xce>
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	86 c0       	rjmp	.+268    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    4410:	84 ea       	ldi	r24, 0xA4	; 164
    4412:	86 bf       	out	0x36, r24	; 54
    4414:	06 b6       	in	r0, 0x36	; 54
    4416:	07 fe       	sbrs	r0, 7
    4418:	fd cf       	rjmp	.-6      	; 0x4414 <lm75_nonblocking_temp_read+0x80>
    441a:	81 b1       	in	r24, 0x01	; 1
    441c:	88 7f       	andi	r24, 0xF8	; 248
    441e:	80 31       	cpi	r24, 0x10	; 16
    4420:	01 f5       	brne	.+64     	; 0x4462 <lm75_nonblocking_temp_read+0xce>
    4422:	84 e0       	ldi	r24, 0x04	; 4
    4424:	7b c0       	rjmp	.+246    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    4426:	81 e9       	ldi	r24, 0x91	; 145
    4428:	83 b9       	out	0x03, r24	; 3
    442a:	84 e8       	ldi	r24, 0x84	; 132
    442c:	86 bf       	out	0x36, r24	; 54
    442e:	06 b6       	in	r0, 0x36	; 54
    4430:	07 fe       	sbrs	r0, 7
    4432:	fd cf       	rjmp	.-6      	; 0x442e <lm75_nonblocking_temp_read+0x9a>
    4434:	81 b1       	in	r24, 0x01	; 1
    4436:	88 7f       	andi	r24, 0xF8	; 248
    4438:	80 34       	cpi	r24, 0x40	; 64
    443a:	99 f4       	brne	.+38     	; 0x4462 <lm75_nonblocking_temp_read+0xce>
    443c:	85 e0       	ldi	r24, 0x05	; 5
    443e:	6e c0       	rjmp	.+220    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    4440:	84 e8       	ldi	r24, 0x84	; 132
    4442:	86 bf       	out	0x36, r24	; 54
    4444:	06 b6       	in	r0, 0x36	; 54
    4446:	07 fe       	sbrs	r0, 7
    4448:	fd cf       	rjmp	.-6      	; 0x4444 <lm75_nonblocking_temp_read+0xb0>
    444a:	83 b1       	in	r24, 0x03	; 3
    444c:	99 27       	eor	r25, r25
    444e:	98 2f       	mov	r25, r24
    4450:	88 27       	eor	r24, r24
    4452:	90 93 ee 05 	sts	0x05EE, r25
    4456:	80 93 ed 05 	sts	0x05ED, r24
    445a:	81 b1       	in	r24, 0x01	; 1
    445c:	88 7f       	andi	r24, 0xF8	; 248
    445e:	88 35       	cpi	r24, 0x58	; 88
    4460:	11 f0       	breq	.+4      	; 0x4466 <lm75_nonblocking_temp_read+0xd2>
    4462:	88 e0       	ldi	r24, 0x08	; 8
    4464:	5b c0       	rjmp	.+182    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    4466:	86 e0       	ldi	r24, 0x06	; 6
    4468:	59 c0       	rjmp	.+178    	; 0x451c <lm75_nonblocking_temp_read+0x188>
    446a:	20 91 ed 05 	lds	r18, 0x05ED
    446e:	30 91 ee 05 	lds	r19, 0x05EE
    4472:	84 e8       	ldi	r24, 0x84	; 132
    4474:	86 bf       	out	0x36, r24	; 54
    4476:	06 b6       	in	r0, 0x36	; 54
    4478:	07 fe       	sbrs	r0, 7
    447a:	fd cf       	rjmp	.-6      	; 0x4476 <lm75_nonblocking_temp_read+0xe2>
    447c:	83 b1       	in	r24, 0x03	; 3
    447e:	99 27       	eor	r25, r25
    4480:	28 2b       	or	r18, r24
    4482:	39 2b       	or	r19, r25
    4484:	30 93 ee 05 	sts	0x05EE, r19
    4488:	20 93 ed 05 	sts	0x05ED, r18
    448c:	80 91 ed 05 	lds	r24, 0x05ED
    4490:	90 91 ee 05 	lds	r25, 0x05EE
    4494:	97 ff       	sbrs	r25, 7
    4496:	0b c0       	rjmp	.+22     	; 0x44ae <lm75_nonblocking_temp_read+0x11a>
    4498:	80 91 ed 05 	lds	r24, 0x05ED
    449c:	90 91 ee 05 	lds	r25, 0x05EE
    44a0:	80 95       	com	r24
    44a2:	90 95       	com	r25
    44a4:	90 68       	ori	r25, 0x80	; 128
    44a6:	90 93 ee 05 	sts	0x05EE, r25
    44aa:	80 93 ed 05 	sts	0x05ED, r24
    44ae:	80 91 ed 05 	lds	r24, 0x05ED
    44b2:	90 91 ee 05 	lds	r25, 0x05EE
    44b6:	88 0f       	add	r24, r24
    44b8:	89 2f       	mov	r24, r25
    44ba:	88 1f       	adc	r24, r24
    44bc:	99 0b       	sbc	r25, r25
    44be:	91 95       	neg	r25
    44c0:	90 93 ee 05 	sts	0x05EE, r25
    44c4:	80 93 ed 05 	sts	0x05ED, r24
    44c8:	80 91 ed 05 	lds	r24, 0x05ED
    44cc:	90 91 ee 05 	lds	r25, 0x05EE
    44d0:	80 5c       	subi	r24, 0xC0	; 192
    44d2:	9f 4f       	sbci	r25, 0xFF	; 255
    44d4:	90 93 ee 05 	sts	0x05EE, r25
    44d8:	80 93 ed 05 	sts	0x05ED, r24
    44dc:	80 91 ed 05 	lds	r24, 0x05ED
    44e0:	90 91 ee 05 	lds	r25, 0x05EE
    44e4:	80 91 ed 05 	lds	r24, 0x05ED
    44e8:	90 91 ee 05 	lds	r25, 0x05EE
    44ec:	8f 3f       	cpi	r24, 0xFF	; 255
    44ee:	91 05       	cpc	r25, r1
    44f0:	48 f0       	brcs	.+18     	; 0x4504 <lm75_nonblocking_temp_read+0x170>
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	90 93 ee 05 	sts	0x05EE, r25
    44fa:	80 93 ed 05 	sts	0x05ED, r24
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	08 95       	ret
    4504:	80 91 ed 05 	lds	r24, 0x05ED
    4508:	90 91 ee 05 	lds	r25, 0x05EE
    450c:	80 83       	st	Z, r24
    450e:	91 e0       	ldi	r25, 0x01	; 1
    4510:	84 e9       	ldi	r24, 0x94	; 148
    4512:	86 bf       	out	0x36, r24	; 54
    4514:	10 92 ec 05 	sts	0x05EC, r1
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <lm75_nonblocking_temp_read+0x18e>
    451a:	87 e0       	ldi	r24, 0x07	; 7
    451c:	80 93 ec 05 	sts	0x05EC, r24
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	89 2f       	mov	r24, r25
    4524:	99 27       	eor	r25, r25
    4526:	08 95       	ret

00004528 <string_compare_progmem2>:
///WARNING: not tested!
//return 1 if both strings match
//return 0 otherwise
//string_compare_progmem is defined in string.h !
char string_compare_progmem2(PGM_P pointer, unsigned char *string, unsigned char check_eof){
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	ec 01       	movw	r28, r24
    452e:	db 01       	movw	r26, r22
    4530:	9c 01       	movw	r18, r24
    4532:	08 c0       	rjmp	.+16     	; 0x4544 <string_compare_progmem2+0x1c>
	unsigned char i=0;
	while(pgm_read_byte(pointer)){
		//softuart_putc(string[i]);
		//softuart_putc('=');
		//softuart_putc(pgm_read_byte(pointer));
		//softuart_putnewline();
		if (string[i] != pgm_read_byte(pointer))
    4534:	fd 01       	movw	r30, r26
    4536:	e8 0f       	add	r30, r24
    4538:	f1 1d       	adc	r31, r1
    453a:	80 81       	ld	r24, Z
    453c:	85 17       	cp	r24, r21
    453e:	69 f4       	brne	.+26     	; 0x455a <string_compare_progmem2+0x32>
			return 0;
		pointer++;
    4540:	2f 5f       	subi	r18, 0xFF	; 255
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	82 2f       	mov	r24, r18
    4546:	8c 1b       	sub	r24, r28
    4548:	f9 01       	movw	r30, r18
    454a:	54 91       	lpm	r21, Z
    454c:	55 23       	and	r21, r21
    454e:	91 f7       	brne	.-28     	; 0x4534 <string_compare_progmem2+0xc>
		i++;
	}
	//check end of both strings ?
	if (check_eof && (string[i] != 0))
    4550:	44 23       	and	r20, r20
    4552:	31 f4       	brne	.+12     	; 0x4560 <string_compare_progmem2+0x38>
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0d c0       	rjmp	.+26     	; 0x4574 <string_compare_progmem2+0x4c>
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0a c0       	rjmp	.+20     	; 0x4574 <string_compare_progmem2+0x4c>
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	30 e0       	ldi	r19, 0x00	; 0
    4564:	a8 0f       	add	r26, r24
    4566:	b1 1d       	adc	r27, r1
    4568:	8c 91       	ld	r24, X
    456a:	88 23       	and	r24, r24
    456c:	11 f4       	brne	.+4      	; 0x4572 <string_compare_progmem2+0x4a>
    456e:	21 e0       	ldi	r18, 0x01	; 1
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	c9 01       	movw	r24, r18
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	08 95       	ret

0000457a <string_compare_progmem_plen2>:
		return 0;
	else
		return 1;
}

char string_compare_progmem_plen2(PGM_P pointer, unsigned int plen, unsigned char *string){
    457a:	dc 01       	movw	r26, r24
    457c:	9b 01       	movw	r18, r22
    457e:	0c c0       	rjmp	.+24     	; 0x4598 <string_compare_progmem_plen2+0x1e>
	unsigned char i=0;
	while(plen--){
		//softuart_put_uint8(string[i]);
		//softuart_putc('=');
		//softuart_put_uint8(pgm_read_byte(pointer));
		//softuart_putnewline();
		if (string[i] != pgm_read_byte(pointer)){
    4580:	fd 01       	movw	r30, r26
    4582:	84 91       	lpm	r24, Z
    4584:	fa 01       	movw	r30, r20
    4586:	e9 0f       	add	r30, r25
    4588:	f1 1d       	adc	r31, r1
    458a:	90 81       	ld	r25, Z
    458c:	98 17       	cp	r25, r24
    458e:	19 f0       	breq	.+6      	; 0x4596 <string_compare_progmem_plen2+0x1c>
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	08 95       	ret
			//softuart_putc('-');
			//while(plen--)
			//	softuart_put_uint8(string[i++]);
			return 0;
		}
		pointer++;
    4596:	11 96       	adiw	r26, 0x01	; 1
    4598:	96 2f       	mov	r25, r22
    459a:	92 1b       	sub	r25, r18
    459c:	21 50       	subi	r18, 0x01	; 1
    459e:	30 40       	sbci	r19, 0x00	; 0
    45a0:	ff ef       	ldi	r31, 0xFF	; 255
    45a2:	2f 3f       	cpi	r18, 0xFF	; 255
    45a4:	3f 07       	cpc	r19, r31
    45a6:	61 f7       	brne	.-40     	; 0x4580 <string_compare_progmem_plen2+0x6>
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	90 e0       	ldi	r25, 0x00	; 0
		i++;
	}
	return 1;
}
    45ac:	08 95       	ret

000045ae <string_uint16_to_buffer>:

void string_uint16_to_buffer(unsigned char *buffer, unsigned int val){
    45ae:	0f 93       	push	r16
    45b0:	1f 93       	push	r17
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	8c 01       	movw	r16, r24
    45b8:	9b 01       	movw	r18, r22
    45ba:	60 e1       	ldi	r22, 0x10	; 16
    45bc:	77 e2       	ldi	r23, 0x27	; 39
    45be:	c0 e0       	ldi	r28, 0x00	; 0
    45c0:	d0 e0       	ldi	r29, 0x00	; 0
    45c2:	40 e3       	ldi	r20, 0x30	; 48
	unsigned int fac = 10000;
	unsigned char c=0;
	for(fac=10000; fac>0; fac = fac/10){
		buffer[c] = '0';
    45c4:	f8 01       	movw	r30, r16
    45c6:	ec 0f       	add	r30, r28
    45c8:	f1 1d       	adc	r31, r1
    45ca:	40 83       	st	Z, r20
    45cc:	05 c0       	rjmp	.+10     	; 0x45d8 <string_uint16_to_buffer+0x2a>
		while(val >= fac){
			val -= fac;
    45ce:	26 1b       	sub	r18, r22
    45d0:	37 0b       	sbc	r19, r23
			buffer[c]++;
    45d2:	80 81       	ld	r24, Z
    45d4:	8f 5f       	subi	r24, 0xFF	; 255
    45d6:	80 83       	st	Z, r24
    45d8:	26 17       	cp	r18, r22
    45da:	37 07       	cpc	r19, r23
    45dc:	c0 f7       	brcc	.-16     	; 0x45ce <string_uint16_to_buffer+0x20>
    45de:	cb 01       	movw	r24, r22
    45e0:	6a e0       	ldi	r22, 0x0A	; 10
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    45e8:	21 96       	adiw	r28, 0x01	; 1
    45ea:	c5 30       	cpi	r28, 0x05	; 5
    45ec:	d1 05       	cpc	r29, r1
    45ee:	51 f7       	brne	.-44     	; 0x45c4 <string_uint16_to_buffer+0x16>
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	1f 91       	pop	r17
    45f6:	0f 91       	pop	r16
    45f8:	08 95       	ret

000045fa <string_buffer_to_uint32>:
		}
		c++;
	}
}

unsigned long string_buffer_to_uint32(unsigned char *buffer){
    45fa:	af 92       	push	r10
    45fc:	bf 92       	push	r11
    45fe:	df 92       	push	r13
    4600:	ef 92       	push	r14
    4602:	ff 92       	push	r15
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	cf 93       	push	r28
    460a:	df 93       	push	r29
    460c:	ee 24       	eor	r14, r14
    460e:	ff 24       	eor	r15, r15
    4610:	87 01       	movw	r16, r14
    4612:	2a e0       	ldi	r18, 0x0A	; 10
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	ec 01       	movw	r28, r24
    461c:	86 e0       	ldi	r24, 0x06	; 6
    461e:	a8 2e       	mov	r10, r24
    4620:	b1 2c       	mov	r11, r1
    4622:	ac 0e       	add	r10, r28
    4624:	bd 1e       	adc	r11, r29
    4626:	11 c0       	rjmp	.+34     	; 0x464a <string_buffer_to_uint32+0x50>
	unsigned char c;
	unsigned long res;

	res = 0;
	c=0;
	while ((buffer[c]>='0') && (buffer[c] <= '9') && c<5){
		res = res * 10;
    4628:	c8 01       	movw	r24, r16
    462a:	b7 01       	movw	r22, r14
    462c:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <__mulsi3>
    4630:	7b 01       	movw	r14, r22
    4632:	8c 01       	movw	r16, r24
		res += (buffer[c]-'0');
    4634:	8d 2d       	mov	r24, r13
    4636:	99 27       	eor	r25, r25
    4638:	c0 97       	sbiw	r24, 0x30	; 48
    463a:	aa 27       	eor	r26, r26
    463c:	97 fd       	sbrc	r25, 7
    463e:	a0 95       	com	r26
    4640:	ba 2f       	mov	r27, r26
    4642:	e8 0e       	add	r14, r24
    4644:	f9 1e       	adc	r15, r25
    4646:	0a 1f       	adc	r16, r26
    4648:	1b 1f       	adc	r17, r27
    464a:	d8 80       	ld	r13, Y
    464c:	8d 2d       	mov	r24, r13
    464e:	80 53       	subi	r24, 0x30	; 48
    4650:	8a 30       	cpi	r24, 0x0A	; 10
    4652:	20 f4       	brcc	.+8      	; 0x465c <string_buffer_to_uint32+0x62>
    4654:	21 96       	adiw	r28, 0x01	; 1
    4656:	ca 15       	cp	r28, r10
    4658:	db 05       	cpc	r29, r11
    465a:	31 f7       	brne	.-52     	; 0x4628 <string_buffer_to_uint32+0x2e>
		c++;
	}
	return res;
}
    465c:	c8 01       	movw	r24, r16
    465e:	b7 01       	movw	r22, r14
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	1f 91       	pop	r17
    4666:	0f 91       	pop	r16
    4668:	ff 90       	pop	r15
    466a:	ef 90       	pop	r14
    466c:	df 90       	pop	r13
    466e:	bf 90       	pop	r11
    4670:	af 90       	pop	r10
    4672:	08 95       	ret

00004674 <string_buffer_to_uint16>:

unsigned int string_buffer_to_uint16(unsigned char *buffer){
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	fc 01       	movw	r30, r24
    467a:	ac 01       	movw	r20, r24
    467c:	4a 5f       	subi	r20, 0xFA	; 250
    467e:	5f 4f       	sbci	r21, 0xFF	; 255
    4680:	0e c0       	rjmp	.+28     	; 0x469e <string_buffer_to_uint16+0x2a>
	unsigned char c;
	unsigned int res;

	res = 0;
	c=0;
	while ((buffer[c]>='0') && (buffer[c] <= '9') && c<5){
		res = res * 10;
		res += (buffer[c]-'0');
    4682:	c9 01       	movw	r24, r18
    4684:	a3 e0       	ldi	r26, 0x03	; 3
    4686:	88 0f       	add	r24, r24
    4688:	99 1f       	adc	r25, r25
    468a:	aa 95       	dec	r26
    468c:	e1 f7       	brne	.-8      	; 0x4686 <string_buffer_to_uint16+0x12>
    468e:	22 0f       	add	r18, r18
    4690:	33 1f       	adc	r19, r19
    4692:	28 0f       	add	r18, r24
    4694:	39 1f       	adc	r19, r25
    4696:	26 0f       	add	r18, r22
    4698:	31 1d       	adc	r19, r1
    469a:	20 53       	subi	r18, 0x30	; 48
    469c:	30 40       	sbci	r19, 0x00	; 0
    469e:	60 81       	ld	r22, Z
    46a0:	86 2f       	mov	r24, r22
    46a2:	80 53       	subi	r24, 0x30	; 48
    46a4:	8a 30       	cpi	r24, 0x0A	; 10
    46a6:	20 f4       	brcc	.+8      	; 0x46b0 <string_buffer_to_uint16+0x3c>
    46a8:	31 96       	adiw	r30, 0x01	; 1
    46aa:	e4 17       	cp	r30, r20
    46ac:	f5 07       	cpc	r31, r21
    46ae:	49 f7       	brne	.-46     	; 0x4682 <string_buffer_to_uint16+0xe>
		c++;
	}
	return res;
}
    46b0:	c9 01       	movw	r24, r18
    46b2:	08 95       	ret

000046b4 <string_uint8_to_buffer>:

void string_uint8_to_buffer(unsigned char *buffer, unsigned char val){
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	ec 01       	movw	r28, r24
    46bc:	46 2f       	mov	r20, r22
    46be:	64 e6       	ldi	r22, 0x64	; 100
    46c0:	70 e0       	ldi	r23, 0x00	; 0
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	10 e3       	ldi	r17, 0x30	; 48
	unsigned int fac = 100;
	unsigned char c=0;
	for(fac=100; fac>0; fac = fac/10){
		buffer[c] = '0';
    46c8:	fe 01       	movw	r30, r28
    46ca:	e2 0f       	add	r30, r18
    46cc:	f1 1d       	adc	r31, r1
    46ce:	10 83       	st	Z, r17
    46d0:	04 c0       	rjmp	.+8      	; 0x46da <string_uint8_to_buffer+0x26>
		while(val >= fac){
    46d2:	46 1b       	sub	r20, r22
			val -= fac;
			buffer[c]++;
    46d4:	80 81       	ld	r24, Z
    46d6:	8f 5f       	subi	r24, 0xFF	; 255
    46d8:	80 83       	st	Z, r24
    46da:	84 2f       	mov	r24, r20
    46dc:	99 27       	eor	r25, r25
    46de:	86 17       	cp	r24, r22
    46e0:	97 07       	cpc	r25, r23
    46e2:	b8 f7       	brcc	.-18     	; 0x46d2 <string_uint8_to_buffer+0x1e>
    46e4:	cb 01       	movw	r24, r22
    46e6:	6a e0       	ldi	r22, 0x0A	; 10
    46e8:	70 e0       	ldi	r23, 0x00	; 0
    46ea:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    46ee:	2f 5f       	subi	r18, 0xFF	; 255
    46f0:	3f 4f       	sbci	r19, 0xFF	; 255
    46f2:	23 30       	cpi	r18, 0x03	; 3
    46f4:	31 05       	cpc	r19, r1
    46f6:	41 f7       	brne	.-48     	; 0x46c8 <string_uint8_to_buffer+0x14>
		}
		c++;
	}
	for (c=0; c<2; c++){
		if (buffer[c] == '0')
    46f8:	88 81       	ld	r24, Y
    46fa:	80 33       	cpi	r24, 0x30	; 48
    46fc:	31 f4       	brne	.+12     	; 0x470a <string_uint8_to_buffer+0x56>
			buffer[c] = ' ';
    46fe:	90 e2       	ldi	r25, 0x20	; 32
    4700:	98 83       	st	Y, r25
    4702:	89 81       	ldd	r24, Y+1	; 0x01
    4704:	80 33       	cpi	r24, 0x30	; 48
    4706:	09 f4       	brne	.+2      	; 0x470a <string_uint8_to_buffer+0x56>
    4708:	99 83       	std	Y+1, r25	; 0x01
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	1f 91       	pop	r17
    4710:	08 95       	ret

00004712 <string_uint8_to_buffer_02dez>:
		else
			break;
	}
}

void string_uint8_to_buffer_02dez(unsigned char *buffer, unsigned char val){
    4712:	fc 01       	movw	r30, r24
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <string_uint8_to_buffer_02dez+0x6>
	while(val>=100)
		val -= 100;
    4716:	64 56       	subi	r22, 0x64	; 100
    4718:	64 36       	cpi	r22, 0x64	; 100
    471a:	e8 f7       	brcc	.-6      	; 0x4716 <string_uint8_to_buffer_02dez+0x4>

	buffer[0] = '0';
    471c:	80 e3       	ldi	r24, 0x30	; 48
    471e:	03 c0       	rjmp	.+6      	; 0x4726 <string_uint8_to_buffer_02dez+0x14>
	while (val>= 10){
		val -= 10;
    4720:	6a 50       	subi	r22, 0x0A	; 10
		buffer[0]++;
    4722:	80 81       	ld	r24, Z
    4724:	8f 5f       	subi	r24, 0xFF	; 255
    4726:	80 83       	st	Z, r24
    4728:	6a 30       	cpi	r22, 0x0A	; 10
    472a:	d0 f7       	brcc	.-12     	; 0x4720 <string_uint8_to_buffer_02dez+0xe>
	}

	buffer[1] = '0' + val;
    472c:	60 5d       	subi	r22, 0xD0	; 208
    472e:	61 83       	std	Z+1, r22	; 0x01
    4730:	08 95       	ret

00004732 <string_progmem_to_buffer>:
}

void string_progmem_to_buffer(PGM_P pointer, unsigned char *buffer, unsigned int len){
    4732:	db 01       	movw	r26, r22
    4734:	04 c0       	rjmp	.+8      	; 0x473e <string_progmem_to_buffer+0xc>
	while(len--){
    4736:	fc 01       	movw	r30, r24
		*buffer++ = pgm_read_byte(pointer++);
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	e4 91       	lpm	r30, Z
    473c:	ed 93       	st	X+, r30
    473e:	41 50       	subi	r20, 0x01	; 1
    4740:	50 40       	sbci	r21, 0x00	; 0
    4742:	2f ef       	ldi	r18, 0xFF	; 255
    4744:	4f 3f       	cpi	r20, 0xFF	; 255
    4746:	52 07       	cpc	r21, r18
    4748:	b1 f7       	brne	.-20     	; 0x4736 <string_progmem_to_buffer+0x4>
    474a:	08 95       	ret

0000474c <string_search_progmem>:
    474c:	cf 92       	push	r12
    474e:	df 92       	push	r13
    4750:	ef 92       	push	r14
    4752:	ff 92       	push	r15
    4754:	0f 93       	push	r16
    4756:	1f 93       	push	r17
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	ec 01       	movw	r28, r24
    475e:	7b 01       	movw	r14, r22
    4760:	cc 24       	eor	r12, r12
    4762:	dd 24       	eor	r13, r13
    4764:	29 c0       	rjmp	.+82     	; 0x47b8 <string_search_progmem+0x6c>
    4766:	fe 01       	movw	r30, r28
    4768:	84 91       	lpm	r24, Z
    476a:	98 17       	cp	r25, r24
    476c:	f1 f4       	brne	.+60     	; 0x47aa <string_search_progmem+0x5e>
    476e:	21 96       	adiw	r28, 0x01	; 1
    4770:	fe 01       	movw	r30, r28
    4772:	84 91       	lpm	r24, Z
    4774:	21 97       	sbiw	r28, 0x01	; 1
    4776:	87 01       	movw	r16, r14
    4778:	0e c0       	rjmp	.+28     	; 0x4796 <string_search_progmem+0x4a>
    477a:	89 2f       	mov	r24, r25
    477c:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    4780:	8d e3       	ldi	r24, 0x3D	; 61
    4782:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    4786:	f8 01       	movw	r30, r16
    4788:	80 81       	ld	r24, Z
    478a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    478e:	0e 94 03 37 	call	0x6e06	; 0x6e06 <softuart_putnewline>
    4792:	fe 01       	movw	r30, r28
    4794:	84 91       	lpm	r24, Z
    4796:	88 23       	and	r24, r24
    4798:	11 f4       	brne	.+4      	; 0x479e <string_search_progmem+0x52>
    479a:	c6 01       	movw	r24, r12
    479c:	13 c0       	rjmp	.+38     	; 0x47c4 <string_search_progmem+0x78>
    479e:	f8 01       	movw	r30, r16
    47a0:	91 81       	ldd	r25, Z+1	; 0x01
    47a2:	0f 5f       	subi	r16, 0xFF	; 255
    47a4:	1f 4f       	sbci	r17, 0xFF	; 255
    47a6:	98 17       	cp	r25, r24
    47a8:	41 f3       	breq	.-48     	; 0x477a <string_search_progmem+0x2e>
    47aa:	08 94       	sec
    47ac:	c1 1c       	adc	r12, r1
    47ae:	d1 1c       	adc	r13, r1
    47b0:	21 96       	adiw	r28, 0x01	; 1
    47b2:	08 94       	sec
    47b4:	e1 1c       	adc	r14, r1
    47b6:	f1 1c       	adc	r15, r1
    47b8:	f7 01       	movw	r30, r14
    47ba:	90 81       	ld	r25, Z
    47bc:	99 23       	and	r25, r25
    47be:	99 f6       	brne	.-90     	; 0x4766 <string_search_progmem+0x1a>
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	9f ef       	ldi	r25, 0xFF	; 255
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	1f 91       	pop	r17
    47ca:	0f 91       	pop	r16
    47cc:	ff 90       	pop	r15
    47ce:	ef 90       	pop	r14
    47d0:	df 90       	pop	r13
    47d2:	cf 90       	pop	r12
    47d4:	08 95       	ret

000047d6 <plot_test>:
0x00, 0x20, 0x01, 0x02, 0x10, 0x01, 0x05, 0x0C, 0x01, 0x02, 0x00, 0x01,
0x00, 0x00, 0x01
};

void plot_test(){
    47d6:	08 95       	ret

000047d8 <plot_generate_bmp>:
	//for (unsigned int x=0; x<288; x++)
	//	eeprom_write_byte(&logger_temp_today[x], 130-x/4+80.0*sin((3.14*x)/30.0)/3.14);//  70+(x)%60);
	//plot_generate_bmp(&temp[0]);
}

unsigned int plot_generate_bmp(unsigned char *buffer, unsigned int datapos, unsigned int len, unsigned int streampos, unsigned char source){
    47d8:	2f 92       	push	r2
    47da:	3f 92       	push	r3
    47dc:	4f 92       	push	r4
    47de:	5f 92       	push	r5
    47e0:	6f 92       	push	r6
    47e2:	7f 92       	push	r7
    47e4:	8f 92       	push	r8
    47e6:	9f 92       	push	r9
    47e8:	af 92       	push	r10
    47ea:	bf 92       	push	r11
    47ec:	cf 92       	push	r12
    47ee:	df 92       	push	r13
    47f0:	ef 92       	push	r14
    47f2:	ff 92       	push	r15
    47f4:	0f 93       	push	r16
    47f6:	1f 93       	push	r17
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	28 97       	sbiw	r28, 0x08	; 8
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	f8 94       	cli
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	cd bf       	out	0x3d, r28	; 61
    480c:	3c 01       	movw	r6, r24
    480e:	7b 01       	movw	r14, r22
    4810:	6a 01       	movw	r12, r20
    4812:	0c 83       	std	Y+4, r16	; 0x04
	unsigned int x;
	unsigned char y;
	unsigned char out;
	unsigned char eedata;
	unsigned char hour_counter;
	unsigned char eedata_old;
	int yee;
	unsigned char eepos;
	unsigned char b;

	eedata = (32<<1);
	eedata_old = (32<<1);

	//step1: send bmp header (if requested)
	PGM_P header_ptr = PLOT_BMP_HEAD;
    4814:	e3 e2       	ldi	r30, 0x23	; 35
    4816:	f6 e0       	ldi	r31, 0x06	; 6
    4818:	dc 01       	movw	r26, r24
    481a:	a6 0f       	add	r26, r22
    481c:	b7 1f       	adc	r27, r23
    481e:	0f c0       	rjmp	.+30     	; 0x483e <plot_generate_bmp+0x66>

	for(x=streampos; x<PLOT_BMP_HEADER_LENGTH; x++){
		buffer[datapos++] = pgm_read_byte(header_ptr++);
    4820:	84 91       	lpm	r24, Z
    4822:	8d 93       	st	X+, r24
		streampos++;
		len--;
    4824:	08 94       	sec
    4826:	c1 08       	sbc	r12, r1
    4828:	d1 08       	sbc	r13, r1
		//no more data allowed
		if (len == 0)
    482a:	c1 14       	cp	r12, r1
    482c:	d1 04       	cpc	r13, r1
    482e:	09 f4       	brne	.+2      	; 0x4832 <plot_generate_bmp+0x5a>
    4830:	79 c1       	rjmp	.+754    	; 0x4b24 <plot_generate_bmp+0x34c>
    4832:	31 96       	adiw	r30, 0x01	; 1
    4834:	08 94       	sec
    4836:	e1 1c       	adc	r14, r1
    4838:	f1 1c       	adc	r15, r1
    483a:	2f 5f       	subi	r18, 0xFF	; 255
    483c:	3f 4f       	sbci	r19, 0xFF	; 255
    483e:	2e 33       	cpi	r18, 0x3E	; 62
    4840:	31 05       	cpc	r19, r1
    4842:	70 f3       	brcs	.-36     	; 0x4820 <plot_generate_bmp+0x48>
			return 0;
	}

	//step2 generate plot:
	//calculate position: streampos must be > PLOT_BMP_HEADER_LEN now...
	streampos -= PLOT_BMP_HEADER_LENGTH;
    4844:	2e 53       	subi	r18, 0x3E	; 62
    4846:	30 40       	sbci	r19, 0x00	; 0
    4848:	8f ef       	ldi	r24, 0xFF	; 255
    484a:	16 c0       	rjmp	.+44     	; 0x4878 <plot_generate_bmp+0xa0>
    484c:	d3 01       	movw	r26, r6
    484e:	ae 0d       	add	r26, r14
    4850:	bf 1d       	adc	r27, r15
    4852:	b7 01       	movw	r22, r14
    4854:	6f 5f       	subi	r22, 0xFF	; 255
    4856:	7f 4f       	sbci	r23, 0xFF	; 255

	//-> we must skip now #streampos bytes!
	
	//generate bottom border:
	for(x=streampos; x<PLOT_BMP_LINE_WIDTH/8; x++){
		if (x<24/8)
    4858:	23 30       	cpi	r18, 0x03	; 3
    485a:	31 05       	cpc	r19, r1
    485c:	10 f4       	brcc	.+4      	; 0x4862 <plot_generate_bmp+0x8a>
			buffer[datapos++] = 0x00;
    485e:	1c 92       	st	X, r1
    4860:	01 c0       	rjmp	.+2      	; 0x4864 <plot_generate_bmp+0x8c>
		else
			buffer[datapos++] = 0xFF;
    4862:	8c 93       	st	X, r24
    4864:	7b 01       	movw	r14, r22
		streampos++;

		len --;
    4866:	08 94       	sec
    4868:	c1 08       	sbc	r12, r1
    486a:	d1 08       	sbc	r13, r1
		//no more data allowed
		if (len == 0)
    486c:	c1 14       	cp	r12, r1
    486e:	d1 04       	cpc	r13, r1
    4870:	09 f4       	brne	.+2      	; 0x4874 <plot_generate_bmp+0x9c>
    4872:	58 c1       	rjmp	.+688    	; 0x4b24 <plot_generate_bmp+0x34c>
    4874:	2f 5f       	subi	r18, 0xFF	; 255
    4876:	3f 4f       	sbci	r19, 0xFF	; 255
    4878:	24 32       	cpi	r18, 0x24	; 36
    487a:	31 05       	cpc	r19, r1
    487c:	38 f3       	brcs	.-50     	; 0x484c <plot_generate_bmp+0x74>
			return 0;
	}
	
	//recalculate pos:
	streampos -= PLOT_BMP_LINE_WIDTH/8;
    487e:	ac ed       	ldi	r26, 0xDC	; 220
    4880:	aa 2e       	mov	r10, r26
    4882:	af ef       	ldi	r26, 0xFF	; 255
    4884:	ba 2e       	mov	r11, r26
    4886:	a2 0e       	add	r10, r18
    4888:	b3 1e       	adc	r11, r19

	//skip now #streampos bytes
	y = (streampos/(PLOT_BMP_LINE_WIDTH/8));
    488a:	c5 01       	movw	r24, r10
    488c:	64 e2       	ldi	r22, 0x24	; 36
    488e:	70 e0       	ldi	r23, 0x00	; 0
    4890:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    4894:	26 2f       	mov	r18, r22
	x = streampos - y*(PLOT_BMP_LINE_WIDTH/8);
    4896:	86 2e       	mov	r8, r22
    4898:	99 24       	eor	r9, r9
    489a:	84 e2       	ldi	r24, 0x24	; 36
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	ac 01       	movw	r20, r24
    48a0:	84 9e       	mul	r8, r20
    48a2:	c0 01       	movw	r24, r0
    48a4:	85 9e       	mul	r8, r21
    48a6:	90 0d       	add	r25, r0
    48a8:	94 9e       	mul	r9, r20
    48aa:	90 0d       	add	r25, r0
    48ac:	11 24       	eor	r1, r1
    48ae:	f5 01       	movw	r30, r10
    48b0:	e8 1b       	sub	r30, r24
    48b2:	f9 0b       	sbc	r31, r25
    48b4:	fe 83       	std	Y+6, r31	; 0x06
    48b6:	ed 83       	std	Y+5, r30	; 0x05

	//calculate start index of hour counter (draws vertical hour marks)
	hour_counter = 10;
	if (x>3)
    48b8:	34 97       	sbiw	r30, 0x04	; 4
    48ba:	18 f4       	brcc	.+6      	; 0x48c2 <plot_generate_bmp+0xea>
    48bc:	fa e0       	ldi	r31, 0x0A	; 10
    48be:	fb 83       	std	Y+3, r31	; 0x03
    48c0:	0f c0       	rjmp	.+30     	; 0x48e0 <plot_generate_bmp+0x108>
		hour_counter = 10 - (((x-3)*8) % 10);
    48c2:	8d 81       	ldd	r24, Y+5	; 0x05
    48c4:	9e 81       	ldd	r25, Y+6	; 0x06
    48c6:	f3 e0       	ldi	r31, 0x03	; 3
    48c8:	88 0f       	add	r24, r24
    48ca:	99 1f       	adc	r25, r25
    48cc:	fa 95       	dec	r31
    48ce:	e1 f7       	brne	.-8      	; 0x48c8 <plot_generate_bmp+0xf0>
    48d0:	48 97       	sbiw	r24, 0x18	; 24
    48d2:	6a e0       	ldi	r22, 0x0A	; 10
    48d4:	70 e0       	ldi	r23, 0x00	; 0
    48d6:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    48da:	4a e0       	ldi	r20, 0x0A	; 10
    48dc:	48 1b       	sub	r20, r24
    48de:	4b 83       	std	Y+3, r20	; 0x03
	
	

	//softuart_puts_progmem("y: ");softuart_put_uint16(y);
	//softuart_puts_progmem("x: ");softuart_put_uint16(8*x);

	PGM_P legend_ptr = PLOT_BMP_LEGEND;
    48e0:	01 e6       	ldi	r16, 0x61	; 97
    48e2:	16 e0       	ldi	r17, 0x06	; 6
	if (y != 0)
    48e4:	22 23       	and	r18, r18
    48e6:	39 f0       	breq	.+14     	; 0x48f6 <plot_generate_bmp+0x11e>
		legend_ptr += 3*(y+1);
    48e8:	84 01       	movw	r16, r8
    48ea:	00 0f       	add	r16, r16
    48ec:	11 1f       	adc	r17, r17
    48ee:	08 0d       	add	r16, r8
    48f0:	19 1d       	adc	r17, r9
    48f2:	0c 59       	subi	r16, 0x9C	; 156
    48f4:	19 4f       	sbci	r17, 0xF9	; 249

	if (x < 24/8){
    48f6:	8d 81       	ldd	r24, Y+5	; 0x05
    48f8:	9e 81       	ldd	r25, Y+6	; 0x06
    48fa:	83 30       	cpi	r24, 0x03	; 3
    48fc:	91 05       	cpc	r25, r1
    48fe:	10 f4       	brcc	.+4      	; 0x4904 <plot_generate_bmp+0x12c>
		legend_ptr += x;
    4900:	08 0f       	add	r16, r24
    4902:	19 1f       	adc	r17, r25
	}

	y = (135) - y;
    4904:	77 e8       	ldi	r23, 0x87	; 135
    4906:	87 2e       	mov	r8, r23
    4908:	82 1a       	sub	r8, r18

	unsigned char picpos_now = (clock[CLOCK_HOUR]*60+clock[CLOCK_MIN])/6;
    490a:	80 91 40 07 	lds	r24, 0x0740
    490e:	2c e3       	ldi	r18, 0x3C	; 60
    4910:	82 9f       	mul	r24, r18
    4912:	c0 01       	movw	r24, r0
    4914:	11 24       	eor	r1, r1
    4916:	20 91 41 07 	lds	r18, 0x0741
    491a:	82 0f       	add	r24, r18
    491c:	91 1d       	adc	r25, r1
    491e:	66 e0       	ldi	r22, 0x06	; 6
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__divmodhi4>
    4926:	46 2e       	mov	r4, r22
    4928:	9f ee       	ldi	r25, 0xEF	; 239
    492a:	96 17       	cp	r25, r22
    492c:	10 f4       	brcc	.+4      	; 0x4932 <plot_generate_bmp+0x15a>
    492e:	6f ee       	ldi	r22, 0xEF	; 239
    4930:	46 2e       	mov	r4, r22
    4932:	50 e4       	ldi	r21, 0x40	; 64
    4934:	95 2e       	mov	r9, r21
    4936:	30 e4       	ldi	r19, 0x40	; 64
    4938:	ca c0       	rjmp	.+404    	; 0x4ace <plot_generate_bmp+0x2f6>
	if (picpos_now > (23*60+59)/6)
		picpos_now = (23*60+59)/6;

	//main image:
	for( ; y>1; y--){
		//show data:
		if (y==92){
    493a:	ec e5       	ldi	r30, 0x5C	; 92
    493c:	8e 16       	cp	r8, r30
    493e:	21 f5       	brne	.+72     	; 0x4988 <plot_generate_bmp+0x1b0>
    4940:	d3 01       	movw	r26, r6
    4942:	ae 0d       	add	r26, r14
    4944:	bf 1d       	adc	r27, r15
    4946:	1b c0       	rjmp	.+54     	; 0x497e <plot_generate_bmp+0x1a6>
			for( ; x<PLOT_BMP_LINE_WIDTH/8; x++){
				if (x<(24/8)){
    4948:	4d 81       	ldd	r20, Y+5	; 0x05
    494a:	5e 81       	ldd	r21, Y+6	; 0x06
    494c:	43 30       	cpi	r20, 0x03	; 3
    494e:	51 05       	cpc	r21, r1
    4950:	10 f0       	brcs	.+4      	; 0x4956 <plot_generate_bmp+0x17e>
    4952:	8f ef       	ldi	r24, 0xFF	; 255
    4954:	04 c0       	rjmp	.+8      	; 0x495e <plot_generate_bmp+0x186>
					out = pgm_read_byte(legend_ptr++);
    4956:	f8 01       	movw	r30, r16
    4958:	0f 5f       	subi	r16, 0xFF	; 255
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	84 91       	lpm	r24, Z
				}else{
					out = 0xFF;
				}
				buffer[datapos++] = out;
    495e:	8d 93       	st	X+, r24
				len--;
    4960:	08 94       	sec
    4962:	c1 08       	sbc	r12, r1
    4964:	d1 08       	sbc	r13, r1
				
				if (len == 0)
    4966:	c1 14       	cp	r12, r1
    4968:	d1 04       	cpc	r13, r1
    496a:	09 f4       	brne	.+2      	; 0x496e <plot_generate_bmp+0x196>
    496c:	db c0       	rjmp	.+438    	; 0x4b24 <plot_generate_bmp+0x34c>
    496e:	08 94       	sec
    4970:	e1 1c       	adc	r14, r1
    4972:	f1 1c       	adc	r15, r1
    4974:	8d 81       	ldd	r24, Y+5	; 0x05
    4976:	9e 81       	ldd	r25, Y+6	; 0x06
    4978:	01 96       	adiw	r24, 0x01	; 1
    497a:	9e 83       	std	Y+6, r25	; 0x06
    497c:	8d 83       	std	Y+5, r24	; 0x05
    497e:	ed 81       	ldd	r30, Y+5	; 0x05
    4980:	fe 81       	ldd	r31, Y+6	; 0x06
    4982:	b4 97       	sbiw	r30, 0x24	; 36
    4984:	08 f3       	brcs	.-62     	; 0x4948 <plot_generate_bmp+0x170>
    4986:	a0 c0       	rjmp	.+320    	; 0x4ac8 <plot_generate_bmp+0x2f0>
					return 0;
			}
			x=0;
		}else{
			//y = 91 - (((ee-(32<<1))*4)/3)
			//-> (ee-(32<<1))*4/3 = (91 - y) <=> (3(91-y))/4 = (ee-(32<<1)) <=> (3(91-y))/4 + (32<<1) = ee
			yee = ((92 - y)*4)/3 + (32<<1);
    4988:	48 2d       	mov	r20, r8
    498a:	55 27       	eor	r21, r21
    498c:	5a 83       	std	Y+2, r21	; 0x02
    498e:	49 83       	std	Y+1, r20	; 0x01
    4990:	8c e5       	ldi	r24, 0x5C	; 92
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	84 1b       	sub	r24, r20
    4996:	95 0b       	sbc	r25, r21
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	88 0f       	add	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	63 e0       	ldi	r22, 0x03	; 3
    49a2:	70 e0       	ldi	r23, 0x00	; 0
    49a4:	0e 94 66 3d 	call	0x7acc	; 0x7acc <__divmodhi4>
    49a8:	60 5c       	subi	r22, 0xC0	; 192
    49aa:	7f 4f       	sbci	r23, 0xFF	; 255
			
			//data source ?!
			if (source == PLOT_SOURCE_EEPROM)
    49ac:	5c 81       	ldd	r21, Y+4	; 0x04
    49ae:	51 30       	cpi	r21, 0x01	; 1
    49b0:	99 f4       	brne	.+38     	; 0x49d8 <plot_generate_bmp+0x200>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    49b2:	a0 e0       	ldi	r26, 0x00	; 0
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__eeprom_read_byte_1C1D1E>
    49ba:	80 2d       	mov	r24, r0
				eedata_old = eeprom_read_byte(&logger_temp_today[0]); //EEPROM
    49bc:	38 2f       	mov	r19, r24
    49be:	13 01       	movw	r2, r6
    49c0:	2e 0c       	add	r2, r14
    49c2:	3f 1c       	adc	r3, r15
    49c4:	8d 81       	ldd	r24, Y+5	; 0x05
    49c6:	9e 81       	ldd	r25, Y+6	; 0x06
    49c8:	23 e0       	ldi	r18, 0x03	; 3
    49ca:	88 0f       	add	r24, r24
    49cc:	99 1f       	adc	r25, r25
    49ce:	2a 95       	dec	r18
    49d0:	e1 f7       	brne	.-8      	; 0x49ca <plot_generate_bmp+0x1f2>
    49d2:	58 2f       	mov	r21, r24
    49d4:	58 51       	subi	r21, 0x18	; 24
    49d6:	71 c0       	rjmp	.+226    	; 0x4aba <plot_generate_bmp+0x2e2>
			else
				eedata_old = eedata_old + 1; //DATAFLASH
    49d8:	3f 5f       	subi	r19, 0xFF	; 255
    49da:	f1 cf       	rjmp	.-30     	; 0x49be <plot_generate_bmp+0x1e6>

			for( ; x<PLOT_BMP_LINE_WIDTH/8; x++){
				if (x<(24/8)){
    49dc:	8d 81       	ldd	r24, Y+5	; 0x05
    49de:	9e 81       	ldd	r25, Y+6	; 0x06
    49e0:	03 97       	sbiw	r24, 0x03	; 3
    49e2:	28 f4       	brcc	.+10     	; 0x49ee <plot_generate_bmp+0x216>
					out = (pgm_read_byte(legend_ptr++));
    49e4:	f8 01       	movw	r30, r16
    49e6:	0f 5f       	subi	r16, 0xFF	; 255
    49e8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ea:	24 91       	lpm	r18, Z
    49ec:	50 c0       	rjmp	.+160    	; 0x4a8e <plot_generate_bmp+0x2b6>
    49ee:	45 2f       	mov	r20, r21
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	55 24       	eor	r5, r5
    49f4:	e9 81       	ldd	r30, Y+1	; 0x01
    49f6:	fa 81       	ldd	r31, Y+2	; 0x02
    49f8:	e3 70       	andi	r30, 0x03	; 3
    49fa:	f0 70       	andi	r31, 0x00	; 0
    49fc:	f8 87       	std	Y+8, r31	; 0x08
    49fe:	ef 83       	std	Y+7, r30	; 0x07
				}else{
					out = 0x00;
					
					for(b=0; b<8; b++){
						out = out<<1;
    4a00:	22 0f       	add	r18, r18
						eepos   = ((x-3)*8+b);

						//get data:
						if (source == PLOT_SOURCE_EEPROM){
    4a02:	fc 81       	ldd	r31, Y+4	; 0x04
    4a04:	f1 30       	cpi	r31, 0x01	; 1
    4a06:	49 f4       	brne	.+18     	; 0x4a1a <plot_generate_bmp+0x242>
    4a08:	a4 2f       	mov	r26, r20
    4a0a:	bb 27       	eor	r27, r27
    4a0c:	a0 50       	subi	r26, 0x00	; 0
    4a0e:	b0 40       	sbci	r27, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    4a10:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__eeprom_read_byte_1C1D1E>
    4a14:	80 2d       	mov	r24, r0
							eedata  = eeprom_read_byte(&logger_temp_today[eepos]); //EEPROM
    4a16:	98 2e       	mov	r9, r24
    4a18:	01 c0       	rjmp	.+2      	; 0x4a1c <plot_generate_bmp+0x244>
						}else{
							eedata = eedata + 1; //DATAFLASH -> add later! FIXME
    4a1a:	93 94       	inc	r9
    4a1c:	83 2f       	mov	r24, r19
    4a1e:	99 27       	eor	r25, r25
						}
						
						//bold line:
						//if ((yee+2 > (eedata&0xFF)) && (yee-2 < (eedata&0xFF)))
						//	out += 1;

						//filled:
						/*if (yee > (32<<1)){
							if (yee < (eedata&0xFF))
								out += 1;
						}else{
							if (yee > (eedata&0xFF))
								out += 1;
						}*/

						//connected line:
						if (eedata_old < eedata){
    4a20:	39 15       	cp	r19, r9
    4a22:	58 f4       	brcc	.+22     	; 0x4a3a <plot_generate_bmp+0x262>
							if ((yee > eedata_old-1) && (yee <= eedata+1))
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	86 17       	cp	r24, r22
    4a28:	97 07       	cpc	r25, r23
    4a2a:	94 f4       	brge	.+36     	; 0x4a50 <plot_generate_bmp+0x278>
    4a2c:	89 2d       	mov	r24, r9
    4a2e:	99 27       	eor	r25, r25
    4a30:	01 96       	adiw	r24, 0x01	; 1
    4a32:	86 17       	cp	r24, r22
    4a34:	97 07       	cpc	r25, r23
    4a36:	64 f0       	brlt	.+24     	; 0x4a50 <plot_generate_bmp+0x278>
    4a38:	0a c0       	rjmp	.+20     	; 0x4a4e <plot_generate_bmp+0x276>
								out |= 1;
						}else{
							if ((yee <= eedata_old+1) && (yee > eedata-1))
    4a3a:	01 96       	adiw	r24, 0x01	; 1
    4a3c:	86 17       	cp	r24, r22
    4a3e:	97 07       	cpc	r25, r23
    4a40:	3c f0       	brlt	.+14     	; 0x4a50 <plot_generate_bmp+0x278>
    4a42:	89 2d       	mov	r24, r9
    4a44:	99 27       	eor	r25, r25
    4a46:	01 97       	sbiw	r24, 0x01	; 1
    4a48:	86 17       	cp	r24, r22
    4a4a:	97 07       	cpc	r25, r23
    4a4c:	0c f4       	brge	.+2      	; 0x4a50 <plot_generate_bmp+0x278>
								out |= 1;
    4a4e:	21 60       	ori	r18, 0x01	; 1
						}
						eedata_old = eedata;

						//add now marker:
						if (eepos == picpos_now)
    4a50:	44 15       	cp	r20, r4
    4a52:	09 f4       	brne	.+2      	; 0x4a56 <plot_generate_bmp+0x27e>
							out |= 1;
    4a54:	21 60       	ori	r18, 0x01	; 1
						

						//draw a vertical line every 60min (=10px)
						hour_counter--;
    4a56:	8b 81       	ldd	r24, Y+3	; 0x03
    4a58:	81 50       	subi	r24, 0x01	; 1
    4a5a:	8b 83       	std	Y+3, r24	; 0x03
						if (!hour_counter){
    4a5c:	88 23       	and	r24, r24
    4a5e:	51 f4       	brne	.+20     	; 0x4a74 <plot_generate_bmp+0x29c>
							hour_counter = 10;
							if(!(y&0x03))
    4a60:	ef 81       	ldd	r30, Y+7	; 0x07
    4a62:	f8 85       	ldd	r31, Y+8	; 0x08
    4a64:	ef 2b       	or	r30, r31
    4a66:	19 f0       	breq	.+6      	; 0x4a6e <plot_generate_bmp+0x296>
    4a68:	fa e0       	ldi	r31, 0x0A	; 10
    4a6a:	fb 83       	std	Y+3, r31	; 0x03
    4a6c:	03 c0       	rjmp	.+6      	; 0x4a74 <plot_generate_bmp+0x29c>
								out|=1;
    4a6e:	21 60       	ori	r18, 0x01	; 1
    4a70:	8a e0       	ldi	r24, 0x0A	; 10
    4a72:	8b 83       	std	Y+3, r24	; 0x03
    4a74:	53 94       	inc	r5
    4a76:	4f 5f       	subi	r20, 0xFF	; 255
    4a78:	39 2d       	mov	r19, r9
    4a7a:	98 e0       	ldi	r25, 0x08	; 8
    4a7c:	59 16       	cp	r5, r25
    4a7e:	09 f0       	breq	.+2      	; 0x4a82 <plot_generate_bmp+0x2aa>
    4a80:	bf cf       	rjmp	.-130    	; 0x4a00 <plot_generate_bmp+0x228>
						}
					}

					//mark every 48 min (=8 pixel)
					//if(((x-3)&0x01) && (y&0x01))
					//	out|=1;
				}

				//right border
				if (x == ((PLOT_BMP_WIDTH/8)-1)) //BMP WITH !!! (=280, do not use 288 here)
    4a82:	ed 81       	ldd	r30, Y+5	; 0x05
    4a84:	fe 81       	ldd	r31, Y+6	; 0x06
    4a86:	b0 97       	sbiw	r30, 0x20	; 32
    4a88:	11 f4       	brne	.+4      	; 0x4a8e <plot_generate_bmp+0x2b6>
					out |= 1;
    4a8a:	21 60       	ori	r18, 0x01	; 1
    4a8c:	39 2d       	mov	r19, r9

				buffer[datapos++] = out;
    4a8e:	f1 01       	movw	r30, r2
    4a90:	21 93       	st	Z+, r18
    4a92:	1f 01       	movw	r2, r30
				len--;
    4a94:	08 94       	sec
    4a96:	c1 08       	sbc	r12, r1
    4a98:	d1 08       	sbc	r13, r1
    4a9a:	58 5f       	subi	r21, 0xF8	; 248
				streampos++;

				if (len == 0)
    4a9c:	c1 14       	cp	r12, r1
    4a9e:	d1 04       	cpc	r13, r1
    4aa0:	09 f4       	brne	.+2      	; 0x4aa4 <plot_generate_bmp+0x2cc>
    4aa2:	40 c0       	rjmp	.+128    	; 0x4b24 <plot_generate_bmp+0x34c>
    4aa4:	08 94       	sec
    4aa6:	e1 1c       	adc	r14, r1
    4aa8:	f1 1c       	adc	r15, r1
    4aaa:	08 94       	sec
    4aac:	a1 1c       	adc	r10, r1
    4aae:	b1 1c       	adc	r11, r1
    4ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	9e 83       	std	Y+6, r25	; 0x06
    4ab8:	8d 83       	std	Y+5, r24	; 0x05
    4aba:	ed 81       	ldd	r30, Y+5	; 0x05
    4abc:	fe 81       	ldd	r31, Y+6	; 0x06
    4abe:	b4 97       	sbiw	r30, 0x24	; 36
    4ac0:	08 f4       	brcc	.+2      	; 0x4ac4 <plot_generate_bmp+0x2ec>
    4ac2:	8c cf       	rjmp	.-232    	; 0x49dc <plot_generate_bmp+0x204>
    4ac4:	fa e0       	ldi	r31, 0x0A	; 10
    4ac6:	fb 83       	std	Y+3, r31	; 0x03
    4ac8:	8a 94       	dec	r8
    4aca:	1e 82       	std	Y+6, r1	; 0x06
    4acc:	1d 82       	std	Y+5, r1	; 0x05
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	48 15       	cp	r20, r8
    4ad2:	08 f4       	brcc	.+2      	; 0x4ad6 <plot_generate_bmp+0x2fe>
    4ad4:	32 cf       	rjmp	.-412    	; 0x493a <plot_generate_bmp+0x162>
					return 0;
			}
			x = 0;
			//restart hour_counter (draws vertical lines)
			hour_counter = 10;
		}
	}
	
	//recalc streampos:
	streampos  = streampos - 134*(PLOT_BMP_LINE_WIDTH/8);
	legend_ptr = PLOT_BMP_LEGEND + 134*3;
    4ad6:	83 ef       	ldi	r24, 0xF3	; 243
    4ad8:	97 e0       	ldi	r25, 0x07	; 7
    4ada:	95 01       	movw	r18, r10
    4adc:	28 5d       	subi	r18, 0xD8	; 216
    4ade:	32 41       	sbci	r19, 0x12	; 18
    4ae0:	4f ef       	ldi	r20, 0xFF	; 255
    4ae2:	1c c0       	rjmp	.+56     	; 0x4b1c <plot_generate_bmp+0x344>
    4ae4:	d3 01       	movw	r26, r6
    4ae6:	ae 0d       	add	r26, r14
    4ae8:	bf 1d       	adc	r27, r15
    4aea:	b7 01       	movw	r22, r14
    4aec:	6f 5f       	subi	r22, 0xFF	; 255
    4aee:	7f 4f       	sbci	r23, 0xFF	; 255

	//generate bottom border:
	for(x=streampos; x<PLOT_BMP_LINE_WIDTH/8; x++){
		if (x<24/8)
    4af0:	23 30       	cpi	r18, 0x03	; 3
    4af2:	31 05       	cpc	r19, r1
    4af4:	28 f4       	brcc	.+10     	; 0x4b00 <plot_generate_bmp+0x328>
			buffer[datapos++] = pgm_read_byte(legend_ptr++);
    4af6:	fc 01       	movw	r30, r24
    4af8:	01 96       	adiw	r24, 0x01	; 1
    4afa:	e4 91       	lpm	r30, Z
    4afc:	ec 93       	st	X, r30
    4afe:	01 c0       	rjmp	.+2      	; 0x4b02 <plot_generate_bmp+0x32a>
		else
			buffer[datapos++] = 0xFF;
    4b00:	4c 93       	st	X, r20
    4b02:	7b 01       	movw	r14, r22
		
		len--;
    4b04:	08 94       	sec
    4b06:	c1 08       	sbc	r12, r1
    4b08:	d1 08       	sbc	r13, r1
		if (len == 0){
    4b0a:	c1 14       	cp	r12, r1
    4b0c:	d1 04       	cpc	r13, r1
    4b0e:	21 f4       	brne	.+8      	; 0x4b18 <plot_generate_bmp+0x340>
			if (x<PLOT_BMP_LINE_WIDTH/8-1)
    4b10:	23 32       	cpi	r18, 0x23	; 35
    4b12:	31 05       	cpc	r19, r1
    4b14:	48 f4       	brcc	.+18     	; 0x4b28 <plot_generate_bmp+0x350>
    4b16:	06 c0       	rjmp	.+12     	; 0x4b24 <plot_generate_bmp+0x34c>
    4b18:	2f 5f       	subi	r18, 0xFF	; 255
    4b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b1c:	24 32       	cpi	r18, 0x24	; 36
    4b1e:	31 05       	cpc	r19, r1
    4b20:	08 f3       	brcs	.-62     	; 0x4ae4 <plot_generate_bmp+0x30c>
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <plot_generate_bmp+0x350>
    4b24:	ee 24       	eor	r14, r14
    4b26:	ff 24       	eor	r15, r15
				return 0;
			else 
				return datapos;
		}
	}

	return datapos;
}
    4b28:	c7 01       	movw	r24, r14
    4b2a:	28 96       	adiw	r28, 0x08	; 8
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	de bf       	out	0x3e, r29	; 62
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	cd bf       	out	0x3d, r28	; 61
    4b36:	df 91       	pop	r29
    4b38:	cf 91       	pop	r28
    4b3a:	1f 91       	pop	r17
    4b3c:	0f 91       	pop	r16
    4b3e:	ff 90       	pop	r15
    4b40:	ef 90       	pop	r14
    4b42:	df 90       	pop	r13
    4b44:	cf 90       	pop	r12
    4b46:	bf 90       	pop	r11
    4b48:	af 90       	pop	r10
    4b4a:	9f 90       	pop	r9
    4b4c:	8f 90       	pop	r8
    4b4e:	7f 90       	pop	r7
    4b50:	6f 90       	pop	r6
    4b52:	5f 90       	pop	r5
    4b54:	4f 90       	pop	r4
    4b56:	3f 90       	pop	r3
    4b58:	2f 90       	pop	r2
    4b5a:	08 95       	ret

00004b5c <httpd_cleanup_conn>:
	}
}

//initialise/cleanup http conn
void httpd_cleanup_conn(unsigned char i){
    4b5c:	8a 30       	cpi	r24, 0x0A	; 10
    4b5e:	90 f4       	brcc	.+36     	; 0x4b84 <httpd_cleanup_conn+0x28>
	if (i<TCP_SOCKET_COUNT){
		httpd_conn[i].state = HTTPD_STATE_IDLE;
    4b60:	99 27       	eor	r25, r25
    4b62:	88 0f       	add	r24, r24
    4b64:	99 1f       	adc	r25, r25
    4b66:	fc 01       	movw	r30, r24
    4b68:	23 e0       	ldi	r18, 0x03	; 3
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	2a 95       	dec	r18
    4b70:	e1 f7       	brne	.-8      	; 0x4b6a <httpd_cleanup_conn+0xe>
    4b72:	e8 1b       	sub	r30, r24
    4b74:	f9 0b       	sbc	r31, r25
    4b76:	e1 51       	subi	r30, 0x11	; 17
    4b78:	fa 4f       	sbci	r31, 0xFA	; 250
    4b7a:	10 82       	st	Z, r1
		httpd_conn[i].data_position = 0;
    4b7c:	12 86       	std	Z+10, r1	; 0x0a
    4b7e:	13 86       	std	Z+11, r1	; 0x0b
    4b80:	14 86       	std	Z+12, r1	; 0x0c
    4b82:	15 86       	std	Z+13, r1	; 0x0d
    4b84:	08 95       	ret

00004b86 <httpd_add_progmem_data_bin>:
	}
}

//return: how many data bytes should be transferred ?
unsigned int httpd_data_in(unsigned char *buffer, unsigned int datapos, unsigned int datalen, unsigned char socketnum, unsigned char *appstate){
	unsigned int pos;
	unsigned char file_name[8+6+1];
	unsigned char file_ext[3+1];
	unsigned char f;
	unsigned int ret;
	unsigned long offset;
	unsigned char authorized;

	pos = 0;

	#if HTTPD_DEBUG2
	softuart_puts_progmem("HTTP: SEQ-SEQ_OFFSET_DATA = ");
	softuart_put_uint16((tcp_sockets[socketnum].seq-httpd_conn[socketnum].seq_offset)&0xFFFF);
	softuart_puts_progmem("\r\n");
	#endif

  //initialise filename:
	for (f=0; f<8+6+1; f++)
		file_name[f] = 0;
	for (f=0; f<3+1; f++)
		file_ext[f] = 0;

	switch(httpd_conn[socketnum].state){
		case(HTTPD_STATE_IDLE):
		//case(HTTPD_STATE_IDLE_r):
		//case(HTTPD_STATE_IDLE_rn):
		//case(HTTPD_STATE_IDLE_rnr):
		//case(HTTPD_STATE_IDLE_rnrn):
			//new request, scan for GET/POST:
			if ((buffer[datapos + 0] == 'G') && 
			    (buffer[datapos + 1] == 'E') && 
			    (buffer[datapos + 2] == 'T')){
				//get request !
				pos = datapos + 3;
				
				f = 0;

				//find start of requested url
				while(buffer[pos] == ' ')
					pos++;

				while((buffer[pos] != ' ')  && (buffer[pos] != '\r') && (buffer[pos] != '\n')  && (buffer[pos] != '?') && (pos<datapos+datalen)){
					//read requested file,
					//read filename:
					file_name[f] = buffer[pos];

					//read file extension:
					/*if (!((file_ext[2] == ' ') || (file_ext[2] == '?'))){
						file_ext[0] = file_ext[1];
						file_ext[1] = file_ext[2];
						file_ext[2] = buffer[pos];
					}*/
					if (buffer[pos] == '.'){
						file_ext[0] = buffer[pos+1];
						file_ext[1] = buffer[pos+2];
						file_ext[2] = buffer[pos+3];
						file_name[f] = 0;
						break;
					}

					if (file_name[f] == '.')
						file_name[f] = 0;
					
					if (f<8+6)
						f++;
	
					//remove first /
					if (file_name[0] == '/')
						f=0;

					pos++;
				}
				//if (file_name[f]=='.')
				//	file_name[f] = 0;

				#if HTTPD_DEBUG
				softuart_puts_progmem("HTTP: GET <");				
				for(f=0;f<8+6 && file_name[f];f++)
					softuart_putc(file_name[f]);
				softuart_putc('.');
				for(f=0;f<3 && file_ext[f];f++)
					softuart_putc(file_ext[f]);
				softuart_puts_progmem(">.\r\n");
				#endif

				//set file id:
				if (file_name[0] == '/' || string_compare_progmem("index", file_name)){
					///show index
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_INDEX;
					file_ext[0] = 'h'; //->html
				}else if ( string_compare_progmem("site/cam", file_name)){
					///show webcam pic
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SITE_CAM;
				}else if ( string_compare_progmem("site/temp", file_name)){
					///show templog site
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SITE_TEMP;
				}else if ( string_compare_progmem("site/io", file_name)){
					///show io site
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SITE_IO;
				}else if ( string_compare_progmem("site/ficon", file_name)){
					///show file icon
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SITE_FILE_ICON_PIC;
				}else if ( string_compare_progmem("graph_0", file_name)){
					///show tempgraph (use eeprom data)
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_GRAPH0;
				}else if ( string_compare_progmem("fs/ls", file_name)){
					///show dataflash file list
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_FS_LS;
				}else if ( string_compare_progmem("cam/pic", file_name)){
					///show webcam image
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_CAM_PIC;
				}else if ( string_compare_progmem("cam/busy", file_name)){
					///show webcam busy image
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_CAM_BUSY;
				}else if ( string_compare_progmem("site/servo", file_name)){
					///show servo page
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SERVO_OK;
				}else if ( string_compare_progmem_noeof("servo_", file_name)){
					///show/set servo pos
					//parse number & set servopos (use uint16 parser)
					//if you want to show servopos without moving use servo_999.bmp for example
					if (string_buffer_to_uint16(&file_name[6])<256)
						servo_set_pos(string_buffer_to_uint16(&file_name[6])&0xFF);
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SERVO_POS;
				}else if ( string_compare_progmem_noeof("set/", file_name)){
					///show port image
					if(file_name[7] == '1'){
						httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SET_IO_1_PIC;
						port_set_portbit(file_name[4], file_name[5], 1);
					}else{
						httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_SET_IO_0_PIC;
						port_set_portbit(file_name[4], file_name[5], 0);
					}
				//deprecated
				//}else if ( string_compare_progmem_noeof("fs/f", file_name)){
				//	///show dataflash file with id given (fs/f1234 -> file 1234 !):
				//	httpd_conn[socketnum].file_id = 0xFF + string_buffer_to_uint16(&file_name[4]);
				}else if ( string_compare_progmem_noeof("fs/", file_name)){
					///try to find dataflash file with the given name:
					httpd_conn[socketnum].file_id = 0xFF + filesystem_search_file(&file_name[3], &file_ext[0]);
					httpd_conn[socketnum].data_ptr = 0; 
					if (httpd_conn[socketnum].file_id == 0xFF)
						httpd_conn[socketnum].file_id = HTTPD_STATE_IDLE; ///no file found !
				}else if ( string_compare_progmem("adm/up", file_name)){
					///show upload form
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_UP;
				}else if ( string_compare_progmem_noeof("adm/rm/", file_name)){
					///try to find dataflash file with the given name:
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_REMOVED;
				}else if ( string_compare_progmem("adm/mkfs", file_name)){
					///format filesystem question
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_MKFS;
				}else if ( string_compare_progmem("adm/mkfs2", file_name)){
					///format filesystem exec!
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_MKFS2;
				}else{
					///FILE not found -> 404 err
					httpd_conn[socketnum].file_id = HTTPD_STATE_IDLE;
				}
				//initialise substate
				httpd_conn[socketnum].substate = HTTPD_SUBSTATE_NONE;
			}else if ((buffer[datapos + 0] == 'P') && 
					(buffer[datapos + 1] == 'O') && 
					(buffer[datapos + 2] == 'S') && 
					(buffer[datapos + 3] == 'T')){
				//QUICK HACK (TEST!)
				httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_POST;

				string_progmem_to_buffer(PSTR("adm/"), file_name,4);

				//initialise substate
				httpd_conn[socketnum].substate = HTTPD_SUBSTATE_NONE;
			}

			//find the content length!
			//use a quick & dirty method for this !!!
			//-> we search for *th: <number> 
			//   (instead of content-length:)
			//
			// we do this because to minimize the following problem:
			// clen detection DOES NOT work when the header is 
			// split into multiple packets & the packetborder
			// is anywhere between th: <number> !! FIXME!
			if (httpd_conn[socketnum].file_id == 0xFE){
				pos = datapos;
				//pos+4 because len("th: ") is 4 (fixme: number might be outside packetlen!)
				while (pos+4<datapos+datalen){
					if (string_compare_progmem_noeof("th: ", &buffer[pos])){
						//next is the number ! 
						//parse it !
						httpd_conn[socketnum].data_position = string_buffer_to_uint32(&buffer[pos+4]);
						break;
					}
					pos++;
				}
			}

			///search for authorization key
			authorized = 0;
			if (string_compare_progmem_noeof("adm/", file_name)){
				//accessing admin zone, search for auth!
				#if HTTPD_DEBUG_AUTH
				softuart_puts_progmem("HTTPD: auth required! [");
				#endif
				pos = datapos;
				
				while(pos<datapos+datalen){
					//speedup, check first letter
					if (buffer[pos] == 'A'){
						//if match, call whole function match
						if (string_compare_progmem_noeof("Authorization: Basic ", &buffer[pos])){
							//got it ! now buf[pos+21]-... has auth string!
							unsigned char len;
							unsigned char *pwbuff = &buffer[pos+21];

							//maximum pw len 100
							for(len=0; len < 100; len++){ 
								//check buf < '0' is ok because of base64... \r\n & space are smaller ;)
								if (pwbuff[len]<'0')
									break;
								#if HTTPD_DEBUG_AUTH
								softuart_putc(pwbuff[len]);
								#endif
							}
							//len--;
							
							//base64 decode, after this the decoded string is in buffer[pos+21]...
							base64_decode(&pwbuff[0], len);

							#if HTTPD_DEBUG_AUTH
							softuart_puts_progmem("], decoded [");
							for(len=0; len < 100; len++){
								if (pwbuff[len]==0)	
									break;
								softuart_putc(pwbuff[len]);
							}
							softuart_puts_progmem("] auth? ");
							#endif

							if (string_compare_progmem(HTTPD_ADMIN_AUTH_LOGIN":"HTTPD_ADMIN_AUTH_PASS, &pwbuff[0])){
								//auth passed !!
								authorized = 1;
							}
							#if HTTPD_DEBUG_AUTH
							softuart_put_uint8(authorized);
							softuart_putnewline();
							#endif

							break;
						}
					}
					pos++;
				}
				//check if there was a file remove request
				if (authorized && (httpd_conn[socketnum].file_id == HTTPD_STATE_FILE_REMOVED)){
					httpd_conn[socketnum].file_id = 0xFF + string_buffer_to_uint16(&file_name[7]);
					if (httpd_conn[socketnum].file_id != 0xFF){
						//found ! -> remove file !
						filesystem_delete_file(httpd_conn[socketnum].file_id - 0xFF);
						httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_REMOVED;
					}
				}
			}
			
			//detect \r\n\r\n
			unsigned int inpos = datapos;
			unsigned int inpos_old =0;
			while( inpos<(datapos+datalen)){
				if (buffer[inpos] == '\r'){
					if ( ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_NONE) || 
							 ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_RN) ){
							httpd_conn[socketnum].substate++;
					}else{
							httpd_conn[socketnum].substate = (httpd_conn[socketnum].substate & 0xF8) | HTTPD_SUBSTATE_NONE;
					}
				}else if (buffer[inpos] == '\n'){
					if ( ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_R) || 
							 ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_RNR) ){
							httpd_conn[socketnum].substate++;
					}else{
							httpd_conn[socketnum].substate = (httpd_conn[socketnum].substate & 0xF8) | HTTPD_SUBSTATE_NONE;
					}
				}else{
					httpd_conn[socketnum].substate = (httpd_conn[socketnum].substate & 0xF8) | HTTPD_SUBSTATE_NONE;
				}
				if ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_RNRN){
					if (httpd_conn[socketnum].file_id == HTTPD_STATE_FILE_POST){
						//file_name + 2nd rnrn found -> ready
						if (httpd_conn[socketnum].substate & HTTPD_SUBSTATE_POST_FN_OK)
							break;

						inpos_old = inpos;
						//we need to grab filename now & wait for another \r\n\r\n
						while(inpos<(datapos+datalen)){
							///WARNING: this only works if the packet with filename is not
							///splitted into two packets !!
							if (string_compare_progmem_noeof("filename=\"", &buffer[inpos])){
								//now the filename starts at inpos+strlen(filename=")
								
								//try to find the filename extension:
								unsigned int fextpos = inpos + 10;
								while((buffer[fextpos] != '.') &&(inpos<(datapos+datalen)))
									fextpos++;
						
								//terminate filename (replace .EXT by \0EXT)
								buffer[fextpos] = '\0';

								#if HTTPD_DEBUG
								softuart_puts_progmem("HTTP: POST ");
								softuart_putnewline();
								#endif 
								//now open the file
								filesystem_open_file_wr(&buffer[inpos+10],&buffer[fextpos+1]);
								break;
							}
							inpos++;
						}
						//now find the next \r\n\r\n
						httpd_conn[socketnum].substate = HTTPD_SUBSTATE_POST_FN_OK | HTTPD_SUBSTATE_NONE;
					}else{
						//normal GET cmd, return data after \r\n\r\n
						break;
					}
				}
				inpos++;
			}


			///handle http authentication for everything in /adm/:
			//we check this only for the first \r\n\r\n otherwise we get problems
			//with the http post stuff. maybe move the second rnrn detection to a seperate
			//post substate!
			if (!authorized && string_compare_progmem_noeof("adm/", file_name) ){
						//authorization required!
						#if HTTPD_DEBUG_AUTH
						softuart_puts_progmem("HTTPD: auth failed!");
						softuart_putnewline();
						#endif

						//not authorzed, send auth request & failure message
						//when this is an http post, this is not correct...
						//but simply ignore this, no normal user would be unauthorized & try to upload (he cant see up.htm)
						//so this should only happens to a hacker ;)
						pos = TCP_POS_TXDATA;
						pos = httpd_add_progmem_data(HTTPD_RESPONSE_401,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
						httpd_conn[socketnum].state = HTTPD_STATE_FINISHED;
						*appstate = TCP_APPSTATE_HAS_TXDATA;
						return (pos-TCP_POS_TXDATA);
			}
			
			if ((httpd_conn[socketnum].substate & 0x07) == HTTPD_SUBSTATE_RNRN){
				//request end, send data !
				pos = TCP_POS_TXDATA;

				//POST test hack
				if (httpd_conn[socketnum].file_id == HTTPD_STATE_FILE_POST){
					//wait for filename detection!
					if (httpd_conn[socketnum].substate  == HTTPD_SUBSTATE_RNRN)
						break; 

					if (httpd_conn[socketnum].substate & HTTPD_SUBSTATE_POST_FN_OK){
						//filename detected !
					}else{
						#if HTTPD_DEBUG
						softuart_puts_progmem("HTTP: POST (unknown filename)");
						softuart_putnewline();
						#endif
						//open default file
						filesystem_open_file_wr("upload","txt");
					}

					inpos++;
					filesystem_write_data(&buffer[inpos], datalen-(inpos-datapos),0);
					
					httpd_conn[socketnum].state = HTTPD_STATE_POST;
					httpd_conn[socketnum].data_position -= datalen-(inpos_old-datapos)-1;

					//set appstate & exit here !!
					*appstate = TCP_APPSTATE_EMPTYACK;
					return (pos-TCP_POS_TXDATA);
				}else{
					//add ok
					pos = httpd_add_progmem_data(HTTPD_RESPONSE_OK,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
					
					//add content type, detects jpg,png,bmp,gif,html -> default is html!
					//we need to check first char only !!
					switch(file_ext[0]){
						case ('j'): //if (string_compare_progmem_noeof("jpg", file_ext))
							pos = httpd_add_progmem_data(HTTPD_CTYPE_JPG,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
							break;

						case ('p'): //else if (string_compare_progmem_noeof("png", file_ext))
							pos = httpd_add_progmem_data(HTTPD_CTYPE_PNG,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
							break;

						case ('b'): //else if (string_compare_progmem_noeof("bmp", file_ext))
							pos = httpd_add_progmem_data(HTTPD_CTYPE_BMP,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
							break;

						case ('g'): //else if (string_compare_progmem_noeof("gif", file_ext))
							pos = httpd_add_progmem_data(HTTPD_CTYPE_GIF,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
							break;

						default: //htm!
							pos = httpd_add_progmem_data(HTTPD_CTYPE_HTML,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
							break;
					}
				
					//add \r\n\r\n
					pos = httpd_add_progmem_data(HTTPD_RNRN,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
					*appstate = TCP_APPSTATE_HAS_TXDATA;

					//http conn active now -> send data
					httpd_conn[socketnum].state      = HTTPD_STATE_ACTIVE;

					//store seq offset!
					httpd_conn[socketnum].seq_offset = pos - datapos + 1;

					return (pos-TCP_POS_TXDATA);
				}
			}

			*appstate = TCP_APPSTATE_EMPTYACK;
			return (0);
			break;

		case(HTTPD_STATE_ACTIVE):
			#if HTTPD_DEBUG2
			softuart_put_uint16(httpd_conn[socketnum].seq_offset);
			#endif
			offset = (tcp_sockets[socketnum].seq - httpd_conn[socketnum].seq_offset);
			*appstate = TCP_APPSTATE_HAS_TXDATA;

			if (httpd_conn[socketnum].file_id <= 0xFF){
				///this file is not stored on dataflash
				switch ((httpd_conn[socketnum].file_id)&0xFF){
					///index.html
					case(HTTPD_STATE_FILE_INDEX):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_START_HTML,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA); 
						break;

/*
					///graph0
					case(HTTPD_STATE_FILE_GRAPH0):
						ret = plot_generate_bmp(buffer, TCP_POS_TXDATA, NIC_BUFFERSIZE-TCP_POS_TXDATA, offset, PLOT_SOURCE_EEPROM);
*/						break;

					///upload test
					case(HTTPD_STATE_FILE_UP):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_UPLOAD_HTML,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///list	fs files
					case(HTTPD_STATE_FILE_FS_LS):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_FSLS_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///upload finished, up ok
					case(HTTPD_STATE_FILE_UP_DONE):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_UPOK_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///upload finished, up err
					case(HTTPD_STATE_FILE_UP_ERR):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_UPERR_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///removed fs file
					case(HTTPD_STATE_FILE_REMOVED):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_RMOK_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///format filesystem question
					case(HTTPD_STATE_FILE_MKFS):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML, HTTPD_FILE_SITE_MKFS_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///do format
					case(HTTPD_STATE_FILE_MKFS2):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML, HTTPD_FILE_SITE_MKFS2_HTML,buffer,TCP_POS_TXDATA, offset, 	NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///cam/pic (webcam picture)
					case(HTTPD_STATE_FILE_CAM_PIC):
						ret = mca25_grab_data(&buffer[TCP_POS_TXDATA], NIC_BUFFERSIZE-TCP_POS_TXDATA, offset, socketnum);
						if (ret == 0xFFFE){
							//cam is busy -> show busy jpg !
							ret = httpd_add_progmem_data_bin(HTTPD_CAM_BUSY_JPG,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA, sizeof(HTTPD_CAM_BUSY_JPG));
							httpd_conn[socketnum].file_id = 6;
						}else if (ret == 0xFFFF){
							ret = 1;
						}
						//add offset
						if (ret != 0)
							ret = TCP_POS_TXDATA + ret;
						
						break;

					///cam/busy  ->  cam busy jpg
					case(HTTPD_STATE_FILE_CAM_BUSY):
						ret = httpd_add_progmem_data_bin(HTTPD_CAM_BUSY_JPG,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA, sizeof(HTTPD_CAM_BUSY_JPG));
						break;

					///site/cam  ->  include cam html code
					case(HTTPD_STATE_FILE_SITE_CAM):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_CAM_HTML,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///site/temp  ->  include templog
					case(HTTPD_STATE_FILE_SITE_TEMP):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_TEMP_HTML,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///site/io  ->  port io site
					case(HTTPD_STATE_FILE_SITE_IO):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_IO_HTML,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///set/xx_1 -> show green io pic
					case(HTTPD_STATE_FILE_SET_IO_1_PIC):
						ret = httpd_add_progmem_data_bin(HTTPD_BUTTON_GREEN,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA, sizeof(HTTPD_BUTTON_GREEN));
						break;

					///set/xx_0 -> show red io pic
					case(HTTPD_STATE_FILE_SET_IO_0_PIC):
						ret = httpd_add_progmem_data_bin(HTTPD_BUTTON_RED,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA, sizeof(HTTPD_BUTTON_RED));
						break;

					///servo moving
					case(HTTPD_STATE_FILE_SERVO_OK):
						ret = httpd_add_progmem_data(HTTPD_FILE_INDEX_HTML,HTTPD_FILE_SITE_SERVO_OK,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;

					///get/set servo pos
					case(HTTPD_STATE_FILE_SERVO_POS):
						ret = servo_generate_bmp(buffer, TCP_POS_TXDATA, NIC_BUFFERSIZE-TCP_POS_TXDATA, offset, PLOT_SOURCE_EEPROM);
						break;

					///add file icon gif
					case(HTTPD_STATE_FILE_SITE_FILE_ICON_PIC):
						ret = httpd_add_progmem_data_bin(HTTPD_FILE_ICON_GIF,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA, sizeof(HTTPD_BUTTON_RED));
						break;

					///404 - not found !
					default:
						#if HTTPD_DEBUG
						softuart_puts_progmem("HTTP: 404 file not found!");
						softuart_putnewline();
						#endif
						ret = httpd_add_progmem_data(HTTPD_FILE_NOT_FOUND,NULL,buffer,TCP_POS_TXDATA, offset, NIC_BUFFERSIZE-TCP_POS_TXDATA);
						break;
				}
			}else{
				///this file is stored on dataflash!
				//-> send data from file x:
				if ((httpd_conn[socketnum].data_position != offset) || (offset == 0)){
					//we must (re)seek to position offset!
					ret = filesystem_get_data(buffer, TCP_POS_TXDATA, NIC_BUFFERSIZE-TCP_POS_TXDATA, offset, (httpd_conn[socketnum].file_id - 0xFF),&httpd_conn[socketnum].data_ptr);
					//this is wrong if this is the last packet, 
					//but it does not matter, after the last packet we do not need datapos any more
					httpd_conn[socketnum].data_position = offset + (NIC_BUFFERSIZE-TCP_POS_TXDATA); 
				}else{
					//data_ptr -> flash page
					//data_position % 256 -> position inside page
					unsigned char indpos = httpd_conn[socketnum].data_position & 0xFF; // %256; 
					ret = filesystem_get_data_startat(buffer, TCP_POS_TXDATA, NIC_BUFFERSIZE-TCP_POS_TXDATA, &httpd_conn[socketnum].data_ptr, indpos);
					//this is wrong if this is the last packet, 
					//but it does not matter, after the last packet we do not need datapos any more
					httpd_conn[socketnum].data_position += (NIC_BUFFERSIZE-TCP_POS_TXDATA);
				}
				
			}

			#if HTTPD_DEBUG2
			softuart_puts_progmem("\r\nret=");
			softuart_put_uint8(ret);
			#endif
			if (ret != 0){
				httpd_conn[socketnum].state = HTTPD_STATE_FINISHED;
				return ret-TCP_POS_TXDATA;
			}

			return NIC_BUFFERSIZE-TCP_POS_TXDATA;
			break;

		case(HTTPD_STATE_FINISHED):
			//if this was an filesystem format request, do it !
			//takes a very long time !!!
			if (httpd_conn[socketnum].file_id == HTTPD_STATE_FILE_MKFS2){
				LED_STATUS_OFF();
				filesystem_format();
				LED_STATUS_ON();
			}

			httpd_conn[socketnum].state = HTTPD_STATE_IDLE;
			*appstate = TCP_APPSTATE_FINISHED;
			return 0;

		case(HTTPD_STATE_POST):
			#if HTTPD_DEBUG
			softuart_puts_progmem("HTTP: upload todo (low 16bit only): ");
			softuart_put_uint16(httpd_conn[socketnum].data_position & 0xFFFF);
			softuart_puts_progmem(" datalen=");
			softuart_put_uint16(datalen&0xFFFF);
			softuart_putnewline();
			#endif
			if (httpd_conn[socketnum].data_position <= datalen){
				//find termination:
				unsigned int endpos;
				for(endpos=TCP_POS_TXDATA; endpos<TCP_POS_TXDATA+datalen; endpos++){
					//quick hack, might return false positives !
					if (string_compare_progmem_noeof("---------------", &buffer[endpos])){
						endpos-=2;
						break;
					}
				}
			
				filesystem_write_data(&buffer[TCP_POS_TXDATA], (endpos-TCP_POS_TXDATA),0);

				filesystem_close_file();
				//pos = httpd_add_progmem_data(HTTPD_CTYPE_HTML,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
				//pos = httpd_add_progmem_data(HTTPD_RNRN,NULL, buffer, pos, 0, NIC_BUFFERSIZE-pos);
				//pos = httpd_add_progmem_data(PSTR("HTTP/1.0 200 Document follows\r\nContent-Type: text/html\r\n\r\n<html><body>upload done.<br><a href=\"/fs/ls\">-> file list</a></body></html>"),NULL, buffer, TCP_POS_TXDATA, 0, NIC_BUFFERSIZE-pos);
				//httpd_conn[socketnum].state = 123;
				pos = httpd_add_progmem_data(PSTR("HTTP/1.0 200 Document follows\r\nContent-Type: text/html\r\n\r\n"),NULL, buffer, TCP_POS_TXDATA, 0, NIC_BUFFERSIZE-pos);
				httpd_conn[socketnum].state = HTTPD_STATE_ACTIVE;

				//check if upload successfull
				if (httpd_conn[socketnum].data_position == datalen)
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_UP_DONE;
				else
					httpd_conn[socketnum].file_id = HTTPD_STATE_FILE_UP_ERR;

				httpd_conn[socketnum].seq_offset = pos - datapos + 1;
				
				*appstate = TCP_APPSTATE_HAS_TXDATA;

				
				return (pos-TCP_POS_TXDATA);
			}else{
				httpd_conn[socketnum].data_position -= datalen;
				//filesystem_seek_to(tcp_sockets[socketnum].ack);
				filesystem_write_data(&buffer[TCP_POS_TXDATA], datalen,0);

				*appstate = TCP_APPSTATE_EMPTYACK;
			}

			return 0;
	
		case(123):
			*appstate = TCP_APPSTATE_FINISHED;
			return 0;
			break;

	/*	case(4):
		case(5):

				pos = TCP_POS_TXDATA;
				buffer[pos++] = '.';
				*appstate = TCP_APPSTATE_HAS_TXDATA;
				
				

				tcp_sockets[socketnum].misc_state = tcp_sockets[socketnum].misc_state+1;
				return (pos-TCP_POS_TXDATA);

		case(6):
			//finished...
			*appstate = TCP_APPSTATE_FINISHED;
			tcp_sockets[socketnum].misc_state = 0;
			return 0;
	*/
		default:
			*appstate = TCP_APPSTATE_EMPTYACK;
	}

	return 0;
}

//add program data to buffer
//replaces $$ by data pointed to by include ptr,
//while parsing <include> replace $$.. by special data!
//WARNING: very big !! -> rewrite later !
unsigned int httpd_add_progmem_data(PGM_P pointer, PGM_P include,unsigned char *buffer, unsigned int pos, unsigned int offset, unsigned int len){
	unsigned char data;
	unsigned char data_next;
	unsigned char smallbuffer[10];
	unsigned char data_available;
	PGM_P data_ptr;
	PGM_P data_ptr_old;
	unsigned char skip_next_data_byte;

	//start with main data pointer:
	data_ptr       = pointer;
	data_ptr_old   = NULL;
	data_available = 1;
	data           = pgm_read_byte(data_ptr++);
	skip_next_data_byte = 0;

	while (data_available != 0){
		if (skip_next_data_byte){
			skip_next_data_byte = 0;
		}else{
			if (offset == 0){
				//append data:
				buffer[pos++] = data;
				len--;
			}else{
				offset--;
			}
		}
		if (len == 0)
			return 0;
		
		data      = pgm_read_byte(data_ptr++);
		data_next = pgm_read_byte(data_ptr);

		//while parsing the include file we replace 
		//$$TN -> temp now
		//$$T+ -> max temp today
		//$$T- -> min temp today
		//$$CK -> current time
		//$$FF  -> show include file
		//$$Ixy -> show PORTx.y pin as icon
		//$$??  -> show enc28j60 revision
		if ((data == '$') && (data_next == '$')){
			switch (pgm_read_byte(data_ptr + 1)){
				case ('F'):
					//include other file !
					if (include != NULL){
						//reconfigure data pointer
						//+/- 3: see bolow data_ptr+=3 !
						data_ptr_old = data_ptr + 3;
						data_ptr     = include -3; 
						data_available = 2;
					}
					break;

				case ('L'):
					//dataflash file list
					pos = filesystem_generate_index(buffer, pos, &len, &offset);
					if (pos == 0)
						return 0; //eof
					break;

/*
				case ('T'):
					//temperature request!
					//if there is not enough space in buffer, abort & wait for next packet: <0XX,X>
					///if (pos+5 > NIC_BUFFERSIZE)
					///	return 0;
				
					//temperature fits!
					//calculate buffer
					if (pgm_read_byte(data_ptr + 2) == 'N') //TEMP NOW:
						logger_output_temp(&smallbuffer[0], LOGGER_NOW);
					else if (pgm_read_byte(data_ptr + 2) == '-') //TEMP MIN
						logger_output_temp(&smallbuffer[0], LOGGER_MIN);
					else	//TEMP MAX
						logger_output_temp(&smallbuffer[0], LOGGER_MAX);	

					//copy smallbuffer to ethernetbuffer
					for (unsigned char i=0; i<5; i++){
						if (offset == 0){
							buffer[pos++] = smallbuffer[i];
							len--;
							if (len == 0)
								return 0;	
						}else{
							offset--;
						}
					}
					break;
*/
				case ('C'):
					//CLOCK:
					//if there is not enough space in buffer, abort & wait for next packet: <0XX,X>
					///if (pos+8 > NIC_BUFFERSIZE)
					///	return 0;

					//make sure the time is correct
					clock_do();

					//fill small buffer
					string_uint8_to_buffer_02dez(&smallbuffer[0], clock[CLOCK_HOUR]);
					smallbuffer[2] = ':';
					string_uint8_to_buffer_02dez(&smallbuffer[3], clock[CLOCK_MIN]);
					smallbuffer[5] = ':';
					string_uint8_to_buffer_02dez(&smallbuffer[6], clock[CLOCK_SEC]);
					
					//copy small buffer to ethernet buffer
					for (unsigned char i=0; i<8; i++){
						if (offset == 0){
							buffer[pos++] = smallbuffer[i];
							len--;
							if (len == 0)
								return 0;	
						}else{
							offset--;
						}
					}
					break;

				case ('I'):
					smallbuffer[0] = pgm_read_byte(data_ptr + 2);
					smallbuffer[1] = pgm_read_byte(data_ptr + 3);
					smallbuffer[2] = '_';
					smallbuffer[3] = '0' + port_get_portbit(pgm_read_byte(data_ptr + 2), pgm_read_byte(data_ptr + 3));
					string_progmem_to_buffer(PSTR(".gif"), &smallbuffer[4], 4);
					
					//copy small buffer to ethernet buffer
					for (unsigned char i=0; i<8; i++){
						if (offset == 0){
							buffer[pos++] = smallbuffer[i];
							len--;
							if (len == 0)
								return 0;	
						}else{
							offset--;
						}
					}
					data_ptr += 1; //we use one byte more here !
					break;

				case ('?'):
					string_uint8_to_buffer(&smallbuffer[0], enc28j60_revision);
					for (unsigned char i=0; i<3; i++){
						if (offset == 0){
							buffer[pos++] = smallbuffer[i];
							len--;
							if (len == 0)
								return 0;	
						}else{
							offset--;
						}
					}
					break;

				default:
					//unknown
					//do nothing
					break;
			}
			//skip TAG
			data_ptr += 3; //$$..
			skip_next_data_byte = 1; //we have to skip the $ which is inside the data buffer
		}
		if (data == 0){
			//end of pgm string... is this end of include or end of main ?
			// if main    -> data_available = 1
			// if include -> data_available = 2
			if (data_available == 1){
				data_available = 0; //STOP!
			}else{
				//this was the include, switch back to main!
				data_available = 1;
				data_ptr = data_ptr_old;
				skip_next_data_byte = 1;
			}
		}
	}
	return pos;
}


unsigned int httpd_add_progmem_data_bin(PGM_P pointer, unsigned char *buffer, unsigned int pos, unsigned int offset, unsigned int len, unsigned int pgm_datalen){
    4b86:	ef 92       	push	r14
    4b88:	ff 92       	push	r15
    4b8a:	0f 93       	push	r16
    4b8c:	1f 93       	push	r17
    4b8e:	fc 01       	movw	r30, r24
	unsigned char data;
	//unsigned char data_next;
	
	data = pgm_read_byte(pointer++);
    4b90:	84 91       	lpm	r24, Z
    4b92:	df 01       	movw	r26, r30
    4b94:	1a c0       	rjmp	.+52     	; 0x4bca <httpd_add_progmem_data_bin+0x44>
	
	while (pgm_datalen){
		if (offset == 0){
    4b96:	21 15       	cp	r18, r1
    4b98:	31 05       	cpc	r19, r1
    4b9a:	49 f4       	brne	.+18     	; 0x4bae <httpd_add_progmem_data_bin+0x28>
			//append data:
			buffer[pos++] = data;
    4b9c:	fb 01       	movw	r30, r22
    4b9e:	e4 0f       	add	r30, r20
    4ba0:	f5 1f       	adc	r31, r21
    4ba2:	80 83       	st	Z, r24
    4ba4:	4f 5f       	subi	r20, 0xFF	; 255
    4ba6:	5f 4f       	sbci	r21, 0xFF	; 255
			len--;
    4ba8:	01 50       	subi	r16, 0x01	; 1
    4baa:	10 40       	sbci	r17, 0x00	; 0
    4bac:	02 c0       	rjmp	.+4      	; 0x4bb2 <httpd_add_progmem_data_bin+0x2c>
		}else{
			offset--;
    4bae:	21 50       	subi	r18, 0x01	; 1
    4bb0:	30 40       	sbci	r19, 0x00	; 0
    4bb2:	11 96       	adiw	r26, 0x01	; 1
		}
		if (len == 0)
    4bb4:	01 15       	cp	r16, r1
    4bb6:	11 05       	cpc	r17, r1
    4bb8:	19 f4       	brne	.+6      	; 0x4bc0 <httpd_add_progmem_data_bin+0x3a>
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	08 c0       	rjmp	.+16     	; 0x4bd0 <httpd_add_progmem_data_bin+0x4a>
			return 0;
	
		data      = pgm_read_byte(pointer++);
    4bc0:	fd 01       	movw	r30, r26
    4bc2:	84 91       	lpm	r24, Z
		pgm_datalen--;
    4bc4:	08 94       	sec
    4bc6:	e1 08       	sbc	r14, r1
    4bc8:	f1 08       	sbc	r15, r1
    4bca:	e1 14       	cp	r14, r1
    4bcc:	f1 04       	cpc	r15, r1
    4bce:	19 f7       	brne	.-58     	; 0x4b96 <httpd_add_progmem_data_bin+0x10>
	}
	return pos;
}
    4bd0:	ca 01       	movw	r24, r20
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    4bd6:	ff 90       	pop	r15
    4bd8:	ef 90       	pop	r14
    4bda:	08 95       	ret

00004bdc <httpd_add_progmem_data>:
    4bdc:	2f 92       	push	r2
    4bde:	3f 92       	push	r3
    4be0:	4f 92       	push	r4
    4be2:	5f 92       	push	r5
    4be4:	6f 92       	push	r6
    4be6:	7f 92       	push	r7
    4be8:	8f 92       	push	r8
    4bea:	9f 92       	push	r9
    4bec:	af 92       	push	r10
    4bee:	bf 92       	push	r11
    4bf0:	cf 92       	push	r12
    4bf2:	df 92       	push	r13
    4bf4:	ef 92       	push	r14
    4bf6:	ff 92       	push	r15
    4bf8:	0f 93       	push	r16
    4bfa:	1f 93       	push	r17
    4bfc:	cf 93       	push	r28
    4bfe:	df 93       	push	r29
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	2e 97       	sbiw	r28, 0x0e	; 14
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	fc 01       	movw	r30, r24
    4c12:	2b 01       	movw	r4, r22
    4c14:	4a 01       	movw	r8, r20
    4c16:	59 01       	movw	r10, r18
    4c18:	1c 87       	std	Y+12, r17	; 0x0c
    4c1a:	0b 87       	std	Y+11, r16	; 0x0b
    4c1c:	fe 86       	std	Y+14, r15	; 0x0e
    4c1e:	ed 86       	std	Y+13, r14	; 0x0d
    4c20:	6c 01       	movw	r12, r24
    4c22:	08 94       	sec
    4c24:	c1 1c       	adc	r12, r1
    4c26:	d1 1c       	adc	r13, r1
    4c28:	24 91       	lpm	r18, Z
    4c2a:	e1 e0       	ldi	r30, 0x01	; 1
    4c2c:	6e 2e       	mov	r6, r30
    4c2e:	22 24       	eor	r2, r2
    4c30:	33 24       	eor	r3, r3
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	05 c0       	rjmp	.+10     	; 0x4c40 <httpd_add_progmem_data+0x64>
    4c36:	61 01       	movw	r12, r2
    4c38:	71 e0       	ldi	r23, 0x01	; 1
    4c3a:	67 2e       	mov	r6, r23
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	27 2d       	mov	r18, r7
    4c40:	88 23       	and	r24, r24
    4c42:	a1 f4       	brne	.+40     	; 0x4c6c <httpd_add_progmem_data+0x90>
    4c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c48:	00 97       	sbiw	r24, 0x00	; 0
    4c4a:	69 f4       	brne	.+26     	; 0x4c66 <httpd_add_progmem_data+0x8a>
    4c4c:	f4 01       	movw	r30, r8
    4c4e:	ea 0d       	add	r30, r10
    4c50:	fb 1d       	adc	r31, r11
    4c52:	20 83       	st	Z, r18
    4c54:	08 94       	sec
    4c56:	a1 1c       	adc	r10, r1
    4c58:	b1 1c       	adc	r11, r1
    4c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c5e:	01 97       	sbiw	r24, 0x01	; 1
    4c60:	9e 87       	std	Y+14, r25	; 0x0e
    4c62:	8d 87       	std	Y+13, r24	; 0x0d
    4c64:	03 c0       	rjmp	.+6      	; 0x4c6c <httpd_add_progmem_data+0x90>
    4c66:	01 97       	sbiw	r24, 0x01	; 1
    4c68:	9c 87       	std	Y+12, r25	; 0x0c
    4c6a:	8b 87       	std	Y+11, r24	; 0x0b
    4c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c70:	89 2b       	or	r24, r25
    4c72:	09 f4       	brne	.+2      	; 0x4c76 <httpd_add_progmem_data+0x9a>
    4c74:	fa c0       	rjmp	.+500    	; 0x4e6a <httpd_add_progmem_data+0x28e>
    4c76:	f6 01       	movw	r30, r12
    4c78:	08 94       	sec
    4c7a:	c1 1c       	adc	r12, r1
    4c7c:	d1 1c       	adc	r13, r1
    4c7e:	74 90       	lpm	r7, Z
    4c80:	f6 01       	movw	r30, r12
    4c82:	84 91       	lpm	r24, Z
    4c84:	f4 e2       	ldi	r31, 0x24	; 36
    4c86:	7f 16       	cp	r7, r31
    4c88:	09 f0       	breq	.+2      	; 0x4c8c <httpd_add_progmem_data+0xb0>
    4c8a:	e3 c0       	rjmp	.+454    	; 0x4e52 <httpd_add_progmem_data+0x276>
    4c8c:	84 32       	cpi	r24, 0x24	; 36
    4c8e:	09 f0       	breq	.+2      	; 0x4c92 <httpd_add_progmem_data+0xb6>
    4c90:	e7 c0       	rjmp	.+462    	; 0x4e60 <httpd_add_progmem_data+0x284>
    4c92:	86 01       	movw	r16, r12
    4c94:	0f 5f       	subi	r16, 0xFF	; 255
    4c96:	1f 4f       	sbci	r17, 0xFF	; 255
    4c98:	f8 01       	movw	r30, r16
    4c9a:	84 91       	lpm	r24, Z
    4c9c:	86 34       	cpi	r24, 0x46	; 70
    4c9e:	81 f0       	breq	.+32     	; 0x4cc0 <httpd_add_progmem_data+0xe4>
    4ca0:	87 34       	cpi	r24, 0x47	; 71
    4ca2:	38 f4       	brcc	.+14     	; 0x4cb2 <httpd_add_progmem_data+0xd6>
    4ca4:	8f 33       	cpi	r24, 0x3F	; 63
    4ca6:	09 f4       	brne	.+2      	; 0x4caa <httpd_add_progmem_data+0xce>
    4ca8:	a7 c0       	rjmp	.+334    	; 0x4df8 <httpd_add_progmem_data+0x21c>
    4caa:	83 34       	cpi	r24, 0x43	; 67
    4cac:	09 f0       	breq	.+2      	; 0x4cb0 <httpd_add_progmem_data+0xd4>
    4cae:	cb c0       	rjmp	.+406    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4cb0:	28 c0       	rjmp	.+80     	; 0x4d02 <httpd_add_progmem_data+0x126>
    4cb2:	89 34       	cpi	r24, 0x49	; 73
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <httpd_add_progmem_data+0xdc>
    4cb6:	61 c0       	rjmp	.+194    	; 0x4d7a <httpd_add_progmem_data+0x19e>
    4cb8:	8c 34       	cpi	r24, 0x4C	; 76
    4cba:	09 f0       	breq	.+2      	; 0x4cbe <httpd_add_progmem_data+0xe2>
    4cbc:	c4 c0       	rjmp	.+392    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4cbe:	12 c0       	rjmp	.+36     	; 0x4ce4 <httpd_add_progmem_data+0x108>
    4cc0:	41 14       	cp	r4, r1
    4cc2:	51 04       	cpc	r5, r1
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <httpd_add_progmem_data+0xec>
    4cc6:	bf c0       	rjmp	.+382    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4cc8:	63 e0       	ldi	r22, 0x03	; 3
    4cca:	26 2e       	mov	r2, r22
    4ccc:	31 2c       	mov	r3, r1
    4cce:	2c 0c       	add	r2, r12
    4cd0:	3d 1c       	adc	r3, r13
    4cd2:	5d ef       	ldi	r21, 0xFD	; 253
    4cd4:	c5 2e       	mov	r12, r21
    4cd6:	5f ef       	ldi	r21, 0xFF	; 255
    4cd8:	d5 2e       	mov	r13, r21
    4cda:	c4 0c       	add	r12, r4
    4cdc:	d5 1c       	adc	r13, r5
    4cde:	42 e0       	ldi	r20, 0x02	; 2
    4ce0:	64 2e       	mov	r6, r20
    4ce2:	b1 c0       	rjmp	.+354    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4ce4:	9e 01       	movw	r18, r28
    4ce6:	25 5f       	subi	r18, 0xF5	; 245
    4ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cea:	ae 01       	movw	r20, r28
    4cec:	43 5f       	subi	r20, 0xF3	; 243
    4cee:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf0:	b5 01       	movw	r22, r10
    4cf2:	c4 01       	movw	r24, r8
    4cf4:	0e 94 1c 20 	call	0x4038	; 0x4038 <filesystem_generate_index>
    4cf8:	5c 01       	movw	r10, r24
    4cfa:	89 2b       	or	r24, r25
    4cfc:	09 f0       	breq	.+2      	; 0x4d00 <httpd_add_progmem_data+0x124>
    4cfe:	a3 c0       	rjmp	.+326    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4d00:	b6 c0       	rjmp	.+364    	; 0x4e6e <httpd_add_progmem_data+0x292>
    4d02:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <clock_do>
    4d06:	60 91 40 07 	lds	r22, 0x0740
    4d0a:	7e 01       	movw	r14, r28
    4d0c:	08 94       	sec
    4d0e:	e1 1c       	adc	r14, r1
    4d10:	f1 1c       	adc	r15, r1
    4d12:	c7 01       	movw	r24, r14
    4d14:	0e 94 89 23 	call	0x4712	; 0x4712 <string_uint8_to_buffer_02dez>
    4d18:	1a e3       	ldi	r17, 0x3A	; 58
    4d1a:	1b 83       	std	Y+3, r17	; 0x03
    4d1c:	60 91 41 07 	lds	r22, 0x0741
    4d20:	ce 01       	movw	r24, r28
    4d22:	04 96       	adiw	r24, 0x04	; 4
    4d24:	0e 94 89 23 	call	0x4712	; 0x4712 <string_uint8_to_buffer_02dez>
    4d28:	1e 83       	std	Y+6, r17	; 0x06
    4d2a:	60 91 42 07 	lds	r22, 0x0742
    4d2e:	ce 01       	movw	r24, r28
    4d30:	07 96       	adiw	r24, 0x07	; 7
    4d32:	0e 94 89 23 	call	0x4712	; 0x4712 <string_uint8_to_buffer_02dez>
    4d36:	d7 01       	movw	r26, r14
    4d38:	9e 01       	movw	r18, r28
    4d3a:	27 5f       	subi	r18, 0xF7	; 247
    4d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3e:	f5 01       	movw	r30, r10
    4d40:	e8 0d       	add	r30, r8
    4d42:	f9 1d       	adc	r31, r9
    4d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	71 f4       	brne	.+28     	; 0x4d68 <httpd_add_progmem_data+0x18c>
    4d4c:	8c 91       	ld	r24, X
    4d4e:	80 83       	st	Z, r24
    4d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	09 f4       	brne	.+2      	; 0x4d5a <httpd_add_progmem_data+0x17e>
    4d58:	88 c0       	rjmp	.+272    	; 0x4e6a <httpd_add_progmem_data+0x28e>
    4d5a:	08 94       	sec
    4d5c:	a1 1c       	adc	r10, r1
    4d5e:	b1 1c       	adc	r11, r1
    4d60:	31 96       	adiw	r30, 0x01	; 1
    4d62:	9e 87       	std	Y+14, r25	; 0x0e
    4d64:	8d 87       	std	Y+13, r24	; 0x0d
    4d66:	03 c0       	rjmp	.+6      	; 0x4d6e <httpd_add_progmem_data+0x192>
    4d68:	01 97       	sbiw	r24, 0x01	; 1
    4d6a:	9c 87       	std	Y+12, r25	; 0x0c
    4d6c:	8b 87       	std	Y+11, r24	; 0x0b
    4d6e:	11 96       	adiw	r26, 0x01	; 1
    4d70:	a2 17       	cp	r26, r18
    4d72:	b3 07       	cpc	r27, r19
    4d74:	09 f4       	brne	.+2      	; 0x4d78 <httpd_add_progmem_data+0x19c>
    4d76:	67 c0       	rjmp	.+206    	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4d78:	e5 cf       	rjmp	.-54     	; 0x4d44 <httpd_add_progmem_data+0x168>
    4d7a:	82 e0       	ldi	r24, 0x02	; 2
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	c8 0e       	add	r12, r24
    4d80:	d9 1e       	adc	r13, r25
    4d82:	f6 01       	movw	r30, r12
    4d84:	84 91       	lpm	r24, Z
    4d86:	89 83       	std	Y+1, r24	; 0x01
    4d88:	08 94       	sec
    4d8a:	c1 1c       	adc	r12, r1
    4d8c:	d1 1c       	adc	r13, r1
    4d8e:	f6 01       	movw	r30, r12
    4d90:	64 91       	lpm	r22, Z
    4d92:	6a 83       	std	Y+2, r22	; 0x02
    4d94:	9f e5       	ldi	r25, 0x5F	; 95
    4d96:	9b 83       	std	Y+3, r25	; 0x03
    4d98:	0e 94 df 12 	call	0x25be	; 0x25be <port_get_portbit>
    4d9c:	80 5d       	subi	r24, 0xD0	; 208
    4d9e:	8c 83       	std	Y+4, r24	; 0x04
    4da0:	44 e0       	ldi	r20, 0x04	; 4
    4da2:	50 e0       	ldi	r21, 0x00	; 0
    4da4:	be 01       	movw	r22, r28
    4da6:	6b 5f       	subi	r22, 0xFB	; 251
    4da8:	7f 4f       	sbci	r23, 0xFF	; 255
    4daa:	8c e4       	ldi	r24, 0x4C	; 76
    4dac:	90 e2       	ldi	r25, 0x20	; 32
    4dae:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    4db2:	de 01       	movw	r26, r28
    4db4:	11 96       	adiw	r26, 0x01	; 1
    4db6:	9e 01       	movw	r18, r28
    4db8:	27 5f       	subi	r18, 0xF7	; 247
    4dba:	3f 4f       	sbci	r19, 0xFF	; 255
    4dbc:	f5 01       	movw	r30, r10
    4dbe:	e8 0d       	add	r30, r8
    4dc0:	f9 1d       	adc	r31, r9
    4dc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dc6:	00 97       	sbiw	r24, 0x00	; 0
    4dc8:	71 f4       	brne	.+28     	; 0x4de6 <httpd_add_progmem_data+0x20a>
    4dca:	8c 91       	ld	r24, X
    4dcc:	80 83       	st	Z, r24
    4dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <httpd_add_progmem_data+0x1fc>
    4dd6:	49 c0       	rjmp	.+146    	; 0x4e6a <httpd_add_progmem_data+0x28e>
    4dd8:	08 94       	sec
    4dda:	a1 1c       	adc	r10, r1
    4ddc:	b1 1c       	adc	r11, r1
    4dde:	31 96       	adiw	r30, 0x01	; 1
    4de0:	9e 87       	std	Y+14, r25	; 0x0e
    4de2:	8d 87       	std	Y+13, r24	; 0x0d
    4de4:	03 c0       	rjmp	.+6      	; 0x4dec <httpd_add_progmem_data+0x210>
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	9c 87       	std	Y+12, r25	; 0x0c
    4dea:	8b 87       	std	Y+11, r24	; 0x0b
    4dec:	11 96       	adiw	r26, 0x01	; 1
    4dee:	a2 17       	cp	r26, r18
    4df0:	b3 07       	cpc	r27, r19
    4df2:	39 f7       	brne	.-50     	; 0x4dc2 <httpd_add_progmem_data+0x1e6>
    4df4:	68 01       	movw	r12, r16
    4df6:	27 c0       	rjmp	.+78     	; 0x4e46 <httpd_add_progmem_data+0x26a>
    4df8:	60 91 39 07 	lds	r22, 0x0739
    4dfc:	8e 01       	movw	r16, r28
    4dfe:	0f 5f       	subi	r16, 0xFF	; 255
    4e00:	1f 4f       	sbci	r17, 0xFF	; 255
    4e02:	c8 01       	movw	r24, r16
    4e04:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <string_uint8_to_buffer>
    4e08:	d8 01       	movw	r26, r16
    4e0a:	9e 01       	movw	r18, r28
    4e0c:	2c 5f       	subi	r18, 0xFC	; 252
    4e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e10:	f5 01       	movw	r30, r10
    4e12:	e8 0d       	add	r30, r8
    4e14:	f9 1d       	adc	r31, r9
    4e16:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e18:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e1a:	00 97       	sbiw	r24, 0x00	; 0
    4e1c:	69 f4       	brne	.+26     	; 0x4e38 <httpd_add_progmem_data+0x25c>
    4e1e:	8c 91       	ld	r24, X
    4e20:	80 83       	st	Z, r24
    4e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	01 f1       	breq	.+64     	; 0x4e6a <httpd_add_progmem_data+0x28e>
    4e2a:	08 94       	sec
    4e2c:	a1 1c       	adc	r10, r1
    4e2e:	b1 1c       	adc	r11, r1
    4e30:	31 96       	adiw	r30, 0x01	; 1
    4e32:	9e 87       	std	Y+14, r25	; 0x0e
    4e34:	8d 87       	std	Y+13, r24	; 0x0d
    4e36:	03 c0       	rjmp	.+6      	; 0x4e3e <httpd_add_progmem_data+0x262>
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	9c 87       	std	Y+12, r25	; 0x0c
    4e3c:	8b 87       	std	Y+11, r24	; 0x0b
    4e3e:	11 96       	adiw	r26, 0x01	; 1
    4e40:	a2 17       	cp	r26, r18
    4e42:	b3 07       	cpc	r27, r19
    4e44:	41 f7       	brne	.-48     	; 0x4e16 <httpd_add_progmem_data+0x23a>
    4e46:	83 e0       	ldi	r24, 0x03	; 3
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	c8 0e       	add	r12, r24
    4e4c:	d9 1e       	adc	r13, r25
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	08 c0       	rjmp	.+16     	; 0x4e62 <httpd_add_progmem_data+0x286>
    4e52:	77 20       	and	r7, r7
    4e54:	29 f4       	brne	.+10     	; 0x4e60 <httpd_add_progmem_data+0x284>
    4e56:	91 e0       	ldi	r25, 0x01	; 1
    4e58:	69 16       	cp	r6, r25
    4e5a:	09 f0       	breq	.+2      	; 0x4e5e <httpd_add_progmem_data+0x282>
    4e5c:	ec ce       	rjmp	.-552    	; 0x4c36 <httpd_add_progmem_data+0x5a>
    4e5e:	07 c0       	rjmp	.+14     	; 0x4e6e <httpd_add_progmem_data+0x292>
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	66 20       	and	r6, r6
    4e64:	09 f0       	breq	.+2      	; 0x4e68 <httpd_add_progmem_data+0x28c>
    4e66:	eb ce       	rjmp	.-554    	; 0x4c3e <httpd_add_progmem_data+0x62>
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <httpd_add_progmem_data+0x292>
    4e6a:	aa 24       	eor	r10, r10
    4e6c:	bb 24       	eor	r11, r11
    4e6e:	c5 01       	movw	r24, r10
    4e70:	2e 96       	adiw	r28, 0x0e	; 14
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	f8 94       	cli
    4e76:	de bf       	out	0x3e, r29	; 62
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	cd bf       	out	0x3d, r28	; 61
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	ff 90       	pop	r15
    4e86:	ef 90       	pop	r14
    4e88:	df 90       	pop	r13
    4e8a:	cf 90       	pop	r12
    4e8c:	bf 90       	pop	r11
    4e8e:	af 90       	pop	r10
    4e90:	9f 90       	pop	r9
    4e92:	8f 90       	pop	r8
    4e94:	7f 90       	pop	r7
    4e96:	6f 90       	pop	r6
    4e98:	5f 90       	pop	r5
    4e9a:	4f 90       	pop	r4
    4e9c:	3f 90       	pop	r3
    4e9e:	2f 90       	pop	r2
    4ea0:	08 95       	ret

00004ea2 <httpd_data_in>:
    4ea2:	2f 92       	push	r2
    4ea4:	3f 92       	push	r3
    4ea6:	4f 92       	push	r4
    4ea8:	5f 92       	push	r5
    4eaa:	6f 92       	push	r6
    4eac:	7f 92       	push	r7
    4eae:	8f 92       	push	r8
    4eb0:	9f 92       	push	r9
    4eb2:	af 92       	push	r10
    4eb4:	bf 92       	push	r11
    4eb6:	cf 92       	push	r12
    4eb8:	df 92       	push	r13
    4eba:	ef 92       	push	r14
    4ebc:	ff 92       	push	r15
    4ebe:	0f 93       	push	r16
    4ec0:	1f 93       	push	r17
    4ec2:	cf 93       	push	r28
    4ec4:	df 93       	push	r29
    4ec6:	cd b7       	in	r28, 0x3d	; 61
    4ec8:	de b7       	in	r29, 0x3e	; 62
    4eca:	68 97       	sbiw	r28, 0x18	; 24
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	2c 01       	movw	r4, r24
    4ed8:	4b 01       	movw	r8, r22
    4eda:	5e 8b       	std	Y+22, r21	; 0x16
    4edc:	4d 8b       	std	Y+21, r20	; 0x15
    4ede:	42 2f       	mov	r20, r18
    4ee0:	18 8f       	std	Y+24, r17	; 0x18
    4ee2:	0f 8b       	std	Y+23, r16	; 0x17
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	35 96       	adiw	r30, 0x05	; 5
    4ee8:	ce 01       	movw	r24, r28
    4eea:	44 96       	adiw	r24, 0x14	; 20
    4eec:	11 92       	st	Z+, r1
    4eee:	e8 17       	cp	r30, r24
    4ef0:	f9 07       	cpc	r31, r25
    4ef2:	e1 f7       	brne	.-8      	; 0x4eec <httpd_data_in+0x4a>
    4ef4:	19 82       	std	Y+1, r1	; 0x01
    4ef6:	1a 82       	std	Y+2, r1	; 0x02
    4ef8:	1b 82       	std	Y+3, r1	; 0x03
    4efa:	1c 82       	std	Y+4, r1	; 0x04
    4efc:	24 2e       	mov	r2, r20
    4efe:	33 24       	eor	r3, r3
    4f00:	c1 01       	movw	r24, r2
    4f02:	88 0f       	add	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	9c 01       	movw	r18, r24
    4f08:	73 e0       	ldi	r23, 0x03	; 3
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	7a 95       	dec	r23
    4f10:	e1 f7       	brne	.-8      	; 0x4f0a <httpd_data_in+0x68>
    4f12:	28 1b       	sub	r18, r24
    4f14:	39 0b       	sbc	r19, r25
    4f16:	6f ee       	ldi	r22, 0xEF	; 239
    4f18:	66 2e       	mov	r6, r22
    4f1a:	65 e0       	ldi	r22, 0x05	; 5
    4f1c:	76 2e       	mov	r7, r22
    4f1e:	62 0e       	add	r6, r18
    4f20:	73 1e       	adc	r7, r19
    4f22:	d3 01       	movw	r26, r6
    4f24:	8c 91       	ld	r24, X
    4f26:	8f 36       	cpi	r24, 0x6F	; 111
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <httpd_data_in+0x8a>
    4f2a:	a5 c6       	rjmp	.+3402   	; 0x5c76 <httpd_data_in+0xdd4>
    4f2c:	80 37       	cpi	r24, 0x70	; 112
    4f2e:	30 f4       	brcc	.+12     	; 0x4f3c <httpd_data_in+0x9a>
    4f30:	88 23       	and	r24, r24
    4f32:	b1 f0       	breq	.+44     	; 0x4f60 <httpd_data_in+0xbe>
    4f34:	8e 36       	cpi	r24, 0x6E	; 110
    4f36:	09 f0       	breq	.+2      	; 0x4f3a <httpd_data_in+0x98>
    4f38:	44 c7       	rjmp	.+3720   	; 0x5dc2 <httpd_data_in+0xf20>
    4f3a:	f9 c4       	rjmp	.+2546   	; 0x592e <httpd_data_in+0xa8c>
    4f3c:	80 37       	cpi	r24, 0x70	; 112
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <httpd_data_in+0xa0>
    4f40:	a9 c6       	rjmp	.+3410   	; 0x5c94 <httpd_data_in+0xdf2>
    4f42:	8b 37       	cpi	r24, 0x7B	; 123
    4f44:	09 f0       	breq	.+2      	; 0x4f48 <httpd_data_in+0xa6>
    4f46:	3d c7       	rjmp	.+3706   	; 0x5dc2 <httpd_data_in+0xf20>
    4f48:	37 c7       	rjmp	.+3694   	; 0x5db8 <httpd_data_in+0xf16>
    4f4a:	f2 01       	movw	r30, r4
    4f4c:	e2 0f       	add	r30, r18
    4f4e:	f3 1f       	adc	r31, r19
    4f50:	81 81       	ldd	r24, Z+1	; 0x01
    4f52:	89 83       	std	Y+1, r24	; 0x01
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	8a 83       	std	Y+2, r24	; 0x02
    4f58:	83 81       	ldd	r24, Z+3	; 0x03
    4f5a:	8b 83       	std	Y+3, r24	; 0x03
    4f5c:	1c 92       	st	X, r1
    4f5e:	45 c0       	rjmp	.+138    	; 0x4fea <httpd_data_in+0x148>
    4f60:	f2 01       	movw	r30, r4
    4f62:	e8 0d       	add	r30, r8
    4f64:	f9 1d       	adc	r31, r9
    4f66:	80 81       	ld	r24, Z
    4f68:	87 34       	cpi	r24, 0x47	; 71
    4f6a:	09 f0       	breq	.+2      	; 0x4f6e <httpd_data_in+0xcc>
    4f6c:	4c c2       	rjmp	.+1176   	; 0x5406 <httpd_data_in+0x564>
    4f6e:	81 81       	ldd	r24, Z+1	; 0x01
    4f70:	85 34       	cpi	r24, 0x45	; 69
    4f72:	09 f0       	breq	.+2      	; 0x4f76 <httpd_data_in+0xd4>
    4f74:	48 c2       	rjmp	.+1168   	; 0x5406 <httpd_data_in+0x564>
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	84 35       	cpi	r24, 0x54	; 84
    4f7a:	09 f0       	breq	.+2      	; 0x4f7e <httpd_data_in+0xdc>
    4f7c:	44 c2       	rjmp	.+1160   	; 0x5406 <httpd_data_in+0x564>
    4f7e:	94 01       	movw	r18, r8
    4f80:	2d 5f       	subi	r18, 0xFD	; 253
    4f82:	3f 4f       	sbci	r19, 0xFF	; 255
    4f84:	33 96       	adiw	r30, 0x03	; 3
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <httpd_data_in+0xea>
    4f88:	2f 5f       	subi	r18, 0xFF	; 255
    4f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f8c:	81 91       	ld	r24, Z+
    4f8e:	80 32       	cpi	r24, 0x20	; 32
    4f90:	d9 f3       	breq	.-10     	; 0x4f88 <httpd_data_in+0xe6>
    4f92:	f2 01       	movw	r30, r4
    4f94:	e2 0f       	add	r30, r18
    4f96:	f3 1f       	adc	r31, r19
    4f98:	40 e0       	ldi	r20, 0x00	; 0
    4f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f9e:	68 0d       	add	r22, r8
    4fa0:	79 1d       	adc	r23, r9
    4fa2:	8e 01       	movw	r16, r28
    4fa4:	0b 5f       	subi	r16, 0xFB	; 251
    4fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa8:	14 c0       	rjmp	.+40     	; 0x4fd2 <httpd_data_in+0x130>
    4faa:	d8 01       	movw	r26, r16
    4fac:	a4 0f       	add	r26, r20
    4fae:	b1 1d       	adc	r27, r1
    4fb0:	9c 93       	st	X, r25
    4fb2:	80 81       	ld	r24, Z
    4fb4:	8e 32       	cpi	r24, 0x2E	; 46
    4fb6:	49 f2       	breq	.-110    	; 0x4f4a <httpd_data_in+0xa8>
    4fb8:	9e 32       	cpi	r25, 0x2E	; 46
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <httpd_data_in+0x11c>
    4fbc:	1c 92       	st	X, r1
    4fbe:	4e 30       	cpi	r20, 0x0E	; 14
    4fc0:	08 f4       	brcc	.+2      	; 0x4fc4 <httpd_data_in+0x122>
    4fc2:	4f 5f       	subi	r20, 0xFF	; 255
    4fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc6:	8f 32       	cpi	r24, 0x2F	; 47
    4fc8:	09 f4       	brne	.+2      	; 0x4fcc <httpd_data_in+0x12a>
    4fca:	40 e0       	ldi	r20, 0x00	; 0
    4fcc:	2f 5f       	subi	r18, 0xFF	; 255
    4fce:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd0:	31 96       	adiw	r30, 0x01	; 1
    4fd2:	90 81       	ld	r25, Z
    4fd4:	90 32       	cpi	r25, 0x20	; 32
    4fd6:	49 f0       	breq	.+18     	; 0x4fea <httpd_data_in+0x148>
    4fd8:	9d 30       	cpi	r25, 0x0D	; 13
    4fda:	39 f0       	breq	.+14     	; 0x4fea <httpd_data_in+0x148>
    4fdc:	9a 30       	cpi	r25, 0x0A	; 10
    4fde:	29 f0       	breq	.+10     	; 0x4fea <httpd_data_in+0x148>
    4fe0:	9f 33       	cpi	r25, 0x3F	; 63
    4fe2:	19 f0       	breq	.+6      	; 0x4fea <httpd_data_in+0x148>
    4fe4:	26 17       	cp	r18, r22
    4fe6:	37 07       	cpc	r19, r23
    4fe8:	00 f3       	brcs	.-64     	; 0x4faa <httpd_data_in+0x108>
    4fea:	8d 81       	ldd	r24, Y+5	; 0x05
    4fec:	8f 32       	cpi	r24, 0x2F	; 47
    4fee:	59 f0       	breq	.+22     	; 0x5006 <httpd_data_in+0x164>
    4ff0:	8e 01       	movw	r16, r28
    4ff2:	0b 5f       	subi	r16, 0xFB	; 251
    4ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff6:	41 e0       	ldi	r20, 0x01	; 1
    4ff8:	b8 01       	movw	r22, r16
    4ffa:	8f e5       	ldi	r24, 0x5F	; 95
    4ffc:	91 e2       	ldi	r25, 0x21	; 33
    4ffe:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    5002:	88 23       	and	r24, r24
    5004:	a1 f0       	breq	.+40     	; 0x502e <httpd_data_in+0x18c>
    5006:	c1 01       	movw	r24, r2
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	fc 01       	movw	r30, r24
    500e:	43 e0       	ldi	r20, 0x03	; 3
    5010:	ee 0f       	add	r30, r30
    5012:	ff 1f       	adc	r31, r31
    5014:	4a 95       	dec	r20
    5016:	e1 f7       	brne	.-8      	; 0x5010 <httpd_data_in+0x16e>
    5018:	e8 1b       	sub	r30, r24
    501a:	f9 0b       	sbc	r31, r25
    501c:	e1 51       	subi	r30, 0x11	; 17
    501e:	fa 4f       	sbci	r31, 0xFA	; 250
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	93 83       	std	Z+3, r25	; 0x03
    5026:	82 83       	std	Z+2, r24	; 0x02
    5028:	88 e6       	ldi	r24, 0x68	; 104
    502a:	89 83       	std	Y+1, r24	; 0x01
    502c:	c6 c1       	rjmp	.+908    	; 0x53ba <httpd_data_in+0x518>
    502e:	41 e0       	ldi	r20, 0x01	; 1
    5030:	b8 01       	movw	r22, r16
    5032:	86 e5       	ldi	r24, 0x56	; 86
    5034:	91 e2       	ldi	r25, 0x21	; 33
    5036:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    503a:	88 23       	and	r24, r24
    503c:	81 f0       	breq	.+32     	; 0x505e <httpd_data_in+0x1bc>
    503e:	c1 01       	movw	r24, r2
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	fc 01       	movw	r30, r24
    5046:	23 e0       	ldi	r18, 0x03	; 3
    5048:	ee 0f       	add	r30, r30
    504a:	ff 1f       	adc	r31, r31
    504c:	2a 95       	dec	r18
    504e:	e1 f7       	brne	.-8      	; 0x5048 <httpd_data_in+0x1a6>
    5050:	e8 1b       	sub	r30, r24
    5052:	f9 0b       	sbc	r31, r25
    5054:	e1 51       	subi	r30, 0x11	; 17
    5056:	fa 4f       	sbci	r31, 0xFA	; 250
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	17 c0       	rjmp	.+46     	; 0x508c <httpd_data_in+0x1ea>
    505e:	41 e0       	ldi	r20, 0x01	; 1
    5060:	b8 01       	movw	r22, r16
    5062:	8c e4       	ldi	r24, 0x4C	; 76
    5064:	91 e2       	ldi	r25, 0x21	; 33
    5066:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    506a:	88 23       	and	r24, r24
    506c:	91 f0       	breq	.+36     	; 0x5092 <httpd_data_in+0x1f0>
    506e:	c1 01       	movw	r24, r2
    5070:	88 0f       	add	r24, r24
    5072:	99 1f       	adc	r25, r25
    5074:	fc 01       	movw	r30, r24
    5076:	13 e0       	ldi	r17, 0x03	; 3
    5078:	ee 0f       	add	r30, r30
    507a:	ff 1f       	adc	r31, r31
    507c:	1a 95       	dec	r17
    507e:	e1 f7       	brne	.-8      	; 0x5078 <httpd_data_in+0x1d6>
    5080:	e8 1b       	sub	r30, r24
    5082:	f9 0b       	sbc	r31, r25
    5084:	e1 51       	subi	r30, 0x11	; 17
    5086:	fa 4f       	sbci	r31, 0xFA	; 250
    5088:	83 e0       	ldi	r24, 0x03	; 3
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	93 83       	std	Z+3, r25	; 0x03
    508e:	82 83       	std	Z+2, r24	; 0x02
    5090:	94 c1       	rjmp	.+808    	; 0x53ba <httpd_data_in+0x518>
    5092:	41 e0       	ldi	r20, 0x01	; 1
    5094:	b8 01       	movw	r22, r16
    5096:	84 e4       	ldi	r24, 0x44	; 68
    5098:	91 e2       	ldi	r25, 0x21	; 33
    509a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    509e:	88 23       	and	r24, r24
    50a0:	81 f0       	breq	.+32     	; 0x50c2 <httpd_data_in+0x220>
    50a2:	c1 01       	movw	r24, r2
    50a4:	88 0f       	add	r24, r24
    50a6:	99 1f       	adc	r25, r25
    50a8:	fc 01       	movw	r30, r24
    50aa:	a3 e0       	ldi	r26, 0x03	; 3
    50ac:	ee 0f       	add	r30, r30
    50ae:	ff 1f       	adc	r31, r31
    50b0:	aa 95       	dec	r26
    50b2:	e1 f7       	brne	.-8      	; 0x50ac <httpd_data_in+0x20a>
    50b4:	e8 1b       	sub	r30, r24
    50b6:	f9 0b       	sbc	r31, r25
    50b8:	e1 51       	subi	r30, 0x11	; 17
    50ba:	fa 4f       	sbci	r31, 0xFA	; 250
    50bc:	8b e0       	ldi	r24, 0x0B	; 11
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	e5 cf       	rjmp	.-54     	; 0x508c <httpd_data_in+0x1ea>
    50c2:	41 e0       	ldi	r20, 0x01	; 1
    50c4:	b8 01       	movw	r22, r16
    50c6:	89 e3       	ldi	r24, 0x39	; 57
    50c8:	91 e2       	ldi	r25, 0x21	; 33
    50ca:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    50ce:	88 23       	and	r24, r24
    50d0:	81 f0       	breq	.+32     	; 0x50f2 <httpd_data_in+0x250>
    50d2:	c1 01       	movw	r24, r2
    50d4:	88 0f       	add	r24, r24
    50d6:	99 1f       	adc	r25, r25
    50d8:	fc 01       	movw	r30, r24
    50da:	63 e0       	ldi	r22, 0x03	; 3
    50dc:	ee 0f       	add	r30, r30
    50de:	ff 1f       	adc	r31, r31
    50e0:	6a 95       	dec	r22
    50e2:	e1 f7       	brne	.-8      	; 0x50dc <httpd_data_in+0x23a>
    50e4:	e8 1b       	sub	r30, r24
    50e6:	f9 0b       	sbc	r31, r25
    50e8:	e1 51       	subi	r30, 0x11	; 17
    50ea:	fa 4f       	sbci	r31, 0xFA	; 250
    50ec:	81 e1       	ldi	r24, 0x11	; 17
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	cd cf       	rjmp	.-102    	; 0x508c <httpd_data_in+0x1ea>
    50f2:	41 e0       	ldi	r20, 0x01	; 1
    50f4:	b8 01       	movw	r22, r16
    50f6:	81 e3       	ldi	r24, 0x31	; 49
    50f8:	91 e2       	ldi	r25, 0x21	; 33
    50fa:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    50fe:	88 23       	and	r24, r24
    5100:	81 f0       	breq	.+32     	; 0x5122 <httpd_data_in+0x280>
    5102:	c1 01       	movw	r24, r2
    5104:	88 0f       	add	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	fc 01       	movw	r30, r24
    510a:	43 e0       	ldi	r20, 0x03	; 3
    510c:	ee 0f       	add	r30, r30
    510e:	ff 1f       	adc	r31, r31
    5110:	4a 95       	dec	r20
    5112:	e1 f7       	brne	.-8      	; 0x510c <httpd_data_in+0x26a>
    5114:	e8 1b       	sub	r30, r24
    5116:	f9 0b       	sbc	r31, r25
    5118:	e1 51       	subi	r30, 0x11	; 17
    511a:	fa 4f       	sbci	r31, 0xFA	; 250
    511c:	84 e0       	ldi	r24, 0x04	; 4
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	b5 cf       	rjmp	.-150    	; 0x508c <httpd_data_in+0x1ea>
    5122:	41 e0       	ldi	r20, 0x01	; 1
    5124:	b8 01       	movw	r22, r16
    5126:	8b e2       	ldi	r24, 0x2B	; 43
    5128:	91 e2       	ldi	r25, 0x21	; 33
    512a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    512e:	88 23       	and	r24, r24
    5130:	81 f0       	breq	.+32     	; 0x5152 <httpd_data_in+0x2b0>
    5132:	c1 01       	movw	r24, r2
    5134:	88 0f       	add	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	fc 01       	movw	r30, r24
    513a:	23 e0       	ldi	r18, 0x03	; 3
    513c:	ee 0f       	add	r30, r30
    513e:	ff 1f       	adc	r31, r31
    5140:	2a 95       	dec	r18
    5142:	e1 f7       	brne	.-8      	; 0x513c <httpd_data_in+0x29a>
    5144:	e8 1b       	sub	r30, r24
    5146:	f9 0b       	sbc	r31, r25
    5148:	e1 51       	subi	r30, 0x11	; 17
    514a:	fa 4f       	sbci	r31, 0xFA	; 250
    514c:	86 e0       	ldi	r24, 0x06	; 6
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	9d cf       	rjmp	.-198    	; 0x508c <httpd_data_in+0x1ea>
    5152:	41 e0       	ldi	r20, 0x01	; 1
    5154:	b8 01       	movw	r22, r16
    5156:	83 e2       	ldi	r24, 0x23	; 35
    5158:	91 e2       	ldi	r25, 0x21	; 33
    515a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    515e:	88 23       	and	r24, r24
    5160:	81 f0       	breq	.+32     	; 0x5182 <httpd_data_in+0x2e0>
    5162:	c1 01       	movw	r24, r2
    5164:	88 0f       	add	r24, r24
    5166:	99 1f       	adc	r25, r25
    5168:	fc 01       	movw	r30, r24
    516a:	13 e0       	ldi	r17, 0x03	; 3
    516c:	ee 0f       	add	r30, r30
    516e:	ff 1f       	adc	r31, r31
    5170:	1a 95       	dec	r17
    5172:	e1 f7       	brne	.-8      	; 0x516c <httpd_data_in+0x2ca>
    5174:	e8 1b       	sub	r30, r24
    5176:	f9 0b       	sbc	r31, r25
    5178:	e1 51       	subi	r30, 0x11	; 17
    517a:	fa 4f       	sbci	r31, 0xFA	; 250
    517c:	87 e0       	ldi	r24, 0x07	; 7
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	85 cf       	rjmp	.-246    	; 0x508c <httpd_data_in+0x1ea>
    5182:	41 e0       	ldi	r20, 0x01	; 1
    5184:	b8 01       	movw	r22, r16
    5186:	8a e1       	ldi	r24, 0x1A	; 26
    5188:	91 e2       	ldi	r25, 0x21	; 33
    518a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    518e:	88 23       	and	r24, r24
    5190:	81 f0       	breq	.+32     	; 0x51b2 <httpd_data_in+0x310>
    5192:	c1 01       	movw	r24, r2
    5194:	88 0f       	add	r24, r24
    5196:	99 1f       	adc	r25, r25
    5198:	fc 01       	movw	r30, r24
    519a:	a3 e0       	ldi	r26, 0x03	; 3
    519c:	ee 0f       	add	r30, r30
    519e:	ff 1f       	adc	r31, r31
    51a0:	aa 95       	dec	r26
    51a2:	e1 f7       	brne	.-8      	; 0x519c <httpd_data_in+0x2fa>
    51a4:	e8 1b       	sub	r30, r24
    51a6:	f9 0b       	sbc	r31, r25
    51a8:	e1 51       	subi	r30, 0x11	; 17
    51aa:	fa 4f       	sbci	r31, 0xFA	; 250
    51ac:	88 e0       	ldi	r24, 0x08	; 8
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	6d cf       	rjmp	.-294    	; 0x508c <httpd_data_in+0x1ea>
    51b2:	41 e0       	ldi	r20, 0x01	; 1
    51b4:	b8 01       	movw	r22, r16
    51b6:	8f e0       	ldi	r24, 0x0F	; 15
    51b8:	91 e2       	ldi	r25, 0x21	; 33
    51ba:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    51be:	88 23       	and	r24, r24
    51c0:	81 f0       	breq	.+32     	; 0x51e2 <httpd_data_in+0x340>
    51c2:	c1 01       	movw	r24, r2
    51c4:	88 0f       	add	r24, r24
    51c6:	99 1f       	adc	r25, r25
    51c8:	fc 01       	movw	r30, r24
    51ca:	73 e0       	ldi	r23, 0x03	; 3
    51cc:	ee 0f       	add	r30, r30
    51ce:	ff 1f       	adc	r31, r31
    51d0:	7a 95       	dec	r23
    51d2:	e1 f7       	brne	.-8      	; 0x51cc <httpd_data_in+0x32a>
    51d4:	e8 1b       	sub	r30, r24
    51d6:	f9 0b       	sbc	r31, r25
    51d8:	e1 51       	subi	r30, 0x11	; 17
    51da:	fa 4f       	sbci	r31, 0xFA	; 250
    51dc:	84 e1       	ldi	r24, 0x14	; 20
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	55 cf       	rjmp	.-342    	; 0x508c <httpd_data_in+0x1ea>
    51e2:	40 e0       	ldi	r20, 0x00	; 0
    51e4:	b8 01       	movw	r22, r16
    51e6:	88 e0       	ldi	r24, 0x08	; 8
    51e8:	91 e2       	ldi	r25, 0x21	; 33
    51ea:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    51ee:	88 23       	and	r24, r24
    51f0:	f9 f0       	breq	.+62     	; 0x5230 <httpd_data_in+0x38e>
    51f2:	8e 01       	movw	r16, r28
    51f4:	05 5f       	subi	r16, 0xF5	; 245
    51f6:	1f 4f       	sbci	r17, 0xFF	; 255
    51f8:	c8 01       	movw	r24, r16
    51fa:	0e 94 3a 23 	call	0x4674	; 0x4674 <string_buffer_to_uint16>
    51fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5200:	91 05       	cpc	r25, r1
    5202:	09 f0       	breq	.+2      	; 0x5206 <httpd_data_in+0x364>
    5204:	28 f4       	brcc	.+10     	; 0x5210 <httpd_data_in+0x36e>
    5206:	c8 01       	movw	r24, r16
    5208:	0e 94 3a 23 	call	0x4674	; 0x4674 <string_buffer_to_uint16>
    520c:	0e 94 a1 11 	call	0x2342	; 0x2342 <servo_set_pos>
    5210:	c1 01       	movw	r24, r2
    5212:	88 0f       	add	r24, r24
    5214:	99 1f       	adc	r25, r25
    5216:	fc 01       	movw	r30, r24
    5218:	53 e0       	ldi	r21, 0x03	; 3
    521a:	ee 0f       	add	r30, r30
    521c:	ff 1f       	adc	r31, r31
    521e:	5a 95       	dec	r21
    5220:	e1 f7       	brne	.-8      	; 0x521a <httpd_data_in+0x378>
    5222:	e8 1b       	sub	r30, r24
    5224:	f9 0b       	sbc	r31, r25
    5226:	e1 51       	subi	r30, 0x11	; 17
    5228:	fa 4f       	sbci	r31, 0xFA	; 250
    522a:	85 e1       	ldi	r24, 0x15	; 21
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	2e cf       	rjmp	.-420    	; 0x508c <httpd_data_in+0x1ea>
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	b8 01       	movw	r22, r16
    5234:	83 e0       	ldi	r24, 0x03	; 3
    5236:	91 e2       	ldi	r25, 0x21	; 33
    5238:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    523c:	88 23       	and	r24, r24
    523e:	51 f1       	breq	.+84     	; 0x5294 <httpd_data_in+0x3f2>
    5240:	8c 85       	ldd	r24, Y+12	; 0x0c
    5242:	91 01       	movw	r18, r2
    5244:	22 0f       	add	r18, r18
    5246:	33 1f       	adc	r19, r19
    5248:	81 33       	cpi	r24, 0x31	; 49
    524a:	81 f4       	brne	.+32     	; 0x526c <httpd_data_in+0x3ca>
    524c:	f9 01       	movw	r30, r18
    524e:	93 e0       	ldi	r25, 0x03	; 3
    5250:	ee 0f       	add	r30, r30
    5252:	ff 1f       	adc	r31, r31
    5254:	9a 95       	dec	r25
    5256:	e1 f7       	brne	.-8      	; 0x5250 <httpd_data_in+0x3ae>
    5258:	e2 1b       	sub	r30, r18
    525a:	f3 0b       	sbc	r31, r19
    525c:	e1 51       	subi	r30, 0x11	; 17
    525e:	fa 4f       	sbci	r31, 0xFA	; 250
    5260:	8c e0       	ldi	r24, 0x0C	; 12
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	93 83       	std	Z+3, r25	; 0x03
    5266:	82 83       	std	Z+2, r24	; 0x02
    5268:	41 e0       	ldi	r20, 0x01	; 1
    526a:	0f c0       	rjmp	.+30     	; 0x528a <httpd_data_in+0x3e8>
    526c:	f9 01       	movw	r30, r18
    526e:	83 e0       	ldi	r24, 0x03	; 3
    5270:	ee 0f       	add	r30, r30
    5272:	ff 1f       	adc	r31, r31
    5274:	8a 95       	dec	r24
    5276:	e1 f7       	brne	.-8      	; 0x5270 <httpd_data_in+0x3ce>
    5278:	e2 1b       	sub	r30, r18
    527a:	f3 0b       	sbc	r31, r19
    527c:	e1 51       	subi	r30, 0x11	; 17
    527e:	fa 4f       	sbci	r31, 0xFA	; 250
    5280:	8d e0       	ldi	r24, 0x0D	; 13
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	93 83       	std	Z+3, r25	; 0x03
    5286:	82 83       	std	Z+2, r24	; 0x02
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	6a 85       	ldd	r22, Y+10	; 0x0a
    528c:	89 85       	ldd	r24, Y+9	; 0x09
    528e:	0e 94 92 12 	call	0x2524	; 0x2524 <port_set_portbit>
    5292:	93 c0       	rjmp	.+294    	; 0x53ba <httpd_data_in+0x518>
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	b8 01       	movw	r22, r16
    5298:	8f ef       	ldi	r24, 0xFF	; 255
    529a:	90 e2       	ldi	r25, 0x20	; 32
    529c:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    52a0:	88 23       	and	r24, r24
    52a2:	f9 f0       	breq	.+62     	; 0x52e2 <httpd_data_in+0x440>
    52a4:	be 01       	movw	r22, r28
    52a6:	6f 5f       	subi	r22, 0xFF	; 255
    52a8:	7f 4f       	sbci	r23, 0xFF	; 255
    52aa:	ce 01       	movw	r24, r28
    52ac:	08 96       	adiw	r24, 0x08	; 8
    52ae:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <filesystem_search_file>
    52b2:	91 01       	movw	r18, r2
    52b4:	22 0f       	add	r18, r18
    52b6:	33 1f       	adc	r19, r19
    52b8:	f9 01       	movw	r30, r18
    52ba:	13 e0       	ldi	r17, 0x03	; 3
    52bc:	ee 0f       	add	r30, r30
    52be:	ff 1f       	adc	r31, r31
    52c0:	1a 95       	dec	r17
    52c2:	e1 f7       	brne	.-8      	; 0x52bc <httpd_data_in+0x41a>
    52c4:	e2 1b       	sub	r30, r18
    52c6:	f3 0b       	sbc	r31, r19
    52c8:	e1 51       	subi	r30, 0x11	; 17
    52ca:	fa 4f       	sbci	r31, 0xFA	; 250
    52cc:	81 50       	subi	r24, 0x01	; 1
    52ce:	9f 4f       	sbci	r25, 0xFF	; 255
    52d0:	93 83       	std	Z+3, r25	; 0x03
    52d2:	82 83       	std	Z+2, r24	; 0x02
    52d4:	11 86       	std	Z+9, r1	; 0x09
    52d6:	10 86       	std	Z+8, r1	; 0x08
    52d8:	8f 3f       	cpi	r24, 0xFF	; 255
    52da:	91 05       	cpc	r25, r1
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <httpd_data_in+0x43e>
    52de:	6d c0       	rjmp	.+218    	; 0x53ba <httpd_data_in+0x518>
    52e0:	6a c0       	rjmp	.+212    	; 0x53b6 <httpd_data_in+0x514>
    52e2:	41 e0       	ldi	r20, 0x01	; 1
    52e4:	b8 01       	movw	r22, r16
    52e6:	88 ef       	ldi	r24, 0xF8	; 248
    52e8:	90 e2       	ldi	r25, 0x20	; 32
    52ea:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    52ee:	88 23       	and	r24, r24
    52f0:	81 f0       	breq	.+32     	; 0x5312 <httpd_data_in+0x470>
    52f2:	c1 01       	movw	r24, r2
    52f4:	88 0f       	add	r24, r24
    52f6:	99 1f       	adc	r25, r25
    52f8:	fc 01       	movw	r30, r24
    52fa:	a3 e0       	ldi	r26, 0x03	; 3
    52fc:	ee 0f       	add	r30, r30
    52fe:	ff 1f       	adc	r31, r31
    5300:	aa 95       	dec	r26
    5302:	e1 f7       	brne	.-8      	; 0x52fc <httpd_data_in+0x45a>
    5304:	e8 1b       	sub	r30, r24
    5306:	f9 0b       	sbc	r31, r25
    5308:	e1 51       	subi	r30, 0x11	; 17
    530a:	fa 4f       	sbci	r31, 0xFA	; 250
    530c:	85 e0       	ldi	r24, 0x05	; 5
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	bd ce       	rjmp	.-646    	; 0x508c <httpd_data_in+0x1ea>
    5312:	40 e0       	ldi	r20, 0x00	; 0
    5314:	b8 01       	movw	r22, r16
    5316:	80 ef       	ldi	r24, 0xF0	; 240
    5318:	90 e2       	ldi	r25, 0x20	; 32
    531a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    531e:	88 23       	and	r24, r24
    5320:	81 f0       	breq	.+32     	; 0x5342 <httpd_data_in+0x4a0>
    5322:	c1 01       	movw	r24, r2
    5324:	88 0f       	add	r24, r24
    5326:	99 1f       	adc	r25, r25
    5328:	fc 01       	movw	r30, r24
    532a:	73 e0       	ldi	r23, 0x03	; 3
    532c:	ee 0f       	add	r30, r30
    532e:	ff 1f       	adc	r31, r31
    5330:	7a 95       	dec	r23
    5332:	e1 f7       	brne	.-8      	; 0x532c <httpd_data_in+0x48a>
    5334:	e8 1b       	sub	r30, r24
    5336:	f9 0b       	sbc	r31, r25
    5338:	e1 51       	subi	r30, 0x11	; 17
    533a:	fa 4f       	sbci	r31, 0xFA	; 250
    533c:	8e e0       	ldi	r24, 0x0E	; 14
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	a5 ce       	rjmp	.-694    	; 0x508c <httpd_data_in+0x1ea>
    5342:	41 e0       	ldi	r20, 0x01	; 1
    5344:	b8 01       	movw	r22, r16
    5346:	87 ee       	ldi	r24, 0xE7	; 231
    5348:	90 e2       	ldi	r25, 0x20	; 32
    534a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    534e:	88 23       	and	r24, r24
    5350:	81 f0       	breq	.+32     	; 0x5372 <httpd_data_in+0x4d0>
    5352:	c1 01       	movw	r24, r2
    5354:	88 0f       	add	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	fc 01       	movw	r30, r24
    535a:	53 e0       	ldi	r21, 0x03	; 3
    535c:	ee 0f       	add	r30, r30
    535e:	ff 1f       	adc	r31, r31
    5360:	5a 95       	dec	r21
    5362:	e1 f7       	brne	.-8      	; 0x535c <httpd_data_in+0x4ba>
    5364:	e8 1b       	sub	r30, r24
    5366:	f9 0b       	sbc	r31, r25
    5368:	e1 51       	subi	r30, 0x11	; 17
    536a:	fa 4f       	sbci	r31, 0xFA	; 250
    536c:	80 e1       	ldi	r24, 0x10	; 16
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	8d ce       	rjmp	.-742    	; 0x508c <httpd_data_in+0x1ea>
    5372:	41 e0       	ldi	r20, 0x01	; 1
    5374:	b8 01       	movw	r22, r16
    5376:	8d ed       	ldi	r24, 0xDD	; 221
    5378:	90 e2       	ldi	r25, 0x20	; 32
    537a:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    537e:	91 01       	movw	r18, r2
    5380:	22 0f       	add	r18, r18
    5382:	33 1f       	adc	r19, r19
    5384:	88 23       	and	r24, r24
    5386:	69 f0       	breq	.+26     	; 0x53a2 <httpd_data_in+0x500>
    5388:	f9 01       	movw	r30, r18
    538a:	93 e0       	ldi	r25, 0x03	; 3
    538c:	ee 0f       	add	r30, r30
    538e:	ff 1f       	adc	r31, r31
    5390:	9a 95       	dec	r25
    5392:	e1 f7       	brne	.-8      	; 0x538c <httpd_data_in+0x4ea>
    5394:	e2 1b       	sub	r30, r18
    5396:	f3 0b       	sbc	r31, r19
    5398:	e1 51       	subi	r30, 0x11	; 17
    539a:	fa 4f       	sbci	r31, 0xFA	; 250
    539c:	83 e1       	ldi	r24, 0x13	; 19
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	75 ce       	rjmp	.-790    	; 0x508c <httpd_data_in+0x1ea>
    53a2:	f9 01       	movw	r30, r18
    53a4:	83 e0       	ldi	r24, 0x03	; 3
    53a6:	ee 0f       	add	r30, r30
    53a8:	ff 1f       	adc	r31, r31
    53aa:	8a 95       	dec	r24
    53ac:	e1 f7       	brne	.-8      	; 0x53a6 <httpd_data_in+0x504>
    53ae:	e2 1b       	sub	r30, r18
    53b0:	f3 0b       	sbc	r31, r19
    53b2:	e1 51       	subi	r30, 0x11	; 17
    53b4:	fa 4f       	sbci	r31, 0xFA	; 250
    53b6:	13 82       	std	Z+3, r1	; 0x03
    53b8:	12 82       	std	Z+2, r1	; 0x02
    53ba:	c1 01       	movw	r24, r2
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	fc 01       	movw	r30, r24
    53c2:	13 e0       	ldi	r17, 0x03	; 3
    53c4:	ee 0f       	add	r30, r30
    53c6:	ff 1f       	adc	r31, r31
    53c8:	1a 95       	dec	r17
    53ca:	e1 f7       	brne	.-8      	; 0x53c4 <httpd_data_in+0x522>
    53cc:	e8 1b       	sub	r30, r24
    53ce:	f9 0b       	sbc	r31, r25
    53d0:	e1 51       	subi	r30, 0x11	; 17
    53d2:	fa 4f       	sbci	r31, 0xFA	; 250
    53d4:	43 c0       	rjmp	.+134    	; 0x545c <httpd_data_in+0x5ba>
    53d6:	04 0d       	add	r16, r4
    53d8:	15 1d       	adc	r17, r5
    53da:	c8 01       	movw	r24, r16
    53dc:	04 96       	adiw	r24, 0x04	; 4
    53de:	0e 94 fd 22 	call	0x45fa	; 0x45fa <string_buffer_to_uint32>
    53e2:	91 01       	movw	r18, r2
    53e4:	22 0f       	add	r18, r18
    53e6:	33 1f       	adc	r19, r19
    53e8:	f9 01       	movw	r30, r18
    53ea:	a3 e0       	ldi	r26, 0x03	; 3
    53ec:	ee 0f       	add	r30, r30
    53ee:	ff 1f       	adc	r31, r31
    53f0:	aa 95       	dec	r26
    53f2:	e1 f7       	brne	.-8      	; 0x53ec <httpd_data_in+0x54a>
    53f4:	e2 1b       	sub	r30, r18
    53f6:	f3 0b       	sbc	r31, r19
    53f8:	e1 51       	subi	r30, 0x11	; 17
    53fa:	fa 4f       	sbci	r31, 0xFA	; 250
    53fc:	62 87       	std	Z+10, r22	; 0x0a
    53fe:	73 87       	std	Z+11, r23	; 0x0b
    5400:	84 87       	std	Z+12, r24	; 0x0c
    5402:	95 87       	std	Z+13, r25	; 0x0d
    5404:	5b c0       	rjmp	.+182    	; 0x54bc <httpd_data_in+0x61a>
    5406:	80 81       	ld	r24, Z
    5408:	80 35       	cpi	r24, 0x50	; 80
    540a:	49 f5       	brne	.+82     	; 0x545e <httpd_data_in+0x5bc>
    540c:	f2 01       	movw	r30, r4
    540e:	e8 0d       	add	r30, r8
    5410:	f9 1d       	adc	r31, r9
    5412:	81 81       	ldd	r24, Z+1	; 0x01
    5414:	8f 34       	cpi	r24, 0x4F	; 79
    5416:	19 f5       	brne	.+70     	; 0x545e <httpd_data_in+0x5bc>
    5418:	82 81       	ldd	r24, Z+2	; 0x02
    541a:	83 35       	cpi	r24, 0x53	; 83
    541c:	01 f5       	brne	.+64     	; 0x545e <httpd_data_in+0x5bc>
    541e:	83 81       	ldd	r24, Z+3	; 0x03
    5420:	84 35       	cpi	r24, 0x54	; 84
    5422:	e9 f4       	brne	.+58     	; 0x545e <httpd_data_in+0x5bc>
    5424:	c1 01       	movw	r24, r2
    5426:	88 0f       	add	r24, r24
    5428:	99 1f       	adc	r25, r25
    542a:	8c 01       	movw	r16, r24
    542c:	73 e0       	ldi	r23, 0x03	; 3
    542e:	00 0f       	add	r16, r16
    5430:	11 1f       	adc	r17, r17
    5432:	7a 95       	dec	r23
    5434:	e1 f7       	brne	.-8      	; 0x542e <httpd_data_in+0x58c>
    5436:	08 1b       	sub	r16, r24
    5438:	19 0b       	sbc	r17, r25
    543a:	01 51       	subi	r16, 0x11	; 17
    543c:	1a 4f       	sbci	r17, 0xFA	; 250
    543e:	8e ef       	ldi	r24, 0xFE	; 254
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	f8 01       	movw	r30, r16
    5444:	93 83       	std	Z+3, r25	; 0x03
    5446:	82 83       	std	Z+2, r24	; 0x02
    5448:	44 e0       	ldi	r20, 0x04	; 4
    544a:	50 e0       	ldi	r21, 0x00	; 0
    544c:	be 01       	movw	r22, r28
    544e:	6b 5f       	subi	r22, 0xFB	; 251
    5450:	7f 4f       	sbci	r23, 0xFF	; 255
    5452:	88 ed       	ldi	r24, 0xD8	; 216
    5454:	90 e2       	ldi	r25, 0x20	; 32
    5456:	0e 94 99 23 	call	0x4732	; 0x4732 <string_progmem_to_buffer>
    545a:	f8 01       	movw	r30, r16
    545c:	11 82       	std	Z+1, r1	; 0x01
    545e:	c1 01       	movw	r24, r2
    5460:	88 0f       	add	r24, r24
    5462:	99 1f       	adc	r25, r25
    5464:	fc 01       	movw	r30, r24
    5466:	53 e0       	ldi	r21, 0x03	; 3
    5468:	ee 0f       	add	r30, r30
    546a:	ff 1f       	adc	r31, r31
    546c:	5a 95       	dec	r21
    546e:	e1 f7       	brne	.-8      	; 0x5468 <httpd_data_in+0x5c6>
    5470:	e8 1b       	sub	r30, r24
    5472:	f9 0b       	sbc	r31, r25
    5474:	e1 51       	subi	r30, 0x11	; 17
    5476:	fa 4f       	sbci	r31, 0xFA	; 250
    5478:	82 81       	ldd	r24, Z+2	; 0x02
    547a:	93 81       	ldd	r25, Z+3	; 0x03
    547c:	8e 3f       	cpi	r24, 0xFE	; 254
    547e:	91 05       	cpc	r25, r1
    5480:	e9 f4       	brne	.+58     	; 0x54bc <httpd_data_in+0x61a>
    5482:	72 01       	movw	r14, r4
    5484:	e8 0c       	add	r14, r8
    5486:	f9 1c       	adc	r15, r9
    5488:	84 01       	movw	r16, r8
    548a:	0e c0       	rjmp	.+28     	; 0x54a8 <httpd_data_in+0x606>
    548c:	40 e0       	ldi	r20, 0x00	; 0
    548e:	b7 01       	movw	r22, r14
    5490:	83 ed       	ldi	r24, 0xD3	; 211
    5492:	90 e2       	ldi	r25, 0x20	; 32
    5494:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    5498:	08 94       	sec
    549a:	e1 1c       	adc	r14, r1
    549c:	f1 1c       	adc	r15, r1
    549e:	88 23       	and	r24, r24
    54a0:	09 f0       	breq	.+2      	; 0x54a4 <httpd_data_in+0x602>
    54a2:	99 cf       	rjmp	.-206    	; 0x53d6 <httpd_data_in+0x534>
    54a4:	0f 5f       	subi	r16, 0xFF	; 255
    54a6:	1f 4f       	sbci	r17, 0xFF	; 255
    54a8:	98 01       	movw	r18, r16
    54aa:	2c 5f       	subi	r18, 0xFC	; 252
    54ac:	3f 4f       	sbci	r19, 0xFF	; 255
    54ae:	8d 89       	ldd	r24, Y+21	; 0x15
    54b0:	9e 89       	ldd	r25, Y+22	; 0x16
    54b2:	88 0d       	add	r24, r8
    54b4:	99 1d       	adc	r25, r9
    54b6:	28 17       	cp	r18, r24
    54b8:	39 07       	cpc	r19, r25
    54ba:	40 f3       	brcs	.-48     	; 0x548c <httpd_data_in+0x5ea>
    54bc:	40 e0       	ldi	r20, 0x00	; 0
    54be:	be 01       	movw	r22, r28
    54c0:	6b 5f       	subi	r22, 0xFB	; 251
    54c2:	7f 4f       	sbci	r23, 0xFF	; 255
    54c4:	8e ec       	ldi	r24, 0xCE	; 206
    54c6:	90 e2       	ldi	r25, 0x20	; 32
    54c8:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    54cc:	88 23       	and	r24, r24
    54ce:	09 f4       	brne	.+2      	; 0x54d2 <httpd_data_in+0x630>
    54d0:	65 c0       	rjmp	.+202    	; 0x559c <httpd_data_in+0x6fa>
    54d2:	82 01       	movw	r16, r4
    54d4:	08 0d       	add	r16, r8
    54d6:	19 1d       	adc	r17, r9
    54d8:	74 01       	movw	r14, r8
    54da:	45 e1       	ldi	r20, 0x15	; 21
    54dc:	c4 2e       	mov	r12, r20
    54de:	d1 2c       	mov	r13, r1
    54e0:	c0 0e       	add	r12, r16
    54e2:	d1 1e       	adc	r13, r17
    54e4:	29 c0       	rjmp	.+82     	; 0x5538 <httpd_data_in+0x696>
    54e6:	d8 01       	movw	r26, r16
    54e8:	8c 91       	ld	r24, X
    54ea:	81 34       	cpi	r24, 0x41	; 65
    54ec:	e9 f4       	brne	.+58     	; 0x5528 <httpd_data_in+0x686>
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	b8 01       	movw	r22, r16
    54f2:	88 eb       	ldi	r24, 0xB8	; 184
    54f4:	90 e2       	ldi	r25, 0x20	; 32
    54f6:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    54fa:	88 23       	and	r24, r24
    54fc:	a9 f0       	breq	.+42     	; 0x5528 <httpd_data_in+0x686>
    54fe:	f6 01       	movw	r30, r12
    5500:	60 e0       	ldi	r22, 0x00	; 0
    5502:	80 81       	ld	r24, Z
    5504:	80 33       	cpi	r24, 0x30	; 48
    5506:	20 f0       	brcs	.+8      	; 0x5510 <httpd_data_in+0x66e>
    5508:	6f 5f       	subi	r22, 0xFF	; 255
    550a:	31 96       	adiw	r30, 0x01	; 1
    550c:	64 36       	cpi	r22, 0x64	; 100
    550e:	c9 f7       	brne	.-14     	; 0x5502 <httpd_data_in+0x660>
    5510:	c6 01       	movw	r24, r12
    5512:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <base64_decode>
    5516:	41 e0       	ldi	r20, 0x01	; 1
    5518:	b6 01       	movw	r22, r12
    551a:	8c ea       	ldi	r24, 0xAC	; 172
    551c:	90 e2       	ldi	r25, 0x20	; 32
    551e:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    5522:	88 23       	and	r24, r24
    5524:	89 f4       	brne	.+34     	; 0x5548 <httpd_data_in+0x6a6>
    5526:	3a c0       	rjmp	.+116    	; 0x559c <httpd_data_in+0x6fa>
    5528:	08 94       	sec
    552a:	e1 1c       	adc	r14, r1
    552c:	f1 1c       	adc	r15, r1
    552e:	08 94       	sec
    5530:	c1 1c       	adc	r12, r1
    5532:	d1 1c       	adc	r13, r1
    5534:	0f 5f       	subi	r16, 0xFF	; 255
    5536:	1f 4f       	sbci	r17, 0xFF	; 255
    5538:	8d 89       	ldd	r24, Y+21	; 0x15
    553a:	9e 89       	ldd	r25, Y+22	; 0x16
    553c:	88 0d       	add	r24, r8
    553e:	99 1d       	adc	r25, r9
    5540:	e8 16       	cp	r14, r24
    5542:	f9 06       	cpc	r15, r25
    5544:	80 f2       	brcs	.-96     	; 0x54e6 <httpd_data_in+0x644>
    5546:	2a c0       	rjmp	.+84     	; 0x559c <httpd_data_in+0x6fa>
    5548:	c1 01       	movw	r24, r2
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	8c 01       	movw	r16, r24
    5550:	23 e0       	ldi	r18, 0x03	; 3
    5552:	00 0f       	add	r16, r16
    5554:	11 1f       	adc	r17, r17
    5556:	2a 95       	dec	r18
    5558:	e1 f7       	brne	.-8      	; 0x5552 <httpd_data_in+0x6b0>
    555a:	08 1b       	sub	r16, r24
    555c:	19 0b       	sbc	r17, r25
    555e:	01 51       	subi	r16, 0x11	; 17
    5560:	1a 4f       	sbci	r17, 0xFA	; 250
    5562:	f8 01       	movw	r30, r16
    5564:	e2 80       	ldd	r14, Z+2	; 0x02
    5566:	f3 80       	ldd	r15, Z+3	; 0x03
    5568:	fe e0       	ldi	r31, 0x0E	; 14
    556a:	ef 16       	cp	r14, r31
    556c:	f1 04       	cpc	r15, r1
    556e:	c1 f4       	brne	.+48     	; 0x55a0 <httpd_data_in+0x6fe>
    5570:	ce 01       	movw	r24, r28
    5572:	0c 96       	adiw	r24, 0x0c	; 12
    5574:	0e 94 3a 23 	call	0x4674	; 0x4674 <string_buffer_to_uint16>
    5578:	9c 01       	movw	r18, r24
    557a:	81 50       	subi	r24, 0x01	; 1
    557c:	9f 4f       	sbci	r25, 0xFF	; 255
    557e:	f8 01       	movw	r30, r16
    5580:	93 83       	std	Z+3, r25	; 0x03
    5582:	82 83       	std	Z+2, r24	; 0x02
    5584:	8f 3f       	cpi	r24, 0xFF	; 255
    5586:	91 05       	cpc	r25, r1
    5588:	59 f0       	breq	.+22     	; 0x55a0 <httpd_data_in+0x6fe>
    558a:	c9 01       	movw	r24, r18
    558c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <filesystem_delete_file>
    5590:	f8 01       	movw	r30, r16
    5592:	f3 82       	std	Z+3, r15	; 0x03
    5594:	e2 82       	std	Z+2, r14	; 0x02
    5596:	f1 e0       	ldi	r31, 0x01	; 1
    5598:	fc 8b       	std	Y+20, r31	; 0x14
    559a:	04 c0       	rjmp	.+8      	; 0x55a4 <httpd_data_in+0x702>
    559c:	1c 8a       	std	Y+20, r1	; 0x14
    559e:	02 c0       	rjmp	.+4      	; 0x55a4 <httpd_data_in+0x702>
    55a0:	21 e0       	ldi	r18, 0x01	; 1
    55a2:	2c 8b       	std	Y+20, r18	; 0x14
    55a4:	54 01       	movw	r10, r8
    55a6:	ee 24       	eor	r14, r14
    55a8:	ff 24       	eor	r15, r15
    55aa:	a7 c0       	rjmp	.+334    	; 0x56fa <httpd_data_in+0x858>
    55ac:	f2 01       	movw	r30, r4
    55ae:	ea 0d       	add	r30, r10
    55b0:	fb 1d       	adc	r31, r11
    55b2:	e0 81       	ld	r30, Z
    55b4:	ed 30       	cpi	r30, 0x0D	; 13
    55b6:	c9 f4       	brne	.+50     	; 0x55ea <httpd_data_in+0x748>
    55b8:	c1 01       	movw	r24, r2
    55ba:	88 0f       	add	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	fc 01       	movw	r30, r24
    55c0:	a3 e0       	ldi	r26, 0x03	; 3
    55c2:	ee 0f       	add	r30, r30
    55c4:	ff 1f       	adc	r31, r31
    55c6:	aa 95       	dec	r26
    55c8:	e1 f7       	brne	.-8      	; 0x55c2 <httpd_data_in+0x720>
    55ca:	e8 1b       	sub	r30, r24
    55cc:	f9 0b       	sbc	r31, r25
    55ce:	e1 51       	subi	r30, 0x11	; 17
    55d0:	fa 4f       	sbci	r31, 0xFA	; 250
    55d2:	21 81       	ldd	r18, Z+1	; 0x01
    55d4:	82 2f       	mov	r24, r18
    55d6:	99 27       	eor	r25, r25
    55d8:	87 70       	andi	r24, 0x07	; 7
    55da:	90 70       	andi	r25, 0x00	; 0
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	f1 f0       	breq	.+60     	; 0x561c <httpd_data_in+0x77a>
    55e0:	02 97       	sbiw	r24, 0x02	; 2
    55e2:	e1 f0       	breq	.+56     	; 0x561c <httpd_data_in+0x77a>
    55e4:	28 7f       	andi	r18, 0xF8	; 248
    55e6:	21 83       	std	Z+1, r18	; 0x01
    55e8:	28 c0       	rjmp	.+80     	; 0x563a <httpd_data_in+0x798>
    55ea:	91 01       	movw	r18, r2
    55ec:	22 0f       	add	r18, r18
    55ee:	33 1f       	adc	r19, r19
    55f0:	ea 30       	cpi	r30, 0x0A	; 10
    55f2:	b1 f4       	brne	.+44     	; 0x5620 <httpd_data_in+0x77e>
    55f4:	f9 01       	movw	r30, r18
    55f6:	63 e0       	ldi	r22, 0x03	; 3
    55f8:	ee 0f       	add	r30, r30
    55fa:	ff 1f       	adc	r31, r31
    55fc:	6a 95       	dec	r22
    55fe:	e1 f7       	brne	.-8      	; 0x55f8 <httpd_data_in+0x756>
    5600:	e2 1b       	sub	r30, r18
    5602:	f3 0b       	sbc	r31, r19
    5604:	e1 51       	subi	r30, 0x11	; 17
    5606:	fa 4f       	sbci	r31, 0xFA	; 250
    5608:	21 81       	ldd	r18, Z+1	; 0x01
    560a:	82 2f       	mov	r24, r18
    560c:	99 27       	eor	r25, r25
    560e:	87 70       	andi	r24, 0x07	; 7
    5610:	90 70       	andi	r25, 0x00	; 0
    5612:	81 30       	cpi	r24, 0x01	; 1
    5614:	91 05       	cpc	r25, r1
    5616:	11 f0       	breq	.+4      	; 0x561c <httpd_data_in+0x77a>
    5618:	03 97       	sbiw	r24, 0x03	; 3
    561a:	21 f7       	brne	.-56     	; 0x55e4 <httpd_data_in+0x742>
    561c:	2f 5f       	subi	r18, 0xFF	; 255
    561e:	e3 cf       	rjmp	.-58     	; 0x55e6 <httpd_data_in+0x744>
    5620:	f9 01       	movw	r30, r18
    5622:	53 e0       	ldi	r21, 0x03	; 3
    5624:	ee 0f       	add	r30, r30
    5626:	ff 1f       	adc	r31, r31
    5628:	5a 95       	dec	r21
    562a:	e1 f7       	brne	.-8      	; 0x5624 <httpd_data_in+0x782>
    562c:	e2 1b       	sub	r30, r18
    562e:	f3 0b       	sbc	r31, r19
    5630:	e1 51       	subi	r30, 0x11	; 17
    5632:	fa 4f       	sbci	r31, 0xFA	; 250
    5634:	81 81       	ldd	r24, Z+1	; 0x01
    5636:	88 7f       	andi	r24, 0xF8	; 248
    5638:	81 83       	std	Z+1, r24	; 0x01
    563a:	c1 01       	movw	r24, r2
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	fc 01       	movw	r30, r24
    5642:	33 e0       	ldi	r19, 0x03	; 3
    5644:	ee 0f       	add	r30, r30
    5646:	ff 1f       	adc	r31, r31
    5648:	3a 95       	dec	r19
    564a:	e1 f7       	brne	.-8      	; 0x5644 <httpd_data_in+0x7a2>
    564c:	e8 1b       	sub	r30, r24
    564e:	f9 0b       	sbc	r31, r25
    5650:	e1 51       	subi	r30, 0x11	; 17
    5652:	fa 4f       	sbci	r31, 0xFA	; 250
    5654:	81 81       	ldd	r24, Z+1	; 0x01
    5656:	28 2f       	mov	r18, r24
    5658:	33 27       	eor	r19, r19
    565a:	c9 01       	movw	r24, r18
    565c:	87 70       	andi	r24, 0x07	; 7
    565e:	90 70       	andi	r25, 0x00	; 0
    5660:	04 97       	sbiw	r24, 0x04	; 4
    5662:	09 f0       	breq	.+2      	; 0x5666 <httpd_data_in+0x7c4>
    5664:	47 c0       	rjmp	.+142    	; 0x56f4 <httpd_data_in+0x852>
    5666:	82 81       	ldd	r24, Z+2	; 0x02
    5668:	93 81       	ldd	r25, Z+3	; 0x03
    566a:	8e 3f       	cpi	r24, 0xFE	; 254
    566c:	91 05       	cpc	r25, r1
    566e:	09 f0       	breq	.+2      	; 0x5672 <httpd_data_in+0x7d0>
    5670:	4c c0       	rjmp	.+152    	; 0x570a <httpd_data_in+0x868>
    5672:	23 fd       	sbrc	r18, 3
    5674:	4a c0       	rjmp	.+148    	; 0x570a <httpd_data_in+0x868>
    5676:	82 01       	movw	r16, r4
    5678:	0a 0d       	add	r16, r10
    567a:	1b 1d       	adc	r17, r11
    567c:	65 01       	movw	r12, r10
    567e:	78 01       	movw	r14, r16
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	b8 01       	movw	r22, r16
    5684:	81 ea       	ldi	r24, 0xA1	; 161
    5686:	90 e2       	ldi	r25, 0x20	; 32
    5688:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    568c:	88 23       	and	r24, r24
    568e:	b1 f0       	breq	.+44     	; 0x56bc <httpd_data_in+0x81a>
    5690:	b6 01       	movw	r22, r12
    5692:	66 5f       	subi	r22, 0xF6	; 246
    5694:	7f 4f       	sbci	r23, 0xFF	; 255
    5696:	f7 01       	movw	r30, r14
    5698:	3a 96       	adiw	r30, 0x0a	; 10
    569a:	02 c0       	rjmp	.+4      	; 0x56a0 <httpd_data_in+0x7fe>
    569c:	6f 5f       	subi	r22, 0xFF	; 255
    569e:	7f 4f       	sbci	r23, 0xFF	; 255
    56a0:	df 01       	movw	r26, r30
    56a2:	81 91       	ld	r24, Z+
    56a4:	8e 32       	cpi	r24, 0x2E	; 46
    56a6:	d1 f7       	brne	.-12     	; 0x569c <httpd_data_in+0x7fa>
    56a8:	1c 92       	st	X, r1
    56aa:	64 0d       	add	r22, r4
    56ac:	75 1d       	adc	r23, r5
    56ae:	6f 5f       	subi	r22, 0xFF	; 255
    56b0:	7f 4f       	sbci	r23, 0xFF	; 255
    56b2:	c7 01       	movw	r24, r14
    56b4:	0a 96       	adiw	r24, 0x0a	; 10
    56b6:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <filesystem_open_file_wr>
    56ba:	0b c0       	rjmp	.+22     	; 0x56d2 <httpd_data_in+0x830>
    56bc:	08 94       	sec
    56be:	c1 1c       	adc	r12, r1
    56c0:	d1 1c       	adc	r13, r1
    56c2:	08 94       	sec
    56c4:	e1 1c       	adc	r14, r1
    56c6:	f1 1c       	adc	r15, r1
    56c8:	0f 5f       	subi	r16, 0xFF	; 255
    56ca:	1f 4f       	sbci	r17, 0xFF	; 255
    56cc:	c6 14       	cp	r12, r6
    56ce:	d7 04       	cpc	r13, r7
    56d0:	b9 f6       	brne	.-82     	; 0x5680 <httpd_data_in+0x7de>
    56d2:	c1 01       	movw	r24, r2
    56d4:	88 0f       	add	r24, r24
    56d6:	99 1f       	adc	r25, r25
    56d8:	fc 01       	movw	r30, r24
    56da:	03 e0       	ldi	r16, 0x03	; 3
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	0a 95       	dec	r16
    56e2:	e1 f7       	brne	.-8      	; 0x56dc <httpd_data_in+0x83a>
    56e4:	e8 1b       	sub	r30, r24
    56e6:	f9 0b       	sbc	r31, r25
    56e8:	e1 51       	subi	r30, 0x11	; 17
    56ea:	fa 4f       	sbci	r31, 0xFA	; 250
    56ec:	88 e0       	ldi	r24, 0x08	; 8
    56ee:	81 83       	std	Z+1, r24	; 0x01
    56f0:	75 01       	movw	r14, r10
    56f2:	56 01       	movw	r10, r12
    56f4:	08 94       	sec
    56f6:	a1 1c       	adc	r10, r1
    56f8:	b1 1c       	adc	r11, r1
    56fa:	6d 88       	ldd	r6, Y+21	; 0x15
    56fc:	7e 88       	ldd	r7, Y+22	; 0x16
    56fe:	68 0c       	add	r6, r8
    5700:	79 1c       	adc	r7, r9
    5702:	a6 14       	cp	r10, r6
    5704:	b7 04       	cpc	r11, r7
    5706:	08 f4       	brcc	.+2      	; 0x570a <httpd_data_in+0x868>
    5708:	51 cf       	rjmp	.-350    	; 0x55ac <httpd_data_in+0x70a>
    570a:	3c 89       	ldd	r19, Y+20	; 0x14
    570c:	33 23       	and	r19, r19
    570e:	69 f5       	brne	.+90     	; 0x576a <httpd_data_in+0x8c8>
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	be 01       	movw	r22, r28
    5714:	6b 5f       	subi	r22, 0xFB	; 251
    5716:	7f 4f       	sbci	r23, 0xFF	; 255
    5718:	8c e9       	ldi	r24, 0x9C	; 156
    571a:	90 e2       	ldi	r25, 0x20	; 32
    571c:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    5720:	88 23       	and	r24, r24
    5722:	19 f1       	breq	.+70     	; 0x576a <httpd_data_in+0x8c8>
    5724:	18 ee       	ldi	r17, 0xE8	; 232
    5726:	e1 2e       	mov	r14, r17
    5728:	13 e0       	ldi	r17, 0x03	; 3
    572a:	f1 2e       	mov	r15, r17
    572c:	00 e0       	ldi	r16, 0x00	; 0
    572e:	10 e0       	ldi	r17, 0x00	; 0
    5730:	26 e3       	ldi	r18, 0x36	; 54
    5732:	30 e0       	ldi	r19, 0x00	; 0
    5734:	a2 01       	movw	r20, r4
    5736:	60 e0       	ldi	r22, 0x00	; 0
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	80 e4       	ldi	r24, 0x40	; 64
    573c:	98 e0       	ldi	r25, 0x08	; 8
    573e:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    5742:	91 01       	movw	r18, r2
    5744:	22 0f       	add	r18, r18
    5746:	33 1f       	adc	r19, r19
    5748:	f9 01       	movw	r30, r18
    574a:	a3 e0       	ldi	r26, 0x03	; 3
    574c:	ee 0f       	add	r30, r30
    574e:	ff 1f       	adc	r31, r31
    5750:	aa 95       	dec	r26
    5752:	e1 f7       	brne	.-8      	; 0x574c <httpd_data_in+0x8aa>
    5754:	e2 1b       	sub	r30, r18
    5756:	f3 0b       	sbc	r31, r19
    5758:	e1 51       	subi	r30, 0x11	; 17
    575a:	fa 4f       	sbci	r31, 0xFA	; 250
    575c:	2f e6       	ldi	r18, 0x6F	; 111
    575e:	20 83       	st	Z, r18
    5760:	22 e0       	ldi	r18, 0x02	; 2
    5762:	af 89       	ldd	r26, Y+23	; 0x17
    5764:	b8 8d       	ldd	r27, Y+24	; 0x18
    5766:	2c 93       	st	X, r18
    5768:	e0 c0       	rjmp	.+448    	; 0x592a <httpd_data_in+0xa88>
    576a:	c1 01       	movw	r24, r2
    576c:	88 0f       	add	r24, r24
    576e:	99 1f       	adc	r25, r25
    5770:	8c 01       	movw	r16, r24
    5772:	73 e0       	ldi	r23, 0x03	; 3
    5774:	00 0f       	add	r16, r16
    5776:	11 1f       	adc	r17, r17
    5778:	7a 95       	dec	r23
    577a:	e1 f7       	brne	.-8      	; 0x5774 <httpd_data_in+0x8d2>
    577c:	08 1b       	sub	r16, r24
    577e:	19 0b       	sbc	r17, r25
    5780:	01 51       	subi	r16, 0x11	; 17
    5782:	1a 4f       	sbci	r17, 0xFA	; 250
    5784:	f8 01       	movw	r30, r16
    5786:	41 81       	ldd	r20, Z+1	; 0x01
    5788:	24 2f       	mov	r18, r20
    578a:	33 27       	eor	r19, r19
    578c:	c9 01       	movw	r24, r18
    578e:	87 70       	andi	r24, 0x07	; 7
    5790:	90 70       	andi	r25, 0x00	; 0
    5792:	04 97       	sbiw	r24, 0x04	; 4
    5794:	09 f0       	breq	.+2      	; 0x5798 <httpd_data_in+0x8f6>
    5796:	15 c3       	rjmp	.+1578   	; 0x5dc2 <httpd_data_in+0xf20>
    5798:	82 81       	ldd	r24, Z+2	; 0x02
    579a:	93 81       	ldd	r25, Z+3	; 0x03
    579c:	8e 3f       	cpi	r24, 0xFE	; 254
    579e:	91 05       	cpc	r25, r1
    57a0:	c1 f5       	brne	.+112    	; 0x5812 <httpd_data_in+0x970>
    57a2:	44 30       	cpi	r20, 0x04	; 4
    57a4:	09 f4       	brne	.+2      	; 0x57a8 <httpd_data_in+0x906>
    57a6:	11 c3       	rjmp	.+1570   	; 0x5dca <httpd_data_in+0xf28>
    57a8:	23 fd       	sbrc	r18, 3
    57aa:	06 c0       	rjmp	.+12     	; 0x57b8 <httpd_data_in+0x916>
    57ac:	60 e7       	ldi	r22, 0x70	; 112
    57ae:	70 e0       	ldi	r23, 0x00	; 0
    57b0:	84 e7       	ldi	r24, 0x74	; 116
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <filesystem_open_file_wr>
    57b8:	95 01       	movw	r18, r10
    57ba:	2f 5f       	subi	r18, 0xFF	; 255
    57bc:	3f 4f       	sbci	r19, 0xFF	; 255
    57be:	c9 01       	movw	r24, r18
    57c0:	88 19       	sub	r24, r8
    57c2:	99 09       	sbc	r25, r9
    57c4:	6d 89       	ldd	r22, Y+21	; 0x15
    57c6:	7e 89       	ldd	r23, Y+22	; 0x16
    57c8:	68 1b       	sub	r22, r24
    57ca:	79 0b       	sbc	r23, r25
    57cc:	40 e0       	ldi	r20, 0x00	; 0
    57ce:	c2 01       	movw	r24, r4
    57d0:	82 0f       	add	r24, r18
    57d2:	93 1f       	adc	r25, r19
    57d4:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <filesystem_write_data>
    57d8:	80 e7       	ldi	r24, 0x70	; 112
    57da:	d8 01       	movw	r26, r16
    57dc:	8c 93       	st	X, r24
    57de:	e8 18       	sub	r14, r8
    57e0:	f9 08       	sbc	r15, r9
    57e2:	ed 89       	ldd	r30, Y+21	; 0x15
    57e4:	fe 89       	ldd	r31, Y+22	; 0x16
    57e6:	ee 19       	sub	r30, r14
    57e8:	ff 09       	sbc	r31, r15
    57ea:	fe 8b       	std	Y+22, r31	; 0x16
    57ec:	ed 8b       	std	Y+21, r30	; 0x15
    57ee:	31 97       	sbiw	r30, 0x01	; 1
    57f0:	9f 01       	movw	r18, r30
    57f2:	44 27       	eor	r20, r20
    57f4:	55 27       	eor	r21, r21
    57f6:	f8 01       	movw	r30, r16
    57f8:	82 85       	ldd	r24, Z+10	; 0x0a
    57fa:	93 85       	ldd	r25, Z+11	; 0x0b
    57fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    57fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    5800:	82 1b       	sub	r24, r18
    5802:	93 0b       	sbc	r25, r19
    5804:	a4 0b       	sbc	r26, r20
    5806:	b5 0b       	sbc	r27, r21
    5808:	82 87       	std	Z+10, r24	; 0x0a
    580a:	93 87       	std	Z+11, r25	; 0x0b
    580c:	a4 87       	std	Z+12, r26	; 0x0c
    580e:	b5 87       	std	Z+13, r27	; 0x0d
    5810:	d8 c2       	rjmp	.+1456   	; 0x5dc2 <httpd_data_in+0xf20>
    5812:	68 ee       	ldi	r22, 0xE8	; 232
    5814:	e6 2e       	mov	r14, r22
    5816:	63 e0       	ldi	r22, 0x03	; 3
    5818:	f6 2e       	mov	r15, r22
    581a:	00 e0       	ldi	r16, 0x00	; 0
    581c:	10 e0       	ldi	r17, 0x00	; 0
    581e:	26 e3       	ldi	r18, 0x36	; 54
    5820:	30 e0       	ldi	r19, 0x00	; 0
    5822:	a2 01       	movw	r20, r4
    5824:	60 e0       	ldi	r22, 0x00	; 0
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	86 ef       	ldi	r24, 0xF6	; 246
    582a:	97 e0       	ldi	r25, 0x07	; 7
    582c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    5830:	9c 01       	movw	r18, r24
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	87 36       	cpi	r24, 0x67	; 103
    5836:	89 f1       	breq	.+98     	; 0x589a <httpd_data_in+0x9f8>
    5838:	88 36       	cpi	r24, 0x68	; 104
    583a:	18 f4       	brcc	.+6      	; 0x5842 <httpd_data_in+0x9a0>
    583c:	82 36       	cpi	r24, 0x62	; 98
    583e:	d1 f5       	brne	.+116    	; 0x58b4 <httpd_data_in+0xa12>
    5840:	1f c0       	rjmp	.+62     	; 0x5880 <httpd_data_in+0x9de>
    5842:	8a 36       	cpi	r24, 0x6A	; 106
    5844:	19 f0       	breq	.+6      	; 0x584c <httpd_data_in+0x9aa>
    5846:	80 37       	cpi	r24, 0x70	; 112
    5848:	a9 f5       	brne	.+106    	; 0x58b4 <httpd_data_in+0xa12>
    584a:	0d c0       	rjmp	.+26     	; 0x5866 <httpd_data_in+0x9c4>
    584c:	8e e1       	ldi	r24, 0x1E	; 30
    584e:	94 e0       	ldi	r25, 0x04	; 4
    5850:	82 1b       	sub	r24, r18
    5852:	93 0b       	sbc	r25, r19
    5854:	7c 01       	movw	r14, r24
    5856:	00 e0       	ldi	r16, 0x00	; 0
    5858:	10 e0       	ldi	r17, 0x00	; 0
    585a:	a2 01       	movw	r20, r4
    585c:	60 e0       	ldi	r22, 0x00	; 0
    585e:	70 e0       	ldi	r23, 0x00	; 0
    5860:	85 e4       	ldi	r24, 0x45	; 69
    5862:	99 e0       	ldi	r25, 0x09	; 9
    5864:	33 c0       	rjmp	.+102    	; 0x58cc <httpd_data_in+0xa2a>
    5866:	8e e1       	ldi	r24, 0x1E	; 30
    5868:	94 e0       	ldi	r25, 0x04	; 4
    586a:	82 1b       	sub	r24, r18
    586c:	93 0b       	sbc	r25, r19
    586e:	7c 01       	movw	r14, r24
    5870:	00 e0       	ldi	r16, 0x00	; 0
    5872:	10 e0       	ldi	r17, 0x00	; 0
    5874:	a2 01       	movw	r20, r4
    5876:	60 e0       	ldi	r22, 0x00	; 0
    5878:	70 e0       	ldi	r23, 0x00	; 0
    587a:	80 e5       	ldi	r24, 0x50	; 80
    587c:	99 e0       	ldi	r25, 0x09	; 9
    587e:	26 c0       	rjmp	.+76     	; 0x58cc <httpd_data_in+0xa2a>
    5880:	8e e1       	ldi	r24, 0x1E	; 30
    5882:	94 e0       	ldi	r25, 0x04	; 4
    5884:	82 1b       	sub	r24, r18
    5886:	93 0b       	sbc	r25, r19
    5888:	7c 01       	movw	r14, r24
    588a:	00 e0       	ldi	r16, 0x00	; 0
    588c:	10 e0       	ldi	r17, 0x00	; 0
    588e:	a2 01       	movw	r20, r4
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	70 e0       	ldi	r23, 0x00	; 0
    5894:	8b e3       	ldi	r24, 0x3B	; 59
    5896:	99 e0       	ldi	r25, 0x09	; 9
    5898:	19 c0       	rjmp	.+50     	; 0x58cc <httpd_data_in+0xa2a>
    589a:	8e e1       	ldi	r24, 0x1E	; 30
    589c:	94 e0       	ldi	r25, 0x04	; 4
    589e:	82 1b       	sub	r24, r18
    58a0:	93 0b       	sbc	r25, r19
    58a2:	7c 01       	movw	r14, r24
    58a4:	00 e0       	ldi	r16, 0x00	; 0
    58a6:	10 e0       	ldi	r17, 0x00	; 0
    58a8:	a2 01       	movw	r20, r4
    58aa:	60 e0       	ldi	r22, 0x00	; 0
    58ac:	70 e0       	ldi	r23, 0x00	; 0
    58ae:	8a e5       	ldi	r24, 0x5A	; 90
    58b0:	99 e0       	ldi	r25, 0x09	; 9
    58b2:	0c c0       	rjmp	.+24     	; 0x58cc <httpd_data_in+0xa2a>
    58b4:	8e e1       	ldi	r24, 0x1E	; 30
    58b6:	94 e0       	ldi	r25, 0x04	; 4
    58b8:	82 1b       	sub	r24, r18
    58ba:	93 0b       	sbc	r25, r19
    58bc:	7c 01       	movw	r14, r24
    58be:	00 e0       	ldi	r16, 0x00	; 0
    58c0:	10 e0       	ldi	r17, 0x00	; 0
    58c2:	a2 01       	movw	r20, r4
    58c4:	60 e0       	ldi	r22, 0x00	; 0
    58c6:	70 e0       	ldi	r23, 0x00	; 0
    58c8:	81 e3       	ldi	r24, 0x31	; 49
    58ca:	99 e0       	ldi	r25, 0x09	; 9
    58cc:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    58d0:	9c 01       	movw	r18, r24
    58d2:	8e e1       	ldi	r24, 0x1E	; 30
    58d4:	94 e0       	ldi	r25, 0x04	; 4
    58d6:	82 1b       	sub	r24, r18
    58d8:	93 0b       	sbc	r25, r19
    58da:	7c 01       	movw	r14, r24
    58dc:	00 e0       	ldi	r16, 0x00	; 0
    58de:	10 e0       	ldi	r17, 0x00	; 0
    58e0:	a2 01       	movw	r20, r4
    58e2:	60 e0       	ldi	r22, 0x00	; 0
    58e4:	70 e0       	ldi	r23, 0x00	; 0
    58e6:	84 e6       	ldi	r24, 0x64	; 100
    58e8:	99 e0       	ldi	r25, 0x09	; 9
    58ea:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    58ee:	22 e0       	ldi	r18, 0x02	; 2
    58f0:	ef 89       	ldd	r30, Y+23	; 0x17
    58f2:	f8 8d       	ldd	r31, Y+24	; 0x18
    58f4:	20 83       	st	Z, r18
    58f6:	91 01       	movw	r18, r2
    58f8:	22 0f       	add	r18, r18
    58fa:	33 1f       	adc	r19, r19
    58fc:	f9 01       	movw	r30, r18
    58fe:	43 e0       	ldi	r20, 0x03	; 3
    5900:	ee 0f       	add	r30, r30
    5902:	ff 1f       	adc	r31, r31
    5904:	4a 95       	dec	r20
    5906:	e1 f7       	brne	.-8      	; 0x5900 <httpd_data_in+0xa5e>
    5908:	e2 1b       	sub	r30, r18
    590a:	f3 0b       	sbc	r31, r19
    590c:	e1 51       	subi	r30, 0x11	; 17
    590e:	fa 4f       	sbci	r31, 0xFA	; 250
    5910:	2e e6       	ldi	r18, 0x6E	; 110
    5912:	20 83       	st	Z, r18
    5914:	9c 01       	movw	r18, r24
    5916:	28 19       	sub	r18, r8
    5918:	39 09       	sbc	r19, r9
    591a:	2f 5f       	subi	r18, 0xFF	; 255
    591c:	3f 4f       	sbci	r19, 0xFF	; 255
    591e:	44 27       	eor	r20, r20
    5920:	55 27       	eor	r21, r21
    5922:	24 83       	std	Z+4, r18	; 0x04
    5924:	35 83       	std	Z+5, r19	; 0x05
    5926:	46 83       	std	Z+6, r20	; 0x06
    5928:	57 83       	std	Z+7, r21	; 0x07
    592a:	c6 97       	sbiw	r24, 0x36	; 54
    592c:	53 c2       	rjmp	.+1190   	; 0x5dd4 <httpd_data_in+0xf32>
    592e:	83 e1       	ldi	r24, 0x13	; 19
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	28 9e       	mul	r2, r24
    5934:	f0 01       	movw	r30, r0
    5936:	29 9e       	mul	r2, r25
    5938:	f0 0d       	add	r31, r0
    593a:	38 9e       	mul	r3, r24
    593c:	f0 0d       	add	r31, r0
    593e:	11 24       	eor	r1, r1
    5940:	e5 58       	subi	r30, 0x85	; 133
    5942:	f9 4f       	sbci	r31, 0xF9	; 249
    5944:	80 84       	ldd	r8, Z+8	; 0x08
    5946:	91 84       	ldd	r9, Z+9	; 0x09
    5948:	a2 84       	ldd	r10, Z+10	; 0x0a
    594a:	b3 84       	ldd	r11, Z+11	; 0x0b
    594c:	f3 01       	movw	r30, r6
    594e:	84 81       	ldd	r24, Z+4	; 0x04
    5950:	95 81       	ldd	r25, Z+5	; 0x05
    5952:	a6 81       	ldd	r26, Z+6	; 0x06
    5954:	b7 81       	ldd	r27, Z+7	; 0x07
    5956:	88 1a       	sub	r8, r24
    5958:	99 0a       	sbc	r9, r25
    595a:	aa 0a       	sbc	r10, r26
    595c:	bb 0a       	sbc	r11, r27
    595e:	82 e0       	ldi	r24, 0x02	; 2
    5960:	af 89       	ldd	r26, Y+23	; 0x17
    5962:	b8 8d       	ldd	r27, Y+24	; 0x18
    5964:	8c 93       	st	X, r24
    5966:	a2 81       	ldd	r26, Z+2	; 0x02
    5968:	b3 81       	ldd	r27, Z+3	; 0x03
    596a:	af 3f       	cpi	r26, 0xFF	; 255
    596c:	b1 05       	cpc	r27, r1
    596e:	11 f0       	breq	.+4      	; 0x5974 <httpd_data_in+0xad2>
    5970:	08 f0       	brcs	.+2      	; 0x5974 <httpd_data_in+0xad2>
    5972:	25 c1       	rjmp	.+586    	; 0x5bbe <httpd_data_in+0xd1c>
    5974:	fd 01       	movw	r30, r26
    5976:	cf 01       	movw	r24, r30
    5978:	aa 27       	eor	r26, r26
    597a:	bb 27       	eor	r27, r27
    597c:	90 70       	andi	r25, 0x00	; 0
    597e:	a0 70       	andi	r26, 0x00	; 0
    5980:	b0 70       	andi	r27, 0x00	; 0
    5982:	fc 01       	movw	r30, r24
    5984:	31 97       	sbiw	r30, 0x01	; 1
    5986:	e5 31       	cpi	r30, 0x15	; 21
    5988:	f1 05       	cpc	r31, r1
    598a:	08 f0       	brcs	.+2      	; 0x598e <httpd_data_in+0xaec>
    598c:	0b c1       	rjmp	.+534    	; 0x5ba4 <httpd_data_in+0xd02>
    598e:	e6 5d       	subi	r30, 0xD6	; 214
    5990:	ff 4f       	sbci	r31, 0xFF	; 255
    5992:	ee 0f       	add	r30, r30
    5994:	ff 1f       	adc	r31, r31
    5996:	05 90       	lpm	r0, Z+
    5998:	f4 91       	lpm	r31, Z
    599a:	e0 2d       	mov	r30, r0
    599c:	09 94       	ijmp
    599e:	08 ee       	ldi	r16, 0xE8	; 232
    59a0:	e0 2e       	mov	r14, r16
    59a2:	03 e0       	ldi	r16, 0x03	; 3
    59a4:	f0 2e       	mov	r15, r16
    59a6:	84 01       	movw	r16, r8
    59a8:	26 e3       	ldi	r18, 0x36	; 54
    59aa:	30 e0       	ldi	r19, 0x00	; 0
    59ac:	a2 01       	movw	r20, r4
    59ae:	60 e7       	ldi	r22, 0x70	; 112
    59b0:	7f e0       	ldi	r23, 0x0F	; 15
    59b2:	0a c0       	rjmp	.+20     	; 0x59c8 <httpd_data_in+0xb26>
    59b4:	18 ee       	ldi	r17, 0xE8	; 232
    59b6:	e1 2e       	mov	r14, r17
    59b8:	13 e0       	ldi	r17, 0x03	; 3
    59ba:	f1 2e       	mov	r15, r17
    59bc:	84 01       	movw	r16, r8
    59be:	26 e3       	ldi	r18, 0x36	; 54
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	a2 01       	movw	r20, r4
    59c4:	6d ea       	ldi	r22, 0xAD	; 173
    59c6:	76 e1       	ldi	r23, 0x16	; 22
    59c8:	89 e6       	ldi	r24, 0x69	; 105
    59ca:	99 e0       	ldi	r25, 0x09	; 9
    59cc:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    59d0:	ac 01       	movw	r20, r24
    59d2:	3c c1       	rjmp	.+632    	; 0x5c4c <httpd_data_in+0xdaa>
    59d4:	b8 ee       	ldi	r27, 0xE8	; 232
    59d6:	eb 2e       	mov	r14, r27
    59d8:	b3 e0       	ldi	r27, 0x03	; 3
    59da:	fb 2e       	mov	r15, r27
    59dc:	84 01       	movw	r16, r8
    59de:	26 e3       	ldi	r18, 0x36	; 54
    59e0:	30 e0       	ldi	r19, 0x00	; 0
    59e2:	a2 01       	movw	r20, r4
    59e4:	6a e4       	ldi	r22, 0x4A	; 74
    59e6:	70 e1       	ldi	r23, 0x10	; 16
    59e8:	ef cf       	rjmp	.-34     	; 0x59c8 <httpd_data_in+0xb26>
    59ea:	a8 ee       	ldi	r26, 0xE8	; 232
    59ec:	ea 2e       	mov	r14, r26
    59ee:	a3 e0       	ldi	r26, 0x03	; 3
    59f0:	fa 2e       	mov	r15, r26
    59f2:	84 01       	movw	r16, r8
    59f4:	26 e3       	ldi	r18, 0x36	; 54
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	a2 01       	movw	r20, r4
    59fa:	68 e8       	ldi	r22, 0x88	; 136
    59fc:	70 e1       	ldi	r23, 0x10	; 16
    59fe:	e4 cf       	rjmp	.-56     	; 0x59c8 <httpd_data_in+0xb26>
    5a00:	f8 ee       	ldi	r31, 0xE8	; 232
    5a02:	ef 2e       	mov	r14, r31
    5a04:	f3 e0       	ldi	r31, 0x03	; 3
    5a06:	ff 2e       	mov	r15, r31
    5a08:	84 01       	movw	r16, r8
    5a0a:	26 e3       	ldi	r18, 0x36	; 54
    5a0c:	30 e0       	ldi	r19, 0x00	; 0
    5a0e:	a2 01       	movw	r20, r4
    5a10:	6e eb       	ldi	r22, 0xBE	; 190
    5a12:	70 e1       	ldi	r23, 0x10	; 16
    5a14:	d9 cf       	rjmp	.-78     	; 0x59c8 <httpd_data_in+0xb26>
    5a16:	e8 ee       	ldi	r30, 0xE8	; 232
    5a18:	ee 2e       	mov	r14, r30
    5a1a:	e3 e0       	ldi	r30, 0x03	; 3
    5a1c:	fe 2e       	mov	r15, r30
    5a1e:	84 01       	movw	r16, r8
    5a20:	26 e3       	ldi	r18, 0x36	; 54
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	a2 01       	movw	r20, r4
    5a26:	6f e4       	ldi	r22, 0x4F	; 79
    5a28:	70 e1       	ldi	r23, 0x10	; 16
    5a2a:	ce cf       	rjmp	.-100    	; 0x59c8 <httpd_data_in+0xb26>
    5a2c:	78 ee       	ldi	r23, 0xE8	; 232
    5a2e:	e7 2e       	mov	r14, r23
    5a30:	73 e0       	ldi	r23, 0x03	; 3
    5a32:	f7 2e       	mov	r15, r23
    5a34:	84 01       	movw	r16, r8
    5a36:	26 e3       	ldi	r18, 0x36	; 54
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	a2 01       	movw	r20, r4
    5a3c:	67 e2       	ldi	r22, 0x27	; 39
    5a3e:	71 e1       	ldi	r23, 0x11	; 17
    5a40:	c3 cf       	rjmp	.-122    	; 0x59c8 <httpd_data_in+0xb26>
    5a42:	68 ee       	ldi	r22, 0xE8	; 232
    5a44:	e6 2e       	mov	r14, r22
    5a46:	63 e0       	ldi	r22, 0x03	; 3
    5a48:	f6 2e       	mov	r15, r22
    5a4a:	84 01       	movw	r16, r8
    5a4c:	26 e3       	ldi	r18, 0x36	; 54
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	a2 01       	movw	r20, r4
    5a52:	69 e6       	ldi	r22, 0x69	; 105
    5a54:	71 e1       	ldi	r23, 0x11	; 17
    5a56:	b8 cf       	rjmp	.-144    	; 0x59c8 <httpd_data_in+0xb26>
    5a58:	04 2f       	mov	r16, r20
    5a5a:	a5 01       	movw	r20, r10
    5a5c:	94 01       	movw	r18, r8
    5a5e:	68 ee       	ldi	r22, 0xE8	; 232
    5a60:	73 e0       	ldi	r23, 0x03	; 3
    5a62:	c2 01       	movw	r24, r4
    5a64:	c6 96       	adiw	r24, 0x36	; 54
    5a66:	0e 94 7e 17 	call	0x2efc	; 0x2efc <mca25_grab_data>
    5a6a:	9c 01       	movw	r18, r24
    5a6c:	8e 5f       	subi	r24, 0xFE	; 254
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	09 f5       	brne	.+66     	; 0x5ab4 <httpd_data_in+0xc12>
    5a72:	54 e5       	ldi	r21, 0x54	; 84
    5a74:	e5 2e       	mov	r14, r21
    5a76:	53 e0       	ldi	r21, 0x03	; 3
    5a78:	f5 2e       	mov	r15, r21
    5a7a:	08 ee       	ldi	r16, 0xE8	; 232
    5a7c:	13 e0       	ldi	r17, 0x03	; 3
    5a7e:	94 01       	movw	r18, r8
    5a80:	46 e3       	ldi	r20, 0x36	; 54
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	b2 01       	movw	r22, r4
    5a86:	88 ef       	ldi	r24, 0xF8	; 248
    5a88:	9c e1       	ldi	r25, 0x1C	; 28
    5a8a:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <httpd_add_progmem_data_bin>
    5a8e:	9c 01       	movw	r18, r24
    5a90:	c1 01       	movw	r24, r2
    5a92:	88 0f       	add	r24, r24
    5a94:	99 1f       	adc	r25, r25
    5a96:	fc 01       	movw	r30, r24
    5a98:	03 e0       	ldi	r16, 0x03	; 3
    5a9a:	ee 0f       	add	r30, r30
    5a9c:	ff 1f       	adc	r31, r31
    5a9e:	0a 95       	dec	r16
    5aa0:	e1 f7       	brne	.-8      	; 0x5a9a <httpd_data_in+0xbf8>
    5aa2:	e8 1b       	sub	r30, r24
    5aa4:	f9 0b       	sbc	r31, r25
    5aa6:	e1 51       	subi	r30, 0x11	; 17
    5aa8:	fa 4f       	sbci	r31, 0xFA	; 250
    5aaa:	86 e0       	ldi	r24, 0x06	; 6
    5aac:	90 e0       	ldi	r25, 0x00	; 0
    5aae:	93 83       	std	Z+3, r25	; 0x03
    5ab0:	82 83       	std	Z+2, r24	; 0x02
    5ab2:	07 c0       	rjmp	.+14     	; 0x5ac2 <httpd_data_in+0xc20>
    5ab4:	8f ef       	ldi	r24, 0xFF	; 255
    5ab6:	2f 3f       	cpi	r18, 0xFF	; 255
    5ab8:	38 07       	cpc	r19, r24
    5aba:	19 f4       	brne	.+6      	; 0x5ac2 <httpd_data_in+0xc20>
    5abc:	21 e0       	ldi	r18, 0x01	; 1
    5abe:	30 e0       	ldi	r19, 0x00	; 0
    5ac0:	04 c0       	rjmp	.+8      	; 0x5aca <httpd_data_in+0xc28>
    5ac2:	21 15       	cp	r18, r1
    5ac4:	31 05       	cpc	r19, r1
    5ac6:	09 f4       	brne	.+2      	; 0x5aca <httpd_data_in+0xc28>
    5ac8:	83 c1       	rjmp	.+774    	; 0x5dd0 <httpd_data_in+0xf2e>
    5aca:	a9 01       	movw	r20, r18
    5acc:	4a 5c       	subi	r20, 0xCA	; 202
    5ace:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad0:	bd c0       	rjmp	.+378    	; 0x5c4c <httpd_data_in+0xdaa>
    5ad2:	14 e5       	ldi	r17, 0x54	; 84
    5ad4:	e1 2e       	mov	r14, r17
    5ad6:	13 e0       	ldi	r17, 0x03	; 3
    5ad8:	f1 2e       	mov	r15, r17
    5ada:	08 ee       	ldi	r16, 0xE8	; 232
    5adc:	13 e0       	ldi	r17, 0x03	; 3
    5ade:	94 01       	movw	r18, r8
    5ae0:	46 e3       	ldi	r20, 0x36	; 54
    5ae2:	50 e0       	ldi	r21, 0x00	; 0
    5ae4:	b2 01       	movw	r22, r4
    5ae6:	88 ef       	ldi	r24, 0xF8	; 248
    5ae8:	9c e1       	ldi	r25, 0x1C	; 28
    5aea:	59 c0       	rjmp	.+178    	; 0x5b9e <httpd_data_in+0xcfc>
    5aec:	b8 ee       	ldi	r27, 0xE8	; 232
    5aee:	eb 2e       	mov	r14, r27
    5af0:	b3 e0       	ldi	r27, 0x03	; 3
    5af2:	fb 2e       	mov	r15, r27
    5af4:	84 01       	movw	r16, r8
    5af6:	26 e3       	ldi	r18, 0x36	; 54
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	a2 01       	movw	r20, r4
    5afc:	6f ef       	ldi	r22, 0xFF	; 255
    5afe:	73 e1       	ldi	r23, 0x13	; 19
    5b00:	63 cf       	rjmp	.-314    	; 0x59c8 <httpd_data_in+0xb26>
    5b02:	a8 ee       	ldi	r26, 0xE8	; 232
    5b04:	ea 2e       	mov	r14, r26
    5b06:	a3 e0       	ldi	r26, 0x03	; 3
    5b08:	fa 2e       	mov	r15, r26
    5b0a:	84 01       	movw	r16, r8
    5b0c:	26 e3       	ldi	r18, 0x36	; 54
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	a2 01       	movw	r20, r4
    5b12:	68 e1       	ldi	r22, 0x18	; 24
    5b14:	72 e1       	ldi	r23, 0x12	; 18
    5b16:	58 cf       	rjmp	.-336    	; 0x59c8 <httpd_data_in+0xb26>
    5b18:	f8 ee       	ldi	r31, 0xE8	; 232
    5b1a:	ef 2e       	mov	r14, r31
    5b1c:	f3 e0       	ldi	r31, 0x03	; 3
    5b1e:	ff 2e       	mov	r15, r31
    5b20:	84 01       	movw	r16, r8
    5b22:	26 e3       	ldi	r18, 0x36	; 54
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	a2 01       	movw	r20, r4
    5b28:	67 ea       	ldi	r22, 0xA7	; 167
    5b2a:	77 e1       	ldi	r23, 0x17	; 23
    5b2c:	4d cf       	rjmp	.-358    	; 0x59c8 <httpd_data_in+0xb26>
    5b2e:	e3 e8       	ldi	r30, 0x83	; 131
    5b30:	ee 2e       	mov	r14, r30
    5b32:	f1 2c       	mov	r15, r1
    5b34:	08 ee       	ldi	r16, 0xE8	; 232
    5b36:	13 e0       	ldi	r17, 0x03	; 3
    5b38:	94 01       	movw	r18, r8
    5b3a:	46 e3       	ldi	r20, 0x36	; 54
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	b2 01       	movw	r22, r4
    5b40:	82 e3       	ldi	r24, 0x32	; 50
    5b42:	9c e1       	ldi	r25, 0x1C	; 28
    5b44:	2c c0       	rjmp	.+88     	; 0x5b9e <httpd_data_in+0xcfc>
    5b46:	73 e8       	ldi	r23, 0x83	; 131
    5b48:	e7 2e       	mov	r14, r23
    5b4a:	f1 2c       	mov	r15, r1
    5b4c:	08 ee       	ldi	r16, 0xE8	; 232
    5b4e:	13 e0       	ldi	r17, 0x03	; 3
    5b50:	94 01       	movw	r18, r8
    5b52:	46 e3       	ldi	r20, 0x36	; 54
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	b2 01       	movw	r22, r4
    5b58:	8f ea       	ldi	r24, 0xAF	; 175
    5b5a:	9b e1       	ldi	r25, 0x1B	; 27
    5b5c:	20 c0       	rjmp	.+64     	; 0x5b9e <httpd_data_in+0xcfc>
    5b5e:	68 ee       	ldi	r22, 0xE8	; 232
    5b60:	e6 2e       	mov	r14, r22
    5b62:	63 e0       	ldi	r22, 0x03	; 3
    5b64:	f6 2e       	mov	r15, r22
    5b66:	84 01       	movw	r16, r8
    5b68:	26 e3       	ldi	r18, 0x36	; 54
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
    5b6c:	a2 01       	movw	r20, r4
    5b6e:	62 e6       	ldi	r22, 0x62	; 98
    5b70:	7b e1       	ldi	r23, 0x1B	; 27
    5b72:	2a cf       	rjmp	.-428    	; 0x59c8 <httpd_data_in+0xb26>
    5b74:	01 e0       	ldi	r16, 0x01	; 1
    5b76:	94 01       	movw	r18, r8
    5b78:	48 ee       	ldi	r20, 0xE8	; 232
    5b7a:	53 e0       	ldi	r21, 0x03	; 3
    5b7c:	66 e3       	ldi	r22, 0x36	; 54
    5b7e:	70 e0       	ldi	r23, 0x00	; 0
    5b80:	c2 01       	movw	r24, r4
    5b82:	0e 94 be 11 	call	0x237c	; 0x237c <servo_generate_bmp>
    5b86:	24 cf       	rjmp	.-440    	; 0x59d0 <httpd_data_in+0xb2e>
    5b88:	53 e8       	ldi	r21, 0x83	; 131
    5b8a:	e5 2e       	mov	r14, r21
    5b8c:	f1 2c       	mov	r15, r1
    5b8e:	08 ee       	ldi	r16, 0xE8	; 232
    5b90:	13 e0       	ldi	r17, 0x03	; 3
    5b92:	94 01       	movw	r18, r8
    5b94:	46 e3       	ldi	r20, 0x36	; 54
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	b2 01       	movw	r22, r4
    5b9a:	85 eb       	ldi	r24, 0xB5	; 181
    5b9c:	9c e1       	ldi	r25, 0x1C	; 28
    5b9e:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <httpd_add_progmem_data_bin>
    5ba2:	16 cf       	rjmp	.-468    	; 0x59d0 <httpd_data_in+0xb2e>
    5ba4:	48 ee       	ldi	r20, 0xE8	; 232
    5ba6:	e4 2e       	mov	r14, r20
    5ba8:	43 e0       	ldi	r20, 0x03	; 3
    5baa:	f4 2e       	mov	r15, r20
    5bac:	84 01       	movw	r16, r8
    5bae:	26 e3       	ldi	r18, 0x36	; 54
    5bb0:	30 e0       	ldi	r19, 0x00	; 0
    5bb2:	a2 01       	movw	r20, r4
    5bb4:	60 e0       	ldi	r22, 0x00	; 0
    5bb6:	70 e0       	ldi	r23, 0x00	; 0
    5bb8:	82 e6       	ldi	r24, 0x62	; 98
    5bba:	9b e1       	ldi	r25, 0x1B	; 27
    5bbc:	07 cf       	rjmp	.-498    	; 0x59cc <httpd_data_in+0xb2a>
    5bbe:	f3 01       	movw	r30, r6
    5bc0:	42 85       	ldd	r20, Z+10	; 0x0a
    5bc2:	53 85       	ldd	r21, Z+11	; 0x0b
    5bc4:	64 85       	ldd	r22, Z+12	; 0x0c
    5bc6:	75 85       	ldd	r23, Z+13	; 0x0d
    5bc8:	48 15       	cp	r20, r8
    5bca:	59 05       	cpc	r21, r9
    5bcc:	6a 05       	cpc	r22, r10
    5bce:	7b 05       	cpc	r23, r11
    5bd0:	29 f4       	brne	.+10     	; 0x5bdc <httpd_data_in+0xd3a>
    5bd2:	41 15       	cp	r20, r1
    5bd4:	51 05       	cpc	r21, r1
    5bd6:	61 05       	cpc	r22, r1
    5bd8:	71 05       	cpc	r23, r1
    5bda:	f9 f4       	brne	.+62     	; 0x5c1a <httpd_data_in+0xd78>
    5bdc:	c9 01       	movw	r24, r18
    5bde:	89 50       	subi	r24, 0x09	; 9
    5be0:	9a 4f       	sbci	r25, 0xFA	; 250
    5be2:	af 5f       	subi	r26, 0xFF	; 255
    5be4:	b0 40       	sbci	r27, 0x00	; 0
    5be6:	6c 01       	movw	r12, r24
    5be8:	7d 01       	movw	r14, r26
    5bea:	95 01       	movw	r18, r10
    5bec:	84 01       	movw	r16, r8
    5bee:	48 ee       	ldi	r20, 0xE8	; 232
    5bf0:	53 e0       	ldi	r21, 0x03	; 3
    5bf2:	66 e3       	ldi	r22, 0x36	; 54
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	c2 01       	movw	r24, r4
    5bf8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <filesystem_get_data>
    5bfc:	ac 01       	movw	r20, r24
    5bfe:	88 ee       	ldi	r24, 0xE8	; 232
    5c00:	93 e0       	ldi	r25, 0x03	; 3
    5c02:	a0 e0       	ldi	r26, 0x00	; 0
    5c04:	b0 e0       	ldi	r27, 0x00	; 0
    5c06:	88 0e       	add	r8, r24
    5c08:	99 1e       	adc	r9, r25
    5c0a:	aa 1e       	adc	r10, r26
    5c0c:	bb 1e       	adc	r11, r27
    5c0e:	f3 01       	movw	r30, r6
    5c10:	82 86       	std	Z+10, r8	; 0x0a
    5c12:	93 86       	std	Z+11, r9	; 0x0b
    5c14:	a4 86       	std	Z+12, r10	; 0x0c
    5c16:	b5 86       	std	Z+13, r11	; 0x0d
    5c18:	19 c0       	rjmp	.+50     	; 0x5c4c <httpd_data_in+0xdaa>
    5c1a:	04 2f       	mov	r16, r20
    5c1c:	11 27       	eor	r17, r17
    5c1e:	29 50       	subi	r18, 0x09	; 9
    5c20:	3a 4f       	sbci	r19, 0xFA	; 250
    5c22:	48 ee       	ldi	r20, 0xE8	; 232
    5c24:	53 e0       	ldi	r21, 0x03	; 3
    5c26:	66 e3       	ldi	r22, 0x36	; 54
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	c2 01       	movw	r24, r4
    5c2c:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <filesystem_get_data_startat>
    5c30:	ac 01       	movw	r20, r24
    5c32:	f3 01       	movw	r30, r6
    5c34:	82 85       	ldd	r24, Z+10	; 0x0a
    5c36:	93 85       	ldd	r25, Z+11	; 0x0b
    5c38:	a4 85       	ldd	r26, Z+12	; 0x0c
    5c3a:	b5 85       	ldd	r27, Z+13	; 0x0d
    5c3c:	88 51       	subi	r24, 0x18	; 24
    5c3e:	9c 4f       	sbci	r25, 0xFC	; 252
    5c40:	af 4f       	sbci	r26, 0xFF	; 255
    5c42:	bf 4f       	sbci	r27, 0xFF	; 255
    5c44:	82 87       	std	Z+10, r24	; 0x0a
    5c46:	93 87       	std	Z+11, r25	; 0x0b
    5c48:	a4 87       	std	Z+12, r26	; 0x0c
    5c4a:	b5 87       	std	Z+13, r27	; 0x0d
    5c4c:	41 15       	cp	r20, r1
    5c4e:	51 05       	cpc	r21, r1
    5c50:	09 f4       	brne	.+2      	; 0x5c54 <httpd_data_in+0xdb2>
    5c52:	be c0       	rjmp	.+380    	; 0x5dd0 <httpd_data_in+0xf2e>
    5c54:	c1 01       	movw	r24, r2
    5c56:	88 0f       	add	r24, r24
    5c58:	99 1f       	adc	r25, r25
    5c5a:	fc 01       	movw	r30, r24
    5c5c:	23 e0       	ldi	r18, 0x03	; 3
    5c5e:	ee 0f       	add	r30, r30
    5c60:	ff 1f       	adc	r31, r31
    5c62:	2a 95       	dec	r18
    5c64:	e1 f7       	brne	.-8      	; 0x5c5e <httpd_data_in+0xdbc>
    5c66:	e8 1b       	sub	r30, r24
    5c68:	f9 0b       	sbc	r31, r25
    5c6a:	e1 51       	subi	r30, 0x11	; 17
    5c6c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c6e:	8f e6       	ldi	r24, 0x6F	; 111
    5c70:	80 83       	st	Z, r24
    5c72:	ca 01       	movw	r24, r20
    5c74:	5a ce       	rjmp	.-844    	; 0x592a <httpd_data_in+0xa88>
    5c76:	f3 01       	movw	r30, r6
    5c78:	82 81       	ldd	r24, Z+2	; 0x02
    5c7a:	93 81       	ldd	r25, Z+3	; 0x03
    5c7c:	43 97       	sbiw	r24, 0x13	; 19
    5c7e:	21 f4       	brne	.+8      	; 0x5c88 <httpd_data_in+0xde6>
    5c80:	a8 98       	cbi	0x15, 0	; 21
    5c82:	0e 94 9a 19 	call	0x3334	; 0x3334 <filesystem_format>
    5c86:	a8 9a       	sbi	0x15, 0	; 21
    5c88:	d3 01       	movw	r26, r6
    5c8a:	1c 92       	st	X, r1
    5c8c:	95 c0       	rjmp	.+298    	; 0x5db8 <httpd_data_in+0xf16>
    5c8e:	02 50       	subi	r16, 0x02	; 2
    5c90:	10 40       	sbci	r17, 0x00	; 0
    5c92:	2b c0       	rjmp	.+86     	; 0x5cea <httpd_data_in+0xe48>
    5c94:	f3 01       	movw	r30, r6
    5c96:	82 85       	ldd	r24, Z+10	; 0x0a
    5c98:	93 85       	ldd	r25, Z+11	; 0x0b
    5c9a:	a4 85       	ldd	r26, Z+12	; 0x0c
    5c9c:	b5 85       	ldd	r27, Z+13	; 0x0d
    5c9e:	2d 89       	ldd	r18, Y+21	; 0x15
    5ca0:	3e 89       	ldd	r19, Y+22	; 0x16
    5ca2:	59 01       	movw	r10, r18
    5ca4:	cc 24       	eor	r12, r12
    5ca6:	dd 24       	eor	r13, r13
    5ca8:	a8 16       	cp	r10, r24
    5caa:	b9 06       	cpc	r11, r25
    5cac:	ca 06       	cpc	r12, r26
    5cae:	db 06       	cpc	r13, r27
    5cb0:	08 f4       	brcc	.+2      	; 0x5cb4 <httpd_data_in+0xe12>
    5cb2:	71 c0       	rjmp	.+226    	; 0x5d96 <httpd_data_in+0xef4>
    5cb4:	06 e3       	ldi	r16, 0x36	; 54
    5cb6:	10 e0       	ldi	r17, 0x00	; 0
    5cb8:	96 e3       	ldi	r25, 0x36	; 54
    5cba:	e9 2e       	mov	r14, r25
    5cbc:	f1 2c       	mov	r15, r1
    5cbe:	e4 0c       	add	r14, r4
    5cc0:	f5 1c       	adc	r15, r5
    5cc2:	0d c0       	rjmp	.+26     	; 0x5cde <httpd_data_in+0xe3c>
    5cc4:	40 e0       	ldi	r20, 0x00	; 0
    5cc6:	b7 01       	movw	r22, r14
    5cc8:	8c e8       	ldi	r24, 0x8C	; 140
    5cca:	90 e2       	ldi	r25, 0x20	; 32
    5ccc:	0e 94 94 22 	call	0x4528	; 0x4528 <string_compare_progmem2>
    5cd0:	88 23       	and	r24, r24
    5cd2:	e9 f6       	brne	.-70     	; 0x5c8e <httpd_data_in+0xdec>
    5cd4:	0f 5f       	subi	r16, 0xFF	; 255
    5cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd8:	08 94       	sec
    5cda:	e1 1c       	adc	r14, r1
    5cdc:	f1 1c       	adc	r15, r1
    5cde:	8d 89       	ldd	r24, Y+21	; 0x15
    5ce0:	9e 89       	ldd	r25, Y+22	; 0x16
    5ce2:	c6 96       	adiw	r24, 0x36	; 54
    5ce4:	08 17       	cp	r16, r24
    5ce6:	19 07       	cpc	r17, r25
    5ce8:	68 f3       	brcs	.-38     	; 0x5cc4 <httpd_data_in+0xe22>
    5cea:	06 53       	subi	r16, 0x36	; 54
    5cec:	10 40       	sbci	r17, 0x00	; 0
    5cee:	40 e0       	ldi	r20, 0x00	; 0
    5cf0:	b8 01       	movw	r22, r16
    5cf2:	c2 01       	movw	r24, r4
    5cf4:	c6 96       	adiw	r24, 0x36	; 54
    5cf6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <filesystem_write_data>
    5cfa:	0e 94 cb 1a 	call	0x3596	; 0x3596 <filesystem_close_file>
    5cfe:	8e e1       	ldi	r24, 0x1E	; 30
    5d00:	e8 2e       	mov	r14, r24
    5d02:	84 e0       	ldi	r24, 0x04	; 4
    5d04:	f8 2e       	mov	r15, r24
    5d06:	00 e0       	ldi	r16, 0x00	; 0
    5d08:	10 e0       	ldi	r17, 0x00	; 0
    5d0a:	26 e3       	ldi	r18, 0x36	; 54
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	a2 01       	movw	r20, r4
    5d10:	60 e0       	ldi	r22, 0x00	; 0
    5d12:	70 e0       	ldi	r23, 0x00	; 0
    5d14:	81 e5       	ldi	r24, 0x51	; 81
    5d16:	90 e2       	ldi	r25, 0x20	; 32
    5d18:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <httpd_add_progmem_data>
    5d1c:	9c 01       	movw	r18, r24
    5d1e:	c1 01       	movw	r24, r2
    5d20:	88 0f       	add	r24, r24
    5d22:	99 1f       	adc	r25, r25
    5d24:	fc 01       	movw	r30, r24
    5d26:	13 e0       	ldi	r17, 0x03	; 3
    5d28:	ee 0f       	add	r30, r30
    5d2a:	ff 1f       	adc	r31, r31
    5d2c:	1a 95       	dec	r17
    5d2e:	e1 f7       	brne	.-8      	; 0x5d28 <httpd_data_in+0xe86>
    5d30:	e8 1b       	sub	r30, r24
    5d32:	f9 0b       	sbc	r31, r25
    5d34:	e1 51       	subi	r30, 0x11	; 17
    5d36:	fa 4f       	sbci	r31, 0xFA	; 250
    5d38:	8e e6       	ldi	r24, 0x6E	; 110
    5d3a:	80 83       	st	Z, r24
    5d3c:	82 85       	ldd	r24, Z+10	; 0x0a
    5d3e:	93 85       	ldd	r25, Z+11	; 0x0b
    5d40:	a4 85       	ldd	r26, Z+12	; 0x0c
    5d42:	b5 85       	ldd	r27, Z+13	; 0x0d
    5d44:	8a 15       	cp	r24, r10
    5d46:	9b 05       	cpc	r25, r11
    5d48:	ac 05       	cpc	r26, r12
    5d4a:	bd 05       	cpc	r27, r13
    5d4c:	19 f4       	brne	.+6      	; 0x5d54 <httpd_data_in+0xeb2>
    5d4e:	8f e0       	ldi	r24, 0x0F	; 15
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	02 c0       	rjmp	.+4      	; 0x5d58 <httpd_data_in+0xeb6>
    5d54:	82 e1       	ldi	r24, 0x12	; 18
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	93 83       	std	Z+3, r25	; 0x03
    5d5a:	82 83       	std	Z+2, r24	; 0x02
    5d5c:	c1 01       	movw	r24, r2
    5d5e:	88 0f       	add	r24, r24
    5d60:	99 1f       	adc	r25, r25
    5d62:	fc 01       	movw	r30, r24
    5d64:	a3 e0       	ldi	r26, 0x03	; 3
    5d66:	ee 0f       	add	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	aa 95       	dec	r26
    5d6c:	e1 f7       	brne	.-8      	; 0x5d66 <httpd_data_in+0xec4>
    5d6e:	e8 1b       	sub	r30, r24
    5d70:	f9 0b       	sbc	r31, r25
    5d72:	e1 51       	subi	r30, 0x11	; 17
    5d74:	fa 4f       	sbci	r31, 0xFA	; 250
    5d76:	c9 01       	movw	r24, r18
    5d78:	88 19       	sub	r24, r8
    5d7a:	99 09       	sbc	r25, r9
    5d7c:	01 96       	adiw	r24, 0x01	; 1
    5d7e:	aa 27       	eor	r26, r26
    5d80:	bb 27       	eor	r27, r27
    5d82:	84 83       	std	Z+4, r24	; 0x04
    5d84:	95 83       	std	Z+5, r25	; 0x05
    5d86:	a6 83       	std	Z+6, r26	; 0x06
    5d88:	b7 83       	std	Z+7, r27	; 0x07
    5d8a:	82 e0       	ldi	r24, 0x02	; 2
    5d8c:	af 89       	ldd	r26, Y+23	; 0x17
    5d8e:	b8 8d       	ldd	r27, Y+24	; 0x18
    5d90:	8c 93       	st	X, r24
    5d92:	c9 01       	movw	r24, r18
    5d94:	ca cd       	rjmp	.-1132   	; 0x592a <httpd_data_in+0xa88>
    5d96:	8a 19       	sub	r24, r10
    5d98:	9b 09       	sbc	r25, r11
    5d9a:	ac 09       	sbc	r26, r12
    5d9c:	bd 09       	sbc	r27, r13
    5d9e:	f3 01       	movw	r30, r6
    5da0:	82 87       	std	Z+10, r24	; 0x0a
    5da2:	93 87       	std	Z+11, r25	; 0x0b
    5da4:	a4 87       	std	Z+12, r26	; 0x0c
    5da6:	b5 87       	std	Z+13, r27	; 0x0d
    5da8:	40 e0       	ldi	r20, 0x00	; 0
    5daa:	6d 89       	ldd	r22, Y+21	; 0x15
    5dac:	7e 89       	ldd	r23, Y+22	; 0x16
    5dae:	c2 01       	movw	r24, r4
    5db0:	c6 96       	adiw	r24, 0x36	; 54
    5db2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <filesystem_write_data>
    5db6:	05 c0       	rjmp	.+10     	; 0x5dc2 <httpd_data_in+0xf20>
    5db8:	83 e0       	ldi	r24, 0x03	; 3
    5dba:	ef 89       	ldd	r30, Y+23	; 0x17
    5dbc:	f8 8d       	ldd	r31, Y+24	; 0x18
    5dbe:	80 83       	st	Z, r24
    5dc0:	04 c0       	rjmp	.+8      	; 0x5dca <httpd_data_in+0xf28>
    5dc2:	81 e0       	ldi	r24, 0x01	; 1
    5dc4:	af 89       	ldd	r26, Y+23	; 0x17
    5dc6:	b8 8d       	ldd	r27, Y+24	; 0x18
    5dc8:	8c 93       	st	X, r24
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	02 c0       	rjmp	.+4      	; 0x5dd4 <httpd_data_in+0xf32>
    5dd0:	88 ee       	ldi	r24, 0xE8	; 232
    5dd2:	93 e0       	ldi	r25, 0x03	; 3
    5dd4:	68 96       	adiw	r28, 0x18	; 24
    5dd6:	0f b6       	in	r0, 0x3f	; 63
    5dd8:	f8 94       	cli
    5dda:	de bf       	out	0x3e, r29	; 62
    5ddc:	0f be       	out	0x3f, r0	; 63
    5dde:	cd bf       	out	0x3d, r28	; 61
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	ff 90       	pop	r15
    5dea:	ef 90       	pop	r14
    5dec:	df 90       	pop	r13
    5dee:	cf 90       	pop	r12
    5df0:	bf 90       	pop	r11
    5df2:	af 90       	pop	r10
    5df4:	9f 90       	pop	r9
    5df6:	8f 90       	pop	r8
    5df8:	7f 90       	pop	r7
    5dfa:	6f 90       	pop	r6
    5dfc:	5f 90       	pop	r5
    5dfe:	4f 90       	pop	r4
    5e00:	3f 90       	pop	r3
    5e02:	2f 90       	pop	r2
    5e04:	08 95       	ret

00005e06 <httpd_init>:
    5e06:	ef ee       	ldi	r30, 0xEF	; 239
    5e08:	f5 e0       	ldi	r31, 0x05	; 5
    5e0a:	10 82       	st	Z, r1
    5e0c:	12 86       	std	Z+10, r1	; 0x0a
    5e0e:	13 86       	std	Z+11, r1	; 0x0b
    5e10:	14 86       	std	Z+12, r1	; 0x0c
    5e12:	15 86       	std	Z+13, r1	; 0x0d
    5e14:	3e 96       	adiw	r30, 0x0e	; 14
    5e16:	86 e0       	ldi	r24, 0x06	; 6
    5e18:	eb 37       	cpi	r30, 0x7B	; 123
    5e1a:	f8 07       	cpc	r31, r24
    5e1c:	b1 f7       	brne	.-20     	; 0x5e0a <httpd_init+0x4>
    5e1e:	08 95       	ret

00005e20 <tcp_send_packet>:
	httpd_cleanup_conn(socketnum);
}

//send a tcp packet:
void tcp_send_packet(unsigned char *buffer, unsigned char socketnum, unsigned char flags, unsigned int len){
    5e20:	8f 92       	push	r8
    5e22:	9f 92       	push	r9
    5e24:	af 92       	push	r10
    5e26:	bf 92       	push	r11
    5e28:	cf 92       	push	r12
    5e2a:	df 92       	push	r13
    5e2c:	ef 92       	push	r14
    5e2e:	ff 92       	push	r15
    5e30:	0f 93       	push	r16
    5e32:	1f 93       	push	r17
    5e34:	cf 93       	push	r28
    5e36:	df 93       	push	r29
    5e38:	ec 01       	movw	r28, r24
    5e3a:	f4 2e       	mov	r15, r20
    5e3c:	49 01       	movw	r8, r18
	unsigned int arp_idx;
	unsigned int tmp;
	unsigned long *ip;

	if ((tcp_sockets[socketnum].source_ip & NIC_IP_NETMASK) != (nic_ip & NIC_IP_NETMASK)){
    5e3e:	06 2f       	mov	r16, r22
    5e40:	11 27       	eor	r17, r17
    5e42:	83 e1       	ldi	r24, 0x13	; 19
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	08 9f       	mul	r16, r24
    5e48:	b0 01       	movw	r22, r0
    5e4a:	09 9f       	mul	r16, r25
    5e4c:	70 0d       	add	r23, r0
    5e4e:	18 9f       	mul	r17, r24
    5e50:	70 0d       	add	r23, r0
    5e52:	11 24       	eor	r1, r1
    5e54:	fb 01       	movw	r30, r22
    5e56:	e5 58       	subi	r30, 0x85	; 133
    5e58:	f9 4f       	sbci	r31, 0xF9	; 249
    5e5a:	24 81       	ldd	r18, Z+4	; 0x04
    5e5c:	35 81       	ldd	r19, Z+5	; 0x05
    5e5e:	46 81       	ldd	r20, Z+6	; 0x06
    5e60:	57 81       	ldd	r21, Z+7	; 0x07
    5e62:	20 70       	andi	r18, 0x00	; 0
    5e64:	80 91 4d 07 	lds	r24, 0x074D
    5e68:	90 91 4e 07 	lds	r25, 0x074E
    5e6c:	a0 91 4f 07 	lds	r26, 0x074F
    5e70:	b0 91 50 07 	lds	r27, 0x0750
    5e74:	80 70       	andi	r24, 0x00	; 0
    5e76:	28 17       	cp	r18, r24
    5e78:	39 07       	cpc	r19, r25
    5e7a:	4a 07       	cpc	r20, r26
    5e7c:	5b 07       	cpc	r21, r27
    5e7e:	19 f0       	breq	.+6      	; 0x5e86 <tcp_send_packet+0x66>
    5e80:	e3 e4       	ldi	r30, 0x43	; 67
    5e82:	f7 e0       	ldi	r31, 0x07	; 7
    5e84:	03 c0       	rjmp	.+6      	; 0x5e8c <tcp_send_packet+0x6c>
		#if TCP_DEBUG
		softuart_puts_progmem("TCP : ip ");
		softuart_put_ip(tcp_sockets[socketnum].source_ip);
		softuart_puts_progmem(" outside home net -> use gateway\r\n");
		#endif
		ip = &nic_gateway_ip;
	}else{
		ip = &tcp_sockets[socketnum].source_ip;
    5e86:	fb 01       	movw	r30, r22
    5e88:	e1 58       	subi	r30, 0x81	; 129
    5e8a:	f9 4f       	sbci	r31, 0xF9	; 249
	}

	arp_idx = arp_search_by_ip(*ip);
    5e8c:	60 81       	ld	r22, Z
    5e8e:	71 81       	ldd	r23, Z+1	; 0x01
    5e90:	82 81       	ldd	r24, Z+2	; 0x02
    5e92:	93 81       	ldd	r25, Z+3	; 0x03
    5e94:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <arp_search_by_ip>
    5e98:	ac 01       	movw	r20, r24

	if (arp_idx == -1){
    5e9a:	8f ef       	ldi	r24, 0xFF	; 255
    5e9c:	4f 3f       	cpi	r20, 0xFF	; 255
    5e9e:	58 07       	cpc	r21, r24
    5ea0:	a1 f4       	brne	.+40     	; 0x5eca <tcp_send_packet+0xaa>
		//target ip (gateway) unknown
		
		#if TCP_DEBUG
		softuart_puts_progmem("TCP : ERR ARP UKNWN: ");
		softuart_put_ip(tcp_sockets[socketnum].source_ip);
		#endif
		
		//normal solution:
		//arp_send_request(buffer, ip);
		//return; //<- must be called again !!!

		///FIXME
		#if TCP_DEBUG
		softuart_puts_progmem("-> calling arp'hack to add mac<->ip mapping");
		softuart_putnewline();
		#endif
		
		//but we do not want to wait for arp request etc
		//we received an ip packet and we did not touch the mac header etc yet!
		//-> the source mac is still in buffer! -> use this !
		arp_idx = arp_add_mac2ip(&buffer[ETHERNET_POS_SRC_MAC], tcp_sockets[socketnum].source_ip);
    5ea2:	83 e1       	ldi	r24, 0x13	; 19
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	08 9f       	mul	r16, r24
    5ea8:	f0 01       	movw	r30, r0
    5eaa:	09 9f       	mul	r16, r25
    5eac:	f0 0d       	add	r31, r0
    5eae:	18 9f       	mul	r17, r24
    5eb0:	f0 0d       	add	r31, r0
    5eb2:	11 24       	eor	r1, r1
    5eb4:	e5 58       	subi	r30, 0x85	; 133
    5eb6:	f9 4f       	sbci	r31, 0xF9	; 249
    5eb8:	44 81       	ldd	r20, Z+4	; 0x04
    5eba:	55 81       	ldd	r21, Z+5	; 0x05
    5ebc:	66 81       	ldd	r22, Z+6	; 0x06
    5ebe:	77 81       	ldd	r23, Z+7	; 0x07
    5ec0:	ce 01       	movw	r24, r28
    5ec2:	06 96       	adiw	r24, 0x06	; 6
    5ec4:	0e 94 9e 39 	call	0x733c	; 0x733c <arp_add_mac2ip>
    5ec8:	ac 01       	movw	r20, r24
	}
	///softuart_puts_progmem("<tcp packet sent> ");
	

	//generate ip packet:
	ip_generate_packet(buffer, 
    5eca:	e4 e1       	ldi	r30, 0x14	; 20
    5ecc:	f0 e0       	ldi	r31, 0x00	; 0
    5ece:	8e 0e       	add	r8, r30
    5ed0:	9f 1e       	adc	r9, r31
    5ed2:	83 e1       	ldi	r24, 0x13	; 19
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	08 9f       	mul	r16, r24
    5ed8:	b0 01       	movw	r22, r0
    5eda:	09 9f       	mul	r16, r25
    5edc:	70 0d       	add	r23, r0
    5ede:	18 9f       	mul	r17, r24
    5ee0:	70 0d       	add	r23, r0
    5ee2:	11 24       	eor	r1, r1
    5ee4:	bb e7       	ldi	r27, 0x7B	; 123
    5ee6:	ab 2e       	mov	r10, r27
    5ee8:	b6 e0       	ldi	r27, 0x06	; 6
    5eea:	bb 2e       	mov	r11, r27
    5eec:	a6 0e       	add	r10, r22
    5eee:	b7 1e       	adc	r11, r23
    5ef0:	f5 01       	movw	r30, r10
    5ef2:	00 81       	ld	r16, Z
    5ef4:	11 81       	ldd	r17, Z+1	; 0x01
    5ef6:	22 81       	ldd	r18, Z+2	; 0x02
    5ef8:	33 81       	ldd	r19, Z+3	; 0x03
    5efa:	ca 01       	movw	r24, r20
    5efc:	a3 e0       	ldi	r26, 0x03	; 3
    5efe:	88 0f       	add	r24, r24
    5f00:	99 1f       	adc	r25, r25
    5f02:	aa 95       	dec	r26
    5f04:	e1 f7       	brne	.-8      	; 0x5efe <tcp_send_packet+0xde>
    5f06:	44 0f       	add	r20, r20
    5f08:	55 1f       	adc	r21, r21
    5f0a:	48 0f       	add	r20, r24
    5f0c:	59 1f       	adc	r21, r25
    5f0e:	49 5a       	subi	r20, 0xA9	; 169
    5f10:	58 4f       	sbci	r21, 0xF8	; 248
    5f12:	61 58       	subi	r22, 0x81	; 129
    5f14:	79 4f       	sbci	r23, 0xF9	; 249
    5f16:	64 01       	movw	r12, r8
    5f18:	e6 e0       	ldi	r30, 0x06	; 6
    5f1a:	ee 2e       	mov	r14, r30
    5f1c:	ce 01       	movw	r24, r28
    5f1e:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <ip_generate_packet>
		&(tcp_sockets[socketnum].source_ip), 
		(arp_table[arp_idx].mac),
		tcp_sockets[socketnum].dest_port,
		tcp_sockets[socketnum].source_port,
		IP_PROTOCOL_TCP,
		20+len
	);

	//setup source port (our port)
	buffer[TCP_POS_SRC_PORT+0] = (tcp_sockets[socketnum].dest_port)>>8;
    5f22:	f5 01       	movw	r30, r10
    5f24:	82 81       	ldd	r24, Z+2	; 0x02
    5f26:	93 81       	ldd	r25, Z+3	; 0x03
    5f28:	89 2f       	mov	r24, r25
    5f2a:	99 27       	eor	r25, r25
    5f2c:	8a a3       	std	Y+34, r24	; 0x22
	buffer[TCP_POS_SRC_PORT+1] = (tcp_sockets[socketnum].dest_port) & 0xFF;
    5f2e:	82 81       	ldd	r24, Z+2	; 0x02
    5f30:	8b a3       	std	Y+35, r24	; 0x23

	//setup destination port (client port)
	buffer[TCP_POS_DST_PORT+0] = (tcp_sockets[socketnum].source_port)>>8;
    5f32:	80 81       	ld	r24, Z
    5f34:	91 81       	ldd	r25, Z+1	; 0x01
    5f36:	89 2f       	mov	r24, r25
    5f38:	99 27       	eor	r25, r25
    5f3a:	8c a3       	std	Y+36, r24	; 0x24
	buffer[TCP_POS_DST_PORT+1] = (tcp_sockets[socketnum].source_port) & 0xFF;
    5f3c:	80 81       	ld	r24, Z
    5f3e:	8d a3       	std	Y+37, r24	; 0x25

	//setup seq nr: FIXME
	nic_seq_to_buffer(&buffer[TCP_POS_SEQ], (tcp_sockets[socketnum].seq));
    5f40:	40 85       	ldd	r20, Z+8	; 0x08
    5f42:	51 85       	ldd	r21, Z+9	; 0x09
    5f44:	62 85       	ldd	r22, Z+10	; 0x0a
    5f46:	73 85       	ldd	r23, Z+11	; 0x0b
    5f48:	ce 01       	movw	r24, r28
    5f4a:	86 96       	adiw	r24, 0x26	; 38
    5f4c:	0e 94 43 39 	call	0x7286	; 0x7286 <nic_seq_to_buffer>
	/*buffer[TCP_POS_SEQ+0] = 0x00;
	buffer[TCP_POS_SEQ+1] = 0x00;
	buffer[TCP_POS_SEQ+2] = 0x00;
	buffer[TCP_POS_SEQ+3] = 0x00;*/

	//setup ack nr: FIXME
	nic_seq_to_buffer(&buffer[TCP_POS_ACK], (tcp_sockets[socketnum].ack));
    5f50:	f5 01       	movw	r30, r10
    5f52:	44 85       	ldd	r20, Z+12	; 0x0c
    5f54:	55 85       	ldd	r21, Z+13	; 0x0d
    5f56:	66 85       	ldd	r22, Z+14	; 0x0e
    5f58:	77 85       	ldd	r23, Z+15	; 0x0f
    5f5a:	ce 01       	movw	r24, r28
    5f5c:	8a 96       	adiw	r24, 0x2a	; 42
    5f5e:	0e 94 43 39 	call	0x7286	; 0x7286 <nic_seq_to_buffer>

	//setup header offset
	buffer[TCP_POS_DATA_OFFSET] = 0x05<<4;
    5f62:	80 e5       	ldi	r24, 0x50	; 80
    5f64:	8e a7       	std	Y+46, r24	; 0x2e

	//setup flags:
	buffer[TCP_POS_HEADERFLAGS] = flags;
    5f66:	ff a6       	std	Y+47, r15	; 0x2f
	
	//setup window
	buffer[TCP_POS_WINDOWSIZE+0] = (NIC_BUFFERSIZE-20-14)>>8;
    5f68:	83 e0       	ldi	r24, 0x03	; 3
    5f6a:	88 ab       	std	Y+48, r24	; 0x30
	buffer[TCP_POS_WINDOWSIZE+1] = (NIC_BUFFERSIZE-20-14)&0xFF;
    5f6c:	8c ef       	ldi	r24, 0xFC	; 252
    5f6e:	89 ab       	std	Y+49, r24	; 0x31

	//setup checksum -> set 0x0000, will be replaced later!
	buffer[TCP_POS_CHECKSUM+0] = 0x00;
    5f70:	1a aa       	std	Y+50, r1	; 0x32
	buffer[TCP_POS_CHECKSUM+1] = 0x00;
    5f72:	1b aa       	std	Y+51, r1	; 0x33

	//setup urgend pointer (not used -> 0)
	buffer[TCP_POS_URGENT_PTR+0] = 0x00;
    5f74:	1c aa       	std	Y+52, r1	; 0x34
	buffer[TCP_POS_URGENT_PTR+1] = 0x00;
    5f76:	1d aa       	std	Y+53, r1	; 0x35


	//calc checksum: we use some tricks to do it faster:
	//step0: calculate checksum for pseudoheader (0x00 TYPE TCPLEN)
	tmp = IP_PROTOCOL_TCP + 20 + len;
	//step1: calculate checksum IP_SRC+IP_DST + TCP header&data
	//       (-2*4 -> include the 8 bytes source+dest ip)
	// -> we calculated the checksum over the "pseudoheder" and tcp header+data
	tmp = nethelp_checksum(&buffer[TCP_POS_SRC_PORT-2*4], 20+2*4 + len, tmp);
    5f78:	86 e0       	ldi	r24, 0x06	; 6
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	88 0e       	add	r8, r24
    5f7e:	99 1e       	adc	r9, r25
    5f80:	94 01       	movw	r18, r8
    5f82:	44 27       	eor	r20, r20
    5f84:	55 27       	eor	r21, r21
    5f86:	e2 e0       	ldi	r30, 0x02	; 2
    5f88:	f0 e0       	ldi	r31, 0x00	; 0
    5f8a:	8e 0e       	add	r8, r30
    5f8c:	9f 1e       	adc	r9, r31
    5f8e:	b4 01       	movw	r22, r8
    5f90:	ce 01       	movw	r24, r28
    5f92:	4a 96       	adiw	r24, 0x1a	; 26
    5f94:	0e 94 77 38 	call	0x70ee	; 0x70ee <nethelp_checksum>

	//set checksum:
	buffer[TCP_POS_CHECKSUM+0] = tmp>>8;
    5f98:	29 2f       	mov	r18, r25
    5f9a:	33 27       	eor	r19, r19
    5f9c:	2a ab       	std	Y+50, r18	; 0x32
	buffer[TCP_POS_CHECKSUM+1] = tmp & 0xFF;
    5f9e:	8b ab       	std	Y+51, r24	; 0x33

	//send packet
	nic_send_packet(buffer, TCP_POS_URGENT_PTR+2+len);	
    5fa0:	8a e1       	ldi	r24, 0x1A	; 26
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	88 0e       	add	r8, r24
    5fa6:	99 1e       	adc	r9, r25
    5fa8:	b4 01       	movw	r22, r8
    5faa:	ce 01       	movw	r24, r28
    5fac:	0e 94 57 39 	call	0x72ae	; 0x72ae <nic_send_packet>
    5fb0:	df 91       	pop	r29
    5fb2:	cf 91       	pop	r28
    5fb4:	1f 91       	pop	r17
    5fb6:	0f 91       	pop	r16
    5fb8:	ff 90       	pop	r15
    5fba:	ef 90       	pop	r14
    5fbc:	df 90       	pop	r13
    5fbe:	cf 90       	pop	r12
    5fc0:	bf 90       	pop	r11
    5fc2:	af 90       	pop	r10
    5fc4:	9f 90       	pop	r9
    5fc6:	8f 90       	pop	r8
    5fc8:	08 95       	ret

00005fca <tcp_close_socket>:
    5fca:	48 2f       	mov	r20, r24
    5fcc:	55 27       	eor	r21, r21
    5fce:	23 e1       	ldi	r18, 0x13	; 19
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	42 9f       	mul	r20, r18
    5fd4:	f0 01       	movw	r30, r0
    5fd6:	43 9f       	mul	r20, r19
    5fd8:	f0 0d       	add	r31, r0
    5fda:	52 9f       	mul	r21, r18
    5fdc:	f0 0d       	add	r31, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	e5 58       	subi	r30, 0x85	; 133
    5fe2:	f9 4f       	sbci	r31, 0xF9	; 249
    5fe4:	10 8a       	std	Z+16, r1	; 0x10
    5fe6:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <httpd_cleanup_conn>
    5fea:	08 95       	ret

00005fec <tcp_ttl_cleanup>:
    5fec:	0f 93       	push	r16
    5fee:	1f 93       	push	r17
    5ff0:	cf 93       	push	r28
    5ff2:	df 93       	push	r29
    5ff4:	00 e0       	ldi	r16, 0x00	; 0
    5ff6:	10 e0       	ldi	r17, 0x00	; 0
    5ff8:	cb e8       	ldi	r28, 0x8B	; 139
    5ffa:	d6 e0       	ldi	r29, 0x06	; 6
    5ffc:	88 81       	ld	r24, Y
    5ffe:	88 23       	and	r24, r24
    6000:	41 f0       	breq	.+16     	; 0x6012 <tcp_ttl_cleanup+0x26>
    6002:	89 81       	ldd	r24, Y+1	; 0x01
    6004:	81 50       	subi	r24, 0x01	; 1
    6006:	89 83       	std	Y+1, r24	; 0x01
    6008:	88 23       	and	r24, r24
    600a:	19 f4       	brne	.+6      	; 0x6012 <tcp_ttl_cleanup+0x26>
    600c:	80 2f       	mov	r24, r16
    600e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    6012:	0f 5f       	subi	r16, 0xFF	; 255
    6014:	1f 4f       	sbci	r17, 0xFF	; 255
    6016:	63 96       	adiw	r28, 0x13	; 19
    6018:	0a 30       	cpi	r16, 0x0A	; 10
    601a:	11 05       	cpc	r17, r1
    601c:	79 f7       	brne	.-34     	; 0x5ffc <tcp_ttl_cleanup+0x10>
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	1f 91       	pop	r17
    6024:	0f 91       	pop	r16
    6026:	08 95       	ret

00006028 <tcp_find_free_socket>:
    6028:	cf 93       	push	r28
    602a:	df 93       	push	r29
    602c:	80 e0       	ldi	r24, 0x00	; 0
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	eb e8       	ldi	r30, 0x8B	; 139
    6032:	f6 e0       	ldi	r31, 0x06	; 6
    6034:	ec 01       	movw	r28, r24
    6036:	80 81       	ld	r24, Z
    6038:	88 23       	and	r24, r24
    603a:	d1 f0       	breq	.+52     	; 0x6070 <tcp_find_free_socket+0x48>
    603c:	ce 01       	movw	r24, r28
    603e:	01 96       	adiw	r24, 0x01	; 1
    6040:	73 96       	adiw	r30, 0x13	; 19
    6042:	8a 30       	cpi	r24, 0x0A	; 10
    6044:	91 05       	cpc	r25, r1
    6046:	b1 f7       	brne	.-20     	; 0x6034 <tcp_find_free_socket+0xc>
    6048:	80 e0       	ldi	r24, 0x00	; 0
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	eb e8       	ldi	r30, 0x8B	; 139
    604e:	f6 e0       	ldi	r31, 0x06	; 6
    6050:	ec 01       	movw	r28, r24
    6052:	80 81       	ld	r24, Z
    6054:	88 30       	cpi	r24, 0x08	; 8
    6056:	21 f4       	brne	.+8      	; 0x6060 <tcp_find_free_socket+0x38>
    6058:	8c 2f       	mov	r24, r28
    605a:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    605e:	08 c0       	rjmp	.+16     	; 0x6070 <tcp_find_free_socket+0x48>
    6060:	ce 01       	movw	r24, r28
    6062:	01 96       	adiw	r24, 0x01	; 1
    6064:	73 96       	adiw	r30, 0x13	; 19
    6066:	8a 30       	cpi	r24, 0x0A	; 10
    6068:	91 05       	cpc	r25, r1
    606a:	91 f7       	brne	.-28     	; 0x6050 <tcp_find_free_socket+0x28>
    606c:	ca e0       	ldi	r28, 0x0A	; 10
    606e:	d0 e0       	ldi	r29, 0x00	; 0
    6070:	ce 01       	movw	r24, r28
    6072:	df 91       	pop	r29
    6074:	cf 91       	pop	r28
    6076:	08 95       	ret

00006078 <tcp_init>:
    6078:	cf 93       	push	r28
    607a:	df 93       	push	r29
    607c:	c0 e0       	ldi	r28, 0x00	; 0
    607e:	d0 e0       	ldi	r29, 0x00	; 0
    6080:	8c 2f       	mov	r24, r28
    6082:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    6086:	21 96       	adiw	r28, 0x01	; 1
    6088:	ca 30       	cpi	r28, 0x0A	; 10
    608a:	d1 05       	cpc	r29, r1
    608c:	c9 f7       	brne	.-14     	; 0x6080 <tcp_init+0x8>
    608e:	df 91       	pop	r29
    6090:	cf 91       	pop	r28
    6092:	08 95       	ret

00006094 <tcp_packet_in>:
    6094:	2f 92       	push	r2
    6096:	3f 92       	push	r3
    6098:	4f 92       	push	r4
    609a:	5f 92       	push	r5
    609c:	6f 92       	push	r6
    609e:	7f 92       	push	r7
    60a0:	8f 92       	push	r8
    60a2:	9f 92       	push	r9
    60a4:	af 92       	push	r10
    60a6:	bf 92       	push	r11
    60a8:	cf 92       	push	r12
    60aa:	df 92       	push	r13
    60ac:	ef 92       	push	r14
    60ae:	ff 92       	push	r15
    60b0:	0f 93       	push	r16
    60b2:	1f 93       	push	r17
    60b4:	cf 93       	push	r28
    60b6:	df 93       	push	r29
    60b8:	cd b7       	in	r28, 0x3d	; 61
    60ba:	de b7       	in	r29, 0x3e	; 62
    60bc:	23 97       	sbiw	r28, 0x03	; 3
    60be:	0f b6       	in	r0, 0x3f	; 63
    60c0:	f8 94       	cli
    60c2:	de bf       	out	0x3e, r29	; 62
    60c4:	0f be       	out	0x3f, r0	; 63
    60c6:	cd bf       	out	0x3d, r28	; 61
    60c8:	7c 01       	movw	r14, r24
    60ca:	4a 96       	adiw	r24, 0x1a	; 26
    60cc:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    60d0:	1b 01       	movw	r2, r22
    60d2:	2c 01       	movw	r4, r24
    60d4:	f7 01       	movw	r30, r14
    60d6:	82 a1       	ldd	r24, Z+34	; 0x22
    60d8:	99 27       	eor	r25, r25
    60da:	b8 2e       	mov	r11, r24
    60dc:	aa 24       	eor	r10, r10
    60de:	83 a1       	ldd	r24, Z+35	; 0x23
    60e0:	99 27       	eor	r25, r25
    60e2:	a8 2a       	or	r10, r24
    60e4:	b9 2a       	or	r11, r25
    60e6:	c4 a0       	ldd	r12, Z+36	; 0x24
    60e8:	f5 a1       	ldd	r31, Z+37	; 0x25
    60ea:	fb 83       	std	Y+3, r31	; 0x03
    60ec:	f7 01       	movw	r30, r14
    60ee:	d7 a4       	ldd	r13, Z+47	; 0x2f
    60f0:	ff e3       	ldi	r31, 0x3F	; 63
    60f2:	df 22       	and	r13, r31
    60f4:	c7 01       	movw	r24, r14
    60f6:	4e 96       	adiw	r24, 0x1e	; 30
    60f8:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    60fc:	20 91 4d 07 	lds	r18, 0x074D
    6100:	30 91 4e 07 	lds	r19, 0x074E
    6104:	40 91 4f 07 	lds	r20, 0x074F
    6108:	50 91 50 07 	lds	r21, 0x0750
    610c:	62 17       	cp	r22, r18
    610e:	73 07       	cpc	r23, r19
    6110:	84 07       	cpc	r24, r20
    6112:	95 07       	cpc	r25, r21
    6114:	09 f0       	breq	.+2      	; 0x6118 <tcp_packet_in+0x84>
    6116:	1a c2       	rjmp	.+1076   	; 0x654c <tcp_packet_in+0x4b8>
    6118:	eb e7       	ldi	r30, 0x7B	; 123
    611a:	f6 e0       	ldi	r31, 0x06	; 6
    611c:	66 24       	eor	r6, r6
    611e:	77 24       	eor	r7, r7
    6120:	4f 01       	movw	r8, r30
    6122:	6a 82       	std	Y+2, r6	; 0x02
    6124:	80 89       	ldd	r24, Z+16	; 0x10
    6126:	88 23       	and	r24, r24
    6128:	09 f4       	brne	.+2      	; 0x612c <tcp_packet_in+0x98>
    612a:	af c1       	rjmp	.+862    	; 0x648a <tcp_packet_in+0x3f6>
    612c:	80 81       	ld	r24, Z
    612e:	91 81       	ldd	r25, Z+1	; 0x01
    6130:	8a 15       	cp	r24, r10
    6132:	9b 05       	cpc	r25, r11
    6134:	09 f0       	breq	.+2      	; 0x6138 <tcp_packet_in+0xa4>
    6136:	a9 c1       	rjmp	.+850    	; 0x648a <tcp_packet_in+0x3f6>
    6138:	84 81       	ldd	r24, Z+4	; 0x04
    613a:	95 81       	ldd	r25, Z+5	; 0x05
    613c:	a6 81       	ldd	r26, Z+6	; 0x06
    613e:	b7 81       	ldd	r27, Z+7	; 0x07
    6140:	82 15       	cp	r24, r2
    6142:	93 05       	cpc	r25, r3
    6144:	a4 05       	cpc	r26, r4
    6146:	b5 05       	cpc	r27, r5
    6148:	09 f0       	breq	.+2      	; 0x614c <tcp_packet_in+0xb8>
    614a:	9f c1       	rjmp	.+830    	; 0x648a <tcp_packet_in+0x3f6>
    614c:	8c e3       	ldi	r24, 0x3C	; 60
    614e:	f4 01       	movw	r30, r8
    6150:	81 8b       	std	Z+17, r24	; 0x11
    6152:	0d 2d       	mov	r16, r13
    6154:	11 27       	eor	r17, r17
    6156:	02 ff       	sbrs	r16, 2
    6158:	04 c0       	rjmp	.+8      	; 0x6162 <tcp_packet_in+0xce>
    615a:	86 2d       	mov	r24, r6
    615c:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    6160:	f5 c1       	rjmp	.+1002   	; 0x654c <tcp_packet_in+0x4b8>
    6162:	f4 01       	movw	r30, r8
    6164:	80 89       	ldd	r24, Z+16	; 0x10
    6166:	86 30       	cpi	r24, 0x06	; 6
    6168:	09 f4       	brne	.+2      	; 0x616c <tcp_packet_in+0xd8>
    616a:	64 c1       	rjmp	.+712    	; 0x6434 <tcp_packet_in+0x3a0>
    616c:	87 30       	cpi	r24, 0x07	; 7
    616e:	48 f4       	brcc	.+18     	; 0x6182 <tcp_packet_in+0xee>
    6170:	84 30       	cpi	r24, 0x04	; 4
    6172:	d1 f0       	breq	.+52     	; 0x61a8 <tcp_packet_in+0x114>
    6174:	85 30       	cpi	r24, 0x05	; 5
    6176:	08 f0       	brcs	.+2      	; 0x617a <tcp_packet_in+0xe6>
    6178:	29 c1       	rjmp	.+594    	; 0x63cc <tcp_packet_in+0x338>
    617a:	83 30       	cpi	r24, 0x03	; 3
    617c:	09 f0       	breq	.+2      	; 0x6180 <tcp_packet_in+0xec>
    617e:	79 c1       	rjmp	.+754    	; 0x6472 <tcp_packet_in+0x3de>
    6180:	0d c0       	rjmp	.+26     	; 0x619c <tcp_packet_in+0x108>
    6182:	88 30       	cpi	r24, 0x08	; 8
    6184:	09 f4       	brne	.+2      	; 0x6188 <tcp_packet_in+0xf4>
    6186:	78 c1       	rjmp	.+752    	; 0x6478 <tcp_packet_in+0x3e4>
    6188:	88 30       	cpi	r24, 0x08	; 8
    618a:	08 f4       	brcc	.+2      	; 0x618e <tcp_packet_in+0xfa>
    618c:	6c c1       	rjmp	.+728    	; 0x6466 <tcp_packet_in+0x3d2>
    618e:	89 30       	cpi	r24, 0x09	; 9
    6190:	09 f4       	brne	.+2      	; 0x6194 <tcp_packet_in+0x100>
    6192:	fd c0       	rjmp	.+506    	; 0x638e <tcp_packet_in+0x2fa>
    6194:	8a 30       	cpi	r24, 0x0A	; 10
    6196:	09 f0       	breq	.+2      	; 0x619a <tcp_packet_in+0x106>
    6198:	6c c1       	rjmp	.+728    	; 0x6472 <tcp_packet_in+0x3de>
    619a:	16 c1       	rjmp	.+556    	; 0x63c8 <tcp_packet_in+0x334>
    619c:	f0 e1       	ldi	r31, 0x10	; 16
    619e:	df 16       	cp	r13, r31
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <tcp_packet_in+0x110>
    61a2:	12 c1       	rjmp	.+548    	; 0x63c8 <tcp_packet_in+0x334>
    61a4:	84 e0       	ldi	r24, 0x04	; 4
    61a6:	43 c1       	rjmp	.+646    	; 0x642e <tcp_packet_in+0x39a>
    61a8:	ea e2       	ldi	r30, 0x2A	; 42
    61aa:	ce 2e       	mov	r12, r30
    61ac:	d1 2c       	mov	r13, r1
    61ae:	ce 0c       	add	r12, r14
    61b0:	df 1c       	adc	r13, r15
    61b2:	00 ff       	sbrs	r16, 0
    61b4:	1c c0       	rjmp	.+56     	; 0x61ee <tcp_packet_in+0x15a>
    61b6:	8a e0       	ldi	r24, 0x0A	; 10
    61b8:	f4 01       	movw	r30, r8
    61ba:	80 8b       	std	Z+16, r24	; 0x10
    61bc:	c7 01       	movw	r24, r14
    61be:	86 96       	adiw	r24, 0x26	; 38
    61c0:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    61c4:	6f 5f       	subi	r22, 0xFF	; 255
    61c6:	7f 4f       	sbci	r23, 0xFF	; 255
    61c8:	8f 4f       	sbci	r24, 0xFF	; 255
    61ca:	9f 4f       	sbci	r25, 0xFF	; 255
    61cc:	f4 01       	movw	r30, r8
    61ce:	64 87       	std	Z+12, r22	; 0x0c
    61d0:	75 87       	std	Z+13, r23	; 0x0d
    61d2:	86 87       	std	Z+14, r24	; 0x0e
    61d4:	97 87       	std	Z+15, r25	; 0x0f
    61d6:	c6 01       	movw	r24, r12
    61d8:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    61dc:	f4 01       	movw	r30, r8
    61de:	60 87       	std	Z+8, r22	; 0x08
    61e0:	71 87       	std	Z+9, r23	; 0x09
    61e2:	82 87       	std	Z+10, r24	; 0x0a
    61e4:	93 87       	std	Z+11, r25	; 0x0b
    61e6:	20 e0       	ldi	r18, 0x00	; 0
    61e8:	30 e0       	ldi	r19, 0x00	; 0
    61ea:	41 e1       	ldi	r20, 0x11	; 17
    61ec:	37 c1       	rjmp	.+622    	; 0x645c <tcp_packet_in+0x3c8>
    61ee:	c6 01       	movw	r24, r12
    61f0:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    61f4:	9b 01       	movw	r18, r22
    61f6:	ac 01       	movw	r20, r24
    61f8:	f4 01       	movw	r30, r8
    61fa:	80 85       	ldd	r24, Z+8	; 0x08
    61fc:	91 85       	ldd	r25, Z+9	; 0x09
    61fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    6200:	b3 85       	ldd	r27, Z+11	; 0x0b
    6202:	28 17       	cp	r18, r24
    6204:	39 07       	cpc	r19, r25
    6206:	4a 07       	cpc	r20, r26
    6208:	5b 07       	cpc	r21, r27
    620a:	49 f0       	breq	.+18     	; 0x621e <tcp_packet_in+0x18a>
    620c:	21 30       	cpi	r18, 0x01	; 1
    620e:	31 05       	cpc	r19, r1
    6210:	41 05       	cpc	r20, r1
    6212:	51 05       	cpc	r21, r1
    6214:	21 f0       	breq	.+8      	; 0x621e <tcp_packet_in+0x18a>
    6216:	20 87       	std	Z+8, r18	; 0x08
    6218:	31 87       	std	Z+9, r19	; 0x09
    621a:	42 87       	std	Z+10, r20	; 0x0a
    621c:	53 87       	std	Z+11, r21	; 0x0b
    621e:	c7 01       	movw	r24, r14
    6220:	86 96       	adiw	r24, 0x26	; 38
    6222:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    6226:	5b 01       	movw	r10, r22
    6228:	6c 01       	movw	r12, r24
    622a:	f7 01       	movw	r30, r14
    622c:	86 a5       	ldd	r24, Z+46	; 0x2e
    622e:	48 2f       	mov	r20, r24
    6230:	55 27       	eor	r21, r21
    6232:	40 7f       	andi	r20, 0xF0	; 240
    6234:	50 70       	andi	r21, 0x00	; 0
    6236:	55 95       	asr	r21
    6238:	47 95       	ror	r20
    623a:	55 95       	asr	r21
    623c:	47 95       	ror	r20
    623e:	86 85       	ldd	r24, Z+14	; 0x0e
    6240:	99 27       	eor	r25, r25
    6242:	8f 70       	andi	r24, 0x0F	; 15
    6244:	90 70       	andi	r25, 0x00	; 0
    6246:	88 0f       	add	r24, r24
    6248:	99 1f       	adc	r25, r25
    624a:	88 0f       	add	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	0e 96       	adiw	r24, 0x0e	; 14
    6250:	48 0f       	add	r20, r24
    6252:	59 1f       	adc	r21, r25
    6254:	80 89       	ldd	r24, Z+16	; 0x10
    6256:	99 27       	eor	r25, r25
    6258:	78 2e       	mov	r7, r24
    625a:	66 24       	eor	r6, r6
    625c:	81 89       	ldd	r24, Z+17	; 0x11
    625e:	99 27       	eor	r25, r25
    6260:	68 2a       	or	r6, r24
    6262:	79 2a       	or	r7, r25
    6264:	64 1a       	sub	r6, r20
    6266:	75 0a       	sbc	r7, r21
    6268:	8e e0       	ldi	r24, 0x0E	; 14
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	68 0e       	add	r6, r24
    626e:	79 1e       	adc	r7, r25
    6270:	f4 01       	movw	r30, r8
    6272:	04 85       	ldd	r16, Z+12	; 0x0c
    6274:	15 85       	ldd	r17, Z+13	; 0x0d
    6276:	26 85       	ldd	r18, Z+14	; 0x0e
    6278:	37 85       	ldd	r19, Z+15	; 0x0f
    627a:	a0 16       	cp	r10, r16
    627c:	b1 06       	cpc	r11, r17
    627e:	c2 06       	cpc	r12, r18
    6280:	d3 06       	cpc	r13, r19
    6282:	e9 f0       	breq	.+58     	; 0x62be <tcp_packet_in+0x22a>
    6284:	01 15       	cp	r16, r1
    6286:	11 05       	cpc	r17, r1
    6288:	21 05       	cpc	r18, r1
    628a:	31 05       	cpc	r19, r1
    628c:	c1 f0       	breq	.+48     	; 0x62be <tcp_packet_in+0x22a>
    628e:	a0 16       	cp	r10, r16
    6290:	b1 06       	cpc	r11, r17
    6292:	c2 06       	cpc	r12, r18
    6294:	d3 06       	cpc	r13, r19
    6296:	58 f4       	brcc	.+22     	; 0x62ae <tcp_packet_in+0x21a>
    6298:	d9 01       	movw	r26, r18
    629a:	c8 01       	movw	r24, r16
    629c:	8a 19       	sub	r24, r10
    629e:	9b 09       	sbc	r25, r11
    62a0:	ac 09       	sbc	r26, r12
    62a2:	bd 09       	sbc	r27, r13
    62a4:	48 0f       	add	r20, r24
    62a6:	59 1f       	adc	r21, r25
    62a8:	68 1a       	sub	r6, r24
    62aa:	79 0a       	sbc	r7, r25
    62ac:	08 c0       	rjmp	.+16     	; 0x62be <tcp_packet_in+0x22a>
    62ae:	20 e0       	ldi	r18, 0x00	; 0
    62b0:	30 e0       	ldi	r19, 0x00	; 0
    62b2:	40 e1       	ldi	r20, 0x10	; 16
    62b4:	6a 81       	ldd	r22, Y+2	; 0x02
    62b6:	c7 01       	movw	r24, r14
    62b8:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <tcp_send_packet>
    62bc:	47 c1       	rjmp	.+654    	; 0x654c <tcp_packet_in+0x4b8>
    62be:	ba 01       	movw	r22, r20
    62c0:	4f 51       	subi	r20, 0x1F	; 31
    62c2:	54 40       	sbci	r21, 0x04	; 4
    62c4:	10 f0       	brcs	.+4      	; 0x62ca <tcp_packet_in+0x236>
    62c6:	6e e1       	ldi	r22, 0x1E	; 30
    62c8:	74 e0       	ldi	r23, 0x04	; 4
    62ca:	cb 01       	movw	r24, r22
    62cc:	86 0d       	add	r24, r6
    62ce:	97 1d       	adc	r25, r7
    62d0:	8f 51       	subi	r24, 0x1F	; 31
    62d2:	94 40       	sbci	r25, 0x04	; 4
    62d4:	18 f0       	brcs	.+6      	; 0x62dc <tcp_packet_in+0x248>
    62d6:	40 e0       	ldi	r20, 0x00	; 0
    62d8:	50 e0       	ldi	r21, 0x00	; 0
    62da:	08 c0       	rjmp	.+16     	; 0x62ec <tcp_packet_in+0x258>
    62dc:	4e e1       	ldi	r20, 0x1E	; 30
    62de:	54 e0       	ldi	r21, 0x04	; 4
    62e0:	46 1b       	sub	r20, r22
    62e2:	57 0b       	sbc	r21, r23
    62e4:	64 16       	cp	r6, r20
    62e6:	75 06       	cpc	r7, r21
    62e8:	08 f4       	brcc	.+2      	; 0x62ec <tcp_packet_in+0x258>
    62ea:	a3 01       	movw	r20, r6
    62ec:	ca 01       	movw	r24, r20
    62ee:	aa 27       	eor	r26, r26
    62f0:	bb 27       	eor	r27, r27
    62f2:	08 0f       	add	r16, r24
    62f4:	19 1f       	adc	r17, r25
    62f6:	2a 1f       	adc	r18, r26
    62f8:	3b 1f       	adc	r19, r27
    62fa:	f4 01       	movw	r30, r8
    62fc:	04 87       	std	Z+12, r16	; 0x0c
    62fe:	15 87       	std	Z+13, r17	; 0x0d
    6300:	26 87       	std	Z+14, r18	; 0x0e
    6302:	37 87       	std	Z+15, r19	; 0x0f
    6304:	82 81       	ldd	r24, Z+2	; 0x02
    6306:	93 81       	ldd	r25, Z+3	; 0x03
    6308:	80 35       	cpi	r24, 0x50	; 80
    630a:	91 05       	cpc	r25, r1
    630c:	21 f0       	breq	.+8      	; 0x6316 <tcp_packet_in+0x282>
    630e:	85 50       	subi	r24, 0x05	; 5
    6310:	9d 40       	sbci	r25, 0x0D	; 13
    6312:	09 f0       	breq	.+2      	; 0x6316 <tcp_packet_in+0x282>
    6314:	b1 c0       	rjmp	.+354    	; 0x6478 <tcp_packet_in+0x3e4>
    6316:	19 82       	std	Y+1, r1	; 0x01
    6318:	8e 01       	movw	r16, r28
    631a:	0f 5f       	subi	r16, 0xFF	; 255
    631c:	1f 4f       	sbci	r17, 0xFF	; 255
    631e:	2a 81       	ldd	r18, Y+2	; 0x02
    6320:	c7 01       	movw	r24, r14
    6322:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <httpd_data_in>
    6326:	8c 01       	movw	r16, r24
    6328:	89 81       	ldd	r24, Y+1	; 0x01
    632a:	82 30       	cpi	r24, 0x02	; 2
    632c:	31 f0       	breq	.+12     	; 0x633a <tcp_packet_in+0x2a6>
    632e:	83 30       	cpi	r24, 0x03	; 3
    6330:	b9 f0       	breq	.+46     	; 0x6360 <tcp_packet_in+0x2cc>
    6332:	81 30       	cpi	r24, 0x01	; 1
    6334:	09 f0       	breq	.+2      	; 0x6338 <tcp_packet_in+0x2a4>
    6336:	a0 c0       	rjmp	.+320    	; 0x6478 <tcp_packet_in+0x3e4>
    6338:	74 c0       	rjmp	.+232    	; 0x6422 <tcp_packet_in+0x38e>
    633a:	98 01       	movw	r18, r16
    633c:	40 e1       	ldi	r20, 0x10	; 16
    633e:	6a 81       	ldd	r22, Y+2	; 0x02
    6340:	c7 01       	movw	r24, r14
    6342:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <tcp_send_packet>
    6346:	98 01       	movw	r18, r16
    6348:	44 27       	eor	r20, r20
    634a:	55 27       	eor	r21, r21
    634c:	f4 01       	movw	r30, r8
    634e:	80 85       	ldd	r24, Z+8	; 0x08
    6350:	91 85       	ldd	r25, Z+9	; 0x09
    6352:	a2 85       	ldd	r26, Z+10	; 0x0a
    6354:	b3 85       	ldd	r27, Z+11	; 0x0b
    6356:	82 0f       	add	r24, r18
    6358:	93 1f       	adc	r25, r19
    635a:	a4 1f       	adc	r26, r20
    635c:	b5 1f       	adc	r27, r21
    635e:	12 c0       	rjmp	.+36     	; 0x6384 <tcp_packet_in+0x2f0>
    6360:	85 e0       	ldi	r24, 0x05	; 5
    6362:	f4 01       	movw	r30, r8
    6364:	80 8b       	std	Z+16, r24	; 0x10
    6366:	20 e0       	ldi	r18, 0x00	; 0
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	49 e1       	ldi	r20, 0x19	; 25
    636c:	6a 81       	ldd	r22, Y+2	; 0x02
    636e:	c7 01       	movw	r24, r14
    6370:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <tcp_send_packet>
    6374:	f4 01       	movw	r30, r8
    6376:	80 85       	ldd	r24, Z+8	; 0x08
    6378:	91 85       	ldd	r25, Z+9	; 0x09
    637a:	a2 85       	ldd	r26, Z+10	; 0x0a
    637c:	b3 85       	ldd	r27, Z+11	; 0x0b
    637e:	01 96       	adiw	r24, 0x01	; 1
    6380:	a1 1d       	adc	r26, r1
    6382:	b1 1d       	adc	r27, r1
    6384:	80 87       	std	Z+8, r24	; 0x08
    6386:	91 87       	std	Z+9, r25	; 0x09
    6388:	a2 87       	std	Z+10, r26	; 0x0a
    638a:	b3 87       	std	Z+11, r27	; 0x0b
    638c:	75 c0       	rjmp	.+234    	; 0x6478 <tcp_packet_in+0x3e4>
    638e:	8a e0       	ldi	r24, 0x0A	; 10
    6390:	f4 01       	movw	r30, r8
    6392:	80 8b       	std	Z+16, r24	; 0x10
    6394:	c7 01       	movw	r24, r14
    6396:	86 96       	adiw	r24, 0x26	; 38
    6398:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    639c:	6f 5f       	subi	r22, 0xFF	; 255
    639e:	7f 4f       	sbci	r23, 0xFF	; 255
    63a0:	8f 4f       	sbci	r24, 0xFF	; 255
    63a2:	9f 4f       	sbci	r25, 0xFF	; 255
    63a4:	f4 01       	movw	r30, r8
    63a6:	64 87       	std	Z+12, r22	; 0x0c
    63a8:	75 87       	std	Z+13, r23	; 0x0d
    63aa:	86 87       	std	Z+14, r24	; 0x0e
    63ac:	97 87       	std	Z+15, r25	; 0x0f
    63ae:	c7 01       	movw	r24, r14
    63b0:	8a 96       	adiw	r24, 0x2a	; 42
    63b2:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    63b6:	f4 01       	movw	r30, r8
    63b8:	60 87       	std	Z+8, r22	; 0x08
    63ba:	71 87       	std	Z+9, r23	; 0x09
    63bc:	82 87       	std	Z+10, r24	; 0x0a
    63be:	93 87       	std	Z+11, r25	; 0x0b
    63c0:	20 e0       	ldi	r18, 0x00	; 0
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	41 e0       	ldi	r20, 0x01	; 1
    63c6:	4a c0       	rjmp	.+148    	; 0x645c <tcp_packet_in+0x3c8>
    63c8:	86 2d       	mov	r24, r6
    63ca:	54 c0       	rjmp	.+168    	; 0x6474 <tcp_packet_in+0x3e0>
    63cc:	c7 01       	movw	r24, r14
    63ce:	86 96       	adiw	r24, 0x26	; 38
    63d0:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    63d4:	6f 5f       	subi	r22, 0xFF	; 255
    63d6:	7f 4f       	sbci	r23, 0xFF	; 255
    63d8:	8f 4f       	sbci	r24, 0xFF	; 255
    63da:	9f 4f       	sbci	r25, 0xFF	; 255
    63dc:	f4 01       	movw	r30, r8
    63de:	64 87       	std	Z+12, r22	; 0x0c
    63e0:	75 87       	std	Z+13, r23	; 0x0d
    63e2:	86 87       	std	Z+14, r24	; 0x0e
    63e4:	97 87       	std	Z+15, r25	; 0x0f
    63e6:	f1 e0       	ldi	r31, 0x01	; 1
    63e8:	df 16       	cp	r13, r31
    63ea:	19 f4       	brne	.+6      	; 0x63f2 <tcp_packet_in+0x35e>
    63ec:	87 e0       	ldi	r24, 0x07	; 7
    63ee:	f4 01       	movw	r30, r8
    63f0:	31 c0       	rjmp	.+98     	; 0x6454 <tcp_packet_in+0x3c0>
    63f2:	f1 e1       	ldi	r31, 0x11	; 17
    63f4:	df 16       	cp	r13, r31
    63f6:	d1 f4       	brne	.+52     	; 0x642c <tcp_packet_in+0x398>
    63f8:	c7 01       	movw	r24, r14
    63fa:	8a 96       	adiw	r24, 0x2a	; 42
    63fc:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    6400:	f4 01       	movw	r30, r8
    6402:	20 85       	ldd	r18, Z+8	; 0x08
    6404:	31 85       	ldd	r19, Z+9	; 0x09
    6406:	42 85       	ldd	r20, Z+10	; 0x0a
    6408:	53 85       	ldd	r21, Z+11	; 0x0b
    640a:	62 17       	cp	r22, r18
    640c:	73 07       	cpc	r23, r19
    640e:	84 07       	cpc	r24, r20
    6410:	95 07       	cpc	r25, r21
    6412:	21 f4       	brne	.+8      	; 0x641c <tcp_packet_in+0x388>
    6414:	86 2d       	mov	r24, r6
    6416:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    641a:	03 c0       	rjmp	.+6      	; 0x6422 <tcp_packet_in+0x38e>
    641c:	8a e0       	ldi	r24, 0x0A	; 10
    641e:	f4 01       	movw	r30, r8
    6420:	80 8b       	std	Z+16, r24	; 0x10
    6422:	20 e0       	ldi	r18, 0x00	; 0
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	40 e1       	ldi	r20, 0x10	; 16
    6428:	6a 81       	ldd	r22, Y+2	; 0x02
    642a:	19 c0       	rjmp	.+50     	; 0x645e <tcp_packet_in+0x3ca>
    642c:	86 e0       	ldi	r24, 0x06	; 6
    642e:	f4 01       	movw	r30, r8
    6430:	80 8b       	std	Z+16, r24	; 0x10
    6432:	8c c0       	rjmp	.+280    	; 0x654c <tcp_packet_in+0x4b8>
    6434:	c7 01       	movw	r24, r14
    6436:	86 96       	adiw	r24, 0x26	; 38
    6438:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    643c:	6f 5f       	subi	r22, 0xFF	; 255
    643e:	7f 4f       	sbci	r23, 0xFF	; 255
    6440:	8f 4f       	sbci	r24, 0xFF	; 255
    6442:	9f 4f       	sbci	r25, 0xFF	; 255
    6444:	f4 01       	movw	r30, r8
    6446:	64 87       	std	Z+12, r22	; 0x0c
    6448:	75 87       	std	Z+13, r23	; 0x0d
    644a:	86 87       	std	Z+14, r24	; 0x0e
    644c:	97 87       	std	Z+15, r25	; 0x0f
    644e:	00 ff       	sbrs	r16, 0
    6450:	13 c0       	rjmp	.+38     	; 0x6478 <tcp_packet_in+0x3e4>
    6452:	88 e0       	ldi	r24, 0x08	; 8
    6454:	80 8b       	std	Z+16, r24	; 0x10
    6456:	20 e0       	ldi	r18, 0x00	; 0
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	40 e1       	ldi	r20, 0x10	; 16
    645c:	66 2d       	mov	r22, r6
    645e:	c7 01       	movw	r24, r14
    6460:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <tcp_send_packet>
    6464:	09 c0       	rjmp	.+18     	; 0x6478 <tcp_packet_in+0x3e4>
    6466:	04 ff       	sbrs	r16, 4
    6468:	71 c0       	rjmp	.+226    	; 0x654c <tcp_packet_in+0x4b8>
    646a:	88 e0       	ldi	r24, 0x08	; 8
    646c:	f4 01       	movw	r30, r8
    646e:	80 8b       	std	Z+16, r24	; 0x10
    6470:	08 c0       	rjmp	.+16     	; 0x6482 <tcp_packet_in+0x3ee>
    6472:	8a 81       	ldd	r24, Y+2	; 0x02
    6474:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <tcp_close_socket>
    6478:	f4 01       	movw	r30, r8
    647a:	80 89       	ldd	r24, Z+16	; 0x10
    647c:	88 30       	cpi	r24, 0x08	; 8
    647e:	09 f0       	breq	.+2      	; 0x6482 <tcp_packet_in+0x3ee>
    6480:	65 c0       	rjmp	.+202    	; 0x654c <tcp_packet_in+0x4b8>
    6482:	85 e0       	ldi	r24, 0x05	; 5
    6484:	f4 01       	movw	r30, r8
    6486:	81 8b       	std	Z+17, r24	; 0x11
    6488:	61 c0       	rjmp	.+194    	; 0x654c <tcp_packet_in+0x4b8>
    648a:	08 94       	sec
    648c:	61 1c       	adc	r6, r1
    648e:	71 1c       	adc	r7, r1
    6490:	83 e1       	ldi	r24, 0x13	; 19
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	88 0e       	add	r8, r24
    6496:	99 1e       	adc	r9, r25
    6498:	73 96       	adiw	r30, 0x13	; 19
    649a:	9a e0       	ldi	r25, 0x0A	; 10
    649c:	69 16       	cp	r6, r25
    649e:	71 04       	cpc	r7, r1
    64a0:	09 f0       	breq	.+2      	; 0x64a4 <tcp_packet_in+0x410>
    64a2:	3f ce       	rjmp	.-898    	; 0x6122 <tcp_packet_in+0x8e>
    64a4:	e2 e0       	ldi	r30, 0x02	; 2
    64a6:	de 16       	cp	r13, r30
    64a8:	09 f0       	breq	.+2      	; 0x64ac <tcp_packet_in+0x418>
    64aa:	50 c0       	rjmp	.+160    	; 0x654c <tcp_packet_in+0x4b8>
    64ac:	0e 94 14 30 	call	0x6028	; 0x6028 <tcp_find_free_socket>
    64b0:	d8 2e       	mov	r13, r24
    64b2:	f9 e0       	ldi	r31, 0x09	; 9
    64b4:	f8 17       	cp	r31, r24
    64b6:	08 f4       	brcc	.+2      	; 0x64ba <tcp_packet_in+0x426>
    64b8:	49 c0       	rjmp	.+146    	; 0x654c <tcp_packet_in+0x4b8>
    64ba:	28 2f       	mov	r18, r24
    64bc:	33 27       	eor	r19, r19
    64be:	83 e1       	ldi	r24, 0x13	; 19
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	28 9f       	mul	r18, r24
    64c4:	80 01       	movw	r16, r0
    64c6:	29 9f       	mul	r18, r25
    64c8:	10 0d       	add	r17, r0
    64ca:	38 9f       	mul	r19, r24
    64cc:	10 0d       	add	r17, r0
    64ce:	11 24       	eor	r1, r1
    64d0:	05 58       	subi	r16, 0x85	; 133
    64d2:	19 4f       	sbci	r17, 0xF9	; 249
    64d4:	83 e0       	ldi	r24, 0x03	; 3
    64d6:	f8 01       	movw	r30, r16
    64d8:	80 8b       	std	Z+16, r24	; 0x10
    64da:	b1 82       	std	Z+1, r11	; 0x01
    64dc:	a0 82       	st	Z, r10
    64de:	24 82       	std	Z+4, r2	; 0x04
    64e0:	35 82       	std	Z+5, r3	; 0x05
    64e2:	46 82       	std	Z+6, r4	; 0x06
    64e4:	57 82       	std	Z+7, r5	; 0x07
    64e6:	8c 2d       	mov	r24, r12
    64e8:	99 27       	eor	r25, r25
    64ea:	98 2f       	mov	r25, r24
    64ec:	88 27       	eor	r24, r24
    64ee:	fb 81       	ldd	r31, Y+3	; 0x03
    64f0:	2f 2f       	mov	r18, r31
    64f2:	33 27       	eor	r19, r19
    64f4:	82 2b       	or	r24, r18
    64f6:	93 2b       	or	r25, r19
    64f8:	f8 01       	movw	r30, r16
    64fa:	93 83       	std	Z+3, r25	; 0x03
    64fc:	82 83       	std	Z+2, r24	; 0x02
    64fe:	c7 01       	movw	r24, r14
    6500:	86 96       	adiw	r24, 0x26	; 38
    6502:	0e 94 12 39 	call	0x7224	; 0x7224 <nic_buffer_to_seq>
    6506:	6f 5f       	subi	r22, 0xFF	; 255
    6508:	7f 4f       	sbci	r23, 0xFF	; 255
    650a:	8f 4f       	sbci	r24, 0xFF	; 255
    650c:	9f 4f       	sbci	r25, 0xFF	; 255
    650e:	f8 01       	movw	r30, r16
    6510:	64 87       	std	Z+12, r22	; 0x0c
    6512:	75 87       	std	Z+13, r23	; 0x0d
    6514:	86 87       	std	Z+14, r24	; 0x0e
    6516:	97 87       	std	Z+15, r25	; 0x0f
    6518:	10 86       	std	Z+8, r1	; 0x08
    651a:	11 86       	std	Z+9, r1	; 0x09
    651c:	12 86       	std	Z+10, r1	; 0x0a
    651e:	13 86       	std	Z+11, r1	; 0x0b
    6520:	8c e3       	ldi	r24, 0x3C	; 60
    6522:	81 8b       	std	Z+17, r24	; 0x11
    6524:	12 8a       	std	Z+18, r1	; 0x12
    6526:	20 e0       	ldi	r18, 0x00	; 0
    6528:	30 e0       	ldi	r19, 0x00	; 0
    652a:	42 e1       	ldi	r20, 0x12	; 18
    652c:	6d 2d       	mov	r22, r13
    652e:	c7 01       	movw	r24, r14
    6530:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <tcp_send_packet>
    6534:	81 e0       	ldi	r24, 0x01	; 1
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	a0 e0       	ldi	r26, 0x00	; 0
    653a:	b0 e0       	ldi	r27, 0x00	; 0
    653c:	f8 01       	movw	r30, r16
    653e:	80 87       	std	Z+8, r24	; 0x08
    6540:	91 87       	std	Z+9, r25	; 0x09
    6542:	a2 87       	std	Z+10, r26	; 0x0a
    6544:	b3 87       	std	Z+11, r27	; 0x0b
    6546:	8d 2d       	mov	r24, r13
    6548:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <httpd_cleanup_conn>
    654c:	23 96       	adiw	r28, 0x03	; 3
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	f8 94       	cli
    6552:	de bf       	out	0x3e, r29	; 62
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	cd bf       	out	0x3d, r28	; 61
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	ff 90       	pop	r15
    6562:	ef 90       	pop	r14
    6564:	df 90       	pop	r13
    6566:	cf 90       	pop	r12
    6568:	bf 90       	pop	r11
    656a:	af 90       	pop	r10
    656c:	9f 90       	pop	r9
    656e:	8f 90       	pop	r8
    6570:	7f 90       	pop	r7
    6572:	6f 90       	pop	r6
    6574:	5f 90       	pop	r5
    6576:	4f 90       	pop	r4
    6578:	3f 90       	pop	r3
    657a:	2f 90       	pop	r2
    657c:	08 95       	ret

0000657e <enc28j60_read_buffer>:
}


//read enc28j60 buffer
void enc28j60_read_buffer(unsigned char *buffer, unsigned int len){
    657e:	fc 01       	movw	r30, r24
	//select enc28j60
	ENC28J60_CS_LO();
    6580:	c2 98       	cbi	0x18, 2	; 24

	//send read cmd & wait for finish:
	SPDR = ENC28J60_OP_READ_BUF_MEM;
    6582:	8a e3       	ldi	r24, 0x3A	; 58
    6584:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    6586:	77 99       	sbic	0x0e, 7	; 14
    6588:	06 c0       	rjmp	.+12     	; 0x6596 <enc28j60_read_buffer+0x18>
    658a:	fd cf       	rjmp	.-6      	; 0x6586 <enc28j60_read_buffer+0x8>

	//read data & store in buffer:
	while(len--){
		//send dummy byte & read data
		SPDR = 0x00;
    658c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
    658e:	77 9b       	sbis	0x0e, 7	; 14
    6590:	fe cf       	rjmp	.-4      	; 0x658e <enc28j60_read_buffer+0x10>
		*buffer++ = SPDR;
    6592:	8f b1       	in	r24, 0x0f	; 15
    6594:	81 93       	st	Z+, r24
    6596:	61 50       	subi	r22, 0x01	; 1
    6598:	70 40       	sbci	r23, 0x00	; 0
    659a:	8f ef       	ldi	r24, 0xFF	; 255
    659c:	6f 3f       	cpi	r22, 0xFF	; 255
    659e:	78 07       	cpc	r23, r24
    65a0:	a9 f7       	brne	.-22     	; 0x658c <enc28j60_read_buffer+0xe>
	}	

	//deselect enc28j60
	ENC28J60_CS_HI();
    65a2:	c2 9a       	sbi	0x18, 2	; 24
    65a4:	08 95       	ret

000065a6 <enc28j60_write_buffer>:
}

//write enc28j60 buffer
void enc28j60_write_buffer(unsigned char *buffer, unsigned int len){
    65a6:	fc 01       	movw	r30, r24
	//select enc28j60
	ENC28J60_CS_LO();
    65a8:	c2 98       	cbi	0x18, 2	; 24

	//send write cmd & wait for finish:
	SPDR = ENC28J60_OP_WRITE_BUF_MEM;
    65aa:	8a e7       	ldi	r24, 0x7A	; 122
    65ac:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    65ae:	77 99       	sbic	0x0e, 7	; 14
    65b0:	06 c0       	rjmp	.+12     	; 0x65be <enc28j60_write_buffer+0x18>
    65b2:	fd cf       	rjmp	.-6      	; 0x65ae <enc28j60_write_buffer+0x8>

	while(len--){
		//send data
		SPDR = *buffer++;
    65b4:	80 81       	ld	r24, Z
    65b6:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
    65b8:	77 9b       	sbis	0x0e, 7	; 14
    65ba:	fe cf       	rjmp	.-4      	; 0x65b8 <enc28j60_write_buffer+0x12>
    65bc:	31 96       	adiw	r30, 0x01	; 1
    65be:	61 50       	subi	r22, 0x01	; 1
    65c0:	70 40       	sbci	r23, 0x00	; 0
    65c2:	8f ef       	ldi	r24, 0xFF	; 255
    65c4:	6f 3f       	cpi	r22, 0xFF	; 255
    65c6:	78 07       	cpc	r23, r24
    65c8:	a9 f7       	brne	.-22     	; 0x65b4 <enc28j60_write_buffer+0xe>
	}

	//deselect enc28j60
	ENC28J60_CS_HI();
    65ca:	c2 9a       	sbi	0x18, 2	; 24
    65cc:	08 95       	ret

000065ce <enc28j60_spi_read_byte>:
}

//read address
unsigned char enc28j60_read_address(unsigned char address){
	//select bank:
	enc28j60_select_bank(address);

	//and read the data:
	return enc28j60_spi_read_byte(ENC28J60_OP_READ_CTRL_REG, address);
}

//write address
void enc28j60_write_address(unsigned char address, unsigned char data){
	//select bank:
	enc28j60_select_bank(address);

	//and write data
	enc28j60_spi_write_word((ENC28J60_OP_WRITE_CTRL_REG | (address & 0x1F)), data);
}

//switch to given bank (only if necessary)
void enc28j60_select_bank(unsigned char bank){
	//check if this is really a new bank
	if ((bank & 0x60) != enc28j60_current_bank){
		//store bank info
		enc28j60_current_bank = (bank & 0x60);

		//clear bank sel bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFC | ENC28J60_REG_ECON1),((1<<ENC28J60_BIT_ECON1_BSEL0) | (1<<ENC28J60_BIT_ECON1_BSEL1))); 
		//setup bank selection bits:
		enc28j60_spi_write_word((ENC28J60_OP_BFS | ENC28J60_REG_ECON1),enc28j60_current_bank>>5);	
	}
}

//read a byte (adds a extra dummy read if (address&0x80)
unsigned char enc28j60_spi_read_byte(unsigned char op, unsigned char address){
    65ce:	c2 98       	cbi	0x18, 2	; 24
	unsigned char res;
	//select enc28j60
	ENC28J60_CS_LO();

	//start read cmd:
	SPDR = op | (address & 0x1F);
    65d0:	96 2f       	mov	r25, r22
    65d2:	9f 71       	andi	r25, 0x1F	; 31
    65d4:	98 2b       	or	r25, r24
    65d6:	9f b9       	out	0x0f, r25	; 15

	//wait for completion
	while(!(SPSR & (1<<SPIF)));
    65d8:	77 9b       	sbis	0x0e, 7	; 14
    65da:	fe cf       	rjmp	.-4      	; 0x65d8 <enc28j60_spi_read_byte+0xa>

	//send dummy data (read)
	SPDR = 0x00;
    65dc:	1f b8       	out	0x0f, r1	; 15
	
	//wait for completion
	while(!(SPSR & (1<<SPIF)));
    65de:	77 9b       	sbis	0x0e, 7	; 14
    65e0:	fe cf       	rjmp	.-4      	; 0x65de <enc28j60_spi_read_byte+0x10>

	//if we read MAC* or MI* registers we need to add an dummy read here !
	//use bit7 of address for this:
	if(address & 0x80){
    65e2:	67 ff       	sbrs	r22, 7
    65e4:	03 c0       	rjmp	.+6      	; 0x65ec <enc28j60_spi_read_byte+0x1e>
		SPDR = 0x00;
    65e6:	1f b8       	out	0x0f, r1	; 15
		while(!((SPSR) & (1<<SPIF)));
    65e8:	77 9b       	sbis	0x0e, 7	; 14
    65ea:	fe cf       	rjmp	.-4      	; 0x65e8 <enc28j60_spi_read_byte+0x1a>
	}

	//read data
	res = SPDR;
    65ec:	8f b1       	in	r24, 0x0f	; 15

	//deselect enc28j60
	ENC28J60_CS_HI();
    65ee:	c2 9a       	sbi	0x18, 2	; 24
	
	return res;
}
    65f0:	99 27       	eor	r25, r25
    65f2:	08 95       	ret

000065f4 <enc28j60_spi_write_word>:

//spi write word
void enc28j60_spi_write_word(unsigned char hi, unsigned char lo){
    65f4:	c2 98       	cbi	0x18, 2	; 24
	//unsigned char res = 0;

	//select enc28j60
	ENC28J60_CS_LO();

	//shift hi data out
	SPDR = hi;
    65f6:	8f b9       	out	0x0f, r24	; 15

	//wait for completion
	while(!(SPSR & (1<<SPIF)));
    65f8:	77 9b       	sbis	0x0e, 7	; 14
    65fa:	fe cf       	rjmp	.-4      	; 0x65f8 <enc28j60_spi_write_word+0x4>


	//shift lo data out
	SPDR = lo;
    65fc:	6f b9       	out	0x0f, r22	; 15

	//wait for completion
	while(!(SPSR & (1<<SPIF)));
    65fe:	77 9b       	sbis	0x0e, 7	; 14
    6600:	fe cf       	rjmp	.-4      	; 0x65fe <enc28j60_spi_write_word+0xa>

	//deselect enc28j60
	ENC28J60_CS_HI();
    6602:	c2 9a       	sbi	0x18, 2	; 24
    6604:	08 95       	ret

00006606 <enc28j60_select_bank>:
    6606:	48 2f       	mov	r20, r24
    6608:	20 91 3a 07 	lds	r18, 0x073A
    660c:	99 27       	eor	r25, r25
    660e:	80 76       	andi	r24, 0x60	; 96
    6610:	90 70       	andi	r25, 0x00	; 0
    6612:	33 27       	eor	r19, r19
    6614:	82 17       	cp	r24, r18
    6616:	93 07       	cpc	r25, r19
    6618:	79 f0       	breq	.+30     	; 0x6638 <enc28j60_select_bank+0x32>
    661a:	40 76       	andi	r20, 0x60	; 96
    661c:	40 93 3a 07 	sts	0x073A, r20
    6620:	63 e0       	ldi	r22, 0x03	; 3
    6622:	8f eb       	ldi	r24, 0xBF	; 191
    6624:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6628:	60 91 3a 07 	lds	r22, 0x073A
    662c:	62 95       	swap	r22
    662e:	66 95       	lsr	r22
    6630:	67 70       	andi	r22, 0x07	; 7
    6632:	8f e9       	ldi	r24, 0x9F	; 159
    6634:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6638:	08 95       	ret

0000663a <enc28j60_read_address>:
    663a:	1f 93       	push	r17
    663c:	18 2f       	mov	r17, r24
    663e:	0e 94 03 33 	call	0x6606	; 0x6606 <enc28j60_select_bank>
    6642:	61 2f       	mov	r22, r17
    6644:	80 e0       	ldi	r24, 0x00	; 0
    6646:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    664a:	99 27       	eor	r25, r25
    664c:	1f 91       	pop	r17
    664e:	08 95       	ret

00006650 <enc28j60_write_address>:
    6650:	0f 93       	push	r16
    6652:	1f 93       	push	r17
    6654:	18 2f       	mov	r17, r24
    6656:	06 2f       	mov	r16, r22
    6658:	0e 94 03 33 	call	0x6606	; 0x6606 <enc28j60_select_bank>
    665c:	1f 71       	andi	r17, 0x1F	; 31
    665e:	60 2f       	mov	r22, r16
    6660:	81 2f       	mov	r24, r17
    6662:	80 64       	ori	r24, 0x40	; 64
    6664:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6668:	1f 91       	pop	r17
    666a:	0f 91       	pop	r16
    666c:	08 95       	ret

0000666e <enc28j60_write_phy>:
    666e:	0f 93       	push	r16
    6670:	1f 93       	push	r17
    6672:	8b 01       	movw	r16, r22
    6674:	68 2f       	mov	r22, r24
    6676:	84 ed       	ldi	r24, 0xD4	; 212
    6678:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    667c:	60 2f       	mov	r22, r16
    667e:	86 ed       	ldi	r24, 0xD6	; 214
    6680:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6684:	01 2f       	mov	r16, r17
    6686:	11 27       	eor	r17, r17
    6688:	60 2f       	mov	r22, r16
    668a:	87 ed       	ldi	r24, 0xD7	; 215
    668c:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6690:	8a ee       	ldi	r24, 0xEA	; 234
    6692:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    6696:	80 fd       	sbrc	r24, 0
    6698:	fb cf       	rjmp	.-10     	; 0x6690 <enc28j60_write_phy+0x22>
    669a:	1f 91       	pop	r17
    669c:	0f 91       	pop	r16
    669e:	08 95       	ret

000066a0 <enc28j60_read_phy>:
    66a0:	0f 93       	push	r16
    66a2:	1f 93       	push	r17
    66a4:	68 2f       	mov	r22, r24
    66a6:	84 ed       	ldi	r24, 0xD4	; 212
    66a8:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    66ac:	61 e0       	ldi	r22, 0x01	; 1
    66ae:	82 ed       	ldi	r24, 0xD2	; 210
    66b0:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    66b4:	8a ee       	ldi	r24, 0xEA	; 234
    66b6:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    66ba:	80 fd       	sbrc	r24, 0
    66bc:	fb cf       	rjmp	.-10     	; 0x66b4 <enc28j60_read_phy+0x14>
    66be:	60 e0       	ldi	r22, 0x00	; 0
    66c0:	82 ed       	ldi	r24, 0xD2	; 210
    66c2:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    66c6:	89 ed       	ldi	r24, 0xD9	; 217
    66c8:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    66cc:	08 2f       	mov	r16, r24
    66ce:	11 27       	eor	r17, r17
    66d0:	10 2f       	mov	r17, r16
    66d2:	00 27       	eor	r16, r16
    66d4:	88 ed       	ldi	r24, 0xD8	; 216
    66d6:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    66da:	99 27       	eor	r25, r25
    66dc:	80 2b       	or	r24, r16
    66de:	91 2b       	or	r25, r17
    66e0:	1f 91       	pop	r17
    66e2:	0f 91       	pop	r16
    66e4:	08 95       	ret

000066e6 <enc28j60_receive_packet>:
    66e6:	cf 92       	push	r12
    66e8:	df 92       	push	r13
    66ea:	ef 92       	push	r14
    66ec:	ff 92       	push	r15
    66ee:	0f 93       	push	r16
    66f0:	1f 93       	push	r17
    66f2:	cf 93       	push	r28
    66f4:	df 93       	push	r29
    66f6:	6c 01       	movw	r12, r24
    66f8:	7b 01       	movw	r14, r22
    66fa:	8c e1       	ldi	r24, 0x1C	; 28
    66fc:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    6700:	86 fd       	sbrc	r24, 6
    6702:	08 c0       	rjmp	.+16     	; 0x6714 <enc28j60_receive_packet+0x2e>
    6704:	89 e3       	ldi	r24, 0x39	; 57
    6706:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    670a:	88 23       	and	r24, r24
    670c:	19 f4       	brne	.+6      	; 0x6714 <enc28j60_receive_packet+0x2e>
    670e:	80 e0       	ldi	r24, 0x00	; 0
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	75 c0       	rjmp	.+234    	; 0x67fe <enc28j60_receive_packet+0x118>
    6714:	60 91 3b 07 	lds	r22, 0x073B
    6718:	70 91 3c 07 	lds	r23, 0x073C
    671c:	80 e0       	ldi	r24, 0x00	; 0
    671e:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6722:	60 91 3b 07 	lds	r22, 0x073B
    6726:	70 91 3c 07 	lds	r23, 0x073C
    672a:	67 2f       	mov	r22, r23
    672c:	77 27       	eor	r23, r23
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6734:	60 e0       	ldi	r22, 0x00	; 0
    6736:	8a e3       	ldi	r24, 0x3A	; 58
    6738:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    673c:	99 27       	eor	r25, r25
    673e:	90 93 3c 07 	sts	0x073C, r25
    6742:	80 93 3b 07 	sts	0x073B, r24
    6746:	00 91 3b 07 	lds	r16, 0x073B
    674a:	10 91 3c 07 	lds	r17, 0x073C
    674e:	60 e0       	ldi	r22, 0x00	; 0
    6750:	8a e3       	ldi	r24, 0x3A	; 58
    6752:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    6756:	99 27       	eor	r25, r25
    6758:	98 2f       	mov	r25, r24
    675a:	88 27       	eor	r24, r24
    675c:	08 2b       	or	r16, r24
    675e:	19 2b       	or	r17, r25
    6760:	10 93 3c 07 	sts	0x073C, r17
    6764:	00 93 3b 07 	sts	0x073B, r16
    6768:	60 e0       	ldi	r22, 0x00	; 0
    676a:	8a e3       	ldi	r24, 0x3A	; 58
    676c:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    6770:	c8 2f       	mov	r28, r24
    6772:	dd 27       	eor	r29, r29
    6774:	60 e0       	ldi	r22, 0x00	; 0
    6776:	8a e3       	ldi	r24, 0x3A	; 58
    6778:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    677c:	99 27       	eor	r25, r25
    677e:	98 2f       	mov	r25, r24
    6780:	88 27       	eor	r24, r24
    6782:	c8 2b       	or	r28, r24
    6784:	d9 2b       	or	r29, r25
    6786:	60 e0       	ldi	r22, 0x00	; 0
    6788:	8a e3       	ldi	r24, 0x3A	; 58
    678a:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    678e:	60 e0       	ldi	r22, 0x00	; 0
    6790:	8a e3       	ldi	r24, 0x3A	; 58
    6792:	0e 94 e7 32 	call	0x65ce	; 0x65ce <enc28j60_spi_read_byte>
    6796:	87 01       	movw	r16, r14
    6798:	ce 15       	cp	r28, r14
    679a:	df 05       	cpc	r29, r15
    679c:	08 f4       	brcc	.+2      	; 0x67a0 <enc28j60_receive_packet+0xba>
    679e:	8e 01       	movw	r16, r28
    67a0:	b8 01       	movw	r22, r16
    67a2:	c6 01       	movw	r24, r12
    67a4:	0e 94 bf 32 	call	0x657e	; 0x657e <enc28j60_read_buffer>
    67a8:	80 91 3b 07 	lds	r24, 0x073B
    67ac:	90 91 3c 07 	lds	r25, 0x073C
    67b0:	80 91 3b 07 	lds	r24, 0x073B
    67b4:	90 91 3c 07 	lds	r25, 0x073C
    67b8:	01 97       	sbiw	r24, 0x01	; 1
    67ba:	80 50       	subi	r24, 0x00	; 0
    67bc:	9a 41       	sbci	r25, 0x1A	; 26
    67be:	30 f0       	brcs	.+12     	; 0x67cc <enc28j60_receive_packet+0xe6>
    67c0:	6f ef       	ldi	r22, 0xFF	; 255
    67c2:	8c e0       	ldi	r24, 0x0C	; 12
    67c4:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    67c8:	69 e1       	ldi	r22, 0x19	; 25
    67ca:	10 c0       	rjmp	.+32     	; 0x67ec <enc28j60_receive_packet+0x106>
    67cc:	60 91 3b 07 	lds	r22, 0x073B
    67d0:	70 91 3c 07 	lds	r23, 0x073C
    67d4:	61 50       	subi	r22, 0x01	; 1
    67d6:	8c e0       	ldi	r24, 0x0C	; 12
    67d8:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    67dc:	60 91 3b 07 	lds	r22, 0x073B
    67e0:	70 91 3c 07 	lds	r23, 0x073C
    67e4:	61 50       	subi	r22, 0x01	; 1
    67e6:	70 40       	sbci	r23, 0x00	; 0
    67e8:	67 2f       	mov	r22, r23
    67ea:	77 27       	eor	r23, r23
    67ec:	8d e0       	ldi	r24, 0x0D	; 13
    67ee:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    67f2:	60 e4       	ldi	r22, 0x40	; 64
    67f4:	8e e9       	ldi	r24, 0x9E	; 158
    67f6:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    67fa:	c8 01       	movw	r24, r16
    67fc:	04 97       	sbiw	r24, 0x04	; 4
    67fe:	df 91       	pop	r29
    6800:	cf 91       	pop	r28
    6802:	1f 91       	pop	r17
    6804:	0f 91       	pop	r16
    6806:	ff 90       	pop	r15
    6808:	ef 90       	pop	r14
    680a:	df 90       	pop	r13
    680c:	cf 90       	pop	r12
    680e:	08 95       	ret

00006810 <enc28j60_send_packet>:
    6810:	ef 92       	push	r14
    6812:	ff 92       	push	r15
    6814:	0f 93       	push	r16
    6816:	1f 93       	push	r17
    6818:	cf 93       	push	r28
    681a:	df 93       	push	r29
    681c:	7c 01       	movw	r14, r24
    681e:	eb 01       	movw	r28, r22
    6820:	00 e0       	ldi	r16, 0x00	; 0
    6822:	10 e0       	ldi	r17, 0x00	; 0
    6824:	8f e1       	ldi	r24, 0x1F	; 31
    6826:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    682a:	83 ff       	sbrs	r24, 3
    682c:	09 c0       	rjmp	.+18     	; 0x6840 <enc28j60_send_packet+0x30>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    682e:	80 e0       	ldi	r24, 0x00	; 0
    6830:	98 e4       	ldi	r25, 0x48	; 72
    6832:	01 97       	sbiw	r24, 0x01	; 1
    6834:	f1 f7       	brne	.-4      	; 0x6832 <enc28j60_send_packet+0x22>
    6836:	0f 5f       	subi	r16, 0xFF	; 255
    6838:	1f 4f       	sbci	r17, 0xFF	; 255
    683a:	02 33       	cpi	r16, 0x32	; 50
    683c:	11 05       	cpc	r17, r1
    683e:	91 f7       	brne	.-28     	; 0x6824 <enc28j60_send_packet+0x14>
    6840:	60 e0       	ldi	r22, 0x00	; 0
    6842:	82 e0       	ldi	r24, 0x02	; 2
    6844:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6848:	6a e1       	ldi	r22, 0x1A	; 26
    684a:	83 e0       	ldi	r24, 0x03	; 3
    684c:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6850:	6c 2f       	mov	r22, r28
    6852:	86 e0       	ldi	r24, 0x06	; 6
    6854:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6858:	c0 50       	subi	r28, 0x00	; 0
    685a:	d6 4e       	sbci	r29, 0xE6	; 230
    685c:	6d 2f       	mov	r22, r29
    685e:	77 27       	eor	r23, r23
    6860:	c0 50       	subi	r28, 0x00	; 0
    6862:	da 41       	sbci	r29, 0x1A	; 26
    6864:	87 e0       	ldi	r24, 0x07	; 7
    6866:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    686a:	60 e0       	ldi	r22, 0x00	; 0
    686c:	8a e7       	ldi	r24, 0x7A	; 122
    686e:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6872:	be 01       	movw	r22, r28
    6874:	c7 01       	movw	r24, r14
    6876:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <enc28j60_write_buffer>
    687a:	60 e8       	ldi	r22, 0x80	; 128
    687c:	8f e9       	ldi	r24, 0x9F	; 159
    687e:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6882:	60 e8       	ldi	r22, 0x80	; 128
    6884:	8f eb       	ldi	r24, 0xBF	; 191
    6886:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    688a:	6c e0       	ldi	r22, 0x0C	; 12
    688c:	8f e9       	ldi	r24, 0x9F	; 159
    688e:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6892:	df 91       	pop	r29
    6894:	cf 91       	pop	r28
    6896:	1f 91       	pop	r17
    6898:	0f 91       	pop	r16
    689a:	ff 90       	pop	r15
    689c:	ef 90       	pop	r14
    689e:	08 95       	ret

000068a0 <enc28j60_init>:
    68a0:	cf 93       	push	r28
    68a2:	df 93       	push	r29
    68a4:	8f ef       	ldi	r24, 0xFF	; 255
    68a6:	80 93 3a 07 	sts	0x073A, r24
    68aa:	87 b3       	in	r24, 0x17	; 23
    68ac:	86 60       	ori	r24, 0x06	; 6
    68ae:	87 bb       	out	0x17, r24	; 23
    68b0:	c2 9a       	sbi	0x18, 2	; 24
    68b2:	c7 9a       	sbi	0x18, 7	; 24
    68b4:	87 b3       	in	r24, 0x17	; 23
    68b6:	80 6b       	ori	r24, 0xB0	; 176
    68b8:	87 bb       	out	0x17, r24	; 23
    68ba:	be 98       	cbi	0x17, 6	; 23
    68bc:	80 e5       	ldi	r24, 0x50	; 80
    68be:	8d b9       	out	0x0d, r24	; 13
    68c0:	81 e0       	ldi	r24, 0x01	; 1
    68c2:	8e b9       	out	0x0e, r24	; 14
    68c4:	c1 98       	cbi	0x18, 1	; 24
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    68c6:	e0 e0       	ldi	r30, 0x00	; 0
    68c8:	f8 e4       	ldi	r31, 0x48	; 72
    68ca:	cf 01       	movw	r24, r30
    68cc:	01 97       	sbiw	r24, 0x01	; 1
    68ce:	f1 f7       	brne	.-4      	; 0x68cc <enc28j60_init+0x2c>
    68d0:	c1 9a       	sbi	0x18, 1	; 24
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    68d2:	83 e9       	ldi	r24, 0x93	; 147
    68d4:	8a 95       	dec	r24
    68d6:	f1 f7       	brne	.-4      	; 0x68d4 <enc28j60_init+0x34>
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
}

/** \ingroup util_delay_basic

    Delay loop using a 16-bit counter \c __count, so up to 65536
    iterations are possible.  (The value 65536 would have to be
    passed as 0.)  The loop executes four CPU cycles per iteration,
    not including the overhead the compiler requires to setup the
    counter register pair.

    Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    68d8:	31 97       	sbiw	r30, 0x01	; 1
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <enc28j60_init+0x38>
    68dc:	8d e1       	ldi	r24, 0x1D	; 29
    68de:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    68e2:	80 ff       	sbrs	r24, 0
    68e4:	fb cf       	rjmp	.-10     	; 0x68dc <enc28j60_init+0x3c>
    68e6:	10 92 3c 07 	sts	0x073C, r1
    68ea:	10 92 3b 07 	sts	0x073B, r1
    68ee:	c6 e6       	ldi	r28, 0x66	; 102
    68f0:	d1 e2       	ldi	r29, 0x21	; 33
    68f2:	fe 01       	movw	r30, r28
    68f4:	64 91       	lpm	r22, Z
    68f6:	21 97       	sbiw	r28, 0x01	; 1
    68f8:	fe 01       	movw	r30, r28
    68fa:	84 91       	lpm	r24, Z
    68fc:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    6900:	23 96       	adiw	r28, 0x03	; 3
    6902:	f1 e2       	ldi	r31, 0x21	; 33
    6904:	c2 39       	cpi	r28, 0x92	; 146
    6906:	df 07       	cpc	r29, r31
    6908:	a1 f7       	brne	.-24     	; 0x68f2 <enc28j60_init+0x52>
    690a:	60 e0       	ldi	r22, 0x00	; 0
    690c:	71 e0       	ldi	r23, 0x01	; 1
    690e:	80 e1       	ldi	r24, 0x10	; 16
    6910:	0e 94 37 33 	call	0x666e	; 0x666e <enc28j60_write_phy>
    6914:	60 ec       	ldi	r22, 0xC0	; 192
    6916:	8b e1       	ldi	r24, 0x1B	; 27
    6918:	0e 94 28 33 	call	0x6650	; 0x6650 <enc28j60_write_address>
    691c:	64 e0       	ldi	r22, 0x04	; 4
    691e:	8f e9       	ldi	r24, 0x9F	; 159
    6920:	0e 94 fa 32 	call	0x65f4	; 0x65f4 <enc28j60_spi_write_word>
    6924:	62 e7       	ldi	r22, 0x72	; 114
    6926:	74 e0       	ldi	r23, 0x04	; 4
    6928:	84 e1       	ldi	r24, 0x14	; 20
    692a:	0e 94 37 33 	call	0x666e	; 0x666e <enc28j60_write_phy>
    692e:	82 e7       	ldi	r24, 0x72	; 114
    6930:	0e 94 1d 33 	call	0x663a	; 0x663a <enc28j60_read_address>
    6934:	80 93 39 07 	sts	0x0739, r24
    6938:	df 91       	pop	r29
    693a:	cf 91       	pop	r28
    693c:	08 95       	ret

0000693e <crc8_calc_byte_rev0x07>:
	return crc;
}

//crc8, reversed, poly 0x07
unsigned char crc8_calc_byte_rev0x07(unsigned char crc, unsigned char data){
    693e:	68 27       	eor	r22, r24
	data ^= crc;
	crc = 0;
	if( data & 0x01 ) crc  = 0x91;
    6940:	26 2f       	mov	r18, r22
    6942:	33 27       	eor	r19, r19
    6944:	20 ff       	sbrs	r18, 0
    6946:	02 c0       	rjmp	.+4      	; 0x694c <crc8_calc_byte_rev0x07+0xe>
    6948:	91 e9       	ldi	r25, 0x91	; 145
    694a:	01 c0       	rjmp	.+2      	; 0x694e <crc8_calc_byte_rev0x07+0x10>
    694c:	90 e0       	ldi	r25, 0x00	; 0
	if( data & 0x02 ) crc ^= 0xE3;
    694e:	21 ff       	sbrs	r18, 1
    6950:	02 c0       	rjmp	.+4      	; 0x6956 <crc8_calc_byte_rev0x07+0x18>
    6952:	83 ee       	ldi	r24, 0xE3	; 227
    6954:	98 27       	eor	r25, r24
	if( data & 0x04 ) crc ^= 0x07;
    6956:	22 ff       	sbrs	r18, 2
    6958:	02 c0       	rjmp	.+4      	; 0x695e <crc8_calc_byte_rev0x07+0x20>
    695a:	87 e0       	ldi	r24, 0x07	; 7
    695c:	98 27       	eor	r25, r24
	if( data & 0x08 ) crc ^= 0x0E;
    695e:	23 ff       	sbrs	r18, 3
    6960:	02 c0       	rjmp	.+4      	; 0x6966 <crc8_calc_byte_rev0x07+0x28>
    6962:	8e e0       	ldi	r24, 0x0E	; 14
    6964:	98 27       	eor	r25, r24
	if( data & 0x10 ) crc ^= 0x1C;
    6966:	24 ff       	sbrs	r18, 4
    6968:	02 c0       	rjmp	.+4      	; 0x696e <crc8_calc_byte_rev0x07+0x30>
    696a:	8c e1       	ldi	r24, 0x1C	; 28
    696c:	98 27       	eor	r25, r24
	if( data & 0x20 ) crc ^= 0x38;
    696e:	25 ff       	sbrs	r18, 5
    6970:	02 c0       	rjmp	.+4      	; 0x6976 <crc8_calc_byte_rev0x07+0x38>
    6972:	88 e3       	ldi	r24, 0x38	; 56
    6974:	98 27       	eor	r25, r24
	if( data & 0x40 ) crc ^= 0x70;
    6976:	26 ff       	sbrs	r18, 6
    6978:	02 c0       	rjmp	.+4      	; 0x697e <crc8_calc_byte_rev0x07+0x40>
    697a:	80 e7       	ldi	r24, 0x70	; 112
    697c:	98 27       	eor	r25, r24
	if( data & 0x80 ) crc ^= 0xE0;
    697e:	67 ff       	sbrs	r22, 7
    6980:	02 c0       	rjmp	.+4      	; 0x6986 <crc8_calc_byte_rev0x07+0x48>
    6982:	80 ee       	ldi	r24, 0xE0	; 224
    6984:	98 27       	eor	r25, r24
  return crc;
}
    6986:	89 2f       	mov	r24, r25
    6988:	99 27       	eor	r25, r25
    698a:	08 95       	ret

0000698c <crc8_calc_byte>:

unsigned char crc8_calc_byte(unsigned char crc, unsigned char data){
    698c:	68 27       	eor	r22, r24
	data ^= crc;
	crc = 0;
	if( data & 0x01 ) crc = 0x5E;
    698e:	26 2f       	mov	r18, r22
    6990:	33 27       	eor	r19, r19
    6992:	20 ff       	sbrs	r18, 0
    6994:	02 c0       	rjmp	.+4      	; 0x699a <crc8_calc_byte+0xe>
    6996:	9e e5       	ldi	r25, 0x5E	; 94
    6998:	01 c0       	rjmp	.+2      	; 0x699c <crc8_calc_byte+0x10>
    699a:	90 e0       	ldi	r25, 0x00	; 0
	if( data & 0x02 ) crc ^= 0xBC;
    699c:	21 ff       	sbrs	r18, 1
    699e:	02 c0       	rjmp	.+4      	; 0x69a4 <crc8_calc_byte+0x18>
    69a0:	8c eb       	ldi	r24, 0xBC	; 188
    69a2:	98 27       	eor	r25, r24
	if( data & 0x04 ) crc ^= 0x61;
    69a4:	22 ff       	sbrs	r18, 2
    69a6:	02 c0       	rjmp	.+4      	; 0x69ac <crc8_calc_byte+0x20>
    69a8:	81 e6       	ldi	r24, 0x61	; 97
    69aa:	98 27       	eor	r25, r24
	if( data & 0x08 ) crc ^= 0xC2;
    69ac:	23 ff       	sbrs	r18, 3
    69ae:	02 c0       	rjmp	.+4      	; 0x69b4 <crc8_calc_byte+0x28>
    69b0:	82 ec       	ldi	r24, 0xC2	; 194
    69b2:	98 27       	eor	r25, r24
	if( data & 0x10 ) crc ^= 0x9D;
    69b4:	24 ff       	sbrs	r18, 4
    69b6:	02 c0       	rjmp	.+4      	; 0x69bc <crc8_calc_byte+0x30>
    69b8:	8d e9       	ldi	r24, 0x9D	; 157
    69ba:	98 27       	eor	r25, r24
	if( data & 0x20 ) crc ^= 0x23;
    69bc:	25 ff       	sbrs	r18, 5
    69be:	02 c0       	rjmp	.+4      	; 0x69c4 <crc8_calc_byte+0x38>
    69c0:	83 e2       	ldi	r24, 0x23	; 35
    69c2:	98 27       	eor	r25, r24
	if( data & 0x40 ) crc ^= 0x46;
    69c4:	26 ff       	sbrs	r18, 6
    69c6:	02 c0       	rjmp	.+4      	; 0x69cc <crc8_calc_byte+0x40>
    69c8:	86 e4       	ldi	r24, 0x46	; 70
    69ca:	98 27       	eor	r25, r24
	if( data & 0x80 ) crc ^= 0x8C;
    69cc:	67 ff       	sbrs	r22, 7
    69ce:	02 c0       	rjmp	.+4      	; 0x69d4 <crc8_calc_byte+0x48>
    69d0:	8c e8       	ldi	r24, 0x8C	; 140
    69d2:	98 27       	eor	r25, r24
  return crc;
}
    69d4:	89 2f       	mov	r24, r25
    69d6:	99 27       	eor	r25, r25
    69d8:	08 95       	ret

000069da <crc8_calc>:
    69da:	ef 92       	push	r14
    69dc:	ff 92       	push	r15
    69de:	0f 93       	push	r16
    69e0:	1f 93       	push	r17
    69e2:	cf 93       	push	r28
    69e4:	df 93       	push	r29
    69e6:	7c 01       	movw	r14, r24
    69e8:	8a 01       	movw	r16, r20
    69ea:	86 2f       	mov	r24, r22
    69ec:	c0 e0       	ldi	r28, 0x00	; 0
    69ee:	d0 e0       	ldi	r29, 0x00	; 0
    69f0:	07 c0       	rjmp	.+14     	; 0x6a00 <crc8_calc+0x26>
    69f2:	f7 01       	movw	r30, r14
    69f4:	e0 0f       	add	r30, r16
    69f6:	f1 1f       	adc	r31, r17
    69f8:	60 81       	ld	r22, Z
    69fa:	0e 94 c6 34 	call	0x698c	; 0x698c <crc8_calc_byte>
    69fe:	21 96       	adiw	r28, 0x01	; 1
    6a00:	c0 17       	cp	r28, r16
    6a02:	d1 07       	cpc	r29, r17
    6a04:	b1 f7       	brne	.-20     	; 0x69f2 <crc8_calc+0x18>
    6a06:	99 27       	eor	r25, r25
    6a08:	df 91       	pop	r29
    6a0a:	cf 91       	pop	r28
    6a0c:	1f 91       	pop	r17
    6a0e:	0f 91       	pop	r16
    6a10:	ff 90       	pop	r15
    6a12:	ef 90       	pop	r14
    6a14:	08 95       	ret

00006a16 <dataflash_busy_wait>:
	return (data);
}

//wait for dataflash ready flag
void dataflash_busy_wait(){
    6a16:	c3 98       	cbi	0x18, 3	; 24
	DATAFLASH_CS_LO();

	//send status req cmd:
	dataflash_spi_writeread_byte(DATAFLASH_READ_STATUS);

	//wait for bit7 in status reg to be 1:
	while ( (dataflash_spi_writeread_byte(DATAFLASH_READ_STATUS)&0x80) != 0x80){
		//wait...
		//uart_putc('.');
	}
	DATAFLASH_CS_HI();
}

//send one byte over SPI and read one byte back
//device must be selected before !!!
unsigned char dataflash_spi_writeread_byte(unsigned char data){
	unsigned char res = 0;	
	//shift data out
	SPDR = data;
    6a18:	87 ed       	ldi	r24, 0xD7	; 215
    6a1a:	8f b9       	out	0x0f, r24	; 15

	//wait for completion
	while(!(SPSR & (1<<SPIF)));
    6a1c:	77 9b       	sbis	0x0e, 7	; 14
    6a1e:	fe cf       	rjmp	.-4      	; 0x6a1c <dataflash_busy_wait+0x6>

	//shiftout 8 clocks, now we receive data:
	///SPDR = 0x00;
	//wait for completion
	///while(!(SPSR & (1<<SPIF)));

	// read data
	res = SPDR;
    6a20:	8f b1       	in	r24, 0x0f	; 15
    6a22:	87 ed       	ldi	r24, 0xD7	; 215
    6a24:	8f b9       	out	0x0f, r24	; 15
    6a26:	77 9b       	sbis	0x0e, 7	; 14
    6a28:	fe cf       	rjmp	.-4      	; 0x6a26 <dataflash_busy_wait+0x10>
    6a2a:	7f 9b       	sbis	0x0f, 7	; 15
    6a2c:	fb cf       	rjmp	.-10     	; 0x6a24 <dataflash_busy_wait+0xe>
    6a2e:	c3 9a       	sbi	0x18, 3	; 24
    6a30:	08 95       	ret

00006a32 <dataflash_read_buffer>:
    6a32:	1f 93       	push	r17
    6a34:	cf 93       	push	r28
    6a36:	df 93       	push	r29
    6a38:	ec 01       	movw	r28, r24
    6a3a:	16 2f       	mov	r17, r22
    6a3c:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6a40:	c3 98       	cbi	0x18, 3	; 24
    6a42:	11 23       	and	r17, r17
    6a44:	29 f4       	brne	.+10     	; 0x6a50 <dataflash_read_buffer+0x1e>
    6a46:	84 ed       	ldi	r24, 0xD4	; 212
    6a48:	8f b9       	out	0x0f, r24	; 15
    6a4a:	77 9b       	sbis	0x0e, 7	; 14
    6a4c:	fe cf       	rjmp	.-4      	; 0x6a4a <dataflash_read_buffer+0x18>
    6a4e:	04 c0       	rjmp	.+8      	; 0x6a58 <dataflash_read_buffer+0x26>
    6a50:	86 ed       	ldi	r24, 0xD6	; 214
    6a52:	8f b9       	out	0x0f, r24	; 15
    6a54:	77 9b       	sbis	0x0e, 7	; 14
    6a56:	fe cf       	rjmp	.-4      	; 0x6a54 <dataflash_read_buffer+0x22>
    6a58:	8f b1       	in	r24, 0x0f	; 15
    6a5a:	1f b8       	out	0x0f, r1	; 15
    6a5c:	77 9b       	sbis	0x0e, 7	; 14
    6a5e:	fe cf       	rjmp	.-4      	; 0x6a5c <dataflash_read_buffer+0x2a>
    6a60:	8f b1       	in	r24, 0x0f	; 15
    6a62:	8d 2f       	mov	r24, r29
    6a64:	99 27       	eor	r25, r25
    6a66:	81 70       	andi	r24, 0x01	; 1
    6a68:	8f b9       	out	0x0f, r24	; 15
    6a6a:	77 9b       	sbis	0x0e, 7	; 14
    6a6c:	fe cf       	rjmp	.-4      	; 0x6a6a <dataflash_read_buffer+0x38>
    6a6e:	8f b1       	in	r24, 0x0f	; 15
    6a70:	cf b9       	out	0x0f, r28	; 15
    6a72:	77 9b       	sbis	0x0e, 7	; 14
    6a74:	fe cf       	rjmp	.-4      	; 0x6a72 <dataflash_read_buffer+0x40>
    6a76:	8f b1       	in	r24, 0x0f	; 15
    6a78:	1f b8       	out	0x0f, r1	; 15
    6a7a:	77 9b       	sbis	0x0e, 7	; 14
    6a7c:	fe cf       	rjmp	.-4      	; 0x6a7a <dataflash_read_buffer+0x48>
    6a7e:	8f b1       	in	r24, 0x0f	; 15
    6a80:	1f b8       	out	0x0f, r1	; 15
    6a82:	77 9b       	sbis	0x0e, 7	; 14
    6a84:	fe cf       	rjmp	.-4      	; 0x6a82 <dataflash_read_buffer+0x50>
    6a86:	8f b1       	in	r24, 0x0f	; 15
    6a88:	c3 9a       	sbi	0x18, 3	; 24
    6a8a:	99 27       	eor	r25, r25
    6a8c:	df 91       	pop	r29
    6a8e:	cf 91       	pop	r28
    6a90:	1f 91       	pop	r17
    6a92:	08 95       	ret

00006a94 <dataflash_copy_page_to_buffer>:
    6a94:	1f 93       	push	r17
    6a96:	cf 93       	push	r28
    6a98:	df 93       	push	r29
    6a9a:	ec 01       	movw	r28, r24
    6a9c:	16 2f       	mov	r17, r22
    6a9e:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6aa2:	c3 98       	cbi	0x18, 3	; 24
    6aa4:	11 23       	and	r17, r17
    6aa6:	29 f4       	brne	.+10     	; 0x6ab2 <dataflash_copy_page_to_buffer+0x1e>
    6aa8:	83 e5       	ldi	r24, 0x53	; 83
    6aaa:	8f b9       	out	0x0f, r24	; 15
    6aac:	77 9b       	sbis	0x0e, 7	; 14
    6aae:	fe cf       	rjmp	.-4      	; 0x6aac <dataflash_copy_page_to_buffer+0x18>
    6ab0:	04 c0       	rjmp	.+8      	; 0x6aba <dataflash_copy_page_to_buffer+0x26>
    6ab2:	85 e5       	ldi	r24, 0x55	; 85
    6ab4:	8f b9       	out	0x0f, r24	; 15
    6ab6:	77 9b       	sbis	0x0e, 7	; 14
    6ab8:	fe cf       	rjmp	.-4      	; 0x6ab6 <dataflash_copy_page_to_buffer+0x22>
    6aba:	8f b1       	in	r24, 0x0f	; 15
    6abc:	ce 01       	movw	r24, r28
    6abe:	88 0f       	add	r24, r24
    6ac0:	89 2f       	mov	r24, r25
    6ac2:	88 1f       	adc	r24, r24
    6ac4:	99 0b       	sbc	r25, r25
    6ac6:	91 95       	neg	r25
    6ac8:	8f 70       	andi	r24, 0x0F	; 15
    6aca:	8f b9       	out	0x0f, r24	; 15
    6acc:	77 9b       	sbis	0x0e, 7	; 14
    6ace:	fe cf       	rjmp	.-4      	; 0x6acc <dataflash_copy_page_to_buffer+0x38>
    6ad0:	8f b1       	in	r24, 0x0f	; 15
    6ad2:	9e 01       	movw	r18, r28
    6ad4:	22 0f       	add	r18, r18
    6ad6:	2f b9       	out	0x0f, r18	; 15
    6ad8:	77 9b       	sbis	0x0e, 7	; 14
    6ada:	fe cf       	rjmp	.-4      	; 0x6ad8 <dataflash_copy_page_to_buffer+0x44>
    6adc:	8f b1       	in	r24, 0x0f	; 15
    6ade:	1f b8       	out	0x0f, r1	; 15
    6ae0:	77 9b       	sbis	0x0e, 7	; 14
    6ae2:	fe cf       	rjmp	.-4      	; 0x6ae0 <dataflash_copy_page_to_buffer+0x4c>
    6ae4:	8f b1       	in	r24, 0x0f	; 15
    6ae6:	c3 9a       	sbi	0x18, 3	; 24
    6ae8:	df 91       	pop	r29
    6aea:	cf 91       	pop	r28
    6aec:	1f 91       	pop	r17
    6aee:	08 95       	ret

00006af0 <dataflash_spi_writeread_byte>:
    6af0:	8f b9       	out	0x0f, r24	; 15
    6af2:	77 9b       	sbis	0x0e, 7	; 14
    6af4:	fe cf       	rjmp	.-4      	; 0x6af2 <dataflash_spi_writeread_byte+0x2>
    6af6:	8f b1       	in	r24, 0x0f	; 15

	return res;
}
    6af8:	99 27       	eor	r25, r25
    6afa:	08 95       	ret

00006afc <dataflash_dump>:
    6afc:	0f 93       	push	r16
    6afe:	1f 93       	push	r17
    6b00:	cf 93       	push	r28
    6b02:	df 93       	push	r29
    6b04:	00 e0       	ldi	r16, 0x00	; 0
    6b06:	10 e0       	ldi	r17, 0x00	; 0
    6b08:	60 e0       	ldi	r22, 0x00	; 0
    6b0a:	c8 01       	movw	r24, r16
    6b0c:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <dataflash_copy_page_to_buffer>
    6b10:	c0 e0       	ldi	r28, 0x00	; 0
    6b12:	d0 e0       	ldi	r29, 0x00	; 0
    6b14:	60 e0       	ldi	r22, 0x00	; 0
    6b16:	ce 01       	movw	r24, r28
    6b18:	0e 94 19 35 	call	0x6a32	; 0x6a32 <dataflash_read_buffer>
    6b1c:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6b20:	21 96       	adiw	r28, 0x01	; 1
    6b22:	81 e0       	ldi	r24, 0x01	; 1
    6b24:	c8 30       	cpi	r28, 0x08	; 8
    6b26:	d8 07       	cpc	r29, r24
    6b28:	a9 f7       	brne	.-22     	; 0x6b14 <dataflash_dump+0x18>
    6b2a:	0f 5f       	subi	r16, 0xFF	; 255
    6b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b2e:	88 e0       	ldi	r24, 0x08	; 8
    6b30:	00 30       	cpi	r16, 0x00	; 0
    6b32:	18 07       	cpc	r17, r24
    6b34:	49 f7       	brne	.-46     	; 0x6b08 <dataflash_dump+0xc>
    6b36:	df 91       	pop	r29
    6b38:	cf 91       	pop	r28
    6b3a:	1f 91       	pop	r17
    6b3c:	0f 91       	pop	r16
    6b3e:	08 95       	ret

00006b40 <dataflash_init>:
    6b40:	87 b3       	in	r24, 0x17	; 23
    6b42:	89 60       	ori	r24, 0x09	; 9
    6b44:	87 bb       	out	0x17, r24	; 23
    6b46:	c0 98       	cbi	0x18, 0	; 24
    6b48:	c3 98       	cbi	0x18, 3	; 24
    6b4a:	90 e0       	ldi	r25, 0x00	; 0
    6b4c:	1f b8       	out	0x0f, r1	; 15
    6b4e:	77 9b       	sbis	0x0e, 7	; 14
    6b50:	fe cf       	rjmp	.-4      	; 0x6b4e <dataflash_init+0xe>
    6b52:	8f b1       	in	r24, 0x0f	; 15
    6b54:	9f 5f       	subi	r25, 0xFF	; 255
    6b56:	94 31       	cpi	r25, 0x14	; 20
    6b58:	c9 f7       	brne	.-14     	; 0x6b4c <dataflash_init+0xc>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6b5a:	81 e3       	ldi	r24, 0x31	; 49
    6b5c:	8a 95       	dec	r24
    6b5e:	f1 f7       	brne	.-4      	; 0x6b5c <dataflash_init+0x1c>
    6b60:	c3 9a       	sbi	0x18, 3	; 24
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6b62:	82 e0       	ldi	r24, 0x02	; 2
    6b64:	8a 95       	dec	r24
    6b66:	f1 f7       	brne	.-4      	; 0x6b64 <dataflash_init+0x24>
    6b68:	c0 9a       	sbi	0x18, 0	; 24
    6b6a:	08 95       	ret

00006b6c <dataflash_read_flash>:
    6b6c:	0f 93       	push	r16
    6b6e:	1f 93       	push	r17
    6b70:	cf 93       	push	r28
    6b72:	df 93       	push	r29
    6b74:	ec 01       	movw	r28, r24
    6b76:	8b 01       	movw	r16, r22
    6b78:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6b7c:	c3 98       	cbi	0x18, 3	; 24
    6b7e:	82 e5       	ldi	r24, 0x52	; 82
    6b80:	8f b9       	out	0x0f, r24	; 15
    6b82:	77 9b       	sbis	0x0e, 7	; 14
    6b84:	fe cf       	rjmp	.-4      	; 0x6b82 <dataflash_read_flash+0x16>
    6b86:	8f b1       	in	r24, 0x0f	; 15
    6b88:	ce 01       	movw	r24, r28
    6b8a:	88 0f       	add	r24, r24
    6b8c:	89 2f       	mov	r24, r25
    6b8e:	88 1f       	adc	r24, r24
    6b90:	99 0b       	sbc	r25, r25
    6b92:	91 95       	neg	r25
    6b94:	8f 70       	andi	r24, 0x0F	; 15
    6b96:	8f b9       	out	0x0f, r24	; 15
    6b98:	77 9b       	sbis	0x0e, 7	; 14
    6b9a:	fe cf       	rjmp	.-4      	; 0x6b98 <dataflash_read_flash+0x2c>
    6b9c:	8f b1       	in	r24, 0x0f	; 15
    6b9e:	ce 01       	movw	r24, r28
    6ba0:	88 0f       	add	r24, r24
    6ba2:	28 2f       	mov	r18, r24
    6ba4:	81 2f       	mov	r24, r17
    6ba6:	99 27       	eor	r25, r25
    6ba8:	81 70       	andi	r24, 0x01	; 1
    6baa:	28 2b       	or	r18, r24
    6bac:	2f b9       	out	0x0f, r18	; 15
    6bae:	77 9b       	sbis	0x0e, 7	; 14
    6bb0:	fe cf       	rjmp	.-4      	; 0x6bae <dataflash_read_flash+0x42>
    6bb2:	8f b1       	in	r24, 0x0f	; 15
    6bb4:	0f b9       	out	0x0f, r16	; 15
    6bb6:	77 9b       	sbis	0x0e, 7	; 14
    6bb8:	fe cf       	rjmp	.-4      	; 0x6bb6 <dataflash_read_flash+0x4a>
    6bba:	8f b1       	in	r24, 0x0f	; 15
    6bbc:	1f b8       	out	0x0f, r1	; 15
    6bbe:	77 9b       	sbis	0x0e, 7	; 14
    6bc0:	fe cf       	rjmp	.-4      	; 0x6bbe <dataflash_read_flash+0x52>
    6bc2:	8f b1       	in	r24, 0x0f	; 15
    6bc4:	1f b8       	out	0x0f, r1	; 15
    6bc6:	77 9b       	sbis	0x0e, 7	; 14
    6bc8:	fe cf       	rjmp	.-4      	; 0x6bc6 <dataflash_read_flash+0x5a>
    6bca:	8f b1       	in	r24, 0x0f	; 15
    6bcc:	1f b8       	out	0x0f, r1	; 15
    6bce:	77 9b       	sbis	0x0e, 7	; 14
    6bd0:	fe cf       	rjmp	.-4      	; 0x6bce <dataflash_read_flash+0x62>
    6bd2:	8f b1       	in	r24, 0x0f	; 15
    6bd4:	1f b8       	out	0x0f, r1	; 15
    6bd6:	77 9b       	sbis	0x0e, 7	; 14
    6bd8:	fe cf       	rjmp	.-4      	; 0x6bd6 <dataflash_read_flash+0x6a>
    6bda:	8f b1       	in	r24, 0x0f	; 15
    6bdc:	1f b8       	out	0x0f, r1	; 15
    6bde:	77 9b       	sbis	0x0e, 7	; 14
    6be0:	fe cf       	rjmp	.-4      	; 0x6bde <dataflash_read_flash+0x72>
    6be2:	8f b1       	in	r24, 0x0f	; 15
    6be4:	c3 9a       	sbi	0x18, 3	; 24
    6be6:	99 27       	eor	r25, r25
    6be8:	df 91       	pop	r29
    6bea:	cf 91       	pop	r28
    6bec:	1f 91       	pop	r17
    6bee:	0f 91       	pop	r16
    6bf0:	08 95       	ret

00006bf2 <dataflash_read_n_to_buffer>:
    6bf2:	1f 93       	push	r17
    6bf4:	cf 93       	push	r28
    6bf6:	df 93       	push	r29
    6bf8:	ec 01       	movw	r28, r24
    6bfa:	16 2f       	mov	r17, r22
    6bfc:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6c00:	c3 98       	cbi	0x18, 3	; 24
    6c02:	11 23       	and	r17, r17
    6c04:	29 f4       	brne	.+10     	; 0x6c10 <dataflash_read_n_to_buffer+0x1e>
    6c06:	84 ed       	ldi	r24, 0xD4	; 212
    6c08:	8f b9       	out	0x0f, r24	; 15
    6c0a:	77 9b       	sbis	0x0e, 7	; 14
    6c0c:	fe cf       	rjmp	.-4      	; 0x6c0a <dataflash_read_n_to_buffer+0x18>
    6c0e:	04 c0       	rjmp	.+8      	; 0x6c18 <dataflash_read_n_to_buffer+0x26>
    6c10:	86 ed       	ldi	r24, 0xD6	; 214
    6c12:	8f b9       	out	0x0f, r24	; 15
    6c14:	77 9b       	sbis	0x0e, 7	; 14
    6c16:	fe cf       	rjmp	.-4      	; 0x6c14 <dataflash_read_n_to_buffer+0x22>
    6c18:	8f b1       	in	r24, 0x0f	; 15
    6c1a:	1f b8       	out	0x0f, r1	; 15
    6c1c:	77 9b       	sbis	0x0e, 7	; 14
    6c1e:	fe cf       	rjmp	.-4      	; 0x6c1c <dataflash_read_n_to_buffer+0x2a>
    6c20:	8f b1       	in	r24, 0x0f	; 15
    6c22:	1f b8       	out	0x0f, r1	; 15
    6c24:	77 9b       	sbis	0x0e, 7	; 14
    6c26:	fe cf       	rjmp	.-4      	; 0x6c24 <dataflash_read_n_to_buffer+0x32>
    6c28:	8f b1       	in	r24, 0x0f	; 15
    6c2a:	1f b8       	out	0x0f, r1	; 15
    6c2c:	77 9b       	sbis	0x0e, 7	; 14
    6c2e:	fe cf       	rjmp	.-4      	; 0x6c2c <dataflash_read_n_to_buffer+0x3a>
    6c30:	8f b1       	in	r24, 0x0f	; 15
    6c32:	1f b8       	out	0x0f, r1	; 15
    6c34:	77 9b       	sbis	0x0e, 7	; 14
    6c36:	fe cf       	rjmp	.-4      	; 0x6c34 <dataflash_read_n_to_buffer+0x42>
    6c38:	8f b1       	in	r24, 0x0f	; 15
    6c3a:	1f b8       	out	0x0f, r1	; 15
    6c3c:	77 9b       	sbis	0x0e, 7	; 14
    6c3e:	fe cf       	rjmp	.-4      	; 0x6c3c <dataflash_read_n_to_buffer+0x4a>
    6c40:	8f b1       	in	r24, 0x0f	; 15
    6c42:	89 93       	st	Y+, r24
    6c44:	fe 01       	movw	r30, r28
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	1f b8       	out	0x0f, r1	; 15
    6c4a:	77 9b       	sbis	0x0e, 7	; 14
    6c4c:	fe cf       	rjmp	.-4      	; 0x6c4a <dataflash_read_n_to_buffer+0x58>
    6c4e:	8f b1       	in	r24, 0x0f	; 15
    6c50:	80 83       	st	Z, r24
    6c52:	9f 5f       	subi	r25, 0xFF	; 255
    6c54:	9f 3f       	cpi	r25, 0xFF	; 255
    6c56:	11 f0       	breq	.+4      	; 0x6c5c <dataflash_read_n_to_buffer+0x6a>
    6c58:	31 96       	adiw	r30, 0x01	; 1
    6c5a:	f6 cf       	rjmp	.-20     	; 0x6c48 <dataflash_read_n_to_buffer+0x56>
    6c5c:	c3 9a       	sbi	0x18, 3	; 24
    6c5e:	df 91       	pop	r29
    6c60:	cf 91       	pop	r28
    6c62:	1f 91       	pop	r17
    6c64:	08 95       	ret

00006c66 <dataflash_write_to_page_buffer>:
    6c66:	0f 93       	push	r16
    6c68:	1f 93       	push	r17
    6c6a:	cf 93       	push	r28
    6c6c:	df 93       	push	r29
    6c6e:	ec 01       	movw	r28, r24
    6c70:	16 2f       	mov	r17, r22
    6c72:	04 2f       	mov	r16, r20
    6c74:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6c78:	c3 98       	cbi	0x18, 3	; 24
    6c7a:	11 23       	and	r17, r17
    6c7c:	29 f4       	brne	.+10     	; 0x6c88 <dataflash_write_to_page_buffer+0x22>
    6c7e:	84 e8       	ldi	r24, 0x84	; 132
    6c80:	8f b9       	out	0x0f, r24	; 15
    6c82:	77 9b       	sbis	0x0e, 7	; 14
    6c84:	fe cf       	rjmp	.-4      	; 0x6c82 <dataflash_write_to_page_buffer+0x1c>
    6c86:	04 c0       	rjmp	.+8      	; 0x6c90 <dataflash_write_to_page_buffer+0x2a>
    6c88:	87 e8       	ldi	r24, 0x87	; 135
    6c8a:	8f b9       	out	0x0f, r24	; 15
    6c8c:	77 9b       	sbis	0x0e, 7	; 14
    6c8e:	fe cf       	rjmp	.-4      	; 0x6c8c <dataflash_write_to_page_buffer+0x26>
    6c90:	8f b1       	in	r24, 0x0f	; 15
    6c92:	1f b8       	out	0x0f, r1	; 15
    6c94:	77 9b       	sbis	0x0e, 7	; 14
    6c96:	fe cf       	rjmp	.-4      	; 0x6c94 <dataflash_write_to_page_buffer+0x2e>
    6c98:	8f b1       	in	r24, 0x0f	; 15
    6c9a:	8d 2f       	mov	r24, r29
    6c9c:	99 27       	eor	r25, r25
    6c9e:	81 70       	andi	r24, 0x01	; 1
    6ca0:	8f b9       	out	0x0f, r24	; 15
    6ca2:	77 9b       	sbis	0x0e, 7	; 14
    6ca4:	fe cf       	rjmp	.-4      	; 0x6ca2 <dataflash_write_to_page_buffer+0x3c>
    6ca6:	8f b1       	in	r24, 0x0f	; 15
    6ca8:	cf b9       	out	0x0f, r28	; 15
    6caa:	77 9b       	sbis	0x0e, 7	; 14
    6cac:	fe cf       	rjmp	.-4      	; 0x6caa <dataflash_write_to_page_buffer+0x44>
    6cae:	8f b1       	in	r24, 0x0f	; 15
    6cb0:	0f b9       	out	0x0f, r16	; 15
    6cb2:	77 9b       	sbis	0x0e, 7	; 14
    6cb4:	fe cf       	rjmp	.-4      	; 0x6cb2 <dataflash_write_to_page_buffer+0x4c>
    6cb6:	8f b1       	in	r24, 0x0f	; 15
    6cb8:	c3 9a       	sbi	0x18, 3	; 24
    6cba:	df 91       	pop	r29
    6cbc:	cf 91       	pop	r28
    6cbe:	1f 91       	pop	r17
    6cc0:	0f 91       	pop	r16
    6cc2:	08 95       	ret

00006cc4 <dataflash_write_n_to_page_buffer>:
    6cc4:	cf 92       	push	r12
    6cc6:	df 92       	push	r13
    6cc8:	ef 92       	push	r14
    6cca:	ff 92       	push	r15
    6ccc:	1f 93       	push	r17
    6cce:	cf 93       	push	r28
    6cd0:	df 93       	push	r29
    6cd2:	6c 01       	movw	r12, r24
    6cd4:	16 2f       	mov	r17, r22
    6cd6:	7a 01       	movw	r14, r20
    6cd8:	e9 01       	movw	r28, r18
    6cda:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6cde:	c3 98       	cbi	0x18, 3	; 24
    6ce0:	11 23       	and	r17, r17
    6ce2:	29 f4       	brne	.+10     	; 0x6cee <dataflash_write_n_to_page_buffer+0x2a>
    6ce4:	84 e8       	ldi	r24, 0x84	; 132
    6ce6:	8f b9       	out	0x0f, r24	; 15
    6ce8:	77 9b       	sbis	0x0e, 7	; 14
    6cea:	fe cf       	rjmp	.-4      	; 0x6ce8 <dataflash_write_n_to_page_buffer+0x24>
    6cec:	04 c0       	rjmp	.+8      	; 0x6cf6 <dataflash_write_n_to_page_buffer+0x32>
    6cee:	87 e8       	ldi	r24, 0x87	; 135
    6cf0:	8f b9       	out	0x0f, r24	; 15
    6cf2:	77 9b       	sbis	0x0e, 7	; 14
    6cf4:	fe cf       	rjmp	.-4      	; 0x6cf2 <dataflash_write_n_to_page_buffer+0x2e>
    6cf6:	8f b1       	in	r24, 0x0f	; 15
    6cf8:	1f b8       	out	0x0f, r1	; 15
    6cfa:	77 9b       	sbis	0x0e, 7	; 14
    6cfc:	fe cf       	rjmp	.-4      	; 0x6cfa <dataflash_write_n_to_page_buffer+0x36>
    6cfe:	8f b1       	in	r24, 0x0f	; 15
    6d00:	8d 2d       	mov	r24, r13
    6d02:	99 27       	eor	r25, r25
    6d04:	81 70       	andi	r24, 0x01	; 1
    6d06:	8f b9       	out	0x0f, r24	; 15
    6d08:	77 9b       	sbis	0x0e, 7	; 14
    6d0a:	fe cf       	rjmp	.-4      	; 0x6d08 <dataflash_write_n_to_page_buffer+0x44>
    6d0c:	8f b1       	in	r24, 0x0f	; 15
    6d0e:	cf b8       	out	0x0f, r12	; 15
    6d10:	77 9b       	sbis	0x0e, 7	; 14
    6d12:	fe cf       	rjmp	.-4      	; 0x6d10 <dataflash_write_n_to_page_buffer+0x4c>
    6d14:	8f b1       	in	r24, 0x0f	; 15
    6d16:	0a c0       	rjmp	.+20     	; 0x6d2c <dataflash_write_n_to_page_buffer+0x68>
    6d18:	f7 01       	movw	r30, r14
    6d1a:	80 81       	ld	r24, Z
    6d1c:	8f b9       	out	0x0f, r24	; 15
    6d1e:	77 9b       	sbis	0x0e, 7	; 14
    6d20:	fe cf       	rjmp	.-4      	; 0x6d1e <dataflash_write_n_to_page_buffer+0x5a>
    6d22:	8f b1       	in	r24, 0x0f	; 15
    6d24:	08 94       	sec
    6d26:	e1 1c       	adc	r14, r1
    6d28:	f1 1c       	adc	r15, r1
    6d2a:	21 97       	sbiw	r28, 0x01	; 1
    6d2c:	20 97       	sbiw	r28, 0x00	; 0
    6d2e:	a1 f7       	brne	.-24     	; 0x6d18 <dataflash_write_n_to_page_buffer+0x54>
    6d30:	c3 9a       	sbi	0x18, 3	; 24
    6d32:	df 91       	pop	r29
    6d34:	cf 91       	pop	r28
    6d36:	1f 91       	pop	r17
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	df 90       	pop	r13
    6d3e:	cf 90       	pop	r12
    6d40:	08 95       	ret

00006d42 <dataflash_copy_buffer_to_page>:
    6d42:	1f 93       	push	r17
    6d44:	cf 93       	push	r28
    6d46:	df 93       	push	r29
    6d48:	ec 01       	movw	r28, r24
    6d4a:	16 2f       	mov	r17, r22
    6d4c:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <dataflash_busy_wait>
    6d50:	c3 98       	cbi	0x18, 3	; 24
    6d52:	11 23       	and	r17, r17
    6d54:	29 f4       	brne	.+10     	; 0x6d60 <dataflash_copy_buffer_to_page+0x1e>
    6d56:	83 e8       	ldi	r24, 0x83	; 131
    6d58:	8f b9       	out	0x0f, r24	; 15
    6d5a:	77 9b       	sbis	0x0e, 7	; 14
    6d5c:	fe cf       	rjmp	.-4      	; 0x6d5a <dataflash_copy_buffer_to_page+0x18>
    6d5e:	04 c0       	rjmp	.+8      	; 0x6d68 <dataflash_copy_buffer_to_page+0x26>
    6d60:	86 e8       	ldi	r24, 0x86	; 134
    6d62:	8f b9       	out	0x0f, r24	; 15
    6d64:	77 9b       	sbis	0x0e, 7	; 14
    6d66:	fe cf       	rjmp	.-4      	; 0x6d64 <dataflash_copy_buffer_to_page+0x22>
    6d68:	8f b1       	in	r24, 0x0f	; 15
    6d6a:	ce 01       	movw	r24, r28
    6d6c:	88 0f       	add	r24, r24
    6d6e:	89 2f       	mov	r24, r25
    6d70:	88 1f       	adc	r24, r24
    6d72:	99 0b       	sbc	r25, r25
    6d74:	91 95       	neg	r25
    6d76:	8f 70       	andi	r24, 0x0F	; 15
    6d78:	8f b9       	out	0x0f, r24	; 15
    6d7a:	77 9b       	sbis	0x0e, 7	; 14
    6d7c:	fe cf       	rjmp	.-4      	; 0x6d7a <dataflash_copy_buffer_to_page+0x38>
    6d7e:	8f b1       	in	r24, 0x0f	; 15
    6d80:	9e 01       	movw	r18, r28
    6d82:	22 0f       	add	r18, r18
    6d84:	2f b9       	out	0x0f, r18	; 15
    6d86:	77 9b       	sbis	0x0e, 7	; 14
    6d88:	fe cf       	rjmp	.-4      	; 0x6d86 <dataflash_copy_buffer_to_page+0x44>
    6d8a:	8f b1       	in	r24, 0x0f	; 15
    6d8c:	1f b8       	out	0x0f, r1	; 15
    6d8e:	77 9b       	sbis	0x0e, 7	; 14
    6d90:	fe cf       	rjmp	.-4      	; 0x6d8e <dataflash_copy_buffer_to_page+0x4c>
    6d92:	8f b1       	in	r24, 0x0f	; 15
    6d94:	c3 9a       	sbi	0x18, 3	; 24
    6d96:	df 91       	pop	r29
    6d98:	cf 91       	pop	r28
    6d9a:	1f 91       	pop	r17
    6d9c:	08 95       	ret

00006d9e <softuart_putc>:
		s++;
	}
}

void softuart_putc(unsigned char c){
    6d9e:	28 2f       	mov	r18, r24
		unsigned char cnt = 8;
		//send startbit: (=low)
		SOFTUART_TXPIN_LO();
    6da0:	a9 98       	cbi	0x15, 1	; 21
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6da2:	8f e7       	ldi	r24, 0x7F	; 127
    6da4:	8a 95       	dec	r24
    6da6:	f1 f7       	brne	.-4      	; 0x6da4 <softuart_putc+0x6>
    6da8:	38 e0       	ldi	r19, 0x08	; 8
		SOFTUART_DELAY();
		
		while(cnt > 0){
			if (c & 0x01)
    6daa:	20 ff       	sbrs	r18, 0
    6dac:	02 c0       	rjmp	.+4      	; 0x6db2 <softuart_putc+0x14>
				SOFTUART_TXPIN_HI();
    6dae:	a9 9a       	sbi	0x15, 1	; 21
    6db0:	01 c0       	rjmp	.+2      	; 0x6db4 <softuart_putc+0x16>
			else
				SOFTUART_TXPIN_LO();
    6db2:	a9 98       	cbi	0x15, 1	; 21
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6db4:	9f e7       	ldi	r25, 0x7F	; 127
    6db6:	89 2f       	mov	r24, r25
    6db8:	8a 95       	dec	r24
    6dba:	f1 f7       	brne	.-4      	; 0x6db8 <softuart_putc+0x1a>

			//wait
			SOFTUART_DELAY();

			c = c>>1;
			cnt--;
    6dbc:	31 50       	subi	r19, 0x01	; 1
    6dbe:	11 f0       	breq	.+4      	; 0x6dc4 <softuart_putc+0x26>
    6dc0:	26 95       	lsr	r18
    6dc2:	f3 cf       	rjmp	.-26     	; 0x6daa <softuart_putc+0xc>
		}

		//send stopbit:
		SOFTUART_TXPIN_HI();
    6dc4:	a9 9a       	sbi	0x15, 1	; 21
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6dc6:	9a 95       	dec	r25
    6dc8:	f1 f7       	brne	.-4      	; 0x6dc6 <softuart_putc+0x28>
    6dca:	08 95       	ret

00006dcc <softuart_puts>:
    6dcc:	cf 93       	push	r28
    6dce:	df 93       	push	r29
    6dd0:	ec 01       	movw	r28, r24
    6dd2:	03 c0       	rjmp	.+6      	; 0x6dda <softuart_puts+0xe>
    6dd4:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6dd8:	21 96       	adiw	r28, 0x01	; 1
    6dda:	88 81       	ld	r24, Y
    6ddc:	88 23       	and	r24, r24
    6dde:	d1 f7       	brne	.-12     	; 0x6dd4 <softuart_puts+0x8>
    6de0:	df 91       	pop	r29
    6de2:	cf 91       	pop	r28
    6de4:	08 95       	ret

00006de6 <softuart_puts_progmem2>:
    6de6:	cf 93       	push	r28
    6de8:	df 93       	push	r29
    6dea:	fc 01       	movw	r30, r24
    6dec:	84 91       	lpm	r24, Z
    6dee:	ef 01       	movw	r28, r30
    6df0:	04 c0       	rjmp	.+8      	; 0x6dfa <softuart_puts_progmem2+0x14>
    6df2:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6df6:	fe 01       	movw	r30, r28
    6df8:	84 91       	lpm	r24, Z
    6dfa:	21 96       	adiw	r28, 0x01	; 1
    6dfc:	88 23       	and	r24, r24
    6dfe:	c9 f7       	brne	.-14     	; 0x6df2 <softuart_puts_progmem2+0xc>
    6e00:	df 91       	pop	r29
    6e02:	cf 91       	pop	r28
    6e04:	08 95       	ret

00006e06 <softuart_putnewline>:
    6e06:	81 e9       	ldi	r24, 0x91	; 145
    6e08:	91 e2       	ldi	r25, 0x21	; 33
    6e0a:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <softuart_puts_progmem2>
    6e0e:	08 95       	ret

00006e10 <softuart_put_uint8>:
    6e10:	ff 92       	push	r15
    6e12:	0f 93       	push	r16
    6e14:	1f 93       	push	r17
    6e16:	08 2f       	mov	r16, r24
    6e18:	ff 24       	eor	r15, r15
    6e1a:	80 e3       	ldi	r24, 0x30	; 48
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	14 e6       	ldi	r17, 0x64	; 100
    6e20:	04 c0       	rjmp	.+8      	; 0x6e2a <softuart_put_uint8+0x1a>
    6e22:	01 1b       	sub	r16, r17
    6e24:	01 96       	adiw	r24, 0x01	; 1
    6e26:	21 e0       	ldi	r18, 0x01	; 1
    6e28:	f2 2e       	mov	r15, r18
    6e2a:	01 17       	cp	r16, r17
    6e2c:	d0 f7       	brcc	.-12     	; 0x6e22 <softuart_put_uint8+0x12>
    6e2e:	ff 20       	and	r15, r15
    6e30:	31 f4       	brne	.+12     	; 0x6e3e <softuart_put_uint8+0x2e>
    6e32:	80 33       	cpi	r24, 0x30	; 48
    6e34:	91 05       	cpc	r25, r1
    6e36:	19 f4       	brne	.+6      	; 0x6e3e <softuart_put_uint8+0x2e>
    6e38:	11 30       	cpi	r17, 0x01	; 1
    6e3a:	09 f0       	breq	.+2      	; 0x6e3e <softuart_put_uint8+0x2e>
    6e3c:	80 e2       	ldi	r24, 0x20	; 32
    6e3e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6e42:	81 2f       	mov	r24, r17
    6e44:	6a e0       	ldi	r22, 0x0A	; 10
    6e46:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__udivmodqi4>
    6e4a:	18 2f       	mov	r17, r24
    6e4c:	88 23       	and	r24, r24
    6e4e:	19 f0       	breq	.+6      	; 0x6e56 <softuart_put_uint8+0x46>
    6e50:	80 e3       	ldi	r24, 0x30	; 48
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	ea cf       	rjmp	.-44     	; 0x6e2a <softuart_put_uint8+0x1a>
    6e56:	1f 91       	pop	r17
    6e58:	0f 91       	pop	r16
    6e5a:	ff 90       	pop	r15
    6e5c:	08 95       	ret

00006e5e <softuart_put_uint16>:
    6e5e:	ff 92       	push	r15
    6e60:	0f 93       	push	r16
    6e62:	1f 93       	push	r17
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	8c 01       	movw	r16, r24
    6e6a:	80 e3       	ldi	r24, 0x30	; 48
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	ff 24       	eor	r15, r15
    6e70:	c0 e1       	ldi	r28, 0x10	; 16
    6e72:	d7 e2       	ldi	r29, 0x27	; 39
    6e74:	05 c0       	rjmp	.+10     	; 0x6e80 <softuart_put_uint16+0x22>
    6e76:	0c 1b       	sub	r16, r28
    6e78:	1d 0b       	sbc	r17, r29
    6e7a:	01 96       	adiw	r24, 0x01	; 1
    6e7c:	31 e0       	ldi	r19, 0x01	; 1
    6e7e:	f3 2e       	mov	r15, r19
    6e80:	0c 17       	cp	r16, r28
    6e82:	1d 07       	cpc	r17, r29
    6e84:	c0 f7       	brcc	.-16     	; 0x6e76 <softuart_put_uint16+0x18>
    6e86:	ff 20       	and	r15, r15
    6e88:	39 f4       	brne	.+14     	; 0x6e98 <softuart_put_uint16+0x3a>
    6e8a:	80 33       	cpi	r24, 0x30	; 48
    6e8c:	91 05       	cpc	r25, r1
    6e8e:	21 f4       	brne	.+8      	; 0x6e98 <softuart_put_uint16+0x3a>
    6e90:	c1 30       	cpi	r28, 0x01	; 1
    6e92:	d1 05       	cpc	r29, r1
    6e94:	09 f0       	breq	.+2      	; 0x6e98 <softuart_put_uint16+0x3a>
    6e96:	80 e2       	ldi	r24, 0x20	; 32
    6e98:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6e9c:	ce 01       	movw	r24, r28
    6e9e:	6a e0       	ldi	r22, 0x0A	; 10
    6ea0:	70 e0       	ldi	r23, 0x00	; 0
    6ea2:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__udivmodhi4>
    6ea6:	eb 01       	movw	r28, r22
    6ea8:	67 2b       	or	r22, r23
    6eaa:	19 f0       	breq	.+6      	; 0x6eb2 <softuart_put_uint16+0x54>
    6eac:	80 e3       	ldi	r24, 0x30	; 48
    6eae:	90 e0       	ldi	r25, 0x00	; 0
    6eb0:	e7 cf       	rjmp	.-50     	; 0x6e80 <softuart_put_uint16+0x22>
    6eb2:	df 91       	pop	r29
    6eb4:	cf 91       	pop	r28
    6eb6:	1f 91       	pop	r17
    6eb8:	0f 91       	pop	r16
    6eba:	ff 90       	pop	r15
    6ebc:	08 95       	ret

00006ebe <softuart_put_ip>:
    6ebe:	ef 92       	push	r14
    6ec0:	ff 92       	push	r15
    6ec2:	0f 93       	push	r16
    6ec4:	1f 93       	push	r17
    6ec6:	7b 01       	movw	r14, r22
    6ec8:	8c 01       	movw	r16, r24
    6eca:	81 2f       	mov	r24, r17
    6ecc:	99 27       	eor	r25, r25
    6ece:	aa 27       	eor	r26, r26
    6ed0:	bb 27       	eor	r27, r27
    6ed2:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    6ed6:	8e e2       	ldi	r24, 0x2E	; 46
    6ed8:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6edc:	c8 01       	movw	r24, r16
    6ede:	aa 27       	eor	r26, r26
    6ee0:	bb 27       	eor	r27, r27
    6ee2:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    6ee6:	8e e2       	ldi	r24, 0x2E	; 46
    6ee8:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6eec:	bb 27       	eor	r27, r27
    6eee:	a1 2f       	mov	r26, r17
    6ef0:	90 2f       	mov	r25, r16
    6ef2:	8f 2d       	mov	r24, r15
    6ef4:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    6ef8:	8e e2       	ldi	r24, 0x2E	; 46
    6efa:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <softuart_putc>
    6efe:	8e 2d       	mov	r24, r14
    6f00:	0e 94 08 37 	call	0x6e10	; 0x6e10 <softuart_put_uint8>
    6f04:	1f 91       	pop	r17
    6f06:	0f 91       	pop	r16
    6f08:	ff 90       	pop	r15
    6f0a:	ef 90       	pop	r14
    6f0c:	08 95       	ret

00006f0e <softuart_init>:
		SOFTUART_DELAY();
}

inline void softuart_init(void){
    6f0e:	a1 9a       	sbi	0x14, 1	; 20
    6f10:	08 95       	ret

00006f12 <clock_init>:
volatile unsigned char clock_new_flag;
//used as a timer for uart io (mca25) for example
volatile unsigned char clock_timeout_timer;

void clock_init(){
    6f12:	10 92 3e 07 	sts	0x073E, r1
	clock_new_flag=0; 

	//enable interrupt:
	TIMSK |= _BV(TOIE1);
    6f16:	89 b7       	in	r24, 0x39	; 57
    6f18:	84 60       	ori	r24, 0x04	; 4
    6f1a:	89 bf       	out	0x39, r24	; 57

	//init clock:
	clock[CLOCK_SEC]  = 0;
    6f1c:	10 92 42 07 	sts	0x0742, r1
	clock[CLOCK_MIN]  = 0;
    6f20:	10 92 41 07 	sts	0x0741, r1
	clock[CLOCK_HOUR] = 0;
    6f24:	10 92 40 07 	sts	0x0740, r1
	clock_timeout_timer = 0;
    6f28:	10 92 3d 07 	sts	0x073D, r1
	clock_intcount = 0;
    6f2c:	10 92 3f 07 	sts	0x073F, r1

	//set prescaler to 1024
	TCCR1B |= (1<<CS10 | 0<<CS11 | 1<<CS12);
    6f30:	8e b5       	in	r24, 0x2e	; 46
    6f32:	85 60       	ori	r24, 0x05	; 5
    6f34:	8e bd       	out	0x2e, r24	; 46

	TCNT1 = CLOCK_TCNT;	
    6f36:	8f ed       	ldi	r24, 0xDF	; 223
    6f38:	93 ee       	ldi	r25, 0xE3	; 227
    6f3a:	9d bd       	out	0x2d, r25	; 45
    6f3c:	8c bd       	out	0x2c, r24	; 44

	//interrups enable
	sei();
    6f3e:	78 94       	sei
    6f40:	08 95       	ret

00006f42 <__vector_9>:
	#if CLOCK_DEBUG
	softuart_puts_progmem("CLK : init done.\r\n");
	#endif
}

//timer overflow interrupt:
SIGNAL (SIG_OVERFLOW1){
    6f42:	1f 92       	push	r1
    6f44:	0f 92       	push	r0
    6f46:	0f b6       	in	r0, 0x3f	; 63
    6f48:	0f 92       	push	r0
    6f4a:	11 24       	eor	r1, r1
    6f4c:	8f 93       	push	r24
    6f4e:	9f 93       	push	r25
	//set timer again:
	TCNT1 = CLOCK_TCNT;
    6f50:	8f ed       	ldi	r24, 0xDF	; 223
    6f52:	93 ee       	ldi	r25, 0xE3	; 227
    6f54:	9d bd       	out	0x2d, r25	; 45
    6f56:	8c bd       	out	0x2c, r24	; 44

	clock_intcount++;
    6f58:	80 91 3f 07 	lds	r24, 0x073F
    6f5c:	8f 5f       	subi	r24, 0xFF	; 255
    6f5e:	80 93 3f 07 	sts	0x073F, r24

	if (clock_timeout_timer>0)
    6f62:	80 91 3d 07 	lds	r24, 0x073D
    6f66:	88 23       	and	r24, r24
    6f68:	29 f0       	breq	.+10     	; 0x6f74 <__vector_9+0x32>
		clock_timeout_timer--;
    6f6a:	80 91 3d 07 	lds	r24, 0x073D
    6f6e:	81 50       	subi	r24, 0x01	; 1
    6f70:	80 93 3d 07 	sts	0x073D, r24

	//set new second flag:
	clock_new_flag |= (1<<CLOCK_SEC);
    6f74:	80 91 3e 07 	lds	r24, 0x073E
    6f78:	84 60       	ori	r24, 0x04	; 4
    6f7a:	80 93 3e 07 	sts	0x073E, r24
    6f7e:	9f 91       	pop	r25
    6f80:	8f 91       	pop	r24
    6f82:	0f 90       	pop	r0
    6f84:	0f be       	out	0x3f, r0	; 63
    6f86:	0f 90       	pop	r0
    6f88:	1f 90       	pop	r1
    6f8a:	18 95       	reti

00006f8c <clock_do>:
}

//timer isr needs to be as short as possible (uart 460kbaud!!)
//-> do the clock calc here, assumes that we call clock_do() at least every 60 seconds
//   if you need the correct time, always call clock_do() before using the clock[] array
void clock_do(void){
    6f8c:	90 91 3f 07 	lds	r25, 0x073F
	unsigned char new_secs;

	new_secs = clock_intcount;

	if (new_secs > 0){
    6f90:	99 23       	and	r25, r25
    6f92:	e1 f1       	breq	.+120    	; 0x700c <clock_do+0x80>
		clock_intcount = clock_intcount - new_secs;
    6f94:	80 91 3f 07 	lds	r24, 0x073F
    6f98:	89 1b       	sub	r24, r25
    6f9a:	80 93 3f 07 	sts	0x073F, r24

		//increase clock:
		clock[CLOCK_SEC] += new_secs;
    6f9e:	20 91 42 07 	lds	r18, 0x0742
    6fa2:	29 0f       	add	r18, r25
    6fa4:	20 93 42 07 	sts	0x0742, r18

		if (clock[CLOCK_SEC] >= 60){
    6fa8:	2c 33       	cpi	r18, 0x3C	; 60
    6faa:	98 f0       	brcs	.+38     	; 0x6fd2 <clock_do+0x46>
			clock[CLOCK_MIN] += clock[CLOCK_SEC]/60;
    6fac:	82 2f       	mov	r24, r18
    6fae:	6c e3       	ldi	r22, 0x3C	; 60
    6fb0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__udivmodqi4>
    6fb4:	90 91 41 07 	lds	r25, 0x0741
    6fb8:	98 0f       	add	r25, r24
    6fba:	90 93 41 07 	sts	0x0741, r25
			clock[CLOCK_SEC]  = clock[CLOCK_SEC]%60;
    6fbe:	82 2f       	mov	r24, r18
    6fc0:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__udivmodqi4>
    6fc4:	90 93 42 07 	sts	0x0742, r25
		
			//new minute flag
			clock_new_flag |= (1<<CLOCK_MIN);
    6fc8:	80 91 3e 07 	lds	r24, 0x073E
    6fcc:	82 60       	ori	r24, 0x02	; 2
    6fce:	80 93 3e 07 	sts	0x073E, r24
		}

		if (clock[CLOCK_MIN] >= 60){
    6fd2:	20 91 41 07 	lds	r18, 0x0741
    6fd6:	2c 33       	cpi	r18, 0x3C	; 60
    6fd8:	98 f0       	brcs	.+38     	; 0x7000 <clock_do+0x74>
			clock[CLOCK_HOUR] += clock[CLOCK_MIN]/60;
    6fda:	82 2f       	mov	r24, r18
    6fdc:	6c e3       	ldi	r22, 0x3C	; 60
    6fde:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__udivmodqi4>
    6fe2:	90 91 40 07 	lds	r25, 0x0740
    6fe6:	98 0f       	add	r25, r24
    6fe8:	90 93 40 07 	sts	0x0740, r25
			clock[CLOCK_MIN]   = clock[CLOCK_MIN]%60;
    6fec:	82 2f       	mov	r24, r18
    6fee:	0e 94 46 3d 	call	0x7a8c	; 0x7a8c <__udivmodqi4>
    6ff2:	90 93 41 07 	sts	0x0741, r25
			
			//new hour flag:
			clock_new_flag |= (1<<CLOCK_HOUR);
    6ff6:	80 91 3e 07 	lds	r24, 0x073E
    6ffa:	81 60       	ori	r24, 0x01	; 1
    6ffc:	80 93 3e 07 	sts	0x073E, r24
		}	
		
		if (clock[CLOCK_HOUR] >= 24){
    7000:	80 91 40 07 	lds	r24, 0x0740
    7004:	88 31       	cpi	r24, 0x18	; 24
    7006:	10 f0       	brcs	.+4      	; 0x700c <clock_do+0x80>
			clock[CLOCK_HOUR] = 0;
    7008:	10 92 40 07 	sts	0x0740, r1
    700c:	08 95       	ret

0000700e <icmp_packet_in>:
//ACTIVATE DEBUG by editing this file:
#include "../debug.h"

//called if icmp packet comes in
void icmp_packet_in(unsigned char *buffer,unsigned int len){
    700e:	cf 92       	push	r12
    7010:	df 92       	push	r13
    7012:	ef 92       	push	r14
    7014:	ff 92       	push	r15
    7016:	0f 93       	push	r16
    7018:	1f 93       	push	r17
    701a:	cf 93       	push	r28
    701c:	df 93       	push	r29
    701e:	ec 01       	movw	r28, r24
    7020:	6b 01       	movw	r12, r22
	int i;
	int pos;

	//we only support ICMP echo request (ping) packets:
	if (buffer[ICMP_POS_TYPE] == ICMP_TYPE_ECHO_REQUEST){
    7022:	52 e2       	ldi	r21, 0x22	; 34
    7024:	e5 2e       	mov	r14, r21
    7026:	f1 2c       	mov	r15, r1
    7028:	e8 0e       	add	r14, r24
    702a:	f9 1e       	adc	r15, r25
    702c:	8a a1       	ldd	r24, Y+34	; 0x22
    702e:	88 30       	cpi	r24, 0x08	; 8
    7030:	09 f0       	breq	.+2      	; 0x7034 <icmp_packet_in+0x26>
    7032:	54 c0       	rjmp	.+168    	; 0x70dc <icmp_packet_in+0xce>
		#if ICMP_DEBUG
		softuart_puts_progmem("ICMP: echo reply sent");
		softuart_putnewline();
		#endif
		//reuse buffer for the ICMP echo reply:

		//*******************************
		//setup the eth packet:
		//get packet target mac from arp table:
		pos = arp_search_by_ip(nic_buffer_to_ip(&buffer[IP_POS_SRC_IP]));
    7034:	8e 01       	movw	r16, r28
    7036:	06 5e       	subi	r16, 0xE6	; 230
    7038:	1f 4f       	sbci	r17, 0xFF	; 255
    703a:	c8 01       	movw	r24, r16
    703c:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    7040:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <arp_search_by_ip>
    7044:	9c 01       	movw	r18, r24
		if (pos<0){
    7046:	97 ff       	sbrs	r25, 7
    7048:	0b c0       	rjmp	.+22     	; 0x7060 <icmp_packet_in+0x52>
    704a:	fe 01       	movw	r30, r28
    704c:	20 e0       	ldi	r18, 0x00	; 0
    704e:	30 e0       	ldi	r19, 0x00	; 0
			//no match, copy src to target ...
			for(i=0; i<6; i++)
				buffer[i] = buffer[6+i];
    7050:	86 81       	ldd	r24, Z+6	; 0x06
    7052:	81 93       	st	Z+, r24
    7054:	2f 5f       	subi	r18, 0xFF	; 255
    7056:	3f 4f       	sbci	r19, 0xFF	; 255
    7058:	26 30       	cpi	r18, 0x06	; 6
    705a:	31 05       	cpc	r19, r1
    705c:	b1 f0       	breq	.+44     	; 0x708a <icmp_packet_in+0x7c>
    705e:	f8 cf       	rjmp	.-16     	; 0x7050 <icmp_packet_in+0x42>
    7060:	43 e0       	ldi	r20, 0x03	; 3
    7062:	88 0f       	add	r24, r24
    7064:	99 1f       	adc	r25, r25
    7066:	4a 95       	dec	r20
    7068:	e1 f7       	brne	.-8      	; 0x7062 <icmp_packet_in+0x54>
    706a:	f9 01       	movw	r30, r18
    706c:	ee 0f       	add	r30, r30
    706e:	ff 1f       	adc	r31, r31
    7070:	e8 0f       	add	r30, r24
    7072:	f9 1f       	adc	r31, r25
    7074:	e9 5a       	subi	r30, 0xA9	; 169
    7076:	f8 4f       	sbci	r31, 0xF8	; 248
    7078:	de 01       	movw	r26, r28
    707a:	9e 01       	movw	r18, r28
    707c:	2a 5f       	subi	r18, 0xFA	; 250
    707e:	3f 4f       	sbci	r19, 0xFF	; 255
		}else{
			//match, copy mac from arp table:
			for(i=0; i<6; i++)
				buffer[i] = arp_table[pos].mac[i];
    7080:	81 91       	ld	r24, Z+
    7082:	8d 93       	st	X+, r24
    7084:	a2 17       	cp	r26, r18
    7086:	b3 07       	cpc	r27, r19
    7088:	d9 f7       	brne	.-10     	; 0x7080 <icmp_packet_in+0x72>
		}

		//packet source mac:
		nic_copy_mac_to_buf(&buffer[6]);
    708a:	ce 01       	movw	r24, r28
    708c:	06 96       	adiw	r24, 0x06	; 6
    708e:	0e 94 b9 38 	call	0x7172	; 0x7172 <nic_copy_mac_to_buf>

		//change type to ECHO REPLY
		buffer[ICMP_POS_TYPE] = ICMP_TYPE_ECHO_REPLY;
    7092:	f7 01       	movw	r30, r14
    7094:	10 82       	st	Z, r1
		
		//"calculate" checksum:
		//use quick & dirty hack, we change only the icmp type
		//so we can calculate the new checksum like this:
		if (buffer[ICMP_POS_CHECKSUM+0] > 0xFF-0x08)
    7096:	8c a1       	ldd	r24, Y+36	; 0x24
    7098:	88 3f       	cpi	r24, 0xF8	; 248
    709a:	18 f0       	brcs	.+6      	; 0x70a2 <icmp_packet_in+0x94>
			buffer[ICMP_POS_CHECKSUM+1] = buffer[ICMP_POS_CHECKSUM+1] + 1;
    709c:	8d a1       	ldd	r24, Y+37	; 0x25
    709e:	8f 5f       	subi	r24, 0xFF	; 255
    70a0:	8d a3       	std	Y+37, r24	; 0x25

		buffer[ICMP_POS_CHECKSUM+0] = buffer[ICMP_POS_CHECKSUM+0] + 0x08;
    70a2:	8c a1       	ldd	r24, Y+36	; 0x24
    70a4:	88 5f       	subi	r24, 0xF8	; 248
    70a6:	8c a3       	std	Y+36, r24	; 0x24
    70a8:	fe 01       	movw	r30, r28
    70aa:	20 e0       	ldi	r18, 0x00	; 0
    70ac:	30 e0       	ldi	r19, 0x00	; 0


		//set up dst ip (copy src to dest ip):
		for(i=0; i<4; i++){
			buffer[IP_POS_DST_IP+i] = buffer[IP_POS_SRC_IP+i];
    70ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    70b0:	86 8f       	std	Z+30, r24	; 0x1e
    70b2:	2f 5f       	subi	r18, 0xFF	; 255
    70b4:	3f 4f       	sbci	r19, 0xFF	; 255
    70b6:	31 96       	adiw	r30, 0x01	; 1
    70b8:	24 30       	cpi	r18, 0x04	; 4
    70ba:	31 05       	cpc	r19, r1
    70bc:	c1 f7       	brne	.-16     	; 0x70ae <icmp_packet_in+0xa0>
		}
		
		//set up src ip:
		nic_ip_to_buffer(&buffer[IP_POS_SRC_IP], nic_ip);
    70be:	40 91 4d 07 	lds	r20, 0x074D
    70c2:	50 91 4e 07 	lds	r21, 0x074E
    70c6:	60 91 4f 07 	lds	r22, 0x074F
    70ca:	70 91 50 07 	lds	r23, 0x0750
    70ce:	c8 01       	movw	r24, r16
    70d0:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>

		
		nic_send_packet(buffer,len);
    70d4:	b6 01       	movw	r22, r12
    70d6:	ce 01       	movw	r24, r28
    70d8:	0e 94 57 39 	call	0x72ae	; 0x72ae <nic_send_packet>
    70dc:	df 91       	pop	r29
    70de:	cf 91       	pop	r28
    70e0:	1f 91       	pop	r17
    70e2:	0f 91       	pop	r16
    70e4:	ff 90       	pop	r15
    70e6:	ef 90       	pop	r14
    70e8:	df 90       	pop	r13
    70ea:	cf 90       	pop	r12
    70ec:	08 95       	ret

000070ee <nethelp_checksum>:

//ACTIVATE DEBUG by editing this file:
#include "../debug.h"

unsigned int nethelp_checksum(unsigned char *buffer, unsigned int len, unsigned long csum32){
    70ee:	ef 92       	push	r14
    70f0:	ff 92       	push	r15
    70f2:	0f 93       	push	r16
    70f4:	1f 93       	push	r17
    70f6:	fc 01       	movw	r30, r24
    70f8:	79 01       	movw	r14, r18
    70fa:	8a 01       	movw	r16, r20
    70fc:	10 c0       	rjmp	.+32     	; 0x711e <nethelp_checksum+0x30>
	unsigned int  res16 = 0x0000;
	unsigned char data_hi;
	unsigned char data_lo;
	
	//loop through buffer
	while(len > 1){
		//read data_hi/lo from pointer:
		data_hi = *buffer++;
    70fe:	80 81       	ld	r24, Z
		data_lo = *buffer++;
    7100:	21 81       	ldd	r18, Z+1	; 0x01
    7102:	32 96       	adiw	r30, 0x02	; 2

		//generate 16bit var from both:
		res16 = ((data_hi << 8) + data_lo);
		
		//add to csum
		csum32 = csum32 + res16;
    7104:	99 27       	eor	r25, r25
    7106:	98 2f       	mov	r25, r24
    7108:	88 27       	eor	r24, r24
    710a:	82 0f       	add	r24, r18
    710c:	91 1d       	adc	r25, r1
    710e:	aa 27       	eor	r26, r26
    7110:	bb 27       	eor	r27, r27
    7112:	e8 0e       	add	r14, r24
    7114:	f9 1e       	adc	r15, r25
    7116:	0a 1f       	adc	r16, r26
    7118:	1b 1f       	adc	r17, r27

		//decrement length (we have read 2 bytes from ptr)
		len -=2;
    711a:	62 50       	subi	r22, 0x02	; 2
    711c:	70 40       	sbci	r23, 0x00	; 0
    711e:	62 30       	cpi	r22, 0x02	; 2
    7120:	71 05       	cpc	r23, r1
    7122:	68 f7       	brcc	.-38     	; 0x70fe <nethelp_checksum+0x10>
	}

	//is len odd -> add again last hi value & lo = 0
	if(len > 0){
    7124:	67 2b       	or	r22, r23
    7126:	51 f0       	breq	.+20     	; 0x713c <nethelp_checksum+0x4e>
		//read data_hi/lo from pointer & generate 16bit var:
		data_hi = *buffer;
		res16   = data_hi<<8;

		//add to csum
		csum32 = csum32 + res16;
    7128:	80 81       	ld	r24, Z
    712a:	99 27       	eor	r25, r25
    712c:	98 2f       	mov	r25, r24
    712e:	88 27       	eor	r24, r24
    7130:	aa 27       	eor	r26, r26
    7132:	bb 27       	eor	r27, r27
    7134:	e8 0e       	add	r14, r24
    7136:	f9 1e       	adc	r15, r25
    7138:	0a 1f       	adc	r16, r26
    713a:	1b 1f       	adc	r17, r27
	}
	
	//to complement calc:
	csum32 = ((csum32 & 0x0000FFFF)+ ((csum32 & 0xFFFF0000) >> 16));
    713c:	98 01       	movw	r18, r16
    713e:	44 27       	eor	r20, r20
    7140:	55 27       	eor	r21, r21
    7142:	d8 01       	movw	r26, r16
    7144:	c7 01       	movw	r24, r14
    7146:	a0 70       	andi	r26, 0x00	; 0
    7148:	b0 70       	andi	r27, 0x00	; 0
    714a:	82 0f       	add	r24, r18
    714c:	93 1f       	adc	r25, r19
    714e:	a4 1f       	adc	r26, r20
    7150:	b5 1f       	adc	r27, r21
    7152:	9d 01       	movw	r18, r26
    7154:	44 27       	eor	r20, r20
    7156:	55 27       	eor	r21, r21
    7158:	a0 70       	andi	r26, 0x00	; 0
    715a:	b0 70       	andi	r27, 0x00	; 0
    715c:	82 0f       	add	r24, r18
    715e:	93 1f       	adc	r25, r19
    7160:	a4 1f       	adc	r26, r20
    7162:	b5 1f       	adc	r27, r21
    7164:	80 95       	com	r24
    7166:	90 95       	com	r25
    7168:	1f 91       	pop	r17
    716a:	0f 91       	pop	r16
    716c:	ff 90       	pop	r15
    716e:	ef 90       	pop	r14
    7170:	08 95       	ret

00007172 <nic_copy_mac_to_buf>:
	return enc28j60_receive_packet(buffer,maxlen);
	//return enc28j60PacketReceive(maxlen,buffer);
}

void nic_copy_mac_to_buf(unsigned char * buffer){
    7172:	fc 01       	movw	r30, r24
	buffer[0] = NIC_MAC0;
    7174:	10 82       	st	Z, r1
	buffer[1] = NIC_MAC1;
    7176:	86 e5       	ldi	r24, 0x56	; 86
    7178:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = NIC_MAC2;
    717a:	8c e4       	ldi	r24, 0x4C	; 76
    717c:	82 83       	std	Z+2, r24	; 0x02
	buffer[3] = NIC_MAC3;
    717e:	81 e4       	ldi	r24, 0x41	; 65
    7180:	83 83       	std	Z+3, r24	; 0x03
	buffer[4] = NIC_MAC4;
    7182:	82 e4       	ldi	r24, 0x42	; 66
    7184:	84 83       	std	Z+4, r24	; 0x04
	buffer[5] = NIC_MAC5;
    7186:	80 e3       	ldi	r24, 0x30	; 48
    7188:	85 83       	std	Z+5, r24	; 0x05
    718a:	08 95       	ret

0000718c <nic_buffer_to_unsigned_int>:
}

unsigned int nic_buffer_to_unsigned_int(unsigned char *buffer){
    718c:	fc 01       	movw	r30, r24
    718e:	84 89       	ldd	r24, Z+20	; 0x14
    7190:	99 27       	eor	r25, r25
    7192:	98 2f       	mov	r25, r24
    7194:	88 27       	eor	r24, r24
    7196:	25 89       	ldd	r18, Z+21	; 0x15
    7198:	33 27       	eor	r19, r19
	unsigned int res = ((unsigned int)buffer[20]<<8) | buffer[21];
	return res;
}
    719a:	82 2b       	or	r24, r18
    719c:	93 2b       	or	r25, r19
    719e:	08 95       	ret

000071a0 <nic_buffer_to_ip>:

uint32_t nic_buffer_to_ip(unsigned char *buffer){
    71a0:	ef 92       	push	r14
    71a2:	ff 92       	push	r15
    71a4:	0f 93       	push	r16
    71a6:	1f 93       	push	r17
    71a8:	fc 01       	movw	r30, r24
    71aa:	62 81       	ldd	r22, Z+2	; 0x02
    71ac:	77 27       	eor	r23, r23
    71ae:	88 27       	eor	r24, r24
    71b0:	99 27       	eor	r25, r25
    71b2:	98 2f       	mov	r25, r24
    71b4:	87 2f       	mov	r24, r23
    71b6:	76 2f       	mov	r23, r22
    71b8:	66 27       	eor	r22, r22
    71ba:	e0 80       	ld	r14, Z
    71bc:	ff 24       	eor	r15, r15
    71be:	00 27       	eor	r16, r16
    71c0:	11 27       	eor	r17, r17
    71c2:	1e 2d       	mov	r17, r14
    71c4:	00 27       	eor	r16, r16
    71c6:	ff 24       	eor	r15, r15
    71c8:	ee 24       	eor	r14, r14
    71ca:	21 81       	ldd	r18, Z+1	; 0x01
    71cc:	33 27       	eor	r19, r19
    71ce:	44 27       	eor	r20, r20
    71d0:	55 27       	eor	r21, r21
    71d2:	a9 01       	movw	r20, r18
    71d4:	33 27       	eor	r19, r19
    71d6:	22 27       	eor	r18, r18
    71d8:	e2 2a       	or	r14, r18
    71da:	f3 2a       	or	r15, r19
    71dc:	04 2b       	or	r16, r20
    71de:	15 2b       	or	r17, r21
    71e0:	23 81       	ldd	r18, Z+3	; 0x03
    71e2:	33 27       	eor	r19, r19
    71e4:	44 27       	eor	r20, r20
    71e6:	55 27       	eor	r21, r21
    71e8:	e2 2a       	or	r14, r18
    71ea:	f3 2a       	or	r15, r19
    71ec:	04 2b       	or	r16, r20
    71ee:	15 2b       	or	r17, r21
    71f0:	6e 29       	or	r22, r14
    71f2:	7f 29       	or	r23, r15
    71f4:	80 2b       	or	r24, r16
    71f6:	91 2b       	or	r25, r17
    71f8:	1f 91       	pop	r17
    71fa:	0f 91       	pop	r16
    71fc:	ff 90       	pop	r15
    71fe:	ef 90       	pop	r14
    7200:	08 95       	ret

00007202 <nic_ip_to_buffer>:
	uint32_t res = ((uint32_t)buffer[0]<<24) | ((uint32_t)buffer[1]<<16) | ((uint32_t)buffer[2]<<8) | ((uint32_t)buffer[3]<<0);
	return res;
}

void nic_ip_to_buffer(unsigned char *buffer, uint32_t ip){
    7202:	fc 01       	movw	r30, r24
	buffer[0] = ip>>24 & 0xFF;
    7204:	87 2f       	mov	r24, r23
    7206:	99 27       	eor	r25, r25
    7208:	aa 27       	eor	r26, r26
    720a:	bb 27       	eor	r27, r27
    720c:	80 83       	st	Z, r24
	buffer[1] = ip>>16 & 0xFF;
    720e:	cb 01       	movw	r24, r22
    7210:	aa 27       	eor	r26, r26
    7212:	bb 27       	eor	r27, r27
    7214:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = ip>> 8 & 0xFF;
    7216:	bb 27       	eor	r27, r27
    7218:	a7 2f       	mov	r26, r23
    721a:	96 2f       	mov	r25, r22
    721c:	85 2f       	mov	r24, r21
    721e:	82 83       	std	Z+2, r24	; 0x02
	buffer[3] = ip>> 0 & 0xFF;
    7220:	43 83       	std	Z+3, r20	; 0x03
    7222:	08 95       	ret

00007224 <nic_buffer_to_seq>:
}

unsigned long nic_buffer_to_seq(unsigned char *buffer){
    7224:	ef 92       	push	r14
    7226:	ff 92       	push	r15
    7228:	0f 93       	push	r16
    722a:	1f 93       	push	r17
    722c:	fc 01       	movw	r30, r24
    722e:	62 81       	ldd	r22, Z+2	; 0x02
    7230:	77 27       	eor	r23, r23
    7232:	88 27       	eor	r24, r24
    7234:	99 27       	eor	r25, r25
    7236:	98 2f       	mov	r25, r24
    7238:	87 2f       	mov	r24, r23
    723a:	76 2f       	mov	r23, r22
    723c:	66 27       	eor	r22, r22
    723e:	e0 80       	ld	r14, Z
    7240:	ff 24       	eor	r15, r15
    7242:	00 27       	eor	r16, r16
    7244:	11 27       	eor	r17, r17
    7246:	1e 2d       	mov	r17, r14
    7248:	00 27       	eor	r16, r16
    724a:	ff 24       	eor	r15, r15
    724c:	ee 24       	eor	r14, r14
    724e:	21 81       	ldd	r18, Z+1	; 0x01
    7250:	33 27       	eor	r19, r19
    7252:	44 27       	eor	r20, r20
    7254:	55 27       	eor	r21, r21
    7256:	a9 01       	movw	r20, r18
    7258:	33 27       	eor	r19, r19
    725a:	22 27       	eor	r18, r18
    725c:	e2 2a       	or	r14, r18
    725e:	f3 2a       	or	r15, r19
    7260:	04 2b       	or	r16, r20
    7262:	15 2b       	or	r17, r21
    7264:	23 81       	ldd	r18, Z+3	; 0x03
    7266:	33 27       	eor	r19, r19
    7268:	44 27       	eor	r20, r20
    726a:	55 27       	eor	r21, r21
    726c:	e2 2a       	or	r14, r18
    726e:	f3 2a       	or	r15, r19
    7270:	04 2b       	or	r16, r20
    7272:	15 2b       	or	r17, r21
    7274:	6e 29       	or	r22, r14
    7276:	7f 29       	or	r23, r15
    7278:	80 2b       	or	r24, r16
    727a:	91 2b       	or	r25, r17
    727c:	1f 91       	pop	r17
    727e:	0f 91       	pop	r16
    7280:	ff 90       	pop	r15
    7282:	ef 90       	pop	r14
    7284:	08 95       	ret

00007286 <nic_seq_to_buffer>:
	unsigned long res = ((unsigned long)buffer[0]<<24) | ((unsigned long)buffer[1]<<16) | ((unsigned long)buffer[2]<<8) | ((unsigned long)buffer[3]<<0);
	return res;
}

void nic_seq_to_buffer(unsigned char *buffer, unsigned long seq){
    7286:	fc 01       	movw	r30, r24
	buffer[0] = seq>>24 & 0xFF;
    7288:	87 2f       	mov	r24, r23
    728a:	99 27       	eor	r25, r25
    728c:	aa 27       	eor	r26, r26
    728e:	bb 27       	eor	r27, r27
    7290:	80 83       	st	Z, r24
	buffer[1] = seq>>16 & 0xFF;
    7292:	cb 01       	movw	r24, r22
    7294:	aa 27       	eor	r26, r26
    7296:	bb 27       	eor	r27, r27
    7298:	81 83       	std	Z+1, r24	; 0x01
	buffer[2] = seq>> 8 & 0xFF;
    729a:	bb 27       	eor	r27, r27
    729c:	a7 2f       	mov	r26, r23
    729e:	96 2f       	mov	r25, r22
    72a0:	85 2f       	mov	r24, r21
    72a2:	82 83       	std	Z+2, r24	; 0x02
	buffer[3] = seq>> 0 & 0xFF;
    72a4:	43 83       	std	Z+3, r20	; 0x03
    72a6:	08 95       	ret

000072a8 <nic_receive_packet>:
    72a8:	0e 94 73 33 	call	0x66e6	; 0x66e6 <enc28j60_receive_packet>
    72ac:	08 95       	ret

000072ae <nic_send_packet>:
    72ae:	0e 94 08 34 	call	0x6810	; 0x6810 <enc28j60_send_packet>
    72b2:	08 95       	ret

000072b4 <nic_init>:
    72b4:	0e 94 50 34 	call	0x68a0	; 0x68a0 <enc28j60_init>
    72b8:	87 e4       	ldi	r24, 0x47	; 71
    72ba:	97 e0       	ldi	r25, 0x07	; 7
    72bc:	0e 94 b9 38 	call	0x7172	; 0x7172 <nic_copy_mac_to_buf>
    72c0:	88 e0       	ldi	r24, 0x08	; 8
    72c2:	91 e0       	ldi	r25, 0x01	; 1
    72c4:	a8 ea       	ldi	r26, 0xA8	; 168
    72c6:	b0 ec       	ldi	r27, 0xC0	; 192
    72c8:	80 93 4d 07 	sts	0x074D, r24
    72cc:	90 93 4e 07 	sts	0x074E, r25
    72d0:	a0 93 4f 07 	sts	0x074F, r26
    72d4:	b0 93 50 07 	sts	0x0750, r27
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	91 e0       	ldi	r25, 0x01	; 1
    72dc:	a8 ea       	ldi	r26, 0xA8	; 168
    72de:	b0 ec       	ldi	r27, 0xC0	; 192
    72e0:	80 93 43 07 	sts	0x0743, r24
    72e4:	90 93 44 07 	sts	0x0744, r25
    72e8:	a0 93 45 07 	sts	0x0745, r26
    72ec:	b0 93 46 07 	sts	0x0746, r27
    72f0:	08 95       	ret

000072f2 <arp_init>:
struct arp_entry arp_table[ARP_TABLE_SIZE];
volatile int arp_table_pointer;

//param initialise arp table:
void arp_init(void){
    72f2:	10 92 53 07 	sts	0x0753, r1
    72f6:	10 92 54 07 	sts	0x0754, r1
    72fa:	10 92 55 07 	sts	0x0755, r1
    72fe:	10 92 56 07 	sts	0x0756, r1
    7302:	10 92 5d 07 	sts	0x075D, r1
    7306:	10 92 5e 07 	sts	0x075E, r1
    730a:	10 92 5f 07 	sts	0x075F, r1
    730e:	10 92 60 07 	sts	0x0760, r1
    7312:	10 92 67 07 	sts	0x0767, r1
    7316:	10 92 68 07 	sts	0x0768, r1
    731a:	10 92 69 07 	sts	0x0769, r1
    731e:	10 92 6a 07 	sts	0x076A, r1
    7322:	10 92 71 07 	sts	0x0771, r1
    7326:	10 92 72 07 	sts	0x0772, r1
    732a:	10 92 73 07 	sts	0x0773, r1
    732e:	10 92 74 07 	sts	0x0774, r1
	for(unsigned char i=0; i<ARP_TABLE_SIZE; i++){
		arp_table[i].ip  = 0;
		//arp_table[i].ttl = 0;
	}
	arp_table_pointer = 0;
    7332:	10 92 52 07 	sts	0x0752, r1
    7336:	10 92 51 07 	sts	0x0751, r1
    733a:	08 95       	ret

0000733c <arp_add_mac2ip>:
}

//decode arp packet & send reply
void arp_packet_in(unsigned char *buffer, unsigned int len){
	uint32_t src_ip;
	uint32_t dst_ip;
	int pos;
	unsigned char c;

	src_ip = nic_buffer_to_ip(&buffer[ARP_POS_SRC_IP]);
	dst_ip = nic_buffer_to_ip(&buffer[ARP_POS_DST_IP]);

	//is this an arp request ?
	if (nic_buffer_to_unsigned_int(buffer) == ARP_OP_REQUEST){
		//is this arp request for us ?
		if (dst_ip == nic_ip){
			//yes -> send ARP REPLY:
			//reuse buffer for the reply !!!
			#if ARP_DEBUG
			softuart_puts_progmem("ARP : who has ");
			softuart_put_ip(dst_ip);
			softuart_puts_progmem(" tell ");
			softuart_put_ip(src_ip);
			softuart_putnewline();
			#endif
			
			//get entry pos in arp table.
			pos = arp_search_by_ip(src_ip);

			if (pos < 0){
				//ip not found -> get next insert id:
				pos = arp_table_pointer;
				
				//update ringbuffer pointer
				arp_table_pointer++;
				if (arp_table_pointer >= ARP_TABLE_SIZE)
					arp_table_pointer=0; 
			}

			//already known -> update
			arp_table[pos].ip = src_ip; //not necessary ...
			for (c=0; c<6; c++){
				arp_table[pos].mac[c] = buffer[ARP_POS_SRC_MAC+c];
			}

			//setup the eth packet:
			//packet source mac:
			nic_copy_mac_to_buf(&buffer[6]);
				
			//packet target mac:
			for (c=0; c<6; c++){
				buffer[c] = buffer[ARP_POS_SRC_MAC+c];
			}

			//now setup the arp packet:
			//change OP to REPLY
			buffer[ARP_POS_OP+0] = ARP_OP_REPLY>>8 & 0xFF;
			buffer[ARP_POS_OP+1] = ARP_OP_REPLY    & 0xFF;
			
			//copy src mac address to dst:
			for(c=0; c<6; c++){
				buffer[ARP_POS_DST_MAC+c] = buffer[ARP_POS_SRC_MAC+c];
			}

			//set src mac to our mac
			nic_copy_mac_to_buf(&buffer[ARP_POS_SRC_MAC]);

			//setup source ip:
			nic_ip_to_buffer(&buffer[ARP_POS_SRC_IP], nic_ip);
			//setup target ip:
			nic_ip_to_buffer(&buffer[ARP_POS_DST_IP], src_ip);

			//send packet
			nic_send_packet(buffer, len);
		}	
	}else if (nic_buffer_to_unsigned_int(buffer) == ARP_OP_REPLY){
		//handle ARP REPLY:
	
		//is this for us ?
		if (nic_buffer_to_ip(&buffer[ARP_POS_DST_IP]) == nic_ip){
			#if ARP_DEBUG
			softuart_puts_progmem("ARP : got reply for us");
			softuart_putnewline();
			#endif

			//if unknown -> add
			if( arp_search_by_ip(nic_buffer_to_ip(&buffer[ARP_POS_SRC_IP])) == -1)
				arp_add_mac2ip(&buffer[ARP_POS_SRC_MAC], nic_buffer_to_ip(&buffer[ARP_POS_SRC_IP]));
		}
		
		//show tale
		//arp_print_table();
	}
}

int arp_add_mac2ip(unsigned char *buffer, unsigned long ip){
    733c:	e0 91 51 07 	lds	r30, 0x0751
    7340:	f0 91 52 07 	lds	r31, 0x0752
    7344:	9f 01       	movw	r18, r30
    7346:	b3 e0       	ldi	r27, 0x03	; 3
    7348:	22 0f       	add	r18, r18
    734a:	33 1f       	adc	r19, r19
    734c:	ba 95       	dec	r27
    734e:	e1 f7       	brne	.-8      	; 0x7348 <arp_add_mac2ip+0xc>
    7350:	ee 0f       	add	r30, r30
    7352:	ff 1f       	adc	r31, r31
    7354:	e2 0f       	add	r30, r18
    7356:	f3 1f       	adc	r31, r19
    7358:	ed 5a       	subi	r30, 0xAD	; 173
    735a:	f8 4f       	sbci	r31, 0xF8	; 248
    735c:	40 83       	st	Z, r20
    735e:	51 83       	std	Z+1, r21	; 0x01
    7360:	62 83       	std	Z+2, r22	; 0x02
    7362:	73 83       	std	Z+3, r23	; 0x03
    7364:	20 e0       	ldi	r18, 0x00	; 0
    7366:	30 e0       	ldi	r19, 0x00	; 0
    7368:	dc 01       	movw	r26, r24
	unsigned char c;
	int res;
	
	#if ARP_DEBUG
	softuart_puts_progmem("ARP : adding ip ");
	softuart_put_ip(ip);
	softuart_puts_progmem(" to mac table");
	softuart_putnewline();
	#endif	

	//set ip
	arp_table[arp_table_pointer].ip = ip;
	
	//set mac:
	for (c=0; c<6; c++){
		arp_table[arp_table_pointer].mac[c] = buffer[c];
    736a:	e0 91 51 07 	lds	r30, 0x0751
    736e:	f0 91 52 07 	lds	r31, 0x0752
    7372:	cf 01       	movw	r24, r30
    7374:	53 e0       	ldi	r21, 0x03	; 3
    7376:	88 0f       	add	r24, r24
    7378:	99 1f       	adc	r25, r25
    737a:	5a 95       	dec	r21
    737c:	e1 f7       	brne	.-8      	; 0x7376 <arp_add_mac2ip+0x3a>
    737e:	ee 0f       	add	r30, r30
    7380:	ff 1f       	adc	r31, r31
    7382:	e8 0f       	add	r30, r24
    7384:	f9 1f       	adc	r31, r25
    7386:	ed 5a       	subi	r30, 0xAD	; 173
    7388:	f8 4f       	sbci	r31, 0xF8	; 248
    738a:	e2 0f       	add	r30, r18
    738c:	f3 1f       	adc	r31, r19
    738e:	8d 91       	ld	r24, X+
    7390:	84 83       	std	Z+4, r24	; 0x04
    7392:	2f 5f       	subi	r18, 0xFF	; 255
    7394:	3f 4f       	sbci	r19, 0xFF	; 255
    7396:	26 30       	cpi	r18, 0x06	; 6
    7398:	31 05       	cpc	r19, r1
    739a:	39 f7       	brne	.-50     	; 0x736a <arp_add_mac2ip+0x2e>
	}

	res = arp_table_pointer;	
    739c:	20 91 51 07 	lds	r18, 0x0751
    73a0:	30 91 52 07 	lds	r19, 0x0752

	//update ringbuffer pointer
	arp_table_pointer++;
    73a4:	80 91 51 07 	lds	r24, 0x0751
    73a8:	90 91 52 07 	lds	r25, 0x0752
    73ac:	01 96       	adiw	r24, 0x01	; 1
    73ae:	90 93 52 07 	sts	0x0752, r25
    73b2:	80 93 51 07 	sts	0x0751, r24
	if (arp_table_pointer >= ARP_TABLE_SIZE)
    73b6:	80 91 51 07 	lds	r24, 0x0751
    73ba:	90 91 52 07 	lds	r25, 0x0752
    73be:	04 97       	sbiw	r24, 0x04	; 4
    73c0:	24 f0       	brlt	.+8      	; 0x73ca <arp_add_mac2ip+0x8e>
		arp_table_pointer=0;
    73c2:	10 92 52 07 	sts	0x0752, r1
    73c6:	10 92 51 07 	sts	0x0751, r1
	
	return res;
}
    73ca:	c9 01       	movw	r24, r18
    73cc:	08 95       	ret

000073ce <arp_print_table>:

//send an arp request
void arp_send_request(unsigned char *buffer, uint32_t *dest_ip){
	unsigned char c;	
	
	//generate ethernet packet:
	for (c=0; c<6; c++){
		//set destination mac address:
		buffer[c]   = 0xFF; //BROADCAST!
		//set source mac address:
		buffer[c+6] = nic_mac[c];
	}

	//set ethernet packettype to ARP
	buffer[12] = 0x08;
	buffer[13] = 0x06;

	//set hardware type to ethernet:
	buffer[ARP_POS_HARDWARE_TYPE+0] = 0x00;
	buffer[ARP_POS_HARDWARE_TYPE+1] = 0x01;

	//set protocol to IP:
	buffer[ARP_POS_PROTOCOL+0] = 0x08;
	buffer[ARP_POS_PROTOCOL+1] = 0x00;

	//set hw size:
	buffer[ARP_POS_HARDWARE_SIZE] = 0x06;

	//set protocol size
	buffer[ARP_POS_PROTOCOL_SIZE] = 0x04;

	//set ARP type to REQUEST
	buffer[ARP_POS_OP+0] = ARP_OP_REQUEST>>8;
	buffer[ARP_POS_OP+1] = ARP_OP_REQUEST;

	//setup sender mac & ip:
	nic_copy_mac_to_buf(&buffer[ARP_POS_SRC_MAC]);
	nic_ip_to_buffer(&buffer[ARP_POS_SRC_IP], nic_ip);

	//set target mac to 0xFF:
	for(c=0; c<6; c++)
		buffer[ARP_POS_DST_MAC+c] = 0xFF;
	
	//set target ip:
	nic_ip_to_buffer(&buffer[ARP_POS_DST_IP], *dest_ip);

	//send arp request:
	nic_send_packet(buffer, 14+28);	
}

void arp_print_table(){
    73ce:	08 95       	ret

000073d0 <arp_search_by_ip>:
	#if ARP_DEBUG
	int i,j;

	softuart_puts_progmem("ARP TABLE:");
	softuart_putnewline();
	softuart_puts_progmem("    | MAC                    | IP");
	softuart_putnewline();
	for (i=0; i<ARP_TABLE_SIZE; i++){
		softuart_put_uint8(i);
		softuart_puts_progmem(" | ");
	
		softuart_put_uint8(arp_table[i].mac[0]);
		for (j=1; j<6; j++){
			softuart_putc(':');
			softuart_put_uint8(arp_table[i].mac[j]);
		}
		softuart_puts_progmem(" | ");
		softuart_put_ip(arp_table[i].ip);
		softuart_putnewline();
	}
	softuart_puts_progmem("ptr: ");
	softuart_put_uint8(arp_table_pointer);
	softuart_putnewline();
	softuart_putnewline();
	#endif
}

int arp_search_by_ip(uint32_t ip){
    73d0:	ab 01       	movw	r20, r22
    73d2:	bc 01       	movw	r22, r24
    73d4:	20 e0       	ldi	r18, 0x00	; 0
    73d6:	30 e0       	ldi	r19, 0x00	; 0
    73d8:	e3 e5       	ldi	r30, 0x53	; 83
    73da:	f7 e0       	ldi	r31, 0x07	; 7
	int i;
	for (i=0; i<ARP_TABLE_SIZE; i++){
		if (arp_table[i].ip == ip)
    73dc:	80 81       	ld	r24, Z
    73de:	91 81       	ldd	r25, Z+1	; 0x01
    73e0:	a2 81       	ldd	r26, Z+2	; 0x02
    73e2:	b3 81       	ldd	r27, Z+3	; 0x03
    73e4:	84 17       	cp	r24, r20
    73e6:	95 07       	cpc	r25, r21
    73e8:	a6 07       	cpc	r26, r22
    73ea:	b7 07       	cpc	r27, r23
    73ec:	41 f0       	breq	.+16     	; 0x73fe <arp_search_by_ip+0x2e>
    73ee:	2f 5f       	subi	r18, 0xFF	; 255
    73f0:	3f 4f       	sbci	r19, 0xFF	; 255
    73f2:	3a 96       	adiw	r30, 0x0a	; 10
    73f4:	24 30       	cpi	r18, 0x04	; 4
    73f6:	31 05       	cpc	r19, r1
    73f8:	89 f7       	brne	.-30     	; 0x73dc <arp_search_by_ip+0xc>
    73fa:	2f ef       	ldi	r18, 0xFF	; 255
    73fc:	3f ef       	ldi	r19, 0xFF	; 255
			return i;
	}
	//if we get here, ip is unknown
	return -1;
}	
    73fe:	c9 01       	movw	r24, r18
    7400:	08 95       	ret

00007402 <arp_send_request>:
    7402:	0f 93       	push	r16
    7404:	1f 93       	push	r17
    7406:	cf 93       	push	r28
    7408:	df 93       	push	r29
    740a:	ec 01       	movw	r28, r24
    740c:	8b 01       	movw	r16, r22
    740e:	fc 01       	movw	r30, r24
    7410:	a7 e4       	ldi	r26, 0x47	; 71
    7412:	b7 e0       	ldi	r27, 0x07	; 7
    7414:	9f ef       	ldi	r25, 0xFF	; 255
    7416:	90 83       	st	Z, r25
    7418:	8d 91       	ld	r24, X+
    741a:	86 83       	std	Z+6, r24	; 0x06
    741c:	31 96       	adiw	r30, 0x01	; 1
    741e:	87 e0       	ldi	r24, 0x07	; 7
    7420:	ad 34       	cpi	r26, 0x4D	; 77
    7422:	b8 07       	cpc	r27, r24
    7424:	c1 f7       	brne	.-16     	; 0x7416 <arp_send_request+0x14>
    7426:	88 e0       	ldi	r24, 0x08	; 8
    7428:	8c 87       	std	Y+12, r24	; 0x0c
    742a:	96 e0       	ldi	r25, 0x06	; 6
    742c:	9d 87       	std	Y+13, r25	; 0x0d
    742e:	1e 86       	std	Y+14, r1	; 0x0e
    7430:	21 e0       	ldi	r18, 0x01	; 1
    7432:	2f 87       	std	Y+15, r18	; 0x0f
    7434:	88 8b       	std	Y+16, r24	; 0x10
    7436:	19 8a       	std	Y+17, r1	; 0x11
    7438:	9a 8b       	std	Y+18, r25	; 0x12
    743a:	84 e0       	ldi	r24, 0x04	; 4
    743c:	8b 8b       	std	Y+19, r24	; 0x13
    743e:	1c 8a       	std	Y+20, r1	; 0x14
    7440:	2d 8b       	std	Y+21, r18	; 0x15
    7442:	ce 01       	movw	r24, r28
    7444:	46 96       	adiw	r24, 0x16	; 22
    7446:	0e 94 b9 38 	call	0x7172	; 0x7172 <nic_copy_mac_to_buf>
    744a:	40 91 4d 07 	lds	r20, 0x074D
    744e:	50 91 4e 07 	lds	r21, 0x074E
    7452:	60 91 4f 07 	lds	r22, 0x074F
    7456:	70 91 50 07 	lds	r23, 0x0750
    745a:	ce 01       	movw	r24, r28
    745c:	4c 96       	adiw	r24, 0x1c	; 28
    745e:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>
    7462:	fe 01       	movw	r30, r28
    7464:	80 e0       	ldi	r24, 0x00	; 0
    7466:	9f ef       	ldi	r25, 0xFF	; 255
    7468:	90 a3       	std	Z+32, r25	; 0x20
    746a:	8f 5f       	subi	r24, 0xFF	; 255
    746c:	31 96       	adiw	r30, 0x01	; 1
    746e:	86 30       	cpi	r24, 0x06	; 6
    7470:	d9 f7       	brne	.-10     	; 0x7468 <arp_send_request+0x66>
    7472:	f8 01       	movw	r30, r16
    7474:	40 81       	ld	r20, Z
    7476:	51 81       	ldd	r21, Z+1	; 0x01
    7478:	62 81       	ldd	r22, Z+2	; 0x02
    747a:	73 81       	ldd	r23, Z+3	; 0x03
    747c:	ce 01       	movw	r24, r28
    747e:	86 96       	adiw	r24, 0x26	; 38
    7480:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>
    7484:	6a e2       	ldi	r22, 0x2A	; 42
    7486:	70 e0       	ldi	r23, 0x00	; 0
    7488:	ce 01       	movw	r24, r28
    748a:	0e 94 57 39 	call	0x72ae	; 0x72ae <nic_send_packet>
    748e:	df 91       	pop	r29
    7490:	cf 91       	pop	r28
    7492:	1f 91       	pop	r17
    7494:	0f 91       	pop	r16
    7496:	08 95       	ret

00007498 <arp_packet_in>:
    7498:	4f 92       	push	r4
    749a:	5f 92       	push	r5
    749c:	6f 92       	push	r6
    749e:	7f 92       	push	r7
    74a0:	8f 92       	push	r8
    74a2:	9f 92       	push	r9
    74a4:	af 92       	push	r10
    74a6:	bf 92       	push	r11
    74a8:	cf 92       	push	r12
    74aa:	df 92       	push	r13
    74ac:	ef 92       	push	r14
    74ae:	ff 92       	push	r15
    74b0:	0f 93       	push	r16
    74b2:	1f 93       	push	r17
    74b4:	cf 93       	push	r28
    74b6:	df 93       	push	r29
    74b8:	ec 01       	movw	r28, r24
    74ba:	2b 01       	movw	r4, r22
    74bc:	9c e1       	ldi	r25, 0x1C	; 28
    74be:	89 2e       	mov	r8, r25
    74c0:	91 2c       	mov	r9, r1
    74c2:	8c 0e       	add	r8, r28
    74c4:	9d 1e       	adc	r9, r29
    74c6:	c4 01       	movw	r24, r8
    74c8:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    74cc:	5b 01       	movw	r10, r22
    74ce:	6c 01       	movw	r12, r24
    74d0:	86 e2       	ldi	r24, 0x26	; 38
    74d2:	68 2e       	mov	r6, r24
    74d4:	71 2c       	mov	r7, r1
    74d6:	6c 0e       	add	r6, r28
    74d8:	7d 1e       	adc	r7, r29
    74da:	c3 01       	movw	r24, r6
    74dc:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    74e0:	7b 01       	movw	r14, r22
    74e2:	8c 01       	movw	r16, r24
    74e4:	ce 01       	movw	r24, r28
    74e6:	0e 94 c6 38 	call	0x718c	; 0x718c <nic_buffer_to_unsigned_int>
    74ea:	01 97       	sbiw	r24, 0x01	; 1
    74ec:	09 f0       	breq	.+2      	; 0x74f0 <arp_packet_in+0x58>
    74ee:	77 c0       	rjmp	.+238    	; 0x75de <arp_packet_in+0x146>
    74f0:	80 91 4d 07 	lds	r24, 0x074D
    74f4:	90 91 4e 07 	lds	r25, 0x074E
    74f8:	a0 91 4f 07 	lds	r26, 0x074F
    74fc:	b0 91 50 07 	lds	r27, 0x0750
    7500:	e8 16       	cp	r14, r24
    7502:	f9 06       	cpc	r15, r25
    7504:	0a 07       	cpc	r16, r26
    7506:	1b 07       	cpc	r17, r27
    7508:	09 f0       	breq	.+2      	; 0x750c <arp_packet_in+0x74>
    750a:	8f c0       	rjmp	.+286    	; 0x762a <arp_packet_in+0x192>
    750c:	c6 01       	movw	r24, r12
    750e:	b5 01       	movw	r22, r10
    7510:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <arp_search_by_ip>
    7514:	9c 01       	movw	r18, r24
    7516:	97 ff       	sbrs	r25, 7
    7518:	17 c0       	rjmp	.+46     	; 0x7548 <arp_packet_in+0xb0>
    751a:	20 91 51 07 	lds	r18, 0x0751
    751e:	30 91 52 07 	lds	r19, 0x0752
    7522:	80 91 51 07 	lds	r24, 0x0751
    7526:	90 91 52 07 	lds	r25, 0x0752
    752a:	01 96       	adiw	r24, 0x01	; 1
    752c:	90 93 52 07 	sts	0x0752, r25
    7530:	80 93 51 07 	sts	0x0751, r24
    7534:	80 91 51 07 	lds	r24, 0x0751
    7538:	90 91 52 07 	lds	r25, 0x0752
    753c:	04 97       	sbiw	r24, 0x04	; 4
    753e:	24 f0       	brlt	.+8      	; 0x7548 <arp_packet_in+0xb0>
    7540:	10 92 52 07 	sts	0x0752, r1
    7544:	10 92 51 07 	sts	0x0751, r1
    7548:	c9 01       	movw	r24, r18
    754a:	03 e0       	ldi	r16, 0x03	; 3
    754c:	88 0f       	add	r24, r24
    754e:	99 1f       	adc	r25, r25
    7550:	0a 95       	dec	r16
    7552:	e1 f7       	brne	.-8      	; 0x754c <arp_packet_in+0xb4>
    7554:	22 0f       	add	r18, r18
    7556:	33 1f       	adc	r19, r19
    7558:	28 0f       	add	r18, r24
    755a:	39 1f       	adc	r19, r25
    755c:	f9 01       	movw	r30, r18
    755e:	ed 5a       	subi	r30, 0xAD	; 173
    7560:	f8 4f       	sbci	r31, 0xF8	; 248
    7562:	a0 82       	st	Z, r10
    7564:	b1 82       	std	Z+1, r11	; 0x01
    7566:	c2 82       	std	Z+2, r12	; 0x02
    7568:	d3 82       	std	Z+3, r13	; 0x03
    756a:	fe 01       	movw	r30, r28
    756c:	d9 01       	movw	r26, r18
    756e:	a9 5a       	subi	r26, 0xA9	; 169
    7570:	b8 4f       	sbci	r27, 0xF8	; 248
    7572:	90 e0       	ldi	r25, 0x00	; 0
    7574:	86 89       	ldd	r24, Z+22	; 0x16
    7576:	8d 93       	st	X+, r24
    7578:	9f 5f       	subi	r25, 0xFF	; 255
    757a:	31 96       	adiw	r30, 0x01	; 1
    757c:	96 30       	cpi	r25, 0x06	; 6
    757e:	d1 f7       	brne	.-12     	; 0x7574 <arp_packet_in+0xdc>
    7580:	ce 01       	movw	r24, r28
    7582:	06 96       	adiw	r24, 0x06	; 6
    7584:	0e 94 b9 38 	call	0x7172	; 0x7172 <nic_copy_mac_to_buf>
    7588:	fe 01       	movw	r30, r28
    758a:	90 e0       	ldi	r25, 0x00	; 0
    758c:	86 89       	ldd	r24, Z+22	; 0x16
    758e:	81 93       	st	Z+, r24
    7590:	9f 5f       	subi	r25, 0xFF	; 255
    7592:	96 30       	cpi	r25, 0x06	; 6
    7594:	d9 f7       	brne	.-10     	; 0x758c <arp_packet_in+0xf4>
    7596:	1c 8a       	std	Y+20, r1	; 0x14
    7598:	82 e0       	ldi	r24, 0x02	; 2
    759a:	8d 8b       	std	Y+21, r24	; 0x15
    759c:	fe 01       	movw	r30, r28
    759e:	90 e0       	ldi	r25, 0x00	; 0
    75a0:	86 89       	ldd	r24, Z+22	; 0x16
    75a2:	80 a3       	std	Z+32, r24	; 0x20
    75a4:	9f 5f       	subi	r25, 0xFF	; 255
    75a6:	31 96       	adiw	r30, 0x01	; 1
    75a8:	96 30       	cpi	r25, 0x06	; 6
    75aa:	d1 f7       	brne	.-12     	; 0x75a0 <arp_packet_in+0x108>
    75ac:	ce 01       	movw	r24, r28
    75ae:	46 96       	adiw	r24, 0x16	; 22
    75b0:	0e 94 b9 38 	call	0x7172	; 0x7172 <nic_copy_mac_to_buf>
    75b4:	40 91 4d 07 	lds	r20, 0x074D
    75b8:	50 91 4e 07 	lds	r21, 0x074E
    75bc:	60 91 4f 07 	lds	r22, 0x074F
    75c0:	70 91 50 07 	lds	r23, 0x0750
    75c4:	c4 01       	movw	r24, r8
    75c6:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>
    75ca:	b6 01       	movw	r22, r12
    75cc:	a5 01       	movw	r20, r10
    75ce:	c3 01       	movw	r24, r6
    75d0:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>
    75d4:	b2 01       	movw	r22, r4
    75d6:	ce 01       	movw	r24, r28
    75d8:	0e 94 57 39 	call	0x72ae	; 0x72ae <nic_send_packet>
    75dc:	26 c0       	rjmp	.+76     	; 0x762a <arp_packet_in+0x192>
    75de:	ce 01       	movw	r24, r28
    75e0:	0e 94 c6 38 	call	0x718c	; 0x718c <nic_buffer_to_unsigned_int>
    75e4:	02 97       	sbiw	r24, 0x02	; 2
    75e6:	09 f5       	brne	.+66     	; 0x762a <arp_packet_in+0x192>
    75e8:	c3 01       	movw	r24, r6
    75ea:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    75ee:	20 91 4d 07 	lds	r18, 0x074D
    75f2:	30 91 4e 07 	lds	r19, 0x074E
    75f6:	40 91 4f 07 	lds	r20, 0x074F
    75fa:	50 91 50 07 	lds	r21, 0x0750
    75fe:	62 17       	cp	r22, r18
    7600:	73 07       	cpc	r23, r19
    7602:	84 07       	cpc	r24, r20
    7604:	95 07       	cpc	r25, r21
    7606:	89 f4       	brne	.+34     	; 0x762a <arp_packet_in+0x192>
    7608:	c4 01       	movw	r24, r8
    760a:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    760e:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <arp_search_by_ip>
    7612:	8f 5f       	subi	r24, 0xFF	; 255
    7614:	9f 4f       	sbci	r25, 0xFF	; 255
    7616:	49 f4       	brne	.+18     	; 0x762a <arp_packet_in+0x192>
    7618:	c4 01       	movw	r24, r8
    761a:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <nic_buffer_to_ip>
    761e:	ab 01       	movw	r20, r22
    7620:	bc 01       	movw	r22, r24
    7622:	ce 01       	movw	r24, r28
    7624:	46 96       	adiw	r24, 0x16	; 22
    7626:	0e 94 9e 39 	call	0x733c	; 0x733c <arp_add_mac2ip>
    762a:	df 91       	pop	r29
    762c:	cf 91       	pop	r28
    762e:	1f 91       	pop	r17
    7630:	0f 91       	pop	r16
    7632:	ff 90       	pop	r15
    7634:	ef 90       	pop	r14
    7636:	df 90       	pop	r13
    7638:	cf 90       	pop	r12
    763a:	bf 90       	pop	r11
    763c:	af 90       	pop	r10
    763e:	9f 90       	pop	r9
    7640:	8f 90       	pop	r8
    7642:	7f 90       	pop	r7
    7644:	6f 90       	pop	r6
    7646:	5f 90       	pop	r5
    7648:	4f 90       	pop	r4
    764a:	08 95       	ret

0000764c <udp_generate_packet>:
// - call nic_send_packet(buffer) to TX
void udp_generate_packet(unsigned char *buffer, 
                         uint32_t *dest_ip, 
                         unsigned char *dest_mac, unsigned int source_port, 
                         unsigned int dest_port, unsigned int data_length){
    764c:	4f 92       	push	r4
    764e:	5f 92       	push	r5
    7650:	6f 92       	push	r6
    7652:	7f 92       	push	r7
    7654:	8f 92       	push	r8
    7656:	9f 92       	push	r9
    7658:	af 92       	push	r10
    765a:	bf 92       	push	r11
    765c:	cf 92       	push	r12
    765e:	df 92       	push	r13
    7660:	ef 92       	push	r14
    7662:	ff 92       	push	r15
    7664:	0f 93       	push	r16
    7666:	1f 93       	push	r17
    7668:	5c 01       	movw	r10, r24
    766a:	39 01       	movw	r6, r18
    766c:	28 01       	movw	r4, r16
    766e:	47 01       	movw	r8, r14

	//datalength = udpheader + datalen
	data_length = data_length + 8;
    7670:	88 e0       	ldi	r24, 0x08	; 8
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	88 0e       	add	r8, r24
    7676:	99 1e       	adc	r9, r25

	//generate an ip packet (includes ethernet header)
	ip_generate_packet(buffer, dest_ip, dest_mac, source_port, dest_port, IP_PROTOCOL_UDP, data_length);
    7678:	64 01       	movw	r12, r8
    767a:	31 e1       	ldi	r19, 0x11	; 17
    767c:	e3 2e       	mov	r14, r19
    767e:	93 01       	movw	r18, r6
    7680:	c5 01       	movw	r24, r10
    7682:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <ip_generate_packet>

	//setup soure/dest port:
	buffer[IP_POS_DATA + 0] = (source_port>>8);
    7686:	87 2d       	mov	r24, r7
    7688:	99 27       	eor	r25, r25
    768a:	f5 01       	movw	r30, r10
    768c:	82 a3       	std	Z+34, r24	; 0x22
	buffer[IP_POS_DATA + 1] = (source_port   );
    768e:	63 a2       	std	Z+35, r6	; 0x23
	buffer[IP_POS_DATA + 2] = (  dest_port>>8);
    7690:	85 2d       	mov	r24, r5
    7692:	99 27       	eor	r25, r25
    7694:	84 a3       	std	Z+36, r24	; 0x24
	buffer[IP_POS_DATA + 3] = (  dest_port   );
    7696:	45 a2       	std	Z+37, r4	; 0x25

	//setup data length of udp
	buffer[IP_POS_DATA + 4] = (data_length>>8);
    7698:	89 2d       	mov	r24, r9
    769a:	99 27       	eor	r25, r25
    769c:	86 a3       	std	Z+38, r24	; 0x26
	buffer[IP_POS_DATA + 5] = (data_length   );
    769e:	87 a2       	std	Z+39, r8	; 0x27
	
	//store checksum: (0x0000 -> checksum disable)
	buffer[IP_POS_DATA + 6] = 0x00;
    76a0:	10 a6       	std	Z+40, r1	; 0x28
	buffer[IP_POS_DATA + 7] = 0x00;
    76a2:	11 a6       	std	Z+41, r1	; 0x29
    76a4:	1f 91       	pop	r17
    76a6:	0f 91       	pop	r16
    76a8:	ff 90       	pop	r15
    76aa:	ef 90       	pop	r14
    76ac:	df 90       	pop	r13
    76ae:	cf 90       	pop	r12
    76b0:	bf 90       	pop	r11
    76b2:	af 90       	pop	r10
    76b4:	9f 90       	pop	r9
    76b6:	8f 90       	pop	r8
    76b8:	7f 90       	pop	r7
    76ba:	6f 90       	pop	r6
    76bc:	5f 90       	pop	r5
    76be:	4f 90       	pop	r4
    76c0:	08 95       	ret

000076c2 <ip_generate_packet>:
                        uint32_t *dest_ip,
                        unsigned char *dest_mac, 
                        unsigned int source_port, unsigned int dest_port, 
                        unsigned char ip_packettype,
                        unsigned int data_length){
    76c2:	cf 92       	push	r12
    76c4:	df 92       	push	r13
    76c6:	ef 92       	push	r14
    76c8:	cf 93       	push	r28
    76ca:	df 93       	push	r29
    76cc:	ec 01       	movw	r28, r24
    76ce:	96 01       	movw	r18, r12
	unsigned int res16;
	unsigned int c;
	
	//datalength = datalength + ip header:
	data_length = data_length + (IP_HEADER_LENGTH<<2);
    76d0:	2c 5e       	subi	r18, 0xEC	; 236
    76d2:	3f 4f       	sbci	r19, 0xFF	; 255
    76d4:	fc 01       	movw	r30, r24
    76d6:	a7 e4       	ldi	r26, 0x47	; 71
    76d8:	ca 2e       	mov	r12, r26
    76da:	a7 e0       	ldi	r26, 0x07	; 7
    76dc:	da 2e       	mov	r13, r26
	
	//generate ethernet packet:
	for (c=0; c<6; c++){
		//set destination mac address:
		buffer[c]   = dest_mac[c];
    76de:	da 01       	movw	r26, r20
    76e0:	8d 91       	ld	r24, X+
    76e2:	ad 01       	movw	r20, r26
    76e4:	80 83       	st	Z, r24
		//set source mac address:
		buffer[c+6] = nic_mac[c];
    76e6:	d6 01       	movw	r26, r12
    76e8:	8d 91       	ld	r24, X+
    76ea:	6d 01       	movw	r12, r26
    76ec:	86 83       	std	Z+6, r24	; 0x06
    76ee:	31 96       	adiw	r30, 0x01	; 1
    76f0:	bd e4       	ldi	r27, 0x4D	; 77
    76f2:	cb 16       	cp	r12, r27
    76f4:	b7 e0       	ldi	r27, 0x07	; 7
    76f6:	db 06       	cpc	r13, r27
    76f8:	91 f7       	brne	.-28     	; 0x76de <ip_generate_packet+0x1c>
	}

	//set ethernet packettype to IP
	buffer[12] = 0x08;
    76fa:	88 e0       	ldi	r24, 0x08	; 8
    76fc:	8c 87       	std	Y+12, r24	; 0x0c
	buffer[13] = 0x00;
    76fe:	1d 86       	std	Y+13, r1	; 0x0d

	//now generate ip packet:

	//set ipv4 & set length:
	buffer[IP_POS_VERSION] = IP_V4 | IP_HEADER_LENGTH;
    7700:	85 e4       	ldi	r24, 0x45	; 69
    7702:	8e 87       	std	Y+14, r24	; 0x0e

	//set TOS to default 0x00 (?)
	buffer[IP_POS_TOS] = 0x00;
    7704:	1f 86       	std	Y+15, r1	; 0x0f

	//set total length:
	buffer[IP_POS_PKTLEN+0] = (data_length>>8)&0xFF;
    7706:	83 2f       	mov	r24, r19
    7708:	99 27       	eor	r25, r25
    770a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[IP_POS_PKTLEN+1] = (data_length   )&0xFF;
    770c:	29 8b       	std	Y+17, r18	; 0x11

	//set packet identification
	buffer[IP_POS_IDENTIFICATIION+0] = (ip_identification>>8)&0xFF;
    770e:	80 91 7b 07 	lds	r24, 0x077B
    7712:	90 91 7c 07 	lds	r25, 0x077C
    7716:	89 2f       	mov	r24, r25
    7718:	99 27       	eor	r25, r25
    771a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[IP_POS_IDENTIFICATIION+1] = (ip_identification   )&0xFF;
    771c:	80 91 7b 07 	lds	r24, 0x077B
    7720:	90 91 7c 07 	lds	r25, 0x077C
    7724:	8b 8b       	std	Y+19, r24	; 0x13
	ip_identification++;
    7726:	80 91 7b 07 	lds	r24, 0x077B
    772a:	90 91 7c 07 	lds	r25, 0x077C
    772e:	01 96       	adiw	r24, 0x01	; 1
    7730:	90 93 7c 07 	sts	0x077C, r25
    7734:	80 93 7b 07 	sts	0x077B, r24

	//set dont fragment flags:
	buffer[IP_POS_FRAGMENTATION_FLAGS+0] = 0x40;
    7738:	80 e4       	ldi	r24, 0x40	; 64
    773a:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[IP_POS_FRAGMENTATION_FLAGS+1] = 0x00;
    773c:	1d 8a       	std	Y+21, r1	; 0x15
	
	//set TTL to 128
	buffer[IP_POS_TTL] = 0x80;
    773e:	80 e8       	ldi	r24, 0x80	; 128
    7740:	8e 8b       	std	Y+22, r24	; 0x16
	
	//set ip packettype to tcp/udp/...
	buffer[IP_POS_IPTYPE] = ip_packettype;
    7742:	ef 8a       	std	Y+23, r14	; 0x17

	//set dest ip:
	nic_ip_to_buffer(&buffer[IP_POS_DST_IP], *dest_ip);
    7744:	fb 01       	movw	r30, r22
    7746:	40 81       	ld	r20, Z
    7748:	51 81       	ldd	r21, Z+1	; 0x01
    774a:	62 81       	ldd	r22, Z+2	; 0x02
    774c:	73 81       	ldd	r23, Z+3	; 0x03
    774e:	ce 01       	movw	r24, r28
    7750:	4e 96       	adiw	r24, 0x1e	; 30
    7752:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>
	
	//set source ip:
	nic_ip_to_buffer(&buffer[IP_POS_SRC_IP], nic_ip);
    7756:	40 91 4d 07 	lds	r20, 0x074D
    775a:	50 91 4e 07 	lds	r21, 0x074E
    775e:	60 91 4f 07 	lds	r22, 0x074F
    7762:	70 91 50 07 	lds	r23, 0x0750
    7766:	ce 01       	movw	r24, r28
    7768:	4a 96       	adiw	r24, 0x1a	; 26
    776a:	0e 94 01 39 	call	0x7202	; 0x7202 <nic_ip_to_buffer>

	//set checksum to zero before running crc calc:
	buffer[IP_POS_CHECKSUM+0] = 0x00;
    776e:	18 8e       	std	Y+24, r1	; 0x18
	buffer[IP_POS_CHECKSUM+1] = 0x00;
    7770:	19 8e       	std	Y+25, r1	; 0x19

	//calculate checksum:
	res16 = nethelp_checksum(&buffer[IP_POS_VERSION], IP_HEADER_LENGTH<<2, 0);
    7772:	20 e0       	ldi	r18, 0x00	; 0
    7774:	30 e0       	ldi	r19, 0x00	; 0
    7776:	40 e0       	ldi	r20, 0x00	; 0
    7778:	50 e0       	ldi	r21, 0x00	; 0
    777a:	64 e1       	ldi	r22, 0x14	; 20
    777c:	70 e0       	ldi	r23, 0x00	; 0
    777e:	2e 96       	adiw	r28, 0x0e	; 14
    7780:	ce 01       	movw	r24, r28
    7782:	2e 97       	sbiw	r28, 0x0e	; 14
    7784:	0e 94 77 38 	call	0x70ee	; 0x70ee <nethelp_checksum>
	
	//store checksum:
	buffer[IP_POS_CHECKSUM+0] = (res16>>8)&0xFF;
    7788:	29 2f       	mov	r18, r25
    778a:	33 27       	eor	r19, r19
    778c:	28 8f       	std	Y+24, r18	; 0x18
	buffer[IP_POS_CHECKSUM+1] = res16 & 0xFF;
    778e:	89 8f       	std	Y+25, r24	; 0x19
    7790:	df 91       	pop	r29
    7792:	cf 91       	pop	r28
    7794:	ef 90       	pop	r14
    7796:	df 90       	pop	r13
    7798:	cf 90       	pop	r12
    779a:	08 95       	ret

0000779c <ntp_client_init>:

uint32_t ntp_client_server_ip;
char ntp_client_call_again;

void ntp_client_init(){
    779c:	81 e4       	ldi	r24, 0x41	; 65
    779e:	9c e1       	ldi	r25, 0x1C	; 28
    77a0:	ae e8       	ldi	r26, 0x8E	; 142
    77a2:	b0 e4       	ldi	r27, 0x40	; 64
    77a4:	80 93 7e 07 	sts	0x077E, r24
    77a8:	90 93 7f 07 	sts	0x077F, r25
    77ac:	a0 93 80 07 	sts	0x0780, r26
    77b0:	b0 93 81 07 	sts	0x0781, r27
	ntp_client_server_ip = NTP_SERVER_IP_ADDRESS;
	ntp_client_call_again = 0;
    77b4:	10 92 7d 07 	sts	0x077D, r1
    77b8:	08 95       	ret

000077ba <ntp_client_timestamp_to_time>:
}

void ntp_client_send_request(unsigned char *buffer){
	unsigned int i;

	//set NTP flags (client)
	buffer[NTP_POS_FLAGS] = 0xE3;

	//set peer clock stratum to unspecified
	buffer[NTP_POS_STRATUM] = 0x00;

	//set poll intervall to 4 (=16sec)
	buffer[NTP_POS_POLL_INTERVAL] = 0x04;

	//set precision (??)
	buffer[NTP_POS_PRECISION] = 0xFA;

	//clear data buffer:
	//-> we only need to set some values because many data is 0x00
	for(i=NTP_POS_ROOT_DELAY; i<NTP_POS_LAST_DATA; i++)
		buffer[i] = 0x00;

	//set root delay to 1s -> 0x00 0x01 0x00 0x00
	buffer[NTP_POS_ROOT_DELAY+1] = 0x01; //rest is zero, see above

	//set clock dispersion to 1s -> 0x00 0x01 0x00 0x00
	buffer[NTP_POS_CLOCK_DISP+1] = 0x01; //rest is zero, see above

	//reference clock id = 0x00 0x00 0x00 0x00
	//reference clock update time NULL = 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	//originate timestamp         NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	//receive timestamp           NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	
	//tx timestamp:
	//send NULL ... MAYBE add timestamp calc from localclock here
	//tx timestamp           NULL= 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

	//generate an udp packet:
	unsigned char *dest_mac;
	unsigned int arp_idx;
	unsigned long *server_ip;

	//target ip in the same network ?!
	if ((ntp_client_server_ip & NIC_IP_NETMASK) != (nic_ip & NIC_IP_NETMASK)){
		#if NTP_CLIENT_DEBUG
		softuart_puts_progmem("NTP : ntp server ");
		softuart_put_ip(ntp_client_server_ip);
		softuart_puts_progmem(" outside home net -> use gateway\r\n");
		#endif
		server_ip = &nic_gateway_ip;
	}else{
		server_ip = &ntp_client_server_ip;
	}
	
	arp_idx = arp_search_by_ip(*server_ip);

	if (arp_idx == -1){
		//target ip (gateway) unknown
		//->send arp request and exit,
		//this is called later again and we hopefully know the mac then
		arp_send_request(buffer, server_ip);
		
		//ntp client must be called again after we finished the arp comm!
		ntp_client_call_again = 1;
		return;
	}
	//no need to be called again, we know the mac address of gateway
	ntp_client_call_again = 0;

	dest_mac = (arp_table[arp_idx].mac);

	/*dest_mac[0] = 0x00;
	dest_mac[1] = 0xE0;
	dest_mac[2] = 0x4C;
	dest_mac[3] = 0x6A;
	dest_mac[4] = 0xBF;
	dest_mac[5] = 0xDE;*/

	udp_generate_packet(buffer, &ntp_client_server_ip, dest_mac , IP_PORT_NTP_CLIENT, IP_PORT_NTP, NTP_DATALENGTH);

	//send packet:
	nic_send_packet(buffer, 14+(IP_HEADER_LENGTH<<2)+8+NTP_DATALENGTH);
}

//decode an ntp packet & extract time data
//this is called after ip+udp decidet this packet is valid & is for us.
//-> ip+udp checks are done before (!)
void ntp_client_decode_packet(unsigned char *buffer, unsigned int len){
	unsigned long timestamp;
	//check for valid flags, should be:
	//- NTP Version 4
	//- Server Mode
	//-> ignore Leap indicator
	if ((buffer[NTP_POS_FLAGS]&0x3F) != NTP_FLAG_NTP4_SERVER)
		return;

	//extract timestamp
	//NOTE: because we do not really need the exact clock, we
	//      only use the TX timestamp and hope that the transfer
	//      did not take too long -> maybe fix this later
	//      (and we dont use the microseconds...)
	timestamp = buffer[NTP_POS_TX_TIMESTAMP+0]<<8;
	timestamp = (timestamp + buffer[NTP_POS_TX_TIMESTAMP+1])<<8;
	timestamp = (timestamp + buffer[NTP_POS_TX_TIMESTAMP+2])<<8;
	timestamp = (timestamp + buffer[NTP_POS_TX_TIMESTAMP+3]);

	#if NTP_CLIENT_DEBUG
	softuart_puts_progmem("NTP : timestamp is ");
	for(int i=0; i<4; i++){
		softuart_put_uint8(buffer[0x52+i]);
		softuart_putc(' ');
	}
	softuart_putnewline();
	#endif
	unsigned char date[6];
	ntp_client_timestamp_to_time(timestamp, date);

	#if NTP_CLIENT_DEBUG
	//german format !
	softuart_puts_progmem("DATE: ");
	softuart_put_uint8(date[NTP_TIME_DAY]);
	softuart_putc('.');
	softuart_put_uint8(date[NTP_TIME_MONTH]);
	softuart_putc('.');
	softuart_put_uint16(1900 + date[NTP_TIME_YEAR]);
	
	softuart_puts_progmem(" TIME: ");
	softuart_put_uint8(date[NTP_TIME_HOUR]);
	softuart_putc(':');
	softuart_put_uint8(date[NTP_TIME_MIN]);
	softuart_putc(':');
	softuart_put_uint8(date[NTP_TIME_SEC]);
	softuart_puts_progmem(" (UTC!)");
	softuart_putnewline();
	#endif

	clock_do();
	clock[CLOCK_HOUR] = date[NTP_TIME_HOUR]+2;
	clock[CLOCK_MIN] = date[NTP_TIME_MIN];
	clock[CLOCK_SEC] = date[NTP_TIME_SEC];	
}

//lookup table
PROGMEM char NTP_CLIENT_MONTH_TO_DAYS[12] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

//convert unix timestamp to date/time.
//returns: year,month,day,hour,min,sec (year ist realyear-1970)
//
//inspired by code posted on mikrocontroller.net by peter dannegger:
// see http://www.mikrocontroller.net/forum/read-4-140631.html#new
void ntp_client_timestamp_to_time(unsigned long timestamp, unsigned char *time){
    77ba:	ef 92       	push	r14
    77bc:	ff 92       	push	r15
    77be:	0f 93       	push	r16
    77c0:	1f 93       	push	r17
    77c2:	cf 93       	push	r28
    77c4:	df 93       	push	r29
    77c6:	7b 01       	movw	r14, r22
    77c8:	8c 01       	movw	r16, r24
    77ca:	ea 01       	movw	r28, r20
	unsigned char tmp;
	unsigned char tmp_year;
	unsigned int tmp_day;
	unsigned char leap400;

	//calculate seconds:
	time[NTP_TIME_SEC] = timestamp % 60;
    77cc:	2c e3       	ldi	r18, 0x3C	; 60
    77ce:	30 e0       	ldi	r19, 0x00	; 0
    77d0:	40 e0       	ldi	r20, 0x00	; 0
    77d2:	50 e0       	ldi	r21, 0x00	; 0
    77d4:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    77d8:	6d 83       	std	Y+5, r22	; 0x05
	timestamp = timestamp / 60;
    77da:	c8 01       	movw	r24, r16
    77dc:	b7 01       	movw	r22, r14
    77de:	2c e3       	ldi	r18, 0x3C	; 60
    77e0:	30 e0       	ldi	r19, 0x00	; 0
    77e2:	40 e0       	ldi	r20, 0x00	; 0
    77e4:	50 e0       	ldi	r21, 0x00	; 0
    77e6:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    77ea:	79 01       	movw	r14, r18
    77ec:	8a 01       	movw	r16, r20

	//calculate minutes:
	time[NTP_TIME_MIN] = timestamp % 60;
    77ee:	ca 01       	movw	r24, r20
    77f0:	b9 01       	movw	r22, r18
    77f2:	2c e3       	ldi	r18, 0x3C	; 60
    77f4:	30 e0       	ldi	r19, 0x00	; 0
    77f6:	40 e0       	ldi	r20, 0x00	; 0
    77f8:	50 e0       	ldi	r21, 0x00	; 0
    77fa:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    77fe:	6c 83       	std	Y+4, r22	; 0x04
	timestamp = timestamp / 60;
    7800:	c8 01       	movw	r24, r16
    7802:	b7 01       	movw	r22, r14
    7804:	2c e3       	ldi	r18, 0x3C	; 60
    7806:	30 e0       	ldi	r19, 0x00	; 0
    7808:	40 e0       	ldi	r20, 0x00	; 0
    780a:	50 e0       	ldi	r21, 0x00	; 0
    780c:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    7810:	79 01       	movw	r14, r18
    7812:	8a 01       	movw	r16, r20

	//calculate hours:
	time[NTP_TIME_HOUR] = timestamp % 24;
    7814:	ca 01       	movw	r24, r20
    7816:	b9 01       	movw	r22, r18
    7818:	28 e1       	ldi	r18, 0x18	; 24
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	40 e0       	ldi	r20, 0x00	; 0
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    7824:	6b 83       	std	Y+3, r22	; 0x03
	timestamp = timestamp / 24;
    7826:	c8 01       	movw	r24, r16
    7828:	b7 01       	movw	r22, r14
    782a:	28 e1       	ldi	r18, 0x18	; 24
    782c:	30 e0       	ldi	r19, 0x00	; 0
    782e:	40 e0       	ldi	r20, 0x00	; 0
    7830:	50 e0       	ldi	r21, 0x00	; 0
    7832:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__udivmodsi4>
    7836:	04 e0       	ldi	r16, 0x04	; 4
    7838:	e0 e0       	ldi	r30, 0x00	; 0
    783a:	f0 e0       	ldi	r31, 0x00	; 0

	tmp_year = 0;
  leap400 = 4;

	//find day of year:
	while(1){
		tmp_day = 365;

		//leap year ?! (only check 3yr exception)
		//FIXME: add 400yr exception handling !
		if((tmp_year & 0x03)==0){
    783c:	1e 2f       	mov	r17, r30
    783e:	cf 01       	movw	r24, r30
    7840:	83 70       	andi	r24, 0x03	; 3
    7842:	90 70       	andi	r25, 0x00	; 0
    7844:	89 2b       	or	r24, r25
    7846:	41 f4       	brne	.+16     	; 0x7858 <ntp_client_timestamp_to_time+0x9e>
			tmp_day = 365 + 1; //yes!
			
			//100/400 yr exception:
			if(tmp_year == 0 || tmp_year == 100 || tmp_year == 200) //100yr exc
    7848:	ee 23       	and	r30, r30
    784a:	21 f0       	breq	.+8      	; 0x7854 <ntp_client_timestamp_to_time+0x9a>
    784c:	e4 36       	cpi	r30, 0x64	; 100
    784e:	11 f0       	breq	.+4      	; 0x7854 <ntp_client_timestamp_to_time+0x9a>
    7850:	e8 3c       	cpi	r30, 0xC8	; 200
    7852:	29 f4       	brne	.+10     	; 0x785e <ntp_client_timestamp_to_time+0xa4>
				if (--leap400)
    7854:	01 50       	subi	r16, 0x01	; 1
    7856:	19 f0       	breq	.+6      	; 0x785e <ntp_client_timestamp_to_time+0xa4>
    7858:	6d e6       	ldi	r22, 0x6D	; 109
    785a:	71 e0       	ldi	r23, 0x01	; 1
    785c:	02 c0       	rjmp	.+4      	; 0x7862 <ntp_client_timestamp_to_time+0xa8>
    785e:	6e e6       	ldi	r22, 0x6E	; 110
    7860:	71 e0       	ldi	r23, 0x01	; 1
					tmp_day = 365;
		}

		//is the rest smaller than the next whole year ? 
		if( timestamp < tmp_day )
    7862:	cb 01       	movw	r24, r22
    7864:	aa 27       	eor	r26, r26
    7866:	bb 27       	eor	r27, r27
    7868:	31 96       	adiw	r30, 0x01	; 1
    786a:	28 17       	cp	r18, r24
    786c:	39 07       	cpc	r19, r25
    786e:	4a 07       	cpc	r20, r26
    7870:	5b 07       	cpc	r21, r27
    7872:	28 f0       	brcs	.+10     	; 0x787e <ntp_client_timestamp_to_time+0xc4>
			break; //yes -> exit

		//substract daycount of current year from timestamp
		timestamp -= tmp_day;
    7874:	28 1b       	sub	r18, r24
    7876:	39 0b       	sbc	r19, r25
    7878:	4a 0b       	sbc	r20, r26
    787a:	5b 0b       	sbc	r21, r27
    787c:	df cf       	rjmp	.-66     	; 0x783c <ntp_client_timestamp_to_time+0x82>
		
		//increase year:
		tmp_year++;
	}
	
	//tmp_year is now (Ynow-1900)
	time[NTP_TIME_YEAR] = tmp_year;
    787e:	18 83       	st	Y, r17

	//timestamp is now how many days of the next year have
	//passed. -> calc month & day
	if ((tmp_day == 365) && timestamp > (30+28))
    7880:	6d 56       	subi	r22, 0x6D	; 109
    7882:	71 40       	sbci	r23, 0x01	; 1
    7884:	49 f4       	brne	.+18     	; 0x7898 <ntp_client_timestamp_to_time+0xde>
    7886:	2b 33       	cpi	r18, 0x3B	; 59
    7888:	31 05       	cpc	r19, r1
    788a:	41 05       	cpc	r20, r1
    788c:	51 05       	cpc	r21, r1
    788e:	20 f0       	brcs	.+8      	; 0x7898 <ntp_client_timestamp_to_time+0xde>
		timestamp++; //no leap year ! -> skip 29th feb
    7890:	2f 5f       	subi	r18, 0xFF	; 255
    7892:	3f 4f       	sbci	r19, 0xFF	; 255
    7894:	4f 4f       	sbci	r20, 0xFF	; 255
    7896:	5f 4f       	sbci	r21, 0xFF	; 255
    7898:	11 e0       	ldi	r17, 0x01	; 1
    789a:	64 e9       	ldi	r22, 0x94	; 148
    789c:	71 e2       	ldi	r23, 0x21	; 33
    789e:	fb 01       	movw	r30, r22

	//31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
	//calculate month:
	PGM_P mtd_ptr = NTP_CLIENT_MONTH_TO_DAYS;
	for(tmp=1; tmp<12; tmp++){
		timestamp -= pgm_read_byte(mtd_ptr++);
    78a0:	6f 5f       	subi	r22, 0xFF	; 255
    78a2:	7f 4f       	sbci	r23, 0xFF	; 255
    78a4:	e4 91       	lpm	r30, Z
    78a6:	2e 1b       	sub	r18, r30
    78a8:	31 09       	sbc	r19, r1
    78aa:	41 09       	sbc	r20, r1
    78ac:	51 09       	sbc	r21, r1
		if (timestamp < pgm_read_byte(mtd_ptr))
    78ae:	fb 01       	movw	r30, r22
    78b0:	84 91       	lpm	r24, Z
    78b2:	99 27       	eor	r25, r25
    78b4:	aa 27       	eor	r26, r26
    78b6:	bb 27       	eor	r27, r27
    78b8:	28 17       	cp	r18, r24
    78ba:	39 07       	cpc	r19, r25
    78bc:	4a 07       	cpc	r20, r26
    78be:	5b 07       	cpc	r21, r27
    78c0:	18 f0       	brcs	.+6      	; 0x78c8 <ntp_client_timestamp_to_time+0x10e>
    78c2:	1f 5f       	subi	r17, 0xFF	; 255
    78c4:	1c 30       	cpi	r17, 0x0C	; 12
    78c6:	59 f7       	brne	.-42     	; 0x789e <ntp_client_timestamp_to_time+0xe4>
			break;
	}
	
	//days are now in timestamp
	time[NTP_TIME_DAY] = timestamp;
    78c8:	2a 83       	std	Y+2, r18	; 0x02

	//current month is in tmp
	time[NTP_TIME_MONTH] = tmp+1;
    78ca:	1f 5f       	subi	r17, 0xFF	; 255
    78cc:	19 83       	std	Y+1, r17	; 0x01
    78ce:	df 91       	pop	r29
    78d0:	cf 91       	pop	r28
    78d2:	1f 91       	pop	r17
    78d4:	0f 91       	pop	r16
    78d6:	ff 90       	pop	r15
    78d8:	ef 90       	pop	r14
    78da:	08 95       	ret

000078dc <ntp_client_decode_packet>:
    78dc:	cf 93       	push	r28
    78de:	df 93       	push	r29
    78e0:	cd b7       	in	r28, 0x3d	; 61
    78e2:	de b7       	in	r29, 0x3e	; 62
    78e4:	26 97       	sbiw	r28, 0x06	; 6
    78e6:	0f b6       	in	r0, 0x3f	; 63
    78e8:	f8 94       	cli
    78ea:	de bf       	out	0x3e, r29	; 62
    78ec:	0f be       	out	0x3f, r0	; 63
    78ee:	cd bf       	out	0x3d, r28	; 61
    78f0:	fc 01       	movw	r30, r24
    78f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    78f4:	8f 73       	andi	r24, 0x3F	; 63
    78f6:	84 32       	cpi	r24, 0x24	; 36
    78f8:	91 f5       	brne	.+100    	; 0x795e <ntp_client_decode_packet+0x82>
    78fa:	ee 5a       	subi	r30, 0xAE	; 174
    78fc:	ff 4f       	sbci	r31, 0xFF	; 255
    78fe:	61 91       	ld	r22, Z+
    7900:	77 27       	eor	r23, r23
    7902:	76 2f       	mov	r23, r22
    7904:	66 27       	eor	r22, r22
    7906:	88 27       	eor	r24, r24
    7908:	77 fd       	sbrc	r23, 7
    790a:	80 95       	com	r24
    790c:	98 2f       	mov	r25, r24
    790e:	21 91       	ld	r18, Z+
    7910:	62 0f       	add	r22, r18
    7912:	71 1d       	adc	r23, r1
    7914:	81 1d       	adc	r24, r1
    7916:	91 1d       	adc	r25, r1
    7918:	98 2f       	mov	r25, r24
    791a:	87 2f       	mov	r24, r23
    791c:	76 2f       	mov	r23, r22
    791e:	66 27       	eor	r22, r22
    7920:	21 91       	ld	r18, Z+
    7922:	62 0f       	add	r22, r18
    7924:	71 1d       	adc	r23, r1
    7926:	81 1d       	adc	r24, r1
    7928:	91 1d       	adc	r25, r1
    792a:	98 2f       	mov	r25, r24
    792c:	87 2f       	mov	r24, r23
    792e:	76 2f       	mov	r23, r22
    7930:	66 27       	eor	r22, r22
    7932:	20 81       	ld	r18, Z
    7934:	62 0f       	add	r22, r18
    7936:	71 1d       	adc	r23, r1
    7938:	81 1d       	adc	r24, r1
    793a:	91 1d       	adc	r25, r1
    793c:	ae 01       	movw	r20, r28
    793e:	4f 5f       	subi	r20, 0xFF	; 255
    7940:	5f 4f       	sbci	r21, 0xFF	; 255
    7942:	0e 94 dd 3b 	call	0x77ba	; 0x77ba <ntp_client_timestamp_to_time>
    7946:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <clock_do>
    794a:	8c 81       	ldd	r24, Y+4	; 0x04
    794c:	8e 5f       	subi	r24, 0xFE	; 254
    794e:	80 93 40 07 	sts	0x0740, r24
    7952:	8d 81       	ldd	r24, Y+5	; 0x05
    7954:	80 93 41 07 	sts	0x0741, r24
    7958:	8e 81       	ldd	r24, Y+6	; 0x06
    795a:	80 93 42 07 	sts	0x0742, r24
    795e:	26 96       	adiw	r28, 0x06	; 6
    7960:	0f b6       	in	r0, 0x3f	; 63
    7962:	f8 94       	cli
    7964:	de bf       	out	0x3e, r29	; 62
    7966:	0f be       	out	0x3f, r0	; 63
    7968:	cd bf       	out	0x3d, r28	; 61
    796a:	df 91       	pop	r29
    796c:	cf 91       	pop	r28
    796e:	08 95       	ret

00007970 <ntp_client_send_request>:
    7970:	ef 92       	push	r14
    7972:	ff 92       	push	r15
    7974:	0f 93       	push	r16
    7976:	1f 93       	push	r17
    7978:	cf 93       	push	r28
    797a:	df 93       	push	r29
    797c:	ec 01       	movw	r28, r24
    797e:	83 ee       	ldi	r24, 0xE3	; 227
    7980:	8a a7       	std	Y+42, r24	; 0x2a
    7982:	1b a6       	std	Y+43, r1	; 0x2b
    7984:	84 e0       	ldi	r24, 0x04	; 4
    7986:	8c a7       	std	Y+44, r24	; 0x2c
    7988:	8a ef       	ldi	r24, 0xFA	; 250
    798a:	8d a7       	std	Y+45, r24	; 0x2d
    798c:	fe 01       	movw	r30, r28
    798e:	be 96       	adiw	r30, 0x2e	; 46
    7990:	ce 01       	movw	r24, r28
    7992:	86 5a       	subi	r24, 0xA6	; 166
    7994:	9f 4f       	sbci	r25, 0xFF	; 255
    7996:	11 92       	st	Z+, r1
    7998:	e8 17       	cp	r30, r24
    799a:	f9 07       	cpc	r31, r25
    799c:	e1 f7       	brne	.-8      	; 0x7996 <ntp_client_send_request+0x26>
    799e:	81 e0       	ldi	r24, 0x01	; 1
    79a0:	8f a7       	std	Y+47, r24	; 0x2f
    79a2:	8b ab       	std	Y+51, r24	; 0x33
    79a4:	20 91 7e 07 	lds	r18, 0x077E
    79a8:	30 91 7f 07 	lds	r19, 0x077F
    79ac:	40 91 80 07 	lds	r20, 0x0780
    79b0:	50 91 81 07 	lds	r21, 0x0781
    79b4:	20 70       	andi	r18, 0x00	; 0
    79b6:	80 91 4d 07 	lds	r24, 0x074D
    79ba:	90 91 4e 07 	lds	r25, 0x074E
    79be:	a0 91 4f 07 	lds	r26, 0x074F
    79c2:	b0 91 50 07 	lds	r27, 0x0750
    79c6:	80 70       	andi	r24, 0x00	; 0
    79c8:	28 17       	cp	r18, r24
    79ca:	39 07       	cpc	r19, r25
    79cc:	4a 07       	cpc	r20, r26
    79ce:	5b 07       	cpc	r21, r27
    79d0:	19 f0       	breq	.+6      	; 0x79d8 <ntp_client_send_request+0x68>
    79d2:	03 e4       	ldi	r16, 0x43	; 67
    79d4:	17 e0       	ldi	r17, 0x07	; 7
    79d6:	02 c0       	rjmp	.+4      	; 0x79dc <ntp_client_send_request+0x6c>
    79d8:	0e e7       	ldi	r16, 0x7E	; 126
    79da:	17 e0       	ldi	r17, 0x07	; 7
    79dc:	f8 01       	movw	r30, r16
    79de:	60 81       	ld	r22, Z
    79e0:	71 81       	ldd	r23, Z+1	; 0x01
    79e2:	82 81       	ldd	r24, Z+2	; 0x02
    79e4:	93 81       	ldd	r25, Z+3	; 0x03
    79e6:	0e 94 e8 39 	call	0x73d0	; 0x73d0 <arp_search_by_ip>
    79ea:	ac 01       	movw	r20, r24
    79ec:	ff ef       	ldi	r31, 0xFF	; 255
    79ee:	8f 3f       	cpi	r24, 0xFF	; 255
    79f0:	9f 07       	cpc	r25, r31
    79f2:	41 f4       	brne	.+16     	; 0x7a04 <ntp_client_send_request+0x94>
    79f4:	b8 01       	movw	r22, r16
    79f6:	ce 01       	movw	r24, r28
    79f8:	0e 94 01 3a 	call	0x7402	; 0x7402 <arp_send_request>
    79fc:	81 e0       	ldi	r24, 0x01	; 1
    79fe:	80 93 7d 07 	sts	0x077D, r24
    7a02:	1e c0       	rjmp	.+60     	; 0x7a40 <ntp_client_send_request+0xd0>
    7a04:	10 92 7d 07 	sts	0x077D, r1
    7a08:	e3 e0       	ldi	r30, 0x03	; 3
    7a0a:	88 0f       	add	r24, r24
    7a0c:	99 1f       	adc	r25, r25
    7a0e:	ea 95       	dec	r30
    7a10:	e1 f7       	brne	.-8      	; 0x7a0a <ntp_client_send_request+0x9a>
    7a12:	44 0f       	add	r20, r20
    7a14:	55 1f       	adc	r21, r21
    7a16:	48 0f       	add	r20, r24
    7a18:	59 1f       	adc	r21, r25
    7a1a:	49 5a       	subi	r20, 0xA9	; 169
    7a1c:	58 4f       	sbci	r21, 0xF8	; 248
    7a1e:	60 e3       	ldi	r22, 0x30	; 48
    7a20:	e6 2e       	mov	r14, r22
    7a22:	f1 2c       	mov	r15, r1
    7a24:	0b e7       	ldi	r16, 0x7B	; 123
    7a26:	10 e0       	ldi	r17, 0x00	; 0
    7a28:	2b eb       	ldi	r18, 0xBB	; 187
    7a2a:	3c e9       	ldi	r19, 0x9C	; 156
    7a2c:	6e e7       	ldi	r22, 0x7E	; 126
    7a2e:	77 e0       	ldi	r23, 0x07	; 7
    7a30:	ce 01       	movw	r24, r28
    7a32:	0e 94 26 3b 	call	0x764c	; 0x764c <udp_generate_packet>
    7a36:	6a e5       	ldi	r22, 0x5A	; 90
    7a38:	70 e0       	ldi	r23, 0x00	; 0
    7a3a:	ce 01       	movw	r24, r28
    7a3c:	0e 94 57 39 	call	0x72ae	; 0x72ae <nic_send_packet>
    7a40:	df 91       	pop	r29
    7a42:	cf 91       	pop	r28
    7a44:	1f 91       	pop	r17
    7a46:	0f 91       	pop	r16
    7a48:	ff 90       	pop	r15
    7a4a:	ef 90       	pop	r14
    7a4c:	08 95       	ret

00007a4e <__mulsi3>:
    7a4e:	62 9f       	mul	r22, r18
    7a50:	d0 01       	movw	r26, r0
    7a52:	73 9f       	mul	r23, r19
    7a54:	f0 01       	movw	r30, r0
    7a56:	82 9f       	mul	r24, r18
    7a58:	e0 0d       	add	r30, r0
    7a5a:	f1 1d       	adc	r31, r1
    7a5c:	64 9f       	mul	r22, r20
    7a5e:	e0 0d       	add	r30, r0
    7a60:	f1 1d       	adc	r31, r1
    7a62:	92 9f       	mul	r25, r18
    7a64:	f0 0d       	add	r31, r0
    7a66:	83 9f       	mul	r24, r19
    7a68:	f0 0d       	add	r31, r0
    7a6a:	74 9f       	mul	r23, r20
    7a6c:	f0 0d       	add	r31, r0
    7a6e:	65 9f       	mul	r22, r21
    7a70:	f0 0d       	add	r31, r0
    7a72:	99 27       	eor	r25, r25
    7a74:	72 9f       	mul	r23, r18
    7a76:	b0 0d       	add	r27, r0
    7a78:	e1 1d       	adc	r30, r1
    7a7a:	f9 1f       	adc	r31, r25
    7a7c:	63 9f       	mul	r22, r19
    7a7e:	b0 0d       	add	r27, r0
    7a80:	e1 1d       	adc	r30, r1
    7a82:	f9 1f       	adc	r31, r25
    7a84:	bd 01       	movw	r22, r26
    7a86:	cf 01       	movw	r24, r30
    7a88:	11 24       	eor	r1, r1
    7a8a:	08 95       	ret

00007a8c <__udivmodqi4>:
    7a8c:	99 1b       	sub	r25, r25
    7a8e:	79 e0       	ldi	r23, 0x09	; 9
    7a90:	04 c0       	rjmp	.+8      	; 0x7a9a <__udivmodqi4_ep>

00007a92 <__udivmodqi4_loop>:
    7a92:	99 1f       	adc	r25, r25
    7a94:	96 17       	cp	r25, r22
    7a96:	08 f0       	brcs	.+2      	; 0x7a9a <__udivmodqi4_ep>
    7a98:	96 1b       	sub	r25, r22

00007a9a <__udivmodqi4_ep>:
    7a9a:	88 1f       	adc	r24, r24
    7a9c:	7a 95       	dec	r23
    7a9e:	c9 f7       	brne	.-14     	; 0x7a92 <__udivmodqi4_loop>
    7aa0:	80 95       	com	r24
    7aa2:	08 95       	ret

00007aa4 <__udivmodhi4>:
    7aa4:	aa 1b       	sub	r26, r26
    7aa6:	bb 1b       	sub	r27, r27
    7aa8:	51 e1       	ldi	r21, 0x11	; 17
    7aaa:	07 c0       	rjmp	.+14     	; 0x7aba <__udivmodhi4_ep>

00007aac <__udivmodhi4_loop>:
    7aac:	aa 1f       	adc	r26, r26
    7aae:	bb 1f       	adc	r27, r27
    7ab0:	a6 17       	cp	r26, r22
    7ab2:	b7 07       	cpc	r27, r23
    7ab4:	10 f0       	brcs	.+4      	; 0x7aba <__udivmodhi4_ep>
    7ab6:	a6 1b       	sub	r26, r22
    7ab8:	b7 0b       	sbc	r27, r23

00007aba <__udivmodhi4_ep>:
    7aba:	88 1f       	adc	r24, r24
    7abc:	99 1f       	adc	r25, r25
    7abe:	5a 95       	dec	r21
    7ac0:	a9 f7       	brne	.-22     	; 0x7aac <__udivmodhi4_loop>
    7ac2:	80 95       	com	r24
    7ac4:	90 95       	com	r25
    7ac6:	bc 01       	movw	r22, r24
    7ac8:	cd 01       	movw	r24, r26
    7aca:	08 95       	ret

00007acc <__divmodhi4>:
    7acc:	97 fb       	bst	r25, 7
    7ace:	09 2e       	mov	r0, r25
    7ad0:	07 26       	eor	r0, r23
    7ad2:	0a d0       	rcall	.+20     	; 0x7ae8 <__divmodhi4_neg1>
    7ad4:	77 fd       	sbrc	r23, 7
    7ad6:	04 d0       	rcall	.+8      	; 0x7ae0 <__divmodhi4_neg2>
    7ad8:	e5 df       	rcall	.-54     	; 0x7aa4 <__udivmodhi4>
    7ada:	06 d0       	rcall	.+12     	; 0x7ae8 <__divmodhi4_neg1>
    7adc:	00 20       	and	r0, r0
    7ade:	1a f4       	brpl	.+6      	; 0x7ae6 <__divmodhi4_exit>

00007ae0 <__divmodhi4_neg2>:
    7ae0:	70 95       	com	r23
    7ae2:	61 95       	neg	r22
    7ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00007ae6 <__divmodhi4_exit>:
    7ae6:	08 95       	ret

00007ae8 <__divmodhi4_neg1>:
    7ae8:	f6 f7       	brtc	.-4      	; 0x7ae6 <__divmodhi4_exit>
    7aea:	90 95       	com	r25
    7aec:	81 95       	neg	r24
    7aee:	9f 4f       	sbci	r25, 0xFF	; 255
    7af0:	08 95       	ret

00007af2 <__udivmodsi4>:
    7af2:	a1 e2       	ldi	r26, 0x21	; 33
    7af4:	1a 2e       	mov	r1, r26
    7af6:	aa 1b       	sub	r26, r26
    7af8:	bb 1b       	sub	r27, r27
    7afa:	fd 01       	movw	r30, r26
    7afc:	0d c0       	rjmp	.+26     	; 0x7b18 <__udivmodsi4_ep>

00007afe <__udivmodsi4_loop>:
    7afe:	aa 1f       	adc	r26, r26
    7b00:	bb 1f       	adc	r27, r27
    7b02:	ee 1f       	adc	r30, r30
    7b04:	ff 1f       	adc	r31, r31
    7b06:	a2 17       	cp	r26, r18
    7b08:	b3 07       	cpc	r27, r19
    7b0a:	e4 07       	cpc	r30, r20
    7b0c:	f5 07       	cpc	r31, r21
    7b0e:	20 f0       	brcs	.+8      	; 0x7b18 <__udivmodsi4_ep>
    7b10:	a2 1b       	sub	r26, r18
    7b12:	b3 0b       	sbc	r27, r19
    7b14:	e4 0b       	sbc	r30, r20
    7b16:	f5 0b       	sbc	r31, r21

00007b18 <__udivmodsi4_ep>:
    7b18:	66 1f       	adc	r22, r22
    7b1a:	77 1f       	adc	r23, r23
    7b1c:	88 1f       	adc	r24, r24
    7b1e:	99 1f       	adc	r25, r25
    7b20:	1a 94       	dec	r1
    7b22:	69 f7       	brne	.-38     	; 0x7afe <__udivmodsi4_loop>
    7b24:	60 95       	com	r22
    7b26:	70 95       	com	r23
    7b28:	80 95       	com	r24
    7b2a:	90 95       	com	r25
    7b2c:	9b 01       	movw	r18, r22
    7b2e:	ac 01       	movw	r20, r24
    7b30:	bd 01       	movw	r22, r26
    7b32:	cf 01       	movw	r24, r30
    7b34:	08 95       	ret

00007b36 <__eeprom_read_byte_1C1D1E>:
    7b36:	e1 99       	sbic	0x1c, 1	; 28
    7b38:	fe cf       	rjmp	.-4      	; 0x7b36 <__eeprom_read_byte_1C1D1E>
    7b3a:	bf bb       	out	0x1f, r27	; 31
    7b3c:	ae bb       	out	0x1e, r26	; 30
    7b3e:	e0 9a       	sbi	0x1c, 0	; 28
    7b40:	11 96       	adiw	r26, 0x01	; 1
    7b42:	0d b2       	in	r0, 0x1d	; 29
    7b44:	08 95       	ret

00007b46 <__eeprom_write_byte_1C1D1E>:
    7b46:	e1 99       	sbic	0x1c, 1	; 28
    7b48:	fe cf       	rjmp	.-4      	; 0x7b46 <__eeprom_write_byte_1C1D1E>
    7b4a:	bf bb       	out	0x1f, r27	; 31
    7b4c:	ae bb       	out	0x1e, r26	; 30
    7b4e:	0d ba       	out	0x1d, r0	; 29
    7b50:	11 96       	adiw	r26, 0x01	; 1
    7b52:	0f b6       	in	r0, 0x3f	; 63
    7b54:	f8 94       	cli
    7b56:	e2 9a       	sbi	0x1c, 2	; 28
    7b58:	e1 9a       	sbi	0x1c, 1	; 28
    7b5a:	0f be       	out	0x3f, r0	; 63
    7b5c:	08 95       	ret

00007b5e <_exit>:
    7b5e:	ff cf       	rjmp	.-2      	; 0x7b5e <_exit>
