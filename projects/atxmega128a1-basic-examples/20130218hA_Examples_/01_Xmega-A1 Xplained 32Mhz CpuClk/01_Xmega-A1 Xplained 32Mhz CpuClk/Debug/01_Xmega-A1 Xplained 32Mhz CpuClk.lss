
01_Xmega-A1 Xplained 32Mhz CpuClk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802002  00802002  000003cc  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000088  00000000  00000000  00000b68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000792  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000238  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  8c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  90:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  94:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  98:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  f8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  fc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 100:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 104:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 108:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 10c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 110:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 114:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 118:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 11c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 120:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 124:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 128:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 12c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 130:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 134:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 138:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 13c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 144:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 148:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 14c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 150:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 154:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 158:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 15c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 160:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 164:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 168:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 16c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 170:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 174:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 178:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 17c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 180:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 184:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 188:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 18c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 190:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 194:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 198:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 19c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1a8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ac:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1b8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1bc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1c8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1d8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1dc:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e4:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1e8:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1ec:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
 1f0:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 e3       	ldi	r30, 0x36	; 54
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 30       	cpi	r26, 0x02	; 2
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	10 e2       	ldi	r17, 0x20	; 32
 22a:	a2 e0       	ldi	r26, 0x02	; 2
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a3 30       	cpi	r26, 0x03	; 3
 234:	b1 07       	cpc	r27, r17
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
 23c:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000244 <_ZN15eSystemClockDef7eCPPSetEPVhh>:
									
}	

// =============================================================================================================================================================================================
void eSystemClockDef::eCPPSet( volatile uint8_t * address, uint8_t value )
{
 244:	0f 93       	push	r16
	// AVR_ENTER_CRITICAL_REGION( );
	
	volatile uint8_t * tmpAddr = address;
	
	#ifdef RAMPZ
	RAMPZ = 0;
 246:	1b be       	out	0x3b, r1	; 59
	"out   %3, r16"	      "\n\t"
	"st     Z,  %1"       "\n\t"
	:
	: "r" (tmpAddr), "r" (value), "M" (0xD8), "i" (&CCP)
	: "r16", "r30", "r31"
	);
 248:	fc 01       	movw	r30, r24
 24a:	08 ed       	ldi	r16, 0xD8	; 216
 24c:	04 bf       	out	0x34, r16	; 52
 24e:	60 83       	st	Z, r22
	// AVR_LEAVE_CRITICAL_REGION( );
	#endif
}
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef>:
						
};

// =============================================================================================================================================================================================
void eSystemClockDef::SetClock( eClockTypeDef ClockType )
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	d8 2f       	mov	r29, r24
	unsigned char Value, Clock_Source_Mask;

	// SELECT CLOCK SOURCE: 2 Mhz Int. Osc. Clock 
	Value = (0 << 2) | (0 << 1) | (0 << 0);						// 2 Mhz Int. Osc.
	eCPPSet( &CLK.CTRL, Value );
 25c:	80 e4       	ldi	r24, 0x40	; 64
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>

	// DISABLE PLL
	switch( ClockType )
 266:	d2 30       	cpi	r29, 0x02	; 2
 268:	49 f4       	brne	.+18     	; 0x27c <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x28>
	{
		default: { break; }
		case ectPLL_128_Mhz_64_Mhz_32_Mhz:
		{
			Value = OSC.CTRL & ~(1 << 4);									// DISABLE PLL
 26a:	60 91 50 00 	lds	r22, 0x0050
 26e:	6f 7e       	andi	r22, 0xEF	; 239
			eCPPSet( &OSC.CTRL, Value );
 270:	80 e5       	ldi	r24, 0x50	; 80
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>
			break;
		}			
		case ectPLL_128_Mhz_64_Mhz_32_Mhz:
		{
			OSC.PLLCTRL = (1 << 7) | (0 << 6)	|						// 32 Mhz. Int. Osc.
										(16);														// 16x = 32 / 4 * 16 = 128 MHz (ClkPer4)
 278:	80 e9       	ldi	r24, 0x90	; 144
 27a:	01 c0       	rjmp	.+2      	; 0x27e <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x2a>
	switch( ClockType )
	{
		default:
		{
			OSC.PLLCTRL = (0 << 7) | (0 << 6) |						// 2 Mhz Int. Osc.
										(1);														// 1x
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	e0 e5       	ldi	r30, 0x50	; 80
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	85 83       	std	Z+5, r24	; 0x05
		}			
		case ectPLL_128_Mhz_64_Mhz_32_Mhz:
		{
			OSC.PLLCTRL = (1 << 7) | (0 << 6)	|						// 32 Mhz. Int. Osc.
										(16);														// 16x = 32 / 4 * 16 = 128 MHz (ClkPer4)
			break;
 284:	ed 2f       	mov	r30, r29
 286:	e1 50       	subi	r30, 0x01	; 1
 288:	e2 30       	cpi	r30, 0x02	; 2
 28a:	28 f4       	brcc	.+10     	; 0x296 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x42>
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e0 50       	subi	r30, 0x00	; 0
 290:	f0 4e       	sbci	r31, 0xE0	; 224
 292:	10 81       	ld	r17, Z
 294:	01 c0       	rjmp	.+2      	; 0x298 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x44>
						
};

// =============================================================================================================================================================================================
void eSystemClockDef::SetClock( eClockTypeDef ClockType )
{
 296:	11 e0       	ldi	r17, 0x01	; 1
	Clock_Source_Mask = (1 << 2) |								// 32 kHz Int. Osc.
											(1 << 1) |								// 32 Mhz Int. Osc.
											(1 << 4);									// PLL
	 */
	// Clock_Source_Mask |= (1 << 2);								// 32 kHz Int. Osc.
	eCPPSet( &OSC.CTRL, Clock_Source_Mask );
 298:	80 e5       	ldi	r24, 0x50	; 80
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	61 2f       	mov	r22, r17
 29e:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>
 2a2:	d2 30       	cpi	r29, 0x02	; 2
 2a4:	11 f0       	breq	.+4      	; 0x2aa <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x56>
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x58>
 2aa:	c3 e0       	ldi	r28, 0x03	; 3
			Value = (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) |					// PSADIV = DIV 1
							(0 << 1) | (0 << 0);																						// PSBDIV = 1, PSCDIV = 1 
			break;
		}
	};			
	eCPPSet( &CLK.PSCTRL, Value );
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	6c 2f       	mov	r22, r28
 2b2:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>
	
	// WAIT FOR CLOCK SOURCES IS READY
	while ( (OSC.STATUS & Clock_Source_Mask) != Clock_Source_Mask );				
 2b6:	80 91 51 00 	lds	r24, 0x0051
 2ba:	81 23       	and	r24, r17
 2bc:	81 17       	cp	r24, r17
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x62>
							 
	// SELECT CLOCK SOURCE: PLL	
	switch( ClockType )
 2c0:	d1 30       	cpi	r29, 0x01	; 1
 2c2:	29 f0       	breq	.+10     	; 0x2ce <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x7a>
 2c4:	d1 30       	cpi	r29, 0x01	; 1
 2c6:	38 f0       	brcs	.+14     	; 0x2d6 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x82>
 2c8:	d2 30       	cpi	r29, 0x02	; 2
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x84>
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x7e>
			Value = (0 << 2) | (0 << 1) | (0 << 0);															// 2 Mhz. Int. Osc.
			break;
		}
		case ectInternal_Oscilator_32_Mhz:
		{
			Value = (0 << 2) | (0 << 1) | (1 << 0);															// 32 Mhz. Int. Osc.
 2ce:	c1 e0       	ldi	r28, 0x01	; 1
			break;
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x84>
		}
		case ectPLL_128_Mhz_64_Mhz_32_Mhz:
		{				
			Value = (1 << 2) | (0 << 1) | (0 << 0);															// PLL
 2d2:	c4 e0       	ldi	r28, 0x04	; 4
			break;
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef+0x84>
	// SELECT CLOCK SOURCE: PLL	
	switch( ClockType )
	{
		case ectInternal_Oscilator_2_Mhz:
		{
			Value = (0 << 2) | (0 << 1) | (0 << 0);															// 2 Mhz. Int. Osc.
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
		{				
			Value = (1 << 2) | (0 << 1) | (0 << 0);															// PLL
			break;
		}
	};			
	eCPPSet( &CLK.CTRL, Value );
 2d8:	80 e4       	ldi	r24, 0x40	; 64
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	6c 2f       	mov	r22, r28
 2de:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>
	
	// DISABLE OTHER CLOCK SOURCES
	eCPPSet( &OSC.CTRL, Clock_Source_Mask );		
 2e2:	80 e5       	ldi	r24, 0x50	; 80
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	61 2f       	mov	r22, r17
 2e8:	0e 94 22 01 	call	0x244	; 0x244 <_ZN15eSystemClockDef7eCPPSetEPVhh>
	DFLLRC32M.COMP1 = 0x37;
	DFLLRC32M.COMP2 = 0xA0;
	DFLLRC32M.CTRL = (1 << 0);		// AUTO CALIB. ENABLE
	*/
									
}	
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <main>:
int main(void)
{
	// here MCU works on 2 Mhz internal oscilator
	
	// switch to 32 Mhz Internal oscilator
	eSystemClock.SetClock( ectInternal_Oscilator_32_Mhz );
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 2a 01 	call	0x254	; 0x254 <_ZN15eSystemClockDef8SetClockE13eClockTypeDef>
	// here MCU works on 32 Mhz internal oscilator	

	// XMegaA1-Explained have leds on PORTE
	
	
	PORTE.DIR = 0xFF;						// Set PORTE as OUTPUT
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	80 93 80 06 	sts	0x0680, r24
	PORTE.OUT = 0xFF;						// All leds OFF	(XmegaA1-Explained rev. 7: 0 = ON, 1 = OFF :-) )
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	f6 e0       	ldi	r31, 0x06	; 6
 304:	84 83       	std	Z+4, r24	; 0x04
  
	while(1)
  {
    
		PORTE.OUTCLR = 0x01;			// Led ON
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	33 ed       	ldi	r19, 0xD3	; 211
 30e:	40 e3       	ldi	r20, 0x30	; 48
 310:	21 50       	subi	r18, 0x01	; 1
 312:	30 40       	sbci	r19, 0x00	; 0
 314:	40 40       	sbci	r20, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x1c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x26>
 31a:	00 00       	nop
		_delay_ms( 500 );					// delay 500 ms
		
		PORTE.OUTSET = 0x01;			// Led OFF
 31c:	85 83       	std	Z+5, r24	; 0x05
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	33 ed       	ldi	r19, 0xD3	; 211
 322:	40 e3       	ldi	r20, 0x30	; 48
 324:	21 50       	subi	r18, 0x01	; 1
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	40 40       	sbci	r20, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x30>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x3a>
 32e:	00 00       	nop
 330:	eb cf       	rjmp	.-42     	; 0x308 <main+0x14>

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
