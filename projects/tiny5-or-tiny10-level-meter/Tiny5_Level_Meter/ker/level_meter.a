;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.3a Standard
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Tiny5 Level Meter
;Version : 0.001
;Date    : 8/31/2009
;Author  : Brian Hammill
;Company : Atmel Corporation
;Comments:
;Simple project for the ADC on the Tiny5
;
;
;Chip type               : ATtiny5
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 8
;*****************************************************/
;
;#include <tiny5.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xe0
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
    .EQU __sm_standby=0x08
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;#define THRESHOLD_LOW   102     // (Low is 0 to 2 volts
;#define THRESHOLD_HIGH  153     // (High is 3 to 5 volts
;// Between 2 and 3 is MID.  Assume 5 volt Vcc for reference voltage.
;
;// Define 3 Active Low LED
;#define LED_LOW     PORTB1
;#define LED_MID     PORTB2
;#define LED_HIGH    PORTB3
;
;#define TRUE    1
;#define FALSE   0
;
;
;
;void update_leds(void);     // Function Prototype
;
;unsigned char new_data;     // Flag to tell us if the ADC has updated.
;
;
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)
; 0000 0031 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0032 // Place your code here
; 0000 0033 update_leds();
;PCODE: $0000000E VOL: 0
; 0000 0034 new_data = FALSE;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0035 
; 0000 0036 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;#define FIRST_ADC_INPUT 0
;//#define LAST_ADC_INPUT 0
;unsigned char adc_data;
;
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0040 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0041 // static unsigned char input_index=0;
; 0000 0042 // Read the A/D conversion result
; 0000 0043 adc_data=ADCL;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0044 new_data = TRUE;    // Access control to be sure ADC data is written.
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0045 
; 0000 0046 // Delay needed for the stabilization of the ADC input voltage
; 0000 0047 delay_us(10);
;PCODE: $0000001C VOL: 0
; 0000 0048 // Start the A/D conversion
; 0000 0049 ADCSRA|=0x40;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004A }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;void update_leds()
; 0000 004D {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004E     // We have 3 LEDs on PB1, PB2, and PB3.
; 0000 004F     // ADC0 is on PB0.
; 0000 0050     // There are no more pins...
; 0000 0051     // Based on the ADC reading, we want to light up 1 of 3 LEDs
; 0000 0052 
; 0000 0053     if (adc_data <= THRESHOLD_LOW )
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0054     {   // Want to light up LED on PB1 (LOW)
;PCODE: $00000029 VOL: 0
; 0000 0055         PORTB = ~(1<<LED_LOW);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0056         }
;PCODE: $0000002C VOL: 0
; 0000 0057 
; 0000 0058     else if ( adc_data >= THRESHOLD_HIGH )
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0059     {
;PCODE: $00000032 VOL: 0
; 0000 005A         // Want to light up LED on PB3 (HIGH)
; 0000 005B         PORTB = ~(1<<LED_HIGH);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005C         }
;PCODE: $00000035 VOL: 0
; 0000 005D 
; 0000 005E     else // Voltage on ADC is between the two thresholds.
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005F     {
;PCODE: $00000038 VOL: 0
; 0000 0060         // Want to light up LED on PB2 (MID)
; 0000 0061         PORTB = ~(1<<LED_MID);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0062         }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0063 
; 0000 0064 
; 0000 0065 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 006A {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006B // Declare your local variables here
; 0000 006C 
; 0000 006D // Clock Prescaler division factor: 1
; 0000 006E #pragma optsize-
; 0000 006F CCP=0xD8;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0070 CLKPSR=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0071 #ifdef _OPTIMIZE_SIZE_
; 0000 0072 #pragma optsize+
; 0000 0073 #endif
; 0000 0074 
; 0000 0075 // Voltage Level Monitor
; 0000 0076 // Trigger Level: 2.5V -> Power-On Reset
; 0000 0077 // Interrupt: Off
; 0000 0078 VLMCSR=0x02;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0079 
; 0000 007A // Input/Output Ports initialization
; 0000 007B // Port B initialization
; 0000 007C PUEB=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007D // Break Before Make Mode: Off
; 0000 007E PORTCR=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 007F // Func3=Out Func2=Out Func1=Out Func0=In
; 0000 0080 // State3=1 State2=1 State1=1 State0=T
; 0000 0081 PORTB=0x0E;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0082 DDRB=0x0E;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0083 
; 0000 0084 // Timer/Counter 0 initialization
; 0000 0085 // Clock source: System Clock
; 0000 0086 // Clock value: 1500.000 kHz
; 0000 0087 // Mode: Normal top=FFFFh
; 0000 0088 // Input Capture on Falling Edge
; 0000 0089 // Input Capture Noise Canceler: Off
; 0000 008A // OC0A output: Disconnected
; 0000 008B // OC0B output: Disconnected
; 0000 008C TCCR0A=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008D TCCR0B=0x02;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 008E TCNT0=0x0000;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008F ICR0=0x0000;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0090 OCR0A=0x0400;   // Was 0x1500.
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0091 OCR0B=0x0000;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0092 
; 0000 0093 // External Interrupt(s) initialization
; 0000 0094 // INT0: Off
; 0000 0095 // Interrupt on any change on pins PCINT0-3: Off
; 0000 0096 EICRA=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0097 EIMSK=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0098 PCICR=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0099 
; 0000 009A // Timer/Counter 0 Interrupt(s) initialization
; 0000 009B TIMSK0=0x02;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009C 
; 0000 009D // Analog Comparator initialization
; 0000 009E // Analog Comparator: Off
; 0000 009F // Analog Comparator Input Capture by Timer/Counter 0: Off
; 0000 00A0 ACSR=0x80;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A1 
; 0000 00A2 // ADC initialization
; 0000 00A3 // ADC Clock frequency: 93.750 kHz
; 0000 00A4 // ADC Auto Trigger Source: Free Running
; 0000 00A5 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
; 0000 00A6 DIDR0=0x01;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A7 ADMUX=FIRST_ADC_INPUT;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A8 ADCSRA=0xEF;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00A9 ADCSRB=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AA 
; 0000 00AB // Global enable interrupts
; 0000 00AC #asm("sei")
;PCODE: $0000006F VOL: 0
	sei
;PCODE: $00000070 VOL: 0
; 0000 00AD 
; 0000 00AE while (1)
;PCODE: $00000071 VOL: 0
; 0000 00AF       {
;PCODE: $00000072 VOL: 0
; 0000 00B0       // Place your code here
; 0000 00B1 
; 0000 00B2       };
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00B3 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
