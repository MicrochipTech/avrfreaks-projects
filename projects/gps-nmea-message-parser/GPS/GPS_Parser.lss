
GPS_Parser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000ab6  00000b4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  00800110  00800110  00000b5a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ee  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078b  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b1  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009fc  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f2  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	4c c0       	rjmp	.+152    	; 0xbe <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 eb       	ldi	r30, 0xB6	; 182
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 31       	cpi	r26, 0x10	; 16
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a0 e1       	ldi	r26, 0x10	; 16
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a5 33       	cpi	r26, 0x35	; 53
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	6c d3       	rcall	.+1752   	; 0x740 <main>
  68:	24 c5       	rjmp	.+2632   	; 0xab2 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Init_all>:
#include <avr\io.h>
#include <avr\interrupt.h>
#include "Init.h"

void Init_all(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
//PortInit();
UART_Init();
  74:	0e d0       	rcall	.+28     	; 0x92 <UART_Init>


}
  76:	cf 91       	pop	r28
  78:	df 91       	pop	r29
  7a:	08 95       	ret

0000007c <PortInit>:
///////////////////////////////////////
////  PWM_Init	Initializing PWM system
//////////////////
void PortInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
DDRD=(0<<PIND0)|(1<<PIND1)|(0<<PIND2)|(0<<PIND3)|(0<<PIND4)|(1<<PIND5)|(1<<PIND6)|(1<<PIND7); 
  84:	ea e2       	ldi	r30, 0x2A	; 42
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	82 ee       	ldi	r24, 0xE2	; 226
  8a:	80 83       	st	Z, r24



}
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

00000092 <UART_Init>:


////UART_Init function   expects clock to be 8 MHz
////////////////////////////////////////////////////
void UART_Init(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

// Baud Rate = 4800	
	UBRR0L=103;
  9a:	e4 ec       	ldi	r30, 0xC4	; 196
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	87 e6       	ldi	r24, 0x67	; 103
  a0:	80 83       	st	Z, r24
	UBRR0H=0;
  a2:	e5 ec       	ldi	r30, 0xC5	; 197
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1

	// Set frame format: 8data, 1stop bit

UCSR0C=	(0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01); // Enable receiver and transmitter
  a8:	e2 ec       	ldi	r30, 0xC2	; 194
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 83       	st	Z, r24
UCSR0B=(1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	80 83       	st	Z, r24




}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <__vector_18>:
 extern uint8_t BuffIndex;
extern char USARTBuffer[80];

ISR(USART_RX_vect)

 {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <__vector_18+0x1c>
  da:	0f 92       	push	r0
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
 char data=UDR0;
  e0:	e6 ec       	ldi	r30, 0xC6	; 198
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	89 83       	std	Y+1, r24	; 0x01
 switch(data)
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3b 83       	std	Y+3, r19	; 0x03
  f0:	2a 83       	std	Y+2, r18	; 0x02
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	9b 81       	ldd	r25, Y+3	; 0x03
  f6:	84 32       	cpi	r24, 0x24	; 36
  f8:	91 05       	cpc	r25, r1
  fa:	31 f0       	breq	.+12     	; 0x108 <__vector_18+0x4a>
  fc:	2a 81       	ldd	r18, Y+2	; 0x02
  fe:	3b 81       	ldd	r19, Y+3	; 0x03
 100:	2a 32       	cpi	r18, 0x2A	; 42
 102:	31 05       	cpc	r19, r1
 104:	39 f0       	breq	.+14     	; 0x114 <__vector_18+0x56>
 106:	16 c0       	rjmp	.+44     	; 0x134 <__vector_18+0x76>
 {
	case ('$'):
	BuffIndex=0;
 108:	10 92 11 01 	sts	0x0111, r1
	status=1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 10 01 	sts	0x0110, r24
 112:	21 c0       	rjmp	.+66     	; 0x156 <__vector_18+0x98>
	break;
	
	case ('*'):
	USARTBuffer[BuffIndex++]=data;
 114:	20 91 11 01 	lds	r18, 0x0111
 118:	82 2f       	mov	r24, r18
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	ea 5c       	subi	r30, 0xCA	; 202
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	80 83       	st	Z, r24
 126:	82 2f       	mov	r24, r18
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 11 01 	sts	0x0111, r24
	status=0;
 12e:	10 92 10 01 	sts	0x0110, r1
 132:	11 c0       	rjmp	.+34     	; 0x156 <__vector_18+0x98>
	break;
	
	default:
	if(!status) break;
 134:	80 91 10 01 	lds	r24, 0x0110
 138:	88 23       	and	r24, r24
 13a:	69 f0       	breq	.+26     	; 0x156 <__vector_18+0x98>
	USARTBuffer[BuffIndex++]=data;
 13c:	20 91 11 01 	lds	r18, 0x0111
 140:	82 2f       	mov	r24, r18
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	ea 5c       	subi	r30, 0xCA	; 202
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	80 83       	st	Z, r24
 14e:	82 2f       	mov	r24, r18
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	80 93 11 01 	sts	0x0111, r24
 
 }   
 }
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <nmeaProcess>:
extern char NMEAPacket[80];
extern char GPGGA[80];
double pi = 3.141592653589793238462643;

uint8_t nmeaProcess(void)//(cBuffer* rxBuffer)
{
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	00 d0       	rcall	.+0      	; 0x17c <nmeaProcess+0x6>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
	uint8_t foundpacket = NMEA_NODATA;
 182:	1b 82       	std	Y+3, r1	; 0x03
	

	
		for(int i=0;i<80;i++)
 184:	1a 82       	std	Y+2, r1	; 0x02
 186:	19 82       	std	Y+1, r1	; 0x01
 188:	11 c0       	rjmp	.+34     	; 0x1ac <nmeaProcess+0x36>
		{
		NMEAPacket[i]=USARTBuffer[i];
 18a:	29 81       	ldd	r18, Y+1	; 0x01
 18c:	3a 81       	ldd	r19, Y+2	; 0x02
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	fc 01       	movw	r30, r24
 194:	ea 5c       	subi	r30, 0xCA	; 202
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
 19a:	f9 01       	movw	r30, r18
 19c:	ea 52       	subi	r30, 0x2A	; 42
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
{
	uint8_t foundpacket = NMEA_NODATA;
	

	
		for(int i=0;i<80;i++)
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	80 35       	cpi	r24, 0x50	; 80
 1b2:	91 05       	cpc	r25, r1
 1b4:	54 f3       	brlt	.-44     	; 0x18a <nmeaProcess+0x14>
		NMEAPacket[i]=USARTBuffer[i];
		}
		
		
		// check message type and process appropriately
		if(!strncmp(NMEAPacket,"GPGGA", 5))
 1b6:	86 ed       	ldi	r24, 0xD6	; 214
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	24 e0       	ldi	r18, 0x04	; 4
 1bc:	31 e0       	ldi	r19, 0x01	; 1
 1be:	b9 01       	movw	r22, r18
 1c0:	45 e0       	ldi	r20, 0x05	; 5
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	68 d4       	rcall	.+2256   	; 0xa96 <strncmp>
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <nmeaProcess+0x60>
		{
			// process packet of this type
				
			nmeaProcessGPGGA(NMEAPacket);
 1ca:	86 ed       	ldi	r24, 0xD6	; 214
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	19 d0       	rcall	.+50     	; 0x202 <nmeaProcessGPGGA>
			// report packet type
			foundpacket = NMEA_GPGGA;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	8b 83       	std	Y+3, r24	; 0x03
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <nmeaProcess+0x7e>
		}
		else if(!strncmp(NMEAPacket, "GPRMC", 5))
 1d6:	86 ed       	ldi	r24, 0xD6	; 214
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	2a e0       	ldi	r18, 0x0A	; 10
 1dc:	31 e0       	ldi	r19, 0x01	; 1
 1de:	b9 01       	movw	r22, r18
 1e0:	45 e0       	ldi	r20, 0x05	; 5
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	58 d4       	rcall	.+2224   	; 0xa96 <strncmp>
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	29 f4       	brne	.+10     	; 0x1f4 <nmeaProcess+0x7e>
		{
			// process packet of this type
			nmeaProcessGPRMC(NMEAPacket);
 1ea:	86 ed       	ldi	r24, 0xD6	; 214
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	3c d1       	rcall	.+632    	; 0x468 <nmeaProcessGPRMC>
			// report packet type
			foundpacket = NMEA_GPRMC;
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	8b 83       	std	Y+3, r24	; 0x03
		}
		
	
	
	return foundpacket;
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	cf 91       	pop	r28
 1fe:	df 91       	pop	r29
 200:	08 95       	ret

00000202 <nmeaProcessGPGGA>:

void nmeaProcessGPGGA(char* packet)
{
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	00 d0       	rcall	.+0      	; 0x208 <nmeaProcessGPGGA+0x6>
 208:	00 d0       	rcall	.+0      	; 0x20a <nmeaProcessGPGGA+0x8>
 20a:	00 d0       	rcall	.+0      	; 0x20c <nmeaProcessGPGGA+0xa>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	9c 83       	std	Y+4, r25	; 0x04
 212:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i;
	uint8_t GPIndex=0;
 214:	19 82       	std	Y+1, r1	; 0x01
	

	//start parsing just after "GPGGA,"
	i = 6;
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	8a 83       	std	Y+2, r24	; 0x02
	// attempt to reject empty packets right away
	if((packet[i]==',') & (packet[i+1]==',')) return;
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	9c 81       	ldd	r25, Y+4	; 0x04
 224:	fc 01       	movw	r30, r24
 226:	e2 0f       	add	r30, r18
 228:	f3 1f       	adc	r31, r19
 22a:	80 81       	ld	r24, Z
 22c:	1e 82       	std	Y+6, r1	; 0x06
 22e:	8c 32       	cpi	r24, 0x2C	; 44
 230:	11 f4       	brne	.+4      	; 0x236 <nmeaProcessGPGGA+0x34>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	8e 83       	std	Y+6, r24	; 0x06
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9c 01       	movw	r18, r24
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	9c 81       	ldd	r25, Y+4	; 0x04
 246:	fc 01       	movw	r30, r24
 248:	e2 0f       	add	r30, r18
 24a:	f3 1f       	adc	r31, r19
 24c:	80 81       	ld	r24, Z
 24e:	1d 82       	std	Y+5, r1	; 0x05
 250:	8c 32       	cpi	r24, 0x2C	; 44
 252:	11 f4       	brne	.+4      	; 0x258 <nmeaProcessGPGGA+0x56>
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	9d 83       	std	Y+5, r25	; 0x05
 258:	8e 81       	ldd	r24, Y+6	; 0x06
 25a:	9d 81       	ldd	r25, Y+5	; 0x05
 25c:	89 23       	and	r24, r25
 25e:	88 23       	and	r24, r24
 260:	09 f0       	breq	.+2      	; 0x264 <nmeaProcessGPGGA+0x62>
 262:	ed c0       	rjmp	.+474    	; 0x43e <nmeaProcessGPGGA+0x23c>
 264:	16 c0       	rjmp	.+44     	; 0x292 <nmeaProcessGPGGA+0x90>
		

	// get UTC time [hhmmss.sss]
	while(packet[i] != ',')				// next field: Time
	{
	GPSTime[GPIndex]=packet[i];
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	48 2f       	mov	r20, r24
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	9c 81       	ldd	r25, Y+4	; 0x04
 276:	fc 01       	movw	r30, r24
 278:	e2 0f       	add	r30, r18
 27a:	f3 1f       	adc	r31, r19
 27c:	80 81       	ld	r24, Z
 27e:	fa 01       	movw	r30, r20
 280:	e8 5e       	subi	r30, 0xE8	; 232
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	80 83       	st	Z, r24
	i++;
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	89 83       	std	Y+1, r24	; 0x01
	// attempt to reject empty packets right away
	if((packet[i]==',') & (packet[i+1]==',')) return;
		

	// get UTC time [hhmmss.sss]
	while(packet[i] != ',')				// next field: Time
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	9c 81       	ldd	r25, Y+4	; 0x04
 29c:	fc 01       	movw	r30, r24
 29e:	e2 0f       	add	r30, r18
 2a0:	f3 1f       	adc	r31, r19
 2a2:	80 81       	ld	r24, Z
 2a4:	8c 32       	cpi	r24, 0x2C	; 44
 2a6:	f9 f6       	brne	.-66     	; 0x266 <nmeaProcessGPGGA+0x64>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 2ae:	19 82       	std	Y+1, r1	; 0x01
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <nmeaProcessGPGGA+0xbc>
	while(packet[i] != ',')				// next field: Latitude
	{
	//do nothing
	i++;
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field: Latitude
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	8b 81       	ldd	r24, Y+3	; 0x03
 2c6:	9c 81       	ldd	r25, Y+4	; 0x04
 2c8:	fc 01       	movw	r30, r24
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	80 81       	ld	r24, Z
 2d0:	8c 32       	cpi	r24, 0x2C	; 44
 2d2:	79 f7       	brne	.-34     	; 0x2b2 <nmeaProcessGPGGA+0xb0>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 2da:	19 82       	std	Y+1, r1	; 0x01
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <nmeaProcessGPGGA+0xe8>
	while(packet[i] != ',')				// next field: N/S
	{
	//do nothing
	i++;
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	89 83       	std	Y+1, r24	; 0x01
	i++;
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field: N/S
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	fc 01       	movw	r30, r24
 2f6:	e2 0f       	add	r30, r18
 2f8:	f3 1f       	adc	r31, r19
 2fa:	80 81       	ld	r24, Z
 2fc:	8c 32       	cpi	r24, 0x2C	; 44
 2fe:	79 f7       	brne	.-34     	; 0x2de <nmeaProcessGPGGA+0xdc>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 306:	19 82       	std	Y+1, r1	; 0x01
 308:	06 c0       	rjmp	.+12     	; 0x316 <nmeaProcessGPGGA+0x114>
	while(packet[i] != ',')				// next field: Longitude
	{
	//do nothing
	i++;
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	89 83       	std	Y+1, r24	; 0x01
	i++;
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field: Longitude
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	9c 81       	ldd	r25, Y+4	; 0x04
 320:	fc 01       	movw	r30, r24
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	80 81       	ld	r24, Z
 328:	8c 32       	cpi	r24, 0x2C	; 44
 32a:	79 f7       	brne	.-34     	; 0x30a <nmeaProcessGPGGA+0x108>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 332:	19 82       	std	Y+1, r1	; 0x01
 334:	06 c0       	rjmp	.+12     	; 0x342 <nmeaProcessGPGGA+0x140>
	while(packet[i] != ',')				// next field: E/W
	{
	//do nothing
	i++;
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	89 83       	std	Y+1, r24	; 0x01
	i++;
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field: E/W
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	9c 81       	ldd	r25, Y+4	; 0x04
 34c:	fc 01       	movw	r30, r24
 34e:	e2 0f       	add	r30, r18
 350:	f3 1f       	adc	r31, r19
 352:	80 81       	ld	r24, Z
 354:	8c 32       	cpi	r24, 0x2C	; 44
 356:	79 f7       	brne	.-34     	; 0x336 <nmeaProcessGPGGA+0x134>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 35e:	19 82       	std	Y+1, r1	; 0x01
 360:	11 c0       	rjmp	.+34     	; 0x384 <nmeaProcessGPGGA+0x182>
	
	while(packet[i] != ',')				// next field:Fix Quality
	{
	FixQuality=packet[i];
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	9c 81       	ldd	r25, Y+4	; 0x04
 36c:	fc 01       	movw	r30, r24
 36e:	e2 0f       	add	r30, r18
 370:	f3 1f       	adc	r31, r19
 372:	80 81       	ld	r24, Z
 374:	80 93 12 01 	sts	0x0112, r24
	i++;
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	89 83       	std	Y+1, r24	; 0x01
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	
	while(packet[i] != ',')				// next field:Fix Quality
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	9c 81       	ldd	r25, Y+4	; 0x04
 38e:	fc 01       	movw	r30, r24
 390:	e2 0f       	add	r30, r18
 392:	f3 1f       	adc	r31, r19
 394:	80 81       	ld	r24, Z
 396:	8c 32       	cpi	r24, 0x2C	; 44
 398:	21 f7       	brne	.-56     	; 0x362 <nmeaProcessGPGGA+0x160>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 3a0:	19 82       	std	Y+1, r1	; 0x01
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <nmeaProcessGPGGA+0x1ae>
	while(packet[i] != ',')				// next field:No of satellites
	{
	//bypass no of satellites
	i++;
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:No of satellites
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	fc 01       	movw	r30, r24
 3bc:	e2 0f       	add	r30, r18
 3be:	f3 1f       	adc	r31, r19
 3c0:	80 81       	ld	r24, Z
 3c2:	8c 32       	cpi	r24, 0x2C	; 44
 3c4:	79 f7       	brne	.-34     	; 0x3a4 <nmeaProcessGPGGA+0x1a2>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 3cc:	19 82       	std	Y+1, r1	; 0x01
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <nmeaProcessGPGGA+0x1da>
	while(packet[i] != ',')				// next field:horizontal dilution of position
	{
	//bypass horizontal dilution of position
	i++;
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:horizontal dilution of position
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	8b 81       	ldd	r24, Y+3	; 0x03
 3e4:	9c 81       	ldd	r25, Y+4	; 0x04
 3e6:	fc 01       	movw	r30, r24
 3e8:	e2 0f       	add	r30, r18
 3ea:	f3 1f       	adc	r31, r19
 3ec:	80 81       	ld	r24, Z
 3ee:	8c 32       	cpi	r24, 0x2C	; 44
 3f0:	79 f7       	brne	.-34     	; 0x3d0 <nmeaProcessGPGGA+0x1ce>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 3f8:	19 82       	std	Y+1, r1	; 0x01
 3fa:	16 c0       	rjmp	.+44     	; 0x428 <nmeaProcessGPGGA+0x226>
	while(packet[i] != ',')				// next field:Altitude in meters above sea level
	{
	Altitude[GPIndex]=packet[i];
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	48 2f       	mov	r20, r24
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	9c 81       	ldd	r25, Y+4	; 0x04
 40c:	fc 01       	movw	r30, r24
 40e:	e2 0f       	add	r30, r18
 410:	f3 1f       	adc	r31, r19
 412:	80 81       	ld	r24, Z
 414:	fa 01       	movw	r30, r20
 416:	ec 5d       	subi	r30, 0xDC	; 220
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	80 83       	st	Z, r24
	i++;
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:Altitude in meters above sea level
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	9c 81       	ldd	r25, Y+4	; 0x04
 432:	fc 01       	movw	r30, r24
 434:	e2 0f       	add	r30, r18
 436:	f3 1f       	adc	r31, r19
 438:	80 81       	ld	r24, Z
 43a:	8c 32       	cpi	r24, 0x2C	; 44
 43c:	f9 f6       	brne	.-66     	; 0x3fc <nmeaProcessGPGGA+0x1fa>
	//latitude = strtod(&packet[i], &endptr);
	
	//minutesfrac = modf(latitude/100, &degrees);
	//latitude= degrees + (minutesfrac*100)/60;
	//latitude *= (pi/180);
	}
 43e:	26 96       	adiw	r28, 0x06	; 6
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <nmeaProcessGPGSV>:
	
	void nmeaProcessGPGSV(char* packet)
	{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	00 d0       	rcall	.+0      	; 0x456 <nmeaProcessGPGSV+0x6>
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	9a 83       	std	Y+2, r25	; 0x02
 45c:	89 83       	std	Y+1, r24	; 0x01
	}
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <nmeaProcessGPRMC>:
	
	void nmeaProcessGPRMC(char* packet)
	{
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	00 d0       	rcall	.+0      	; 0x46e <nmeaProcessGPRMC+0x6>
 46e:	00 d0       	rcall	.+0      	; 0x470 <nmeaProcessGPRMC+0x8>
 470:	00 d0       	rcall	.+0      	; 0x472 <nmeaProcessGPRMC+0xa>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	9c 83       	std	Y+4, r25	; 0x04
 478:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i;
	uint8_t GPIndex=0;
 47a:	19 82       	std	Y+1, r1	; 0x01
	

	//start parsing just after "GPRMC,"
	i = 6;
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	8a 83       	std	Y+2, r24	; 0x02
	// attempt to reject empty packets right away
	if(packet[i]==',' & packet[i+1]==',') return;
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	9c 81       	ldd	r25, Y+4	; 0x04
 48a:	fc 01       	movw	r30, r24
 48c:	e2 0f       	add	r30, r18
 48e:	f3 1f       	adc	r31, r19
 490:	80 81       	ld	r24, Z
 492:	1e 82       	std	Y+6, r1	; 0x06
 494:	8c 32       	cpi	r24, 0x2C	; 44
 496:	11 f4       	brne	.+4      	; 0x49c <nmeaProcessGPRMC+0x34>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	8e 83       	std	Y+6, r24	; 0x06
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9c 01       	movw	r18, r24
 4a4:	2f 5f       	subi	r18, 0xFF	; 255
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	9c 81       	ldd	r25, Y+4	; 0x04
 4ac:	fc 01       	movw	r30, r24
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	80 81       	ld	r24, Z
 4b4:	1d 82       	std	Y+5, r1	; 0x05
 4b6:	8c 32       	cpi	r24, 0x2C	; 44
 4b8:	11 f4       	brne	.+4      	; 0x4be <nmeaProcessGPRMC+0x56>
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	9d 83       	std	Y+5, r25	; 0x05
 4be:	8e 81       	ldd	r24, Y+6	; 0x06
 4c0:	9d 81       	ldd	r25, Y+5	; 0x05
 4c2:	89 23       	and	r24, r25
 4c4:	88 23       	and	r24, r24
 4c6:	09 f0       	breq	.+2      	; 0x4ca <nmeaProcessGPRMC+0x62>
 4c8:	32 c1       	rjmp	.+612    	; 0x72e <__stack+0x22f>
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <nmeaProcessGPRMC+0x70>
		
	while(packet[i] != ',')				// next field: Time
	{
	//do nothing
	i++;
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	89 83       	std	Y+1, r24	; 0x01
	//start parsing just after "GPRMC,"
	i = 6;
	// attempt to reject empty packets right away
	if(packet[i]==',' & packet[i+1]==',') return;
		
	while(packet[i] != ',')				// next field: Time
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	9c 81       	ldd	r25, Y+4	; 0x04
 4e2:	fc 01       	movw	r30, r24
 4e4:	e2 0f       	add	r30, r18
 4e6:	f3 1f       	adc	r31, r19
 4e8:	80 81       	ld	r24, Z
 4ea:	8c 32       	cpi	r24, 0x2C	; 44
 4ec:	79 f7       	brne	.-34     	; 0x4cc <nmeaProcessGPRMC+0x64>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 4f4:	19 82       	std	Y+1, r1	; 0x01
 4f6:	06 c0       	rjmp	.+12     	; 0x504 <__stack+0x5>
	while(packet[i] != ',')				// next field: Navigation warning
	{
	//do nothing
	i++;
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	8f 5f       	subi	r24, 0xFF	; 255
 4fc:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	89 83       	std	Y+1, r24	; 0x01
	i++;
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field: Navigation warning
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	9c 81       	ldd	r25, Y+4	; 0x04
 50e:	fc 01       	movw	r30, r24
 510:	e2 0f       	add	r30, r18
 512:	f3 1f       	adc	r31, r19
 514:	80 81       	ld	r24, Z
 516:	8c 32       	cpi	r24, 0x2C	; 44
 518:	79 f7       	brne	.-34     	; 0x4f8 <nmeaProcessGPRMC+0x90>
	{
	//do nothing
	i++;
	GPIndex++;
	} 
	i++;
 51a:	8a 81       	ldd	r24, Y+2	; 0x02
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 520:	19 82       	std	Y+1, r1	; 0x01
 522:	16 c0       	rjmp	.+44     	; 0x550 <__stack+0x51>
	while(packet[i] != ',')				// next field:Latitude
	{
	Lat[GPIndex]=packet[i];
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	48 2f       	mov	r20, r24
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	fc 01       	movw	r30, r24
 536:	e2 0f       	add	r30, r18
 538:	f3 1f       	adc	r31, r19
 53a:	80 81       	ld	r24, Z
 53c:	fa 01       	movw	r30, r20
 53e:	ea 5d       	subi	r30, 0xDA	; 218
 540:	fd 4f       	sbci	r31, 0xFD	; 253
 542:	80 83       	st	Z, r24
	i++;
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	89 83       	std	Y+1, r24	; 0x01
	i++;
	GPIndex++;
	} 
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:Latitude
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9c 81       	ldd	r25, Y+4	; 0x04
 55a:	fc 01       	movw	r30, r24
 55c:	e2 0f       	add	r30, r18
 55e:	f3 1f       	adc	r31, r19
 560:	80 81       	ld	r24, Z
 562:	8c 32       	cpi	r24, 0x2C	; 44
 564:	f9 f6       	brne	.-66     	; 0x524 <__stack+0x25>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	8f 5f       	subi	r24, 0xFF	; 255
 56a:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 56c:	19 82       	std	Y+1, r1	; 0x01
 56e:	16 c0       	rjmp	.+44     	; 0x59c <__stack+0x9d>
	while(packet[i] != ',')				// next field:N/S
	{
	NS[GPIndex]=packet[i];
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	48 2f       	mov	r20, r24
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	8b 81       	ldd	r24, Y+3	; 0x03
 57e:	9c 81       	ldd	r25, Y+4	; 0x04
 580:	fc 01       	movw	r30, r24
 582:	e2 0f       	add	r30, r18
 584:	f3 1f       	adc	r31, r19
 586:	80 81       	ld	r24, Z
 588:	fa 01       	movw	r30, r20
 58a:	e1 5d       	subi	r30, 0xD1	; 209
 58c:	fd 4f       	sbci	r31, 0xFD	; 253
 58e:	80 83       	st	Z, r24
	i++;
 590:	8a 81       	ldd	r24, Y+2	; 0x02
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	8f 5f       	subi	r24, 0xFF	; 255
 59a:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:N/S
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	9c 81       	ldd	r25, Y+4	; 0x04
 5a6:	fc 01       	movw	r30, r24
 5a8:	e2 0f       	add	r30, r18
 5aa:	f3 1f       	adc	r31, r19
 5ac:	80 81       	ld	r24, Z
 5ae:	8c 32       	cpi	r24, 0x2C	; 44
 5b0:	f9 f6       	brne	.-66     	; 0x570 <__stack+0x71>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 5b8:	19 82       	std	Y+1, r1	; 0x01
 5ba:	16 c0       	rjmp	.+44     	; 0x5e8 <__stack+0xe9>
	while(packet[i] != ',')				// next field:Longitude
	{
	Long[GPIndex]=packet[i];
 5bc:	89 81       	ldd	r24, Y+1	; 0x01
 5be:	48 2f       	mov	r20, r24
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	9c 81       	ldd	r25, Y+4	; 0x04
 5cc:	fc 01       	movw	r30, r24
 5ce:	e2 0f       	add	r30, r18
 5d0:	f3 1f       	adc	r31, r19
 5d2:	80 81       	ld	r24, Z
 5d4:	fa 01       	movw	r30, r20
 5d6:	e5 5d       	subi	r30, 0xD5	; 213
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	80 83       	st	Z, r24
	i++;
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:Longitude
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	9c 81       	ldd	r25, Y+4	; 0x04
 5f2:	fc 01       	movw	r30, r24
 5f4:	e2 0f       	add	r30, r18
 5f6:	f3 1f       	adc	r31, r19
 5f8:	80 81       	ld	r24, Z
 5fa:	8c 32       	cpi	r24, 0x2C	; 44
 5fc:	f9 f6       	brne	.-66     	; 0x5bc <__stack+0xbd>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 604:	19 82       	std	Y+1, r1	; 0x01
 606:	16 c0       	rjmp	.+44     	; 0x634 <__stack+0x135>
	while(packet[i] != ',')				// next field:E/W
	{
	EW[GPIndex]=packet[i];
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	48 2f       	mov	r20, r24
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	8b 81       	ldd	r24, Y+3	; 0x03
 616:	9c 81       	ldd	r25, Y+4	; 0x04
 618:	fc 01       	movw	r30, r24
 61a:	e2 0f       	add	r30, r18
 61c:	f3 1f       	adc	r31, r19
 61e:	80 81       	ld	r24, Z
 620:	fa 01       	movw	r30, r20
 622:	eb 5c       	subi	r30, 0xCB	; 203
 624:	fe 4f       	sbci	r31, 0xFE	; 254
 626:	80 83       	st	Z, r24
	i++;
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:E/W
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	9c 81       	ldd	r25, Y+4	; 0x04
 63e:	fc 01       	movw	r30, r24
 640:	e2 0f       	add	r30, r18
 642:	f3 1f       	adc	r31, r19
 644:	80 81       	ld	r24, Z
 646:	8c 32       	cpi	r24, 0x2C	; 44
 648:	f9 f6       	brne	.-66     	; 0x608 <__stack+0x109>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 650:	19 82       	std	Y+1, r1	; 0x01
 652:	16 c0       	rjmp	.+44     	; 0x680 <__stack+0x181>
	// get speed
	while(packet[i] != ',')				// next field: speed
	{
	Speed[GPIndex]=packet[i];
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	48 2f       	mov	r20, r24
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	9c 81       	ldd	r25, Y+4	; 0x04
 664:	fc 01       	movw	r30, r24
 666:	e2 0f       	add	r30, r18
 668:	f3 1f       	adc	r31, r19
 66a:	80 81       	ld	r24, Z
 66c:	fa 01       	movw	r30, r20
 66e:	ed 5e       	subi	r30, 0xED	; 237
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	80 83       	st	Z, r24
	i++;
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	8f 5f       	subi	r24, 0xFF	; 255
 67e:	89 83       	std	Y+1, r24	; 0x01
	
	
	i++;
	GPIndex=0;
	// get speed
	while(packet[i] != ',')				// next field: speed
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	fc 01       	movw	r30, r24
 68c:	e2 0f       	add	r30, r18
 68e:	f3 1f       	adc	r31, r19
 690:	80 81       	ld	r24, Z
 692:	8c 32       	cpi	r24, 0x2C	; 44
 694:	f9 f6       	brne	.-66     	; 0x654 <__stack+0x155>
	i++;
	GPIndex++;
	} 
	
	
	i++;
 696:	8a 81       	ldd	r24, Y+2	; 0x02
 698:	8f 5f       	subi	r24, 0xFF	; 255
 69a:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 69c:	19 82       	std	Y+1, r1	; 0x01
 69e:	16 c0       	rjmp	.+44     	; 0x6cc <__stack+0x1cd>
	while(packet[i] != ',')				// next field:Course made good
	{
	Heading[GPIndex]=packet[i];
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	48 2f       	mov	r20, r24
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	8b 81       	ldd	r24, Y+3	; 0x03
 6ae:	9c 81       	ldd	r25, Y+4	; 0x04
 6b0:	fc 01       	movw	r30, r24
 6b2:	e2 0f       	add	r30, r18
 6b4:	f3 1f       	adc	r31, r19
 6b6:	80 81       	ld	r24, Z
 6b8:	fa 01       	movw	r30, r20
 6ba:	e0 5d       	subi	r30, 0xD0	; 208
 6bc:	fd 4f       	sbci	r31, 0xFD	; 253
 6be:	80 83       	st	Z, r24
	i++;
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	89 83       	std	Y+1, r24	; 0x01
	} 
	
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:Course made good
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	8b 81       	ldd	r24, Y+3	; 0x03
 6d4:	9c 81       	ldd	r25, Y+4	; 0x04
 6d6:	fc 01       	movw	r30, r24
 6d8:	e2 0f       	add	r30, r18
 6da:	f3 1f       	adc	r31, r19
 6dc:	80 81       	ld	r24, Z
 6de:	8c 32       	cpi	r24, 0x2C	; 44
 6e0:	f9 f6       	brne	.-66     	; 0x6a0 <__stack+0x1a1>
	Heading[GPIndex]=packet[i];
	i++;
	GPIndex++;
	} 
	
	i++;
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex=0;
 6e8:	19 82       	std	Y+1, r1	; 0x01
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <__stack+0x219>
	while(packet[i] != ',')				// next field:Date
	{
	GPSDate[GPIndex]=packet[i];
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	48 2f       	mov	r20, r24
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	fc 01       	movw	r30, r24
 6fe:	e2 0f       	add	r30, r18
 700:	f3 1f       	adc	r31, r19
 702:	80 81       	ld	r24, Z
 704:	fa 01       	movw	r30, r20
 706:	e2 5e       	subi	r30, 0xE2	; 226
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	80 83       	st	Z, r24
	i++;
 70c:	8a 81       	ldd	r24, Y+2	; 0x02
 70e:	8f 5f       	subi	r24, 0xFF	; 255
 710:	8a 83       	std	Y+2, r24	; 0x02
	GPIndex++;
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	8f 5f       	subi	r24, 0xFF	; 255
 716:	89 83       	std	Y+1, r24	; 0x01
	GPIndex++;
	} 
	
	i++;
	GPIndex=0;
	while(packet[i] != ',')				// next field:Date
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	9c 81       	ldd	r25, Y+4	; 0x04
 722:	fc 01       	movw	r30, r24
 724:	e2 0f       	add	r30, r18
 726:	f3 1f       	adc	r31, r19
 728:	80 81       	ld	r24, Z
 72a:	8c 32       	cpi	r24, 0x2C	; 44
 72c:	f9 f6       	brne	.-66     	; 0x6ec <__stack+0x1ed>
	i++;
	GPIndex++;
	} 
	
	
 72e:	26 96       	adiw	r28, 0x06	; 6
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <main>:
uint16_t Average(uint16_t);




int main(void) {
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	2e 97       	sbiw	r28, 0x0e	; 14
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
Init_all();
 754:	8b dc       	rcall	.-1770   	; 0x6c <Init_all>
sei();
 756:	78 94       	sei
USART_Transmit('S');
 758:	83 e5       	ldi	r24, 0x53	; 83
 75a:	26 d1       	rcall	.+588    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
 75c:	84 e5       	ldi	r24, 0x54	; 84
 75e:	24 d1       	rcall	.+584    	; 0x9a8 <USART_Transmit>
USART_Transmit('A');
 760:	81 e4       	ldi	r24, 0x41	; 65
 762:	22 d1       	rcall	.+580    	; 0x9a8 <USART_Transmit>
USART_Transmit('R');
 764:	82 e5       	ldi	r24, 0x52	; 82
 766:	20 d1       	rcall	.+576    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
 768:	84 e5       	ldi	r24, 0x54	; 84
 76a:	1e d1       	rcall	.+572    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	1c d1       	rcall	.+568    	; 0x9a8 <USART_Transmit>

while (1) {//loop forever

if ((!status))
 770:	80 91 10 01 	lds	r24, 0x0110
 774:	88 23       	and	r24, r24
 776:	e1 f7       	brne	.-8      	; 0x770 <main+0x30>
{
//PrintNMEABuffer(NMEAPacket);
nmeaProcess();
 778:	fe dc       	rcall	.-1540   	; 0x176 <nmeaProcess>
USART_Transmit('T');
 77a:	84 e5       	ldi	r24, 0x54	; 84
 77c:	15 d1       	rcall	.+554    	; 0x9a8 <USART_Transmit>
USART_Transmit('I');
 77e:	89 e4       	ldi	r24, 0x49	; 73
 780:	13 d1       	rcall	.+550    	; 0x9a8 <USART_Transmit>
USART_Transmit('M');
 782:	8d e4       	ldi	r24, 0x4D	; 77
 784:	11 d1       	rcall	.+546    	; 0x9a8 <USART_Transmit>
USART_Transmit('E');
 786:	85 e4       	ldi	r24, 0x45	; 69
 788:	0f d1       	rcall	.+542    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	0d d1       	rcall	.+538    	; 0x9a8 <USART_Transmit>
for (int i=0;i<6;i++)
 78e:	1e 86       	std	Y+14, r1	; 0x0e
 790:	1d 86       	std	Y+13, r1	; 0x0d
 792:	0c c0       	rjmp	.+24     	; 0x7ac <main+0x6c>
{USART_Transmit(GPSTime[i]);
 794:	8d 85       	ldd	r24, Y+13	; 0x0d
 796:	9e 85       	ldd	r25, Y+14	; 0x0e
 798:	fc 01       	movw	r30, r24
 79a:	e8 5e       	subi	r30, 0xE8	; 232
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
 79e:	80 81       	ld	r24, Z
 7a0:	03 d1       	rcall	.+518    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
USART_Transmit('I');
USART_Transmit('M');
USART_Transmit('E');
USART_Transmit(' ');
for (int i=0;i<6;i++)
 7a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 7a4:	9e 85       	ldd	r25, Y+14	; 0x0e
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	9e 87       	std	Y+14, r25	; 0x0e
 7aa:	8d 87       	std	Y+13, r24	; 0x0d
 7ac:	8d 85       	ldd	r24, Y+13	; 0x0d
 7ae:	9e 85       	ldd	r25, Y+14	; 0x0e
 7b0:	86 30       	cpi	r24, 0x06	; 6
 7b2:	91 05       	cpc	r25, r1
 7b4:	7c f3       	brlt	.-34     	; 0x794 <main+0x54>
{USART_Transmit(GPSTime[i]);
}
USART_Transmit(' ');
 7b6:	80 e2       	ldi	r24, 0x20	; 32
 7b8:	f7 d0       	rcall	.+494    	; 0x9a8 <USART_Transmit>
USART_Transmit('L');
 7ba:	8c e4       	ldi	r24, 0x4C	; 76
 7bc:	f5 d0       	rcall	.+490    	; 0x9a8 <USART_Transmit>
USART_Transmit('A');
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	f3 d0       	rcall	.+486    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
 7c2:	84 e5       	ldi	r24, 0x54	; 84
 7c4:	f1 d0       	rcall	.+482    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	ef d0       	rcall	.+478    	; 0x9a8 <USART_Transmit>
for (int i=0;i<9;i++)
 7ca:	1c 86       	std	Y+12, r1	; 0x0c
 7cc:	1b 86       	std	Y+11, r1	; 0x0b
 7ce:	0c c0       	rjmp	.+24     	; 0x7e8 <main+0xa8>
{USART_Transmit(Lat[i]);
 7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
 7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
 7d4:	fc 01       	movw	r30, r24
 7d6:	ea 5d       	subi	r30, 0xDA	; 218
 7d8:	fd 4f       	sbci	r31, 0xFD	; 253
 7da:	80 81       	ld	r24, Z
 7dc:	e5 d0       	rcall	.+458    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
USART_Transmit('L');
USART_Transmit('A');
USART_Transmit('T');
USART_Transmit(' ');
for (int i=0;i<9;i++)
 7de:	8b 85       	ldd	r24, Y+11	; 0x0b
 7e0:	9c 85       	ldd	r25, Y+12	; 0x0c
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	9c 87       	std	Y+12, r25	; 0x0c
 7e6:	8b 87       	std	Y+11, r24	; 0x0b
 7e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 7ea:	9c 85       	ldd	r25, Y+12	; 0x0c
 7ec:	89 30       	cpi	r24, 0x09	; 9
 7ee:	91 05       	cpc	r25, r1
 7f0:	7c f3       	brlt	.-34     	; 0x7d0 <main+0x90>
{USART_Transmit(Lat[i]);
}
USART_Transmit(' ');
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	d9 d0       	rcall	.+434    	; 0x9a8 <USART_Transmit>
USART_Transmit(NS[0]);
 7f6:	80 91 2f 02 	lds	r24, 0x022F
 7fa:	d6 d0       	rcall	.+428    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	d4 d0       	rcall	.+424    	; 0x9a8 <USART_Transmit>
USART_Transmit('L');
 800:	8c e4       	ldi	r24, 0x4C	; 76
 802:	d2 d0       	rcall	.+420    	; 0x9a8 <USART_Transmit>
USART_Transmit('O');
 804:	8f e4       	ldi	r24, 0x4F	; 79
 806:	d0 d0       	rcall	.+416    	; 0x9a8 <USART_Transmit>
USART_Transmit('N');
 808:	8e e4       	ldi	r24, 0x4E	; 78
 80a:	ce d0       	rcall	.+412    	; 0x9a8 <USART_Transmit>
USART_Transmit('G');
 80c:	87 e4       	ldi	r24, 0x47	; 71
 80e:	cc d0       	rcall	.+408    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 810:	80 e2       	ldi	r24, 0x20	; 32
 812:	ca d0       	rcall	.+404    	; 0x9a8 <USART_Transmit>
for (int i=0;i<10;i++)
 814:	1a 86       	std	Y+10, r1	; 0x0a
 816:	19 86       	std	Y+9, r1	; 0x09
 818:	0c c0       	rjmp	.+24     	; 0x832 <main+0xf2>
{USART_Transmit(Long[i]);
 81a:	89 85       	ldd	r24, Y+9	; 0x09
 81c:	9a 85       	ldd	r25, Y+10	; 0x0a
 81e:	fc 01       	movw	r30, r24
 820:	e5 5d       	subi	r30, 0xD5	; 213
 822:	fe 4f       	sbci	r31, 0xFE	; 254
 824:	80 81       	ld	r24, Z
 826:	c0 d0       	rcall	.+384    	; 0x9a8 <USART_Transmit>
USART_Transmit('L');
USART_Transmit('O');
USART_Transmit('N');
USART_Transmit('G');
USART_Transmit(' ');
for (int i=0;i<10;i++)
 828:	89 85       	ldd	r24, Y+9	; 0x09
 82a:	9a 85       	ldd	r25, Y+10	; 0x0a
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	9a 87       	std	Y+10, r25	; 0x0a
 830:	89 87       	std	Y+9, r24	; 0x09
 832:	89 85       	ldd	r24, Y+9	; 0x09
 834:	9a 85       	ldd	r25, Y+10	; 0x0a
 836:	8a 30       	cpi	r24, 0x0A	; 10
 838:	91 05       	cpc	r25, r1
 83a:	7c f3       	brlt	.-34     	; 0x81a <main+0xda>
{USART_Transmit(Long[i]);
}
USART_Transmit(' ');
 83c:	80 e2       	ldi	r24, 0x20	; 32
 83e:	b4 d0       	rcall	.+360    	; 0x9a8 <USART_Transmit>
USART_Transmit(EW[0]);
 840:	80 91 35 01 	lds	r24, 0x0135
 844:	b1 d0       	rcall	.+354    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 846:	80 e2       	ldi	r24, 0x20	; 32
 848:	af d0       	rcall	.+350    	; 0x9a8 <USART_Transmit>
USART_Transmit('A');
 84a:	81 e4       	ldi	r24, 0x41	; 65
 84c:	ad d0       	rcall	.+346    	; 0x9a8 <USART_Transmit>
USART_Transmit('L');
 84e:	8c e4       	ldi	r24, 0x4C	; 76
 850:	ab d0       	rcall	.+342    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
 852:	84 e5       	ldi	r24, 0x54	; 84
 854:	a9 d0       	rcall	.+338    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	a7 d0       	rcall	.+334    	; 0x9a8 <USART_Transmit>
for (int i=0;i<7;i++)
 85a:	18 86       	std	Y+8, r1	; 0x08
 85c:	1f 82       	std	Y+7, r1	; 0x07
 85e:	0c c0       	rjmp	.+24     	; 0x878 <main+0x138>
{USART_Transmit(Altitude[i]);
 860:	8f 81       	ldd	r24, Y+7	; 0x07
 862:	98 85       	ldd	r25, Y+8	; 0x08
 864:	fc 01       	movw	r30, r24
 866:	ec 5d       	subi	r30, 0xDC	; 220
 868:	fe 4f       	sbci	r31, 0xFE	; 254
 86a:	80 81       	ld	r24, Z
 86c:	9d d0       	rcall	.+314    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
USART_Transmit('A');
USART_Transmit('L');
USART_Transmit('T');
USART_Transmit(' ');
for (int i=0;i<7;i++)
 86e:	8f 81       	ldd	r24, Y+7	; 0x07
 870:	98 85       	ldd	r25, Y+8	; 0x08
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	98 87       	std	Y+8, r25	; 0x08
 876:	8f 83       	std	Y+7, r24	; 0x07
 878:	8f 81       	ldd	r24, Y+7	; 0x07
 87a:	98 85       	ldd	r25, Y+8	; 0x08
 87c:	87 30       	cpi	r24, 0x07	; 7
 87e:	91 05       	cpc	r25, r1
 880:	7c f3       	brlt	.-34     	; 0x860 <main+0x120>
{USART_Transmit(Altitude[i]);
}
USART_Transmit(' ');
 882:	80 e2       	ldi	r24, 0x20	; 32
 884:	91 d0       	rcall	.+290    	; 0x9a8 <USART_Transmit>
USART_Transmit('S');
 886:	83 e5       	ldi	r24, 0x53	; 83
 888:	8f d0       	rcall	.+286    	; 0x9a8 <USART_Transmit>
USART_Transmit('P');
 88a:	80 e5       	ldi	r24, 0x50	; 80
 88c:	8d d0       	rcall	.+282    	; 0x9a8 <USART_Transmit>
USART_Transmit('E');
 88e:	85 e4       	ldi	r24, 0x45	; 69
 890:	8b d0       	rcall	.+278    	; 0x9a8 <USART_Transmit>
USART_Transmit('E');
 892:	85 e4       	ldi	r24, 0x45	; 69
 894:	89 d0       	rcall	.+274    	; 0x9a8 <USART_Transmit>
USART_Transmit('D');
 896:	84 e4       	ldi	r24, 0x44	; 68
 898:	87 d0       	rcall	.+270    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	85 d0       	rcall	.+266    	; 0x9a8 <USART_Transmit>
for (int i=0;i<5;i++)
 89e:	1e 82       	std	Y+6, r1	; 0x06
 8a0:	1d 82       	std	Y+5, r1	; 0x05
 8a2:	0c c0       	rjmp	.+24     	; 0x8bc <main+0x17c>
{USART_Transmit(Speed[i]);
 8a4:	8d 81       	ldd	r24, Y+5	; 0x05
 8a6:	9e 81       	ldd	r25, Y+6	; 0x06
 8a8:	fc 01       	movw	r30, r24
 8aa:	ed 5e       	subi	r30, 0xED	; 237
 8ac:	fe 4f       	sbci	r31, 0xFE	; 254
 8ae:	80 81       	ld	r24, Z
 8b0:	7b d0       	rcall	.+246    	; 0x9a8 <USART_Transmit>
USART_Transmit('P');
USART_Transmit('E');
USART_Transmit('E');
USART_Transmit('D');
USART_Transmit(' ');
for (int i=0;i<5;i++)
 8b2:	8d 81       	ldd	r24, Y+5	; 0x05
 8b4:	9e 81       	ldd	r25, Y+6	; 0x06
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	9e 83       	std	Y+6, r25	; 0x06
 8ba:	8d 83       	std	Y+5, r24	; 0x05
 8bc:	8d 81       	ldd	r24, Y+5	; 0x05
 8be:	9e 81       	ldd	r25, Y+6	; 0x06
 8c0:	85 30       	cpi	r24, 0x05	; 5
 8c2:	91 05       	cpc	r25, r1
 8c4:	7c f3       	brlt	.-34     	; 0x8a4 <main+0x164>
{USART_Transmit(Speed[i]);
}
USART_Transmit(' ');
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	6f d0       	rcall	.+222    	; 0x9a8 <USART_Transmit>
USART_Transmit('D');
 8ca:	84 e4       	ldi	r24, 0x44	; 68
 8cc:	6d d0       	rcall	.+218    	; 0x9a8 <USART_Transmit>
USART_Transmit('I');
 8ce:	89 e4       	ldi	r24, 0x49	; 73
 8d0:	6b d0       	rcall	.+214    	; 0x9a8 <USART_Transmit>
USART_Transmit('R');
 8d2:	82 e5       	ldi	r24, 0x52	; 82
 8d4:	69 d0       	rcall	.+210    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 8d6:	80 e2       	ldi	r24, 0x20	; 32
 8d8:	67 d0       	rcall	.+206    	; 0x9a8 <USART_Transmit>
for (int i=0;i<5;i++)
 8da:	1c 82       	std	Y+4, r1	; 0x04
 8dc:	1b 82       	std	Y+3, r1	; 0x03
 8de:	0c c0       	rjmp	.+24     	; 0x8f8 <main+0x1b8>
{USART_Transmit(Heading[i]);
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	9c 81       	ldd	r25, Y+4	; 0x04
 8e4:	fc 01       	movw	r30, r24
 8e6:	e0 5d       	subi	r30, 0xD0	; 208
 8e8:	fd 4f       	sbci	r31, 0xFD	; 253
 8ea:	80 81       	ld	r24, Z
 8ec:	5d d0       	rcall	.+186    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
USART_Transmit('D');
USART_Transmit('I');
USART_Transmit('R');
USART_Transmit(' ');
for (int i=0;i<5;i++)
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	9c 81       	ldd	r25, Y+4	; 0x04
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	9c 83       	std	Y+4, r25	; 0x04
 8f6:	8b 83       	std	Y+3, r24	; 0x03
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	9c 81       	ldd	r25, Y+4	; 0x04
 8fc:	85 30       	cpi	r24, 0x05	; 5
 8fe:	91 05       	cpc	r25, r1
 900:	7c f3       	brlt	.-34     	; 0x8e0 <main+0x1a0>
{USART_Transmit(Heading[i]);
}
USART_Transmit(' ');
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	51 d0       	rcall	.+162    	; 0x9a8 <USART_Transmit>
USART_Transmit('D');
 906:	84 e4       	ldi	r24, 0x44	; 68
 908:	4f d0       	rcall	.+158    	; 0x9a8 <USART_Transmit>
USART_Transmit('A');
 90a:	81 e4       	ldi	r24, 0x41	; 65
 90c:	4d d0       	rcall	.+154    	; 0x9a8 <USART_Transmit>
USART_Transmit('T');
 90e:	84 e5       	ldi	r24, 0x54	; 84
 910:	4b d0       	rcall	.+150    	; 0x9a8 <USART_Transmit>
USART_Transmit('E');
 912:	85 e4       	ldi	r24, 0x45	; 69
 914:	49 d0       	rcall	.+146    	; 0x9a8 <USART_Transmit>
USART_Transmit(' ');
 916:	80 e2       	ldi	r24, 0x20	; 32
 918:	47 d0       	rcall	.+142    	; 0x9a8 <USART_Transmit>
for (int i=0;i<6;i++)
 91a:	1a 82       	std	Y+2, r1	; 0x02
 91c:	19 82       	std	Y+1, r1	; 0x01
 91e:	0c c0       	rjmp	.+24     	; 0x938 <main+0x1f8>
{USART_Transmit(GPSDate[i]);
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	9a 81       	ldd	r25, Y+2	; 0x02
 924:	fc 01       	movw	r30, r24
 926:	e2 5e       	subi	r30, 0xE2	; 226
 928:	fe 4f       	sbci	r31, 0xFE	; 254
 92a:	80 81       	ld	r24, Z
 92c:	3d d0       	rcall	.+122    	; 0x9a8 <USART_Transmit>
USART_Transmit('D');
USART_Transmit('A');
USART_Transmit('T');
USART_Transmit('E');
USART_Transmit(' ');
for (int i=0;i<6;i++)
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	9a 81       	ldd	r25, Y+2	; 0x02
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	9a 83       	std	Y+2, r25	; 0x02
 936:	89 83       	std	Y+1, r24	; 0x01
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	9a 81       	ldd	r25, Y+2	; 0x02
 93c:	86 30       	cpi	r24, 0x06	; 6
 93e:	91 05       	cpc	r25, r1
 940:	7c f3       	brlt	.-34     	; 0x920 <main+0x1e0>
{USART_Transmit(GPSDate[i]);
}

USART_Transmit('\r');
 942:	8d e0       	ldi	r24, 0x0D	; 13
 944:	31 d0       	rcall	.+98     	; 0x9a8 <USART_Transmit>
USART_Transmit('\n');
 946:	8a e0       	ldi	r24, 0x0A	; 10
 948:	2f d0       	rcall	.+94     	; 0x9a8 <USART_Transmit>
 94a:	12 cf       	rjmp	.-476    	; 0x770 <main+0x30>

0000094c <PrintNMEABuffer>:
}
} 
}

void PrintNMEABuffer(char* packet)
{
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	00 d0       	rcall	.+0      	; 0x952 <PrintNMEABuffer+0x6>
 952:	00 d0       	rcall	.+0      	; 0x954 <PrintNMEABuffer+0x8>
 954:	cd b7       	in	r28, 0x3d	; 61
 956:	de b7       	in	r29, 0x3e	; 62
 958:	9c 83       	std	Y+4, r25	; 0x04
 95a:	8b 83       	std	Y+3, r24	; 0x03
int i=0;
 95c:	1a 82       	std	Y+2, r1	; 0x02
 95e:	19 82       	std	Y+1, r1	; 0x01
 960:	0e c0       	rjmp	.+28     	; 0x97e <PrintNMEABuffer+0x32>
while(packet[i]!='*')
{
USART_Transmit(packet[i]);
 962:	29 81       	ldd	r18, Y+1	; 0x01
 964:	3a 81       	ldd	r19, Y+2	; 0x02
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	9c 81       	ldd	r25, Y+4	; 0x04
 96a:	fc 01       	movw	r30, r24
 96c:	e2 0f       	add	r30, r18
 96e:	f3 1f       	adc	r31, r19
 970:	80 81       	ld	r24, Z
 972:	1a d0       	rcall	.+52     	; 0x9a8 <USART_Transmit>
i++;
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	9a 81       	ldd	r25, Y+2	; 0x02
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	9a 83       	std	Y+2, r25	; 0x02
 97c:	89 83       	std	Y+1, r24	; 0x01
}

void PrintNMEABuffer(char* packet)
{
int i=0;
while(packet[i]!='*')
 97e:	29 81       	ldd	r18, Y+1	; 0x01
 980:	3a 81       	ldd	r19, Y+2	; 0x02
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	9c 81       	ldd	r25, Y+4	; 0x04
 986:	fc 01       	movw	r30, r24
 988:	e2 0f       	add	r30, r18
 98a:	f3 1f       	adc	r31, r19
 98c:	80 81       	ld	r24, Z
 98e:	8a 32       	cpi	r24, 0x2A	; 42
 990:	41 f7       	brne	.-48     	; 0x962 <PrintNMEABuffer+0x16>
{
USART_Transmit(packet[i]);
i++;
}

USART_Transmit(0xa);
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	09 d0       	rcall	.+18     	; 0x9a8 <USART_Transmit>
USART_Transmit(0xd);
 996:	8d e0       	ldi	r24, 0x0D	; 13
 998:	07 d0       	rcall	.+14     	; 0x9a8 <USART_Transmit>


}
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	cf 91       	pop	r28
 9a4:	df 91       	pop	r29
 9a6:	08 95       	ret

000009a8 <USART_Transmit>:




void USART_Transmit( unsigned char data )
{
 9a8:	df 93       	push	r29
 9aa:	cf 93       	push	r28
 9ac:	0f 92       	push	r0
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) )
 9b4:	e0 ec       	ldi	r30, 0xC0	; 192
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	88 2f       	mov	r24, r24
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	80 72       	andi	r24, 0x20	; 32
 9c0:	90 70       	andi	r25, 0x00	; 0
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	b9 f3       	breq	.-18     	; 0x9b4 <USART_Transmit+0xc>
;
/* Put data into buffer, sends the data */
UDR0 = data;
 9c6:	e6 ec       	ldi	r30, 0xC6	; 198
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	89 81       	ldd	r24, Y+1	; 0x01
 9cc:	80 83       	st	Z, r24
}
 9ce:	0f 90       	pop	r0
 9d0:	cf 91       	pop	r28
 9d2:	df 91       	pop	r29
 9d4:	08 95       	ret

000009d6 <Term_Send_Value_as_Digits>:
//***************************
// Convert byte to 3 ASCII digits and send
//***************************
void Term_Send_Value_as_Digits( uint16_t value )
{
 9d6:	df 93       	push	r29
 9d8:	cf 93       	push	r28
 9da:	00 d0       	rcall	.+0      	; 0x9dc <Term_Send_Value_as_Digits+0x6>
 9dc:	0f 92       	push	r0
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	9b 83       	std	Y+3, r25	; 0x03
 9e4:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char digit;
	
	
    
    digit = '0';
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	89 83       	std	Y+1, r24	; 0x01
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <Term_Send_Value_as_Digits+0x28>
    while( value >= 100 )                // Still larger than 100 ?
    {
        digit++;                         // Increment first digit
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
 9ee:	8f 5f       	subi	r24, 0xFF	; 255
 9f0:	89 83       	std	Y+1, r24	; 0x01
        value -= 100;
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	9b 81       	ldd	r25, Y+3	; 0x03
 9f6:	84 56       	subi	r24, 0x64	; 100
 9f8:	90 40       	sbci	r25, 0x00	; 0
 9fa:	9b 83       	std	Y+3, r25	; 0x03
 9fc:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char digit;
	
	
    
    digit = '0';
    while( value >= 100 )                // Still larger than 100 ?
 9fe:	8a 81       	ldd	r24, Y+2	; 0x02
 a00:	9b 81       	ldd	r25, Y+3	; 0x03
 a02:	84 36       	cpi	r24, 0x64	; 100
 a04:	91 05       	cpc	r25, r1
 a06:	90 f7       	brcc	.-28     	; 0x9ec <Term_Send_Value_as_Digits+0x16>
    {
        digit++;                         // Increment first digit
        value -= 100;
    }
    
    USART_Transmit( digit );                  // Send first digit
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	ce df       	rcall	.-100    	; 0x9a8 <USART_Transmit>
    
    digit = '0';
 a0c:	80 e3       	ldi	r24, 0x30	; 48
 a0e:	89 83       	std	Y+1, r24	; 0x01
 a10:	08 c0       	rjmp	.+16     	; 0xa22 <Term_Send_Value_as_Digits+0x4c>
    while( value >= 10 )                 // Still larger than 10 ?
    {
        digit++;                         // Increment second digit
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	8f 5f       	subi	r24, 0xFF	; 255
 a16:	89 83       	std	Y+1, r24	; 0x01
        value -= 10;
 a18:	8a 81       	ldd	r24, Y+2	; 0x02
 a1a:	9b 81       	ldd	r25, Y+3	; 0x03
 a1c:	0a 97       	sbiw	r24, 0x0a	; 10
 a1e:	9b 83       	std	Y+3, r25	; 0x03
 a20:	8a 83       	std	Y+2, r24	; 0x02
    }
    
    USART_Transmit( digit );                  // Send first digit
    
    digit = '0';
    while( value >= 10 )                 // Still larger than 10 ?
 a22:	8a 81       	ldd	r24, Y+2	; 0x02
 a24:	9b 81       	ldd	r25, Y+3	; 0x03
 a26:	8a 30       	cpi	r24, 0x0A	; 10
 a28:	91 05       	cpc	r25, r1
 a2a:	98 f7       	brcc	.-26     	; 0xa12 <Term_Send_Value_as_Digits+0x3c>
    {
        digit++;                         // Increment second digit
        value -= 10;
    }
    
    USART_Transmit( digit );                  // Send second digit
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
 a2e:	bc df       	rcall	.-136    	; 0x9a8 <USART_Transmit>
    
    USART_Transmit( '0' + value );            // Send third digit
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	80 5d       	subi	r24, 0xD0	; 208
 a34:	b9 df       	rcall	.-142    	; 0x9a8 <USART_Transmit>
}
 a36:	0f 90       	pop	r0
 a38:	0f 90       	pop	r0
 a3a:	0f 90       	pop	r0
 a3c:	cf 91       	pop	r28
 a3e:	df 91       	pop	r29
 a40:	08 95       	ret

00000a42 <Term_Send_Value_as_Digits8>:




void Term_Send_Value_as_Digits8( uint8_t value )
{
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	00 d0       	rcall	.+0      	; 0xa48 <Term_Send_Value_as_Digits8+0x6>
 a48:	cd b7       	in	r28, 0x3d	; 61
 a4a:	de b7       	in	r29, 0x3e	; 62
 a4c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char digit;
	
	
    
    digit = '0';
 a4e:	80 e3       	ldi	r24, 0x30	; 48
 a50:	89 83       	std	Y+1, r24	; 0x01
 a52:	06 c0       	rjmp	.+12     	; 0xa60 <Term_Send_Value_as_Digits8+0x1e>
    while( value >= 100 )                // Still larger than 100 ?
    {
        digit++;                         // Increment first digit
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	89 83       	std	Y+1, r24	; 0x01
        value -= 100;
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	84 56       	subi	r24, 0x64	; 100
 a5e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char digit;
	
	
    
    digit = '0';
    while( value >= 100 )                // Still larger than 100 ?
 a60:	8a 81       	ldd	r24, Y+2	; 0x02
 a62:	84 36       	cpi	r24, 0x64	; 100
 a64:	b8 f7       	brcc	.-18     	; 0xa54 <Term_Send_Value_as_Digits8+0x12>
    {
        digit++;                         // Increment first digit
        value -= 100;
    }
    
    USART_Transmit( digit );                  // Send first digit
 a66:	89 81       	ldd	r24, Y+1	; 0x01
 a68:	9f df       	rcall	.-194    	; 0x9a8 <USART_Transmit>
    
    digit = '0';
 a6a:	80 e3       	ldi	r24, 0x30	; 48
 a6c:	89 83       	std	Y+1, r24	; 0x01
 a6e:	06 c0       	rjmp	.+12     	; 0xa7c <Term_Send_Value_as_Digits8+0x3a>
    while( value >= 10 )                 // Still larger than 10 ?
    {
        digit++;                         // Increment second digit
 a70:	89 81       	ldd	r24, Y+1	; 0x01
 a72:	8f 5f       	subi	r24, 0xFF	; 255
 a74:	89 83       	std	Y+1, r24	; 0x01
        value -= 10;
 a76:	8a 81       	ldd	r24, Y+2	; 0x02
 a78:	8a 50       	subi	r24, 0x0A	; 10
 a7a:	8a 83       	std	Y+2, r24	; 0x02
    }
    
    USART_Transmit( digit );                  // Send first digit
    
    digit = '0';
    while( value >= 10 )                 // Still larger than 10 ?
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	8a 30       	cpi	r24, 0x0A	; 10
 a80:	b8 f7       	brcc	.-18     	; 0xa70 <Term_Send_Value_as_Digits8+0x2e>
    {
        digit++;                         // Increment second digit
        value -= 10;
    }
    
    USART_Transmit( digit );                  // Send second digit
 a82:	89 81       	ldd	r24, Y+1	; 0x01
 a84:	91 df       	rcall	.-222    	; 0x9a8 <USART_Transmit>
    
    USART_Transmit( '0' + value );            // Send third digit
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	80 5d       	subi	r24, 0xD0	; 208
 a8a:	8e df       	rcall	.-228    	; 0x9a8 <USART_Transmit>
}
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	cf 91       	pop	r28
 a92:	df 91       	pop	r29
 a94:	08 95       	ret

00000a96 <strncmp>:
 a96:	fb 01       	movw	r30, r22
 a98:	dc 01       	movw	r26, r24
 a9a:	41 50       	subi	r20, 0x01	; 1
 a9c:	50 40       	sbci	r21, 0x00	; 0
 a9e:	30 f0       	brcs	.+12     	; 0xaac <strncmp+0x16>
 aa0:	8d 91       	ld	r24, X+
 aa2:	01 90       	ld	r0, Z+
 aa4:	80 19       	sub	r24, r0
 aa6:	19 f4       	brne	.+6      	; 0xaae <strncmp+0x18>
 aa8:	00 20       	and	r0, r0
 aaa:	b9 f7       	brne	.-18     	; 0xa9a <strncmp+0x4>
 aac:	88 1b       	sub	r24, r24
 aae:	99 0b       	sbc	r25, r25
 ab0:	08 95       	ret

00000ab2 <_exit>:
 ab2:	f8 94       	cli

00000ab4 <__stop_program>:
 ab4:	ff cf       	rjmp	.-2      	; 0xab4 <__stop_program>
