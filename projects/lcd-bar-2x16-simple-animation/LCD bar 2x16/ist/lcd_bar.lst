
AVRASM ver. 2.1.30  C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm Wed Jul 28 00:50:02 2010

C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1051): warning: Register r4 already defined by the .DEF directive
C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1052): warning: Register r6 already defined by the .DEF directive
C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1053): warning: Register r9 already defined by the .DEF directive
C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1054): warning: Register r8 already defined by the .DEF directive
C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1055): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8535
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 128 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _j=R4
                 	.DEF _k=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 c037      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _char0:
000015 0000
000016 0000
000017 0000
000018 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _char1:
000019 f0f0
00001a f0f0
00001b f0f0
00001c f0f0      	.DB  0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0
                 _char2:
00001d f8f8
00001e f8f8
00001f f8f8
000020 f8f8      	.DB  0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8
                 _char3:
000021 fcfc
000022 fcfc
000023 fcfc
000024 fcfc      	.DB  0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC
                 _char4:
000025 fefe
000026 fefe
000027 fefe
000028 fefe      	.DB  0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE
                 _char5:
000029 ffff
00002a ffff
00002b ffff
00002c ffff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 
                 _0x0:
00002d 414b
00002e 4152
00002f 544b
000030 5245      	.DB  0x4B,0x41,0x52,0x41,0x4B,0x54,0x45,0x52
000031 3a20
C:\Users\Nico\Desktop\LCD bar 2x16\List\lcd_bar.asm(1098): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x20,0x3A,0x0
                 _0x2000003:
000033 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000034 0002      	.DW  0x02
000035 00e0      	.DW  __base_y_G100
000036 0066      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003f e1f8      	LDI  R31,0x18
000040 bdf1      	OUT  WDTCR,R31
000041 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(0x200)
000049 e092      	LDI  R25,HIGH(0x200)
00004a e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(0x25F)
000061 bfed      	OUT  SPL,R30
000062 e0e2      	LDI  R30,HIGH(0x25F)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 eec0      	LDI  R28,LOW(0xE0)
000065 e0d0      	LDI  R29,HIGH(0xE0)
                 
000066 c01a      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;/*
                 ;NICOLAUS ADI NUGROHO
                 ;WWW.ANTARBLOG.COM
                 ;UCUPZ_LC@YAHOO.CO.ID
                 ;*/
                 ;
                 ;//INISIALISASI ATMEGA8535
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;//LCD PADA PORTC
                 ;#asm
                 .equ __lcd_port=0x15 ;PORTC
                 ; 0000 000D #endasm
                 ;
                 ;//MEMASUKAN RUTIN-RUTIN LCD DAN DELAY
                 ;#include <lcd.h>
                 ;#include <delay.h>
                 ;
                 ;int j,k;
                 ;
                 ;typedef unsigned char byte;
                 ;
                 ;//GAMBAR PADA 1 KOLOM
                 ;flash byte char0[8]={
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,
                 ;0b00000000,};
                 ;
                 ;flash byte char1[8]={
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000,
                 ;0b11110000};
                 ;
                 ;flash byte char2[8]={
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000,
                 ;0b11111000};
                 ;
                 ;flash byte char3[8]={
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100,
                 ;0b11111100};
                 ;
                 ;flash byte char4[8]={
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110,
                 ;0b11111110};
                 ;
                 ;flash byte char5[8]={
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111,
                 ;0b11111111};
                 ;
                 ;//FUNGSI UNTUK DEFINISI KARAKTER
                 ;void define_char(byte flash *pc,byte char_code)
                 ; 0000 0056 {
                 
                 	.CSEG
                 _define_char:
                 ; 0000 0057 byte i,a;
                 ; 0000 0058 a=(char_code<<3)|0x40;
000067 d165      	RCALL __SAVELOCR2
                 ;	*pc -> Y+3
                 ;	char_code -> Y+2
                 ;	i -> R17
                 ;	a -> R16
000068 81ea      	LDD  R30,Y+2
000069 0fee      	LSL  R30
00006a 0fee      	LSL  R30
00006b 0fee      	LSL  R30
00006c 64e0      	ORI  R30,0x40
00006d 2f0e      	MOV  R16,R30
                 ; 0000 0059 for (i=0; i<8; i++) lcd_write_byte(a++,*pc++);
00006e e010      	LDI  R17,LOW(0)
                 _0x4:
00006f 3018      	CPI  R17,8
000070 f468      	BRSH _0x5
000071 930a      	ST   -Y,R16
000072 9503      	INC  R16
000073 81ec      	LDD  R30,Y+4
000074 81fd      	LDD  R31,Y+4+1
000075 9631      	ADIW R30,1
000076 83ec      	STD  Y+4,R30
000077 83fd      	STD  Y+4+1,R31
000078 9731      	SBIW R30,1
000079 91e4      	LPM  R30,Z
00007a 93ea      	ST   -Y,R30
00007b d097      	RCALL _lcd_write_byte
00007c 5f1f      	SUBI R17,-1
00007d cff1      	RJMP _0x4
                 _0x5:
                 ; 0000 005A }
00007e d151      	RCALL __LOADLOCR2
00007f 9625      	ADIW R28,5
000080 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 005D {
                 _main:
                 ; 0000 005E //INISIALISASI LCD
                 ; 0000 005F lcd_init(16);
000081 e1e0      	LDI  R30,LOW(16)
000082 93ea      	ST   -Y,R30
000083 d0f7      	RCALL _lcd_init
                 ; 0000 0060 
                 ; 0000 0061 //MEMBERI NAMA KARAKTER (0,1,2,3,4,5)
                 ; 0000 0062 define_char(char0,0);
000084 e2ea      	LDI  R30,LOW(_char0*2)
000085 e0f0      	LDI  R31,HIGH(_char0*2)
000086 d120      	RCALL SUBOPT_0x0
000087 d122      	RCALL SUBOPT_0x1
000088 dfde      	RCALL _define_char
                 ; 0000 0063 define_char(char1,1);
000089 e3e2      	LDI  R30,LOW(_char1*2)
00008a e0f0      	LDI  R31,HIGH(_char1*2)
00008b d11b      	RCALL SUBOPT_0x0
00008c d120      	RCALL SUBOPT_0x2
00008d dfd9      	RCALL _define_char
                 ; 0000 0064 define_char(char2,2);
00008e e3ea      	LDI  R30,LOW(_char2*2)
00008f e0f0      	LDI  R31,HIGH(_char2*2)
000090 d116      	RCALL SUBOPT_0x0
000091 e0e2      	LDI  R30,LOW(2)
000092 d11d      	RCALL SUBOPT_0x3
                 ; 0000 0065 define_char(char3,3);
000093 e4e2      	LDI  R30,LOW(_char3*2)
000094 e0f0      	LDI  R31,HIGH(_char3*2)
000095 d111      	RCALL SUBOPT_0x0
000096 e0e3      	LDI  R30,LOW(3)
000097 d118      	RCALL SUBOPT_0x3
                 ; 0000 0066 define_char(char4,4);
000098 e4ea      	LDI  R30,LOW(_char4*2)
000099 e0f0      	LDI  R31,HIGH(_char4*2)
00009a d10c      	RCALL SUBOPT_0x0
00009b e0e4      	LDI  R30,LOW(4)
00009c d113      	RCALL SUBOPT_0x3
                 ; 0000 0067 define_char(char5,5);
00009d e5e2      	LDI  R30,LOW(_char5*2)
00009e e0f0      	LDI  R31,HIGH(_char5*2)
00009f d107      	RCALL SUBOPT_0x0
0000a0 e0e5      	LDI  R30,LOW(5)
0000a1 d10e      	RCALL SUBOPT_0x3
                 ; 0000 0068 
                 ; 0000 0069 //KURSOR PADA 0,0
                 ; 0000 006A lcd_gotoxy(0,0);
0000a2 d107      	RCALL SUBOPT_0x1
0000a3 d106      	RCALL SUBOPT_0x1
0000a4 d085      	RCALL _lcd_gotoxy
                 ; 0000 006B lcd_putsf("KARAKTER :");
                +
0000a5 e5ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000a6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000a7 d0ff      	RCALL SUBOPT_0x0
0000a8 d0b2      	RCALL _lcd_putsf
                 ; 0000 006C 
                 ; 0000 006D while (1)
                 _0x6:
                 ; 0000 006E {
                 ; 0000 006F //16 KOLOM PADA LCD-->MAJU
                 ; 0000 0070 for (j=0;j<=16;j++)
0000a9 2444      	CLR  R4
0000aa 2455      	CLR  R5
                 _0xA:
0000ab e1e0      	LDI  R30,LOW(16)
0000ac e0f0      	LDI  R31,HIGH(16)
0000ad 15e4      	CP   R30,R4
0000ae 05f5      	CPC  R31,R5
0000af f0dc      	BRLT _0xB
                 ; 0000 0071 {
                 ; 0000 0072 lcd_gotoxy(j,1);
0000b0 d101      	RCALL SUBOPT_0x4
0000b1 d078      	RCALL _lcd_gotoxy
                 ; 0000 0073     //5 BARIS TIAP KOLOM
                 ; 0000 0074     for (k=0;k<=5;k++)
0000b2 2466      	CLR  R6
0000b3 2477      	CLR  R7
                 _0xD:
0000b4 e0e5      	LDI  R30,LOW(5)
0000b5 e0f0      	LDI  R31,HIGH(5)
0000b6 15e6      	CP   R30,R6
0000b7 05f7      	CPC  R31,R7
0000b8 f074      	BRLT _0xE
                 ; 0000 0075     {lcd_gotoxy(j-1,1);lcd_putchar(5);
0000b9 01f2      	MOVW R30,R4
0000ba 9731      	SBIW R30,1
0000bb 93ea      	ST   -Y,R30
0000bc d0f0      	RCALL SUBOPT_0x2
0000bd d06c      	RCALL _lcd_gotoxy
0000be e0e5      	LDI  R30,LOW(5)
0000bf 93ea      	ST   -Y,R30
0000c0 d083      	RCALL _lcd_putchar
                 ; 0000 0076     lcd_gotoxy(j,1);lcd_putchar(k);delay_ms(2);
0000c1 d0f0      	RCALL SUBOPT_0x4
0000c2 d0f1      	RCALL SUBOPT_0x5
                 ; 0000 0077     };
0000c3 01f3      	MOVW R30,R6
0000c4 9631      	ADIW R30,1
0000c5 013f      	MOVW R6,R30
0000c6 cfed      	RJMP _0xD
                 _0xE:
                 ; 0000 0078 }
0000c7 01f2      	MOVW R30,R4
0000c8 9631      	ADIW R30,1
0000c9 012f      	MOVW R4,R30
0000ca cfe0      	RJMP _0xA
                 _0xB:
                 ; 0000 0079 //MUNDUR
                 ; 0000 007A for (j=16;j>-1;j--)
0000cb e1e0      	LDI  R30,LOW(16)
0000cc e0f0      	LDI  R31,HIGH(16)
0000cd 012f      	MOVW R4,R30
                 _0x10:
0000ce efef      	LDI  R30,LOW(65535)
0000cf efff      	LDI  R31,HIGH(65535)
0000d0 15e4      	CP   R30,R4
0000d1 05f5      	CPC  R31,R5
0000d2 f4a4      	BRGE _0x11
                 ; 0000 007B {
                 ; 0000 007C lcd_gotoxy(j,1);
0000d3 d0de      	RCALL SUBOPT_0x4
0000d4 d055      	RCALL _lcd_gotoxy
                 ; 0000 007D     for (k=5;k>-1;k--)
0000d5 e0e5      	LDI  R30,LOW(5)
0000d6 e0f0      	LDI  R31,HIGH(5)
0000d7 013f      	MOVW R6,R30
                 _0x13:
0000d8 efef      	LDI  R30,LOW(65535)
0000d9 efff      	LDI  R31,HIGH(65535)
0000da 15e6      	CP   R30,R6
0000db 05f7      	CPC  R31,R7
0000dc f434      	BRGE _0x14
                 ; 0000 007E     {
                 ; 0000 007F     lcd_gotoxy(j,1);lcd_putchar(k);delay_ms(2);
0000dd d0d4      	RCALL SUBOPT_0x4
0000de d0d5      	RCALL SUBOPT_0x5
                 ; 0000 0080     };
0000df 01f3      	MOVW R30,R6
0000e0 9731      	SBIW R30,1
0000e1 013f      	MOVW R6,R30
0000e2 cff5      	RJMP _0x13
                 _0x14:
                 ; 0000 0081 }
0000e3 01f2      	MOVW R30,R4
0000e4 9731      	SBIW R30,1
0000e5 012f      	MOVW R4,R30
0000e6 cfe7      	RJMP _0x10
                 _0x11:
                 ; 0000 0082 
                 ; 0000 0083 }
0000e7 cfc1      	RJMP _0x6
                 ; 0000 0084 }
                 _0x15:
0000e8 cfff      	RJMP _0x15
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
0000e9 e0ff          ldi   r31,15
                 __lcd_delay0:
0000ea 95fa          dec   r31
0000eb f7f1          brne  __lcd_delay0
0000ec 9508      	RET
                 __lcd_ready:
0000ed b3a4          in    r26,__lcd_direction
0000ee 70af          andi  r26,0xf                 ;set as input
0000ef bba4          out   __lcd_direction,r26
0000f0 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000f1 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0000f2 dff6      	RCALL __lcd_delay_G100
0000f3 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000f4 dff4      	RCALL __lcd_delay_G100
0000f5 b3a3          in    r26,__lcd_pin
0000f6 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000f7 dff1      	RCALL __lcd_delay_G100
0000f8 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000f9 dfef      	RCALL __lcd_delay_G100
0000fa 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000fb fda7          sbrc  r26,__lcd_busy_flag
0000fc cff5          rjmp  __lcd_busy
0000fd 9508      	RET
                 __lcd_write_nibble_G100:
0000fe 7fa0          andi  r26,0xf0
0000ff 2bab          or    r26,r27
000100 bba5          out   __lcd_port,r26          ;write
000101 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000102 dfe6      	RCALL __lcd_delay_G100
000103 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000104 dfe4      	RCALL __lcd_delay_G100
000105 9508      	RET
                 __lcd_write_data:
000106 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000107 b3a4          in    r26,__lcd_direction
000108 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000109 bba4          out   __lcd_direction,r26
00010a b3b5          in    r27,__lcd_port
00010b 70bf          andi  r27,0xf
00010c 81a8          ld    r26,y
00010d dff0      	RCALL __lcd_write_nibble_G100
00010e 81a8          ld    r26,y
00010f 95a2          swap  r26
000110 dfed      	RCALL __lcd_write_nibble_G100
000111 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000112 c092      	RJMP _0x2020001
                 _lcd_write_byte:
000113 dfd9      	RCALL __lcd_ready
000114 81e9      	LDD  R30,Y+1
000115 d0a5      	RCALL SUBOPT_0x6
000116 dfd6      	RCALL __lcd_ready
000117 9aa8          sbi   __lcd_port,__lcd_rs     ;RS=1
000118 81e8      	LD   R30,Y
000119 d0a1      	RCALL SUBOPT_0x6
00011a c01a      	RJMP _0x2020002
                 __lcd_read_nibble_G100:
00011b 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00011c dfcc      	RCALL __lcd_delay_G100
00011d b3e3          in    r30,__lcd_pin           ;read
00011e 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00011f dfc9      	RCALL __lcd_delay_G100
000120 7fe0          andi  r30,0xf0
000121 9508      	RET
                 _lcd_read_byte0_G100:
000122 dfc6      	RCALL __lcd_delay_G100
000123 dff7      	RCALL __lcd_read_nibble_G100
000124 2fae          mov   r26,r30
000125 dff5      	RCALL __lcd_read_nibble_G100
000126 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000127 95e2          swap  r30
000128 2bea          or    r30,r26
000129 9508      	RET
                 _lcd_gotoxy:
00012a dfc2      	RCALL __lcd_ready
00012b 81e8      	LD   R30,Y
00012c e0f0      	LDI  R31,0
00012d 52e0      	SUBI R30,LOW(-__base_y_G100)
00012e 4fff      	SBCI R31,HIGH(-__base_y_G100)
00012f 81e0      	LD   R30,Z
000130 81a9      	LDD  R26,Y+1
000131 0fea      	ADD  R30,R26
000132 d088      	RCALL SUBOPT_0x6
000133 8099      	LDD  R9,Y+1
000134 8088      	LDD  R8,Y+0
                 _0x2020002:
000135 9622      	ADIW R28,2
000136 9508      	RET
                 _lcd_clear:
000137 dfb5      	RCALL __lcd_ready
000138 e0e2      	LDI  R30,LOW(2)
000139 d081      	RCALL SUBOPT_0x6
00013a dfb2      	RCALL __lcd_ready
00013b e0ec      	LDI  R30,LOW(12)
00013c d07e      	RCALL SUBOPT_0x6
00013d dfaf      	RCALL __lcd_ready
00013e d06e      	RCALL SUBOPT_0x2
00013f dfc6      	RCALL __lcd_write_data
000140 e0e0      	LDI  R30,LOW(0)
000141 2e8e      	MOV  R8,R30
000142 2e9e      	MOV  R9,R30
000143 9508      	RET
                 _lcd_putchar:
000144 93ef          push r30
000145 93ff          push r31
000146 81a8          ld   r26,y
000147 9468          set
000148 30aa          cpi  r26,10
000149 f019          breq __lcd_putchar1
00014a 94e8          clt
00014b 149b      	CP   R9,R11
00014c f028      	BRLO _0x2000004
                 	__lcd_putchar1:
00014d 9483      	INC  R8
00014e d05b      	RCALL SUBOPT_0x1
00014f 928a      	ST   -Y,R8
000150 dfd9      	RCALL _lcd_gotoxy
000151 f036      	brts __lcd_putchar0
                 _0x2000004:
000152 9493      	INC  R9
000153 df99          rcall __lcd_ready
000154 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
000155 81a8          ld   r26,y
000156 93aa          st   -y,r26
000157 dfae          rcall __lcd_write_data
                 __lcd_putchar0:
000158 91ff          pop  r31
000159 91ef          pop  r30
00015a c04a      	RJMP _0x2020001
                 _lcd_putsf:
00015b 931a      	ST   -Y,R17
                 _0x2000008:
00015c 81e9      	LDD  R30,Y+1
00015d 81fa      	LDD  R31,Y+1+1
00015e 9631      	ADIW R30,1
00015f 83e9      	STD  Y+1,R30
000160 83fa      	STD  Y+1+1,R31
000161 9731      	SBIW R30,1
000162 91e4      	LPM  R30,Z
000163 2f1e      	MOV  R17,R30
000164 30e0      	CPI  R30,0
000165 f019      	BREQ _0x200000A
000166 931a      	ST   -Y,R17
000167 dfdc      	RCALL _lcd_putchar
000168 cff3      	RJMP _0x2000008
                 _0x200000A:
000169 8118      	LDD  R17,Y+0
00016a 9623      	ADIW R28,3
00016b 9508      	RET
                 __long_delay_G100:
00016c 27aa          clr   r26
00016d 27bb          clr   r27
                 __long_delay0:
00016e 9711          sbiw  r26,1         ;2 cycles
00016f f7f1          brne  __long_delay0 ;2 cycles
000170 9508      	RET
                 __lcd_init_write_G100:
000171 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000172 b3a4          in    r26,__lcd_direction
000173 6fa7          ori   r26,0xf7                ;set as output
000174 bba4          out   __lcd_direction,r26
000175 b3b5          in    r27,__lcd_port
000176 70bf          andi  r27,0xf
000177 81a8          ld    r26,y
000178 df85      	RCALL __lcd_write_nibble_G100
000179 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00017a c02a      	RJMP _0x2020001
                 _lcd_init:
00017b 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00017c 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
00017d 80b8      	LDD  R11,Y+0
00017e 81e8      	LD   R30,Y
00017f 58e0      	SUBI R30,-LOW(128)
                +
000180 93e0 00e2+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000182 81e8      	LD   R30,Y
000183 54e0      	SUBI R30,-LOW(192)
                +
000184 93e0 00e3+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000186 d036      	RCALL SUBOPT_0x7
000187 d035      	RCALL SUBOPT_0x7
000188 d034      	RCALL SUBOPT_0x7
000189 dfe2      	RCALL __long_delay_G100
00018a e2e0      	LDI  R30,LOW(32)
00018b 93ea      	ST   -Y,R30
00018c dfe4      	RCALL __lcd_init_write_G100
00018d dfde      	RCALL __long_delay_G100
00018e e2e8      	LDI  R30,LOW(40)
00018f d02b      	RCALL SUBOPT_0x6
000190 dfdb      	RCALL __long_delay_G100
000191 e0e4      	LDI  R30,LOW(4)
000192 d028      	RCALL SUBOPT_0x6
000193 dfd8      	RCALL __long_delay_G100
000194 e8e5      	LDI  R30,LOW(133)
000195 d025      	RCALL SUBOPT_0x6
000196 dfd5      	RCALL __long_delay_G100
000197 b3a4          in    r26,__lcd_direction
000198 70af          andi  r26,0xf                 ;set as input
000199 bba4          out   __lcd_direction,r26
00019a 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00019b df86      	RCALL _lcd_read_byte0_G100
00019c 30e5      	CPI  R30,LOW(0x5)
00019d f011      	BREQ _0x200000B
00019e e0e0      	LDI  R30,LOW(0)
00019f c005      	RJMP _0x2020001
                 _0x200000B:
0001a0 df4c      	RCALL __lcd_ready
0001a1 e0e6      	LDI  R30,LOW(6)
0001a2 d018      	RCALL SUBOPT_0x6
0001a3 df93      	RCALL _lcd_clear
0001a4 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
0001a5 9621      	ADIW R28,1
0001a6 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
0000e0           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0001a7 93fa      	ST   -Y,R31
0001a8 93ea      	ST   -Y,R30
0001a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001aa e0e0      	LDI  R30,LOW(0)
0001ab 93ea      	ST   -Y,R30
0001ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0001ad e0e1      	LDI  R30,LOW(1)
0001ae 93ea      	ST   -Y,R30
0001af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001b0 93ea      	ST   -Y,R30
0001b1 ceb5      	RJMP _define_char
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0001b2 924a      	ST   -Y,R4
0001b3 cff9      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0001b4 df75      	RCALL _lcd_gotoxy
0001b5 926a      	ST   -Y,R6
0001b6 df8d      	RCALL _lcd_putchar
0001b7 e0e2      	LDI  R30,LOW(2)
0001b8 e0f0      	LDI  R31,HIGH(2)
0001b9 dfed      	RCALL SUBOPT_0x0
0001ba c006      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0001bb 93ea      	ST   -Y,R30
0001bc cf49      	RJMP __lcd_write_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0001bd dfae      	RCALL __long_delay_G100
0001be e3e0      	LDI  R30,LOW(48)
0001bf 93ea      	ST   -Y,R30
0001c0 cfb0      	RJMP __lcd_init_write_G100
                 
                 
                 	.CSEG
                 _delay_ms:
0001c1 91e9      	ld   r30,y+
0001c2 91f9      	ld   r31,y+
0001c3 9630      	adiw r30,0
0001c4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001c5 ec8d     +LDI R24 , LOW ( 0xACD )
0001c6 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0001c7 9701     +SBIW R24 , 1
0001c8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0001c9 95a8      	wdr
0001ca 9731      	sbiw r30,1
0001cb f7c9      	brne __delay_ms0
                 __delay_ms1:
0001cc 9508      	ret
                 
                 __SAVELOCR2:
0001cd 931a      	ST   -Y,R17
0001ce 930a      	ST   -Y,R16
0001cf 9508      	RET
                 
                 __LOADLOCR2:
0001d0 8119      	LDD  R17,Y+1
0001d1 8108      	LD   R16,Y
0001d2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :  10 r5 :   3 r6 :   9 r7 :   3 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:   9 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  34 r27:   8 r28:   5 r29:   1 r30: 122 r31:  35 
x  :   3 y  :  49 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   9 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   2 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  10 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   8 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   4 cpi   :   4 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   8 
inc   :   3 ld    :  13 ldd   :  12 ldi   :  65 lds   :   0 lpm   :  11 
lsl   :   3 lsr   :   0 mov   :   5 movw  :  14 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   3 out   :  13 
pop   :   2 push  :   2 rcall :  86 ret   :  17 reti  :   0 rjmp  :  42 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 sbi   :  10 sbic  :   0 
sbis  :   0 sbiw  :  11 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  24 std   :   4 
sts   :   2 sub   :   0 subi  :   4 swap  :   2 tst   :   0 wdr   :   1 

Instructions used: 46 out of 114 (40.4%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003a6    864     70    934    8192  11.4%
[.dseg] 0x000060 0x0000e4      0      4      4     512   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
