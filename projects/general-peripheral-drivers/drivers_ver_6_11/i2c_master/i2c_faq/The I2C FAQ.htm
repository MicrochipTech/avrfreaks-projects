<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html -->
<HTML><HEAD><TITLE>The I2C FAQ</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content="Vincent Himpe" name=Author>
<META content="MSHTML 6.00.2600.0" name=GENERATOR>
<META content="FAQ list about the I2C bus" name=Description>
<META content="mantaray 110, default" name="Microsoft Theme">
<META content="tlb, default" name="Microsoft Border"></HEAD>
<BODY text=#000000 vLink=#999999 aLink=#ffcc66 link=#9999cc bgColor=#ffffff 
leftMargin=0 topMargin=0><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD><!--mstheme--><FONT face="Trebuchet MS, Arial, Helvetica"><!--mstheme--></FONT>
      <TABLE height=105 cellSpacing=0 cellPadding=0 width=940 border=0>
        <TBODY>
        <TR>
          <TD width=142 background="The I2C FAQ_files/top1stbarleft.jpg" 
          height=67><!--mstheme--><FONT 
face="Trebuchet MS, Arial, Helvetica">&nbsp;<!--mstheme--></FONT></TD>
          <TD vAlign=center width=649 
          background="The I2C FAQ_files/top1stbarmid.jpg" height=67><!--mstheme--><FONT face="Trebuchet MS, Arial, Helvetica">
            <P align=center><IMG height=56 src="The I2C FAQ_files/mantarays.gif" 
            width=294 border=0></P>
            <P align=center><FONT face="BD SantaMonica" color=#ffff00 
            size=4><B>I2C FAQ </B></FONT></P><!--mstheme--></FONT></TD>
          <TD align=justify width=141 
          background="The I2C FAQ_files/top1stbarright.jpg" height=67><!--mstheme--><FONT 
face="Trebuchet MS, Arial, Helvetica">&nbsp;<!--mstheme--></FONT></TD></TR></TBODY></TABLE><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica"><!--mstheme--></FONT>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD width="20%" background="The I2C FAQ_files/top2ndbar.jpg" 
height=34><!--mstheme--><FONT 
face="Trebuchet MS, Arial, Helvetica">&nbsp;<!--mstheme--></FONT></TD>
          <TD width="80%" background="The I2C FAQ_files/top2ndbarmid.gif"><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P align=right>
            <SCRIPT language=JavaScript><!--
MSFPhover = 
  (((navigator.appName == "Netscape") && 
  (parseInt(navigator.appVersion) >= 3 )) || 
  ((navigator.appName == "Microsoft Internet Explorer") && 
  (parseInt(navigator.appVersion) >= 4 ))); 
function MSFPpreload(img) 
{
  var a=new Image(); a.src=img; return a; 
}
// --></SCRIPT>

            <SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav1n=MSFPpreload("../../_derived/home_cmp_mantaray110_home.gif"); MSFPnav1h=MSFPpreload("../../_derived/home_cmp_mantaray110_home_a.gif"); }
// --></SCRIPT>
            <A language=JavaScript 
            onmouseover="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1h.src" 
            onmouseout="if(MSFPhover) document['MSFPnav1'].src=MSFPnav1n.src" 
            href="http://vhimpe.crosswinds.net/index.htm"><IMG height=28 
            alt=Home src="The I2C FAQ_files/home_cmp_mantaray110_home.gif" 
            width=107 align=middle border=0 name=MSFPnav1></A>
            <SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav2n=MSFPpreload("../../_derived/up_cmp_mantaray110_up.gif"); MSFPnav2h=MSFPpreload("../../_derived/up_cmp_mantaray110_up_a.gif"); }
// --></SCRIPT>
             <A language=JavaScript 
            onmouseover="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2h.src" 
            onmouseout="if(MSFPhover) document['MSFPnav2'].src=MSFPnav2n.src" 
            href="http://vhimpe.crosswinds.net/electronics/electron.htm"><IMG 
            height=28 alt=Up src="The I2C FAQ_files/up_cmp_mantaray110_up.gif" 
            width=107 align=middle border=0 name=MSFPnav2></A>
            <SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav3n=MSFPpreload("../../_derived/next_cmp_mantaray110_next.gif"); MSFPnav3h=MSFPpreload("../../_derived/next_cmp_mantaray110_next_a.gif"); }
// --></SCRIPT>
             <A language=JavaScript 
            onmouseover="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3h.src" 
            onmouseout="if(MSFPhover) document['MSFPnav3'].src=MSFPnav3n.src" 
            href="http://vhimpe.crosswinds.net/electronics/pcbfaq/The_PCB_Faq_3_0.html"><IMG 
            height=28 alt=Next 
            src="The I2C FAQ_files/next_cmp_mantaray110_next.gif" width=107 
            align=middle border=0 
        name=MSFPnav3></A><!--mstheme--></FONT></P></TD></TR></TBODY></TABLE><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica">
      <P>&nbsp;</P><!--mstheme--></FONT></TD></TR><!--msnavigation--></TBODY></TABLE><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top width="1%"><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica"><!--mstheme--></FONT>
      <TABLE height="100%" cellSpacing=0 cellPadding=0 width=141 border=0>
        <TBODY>
        <TR>
          <TD vAlign=top width="100%" background="The I2C FAQ_files/leftbar.jpg" 
          bgColor=#000080 height="110%"><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><FONT color=#000000>
            <SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav4n=MSFPpreload("../../_derived/home_cmp_mantaray110_vbtn.gif"); MSFPnav4h=MSFPpreload("../../_derived/home_cmp_mantaray110_vbtn_a.gif"); }
// --></SCRIPT>
            <A language=JavaScript 
            onmouseover="if(MSFPhover) document['MSFPnav4'].src=MSFPnav4h.src" 
            onmouseout="if(MSFPhover) document['MSFPnav4'].src=MSFPnav4n.src" 
            href="http://vhimpe.crosswinds.net/index.htm"><IMG height=36 
            alt=Home src="The I2C FAQ_files/home_cmp_mantaray110_vbtn.gif" 
            width=141 border=0 name=MSFPnav4></A><BR>
            <SCRIPT language=JavaScript><!--
if(MSFPhover) { MSFPnav5n=MSFPpreload("../../_derived/up_cmp_mantaray110_vbtn.gif"); MSFPnav5h=MSFPpreload("../../_derived/up_cmp_mantaray110_vbtn_a.gif"); }
// --></SCRIPT>
            <A language=JavaScript 
            onmouseover="if(MSFPhover) document['MSFPnav5'].src=MSFPnav5h.src" 
            onmouseout="if(MSFPhover) document['MSFPnav5'].src=MSFPnav5n.src" 
            href="http://vhimpe.crosswinds.net/electronics/electron.htm"><IMG 
            height=36 alt=Up src="The I2C FAQ_files/up_cmp_mantaray110_vbtn.gif" 
            width=141 border=0 
        name=MSFPnav5></A></FONT><!--mstheme--></FONT></TD></TR>
        <TR>
          <TD vAlign=top width="100%" background="The I2C FAQ_files/leftbar.jpg" 
          bgColor=#000080><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">&nbsp; 
            <P>&nbsp;</P>
            <P>&nbsp;</P>
            <P>&nbsp;</P>
            <P>&nbsp;</P>
            <P>&nbsp;</P>
            <P>&nbsp;<!--mstheme--></FONT></P></TD></TR></TBODY></TABLE><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica">
      <P>&nbsp;</P><!--mstheme--></FONT></TD>
    <TD vAlign=top width=24></TD><!--msnavigation-->
    <TD vAlign=top><!--mstheme--><FONT face="Trebuchet MS, Arial, Helvetica"><!--mstheme--></FONT>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD width="100%" bgColor=#ffffff><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <H1 align=center><!--mstheme--><FONT 
            face="Garamond, Times New Roman, Times" color=#ffcc66><FONT 
            size=4>I2C Bus FAQ Version 3.0a</FONT></B> <FONT size=4><BR>(c) 
            1995-2000 V.Himpe</FONT> <!--mstheme--></FONT></H1><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><BR>This article is a collection of 
            information sources on the I2C Bus. The document exists as a HTML 
            file and as a iSilo document for Palm (tm) based organisers. You are 
            free to use , copy , distribute and disclose the contents of this 
            faq to anyone provided no money is asked for the copy.</FONT> </P>
            <P align=center><FONT size=2><B>Use of information in this faq is 
            solely at the users risk. No liability will be accepted for any 
            damage or loss resulting from the use or abuse of information 
            contained in this document</B>.</FONT> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=index></A><B>I2C Bus FAQ 
            Version 3.0a</B> </FONT></P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#preface"><FONT 
                  size=2>Preface</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#about"><FONT 
                  size=2>About his Faq</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#puttogether"><FONT 
                  size=2>Who Put it together</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#contribute"><FONT 
                  size=2>How can i contribute to 
                  it</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#posting"><FONT 
                  size=2>Where will it be posted 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#distribute"><FONT 
                  size=2>May I distribute this FAQ or post it somewhere 
                  else?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#aboutbus"><FONT 
                  size=2>ABOUT I2C</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#history"><FONT 
                  size=2>Historical background</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#protocol"><FONT 
                  size=2>I2C Bus protocol</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#hardware"><FONT 
                  size=2>Bus Hardware</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#events"><FONT 
                  size=2>Events on the I2C 
                  Bus</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#startstop"><FONT 
                  size=2>Start and Stop 
                  conditions</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#putonbus">Putting 
                  something on the bus</A>.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#adresslave"><FONT 
                  size=2>Addressing a SLAVE 
chip.</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#acknowledge"><FONT 
                  size=2>Waiting for Acknowledge</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#whatnext"><FONT 
                  size=2>What happens next ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#bytetoslave"><FONT 
                  size=2>Writing one or more bytes to a SLAVE.</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#readslave">Reading 
                  one or more bytes from a 
SLAVE</A>.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#slaveaccess">Determining 
                  the SLAVE access mode</A>.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#combined"><FONT 
                  size=2>Combined data format</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#multimaster"><FONT 
                  size=2>MultiMASTER 
                  operation</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#bussync"><FONT 
                  size=2>Bus synchronisation 
                  mechanism</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#specialaddr"><FONT 
                  size=2>Special addresses and exceptions</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><U><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#notereserved"><FONT 
                  size=2>Some general notes about reserved 
                  addresses.</FONT></A></U><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#electric"><FONT 
                  size=2>Electrical specs of the 
                  bus</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#enhanced"><FONT 
                  size=2>Enhanced I2C (FAST 
                  mode).</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#extended"><FONT 
                  size=2>Extended addressing (new I2C standard).</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qena"><FONT 
                  size=2>Q&amp;A section.</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qaextend"><FONT 
                  size=2>Is there something like a Buffer&nbsp; for I2C 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qamax"><FONT 
                  size=2>What is the maximum distance of the bus ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qaisolate"><FONT 
                  size=2>Can i isolate an I2C bus 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qacontrol"><FONT 
                  size=2>Is there something like an I2C controller ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qarepstart"><FONT 
                  size=2>How to generate a repeated start condition ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qaabort"><FONT 
                  size=2>Is it okay to abort an on-going transmission any time 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qanack"><FONT 
                  size=2>Do i need to give the ack in read mode on the last byte 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qabidirclk"><FONT 
                  size=2>Why does the clock line&nbsp; need to be bidirectional 
                  ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qamonitor"><FONT 
                  size=2>Can i monitor an I2C bus in some way ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qatest"><FONT 
                  size=2>Is there a way to test/debug I2C buses ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qademo"><FONT 
                  size=2>I want to experiment with I2C .Are there demokits 
                  available.?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qaplugin"><FONT 
                  size=2>Are there plug in board available for IBM Pc to emulate 
                  I2C ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#qapullup"><FONT 
                  size=2>I have problems with long buses. Can i make an active 
                  pull-up 
              ?</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#pseudocode"><FONT 
                  size=2>An I2C driver in Pseudocode.</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc"><FONT 
                  size=2>Driver Functions</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#debugtools"><FONT 
                  size=2>Debugging Tools.</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#triggen">I2C 
                  trigger generator</A>.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#checkacq">Checking 
                  who is controlling the bus</A>.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#ibmpc"><FONT 
                  size=2>I2C interface system for IBM-PC</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#pchardware"><FONT 
                  size=2>Hardware</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#pccsoft"><FONT 
                  size=2>Software</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#basicdriver"><FONT 
                  size=2>Quickbasic / PDs / PowerBasic Driver for 
                  I2C</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#legal"><FONT 
                  size=2>Legal notes and 
                  Copyrights</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#access"><FONT 
                  size=2>ACCESS Bus</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#motherboard"><FONT 
                  size=2>I2C on your 
                  MotherBoard</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#infosource"><FONT 
                  size=2>SOURCES OF INFORMATION ON I2C</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#ftpsites"><FONT 
                  size=2>FTP sites</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#webpages"><FONT 
                  size=2>Web pages about i2</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><FONT size=2>I2C 
                  PRODUCTS</FONT></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#freedev"><FONT 
                  size=2>Free development tools</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#commercial"><FONT 
                  size=2>Commercially available products</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#docs"><FONT 
                  size=2>I2C Documentation</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#periodicals"><FONT 
                  size=2>Periodicals that have articles covering I2C</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#book"><FONT 
                  size=2>Books</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#shoot"><FONT 
                  size=2>Troubleshooting</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#lastword"><FONT 
                  size=2>Last Words ...</FONT></A></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <P align=center><FONT size=2>Preface</FONT></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>Hi and welcome to the latest edition of the I2C 
            FAQ. Over the years I have been supporting people in their attempt 
            to master this bus. I have collected a total of over 500 e-mails 
            with questions ranging from beginner level to things that even I 
            could not solve in 1-2-3. I Will try to summarize the knowledge I 
            obtained in this revision of the FAQ.</FONT> </P>
            <P><FONT size=2>I Would like to thank all the people who have 
            bombarded me with interesting stuff and questions about I2C. I am 
            also happy that my little knowledge could help.</FONT> </P>
            <P><FONT size=2>Vincent September 1st 2000. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=about></A><B>About this FAQ</B> 
            </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Who put this FAQ together?</FONT></U></B> <FONT 
            size=2><BR>I put this FAQ together in response to my own frustration 
            in searching for information about I2C. I have been playing with the 
            bus for some time and, although I am not an expert on this matter, i 
            think my, and other people's, experiences with the I2C BUS can solve 
            common problems. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=contribute></A><B><U>How can I 
            contribute to this FAQ?</U></B> <BR>If you have any suggestions or 
            additions please inform me or the future maintainer of the FAQ.You 
            can contact me by e-mail : <B><I>vincent.himpe@pi.be</I></B> ( valid 
            until 1 Jan 2001 ) after that E-mail will most likely no longer be 
            possible.</FONT> </P>
            <P><FONT size=2>I hope that those of you who know of interesting 
            items for this FAQ will share with everyone. A good amount of stuff 
            is turning up thanks to everyone's help. If you have a website you 
            can put the FAQ or a link to the FAQ online there. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><A name=posting></A><B><U>What newsgroups will it be 
            posted in?</U></B> <BR>This FAQ has been posted a last time to the 
            following newsgroup: <B><I>sci.electronics.design</I></B> <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><A name=distribute></A><B><U>May I distribute this 
            FAQ ?</U></B> <BR>I am putting no restrictions on the use of this 
            FAQ except - It must be distributed in its entirety with the 
            copyright notice, and no financial gain may be realized from it. 
            After all, I have spent, and lot of time on this. The only thing 
            that I intend to gain from it is more information on I2C. For this 
            reason I have appended a copyright statement to the end of this FAQ. 
            I feel pretty silly doing this, but I just want to protect 
            myself.</FONT> </P>
            <P><FONT size=2>The copyright does not limit the use of this FAQ for 
            noncommercial purposes. I hereby give my permission to one and all 
            to pass this FAQ around and post it wherever you want - as long as 
            it is not for financial gain.</FONT> </P>
            <P align=center><FONT size=2>You are allowed to distribute portions 
            of the FAQ as long as you incorporate the following note. 
            '<B><I>Taken from The I2C FAQ</I></B>' and provide a link to its 
            storage on the internet. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <P align=center><FONT size=2>ABOUT THE I2C Bus</FONT></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Historical background.</FONT></U></B> <FONT 
            size=2><BR>The I2C bus was developed in the early 1980's by Philips 
            semiconductors.Its purpose was to provide an easy way to connect a 
            CPU to peripherial chips in consumer applications (radio's, TV-sets 
            etc).</FONT> </P>
            <P><FONT size=2>Normal Computer systems use ByteWide buses to 
            accomplish this task. This results in lots of copper tracks on PCB's 
            to route the Address and datalines. Not to mention a bunch of 
            address decoders and glue logic to connect everything.</FONT> </P>
            <P><FONT size=2>In mass production items such as TV-sets, VCR's and 
            audio equipment this is not acceptable. Complex circuits often need 
            multilayer boards, and these are simply too expensive for household 
            goods. Furthermore lots of control lines implies that the systems is 
            more susceptible to disturbances by EMC and ESD.The research done by 
            Philips Labs in Eindhoven (The Netherlands) resulted in a 2 wire 
            communication bus called the I2C bus.</FONT> </P>
            <P><FONT size=2>I2C is an acronym for Inter-IC bus. Its name 
            literally explains its purpose: to provide a communication link 
            between Integrated Circuits.</FONT> </P>
            <P><FONT size=2>Nowadays the extent of the bus goes much further 
            than Audio and Video equipment.The bus is generally accepted in 
            industry. Offsprings like D2B and ACCESS have made an attempt to 
            find their ways into computer peripherals like keyboards, mice, 
            printers, monitors, etc... . However they have been successed by the 
            USB bus. Amazingly the USB bus steals some technology frmo I2C. The 
            basic communication idea and adressing scheme is based on 
            I2C.</FONT> </P>
            <P><FONT size=2>The I2C BUS has been adopted by several leading chip 
            manufacturers like Xicor, SGS-Thomson, Siemens, Intel, TI, Maxim, 
            Atmel, Analog Devices. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=protocol></A><B><U>I2C Bus 
            protocol</U></B> <BR>The BUS physically consists of 2 active wires 
            and a ground connection. The active wires, SDA en SCL, are both 
            bidirectional. Where SDA is the Serial DAta line and SCL is the 
            Serial CLock line.</FONT> </P>
            <P><FONT size=2>Every component hooked up to the bus has its own 
            unique address whether it is a CPU, LCD driver, memory, or complex 
            function chip.Each of these&nbsp; chips can act as a receiver and / 
            or transmitter depending on its functionality. Obviously an LCD 
            driver is only a receiver ,while a&nbsp; memory or I/O chip can both 
            be transmitter and receiver.&nbsp; Furthermore there may be one or 
            more BUS MASTER's.</FONT> </P>
            <P><FONT size=2>The BUS MASTER is the chip issuing the commands on 
            the BUS.&nbsp; In the I2C protocol specification it is stated that 
            the IC that&nbsp; initiates a data transfer on the bus is considered 
            the BUS MASTER.&nbsp; At that time all the others are regarded to as 
            the BUS slaves.</FONT> </P>
            <P><FONT size=2>As mentioned before, the IC bus is a Multi-MASTER 
            BUS. This means&nbsp; that more than one IC capable of initiating 
            data transfer can be&nbsp; connected to it. As MASTERs are generally 
            microcomputers let's take a&nbsp; look at a general 'inter-IC chat' 
            on the bus.</FONT> </P>
            <P><FONT size=2>Lets consider the following setup : <BR><IMG 
            height=72 src="The I2C FAQ_files/shot1.gif" width=156> <BR>Case 
            :&nbsp; The CPU wants to talk to one of the attached 
            components.</FONT> </P>
            <P><FONT size=2>The CPU will issue a START condition&nbsp; (see 
            further on for description of all these conditions).&nbsp; This acts 
            as an 'ATTENTION' signal to all of the connected&nbsp; ic's. 
            <B>ALL</B> IC's on the bus will listen to the bus for incoming 
            data.</FONT> </P>
            <P><FONT size=2>Then the CPU sends the address of the device he 
            wants to address.This takes 8 clock pulses. At this moment in time 
            all&nbsp; IC's will compare this address with their own.If it 
            doesn't&nbsp; match they simply do nothing and wait until the bus is 
            released&nbsp; by the STOP condition.If the address matches however 
            the chip will produce a responce on the ACKNOWLEDGE signal of the 
            CPU.</FONT> </P>
            <P><FONT size=2>The ACKNOWLEDGE signal is issued by the CPU.When the 
            chip whose&nbsp; address matches sees the ACKNOWLEDGE on the bus it 
            Pulls the&nbsp; data line LOW. This is an indication to the CPU that 
            there is&nbsp; a chip with the wanted address on the bus.</FONT> 
</P>
            <P><FONT size=2>Now the CPU can start transmitting or receiving 
            data&nbsp; In our case the CPU will transmit data.When all is done 
            the&nbsp; CPU will issue a STOP condition. This is a signal that the 
            bus&nbsp; has been released and that the IC's may expect 
            another&nbsp; transmission to start any moment.</FONT> </P>
            <P><FONT size=2>We have had several states on the BUS right now 
            :&nbsp; START, address ,ACKNOWLEDGE ,DATA ,STOP. These are all 
            unique conditions on the BUS. Before we take a closer look into 
            these I will talk about the hardware of the BUS. This is necessary 
            to understand what is physically going on. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P>
            <P><FONT size=2><BR><A name=hardware></A><B><U>Hardware layout of 
            the I2C bus.</U></B> <BR>As stated before the BUS consists of 2 
            active signal lines and a ground&nbsp; potential. Internally in the 
            chip the bus looks like this : <BR><IMG height=72 
            src="The I2C FAQ_files/shot2.gif" width=156> <BR>The bus interface 
            is built around an input buffer and an open drain or open 
            collector&nbsp; transistor. When nothing happens the bus lines are 
            in the logic HIGH&nbsp; state. Note here that an&nbsp; external 
            PULL-UP resistor is neccessary. This is an error that most beginners 
            make. To put something on the BUS the chip drives&nbsp; its output 
            transistor, thus pulling the BUS to a LOW level. When the bus is 
            IDLE ( nothing going on ) both lines are HIGH. The HIGH state is 
            defined as NOT LOW (obvious isn't it).</FONT> </P>
            <P><FONT size=2>What i mean here is that you cannot set a voltage on 
            the HIGH Level. It depends on the supply voltage of the connected 
            IC's.However as this is mostly 5 Volts you can say that HIGH is 5 
            volts and LOW 0 volt. Nowadays the 3.3 volt ic's are emerging 
            rapidly. It's clear that in this case the high level will be 3.3 
            volts. The latest revision of I2C provides a means of interfacing 
            mixed voltage circuits.</FONT> </P>
            <P><FONT size=2>The nice thing about this concept is that it has a 
            'built-in' bus mastering technique. If the bus is 'occupied' by a 
            chip that is sending a 0 then all other chips loose their comm's 
            capability. More will be explained about this further on in the 
            Faq.</FONT> </P>
            <P><FONT size=2>However the open collector technique has a drawback 
            too. If you have a long bus this will have a serious effect on the 
            speed you can obtain .&nbsp; The higher this RC constant the slower 
            you can go. This is due to the effect that it influences the 
            'sharpness' of the edges on the I2C bus . At a certain point the 
            chip will not be able to distinguisch clearly between a logic 1 and 
            0. <BR><IMG height=74 src="The I2C FAQ_files/shot20.gif" width=156> 
            <BR>Long lines present a capacitive load onto the output .Since the 
            pull-up is passive you are facing an RC constant which will reflect 
            onto the shapes of the signals. <BR><IMG height=74 
            src="The I2C FAQ_files/shot21.gif" width=156> <BR>What's more is 
            that you can get reflections at high speed .This can be so bad that 
            'ghost signals' disturb your transmission and corrupt the data you 
            transmit. And then even the Schmitt trigger at the input of the chip 
            will not keep you out of trouble. The following image shows you 
            exactly what can happen. <BR><IMG height=100 
            src="The I2C FAQ_files/shot15.gif" width=156 border=0> <BR>Therefore 
            some strict electrical specs have been set forth. These are 
            explained further on.</FONT> </P>
            <P><FONT size=2>To overcome this problem , Philips has developed an 
            Active I2C terminator. This consists of twin charge pumps. You can 
            look at this device as a dynamic resistor. The moment the state 
            changes it provides a large current (low dynamic resistance) to the 
            bus. Doing this it can charge the parasitic capacitor very quickly. 
            Once the voltage has risen above a certain level the high current 
            mode cuts out and the output current drops sharply.</FONT> </P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=events></A><B>BUS Events</B> 
            </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>I Have already mentioned some things like START, 
            STOP, ACKNOWLEDGE,&nbsp; SLAVE, MASTER and so on. In this section 
            these things get explained.&nbsp; When reading this you must keep 
            the following 2 things in mind.</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>A 
                  <B>MASTER</B><I> is the device that <B>initiates</B> a 
                  message. Thus he controls the SCK line. The MASTER 
                  <U>always</U> generates the Clock pulses.</I></FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2><I>A 
                  </I><B>SLAVE</B><I> listens to the master and will send data 
                  only when asked.</I></FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><I><FONT size=2>The 
                  <B>SDA</B> and <B>SCL</B> lines can only be <B>PULLED</B> low. 
                  They cannot be DRIVEN&nbsp; high. To make them high the device 
                  just releases the line.&nbsp; The external pull-up resistor 
                  does the rest of the work.</FONT></I><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">
            <P><FONT size=2>Back to Main Index</FONT></A></B> <FONT 
            size=2><BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=startstop></A><B><U>Start And Stop 
            condition</U></B>. <BR>A <B>START</B> condition looks like this: 
            <BR><IMG height=72 src="The I2C FAQ_files/shot3.gif" width=156> 
            <BR>The bus is in idle mode when both Data and Clock line are high. 
            The chip issuing the Start condition ( the bus MASTER ) first pulls 
            the SDA (data) line low and then pulls the SCL (clock) line 
            low.</FONT> </P>
            <P><FONT size=2>A <B>STOP</B> condition is just the mirror of the 
            above. <BR><IMG height=72 src="The I2C FAQ_files/shot4.gif" 
            width=156> <BR>The Bus MASTER first releases the SCL and then the 
            SDA line.</FONT> </P>
            <P><FONT size=2>The start condition acts as a signal to all 
            connected IC's that something is about to be transmitted on the BUS. 
            All the devices on the bus will go to listen mode and check the 
            incoming data for a match against their address on the bus. The Stop 
            condition&nbsp; tells the connected chips that the message has been 
            completed and that the bus is free to use. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=putonbus></A><B><U>Putting something on 
            the BUS</U></B> <BR>Putting a bit of any kind on the bus looks like 
            this :</FONT> </P>
            <P><FONT size=2>First the MASTER sets the data line to the 
            appropriate level by pulling or not pulling the SDA line low. Then 
            it releases the SCL line for some time and pulls it low again. Now 
            it can change the state of the SDA to the level required for the 
            next bit and the process continues all over again.</FONT> </P>
            <P><FONT size=2>The DATA must stay valid during the HIGH level of 
            the CLOCK pulse. If the data chenges while the clock line is high 
            this will bee seen as either a START or STOP condition occurring ! ( 
            depending on the direction of change ).</FONT> </P>
            <P><FONT size=2>Using the above information ,a transfer could look 
            like this : <BR><IMG height=72 src="The I2C FAQ_files/shot5.gif" 
            width=156> <BR>As you can see in the above it is not necessary to 
            have a clock with a constant duty cycle.The BUS is very relaxed even 
            in such a way that you can stop the clock in the middle of a 
            transaction and then continue later on. This is very useful. 
            Consider the following :</FONT> </P>
            <P><FONT size=2>Your cpu is in the middle of a transaction and gets 
            an interrupt. It can process the interrupt first and continue its 
            message later on without any problem. (try doing that on RS232 !). 
            Since there is no minimum clock speed set you can have the 
            communication running at whatever speed you can handle. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=adresslave></A><B><U>Addressing a 
            SLAVE.</U></B> <BR>EVERY byte put on the BUS MUST be 8 bits long. (8 
            clock pulses). <BR><IMG height=72 src="The I2C FAQ_files/shot5.gif" 
            width=156> <BR>A byte is always sent with the MSB first. The number 
            of bytes that can be transmitted in one data 'telegram' is 
            unrestricted. ('Data telegram' is everything going on on the bus 
            between a START and STOP condition). However it is allowed to end a 
            transmission any time by sending a STOP condition. Even when you are 
            only 4 bits far in your telegram. Actually what happens is that the 
            STOP condition resets the bus control logic of all connected chips. 
            They start looking for a START condition again. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=acknowledge></A><B><U>Waiting for 
            ACKNOWLEDGE</U></B>. <BR>When a chip is being addressed or has 
            received data it will issue an ACKNOWLEDGE pulse. Therefore the 
            MASTER must first (1) release the DATA line (set it to high level). 
            The Slave performing an ACQ will pull the DATA line low (2) Shown as 
            the fat line on the image below. <BR><IMG height=72 
            src="The I2C FAQ_files/shot7.gif" width=156> <BR>The MASTER will now 
            send a clockpulse over the SCL line(3). When the clock pulse has 
            been completed ( SCL goes low again ) the slave will release the 
            DATA line(4). Now that the MASTER knows that the SLAVE is actually 
            there it can continue. Generally the MASTERs (mainly CPU's running 
            software) use a timeout value. When no chip is responding after some 
            time they issue a STOP and then continue with their work. This 
            prevents your software from locking up if for some reason the 
            addressed chip is not replying.</FONT> </P>
            <P><FONT size=2>Concerning the SLAVE pulling low the SDA line it is 
            so that generally the addressed IC will already have pulled the SDA 
            line low even before the MASTER has set the clock HIGH. It is the 
            falling edge of the last clockpulse that triggers the slave.</FONT> 
            </P>
            <P><FONT size=2>In the real life it is good practice to actually 
            look during the high level of the CLOCK if the SDA is being pulled 
            LOW or is LOW. Some chips need some time to process the address 
            before they can respond by pulling the SDA low. This can be the fact 
            when the addressed SLAVE is another CPU or an EEprom. Suppose the 
            following : You address a SLAVE CPU. But just before the SLAVE CPU 
            can pull the SDA low it has to process some interrupt occuring.If 
            the transfer issuing CPU would look to the SDA line immediately it 
            would see a HIGH level. Thus it would look like the SLAVE is not 
            responding. The Same goes for EEproms. Since storing data to EEprom 
            cells takes some time the ACKNOWLEDGE is used to indicate that the 
            programming has been completed. So after the last bit has been 
            transferred the EEprom starts writing the received data into its 
            array. It leaves the SDA line in the LOW state until this action has 
            been completed. this means that after the ACQ clockpulse the slave 
            keeps the SDA line LOW !. It is the task of the masdter to wait now 
            until SDA becomes high before continuing. this process might seem to 
            violate the I2C bus spec but actually it doesn't. This process is 
            called synchronisation. ( see the topic explaining this process 
            ).</FONT> </P>
            <P><FONT size=2>I have once spend a whole day figuering this one out 
            !.The system once in a while did not work like it should have 
            because the addressed device was not capable of generating an 
            ACKNOWLEDGE in time.</FONT> </P>
            <P><FONT size=2>The best way to do an ACKNOWLEDGE , in my humble 
            opinion,is like this: Put the SCL high, wait some time (your TIMEOUT 
            value), then check if SDA is LOW. If it is LOW - &gt; The chip is 
            there. If it is HIGH -&gt; The chip isn't there. When removing the 
            ACQ clockpulse check if the SDA line effectively goes high. If not : 
            the chip is in process of writing internally. <BR><IMG height=130 
            src="The I2C FAQ_files/shot8.gif" width=156> </FONT></P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=whatnext></A><B><U>What happens next 
            ?</U></B> <BR>Now that the SLAVE has been addressed and responded to 
            the ACKNOWLEDGE the rest of the telegram (until we issue a STOP) 
            depends solely on the addressed chip. You can just send one or more 
            bytes to the chip or receive one or more bytes from the chip. It can 
            even be that you first write something and then read something from 
            the chip. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=bytetoslave></A><B><U>Writing One or 
            More Byte's to a Slave.</U></B> <BR>After the Device has responded 
            with an ACKNOWLEDGE (see above) you just send another 8 bits on the 
            bus. Now you have to wait again for the SLAVE to ACKNOWLEDGE. If you 
            are through you issue a STOP command and then the bus is released 
            again. If you need to send more then you just send another 8 bits 
            and wait for an ACKNOWLEDGE. And so on and on and on.</FONT> </P>
            <P><FONT size=2>I figuered out in real life that on the last 
            transmitted byte you do not have to wait for the ACKNOWLEDGE. You 
            can directly issue a STOP command. Apparently there are some chips 
            that do not generate an ACKNOWLEDGE here !. Theoretically they 
            should generate an ACKNOWLEDGE but for some reason they don't. The 
            best way is as follows : after you have transferred your last byte 
            just to set the SCL high , wait some time , take it low and then 
            issue a STOP command. There is an exception though.</FONT> </P>
            <P><FONT size=2>Devices like serial EEproms use the ACKNOWLEDGE for 
            storing the information in the Memory array.They do not pull the SDA 
            line low until the programming has been completed.In that way the 
            MASTER has a way to know if the data has been written 
            succesfully.Storing data in EEprom memory is rather slow.So by 
            monitoring the SDA line the CPU knows when the chip has completed 
            the WRITE to its memory array. <BR>A byte write could look like this 
            :</FONT> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><TT>------------------------------</TT> 
            <BR><TT>|S|SLAVE address|WA|DATA|WA|P|</TT> 
            <BR><TT>------------------------------</TT> <BR>A multi byte write 
            looks like this: <BR><TT>-----------------------------</TT> 
            <BR><TT>|S|SLAVE addr.|WA|DATA|WA|...</TT> 
            <BR><TT>-----------------------------</TT> 
            <BR><TT>----------------------</TT> 
            <BR><TT>...|DATA|WA|DATA|WA|P|</TT> 
            <BR><TT>----------------------</TT> <BR>Note :</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>S&nbsp; = 
                  START</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>WA = WAIT 
                  FOR 
                ACKNOWLEDGE</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>P&nbsp; = 
                  STOP</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">
            <P><FONT size=2>Back to Main Index</FONT></A></B> <FONT 
            size=2><BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Reading one or more bytes from a 
            slave.</FONT></U></B> <FONT size=2><BR>Looks kind of the same as a 
            byte write. The difference is the handling of the SDA line and the 
            ACKNOWLEDGE. <BR>The MASTER generates a START , transmits the device 
            address and waits for an ACKNOWLEDGE. So far so good. Now the MASTER 
            has to RELEASE the SDA (data) line. The SLAVE will pull it low when 
            needed. On every clock pulse , that the MASTER generates ,the SDA 
            line will be in the state set by the SLAVE.</FONT> </P>
            <P><FONT size=2>When all 8 bits have been read the MASTER must GIVE 
            the ACKNOWLEDGE or to the SLAVE&nbsp; or stop the 
            transmission.</FONT> </P>
            <P><FONT size=2>To give an acknowledge to a slave the master holds 
            the SDA line low and gives a clockpulse on SCL. To stop 
            stransmission you simply issue a stop condition on the bus : Keep 
            SCL and SDA low. Now make SCL high , and then make SDA high.</FONT> 
            </P>
            <P><FONT size=2>If you give an ACQ pulse to the slave you have to 
            read another byte. Immediately after the ACQ the slave will take 
            hold of the SDA line and you might no longer be able to give a stop 
            before clocking out the next 8 bits.</FONT> </P>
            <P><FONT size=2><B>Note:</B> Here the FAQ has been greatly modified. 
            In the previous FAQ the text caused a lot of confusion.</FONT> </P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=slaveaccess></A><B><U>Determining the 
            SLAVE Access mode</U></B> <BR>Now there is one thing i haven't told 
            you yet. How does your SLAVE&nbsp; know whether you want to read 
            from or write to it ?</FONT> </P>
            <P><FONT size=2>Thats an easy one. This is beeing determined by the 
            SLAVE address.&nbsp; Each byte consists of 8 bits. The 8th bit in 
            the SLAVE address has a&nbsp; special meaning. When it is set to 0 
            it means you want to write to&nbsp; your SLAVE. When it is set to 1 
            it means that you you want to READ.&nbsp; You could see this as 
            follow. The Even addresses are WRITE addresses, the ODD addresses 
            are READ addresses. Each device has a consecutive WRITE and READ 
            address.</FONT> </P>
            <P><FONT size=2>Example :&nbsp; a PCF8574&nbsp; General purpose 8 
            BIT I/O port.</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>SLAVE 
                  address to WRITE is (01000000)b&nbsp; = 64d</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>SLAVE 
                  address to READ&nbsp; is (01000001)b&nbsp; = 65d</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P><FONT size=2>So you can have a theoretical maximum of 128 device 
            on you BUS. Practically this is not the case. There have been set up 
            a couple of addresses which you are not allowed to use.(more about 
            this later on).&nbsp; Now there is one more type of DATA telegram. 
            <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=combined></A><B><U>The Combined data 
            format.</U></B> <BR>This is a format generally used by memory 
            devices. Suppose you have an 128 byte deep memory on the bus and you 
            want to read the 84th byte. Normally you would have to read the 
            first 83 bytes before getting what you want. This takes too much 
            time and occupies the&nbsp; bus. In this case there are two 
            possibilities. You first write to the SLAVE address a byte which 
            tells it on which location you want to read. Then you start a read 
            operation. That is one way of doing it. A more elegant way to do 
            this is using a combined mode telegram. 
            <BR><TT>---------------------------</TT> <BR><TT>|S|AS WRITE|WA|SEND 
            BYTE|..</TT> <BR><TT>---------------------------</TT> 
            <BR><TT>-------------------------</TT> <BR><TT>..WA|S|AS 
            READ|WA|READ|P|</TT> <BR><TT>-------------------------</TT> <BR>To 
            start this sequence you access the chip in write mode. AS WRITE = 
            Address Slave in WRITE mode (even address). Wait for ACKNOWLEDGE and 
            WRITE a byte. This byte is beeing treated by the memory as the 
            location pointer. (that is how i2C memories work). Then you wait for 
            an ACKNOWLEDGE by the SLAVE and you generate another START 
            condition. Now you send the SLAVEs READ address ( ODD address ) Wait 
            for ACKNOWLEDGE and you receive the data byte. From now on&nbsp; you 
            are in standard READ mode. So you can now either send a STOP or 
            continue reading from your SLAVE by giving an ACQ to the slave and 
            clocking out the next byte. All memory devices auto-increment their 
            location pointer.</FONT> </P>
            <P><FONT size=2>Now you can even go one step further and generate 
            another START and then address the SLAVE as write. Send a new Data 
            byte (which acts on&nbsp; the location pointer), send another start, 
            enter read mode etc ......&nbsp; This combined mode is really a very 
            flexible means of addressing complex components. This may look very 
            messy. But it has its pro's and con's:</FONT> </P>
            <P><FONT size=2><B>PRO</B>: If you have 2 CPU's on your bus which 
            could want to take the bus this will assure you that you will be 
            able to continue your&nbsp; actions on the bus without interference 
            from the other CPU. Remember that when you have generated a START 
            and have sent the SLAVE address the other CPU too will be waiting 
            until a STOP appears on the bus. So he will not try to put something 
            on the&nbsp; bus.There could be a risk involved using normal READ 
            and WRITE operations</FONT> </P>
            <P><FONT size=2>Picture this situation : CPU 1 accesses the MEMORY 
            and sets the location pointer to 84 and issues a STOP condition. Now 
            the BUS is FREE. CPU 2 sees this and thinks : okay my turn. He sets 
            the location pointer to 92 because he wants to do something at that 
            location. Now the bus is free again. CPU 1 says : aha ! the bus is 
            free. Time to write for me. Now the data will land on location 92 
            and not on location 84 as it should have been. So : If you are 
            dealing with memories on a Multimaster bus always use this last 
            method.&nbsp; It keeps you out of trouble.</FONT> </P>
            <P><FONT size=2><B>CON</B>:&nbsp; If you have lots of operations to 
            do you can create a bottleneck situation. The other CPU could be 
            waiting and waiting for a&nbsp; chance to have his turn on the 
            bus.</FONT> </P>
            <P><FONT size=2>But is you don't have a MultiMaster environment this 
            all is not necessary.</FONT> </P>
            <P align=center><FONT size=2>Congratulations you have reached the 
            EXPERT grade.&nbsp; :-) <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=multimaster></A><B>MULTIMASTER 
            communication</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>As stated above you can have more than one CPU on 
            the BUS. When you have only one CPU there are no risks of having 
            collisions on the bus. That situation changes with 2 CPU's.</FONT> 
            </P>
            <P><FONT size=2>When CPU 1 issues a START and sends an address the 
            other one will back&nbsp; off. Because of the fact that if the 
            address does not match his own&nbsp; address he has to wait until 
            the bus is free. (STOP condition). So far&nbsp; no problem. But as 
            Murphy is, as usual ,always around. It's when you least expect it 
            that it goes wrong.Fortunately the BUS setup helps us out 
            here.</FONT> </P>
            <P><FONT size=2>When you (as a MASTER ) change the state of a line 
            to HIGH , you MUST always check that it has gone to the HIGH level. 
            If it hasn't : BACKOFF ! it's occupied !. Wait for a STOP to occurr 
            and then retry.</FONT> </P>
            <P><FONT size=2>What could happen is that the TWO CPU's start 
            communication on the&nbsp; same moment in time.Since it is an open 
            collector/drain bus they can&nbsp; only PULL the line low. They 
            cannot force it HIGH. (they can only&nbsp; leave it HIGH by not 
            turning on their output transistor).</FONT> </P>
            <P><FONT size=2>So they start transmitting. And all goes well as 
            long as they both are&nbsp; asserting the same levels. (during START 
            it's okay.They are doing the&nbsp; same) Then they start 
            transmitting data. for the first couple of bits all goes well until 
            suddenly diaster strikes. Bit 3 is different !. CPU1 wants to send a 
            0 while CPU2 wants to send a 1. <BR><IMG height=100 
            src="The I2C FAQ_files/shot17.gif" width=156 border=0> </FONT></P>
            <P><FONT size=2>Now CPU 1 has pulled SDA LOW. CPU 2 leaves SDA open. 
            Remeber that you cannot force the Line HIGH It is the job of the 
            pull-up resistor to do that.&nbsp; Since they are both running clean 
            and good written code they are&nbsp; testing what they have put on 
            the BUS. CPU 1 sees that he has written a 0 and says 'okay for me'.. 
            CPU 2 on the other hand sees that the line is LOW&nbsp; while he has 
            left it HIGH ! so he knows that by now someone else has taken 
            control. Time to&nbsp; BACK OFF !.</FONT> </P>
            <P><FONT size=2>Now in an ideal world CPU2 would do even more !. 
            When he knows for sure that this is the first byte after the START 
            generation he will switch from tranmist to receive mode !. Why ? 
            Well simple: CPU1 might be trying to talk to CPU2 ! <BR>If this is 
            the first byte after a START condition this means that it is 
            effectively a slave address beeing transmitted. CPU2 has to check 
            that this slave address beeing put on the bus is not his own. If it 
            is not his address he has to wait for the STOP command to appear on 
            the bus before attempting to take control again. On the other hand. 
            If the address is his own address he must respond. In the&nbsp; 
            latter case CPU2 becomes the slave device on the bus. This way all 
            ends up well.</FONT> </P>
            <P><FONT size=2>So from the above story we can conclude that is the 
            one that has its&nbsp; line LOW that always wins. The One wich 
            wanted the line to be HIGH when&nbsp; it is beeing pulled low by the 
            other looses the BUS.We call this a 'loss of arbitration' or 
            BACK-OFF. When a BACKOFF situation is generated it is good practice 
            to have the cpu, that has to BACKOFF, wait for a STOP condition to 
            appear on the bus.The other one is still busy transmitting.</FONT> 
            </P>
            <P><FONT size=2>The above example showed a situation where the two 
            CPU's were in perfect sync with each other. In most situations this 
            will not be the case. But even then the arbitration will still work. 
            Suppose one of the CPU's missed the START condition and still thinks 
            nothing is going on ... , or it came just out of reset and wants to 
            start talking on the bus. These are real-life cases that WILL happen 
            in a mulitmaster environment. ( remember Murphy's Law !) . Consider 
            a multimaster system that has just been powered up. You will not 
            know which cpu will come out of&nbsp; reset first.</FONT> </P>
            <P><FONT size=2>So actually this mechanism does not only do 
            arbitration , it is also very effective at ensuring that the 
            information beeing sent is not lost or corrupted !. The message from 
            the winning CPU is not distorted in any way.</FONT> </P>
            <P><FONT size=2>If you struggled trough all of this , and the 
            previous chapters then you are ready to face the world of 
            MultiMaster I2C <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=bussync></A><B><U>Bus 
            synchronisation</U></B> <BR>The i2c protocol also includes a 
            synchronisation mechanism. This can be used between masters. However 
            to my knowledge there are no chips that use this mechanism. This 
            must be implemented in software.</FONT> </P>
            <P><FONT size=2>When a slower slave is attached to the bus then 
            problems may rise. Suppose the following : The master reads a byte 
            from a slave. Lets say an A/D convertor. The slave needs some time 
            to make a conversion. The master adresses the slave in read mode 
            <BR><TT>--------------------...</TT> 
            <BR><TT>|S|READ_ADRESS|WACK|...</TT> 
            <BR><TT>--------------------...</TT> <BR>In the Wait_for_ack module 
            happens something worth looking at.</FONT> </P>
            <P><FONT size=2>In a normal ACQ sequence the slave will pull the ACQ 
            line low immediately after the 8th clock pulse and before the ACQ 
            clockpulse. The master will send a clockpulse , and sample the SDA 
            line during this pulse. If SDA is low it means that the slave 
            aknowledges the information sent. When the ACQ clockpulse is removed 
            the slave releases the SDA line.</FONT> </P>
            <P><FONT size=2>Now lets suppose that the slave has detected his 
            home adress. It starts a conversion and waits until this conversion 
            is done before giving acknowledge.That way the master can read the 
            result immediately after the Acknowledge sequence. Of course the 
            master would have timed out and considered the slave not to be 
            present on the bus.</FONT> </P>
            <P><FONT size=2>Now the synchronisation meachanism can come in 
            handy. The Slave can pull the SCL low as long as needed. The master 
            is then not able of giving the ACK clockpulse because it 
            cannot&nbsp; raise the SCL line.Of course the master software must 
            check this state. This is the routine the master must execute for a 
            synchronisation aware Wait_for_ack sequence</FONT> </P>
            <P><FONT size=2>What happens is this : (in our theoretical 
            model)</FONT> </P>
            <P><FONT size=2>The master has sent the last bit of the slave adress 
            on the bus. The slave recognises its adress and pulls the SDA line 
            low.&nbsp; ( it wants to acknowledge because it has detected its 
            adress ).&nbsp; At the same time it starts the A to D conversion and 
            pulls the SCL line low.</FONT> </P>
            <P><FONT size=2>The master now wants to start the Wait_for_ack 
            sequence. So it makes SDA high.( Never minding the Slave holding it 
            low )</FONT> </P>
            <P><FONT size=2>Now the master releases the SCL line.When testing 
            the level of the SCL line the master will see that it is still 
            low.This is due to the fact that the slave is holding the SCL low.So 
            the master enters a loop that runs until the SCL line effectively 
            turns high. The moment the slave has completed the conversion it 
            releases the SCL line.</FONT> </P>
            <P><FONT size=2>The master detects that the SCL has become high and 
            checks the SDa line. Since the slave turned it low long ago it sees 
            a valid acknowledge. The master will now begin to read the result of 
            the conversion.</FONT> </P>
            <P><FONT size=2>This technique is used by the serial EEproms on I2C. 
            There are a number of drawbacks involved when implementing 
            this.&nbsp; If the bus gets stuck due to an electrical failure of a 
            circuit the master can go into deadlock.Of course this can be 
            handled by timeout counters.</FONT> </P>
            <P><FONT size=2>Another drawback is speed.The BUS is locked at that 
            moment. If you have rather long delays (long conversion time in our 
            example above) then this&nbsp; penalizes the total bus speed a 
            lot.</FONT> </P>
            <P><FONT size=2>The existing A/D convertors do not use this 
            synchronisation system. They use the following technique :</FONT> 
            </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>Adress 
                  chip. Slave will ack and starts new conversion.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>The master 
                  reads a byte and sends stop.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>This byte 
                  is the result of the previous 
                  conversion.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P><FONT size=2>The next time the master reads the chip it will read 
            the value cycle above.&nbsp; Between the 2 accesses the bus is free 
            for the master or another master&nbsp; to access a different slave. 
            When the A/D has not completed conversion it can also simply not 
            ACK. The master Wait_for_ack will timeout and the master will 
            continue. It is the masters task to attempt a retry.</FONT> </P>
            <P><FONT size=2>The Synchronisation mechanism is nothing else than a 
            sort of handshaking. In a multimaster environment there is the risk 
            that , when the 2 masters are talking to each other,using this 
            handshake routine, they go into deadlock.</FONT> </P>
            <P><FONT size=2>Master 1 attemps to adress master 2. He succeeds.But 
            during the ACK sequence master 2 has to service an interrupt 
            therefore he keeps SCL low. Master 1 will now wait for the SCl line 
            to come high. Master 1 times out (because for some reason master 2 
            is still busy).&nbsp; Master 1 completes transaction and starts a 
            retry. In the mean time master 2 came on line again and released the 
            SCL line but is still pulling the SDa line low. Result Master 1 
            cannot start a&nbsp; new transmission. Because it will get a backoff 
            situation&nbsp; ( bus is not free ).Master 1 will get stuck in an 
            endless retry routine. While master 2 will be endlessly waiting for 
            master 1 completing&nbsp; the ACK. Result : System in complete 
            deadlock.</FONT> </P>
            <P><FONT size=2>When using the synchronisation mechanism you must 
            take care to avoid all possible causes of a deadlock.This makes the 
            interface driver very complex. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=specialaddr></A><B>Special 
            addresses and exceptions.</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>During the above i have mentioned that there are 
            some exceptions about device addressing. Not all addresses can be 
            used. There are some that have been reserved by PHILIPS for special 
            purposes.</FONT> </P>
            <P><FONT size=2><TT>&nbsp; address&nbsp; R/W</TT> <BR><TT>&nbsp; 
            0000 000 0&nbsp; : general call</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            address</TT> <BR><TT>&nbsp; 0000 000 1&nbsp; : start byte</TT> 
            <BR><TT>&nbsp; 0000 001 x&nbsp; : CBUS address</TT> <BR><TT>&nbsp; 
            0000 010 x&nbsp; : address</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            reserved for</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            different bus</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            format.</TT> <BR><TT>&nbsp; 0000 011 x&nbsp; !</TT> <BR><TT>&nbsp; 
            0000 100 x&nbsp; !</TT> <BR><TT>&nbsp; 0000 101 x&nbsp; !} to be 
            defined</TT> <BR><TT>&nbsp; 0000 110 x&nbsp; !</TT> <BR><TT>&nbsp; 
            0000 111 x&nbsp; !</TT> <BR>&nbsp;</FONT> </P>
            <P><FONT size=2>This implements that all addresses below 16 are 
            reserved for special&nbsp; purposes. The reason behind this is that 
            there are other buses around. Using this scheme you can connect 
            device that uses a different bus to the I2C bus !. It is possible to 
            put SPI, I2C, uWIRE and CBUS devices on the same I/O pins of your 
            CPU. Since all buses different to I2C use 3 lines you can <BR>cut 
            down on you CPU pin load.</FONT> </P>
            <P><FONT size=2>How this exactly works would lead us too far. Maybe 
            in the future someone will explain this. If somebody out there has 
            experience with these other buses ? Could be interesting.</FONT> 
</P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>CBUS is the 
                  ancestor of I2C. It was also developed by Philips.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>SPI is (c) 
                  Motorola</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>uWIRE is 
                  (c) National Semiconductor</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">
            <P><FONT size=2>Back to Main Index</FONT> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P></A>
            <P>&nbsp;</P><U>
            <P><FONT size=2>Some general notes about these reserved 
            addresses.</FONT></U></B> <FONT size=2><BR>The general call address 
            is received by all IC's on the bus.&nbsp; If there is an IC out on 
            the bus that can process this address it will&nbsp; respond by 
            generating an ACKNOWLEDGE. See Datasheets for info on which&nbsp; IC 
            use them and why. You could use this to invoke some special command 
            in a MultiMASTER environment. (Like reboot all CPU's or whatever. 
            Since all chips will <BR>respond to it ,it can be used for this 
            purpose. However take care not to mess up anything else.) There have 
            been determined some actions on receipt of the General call 
            address.</FONT> </P>
            <P><FONT size=2>When the second Byte in a telegram containing a 
            general call is :</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2><B>00000110</B>&nbsp; :This is a RESET condition. All 
                  IC's capable of handling a general call message will reset and 
                  reload their SLAVE&nbsp;&nbsp; address.There are I2C 
                  compatible IC that have part of&nbsp; their address 
                  programmable.This allows you to have more&nbsp; than one IC of 
                  a certain type on your BUS. Further about&nbsp; this later on. 
                  They also set all their internal registers to the power-up 
                  state.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2><B>00000010</B>&nbsp; :The same as above except that 
                  you must provide the SLAVE address.This does not RESET the 
                  registers to Power-up state.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2><B>00000100</B>&nbsp; :Causes all IC's that define 
                  their address by hardware to reload this value.This does noet 
                  reset internal register.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2><B>00000000</B>&nbsp; : PROHIBITED.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2><B>xxxxxxx1</B>&nbsp; : This is a HARDWARE general 
                  call. You can look to this as a kind of INTERRUPT generated by 
                  an I2C IC.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P><FONT size=2>This can be used in the following condition.: You 
            have a keyboard controller. Each time a key is pressed&nbsp; it 
            transmits the following sequence : 
            <BR><TT>-------------------------</TT> 
            <BR><TT>|S|00000000|A|yyyyyyy1|..</TT> 
            <BR><TT>-------------------------</TT> <BR><TT>----------------</TT> 
            <BR><TT>.. A|Databyte|P|</TT> <BR><TT>----------------</TT> 
            <BR>Where yyyy yyy is its own address. What will happen is that the 
            MASTER CPU will see the General call address and see that the device 
            with address yyyy yyy has something to tell to the CPU. It will read 
            the next byte. In our case the CPU will know that keyboard 
            controller yyyyyyy has detected a key and that the scancode of this 
            key is contained in the received databyte.</FONT> </P>
            <P><FONT size=2>All other codes have not been assigned. All I2C ic's 
            are designed&nbsp; to ignore them. So you are free to use them for 
            whatever. (I generally use them to debug MultiMASTER modes).</FONT> 
            </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>NO IC is 
                  allowed to generate an ACKNOWLEDGE of the START byte.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>The start 
                  byte is used to syncronize Slow devices with fast 
                  devices.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>The CBUS 
                  address is used in this way : After sending this address all 
                  IC's go into IDLE mode until they receive a STOP condition. In 
                  the mean time you can transfer data using a complete different 
                  protocol on your I2C bus.</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">
            <P><FONT size=2>Back to Main Index</FONT></A></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=electric></A><B>Electrical 
            spec's of the I2C Bus</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>As the chips designed for an I2C bus can 
            function on different Supply voltages the following levels have been 
            set.</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>LOW level 
                  input voltage : -0.5v to 1.5v</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>LOW level 
                  relative to VDD : -0.5v to&nbsp; 
                  0.3*Vdd</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>HIGH level 
                  input voltage : 3.0v</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT size=2>HIGH level 
                  relative to VDD&nbsp; 0.7*Vdd to 
                  Vdd</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P align=center><FONT size=2>For other electrical specs please refer 
            to the component datasheets. The number of interfaces connected is 
            limited to the number of available addresses and the load 
            capacitance on the bus. This capacitance may not be bigger then 
            400pF. In the new standard this is preferred to be less than 200pF. 
            <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=enhanced></A><B>Enhanced I2C 
            (FAST mode)</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>Since the first I2C spec release (which dates back 
            from 1982) a&nbsp; couple of improvements have been made.In 1993 the 
            new I2C spec was&nbsp; released.This new spec conatains some 
            additional sections covering&nbsp; FAST mode and 10 -Bit 
            addressing.&nbsp; In this section the Fast mode will be covered , 
            while in the next&nbsp; section information about 10 bit addressing 
            is given.</FONT> </P>
            <P><FONT size=2>In the FAST mode the physical bus parameters are not 
            altered. The protocol,Bus levels,Capacitive load etc.. remain 
            unchanged. However the datarate has been increased to 400 Kbit/s. To 
            accomplisch this task a number of changes have been made to 
            timing.</FONT> </P>
            <P><FONT size=2>Since all CBUS activities have been canceled ,there 
            is no compatibility anymore with CBUS timing.The development of IC 
            with CBUS interface has been stopped. The existing CBUS ic's are 
            being taken out of production.</FONT> </P>
            <P><FONT size=2>The input of the FAST mode devices all include 
            Schmitt triggers to suppress noise. The output buffers include slope 
            control of the falling edges of the SDA and SCL signals.If the power 
            supply of a FAST mode device is switched off the BUS pins must be 
            floating so that they do not obstruct the bus.</FONT> </P>
            <P><FONT size=2>The pullup resitor must be adapted. For loads up to 
            200 pf a resistor is sufficient.For loads between 200pf and 400pF a 
            current source is preferred.</FONT> </P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=extended></A><B>Extended 
            addressing</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>Due to the increasing popularity of the I2C bus 
            the address space is nearly exhausted.This starts posing problems 
            for people currently in the phase of designing a new I2C compatible 
            IC. Therefore the I2C standard has been adapted.</FONT> </P>
            <P><FONT size=2>A chip that conforms to the new standard receives 2 
            address bytes. The first consists of 5 * a ONE ,the 2MSB's of the 
            address and the Read/Write bit. The second byte contains the LSB's 
            of the address. <BR><TT>-----------------------</TT> 
            <BR><TT>|S|11111A9A8 R/W|WA|...</TT> 
            <BR><TT>-----------------------</TT> 
            <BR><TT>-----------------------</TT> 
            <BR><TT>A7A6A5A4A3A2A1A0|WA|...</TT> 
            <BR><TT>-----------------------</TT> <BR>This scheme insures that 
            the 0 bit addressing mode stays completely transparent for the other 
            devices on the bus. Normally any new design should adept to this new 
            addressing scheme. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=qena></A><B>Q&amp;A section</B> 
            </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=qamax></A><B>What is the maximum 
            distance of the bus ?</B> </FONT></P>
            <P><FONT size=2>This depends on the load of the bus and the speed 
            you run it at. In typical applications a few meters (3 to 4). 
            Better: The maximum capacitive load has been specified (electrical 
            Spec's in this FAQ).</FONT> </P>
            <P><FONT size=2>If you run at a lower clock frequency then you could 
            go further. If you are careful in routing your PCB's and cabling 
            then you can take it further.I once had an application that had a 
            total of about 100 meter cable in it. The entire system was clocked 
            on something like 500 Hz. I used twisted pair cable and twisted SCL 
            with GND and SDA with VCC. No problem.The systems is now up and 
            running for over 5 years.</FONT> </P>
            <P><FONT size=2>If you need to go far at high speed then you can use 
            an active current source . Philips has a standalone product for this 
            purpose. Or you could build one yourself. Another thing to be taken 
            into account is the amount of noise picked up by long cabling. This 
            <BR>noise can disturb the signal transmitted over the bus so badly 
            that it becomes unreadable.</FONT> </P>
            <P><FONT size=2>A last thing to be taken care of is the bus 
            termination. Long lines will cause refelections. These reflections 
            can cause 'ghost signals' to appear.This kan be overcome by using a 
            charge pump mechanism like the Philips device has. See also next 
            topic.</FONT> </P>
            <P><FONT size=2><A name=qaextend></A><B>I want to extend it ''by the 
            book''. Is there something like a Buffer&nbsp; for I2C ?</B> 
            </FONT></P>
            <P><FONT size=2>Yes indeed this exists. Philips manufactures a 
            special chip to buffer the bidirectional lines of the I2C bus. 
            Typically this is a current amplifier. What it does is force current 
            into the wiring&nbsp; (a couple of mA). That way you can overcome 
            the capacitance of long&nbsp; wiring. Philips P87B715</FONT> </P>
            <P><FONT size=2><IMG height=47 src="The I2C FAQ_files/shot10.gif" 
            width=156> </FONT></P>
            <P><FONT size=2>However You will need this component on oth sides of 
            the line.The charge pump in this devices can deliver currents up to 
            30mA. And that is way too much for a normal I2C chip to handle.With 
            these buffers you can handle loads up to 2nF. The charge amplifier 
            'transforms' down this load to a 200pF load which is still 
            acceptable by I2C components. Another possibility is to make such a 
            charge pump yourself. This is fairly easy and can be accomplished by 
            1 chip and a few resistors. See a bit further on for details.</FONT> 
            </P>
            <P><FONT size=2><A name=qaisolate></A><B>Can i isolate an I2C bus ? 
            (using optocoupler or whatever)</B> </FONT></P>
            <P><FONT size=2>This is possible. The circuit is rather complex due 
            to the bidirectional nature of the I2C BUS. Actually there are a 
            number of solutions here. One has appeared in electronic design new 
            , one is included in the elektor book on i2c and yet another one has 
            been published in an issue of Elektor. See the end of this FAQ for 
            information on these books. <BR>However : Here it comes (for once 
            channel).</FONT> </P>
            <P><FONT size=2><IMG height=100 src="The I2C FAQ_files/shot22.gif" 
            width=156 border=0> <BR>Component Values</FONT> </P>
            <P><FONT size=2>1: 270 Ohm <BR>2: 3300 Ohm <BR>3: 1800 Ohm <BR>4: 
            1000 Ohm <BR>5: PNP like 2n2219 or BC557 <BR>6: NPN like 2n2222 or 
            BC 547 <BR>Optocouplers : 6n139 , 4n27 or Til 111</FONT> </P>
            <P><FONT size=2>A couple of remarks. Since the speed of the I2C bus 
            can be rather high it is reommended to use a fast 
            optocoupler.However this circuit will not work on speeds higher then 
            10KHz.A 6N139 will do the job in all cases. The 2 PNP and 2 NPN 
            transistors can be any standard type. Like 2N2219 and 2N2222 (USA) 
            or BC547 and BC557 (EUROPE).</FONT> </P>
            <P><FONT size=2>How does it work ? <BR>The problem with 
            bidirectional lines is that a buffer tends to get stuck on a certain 
            level. In the above schematic this has been dealth with. In the 
            following explanation we</FONT> </P>
            <P><FONT size=2>&nbsp; assume that the left side is transmitting and 
            the right side is receiving.Since the circuit is symmetrical you 
            could do it the other way around too. Suppose you send a logic 1 
            into the left side. The Led of the top optocoupler will stay dark. 
            Since its transistor does not receive any light it is not turned on. 
            The next transistor does not get driven and the line at the end is 
            beeing pulled high via resistors 1' and 3' . The PNP transistor 5' 
            will not get driven. So the Led connected to it will not light. So 
            there is no feedback signal . So far so good.</FONT> </P>
            <P><FONT size=2>Now lets look what will happen if we send a 0. The 
            first transistor 5 will be turned on. Thus the led connected to it 
            will start emitting light.This results in the fact that it's 
            matching transistor will turn on . The transistor connected to the 
            Emittor of will be turned on too. The output line is now beeing 
            pulled low via resistor 3' . This low level would turn on the PNP 
            transistor. This would result in The other optocoupler to light , 
            it's transistor to turn on etc etc .. The circuit would go into a 
            lock-up. <BR>But since the NPN transistor is pulling the Anode of 
            the led to ground this will not happen. In this way we have 
            eliminated the deadlock.</FONT> </P>
            <P><FONT size=2><A name=qacontrol></A><B>What if i don't want to 
            emulate the bus by software or if i don't have an I2C interface on 
            my system ? Is there something like an I2C controller ?</B> 
            </FONT></P>
            <P><FONT size=2>Yes indeed. There is a special chip to do the I2C 
            interfacing. The PCD8584 or PCF8584 incorporate a complete I2C 
            interface. These chips are designed in such way that they can 
            interface to almost any microcontroller or computer around.</FONT> 
            </P>
            <P><FONT size=2><A name=qarepstart></A><B>I am puzzled on how to 
            generate a repeated start condition.</B> </FONT></P>
            <P><FONT size=2>I make the SCK high and my device pulls SDA low to 
            acknowledge. So far no problem but how do i make a new start now ?. 
            The device is pulling SDA low. !</FONT> </P>
            <P><FONT size=2>First you have to complete you ACK cycle. To do this 
            you must make SCL low again. The slave will release the dataline 
            when it detects that SCL went&nbsp; logic low.&nbsp; Now you can 
            issue a stop command. To do this you make the SCK&nbsp; high again 
            and then pull low the SDA line.&nbsp; This is the confusing part of 
            the procedure. Normally one would&nbsp; suspect that by making the 
            clock high again you will be clocking&nbsp; in the first bit of a 
            new byte. As a matter of fact that is the case.&nbsp; But since the 
            chip will detect a START condition this operation gets&nbsp; 
            cancelled.</FONT> </P>
            <P><FONT size=2><A name=qaabort></A><B>Is it okay to abort an 
            on-going transmission any time.</B> </FONT></P>
            <P><FONT size=2>According to the specification this !should! work. 
            It depends on the layout of the component. A real I2C 
            compatible&nbsp; ic will be able to handle this. You should test 
            this before you&nbsp; use it. <BR>Normally when a START or STOP 
            condition is detected the internal logic of the chip is forced into 
            a certain state. Internally the part that detects START and STOP is 
            differnet then the logic that does all other processing. The START 
            together with the address register is to be considered as a 
            functional unit inside the chip.</FONT> </P>
            <P><FONT size=2>When a START is detected all internal operations are 
            cancelled and the chip will compare the incoming data with its own 
            address. When a STOP is detected ALL chip's on the bus will reset 
            their&nbsp; internal logic to IDLE mode. This is also used to cut 
            power consumption. When a STOP is detected all logic is shut down 
            except for the START detector. When a start is issued on the bus the 
            START detector will 'wake-up' the rest of the internal logic.</FONT> 
            </P>
            <P><FONT size=2><A name=qanack></A><B>Do i need to give the ack in 
            read mode on the last byte.</B> <BR>&nbsp;My chip starts sending 
            data and occupies the bus ... .</FONT> </P>
            <P><FONT size=2>This is a question that got me puzzled .Indeed this 
            is a bit strange. Normally if you have read the last byte in a chip 
            and generate an ACK&nbsp; the chip should do nothing anymore. So the 
            bus is clear for you to create a STOp condition. Apparently there 
            are some chips that start transmitting data again.</FONT> </P>
            <P><FONT size=2>Digging in to to spec showed an error in my FAQ. On 
            the Last byte READ you must generate a NACK (NOT Acknowledge).&nbsp; 
            Check out the description of the READ mode</FONT> </P>
            <P><FONT size=2><A name=qabidirclk></A><B>I read the SDA and SCL are 
            bidirectional.Why does the clock line&nbsp; need to be bidirectional 
            ?</B> </FONT></P>
            <P><FONT size=2>The clock line needs to be directional when using a 
            MULTIMASTER protocol and when using synchronisation protocol. When 
            you are using only one Master then this is not required since the 
            clock will always be generated by the Master and you only&nbsp; have 
            one on the BUS. If you run Multimaster then this changes.The Master 
            must be able to receive data from the other master. At that time it 
            must be able to check the Clock line too. For more information about 
            bus synchronisation check out the topic dedicated to it.</FONT> </P>
            <P><FONT size=2><A name=qamonitor></A><B>Can i monitor an I2C bus in 
            some way ?</B> </FONT></P>
            <P><FONT size=2>This is possible. There are a few commercial I2C 
            monitor / debuggers around that can do this.Information on these 
            cards can be found elsewhere in this Faq There is another 
            possibility to do this. By using the PCF 8584 chip from philips. 
            This is a universal CPU to I2C interface. This chip has a certain 
            mode in which it takes not part in the real I2C action but unly 
            records what is going on. It listens to all adresses but does not 
            generate an acknowledge.Using some software routines and a small cpu 
            you could make a universal I2C data logger.</FONT> </P>
            <P><FONT size=2><A name=qatest></A><B>Is there a way to test/debug 
            I2C buses ?</B> </FONT></P>
            <P><FONT size=2>There is no general way to Debug an I2C bus. However 
            a few guidelines might help to get it running. <BR>First thing is to 
            check the levels on the bus. You should see a clear signal that has 
            a low level that is lower then 0.8 volt and a high level which is at 
            least 3.5 volts. ( assuming you are running in a 5 volt environment 
            )</FONT> </P>
            <P><FONT size=2>If the high level is not high enough or does not 
            rise fast enough then you can try to lower the value of the pull up 
            resistor. You must take care however not to surpass the maximum 
            allowable current in the I2C driver stage . The minimum allowable 
            resistor for a 5 volt drive I2C bus is 5volts / 3mA = 1600 Ohms. A 
            typical value of 4700 ohm should do fine.</FONT> </P>
            <P><FONT size=2>Make sure the bus is not 'stuck' . This could be the 
            result of a bad power supply (chips go into latch up during 
            power-on) or a bad chip . <BR>also check the Troubleshooting 
            section</FONT> </P>
            <P><FONT size=2><A name=qademo></A><B>I want to experiment with I2C 
            .Are there demokits available.?</B> </FONT></P>
            <P><FONT size=2>Philips has at least 1 board ( i know of two 
            different boards) for these purposes. It features a bunch of 
            different I2C devices such as EEprom ,digital I/O ,A/D D/A , 
            controllable switch , Real time clock , Ram , Display driver (led 
            and LCD with even an alphanumeric LCD) and also can host a number of 
            their 8051 compatible CPU's.</FONT> </P>
            <P><FONT size=2>For people wanting to control I2C from their pc they 
            can either buy a card or build one themselfves. A number of Programs 
            is available to control I2C devices from this interfaces. You can 
            use the Philips / signetics software or use the driver i wrote to 
            control the I2C bus from within your programs.</FONT> </P>
            <P><FONT size=2><A name=qaplugin></A><B>Are there plug in board 
            available for IBM Pc to emulate I2C ?</B> </FONT></P>
            <P><FONT size=2>There are a number of debugging tools out there 
            which can monitor an I2C bus . <BR>Philips has one of these tools 
            available. Contact you Philips/Signetics representative for more 
            information. <BR>I2C Bus monitor MIIC-101</FONT> </P>
            <P><FONT size=2>Micro Computer Control Corporation <BR>PO Box 275 
            <BR>17 Model Ave <BR>Hopewell New Jersey 08525 <BR>USA</FONT> </P>
            <P><FONT size=2>Calibre ICA-90 I2C Adapter as IBM PC Plug-in Board 
            <BR>Calibre electronics Ltd <BR>Broomfield House <BR>Bolling Road 
            <BR>Bradford BD4 7BG <BR>England <BR>Also available from Farnell 
            Components&nbsp; Part no : 256-109 cost : approx 350 Us $</FONT> 
</P>
            <P><FONT size=2>In USA you can also contact</FONT> </P>
            <P><FONT size=2>Saelig Co. <BR>1193 Moseley Rd <BR>Victor New York 
            14564</FONT> </P>
            <P><FONT size=2><A name=qapullup></A><B>I have problems with long 
            buses. Can i make an active pull-up ?</B> </FONT></P>
            <P><FONT size=2>Absolutely. If you need to go off board however then 
            you should use the P87B715 device from philips. <BR>for on board you 
            can use following solution. Here comes the Schematic: <BR><IMG 
            height=100 src="The I2C FAQ_files/shot12.gif" width=156 border=0> 
            <BR>Now how does it work ?</FONT> </P>
            <P><FONT size=2>First of all Rs. This is a series resistor used to 
            minimize cross talk and undershoot .It also protects the I/O drivers 
            of the I2C devices against overvoltages and overcurrent injection. 
            These resistors are advised if you run a long bus on high speed ( 
            such as in enhanced I2C mode). When the bus becomes free all output 
            stages on the bus are turned off and SCL (or SDa for that matter) 
            become high. This will not happen immediately , but the voltage will 
            rise during a certain time. Now Suppose the switch is not there. The 
            charge time of the bus capacitor is determined by the value of R1 
            only . The higher one of them is the longer it will take for the bus 
            to reach a sufficient stable High level. We can't make the Series 
            resistor too small because then we will go out of spec on the 
            maximum allowable current into one I2C device when it turn's it's 
            output driver on.</FONT> </P>
            <P><FONT size=2>When we calculate for a current of 3ma we end up at 
            approx 1800 ohms for the series resistance. 5volts / 3ma = 1666 Ohms 
            . <BR>To stay somewhere below this 3mA rating we take 1800 Ohms.The 
            charge time for a bus capacitance of about 200pf would be around 360 
            nS. That is out of spec.The Spec for rise or fall time in Fast I2C 
            is set to approx 300nS. <BR>But we can't drop the value of our 
            resistor without breaking the other spec of 3ma Max current. <BR>Now 
            if we had a means to change the value of the resistor 
            temporarily.... And that's exactly what is done with the Analog 
            Switch. If the voltage level sensed by the switch is in the range 
            0.8 to 2 volts then it will turn on. Meaning that the moment the 
            voltage on the SDa line starts rising , this resistor will kick in 
            and increase charge current to a value of 5volts/(1K8//1K2) = 
            <BR>720 Ohms. the charge current will then rise to 5 volts / 720 
            Ohms = 7 mA. This is allowable for a brief period of time. Of course 
            all of this is a dynamic process. The actual charge current will 
            change due to the fact that the bus voltage will rise. <BR>A small 
            graphical representation will explain more:</FONT> </P>
            <P><FONT size=2><IMG height=100 src="The I2C FAQ_files/shot14.gif" 
            width=156> <BR>Wave 1 represents the turn off of the I2C device.So 
            the bus must go to a logic 1 <BR>Wave 2 is the what you get if you 
            only use a resistor. The bus 'slowly comes up to 5 volts due to the 
            RC constant of Rpull-up and Cparasitic <BR>Wave 3 shows the kicking 
            in of the Analog switch. If the bus gets at approx 0.7 volts it 
            kicks in and kicks out when the bus reaches approx 3 volts <BR>Wave 
            4 is how the voltage on the bus changes. You can clearly see that it 
            rises much faster when the switch is turned on. <BR>And finally wave 
            5 show the current flowing into the I2C device. It starts at approx 
            3mA.</FONT> </P>
            <P><FONT size=2>When the output stage is turned off this current 
            slightly drops due to the fact that the voltage on the bus is 
            rising. The moment our switch kick's in you see the current double. 
            The same effect is then present as before the switch closed: the 
            current drops as the bus voltage rises.When the switch opens again 
            the current drops a little to charge the capacitor up to 5 volts. 
            But at that time all chips already detect a logic one and are well 
            withing the 300nS. Rise time.</FONT> </P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=pseudocode></A><B>An I2C driver 
            in PseudoCode</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>This section covers a sample I2C driver. Currently 
            Version 1.1</FONT> </P>
            <P><FONT size=2>It is written in PseudoCode which is an imaginary 
            programming language that any programmer should be capable of 
            porting to his/her favorite language.</FONT> </P>
            <P><FONT size=2>First we will define a set of basic interface 
            routines. All text between / / is considered as remark. Following 
            variables are used :</FONT> </P>
            <P><FONT size=2>n,x = a general purpose BYTE <BR>SIZE =&nbsp; a byte 
            holding the maximum number of transferred data at a time 
            <BR>DATA(SIZE) =&nbsp; an array holding up to SIZE number of bytes. 
            This will contain the data we want to transmit and will store the 
            received data. <BR>BUFFER =&nbsp; a byte value holding immediate 
            received or transmit data.</FONT> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=driverfunc></A><B>Driver functions</B> 
            </FONT></P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><FONT size=2>Basic 
                  functions</FONT></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driveinit"><FONT 
                  size=2>I2C_init : initializes I2C 
                  bus</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivestart"><FONT 
                  size=2>Start : Sends a Start condition</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivestop"><FONT 
                  size=2>Stop : Sends a stop 
                  condition</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driveput"><FONT 
                  size=2>PutByte : Sends a Byte</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driveget"><FONT 
                  size=2>GetByte : reads a Byte</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivegiveack"><FONT 
                  size=2>GiveAck : Gives ACK to 
                  slave</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivegetack"><FONT 
                  size=2>GetAck : Gets ACK from 
                  slave</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><B><FONT 
                  size=2>HighLevel functions</FONT></B><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driveread"><FONT 
                  size=2>Read : Reads a byte from an address</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivewrite"><FONT 
                  size=2>Write : Writes a byte to an address</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driveread"><FONT 
                  size=2>Randomread : Reads a block of data</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><A 
                  href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#drivewrite"><FONT 
                  size=2>RandomWrite : Writes a block of data</FONT></A><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P><FONT size=2><BR><TT>/$$$$$$$$$$$$$$$$$$$$$$$$$$$/</TT> 
            <BR><TT>/****&nbsp; I2C Driver V1.1&nbsp; ****/</TT> 
            <BR><TT>/&nbsp;&nbsp;&nbsp; Written by V.Himpe.&nbsp;&nbsp;&nbsp; 
            /</TT> <BR><TT>/ Released as Public Domain /</TT> 
            <BR><TT>/$$$$$$$$$$$$$$$$$$$$$$$$$$$/</TT> </FONT></P>
            <P><FONT size=2><TT>DECLARE N,SIZE,BUFFER,X Byte</TT> 
            <BR><TT>DECLARE DATA(size) Array</TT> </FONT></P>
            <P><FONT size=2><A name=driveinit></A><B><TT>SUBroutine 
            I2C_INIT</TT></B> <BR><TT>&nbsp; SDA=1</TT> <BR><TT>&nbsp; 
            SCK=0</TT> <BR><TT>&nbsp; FOR n = 0 to 3</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL STOP</TT> <BR><TT>&nbsp; 
            NEXT n</TT> <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=drivestart></A><B><TT>SUBroutine 
            START</TT></B> <BR><TT>&nbsp; SCK=1</TT> <BR><TT>&nbsp; SDA=1</TT> 
            <BR><TT>&nbsp; SDA=0</TT> <BR><TT>&nbsp; SCK=0</TT> <BR><TT>&nbsp; 
            SDA=1</TT> <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=drivestop></A><B><TT>SUBroutine 
            STOP</TT></B> <BR><TT>&nbsp; SDA=0</TT> <BR><TT>&nbsp; SCK=1</TT> 
            <BR><TT>&nbsp; SDA=1</TT> <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=driveput></A><B><TT>SUBroutine 
            PUTBYTE(BUFFER)</TT></B> <BR><TT>&nbsp; FOR n = 7 TO 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; SDA= BIT(n) of BUFFER</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; SCK=1</TT> <BR><TT>&nbsp;&nbsp;&nbsp; 
            SCK=0</TT> <BR><TT>&nbsp; NEXT n</TT> <BR><TT>&nbsp; SDA=1</TT> 
            <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=driveget></A><B><TT>SUBroutine 
            GETBYTE</TT></B> <BR><TT>&nbsp; FOR n = 7 to 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; SCK=1</TT> <BR><TT>&nbsp;&nbsp;&nbsp; 
            BIT(n) OF BUFFER = SDA</TT> <BR><TT>&nbsp;&nbsp;&nbsp; SCK=0</TT> 
            <BR><TT>&nbsp; NEXT n</TT> <BR><TT>&nbsp; SDA=1</TT> 
            <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=drivegiveack></A><B><TT>SUBroutine 
            GIVEACK</TT></B> <BR><TT>&nbsp; SDA=0</TT> <BR><TT>&nbsp; SCK=1</TT> 
            <BR><TT>&nbsp; SCK=0</TT> <BR><TT>&nbsp; SDA=1</TT> 
            <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=drivegetack></A><B><TT>SUBroutine 
            GETACK</TT></B> <BR><TT>&nbsp; SDA=1</TT> <BR><TT>&nbsp; SCK=1</TT> 
            <BR><TT>&nbsp; WAITFOR SDA=0</TT> <BR><TT>&nbsp; SCK=0</TT> 
            <BR><B><TT>ENDSUB</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><TT>/ this concludes the lowlevel/</TT> <BR><TT>/ 
            set of instructions for the/</TT> <BR><TT>/ I2C driver. The 
            next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /</TT> <BR><TT>/ functions 
            will handle the&nbsp; /</TT> <BR><TT>/ telegram formatting on 
            a&nbsp;&nbsp; /</TT> <BR><TT>/ higher 
            level&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            /</TT> </FONT></P>
            <P><FONT size=2><A name=driveread></A><B><TT>SUBroutine 
            READ</TT></B> <BR><TT>&nbsp;(Device_addr,Number_of_bytes)</TT> 
            </FONT></P>
            <P><FONT size=2><TT>&nbsp; Device_addr=</TT> <BR><TT>&nbsp; 
            Device_addr OR (0000.0001)</TT> <BR><TT>&nbsp;&nbsp; / This sets the 
            READ FLAG /</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; CALL START</TT> <BR><TT>&nbsp; CALL 
            PUTBYTE(Device_adress)</TT> <BR><TT>&nbsp; CALL GETACK</TT> 
            <BR><TT>&nbsp; FOR x= 0 to Number_of_bytes)</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; CALL GETBYTE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; DATA(x)=BUFFER</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; IF X&lt; Number_of_bytes THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL GIVEACK</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; END IF</TT> <BR><TT>&nbsp; NEXT x</TT> 
            <BR><TT>&nbsp; CALL STOP</TT> <BR><B><TT>ENDsub</TT></B> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=drivewrite></A><B><TT>SUBroutine 
            WRITE</TT></B> <BR><TT>&nbsp;(Device_addr,Number_of_bytes)</TT> 
            <BR><TT>&nbsp;Device_addr=</TT> <BR><TT>&nbsp;Device_addr AND 
            (1111.1110)</TT> <BR><TT>&nbsp; / This clears READ flag /</TT> 
            <BR><TT>&nbsp;CALL START</TT> <BR><TT>&nbsp;CALL 
            PUTBYTE(Device_addr)</TT> <BR><TT>&nbsp;CALL GETACK</TT> 
            <BR><TT>&nbsp;FOR x= 0 to Number_of_bytes</TT> <BR><TT>&nbsp;&nbsp; 
            CALL PUTBYTE (DATA(x))</TT> <BR><TT>&nbsp;&nbsp; CALL GETACK</TT> 
            <BR><TT>&nbsp;NEXT x</TT> <BR><TT>&nbsp;CALL STOP</TT> 
            <BR><TT>ENDsub</TT> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=driverandomread></A><B><TT>SUBroutine 
            RANDOMREAD</TT></B> <BR><TT>&nbsp; (Device_addr,</TT> 
            <BR><TT>&nbsp;&nbsp; Start_addr,</TT> <BR><TT>&nbsp;&nbsp; 
            Number_of_bytes)</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; Device_addr=</TT> <BR><TT>&nbsp; 
            Device_addr AND (1111.1110)</TT> <BR><TT>&nbsp; / This clears READ 
            flag /</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; CALL START</TT> <BR><TT>&nbsp; CALL 
            PUTBYTE(Device_addr)</TT> <BR><TT>&nbsp; CALL GETACK</TT> 
            <BR><TT>&nbsp; CALL PUTBYTE(Start_addr)</TT> <BR><TT>&nbsp; CALL 
            GETACK</TT> <BR><TT>&nbsp; CALL START</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; Device_addr=</TT> <BR><TT>&nbsp; 
            Device_addr OR (0000.0001)</TT> <BR><TT>&nbsp; / This sets the READ 
            FLAG /</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; CALL PUTBYTE(Device_addr)</TT> 
            <BR><TT>&nbsp; CALL GETACK</TT> <BR><TT>&nbsp; FOR x= 0 to 
            Number_of_bytes</TT> <BR><TT>&nbsp;&nbsp;&nbsp; CALL GETBYTE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; DATA(x)=BUFFER</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; CALL GIVEACK</TT> <BR><TT>&nbsp; NEXT 
            x</TT> <BR><TT>&nbsp; CALL STOP</TT> <BR><TT>ENDsub</TT> <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><A name=driverandomwrite></A><B><TT>SUBroutine 
            RANDOMWRITE</TT></B> <BR><TT>&nbsp; (Device_addr,</TT> 
            <BR><TT>&nbsp;&nbsp; Start_addr,</TT> <BR><TT>&nbsp;&nbsp; 
            Number_of_bytes)</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; Device_addr=</TT> <BR><TT>&nbsp; 
            Device_addr AND (1111.1110)</TT> <BR><TT>&nbsp; / This clears READ 
            flag /</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; CALL START</TT> <BR><TT>&nbsp; CALL 
            PUTBYTE(Device_addr)</TT> <BR><TT>&nbsp; CALL GETACK</TT> 
            <BR><TT>&nbsp; CALL PUTBYTE(Start_addr)</TT> <BR><TT>&nbsp; CALL 
            GETACK</TT> <BR><TT>&nbsp; FOR x= 0 to Number_of_bytes</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL PUTBYTE (DATA(x))</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL GETACK</TT> <BR><TT>&nbsp; 
            NEXT x</TT> <BR><TT>&nbsp; CALL STOP</TT> <BR><B><TT>ENDsub</TT></B> 
            <BR><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#driverfunc">Back 
            to Driver</A> <BR><TT>/ $$$$$$$$$$$$$$$$$$$$$$$$ /</TT> 
            <BR><TT>/&nbsp; End of the I2C Driver . /</TT> <BR><TT>/ 
            $$$$$$$$$$$$$$$$$$$$$$$$ /</TT> </FONT></P>
            <P><FONT size=2>Some notes about the high level routines. The READ 
            and WRITE routine read/write one or more byte(s) from/to a slave 
            device. Generally this will be used only with Number_of_bytes set to 
            1. An example :</FONT> </P>
            <P><FONT size=2><TT>PCD8574=(0100.0000)b</TT> <BR><TT>CALL 
            READ(PCD8574,1)</TT> <BR><TT>result = DATA(0)</TT> </FONT></P>
            <P><FONT size=2>will read the status of the 8 bit input port of a 
            PCD8574.</FONT> </P>
            <P><FONT size=2><TT>DATA(0)=(0110.01010)b</TT> <BR><TT>CALL 
            WRITE(PCD8574,1)</TT> </FONT></P>
            <P><FONT size=2>will write 0110.0101 to the 8 bit port of the 
            PCD8574</FONT> </P>
            <P><FONT size=2>When do you need a multiread ? Consider a PCF8582 
            EEPROM. You want to read its contents in one time.</FONT> </P>
            <P><FONT size=2><TT>PCF8582=(1010.0000)b</TT> <BR><TT>CALL 
            READ(PCF8582,255)</TT> </FONT></P>
            <P><FONT size=2>You can do the same with WRITE for the EEprom with 
            the restriction that Number_of_bytes is not larger than 4. You will 
            have to check the components datasheets.</FONT> </P>
            <P><FONT size=2>The most useful instructions are RANDOMREAD and 
            RANDOMWRITE. <BR>Write 4 bytes of data to location 20h of the 
            EEPROM</FONT> </P>
            <P><FONT size=2><TT>DATA(0)=(1010.0011)b</TT> 
            <BR><TT>DATA(1)=(1110.0000)b</TT> <BR><TT>DATA(2)=(0000.1100)b</TT> 
            <BR><TT>DATA(3)=(1111.0000)b</TT> <BR><TT>CALL RANDOMWRITE 
            (PCF8582,(20)h,3)</TT> </FONT></P>
            <P><FONT size=2>The same goes for reading 16 bytes from the eeprom 
            starting at adress 42h</FONT> </P>
            <P><TT><FONT size=2>CALL RANDOMREAD(PCF8582,(42)h,15)</FONT></TT> 
            </P>
            <P><FONT size=2>The results are stored in DATA. All you have to do 
            is read them out of&nbsp; the array to process.&nbsp; When you give 
            the devices adress to these routines you don't have to care about 
            the R/W flag. It will be automatically set to the right state inside 
            the routines. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=debugtools></A><B>Debugging 
            tools.</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>So you have an I2C bus and you want to monitor 
            activity. Using a regular scope this is rather tough. When you are 
            in control then you can easily generate a trigger for the scope. If 
            you are not in control ( in a TV set or other equipment ) then 
            things <BR>get more complicated. The tools described in this section 
            should provide some easy means to solve these problems.</FONT> </P>
            <P><FONT size=2><A name=triggen></A><B><U>I2C trigger 
            generator.</U></B> <BR>This simple circuit allows any scope to 
            trigger on an I2C transmission. Each time a start condition is 
            detected the output of the flipflop will generate a pulse that can 
            be used to trigger a scope.. <BR><IMG height=72 
            src="The I2C FAQ_files/shot9.gif" width=156> <BR>The SCL and SDA are 
            not connected wrong in the above schematic. You have to cross them 
            in order for the circuit to detec the Start. Remember that Start 
            means : a falling edge on SDA when SCL is high. And that is exactly 
            what this circuit detects. <BR><A name=checkacq></A><B><U>Checking 
            who is controlling the bus.</U></B> <BR></FONT></P>
            <P><FONT size=2>To see who is actively pulling the bus low can be 
            done using a simple resistor.</FONT> </P>
            <P><FONT size=2><IMG height=100 src="The I2C FAQ_files/shot6.gif" 
            width=156> <BR>The low level generated by a slave will be lower then 
            the low level generated by the master. this is easily recognizable 
            on an oscilloscope. That way you can examine whis actually driving 
            the bus. you could do the same for the clock line. then you can even 
            look into multimaster environments. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=ibmpc></A><B>I2C interfacing 
            system for IBM-PC.</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>This section covers a complete I2C experimenting 
            system for the IBM PC. In this section i will set up an environment 
            to experiment with I2C. <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=pchardware></A><B><U>Hardware 
            section.</U></B> </FONT></P>
            <P><FONT size=2>The schematic is almost the same as the Schematic 
            provided by Philips. As a matter of fact it is the same.A little 
            addition has been made. However it is 100% compatible with the 
            philips driver schematic. This was done so you can use it both with 
            tools like TV400 from Philips and with my driver.</FONT> </P>
            <P><FONT size=2><IMG height=110 src="The I2C FAQ_files/shot23.gif" 
            width=156> </FONT></P>
            <P><FONT size=2>SCL and SDA speak pretty much for themselves. The 
            trig Output is an addition&nbsp; i made to the original schematic. 
            When used with the driver described below&nbsp; it is able to 
            trigger an oscilloscope. Each time a Start condition occurs the trig 
            output generates a pulse.This will make it easier to monitor bus 
            activity when experimenting wth the system. You can write a loop 
            that keeps doing the same over and over again. When you connect SCL 
            and SDa to channels X1 and X2 of the scope and the TRIG <BR>&nbsp;to 
            the Trigger input. You can see the transfer on the bus. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=pccsoft></A><B><U>Software</U></B> 
            </FONT></P>
            <P><FONT size=2>This module can be used with the programs developed 
            by philips and available from their FTP site or from the 
            internet.</FONT> </P>
            <P><FONT size=2>Programs are TV400.ZIP and RAD216.ZIP. These contain 
            a complete bus control terminal. You can monitor bus activity 
            <BR>&nbsp;and also actively control lots of standard chips.It comes 
            with libraries for nearly all Philips IC's available. You can also 
            control Non-Philips&nbsp; ic by using the universal bus interface. 
            <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Quickbasic / PDS / POWERBasic Driver</FONT></U></B> 
            </P>
            <P><FONT size=2>This describes a set a routines written Basic that 
            allow you to run an I2C bus over a standard printerport. The program 
            is written in such a way that it can be run on different platforms 
            without ( or with minor ) modifications.</FONT> </P>
            <P><FONT size=2><TT>' ****************************</TT> <BR><TT>' * 
            I2CDRIVE&nbsp; I2C Bus Driver</TT> <BR><TT>' * (c)1995-2000 Vincent 
            Himpe</TT> <BR><TT>' * Features&nbsp; ICee Debugger</TT> <BR><TT>' * 
            Released as PUBLIC DOMAIN.</TT> <BR><TT>' * Use as you please</TT> 
            <BR><TT>' * This driver can be used</TT> <BR><TT>' * in Quickbasic 
            ,PDS and</TT> <BR><TT>' * PowerBasic</TT> <BR><TT>' * PowerBasic 
            users must kill</TT> <BR><TT>' * the 'Sub DELAY' since</TT> 
            <BR><TT>' * powerbasic has this</TT> <BR><TT>' * feature.</TT> 
            <BR><TT>' ****************************</TT> <BR><TT>' * ICee 
            Debugger.</TT> <BR><TT>' * If during run of the</TT> <BR><TT>' * 
            program the computer beeps</TT> <BR><TT>' * this means that an 
            adressed</TT> <BR><TT>' * chip is not responding.</TT> <BR><TT>' * 
            Turn on the debugger by</TT> <BR><TT>' * issuing the I2CDebugOn</TT> 
            <BR><TT>' * command immediately after</TT> <BR><TT>' * opening the 
            bus and rerun</TT> <BR><TT>' * the program. You will get</TT> 
            <BR><TT>' * detailed error information</TT> <BR><TT>' 
            ****************************</TT> </FONT></P>
            <P><FONT size=2><TT>DIM ICdta(10)</TT> <BR><TT>COMMON SHARED 
            I2CLoPort,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cmidport,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2CHiPort,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Csavedstatus,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            SCL, SDA</TT> <BR><TT>COMMON SHARED I2Cdebug,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Ctimeout,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cdevadr%,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cresult%,</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            ICdta(), hold</TT> </FONT></P>
            <P><FONT size=2><TT>' powerbasic users must replace</TT> <BR><TT>' 
            COMMON SHARED by PUBLIC</TT> </FONT></P>
            <P><FONT size=2><TT>hold = .001</TT> <BR><TT>' do not adapt this 
            value.</TT> <BR><TT>' Adapt the value in DELAY</TT> </FONT></P>
            <P><FONT size=2><TT>' $$$$$$$$$$$$$$$$</TT> <BR><TT>' $ Sample 
            program</TT> <BR><TT>' $$$$$$$$$$$$$$$$</TT> </FONT></P>
            <P><FONT size=2><TT>I2Copen 0, 1</TT> <BR><TT>' open port &amp;h378 
            (LPT1)</TT> <BR><TT>' with ICee enabled</TT> </FONT></P>
            <P><FONT size=2><TT>I2Cinit 10</TT> <BR><TT>' set a 
            timeoutvalue</TT> </FONT></P>
            <P><TT><FONT size=2>CLS</FONT></TT> </P>
            <P><FONT size=2><TT>I2Cwrite 192, 12</TT> <BR><TT>' write '12' to 
            device</TT> <BR><TT>' with adress 192</TT> </FONT></P>
            <P><FONT size=2><TT>a = I2Cread(193)</TT> <BR><TT>' read a byte 
            from</TT> <BR><TT>' the same device</TT> </FONT></P>
            <P><FONT size=2><TT>I2Cwwsend 200, 1, 7</TT> <BR><TT>' write '7' to 
            register</TT> <BR><TT>' '1' of device at adress</TT> <BR><TT>' 
            200</TT> </FONT></P>
            <P><FONT size=2><TT>a = I2Cwwread(201, 1)</TT> <BR><TT>' read 
            register 2 of</TT> <BR><TT>' device at 200</TT> </FONT></P>
            <P><FONT size=2><TT>I2Cmultiread 200, 3</TT> <BR><TT>' read first 4 
            registers</TT> <BR><TT>' (0..3) of the slave at</TT> <BR><TT>' 
            address 200</TT> </FONT></P>
            <P><FONT size=2><TT>FOR a = 0 TO 3</TT> <BR><TT>&nbsp;&nbsp;&nbsp; 
            PRINT ICdta(a)</TT> <BR><TT>NEXT a</TT> <BR><TT>END</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB delay (count)</TT> 
            <BR><TT>&nbsp; ' Notice about this routine.</TT> <BR><TT>&nbsp; ' 
            When using powerbasic you</TT> <BR><TT>&nbsp; ' must delete this 
            routine</TT> <BR><TT>&nbsp; ' in its entirity. It is</TT> 
            <BR><TT>&nbsp; ' needed for Qbasic only.</TT> </FONT></P>
            <P><FONT size=2><TT>&nbsp; FOR a = 0 TO (count * 1000)</TT> 
            <BR><TT>&nbsp; ' adapt this value according</TT> <BR><TT>&nbsp; ' to 
            the CPU speed</TT> <BR><TT>&nbsp; NEXT a</TT> <BR><TT>END SUB</TT> 
            <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            holdsystem</TT> <BR><TT>&nbsp; ' Freezes the system so you</TT> 
            <BR><TT>&nbsp; ' can read ICee debugger</TT> <BR><TT>&nbsp; ' 
            messages</TT> <BR><TT>&nbsp; CALL messg(" Press key ")</TT> 
            <BR><TT>&nbsp; DO</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; a$ = 
            INKEY$</TT> <BR><TT>&nbsp; LOOP UNTIL a$ &lt;&gt; ""</TT> 
            <BR><TT>END SUB</TT> <BR><TT>' ----------------------------</TT> 
            <BR><TT>SUB I2Cclose</TT> <BR><TT>&nbsp; ' Closes the I2C 
            driver.</TT> <BR><TT>&nbsp; ' This resets the LPT port</TT> 
            <BR><TT>&nbsp; OUT I2CHiPort,I2Csavedstatus</TT> <BR><TT>&nbsp; OUT 
            I2CLoPort,127</TT> <BR><TT>&nbsp;END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Cdebugoff</TT> 
            <BR><TT>&nbsp; ' Turns off the I2C debugger</TT> <BR><TT>&nbsp; CALL 
            messg("ICee DISABLED ")</TT> <BR><TT>&nbsp; I2Cdebug = 0</TT> 
            <BR><TT>END SUB</TT> <BR><TT>' ----------------------------</TT> 
            <BR><TT>SUB I2Cdebugon</TT> <BR><TT>&nbsp; ' Turns the debugger 
            on</TT> <BR><TT>&nbsp; CALL messg("ICee ENABLED ")</TT> 
            <BR><TT>&nbsp; I2Cdebug = 1</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Cgenstart</TT> 
            <BR><TT>&nbsp; ' transmits a start</TT> <BR><TT>&nbsp; IF I2Cdebug = 
            1 THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL 
            messg("START")</TT> <BR><TT>&nbsp; END IF</TT> <BR><TT>&nbsp; 
            '&nbsp; start of transmission</TT> <BR><TT>&nbsp; OUT I2CLoPort, 
            127</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT 
            I2CHiPort, 8</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT 
            I2CLoPort, 255</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; 
            OUT I2CLoPort, 255</TT> <BR><TT>&nbsp; delay hold</TT> 
            <BR><TT>&nbsp; OUT I2CHiPort, 0</TT> <BR><TT>&nbsp; delay hold</TT> 
            <BR><TT>END SUB</TT> <BR><TT>' ----------------------------</TT> 
            <BR><TT>SUB I2Cgenstop</TT> <BR><TT>&nbsp; ' transmits a stop</TT> 
            <BR><TT>&nbsp; IF I2Cdebug = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL messg("STOP")</TT> 
            <BR><TT>&nbsp; END IF</TT> <BR><TT>&nbsp; OUT I2CLoPort, 255</TT> 
            <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT I2CLoPort, 
            255</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT 
            I2CHiPort, 8</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT 
            I2CHiPort, 8</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; OUT 
            I2CLoPort, 127</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>END 
            SUB</TT> <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            I2Cgiveack</TT> <BR><TT>&nbsp; ' Gives an ACK to a slave</TT> 
            <BR><TT>&nbsp; OUT I2CHiPort, 0</TT> <BR><TT>&nbsp; delay hold</TT> 
            <BR><TT>&nbsp; OUT I2CLoPort, 255</TT> <BR><TT>&nbsp; delay 
            hold</TT> <BR><TT>&nbsp; OUT I2CHiPort, 8</TT> <BR><TT>&nbsp; delay 
            hold</TT> <BR><TT>&nbsp; OUT I2CHiPort, 0</TT> <BR><TT>&nbsp; delay 
            hold</TT> <BR><TT>&nbsp; OUT I2CLoPort, 127</TT> <BR><TT>&nbsp; 
            delay hold</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Cinit (timeout)</TT> 
            <BR><TT>&nbsp; ' aborts transmission and</TT> <BR><TT>&nbsp; ' 
            clears bus</TT> <BR><TT>&nbsp; FOR I2Ca% = 0 TO 5</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CLoPort, 255</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 8</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CLoPort, 127</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp; NEXT I2Ca%</TT> <BR><TT>&nbsp; I2Ctimeout = 
            timeout</TT> <BR><TT>&nbsp; OUT I2CHiPort, 8</TT> <BR><TT>&nbsp; 
            delay hold</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Cmultiread (adr%, 
            count%)</TT> <BR><TT>&nbsp; ' performs a multiread</TT> 
            <BR><TT>&nbsp; adr% = (adr% OR 1)</TT> <BR><TT>&nbsp; I2Cdevadr% = 
            adr%</TT> <BR><TT>&nbsp; CALL I2Cgenstart</TT> <BR><TT>&nbsp; CALL 
            I2Ctransmit(adr%)</TT> <BR><TT>&nbsp; CALL I2Cwaitforack</TT> 
            <BR><TT>&nbsp; I2Cdevadr% = 0</TT> <BR><TT>&nbsp; FOR i% = 0 TO 
            count%</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL 
            I2Creceive</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF il% &lt; 
            count% THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL 
            I2Cgiveack</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICdta(il%) = I2Cresult%</TT> 
            <BR><TT>&nbsp; NEXT il%</TT> <BR><TT>&nbsp; CALL I2Cgenstop</TT> 
            <BR><TT>END SUB</TT> <BR><TT>' ----------------------------</TT> 
            <BR><TT>SUB I2Copen (port%, dbug%)</TT> <BR><TT>&nbsp; ' Always call 
            this before</TT> <BR><TT>&nbsp; ' any other routines !</TT> 
            <BR><TT>&nbsp; SELECT CASE port%</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CASE 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CLoPort = 
            &amp;H378</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cmidport = &amp;H379</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CHiPort = 
            &amp;H37A</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CASE 1</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CLoPort = 
            &amp;H278</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cmidport = &amp;H279</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CHiPort = 
            &amp;H27A</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CASE 2</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CLoPort = 
            &amp;H3BC</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cmidport = &amp;H3BD</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2CHiPort = 
            &amp;H3BE</TT> <BR><TT>&nbsp; END SELECT</TT> <BR><TT>&nbsp; 
            I2Csavedstatus = _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            INP(I2CHiPort)</TT> <BR><TT>&nbsp; IF dbug% = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; I2Cdebug = 1</TT> <BR><TT>&nbsp; 
            ELSE</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; I2Cdebug = 0</TT> 
            <BR><TT>&nbsp; END IF</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Cpob</TT> 
            <BR><TT>&nbsp; ' puts bits on the bus</TT> <BR><TT>&nbsp; IF SDA = 1 
            THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CLoPort, 127</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> <BR><TT>&nbsp; 
            ELSE</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CLoPort, 255</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> <BR><TT>&nbsp; END 
            IF</TT> <BR><TT>&nbsp; IF scl = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 8</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> <BR><TT>&nbsp; 
            ELSE</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> <BR><TT>&nbsp; END 
            IF</TT> <BR><TT>&nbsp; IF I2Cdebug = 1 THEN</TT> <BR><TT>&nbsp; END 
            IF</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>FUNCTION I2Cread 
            (adr%)</TT> <BR><TT>&nbsp; ' reads a byte</TT> <BR><TT>&nbsp; adr% = 
            (adr% OR 1)</TT> <BR><TT>&nbsp; I2Cdevadr% = adr%</TT> 
            <BR><TT>&nbsp; CALL I2Cgenstart</TT> <BR><TT>&nbsp; CALL 
            I2Ctransmit(adr%)</TT> <BR><TT>&nbsp; CALL I2Cwaitforack</TT> 
            <BR><TT>&nbsp; I2Cdevadr% = 0</TT> <BR><TT>&nbsp; CALL 
            I2Creceive</TT> <BR><TT>&nbsp; CALL I2Cgiveack</TT> <BR><TT>&nbsp; 
            CALL I2Cgenstop</TT> <BR><TT>&nbsp; I2Cread = I2Cresult%</TT> 
            <BR><TT>END FUNCTION</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>SUB I2Creceive</TT> 
            <BR><TT>&nbsp; ' receives a byte</TT> <BR><TT>&nbsp; IF I2Cdebug = 1 
            THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL 
            messg("Receiving")</TT> <BR><TT>&nbsp; END IF</TT> <BR><TT>&nbsp; 
            I2Cresult% = 0</TT> <BR><TT>&nbsp; OUT I2CLoPort, 127</TT> 
            <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; FOR I2Ca% = 7 TO 0 
            STEP -1</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2Cb% = 2 ^ 
            I2Ca%</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 
            8</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2Cin% = _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (INP(I2Cmidport) AND 
            128)</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 
            0</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF I2Cin% = 128 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2Cresult% 
            = _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            I2Cresult% + I2Cb%</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PRINT 
            "1";</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PRINT 
            "0";</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF I2Ca% = 4 THEN _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PRINT " 
            ";</TT> <BR><TT>&nbsp; NEXT I2Ca%</TT> <BR><TT>&nbsp; PRINT</TT> 
            <BR><TT>END SUB</TT> <BR><TT>' ----------------------------</TT> 
            <BR><TT>SUB I2Csettimeout (tme)</TT> <BR><TT>&nbsp; ' assigns a 
            timeout value</TT> <BR><TT>&nbsp; I2Ctimeout = tme</TT> <BR><TT>END 
            SUB</TT> <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            I2Ctransmit (byte%)</TT> <BR><TT>&nbsp; ' transmits a byte</TT> 
            <BR><TT>&nbsp; IF I2Cdebug = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL messg("Transmitting")</TT> 
            <BR><TT>&nbsp; END IF</TT> <BR><TT>&nbsp; I2Ca% = 0</TT> 
            <BR><TT>&nbsp; FOR I2Ca% = 7 TO 0 STEP -1</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2Cb% = 2 ^ I2Ca%</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF (byte% AND I2Cb%) =_</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; I2Cb% 
            THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            OUT I2CLoPort, 127</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay 
            hold</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT 
            I2CLoPort, 255</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay 
            hold</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 8</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OUT I2CHiPort, 0</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delay hold</TT> 
            <BR><TT>&nbsp; NEXT I2Ca%</TT> <BR><TT>&nbsp; OUT I2CLoPort, 
            127</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>END SUB</TT> 
            <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            I2Cwaitforack</TT> <BR><TT>&nbsp; ' waits for slave acknowledge</TT> 
            <BR><TT>&nbsp; IF I2Cdebug = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; CALL messg("Wait for ACK")</TT> 
            <BR><TT>&nbsp; END IF</TT> <BR><TT>&nbsp; OUT I2CLoPort, 127</TT> 
            <BR><TT>&nbsp; OUT I2CLoPort, 127</TT> <BR><TT>&nbsp; delay 
            hold</TT> <BR><TT>&nbsp; OUT I2CHiPort, 8</TT> <BR><TT>&nbsp; OUT 
            I2CHiPort, 8</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>&nbsp; 
            acknowledge = 0</TT> <BR><TT>&nbsp; acktimer = 0</TT> <BR><TT>&nbsp; 
            WHILE acknowledge = 0</TT> <BR><TT>&nbsp;&nbsp; acktimer = acktimer 
            + 1</TT> <BR><TT>&nbsp;&nbsp; I2C.mon = _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; (INP(I2Cmidport) _</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; AND 128)</TT> <BR><TT>&nbsp;&nbsp; IF 
            I2C.mon &lt;&gt; 128 THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp; 
            acknowledge = 1</TT> <BR><TT>&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp; IF acktimer = _</TT> <BR><TT>&nbsp;&nbsp;&nbsp; 
            I2Ctimeout THEN</TT> <BR><TT>&nbsp;&nbsp;&nbsp; acknowledge = 1</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; IF I2Cdevadr% &lt;&gt; 0 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; IF I2Cdebug = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL messg("No device")</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL holdsystem</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ELSE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BEEP</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; ELSE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; IF I2Cdebug = 1 THEN</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL messg("No ACK")</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CALL holdsystem</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; ELSE</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BEEP</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp; END IF</TT> 
            <BR><TT>&nbsp;&nbsp;&nbsp; END IF</TT> <BR><TT>&nbsp;&nbsp; END 
            IF</TT> <BR><TT>&nbsp; WEND</TT> <BR><TT>&nbsp; OUT I2CLoPort, 
            127</TT> <BR><TT>&nbsp; OUT I2CLoPort, 127</TT> <BR><TT>&nbsp; delay 
            hold</TT> <BR><TT>&nbsp; OUT I2CHiPort, 0</TT> <BR><TT>&nbsp; OUT 
            I2CHiPort, 0</TT> <BR><TT>&nbsp; delay hold</TT> <BR><TT>END 
            SUB</TT> <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            I2Cwrite (adr%, dta%)</TT> <BR><TT>&nbsp; ' writes a byte to a 
            slave</TT> <BR><TT>&nbsp; adr% = (adr% AND 254)</TT> <BR><TT>&nbsp; 
            I2Cdevadr% = adr%</TT> <BR><TT>&nbsp; CALL I2Cgenstart</TT> 
            <BR><TT>&nbsp; CALL I2Ctransmit(adr%)</TT> <BR><TT>&nbsp; CALL 
            I2Cwaitforack</TT> <BR><TT>&nbsp; I2Cdevadr% = 0</TT> <BR><TT>&nbsp; 
            CALL I2Ctransmit(dta%)</TT> <BR><TT>&nbsp; CALL I2Cwaitforack</TT> 
            <BR><TT>&nbsp; CALL I2Cgenstop</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>FUNCTION I2Cwwread _</TT> 
            <BR><TT>&nbsp; (adr%, sbadr%)</TT> <BR><TT>&nbsp; adr% = (adr% OR 
            1)</TT> <BR><TT>&nbsp; I2Cdevadr% = adr%</TT> <BR><TT>&nbsp; CALL 
            I2Cgenstart</TT> <BR><TT>&nbsp; CALL I2Ctransmit(adr%)</TT> 
            <BR><TT>&nbsp; CALL I2Cwaitforack</TT> <BR><TT>&nbsp; I2Cdevadr% = 
            0</TT> <BR><TT>&nbsp; CALL I2Ctransmit(sbadr%)</TT> <BR><TT>&nbsp; 
            CALL I2Cwaitforack</TT> <BR><TT>&nbsp; CALL I2Cgenstart</TT> 
            <BR><TT>&nbsp; adr% = adr% + 1</TT> <BR><TT>&nbsp; CALL 
            I2Ctransmit(adr%)</TT> <BR><TT>&nbsp; CALL I2Creceive</TT> 
            <BR><TT>&nbsp; CALL I2Cgenstop</TT> <BR><TT>&nbsp; I2Cwwread = 
            I2Cresult%</TT> <BR><TT>END FUNCTION</TT> <BR><TT>' 
            ----------------------------</TT> <BR><TT>&nbsp; SUB I2Cwwsend 
            _</TT> <BR><TT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (adr%, sbadr%, 
            dta%)</TT> <BR><TT>&nbsp; ' writes with subadress</TT> 
            <BR><TT>&nbsp; adr% = (adr% AND 254)</TT> <BR><TT>&nbsp; I2Cdevadr% 
            = adr%</TT> <BR><TT>&nbsp; CALL I2Cgenstart</TT> <BR><TT>&nbsp; CALL 
            I2Ctransmit(adr%)</TT> <BR><TT>&nbsp; CALL I2Cwaitforack</TT> 
            <BR><TT>&nbsp; I2Cdevadr% = 0</TT> <BR><TT>&nbsp; CALL 
            I2Ctransmit(sbadr%)</TT> <BR><TT>&nbsp; CALL I2Cwaitforack</TT> 
            <BR><TT>&nbsp; CALL I2Ctransmit(dta%)</TT> <BR><TT>&nbsp; CALL 
            I2Cwaitforack</TT> <BR><TT>&nbsp; CALL I2Cgenstop</TT> <BR><TT>END 
            SUB</TT> <BR><TT>' ----------------------------</TT> <BR><TT>SUB 
            messg (dta$)</TT> <BR><TT>&nbsp; ' shows the ICee messages</TT> 
            <BR><TT>&nbsp; PRINT dta$</TT> <BR><TT>END SUB</TT> <BR><TT>' 
            ----------------------------</TT> </FONT></P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <P align=center><FONT size=2>Legal Notes and Copyrights.</FONT></B> 
            </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>Standard Philips Copyright notice :</FONT> </P>
            <P><FONT size=2>' Purchase of Philips I2c components conveys a 
            licence under the Philips&nbsp; I2C patent to use the components in 
            the I2C system provided the system&nbsp; conforms to the I2C 
            specifications defined by Philips ' <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=access></A><B>ACCESS bus.</B> 
            </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>One offspring of the I2C BUS is the ACCESS Bus. This 
            bus was co-developed by Philips, Signetics, Digital and Intel.The 
            goal was to create a bus that could help us getting rid of all 
            cabling involved with computer peripherals. You would have 1 bus 
            connector where you could hook up your 
            keyboard,mouse,digitizer,scanner,printer,monitor etc.</FONT> </P>
            <P><FONT size=2>Then by using sotware you could issue commands to 
            your monitor or&nbsp; printer.Things like selecting fonts or 
            programming brightness and picture size could be done from within 
            software on the host platform. Things like Hotplugging are included 
            in the standard.There has been a chip developed that could replace 
            the standard 8042 (which is the&nbsp; keyboard controller in an ibm 
            PC) by an access bus controller. Digital is using the bus in its 
            Alpha based machines. Sony and some other manufacturers have 
            monitors that support the remote programming&nbsp; 
            features.Microsoft will support the bus fully . (Windows 95).</FONT> 
            </P>
            <P><FONT size=2>Basically the hardware layer of the access bus is an 
            I2C bus. All that has been done is implementing a software protocol 
            to&nbsp; provide additional functionality to the system.</FONT> </P>
            <P><FONT size=2>This bus gas never gained any support due to the 
            lack of performance. The idea was good but the speed was not 
            available. Out of this idea the USB was developed. The basic 
            mechanisms in I2C have been modified and taken to a new level. While 
            the physical layer is different , the sync mechanisms , the 
            handshaking , addressing , and multimaster mode is an improvement of 
            the I2C bus. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=motherboard></A><B>I2C in your 
            computer</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>You might not realise it but every motherboard 
            using Pentium II and later processors has an I2C bus on board !. 
            This bus is used for so called system management. This ranges from 
            voltage detectors on the motherboard , temperature monitors in the 
            CPU to the configuration paramteres for your memory. Todays DIMM 
            memory modules have a small I2C EEPROM onboard that hold the timing 
            information for the memory. This information is read during boot. 
            The Slot One packaged processors have an I2C interface to read out 
            the temperature of the CPU !.</FONT> </P>
            <P><FONT size=2>In portable computers the bus is even more used. the 
            little Trackball , TouchStick or Glidepoint all use I2C to transmit 
            mouse coordinates !. Smart harddisk boast I2C buses. The Battery in 
            a notebook can have an I2C bus that is used to read voltage , 
            temperature and battery information. this bus is accessible via port 
            &amp;H80 in your computer. DO NOT MESS WITH IT !. If you have no 
            clue how it works don't use it. Find documentation first. ! You can 
            screw up the motherboard or other peripherals . <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <P align=center><FONT size=2>SOURCES OF INFORMATION ABOUT 
            I2C</FONT></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR><A name=ftpsites></A><B><U>FTP sites</U></B> 
            </FONT></P>
            <P><FONT size=2>The following is a list of the various anonymous ftp 
            sites that carry tools and examples about I2C and how to implement 
            it. There are many others that&nbsp; are not listed here that 
            contains bits and pieces.&nbsp; Usually you can find them using 
            Archie and searching for "I2C","ACCESS BUS" and stuff like 
            that.</FONT> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>ftp.funet.fi (nic.funet.fi)</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>/pub/compilers/8051</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>/pub/microprocs/MCS-51</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>ftp.oak.oakland.edu</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>ai.uga.edu/pub/hardware</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>ftp://ftp.inetbsystems.us.com/pub/Philips-MCU/bbs</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica">
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Web pages</FONT></U></B> </P><!--mstheme--></FONT><!--msthemelist-->
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><!--msthemelist-->
              <TBODY>
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>http://www.hut.fi/~iisakkil/stuff.html</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>http://www.ramtron.com</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>http://www.siemens.com</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist-->
              <TR>
                <TD vAlign=baseline width=42><IMG height=15 hspace=13 
                  src="The I2C FAQ_files/abalbul1.gif" width=15></TD>
                <TD vAlign=top width="100%"><!--mstheme--><FONT 
                  face="Trebuchet MS, Arial, Helvetica"><FONT 
                  size=2>http://www.ping.be/electrozone</FONT><!--mstheme--></FONT><!--msthemelist--></TD></TR><!--msthemelist--></TBODY></TABLE><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">
            <P><FONT size=2>Back to Main Index</FONT></A></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P><B>
            <P align=center><FONT size=2>I2C products</FONT></B> </P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2><BR>This section includes descriptions and 
            references to free and commercial software for the I2C Bus and 
            lookalikes.FTP sites and BBSs contain many quality packages and code 
            samples for free. For heavy duty use, you might prefer the many 
            commercial packages that are available.With the public domain (or 
            free) stuff, you're usually on your own. The commercial packages 
            usually provide extensive documentation and support.</FONT> </P>
            <P><FONT size=2><A name=freedev></A><B><U>Free development 
            tools</U></B> </FONT></P>
            <P><FONT size=2>The following is a list of development tools that 
            exist on the net.</FONT> </P>
            <P><FONT size=2>IBM PC program to control I2C bus from the printer 
            port. <BR>Program: TV312.EXE&nbsp; / TV400.EXE / I2CRAD.EXE 
            <BR>Description: Control program by Philips Semiconductors for I2C 
            bus. <BR>Location:&nbsp; ftp.pppl.gov : /pub/8051/signetics-bbs 
            <BR>ftp.funet.fi : /pub/microprocs/MCS-51/signetics-bbs</FONT> </P>
            <P><FONT size=2>The same site has lots of APP notes on i2C and how 
            to implement it on 8051 and 68000 compatible CPU's.</FONT> </P>
            <P><FONT size=2><A name=commercial></A><B><U>Commercially available 
            products</U></B> </FONT></P>
            <P><FONT size=2>Philips Microcontroller Product Group <BR>811 East 
            Arques Ave. / POB 3409 <BR>Sunnvale, CA&nbsp; 94088-3409 
            <BR>Technical documentation: <BR>Sunnyvale, CA - (800)447-1500&nbsp; 
            Fax: (408)991-3773 <BR>Eindhoven, Netherlands - Fax: 
            31-40-724825</FONT> </P>
            <P><FONT size=2>A set of development boards for the I2C bus :</FONT> 
            </P>
            <P align=center><FONT size=2>S87C00KSD&nbsp; I2C evaluation Board 
            <BR>OM1016&nbsp; I2C demo board with CPU and a number of peripherals 
            like <BR>I/O, AD/DA, LCD, RAM, EEprom, CLOCK, DTMF, IR receiver 
            etc.. <BR>OM1018&nbsp; Manual for the above. <BR>OM1020&nbsp; LCD 
            and driver demoboard. <BR>OM4151&nbsp; Similar to OM1016 but without 
            IR link. <BR>OM4160&nbsp; 68070 based demoboard. <BR>OM1022&nbsp; 
            I2C bus analyser. Hard and software for IBM PC. <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=docs></A><B>I2C 
            DOCUMENTATION</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Periodicals that sometimes have articles about 
            I2C</FONT></U></B> </P>
            <P><FONT size=2>Various magazines and journals (journals seems to be 
            THE popular name for magazines these days) provide articles from 
            time to time on the I2C&nbsp; bus</FONT> </P>
            <P><FONT size=2>The Computer Applications Journal (Circuit Cellar 
            Ink) <BR>&nbsp; - programming and construction articles <BR>&nbsp; - 
            POB 7694, Riverton, NJ&nbsp; 08077-8784 <BR>&nbsp; - FAX: 
            (203)872-2204 <BR>&nbsp; - Voice orders: (609)786-0409 <BR>&nbsp; - 
            On-line orders (BBS): (203)871-1988 <BR>&nbsp; - Email orders: 
            ken.davidson@circellar.com</FONT> </P>
            <P><FONT size=2>Electronic Engineering Times <BR>&nbsp; - industry 
            announcements and trends <BR>&nbsp; - FREE to qualified engineers 
            and managers involved in <BR>&nbsp; engineering decisions <BR>&nbsp; 
            - Fulfillment Dept., PO Box 9055, Jericho, NY&nbsp; 11753-8955 
            <BR>&nbsp; - FAX:&nbsp; (516)733-6960</FONT> </P>
            <P><FONT size=2>Electronics Now <BR>&nbsp; - construction articles 
            <BR>&nbsp; - Box 55115, Boulder, CO&nbsp; 80321-5115 <BR>&nbsp; - 
            $19.97 one year</FONT> </P>
            <P><FONT size=2>Elektor Electronics <BR>&nbsp; - programming and 
            construction articles <BR>&nbsp; - World Wide Subscription Service 
            Ltd <BR>&nbsp; Unit 4, Gibbs Reed Farm, Pashley Road <BR>&nbsp; 
            Ticehurst TN5 7HE, England <BR>&nbsp; - 27 UK pounds <BR>&nbsp; or 
            <BR>&nbsp; - Old Colony Sound Lab, P.O. Box 243, Peterborough, NH 
            03458 <BR>&nbsp; - Tel. (603)924-6371, 924-6526 <BR>&nbsp; - Fax: 
            (603)924-9467 <BR>&nbsp; - $57 USA and Canada per year <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P>&nbsp;</P><B><U>
            <P><FONT size=2>Books on I2C</FONT></U></B> <FONT size=2><BR>I don't 
            have information on all of these, only that they exist.&nbsp; I 
            would greatly appreciate it if someone could provide a short 
            synopsis and the complete book name if you are familiar with any of 
            these titles.</FONT> </P>
            <P><FONT size=2>&nbsp; Data book / Handbook / Users' Guide 
            <BR>&nbsp; - Philips I2C devices Handbook <BR>&nbsp; - 8051 Handbook 
            from philips (contains also complete I2C spec) <BR>&nbsp; pub no : 
            9397-750-00013 <BR>&nbsp; - I2C peripherials for microcontrollers. 
            <BR>&nbsp; 98-8080-574 (Philips ord.nr) <BR>&nbsp; Currently 
            depleted.Sheduled for reprint in august</FONT> </P>
            <P><FONT size=2>&nbsp; IC01&nbsp; Semiconductors for Radio and Audio 
            systems <BR>&nbsp; IC02&nbsp; Semiconductors for TV and Video 
            systems. <BR>&nbsp; IC03&nbsp; Semiconductors for Telecom systems 
            <BR>&nbsp; IC14&nbsp; 8048 based microcontrollers <BR>&nbsp; 
            IC20&nbsp; 8051 based microcontrollers</FONT> </P>
            <P><FONT size=2>&nbsp; Le BUS I2C&nbsp; (in FRENCH !!) <BR>&nbsp; By 
            Dominique Paret <BR>&nbsp; Dunod Technique&nbsp; ISBN 
            2-10-001717-9</FONT> </P>
            <P><FONT size=2>&nbsp; De I2C bus. ( in DUTCH )</FONT> </P>
            <P><FONT size=2>&nbsp; Published by Elektor from The netherlands 
            <BR>&nbsp; Currently only available in Dutch. ENglish translation 
            upcoming. <BR>&nbsp; ISBN .......</FONT> </P>
            <P><FONT size=2>&nbsp; Philips Data Sheet on the I2C Bus&nbsp; * 
            Free * <BR>&nbsp; Order # 98-8080-575-01</FONT> </P>
            <P><FONT size=2>&nbsp; by Mail <BR>&nbsp; Philips 
            semiconductors&nbsp; ! Philips Semiconductors <BR>&nbsp; 811 East 
            Arques Anenue&nbsp; ! Literature distribution centre <BR>&nbsp; PO 
            BOx3409&nbsp; ! 1000 Business centre drive <BR>&nbsp; Sunnyvale 
            California&nbsp; 94088-3409&nbsp; ! Mount Prospect IL 60056</FONT> 
            </P>
            <P align=center><FONT size=2>&nbsp; Or by FAX&nbsp; 1-708-296-8556 
            <BR>&nbsp; Phone 1-800-234-7381 <BR><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=shoot></A><B>Troubleshooting 
            guide.</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>Right. So you have built your first system using the 
            I2C bus and you find out that it doesn't work as it should. So what 
            do we do now ? This section covers a few of the common pitfalls 
            involved in using the bus.</FONT> </P>
            <P><FONT size=2>First thing to check is : Are the pull-up resistors 
            connected.? <BR>Probably the most common error is that people forget 
            to connect a pull-up resistor between SDA and VCC and SCL and 
            VCC.&nbsp; Remember : SDA and SCL are open collector or open-drain 
            lines. Resistance value should be between 4K7 and 47K.</FONT> </P>
            <P><FONT size=2>The longer you make your lines the lower the 
            resistance value should be. This is to force more current into the 
            lines to overcome the capacitance formed by the lines. (This is very 
            important if you want to run on high speeds)</FONT> </P>
            <P><FONT size=2>Check that the lines can be toggled between the 
            logic levels. Check that the levels on both SDA and SCL fall into 
            the allowed range. Check this both for high and low levels. Maybe 
            there is a short circuit that straps one of the lines to VCC or 
            GND.</FONT> </P>
            <P><FONT size=2>By now you should have a bus that is capable of 
            transporting I2C signals. Now you can try to send some information 
            to a chip or read some information&nbsp; It is best to connect only 
            one slave device to the I2C bus.</FONT> </P>
            <P><FONT size=2>The chip is not responding.</FONT> </P>
            <P><FONT size=2>Check following things in order Are SCL and SDA 
            connected correctly ? Are you accessing the right address ? Has the 
            start command been issued correctly ?.</FONT> </P>
            <P><FONT size=2>If you have a storage scope you can monitor the bus 
            by connecting Channel 1 to SDA and channel 2 to SCL. Set the scope 
            on Single shot&nbsp; trigger on channel 2. Set pretrigger 
            to1division. Or you can build the trigger circuit described in this 
            FAQ under 'debugging tools'.</FONT> </P>
            <P><FONT size=2>If you don't have a scope you can use another trick. 
            Send the start command plus the slave address .Now make the SCL line 
            <BR>&nbsp;high . Your Master is now waiting for ACK from the slave 
            device. You can connect a led + resistor between VCC and SDA. If the 
            led does not light then something is wrong.</FONT> </P>
            <P><FONT size=2>Send a couple of stop commands and then try again.It 
            is possible that the chip is locking up due to power-on effects. 
            Replace the chip. It could be defective.</FONT> </P>
            <P><FONT size=2>If here it still does not work you have a problem in 
            the I2C protocol. Check that the START , ACQ and STOP sequences are 
            correct. Also verify that the data transmitted is correct. MSB 
            first.</FONT> </P>
            <P><FONT size=2>When you got it talking you can connect the other 
            devices one by one. Each time try to access them.</FONT> </P>
            <P><FONT size=2>Sometimes I get strange results. Reading a device a 
            couple of times ends up with different data all the time. Writing 
            does not give predictable results. Sometimes the bus even locks 
            up.</FONT> </P>
            <P><FONT size=2>The most logic explanation here is that you have a 
            problem with the bus signals. They are either not high enough or 
            noisy. Or the capacitance on the bus might be so high that the edges 
            of the signals become too slow. decrease the pull up resistance. ( 
            start by connecting half of the value. ) This should improve the 
            problem.</FONT> </P>
            <P><FONT size=2>Another possibility is that you have 2 chips on the 
            same address. This can happen. Example : You have a circuit that 
            uses 2 PCF8574 I/O ports. In your hurry you forget to wire them for 
            different addresses. (You can have up to 8 of these in your 
            circuit)</FONT> </P>
            <P><FONT size=2><B><A 
            href="http://vhimpe.crosswinds.net/electronics/i2cfaq/i2c.html#index">Back 
            to Main Index</A></B> <BR></FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P align=center><FONT size=2><A name=lastword></A><B>Last Words 
            ...</B> </FONT></P><!--msthemeseparator-->
            <P align=center><IMG height=10 src="The I2C FAQ_files/abalrule.gif" 
            width=600></P>
            <P><FONT size=2>This FAQ compiles for a last time all i know about 
            the I2C bus. Over time i got in touch with a lot of people , amongst 
            them the people who designed the bus , people from Hewlett Packard , 
            Synaptics and lots of other companies. I would like to extend 
            greetings to those people. They had interesting problems and it was 
            fun solving them. But the line has to stop somewhere.</FONT> </P>
            <P><FONT size=2>I hope this FAQ may help someone out there.</FONT> 
            </P>
            <P><FONT size=2>Have a good life. <BR>Vincent.</FONT> </P>
            <P>&nbsp;<!--mstheme--></FONT></P></TD></TR></TBODY></TABLE><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica">
      <P>&nbsp;</P><!--mstheme--></FONT><!--msnavigation--></TD></TR><!--msnavigation--></TBODY></TABLE><!--msnavigation-->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD><!--mstheme--><FONT face="Trebuchet MS, Arial, Helvetica"><!--mstheme--></FONT>
      <TABLE height=26 cellSpacing=0 cellPadding=0 width="100%" 
      background="The I2C FAQ_files/bottombar.jpg" border=0>
        <TBODY>
        <TR>
          <TD width="100%" height=24><!--mstheme--><FONT 
            face="Trebuchet MS, Arial, Helvetica"><FONT color=#ffffff size=3>(c) 
            1995- 2002 V.Himpe&nbsp; Hosted on <A 
            href="http://www.crosswinds.net/">CrossWinds</A> Last edited 
            <STRONG>05/05/02 06:24:05 
        PM</STRONG></FONT><!--mstheme--></FONT></TD></TR></TBODY></TABLE><!--mstheme--><FONT 
      face="Trebuchet MS, Arial, Helvetica">
      <P>&nbsp;</P><!--mstheme--></FONT></TD></TR><!--msnavigation--></TBODY></TABLE></BODY></HTML>
