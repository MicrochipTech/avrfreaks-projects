
/******************************************************************************************************
 Title  :   C  configuration file for the SOFTWARE UART FUNCTIONS library (softuart.cfg)
 Author:    Chris efstathiou hendrix@otenet.gr
 Date:      10/Nov/2002
 Software:  AVR-GCC with AVR-AS
 Target:    any AVR device
 Comments:  Based on application note AVR 305
            This software is FREE.

******************************************************************************************************/


#ifndef         SOFTUART_CFG
#define         SOFTUART_CFG

/*#####################################################################################################*/
/*###############################  START OF CONFIGURATION BLOCK   #####################################*/
/*#####################################################################################################*/

/*
   I INTENSIONALY HAVE SET A HIGH BAUDRATE TO GIVE YOU ERRORS OR WARNINGS IN ORDER TO UNDERSTAND
   BETTER THE CAPABILITIES OF THIS CODE. AT 3686400 IT WILL WORK RELIABLY UP TO 57600 BPS
   THE FASTEST MODE IS THE NON INTERRUPT, NON DYNAMIC BAUDRATE, NON DYNAMIC I/O.
   THE SLOWEST IS THE "SUART_DYNAMIC_IO_SETTINGS" CAPABLE HOWEVER FOR 57600 AND BELOW @ 3686400 Hz.
   THE "SUART_DYNAMIC_IO_SETTINGS" HAS BEEN TESTED AT 115200 @ 10 Mhz AND WORKED OK.

   The "SUART_STOP_BIT_DETECTION" selects one from 3 different stop bit detection method.
   0 leaves "SUART_STOP_BITS" + 1/2 bits time for rx data processing,
   1 leaves exactly "SUART_STOP_BITS" bits time for rx data processing
   and 2 leaves 1/2 bit time for rx data processing. To be more precise
   if "SUART_STOP_BIT_DETECTION" == 2 the stop bits are actually counted,
   if "SUART_STOP_BIT_DETECTION" == 1 the code waits until the rx line goes high (start of stop bit),
   and if "SUART_STOP_BIT_DETECTION" == 0 the code waits at the begining for a high-low transition
   and when it finishes receiving the 8 bits it exits leaving more time for rx data processing. 
   Default is 0 but if you have problems with receiving try the other options also.

IMPORTANT: 
   You must use ports that have registers located below 0x3f for fixed port and pins,
   otherwise the driver will not work! Thats because the assembly file uses the in/out/sbi etc.
   instructions. If you set "SUART_DYNAMIC_IO_SETTINGS" to 1 then you can use any port and pin
   but you CANNOT use interrupt driven receiving(Not possible yet...).
*/

#ifndef F_CPU
#define         F_CPU                         3686400    /* CLOCK FREQUENCY IN HERTZ  */
#endif

#define         SUART_0_BAUDRATE              115200     /* Valid only if SUART_0_DYNAMIC_BAUD_CHANGE == 0 */
#define         SUART_0_DYNAMIC_BAUD_CHANGE   1          /* 1 if you will change baudrate during run time */
#define         SUART_0_DYNAMIC_IO_SETTINGS   1          /* 1 = able to change port and pins during run time */
#define         SUART_0_TIMEOUT_ENABLED       1          /* Valid only in non interrupt mode */
#define         SUART_0_TIMEOUT_TIME_MS       5000       /* valid only if SUART_0_TIMEOUT_ENABLED=1 */

#define         SUART_0_WILL_USE_INTERRUPT    1          /* 1=use external interrupt, 0= no interrupt */ 
#define         SUART_0_INTERRUPT             0          /* the ext interrupt number goes here     */
#define         SUART_0_INT_EDGE_TRIGERING    0          /* 0=low level trigering, 1=falling edge trigering */

#define         SUART_0_WILL_USE_A_TIMER      0          /* 1 if you will use a 8 bit timer, 0=no timer */
#define         SUART_0_USE_TIMER             0          /* 0 for timer 0, 2 for timer 2 */

#define         SUART_0_RX_PORT               D          /* the RX pin connection port(INPUT) */
#define         SUART_0_RX_PIN                0          /* Receive pin is  PD0  */

#define         SUART_0_TX_PORT               D          /* the TX pin connection port(OUTPUT) */
#define         SUART_0_TX_PIN                1          /* Transmit pin is PD1  */

#define         SUART_0_STOP_BITS             1          /* Number of stop bits (1, 2, ...) */ 
#define         SUART_0_STOP_BIT_DETECTION    0         /* 0,1 or 2 (different stop bit detection methods) */

#define         SUART_0_BUF_SIZE              20         /* the receive buffer usefull size */
#define         SUART_0_RX_TERMINATION_CHAR   '\r'       /* The Receive termination char goes here */
#define         SUART_0_PUTI_DECIMAL_POINT    ','        /* The decimal point punctuation mark char */

#define         SUART_0_USE_RS232_LOGIC       0          /* Produces inverted uart logic */
/*
    IF YOU PLAN TO CONNECT THE SUART PINS DIRECTLY TO A RS232 PORT SET "SUART_0_USE_RS232_LOGIC" TO 1.
    REMEMBER THAT THE RS232 LOGIC IS: 1 = -12V, 0 = +12V, SO A RESISTOR-ZENER NETWORK IS NEEDED!
    A 10Kohm RESISTOR AND A 5,1 Volt ZENER SHOULD BE ENOUGH. Only the suart RX pin should need
    this network as the TX pin is connected to the RS232 input(RX) and it is found usually at 0V.

    SUART RX PIN--------------------------/\/\/\/\---------RS232 TX LINE (PIN 3 IN A DB9 CONNECTOR)
                    |           |           R1 10 KOHM                
                    |           |
                  ,---'       -----
   ZENER            ^           ^     OPTIONAL
   5,1 VOLT 1/4 W  / \         / \    1N5819
                    |           |
                    |           |
                  -----       -----
                  ////        ////   GND (PIN 5 IN A DB9 CONNECTOR)


    SUART TX PIN---------------------RS232 RX LINE (PIN 2 IN A DB9 CONNECTOR)
                       |
                     ,---'  
                       ^     OPTIONAL ZENER 5,6 V 1/4 W
                      / \    
                       |
                       |
                     -----
                     ////  GND (PIN 5 IN A DB9 CONNECTOR)

     ********      OPTIONAL PARTS ARE NOT NECESSARY   *******

IMPORTANT: IF YOU SELECTED INTERRUPT MODE MAKE SURE THAT THE EXTERNAL INTERRUPT CAN BE RISING EDGE TRIGERED.
           

*/

/*#####################################################################################################*/
/*##############################  END OF CONFIGURATION BLOCK   ########################################*/
/*#####################################################################################################*/

/* MACRO DEFINITIONS */

#ifndef CONCAT1
#define CONCAT1(a, b) CONCAT2(a, b)
#endif
#ifndef CONCAT2
#define CONCAT2(a, b) a ## b
#endif

/**********************************************************************************************************/
/* REGISTER NAME FORMING */

#ifndef GLOBAL_INT_REG
#define GLOBAL_INT_REG    SREG       
#endif
#ifndef GLOBAL_INT_BIT
#define GLOBAL_INT_BIT    7          
#endif


#define SUART_0_RX_OUT_REG             CONCAT1(PORT,SUART_0_RX_PORT)
#define SUART_0_RX_DDR_REG             CONCAT1(DDR,SUART_0_RX_PORT)
#define SUART_0_RX_PIN_REG             CONCAT1(PIN,SUART_0_RX_PORT)

#define SUART_0_TX_OUT_REG             CONCAT1(PORT,SUART_0_TX_PORT)
#define SUART_0_TX_DDR_REG             CONCAT1(DDR,SUART_0_TX_PORT)
#define SUART_0_TX_PIN_REG             CONCAT1(PIN,SUART_0_TX_PORT) 

#define  SUART_0_RX_PORT_IS_IO         1
#define  SUART_0_TX_PORT_IS_IO         1

#if   SUART_0_STOP_BIT_DETECTION == 0 
#define  SUART_0_AVAILABLE_CPU_CYCLES  (((F_CPU/SUART_0_BAUDRATE)*SUART_0_STOP_BITS)+((F_CPU/SUART_0_BAUDRATE)/2) ) 
#elif SUART_0_STOP_BIT_DETECTION == 1
#define  SUART_0_AVAILABLE_CPU_CYCLES  ((F_CPU/SUART_0_BAUDRATE)*SUART_0_STOP_BITS ) 
#elif SUART_0_STOP_BIT_DETECTION == 2
#define  SUART_0_AVAILABLE_CPU_CYCLES  ((F_CPU/SUART_0_BAUDRATE)/2 )
#endif

/**********************************************************************************************************/
/* RX CODE CORRECTION VALUE LOOK-UP TABLE */
#if   SUART_0_DYNAMIC_BAUD_CHANGE == 1 && SUART_0_WILL_USE_A_TIMER == 1 && SUART_0_WILL_USE_INTERRUPT == 1

#define SUART_0_CORRECTION_FACTOR      16
#define SUART_0_DELAY_OVERHEAD         6  /* OK */

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 1 && SUART_0_WILL_USE_A_TIMER == 1 && SUART_0_WILL_USE_INTERRUPT == 0

#define SUART_0_CORRECTION_FACTOR      16
#define SUART_0_DELAY_OVERHEAD         3  /* OK */

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 1 && SUART_0_WILL_USE_A_TIMER == 0 && SUART_0_WILL_USE_INTERRUPT == 1

#define SUART_0_CORRECTION_FACTOR      8
#define SUART_0_DELAY_OVERHEAD         3  /* OK */

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 1 && SUART_0_WILL_USE_A_TIMER == 0 && SUART_0_WILL_USE_INTERRUPT == 0

#define SUART_0_CORRECTION_FACTOR      8
#define SUART_0_DELAY_OVERHEAD         3  /* OK */

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 0 && SUART_0_WILL_USE_A_TIMER == 1 && SUART_0_WILL_USE_INTERRUPT == 1

#define SUART_0_CORRECTION_FACTOR      16
#define SUART_0_DELAY_OVERHEAD         0

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 0 && SUART_0_WILL_USE_A_TIMER == 1 && SUART_0_WILL_USE_INTERRUPT == 0

#define SUART_0_CORRECTION_FACTOR      16
#define SUART_0_DELAY_OVERHEAD         0

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 0 && SUART_0_WILL_USE_A_TIMER == 0 && SUART_0_WILL_USE_INTERRUPT == 1

#define SUART_0_CORRECTION_FACTOR      8
#define SUART_0_DELAY_OVERHEAD         3  /* OK */

#elif SUART_0_DYNAMIC_BAUD_CHANGE == 0 && SUART_0_WILL_USE_A_TIMER == 0 && SUART_0_WILL_USE_INTERRUPT == 0

#define SUART_0_CORRECTION_FACTOR      8
#define SUART_0_DELAY_OVERHEAD         3  /* OK */

#endif
/**********************************************************************************************************/

#if   SUART_0_WILL_USE_INTERRUPT == 1 

#define SUART_0_RX_PROCESSING_CODE_SIZE      52

#elif SUART_0_WILL_USE_INTERRUPT == 0  

#define SUART_0_RX_PROCESSING_CODE_SIZE      32

#endif


/**********************************************************************************************************/
#if SUART_0_DYNAMIC_IO_SETTINGS == 1

#undef  SUART_0_WILL_USE_INTERRUPT
#undef  SUART_0_RX_PROCESSING_CODE_SIZE  
#undef  SUART_0_CORRECTION_FACTOR  
#undef  SUART_0_DELAY_OVERHEAD     

#define SUART_0_WILL_USE_INTERRUPT     0
#define SUART_0_RX_PROCESSING_CODE_SIZE      41

#if   SUART_0_WILL_USE_A_TIMER == 0

#define SUART_0_CORRECTION_FACTOR      15
#define SUART_0_DELAY_OVERHEAD         12

#elif   SUART_0_WILL_USE_A_TIMER == 1

#define  SUART_0_CORRECTION_FACTOR     23
#define  SUART_0_DELAY_OVERHEAD        12

#endif

#endif  /* #if SUART_0_DYNAMIC_IO_SETTINGS == 1 */
/**********************************************************************************************************/

#if SUART_0_WILL_USE_INTERRUPT == 1 && SUART_0_TIMEOUT_ENABLED == 1

#undef  SUART_0_TIMEOUT_ENABLED
#define SUART_0_TIMEOUT_ENABLED        0
#define SUART_0_TIMEOUT_MODE_CHANGE    1

#endif

#if SUART_0_TIMEOUT_ENABLED == 1

#if    SUART_0_DYNAMIC_IO_SETTINGS == 1
#define SUART_0_TIMEOUT_LOOPS          (SUART_0_TIMEOUT_TIME_MS*(F_CPU/13000) )
#elif  SUART_0_DYNAMIC_IO_SETTINGS == 0
#define SUART_0_TIMEOUT_LOOPS          (SUART_0_TIMEOUT_TIME_MS*(F_CPU/10000) )
#endif

#if SUART_0_TIMEOUT_LOOPS <= 0 

#undef SUART_0_TIMEOUT_LOOPS
#define SUART_0_TIMEOUT_LOOPS   1

#endif

#endif  /* #if SUART_0_TIMEOUT_ENABLED == 1 */
/**********************************************************************************************************/


/* Timer  settings depending on what AVR Mpu is used */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#if   SUART_0_WILL_USE_A_TIMER == 1
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#if defined(__AVR_ATmega103__) || defined(__AVR_ATmega128__) || \
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega8515__)
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_0_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_64     ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_0_TCNT          TCNT0
#define SUART_0_TCCR          TCCR0
#define SUART_0_TOIE          TOIE0
#define SUART_0_OCIE          OCIE0

#elif SUART_0_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     0
#define SUART_0_TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_128    0
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_0_TCNT          TCNT2
#define SUART_0_TCCR          TCCR2
#define SUART_0_TOIE          TOIE2
#define SUART_0_OCIE          OCIE2


#endif

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || \
       defined(__AVR_ATmega64__) || defined(__AVR_ATmega323__) 
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_0_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_64     0
#define SUART_0_TIMER_DIV_BY_128    0
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_0_TCNT          TCNT0
#define SUART_0_TCCR          TCCR0
#define SUART_0_TOIE          TOIE0
#define SUART_0_OCIE          OCIE0

#elif SUART_0_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_64     ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_0_TCNT          TCNT2
#define SUART_0_TCCR          TCCR2
#define SUART_0_TOIE          TOIE2
#define SUART_0_OCIE          OCIE2

                         
#endif

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_ATmega161__) || defined(__AVR_ATmega163__) || defined(__AVR_AT90S8515__) || \
       defined(__AVR_AT90S8535__) || defined(__AVR_AT90S4434__)  
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 2

#if SUART_0_USE_TIMER == 0  || NUMBER_OF_8_BIT_TIMERS == 1

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     0
#define SUART_0_TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_128    0
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_0_TCNT          TCNT0
#define SUART_0_TCCR          TCCR0
#define SUART_0_TOIE          TOIE0
#if defined(__AVR_ATmega161__)
#define SUART_0_OCIE          OCIE0
#else
#define SUART_0_OCIE          0
#endif

#elif SUART_0_USE_TIMER == 2 && NUMBER_OF_8_BIT_TIMERS >= 2

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_64     ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_128    ( (1<<2)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2)|(1<<1) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<1)|(1<<0) )

#define SUART_0_TCNT           TCNT2
#define SUART_0_TCCR           TCCR2
#define SUART_0_TOIE           TOIE2
#define SUART_0_OCIE           OCIE2

                         
#endif


/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif  defined(__AVR_AT90S4433__) 
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#define NUMBER_OF_8_BIT_TIMERS 1

#if SUART_0_USE_TIMER > 0
#undef SUART_0_USE_TIMER
#warning " THERE IS NOT SUCH AN 8 BIT TIMER. WILL USE TIMER 0 "
#define SUART_0_USE_TIMER 0
#endif

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     0
#define SUART_0_TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_128    0
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_0_TCNT          TCNT0
#define SUART_0_TCCR          TCCR0
#define SUART_0_TOIE          TOIE0
#define SUART_0_OCIE          OCIE0

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#elif defined(TCNT0)
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/

#if SUART_0_USE_TIMER > 0
#undef SUART_0_USE_TIMER
#warning " THERE IS NOT SUCH AN 8 BIT TIMER. WILL USE TIMER 0 "
#define SUART_0_USE_TIMER 0
#endif

#define SUART_0_TIMER_DIV_BY_1      ( (1<<0) )
#define SUART_0_TIMER_DIV_BY_8      ( (1<<1) )
#define SUART_0_TIMER_DIV_BY_32     0
#define SUART_0_TIMER_DIV_BY_64     ( (1<<1)|(1<<0) )
#define SUART_0_TIMER_DIV_BY_128    0
#define SUART_0_TIMER_DIV_BY_256    ( (1<<2) )
#define SUART_0_TIMER_DIV_BY_1024   ( (1<<2)|(1<<0) )

#define SUART_0_TCNT          TCNT0
#define SUART_0_TCCR          TCCR0
#define SUART_0_TOIE          TOIE0
#define SUART_0_OCIE          0

/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/
#endif
/*222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222*/



/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#endif  /* #if   SUART_0_WILL_USE_A_TIMER == 1 */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/* BAUDRATE TIMING SETTINGS */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#if   SUART_0_WILL_USE_A_TIMER == 0 && SUART_0_DYNAMIC_BAUD_CHANGE == 0
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

#define TEMP_SUART_0_DELAY_ACCURATE      ( ((F_CPU/(SUART_0_BAUDRATE/10))-(SUART_0_CORRECTION_FACTOR*10))/6 )  
#define TEMP_SUART_0_DELAY_REAL          ( ((F_CPU/SUART_0_BAUDRATE)-SUART_0_CORRECTION_FACTOR)/6 )

#if   ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) == 0  

#define SUART_0_DELAY1  (TEMP_SUART_0_DELAY_REAL-(SUART_0_DELAY_OVERHEAD/3))  
#define SUART_0_DELAY2  TEMP_SUART_0_DELAY_REAL  
#define SUART_0_DELAY3  TEMP_SUART_0_DELAY_REAL 

#elif   ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) >= 1 && \
        ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) <= 3 

#define SUART_0_DELAY1  ((TEMP_SUART_0_DELAY_REAL+1)-(SUART_0_DELAY_OVERHEAD/3))   
#define SUART_0_DELAY2  TEMP_SUART_0_DELAY_REAL 
#define SUART_0_DELAY3  TEMP_SUART_0_DELAY_REAL 

#elif   ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) >= 4 && \
        ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) <= 6 

#define SUART_0_DELAY1  ((TEMP_SUART_0_DELAY_REAL+1)-(SUART_0_DELAY_OVERHEAD/3))   
#define SUART_0_DELAY2  (TEMP_SUART_0_DELAY_REAL+1) 
#define SUART_0_DELAY3  TEMP_SUART_0_DELAY_REAL 

#elif   ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) >= 7 && \
        ( TEMP_SUART_0_DELAY_ACCURATE - (TEMP_SUART_0_DELAY_REAL*10)  ) <= 9 

#define SUART_0_DELAY1  ((TEMP_SUART_0_DELAY_REAL+1)-(SUART_0_DELAY_OVERHEAD/3))   
#define SUART_0_DELAY2  (TEMP_SUART_0_DELAY_REAL+1) 
#define SUART_0_DELAY3  (TEMP_SUART_0_DELAY_REAL+1) 


#endif



/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#elif SUART_0_WILL_USE_A_TIMER == 1  && SUART_0_DYNAMIC_BAUD_CHANGE == 0
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

#define SUART_0_BAUDRATE_DELAY                 ( F_CPU/SUART_0_BAUDRATE )


#if     SUART_0_BAUDRATE_DELAY <= 255
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_1
#define SUART_0_TIMER_DIVISION_FACTOR                 1

#elif   SUART_0_BAUDRATE_DELAY <= (255*8)
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_8
#define SUART_0_TIMER_DIVISION_FACTOR                 8

#elif   SUART_0_BAUDRATE_DELAY <= (255*32) && SUART_0_TIMER_DIV_BY_32 > 0
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_32
#define SUART_0_TIMER_DIVISION_FACTOR                 32

#elif   SUART_0_BAUDRATE_DELAY <= (255*64) && SUART_0_TIMER_DIV_BY_64 >  0
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_64
#define SUART_0_TIMER_DIVISION_FACTOR                 64

#elif   SUART_0_BAUDRATE_DELAY <= (255*128) && SUART_0_TIMER_DIV_BY_128 > 0
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_128
#define SUART_0_TIMER_DIVISION_FACTOR                 128

#elif   SUART_0_BAUDRATE_DELAY <= (255*255)
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_256
#define SUART_0_TIMER_DIVISION_FACTOR                 256

#elif   SUART_0_BAUDRATE_DELAY <= (255*1024)
#define SUART_0_PRESCALER_VALUE                       SUART_0_TIMER_DIV_BY_1024
#define SUART_0_TIMER_DIVISION_FACTOR                 1024

#else 
#error " BAUDRATE TOO LOW "

#endif

#define SUART_0_TIME_1_BIT     ( (SUART_0_BAUDRATE_DELAY-SUART_0_CORRECTION_FACTOR)/SUART_0_TIMER_DIVISION_FACTOR )
#define SUART_0_TIME_HALF_BIT  ( ((SUART_0_BAUDRATE_DELAY-SUART_0_DELAY_OVERHEAD)/2)/SUART_0_TIMER_DIVISION_FACTOR )


/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/   
#endif  /* #elif SUART_0_WILL_USE_A_TIMER == 1 && SUART_0_DYNAMIC_BAUD_CHANGE == 0 */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#if SUART_0_WILL_USE_INTERRUPT == 0     /* DECIDE THE FUNCTIONS,INTERRUPT,REGISTER AND BITS TO BE USED    */
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/* SET THE TX AND RX FUNCTION NAMES */
#undef  SUART_0_INTERRUPT
#define SUART_0_RX_FUNCTION _suart_0_getc_
#define SUART_0_PUTCHAR     suart_0_putchar

/*11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#elif   SUART_0_WILL_USE_INTERRUPT == 1  /* DECIDE THE FUNCTIONS,INTERRUPT,REGISTER AND BITS TO BE USED  */
/*11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/

/* SET THE TX FUNCTION NAME */
#define SUART_0_PUTCHAR     suart_0_putchar

/* IF RS232 LOGIC IS SELECTED TURN ON EXTERNAL INTERRUPT EDGE TRIGERING */
#if     SUART_0_USE_RS232_LOGIC == 1 && SUART_0_WILL_USE_INTERRUPT == 1
#undef  SUART_0_INT_EDGE_TRIGERING 
#define SUART_0_INT_EDGE_TRIGERING  1   
#endif


/* DEVICE SPECIFIC EXTERNAL INTERRUPT RELATED REGISTER NAMES  */
#if defined(__AVR_ATmega103__) 

#define SUART_0_INT_SENSE_CONTROL_REG    EICR
#define SUART_0_INT_FLAG_REG             EIFR
#define SUART_0_INT_REG                  EIMSK

#if SUART_0_INT_EDGE_TRIGERING == 1 && SUART_0_WILL_USE_INTERRUPT && SUART_0_INTERRUPT <= 3
#error " THE SPECIFIED EXT INTERRUPT CAN NOT BE EDGE TRIGERED "
#endif

#elif  defined(__AVR_ATmega128__) 

#if   SUART_0_INTERRUPT <= 3
#define SUART_0_INT_SENSE_CONTROL_REG    EICRA
#elif SUART_0_INTERRUPT >= 4 
#define SUART_0_INT_SENSE_CONTROL_REG    EICRB
#endif
#define SUART_0_INT_FLAG_REG             EIFR
#define SUART_0_INT_REG                  EIMSK

#else

#define SUART_0_INT_SENSE_CONTROL_REG    MCUCR
#define SUART_0_INT_FLAG_REG             GIFR
#define SUART_0_INT_REG                  GIMSK

#endif

/* SELECT THE APPROPRIATE SIGNAL NAME, ACTIVATION BIT AND SENSE BIT OF THE SPECIFIED EXTERNAL INTERRUPT */
#if     SUART_0_INTERRUPT == 0

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT0
#define SUART_0_INT_BIT                     INT0 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC00
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC01
#define SUART_0_INT_FLAG                    INTF0 

#elif   SUART_0_INTERRUPT == 1

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT1
#define SUART_0_INT_BIT                     INT1 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC10
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC11
#define SUART_0_INT_FLAG                    INTF1 

#elif   SUART_0_INTERRUPT == 2

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT2
#define SUART_0_INT_BIT                     INT2 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC20
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC21
#define SUART_0_INT_FLAG                    INTF2
 
#elif   SUART_0_INTERRUPT == 3

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT3
#define SUART_0_INT_BIT                     INT3 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC30
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC31
#define SUART_0_INT_FLAG                    INTF3

#elif   SUART_0_INTERRUPT == 4

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT4
#define SUART_0_INT_BIT                     INT4 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC40
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC41
#define SUART_0_INT_FLAG                    INTF4

#elif   SUART_0_INTERRUPT == 5

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT5
#define SUART_0_INT_BIT                     INT5 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC50
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC51
#define SUART_0_INT_FLAG                    INTF5

#elif   SUART_0_INTERRUPT == 6

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT6
#define SUART_0_INT_BIT                     INT6 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC60
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC61
#define SUART_0_INT_FLAG                    INTF6

#elif   SUART_0_INTERRUPT == 7

#define SUART_0_RX_FUNCTION                 SIG_INTERRUPT7
#define SUART_0_INT_BIT                     INT7 
#define SUART_0_INT_SENSE_CONTROL_BIT_0     ISC70
#define SUART_0_INT_SENSE_CONTROL_BIT_1     ISC71
#define SUART_0_INT_FLAG                    INTF7 

#endif  

/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/
#endif
/*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111*/


/* ERROR MESSAGES */
#if    SUART_0_WILL_USE_A_TIMER == 1 &&  NUMBER_OF_8_BIT_TIMERS == 2 

#if    SUART_0_USE_TIMER == 1 || SUART_0_USE_TIMER > 2 
#error "SELECT TIMER 0 OR 2 PLEASE! " 
#endif

#endif /* SUART_0_WILL_USE_A_TIMER == 1 &&  NUMBER_OF_8_BIT_TIMERS == 2  */


#if SUART_0_WILL_USE_INTERRUPT > 1
#error YOU MUST SELECT 0 OR 1 FOR "SUART_0_WILL_USE_INTERRUPT" !!!
#endif

#if SUART_0_BUF_SIZE > 253
#error YOU MUST SELECT 0-253 FOR SUART_0_BUF_SIZE!!!
#elif SUART_0_BUF_SIZE > 64
#warning MAKE SURE YOU HAVE ENOUGH RAM!!!
#endif





#endif   /* #ifndef  SOFTUART_CFG */
/*########################################################################################################*/
/*                                     T   H   E      E   N   D                                           */
/*########################################################################################################*/

