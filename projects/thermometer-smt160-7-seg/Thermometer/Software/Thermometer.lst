
AVRASM ver. 2.1.9  Thermometer.asm Thu Feb 28 10:45:36 2008

Thermometer.asm(892): Including file 'Thermometer.vec'
Thermometer.asm(893): Including file 'Thermometer.inc'
Thermometer.inc(2): warning: Register r3 already defined by the .DEF directive
Thermometer.asm(893): 'Thermometer.inc' included form here
Thermometer.inc(3): warning: Register r2 already defined by the .DEF directive
Thermometer.asm(893): 'Thermometer.inc' included form here
Thermometer.inc(4): warning: Register r4 already defined by the .DEF directive
Thermometer.asm(893): 'Thermometer.inc' included form here
Thermometer.inc(5): warning: Register r6 already defined by the .DEF directive
Thermometer.asm(893): 'Thermometer.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.8a Professional
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATtiny2313
                 ;Clock frequency        : 12.000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 32 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : Yes
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "Thermometer.vec"
                 
                 ;INTERRUPT VECTORS
000000 c019      	RJMP __RESET
000001 c049      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c072      	RJMP _timer0_ovf_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 	.INCLUDE "Thermometer.inc"
                 
                 	.DEF _b=R3
                 	.DEF _i=R2
                 	.DEF _temp=R4
                 	.DEF _memory=R6
                 _s_data:
000013 f9c0
000014 b0a4
000015 9299
000016 f882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8
000017 9080
000018 ffbf      	.DB  0x80,0x90,0xBF,0xFF
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 	.EQU  __GPIOR1_INIT=0x00
                 	.EQU  __GPIOR2_INIT=0x00
                 
                 __GLOBAL_INI_TBL:
000019 0000      	.DW  0
                 _0x20:
                 
                 __RESET:
00001a 94f8      	CLI
00001b 27ee      	CLR  R30
00001c bbec      	OUT  EECR,R30
00001d bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00001e e1f8      	LDI  R31,0x18
00001f b7a4      	IN   R26,MCUSR
000020 7fa7      	CBR  R26,8
000021 bfa4      	OUT  MCUSR,R26
000022 bdf1      	OUT  WDTCR,R31
000023 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000024 e08d      	LDI  R24,13
000025 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000026 93ed      	ST   X+,R30
000027 958a      	DEC  R24
000028 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000029 e880      	LDI  R24,LOW(0x80)
00002a e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00002b 93ed      	ST   X+,R30
00002c 958a      	DEC  R24
00002d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002e e3e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000030 9185      	LPM  R24,Z+
000031 9195      	LPM  R25,Z+
000032 9700      	SBIW R24,0
000033 f061      	BREQ __GLOBAL_INI_END
000034 91a5      	LPM  R26,Z+
000035 91b5      	LPM  R27,Z+
000036 9005      	LPM  R0,Z+
000037 9015      	LPM  R1,Z+
000038 01bf      	MOVW R22,R30
000039 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003a 9005      	LPM  R0,Z+
00003b 920d      	ST   X+,R0
00003c 9701      	SBIW R24,1
00003d f7e1      	BRNE __GLOBAL_INI_LOOP
00003e 01fb      	MOVW R30,R22
00003f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000040 e0e0      	LDI  R30,__GPIOR0_INIT
000041 bbe3      	OUT  GPIOR0,R30
000042 e0e0      	LDI  R30,__GPIOR1_INIT
000043 bbe4      	OUT  GPIOR1,R30
000044 e0e0      	LDI  R30,__GPIOR2_INIT
000045 bbe5      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
000046 edef      	LDI  R30,LOW(0xDF)
000047 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000048 e8c0      	LDI  R28,LOW(0x80)
000049 e0d0      	LDI  R29,HIGH(0x80)
                 
00004a c088      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 ;       1           /****************************************************
                 ;       2           ** Processor    : ATtiny2313-20PI                   **
                 ;       3          *** Frequncy     : 12.000000 MHz                     ***
                 ;       4         **** AUTHOR       : Behnam Esckandariun               ****
                 ;       5        ***** Project      : Thermometer with SMT160 V.1.00.5  *****
                 ;       6         **** Date         : 2008/02/24 11:49PM IRAN-ZANJAN    ****
                 ;       7          *** Compiler     : CodeVisionAVR  V 1.25.8           ***
                 ;       8           ** comment      : Just for educational use          **
                 ;       9            ****************************************************
                 ;      10 
                 ;      11                         behnam.esckandariun@gmail.com
                 ;      12 
                 ;      13 
                 ;      14 /***********************************************************************************
                 ;      15 ************               Include Used library's                       ************
                 ;      16 ***********************************************************************************/
                 ;      17 #include <tiny2313.h>
                 ;      18 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;      19 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;      20 	.EQU __se_bit=0x20
                 	.EQU __se_bit=0x20
                 ;      21 	.EQU __sm_mask=0x50
                 	.EQU __sm_mask=0x50
                 ;      22 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powerdown=0x10
                 ;      23 	.EQU __sm_standby=0x40
                 	.EQU __sm_standby=0x40
                 ;      24 	.SET power_ctrl_reg=mcucr
                 	.SET power_ctrl_reg=mcucr
                 ;      25 	#endif
                 	#endif
                 ;      26 #include <stdlib.h>
                 ;      27 #include <delay.h>
                 ;      28 /***********************************************************************************
                 ;      29 ************                  Define Used  I/O                          ************
                 ;      30 ***********************************************************************************/
                 ;      31 #define smt160 PORTD.1
                 ;      32 #define on 1
                 ;      33 #define off 0
                 ;      34 #define segment PORTB
                 ;      35 #define control PORTD
                 ;      36 #define sega PORTD.6
                 ;      37 #define segb PORTD.5
                 ;      38 #define segc PORTD.4
                 ;      39 #define segd PORTD.3
                 ;      40 /***********************************************************************************
                 ;      41 ************              Declare function of init                      ************
                 ;      42 ***********************************************************************************/
                 ;      43 void system_init(void);
                 ;      44 /***********************************************************************************
                 ;      45 ************        Declare global variable's and const here            ************
                 ;      46 ***********************************************************************************/
                 ;      47 unsigned char a[5],b;           //used for 7-segment refresh program
                 _a:
000080           	.BYTE 0x5
                 ;      48 unsigned char i=0;              //used for 7-segment refresh program
                 ;      49 float t1,t2,t;                  //contain on & off time of SMT160 output signal
                 _t1:
000085           	.BYTE 0x4
                 _t2:
000089           	.BYTE 0x4
                 _t:
00008d           	.BYTE 0x4
                 ;      50 signed int temp;                //Contain temp*10 for one poine
                 ;      51 bit edge=0;                     //Used in musering t1 & t2
                 ;      52 unsigned int memory;
                 ;      53 //This line Save Com-Anode 7-segment Data on Flash ROM
                 ;      54 flash char s_data[]={192,249,164,176,153,146,130,248,128,144,191,255};
                 
                 	.CSEG
                 ;      55 /***********************************************************************************
                 ;      56 ************           INT0 Service routin Used for SMT160              ************
                 ;      57 ************                   Duty-cycle mesure                        ************
                 ;      58 ***********************************************************************************/
                 ;      59 //This ISR just mesure on and off time of the SMT160 Out signal in t1 & t2
                 ;      60 //Globale variable's . calculate of temp accure in main function
                 ;      61 interrupt [EXT_INT0] void ext_int0_isr(void)
                 ;      62 {
                 _ext_int0_isr:
00004b 920a      	ST   -Y,R0
00004c 921a      	ST   -Y,R1
00004d 936a      	ST   -Y,R22
00004e 937a      	ST   -Y,R23
00004f 93ea      	ST   -Y,R30
000050 93fa      	ST   -Y,R31
000051 b7ef      	IN   R30,SREG
000052 93ea      	ST   -Y,R30
                 ;      63 if (edge)
000053 9b98      	SBIS 0x13,0
000054 c00e      	RJMP _0x3
                 ;      64         {
                 ;      65         t2=TCNT1;
000055 d0dc      	RCALL SUBOPT_0x0
000056 93e0 0089 	STS  _t2,R30
000058 93f0 008a 	STS  _t2+1,R31
00005a 9360 008b 	STS  _t2+2,R22
00005c 9370 008c 	STS  _t2+3,R23
                 ;      66         TCNT1=0;
00005e d0d9      	RCALL SUBOPT_0x1
                 ;      67         //Falling Edge
                 ;      68         MCUCR=0x02;
00005f e0e2      	LDI  R30,LOW(2)
000060 bfe5      	OUT  0x35,R30
                 ;      69         edge=0;
000061 9898      	CBI  0x13,0
                 ;      70         }
                 ;      71 else
000062 c00d      	RJMP _0x6
                 _0x3:
                 ;      72         {
                 ;      73         t1=TCNT1;
000063 d0ce      	RCALL SUBOPT_0x0
000064 93e0 0085 	STS  _t1,R30
000066 93f0 0086 	STS  _t1+1,R31
000068 9360 0087 	STS  _t1+2,R22
00006a 9370 0088 	STS  _t1+3,R23
                 ;      74         TCNT1=0;
00006c d0cb      	RCALL SUBOPT_0x1
                 ;      75         //Rising edge
                 ;      76         MCUCR=0x03;
00006d e0e3      	LDI  R30,LOW(3)
00006e bfe5      	OUT  0x35,R30
                 ;      77         edge=1;
00006f 9a98      	SBI  0x13,0
                 ;      78         }
                 _0x6:
                 ;      79 }
000070 91e9      	LD   R30,Y+
000071 bfef      	OUT  SREG,R30
000072 91f9      	LD   R31,Y+
000073 91e9      	LD   R30,Y+
000074 9179      	LD   R23,Y+
000075 9169      	LD   R22,Y+
000076 9019      	LD   R1,Y+
000077 9009      	LD   R0,Y+
000078 9518      	RETI
                 ;      80 /***********************************************************************************
                 ;      81 ************      Timer0 INT Service routin for 7-segment refresh       ************
                 ;      82 ***********************************************************************************/
                 ;      83 //This ISR refresh 7-segment 22 time's per second
                 ;      84 //temp varible showing on display
                 ;      85 interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ;      86 {
                 _timer0_ovf_isr:
000079 920a      	ST   -Y,R0
00007a 921a      	ST   -Y,R1
00007b 938a      	ST   -Y,R24
00007c 939a      	ST   -Y,R25
00007d 93aa      	ST   -Y,R26
00007e 93ba      	ST   -Y,R27
00007f 93ea      	ST   -Y,R30
000080 93fa      	ST   -Y,R31
000081 b7ef      	IN   R30,SREG
000082 93ea      	ST   -Y,R30
                 ;      87 i++;
000083 9423      	INC  R2
                 ;      88 switch (i)
000084 2de2      	MOV  R30,R2
                 ;      89         {
                 ;      90         case 1:
000085 30e1      	CPI  R30,LOW(0x1)
000086 f571      	BRNE _0xC
                 ;      91                 memory = temp;
000087 0132      	MOVW R6,R4
                 ;      92                 if (temp<0)
000088 2400      	CLR  R0
000089 1440      	CP   R4,R0
00008a 0450      	CPC  R5,R0
00008b f44c      	BRGE _0xD
                 ;      93                         {
                 ;      94                         a[1]=10;
00008c e0ea      	LDI  R30,LOW(10)
00008d 93e0 0081 	__PUTB1MN _a,1
                 ;      95                         temp *= -1;
00008f 01d2      	MOVW R26,R4
000090 efef      	LDI  R30,LOW(65535)
000091 efff      	LDI  R31,HIGH(65535)
000092 d0ec      	RCALL __MULW12
000093 012f      	MOVW R4,R30
                 ;      96                         }
                 ;      97                 else
000094 c003      	RJMP _0xE
                 _0xD:
                 ;      98                         a[1]=11;
000095 e0eb      	LDI  R30,LOW(11)
000096 93e0 0081 	__PUTB1MN _a,1
                 ;      99                 temp %= 1000;
                 _0xE:
000098 01d2      	MOVW R26,R4
000099 eee8      	LDI  R30,LOW(1000)
00009a e0f3      	LDI  R31,HIGH(1000)
00009b d111      	RCALL __MODW21
00009c 012f      	MOVW R4,R30
                 ;     100                 a[2] = temp / 100;
00009d 01d2      	MOVW R26,R4
00009e e6e4      	LDI  R30,LOW(100)
00009f e0f0      	LDI  R31,HIGH(100)
0000a0 d104      	RCALL __DIVW21
0000a1 93e0 0082 	__PUTB1MN _a,2
                 ;     101                 b = temp % 100;
0000a3 01d2      	MOVW R26,R4
0000a4 e6e4      	LDI  R30,LOW(100)
0000a5 e0f0      	LDI  R31,HIGH(100)
0000a6 d106      	RCALL __MODW21
0000a7 2e3e      	MOV  R3,R30
                 ;     102                 a[3] = b / 10;
0000a8 2da3      	MOV  R26,R3
0000a9 e0ea      	LDI  R30,LOW(10)
0000aa d0d9      	RCALL __DIVB21U
0000ab 93e0 0083 	__PUTB1MN _a,3
                 ;     103                 a[4] = b % 10;
0000ad 2da3      	MOV  R26,R3
0000ae e0ea      	LDI  R30,LOW(10)
0000af d0fa      	RCALL __MODB21U
0000b0 93e0 0084 	__PUTB1MN _a,4
                 ;     104                 control |= 0xf8;
0000b2 d08a      	RCALL SUBOPT_0x2
                 ;     105                 segment = s_data[a[i]];
                 ;     106                 sega = 0;
0000b3 9896      	CBI  0x12,6
                 ;     107                 break;
0000b4 c010      	RJMP _0xB
                 ;     108         case 2:
                 _0xC:
0000b5 30e2      	CPI  R30,LOW(0x2)
0000b6 f419      	BRNE _0x11
                 ;     109                 control |= 0xf8;
0000b7 d085      	RCALL SUBOPT_0x2
                 ;     110                 segment = s_data[a[i]];
                 ;     111                 segb = 0;
0000b8 9895      	CBI  0x12,5
                 ;     112                 break;
0000b9 c00b      	RJMP _0xB
                 ;     113         case 3:
                 _0x11:
0000ba 30e3      	CPI  R30,LOW(0x3)
0000bb f421      	BRNE _0x14
                 ;     114                 control |= 0xf8;
0000bc d080      	RCALL SUBOPT_0x2
                 ;     115                 segment = s_data[a[i]];
                 ;     116                 segment &= 0b01111111;
0000bd 98c7      	CBI  0x18,7
                 ;     117                 segc = 0;
0000be 9894      	CBI  0x12,4
                 ;     118                 break;
0000bf c005      	RJMP _0xB
                 ;     119         case 4:
                 _0x14:
0000c0 30e4      	CPI  R30,LOW(0x4)
0000c1 f419      	BRNE _0xB
                 ;     120                 control |= 0xf8;
0000c2 d07a      	RCALL SUBOPT_0x2
                 ;     121                 segment = s_data[a[i]];
                 ;     122                 segd = 0;
0000c3 9893      	CBI  0x12,3
                 ;     123                 i = 0;
0000c4 2422      	CLR  R2
                 ;     124                 break;
                 ;     125         };
                 _0xB:
                 ;     126 temp = memory;
0000c5 0123      	MOVW R4,R6
                 ;     127 TCNT0=0xd7;                      //Reinitlaiz timer start value for display refresh
0000c6 ede7      	LDI  R30,LOW(215)
0000c7 bfe2      	OUT  0x32,R30
                 ;     128 }
0000c8 91e9      	LD   R30,Y+
0000c9 bfef      	OUT  SREG,R30
0000ca 91f9      	LD   R31,Y+
0000cb 91e9      	LD   R30,Y+
0000cc 91b9      	LD   R27,Y+
0000cd 91a9      	LD   R26,Y+
0000ce 9199      	LD   R25,Y+
0000cf 9189      	LD   R24,Y+
0000d0 9019      	LD   R1,Y+
0000d1 9009      	LD   R0,Y+
0000d2 9518      	RETI
                 ;     129 /***********************************************************************************
                 ;     130 ************               Starting main program                        ************
                 ;     131 ***********************************************************************************/
                 ;     132 void main(void)
                 ;     133 {
                 _main:
                 ;     134 float dc;                       //Duty cycle save in this variable
                 ;     135 
                 ;     136 system_init();                  // System initalize port and register's value
0000d3 9724      	SBIW R28,4
                 ;	dc -> Y+0
0000d4 d040      	RCALL _system_init
                 ;     137 while (1)
                 _0x1A:
                 ;     138       {
                 ;     139       smt160=on;                //Turn SMT160 on
0000d5 9a91      	SBI  0x12,1
                 ;     140       //delay_ms(100);          //Waiting for mesuring temp
                 ;     141       //smt160=off;             //Turn SMT160 off
                 ;     142       dc=t1/(t1+t2);            //this line's calculate temp from duty-cycle's
0000d6 91e0 0089 	LDS  R30,_t2
0000d8 91f0 008a 	LDS  R31,_t2+1
0000da 9160 008b 	LDS  R22,_t2+2
0000dc 9170 008c 	LDS  R23,_t2+3
0000de d06a      	RCALL SUBOPT_0x3
0000df d196      	RCALL __ADDF12
0000e0 d068      	RCALL SUBOPT_0x3
0000e1 d214      	RCALL __DIVF21
0000e2 83e8
0000e3 83f9
0000e4 836a
0000e5 837b      	__PUTD1S 0
                 ;     143       t=(dc-0.32)/0.0047;
0000e6 81a8
0000e7 81b9
0000e8 818a
0000e9 819b      	__GETD2S 0
0000ea e0ea
0000eb edf7
0000ec ea63
0000ed e37e      	__GETD1N 0x3EA3D70A
0000ee d0da      	RCALL __SWAPD12
0000ef d17f      	RCALL __SUBF12
0000f0 01df      	MOVW R26,R30
0000f1 01cb      	MOVW R24,R22
0000f2 e7e5
0000f3 e0f2
0000f4 e96a
0000f5 e37b      	__GETD1N 0x3B9A0275
0000f6 d1ff      	RCALL __DIVF21
0000f7 93e0 008d 	STS  _t,R30
0000f9 93f0 008e 	STS  _t+1,R31
0000fb 9360 008f 	STS  _t+2,R22
0000fd 9370 0090 	STS  _t+3,R23
                 ;     144       temp = t*10;
0000ff 91a0 008d 	LDS  R26,_t
000101 91b0 008e 	LDS  R27,_t+1
000103 9180 008f 	LDS  R24,_t+2
000105 9190 0090 	LDS  R25,_t+3
000107 e0e0
000108 e0f0
000109 e260
00010a e471      	__GETD1N 0x41200000
00010b d1b8      	RCALL __MULF12
00010c d0f8      	RCALL __CFD1
00010d 012f      	MOVW R4,R30
                 ;     145       delay_ms(500);            //wait for next mesurment in 5sec
00010e efe4      	LDI  R30,LOW(500)
00010f e0f1      	LDI  R31,HIGH(500)
000110 93fa      	ST   -Y,R31
000111 93ea      	ST   -Y,R30
000112 d03f      	RCALL _delay_ms
                 ;     146       };
000113 cfc1      	RJMP _0x1A
                 ;     147 }
                 _0x1F:
000114 cfff      	RJMP _0x1F
                 ;     148 /***********************************************************************************
                 ;     149 ************          System initlaizing in this Function               ************
                 ;     150 ***********************************************************************************/
                 ;     151 void system_init(void)
                 ;     152 {
                 _system_init:
                 ;     153 
                 ;     154 #pragma optsize-
                 ;     155 CLKPR=0x80;
000115 e8e0      	LDI  R30,LOW(128)
000116 bde6      	OUT  0x26,R30
                 ;     156 CLKPR=0x00;
000117 e0e0      	LDI  R30,LOW(0)
000118 bde6      	OUT  0x26,R30
                 ;     157 #ifdef _OPTIMIZE_SIZE_
                 ;     158 #pragma optsize+
                 ;     159 #endif
                 ;     160 PORTB=0x00;
000119 bbe8      	OUT  0x18,R30
                 ;     161 DDRB=0xFF;
00011a efef      	LDI  R30,LOW(255)
00011b bbe7      	OUT  0x17,R30
                 ;     162 PORTD=0x78;
00011c e7e8      	LDI  R30,LOW(120)
00011d bbe2      	OUT  0x12,R30
                 ;     163 DDRD=0x7A;
00011e e7ea      	LDI  R30,LOW(122)
00011f bbe1      	OUT  0x11,R30
                 ;     164 //Timer0: 11.71MHz
                 ;     165 TCCR0A=0x00;
000120 e0e0      	LDI  R30,LOW(0)
000121 bfe0      	OUT  0x30,R30
                 ;     166 TCCR0B=0x05;
000122 e0e5      	LDI  R30,LOW(5)
000123 bfe3      	OUT  0x33,R30
                 ;     167 //Timer1: 12MHz
                 ;     168 TCCR1A=0x00;
000124 e0e0      	LDI  R30,LOW(0)
000125 bdef      	OUT  0x2F,R30
                 ;     169 TCCR1B=0x01;
000126 e0e1      	LDI  R30,LOW(1)
000127 bdee      	OUT  0x2E,R30
                 ;     170 //INT0:Falling
                 ;     171 GIMSK=0x40;
000128 e4e0      	LDI  R30,LOW(64)
000129 bfeb      	OUT  0x3B,R30
                 ;     172 MCUCR=0x02;
00012a e0e2      	LDI  R30,LOW(2)
00012b bfe5      	OUT  0x35,R30
                 ;     173 EIFR=0x40;
00012c e4e0      	LDI  R30,LOW(64)
00012d bfea      	OUT  0x3A,R30
                 ;     174 TIMSK=0x02;
00012e e0e2      	LDI  R30,LOW(2)
00012f bfe9      	OUT  0x39,R30
                 ;     175 #asm("sei")
000130 9478      	sei
                 ;     176 }
000131 9508      	RET
                 ;     177 /***********************************************************************************
                 ;     178 ************            End of thermometer Program                      ************
                 ;     179 ***********************************************************************************/
                 
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000132 b5ec      	IN   R30,0x2C
000133 b5fd      	IN   R31,0x2C+1
000134 2766      	CLR  R22
000135 2777      	CLR  R23
000136 d105      	RCALL __CDF1
000137 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000138 e0e0      	LDI  R30,LOW(0)
000139 e0f0      	LDI  R31,HIGH(0)
00013a bdfd      	OUT  0x2C+1,R31
00013b bdec      	OUT  0x2C,R30
00013c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0x2:
00013d b3e2      	IN   R30,0x12
00013e 6fe8      	ORI  R30,LOW(0xF8)
00013f bbe2      	OUT  0x12,R30
000140 e8a0      	LDI  R26,LOW(_a)
000141 0da2      	ADD  R26,R2
000142 91ec      	LD   R30,X
000143 e0f0      	LDI  R31,0
000144 5dea      	SUBI R30,LOW(-_s_data*2)
000145 4fff      	SBCI R31,HIGH(-_s_data*2)
000146 9004      	LPM  R0,Z
000147 ba08      	OUT  0x18,R0
000148 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000149 91a0 0085 	LDS  R26,_t1
00014b 91b0 0086 	LDS  R27,_t1+1
00014d 9180 0087 	LDS  R24,_t1+2
00014f 9190 0088 	LDS  R25,_t1+3
000151 9508      	RET
                 
                 _delay_ms:
000152 91e9      	ld   r30,y+
000153 91f9      	ld   r31,y+
000154 9630      	adiw r30,0
000155 f039      	breq __delay_ms1
                 __delay_ms0:
000156 eb88
000157 e09b
000158 9701
000159 f7f1      	__DELAY_USW 0xBB8
00015a 95a8      	wdr
00015b 9731      	sbiw r30,1
00015c f7c9      	brne __delay_ms0
                 __delay_ms1:
00015d 9508      	ret
                 
                 __ANEGW1:
00015e 95f1      	NEG  R31
00015f 95e1      	NEG  R30
000160 40f0      	SBCI R31,0
000161 9508      	RET
                 
                 __ANEGD1:
000162 95f0      	COM  R31
000163 9560      	COM  R22
000164 9570      	COM  R23
000165 95e1      	NEG  R30
000166 4fff      	SBCI R31,-1
000167 4f6f      	SBCI R22,-1
000168 4f7f      	SBCI R23,-1
000169 9508      	RET
                 
                 __CWD1:
00016a 2f6f      	MOV  R22,R31
00016b 0f66      	ADD  R22,R22
00016c 0b66      	SBC  R22,R22
00016d 2f76      	MOV  R23,R22
00016e 9508      	RET
                 
                 __MULW12U:
00016f 2e0a      	MOV  R0,R26
000170 2e1b      	MOV  R1,R27
000171 e181      	LDI  R24,17
000172 27aa      	CLR  R26
000173 1bbb      	SUB  R27,R27
000174 c005      	RJMP __MULW12U1
                 __MULW12U3:
000175 f410      	BRCC __MULW12U2
000176 0da0      	ADD  R26,R0
000177 1db1      	ADC  R27,R1
                 __MULW12U2:
000178 95b6      	LSR  R27
000179 95a7      	ROR  R26
                 __MULW12U1:
00017a 95f7      	ROR  R31
00017b 95e7      	ROR  R30
00017c 958a      	DEC  R24
00017d f7b9      	BRNE __MULW12U3
00017e 9508      	RET
                 
                 __MULW12:
00017f d03b      	RCALL __CHKSIGNW
000180 dfee      	RCALL __MULW12U
000181 f40e      	BRTC __MULW121
000182 dfdb      	RCALL __ANEGW1
                 __MULW121:
000183 9508      	RET
                 
                 __DIVB21U:
000184 2400      	CLR  R0
000185 e098      	LDI  R25,8
                 __DIVB21U1:
000186 0faa      	LSL  R26
000187 1c00      	ROL  R0
000188 1a0e      	SUB  R0,R30
000189 f410      	BRCC __DIVB21U2
00018a 0e0e      	ADD  R0,R30
00018b c001      	RJMP __DIVB21U3
                 __DIVB21U2:
00018c 60a1      	SBR  R26,1
                 __DIVB21U3:
00018d 959a      	DEC  R25
00018e f7b9      	BRNE __DIVB21U1
00018f 2fea      	MOV  R30,R26
000190 2da0      	MOV  R26,R0
000191 9508      	RET
                 
                 __DIVW21U:
000192 2400      	CLR  R0
000193 2411      	CLR  R1
000194 e190      	LDI  R25,16
                 __DIVW21U1:
000195 0faa      	LSL  R26
000196 1fbb      	ROL  R27
000197 1c00      	ROL  R0
000198 1c11      	ROL  R1
000199 1a0e      	SUB  R0,R30
00019a 0a1f      	SBC  R1,R31
00019b f418      	BRCC __DIVW21U2
00019c 0e0e      	ADD  R0,R30
00019d 1e1f      	ADC  R1,R31
00019e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00019f 60a1      	SBR  R26,1
                 __DIVW21U3:
0001a0 959a      	DEC  R25
0001a1 f799      	BRNE __DIVW21U1
0001a2 01fd      	MOVW R30,R26
0001a3 01d0      	MOVW R26,R0
0001a4 9508      	RET
                 
                 __DIVW21:
0001a5 d015      	RCALL __CHKSIGNW
0001a6 dfeb      	RCALL __DIVW21U
0001a7 f40e      	BRTC __DIVW211
0001a8 dfb5      	RCALL __ANEGW1
                 __DIVW211:
0001a9 9508      	RET
                 
                 __MODB21U:
0001aa dfd9      	RCALL __DIVB21U
0001ab 2fea      	MOV  R30,R26
0001ac 9508      	RET
                 
                 __MODW21:
0001ad 94e8      	CLT
0001ae ffb7      	SBRS R27,7
0001af c004      	RJMP __MODW211
0001b0 95a0      	COM  R26
0001b1 95b0      	COM  R27
0001b2 9611      	ADIW R26,1
0001b3 9468      	SET
                 __MODW211:
0001b4 fdf7      	SBRC R31,7
0001b5 dfa8      	RCALL __ANEGW1
0001b6 dfdb      	RCALL __DIVW21U
0001b7 01fd      	MOVW R30,R26
0001b8 f40e      	BRTC __MODW212
0001b9 dfa4      	RCALL __ANEGW1
                 __MODW212:
0001ba 9508      	RET
                 
                 __CHKSIGNW:
0001bb 94e8      	CLT
0001bc fff7      	SBRS R31,7
0001bd c002      	RJMP __CHKSW1
0001be df9f      	RCALL __ANEGW1
0001bf 9468      	SET
                 __CHKSW1:
0001c0 ffb7      	SBRS R27,7
0001c1 c006      	RJMP __CHKSW2
0001c2 95a0      	COM  R26
0001c3 95b0      	COM  R27
0001c4 9611      	ADIW R26,1
0001c5 f800      	BLD  R0,0
0001c6 9403      	INC  R0
0001c7 fa00      	BST  R0,0
                 __CHKSW2:
0001c8 9508      	RET
                 
                 __SWAPD12:
0001c9 2e18      	MOV  R1,R24
0001ca 2f86      	MOV  R24,R22
0001cb 2d61      	MOV  R22,R1
0001cc 2e19      	MOV  R1,R25
0001cd 2f97      	MOV  R25,R23
0001ce 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0001cf 2e1b      	MOV  R1,R27
0001d0 2fbf      	MOV  R27,R31
0001d1 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0001d2 2e1a      	MOV  R1,R26
0001d3 2fae      	MOV  R26,R30
0001d4 2de1      	MOV  R30,R1
0001d5 9508      	RET
                 
                 __ROUND_REPACK:
0001d6 2355      	TST  R21
0001d7 f442      	BRPL __REPACK
0001d8 3850      	CPI  R21,0x80
0001d9 f411      	BRNE __ROUND_REPACK0
0001da ffe0      	SBRS R30,0
0001db c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001dc 9631      	ADIW R30,1
0001dd 1f69      	ADC  R22,R25
0001de 1f79      	ADC  R23,R25
0001df f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001e0 e850      	LDI  R21,0x80
0001e1 2757      	EOR  R21,R23
0001e2 f411      	BRNE __REPACK0
0001e3 935f      	PUSH R21
0001e4 c0cd      	RJMP __ZERORES
                 __REPACK0:
0001e5 3f5f      	CPI  R21,0xFF
0001e6 f031      	BREQ __REPACK1
0001e7 0f66      	LSL  R22
0001e8 0c00      	LSL  R0
0001e9 9557      	ROR  R21
0001ea 9567      	ROR  R22
0001eb 2f75      	MOV  R23,R21
0001ec 9508      	RET
                 __REPACK1:
0001ed 935f      	PUSH R21
0001ee 2000      	TST  R0
0001ef f00a      	BRMI __REPACK2
0001f0 c0cd      	RJMP __MAXRES
                 __REPACK2:
0001f1 c0c6      	RJMP __MINRES
                 
                 __UNPACK:
0001f2 e850      	LDI  R21,0x80
0001f3 2e19      	MOV  R1,R25
0001f4 2215      	AND  R1,R21
0001f5 0f88      	LSL  R24
0001f6 1f99      	ROL  R25
0001f7 2795      	EOR  R25,R21
0001f8 0f55      	LSL  R21
0001f9 9587      	ROR  R24
                 
                 __UNPACK1:
0001fa e850      	LDI  R21,0x80
0001fb 2e07      	MOV  R0,R23
0001fc 2205      	AND  R0,R21
0001fd 0f66      	LSL  R22
0001fe 1f77      	ROL  R23
0001ff 2775      	EOR  R23,R21
000200 0f55      	LSL  R21
000201 9567      	ROR  R22
000202 9508      	RET
                 
                 __CFD1U:
000203 9468      	SET
000204 c001      	RJMP __CFD1U0
                 __CFD1:
000205 94e8      	CLT
                 __CFD1U0:
000206 935f      	PUSH R21
000207 dff2      	RCALL __UNPACK1
000208 3870      	CPI  R23,0x80
000209 f018      	BRLO __CFD10
00020a 3f7f      	CPI  R23,0xFF
00020b f408      	BRCC __CFD10
00020c c0a5      	RJMP __ZERORES
                 __CFD10:
00020d e156      	LDI  R21,22
00020e 1b57      	SUB  R21,R23
00020f f4aa      	BRPL __CFD11
000210 9551      	NEG  R21
000211 3058      	CPI  R21,8
000212 f40e      	BRTC __CFD19
000213 3059      	CPI  R21,9
                 __CFD19:
000214 f030      	BRLO __CFD17
000215 efef      	SER  R30
000216 efff      	SER  R31
000217 ef6f      	SER  R22
000218 e77f      	LDI  R23,0x7F
000219 f977      	BLD  R23,7
00021a c01a      	RJMP __CFD15
                 __CFD17:
00021b 2777      	CLR  R23
00021c 2355      	TST  R21
00021d f0b9      	BREQ __CFD15
                 __CFD18:
00021e 0fee      	LSL  R30
00021f 1fff      	ROL  R31
000220 1f66      	ROL  R22
000221 1f77      	ROL  R23
000222 955a      	DEC  R21
000223 f7d1      	BRNE __CFD18
000224 c010      	RJMP __CFD15
                 __CFD11:
000225 2777      	CLR  R23
                 __CFD12:
000226 3058      	CPI  R21,8
000227 f028      	BRLO __CFD13
000228 2fef      	MOV  R30,R31
000229 2ff6      	MOV  R31,R22
00022a 2f67      	MOV  R22,R23
00022b 5058      	SUBI R21,8
00022c cff9      	RJMP __CFD12
                 __CFD13:
00022d 2355      	TST  R21
00022e f031      	BREQ __CFD15
                 __CFD14:
00022f 9576      	LSR  R23
000230 9567      	ROR  R22
000231 95f7      	ROR  R31
000232 95e7      	ROR  R30
000233 955a      	DEC  R21
000234 f7d1      	BRNE __CFD14
                 __CFD15:
000235 2000      	TST  R0
000236 f40a      	BRPL __CFD16
000237 df2a      	RCALL __ANEGD1
                 __CFD16:
000238 915f      	POP  R21
000239 9508      	RET
                 
                 __CDF1U:
00023a 9468      	SET
00023b c001      	RJMP __CDF1U0
                 __CDF1:
00023c 94e8      	CLT
                 __CDF1U0:
00023d 9730      	SBIW R30,0
00023e 4060      	SBCI R22,0
00023f 4070      	SBCI R23,0
000240 f0b1      	BREQ __CDF10
000241 2400      	CLR  R0
000242 f026      	BRTS __CDF11
000243 2377      	TST  R23
000244 f412      	BRPL __CDF11
000245 9400      	COM  R0
000246 df1b      	RCALL __ANEGD1
                 __CDF11:
000247 2e17      	MOV  R1,R23
000248 e17e      	LDI  R23,30
000249 2011      	TST  R1
                 __CDF12:
00024a f032      	BRMI __CDF13
00024b 957a      	DEC  R23
00024c 0fee      	LSL  R30
00024d 1fff      	ROL  R31
00024e 1f66      	ROL  R22
00024f 1c11      	ROL  R1
000250 cff9      	RJMP __CDF12
                 __CDF13:
000251 2fef      	MOV  R30,R31
000252 2ff6      	MOV  R31,R22
000253 2d61      	MOV  R22,R1
000254 935f      	PUSH R21
000255 df8a      	RCALL __REPACK
000256 915f      	POP  R21
                 __CDF10:
000257 9508      	RET
                 
                 __SWAPACC:
000258 934f      	PUSH R20
000259 01af      	MOVW R20,R30
00025a 01fd      	MOVW R30,R26
00025b 01da      	MOVW R26,R20
00025c 01ab      	MOVW R20,R22
00025d 01bc      	MOVW R22,R24
00025e 01ca      	MOVW R24,R20
00025f 2d40      	MOV  R20,R0
000260 2c01      	MOV  R0,R1
000261 2e14      	MOV  R1,R20
000262 914f      	POP  R20
000263 9508      	RET
                 
                 __UADD12:
000264 0fea      	ADD  R30,R26
000265 1ffb      	ADC  R31,R27
000266 1f68      	ADC  R22,R24
000267 9508      	RET
                 
                 __NEGMAN1:
000268 95e0      	COM  R30
000269 95f0      	COM  R31
00026a 9560      	COM  R22
00026b 5fef      	SUBI R30,-1
00026c 4fff      	SBCI R31,-1
00026d 4f6f      	SBCI R22,-1
00026e 9508      	RET
                 
                 __SUBF12:
00026f 935f      	PUSH R21
000270 df81      	RCALL __UNPACK
000271 3890      	CPI  R25,0x80
000272 f171      	BREQ __ADDF129
000273 e850      	LDI  R21,0x80
000274 2615      	EOR  R1,R21
                 
000275 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000276 935f      	PUSH R21
000277 df7a      	RCALL __UNPACK
000278 3890      	CPI  R25,0x80
000279 f139      	BREQ __ADDF129
                 
                 __ADDF120:
00027a 3870      	CPI  R23,0x80
00027b f121      	BREQ __ADDF128
                 __ADDF121:
00027c 2f57      	MOV  R21,R23
00027d 1b59      	SUB  R21,R25
00027e f113      	BRVS __ADDF129
00027f f412      	BRPL __ADDF122
000280 dfd7      	RCALL __SWAPACC
000281 cffa      	RJMP __ADDF121
                 __ADDF122:
000282 3158      	CPI  R21,24
000283 f018      	BRLO __ADDF123
000284 27aa      	CLR  R26
000285 27bb      	CLR  R27
000286 2788      	CLR  R24
                 __ADDF123:
000287 3058      	CPI  R21,8
000288 f028      	BRLO __ADDF124
000289 2fab      	MOV  R26,R27
00028a 2fb8      	MOV  R27,R24
00028b 2788      	CLR  R24
00028c 5058      	SUBI R21,8
00028d cff9      	RJMP __ADDF123
                 __ADDF124:
00028e 2355      	TST  R21
00028f f029      	BREQ __ADDF126
                 __ADDF125:
000290 9586      	LSR  R24
000291 95b7      	ROR  R27
000292 95a7      	ROR  R26
000293 955a      	DEC  R21
000294 f7d9      	BRNE __ADDF125
                 __ADDF126:
000295 2d50      	MOV  R21,R0
000296 2551      	EOR  R21,R1
000297 f062      	BRMI __ADDF127
000298 dfcb      	RCALL __UADD12
000299 f438      	BRCC __ADDF129
00029a 9567      	ROR  R22
00029b 95f7      	ROR  R31
00029c 95e7      	ROR  R30
00029d 9573      	INC  R23
00029e f413      	BRVC __ADDF129
00029f c01e      	RJMP __MAXRES
                 __ADDF128:
0002a0 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0002a1 df3e      	RCALL __REPACK
0002a2 915f      	POP  R21
0002a3 9508      	RET
                 __ADDF127:
0002a4 1bea      	SUB  R30,R26
0002a5 0bfb      	SBC  R31,R27
0002a6 0b68      	SBC  R22,R24
0002a7 f051      	BREQ __ZERORES
0002a8 f410      	BRCC __ADDF1210
0002a9 9400      	COM  R0
0002aa dfbd      	RCALL __NEGMAN1
                 __ADDF1210:
0002ab 2366      	TST  R22
0002ac f3a2      	BRMI __ADDF129
0002ad 0fee      	LSL  R30
0002ae 1fff      	ROL  R31
0002af 1f66      	ROL  R22
0002b0 957a      	DEC  R23
0002b1 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0002b2 27ee      	CLR  R30
0002b3 27ff      	CLR  R31
0002b4 2766      	CLR  R22
0002b5 2777      	CLR  R23
0002b6 915f      	POP  R21
0002b7 9508      	RET
                 
                 __MINRES:
0002b8 efef      	SER  R30
0002b9 efff      	SER  R31
0002ba e76f      	LDI  R22,0x7F
0002bb ef7f      	SER  R23
0002bc 915f      	POP  R21
0002bd 9508      	RET
                 
                 __MAXRES:
0002be efef      	SER  R30
0002bf efff      	SER  R31
0002c0 e76f      	LDI  R22,0x7F
0002c1 e77f      	LDI  R23,0x7F
0002c2 915f      	POP  R21
0002c3 9508      	RET
                 
                 __MULF12:
0002c4 935f      	PUSH R21
0002c5 df2c      	RCALL __UNPACK
0002c6 3870      	CPI  R23,0x80
0002c7 f351      	BREQ __ZERORES
0002c8 3890      	CPI  R25,0x80
0002c9 f341      	BREQ __ZERORES
0002ca 2401      	EOR  R0,R1
0002cb 9408      	SEC
0002cc 1f79      	ADC  R23,R25
0002cd f423      	BRVC __MULF124
0002ce f31c      	BRLT __ZERORES
                 __MULF125:
0002cf 2000      	TST  R0
0002d0 f33a      	BRMI __MINRES
0002d1 cfec      	RJMP __MAXRES
                 __MULF124:
0002d2 933f      	PUSH R19
0002d3 934f      	PUSH R20
0002d4 2411      	CLR  R1
0002d5 2733      	CLR  R19
0002d6 2744      	CLR  R20
0002d7 2755      	CLR  R21
0002d8 e198      	LDI  R25,24
                 __MULF120:
0002d9 0f33      	LSL  R19
0002da 1f44      	ROL  R20
0002db 1f55      	ROL  R21
0002dc 1fee      	ROL  R30
0002dd 1fff      	ROL  R31
0002de 1f66      	ROL  R22
0002df f430      	BRCC __MULF121
0002e0 0f3a      	ADD  R19,R26
0002e1 1f4b      	ADC  R20,R27
0002e2 1f58      	ADC  R21,R24
0002e3 1de1      	ADC  R30,R1
0002e4 1df1      	ADC  R31,R1
0002e5 1d61      	ADC  R22,R1
                 __MULF121:
0002e6 959a      	DEC  R25
0002e7 f789      	BRNE __MULF120
0002e8 914f      	POP  R20
0002e9 913f      	POP  R19
0002ea 2366      	TST  R22
0002eb f02a      	BRMI __MULF122
0002ec 0f55      	LSL  R21
0002ed 1fee      	ROL  R30
0002ee 1fff      	ROL  R31
0002ef 1f66      	ROL  R22
0002f0 c002      	RJMP __MULF123
                 __MULF122:
0002f1 9573      	INC  R23
0002f2 f2e3      	BRVS __MULF125
                 __MULF123:
0002f3 dee2      	RCALL __ROUND_REPACK
0002f4 915f      	POP  R21
0002f5 9508      	RET
                 
                 __DIVF21:
0002f6 935f      	PUSH R21
0002f7 defa      	RCALL __UNPACK
0002f8 3870      	CPI  R23,0x80
0002f9 f421      	BRNE __DIVF210
0002fa 2011      	TST  R1
                 __DIVF211:
0002fb f40a      	BRPL __DIVF219
0002fc cfbb      	RJMP __MINRES
                 __DIVF219:
0002fd cfc0      	RJMP __MAXRES
                 __DIVF210:
0002fe 3890      	CPI  R25,0x80
0002ff f409      	BRNE __DIVF218
                 __DIVF217:
000300 cfb1      	RJMP __ZERORES
                 __DIVF218:
000301 2401      	EOR  R0,R1
000302 9408      	SEC
000303 0b97      	SBC  R25,R23
000304 f41b      	BRVC __DIVF216
000305 f3d4      	BRLT __DIVF217
000306 2000      	TST  R0
000307 cff3      	RJMP __DIVF211
                 __DIVF216:
000308 2f79      	MOV  R23,R25
000309 931f      	PUSH R17
00030a 932f      	PUSH R18
00030b 933f      	PUSH R19
00030c 934f      	PUSH R20
00030d 2411      	CLR  R1
00030e 2711      	CLR  R17
00030f 2722      	CLR  R18
000310 2733      	CLR  R19
000311 2744      	CLR  R20
000312 2755      	CLR  R21
000313 e290      	LDI  R25,32
                 __DIVF212:
000314 17ae      	CP   R26,R30
000315 07bf      	CPC  R27,R31
000316 0786      	CPC  R24,R22
000317 0741      	CPC  R20,R17
000318 f030      	BRLO __DIVF213
000319 1bae      	SUB  R26,R30
00031a 0bbf      	SBC  R27,R31
00031b 0b86      	SBC  R24,R22
00031c 0b41      	SBC  R20,R17
00031d 9408      	SEC
00031e c001      	RJMP __DIVF214
                 __DIVF213:
00031f 9488      	CLC
                 __DIVF214:
000320 1f55      	ROL  R21
000321 1f22      	ROL  R18
000322 1f33      	ROL  R19
000323 1c11      	ROL  R1
000324 1faa      	ROL  R26
000325 1fbb      	ROL  R27
000326 1f88      	ROL  R24
000327 1f44      	ROL  R20
000328 959a      	DEC  R25
000329 f751      	BRNE __DIVF212
00032a 01f9      	MOVW R30,R18
00032b 2d61      	MOV  R22,R1
00032c 914f      	POP  R20
00032d 913f      	POP  R19
00032e 912f      	POP  R18
00032f 911f      	POP  R17
000330 2366      	TST  R22
000331 f032      	BRMI __DIVF215
000332 0f55      	LSL  R21
000333 1fee      	ROL  R30
000334 1fff      	ROL  R31
000335 1f66      	ROL  R22
000336 957a      	DEC  R23
000337 f243      	BRVS __DIVF217
                 __DIVF215:
000338 de9d      	RCALL __ROUND_REPACK
000339 915f      	POP  R21
00033a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :  43 r1 :  39 r2 :   4 r3 :   3 r4 :  10 r5 :   1 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   5 r19:   9 r20:  19 r21:  60 r22:  59 r23:  51 
r24:  33 r25:  30 r26:  51 r27:  28 r28:   2 r29:   1 r30: 147 r31:  62 
x  :   4 y  :  44 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATtiny2313 instruction use summary:
adc   :  12 add   :   7 adiw  :   4 and   :   2 andi  :   0 asr   :   0 
bclr  :   0 bld   :   2 brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   0 
break :   0 breq  :  13 brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   6 brlt  :   2 brmi  :   7 brne  :  21 brpl  :   6 
brsh  :   0 brtc  :   4 brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 
bst   :   1 cbi   :   6 cbr   :   1 clc   :   1 clh   :   0 cli   :   1 
cln   :   0 clr   :  30 cls   :   0 clt   :   4 clv   :   0 clz   :   0 
com   :  12 cp    :   2 cpc   :   4 cpi   :  20 cpse  :   0 dec   :  13 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   4 ld    :  19 ldd   :   4 ldi   :  76 lds   :  12 
lpm   :   8 lsl   :  14 lsr   :   3 mov   :  42 movw  :  24 mul   :   0 
muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   1 
out   :  32 pop   :  15 push  :  15 rcall :  52 ret   :  31 reti  :   2 
rjmp  :  57 rol   :  33 ror   :  15 sbc   :   8 sbci  :   9 sbi   :   2 
sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   2 sbrc  :   1 sbrs  :   4 
sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 
set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  21 
std   :   4 sts   :  17 sub   :   7 subi  :   4 swap  :   0 tst   :  14 
wdr   :   1 
Instructions used: 71 out of 109 (65.1%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000676   1640     14   1654    2048  80.8%
[.dseg] 0x000060 0x000091      0     17     17     128  13.3%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 4 warnings
