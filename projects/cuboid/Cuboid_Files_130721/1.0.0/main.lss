
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  0000a318  0000a3cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a318  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011d  0080016a  0080016a  0000a436  2**0
                  ALLOC
  3 .eeprom       00000016  00810000  00810000  0000a436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000180  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000008be  00000000  00000000  0000a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ad3  00000000  00000000  0000ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6b  00000000  00000000  0000e95d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006f07  00000000  00000000  0000f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  000167d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ede  00000000  00000000  00016f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f8c  00000000  00000000  00017e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00019dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__ctors_end>
       4:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
       8:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
       c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      10:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      14:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      18:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      1c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      20:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      24:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      28:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      2c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      30:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__vector_12>
      34:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      38:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__vector_14>
      3c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      40:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      44:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      48:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      4c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      50:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      54:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      58:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      5c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      60:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      64:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      68:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      6c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      70:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      74:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      78:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__vector_30>
      7c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      80:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      84:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>
      88:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__bad_interrupt>

0000008c <__c.2196>:
      8c:	0d 0a 00                                            ...

0000008f <__c.2194>:
      8f:	56 31 2e 30 2e 30 00                                V1.0.0.

00000096 <__c.2192>:
      96:	0d 0a 43 75 62 6f 69 64 20 00                       ..Cuboid .

000000a0 <__c.2174>:
      a0:	0d 0a 45 52 52 4f 52 21 20 6d 61 69 6e 5f 66 6c     ..ERROR! main_fl
      b0:	79 28 29 20 63 61 6c 6c 73 20 69 74 73 65 6c 66     y() calls itself
      c0:	21 21 0d 0a 00                                      !!...

000000c5 <settings_p>:
      c5:	ff ff 02 00 01 00 c8 00 f4 01 ff 01 00 ff 01 00     ................
      d5:	8c 01 00 8c 01 00                                   ......

000000db <__c.2231>:
      db:	45 78 69 74 0d 0a 0d 0a 00                          Exit.....

000000e4 <__c.2219>:
      e4:	52 45 53 45 54 20 74 6f 20 73 74 61 72 74 20 68     RESET to start h
      f4:	61 72 64 77 61 72 65 20 74 65 73 74 0d 0a 00        ardware test...

00000103 <__c.2216>:
     103:	0d 0a 2a 2a 2a 2a 2a 2a 20 4d 61 69 6e 20 4d 65     ..****** Main Me
     113:	6e 75 20 2a 2a 2a 2a 2a 2a 0d 0a 0d 0a 31 2e 20     nu ******....1. 
     123:	55 70 6c 6f 61 64 20 6e 65 77 20 66 69 72 6d 77     Upload new firmw
     133:	61 72 65 0d 0a 32 2e 20 44 65 66 61 75 6c 74 20     are..2. Default 
     143:	61 6c 6c 20 73 65 74 74 69 6e 67 73 0d 0a 33 2e     all settings..3.
     153:	20 50 6f 77 65 72 20 73 75 70 70 6c 79 20 74 65      Power supply te
     163:	73 74 0d 0a 34 2e 20 41 64 6a 75 73 74 20 6d 61     st..4. Adjust ma
     173:	78 69 6d 75 6d 20 4c 45 44 20 73 75 70 70 6c 79     ximum LED supply
     183:	0d 0a 35 2e 20 41 64 6a 75 73 74 20 64 61 79 2f     ..5. Adjust day/
     193:	6e 69 67 68 74 20 74 68 72 65 73 68 6f 6c 64 0d     night threshold.
     1a3:	0a 36 2e 20 52 65 73 65 74 0d 0a 30 2e 20 65 78     .6. Reset..0. ex
     1b3:	69 74 0d 0a 00                                      it...

000001b8 <__c.2333>:
     1b8:	0d 0a 00                                            ...

000001bb <__c.2331>:
     1bb:	20 61 6e 64 20 00                                    and .

000001c1 <__c.2329>:
     1c1:	4f 75 74 20 6f 66 20 72 61 6e 67 65 21 20 45 6e     Out of range! En
     1d1:	74 65 72 20 6e 75 6d 62 65 72 20 62 65 74 77 65     ter number betwe
     1e1:	65 6e 20 00                                         en .

000001e5 <__c.2327>:
     1e5:	3e 00                                               >.

000001e7 <__c.2361>:
     1e7:	0d 0a 00                                            ...

000001ea <__c.2357>:
     1ea:	08 20 08 00                                         . ..

000001ee <__c.2388>:
     1ee:	0d 0a 00                                            ...

000001f1 <__c.2258>:
     1f1:	41 64 6a 75 73 74 20 56 52 31 20 61 6e 64 20 70     Adjust VR1 and p
     201:	72 65 73 73 20 65 6e 74 65 72 20 74 6f 20 72 65     ress enter to re
     211:	66 72 65 73 68 2c 20 6f 72 20 45 53 43 20 77 68     fresh, or ESC wh
     221:	65 6e 20 64 6f 6e 65 0d 0a 00                       en done...

0000022b <__c.2256>:
     22b:	6d 41 20 6f 76 65 72 20 34 30 6d 41 20 6e 6f 74     mA over 40mA not
     23b:	20 72 65 63 63 6f 6d 65 6e 64 65 64 0d 0a 00         reccomended...

0000024a <__c.2254>:
     24a:	52 65 63 63 6f 6d 65 6e 64 20 69 6e 73 65 72 74     Reccomend insert
     25a:	69 6e 67 20 4a 50 31 20 66 6f 72 20 3e 20 32 35     ing JP1 for > 25
     26a:	6d 41 0d 0a 00                                      mA...

0000026f <__c.2252>:
     26f:	76 0d 0a 00                                         v...

00000273 <__c.2250>:
     273:	6d 41 0d 0a 4c 45 44 20 66 6f 72 77 61 72 64 20     mA..LED forward 
     283:	64 72 6f 70 20 20 20 20 20 2d 20 00                 drop     - .

0000028f <__c.2248>:
     28f:	76 0d 0a 4d 61 78 69 6d 75 6d 20 4c 45 44 20 63     v..Maximum LED c
     29f:	75 72 72 65 6e 74 20 20 2d 20 00                    urrent  - .

000002aa <__c.2246>:
     2aa:	76 0d 0a 4d 61 78 69 6d 75 6d 20 4c 45 44 20 73     v..Maximum LED s
     2ba:	75 70 70 6c 79 20 20 20 2d 20 00                    upply   - .

000002c5 <__c.2244>:
     2c5:	0d 0a 53 75 70 70 6c 79 20 69 6e 70 75 74 20 20     ..Supply input  
     2d5:	20 20 20 20 20 20 20 2d 20 00                              - .

000002df <__c.2242>:
     2df:	0d 0a 43 75 72 72 65 6e 74 6c 79 3a 00              ..Currently:.

000002ec <__c.2292>:
     2ec:	4e 65 77 20 64 61 79 20 74 68 72 65 73 68 6f 6c     New day threshol
     2fc:	64 20 00                                            d .

000002ff <__c.2288>:
     2ff:	4e 65 77 20 6e 69 67 68 74 20 74 68 72 65 73 68     New night thresh
     30f:	6f 6c 64 20 00                                      old .

00000314 <__c.2285>:
     314:	28 45 6e 74 65 72 2d 72 65 66 72 65 73 68 2c 20     (Enter-refresh, 
     324:	45 53 43 2d 65 78 69 74 29 0d 0a 00                 ESC-exit)...

00000330 <__c.2283>:
     330:	32 2e 20 45 64 69 74 20 64 61 79 20 74 68 72 65     2. Edit day thre
     340:	73 68 6f 6c 64 0d 0a 00                             shold...

00000348 <__c.2281>:
     348:	0d 0a 0d 0a 31 2e 20 45 64 69 74 20 6e 69 67 68     ....1. Edit nigh
     358:	74 20 74 68 72 65 73 68 6f 6c 64 0d 0a 00           t threshold...

00000366 <__c.2279>:
     366:	0d 0a 44 61 79 20 74 68 72 65 73 68 6f 6c 64 20     ..Day threshold 
     376:	20 20 3e 20 00                                        > .

0000037b <__c.2277>:
     37b:	0d 0a 4e 69 67 68 74 20 74 68 72 65 73 68 6f 6c     ..Night threshol
     38b:	64 20 3c 20 00                                      d < .

00000390 <__c.2275>:
     390:	0d 0a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     3a0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0d 0a     **************..
     3b0:	43 75 72 72 65 6e 74 20 6c 69 67 68 74 20 6c 65     Current light le
     3c0:	76 65 6c 20 3d 20 00                                vel = .

000003c7 <__c.2208>:
     3c7:	54 45 53 54 20 43 4f 4d 50 4c 45 54 45 21 0d 0a     TEST COMPLETE!..
     3d7:	00                                                  .

000003d8 <__c.2206>:
     3d8:	0d 0a 49 6e 73 65 72 74 20 63 6f 64 65 20 68 65     ..Insert code he
     3e8:	72 65 20 74 6f 20 74 65 73 74 20 79 6f 75 72 20     re to test your 
     3f8:	68 61 72 64 77 61 72 65 2e 0d 0a 54 72 79 20 74     hardware...Try t
     408:	6f 20 66 6f 72 63 65 20 74 68 65 20 74 65 73 74     o force the test
     418:	65 72 20 74 6f 20 70 61 79 20 61 74 74 65 6e 74     er to pay attent
     428:	69 6f 6e 2e 0d 0a 0d 0a 59 6f 75 20 73 68 6f 75     ion.....You shou
     438:	6c 64 20 69 6d 70 6c 65 6d 65 6e 74 20 61 20 70     ld implement a p
     448:	61 73 73 77 6f 72 64 20 74 6f 20 73 6b 69 70 20     assword to skip 
     458:	74 68 65 20 74 65 73 74 2c 20 61 6e 64 20 61 20     the test, and a 
     468:	68 69 64 64 65 6e 20 6d 65 6e 75 20 6f 70 74 69     hidden menu opti
     478:	6f 6e 20 74 6f 20 72 65 2d 74 65 73 74 2e 0d 0a     on to re-test...
     488:	0d 0a 54 68 65 20 64 65 76 69 63 65 20 73 68 6f     ..The device sho
     498:	75 6c 64 20 4e 4f 54 20 6f 70 65 72 61 74 65 20     uld NOT operate 
     4a8:	75 6e 74 69 6c 20 74 68 65 20 74 65 73 74 20 69     until the test i
     4b8:	73 20 63 6f 6d 70 6c 65 74 65 64 2e 0d 0a 54 68     s completed...Th
     4c8:	69 73 20 70 72 65 76 65 6e 74 73 20 64 65 76 69     is prevents devi
     4d8:	63 65 73 20 66 72 6f 6d 20 61 63 63 69 64 65 6e     ces from acciden
     4e8:	74 6c 79 20 67 6f 69 6e 67 20 69 6e 74 6f 20 74     tly going into t
     4f8:	68 65 20 66 69 65 6c 64 20 75 6e 2d 74 65 73 74     he field un-test
     508:	65 64 2e 0d 0a 28 70 72 65 73 73 20 61 6e 79 20     ed...(press any 
     518:	6b 65 79 29 0d 0a 0d 0a 00                          key).....

00000521 <font>:
     521:	00 00 00 00 00 04 04 04 00 04 0a 0a 00 00 00 0a     ................
     531:	1f 0a 1f 0a 0f 14 0e 05 1e 11 02 04 08 11 08 14     ................
     541:	0d 12 0d 04 04 00 00 00 02 04 04 04 02 08 04 04     ................
     551:	04 08 15 0e 1f 0e 15 04 04 1f 04 04 00 00 00 04     ................
     561:	08 00 00 1f 00 00 00 00 00 00 08 01 02 04 08 10     ................
     571:	0e 13 15 19 0e 04 0c 04 04 0e 0e 11 02 0c 1f 0e     ................
     581:	11 06 11 0e 04 0c 1e 04 04 1e 10 1e 01 1e 0e 10     ................
     591:	1e 11 0e 1f 02 04 08 10 0e 11 0e 11 0e 0e 11 0e     ................
     5a1:	01 0e 04 04 00 04 04 04 04 00 04 08 04 08 10 08     ................
     5b1:	04 00 1f 00 1f 00 04 02 01 02 04 0e 11 06 00 04     ................
     5c1:	0e 13 15 17 0d 04 0a 1f 11 11 1e 11 1e 11 1e 0e     ................
     5d1:	11 10 11 0e 1e 11 11 11 1e 1f 10 1c 10 1f 1f 10     ................
     5e1:	1c 10 10 0e 10 17 12 0e 11 11 1f 11 11 0e 04 04     ................
     5f1:	04 0e 01 01 01 11 0e 11 12 1c 12 11 10 10 10 10     ................
     601:	1f 11 1b 15 11 11 11 19 15 13 11 0e 11 11 11 0e     ................
     611:	1e 11 1e 10 10 0e 11 15 13 0f 1e 11 1e 12 11 0f     ................
     621:	10 0e 01 1e 1f 04 04 04 04 11 11 11 11 0e 11 11     ................
     631:	11 0a 04 11 11 11 15 0a 11 0a 04 0a 11 11 0a 04     ................
     641:	04 04 1f 02 04 08 1f 0e 08 08 08 0e 10 08 04 02     ................
     651:	01 0e 02 02 02 0e 04 0a 11 00 00 00 00 00 00 1f     ................
     661:	10 10 00 00 00 04 0a 1f 11 11 1e 11 1e 11 1e 0e     ................
     671:	11 10 11 0e 1e 11 11 11 1e 1f 10 1c 10 1f 1f 10     ................
     681:	1c 10 10 0e 10 17 12 0e 11 11 1f 11 11 0e 04 04     ................
     691:	04 0e 01 01 01 11 0e 11 12 1c 12 11 10 10 10 10     ................
     6a1:	1f 11 1b 15 11 11 11 19 15 13 11 0e 11 11 11 0e     ................
     6b1:	1e 11 1e 10 10 0e 11 15 13 0f 1e 11 1e 12 11 0f     ................
     6c1:	10 0e 01 1e 1f 04 04 04 04 11 11 11 11 0e 11 11     ................
     6d1:	11 0a 04 11 11 11 15 0a 11 0a 04 0a 11 11 0a 04     ................
     6e1:	04 04 1f 02 04 08 1f 06 08 18 08 06 04 04 04 04     ................
     6f1:	04 0c 02 03 02 0c 14 0a 00 00 00 1f 11 11 11 1f     ................

00000701 <sintable>:
     701:	3f 40 42 43 45 46 48 49 4b 4c 4e 4f 51 52 54 55     ?@BCEFHIKLNOQRTU
     711:	56 58 59 5a 5c 5d 5e 60 61 62 63 65 66 67 68 69     VXYZ\]^`abcefghi
     721:	6a 6b 6c 6d 6e 6f 70 71 72 73 73 74 75 75 76 77     jklmnopqrsstuuvw
     731:	77 78 78 79 79 7a 7a 7b 7b 7b 7b 7c 7c 7c 7c 7c     wxxyyzz{{{{|||||
     741:	7c 7c 7c 7c 7c 7c 7b 7b 7b 7b 7a 7a 79 79 78 78     ||||||{{{{zzyyxx
     751:	77 77 76 75 75 74 73 73 72 71 70 6f 6e 6d 6c 6b     wwvuutssrqponmlk
     761:	6a 69 68 67 66 65 63 62 61 60 5e 5d 5c 5a 59 58     jihgfecba`^]\ZYX
     771:	56 55 54 52 51 4f 4e 4c 4b 49 48 46 45 43 42 40     VUTRQONLKIHFECB@
     781:	3f 3e 3c 3b 39 38 36 35 33 32 30 2f 2d 2c 2a 29     ?><;9865320/-,*)
     791:	28 26 25 24 22 21 20 1e 1d 1c 1b 19 18 17 16 15     (&%$"! .........
     7a1:	14 13 12 11 10 0f 0e 0d 0c 0b 0b 0a 09 09 08 07     ................
     7b1:	07 06 06 05 05 04 04 03 03 03 03 02 02 02 02 02     ................
     7c1:	02 02 02 02 02 02 03 03 03 03 04 04 05 05 06 06     ................
     7d1:	07 07 08 09 09 0a 0b 0b 0c 0d 0e 0f 10 11 12 13     ................
     7e1:	14 15 16 17 18 19 1b 1c 1d 1e 20 21 22 24 25 26     .......... !"$%&
     7f1:	28 29 2a 2c 2d 2f 30 32 33 35 36 38 39 3b 3c 3e     ()*,-/0235689;<>

00000801 <progframe_diamond>:
     801:	00 00 00 18 18 00 00 00 00 00 18 24 24 18 00 00     ...........$$...
     811:	00 18 24 42 42 24 18 00 18 24 42 81 81 42 24 18     ..$BB$...$B..B$.
     821:	18 24 42 81 81 42 24 18 00 18 24 42 42 24 18 00     .$B..B$...$BB$..
     831:	00 00 18 24 24 18 00 00 00 00 00 18 18 00 00 00     ...$$...........

00000841 <__c.2209>:
     841:	76 0d 0a 00                                         v...

00000845 <__c.2207>:
     845:	6d 41 0d 0a 4c 45 44 20 66 6f 72 77 61 72 64 20     mA..LED forward 
     855:	64 72 6f 70 20 20 20 20 20 2d 20 00                 drop     - .

00000861 <__c.2205>:
     861:	76 0d 0a 4d 61 78 69 6d 75 6d 20 4c 45 44 20 63     v..Maximum LED c
     871:	75 72 72 65 6e 74 20 20 2d 20 00                    urrent  - .

0000087c <__c.2203>:
     87c:	76 0d 0a 4d 61 78 69 6d 75 6d 20 4c 45 44 20 73     v..Maximum LED s
     88c:	75 70 70 6c 79 20 20 20 2d 20 00                    upply   - .

00000897 <__c.2201>:
     897:	0d 0a 53 75 70 70 6c 79 20 69 6e 70 75 74 20 20     ..Supply input  
     8a7:	20 20 20 20 20 20 20 2d 20 00                              - .

000008b1 <__c.2199>:
     8b1:	4c 6f 61 64 20 74 65 73 74 2e 2e 2e 0d 0a 00        Load test......

000008c0 <__c.2196>:
     8c0:	45 52 52 4f 52 21 21 20 28 54 6f 6f 20 68 69 67     ERROR!! (Too hig
     8d0:	68 21 29 00                                         h!).

000008d4 <__c.2194>:
     8d4:	76 0d 0a 00                                         v...

000008d8 <__c.2192>:
     8d8:	76 0d 0a 4d 61 78 69 6d 75 6d 20 4c 45 44 20 73     v..Maximum LED s
     8e8:	75 70 70 6c 79 20 20 20 2d 20 00                    upply   - .

000008f3 <__c.2190>:
     8f3:	0d 0a 53 75 70 70 6c 79 20 69 6e 70 75 74 20 20     ..Supply input  
     903:	20 20 20 20 20 20 20 2d 20 00                              - .

0000090d <__c.2354>:
     90d:	52 6f 74 61 74 69 6f 6e 20 65 6e 61 62 6c 65 64     Rotation enabled
     91d:	0d 0a 00                                            ...

00000920 <__c.2352>:
     920:	0d 0a 00                                            ...

00000923 <__c.2350>:
     923:	50 72 65 66 65 72 72 65 64 20 70 61 74 74 65 72     Preferred patter
     933:	6e 20 3d 20 00                                      n = .

00000938 <__c.2348>:
     938:	0d 0a 00                                            ...

0000093b <__c.2346>:
     93b:	52 6f 74 61 74 69 6f 6e 20 64 69 73 61 62 6c 65     Rotation disable
     94b:	64 0d 0a 50 72 65 66 65 72 72 65 64 20 70 61 74     d..Preferred pat
     95b:	74 65 72 6e 20 3d 20 00                             tern = .

00000963 <__c.2339>:
     963:	0d 0a 00                                            ...

00000966 <__c.2337>:
     966:	50 61 74 74 65 72 6e 20 00                          Pattern .

0000096f <__c.2327>:
     96f:	0d 0a 00                                            ...

00000972 <__c.2325>:
     972:	28 73 74 69 6c 6c 20 6e 69 67 68 74 29 00           (still night).

00000980 <__c.2323>:
     980:	0d 0a 53 65 6c 65 63 74 69 6e 67 20 64 61 79 20     ..Selecting day 
     990:	73 65 71 75 65 6e 63 65 20 00                       sequence .

0000099a <__c.2321>:
     99a:	28 73 74 69 6c 6c 20 64 61 79 29 00                 (still day).

000009a6 <__c.2319>:
     9a6:	0d 0a 53 65 6c 65 63 74 69 6e 67 20 6e 69 67 68     ..Selecting nigh
     9b6:	74 20 73 65 71 75 65 6e 63 65 20 00                 t sequence .

000009c2 <__c.2317>:
     9c2:	20 73 65 71 75 65 6e 63 65 20 00                     sequence .

000009cd <__c.2315>:
     9cd:	64 61 79 20 00                                      day .

000009d2 <__c.2313>:
     9d2:	6e 69 67 68 74 20 00                                night .

000009d9 <__c.2311>:
     9d9:	0d 0a 53 65 6c 65 63 74 69 6e 67 20 00              ..Selecting .

000009e6 <__c.2309>:
     9e6:	4c 69 67 68 74 20 3d 20 00                          Light = .

000009ef <__c.2307>:
     9ef:	0d 0a 00                                            ...

000009f2 <__c.2305>:
     9f2:	64 69 73 61 62 6c 65 64 0d 0a 50 61 74 74 65 72     disabled..Patter
     a02:	6e 20 00                                            n .

00000a05 <__c.2303>:
     a05:	65 6e 61 62 6c 65 64 0d 0a 00                       enabled...

00000a0f <__c.2301>:
     a0f:	52 6f 74 61 74 69 6f 6e 20 00                       Rotation .

00000a19 <__c.2299>:
     a19:	28 2f 32 35 35 29 0d 0a 00                          (/255)...

00000a22 <__c.2297>:
     a22:	42 72 69 67 68 74 6e 65 73 73 20 00                 Brightness .

00000a2e <__c.2295>:
     a2e:	20 70 61 74 74 65 72 6e 73 20 69 6e 20 73 65 71      patterns in seq
     a3e:	75 65 6e 63 65 0d 0a 00                             uence...

00000a46 <__c.2293>:
     a46:	4e 49 47 48 54 0d 0a 00                             NIGHT...

00000a4e <__c.2291>:
     a4e:	44 41 59 0d 0a 00                                   DAY...

00000a54 <__c.2289>:
     a54:	0d 0a 4d 6f 64 65 20 00                             ..Mode .

00000a5c <__c.2287>:
     a5c:	0d 0a 52 75 6e 6e 69 6e 67 20 73 65 71 75 65 6e     ..Running sequen
     a6c:	63 65 20 00                                         ce .

00000a70 <__c.2428>:
     a70:	4e 00                                               N.

00000a72 <__c.2426>:
     a72:	44 00                                               D.

00000a74 <__c.2456>:
     a74:	43 75 62 6f 69 64 20 20 20 20 20 20 20 20 00        Cuboid        .

00000a83 <__c.2261>:
     a83:	0d 0a 00                                            ...

00000a86 <__c.2259>:
     a86:	20 73 65 71 75 65 6e 63 65 20 3d 20 00               sequence = .

00000a93 <__c.2257>:
     a93:	6e 69 67 68 74 00                                   night.

00000a99 <__c.2255>:
     a99:	64 61 79 00                                         day.

00000a9d <__c.2253>:
     a9d:	50 72 65 66 65 72 72 65 64 20 00                    Preferred .

00000aa8 <__c.2249>:
     aa8:	20 28 6e 69 67 68 74 29 0d 0a 00                     (night)...

00000ab3 <__c.2247>:
     ab3:	20 28 64 61 79 29 0d 0a 00                           (day)...

00000abc <__c.2245>:
     abc:	53 65 71 75 65 6e 63 65 20 00                       Sequence .

00000ac6 <__c.2243>:
     ac6:	64 75 72 69 6e 67 20 6e 69 67 68 74 0d 0a 00        during night...

00000ad5 <__c.2241>:
     ad5:	64 75 72 69 6e 67 20 64 61 79 2c 20 73 65 71 75     during day, sequ
     ae5:	65 6e 63 65 20 00                                   ence .

00000aeb <__c.2239>:
     aeb:	41 75 74 6f 2c 20 73 65 71 75 65 6e 63 65 20 00     Auto, sequence .

00000afb <__c.2231>:
     afb:	41 00                                               A.

00000afd <__c.2229>:
     afd:	0d 0a 53 65 71 75 65 6e 63 65 20 6d 65 6e 75 0d     ..Sequence menu.
     b0d:	0a 00                                               ..

00000b0f <__c.1790>:
     b0f:	6e 61 6e 00                                         nan.

00000b13 <__c.1788>:
     b13:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     b23:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     b33:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     b43:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     b53:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     b63:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     b73:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     b83:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     b93:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     ba3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     bb3:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     bc3:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     bd3:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     be3:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     bf3:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     c03:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000c12 <__ctors_end>:
     c12:	11 24       	eor	r1, r1
     c14:	1f be       	out	0x3f, r1	; 63
     c16:	cf ef       	ldi	r28, 0xFF	; 255
     c18:	d0 e1       	ldi	r29, 0x10	; 16
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	cd bf       	out	0x3d, r28	; 61

00000c1e <__do_copy_data>:
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b1 e0       	ldi	r27, 0x01	; 1
     c24:	e8 e1       	ldi	r30, 0x18	; 24
     c26:	f3 ea       	ldi	r31, 0xA3	; 163
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <.do_copy_data_start>

00000c2a <.do_copy_data_loop>:
     c2a:	05 90       	lpm	r0, Z+
     c2c:	0d 92       	st	X+, r0

00000c2e <.do_copy_data_start>:
     c2e:	aa 36       	cpi	r26, 0x6A	; 106
     c30:	b1 07       	cpc	r27, r17
     c32:	d9 f7       	brne	.-10     	; 0xc2a <.do_copy_data_loop>

00000c34 <__do_clear_bss>:
     c34:	12 e0       	ldi	r17, 0x02	; 2
     c36:	aa e6       	ldi	r26, 0x6A	; 106
     c38:	b1 e0       	ldi	r27, 0x01	; 1
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <.do_clear_bss_start>

00000c3c <.do_clear_bss_loop>:
     c3c:	1d 92       	st	X+, r1

00000c3e <.do_clear_bss_start>:
     c3e:	a7 38       	cpi	r26, 0x87	; 135
     c40:	b1 07       	cpc	r27, r17
     c42:	e1 f7       	brne	.-8      	; 0xc3c <.do_clear_bss_loop>
     c44:	0e 94 28 06 	call	0xc50	; 0xc50 <main>
     c48:	0c 94 8a 51 	jmp	0xa314	; 0xa314 <_exit>

00000c4c <__bad_interrupt>:
     c4c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c50 <main>:
	recursive=FALSE;
}

// Main application routine.
int main(void)
{
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
	//Timer2 Fosc/1024
	TCCR2 = 5;	//FOSC/1024
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	85 bd       	out	0x25, r24	; 37
	
	//initialise modules
	settings_init();
     c5c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <settings_init>
	uart1_init();
     c60:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart1_init>
	led_init();
     c64:	0e 94 df 23 	call	0x47be	; 0x47be <led_init>
	power_init();
     c68:	0e 94 34 40 	call	0x8068	; 0x8068 <power_init>
	button_init();
     c6c:	0e 94 7c 41 	call	0x82f8	; 0x82f8 <button_init>
	a2d_init();
     c70:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <a2d_init>
	sequence_init();
     c74:	0e 94 e5 41 	call	0x83ca	; 0x83ca <sequence_init>

	//enable global interrupts	
	sei();
     c78:	78 94       	sei

	//execute test sequence
	if(settings_ram.test)	
     c7a:	80 91 32 02 	lds	r24, 0x0232
     c7e:	88 23       	and	r24, r24
     c80:	59 f0       	breq	.+22     	; 0xc98 <main+0x48>
	{
		//attach uart RX to console
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     c82:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c84:	f8 94       	cli
		{
			uart1_rx_ptr = &console_rx;
     c86:	85 ef       	ldi	r24, 0xF5	; 245
     c88:	96 e0       	ldi	r25, 0x06	; 6
     c8a:	90 93 7c 01 	sts	0x017C, r25
     c8e:	80 93 7b 01 	sts	0x017B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c92:	2f bf       	out	0x3f, r18	; 63
		};
		console_test();
     c94:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <console_test>
	};

	//power on message
	TEXTOUT_P(PSTR("\r\nCuboid "));
     c98:	86 e9       	ldi	r24, 0x96	; 150
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_P(PSTR(VERSION_STRING));
     ca0:	8f e8       	ldi	r24, 0x8F	; 143
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_P(PSTR("\r\n"));
     ca8:	8c e8       	ldi	r24, 0x8C	; 140
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>

	//Power on test
	power_test();
     cb0:	0e 94 3f 40 	call	0x807e	; 0x807e <power_test>
	while(1)
	{
		//attach uart RX to main_rx
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			uart1_rx_ptr = &main_rx;
     cb4:	09 e7       	ldi	r16, 0x79	; 121
     cb6:	16 e0       	ldi	r17, 0x06	; 6
			console_request=FALSE;
			
			//attach uart RX to console
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				uart1_rx_ptr = &console_rx;
     cb8:	c5 ef       	ldi	r28, 0xF5	; 245
     cba:	d6 e0       	ldi	r29, 0x06	; 6
	power_test();

	while(1)
	{
		//attach uart RX to main_rx
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     cbc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cbe:	f8 94       	cli
		{
			uart1_rx_ptr = &main_rx;
     cc0:	10 93 7c 01 	sts	0x017C, r17
     cc4:	00 93 7b 01 	sts	0x017B, r16
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cc8:	8f bf       	out	0x3f, r24	; 63
		};
		
		//run display sequence
		sequence_run();
     cca:	0e 94 1b 43 	call	0x8636	; 0x8636 <sequence_run>
		
		//select new sequence if sequence button was pressed
		sequence_menu();
     cce:	0e 94 2b 42 	call	0x8456	; 0x8456 <sequence_menu>
		
		//enter console if space was received on UART
		if(console_request)
     cd2:	80 91 6a 01 	lds	r24, 0x016A
     cd6:	88 23       	and	r24, r24
     cd8:	89 f3       	breq	.-30     	; 0xcbc <main+0x6c>
		{			
			console_request=FALSE;
     cda:	10 92 6a 01 	sts	0x016A, r1
			
			//attach uart RX to console
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     cde:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ce0:	f8 94       	cli
			{
				uart1_rx_ptr = &console_rx;
     ce2:	d0 93 7c 01 	sts	0x017C, r29
     ce6:	c0 93 7b 01 	sts	0x017B, r28
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cea:	8f bf       	out	0x3f, r24	; 63
			};
			
			//execute console
			console_main();
     cec:	0e 94 0e 08 	call	0x101c	; 0x101c <console_main>
     cf0:	e5 cf       	rjmp	.-54     	; 0xcbc <main+0x6c>

00000cf2 <main_rx>:
//********************************************************************************************************

//If serial port receives a space, exit display sequence and request console
static void main_rx(char x)
{
	if(x==' ')
     cf2:	80 32       	cpi	r24, 0x20	; 32
     cf4:	29 f4       	brne	.+10     	; 0xd00 <main_rx+0xe>
	{
		sequence_exit();
     cf6:	0e 94 ce 46 	call	0x8d9c	; 0x8d9c <sequence_exit>
		console_request=TRUE;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 6a 01 	sts	0x016A, r24
     d00:	08 95       	ret

00000d02 <main_fly>:
// Call this while waiting, checks for a timer tick and calls module timer functions.
// Be very careful not to call anything within main_fly that also calls main_fly
void main_fly(void)
{
	static char recursive=FALSE;
	if(recursive)
     d02:	80 91 6b 01 	lds	r24, 0x016B
     d06:	88 23       	and	r24, r24
     d08:	29 f0       	breq	.+10     	; 0xd14 <main_fly+0x12>
	{
		TEXTOUT_P(PSTR("\r\nERROR! main_fly() calls itself!!\r\n"));
     d0a:	80 ea       	ldi	r24, 0xA0	; 160
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
     d12:	ff cf       	rjmp	.-2      	; 0xd12 <main_fly+0x10>
		while(1);
	};
	recursive=TRUE;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 6b 01 	sts	0x016B, r24
	
	a2d_fly();
     d1a:	0e 94 10 48 	call	0x9020	; 0x9020 <a2d_fly>
	if(TIFR & _BV(TOV2))
     d1e:	06 b6       	in	r0, 0x36	; 54
     d20:	06 fe       	sbrs	r0, 6
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <main_fly+0x50>
	{
		TIFR=_BV(TOV2);
     d24:	80 e4       	ldi	r24, 0x40	; 64
     d26:	86 bf       	out	0x36, r24	; 54
		if(time)
     d28:	80 91 6c 01 	lds	r24, 0x016C
     d2c:	90 91 6d 01 	lds	r25, 0x016D
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	29 f0       	breq	.+10     	; 0xd3e <main_fly+0x3c>
			time--;
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	90 93 6d 01 	sts	0x016D, r25
     d3a:	80 93 6c 01 	sts	0x016C, r24
		
		console_tick();
     d3e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <console_tick>
		pattern_tick();
     d42:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <pattern_tick>
		button_tick();
     d46:	0e 94 83 41 	call	0x8306	; 0x8306 <button_tick>
		sequence_tick();
     d4a:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <sequence_tick>
		a2d_tick();
     d4e:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <a2d_tick>
	};
	
	recursive=FALSE;
     d52:	10 92 6b 01 	sts	0x016B, r1
}
     d56:	08 95       	ret

00000d58 <settings_save>:
	settings_save();
}

//save settings to eeprom, only writes modified bytes to save time
void settings_save(void)
{
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	01 e3       	ldi	r16, 0x31	; 49
     d62:	12 e0       	ldi	r17, 0x02	; 2
     d64:	c0 e0       	ldi	r28, 0x00	; 0
     d66:	d0 e0       	ldi	r29, 0x00	; 0
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <settings_save+0x2c>

	ee_ptr = (unsigned char*)&settings_ee;
	ram_ptr = (unsigned char*)&settings_ram;
	while(size < sizeof(struct ee_struct))
	{
		if(eeprom_read_byte(ee_ptr) != *ram_ptr)
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 41 51 	call	0xa282	; 0xa282 <__eerd_byte_m64>
     d70:	f8 01       	movw	r30, r16
     d72:	60 81       	ld	r22, Z
     d74:	86 17       	cp	r24, r22
     d76:	19 f0       	breq	.+6      	; 0xd7e <settings_save+0x26>
			eeprom_write_byte(ee_ptr, *ram_ptr);
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 49 51 	call	0xa292	; 0xa292 <__eewr_byte_m64>
		size++;
		ee_ptr++;
     d7e:	21 96       	adiw	r28, 0x01	; 1
		ram_ptr++;
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char* ee_ptr;
	int size=0;

	ee_ptr = (unsigned char*)&settings_ee;
	ram_ptr = (unsigned char*)&settings_ram;
	while(size < sizeof(struct ee_struct))
     d84:	f2 e0       	ldi	r31, 0x02	; 2
     d86:	07 34       	cpi	r16, 0x47	; 71
     d88:	1f 07       	cpc	r17, r31
     d8a:	79 f7       	brne	.-34     	; 0xd6a <settings_save+0x12>
			eeprom_write_byte(ee_ptr, *ram_ptr);
		size++;
		ee_ptr++;
		ram_ptr++;
	};
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <settings_default>:
// Public functions
//********************************************************************************************************

//default all settings and save
void settings_default(void)
{
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
	char test;
	test=settings_ram.test;
     d9c:	f0 90 32 02 	lds	r15, 0x0232
	memcpy_P(&settings_ram, &settings_p, sizeof(struct ee_struct));
     da0:	01 e3       	ldi	r16, 0x31	; 49
     da2:	12 e0       	ldi	r17, 0x02	; 2
     da4:	c8 01       	movw	r24, r16
     da6:	65 ec       	ldi	r22, 0xC5	; 197
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	46 e1       	ldi	r20, 0x16	; 22
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	0e 94 22 50 	call	0xa044	; 0xa044 <memcpy_P>
	settings_ram.test=test;
     db2:	f0 92 32 02 	sts	0x0232, r15
	settings_save();
     db6:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
	settings_ram.version=EEPROM_LAYOUT_VERSION;	//correct version only AFTER a successful default
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	f8 01       	movw	r30, r16
     dbe:	80 83       	st	Z, r24
	settings_save();
     dc0:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
}
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	08 95       	ret

00000dcc <settings_init>:
}

//load settings, default settings if none saved
void settings_init(void)
{
	eeprom_read_block(&settings_ram, &settings_ee, sizeof(struct ee_struct));
     dcc:	81 e3       	ldi	r24, 0x31	; 49
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	46 e1       	ldi	r20, 0x16	; 22
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 31 51 	call	0xa262	; 0xa262 <__eerd_block_m64>
	if(settings_ram.version != EEPROM_LAYOUT_VERSION)
     ddc:	80 91 31 02 	lds	r24, 0x0231
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	11 f0       	breq	.+4      	; 0xde8 <settings_init+0x1c>
		settings_default();
     de4:	0e 94 cb 06 	call	0xd96	; 0xd96 <settings_default>
     de8:	08 95       	ret

00000dea <console_rx>:
//********************************************************************************************************

//Call to pass input characters to the console
void console_rx(char text_char)
{
	input_char=text_char;
     dea:	80 93 7a 01 	sts	0x017A, r24
}
     dee:	08 95       	ret

00000df0 <console_tick>:

//Call every timer tick to provide input timeout.
void console_tick(void)
{
	if(time)
     df0:	80 91 6e 01 	lds	r24, 0x016E
     df4:	90 91 6f 01 	lds	r25, 0x016F
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	29 f0       	breq	.+10     	; 0xe06 <console_tick+0x16>
		time--;
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	90 93 6f 01 	sts	0x016F, r25
     e02:	80 93 6e 01 	sts	0x016E, r24
     e06:	08 95       	ret

00000e08 <console_init>:
}

//Not required in this application
void console_init(void)
{
}
     e08:	08 95       	ret

00000e0a <getint>:

// get an integer from the user and write it to *target, returns OK/ABORTED/TIMEOUT
// aborts if ESC is pressed.
// uses atoi, so any input that atoi cannot recognise as a number, will result in a valid entry of 0.
static enum input_result_enum getint(int* target, int low, int high)
{
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	5c 01       	movw	r10, r24
     e22:	6b 01       	movw	r12, r22
     e24:	7a 01       	movw	r14, r20
	if(buffer)
		buffer[index]=0;
	do
	{		
		//wait for input or timeout
		time = INPUT_PROMPT_TIME/TIMER_TICK;
     e26:	8e e4       	ldi	r24, 0x4E	; 78
     e28:	88 2e       	mov	r8, r24
     e2a:	8e e0       	ldi	r24, 0x0E	; 14
     e2c:	98 2e       	mov	r9, r24
	char finished=FALSE;
	int value;

	do
	{
		TEXTOUT_P(PSTR(">"));
     e2e:	85 ee       	ldi	r24, 0xE5	; 229
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	int index=0;	//indexes terminator in buffer
	char tempchar;
	char finished=FALSE;

	if(buffer)
		buffer[index]=0;
     e36:	10 92 70 01 	sts	0x0170, r1
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
	do
	{		
		//wait for input or timeout
		time = INPUT_PROMPT_TIME/TIMER_TICK;
     e3e:	90 92 6f 01 	sts	0x016F, r9
     e42:	80 92 6e 01 	sts	0x016E, r8
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <getint+0x42>
		
		while(time && !input_char)
			WAIT_LOOP();
     e48:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
	do
	{		
		//wait for input or timeout
		time = INPUT_PROMPT_TIME/TIMER_TICK;
		
		while(time && !input_char)
     e4c:	80 91 6e 01 	lds	r24, 0x016E
     e50:	90 91 6f 01 	lds	r25, 0x016F
     e54:	89 2b       	or	r24, r25
     e56:	21 f0       	breq	.+8      	; 0xe60 <getint+0x56>
     e58:	80 91 7a 01 	lds	r24, 0x017A
     e5c:	88 23       	and	r24, r24
     e5e:	a1 f3       	breq	.-24     	; 0xe48 <getint+0x3e>
			WAIT_LOOP();
		
		if(!input_char)
     e60:	80 91 7a 01 	lds	r24, 0x017A
     e64:	88 23       	and	r24, r24
     e66:	21 f4       	brne	.+8      	; 0xe70 <getint+0x66>
		{
			if(buffer)
				buffer[0]=0;
     e68:	10 92 70 01 	sts	0x0170, r1
     e6c:	11 e0       	ldi	r17, 0x01	; 1
     e6e:	63 c0       	rjmp	.+198    	; 0xf36 <getint+0x12c>
			success=INPUT_RESULT_TIMEOUT;
			finished=TRUE;
		}
		else
		{
			tempchar = input_char;
     e70:	10 91 7a 01 	lds	r17, 0x017A
			input_char = FALSE;
     e74:	10 92 7a 01 	sts	0x017A, r1
			
			//abort (esc)
			if(tempchar==0x1B)
     e78:	1b 31       	cpi	r17, 0x1B	; 27
     e7a:	21 f4       	brne	.+8      	; 0xe84 <getint+0x7a>
			{
				if(buffer)
					buffer[0]=0;
     e7c:	10 92 70 01 	sts	0x0170, r1
     e80:	12 e0       	ldi	r17, 0x02	; 2
     e82:	59 c0       	rjmp	.+178    	; 0xf36 <getint+0x12c>
				success=INPUT_RESULT_ABORTED;
				finished=TRUE;
			}
			
			//backspace
			else if(tempchar==0x08 && index && buffer)
     e84:	18 30       	cpi	r17, 0x08	; 8
     e86:	41 f4       	brne	.+16     	; 0xe98 <getint+0x8e>
     e88:	20 97       	sbiw	r28, 0x00	; 0
     e8a:	31 f0       	breq	.+12     	; 0xe98 <getint+0x8e>
			{
				TEXTOUT_P(PSTR("\x08 \x08"));
     e8c:	8a ee       	ldi	r24, 0xEA	; 234
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				buffer[--index]=0;
     e94:	21 97       	sbiw	r28, 0x01	; 1
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <getint+0xac>
			}
			
			//text
			else if(0x1F < tempchar && tempchar < 0x7F && buffer)
     e98:	81 2f       	mov	r24, r17
     e9a:	80 52       	subi	r24, 0x20	; 32
     e9c:	8f 35       	cpi	r24, 0x5F	; 95
     e9e:	80 f4       	brcc	.+32     	; 0xec0 <getint+0xb6>
			{
				if(index<maxlen-1)
     ea0:	c8 30       	cpi	r28, 0x08	; 8
     ea2:	d1 05       	cpc	r29, r1
     ea4:	64 f6       	brge	.-104    	; 0xe3e <getint+0x34>
				{
					TEXTOUT_CHAR(tempchar);
     ea6:	81 2f       	mov	r24, r17
     ea8:	0e 94 14 0a 	call	0x1428	; 0x1428 <uart1_tx_char>
					buffer[index++]=tempchar;
     eac:	fe 01       	movw	r30, r28
     eae:	e0 59       	subi	r30, 0x90	; 144
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	10 83       	st	Z, r17
     eb4:	21 96       	adiw	r28, 0x01	; 1
					buffer[index]=0;
     eb6:	fe 01       	movw	r30, r28
     eb8:	e0 59       	subi	r30, 0x90	; 144
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	10 82       	st	Z, r1
     ebe:	bf cf       	rjmp	.-130    	; 0xe3e <getint+0x34>
				};
			}
			
			//CR
			else if(tempchar=='\r')
     ec0:	1d 30       	cpi	r17, 0x0D	; 13
     ec2:	09 f0       	breq	.+2      	; 0xec6 <getint+0xbc>
     ec4:	bc cf       	rjmp	.-136    	; 0xe3e <getint+0x34>
     ec6:	36 c0       	rjmp	.+108    	; 0xf34 <getint+0x12a>
	{
		TEXTOUT_P(PSTR(">"));
		success=getline(text, 9);
		if(success==INPUT_RESULT_OK)
		{
			if(strlen(text))
     ec8:	80 91 70 01 	lds	r24, 0x0170
     ecc:	88 23       	and	r24, r24
     ece:	11 f4       	brne	.+4      	; 0xed4 <getint+0xca>
     ed0:	13 e0       	ldi	r17, 0x03	; 3
     ed2:	37 c0       	rjmp	.+110    	; 0xf42 <getint+0x138>
			{
				value=atoi(text);
     ed4:	80 e7       	ldi	r24, 0x70	; 112
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 2c 4f 	call	0x9e58	; 0x9e58 <atoi>
				//out of range
				if( value < low || high < value )
     edc:	8c 15       	cp	r24, r12
     ede:	9d 05       	cpc	r25, r13
     ee0:	1c f0       	brlt	.+6      	; 0xee8 <getint+0xde>
     ee2:	e8 16       	cp	r14, r24
     ee4:	f9 06       	cpc	r15, r25
     ee6:	fc f4       	brge	.+62     	; 0xf26 <getint+0x11c>
				{
					TEXTOUT_P(PSTR("Out of range! Enter number between "));
     ee8:	81 ec       	ldi	r24, 0xC1	; 193
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT(itoa(low, text, 10));
     ef0:	c6 01       	movw	r24, r12
     ef2:	60 e7       	ldi	r22, 0x70	; 112
     ef4:	71 e0       	ldi	r23, 0x01	; 1
     ef6:	4a e0       	ldi	r20, 0x0A	; 10
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
     efe:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR(" and "));
     f02:	8b eb       	ldi	r24, 0xBB	; 187
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT(itoa(high, text, 10));
     f0a:	c7 01       	movw	r24, r14
     f0c:	60 e7       	ldi	r22, 0x70	; 112
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	4a e0       	ldi	r20, 0x0A	; 10
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
     f18:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR("\r\n"));
     f1c:	88 eb       	ldi	r24, 0xB8	; 184
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
     f24:	84 cf       	rjmp	.-248    	; 0xe2e <getint+0x24>
				}	
				//ok
				else
				{
					finished=TRUE;
					if(target)
     f26:	a1 14       	cp	r10, r1
     f28:	b1 04       	cpc	r11, r1
     f2a:	59 f0       	breq	.+22     	; 0xf42 <getint+0x138>
						*target=value;
     f2c:	f5 01       	movw	r30, r10
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
     f32:	07 c0       	rjmp	.+14     	; 0xf42 <getint+0x138>
     f34:	10 e0       	ldi	r17, 0x00	; 0
				success=INPUT_RESULT_OK;
			};
		};
	} while(!finished);

	TEXTOUT_P(PSTR("\r\n"));
     f36:	87 ee       	ldi	r24, 0xE7	; 231
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>

	do
	{
		TEXTOUT_P(PSTR(">"));
		success=getline(text, 9);
		if(success==INPUT_RESULT_OK)
     f3e:	11 23       	and	r17, r17
     f40:	19 f2       	breq	.-122    	; 0xec8 <getint+0xbe>
		else
			finished=TRUE;
	}while(!finished);

	return success;
}
     f42:	81 2f       	mov	r24, r17
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	08 95       	ret

00000f5c <getkey>:

// get's a single character within range
// returns OK/ABORT/TIMEOUT
// abort only occurs if ESC is hit, in which case target is not modified
static enum input_result_enum getkey(char* target, char low, char high)
{
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
     f6c:	d6 2e       	mov	r13, r22
     f6e:	04 2f       	mov	r16, r20
	char finished=FALSE;
	
	do
	{
		//wait for input or timeout
		time=INPUT_PROMPT_TIME/TIMER_TICK;
     f70:	9e e4       	ldi	r25, 0x4E	; 78
     f72:	e9 2e       	mov	r14, r25
     f74:	9e e0       	ldi	r25, 0x0E	; 14
     f76:	f9 2e       	mov	r15, r25
     f78:	f0 92 6f 01 	sts	0x016F, r15
     f7c:	e0 92 6e 01 	sts	0x016E, r14
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <getkey+0x2a>
		while(time && !input_char)
			WAIT_LOOP();
     f82:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
	
	do
	{
		//wait for input or timeout
		time=INPUT_PROMPT_TIME/TIMER_TICK;
		while(time && !input_char)
     f86:	80 91 6e 01 	lds	r24, 0x016E
     f8a:	90 91 6f 01 	lds	r25, 0x016F
     f8e:	89 2b       	or	r24, r25
     f90:	21 f0       	breq	.+8      	; 0xf9a <getkey+0x3e>
     f92:	80 91 7a 01 	lds	r24, 0x017A
     f96:	88 23       	and	r24, r24
     f98:	a1 f3       	breq	.-24     	; 0xf82 <getkey+0x26>
			WAIT_LOOP();
		
		if(!input_char)
     f9a:	80 91 7a 01 	lds	r24, 0x017A
     f9e:	88 23       	and	r24, r24
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <getkey+0x4a>
     fa2:	11 e0       	ldi	r17, 0x01	; 1
     fa4:	13 c0       	rjmp	.+38     	; 0xfcc <getkey+0x70>
			success=INPUT_RESULT_TIMEOUT;
			finished=TRUE;
		}
		else
		{
			tempchar=input_char;
     fa6:	10 91 7a 01 	lds	r17, 0x017A
			input_char=FALSE;
     faa:	10 92 7a 01 	sts	0x017A, r1
			
			if(low <= tempchar && tempchar <= high)
     fae:	1d 15       	cp	r17, r13
     fb0:	50 f0       	brcs	.+20     	; 0xfc6 <getkey+0x6a>
     fb2:	01 17       	cp	r16, r17
     fb4:	40 f0       	brcs	.+16     	; 0xfc6 <getkey+0x6a>
			{
				TEXTOUT_CHAR(tempchar);
     fb6:	81 2f       	mov	r24, r17
     fb8:	0e 94 14 0a 	call	0x1428	; 0x1428 <uart1_tx_char>
				if(target)
     fbc:	20 97       	sbiw	r28, 0x00	; 0
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <getkey+0x66>
					*target=tempchar;
     fc0:	18 83       	st	Y, r17
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <getkey+0x70>
				finished=TRUE;
				success=INPUT_RESULT_OK;
			}
			else if(tempchar==0x1B)
     fc6:	1b 31       	cpi	r17, 0x1B	; 27
     fc8:	b9 f6       	brne	.-82     	; 0xf78 <getkey+0x1c>
     fca:	12 e0       	ldi	r17, 0x02	; 2
			};
		};
		
	}while(!finished);

	TEXTOUT_P(PSTR("\r\n"));
     fcc:	8e ee       	ldi	r24, 0xEE	; 238
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>

	return success;
}
     fd4:	81 2f       	mov	r24, r17
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	08 95       	ret

00000fe6 <console_test>:
{
}

//Execute hardware test sequence for new devices/
void console_test(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	char tempchar;

	TEXTOUT_P(PSTR("\
     ff0:	88 ed       	ldi	r24, 0xD8	; 216
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
(press any key)\r\n\
\r\n\
"));


	getkey(&tempchar, 0x0D, 0x7F);
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	6d e0       	ldi	r22, 0x0D	; 13
     ffe:	4f e7       	ldi	r20, 0x7F	; 127
    1000:	0e 94 ae 07 	call	0xf5c	; 0xf5c <getkey>
	settings_ram.test=FALSE;
    1004:	10 92 32 02 	sts	0x0232, r1
	settings_save();
    1008:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
	TEXTOUT_P(PSTR("TEST COMPLETE!\r\n"));
    100c:	87 ec       	ldi	r24, 0xC7	; 199
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
}
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <console_main>:
}
*/

//Top level menu of console
void console_main(void)
{
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <console_main+0x1a>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <console_main+0x1c>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	
	do
	{
		
		TEXTOUT_P(PSTR("\r\n****************************\r\nCurrent light level = "));
		TEXTOUT_INT(a2d_light());
    103c:	40 e7       	ldi	r20, 0x70	; 112
    103e:	c4 2e       	mov	r12, r20
    1040:	41 e0       	ldi	r20, 0x01	; 1
    1042:	d4 2e       	mov	r13, r20
		TEXTOUT_P(PSTR("\r\nDay threshold   > "));
		TEXTOUT_INT(settings_ram.threshold_day);
		TEXTOUT_P(PSTR("\r\n\r\n1. Edit night threshold\r\n"));
		TEXTOUT_P(PSTR("2. Edit day threshold\r\n"));
		TEXTOUT_P(PSTR("(Enter-refresh, ESC-exit)\r\n"));
		input_result = getint(&option, 0, 2);
    1044:	33 e0       	ldi	r19, 0x03	; 3
    1046:	83 2e       	mov	r8, r19
    1048:	91 2c       	mov	r9, r1
    104a:	8c 0e       	add	r8, r28
    104c:	9d 1e       	adc	r9, r29
	do
	{
		mA = a2d_led_i();
		TEXTOUT_P(PSTR("\r\nCurrently:"));
		TEXTOUT_P(PSTR("\r\nSupply input         - "));
		TEXTOUT_FLOAT(a2d_supply_v());
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	a2 2e       	mov	r10, r18
    1052:	21 e0       	ldi	r18, 0x01	; 1
    1054:	b2 2e       	mov	r11, r18
	int option;
	char finished=FALSE;
	
	do
	{
		TEXTOUT_P(PSTR("\
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
4. Adjust maximum LED supply\r\n\
5. Adjust day/night threshold\r\n\
6. Reset\r\n\
0. exit\r\n\
"));
		input_result = getint(&option, -1, 6);
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	6f ef       	ldi	r22, 0xFF	; 255
    1064:	7f ef       	ldi	r23, 0xFF	; 255
    1066:	46 e0       	ldi	r20, 0x06	; 6
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	0e 94 05 07 	call	0xe0a	; 0xe0a <getint>
		
		if(input_result == INPUT_RESULT_OK)
    106e:	88 23       	and	r24, r24
    1070:	09 f0       	breq	.+2      	; 0x1074 <console_main+0x58>
    1072:	a8 c1       	rjmp	.+848    	; 0x13c4 <__stack+0x2c5>
		{
			switch(option)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	91 05       	cpc	r25, r1
    107c:	71 f1       	breq	.+92     	; 0x10da <console_main+0xbe>
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	91 05       	cpc	r25, r1
    1082:	54 f4       	brge	.+20     	; 0x1098 <console_main+0x7c>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	09 f1       	breq	.+66     	; 0x10cc <console_main+0xb0>
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	91 05       	cpc	r25, r1
    108e:	14 f5       	brge	.+68     	; 0x10d4 <console_main+0xb8>
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	01 f7       	brne	.-64     	; 0x1056 <console_main+0x3a>
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <console_main+0x90>
    1098:	85 30       	cpi	r24, 0x05	; 5
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <console_main+0x84>
    109e:	15 c1       	rjmp	.+554    	; 0x12ca <__stack+0x1cb>
    10a0:	85 30       	cpi	r24, 0x05	; 5
    10a2:	91 05       	cpc	r25, r1
    10a4:	ec f0       	brlt	.+58     	; 0x10e0 <console_main+0xc4>
    10a6:	06 97       	sbiw	r24, 0x06	; 6
    10a8:	b1 f6       	brne	.-84     	; 0x1056 <console_main+0x3a>
    10aa:	80 c1       	rjmp	.+768    	; 0x13ac <__stack+0x2ad>
			{
				case -1:
					settings_ram.test=0xFF;
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	80 93 32 02 	sts	0x0232, r24
					settings_save();
    10b2:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
					TEXTOUT_P(PSTR("RESET to start hardware test\r\n"));
    10b6:	84 ee       	ldi	r24, 0xE4	; 228
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					getkey(NULL, 0x0D, 0x7F);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	6d e0       	ldi	r22, 0x0D	; 13
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <getkey>
    10ca:	c5 cf       	rjmp	.-118    	; 0x1056 <console_main+0x3a>

static void bootload(void)
{
	void (*bootloader)(void)=  (void(*)(void))BOOTLOADER_ADDRESS;

	(*bootloader)();
    10cc:	e0 e0       	ldi	r30, 0x00	; 0
    10ce:	f0 ef       	ldi	r31, 0xF0	; 240
    10d0:	09 95       	icall
    10d2:	c1 cf       	rjmp	.-126    	; 0x1056 <console_main+0x3a>
					break;
				case 1:
					bootload();
					break;
				case 2:
					settings_default();
    10d4:	0e 94 cb 06 	call	0xd96	; 0xd96 <settings_default>
    10d8:	be cf       	rjmp	.-132    	; 0x1056 <console_main+0x3a>
					break;			
				case 3:
					power_test();
    10da:	0e 94 3f 40 	call	0x807e	; 0x807e <power_test>
    10de:	bb cf       	rjmp	.-138    	; 0x1056 <console_main+0x3a>
{
	char finished=FALSE;
	enum input_result_enum input_result;
	double mA;
	
	led_framerate(60);
    10e0:	8c e3       	ldi	r24, 0x3C	; 60
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	power_vled_set(255);
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	0e 94 39 40 	call	0x8072	; 0x8072 <power_vled_set>
	memset(led_frame_bitmap, 0xFF, 64 );
    10ee:	87 e4       	ldi	r24, 0x47	; 71
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	6f ef       	ldi	r22, 0xFF	; 255
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	40 e4       	ldi	r20, 0x40	; 64
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	0e 94 48 50 	call	0xa090	; 0xa090 <memset>
	led_plane_intensity_all(255);
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	led_waitframe(30);
    1104:	8e e1       	ldi	r24, 0x1E	; 30
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>

	do
	{
		mA = a2d_led_i();
    110c:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <a2d_led_i>
    1110:	7b 01       	movw	r14, r22
    1112:	8c 01       	movw	r16, r24
		TEXTOUT_P(PSTR("\r\nCurrently:"));
    1114:	8f ed       	ldi	r24, 0xDF	; 223
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_P(PSTR("\r\nSupply input         - "));
    111c:	85 ec       	ldi	r24, 0xC5	; 197
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_FLOAT(a2d_supply_v());
    1124:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <a2d_supply_v>
    1128:	ad b7       	in	r26, 0x3d	; 61
    112a:	be b7       	in	r27, 0x3e	; 62
    112c:	18 97       	sbiw	r26, 0x08	; 8
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	be bf       	out	0x3e, r27	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	ad bf       	out	0x3d, r26	; 61
    1138:	ed b7       	in	r30, 0x3d	; 61
    113a:	fe b7       	in	r31, 0x3e	; 62
    113c:	31 96       	adiw	r30, 0x01	; 1
    113e:	12 96       	adiw	r26, 0x02	; 2
    1140:	dc 92       	st	X, r13
    1142:	ce 92       	st	-X, r12
    1144:	11 97       	sbiw	r26, 0x01	; 1
    1146:	b3 82       	std	Z+3, r11	; 0x03
    1148:	a2 82       	std	Z+2, r10	; 0x02
    114a:	64 83       	std	Z+4, r22	; 0x04
    114c:	75 83       	std	Z+5, r23	; 0x05
    114e:	86 83       	std	Z+6, r24	; 0x06
    1150:	97 83       	std	Z+7, r25	; 0x07
    1152:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    1156:	2d b7       	in	r18, 0x3d	; 61
    1158:	3e b7       	in	r19, 0x3e	; 62
    115a:	28 5f       	subi	r18, 0xF8	; 248
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	3e bf       	out	0x3e, r19	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	2d bf       	out	0x3d, r18	; 61
    1168:	c6 01       	movw	r24, r12
    116a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("v\r\nMaximum LED supply   - "));
    116e:	8a ea       	ldi	r24, 0xAA	; 170
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_FLOAT(a2d_led_v());
    1176:	0e 94 89 47 	call	0x8f12	; 0x8f12 <a2d_led_v>
    117a:	ad b7       	in	r26, 0x3d	; 61
    117c:	be b7       	in	r27, 0x3e	; 62
    117e:	18 97       	sbiw	r26, 0x08	; 8
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	be bf       	out	0x3e, r27	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	ad bf       	out	0x3d, r26	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	12 96       	adiw	r26, 0x02	; 2
    1192:	dc 92       	st	X, r13
    1194:	ce 92       	st	-X, r12
    1196:	11 97       	sbiw	r26, 0x01	; 1
    1198:	b3 82       	std	Z+3, r11	; 0x03
    119a:	a2 82       	std	Z+2, r10	; 0x02
    119c:	64 83       	std	Z+4, r22	; 0x04
    119e:	75 83       	std	Z+5, r23	; 0x05
    11a0:	86 83       	std	Z+6, r24	; 0x06
    11a2:	97 83       	std	Z+7, r25	; 0x07
    11a4:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    11a8:	2d b7       	in	r18, 0x3d	; 61
    11aa:	3e b7       	in	r19, 0x3e	; 62
    11ac:	28 5f       	subi	r18, 0xF8	; 248
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	3e bf       	out	0x3e, r19	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	2d bf       	out	0x3d, r18	; 61
    11ba:	c6 01       	movw	r24, r12
    11bc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("v\r\nMaximum LED current  - "));
    11c0:	8f e8       	ldi	r24, 0x8F	; 143
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_FLOAT(mA);
    11c8:	8d b7       	in	r24, 0x3d	; 61
    11ca:	9e b7       	in	r25, 0x3e	; 62
    11cc:	08 97       	sbiw	r24, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	9e bf       	out	0x3e, r25	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	8d bf       	out	0x3d, r24	; 61
    11d8:	ed b7       	in	r30, 0x3d	; 61
    11da:	fe b7       	in	r31, 0x3e	; 62
    11dc:	31 96       	adiw	r30, 0x01	; 1
    11de:	ad b7       	in	r26, 0x3d	; 61
    11e0:	be b7       	in	r27, 0x3e	; 62
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	dc 92       	st	X, r13
    11e6:	ce 92       	st	-X, r12
    11e8:	11 97       	sbiw	r26, 0x01	; 1
    11ea:	b3 82       	std	Z+3, r11	; 0x03
    11ec:	a2 82       	std	Z+2, r10	; 0x02
    11ee:	e4 82       	std	Z+4, r14	; 0x04
    11f0:	f5 82       	std	Z+5, r15	; 0x05
    11f2:	06 83       	std	Z+6, r16	; 0x06
    11f4:	17 83       	std	Z+7, r17	; 0x07
    11f6:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    11fa:	2d b7       	in	r18, 0x3d	; 61
    11fc:	3e b7       	in	r19, 0x3e	; 62
    11fe:	28 5f       	subi	r18, 0xF8	; 248
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	3e bf       	out	0x3e, r19	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	2d bf       	out	0x3d, r18	; 61
    120c:	c6 01       	movw	r24, r12
    120e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("mA\r\nLED forward drop     - "));
    1212:	83 e7       	ldi	r24, 0x73	; 115
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_FLOAT(a2d_led_fv());
    121a:	0e 94 f5 47 	call	0x8fea	; 0x8fea <a2d_led_fv>
    121e:	ad b7       	in	r26, 0x3d	; 61
    1220:	be b7       	in	r27, 0x3e	; 62
    1222:	18 97       	sbiw	r26, 0x08	; 8
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	be bf       	out	0x3e, r27	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	ad bf       	out	0x3d, r26	; 61
    122e:	ed b7       	in	r30, 0x3d	; 61
    1230:	fe b7       	in	r31, 0x3e	; 62
    1232:	31 96       	adiw	r30, 0x01	; 1
    1234:	12 96       	adiw	r26, 0x02	; 2
    1236:	dc 92       	st	X, r13
    1238:	ce 92       	st	-X, r12
    123a:	11 97       	sbiw	r26, 0x01	; 1
    123c:	b3 82       	std	Z+3, r11	; 0x03
    123e:	a2 82       	std	Z+2, r10	; 0x02
    1240:	64 83       	std	Z+4, r22	; 0x04
    1242:	75 83       	std	Z+5, r23	; 0x05
    1244:	86 83       	std	Z+6, r24	; 0x06
    1246:	97 83       	std	Z+7, r25	; 0x07
    1248:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    124c:	2d b7       	in	r18, 0x3d	; 61
    124e:	3e b7       	in	r19, 0x3e	; 62
    1250:	28 5f       	subi	r18, 0xF8	; 248
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	3e bf       	out	0x3e, r19	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	2d bf       	out	0x3d, r18	; 61
    125e:	c6 01       	movw	r24, r12
    1260:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("v\r\n"));
    1264:	8f e6       	ldi	r24, 0x6F	; 111
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		if(mA > 25)
    126c:	c8 01       	movw	r24, r16
    126e:	b7 01       	movw	r22, r14
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	48 ec       	ldi	r20, 0xC8	; 200
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__gesf2>
    127c:	18 16       	cp	r1, r24
    127e:	24 f4       	brge	.+8      	; 0x1288 <__stack+0x189>
			TEXTOUT_P(PSTR("Reccomend inserting JP1 for > 25mA\r\n"));
    1280:	8a e4       	ldi	r24, 0x4A	; 74
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		if(mA > 40)
    1288:	c8 01       	movw	r24, r16
    128a:	b7 01       	movw	r22, r14
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	52 e4       	ldi	r21, 0x42	; 66
    1294:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	24 f4       	brge	.+8      	; 0x12a4 <__stack+0x1a5>
			TEXTOUT_P(PSTR("mA over 40mA not reccomended\r\n"));
    129c:	8b e2       	ldi	r24, 0x2B	; 43
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		
		TEXTOUT_P(PSTR("Adjust VR1 and press enter to refresh, or ESC when done\r\n"));
    12a4:	81 ef       	ldi	r24, 0xF1	; 241
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		
		input_result = getint(NULL, 0, 0);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 05 07 	call	0xe0a	; 0xe0a <getint>
		if(input_result == INPUT_RESULT_ABORTED || input_result == INPUT_RESULT_TIMEOUT)
    12bc:	81 50       	subi	r24, 0x01	; 1
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__stack+0x1c5>
    12c2:	24 cf       	rjmp	.-440    	; 0x110c <__stack+0xd>
			finished = TRUE;
		
	}while(!finished);

	led_blank();
    12c4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
    12c8:	c6 ce       	rjmp	.-628    	; 0x1056 <console_main+0x3a>
	char finished=FALSE;
	
	do
	{
		
		TEXTOUT_P(PSTR("\r\n****************************\r\nCurrent light level = "));
    12ca:	80 e9       	ldi	r24, 0x90	; 144
    12cc:	93 e0       	ldi	r25, 0x03	; 3
    12ce:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_INT(a2d_light());
    12d2:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <a2d_light>
    12d6:	60 e7       	ldi	r22, 0x70	; 112
    12d8:	71 e0       	ldi	r23, 0x01	; 1
    12da:	4a e0       	ldi	r20, 0x0A	; 10
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    12e2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("\r\nNight threshold < "));
    12e6:	8b e7       	ldi	r24, 0x7B	; 123
    12e8:	93 e0       	ldi	r25, 0x03	; 3
    12ea:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_INT(settings_ram.threshold_night);
    12ee:	80 91 37 02 	lds	r24, 0x0237
    12f2:	90 91 38 02 	lds	r25, 0x0238
    12f6:	60 e7       	ldi	r22, 0x70	; 112
    12f8:	71 e0       	ldi	r23, 0x01	; 1
    12fa:	4a e0       	ldi	r20, 0x0A	; 10
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    1302:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("\r\nDay threshold   > "));
    1306:	86 e6       	ldi	r24, 0x66	; 102
    1308:	93 e0       	ldi	r25, 0x03	; 3
    130a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_INT(settings_ram.threshold_day);
    130e:	80 91 39 02 	lds	r24, 0x0239
    1312:	90 91 3a 02 	lds	r25, 0x023A
    1316:	60 e7       	ldi	r22, 0x70	; 112
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	4a e0       	ldi	r20, 0x0A	; 10
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    1322:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("\r\n\r\n1. Edit night threshold\r\n"));
    1326:	88 e4       	ldi	r24, 0x48	; 72
    1328:	93 e0       	ldi	r25, 0x03	; 3
    132a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_P(PSTR("2. Edit day threshold\r\n"));
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_P(PSTR("(Enter-refresh, ESC-exit)\r\n"));
    1336:	84 e1       	ldi	r24, 0x14	; 20
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		input_result = getint(&option, 0, 2);
    133e:	c4 01       	movw	r24, r8
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	42 e0       	ldi	r20, 0x02	; 2
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 05 07 	call	0xe0a	; 0xe0a <getint>
    134c:	18 2f       	mov	r17, r24
		
		if(input_result == INPUT_RESULT_OK)
    134e:	88 23       	and	r24, r24
    1350:	31 f5       	brne	.+76     	; 0x139e <__stack+0x29f>
		{
			switch(option)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	19 f0       	breq	.+6      	; 0x1362 <__stack+0x263>
    135c:	02 97       	sbiw	r24, 0x02	; 2
    135e:	e9 f4       	brne	.+58     	; 0x139a <__stack+0x29b>
    1360:	0d c0       	rjmp	.+26     	; 0x137c <__stack+0x27d>
			{
				case 1:
					TEXTOUT_P(PSTR("New night threshold "));
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					input_result = getint((int*)&(settings_ram.threshold_night), 0, settings_ram.threshold_day);
    136a:	40 91 39 02 	lds	r20, 0x0239
    136e:	50 91 3a 02 	lds	r21, 0x023A
    1372:	87 e3       	ldi	r24, 0x37	; 55
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	0c c0       	rjmp	.+24     	; 0x1394 <__stack+0x295>
					break;
				
				case 2:
					TEXTOUT_P(PSTR("New day threshold "));
    137c:	8c ee       	ldi	r24, 0xEC	; 236
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					input_result = getint((int*)&(settings_ram.threshold_day), settings_ram.threshold_night, 1022);
    1384:	60 91 37 02 	lds	r22, 0x0237
    1388:	70 91 38 02 	lds	r23, 0x0238
    138c:	89 e3       	ldi	r24, 0x39	; 57
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	4e ef       	ldi	r20, 0xFE	; 254
    1392:	53 e0       	ldi	r21, 0x03	; 3
    1394:	0e 94 05 07 	call	0xe0a	; 0xe0a <getint>
    1398:	18 2f       	mov	r17, r24
					break;
			};
			settings_save();
    139a:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
		};
		
		if(input_result == INPUT_RESULT_ABORTED)
    139e:	12 30       	cpi	r17, 0x02	; 2
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <__stack+0x2a5>
    13a2:	59 ce       	rjmp	.-846    	; 0x1056 <console_main+0x3a>
			finished=TRUE;
		else if(input_result == INPUT_RESULT_TIMEOUT)
    13a4:	11 30       	cpi	r17, 0x01	; 1
    13a6:	09 f0       	breq	.+2      	; 0x13aa <__stack+0x2ab>
    13a8:	90 cf       	rjmp	.-224    	; 0x12ca <__stack+0x1cb>
    13aa:	55 ce       	rjmp	.-854    	; 0x1056 <console_main+0x3a>
					break;
				case 5:
					console_adjust_light();
					break;
				case 6:
					led_blank();
    13ac:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
					wdt_enable(WDTO_15MS);
    13b0:	28 e0       	ldi	r18, 0x08	; 8
    13b2:	88 e1       	ldi	r24, 0x18	; 24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	a8 95       	wdr
    13bc:	81 bd       	out	0x21, r24	; 33
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	21 bd       	out	0x21, r18	; 33
    13c2:	ff cf       	rjmp	.-2      	; 0x13c2 <__stack+0x2c3>
					while(1);
					break;
			};
		};
		
		if(input_result == INPUT_RESULT_ABORTED)
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	19 f0       	breq	.+6      	; 0x13ce <__stack+0x2cf>
			finished=TRUE;
		else if(input_result == INPUT_RESULT_TIMEOUT)
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__stack+0x2cf>
    13cc:	44 ce       	rjmp	.-888    	; 0x1056 <console_main+0x3a>
			finished=TRUE;
		
	}while(!finished);
	TEXTOUT_P(PSTR("Exit\r\n\r\n"));
    13ce:	8b ed       	ldi	r24, 0xDB	; 219
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	9f 90       	pop	r9
    13f4:	8f 90       	pop	r8
    13f6:	08 95       	ret

000013f8 <uart1_init>:
//********************************************************************************************************

void uart1_init(void)
{
	// Setup Uart1
	DDRD |=_BV(PD3);			// UTX1 output
    13f8:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &=~_BV(PD2);			// URX1 input
    13fa:	8a 98       	cbi	0x11, 2	; 17
	UCSR1B |= _BV(TXEN1);		// enable tx
    13fc:	ea e9       	ldi	r30, 0x9A	; 154
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 60       	ori	r24, 0x08	; 8
    1404:	80 83       	st	Z, r24
	UCSR1B |= _BV(RXEN1);		// enable rx
    1406:	80 81       	ld	r24, Z
    1408:	80 61       	ori	r24, 0x10	; 16
    140a:	80 83       	st	Z, r24
	UCSR1B |= _BV(RXCIE1);		// enable rx interrupt
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	80 83       	st	Z, r24
 
	#define BAUD UART1_BAUD
	#include <util/setbaud.h>
	UBRR1H = UBRRH_VALUE;
    1412:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = UBRRL_VALUE;
    1416:	89 e1       	ldi	r24, 0x19	; 25
    1418:	80 93 99 00 	sts	0x0099, r24
	#if USE_2X
		UCSRA |= _BV(U2X1);
	#else
		UCSR1A &= _BV(U2X1);
    141c:	eb e9       	ldi	r30, 0x9B	; 155
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	82 70       	andi	r24, 0x02	; 2
    1424:	80 83       	st	Z, r24
	#endif
	#undef BAUD
}
    1426:	08 95       	ret

00001428 <uart1_tx_char>:

void uart1_tx_char(char x)
{
    1428:	98 2f       	mov	r25, r24
	while(!(UCSR1A & _BV(UDRE1)));
    142a:	80 91 9b 00 	lds	r24, 0x009B
    142e:	85 ff       	sbrs	r24, 5
    1430:	fc cf       	rjmp	.-8      	; 0x142a <uart1_tx_char+0x2>
	UDR1 = x;
    1432:	90 93 9c 00 	sts	0x009C, r25
}
    1436:	08 95       	ret

00001438 <uart1_tx_string>:

void uart1_tx_string(char* text)
{
    1438:	fc 01       	movw	r30, r24
    143a:	07 c0       	rjmp	.+14     	; 0x144a <uart1_tx_string+0x12>
	while(*text)
	{
		while(!(UCSR1A & _BV(UDRE1)));
    143c:	80 91 9b 00 	lds	r24, 0x009B
    1440:	85 ff       	sbrs	r24, 5
    1442:	fc cf       	rjmp	.-8      	; 0x143c <uart1_tx_string+0x4>
		UDR1 = *text++;
    1444:	90 93 9c 00 	sts	0x009C, r25
    1448:	31 96       	adiw	r30, 0x01	; 1
	UDR1 = x;
}

void uart1_tx_string(char* text)
{
	while(*text)
    144a:	90 81       	ld	r25, Z
    144c:	99 23       	and	r25, r25
    144e:	b1 f7       	brne	.-20     	; 0x143c <uart1_tx_string+0x4>
	{
		while(!(UCSR1A & _BV(UDRE1)));
		UDR1 = *text++;
	};
}
    1450:	08 95       	ret

00001452 <uart1_tx_string_P>:
	
void uart1_tx_string_P(PGM_P text)
{
    1452:	ac 01       	movw	r20, r24
    1454:	0a c0       	rjmp	.+20     	; 0x146a <uart1_tx_string_P+0x18>
	while(pgm_read_byte(text))
	{
		while(!(UCSR1A & _BV(UDRE1)));
    1456:	80 91 9b 00 	lds	r24, 0x009B
    145a:	85 ff       	sbrs	r24, 5
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <uart1_tx_string_P+0x4>
		UDR1 = pgm_read_byte(text++);
    145e:	4f 5f       	subi	r20, 0xFF	; 255
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	f9 01       	movw	r30, r18
    1464:	84 91       	lpm	r24, Z+
    1466:	80 93 9c 00 	sts	0x009C, r24
    146a:	9a 01       	movw	r18, r20
	};
}
	
void uart1_tx_string_P(PGM_P text)
{
	while(pgm_read_byte(text))
    146c:	fa 01       	movw	r30, r20
    146e:	84 91       	lpm	r24, Z+
    1470:	88 23       	and	r24, r24
    1472:	89 f7       	brne	.-30     	; 0x1456 <uart1_tx_string_P+0x4>
	{
		while(!(UCSR1A & _BV(UDRE1)));
		UDR1 = pgm_read_byte(text++);
	};
}
    1474:	08 95       	ret

00001476 <__vector_30>:

ISR(USART1_RX_vect)
{
    1476:	1f 92       	push	r1
    1478:	0f 92       	push	r0
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	0f 92       	push	r0
    147e:	11 24       	eor	r1, r1
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
	static volatile char rx_char;
	rx_char = UDR1;
    1498:	80 91 9c 00 	lds	r24, 0x009C
    149c:	80 93 7d 01 	sts	0x017D, r24
	
	//call function ptr only if !NULL
	if(uart1_rx_ptr)
    14a0:	e0 91 7b 01 	lds	r30, 0x017B
    14a4:	f0 91 7c 01 	lds	r31, 0x017C
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <__vector_30+0x3c>
		(*uart1_rx_ptr)(rx_char);
    14ac:	80 91 7d 01 	lds	r24, 0x017D
    14b0:	09 95       	icall
}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <led_flip>:
	OCR1A = frame_time;
}

void led_flip(char x)
{
	flip = x;
    14d4:	80 93 7e 01 	sts	0x017E, r24
}
    14d8:	08 95       	ret

000014da <led_shutdown>:

void led_shutdown(void)
{
	//disable int's
	TIMSK &=~( _BV(OCIE1A) + _BV(TOIE1));
    14da:	87 b7       	in	r24, 0x37	; 55
    14dc:	8b 7e       	andi	r24, 0xEB	; 235
    14de:	87 bf       	out	0x37, r24	; 55

	//all planes off
	PLANES_PORT = 0xFF;
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	85 bb       	out	0x15, r24	; 21
	PLANES_DDR	= 0xFF;
    14e4:	84 bb       	out	0x14, r24	; 20
}
    14e6:	08 95       	ret

000014e8 <led_framerate>:

void led_framerate(int rate)
{
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
//	TOP = F_CPU/Frate/16

	unsigned long top = F_CPU / 16ul;
	unsigned char tempchar;

	if(rate < 16)
    14fe:	80 31       	cpi	r24, 0x10	; 16
    1500:	91 05       	cpc	r25, r1
    1502:	14 f4       	brge	.+4      	; 0x1508 <led_framerate+0x20>
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	90 e0       	ldi	r25, 0x00	; 0
		rate=16;
		
	top /= rate;
	
	frame_time = (unsigned int)top;
    1508:	9c 01       	movw	r18, r24
    150a:	44 27       	eor	r20, r20
    150c:	37 fd       	sbrc	r19, 7
    150e:	40 95       	com	r20
    1510:	54 2f       	mov	r21, r20
    1512:	60 e4       	ldi	r22, 0x40	; 64
    1514:	72 e4       	ldi	r23, 0x42	; 66
    1516:	8f e0       	ldi	r24, 0x0F	; 15
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 5e 4e 	call	0x9cbc	; 0x9cbc <__udivmodsi4>
    151e:	49 01       	movw	r8, r18
    1520:	30 93 91 01 	sts	0x0191, r19
    1524:	20 93 90 01 	sts	0x0190, r18
    1528:	c2 e9       	ldi	r28, 0x92	; 146
    152a:	d1 e0       	ldi	r29, 0x01	; 1
    152c:	30 e8       	ldi	r19, 0x80	; 128
    152e:	a3 2e       	mov	r10, r19
    1530:	31 e0       	ldi	r19, 0x01	; 1
    1532:	b3 2e       	mov	r11, r19
{
	unsigned int tempint;
	unsigned long templong;

	tempint = intensity * intensity;
	templong = (unsigned long)tempint * (unsigned long)frame_time;
    1534:	64 01       	movw	r12, r8
    1536:	ee 24       	eor	r14, r14
    1538:	ff 24       	eor	r15, r15

	//re-calc intensity periods after changing frame rate
	tempchar=0;
	while(tempchar !=8)
	{
		led_plane_intensity(tempchar, plane_intensity[tempchar]);
    153a:	18 81       	ld	r17, Y
void led_plane_intensity(unsigned char plane, unsigned char intensity)
{
	unsigned int tempint;
	unsigned long templong;

	tempint = intensity * intensity;
    153c:	81 2f       	mov	r24, r17
    153e:	90 e0       	ldi	r25, 0x00	; 0
	templong = (unsigned long)tempint * (unsigned long)frame_time;
    1540:	88 9f       	mul	r24, r24
    1542:	90 01       	movw	r18, r0
    1544:	89 9f       	mul	r24, r25
    1546:	30 0d       	add	r19, r0
    1548:	98 9f       	mul	r25, r24
    154a:	30 0d       	add	r19, r0
    154c:	11 24       	eor	r1, r1
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	c7 01       	movw	r24, r14
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <__mulsi3>
	templong >>= 16;

	plane_period[plane] = frame_time - (unsigned int)templong;
    155a:	bc 01       	movw	r22, r24
    155c:	88 27       	eor	r24, r24
    155e:	99 27       	eor	r25, r25
    1560:	c4 01       	movw	r24, r8
    1562:	86 1b       	sub	r24, r22
    1564:	97 0b       	sbc	r25, r23
    1566:	f5 01       	movw	r30, r10
    1568:	81 93       	st	Z+, r24
    156a:	91 93       	st	Z+, r25
    156c:	5f 01       	movw	r10, r30

	plane_intensity[plane] = intensity;	//remember setting se we can re-calc if frame rate changes
    156e:	19 93       	st	Y+, r17
	
	frame_time = (unsigned int)top;

	//re-calc intensity periods after changing frame rate
	tempchar=0;
	while(tempchar !=8)
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	ca 39       	cpi	r28, 0x9A	; 154
    1574:	df 07       	cpc	r29, r31
    1576:	09 f7       	brne	.-62     	; 0x153a <led_framerate+0x52>
	{
		led_plane_intensity(tempchar, plane_intensity[tempchar]);
		tempchar++;
	};
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	08 95       	ret

00001590 <led_plane_intensity>:

void led_plane_intensity(unsigned char plane, unsigned char intensity)
{
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	e8 2e       	mov	r14, r24
    159a:	f6 2e       	mov	r15, r22
	unsigned int tempint;
	unsigned long templong;

	tempint = intensity * intensity;
    159c:	86 2f       	mov	r24, r22
    159e:	90 e0       	ldi	r25, 0x00	; 0
	templong = (unsigned long)tempint * (unsigned long)frame_time;
    15a0:	00 91 90 01 	lds	r16, 0x0190
    15a4:	10 91 91 01 	lds	r17, 0x0191
    15a8:	88 9f       	mul	r24, r24
    15aa:	b0 01       	movw	r22, r0
    15ac:	89 9f       	mul	r24, r25
    15ae:	70 0d       	add	r23, r0
    15b0:	98 9f       	mul	r25, r24
    15b2:	70 0d       	add	r23, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	98 01       	movw	r18, r16
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <__mulsi3>
	templong >>= 16;

	plane_period[plane] = frame_time - (unsigned int)templong;
    15c4:	ae 2d       	mov	r26, r14
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	fd 01       	movw	r30, r26
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	e0 58       	subi	r30, 0x80	; 128
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	bc 01       	movw	r22, r24
    15d4:	88 27       	eor	r24, r24
    15d6:	99 27       	eor	r25, r25
    15d8:	06 1b       	sub	r16, r22
    15da:	17 0b       	sbc	r17, r23
    15dc:	11 83       	std	Z+1, r17	; 0x01
    15de:	00 83       	st	Z, r16

	plane_intensity[plane] = intensity;	//remember setting se we can re-calc if frame rate changes
    15e0:	ae 56       	subi	r26, 0x6E	; 110
    15e2:	be 4f       	sbci	r27, 0xFE	; 254
    15e4:	fc 92       	st	X, r15
}
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	08 95       	ret

000015f0 <led_plane_intensity_all>:

void led_plane_intensity_all(unsigned char intensity)
{
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	f8 2e       	mov	r15, r24
	unsigned int tempint;
	unsigned long templong;

	tempint = intensity * intensity;
    15f8:	90 e0       	ldi	r25, 0x00	; 0
	templong = (unsigned long)tempint * (unsigned long)frame_time;
    15fa:	00 91 90 01 	lds	r16, 0x0190
    15fe:	10 91 91 01 	lds	r17, 0x0191
    1602:	88 9f       	mul	r24, r24
    1604:	b0 01       	movw	r22, r0
    1606:	89 9f       	mul	r24, r25
    1608:	70 0d       	add	r23, r0
    160a:	98 9f       	mul	r25, r24
    160c:	70 0d       	add	r23, r0
    160e:	11 24       	eor	r1, r1
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	98 01       	movw	r18, r16
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <__mulsi3>
	templong >>= 16;

	plane_period[0] = frame_time - (unsigned int)templong;
    161e:	bc 01       	movw	r22, r24
    1620:	88 27       	eor	r24, r24
    1622:	99 27       	eor	r25, r25
    1624:	06 1b       	sub	r16, r22
    1626:	17 0b       	sbc	r17, r23
    1628:	10 93 81 01 	sts	0x0181, r17
    162c:	00 93 80 01 	sts	0x0180, r16
	plane_intensity[0] = intensity;	//remember setting so we can re-calc if frame rate changes
    1630:	f0 92 92 01 	sts	0x0192, r15
	plane_period[1] = frame_time - (unsigned int)templong;
    1634:	10 93 83 01 	sts	0x0183, r17
    1638:	00 93 82 01 	sts	0x0182, r16
	plane_intensity[1] = intensity;	//remember setting so we can re-calc if frame rate changes
    163c:	f0 92 93 01 	sts	0x0193, r15
	plane_period[2] = frame_time - (unsigned int)templong;
    1640:	10 93 85 01 	sts	0x0185, r17
    1644:	00 93 84 01 	sts	0x0184, r16
	plane_intensity[2] = intensity;	//remember setting so we can re-calc if frame rate changes
    1648:	f0 92 94 01 	sts	0x0194, r15
	plane_period[3] = frame_time - (unsigned int)templong;
    164c:	10 93 87 01 	sts	0x0187, r17
    1650:	00 93 86 01 	sts	0x0186, r16
	plane_intensity[3] = intensity;	//remember setting so we can re-calc if frame rate changes
    1654:	f0 92 95 01 	sts	0x0195, r15
	plane_period[4] = frame_time - (unsigned int)templong;
    1658:	10 93 89 01 	sts	0x0189, r17
    165c:	00 93 88 01 	sts	0x0188, r16
	plane_intensity[4] = intensity;	//remember setting so we can re-calc if frame rate changes
    1660:	f0 92 96 01 	sts	0x0196, r15
	plane_period[5] = frame_time - (unsigned int)templong;
    1664:	10 93 8b 01 	sts	0x018B, r17
    1668:	00 93 8a 01 	sts	0x018A, r16
	plane_intensity[5] = intensity;	//remember setting so we can re-calc if frame rate changes
    166c:	f0 92 97 01 	sts	0x0197, r15
	plane_period[6] = frame_time - (unsigned int)templong;
    1670:	10 93 8d 01 	sts	0x018D, r17
    1674:	00 93 8c 01 	sts	0x018C, r16
	plane_intensity[6] = intensity;	//remember setting so we can re-calc if frame rate changes
    1678:	f0 92 98 01 	sts	0x0198, r15
	plane_period[7] = frame_time - (unsigned int)templong;
    167c:	10 93 8f 01 	sts	0x018F, r17
    1680:	00 93 8e 01 	sts	0x018E, r16
	plane_intensity[7] = intensity;	//remember setting so we can re-calc if frame rate changes
    1684:	f0 92 99 01 	sts	0x0199, r15
}
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	08 95       	ret

00001690 <led_point>:

// byte address = y * 8 + z
// bit address 7-0 is x 0-7 (reversed)
void led_point(unsigned char x, unsigned char y, unsigned char z, unsigned char on_off)
{
    1690:	38 2f       	mov	r19, r24
	if( ((x|y|z)&0xF8) == 0)	//check range
    1692:	86 2f       	mov	r24, r22
    1694:	83 2b       	or	r24, r19
    1696:	84 2b       	or	r24, r20
    1698:	88 7f       	andi	r24, 0xF8	; 248
    169a:	71 f5       	brne	.+92     	; 0x16f8 <led_point+0x68>
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
	{
		if(on_off)
    16a0:	22 23       	and	r18, r18
    16a2:	a9 f0       	breq	.+42     	; 0x16ce <led_point+0x3e>
			led_frame_bitmap[z+(y<<3)] |= 0x80>>x;
    16a4:	fb 01       	movw	r30, r22
    16a6:	b3 e0       	ldi	r27, 0x03	; 3
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	ba 95       	dec	r27
    16ae:	e1 f7       	brne	.-8      	; 0x16a8 <led_point+0x18>
    16b0:	e4 0f       	add	r30, r20
    16b2:	f5 1f       	adc	r31, r21
    16b4:	e9 5b       	subi	r30, 0xB9	; 185
    16b6:	fd 4f       	sbci	r31, 0xFD	; 253
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <led_point+0x32>
    16be:	95 95       	asr	r25
    16c0:	87 95       	ror	r24
    16c2:	3a 95       	dec	r19
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <led_point+0x2e>
    16c6:	20 81       	ld	r18, Z
    16c8:	28 2b       	or	r18, r24
    16ca:	20 83       	st	Z, r18
    16cc:	08 95       	ret
		else
			led_frame_bitmap[z+(y<<3)] &=~(0x80>>x);
    16ce:	fb 01       	movw	r30, r22
    16d0:	a3 e0       	ldi	r26, 0x03	; 3
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	aa 95       	dec	r26
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <led_point+0x42>
    16da:	e4 0f       	add	r30, r20
    16dc:	f5 1f       	adc	r31, r21
    16de:	e9 5b       	subi	r30, 0xB9	; 185
    16e0:	fd 4f       	sbci	r31, 0xFD	; 253
    16e2:	80 e8       	ldi	r24, 0x80	; 128
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <led_point+0x5c>
    16e8:	95 95       	asr	r25
    16ea:	87 95       	ror	r24
    16ec:	3a 95       	dec	r19
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <led_point+0x58>
    16f0:	80 95       	com	r24
    16f2:	20 81       	ld	r18, Z
    16f4:	28 23       	and	r18, r24
    16f6:	20 83       	st	Z, r18
    16f8:	08 95       	ret

000016fa <led_line>:

/* take sign of a, either -1, 0, or 1 */
#define ZSGN(a) (((a)<0) ? -1 : (a)>0 ? 1 : 0)

void led_line(int x1, int y1, int z1, int x2, int y2, int z2, unsigned char on_off)
{
    16fa:	2f 92       	push	r2
    16fc:	3f 92       	push	r3
    16fe:	4f 92       	push	r4
    1700:	5f 92       	push	r5
    1702:	6f 92       	push	r6
    1704:	7f 92       	push	r7
    1706:	8f 92       	push	r8
    1708:	9f 92       	push	r9
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	2d 97       	sbiw	r28, 0x0d	; 13
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	5c 01       	movw	r10, r24
    1730:	3e 83       	std	Y+6, r19	; 0x06
    1732:	2d 83       	std	Y+5, r18	; 0x05
    1734:	18 87       	std	Y+8, r17	; 0x08
    1736:	0f 83       	std	Y+7, r16	; 0x07
    1738:	fa 86       	std	Y+10, r15	; 0x0a
    173a:	e9 86       	std	Y+9, r14	; 0x09
    173c:	cb 86       	std	Y+11, r12	; 0x0b
    int x, y, z;
    int ax, ay, az;
    int sx, sy, sz;
    int dx, dy, dz;

    dx = x2 - x1;
    173e:	28 1b       	sub	r18, r24
    1740:	39 0b       	sbc	r19, r25
    dy = y2 - y1;
    1742:	18 01       	movw	r2, r16
    1744:	26 1a       	sub	r2, r22
    1746:	37 0a       	sbc	r3, r23
    dz = z2 - z1;
    1748:	d7 01       	movw	r26, r14
    174a:	a4 1b       	sub	r26, r20
    174c:	b5 0b       	sbc	r27, r21

    ax = ABS(dx) << 1;
    174e:	c9 01       	movw	r24, r18
    1750:	37 ff       	sbrs	r19, 7
    1752:	04 c0       	rjmp	.+8      	; 0x175c <led_line+0x62>
    1754:	88 27       	eor	r24, r24
    1756:	99 27       	eor	r25, r25
    1758:	82 1b       	sub	r24, r18
    175a:	93 0b       	sbc	r25, r19
    175c:	2c 01       	movw	r4, r24
    175e:	44 0c       	add	r4, r4
    1760:	55 1c       	adc	r5, r5
    ay = ABS(dy) << 1;
    1762:	c1 01       	movw	r24, r2
    1764:	37 fe       	sbrs	r3, 7
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <led_line+0x76>
    1768:	88 27       	eor	r24, r24
    176a:	99 27       	eor	r25, r25
    176c:	82 19       	sub	r24, r2
    176e:	93 09       	sbc	r25, r3
    1770:	3c 01       	movw	r6, r24
    1772:	66 0c       	add	r6, r6
    1774:	77 1c       	adc	r7, r7
    az = ABS(dz) << 1;
    1776:	cd 01       	movw	r24, r26
    1778:	b7 ff       	sbrs	r27, 7
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <led_line+0x8a>
    177c:	88 27       	eor	r24, r24
    177e:	99 27       	eor	r25, r25
    1780:	8a 1b       	sub	r24, r26
    1782:	9b 0b       	sbc	r25, r27
    1784:	4c 01       	movw	r8, r24
    1786:	88 0c       	add	r8, r8
    1788:	99 1c       	adc	r9, r9

    sx = ZSGN(dx);
    178a:	37 ff       	sbrs	r19, 7
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <led_line+0x9e>
    178e:	2f ef       	ldi	r18, 0xFF	; 255
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	3c 83       	std	Y+4, r19	; 0x04
    1794:	2b 83       	std	Y+3, r18	; 0x03
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <led_line+0xb0>
    1798:	1c 82       	std	Y+4, r1	; 0x04
    179a:	1b 82       	std	Y+3, r1	; 0x03
    179c:	12 16       	cp	r1, r18
    179e:	13 06       	cpc	r1, r19
    17a0:	24 f4       	brge	.+8      	; 0x17aa <led_line+0xb0>
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    sy = ZSGN(dy);
    17aa:	37 fe       	sbrs	r3, 7
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <led_line+0xbe>
    17ae:	ef ef       	ldi	r30, 0xFF	; 255
    17b0:	ff ef       	ldi	r31, 0xFF	; 255
    17b2:	fa 83       	std	Y+2, r31	; 0x02
    17b4:	e9 83       	std	Y+1, r30	; 0x01
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <led_line+0xd0>
    17b8:	1a 82       	std	Y+2, r1	; 0x02
    17ba:	19 82       	std	Y+1, r1	; 0x01
    17bc:	12 14       	cp	r1, r2
    17be:	13 04       	cpc	r1, r3
    17c0:	24 f4       	brge	.+8      	; 0x17ca <led_line+0xd0>
    17c2:	21 e0       	ldi	r18, 0x01	; 1
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3a 83       	std	Y+2, r19	; 0x02
    17c8:	29 83       	std	Y+1, r18	; 0x01
    sz = ZSGN(dz);
    17ca:	b7 ff       	sbrs	r27, 7
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <led_line+0xdc>
    17ce:	22 24       	eor	r2, r2
    17d0:	2a 94       	dec	r2
    17d2:	32 2c       	mov	r3, r2
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <led_line+0xec>
    17d6:	22 24       	eor	r2, r2
    17d8:	33 24       	eor	r3, r3
    17da:	1a 16       	cp	r1, r26
    17dc:	1b 06       	cpc	r1, r27
    17de:	1c f4       	brge	.+6      	; 0x17e6 <led_line+0xec>
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	23 2e       	mov	r2, r19
    17e4:	31 2c       	mov	r3, r1

    x = x1;
    y = y1;
    z = z1;

    if (ax >= MAX(ay, az))            /* x dominant */
    17e6:	c4 01       	movw	r24, r8
    17e8:	86 14       	cp	r8, r6
    17ea:	97 04       	cpc	r9, r7
    17ec:	0c f4       	brge	.+2      	; 0x17f0 <led_line+0xf6>
    17ee:	c3 01       	movw	r24, r6
    17f0:	48 16       	cp	r4, r24
    17f2:	59 06       	cpc	r5, r25
    17f4:	cc f1       	brlt	.+114    	; 0x1868 <led_line+0x16e>
    {
        yd = ay - (ax >> 1);
    17f6:	c2 01       	movw	r24, r4
    17f8:	95 95       	asr	r25
    17fa:	87 95       	ror	r24
    17fc:	d3 01       	movw	r26, r6
    17fe:	a8 1b       	sub	r26, r24
    1800:	b9 0b       	sbc	r27, r25
    1802:	bd 87       	std	Y+13, r27	; 0x0d
    1804:	ac 87       	std	Y+12, r26	; 0x0c
        zd = az - (ax >> 1);
    1806:	84 01       	movw	r16, r8
    1808:	08 1b       	sub	r16, r24
    180a:	19 0b       	sbc	r17, r25
    180c:	75 01       	movw	r14, r10
    180e:	5b 01       	movw	r10, r22
    1810:	6a 01       	movw	r12, r20
        for (;;)
        {
            led_point(x, y, z, on_off);
    1812:	8e 2d       	mov	r24, r14
    1814:	6a 2d       	mov	r22, r10
    1816:	4c 2d       	mov	r20, r12
    1818:	2b 85       	ldd	r18, Y+11	; 0x0b
    181a:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
            if (x == x2)
    181e:	ed 81       	ldd	r30, Y+5	; 0x05
    1820:	fe 81       	ldd	r31, Y+6	; 0x06
    1822:	ee 16       	cp	r14, r30
    1824:	ff 06       	cpc	r15, r31
    1826:	09 f4       	brne	.+2      	; 0x182a <led_line+0x130>
    1828:	9b c0       	rjmp	.+310    	; 0x1960 <led_line+0x266>
            {
                return;
            }

            if (yd >= 0)
    182a:	2c 85       	ldd	r18, Y+12	; 0x0c
    182c:	3d 85       	ldd	r19, Y+13	; 0x0d
    182e:	37 fd       	sbrc	r19, 7
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <led_line+0x148>
            {
                y += sy;
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	9a 81       	ldd	r25, Y+2	; 0x02
    1836:	a8 0e       	add	r10, r24
    1838:	b9 1e       	adc	r11, r25
                yd -= ax;
    183a:	24 19       	sub	r18, r4
    183c:	35 09       	sbc	r19, r5
    183e:	3d 87       	std	Y+13, r19	; 0x0d
    1840:	2c 87       	std	Y+12, r18	; 0x0c
            }

            if (zd >= 0)
    1842:	17 fd       	sbrc	r17, 7
    1844:	04 c0       	rjmp	.+8      	; 0x184e <led_line+0x154>
            {
                z += sz;
    1846:	c2 0c       	add	r12, r2
    1848:	d3 1c       	adc	r13, r3
                zd -= ax;
    184a:	04 19       	sub	r16, r4
    184c:	15 09       	sbc	r17, r5

/* take sign of a, either -1, 0, or 1 */
#define ZSGN(a) (((a)<0) ? -1 : (a)>0 ? 1 : 0)

void led_line(int x1, int y1, int z1, int x2, int y2, int z2, unsigned char on_off)
{
    184e:	ab 81       	ldd	r26, Y+3	; 0x03
    1850:	bc 81       	ldd	r27, Y+4	; 0x04
    1852:	ea 0e       	add	r14, r26
    1854:	fb 1e       	adc	r15, r27
                z += sz;
                zd -= ax;
            }

            x += sx;
            yd += ay;
    1856:	ec 85       	ldd	r30, Y+12	; 0x0c
    1858:	fd 85       	ldd	r31, Y+13	; 0x0d
    185a:	e6 0d       	add	r30, r6
    185c:	f7 1d       	adc	r31, r7
    185e:	fd 87       	std	Y+13, r31	; 0x0d
    1860:	ec 87       	std	Y+12, r30	; 0x0c
            zd += az;
    1862:	08 0d       	add	r16, r8
    1864:	19 1d       	adc	r17, r9
    1866:	d5 cf       	rjmp	.-86     	; 0x1812 <led_line+0x118>
        }
    }
    else if (ay >= MAX(ax, az))            /* y dominant */
    1868:	c4 01       	movw	r24, r8
    186a:	84 14       	cp	r8, r4
    186c:	95 04       	cpc	r9, r5
    186e:	0c f4       	brge	.+2      	; 0x1872 <led_line+0x178>
    1870:	c2 01       	movw	r24, r4
    1872:	68 16       	cp	r6, r24
    1874:	79 06       	cpc	r7, r25
    1876:	c4 f1       	brlt	.+112    	; 0x18e8 <led_line+0x1ee>
    {
        xd = ax - (ay >> 1);
    1878:	c3 01       	movw	r24, r6
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
    187e:	92 01       	movw	r18, r4
    1880:	28 1b       	sub	r18, r24
    1882:	39 0b       	sbc	r19, r25
    1884:	3d 87       	std	Y+13, r19	; 0x0d
    1886:	2c 87       	std	Y+12, r18	; 0x0c
        zd = az - (ay >> 1);
    1888:	74 01       	movw	r14, r8
    188a:	e8 1a       	sub	r14, r24
    188c:	f9 0a       	sbc	r15, r25
    188e:	8b 01       	movw	r16, r22
    1890:	6a 01       	movw	r12, r20
        for (;;)
        {
            led_point(x, y, z, on_off);
    1892:	8a 2d       	mov	r24, r10
    1894:	60 2f       	mov	r22, r16
    1896:	4c 2d       	mov	r20, r12
    1898:	2b 85       	ldd	r18, Y+11	; 0x0b
    189a:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
            if (y == y2)
    189e:	8f 81       	ldd	r24, Y+7	; 0x07
    18a0:	98 85       	ldd	r25, Y+8	; 0x08
    18a2:	08 17       	cp	r16, r24
    18a4:	19 07       	cpc	r17, r25
    18a6:	09 f4       	brne	.+2      	; 0x18aa <led_line+0x1b0>
    18a8:	5b c0       	rjmp	.+182    	; 0x1960 <led_line+0x266>
            {
                return;
            }

            if (xd >= 0)
    18aa:	ac 85       	ldd	r26, Y+12	; 0x0c
    18ac:	bd 85       	ldd	r27, Y+13	; 0x0d
    18ae:	b7 fd       	sbrc	r27, 7
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <led_line+0x1c8>
            {
                x += sx;
    18b2:	eb 81       	ldd	r30, Y+3	; 0x03
    18b4:	fc 81       	ldd	r31, Y+4	; 0x04
    18b6:	ae 0e       	add	r10, r30
    18b8:	bf 1e       	adc	r11, r31
                xd -= ay;
    18ba:	a6 19       	sub	r26, r6
    18bc:	b7 09       	sbc	r27, r7
    18be:	bd 87       	std	Y+13, r27	; 0x0d
    18c0:	ac 87       	std	Y+12, r26	; 0x0c
            }

            if (zd >= 0)
    18c2:	f7 fc       	sbrc	r15, 7
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <led_line+0x1d4>
            {
                z += sz;
    18c6:	c2 0c       	add	r12, r2
    18c8:	d3 1c       	adc	r13, r3
                zd -= ay;
    18ca:	e6 18       	sub	r14, r6
    18cc:	f7 08       	sbc	r15, r7

/* take sign of a, either -1, 0, or 1 */
#define ZSGN(a) (((a)<0) ? -1 : (a)>0 ? 1 : 0)

void led_line(int x1, int y1, int z1, int x2, int y2, int z2, unsigned char on_off)
{
    18ce:	29 81       	ldd	r18, Y+1	; 0x01
    18d0:	3a 81       	ldd	r19, Y+2	; 0x02
    18d2:	02 0f       	add	r16, r18
    18d4:	13 1f       	adc	r17, r19
                z += sz;
                zd -= ay;
            }

            y += sy;
            xd += ax;
    18d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    18da:	84 0d       	add	r24, r4
    18dc:	95 1d       	adc	r25, r5
    18de:	9d 87       	std	Y+13, r25	; 0x0d
    18e0:	8c 87       	std	Y+12, r24	; 0x0c
            zd += az;
    18e2:	e8 0c       	add	r14, r8
    18e4:	f9 1c       	adc	r15, r9
    18e6:	d5 cf       	rjmp	.-86     	; 0x1892 <led_line+0x198>
        }
    }
    else if (az >= MAX(ax, ay))            /* z dominant */
    18e8:	c3 01       	movw	r24, r6
    18ea:	64 14       	cp	r6, r4
    18ec:	75 04       	cpc	r7, r5
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <led_line+0x1f8>
    18f0:	c2 01       	movw	r24, r4
    18f2:	88 16       	cp	r8, r24
    18f4:	99 06       	cpc	r9, r25
    18f6:	a4 f1       	brlt	.+104    	; 0x1960 <led_line+0x266>
    {
        xd = ax - (az >> 1);
    18f8:	c4 01       	movw	r24, r8
    18fa:	95 95       	asr	r25
    18fc:	87 95       	ror	r24
    18fe:	72 01       	movw	r14, r4
    1900:	e8 1a       	sub	r14, r24
    1902:	f9 0a       	sbc	r15, r25
        yd = ay - (az >> 1);
    1904:	83 01       	movw	r16, r6
    1906:	08 1b       	sub	r16, r24
    1908:	19 0b       	sbc	r17, r25
    190a:	6b 01       	movw	r12, r22
    190c:	5d 87       	std	Y+13, r21	; 0x0d
    190e:	4c 87       	std	Y+12, r20	; 0x0c
        for (;;)
        {
            led_point(x, y, z, on_off);
    1910:	8a 2d       	mov	r24, r10
    1912:	6c 2d       	mov	r22, r12
    1914:	4c 85       	ldd	r20, Y+12	; 0x0c
    1916:	2b 85       	ldd	r18, Y+11	; 0x0b
    1918:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
            if (z == z2)
    191c:	ac 85       	ldd	r26, Y+12	; 0x0c
    191e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1920:	e9 85       	ldd	r30, Y+9	; 0x09
    1922:	fa 85       	ldd	r31, Y+10	; 0x0a
    1924:	ae 17       	cp	r26, r30
    1926:	bf 07       	cpc	r27, r31
    1928:	d9 f0       	breq	.+54     	; 0x1960 <led_line+0x266>
            {
                return;
            }

            if (xd >= 0)
    192a:	f7 fc       	sbrc	r15, 7
    192c:	06 c0       	rjmp	.+12     	; 0x193a <led_line+0x240>
            {
                x += sx;
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	a2 0e       	add	r10, r18
    1934:	b3 1e       	adc	r11, r19
                xd -= az;
    1936:	e8 18       	sub	r14, r8
    1938:	f9 08       	sbc	r15, r9
            }

            if (yd >= 0)
    193a:	17 fd       	sbrc	r17, 7
    193c:	06 c0       	rjmp	.+12     	; 0x194a <led_line+0x250>
            {
                y += sy;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	c8 0e       	add	r12, r24
    1944:	d9 1e       	adc	r13, r25
                yd -= az;
    1946:	08 19       	sub	r16, r8
    1948:	19 09       	sbc	r17, r9

/* take sign of a, either -1, 0, or 1 */
#define ZSGN(a) (((a)<0) ? -1 : (a)>0 ? 1 : 0)

void led_line(int x1, int y1, int z1, int x2, int y2, int z2, unsigned char on_off)
{
    194a:	ac 85       	ldd	r26, Y+12	; 0x0c
    194c:	bd 85       	ldd	r27, Y+13	; 0x0d
    194e:	a2 0d       	add	r26, r2
    1950:	b3 1d       	adc	r27, r3
    1952:	bd 87       	std	Y+13, r27	; 0x0d
    1954:	ac 87       	std	Y+12, r26	; 0x0c
                y += sy;
                yd -= az;
            }

            z += sz;
            xd += ax;
    1956:	e4 0c       	add	r14, r4
    1958:	f5 1c       	adc	r15, r5
            yd += ay;
    195a:	06 0d       	add	r16, r6
    195c:	17 1d       	adc	r17, r7
    195e:	d8 cf       	rjmp	.-80     	; 0x1910 <led_line+0x216>
        }
    }
}
    1960:	2d 96       	adiw	r28, 0x0d	; 13
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	3f 90       	pop	r3
    198e:	2f 90       	pop	r2
    1990:	08 95       	ret

00001992 <led_plane_y_left>:
}

//scroll a horizontal plane left
void led_plane_y_left(unsigned char y)
{
	y<<=3;
    1992:	88 0f       	add	r24, r24
    1994:	88 0f       	add	r24, r24
    1996:	88 0f       	add	r24, r24
	
	led_frame_bitmap[y++]<<=1;
    1998:	a7 e4       	ldi	r26, 0x47	; 71
    199a:	b2 e0       	ldi	r27, 0x02	; 2
    199c:	fd 01       	movw	r30, r26
    199e:	e8 0f       	add	r30, r24
    19a0:	f1 1d       	adc	r31, r1
    19a2:	90 81       	ld	r25, Z
    19a4:	99 0f       	add	r25, r25
    19a6:	90 83       	st	Z, r25
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19aa:	fd 01       	movw	r30, r26
    19ac:	e8 0f       	add	r30, r24
    19ae:	f1 1d       	adc	r31, r1
    19b0:	90 81       	ld	r25, Z
    19b2:	99 0f       	add	r25, r25
    19b4:	90 83       	st	Z, r25
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19b8:	fd 01       	movw	r30, r26
    19ba:	e8 0f       	add	r30, r24
    19bc:	f1 1d       	adc	r31, r1
    19be:	90 81       	ld	r25, Z
    19c0:	99 0f       	add	r25, r25
    19c2:	90 83       	st	Z, r25
    19c4:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19c6:	fd 01       	movw	r30, r26
    19c8:	e8 0f       	add	r30, r24
    19ca:	f1 1d       	adc	r31, r1
    19cc:	90 81       	ld	r25, Z
    19ce:	99 0f       	add	r25, r25
    19d0:	90 83       	st	Z, r25
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19d4:	fd 01       	movw	r30, r26
    19d6:	e8 0f       	add	r30, r24
    19d8:	f1 1d       	adc	r31, r1
    19da:	90 81       	ld	r25, Z
    19dc:	99 0f       	add	r25, r25
    19de:	90 83       	st	Z, r25
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19e2:	fd 01       	movw	r30, r26
    19e4:	e8 0f       	add	r30, r24
    19e6:	f1 1d       	adc	r31, r1
    19e8:	90 81       	ld	r25, Z
    19ea:	99 0f       	add	r25, r25
    19ec:	90 83       	st	Z, r25
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]<<=1;
    19f0:	fd 01       	movw	r30, r26
    19f2:	e8 0f       	add	r30, r24
    19f4:	f1 1d       	adc	r31, r1
    19f6:	90 81       	ld	r25, Z
    19f8:	99 0f       	add	r25, r25
    19fa:	90 83       	st	Z, r25
	led_frame_bitmap[y]<<=1;
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	a8 0f       	add	r26, r24
    1a00:	b1 1d       	adc	r27, r1
    1a02:	8c 91       	ld	r24, X
    1a04:	88 0f       	add	r24, r24
    1a06:	8c 93       	st	X, r24
}
    1a08:	08 95       	ret

00001a0a <led_plane_y_right>:

//scroll a horizontal plane right
void led_plane_y_right(unsigned char y)
{
	y<<=3;
    1a0a:	88 0f       	add	r24, r24
    1a0c:	88 0f       	add	r24, r24
    1a0e:	88 0f       	add	r24, r24
	
	led_frame_bitmap[y++]>>=1;
    1a10:	a7 e4       	ldi	r26, 0x47	; 71
    1a12:	b2 e0       	ldi	r27, 0x02	; 2
    1a14:	fd 01       	movw	r30, r26
    1a16:	e8 0f       	add	r30, r24
    1a18:	f1 1d       	adc	r31, r1
    1a1a:	90 81       	ld	r25, Z
    1a1c:	96 95       	lsr	r25
    1a1e:	90 83       	st	Z, r25
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a22:	fd 01       	movw	r30, r26
    1a24:	e8 0f       	add	r30, r24
    1a26:	f1 1d       	adc	r31, r1
    1a28:	90 81       	ld	r25, Z
    1a2a:	96 95       	lsr	r25
    1a2c:	90 83       	st	Z, r25
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a30:	fd 01       	movw	r30, r26
    1a32:	e8 0f       	add	r30, r24
    1a34:	f1 1d       	adc	r31, r1
    1a36:	90 81       	ld	r25, Z
    1a38:	96 95       	lsr	r25
    1a3a:	90 83       	st	Z, r25
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a3e:	fd 01       	movw	r30, r26
    1a40:	e8 0f       	add	r30, r24
    1a42:	f1 1d       	adc	r31, r1
    1a44:	90 81       	ld	r25, Z
    1a46:	96 95       	lsr	r25
    1a48:	90 83       	st	Z, r25
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a4c:	fd 01       	movw	r30, r26
    1a4e:	e8 0f       	add	r30, r24
    1a50:	f1 1d       	adc	r31, r1
    1a52:	90 81       	ld	r25, Z
    1a54:	96 95       	lsr	r25
    1a56:	90 83       	st	Z, r25
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a5a:	fd 01       	movw	r30, r26
    1a5c:	e8 0f       	add	r30, r24
    1a5e:	f1 1d       	adc	r31, r1
    1a60:	90 81       	ld	r25, Z
    1a62:	96 95       	lsr	r25
    1a64:	90 83       	st	Z, r25
    1a66:	8f 5f       	subi	r24, 0xFF	; 255
	led_frame_bitmap[y++]>>=1;
    1a68:	fd 01       	movw	r30, r26
    1a6a:	e8 0f       	add	r30, r24
    1a6c:	f1 1d       	adc	r31, r1
    1a6e:	90 81       	ld	r25, Z
    1a70:	96 95       	lsr	r25
    1a72:	90 83       	st	Z, r25
	led_frame_bitmap[y]>>=1;
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	a8 0f       	add	r26, r24
    1a78:	b1 1d       	adc	r27, r1
    1a7a:	8c 91       	ld	r24, X
    1a7c:	86 95       	lsr	r24
    1a7e:	8c 93       	st	X, r24
}
    1a80:	08 95       	ret

00001a82 <led_plane_z_down>:

//scroll a verticle plane running in the x direction down
void led_plane_z_down(unsigned char z)
{
	unsigned char *a, *b;
	a = &led_frame_bitmap[z+56];
    1a82:	e8 2f       	mov	r30, r24
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	f8 96       	adiw	r30, 0x38	; 56
    1a88:	87 e4       	ldi	r24, 0x47	; 71
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	ae 0f       	add	r26, r30
    1a90:	bf 1f       	adc	r27, r31
	b = &led_frame_bitmap[z+48];
    1a92:	38 97       	sbiw	r30, 0x08	; 8
    1a94:	e8 0f       	add	r30, r24
    1a96:	f9 1f       	adc	r31, r25
	
	*a=*b;	//7=6
    1a98:	80 81       	ld	r24, Z
    1a9a:	8c 93       	st	X, r24
	a-=16;
    1a9c:	50 97       	sbiw	r26, 0x10	; 16
	*b=*a;	//6=5
    1a9e:	8c 91       	ld	r24, X
    1aa0:	80 83       	st	Z, r24
	b-=16;
    1aa2:	70 97       	sbiw	r30, 0x10	; 16
	*a=*b;	//5=4
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8c 93       	st	X, r24
	a-=16;
    1aa8:	50 97       	sbiw	r26, 0x10	; 16
	*b=*a;	//4=3
    1aaa:	8c 91       	ld	r24, X
    1aac:	80 83       	st	Z, r24
	b-=16;
    1aae:	70 97       	sbiw	r30, 0x10	; 16
	*a=*b;	//3=2
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8c 93       	st	X, r24
	a-=16;
    1ab4:	50 97       	sbiw	r26, 0x10	; 16
	*b=*a;	//2=1
    1ab6:	8c 91       	ld	r24, X
    1ab8:	80 83       	st	Z, r24
	b-=16;
    1aba:	70 97       	sbiw	r30, 0x10	; 16
	*a=*b;	//1=0
    1abc:	80 81       	ld	r24, Z
    1abe:	8c 93       	st	X, r24
	*b=0;	//0=blank
    1ac0:	10 82       	st	Z, r1
}
    1ac2:	08 95       	ret

00001ac4 <led_plane_z_up>:


//scroll a verticle plane running in the x direction up
void led_plane_z_up(unsigned char z)
{
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
	unsigned char *a, *b;
	a = &led_frame_bitmap[z];
    1ac8:	e8 2f       	mov	r30, r24
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	87 e4       	ldi	r24, 0x47	; 71
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	ae 0f       	add	r26, r30
    1ad4:	bf 1f       	adc	r27, r31
	b = &led_frame_bitmap[z+8];
    1ad6:	38 96       	adiw	r30, 0x08	; 8
    1ad8:	e8 0f       	add	r30, r24
    1ada:	f9 1f       	adc	r31, r25
	
	*a=*b;	//0=1
    1adc:	80 81       	ld	r24, Z
    1ade:	8c 93       	st	X, r24
	a+=16;
    1ae0:	ad 01       	movw	r20, r26
    1ae2:	40 5f       	subi	r20, 0xF0	; 240
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
	*b=*a;	//1=2
    1ae6:	50 96       	adiw	r26, 0x10	; 16
    1ae8:	8c 91       	ld	r24, X
    1aea:	50 97       	sbiw	r26, 0x10	; 16
    1aec:	80 83       	st	Z, r24
	b+=16;
    1aee:	9f 01       	movw	r18, r30
    1af0:	20 5f       	subi	r18, 0xF0	; 240
    1af2:	3f 4f       	sbci	r19, 0xFF	; 255
	*a=*b;	//2=3
    1af4:	80 89       	ldd	r24, Z+16	; 0x10
    1af6:	50 96       	adiw	r26, 0x10	; 16
    1af8:	8c 93       	st	X, r24
	a+=16;
    1afa:	da 01       	movw	r26, r20
    1afc:	50 96       	adiw	r26, 0x10	; 16
	*b=*a;	//3=4
    1afe:	ea 01       	movw	r28, r20
    1b00:	88 89       	ldd	r24, Y+16	; 0x10
    1b02:	80 8b       	std	Z+16, r24	; 0x10
	b+=16;
    1b04:	f9 01       	movw	r30, r18
    1b06:	70 96       	adiw	r30, 0x10	; 16
	*a=*b;	//4=5
    1b08:	e9 01       	movw	r28, r18
    1b0a:	88 89       	ldd	r24, Y+16	; 0x10
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
	a+=16;
	*b=*a;	//5=6
    1b10:	50 96       	adiw	r26, 0x10	; 16
    1b12:	8c 91       	ld	r24, X
    1b14:	50 97       	sbiw	r26, 0x10	; 16
    1b16:	e9 01       	movw	r28, r18
    1b18:	88 8b       	std	Y+16, r24	; 0x10
	b+=16;
	*a=*b;	//6=7
    1b1a:	80 89       	ldd	r24, Z+16	; 0x10
    1b1c:	50 96       	adiw	r26, 0x10	; 16
    1b1e:	8c 93       	st	X, r24
	*b=0;	//7=blank
    1b20:	10 8a       	std	Z+16, r1	; 0x10
}
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <led_plane_x_back>:
void led_plane_x_back(unsigned char x)
{
	unsigned char bit_on;
	unsigned char bit_off;
	
	bit_on = 0x80>>x;
    1b28:	20 e8       	ldi	r18, 0x80	; 128
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <led_plane_x_back+0xa>
    1b2e:	35 95       	asr	r19
    1b30:	27 95       	ror	r18
    1b32:	8a 95       	dec	r24
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <led_plane_x_back+0x6>
	bit_off = ~bit_on;
    1b36:	92 2f       	mov	r25, r18
    1b38:	90 95       	com	r25

	//shift back 1

	led_frame_bitmap[7] &=bit_off;
    1b3a:	30 91 4e 02 	lds	r19, 0x024E
    1b3e:	39 23       	and	r19, r25
    1b40:	30 93 4e 02 	sts	0x024E, r19
	led_frame_bitmap[15] &=bit_off;
    1b44:	80 91 56 02 	lds	r24, 0x0256
    1b48:	89 23       	and	r24, r25
    1b4a:	80 93 56 02 	sts	0x0256, r24
	led_frame_bitmap[23] &=bit_off;
    1b4e:	80 91 5e 02 	lds	r24, 0x025E
    1b52:	89 23       	and	r24, r25
    1b54:	80 93 5e 02 	sts	0x025E, r24
	led_frame_bitmap[31] &=bit_off;
    1b58:	80 91 66 02 	lds	r24, 0x0266
    1b5c:	89 23       	and	r24, r25
    1b5e:	80 93 66 02 	sts	0x0266, r24
	led_frame_bitmap[39] &=bit_off;
    1b62:	80 91 6e 02 	lds	r24, 0x026E
    1b66:	89 23       	and	r24, r25
    1b68:	80 93 6e 02 	sts	0x026E, r24
	led_frame_bitmap[47] &=bit_off;
    1b6c:	80 91 76 02 	lds	r24, 0x0276
    1b70:	89 23       	and	r24, r25
    1b72:	80 93 76 02 	sts	0x0276, r24
	led_frame_bitmap[55] &=bit_off;
    1b76:	80 91 7e 02 	lds	r24, 0x027E
    1b7a:	89 23       	and	r24, r25
    1b7c:	80 93 7e 02 	sts	0x027E, r24
	led_frame_bitmap[63] &=bit_off;
    1b80:	80 91 86 02 	lds	r24, 0x0286
    1b84:	89 23       	and	r24, r25
    1b86:	80 93 86 02 	sts	0x0286, r24

	if(led_frame_bitmap[6] & bit_on)
    1b8a:	80 91 4d 02 	lds	r24, 0x024D
    1b8e:	82 23       	and	r24, r18
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <led_plane_x_back+0x70>
		led_frame_bitmap[7] |=bit_on;
    1b92:	32 2b       	or	r19, r18
    1b94:	30 93 4e 02 	sts	0x024E, r19
	if(led_frame_bitmap[14] & bit_on)
    1b98:	80 91 55 02 	lds	r24, 0x0255
    1b9c:	82 23       	and	r24, r18
    1b9e:	29 f0       	breq	.+10     	; 0x1baa <led_plane_x_back+0x82>
		led_frame_bitmap[15] |=bit_on;
    1ba0:	80 91 56 02 	lds	r24, 0x0256
    1ba4:	82 2b       	or	r24, r18
    1ba6:	80 93 56 02 	sts	0x0256, r24
	if(led_frame_bitmap[22] & bit_on)
    1baa:	80 91 5d 02 	lds	r24, 0x025D
    1bae:	82 23       	and	r24, r18
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <led_plane_x_back+0x94>
		led_frame_bitmap[23] |=bit_on;
    1bb2:	80 91 5e 02 	lds	r24, 0x025E
    1bb6:	82 2b       	or	r24, r18
    1bb8:	80 93 5e 02 	sts	0x025E, r24
	if(led_frame_bitmap[30] & bit_on)
    1bbc:	80 91 65 02 	lds	r24, 0x0265
    1bc0:	82 23       	and	r24, r18
    1bc2:	29 f0       	breq	.+10     	; 0x1bce <led_plane_x_back+0xa6>
		led_frame_bitmap[31] |=bit_on;
    1bc4:	80 91 66 02 	lds	r24, 0x0266
    1bc8:	82 2b       	or	r24, r18
    1bca:	80 93 66 02 	sts	0x0266, r24
	if(led_frame_bitmap[38] & bit_on)
    1bce:	80 91 6d 02 	lds	r24, 0x026D
    1bd2:	82 23       	and	r24, r18
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <led_plane_x_back+0xb8>
		led_frame_bitmap[39] |=bit_on;
    1bd6:	80 91 6e 02 	lds	r24, 0x026E
    1bda:	82 2b       	or	r24, r18
    1bdc:	80 93 6e 02 	sts	0x026E, r24
	if(led_frame_bitmap[46] & bit_on)
    1be0:	80 91 75 02 	lds	r24, 0x0275
    1be4:	82 23       	and	r24, r18
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <led_plane_x_back+0xca>
		led_frame_bitmap[47] |=bit_on;
    1be8:	80 91 76 02 	lds	r24, 0x0276
    1bec:	82 2b       	or	r24, r18
    1bee:	80 93 76 02 	sts	0x0276, r24
	if(led_frame_bitmap[54] & bit_on)
    1bf2:	80 91 7d 02 	lds	r24, 0x027D
    1bf6:	82 23       	and	r24, r18
    1bf8:	29 f0       	breq	.+10     	; 0x1c04 <led_plane_x_back+0xdc>
		led_frame_bitmap[55] |=bit_on;
    1bfa:	80 91 7e 02 	lds	r24, 0x027E
    1bfe:	82 2b       	or	r24, r18
    1c00:	80 93 7e 02 	sts	0x027E, r24
	if(led_frame_bitmap[62] & bit_on)
    1c04:	80 91 85 02 	lds	r24, 0x0285
    1c08:	82 23       	and	r24, r18
    1c0a:	29 f0       	breq	.+10     	; 0x1c16 <led_plane_x_back+0xee>
		led_frame_bitmap[63] |=bit_on;
    1c0c:	80 91 86 02 	lds	r24, 0x0286
    1c10:	82 2b       	or	r24, r18
    1c12:	80 93 86 02 	sts	0x0286, r24

	led_frame_bitmap[6] &=bit_off;
    1c16:	30 91 4d 02 	lds	r19, 0x024D
    1c1a:	39 23       	and	r19, r25
    1c1c:	30 93 4d 02 	sts	0x024D, r19
	led_frame_bitmap[14] &=bit_off;
    1c20:	80 91 55 02 	lds	r24, 0x0255
    1c24:	89 23       	and	r24, r25
    1c26:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[22] &=bit_off;
    1c2a:	80 91 5d 02 	lds	r24, 0x025D
    1c2e:	89 23       	and	r24, r25
    1c30:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[30] &=bit_off;
    1c34:	80 91 65 02 	lds	r24, 0x0265
    1c38:	89 23       	and	r24, r25
    1c3a:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[38] &=bit_off;
    1c3e:	80 91 6d 02 	lds	r24, 0x026D
    1c42:	89 23       	and	r24, r25
    1c44:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[46] &=bit_off;
    1c48:	80 91 75 02 	lds	r24, 0x0275
    1c4c:	89 23       	and	r24, r25
    1c4e:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[54] &=bit_off;
    1c52:	80 91 7d 02 	lds	r24, 0x027D
    1c56:	89 23       	and	r24, r25
    1c58:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[62] &=bit_off;
    1c5c:	80 91 85 02 	lds	r24, 0x0285
    1c60:	89 23       	and	r24, r25
    1c62:	80 93 85 02 	sts	0x0285, r24

	if(led_frame_bitmap[5] & bit_on)
    1c66:	80 91 4c 02 	lds	r24, 0x024C
    1c6a:	82 23       	and	r24, r18
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <led_plane_x_back+0x14c>
		led_frame_bitmap[6] |= bit_on;
    1c6e:	32 2b       	or	r19, r18
    1c70:	30 93 4d 02 	sts	0x024D, r19
	if(led_frame_bitmap[13] & bit_on)
    1c74:	80 91 54 02 	lds	r24, 0x0254
    1c78:	82 23       	and	r24, r18
    1c7a:	29 f0       	breq	.+10     	; 0x1c86 <led_plane_x_back+0x15e>
		led_frame_bitmap[14] |= bit_on;
    1c7c:	80 91 55 02 	lds	r24, 0x0255
    1c80:	82 2b       	or	r24, r18
    1c82:	80 93 55 02 	sts	0x0255, r24
	if(led_frame_bitmap[21] & bit_on)
    1c86:	80 91 5c 02 	lds	r24, 0x025C
    1c8a:	82 23       	and	r24, r18
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <led_plane_x_back+0x170>
		led_frame_bitmap[22] |= bit_on;
    1c8e:	80 91 5d 02 	lds	r24, 0x025D
    1c92:	82 2b       	or	r24, r18
    1c94:	80 93 5d 02 	sts	0x025D, r24
	if(led_frame_bitmap[29] & bit_on)
    1c98:	80 91 64 02 	lds	r24, 0x0264
    1c9c:	82 23       	and	r24, r18
    1c9e:	29 f0       	breq	.+10     	; 0x1caa <led_plane_x_back+0x182>
		led_frame_bitmap[30] |= bit_on;
    1ca0:	80 91 65 02 	lds	r24, 0x0265
    1ca4:	82 2b       	or	r24, r18
    1ca6:	80 93 65 02 	sts	0x0265, r24
	if(led_frame_bitmap[37] & bit_on)
    1caa:	80 91 6c 02 	lds	r24, 0x026C
    1cae:	82 23       	and	r24, r18
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <led_plane_x_back+0x194>
		led_frame_bitmap[38] |= bit_on;
    1cb2:	80 91 6d 02 	lds	r24, 0x026D
    1cb6:	82 2b       	or	r24, r18
    1cb8:	80 93 6d 02 	sts	0x026D, r24
	if(led_frame_bitmap[45] & bit_on)
    1cbc:	80 91 74 02 	lds	r24, 0x0274
    1cc0:	82 23       	and	r24, r18
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <led_plane_x_back+0x1a6>
		led_frame_bitmap[46] |= bit_on;
    1cc4:	80 91 75 02 	lds	r24, 0x0275
    1cc8:	82 2b       	or	r24, r18
    1cca:	80 93 75 02 	sts	0x0275, r24
	if(led_frame_bitmap[53] & bit_on)
    1cce:	80 91 7c 02 	lds	r24, 0x027C
    1cd2:	82 23       	and	r24, r18
    1cd4:	29 f0       	breq	.+10     	; 0x1ce0 <led_plane_x_back+0x1b8>
		led_frame_bitmap[54] |= bit_on;
    1cd6:	80 91 7d 02 	lds	r24, 0x027D
    1cda:	82 2b       	or	r24, r18
    1cdc:	80 93 7d 02 	sts	0x027D, r24
	if(led_frame_bitmap[61] & bit_on)
    1ce0:	80 91 84 02 	lds	r24, 0x0284
    1ce4:	82 23       	and	r24, r18
    1ce6:	29 f0       	breq	.+10     	; 0x1cf2 <led_plane_x_back+0x1ca>
		led_frame_bitmap[62] |= bit_on;
    1ce8:	80 91 85 02 	lds	r24, 0x0285
    1cec:	82 2b       	or	r24, r18
    1cee:	80 93 85 02 	sts	0x0285, r24

	led_frame_bitmap[5] &=bit_off;
    1cf2:	30 91 4c 02 	lds	r19, 0x024C
    1cf6:	39 23       	and	r19, r25
    1cf8:	30 93 4c 02 	sts	0x024C, r19
	led_frame_bitmap[13] &=bit_off;
    1cfc:	80 91 54 02 	lds	r24, 0x0254
    1d00:	89 23       	and	r24, r25
    1d02:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[21] &=bit_off;
    1d06:	80 91 5c 02 	lds	r24, 0x025C
    1d0a:	89 23       	and	r24, r25
    1d0c:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[29] &=bit_off;
    1d10:	80 91 64 02 	lds	r24, 0x0264
    1d14:	89 23       	and	r24, r25
    1d16:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[37] &=bit_off;
    1d1a:	80 91 6c 02 	lds	r24, 0x026C
    1d1e:	89 23       	and	r24, r25
    1d20:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[45] &=bit_off;
    1d24:	80 91 74 02 	lds	r24, 0x0274
    1d28:	89 23       	and	r24, r25
    1d2a:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[53] &=bit_off;
    1d2e:	80 91 7c 02 	lds	r24, 0x027C
    1d32:	89 23       	and	r24, r25
    1d34:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[61] &=bit_off;
    1d38:	80 91 84 02 	lds	r24, 0x0284
    1d3c:	89 23       	and	r24, r25
    1d3e:	80 93 84 02 	sts	0x0284, r24

	if(led_frame_bitmap[4] & bit_on)
    1d42:	80 91 4b 02 	lds	r24, 0x024B
    1d46:	82 23       	and	r24, r18
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <led_plane_x_back+0x228>
		led_frame_bitmap[5] |= bit_on;
    1d4a:	32 2b       	or	r19, r18
    1d4c:	30 93 4c 02 	sts	0x024C, r19
	if(led_frame_bitmap[12] & bit_on)
    1d50:	80 91 53 02 	lds	r24, 0x0253
    1d54:	82 23       	and	r24, r18
    1d56:	29 f0       	breq	.+10     	; 0x1d62 <led_plane_x_back+0x23a>
		led_frame_bitmap[13] |= bit_on;
    1d58:	80 91 54 02 	lds	r24, 0x0254
    1d5c:	82 2b       	or	r24, r18
    1d5e:	80 93 54 02 	sts	0x0254, r24
	if(led_frame_bitmap[20] & bit_on)
    1d62:	80 91 5b 02 	lds	r24, 0x025B
    1d66:	82 23       	and	r24, r18
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <led_plane_x_back+0x24c>
		led_frame_bitmap[21] |= bit_on;
    1d6a:	80 91 5c 02 	lds	r24, 0x025C
    1d6e:	82 2b       	or	r24, r18
    1d70:	80 93 5c 02 	sts	0x025C, r24
	if(led_frame_bitmap[28] & bit_on)
    1d74:	80 91 63 02 	lds	r24, 0x0263
    1d78:	82 23       	and	r24, r18
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <led_plane_x_back+0x25e>
		led_frame_bitmap[29] |= bit_on;
    1d7c:	80 91 64 02 	lds	r24, 0x0264
    1d80:	82 2b       	or	r24, r18
    1d82:	80 93 64 02 	sts	0x0264, r24
	if(led_frame_bitmap[36] & bit_on)
    1d86:	80 91 6b 02 	lds	r24, 0x026B
    1d8a:	82 23       	and	r24, r18
    1d8c:	29 f0       	breq	.+10     	; 0x1d98 <led_plane_x_back+0x270>
		led_frame_bitmap[37] |= bit_on;
    1d8e:	80 91 6c 02 	lds	r24, 0x026C
    1d92:	82 2b       	or	r24, r18
    1d94:	80 93 6c 02 	sts	0x026C, r24
	if(led_frame_bitmap[44] & bit_on)
    1d98:	80 91 73 02 	lds	r24, 0x0273
    1d9c:	82 23       	and	r24, r18
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <led_plane_x_back+0x282>
		led_frame_bitmap[45] |= bit_on;
    1da0:	80 91 74 02 	lds	r24, 0x0274
    1da4:	82 2b       	or	r24, r18
    1da6:	80 93 74 02 	sts	0x0274, r24
	if(led_frame_bitmap[52] & bit_on)
    1daa:	80 91 7b 02 	lds	r24, 0x027B
    1dae:	82 23       	and	r24, r18
    1db0:	29 f0       	breq	.+10     	; 0x1dbc <led_plane_x_back+0x294>
		led_frame_bitmap[53] |= bit_on;
    1db2:	80 91 7c 02 	lds	r24, 0x027C
    1db6:	82 2b       	or	r24, r18
    1db8:	80 93 7c 02 	sts	0x027C, r24
	if(led_frame_bitmap[60] & bit_on)
    1dbc:	80 91 83 02 	lds	r24, 0x0283
    1dc0:	82 23       	and	r24, r18
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <led_plane_x_back+0x2a6>
		led_frame_bitmap[61] |= bit_on;
    1dc4:	80 91 84 02 	lds	r24, 0x0284
    1dc8:	82 2b       	or	r24, r18
    1dca:	80 93 84 02 	sts	0x0284, r24

	led_frame_bitmap[4] &=bit_off;
    1dce:	30 91 4b 02 	lds	r19, 0x024B
    1dd2:	39 23       	and	r19, r25
    1dd4:	30 93 4b 02 	sts	0x024B, r19
	led_frame_bitmap[12] &=bit_off;
    1dd8:	80 91 53 02 	lds	r24, 0x0253
    1ddc:	89 23       	and	r24, r25
    1dde:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[20] &=bit_off;
    1de2:	80 91 5b 02 	lds	r24, 0x025B
    1de6:	89 23       	and	r24, r25
    1de8:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[28] &=bit_off;
    1dec:	80 91 63 02 	lds	r24, 0x0263
    1df0:	89 23       	and	r24, r25
    1df2:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[36] &=bit_off;
    1df6:	80 91 6b 02 	lds	r24, 0x026B
    1dfa:	89 23       	and	r24, r25
    1dfc:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[44] &=bit_off;
    1e00:	80 91 73 02 	lds	r24, 0x0273
    1e04:	89 23       	and	r24, r25
    1e06:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[52] &=bit_off;
    1e0a:	80 91 7b 02 	lds	r24, 0x027B
    1e0e:	89 23       	and	r24, r25
    1e10:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[60] &=bit_off;
    1e14:	80 91 83 02 	lds	r24, 0x0283
    1e18:	89 23       	and	r24, r25
    1e1a:	80 93 83 02 	sts	0x0283, r24

	if(led_frame_bitmap[3] & bit_on)
    1e1e:	80 91 4a 02 	lds	r24, 0x024A
    1e22:	82 23       	and	r24, r18
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <led_plane_x_back+0x304>
		led_frame_bitmap[4] |= bit_on;
    1e26:	32 2b       	or	r19, r18
    1e28:	30 93 4b 02 	sts	0x024B, r19
	if(led_frame_bitmap[11] & bit_on)
    1e2c:	80 91 52 02 	lds	r24, 0x0252
    1e30:	82 23       	and	r24, r18
    1e32:	29 f0       	breq	.+10     	; 0x1e3e <led_plane_x_back+0x316>
		led_frame_bitmap[12] |= bit_on;
    1e34:	80 91 53 02 	lds	r24, 0x0253
    1e38:	82 2b       	or	r24, r18
    1e3a:	80 93 53 02 	sts	0x0253, r24
	if(led_frame_bitmap[19] & bit_on)
    1e3e:	80 91 5a 02 	lds	r24, 0x025A
    1e42:	82 23       	and	r24, r18
    1e44:	29 f0       	breq	.+10     	; 0x1e50 <led_plane_x_back+0x328>
		led_frame_bitmap[20] |= bit_on;
    1e46:	80 91 5b 02 	lds	r24, 0x025B
    1e4a:	82 2b       	or	r24, r18
    1e4c:	80 93 5b 02 	sts	0x025B, r24
	if(led_frame_bitmap[27] & bit_on)
    1e50:	80 91 62 02 	lds	r24, 0x0262
    1e54:	82 23       	and	r24, r18
    1e56:	29 f0       	breq	.+10     	; 0x1e62 <led_plane_x_back+0x33a>
		led_frame_bitmap[28] |= bit_on;
    1e58:	80 91 63 02 	lds	r24, 0x0263
    1e5c:	82 2b       	or	r24, r18
    1e5e:	80 93 63 02 	sts	0x0263, r24
	if(led_frame_bitmap[35] & bit_on)
    1e62:	80 91 6a 02 	lds	r24, 0x026A
    1e66:	82 23       	and	r24, r18
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <led_plane_x_back+0x34c>
		led_frame_bitmap[36] |= bit_on;
    1e6a:	80 91 6b 02 	lds	r24, 0x026B
    1e6e:	82 2b       	or	r24, r18
    1e70:	80 93 6b 02 	sts	0x026B, r24
	if(led_frame_bitmap[43] & bit_on)
    1e74:	80 91 72 02 	lds	r24, 0x0272
    1e78:	82 23       	and	r24, r18
    1e7a:	29 f0       	breq	.+10     	; 0x1e86 <led_plane_x_back+0x35e>
		led_frame_bitmap[44] |= bit_on;
    1e7c:	80 91 73 02 	lds	r24, 0x0273
    1e80:	82 2b       	or	r24, r18
    1e82:	80 93 73 02 	sts	0x0273, r24
	if(led_frame_bitmap[51] & bit_on)
    1e86:	80 91 7a 02 	lds	r24, 0x027A
    1e8a:	82 23       	and	r24, r18
    1e8c:	29 f0       	breq	.+10     	; 0x1e98 <led_plane_x_back+0x370>
		led_frame_bitmap[52] |= bit_on;
    1e8e:	80 91 7b 02 	lds	r24, 0x027B
    1e92:	82 2b       	or	r24, r18
    1e94:	80 93 7b 02 	sts	0x027B, r24
	if(led_frame_bitmap[59] & bit_on)
    1e98:	80 91 82 02 	lds	r24, 0x0282
    1e9c:	82 23       	and	r24, r18
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <led_plane_x_back+0x382>
		led_frame_bitmap[60] |= bit_on;
    1ea0:	80 91 83 02 	lds	r24, 0x0283
    1ea4:	82 2b       	or	r24, r18
    1ea6:	80 93 83 02 	sts	0x0283, r24

	led_frame_bitmap[3] &=bit_off;
    1eaa:	30 91 4a 02 	lds	r19, 0x024A
    1eae:	39 23       	and	r19, r25
    1eb0:	30 93 4a 02 	sts	0x024A, r19
	led_frame_bitmap[11] &=bit_off;
    1eb4:	80 91 52 02 	lds	r24, 0x0252
    1eb8:	89 23       	and	r24, r25
    1eba:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[19] &=bit_off;
    1ebe:	80 91 5a 02 	lds	r24, 0x025A
    1ec2:	89 23       	and	r24, r25
    1ec4:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[27] &=bit_off;
    1ec8:	80 91 62 02 	lds	r24, 0x0262
    1ecc:	89 23       	and	r24, r25
    1ece:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[35] &=bit_off;
    1ed2:	80 91 6a 02 	lds	r24, 0x026A
    1ed6:	89 23       	and	r24, r25
    1ed8:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[43] &=bit_off;
    1edc:	80 91 72 02 	lds	r24, 0x0272
    1ee0:	89 23       	and	r24, r25
    1ee2:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[51] &=bit_off;
    1ee6:	80 91 7a 02 	lds	r24, 0x027A
    1eea:	89 23       	and	r24, r25
    1eec:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[59] &=bit_off;
    1ef0:	80 91 82 02 	lds	r24, 0x0282
    1ef4:	89 23       	and	r24, r25
    1ef6:	80 93 82 02 	sts	0x0282, r24

	if(led_frame_bitmap[2] & bit_on)
    1efa:	80 91 49 02 	lds	r24, 0x0249
    1efe:	82 23       	and	r24, r18
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <led_plane_x_back+0x3e0>
		led_frame_bitmap[3] |= bit_on;
    1f02:	32 2b       	or	r19, r18
    1f04:	30 93 4a 02 	sts	0x024A, r19
	if(led_frame_bitmap[10] & bit_on)
    1f08:	80 91 51 02 	lds	r24, 0x0251
    1f0c:	82 23       	and	r24, r18
    1f0e:	29 f0       	breq	.+10     	; 0x1f1a <led_plane_x_back+0x3f2>
		led_frame_bitmap[11] |= bit_on;
    1f10:	80 91 52 02 	lds	r24, 0x0252
    1f14:	82 2b       	or	r24, r18
    1f16:	80 93 52 02 	sts	0x0252, r24
	if(led_frame_bitmap[18] & bit_on)
    1f1a:	80 91 59 02 	lds	r24, 0x0259
    1f1e:	82 23       	and	r24, r18
    1f20:	29 f0       	breq	.+10     	; 0x1f2c <led_plane_x_back+0x404>
		led_frame_bitmap[19] |= bit_on;
    1f22:	80 91 5a 02 	lds	r24, 0x025A
    1f26:	82 2b       	or	r24, r18
    1f28:	80 93 5a 02 	sts	0x025A, r24
	if(led_frame_bitmap[26] & bit_on)
    1f2c:	80 91 61 02 	lds	r24, 0x0261
    1f30:	82 23       	and	r24, r18
    1f32:	29 f0       	breq	.+10     	; 0x1f3e <led_plane_x_back+0x416>
		led_frame_bitmap[27] |= bit_on;
    1f34:	80 91 62 02 	lds	r24, 0x0262
    1f38:	82 2b       	or	r24, r18
    1f3a:	80 93 62 02 	sts	0x0262, r24
	if(led_frame_bitmap[34] & bit_on)
    1f3e:	80 91 69 02 	lds	r24, 0x0269
    1f42:	82 23       	and	r24, r18
    1f44:	29 f0       	breq	.+10     	; 0x1f50 <led_plane_x_back+0x428>
		led_frame_bitmap[35] |= bit_on;
    1f46:	80 91 6a 02 	lds	r24, 0x026A
    1f4a:	82 2b       	or	r24, r18
    1f4c:	80 93 6a 02 	sts	0x026A, r24
	if(led_frame_bitmap[42] & bit_on)
    1f50:	80 91 71 02 	lds	r24, 0x0271
    1f54:	82 23       	and	r24, r18
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <led_plane_x_back+0x43a>
		led_frame_bitmap[43] |= bit_on;
    1f58:	80 91 72 02 	lds	r24, 0x0272
    1f5c:	82 2b       	or	r24, r18
    1f5e:	80 93 72 02 	sts	0x0272, r24
	if(led_frame_bitmap[50] & bit_on)
    1f62:	80 91 79 02 	lds	r24, 0x0279
    1f66:	82 23       	and	r24, r18
    1f68:	29 f0       	breq	.+10     	; 0x1f74 <led_plane_x_back+0x44c>
		led_frame_bitmap[51] |= bit_on;
    1f6a:	80 91 7a 02 	lds	r24, 0x027A
    1f6e:	82 2b       	or	r24, r18
    1f70:	80 93 7a 02 	sts	0x027A, r24
	if(led_frame_bitmap[58] & bit_on)
    1f74:	80 91 81 02 	lds	r24, 0x0281
    1f78:	82 23       	and	r24, r18
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <led_plane_x_back+0x45e>
		led_frame_bitmap[59] |= bit_on;
    1f7c:	80 91 82 02 	lds	r24, 0x0282
    1f80:	82 2b       	or	r24, r18
    1f82:	80 93 82 02 	sts	0x0282, r24

	led_frame_bitmap[2] &=bit_off;
    1f86:	30 91 49 02 	lds	r19, 0x0249
    1f8a:	39 23       	and	r19, r25
    1f8c:	30 93 49 02 	sts	0x0249, r19
	led_frame_bitmap[10] &=bit_off;
    1f90:	80 91 51 02 	lds	r24, 0x0251
    1f94:	89 23       	and	r24, r25
    1f96:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[18] &=bit_off;
    1f9a:	80 91 59 02 	lds	r24, 0x0259
    1f9e:	89 23       	and	r24, r25
    1fa0:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[26] &=bit_off;
    1fa4:	80 91 61 02 	lds	r24, 0x0261
    1fa8:	89 23       	and	r24, r25
    1faa:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[34] &=bit_off;
    1fae:	80 91 69 02 	lds	r24, 0x0269
    1fb2:	89 23       	and	r24, r25
    1fb4:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[42] &=bit_off;
    1fb8:	80 91 71 02 	lds	r24, 0x0271
    1fbc:	89 23       	and	r24, r25
    1fbe:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[50] &=bit_off;
    1fc2:	80 91 79 02 	lds	r24, 0x0279
    1fc6:	89 23       	and	r24, r25
    1fc8:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[58] &=bit_off;
    1fcc:	80 91 81 02 	lds	r24, 0x0281
    1fd0:	89 23       	and	r24, r25
    1fd2:	80 93 81 02 	sts	0x0281, r24

	if(led_frame_bitmap[1] & bit_on)
    1fd6:	80 91 48 02 	lds	r24, 0x0248
    1fda:	82 23       	and	r24, r18
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <led_plane_x_back+0x4bc>
		led_frame_bitmap[2] |= bit_on;
    1fde:	32 2b       	or	r19, r18
    1fe0:	30 93 49 02 	sts	0x0249, r19
	if(led_frame_bitmap[9] & bit_on)
    1fe4:	80 91 50 02 	lds	r24, 0x0250
    1fe8:	82 23       	and	r24, r18
    1fea:	29 f0       	breq	.+10     	; 0x1ff6 <led_plane_x_back+0x4ce>
		led_frame_bitmap[10] |= bit_on;
    1fec:	80 91 51 02 	lds	r24, 0x0251
    1ff0:	82 2b       	or	r24, r18
    1ff2:	80 93 51 02 	sts	0x0251, r24
	if(led_frame_bitmap[17] & bit_on)
    1ff6:	80 91 58 02 	lds	r24, 0x0258
    1ffa:	82 23       	and	r24, r18
    1ffc:	29 f0       	breq	.+10     	; 0x2008 <led_plane_x_back+0x4e0>
		led_frame_bitmap[18] |= bit_on;
    1ffe:	80 91 59 02 	lds	r24, 0x0259
    2002:	82 2b       	or	r24, r18
    2004:	80 93 59 02 	sts	0x0259, r24
	if(led_frame_bitmap[25] & bit_on)
    2008:	80 91 60 02 	lds	r24, 0x0260
    200c:	82 23       	and	r24, r18
    200e:	29 f0       	breq	.+10     	; 0x201a <led_plane_x_back+0x4f2>
		led_frame_bitmap[26] |= bit_on;
    2010:	80 91 61 02 	lds	r24, 0x0261
    2014:	82 2b       	or	r24, r18
    2016:	80 93 61 02 	sts	0x0261, r24
	if(led_frame_bitmap[33] & bit_on)
    201a:	80 91 68 02 	lds	r24, 0x0268
    201e:	82 23       	and	r24, r18
    2020:	29 f0       	breq	.+10     	; 0x202c <led_plane_x_back+0x504>
		led_frame_bitmap[34] |= bit_on;
    2022:	80 91 69 02 	lds	r24, 0x0269
    2026:	82 2b       	or	r24, r18
    2028:	80 93 69 02 	sts	0x0269, r24
	if(led_frame_bitmap[41] & bit_on)
    202c:	80 91 70 02 	lds	r24, 0x0270
    2030:	82 23       	and	r24, r18
    2032:	29 f0       	breq	.+10     	; 0x203e <led_plane_x_back+0x516>
		led_frame_bitmap[42] |= bit_on;
    2034:	80 91 71 02 	lds	r24, 0x0271
    2038:	82 2b       	or	r24, r18
    203a:	80 93 71 02 	sts	0x0271, r24
	if(led_frame_bitmap[49] & bit_on)
    203e:	80 91 78 02 	lds	r24, 0x0278
    2042:	82 23       	and	r24, r18
    2044:	29 f0       	breq	.+10     	; 0x2050 <led_plane_x_back+0x528>
		led_frame_bitmap[50] |= bit_on;
    2046:	80 91 79 02 	lds	r24, 0x0279
    204a:	82 2b       	or	r24, r18
    204c:	80 93 79 02 	sts	0x0279, r24
	if(led_frame_bitmap[57] & bit_on)
    2050:	80 91 80 02 	lds	r24, 0x0280
    2054:	82 23       	and	r24, r18
    2056:	29 f0       	breq	.+10     	; 0x2062 <led_plane_x_back+0x53a>
		led_frame_bitmap[58] |= bit_on;
    2058:	80 91 81 02 	lds	r24, 0x0281
    205c:	82 2b       	or	r24, r18
    205e:	80 93 81 02 	sts	0x0281, r24

	led_frame_bitmap[1] &=bit_off;
    2062:	30 91 48 02 	lds	r19, 0x0248
    2066:	39 23       	and	r19, r25
    2068:	30 93 48 02 	sts	0x0248, r19
	led_frame_bitmap[9] &=bit_off;
    206c:	80 91 50 02 	lds	r24, 0x0250
    2070:	89 23       	and	r24, r25
    2072:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[17] &=bit_off;
    2076:	80 91 58 02 	lds	r24, 0x0258
    207a:	89 23       	and	r24, r25
    207c:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[25] &=bit_off;
    2080:	80 91 60 02 	lds	r24, 0x0260
    2084:	89 23       	and	r24, r25
    2086:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[33] &=bit_off;
    208a:	80 91 68 02 	lds	r24, 0x0268
    208e:	89 23       	and	r24, r25
    2090:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[41] &=bit_off;
    2094:	80 91 70 02 	lds	r24, 0x0270
    2098:	89 23       	and	r24, r25
    209a:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[49] &=bit_off;
    209e:	80 91 78 02 	lds	r24, 0x0278
    20a2:	89 23       	and	r24, r25
    20a4:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[57] &=bit_off;
    20a8:	80 91 80 02 	lds	r24, 0x0280
    20ac:	89 23       	and	r24, r25
    20ae:	80 93 80 02 	sts	0x0280, r24

	if(led_frame_bitmap[0] & bit_on)
    20b2:	80 91 47 02 	lds	r24, 0x0247
    20b6:	82 23       	and	r24, r18
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <led_plane_x_back+0x598>
		led_frame_bitmap[1] |= bit_on;
    20ba:	32 2b       	or	r19, r18
    20bc:	30 93 48 02 	sts	0x0248, r19
	if(led_frame_bitmap[8] & bit_on)
    20c0:	80 91 4f 02 	lds	r24, 0x024F
    20c4:	82 23       	and	r24, r18
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <led_plane_x_back+0x5aa>
		led_frame_bitmap[9] |= bit_on;
    20c8:	80 91 50 02 	lds	r24, 0x0250
    20cc:	82 2b       	or	r24, r18
    20ce:	80 93 50 02 	sts	0x0250, r24
	if(led_frame_bitmap[16] & bit_on)
    20d2:	80 91 57 02 	lds	r24, 0x0257
    20d6:	82 23       	and	r24, r18
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <led_plane_x_back+0x5bc>
		led_frame_bitmap[17] |= bit_on;
    20da:	80 91 58 02 	lds	r24, 0x0258
    20de:	82 2b       	or	r24, r18
    20e0:	80 93 58 02 	sts	0x0258, r24
	if(led_frame_bitmap[24] & bit_on)
    20e4:	80 91 5f 02 	lds	r24, 0x025F
    20e8:	82 23       	and	r24, r18
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <led_plane_x_back+0x5ce>
		led_frame_bitmap[25] |= bit_on;
    20ec:	80 91 60 02 	lds	r24, 0x0260
    20f0:	82 2b       	or	r24, r18
    20f2:	80 93 60 02 	sts	0x0260, r24
	if(led_frame_bitmap[32] & bit_on)
    20f6:	80 91 67 02 	lds	r24, 0x0267
    20fa:	82 23       	and	r24, r18
    20fc:	29 f0       	breq	.+10     	; 0x2108 <led_plane_x_back+0x5e0>
		led_frame_bitmap[33] |= bit_on;
    20fe:	80 91 68 02 	lds	r24, 0x0268
    2102:	82 2b       	or	r24, r18
    2104:	80 93 68 02 	sts	0x0268, r24
	if(led_frame_bitmap[40] & bit_on)
    2108:	80 91 6f 02 	lds	r24, 0x026F
    210c:	82 23       	and	r24, r18
    210e:	29 f0       	breq	.+10     	; 0x211a <led_plane_x_back+0x5f2>
		led_frame_bitmap[41] |= bit_on;
    2110:	80 91 70 02 	lds	r24, 0x0270
    2114:	82 2b       	or	r24, r18
    2116:	80 93 70 02 	sts	0x0270, r24
	if(led_frame_bitmap[48] & bit_on)
    211a:	80 91 77 02 	lds	r24, 0x0277
    211e:	82 23       	and	r24, r18
    2120:	29 f0       	breq	.+10     	; 0x212c <led_plane_x_back+0x604>
		led_frame_bitmap[49] |= bit_on;
    2122:	80 91 78 02 	lds	r24, 0x0278
    2126:	82 2b       	or	r24, r18
    2128:	80 93 78 02 	sts	0x0278, r24
	if(led_frame_bitmap[56] & bit_on)
    212c:	80 91 7f 02 	lds	r24, 0x027F
    2130:	82 23       	and	r24, r18
    2132:	29 f0       	breq	.+10     	; 0x213e <led_plane_x_back+0x616>
		led_frame_bitmap[57] |= bit_on;
    2134:	80 91 80 02 	lds	r24, 0x0280
    2138:	28 2b       	or	r18, r24
    213a:	20 93 80 02 	sts	0x0280, r18

	led_frame_bitmap[0] &=bit_off;
    213e:	80 91 47 02 	lds	r24, 0x0247
    2142:	89 23       	and	r24, r25
    2144:	80 93 47 02 	sts	0x0247, r24
	led_frame_bitmap[8] &=bit_off;
    2148:	80 91 4f 02 	lds	r24, 0x024F
    214c:	89 23       	and	r24, r25
    214e:	80 93 4f 02 	sts	0x024F, r24
	led_frame_bitmap[16] &=bit_off;
    2152:	80 91 57 02 	lds	r24, 0x0257
    2156:	89 23       	and	r24, r25
    2158:	80 93 57 02 	sts	0x0257, r24
	led_frame_bitmap[24] &=bit_off;
    215c:	80 91 5f 02 	lds	r24, 0x025F
    2160:	89 23       	and	r24, r25
    2162:	80 93 5f 02 	sts	0x025F, r24
	led_frame_bitmap[32] &=bit_off;
    2166:	80 91 67 02 	lds	r24, 0x0267
    216a:	89 23       	and	r24, r25
    216c:	80 93 67 02 	sts	0x0267, r24
	led_frame_bitmap[40] &=bit_off;
    2170:	80 91 6f 02 	lds	r24, 0x026F
    2174:	89 23       	and	r24, r25
    2176:	80 93 6f 02 	sts	0x026F, r24
	led_frame_bitmap[48] &=bit_off;
    217a:	80 91 77 02 	lds	r24, 0x0277
    217e:	89 23       	and	r24, r25
    2180:	80 93 77 02 	sts	0x0277, r24
	led_frame_bitmap[56] &=bit_off;
    2184:	80 91 7f 02 	lds	r24, 0x027F
    2188:	98 23       	and	r25, r24
    218a:	90 93 7f 02 	sts	0x027F, r25

}
    218e:	08 95       	ret

00002190 <led_plane_x_forward>:
void led_plane_x_forward(unsigned char x)
{
	unsigned char bit_on;
	unsigned char bit_off;
	
	bit_on = 0x80>>x;
    2190:	20 e8       	ldi	r18, 0x80	; 128
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	02 c0       	rjmp	.+4      	; 0x219a <led_plane_x_forward+0xa>
    2196:	35 95       	asr	r19
    2198:	27 95       	ror	r18
    219a:	8a 95       	dec	r24
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <led_plane_x_forward+0x6>
	bit_off = ~bit_on;
    219e:	92 2f       	mov	r25, r18
    21a0:	90 95       	com	r25

	//shift back 1

	led_frame_bitmap[0] &=bit_off;
    21a2:	30 91 47 02 	lds	r19, 0x0247
    21a6:	39 23       	and	r19, r25
    21a8:	30 93 47 02 	sts	0x0247, r19
	led_frame_bitmap[8] &=bit_off;
    21ac:	80 91 4f 02 	lds	r24, 0x024F
    21b0:	89 23       	and	r24, r25
    21b2:	80 93 4f 02 	sts	0x024F, r24
	led_frame_bitmap[16] &=bit_off;
    21b6:	80 91 57 02 	lds	r24, 0x0257
    21ba:	89 23       	and	r24, r25
    21bc:	80 93 57 02 	sts	0x0257, r24
	led_frame_bitmap[24] &=bit_off;
    21c0:	80 91 5f 02 	lds	r24, 0x025F
    21c4:	89 23       	and	r24, r25
    21c6:	80 93 5f 02 	sts	0x025F, r24
	led_frame_bitmap[32] &=bit_off;
    21ca:	80 91 67 02 	lds	r24, 0x0267
    21ce:	89 23       	and	r24, r25
    21d0:	80 93 67 02 	sts	0x0267, r24
	led_frame_bitmap[40] &=bit_off;
    21d4:	80 91 6f 02 	lds	r24, 0x026F
    21d8:	89 23       	and	r24, r25
    21da:	80 93 6f 02 	sts	0x026F, r24
	led_frame_bitmap[48] &=bit_off;
    21de:	80 91 77 02 	lds	r24, 0x0277
    21e2:	89 23       	and	r24, r25
    21e4:	80 93 77 02 	sts	0x0277, r24
	led_frame_bitmap[56] &=bit_off;
    21e8:	80 91 7f 02 	lds	r24, 0x027F
    21ec:	89 23       	and	r24, r25
    21ee:	80 93 7f 02 	sts	0x027F, r24

	if(led_frame_bitmap[1] & bit_on)
    21f2:	80 91 48 02 	lds	r24, 0x0248
    21f6:	82 23       	and	r24, r18
    21f8:	19 f0       	breq	.+6      	; 0x2200 <led_plane_x_forward+0x70>
		led_frame_bitmap[0] |= bit_on;
    21fa:	32 2b       	or	r19, r18
    21fc:	30 93 47 02 	sts	0x0247, r19
	if(led_frame_bitmap[9] & bit_on)
    2200:	80 91 50 02 	lds	r24, 0x0250
    2204:	82 23       	and	r24, r18
    2206:	29 f0       	breq	.+10     	; 0x2212 <led_plane_x_forward+0x82>
		led_frame_bitmap[8] |= bit_on;
    2208:	80 91 4f 02 	lds	r24, 0x024F
    220c:	82 2b       	or	r24, r18
    220e:	80 93 4f 02 	sts	0x024F, r24
	if(led_frame_bitmap[17] & bit_on)
    2212:	80 91 58 02 	lds	r24, 0x0258
    2216:	82 23       	and	r24, r18
    2218:	29 f0       	breq	.+10     	; 0x2224 <led_plane_x_forward+0x94>
		led_frame_bitmap[16] |= bit_on;
    221a:	80 91 57 02 	lds	r24, 0x0257
    221e:	82 2b       	or	r24, r18
    2220:	80 93 57 02 	sts	0x0257, r24
	if(led_frame_bitmap[25] & bit_on)
    2224:	80 91 60 02 	lds	r24, 0x0260
    2228:	82 23       	and	r24, r18
    222a:	29 f0       	breq	.+10     	; 0x2236 <led_plane_x_forward+0xa6>
		led_frame_bitmap[24] |= bit_on;
    222c:	80 91 5f 02 	lds	r24, 0x025F
    2230:	82 2b       	or	r24, r18
    2232:	80 93 5f 02 	sts	0x025F, r24
	if(led_frame_bitmap[33] & bit_on)
    2236:	80 91 68 02 	lds	r24, 0x0268
    223a:	82 23       	and	r24, r18
    223c:	29 f0       	breq	.+10     	; 0x2248 <led_plane_x_forward+0xb8>
		led_frame_bitmap[32] |= bit_on;
    223e:	80 91 67 02 	lds	r24, 0x0267
    2242:	82 2b       	or	r24, r18
    2244:	80 93 67 02 	sts	0x0267, r24
	if(led_frame_bitmap[41] & bit_on)
    2248:	80 91 70 02 	lds	r24, 0x0270
    224c:	82 23       	and	r24, r18
    224e:	29 f0       	breq	.+10     	; 0x225a <led_plane_x_forward+0xca>
		led_frame_bitmap[40] |= bit_on;
    2250:	80 91 6f 02 	lds	r24, 0x026F
    2254:	82 2b       	or	r24, r18
    2256:	80 93 6f 02 	sts	0x026F, r24
	if(led_frame_bitmap[49] & bit_on)
    225a:	80 91 78 02 	lds	r24, 0x0278
    225e:	82 23       	and	r24, r18
    2260:	29 f0       	breq	.+10     	; 0x226c <led_plane_x_forward+0xdc>
		led_frame_bitmap[48] |= bit_on;
    2262:	80 91 77 02 	lds	r24, 0x0277
    2266:	82 2b       	or	r24, r18
    2268:	80 93 77 02 	sts	0x0277, r24
	if(led_frame_bitmap[57] & bit_on)
    226c:	80 91 80 02 	lds	r24, 0x0280
    2270:	82 23       	and	r24, r18
    2272:	29 f0       	breq	.+10     	; 0x227e <led_plane_x_forward+0xee>
		led_frame_bitmap[56] |= bit_on;
    2274:	80 91 7f 02 	lds	r24, 0x027F
    2278:	82 2b       	or	r24, r18
    227a:	80 93 7f 02 	sts	0x027F, r24


	led_frame_bitmap[1] &=bit_off;
    227e:	30 91 48 02 	lds	r19, 0x0248
    2282:	39 23       	and	r19, r25
    2284:	30 93 48 02 	sts	0x0248, r19
	led_frame_bitmap[9] &=bit_off;
    2288:	80 91 50 02 	lds	r24, 0x0250
    228c:	89 23       	and	r24, r25
    228e:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[17] &=bit_off;
    2292:	80 91 58 02 	lds	r24, 0x0258
    2296:	89 23       	and	r24, r25
    2298:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[25] &=bit_off;
    229c:	80 91 60 02 	lds	r24, 0x0260
    22a0:	89 23       	and	r24, r25
    22a2:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[33] &=bit_off;
    22a6:	80 91 68 02 	lds	r24, 0x0268
    22aa:	89 23       	and	r24, r25
    22ac:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[41] &=bit_off;
    22b0:	80 91 70 02 	lds	r24, 0x0270
    22b4:	89 23       	and	r24, r25
    22b6:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[49] &=bit_off;
    22ba:	80 91 78 02 	lds	r24, 0x0278
    22be:	89 23       	and	r24, r25
    22c0:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[57] &=bit_off;
    22c4:	80 91 80 02 	lds	r24, 0x0280
    22c8:	89 23       	and	r24, r25
    22ca:	80 93 80 02 	sts	0x0280, r24

	if(led_frame_bitmap[2] & bit_on)
    22ce:	80 91 49 02 	lds	r24, 0x0249
    22d2:	82 23       	and	r24, r18
    22d4:	19 f0       	breq	.+6      	; 0x22dc <led_plane_x_forward+0x14c>
		led_frame_bitmap[1] |= bit_on;
    22d6:	32 2b       	or	r19, r18
    22d8:	30 93 48 02 	sts	0x0248, r19
	if(led_frame_bitmap[10] & bit_on)
    22dc:	80 91 51 02 	lds	r24, 0x0251
    22e0:	82 23       	and	r24, r18
    22e2:	29 f0       	breq	.+10     	; 0x22ee <led_plane_x_forward+0x15e>
		led_frame_bitmap[9] |= bit_on;
    22e4:	80 91 50 02 	lds	r24, 0x0250
    22e8:	82 2b       	or	r24, r18
    22ea:	80 93 50 02 	sts	0x0250, r24
	if(led_frame_bitmap[18] & bit_on)
    22ee:	80 91 59 02 	lds	r24, 0x0259
    22f2:	82 23       	and	r24, r18
    22f4:	29 f0       	breq	.+10     	; 0x2300 <led_plane_x_forward+0x170>
		led_frame_bitmap[17] |= bit_on;
    22f6:	80 91 58 02 	lds	r24, 0x0258
    22fa:	82 2b       	or	r24, r18
    22fc:	80 93 58 02 	sts	0x0258, r24
	if(led_frame_bitmap[26] & bit_on)
    2300:	80 91 61 02 	lds	r24, 0x0261
    2304:	82 23       	and	r24, r18
    2306:	29 f0       	breq	.+10     	; 0x2312 <led_plane_x_forward+0x182>
		led_frame_bitmap[25] |= bit_on;
    2308:	80 91 60 02 	lds	r24, 0x0260
    230c:	82 2b       	or	r24, r18
    230e:	80 93 60 02 	sts	0x0260, r24
	if(led_frame_bitmap[34] & bit_on)
    2312:	80 91 69 02 	lds	r24, 0x0269
    2316:	82 23       	and	r24, r18
    2318:	29 f0       	breq	.+10     	; 0x2324 <led_plane_x_forward+0x194>
		led_frame_bitmap[33] |= bit_on;
    231a:	80 91 68 02 	lds	r24, 0x0268
    231e:	82 2b       	or	r24, r18
    2320:	80 93 68 02 	sts	0x0268, r24
	if(led_frame_bitmap[42] & bit_on)
    2324:	80 91 71 02 	lds	r24, 0x0271
    2328:	82 23       	and	r24, r18
    232a:	29 f0       	breq	.+10     	; 0x2336 <led_plane_x_forward+0x1a6>
		led_frame_bitmap[41] |= bit_on;
    232c:	80 91 70 02 	lds	r24, 0x0270
    2330:	82 2b       	or	r24, r18
    2332:	80 93 70 02 	sts	0x0270, r24
	if(led_frame_bitmap[50] & bit_on)
    2336:	80 91 79 02 	lds	r24, 0x0279
    233a:	82 23       	and	r24, r18
    233c:	29 f0       	breq	.+10     	; 0x2348 <led_plane_x_forward+0x1b8>
		led_frame_bitmap[49] |= bit_on;
    233e:	80 91 78 02 	lds	r24, 0x0278
    2342:	82 2b       	or	r24, r18
    2344:	80 93 78 02 	sts	0x0278, r24
	if(led_frame_bitmap[58] & bit_on)
    2348:	80 91 81 02 	lds	r24, 0x0281
    234c:	82 23       	and	r24, r18
    234e:	29 f0       	breq	.+10     	; 0x235a <led_plane_x_forward+0x1ca>
		led_frame_bitmap[57] |= bit_on;
    2350:	80 91 80 02 	lds	r24, 0x0280
    2354:	82 2b       	or	r24, r18
    2356:	80 93 80 02 	sts	0x0280, r24

	led_frame_bitmap[2] &=bit_off;
    235a:	30 91 49 02 	lds	r19, 0x0249
    235e:	39 23       	and	r19, r25
    2360:	30 93 49 02 	sts	0x0249, r19
	led_frame_bitmap[10] &=bit_off;
    2364:	80 91 51 02 	lds	r24, 0x0251
    2368:	89 23       	and	r24, r25
    236a:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[18] &=bit_off;
    236e:	80 91 59 02 	lds	r24, 0x0259
    2372:	89 23       	and	r24, r25
    2374:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[26] &=bit_off;
    2378:	80 91 61 02 	lds	r24, 0x0261
    237c:	89 23       	and	r24, r25
    237e:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[34] &=bit_off;
    2382:	80 91 69 02 	lds	r24, 0x0269
    2386:	89 23       	and	r24, r25
    2388:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[42] &=bit_off;
    238c:	80 91 71 02 	lds	r24, 0x0271
    2390:	89 23       	and	r24, r25
    2392:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[50] &=bit_off;
    2396:	80 91 79 02 	lds	r24, 0x0279
    239a:	89 23       	and	r24, r25
    239c:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[58] &=bit_off;
    23a0:	80 91 81 02 	lds	r24, 0x0281
    23a4:	89 23       	and	r24, r25
    23a6:	80 93 81 02 	sts	0x0281, r24

	if(led_frame_bitmap[3] & bit_on)
    23aa:	80 91 4a 02 	lds	r24, 0x024A
    23ae:	82 23       	and	r24, r18
    23b0:	19 f0       	breq	.+6      	; 0x23b8 <led_plane_x_forward+0x228>
		led_frame_bitmap[2] |= bit_on;
    23b2:	32 2b       	or	r19, r18
    23b4:	30 93 49 02 	sts	0x0249, r19
	if(led_frame_bitmap[11] & bit_on)
    23b8:	80 91 52 02 	lds	r24, 0x0252
    23bc:	82 23       	and	r24, r18
    23be:	29 f0       	breq	.+10     	; 0x23ca <led_plane_x_forward+0x23a>
		led_frame_bitmap[10] |= bit_on;
    23c0:	80 91 51 02 	lds	r24, 0x0251
    23c4:	82 2b       	or	r24, r18
    23c6:	80 93 51 02 	sts	0x0251, r24
	if(led_frame_bitmap[19] & bit_on)
    23ca:	80 91 5a 02 	lds	r24, 0x025A
    23ce:	82 23       	and	r24, r18
    23d0:	29 f0       	breq	.+10     	; 0x23dc <led_plane_x_forward+0x24c>
		led_frame_bitmap[18] |= bit_on;
    23d2:	80 91 59 02 	lds	r24, 0x0259
    23d6:	82 2b       	or	r24, r18
    23d8:	80 93 59 02 	sts	0x0259, r24
	if(led_frame_bitmap[27] & bit_on)
    23dc:	80 91 62 02 	lds	r24, 0x0262
    23e0:	82 23       	and	r24, r18
    23e2:	29 f0       	breq	.+10     	; 0x23ee <led_plane_x_forward+0x25e>
		led_frame_bitmap[26] |= bit_on;
    23e4:	80 91 61 02 	lds	r24, 0x0261
    23e8:	82 2b       	or	r24, r18
    23ea:	80 93 61 02 	sts	0x0261, r24
	if(led_frame_bitmap[35] & bit_on)
    23ee:	80 91 6a 02 	lds	r24, 0x026A
    23f2:	82 23       	and	r24, r18
    23f4:	29 f0       	breq	.+10     	; 0x2400 <led_plane_x_forward+0x270>
		led_frame_bitmap[34] |= bit_on;
    23f6:	80 91 69 02 	lds	r24, 0x0269
    23fa:	82 2b       	or	r24, r18
    23fc:	80 93 69 02 	sts	0x0269, r24
	if(led_frame_bitmap[43] & bit_on)
    2400:	80 91 72 02 	lds	r24, 0x0272
    2404:	82 23       	and	r24, r18
    2406:	29 f0       	breq	.+10     	; 0x2412 <led_plane_x_forward+0x282>
		led_frame_bitmap[42] |= bit_on;
    2408:	80 91 71 02 	lds	r24, 0x0271
    240c:	82 2b       	or	r24, r18
    240e:	80 93 71 02 	sts	0x0271, r24
	if(led_frame_bitmap[51] & bit_on)
    2412:	80 91 7a 02 	lds	r24, 0x027A
    2416:	82 23       	and	r24, r18
    2418:	29 f0       	breq	.+10     	; 0x2424 <led_plane_x_forward+0x294>
		led_frame_bitmap[50] |= bit_on;
    241a:	80 91 79 02 	lds	r24, 0x0279
    241e:	82 2b       	or	r24, r18
    2420:	80 93 79 02 	sts	0x0279, r24
	if(led_frame_bitmap[59] & bit_on)
    2424:	80 91 82 02 	lds	r24, 0x0282
    2428:	82 23       	and	r24, r18
    242a:	29 f0       	breq	.+10     	; 0x2436 <led_plane_x_forward+0x2a6>
		led_frame_bitmap[58] |= bit_on;
    242c:	80 91 81 02 	lds	r24, 0x0281
    2430:	82 2b       	or	r24, r18
    2432:	80 93 81 02 	sts	0x0281, r24

	led_frame_bitmap[3] &=bit_off;
    2436:	30 91 4a 02 	lds	r19, 0x024A
    243a:	39 23       	and	r19, r25
    243c:	30 93 4a 02 	sts	0x024A, r19
	led_frame_bitmap[11] &=bit_off;
    2440:	80 91 52 02 	lds	r24, 0x0252
    2444:	89 23       	and	r24, r25
    2446:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[19] &=bit_off;
    244a:	80 91 5a 02 	lds	r24, 0x025A
    244e:	89 23       	and	r24, r25
    2450:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[27] &=bit_off;
    2454:	80 91 62 02 	lds	r24, 0x0262
    2458:	89 23       	and	r24, r25
    245a:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[35] &=bit_off;
    245e:	80 91 6a 02 	lds	r24, 0x026A
    2462:	89 23       	and	r24, r25
    2464:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[43] &=bit_off;
    2468:	80 91 72 02 	lds	r24, 0x0272
    246c:	89 23       	and	r24, r25
    246e:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[51] &=bit_off;
    2472:	80 91 7a 02 	lds	r24, 0x027A
    2476:	89 23       	and	r24, r25
    2478:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[59] &=bit_off;
    247c:	80 91 82 02 	lds	r24, 0x0282
    2480:	89 23       	and	r24, r25
    2482:	80 93 82 02 	sts	0x0282, r24

	if(led_frame_bitmap[4] & bit_on)
    2486:	80 91 4b 02 	lds	r24, 0x024B
    248a:	82 23       	and	r24, r18
    248c:	19 f0       	breq	.+6      	; 0x2494 <led_plane_x_forward+0x304>
		led_frame_bitmap[3] |= bit_on;
    248e:	32 2b       	or	r19, r18
    2490:	30 93 4a 02 	sts	0x024A, r19
	if(led_frame_bitmap[12] & bit_on)
    2494:	80 91 53 02 	lds	r24, 0x0253
    2498:	82 23       	and	r24, r18
    249a:	29 f0       	breq	.+10     	; 0x24a6 <led_plane_x_forward+0x316>
		led_frame_bitmap[11] |= bit_on;
    249c:	80 91 52 02 	lds	r24, 0x0252
    24a0:	82 2b       	or	r24, r18
    24a2:	80 93 52 02 	sts	0x0252, r24
	if(led_frame_bitmap[20] & bit_on)
    24a6:	80 91 5b 02 	lds	r24, 0x025B
    24aa:	82 23       	and	r24, r18
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <led_plane_x_forward+0x328>
		led_frame_bitmap[19] |= bit_on;
    24ae:	80 91 5a 02 	lds	r24, 0x025A
    24b2:	82 2b       	or	r24, r18
    24b4:	80 93 5a 02 	sts	0x025A, r24
	if(led_frame_bitmap[28] & bit_on)
    24b8:	80 91 63 02 	lds	r24, 0x0263
    24bc:	82 23       	and	r24, r18
    24be:	29 f0       	breq	.+10     	; 0x24ca <led_plane_x_forward+0x33a>
		led_frame_bitmap[27] |= bit_on;
    24c0:	80 91 62 02 	lds	r24, 0x0262
    24c4:	82 2b       	or	r24, r18
    24c6:	80 93 62 02 	sts	0x0262, r24
	if(led_frame_bitmap[36] & bit_on)
    24ca:	80 91 6b 02 	lds	r24, 0x026B
    24ce:	82 23       	and	r24, r18
    24d0:	29 f0       	breq	.+10     	; 0x24dc <led_plane_x_forward+0x34c>
		led_frame_bitmap[35] |= bit_on;
    24d2:	80 91 6a 02 	lds	r24, 0x026A
    24d6:	82 2b       	or	r24, r18
    24d8:	80 93 6a 02 	sts	0x026A, r24
	if(led_frame_bitmap[44] & bit_on)
    24dc:	80 91 73 02 	lds	r24, 0x0273
    24e0:	82 23       	and	r24, r18
    24e2:	29 f0       	breq	.+10     	; 0x24ee <led_plane_x_forward+0x35e>
		led_frame_bitmap[43] |= bit_on;
    24e4:	80 91 72 02 	lds	r24, 0x0272
    24e8:	82 2b       	or	r24, r18
    24ea:	80 93 72 02 	sts	0x0272, r24
	if(led_frame_bitmap[52] & bit_on)
    24ee:	80 91 7b 02 	lds	r24, 0x027B
    24f2:	82 23       	and	r24, r18
    24f4:	29 f0       	breq	.+10     	; 0x2500 <led_plane_x_forward+0x370>
		led_frame_bitmap[51] |= bit_on;
    24f6:	80 91 7a 02 	lds	r24, 0x027A
    24fa:	82 2b       	or	r24, r18
    24fc:	80 93 7a 02 	sts	0x027A, r24
	if(led_frame_bitmap[60] & bit_on)
    2500:	80 91 83 02 	lds	r24, 0x0283
    2504:	82 23       	and	r24, r18
    2506:	29 f0       	breq	.+10     	; 0x2512 <led_plane_x_forward+0x382>
		led_frame_bitmap[59] |= bit_on;
    2508:	80 91 82 02 	lds	r24, 0x0282
    250c:	82 2b       	or	r24, r18
    250e:	80 93 82 02 	sts	0x0282, r24

	led_frame_bitmap[4] &=bit_off;
    2512:	30 91 4b 02 	lds	r19, 0x024B
    2516:	39 23       	and	r19, r25
    2518:	30 93 4b 02 	sts	0x024B, r19
	led_frame_bitmap[12] &=bit_off;
    251c:	80 91 53 02 	lds	r24, 0x0253
    2520:	89 23       	and	r24, r25
    2522:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[20] &=bit_off;
    2526:	80 91 5b 02 	lds	r24, 0x025B
    252a:	89 23       	and	r24, r25
    252c:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[28] &=bit_off;
    2530:	80 91 63 02 	lds	r24, 0x0263
    2534:	89 23       	and	r24, r25
    2536:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[36] &=bit_off;
    253a:	80 91 6b 02 	lds	r24, 0x026B
    253e:	89 23       	and	r24, r25
    2540:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[44] &=bit_off;
    2544:	80 91 73 02 	lds	r24, 0x0273
    2548:	89 23       	and	r24, r25
    254a:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[52] &=bit_off;
    254e:	80 91 7b 02 	lds	r24, 0x027B
    2552:	89 23       	and	r24, r25
    2554:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[60] &=bit_off;
    2558:	80 91 83 02 	lds	r24, 0x0283
    255c:	89 23       	and	r24, r25
    255e:	80 93 83 02 	sts	0x0283, r24

	if(led_frame_bitmap[5] & bit_on)
    2562:	80 91 4c 02 	lds	r24, 0x024C
    2566:	82 23       	and	r24, r18
    2568:	19 f0       	breq	.+6      	; 0x2570 <led_plane_x_forward+0x3e0>
		led_frame_bitmap[4] |= bit_on;
    256a:	32 2b       	or	r19, r18
    256c:	30 93 4b 02 	sts	0x024B, r19
	if(led_frame_bitmap[13] & bit_on)
    2570:	80 91 54 02 	lds	r24, 0x0254
    2574:	82 23       	and	r24, r18
    2576:	29 f0       	breq	.+10     	; 0x2582 <led_plane_x_forward+0x3f2>
		led_frame_bitmap[12] |= bit_on;
    2578:	80 91 53 02 	lds	r24, 0x0253
    257c:	82 2b       	or	r24, r18
    257e:	80 93 53 02 	sts	0x0253, r24
	if(led_frame_bitmap[21] & bit_on)
    2582:	80 91 5c 02 	lds	r24, 0x025C
    2586:	82 23       	and	r24, r18
    2588:	29 f0       	breq	.+10     	; 0x2594 <led_plane_x_forward+0x404>
		led_frame_bitmap[20] |= bit_on;
    258a:	80 91 5b 02 	lds	r24, 0x025B
    258e:	82 2b       	or	r24, r18
    2590:	80 93 5b 02 	sts	0x025B, r24
	if(led_frame_bitmap[29] & bit_on)
    2594:	80 91 64 02 	lds	r24, 0x0264
    2598:	82 23       	and	r24, r18
    259a:	29 f0       	breq	.+10     	; 0x25a6 <led_plane_x_forward+0x416>
		led_frame_bitmap[28] |= bit_on;
    259c:	80 91 63 02 	lds	r24, 0x0263
    25a0:	82 2b       	or	r24, r18
    25a2:	80 93 63 02 	sts	0x0263, r24
	if(led_frame_bitmap[37] & bit_on)
    25a6:	80 91 6c 02 	lds	r24, 0x026C
    25aa:	82 23       	and	r24, r18
    25ac:	29 f0       	breq	.+10     	; 0x25b8 <led_plane_x_forward+0x428>
		led_frame_bitmap[36] |= bit_on;
    25ae:	80 91 6b 02 	lds	r24, 0x026B
    25b2:	82 2b       	or	r24, r18
    25b4:	80 93 6b 02 	sts	0x026B, r24
	if(led_frame_bitmap[45] & bit_on)
    25b8:	80 91 74 02 	lds	r24, 0x0274
    25bc:	82 23       	and	r24, r18
    25be:	29 f0       	breq	.+10     	; 0x25ca <led_plane_x_forward+0x43a>
		led_frame_bitmap[44] |= bit_on;
    25c0:	80 91 73 02 	lds	r24, 0x0273
    25c4:	82 2b       	or	r24, r18
    25c6:	80 93 73 02 	sts	0x0273, r24
	if(led_frame_bitmap[53] & bit_on)
    25ca:	80 91 7c 02 	lds	r24, 0x027C
    25ce:	82 23       	and	r24, r18
    25d0:	29 f0       	breq	.+10     	; 0x25dc <led_plane_x_forward+0x44c>
		led_frame_bitmap[52] |= bit_on;
    25d2:	80 91 7b 02 	lds	r24, 0x027B
    25d6:	82 2b       	or	r24, r18
    25d8:	80 93 7b 02 	sts	0x027B, r24
	if(led_frame_bitmap[61] & bit_on)
    25dc:	80 91 84 02 	lds	r24, 0x0284
    25e0:	82 23       	and	r24, r18
    25e2:	29 f0       	breq	.+10     	; 0x25ee <led_plane_x_forward+0x45e>
		led_frame_bitmap[60] |= bit_on;
    25e4:	80 91 83 02 	lds	r24, 0x0283
    25e8:	82 2b       	or	r24, r18
    25ea:	80 93 83 02 	sts	0x0283, r24

	led_frame_bitmap[5] &=bit_off;
    25ee:	30 91 4c 02 	lds	r19, 0x024C
    25f2:	39 23       	and	r19, r25
    25f4:	30 93 4c 02 	sts	0x024C, r19
	led_frame_bitmap[13] &=bit_off;
    25f8:	80 91 54 02 	lds	r24, 0x0254
    25fc:	89 23       	and	r24, r25
    25fe:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[21] &=bit_off;
    2602:	80 91 5c 02 	lds	r24, 0x025C
    2606:	89 23       	and	r24, r25
    2608:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[29] &=bit_off;
    260c:	80 91 64 02 	lds	r24, 0x0264
    2610:	89 23       	and	r24, r25
    2612:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[37] &=bit_off;
    2616:	80 91 6c 02 	lds	r24, 0x026C
    261a:	89 23       	and	r24, r25
    261c:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[45] &=bit_off;
    2620:	80 91 74 02 	lds	r24, 0x0274
    2624:	89 23       	and	r24, r25
    2626:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[53] &=bit_off;
    262a:	80 91 7c 02 	lds	r24, 0x027C
    262e:	89 23       	and	r24, r25
    2630:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[61] &=bit_off;
    2634:	80 91 84 02 	lds	r24, 0x0284
    2638:	89 23       	and	r24, r25
    263a:	80 93 84 02 	sts	0x0284, r24

	if(led_frame_bitmap[6] & bit_on)
    263e:	80 91 4d 02 	lds	r24, 0x024D
    2642:	82 23       	and	r24, r18
    2644:	19 f0       	breq	.+6      	; 0x264c <led_plane_x_forward+0x4bc>
		led_frame_bitmap[5] |= bit_on;
    2646:	32 2b       	or	r19, r18
    2648:	30 93 4c 02 	sts	0x024C, r19
	if(led_frame_bitmap[14] & bit_on)
    264c:	80 91 55 02 	lds	r24, 0x0255
    2650:	82 23       	and	r24, r18
    2652:	29 f0       	breq	.+10     	; 0x265e <led_plane_x_forward+0x4ce>
		led_frame_bitmap[13] |= bit_on;
    2654:	80 91 54 02 	lds	r24, 0x0254
    2658:	82 2b       	or	r24, r18
    265a:	80 93 54 02 	sts	0x0254, r24
	if(led_frame_bitmap[22] & bit_on)
    265e:	80 91 5d 02 	lds	r24, 0x025D
    2662:	82 23       	and	r24, r18
    2664:	29 f0       	breq	.+10     	; 0x2670 <led_plane_x_forward+0x4e0>
		led_frame_bitmap[21] |= bit_on;
    2666:	80 91 5c 02 	lds	r24, 0x025C
    266a:	82 2b       	or	r24, r18
    266c:	80 93 5c 02 	sts	0x025C, r24
	if(led_frame_bitmap[30] & bit_on)
    2670:	80 91 65 02 	lds	r24, 0x0265
    2674:	82 23       	and	r24, r18
    2676:	29 f0       	breq	.+10     	; 0x2682 <led_plane_x_forward+0x4f2>
		led_frame_bitmap[29] |= bit_on;
    2678:	80 91 64 02 	lds	r24, 0x0264
    267c:	82 2b       	or	r24, r18
    267e:	80 93 64 02 	sts	0x0264, r24
	if(led_frame_bitmap[38] & bit_on)
    2682:	80 91 6d 02 	lds	r24, 0x026D
    2686:	82 23       	and	r24, r18
    2688:	29 f0       	breq	.+10     	; 0x2694 <led_plane_x_forward+0x504>
		led_frame_bitmap[37] |= bit_on;
    268a:	80 91 6c 02 	lds	r24, 0x026C
    268e:	82 2b       	or	r24, r18
    2690:	80 93 6c 02 	sts	0x026C, r24
	if(led_frame_bitmap[46] & bit_on)
    2694:	80 91 75 02 	lds	r24, 0x0275
    2698:	82 23       	and	r24, r18
    269a:	29 f0       	breq	.+10     	; 0x26a6 <led_plane_x_forward+0x516>
		led_frame_bitmap[45] |= bit_on;
    269c:	80 91 74 02 	lds	r24, 0x0274
    26a0:	82 2b       	or	r24, r18
    26a2:	80 93 74 02 	sts	0x0274, r24
	if(led_frame_bitmap[54] & bit_on)
    26a6:	80 91 7d 02 	lds	r24, 0x027D
    26aa:	82 23       	and	r24, r18
    26ac:	29 f0       	breq	.+10     	; 0x26b8 <led_plane_x_forward+0x528>
		led_frame_bitmap[53] |= bit_on;
    26ae:	80 91 7c 02 	lds	r24, 0x027C
    26b2:	82 2b       	or	r24, r18
    26b4:	80 93 7c 02 	sts	0x027C, r24
	if(led_frame_bitmap[62] & bit_on)
    26b8:	80 91 85 02 	lds	r24, 0x0285
    26bc:	82 23       	and	r24, r18
    26be:	29 f0       	breq	.+10     	; 0x26ca <led_plane_x_forward+0x53a>
		led_frame_bitmap[61] |= bit_on;
    26c0:	80 91 84 02 	lds	r24, 0x0284
    26c4:	82 2b       	or	r24, r18
    26c6:	80 93 84 02 	sts	0x0284, r24

	led_frame_bitmap[6] &=bit_off;
    26ca:	30 91 4d 02 	lds	r19, 0x024D
    26ce:	39 23       	and	r19, r25
    26d0:	30 93 4d 02 	sts	0x024D, r19
	led_frame_bitmap[14] &=bit_off;
    26d4:	80 91 55 02 	lds	r24, 0x0255
    26d8:	89 23       	and	r24, r25
    26da:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[22] &=bit_off;
    26de:	80 91 5d 02 	lds	r24, 0x025D
    26e2:	89 23       	and	r24, r25
    26e4:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[30] &=bit_off;
    26e8:	80 91 65 02 	lds	r24, 0x0265
    26ec:	89 23       	and	r24, r25
    26ee:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[38] &=bit_off;
    26f2:	80 91 6d 02 	lds	r24, 0x026D
    26f6:	89 23       	and	r24, r25
    26f8:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[46] &=bit_off;
    26fc:	80 91 75 02 	lds	r24, 0x0275
    2700:	89 23       	and	r24, r25
    2702:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[54] &=bit_off;
    2706:	80 91 7d 02 	lds	r24, 0x027D
    270a:	89 23       	and	r24, r25
    270c:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[62] &=bit_off;
    2710:	80 91 85 02 	lds	r24, 0x0285
    2714:	89 23       	and	r24, r25
    2716:	80 93 85 02 	sts	0x0285, r24

	if(led_frame_bitmap[7] & bit_on)
    271a:	80 91 4e 02 	lds	r24, 0x024E
    271e:	82 23       	and	r24, r18
    2720:	19 f0       	breq	.+6      	; 0x2728 <led_plane_x_forward+0x598>
		led_frame_bitmap[6] |= bit_on;
    2722:	32 2b       	or	r19, r18
    2724:	30 93 4d 02 	sts	0x024D, r19
	if(led_frame_bitmap[15] & bit_on)
    2728:	80 91 56 02 	lds	r24, 0x0256
    272c:	82 23       	and	r24, r18
    272e:	29 f0       	breq	.+10     	; 0x273a <led_plane_x_forward+0x5aa>
		led_frame_bitmap[14] |= bit_on;
    2730:	80 91 55 02 	lds	r24, 0x0255
    2734:	82 2b       	or	r24, r18
    2736:	80 93 55 02 	sts	0x0255, r24
	if(led_frame_bitmap[23] & bit_on)
    273a:	80 91 5e 02 	lds	r24, 0x025E
    273e:	82 23       	and	r24, r18
    2740:	29 f0       	breq	.+10     	; 0x274c <led_plane_x_forward+0x5bc>
		led_frame_bitmap[22] |= bit_on;
    2742:	80 91 5d 02 	lds	r24, 0x025D
    2746:	82 2b       	or	r24, r18
    2748:	80 93 5d 02 	sts	0x025D, r24
	if(led_frame_bitmap[31] & bit_on)
    274c:	80 91 66 02 	lds	r24, 0x0266
    2750:	82 23       	and	r24, r18
    2752:	29 f0       	breq	.+10     	; 0x275e <led_plane_x_forward+0x5ce>
		led_frame_bitmap[30] |= bit_on;
    2754:	80 91 65 02 	lds	r24, 0x0265
    2758:	82 2b       	or	r24, r18
    275a:	80 93 65 02 	sts	0x0265, r24
	if(led_frame_bitmap[39] & bit_on)
    275e:	80 91 6e 02 	lds	r24, 0x026E
    2762:	82 23       	and	r24, r18
    2764:	29 f0       	breq	.+10     	; 0x2770 <led_plane_x_forward+0x5e0>
		led_frame_bitmap[38] |= bit_on;
    2766:	80 91 6d 02 	lds	r24, 0x026D
    276a:	82 2b       	or	r24, r18
    276c:	80 93 6d 02 	sts	0x026D, r24
	if(led_frame_bitmap[47] & bit_on)
    2770:	80 91 76 02 	lds	r24, 0x0276
    2774:	82 23       	and	r24, r18
    2776:	29 f0       	breq	.+10     	; 0x2782 <led_plane_x_forward+0x5f2>
		led_frame_bitmap[46] |= bit_on;
    2778:	80 91 75 02 	lds	r24, 0x0275
    277c:	82 2b       	or	r24, r18
    277e:	80 93 75 02 	sts	0x0275, r24
	if(led_frame_bitmap[55] & bit_on)
    2782:	80 91 7e 02 	lds	r24, 0x027E
    2786:	82 23       	and	r24, r18
    2788:	29 f0       	breq	.+10     	; 0x2794 <led_plane_x_forward+0x604>
		led_frame_bitmap[54] |= bit_on;
    278a:	80 91 7d 02 	lds	r24, 0x027D
    278e:	82 2b       	or	r24, r18
    2790:	80 93 7d 02 	sts	0x027D, r24
	if(led_frame_bitmap[63] & bit_on)
    2794:	80 91 86 02 	lds	r24, 0x0286
    2798:	82 23       	and	r24, r18
    279a:	29 f0       	breq	.+10     	; 0x27a6 <led_plane_x_forward+0x616>
		led_frame_bitmap[62] |= bit_on;
    279c:	80 91 85 02 	lds	r24, 0x0285
    27a0:	28 2b       	or	r18, r24
    27a2:	20 93 85 02 	sts	0x0285, r18

	led_frame_bitmap[7] &=bit_off;
    27a6:	80 91 4e 02 	lds	r24, 0x024E
    27aa:	89 23       	and	r24, r25
    27ac:	80 93 4e 02 	sts	0x024E, r24
	led_frame_bitmap[15] &=bit_off;
    27b0:	80 91 56 02 	lds	r24, 0x0256
    27b4:	89 23       	and	r24, r25
    27b6:	80 93 56 02 	sts	0x0256, r24
	led_frame_bitmap[23] &=bit_off;
    27ba:	80 91 5e 02 	lds	r24, 0x025E
    27be:	89 23       	and	r24, r25
    27c0:	80 93 5e 02 	sts	0x025E, r24
	led_frame_bitmap[31] &=bit_off;
    27c4:	80 91 66 02 	lds	r24, 0x0266
    27c8:	89 23       	and	r24, r25
    27ca:	80 93 66 02 	sts	0x0266, r24
	led_frame_bitmap[39] &=bit_off;
    27ce:	80 91 6e 02 	lds	r24, 0x026E
    27d2:	89 23       	and	r24, r25
    27d4:	80 93 6e 02 	sts	0x026E, r24
	led_frame_bitmap[47] &=bit_off;
    27d8:	80 91 76 02 	lds	r24, 0x0276
    27dc:	89 23       	and	r24, r25
    27de:	80 93 76 02 	sts	0x0276, r24
	led_frame_bitmap[55] &=bit_off;
    27e2:	80 91 7e 02 	lds	r24, 0x027E
    27e6:	89 23       	and	r24, r25
    27e8:	80 93 7e 02 	sts	0x027E, r24
	led_frame_bitmap[63] &=bit_off;
    27ec:	80 91 86 02 	lds	r24, 0x0286
    27f0:	98 23       	and	r25, r24
    27f2:	90 93 86 02 	sts	0x0286, r25

}
    27f6:	08 95       	ret

000027f8 <led_plane_x_up>:
//scroll a verticle plane 1 pixel up, new bottom row is blank
void led_plane_x_up(unsigned char x)
{
	unsigned char bit_off, bit_on;
	
	bit_on=0x80>>x;
    27f8:	20 e8       	ldi	r18, 0x80	; 128
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <led_plane_x_up+0xa>
    27fe:	35 95       	asr	r19
    2800:	27 95       	ror	r18
    2802:	8a 95       	dec	r24
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <led_plane_x_up+0x6>
	bit_off=~bit_on;
    2806:	92 2f       	mov	r25, r18
    2808:	90 95       	com	r25

	#define T 0
	#define S 8
	led_frame_bitmap[0+T] &=bit_off;
    280a:	30 91 47 02 	lds	r19, 0x0247
    280e:	39 23       	and	r19, r25
    2810:	30 93 47 02 	sts	0x0247, r19
	led_frame_bitmap[1+T] &=bit_off;
    2814:	80 91 48 02 	lds	r24, 0x0248
    2818:	89 23       	and	r24, r25
    281a:	80 93 48 02 	sts	0x0248, r24
	led_frame_bitmap[2+T] &=bit_off;
    281e:	80 91 49 02 	lds	r24, 0x0249
    2822:	89 23       	and	r24, r25
    2824:	80 93 49 02 	sts	0x0249, r24
	led_frame_bitmap[3+T] &=bit_off;
    2828:	80 91 4a 02 	lds	r24, 0x024A
    282c:	89 23       	and	r24, r25
    282e:	80 93 4a 02 	sts	0x024A, r24
	led_frame_bitmap[4+T] &=bit_off;
    2832:	80 91 4b 02 	lds	r24, 0x024B
    2836:	89 23       	and	r24, r25
    2838:	80 93 4b 02 	sts	0x024B, r24
	led_frame_bitmap[5+T] &=bit_off;
    283c:	80 91 4c 02 	lds	r24, 0x024C
    2840:	89 23       	and	r24, r25
    2842:	80 93 4c 02 	sts	0x024C, r24
	led_frame_bitmap[6+T] &=bit_off;
    2846:	80 91 4d 02 	lds	r24, 0x024D
    284a:	89 23       	and	r24, r25
    284c:	80 93 4d 02 	sts	0x024D, r24
	led_frame_bitmap[7+T] &=bit_off;
    2850:	80 91 4e 02 	lds	r24, 0x024E
    2854:	89 23       	and	r24, r25
    2856:	80 93 4e 02 	sts	0x024E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    285a:	80 91 4f 02 	lds	r24, 0x024F
    285e:	82 23       	and	r24, r18
    2860:	19 f0       	breq	.+6      	; 0x2868 <led_plane_x_up+0x70>
		led_frame_bitmap[0+T] |= bit_on;
    2862:	32 2b       	or	r19, r18
    2864:	30 93 47 02 	sts	0x0247, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2868:	80 91 50 02 	lds	r24, 0x0250
    286c:	82 23       	and	r24, r18
    286e:	29 f0       	breq	.+10     	; 0x287a <led_plane_x_up+0x82>
		led_frame_bitmap[1+T] |= bit_on;
    2870:	80 91 48 02 	lds	r24, 0x0248
    2874:	82 2b       	or	r24, r18
    2876:	80 93 48 02 	sts	0x0248, r24
	if(led_frame_bitmap[2+S] & bit_on)
    287a:	80 91 51 02 	lds	r24, 0x0251
    287e:	82 23       	and	r24, r18
    2880:	29 f0       	breq	.+10     	; 0x288c <led_plane_x_up+0x94>
		led_frame_bitmap[2+T] |= bit_on;
    2882:	80 91 49 02 	lds	r24, 0x0249
    2886:	82 2b       	or	r24, r18
    2888:	80 93 49 02 	sts	0x0249, r24
	if(led_frame_bitmap[3+S] & bit_on)
    288c:	80 91 52 02 	lds	r24, 0x0252
    2890:	82 23       	and	r24, r18
    2892:	29 f0       	breq	.+10     	; 0x289e <led_plane_x_up+0xa6>
		led_frame_bitmap[3+T] |= bit_on;
    2894:	80 91 4a 02 	lds	r24, 0x024A
    2898:	82 2b       	or	r24, r18
    289a:	80 93 4a 02 	sts	0x024A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    289e:	80 91 53 02 	lds	r24, 0x0253
    28a2:	82 23       	and	r24, r18
    28a4:	29 f0       	breq	.+10     	; 0x28b0 <led_plane_x_up+0xb8>
		led_frame_bitmap[4+T] |= bit_on;
    28a6:	80 91 4b 02 	lds	r24, 0x024B
    28aa:	82 2b       	or	r24, r18
    28ac:	80 93 4b 02 	sts	0x024B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    28b0:	80 91 54 02 	lds	r24, 0x0254
    28b4:	82 23       	and	r24, r18
    28b6:	29 f0       	breq	.+10     	; 0x28c2 <led_plane_x_up+0xca>
		led_frame_bitmap[5+T] |= bit_on;
    28b8:	80 91 4c 02 	lds	r24, 0x024C
    28bc:	82 2b       	or	r24, r18
    28be:	80 93 4c 02 	sts	0x024C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    28c2:	80 91 55 02 	lds	r24, 0x0255
    28c6:	82 23       	and	r24, r18
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <led_plane_x_up+0xdc>
		led_frame_bitmap[6+T] |= bit_on;
    28ca:	80 91 4d 02 	lds	r24, 0x024D
    28ce:	82 2b       	or	r24, r18
    28d0:	80 93 4d 02 	sts	0x024D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    28d4:	80 91 56 02 	lds	r24, 0x0256
    28d8:	82 23       	and	r24, r18
    28da:	29 f0       	breq	.+10     	; 0x28e6 <led_plane_x_up+0xee>
		led_frame_bitmap[7+T] |= bit_on;
    28dc:	80 91 4e 02 	lds	r24, 0x024E
    28e0:	82 2b       	or	r24, r18
    28e2:	80 93 4e 02 	sts	0x024E, r24
	#undef T
	#undef S
	
	#define T 8
	#define S 16
	led_frame_bitmap[0+T] &=bit_off;
    28e6:	30 91 4f 02 	lds	r19, 0x024F
    28ea:	39 23       	and	r19, r25
    28ec:	30 93 4f 02 	sts	0x024F, r19
	led_frame_bitmap[1+T] &=bit_off;
    28f0:	80 91 50 02 	lds	r24, 0x0250
    28f4:	89 23       	and	r24, r25
    28f6:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[2+T] &=bit_off;
    28fa:	80 91 51 02 	lds	r24, 0x0251
    28fe:	89 23       	and	r24, r25
    2900:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[3+T] &=bit_off;
    2904:	80 91 52 02 	lds	r24, 0x0252
    2908:	89 23       	and	r24, r25
    290a:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[4+T] &=bit_off;
    290e:	80 91 53 02 	lds	r24, 0x0253
    2912:	89 23       	and	r24, r25
    2914:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[5+T] &=bit_off;
    2918:	80 91 54 02 	lds	r24, 0x0254
    291c:	89 23       	and	r24, r25
    291e:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[6+T] &=bit_off;
    2922:	80 91 55 02 	lds	r24, 0x0255
    2926:	89 23       	and	r24, r25
    2928:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[7+T] &=bit_off;
    292c:	80 91 56 02 	lds	r24, 0x0256
    2930:	89 23       	and	r24, r25
    2932:	80 93 56 02 	sts	0x0256, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2936:	80 91 57 02 	lds	r24, 0x0257
    293a:	82 23       	and	r24, r18
    293c:	19 f0       	breq	.+6      	; 0x2944 <led_plane_x_up+0x14c>
		led_frame_bitmap[0+T] |= bit_on;
    293e:	32 2b       	or	r19, r18
    2940:	30 93 4f 02 	sts	0x024F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2944:	80 91 58 02 	lds	r24, 0x0258
    2948:	82 23       	and	r24, r18
    294a:	29 f0       	breq	.+10     	; 0x2956 <led_plane_x_up+0x15e>
		led_frame_bitmap[1+T] |= bit_on;
    294c:	80 91 50 02 	lds	r24, 0x0250
    2950:	82 2b       	or	r24, r18
    2952:	80 93 50 02 	sts	0x0250, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2956:	80 91 59 02 	lds	r24, 0x0259
    295a:	82 23       	and	r24, r18
    295c:	29 f0       	breq	.+10     	; 0x2968 <led_plane_x_up+0x170>
		led_frame_bitmap[2+T] |= bit_on;
    295e:	80 91 51 02 	lds	r24, 0x0251
    2962:	82 2b       	or	r24, r18
    2964:	80 93 51 02 	sts	0x0251, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2968:	80 91 5a 02 	lds	r24, 0x025A
    296c:	82 23       	and	r24, r18
    296e:	29 f0       	breq	.+10     	; 0x297a <led_plane_x_up+0x182>
		led_frame_bitmap[3+T] |= bit_on;
    2970:	80 91 52 02 	lds	r24, 0x0252
    2974:	82 2b       	or	r24, r18
    2976:	80 93 52 02 	sts	0x0252, r24
	if(led_frame_bitmap[4+S] & bit_on)
    297a:	80 91 5b 02 	lds	r24, 0x025B
    297e:	82 23       	and	r24, r18
    2980:	29 f0       	breq	.+10     	; 0x298c <led_plane_x_up+0x194>
		led_frame_bitmap[4+T] |= bit_on;
    2982:	80 91 53 02 	lds	r24, 0x0253
    2986:	82 2b       	or	r24, r18
    2988:	80 93 53 02 	sts	0x0253, r24
	if(led_frame_bitmap[5+S] & bit_on)
    298c:	80 91 5c 02 	lds	r24, 0x025C
    2990:	82 23       	and	r24, r18
    2992:	29 f0       	breq	.+10     	; 0x299e <led_plane_x_up+0x1a6>
		led_frame_bitmap[5+T] |= bit_on;
    2994:	80 91 54 02 	lds	r24, 0x0254
    2998:	82 2b       	or	r24, r18
    299a:	80 93 54 02 	sts	0x0254, r24
	if(led_frame_bitmap[6+S] & bit_on)
    299e:	80 91 5d 02 	lds	r24, 0x025D
    29a2:	82 23       	and	r24, r18
    29a4:	29 f0       	breq	.+10     	; 0x29b0 <led_plane_x_up+0x1b8>
		led_frame_bitmap[6+T] |= bit_on;
    29a6:	80 91 55 02 	lds	r24, 0x0255
    29aa:	82 2b       	or	r24, r18
    29ac:	80 93 55 02 	sts	0x0255, r24
	if(led_frame_bitmap[7+S] & bit_on)
    29b0:	80 91 5e 02 	lds	r24, 0x025E
    29b4:	82 23       	and	r24, r18
    29b6:	29 f0       	breq	.+10     	; 0x29c2 <led_plane_x_up+0x1ca>
		led_frame_bitmap[7+T] |= bit_on;
    29b8:	80 91 56 02 	lds	r24, 0x0256
    29bc:	82 2b       	or	r24, r18
    29be:	80 93 56 02 	sts	0x0256, r24
	#undef T
	#undef S

	#define T 16
	#define S 24
	led_frame_bitmap[0+T] &=bit_off;
    29c2:	30 91 57 02 	lds	r19, 0x0257
    29c6:	39 23       	and	r19, r25
    29c8:	30 93 57 02 	sts	0x0257, r19
	led_frame_bitmap[1+T] &=bit_off;
    29cc:	80 91 58 02 	lds	r24, 0x0258
    29d0:	89 23       	and	r24, r25
    29d2:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[2+T] &=bit_off;
    29d6:	80 91 59 02 	lds	r24, 0x0259
    29da:	89 23       	and	r24, r25
    29dc:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[3+T] &=bit_off;
    29e0:	80 91 5a 02 	lds	r24, 0x025A
    29e4:	89 23       	and	r24, r25
    29e6:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[4+T] &=bit_off;
    29ea:	80 91 5b 02 	lds	r24, 0x025B
    29ee:	89 23       	and	r24, r25
    29f0:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[5+T] &=bit_off;
    29f4:	80 91 5c 02 	lds	r24, 0x025C
    29f8:	89 23       	and	r24, r25
    29fa:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[6+T] &=bit_off;
    29fe:	80 91 5d 02 	lds	r24, 0x025D
    2a02:	89 23       	and	r24, r25
    2a04:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[7+T] &=bit_off;
    2a08:	80 91 5e 02 	lds	r24, 0x025E
    2a0c:	89 23       	and	r24, r25
    2a0e:	80 93 5e 02 	sts	0x025E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2a12:	80 91 5f 02 	lds	r24, 0x025F
    2a16:	82 23       	and	r24, r18
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <led_plane_x_up+0x228>
		led_frame_bitmap[0+T] |= bit_on;
    2a1a:	32 2b       	or	r19, r18
    2a1c:	30 93 57 02 	sts	0x0257, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2a20:	80 91 60 02 	lds	r24, 0x0260
    2a24:	82 23       	and	r24, r18
    2a26:	29 f0       	breq	.+10     	; 0x2a32 <led_plane_x_up+0x23a>
		led_frame_bitmap[1+T] |= bit_on;
    2a28:	80 91 58 02 	lds	r24, 0x0258
    2a2c:	82 2b       	or	r24, r18
    2a2e:	80 93 58 02 	sts	0x0258, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2a32:	80 91 61 02 	lds	r24, 0x0261
    2a36:	82 23       	and	r24, r18
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <led_plane_x_up+0x24c>
		led_frame_bitmap[2+T] |= bit_on;
    2a3a:	80 91 59 02 	lds	r24, 0x0259
    2a3e:	82 2b       	or	r24, r18
    2a40:	80 93 59 02 	sts	0x0259, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2a44:	80 91 62 02 	lds	r24, 0x0262
    2a48:	82 23       	and	r24, r18
    2a4a:	29 f0       	breq	.+10     	; 0x2a56 <led_plane_x_up+0x25e>
		led_frame_bitmap[3+T] |= bit_on;
    2a4c:	80 91 5a 02 	lds	r24, 0x025A
    2a50:	82 2b       	or	r24, r18
    2a52:	80 93 5a 02 	sts	0x025A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2a56:	80 91 63 02 	lds	r24, 0x0263
    2a5a:	82 23       	and	r24, r18
    2a5c:	29 f0       	breq	.+10     	; 0x2a68 <led_plane_x_up+0x270>
		led_frame_bitmap[4+T] |= bit_on;
    2a5e:	80 91 5b 02 	lds	r24, 0x025B
    2a62:	82 2b       	or	r24, r18
    2a64:	80 93 5b 02 	sts	0x025B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2a68:	80 91 64 02 	lds	r24, 0x0264
    2a6c:	82 23       	and	r24, r18
    2a6e:	29 f0       	breq	.+10     	; 0x2a7a <led_plane_x_up+0x282>
		led_frame_bitmap[5+T] |= bit_on;
    2a70:	80 91 5c 02 	lds	r24, 0x025C
    2a74:	82 2b       	or	r24, r18
    2a76:	80 93 5c 02 	sts	0x025C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2a7a:	80 91 65 02 	lds	r24, 0x0265
    2a7e:	82 23       	and	r24, r18
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <led_plane_x_up+0x294>
		led_frame_bitmap[6+T] |= bit_on;
    2a82:	80 91 5d 02 	lds	r24, 0x025D
    2a86:	82 2b       	or	r24, r18
    2a88:	80 93 5d 02 	sts	0x025D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2a8c:	80 91 66 02 	lds	r24, 0x0266
    2a90:	82 23       	and	r24, r18
    2a92:	29 f0       	breq	.+10     	; 0x2a9e <led_plane_x_up+0x2a6>
		led_frame_bitmap[7+T] |= bit_on;
    2a94:	80 91 5e 02 	lds	r24, 0x025E
    2a98:	82 2b       	or	r24, r18
    2a9a:	80 93 5e 02 	sts	0x025E, r24
	#undef T
	#undef S

	#define T 24
	#define S 32
	led_frame_bitmap[0+T] &=bit_off;
    2a9e:	30 91 5f 02 	lds	r19, 0x025F
    2aa2:	39 23       	and	r19, r25
    2aa4:	30 93 5f 02 	sts	0x025F, r19
	led_frame_bitmap[1+T] &=bit_off;
    2aa8:	80 91 60 02 	lds	r24, 0x0260
    2aac:	89 23       	and	r24, r25
    2aae:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[2+T] &=bit_off;
    2ab2:	80 91 61 02 	lds	r24, 0x0261
    2ab6:	89 23       	and	r24, r25
    2ab8:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[3+T] &=bit_off;
    2abc:	80 91 62 02 	lds	r24, 0x0262
    2ac0:	89 23       	and	r24, r25
    2ac2:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[4+T] &=bit_off;
    2ac6:	80 91 63 02 	lds	r24, 0x0263
    2aca:	89 23       	and	r24, r25
    2acc:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[5+T] &=bit_off;
    2ad0:	80 91 64 02 	lds	r24, 0x0264
    2ad4:	89 23       	and	r24, r25
    2ad6:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[6+T] &=bit_off;
    2ada:	80 91 65 02 	lds	r24, 0x0265
    2ade:	89 23       	and	r24, r25
    2ae0:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[7+T] &=bit_off;
    2ae4:	80 91 66 02 	lds	r24, 0x0266
    2ae8:	89 23       	and	r24, r25
    2aea:	80 93 66 02 	sts	0x0266, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2aee:	80 91 67 02 	lds	r24, 0x0267
    2af2:	82 23       	and	r24, r18
    2af4:	19 f0       	breq	.+6      	; 0x2afc <led_plane_x_up+0x304>
		led_frame_bitmap[0+T] |= bit_on;
    2af6:	32 2b       	or	r19, r18
    2af8:	30 93 5f 02 	sts	0x025F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2afc:	80 91 68 02 	lds	r24, 0x0268
    2b00:	82 23       	and	r24, r18
    2b02:	29 f0       	breq	.+10     	; 0x2b0e <led_plane_x_up+0x316>
		led_frame_bitmap[1+T] |= bit_on;
    2b04:	80 91 60 02 	lds	r24, 0x0260
    2b08:	82 2b       	or	r24, r18
    2b0a:	80 93 60 02 	sts	0x0260, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2b0e:	80 91 69 02 	lds	r24, 0x0269
    2b12:	82 23       	and	r24, r18
    2b14:	29 f0       	breq	.+10     	; 0x2b20 <led_plane_x_up+0x328>
		led_frame_bitmap[2+T] |= bit_on;
    2b16:	80 91 61 02 	lds	r24, 0x0261
    2b1a:	82 2b       	or	r24, r18
    2b1c:	80 93 61 02 	sts	0x0261, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2b20:	80 91 6a 02 	lds	r24, 0x026A
    2b24:	82 23       	and	r24, r18
    2b26:	29 f0       	breq	.+10     	; 0x2b32 <led_plane_x_up+0x33a>
		led_frame_bitmap[3+T] |= bit_on;
    2b28:	80 91 62 02 	lds	r24, 0x0262
    2b2c:	82 2b       	or	r24, r18
    2b2e:	80 93 62 02 	sts	0x0262, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2b32:	80 91 6b 02 	lds	r24, 0x026B
    2b36:	82 23       	and	r24, r18
    2b38:	29 f0       	breq	.+10     	; 0x2b44 <led_plane_x_up+0x34c>
		led_frame_bitmap[4+T] |= bit_on;
    2b3a:	80 91 63 02 	lds	r24, 0x0263
    2b3e:	82 2b       	or	r24, r18
    2b40:	80 93 63 02 	sts	0x0263, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2b44:	80 91 6c 02 	lds	r24, 0x026C
    2b48:	82 23       	and	r24, r18
    2b4a:	29 f0       	breq	.+10     	; 0x2b56 <led_plane_x_up+0x35e>
		led_frame_bitmap[5+T] |= bit_on;
    2b4c:	80 91 64 02 	lds	r24, 0x0264
    2b50:	82 2b       	or	r24, r18
    2b52:	80 93 64 02 	sts	0x0264, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2b56:	80 91 6d 02 	lds	r24, 0x026D
    2b5a:	82 23       	and	r24, r18
    2b5c:	29 f0       	breq	.+10     	; 0x2b68 <led_plane_x_up+0x370>
		led_frame_bitmap[6+T] |= bit_on;
    2b5e:	80 91 65 02 	lds	r24, 0x0265
    2b62:	82 2b       	or	r24, r18
    2b64:	80 93 65 02 	sts	0x0265, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2b68:	80 91 6e 02 	lds	r24, 0x026E
    2b6c:	82 23       	and	r24, r18
    2b6e:	29 f0       	breq	.+10     	; 0x2b7a <led_plane_x_up+0x382>
		led_frame_bitmap[7+T] |= bit_on;
    2b70:	80 91 66 02 	lds	r24, 0x0266
    2b74:	82 2b       	or	r24, r18
    2b76:	80 93 66 02 	sts	0x0266, r24
	#undef T
	#undef S

	#define T 32
	#define S 40
	led_frame_bitmap[0+T] &=bit_off;
    2b7a:	30 91 67 02 	lds	r19, 0x0267
    2b7e:	39 23       	and	r19, r25
    2b80:	30 93 67 02 	sts	0x0267, r19
	led_frame_bitmap[1+T] &=bit_off;
    2b84:	80 91 68 02 	lds	r24, 0x0268
    2b88:	89 23       	and	r24, r25
    2b8a:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[2+T] &=bit_off;
    2b8e:	80 91 69 02 	lds	r24, 0x0269
    2b92:	89 23       	and	r24, r25
    2b94:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[3+T] &=bit_off;
    2b98:	80 91 6a 02 	lds	r24, 0x026A
    2b9c:	89 23       	and	r24, r25
    2b9e:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[4+T] &=bit_off;
    2ba2:	80 91 6b 02 	lds	r24, 0x026B
    2ba6:	89 23       	and	r24, r25
    2ba8:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[5+T] &=bit_off;
    2bac:	80 91 6c 02 	lds	r24, 0x026C
    2bb0:	89 23       	and	r24, r25
    2bb2:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[6+T] &=bit_off;
    2bb6:	80 91 6d 02 	lds	r24, 0x026D
    2bba:	89 23       	and	r24, r25
    2bbc:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[7+T] &=bit_off;
    2bc0:	80 91 6e 02 	lds	r24, 0x026E
    2bc4:	89 23       	and	r24, r25
    2bc6:	80 93 6e 02 	sts	0x026E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2bca:	80 91 6f 02 	lds	r24, 0x026F
    2bce:	82 23       	and	r24, r18
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <led_plane_x_up+0x3e0>
		led_frame_bitmap[0+T] |= bit_on;
    2bd2:	32 2b       	or	r19, r18
    2bd4:	30 93 67 02 	sts	0x0267, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2bd8:	80 91 70 02 	lds	r24, 0x0270
    2bdc:	82 23       	and	r24, r18
    2bde:	29 f0       	breq	.+10     	; 0x2bea <led_plane_x_up+0x3f2>
		led_frame_bitmap[1+T] |= bit_on;
    2be0:	80 91 68 02 	lds	r24, 0x0268
    2be4:	82 2b       	or	r24, r18
    2be6:	80 93 68 02 	sts	0x0268, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2bea:	80 91 71 02 	lds	r24, 0x0271
    2bee:	82 23       	and	r24, r18
    2bf0:	29 f0       	breq	.+10     	; 0x2bfc <led_plane_x_up+0x404>
		led_frame_bitmap[2+T] |= bit_on;
    2bf2:	80 91 69 02 	lds	r24, 0x0269
    2bf6:	82 2b       	or	r24, r18
    2bf8:	80 93 69 02 	sts	0x0269, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2bfc:	80 91 72 02 	lds	r24, 0x0272
    2c00:	82 23       	and	r24, r18
    2c02:	29 f0       	breq	.+10     	; 0x2c0e <led_plane_x_up+0x416>
		led_frame_bitmap[3+T] |= bit_on;
    2c04:	80 91 6a 02 	lds	r24, 0x026A
    2c08:	82 2b       	or	r24, r18
    2c0a:	80 93 6a 02 	sts	0x026A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2c0e:	80 91 73 02 	lds	r24, 0x0273
    2c12:	82 23       	and	r24, r18
    2c14:	29 f0       	breq	.+10     	; 0x2c20 <led_plane_x_up+0x428>
		led_frame_bitmap[4+T] |= bit_on;
    2c16:	80 91 6b 02 	lds	r24, 0x026B
    2c1a:	82 2b       	or	r24, r18
    2c1c:	80 93 6b 02 	sts	0x026B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2c20:	80 91 74 02 	lds	r24, 0x0274
    2c24:	82 23       	and	r24, r18
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <led_plane_x_up+0x43a>
		led_frame_bitmap[5+T] |= bit_on;
    2c28:	80 91 6c 02 	lds	r24, 0x026C
    2c2c:	82 2b       	or	r24, r18
    2c2e:	80 93 6c 02 	sts	0x026C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2c32:	80 91 75 02 	lds	r24, 0x0275
    2c36:	82 23       	and	r24, r18
    2c38:	29 f0       	breq	.+10     	; 0x2c44 <led_plane_x_up+0x44c>
		led_frame_bitmap[6+T] |= bit_on;
    2c3a:	80 91 6d 02 	lds	r24, 0x026D
    2c3e:	82 2b       	or	r24, r18
    2c40:	80 93 6d 02 	sts	0x026D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2c44:	80 91 76 02 	lds	r24, 0x0276
    2c48:	82 23       	and	r24, r18
    2c4a:	29 f0       	breq	.+10     	; 0x2c56 <led_plane_x_up+0x45e>
		led_frame_bitmap[7+T] |= bit_on;
    2c4c:	80 91 6e 02 	lds	r24, 0x026E
    2c50:	82 2b       	or	r24, r18
    2c52:	80 93 6e 02 	sts	0x026E, r24
	#undef T
	#undef S

	#define T 40
	#define S 48
	led_frame_bitmap[0+T] &=bit_off;
    2c56:	30 91 6f 02 	lds	r19, 0x026F
    2c5a:	39 23       	and	r19, r25
    2c5c:	30 93 6f 02 	sts	0x026F, r19
	led_frame_bitmap[1+T] &=bit_off;
    2c60:	80 91 70 02 	lds	r24, 0x0270
    2c64:	89 23       	and	r24, r25
    2c66:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[2+T] &=bit_off;
    2c6a:	80 91 71 02 	lds	r24, 0x0271
    2c6e:	89 23       	and	r24, r25
    2c70:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[3+T] &=bit_off;
    2c74:	80 91 72 02 	lds	r24, 0x0272
    2c78:	89 23       	and	r24, r25
    2c7a:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[4+T] &=bit_off;
    2c7e:	80 91 73 02 	lds	r24, 0x0273
    2c82:	89 23       	and	r24, r25
    2c84:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[5+T] &=bit_off;
    2c88:	80 91 74 02 	lds	r24, 0x0274
    2c8c:	89 23       	and	r24, r25
    2c8e:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[6+T] &=bit_off;
    2c92:	80 91 75 02 	lds	r24, 0x0275
    2c96:	89 23       	and	r24, r25
    2c98:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[7+T] &=bit_off;
    2c9c:	80 91 76 02 	lds	r24, 0x0276
    2ca0:	89 23       	and	r24, r25
    2ca2:	80 93 76 02 	sts	0x0276, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2ca6:	80 91 77 02 	lds	r24, 0x0277
    2caa:	82 23       	and	r24, r18
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <led_plane_x_up+0x4bc>
		led_frame_bitmap[0+T] |= bit_on;
    2cae:	32 2b       	or	r19, r18
    2cb0:	30 93 6f 02 	sts	0x026F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2cb4:	80 91 78 02 	lds	r24, 0x0278
    2cb8:	82 23       	and	r24, r18
    2cba:	29 f0       	breq	.+10     	; 0x2cc6 <led_plane_x_up+0x4ce>
		led_frame_bitmap[1+T] |= bit_on;
    2cbc:	80 91 70 02 	lds	r24, 0x0270
    2cc0:	82 2b       	or	r24, r18
    2cc2:	80 93 70 02 	sts	0x0270, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2cc6:	80 91 79 02 	lds	r24, 0x0279
    2cca:	82 23       	and	r24, r18
    2ccc:	29 f0       	breq	.+10     	; 0x2cd8 <led_plane_x_up+0x4e0>
		led_frame_bitmap[2+T] |= bit_on;
    2cce:	80 91 71 02 	lds	r24, 0x0271
    2cd2:	82 2b       	or	r24, r18
    2cd4:	80 93 71 02 	sts	0x0271, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2cd8:	80 91 7a 02 	lds	r24, 0x027A
    2cdc:	82 23       	and	r24, r18
    2cde:	29 f0       	breq	.+10     	; 0x2cea <led_plane_x_up+0x4f2>
		led_frame_bitmap[3+T] |= bit_on;
    2ce0:	80 91 72 02 	lds	r24, 0x0272
    2ce4:	82 2b       	or	r24, r18
    2ce6:	80 93 72 02 	sts	0x0272, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2cea:	80 91 7b 02 	lds	r24, 0x027B
    2cee:	82 23       	and	r24, r18
    2cf0:	29 f0       	breq	.+10     	; 0x2cfc <led_plane_x_up+0x504>
		led_frame_bitmap[4+T] |= bit_on;
    2cf2:	80 91 73 02 	lds	r24, 0x0273
    2cf6:	82 2b       	or	r24, r18
    2cf8:	80 93 73 02 	sts	0x0273, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2cfc:	80 91 7c 02 	lds	r24, 0x027C
    2d00:	82 23       	and	r24, r18
    2d02:	29 f0       	breq	.+10     	; 0x2d0e <led_plane_x_up+0x516>
		led_frame_bitmap[5+T] |= bit_on;
    2d04:	80 91 74 02 	lds	r24, 0x0274
    2d08:	82 2b       	or	r24, r18
    2d0a:	80 93 74 02 	sts	0x0274, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2d0e:	80 91 7d 02 	lds	r24, 0x027D
    2d12:	82 23       	and	r24, r18
    2d14:	29 f0       	breq	.+10     	; 0x2d20 <led_plane_x_up+0x528>
		led_frame_bitmap[6+T] |= bit_on;
    2d16:	80 91 75 02 	lds	r24, 0x0275
    2d1a:	82 2b       	or	r24, r18
    2d1c:	80 93 75 02 	sts	0x0275, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2d20:	80 91 7e 02 	lds	r24, 0x027E
    2d24:	82 23       	and	r24, r18
    2d26:	29 f0       	breq	.+10     	; 0x2d32 <led_plane_x_up+0x53a>
		led_frame_bitmap[7+T] |= bit_on;
    2d28:	80 91 76 02 	lds	r24, 0x0276
    2d2c:	82 2b       	or	r24, r18
    2d2e:	80 93 76 02 	sts	0x0276, r24
	#undef T
	#undef S

	#define T 48
	#define S 56
	led_frame_bitmap[0+T] &=bit_off;
    2d32:	30 91 77 02 	lds	r19, 0x0277
    2d36:	39 23       	and	r19, r25
    2d38:	30 93 77 02 	sts	0x0277, r19
	led_frame_bitmap[1+T] &=bit_off;
    2d3c:	80 91 78 02 	lds	r24, 0x0278
    2d40:	89 23       	and	r24, r25
    2d42:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[2+T] &=bit_off;
    2d46:	80 91 79 02 	lds	r24, 0x0279
    2d4a:	89 23       	and	r24, r25
    2d4c:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[3+T] &=bit_off;
    2d50:	80 91 7a 02 	lds	r24, 0x027A
    2d54:	89 23       	and	r24, r25
    2d56:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[4+T] &=bit_off;
    2d5a:	80 91 7b 02 	lds	r24, 0x027B
    2d5e:	89 23       	and	r24, r25
    2d60:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[5+T] &=bit_off;
    2d64:	80 91 7c 02 	lds	r24, 0x027C
    2d68:	89 23       	and	r24, r25
    2d6a:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[6+T] &=bit_off;
    2d6e:	80 91 7d 02 	lds	r24, 0x027D
    2d72:	89 23       	and	r24, r25
    2d74:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[7+T] &=bit_off;
    2d78:	80 91 7e 02 	lds	r24, 0x027E
    2d7c:	89 23       	and	r24, r25
    2d7e:	80 93 7e 02 	sts	0x027E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2d82:	80 91 7f 02 	lds	r24, 0x027F
    2d86:	82 23       	and	r24, r18
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <led_plane_x_up+0x598>
		led_frame_bitmap[0+T] |= bit_on;
    2d8a:	32 2b       	or	r19, r18
    2d8c:	30 93 77 02 	sts	0x0277, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2d90:	80 91 80 02 	lds	r24, 0x0280
    2d94:	82 23       	and	r24, r18
    2d96:	29 f0       	breq	.+10     	; 0x2da2 <led_plane_x_up+0x5aa>
		led_frame_bitmap[1+T] |= bit_on;
    2d98:	80 91 78 02 	lds	r24, 0x0278
    2d9c:	82 2b       	or	r24, r18
    2d9e:	80 93 78 02 	sts	0x0278, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2da2:	80 91 81 02 	lds	r24, 0x0281
    2da6:	82 23       	and	r24, r18
    2da8:	29 f0       	breq	.+10     	; 0x2db4 <led_plane_x_up+0x5bc>
		led_frame_bitmap[2+T] |= bit_on;
    2daa:	80 91 79 02 	lds	r24, 0x0279
    2dae:	82 2b       	or	r24, r18
    2db0:	80 93 79 02 	sts	0x0279, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2db4:	80 91 82 02 	lds	r24, 0x0282
    2db8:	82 23       	and	r24, r18
    2dba:	29 f0       	breq	.+10     	; 0x2dc6 <led_plane_x_up+0x5ce>
		led_frame_bitmap[3+T] |= bit_on;
    2dbc:	80 91 7a 02 	lds	r24, 0x027A
    2dc0:	82 2b       	or	r24, r18
    2dc2:	80 93 7a 02 	sts	0x027A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2dc6:	80 91 83 02 	lds	r24, 0x0283
    2dca:	82 23       	and	r24, r18
    2dcc:	29 f0       	breq	.+10     	; 0x2dd8 <led_plane_x_up+0x5e0>
		led_frame_bitmap[4+T] |= bit_on;
    2dce:	80 91 7b 02 	lds	r24, 0x027B
    2dd2:	82 2b       	or	r24, r18
    2dd4:	80 93 7b 02 	sts	0x027B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2dd8:	80 91 84 02 	lds	r24, 0x0284
    2ddc:	82 23       	and	r24, r18
    2dde:	29 f0       	breq	.+10     	; 0x2dea <led_plane_x_up+0x5f2>
		led_frame_bitmap[5+T] |= bit_on;
    2de0:	80 91 7c 02 	lds	r24, 0x027C
    2de4:	82 2b       	or	r24, r18
    2de6:	80 93 7c 02 	sts	0x027C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2dea:	80 91 85 02 	lds	r24, 0x0285
    2dee:	82 23       	and	r24, r18
    2df0:	29 f0       	breq	.+10     	; 0x2dfc <led_plane_x_up+0x604>
		led_frame_bitmap[6+T] |= bit_on;
    2df2:	80 91 7d 02 	lds	r24, 0x027D
    2df6:	82 2b       	or	r24, r18
    2df8:	80 93 7d 02 	sts	0x027D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2dfc:	80 91 86 02 	lds	r24, 0x0286
    2e00:	82 23       	and	r24, r18
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <led_plane_x_up+0x616>
		led_frame_bitmap[7+T] |= bit_on;
    2e04:	80 91 7e 02 	lds	r24, 0x027E
    2e08:	28 2b       	or	r18, r24
    2e0a:	20 93 7e 02 	sts	0x027E, r18
	#undef T
	#undef S

	#define T 56
	led_frame_bitmap[0+T] &=bit_off;
    2e0e:	80 91 7f 02 	lds	r24, 0x027F
    2e12:	89 23       	and	r24, r25
    2e14:	80 93 7f 02 	sts	0x027F, r24
	led_frame_bitmap[1+T] &=bit_off;
    2e18:	80 91 80 02 	lds	r24, 0x0280
    2e1c:	89 23       	and	r24, r25
    2e1e:	80 93 80 02 	sts	0x0280, r24
	led_frame_bitmap[2+T] &=bit_off;
    2e22:	80 91 81 02 	lds	r24, 0x0281
    2e26:	89 23       	and	r24, r25
    2e28:	80 93 81 02 	sts	0x0281, r24
	led_frame_bitmap[3+T] &=bit_off;
    2e2c:	80 91 82 02 	lds	r24, 0x0282
    2e30:	89 23       	and	r24, r25
    2e32:	80 93 82 02 	sts	0x0282, r24
	led_frame_bitmap[4+T] &=bit_off;
    2e36:	80 91 83 02 	lds	r24, 0x0283
    2e3a:	89 23       	and	r24, r25
    2e3c:	80 93 83 02 	sts	0x0283, r24
	led_frame_bitmap[5+T] &=bit_off;
    2e40:	80 91 84 02 	lds	r24, 0x0284
    2e44:	89 23       	and	r24, r25
    2e46:	80 93 84 02 	sts	0x0284, r24
	led_frame_bitmap[6+T] &=bit_off;
    2e4a:	80 91 85 02 	lds	r24, 0x0285
    2e4e:	89 23       	and	r24, r25
    2e50:	80 93 85 02 	sts	0x0285, r24
	led_frame_bitmap[7+T] &=bit_off;
    2e54:	80 91 86 02 	lds	r24, 0x0286
    2e58:	98 23       	and	r25, r24
    2e5a:	90 93 86 02 	sts	0x0286, r25
	#undef T
}
    2e5e:	08 95       	ret

00002e60 <led_plane_x_down>:
//scroll a verticle plane 1 pixel down, new top row is blank
void led_plane_x_down(unsigned char x)
{
	unsigned char bit_off, bit_on;
	
	bit_on=0x80>>x;
    2e60:	20 e8       	ldi	r18, 0x80	; 128
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <led_plane_x_down+0xa>
    2e66:	35 95       	asr	r19
    2e68:	27 95       	ror	r18
    2e6a:	8a 95       	dec	r24
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <led_plane_x_down+0x6>
	bit_off=~bit_on;
    2e6e:	92 2f       	mov	r25, r18
    2e70:	90 95       	com	r25

	#define T 56
	#define S 48
	led_frame_bitmap[0+T] &=bit_off;
    2e72:	30 91 7f 02 	lds	r19, 0x027F
    2e76:	39 23       	and	r19, r25
    2e78:	30 93 7f 02 	sts	0x027F, r19
	led_frame_bitmap[1+T] &=bit_off;
    2e7c:	80 91 80 02 	lds	r24, 0x0280
    2e80:	89 23       	and	r24, r25
    2e82:	80 93 80 02 	sts	0x0280, r24
	led_frame_bitmap[2+T] &=bit_off;
    2e86:	80 91 81 02 	lds	r24, 0x0281
    2e8a:	89 23       	and	r24, r25
    2e8c:	80 93 81 02 	sts	0x0281, r24
	led_frame_bitmap[3+T] &=bit_off;
    2e90:	80 91 82 02 	lds	r24, 0x0282
    2e94:	89 23       	and	r24, r25
    2e96:	80 93 82 02 	sts	0x0282, r24
	led_frame_bitmap[4+T] &=bit_off;
    2e9a:	80 91 83 02 	lds	r24, 0x0283
    2e9e:	89 23       	and	r24, r25
    2ea0:	80 93 83 02 	sts	0x0283, r24
	led_frame_bitmap[5+T] &=bit_off;
    2ea4:	80 91 84 02 	lds	r24, 0x0284
    2ea8:	89 23       	and	r24, r25
    2eaa:	80 93 84 02 	sts	0x0284, r24
	led_frame_bitmap[6+T] &=bit_off;
    2eae:	80 91 85 02 	lds	r24, 0x0285
    2eb2:	89 23       	and	r24, r25
    2eb4:	80 93 85 02 	sts	0x0285, r24
	led_frame_bitmap[7+T] &=bit_off;
    2eb8:	80 91 86 02 	lds	r24, 0x0286
    2ebc:	89 23       	and	r24, r25
    2ebe:	80 93 86 02 	sts	0x0286, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2ec2:	80 91 77 02 	lds	r24, 0x0277
    2ec6:	82 23       	and	r24, r18
    2ec8:	19 f0       	breq	.+6      	; 0x2ed0 <led_plane_x_down+0x70>
		led_frame_bitmap[0+T] |= bit_on;
    2eca:	32 2b       	or	r19, r18
    2ecc:	30 93 7f 02 	sts	0x027F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2ed0:	80 91 78 02 	lds	r24, 0x0278
    2ed4:	82 23       	and	r24, r18
    2ed6:	29 f0       	breq	.+10     	; 0x2ee2 <led_plane_x_down+0x82>
		led_frame_bitmap[1+T] |= bit_on;
    2ed8:	80 91 80 02 	lds	r24, 0x0280
    2edc:	82 2b       	or	r24, r18
    2ede:	80 93 80 02 	sts	0x0280, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2ee2:	80 91 79 02 	lds	r24, 0x0279
    2ee6:	82 23       	and	r24, r18
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <led_plane_x_down+0x94>
		led_frame_bitmap[2+T] |= bit_on;
    2eea:	80 91 81 02 	lds	r24, 0x0281
    2eee:	82 2b       	or	r24, r18
    2ef0:	80 93 81 02 	sts	0x0281, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2ef4:	80 91 7a 02 	lds	r24, 0x027A
    2ef8:	82 23       	and	r24, r18
    2efa:	29 f0       	breq	.+10     	; 0x2f06 <led_plane_x_down+0xa6>
		led_frame_bitmap[3+T] |= bit_on;
    2efc:	80 91 82 02 	lds	r24, 0x0282
    2f00:	82 2b       	or	r24, r18
    2f02:	80 93 82 02 	sts	0x0282, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2f06:	80 91 7b 02 	lds	r24, 0x027B
    2f0a:	82 23       	and	r24, r18
    2f0c:	29 f0       	breq	.+10     	; 0x2f18 <led_plane_x_down+0xb8>
		led_frame_bitmap[4+T] |= bit_on;
    2f0e:	80 91 83 02 	lds	r24, 0x0283
    2f12:	82 2b       	or	r24, r18
    2f14:	80 93 83 02 	sts	0x0283, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2f18:	80 91 7c 02 	lds	r24, 0x027C
    2f1c:	82 23       	and	r24, r18
    2f1e:	29 f0       	breq	.+10     	; 0x2f2a <led_plane_x_down+0xca>
		led_frame_bitmap[5+T] |= bit_on;
    2f20:	80 91 84 02 	lds	r24, 0x0284
    2f24:	82 2b       	or	r24, r18
    2f26:	80 93 84 02 	sts	0x0284, r24
	if(led_frame_bitmap[6+S] & bit_on)
    2f2a:	80 91 7d 02 	lds	r24, 0x027D
    2f2e:	82 23       	and	r24, r18
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <led_plane_x_down+0xdc>
		led_frame_bitmap[6+T] |= bit_on;
    2f32:	80 91 85 02 	lds	r24, 0x0285
    2f36:	82 2b       	or	r24, r18
    2f38:	80 93 85 02 	sts	0x0285, r24
	if(led_frame_bitmap[7+S] & bit_on)
    2f3c:	80 91 7e 02 	lds	r24, 0x027E
    2f40:	82 23       	and	r24, r18
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <led_plane_x_down+0xee>
		led_frame_bitmap[7+T] |= bit_on;
    2f44:	80 91 86 02 	lds	r24, 0x0286
    2f48:	82 2b       	or	r24, r18
    2f4a:	80 93 86 02 	sts	0x0286, r24
	#undef T
	#undef S
	
	#define T 48
	#define S 40
	led_frame_bitmap[0+T] &=bit_off;
    2f4e:	30 91 77 02 	lds	r19, 0x0277
    2f52:	39 23       	and	r19, r25
    2f54:	30 93 77 02 	sts	0x0277, r19
	led_frame_bitmap[1+T] &=bit_off;
    2f58:	80 91 78 02 	lds	r24, 0x0278
    2f5c:	89 23       	and	r24, r25
    2f5e:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[2+T] &=bit_off;
    2f62:	80 91 79 02 	lds	r24, 0x0279
    2f66:	89 23       	and	r24, r25
    2f68:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[3+T] &=bit_off;
    2f6c:	80 91 7a 02 	lds	r24, 0x027A
    2f70:	89 23       	and	r24, r25
    2f72:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[4+T] &=bit_off;
    2f76:	80 91 7b 02 	lds	r24, 0x027B
    2f7a:	89 23       	and	r24, r25
    2f7c:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[5+T] &=bit_off;
    2f80:	80 91 7c 02 	lds	r24, 0x027C
    2f84:	89 23       	and	r24, r25
    2f86:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[6+T] &=bit_off;
    2f8a:	80 91 7d 02 	lds	r24, 0x027D
    2f8e:	89 23       	and	r24, r25
    2f90:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[7+T] &=bit_off;
    2f94:	80 91 7e 02 	lds	r24, 0x027E
    2f98:	89 23       	and	r24, r25
    2f9a:	80 93 7e 02 	sts	0x027E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    2f9e:	80 91 6f 02 	lds	r24, 0x026F
    2fa2:	82 23       	and	r24, r18
    2fa4:	19 f0       	breq	.+6      	; 0x2fac <led_plane_x_down+0x14c>
		led_frame_bitmap[0+T] |= bit_on;
    2fa6:	32 2b       	or	r19, r18
    2fa8:	30 93 77 02 	sts	0x0277, r19
	if(led_frame_bitmap[1+S] & bit_on)
    2fac:	80 91 70 02 	lds	r24, 0x0270
    2fb0:	82 23       	and	r24, r18
    2fb2:	29 f0       	breq	.+10     	; 0x2fbe <led_plane_x_down+0x15e>
		led_frame_bitmap[1+T] |= bit_on;
    2fb4:	80 91 78 02 	lds	r24, 0x0278
    2fb8:	82 2b       	or	r24, r18
    2fba:	80 93 78 02 	sts	0x0278, r24
	if(led_frame_bitmap[2+S] & bit_on)
    2fbe:	80 91 71 02 	lds	r24, 0x0271
    2fc2:	82 23       	and	r24, r18
    2fc4:	29 f0       	breq	.+10     	; 0x2fd0 <led_plane_x_down+0x170>
		led_frame_bitmap[2+T] |= bit_on;
    2fc6:	80 91 79 02 	lds	r24, 0x0279
    2fca:	82 2b       	or	r24, r18
    2fcc:	80 93 79 02 	sts	0x0279, r24
	if(led_frame_bitmap[3+S] & bit_on)
    2fd0:	80 91 72 02 	lds	r24, 0x0272
    2fd4:	82 23       	and	r24, r18
    2fd6:	29 f0       	breq	.+10     	; 0x2fe2 <led_plane_x_down+0x182>
		led_frame_bitmap[3+T] |= bit_on;
    2fd8:	80 91 7a 02 	lds	r24, 0x027A
    2fdc:	82 2b       	or	r24, r18
    2fde:	80 93 7a 02 	sts	0x027A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    2fe2:	80 91 73 02 	lds	r24, 0x0273
    2fe6:	82 23       	and	r24, r18
    2fe8:	29 f0       	breq	.+10     	; 0x2ff4 <led_plane_x_down+0x194>
		led_frame_bitmap[4+T] |= bit_on;
    2fea:	80 91 7b 02 	lds	r24, 0x027B
    2fee:	82 2b       	or	r24, r18
    2ff0:	80 93 7b 02 	sts	0x027B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    2ff4:	80 91 74 02 	lds	r24, 0x0274
    2ff8:	82 23       	and	r24, r18
    2ffa:	29 f0       	breq	.+10     	; 0x3006 <led_plane_x_down+0x1a6>
		led_frame_bitmap[5+T] |= bit_on;
    2ffc:	80 91 7c 02 	lds	r24, 0x027C
    3000:	82 2b       	or	r24, r18
    3002:	80 93 7c 02 	sts	0x027C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    3006:	80 91 75 02 	lds	r24, 0x0275
    300a:	82 23       	and	r24, r18
    300c:	29 f0       	breq	.+10     	; 0x3018 <led_plane_x_down+0x1b8>
		led_frame_bitmap[6+T] |= bit_on;
    300e:	80 91 7d 02 	lds	r24, 0x027D
    3012:	82 2b       	or	r24, r18
    3014:	80 93 7d 02 	sts	0x027D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    3018:	80 91 76 02 	lds	r24, 0x0276
    301c:	82 23       	and	r24, r18
    301e:	29 f0       	breq	.+10     	; 0x302a <led_plane_x_down+0x1ca>
		led_frame_bitmap[7+T] |= bit_on;
    3020:	80 91 7e 02 	lds	r24, 0x027E
    3024:	82 2b       	or	r24, r18
    3026:	80 93 7e 02 	sts	0x027E, r24
	#undef T
	#undef S

	#define T 40
	#define S 32
	led_frame_bitmap[0+T] &=bit_off;
    302a:	30 91 6f 02 	lds	r19, 0x026F
    302e:	39 23       	and	r19, r25
    3030:	30 93 6f 02 	sts	0x026F, r19
	led_frame_bitmap[1+T] &=bit_off;
    3034:	80 91 70 02 	lds	r24, 0x0270
    3038:	89 23       	and	r24, r25
    303a:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[2+T] &=bit_off;
    303e:	80 91 71 02 	lds	r24, 0x0271
    3042:	89 23       	and	r24, r25
    3044:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[3+T] &=bit_off;
    3048:	80 91 72 02 	lds	r24, 0x0272
    304c:	89 23       	and	r24, r25
    304e:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[4+T] &=bit_off;
    3052:	80 91 73 02 	lds	r24, 0x0273
    3056:	89 23       	and	r24, r25
    3058:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[5+T] &=bit_off;
    305c:	80 91 74 02 	lds	r24, 0x0274
    3060:	89 23       	and	r24, r25
    3062:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[6+T] &=bit_off;
    3066:	80 91 75 02 	lds	r24, 0x0275
    306a:	89 23       	and	r24, r25
    306c:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[7+T] &=bit_off;
    3070:	80 91 76 02 	lds	r24, 0x0276
    3074:	89 23       	and	r24, r25
    3076:	80 93 76 02 	sts	0x0276, r24
	if(led_frame_bitmap[0+S] & bit_on)
    307a:	80 91 67 02 	lds	r24, 0x0267
    307e:	82 23       	and	r24, r18
    3080:	19 f0       	breq	.+6      	; 0x3088 <led_plane_x_down+0x228>
		led_frame_bitmap[0+T] |= bit_on;
    3082:	32 2b       	or	r19, r18
    3084:	30 93 6f 02 	sts	0x026F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    3088:	80 91 68 02 	lds	r24, 0x0268
    308c:	82 23       	and	r24, r18
    308e:	29 f0       	breq	.+10     	; 0x309a <led_plane_x_down+0x23a>
		led_frame_bitmap[1+T] |= bit_on;
    3090:	80 91 70 02 	lds	r24, 0x0270
    3094:	82 2b       	or	r24, r18
    3096:	80 93 70 02 	sts	0x0270, r24
	if(led_frame_bitmap[2+S] & bit_on)
    309a:	80 91 69 02 	lds	r24, 0x0269
    309e:	82 23       	and	r24, r18
    30a0:	29 f0       	breq	.+10     	; 0x30ac <led_plane_x_down+0x24c>
		led_frame_bitmap[2+T] |= bit_on;
    30a2:	80 91 71 02 	lds	r24, 0x0271
    30a6:	82 2b       	or	r24, r18
    30a8:	80 93 71 02 	sts	0x0271, r24
	if(led_frame_bitmap[3+S] & bit_on)
    30ac:	80 91 6a 02 	lds	r24, 0x026A
    30b0:	82 23       	and	r24, r18
    30b2:	29 f0       	breq	.+10     	; 0x30be <led_plane_x_down+0x25e>
		led_frame_bitmap[3+T] |= bit_on;
    30b4:	80 91 72 02 	lds	r24, 0x0272
    30b8:	82 2b       	or	r24, r18
    30ba:	80 93 72 02 	sts	0x0272, r24
	if(led_frame_bitmap[4+S] & bit_on)
    30be:	80 91 6b 02 	lds	r24, 0x026B
    30c2:	82 23       	and	r24, r18
    30c4:	29 f0       	breq	.+10     	; 0x30d0 <led_plane_x_down+0x270>
		led_frame_bitmap[4+T] |= bit_on;
    30c6:	80 91 73 02 	lds	r24, 0x0273
    30ca:	82 2b       	or	r24, r18
    30cc:	80 93 73 02 	sts	0x0273, r24
	if(led_frame_bitmap[5+S] & bit_on)
    30d0:	80 91 6c 02 	lds	r24, 0x026C
    30d4:	82 23       	and	r24, r18
    30d6:	29 f0       	breq	.+10     	; 0x30e2 <led_plane_x_down+0x282>
		led_frame_bitmap[5+T] |= bit_on;
    30d8:	80 91 74 02 	lds	r24, 0x0274
    30dc:	82 2b       	or	r24, r18
    30de:	80 93 74 02 	sts	0x0274, r24
	if(led_frame_bitmap[6+S] & bit_on)
    30e2:	80 91 6d 02 	lds	r24, 0x026D
    30e6:	82 23       	and	r24, r18
    30e8:	29 f0       	breq	.+10     	; 0x30f4 <led_plane_x_down+0x294>
		led_frame_bitmap[6+T] |= bit_on;
    30ea:	80 91 75 02 	lds	r24, 0x0275
    30ee:	82 2b       	or	r24, r18
    30f0:	80 93 75 02 	sts	0x0275, r24
	if(led_frame_bitmap[7+S] & bit_on)
    30f4:	80 91 6e 02 	lds	r24, 0x026E
    30f8:	82 23       	and	r24, r18
    30fa:	29 f0       	breq	.+10     	; 0x3106 <led_plane_x_down+0x2a6>
		led_frame_bitmap[7+T] |= bit_on;
    30fc:	80 91 76 02 	lds	r24, 0x0276
    3100:	82 2b       	or	r24, r18
    3102:	80 93 76 02 	sts	0x0276, r24
	#undef T
	#undef S

	#define T 32
	#define S 24
	led_frame_bitmap[0+T] &=bit_off;
    3106:	30 91 67 02 	lds	r19, 0x0267
    310a:	39 23       	and	r19, r25
    310c:	30 93 67 02 	sts	0x0267, r19
	led_frame_bitmap[1+T] &=bit_off;
    3110:	80 91 68 02 	lds	r24, 0x0268
    3114:	89 23       	and	r24, r25
    3116:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[2+T] &=bit_off;
    311a:	80 91 69 02 	lds	r24, 0x0269
    311e:	89 23       	and	r24, r25
    3120:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[3+T] &=bit_off;
    3124:	80 91 6a 02 	lds	r24, 0x026A
    3128:	89 23       	and	r24, r25
    312a:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[4+T] &=bit_off;
    312e:	80 91 6b 02 	lds	r24, 0x026B
    3132:	89 23       	and	r24, r25
    3134:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[5+T] &=bit_off;
    3138:	80 91 6c 02 	lds	r24, 0x026C
    313c:	89 23       	and	r24, r25
    313e:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[6+T] &=bit_off;
    3142:	80 91 6d 02 	lds	r24, 0x026D
    3146:	89 23       	and	r24, r25
    3148:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[7+T] &=bit_off;
    314c:	80 91 6e 02 	lds	r24, 0x026E
    3150:	89 23       	and	r24, r25
    3152:	80 93 6e 02 	sts	0x026E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    3156:	80 91 5f 02 	lds	r24, 0x025F
    315a:	82 23       	and	r24, r18
    315c:	19 f0       	breq	.+6      	; 0x3164 <led_plane_x_down+0x304>
		led_frame_bitmap[0+T] |= bit_on;
    315e:	32 2b       	or	r19, r18
    3160:	30 93 67 02 	sts	0x0267, r19
	if(led_frame_bitmap[1+S] & bit_on)
    3164:	80 91 60 02 	lds	r24, 0x0260
    3168:	82 23       	and	r24, r18
    316a:	29 f0       	breq	.+10     	; 0x3176 <led_plane_x_down+0x316>
		led_frame_bitmap[1+T] |= bit_on;
    316c:	80 91 68 02 	lds	r24, 0x0268
    3170:	82 2b       	or	r24, r18
    3172:	80 93 68 02 	sts	0x0268, r24
	if(led_frame_bitmap[2+S] & bit_on)
    3176:	80 91 61 02 	lds	r24, 0x0261
    317a:	82 23       	and	r24, r18
    317c:	29 f0       	breq	.+10     	; 0x3188 <led_plane_x_down+0x328>
		led_frame_bitmap[2+T] |= bit_on;
    317e:	80 91 69 02 	lds	r24, 0x0269
    3182:	82 2b       	or	r24, r18
    3184:	80 93 69 02 	sts	0x0269, r24
	if(led_frame_bitmap[3+S] & bit_on)
    3188:	80 91 62 02 	lds	r24, 0x0262
    318c:	82 23       	and	r24, r18
    318e:	29 f0       	breq	.+10     	; 0x319a <led_plane_x_down+0x33a>
		led_frame_bitmap[3+T] |= bit_on;
    3190:	80 91 6a 02 	lds	r24, 0x026A
    3194:	82 2b       	or	r24, r18
    3196:	80 93 6a 02 	sts	0x026A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    319a:	80 91 63 02 	lds	r24, 0x0263
    319e:	82 23       	and	r24, r18
    31a0:	29 f0       	breq	.+10     	; 0x31ac <led_plane_x_down+0x34c>
		led_frame_bitmap[4+T] |= bit_on;
    31a2:	80 91 6b 02 	lds	r24, 0x026B
    31a6:	82 2b       	or	r24, r18
    31a8:	80 93 6b 02 	sts	0x026B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    31ac:	80 91 64 02 	lds	r24, 0x0264
    31b0:	82 23       	and	r24, r18
    31b2:	29 f0       	breq	.+10     	; 0x31be <led_plane_x_down+0x35e>
		led_frame_bitmap[5+T] |= bit_on;
    31b4:	80 91 6c 02 	lds	r24, 0x026C
    31b8:	82 2b       	or	r24, r18
    31ba:	80 93 6c 02 	sts	0x026C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    31be:	80 91 65 02 	lds	r24, 0x0265
    31c2:	82 23       	and	r24, r18
    31c4:	29 f0       	breq	.+10     	; 0x31d0 <led_plane_x_down+0x370>
		led_frame_bitmap[6+T] |= bit_on;
    31c6:	80 91 6d 02 	lds	r24, 0x026D
    31ca:	82 2b       	or	r24, r18
    31cc:	80 93 6d 02 	sts	0x026D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    31d0:	80 91 66 02 	lds	r24, 0x0266
    31d4:	82 23       	and	r24, r18
    31d6:	29 f0       	breq	.+10     	; 0x31e2 <led_plane_x_down+0x382>
		led_frame_bitmap[7+T] |= bit_on;
    31d8:	80 91 6e 02 	lds	r24, 0x026E
    31dc:	82 2b       	or	r24, r18
    31de:	80 93 6e 02 	sts	0x026E, r24
	#undef T
	#undef S

	#define T 24
	#define S 16
	led_frame_bitmap[0+T] &=bit_off;
    31e2:	30 91 5f 02 	lds	r19, 0x025F
    31e6:	39 23       	and	r19, r25
    31e8:	30 93 5f 02 	sts	0x025F, r19
	led_frame_bitmap[1+T] &=bit_off;
    31ec:	80 91 60 02 	lds	r24, 0x0260
    31f0:	89 23       	and	r24, r25
    31f2:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[2+T] &=bit_off;
    31f6:	80 91 61 02 	lds	r24, 0x0261
    31fa:	89 23       	and	r24, r25
    31fc:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[3+T] &=bit_off;
    3200:	80 91 62 02 	lds	r24, 0x0262
    3204:	89 23       	and	r24, r25
    3206:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[4+T] &=bit_off;
    320a:	80 91 63 02 	lds	r24, 0x0263
    320e:	89 23       	and	r24, r25
    3210:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[5+T] &=bit_off;
    3214:	80 91 64 02 	lds	r24, 0x0264
    3218:	89 23       	and	r24, r25
    321a:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[6+T] &=bit_off;
    321e:	80 91 65 02 	lds	r24, 0x0265
    3222:	89 23       	and	r24, r25
    3224:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[7+T] &=bit_off;
    3228:	80 91 66 02 	lds	r24, 0x0266
    322c:	89 23       	and	r24, r25
    322e:	80 93 66 02 	sts	0x0266, r24
	if(led_frame_bitmap[0+S] & bit_on)
    3232:	80 91 57 02 	lds	r24, 0x0257
    3236:	82 23       	and	r24, r18
    3238:	19 f0       	breq	.+6      	; 0x3240 <led_plane_x_down+0x3e0>
		led_frame_bitmap[0+T] |= bit_on;
    323a:	32 2b       	or	r19, r18
    323c:	30 93 5f 02 	sts	0x025F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    3240:	80 91 58 02 	lds	r24, 0x0258
    3244:	82 23       	and	r24, r18
    3246:	29 f0       	breq	.+10     	; 0x3252 <led_plane_x_down+0x3f2>
		led_frame_bitmap[1+T] |= bit_on;
    3248:	80 91 60 02 	lds	r24, 0x0260
    324c:	82 2b       	or	r24, r18
    324e:	80 93 60 02 	sts	0x0260, r24
	if(led_frame_bitmap[2+S] & bit_on)
    3252:	80 91 59 02 	lds	r24, 0x0259
    3256:	82 23       	and	r24, r18
    3258:	29 f0       	breq	.+10     	; 0x3264 <led_plane_x_down+0x404>
		led_frame_bitmap[2+T] |= bit_on;
    325a:	80 91 61 02 	lds	r24, 0x0261
    325e:	82 2b       	or	r24, r18
    3260:	80 93 61 02 	sts	0x0261, r24
	if(led_frame_bitmap[3+S] & bit_on)
    3264:	80 91 5a 02 	lds	r24, 0x025A
    3268:	82 23       	and	r24, r18
    326a:	29 f0       	breq	.+10     	; 0x3276 <led_plane_x_down+0x416>
		led_frame_bitmap[3+T] |= bit_on;
    326c:	80 91 62 02 	lds	r24, 0x0262
    3270:	82 2b       	or	r24, r18
    3272:	80 93 62 02 	sts	0x0262, r24
	if(led_frame_bitmap[4+S] & bit_on)
    3276:	80 91 5b 02 	lds	r24, 0x025B
    327a:	82 23       	and	r24, r18
    327c:	29 f0       	breq	.+10     	; 0x3288 <led_plane_x_down+0x428>
		led_frame_bitmap[4+T] |= bit_on;
    327e:	80 91 63 02 	lds	r24, 0x0263
    3282:	82 2b       	or	r24, r18
    3284:	80 93 63 02 	sts	0x0263, r24
	if(led_frame_bitmap[5+S] & bit_on)
    3288:	80 91 5c 02 	lds	r24, 0x025C
    328c:	82 23       	and	r24, r18
    328e:	29 f0       	breq	.+10     	; 0x329a <led_plane_x_down+0x43a>
		led_frame_bitmap[5+T] |= bit_on;
    3290:	80 91 64 02 	lds	r24, 0x0264
    3294:	82 2b       	or	r24, r18
    3296:	80 93 64 02 	sts	0x0264, r24
	if(led_frame_bitmap[6+S] & bit_on)
    329a:	80 91 5d 02 	lds	r24, 0x025D
    329e:	82 23       	and	r24, r18
    32a0:	29 f0       	breq	.+10     	; 0x32ac <led_plane_x_down+0x44c>
		led_frame_bitmap[6+T] |= bit_on;
    32a2:	80 91 65 02 	lds	r24, 0x0265
    32a6:	82 2b       	or	r24, r18
    32a8:	80 93 65 02 	sts	0x0265, r24
	if(led_frame_bitmap[7+S] & bit_on)
    32ac:	80 91 5e 02 	lds	r24, 0x025E
    32b0:	82 23       	and	r24, r18
    32b2:	29 f0       	breq	.+10     	; 0x32be <led_plane_x_down+0x45e>
		led_frame_bitmap[7+T] |= bit_on;
    32b4:	80 91 66 02 	lds	r24, 0x0266
    32b8:	82 2b       	or	r24, r18
    32ba:	80 93 66 02 	sts	0x0266, r24
	#undef T
	#undef S

	#define T 16
	#define S 8
	led_frame_bitmap[0+T] &=bit_off;
    32be:	30 91 57 02 	lds	r19, 0x0257
    32c2:	39 23       	and	r19, r25
    32c4:	30 93 57 02 	sts	0x0257, r19
	led_frame_bitmap[1+T] &=bit_off;
    32c8:	80 91 58 02 	lds	r24, 0x0258
    32cc:	89 23       	and	r24, r25
    32ce:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[2+T] &=bit_off;
    32d2:	80 91 59 02 	lds	r24, 0x0259
    32d6:	89 23       	and	r24, r25
    32d8:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[3+T] &=bit_off;
    32dc:	80 91 5a 02 	lds	r24, 0x025A
    32e0:	89 23       	and	r24, r25
    32e2:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[4+T] &=bit_off;
    32e6:	80 91 5b 02 	lds	r24, 0x025B
    32ea:	89 23       	and	r24, r25
    32ec:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[5+T] &=bit_off;
    32f0:	80 91 5c 02 	lds	r24, 0x025C
    32f4:	89 23       	and	r24, r25
    32f6:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[6+T] &=bit_off;
    32fa:	80 91 5d 02 	lds	r24, 0x025D
    32fe:	89 23       	and	r24, r25
    3300:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[7+T] &=bit_off;
    3304:	80 91 5e 02 	lds	r24, 0x025E
    3308:	89 23       	and	r24, r25
    330a:	80 93 5e 02 	sts	0x025E, r24
	if(led_frame_bitmap[0+S] & bit_on)
    330e:	80 91 4f 02 	lds	r24, 0x024F
    3312:	82 23       	and	r24, r18
    3314:	19 f0       	breq	.+6      	; 0x331c <led_plane_x_down+0x4bc>
		led_frame_bitmap[0+T] |= bit_on;
    3316:	32 2b       	or	r19, r18
    3318:	30 93 57 02 	sts	0x0257, r19
	if(led_frame_bitmap[1+S] & bit_on)
    331c:	80 91 50 02 	lds	r24, 0x0250
    3320:	82 23       	and	r24, r18
    3322:	29 f0       	breq	.+10     	; 0x332e <led_plane_x_down+0x4ce>
		led_frame_bitmap[1+T] |= bit_on;
    3324:	80 91 58 02 	lds	r24, 0x0258
    3328:	82 2b       	or	r24, r18
    332a:	80 93 58 02 	sts	0x0258, r24
	if(led_frame_bitmap[2+S] & bit_on)
    332e:	80 91 51 02 	lds	r24, 0x0251
    3332:	82 23       	and	r24, r18
    3334:	29 f0       	breq	.+10     	; 0x3340 <led_plane_x_down+0x4e0>
		led_frame_bitmap[2+T] |= bit_on;
    3336:	80 91 59 02 	lds	r24, 0x0259
    333a:	82 2b       	or	r24, r18
    333c:	80 93 59 02 	sts	0x0259, r24
	if(led_frame_bitmap[3+S] & bit_on)
    3340:	80 91 52 02 	lds	r24, 0x0252
    3344:	82 23       	and	r24, r18
    3346:	29 f0       	breq	.+10     	; 0x3352 <led_plane_x_down+0x4f2>
		led_frame_bitmap[3+T] |= bit_on;
    3348:	80 91 5a 02 	lds	r24, 0x025A
    334c:	82 2b       	or	r24, r18
    334e:	80 93 5a 02 	sts	0x025A, r24
	if(led_frame_bitmap[4+S] & bit_on)
    3352:	80 91 53 02 	lds	r24, 0x0253
    3356:	82 23       	and	r24, r18
    3358:	29 f0       	breq	.+10     	; 0x3364 <led_plane_x_down+0x504>
		led_frame_bitmap[4+T] |= bit_on;
    335a:	80 91 5b 02 	lds	r24, 0x025B
    335e:	82 2b       	or	r24, r18
    3360:	80 93 5b 02 	sts	0x025B, r24
	if(led_frame_bitmap[5+S] & bit_on)
    3364:	80 91 54 02 	lds	r24, 0x0254
    3368:	82 23       	and	r24, r18
    336a:	29 f0       	breq	.+10     	; 0x3376 <led_plane_x_down+0x516>
		led_frame_bitmap[5+T] |= bit_on;
    336c:	80 91 5c 02 	lds	r24, 0x025C
    3370:	82 2b       	or	r24, r18
    3372:	80 93 5c 02 	sts	0x025C, r24
	if(led_frame_bitmap[6+S] & bit_on)
    3376:	80 91 55 02 	lds	r24, 0x0255
    337a:	82 23       	and	r24, r18
    337c:	29 f0       	breq	.+10     	; 0x3388 <led_plane_x_down+0x528>
		led_frame_bitmap[6+T] |= bit_on;
    337e:	80 91 5d 02 	lds	r24, 0x025D
    3382:	82 2b       	or	r24, r18
    3384:	80 93 5d 02 	sts	0x025D, r24
	if(led_frame_bitmap[7+S] & bit_on)
    3388:	80 91 56 02 	lds	r24, 0x0256
    338c:	82 23       	and	r24, r18
    338e:	29 f0       	breq	.+10     	; 0x339a <led_plane_x_down+0x53a>
		led_frame_bitmap[7+T] |= bit_on;
    3390:	80 91 5e 02 	lds	r24, 0x025E
    3394:	82 2b       	or	r24, r18
    3396:	80 93 5e 02 	sts	0x025E, r24
	#undef T
	#undef S

	#define T 8
	#define S 0
	led_frame_bitmap[0+T] &=bit_off;
    339a:	30 91 4f 02 	lds	r19, 0x024F
    339e:	39 23       	and	r19, r25
    33a0:	30 93 4f 02 	sts	0x024F, r19
	led_frame_bitmap[1+T] &=bit_off;
    33a4:	80 91 50 02 	lds	r24, 0x0250
    33a8:	89 23       	and	r24, r25
    33aa:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[2+T] &=bit_off;
    33ae:	80 91 51 02 	lds	r24, 0x0251
    33b2:	89 23       	and	r24, r25
    33b4:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[3+T] &=bit_off;
    33b8:	80 91 52 02 	lds	r24, 0x0252
    33bc:	89 23       	and	r24, r25
    33be:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[4+T] &=bit_off;
    33c2:	80 91 53 02 	lds	r24, 0x0253
    33c6:	89 23       	and	r24, r25
    33c8:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[5+T] &=bit_off;
    33cc:	80 91 54 02 	lds	r24, 0x0254
    33d0:	89 23       	and	r24, r25
    33d2:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[6+T] &=bit_off;
    33d6:	80 91 55 02 	lds	r24, 0x0255
    33da:	89 23       	and	r24, r25
    33dc:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[7+T] &=bit_off;
    33e0:	80 91 56 02 	lds	r24, 0x0256
    33e4:	89 23       	and	r24, r25
    33e6:	80 93 56 02 	sts	0x0256, r24
	if(led_frame_bitmap[0+S] & bit_on)
    33ea:	80 91 47 02 	lds	r24, 0x0247
    33ee:	82 23       	and	r24, r18
    33f0:	19 f0       	breq	.+6      	; 0x33f8 <led_plane_x_down+0x598>
		led_frame_bitmap[0+T] |= bit_on;
    33f2:	32 2b       	or	r19, r18
    33f4:	30 93 4f 02 	sts	0x024F, r19
	if(led_frame_bitmap[1+S] & bit_on)
    33f8:	80 91 48 02 	lds	r24, 0x0248
    33fc:	82 23       	and	r24, r18
    33fe:	29 f0       	breq	.+10     	; 0x340a <led_plane_x_down+0x5aa>
		led_frame_bitmap[1+T] |= bit_on;
    3400:	80 91 50 02 	lds	r24, 0x0250
    3404:	82 2b       	or	r24, r18
    3406:	80 93 50 02 	sts	0x0250, r24
	if(led_frame_bitmap[2+S] & bit_on)
    340a:	80 91 49 02 	lds	r24, 0x0249
    340e:	82 23       	and	r24, r18
    3410:	29 f0       	breq	.+10     	; 0x341c <led_plane_x_down+0x5bc>
		led_frame_bitmap[2+T] |= bit_on;
    3412:	80 91 51 02 	lds	r24, 0x0251
    3416:	82 2b       	or	r24, r18
    3418:	80 93 51 02 	sts	0x0251, r24
	if(led_frame_bitmap[3+S] & bit_on)
    341c:	80 91 4a 02 	lds	r24, 0x024A
    3420:	82 23       	and	r24, r18
    3422:	29 f0       	breq	.+10     	; 0x342e <led_plane_x_down+0x5ce>
		led_frame_bitmap[3+T] |= bit_on;
    3424:	80 91 52 02 	lds	r24, 0x0252
    3428:	82 2b       	or	r24, r18
    342a:	80 93 52 02 	sts	0x0252, r24
	if(led_frame_bitmap[4+S] & bit_on)
    342e:	80 91 4b 02 	lds	r24, 0x024B
    3432:	82 23       	and	r24, r18
    3434:	29 f0       	breq	.+10     	; 0x3440 <led_plane_x_down+0x5e0>
		led_frame_bitmap[4+T] |= bit_on;
    3436:	80 91 53 02 	lds	r24, 0x0253
    343a:	82 2b       	or	r24, r18
    343c:	80 93 53 02 	sts	0x0253, r24
	if(led_frame_bitmap[5+S] & bit_on)
    3440:	80 91 4c 02 	lds	r24, 0x024C
    3444:	82 23       	and	r24, r18
    3446:	29 f0       	breq	.+10     	; 0x3452 <led_plane_x_down+0x5f2>
		led_frame_bitmap[5+T] |= bit_on;
    3448:	80 91 54 02 	lds	r24, 0x0254
    344c:	82 2b       	or	r24, r18
    344e:	80 93 54 02 	sts	0x0254, r24
	if(led_frame_bitmap[6+S] & bit_on)
    3452:	80 91 4d 02 	lds	r24, 0x024D
    3456:	82 23       	and	r24, r18
    3458:	29 f0       	breq	.+10     	; 0x3464 <led_plane_x_down+0x604>
		led_frame_bitmap[6+T] |= bit_on;
    345a:	80 91 55 02 	lds	r24, 0x0255
    345e:	82 2b       	or	r24, r18
    3460:	80 93 55 02 	sts	0x0255, r24
	if(led_frame_bitmap[7+S] & bit_on)
    3464:	80 91 4e 02 	lds	r24, 0x024E
    3468:	82 23       	and	r24, r18
    346a:	29 f0       	breq	.+10     	; 0x3476 <led_plane_x_down+0x616>
		led_frame_bitmap[7+T] |= bit_on;
    346c:	80 91 56 02 	lds	r24, 0x0256
    3470:	28 2b       	or	r18, r24
    3472:	20 93 56 02 	sts	0x0256, r18
	#undef T
	#undef S

	#define T 0
	led_frame_bitmap[0+T] &=bit_off;
    3476:	80 91 47 02 	lds	r24, 0x0247
    347a:	89 23       	and	r24, r25
    347c:	80 93 47 02 	sts	0x0247, r24
	led_frame_bitmap[1+T] &=bit_off;
    3480:	80 91 48 02 	lds	r24, 0x0248
    3484:	89 23       	and	r24, r25
    3486:	80 93 48 02 	sts	0x0248, r24
	led_frame_bitmap[2+T] &=bit_off;
    348a:	80 91 49 02 	lds	r24, 0x0249
    348e:	89 23       	and	r24, r25
    3490:	80 93 49 02 	sts	0x0249, r24
	led_frame_bitmap[3+T] &=bit_off;
    3494:	80 91 4a 02 	lds	r24, 0x024A
    3498:	89 23       	and	r24, r25
    349a:	80 93 4a 02 	sts	0x024A, r24
	led_frame_bitmap[4+T] &=bit_off;
    349e:	80 91 4b 02 	lds	r24, 0x024B
    34a2:	89 23       	and	r24, r25
    34a4:	80 93 4b 02 	sts	0x024B, r24
	led_frame_bitmap[5+T] &=bit_off;
    34a8:	80 91 4c 02 	lds	r24, 0x024C
    34ac:	89 23       	and	r24, r25
    34ae:	80 93 4c 02 	sts	0x024C, r24
	led_frame_bitmap[6+T] &=bit_off;
    34b2:	80 91 4d 02 	lds	r24, 0x024D
    34b6:	89 23       	and	r24, r25
    34b8:	80 93 4d 02 	sts	0x024D, r24
	led_frame_bitmap[7+T] &=bit_off;
    34bc:	80 91 4e 02 	lds	r24, 0x024E
    34c0:	98 23       	and	r25, r24
    34c2:	90 93 4e 02 	sts	0x024E, r25
	#undef T

}
    34c6:	08 95       	ret

000034c8 <led_plane_z_left>:

//scroll a verticle plane to the left, new columb at the right is blank
void led_plane_z_left(unsigned char plane)
{
	led_frame_bitmap[plane]<<=1;
    34c8:	a7 e4       	ldi	r26, 0x47	; 71
    34ca:	b2 e0       	ldi	r27, 0x02	; 2
    34cc:	fd 01       	movw	r30, r26
    34ce:	e8 0f       	add	r30, r24
    34d0:	f1 1d       	adc	r31, r1
    34d2:	90 81       	ld	r25, Z
    34d4:	99 0f       	add	r25, r25
    34d6:	90 83       	st	Z, r25
	plane+=8;
    34d8:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    34da:	fd 01       	movw	r30, r26
    34dc:	e8 0f       	add	r30, r24
    34de:	f1 1d       	adc	r31, r1
    34e0:	90 81       	ld	r25, Z
    34e2:	99 0f       	add	r25, r25
    34e4:	90 83       	st	Z, r25
	plane+=8;
    34e6:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    34e8:	fd 01       	movw	r30, r26
    34ea:	e8 0f       	add	r30, r24
    34ec:	f1 1d       	adc	r31, r1
    34ee:	90 81       	ld	r25, Z
    34f0:	99 0f       	add	r25, r25
    34f2:	90 83       	st	Z, r25
	plane+=8;
    34f4:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    34f6:	fd 01       	movw	r30, r26
    34f8:	e8 0f       	add	r30, r24
    34fa:	f1 1d       	adc	r31, r1
    34fc:	90 81       	ld	r25, Z
    34fe:	99 0f       	add	r25, r25
    3500:	90 83       	st	Z, r25
	plane+=8;
    3502:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    3504:	fd 01       	movw	r30, r26
    3506:	e8 0f       	add	r30, r24
    3508:	f1 1d       	adc	r31, r1
    350a:	90 81       	ld	r25, Z
    350c:	99 0f       	add	r25, r25
    350e:	90 83       	st	Z, r25
	plane+=8;
    3510:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    3512:	fd 01       	movw	r30, r26
    3514:	e8 0f       	add	r30, r24
    3516:	f1 1d       	adc	r31, r1
    3518:	90 81       	ld	r25, Z
    351a:	99 0f       	add	r25, r25
    351c:	90 83       	st	Z, r25
	plane+=8;
    351e:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]<<=1;
    3520:	fd 01       	movw	r30, r26
    3522:	e8 0f       	add	r30, r24
    3524:	f1 1d       	adc	r31, r1
    3526:	90 81       	ld	r25, Z
    3528:	99 0f       	add	r25, r25
    352a:	90 83       	st	Z, r25
	plane+=8;
	led_frame_bitmap[plane]<<=1;
    352c:	88 5f       	subi	r24, 0xF8	; 248
    352e:	a8 0f       	add	r26, r24
    3530:	b1 1d       	adc	r27, r1
    3532:	8c 91       	ld	r24, X
    3534:	88 0f       	add	r24, r24
    3536:	8c 93       	st	X, r24
}
    3538:	08 95       	ret

0000353a <led_plane_z_right>:

//scroll a verticle plane to the right, new columb at the left is blank
void led_plane_z_right(unsigned char plane)
{
	led_frame_bitmap[plane]>>=1;
    353a:	a7 e4       	ldi	r26, 0x47	; 71
    353c:	b2 e0       	ldi	r27, 0x02	; 2
    353e:	fd 01       	movw	r30, r26
    3540:	e8 0f       	add	r30, r24
    3542:	f1 1d       	adc	r31, r1
    3544:	90 81       	ld	r25, Z
    3546:	96 95       	lsr	r25
    3548:	90 83       	st	Z, r25
	plane+=8;
    354a:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    354c:	fd 01       	movw	r30, r26
    354e:	e8 0f       	add	r30, r24
    3550:	f1 1d       	adc	r31, r1
    3552:	90 81       	ld	r25, Z
    3554:	96 95       	lsr	r25
    3556:	90 83       	st	Z, r25
	plane+=8;
    3558:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    355a:	fd 01       	movw	r30, r26
    355c:	e8 0f       	add	r30, r24
    355e:	f1 1d       	adc	r31, r1
    3560:	90 81       	ld	r25, Z
    3562:	96 95       	lsr	r25
    3564:	90 83       	st	Z, r25
	plane+=8;
    3566:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    3568:	fd 01       	movw	r30, r26
    356a:	e8 0f       	add	r30, r24
    356c:	f1 1d       	adc	r31, r1
    356e:	90 81       	ld	r25, Z
    3570:	96 95       	lsr	r25
    3572:	90 83       	st	Z, r25
	plane+=8;
    3574:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    3576:	fd 01       	movw	r30, r26
    3578:	e8 0f       	add	r30, r24
    357a:	f1 1d       	adc	r31, r1
    357c:	90 81       	ld	r25, Z
    357e:	96 95       	lsr	r25
    3580:	90 83       	st	Z, r25
	plane+=8;
    3582:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    3584:	fd 01       	movw	r30, r26
    3586:	e8 0f       	add	r30, r24
    3588:	f1 1d       	adc	r31, r1
    358a:	90 81       	ld	r25, Z
    358c:	96 95       	lsr	r25
    358e:	90 83       	st	Z, r25
	plane+=8;
    3590:	88 5f       	subi	r24, 0xF8	; 248
	led_frame_bitmap[plane]>>=1;
    3592:	fd 01       	movw	r30, r26
    3594:	e8 0f       	add	r30, r24
    3596:	f1 1d       	adc	r31, r1
    3598:	90 81       	ld	r25, Z
    359a:	96 95       	lsr	r25
    359c:	90 83       	st	Z, r25
	plane+=8;
	led_frame_bitmap[plane]>>=1;
    359e:	88 5f       	subi	r24, 0xF8	; 248
    35a0:	a8 0f       	add	r26, r24
    35a2:	b1 1d       	adc	r27, r1
    35a4:	8c 91       	ld	r24, X
    35a6:	86 95       	lsr	r24
    35a8:	8c 93       	st	X, r24
}
    35aa:	08 95       	ret

000035ac <led_frame_left>:
}

//scroll entire frame left 1 pixel
void led_frame_left(void)
{
	led_frame_bitmap[0]<<=1;
    35ac:	a7 e4       	ldi	r26, 0x47	; 71
    35ae:	b2 e0       	ldi	r27, 0x02	; 2
    35b0:	80 91 47 02 	lds	r24, 0x0247
    35b4:	88 0f       	add	r24, r24
    35b6:	80 93 47 02 	sts	0x0247, r24
	led_frame_bitmap[1]<<=1;
    35ba:	80 91 48 02 	lds	r24, 0x0248
    35be:	88 0f       	add	r24, r24
    35c0:	80 93 48 02 	sts	0x0248, r24
	led_frame_bitmap[2]<<=1;
    35c4:	80 91 49 02 	lds	r24, 0x0249
    35c8:	88 0f       	add	r24, r24
    35ca:	80 93 49 02 	sts	0x0249, r24
	led_frame_bitmap[3]<<=1;
    35ce:	80 91 4a 02 	lds	r24, 0x024A
    35d2:	88 0f       	add	r24, r24
    35d4:	80 93 4a 02 	sts	0x024A, r24
	led_frame_bitmap[4]<<=1;
    35d8:	80 91 4b 02 	lds	r24, 0x024B
    35dc:	88 0f       	add	r24, r24
    35de:	80 93 4b 02 	sts	0x024B, r24
	led_frame_bitmap[5]<<=1;
    35e2:	80 91 4c 02 	lds	r24, 0x024C
    35e6:	88 0f       	add	r24, r24
    35e8:	80 93 4c 02 	sts	0x024C, r24
	led_frame_bitmap[6]<<=1;
    35ec:	80 91 4d 02 	lds	r24, 0x024D
    35f0:	88 0f       	add	r24, r24
    35f2:	80 93 4d 02 	sts	0x024D, r24
	led_frame_bitmap[7]<<=1;
    35f6:	80 91 4e 02 	lds	r24, 0x024E
    35fa:	88 0f       	add	r24, r24
    35fc:	80 93 4e 02 	sts	0x024E, r24
	led_frame_bitmap[8]<<=1;
    3600:	80 91 4f 02 	lds	r24, 0x024F
    3604:	88 0f       	add	r24, r24
    3606:	80 93 4f 02 	sts	0x024F, r24
	led_frame_bitmap[9]<<=1;
    360a:	80 91 50 02 	lds	r24, 0x0250
    360e:	88 0f       	add	r24, r24
    3610:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[10]<<=1;
    3614:	80 91 51 02 	lds	r24, 0x0251
    3618:	88 0f       	add	r24, r24
    361a:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[11]<<=1;
    361e:	80 91 52 02 	lds	r24, 0x0252
    3622:	88 0f       	add	r24, r24
    3624:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[12]<<=1;
    3628:	80 91 53 02 	lds	r24, 0x0253
    362c:	88 0f       	add	r24, r24
    362e:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[13]<<=1;
    3632:	80 91 54 02 	lds	r24, 0x0254
    3636:	88 0f       	add	r24, r24
    3638:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[14]<<=1;
    363c:	80 91 55 02 	lds	r24, 0x0255
    3640:	88 0f       	add	r24, r24
    3642:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[15]<<=1;
    3646:	80 91 56 02 	lds	r24, 0x0256
    364a:	88 0f       	add	r24, r24
    364c:	80 93 56 02 	sts	0x0256, r24
	led_frame_bitmap[16]<<=1;
    3650:	80 91 57 02 	lds	r24, 0x0257
    3654:	88 0f       	add	r24, r24
    3656:	80 93 57 02 	sts	0x0257, r24
	led_frame_bitmap[17]<<=1;
    365a:	80 91 58 02 	lds	r24, 0x0258
    365e:	88 0f       	add	r24, r24
    3660:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[18]<<=1;
    3664:	80 91 59 02 	lds	r24, 0x0259
    3668:	88 0f       	add	r24, r24
    366a:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[19]<<=1;
    366e:	80 91 5a 02 	lds	r24, 0x025A
    3672:	88 0f       	add	r24, r24
    3674:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[20]<<=1;
    3678:	80 91 5b 02 	lds	r24, 0x025B
    367c:	88 0f       	add	r24, r24
    367e:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[21]<<=1;
    3682:	80 91 5c 02 	lds	r24, 0x025C
    3686:	88 0f       	add	r24, r24
    3688:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[22]<<=1;
    368c:	80 91 5d 02 	lds	r24, 0x025D
    3690:	88 0f       	add	r24, r24
    3692:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[23]<<=1;
    3696:	80 91 5e 02 	lds	r24, 0x025E
    369a:	88 0f       	add	r24, r24
    369c:	80 93 5e 02 	sts	0x025E, r24
	led_frame_bitmap[24]<<=1;
    36a0:	80 91 5f 02 	lds	r24, 0x025F
    36a4:	88 0f       	add	r24, r24
    36a6:	80 93 5f 02 	sts	0x025F, r24
	led_frame_bitmap[25]<<=1;
    36aa:	80 91 60 02 	lds	r24, 0x0260
    36ae:	88 0f       	add	r24, r24
    36b0:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[26]<<=1;
    36b4:	80 91 61 02 	lds	r24, 0x0261
    36b8:	88 0f       	add	r24, r24
    36ba:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[27]<<=1;
    36be:	80 91 62 02 	lds	r24, 0x0262
    36c2:	88 0f       	add	r24, r24
    36c4:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[28]<<=1;
    36c8:	80 91 63 02 	lds	r24, 0x0263
    36cc:	88 0f       	add	r24, r24
    36ce:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[29]<<=1;
    36d2:	80 91 64 02 	lds	r24, 0x0264
    36d6:	88 0f       	add	r24, r24
    36d8:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[30]<<=1;
    36dc:	80 91 65 02 	lds	r24, 0x0265
    36e0:	88 0f       	add	r24, r24
    36e2:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[31]<<=1;
    36e6:	80 91 66 02 	lds	r24, 0x0266
    36ea:	88 0f       	add	r24, r24
    36ec:	80 93 66 02 	sts	0x0266, r24
	led_frame_bitmap[32]<<=1;
    36f0:	80 91 67 02 	lds	r24, 0x0267
    36f4:	88 0f       	add	r24, r24
    36f6:	80 93 67 02 	sts	0x0267, r24
	led_frame_bitmap[33]<<=1;
    36fa:	80 91 68 02 	lds	r24, 0x0268
    36fe:	88 0f       	add	r24, r24
    3700:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[34]<<=1;
    3704:	80 91 69 02 	lds	r24, 0x0269
    3708:	88 0f       	add	r24, r24
    370a:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[35]<<=1;
    370e:	80 91 6a 02 	lds	r24, 0x026A
    3712:	88 0f       	add	r24, r24
    3714:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[36]<<=1;
    3718:	80 91 6b 02 	lds	r24, 0x026B
    371c:	88 0f       	add	r24, r24
    371e:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[37]<<=1;
    3722:	80 91 6c 02 	lds	r24, 0x026C
    3726:	88 0f       	add	r24, r24
    3728:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[38]<<=1;
    372c:	80 91 6d 02 	lds	r24, 0x026D
    3730:	88 0f       	add	r24, r24
    3732:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[39]<<=1;
    3736:	80 91 6e 02 	lds	r24, 0x026E
    373a:	88 0f       	add	r24, r24
    373c:	80 93 6e 02 	sts	0x026E, r24
	led_frame_bitmap[40]<<=1;
    3740:	80 91 6f 02 	lds	r24, 0x026F
    3744:	88 0f       	add	r24, r24
    3746:	80 93 6f 02 	sts	0x026F, r24
	led_frame_bitmap[41]<<=1;
    374a:	80 91 70 02 	lds	r24, 0x0270
    374e:	88 0f       	add	r24, r24
    3750:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[42]<<=1;
    3754:	80 91 71 02 	lds	r24, 0x0271
    3758:	88 0f       	add	r24, r24
    375a:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[43]<<=1;
    375e:	80 91 72 02 	lds	r24, 0x0272
    3762:	88 0f       	add	r24, r24
    3764:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[44]<<=1;
    3768:	80 91 73 02 	lds	r24, 0x0273
    376c:	88 0f       	add	r24, r24
    376e:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[45]<<=1;
    3772:	80 91 74 02 	lds	r24, 0x0274
    3776:	88 0f       	add	r24, r24
    3778:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[46]<<=1;
    377c:	80 91 75 02 	lds	r24, 0x0275
    3780:	88 0f       	add	r24, r24
    3782:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[47]<<=1;
    3786:	80 91 76 02 	lds	r24, 0x0276
    378a:	88 0f       	add	r24, r24
    378c:	80 93 76 02 	sts	0x0276, r24
	led_frame_bitmap[48]<<=1;
    3790:	80 91 77 02 	lds	r24, 0x0277
    3794:	88 0f       	add	r24, r24
    3796:	80 93 77 02 	sts	0x0277, r24
	led_frame_bitmap[49]<<=1;
    379a:	80 91 78 02 	lds	r24, 0x0278
    379e:	88 0f       	add	r24, r24
    37a0:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[50]<<=1;
    37a4:	80 91 79 02 	lds	r24, 0x0279
    37a8:	88 0f       	add	r24, r24
    37aa:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[51]<<=1;
    37ae:	80 91 7a 02 	lds	r24, 0x027A
    37b2:	88 0f       	add	r24, r24
    37b4:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[52]<<=1;
    37b8:	80 91 7b 02 	lds	r24, 0x027B
    37bc:	88 0f       	add	r24, r24
    37be:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[53]<<=1;
    37c2:	80 91 7c 02 	lds	r24, 0x027C
    37c6:	88 0f       	add	r24, r24
    37c8:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[54]<<=1;
    37cc:	80 91 7d 02 	lds	r24, 0x027D
    37d0:	88 0f       	add	r24, r24
    37d2:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[55]<<=1;
    37d6:	80 91 7e 02 	lds	r24, 0x027E
    37da:	88 0f       	add	r24, r24
    37dc:	80 93 7e 02 	sts	0x027E, r24
	led_frame_bitmap[56]<<=1;
    37e0:	80 91 7f 02 	lds	r24, 0x027F
    37e4:	88 0f       	add	r24, r24
    37e6:	80 93 7f 02 	sts	0x027F, r24
	led_frame_bitmap[57]<<=1;
    37ea:	80 91 80 02 	lds	r24, 0x0280
    37ee:	88 0f       	add	r24, r24
    37f0:	80 93 80 02 	sts	0x0280, r24
	led_frame_bitmap[58]<<=1;
    37f4:	80 91 81 02 	lds	r24, 0x0281
    37f8:	88 0f       	add	r24, r24
    37fa:	80 93 81 02 	sts	0x0281, r24
	led_frame_bitmap[59]<<=1;
    37fe:	80 91 82 02 	lds	r24, 0x0282
    3802:	88 0f       	add	r24, r24
    3804:	80 93 82 02 	sts	0x0282, r24
	led_frame_bitmap[60]<<=1;
    3808:	80 91 83 02 	lds	r24, 0x0283
    380c:	88 0f       	add	r24, r24
    380e:	80 93 83 02 	sts	0x0283, r24
	led_frame_bitmap[61]<<=1;
    3812:	fd 01       	movw	r30, r26
    3814:	fd 96       	adiw	r30, 0x3d	; 61
    3816:	80 81       	ld	r24, Z
    3818:	88 0f       	add	r24, r24
    381a:	80 83       	st	Z, r24
	led_frame_bitmap[62]<<=1;
    381c:	fd 01       	movw	r30, r26
    381e:	fe 96       	adiw	r30, 0x3e	; 62
    3820:	80 81       	ld	r24, Z
    3822:	88 0f       	add	r24, r24
    3824:	80 83       	st	Z, r24
	led_frame_bitmap[63]<<=1;
    3826:	df 96       	adiw	r26, 0x3f	; 63
    3828:	8c 91       	ld	r24, X
    382a:	88 0f       	add	r24, r24
    382c:	8c 93       	st	X, r24

}
    382e:	08 95       	ret

00003830 <led_frame_right>:

//scroll entire frame right 1 pixel
void led_frame_right(void)
{
	led_frame_bitmap[0]>>=1;
    3830:	a7 e4       	ldi	r26, 0x47	; 71
    3832:	b2 e0       	ldi	r27, 0x02	; 2
    3834:	80 91 47 02 	lds	r24, 0x0247
    3838:	86 95       	lsr	r24
    383a:	80 93 47 02 	sts	0x0247, r24
	led_frame_bitmap[1]>>=1;
    383e:	80 91 48 02 	lds	r24, 0x0248
    3842:	86 95       	lsr	r24
    3844:	80 93 48 02 	sts	0x0248, r24
	led_frame_bitmap[2]>>=1;
    3848:	80 91 49 02 	lds	r24, 0x0249
    384c:	86 95       	lsr	r24
    384e:	80 93 49 02 	sts	0x0249, r24
	led_frame_bitmap[3]>>=1;
    3852:	80 91 4a 02 	lds	r24, 0x024A
    3856:	86 95       	lsr	r24
    3858:	80 93 4a 02 	sts	0x024A, r24
	led_frame_bitmap[4]>>=1;
    385c:	80 91 4b 02 	lds	r24, 0x024B
    3860:	86 95       	lsr	r24
    3862:	80 93 4b 02 	sts	0x024B, r24
	led_frame_bitmap[5]>>=1;
    3866:	80 91 4c 02 	lds	r24, 0x024C
    386a:	86 95       	lsr	r24
    386c:	80 93 4c 02 	sts	0x024C, r24
	led_frame_bitmap[6]>>=1;
    3870:	80 91 4d 02 	lds	r24, 0x024D
    3874:	86 95       	lsr	r24
    3876:	80 93 4d 02 	sts	0x024D, r24
	led_frame_bitmap[7]>>=1;
    387a:	80 91 4e 02 	lds	r24, 0x024E
    387e:	86 95       	lsr	r24
    3880:	80 93 4e 02 	sts	0x024E, r24
	led_frame_bitmap[8]>>=1;
    3884:	80 91 4f 02 	lds	r24, 0x024F
    3888:	86 95       	lsr	r24
    388a:	80 93 4f 02 	sts	0x024F, r24
	led_frame_bitmap[9]>>=1;
    388e:	80 91 50 02 	lds	r24, 0x0250
    3892:	86 95       	lsr	r24
    3894:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[10]>>=1;
    3898:	80 91 51 02 	lds	r24, 0x0251
    389c:	86 95       	lsr	r24
    389e:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[11]>>=1;
    38a2:	80 91 52 02 	lds	r24, 0x0252
    38a6:	86 95       	lsr	r24
    38a8:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[12]>>=1;
    38ac:	80 91 53 02 	lds	r24, 0x0253
    38b0:	86 95       	lsr	r24
    38b2:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[13]>>=1;
    38b6:	80 91 54 02 	lds	r24, 0x0254
    38ba:	86 95       	lsr	r24
    38bc:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[14]>>=1;
    38c0:	80 91 55 02 	lds	r24, 0x0255
    38c4:	86 95       	lsr	r24
    38c6:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[15]>>=1;
    38ca:	80 91 56 02 	lds	r24, 0x0256
    38ce:	86 95       	lsr	r24
    38d0:	80 93 56 02 	sts	0x0256, r24
	led_frame_bitmap[16]>>=1;
    38d4:	80 91 57 02 	lds	r24, 0x0257
    38d8:	86 95       	lsr	r24
    38da:	80 93 57 02 	sts	0x0257, r24
	led_frame_bitmap[17]>>=1;
    38de:	80 91 58 02 	lds	r24, 0x0258
    38e2:	86 95       	lsr	r24
    38e4:	80 93 58 02 	sts	0x0258, r24
	led_frame_bitmap[18]>>=1;
    38e8:	80 91 59 02 	lds	r24, 0x0259
    38ec:	86 95       	lsr	r24
    38ee:	80 93 59 02 	sts	0x0259, r24
	led_frame_bitmap[19]>>=1;
    38f2:	80 91 5a 02 	lds	r24, 0x025A
    38f6:	86 95       	lsr	r24
    38f8:	80 93 5a 02 	sts	0x025A, r24
	led_frame_bitmap[20]>>=1;
    38fc:	80 91 5b 02 	lds	r24, 0x025B
    3900:	86 95       	lsr	r24
    3902:	80 93 5b 02 	sts	0x025B, r24
	led_frame_bitmap[21]>>=1;
    3906:	80 91 5c 02 	lds	r24, 0x025C
    390a:	86 95       	lsr	r24
    390c:	80 93 5c 02 	sts	0x025C, r24
	led_frame_bitmap[22]>>=1;
    3910:	80 91 5d 02 	lds	r24, 0x025D
    3914:	86 95       	lsr	r24
    3916:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[23]>>=1;
    391a:	80 91 5e 02 	lds	r24, 0x025E
    391e:	86 95       	lsr	r24
    3920:	80 93 5e 02 	sts	0x025E, r24
	led_frame_bitmap[24]>>=1;
    3924:	80 91 5f 02 	lds	r24, 0x025F
    3928:	86 95       	lsr	r24
    392a:	80 93 5f 02 	sts	0x025F, r24
	led_frame_bitmap[25]>>=1;
    392e:	80 91 60 02 	lds	r24, 0x0260
    3932:	86 95       	lsr	r24
    3934:	80 93 60 02 	sts	0x0260, r24
	led_frame_bitmap[26]>>=1;
    3938:	80 91 61 02 	lds	r24, 0x0261
    393c:	86 95       	lsr	r24
    393e:	80 93 61 02 	sts	0x0261, r24
	led_frame_bitmap[27]>>=1;
    3942:	80 91 62 02 	lds	r24, 0x0262
    3946:	86 95       	lsr	r24
    3948:	80 93 62 02 	sts	0x0262, r24
	led_frame_bitmap[28]>>=1;
    394c:	80 91 63 02 	lds	r24, 0x0263
    3950:	86 95       	lsr	r24
    3952:	80 93 63 02 	sts	0x0263, r24
	led_frame_bitmap[29]>>=1;
    3956:	80 91 64 02 	lds	r24, 0x0264
    395a:	86 95       	lsr	r24
    395c:	80 93 64 02 	sts	0x0264, r24
	led_frame_bitmap[30]>>=1;
    3960:	80 91 65 02 	lds	r24, 0x0265
    3964:	86 95       	lsr	r24
    3966:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[31]>>=1;
    396a:	80 91 66 02 	lds	r24, 0x0266
    396e:	86 95       	lsr	r24
    3970:	80 93 66 02 	sts	0x0266, r24
	led_frame_bitmap[32]>>=1;
    3974:	80 91 67 02 	lds	r24, 0x0267
    3978:	86 95       	lsr	r24
    397a:	80 93 67 02 	sts	0x0267, r24
	led_frame_bitmap[33]>>=1;
    397e:	80 91 68 02 	lds	r24, 0x0268
    3982:	86 95       	lsr	r24
    3984:	80 93 68 02 	sts	0x0268, r24
	led_frame_bitmap[34]>>=1;
    3988:	80 91 69 02 	lds	r24, 0x0269
    398c:	86 95       	lsr	r24
    398e:	80 93 69 02 	sts	0x0269, r24
	led_frame_bitmap[35]>>=1;
    3992:	80 91 6a 02 	lds	r24, 0x026A
    3996:	86 95       	lsr	r24
    3998:	80 93 6a 02 	sts	0x026A, r24
	led_frame_bitmap[36]>>=1;
    399c:	80 91 6b 02 	lds	r24, 0x026B
    39a0:	86 95       	lsr	r24
    39a2:	80 93 6b 02 	sts	0x026B, r24
	led_frame_bitmap[37]>>=1;
    39a6:	80 91 6c 02 	lds	r24, 0x026C
    39aa:	86 95       	lsr	r24
    39ac:	80 93 6c 02 	sts	0x026C, r24
	led_frame_bitmap[38]>>=1;
    39b0:	80 91 6d 02 	lds	r24, 0x026D
    39b4:	86 95       	lsr	r24
    39b6:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[39]>>=1;
    39ba:	80 91 6e 02 	lds	r24, 0x026E
    39be:	86 95       	lsr	r24
    39c0:	80 93 6e 02 	sts	0x026E, r24
	led_frame_bitmap[40]>>=1;
    39c4:	80 91 6f 02 	lds	r24, 0x026F
    39c8:	86 95       	lsr	r24
    39ca:	80 93 6f 02 	sts	0x026F, r24
	led_frame_bitmap[41]>>=1;
    39ce:	80 91 70 02 	lds	r24, 0x0270
    39d2:	86 95       	lsr	r24
    39d4:	80 93 70 02 	sts	0x0270, r24
	led_frame_bitmap[42]>>=1;
    39d8:	80 91 71 02 	lds	r24, 0x0271
    39dc:	86 95       	lsr	r24
    39de:	80 93 71 02 	sts	0x0271, r24
	led_frame_bitmap[43]>>=1;
    39e2:	80 91 72 02 	lds	r24, 0x0272
    39e6:	86 95       	lsr	r24
    39e8:	80 93 72 02 	sts	0x0272, r24
	led_frame_bitmap[44]>>=1;
    39ec:	80 91 73 02 	lds	r24, 0x0273
    39f0:	86 95       	lsr	r24
    39f2:	80 93 73 02 	sts	0x0273, r24
	led_frame_bitmap[45]>>=1;
    39f6:	80 91 74 02 	lds	r24, 0x0274
    39fa:	86 95       	lsr	r24
    39fc:	80 93 74 02 	sts	0x0274, r24
	led_frame_bitmap[46]>>=1;
    3a00:	80 91 75 02 	lds	r24, 0x0275
    3a04:	86 95       	lsr	r24
    3a06:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[47]>>=1;
    3a0a:	80 91 76 02 	lds	r24, 0x0276
    3a0e:	86 95       	lsr	r24
    3a10:	80 93 76 02 	sts	0x0276, r24
	led_frame_bitmap[48]>>=1;
    3a14:	80 91 77 02 	lds	r24, 0x0277
    3a18:	86 95       	lsr	r24
    3a1a:	80 93 77 02 	sts	0x0277, r24
	led_frame_bitmap[49]>>=1;
    3a1e:	80 91 78 02 	lds	r24, 0x0278
    3a22:	86 95       	lsr	r24
    3a24:	80 93 78 02 	sts	0x0278, r24
	led_frame_bitmap[50]>>=1;
    3a28:	80 91 79 02 	lds	r24, 0x0279
    3a2c:	86 95       	lsr	r24
    3a2e:	80 93 79 02 	sts	0x0279, r24
	led_frame_bitmap[51]>>=1;
    3a32:	80 91 7a 02 	lds	r24, 0x027A
    3a36:	86 95       	lsr	r24
    3a38:	80 93 7a 02 	sts	0x027A, r24
	led_frame_bitmap[52]>>=1;
    3a3c:	80 91 7b 02 	lds	r24, 0x027B
    3a40:	86 95       	lsr	r24
    3a42:	80 93 7b 02 	sts	0x027B, r24
	led_frame_bitmap[53]>>=1;
    3a46:	80 91 7c 02 	lds	r24, 0x027C
    3a4a:	86 95       	lsr	r24
    3a4c:	80 93 7c 02 	sts	0x027C, r24
	led_frame_bitmap[54]>>=1;
    3a50:	80 91 7d 02 	lds	r24, 0x027D
    3a54:	86 95       	lsr	r24
    3a56:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[55]>>=1;
    3a5a:	80 91 7e 02 	lds	r24, 0x027E
    3a5e:	86 95       	lsr	r24
    3a60:	80 93 7e 02 	sts	0x027E, r24
	led_frame_bitmap[56]>>=1;
    3a64:	80 91 7f 02 	lds	r24, 0x027F
    3a68:	86 95       	lsr	r24
    3a6a:	80 93 7f 02 	sts	0x027F, r24
	led_frame_bitmap[57]>>=1;
    3a6e:	80 91 80 02 	lds	r24, 0x0280
    3a72:	86 95       	lsr	r24
    3a74:	80 93 80 02 	sts	0x0280, r24
	led_frame_bitmap[58]>>=1;
    3a78:	80 91 81 02 	lds	r24, 0x0281
    3a7c:	86 95       	lsr	r24
    3a7e:	80 93 81 02 	sts	0x0281, r24
	led_frame_bitmap[59]>>=1;
    3a82:	80 91 82 02 	lds	r24, 0x0282
    3a86:	86 95       	lsr	r24
    3a88:	80 93 82 02 	sts	0x0282, r24
	led_frame_bitmap[60]>>=1;
    3a8c:	80 91 83 02 	lds	r24, 0x0283
    3a90:	86 95       	lsr	r24
    3a92:	80 93 83 02 	sts	0x0283, r24
	led_frame_bitmap[61]>>=1;
    3a96:	fd 01       	movw	r30, r26
    3a98:	fd 96       	adiw	r30, 0x3d	; 61
    3a9a:	80 81       	ld	r24, Z
    3a9c:	86 95       	lsr	r24
    3a9e:	80 83       	st	Z, r24
	led_frame_bitmap[62]>>=1;
    3aa0:	fd 01       	movw	r30, r26
    3aa2:	fe 96       	adiw	r30, 0x3e	; 62
    3aa4:	80 81       	ld	r24, Z
    3aa6:	86 95       	lsr	r24
    3aa8:	80 83       	st	Z, r24
	led_frame_bitmap[63]>>=1;
    3aaa:	df 96       	adiw	r26, 0x3f	; 63
    3aac:	8c 91       	ld	r24, X
    3aae:	86 95       	lsr	r24
    3ab0:	8c 93       	st	X, r24

}
    3ab2:	08 95       	ret

00003ab4 <__vector_14>:
	OCR1B = output_plane_period[plane_current];

}

ISR(TIMER1_OVF_vect)
{
    3ab4:	1f 92       	push	r1
    3ab6:	0f 92       	push	r0
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	0f 92       	push	r0
    3abc:	11 24       	eor	r1, r1
    3abe:	2f 93       	push	r18
    3ac0:	8f 93       	push	r24
    3ac2:	9f 93       	push	r25
	//TOV1 isr occurs at END of plane N (bottom), start of plane N+1

	LED_LATCH_PORT |=_BV(LED_LATCH_BIT);
    3ac4:	80 91 62 00 	lds	r24, 0x0062
    3ac8:	80 68       	ori	r24, 0x80	; 128
    3aca:	80 93 62 00 	sts	0x0062, r24

	if(flip)
    3ace:	80 91 7e 01 	lds	r24, 0x017E
    3ad2:	20 91 06 01 	lds	r18, 0x0106
    3ad6:	88 23       	and	r24, r24
    3ad8:	41 f0       	breq	.+16     	; 0x3aea <__vector_14+0x36>
		PLANES_PORT =~ (0x80>>plane_current);
    3ada:	80 e8       	ldi	r24, 0x80	; 128
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <__vector_14+0x30>
    3ae0:	95 95       	asr	r25
    3ae2:	87 95       	ror	r24
    3ae4:	2a 95       	dec	r18
    3ae6:	e2 f7       	brpl	.-8      	; 0x3ae0 <__vector_14+0x2c>
    3ae8:	07 c0       	rjmp	.+14     	; 0x3af8 <__vector_14+0x44>
	else
		PLANES_PORT =~ (1<<plane_current);
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <__vector_14+0x40>
    3af0:	88 0f       	add	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	2a 95       	dec	r18
    3af6:	e2 f7       	brpl	.-8      	; 0x3af0 <__vector_14+0x3c>
    3af8:	80 95       	com	r24
    3afa:	85 bb       	out	0x15, r24	; 21
	
	LED_LATCH_PORT &=~_BV(LED_LATCH_BIT);
    3afc:	80 91 62 00 	lds	r24, 0x0062
    3b00:	8f 77       	andi	r24, 0x7F	; 127
    3b02:	80 93 62 00 	sts	0x0062, r24
}
    3b06:	9f 91       	pop	r25
    3b08:	8f 91       	pop	r24
    3b0a:	2f 91       	pop	r18
    3b0c:	0f 90       	pop	r0
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	0f 90       	pop	r0
    3b12:	1f 90       	pop	r1
    3b14:	18 95       	reti

00003b16 <__vector_12>:
//********************************************************************************************************
// Private functions
//********************************************************************************************************

ISR(TIMER1_COMPA_vect)
{
    3b16:	1f 92       	push	r1
    3b18:	0f 92       	push	r0
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	0f 92       	push	r0
    3b1e:	11 24       	eor	r1, r1
    3b20:	8f 93       	push	r24
    3b22:	9f 93       	push	r25
    3b24:	af 93       	push	r26
    3b26:	bf 93       	push	r27
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	ef 93       	push	r30
    3b2e:	ff 93       	push	r31
	unsigned char* output_ptr;
	//OCR1A isr occurs 1/2 way through displaying plane  (top)

	//if displaying last plane
	if(plane_current==7)
    3b30:	80 91 06 01 	lds	r24, 0x0106
    3b34:	87 30       	cpi	r24, 0x07	; 7
    3b36:	f1 f4       	brne	.+60     	; 0x3b74 <__vector_12+0x5e>
	{
		//copy new frame to output buffer
		memcpy(output_bitmap, led_frame_bitmap, 64);
    3b38:	aa e9       	ldi	r26, 0x9A	; 154
    3b3a:	b1 e0       	ldi	r27, 0x01	; 1
    3b3c:	e7 e4       	ldi	r30, 0x47	; 71
    3b3e:	f2 e0       	ldi	r31, 0x02	; 2
    3b40:	80 e4       	ldi	r24, 0x40	; 64
    3b42:	01 90       	ld	r0, Z+
    3b44:	0d 92       	st	X+, r0
    3b46:	81 50       	subi	r24, 0x01	; 1
    3b48:	e1 f7       	brne	.-8      	; 0x3b42 <__vector_12+0x2c>
		memcpy(output_plane_period, plane_period, 16);
    3b4a:	aa ed       	ldi	r26, 0xDA	; 218
    3b4c:	b1 e0       	ldi	r27, 0x01	; 1
    3b4e:	e0 e8       	ldi	r30, 0x80	; 128
    3b50:	f1 e0       	ldi	r31, 0x01	; 1
    3b52:	80 e1       	ldi	r24, 0x10	; 16
    3b54:	01 90       	ld	r0, Z+
    3b56:	0d 92       	st	X+, r0
    3b58:	81 50       	subi	r24, 0x01	; 1
    3b5a:	e1 f7       	brne	.-8      	; 0x3b54 <__vector_12+0x3e>
		OCR1A = frame_time;
    3b5c:	80 91 90 01 	lds	r24, 0x0190
    3b60:	90 91 91 01 	lds	r25, 0x0191
    3b64:	9b bd       	out	0x2b, r25	; 43
    3b66:	8a bd       	out	0x2a, r24	; 42
		plane_current=0;
    3b68:	10 92 06 01 	sts	0x0106, r1
		frame_sync=TRUE;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	80 93 7f 01 	sts	0x017F, r24
    3b72:	03 c0       	rjmp	.+6      	; 0x3b7a <__vector_12+0x64>
	}
	else
		plane_current++;
    3b74:	8f 5f       	subi	r24, 0xFF	; 255
    3b76:	80 93 06 01 	sts	0x0106, r24

	if(flip)
    3b7a:	80 91 7e 01 	lds	r24, 0x017E
    3b7e:	e0 91 06 01 	lds	r30, 0x0106
    3b82:	88 23       	and	r24, r24
    3b84:	81 f1       	breq	.+96     	; 0x3be6 <__vector_12+0xd0>
	{
		output_ptr = &output_bitmap[7+(plane_current<<3)];
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	a3 e0       	ldi	r26, 0x03	; 3
    3b8a:	ee 0f       	add	r30, r30
    3b8c:	ff 1f       	adc	r31, r31
    3b8e:	aa 95       	dec	r26
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <__vector_12+0x74>
    3b92:	ef 55       	subi	r30, 0x5F	; 95
    3b94:	fe 4f       	sbci	r31, 0xFE	; 254
		
		//load data for new plane
		SPDR = *output_ptr--;
    3b96:	80 81       	ld	r24, Z
    3b98:	8f b9       	out	0x0f, r24	; 15
    3b9a:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3b9c:	77 9b       	sbis	0x0e, 7	; 14
    3b9e:	fe cf       	rjmp	.-4      	; 0x3b9c <__vector_12+0x86>
		SPDR = *output_ptr--;
    3ba0:	80 81       	ld	r24, Z
    3ba2:	8f b9       	out	0x0f, r24	; 15
    3ba4:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3ba6:	77 9b       	sbis	0x0e, 7	; 14
    3ba8:	fe cf       	rjmp	.-4      	; 0x3ba6 <__vector_12+0x90>
		SPDR = *output_ptr--;
    3baa:	80 81       	ld	r24, Z
    3bac:	8f b9       	out	0x0f, r24	; 15
    3bae:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3bb0:	77 9b       	sbis	0x0e, 7	; 14
    3bb2:	fe cf       	rjmp	.-4      	; 0x3bb0 <__vector_12+0x9a>
		SPDR = *output_ptr--;
    3bb4:	80 81       	ld	r24, Z
    3bb6:	8f b9       	out	0x0f, r24	; 15
    3bb8:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3bba:	77 9b       	sbis	0x0e, 7	; 14
    3bbc:	fe cf       	rjmp	.-4      	; 0x3bba <__vector_12+0xa4>
		SPDR = *output_ptr--;
    3bbe:	80 81       	ld	r24, Z
    3bc0:	8f b9       	out	0x0f, r24	; 15
    3bc2:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3bc4:	77 9b       	sbis	0x0e, 7	; 14
    3bc6:	fe cf       	rjmp	.-4      	; 0x3bc4 <__vector_12+0xae>
		SPDR = *output_ptr--;
    3bc8:	80 81       	ld	r24, Z
    3bca:	8f b9       	out	0x0f, r24	; 15
    3bcc:	31 97       	sbiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3bce:	77 9b       	sbis	0x0e, 7	; 14
    3bd0:	fe cf       	rjmp	.-4      	; 0x3bce <__vector_12+0xb8>
		SPDR = *output_ptr--;
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & _BV(SPIF)));
    3bd6:	77 9b       	sbis	0x0e, 7	; 14
    3bd8:	fe cf       	rjmp	.-4      	; 0x3bd6 <__vector_12+0xc0>
		SPDR = *output_ptr;
    3bda:	31 97       	sbiw	r30, 0x01	; 1
    3bdc:	80 81       	ld	r24, Z
    3bde:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & _BV(SPIF)));
    3be0:	77 9b       	sbis	0x0e, 7	; 14
    3be2:	fe cf       	rjmp	.-4      	; 0x3be0 <__vector_12+0xca>
    3be4:	36 c0       	rjmp	.+108    	; 0x3c52 <__vector_12+0x13c>
	}
	else
	{
		output_ptr = &output_bitmap[plane_current<<3];
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	93 e0       	ldi	r25, 0x03	; 3
    3bea:	ee 0f       	add	r30, r30
    3bec:	ff 1f       	adc	r31, r31
    3bee:	9a 95       	dec	r25
    3bf0:	e1 f7       	brne	.-8      	; 0x3bea <__vector_12+0xd4>
    3bf2:	e6 56       	subi	r30, 0x66	; 102
    3bf4:	fe 4f       	sbci	r31, 0xFE	; 254
		
		//load data for new plane
		SPDR = *output_ptr++;
    3bf6:	df 01       	movw	r26, r30
    3bf8:	8d 91       	ld	r24, X+
    3bfa:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & _BV(SPIF)));
    3bfc:	77 9b       	sbis	0x0e, 7	; 14
    3bfe:	fe cf       	rjmp	.-4      	; 0x3bfc <__vector_12+0xe6>
		SPDR = *output_ptr++;
    3c00:	81 81       	ldd	r24, Z+1	; 0x01
    3c02:	8f b9       	out	0x0f, r24	; 15
    3c04:	ed 01       	movw	r28, r26
    3c06:	21 96       	adiw	r28, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3c08:	77 9b       	sbis	0x0e, 7	; 14
    3c0a:	fe cf       	rjmp	.-4      	; 0x3c08 <__vector_12+0xf2>
		SPDR = *output_ptr++;
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	8c 91       	ld	r24, X
    3c10:	8f b9       	out	0x0f, r24	; 15
    3c12:	fe 01       	movw	r30, r28
    3c14:	31 96       	adiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3c16:	77 9b       	sbis	0x0e, 7	; 14
    3c18:	fe cf       	rjmp	.-4      	; 0x3c16 <__vector_12+0x100>
		SPDR = *output_ptr++;
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	8f b9       	out	0x0f, r24	; 15
    3c1e:	df 01       	movw	r26, r30
    3c20:	11 96       	adiw	r26, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3c22:	77 9b       	sbis	0x0e, 7	; 14
    3c24:	fe cf       	rjmp	.-4      	; 0x3c22 <__vector_12+0x10c>
		SPDR = *output_ptr++;
    3c26:	81 81       	ldd	r24, Z+1	; 0x01
    3c28:	8f b9       	out	0x0f, r24	; 15
    3c2a:	fd 01       	movw	r30, r26
    3c2c:	31 96       	adiw	r30, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3c2e:	77 9b       	sbis	0x0e, 7	; 14
    3c30:	fe cf       	rjmp	.-4      	; 0x3c2e <__vector_12+0x118>
		SPDR = *output_ptr++;
    3c32:	11 96       	adiw	r26, 0x01	; 1
    3c34:	8c 91       	ld	r24, X
    3c36:	8f b9       	out	0x0f, r24	; 15
    3c38:	df 01       	movw	r26, r30
    3c3a:	11 96       	adiw	r26, 0x01	; 1
		while(!(SPSR & _BV(SPIF)));
    3c3c:	77 9b       	sbis	0x0e, 7	; 14
    3c3e:	fe cf       	rjmp	.-4      	; 0x3c3c <__vector_12+0x126>
		SPDR = *output_ptr++;
    3c40:	81 81       	ldd	r24, Z+1	; 0x01
    3c42:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & _BV(SPIF)));
    3c44:	77 9b       	sbis	0x0e, 7	; 14
    3c46:	fe cf       	rjmp	.-4      	; 0x3c44 <__vector_12+0x12e>
		SPDR = *output_ptr;
    3c48:	11 96       	adiw	r26, 0x01	; 1
    3c4a:	8c 91       	ld	r24, X
    3c4c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & _BV(SPIF)));
    3c4e:	77 9b       	sbis	0x0e, 7	; 14
    3c50:	fe cf       	rjmp	.-4      	; 0x3c4e <__vector_12+0x138>
	};

	//load next plane intensity
	OCR1B = output_plane_period[plane_current];
    3c52:	e0 91 06 01 	lds	r30, 0x0106
    3c56:	f0 e0       	ldi	r31, 0x00	; 0
    3c58:	ee 0f       	add	r30, r30
    3c5a:	ff 1f       	adc	r31, r31
    3c5c:	e6 52       	subi	r30, 0x26	; 38
    3c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	99 bd       	out	0x29, r25	; 41
    3c66:	88 bd       	out	0x28, r24	; 40

}
    3c68:	ff 91       	pop	r31
    3c6a:	ef 91       	pop	r30
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	bf 91       	pop	r27
    3c72:	af 91       	pop	r26
    3c74:	9f 91       	pop	r25
    3c76:	8f 91       	pop	r24
    3c78:	0f 90       	pop	r0
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	0f 90       	pop	r0
    3c7e:	1f 90       	pop	r1
    3c80:	18 95       	reti

00003c82 <led_frame_back>:
	led_frame_bitmap[63]=0;
}

//scroll entire frame back 1 pixel
void led_frame_back(void)
{
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
	memmove(&led_frame_bitmap[1], &led_frame_bitmap[0], 63);
    3c86:	88 e4       	ldi	r24, 0x48	; 72
    3c88:	92 e0       	ldi	r25, 0x02	; 2
    3c8a:	8c 01       	movw	r16, r24
    3c8c:	01 50       	subi	r16, 0x01	; 1
    3c8e:	10 40       	sbci	r17, 0x00	; 0
    3c90:	b8 01       	movw	r22, r16
    3c92:	4f e3       	ldi	r20, 0x3F	; 63
    3c94:	50 e0       	ldi	r21, 0x00	; 0
    3c96:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	led_frame_bitmap[0]=0;
    3c9a:	f8 01       	movw	r30, r16
    3c9c:	10 82       	st	Z, r1
	led_frame_bitmap[8]=0;
    3c9e:	10 92 4f 02 	sts	0x024F, r1
	led_frame_bitmap[16]=0;
    3ca2:	10 92 57 02 	sts	0x0257, r1
	led_frame_bitmap[24]=0;
    3ca6:	10 92 5f 02 	sts	0x025F, r1
	led_frame_bitmap[32]=0;
    3caa:	10 92 67 02 	sts	0x0267, r1
	led_frame_bitmap[40]=0;
    3cae:	10 92 6f 02 	sts	0x026F, r1
	led_frame_bitmap[48]=0;
    3cb2:	10 92 77 02 	sts	0x0277, r1
	led_frame_bitmap[56]=0;
    3cb6:	10 92 7f 02 	sts	0x027F, r1
}
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	08 95       	ret

00003cc0 <led_frame_forward>:

}

//scroll entire frame forward 1 pixel
void led_frame_forward(void)
{
    3cc0:	0f 93       	push	r16
    3cc2:	1f 93       	push	r17
	memmove(&led_frame_bitmap[0], &led_frame_bitmap[1], 63);
    3cc4:	07 e4       	ldi	r16, 0x47	; 71
    3cc6:	12 e0       	ldi	r17, 0x02	; 2
    3cc8:	b8 01       	movw	r22, r16
    3cca:	6f 5f       	subi	r22, 0xFF	; 255
    3ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cce:	c8 01       	movw	r24, r16
    3cd0:	4f e3       	ldi	r20, 0x3F	; 63
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	led_frame_bitmap[7]=0;
    3cd8:	10 92 4e 02 	sts	0x024E, r1
	led_frame_bitmap[15]=0;
    3cdc:	10 92 56 02 	sts	0x0256, r1
	led_frame_bitmap[23]=0;
    3ce0:	10 92 5e 02 	sts	0x025E, r1
	led_frame_bitmap[31]=0;
    3ce4:	10 92 66 02 	sts	0x0266, r1
	led_frame_bitmap[39]=0;
    3ce8:	10 92 6e 02 	sts	0x026E, r1
	led_frame_bitmap[47]=0;
    3cec:	10 92 76 02 	sts	0x0276, r1
	led_frame_bitmap[55]=0;
    3cf0:	10 92 7e 02 	sts	0x027E, r1
	led_frame_bitmap[63]=0;
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	17 ae       	std	Z+63, r1	; 0x3f
}
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	08 95       	ret

00003cfe <led_plane_y_forward>:
	led_frame_bitmap[y]=0;
}

//scroll a horizontal plane forwards
void led_plane_y_forward(unsigned char y)
{
    3cfe:	0f 93       	push	r16
    3d00:	1f 93       	push	r17
	y<<=3;
    3d02:	88 0f       	add	r24, r24
    3d04:	88 0f       	add	r24, r24
    3d06:	88 0f       	add	r24, r24
	memmove(&led_frame_bitmap[y], &led_frame_bitmap[y+1], 7);
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	67 e4       	ldi	r22, 0x47	; 71
    3d0c:	72 e0       	ldi	r23, 0x02	; 2
    3d0e:	8b 01       	movw	r16, r22
    3d10:	08 0f       	add	r16, r24
    3d12:	19 1f       	adc	r17, r25
    3d14:	01 96       	adiw	r24, 0x01	; 1
    3d16:	68 0f       	add	r22, r24
    3d18:	79 1f       	adc	r23, r25
    3d1a:	c8 01       	movw	r24, r16
    3d1c:	47 e0       	ldi	r20, 0x07	; 7
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	led_frame_bitmap[y+7]=0;
    3d24:	f8 01       	movw	r30, r16
    3d26:	17 82       	std	Z+7, r1	; 0x07
}
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	08 95       	ret

00003d2e <led_plane_y_back>:
	};
}

//scroll a horizontal plane back
void led_plane_y_back(unsigned char y)
{
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
	y<<=3;
    3d32:	88 0f       	add	r24, r24
    3d34:	88 0f       	add	r24, r24
    3d36:	88 0f       	add	r24, r24
	memmove(&led_frame_bitmap[y+1], &led_frame_bitmap[y], 7);
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	27 e4       	ldi	r18, 0x47	; 71
    3d3c:	32 e0       	ldi	r19, 0x02	; 2
    3d3e:	89 01       	movw	r16, r18
    3d40:	08 0f       	add	r16, r24
    3d42:	19 1f       	adc	r17, r25
    3d44:	01 96       	adiw	r24, 0x01	; 1
    3d46:	82 0f       	add	r24, r18
    3d48:	93 1f       	adc	r25, r19
    3d4a:	b8 01       	movw	r22, r16
    3d4c:	47 e0       	ldi	r20, 0x07	; 7
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	led_frame_bitmap[y]=0;
    3d54:	f8 01       	movw	r30, r16
    3d56:	10 82       	st	Z, r1
}
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	08 95       	ret

00003d5e <led_perimeter_down>:
	led_frame_bitmap[15] = temprow1;

}

void led_perimeter_down(void)
{
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
	//back face up
	//restore back bottom row (2)
	//restore (1) to X,6,7

	//save back bottom row before rotate (1)
	temprow1 = led_frame_bitmap[63];
    3d62:	00 91 86 02 	lds	r16, 0x0286
	
	//bottom face back
	led_plane_y_back(7);
    3d66:	87 e0       	ldi	r24, 0x07	; 7
    3d68:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <led_plane_y_back>
	
	//front face down
	led_plane_z_down(0);
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <led_plane_z_down>

	//top face forwards
	led_plane_y_forward(0);
    3d72:	80 e0       	ldi	r24, 0x00	; 0
    3d74:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <led_plane_y_forward>

	//save back bottom row again (2)
	temprow2 = led_frame_bitmap[63];
    3d78:	10 91 86 02 	lds	r17, 0x0286
	
	//back face up
	led_plane_z_up(7);
    3d7c:	87 e0       	ldi	r24, 0x07	; 7
    3d7e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <led_plane_z_up>
	
	//restore back bottom row (2)
	led_frame_bitmap[63] = temprow2;
    3d82:	10 93 86 02 	sts	0x0286, r17
	
	//restore (1) to X,6,7
	led_frame_bitmap[55] = temprow1;
    3d86:	00 93 7e 02 	sts	0x027E, r16

}
    3d8a:	1f 91       	pop	r17
    3d8c:	0f 91       	pop	r16
    3d8e:	08 95       	ret

00003d90 <led_perimeter_up>:
		led_frame_bitmap[62] |=0x80;

}

void led_perimeter_up(void)
{
    3d90:	0f 93       	push	r16
    3d92:	1f 93       	push	r17
	//restore back top row (2)
	//restore (1) to X,1,7
	

	//save back top row before rotate (1)
	temprow1 = led_frame_bitmap[7];
    3d94:	00 91 4e 02 	lds	r16, 0x024E
	
	//top face back
	led_plane_y_back(0);
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <led_plane_y_back>
	
	//front face up
	led_plane_z_up(0);
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <led_plane_z_up>
	
	//botom face forwards
	led_plane_y_forward(7);
    3da4:	87 e0       	ldi	r24, 0x07	; 7
    3da6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <led_plane_y_forward>
	
	//save back top row again (2)
	temprow2 = led_frame_bitmap[7];
    3daa:	10 91 4e 02 	lds	r17, 0x024E
	
	//back face down
	led_plane_z_down(7);
    3dae:	87 e0       	ldi	r24, 0x07	; 7
    3db0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <led_plane_z_down>

	//restore back top row (2)
	led_frame_bitmap[7] = temprow2;
    3db4:	10 93 4e 02 	sts	0x024E, r17
	
	//restore (1) to X,1,7
	led_frame_bitmap[15] = temprow1;
    3db8:	00 93 56 02 	sts	0x0256, r16

}
    3dbc:	1f 91       	pop	r17
    3dbe:	0f 91       	pop	r16
    3dc0:	08 95       	ret

00003dc2 <led_frame_up>:
	memset(&led_frame_bitmap[0], 0, 8);
}

//scroll entire frame up 1 pixel
void led_frame_up(void)
{
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
	memmove(&led_frame_bitmap[0], &led_frame_bitmap[8], 56);
    3dc6:	07 e4       	ldi	r16, 0x47	; 71
    3dc8:	12 e0       	ldi	r17, 0x02	; 2
    3dca:	c8 01       	movw	r24, r16
    3dcc:	08 5f       	subi	r16, 0xF8	; 248
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	b8 01       	movw	r22, r16
    3dd2:	48 e3       	ldi	r20, 0x38	; 56
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	memset(&led_frame_bitmap[56], 0, 8);
    3dda:	00 5d       	subi	r16, 0xD0	; 208
    3ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dde:	88 e0       	ldi	r24, 0x08	; 8
    3de0:	f8 01       	movw	r30, r16
    3de2:	11 92       	st	Z+, r1
    3de4:	8a 95       	dec	r24
    3de6:	e9 f7       	brne	.-6      	; 0x3de2 <led_frame_up+0x20>
}
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <led_frame_down>:

}	

//scroll entire frame down 1 pixel
void led_frame_down(void)
{
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
	memmove(&led_frame_bitmap[8], &led_frame_bitmap[0], 56);
    3df2:	8f e4       	ldi	r24, 0x4F	; 79
    3df4:	92 e0       	ldi	r25, 0x02	; 2
    3df6:	8c 01       	movw	r16, r24
    3df8:	08 50       	subi	r16, 0x08	; 8
    3dfa:	10 40       	sbci	r17, 0x00	; 0
    3dfc:	b8 01       	movw	r22, r16
    3dfe:	48 e3       	ldi	r20, 0x38	; 56
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	0e 94 36 50 	call	0xa06c	; 0xa06c <memmove>
	memset(&led_frame_bitmap[0], 0, 8);
    3e06:	88 e0       	ldi	r24, 0x08	; 8
    3e08:	f8 01       	movw	r30, r16
    3e0a:	11 92       	st	Z+, r1
    3e0c:	8a 95       	dec	r24
    3e0e:	e9 f7       	brne	.-6      	; 0x3e0a <led_frame_down+0x1c>
}
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	08 95       	ret

00003e16 <led_perimeter_anticlockwise>:

}

//rotate perimiter clockwise (top left)
void led_perimeter_anticlockwise(void)
{
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	60 97       	sbiw	r28, 0x10	; 16
    3e20:	0f b6       	in	r0, 0x3f	; 63
    3e22:	f8 94       	cli
    3e24:	de bf       	out	0x3e, r29	; 62
    3e26:	0f be       	out	0x3f, r0	; 63
    3e28:	cd bf       	out	0x3d, r28	; 61
	unsigned char temprow1[8];
	unsigned char temprow2[8];

	memset(temprow1, 0, 8);
    3e2a:	88 e0       	ldi	r24, 0x08	; 8
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	31 96       	adiw	r30, 0x01	; 1
    3e30:	df 01       	movw	r26, r30
    3e32:	98 2f       	mov	r25, r24
    3e34:	1d 92       	st	X+, r1
    3e36:	9a 95       	dec	r25
    3e38:	e9 f7       	brne	.-6      	; 0x3e34 <led_perimeter_anticlockwise+0x1e>
	memset(temprow2, 0, 8);
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	39 96       	adiw	r30, 0x09	; 9
    3e3e:	df 01       	movw	r26, r30
    3e40:	1d 92       	st	X+, r1
    3e42:	8a 95       	dec	r24
    3e44:	e9 f7       	brne	.-6      	; 0x3e40 <led_perimeter_anticlockwise+0x2a>

	//save top left row (1)
	if(led_frame_bitmap[0] & 0x80)
    3e46:	80 91 47 02 	lds	r24, 0x0247
    3e4a:	87 ff       	sbrs	r24, 7
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <led_perimeter_anticlockwise+0x3c>
		temprow1[0]=1;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	89 83       	std	Y+1, r24	; 0x01
	if(led_frame_bitmap[1] & 0x80)
    3e52:	80 91 48 02 	lds	r24, 0x0248
    3e56:	87 ff       	sbrs	r24, 7
    3e58:	02 c0       	rjmp	.+4      	; 0x3e5e <led_perimeter_anticlockwise+0x48>
		temprow1[1]=1;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	8a 83       	std	Y+2, r24	; 0x02
	if(led_frame_bitmap[2] & 0x80)
    3e5e:	80 91 49 02 	lds	r24, 0x0249
    3e62:	87 ff       	sbrs	r24, 7
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <led_perimeter_anticlockwise+0x54>
		temprow1[2]=1;
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	8b 83       	std	Y+3, r24	; 0x03
	if(led_frame_bitmap[3] & 0x80)
    3e6a:	80 91 4a 02 	lds	r24, 0x024A
    3e6e:	87 ff       	sbrs	r24, 7
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <led_perimeter_anticlockwise+0x60>
		temprow1[3]=1;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	8c 83       	std	Y+4, r24	; 0x04
	if(led_frame_bitmap[4] & 0x80)
    3e76:	80 91 4b 02 	lds	r24, 0x024B
    3e7a:	87 ff       	sbrs	r24, 7
    3e7c:	02 c0       	rjmp	.+4      	; 0x3e82 <led_perimeter_anticlockwise+0x6c>
		temprow1[4]=1;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	8d 83       	std	Y+5, r24	; 0x05
	if(led_frame_bitmap[5] & 0x80)
    3e82:	80 91 4c 02 	lds	r24, 0x024C
    3e86:	87 ff       	sbrs	r24, 7
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <led_perimeter_anticlockwise+0x78>
		temprow1[5]=1;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	8e 83       	std	Y+6, r24	; 0x06
	if(led_frame_bitmap[6] & 0x80)
    3e8e:	80 91 4d 02 	lds	r24, 0x024D
    3e92:	87 ff       	sbrs	r24, 7
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <led_perimeter_anticlockwise+0x84>
		temprow1[6]=1;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	8f 83       	std	Y+7, r24	; 0x07
	if(led_frame_bitmap[7] & 0x80)
    3e9a:	80 91 4e 02 	lds	r24, 0x024E
    3e9e:	87 ff       	sbrs	r24, 7
    3ea0:	02 c0       	rjmp	.+4      	; 0x3ea6 <led_perimeter_anticlockwise+0x90>
		temprow1[7]=1;
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	88 87       	std	Y+8, r24	; 0x08

	//scroll top left
	led_plane_y_left(0);
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <led_plane_y_left>
	//scroll right up
	led_plane_x_up(7);
    3eac:	87 e0       	ldi	r24, 0x07	; 7
    3eae:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <led_plane_x_up>
	//scroll bottom right
	led_plane_y_right(7);
    3eb2:	87 e0       	ldi	r24, 0x07	; 7
    3eb4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <led_plane_y_right>

	//save top left row (2)
	if(led_frame_bitmap[0] & 0x80)
    3eb8:	80 91 47 02 	lds	r24, 0x0247
    3ebc:	87 ff       	sbrs	r24, 7
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <led_perimeter_anticlockwise+0xae>
		temprow2[0]=1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	89 87       	std	Y+9, r24	; 0x09
	if(led_frame_bitmap[1] & 0x80)
    3ec4:	80 91 48 02 	lds	r24, 0x0248
    3ec8:	87 ff       	sbrs	r24, 7
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <led_perimeter_anticlockwise+0xba>
		temprow2[1]=1;
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	8a 87       	std	Y+10, r24	; 0x0a
	if(led_frame_bitmap[2] & 0x80)
    3ed0:	80 91 49 02 	lds	r24, 0x0249
    3ed4:	87 ff       	sbrs	r24, 7
    3ed6:	02 c0       	rjmp	.+4      	; 0x3edc <led_perimeter_anticlockwise+0xc6>
		temprow2[2]=1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	8b 87       	std	Y+11, r24	; 0x0b
	if(led_frame_bitmap[3] & 0x80)
    3edc:	80 91 4a 02 	lds	r24, 0x024A
    3ee0:	87 ff       	sbrs	r24, 7
    3ee2:	02 c0       	rjmp	.+4      	; 0x3ee8 <led_perimeter_anticlockwise+0xd2>
		temprow2[3]=1;
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	8c 87       	std	Y+12, r24	; 0x0c
	if(led_frame_bitmap[4] & 0x80)
    3ee8:	80 91 4b 02 	lds	r24, 0x024B
    3eec:	87 ff       	sbrs	r24, 7
    3eee:	02 c0       	rjmp	.+4      	; 0x3ef4 <led_perimeter_anticlockwise+0xde>
		temprow2[4]=1;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	8d 87       	std	Y+13, r24	; 0x0d
	if(led_frame_bitmap[5] & 0x80)
    3ef4:	80 91 4c 02 	lds	r24, 0x024C
    3ef8:	87 ff       	sbrs	r24, 7
    3efa:	02 c0       	rjmp	.+4      	; 0x3f00 <led_perimeter_anticlockwise+0xea>
		temprow2[5]=1;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	8e 87       	std	Y+14, r24	; 0x0e
	if(led_frame_bitmap[6] & 0x80)
    3f00:	80 91 4d 02 	lds	r24, 0x024D
    3f04:	87 ff       	sbrs	r24, 7
    3f06:	02 c0       	rjmp	.+4      	; 0x3f0c <led_perimeter_anticlockwise+0xf6>
		temprow2[6]=1;
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	8f 87       	std	Y+15, r24	; 0x0f
	if(led_frame_bitmap[7] & 0x80)
    3f0c:	80 91 4e 02 	lds	r24, 0x024E
    3f10:	87 ff       	sbrs	r24, 7
    3f12:	02 c0       	rjmp	.+4      	; 0x3f18 <led_perimeter_anticlockwise+0x102>
		temprow2[7]=1;
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	88 8b       	std	Y+16, r24	; 0x10

	//scroll left down
	led_plane_x_down(0);
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <led_plane_x_down>

	//restore correct top left row (2)
	if(temprow2[0])
    3f1e:	89 85       	ldd	r24, Y+9	; 0x09
    3f20:	88 23       	and	r24, r24
    3f22:	29 f0       	breq	.+10     	; 0x3f2e <led_perimeter_anticlockwise+0x118>
		led_frame_bitmap[0] |=0x80;
    3f24:	80 91 47 02 	lds	r24, 0x0247
    3f28:	80 68       	ori	r24, 0x80	; 128
    3f2a:	80 93 47 02 	sts	0x0247, r24
	if(temprow2[1])
    3f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f30:	88 23       	and	r24, r24
    3f32:	29 f0       	breq	.+10     	; 0x3f3e <led_perimeter_anticlockwise+0x128>
		led_frame_bitmap[1] |=0x80;
    3f34:	80 91 48 02 	lds	r24, 0x0248
    3f38:	80 68       	ori	r24, 0x80	; 128
    3f3a:	80 93 48 02 	sts	0x0248, r24
	if(temprow2[2])
    3f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f40:	88 23       	and	r24, r24
    3f42:	29 f0       	breq	.+10     	; 0x3f4e <led_perimeter_anticlockwise+0x138>
		led_frame_bitmap[2] |=0x80;
    3f44:	80 91 49 02 	lds	r24, 0x0249
    3f48:	80 68       	ori	r24, 0x80	; 128
    3f4a:	80 93 49 02 	sts	0x0249, r24
	if(temprow2[3])
    3f4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f50:	88 23       	and	r24, r24
    3f52:	29 f0       	breq	.+10     	; 0x3f5e <led_perimeter_anticlockwise+0x148>
		led_frame_bitmap[3] |=0x80;
    3f54:	80 91 4a 02 	lds	r24, 0x024A
    3f58:	80 68       	ori	r24, 0x80	; 128
    3f5a:	80 93 4a 02 	sts	0x024A, r24
	if(temprow2[4])
    3f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f60:	88 23       	and	r24, r24
    3f62:	29 f0       	breq	.+10     	; 0x3f6e <led_perimeter_anticlockwise+0x158>
		led_frame_bitmap[4] |=0x80;
    3f64:	80 91 4b 02 	lds	r24, 0x024B
    3f68:	80 68       	ori	r24, 0x80	; 128
    3f6a:	80 93 4b 02 	sts	0x024B, r24
	if(temprow2[5])
    3f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f70:	88 23       	and	r24, r24
    3f72:	29 f0       	breq	.+10     	; 0x3f7e <led_perimeter_anticlockwise+0x168>
		led_frame_bitmap[5] |=0x80;
    3f74:	80 91 4c 02 	lds	r24, 0x024C
    3f78:	80 68       	ori	r24, 0x80	; 128
    3f7a:	80 93 4c 02 	sts	0x024C, r24
	if(temprow2[6])
    3f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f80:	88 23       	and	r24, r24
    3f82:	29 f0       	breq	.+10     	; 0x3f8e <led_perimeter_anticlockwise+0x178>
		led_frame_bitmap[6] |=0x80;
    3f84:	80 91 4d 02 	lds	r24, 0x024D
    3f88:	80 68       	ori	r24, 0x80	; 128
    3f8a:	80 93 4d 02 	sts	0x024D, r24
	if(temprow2[7])
    3f8e:	88 89       	ldd	r24, Y+16	; 0x10
    3f90:	88 23       	and	r24, r24
    3f92:	29 f0       	breq	.+10     	; 0x3f9e <led_perimeter_anticlockwise+0x188>
		led_frame_bitmap[7] |=0x80;
    3f94:	80 91 4e 02 	lds	r24, 0x024E
    3f98:	80 68       	ori	r24, 0x80	; 128
    3f9a:	80 93 4e 02 	sts	0x024E, r24

	//restore (1) to 7,1,Z
	led_frame_bitmap[8] &=0x7F;
    3f9e:	90 91 4f 02 	lds	r25, 0x024F
    3fa2:	9f 77       	andi	r25, 0x7F	; 127
    3fa4:	90 93 4f 02 	sts	0x024F, r25
	led_frame_bitmap[9] &=0x7F;
    3fa8:	80 91 50 02 	lds	r24, 0x0250
    3fac:	8f 77       	andi	r24, 0x7F	; 127
    3fae:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[10] &=0x7F;
    3fb2:	80 91 51 02 	lds	r24, 0x0251
    3fb6:	8f 77       	andi	r24, 0x7F	; 127
    3fb8:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[11] &=0x7F;
    3fbc:	80 91 52 02 	lds	r24, 0x0252
    3fc0:	8f 77       	andi	r24, 0x7F	; 127
    3fc2:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[12] &=0x7F;
    3fc6:	80 91 53 02 	lds	r24, 0x0253
    3fca:	8f 77       	andi	r24, 0x7F	; 127
    3fcc:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[13] &=0x7F;
    3fd0:	80 91 54 02 	lds	r24, 0x0254
    3fd4:	8f 77       	andi	r24, 0x7F	; 127
    3fd6:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[14] &=0x7F;
    3fda:	80 91 55 02 	lds	r24, 0x0255
    3fde:	8f 77       	andi	r24, 0x7F	; 127
    3fe0:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[15] &=0x7F;
    3fe4:	80 91 56 02 	lds	r24, 0x0256
    3fe8:	8f 77       	andi	r24, 0x7F	; 127
    3fea:	80 93 56 02 	sts	0x0256, r24
	if(temprow1[0])
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	88 23       	and	r24, r24
    3ff2:	19 f0       	breq	.+6      	; 0x3ffa <led_perimeter_anticlockwise+0x1e4>
		led_frame_bitmap[8] |=0x80;
    3ff4:	90 68       	ori	r25, 0x80	; 128
    3ff6:	90 93 4f 02 	sts	0x024F, r25
	if(temprow1[1])
    3ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffc:	88 23       	and	r24, r24
    3ffe:	29 f0       	breq	.+10     	; 0x400a <led_perimeter_anticlockwise+0x1f4>
		led_frame_bitmap[9] |=0x80;
    4000:	80 91 50 02 	lds	r24, 0x0250
    4004:	80 68       	ori	r24, 0x80	; 128
    4006:	80 93 50 02 	sts	0x0250, r24
	if(temprow1[2])
    400a:	8b 81       	ldd	r24, Y+3	; 0x03
    400c:	88 23       	and	r24, r24
    400e:	29 f0       	breq	.+10     	; 0x401a <led_perimeter_anticlockwise+0x204>
		led_frame_bitmap[10] |=0x80;
    4010:	80 91 51 02 	lds	r24, 0x0251
    4014:	80 68       	ori	r24, 0x80	; 128
    4016:	80 93 51 02 	sts	0x0251, r24
	if(temprow1[3])
    401a:	8c 81       	ldd	r24, Y+4	; 0x04
    401c:	88 23       	and	r24, r24
    401e:	29 f0       	breq	.+10     	; 0x402a <led_perimeter_anticlockwise+0x214>
		led_frame_bitmap[11] |=0x80;
    4020:	80 91 52 02 	lds	r24, 0x0252
    4024:	80 68       	ori	r24, 0x80	; 128
    4026:	80 93 52 02 	sts	0x0252, r24
	if(temprow1[4])
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	88 23       	and	r24, r24
    402e:	29 f0       	breq	.+10     	; 0x403a <led_perimeter_anticlockwise+0x224>
		led_frame_bitmap[12] |=0x80;
    4030:	80 91 53 02 	lds	r24, 0x0253
    4034:	80 68       	ori	r24, 0x80	; 128
    4036:	80 93 53 02 	sts	0x0253, r24
	if(temprow1[5])
    403a:	8e 81       	ldd	r24, Y+6	; 0x06
    403c:	88 23       	and	r24, r24
    403e:	29 f0       	breq	.+10     	; 0x404a <led_perimeter_anticlockwise+0x234>
		led_frame_bitmap[13] |=0x80;
    4040:	80 91 54 02 	lds	r24, 0x0254
    4044:	80 68       	ori	r24, 0x80	; 128
    4046:	80 93 54 02 	sts	0x0254, r24
	if(temprow1[6])
    404a:	8f 81       	ldd	r24, Y+7	; 0x07
    404c:	88 23       	and	r24, r24
    404e:	29 f0       	breq	.+10     	; 0x405a <led_perimeter_anticlockwise+0x244>
		led_frame_bitmap[14] |=0x80;
    4050:	80 91 55 02 	lds	r24, 0x0255
    4054:	80 68       	ori	r24, 0x80	; 128
    4056:	80 93 55 02 	sts	0x0255, r24
	if(temprow1[7])
    405a:	88 85       	ldd	r24, Y+8	; 0x08
    405c:	88 23       	and	r24, r24
    405e:	29 f0       	breq	.+10     	; 0x406a <led_perimeter_anticlockwise+0x254>
		led_frame_bitmap[15] |=0x80;
    4060:	80 91 56 02 	lds	r24, 0x0256
    4064:	80 68       	ori	r24, 0x80	; 128
    4066:	80 93 56 02 	sts	0x0256, r24

}	
    406a:	60 96       	adiw	r28, 0x10	; 16
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	cf 91       	pop	r28
    4078:	df 91       	pop	r29
    407a:	08 95       	ret

0000407c <led_perimeter_clockwise>:
}


//rotate perimiter clockwise (top right)
void led_perimeter_clockwise(void)
{
    407c:	df 93       	push	r29
    407e:	cf 93       	push	r28
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	60 97       	sbiw	r28, 0x10	; 16
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61

	unsigned char temprow1[8];
	unsigned char temprow2[8];

	memset(temprow1, 0, 8);
    4090:	88 e0       	ldi	r24, 0x08	; 8
    4092:	fe 01       	movw	r30, r28
    4094:	31 96       	adiw	r30, 0x01	; 1
    4096:	df 01       	movw	r26, r30
    4098:	98 2f       	mov	r25, r24
    409a:	1d 92       	st	X+, r1
    409c:	9a 95       	dec	r25
    409e:	e9 f7       	brne	.-6      	; 0x409a <led_perimeter_clockwise+0x1e>
	memset(temprow2, 0, 8);
    40a0:	fe 01       	movw	r30, r28
    40a2:	39 96       	adiw	r30, 0x09	; 9
    40a4:	df 01       	movw	r26, r30
    40a6:	1d 92       	st	X+, r1
    40a8:	8a 95       	dec	r24
    40aa:	e9 f7       	brne	.-6      	; 0x40a6 <led_perimeter_clockwise+0x2a>
	//scroll right down
	//restore top right row(2)
	//restore (1) to 7,1,Z

	//save top right row (1)
	if(led_frame_bitmap[0] & 1)
    40ac:	80 91 47 02 	lds	r24, 0x0247
    40b0:	80 ff       	sbrs	r24, 0
    40b2:	02 c0       	rjmp	.+4      	; 0x40b8 <led_perimeter_clockwise+0x3c>
		temprow1[0]=1;
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	89 83       	std	Y+1, r24	; 0x01
	if(led_frame_bitmap[1] & 1)
    40b8:	80 91 48 02 	lds	r24, 0x0248
    40bc:	80 ff       	sbrs	r24, 0
    40be:	02 c0       	rjmp	.+4      	; 0x40c4 <led_perimeter_clockwise+0x48>
		temprow1[1]=1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	8a 83       	std	Y+2, r24	; 0x02
	if(led_frame_bitmap[2] & 1)
    40c4:	80 91 49 02 	lds	r24, 0x0249
    40c8:	80 ff       	sbrs	r24, 0
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <led_perimeter_clockwise+0x54>
		temprow1[2]=1;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	8b 83       	std	Y+3, r24	; 0x03
	if(led_frame_bitmap[3] & 1)
    40d0:	80 91 4a 02 	lds	r24, 0x024A
    40d4:	80 ff       	sbrs	r24, 0
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <led_perimeter_clockwise+0x60>
		temprow1[3]=1;
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	8c 83       	std	Y+4, r24	; 0x04
	if(led_frame_bitmap[4] & 1)
    40dc:	80 91 4b 02 	lds	r24, 0x024B
    40e0:	80 ff       	sbrs	r24, 0
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <led_perimeter_clockwise+0x6c>
		temprow1[4]=1;
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	8d 83       	std	Y+5, r24	; 0x05
	if(led_frame_bitmap[5] & 1)
    40e8:	80 91 4c 02 	lds	r24, 0x024C
    40ec:	80 ff       	sbrs	r24, 0
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <led_perimeter_clockwise+0x78>
		temprow1[5]=1;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	8e 83       	std	Y+6, r24	; 0x06
	if(led_frame_bitmap[6] & 1)
    40f4:	80 91 4d 02 	lds	r24, 0x024D
    40f8:	80 ff       	sbrs	r24, 0
    40fa:	02 c0       	rjmp	.+4      	; 0x4100 <led_perimeter_clockwise+0x84>
		temprow1[6]=1;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	8f 83       	std	Y+7, r24	; 0x07
	if(led_frame_bitmap[7] & 1)
    4100:	80 91 4e 02 	lds	r24, 0x024E
    4104:	80 ff       	sbrs	r24, 0
    4106:	02 c0       	rjmp	.+4      	; 0x410c <led_perimeter_clockwise+0x90>
		temprow1[7]=1;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	88 87       	std	Y+8, r24	; 0x08

	//scroll top right
	led_plane_y_right(0);
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <led_plane_y_right>
	//scroll left up
	led_plane_x_up(0);		
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <led_plane_x_up>
	//scroll bottom left
	led_plane_y_left(7);
    4118:	87 e0       	ldi	r24, 0x07	; 7
    411a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <led_plane_y_left>

	//save top right row (2)
	if(led_frame_bitmap[0] & 1)
    411e:	80 91 47 02 	lds	r24, 0x0247
    4122:	80 ff       	sbrs	r24, 0
    4124:	02 c0       	rjmp	.+4      	; 0x412a <led_perimeter_clockwise+0xae>
		temprow2[0]=1;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	89 87       	std	Y+9, r24	; 0x09
	if(led_frame_bitmap[1] & 1)
    412a:	80 91 48 02 	lds	r24, 0x0248
    412e:	80 ff       	sbrs	r24, 0
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <led_perimeter_clockwise+0xba>
		temprow2[1]=1;
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	8a 87       	std	Y+10, r24	; 0x0a
	if(led_frame_bitmap[2] & 1)
    4136:	80 91 49 02 	lds	r24, 0x0249
    413a:	80 ff       	sbrs	r24, 0
    413c:	02 c0       	rjmp	.+4      	; 0x4142 <led_perimeter_clockwise+0xc6>
		temprow2[2]=1;
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	8b 87       	std	Y+11, r24	; 0x0b
	if(led_frame_bitmap[3] & 1)
    4142:	80 91 4a 02 	lds	r24, 0x024A
    4146:	80 ff       	sbrs	r24, 0
    4148:	02 c0       	rjmp	.+4      	; 0x414e <led_perimeter_clockwise+0xd2>
		temprow2[3]=1;
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	8c 87       	std	Y+12, r24	; 0x0c
	if(led_frame_bitmap[4] & 1)
    414e:	80 91 4b 02 	lds	r24, 0x024B
    4152:	80 ff       	sbrs	r24, 0
    4154:	02 c0       	rjmp	.+4      	; 0x415a <led_perimeter_clockwise+0xde>
		temprow2[4]=1;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	8d 87       	std	Y+13, r24	; 0x0d
	if(led_frame_bitmap[5] & 1)
    415a:	80 91 4c 02 	lds	r24, 0x024C
    415e:	80 ff       	sbrs	r24, 0
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <led_perimeter_clockwise+0xea>
		temprow2[5]=1;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	8e 87       	std	Y+14, r24	; 0x0e
	if(led_frame_bitmap[6] & 1)
    4166:	80 91 4d 02 	lds	r24, 0x024D
    416a:	80 ff       	sbrs	r24, 0
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <led_perimeter_clockwise+0xf6>
		temprow2[6]=1;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	8f 87       	std	Y+15, r24	; 0x0f
	if(led_frame_bitmap[7] & 1)
    4172:	80 91 4e 02 	lds	r24, 0x024E
    4176:	80 ff       	sbrs	r24, 0
    4178:	02 c0       	rjmp	.+4      	; 0x417e <led_perimeter_clockwise+0x102>
		temprow2[7]=1;
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	88 8b       	std	Y+16, r24	; 0x10

	//scroll right down
	led_plane_x_down(7);
    417e:	87 e0       	ldi	r24, 0x07	; 7
    4180:	0e 94 30 17 	call	0x2e60	; 0x2e60 <led_plane_x_down>

	//restore correct top right row (2)
	if(temprow2[0])
    4184:	89 85       	ldd	r24, Y+9	; 0x09
    4186:	88 23       	and	r24, r24
    4188:	29 f0       	breq	.+10     	; 0x4194 <led_perimeter_clockwise+0x118>
		led_frame_bitmap[0] |=0x01;
    418a:	80 91 47 02 	lds	r24, 0x0247
    418e:	81 60       	ori	r24, 0x01	; 1
    4190:	80 93 47 02 	sts	0x0247, r24
	if(temprow2[1])
    4194:	8a 85       	ldd	r24, Y+10	; 0x0a
    4196:	88 23       	and	r24, r24
    4198:	29 f0       	breq	.+10     	; 0x41a4 <led_perimeter_clockwise+0x128>
		led_frame_bitmap[1] |=0x01;
    419a:	80 91 48 02 	lds	r24, 0x0248
    419e:	81 60       	ori	r24, 0x01	; 1
    41a0:	80 93 48 02 	sts	0x0248, r24
	if(temprow2[2])
    41a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    41a6:	88 23       	and	r24, r24
    41a8:	29 f0       	breq	.+10     	; 0x41b4 <led_perimeter_clockwise+0x138>
		led_frame_bitmap[2] |=0x01;
    41aa:	80 91 49 02 	lds	r24, 0x0249
    41ae:	81 60       	ori	r24, 0x01	; 1
    41b0:	80 93 49 02 	sts	0x0249, r24
	if(temprow2[3])
    41b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    41b6:	88 23       	and	r24, r24
    41b8:	29 f0       	breq	.+10     	; 0x41c4 <led_perimeter_clockwise+0x148>
		led_frame_bitmap[3] |=0x01;
    41ba:	80 91 4a 02 	lds	r24, 0x024A
    41be:	81 60       	ori	r24, 0x01	; 1
    41c0:	80 93 4a 02 	sts	0x024A, r24
	if(temprow2[4])
    41c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41c6:	88 23       	and	r24, r24
    41c8:	29 f0       	breq	.+10     	; 0x41d4 <led_perimeter_clockwise+0x158>
		led_frame_bitmap[4] |=0x01;
    41ca:	80 91 4b 02 	lds	r24, 0x024B
    41ce:	81 60       	ori	r24, 0x01	; 1
    41d0:	80 93 4b 02 	sts	0x024B, r24
	if(temprow2[5])
    41d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    41d6:	88 23       	and	r24, r24
    41d8:	29 f0       	breq	.+10     	; 0x41e4 <led_perimeter_clockwise+0x168>
		led_frame_bitmap[5] |=0x01;
    41da:	80 91 4c 02 	lds	r24, 0x024C
    41de:	81 60       	ori	r24, 0x01	; 1
    41e0:	80 93 4c 02 	sts	0x024C, r24
	if(temprow2[6])
    41e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41e6:	88 23       	and	r24, r24
    41e8:	29 f0       	breq	.+10     	; 0x41f4 <led_perimeter_clockwise+0x178>
		led_frame_bitmap[6] |=0x01;
    41ea:	80 91 4d 02 	lds	r24, 0x024D
    41ee:	81 60       	ori	r24, 0x01	; 1
    41f0:	80 93 4d 02 	sts	0x024D, r24
	if(temprow2[7])
    41f4:	88 89       	ldd	r24, Y+16	; 0x10
    41f6:	88 23       	and	r24, r24
    41f8:	29 f0       	breq	.+10     	; 0x4204 <led_perimeter_clockwise+0x188>
		led_frame_bitmap[7] |=0x01;
    41fa:	80 91 4e 02 	lds	r24, 0x024E
    41fe:	81 60       	ori	r24, 0x01	; 1
    4200:	80 93 4e 02 	sts	0x024E, r24

	//restore (1) to 7,1,Z
	led_frame_bitmap[8] &=0xFE;
    4204:	90 91 4f 02 	lds	r25, 0x024F
    4208:	9e 7f       	andi	r25, 0xFE	; 254
    420a:	90 93 4f 02 	sts	0x024F, r25
	led_frame_bitmap[9] &=0xFE;
    420e:	80 91 50 02 	lds	r24, 0x0250
    4212:	8e 7f       	andi	r24, 0xFE	; 254
    4214:	80 93 50 02 	sts	0x0250, r24
	led_frame_bitmap[10] &=0xFE;
    4218:	80 91 51 02 	lds	r24, 0x0251
    421c:	8e 7f       	andi	r24, 0xFE	; 254
    421e:	80 93 51 02 	sts	0x0251, r24
	led_frame_bitmap[11] &=0xFE;
    4222:	80 91 52 02 	lds	r24, 0x0252
    4226:	8e 7f       	andi	r24, 0xFE	; 254
    4228:	80 93 52 02 	sts	0x0252, r24
	led_frame_bitmap[12] &=0xFE;
    422c:	80 91 53 02 	lds	r24, 0x0253
    4230:	8e 7f       	andi	r24, 0xFE	; 254
    4232:	80 93 53 02 	sts	0x0253, r24
	led_frame_bitmap[13] &=0xFE;
    4236:	80 91 54 02 	lds	r24, 0x0254
    423a:	8e 7f       	andi	r24, 0xFE	; 254
    423c:	80 93 54 02 	sts	0x0254, r24
	led_frame_bitmap[14] &=0xFE;
    4240:	80 91 55 02 	lds	r24, 0x0255
    4244:	8e 7f       	andi	r24, 0xFE	; 254
    4246:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[15] &=0xFE;
    424a:	80 91 56 02 	lds	r24, 0x0256
    424e:	8e 7f       	andi	r24, 0xFE	; 254
    4250:	80 93 56 02 	sts	0x0256, r24
	if(temprow1[0])
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	88 23       	and	r24, r24
    4258:	19 f0       	breq	.+6      	; 0x4260 <led_perimeter_clockwise+0x1e4>
		led_frame_bitmap[8] |=0x01;
    425a:	91 60       	ori	r25, 0x01	; 1
    425c:	90 93 4f 02 	sts	0x024F, r25
	if(temprow1[1])
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	88 23       	and	r24, r24
    4264:	29 f0       	breq	.+10     	; 0x4270 <led_perimeter_clockwise+0x1f4>
		led_frame_bitmap[9] |=0x01;
    4266:	80 91 50 02 	lds	r24, 0x0250
    426a:	81 60       	ori	r24, 0x01	; 1
    426c:	80 93 50 02 	sts	0x0250, r24
	if(temprow1[2])
    4270:	8b 81       	ldd	r24, Y+3	; 0x03
    4272:	88 23       	and	r24, r24
    4274:	29 f0       	breq	.+10     	; 0x4280 <led_perimeter_clockwise+0x204>
		led_frame_bitmap[10] |=0x01;
    4276:	80 91 51 02 	lds	r24, 0x0251
    427a:	81 60       	ori	r24, 0x01	; 1
    427c:	80 93 51 02 	sts	0x0251, r24
	if(temprow1[3])
    4280:	8c 81       	ldd	r24, Y+4	; 0x04
    4282:	88 23       	and	r24, r24
    4284:	29 f0       	breq	.+10     	; 0x4290 <led_perimeter_clockwise+0x214>
		led_frame_bitmap[11] |=0x01;
    4286:	80 91 52 02 	lds	r24, 0x0252
    428a:	81 60       	ori	r24, 0x01	; 1
    428c:	80 93 52 02 	sts	0x0252, r24
	if(temprow1[4])
    4290:	8d 81       	ldd	r24, Y+5	; 0x05
    4292:	88 23       	and	r24, r24
    4294:	29 f0       	breq	.+10     	; 0x42a0 <led_perimeter_clockwise+0x224>
		led_frame_bitmap[12] |=0x01;
    4296:	80 91 53 02 	lds	r24, 0x0253
    429a:	81 60       	ori	r24, 0x01	; 1
    429c:	80 93 53 02 	sts	0x0253, r24
	if(temprow1[5])
    42a0:	8e 81       	ldd	r24, Y+6	; 0x06
    42a2:	88 23       	and	r24, r24
    42a4:	29 f0       	breq	.+10     	; 0x42b0 <led_perimeter_clockwise+0x234>
		led_frame_bitmap[13] |=0x01;
    42a6:	80 91 54 02 	lds	r24, 0x0254
    42aa:	81 60       	ori	r24, 0x01	; 1
    42ac:	80 93 54 02 	sts	0x0254, r24
	if(temprow1[6])
    42b0:	8f 81       	ldd	r24, Y+7	; 0x07
    42b2:	88 23       	and	r24, r24
    42b4:	29 f0       	breq	.+10     	; 0x42c0 <led_perimeter_clockwise+0x244>
		led_frame_bitmap[14] |=0x01;
    42b6:	80 91 55 02 	lds	r24, 0x0255
    42ba:	81 60       	ori	r24, 0x01	; 1
    42bc:	80 93 55 02 	sts	0x0255, r24
	if(temprow1[7])
    42c0:	88 85       	ldd	r24, Y+8	; 0x08
    42c2:	88 23       	and	r24, r24
    42c4:	29 f0       	breq	.+10     	; 0x42d0 <led_perimeter_clockwise+0x254>
		led_frame_bitmap[15] |=0x01;
    42c6:	80 91 56 02 	lds	r24, 0x0256
    42ca:	81 60       	ori	r24, 0x01	; 1
    42cc:	80 93 56 02 	sts	0x0256, r24

}
    42d0:	60 96       	adiw	r28, 0x10	; 16
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <led_perimeter_right>:
		led_frame_bitmap[62] |=0x01;

}

void led_perimeter_right(void)
{
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    42ea:	60 97       	sbiw	r28, 0x10	; 16
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	f8 94       	cli
    42f0:	de bf       	out	0x3e, r29	; 62
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	cd bf       	out	0x3d, r28	; 61
	unsigned char tempcol1[8];
	unsigned char tempcol2[8];

	memset(tempcol1, 0, 8);
    42f6:	88 e0       	ldi	r24, 0x08	; 8
    42f8:	fe 01       	movw	r30, r28
    42fa:	31 96       	adiw	r30, 0x01	; 1
    42fc:	df 01       	movw	r26, r30
    42fe:	98 2f       	mov	r25, r24
    4300:	1d 92       	st	X+, r1
    4302:	9a 95       	dec	r25
    4304:	e9 f7       	brne	.-6      	; 0x4300 <led_perimeter_right+0x1e>
	memset(tempcol2, 0, 8);
    4306:	fe 01       	movw	r30, r28
    4308:	39 96       	adiw	r30, 0x09	; 9
    430a:	df 01       	movw	r26, r30
    430c:	1d 92       	st	X+, r1
    430e:	8a 95       	dec	r24
    4310:	e9 f7       	brne	.-6      	; 0x430c <led_perimeter_right+0x2a>

	//save back left columb before rotate (this will be restored to 0,Y,6)
	if(led_frame_bitmap[7] & 0x80)
    4312:	80 91 4e 02 	lds	r24, 0x024E
    4316:	87 ff       	sbrs	r24, 7
    4318:	02 c0       	rjmp	.+4      	; 0x431e <led_perimeter_right+0x3c>
		tempcol1[0]=1;
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	89 83       	std	Y+1, r24	; 0x01
	if(led_frame_bitmap[15] & 0x80)
    431e:	80 91 56 02 	lds	r24, 0x0256
    4322:	87 ff       	sbrs	r24, 7
    4324:	02 c0       	rjmp	.+4      	; 0x432a <led_perimeter_right+0x48>
		tempcol1[1]=1;
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	8a 83       	std	Y+2, r24	; 0x02
	if(led_frame_bitmap[23] & 0x80)
    432a:	80 91 5e 02 	lds	r24, 0x025E
    432e:	87 ff       	sbrs	r24, 7
    4330:	02 c0       	rjmp	.+4      	; 0x4336 <led_perimeter_right+0x54>
		tempcol1[2]=1;
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	8b 83       	std	Y+3, r24	; 0x03
	if(led_frame_bitmap[31] & 0x80)
    4336:	80 91 66 02 	lds	r24, 0x0266
    433a:	87 ff       	sbrs	r24, 7
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <led_perimeter_right+0x60>
		tempcol1[3]=1;
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	8c 83       	std	Y+4, r24	; 0x04
	if(led_frame_bitmap[39] & 0x80)
    4342:	80 91 6e 02 	lds	r24, 0x026E
    4346:	87 ff       	sbrs	r24, 7
    4348:	02 c0       	rjmp	.+4      	; 0x434e <led_perimeter_right+0x6c>
		tempcol1[4]=1;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	8d 83       	std	Y+5, r24	; 0x05
	if(led_frame_bitmap[47] & 0x80)
    434e:	80 91 76 02 	lds	r24, 0x0276
    4352:	87 ff       	sbrs	r24, 7
    4354:	02 c0       	rjmp	.+4      	; 0x435a <led_perimeter_right+0x78>
		tempcol1[5]=1;
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	8e 83       	std	Y+6, r24	; 0x06
	if(led_frame_bitmap[55] & 0x80)
    435a:	80 91 7e 02 	lds	r24, 0x027E
    435e:	87 ff       	sbrs	r24, 7
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <led_perimeter_right+0x84>
		tempcol1[6]=1;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	8f 83       	std	Y+7, r24	; 0x07
	if(led_frame_bitmap[63] & 0x80)
    4366:	80 91 86 02 	lds	r24, 0x0286
    436a:	87 ff       	sbrs	r24, 7
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <led_perimeter_right+0x90>
		tempcol1[7]=1;
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	88 87       	std	Y+8, r24	; 0x08

	led_plane_z_left(7);		// back face left (destroys data in back left columb)
    4372:	87 e0       	ldi	r24, 0x07	; 7
    4374:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>
	led_plane_x_back(7);		// right face back
    4378:	87 e0       	ldi	r24, 0x07	; 7
    437a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_z_right(0);	// front face right
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>

	//save back left columb again, as left face forward will erase it
	if(led_frame_bitmap[7] & 0x80)
    4384:	80 91 4e 02 	lds	r24, 0x024E
    4388:	87 ff       	sbrs	r24, 7
    438a:	02 c0       	rjmp	.+4      	; 0x4390 <led_perimeter_right+0xae>
		tempcol2[0]=1;
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	89 87       	std	Y+9, r24	; 0x09
	if(led_frame_bitmap[15] & 0x80)
    4390:	80 91 56 02 	lds	r24, 0x0256
    4394:	87 ff       	sbrs	r24, 7
    4396:	02 c0       	rjmp	.+4      	; 0x439c <led_perimeter_right+0xba>
		tempcol2[1]=1;
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	8a 87       	std	Y+10, r24	; 0x0a
	if(led_frame_bitmap[23] & 0x80)
    439c:	80 91 5e 02 	lds	r24, 0x025E
    43a0:	87 ff       	sbrs	r24, 7
    43a2:	02 c0       	rjmp	.+4      	; 0x43a8 <led_perimeter_right+0xc6>
		tempcol2[2]=1;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	8b 87       	std	Y+11, r24	; 0x0b
	if(led_frame_bitmap[31] & 0x80)
    43a8:	80 91 66 02 	lds	r24, 0x0266
    43ac:	87 ff       	sbrs	r24, 7
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <led_perimeter_right+0xd2>
		tempcol2[3]=1;
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	8c 87       	std	Y+12, r24	; 0x0c
	if(led_frame_bitmap[39] & 0x80)
    43b4:	80 91 6e 02 	lds	r24, 0x026E
    43b8:	87 ff       	sbrs	r24, 7
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <led_perimeter_right+0xde>
		tempcol2[4]=1;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	8d 87       	std	Y+13, r24	; 0x0d
	if(led_frame_bitmap[47] & 0x80)
    43c0:	80 91 76 02 	lds	r24, 0x0276
    43c4:	87 ff       	sbrs	r24, 7
    43c6:	02 c0       	rjmp	.+4      	; 0x43cc <led_perimeter_right+0xea>
		tempcol2[5]=1;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	8e 87       	std	Y+14, r24	; 0x0e
	if(led_frame_bitmap[55] & 0x80)
    43cc:	80 91 7e 02 	lds	r24, 0x027E
    43d0:	87 ff       	sbrs	r24, 7
    43d2:	02 c0       	rjmp	.+4      	; 0x43d8 <led_perimeter_right+0xf6>
		tempcol2[6]=1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	8f 87       	std	Y+15, r24	; 0x0f
	if(led_frame_bitmap[63] & 0x80)
    43d8:	80 91 86 02 	lds	r24, 0x0286
    43dc:	87 ff       	sbrs	r24, 7
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <led_perimeter_right+0x102>
		tempcol2[7]=1;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	88 8b       	std	Y+16, r24	; 0x10

	led_plane_x_forward(0);	// left face forward
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>

	//restore correct back left columb 
	if(tempcol2[0])
    43ea:	89 85       	ldd	r24, Y+9	; 0x09
    43ec:	88 23       	and	r24, r24
    43ee:	29 f0       	breq	.+10     	; 0x43fa <led_perimeter_right+0x118>
		led_frame_bitmap[7] |=0x80;
    43f0:	80 91 4e 02 	lds	r24, 0x024E
    43f4:	80 68       	ori	r24, 0x80	; 128
    43f6:	80 93 4e 02 	sts	0x024E, r24
	if(tempcol2[1])
    43fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    43fc:	88 23       	and	r24, r24
    43fe:	29 f0       	breq	.+10     	; 0x440a <led_perimeter_right+0x128>
		led_frame_bitmap[15] |=0x80;
    4400:	80 91 56 02 	lds	r24, 0x0256
    4404:	80 68       	ori	r24, 0x80	; 128
    4406:	80 93 56 02 	sts	0x0256, r24
	if(tempcol2[2])
    440a:	8b 85       	ldd	r24, Y+11	; 0x0b
    440c:	88 23       	and	r24, r24
    440e:	29 f0       	breq	.+10     	; 0x441a <led_perimeter_right+0x138>
		led_frame_bitmap[23] |=0x80;
    4410:	80 91 5e 02 	lds	r24, 0x025E
    4414:	80 68       	ori	r24, 0x80	; 128
    4416:	80 93 5e 02 	sts	0x025E, r24
	if(tempcol2[3])
    441a:	8c 85       	ldd	r24, Y+12	; 0x0c
    441c:	88 23       	and	r24, r24
    441e:	29 f0       	breq	.+10     	; 0x442a <led_perimeter_right+0x148>
		led_frame_bitmap[31] |=0x80;
    4420:	80 91 66 02 	lds	r24, 0x0266
    4424:	80 68       	ori	r24, 0x80	; 128
    4426:	80 93 66 02 	sts	0x0266, r24
	if(tempcol2[4])
    442a:	8d 85       	ldd	r24, Y+13	; 0x0d
    442c:	88 23       	and	r24, r24
    442e:	29 f0       	breq	.+10     	; 0x443a <led_perimeter_right+0x158>
		led_frame_bitmap[39] |=0x80;
    4430:	80 91 6e 02 	lds	r24, 0x026E
    4434:	80 68       	ori	r24, 0x80	; 128
    4436:	80 93 6e 02 	sts	0x026E, r24
	if(tempcol2[5])
    443a:	8e 85       	ldd	r24, Y+14	; 0x0e
    443c:	88 23       	and	r24, r24
    443e:	29 f0       	breq	.+10     	; 0x444a <led_perimeter_right+0x168>
		led_frame_bitmap[47] |=0x80;
    4440:	80 91 76 02 	lds	r24, 0x0276
    4444:	80 68       	ori	r24, 0x80	; 128
    4446:	80 93 76 02 	sts	0x0276, r24
	if(tempcol2[6])
    444a:	8f 85       	ldd	r24, Y+15	; 0x0f
    444c:	88 23       	and	r24, r24
    444e:	29 f0       	breq	.+10     	; 0x445a <led_perimeter_right+0x178>
		led_frame_bitmap[55] |=0x80;
    4450:	80 91 7e 02 	lds	r24, 0x027E
    4454:	80 68       	ori	r24, 0x80	; 128
    4456:	80 93 7e 02 	sts	0x027E, r24
	if(tempcol2[7])
    445a:	88 89       	ldd	r24, Y+16	; 0x10
    445c:	88 23       	and	r24, r24
    445e:	29 f0       	breq	.+10     	; 0x446a <led_perimeter_right+0x188>
		led_frame_bitmap[63] |=0x80;
    4460:	80 91 86 02 	lds	r24, 0x0286
    4464:	80 68       	ori	r24, 0x80	; 128
    4466:	80 93 86 02 	sts	0x0286, r24

	//erase 0,Y,6
	led_frame_bitmap[6] &=0x7F;
    446a:	90 91 4d 02 	lds	r25, 0x024D
    446e:	9f 77       	andi	r25, 0x7F	; 127
    4470:	90 93 4d 02 	sts	0x024D, r25
	led_frame_bitmap[14] &=0x7F;
    4474:	80 91 55 02 	lds	r24, 0x0255
    4478:	8f 77       	andi	r24, 0x7F	; 127
    447a:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[22] &=0x7F;
    447e:	80 91 5d 02 	lds	r24, 0x025D
    4482:	8f 77       	andi	r24, 0x7F	; 127
    4484:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[30] &=0x7F;
    4488:	80 91 65 02 	lds	r24, 0x0265
    448c:	8f 77       	andi	r24, 0x7F	; 127
    448e:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[38] &=0x7F;
    4492:	80 91 6d 02 	lds	r24, 0x026D
    4496:	8f 77       	andi	r24, 0x7F	; 127
    4498:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[46] &=0x7F;
    449c:	80 91 75 02 	lds	r24, 0x0275
    44a0:	8f 77       	andi	r24, 0x7F	; 127
    44a2:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[54] &=0x7F;
    44a6:	80 91 7d 02 	lds	r24, 0x027D
    44aa:	8f 77       	andi	r24, 0x7F	; 127
    44ac:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[62] &=0x7F;
    44b0:	80 91 85 02 	lds	r24, 0x0285
    44b4:	8f 77       	andi	r24, 0x7F	; 127
    44b6:	80 93 85 02 	sts	0x0285, r24

	//restore pre-rotated back right columb to 0,Y,6
	if(tempcol1[0])
    44ba:	89 81       	ldd	r24, Y+1	; 0x01
    44bc:	88 23       	and	r24, r24
    44be:	19 f0       	breq	.+6      	; 0x44c6 <led_perimeter_right+0x1e4>
		led_frame_bitmap[6] |=0x80;
    44c0:	90 68       	ori	r25, 0x80	; 128
    44c2:	90 93 4d 02 	sts	0x024D, r25
	if(tempcol1[1])
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	88 23       	and	r24, r24
    44ca:	29 f0       	breq	.+10     	; 0x44d6 <led_perimeter_right+0x1f4>
		led_frame_bitmap[14] |=0x80;
    44cc:	80 91 55 02 	lds	r24, 0x0255
    44d0:	80 68       	ori	r24, 0x80	; 128
    44d2:	80 93 55 02 	sts	0x0255, r24
	if(tempcol1[2])
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	88 23       	and	r24, r24
    44da:	29 f0       	breq	.+10     	; 0x44e6 <led_perimeter_right+0x204>
		led_frame_bitmap[22] |=0x80;
    44dc:	80 91 5d 02 	lds	r24, 0x025D
    44e0:	80 68       	ori	r24, 0x80	; 128
    44e2:	80 93 5d 02 	sts	0x025D, r24
	if(tempcol1[3])
    44e6:	8c 81       	ldd	r24, Y+4	; 0x04
    44e8:	88 23       	and	r24, r24
    44ea:	29 f0       	breq	.+10     	; 0x44f6 <led_perimeter_right+0x214>
		led_frame_bitmap[30] |=0x80;
    44ec:	80 91 65 02 	lds	r24, 0x0265
    44f0:	80 68       	ori	r24, 0x80	; 128
    44f2:	80 93 65 02 	sts	0x0265, r24
	if(tempcol1[4])
    44f6:	8d 81       	ldd	r24, Y+5	; 0x05
    44f8:	88 23       	and	r24, r24
    44fa:	29 f0       	breq	.+10     	; 0x4506 <led_perimeter_right+0x224>
		led_frame_bitmap[38] |=0x80;
    44fc:	80 91 6d 02 	lds	r24, 0x026D
    4500:	80 68       	ori	r24, 0x80	; 128
    4502:	80 93 6d 02 	sts	0x026D, r24
	if(tempcol1[5])
    4506:	8e 81       	ldd	r24, Y+6	; 0x06
    4508:	88 23       	and	r24, r24
    450a:	29 f0       	breq	.+10     	; 0x4516 <led_perimeter_right+0x234>
		led_frame_bitmap[46] |=0x80;
    450c:	80 91 75 02 	lds	r24, 0x0275
    4510:	80 68       	ori	r24, 0x80	; 128
    4512:	80 93 75 02 	sts	0x0275, r24
	if(tempcol1[6])
    4516:	8f 81       	ldd	r24, Y+7	; 0x07
    4518:	88 23       	and	r24, r24
    451a:	29 f0       	breq	.+10     	; 0x4526 <led_perimeter_right+0x244>
		led_frame_bitmap[54] |=0x80;
    451c:	80 91 7d 02 	lds	r24, 0x027D
    4520:	80 68       	ori	r24, 0x80	; 128
    4522:	80 93 7d 02 	sts	0x027D, r24
	if(tempcol1[7])
    4526:	88 85       	ldd	r24, Y+8	; 0x08
    4528:	88 23       	and	r24, r24
    452a:	29 f0       	breq	.+10     	; 0x4536 <led_perimeter_right+0x254>
		led_frame_bitmap[62] |=0x80;
    452c:	80 91 85 02 	lds	r24, 0x0285
    4530:	80 68       	ori	r24, 0x80	; 128
    4532:	80 93 85 02 	sts	0x0285, r24

}
    4536:	60 96       	adiw	r28, 0x10	; 16
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	f8 94       	cli
    453c:	de bf       	out	0x3e, r29	; 62
    453e:	0f be       	out	0x3f, r0	; 63
    4540:	cd bf       	out	0x3d, r28	; 61
    4542:	cf 91       	pop	r28
    4544:	df 91       	pop	r29
    4546:	08 95       	ret

00004548 <led_perimeter_left>:
	plane+=8;
	led_frame_bitmap[plane]>>=1;
}

void led_perimeter_left(void)
{
    4548:	df 93       	push	r29
    454a:	cf 93       	push	r28
    454c:	cd b7       	in	r28, 0x3d	; 61
    454e:	de b7       	in	r29, 0x3e	; 62
    4550:	60 97       	sbiw	r28, 0x10	; 16
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	de bf       	out	0x3e, r29	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	cd bf       	out	0x3d, r28	; 61
	unsigned char tempcol1[8];
	unsigned char tempcol2[8];

	memset(tempcol1, 0, 8);
    455c:	88 e0       	ldi	r24, 0x08	; 8
    455e:	fe 01       	movw	r30, r28
    4560:	31 96       	adiw	r30, 0x01	; 1
    4562:	df 01       	movw	r26, r30
    4564:	98 2f       	mov	r25, r24
    4566:	1d 92       	st	X+, r1
    4568:	9a 95       	dec	r25
    456a:	e9 f7       	brne	.-6      	; 0x4566 <led_perimeter_left+0x1e>
	memset(tempcol2, 0, 8);
    456c:	fe 01       	movw	r30, r28
    456e:	39 96       	adiw	r30, 0x09	; 9
    4570:	df 01       	movw	r26, r30
    4572:	1d 92       	st	X+, r1
    4574:	8a 95       	dec	r24
    4576:	e9 f7       	brne	.-6      	; 0x4572 <led_perimeter_left+0x2a>

	//save back right columb before rotate (this will be restored to 7,Y,6)
	if(led_frame_bitmap[7] & 1)
    4578:	80 91 4e 02 	lds	r24, 0x024E
    457c:	80 ff       	sbrs	r24, 0
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <led_perimeter_left+0x3c>
		tempcol1[0]=1;
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	89 83       	std	Y+1, r24	; 0x01
	if(led_frame_bitmap[15] & 1)
    4584:	80 91 56 02 	lds	r24, 0x0256
    4588:	80 ff       	sbrs	r24, 0
    458a:	02 c0       	rjmp	.+4      	; 0x4590 <led_perimeter_left+0x48>
		tempcol1[1]=1;
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	8a 83       	std	Y+2, r24	; 0x02
	if(led_frame_bitmap[23] & 1)
    4590:	80 91 5e 02 	lds	r24, 0x025E
    4594:	80 ff       	sbrs	r24, 0
    4596:	02 c0       	rjmp	.+4      	; 0x459c <led_perimeter_left+0x54>
		tempcol1[2]=1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	8b 83       	std	Y+3, r24	; 0x03
	if(led_frame_bitmap[31] & 1)
    459c:	80 91 66 02 	lds	r24, 0x0266
    45a0:	80 ff       	sbrs	r24, 0
    45a2:	02 c0       	rjmp	.+4      	; 0x45a8 <led_perimeter_left+0x60>
		tempcol1[3]=1;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	8c 83       	std	Y+4, r24	; 0x04
	if(led_frame_bitmap[39] & 1)
    45a8:	80 91 6e 02 	lds	r24, 0x026E
    45ac:	80 ff       	sbrs	r24, 0
    45ae:	02 c0       	rjmp	.+4      	; 0x45b4 <led_perimeter_left+0x6c>
		tempcol1[4]=1;
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	8d 83       	std	Y+5, r24	; 0x05
	if(led_frame_bitmap[47] & 1)
    45b4:	80 91 76 02 	lds	r24, 0x0276
    45b8:	80 ff       	sbrs	r24, 0
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <led_perimeter_left+0x78>
		tempcol1[5]=1;
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	8e 83       	std	Y+6, r24	; 0x06
	if(led_frame_bitmap[55] & 1)
    45c0:	80 91 7e 02 	lds	r24, 0x027E
    45c4:	80 ff       	sbrs	r24, 0
    45c6:	02 c0       	rjmp	.+4      	; 0x45cc <led_perimeter_left+0x84>
		tempcol1[6]=1;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	8f 83       	std	Y+7, r24	; 0x07
	if(led_frame_bitmap[63] & 1)
    45cc:	80 91 86 02 	lds	r24, 0x0286
    45d0:	80 ff       	sbrs	r24, 0
    45d2:	02 c0       	rjmp	.+4      	; 0x45d8 <led_perimeter_left+0x90>
		tempcol1[7]=1;
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	88 87       	std	Y+8, r24	; 0x08

	led_plane_z_right(7);	// back face right (destroys data in back right columb)
    45d8:	87 e0       	ldi	r24, 0x07	; 7
    45da:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_x_back(0);		// left face back
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_z_left(0);		// front face left		
    45e4:	80 e0       	ldi	r24, 0x00	; 0
    45e6:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>

	//save back right columb again, as right face forward will erase it
	if(led_frame_bitmap[7] & 1)
    45ea:	80 91 4e 02 	lds	r24, 0x024E
    45ee:	80 ff       	sbrs	r24, 0
    45f0:	02 c0       	rjmp	.+4      	; 0x45f6 <led_perimeter_left+0xae>
		tempcol2[0]=1;
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	89 87       	std	Y+9, r24	; 0x09
	if(led_frame_bitmap[15] & 1)
    45f6:	80 91 56 02 	lds	r24, 0x0256
    45fa:	80 ff       	sbrs	r24, 0
    45fc:	02 c0       	rjmp	.+4      	; 0x4602 <led_perimeter_left+0xba>
		tempcol2[1]=1;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	8a 87       	std	Y+10, r24	; 0x0a
	if(led_frame_bitmap[23] & 1)
    4602:	80 91 5e 02 	lds	r24, 0x025E
    4606:	80 ff       	sbrs	r24, 0
    4608:	02 c0       	rjmp	.+4      	; 0x460e <led_perimeter_left+0xc6>
		tempcol2[2]=1;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	8b 87       	std	Y+11, r24	; 0x0b
	if(led_frame_bitmap[31] & 1)
    460e:	80 91 66 02 	lds	r24, 0x0266
    4612:	80 ff       	sbrs	r24, 0
    4614:	02 c0       	rjmp	.+4      	; 0x461a <led_perimeter_left+0xd2>
		tempcol2[3]=1;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	8c 87       	std	Y+12, r24	; 0x0c
	if(led_frame_bitmap[39] & 1)
    461a:	80 91 6e 02 	lds	r24, 0x026E
    461e:	80 ff       	sbrs	r24, 0
    4620:	02 c0       	rjmp	.+4      	; 0x4626 <led_perimeter_left+0xde>
		tempcol2[4]=1;
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	8d 87       	std	Y+13, r24	; 0x0d
	if(led_frame_bitmap[47] & 1)
    4626:	80 91 76 02 	lds	r24, 0x0276
    462a:	80 ff       	sbrs	r24, 0
    462c:	02 c0       	rjmp	.+4      	; 0x4632 <led_perimeter_left+0xea>
		tempcol2[5]=1;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	8e 87       	std	Y+14, r24	; 0x0e
	if(led_frame_bitmap[55] & 1)
    4632:	80 91 7e 02 	lds	r24, 0x027E
    4636:	80 ff       	sbrs	r24, 0
    4638:	02 c0       	rjmp	.+4      	; 0x463e <led_perimeter_left+0xf6>
		tempcol2[6]=1;
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	8f 87       	std	Y+15, r24	; 0x0f
	if(led_frame_bitmap[63] & 1)
    463e:	80 91 86 02 	lds	r24, 0x0286
    4642:	80 ff       	sbrs	r24, 0
    4644:	02 c0       	rjmp	.+4      	; 0x464a <led_perimeter_left+0x102>
		tempcol2[7]=1;
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	88 8b       	std	Y+16, r24	; 0x10

	led_plane_x_forward(7);	// right face forward
    464a:	87 e0       	ldi	r24, 0x07	; 7
    464c:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>

	//restore correct back right columb 
	if(tempcol2[0])
    4650:	89 85       	ldd	r24, Y+9	; 0x09
    4652:	88 23       	and	r24, r24
    4654:	29 f0       	breq	.+10     	; 0x4660 <led_perimeter_left+0x118>
		led_frame_bitmap[7] |=0x01;
    4656:	80 91 4e 02 	lds	r24, 0x024E
    465a:	81 60       	ori	r24, 0x01	; 1
    465c:	80 93 4e 02 	sts	0x024E, r24
	if(tempcol2[1])
    4660:	8a 85       	ldd	r24, Y+10	; 0x0a
    4662:	88 23       	and	r24, r24
    4664:	29 f0       	breq	.+10     	; 0x4670 <led_perimeter_left+0x128>
		led_frame_bitmap[15] |=0x01;
    4666:	80 91 56 02 	lds	r24, 0x0256
    466a:	81 60       	ori	r24, 0x01	; 1
    466c:	80 93 56 02 	sts	0x0256, r24
	if(tempcol2[2])
    4670:	8b 85       	ldd	r24, Y+11	; 0x0b
    4672:	88 23       	and	r24, r24
    4674:	29 f0       	breq	.+10     	; 0x4680 <led_perimeter_left+0x138>
		led_frame_bitmap[23] |=0x01;
    4676:	80 91 5e 02 	lds	r24, 0x025E
    467a:	81 60       	ori	r24, 0x01	; 1
    467c:	80 93 5e 02 	sts	0x025E, r24
	if(tempcol2[3])
    4680:	8c 85       	ldd	r24, Y+12	; 0x0c
    4682:	88 23       	and	r24, r24
    4684:	29 f0       	breq	.+10     	; 0x4690 <led_perimeter_left+0x148>
		led_frame_bitmap[31] |=0x01;
    4686:	80 91 66 02 	lds	r24, 0x0266
    468a:	81 60       	ori	r24, 0x01	; 1
    468c:	80 93 66 02 	sts	0x0266, r24
	if(tempcol2[4])
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	88 23       	and	r24, r24
    4694:	29 f0       	breq	.+10     	; 0x46a0 <led_perimeter_left+0x158>
		led_frame_bitmap[39] |=0x01;
    4696:	80 91 6e 02 	lds	r24, 0x026E
    469a:	81 60       	ori	r24, 0x01	; 1
    469c:	80 93 6e 02 	sts	0x026E, r24
	if(tempcol2[5])
    46a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    46a2:	88 23       	and	r24, r24
    46a4:	29 f0       	breq	.+10     	; 0x46b0 <led_perimeter_left+0x168>
		led_frame_bitmap[47] |=0x01;
    46a6:	80 91 76 02 	lds	r24, 0x0276
    46aa:	81 60       	ori	r24, 0x01	; 1
    46ac:	80 93 76 02 	sts	0x0276, r24
	if(tempcol2[6])
    46b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    46b2:	88 23       	and	r24, r24
    46b4:	29 f0       	breq	.+10     	; 0x46c0 <led_perimeter_left+0x178>
		led_frame_bitmap[55] |=0x01;
    46b6:	80 91 7e 02 	lds	r24, 0x027E
    46ba:	81 60       	ori	r24, 0x01	; 1
    46bc:	80 93 7e 02 	sts	0x027E, r24
	if(tempcol2[7])
    46c0:	88 89       	ldd	r24, Y+16	; 0x10
    46c2:	88 23       	and	r24, r24
    46c4:	29 f0       	breq	.+10     	; 0x46d0 <led_perimeter_left+0x188>
		led_frame_bitmap[63] |=0x01;
    46c6:	80 91 86 02 	lds	r24, 0x0286
    46ca:	81 60       	ori	r24, 0x01	; 1
    46cc:	80 93 86 02 	sts	0x0286, r24

	//erase 7,Y,6
	led_frame_bitmap[6] &=0xFE;
    46d0:	90 91 4d 02 	lds	r25, 0x024D
    46d4:	9e 7f       	andi	r25, 0xFE	; 254
    46d6:	90 93 4d 02 	sts	0x024D, r25
	led_frame_bitmap[14] &=0xFE;
    46da:	80 91 55 02 	lds	r24, 0x0255
    46de:	8e 7f       	andi	r24, 0xFE	; 254
    46e0:	80 93 55 02 	sts	0x0255, r24
	led_frame_bitmap[22] &=0xFE;
    46e4:	80 91 5d 02 	lds	r24, 0x025D
    46e8:	8e 7f       	andi	r24, 0xFE	; 254
    46ea:	80 93 5d 02 	sts	0x025D, r24
	led_frame_bitmap[30] &=0xFE;
    46ee:	80 91 65 02 	lds	r24, 0x0265
    46f2:	8e 7f       	andi	r24, 0xFE	; 254
    46f4:	80 93 65 02 	sts	0x0265, r24
	led_frame_bitmap[38] &=0xFE;
    46f8:	80 91 6d 02 	lds	r24, 0x026D
    46fc:	8e 7f       	andi	r24, 0xFE	; 254
    46fe:	80 93 6d 02 	sts	0x026D, r24
	led_frame_bitmap[46] &=0xFE;
    4702:	80 91 75 02 	lds	r24, 0x0275
    4706:	8e 7f       	andi	r24, 0xFE	; 254
    4708:	80 93 75 02 	sts	0x0275, r24
	led_frame_bitmap[54] &=0xFE;
    470c:	80 91 7d 02 	lds	r24, 0x027D
    4710:	8e 7f       	andi	r24, 0xFE	; 254
    4712:	80 93 7d 02 	sts	0x027D, r24
	led_frame_bitmap[62] &=0xFE;
    4716:	80 91 85 02 	lds	r24, 0x0285
    471a:	8e 7f       	andi	r24, 0xFE	; 254
    471c:	80 93 85 02 	sts	0x0285, r24

	//restore pre-rotated back right columb to 7,Y,6
	if(tempcol1[0])
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	88 23       	and	r24, r24
    4724:	19 f0       	breq	.+6      	; 0x472c <led_perimeter_left+0x1e4>
		led_frame_bitmap[6] |=0x01;
    4726:	91 60       	ori	r25, 0x01	; 1
    4728:	90 93 4d 02 	sts	0x024D, r25
	if(tempcol1[1])
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	88 23       	and	r24, r24
    4730:	29 f0       	breq	.+10     	; 0x473c <led_perimeter_left+0x1f4>
		led_frame_bitmap[14] |=0x01;
    4732:	80 91 55 02 	lds	r24, 0x0255
    4736:	81 60       	ori	r24, 0x01	; 1
    4738:	80 93 55 02 	sts	0x0255, r24
	if(tempcol1[2])
    473c:	8b 81       	ldd	r24, Y+3	; 0x03
    473e:	88 23       	and	r24, r24
    4740:	29 f0       	breq	.+10     	; 0x474c <led_perimeter_left+0x204>
		led_frame_bitmap[22] |=0x01;
    4742:	80 91 5d 02 	lds	r24, 0x025D
    4746:	81 60       	ori	r24, 0x01	; 1
    4748:	80 93 5d 02 	sts	0x025D, r24
	if(tempcol1[3])
    474c:	8c 81       	ldd	r24, Y+4	; 0x04
    474e:	88 23       	and	r24, r24
    4750:	29 f0       	breq	.+10     	; 0x475c <led_perimeter_left+0x214>
		led_frame_bitmap[30] |=0x01;
    4752:	80 91 65 02 	lds	r24, 0x0265
    4756:	81 60       	ori	r24, 0x01	; 1
    4758:	80 93 65 02 	sts	0x0265, r24
	if(tempcol1[4])
    475c:	8d 81       	ldd	r24, Y+5	; 0x05
    475e:	88 23       	and	r24, r24
    4760:	29 f0       	breq	.+10     	; 0x476c <led_perimeter_left+0x224>
		led_frame_bitmap[38] |=0x01;
    4762:	80 91 6d 02 	lds	r24, 0x026D
    4766:	81 60       	ori	r24, 0x01	; 1
    4768:	80 93 6d 02 	sts	0x026D, r24
	if(tempcol1[5])
    476c:	8e 81       	ldd	r24, Y+6	; 0x06
    476e:	88 23       	and	r24, r24
    4770:	29 f0       	breq	.+10     	; 0x477c <led_perimeter_left+0x234>
		led_frame_bitmap[46] |=0x01;
    4772:	80 91 75 02 	lds	r24, 0x0275
    4776:	81 60       	ori	r24, 0x01	; 1
    4778:	80 93 75 02 	sts	0x0275, r24
	if(tempcol1[6])
    477c:	8f 81       	ldd	r24, Y+7	; 0x07
    477e:	88 23       	and	r24, r24
    4780:	29 f0       	breq	.+10     	; 0x478c <led_perimeter_left+0x244>
		led_frame_bitmap[54] |=0x01;
    4782:	80 91 7d 02 	lds	r24, 0x027D
    4786:	81 60       	ori	r24, 0x01	; 1
    4788:	80 93 7d 02 	sts	0x027D, r24
	if(tempcol1[7])
    478c:	88 85       	ldd	r24, Y+8	; 0x08
    478e:	88 23       	and	r24, r24
    4790:	29 f0       	breq	.+10     	; 0x479c <led_perimeter_left+0x254>
		led_frame_bitmap[62] |=0x01;
    4792:	80 91 85 02 	lds	r24, 0x0285
    4796:	81 60       	ori	r24, 0x01	; 1
    4798:	80 93 85 02 	sts	0x0285, r24

}
    479c:	60 96       	adiw	r28, 0x10	; 16
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	08 95       	ret

000047ae <led_blank>:
	};
}

void led_blank(void)
{
	memset(led_frame_bitmap, 0, 64);
    47ae:	80 e4       	ldi	r24, 0x40	; 64
    47b0:	e7 e4       	ldi	r30, 0x47	; 71
    47b2:	f2 e0       	ldi	r31, 0x02	; 2
    47b4:	df 01       	movw	r26, r30
    47b6:	1d 92       	st	X+, r1
    47b8:	8a 95       	dec	r24
    47ba:	e9 f7       	brne	.-6      	; 0x47b6 <led_blank+0x8>
}
    47bc:	08 95       	ret

000047be <led_init>:

void led_init(void)
{
	unsigned char tempchar;

	LED_LATCH_PORT &=~_BV(LED_LATCH_BIT);
    47be:	80 91 62 00 	lds	r24, 0x0062
    47c2:	8f 77       	andi	r24, 0x7F	; 127
    47c4:	80 93 62 00 	sts	0x0062, r24
	LED_LATCH_DDR |= _BV(LED_LATCH_BIT);
    47c8:	80 91 61 00 	lds	r24, 0x0061
    47cc:	80 68       	ori	r24, 0x80	; 128
    47ce:	80 93 61 00 	sts	0x0061, r24

	MOSI_DDR	|= _BV(MOSI_BIT);
    47d2:	ba 9a       	sbi	0x17, 2	; 23
	SCK_DDR		|= _BV(SCK_BIT);
    47d4:	b9 9a       	sbi	0x17, 1	; 23
	SS_PORT		|= _BV(SS_BIT);
    47d6:	c0 9a       	sbi	0x18, 0	; 24
	SS_DDR		|= _BV(SS_BIT);
    47d8:	b8 9a       	sbi	0x17, 0	; 23

	//Timer 1
	TCCR1A |= _BV(COM1B1) + _BV(WGM10);
    47da:	8f b5       	in	r24, 0x2f	; 47
    47dc:	81 62       	ori	r24, 0x21	; 33
    47de:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM13) + _BV(CS10);
    47e0:	8e b5       	in	r24, 0x2e	; 46
    47e2:	81 61       	ori	r24, 0x11	; 17
    47e4:	8e bd       	out	0x2e, r24	; 46

	//SPI
	SPCR		|= _BV(SPE) + _BV(MSTR);	// mode 0
    47e6:	8d b1       	in	r24, 0x0d	; 13
    47e8:	80 65       	ori	r24, 0x50	; 80
    47ea:	8d b9       	out	0x0d, r24	; 13
	SPSR		|= _BV(SPI2X);				// Fosc/2 clock output
    47ec:	70 9a       	sbi	0x0e, 0	; 14

	//Planes
	PLANES_PORT = 0xFF;
    47ee:	8f ef       	ldi	r24, 0xFF	; 255
    47f0:	85 bb       	out	0x15, r24	; 21
	PLANES_DDR	= 0xFF;
    47f2:	84 bb       	out	0x14, r24	; 20

	//LED Enable
	LED_EN_DDR |=_BV(LED_EN_BIT);
    47f4:	be 9a       	sbi	0x17, 6	; 23

	//ISR's
	TIMSK |= _BV(OCIE1A) + _BV(TOIE1);
    47f6:	87 b7       	in	r24, 0x37	; 55
    47f8:	84 61       	ori	r24, 0x14	; 20
    47fa:	87 bf       	out	0x37, r24	; 55

	//default frame
	memset(led_frame_bitmap, 0, 64);		// All off
    47fc:	80 e4       	ldi	r24, 0x40	; 64
    47fe:	e7 e4       	ldi	r30, 0x47	; 71
    4800:	f2 e0       	ldi	r31, 0x02	; 2
    4802:	df 01       	movw	r26, r30
    4804:	1d 92       	st	X+, r1
    4806:	8a 95       	dec	r24
    4808:	e9 f7       	brne	.-6      	; 0x4804 <led_init+0x46>

	led_framerate(60);						// 60Hz frame rate
    480a:	8c e3       	ldi	r24, 0x3C	; 60
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
{
	unsigned int tempint;
	unsigned long templong;

	tempint = intensity * intensity;
	templong = (unsigned long)tempint * (unsigned long)frame_time;
    4812:	20 91 90 01 	lds	r18, 0x0190
    4816:	30 91 91 01 	lds	r19, 0x0191
    481a:	c9 01       	movw	r24, r18
    481c:	a0 e0       	ldi	r26, 0x00	; 0
    481e:	b0 e0       	ldi	r27, 0x00	; 0
	templong >>= 16;

	plane_period[plane] = frame_time - (unsigned int)templong;
    4820:	42 e0       	ldi	r20, 0x02	; 2
    4822:	b6 95       	lsr	r27
    4824:	a7 95       	ror	r26
    4826:	97 95       	ror	r25
    4828:	87 95       	ror	r24
    482a:	4a 95       	dec	r20
    482c:	d1 f7       	brne	.-12     	; 0x4822 <led_init+0x64>
    482e:	28 1b       	sub	r18, r24
    4830:	39 0b       	sbc	r19, r25
    4832:	e0 e8       	ldi	r30, 0x80	; 128
    4834:	f1 e0       	ldi	r31, 0x01	; 1
    4836:	a2 e9       	ldi	r26, 0x92	; 146
    4838:	b1 e0       	ldi	r27, 0x01	; 1

	plane_intensity[plane] = intensity;	//remember setting se we can re-calc if frame rate changes
    483a:	80 e8       	ldi	r24, 0x80	; 128

	tempint = intensity * intensity;
	templong = (unsigned long)tempint * (unsigned long)frame_time;
	templong >>= 16;

	plane_period[plane] = frame_time - (unsigned int)templong;
    483c:	21 93       	st	Z+, r18
    483e:	31 93       	st	Z+, r19

	plane_intensity[plane] = intensity;	//remember setting se we can re-calc if frame rate changes
    4840:	8d 93       	st	X+, r24
	//default frame
	memset(led_frame_bitmap, 0, 64);		// All off

	led_framerate(60);						// 60Hz frame rate
	tempchar=0;
	while(tempchar !=8)
    4842:	91 e0       	ldi	r25, 0x01	; 1
    4844:	e0 39       	cpi	r30, 0x90	; 144
    4846:	f9 07       	cpc	r31, r25
    4848:	c9 f7       	brne	.-14     	; 0x483c <led_init+0x7e>
		led_plane_intensity(tempchar++, 128);	// 0 intensity on all planes

	//default output buffer
	memcpy(output_bitmap, led_frame_bitmap, 64);
    484a:	aa e9       	ldi	r26, 0x9A	; 154
    484c:	b1 e0       	ldi	r27, 0x01	; 1
    484e:	e7 e4       	ldi	r30, 0x47	; 71
    4850:	f2 e0       	ldi	r31, 0x02	; 2
    4852:	80 e4       	ldi	r24, 0x40	; 64
    4854:	01 90       	ld	r0, Z+
    4856:	0d 92       	st	X+, r0
    4858:	81 50       	subi	r24, 0x01	; 1
    485a:	e1 f7       	brne	.-8      	; 0x4854 <led_init+0x96>
	memcpy(output_plane_period, plane_period, 8);
    485c:	aa ed       	ldi	r26, 0xDA	; 218
    485e:	b1 e0       	ldi	r27, 0x01	; 1
    4860:	e0 e8       	ldi	r30, 0x80	; 128
    4862:	f1 e0       	ldi	r31, 0x01	; 1
    4864:	88 e0       	ldi	r24, 0x08	; 8
    4866:	01 90       	ld	r0, Z+
    4868:	0d 92       	st	X+, r0
    486a:	81 50       	subi	r24, 0x01	; 1
    486c:	e1 f7       	brne	.-8      	; 0x4866 <led_init+0xa8>

	OCR1A = frame_time;
    486e:	80 91 90 01 	lds	r24, 0x0190
    4872:	90 91 91 01 	lds	r25, 0x0191
    4876:	9b bd       	out	0x2b, r25	; 43
    4878:	8a bd       	out	0x2a, r24	; 42
}
    487a:	08 95       	ret

0000487c <led_waitframe>:
        }
    }
}

void led_waitframe(unsigned int x)
{
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	ec 01       	movw	r28, r24
    4882:	0a c0       	rjmp	.+20     	; 0x4898 <led_waitframe+0x1c>
	while(x--)
	{
		frame_sync=FALSE;
    4884:	10 92 7f 01 	sts	0x017F, r1
    4888:	02 c0       	rjmp	.+4      	; 0x488e <led_waitframe+0x12>
		while(!frame_sync)
			WAIT_LOOP();
    488a:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
void led_waitframe(unsigned int x)
{
	while(x--)
	{
		frame_sync=FALSE;
		while(!frame_sync)
    488e:	80 91 7f 01 	lds	r24, 0x017F
    4892:	88 23       	and	r24, r24
    4894:	d1 f3       	breq	.-12     	; 0x488a <led_waitframe+0xe>
    4896:	21 97       	sbiw	r28, 0x01	; 1
    }
}

void led_waitframe(unsigned int x)
{
	while(x--)
    4898:	20 97       	sbiw	r28, 0x00	; 0
    489a:	a1 f7       	brne	.-24     	; 0x4884 <led_waitframe+0x8>
	{
		frame_sync=FALSE;
		while(!frame_sync)
			WAIT_LOOP();
	};
}
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	08 95       	ret

000048a2 <text_isfinished>:
}

char text_isfinished(void)
{
	return finished;
}
    48a2:	80 91 07 01 	lds	r24, 0x0107
    48a6:	08 95       	ret

000048a8 <load_char>:
{
	int index;
	PGM_P font_ptr;

	//calculate index in font table
	x &=0x7F;
    48a8:	8f 77       	andi	r24, 0x7F	; 127
	x -=0x20;
	index = x + (x<<2);	//*5
    48aa:	80 52       	subi	r24, 0x20	; 32
    48ac:	90 e0       	ldi	r25, 0x00	; 0

	//point to font table
	font_ptr = &font[index];
    48ae:	fc 01       	movw	r30, r24
    48b0:	ee 0f       	add	r30, r30
    48b2:	ff 1f       	adc	r31, r31
    48b4:	ee 0f       	add	r30, r30
    48b6:	ff 1f       	adc	r31, r31
    48b8:	e8 0f       	add	r30, r24
    48ba:	f9 1f       	adc	r31, r25
    48bc:	ef 5d       	subi	r30, 0xDF	; 223
    48be:	fa 4f       	sbci	r31, 0xFA	; 250

	//load rows
	row[0] = pgm_read_byte(font_ptr++);
    48c0:	cf 01       	movw	r24, r30
    48c2:	01 96       	adiw	r24, 0x01	; 1
    48c4:	e4 91       	lpm	r30, Z+
    48c6:	e0 93 ef 01 	sts	0x01EF, r30
	row[1] = pgm_read_byte(font_ptr++);
    48ca:	ac 01       	movw	r20, r24
    48cc:	4f 5f       	subi	r20, 0xFF	; 255
    48ce:	5f 4f       	sbci	r21, 0xFF	; 255
    48d0:	fc 01       	movw	r30, r24
    48d2:	84 91       	lpm	r24, Z+
    48d4:	80 93 f0 01 	sts	0x01F0, r24
	row[2] = pgm_read_byte(font_ptr++);
    48d8:	9a 01       	movw	r18, r20
    48da:	2f 5f       	subi	r18, 0xFF	; 255
    48dc:	3f 4f       	sbci	r19, 0xFF	; 255
    48de:	fa 01       	movw	r30, r20
    48e0:	84 91       	lpm	r24, Z+
    48e2:	80 93 f1 01 	sts	0x01F1, r24
	row[3] = pgm_read_byte(font_ptr++);
    48e6:	f9 01       	movw	r30, r18
    48e8:	84 91       	lpm	r24, Z+
    48ea:	80 93 f2 01 	sts	0x01F2, r24
	row[4] = pgm_read_byte(font_ptr);
    48ee:	2f 5f       	subi	r18, 0xFF	; 255
    48f0:	3f 4f       	sbci	r19, 0xFF	; 255
    48f2:	f9 01       	movw	r30, r18
    48f4:	84 91       	lpm	r24, Z+
    48f6:	80 93 f3 01 	sts	0x01F3, r24

	//row now contains 6 bits
	row_contents=6;
    48fa:	86 e0       	ldi	r24, 0x06	; 6
    48fc:	80 93 ea 01 	sts	0x01EA, r24
}
    4900:	08 95       	ret

00004902 <text_set>:
	else
		finished=TRUE;
}

void text_set(char* ptr)
{
    4902:	fc 01       	movw	r30, r24
	char tempchar;

	text_ptr_p=NULL;
    4904:	10 92 ec 01 	sts	0x01EC, r1
    4908:	10 92 eb 01 	sts	0x01EB, r1
	text_ptr = ptr;
    490c:	90 93 ee 01 	sts	0x01EE, r25
    4910:	80 93 ed 01 	sts	0x01ED, r24
	tempchar=*text_ptr;
    4914:	80 81       	ld	r24, Z
	if(tempchar)
    4916:	88 23       	and	r24, r24
    4918:	51 f0       	breq	.+20     	; 0x492e <text_set+0x2c>
	{
		text_ptr++;
    491a:	31 96       	adiw	r30, 0x01	; 1
    491c:	f0 93 ee 01 	sts	0x01EE, r31
    4920:	e0 93 ed 01 	sts	0x01ED, r30
		load_char(tempchar);
    4924:	0e 94 54 24 	call	0x48a8	; 0x48a8 <load_char>
		finished=FALSE;
    4928:	10 92 07 01 	sts	0x0107, r1
    492c:	08 95       	ret
	}
	else
		finished=TRUE;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	80 93 07 01 	sts	0x0107, r24
    4934:	08 95       	ret

00004936 <text_set_P>:
//********************************************************************************************************
// Public functions
//********************************************************************************************************

void text_set_P(PGM_P ptr)
{
    4936:	fc 01       	movw	r30, r24
	char tempchar;

	text_ptr=NULL;
    4938:	10 92 ee 01 	sts	0x01EE, r1
    493c:	10 92 ed 01 	sts	0x01ED, r1
	text_ptr_p = ptr;
    4940:	90 93 ec 01 	sts	0x01EC, r25
    4944:	80 93 eb 01 	sts	0x01EB, r24
	tempchar=pgm_read_byte(text_ptr_p);
    4948:	84 91       	lpm	r24, Z+
	if(tempchar)
    494a:	88 23       	and	r24, r24
    494c:	51 f0       	breq	.+20     	; 0x4962 <text_set_P+0x2c>
	{
		text_ptr_p++;
    494e:	31 96       	adiw	r30, 0x01	; 1
    4950:	f0 93 ec 01 	sts	0x01EC, r31
    4954:	e0 93 eb 01 	sts	0x01EB, r30
		load_char(tempchar);
    4958:	0e 94 54 24 	call	0x48a8	; 0x48a8 <load_char>
		finished=FALSE;
    495c:	10 92 07 01 	sts	0x0107, r1
    4960:	08 95       	ret
	}
	else
		finished=TRUE;
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	80 93 07 01 	sts	0x0107, r24
    4968:	08 95       	ret

0000496a <text_draw_x>:
	};
}

//draw a horizontal line of text in the x direction, at x, y, z, x==left pixel, font is 5x5 high
void text_draw_x(unsigned char x, unsigned char y, unsigned char z)
{
    496a:	e6 2f       	mov	r30, r22
	y&=7;
	z&=7;

	i=(y<<3) + z;
	
	led_frame_bitmap[i] &=~(0x1F << (3-x));
    496c:	e7 70       	andi	r30, 0x07	; 7
    496e:	ee 0f       	add	r30, r30
    4970:	ee 0f       	add	r30, r30
    4972:	ee 0f       	add	r30, r30
    4974:	47 70       	andi	r20, 0x07	; 7
    4976:	e4 0f       	add	r30, r20
    4978:	f0 e0       	ldi	r31, 0x00	; 0
    497a:	83 70       	andi	r24, 0x03	; 3
    497c:	43 e0       	ldi	r20, 0x03	; 3
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	48 1b       	sub	r20, r24
    4982:	51 09       	sbc	r21, r1
	led_frame_bitmap[i] |= row[0] << (3-x);
    4984:	e9 5b       	subi	r30, 0xB9	; 185
    4986:	fd 4f       	sbci	r31, 0xFD	; 253
    4988:	2f e1       	ldi	r18, 0x1F	; 31
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	04 2e       	mov	r0, r20
    498e:	02 c0       	rjmp	.+4      	; 0x4994 <text_draw_x+0x2a>
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	0a 94       	dec	r0
    4996:	e2 f7       	brpl	.-8      	; 0x4990 <text_draw_x+0x26>
    4998:	20 95       	com	r18
    499a:	80 81       	ld	r24, Z
    499c:	28 23       	and	r18, r24
    499e:	80 91 ef 01 	lds	r24, 0x01EF
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	02 c0       	rjmp	.+4      	; 0x49aa <text_draw_x+0x40>
    49a6:	88 0f       	add	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	4a 95       	dec	r20
    49ac:	e2 f7       	brpl	.-8      	; 0x49a6 <text_draw_x+0x3c>
    49ae:	28 2b       	or	r18, r24
    49b0:	20 83       	st	Z, r18

	//shift rows
	row[0]=row[1];
    49b2:	80 91 f0 01 	lds	r24, 0x01F0
    49b6:	80 93 ef 01 	sts	0x01EF, r24
	row[1]=row[2];
    49ba:	80 91 f1 01 	lds	r24, 0x01F1
    49be:	80 93 f0 01 	sts	0x01F0, r24
	row[2]=row[3];
    49c2:	80 91 f2 01 	lds	r24, 0x01F2
    49c6:	80 93 f1 01 	sts	0x01F1, r24
	row[3]=row[4];
    49ca:	80 91 f3 01 	lds	r24, 0x01F3
    49ce:	80 93 f2 01 	sts	0x01F2, r24
	row[4]=0;
    49d2:	10 92 f3 01 	sts	0x01F3, r1
	
	row_contents--;
    49d6:	80 91 ea 01 	lds	r24, 0x01EA
    49da:	81 50       	subi	r24, 0x01	; 1
    49dc:	80 93 ea 01 	sts	0x01EA, r24
	
	//rows empty??
	if(row_contents==0)
    49e0:	88 23       	and	r24, r24
    49e2:	79 f4       	brne	.+30     	; 0x4a02 <text_draw_x+0x98>
	{
		if(text_ptr_p)
    49e4:	80 91 eb 01 	lds	r24, 0x01EB
    49e8:	90 91 ec 01 	lds	r25, 0x01EC
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	19 f0       	breq	.+6      	; 0x49f6 <text_draw_x+0x8c>
			text_set_P(text_ptr_p);			//load next character if there is one
    49f0:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    49f4:	08 95       	ret
		else
			text_set(text_ptr);			//load next character if there is one
    49f6:	80 91 ed 01 	lds	r24, 0x01ED
    49fa:	90 91 ee 01 	lds	r25, 0x01EE
    49fe:	0e 94 81 24 	call	0x4902	; 0x4902 <text_set>
    4a02:	08 95       	ret

00004a04 <text_draw_y>:
		finished=TRUE;
}

//draw a vertical columb of text, at x, y, z, y==top pixel, font is 5 high
void text_draw_y(unsigned char x, unsigned char y, unsigned char z)
{
    4a04:	28 2f       	mov	r18, r24
	bit_on=0x80>>x;
	bit_off=~bit_on;
	
	i= (y<<3)+z;

	if(!finished)
    4a06:	80 91 07 01 	lds	r24, 0x0107
    4a0a:	88 23       	and	r24, r24
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <text_draw_y+0xc>
    4a0e:	93 c0       	rjmp	.+294    	; 0x4b36 <text_draw_y+0x132>
	
	x&=7;
	y&=3;
	z&=7;
	
	bit_on=0x80>>x;
    4a10:	27 70       	andi	r18, 0x07	; 7
    4a12:	80 e8       	ldi	r24, 0x80	; 128
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	02 c0       	rjmp	.+4      	; 0x4a1c <text_draw_y+0x18>
    4a18:	95 95       	asr	r25
    4a1a:	87 95       	ror	r24
    4a1c:	2a 95       	dec	r18
    4a1e:	e2 f7       	brpl	.-8      	; 0x4a18 <text_draw_y+0x14>
    4a20:	98 2f       	mov	r25, r24
	bit_off=~bit_on;
    4a22:	28 2f       	mov	r18, r24
    4a24:	20 95       	com	r18
	
	i= (y<<3)+z;
    4a26:	63 70       	andi	r22, 0x03	; 3
    4a28:	66 0f       	add	r22, r22
    4a2a:	66 0f       	add	r22, r22
    4a2c:	66 0f       	add	r22, r22
    4a2e:	47 70       	andi	r20, 0x07	; 7
    4a30:	64 0f       	add	r22, r20

	if(!finished)
	{
		if(row[0] & 0x20)
    4a32:	30 91 ef 01 	lds	r19, 0x01EF
    4a36:	e6 2f       	mov	r30, r22
    4a38:	f0 e0       	ldi	r31, 0x00	; 0
    4a3a:	35 ff       	sbrs	r19, 5
    4a3c:	05 c0       	rjmp	.+10     	; 0x4a48 <text_draw_y+0x44>
			led_frame_bitmap[i]|=bit_on;
    4a3e:	e9 5b       	subi	r30, 0xB9	; 185
    4a40:	fd 4f       	sbci	r31, 0xFD	; 253
    4a42:	80 81       	ld	r24, Z
    4a44:	89 2b       	or	r24, r25
    4a46:	04 c0       	rjmp	.+8      	; 0x4a50 <text_draw_y+0x4c>
		else
			led_frame_bitmap[i]&=bit_off;
    4a48:	e9 5b       	subi	r30, 0xB9	; 185
    4a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    4a4c:	80 81       	ld	r24, Z
    4a4e:	82 23       	and	r24, r18
    4a50:	80 83       	st	Z, r24
		i+=8;
    4a52:	68 5f       	subi	r22, 0xF8	; 248
		if(row[1] & 0x20)
    4a54:	80 91 f0 01 	lds	r24, 0x01F0
    4a58:	e6 2f       	mov	r30, r22
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	85 ff       	sbrs	r24, 5
    4a5e:	05 c0       	rjmp	.+10     	; 0x4a6a <text_draw_y+0x66>
			led_frame_bitmap[i]|=bit_on;
    4a60:	e9 5b       	subi	r30, 0xB9	; 185
    4a62:	fd 4f       	sbci	r31, 0xFD	; 253
    4a64:	80 81       	ld	r24, Z
    4a66:	89 2b       	or	r24, r25
    4a68:	04 c0       	rjmp	.+8      	; 0x4a72 <text_draw_y+0x6e>
		else
			led_frame_bitmap[i]&=bit_off;
    4a6a:	e9 5b       	subi	r30, 0xB9	; 185
    4a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    4a6e:	80 81       	ld	r24, Z
    4a70:	82 23       	and	r24, r18
    4a72:	80 83       	st	Z, r24
		i+=8;
    4a74:	68 5f       	subi	r22, 0xF8	; 248
		if(row[2] & 0x20)
    4a76:	80 91 f1 01 	lds	r24, 0x01F1
    4a7a:	e6 2f       	mov	r30, r22
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	85 ff       	sbrs	r24, 5
    4a80:	05 c0       	rjmp	.+10     	; 0x4a8c <text_draw_y+0x88>
			led_frame_bitmap[i]|=bit_on;
    4a82:	e9 5b       	subi	r30, 0xB9	; 185
    4a84:	fd 4f       	sbci	r31, 0xFD	; 253
    4a86:	80 81       	ld	r24, Z
    4a88:	89 2b       	or	r24, r25
    4a8a:	04 c0       	rjmp	.+8      	; 0x4a94 <text_draw_y+0x90>
		else
			led_frame_bitmap[i]&=bit_off;
    4a8c:	e9 5b       	subi	r30, 0xB9	; 185
    4a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    4a90:	80 81       	ld	r24, Z
    4a92:	82 23       	and	r24, r18
    4a94:	80 83       	st	Z, r24
		i+=8;
    4a96:	68 5f       	subi	r22, 0xF8	; 248
		if(row[3] & 0x20)
    4a98:	80 91 f2 01 	lds	r24, 0x01F2
    4a9c:	e6 2f       	mov	r30, r22
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	85 ff       	sbrs	r24, 5
    4aa2:	05 c0       	rjmp	.+10     	; 0x4aae <text_draw_y+0xaa>
			led_frame_bitmap[i]|=bit_on;
    4aa4:	e9 5b       	subi	r30, 0xB9	; 185
    4aa6:	fd 4f       	sbci	r31, 0xFD	; 253
    4aa8:	80 81       	ld	r24, Z
    4aaa:	89 2b       	or	r24, r25
    4aac:	04 c0       	rjmp	.+8      	; 0x4ab6 <text_draw_y+0xb2>
		else
			led_frame_bitmap[i]&=bit_off;
    4aae:	e9 5b       	subi	r30, 0xB9	; 185
    4ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    4ab2:	80 81       	ld	r24, Z
    4ab4:	82 23       	and	r24, r18
    4ab6:	80 83       	st	Z, r24
		i+=8;
    4ab8:	68 5f       	subi	r22, 0xF8	; 248
		if(row[4] & 0x20)
    4aba:	80 91 f3 01 	lds	r24, 0x01F3
    4abe:	70 e0       	ldi	r23, 0x00	; 0
    4ac0:	85 ff       	sbrs	r24, 5
    4ac2:	06 c0       	rjmp	.+12     	; 0x4ad0 <text_draw_y+0xcc>
			led_frame_bitmap[i]|=bit_on;
    4ac4:	fb 01       	movw	r30, r22
    4ac6:	e9 5b       	subi	r30, 0xB9	; 185
    4ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    4aca:	80 81       	ld	r24, Z
    4acc:	89 2b       	or	r24, r25
    4ace:	05 c0       	rjmp	.+10     	; 0x4ada <text_draw_y+0xd6>
		else
			led_frame_bitmap[i]&=bit_off;
    4ad0:	fb 01       	movw	r30, r22
    4ad2:	e9 5b       	subi	r30, 0xB9	; 185
    4ad4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ad6:	80 81       	ld	r24, Z
    4ad8:	82 23       	and	r24, r18
    4ada:	80 83       	st	Z, r24
		
		//shift rows
		row[0]<<=1;
    4adc:	33 0f       	add	r19, r19
    4ade:	30 93 ef 01 	sts	0x01EF, r19
		row[1]<<=1;
    4ae2:	80 91 f0 01 	lds	r24, 0x01F0
    4ae6:	88 0f       	add	r24, r24
    4ae8:	80 93 f0 01 	sts	0x01F0, r24
		row[2]<<=1;
    4aec:	80 91 f1 01 	lds	r24, 0x01F1
    4af0:	88 0f       	add	r24, r24
    4af2:	80 93 f1 01 	sts	0x01F1, r24
		row[3]<<=1;
    4af6:	80 91 f2 01 	lds	r24, 0x01F2
    4afa:	88 0f       	add	r24, r24
    4afc:	80 93 f2 01 	sts	0x01F2, r24
		row[4]<<=1;
    4b00:	80 91 f3 01 	lds	r24, 0x01F3
    4b04:	88 0f       	add	r24, r24
    4b06:	80 93 f3 01 	sts	0x01F3, r24
		
		row_contents--;
    4b0a:	80 91 ea 01 	lds	r24, 0x01EA
    4b0e:	81 50       	subi	r24, 0x01	; 1
    4b10:	80 93 ea 01 	sts	0x01EA, r24
		
		//rows empty??
		if(row_contents==0)
    4b14:	88 23       	and	r24, r24
    4b16:	79 f4       	brne	.+30     	; 0x4b36 <text_draw_y+0x132>
		{
			if(text_ptr_p)
    4b18:	80 91 eb 01 	lds	r24, 0x01EB
    4b1c:	90 91 ec 01 	lds	r25, 0x01EC
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	19 f0       	breq	.+6      	; 0x4b2a <text_draw_y+0x126>
				text_set_P(text_ptr_p);			//load next character if there is one
    4b24:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    4b28:	08 95       	ret
			else
				text_set(text_ptr);			//load next character if there is one
    4b2a:	80 91 ed 01 	lds	r24, 0x01ED
    4b2e:	90 91 ee 01 	lds	r25, 0x01EE
    4b32:	0e 94 81 24 	call	0x4902	; 0x4902 <text_set>
    4b36:	08 95       	ret

00004b38 <pattern_tick>:
// Public functions
//********************************************************************************************************

void pattern_tick(void)
{
	if(time)
    4b38:	80 91 0a 02 	lds	r24, 0x020A
    4b3c:	90 91 0b 02 	lds	r25, 0x020B
    4b40:	00 97       	sbiw	r24, 0x00	; 0
    4b42:	29 f0       	breq	.+10     	; 0x4b4e <pattern_tick+0x16>
		time--;
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	90 93 0b 02 	sts	0x020B, r25
    4b4a:	80 93 0a 02 	sts	0x020A, r24
    4b4e:	08 95       	ret

00004b50 <pattern_break>:
}

void pattern_break(void)
{
	fallout=TRUE;
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	80 93 f4 01 	sts	0x01F4, r24
}
    4b56:	08 95       	ret

00004b58 <pattern_duration_set>:

void pattern_duration_set(unsigned int x)
{
	duration = x;
    4b58:	90 93 f6 01 	sts	0x01F6, r25
    4b5c:	80 93 f5 01 	sts	0x01F5, r24
}
    4b60:	08 95       	ret

00004b62 <point_rotate>:
// Private functions
//********************************************************************************************************

//rotate a point around the surface of the cube
static void point_rotate(uint8_t dir, uint8_t* x_ptr, uint8_t* y_ptr, uint8_t* z_ptr)
{
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	fb 01       	movw	r30, r22
    4b68:	da 01       	movw	r26, r20
    4b6a:	e9 01       	movw	r28, r18
	uint8_t x,y,z;
	
	x=*x_ptr;
    4b6c:	90 81       	ld	r25, Z
	y=*y_ptr;
    4b6e:	2c 91       	ld	r18, X
	z=*z_ptr;
    4b70:	38 81       	ld	r19, Y
	
	switch(dir)
    4b72:	83 30       	cpi	r24, 0x03	; 3
    4b74:	91 f1       	breq	.+100    	; 0x4bda <point_rotate+0x78>
    4b76:	84 30       	cpi	r24, 0x04	; 4
    4b78:	30 f4       	brcc	.+12     	; 0x4b86 <point_rotate+0x24>
    4b7a:	81 30       	cpi	r24, 0x01	; 1
    4b7c:	69 f0       	breq	.+26     	; 0x4b98 <point_rotate+0x36>
    4b7e:	82 30       	cpi	r24, 0x02	; 2
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <point_rotate+0x22>
    4b82:	76 c0       	rjmp	.+236    	; 0x4c70 <point_rotate+0x10e>
    4b84:	1e c0       	rjmp	.+60     	; 0x4bc2 <point_rotate+0x60>
    4b86:	85 30       	cpi	r24, 0x05	; 5
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <point_rotate+0x2a>
    4b8a:	4b c0       	rjmp	.+150    	; 0x4c22 <point_rotate+0xc0>
    4b8c:	85 30       	cpi	r24, 0x05	; 5
    4b8e:	b8 f1       	brcs	.+110    	; 0x4bfe <point_rotate+0x9c>
    4b90:	86 30       	cpi	r24, 0x06	; 6
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <point_rotate+0x34>
    4b94:	6d c0       	rjmp	.+218    	; 0x4c70 <point_rotate+0x10e>
    4b96:	56 c0       	rjmp	.+172    	; 0x4c44 <point_rotate+0xe2>
	{
		case ROTATE_UP:
			//front face up
			if(z==0 && y)
    4b98:	33 23       	and	r19, r19
    4b9a:	19 f4       	brne	.+6      	; 0x4ba2 <point_rotate+0x40>
    4b9c:	22 23       	and	r18, r18
    4b9e:	29 f0       	breq	.+10     	; 0x4baa <point_rotate+0x48>
    4ba0:	66 c0       	rjmp	.+204    	; 0x4c6e <point_rotate+0x10c>
				y--;
			//top face back
			else if(y==0 && z<7)
    4ba2:	22 23       	and	r18, r18
    4ba4:	29 f4       	brne	.+10     	; 0x4bb0 <point_rotate+0x4e>
    4ba6:	37 30       	cpi	r19, 0x07	; 7
    4ba8:	18 f4       	brcc	.+6      	; 0x4bb0 <point_rotate+0x4e>
				z++;
    4baa:	3f 5f       	subi	r19, 0xFF	; 255
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	60 c0       	rjmp	.+192    	; 0x4c70 <point_rotate+0x10e>
			//back face down
			else if (z==7 && y<7)
    4bb0:	37 30       	cpi	r19, 0x07	; 7
    4bb2:	19 f4       	brne	.+6      	; 0x4bba <point_rotate+0x58>
    4bb4:	27 30       	cpi	r18, 0x07	; 7
    4bb6:	08 f4       	brcc	.+2      	; 0x4bba <point_rotate+0x58>
    4bb8:	43 c0       	rjmp	.+134    	; 0x4c40 <point_rotate+0xde>
				y++;
			//bottom face forward
			else if (y==7 && z)
    4bba:	27 30       	cpi	r18, 0x07	; 7
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <point_rotate+0x5e>
    4bbe:	58 c0       	rjmp	.+176    	; 0x4c70 <point_rotate+0x10e>
    4bc0:	26 c0       	rjmp	.+76     	; 0x4c0e <point_rotate+0xac>
				z--;
			break;
			
		case ROTATE_DOWN:
			//front face down
			if(z==0 && y<7)
    4bc2:	33 23       	and	r19, r19
    4bc4:	11 f4       	brne	.+4      	; 0x4bca <point_rotate+0x68>
    4bc6:	27 30       	cpi	r18, 0x07	; 7
    4bc8:	d8 f1       	brcs	.+118    	; 0x4c40 <point_rotate+0xde>
				y++;
			//top face forward
			else if(y==0 && z)
    4bca:	22 23       	and	r18, r18
    4bcc:	f1 f0       	breq	.+60     	; 0x4c0a <point_rotate+0xa8>
				z--;
			//back face up
			else if (z==7 && y)
    4bce:	37 30       	cpi	r19, 0x07	; 7
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <point_rotate+0x72>
    4bd2:	4d c0       	rjmp	.+154    	; 0x4c6e <point_rotate+0x10c>
				y--;
			//bottom face back
			else if (y==7 && z<7)
    4bd4:	27 30       	cpi	r18, 0x07	; 7
    4bd6:	09 f1       	breq	.+66     	; 0x4c1a <point_rotate+0xb8>
    4bd8:	4b c0       	rjmp	.+150    	; 0x4c70 <point_rotate+0x10e>
				z++;
			break;
		
		case ROTATE_LEFT:
			//front face left
			if(z==0 && x)
    4bda:	33 23       	and	r19, r19
    4bdc:	19 f4       	brne	.+6      	; 0x4be4 <point_rotate+0x82>
    4bde:	99 23       	and	r25, r25
    4be0:	29 f0       	breq	.+10     	; 0x4bec <point_rotate+0x8a>
    4be2:	34 c0       	rjmp	.+104    	; 0x4c4c <point_rotate+0xea>
				x--;
			//left face back
			else if(x==0 && z<7)
    4be4:	99 23       	and	r25, r25
    4be6:	21 f4       	brne	.+8      	; 0x4bf0 <point_rotate+0x8e>
    4be8:	37 30       	cpi	r19, 0x07	; 7
    4bea:	10 f4       	brcc	.+4      	; 0x4bf0 <point_rotate+0x8e>
				z++;
    4bec:	3f 5f       	subi	r19, 0xFF	; 255
    4bee:	35 c0       	rjmp	.+106    	; 0x4c5a <point_rotate+0xf8>
			//back face right
			else if(z==7 && x<7)
    4bf0:	37 30       	cpi	r19, 0x07	; 7
    4bf2:	11 f4       	brne	.+4      	; 0x4bf8 <point_rotate+0x96>
    4bf4:	97 30       	cpi	r25, 0x07	; 7
    4bf6:	b8 f1       	brcs	.+110    	; 0x4c66 <point_rotate+0x104>
				x++;
			//right face forward
			else if(x==7 && z)
    4bf8:	97 30       	cpi	r25, 0x07	; 7
    4bfa:	d1 f5       	brne	.+116    	; 0x4c70 <point_rotate+0x10e>
    4bfc:	08 c0       	rjmp	.+16     	; 0x4c0e <point_rotate+0xac>
				z--;
			break;
		
		case ROTATE_RIGHT:
			//front face right
			if(z==0 && x<7)
    4bfe:	33 23       	and	r19, r19
    4c00:	11 f4       	brne	.+4      	; 0x4c06 <point_rotate+0xa4>
    4c02:	97 30       	cpi	r25, 0x07	; 7
    4c04:	80 f1       	brcs	.+96     	; 0x4c66 <point_rotate+0x104>
				x++;
			//left face forward
			else if(x==0 && z)
    4c06:	99 23       	and	r25, r25
    4c08:	21 f4       	brne	.+8      	; 0x4c12 <point_rotate+0xb0>
    4c0a:	33 23       	and	r19, r19
    4c0c:	89 f1       	breq	.+98     	; 0x4c70 <point_rotate+0x10e>
				z--;
    4c0e:	31 50       	subi	r19, 0x01	; 1
    4c10:	2f c0       	rjmp	.+94     	; 0x4c70 <point_rotate+0x10e>
			//back face left
			else if(z==7 && x)
    4c12:	37 30       	cpi	r19, 0x07	; 7
    4c14:	d9 f0       	breq	.+54     	; 0x4c4c <point_rotate+0xea>
				x--;
			//right face back
			else if(x==7 && z<7)
    4c16:	97 30       	cpi	r25, 0x07	; 7
    4c18:	59 f5       	brne	.+86     	; 0x4c70 <point_rotate+0x10e>
    4c1a:	37 30       	cpi	r19, 0x07	; 7
    4c1c:	48 f5       	brcc	.+82     	; 0x4c70 <point_rotate+0x10e>
				z++;
    4c1e:	3f 5f       	subi	r19, 0xFF	; 255
    4c20:	27 c0       	rjmp	.+78     	; 0x4c70 <point_rotate+0x10e>
			break;
		
		case ROTATE_CLOCKWISE:
			//top face right
			if(y==0 && x<7)
    4c22:	22 23       	and	r18, r18
    4c24:	11 f4       	brne	.+4      	; 0x4c2a <point_rotate+0xc8>
    4c26:	97 30       	cpi	r25, 0x07	; 7
    4c28:	f0 f0       	brcs	.+60     	; 0x4c66 <point_rotate+0x104>
				x++;
			//left face up
			else if(x==0 && y)
    4c2a:	99 23       	and	r25, r25
    4c2c:	19 f4       	brne	.+6      	; 0x4c34 <point_rotate+0xd2>
    4c2e:	22 23       	and	r18, r18
    4c30:	f9 f0       	breq	.+62     	; 0x4c70 <point_rotate+0x10e>
    4c32:	1d c0       	rjmp	.+58     	; 0x4c6e <point_rotate+0x10c>
				y--;
			//bottom face left
			else if(y==7 && x)
    4c34:	27 30       	cpi	r18, 0x07	; 7
    4c36:	51 f0       	breq	.+20     	; 0x4c4c <point_rotate+0xea>
				x--;
			//right face down
			else if(x==7 && y<7)
    4c38:	97 30       	cpi	r25, 0x07	; 7
    4c3a:	d1 f4       	brne	.+52     	; 0x4c70 <point_rotate+0x10e>
    4c3c:	27 30       	cpi	r18, 0x07	; 7
    4c3e:	c0 f4       	brcc	.+48     	; 0x4c70 <point_rotate+0x10e>
				y++;
    4c40:	2f 5f       	subi	r18, 0xFF	; 255
    4c42:	16 c0       	rjmp	.+44     	; 0x4c70 <point_rotate+0x10e>
			break;

		case ROTATE_ANTICLOCKWISE:
			//top face left
			if(y==0 && x)
    4c44:	22 23       	and	r18, r18
    4c46:	21 f4       	brne	.+8      	; 0x4c50 <point_rotate+0xee>
    4c48:	99 23       	and	r25, r25
    4c4a:	31 f0       	breq	.+12     	; 0x4c58 <point_rotate+0xf6>
				x--;
    4c4c:	91 50       	subi	r25, 0x01	; 1
    4c4e:	10 c0       	rjmp	.+32     	; 0x4c70 <point_rotate+0x10e>
			//left face down
			else if(x==0 && y<7)
    4c50:	99 23       	and	r25, r25
    4c52:	29 f4       	brne	.+10     	; 0x4c5e <point_rotate+0xfc>
    4c54:	27 30       	cpi	r18, 0x07	; 7
    4c56:	18 f4       	brcc	.+6      	; 0x4c5e <point_rotate+0xfc>
				y++;
    4c58:	2f 5f       	subi	r18, 0xFF	; 255
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	09 c0       	rjmp	.+18     	; 0x4c70 <point_rotate+0x10e>
			//bottom face right
			else if(y==7 && x<7)
    4c5e:	27 30       	cpi	r18, 0x07	; 7
    4c60:	21 f4       	brne	.+8      	; 0x4c6a <point_rotate+0x108>
    4c62:	97 30       	cpi	r25, 0x07	; 7
    4c64:	10 f4       	brcc	.+4      	; 0x4c6a <point_rotate+0x108>
				x++;
    4c66:	9f 5f       	subi	r25, 0xFF	; 255
    4c68:	03 c0       	rjmp	.+6      	; 0x4c70 <point_rotate+0x10e>
			//right face up
			else if(x==7 && y)
    4c6a:	97 30       	cpi	r25, 0x07	; 7
    4c6c:	09 f4       	brne	.+2      	; 0x4c70 <point_rotate+0x10e>
				y--;
    4c6e:	21 50       	subi	r18, 0x01	; 1
			break;
	};

	*x_ptr=x;
    4c70:	90 83       	st	Z, r25
	*y_ptr=y;
    4c72:	2c 93       	st	X, r18
	*z_ptr=z;
    4c74:	38 83       	st	Y, r19
}
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	08 95       	ret

00004c7c <physical_plot>:
	};
}

//plot or erase a physical point
static void physical_plot(struct physical_struct *physical_ptr, char on_off)
{
    4c7c:	fc 01       	movw	r30, r24
	uint8_t x, y, z;
	
	x = (uint8_t)(physical_ptr->position_x >>12);
    4c7e:	31 81       	ldd	r19, Z+1	; 0x01
    4c80:	32 95       	swap	r19
    4c82:	3f 70       	andi	r19, 0x0F	; 15
	y = (uint8_t)(physical_ptr->position_y >>12);
    4c84:	23 81       	ldd	r18, Z+3	; 0x03
    4c86:	22 95       	swap	r18
    4c88:	2f 70       	andi	r18, 0x0F	; 15
	z = (uint8_t)(physical_ptr->position_z >>12);
    4c8a:	95 81       	ldd	r25, Z+5	; 0x05
    4c8c:	92 95       	swap	r25
    4c8e:	9f 70       	andi	r25, 0x0F	; 15

	if( ((x|y|z)&0xF8) == 0)
    4c90:	82 2f       	mov	r24, r18
    4c92:	83 2b       	or	r24, r19
    4c94:	89 2b       	or	r24, r25
    4c96:	88 7f       	andi	r24, 0xF8	; 248
    4c98:	71 f5       	brne	.+92     	; 0x4cf6 <physical_plot+0x7a>
    4c9a:	e2 2f       	mov	r30, r18
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	89 2f       	mov	r24, r25
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(on_off)
    4ca2:	66 23       	and	r22, r22
    4ca4:	a1 f0       	breq	.+40     	; 0x4cce <physical_plot+0x52>
			led_frame_bitmap[z+(y<<3)] |= 0x80>>x;
    4ca6:	43 e0       	ldi	r20, 0x03	; 3
    4ca8:	ee 0f       	add	r30, r30
    4caa:	ff 1f       	adc	r31, r31
    4cac:	4a 95       	dec	r20
    4cae:	e1 f7       	brne	.-8      	; 0x4ca8 <physical_plot+0x2c>
    4cb0:	e8 0f       	add	r30, r24
    4cb2:	f9 1f       	adc	r31, r25
    4cb4:	e9 5b       	subi	r30, 0xB9	; 185
    4cb6:	fd 4f       	sbci	r31, 0xFD	; 253
    4cb8:	80 e8       	ldi	r24, 0x80	; 128
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <physical_plot+0x46>
    4cbe:	95 95       	asr	r25
    4cc0:	87 95       	ror	r24
    4cc2:	3a 95       	dec	r19
    4cc4:	e2 f7       	brpl	.-8      	; 0x4cbe <physical_plot+0x42>
    4cc6:	20 81       	ld	r18, Z
    4cc8:	28 2b       	or	r18, r24
    4cca:	20 83       	st	Z, r18
    4ccc:	08 95       	ret
		else
			led_frame_bitmap[z+(y<<3)] &=~(0x80>>x);
    4cce:	23 e0       	ldi	r18, 0x03	; 3
    4cd0:	ee 0f       	add	r30, r30
    4cd2:	ff 1f       	adc	r31, r31
    4cd4:	2a 95       	dec	r18
    4cd6:	e1 f7       	brne	.-8      	; 0x4cd0 <physical_plot+0x54>
    4cd8:	e8 0f       	add	r30, r24
    4cda:	f9 1f       	adc	r31, r25
    4cdc:	e9 5b       	subi	r30, 0xB9	; 185
    4cde:	fd 4f       	sbci	r31, 0xFD	; 253
    4ce0:	80 e8       	ldi	r24, 0x80	; 128
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	02 c0       	rjmp	.+4      	; 0x4cea <physical_plot+0x6e>
    4ce6:	95 95       	asr	r25
    4ce8:	87 95       	ror	r24
    4cea:	3a 95       	dec	r19
    4cec:	e2 f7       	brpl	.-8      	; 0x4ce6 <physical_plot+0x6a>
    4cee:	80 95       	com	r24
    4cf0:	20 81       	ld	r18, Z
    4cf2:	28 23       	and	r18, r24
    4cf4:	20 83       	st	Z, r18
    4cf6:	08 95       	ret

00004cf8 <cube_draw>:


//draw or erase a cube between two points
//This could be sped up a LOT by not using bresenham lines
static void cube_draw(uint8_t x1, uint8_t y1, uint8_t z1, uint8_t x2, uint8_t y2, uint8_t z2, char on_off)
{
    4cf8:	6f 92       	push	r6
    4cfa:	7f 92       	push	r7
    4cfc:	8f 92       	push	r8
    4cfe:	9f 92       	push	r9
    4d00:	af 92       	push	r10
    4d02:	bf 92       	push	r11
    4d04:	cf 92       	push	r12
    4d06:	df 92       	push	r13
    4d08:	ef 92       	push	r14
    4d0a:	ff 92       	push	r15
    4d0c:	0f 93       	push	r16
    4d0e:	1f 93       	push	r17
    4d10:	b8 2e       	mov	r11, r24
    4d12:	a6 2e       	mov	r10, r22
    4d14:	d4 2e       	mov	r13, r20
    4d16:	92 2e       	mov	r9, r18
    4d18:	80 2e       	mov	r8, r16
    4d1a:	7e 2c       	mov	r7, r14
	led_line(x1, y1, z1, x2, y1, z1, on_off);
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	70 e0       	ldi	r23, 0x00	; 0
    4d20:	50 e0       	ldi	r21, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	0a 2d       	mov	r16, r10
    4d26:	10 e0       	ldi	r17, 0x00	; 0
    4d28:	ed 2c       	mov	r14, r13
    4d2a:	ff 24       	eor	r15, r15
    4d2c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x1, y1, z2, x2, y1, z2, on_off);
    4d30:	8b 2d       	mov	r24, r11
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	6a 2d       	mov	r22, r10
    4d36:	70 e0       	ldi	r23, 0x00	; 0
    4d38:	47 2d       	mov	r20, r7
    4d3a:	50 e0       	ldi	r21, 0x00	; 0
    4d3c:	29 2d       	mov	r18, r9
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	e7 2c       	mov	r14, r7
    4d42:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x1, y2, z1, x2, y2, z1, on_off);
    4d46:	8b 2d       	mov	r24, r11
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	68 2d       	mov	r22, r8
    4d4c:	70 e0       	ldi	r23, 0x00	; 0
    4d4e:	4d 2d       	mov	r20, r13
    4d50:	50 e0       	ldi	r21, 0x00	; 0
    4d52:	29 2d       	mov	r18, r9
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	08 2d       	mov	r16, r8
    4d58:	ed 2c       	mov	r14, r13
    4d5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x1, y2, z2, x2, y2, z2, on_off);
    4d5e:	8b 2d       	mov	r24, r11
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	68 2d       	mov	r22, r8
    4d64:	70 e0       	ldi	r23, 0x00	; 0
    4d66:	47 2d       	mov	r20, r7
    4d68:	50 e0       	ldi	r21, 0x00	; 0
    4d6a:	29 2d       	mov	r18, r9
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	e7 2c       	mov	r14, r7
    4d70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	
	led_line(x1, y1, z1, x1, y1, z2, on_off);
    4d74:	8b 2d       	mov	r24, r11
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	6a 2d       	mov	r22, r10
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	4d 2d       	mov	r20, r13
    4d7e:	50 e0       	ldi	r21, 0x00	; 0
    4d80:	2b 2d       	mov	r18, r11
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	0a 2d       	mov	r16, r10
    4d86:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x2, y1, z1, x2, y1, z2, on_off);	
    4d8a:	89 2d       	mov	r24, r9
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	6a 2d       	mov	r22, r10
    4d90:	70 e0       	ldi	r23, 0x00	; 0
    4d92:	4d 2d       	mov	r20, r13
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	29 2d       	mov	r18, r9
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x1, y2, z1, x1, y2, z2, on_off);
    4d9e:	8b 2d       	mov	r24, r11
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	68 2d       	mov	r22, r8
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	4d 2d       	mov	r20, r13
    4da8:	50 e0       	ldi	r21, 0x00	; 0
    4daa:	2b 2d       	mov	r18, r11
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	08 2d       	mov	r16, r8
    4db0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x2, y2, z1, x2, y2, z2, on_off);	
    4db4:	89 2d       	mov	r24, r9
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	68 2d       	mov	r22, r8
    4dba:	70 e0       	ldi	r23, 0x00	; 0
    4dbc:	4d 2d       	mov	r20, r13
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	29 2d       	mov	r18, r9
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(x1, y1, z1, x1, y2, z1, on_off);
    4dc8:	8b 2d       	mov	r24, r11
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	6a 2d       	mov	r22, r10
    4dce:	70 e0       	ldi	r23, 0x00	; 0
    4dd0:	4d 2d       	mov	r20, r13
    4dd2:	50 e0       	ldi	r21, 0x00	; 0
    4dd4:	2b 2d       	mov	r18, r11
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	ed 2c       	mov	r14, r13
    4dda:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x2, y1, z1, x2, y2, z1, on_off);
    4dde:	89 2d       	mov	r24, r9
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	6a 2d       	mov	r22, r10
    4de4:	70 e0       	ldi	r23, 0x00	; 0
    4de6:	4d 2d       	mov	r20, r13
    4de8:	50 e0       	ldi	r21, 0x00	; 0
    4dea:	29 2d       	mov	r18, r9
    4dec:	30 e0       	ldi	r19, 0x00	; 0
    4dee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x1, y1, z2, x1, y2, z2, on_off);
    4df2:	8b 2d       	mov	r24, r11
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	6a 2d       	mov	r22, r10
    4df8:	70 e0       	ldi	r23, 0x00	; 0
    4dfa:	47 2d       	mov	r20, r7
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	2b 2d       	mov	r18, r11
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	e7 2c       	mov	r14, r7
    4e04:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(x2, y1, z2, x2, y2, z2, on_off);
    4e08:	89 2d       	mov	r24, r9
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	6a 2d       	mov	r22, r10
    4e0e:	70 e0       	ldi	r23, 0x00	; 0
    4e10:	47 2d       	mov	r20, r7
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	29 2d       	mov	r18, r9
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
}
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	bf 90       	pop	r11
    4e2a:	af 90       	pop	r10
    4e2c:	9f 90       	pop	r9
    4e2e:	8f 90       	pop	r8
    4e30:	7f 90       	pop	r7
    4e32:	6f 90       	pop	r6
    4e34:	08 95       	ret

00004e36 <pattern_text1_P>:
		led_waitframe(1);
	};
}

void pattern_text1_P(PGM_P text)
{
    4e36:	cf 92       	push	r12
    4e38:	df 92       	push	r13
    4e3a:	ef 92       	push	r14
    4e3c:	ff 92       	push	r15
    4e3e:	0f 93       	push	r16
    4e40:	1f 93       	push	r17
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	ec 01       	movw	r28, r24
	uint8_t finished=0;
	
	fallout=FALSE;
    4e48:	10 92 f4 01 	sts	0x01F4, r1
	
	led_framerate(TEXT1_FRAMERATE);
    4e4c:	84 e6       	ldi	r24, 0x64	; 100
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    4e54:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    4e58:	8f ef       	ldi	r24, 0xFF	; 255
    4e5a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>

	text_set_P(text);	
    4e5e:	ce 01       	movw	r24, r28
    4e60:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    4e64:	dd 24       	eor	r13, r13
    4e66:	32 c0       	rjmp	.+100    	; 0x4ecc <pattern_text1_P+0x96>
	while(!fallout && finished!=15)
	{
		if(text_isfinished())
    4e68:	0e 94 51 24 	call	0x48a2	; 0x48a2 <text_isfinished>
    4e6c:	88 23       	and	r24, r24
    4e6e:	89 f0       	breq	.+34     	; 0x4e92 <pattern_text1_P+0x5c>
		{
			if(!duration || time)
    4e70:	80 91 f5 01 	lds	r24, 0x01F5
    4e74:	90 91 f6 01 	lds	r25, 0x01F6
    4e78:	89 2b       	or	r24, r25
    4e7a:	31 f0       	breq	.+12     	; 0x4e88 <pattern_text1_P+0x52>
    4e7c:	80 91 0a 02 	lds	r24, 0x020A
    4e80:	90 91 0b 02 	lds	r25, 0x020B
    4e84:	89 2b       	or	r24, r25
    4e86:	21 f0       	breq	.+8      	; 0x4e90 <pattern_text1_P+0x5a>
				text_set_P(text);
    4e88:	ce 01       	movw	r24, r28
    4e8a:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    4e8e:	01 c0       	rjmp	.+2      	; 0x4e92 <pattern_text1_P+0x5c>
			else
				finished++;
    4e90:	d3 94       	inc	r13
		};
		if(finished==0)
    4e92:	dd 20       	and	r13, r13
    4e94:	29 f4       	brne	.+10     	; 0x4ea0 <pattern_text1_P+0x6a>
			text_draw_y(7, 1, 7);
    4e96:	87 e0       	ldi	r24, 0x07	; 7
    4e98:	61 e0       	ldi	r22, 0x01	; 1
    4e9a:	47 e0       	ldi	r20, 0x07	; 7
    4e9c:	0e 94 02 25 	call	0x4a04	; 0x4a04 <text_draw_y>
		led_perimeter_left();
    4ea0:	0e 94 a4 22 	call	0x4548	; 0x4548 <led_perimeter_left>
		led_line(0, 0, 1, 0, 7, 1, FALSE);		
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	60 e0       	ldi	r22, 0x00	; 0
    4eaa:	70 e0       	ldi	r23, 0x00	; 0
    4eac:	41 e0       	ldi	r20, 0x01	; 1
    4eae:	50 e0       	ldi	r21, 0x00	; 0
    4eb0:	20 e0       	ldi	r18, 0x00	; 0
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	07 e0       	ldi	r16, 0x07	; 7
    4eb6:	10 e0       	ldi	r17, 0x00	; 0
    4eb8:	e1 e0       	ldi	r30, 0x01	; 1
    4eba:	ee 2e       	mov	r14, r30
    4ebc:	f1 2c       	mov	r15, r1
    4ebe:	cc 24       	eor	r12, r12
    4ec0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
		led_waitframe(TEXT1_FRAMESTEP);
    4ec4:	86 e0       	ldi	r24, 0x06	; 6
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	led_framerate(TEXT1_FRAMERATE);
	led_blank();
	led_plane_intensity_all(255);	

	text_set_P(text);	
	while(!fallout && finished!=15)
    4ecc:	80 91 f4 01 	lds	r24, 0x01F4
    4ed0:	88 23       	and	r24, r24
    4ed2:	19 f4       	brne	.+6      	; 0x4eda <pattern_text1_P+0xa4>
    4ed4:	8f e0       	ldi	r24, 0x0F	; 15
    4ed6:	d8 16       	cp	r13, r24
    4ed8:	39 f6       	brne	.-114    	; 0x4e68 <pattern_text1_P+0x32>
			text_draw_y(7, 1, 7);
		led_perimeter_left();
		led_line(0, 0, 1, 0, 7, 1, FALSE);		
		led_waitframe(TEXT1_FRAMESTEP);
	};
}
    4eda:	df 91       	pop	r29
    4edc:	cf 91       	pop	r28
    4ede:	1f 91       	pop	r17
    4ee0:	0f 91       	pop	r16
    4ee2:	ff 90       	pop	r15
    4ee4:	ef 90       	pop	r14
    4ee6:	df 90       	pop	r13
    4ee8:	cf 90       	pop	r12
    4eea:	08 95       	ret

00004eec <pattern_cube_stretch>:
	}
	led_blank();
}

void pattern_cube_stretch(void)
{
    4eec:	8f 92       	push	r8
    4eee:	9f 92       	push	r9
    4ef0:	af 92       	push	r10
    4ef2:	bf 92       	push	r11
    4ef4:	cf 92       	push	r12
    4ef6:	df 92       	push	r13
    4ef8:	ef 92       	push	r14
    4efa:	ff 92       	push	r15
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
	uint8_t index;
	uint8_t x1, y1, z1, x2, y2, z2;

	fallout=FALSE;
    4f00:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    4f04:	80 91 f5 01 	lds	r24, 0x01F5
    4f08:	90 91 f6 01 	lds	r25, 0x01F6
    4f0c:	90 93 0b 02 	sts	0x020B, r25
    4f10:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(CUBE_STRETCH_FRAMERATE);
    4f14:	82 e3       	ldi	r24, 0x32	; 50
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    4f1c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    4f20:	8f ef       	ldi	r24, 0xFF	; 255
    4f22:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>

	//begin in center
	x1=3;y1=3;z1=3;
	x2=4;y2=4;z2=4;
	cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    4f26:	83 e0       	ldi	r24, 0x03	; 3
    4f28:	63 e0       	ldi	r22, 0x03	; 3
    4f2a:	43 e0       	ldi	r20, 0x03	; 3
    4f2c:	24 e0       	ldi	r18, 0x04	; 4
    4f2e:	04 e0       	ldi	r16, 0x04	; 4
    4f30:	94 e0       	ldi	r25, 0x04	; 4
    4f32:	e9 2e       	mov	r14, r25
    4f34:	cc 24       	eor	r12, r12
    4f36:	c3 94       	inc	r12
    4f38:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
	led_waitframe(CUBE_STRETCH_FRAMESTEP);
    4f3c:	83 e0       	ldi	r24, 0x03	; 3
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    4f44:	13 e0       	ldi	r17, 0x03	; 3
    4f46:	84 e0       	ldi	r24, 0x04	; 4
    4f48:	f8 2e       	mov	r15, r24
    4f4a:	12 c0       	rjmp	.+36     	; 0x4f70 <pattern_cube_stretch+0x84>

	//expand out from center
	index=3;
	while(!fallout && (!duration || time) && index--)
    4f4c:	11 50       	subi	r17, 0x01	; 1
	{
		led_blank();
    4f4e:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
		x1--;y1--;z1--;
		x2++;y2++;z2++;
    4f52:	f3 94       	inc	r15
		cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    4f54:	81 2f       	mov	r24, r17
    4f56:	61 2f       	mov	r22, r17
    4f58:	41 2f       	mov	r20, r17
    4f5a:	2f 2d       	mov	r18, r15
    4f5c:	0f 2d       	mov	r16, r15
    4f5e:	ef 2c       	mov	r14, r15
    4f60:	cc 24       	eor	r12, r12
    4f62:	c3 94       	inc	r12
    4f64:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
		led_waitframe(CUBE_STRETCH_FRAMESTEP);
    4f68:	83 e0       	ldi	r24, 0x03	; 3
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
	led_waitframe(CUBE_STRETCH_FRAMESTEP);

	//expand out from center
	index=3;
	while(!fallout && (!duration || time) && index--)
    4f70:	80 91 f4 01 	lds	r24, 0x01F4
    4f74:	88 23       	and	r24, r24
    4f76:	89 f4       	brne	.+34     	; 0x4f9a <pattern_cube_stretch+0xae>
    4f78:	80 91 f5 01 	lds	r24, 0x01F5
    4f7c:	90 91 f6 01 	lds	r25, 0x01F6
    4f80:	89 2b       	or	r24, r25
    4f82:	31 f0       	breq	.+12     	; 0x4f90 <pattern_cube_stretch+0xa4>
    4f84:	80 91 0a 02 	lds	r24, 0x020A
    4f88:	90 91 0b 02 	lds	r25, 0x020B
    4f8c:	89 2b       	or	r24, r25
    4f8e:	29 f0       	breq	.+10     	; 0x4f9a <pattern_cube_stretch+0xae>
    4f90:	11 23       	and	r17, r17
    4f92:	e1 f6       	brne	.-72     	; 0x4f4c <pattern_cube_stretch+0x60>
    4f94:	dd 24       	eor	r13, r13
    4f96:	bb 24       	eor	r11, r11
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <pattern_cube_stretch+0xb2>
    4f9a:	d1 2e       	mov	r13, r17
    4f9c:	b1 2e       	mov	r11, r17
    4f9e:	9f 2c       	mov	r9, r15
    4fa0:	af 2c       	mov	r10, r15
    4fa2:	df c1       	rjmp	.+958    	; 0x5362 <pattern_cube_stretch+0x476>
	{
		//scrunch left top front corner to right bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    4fa4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1++;y1++;z1++;
    4fa8:	1f 5f       	subi	r17, 0xFF	; 255
    4faa:	d3 94       	inc	r13
    4fac:	b3 94       	inc	r11
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    4fae:	81 2f       	mov	r24, r17
    4fb0:	6d 2d       	mov	r22, r13
    4fb2:	4b 2d       	mov	r20, r11
    4fb4:	2f 2d       	mov	r18, r15
    4fb6:	0a 2d       	mov	r16, r10
    4fb8:	e9 2c       	mov	r14, r9
    4fba:	cc 24       	eor	r12, r12
    4fbc:	c3 94       	inc	r12
    4fbe:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    4fc2:	83 e0       	ldi	r24, 0x03	; 3
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <pattern_cube_stretch+0xe6>
	//running process
	while(!fallout && (!duration || time))
	{
		//scrunch left top front corner to right bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    4fcc:	06 e0       	ldi	r16, 0x06	; 6
    4fce:	80 2e       	mov	r8, r16
    4fd0:	81 0e       	add	r8, r17
    4fd2:	80 91 f4 01 	lds	r24, 0x01F4
    4fd6:	88 23       	and	r24, r24
    4fd8:	21 f0       	breq	.+8      	; 0x4fe2 <pattern_cube_stretch+0xf6>
			x1++;y1++;z1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    4fda:	ba ef       	ldi	r27, 0xFA	; 250
    4fdc:	8b 2e       	mov	r8, r27
    4fde:	81 0e       	add	r8, r17
    4fe0:	16 c0       	rjmp	.+44     	; 0x500e <pattern_cube_stretch+0x122>
	//running process
	while(!fallout && (!duration || time))
	{
		//scrunch left top front corner to right bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    4fe2:	18 15       	cp	r17, r8
    4fe4:	f9 f6       	brne	.-66     	; 0x4fa4 <pattern_cube_stretch+0xb8>
    4fe6:	f9 cf       	rjmp	.-14     	; 0x4fda <pattern_cube_stretch+0xee>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    4fe8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1--;y1--;z1--;
    4fec:	11 50       	subi	r17, 0x01	; 1
    4fee:	da 94       	dec	r13
    4ff0:	ba 94       	dec	r11
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    4ff2:	81 2f       	mov	r24, r17
    4ff4:	6d 2d       	mov	r22, r13
    4ff6:	4b 2d       	mov	r20, r11
    4ff8:	2f 2d       	mov	r18, r15
    4ffa:	0a 2d       	mov	r16, r10
    4ffc:	e9 2c       	mov	r14, r9
    4ffe:	cc 24       	eor	r12, r12
    5000:	c3 94       	inc	r12
    5002:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    5006:	83 e0       	ldi	r24, 0x03	; 3
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			x1++;y1++;z1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    500e:	80 91 f4 01 	lds	r24, 0x01F4
    5012:	88 23       	and	r24, r24
    5014:	21 f0       	breq	.+8      	; 0x501e <pattern_cube_stretch+0x132>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch right bottom back corner to left top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    5016:	aa ef       	ldi	r26, 0xFA	; 250
    5018:	8a 2e       	mov	r8, r26
    501a:	8f 0c       	add	r8, r15
    501c:	16 c0       	rjmp	.+44     	; 0x504a <pattern_cube_stretch+0x15e>
			x1++;y1++;z1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    501e:	18 15       	cp	r17, r8
    5020:	19 f7       	brne	.-58     	; 0x4fe8 <pattern_cube_stretch+0xfc>
    5022:	f9 cf       	rjmp	.-14     	; 0x5016 <pattern_cube_stretch+0x12a>

		//scrunch right bottom back corner to left top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5024:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x2--;y2--;z2--;
    5028:	fa 94       	dec	r15
    502a:	aa 94       	dec	r10
    502c:	9a 94       	dec	r9
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    502e:	81 2f       	mov	r24, r17
    5030:	6d 2d       	mov	r22, r13
    5032:	4b 2d       	mov	r20, r11
    5034:	2f 2d       	mov	r18, r15
    5036:	0a 2d       	mov	r16, r10
    5038:	e9 2c       	mov	r14, r9
    503a:	cc 24       	eor	r12, r12
    503c:	c3 94       	inc	r12
    503e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    5042:	83 e0       	ldi	r24, 0x03	; 3
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch right bottom back corner to left top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    504a:	80 91 f4 01 	lds	r24, 0x01F4
    504e:	88 23       	and	r24, r24
    5050:	21 f0       	breq	.+8      	; 0x505a <pattern_cube_stretch+0x16e>
			x2--;y2--;z2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5052:	f6 e0       	ldi	r31, 0x06	; 6
    5054:	8f 2e       	mov	r8, r31
    5056:	8f 0c       	add	r8, r15
    5058:	16 c0       	rjmp	.+44     	; 0x5086 <pattern_cube_stretch+0x19a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch right bottom back corner to left top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    505a:	f8 14       	cp	r15, r8
    505c:	19 f7       	brne	.-58     	; 0x5024 <pattern_cube_stretch+0x138>
    505e:	f9 cf       	rjmp	.-14     	; 0x5052 <pattern_cube_stretch+0x166>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5060:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x2++;y2++;z2++;
    5064:	f3 94       	inc	r15
    5066:	a3 94       	inc	r10
    5068:	93 94       	inc	r9
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    506a:	81 2f       	mov	r24, r17
    506c:	6d 2d       	mov	r22, r13
    506e:	4b 2d       	mov	r20, r11
    5070:	2f 2d       	mov	r18, r15
    5072:	0a 2d       	mov	r16, r10
    5074:	e9 2c       	mov	r14, r9
    5076:	cc 24       	eor	r12, r12
    5078:	c3 94       	inc	r12
    507a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    507e:	83 e0       	ldi	r24, 0x03	; 3
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			x2--;y2--;z2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5086:	80 91 f4 01 	lds	r24, 0x01F4
    508a:	88 23       	and	r24, r24
    508c:	b9 f4       	brne	.+46     	; 0x50bc <pattern_cube_stretch+0x1d0>
    508e:	f8 14       	cp	r15, r8
    5090:	39 f7       	brne	.-50     	; 0x5060 <pattern_cube_stretch+0x174>
    5092:	14 c0       	rjmp	.+40     	; 0x50bc <pattern_cube_stretch+0x1d0>

		//scrunch right top front corner to left bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5094:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y1++;z1++;
    5098:	d3 94       	inc	r13
    509a:	b3 94       	inc	r11
			x2--;
    509c:	fa 94       	dec	r15
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    509e:	81 2f       	mov	r24, r17
    50a0:	6d 2d       	mov	r22, r13
    50a2:	4b 2d       	mov	r20, r11
    50a4:	2f 2d       	mov	r18, r15
    50a6:	0a 2d       	mov	r16, r10
    50a8:	e9 2c       	mov	r14, r9
    50aa:	cc 24       	eor	r12, r12
    50ac:	c3 94       	inc	r12
    50ae:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    50b2:	83 e0       	ldi	r24, 0x03	; 3
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    50ba:	03 c0       	rjmp	.+6      	; 0x50c2 <pattern_cube_stretch+0x1d6>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch right top front corner to left bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    50bc:	e6 e0       	ldi	r30, 0x06	; 6
    50be:	8e 2e       	mov	r8, r30
    50c0:	8d 0c       	add	r8, r13
    50c2:	80 91 f4 01 	lds	r24, 0x01F4
    50c6:	88 23       	and	r24, r24
    50c8:	21 f0       	breq	.+8      	; 0x50d2 <pattern_cube_stretch+0x1e6>
			x2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    50ca:	7a ef       	ldi	r23, 0xFA	; 250
    50cc:	87 2e       	mov	r8, r23
    50ce:	8d 0c       	add	r8, r13
    50d0:	16 c0       	rjmp	.+44     	; 0x50fe <pattern_cube_stretch+0x212>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch right top front corner to left bottom back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    50d2:	d8 14       	cp	r13, r8
    50d4:	f9 f6       	brne	.-66     	; 0x5094 <pattern_cube_stretch+0x1a8>
    50d6:	f9 cf       	rjmp	.-14     	; 0x50ca <pattern_cube_stretch+0x1de>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    50d8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y1--;z1--;
    50dc:	da 94       	dec	r13
    50de:	ba 94       	dec	r11
			x2++;
    50e0:	f3 94       	inc	r15
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    50e2:	81 2f       	mov	r24, r17
    50e4:	6d 2d       	mov	r22, r13
    50e6:	4b 2d       	mov	r20, r11
    50e8:	2f 2d       	mov	r18, r15
    50ea:	0a 2d       	mov	r16, r10
    50ec:	e9 2c       	mov	r14, r9
    50ee:	cc 24       	eor	r12, r12
    50f0:	c3 94       	inc	r12
    50f2:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    50f6:	83 e0       	ldi	r24, 0x03	; 3
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			x2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    50fe:	80 91 f4 01 	lds	r24, 0x01F4
    5102:	88 23       	and	r24, r24
    5104:	b9 f4       	brne	.+46     	; 0x5134 <pattern_cube_stretch+0x248>
    5106:	d8 14       	cp	r13, r8
    5108:	39 f7       	brne	.-50     	; 0x50d8 <pattern_cube_stretch+0x1ec>
    510a:	14 c0       	rjmp	.+40     	; 0x5134 <pattern_cube_stretch+0x248>

		//scrunch left top back corner to right bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    510c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1++;y1++;
    5110:	1f 5f       	subi	r17, 0xFF	; 255
    5112:	d3 94       	inc	r13
			z2--;
    5114:	9a 94       	dec	r9
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    5116:	81 2f       	mov	r24, r17
    5118:	6d 2d       	mov	r22, r13
    511a:	4b 2d       	mov	r20, r11
    511c:	2f 2d       	mov	r18, r15
    511e:	0a 2d       	mov	r16, r10
    5120:	e9 2c       	mov	r14, r9
    5122:	cc 24       	eor	r12, r12
    5124:	c3 94       	inc	r12
    5126:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    512a:	83 e0       	ldi	r24, 0x03	; 3
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5132:	03 c0       	rjmp	.+6      	; 0x513a <pattern_cube_stretch+0x24e>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch left top back corner to right bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    5134:	66 e0       	ldi	r22, 0x06	; 6
    5136:	86 2e       	mov	r8, r22
    5138:	81 0e       	add	r8, r17
    513a:	80 91 f4 01 	lds	r24, 0x01F4
    513e:	88 23       	and	r24, r24
    5140:	21 f0       	breq	.+8      	; 0x514a <pattern_cube_stretch+0x25e>
			z2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5142:	5a ef       	ldi	r21, 0xFA	; 250
    5144:	85 2e       	mov	r8, r21
    5146:	81 0e       	add	r8, r17
    5148:	16 c0       	rjmp	.+44     	; 0x5176 <pattern_cube_stretch+0x28a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch left top back corner to right bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    514a:	18 15       	cp	r17, r8
    514c:	f9 f6       	brne	.-66     	; 0x510c <pattern_cube_stretch+0x220>
    514e:	f9 cf       	rjmp	.-14     	; 0x5142 <pattern_cube_stretch+0x256>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5150:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1--;y1--;
    5154:	11 50       	subi	r17, 0x01	; 1
    5156:	da 94       	dec	r13
			z2++;
    5158:	93 94       	inc	r9
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    515a:	81 2f       	mov	r24, r17
    515c:	6d 2d       	mov	r22, r13
    515e:	4b 2d       	mov	r20, r11
    5160:	2f 2d       	mov	r18, r15
    5162:	0a 2d       	mov	r16, r10
    5164:	e9 2c       	mov	r14, r9
    5166:	cc 24       	eor	r12, r12
    5168:	c3 94       	inc	r12
    516a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    516e:	83 e0       	ldi	r24, 0x03	; 3
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			z2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5176:	80 91 f4 01 	lds	r24, 0x01F4
    517a:	88 23       	and	r24, r24
    517c:	21 f0       	breq	.+8      	; 0x5186 <pattern_cube_stretch+0x29a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch left bottom front corner to right top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    517e:	46 e0       	ldi	r20, 0x06	; 6
    5180:	84 2e       	mov	r8, r20
    5182:	81 0e       	add	r8, r17
    5184:	16 c0       	rjmp	.+44     	; 0x51b2 <pattern_cube_stretch+0x2c6>
			z2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5186:	18 15       	cp	r17, r8
    5188:	19 f7       	brne	.-58     	; 0x5150 <pattern_cube_stretch+0x264>
    518a:	f9 cf       	rjmp	.-14     	; 0x517e <pattern_cube_stretch+0x292>
		
		//scrunch left bottom front corner to right top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    518c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1++;z1++;
    5190:	1f 5f       	subi	r17, 0xFF	; 255
    5192:	b3 94       	inc	r11
			y2--;
    5194:	aa 94       	dec	r10
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    5196:	81 2f       	mov	r24, r17
    5198:	6d 2d       	mov	r22, r13
    519a:	4b 2d       	mov	r20, r11
    519c:	2f 2d       	mov	r18, r15
    519e:	0a 2d       	mov	r16, r10
    51a0:	e9 2c       	mov	r14, r9
    51a2:	cc 24       	eor	r12, r12
    51a4:	c3 94       	inc	r12
    51a6:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    51aa:	83 e0       	ldi	r24, 0x03	; 3
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch left bottom front corner to right top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    51b2:	80 91 f4 01 	lds	r24, 0x01F4
    51b6:	88 23       	and	r24, r24
    51b8:	21 f0       	breq	.+8      	; 0x51c2 <pattern_cube_stretch+0x2d6>
			y2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    51ba:	3a ef       	ldi	r19, 0xFA	; 250
    51bc:	83 2e       	mov	r8, r19
    51be:	81 0e       	add	r8, r17
    51c0:	16 c0       	rjmp	.+44     	; 0x51ee <pattern_cube_stretch+0x302>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch left bottom front corner to right top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    51c2:	18 15       	cp	r17, r8
    51c4:	19 f7       	brne	.-58     	; 0x518c <pattern_cube_stretch+0x2a0>
    51c6:	f9 cf       	rjmp	.-14     	; 0x51ba <pattern_cube_stretch+0x2ce>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    51c8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x1--;z1--;
    51cc:	11 50       	subi	r17, 0x01	; 1
    51ce:	ba 94       	dec	r11
			y2++;
    51d0:	a3 94       	inc	r10
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    51d2:	81 2f       	mov	r24, r17
    51d4:	6d 2d       	mov	r22, r13
    51d6:	4b 2d       	mov	r20, r11
    51d8:	2f 2d       	mov	r18, r15
    51da:	0a 2d       	mov	r16, r10
    51dc:	e9 2c       	mov	r14, r9
    51de:	cc 24       	eor	r12, r12
    51e0:	c3 94       	inc	r12
    51e2:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    51e6:	83 e0       	ldi	r24, 0x03	; 3
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			y2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    51ee:	80 91 f4 01 	lds	r24, 0x01F4
    51f2:	88 23       	and	r24, r24
    51f4:	21 f0       	breq	.+8      	; 0x51fe <pattern_cube_stretch+0x312>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch right top back corner to left bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    51f6:	26 e0       	ldi	r18, 0x06	; 6
    51f8:	82 2e       	mov	r8, r18
    51fa:	8d 0c       	add	r8, r13
    51fc:	16 c0       	rjmp	.+44     	; 0x522a <pattern_cube_stretch+0x33e>
			y2--;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    51fe:	18 15       	cp	r17, r8
    5200:	19 f7       	brne	.-58     	; 0x51c8 <pattern_cube_stretch+0x2dc>
    5202:	f9 cf       	rjmp	.-14     	; 0x51f6 <pattern_cube_stretch+0x30a>
		
		//scrunch right top back corner to left bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5204:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x2--;z2--;
    5208:	fa 94       	dec	r15
    520a:	9a 94       	dec	r9
			y1++;
    520c:	d3 94       	inc	r13
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    520e:	81 2f       	mov	r24, r17
    5210:	6d 2d       	mov	r22, r13
    5212:	4b 2d       	mov	r20, r11
    5214:	2f 2d       	mov	r18, r15
    5216:	0a 2d       	mov	r16, r10
    5218:	e9 2c       	mov	r14, r9
    521a:	cc 24       	eor	r12, r12
    521c:	c3 94       	inc	r12
    521e:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    5222:	83 e0       	ldi	r24, 0x03	; 3
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch right top back corner to left bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    522a:	80 91 f4 01 	lds	r24, 0x01F4
    522e:	88 23       	and	r24, r24
    5230:	21 f0       	breq	.+8      	; 0x523a <pattern_cube_stretch+0x34e>
			y1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5232:	9a ef       	ldi	r25, 0xFA	; 250
    5234:	89 2e       	mov	r8, r25
    5236:	8d 0c       	add	r8, r13
    5238:	16 c0       	rjmp	.+44     	; 0x5266 <pattern_cube_stretch+0x37a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch right top back corner to left bottom front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    523a:	d8 14       	cp	r13, r8
    523c:	19 f7       	brne	.-58     	; 0x5204 <pattern_cube_stretch+0x318>
    523e:	f9 cf       	rjmp	.-14     	; 0x5232 <pattern_cube_stretch+0x346>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5240:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			x2++;z2++;
    5244:	f3 94       	inc	r15
    5246:	93 94       	inc	r9
			y1--;
    5248:	da 94       	dec	r13
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    524a:	81 2f       	mov	r24, r17
    524c:	6d 2d       	mov	r22, r13
    524e:	4b 2d       	mov	r20, r11
    5250:	2f 2d       	mov	r18, r15
    5252:	0a 2d       	mov	r16, r10
    5254:	e9 2c       	mov	r14, r9
    5256:	cc 24       	eor	r12, r12
    5258:	c3 94       	inc	r12
    525a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    525e:	83 e0       	ldi	r24, 0x03	; 3
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			y1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5266:	80 91 f4 01 	lds	r24, 0x01F4
    526a:	88 23       	and	r24, r24
    526c:	21 f0       	breq	.+8      	; 0x5276 <pattern_cube_stretch+0x38a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch left bottom back corner to right top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    526e:	86 e0       	ldi	r24, 0x06	; 6
    5270:	88 2e       	mov	r8, r24
    5272:	81 0e       	add	r8, r17
    5274:	16 c0       	rjmp	.+44     	; 0x52a2 <pattern_cube_stretch+0x3b6>
			y1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5276:	d8 14       	cp	r13, r8
    5278:	19 f7       	brne	.-58     	; 0x5240 <pattern_cube_stretch+0x354>
    527a:	f9 cf       	rjmp	.-14     	; 0x526e <pattern_cube_stretch+0x382>

		//scrunch left bottom back corner to right top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    527c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y2--;z2--;
    5280:	aa 94       	dec	r10
    5282:	9a 94       	dec	r9
			x1++;
    5284:	1f 5f       	subi	r17, 0xFF	; 255
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    5286:	81 2f       	mov	r24, r17
    5288:	6d 2d       	mov	r22, r13
    528a:	4b 2d       	mov	r20, r11
    528c:	2f 2d       	mov	r18, r15
    528e:	0a 2d       	mov	r16, r10
    5290:	e9 2c       	mov	r14, r9
    5292:	cc 24       	eor	r12, r12
    5294:	c3 94       	inc	r12
    5296:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    529a:	83 e0       	ldi	r24, 0x03	; 3
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch left bottom back corner to right top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    52a2:	80 91 f4 01 	lds	r24, 0x01F4
    52a6:	88 23       	and	r24, r24
    52a8:	21 f0       	breq	.+8      	; 0x52b2 <pattern_cube_stretch+0x3c6>
			x1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    52aa:	0a ef       	ldi	r16, 0xFA	; 250
    52ac:	80 2e       	mov	r8, r16
    52ae:	81 0e       	add	r8, r17
    52b0:	16 c0       	rjmp	.+44     	; 0x52de <pattern_cube_stretch+0x3f2>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};

		//scrunch left bottom back corner to right top front corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    52b2:	18 15       	cp	r17, r8
    52b4:	19 f7       	brne	.-58     	; 0x527c <pattern_cube_stretch+0x390>
    52b6:	f9 cf       	rjmp	.-14     	; 0x52aa <pattern_cube_stretch+0x3be>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    52b8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y2++;z2++;
    52bc:	a3 94       	inc	r10
    52be:	93 94       	inc	r9
			x1--;
    52c0:	11 50       	subi	r17, 0x01	; 1
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    52c2:	81 2f       	mov	r24, r17
    52c4:	6d 2d       	mov	r22, r13
    52c6:	4b 2d       	mov	r20, r11
    52c8:	2f 2d       	mov	r18, r15
    52ca:	0a 2d       	mov	r16, r10
    52cc:	e9 2c       	mov	r14, r9
    52ce:	cc 24       	eor	r12, r12
    52d0:	c3 94       	inc	r12
    52d2:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    52d6:	83 e0       	ldi	r24, 0x03	; 3
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			x1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    52de:	80 91 f4 01 	lds	r24, 0x01F4
    52e2:	88 23       	and	r24, r24
    52e4:	b9 f4       	brne	.+46     	; 0x5314 <pattern_cube_stretch+0x428>
    52e6:	18 15       	cp	r17, r8
    52e8:	39 f7       	brne	.-50     	; 0x52b8 <pattern_cube_stretch+0x3cc>
    52ea:	14 c0       	rjmp	.+40     	; 0x5314 <pattern_cube_stretch+0x428>
		
		//scrunch right bottom front corner to left top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    52ec:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y2--;x2--;
    52f0:	aa 94       	dec	r10
    52f2:	fa 94       	dec	r15
			z1++;
    52f4:	b3 94       	inc	r11
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    52f6:	81 2f       	mov	r24, r17
    52f8:	6d 2d       	mov	r22, r13
    52fa:	4b 2d       	mov	r20, r11
    52fc:	2f 2d       	mov	r18, r15
    52fe:	0a 2d       	mov	r16, r10
    5300:	e9 2c       	mov	r14, r9
    5302:	cc 24       	eor	r12, r12
    5304:	c3 94       	inc	r12
    5306:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    530a:	83 e0       	ldi	r24, 0x03	; 3
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5312:	03 c0       	rjmp	.+6      	; 0x531a <pattern_cube_stretch+0x42e>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch right bottom front corner to left top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    5314:	ba ef       	ldi	r27, 0xFA	; 250
    5316:	8b 2e       	mov	r8, r27
    5318:	8f 0c       	add	r8, r15
    531a:	80 91 f4 01 	lds	r24, 0x01F4
    531e:	88 23       	and	r24, r24
    5320:	21 f0       	breq	.+8      	; 0x532a <pattern_cube_stretch+0x43e>
			z1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5322:	a6 e0       	ldi	r26, 0x06	; 6
    5324:	8a 2e       	mov	r8, r26
    5326:	8f 0c       	add	r8, r15
    5328:	16 c0       	rjmp	.+44     	; 0x5356 <pattern_cube_stretch+0x46a>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		
		//scrunch right bottom front corner to left top back corner, then expand it back out to a full cube
		index=6;
		while(!fallout && index--)
    532a:	f8 14       	cp	r15, r8
    532c:	f9 f6       	brne	.-66     	; 0x52ec <pattern_cube_stretch+0x400>
    532e:	f9 cf       	rjmp	.-14     	; 0x5322 <pattern_cube_stretch+0x436>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
		{
			led_blank();
    5330:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			y2++;x2++;
    5334:	a3 94       	inc	r10
    5336:	f3 94       	inc	r15
			z1--;
    5338:	ba 94       	dec	r11
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    533a:	81 2f       	mov	r24, r17
    533c:	6d 2d       	mov	r22, r13
    533e:	4b 2d       	mov	r20, r11
    5340:	2f 2d       	mov	r18, r15
    5342:	0a 2d       	mov	r16, r10
    5344:	e9 2c       	mov	r14, r9
    5346:	cc 24       	eor	r12, r12
    5348:	c3 94       	inc	r12
    534a:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
    534e:	83 e0       	ldi	r24, 0x03	; 3
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			z1++;
			cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
			led_waitframe(CUBE_STRETCH_FRAMESTEP);
		};
		index=6;
		while(!fallout && index--)
    5356:	80 91 f4 01 	lds	r24, 0x01F4
    535a:	88 23       	and	r24, r24
    535c:	11 f4       	brne	.+4      	; 0x5362 <pattern_cube_stretch+0x476>
    535e:	f8 14       	cp	r15, r8
    5360:	39 f7       	brne	.-50     	; 0x5330 <pattern_cube_stretch+0x444>
		cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
		led_waitframe(CUBE_STRETCH_FRAMESTEP);
	};

	//running process
	while(!fallout && (!duration || time))
    5362:	80 91 f4 01 	lds	r24, 0x01F4
    5366:	88 23       	and	r24, r24
    5368:	21 f0       	breq	.+8      	; 0x5372 <pattern_cube_stretch+0x486>
		};
	};

	//contract back in
	index=3;
	while(!fallout && index--)
    536a:	f3 e0       	ldi	r31, 0x03	; 3
    536c:	8f 2e       	mov	r8, r31
    536e:	81 0e       	add	r8, r17
    5370:	25 c0       	rjmp	.+74     	; 0x53bc <pattern_cube_stretch+0x4d0>
		cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
		led_waitframe(CUBE_STRETCH_FRAMESTEP);
	};

	//running process
	while(!fallout && (!duration || time))
    5372:	80 91 f5 01 	lds	r24, 0x01F5
    5376:	90 91 f6 01 	lds	r25, 0x01F6
    537a:	89 2b       	or	r24, r25
    537c:	09 f4       	brne	.+2      	; 0x5380 <pattern_cube_stretch+0x494>
    537e:	26 ce       	rjmp	.-948    	; 0x4fcc <pattern_cube_stretch+0xe0>
    5380:	80 91 0a 02 	lds	r24, 0x020A
    5384:	90 91 0b 02 	lds	r25, 0x020B
    5388:	89 2b       	or	r24, r25
    538a:	09 f0       	breq	.+2      	; 0x538e <pattern_cube_stretch+0x4a2>
    538c:	1f ce       	rjmp	.-962    	; 0x4fcc <pattern_cube_stretch+0xe0>
    538e:	ed cf       	rjmp	.-38     	; 0x536a <pattern_cube_stretch+0x47e>

	//contract back in
	index=3;
	while(!fallout && index--)
	{
		led_blank();
    5390:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
		x1++;y1++;z1++;
    5394:	1f 5f       	subi	r17, 0xFF	; 255
    5396:	d3 94       	inc	r13
    5398:	b3 94       	inc	r11
		x2--;y2--;z2--;
    539a:	fa 94       	dec	r15
    539c:	aa 94       	dec	r10
    539e:	9a 94       	dec	r9
		cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
    53a0:	81 2f       	mov	r24, r17
    53a2:	6d 2d       	mov	r22, r13
    53a4:	4b 2d       	mov	r20, r11
    53a6:	2f 2d       	mov	r18, r15
    53a8:	0a 2d       	mov	r16, r10
    53aa:	e9 2c       	mov	r14, r9
    53ac:	cc 24       	eor	r12, r12
    53ae:	c3 94       	inc	r12
    53b0:	0e 94 7c 26 	call	0x4cf8	; 0x4cf8 <cube_draw>
		led_waitframe(CUBE_STRETCH_FRAMESTEP);
    53b4:	83 e0       	ldi	r24, 0x03	; 3
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
	};

	//contract back in
	index=3;
	while(!fallout && index--)
    53bc:	80 91 f4 01 	lds	r24, 0x01F4
    53c0:	88 23       	and	r24, r24
    53c2:	11 f4       	brne	.+4      	; 0x53c8 <pattern_cube_stretch+0x4dc>
    53c4:	18 15       	cp	r17, r8
    53c6:	21 f7       	brne	.-56     	; 0x5390 <pattern_cube_stretch+0x4a4>
		x1++;y1++;z1++;
		x2--;y2--;z2--;
		cube_draw(x1, y1, z1, x2, y2, z2, TRUE);
		led_waitframe(CUBE_STRETCH_FRAMESTEP);
	};
	led_blank();
    53c8:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_waitframe(1);
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
}
    53d4:	1f 91       	pop	r17
    53d6:	0f 91       	pop	r16
    53d8:	ff 90       	pop	r15
    53da:	ef 90       	pop	r14
    53dc:	df 90       	pop	r13
    53de:	cf 90       	pop	r12
    53e0:	bf 90       	pop	r11
    53e2:	af 90       	pop	r10
    53e4:	9f 90       	pop	r9
    53e6:	8f 90       	pop	r8
    53e8:	08 95       	ret

000053ea <physical_process>:
	*z_ptr=z;
}

//todo, add bounce options?
static void physical_process(struct physical_struct *physical_ptr)
{
    53ea:	ef 92       	push	r14
    53ec:	ff 92       	push	r15
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	f8 2e       	mov	r15, r24
    53f4:	e9 2e       	mov	r14, r25
	static struct physical_struct physical;	//static instance for arithmetic, hopefully speeds things up by removing de-referencing

	memcpy(&physical, physical_ptr, sizeof(struct physical_struct));
    53f6:	a7 ef       	ldi	r26, 0xF7	; 247
    53f8:	b1 e0       	ldi	r27, 0x01	; 1
    53fa:	9c 01       	movw	r18, r24
    53fc:	f9 01       	movw	r30, r18
    53fe:	83 e1       	ldi	r24, 0x13	; 19
    5400:	01 90       	ld	r0, Z+
    5402:	0d 92       	st	X+, r0
    5404:	81 50       	subi	r24, 0x01	; 1
    5406:	e1 f7       	brne	.-8      	; 0x5400 <physical_process+0x16>

	if(physical.active==1)
    5408:	80 91 09 02 	lds	r24, 0x0209
    540c:	81 30       	cpi	r24, 0x01	; 1
    540e:	09 f0       	breq	.+2      	; 0x5412 <physical_process+0x28>
    5410:	5b c0       	rjmp	.+182    	; 0x54c8 <physical_process+0xde>
	{
		//speed affects position
		physical.position_x += physical.speed_x;
    5412:	00 91 fd 01 	lds	r16, 0x01FD
    5416:	10 91 fe 01 	lds	r17, 0x01FE
    541a:	60 91 f7 01 	lds	r22, 0x01F7
    541e:	70 91 f8 01 	lds	r23, 0x01F8
    5422:	60 0f       	add	r22, r16
    5424:	71 1f       	adc	r23, r17
    5426:	70 93 f8 01 	sts	0x01F8, r23
    542a:	60 93 f7 01 	sts	0x01F7, r22
		physical.position_y += physical.speed_y;
    542e:	a0 91 ff 01 	lds	r26, 0x01FF
    5432:	b0 91 00 02 	lds	r27, 0x0200
    5436:	20 91 f9 01 	lds	r18, 0x01F9
    543a:	30 91 fa 01 	lds	r19, 0x01FA
    543e:	2a 0f       	add	r18, r26
    5440:	3b 1f       	adc	r19, r27
    5442:	30 93 fa 01 	sts	0x01FA, r19
    5446:	20 93 f9 01 	sts	0x01F9, r18
		physical.position_z += physical.speed_z;
    544a:	e0 91 01 02 	lds	r30, 0x0201
    544e:	f0 91 02 02 	lds	r31, 0x0202
    5452:	40 91 fb 01 	lds	r20, 0x01FB
    5456:	50 91 fc 01 	lds	r21, 0x01FC
    545a:	4e 0f       	add	r20, r30
    545c:	5f 1f       	adc	r21, r31
    545e:	50 93 fc 01 	sts	0x01FC, r21
    5462:	40 93 fb 01 	sts	0x01FB, r20
		
		//acceleration affects speed
		physical.speed_x += physical.accel_x;
    5466:	80 91 03 02 	lds	r24, 0x0203
    546a:	90 91 04 02 	lds	r25, 0x0204
    546e:	80 0f       	add	r24, r16
    5470:	91 1f       	adc	r25, r17
    5472:	90 93 fe 01 	sts	0x01FE, r25
    5476:	80 93 fd 01 	sts	0x01FD, r24
		physical.speed_y += physical.accel_y;
    547a:	80 91 05 02 	lds	r24, 0x0205
    547e:	90 91 06 02 	lds	r25, 0x0206
    5482:	8a 0f       	add	r24, r26
    5484:	9b 1f       	adc	r25, r27
    5486:	90 93 00 02 	sts	0x0200, r25
    548a:	80 93 ff 01 	sts	0x01FF, r24
		physical.speed_z += physical.accel_z;
    548e:	80 91 07 02 	lds	r24, 0x0207
    5492:	90 91 08 02 	lds	r25, 0x0208
    5496:	8e 0f       	add	r24, r30
    5498:	9f 1f       	adc	r25, r31
    549a:	90 93 02 02 	sts	0x0202, r25
    549e:	80 93 01 02 	sts	0x0201, r24
		
		if((physical.position_x | physical.position_y | physical.position_z ) & 0x8000)
    54a2:	26 2b       	or	r18, r22
    54a4:	37 2b       	or	r19, r23
    54a6:	24 2b       	or	r18, r20
    54a8:	35 2b       	or	r19, r21
    54aa:	37 ff       	sbrs	r19, 7
    54ac:	02 c0       	rjmp	.+4      	; 0x54b2 <physical_process+0xc8>
			physical.active=FALSE;
    54ae:	10 92 09 02 	sts	0x0209, r1
		
		memcpy(physical_ptr, &physical, sizeof(struct physical_struct));
    54b2:	8f 2d       	mov	r24, r15
    54b4:	9e 2d       	mov	r25, r14
    54b6:	9c 01       	movw	r18, r24
    54b8:	d9 01       	movw	r26, r18
    54ba:	e7 ef       	ldi	r30, 0xF7	; 247
    54bc:	f1 e0       	ldi	r31, 0x01	; 1
    54be:	83 e1       	ldi	r24, 0x13	; 19
    54c0:	01 90       	ld	r0, Z+
    54c2:	0d 92       	st	X+, r0
    54c4:	81 50       	subi	r24, 0x01	; 1
    54c6:	e1 f7       	brne	.-8      	; 0x54c0 <physical_process+0xd6>
	};
}
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	ef 90       	pop	r14
    54d0:	08 95       	ret

000054d2 <firework_init>:
			led_frame_bitmap[z+(y<<3)] &=~(0x80>>x);
	};
}

static void firework_init(struct firework_struct *firework_ptr)
{
    54d2:	0f 93       	push	r16
    54d4:	1f 93       	push	r17
    54d6:	8c 01       	movw	r16, r24
	firework_ptr->rocket.position_x=rand()&0x7FFF;
    54d8:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    54dc:	9f 77       	andi	r25, 0x7F	; 127
    54de:	f8 01       	movw	r30, r16
    54e0:	92 83       	std	Z+2, r25	; 0x02
    54e2:	81 83       	std	Z+1, r24	; 0x01
	firework_ptr->rocket.position_y=0x7FFF;
    54e4:	8f ef       	ldi	r24, 0xFF	; 255
    54e6:	9f e7       	ldi	r25, 0x7F	; 127
    54e8:	94 83       	std	Z+4, r25	; 0x04
    54ea:	83 83       	std	Z+3, r24	; 0x03
	firework_ptr->rocket.position_z=rand()&0x7FFF;
    54ec:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    54f0:	9f 77       	andi	r25, 0x7F	; 127
    54f2:	f8 01       	movw	r30, r16
    54f4:	96 83       	std	Z+6, r25	; 0x06
    54f6:	85 83       	std	Z+5, r24	; 0x05
	firework_ptr->rocket.speed_x=0;
    54f8:	10 86       	std	Z+8, r1	; 0x08
    54fa:	17 82       	std	Z+7, r1	; 0x07
	firework_ptr->rocket.speed_y= FIREWORK_LAUNCH_Y;
    54fc:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5500:	2c ee       	ldi	r18, 0xEC	; 236
    5502:	3a ef       	ldi	r19, 0xFA	; 250
    5504:	28 1b       	sub	r18, r24
    5506:	31 09       	sbc	r19, r1
    5508:	f8 01       	movw	r30, r16
    550a:	32 87       	std	Z+10, r19	; 0x0a
    550c:	21 87       	std	Z+9, r18	; 0x09
	firework_ptr->rocket.speed_z=0;
    550e:	14 86       	std	Z+12, r1	; 0x0c
    5510:	13 86       	std	Z+11, r1	; 0x0b
	firework_ptr->rocket.accel_x=0;
    5512:	16 86       	std	Z+14, r1	; 0x0e
    5514:	15 86       	std	Z+13, r1	; 0x0d
	firework_ptr->rocket.accel_y=FIREWORK_GRAVITY;
    5516:	82 e3       	ldi	r24, 0x32	; 50
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	90 8b       	std	Z+16, r25	; 0x10
    551c:	87 87       	std	Z+15, r24	; 0x0f
	firework_ptr->rocket.accel_z=0;
    551e:	12 8a       	std	Z+18, r1	; 0x12
    5520:	11 8a       	std	Z+17, r1	; 0x11
	firework_ptr->rocket.active=1;
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	83 8b       	std	Z+19, r24	; 0x13
	firework_ptr->state=FIREWORK_STATE_LAUNCH;
    5526:	10 82       	st	Z, r1
}
    5528:	1f 91       	pop	r17
    552a:	0f 91       	pop	r16
    552c:	08 95       	ret

0000552e <pattern_fireworks>:
		};
	};
}

void pattern_fireworks(void)
{	
    552e:	2f 92       	push	r2
    5530:	3f 92       	push	r3
    5532:	4f 92       	push	r4
    5534:	5f 92       	push	r5
    5536:	6f 92       	push	r6
    5538:	7f 92       	push	r7
    553a:	8f 92       	push	r8
    553c:	9f 92       	push	r9
    553e:	af 92       	push	r10
    5540:	bf 92       	push	r11
    5542:	cf 92       	push	r12
    5544:	df 92       	push	r13
    5546:	ef 92       	push	r14
    5548:	ff 92       	push	r15
    554a:	0f 93       	push	r16
    554c:	1f 93       	push	r17
    554e:	df 93       	push	r29
    5550:	cf 93       	push	r28
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	cc 59       	subi	r28, 0x9C	; 156
    5558:	d4 40       	sbci	r29, 0x04	; 4
    555a:	0f b6       	in	r0, 0x3f	; 63
    555c:	f8 94       	cli
    555e:	de bf       	out	0x3e, r29	; 62
    5560:	0f be       	out	0x3f, r0	; 63
    5562:	cd bf       	out	0x3d, r28	; 61
	char finished=FALSE, flag;
	uint8_t firework_index, spray_index;
	struct firework_struct firework[FIREWORK_NUMBEROF];

	fallout=FALSE;
    5564:	10 92 f4 01 	sts	0x01F4, r1
	
	led_framerate(FIREWORK_FRAMERATE);
    5568:	82 e3       	ldi	r24, 0x32	; 50
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    5570:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    5574:	8f ef       	ldi	r24, 0xFF	; 255
    5576:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>

	time = duration;
    557a:	80 91 f5 01 	lds	r24, 0x01F5
    557e:	90 91 f6 01 	lds	r25, 0x01F6
    5582:	90 93 0b 02 	sts	0x020B, r25
    5586:	80 93 0a 02 	sts	0x020A, r24

	//init
	firework_index=0;
	while(firework_index != FIREWORK_NUMBEROF)
		firework_init(&firework[firework_index++]);
    558a:	8e 01       	movw	r16, r28
    558c:	0f 5f       	subi	r16, 0xFF	; 255
    558e:	1f 4f       	sbci	r17, 0xFF	; 255
    5590:	c8 01       	movw	r24, r16
    5592:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <firework_init>
    5596:	ce 01       	movw	r24, r28
    5598:	81 5b       	subi	r24, 0xB1	; 177
    559a:	9d 4f       	sbci	r25, 0xFD	; 253
    559c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <firework_init>
    55a0:	90 e0       	ldi	r25, 0x00	; 0
	
	while(!fallout && !finished)
	{
		led_blank();
    55a2:	18 01       	movw	r2, r16
						flag=FALSE;
					};
					spray_index++;
				};
				if(flag)
					firework[firework_index].state = FIREWORK_STATE_DONE;
    55a4:	32 e0       	ldi	r19, 0x02	; 2
    55a6:	43 2e       	mov	r4, r19
    55a8:	d7 c0       	rjmp	.+430    	; 0x5758 <pattern_fireworks+0x22a>
	while(firework_index != FIREWORK_NUMBEROF)
		firework_init(&firework[firework_index++]);
	
	while(!fallout && !finished)
	{
		led_blank();
    55aa:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
    55ae:	51 01       	movw	r10, r2
    55b0:	11 e0       	ldi	r17, 0x01	; 1
    55b2:	66 24       	eor	r6, r6
    55b4:	77 24       	eor	r7, r7
		finished=TRUE;
		firework_index=0;
		while(firework_index != FIREWORK_NUMBEROF)
		{
			//launch
			if(	firework[firework_index].state==FIREWORK_STATE_LAUNCH)
    55b6:	f5 01       	movw	r30, r10
    55b8:	80 81       	ld	r24, Z
    55ba:	88 23       	and	r24, r24
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <pattern_fireworks+0x92>
    55be:	69 c0       	rjmp	.+210    	; 0x5692 <pattern_fireworks+0x164>
			{
				finished=FALSE;
				physical_process(&firework[firework_index].rocket);			//move rocket
    55c0:	2e e4       	ldi	r18, 0x4E	; 78
    55c2:	32 e0       	ldi	r19, 0x02	; 2
    55c4:	62 9e       	mul	r6, r18
    55c6:	80 01       	movw	r16, r0
    55c8:	63 9e       	mul	r6, r19
    55ca:	10 0d       	add	r17, r0
    55cc:	72 9e       	mul	r7, r18
    55ce:	10 0d       	add	r17, r0
    55d0:	11 24       	eor	r1, r1
    55d2:	0f 5f       	subi	r16, 0xFF	; 255
    55d4:	1f 4f       	sbci	r17, 0xFF	; 255
    55d6:	41 01       	movw	r8, r2
    55d8:	80 0e       	add	r8, r16
    55da:	91 1e       	adc	r9, r17
    55dc:	01 50       	subi	r16, 0x01	; 1
    55de:	10 40       	sbci	r17, 0x00	; 0
    55e0:	c4 01       	movw	r24, r8
    55e2:	0e 94 f5 29 	call	0x53ea	; 0x53ea <physical_process>
				if(firework[firework_index].rocket.active==FALSE)			//did rocket go off screen before bursting?
    55e6:	f5 01       	movw	r30, r10
    55e8:	83 89       	ldd	r24, Z+19	; 0x13
    55ea:	88 23       	and	r24, r24
    55ec:	09 f4       	brne	.+2      	; 0x55f0 <pattern_fireworks+0xc2>
    55ee:	8f c0       	rjmp	.+286    	; 0x570e <pattern_fireworks+0x1e0>
					firework[firework_index].state=FIREWORK_STATE_DONE;		//if so re-init new launch
				else if(firework[firework_index].rocket.speed_y > 0)		//is rocket falling?
    55f0:	f5 01       	movw	r30, r10
    55f2:	81 85       	ldd	r24, Z+9	; 0x09
    55f4:	92 85       	ldd	r25, Z+10	; 0x0a
    55f6:	18 16       	cp	r1, r24
    55f8:	19 06       	cpc	r1, r25
    55fa:	0c f0       	brlt	.+2      	; 0x55fe <pattern_fireworks+0xd0>
    55fc:	45 c0       	rjmp	.+138    	; 0x5688 <pattern_fireworks+0x15a>
    55fe:	2a e1       	ldi	r18, 0x1A	; 26
    5600:	e2 2e       	mov	r14, r18
    5602:	f1 2c       	mov	r15, r1
    5604:	e0 0e       	add	r14, r16
    5606:	f1 1e       	adc	r15, r17
    5608:	e2 0c       	add	r14, r2
    560a:	f3 1c       	adc	r15, r3
    560c:	cc 24       	eor	r12, r12
    560e:	dd 24       	eor	r13, r13
				{
					spray_index=0;
					while(spray_index != FIREWORK_SPRAYPOINTS)
					{
						memcpy(&firework[firework_index].spray[spray_index], &firework[firework_index].rocket, sizeof(struct physical_struct));
    5610:	23 e1       	ldi	r18, 0x13	; 19
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	c2 9e       	mul	r12, r18
    5616:	f0 01       	movw	r30, r0
    5618:	c3 9e       	mul	r12, r19
    561a:	f0 0d       	add	r31, r0
    561c:	d2 9e       	mul	r13, r18
    561e:	f0 0d       	add	r31, r0
    5620:	11 24       	eor	r1, r1
    5622:	e0 0f       	add	r30, r16
    5624:	f1 1f       	adc	r31, r17
    5626:	74 96       	adiw	r30, 0x14	; 20
    5628:	e2 0d       	add	r30, r2
    562a:	f3 1d       	adc	r31, r3
    562c:	d4 01       	movw	r26, r8
    562e:	83 e1       	ldi	r24, 0x13	; 19
    5630:	0d 90       	ld	r0, X+
    5632:	01 92       	st	Z+, r0
    5634:	81 50       	subi	r24, 0x01	; 1
    5636:	e1 f7       	brne	.-8      	; 0x5630 <pattern_fireworks+0x102>
						firework[firework_index].spray[spray_index].speed_x = FIREWORK_BURST_XZ;
    5638:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    563c:	93 70       	andi	r25, 0x03	; 3
    563e:	80 50       	subi	r24, 0x00	; 0
    5640:	92 40       	sbci	r25, 0x02	; 2
    5642:	f7 01       	movw	r30, r14
    5644:	91 83       	std	Z+1, r25	; 0x01
    5646:	80 83       	st	Z, r24
						firework[firework_index].spray[spray_index].speed_z = FIREWORK_BURST_XZ;
    5648:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    564c:	93 70       	andi	r25, 0x03	; 3
    564e:	80 50       	subi	r24, 0x00	; 0
    5650:	92 40       	sbci	r25, 0x02	; 2
    5652:	f7 01       	movw	r30, r14
    5654:	95 83       	std	Z+5, r25	; 0x05
    5656:	84 83       	std	Z+4, r24	; 0x04
						firework[firework_index].spray[spray_index].speed_y = FIREWORK_BURST_Y;
    5658:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    565c:	93 70       	andi	r25, 0x03	; 3
    565e:	88 5e       	subi	r24, 0xE8	; 232
    5660:	93 40       	sbci	r25, 0x03	; 3
    5662:	f7 01       	movw	r30, r14
    5664:	93 83       	std	Z+3, r25	; 0x03
    5666:	82 83       	std	Z+2, r24	; 0x02
    5668:	08 94       	sec
    566a:	c1 1c       	adc	r12, r1
    566c:	d1 1c       	adc	r13, r1
    566e:	23 e1       	ldi	r18, 0x13	; 19
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	e2 0e       	add	r14, r18
    5674:	f3 1e       	adc	r15, r19
				if(firework[firework_index].rocket.active==FALSE)			//did rocket go off screen before bursting?
					firework[firework_index].state=FIREWORK_STATE_DONE;		//if so re-init new launch
				else if(firework[firework_index].rocket.speed_y > 0)		//is rocket falling?
				{
					spray_index=0;
					while(spray_index != FIREWORK_SPRAYPOINTS)
    5676:	3e e1       	ldi	r19, 0x1E	; 30
    5678:	c3 16       	cp	r12, r19
    567a:	d1 04       	cpc	r13, r1
    567c:	49 f6       	brne	.-110    	; 0x5610 <pattern_fireworks+0xe2>
						firework[firework_index].spray[spray_index].speed_x = FIREWORK_BURST_XZ;
						firework[firework_index].spray[spray_index].speed_z = FIREWORK_BURST_XZ;
						firework[firework_index].spray[spray_index].speed_y = FIREWORK_BURST_Y;
						spray_index++;
					};	
					firework[firework_index].state=FIREWORK_STATE_SPRAY;
    567e:	21 e0       	ldi	r18, 0x01	; 1
    5680:	f5 01       	movw	r30, r10
    5682:	20 83       	st	Z, r18
					firework[firework_index].rocket.active=FALSE;
    5684:	13 8a       	std	Z+19, r1	; 0x13
    5686:	56 c0       	rjmp	.+172    	; 0x5734 <pattern_fireworks+0x206>
				}
				else
					physical_plot(&firework[firework_index].rocket, TRUE);	//draw rocket
    5688:	c4 01       	movw	r24, r8
    568a:	61 e0       	ldi	r22, 0x01	; 1
    568c:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
    5690:	51 c0       	rjmp	.+162    	; 0x5734 <pattern_fireworks+0x206>
			}
			//spray
			else if(firework[firework_index].state==FIREWORK_STATE_SPRAY)
    5692:	81 30       	cpi	r24, 0x01	; 1
    5694:	f1 f5       	brne	.+124    	; 0x5712 <pattern_fireworks+0x1e4>
    5696:	ee e4       	ldi	r30, 0x4E	; 78
    5698:	f2 e0       	ldi	r31, 0x02	; 2
    569a:	6e 9e       	mul	r6, r30
    569c:	c0 01       	movw	r24, r0
    569e:	6f 9e       	mul	r6, r31
    56a0:	90 0d       	add	r25, r0
    56a2:	7e 9e       	mul	r7, r30
    56a4:	90 0d       	add	r25, r0
    56a6:	11 24       	eor	r1, r1
    56a8:	86 96       	adiw	r24, 0x26	; 38
    56aa:	61 01       	movw	r12, r2
    56ac:	c8 0e       	add	r12, r24
    56ae:	d9 1e       	adc	r13, r25
    56b0:	86 97       	sbiw	r24, 0x26	; 38
    56b2:	55 24       	eor	r5, r5
    56b4:	53 94       	inc	r5
    56b6:	ee 24       	eor	r14, r14
    56b8:	ff 24       	eor	r15, r15
				finished=FALSE;
				flag=TRUE;
				spray_index=0;
				while(spray_index != FIREWORK_SPRAYPOINTS)
				{
					physical_process(&firework[firework_index].spray[spray_index]);
    56ba:	4c 01       	movw	r8, r24
    56bc:	23 e1       	ldi	r18, 0x13	; 19
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	e2 9e       	mul	r14, r18
    56c2:	80 01       	movw	r16, r0
    56c4:	e3 9e       	mul	r14, r19
    56c6:	10 0d       	add	r17, r0
    56c8:	f2 9e       	mul	r15, r18
    56ca:	10 0d       	add	r17, r0
    56cc:	11 24       	eor	r1, r1
    56ce:	08 0d       	add	r16, r8
    56d0:	19 1d       	adc	r17, r9
    56d2:	0c 5e       	subi	r16, 0xEC	; 236
    56d4:	1f 4f       	sbci	r17, 0xFF	; 255
    56d6:	02 0d       	add	r16, r2
    56d8:	13 1d       	adc	r17, r3
    56da:	c8 01       	movw	r24, r16
    56dc:	0e 94 f5 29 	call	0x53ea	; 0x53ea <physical_process>
					if(firework[firework_index].spray[spray_index].active)
    56e0:	f6 01       	movw	r30, r12
    56e2:	80 81       	ld	r24, Z
    56e4:	88 23       	and	r24, r24
    56e6:	29 f0       	breq	.+10     	; 0x56f2 <pattern_fireworks+0x1c4>
					{
						physical_plot(&firework[firework_index].spray[spray_index], TRUE);
    56e8:	c8 01       	movw	r24, r16
    56ea:	61 e0       	ldi	r22, 0x01	; 1
    56ec:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
    56f0:	55 24       	eor	r5, r5
    56f2:	08 94       	sec
    56f4:	e1 1c       	adc	r14, r1
    56f6:	f1 1c       	adc	r15, r1
    56f8:	23 e1       	ldi	r18, 0x13	; 19
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	c2 0e       	add	r12, r18
    56fe:	d3 1e       	adc	r13, r19
			else if(firework[firework_index].state==FIREWORK_STATE_SPRAY)
			{
				finished=FALSE;
				flag=TRUE;
				spray_index=0;
				while(spray_index != FIREWORK_SPRAYPOINTS)
    5700:	3e e1       	ldi	r19, 0x1E	; 30
    5702:	e3 16       	cp	r14, r19
    5704:	f1 04       	cpc	r15, r1
    5706:	d1 f6       	brne	.-76     	; 0x56bc <pattern_fireworks+0x18e>
						physical_plot(&firework[firework_index].spray[spray_index], TRUE);
						flag=FALSE;
					};
					spray_index++;
				};
				if(flag)
    5708:	55 20       	and	r5, r5
    570a:	a1 f0       	breq	.+40     	; 0x5734 <pattern_fireworks+0x206>
					firework[firework_index].state = FIREWORK_STATE_DONE;
    570c:	f5 01       	movw	r30, r10
    570e:	40 82       	st	Z, r4
    5710:	11 c0       	rjmp	.+34     	; 0x5734 <pattern_fireworks+0x206>
			}
			//done, re-init, unless time has expired
			else if(firework[firework_index].state==FIREWORK_STATE_DONE && (!duration || time))
    5712:	82 30       	cpi	r24, 0x02	; 2
    5714:	81 f4       	brne	.+32     	; 0x5736 <pattern_fireworks+0x208>
    5716:	80 91 f5 01 	lds	r24, 0x01F5
    571a:	90 91 f6 01 	lds	r25, 0x01F6
    571e:	89 2b       	or	r24, r25
    5720:	31 f0       	breq	.+12     	; 0x572e <pattern_fireworks+0x200>
    5722:	80 91 0a 02 	lds	r24, 0x020A
    5726:	90 91 0b 02 	lds	r25, 0x020B
    572a:	89 2b       	or	r24, r25
    572c:	21 f0       	breq	.+8      	; 0x5736 <pattern_fireworks+0x208>
			{
				finished=FALSE;
				firework_init(&firework[firework_index]);
    572e:	c5 01       	movw	r24, r10
    5730:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <firework_init>
    5734:	10 e0       	ldi	r17, 0x00	; 0
    5736:	08 94       	sec
    5738:	61 1c       	adc	r6, r1
    573a:	71 1c       	adc	r7, r1
    573c:	2e e4       	ldi	r18, 0x4E	; 78
    573e:	32 e0       	ldi	r19, 0x02	; 2
    5740:	a2 0e       	add	r10, r18
    5742:	b3 1e       	adc	r11, r19
	while(!fallout && !finished)
	{
		led_blank();
		finished=TRUE;
		firework_index=0;
		while(firework_index != FIREWORK_NUMBEROF)
    5744:	32 e0       	ldi	r19, 0x02	; 2
    5746:	63 16       	cp	r6, r19
    5748:	71 04       	cpc	r7, r1
    574a:	09 f0       	breq	.+2      	; 0x574e <pattern_fireworks+0x220>
    574c:	34 cf       	rjmp	.-408    	; 0x55b6 <pattern_fireworks+0x88>
			};
			firework_index++;
		};
		
//		led_point(0,7,0,TRUE);	//include this, if led in bottom corner flickers out, processor is not keeping up
		led_waitframe(1);
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5756:	91 2f       	mov	r25, r17
	//init
	firework_index=0;
	while(firework_index != FIREWORK_NUMBEROF)
		firework_init(&firework[firework_index++]);
	
	while(!fallout && !finished)
    5758:	80 91 f4 01 	lds	r24, 0x01F4
    575c:	88 23       	and	r24, r24
    575e:	19 f4       	brne	.+6      	; 0x5766 <pattern_fireworks+0x238>
    5760:	99 23       	and	r25, r25
    5762:	09 f4       	brne	.+2      	; 0x5766 <pattern_fireworks+0x238>
    5764:	22 cf       	rjmp	.-444    	; 0x55aa <pattern_fireworks+0x7c>
		};
		
//		led_point(0,7,0,TRUE);	//include this, if led in bottom corner flickers out, processor is not keeping up
		led_waitframe(1);
	};
}
    5766:	c4 56       	subi	r28, 0x64	; 100
    5768:	db 4f       	sbci	r29, 0xFB	; 251
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	f8 94       	cli
    576e:	de bf       	out	0x3e, r29	; 62
    5770:	0f be       	out	0x3f, r0	; 63
    5772:	cd bf       	out	0x3d, r28	; 61
    5774:	cf 91       	pop	r28
    5776:	df 91       	pop	r29
    5778:	1f 91       	pop	r17
    577a:	0f 91       	pop	r16
    577c:	ff 90       	pop	r15
    577e:	ef 90       	pop	r14
    5780:	df 90       	pop	r13
    5782:	cf 90       	pop	r12
    5784:	bf 90       	pop	r11
    5786:	af 90       	pop	r10
    5788:	9f 90       	pop	r9
    578a:	8f 90       	pop	r8
    578c:	7f 90       	pop	r7
    578e:	6f 90       	pop	r6
    5790:	5f 90       	pop	r5
    5792:	4f 90       	pop	r4
    5794:	3f 90       	pop	r3
    5796:	2f 90       	pop	r2
    5798:	08 95       	ret

0000579a <pattern_fountain>:
		led_waitframe(SPINFACE_FRAMESTEP);
	};
}

void pattern_fountain(void)
{
    579a:	2f 92       	push	r2
    579c:	3f 92       	push	r3
    579e:	4f 92       	push	r4
    57a0:	5f 92       	push	r5
    57a2:	6f 92       	push	r6
    57a4:	7f 92       	push	r7
    57a6:	8f 92       	push	r8
    57a8:	9f 92       	push	r9
    57aa:	af 92       	push	r10
    57ac:	bf 92       	push	r11
    57ae:	cf 92       	push	r12
    57b0:	df 92       	push	r13
    57b2:	ef 92       	push	r14
    57b4:	ff 92       	push	r15
    57b6:	0f 93       	push	r16
    57b8:	1f 93       	push	r17
    57ba:	df 93       	push	r29
    57bc:	cf 93       	push	r28
    57be:	cd b7       	in	r28, 0x3d	; 61
    57c0:	de b7       	in	r29, 0x3e	; 62
    57c2:	c8 59       	subi	r28, 0x98	; 152
    57c4:	d0 40       	sbci	r29, 0x00	; 0
    57c6:	0f b6       	in	r0, 0x3f	; 63
    57c8:	f8 94       	cli
    57ca:	de bf       	out	0x3e, r29	; 62
    57cc:	0f be       	out	0x3f, r0	; 63
    57ce:	cd bf       	out	0x3d, r28	; 61
	uint8_t index, finished=FALSE;
	struct	physical_struct physical[FOUNTAIN_NUMBEROF];
	unsigned int frame_count=0;
	unsigned char mode=0;
	
	fallout=FALSE;
    57d0:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    57d4:	80 91 f5 01 	lds	r24, 0x01F5
    57d8:	90 91 f6 01 	lds	r25, 0x01F6
    57dc:	90 93 0b 02 	sts	0x020B, r25
    57e0:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(FOUNTAIN_FRAMERATE);
    57e4:	82 e3       	ldi	r24, 0x32	; 50
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    57ec:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    57f0:	8f ef       	ldi	r24, 0xFF	; 255
    57f2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    57f6:	fe 01       	movw	r30, r28
    57f8:	73 96       	adiw	r30, 0x13	; 19

	index=0;
	while(index!=FOUNTAIN_NUMBEROF)
    57fa:	ce 01       	movw	r24, r28
    57fc:	85 55       	subi	r24, 0x55	; 85
    57fe:	9f 4f       	sbci	r25, 0xFF	; 255
		physical[index++].active=FALSE;
    5800:	10 82       	st	Z, r1
    5802:	73 96       	adiw	r30, 0x13	; 19
	led_framerate(FOUNTAIN_FRAMERATE);
	led_blank();
	led_plane_intensity_all(255);	

	index=0;
	while(index!=FOUNTAIN_NUMBEROF)
    5804:	e8 17       	cp	r30, r24
    5806:	f9 07       	cpc	r31, r25
    5808:	d9 f7       	brne	.-10     	; 0x5800 <pattern_fountain+0x66>
    580a:	ee 24       	eor	r14, r14
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	cc 24       	eor	r12, r12
    5810:	dd 24       	eor	r13, r13
							physical[index].position_z=0x0800;
							physical[index].speed_x = FOUNTAIN_XZ;
							physical[index].speed_z = FOUNTAIN_XZ;
							break;
					};
					physical[index].position_y=0x7800;
    5812:	a1 2c       	mov	r10, r1
    5814:	e8 e7       	ldi	r30, 0x78	; 120
    5816:	be 2e       	mov	r11, r30
					physical[index].accel_x = 0;
					physical[index].accel_y = FOUNTAIN_GRAVITY;
					physical[index].accel_z = 0;
					physical[index].speed_y = -(FOUNTAIN_Y);
    5818:	74 e5       	ldi	r23, 0x54	; 84
    581a:	27 2e       	mov	r2, r23
    581c:	72 ef       	ldi	r23, 0xF2	; 242
    581e:	37 2e       	mov	r3, r23
							break;
							
						case 1:
							physical[index].position_x=0x7800;
							physical[index].position_z=0x7800;
							physical[index].speed_x = -(FOUNTAIN_XZ);
    5820:	61 e0       	ldi	r22, 0x01	; 1
    5822:	66 2e       	mov	r6, r22
    5824:	6c ef       	ldi	r22, 0xFC	; 252
    5826:	76 2e       	mov	r7, r22
				if(!duration || time)
				{
					switch(mode)
					{
						case 0:
							physical[index].position_x=0x0800;
    5828:	81 2c       	mov	r8, r1
    582a:	58 e0       	ldi	r21, 0x08	; 8
    582c:	95 2e       	mov	r9, r21
	while(!fallout && !finished)
	{
		led_blank();
		finished=TRUE;
		index=0;
		while(index!=FOUNTAIN_NUMBEROF)
    582e:	49 e9       	ldi	r20, 0x99	; 153
    5830:	44 2e       	mov	r4, r20
    5832:	51 2c       	mov	r5, r1
    5834:	4c 0e       	add	r4, r28
    5836:	5d 1e       	adc	r5, r29
    5838:	a2 c0       	rjmp	.+324    	; 0x597e <pattern_fountain+0x1e4>
		index++;
	
	//running process
	while(!fallout && !finished)
	{
		led_blank();
    583a:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
    583e:	8e 01       	movw	r16, r28
    5840:	0f 5f       	subi	r16, 0xFF	; 255
    5842:	1f 4f       	sbci	r17, 0xFF	; 255
    5844:	ff 24       	eor	r15, r15
    5846:	f3 94       	inc	r15
		finished=TRUE;
		index=0;
		while(index!=FOUNTAIN_NUMBEROF)
		{
			if(physical[index].active==FALSE)
    5848:	f8 01       	movw	r30, r16
    584a:	82 89       	ldd	r24, Z+18	; 0x12
    584c:	88 23       	and	r24, r24
    584e:	09 f0       	breq	.+2      	; 0x5852 <pattern_fountain+0xb8>
    5850:	77 c0       	rjmp	.+238    	; 0x5940 <pattern_fountain+0x1a6>
			{
				if(!duration || time)
    5852:	80 91 f5 01 	lds	r24, 0x01F5
    5856:	90 91 f6 01 	lds	r25, 0x01F6
    585a:	89 2b       	or	r24, r25
    585c:	39 f0       	breq	.+14     	; 0x586c <pattern_fountain+0xd2>
    585e:	80 91 0a 02 	lds	r24, 0x020A
    5862:	90 91 0b 02 	lds	r25, 0x020B
    5866:	89 2b       	or	r24, r25
    5868:	09 f4       	brne	.+2      	; 0x586c <pattern_fountain+0xd2>
    586a:	72 c0       	rjmp	.+228    	; 0x5950 <pattern_fountain+0x1b6>
				{
					switch(mode)
    586c:	f1 e0       	ldi	r31, 0x01	; 1
    586e:	ef 16       	cp	r14, r31
    5870:	a9 f0       	breq	.+42     	; 0x589c <pattern_fountain+0x102>
    5872:	ef 16       	cp	r14, r31
    5874:	40 f0       	brcs	.+16     	; 0x5886 <pattern_fountain+0xec>
    5876:	22 e0       	ldi	r18, 0x02	; 2
    5878:	e2 16       	cp	r14, r18
    587a:	39 f1       	breq	.+78     	; 0x58ca <pattern_fountain+0x130>
    587c:	33 e0       	ldi	r19, 0x03	; 3
    587e:	e3 16       	cp	r14, r19
    5880:	09 f0       	breq	.+2      	; 0x5884 <pattern_fountain+0xea>
    5882:	45 c0       	rjmp	.+138    	; 0x590e <pattern_fountain+0x174>
    5884:	2f c0       	rjmp	.+94     	; 0x58e4 <pattern_fountain+0x14a>
					{
						case 0:
							physical[index].position_x=0x0800;
    5886:	f8 01       	movw	r30, r16
    5888:	91 82       	std	Z+1, r9	; 0x01
    588a:	80 82       	st	Z, r8
							physical[index].position_z=0x7800;
    588c:	b5 82       	std	Z+5, r11	; 0x05
    588e:	a4 82       	std	Z+4, r10	; 0x04
							physical[index].speed_x = FOUNTAIN_XZ;
    5890:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5894:	91 70       	andi	r25, 0x01	; 1
    5896:	81 50       	subi	r24, 0x01	; 1
    5898:	9c 4f       	sbci	r25, 0xFC	; 252
    589a:	0c c0       	rjmp	.+24     	; 0x58b4 <pattern_fountain+0x11a>
							physical[index].speed_z = -(FOUNTAIN_XZ);
							break;
							
						case 1:
							physical[index].position_x=0x7800;
    589c:	f8 01       	movw	r30, r16
    589e:	b1 82       	std	Z+1, r11	; 0x01
    58a0:	a0 82       	st	Z, r10
							physical[index].position_z=0x7800;
    58a2:	b5 82       	std	Z+5, r11	; 0x05
    58a4:	a4 82       	std	Z+4, r10	; 0x04
							physical[index].speed_x = -(FOUNTAIN_XZ);
    58a6:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    58aa:	91 70       	andi	r25, 0x01	; 1
    58ac:	93 01       	movw	r18, r6
    58ae:	28 1b       	sub	r18, r24
    58b0:	39 0b       	sbc	r19, r25
    58b2:	c9 01       	movw	r24, r18
    58b4:	f8 01       	movw	r30, r16
    58b6:	97 83       	std	Z+7, r25	; 0x07
    58b8:	86 83       	std	Z+6, r24	; 0x06
							physical[index].speed_z = -(FOUNTAIN_XZ);
    58ba:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    58be:	91 70       	andi	r25, 0x01	; 1
    58c0:	93 01       	movw	r18, r6
    58c2:	28 1b       	sub	r18, r24
    58c4:	39 0b       	sbc	r19, r25
    58c6:	c9 01       	movw	r24, r18
    58c8:	1f c0       	rjmp	.+62     	; 0x5908 <pattern_fountain+0x16e>
							break;
							
						case 2:
							physical[index].position_x=0x7800;
    58ca:	f8 01       	movw	r30, r16
    58cc:	b1 82       	std	Z+1, r11	; 0x01
    58ce:	a0 82       	st	Z, r10
							physical[index].position_z=0x0800;
    58d0:	95 82       	std	Z+5, r9	; 0x05
    58d2:	84 82       	std	Z+4, r8	; 0x04
							physical[index].speed_x = -(FOUNTAIN_XZ);
    58d4:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    58d8:	91 70       	andi	r25, 0x01	; 1
    58da:	93 01       	movw	r18, r6
    58dc:	28 1b       	sub	r18, r24
    58de:	39 0b       	sbc	r19, r25
    58e0:	c9 01       	movw	r24, r18
    58e2:	0a c0       	rjmp	.+20     	; 0x58f8 <pattern_fountain+0x15e>
							physical[index].speed_z = FOUNTAIN_XZ;
							break;
							
						case 3:
							physical[index].position_x=0x0800;
    58e4:	f8 01       	movw	r30, r16
    58e6:	91 82       	std	Z+1, r9	; 0x01
    58e8:	80 82       	st	Z, r8
							physical[index].position_z=0x0800;
    58ea:	95 82       	std	Z+5, r9	; 0x05
    58ec:	84 82       	std	Z+4, r8	; 0x04
							physical[index].speed_x = FOUNTAIN_XZ;
    58ee:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    58f2:	91 70       	andi	r25, 0x01	; 1
    58f4:	81 50       	subi	r24, 0x01	; 1
    58f6:	9c 4f       	sbci	r25, 0xFC	; 252
    58f8:	f8 01       	movw	r30, r16
    58fa:	97 83       	std	Z+7, r25	; 0x07
    58fc:	86 83       	std	Z+6, r24	; 0x06
							physical[index].speed_z = FOUNTAIN_XZ;
    58fe:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5902:	91 70       	andi	r25, 0x01	; 1
    5904:	81 50       	subi	r24, 0x01	; 1
    5906:	9c 4f       	sbci	r25, 0xFC	; 252
    5908:	f8 01       	movw	r30, r16
    590a:	93 87       	std	Z+11, r25	; 0x0b
    590c:	82 87       	std	Z+10, r24	; 0x0a
							break;
					};
					physical[index].position_y=0x7800;
    590e:	f8 01       	movw	r30, r16
    5910:	b3 82       	std	Z+3, r11	; 0x03
    5912:	a2 82       	std	Z+2, r10	; 0x02
					physical[index].accel_x = 0;
    5914:	15 86       	std	Z+13, r1	; 0x0d
    5916:	14 86       	std	Z+12, r1	; 0x0c
					physical[index].accel_y = FOUNTAIN_GRAVITY;
    5918:	28 e7       	ldi	r18, 0x78	; 120
    591a:	32 e0       	ldi	r19, 0x02	; 2
    591c:	37 87       	std	Z+15, r19	; 0x0f
    591e:	26 87       	std	Z+14, r18	; 0x0e
					physical[index].accel_z = 0;
    5920:	11 8a       	std	Z+17, r1	; 0x11
    5922:	10 8a       	std	Z+16, r1	; 0x10
					physical[index].speed_y = -(FOUNTAIN_Y);
    5924:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5928:	97 70       	andi	r25, 0x07	; 7
    592a:	f1 01       	movw	r30, r2
    592c:	e8 1b       	sub	r30, r24
    592e:	f9 0b       	sbc	r31, r25
    5930:	cf 01       	movw	r24, r30
    5932:	f8 01       	movw	r30, r16
    5934:	91 87       	std	Z+9, r25	; 0x09
    5936:	80 87       	std	Z+8, r24	; 0x08
					physical[index].active=TRUE;
    5938:	21 e0       	ldi	r18, 0x01	; 1
    593a:	22 8b       	std	Z+18, r18	; 0x12
					physical_plot(&physical[index], TRUE);
    593c:	c8 01       	movw	r24, r16
    593e:	04 c0       	rjmp	.+8      	; 0x5948 <pattern_fountain+0x1ae>
					finished=FALSE;
				};
			}
			else
			{
				physical_process(&physical[index]);
    5940:	c8 01       	movw	r24, r16
    5942:	0e 94 f5 29 	call	0x53ea	; 0x53ea <physical_process>
				physical_plot(&physical[index], TRUE);
    5946:	c8 01       	movw	r24, r16
    5948:	61 e0       	ldi	r22, 0x01	; 1
    594a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
    594e:	ff 24       	eor	r15, r15
    5950:	0d 5e       	subi	r16, 0xED	; 237
    5952:	1f 4f       	sbci	r17, 0xFF	; 255
	while(!fallout && !finished)
	{
		led_blank();
		finished=TRUE;
		index=0;
		while(index!=FOUNTAIN_NUMBEROF)
    5954:	04 15       	cp	r16, r4
    5956:	15 05       	cpc	r17, r5
    5958:	09 f0       	breq	.+2      	; 0x595c <pattern_fountain+0x1c2>
    595a:	76 cf       	rjmp	.-276    	; 0x5848 <pattern_fountain+0xae>
				finished=FALSE;
			};
			index++;
		};
		
		led_waitframe(FOUNTAIN_FRAMESTEP);
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		frame_count++;
    5964:	08 94       	sec
    5966:	c1 1c       	adc	r12, r1
    5968:	d1 1c       	adc	r13, r1
		if(frame_count==FOUNTAIN_MOVE)
    596a:	3a ef       	ldi	r19, 0xFA	; 250
    596c:	c3 16       	cp	r12, r19
    596e:	d1 04       	cpc	r13, r1
    5970:	29 f4       	brne	.+10     	; 0x597c <pattern_fountain+0x1e2>
		{
			frame_count=0;
			mode++;
    5972:	e3 94       	inc	r14
			mode &=3;
    5974:	83 e0       	ldi	r24, 0x03	; 3
    5976:	e8 22       	and	r14, r24
    5978:	cc 24       	eor	r12, r12
    597a:	dd 24       	eor	r13, r13
    597c:	9f 2d       	mov	r25, r15
	while(index!=FOUNTAIN_NUMBEROF)
		physical[index++].active=FALSE;
		index++;
	
	//running process
	while(!fallout && !finished)
    597e:	80 91 f4 01 	lds	r24, 0x01F4
    5982:	88 23       	and	r24, r24
    5984:	19 f4       	brne	.+6      	; 0x598c <pattern_fountain+0x1f2>
    5986:	99 23       	and	r25, r25
    5988:	09 f4       	brne	.+2      	; 0x598c <pattern_fountain+0x1f2>
    598a:	57 cf       	rjmp	.-338    	; 0x583a <pattern_fountain+0xa0>
			frame_count=0;
			mode++;
			mode &=3;
		};
	};
}
    598c:	c8 56       	subi	r28, 0x68	; 104
    598e:	df 4f       	sbci	r29, 0xFF	; 255
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	f8 94       	cli
    5994:	de bf       	out	0x3e, r29	; 62
    5996:	0f be       	out	0x3f, r0	; 63
    5998:	cd bf       	out	0x3d, r28	; 61
    599a:	cf 91       	pop	r28
    599c:	df 91       	pop	r29
    599e:	1f 91       	pop	r17
    59a0:	0f 91       	pop	r16
    59a2:	ff 90       	pop	r15
    59a4:	ef 90       	pop	r14
    59a6:	df 90       	pop	r13
    59a8:	cf 90       	pop	r12
    59aa:	bf 90       	pop	r11
    59ac:	af 90       	pop	r10
    59ae:	9f 90       	pop	r9
    59b0:	8f 90       	pop	r8
    59b2:	7f 90       	pop	r7
    59b4:	6f 90       	pop	r6
    59b6:	5f 90       	pop	r5
    59b8:	4f 90       	pop	r4
    59ba:	3f 90       	pop	r3
    59bc:	2f 90       	pop	r2
    59be:	08 95       	ret

000059c0 <pattern_rain1>:
	};

}

void pattern_rain1(void)
{
    59c0:	6f 92       	push	r6
    59c2:	7f 92       	push	r7
    59c4:	8f 92       	push	r8
    59c6:	9f 92       	push	r9
    59c8:	af 92       	push	r10
    59ca:	bf 92       	push	r11
    59cc:	cf 92       	push	r12
    59ce:	df 92       	push	r13
    59d0:	ef 92       	push	r14
    59d2:	ff 92       	push	r15
    59d4:	0f 93       	push	r16
    59d6:	1f 93       	push	r17
    59d8:	df 93       	push	r29
    59da:	cf 93       	push	r28
    59dc:	cd b7       	in	r28, 0x3d	; 61
    59de:	de b7       	in	r29, 0x3e	; 62
    59e0:	c5 55       	subi	r28, 0x55	; 85
    59e2:	d0 40       	sbci	r29, 0x00	; 0
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	f8 94       	cli
    59e8:	de bf       	out	0x3e, r29	; 62
    59ea:	0f be       	out	0x3f, r0	; 63
    59ec:	cd bf       	out	0x3d, r28	; 61
	char finished=FALSE;
	uint8_t state[8][8], x, y, z, tempchar;
	uint8_t position[21] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7}; //states 128-148
    59ee:	de 01       	movw	r26, r28
    59f0:	11 96       	adiw	r26, 0x01	; 1
    59f2:	e8 e0       	ldi	r30, 0x08	; 8
    59f4:	f1 e0       	ldi	r31, 0x01	; 1
    59f6:	85 e1       	ldi	r24, 0x15	; 21
    59f8:	01 90       	ld	r0, Z+
    59fa:	0d 92       	st	X+, r0
    59fc:	81 50       	subi	r24, 0x01	; 1
    59fe:	e1 f7       	brne	.-8      	; 0x59f8 <pattern_rain1+0x38>

	fallout=FALSE;
    5a00:	10 92 f4 01 	sts	0x01F4, r1
	
	led_framerate(50);
    5a04:	82 e3       	ldi	r24, 0x32	; 50
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    5a0c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    5a10:	8f ef       	ldi	r24, 0xFF	; 255
    5a12:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    5a16:	3e e1       	ldi	r19, 0x1E	; 30
    5a18:	c3 2e       	mov	r12, r19
    5a1a:	d1 2c       	mov	r13, r1
    5a1c:	cc 0e       	add	r12, r28
    5a1e:	dd 1e       	adc	r13, r29
    5a20:	ee 24       	eor	r14, r14
    5a22:	ff 24       	eor	r15, r15

	x=0;
	while(x!=8)
    5a24:	26 e1       	ldi	r18, 0x16	; 22
    5a26:	a2 2e       	mov	r10, r18
    5a28:	b1 2c       	mov	r11, r1
    5a2a:	ac 0e       	add	r10, r28
    5a2c:	bd 1e       	adc	r11, r29
    5a2e:	15 c0       	rjmp	.+42     	; 0x5a5a <pattern_rain1+0x9a>
	{
		z=0;
		while(z!=8)
			state[x][z++]=rand()&127;
    5a30:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5a34:	8f 77       	andi	r24, 0x7F	; 127
    5a36:	f8 01       	movw	r30, r16
    5a38:	81 93       	st	Z+, r24
    5a3a:	8f 01       	movw	r16, r30

	x=0;
	while(x!=8)
	{
		z=0;
		while(z!=8)
    5a3c:	ec 15       	cp	r30, r12
    5a3e:	fd 05       	cpc	r31, r13
    5a40:	b9 f7       	brne	.-18     	; 0x5a30 <pattern_rain1+0x70>
    5a42:	08 94       	sec
    5a44:	e1 1c       	adc	r14, r1
    5a46:	f1 1c       	adc	r15, r1
    5a48:	98 e0       	ldi	r25, 0x08	; 8
    5a4a:	c9 2e       	mov	r12, r25
    5a4c:	d1 2c       	mov	r13, r1
    5a4e:	ce 0e       	add	r12, r30
    5a50:	df 1e       	adc	r13, r31
	led_framerate(50);
	led_blank();
	led_plane_intensity_all(255);	

	x=0;
	while(x!=8)
    5a52:	f8 e0       	ldi	r31, 0x08	; 8
    5a54:	ef 16       	cp	r14, r31
    5a56:	f1 04       	cpc	r15, r1
    5a58:	49 f0       	breq	.+18     	; 0x5a6c <pattern_rain1+0xac>
    5a5a:	87 01       	movw	r16, r14
    5a5c:	83 e0       	ldi	r24, 0x03	; 3
    5a5e:	00 0f       	add	r16, r16
    5a60:	11 1f       	adc	r17, r17
    5a62:	8a 95       	dec	r24
    5a64:	e1 f7       	brne	.-8      	; 0x5a5e <pattern_rain1+0x9e>
    5a66:	0a 0d       	add	r16, r10
    5a68:	1b 1d       	adc	r17, r11
    5a6a:	e2 cf       	rjmp	.-60     	; 0x5a30 <pattern_rain1+0x70>
		while(z!=8)
			state[x][z++]=rand()&127;
		x++;
	};

	time = duration;
    5a6c:	80 91 f5 01 	lds	r24, 0x01F5
    5a70:	90 91 f6 01 	lds	r25, 0x01F6
    5a74:	90 93 0b 02 	sts	0x020B, r25
    5a78:	80 93 0a 02 	sts	0x020A, r24

	while(!fallout && (!duration || time))
	{
		led_waitframe(1);
		x=0;
		while(x!=8)
    5a7c:	16 e1       	ldi	r17, 0x16	; 22
    5a7e:	61 2e       	mov	r6, r17
    5a80:	71 2c       	mov	r7, r1
    5a82:	6c 0e       	add	r6, r28
    5a84:	7d 1e       	adc	r7, r29
				//determine previous state, if previous state had a led on, turn it off
				tempchar = state[x][z];
				if(tempchar & 0x80)
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,0);
    5a86:	4e 01       	movw	r8, r28
    5a88:	08 94       	sec
    5a8a:	81 1c       	adc	r8, r1
    5a8c:	91 1c       	adc	r9, r1
    5a8e:	42 c0       	rjmp	.+132    	; 0x5b14 <pattern_rain1+0x154>

	time = duration;

	while(!fallout && (!duration || time))
	{
		led_waitframe(1);
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5a98:	cc 24       	eor	r12, r12
    5a9a:	dd 24       	eor	r13, r13
    5a9c:	30 c0       	rjmp	.+96     	; 0x5afe <pattern_rain1+0x13e>
		{
			z=0;
			while(z!=8)
			{
				//determine previous state, if previous state had a led on, turn it off
				tempchar = state[x][z];
    5a9e:	f7 01       	movw	r30, r14
    5aa0:	10 81       	ld	r17, Z
				if(tempchar & 0x80)
    5aa2:	17 ff       	sbrs	r17, 7
    5aa4:	0b c0       	rjmp	.+22     	; 0x5abc <pattern_rain1+0xfc>
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,0);
    5aa6:	81 2f       	mov	r24, r17
    5aa8:	8f 77       	andi	r24, 0x7F	; 127
    5aaa:	f4 01       	movw	r30, r8
    5aac:	e8 0f       	add	r30, r24
    5aae:	f1 1d       	adc	r31, r1
    5ab0:	8b 2d       	mov	r24, r11
    5ab2:	60 81       	ld	r22, Z
    5ab4:	40 2f       	mov	r20, r16
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
				};
				
				//advance state
				tempchar++;
    5abc:	1f 5f       	subi	r17, 0xFF	; 255
				
				//if drop complete, reset to random pre-led state
				if(tempchar==149)
    5abe:	15 39       	cpi	r17, 0x95	; 149
    5ac0:	21 f4       	brne	.+8      	; 0x5aca <pattern_rain1+0x10a>
					tempchar=rand()&127;
    5ac2:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5ac6:	18 2f       	mov	r17, r24
    5ac8:	1f 77       	andi	r17, 0x7F	; 127
					
				//if new state has a led on, turn it on
				if(tempchar & 0x80)
    5aca:	17 ff       	sbrs	r17, 7
    5acc:	0b c0       	rjmp	.+22     	; 0x5ae4 <pattern_rain1+0x124>
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,1);
    5ace:	81 2f       	mov	r24, r17
    5ad0:	8f 77       	andi	r24, 0x7F	; 127
    5ad2:	f4 01       	movw	r30, r8
    5ad4:	e8 0f       	add	r30, r24
    5ad6:	f1 1d       	adc	r31, r1
    5ad8:	8b 2d       	mov	r24, r11
    5ada:	60 81       	ld	r22, Z
    5adc:	40 2f       	mov	r20, r16
    5ade:	21 e0       	ldi	r18, 0x01	; 1
    5ae0:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
				};
				
				//save state
				state[x][z]=tempchar;
    5ae4:	f7 01       	movw	r30, r14
    5ae6:	11 93       	st	Z+, r17
    5ae8:	7f 01       	movw	r14, r30
				z++;
    5aea:	0f 5f       	subi	r16, 0xFF	; 255
		led_waitframe(1);
		x=0;
		while(x!=8)
		{
			z=0;
			while(z!=8)
    5aec:	08 30       	cpi	r16, 0x08	; 8
    5aee:	b9 f6       	brne	.-82     	; 0x5a9e <pattern_rain1+0xde>
    5af0:	08 94       	sec
    5af2:	c1 1c       	adc	r12, r1
    5af4:	d1 1c       	adc	r13, r1

	while(!fallout && (!duration || time))
	{
		led_waitframe(1);
		x=0;
		while(x!=8)
    5af6:	f8 e0       	ldi	r31, 0x08	; 8
    5af8:	cf 16       	cp	r12, r31
    5afa:	d1 04       	cpc	r13, r1
    5afc:	59 f0       	breq	.+22     	; 0x5b14 <pattern_rain1+0x154>
    5afe:	bc 2c       	mov	r11, r12
    5b00:	76 01       	movw	r14, r12
    5b02:	b3 e0       	ldi	r27, 0x03	; 3
    5b04:	ee 0c       	add	r14, r14
    5b06:	ff 1c       	adc	r15, r15
    5b08:	ba 95       	dec	r27
    5b0a:	e1 f7       	brne	.-8      	; 0x5b04 <pattern_rain1+0x144>
    5b0c:	e6 0c       	add	r14, r6
    5b0e:	f7 1c       	adc	r15, r7
    5b10:	00 e0       	ldi	r16, 0x00	; 0
    5b12:	c5 cf       	rjmp	.-118    	; 0x5a9e <pattern_rain1+0xde>
		x++;
	};

	time = duration;

	while(!fallout && (!duration || time))
    5b14:	80 91 f4 01 	lds	r24, 0x01F4
    5b18:	88 23       	and	r24, r24
    5b1a:	09 f0       	breq	.+2      	; 0x5b1e <pattern_rain1+0x15e>
    5b1c:	54 c0       	rjmp	.+168    	; 0x5bc6 <pattern_rain1+0x206>
    5b1e:	80 91 f5 01 	lds	r24, 0x01F5
    5b22:	90 91 f6 01 	lds	r25, 0x01F6
    5b26:	89 2b       	or	r24, r25
    5b28:	09 f4       	brne	.+2      	; 0x5b2c <pattern_rain1+0x16c>
    5b2a:	b2 cf       	rjmp	.-156    	; 0x5a90 <pattern_rain1+0xd0>
    5b2c:	80 91 0a 02 	lds	r24, 0x020A
    5b30:	90 91 0b 02 	lds	r25, 0x020B
    5b34:	89 2b       	or	r24, r25
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <pattern_rain1+0x17a>
    5b38:	ab cf       	rjmp	.-170    	; 0x5a90 <pattern_rain1+0xd0>
    5b3a:	45 c0       	rjmp	.+138    	; 0x5bc6 <pattern_rain1+0x206>
		};
	};

	while(!fallout && !finished)
	{
		led_waitframe(1);
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5b44:	aa 24       	eor	r10, r10
    5b46:	a3 94       	inc	r10
    5b48:	cc 24       	eor	r12, r12
    5b4a:	dd 24       	eor	r13, r13
    5b4c:	31 c0       	rjmp	.+98     	; 0x5bb0 <pattern_rain1+0x1f0>
		{
			z=0;
			while(z!=8)
			{
				//determine previous state, if previous state had a led on, turn it off
				tempchar = state[x][z];
    5b4e:	f7 01       	movw	r30, r14
    5b50:	10 81       	ld	r17, Z
				if(tempchar & 0x80)
    5b52:	17 ff       	sbrs	r17, 7
    5b54:	0c c0       	rjmp	.+24     	; 0x5b6e <pattern_rain1+0x1ae>
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,0);
    5b56:	81 2f       	mov	r24, r17
    5b58:	8f 77       	andi	r24, 0x7F	; 127
    5b5a:	f4 01       	movw	r30, r8
    5b5c:	e8 0f       	add	r30, r24
    5b5e:	f1 1d       	adc	r31, r1
    5b60:	8b 2d       	mov	r24, r11
    5b62:	60 81       	ld	r22, Z
    5b64:	40 2f       	mov	r20, r16
    5b66:	20 e0       	ldi	r18, 0x00	; 0
    5b68:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
				};
				
				//advance state only if led is already on
				if(tempchar & 0x80)
					tempchar++;
    5b6c:	1f 5f       	subi	r17, 0xFF	; 255
				
				//if drop complete, reset to OFF state
				if(tempchar==149)
    5b6e:	15 39       	cpi	r17, 0x95	; 149
    5b70:	11 f4       	brne	.+4      	; 0x5b76 <pattern_rain1+0x1b6>
    5b72:	10 e0       	ldi	r17, 0x00	; 0
    5b74:	0e c0       	rjmp	.+28     	; 0x5b92 <pattern_rain1+0x1d2>
					tempchar=0;
					
				//if new state has a led on, turn it on
				if(tempchar & 0x80)
    5b76:	17 ff       	sbrs	r17, 7
    5b78:	0c c0       	rjmp	.+24     	; 0x5b92 <pattern_rain1+0x1d2>
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,1);
    5b7a:	81 2f       	mov	r24, r17
    5b7c:	8f 77       	andi	r24, 0x7F	; 127
    5b7e:	f4 01       	movw	r30, r8
    5b80:	e8 0f       	add	r30, r24
    5b82:	f1 1d       	adc	r31, r1
    5b84:	8b 2d       	mov	r24, r11
    5b86:	60 81       	ld	r22, Z
    5b88:	40 2f       	mov	r20, r16
    5b8a:	21 e0       	ldi	r18, 0x01	; 1
    5b8c:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
    5b90:	aa 24       	eor	r10, r10
					finished=FALSE;
				};
				
				//save state
				state[x][z]=tempchar;
    5b92:	f7 01       	movw	r30, r14
    5b94:	11 93       	st	Z+, r17
    5b96:	7f 01       	movw	r14, r30
				z++;
    5b98:	0f 5f       	subi	r16, 0xFF	; 255
		finished=TRUE;
		x=0;
		while(x!=8)
		{
			z=0;
			while(z!=8)
    5b9a:	08 30       	cpi	r16, 0x08	; 8
    5b9c:	c1 f6       	brne	.-80     	; 0x5b4e <pattern_rain1+0x18e>
    5b9e:	08 94       	sec
    5ba0:	c1 1c       	adc	r12, r1
    5ba2:	d1 1c       	adc	r13, r1
	while(!fallout && !finished)
	{
		led_waitframe(1);
		finished=TRUE;
		x=0;
		while(x!=8)
    5ba4:	f8 e0       	ldi	r31, 0x08	; 8
    5ba6:	cf 16       	cp	r12, r31
    5ba8:	d1 04       	cpc	r13, r1
    5baa:	11 f4       	brne	.+4      	; 0x5bb0 <pattern_rain1+0x1f0>
    5bac:	9a 2d       	mov	r25, r10
    5bae:	15 c0       	rjmp	.+42     	; 0x5bda <pattern_rain1+0x21a>
    5bb0:	bc 2c       	mov	r11, r12
    5bb2:	76 01       	movw	r14, r12
    5bb4:	a3 e0       	ldi	r26, 0x03	; 3
    5bb6:	ee 0c       	add	r14, r14
    5bb8:	ff 1c       	adc	r15, r15
    5bba:	aa 95       	dec	r26
    5bbc:	e1 f7       	brne	.-8      	; 0x5bb6 <pattern_rain1+0x1f6>
    5bbe:	e6 0c       	add	r14, r6
    5bc0:	f7 1c       	adc	r15, r7
    5bc2:	00 e0       	ldi	r16, 0x00	; 0
    5bc4:	c4 cf       	rjmp	.-120    	; 0x5b4e <pattern_rain1+0x18e>
    5bc6:	90 e0       	ldi	r25, 0x00	; 0
    5bc8:	f6 e1       	ldi	r31, 0x16	; 22
    5bca:	6f 2e       	mov	r6, r31
    5bcc:	71 2c       	mov	r7, r1
    5bce:	6c 0e       	add	r6, r28
    5bd0:	7d 1e       	adc	r7, r29
				//determine previous state, if previous state had a led on, turn it off
				tempchar = state[x][z];
				if(tempchar & 0x80)
				{
					y = position[tempchar & 0x7F];
					led_point(x,y,z,0);
    5bd2:	4e 01       	movw	r8, r28
    5bd4:	08 94       	sec
    5bd6:	81 1c       	adc	r8, r1
    5bd8:	91 1c       	adc	r9, r1
			};
			x++;
		};
	};

	while(!fallout && !finished)
    5bda:	80 91 f4 01 	lds	r24, 0x01F4
    5bde:	88 23       	and	r24, r24
    5be0:	19 f4       	brne	.+6      	; 0x5be8 <pattern_rain1+0x228>
    5be2:	99 23       	and	r25, r25
    5be4:	09 f4       	brne	.+2      	; 0x5be8 <pattern_rain1+0x228>
    5be6:	aa cf       	rjmp	.-172    	; 0x5b3c <pattern_rain1+0x17c>
				z++;
			};
			x++;
		};
	};
}
    5be8:	cb 5a       	subi	r28, 0xAB	; 171
    5bea:	df 4f       	sbci	r29, 0xFF	; 255
    5bec:	0f b6       	in	r0, 0x3f	; 63
    5bee:	f8 94       	cli
    5bf0:	de bf       	out	0x3e, r29	; 62
    5bf2:	0f be       	out	0x3f, r0	; 63
    5bf4:	cd bf       	out	0x3d, r28	; 61
    5bf6:	cf 91       	pop	r28
    5bf8:	df 91       	pop	r29
    5bfa:	1f 91       	pop	r17
    5bfc:	0f 91       	pop	r16
    5bfe:	ff 90       	pop	r15
    5c00:	ef 90       	pop	r14
    5c02:	df 90       	pop	r13
    5c04:	cf 90       	pop	r12
    5c06:	bf 90       	pop	r11
    5c08:	af 90       	pop	r10
    5c0a:	9f 90       	pop	r9
    5c0c:	8f 90       	pop	r8
    5c0e:	7f 90       	pop	r7
    5c10:	6f 90       	pop	r6
    5c12:	08 95       	ret

00005c14 <pattern_popcorn>:
	};
}


void pattern_popcorn(void)
{
    5c14:	2f 92       	push	r2
    5c16:	3f 92       	push	r3
    5c18:	4f 92       	push	r4
    5c1a:	5f 92       	push	r5
    5c1c:	6f 92       	push	r6
    5c1e:	7f 92       	push	r7
    5c20:	8f 92       	push	r8
    5c22:	9f 92       	push	r9
    5c24:	af 92       	push	r10
    5c26:	bf 92       	push	r11
    5c28:	cf 92       	push	r12
    5c2a:	df 92       	push	r13
    5c2c:	ef 92       	push	r14
    5c2e:	ff 92       	push	r15
    5c30:	0f 93       	push	r16
    5c32:	1f 93       	push	r17
    5c34:	df 93       	push	r29
    5c36:	cf 93       	push	r28
    5c38:	cd b7       	in	r28, 0x3d	; 61
    5c3a:	de b7       	in	r29, 0x3e	; 62
    5c3c:	cf 5f       	subi	r28, 0xFF	; 255
    5c3e:	d1 40       	sbci	r29, 0x01	; 1
    5c40:	0f b6       	in	r0, 0x3f	; 63
    5c42:	f8 94       	cli
    5c44:	de bf       	out	0x3e, r29	; 62
    5c46:	0f be       	out	0x3f, r0	; 63
    5c48:	cd bf       	out	0x3d, r28	; 61

	unsigned char deadmark;
	
	char alive;
	
	fallout = FALSE;
    5c4a:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    5c4e:	80 91 f5 01 	lds	r24, 0x01F5
    5c52:	90 91 f6 01 	lds	r25, 0x01F6
    5c56:	90 93 0b 02 	sts	0x020B, r25
    5c5a:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(POPCORN_FRAMERATE);
    5c5e:	8c e3       	ldi	r24, 0x3C	; 60
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    5c66:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    5c6a:	8f ef       	ldi	r24, 0xFF	; 255
    5c6c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    5c70:	1e 01       	movw	r2, r28
    5c72:	08 94       	sec
    5c74:	21 1c       	adc	r2, r1
    5c76:	31 1c       	adc	r3, r1
    5c78:	8e 01       	movw	r16, r28
    5c7a:	0f 57       	subi	r16, 0x7F	; 127
    5c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c7e:	71 01       	movw	r14, r2
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	dd 24       	eor	r13, r13

	//init active list
	index=0;
	while(index != POPCORN_NUMBEROF)
    5c84:	59 e2       	ldi	r21, 0x29	; 41
    5c86:	a5 2e       	mov	r10, r21
    5c88:	b1 2c       	mov	r11, r1
    5c8a:	ac 0e       	add	r10, r28
    5c8c:	bd 1e       	adc	r11, r29
	{
		active_list[index].x=x;
    5c8e:	d7 01       	movw	r26, r14
    5c90:	9c 93       	st	X, r25
		active_list[index].z=z;
    5c92:	11 96       	adiw	r26, 0x01	; 1
    5c94:	dc 92       	st	X, r13
		
		point[index].position_x= 0;
    5c96:	f8 01       	movw	r30, r16
    5c98:	11 82       	std	Z+1, r1	; 0x01
    5c9a:	10 82       	st	Z, r1
		point[index].position_y= 0;
    5c9c:	13 82       	std	Z+3, r1	; 0x03
    5c9e:	12 82       	std	Z+2, r1	; 0x02
		point[index].position_z= 0;
    5ca0:	15 82       	std	Z+5, r1	; 0x05
    5ca2:	14 82       	std	Z+4, r1	; 0x04
		point[index].speed_x=0;
    5ca4:	17 82       	std	Z+7, r1	; 0x07
    5ca6:	16 82       	std	Z+6, r1	; 0x06
		point[index].speed_y=0;
    5ca8:	11 86       	std	Z+9, r1	; 0x09
    5caa:	10 86       	std	Z+8, r1	; 0x08
		point[index].speed_z=0;
    5cac:	13 86       	std	Z+11, r1	; 0x0b
    5cae:	12 86       	std	Z+10, r1	; 0x0a
		point[index].accel_x=0;
    5cb0:	15 86       	std	Z+13, r1	; 0x0d
    5cb2:	14 86       	std	Z+12, r1	; 0x0c
		point[index].accel_y=0;
    5cb4:	17 86       	std	Z+15, r1	; 0x0f
    5cb6:	16 86       	std	Z+14, r1	; 0x0e
		point[index].accel_z=0;
    5cb8:	11 8a       	std	Z+17, r1	; 0x11
    5cba:	10 8a       	std	Z+16, r1	; 0x10
		point[index].active=FALSE;
    5cbc:	12 8a       	std	Z+18, r1	; 0x12
		
		led_point(x,7,z,TRUE);
    5cbe:	89 2f       	mov	r24, r25
    5cc0:	67 e0       	ldi	r22, 0x07	; 7
    5cc2:	4d 2d       	mov	r20, r13
    5cc4:	21 e0       	ldi	r18, 0x01	; 1
    5cc6:	c3 50       	subi	r28, 0x03	; 3
    5cc8:	de 4f       	sbci	r29, 0xFE	; 254
    5cca:	98 83       	st	Y, r25
    5ccc:	cd 5f       	subi	r28, 0xFD	; 253
    5cce:	d1 40       	sbci	r29, 0x01	; 1
    5cd0:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
		
		x++;
    5cd4:	c3 50       	subi	r28, 0x03	; 3
    5cd6:	de 4f       	sbci	r29, 0xFE	; 254
    5cd8:	98 81       	ld	r25, Y
    5cda:	cd 5f       	subi	r28, 0xFD	; 253
    5cdc:	d1 40       	sbci	r29, 0x01	; 1
    5cde:	9f 5f       	subi	r25, 0xFF	; 255
		if(x==8)
    5ce0:	98 30       	cpi	r25, 0x08	; 8
    5ce2:	11 f4       	brne	.+4      	; 0x5ce8 <pattern_popcorn+0xd4>
		{
			x=0;
			z++;
    5ce4:	d3 94       	inc	r13
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	22 e0       	ldi	r18, 0x02	; 2
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	e2 0e       	add	r14, r18
    5cee:	f3 1e       	adc	r15, r19
    5cf0:	0d 5e       	subi	r16, 0xED	; 237
    5cf2:	1f 4f       	sbci	r17, 0xFF	; 255
	led_blank();
	led_plane_intensity_all(255);	

	//init active list
	index=0;
	while(index != POPCORN_NUMBEROF)
    5cf4:	ea 14       	cp	r14, r10
    5cf6:	fb 04       	cpc	r15, r11
    5cf8:	51 f6       	brne	.-108    	; 0x5c8e <pattern_popcorn+0x7a>
    5cfa:	87 01       	movw	r16, r14
		};
		index++;
	};

	//init inactive list
	while(index!=64)
    5cfc:	41 e8       	ldi	r20, 0x81	; 129
    5cfe:	e4 2e       	mov	r14, r20
    5d00:	f1 2c       	mov	r15, r1
    5d02:	ec 0e       	add	r14, r28
    5d04:	fd 1e       	adc	r15, r29
	{
		inactive_list[index-POPCORN_NUMBEROF].x=x;
    5d06:	d8 01       	movw	r26, r16
    5d08:	9c 93       	st	X, r25
		inactive_list[index-POPCORN_NUMBEROF].z=z;
    5d0a:	11 96       	adiw	r26, 0x01	; 1
    5d0c:	dc 92       	st	X, r13
		
		led_point(x,7,z,TRUE);
    5d0e:	89 2f       	mov	r24, r25
    5d10:	67 e0       	ldi	r22, 0x07	; 7
    5d12:	4d 2d       	mov	r20, r13
    5d14:	21 e0       	ldi	r18, 0x01	; 1
    5d16:	c3 50       	subi	r28, 0x03	; 3
    5d18:	de 4f       	sbci	r29, 0xFE	; 254
    5d1a:	98 83       	st	Y, r25
    5d1c:	cd 5f       	subi	r28, 0xFD	; 253
    5d1e:	d1 40       	sbci	r29, 0x01	; 1
    5d20:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
		
		x++;
    5d24:	c3 50       	subi	r28, 0x03	; 3
    5d26:	de 4f       	sbci	r29, 0xFE	; 254
    5d28:	98 81       	ld	r25, Y
    5d2a:	cd 5f       	subi	r28, 0xFD	; 253
    5d2c:	d1 40       	sbci	r29, 0x01	; 1
    5d2e:	9f 5f       	subi	r25, 0xFF	; 255
		if(x==8)
    5d30:	98 30       	cpi	r25, 0x08	; 8
    5d32:	11 f4       	brne	.+4      	; 0x5d38 <pattern_popcorn+0x124>
		{
			x=0;
			z++;
    5d34:	d3 94       	inc	r13
    5d36:	90 e0       	ldi	r25, 0x00	; 0
    5d38:	0e 5f       	subi	r16, 0xFE	; 254
    5d3a:	1f 4f       	sbci	r17, 0xFF	; 255
		};
		index++;
	};

	//init inactive list
	while(index!=64)
    5d3c:	0e 15       	cp	r16, r14
    5d3e:	1f 05       	cpc	r17, r15
    5d40:	11 f7       	brne	.-60     	; 0x5d06 <pattern_popcorn+0xf2>
    5d42:	81 c0       	rjmp	.+258    	; 0x5e46 <pattern_popcorn+0x232>

	//running process
	while(!fallout && (!duration || time))
	{
		//process running pattern
		led_waitframe(1);
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5d4c:	31 e8       	ldi	r19, 0x81	; 129
    5d4e:	e3 2e       	mov	r14, r19
    5d50:	f1 2c       	mov	r15, r1
    5d52:	ec 0e       	add	r14, r28
    5d54:	fd 1e       	adc	r15, r29
    5d56:	61 01       	movw	r12, r2
		
		index=0;
		while(index != POPCORN_NUMBEROF)
		{
			//erase current position
			physical_plot(&point[index], FALSE);
    5d58:	c7 01       	movw	r24, r14
    5d5a:	60 e0       	ldi	r22, 0x00	; 0
    5d5c:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
			
			//move to next position
			physical_process(&point[index]);
    5d60:	c7 01       	movw	r24, r14
    5d62:	0e 94 f5 29 	call	0x53ea	; 0x53ea <physical_process>
			
			//if point is finished
			if(point[index].active==FALSE)
    5d66:	f7 01       	movw	r30, r14
    5d68:	82 89       	ldd	r24, Z+18	; 0x12
    5d6a:	88 23       	and	r24, r24
    5d6c:	09 f0       	breq	.+2      	; 0x5d70 <pattern_popcorn+0x15c>
    5d6e:	5a c0       	rjmp	.+180    	; 0x5e24 <pattern_popcorn+0x210>
			{
				//turn on floor point
				x=active_list[index].x;
    5d70:	d6 01       	movw	r26, r12
    5d72:	1c 91       	ld	r17, X
				z=active_list[index].z;
    5d74:	11 96       	adiw	r26, 0x01	; 1
    5d76:	0c 91       	ld	r16, X
				led_point(x, 7, z, TRUE);
    5d78:	81 2f       	mov	r24, r17
    5d7a:	67 e0       	ldi	r22, 0x07	; 7
    5d7c:	40 2f       	mov	r20, r16
    5d7e:	21 e0       	ldi	r18, 0x01	; 1
    5d80:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
				
				//swap with another column from the inactive list
				index2 = rand()%(64-POPCORN_NUMBEROF);
    5d84:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5d88:	6c e2       	ldi	r22, 0x2C	; 44
    5d8a:	70 e0       	ldi	r23, 0x00	; 0
    5d8c:	0e 94 4b 4e 	call	0x9c96	; 0x9c96 <__divmodhi4>
    5d90:	fc 01       	movw	r30, r24
				active_list[index].x=inactive_list[index2].x;
    5d92:	ee 0f       	add	r30, r30
    5d94:	ff 1f       	adc	r31, r31
    5d96:	21 e0       	ldi	r18, 0x01	; 1
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	2c 0f       	add	r18, r28
    5d9c:	3d 1f       	adc	r19, r29
    5d9e:	e2 0f       	add	r30, r18
    5da0:	f3 1f       	adc	r31, r19
    5da2:	80 a5       	ldd	r24, Z+40	; 0x28
    5da4:	d6 01       	movw	r26, r12
    5da6:	8c 93       	st	X, r24
				active_list[index].z=inactive_list[index2].z;
    5da8:	91 a5       	ldd	r25, Z+41	; 0x29
    5daa:	11 96       	adiw	r26, 0x01	; 1
    5dac:	9c 93       	st	X, r25
    5dae:	11 97       	sbiw	r26, 0x01	; 1
				inactive_list[index2].x=x;
    5db0:	10 a7       	std	Z+40, r17	; 0x28
				inactive_list[index2].z=z;
    5db2:	01 a7       	std	Z+41, r16	; 0x29
				
				//setup new column
				point[index].position_x= (((unsigned int)(active_list[index].x))<<12) + 0x800;
    5db4:	8c 91       	ld	r24, X
    5db6:	18 2f       	mov	r17, r24
    5db8:	12 95       	swap	r17
    5dba:	10 7f       	andi	r17, 0xF0	; 240
    5dbc:	00 e0       	ldi	r16, 0x00	; 0
    5dbe:	00 50       	subi	r16, 0x00	; 0
    5dc0:	18 4f       	sbci	r17, 0xF8	; 248
    5dc2:	f7 01       	movw	r30, r14
    5dc4:	11 83       	std	Z+1, r17	; 0x01
    5dc6:	00 83       	st	Z, r16
				point[index].position_y= 0x7800;
    5dc8:	53 82       	std	Z+3, r5	; 0x03
    5dca:	42 82       	std	Z+2, r4	; 0x02
				point[index].position_z= (((unsigned int)(active_list[index].z))<<12) + 0x800;;
    5dcc:	b9 2e       	mov	r11, r25
    5dce:	b2 94       	swap	r11
    5dd0:	90 ef       	ldi	r25, 0xF0	; 240
    5dd2:	b9 22       	and	r11, r25
    5dd4:	aa 24       	eor	r10, r10
    5dd6:	20 e0       	ldi	r18, 0x00	; 0
    5dd8:	38 e0       	ldi	r19, 0x08	; 8
    5dda:	a2 0e       	add	r10, r18
    5ddc:	b3 1e       	adc	r11, r19
    5dde:	b5 82       	std	Z+5, r11	; 0x05
    5de0:	a4 82       	std	Z+4, r10	; 0x04
				point[index].speed_x=0;
    5de2:	17 82       	std	Z+7, r1	; 0x07
    5de4:	16 82       	std	Z+6, r1	; 0x06
				point[index].speed_y=-(rand()&4095);
    5de6:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5dea:	9f 70       	andi	r25, 0x0F	; 15
    5dec:	90 95       	com	r25
    5dee:	81 95       	neg	r24
    5df0:	9f 4f       	sbci	r25, 0xFF	; 255
    5df2:	d7 01       	movw	r26, r14
    5df4:	19 96       	adiw	r26, 0x09	; 9
    5df6:	9c 93       	st	X, r25
    5df8:	8e 93       	st	-X, r24
    5dfa:	18 97       	sbiw	r26, 0x08	; 8
				point[index].speed_z=0;
    5dfc:	1b 96       	adiw	r26, 0x0b	; 11
    5dfe:	1c 92       	st	X, r1
    5e00:	1e 92       	st	-X, r1
    5e02:	1a 97       	sbiw	r26, 0x0a	; 10
				point[index].accel_x=0;
    5e04:	1d 96       	adiw	r26, 0x0d	; 13
    5e06:	1c 92       	st	X, r1
    5e08:	1e 92       	st	-X, r1
    5e0a:	1c 97       	sbiw	r26, 0x0c	; 12
				point[index].accel_y=297;
    5e0c:	1f 96       	adiw	r26, 0x0f	; 15
    5e0e:	7c 92       	st	X, r7
    5e10:	6e 92       	st	-X, r6
    5e12:	1e 97       	sbiw	r26, 0x0e	; 14
				point[index].accel_z=0;
    5e14:	51 96       	adiw	r26, 0x11	; 17
    5e16:	1c 92       	st	X, r1
    5e18:	1e 92       	st	-X, r1
    5e1a:	50 97       	sbiw	r26, 0x10	; 16
				point[index].active=TRUE;
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	52 96       	adiw	r26, 0x12	; 18
    5e20:	8c 93       	st	X, r24
    5e22:	04 c0       	rjmp	.+8      	; 0x5e2c <pattern_popcorn+0x218>
				
			}
			else
			//else plot new point position
				physical_plot(&point[index], TRUE);	
    5e24:	c7 01       	movw	r24, r14
    5e26:	61 e0       	ldi	r22, 0x01	; 1
    5e28:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
    5e2c:	e3 e1       	ldi	r30, 0x13	; 19
    5e2e:	f0 e0       	ldi	r31, 0x00	; 0
    5e30:	ee 0e       	add	r14, r30
    5e32:	ff 1e       	adc	r15, r31
    5e34:	22 e0       	ldi	r18, 0x02	; 2
    5e36:	30 e0       	ldi	r19, 0x00	; 0
    5e38:	c2 0e       	add	r12, r18
    5e3a:	d3 1e       	adc	r13, r19
	{
		//process running pattern
		led_waitframe(1);
		
		index=0;
		while(index != POPCORN_NUMBEROF)
    5e3c:	e8 14       	cp	r14, r8
    5e3e:	f9 04       	cpc	r15, r9
    5e40:	09 f0       	breq	.+2      	; 0x5e44 <pattern_popcorn+0x230>
    5e42:	8a cf       	rjmp	.-236    	; 0x5d58 <pattern_popcorn+0x144>
    5e44:	0d c0       	rjmp	.+26     	; 0x5e60 <pattern_popcorn+0x24c>
				inactive_list[index2].x=x;
				inactive_list[index2].z=z;
				
				//setup new column
				point[index].position_x= (((unsigned int)(active_list[index].x))<<12) + 0x800;
				point[index].position_y= 0x7800;
    5e46:	41 2c       	mov	r4, r1
    5e48:	88 e7       	ldi	r24, 0x78	; 120
    5e4a:	58 2e       	mov	r5, r24
				point[index].position_z= (((unsigned int)(active_list[index].z))<<12) + 0x800;;
				point[index].speed_x=0;
				point[index].speed_y=-(rand()&4095);
				point[index].speed_z=0;
				point[index].accel_x=0;
				point[index].accel_y=297;
    5e4c:	09 e2       	ldi	r16, 0x29	; 41
    5e4e:	60 2e       	mov	r6, r16
    5e50:	01 e0       	ldi	r16, 0x01	; 1
    5e52:	70 2e       	mov	r7, r16
	{
		//process running pattern
		led_waitframe(1);
		
		index=0;
		while(index != POPCORN_NUMBEROF)
    5e54:	1d ef       	ldi	r17, 0xFD	; 253
    5e56:	81 2e       	mov	r8, r17
    5e58:	11 e0       	ldi	r17, 0x01	; 1
    5e5a:	91 2e       	mov	r9, r17
    5e5c:	8c 0e       	add	r8, r28
    5e5e:	9d 1e       	adc	r9, r29
		};
		index++;
	};

	//running process
	while(!fallout && (!duration || time))
    5e60:	80 91 f4 01 	lds	r24, 0x01F4
    5e64:	88 23       	and	r24, r24
    5e66:	09 f0       	breq	.+2      	; 0x5e6a <pattern_popcorn+0x256>
    5e68:	06 c1       	rjmp	.+524    	; 0x6076 <pattern_popcorn+0x462>
    5e6a:	80 91 f5 01 	lds	r24, 0x01F5
    5e6e:	90 91 f6 01 	lds	r25, 0x01F6
    5e72:	89 2b       	or	r24, r25
    5e74:	09 f4       	brne	.+2      	; 0x5e78 <pattern_popcorn+0x264>
    5e76:	66 cf       	rjmp	.-308    	; 0x5d44 <pattern_popcorn+0x130>
    5e78:	80 91 0a 02 	lds	r24, 0x020A
    5e7c:	90 91 0b 02 	lds	r25, 0x020B
    5e80:	89 2b       	or	r24, r25
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <pattern_popcorn+0x272>
    5e84:	5f cf       	rjmp	.-322    	; 0x5d44 <pattern_popcorn+0x130>
    5e86:	f7 c0       	rjmp	.+494    	; 0x6076 <pattern_popcorn+0x462>
	deadmark=0;
	alive=TRUE;
	while(alive && !fallout)
	{
		//process running pattern
		led_waitframe(1);
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    5e90:	b1 e8       	ldi	r27, 0x81	; 129
    5e92:	eb 2e       	mov	r14, r27
    5e94:	f1 2c       	mov	r15, r1
    5e96:	ec 0e       	add	r14, r28
    5e98:	fd 1e       	adc	r15, r29
    5e9a:	61 01       	movw	r12, r2
    5e9c:	55 24       	eor	r5, r5
		index=0;
		alive=FALSE;
		while(index != POPCORN_NUMBEROF)
		{
			//erase current position
			physical_plot(&point[index], FALSE);
    5e9e:	c7 01       	movw	r24, r14
    5ea0:	60 e0       	ldi	r22, 0x00	; 0
    5ea2:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
			
			//move to next position
			physical_process(&point[index]);
    5ea6:	c7 01       	movw	r24, r14
    5ea8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <physical_process>
			
			//if point is finished
			if(point[index].active==FALSE)
    5eac:	d7 01       	movw	r26, r14
    5eae:	52 96       	adiw	r26, 0x12	; 18
    5eb0:	8c 91       	ld	r24, X
    5eb2:	52 97       	sbiw	r26, 0x12	; 18
    5eb4:	88 23       	and	r24, r24
    5eb6:	09 f0       	breq	.+2      	; 0x5eba <pattern_popcorn+0x2a6>
    5eb8:	c3 c0       	rjmp	.+390    	; 0x6040 <pattern_popcorn+0x42c>
			{
				//if this point does not have gravity, swap column onto the deadlist (confused yet?)
				if(point[index].accel_y==0)
    5eba:	1e 96       	adiw	r26, 0x0e	; 14
    5ebc:	8d 91       	ld	r24, X+
    5ebe:	9c 91       	ld	r25, X
    5ec0:	1f 97       	sbiw	r26, 0x0f	; 15
    5ec2:	89 2b       	or	r24, r25
    5ec4:	09 f0       	breq	.+2      	; 0x5ec8 <pattern_popcorn+0x2b4>
    5ec6:	55 c0       	rjmp	.+170    	; 0x5f72 <pattern_popcorn+0x35e>
				{
					//inactive but live column available?
					if(deadmark < 64-POPCORN_NUMBEROF)
    5ec8:	bb e2       	ldi	r27, 0x2B	; 43
    5eca:	b4 15       	cp	r27, r4
    5ecc:	08 f4       	brcc	.+2      	; 0x5ed0 <pattern_popcorn+0x2bc>
    5ece:	be c0       	rjmp	.+380    	; 0x604c <pattern_popcorn+0x438>
					{
						alive=TRUE;
						x=active_list[index].x;
    5ed0:	f6 01       	movw	r30, r12
    5ed2:	20 81       	ld	r18, Z
						z=active_list[index].z;
    5ed4:	31 81       	ldd	r19, Z+1	; 0x01
						
						//swap with another column from the inactive list
						index2 = deadmark++;
    5ed6:	e4 2d       	mov	r30, r4
    5ed8:	f0 e0       	ldi	r31, 0x00	; 0
    5eda:	43 94       	inc	r4
						active_list[index].x=inactive_list[index2].x;
    5edc:	ee 0f       	add	r30, r30
    5ede:	ff 1f       	adc	r31, r31
    5ee0:	81 e0       	ldi	r24, 0x01	; 1
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	8c 0f       	add	r24, r28
    5ee6:	9d 1f       	adc	r25, r29
    5ee8:	e8 0f       	add	r30, r24
    5eea:	f9 1f       	adc	r31, r25
    5eec:	80 a5       	ldd	r24, Z+40	; 0x28
    5eee:	d6 01       	movw	r26, r12
    5ef0:	8c 93       	st	X, r24
						active_list[index].z=inactive_list[index2].z;
    5ef2:	91 a5       	ldd	r25, Z+41	; 0x29
    5ef4:	11 96       	adiw	r26, 0x01	; 1
    5ef6:	9c 93       	st	X, r25
    5ef8:	11 97       	sbiw	r26, 0x01	; 1
						inactive_list[index2].x=x;
    5efa:	20 a7       	std	Z+40, r18	; 0x28
						inactive_list[index2].z=z;
    5efc:	31 a7       	std	Z+41, r19	; 0x29
						
						//setup new column, but without gravity
						point[index].position_x= (((unsigned int)(active_list[index].x))<<12) + 0x800;
    5efe:	8c 91       	ld	r24, X
    5f00:	b8 2e       	mov	r11, r24
    5f02:	b2 94       	swap	r11
    5f04:	70 ef       	ldi	r23, 0xF0	; 240
    5f06:	b7 22       	and	r11, r23
    5f08:	aa 24       	eor	r10, r10
    5f0a:	e0 e0       	ldi	r30, 0x00	; 0
    5f0c:	f8 e0       	ldi	r31, 0x08	; 8
    5f0e:	ae 0e       	add	r10, r30
    5f10:	bf 1e       	adc	r11, r31
    5f12:	d7 01       	movw	r26, r14
    5f14:	11 96       	adiw	r26, 0x01	; 1
    5f16:	bc 92       	st	X, r11
    5f18:	ae 92       	st	-X, r10
						point[index].position_y= 0x7800;
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	38 e7       	ldi	r19, 0x78	; 120
    5f1e:	13 96       	adiw	r26, 0x03	; 3
    5f20:	3c 93       	st	X, r19
    5f22:	2e 93       	st	-X, r18
    5f24:	12 97       	sbiw	r26, 0x02	; 2
						point[index].position_z= (((unsigned int)(active_list[index].z))<<12) + 0x800;;
    5f26:	99 2e       	mov	r9, r25
    5f28:	92 94       	swap	r9
    5f2a:	60 ef       	ldi	r22, 0xF0	; 240
    5f2c:	96 22       	and	r9, r22
    5f2e:	88 24       	eor	r8, r8
    5f30:	80 e0       	ldi	r24, 0x00	; 0
    5f32:	98 e0       	ldi	r25, 0x08	; 8
    5f34:	88 0e       	add	r8, r24
    5f36:	99 1e       	adc	r9, r25
    5f38:	15 96       	adiw	r26, 0x05	; 5
    5f3a:	9c 92       	st	X, r9
    5f3c:	8e 92       	st	-X, r8
    5f3e:	14 97       	sbiw	r26, 0x04	; 4
						point[index].speed_x=0;
    5f40:	17 96       	adiw	r26, 0x07	; 7
    5f42:	1c 92       	st	X, r1
    5f44:	1e 92       	st	-X, r1
    5f46:	16 97       	sbiw	r26, 0x06	; 6
						point[index].speed_y=0-400-(rand()&4095);
    5f48:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5f4c:	9f 70       	andi	r25, 0x0F	; 15
    5f4e:	a0 e7       	ldi	r26, 0x70	; 112
    5f50:	be ef       	ldi	r27, 0xFE	; 254
    5f52:	a8 1b       	sub	r26, r24
    5f54:	b9 0b       	sbc	r27, r25
    5f56:	f7 01       	movw	r30, r14
    5f58:	b1 87       	std	Z+9, r27	; 0x09
    5f5a:	a0 87       	std	Z+8, r26	; 0x08
						point[index].speed_z=0;
    5f5c:	13 86       	std	Z+11, r1	; 0x0b
    5f5e:	12 86       	std	Z+10, r1	; 0x0a
						point[index].accel_x=0;
    5f60:	15 86       	std	Z+13, r1	; 0x0d
    5f62:	14 86       	std	Z+12, r1	; 0x0c
						point[index].accel_y=0;
    5f64:	17 86       	std	Z+15, r1	; 0x0f
    5f66:	16 86       	std	Z+14, r1	; 0x0e
						point[index].accel_z=0;
    5f68:	11 8a       	std	Z+17, r1	; 0x11
    5f6a:	10 8a       	std	Z+16, r1	; 0x10
						point[index].active=TRUE;
    5f6c:	81 e0       	ldi	r24, 0x01	; 1
    5f6e:	82 8b       	std	Z+18, r24	; 0x12
    5f70:	6b c0       	rjmp	.+214    	; 0x6048 <pattern_popcorn+0x434>
				}
				//if inactive column did have gravity, swap with with an alive but inactive random column
				else
				{
					//inactive but live column available?
					if(deadmark < 64-POPCORN_NUMBEROF)
    5f72:	fb e2       	ldi	r31, 0x2B	; 43
    5f74:	f4 15       	cp	r31, r4
    5f76:	08 f4       	brcc	.+2      	; 0x5f7a <pattern_popcorn+0x366>
    5f78:	69 c0       	rjmp	.+210    	; 0x604c <pattern_popcorn+0x438>
					{
						alive=TRUE;
						//turn on floor point
						x=active_list[index].x;
    5f7a:	d6 01       	movw	r26, r12
    5f7c:	1c 91       	ld	r17, X
						z=active_list[index].z;
    5f7e:	11 96       	adiw	r26, 0x01	; 1
    5f80:	0c 91       	ld	r16, X
						led_point(x, 7, z, TRUE);
    5f82:	81 2f       	mov	r24, r17
    5f84:	67 e0       	ldi	r22, 0x07	; 7
    5f86:	40 2f       	mov	r20, r16
    5f88:	21 e0       	ldi	r18, 0x01	; 1
    5f8a:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
						
						//swap with another column from the inactive list after the deadmark
						index2 = deadmark + rand()%(64-POPCORN_NUMBEROF-deadmark);
    5f8e:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    5f92:	24 2d       	mov	r18, r4
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	6c e2       	ldi	r22, 0x2C	; 44
    5f98:	70 e0       	ldi	r23, 0x00	; 0
    5f9a:	62 1b       	sub	r22, r18
    5f9c:	73 0b       	sbc	r23, r19
    5f9e:	0e 94 4b 4e 	call	0x9c96	; 0x9c96 <__divmodhi4>
    5fa2:	fc 01       	movw	r30, r24
    5fa4:	e2 0f       	add	r30, r18
    5fa6:	f3 1f       	adc	r31, r19
						active_list[index].x=inactive_list[index2].x;
    5fa8:	ee 0f       	add	r30, r30
    5faa:	ff 1f       	adc	r31, r31
    5fac:	21 e0       	ldi	r18, 0x01	; 1
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	2c 0f       	add	r18, r28
    5fb2:	3d 1f       	adc	r19, r29
    5fb4:	e2 0f       	add	r30, r18
    5fb6:	f3 1f       	adc	r31, r19
    5fb8:	80 a5       	ldd	r24, Z+40	; 0x28
    5fba:	d6 01       	movw	r26, r12
    5fbc:	8c 93       	st	X, r24
						active_list[index].z=inactive_list[index2].z;
    5fbe:	91 a5       	ldd	r25, Z+41	; 0x29
    5fc0:	11 96       	adiw	r26, 0x01	; 1
    5fc2:	9c 93       	st	X, r25
    5fc4:	11 97       	sbiw	r26, 0x01	; 1
						inactive_list[index2].x=x;
    5fc6:	10 a7       	std	Z+40, r17	; 0x28
						inactive_list[index2].z=z;
    5fc8:	01 a7       	std	Z+41, r16	; 0x29
						
						//setup new column, but without gravity
						point[index].position_x= (((unsigned int)(active_list[index].x))<<12) + 0x800;
    5fca:	8c 91       	ld	r24, X
    5fcc:	18 2f       	mov	r17, r24
    5fce:	12 95       	swap	r17
    5fd0:	10 7f       	andi	r17, 0xF0	; 240
    5fd2:	00 e0       	ldi	r16, 0x00	; 0
    5fd4:	00 50       	subi	r16, 0x00	; 0
    5fd6:	18 4f       	sbci	r17, 0xF8	; 248
    5fd8:	f7 01       	movw	r30, r14
    5fda:	11 83       	std	Z+1, r17	; 0x01
    5fdc:	00 83       	st	Z, r16
						point[index].position_y= 0x7800;
    5fde:	20 e0       	ldi	r18, 0x00	; 0
    5fe0:	38 e7       	ldi	r19, 0x78	; 120
    5fe2:	33 83       	std	Z+3, r19	; 0x03
    5fe4:	22 83       	std	Z+2, r18	; 0x02
						point[index].position_z= (((unsigned int)(active_list[index].z))<<12) + 0x800;;
    5fe6:	79 2e       	mov	r7, r25
    5fe8:	72 94       	swap	r7
    5fea:	40 ef       	ldi	r20, 0xF0	; 240
    5fec:	74 22       	and	r7, r20
    5fee:	66 24       	eor	r6, r6
    5ff0:	80 e0       	ldi	r24, 0x00	; 0
    5ff2:	98 e0       	ldi	r25, 0x08	; 8
    5ff4:	68 0e       	add	r6, r24
    5ff6:	79 1e       	adc	r7, r25
    5ff8:	75 82       	std	Z+5, r7	; 0x05
    5ffa:	64 82       	std	Z+4, r6	; 0x04
						point[index].speed_x=0;
    5ffc:	17 82       	std	Z+7, r1	; 0x07
    5ffe:	16 82       	std	Z+6, r1	; 0x06
						point[index].speed_y=0-400-(rand()&4095);
    6000:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    6004:	9f 70       	andi	r25, 0x0F	; 15
    6006:	e0 e7       	ldi	r30, 0x70	; 112
    6008:	fe ef       	ldi	r31, 0xFE	; 254
    600a:	e8 1b       	sub	r30, r24
    600c:	f9 0b       	sbc	r31, r25
    600e:	d7 01       	movw	r26, r14
    6010:	19 96       	adiw	r26, 0x09	; 9
    6012:	fc 93       	st	X, r31
    6014:	ee 93       	st	-X, r30
    6016:	18 97       	sbiw	r26, 0x08	; 8
						point[index].speed_z=0;
    6018:	1b 96       	adiw	r26, 0x0b	; 11
    601a:	1c 92       	st	X, r1
    601c:	1e 92       	st	-X, r1
    601e:	1a 97       	sbiw	r26, 0x0a	; 10
						point[index].accel_x=0;
    6020:	1d 96       	adiw	r26, 0x0d	; 13
    6022:	1c 92       	st	X, r1
    6024:	1e 92       	st	-X, r1
    6026:	1c 97       	sbiw	r26, 0x0c	; 12
						point[index].accel_y=0;
    6028:	1f 96       	adiw	r26, 0x0f	; 15
    602a:	1c 92       	st	X, r1
    602c:	1e 92       	st	-X, r1
    602e:	1e 97       	sbiw	r26, 0x0e	; 14
						point[index].accel_z=0;
    6030:	51 96       	adiw	r26, 0x11	; 17
    6032:	1c 92       	st	X, r1
    6034:	1e 92       	st	-X, r1
    6036:	50 97       	sbiw	r26, 0x10	; 16
						point[index].active=TRUE;
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	52 96       	adiw	r26, 0x12	; 18
    603c:	8c 93       	st	X, r24
    603e:	04 c0       	rjmp	.+8      	; 0x6048 <pattern_popcorn+0x434>
			}
			else
			{
				//else plot new point position
				alive=TRUE;
				physical_plot(&point[index], TRUE);	
    6040:	c7 01       	movw	r24, r14
    6042:	61 e0       	ldi	r22, 0x01	; 1
    6044:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <physical_plot>
    6048:	55 24       	eor	r5, r5
    604a:	53 94       	inc	r5
    604c:	e3 e1       	ldi	r30, 0x13	; 19
    604e:	f0 e0       	ldi	r31, 0x00	; 0
    6050:	ee 0e       	add	r14, r30
    6052:	ff 1e       	adc	r15, r31
    6054:	22 e0       	ldi	r18, 0x02	; 2
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	c2 0e       	add	r12, r18
    605a:	d3 1e       	adc	r13, r19
		//process running pattern
		led_waitframe(1);
		
		index=0;
		alive=FALSE;
		while(index != POPCORN_NUMBEROF)
    605c:	c2 50       	subi	r28, 0x02	; 2
    605e:	de 4f       	sbci	r29, 0xFE	; 254
    6060:	88 81       	ld	r24, Y
    6062:	99 81       	ldd	r25, Y+1	; 0x01
    6064:	ce 5f       	subi	r28, 0xFE	; 254
    6066:	d1 40       	sbci	r29, 0x01	; 1
    6068:	e8 16       	cp	r14, r24
    606a:	f9 06       	cpc	r15, r25
    606c:	09 f0       	breq	.+2      	; 0x6070 <pattern_popcorn+0x45c>
    606e:	17 cf       	rjmp	.-466    	; 0x5e9e <pattern_popcorn+0x28a>
	//exit process, continue, only remove gravity untill all columns are gone
	//swap is no longer done with a random column from the inactive list
	//swap is done with inactive[deadmark++] until all columns are dead
	deadmark=0;
	alive=TRUE;
	while(alive && !fallout)
    6070:	55 20       	and	r5, r5
    6072:	59 f4       	brne	.+22     	; 0x608a <pattern_popcorn+0x476>
    6074:	0f c0       	rjmp	.+30     	; 0x6094 <pattern_popcorn+0x480>
    6076:	44 24       	eor	r4, r4
		//process running pattern
		led_waitframe(1);
		
		index=0;
		alive=FALSE;
		while(index != POPCORN_NUMBEROF)
    6078:	de 01       	movw	r26, r28
    607a:	a3 50       	subi	r26, 0x03	; 3
    607c:	be 4f       	sbci	r27, 0xFE	; 254
    607e:	c2 50       	subi	r28, 0x02	; 2
    6080:	de 4f       	sbci	r29, 0xFE	; 254
    6082:	b9 83       	std	Y+1, r27	; 0x01
    6084:	a8 83       	st	Y, r26
    6086:	ce 5f       	subi	r28, 0xFE	; 254
    6088:	d1 40       	sbci	r29, 0x01	; 1
	//exit process, continue, only remove gravity untill all columns are gone
	//swap is no longer done with a random column from the inactive list
	//swap is done with inactive[deadmark++] until all columns are dead
	deadmark=0;
	alive=TRUE;
	while(alive && !fallout)
    608a:	80 91 f4 01 	lds	r24, 0x01F4
    608e:	88 23       	and	r24, r24
    6090:	09 f4       	brne	.+2      	; 0x6094 <pattern_popcorn+0x480>
    6092:	fa ce       	rjmp	.-524    	; 0x5e88 <pattern_popcorn+0x274>
				physical_plot(&point[index], TRUE);	
			};
			index++;
		};
	};
}
    6094:	c1 50       	subi	r28, 0x01	; 1
    6096:	de 4f       	sbci	r29, 0xFE	; 254
    6098:	0f b6       	in	r0, 0x3f	; 63
    609a:	f8 94       	cli
    609c:	de bf       	out	0x3e, r29	; 62
    609e:	0f be       	out	0x3f, r0	; 63
    60a0:	cd bf       	out	0x3d, r28	; 61
    60a2:	cf 91       	pop	r28
    60a4:	df 91       	pop	r29
    60a6:	1f 91       	pop	r17
    60a8:	0f 91       	pop	r16
    60aa:	ff 90       	pop	r15
    60ac:	ef 90       	pop	r14
    60ae:	df 90       	pop	r13
    60b0:	cf 90       	pop	r12
    60b2:	bf 90       	pop	r11
    60b4:	af 90       	pop	r10
    60b6:	9f 90       	pop	r9
    60b8:	8f 90       	pop	r8
    60ba:	7f 90       	pop	r7
    60bc:	6f 90       	pop	r6
    60be:	5f 90       	pop	r5
    60c0:	4f 90       	pop	r4
    60c2:	3f 90       	pop	r3
    60c4:	2f 90       	pop	r2
    60c6:	08 95       	ret

000060c8 <pattern_noise_scroll>:
	};
}


void pattern_noise_scroll(void)
{
    60c8:	ff 92       	push	r15
    60ca:	0f 93       	push	r16
    60cc:	1f 93       	push	r17
    60ce:	cf 93       	push	r28
    60d0:	df 93       	push	r29
	uint8_t index=0;
	
	fallout=FALSE;
    60d2:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    60d6:	80 91 f5 01 	lds	r24, 0x01F5
    60da:	90 91 f6 01 	lds	r25, 0x01F6
    60de:	90 93 0b 02 	sts	0x020B, r25
    60e2:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(NOISE_SCROLL_FRAMERATE);
    60e6:	84 e6       	ldi	r24, 0x64	; 100
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_plane_intensity_all(255);	
    60ee:	8f ef       	ldi	r24, 0xFF	; 255
    60f0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    60f4:	19 c0       	rjmp	.+50     	; 0x6128 <pattern_noise_scroll+0x60>

	while(!fallout && (!duration || time))
	{
		led_frame_up();
    60f6:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <led_frame_up>
    60fa:	cf e7       	ldi	r28, 0x7F	; 127
    60fc:	d2 e0       	ldi	r29, 0x02	; 2
		index=0;
		while(index !=8)
			led_frame_bitmap[56+index++] |= (uint8_t)rand() & (uint8_t)rand() & (uint8_t)rand();
    60fe:	18 81       	ld	r17, Y
    6100:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    6104:	f8 2e       	mov	r15, r24
    6106:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    610a:	08 2f       	mov	r16, r24
    610c:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    6110:	0f 21       	and	r16, r15
    6112:	08 23       	and	r16, r24
    6114:	10 2b       	or	r17, r16
    6116:	19 93       	st	Y+, r17

	while(!fallout && (!duration || time))
	{
		led_frame_up();
		index=0;
		while(index !=8)
    6118:	82 e0       	ldi	r24, 0x02	; 2
    611a:	c7 38       	cpi	r28, 0x87	; 135
    611c:	d8 07       	cpc	r29, r24
    611e:	79 f7       	brne	.-34     	; 0x60fe <pattern_noise_scroll+0x36>
			led_frame_bitmap[56+index++] |= (uint8_t)rand() & (uint8_t)rand() & (uint8_t)rand();
		led_waitframe(NOISE_SCROLL_FRAMESTEP);
    6120:	84 e0       	ldi	r24, 0x04	; 4
    6122:	90 e0       	ldi	r25, 0x00	; 0
    6124:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	time = duration;

	led_framerate(NOISE_SCROLL_FRAMERATE);
	led_plane_intensity_all(255);	

	while(!fallout && (!duration || time))
    6128:	80 91 f4 01 	lds	r24, 0x01F4
    612c:	88 23       	and	r24, r24
    612e:	61 f4       	brne	.+24     	; 0x6148 <pattern_noise_scroll+0x80>
    6130:	80 91 f5 01 	lds	r24, 0x01F5
    6134:	90 91 f6 01 	lds	r25, 0x01F6
    6138:	89 2b       	or	r24, r25
    613a:	e9 f2       	breq	.-70     	; 0x60f6 <pattern_noise_scroll+0x2e>
    613c:	80 91 0a 02 	lds	r24, 0x020A
    6140:	90 91 0b 02 	lds	r25, 0x020B
    6144:	89 2b       	or	r24, r25
    6146:	b9 f6       	brne	.-82     	; 0x60f6 <pattern_noise_scroll+0x2e>
		index=0;
		while(index !=8)
			led_frame_bitmap[56+index++] |= (uint8_t)rand() & (uint8_t)rand() & (uint8_t)rand();
		led_waitframe(NOISE_SCROLL_FRAMESTEP);
	}
	led_blank();
    6148:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
}
    614c:	df 91       	pop	r29
    614e:	cf 91       	pop	r28
    6150:	1f 91       	pop	r17
    6152:	0f 91       	pop	r16
    6154:	ff 90       	pop	r15
    6156:	08 95       	ret

00006158 <pattern_rotate1>:
	};
}


void pattern_rotate1(void)
{
    6158:	4f 92       	push	r4
    615a:	5f 92       	push	r5
    615c:	6f 92       	push	r6
    615e:	7f 92       	push	r7
    6160:	8f 92       	push	r8
    6162:	9f 92       	push	r9
    6164:	af 92       	push	r10
    6166:	bf 92       	push	r11
    6168:	cf 92       	push	r12
    616a:	df 92       	push	r13
    616c:	ef 92       	push	r14
    616e:	ff 92       	push	r15
    6170:	0f 93       	push	r16
    6172:	1f 93       	push	r17
    6174:	df 93       	push	r29
    6176:	cf 93       	push	r28
    6178:	cd b7       	in	r28, 0x3d	; 61
    617a:	de b7       	in	r29, 0x3e	; 62
    617c:	2c 97       	sbiw	r28, 0x0c	; 12
    617e:	0f b6       	in	r0, 0x3f	; 63
    6180:	f8 94       	cli
    6182:	de bf       	out	0x3e, r29	; 62
    6184:	0f be       	out	0x3f, r0	; 63
    6186:	cd bf       	out	0x3d, r28	; 61
	enum {LEFT=1, RIGHT, TOP, BOTTOM, FRONT, BACK};
	enum {PERL, PERR, PERU, PERD, PERC, PERA, FRML, FRMR, FRMU, FRMD, FRMB, FRMF};

	uint8_t place=TOP, index, count, oplist[12], lastop=FRMU;
	
	fallout=FALSE;
    6188:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    618c:	80 91 f5 01 	lds	r24, 0x01F5
    6190:	90 91 f6 01 	lds	r25, 0x01F6
    6194:	90 93 0b 02 	sts	0x020B, r25
    6198:	80 93 0a 02 	sts	0x020A, r24
	
	led_framerate(100);
    619c:	84 e6       	ldi	r24, 0x64	; 100
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    61a4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    61a8:	8f ef       	ldi	r24, 0xFF	; 255
    61aa:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    61ae:	16 e0       	ldi	r17, 0x06	; 6
    61b0:	25 c0       	rjmp	.+74     	; 0x61fc <pattern_rotate1+0xa4>
	
	count=6;
	while(count-- && !fallout)
	{
		led_plane_y_left(0);
    61b2:	80 e0       	ldi	r24, 0x00	; 0
    61b4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <led_plane_y_left>
		led_frame_bitmap[0] |=0x00;
		led_frame_bitmap[1] |=0x01;
    61b8:	80 91 48 02 	lds	r24, 0x0248
    61bc:	81 60       	ori	r24, 0x01	; 1
    61be:	80 93 48 02 	sts	0x0248, r24
		led_frame_bitmap[2] |=0x01;
    61c2:	80 91 49 02 	lds	r24, 0x0249
    61c6:	81 60       	ori	r24, 0x01	; 1
    61c8:	80 93 49 02 	sts	0x0249, r24
		led_frame_bitmap[3] |=0x01;
    61cc:	80 91 4a 02 	lds	r24, 0x024A
    61d0:	81 60       	ori	r24, 0x01	; 1
    61d2:	80 93 4a 02 	sts	0x024A, r24
		led_frame_bitmap[4] |=0x01;
    61d6:	80 91 4b 02 	lds	r24, 0x024B
    61da:	81 60       	ori	r24, 0x01	; 1
    61dc:	80 93 4b 02 	sts	0x024B, r24
		led_frame_bitmap[5] |=0x01;
    61e0:	80 91 4c 02 	lds	r24, 0x024C
    61e4:	81 60       	ori	r24, 0x01	; 1
    61e6:	80 93 4c 02 	sts	0x024C, r24
		led_frame_bitmap[6] |=0x01;
    61ea:	80 91 4d 02 	lds	r24, 0x024D
    61ee:	81 60       	ori	r24, 0x01	; 1
    61f0:	80 93 4d 02 	sts	0x024D, r24
		led_frame_bitmap[7] |=0x00;
		led_waitframe(4);
    61f4:	84 e0       	ldi	r24, 0x04	; 4
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	led_framerate(100);
	led_blank();
	led_plane_intensity_all(255);	
	
	count=6;
	while(count-- && !fallout)
    61fc:	11 50       	subi	r17, 0x01	; 1
    61fe:	1f 3f       	cpi	r17, 0xFF	; 255
    6200:	21 f0       	breq	.+8      	; 0x620a <pattern_rotate1+0xb2>
    6202:	80 91 f4 01 	lds	r24, 0x01F4
    6206:	88 23       	and	r24, r24
    6208:	a1 f2       	breq	.-88     	; 0x61b2 <pattern_rotate1+0x5a>
		led_frame_bitmap[6] |=0x01;
		led_frame_bitmap[7] |=0x00;
		led_waitframe(4);
	};
	
	led_plane_y_left(0);
    620a:	80 e0       	ldi	r24, 0x00	; 0
    620c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <led_plane_y_left>
	led_waitframe(4);
    6210:	84 e0       	ldi	r24, 0x04	; 4
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    6218:	03 e0       	ldi	r16, 0x03	; 3
    621a:	28 e0       	ldi	r18, 0x08	; 8

	while(!fallout && (!duration || time))
	{		
		//clear operations list
		memset(oplist, 0, 12);
    621c:	8c e0       	ldi	r24, 0x0C	; 12
    621e:	68 2e       	mov	r6, r24
    6220:	6e 01       	movw	r12, r28
    6222:	08 94       	sec
    6224:	c1 1c       	adc	r12, r1
    6226:	d1 1c       	adc	r13, r1
		
		//set potential operations with new place
		switch(place)
		{
			case TOP:
				oplist[FRMD]=BOTTOM;
    6228:	14 e0       	ldi	r17, 0x04	; 4
    622a:	71 2e       	mov	r7, r17
				oplist[PERA]=LEFT;
    622c:	88 24       	eor	r8, r8
    622e:	83 94       	inc	r8
				oplist[PERC]=RIGHT;
    6230:	b2 e0       	ldi	r27, 0x02	; 2
    6232:	9b 2e       	mov	r9, r27
				oplist[PERD]=FRONT;
    6234:	a5 e0       	ldi	r26, 0x05	; 5
    6236:	aa 2e       	mov	r10, r26
				oplist[PERU]=BACK;
    6238:	f6 e0       	ldi	r31, 0x06	; 6
    623a:	bf 2e       	mov	r11, r31
				oplist[PERR]=BACK;
				break;
			case FRONT:
				oplist[FRMB]=BACK;
				oplist[PERD]=BOTTOM;
				oplist[PERU]=TOP;
    623c:	e3 e0       	ldi	r30, 0x03	; 3
    623e:	ee 2e       	mov	r14, r30
		
		//eliminate reverse operation, leaves us with 4 potential operations
		if(lastop&1)
			oplist[lastop-1]=0;
		else
			oplist[lastop+1]=0;
    6240:	72 e0       	ldi	r23, 0x02	; 2
    6242:	47 2e       	mov	r4, r23
    6244:	51 2c       	mov	r5, r1
    6246:	4c 0e       	add	r4, r28
    6248:	5d 1e       	adc	r5, r29
    624a:	ad c0       	rjmp	.+346    	; 0x63a6 <pattern_rotate1+0x24e>
	led_waitframe(4);

	while(!fallout && (!duration || time))
	{		
		//clear operations list
		memset(oplist, 0, 12);
    624c:	f6 01       	movw	r30, r12
    624e:	86 2d       	mov	r24, r6
    6250:	11 92       	st	Z+, r1
    6252:	8a 95       	dec	r24
    6254:	e9 f7       	brne	.-6      	; 0x6250 <pattern_rotate1+0xf8>
		
		//set potential operations with new place
		switch(place)
    6256:	03 30       	cpi	r16, 0x03	; 3
    6258:	71 f0       	breq	.+28     	; 0x6276 <pattern_rotate1+0x11e>
    625a:	04 30       	cpi	r16, 0x04	; 4
    625c:	28 f4       	brcc	.+10     	; 0x6268 <pattern_rotate1+0x110>
    625e:	01 30       	cpi	r16, 0x01	; 1
    6260:	b1 f0       	breq	.+44     	; 0x628e <pattern_rotate1+0x136>
    6262:	02 30       	cpi	r16, 0x02	; 2
    6264:	59 f5       	brne	.+86     	; 0x62bc <pattern_rotate1+0x164>
    6266:	19 c0       	rjmp	.+50     	; 0x629a <pattern_rotate1+0x142>
    6268:	05 30       	cpi	r16, 0x05	; 5
    626a:	e9 f0       	breq	.+58     	; 0x62a6 <pattern_rotate1+0x14e>
    626c:	05 30       	cpi	r16, 0x05	; 5
    626e:	48 f0       	brcs	.+18     	; 0x6282 <pattern_rotate1+0x12a>
    6270:	06 30       	cpi	r16, 0x06	; 6
    6272:	21 f5       	brne	.+72     	; 0x62bc <pattern_rotate1+0x164>
    6274:	1e c0       	rjmp	.+60     	; 0x62b2 <pattern_rotate1+0x15a>
		{
			case TOP:
				oplist[FRMD]=BOTTOM;
    6276:	7a 86       	std	Y+10, r7	; 0x0a
				oplist[PERA]=LEFT;
    6278:	8e 82       	std	Y+6, r8	; 0x06
				oplist[PERC]=RIGHT;
    627a:	9d 82       	std	Y+5, r9	; 0x05
				oplist[PERD]=FRONT;
    627c:	ac 82       	std	Y+4, r10	; 0x04
				oplist[PERU]=BACK;
    627e:	bb 82       	std	Y+3, r11	; 0x03
    6280:	1d c0       	rjmp	.+58     	; 0x62bc <pattern_rotate1+0x164>
				break;
			case BOTTOM:
				oplist[FRMU]=TOP;
    6282:	e9 86       	std	Y+9, r14	; 0x09
				oplist[PERA]=RIGHT;
    6284:	9e 82       	std	Y+6, r9	; 0x06
				oplist[PERC]=LEFT;
    6286:	8d 82       	std	Y+5, r8	; 0x05
				oplist[PERD]=BACK;
    6288:	bc 82       	std	Y+4, r11	; 0x04
				oplist[PERU]=FRONT;
    628a:	ab 82       	std	Y+3, r10	; 0x03
    628c:	17 c0       	rjmp	.+46     	; 0x62bc <pattern_rotate1+0x164>
				break;
			case LEFT:
				oplist[FRMR]=RIGHT;
    628e:	98 86       	std	Y+8, r9	; 0x08
				oplist[PERA]=BOTTOM;
    6290:	7e 82       	std	Y+6, r7	; 0x06
				oplist[PERC]=TOP;
    6292:	ed 82       	std	Y+5, r14	; 0x05
				oplist[PERL]=BACK;
    6294:	b9 82       	std	Y+1, r11	; 0x01
				oplist[PERR]=FRONT;
    6296:	aa 82       	std	Y+2, r10	; 0x02
    6298:	11 c0       	rjmp	.+34     	; 0x62bc <pattern_rotate1+0x164>
				break;
			case RIGHT:
				oplist[FRML]=LEFT;
    629a:	8f 82       	std	Y+7, r8	; 0x07
				oplist[PERA]=TOP;
    629c:	ee 82       	std	Y+6, r14	; 0x06
				oplist[PERC]=BOTTOM;
    629e:	7d 82       	std	Y+5, r7	; 0x05
				oplist[PERL]=FRONT;
    62a0:	a9 82       	std	Y+1, r10	; 0x01
				oplist[PERR]=BACK;
    62a2:	ba 82       	std	Y+2, r11	; 0x02
    62a4:	0b c0       	rjmp	.+22     	; 0x62bc <pattern_rotate1+0x164>
				break;
			case FRONT:
				oplist[FRMB]=BACK;
    62a6:	bb 86       	std	Y+11, r11	; 0x0b
				oplist[PERD]=BOTTOM;
    62a8:	7c 82       	std	Y+4, r7	; 0x04
				oplist[PERU]=TOP;
    62aa:	eb 82       	std	Y+3, r14	; 0x03
				oplist[PERL]=LEFT;
    62ac:	89 82       	std	Y+1, r8	; 0x01
				oplist[PERR]=RIGHT;
    62ae:	9a 82       	std	Y+2, r9	; 0x02
    62b0:	05 c0       	rjmp	.+10     	; 0x62bc <pattern_rotate1+0x164>
				break;
			case BACK:
				oplist[FRMF]=FRONT;
    62b2:	ac 86       	std	Y+12, r10	; 0x0c
				oplist[PERD]=TOP;
    62b4:	ec 82       	std	Y+4, r14	; 0x04
				oplist[PERU]=BOTTOM;
    62b6:	7b 82       	std	Y+3, r7	; 0x03
				oplist[PERL]=RIGHT;
    62b8:	99 82       	std	Y+1, r9	; 0x01
				oplist[PERR]=LEFT;
    62ba:	8a 82       	std	Y+2, r8	; 0x02
				break;
		};
		
		//eliminate reverse operation, leaves us with 4 potential operations
		if(lastop&1)
    62bc:	e2 2f       	mov	r30, r18
    62be:	f0 e0       	ldi	r31, 0x00	; 0
    62c0:	20 ff       	sbrs	r18, 0
    62c2:	03 c0       	rjmp	.+6      	; 0x62ca <pattern_rotate1+0x172>
			oplist[lastop-1]=0;
    62c4:	ec 0f       	add	r30, r28
    62c6:	fd 1f       	adc	r31, r29
    62c8:	02 c0       	rjmp	.+4      	; 0x62ce <pattern_rotate1+0x176>
		else
			oplist[lastop+1]=0;
    62ca:	e4 0d       	add	r30, r4
    62cc:	f5 1d       	adc	r31, r5
    62ce:	10 82       	st	Z, r1
		
		//select operation 1-4
		count=rand()&3;
    62d0:	0e 94 1c 4f 	call	0x9e38	; 0x9e38 <rand>
    62d4:	98 2f       	mov	r25, r24
    62d6:	93 70       	andi	r25, 0x03	; 3
		count++;
    62d8:	9f 5f       	subi	r25, 0xFF	; 255
    62da:	20 e0       	ldi	r18, 0x00	; 0
		index=0;
		while(count)
		{
			if(oplist[index])
    62dc:	f6 01       	movw	r30, r12
    62de:	e2 0f       	add	r30, r18
    62e0:	f1 1d       	adc	r31, r1
    62e2:	80 81       	ld	r24, Z
    62e4:	81 11       	cpse	r24, r1
				count--;
    62e6:	91 50       	subi	r25, 0x01	; 1
			index++;
    62e8:	2f 5f       	subi	r18, 0xFF	; 255
		
		//select operation 1-4
		count=rand()&3;
		count++;
		index=0;
		while(count)
    62ea:	99 23       	and	r25, r25
    62ec:	b9 f7       	brne	.-18     	; 0x62dc <pattern_rotate1+0x184>
		{
			if(oplist[index])
				count--;
			index++;
		};
		index--;
    62ee:	12 2f       	mov	r17, r18
    62f0:	11 50       	subi	r17, 0x01	; 1
		lastop=index;
		
		//determine new place
		place=oplist[index];
    62f2:	f6 01       	movw	r30, r12
    62f4:	e1 0f       	add	r30, r17
    62f6:	f1 1d       	adc	r31, r1
    62f8:	00 81       	ld	r16, Z
    62fa:	67 e0       	ldi	r22, 0x07	; 7
    62fc:	f6 2e       	mov	r15, r22
    62fe:	49 c0       	rjmp	.+146    	; 0x6392 <pattern_rotate1+0x23a>
		
		count=7;
		while(count-- && !fallout)
		{
			switch(lastop)
    6300:	15 30       	cpi	r17, 0x05	; 5
    6302:	79 f1       	breq	.+94     	; 0x6362 <pattern_rotate1+0x20a>
    6304:	16 30       	cpi	r17, 0x06	; 6
    6306:	70 f4       	brcc	.+28     	; 0x6324 <pattern_rotate1+0x1cc>
    6308:	12 30       	cpi	r17, 0x02	; 2
    630a:	11 f1       	breq	.+68     	; 0x6350 <pattern_rotate1+0x1f8>
    630c:	13 30       	cpi	r17, 0x03	; 3
    630e:	28 f4       	brcc	.+10     	; 0x631a <pattern_rotate1+0x1c2>
    6310:	11 23       	and	r17, r17
    6312:	c1 f0       	breq	.+48     	; 0x6344 <pattern_rotate1+0x1ec>
    6314:	11 30       	cpi	r17, 0x01	; 1
    6316:	c9 f5       	brne	.+114    	; 0x638a <pattern_rotate1+0x232>
    6318:	18 c0       	rjmp	.+48     	; 0x634a <pattern_rotate1+0x1f2>
    631a:	13 30       	cpi	r17, 0x03	; 3
    631c:	e1 f0       	breq	.+56     	; 0x6356 <pattern_rotate1+0x1fe>
    631e:	14 30       	cpi	r17, 0x04	; 4
    6320:	a1 f5       	brne	.+104    	; 0x638a <pattern_rotate1+0x232>
    6322:	1c c0       	rjmp	.+56     	; 0x635c <pattern_rotate1+0x204>
    6324:	18 30       	cpi	r17, 0x08	; 8
    6326:	31 f1       	breq	.+76     	; 0x6374 <pattern_rotate1+0x21c>
    6328:	19 30       	cpi	r17, 0x09	; 9
    632a:	28 f4       	brcc	.+10     	; 0x6336 <pattern_rotate1+0x1de>
    632c:	16 30       	cpi	r17, 0x06	; 6
    632e:	e1 f0       	breq	.+56     	; 0x6368 <pattern_rotate1+0x210>
    6330:	17 30       	cpi	r17, 0x07	; 7
    6332:	59 f5       	brne	.+86     	; 0x638a <pattern_rotate1+0x232>
    6334:	1c c0       	rjmp	.+56     	; 0x636e <pattern_rotate1+0x216>
    6336:	1a 30       	cpi	r17, 0x0A	; 10
    6338:	19 f1       	breq	.+70     	; 0x6380 <pattern_rotate1+0x228>
    633a:	1a 30       	cpi	r17, 0x0A	; 10
    633c:	f0 f0       	brcs	.+60     	; 0x637a <pattern_rotate1+0x222>
    633e:	1b 30       	cpi	r17, 0x0B	; 11
    6340:	21 f5       	brne	.+72     	; 0x638a <pattern_rotate1+0x232>
    6342:	21 c0       	rjmp	.+66     	; 0x6386 <pattern_rotate1+0x22e>
			{
			case PERL:
				led_perimeter_left();
    6344:	0e 94 a4 22 	call	0x4548	; 0x4548 <led_perimeter_left>
    6348:	20 c0       	rjmp	.+64     	; 0x638a <pattern_rotate1+0x232>
				break;
			case PERR:
				led_perimeter_right();
    634a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <led_perimeter_right>
    634e:	1d c0       	rjmp	.+58     	; 0x638a <pattern_rotate1+0x232>
				break;
			case PERU:
				led_perimeter_up();
    6350:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <led_perimeter_up>
    6354:	1a c0       	rjmp	.+52     	; 0x638a <pattern_rotate1+0x232>
				break;
			case PERD:
				led_perimeter_down();
    6356:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <led_perimeter_down>
    635a:	17 c0       	rjmp	.+46     	; 0x638a <pattern_rotate1+0x232>
				break;
			case PERC:
				led_perimeter_clockwise();
    635c:	0e 94 3e 20 	call	0x407c	; 0x407c <led_perimeter_clockwise>
    6360:	14 c0       	rjmp	.+40     	; 0x638a <pattern_rotate1+0x232>
				break;
			case PERA:
				led_perimeter_anticlockwise();
    6362:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <led_perimeter_anticlockwise>
    6366:	11 c0       	rjmp	.+34     	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRML:
				led_frame_left();
    6368:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
    636c:	0e c0       	rjmp	.+28     	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRMR:
				led_frame_right();
    636e:	0e 94 18 1c 	call	0x3830	; 0x3830 <led_frame_right>
    6372:	0b c0       	rjmp	.+22     	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRMU:
				led_frame_up();
    6374:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <led_frame_up>
    6378:	08 c0       	rjmp	.+16     	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRMD:
				led_frame_down();
    637a:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
    637e:	05 c0       	rjmp	.+10     	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRMB:
				led_frame_back();
    6380:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <led_frame_back>
    6384:	02 c0       	rjmp	.+4      	; 0x638a <pattern_rotate1+0x232>
				break;
			case FRMF:
				led_frame_forward();
    6386:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <led_frame_forward>
				break;
			};
			
			led_waitframe(4);
    638a:	84 e0       	ldi	r24, 0x04	; 4
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		
		//determine new place
		place=oplist[index];
		
		count=7;
		while(count-- && !fallout)
    6392:	fa 94       	dec	r15
    6394:	21 2f       	mov	r18, r17
    6396:	ef ef       	ldi	r30, 0xFF	; 255
    6398:	fe 16       	cp	r15, r30
    639a:	29 f0       	breq	.+10     	; 0x63a6 <pattern_rotate1+0x24e>
    639c:	80 91 f4 01 	lds	r24, 0x01F4
    63a0:	88 23       	and	r24, r24
    63a2:	09 f4       	brne	.+2      	; 0x63a6 <pattern_rotate1+0x24e>
    63a4:	ad cf       	rjmp	.-166    	; 0x6300 <pattern_rotate1+0x1a8>
	};
	
	led_plane_y_left(0);
	led_waitframe(4);

	while(!fallout && (!duration || time))
    63a6:	80 91 f4 01 	lds	r24, 0x01F4
    63aa:	88 23       	and	r24, r24
    63ac:	b9 f4       	brne	.+46     	; 0x63dc <pattern_rotate1+0x284>
    63ae:	80 91 f5 01 	lds	r24, 0x01F5
    63b2:	90 91 f6 01 	lds	r25, 0x01F6
    63b6:	89 2b       	or	r24, r25
    63b8:	09 f4       	brne	.+2      	; 0x63bc <pattern_rotate1+0x264>
    63ba:	48 cf       	rjmp	.-368    	; 0x624c <pattern_rotate1+0xf4>
    63bc:	80 91 0a 02 	lds	r24, 0x020A
    63c0:	90 91 0b 02 	lds	r25, 0x020B
    63c4:	89 2b       	or	r24, r25
    63c6:	09 f0       	breq	.+2      	; 0x63ca <pattern_rotate1+0x272>
    63c8:	41 cf       	rjmp	.-382    	; 0x624c <pattern_rotate1+0xf4>
    63ca:	08 c0       	rjmp	.+16     	; 0x63dc <pattern_rotate1+0x284>
		};
	};

	//end pattern by scrolling down
	count=8;
	while(!fallout && count--)
    63cc:	11 50       	subi	r17, 0x01	; 1
	{
		led_frame_down();
    63ce:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
		led_waitframe(4);
    63d2:	84 e0       	ldi	r24, 0x04	; 4
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    63da:	01 c0       	rjmp	.+2      	; 0x63de <pattern_rotate1+0x286>
    63dc:	18 e0       	ldi	r17, 0x08	; 8
		};
	};

	//end pattern by scrolling down
	count=8;
	while(!fallout && count--)
    63de:	80 91 f4 01 	lds	r24, 0x01F4
    63e2:	88 23       	and	r24, r24
    63e4:	11 f4       	brne	.+4      	; 0x63ea <pattern_rotate1+0x292>
    63e6:	11 23       	and	r17, r17
    63e8:	89 f7       	brne	.-30     	; 0x63cc <pattern_rotate1+0x274>
	{
		led_frame_down();
		led_waitframe(4);
	};

}
    63ea:	2c 96       	adiw	r28, 0x0c	; 12
    63ec:	0f b6       	in	r0, 0x3f	; 63
    63ee:	f8 94       	cli
    63f0:	de bf       	out	0x3e, r29	; 62
    63f2:	0f be       	out	0x3f, r0	; 63
    63f4:	cd bf       	out	0x3d, r28	; 61
    63f6:	cf 91       	pop	r28
    63f8:	df 91       	pop	r29
    63fa:	1f 91       	pop	r17
    63fc:	0f 91       	pop	r16
    63fe:	ff 90       	pop	r15
    6400:	ef 90       	pop	r14
    6402:	df 90       	pop	r13
    6404:	cf 90       	pop	r12
    6406:	bf 90       	pop	r11
    6408:	af 90       	pop	r10
    640a:	9f 90       	pop	r9
    640c:	8f 90       	pop	r8
    640e:	7f 90       	pop	r7
    6410:	6f 90       	pop	r6
    6412:	5f 90       	pop	r5
    6414:	4f 90       	pop	r4
    6416:	08 95       	ret

00006418 <pattern_screw>:
	led_blank();
	led_waitframe(1);
}

void pattern_screw(void)
{
    6418:	2f 92       	push	r2
    641a:	3f 92       	push	r3
    641c:	4f 92       	push	r4
    641e:	5f 92       	push	r5
    6420:	6f 92       	push	r6
    6422:	7f 92       	push	r7
    6424:	8f 92       	push	r8
    6426:	9f 92       	push	r9
    6428:	af 92       	push	r10
    642a:	bf 92       	push	r11
    642c:	cf 92       	push	r12
    642e:	df 92       	push	r13
    6430:	ef 92       	push	r14
    6432:	ff 92       	push	r15
    6434:	0f 93       	push	r16
    6436:	1f 93       	push	r17
    6438:	df 93       	push	r29
    643a:	cf 93       	push	r28
    643c:	cd b7       	in	r28, 0x3d	; 61
    643e:	de b7       	in	r29, 0x3e	; 62
    6440:	27 97       	sbiw	r28, 0x07	; 7
    6442:	0f b6       	in	r0, 0x3f	; 63
    6444:	f8 94       	cli
    6446:	de bf       	out	0x3e, r29	; 62
    6448:	0f be       	out	0x3f, r0	; 63
    644a:	cd bf       	out	0x3d, r28	; 61
	uint8_t x1=0,y1=0,z1=0,x2=7,y2=7,z2=0;
    644c:	19 82       	std	Y+1, r1	; 0x01
    644e:	1a 82       	std	Y+2, r1	; 0x02
    6450:	1b 82       	std	Y+3, r1	; 0x03
    6452:	87 e0       	ldi	r24, 0x07	; 7
    6454:	8c 83       	std	Y+4, r24	; 0x04
    6456:	8d 83       	std	Y+5, r24	; 0x05
    6458:	1e 82       	std	Y+6, r1	; 0x06
	unsigned int count=0;
	uint8_t exit_mode= DIRECTION_BACKWARD;

	fallout=FALSE;
    645a:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    645e:	80 91 f5 01 	lds	r24, 0x01F5
    6462:	90 91 f6 01 	lds	r25, 0x01F6
    6466:	90 93 0b 02 	sts	0x020B, r25
    646a:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(SCREW_FRAMERATE);
    646e:	84 e6       	ldi	r24, 0x64	; 100
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    6476:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    647a:	8f ef       	ldi	r24, 0xFF	; 255
    647c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    6480:	86 e0       	ldi	r24, 0x06	; 6
    6482:	8f 83       	std	Y+7, r24	; 0x07

	//running process
	while(!fallout && (!duration || time))
	{
		x1=0;y1=0;z1=0;x2=7;y2=7;z2=0;
    6484:	07 e0       	ldi	r16, 0x07	; 7
    6486:	d0 2e       	mov	r13, r16
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
		{
			exit_mode= DIRECTION_BACKWARD;
			led_frame_back();
			point_rotate(ROTATE_CLOCKWISE, &x1, &y1, &z1);
    6488:	12 e0       	ldi	r17, 0x02	; 2
    648a:	41 2e       	mov	r4, r17
    648c:	51 2c       	mov	r5, r1
    648e:	4c 0e       	add	r4, r28
    6490:	5d 1e       	adc	r5, r29
    6492:	b3 e0       	ldi	r27, 0x03	; 3
    6494:	6b 2e       	mov	r6, r27
    6496:	71 2c       	mov	r7, r1
    6498:	6c 0e       	add	r6, r28
    649a:	7d 1e       	adc	r7, r29
    649c:	4e 01       	movw	r8, r28
    649e:	08 94       	sec
    64a0:	81 1c       	adc	r8, r1
    64a2:	91 1c       	adc	r9, r1
			point_rotate(ROTATE_CLOCKWISE, &x2, &y2, &z2);
    64a4:	a6 e0       	ldi	r26, 0x06	; 6
    64a6:	2a 2e       	mov	r2, r26
    64a8:	31 2c       	mov	r3, r1
    64aa:	2c 0e       	add	r2, r28
    64ac:	3d 1e       	adc	r3, r29
    64ae:	36 c2       	rjmp	.+1132   	; 0x691c <pattern_screw+0x504>
	led_plane_intensity_all(255);	

	//running process
	while(!fallout && (!duration || time))
	{
		x1=0;y1=0;z1=0;x2=7;y2=7;z2=0;
    64b0:	19 82       	std	Y+1, r1	; 0x01
    64b2:	1a 82       	std	Y+2, r1	; 0x02
    64b4:	1b 82       	std	Y+3, r1	; 0x03
    64b6:	dc 82       	std	Y+4, r13	; 0x04
    64b8:	dd 82       	std	Y+5, r13	; 0x05
    64ba:	1e 82       	std	Y+6, r1	; 0x06
    64bc:	fc e8       	ldi	r31, 0x8C	; 140
    64be:	af 2e       	mov	r10, r31
    64c0:	b1 2c       	mov	r11, r1
    64c2:	28 c0       	rjmp	.+80     	; 0x6514 <pattern_screw+0xfc>
		
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
		{
			exit_mode= DIRECTION_BACKWARD;
			led_frame_back();
    64c4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <led_frame_back>
			point_rotate(ROTATE_CLOCKWISE, &x1, &y1, &z1);
    64c8:	85 e0       	ldi	r24, 0x05	; 5
    64ca:	b4 01       	movw	r22, r8
    64cc:	a2 01       	movw	r20, r4
    64ce:	93 01       	movw	r18, r6
    64d0:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			point_rotate(ROTATE_CLOCKWISE, &x2, &y2, &z2);
    64d4:	85 e0       	ldi	r24, 0x05	; 5
    64d6:	be 01       	movw	r22, r28
    64d8:	6c 5f       	subi	r22, 0xFC	; 252
    64da:	7f 4f       	sbci	r23, 0xFF	; 255
    64dc:	ae 01       	movw	r20, r28
    64de:	4b 5f       	subi	r20, 0xFB	; 251
    64e0:	5f 4f       	sbci	r21, 0xFF	; 255
    64e2:	91 01       	movw	r18, r2
    64e4:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    64e8:	6a 81       	ldd	r22, Y+2	; 0x02
    64ea:	4b 81       	ldd	r20, Y+3	; 0x03
    64ec:	2c 81       	ldd	r18, Y+4	; 0x04
    64ee:	0d 81       	ldd	r16, Y+5	; 0x05
    64f0:	ee 80       	ldd	r14, Y+6	; 0x06
    64f2:	89 81       	ldd	r24, Y+1	; 0x01
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	70 e0       	ldi	r23, 0x00	; 0
    64f8:	50 e0       	ldi	r21, 0x00	; 0
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	10 e0       	ldi	r17, 0x00	; 0
    64fe:	ff 24       	eor	r15, r15
    6500:	cc 24       	eor	r12, r12
    6502:	c3 94       	inc	r12
    6504:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    6508:	85 e0       	ldi	r24, 0x05	; 5
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    6510:	86 e0       	ldi	r24, 0x06	; 6
    6512:	8f 83       	std	Y+7, r24	; 0x07
	while(!fallout && (!duration || time))
	{
		x1=0;y1=0;z1=0;x2=7;y2=7;z2=0;
		
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
    6514:	08 94       	sec
    6516:	a1 08       	sbc	r10, r1
    6518:	b1 08       	sbc	r11, r1
    651a:	8f ef       	ldi	r24, 0xFF	; 255
    651c:	a8 16       	cp	r10, r24
    651e:	8f ef       	ldi	r24, 0xFF	; 255
    6520:	b8 06       	cpc	r11, r24
    6522:	79 f1       	breq	.+94     	; 0x6582 <pattern_screw+0x16a>
    6524:	80 91 f4 01 	lds	r24, 0x01F4
    6528:	88 23       	and	r24, r24
    652a:	59 f5       	brne	.+86     	; 0x6582 <pattern_screw+0x16a>
    652c:	80 91 f5 01 	lds	r24, 0x01F5
    6530:	90 91 f6 01 	lds	r25, 0x01F6
    6534:	89 2b       	or	r24, r25
    6536:	31 f2       	breq	.-116    	; 0x64c4 <pattern_screw+0xac>
    6538:	80 91 0a 02 	lds	r24, 0x020A
    653c:	90 91 0b 02 	lds	r25, 0x020B
    6540:	89 2b       	or	r24, r25
    6542:	09 f0       	breq	.+2      	; 0x6546 <pattern_screw+0x12e>
    6544:	bf cf       	rjmp	.-130    	; 0x64c4 <pattern_screw+0xac>
    6546:	1d c0       	rjmp	.+58     	; 0x6582 <pattern_screw+0x16a>
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			led_frame_back();
    6548:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <led_frame_back>
			point_rotate(ROTATE_CLOCKWISE, &x1, &y1, &z1);
    654c:	85 e0       	ldi	r24, 0x05	; 5
    654e:	b4 01       	movw	r22, r8
    6550:	a2 01       	movw	r20, r4
    6552:	93 01       	movw	r18, r6
    6554:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    6558:	6a 81       	ldd	r22, Y+2	; 0x02
    655a:	4b 81       	ldd	r20, Y+3	; 0x03
    655c:	2c 81       	ldd	r18, Y+4	; 0x04
    655e:	0d 81       	ldd	r16, Y+5	; 0x05
    6560:	ee 80       	ldd	r14, Y+6	; 0x06
    6562:	89 81       	ldd	r24, Y+1	; 0x01
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	70 e0       	ldi	r23, 0x00	; 0
    6568:	50 e0       	ldi	r21, 0x00	; 0
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	ff 24       	eor	r15, r15
    6570:	cc 24       	eor	r12, r12
    6572:	c3 94       	inc	r12
    6574:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    6578:	85 e0       	ldi	r24, 0x05	; 5
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    6580:	03 c0       	rjmp	.+6      	; 0x6588 <pattern_screw+0x170>
    6582:	e7 e0       	ldi	r30, 0x07	; 7
    6584:	ae 2e       	mov	r10, r30
    6586:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
    6588:	08 94       	sec
    658a:	a1 08       	sbc	r10, r1
    658c:	b1 08       	sbc	r11, r1
    658e:	8f ef       	ldi	r24, 0xFF	; 255
    6590:	a8 16       	cp	r10, r24
    6592:	8f ef       	ldi	r24, 0xFF	; 255
    6594:	b8 06       	cpc	r11, r24
    6596:	81 f1       	breq	.+96     	; 0x65f8 <pattern_screw+0x1e0>
    6598:	80 91 f4 01 	lds	r24, 0x01F4
    659c:	88 23       	and	r24, r24
    659e:	61 f5       	brne	.+88     	; 0x65f8 <pattern_screw+0x1e0>
    65a0:	80 91 f5 01 	lds	r24, 0x01F5
    65a4:	90 91 f6 01 	lds	r25, 0x01F6
    65a8:	89 2b       	or	r24, r25
    65aa:	71 f2       	breq	.-100    	; 0x6548 <pattern_screw+0x130>
    65ac:	80 91 0a 02 	lds	r24, 0x020A
    65b0:	90 91 0b 02 	lds	r25, 0x020B
    65b4:	89 2b       	or	r24, r25
    65b6:	41 f6       	brne	.-112    	; 0x6548 <pattern_screw+0x130>
    65b8:	1f c0       	rjmp	.+62     	; 0x65f8 <pattern_screw+0x1e0>
		
		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			exit_mode= DIRECTION_LEFT;
			led_frame_left();
    65ba:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
			point_rotate(ROTATE_UP, &x1, &y1, &z1);
    65be:	81 e0       	ldi	r24, 0x01	; 1
    65c0:	b4 01       	movw	r22, r8
    65c2:	a2 01       	movw	r20, r4
    65c4:	93 01       	movw	r18, r6
    65c6:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    65ca:	6a 81       	ldd	r22, Y+2	; 0x02
    65cc:	4b 81       	ldd	r20, Y+3	; 0x03
    65ce:	2c 81       	ldd	r18, Y+4	; 0x04
    65d0:	0d 81       	ldd	r16, Y+5	; 0x05
    65d2:	ee 80       	ldd	r14, Y+6	; 0x06
    65d4:	89 81       	ldd	r24, Y+1	; 0x01
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	70 e0       	ldi	r23, 0x00	; 0
    65da:	50 e0       	ldi	r21, 0x00	; 0
    65dc:	30 e0       	ldi	r19, 0x00	; 0
    65de:	10 e0       	ldi	r17, 0x00	; 0
    65e0:	ff 24       	eor	r15, r15
    65e2:	cc 24       	eor	r12, r12
    65e4:	c3 94       	inc	r12
    65e6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    65ea:	85 e0       	ldi	r24, 0x05	; 5
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    65f2:	83 e0       	ldi	r24, 0x03	; 3
    65f4:	8f 83       	std	Y+7, r24	; 0x07
    65f6:	03 c0       	rjmp	.+6      	; 0x65fe <pattern_screw+0x1e6>
    65f8:	77 e0       	ldi	r23, 0x07	; 7
    65fa:	a7 2e       	mov	r10, r23
    65fc:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
    65fe:	08 94       	sec
    6600:	a1 08       	sbc	r10, r1
    6602:	b1 08       	sbc	r11, r1
    6604:	8f ef       	ldi	r24, 0xFF	; 255
    6606:	a8 16       	cp	r10, r24
    6608:	8f ef       	ldi	r24, 0xFF	; 255
    660a:	b8 06       	cpc	r11, r24
    660c:	21 f0       	breq	.+8      	; 0x6616 <pattern_screw+0x1fe>
    660e:	80 91 f4 01 	lds	r24, 0x01F4
    6612:	88 23       	and	r24, r24
    6614:	21 f0       	breq	.+8      	; 0x661e <pattern_screw+0x206>
    6616:	6c e8       	ldi	r22, 0x8C	; 140
    6618:	a6 2e       	mov	r10, r22
    661a:	b1 2c       	mov	r11, r1
    661c:	33 c0       	rjmp	.+102    	; 0x6684 <pattern_screw+0x26c>
    661e:	80 91 f5 01 	lds	r24, 0x01F5
    6622:	90 91 f6 01 	lds	r25, 0x01F6
    6626:	89 2b       	or	r24, r25
    6628:	41 f2       	breq	.-112    	; 0x65ba <pattern_screw+0x1a2>
    662a:	80 91 0a 02 	lds	r24, 0x020A
    662e:	90 91 0b 02 	lds	r25, 0x020B
    6632:	89 2b       	or	r24, r25
    6634:	11 f6       	brne	.-124    	; 0x65ba <pattern_screw+0x1a2>
    6636:	ef cf       	rjmp	.-34     	; 0x6616 <pattern_screw+0x1fe>
			led_waitframe(SCREW_FRAMESTEP);
		};
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
		{
			led_frame_left();
    6638:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
			point_rotate(ROTATE_UP, &x1, &y1, &z1);
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	b4 01       	movw	r22, r8
    6640:	a2 01       	movw	r20, r4
    6642:	93 01       	movw	r18, r6
    6644:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			point_rotate(ROTATE_UP, &x2, &y2, &z2);
    6648:	81 e0       	ldi	r24, 0x01	; 1
    664a:	be 01       	movw	r22, r28
    664c:	6c 5f       	subi	r22, 0xFC	; 252
    664e:	7f 4f       	sbci	r23, 0xFF	; 255
    6650:	ae 01       	movw	r20, r28
    6652:	4b 5f       	subi	r20, 0xFB	; 251
    6654:	5f 4f       	sbci	r21, 0xFF	; 255
    6656:	91 01       	movw	r18, r2
    6658:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    665c:	6a 81       	ldd	r22, Y+2	; 0x02
    665e:	4b 81       	ldd	r20, Y+3	; 0x03
    6660:	2c 81       	ldd	r18, Y+4	; 0x04
    6662:	0d 81       	ldd	r16, Y+5	; 0x05
    6664:	ee 80       	ldd	r14, Y+6	; 0x06
    6666:	89 81       	ldd	r24, Y+1	; 0x01
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	70 e0       	ldi	r23, 0x00	; 0
    666c:	50 e0       	ldi	r21, 0x00	; 0
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	10 e0       	ldi	r17, 0x00	; 0
    6672:	ff 24       	eor	r15, r15
    6674:	cc 24       	eor	r12, r12
    6676:	c3 94       	inc	r12
    6678:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    667c:	85 e0       	ldi	r24, 0x05	; 5
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			point_rotate(ROTATE_UP, &x1, &y1, &z1);
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
    6684:	08 94       	sec
    6686:	a1 08       	sbc	r10, r1
    6688:	b1 08       	sbc	r11, r1
    668a:	8f ef       	ldi	r24, 0xFF	; 255
    668c:	a8 16       	cp	r10, r24
    668e:	8f ef       	ldi	r24, 0xFF	; 255
    6690:	b8 06       	cpc	r11, r24
    6692:	91 f1       	breq	.+100    	; 0x66f8 <pattern_screw+0x2e0>
    6694:	80 91 f4 01 	lds	r24, 0x01F4
    6698:	88 23       	and	r24, r24
    669a:	71 f5       	brne	.+92     	; 0x66f8 <pattern_screw+0x2e0>
    669c:	80 91 f5 01 	lds	r24, 0x01F5
    66a0:	90 91 f6 01 	lds	r25, 0x01F6
    66a4:	89 2b       	or	r24, r25
    66a6:	41 f2       	breq	.-112    	; 0x6638 <pattern_screw+0x220>
    66a8:	80 91 0a 02 	lds	r24, 0x020A
    66ac:	90 91 0b 02 	lds	r25, 0x020B
    66b0:	89 2b       	or	r24, r25
    66b2:	11 f6       	brne	.-124    	; 0x6638 <pattern_screw+0x220>
    66b4:	21 c0       	rjmp	.+66     	; 0x66f8 <pattern_screw+0x2e0>
		};

		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			led_frame_left();
    66b6:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
			point_rotate(ROTATE_UP, &x2, &y2, &z2);
    66ba:	81 e0       	ldi	r24, 0x01	; 1
    66bc:	be 01       	movw	r22, r28
    66be:	6c 5f       	subi	r22, 0xFC	; 252
    66c0:	7f 4f       	sbci	r23, 0xFF	; 255
    66c2:	ae 01       	movw	r20, r28
    66c4:	4b 5f       	subi	r20, 0xFB	; 251
    66c6:	5f 4f       	sbci	r21, 0xFF	; 255
    66c8:	91 01       	movw	r18, r2
    66ca:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    66ce:	6a 81       	ldd	r22, Y+2	; 0x02
    66d0:	4b 81       	ldd	r20, Y+3	; 0x03
    66d2:	2c 81       	ldd	r18, Y+4	; 0x04
    66d4:	0d 81       	ldd	r16, Y+5	; 0x05
    66d6:	ee 80       	ldd	r14, Y+6	; 0x06
    66d8:	89 81       	ldd	r24, Y+1	; 0x01
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	70 e0       	ldi	r23, 0x00	; 0
    66de:	50 e0       	ldi	r21, 0x00	; 0
    66e0:	30 e0       	ldi	r19, 0x00	; 0
    66e2:	10 e0       	ldi	r17, 0x00	; 0
    66e4:	ff 24       	eor	r15, r15
    66e6:	cc 24       	eor	r12, r12
    66e8:	c3 94       	inc	r12
    66ea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    66ee:	85 e0       	ldi	r24, 0x05	; 5
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    66f6:	03 c0       	rjmp	.+6      	; 0x66fe <pattern_screw+0x2e6>
    66f8:	57 e0       	ldi	r21, 0x07	; 7
    66fa:	a5 2e       	mov	r10, r21
    66fc:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};

		count=7;
		while(count-- && !fallout && (!duration || time))
    66fe:	08 94       	sec
    6700:	a1 08       	sbc	r10, r1
    6702:	b1 08       	sbc	r11, r1
    6704:	8f ef       	ldi	r24, 0xFF	; 255
    6706:	a8 16       	cp	r10, r24
    6708:	8f ef       	ldi	r24, 0xFF	; 255
    670a:	b8 06       	cpc	r11, r24
    670c:	a1 f1       	breq	.+104    	; 0x6776 <pattern_screw+0x35e>
    670e:	80 91 f4 01 	lds	r24, 0x01F4
    6712:	88 23       	and	r24, r24
    6714:	81 f5       	brne	.+96     	; 0x6776 <pattern_screw+0x35e>
    6716:	80 91 f5 01 	lds	r24, 0x01F5
    671a:	90 91 f6 01 	lds	r25, 0x01F6
    671e:	89 2b       	or	r24, r25
    6720:	51 f2       	breq	.-108    	; 0x66b6 <pattern_screw+0x29e>
    6722:	80 91 0a 02 	lds	r24, 0x020A
    6726:	90 91 0b 02 	lds	r25, 0x020B
    672a:	89 2b       	or	r24, r25
    672c:	21 f6       	brne	.-120    	; 0x66b6 <pattern_screw+0x29e>
    672e:	23 c0       	rjmp	.+70     	; 0x6776 <pattern_screw+0x35e>
		
		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			exit_mode= DIRECTION_DOWN;
			led_frame_down();
    6730:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
			point_rotate(ROTATE_LEFT, &x2, &y2, &z2);
    6734:	83 e0       	ldi	r24, 0x03	; 3
    6736:	be 01       	movw	r22, r28
    6738:	6c 5f       	subi	r22, 0xFC	; 252
    673a:	7f 4f       	sbci	r23, 0xFF	; 255
    673c:	ae 01       	movw	r20, r28
    673e:	4b 5f       	subi	r20, 0xFB	; 251
    6740:	5f 4f       	sbci	r21, 0xFF	; 255
    6742:	91 01       	movw	r18, r2
    6744:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    6748:	6a 81       	ldd	r22, Y+2	; 0x02
    674a:	4b 81       	ldd	r20, Y+3	; 0x03
    674c:	2c 81       	ldd	r18, Y+4	; 0x04
    674e:	0d 81       	ldd	r16, Y+5	; 0x05
    6750:	ee 80       	ldd	r14, Y+6	; 0x06
    6752:	89 81       	ldd	r24, Y+1	; 0x01
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	70 e0       	ldi	r23, 0x00	; 0
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	30 e0       	ldi	r19, 0x00	; 0
    675c:	10 e0       	ldi	r17, 0x00	; 0
    675e:	ff 24       	eor	r15, r15
    6760:	cc 24       	eor	r12, r12
    6762:	c3 94       	inc	r12
    6764:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    6768:	85 e0       	ldi	r24, 0x05	; 5
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    6770:	82 e0       	ldi	r24, 0x02	; 2
    6772:	8f 83       	std	Y+7, r24	; 0x07
    6774:	03 c0       	rjmp	.+6      	; 0x677c <pattern_screw+0x364>
    6776:	47 e0       	ldi	r20, 0x07	; 7
    6778:	a4 2e       	mov	r10, r20
    677a:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
    677c:	08 94       	sec
    677e:	a1 08       	sbc	r10, r1
    6780:	b1 08       	sbc	r11, r1
    6782:	8f ef       	ldi	r24, 0xFF	; 255
    6784:	a8 16       	cp	r10, r24
    6786:	8f ef       	ldi	r24, 0xFF	; 255
    6788:	b8 06       	cpc	r11, r24
    678a:	21 f0       	breq	.+8      	; 0x6794 <pattern_screw+0x37c>
    678c:	80 91 f4 01 	lds	r24, 0x01F4
    6790:	88 23       	and	r24, r24
    6792:	21 f0       	breq	.+8      	; 0x679c <pattern_screw+0x384>
    6794:	3c e8       	ldi	r19, 0x8C	; 140
    6796:	a3 2e       	mov	r10, r19
    6798:	b1 2c       	mov	r11, r1
    679a:	34 c0       	rjmp	.+104    	; 0x6804 <pattern_screw+0x3ec>
    679c:	80 91 f5 01 	lds	r24, 0x01F5
    67a0:	90 91 f6 01 	lds	r25, 0x01F6
    67a4:	89 2b       	or	r24, r25
    67a6:	21 f2       	breq	.-120    	; 0x6730 <pattern_screw+0x318>
    67a8:	80 91 0a 02 	lds	r24, 0x020A
    67ac:	90 91 0b 02 	lds	r25, 0x020B
    67b0:	89 2b       	or	r24, r25
    67b2:	09 f0       	breq	.+2      	; 0x67b6 <pattern_screw+0x39e>
    67b4:	bd cf       	rjmp	.-134    	; 0x6730 <pattern_screw+0x318>
    67b6:	ee cf       	rjmp	.-36     	; 0x6794 <pattern_screw+0x37c>
			led_waitframe(SCREW_FRAMESTEP);
		};
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
		{
			led_frame_down();
    67b8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
			point_rotate(ROTATE_LEFT, &x1, &y1, &z1);
    67bc:	83 e0       	ldi	r24, 0x03	; 3
    67be:	b4 01       	movw	r22, r8
    67c0:	a2 01       	movw	r20, r4
    67c2:	93 01       	movw	r18, r6
    67c4:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			point_rotate(ROTATE_LEFT, &x2, &y2, &z2);
    67c8:	83 e0       	ldi	r24, 0x03	; 3
    67ca:	be 01       	movw	r22, r28
    67cc:	6c 5f       	subi	r22, 0xFC	; 252
    67ce:	7f 4f       	sbci	r23, 0xFF	; 255
    67d0:	ae 01       	movw	r20, r28
    67d2:	4b 5f       	subi	r20, 0xFB	; 251
    67d4:	5f 4f       	sbci	r21, 0xFF	; 255
    67d6:	91 01       	movw	r18, r2
    67d8:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    67dc:	6a 81       	ldd	r22, Y+2	; 0x02
    67de:	4b 81       	ldd	r20, Y+3	; 0x03
    67e0:	2c 81       	ldd	r18, Y+4	; 0x04
    67e2:	0d 81       	ldd	r16, Y+5	; 0x05
    67e4:	ee 80       	ldd	r14, Y+6	; 0x06
    67e6:	89 81       	ldd	r24, Y+1	; 0x01
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	70 e0       	ldi	r23, 0x00	; 0
    67ec:	50 e0       	ldi	r21, 0x00	; 0
    67ee:	30 e0       	ldi	r19, 0x00	; 0
    67f0:	10 e0       	ldi	r17, 0x00	; 0
    67f2:	ff 24       	eor	r15, r15
    67f4:	cc 24       	eor	r12, r12
    67f6:	c3 94       	inc	r12
    67f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    67fc:	85 e0       	ldi	r24, 0x05	; 5
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
			point_rotate(ROTATE_LEFT, &x2, &y2, &z2);
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		count=SCREW_ROTATIONS*28;
		while(count-- && !fallout && (!duration || time))
    6804:	08 94       	sec
    6806:	a1 08       	sbc	r10, r1
    6808:	b1 08       	sbc	r11, r1
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	a8 16       	cp	r10, r24
    680e:	8f ef       	ldi	r24, 0xFF	; 255
    6810:	b8 06       	cpc	r11, r24
    6812:	71 f1       	breq	.+92     	; 0x6870 <pattern_screw+0x458>
    6814:	80 91 f4 01 	lds	r24, 0x01F4
    6818:	88 23       	and	r24, r24
    681a:	51 f5       	brne	.+84     	; 0x6870 <pattern_screw+0x458>
    681c:	80 91 f5 01 	lds	r24, 0x01F5
    6820:	90 91 f6 01 	lds	r25, 0x01F6
    6824:	89 2b       	or	r24, r25
    6826:	41 f2       	breq	.-112    	; 0x67b8 <pattern_screw+0x3a0>
    6828:	80 91 0a 02 	lds	r24, 0x020A
    682c:	90 91 0b 02 	lds	r25, 0x020B
    6830:	89 2b       	or	r24, r25
    6832:	11 f6       	brne	.-124    	; 0x67b8 <pattern_screw+0x3a0>
    6834:	1d c0       	rjmp	.+58     	; 0x6870 <pattern_screw+0x458>
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			led_frame_down();
    6836:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
			point_rotate(ROTATE_DOWN, &x1, &y1, &z1);
    683a:	82 e0       	ldi	r24, 0x02	; 2
    683c:	b4 01       	movw	r22, r8
    683e:	a2 01       	movw	r20, r4
    6840:	93 01       	movw	r18, r6
    6842:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    6846:	6a 81       	ldd	r22, Y+2	; 0x02
    6848:	4b 81       	ldd	r20, Y+3	; 0x03
    684a:	2c 81       	ldd	r18, Y+4	; 0x04
    684c:	0d 81       	ldd	r16, Y+5	; 0x05
    684e:	ee 80       	ldd	r14, Y+6	; 0x06
    6850:	89 81       	ldd	r24, Y+1	; 0x01
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	70 e0       	ldi	r23, 0x00	; 0
    6856:	50 e0       	ldi	r21, 0x00	; 0
    6858:	30 e0       	ldi	r19, 0x00	; 0
    685a:	10 e0       	ldi	r17, 0x00	; 0
    685c:	ff 24       	eor	r15, r15
    685e:	cc 24       	eor	r12, r12
    6860:	c3 94       	inc	r12
    6862:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    6866:	85 e0       	ldi	r24, 0x05	; 5
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    686e:	03 c0       	rjmp	.+6      	; 0x6876 <pattern_screw+0x45e>
    6870:	27 e0       	ldi	r18, 0x07	; 7
    6872:	a2 2e       	mov	r10, r18
    6874:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
    6876:	08 94       	sec
    6878:	a1 08       	sbc	r10, r1
    687a:	b1 08       	sbc	r11, r1
    687c:	8f ef       	ldi	r24, 0xFF	; 255
    687e:	a8 16       	cp	r10, r24
    6880:	8f ef       	ldi	r24, 0xFF	; 255
    6882:	b8 06       	cpc	r11, r24
    6884:	81 f1       	breq	.+96     	; 0x68e6 <pattern_screw+0x4ce>
    6886:	80 91 f4 01 	lds	r24, 0x01F4
    688a:	88 23       	and	r24, r24
    688c:	61 f5       	brne	.+88     	; 0x68e6 <pattern_screw+0x4ce>
    688e:	80 91 f5 01 	lds	r24, 0x01F5
    6892:	90 91 f6 01 	lds	r25, 0x01F6
    6896:	89 2b       	or	r24, r25
    6898:	71 f2       	breq	.-100    	; 0x6836 <pattern_screw+0x41e>
    689a:	80 91 0a 02 	lds	r24, 0x020A
    689e:	90 91 0b 02 	lds	r25, 0x020B
    68a2:	89 2b       	or	r24, r25
    68a4:	41 f6       	brne	.-112    	; 0x6836 <pattern_screw+0x41e>
    68a6:	1f c0       	rjmp	.+62     	; 0x68e6 <pattern_screw+0x4ce>
		
		count=7;
		while(count-- && !fallout && (!duration || time))
		{
			exit_mode= DIRECTION_BACKWARD;
			led_frame_back();
    68a8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <led_frame_back>
			point_rotate(ROTATE_DOWN, &x1, &y1, &z1);
    68ac:	82 e0       	ldi	r24, 0x02	; 2
    68ae:	b4 01       	movw	r22, r8
    68b0:	a2 01       	movw	r20, r4
    68b2:	93 01       	movw	r18, r6
    68b4:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <point_rotate>
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
    68b8:	6a 81       	ldd	r22, Y+2	; 0x02
    68ba:	4b 81       	ldd	r20, Y+3	; 0x03
    68bc:	2c 81       	ldd	r18, Y+4	; 0x04
    68be:	0d 81       	ldd	r16, Y+5	; 0x05
    68c0:	ee 80       	ldd	r14, Y+6	; 0x06
    68c2:	89 81       	ldd	r24, Y+1	; 0x01
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	70 e0       	ldi	r23, 0x00	; 0
    68c8:	50 e0       	ldi	r21, 0x00	; 0
    68ca:	30 e0       	ldi	r19, 0x00	; 0
    68cc:	10 e0       	ldi	r17, 0x00	; 0
    68ce:	ff 24       	eor	r15, r15
    68d0:	cc 24       	eor	r12, r12
    68d2:	c3 94       	inc	r12
    68d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(SCREW_FRAMESTEP);
    68d8:	85 e0       	ldi	r24, 0x05	; 5
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    68e0:	86 e0       	ldi	r24, 0x06	; 6
    68e2:	8f 83       	std	Y+7, r24	; 0x07
    68e4:	03 c0       	rjmp	.+6      	; 0x68ec <pattern_screw+0x4d4>
    68e6:	97 e0       	ldi	r25, 0x07	; 7
    68e8:	a9 2e       	mov	r10, r25
    68ea:	b1 2c       	mov	r11, r1
			led_line(x1,y1,z1,x2,y2,z2, TRUE);
			led_waitframe(SCREW_FRAMESTEP);
		};
		
		count=7;
		while(count-- && !fallout && (!duration || time))
    68ec:	08 94       	sec
    68ee:	a1 08       	sbc	r10, r1
    68f0:	b1 08       	sbc	r11, r1
    68f2:	8f ef       	ldi	r24, 0xFF	; 255
    68f4:	a8 16       	cp	r10, r24
    68f6:	8f ef       	ldi	r24, 0xFF	; 255
    68f8:	b8 06       	cpc	r11, r24
    68fa:	81 f0       	breq	.+32     	; 0x691c <pattern_screw+0x504>
    68fc:	80 91 f4 01 	lds	r24, 0x01F4
    6900:	88 23       	and	r24, r24
    6902:	61 f4       	brne	.+24     	; 0x691c <pattern_screw+0x504>
    6904:	80 91 f5 01 	lds	r24, 0x01F5
    6908:	90 91 f6 01 	lds	r25, 0x01F6
    690c:	89 2b       	or	r24, r25
    690e:	61 f2       	breq	.-104    	; 0x68a8 <pattern_screw+0x490>
    6910:	80 91 0a 02 	lds	r24, 0x020A
    6914:	90 91 0b 02 	lds	r25, 0x020B
    6918:	89 2b       	or	r24, r25
    691a:	31 f6       	brne	.-116    	; 0x68a8 <pattern_screw+0x490>
	led_framerate(SCREW_FRAMERATE);
	led_blank();
	led_plane_intensity_all(255);	

	//running process
	while(!fallout && (!duration || time))
    691c:	80 91 f4 01 	lds	r24, 0x01F4
    6920:	88 23       	and	r24, r24
    6922:	19 f0       	breq	.+6      	; 0x692a <pattern_screw+0x512>
    6924:	08 e0       	ldi	r16, 0x08	; 8
    6926:	10 e0       	ldi	r17, 0x00	; 0
    6928:	37 c0       	rjmp	.+110    	; 0x6998 <pattern_screw+0x580>
    692a:	80 91 f5 01 	lds	r24, 0x01F5
    692e:	90 91 f6 01 	lds	r25, 0x01F6
    6932:	89 2b       	or	r24, r25
    6934:	09 f4       	brne	.+2      	; 0x6938 <pattern_screw+0x520>
    6936:	bc cd       	rjmp	.-1160   	; 0x64b0 <pattern_screw+0x98>
    6938:	80 91 0a 02 	lds	r24, 0x020A
    693c:	90 91 0b 02 	lds	r25, 0x020B
    6940:	89 2b       	or	r24, r25
    6942:	09 f0       	breq	.+2      	; 0x6946 <pattern_screw+0x52e>
    6944:	b5 cd       	rjmp	.-1174   	; 0x64b0 <pattern_screw+0x98>
    6946:	ee cf       	rjmp	.-36     	; 0x6924 <pattern_screw+0x50c>

	//end pattern by scrolling down
	count=8;
	while(!fallout && count--)
	{
		switch(exit_mode)
    6948:	8f 81       	ldd	r24, Y+7	; 0x07
    694a:	83 30       	cpi	r24, 0x03	; 3
    694c:	a1 f0       	breq	.+40     	; 0x6976 <pattern_screw+0x55e>
    694e:	84 30       	cpi	r24, 0x04	; 4
    6950:	28 f4       	brcc	.+10     	; 0x695c <pattern_screw+0x544>
    6952:	81 30       	cpi	r24, 0x01	; 1
    6954:	b1 f0       	breq	.+44     	; 0x6982 <pattern_screw+0x56a>
    6956:	82 30       	cpi	r24, 0x02	; 2
    6958:	c9 f4       	brne	.+50     	; 0x698c <pattern_screw+0x574>
    695a:	16 c0       	rjmp	.+44     	; 0x6988 <pattern_screw+0x570>
    695c:	8f 81       	ldd	r24, Y+7	; 0x07
    695e:	85 30       	cpi	r24, 0x05	; 5
    6960:	39 f0       	breq	.+14     	; 0x6970 <pattern_screw+0x558>
    6962:	85 30       	cpi	r24, 0x05	; 5
    6964:	58 f0       	brcs	.+22     	; 0x697c <pattern_screw+0x564>
    6966:	86 30       	cpi	r24, 0x06	; 6
    6968:	89 f4       	brne	.+34     	; 0x698c <pattern_screw+0x574>
		{
			case DIRECTION_BACKWARD:
				led_frame_back();
    696a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <led_frame_back>
    696e:	0e c0       	rjmp	.+28     	; 0x698c <pattern_screw+0x574>
				break;

			case DIRECTION_FORWARD:
				led_frame_forward();
    6970:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <led_frame_forward>
    6974:	0b c0       	rjmp	.+22     	; 0x698c <pattern_screw+0x574>
				break;

			case DIRECTION_LEFT:
				led_frame_left();
    6976:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
    697a:	08 c0       	rjmp	.+16     	; 0x698c <pattern_screw+0x574>
				break;

			case DIRECTION_RIGHT:
				led_frame_right();
    697c:	0e 94 18 1c 	call	0x3830	; 0x3830 <led_frame_right>
    6980:	05 c0       	rjmp	.+10     	; 0x698c <pattern_screw+0x574>
				break;

			case DIRECTION_UP:
				led_frame_up();
    6982:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <led_frame_up>
    6986:	02 c0       	rjmp	.+4      	; 0x698c <pattern_screw+0x574>
				break;

			case DIRECTION_DOWN:
				led_frame_down();
    6988:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
		
	};

	//end pattern by scrolling down
	count=8;
	while(!fallout && count--)
    698c:	01 50       	subi	r16, 0x01	; 1
    698e:	10 40       	sbci	r17, 0x00	; 0

			case DIRECTION_DOWN:
				led_frame_down();
				break;
		};
		led_waitframe(SCREW_FRAMESTEP);
    6990:	85 e0       	ldi	r24, 0x05	; 5
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		
	};

	//end pattern by scrolling down
	count=8;
	while(!fallout && count--)
    6998:	80 91 f4 01 	lds	r24, 0x01F4
    699c:	88 23       	and	r24, r24
    699e:	19 f4       	brne	.+6      	; 0x69a6 <pattern_screw+0x58e>
    69a0:	01 15       	cp	r16, r1
    69a2:	11 05       	cpc	r17, r1
    69a4:	89 f6       	brne	.-94     	; 0x6948 <pattern_screw+0x530>
				led_frame_down();
				break;
		};
		led_waitframe(SCREW_FRAMESTEP);
	};
}
    69a6:	27 96       	adiw	r28, 0x07	; 7
    69a8:	0f b6       	in	r0, 0x3f	; 63
    69aa:	f8 94       	cli
    69ac:	de bf       	out	0x3e, r29	; 62
    69ae:	0f be       	out	0x3f, r0	; 63
    69b0:	cd bf       	out	0x3d, r28	; 61
    69b2:	cf 91       	pop	r28
    69b4:	df 91       	pop	r29
    69b6:	1f 91       	pop	r17
    69b8:	0f 91       	pop	r16
    69ba:	ff 90       	pop	r15
    69bc:	ef 90       	pop	r14
    69be:	df 90       	pop	r13
    69c0:	cf 90       	pop	r12
    69c2:	bf 90       	pop	r11
    69c4:	af 90       	pop	r10
    69c6:	9f 90       	pop	r9
    69c8:	8f 90       	pop	r8
    69ca:	7f 90       	pop	r7
    69cc:	6f 90       	pop	r6
    69ce:	5f 90       	pop	r5
    69d0:	4f 90       	pop	r4
    69d2:	3f 90       	pop	r3
    69d4:	2f 90       	pop	r2
    69d6:	08 95       	ret

000069d8 <pattern_waveup>:
//intensity -255 - 0 is off to full
//intensity 0 - 255 is full to off
//intensity changes by framestep each frame (affects speed)
//intensity distance of starting locations between frames
void pattern_waveup(int ringsize, int framestep, int distance, int framerate)
{
    69d8:	2f 92       	push	r2
    69da:	3f 92       	push	r3
    69dc:	4f 92       	push	r4
    69de:	5f 92       	push	r5
    69e0:	6f 92       	push	r6
    69e2:	7f 92       	push	r7
    69e4:	8f 92       	push	r8
    69e6:	9f 92       	push	r9
    69e8:	af 92       	push	r10
    69ea:	bf 92       	push	r11
    69ec:	cf 92       	push	r12
    69ee:	df 92       	push	r13
    69f0:	ef 92       	push	r14
    69f2:	ff 92       	push	r15
    69f4:	0f 93       	push	r16
    69f6:	1f 93       	push	r17
    69f8:	df 93       	push	r29
    69fa:	cf 93       	push	r28
    69fc:	cd b7       	in	r28, 0x3d	; 61
    69fe:	de b7       	in	r29, 0x3e	; 62
    6a00:	61 97       	sbiw	r28, 0x11	; 17
    6a02:	0f b6       	in	r0, 0x3f	; 63
    6a04:	f8 94       	cli
    6a06:	de bf       	out	0x3e, r29	; 62
    6a08:	0f be       	out	0x3f, r0	; 63
    6a0a:	cd bf       	out	0x3d, r28	; 61
    6a0c:	1c 01       	movw	r2, r24
    6a0e:	8a 01       	movw	r16, r20
    6a10:	c9 01       	movw	r24, r18
	char finished=FALSE;
	int intensity[8];
	int index=0;
	int tempint;
	
	fallout=FALSE;
    6a12:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    6a16:	20 91 f5 01 	lds	r18, 0x01F5
    6a1a:	30 91 f6 01 	lds	r19, 0x01F6
    6a1e:	30 93 0b 02 	sts	0x020B, r19
    6a22:	20 93 0a 02 	sts	0x020A, r18

	//configure initial intensity, begin with all plains off
	intensity[7]=-255;
	intensity[6]=intensity[7]-distance;
    6a26:	21 e0       	ldi	r18, 0x01	; 1
    6a28:	e2 2e       	mov	r14, r18
    6a2a:	2f ef       	ldi	r18, 0xFF	; 255
    6a2c:	f2 2e       	mov	r15, r18
    6a2e:	e4 1a       	sub	r14, r20
    6a30:	f5 0a       	sbc	r15, r21
	intensity[5]=intensity[6]-distance;
    6a32:	27 01       	movw	r4, r14
    6a34:	44 1a       	sub	r4, r20
    6a36:	55 0a       	sbc	r5, r21
	intensity[4]=intensity[5]-distance;
    6a38:	32 01       	movw	r6, r4
    6a3a:	64 1a       	sub	r6, r20
    6a3c:	75 0a       	sbc	r7, r21
	intensity[3]=intensity[4]-distance;
    6a3e:	43 01       	movw	r8, r6
    6a40:	84 1a       	sub	r8, r20
    6a42:	95 0a       	sbc	r9, r21
	intensity[2]=intensity[3]-distance;
    6a44:	54 01       	movw	r10, r8
    6a46:	a4 1a       	sub	r10, r20
    6a48:	b5 0a       	sbc	r11, r21
	intensity[1]=intensity[2]-distance;
    6a4a:	65 01       	movw	r12, r10
    6a4c:	c4 1a       	sub	r12, r20
    6a4e:	d5 0a       	sbc	r13, r21
	intensity[0]=intensity[1]-distance;
	
	//frame rate
	led_framerate(framerate);
    6a50:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
    6a54:	90 e0       	ldi	r25, 0x00	; 0
	
	//set intensitys to 0
	index=0;
	while(index!=8)
		led_plane_intensity(index++,0);
    6a56:	89 2f       	mov	r24, r25
    6a58:	60 e0       	ldi	r22, 0x00	; 0
    6a5a:	99 8b       	std	Y+17, r25	; 0x11
    6a5c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
    6a60:	99 89       	ldd	r25, Y+17	; 0x11
    6a62:	9f 5f       	subi	r25, 0xFF	; 255
	//frame rate
	led_framerate(framerate);
	
	//set intensitys to 0
	index=0;
	while(index!=8)
    6a64:	98 30       	cpi	r25, 0x08	; 8
    6a66:	b9 f7       	brne	.-18     	; 0x6a56 <pattern_waveup+0x7e>
	
	fallout=FALSE;
	time = duration;

	//configure initial intensity, begin with all plains off
	intensity[7]=-255;
    6a68:	81 e0       	ldi	r24, 0x01	; 1
    6a6a:	9f ef       	ldi	r25, 0xFF	; 255
    6a6c:	98 8b       	std	Y+16, r25	; 0x10
    6a6e:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=intensity[7]-distance;
    6a70:	fe 86       	std	Y+14, r15	; 0x0e
    6a72:	ed 86       	std	Y+13, r14	; 0x0d
	intensity[5]=intensity[6]-distance;
    6a74:	5c 86       	std	Y+12, r5	; 0x0c
    6a76:	4b 86       	std	Y+11, r4	; 0x0b
	intensity[4]=intensity[5]-distance;
    6a78:	7a 86       	std	Y+10, r7	; 0x0a
    6a7a:	69 86       	std	Y+9, r6	; 0x09
	intensity[3]=intensity[4]-distance;
    6a7c:	98 86       	std	Y+8, r9	; 0x08
    6a7e:	8f 82       	std	Y+7, r8	; 0x07
	intensity[2]=intensity[3]-distance;
    6a80:	be 82       	std	Y+6, r11	; 0x06
    6a82:	ad 82       	std	Y+5, r10	; 0x05
	intensity[1]=intensity[2]-distance;
    6a84:	dc 82       	std	Y+4, r13	; 0x04
    6a86:	cb 82       	std	Y+3, r12	; 0x03
	intensity[0]=intensity[1]-distance;
    6a88:	c0 1a       	sub	r12, r16
    6a8a:	d1 0a       	sbc	r13, r17
    6a8c:	da 82       	std	Y+2, r13	; 0x02
    6a8e:	c9 82       	std	Y+1, r12	; 0x01
	index=0;
	while(index!=8)
		led_plane_intensity(index++,0);
	
	//all leds on
	memset(led_frame_bitmap, 0xFF, 64);
    6a90:	87 e4       	ldi	r24, 0x47	; 71
    6a92:	92 e0       	ldi	r25, 0x02	; 2
    6a94:	6f ef       	ldi	r22, 0xFF	; 255
    6a96:	70 e0       	ldi	r23, 0x00	; 0
    6a98:	40 e4       	ldi	r20, 0x40	; 64
    6a9a:	50 e0       	ldi	r21, 0x00	; 0
    6a9c:	0e 94 48 50 	call	0xa090	; 0xa090 <memset>

	//running process
	while(!fallout && (!duration || time))
    6aa0:	3e 01       	movw	r6, r28
    6aa2:	08 94       	sec
    6aa4:	61 1c       	adc	r6, r1
    6aa6:	71 1c       	adc	r7, r1
		while(index!=8)
		{
			tempint = intensity[index];
			tempint++;
			
			if(tempint==ringsize+1)
    6aa8:	41 01       	movw	r8, r2
    6aaa:	08 94       	sec
    6aac:	81 1c       	adc	r8, r1
    6aae:	91 1c       	adc	r9, r1
				tempint=-ringsize;
    6ab0:	aa 24       	eor	r10, r10
    6ab2:	bb 24       	eor	r11, r11
    6ab4:	a2 18       	sub	r10, r2
    6ab6:	b3 08       	sbc	r11, r3
    6ab8:	29 c0       	rjmp	.+82     	; 0x6b0c <pattern_waveup+0x134>
	while(!fallout && (!duration || time))
	{
		index=0;
		while(index!=8)
		{
			tempint = intensity[index];
    6aba:	f6 01       	movw	r30, r12
    6abc:	00 81       	ld	r16, Z
    6abe:	11 81       	ldd	r17, Z+1	; 0x01
			tempint++;
    6ac0:	0f 5f       	subi	r16, 0xFF	; 255
    6ac2:	1f 4f       	sbci	r17, 0xFF	; 255
			
			if(tempint==ringsize+1)
    6ac4:	08 15       	cp	r16, r8
    6ac6:	19 05       	cpc	r17, r9
    6ac8:	09 f4       	brne	.+2      	; 0x6acc <pattern_waveup+0xf4>
				tempint=-ringsize;
    6aca:	85 01       	movw	r16, r10
				
			if(tempint < 0)
    6acc:	17 ff       	sbrs	r17, 7
    6ace:	07 c0       	rjmp	.+14     	; 0x6ade <pattern_waveup+0x106>
			{
				if(tempint > -255)
    6ad0:	ff ef       	ldi	r31, 0xFF	; 255
    6ad2:	02 30       	cpi	r16, 0x02	; 2
    6ad4:	1f 07       	cpc	r17, r31
    6ad6:	54 f0       	brlt	.+20     	; 0x6aec <pattern_waveup+0x114>
					led_plane_intensity(index, tempint+255);
    6ad8:	60 2f       	mov	r22, r16
    6ada:	61 50       	subi	r22, 0x01	; 1
    6adc:	05 c0       	rjmp	.+10     	; 0x6ae8 <pattern_waveup+0x110>
				else
					led_plane_intensity(index, 0);
			}
			else
			{
				if(tempint < 255)
    6ade:	0f 3f       	cpi	r16, 0xFF	; 255
    6ae0:	11 05       	cpc	r17, r1
    6ae2:	24 f4       	brge	.+8      	; 0x6aec <pattern_waveup+0x114>
					led_plane_intensity(index, 255-tempint);
    6ae4:	60 2f       	mov	r22, r16
    6ae6:	60 95       	com	r22
    6ae8:	8f 2d       	mov	r24, r15
    6aea:	02 c0       	rjmp	.+4      	; 0x6af0 <pattern_waveup+0x118>
				else
					led_plane_intensity(index, 0);
    6aec:	8f 2d       	mov	r24, r15
    6aee:	60 e0       	ldi	r22, 0x00	; 0
    6af0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			};
			intensity[index]=tempint;
    6af4:	f6 01       	movw	r30, r12
    6af6:	01 93       	st	Z+, r16
    6af8:	11 93       	st	Z+, r17
    6afa:	6f 01       	movw	r12, r30
    6afc:	f3 94       	inc	r15

	//running process
	while(!fallout && (!duration || time))
	{
		index=0;
		while(index!=8)
    6afe:	f8 e0       	ldi	r31, 0x08	; 8
    6b00:	ff 16       	cp	r15, r31
    6b02:	d9 f6       	brne	.-74     	; 0x6aba <pattern_waveup+0xe2>
			};
			intensity[index]=tempint;
			
			index++;
		};
		led_waitframe(1);
    6b04:	81 e0       	ldi	r24, 0x01	; 1
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	
	//all leds on
	memset(led_frame_bitmap, 0xFF, 64);

	//running process
	while(!fallout && (!duration || time))
    6b0c:	80 91 f4 01 	lds	r24, 0x01F4
    6b10:	88 23       	and	r24, r24
    6b12:	f1 f5       	brne	.+124    	; 0x6b90 <pattern_waveup+0x1b8>
    6b14:	80 91 f5 01 	lds	r24, 0x01F5
    6b18:	90 91 f6 01 	lds	r25, 0x01F6
    6b1c:	89 2b       	or	r24, r25
    6b1e:	19 f4       	brne	.+6      	; 0x6b26 <pattern_waveup+0x14e>
    6b20:	63 01       	movw	r12, r6
    6b22:	ff 24       	eor	r15, r15
    6b24:	ca cf       	rjmp	.-108    	; 0x6aba <pattern_waveup+0xe2>
    6b26:	80 91 0a 02 	lds	r24, 0x020A
    6b2a:	90 91 0b 02 	lds	r25, 0x020B
    6b2e:	89 2b       	or	r24, r25
    6b30:	b9 f7       	brne	.-18     	; 0x6b20 <pattern_waveup+0x148>
    6b32:	2e c0       	rjmp	.+92     	; 0x6b90 <pattern_waveup+0x1b8>
	{
		index=0;
		finished=TRUE;
		while(index!=8)
		{
			tempint = intensity[index];
    6b34:	f6 01       	movw	r30, r12
    6b36:	80 81       	ld	r24, Z
    6b38:	91 81       	ldd	r25, Z+1	; 0x01
			if(tempint != -ringsize)
    6b3a:	85 01       	movw	r16, r10
    6b3c:	8a 15       	cp	r24, r10
    6b3e:	9b 05       	cpc	r25, r11
    6b40:	11 f0       	breq	.+4      	; 0x6b46 <pattern_waveup+0x16e>
			{
				tempint++;
    6b42:	01 96       	adiw	r24, 0x01	; 1
    6b44:	ee 24       	eor	r14, r14
				finished=FALSE;
			};
			
			if(tempint==ringsize+1)
    6b46:	88 15       	cp	r24, r8
    6b48:	99 05       	cpc	r25, r9
    6b4a:	09 f0       	breq	.+2      	; 0x6b4e <pattern_waveup+0x176>
    6b4c:	8c 01       	movw	r16, r24
				tempint=-ringsize;
			
			if(tempint < 0)
    6b4e:	17 ff       	sbrs	r17, 7
    6b50:	07 c0       	rjmp	.+14     	; 0x6b60 <pattern_waveup+0x188>
			{
				if(tempint > -255)
    6b52:	ff ef       	ldi	r31, 0xFF	; 255
    6b54:	02 30       	cpi	r16, 0x02	; 2
    6b56:	1f 07       	cpc	r17, r31
    6b58:	54 f0       	brlt	.+20     	; 0x6b6e <pattern_waveup+0x196>
					led_plane_intensity(index, tempint + 255);
    6b5a:	60 2f       	mov	r22, r16
    6b5c:	61 50       	subi	r22, 0x01	; 1
    6b5e:	05 c0       	rjmp	.+10     	; 0x6b6a <pattern_waveup+0x192>
				else
					led_plane_intensity(index, 0);
			}
			else
			{
				if(tempint < 255)
    6b60:	0f 3f       	cpi	r16, 0xFF	; 255
    6b62:	11 05       	cpc	r17, r1
    6b64:	24 f4       	brge	.+8      	; 0x6b6e <pattern_waveup+0x196>
					led_plane_intensity(index, 255 - tempint);
    6b66:	60 2f       	mov	r22, r16
    6b68:	60 95       	com	r22
    6b6a:	8f 2d       	mov	r24, r15
    6b6c:	02 c0       	rjmp	.+4      	; 0x6b72 <pattern_waveup+0x19a>
				else
					led_plane_intensity(index, 0);
    6b6e:	8f 2d       	mov	r24, r15
    6b70:	60 e0       	ldi	r22, 0x00	; 0
    6b72:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			};
			intensity[index]=tempint;
    6b76:	f6 01       	movw	r30, r12
    6b78:	01 93       	st	Z+, r16
    6b7a:	11 93       	st	Z+, r17
    6b7c:	6f 01       	movw	r12, r30
    6b7e:	f3 94       	inc	r15
	//exit process
	while(!fallout & !finished)
	{
		index=0;
		finished=TRUE;
		while(index!=8)
    6b80:	f8 e0       	ldi	r31, 0x08	; 8
    6b82:	ff 16       	cp	r15, r31
    6b84:	b9 f6       	brne	.-82     	; 0x6b34 <pattern_waveup+0x15c>
			};
			intensity[index]=tempint;
			
			index++;
		};
		led_waitframe(1);
    6b86:	81 e0       	ldi	r24, 0x01	; 1
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    6b8e:	0d c0       	rjmp	.+26     	; 0x6baa <pattern_waveup+0x1d2>
    6b90:	ee 24       	eor	r14, r14
		};
		led_waitframe(1);
	};
	
	//exit process
	while(!fallout & !finished)
    6b92:	3e 01       	movw	r6, r28
    6b94:	08 94       	sec
    6b96:	61 1c       	adc	r6, r1
    6b98:	71 1c       	adc	r7, r1
		index=0;
		finished=TRUE;
		while(index!=8)
		{
			tempint = intensity[index];
			if(tempint != -ringsize)
    6b9a:	aa 24       	eor	r10, r10
    6b9c:	bb 24       	eor	r11, r11
    6b9e:	a2 18       	sub	r10, r2
    6ba0:	b3 08       	sbc	r11, r3
			{
				tempint++;
				finished=FALSE;
			};
			
			if(tempint==ringsize+1)
    6ba2:	41 01       	movw	r8, r2
    6ba4:	08 94       	sec
    6ba6:	81 1c       	adc	r8, r1
    6ba8:	91 1c       	adc	r9, r1
		};
		led_waitframe(1);
	};
	
	//exit process
	while(!fallout & !finished)
    6baa:	80 91 f4 01 	lds	r24, 0x01F4
    6bae:	88 23       	and	r24, r24
    6bb0:	39 f4       	brne	.+14     	; 0x6bc0 <pattern_waveup+0x1e8>
    6bb2:	ee 20       	and	r14, r14
    6bb4:	29 f4       	brne	.+10     	; 0x6bc0 <pattern_waveup+0x1e8>
    6bb6:	63 01       	movw	r12, r6
    6bb8:	ee 24       	eor	r14, r14
    6bba:	e3 94       	inc	r14
    6bbc:	ff 24       	eor	r15, r15
    6bbe:	ba cf       	rjmp	.-140    	; 0x6b34 <pattern_waveup+0x15c>
			
			index++;
		};
		led_waitframe(1);
	};
}
    6bc0:	61 96       	adiw	r28, 0x11	; 17
    6bc2:	0f b6       	in	r0, 0x3f	; 63
    6bc4:	f8 94       	cli
    6bc6:	de bf       	out	0x3e, r29	; 62
    6bc8:	0f be       	out	0x3f, r0	; 63
    6bca:	cd bf       	out	0x3d, r28	; 61
    6bcc:	cf 91       	pop	r28
    6bce:	df 91       	pop	r29
    6bd0:	1f 91       	pop	r17
    6bd2:	0f 91       	pop	r16
    6bd4:	ff 90       	pop	r15
    6bd6:	ef 90       	pop	r14
    6bd8:	df 90       	pop	r13
    6bda:	cf 90       	pop	r12
    6bdc:	bf 90       	pop	r11
    6bde:	af 90       	pop	r10
    6be0:	9f 90       	pop	r9
    6be2:	8f 90       	pop	r8
    6be4:	7f 90       	pop	r7
    6be6:	6f 90       	pop	r6
    6be8:	5f 90       	pop	r5
    6bea:	4f 90       	pop	r4
    6bec:	3f 90       	pop	r3
    6bee:	2f 90       	pop	r2
    6bf0:	08 95       	ret

00006bf2 <pattern_spinface>:
		led_waitframe(FLAPSHEET_FRAMESTEP);
	};
}

void pattern_spinface(void)
{
    6bf2:	cf 92       	push	r12
    6bf4:	ef 92       	push	r14
    6bf6:	ff 92       	push	r15
    6bf8:	0f 93       	push	r16
    6bfa:	1f 93       	push	r17
	uint8_t index=0, finished=0;

	fallout=FALSE;
    6bfc:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    6c00:	80 91 f5 01 	lds	r24, 0x01F5
    6c04:	90 91 f6 01 	lds	r25, 0x01F6
    6c08:	90 93 0b 02 	sts	0x020B, r25
    6c0c:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(SPINFACE_FRAMERATE);
    6c10:	84 e6       	ldi	r24, 0x64	; 100
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    6c18:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    6c1c:	8f ef       	ldi	r24, 0xFF	; 255
    6c1e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
//  ####  
//##    ##  
//########
// ######

	led_line(0,0,4,1,0,4,TRUE);led_line(6,0,3,7,0,3,TRUE);
    6c22:	80 e0       	ldi	r24, 0x00	; 0
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	60 e0       	ldi	r22, 0x00	; 0
    6c28:	70 e0       	ldi	r23, 0x00	; 0
    6c2a:	44 e0       	ldi	r20, 0x04	; 4
    6c2c:	50 e0       	ldi	r21, 0x00	; 0
    6c2e:	21 e0       	ldi	r18, 0x01	; 1
    6c30:	30 e0       	ldi	r19, 0x00	; 0
    6c32:	00 e0       	ldi	r16, 0x00	; 0
    6c34:	10 e0       	ldi	r17, 0x00	; 0
    6c36:	f4 e0       	ldi	r31, 0x04	; 4
    6c38:	ef 2e       	mov	r14, r31
    6c3a:	f1 2c       	mov	r15, r1
    6c3c:	cc 24       	eor	r12, r12
    6c3e:	c3 94       	inc	r12
    6c40:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
    6c44:	86 e0       	ldi	r24, 0x06	; 6
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	60 e0       	ldi	r22, 0x00	; 0
    6c4a:	70 e0       	ldi	r23, 0x00	; 0
    6c4c:	43 e0       	ldi	r20, 0x03	; 3
    6c4e:	50 e0       	ldi	r21, 0x00	; 0
    6c50:	27 e0       	ldi	r18, 0x07	; 7
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	e3 e0       	ldi	r30, 0x03	; 3
    6c56:	ee 2e       	mov	r14, r30
    6c58:	f1 2c       	mov	r15, r1
    6c5a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,1,4,1,1,4,TRUE);led_line(6,1,3,7,1,3,TRUE);
    6c5e:	80 e0       	ldi	r24, 0x00	; 0
    6c60:	90 e0       	ldi	r25, 0x00	; 0
    6c62:	61 e0       	ldi	r22, 0x01	; 1
    6c64:	70 e0       	ldi	r23, 0x00	; 0
    6c66:	44 e0       	ldi	r20, 0x04	; 4
    6c68:	50 e0       	ldi	r21, 0x00	; 0
    6c6a:	21 e0       	ldi	r18, 0x01	; 1
    6c6c:	30 e0       	ldi	r19, 0x00	; 0
    6c6e:	01 e0       	ldi	r16, 0x01	; 1
    6c70:	10 e0       	ldi	r17, 0x00	; 0
    6c72:	b4 e0       	ldi	r27, 0x04	; 4
    6c74:	eb 2e       	mov	r14, r27
    6c76:	f1 2c       	mov	r15, r1
    6c78:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
    6c7c:	86 e0       	ldi	r24, 0x06	; 6
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	61 e0       	ldi	r22, 0x01	; 1
    6c82:	70 e0       	ldi	r23, 0x00	; 0
    6c84:	43 e0       	ldi	r20, 0x03	; 3
    6c86:	50 e0       	ldi	r21, 0x00	; 0
    6c88:	27 e0       	ldi	r18, 0x07	; 7
    6c8a:	30 e0       	ldi	r19, 0x00	; 0
    6c8c:	a3 e0       	ldi	r26, 0x03	; 3
    6c8e:	ea 2e       	mov	r14, r26
    6c90:	f1 2c       	mov	r15, r1
    6c92:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(3,2,4,4,2,3,TRUE);
    6c96:	83 e0       	ldi	r24, 0x03	; 3
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	62 e0       	ldi	r22, 0x02	; 2
    6c9c:	70 e0       	ldi	r23, 0x00	; 0
    6c9e:	44 e0       	ldi	r20, 0x04	; 4
    6ca0:	50 e0       	ldi	r21, 0x00	; 0
    6ca2:	24 e0       	ldi	r18, 0x04	; 4
    6ca4:	30 e0       	ldi	r19, 0x00	; 0
    6ca6:	02 e0       	ldi	r16, 0x02	; 2
    6ca8:	10 e0       	ldi	r17, 0x00	; 0
    6caa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(3,3,4,4,3,3,TRUE);
    6cae:	83 e0       	ldi	r24, 0x03	; 3
    6cb0:	90 e0       	ldi	r25, 0x00	; 0
    6cb2:	63 e0       	ldi	r22, 0x03	; 3
    6cb4:	70 e0       	ldi	r23, 0x00	; 0
    6cb6:	44 e0       	ldi	r20, 0x04	; 4
    6cb8:	50 e0       	ldi	r21, 0x00	; 0
    6cba:	24 e0       	ldi	r18, 0x04	; 4
    6cbc:	30 e0       	ldi	r19, 0x00	; 0
    6cbe:	03 e0       	ldi	r16, 0x03	; 3
    6cc0:	10 e0       	ldi	r17, 0x00	; 0
    6cc2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,4,4,5,4,3,TRUE);
    6cc6:	82 e0       	ldi	r24, 0x02	; 2
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	64 e0       	ldi	r22, 0x04	; 4
    6ccc:	70 e0       	ldi	r23, 0x00	; 0
    6cce:	44 e0       	ldi	r20, 0x04	; 4
    6cd0:	50 e0       	ldi	r21, 0x00	; 0
    6cd2:	25 e0       	ldi	r18, 0x05	; 5
    6cd4:	30 e0       	ldi	r19, 0x00	; 0
    6cd6:	04 e0       	ldi	r16, 0x04	; 4
    6cd8:	10 e0       	ldi	r17, 0x00	; 0
    6cda:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,5,4,1,5,4,TRUE);led_line(6,5,3,7,5,3,TRUE);
    6cde:	80 e0       	ldi	r24, 0x00	; 0
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	65 e0       	ldi	r22, 0x05	; 5
    6ce4:	70 e0       	ldi	r23, 0x00	; 0
    6ce6:	44 e0       	ldi	r20, 0x04	; 4
    6ce8:	50 e0       	ldi	r21, 0x00	; 0
    6cea:	21 e0       	ldi	r18, 0x01	; 1
    6cec:	30 e0       	ldi	r19, 0x00	; 0
    6cee:	05 e0       	ldi	r16, 0x05	; 5
    6cf0:	10 e0       	ldi	r17, 0x00	; 0
    6cf2:	f4 e0       	ldi	r31, 0x04	; 4
    6cf4:	ef 2e       	mov	r14, r31
    6cf6:	f1 2c       	mov	r15, r1
    6cf8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
    6cfc:	86 e0       	ldi	r24, 0x06	; 6
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	65 e0       	ldi	r22, 0x05	; 5
    6d02:	70 e0       	ldi	r23, 0x00	; 0
    6d04:	43 e0       	ldi	r20, 0x03	; 3
    6d06:	50 e0       	ldi	r21, 0x00	; 0
    6d08:	27 e0       	ldi	r18, 0x07	; 7
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	e3 e0       	ldi	r30, 0x03	; 3
    6d0e:	ee 2e       	mov	r14, r30
    6d10:	f1 2c       	mov	r15, r1
    6d12:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,6,4,7,6,3,TRUE);
    6d16:	80 e0       	ldi	r24, 0x00	; 0
    6d18:	90 e0       	ldi	r25, 0x00	; 0
    6d1a:	66 e0       	ldi	r22, 0x06	; 6
    6d1c:	70 e0       	ldi	r23, 0x00	; 0
    6d1e:	44 e0       	ldi	r20, 0x04	; 4
    6d20:	50 e0       	ldi	r21, 0x00	; 0
    6d22:	27 e0       	ldi	r18, 0x07	; 7
    6d24:	30 e0       	ldi	r19, 0x00	; 0
    6d26:	06 e0       	ldi	r16, 0x06	; 6
    6d28:	10 e0       	ldi	r17, 0x00	; 0
    6d2a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(1,7,4,6,7,3,TRUE);
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	67 e0       	ldi	r22, 0x07	; 7
    6d34:	70 e0       	ldi	r23, 0x00	; 0
    6d36:	44 e0       	ldi	r20, 0x04	; 4
    6d38:	50 e0       	ldi	r21, 0x00	; 0
    6d3a:	26 e0       	ldi	r18, 0x06	; 6
    6d3c:	30 e0       	ldi	r19, 0x00	; 0
    6d3e:	07 e0       	ldi	r16, 0x07	; 7
    6d40:	10 e0       	ldi	r17, 0x00	; 0
    6d42:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
    6d46:	10 e0       	ldi	r17, 0x00	; 0
    6d48:	00 e0       	ldi	r16, 0x00	; 0
    6d4a:	9f c0       	rjmp	.+318    	; 0x6e8a <pattern_spinface+0x298>
//14 steps 0-13
//  ####
//      ####
static void spin_y(uint8_t step)
{
	switch(step)
    6d4c:	16 30       	cpi	r17, 0x06	; 6
    6d4e:	b9 f1       	breq	.+110    	; 0x6dbe <pattern_spinface+0x1cc>
    6d50:	17 30       	cpi	r17, 0x07	; 7
    6d52:	70 f4       	brcc	.+28     	; 0x6d70 <pattern_spinface+0x17e>
    6d54:	12 30       	cpi	r17, 0x02	; 2
    6d56:	31 f1       	breq	.+76     	; 0x6da4 <pattern_spinface+0x1b2>
    6d58:	13 30       	cpi	r17, 0x03	; 3
    6d5a:	30 f4       	brcc	.+12     	; 0x6d68 <pattern_spinface+0x176>
    6d5c:	11 23       	and	r17, r17
    6d5e:	11 f1       	breq	.+68     	; 0x6da4 <pattern_spinface+0x1b2>
    6d60:	11 30       	cpi	r17, 0x01	; 1
    6d62:	09 f0       	breq	.+2      	; 0x6d66 <pattern_spinface+0x174>
    6d64:	7b c0       	rjmp	.+246    	; 0x6e5c <pattern_spinface+0x26a>
    6d66:	16 c0       	rjmp	.+44     	; 0x6d94 <pattern_spinface+0x1a2>
    6d68:	14 30       	cpi	r17, 0x04	; 4
    6d6a:	09 f0       	breq	.+2      	; 0x6d6e <pattern_spinface+0x17c>
    6d6c:	43 c0       	rjmp	.+134    	; 0x6df4 <pattern_spinface+0x202>
    6d6e:	3a c0       	rjmp	.+116    	; 0x6de4 <pattern_spinface+0x1f2>
    6d70:	1a 30       	cpi	r17, 0x0A	; 10
    6d72:	09 f4       	brne	.+2      	; 0x6d76 <pattern_spinface+0x184>
    6d74:	54 c0       	rjmp	.+168    	; 0x6e1e <pattern_spinface+0x22c>
    6d76:	1b 30       	cpi	r17, 0x0B	; 11
    6d78:	18 f4       	brcc	.+6      	; 0x6d80 <pattern_spinface+0x18e>
    6d7a:	18 30       	cpi	r17, 0x08	; 8
    6d7c:	d9 f5       	brne	.+118    	; 0x6df4 <pattern_spinface+0x202>
    6d7e:	32 c0       	rjmp	.+100    	; 0x6de4 <pattern_spinface+0x1f2>
    6d80:	1c 30       	cpi	r17, 0x0C	; 12
    6d82:	09 f4       	brne	.+2      	; 0x6d86 <pattern_spinface+0x194>
    6d84:	4c c0       	rjmp	.+152    	; 0x6e1e <pattern_spinface+0x22c>
    6d86:	1c 30       	cpi	r17, 0x0C	; 12
    6d88:	08 f4       	brcc	.+2      	; 0x6d8c <pattern_spinface+0x19a>
    6d8a:	41 c0       	rjmp	.+130    	; 0x6e0e <pattern_spinface+0x21c>
    6d8c:	1d 30       	cpi	r17, 0x0D	; 13
    6d8e:	09 f0       	breq	.+2      	; 0x6d92 <pattern_spinface+0x1a0>
    6d90:	65 c0       	rjmp	.+202    	; 0x6e5c <pattern_spinface+0x26a>
    6d92:	4c c0       	rjmp	.+152    	; 0x6e2c <pattern_spinface+0x23a>
	led_plane_x_back(1);
	led_plane_x_forward(6);
	led_plane_x_forward(7);
	break;
	case 1:
	led_plane_x_back(0);
    6d94:	80 e0       	ldi	r24, 0x00	; 0
    6d96:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_back(2);
    6d9a:	82 e0       	ldi	r24, 0x02	; 2
    6d9c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_forward(5);
    6da0:	85 e0       	ldi	r24, 0x05	; 5
    6da2:	07 c0       	rjmp	.+14     	; 0x6db2 <pattern_spinface+0x1c0>
	led_plane_x_forward(7);
	break;
	case 2:
	led_plane_x_back(0);
    6da4:	80 e0       	ldi	r24, 0x00	; 0
    6da6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_back(1);
    6daa:	81 e0       	ldi	r24, 0x01	; 1
    6dac:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_forward(6);
    6db0:	86 e0       	ldi	r24, 0x06	; 6
    6db2:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(7);
    6db6:	87 e0       	ldi	r24, 0x07	; 7
    6db8:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
    6dbc:	4f c0       	rjmp	.+158    	; 0x6e5c <pattern_spinface+0x26a>
	led_plane_z_right(6);
	led_plane_z_left(1);
	led_plane_z_left(0);
	break;
	case 6:
	led_plane_z_right(7);
    6dbe:	87 e0       	ldi	r24, 0x07	; 7
    6dc0:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_right(6);
    6dc4:	86 e0       	ldi	r24, 0x06	; 6
    6dc6:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_right(5);
    6dca:	85 e0       	ldi	r24, 0x05	; 5
    6dcc:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_right(4);
    6dd0:	84 e0       	ldi	r24, 0x04	; 4
    6dd2:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_left(3);
    6dd6:	83 e0       	ldi	r24, 0x03	; 3
    6dd8:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>
	led_plane_z_left(2);
    6ddc:	82 e0       	ldi	r24, 0x02	; 2
    6dde:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>
    6de2:	0e c0       	rjmp	.+28     	; 0x6e00 <pattern_spinface+0x20e>
	led_plane_z_right(6);
	led_plane_z_left(1);
	led_plane_z_left(0);
	break;
	case 8:
	led_plane_z_right(7);
    6de4:	87 e0       	ldi	r24, 0x07	; 7
    6de6:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_right(5);
    6dea:	85 e0       	ldi	r24, 0x05	; 5
    6dec:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_left(2);
    6df0:	82 e0       	ldi	r24, 0x02	; 2
    6df2:	07 c0       	rjmp	.+14     	; 0x6e02 <pattern_spinface+0x210>
	led_plane_z_left(0);
	break;
	case 9:
	led_plane_z_right(7);
    6df4:	87 e0       	ldi	r24, 0x07	; 7
    6df6:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_right(6);
    6dfa:	86 e0       	ldi	r24, 0x06	; 6
    6dfc:	0e 94 9d 1a 	call	0x353a	; 0x353a <led_plane_z_right>
	led_plane_z_left(1);
    6e00:	81 e0       	ldi	r24, 0x01	; 1
    6e02:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>
	led_plane_z_left(0);
    6e06:	80 e0       	ldi	r24, 0x00	; 0
    6e08:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <led_plane_z_left>
    6e0c:	27 c0       	rjmp	.+78     	; 0x6e5c <pattern_spinface+0x26a>
	led_plane_x_forward(6);
	led_plane_x_back(1);
	led_plane_x_back(0);
	break;        
	case 11:
	led_plane_x_forward(7);
    6e0e:	87 e0       	ldi	r24, 0x07	; 7
    6e10:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(5);
    6e14:	85 e0       	ldi	r24, 0x05	; 5
    6e16:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_back(2);
    6e1a:	82 e0       	ldi	r24, 0x02	; 2
    6e1c:	1a c0       	rjmp	.+52     	; 0x6e52 <pattern_spinface+0x260>
	led_plane_x_back(0);
	break;
	case 12:
	led_plane_x_forward(7);
    6e1e:	87 e0       	ldi	r24, 0x07	; 7
    6e20:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(6);
    6e24:	86 e0       	ldi	r24, 0x06	; 6
    6e26:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
    6e2a:	12 c0       	rjmp	.+36     	; 0x6e50 <pattern_spinface+0x25e>
	led_plane_x_back(1);
	led_plane_x_back(0);
	break;
	case 13:
	led_plane_x_forward(7);
    6e2c:	87 e0       	ldi	r24, 0x07	; 7
    6e2e:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(6);
    6e32:	86 e0       	ldi	r24, 0x06	; 6
    6e34:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(5);
    6e38:	85 e0       	ldi	r24, 0x05	; 5
    6e3a:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_forward(4);
    6e3e:	84 e0       	ldi	r24, 0x04	; 4
    6e40:	0e 94 c8 10 	call	0x2190	; 0x2190 <led_plane_x_forward>
	led_plane_x_back(3);
    6e44:	83 e0       	ldi	r24, 0x03	; 3
    6e46:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_back(2);
    6e4a:	82 e0       	ldi	r24, 0x02	; 2
    6e4c:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_back(1);
    6e50:	81 e0       	ldi	r24, 0x01	; 1
    6e52:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	led_plane_x_back(0);
    6e56:	80 e0       	ldi	r24, 0x00	; 0
    6e58:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <led_plane_x_back>
	
	//running process
	while(!fallout && finished!=8 )
	{
		spin_y(index);
		index++;
    6e5c:	1f 5f       	subi	r17, 0xFF	; 255
		if(index==14)
    6e5e:	1e 30       	cpi	r17, 0x0E	; 14
    6e60:	09 f4       	brne	.+2      	; 0x6e64 <pattern_spinface+0x272>
    6e62:	10 e0       	ldi	r17, 0x00	; 0
			index=0;
		
		if(duration && !time)
    6e64:	80 91 f5 01 	lds	r24, 0x01F5
    6e68:	90 91 f6 01 	lds	r25, 0x01F6
    6e6c:	89 2b       	or	r24, r25
    6e6e:	49 f0       	breq	.+18     	; 0x6e82 <pattern_spinface+0x290>
    6e70:	80 91 0a 02 	lds	r24, 0x020A
    6e74:	90 91 0b 02 	lds	r25, 0x020B
    6e78:	89 2b       	or	r24, r25
    6e7a:	19 f4       	brne	.+6      	; 0x6e82 <pattern_spinface+0x290>
		{
			led_frame_down();
    6e7c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <led_frame_down>
			finished++;
    6e80:	0f 5f       	subi	r16, 0xFF	; 255
		};
		
		led_waitframe(SPINFACE_FRAMESTEP);
    6e82:	85 e0       	ldi	r24, 0x05	; 5
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	led_line(0,5,4,1,5,4,TRUE);led_line(6,5,3,7,5,3,TRUE);
	led_line(0,6,4,7,6,3,TRUE);
	led_line(1,7,4,6,7,3,TRUE);
	
	//running process
	while(!fallout && finished!=8 )
    6e8a:	80 91 f4 01 	lds	r24, 0x01F4
    6e8e:	88 23       	and	r24, r24
    6e90:	19 f4       	brne	.+6      	; 0x6e98 <pattern_spinface+0x2a6>
    6e92:	08 30       	cpi	r16, 0x08	; 8
    6e94:	09 f0       	breq	.+2      	; 0x6e98 <pattern_spinface+0x2a6>
    6e96:	5a cf       	rjmp	.-332    	; 0x6d4c <pattern_spinface+0x15a>
			finished++;
		};
		
		led_waitframe(SPINFACE_FRAMESTEP);
	};
}
    6e98:	1f 91       	pop	r17
    6e9a:	0f 91       	pop	r16
    6e9c:	ff 90       	pop	r15
    6e9e:	ef 90       	pop	r14
    6ea0:	cf 90       	pop	r12
    6ea2:	08 95       	ret

00006ea4 <pattern_flapsheet>:
		};
	};
}

void pattern_flapsheet(void)
{
    6ea4:	2f 92       	push	r2
    6ea6:	3f 92       	push	r3
    6ea8:	4f 92       	push	r4
    6eaa:	5f 92       	push	r5
    6eac:	6f 92       	push	r6
    6eae:	7f 92       	push	r7
    6eb0:	8f 92       	push	r8
    6eb2:	9f 92       	push	r9
    6eb4:	af 92       	push	r10
    6eb6:	bf 92       	push	r11
    6eb8:	cf 92       	push	r12
    6eba:	df 92       	push	r13
    6ebc:	ef 92       	push	r14
    6ebe:	ff 92       	push	r15
    6ec0:	0f 93       	push	r16
    6ec2:	1f 93       	push	r17
    6ec4:	df 93       	push	r29
    6ec6:	cf 93       	push	r28
    6ec8:	cd b7       	in	r28, 0x3d	; 61
    6eca:	de b7       	in	r29, 0x3e	; 62
    6ecc:	c0 58       	subi	r28, 0x80	; 128
    6ece:	d0 40       	sbci	r29, 0x00	; 0
    6ed0:	0f b6       	in	r0, 0x3f	; 63
    6ed2:	f8 94       	cli
    6ed4:	de bf       	out	0x3e, r29	; 62
    6ed6:	0f be       	out	0x3f, r0	; 63
    6ed8:	cd bf       	out	0x3d, r28	; 61
	uint8_t q[64];
	uint8_t state[64];
	uint8_t y=0;
	char finished=FALSE, exit=FALSE;
	
	fallout=FALSE;
    6eda:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    6ede:	80 91 f5 01 	lds	r24, 0x01F5
    6ee2:	90 91 f6 01 	lds	r25, 0x01F6
    6ee6:	90 93 0b 02 	sts	0x020B, r25
    6eea:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(FLAPSHEET_FRAMERATE);
    6eee:	82 e3       	ldi	r24, 0x32	; 50
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    6ef6:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    6efa:	8f ef       	ldi	r24, 0xFF	; 255
    6efc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    6f00:	cc 24       	eor	r12, r12
    6f02:	dd 24       	eor	r13, r13
    6f04:	17 e0       	ldi	r17, 0x07	; 7
    6f06:	e1 2e       	mov	r14, r17
    6f08:	f1 2c       	mov	r15, r1
				xd*=-1;
			zd=7-z*2;
			if(zd<0)
				zd*=-1;
				
			q[(x<<3)+z] = sqrt(xd*xd+zd*zd)*9;
    6f0a:	1e 01       	movw	r2, r28
    6f0c:	08 94       	sec
    6f0e:	21 1c       	adc	r2, r1
    6f10:	31 1c       	adc	r3, r1
    6f12:	b1 e4       	ldi	r27, 0x41	; 65
    6f14:	4b 2e       	mov	r4, r27
    6f16:	51 2c       	mov	r5, r1
    6f18:	4c 0e       	add	r4, r28
    6f1a:	5d 1e       	adc	r5, r29
    6f1c:	39 c0       	rjmp	.+114    	; 0x6f90 <pattern_flapsheet+0xec>
	fallout=FALSE;
	time = duration;

	led_framerate(FLAPSHEET_FRAMERATE);
	led_blank();
	led_plane_intensity_all(255);	
    6f1e:	98 01       	movw	r18, r16
    6f20:	17 ff       	sbrs	r17, 7
    6f22:	03 c0       	rjmp	.+6      	; 0x6f2a <pattern_flapsheet+0x86>
    6f24:	30 95       	com	r19
    6f26:	21 95       	neg	r18
    6f28:	3f 4f       	sbci	r19, 0xFF	; 255
				xd*=-1;
			zd=7-z*2;
			if(zd<0)
				zd*=-1;
				
			q[(x<<3)+z] = sqrt(xd*xd+zd*zd)*9;
    6f2a:	22 9f       	mul	r18, r18
    6f2c:	b0 01       	movw	r22, r0
    6f2e:	23 9f       	mul	r18, r19
    6f30:	70 0d       	add	r23, r0
    6f32:	32 9f       	mul	r19, r18
    6f34:	70 0d       	add	r23, r0
    6f36:	11 24       	eor	r1, r1
    6f38:	66 0d       	add	r22, r6
    6f3a:	77 1d       	adc	r23, r7
    6f3c:	88 27       	eor	r24, r24
    6f3e:	77 fd       	sbrc	r23, 7
    6f40:	80 95       	com	r24
    6f42:	98 2f       	mov	r25, r24
    6f44:	0e 94 be 4c 	call	0x997c	; 0x997c <__floatsisf>
    6f48:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <sqrt>
    6f4c:	20 e0       	ldi	r18, 0x00	; 0
    6f4e:	30 e0       	ldi	r19, 0x00	; 0
    6f50:	40 e1       	ldi	r20, 0x10	; 16
    6f52:	51 e4       	ldi	r21, 0x41	; 65
    6f54:	0e 94 4e 4d 	call	0x9a9c	; 0x9a9c <__mulsf3>
    6f58:	0e 94 90 4c 	call	0x9920	; 0x9920 <__fixunssfsi>
    6f5c:	d4 01       	movw	r26, r8
    6f5e:	6d 93       	st	X+, r22
    6f60:	4d 01       	movw	r8, r26
			
			state[(x<<3)+z] = 0;
    6f62:	f5 01       	movw	r30, r10
    6f64:	11 92       	st	Z+, r1
    6f66:	5f 01       	movw	r10, r30
    6f68:	02 50       	subi	r16, 0x02	; 2
    6f6a:	10 40       	sbci	r17, 0x00	; 0

	x=0;
	while(x != 8)
	{
		z=0;
		while(z != 8)
    6f6c:	ff ef       	ldi	r31, 0xFF	; 255
    6f6e:	07 3f       	cpi	r16, 0xF7	; 247
    6f70:	1f 07       	cpc	r17, r31
    6f72:	a9 f6       	brne	.-86     	; 0x6f1e <pattern_flapsheet+0x7a>
			q[(x<<3)+z] = sqrt(xd*xd+zd*zd)*9;
			
			state[(x<<3)+z] = 0;
			z++;
		};
		x++;
    6f74:	08 94       	sec
    6f76:	c1 1c       	adc	r12, r1
    6f78:	d1 1c       	adc	r13, r1
    6f7a:	8e ef       	ldi	r24, 0xFE	; 254
    6f7c:	9f ef       	ldi	r25, 0xFF	; 255
    6f7e:	e8 0e       	add	r14, r24
    6f80:	f9 1e       	adc	r15, r25
	led_framerate(FLAPSHEET_FRAMERATE);
	led_blank();
	led_plane_intensity_all(255);	

	x=0;
	while(x != 8)
    6f82:	98 e0       	ldi	r25, 0x08	; 8
    6f84:	c9 16       	cp	r12, r25
    6f86:	d1 04       	cpc	r13, r1
    6f88:	19 f4       	brne	.+6      	; 0x6f90 <pattern_flapsheet+0xec>
    6f8a:	a8 e0       	ldi	r26, 0x08	; 8
    6f8c:	da 2e       	mov	r13, r26
    6f8e:	34 c0       	rjmp	.+104    	; 0x6ff8 <pattern_flapsheet+0x154>
    6f90:	97 01       	movw	r18, r14
    6f92:	f7 fe       	sbrs	r15, 7
    6f94:	03 c0       	rjmp	.+6      	; 0x6f9c <pattern_flapsheet+0xf8>
    6f96:	30 95       	com	r19
    6f98:	21 95       	neg	r18
    6f9a:	3f 4f       	sbci	r19, 0xFF	; 255
				xd*=-1;
			zd=7-z*2;
			if(zd<0)
				zd*=-1;
				
			q[(x<<3)+z] = sqrt(xd*xd+zd*zd)*9;
    6f9c:	c6 01       	movw	r24, r12
    6f9e:	f3 e0       	ldi	r31, 0x03	; 3
    6fa0:	88 0f       	add	r24, r24
    6fa2:	99 1f       	adc	r25, r25
    6fa4:	fa 95       	dec	r31
    6fa6:	e1 f7       	brne	.-8      	; 0x6fa0 <pattern_flapsheet+0xfc>
    6fa8:	22 9f       	mul	r18, r18
    6faa:	30 01       	movw	r6, r0
    6fac:	23 9f       	mul	r18, r19
    6fae:	70 0c       	add	r7, r0
    6fb0:	32 9f       	mul	r19, r18
    6fb2:	70 0c       	add	r7, r0
    6fb4:	11 24       	eor	r1, r1
    6fb6:	41 01       	movw	r8, r2
    6fb8:	88 0e       	add	r8, r24
    6fba:	99 1e       	adc	r9, r25
    6fbc:	52 01       	movw	r10, r4
    6fbe:	a8 0e       	add	r10, r24
    6fc0:	b9 1e       	adc	r11, r25
    6fc2:	07 e0       	ldi	r16, 0x07	; 7
    6fc4:	10 e0       	ldi	r17, 0x00	; 0
    6fc6:	ab cf       	rjmp	.-170    	; 0x6f1e <pattern_flapsheet+0x7a>
		x++;
	};
	
	//entry pattern
	index=8;
	while(!fallout && index--)
    6fc8:	da 94       	dec	r13
	{
		led_frame_left();
    6fca:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
		led_line(7,6,0,7,6,7,1);
    6fce:	87 e0       	ldi	r24, 0x07	; 7
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	66 e0       	ldi	r22, 0x06	; 6
    6fd4:	70 e0       	ldi	r23, 0x00	; 0
    6fd6:	40 e0       	ldi	r20, 0x00	; 0
    6fd8:	50 e0       	ldi	r21, 0x00	; 0
    6fda:	27 e0       	ldi	r18, 0x07	; 7
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
    6fde:	06 e0       	ldi	r16, 0x06	; 6
    6fe0:	10 e0       	ldi	r17, 0x00	; 0
    6fe2:	e7 e0       	ldi	r30, 0x07	; 7
    6fe4:	ee 2e       	mov	r14, r30
    6fe6:	f1 2c       	mov	r15, r1
    6fe8:	cc 24       	eor	r12, r12
    6fea:	c3 94       	inc	r12
    6fec:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
		led_waitframe(FLAPSHEET_FRAMESTEP);
    6ff0:	81 e0       	ldi	r24, 0x01	; 1
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		x++;
	};
	
	//entry pattern
	index=8;
	while(!fallout && index--)
    6ff8:	80 91 f4 01 	lds	r24, 0x01F4
    6ffc:	88 23       	and	r24, r24
    6ffe:	09 f0       	breq	.+2      	; 0x7002 <pattern_flapsheet+0x15e>
    7000:	5e c0       	rjmp	.+188    	; 0x70be <pattern_flapsheet+0x21a>
    7002:	dd 20       	and	r13, r13
    7004:	09 f7       	brne	.-62     	; 0x6fc8 <pattern_flapsheet+0x124>
    7006:	5b c0       	rjmp	.+182    	; 0x70be <pattern_flapsheet+0x21a>
	};

	//running process
	while(!fallout && !finished)
	{
		led_blank();
    7008:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
    700c:	83 01       	movw	r16, r6
    700e:	75 01       	movw	r14, r10
    7010:	dd 24       	eor	r13, r13
    7012:	d3 94       	inc	r13
    7014:	4e 2d       	mov	r20, r14
    7016:	4a 19       	sub	r20, r10
		index=0;
		finished=TRUE;
		while(index!=64)
		{	
			//normal running
			if(!duration || time)
    7018:	80 91 f5 01 	lds	r24, 0x01F5
    701c:	90 91 f6 01 	lds	r25, 0x01F6
    7020:	89 2b       	or	r24, r25
    7022:	31 f0       	breq	.+12     	; 0x7030 <pattern_flapsheet+0x18c>
    7024:	80 91 0a 02 	lds	r24, 0x020A
    7028:	90 91 0b 02 	lds	r25, 0x020B
    702c:	89 2b       	or	r24, r25
    702e:	29 f0       	breq	.+10     	; 0x703a <pattern_flapsheet+0x196>
			{
				q[index]+=FLAPSHEET_SPEED;
    7030:	d8 01       	movw	r26, r16
    7032:	8c 91       	ld	r24, X
    7034:	8b 5f       	subi	r24, 0xFB	; 251
    7036:	8c 93       	st	X, r24
    7038:	14 c0       	rjmp	.+40     	; 0x7062 <pattern_flapsheet+0x1be>
    703a:	f8 01       	movw	r30, r16
    703c:	80 81       	ld	r24, Z
			}
			else
			//time up
			{
				//exit triggered?
				if(exit)
    703e:	cc 20       	and	r12, r12
    7040:	31 f0       	breq	.+12     	; 0x704e <pattern_flapsheet+0x1aa>
				{
					if(q[index] > FLAPSHEET_SPEED)
    7042:	86 30       	cpi	r24, 0x06	; 6
    7044:	58 f0       	brcs	.+22     	; 0x705c <pattern_flapsheet+0x1b8>
					{
						q[index]+=FLAPSHEET_SPEED;
    7046:	8b 5f       	subi	r24, 0xFB	; 251
    7048:	d8 01       	movw	r26, r16
    704a:	8c 93       	st	X, r24
    704c:	06 c0       	rjmp	.+12     	; 0x705a <pattern_flapsheet+0x1b6>
					};
				}
				else
				{
					finished=FALSE;
					q[index]+=FLAPSHEET_SPEED;
    704e:	8b 5f       	subi	r24, 0xFB	; 251
    7050:	f8 01       	movw	r30, r16
    7052:	80 83       	st	Z, r24
					if(q[0] < FLAPSHEET_SPEED) //commence exit once corner hits 0deg
    7054:	89 81       	ldd	r24, Y+1	; 0x01
    7056:	85 30       	cpi	r24, 0x05	; 5
    7058:	20 f4       	brcc	.+8      	; 0x7062 <pattern_flapsheet+0x1be>
    705a:	dd 24       	eor	r13, r13
    705c:	cc 24       	eor	r12, r12
    705e:	c3 94       	inc	r12
    7060:	01 c0       	rjmp	.+2      	; 0x7064 <pattern_flapsheet+0x1c0>
    7062:	dd 24       	eor	r13, r13
						exit=TRUE;
				};
			};
			
			y = pgm_read_byte(&sintable[q[index]]);
    7064:	d8 01       	movw	r26, r16
    7066:	ec 91       	ld	r30, X
    7068:	f0 e0       	ldi	r31, 0x00	; 0
    706a:	ef 5f       	subi	r30, 0xFF	; 255
    706c:	f8 4f       	sbci	r31, 0xF8	; 248
    706e:	64 91       	lpm	r22, Z+
			y >>= 4;
    7070:	62 95       	swap	r22
    7072:	6f 70       	andi	r22, 0x0F	; 15
			
			if(y==6)
    7074:	66 30       	cpi	r22, 0x06	; 6
    7076:	11 f4       	brne	.+4      	; 0x707c <pattern_flapsheet+0x1d8>
				state[index]=1;
    7078:	f7 01       	movw	r30, r14
    707a:	50 82       	st	Z, r5
				
			if(state[index]==0)
    707c:	d7 01       	movw	r26, r14
    707e:	8c 91       	ld	r24, X
    7080:	94 2f       	mov	r25, r20
    7082:	97 70       	andi	r25, 0x07	; 7
    7084:	46 95       	lsr	r20
    7086:	46 95       	lsr	r20
    7088:	46 95       	lsr	r20
    708a:	88 23       	and	r24, r24
    708c:	21 f4       	brne	.+8      	; 0x7096 <pattern_flapsheet+0x1f2>
				led_point(index & 0x07, 6, (index>>3)&0x07, TRUE );
    708e:	47 70       	andi	r20, 0x07	; 7
    7090:	89 2f       	mov	r24, r25
    7092:	66 e0       	ldi	r22, 0x06	; 6
    7094:	02 c0       	rjmp	.+4      	; 0x709a <pattern_flapsheet+0x1f6>
			else
				led_point(index & 0x07, y, (index>>3)&0x07, TRUE );
    7096:	47 70       	andi	r20, 0x07	; 7
    7098:	89 2f       	mov	r24, r25
    709a:	21 e0       	ldi	r18, 0x01	; 1
    709c:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
    70a0:	08 94       	sec
    70a2:	e1 1c       	adc	r14, r1
    70a4:	f1 1c       	adc	r15, r1
    70a6:	0f 5f       	subi	r16, 0xFF	; 255
    70a8:	1f 4f       	sbci	r17, 0xFF	; 255
	while(!fallout && !finished)
	{
		led_blank();
		index=0;
		finished=TRUE;
		while(index!=64)
    70aa:	e8 14       	cp	r14, r8
    70ac:	f9 04       	cpc	r15, r9
    70ae:	09 f0       	breq	.+2      	; 0x70b2 <pattern_flapsheet+0x20e>
    70b0:	b1 cf       	rjmp	.-158    	; 0x7014 <pattern_flapsheet+0x170>
			else
				led_point(index & 0x07, y, (index>>3)&0x07, TRUE );
			index++;
		};
		
		led_waitframe(FLAPSHEET_FRAMESTEP);
    70b2:	81 e0       	ldi	r24, 0x01	; 1
    70b4:	90 e0       	ldi	r25, 0x00	; 0
    70b6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    70ba:	9d 2d       	mov	r25, r13
    70bc:	12 c0       	rjmp	.+36     	; 0x70e2 <pattern_flapsheet+0x23e>
    70be:	cc 24       	eor	r12, r12
    70c0:	90 e0       	ldi	r25, 0x00	; 0
	};

	//running process
	while(!fallout && !finished)
	{
		led_blank();
    70c2:	b1 e4       	ldi	r27, 0x41	; 65
    70c4:	ab 2e       	mov	r10, r27
    70c6:	b1 2c       	mov	r11, r1
    70c8:	ac 0e       	add	r10, r28
    70ca:	bd 1e       	adc	r11, r29
    70cc:	3e 01       	movw	r6, r28
    70ce:	08 94       	sec
    70d0:	61 1c       	adc	r6, r1
    70d2:	71 1c       	adc	r7, r1
    70d4:	55 24       	eor	r5, r5
    70d6:	53 94       	inc	r5
		index=0;
		finished=TRUE;
		while(index!=64)
    70d8:	a1 e8       	ldi	r26, 0x81	; 129
    70da:	8a 2e       	mov	r8, r26
    70dc:	91 2c       	mov	r9, r1
    70de:	8c 0e       	add	r8, r28
    70e0:	9d 1e       	adc	r9, r29
		led_line(7,6,0,7,6,7,1);
		led_waitframe(FLAPSHEET_FRAMESTEP);
	};

	//running process
	while(!fallout && !finished)
    70e2:	80 91 f4 01 	lds	r24, 0x01F4
    70e6:	88 23       	and	r24, r24
    70e8:	61 f4       	brne	.+24     	; 0x7102 <pattern_flapsheet+0x25e>
    70ea:	99 23       	and	r25, r25
    70ec:	09 f4       	brne	.+2      	; 0x70f0 <pattern_flapsheet+0x24c>
    70ee:	8c cf       	rjmp	.-232    	; 0x7008 <pattern_flapsheet+0x164>
    70f0:	08 c0       	rjmp	.+16     	; 0x7102 <pattern_flapsheet+0x25e>
		led_waitframe(FLAPSHEET_FRAMESTEP);
	};

	//end pattern
	index=8;
	while(!fallout && index--)
    70f2:	11 50       	subi	r17, 0x01	; 1
	{
		led_frame_left();
    70f4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <led_frame_left>
		led_waitframe(FLAPSHEET_FRAMESTEP);
    70f8:	81 e0       	ldi	r24, 0x01	; 1
    70fa:	90 e0       	ldi	r25, 0x00	; 0
    70fc:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    7100:	01 c0       	rjmp	.+2      	; 0x7104 <pattern_flapsheet+0x260>
    7102:	18 e0       	ldi	r17, 0x08	; 8
		led_waitframe(FLAPSHEET_FRAMESTEP);
	};

	//end pattern
	index=8;
	while(!fallout && index--)
    7104:	80 91 f4 01 	lds	r24, 0x01F4
    7108:	88 23       	and	r24, r24
    710a:	11 f4       	brne	.+4      	; 0x7110 <pattern_flapsheet+0x26c>
    710c:	11 23       	and	r17, r17
    710e:	89 f7       	brne	.-30     	; 0x70f2 <pattern_flapsheet+0x24e>
	{
		led_frame_left();
		led_waitframe(FLAPSHEET_FRAMESTEP);
	};
}
    7110:	c0 58       	subi	r28, 0x80	; 128
    7112:	df 4f       	sbci	r29, 0xFF	; 255
    7114:	0f b6       	in	r0, 0x3f	; 63
    7116:	f8 94       	cli
    7118:	de bf       	out	0x3e, r29	; 62
    711a:	0f be       	out	0x3f, r0	; 63
    711c:	cd bf       	out	0x3d, r28	; 61
    711e:	cf 91       	pop	r28
    7120:	df 91       	pop	r29
    7122:	1f 91       	pop	r17
    7124:	0f 91       	pop	r16
    7126:	ff 90       	pop	r15
    7128:	ef 90       	pop	r14
    712a:	df 90       	pop	r13
    712c:	cf 90       	pop	r12
    712e:	bf 90       	pop	r11
    7130:	af 90       	pop	r10
    7132:	9f 90       	pop	r9
    7134:	8f 90       	pop	r8
    7136:	7f 90       	pop	r7
    7138:	6f 90       	pop	r6
    713a:	5f 90       	pop	r5
    713c:	4f 90       	pop	r4
    713e:	3f 90       	pop	r3
    7140:	2f 90       	pop	r2
    7142:	08 95       	ret

00007144 <pattern_wirecubediag>:
		led_waitframe(1);
	};
}

void pattern_wirecubediag(void)
{
    7144:	af 92       	push	r10
    7146:	bf 92       	push	r11
    7148:	cf 92       	push	r12
    714a:	ef 92       	push	r14
    714c:	ff 92       	push	r15
    714e:	0f 93       	push	r16
    7150:	1f 93       	push	r17
    7152:	df 93       	push	r29
    7154:	cf 93       	push	r28
    7156:	cd b7       	in	r28, 0x3d	; 61
    7158:	de b7       	in	r29, 0x3e	; 62
    715a:	60 97       	sbiw	r28, 0x10	; 16
    715c:	0f b6       	in	r0, 0x3f	; 63
    715e:	f8 94       	cli
    7160:	de bf       	out	0x3e, r29	; 62
    7162:	0f be       	out	0x3f, r0	; 63
    7164:	cd bf       	out	0x3d, r28	; 61
	int intensity[8];
	int index=0;

	fallout=FALSE;
    7166:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    716a:	80 91 f5 01 	lds	r24, 0x01F5
    716e:	90 91 f6 01 	lds	r25, 0x01F6
    7172:	90 93 0b 02 	sts	0x020B, r25
    7176:	80 93 0a 02 	sts	0x020A, r24


	//frame rate
	led_framerate(100);
    717a:	84 e6       	ldi	r24, 0x64	; 100
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	
	//set intensitys to 0
	led_plane_intensity_all(0);
    7182:	80 e0       	ldi	r24, 0x00	; 0
    7184:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	
	//draw wireframe
	led_blank();
    7188:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	
	led_line(0,0,0,7,0,0,TRUE);
    718c:	80 e0       	ldi	r24, 0x00	; 0
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	60 e0       	ldi	r22, 0x00	; 0
    7192:	70 e0       	ldi	r23, 0x00	; 0
    7194:	40 e0       	ldi	r20, 0x00	; 0
    7196:	50 e0       	ldi	r21, 0x00	; 0
    7198:	27 e0       	ldi	r18, 0x07	; 7
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	00 e0       	ldi	r16, 0x00	; 0
    719e:	10 e0       	ldi	r17, 0x00	; 0
    71a0:	ee 24       	eor	r14, r14
    71a2:	ff 24       	eor	r15, r15
    71a4:	cc 24       	eor	r12, r12
    71a6:	c3 94       	inc	r12
    71a8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,7,0,7,TRUE);
    71ac:	80 e0       	ldi	r24, 0x00	; 0
    71ae:	90 e0       	ldi	r25, 0x00	; 0
    71b0:	60 e0       	ldi	r22, 0x00	; 0
    71b2:	70 e0       	ldi	r23, 0x00	; 0
    71b4:	47 e0       	ldi	r20, 0x07	; 7
    71b6:	50 e0       	ldi	r21, 0x00	; 0
    71b8:	27 e0       	ldi	r18, 0x07	; 7
    71ba:	30 e0       	ldi	r19, 0x00	; 0
    71bc:	a7 e0       	ldi	r26, 0x07	; 7
    71be:	ea 2e       	mov	r14, r26
    71c0:	f1 2c       	mov	r15, r1
    71c2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,7,7,0,TRUE);
    71c6:	80 e0       	ldi	r24, 0x00	; 0
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	67 e0       	ldi	r22, 0x07	; 7
    71cc:	70 e0       	ldi	r23, 0x00	; 0
    71ce:	40 e0       	ldi	r20, 0x00	; 0
    71d0:	50 e0       	ldi	r21, 0x00	; 0
    71d2:	27 e0       	ldi	r18, 0x07	; 7
    71d4:	30 e0       	ldi	r19, 0x00	; 0
    71d6:	07 e0       	ldi	r16, 0x07	; 7
    71d8:	10 e0       	ldi	r17, 0x00	; 0
    71da:	ee 24       	eor	r14, r14
    71dc:	ff 24       	eor	r15, r15
    71de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,7,7,7,7,TRUE);
    71e2:	80 e0       	ldi	r24, 0x00	; 0
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	67 e0       	ldi	r22, 0x07	; 7
    71e8:	70 e0       	ldi	r23, 0x00	; 0
    71ea:	47 e0       	ldi	r20, 0x07	; 7
    71ec:	50 e0       	ldi	r21, 0x00	; 0
    71ee:	27 e0       	ldi	r18, 0x07	; 7
    71f0:	30 e0       	ldi	r19, 0x00	; 0
    71f2:	f7 e0       	ldi	r31, 0x07	; 7
    71f4:	ef 2e       	mov	r14, r31
    71f6:	f1 2c       	mov	r15, r1
    71f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,7,0,TRUE);
    71fc:	80 e0       	ldi	r24, 0x00	; 0
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	60 e0       	ldi	r22, 0x00	; 0
    7202:	70 e0       	ldi	r23, 0x00	; 0
    7204:	40 e0       	ldi	r20, 0x00	; 0
    7206:	50 e0       	ldi	r21, 0x00	; 0
    7208:	20 e0       	ldi	r18, 0x00	; 0
    720a:	30 e0       	ldi	r19, 0x00	; 0
    720c:	ee 24       	eor	r14, r14
    720e:	ff 24       	eor	r15, r15
    7210:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,7,0,TRUE);	
    7214:	87 e0       	ldi	r24, 0x07	; 7
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	60 e0       	ldi	r22, 0x00	; 0
    721a:	70 e0       	ldi	r23, 0x00	; 0
    721c:	40 e0       	ldi	r20, 0x00	; 0
    721e:	50 e0       	ldi	r21, 0x00	; 0
    7220:	27 e0       	ldi	r18, 0x07	; 7
    7222:	30 e0       	ldi	r19, 0x00	; 0
    7224:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,0,7,7,TRUE);
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	60 e0       	ldi	r22, 0x00	; 0
    722e:	70 e0       	ldi	r23, 0x00	; 0
    7230:	47 e0       	ldi	r20, 0x07	; 7
    7232:	50 e0       	ldi	r21, 0x00	; 0
    7234:	20 e0       	ldi	r18, 0x00	; 0
    7236:	30 e0       	ldi	r19, 0x00	; 0
    7238:	e7 e0       	ldi	r30, 0x07	; 7
    723a:	ee 2e       	mov	r14, r30
    723c:	f1 2c       	mov	r15, r1
    723e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,7,7,7,7,TRUE);	
    7242:	87 e0       	ldi	r24, 0x07	; 7
    7244:	90 e0       	ldi	r25, 0x00	; 0
    7246:	60 e0       	ldi	r22, 0x00	; 0
    7248:	70 e0       	ldi	r23, 0x00	; 0
    724a:	47 e0       	ldi	r20, 0x07	; 7
    724c:	50 e0       	ldi	r21, 0x00	; 0
    724e:	27 e0       	ldi	r18, 0x07	; 7
    7250:	30 e0       	ldi	r19, 0x00	; 0
    7252:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,0,7,TRUE);
    7256:	80 e0       	ldi	r24, 0x00	; 0
    7258:	90 e0       	ldi	r25, 0x00	; 0
    725a:	60 e0       	ldi	r22, 0x00	; 0
    725c:	70 e0       	ldi	r23, 0x00	; 0
    725e:	40 e0       	ldi	r20, 0x00	; 0
    7260:	50 e0       	ldi	r21, 0x00	; 0
    7262:	20 e0       	ldi	r18, 0x00	; 0
    7264:	30 e0       	ldi	r19, 0x00	; 0
    7266:	00 e0       	ldi	r16, 0x00	; 0
    7268:	10 e0       	ldi	r17, 0x00	; 0
    726a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,0,7,TRUE);
    726e:	87 e0       	ldi	r24, 0x07	; 7
    7270:	90 e0       	ldi	r25, 0x00	; 0
    7272:	60 e0       	ldi	r22, 0x00	; 0
    7274:	70 e0       	ldi	r23, 0x00	; 0
    7276:	40 e0       	ldi	r20, 0x00	; 0
    7278:	50 e0       	ldi	r21, 0x00	; 0
    727a:	27 e0       	ldi	r18, 0x07	; 7
    727c:	30 e0       	ldi	r19, 0x00	; 0
    727e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,0,7,7,TRUE);
    7282:	80 e0       	ldi	r24, 0x00	; 0
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	67 e0       	ldi	r22, 0x07	; 7
    7288:	70 e0       	ldi	r23, 0x00	; 0
    728a:	40 e0       	ldi	r20, 0x00	; 0
    728c:	50 e0       	ldi	r21, 0x00	; 0
    728e:	20 e0       	ldi	r18, 0x00	; 0
    7290:	30 e0       	ldi	r19, 0x00	; 0
    7292:	07 e0       	ldi	r16, 0x07	; 7
    7294:	10 e0       	ldi	r17, 0x00	; 0
    7296:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,7,0,7,7,7,TRUE);
    729a:	87 e0       	ldi	r24, 0x07	; 7
    729c:	90 e0       	ldi	r25, 0x00	; 0
    729e:	67 e0       	ldi	r22, 0x07	; 7
    72a0:	70 e0       	ldi	r23, 0x00	; 0
    72a2:	40 e0       	ldi	r20, 0x00	; 0
    72a4:	50 e0       	ldi	r21, 0x00	; 0
    72a6:	27 e0       	ldi	r18, 0x07	; 7
    72a8:	30 e0       	ldi	r19, 0x00	; 0
    72aa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,7,7,7,TRUE);
    72ae:	80 e0       	ldi	r24, 0x00	; 0
    72b0:	90 e0       	ldi	r25, 0x00	; 0
    72b2:	60 e0       	ldi	r22, 0x00	; 0
    72b4:	70 e0       	ldi	r23, 0x00	; 0
    72b6:	40 e0       	ldi	r20, 0x00	; 0
    72b8:	50 e0       	ldi	r21, 0x00	; 0
    72ba:	27 e0       	ldi	r18, 0x07	; 7
    72bc:	30 e0       	ldi	r19, 0x00	; 0
    72be:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,0,7,7,TRUE);
    72c2:	87 e0       	ldi	r24, 0x07	; 7
    72c4:	90 e0       	ldi	r25, 0x00	; 0
    72c6:	60 e0       	ldi	r22, 0x00	; 0
    72c8:	70 e0       	ldi	r23, 0x00	; 0
    72ca:	40 e0       	ldi	r20, 0x00	; 0
    72cc:	50 e0       	ldi	r21, 0x00	; 0
    72ce:	20 e0       	ldi	r18, 0x00	; 0
    72d0:	30 e0       	ldi	r19, 0x00	; 0
    72d2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,7,7,0,TRUE);
    72d6:	80 e0       	ldi	r24, 0x00	; 0
    72d8:	90 e0       	ldi	r25, 0x00	; 0
    72da:	60 e0       	ldi	r22, 0x00	; 0
    72dc:	70 e0       	ldi	r23, 0x00	; 0
    72de:	47 e0       	ldi	r20, 0x07	; 7
    72e0:	50 e0       	ldi	r21, 0x00	; 0
    72e2:	27 e0       	ldi	r18, 0x07	; 7
    72e4:	30 e0       	ldi	r19, 0x00	; 0
    72e6:	ee 24       	eor	r14, r14
    72e8:	ff 24       	eor	r15, r15
    72ea:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,7,0,7,0,TRUE);
    72ee:	87 e0       	ldi	r24, 0x07	; 7
    72f0:	90 e0       	ldi	r25, 0x00	; 0
    72f2:	60 e0       	ldi	r22, 0x00	; 0
    72f4:	70 e0       	ldi	r23, 0x00	; 0
    72f6:	47 e0       	ldi	r20, 0x07	; 7
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	20 e0       	ldi	r18, 0x00	; 0
    72fc:	30 e0       	ldi	r19, 0x00	; 0
    72fe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>


	//fade in
	intensity[7]=0;
    7302:	18 8a       	std	Y+16, r1	; 0x10
    7304:	1f 86       	std	Y+15, r1	; 0x0f
	intensity[6]=-31;
    7306:	81 ee       	ldi	r24, 0xE1	; 225
    7308:	9f ef       	ldi	r25, 0xFF	; 255
    730a:	9e 87       	std	Y+14, r25	; 0x0e
    730c:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=-63;
    730e:	81 ec       	ldi	r24, 0xC1	; 193
    7310:	9f ef       	ldi	r25, 0xFF	; 255
    7312:	9c 87       	std	Y+12, r25	; 0x0c
    7314:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=-95;
    7316:	81 ea       	ldi	r24, 0xA1	; 161
    7318:	9f ef       	ldi	r25, 0xFF	; 255
    731a:	9a 87       	std	Y+10, r25	; 0x0a
    731c:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=-127;
    731e:	81 e8       	ldi	r24, 0x81	; 129
    7320:	9f ef       	ldi	r25, 0xFF	; 255
    7322:	98 87       	std	Y+8, r25	; 0x08
    7324:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=-159;
    7326:	81 e6       	ldi	r24, 0x61	; 97
    7328:	9f ef       	ldi	r25, 0xFF	; 255
    732a:	9e 83       	std	Y+6, r25	; 0x06
    732c:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=-191;
    732e:	81 e4       	ldi	r24, 0x41	; 65
    7330:	9f ef       	ldi	r25, 0xFF	; 255
    7332:	9c 83       	std	Y+4, r25	; 0x04
    7334:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=-223;
    7336:	81 e2       	ldi	r24, 0x21	; 33
    7338:	9f ef       	ldi	r25, 0xFF	; 255
    733a:	9a 83       	std	Y+2, r25	; 0x02
    733c:	89 83       	std	Y+1, r24	; 0x01
	while(intensity[0] != 255 && !fallout)
    733e:	5e 01       	movw	r10, r28
    7340:	08 94       	sec
    7342:	a1 1c       	adc	r10, r1
    7344:	b1 1c       	adc	r11, r1
    7346:	1c c0       	rjmp	.+56     	; 0x7380 <pattern_wirecubediag+0x23c>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7348:	f7 01       	movw	r30, r14
    734a:	00 81       	ld	r16, Z
    734c:	11 81       	ldd	r17, Z+1	; 0x01
    734e:	c8 01       	movw	r24, r16
    7350:	60 e0       	ldi	r22, 0x00	; 0
    7352:	70 e0       	ldi	r23, 0x00	; 0
    7354:	4f ef       	ldi	r20, 0xFF	; 255
    7356:	50 e0       	ldi	r21, 0x00	; 0
    7358:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    735c:	68 2f       	mov	r22, r24
    735e:	8c 2d       	mov	r24, r12
    7360:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]++;
    7364:	0f 5f       	subi	r16, 0xFF	; 255
    7366:	1f 4f       	sbci	r17, 0xFF	; 255
    7368:	f7 01       	movw	r30, r14
    736a:	01 93       	st	Z+, r16
    736c:	11 93       	st	Z+, r17
    736e:	7f 01       	movw	r14, r30
    7370:	c3 94       	inc	r12
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
	{
		index=0;
		while(index!=8)
    7372:	f8 e0       	ldi	r31, 0x08	; 8
    7374:	cf 16       	cp	r12, r31
    7376:	41 f7       	brne	.-48     	; 0x7348 <pattern_wirecubediag+0x204>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]++;
			index++;
		};
		led_waitframe(1);
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	90 e0       	ldi	r25, 0x00	; 0
    737c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=-95;
	intensity[3]=-127;
	intensity[2]=-159;
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
    7380:	89 81       	ldd	r24, Y+1	; 0x01
    7382:	9a 81       	ldd	r25, Y+2	; 0x02
    7384:	8f 3f       	cpi	r24, 0xFF	; 255
    7386:	91 05       	cpc	r25, r1
    7388:	59 f0       	breq	.+22     	; 0x73a0 <pattern_wirecubediag+0x25c>
    738a:	80 91 f4 01 	lds	r24, 0x01F4
    738e:	88 23       	and	r24, r24
    7390:	39 f4       	brne	.+14     	; 0x73a0 <pattern_wirecubediag+0x25c>
    7392:	75 01       	movw	r14, r10
    7394:	cc 24       	eor	r12, r12
    7396:	d8 cf       	rjmp	.-80     	; 0x7348 <pattern_wirecubediag+0x204>
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
		led_waitframe(1);
    7398:	81 e0       	ldi	r24, 0x01	; 1
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
    73a0:	80 91 f4 01 	lds	r24, 0x01F4
    73a4:	88 23       	and	r24, r24
    73a6:	61 f4       	brne	.+24     	; 0x73c0 <pattern_wirecubediag+0x27c>
    73a8:	80 91 f5 01 	lds	r24, 0x01F5
    73ac:	90 91 f6 01 	lds	r25, 0x01F6
    73b0:	89 2b       	or	r24, r25
    73b2:	91 f3       	breq	.-28     	; 0x7398 <pattern_wirecubediag+0x254>
    73b4:	80 91 0a 02 	lds	r24, 0x020A
    73b8:	90 91 0b 02 	lds	r25, 0x020B
    73bc:	89 2b       	or	r24, r25
    73be:	61 f7       	brne	.-40     	; 0x7398 <pattern_wirecubediag+0x254>
		led_waitframe(1);

	//exit process (fade out)
	intensity[7]=256;
    73c0:	80 e0       	ldi	r24, 0x00	; 0
    73c2:	91 e0       	ldi	r25, 0x01	; 1
    73c4:	98 8b       	std	Y+16, r25	; 0x10
    73c6:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=288;
    73c8:	80 e2       	ldi	r24, 0x20	; 32
    73ca:	91 e0       	ldi	r25, 0x01	; 1
    73cc:	9e 87       	std	Y+14, r25	; 0x0e
    73ce:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=320;
    73d0:	80 e4       	ldi	r24, 0x40	; 64
    73d2:	91 e0       	ldi	r25, 0x01	; 1
    73d4:	9c 87       	std	Y+12, r25	; 0x0c
    73d6:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=352;
    73d8:	80 e6       	ldi	r24, 0x60	; 96
    73da:	91 e0       	ldi	r25, 0x01	; 1
    73dc:	9a 87       	std	Y+10, r25	; 0x0a
    73de:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=384;
    73e0:	80 e8       	ldi	r24, 0x80	; 128
    73e2:	91 e0       	ldi	r25, 0x01	; 1
    73e4:	98 87       	std	Y+8, r25	; 0x08
    73e6:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=416;
    73e8:	80 ea       	ldi	r24, 0xA0	; 160
    73ea:	91 e0       	ldi	r25, 0x01	; 1
    73ec:	9e 83       	std	Y+6, r25	; 0x06
    73ee:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=448;
    73f0:	80 ec       	ldi	r24, 0xC0	; 192
    73f2:	91 e0       	ldi	r25, 0x01	; 1
    73f4:	9c 83       	std	Y+4, r25	; 0x04
    73f6:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=480;
    73f8:	80 ee       	ldi	r24, 0xE0	; 224
    73fa:	91 e0       	ldi	r25, 0x01	; 1
    73fc:	9a 83       	std	Y+2, r25	; 0x02
    73fe:	89 83       	std	Y+1, r24	; 0x01
	while(0 < intensity[0] && !fallout)
    7400:	5e 01       	movw	r10, r28
    7402:	08 94       	sec
    7404:	a1 1c       	adc	r10, r1
    7406:	b1 1c       	adc	r11, r1
    7408:	1c c0       	rjmp	.+56     	; 0x7442 <pattern_wirecubediag+0x2fe>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    740a:	f7 01       	movw	r30, r14
    740c:	00 81       	ld	r16, Z
    740e:	11 81       	ldd	r17, Z+1	; 0x01
    7410:	c8 01       	movw	r24, r16
    7412:	60 e0       	ldi	r22, 0x00	; 0
    7414:	70 e0       	ldi	r23, 0x00	; 0
    7416:	4f ef       	ldi	r20, 0xFF	; 255
    7418:	50 e0       	ldi	r21, 0x00	; 0
    741a:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    741e:	68 2f       	mov	r22, r24
    7420:	8c 2d       	mov	r24, r12
    7422:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]--;
    7426:	01 50       	subi	r16, 0x01	; 1
    7428:	10 40       	sbci	r17, 0x00	; 0
    742a:	f7 01       	movw	r30, r14
    742c:	01 93       	st	Z+, r16
    742e:	11 93       	st	Z+, r17
    7430:	7f 01       	movw	r14, r30
    7432:	c3 94       	inc	r12
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
	{
		index=0;
		while(index!=8)
    7434:	f8 e0       	ldi	r31, 0x08	; 8
    7436:	cf 16       	cp	r12, r31
    7438:	41 f7       	brne	.-48     	; 0x740a <pattern_wirecubediag+0x2c6>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
    743a:	81 e0       	ldi	r24, 0x01	; 1
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=352;
	intensity[3]=384;
	intensity[2]=416;
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
    7442:	89 81       	ldd	r24, Y+1	; 0x01
    7444:	9a 81       	ldd	r25, Y+2	; 0x02
    7446:	18 16       	cp	r1, r24
    7448:	19 06       	cpc	r1, r25
    744a:	3c f4       	brge	.+14     	; 0x745a <pattern_wirecubediag+0x316>
    744c:	80 91 f4 01 	lds	r24, 0x01F4
    7450:	88 23       	and	r24, r24
    7452:	19 f4       	brne	.+6      	; 0x745a <pattern_wirecubediag+0x316>
    7454:	75 01       	movw	r14, r10
    7456:	cc 24       	eor	r12, r12
    7458:	d8 cf       	rjmp	.-80     	; 0x740a <pattern_wirecubediag+0x2c6>
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
	};
}
    745a:	60 96       	adiw	r28, 0x10	; 16
    745c:	0f b6       	in	r0, 0x3f	; 63
    745e:	f8 94       	cli
    7460:	de bf       	out	0x3e, r29	; 62
    7462:	0f be       	out	0x3f, r0	; 63
    7464:	cd bf       	out	0x3d, r28	; 61
    7466:	cf 91       	pop	r28
    7468:	df 91       	pop	r29
    746a:	1f 91       	pop	r17
    746c:	0f 91       	pop	r16
    746e:	ff 90       	pop	r15
    7470:	ef 90       	pop	r14
    7472:	cf 90       	pop	r12
    7474:	bf 90       	pop	r11
    7476:	af 90       	pop	r10
    7478:	08 95       	ret

0000747a <pattern_wirecube>:
	};
}


void pattern_wirecube(void)
{
    747a:	af 92       	push	r10
    747c:	bf 92       	push	r11
    747e:	cf 92       	push	r12
    7480:	ef 92       	push	r14
    7482:	ff 92       	push	r15
    7484:	0f 93       	push	r16
    7486:	1f 93       	push	r17
    7488:	df 93       	push	r29
    748a:	cf 93       	push	r28
    748c:	cd b7       	in	r28, 0x3d	; 61
    748e:	de b7       	in	r29, 0x3e	; 62
    7490:	60 97       	sbiw	r28, 0x10	; 16
    7492:	0f b6       	in	r0, 0x3f	; 63
    7494:	f8 94       	cli
    7496:	de bf       	out	0x3e, r29	; 62
    7498:	0f be       	out	0x3f, r0	; 63
    749a:	cd bf       	out	0x3d, r28	; 61
	int intensity[8];
	int index=0;

	fallout=FALSE;
    749c:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    74a0:	80 91 f5 01 	lds	r24, 0x01F5
    74a4:	90 91 f6 01 	lds	r25, 0x01F6
    74a8:	90 93 0b 02 	sts	0x020B, r25
    74ac:	80 93 0a 02 	sts	0x020A, r24


	//frame rate
	led_framerate(100);
    74b0:	84 e6       	ldi	r24, 0x64	; 100
    74b2:	90 e0       	ldi	r25, 0x00	; 0
    74b4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	
	//set intensitys to 0
	led_plane_intensity_all(0);
    74b8:	80 e0       	ldi	r24, 0x00	; 0
    74ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	
	//draw wireframe
	led_blank();
    74be:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	
	led_line(0,0,0,7,0,0,TRUE);
    74c2:	80 e0       	ldi	r24, 0x00	; 0
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	60 e0       	ldi	r22, 0x00	; 0
    74c8:	70 e0       	ldi	r23, 0x00	; 0
    74ca:	40 e0       	ldi	r20, 0x00	; 0
    74cc:	50 e0       	ldi	r21, 0x00	; 0
    74ce:	27 e0       	ldi	r18, 0x07	; 7
    74d0:	30 e0       	ldi	r19, 0x00	; 0
    74d2:	00 e0       	ldi	r16, 0x00	; 0
    74d4:	10 e0       	ldi	r17, 0x00	; 0
    74d6:	ee 24       	eor	r14, r14
    74d8:	ff 24       	eor	r15, r15
    74da:	cc 24       	eor	r12, r12
    74dc:	c3 94       	inc	r12
    74de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,7,0,7,TRUE);
    74e2:	80 e0       	ldi	r24, 0x00	; 0
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	60 e0       	ldi	r22, 0x00	; 0
    74e8:	70 e0       	ldi	r23, 0x00	; 0
    74ea:	47 e0       	ldi	r20, 0x07	; 7
    74ec:	50 e0       	ldi	r21, 0x00	; 0
    74ee:	27 e0       	ldi	r18, 0x07	; 7
    74f0:	30 e0       	ldi	r19, 0x00	; 0
    74f2:	f7 e0       	ldi	r31, 0x07	; 7
    74f4:	ef 2e       	mov	r14, r31
    74f6:	f1 2c       	mov	r15, r1
    74f8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,7,7,0,TRUE);
    74fc:	80 e0       	ldi	r24, 0x00	; 0
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	67 e0       	ldi	r22, 0x07	; 7
    7502:	70 e0       	ldi	r23, 0x00	; 0
    7504:	40 e0       	ldi	r20, 0x00	; 0
    7506:	50 e0       	ldi	r21, 0x00	; 0
    7508:	27 e0       	ldi	r18, 0x07	; 7
    750a:	30 e0       	ldi	r19, 0x00	; 0
    750c:	07 e0       	ldi	r16, 0x07	; 7
    750e:	10 e0       	ldi	r17, 0x00	; 0
    7510:	ee 24       	eor	r14, r14
    7512:	ff 24       	eor	r15, r15
    7514:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,7,7,7,7,TRUE);
    7518:	80 e0       	ldi	r24, 0x00	; 0
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	67 e0       	ldi	r22, 0x07	; 7
    751e:	70 e0       	ldi	r23, 0x00	; 0
    7520:	47 e0       	ldi	r20, 0x07	; 7
    7522:	50 e0       	ldi	r21, 0x00	; 0
    7524:	27 e0       	ldi	r18, 0x07	; 7
    7526:	30 e0       	ldi	r19, 0x00	; 0
    7528:	e7 e0       	ldi	r30, 0x07	; 7
    752a:	ee 2e       	mov	r14, r30
    752c:	f1 2c       	mov	r15, r1
    752e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,7,0,TRUE);
    7532:	80 e0       	ldi	r24, 0x00	; 0
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	60 e0       	ldi	r22, 0x00	; 0
    7538:	70 e0       	ldi	r23, 0x00	; 0
    753a:	40 e0       	ldi	r20, 0x00	; 0
    753c:	50 e0       	ldi	r21, 0x00	; 0
    753e:	20 e0       	ldi	r18, 0x00	; 0
    7540:	30 e0       	ldi	r19, 0x00	; 0
    7542:	ee 24       	eor	r14, r14
    7544:	ff 24       	eor	r15, r15
    7546:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,7,0,TRUE);	
    754a:	87 e0       	ldi	r24, 0x07	; 7
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	60 e0       	ldi	r22, 0x00	; 0
    7550:	70 e0       	ldi	r23, 0x00	; 0
    7552:	40 e0       	ldi	r20, 0x00	; 0
    7554:	50 e0       	ldi	r21, 0x00	; 0
    7556:	27 e0       	ldi	r18, 0x07	; 7
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,0,7,7,TRUE);
    755e:	80 e0       	ldi	r24, 0x00	; 0
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	60 e0       	ldi	r22, 0x00	; 0
    7564:	70 e0       	ldi	r23, 0x00	; 0
    7566:	47 e0       	ldi	r20, 0x07	; 7
    7568:	50 e0       	ldi	r21, 0x00	; 0
    756a:	20 e0       	ldi	r18, 0x00	; 0
    756c:	30 e0       	ldi	r19, 0x00	; 0
    756e:	b7 e0       	ldi	r27, 0x07	; 7
    7570:	eb 2e       	mov	r14, r27
    7572:	f1 2c       	mov	r15, r1
    7574:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,7,7,7,7,TRUE);	
    7578:	87 e0       	ldi	r24, 0x07	; 7
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	60 e0       	ldi	r22, 0x00	; 0
    757e:	70 e0       	ldi	r23, 0x00	; 0
    7580:	47 e0       	ldi	r20, 0x07	; 7
    7582:	50 e0       	ldi	r21, 0x00	; 0
    7584:	27 e0       	ldi	r18, 0x07	; 7
    7586:	30 e0       	ldi	r19, 0x00	; 0
    7588:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,0,7,TRUE);
    758c:	80 e0       	ldi	r24, 0x00	; 0
    758e:	90 e0       	ldi	r25, 0x00	; 0
    7590:	60 e0       	ldi	r22, 0x00	; 0
    7592:	70 e0       	ldi	r23, 0x00	; 0
    7594:	40 e0       	ldi	r20, 0x00	; 0
    7596:	50 e0       	ldi	r21, 0x00	; 0
    7598:	20 e0       	ldi	r18, 0x00	; 0
    759a:	30 e0       	ldi	r19, 0x00	; 0
    759c:	00 e0       	ldi	r16, 0x00	; 0
    759e:	10 e0       	ldi	r17, 0x00	; 0
    75a0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,0,7,TRUE);
    75a4:	87 e0       	ldi	r24, 0x07	; 7
    75a6:	90 e0       	ldi	r25, 0x00	; 0
    75a8:	60 e0       	ldi	r22, 0x00	; 0
    75aa:	70 e0       	ldi	r23, 0x00	; 0
    75ac:	40 e0       	ldi	r20, 0x00	; 0
    75ae:	50 e0       	ldi	r21, 0x00	; 0
    75b0:	27 e0       	ldi	r18, 0x07	; 7
    75b2:	30 e0       	ldi	r19, 0x00	; 0
    75b4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,0,7,7,TRUE);
    75b8:	80 e0       	ldi	r24, 0x00	; 0
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	67 e0       	ldi	r22, 0x07	; 7
    75be:	70 e0       	ldi	r23, 0x00	; 0
    75c0:	40 e0       	ldi	r20, 0x00	; 0
    75c2:	50 e0       	ldi	r21, 0x00	; 0
    75c4:	20 e0       	ldi	r18, 0x00	; 0
    75c6:	30 e0       	ldi	r19, 0x00	; 0
    75c8:	07 e0       	ldi	r16, 0x07	; 7
    75ca:	10 e0       	ldi	r17, 0x00	; 0
    75cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,7,0,7,7,7,TRUE);
    75d0:	87 e0       	ldi	r24, 0x07	; 7
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	67 e0       	ldi	r22, 0x07	; 7
    75d6:	70 e0       	ldi	r23, 0x00	; 0
    75d8:	40 e0       	ldi	r20, 0x00	; 0
    75da:	50 e0       	ldi	r21, 0x00	; 0
    75dc:	27 e0       	ldi	r18, 0x07	; 7
    75de:	30 e0       	ldi	r19, 0x00	; 0
    75e0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>


	//fade in
	intensity[7]=0;
    75e4:	18 8a       	std	Y+16, r1	; 0x10
    75e6:	1f 86       	std	Y+15, r1	; 0x0f
	intensity[6]=-31;
    75e8:	81 ee       	ldi	r24, 0xE1	; 225
    75ea:	9f ef       	ldi	r25, 0xFF	; 255
    75ec:	9e 87       	std	Y+14, r25	; 0x0e
    75ee:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=-63;
    75f0:	81 ec       	ldi	r24, 0xC1	; 193
    75f2:	9f ef       	ldi	r25, 0xFF	; 255
    75f4:	9c 87       	std	Y+12, r25	; 0x0c
    75f6:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=-95;
    75f8:	81 ea       	ldi	r24, 0xA1	; 161
    75fa:	9f ef       	ldi	r25, 0xFF	; 255
    75fc:	9a 87       	std	Y+10, r25	; 0x0a
    75fe:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=-127;
    7600:	81 e8       	ldi	r24, 0x81	; 129
    7602:	9f ef       	ldi	r25, 0xFF	; 255
    7604:	98 87       	std	Y+8, r25	; 0x08
    7606:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=-159;
    7608:	81 e6       	ldi	r24, 0x61	; 97
    760a:	9f ef       	ldi	r25, 0xFF	; 255
    760c:	9e 83       	std	Y+6, r25	; 0x06
    760e:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=-191;
    7610:	81 e4       	ldi	r24, 0x41	; 65
    7612:	9f ef       	ldi	r25, 0xFF	; 255
    7614:	9c 83       	std	Y+4, r25	; 0x04
    7616:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=-223;
    7618:	81 e2       	ldi	r24, 0x21	; 33
    761a:	9f ef       	ldi	r25, 0xFF	; 255
    761c:	9a 83       	std	Y+2, r25	; 0x02
    761e:	89 83       	std	Y+1, r24	; 0x01
	while(intensity[0] != 255 && !fallout)
    7620:	5e 01       	movw	r10, r28
    7622:	08 94       	sec
    7624:	a1 1c       	adc	r10, r1
    7626:	b1 1c       	adc	r11, r1
    7628:	1c c0       	rjmp	.+56     	; 0x7662 <pattern_wirecube+0x1e8>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    762a:	f7 01       	movw	r30, r14
    762c:	00 81       	ld	r16, Z
    762e:	11 81       	ldd	r17, Z+1	; 0x01
    7630:	c8 01       	movw	r24, r16
    7632:	60 e0       	ldi	r22, 0x00	; 0
    7634:	70 e0       	ldi	r23, 0x00	; 0
    7636:	4f ef       	ldi	r20, 0xFF	; 255
    7638:	50 e0       	ldi	r21, 0x00	; 0
    763a:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    763e:	68 2f       	mov	r22, r24
    7640:	8c 2d       	mov	r24, r12
    7642:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]++;
    7646:	0f 5f       	subi	r16, 0xFF	; 255
    7648:	1f 4f       	sbci	r17, 0xFF	; 255
    764a:	f7 01       	movw	r30, r14
    764c:	01 93       	st	Z+, r16
    764e:	11 93       	st	Z+, r17
    7650:	7f 01       	movw	r14, r30
    7652:	c3 94       	inc	r12
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
	{
		index=0;
		while(index!=8)
    7654:	f8 e0       	ldi	r31, 0x08	; 8
    7656:	cf 16       	cp	r12, r31
    7658:	41 f7       	brne	.-48     	; 0x762a <pattern_wirecube+0x1b0>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]++;
			index++;
		};
		led_waitframe(1);
    765a:	81 e0       	ldi	r24, 0x01	; 1
    765c:	90 e0       	ldi	r25, 0x00	; 0
    765e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=-95;
	intensity[3]=-127;
	intensity[2]=-159;
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
    7662:	89 81       	ldd	r24, Y+1	; 0x01
    7664:	9a 81       	ldd	r25, Y+2	; 0x02
    7666:	8f 3f       	cpi	r24, 0xFF	; 255
    7668:	91 05       	cpc	r25, r1
    766a:	59 f0       	breq	.+22     	; 0x7682 <pattern_wirecube+0x208>
    766c:	80 91 f4 01 	lds	r24, 0x01F4
    7670:	88 23       	and	r24, r24
    7672:	39 f4       	brne	.+14     	; 0x7682 <pattern_wirecube+0x208>
    7674:	75 01       	movw	r14, r10
    7676:	cc 24       	eor	r12, r12
    7678:	d8 cf       	rjmp	.-80     	; 0x762a <pattern_wirecube+0x1b0>
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
		led_waitframe(1);
    767a:	81 e0       	ldi	r24, 0x01	; 1
    767c:	90 e0       	ldi	r25, 0x00	; 0
    767e:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
    7682:	80 91 f4 01 	lds	r24, 0x01F4
    7686:	88 23       	and	r24, r24
    7688:	61 f4       	brne	.+24     	; 0x76a2 <pattern_wirecube+0x228>
    768a:	80 91 f5 01 	lds	r24, 0x01F5
    768e:	90 91 f6 01 	lds	r25, 0x01F6
    7692:	89 2b       	or	r24, r25
    7694:	91 f3       	breq	.-28     	; 0x767a <pattern_wirecube+0x200>
    7696:	80 91 0a 02 	lds	r24, 0x020A
    769a:	90 91 0b 02 	lds	r25, 0x020B
    769e:	89 2b       	or	r24, r25
    76a0:	61 f7       	brne	.-40     	; 0x767a <pattern_wirecube+0x200>
		led_waitframe(1);

	//exit process (fade out)
	intensity[7]=256;
    76a2:	80 e0       	ldi	r24, 0x00	; 0
    76a4:	91 e0       	ldi	r25, 0x01	; 1
    76a6:	98 8b       	std	Y+16, r25	; 0x10
    76a8:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=288;
    76aa:	80 e2       	ldi	r24, 0x20	; 32
    76ac:	91 e0       	ldi	r25, 0x01	; 1
    76ae:	9e 87       	std	Y+14, r25	; 0x0e
    76b0:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=320;
    76b2:	80 e4       	ldi	r24, 0x40	; 64
    76b4:	91 e0       	ldi	r25, 0x01	; 1
    76b6:	9c 87       	std	Y+12, r25	; 0x0c
    76b8:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=352;
    76ba:	80 e6       	ldi	r24, 0x60	; 96
    76bc:	91 e0       	ldi	r25, 0x01	; 1
    76be:	9a 87       	std	Y+10, r25	; 0x0a
    76c0:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=384;
    76c2:	80 e8       	ldi	r24, 0x80	; 128
    76c4:	91 e0       	ldi	r25, 0x01	; 1
    76c6:	98 87       	std	Y+8, r25	; 0x08
    76c8:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=416;
    76ca:	80 ea       	ldi	r24, 0xA0	; 160
    76cc:	91 e0       	ldi	r25, 0x01	; 1
    76ce:	9e 83       	std	Y+6, r25	; 0x06
    76d0:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=448;
    76d2:	80 ec       	ldi	r24, 0xC0	; 192
    76d4:	91 e0       	ldi	r25, 0x01	; 1
    76d6:	9c 83       	std	Y+4, r25	; 0x04
    76d8:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=480;
    76da:	80 ee       	ldi	r24, 0xE0	; 224
    76dc:	91 e0       	ldi	r25, 0x01	; 1
    76de:	9a 83       	std	Y+2, r25	; 0x02
    76e0:	89 83       	std	Y+1, r24	; 0x01
	while(0 < intensity[0] && !fallout)
    76e2:	5e 01       	movw	r10, r28
    76e4:	08 94       	sec
    76e6:	a1 1c       	adc	r10, r1
    76e8:	b1 1c       	adc	r11, r1
    76ea:	1c c0       	rjmp	.+56     	; 0x7724 <pattern_wirecube+0x2aa>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    76ec:	f7 01       	movw	r30, r14
    76ee:	00 81       	ld	r16, Z
    76f0:	11 81       	ldd	r17, Z+1	; 0x01
    76f2:	c8 01       	movw	r24, r16
    76f4:	60 e0       	ldi	r22, 0x00	; 0
    76f6:	70 e0       	ldi	r23, 0x00	; 0
    76f8:	4f ef       	ldi	r20, 0xFF	; 255
    76fa:	50 e0       	ldi	r21, 0x00	; 0
    76fc:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7700:	68 2f       	mov	r22, r24
    7702:	8c 2d       	mov	r24, r12
    7704:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]--;
    7708:	01 50       	subi	r16, 0x01	; 1
    770a:	10 40       	sbci	r17, 0x00	; 0
    770c:	f7 01       	movw	r30, r14
    770e:	01 93       	st	Z+, r16
    7710:	11 93       	st	Z+, r17
    7712:	7f 01       	movw	r14, r30
    7714:	c3 94       	inc	r12
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
	{
		index=0;
		while(index!=8)
    7716:	f8 e0       	ldi	r31, 0x08	; 8
    7718:	cf 16       	cp	r12, r31
    771a:	41 f7       	brne	.-48     	; 0x76ec <pattern_wirecube+0x272>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
    771c:	81 e0       	ldi	r24, 0x01	; 1
    771e:	90 e0       	ldi	r25, 0x00	; 0
    7720:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=352;
	intensity[3]=384;
	intensity[2]=416;
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
    7724:	89 81       	ldd	r24, Y+1	; 0x01
    7726:	9a 81       	ldd	r25, Y+2	; 0x02
    7728:	18 16       	cp	r1, r24
    772a:	19 06       	cpc	r1, r25
    772c:	3c f4       	brge	.+14     	; 0x773c <pattern_wirecube+0x2c2>
    772e:	80 91 f4 01 	lds	r24, 0x01F4
    7732:	88 23       	and	r24, r24
    7734:	19 f4       	brne	.+6      	; 0x773c <pattern_wirecube+0x2c2>
    7736:	75 01       	movw	r14, r10
    7738:	cc 24       	eor	r12, r12
    773a:	d8 cf       	rjmp	.-80     	; 0x76ec <pattern_wirecube+0x272>
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
	};
}
    773c:	60 96       	adiw	r28, 0x10	; 16
    773e:	0f b6       	in	r0, 0x3f	; 63
    7740:	f8 94       	cli
    7742:	de bf       	out	0x3e, r29	; 62
    7744:	0f be       	out	0x3f, r0	; 63
    7746:	cd bf       	out	0x3d, r28	; 61
    7748:	cf 91       	pop	r28
    774a:	df 91       	pop	r29
    774c:	1f 91       	pop	r17
    774e:	0f 91       	pop	r16
    7750:	ff 90       	pop	r15
    7752:	ef 90       	pop	r14
    7754:	cf 90       	pop	r12
    7756:	bf 90       	pop	r11
    7758:	af 90       	pop	r10
    775a:	08 95       	ret

0000775c <pattern_tesseract>:
	};
}


void pattern_tesseract(void)
{
    775c:	af 92       	push	r10
    775e:	bf 92       	push	r11
    7760:	cf 92       	push	r12
    7762:	ef 92       	push	r14
    7764:	ff 92       	push	r15
    7766:	0f 93       	push	r16
    7768:	1f 93       	push	r17
    776a:	df 93       	push	r29
    776c:	cf 93       	push	r28
    776e:	cd b7       	in	r28, 0x3d	; 61
    7770:	de b7       	in	r29, 0x3e	; 62
    7772:	60 97       	sbiw	r28, 0x10	; 16
    7774:	0f b6       	in	r0, 0x3f	; 63
    7776:	f8 94       	cli
    7778:	de bf       	out	0x3e, r29	; 62
    777a:	0f be       	out	0x3f, r0	; 63
    777c:	cd bf       	out	0x3d, r28	; 61
	int intensity[8];
	int index=0;

	fallout=FALSE;
    777e:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    7782:	80 91 f5 01 	lds	r24, 0x01F5
    7786:	90 91 f6 01 	lds	r25, 0x01F6
    778a:	90 93 0b 02 	sts	0x020B, r25
    778e:	80 93 0a 02 	sts	0x020A, r24


	//frame rate
	led_framerate(100);
    7792:	84 e6       	ldi	r24, 0x64	; 100
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	
	//set intensitys to 0
	led_plane_intensity_all(0);
    779a:	80 e0       	ldi	r24, 0x00	; 0
    779c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	
	//draw wireframe
	led_blank();
    77a0:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	
	led_line(0,0,0,7,0,0,TRUE);
    77a4:	80 e0       	ldi	r24, 0x00	; 0
    77a6:	90 e0       	ldi	r25, 0x00	; 0
    77a8:	60 e0       	ldi	r22, 0x00	; 0
    77aa:	70 e0       	ldi	r23, 0x00	; 0
    77ac:	40 e0       	ldi	r20, 0x00	; 0
    77ae:	50 e0       	ldi	r21, 0x00	; 0
    77b0:	27 e0       	ldi	r18, 0x07	; 7
    77b2:	30 e0       	ldi	r19, 0x00	; 0
    77b4:	00 e0       	ldi	r16, 0x00	; 0
    77b6:	10 e0       	ldi	r17, 0x00	; 0
    77b8:	ee 24       	eor	r14, r14
    77ba:	ff 24       	eor	r15, r15
    77bc:	cc 24       	eor	r12, r12
    77be:	c3 94       	inc	r12
    77c0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,7,0,7,TRUE);
    77c4:	80 e0       	ldi	r24, 0x00	; 0
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	60 e0       	ldi	r22, 0x00	; 0
    77ca:	70 e0       	ldi	r23, 0x00	; 0
    77cc:	47 e0       	ldi	r20, 0x07	; 7
    77ce:	50 e0       	ldi	r21, 0x00	; 0
    77d0:	27 e0       	ldi	r18, 0x07	; 7
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	a7 e0       	ldi	r26, 0x07	; 7
    77d6:	ea 2e       	mov	r14, r26
    77d8:	f1 2c       	mov	r15, r1
    77da:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,7,7,0,TRUE);
    77de:	80 e0       	ldi	r24, 0x00	; 0
    77e0:	90 e0       	ldi	r25, 0x00	; 0
    77e2:	67 e0       	ldi	r22, 0x07	; 7
    77e4:	70 e0       	ldi	r23, 0x00	; 0
    77e6:	40 e0       	ldi	r20, 0x00	; 0
    77e8:	50 e0       	ldi	r21, 0x00	; 0
    77ea:	27 e0       	ldi	r18, 0x07	; 7
    77ec:	30 e0       	ldi	r19, 0x00	; 0
    77ee:	07 e0       	ldi	r16, 0x07	; 7
    77f0:	10 e0       	ldi	r17, 0x00	; 0
    77f2:	ee 24       	eor	r14, r14
    77f4:	ff 24       	eor	r15, r15
    77f6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,7,7,7,7,TRUE);
    77fa:	80 e0       	ldi	r24, 0x00	; 0
    77fc:	90 e0       	ldi	r25, 0x00	; 0
    77fe:	67 e0       	ldi	r22, 0x07	; 7
    7800:	70 e0       	ldi	r23, 0x00	; 0
    7802:	47 e0       	ldi	r20, 0x07	; 7
    7804:	50 e0       	ldi	r21, 0x00	; 0
    7806:	27 e0       	ldi	r18, 0x07	; 7
    7808:	30 e0       	ldi	r19, 0x00	; 0
    780a:	f7 e0       	ldi	r31, 0x07	; 7
    780c:	ef 2e       	mov	r14, r31
    780e:	f1 2c       	mov	r15, r1
    7810:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,7,0,TRUE);
    7814:	80 e0       	ldi	r24, 0x00	; 0
    7816:	90 e0       	ldi	r25, 0x00	; 0
    7818:	60 e0       	ldi	r22, 0x00	; 0
    781a:	70 e0       	ldi	r23, 0x00	; 0
    781c:	40 e0       	ldi	r20, 0x00	; 0
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	20 e0       	ldi	r18, 0x00	; 0
    7822:	30 e0       	ldi	r19, 0x00	; 0
    7824:	ee 24       	eor	r14, r14
    7826:	ff 24       	eor	r15, r15
    7828:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,7,0,TRUE);	
    782c:	87 e0       	ldi	r24, 0x07	; 7
    782e:	90 e0       	ldi	r25, 0x00	; 0
    7830:	60 e0       	ldi	r22, 0x00	; 0
    7832:	70 e0       	ldi	r23, 0x00	; 0
    7834:	40 e0       	ldi	r20, 0x00	; 0
    7836:	50 e0       	ldi	r21, 0x00	; 0
    7838:	27 e0       	ldi	r18, 0x07	; 7
    783a:	30 e0       	ldi	r19, 0x00	; 0
    783c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,0,7,0,7,7,TRUE);
    7840:	80 e0       	ldi	r24, 0x00	; 0
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	60 e0       	ldi	r22, 0x00	; 0
    7846:	70 e0       	ldi	r23, 0x00	; 0
    7848:	47 e0       	ldi	r20, 0x07	; 7
    784a:	50 e0       	ldi	r21, 0x00	; 0
    784c:	20 e0       	ldi	r18, 0x00	; 0
    784e:	30 e0       	ldi	r19, 0x00	; 0
    7850:	e7 e0       	ldi	r30, 0x07	; 7
    7852:	ee 2e       	mov	r14, r30
    7854:	f1 2c       	mov	r15, r1
    7856:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,7,7,7,7,TRUE);	
    785a:	87 e0       	ldi	r24, 0x07	; 7
    785c:	90 e0       	ldi	r25, 0x00	; 0
    785e:	60 e0       	ldi	r22, 0x00	; 0
    7860:	70 e0       	ldi	r23, 0x00	; 0
    7862:	47 e0       	ldi	r20, 0x07	; 7
    7864:	50 e0       	ldi	r21, 0x00	; 0
    7866:	27 e0       	ldi	r18, 0x07	; 7
    7868:	30 e0       	ldi	r19, 0x00	; 0
    786a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(0,0,0,0,0,7,TRUE);
    786e:	80 e0       	ldi	r24, 0x00	; 0
    7870:	90 e0       	ldi	r25, 0x00	; 0
    7872:	60 e0       	ldi	r22, 0x00	; 0
    7874:	70 e0       	ldi	r23, 0x00	; 0
    7876:	40 e0       	ldi	r20, 0x00	; 0
    7878:	50 e0       	ldi	r21, 0x00	; 0
    787a:	20 e0       	ldi	r18, 0x00	; 0
    787c:	30 e0       	ldi	r19, 0x00	; 0
    787e:	00 e0       	ldi	r16, 0x00	; 0
    7880:	10 e0       	ldi	r17, 0x00	; 0
    7882:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,0,0,7,0,7,TRUE);
    7886:	87 e0       	ldi	r24, 0x07	; 7
    7888:	90 e0       	ldi	r25, 0x00	; 0
    788a:	60 e0       	ldi	r22, 0x00	; 0
    788c:	70 e0       	ldi	r23, 0x00	; 0
    788e:	40 e0       	ldi	r20, 0x00	; 0
    7890:	50 e0       	ldi	r21, 0x00	; 0
    7892:	27 e0       	ldi	r18, 0x07	; 7
    7894:	30 e0       	ldi	r19, 0x00	; 0
    7896:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0,7,0,0,7,7,TRUE);
    789a:	80 e0       	ldi	r24, 0x00	; 0
    789c:	90 e0       	ldi	r25, 0x00	; 0
    789e:	67 e0       	ldi	r22, 0x07	; 7
    78a0:	70 e0       	ldi	r23, 0x00	; 0
    78a2:	40 e0       	ldi	r20, 0x00	; 0
    78a4:	50 e0       	ldi	r21, 0x00	; 0
    78a6:	20 e0       	ldi	r18, 0x00	; 0
    78a8:	30 e0       	ldi	r19, 0x00	; 0
    78aa:	07 e0       	ldi	r16, 0x07	; 7
    78ac:	10 e0       	ldi	r17, 0x00	; 0
    78ae:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7,7,0,7,7,7,TRUE);
    78b2:	87 e0       	ldi	r24, 0x07	; 7
    78b4:	90 e0       	ldi	r25, 0x00	; 0
    78b6:	67 e0       	ldi	r22, 0x07	; 7
    78b8:	70 e0       	ldi	r23, 0x00	; 0
    78ba:	40 e0       	ldi	r20, 0x00	; 0
    78bc:	50 e0       	ldi	r21, 0x00	; 0
    78be:	27 e0       	ldi	r18, 0x07	; 7
    78c0:	30 e0       	ldi	r19, 0x00	; 0
    78c2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(2,2,2,5,2,2,TRUE);
    78c6:	82 e0       	ldi	r24, 0x02	; 2
    78c8:	90 e0       	ldi	r25, 0x00	; 0
    78ca:	62 e0       	ldi	r22, 0x02	; 2
    78cc:	70 e0       	ldi	r23, 0x00	; 0
    78ce:	42 e0       	ldi	r20, 0x02	; 2
    78d0:	50 e0       	ldi	r21, 0x00	; 0
    78d2:	25 e0       	ldi	r18, 0x05	; 5
    78d4:	30 e0       	ldi	r19, 0x00	; 0
    78d6:	02 e0       	ldi	r16, 0x02	; 2
    78d8:	10 e0       	ldi	r17, 0x00	; 0
    78da:	b2 e0       	ldi	r27, 0x02	; 2
    78dc:	eb 2e       	mov	r14, r27
    78de:	f1 2c       	mov	r15, r1
    78e0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,2,5,5,2,5,TRUE);
    78e4:	82 e0       	ldi	r24, 0x02	; 2
    78e6:	90 e0       	ldi	r25, 0x00	; 0
    78e8:	62 e0       	ldi	r22, 0x02	; 2
    78ea:	70 e0       	ldi	r23, 0x00	; 0
    78ec:	45 e0       	ldi	r20, 0x05	; 5
    78ee:	50 e0       	ldi	r21, 0x00	; 0
    78f0:	25 e0       	ldi	r18, 0x05	; 5
    78f2:	30 e0       	ldi	r19, 0x00	; 0
    78f4:	a5 e0       	ldi	r26, 0x05	; 5
    78f6:	ea 2e       	mov	r14, r26
    78f8:	f1 2c       	mov	r15, r1
    78fa:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,5,2,5,5,2,TRUE);
    78fe:	82 e0       	ldi	r24, 0x02	; 2
    7900:	90 e0       	ldi	r25, 0x00	; 0
    7902:	65 e0       	ldi	r22, 0x05	; 5
    7904:	70 e0       	ldi	r23, 0x00	; 0
    7906:	42 e0       	ldi	r20, 0x02	; 2
    7908:	50 e0       	ldi	r21, 0x00	; 0
    790a:	25 e0       	ldi	r18, 0x05	; 5
    790c:	30 e0       	ldi	r19, 0x00	; 0
    790e:	05 e0       	ldi	r16, 0x05	; 5
    7910:	10 e0       	ldi	r17, 0x00	; 0
    7912:	f2 e0       	ldi	r31, 0x02	; 2
    7914:	ef 2e       	mov	r14, r31
    7916:	f1 2c       	mov	r15, r1
    7918:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,5,5,5,5,5,TRUE);
    791c:	82 e0       	ldi	r24, 0x02	; 2
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	65 e0       	ldi	r22, 0x05	; 5
    7922:	70 e0       	ldi	r23, 0x00	; 0
    7924:	45 e0       	ldi	r20, 0x05	; 5
    7926:	50 e0       	ldi	r21, 0x00	; 0
    7928:	25 e0       	ldi	r18, 0x05	; 5
    792a:	30 e0       	ldi	r19, 0x00	; 0
    792c:	e5 e0       	ldi	r30, 0x05	; 5
    792e:	ee 2e       	mov	r14, r30
    7930:	f1 2c       	mov	r15, r1
    7932:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(2,2,2,2,5,2,TRUE);
    7936:	82 e0       	ldi	r24, 0x02	; 2
    7938:	90 e0       	ldi	r25, 0x00	; 0
    793a:	62 e0       	ldi	r22, 0x02	; 2
    793c:	70 e0       	ldi	r23, 0x00	; 0
    793e:	42 e0       	ldi	r20, 0x02	; 2
    7940:	50 e0       	ldi	r21, 0x00	; 0
    7942:	22 e0       	ldi	r18, 0x02	; 2
    7944:	30 e0       	ldi	r19, 0x00	; 0
    7946:	b2 e0       	ldi	r27, 0x02	; 2
    7948:	eb 2e       	mov	r14, r27
    794a:	f1 2c       	mov	r15, r1
    794c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(5,2,2,5,5,2,TRUE);	
    7950:	85 e0       	ldi	r24, 0x05	; 5
    7952:	90 e0       	ldi	r25, 0x00	; 0
    7954:	62 e0       	ldi	r22, 0x02	; 2
    7956:	70 e0       	ldi	r23, 0x00	; 0
    7958:	42 e0       	ldi	r20, 0x02	; 2
    795a:	50 e0       	ldi	r21, 0x00	; 0
    795c:	25 e0       	ldi	r18, 0x05	; 5
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,2,5,2,5,5,TRUE);
    7964:	82 e0       	ldi	r24, 0x02	; 2
    7966:	90 e0       	ldi	r25, 0x00	; 0
    7968:	62 e0       	ldi	r22, 0x02	; 2
    796a:	70 e0       	ldi	r23, 0x00	; 0
    796c:	45 e0       	ldi	r20, 0x05	; 5
    796e:	50 e0       	ldi	r21, 0x00	; 0
    7970:	22 e0       	ldi	r18, 0x02	; 2
    7972:	30 e0       	ldi	r19, 0x00	; 0
    7974:	a5 e0       	ldi	r26, 0x05	; 5
    7976:	ea 2e       	mov	r14, r26
    7978:	f1 2c       	mov	r15, r1
    797a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(5,2,5,5,5,5,TRUE);	
    797e:	85 e0       	ldi	r24, 0x05	; 5
    7980:	90 e0       	ldi	r25, 0x00	; 0
    7982:	62 e0       	ldi	r22, 0x02	; 2
    7984:	70 e0       	ldi	r23, 0x00	; 0
    7986:	45 e0       	ldi	r20, 0x05	; 5
    7988:	50 e0       	ldi	r21, 0x00	; 0
    798a:	25 e0       	ldi	r18, 0x05	; 5
    798c:	30 e0       	ldi	r19, 0x00	; 0
    798e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_line(2,2,2,2,2,5,TRUE);
    7992:	82 e0       	ldi	r24, 0x02	; 2
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	62 e0       	ldi	r22, 0x02	; 2
    7998:	70 e0       	ldi	r23, 0x00	; 0
    799a:	42 e0       	ldi	r20, 0x02	; 2
    799c:	50 e0       	ldi	r21, 0x00	; 0
    799e:	22 e0       	ldi	r18, 0x02	; 2
    79a0:	30 e0       	ldi	r19, 0x00	; 0
    79a2:	02 e0       	ldi	r16, 0x02	; 2
    79a4:	10 e0       	ldi	r17, 0x00	; 0
    79a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(5,2,2,5,2,5,TRUE);
    79aa:	85 e0       	ldi	r24, 0x05	; 5
    79ac:	90 e0       	ldi	r25, 0x00	; 0
    79ae:	62 e0       	ldi	r22, 0x02	; 2
    79b0:	70 e0       	ldi	r23, 0x00	; 0
    79b2:	42 e0       	ldi	r20, 0x02	; 2
    79b4:	50 e0       	ldi	r21, 0x00	; 0
    79b6:	25 e0       	ldi	r18, 0x05	; 5
    79b8:	30 e0       	ldi	r19, 0x00	; 0
    79ba:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2,5,2,2,5,5,TRUE);
    79be:	82 e0       	ldi	r24, 0x02	; 2
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	65 e0       	ldi	r22, 0x05	; 5
    79c4:	70 e0       	ldi	r23, 0x00	; 0
    79c6:	42 e0       	ldi	r20, 0x02	; 2
    79c8:	50 e0       	ldi	r21, 0x00	; 0
    79ca:	22 e0       	ldi	r18, 0x02	; 2
    79cc:	30 e0       	ldi	r19, 0x00	; 0
    79ce:	05 e0       	ldi	r16, 0x05	; 5
    79d0:	10 e0       	ldi	r17, 0x00	; 0
    79d2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(5,5,2,5,5,5,TRUE);
    79d6:	85 e0       	ldi	r24, 0x05	; 5
    79d8:	90 e0       	ldi	r25, 0x00	; 0
    79da:	65 e0       	ldi	r22, 0x05	; 5
    79dc:	70 e0       	ldi	r23, 0x00	; 0
    79de:	42 e0       	ldi	r20, 0x02	; 2
    79e0:	50 e0       	ldi	r21, 0x00	; 0
    79e2:	25 e0       	ldi	r18, 0x05	; 5
    79e4:	30 e0       	ldi	r19, 0x00	; 0
    79e6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>

	led_point(1,1,1,TRUE);
    79ea:	81 e0       	ldi	r24, 0x01	; 1
    79ec:	61 e0       	ldi	r22, 0x01	; 1
    79ee:	41 e0       	ldi	r20, 0x01	; 1
    79f0:	21 e0       	ldi	r18, 0x01	; 1
    79f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(6,1,1,TRUE);
    79f6:	86 e0       	ldi	r24, 0x06	; 6
    79f8:	61 e0       	ldi	r22, 0x01	; 1
    79fa:	41 e0       	ldi	r20, 0x01	; 1
    79fc:	21 e0       	ldi	r18, 0x01	; 1
    79fe:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(1,1,6,TRUE);
    7a02:	81 e0       	ldi	r24, 0x01	; 1
    7a04:	61 e0       	ldi	r22, 0x01	; 1
    7a06:	46 e0       	ldi	r20, 0x06	; 6
    7a08:	21 e0       	ldi	r18, 0x01	; 1
    7a0a:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(6,1,6,TRUE);
    7a0e:	86 e0       	ldi	r24, 0x06	; 6
    7a10:	61 e0       	ldi	r22, 0x01	; 1
    7a12:	46 e0       	ldi	r20, 0x06	; 6
    7a14:	21 e0       	ldi	r18, 0x01	; 1
    7a16:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(1,6,1,TRUE);
    7a1a:	81 e0       	ldi	r24, 0x01	; 1
    7a1c:	66 e0       	ldi	r22, 0x06	; 6
    7a1e:	41 e0       	ldi	r20, 0x01	; 1
    7a20:	21 e0       	ldi	r18, 0x01	; 1
    7a22:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(6,6,1,TRUE);
    7a26:	86 e0       	ldi	r24, 0x06	; 6
    7a28:	66 e0       	ldi	r22, 0x06	; 6
    7a2a:	41 e0       	ldi	r20, 0x01	; 1
    7a2c:	21 e0       	ldi	r18, 0x01	; 1
    7a2e:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(1,6,6,TRUE);
    7a32:	81 e0       	ldi	r24, 0x01	; 1
    7a34:	66 e0       	ldi	r22, 0x06	; 6
    7a36:	46 e0       	ldi	r20, 0x06	; 6
    7a38:	21 e0       	ldi	r18, 0x01	; 1
    7a3a:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
	led_point(6,6,6,TRUE);
    7a3e:	86 e0       	ldi	r24, 0x06	; 6
    7a40:	66 e0       	ldi	r22, 0x06	; 6
    7a42:	46 e0       	ldi	r20, 0x06	; 6
    7a44:	21 e0       	ldi	r18, 0x01	; 1
    7a46:	0e 94 48 0b 	call	0x1690	; 0x1690 <led_point>
			
	//fade in
	intensity[7]=0;
    7a4a:	18 8a       	std	Y+16, r1	; 0x10
    7a4c:	1f 86       	std	Y+15, r1	; 0x0f
	intensity[6]=-31;
    7a4e:	81 ee       	ldi	r24, 0xE1	; 225
    7a50:	9f ef       	ldi	r25, 0xFF	; 255
    7a52:	9e 87       	std	Y+14, r25	; 0x0e
    7a54:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=-63;
    7a56:	81 ec       	ldi	r24, 0xC1	; 193
    7a58:	9f ef       	ldi	r25, 0xFF	; 255
    7a5a:	9c 87       	std	Y+12, r25	; 0x0c
    7a5c:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=-95;
    7a5e:	81 ea       	ldi	r24, 0xA1	; 161
    7a60:	9f ef       	ldi	r25, 0xFF	; 255
    7a62:	9a 87       	std	Y+10, r25	; 0x0a
    7a64:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=-127;
    7a66:	81 e8       	ldi	r24, 0x81	; 129
    7a68:	9f ef       	ldi	r25, 0xFF	; 255
    7a6a:	98 87       	std	Y+8, r25	; 0x08
    7a6c:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=-159;
    7a6e:	81 e6       	ldi	r24, 0x61	; 97
    7a70:	9f ef       	ldi	r25, 0xFF	; 255
    7a72:	9e 83       	std	Y+6, r25	; 0x06
    7a74:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=-191;
    7a76:	81 e4       	ldi	r24, 0x41	; 65
    7a78:	9f ef       	ldi	r25, 0xFF	; 255
    7a7a:	9c 83       	std	Y+4, r25	; 0x04
    7a7c:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=-223;
    7a7e:	81 e2       	ldi	r24, 0x21	; 33
    7a80:	9f ef       	ldi	r25, 0xFF	; 255
    7a82:	9a 83       	std	Y+2, r25	; 0x02
    7a84:	89 83       	std	Y+1, r24	; 0x01
	while(intensity[0] != 255 && !fallout)
    7a86:	5e 01       	movw	r10, r28
    7a88:	08 94       	sec
    7a8a:	a1 1c       	adc	r10, r1
    7a8c:	b1 1c       	adc	r11, r1
    7a8e:	1c c0       	rjmp	.+56     	; 0x7ac8 <pattern_tesseract+0x36c>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7a90:	f7 01       	movw	r30, r14
    7a92:	00 81       	ld	r16, Z
    7a94:	11 81       	ldd	r17, Z+1	; 0x01
    7a96:	c8 01       	movw	r24, r16
    7a98:	60 e0       	ldi	r22, 0x00	; 0
    7a9a:	70 e0       	ldi	r23, 0x00	; 0
    7a9c:	4f ef       	ldi	r20, 0xFF	; 255
    7a9e:	50 e0       	ldi	r21, 0x00	; 0
    7aa0:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7aa4:	68 2f       	mov	r22, r24
    7aa6:	8c 2d       	mov	r24, r12
    7aa8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]++;
    7aac:	0f 5f       	subi	r16, 0xFF	; 255
    7aae:	1f 4f       	sbci	r17, 0xFF	; 255
    7ab0:	f7 01       	movw	r30, r14
    7ab2:	01 93       	st	Z+, r16
    7ab4:	11 93       	st	Z+, r17
    7ab6:	7f 01       	movw	r14, r30
    7ab8:	c3 94       	inc	r12
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
	{
		index=0;
		while(index!=8)
    7aba:	f8 e0       	ldi	r31, 0x08	; 8
    7abc:	cf 16       	cp	r12, r31
    7abe:	41 f7       	brne	.-48     	; 0x7a90 <pattern_tesseract+0x334>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]++;
			index++;
		};
		led_waitframe(1);
    7ac0:	81 e0       	ldi	r24, 0x01	; 1
    7ac2:	90 e0       	ldi	r25, 0x00	; 0
    7ac4:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=-95;
	intensity[3]=-127;
	intensity[2]=-159;
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
    7ac8:	89 81       	ldd	r24, Y+1	; 0x01
    7aca:	9a 81       	ldd	r25, Y+2	; 0x02
    7acc:	8f 3f       	cpi	r24, 0xFF	; 255
    7ace:	91 05       	cpc	r25, r1
    7ad0:	59 f0       	breq	.+22     	; 0x7ae8 <pattern_tesseract+0x38c>
    7ad2:	80 91 f4 01 	lds	r24, 0x01F4
    7ad6:	88 23       	and	r24, r24
    7ad8:	39 f4       	brne	.+14     	; 0x7ae8 <pattern_tesseract+0x38c>
    7ada:	75 01       	movw	r14, r10
    7adc:	cc 24       	eor	r12, r12
    7ade:	d8 cf       	rjmp	.-80     	; 0x7a90 <pattern_tesseract+0x334>
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
		led_waitframe(1);
    7ae0:	81 e0       	ldi	r24, 0x01	; 1
    7ae2:	90 e0       	ldi	r25, 0x00	; 0
    7ae4:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
    7ae8:	80 91 f4 01 	lds	r24, 0x01F4
    7aec:	88 23       	and	r24, r24
    7aee:	61 f4       	brne	.+24     	; 0x7b08 <pattern_tesseract+0x3ac>
    7af0:	80 91 f5 01 	lds	r24, 0x01F5
    7af4:	90 91 f6 01 	lds	r25, 0x01F6
    7af8:	89 2b       	or	r24, r25
    7afa:	91 f3       	breq	.-28     	; 0x7ae0 <pattern_tesseract+0x384>
    7afc:	80 91 0a 02 	lds	r24, 0x020A
    7b00:	90 91 0b 02 	lds	r25, 0x020B
    7b04:	89 2b       	or	r24, r25
    7b06:	61 f7       	brne	.-40     	; 0x7ae0 <pattern_tesseract+0x384>
		led_waitframe(1);

	//exit process (fade out)
	intensity[7]=256;
    7b08:	80 e0       	ldi	r24, 0x00	; 0
    7b0a:	91 e0       	ldi	r25, 0x01	; 1
    7b0c:	98 8b       	std	Y+16, r25	; 0x10
    7b0e:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=288;
    7b10:	80 e2       	ldi	r24, 0x20	; 32
    7b12:	91 e0       	ldi	r25, 0x01	; 1
    7b14:	9e 87       	std	Y+14, r25	; 0x0e
    7b16:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=320;
    7b18:	80 e4       	ldi	r24, 0x40	; 64
    7b1a:	91 e0       	ldi	r25, 0x01	; 1
    7b1c:	9c 87       	std	Y+12, r25	; 0x0c
    7b1e:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=352;
    7b20:	80 e6       	ldi	r24, 0x60	; 96
    7b22:	91 e0       	ldi	r25, 0x01	; 1
    7b24:	9a 87       	std	Y+10, r25	; 0x0a
    7b26:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=384;
    7b28:	80 e8       	ldi	r24, 0x80	; 128
    7b2a:	91 e0       	ldi	r25, 0x01	; 1
    7b2c:	98 87       	std	Y+8, r25	; 0x08
    7b2e:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=416;
    7b30:	80 ea       	ldi	r24, 0xA0	; 160
    7b32:	91 e0       	ldi	r25, 0x01	; 1
    7b34:	9e 83       	std	Y+6, r25	; 0x06
    7b36:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=448;
    7b38:	80 ec       	ldi	r24, 0xC0	; 192
    7b3a:	91 e0       	ldi	r25, 0x01	; 1
    7b3c:	9c 83       	std	Y+4, r25	; 0x04
    7b3e:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=480;
    7b40:	80 ee       	ldi	r24, 0xE0	; 224
    7b42:	91 e0       	ldi	r25, 0x01	; 1
    7b44:	9a 83       	std	Y+2, r25	; 0x02
    7b46:	89 83       	std	Y+1, r24	; 0x01
	while(0 < intensity[0] && !fallout)
    7b48:	5e 01       	movw	r10, r28
    7b4a:	08 94       	sec
    7b4c:	a1 1c       	adc	r10, r1
    7b4e:	b1 1c       	adc	r11, r1
    7b50:	1c c0       	rjmp	.+56     	; 0x7b8a <pattern_tesseract+0x42e>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7b52:	f7 01       	movw	r30, r14
    7b54:	00 81       	ld	r16, Z
    7b56:	11 81       	ldd	r17, Z+1	; 0x01
    7b58:	c8 01       	movw	r24, r16
    7b5a:	60 e0       	ldi	r22, 0x00	; 0
    7b5c:	70 e0       	ldi	r23, 0x00	; 0
    7b5e:	4f ef       	ldi	r20, 0xFF	; 255
    7b60:	50 e0       	ldi	r21, 0x00	; 0
    7b62:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7b66:	68 2f       	mov	r22, r24
    7b68:	8c 2d       	mov	r24, r12
    7b6a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]--;
    7b6e:	01 50       	subi	r16, 0x01	; 1
    7b70:	10 40       	sbci	r17, 0x00	; 0
    7b72:	f7 01       	movw	r30, r14
    7b74:	01 93       	st	Z+, r16
    7b76:	11 93       	st	Z+, r17
    7b78:	7f 01       	movw	r14, r30
    7b7a:	c3 94       	inc	r12
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
	{
		index=0;
		while(index!=8)
    7b7c:	f8 e0       	ldi	r31, 0x08	; 8
    7b7e:	cf 16       	cp	r12, r31
    7b80:	41 f7       	brne	.-48     	; 0x7b52 <pattern_tesseract+0x3f6>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
    7b82:	81 e0       	ldi	r24, 0x01	; 1
    7b84:	90 e0       	ldi	r25, 0x00	; 0
    7b86:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=352;
	intensity[3]=384;
	intensity[2]=416;
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
    7b8a:	89 81       	ldd	r24, Y+1	; 0x01
    7b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b8e:	18 16       	cp	r1, r24
    7b90:	19 06       	cpc	r1, r25
    7b92:	3c f4       	brge	.+14     	; 0x7ba2 <pattern_tesseract+0x446>
    7b94:	80 91 f4 01 	lds	r24, 0x01F4
    7b98:	88 23       	and	r24, r24
    7b9a:	19 f4       	brne	.+6      	; 0x7ba2 <pattern_tesseract+0x446>
    7b9c:	75 01       	movw	r14, r10
    7b9e:	cc 24       	eor	r12, r12
    7ba0:	d8 cf       	rjmp	.-80     	; 0x7b52 <pattern_tesseract+0x3f6>
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
	};
}
    7ba2:	60 96       	adiw	r28, 0x10	; 16
    7ba4:	0f b6       	in	r0, 0x3f	; 63
    7ba6:	f8 94       	cli
    7ba8:	de bf       	out	0x3e, r29	; 62
    7baa:	0f be       	out	0x3f, r0	; 63
    7bac:	cd bf       	out	0x3d, r28	; 61
    7bae:	cf 91       	pop	r28
    7bb0:	df 91       	pop	r29
    7bb2:	1f 91       	pop	r17
    7bb4:	0f 91       	pop	r16
    7bb6:	ff 90       	pop	r15
    7bb8:	ef 90       	pop	r14
    7bba:	cf 90       	pop	r12
    7bbc:	bf 90       	pop	r11
    7bbe:	af 90       	pop	r10
    7bc0:	08 95       	ret

00007bc2 <pattern_cubewalls>:
		led_waitframe(1);
	};
}

void pattern_cubewalls(void)
{
    7bc2:	af 92       	push	r10
    7bc4:	bf 92       	push	r11
    7bc6:	df 92       	push	r13
    7bc8:	ef 92       	push	r14
    7bca:	ff 92       	push	r15
    7bcc:	0f 93       	push	r16
    7bce:	1f 93       	push	r17
    7bd0:	df 93       	push	r29
    7bd2:	cf 93       	push	r28
    7bd4:	cd b7       	in	r28, 0x3d	; 61
    7bd6:	de b7       	in	r29, 0x3e	; 62
    7bd8:	60 97       	sbiw	r28, 0x10	; 16
    7bda:	0f b6       	in	r0, 0x3f	; 63
    7bdc:	f8 94       	cli
    7bde:	de bf       	out	0x3e, r29	; 62
    7be0:	0f be       	out	0x3f, r0	; 63
    7be2:	cd bf       	out	0x3d, r28	; 61
	int intensity[8];
	int index=0;

	fallout=FALSE;
    7be4:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    7be8:	80 91 f5 01 	lds	r24, 0x01F5
    7bec:	90 91 f6 01 	lds	r25, 0x01F6
    7bf0:	90 93 0b 02 	sts	0x020B, r25
    7bf4:	80 93 0a 02 	sts	0x020A, r24


	//frame rate
	led_framerate(100);
    7bf8:	84 e6       	ldi	r24, 0x64	; 100
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
    7bfc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	
	//set intensitys to 0
	led_plane_intensity_all(0);
    7c00:	80 e0       	ldi	r24, 0x00	; 0
    7c02:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	
	//draw
	led_blank();
    7c06:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>

	//left & right walls
	memset(led_frame_bitmap, 0x81, 64);	
    7c0a:	87 e4       	ldi	r24, 0x47	; 71
    7c0c:	92 e0       	ldi	r25, 0x02	; 2
    7c0e:	61 e8       	ldi	r22, 0x81	; 129
    7c10:	70 e0       	ldi	r23, 0x00	; 0
    7c12:	40 e4       	ldi	r20, 0x40	; 64
    7c14:	50 e0       	ldi	r21, 0x00	; 0
    7c16:	0e 94 48 50 	call	0xa090	; 0xa090 <memset>
	
	//front & back walls
	led_frame_bitmap[0] =0xFF;
	led_frame_bitmap[7] =0xFF;
	led_frame_bitmap[8] =0xFF; 
    7c1a:	8f ef       	ldi	r24, 0xFF	; 255
    7c1c:	80 93 4f 02 	sts	0x024F, r24
	led_frame_bitmap[15]=0xFF;
    7c20:	80 93 56 02 	sts	0x0256, r24
	led_frame_bitmap[16]=0xFF; 
    7c24:	80 93 57 02 	sts	0x0257, r24
	led_frame_bitmap[23]=0xFF;
    7c28:	80 93 5e 02 	sts	0x025E, r24
	led_frame_bitmap[24]=0xFF; 
    7c2c:	80 93 5f 02 	sts	0x025F, r24
	led_frame_bitmap[31]=0xFF;
    7c30:	80 93 66 02 	sts	0x0266, r24
	led_frame_bitmap[32]=0xFF; 
    7c34:	80 93 67 02 	sts	0x0267, r24
	led_frame_bitmap[39]=0xFF;
    7c38:	80 93 6e 02 	sts	0x026E, r24
	led_frame_bitmap[40]=0xFF; 
    7c3c:	80 93 6f 02 	sts	0x026F, r24
	led_frame_bitmap[47]=0xFF;
    7c40:	80 93 76 02 	sts	0x0276, r24
	led_frame_bitmap[48]=0xFF; 
    7c44:	80 93 77 02 	sts	0x0277, r24
	led_frame_bitmap[55]=0xFF;
    7c48:	80 93 7e 02 	sts	0x027E, r24
	led_frame_bitmap[56]=0xFF; 
	led_frame_bitmap[63]=0xFF;

	//top & bottom walls
	led_frame_bitmap[0] =0xFF;
    7c4c:	80 93 47 02 	sts	0x0247, r24
	led_frame_bitmap[1] =0xFF;
    7c50:	80 93 48 02 	sts	0x0248, r24
	led_frame_bitmap[2] =0xFF;
    7c54:	80 93 49 02 	sts	0x0249, r24
	led_frame_bitmap[3] =0xFF;
    7c58:	80 93 4a 02 	sts	0x024A, r24
	led_frame_bitmap[4] =0xFF;
    7c5c:	80 93 4b 02 	sts	0x024B, r24
	led_frame_bitmap[5] =0xFF;
    7c60:	80 93 4c 02 	sts	0x024C, r24
	led_frame_bitmap[6] =0xFF;
    7c64:	80 93 4d 02 	sts	0x024D, r24
	led_frame_bitmap[7] =0xFF;
    7c68:	80 93 4e 02 	sts	0x024E, r24
	led_frame_bitmap[56] =0xFF;
    7c6c:	80 93 7f 02 	sts	0x027F, r24
	led_frame_bitmap[57] =0xFF;
    7c70:	80 93 80 02 	sts	0x0280, r24
	led_frame_bitmap[58] =0xFF;
    7c74:	80 93 81 02 	sts	0x0281, r24
	led_frame_bitmap[59] =0xFF;
    7c78:	80 93 82 02 	sts	0x0282, r24
	led_frame_bitmap[60] =0xFF;
    7c7c:	80 93 83 02 	sts	0x0283, r24
	led_frame_bitmap[61] =0xFF;
    7c80:	80 93 84 02 	sts	0x0284, r24
	led_frame_bitmap[62] =0xFF;
    7c84:	80 93 85 02 	sts	0x0285, r24
	led_frame_bitmap[63] =0xFF;
    7c88:	80 93 86 02 	sts	0x0286, r24
			
	//fade in
	intensity[7]=0;
    7c8c:	18 8a       	std	Y+16, r1	; 0x10
    7c8e:	1f 86       	std	Y+15, r1	; 0x0f
	intensity[6]=-31;
    7c90:	81 ee       	ldi	r24, 0xE1	; 225
    7c92:	9f ef       	ldi	r25, 0xFF	; 255
    7c94:	9e 87       	std	Y+14, r25	; 0x0e
    7c96:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=-63;
    7c98:	81 ec       	ldi	r24, 0xC1	; 193
    7c9a:	9f ef       	ldi	r25, 0xFF	; 255
    7c9c:	9c 87       	std	Y+12, r25	; 0x0c
    7c9e:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=-95;
    7ca0:	81 ea       	ldi	r24, 0xA1	; 161
    7ca2:	9f ef       	ldi	r25, 0xFF	; 255
    7ca4:	9a 87       	std	Y+10, r25	; 0x0a
    7ca6:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=-127;
    7ca8:	81 e8       	ldi	r24, 0x81	; 129
    7caa:	9f ef       	ldi	r25, 0xFF	; 255
    7cac:	98 87       	std	Y+8, r25	; 0x08
    7cae:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=-159;
    7cb0:	81 e6       	ldi	r24, 0x61	; 97
    7cb2:	9f ef       	ldi	r25, 0xFF	; 255
    7cb4:	9e 83       	std	Y+6, r25	; 0x06
    7cb6:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=-191;
    7cb8:	81 e4       	ldi	r24, 0x41	; 65
    7cba:	9f ef       	ldi	r25, 0xFF	; 255
    7cbc:	9c 83       	std	Y+4, r25	; 0x04
    7cbe:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=-223;
    7cc0:	81 e2       	ldi	r24, 0x21	; 33
    7cc2:	9f ef       	ldi	r25, 0xFF	; 255
    7cc4:	9a 83       	std	Y+2, r25	; 0x02
    7cc6:	89 83       	std	Y+1, r24	; 0x01
	while(intensity[0] != 255 && !fallout)
    7cc8:	5e 01       	movw	r10, r28
    7cca:	08 94       	sec
    7ccc:	a1 1c       	adc	r10, r1
    7cce:	b1 1c       	adc	r11, r1
    7cd0:	1c c0       	rjmp	.+56     	; 0x7d0a <pattern_cubewalls+0x148>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7cd2:	f7 01       	movw	r30, r14
    7cd4:	00 81       	ld	r16, Z
    7cd6:	11 81       	ldd	r17, Z+1	; 0x01
    7cd8:	c8 01       	movw	r24, r16
    7cda:	60 e0       	ldi	r22, 0x00	; 0
    7cdc:	70 e0       	ldi	r23, 0x00	; 0
    7cde:	4f ef       	ldi	r20, 0xFF	; 255
    7ce0:	50 e0       	ldi	r21, 0x00	; 0
    7ce2:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7ce6:	68 2f       	mov	r22, r24
    7ce8:	8d 2d       	mov	r24, r13
    7cea:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]++;
    7cee:	0f 5f       	subi	r16, 0xFF	; 255
    7cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    7cf2:	f7 01       	movw	r30, r14
    7cf4:	01 93       	st	Z+, r16
    7cf6:	11 93       	st	Z+, r17
    7cf8:	7f 01       	movw	r14, r30
    7cfa:	d3 94       	inc	r13
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
	{
		index=0;
		while(index!=8)
    7cfc:	f8 e0       	ldi	r31, 0x08	; 8
    7cfe:	df 16       	cp	r13, r31
    7d00:	41 f7       	brne	.-48     	; 0x7cd2 <pattern_cubewalls+0x110>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]++;
			index++;
		};
		led_waitframe(1);
    7d02:	81 e0       	ldi	r24, 0x01	; 1
    7d04:	90 e0       	ldi	r25, 0x00	; 0
    7d06:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=-95;
	intensity[3]=-127;
	intensity[2]=-159;
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
    7d0a:	89 81       	ldd	r24, Y+1	; 0x01
    7d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    7d10:	91 05       	cpc	r25, r1
    7d12:	59 f0       	breq	.+22     	; 0x7d2a <pattern_cubewalls+0x168>
    7d14:	80 91 f4 01 	lds	r24, 0x01F4
    7d18:	88 23       	and	r24, r24
    7d1a:	39 f4       	brne	.+14     	; 0x7d2a <pattern_cubewalls+0x168>
    7d1c:	75 01       	movw	r14, r10
    7d1e:	dd 24       	eor	r13, r13
    7d20:	d8 cf       	rjmp	.-80     	; 0x7cd2 <pattern_cubewalls+0x110>
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
		led_waitframe(1);
    7d22:	81 e0       	ldi	r24, 0x01	; 1
    7d24:	90 e0       	ldi	r25, 0x00	; 0
    7d26:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
    7d2a:	80 91 f4 01 	lds	r24, 0x01F4
    7d2e:	88 23       	and	r24, r24
    7d30:	61 f4       	brne	.+24     	; 0x7d4a <pattern_cubewalls+0x188>
    7d32:	80 91 f5 01 	lds	r24, 0x01F5
    7d36:	90 91 f6 01 	lds	r25, 0x01F6
    7d3a:	89 2b       	or	r24, r25
    7d3c:	91 f3       	breq	.-28     	; 0x7d22 <pattern_cubewalls+0x160>
    7d3e:	80 91 0a 02 	lds	r24, 0x020A
    7d42:	90 91 0b 02 	lds	r25, 0x020B
    7d46:	89 2b       	or	r24, r25
    7d48:	61 f7       	brne	.-40     	; 0x7d22 <pattern_cubewalls+0x160>
		led_waitframe(1);

	//exit process (fade out)
	intensity[7]=256;
    7d4a:	80 e0       	ldi	r24, 0x00	; 0
    7d4c:	91 e0       	ldi	r25, 0x01	; 1
    7d4e:	98 8b       	std	Y+16, r25	; 0x10
    7d50:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=288;
    7d52:	80 e2       	ldi	r24, 0x20	; 32
    7d54:	91 e0       	ldi	r25, 0x01	; 1
    7d56:	9e 87       	std	Y+14, r25	; 0x0e
    7d58:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=320;
    7d5a:	80 e4       	ldi	r24, 0x40	; 64
    7d5c:	91 e0       	ldi	r25, 0x01	; 1
    7d5e:	9c 87       	std	Y+12, r25	; 0x0c
    7d60:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=352;
    7d62:	80 e6       	ldi	r24, 0x60	; 96
    7d64:	91 e0       	ldi	r25, 0x01	; 1
    7d66:	9a 87       	std	Y+10, r25	; 0x0a
    7d68:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=384;
    7d6a:	80 e8       	ldi	r24, 0x80	; 128
    7d6c:	91 e0       	ldi	r25, 0x01	; 1
    7d6e:	98 87       	std	Y+8, r25	; 0x08
    7d70:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=416;
    7d72:	80 ea       	ldi	r24, 0xA0	; 160
    7d74:	91 e0       	ldi	r25, 0x01	; 1
    7d76:	9e 83       	std	Y+6, r25	; 0x06
    7d78:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=448;
    7d7a:	80 ec       	ldi	r24, 0xC0	; 192
    7d7c:	91 e0       	ldi	r25, 0x01	; 1
    7d7e:	9c 83       	std	Y+4, r25	; 0x04
    7d80:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=480;
    7d82:	80 ee       	ldi	r24, 0xE0	; 224
    7d84:	91 e0       	ldi	r25, 0x01	; 1
    7d86:	9a 83       	std	Y+2, r25	; 0x02
    7d88:	89 83       	std	Y+1, r24	; 0x01
	while(0 < intensity[0] && !fallout)
    7d8a:	5e 01       	movw	r10, r28
    7d8c:	08 94       	sec
    7d8e:	a1 1c       	adc	r10, r1
    7d90:	b1 1c       	adc	r11, r1
    7d92:	1c c0       	rjmp	.+56     	; 0x7dcc <pattern_cubewalls+0x20a>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7d94:	f7 01       	movw	r30, r14
    7d96:	00 81       	ld	r16, Z
    7d98:	11 81       	ldd	r17, Z+1	; 0x01
    7d9a:	c8 01       	movw	r24, r16
    7d9c:	60 e0       	ldi	r22, 0x00	; 0
    7d9e:	70 e0       	ldi	r23, 0x00	; 0
    7da0:	4f ef       	ldi	r20, 0xFF	; 255
    7da2:	50 e0       	ldi	r21, 0x00	; 0
    7da4:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7da8:	68 2f       	mov	r22, r24
    7daa:	8d 2d       	mov	r24, r13
    7dac:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]--;
    7db0:	01 50       	subi	r16, 0x01	; 1
    7db2:	10 40       	sbci	r17, 0x00	; 0
    7db4:	f7 01       	movw	r30, r14
    7db6:	01 93       	st	Z+, r16
    7db8:	11 93       	st	Z+, r17
    7dba:	7f 01       	movw	r14, r30
    7dbc:	d3 94       	inc	r13
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
	{
		index=0;
		while(index!=8)
    7dbe:	f8 e0       	ldi	r31, 0x08	; 8
    7dc0:	df 16       	cp	r13, r31
    7dc2:	41 f7       	brne	.-48     	; 0x7d94 <pattern_cubewalls+0x1d2>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
    7dc4:	81 e0       	ldi	r24, 0x01	; 1
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
    7dc8:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=352;
	intensity[3]=384;
	intensity[2]=416;
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
    7dcc:	89 81       	ldd	r24, Y+1	; 0x01
    7dce:	9a 81       	ldd	r25, Y+2	; 0x02
    7dd0:	18 16       	cp	r1, r24
    7dd2:	19 06       	cpc	r1, r25
    7dd4:	3c f4       	brge	.+14     	; 0x7de4 <pattern_cubewalls+0x222>
    7dd6:	80 91 f4 01 	lds	r24, 0x01F4
    7dda:	88 23       	and	r24, r24
    7ddc:	19 f4       	brne	.+6      	; 0x7de4 <pattern_cubewalls+0x222>
    7dde:	75 01       	movw	r14, r10
    7de0:	dd 24       	eor	r13, r13
    7de2:	d8 cf       	rjmp	.-80     	; 0x7d94 <pattern_cubewalls+0x1d2>
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
	};
}
    7de4:	60 96       	adiw	r28, 0x10	; 16
    7de6:	0f b6       	in	r0, 0x3f	; 63
    7de8:	f8 94       	cli
    7dea:	de bf       	out	0x3e, r29	; 62
    7dec:	0f be       	out	0x3f, r0	; 63
    7dee:	cd bf       	out	0x3d, r28	; 61
    7df0:	cf 91       	pop	r28
    7df2:	df 91       	pop	r29
    7df4:	1f 91       	pop	r17
    7df6:	0f 91       	pop	r16
    7df8:	ff 90       	pop	r15
    7dfa:	ef 90       	pop	r14
    7dfc:	df 90       	pop	r13
    7dfe:	bf 90       	pop	r11
    7e00:	af 90       	pop	r10
    7e02:	08 95       	ret

00007e04 <pattern_diamond>:
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
	};
}

void pattern_diamond(void)
{
    7e04:	af 92       	push	r10
    7e06:	bf 92       	push	r11
    7e08:	df 92       	push	r13
    7e0a:	ef 92       	push	r14
    7e0c:	ff 92       	push	r15
    7e0e:	0f 93       	push	r16
    7e10:	1f 93       	push	r17
    7e12:	df 93       	push	r29
    7e14:	cf 93       	push	r28
    7e16:	cd b7       	in	r28, 0x3d	; 61
    7e18:	de b7       	in	r29, 0x3e	; 62
    7e1a:	60 97       	sbiw	r28, 0x10	; 16
    7e1c:	0f b6       	in	r0, 0x3f	; 63
    7e1e:	f8 94       	cli
    7e20:	de bf       	out	0x3e, r29	; 62
    7e22:	0f be       	out	0x3f, r0	; 63
    7e24:	cd bf       	out	0x3d, r28	; 61
	int intensity[8];
	int index=0;

	fallout=FALSE;
    7e26:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    7e2a:	80 91 f5 01 	lds	r24, 0x01F5
    7e2e:	90 91 f6 01 	lds	r25, 0x01F6
    7e32:	90 93 0b 02 	sts	0x020B, r25
    7e36:	80 93 0a 02 	sts	0x020A, r24

	//frame rate
	led_framerate(100);
    7e3a:	84 e6       	ldi	r24, 0x64	; 100
    7e3c:	90 e0       	ldi	r25, 0x00	; 0
    7e3e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>

	//set intensitys to 0
	led_plane_intensity_all(0);
    7e42:	80 e0       	ldi	r24, 0x00	; 0
    7e44:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>

	//draw
	led_blank();
    7e48:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>

	memcpy_P(led_frame_bitmap, progframe_diamond, 64);
    7e4c:	87 e4       	ldi	r24, 0x47	; 71
    7e4e:	92 e0       	ldi	r25, 0x02	; 2
    7e50:	61 e0       	ldi	r22, 0x01	; 1
    7e52:	78 e0       	ldi	r23, 0x08	; 8
    7e54:	40 e4       	ldi	r20, 0x40	; 64
    7e56:	50 e0       	ldi	r21, 0x00	; 0
    7e58:	0e 94 22 50 	call	0xa044	; 0xa044 <memcpy_P>

	//fade in
	intensity[7]=0;
    7e5c:	18 8a       	std	Y+16, r1	; 0x10
    7e5e:	1f 86       	std	Y+15, r1	; 0x0f
	intensity[6]=-31;
    7e60:	81 ee       	ldi	r24, 0xE1	; 225
    7e62:	9f ef       	ldi	r25, 0xFF	; 255
    7e64:	9e 87       	std	Y+14, r25	; 0x0e
    7e66:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=-63;
    7e68:	81 ec       	ldi	r24, 0xC1	; 193
    7e6a:	9f ef       	ldi	r25, 0xFF	; 255
    7e6c:	9c 87       	std	Y+12, r25	; 0x0c
    7e6e:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=-95;
    7e70:	81 ea       	ldi	r24, 0xA1	; 161
    7e72:	9f ef       	ldi	r25, 0xFF	; 255
    7e74:	9a 87       	std	Y+10, r25	; 0x0a
    7e76:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=-127;
    7e78:	81 e8       	ldi	r24, 0x81	; 129
    7e7a:	9f ef       	ldi	r25, 0xFF	; 255
    7e7c:	98 87       	std	Y+8, r25	; 0x08
    7e7e:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=-159;
    7e80:	81 e6       	ldi	r24, 0x61	; 97
    7e82:	9f ef       	ldi	r25, 0xFF	; 255
    7e84:	9e 83       	std	Y+6, r25	; 0x06
    7e86:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=-191;
    7e88:	81 e4       	ldi	r24, 0x41	; 65
    7e8a:	9f ef       	ldi	r25, 0xFF	; 255
    7e8c:	9c 83       	std	Y+4, r25	; 0x04
    7e8e:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=-223;
    7e90:	81 e2       	ldi	r24, 0x21	; 33
    7e92:	9f ef       	ldi	r25, 0xFF	; 255
    7e94:	9a 83       	std	Y+2, r25	; 0x02
    7e96:	89 83       	std	Y+1, r24	; 0x01
	while(intensity[0] != 255 && !fallout)
    7e98:	5e 01       	movw	r10, r28
    7e9a:	08 94       	sec
    7e9c:	a1 1c       	adc	r10, r1
    7e9e:	b1 1c       	adc	r11, r1
    7ea0:	1c c0       	rjmp	.+56     	; 0x7eda <pattern_diamond+0xd6>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7ea2:	f7 01       	movw	r30, r14
    7ea4:	00 81       	ld	r16, Z
    7ea6:	11 81       	ldd	r17, Z+1	; 0x01
    7ea8:	c8 01       	movw	r24, r16
    7eaa:	60 e0       	ldi	r22, 0x00	; 0
    7eac:	70 e0       	ldi	r23, 0x00	; 0
    7eae:	4f ef       	ldi	r20, 0xFF	; 255
    7eb0:	50 e0       	ldi	r21, 0x00	; 0
    7eb2:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7eb6:	68 2f       	mov	r22, r24
    7eb8:	8d 2d       	mov	r24, r13
    7eba:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]++;
    7ebe:	0f 5f       	subi	r16, 0xFF	; 255
    7ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    7ec2:	f7 01       	movw	r30, r14
    7ec4:	01 93       	st	Z+, r16
    7ec6:	11 93       	st	Z+, r17
    7ec8:	7f 01       	movw	r14, r30
    7eca:	d3 94       	inc	r13
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
	{
		index=0;
		while(index!=8)
    7ecc:	f8 e0       	ldi	r31, 0x08	; 8
    7ece:	df 16       	cp	r13, r31
    7ed0:	41 f7       	brne	.-48     	; 0x7ea2 <pattern_diamond+0x9e>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]++;
			index++;
		};
		led_waitframe(1);
    7ed2:	81 e0       	ldi	r24, 0x01	; 1
    7ed4:	90 e0       	ldi	r25, 0x00	; 0
    7ed6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=-95;
	intensity[3]=-127;
	intensity[2]=-159;
	intensity[1]=-191;
	intensity[0]=-223;
	while(intensity[0] != 255 && !fallout)
    7eda:	89 81       	ldd	r24, Y+1	; 0x01
    7edc:	9a 81       	ldd	r25, Y+2	; 0x02
    7ede:	8f 3f       	cpi	r24, 0xFF	; 255
    7ee0:	91 05       	cpc	r25, r1
    7ee2:	59 f0       	breq	.+22     	; 0x7efa <pattern_diamond+0xf6>
    7ee4:	80 91 f4 01 	lds	r24, 0x01F4
    7ee8:	88 23       	and	r24, r24
    7eea:	39 f4       	brne	.+14     	; 0x7efa <pattern_diamond+0xf6>
    7eec:	75 01       	movw	r14, r10
    7eee:	dd 24       	eor	r13, r13
    7ef0:	d8 cf       	rjmp	.-80     	; 0x7ea2 <pattern_diamond+0x9e>
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
		led_waitframe(1);
    7ef2:	81 e0       	ldi	r24, 0x01	; 1
    7ef4:	90 e0       	ldi	r25, 0x00	; 0
    7ef6:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
		};
		led_waitframe(1);
	};

	//running process
	while(!fallout && (!duration || time))
    7efa:	80 91 f4 01 	lds	r24, 0x01F4
    7efe:	88 23       	and	r24, r24
    7f00:	61 f4       	brne	.+24     	; 0x7f1a <pattern_diamond+0x116>
    7f02:	80 91 f5 01 	lds	r24, 0x01F5
    7f06:	90 91 f6 01 	lds	r25, 0x01F6
    7f0a:	89 2b       	or	r24, r25
    7f0c:	91 f3       	breq	.-28     	; 0x7ef2 <pattern_diamond+0xee>
    7f0e:	80 91 0a 02 	lds	r24, 0x020A
    7f12:	90 91 0b 02 	lds	r25, 0x020B
    7f16:	89 2b       	or	r24, r25
    7f18:	61 f7       	brne	.-40     	; 0x7ef2 <pattern_diamond+0xee>
		led_waitframe(1);

	//exit process (fade out)
	intensity[7]=256;
    7f1a:	80 e0       	ldi	r24, 0x00	; 0
    7f1c:	91 e0       	ldi	r25, 0x01	; 1
    7f1e:	98 8b       	std	Y+16, r25	; 0x10
    7f20:	8f 87       	std	Y+15, r24	; 0x0f
	intensity[6]=288;
    7f22:	80 e2       	ldi	r24, 0x20	; 32
    7f24:	91 e0       	ldi	r25, 0x01	; 1
    7f26:	9e 87       	std	Y+14, r25	; 0x0e
    7f28:	8d 87       	std	Y+13, r24	; 0x0d
	intensity[5]=320;
    7f2a:	80 e4       	ldi	r24, 0x40	; 64
    7f2c:	91 e0       	ldi	r25, 0x01	; 1
    7f2e:	9c 87       	std	Y+12, r25	; 0x0c
    7f30:	8b 87       	std	Y+11, r24	; 0x0b
	intensity[4]=352;
    7f32:	80 e6       	ldi	r24, 0x60	; 96
    7f34:	91 e0       	ldi	r25, 0x01	; 1
    7f36:	9a 87       	std	Y+10, r25	; 0x0a
    7f38:	89 87       	std	Y+9, r24	; 0x09
	intensity[3]=384;
    7f3a:	80 e8       	ldi	r24, 0x80	; 128
    7f3c:	91 e0       	ldi	r25, 0x01	; 1
    7f3e:	98 87       	std	Y+8, r25	; 0x08
    7f40:	8f 83       	std	Y+7, r24	; 0x07
	intensity[2]=416;
    7f42:	80 ea       	ldi	r24, 0xA0	; 160
    7f44:	91 e0       	ldi	r25, 0x01	; 1
    7f46:	9e 83       	std	Y+6, r25	; 0x06
    7f48:	8d 83       	std	Y+5, r24	; 0x05
	intensity[1]=448;
    7f4a:	80 ec       	ldi	r24, 0xC0	; 192
    7f4c:	91 e0       	ldi	r25, 0x01	; 1
    7f4e:	9c 83       	std	Y+4, r25	; 0x04
    7f50:	8b 83       	std	Y+3, r24	; 0x03
	intensity[0]=480;
    7f52:	80 ee       	ldi	r24, 0xE0	; 224
    7f54:	91 e0       	ldi	r25, 0x01	; 1
    7f56:	9a 83       	std	Y+2, r25	; 0x02
    7f58:	89 83       	std	Y+1, r24	; 0x01
	while(0 < intensity[0] && !fallout)
    7f5a:	5e 01       	movw	r10, r28
    7f5c:	08 94       	sec
    7f5e:	a1 1c       	adc	r10, r1
    7f60:	b1 1c       	adc	r11, r1
    7f62:	1c c0       	rjmp	.+56     	; 0x7f9c <pattern_diamond+0x198>
	{
		index=0;
		while(index!=8)
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
    7f64:	f7 01       	movw	r30, r14
    7f66:	00 81       	ld	r16, Z
    7f68:	11 81       	ldd	r17, Z+1	; 0x01
    7f6a:	c8 01       	movw	r24, r16
    7f6c:	60 e0       	ldi	r22, 0x00	; 0
    7f6e:	70 e0       	ldi	r23, 0x00	; 0
    7f70:	4f ef       	ldi	r20, 0xFF	; 255
    7f72:	50 e0       	ldi	r21, 0x00	; 0
    7f74:	0e 94 30 48 	call	0x9060	; 0x9060 <clip_int>
    7f78:	68 2f       	mov	r22, r24
    7f7a:	8d 2d       	mov	r24, r13
    7f7c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <led_plane_intensity>
			intensity[index]--;
    7f80:	01 50       	subi	r16, 0x01	; 1
    7f82:	10 40       	sbci	r17, 0x00	; 0
    7f84:	f7 01       	movw	r30, r14
    7f86:	01 93       	st	Z+, r16
    7f88:	11 93       	st	Z+, r17
    7f8a:	7f 01       	movw	r14, r30
    7f8c:	d3 94       	inc	r13
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
	{
		index=0;
		while(index!=8)
    7f8e:	f8 e0       	ldi	r31, 0x08	; 8
    7f90:	df 16       	cp	r13, r31
    7f92:	41 f7       	brne	.-48     	; 0x7f64 <pattern_diamond+0x160>
		{
			led_plane_intensity(index, (unsigned char)clip_int(intensity[index],0,255));
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
    7f94:	81 e0       	ldi	r24, 0x01	; 1
    7f96:	90 e0       	ldi	r25, 0x00	; 0
    7f98:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	intensity[4]=352;
	intensity[3]=384;
	intensity[2]=416;
	intensity[1]=448;
	intensity[0]=480;
	while(0 < intensity[0] && !fallout)
    7f9c:	89 81       	ldd	r24, Y+1	; 0x01
    7f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa0:	18 16       	cp	r1, r24
    7fa2:	19 06       	cpc	r1, r25
    7fa4:	3c f4       	brge	.+14     	; 0x7fb4 <pattern_diamond+0x1b0>
    7fa6:	80 91 f4 01 	lds	r24, 0x01F4
    7faa:	88 23       	and	r24, r24
    7fac:	19 f4       	brne	.+6      	; 0x7fb4 <pattern_diamond+0x1b0>
    7fae:	75 01       	movw	r14, r10
    7fb0:	dd 24       	eor	r13, r13
    7fb2:	d8 cf       	rjmp	.-80     	; 0x7f64 <pattern_diamond+0x160>
			intensity[index]--;
			index++;
		};
		led_waitframe(1);
	};
}
    7fb4:	60 96       	adiw	r28, 0x10	; 16
    7fb6:	0f b6       	in	r0, 0x3f	; 63
    7fb8:	f8 94       	cli
    7fba:	de bf       	out	0x3e, r29	; 62
    7fbc:	0f be       	out	0x3f, r0	; 63
    7fbe:	cd bf       	out	0x3d, r28	; 61
    7fc0:	cf 91       	pop	r28
    7fc2:	df 91       	pop	r29
    7fc4:	1f 91       	pop	r17
    7fc6:	0f 91       	pop	r16
    7fc8:	ff 90       	pop	r15
    7fca:	ef 90       	pop	r14
    7fcc:	df 90       	pop	r13
    7fce:	bf 90       	pop	r11
    7fd0:	af 90       	pop	r10
    7fd2:	08 95       	ret

00007fd4 <pattern_diamond_scroll>:
	};
}
*/

void pattern_diamond_scroll(void)
{
    7fd4:	1f 93       	push	r17
	uint8_t index;

	fallout = FALSE;
    7fd6:	10 92 f4 01 	sts	0x01F4, r1
	time = duration;
    7fda:	80 91 f5 01 	lds	r24, 0x01F5
    7fde:	90 91 f6 01 	lds	r25, 0x01F6
    7fe2:	90 93 0b 02 	sts	0x020B, r25
    7fe6:	80 93 0a 02 	sts	0x020A, r24

	led_framerate(DIAMOND_SCROLL_FRAMERATE);
    7fea:	84 e6       	ldi	r24, 0x64	; 100
    7fec:	90 e0       	ldi	r25, 0x00	; 0
    7fee:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    7ff2:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);	
    7ff6:	8f ef       	ldi	r24, 0xFF	; 255
    7ff8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    7ffc:	10 e0       	ldi	r17, 0x00	; 0
    7ffe:	12 c0       	rjmp	.+36     	; 0x8024 <pattern_diamond_scroll+0x50>

	index=0;
	//running process
	while(!fallout && (!duration || time))
	{
		led_frame_up();
    8000:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <led_frame_up>
		memcpy_P(&led_frame_bitmap[56], &progframe_diamond[index], 8);
    8004:	61 2f       	mov	r22, r17
    8006:	70 e0       	ldi	r23, 0x00	; 0
    8008:	6f 5f       	subi	r22, 0xFF	; 255
    800a:	77 4f       	sbci	r23, 0xF7	; 247
    800c:	8f e7       	ldi	r24, 0x7F	; 127
    800e:	92 e0       	ldi	r25, 0x02	; 2
    8010:	48 e0       	ldi	r20, 0x08	; 8
    8012:	50 e0       	ldi	r21, 0x00	; 0
    8014:	0e 94 22 50 	call	0xa044	; 0xa044 <memcpy_P>
		index+=8;
    8018:	18 5f       	subi	r17, 0xF8	; 248
		index &= 63;
    801a:	1f 73       	andi	r17, 0x3F	; 63
		
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
    801c:	86 e0       	ldi	r24, 0x06	; 6
    801e:	90 e0       	ldi	r25, 0x00	; 0
    8020:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
	led_blank();
	led_plane_intensity_all(255);	

	index=0;
	//running process
	while(!fallout && (!duration || time))
    8024:	80 91 f4 01 	lds	r24, 0x01F4
    8028:	88 23       	and	r24, r24
    802a:	a9 f4       	brne	.+42     	; 0x8056 <pattern_diamond_scroll+0x82>
    802c:	80 91 f5 01 	lds	r24, 0x01F5
    8030:	90 91 f6 01 	lds	r25, 0x01F6
    8034:	89 2b       	or	r24, r25
    8036:	21 f3       	breq	.-56     	; 0x8000 <pattern_diamond_scroll+0x2c>
    8038:	80 91 0a 02 	lds	r24, 0x020A
    803c:	90 91 0b 02 	lds	r25, 0x020B
    8040:	89 2b       	or	r24, r25
    8042:	f1 f6       	brne	.-68     	; 0x8000 <pattern_diamond_scroll+0x2c>
    8044:	08 c0       	rjmp	.+16     	; 0x8056 <pattern_diamond_scroll+0x82>
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
	};

	//end pattern
	index=8;
	while(!fallout && index--)
    8046:	11 50       	subi	r17, 0x01	; 1
	{
		led_frame_up();
    8048:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <led_frame_up>
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
    804c:	86 e0       	ldi	r24, 0x06	; 6
    804e:	90 e0       	ldi	r25, 0x00	; 0
    8050:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    8054:	01 c0       	rjmp	.+2      	; 0x8058 <pattern_diamond_scroll+0x84>
    8056:	18 e0       	ldi	r17, 0x08	; 8
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
	};

	//end pattern
	index=8;
	while(!fallout && index--)
    8058:	80 91 f4 01 	lds	r24, 0x01F4
    805c:	88 23       	and	r24, r24
    805e:	11 f4       	brne	.+4      	; 0x8064 <pattern_diamond_scroll+0x90>
    8060:	11 23       	and	r17, r17
    8062:	89 f7       	brne	.-30     	; 0x8046 <pattern_diamond_scroll+0x72>
	{
		led_frame_up();
		led_waitframe(DIAMOND_SCROLL_FRAMESTEP);
	};
}
    8064:	1f 91       	pop	r17
    8066:	08 95       	ret

00008068 <power_init>:
//********************************************************************************************************

void power_init(void)
{
	//Fast PWM mode OC0, clear on match, set at bottom(0)
	DDRB |= _BV(PB4);
    8068:	bc 9a       	sbi	0x17, 4	; 23

	//Fosc gives 62kHz PWM_-
	TCCR0 =  _BV(WGM01)+_BV(WGM00)+_BV(COM01)+_BV(CS00);
    806a:	89 e6       	ldi	r24, 0x69	; 105
    806c:	83 bf       	out	0x33, r24	; 51

	//maximum voltage
	OCR0=0; 
    806e:	11 be       	out	0x31, r1	; 49
}
    8070:	08 95       	ret

00008072 <power_vled_set>:

void power_vled_set(unsigned char x)
{
	OCR0 = 255-x;
    8072:	80 95       	com	r24
    8074:	81 bf       	out	0x31, r24	; 49
}
    8076:	08 95       	ret

00008078 <power_vled_get>:

unsigned char power_vled_get(void)
{
	unsigned char x;
	x = 255-OCR0;
    8078:	81 b7       	in	r24, 0x31	; 49
	return x;
}
    807a:	80 95       	com	r24
    807c:	08 95       	ret

0000807e <power_test>:

//initial supply test executed at reset
void power_test(void)
{
    807e:	0f 93       	push	r16
    8080:	1f 93       	push	r17
    8082:	cf 93       	push	r28
    8084:	df 93       	push	r29
	//LEDs off
	led_blank();
    8086:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>

	led_framerate(50);
    808a:	82 e3       	ldi	r24, 0x32	; 50
    808c:	90 e0       	ldi	r25, 0x00	; 0
    808e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	OCR0=0; 
}

void power_vled_set(unsigned char x)
{
	OCR0 = 255-x;
    8092:	11 be       	out	0x31, r1	; 49
	//LEDs off
	led_blank();

	led_framerate(50);
	power_vled_set(255);
	led_waitframe(25);
    8094:	89 e1       	ldi	r24, 0x19	; 25
    8096:	90 e0       	ldi	r25, 0x00	; 0
    8098:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>

	TEXTOUT_P(PSTR("\r\nSupply input         - "));
    809c:	83 ef       	ldi	r24, 0xF3	; 243
    809e:	98 e0       	ldi	r25, 0x08	; 8
    80a0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_supply_v());
    80a4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <a2d_supply_v>
    80a8:	2d b7       	in	r18, 0x3d	; 61
    80aa:	3e b7       	in	r19, 0x3e	; 62
    80ac:	28 50       	subi	r18, 0x08	; 8
    80ae:	30 40       	sbci	r19, 0x00	; 0
    80b0:	0f b6       	in	r0, 0x3f	; 63
    80b2:	f8 94       	cli
    80b4:	3e bf       	out	0x3e, r19	; 62
    80b6:	0f be       	out	0x3f, r0	; 63
    80b8:	2d bf       	out	0x3d, r18	; 61
    80ba:	ed b7       	in	r30, 0x3d	; 61
    80bc:	fe b7       	in	r31, 0x3e	; 62
    80be:	31 96       	adiw	r30, 0x01	; 1
    80c0:	cc e0       	ldi	r28, 0x0C	; 12
    80c2:	d2 e0       	ldi	r29, 0x02	; 2
    80c4:	ad b7       	in	r26, 0x3d	; 61
    80c6:	be b7       	in	r27, 0x3e	; 62
    80c8:	12 96       	adiw	r26, 0x02	; 2
    80ca:	dc 93       	st	X, r29
    80cc:	ce 93       	st	-X, r28
    80ce:	11 97       	sbiw	r26, 0x01	; 1
    80d0:	0d e1       	ldi	r16, 0x1D	; 29
    80d2:	11 e0       	ldi	r17, 0x01	; 1
    80d4:	13 83       	std	Z+3, r17	; 0x03
    80d6:	02 83       	std	Z+2, r16	; 0x02
    80d8:	64 83       	std	Z+4, r22	; 0x04
    80da:	75 83       	std	Z+5, r23	; 0x05
    80dc:	86 83       	std	Z+6, r24	; 0x06
    80de:	97 83       	std	Z+7, r25	; 0x07
    80e0:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    80e4:	2d b7       	in	r18, 0x3d	; 61
    80e6:	3e b7       	in	r19, 0x3e	; 62
    80e8:	28 5f       	subi	r18, 0xF8	; 248
    80ea:	3f 4f       	sbci	r19, 0xFF	; 255
    80ec:	0f b6       	in	r0, 0x3f	; 63
    80ee:	f8 94       	cli
    80f0:	3e bf       	out	0x3e, r19	; 62
    80f2:	0f be       	out	0x3f, r0	; 63
    80f4:	2d bf       	out	0x3d, r18	; 61
    80f6:	ce 01       	movw	r24, r28
    80f8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("v\r\nMaximum LED supply   - "));
    80fc:	88 ed       	ldi	r24, 0xD8	; 216
    80fe:	98 e0       	ldi	r25, 0x08	; 8
    8100:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_led_v());
    8104:	0e 94 89 47 	call	0x8f12	; 0x8f12 <a2d_led_v>
    8108:	ad b7       	in	r26, 0x3d	; 61
    810a:	be b7       	in	r27, 0x3e	; 62
    810c:	18 97       	sbiw	r26, 0x08	; 8
    810e:	0f b6       	in	r0, 0x3f	; 63
    8110:	f8 94       	cli
    8112:	be bf       	out	0x3e, r27	; 62
    8114:	0f be       	out	0x3f, r0	; 63
    8116:	ad bf       	out	0x3d, r26	; 61
    8118:	ed b7       	in	r30, 0x3d	; 61
    811a:	fe b7       	in	r31, 0x3e	; 62
    811c:	31 96       	adiw	r30, 0x01	; 1
    811e:	12 96       	adiw	r26, 0x02	; 2
    8120:	dc 93       	st	X, r29
    8122:	ce 93       	st	-X, r28
    8124:	11 97       	sbiw	r26, 0x01	; 1
    8126:	13 83       	std	Z+3, r17	; 0x03
    8128:	02 83       	std	Z+2, r16	; 0x02
    812a:	64 83       	std	Z+4, r22	; 0x04
    812c:	75 83       	std	Z+5, r23	; 0x05
    812e:	86 83       	std	Z+6, r24	; 0x06
    8130:	97 83       	std	Z+7, r25	; 0x07
    8132:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    8136:	2d b7       	in	r18, 0x3d	; 61
    8138:	3e b7       	in	r19, 0x3e	; 62
    813a:	28 5f       	subi	r18, 0xF8	; 248
    813c:	3f 4f       	sbci	r19, 0xFF	; 255
    813e:	0f b6       	in	r0, 0x3f	; 63
    8140:	f8 94       	cli
    8142:	3e bf       	out	0x3e, r19	; 62
    8144:	0f be       	out	0x3f, r0	; 63
    8146:	2d bf       	out	0x3d, r18	; 61
    8148:	ce 01       	movw	r24, r28
    814a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("v\r\n"));
    814e:	84 ed       	ldi	r24, 0xD4	; 212
    8150:	98 e0       	ldi	r25, 0x08	; 8
    8152:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>

	if(a2d_led_v() > POWER_VLED_LIMIT)
    8156:	0e 94 89 47 	call	0x8f12	; 0x8f12 <a2d_led_v>
    815a:	20 e0       	ldi	r18, 0x00	; 0
    815c:	30 e0       	ldi	r19, 0x00	; 0
    815e:	40 ec       	ldi	r20, 0xC0	; 192
    8160:	50 e4       	ldi	r21, 0x40	; 64
    8162:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <__gesf2>
    8166:	18 16       	cp	r1, r24
    8168:	2c f4       	brge	.+10     	; 0x8174 <power_test+0xf6>
	{
		TEXTOUT_P(PSTR("ERROR!! (Too high!)"));
    816a:	80 ec       	ldi	r24, 0xC0	; 192
    816c:	98 e0       	ldi	r25, 0x08	; 8
    816e:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
    8172:	ff cf       	rjmp	.-2      	; 0x8172 <power_test+0xf4>
		while(1);
	};

	TEXTOUT_P(PSTR("Load test...\r\n"));
    8174:	81 eb       	ldi	r24, 0xB1	; 177
    8176:	98 e0       	ldi	r25, 0x08	; 8
    8178:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	memset(led_frame_bitmap, 0xFF, 64 );
    817c:	87 e4       	ldi	r24, 0x47	; 71
    817e:	92 e0       	ldi	r25, 0x02	; 2
    8180:	6f ef       	ldi	r22, 0xFF	; 255
    8182:	70 e0       	ldi	r23, 0x00	; 0
    8184:	40 e4       	ldi	r20, 0x40	; 64
    8186:	50 e0       	ldi	r21, 0x00	; 0
    8188:	0e 94 48 50 	call	0xa090	; 0xa090 <memset>
	led_plane_intensity_all(255);
    818c:	8f ef       	ldi	r24, 0xFF	; 255
    818e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	led_waitframe(50);
    8192:	82 e3       	ldi	r24, 0x32	; 50
    8194:	90 e0       	ldi	r25, 0x00	; 0
    8196:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>

	TEXTOUT_P(PSTR("\r\nSupply input         - "));
    819a:	87 e9       	ldi	r24, 0x97	; 151
    819c:	98 e0       	ldi	r25, 0x08	; 8
    819e:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_supply_v());
    81a2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <a2d_supply_v>
    81a6:	ad b7       	in	r26, 0x3d	; 61
    81a8:	be b7       	in	r27, 0x3e	; 62
    81aa:	18 97       	sbiw	r26, 0x08	; 8
    81ac:	0f b6       	in	r0, 0x3f	; 63
    81ae:	f8 94       	cli
    81b0:	be bf       	out	0x3e, r27	; 62
    81b2:	0f be       	out	0x3f, r0	; 63
    81b4:	ad bf       	out	0x3d, r26	; 61
    81b6:	ed b7       	in	r30, 0x3d	; 61
    81b8:	fe b7       	in	r31, 0x3e	; 62
    81ba:	31 96       	adiw	r30, 0x01	; 1
    81bc:	12 96       	adiw	r26, 0x02	; 2
    81be:	dc 93       	st	X, r29
    81c0:	ce 93       	st	-X, r28
    81c2:	11 97       	sbiw	r26, 0x01	; 1
    81c4:	13 83       	std	Z+3, r17	; 0x03
    81c6:	02 83       	std	Z+2, r16	; 0x02
    81c8:	64 83       	std	Z+4, r22	; 0x04
    81ca:	75 83       	std	Z+5, r23	; 0x05
    81cc:	86 83       	std	Z+6, r24	; 0x06
    81ce:	97 83       	std	Z+7, r25	; 0x07
    81d0:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    81d4:	2d b7       	in	r18, 0x3d	; 61
    81d6:	3e b7       	in	r19, 0x3e	; 62
    81d8:	28 5f       	subi	r18, 0xF8	; 248
    81da:	3f 4f       	sbci	r19, 0xFF	; 255
    81dc:	0f b6       	in	r0, 0x3f	; 63
    81de:	f8 94       	cli
    81e0:	3e bf       	out	0x3e, r19	; 62
    81e2:	0f be       	out	0x3f, r0	; 63
    81e4:	2d bf       	out	0x3d, r18	; 61
    81e6:	ce 01       	movw	r24, r28
    81e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("v\r\nMaximum LED supply   - "));
    81ec:	8c e7       	ldi	r24, 0x7C	; 124
    81ee:	98 e0       	ldi	r25, 0x08	; 8
    81f0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_led_v());
    81f4:	0e 94 89 47 	call	0x8f12	; 0x8f12 <a2d_led_v>
    81f8:	ad b7       	in	r26, 0x3d	; 61
    81fa:	be b7       	in	r27, 0x3e	; 62
    81fc:	18 97       	sbiw	r26, 0x08	; 8
    81fe:	0f b6       	in	r0, 0x3f	; 63
    8200:	f8 94       	cli
    8202:	be bf       	out	0x3e, r27	; 62
    8204:	0f be       	out	0x3f, r0	; 63
    8206:	ad bf       	out	0x3d, r26	; 61
    8208:	ed b7       	in	r30, 0x3d	; 61
    820a:	fe b7       	in	r31, 0x3e	; 62
    820c:	31 96       	adiw	r30, 0x01	; 1
    820e:	12 96       	adiw	r26, 0x02	; 2
    8210:	dc 93       	st	X, r29
    8212:	ce 93       	st	-X, r28
    8214:	11 97       	sbiw	r26, 0x01	; 1
    8216:	13 83       	std	Z+3, r17	; 0x03
    8218:	02 83       	std	Z+2, r16	; 0x02
    821a:	64 83       	std	Z+4, r22	; 0x04
    821c:	75 83       	std	Z+5, r23	; 0x05
    821e:	86 83       	std	Z+6, r24	; 0x06
    8220:	97 83       	std	Z+7, r25	; 0x07
    8222:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    8226:	2d b7       	in	r18, 0x3d	; 61
    8228:	3e b7       	in	r19, 0x3e	; 62
    822a:	28 5f       	subi	r18, 0xF8	; 248
    822c:	3f 4f       	sbci	r19, 0xFF	; 255
    822e:	0f b6       	in	r0, 0x3f	; 63
    8230:	f8 94       	cli
    8232:	3e bf       	out	0x3e, r19	; 62
    8234:	0f be       	out	0x3f, r0	; 63
    8236:	2d bf       	out	0x3d, r18	; 61
    8238:	ce 01       	movw	r24, r28
    823a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("v\r\nMaximum LED current  - "));
    823e:	81 e6       	ldi	r24, 0x61	; 97
    8240:	98 e0       	ldi	r25, 0x08	; 8
    8242:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_led_i());
    8246:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <a2d_led_i>
    824a:	ad b7       	in	r26, 0x3d	; 61
    824c:	be b7       	in	r27, 0x3e	; 62
    824e:	18 97       	sbiw	r26, 0x08	; 8
    8250:	0f b6       	in	r0, 0x3f	; 63
    8252:	f8 94       	cli
    8254:	be bf       	out	0x3e, r27	; 62
    8256:	0f be       	out	0x3f, r0	; 63
    8258:	ad bf       	out	0x3d, r26	; 61
    825a:	ed b7       	in	r30, 0x3d	; 61
    825c:	fe b7       	in	r31, 0x3e	; 62
    825e:	31 96       	adiw	r30, 0x01	; 1
    8260:	12 96       	adiw	r26, 0x02	; 2
    8262:	dc 93       	st	X, r29
    8264:	ce 93       	st	-X, r28
    8266:	11 97       	sbiw	r26, 0x01	; 1
    8268:	13 83       	std	Z+3, r17	; 0x03
    826a:	02 83       	std	Z+2, r16	; 0x02
    826c:	64 83       	std	Z+4, r22	; 0x04
    826e:	75 83       	std	Z+5, r23	; 0x05
    8270:	86 83       	std	Z+6, r24	; 0x06
    8272:	97 83       	std	Z+7, r25	; 0x07
    8274:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    8278:	2d b7       	in	r18, 0x3d	; 61
    827a:	3e b7       	in	r19, 0x3e	; 62
    827c:	28 5f       	subi	r18, 0xF8	; 248
    827e:	3f 4f       	sbci	r19, 0xFF	; 255
    8280:	0f b6       	in	r0, 0x3f	; 63
    8282:	f8 94       	cli
    8284:	3e bf       	out	0x3e, r19	; 62
    8286:	0f be       	out	0x3f, r0	; 63
    8288:	2d bf       	out	0x3d, r18	; 61
    828a:	ce 01       	movw	r24, r28
    828c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("mA\r\nLED forward drop     - "));
    8290:	85 e4       	ldi	r24, 0x45	; 69
    8292:	98 e0       	ldi	r25, 0x08	; 8
    8294:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	TEXTOUT_FLOAT(a2d_led_fv());
    8298:	0e 94 f5 47 	call	0x8fea	; 0x8fea <a2d_led_fv>
    829c:	ad b7       	in	r26, 0x3d	; 61
    829e:	be b7       	in	r27, 0x3e	; 62
    82a0:	18 97       	sbiw	r26, 0x08	; 8
    82a2:	0f b6       	in	r0, 0x3f	; 63
    82a4:	f8 94       	cli
    82a6:	be bf       	out	0x3e, r27	; 62
    82a8:	0f be       	out	0x3f, r0	; 63
    82aa:	ad bf       	out	0x3d, r26	; 61
    82ac:	ed b7       	in	r30, 0x3d	; 61
    82ae:	fe b7       	in	r31, 0x3e	; 62
    82b0:	31 96       	adiw	r30, 0x01	; 1
    82b2:	12 96       	adiw	r26, 0x02	; 2
    82b4:	dc 93       	st	X, r29
    82b6:	ce 93       	st	-X, r28
    82b8:	11 97       	sbiw	r26, 0x01	; 1
    82ba:	13 83       	std	Z+3, r17	; 0x03
    82bc:	02 83       	std	Z+2, r16	; 0x02
    82be:	64 83       	std	Z+4, r22	; 0x04
    82c0:	75 83       	std	Z+5, r23	; 0x05
    82c2:	86 83       	std	Z+6, r24	; 0x06
    82c4:	97 83       	std	Z+7, r25	; 0x07
    82c6:	0e 94 af 50 	call	0xa15e	; 0xa15e <sprintf>
    82ca:	2d b7       	in	r18, 0x3d	; 61
    82cc:	3e b7       	in	r19, 0x3e	; 62
    82ce:	28 5f       	subi	r18, 0xF8	; 248
    82d0:	3f 4f       	sbci	r19, 0xFF	; 255
    82d2:	0f b6       	in	r0, 0x3f	; 63
    82d4:	f8 94       	cli
    82d6:	3e bf       	out	0x3e, r19	; 62
    82d8:	0f be       	out	0x3f, r0	; 63
    82da:	2d bf       	out	0x3d, r18	; 61
    82dc:	ce 01       	movw	r24, r28
    82de:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
	TEXTOUT_P(PSTR("v\r\n"));
    82e2:	81 e4       	ldi	r24, 0x41	; 65
    82e4:	98 e0       	ldi	r25, 0x08	; 8
    82e6:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
	led_blank();
    82ea:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
}
    82ee:	df 91       	pop	r29
    82f0:	cf 91       	pop	r28
    82f2:	1f 91       	pop	r17
    82f4:	0f 91       	pop	r16
    82f6:	08 95       	ret

000082f8 <button_init>:
}

void button_init(void)
{
	//Button lines inputs with pullups enabled
	BUTTON_DDR &=~BUTTON_MASK;
    82f8:	8a b3       	in	r24, 0x1a	; 26
    82fa:	80 7f       	andi	r24, 0xF0	; 240
    82fc:	8a bb       	out	0x1a, r24	; 26
	BUTTON_PORT |= BUTTON_MASK;
    82fe:	8b b3       	in	r24, 0x1b	; 27
    8300:	8f 60       	ori	r24, 0x0F	; 15
    8302:	8b bb       	out	0x1b, r24	; 27
}
    8304:	08 95       	ret

00008306 <button_tick>:
	unsigned char x;
	static int skip_hold_time;
	static int select_hold_time;
	static char brightness_modified=FALSE;

	if(!(BUTTON_PIN & _BV(BUTTON_SELECT_BIT)))
    8306:	c8 99       	sbic	0x19, 0	; 25
    8308:	12 c0       	rjmp	.+36     	; 0x832e <button_tick+0x28>
	{
		//Press instant
		if(select_hold_time == 0)
    830a:	80 91 17 02 	lds	r24, 0x0217
    830e:	90 91 18 02 	lds	r25, 0x0218
    8312:	89 2b       	or	r24, r25
    8314:	81 f4       	brne	.+32     	; 0x8336 <button_tick+0x30>
		{
			//pass button press to mode selector
			sequence_select_press();
    8316:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <sequence_select_press>
			
			select_hold_time++;
    831a:	80 91 17 02 	lds	r24, 0x0217
    831e:	90 91 18 02 	lds	r25, 0x0218
    8322:	01 96       	adiw	r24, 0x01	; 1
    8324:	90 93 18 02 	sts	0x0218, r25
    8328:	80 93 17 02 	sts	0x0217, r24
    832c:	04 c0       	rjmp	.+8      	; 0x8336 <button_tick+0x30>
		};
	}
	else
		select_hold_time=0;
    832e:	10 92 18 02 	sts	0x0218, r1
    8332:	10 92 17 02 	sts	0x0217, r1

	if(!(BUTTON_PIN & _BV(BUTTON_SKIP_BIT)))
    8336:	c9 99       	sbic	0x19, 1	; 25
    8338:	1a c0       	rjmp	.+52     	; 0x836e <button_tick+0x68>
	{
		//Press instant
		if(skip_hold_time == 0)
    833a:	80 91 19 02 	lds	r24, 0x0219
    833e:	90 91 1a 02 	lds	r25, 0x021A
    8342:	89 2b       	or	r24, r25
    8344:	11 f4       	brne	.+4      	; 0x834a <button_tick+0x44>
			sequence_skip();			
    8346:	0e 94 c8 46 	call	0x8d90	; 0x8d90 <sequence_skip>
		
		//Held for 1sec, enable rotation
		if(skip_hold_time == (int)(SELECT_HOLD/TIMER_TICK))
    834a:	80 91 19 02 	lds	r24, 0x0219
    834e:	90 91 1a 02 	lds	r25, 0x021A
    8352:	cd 97       	sbiw	r24, 0x3d	; 61
    8354:	11 f4       	brne	.+4      	; 0x835a <button_tick+0x54>
			sequence_rotate_en();
    8356:	0e 94 c2 46 	call	0x8d84	; 0x8d84 <sequence_rotate_en>
		
		skip_hold_time++;
    835a:	80 91 19 02 	lds	r24, 0x0219
    835e:	90 91 1a 02 	lds	r25, 0x021A
    8362:	01 96       	adiw	r24, 0x01	; 1
    8364:	90 93 1a 02 	sts	0x021A, r25
    8368:	80 93 19 02 	sts	0x0219, r24
    836c:	04 c0       	rjmp	.+8      	; 0x8376 <button_tick+0x70>
	}
	else
		skip_hold_time=0;
    836e:	10 92 1a 02 	sts	0x021A, r1
    8372:	10 92 19 02 	sts	0x0219, r1

	//Increase brightness
	if(!(BUTTON_PIN & _BV(BUTTON_BRINC_BIT)))
    8376:	cb 99       	sbic	0x19, 3	; 25
    8378:	06 c0       	rjmp	.+12     	; 0x8386 <button_tick+0x80>
	{
		x=power_vled_get();
    837a:	0e 94 3c 40 	call	0x8078	; 0x8078 <power_vled_get>
		if(x!=255)
    837e:	8f 3f       	cpi	r24, 0xFF	; 255
    8380:	59 f0       	breq	.+22     	; 0x8398 <button_tick+0x92>
			power_vled_set(x+1);
    8382:	8f 5f       	subi	r24, 0xFF	; 255
    8384:	07 c0       	rjmp	.+14     	; 0x8394 <button_tick+0x8e>
		brightness_modified = TRUE;
	}
	//Decrease brighntess
	else if(!(BUTTON_PIN & _BV(BUTTON_BRDEC_BIT)))
    8386:	ca 99       	sbic	0x19, 2	; 25
    8388:	0b c0       	rjmp	.+22     	; 0x83a0 <button_tick+0x9a>
	{
		x=power_vled_get();
    838a:	0e 94 3c 40 	call	0x8078	; 0x8078 <power_vled_get>
		if(x > BRIGHTNESS_MIN)
    838e:	8b 35       	cpi	r24, 0x5B	; 91
    8390:	18 f0       	brcs	.+6      	; 0x8398 <button_tick+0x92>
			power_vled_set(x-1);
    8392:	81 50       	subi	r24, 0x01	; 1
    8394:	0e 94 39 40 	call	0x8072	; 0x8072 <power_vled_set>
		brightness_modified = TRUE;
    8398:	81 e0       	ldi	r24, 0x01	; 1
    839a:	80 93 16 02 	sts	0x0216, r24
    839e:	08 95       	ret
	}
	else if(brightness_modified)
    83a0:	80 91 16 02 	lds	r24, 0x0216
    83a4:	88 23       	and	r24, r24
    83a6:	21 f0       	breq	.+8      	; 0x83b0 <button_tick+0xaa>
	{
		brightness_modified=FALSE;
    83a8:	10 92 16 02 	sts	0x0216, r1
		sequence_save_brightness();	//this may cause a hickup in the displayed pattern due to eeprom write time (oh well)
    83ac:	0e 94 a4 46 	call	0x8d48	; 0x8d48 <sequence_save_brightness>
    83b0:	08 95       	ret

000083b2 <sequence_tick>:
// Public functions
//********************************************************************************************************

void sequence_tick(void)
{
	if(time)
    83b2:	80 91 2b 02 	lds	r24, 0x022B
    83b6:	90 91 2c 02 	lds	r25, 0x022C
    83ba:	00 97       	sbiw	r24, 0x00	; 0
    83bc:	29 f0       	breq	.+10     	; 0x83c8 <sequence_tick+0x16>
		time--;
    83be:	01 97       	sbiw	r24, 0x01	; 1
    83c0:	90 93 2c 02 	sts	0x022C, r25
    83c4:	80 93 2b 02 	sts	0x022B, r24
    83c8:	08 95       	ret

000083ca <sequence_init>:
}

void sequence_init(void)
{
	sequence_index = settings_ram.sequence;
    83ca:	80 91 36 02 	lds	r24, 0x0236
    83ce:	80 93 1c 02 	sts	0x021C, r24
	mode_auto = settings_ram.mode_auto;
    83d2:	80 91 35 02 	lds	r24, 0x0235
    83d6:	80 93 20 02 	sts	0x0220, r24
}
    83da:	08 95       	ret

000083dc <menu_show>:
		};
	};
};

static void menu_show(void)
{
    83dc:	0f 93       	push	r16
    83de:	1f 93       	push	r17
	unsigned char x;

	text[0] = sequence_index+'0';
    83e0:	80 91 1c 02 	lds	r24, 0x021C
    83e4:	80 5d       	subi	r24, 0xD0	; 208
    83e6:	80 93 21 02 	sts	0x0221, r24
	text[1] = 0;
    83ea:	10 92 22 02 	sts	0x0222, r1
	text_set(text);
    83ee:	81 e2       	ldi	r24, 0x21	; 33
    83f0:	92 e0       	ldi	r25, 0x02	; 2
    83f2:	0e 94 81 24 	call	0x4902	; 0x4902 <text_set>
    83f6:	00 e0       	ldi	r16, 0x00	; 0
    83f8:	08 c0       	rjmp	.+16     	; 0x840a <menu_show+0x2e>
	x=0;
	while(!text_isfinished())
		text_draw_y(x++, 1, 0);
    83fa:	10 2f       	mov	r17, r16
    83fc:	1f 5f       	subi	r17, 0xFF	; 255
    83fe:	80 2f       	mov	r24, r16
    8400:	61 e0       	ldi	r22, 0x01	; 1
    8402:	40 e0       	ldi	r20, 0x00	; 0
    8404:	0e 94 02 25 	call	0x4a04	; 0x4a04 <text_draw_y>
    8408:	01 2f       	mov	r16, r17

	text[0] = sequence_index+'0';
	text[1] = 0;
	text_set(text);
	x=0;
	while(!text_isfinished())
    840a:	0e 94 51 24 	call	0x48a2	; 0x48a2 <text_isfinished>
    840e:	88 23       	and	r24, r24
    8410:	a1 f3       	breq	.-24     	; 0x83fa <menu_show+0x1e>
		text_draw_y(x++, 1, 0);
	
	if(sequence_info[sequence_index].mode == SEQUENCE_MODE_DAY)
    8412:	e0 91 1c 02 	lds	r30, 0x021C
    8416:	f0 e0       	ldi	r31, 0x00	; 0
    8418:	ee 0f       	add	r30, r30
    841a:	ff 1f       	adc	r31, r31
    841c:	ed 5d       	subi	r30, 0xDD	; 221
    841e:	fe 4f       	sbci	r31, 0xFE	; 254
    8420:	80 81       	ld	r24, Z
    8422:	88 23       	and	r24, r24
    8424:	19 f4       	brne	.+6      	; 0x842c <menu_show+0x50>
		text_set_P(PSTR("D"));
    8426:	82 e7       	ldi	r24, 0x72	; 114
    8428:	9a e0       	ldi	r25, 0x0A	; 10
    842a:	02 c0       	rjmp	.+4      	; 0x8430 <menu_show+0x54>
	else
		text_set_P(PSTR("N"));
    842c:	80 e7       	ldi	r24, 0x70	; 112
    842e:	9a e0       	ldi	r25, 0x0A	; 10
    8430:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    8434:	07 e0       	ldi	r16, 0x07	; 7
    8436:	08 c0       	rjmp	.+16     	; 0x8448 <menu_show+0x6c>
	
	x=7;
	while(!text_isfinished())
		text_draw_y(0, 1, x--);	
    8438:	10 2f       	mov	r17, r16
    843a:	11 50       	subi	r17, 0x01	; 1
    843c:	80 e0       	ldi	r24, 0x00	; 0
    843e:	61 e0       	ldi	r22, 0x01	; 1
    8440:	40 2f       	mov	r20, r16
    8442:	0e 94 02 25 	call	0x4a04	; 0x4a04 <text_draw_y>
    8446:	01 2f       	mov	r16, r17
		text_set_P(PSTR("D"));
	else
		text_set_P(PSTR("N"));
	
	x=7;
	while(!text_isfinished())
    8448:	0e 94 51 24 	call	0x48a2	; 0x48a2 <text_isfinished>
    844c:	88 23       	and	r24, r24
    844e:	a1 f3       	breq	.-24     	; 0x8438 <menu_show+0x5c>
		text_draw_y(0, 1, x--);	
}
    8450:	1f 91       	pop	r17
    8452:	0f 91       	pop	r16
    8454:	08 95       	ret

00008456 <sequence_menu>:
	settings_ram.sequence_settings[sequence_index].brightness = power_vled_get();
	settings_save();	
}

void sequence_menu(void)
{
    8456:	0f 93       	push	r16
    8458:	1f 93       	push	r17
    845a:	cf 93       	push	r28
    845c:	df 93       	push	r29
	unsigned char x;

	if(button_select)
    845e:	80 91 1f 02 	lds	r24, 0x021F
    8462:	88 23       	and	r24, r24
    8464:	09 f4       	brne	.+2      	; 0x8468 <sequence_menu+0x12>
    8466:	e2 c0       	rjmp	.+452    	; 0x862c <sequence_menu+0x1d6>
	{
		TEXTOUT_P(PSTR("\r\nSequence menu\r\n"));
    8468:	8d ef       	ldi	r24, 0xFD	; 253
    846a:	9a e0       	ldi	r25, 0x0A	; 10
    846c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		
		led_framerate(100);
    8470:	84 e6       	ldi	r24, 0x64	; 100
    8472:	90 e0       	ldi	r25, 0x00	; 0
    8474:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
		led_plane_intensity_all(255);	
    8478:	8f ef       	ldi	r24, 0xFF	; 255
    847a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
		power_vled_set(255);
    847e:	8f ef       	ldi	r24, 0xFF	; 255
    8480:	0e 94 39 40 	call	0x8072	; 0x8072 <power_vled_set>
		
		do
		{
			button_select = FALSE;
			time = (int)(MODE_SELECT_TIMEOUT/TIMER_TICK);
    8484:	c7 eb       	ldi	r28, 0xB7	; 183
    8486:	d0 e0       	ldi	r29, 0x00	; 0
		led_plane_intensity_all(255);	
		power_vled_set(255);
		
		do
		{
			button_select = FALSE;
    8488:	10 92 1f 02 	sts	0x021F, r1
			time = (int)(MODE_SELECT_TIMEOUT/TIMER_TICK);
    848c:	d0 93 2c 02 	sts	0x022C, r29
    8490:	c0 93 2b 02 	sts	0x022B, r28
			
			led_blank();
    8494:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			if(mode_auto)
    8498:	80 91 20 02 	lds	r24, 0x0220
    849c:	88 23       	and	r24, r24
    849e:	99 f0       	breq	.+38     	; 0x84c6 <sequence_menu+0x70>
			{
				text_set_P(PSTR("A"));
    84a0:	8b ef       	ldi	r24, 0xFB	; 251
    84a2:	9a e0       	ldi	r25, 0x0A	; 10
    84a4:	0e 94 9b 24 	call	0x4936	; 0x4936 <text_set_P>
    84a8:	00 e0       	ldi	r16, 0x00	; 0
    84aa:	08 c0       	rjmp	.+16     	; 0x84bc <sequence_menu+0x66>
				x=0;
				while(!text_isfinished())
					text_draw_y(x++, 1, 0);	
    84ac:	10 2f       	mov	r17, r16
    84ae:	1f 5f       	subi	r17, 0xFF	; 255
    84b0:	80 2f       	mov	r24, r16
    84b2:	61 e0       	ldi	r22, 0x01	; 1
    84b4:	40 e0       	ldi	r20, 0x00	; 0
    84b6:	0e 94 02 25 	call	0x4a04	; 0x4a04 <text_draw_y>
    84ba:	01 2f       	mov	r16, r17
			led_blank();
			if(mode_auto)
			{
				text_set_P(PSTR("A"));
				x=0;
				while(!text_isfinished())
    84bc:	0e 94 51 24 	call	0x48a2	; 0x48a2 <text_isfinished>
    84c0:	88 23       	and	r24, r24
    84c2:	a1 f3       	breq	.-24     	; 0x84ac <sequence_menu+0x56>
    84c4:	05 c0       	rjmp	.+10     	; 0x84d0 <sequence_menu+0x7a>
					text_draw_y(x++, 1, 0);	
			}
			else
				menu_show();
    84c6:	0e 94 ee 41 	call	0x83dc	; 0x83dc <menu_show>
    84ca:	02 c0       	rjmp	.+4      	; 0x84d0 <sequence_menu+0x7a>
			
			while(!button_select && time)
				main_fly();
    84cc:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
					text_draw_y(x++, 1, 0);	
			}
			else
				menu_show();
			
			while(!button_select && time)
    84d0:	80 91 1f 02 	lds	r24, 0x021F
    84d4:	88 23       	and	r24, r24
    84d6:	39 f4       	brne	.+14     	; 0x84e6 <sequence_menu+0x90>
    84d8:	80 91 2b 02 	lds	r24, 0x022B
    84dc:	90 91 2c 02 	lds	r25, 0x022C
    84e0:	89 2b       	or	r24, r25
    84e2:	a1 f7       	brne	.-24     	; 0x84cc <sequence_menu+0x76>
    84e4:	58 c0       	rjmp	.+176    	; 0x8596 <sequence_menu+0x140>
				main_fly();
			
			if(button_select)
			{
				if(mode_auto)
    84e6:	80 91 20 02 	lds	r24, 0x0220
    84ea:	88 23       	and	r24, r24
    84ec:	19 f0       	breq	.+6      	; 0x84f4 <sequence_menu+0x9e>
					mode_auto=FALSE;
    84ee:	10 92 20 02 	sts	0x0220, r1
    84f2:	0c c0       	rjmp	.+24     	; 0x850c <sequence_menu+0xb6>
				else
				{
					sequence_index++;
    84f4:	80 91 1c 02 	lds	r24, 0x021C
    84f8:	8f 5f       	subi	r24, 0xFF	; 255
    84fa:	80 93 1c 02 	sts	0x021C, r24
					if(sequence_index == NUMBER_OF_SEQUENCES)
    84fe:	84 30       	cpi	r24, 0x04	; 4
    8500:	29 f4       	brne	.+10     	; 0x850c <sequence_menu+0xb6>
					{
						sequence_index=0;
    8502:	10 92 1c 02 	sts	0x021C, r1
						mode_auto=TRUE;
    8506:	81 e0       	ldi	r24, 0x01	; 1
    8508:	80 93 20 02 	sts	0x0220, r24
					};
				};
				
				if(mode_auto)
    850c:	80 91 20 02 	lds	r24, 0x0220
    8510:	88 23       	and	r24, r24
    8512:	09 f1       	breq	.+66     	; 0x8556 <sequence_menu+0x100>
				{
					TEXTOUT_P(PSTR("Auto, sequence "));
    8514:	8b ee       	ldi	r24, 0xEB	; 235
    8516:	9a e0       	ldi	r25, 0x0A	; 10
    8518:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT_INT(settings_ram.sequence_auto_day);
    851c:	80 91 34 02 	lds	r24, 0x0234
    8520:	90 e0       	ldi	r25, 0x00	; 0
    8522:	61 e2       	ldi	r22, 0x21	; 33
    8524:	72 e0       	ldi	r23, 0x02	; 2
    8526:	4a e0       	ldi	r20, 0x0A	; 10
    8528:	50 e0       	ldi	r21, 0x00	; 0
    852a:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    852e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR("during day, sequence "));
    8532:	85 ed       	ldi	r24, 0xD5	; 213
    8534:	9a e0       	ldi	r25, 0x0A	; 10
    8536:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT_INT(settings_ram.sequence_auto_night);
    853a:	80 91 33 02 	lds	r24, 0x0233
    853e:	90 e0       	ldi	r25, 0x00	; 0
    8540:	61 e2       	ldi	r22, 0x21	; 33
    8542:	72 e0       	ldi	r23, 0x02	; 2
    8544:	4a e0       	ldi	r20, 0x0A	; 10
    8546:	50 e0       	ldi	r21, 0x00	; 0
    8548:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    854c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR("during night\r\n"));
    8550:	86 ec       	ldi	r24, 0xC6	; 198
    8552:	9a e0       	ldi	r25, 0x0A	; 10
    8554:	1e c0       	rjmp	.+60     	; 0x8592 <sequence_menu+0x13c>
				}
				else
				{
					TEXTOUT_P(PSTR("Sequence "));
    8556:	8c eb       	ldi	r24, 0xBC	; 188
    8558:	9a e0       	ldi	r25, 0x0A	; 10
    855a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT_INT(sequence_index);
    855e:	80 91 1c 02 	lds	r24, 0x021C
    8562:	90 e0       	ldi	r25, 0x00	; 0
    8564:	61 e2       	ldi	r22, 0x21	; 33
    8566:	72 e0       	ldi	r23, 0x02	; 2
    8568:	4a e0       	ldi	r20, 0x0A	; 10
    856a:	50 e0       	ldi	r21, 0x00	; 0
    856c:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8570:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					if(sequence_info[sequence_index].mode == SEQUENCE_MODE_DAY)
    8574:	e0 91 1c 02 	lds	r30, 0x021C
    8578:	f0 e0       	ldi	r31, 0x00	; 0
    857a:	ee 0f       	add	r30, r30
    857c:	ff 1f       	adc	r31, r31
    857e:	ed 5d       	subi	r30, 0xDD	; 221
    8580:	fe 4f       	sbci	r31, 0xFE	; 254
    8582:	80 81       	ld	r24, Z
    8584:	88 23       	and	r24, r24
    8586:	19 f4       	brne	.+6      	; 0x858e <sequence_menu+0x138>
						TEXTOUT_P(PSTR(" (day)\r\n"));
    8588:	83 eb       	ldi	r24, 0xB3	; 179
    858a:	9a e0       	ldi	r25, 0x0A	; 10
    858c:	02 c0       	rjmp	.+4      	; 0x8592 <sequence_menu+0x13c>
					else
						TEXTOUT_P(PSTR(" (night)\r\n"));
    858e:	88 ea       	ldi	r24, 0xA8	; 168
    8590:	9a e0       	ldi	r25, 0x0A	; 10
    8592:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				};
			};			
		}while(time);
    8596:	80 91 2b 02 	lds	r24, 0x022B
    859a:	90 91 2c 02 	lds	r25, 0x022C
    859e:	89 2b       	or	r24, r25
    85a0:	09 f0       	breq	.+2      	; 0x85a4 <sequence_menu+0x14e>
    85a2:	72 cf       	rjmp	.-284    	; 0x8488 <sequence_menu+0x32>
		if(mode_auto == FALSE)
    85a4:	80 91 20 02 	lds	r24, 0x0220
    85a8:	88 23       	and	r24, r24
    85aa:	c9 f5       	brne	.+114    	; 0x861e <sequence_menu+0x1c8>
		{
			TEXTOUT_P(PSTR("Preferred "));
    85ac:	8d e9       	ldi	r24, 0x9D	; 157
    85ae:	9a e0       	ldi	r25, 0x0A	; 10
    85b0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			if(sequence_info[sequence_index].mode == SEQUENCE_MODE_DAY)
    85b4:	e0 91 1c 02 	lds	r30, 0x021C
    85b8:	f0 e0       	ldi	r31, 0x00	; 0
    85ba:	ee 0f       	add	r30, r30
    85bc:	ff 1f       	adc	r31, r31
    85be:	ed 5d       	subi	r30, 0xDD	; 221
    85c0:	fe 4f       	sbci	r31, 0xFE	; 254
    85c2:	80 81       	ld	r24, Z
    85c4:	88 23       	and	r24, r24
    85c6:	49 f4       	brne	.+18     	; 0x85da <sequence_menu+0x184>
			{
				TEXTOUT_P(PSTR("day"));
    85c8:	89 e9       	ldi	r24, 0x99	; 153
    85ca:	9a e0       	ldi	r25, 0x0A	; 10
    85cc:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				settings_ram.sequence_auto_day = sequence_index;
    85d0:	80 91 1c 02 	lds	r24, 0x021C
    85d4:	80 93 34 02 	sts	0x0234, r24
    85d8:	08 c0       	rjmp	.+16     	; 0x85ea <sequence_menu+0x194>
			}
			else
			{
				TEXTOUT_P(PSTR("night"));
    85da:	83 e9       	ldi	r24, 0x93	; 147
    85dc:	9a e0       	ldi	r25, 0x0A	; 10
    85de:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				settings_ram.sequence_auto_night = sequence_index;
    85e2:	80 91 1c 02 	lds	r24, 0x021C
    85e6:	80 93 33 02 	sts	0x0233, r24
			};
			TEXTOUT_P(PSTR(" sequence = "));
    85ea:	86 e8       	ldi	r24, 0x86	; 134
    85ec:	9a e0       	ldi	r25, 0x0A	; 10
    85ee:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			TEXTOUT_INT(sequence_index);
    85f2:	80 91 1c 02 	lds	r24, 0x021C
    85f6:	90 e0       	ldi	r25, 0x00	; 0
    85f8:	61 e2       	ldi	r22, 0x21	; 33
    85fa:	72 e0       	ldi	r23, 0x02	; 2
    85fc:	4a e0       	ldi	r20, 0x0A	; 10
    85fe:	50 e0       	ldi	r21, 0x00	; 0
    8600:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8604:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
			TEXTOUT_P(PSTR("\r\n"));
    8608:	83 e8       	ldi	r24, 0x83	; 131
    860a:	9a e0       	ldi	r25, 0x0A	; 10
    860c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			settings_ram.sequence = sequence_index;
    8610:	80 91 1c 02 	lds	r24, 0x021C
    8614:	80 93 36 02 	sts	0x0236, r24
			settings_ram.mode_auto = FALSE;
    8618:	10 92 35 02 	sts	0x0235, r1
    861c:	05 c0       	rjmp	.+10     	; 0x8628 <sequence_menu+0x1d2>
		}
		else
		{
			settings_ram.mode_auto = TRUE;
    861e:	81 e0       	ldi	r24, 0x01	; 1
    8620:	80 93 35 02 	sts	0x0235, r24
			forced_measure=TRUE;
    8624:	80 93 2b 01 	sts	0x012B, r24
		};
		settings_save();
    8628:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
	};
}
    862c:	df 91       	pop	r29
    862e:	cf 91       	pop	r28
    8630:	1f 91       	pop	r17
    8632:	0f 91       	pop	r16
    8634:	08 95       	ret

00008636 <sequence_run>:

	Loop while not finished
 */

void sequence_run(void)
{
    8636:	5f 92       	push	r5
    8638:	6f 92       	push	r6
    863a:	7f 92       	push	r7
    863c:	8f 92       	push	r8
    863e:	9f 92       	push	r9
    8640:	af 92       	push	r10
    8642:	bf 92       	push	r11
    8644:	cf 92       	push	r12
    8646:	df 92       	push	r13
    8648:	ef 92       	push	r14
    864a:	ff 92       	push	r15
    864c:	0f 93       	push	r16
    864e:	1f 93       	push	r17
    8650:	cf 93       	push	r28
    8652:	df 93       	push	r29
	char finished=FALSE;
	char skip_measure=FALSE;

	unsigned int tempint;

	seq_quit=FALSE;
    8654:	10 92 1b 02 	sts	0x021B, r1
	
	if(forced_measure && mode_auto);
    8658:	80 91 2b 01 	lds	r24, 0x012B
    865c:	88 23       	and	r24, r24
    865e:	29 f0       	breq	.+10     	; 0x866a <sequence_run+0x34>
    8660:	80 91 20 02 	lds	r24, 0x0220
    8664:	88 23       	and	r24, r24
    8666:	09 f0       	breq	.+2      	; 0x866a <sequence_run+0x34>
    8668:	6a c0       	rjmp	.+212    	; 0x873e <sequence_run+0x108>
	else
	{
		TEXTOUT_P(PSTR("\r\nRunning sequence "));
    866a:	8c e5       	ldi	r24, 0x5C	; 92
    866c:	9a e0       	ldi	r25, 0x0A	; 10
    866e:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_INT(sequence_index);
    8672:	80 91 1c 02 	lds	r24, 0x021C
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	61 e2       	ldi	r22, 0x21	; 33
    867a:	72 e0       	ldi	r23, 0x02	; 2
    867c:	4a e0       	ldi	r20, 0x0A	; 10
    867e:	50 e0       	ldi	r21, 0x00	; 0
    8680:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8684:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("\r\nMode "));
    8688:	84 e5       	ldi	r24, 0x54	; 84
    868a:	9a e0       	ldi	r25, 0x0A	; 10
    868c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		if(sequence_info[sequence_index].mode == SEQUENCE_MODE_DAY)
    8690:	e0 91 1c 02 	lds	r30, 0x021C
    8694:	f0 e0       	ldi	r31, 0x00	; 0
    8696:	ee 0f       	add	r30, r30
    8698:	ff 1f       	adc	r31, r31
    869a:	ed 5d       	subi	r30, 0xDD	; 221
    869c:	fe 4f       	sbci	r31, 0xFE	; 254
    869e:	80 81       	ld	r24, Z
    86a0:	88 23       	and	r24, r24
    86a2:	19 f4       	brne	.+6      	; 0x86aa <sequence_run+0x74>
			TEXTOUT_P(PSTR("DAY\r\n"));
    86a4:	8e e4       	ldi	r24, 0x4E	; 78
    86a6:	9a e0       	ldi	r25, 0x0A	; 10
    86a8:	02 c0       	rjmp	.+4      	; 0x86ae <sequence_run+0x78>
		else
			TEXTOUT_P(PSTR("NIGHT\r\n"));
    86aa:	86 e4       	ldi	r24, 0x46	; 70
    86ac:	9a e0       	ldi	r25, 0x0A	; 10
    86ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			
		TEXTOUT_INT(sequence_info[sequence_index].size);
    86b2:	e0 91 1c 02 	lds	r30, 0x021C
    86b6:	f0 e0       	ldi	r31, 0x00	; 0
    86b8:	ee 0f       	add	r30, r30
    86ba:	ff 1f       	adc	r31, r31
    86bc:	ed 5d       	subi	r30, 0xDD	; 221
    86be:	fe 4f       	sbci	r31, 0xFE	; 254
    86c0:	81 81       	ldd	r24, Z+1	; 0x01
    86c2:	90 e0       	ldi	r25, 0x00	; 0
    86c4:	61 e2       	ldi	r22, 0x21	; 33
    86c6:	72 e0       	ldi	r23, 0x02	; 2
    86c8:	4a e0       	ldi	r20, 0x0A	; 10
    86ca:	50 e0       	ldi	r21, 0x00	; 0
    86cc:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    86d0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR(" patterns in sequence\r\n"));
    86d4:	8e e2       	ldi	r24, 0x2E	; 46
    86d6:	9a e0       	ldi	r25, 0x0A	; 10
    86d8:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		
		TEXTOUT_P(PSTR("Brightness "));
    86dc:	82 e2       	ldi	r24, 0x22	; 34
    86de:	9a e0       	ldi	r25, 0x0A	; 10
    86e0:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		TEXTOUT_INT(settings_ram.sequence_settings[sequence_index].brightness);
    86e4:	80 91 1c 02 	lds	r24, 0x021C
    86e8:	90 e0       	ldi	r25, 0x00	; 0
    86ea:	fc 01       	movw	r30, r24
    86ec:	ee 0f       	add	r30, r30
    86ee:	ff 1f       	adc	r31, r31
    86f0:	e8 0f       	add	r30, r24
    86f2:	f9 1f       	adc	r31, r25
    86f4:	ef 5c       	subi	r30, 0xCF	; 207
    86f6:	fd 4f       	sbci	r31, 0xFD	; 253
    86f8:	82 85       	ldd	r24, Z+10	; 0x0a
    86fa:	90 e0       	ldi	r25, 0x00	; 0
    86fc:	61 e2       	ldi	r22, 0x21	; 33
    86fe:	72 e0       	ldi	r23, 0x02	; 2
    8700:	4a e0       	ldi	r20, 0x0A	; 10
    8702:	50 e0       	ldi	r21, 0x00	; 0
    8704:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8708:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
		TEXTOUT_P(PSTR("(/255)\r\n"));
    870c:	89 e1       	ldi	r24, 0x19	; 25
    870e:	9a e0       	ldi	r25, 0x0A	; 10
    8710:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		
		TEXTOUT_P(PSTR("Rotation "));
    8714:	8f e0       	ldi	r24, 0x0F	; 15
    8716:	9a e0       	ldi	r25, 0x0A	; 10
    8718:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		if(settings_ram.sequence_settings[sequence_index].rotation)
    871c:	80 91 1c 02 	lds	r24, 0x021C
    8720:	90 e0       	ldi	r25, 0x00	; 0
    8722:	fc 01       	movw	r30, r24
    8724:	ee 0f       	add	r30, r30
    8726:	ff 1f       	adc	r31, r31
    8728:	e8 0f       	add	r30, r24
    872a:	f9 1f       	adc	r31, r25
    872c:	ef 5c       	subi	r30, 0xCF	; 207
    872e:	fd 4f       	sbci	r31, 0xFD	; 253
    8730:	83 85       	ldd	r24, Z+11	; 0x0b
    8732:	88 23       	and	r24, r24
    8734:	31 f0       	breq	.+12     	; 0x8742 <sequence_run+0x10c>
			TEXTOUT_P(PSTR("enabled\r\n"));
    8736:	85 e0       	ldi	r24, 0x05	; 5
    8738:	9a e0       	ldi	r25, 0x0A	; 10
    873a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
    873e:	bb 24       	eor	r11, r11
    8740:	13 c0       	rjmp	.+38     	; 0x8768 <sequence_run+0x132>
		else
		{
			pattern_index = settings_ram.sequence_settings[sequence_index].preferred;
    8742:	b4 84       	ldd	r11, Z+12	; 0x0c
			TEXTOUT_P(PSTR("disabled\r\nPattern "));
    8744:	82 ef       	ldi	r24, 0xF2	; 242
    8746:	99 e0       	ldi	r25, 0x09	; 9
    8748:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			TEXTOUT_INT(pattern_index);
    874c:	8b 2d       	mov	r24, r11
    874e:	90 e0       	ldi	r25, 0x00	; 0
    8750:	61 e2       	ldi	r22, 0x21	; 33
    8752:	72 e0       	ldi	r23, 0x02	; 2
    8754:	4a e0       	ldi	r20, 0x0A	; 10
    8756:	50 e0       	ldi	r21, 0x00	; 0
    8758:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    875c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
			TEXTOUT_P(PSTR("\r\n"));
    8760:	8f ee       	ldi	r24, 0xEF	; 239
    8762:	99 e0       	ldi	r25, 0x09	; 9
    8764:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
		};
	};

	power_vled_set(settings_ram.sequence_settings[sequence_index].brightness);
    8768:	80 91 1c 02 	lds	r24, 0x021C
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	fc 01       	movw	r30, r24
    8770:	ee 0f       	add	r30, r30
    8772:	ff 1f       	adc	r31, r31
    8774:	e8 0f       	add	r30, r24
    8776:	f9 1f       	adc	r31, r25
    8778:	ef 5c       	subi	r30, 0xCF	; 207
    877a:	fd 4f       	sbci	r31, 0xFD	; 253
    877c:	82 85       	ldd	r24, Z+10	; 0x0a
    877e:	0e 94 39 40 	call	0x8072	; 0x8072 <power_vled_set>
    8782:	aa 24       	eor	r10, r10
			{
				led_framerate(100);
				led_plane_intensity_all(255);	
				power_vled_set(255);
				menu_show();
				time = (unsigned int)(0.5/TIMER_TICK);
    8784:	7e e1       	ldi	r23, 0x1E	; 30
    8786:	67 2e       	mov	r6, r23
    8788:	71 2c       	mov	r7, r1
				while(time)
    878a:	55 24       	eor	r5, r5
    878c:	53 94       	inc	r5
	led_framerate(100);
	led_blank();
	led_plane_intensity_all(255);

	led_line(2, 0, 0, 5, 0, 0, TRUE);
	led_line(2, 7, 0, 5, 7, 0, TRUE);
    878e:	67 e0       	ldi	r22, 0x07	; 7
    8790:	86 2e       	mov	r8, r22
    8792:	91 2c       	mov	r9, r1
	power_vled_set(settings_ram.sequence_settings[sequence_index].brightness);

	do
	{
		//Light sensing enabled?
		if(mode_auto && !skip_measure)
    8794:	80 91 20 02 	lds	r24, 0x0220
    8798:	88 23       	and	r24, r24
    879a:	09 f4       	brne	.+2      	; 0x879e <sequence_run+0x168>
    879c:	9c c0       	rjmp	.+312    	; 0x88d6 <sequence_run+0x2a0>
    879e:	aa 20       	and	r10, r10
    87a0:	09 f0       	breq	.+2      	; 0x87a4 <sequence_run+0x16e>
    87a2:	99 c0       	rjmp	.+306    	; 0x88d6 <sequence_run+0x2a0>
		{
			//Do we still want DAY sequence?
			tempint = a2d_light();
    87a4:	0e 94 05 47 	call	0x8e0a	; 0x8e0a <a2d_light>
    87a8:	ec 01       	movw	r28, r24
			TEXTOUT_P(PSTR("Light = "));
    87aa:	86 ee       	ldi	r24, 0xE6	; 230
    87ac:	99 e0       	ldi	r25, 0x09	; 9
    87ae:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			TEXTOUT_INT(tempint);
    87b2:	ce 01       	movw	r24, r28
    87b4:	61 e2       	ldi	r22, 0x21	; 33
    87b6:	72 e0       	ldi	r23, 0x02	; 2
    87b8:	4a e0       	ldi	r20, 0x0A	; 10
    87ba:	50 e0       	ldi	r21, 0x00	; 0
    87bc:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    87c0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
			
			if(forced_measure)
    87c4:	80 91 2b 01 	lds	r24, 0x012B
    87c8:	88 23       	and	r24, r24
    87ca:	39 f1       	breq	.+78     	; 0x881a <sequence_run+0x1e4>
			{
				forced_measure=FALSE;
    87cc:	10 92 2b 01 	sts	0x012B, r1
				finished=TRUE;
				TEXTOUT_P(PSTR("\r\nSelecting "));
    87d0:	89 ed       	ldi	r24, 0xD9	; 217
    87d2:	99 e0       	ldi	r25, 0x09	; 9
    87d4:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				if(tempint < (settings_ram.threshold_night + settings_ram.threshold_day)/2)
    87d8:	80 91 39 02 	lds	r24, 0x0239
    87dc:	90 91 3a 02 	lds	r25, 0x023A
    87e0:	20 91 37 02 	lds	r18, 0x0237
    87e4:	30 91 38 02 	lds	r19, 0x0238
    87e8:	82 0f       	add	r24, r18
    87ea:	93 1f       	adc	r25, r19
    87ec:	96 95       	lsr	r25
    87ee:	87 95       	ror	r24
    87f0:	c8 17       	cp	r28, r24
    87f2:	d9 07       	cpc	r29, r25
    87f4:	38 f4       	brcc	.+14     	; 0x8804 <sequence_run+0x1ce>
				{
					sequence_index = settings_ram.sequence_auto_night;
    87f6:	80 91 33 02 	lds	r24, 0x0233
    87fa:	80 93 1c 02 	sts	0x021C, r24
					TEXTOUT_P(PSTR("night "));
    87fe:	82 ed       	ldi	r24, 0xD2	; 210
    8800:	99 e0       	ldi	r25, 0x09	; 9
    8802:	06 c0       	rjmp	.+12     	; 0x8810 <sequence_run+0x1da>
				}
				else
				{
					sequence_index = settings_ram.sequence_auto_day;
    8804:	80 91 34 02 	lds	r24, 0x0234
    8808:	80 93 1c 02 	sts	0x021C, r24
					TEXTOUT_P(PSTR("day "));
    880c:	8d ec       	ldi	r24, 0xCD	; 205
    880e:	99 e0       	ldi	r25, 0x09	; 9
    8810:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
				};
				TEXTOUT_P(PSTR(" sequence "));
    8814:	82 ec       	ldi	r24, 0xC2	; 194
    8816:	99 e0       	ldi	r25, 0x09	; 9
    8818:	17 c0       	rjmp	.+46     	; 0x8848 <sequence_run+0x212>
				TEXTOUT_INT(sequence_index);
			}
			else
			{
				if(sequence_info[sequence_index].mode == SEQUENCE_MODE_DAY)
    881a:	e0 91 1c 02 	lds	r30, 0x021C
    881e:	f0 e0       	ldi	r31, 0x00	; 0
    8820:	ee 0f       	add	r30, r30
    8822:	ff 1f       	adc	r31, r31
    8824:	ed 5d       	subi	r30, 0xDD	; 221
    8826:	fe 4f       	sbci	r31, 0xFE	; 254
    8828:	80 81       	ld	r24, Z
    882a:	88 23       	and	r24, r24
    882c:	f9 f4       	brne	.+62     	; 0x886c <sequence_run+0x236>
				{
					if(tempint < settings_ram.threshold_night)
    882e:	80 91 37 02 	lds	r24, 0x0237
    8832:	90 91 38 02 	lds	r25, 0x0238
    8836:	c8 17       	cp	r28, r24
    8838:	d9 07       	cpc	r29, r25
    883a:	a8 f4       	brcc	.+42     	; 0x8866 <sequence_run+0x230>
					{
						sequence_index = settings_ram.sequence_auto_night;
    883c:	80 91 33 02 	lds	r24, 0x0233
    8840:	80 93 1c 02 	sts	0x021C, r24
						finished=TRUE;
						TEXTOUT_P(PSTR("\r\nSelecting night sequence "));
    8844:	86 ea       	ldi	r24, 0xA6	; 166
    8846:	99 e0       	ldi	r25, 0x09	; 9
    8848:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
						TEXTOUT_INT(sequence_index);
    884c:	80 91 1c 02 	lds	r24, 0x021C
    8850:	90 e0       	ldi	r25, 0x00	; 0
    8852:	61 e2       	ldi	r22, 0x21	; 33
    8854:	72 e0       	ldi	r23, 0x02	; 2
    8856:	4a e0       	ldi	r20, 0x0A	; 10
    8858:	50 e0       	ldi	r21, 0x00	; 0
    885a:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    885e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
    8862:	11 e0       	ldi	r17, 0x01	; 1
    8864:	16 c0       	rjmp	.+44     	; 0x8892 <sequence_run+0x25c>
					}
					else
						TEXTOUT_P(PSTR("(still day)"));
    8866:	8a e9       	ldi	r24, 0x9A	; 154
    8868:	99 e0       	ldi	r25, 0x09	; 9
    886a:	10 c0       	rjmp	.+32     	; 0x888c <sequence_run+0x256>
				}
				else
				{
					if(tempint > settings_ram.threshold_day)
    886c:	80 91 39 02 	lds	r24, 0x0239
    8870:	90 91 3a 02 	lds	r25, 0x023A
    8874:	8c 17       	cp	r24, r28
    8876:	9d 07       	cpc	r25, r29
    8878:	38 f4       	brcc	.+14     	; 0x8888 <sequence_run+0x252>
					{
						sequence_index = settings_ram.sequence_auto_day;
    887a:	80 91 34 02 	lds	r24, 0x0234
    887e:	80 93 1c 02 	sts	0x021C, r24
						finished=TRUE;
						TEXTOUT_P(PSTR("\r\nSelecting day sequence "));
    8882:	80 e8       	ldi	r24, 0x80	; 128
    8884:	99 e0       	ldi	r25, 0x09	; 9
    8886:	e0 cf       	rjmp	.-64     	; 0x8848 <sequence_run+0x212>
						TEXTOUT_INT(sequence_index);
					}
					else
						TEXTOUT_P(PSTR("(still night)"));
    8888:	82 e7       	ldi	r24, 0x72	; 114
    888a:	99 e0       	ldi	r25, 0x09	; 9
    888c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
    8890:	10 e0       	ldi	r17, 0x00	; 0
				};
			};
			TEXTOUT_P(PSTR("\r\n"));
    8892:	8f e6       	ldi	r24, 0x6F	; 111
    8894:	99 e0       	ldi	r25, 0x09	; 9
    8896:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			
			//if we changed the current sequence index, display it 
			if(finished)
    889a:	11 23       	and	r17, r17
    889c:	e1 f0       	breq	.+56     	; 0x88d6 <sequence_run+0x2a0>
			{
				led_framerate(100);
    889e:	84 e6       	ldi	r24, 0x64	; 100
    88a0:	90 e0       	ldi	r25, 0x00	; 0
    88a2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
				led_plane_intensity_all(255);	
    88a6:	8f ef       	ldi	r24, 0xFF	; 255
    88a8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
				power_vled_set(255);
    88ac:	8f ef       	ldi	r24, 0xFF	; 255
    88ae:	0e 94 39 40 	call	0x8072	; 0x8072 <power_vled_set>
				menu_show();
    88b2:	0e 94 ee 41 	call	0x83dc	; 0x83dc <menu_show>
				time = (unsigned int)(0.5/TIMER_TICK);
    88b6:	70 92 2c 02 	sts	0x022C, r7
    88ba:	60 92 2b 02 	sts	0x022B, r6
    88be:	02 c0       	rjmp	.+4      	; 0x88c4 <sequence_run+0x28e>
				while(time)
					main_fly();
    88c0:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
				led_framerate(100);
				led_plane_intensity_all(255);	
				power_vled_set(255);
				menu_show();
				time = (unsigned int)(0.5/TIMER_TICK);
				while(time)
    88c4:	80 91 2b 02 	lds	r24, 0x022B
    88c8:	90 91 2c 02 	lds	r25, 0x022C
    88cc:	89 2b       	or	r24, r25
    88ce:	c1 f7       	brne	.-16     	; 0x88c0 <sequence_run+0x28a>
    88d0:	dd 24       	eor	r13, r13
    88d2:	d3 94       	inc	r13
    88d4:	10 c1       	rjmp	.+544    	; 0x8af6 <sequence_run+0x4c0>
		
		if(!finished)
		{
			//Determine time to display pattern
			//Rotation enabled?
			if(settings_ram.sequence_settings[sequence_index].rotation)
    88d6:	20 91 1c 02 	lds	r18, 0x021C
    88da:	82 2f       	mov	r24, r18
    88dc:	90 e0       	ldi	r25, 0x00	; 0
    88de:	fc 01       	movw	r30, r24
    88e0:	ee 0f       	add	r30, r30
    88e2:	ff 1f       	adc	r31, r31
    88e4:	e8 0f       	add	r30, r24
    88e6:	f9 1f       	adc	r31, r25
    88e8:	ef 5c       	subi	r30, 0xCF	; 207
    88ea:	fd 4f       	sbci	r31, 0xFD	; 253
    88ec:	83 85       	ldd	r24, Z+11	; 0x0b
    88ee:	88 23       	and	r24, r24
    88f0:	39 f1       	breq	.+78     	; 0x8940 <sequence_run+0x30a>
			{
				//Lookup pattern duration
				switch(sequence_index)
    88f2:	21 30       	cpi	r18, 0x01	; 1
    88f4:	71 f0       	breq	.+28     	; 0x8912 <sequence_run+0x2dc>
    88f6:	21 30       	cpi	r18, 0x01	; 1
    88f8:	28 f0       	brcs	.+10     	; 0x8904 <sequence_run+0x2ce>
    88fa:	22 30       	cpi	r18, 0x02	; 2
    88fc:	99 f0       	breq	.+38     	; 0x8924 <sequence_run+0x2ee>
    88fe:	23 30       	cpi	r18, 0x03	; 3
    8900:	51 f5       	brne	.+84     	; 0x8956 <sequence_run+0x320>
    8902:	17 c0       	rjmp	.+46     	; 0x8932 <sequence_run+0x2fc>
				{
					case 0:	pattern_duration_set(sequence_0_times[pattern_index]); break;
    8904:	eb 2d       	mov	r30, r11
    8906:	f0 e0       	ldi	r31, 0x00	; 0
    8908:	ee 0f       	add	r30, r30
    890a:	ff 1f       	adc	r31, r31
    890c:	e4 5d       	subi	r30, 0xD4	; 212
    890e:	fe 4f       	sbci	r31, 0xFE	; 254
    8910:	06 c0       	rjmp	.+12     	; 0x891e <sequence_run+0x2e8>
					case 1:	pattern_duration_set(sequence_1_times[pattern_index]); break;
    8912:	eb 2d       	mov	r30, r11
    8914:	f0 e0       	ldi	r31, 0x00	; 0
    8916:	ee 0f       	add	r30, r30
    8918:	ff 1f       	adc	r31, r31
    891a:	ea 5b       	subi	r30, 0xBA	; 186
    891c:	fe 4f       	sbci	r31, 0xFE	; 254
    891e:	80 81       	ld	r24, Z
    8920:	91 81       	ldd	r25, Z+1	; 0x01
    8922:	17 c0       	rjmp	.+46     	; 0x8952 <sequence_run+0x31c>
					case 2:	pattern_duration_set(sequence_2_times[pattern_index]); break;
    8924:	eb 2d       	mov	r30, r11
    8926:	f0 e0       	ldi	r31, 0x00	; 0
    8928:	ee 0f       	add	r30, r30
    892a:	ff 1f       	adc	r31, r31
    892c:	ec 5a       	subi	r30, 0xAC	; 172
    892e:	fe 4f       	sbci	r31, 0xFE	; 254
    8930:	f6 cf       	rjmp	.-20     	; 0x891e <sequence_run+0x2e8>
					case 3:	pattern_duration_set(sequence_3_times[pattern_index]); break;
    8932:	eb 2d       	mov	r30, r11
    8934:	f0 e0       	ldi	r31, 0x00	; 0
    8936:	ee 0f       	add	r30, r30
    8938:	ff 1f       	adc	r31, r31
    893a:	e0 5a       	subi	r30, 0xA0	; 160
    893c:	fe 4f       	sbci	r31, 0xFE	; 254
    893e:	ef cf       	rjmp	.-34     	; 0x891e <sequence_run+0x2e8>
			}
			else
			//No rotation
			{
				//Light sensing enabled?
				if(mode_auto)
    8940:	80 91 20 02 	lds	r24, 0x0220
    8944:	88 23       	and	r24, r24
    8946:	19 f0       	breq	.+6      	; 0x894e <sequence_run+0x318>
					//Yes, expire after 30sec to measure light
					pattern_duration_set(30/TIMER_TICK);
    8948:	87 e2       	ldi	r24, 0x27	; 39
    894a:	97 e0       	ldi	r25, 0x07	; 7
    894c:	02 c0       	rjmp	.+4      	; 0x8952 <sequence_run+0x31c>
				else
					//No, run until pattern_break() called
					pattern_duration_set(0);
    894e:	80 e0       	ldi	r24, 0x00	; 0
    8950:	90 e0       	ldi	r25, 0x00	; 0
    8952:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <pattern_duration_set>
			};
			
			//Display pattern
			TEXTOUT_P(PSTR("Pattern "));
    8956:	86 e6       	ldi	r24, 0x66	; 102
    8958:	99 e0       	ldi	r25, 0x09	; 9
    895a:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			TEXTOUT_INT(pattern_index);
    895e:	8b 2d       	mov	r24, r11
    8960:	90 e0       	ldi	r25, 0x00	; 0
    8962:	61 e2       	ldi	r22, 0x21	; 33
    8964:	72 e0       	ldi	r23, 0x02	; 2
    8966:	4a e0       	ldi	r20, 0x0A	; 10
    8968:	50 e0       	ldi	r21, 0x00	; 0
    896a:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    896e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
			TEXTOUT_P(PSTR("\r\n"));
    8972:	83 e6       	ldi	r24, 0x63	; 99
    8974:	99 e0       	ldi	r25, 0x09	; 9
    8976:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
			switch(sequence_index)
    897a:	80 91 1c 02 	lds	r24, 0x021C
    897e:	81 30       	cpi	r24, 0x01	; 1
    8980:	09 f4       	brne	.+2      	; 0x8984 <sequence_run+0x34e>
    8982:	55 c0       	rjmp	.+170    	; 0x8a2e <sequence_run+0x3f8>
    8984:	81 30       	cpi	r24, 0x01	; 1
    8986:	38 f0       	brcs	.+14     	; 0x8996 <sequence_run+0x360>
    8988:	82 30       	cpi	r24, 0x02	; 2
    898a:	09 f4       	brne	.+2      	; 0x898e <sequence_run+0x358>
    898c:	74 c0       	rjmp	.+232    	; 0x8a76 <sequence_run+0x440>
    898e:	83 30       	cpi	r24, 0x03	; 3
    8990:	09 f0       	breq	.+2      	; 0x8994 <sequence_run+0x35e>
    8992:	b0 c0       	rjmp	.+352    	; 0x8af4 <sequence_run+0x4be>
    8994:	9e c0       	rjmp	.+316    	; 0x8ad2 <sequence_run+0x49c>
// Function to display a pattern from sequence
// Don't forget to break; each case!!
static void sequence_0_show(unsigned char index)
{
	//Display pattern
	switch(index)
    8996:	86 e0       	ldi	r24, 0x06	; 6
    8998:	b8 16       	cp	r11, r24
    899a:	09 f4       	brne	.+2      	; 0x899e <sequence_run+0x368>
    899c:	66 c0       	rjmp	.+204    	; 0x8a6a <sequence_run+0x434>
    899e:	8b 15       	cp	r24, r11
    89a0:	a8 f0       	brcs	.+42     	; 0x89cc <sequence_run+0x396>
    89a2:	82 e0       	ldi	r24, 0x02	; 2
    89a4:	b8 16       	cp	r11, r24
    89a6:	09 f4       	brne	.+2      	; 0x89aa <sequence_run+0x374>
    89a8:	5a c0       	rjmp	.+180    	; 0x8a5e <sequence_run+0x428>
    89aa:	8b 15       	cp	r24, r11
    89ac:	38 f0       	brcs	.+14     	; 0x89bc <sequence_run+0x386>
    89ae:	bb 20       	and	r11, r11
    89b0:	31 f1       	breq	.+76     	; 0x89fe <sequence_run+0x3c8>
    89b2:	81 e0       	ldi	r24, 0x01	; 1
    89b4:	b8 16       	cp	r11, r24
    89b6:	09 f0       	breq	.+2      	; 0x89ba <sequence_run+0x384>
    89b8:	9d c0       	rjmp	.+314    	; 0x8af4 <sequence_run+0x4be>
    89ba:	28 c0       	rjmp	.+80     	; 0x8a0c <sequence_run+0x3d6>
    89bc:	84 e0       	ldi	r24, 0x04	; 4
    89be:	b8 16       	cp	r11, r24
    89c0:	09 f4       	brne	.+2      	; 0x89c4 <sequence_run+0x38e>
    89c2:	96 c0       	rjmp	.+300    	; 0x8af0 <sequence_run+0x4ba>
    89c4:	8b 15       	cp	r24, r11
    89c6:	08 f4       	brcc	.+2      	; 0x89ca <sequence_run+0x394>
    89c8:	8d c0       	rjmp	.+282    	; 0x8ae4 <sequence_run+0x4ae>
    89ca:	4c c0       	rjmp	.+152    	; 0x8a64 <sequence_run+0x42e>
    89cc:	89 e0       	ldi	r24, 0x09	; 9
    89ce:	b8 16       	cp	r11, r24
    89d0:	09 f4       	brne	.+2      	; 0x89d4 <sequence_run+0x39e>
    89d2:	8b c0       	rjmp	.+278    	; 0x8aea <sequence_run+0x4b4>
    89d4:	8b 15       	cp	r24, r11
    89d6:	40 f0       	brcs	.+16     	; 0x89e8 <sequence_run+0x3b2>
    89d8:	87 e0       	ldi	r24, 0x07	; 7
    89da:	b8 16       	cp	r11, r24
    89dc:	d1 f0       	breq	.+52     	; 0x8a12 <sequence_run+0x3dc>
    89de:	88 e0       	ldi	r24, 0x08	; 8
    89e0:	b8 16       	cp	r11, r24
    89e2:	09 f0       	breq	.+2      	; 0x89e6 <sequence_run+0x3b0>
    89e4:	87 c0       	rjmp	.+270    	; 0x8af4 <sequence_run+0x4be>
    89e6:	18 c0       	rjmp	.+48     	; 0x8a18 <sequence_run+0x3e2>
    89e8:	8b e0       	ldi	r24, 0x0B	; 11
    89ea:	b8 16       	cp	r11, r24
    89ec:	09 f4       	brne	.+2      	; 0x89f0 <sequence_run+0x3ba>
    89ee:	40 c0       	rjmp	.+128    	; 0x8a70 <sequence_run+0x43a>
    89f0:	b8 16       	cp	r11, r24
    89f2:	a8 f0       	brcs	.+42     	; 0x8a1e <sequence_run+0x3e8>
    89f4:	8c e0       	ldi	r24, 0x0C	; 12
    89f6:	b8 16       	cp	r11, r24
    89f8:	09 f0       	breq	.+2      	; 0x89fc <sequence_run+0x3c6>
    89fa:	7c c0       	rjmp	.+248    	; 0x8af4 <sequence_run+0x4be>
    89fc:	15 c0       	rjmp	.+42     	; 0x8a28 <sequence_run+0x3f2>
	{
		case 0: pattern_waveup( 255, 1, 32, 200);break;
    89fe:	8f ef       	ldi	r24, 0xFF	; 255
    8a00:	90 e0       	ldi	r25, 0x00	; 0
    8a02:	61 e0       	ldi	r22, 0x01	; 1
    8a04:	70 e0       	ldi	r23, 0x00	; 0
    8a06:	40 e2       	ldi	r20, 0x20	; 32
    8a08:	50 e0       	ldi	r21, 0x00	; 0
    8a0a:	5e c0       	rjmp	.+188    	; 0x8ac8 <sequence_run+0x492>
		case 1: pattern_diamond_scroll();break;
    8a0c:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <pattern_diamond_scroll>
    8a10:	71 c0       	rjmp	.+226    	; 0x8af4 <sequence_run+0x4be>
		case 2: pattern_popcorn();break;
		case 3: pattern_rotate1();break;
		case 4: pattern_rain1();break;
		case 5: pattern_screw();break;
		case 6: pattern_cube_stretch();break;
		case 7: pattern_fountain();break;
    8a12:	0e 94 cd 2b 	call	0x579a	; 0x579a <pattern_fountain>
    8a16:	6e c0       	rjmp	.+220    	; 0x8af4 <sequence_run+0x4be>
		case 8: pattern_spinface();break;
    8a18:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <pattern_spinface>
    8a1c:	6b c0       	rjmp	.+214    	; 0x8af4 <sequence_run+0x4be>
		case 9: pattern_flapsheet();break;
		case 10: pattern_text1_P(PSTR("Cuboid        "));break;
    8a1e:	84 e7       	ldi	r24, 0x74	; 116
    8a20:	9a e0       	ldi	r25, 0x0A	; 10
    8a22:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <pattern_text1_P>
    8a26:	66 c0       	rjmp	.+204    	; 0x8af4 <sequence_run+0x4be>
		case 11: pattern_noise_scroll();break;
		case 12: pattern_fireworks();break;
    8a28:	0e 94 97 2a 	call	0x552e	; 0x552e <pattern_fireworks>
    8a2c:	63 c0       	rjmp	.+198    	; 0x8af4 <sequence_run+0x4be>

//function to display a pattern from sequence
static void sequence_1_show(unsigned char index)
{
	//Display pattern
	switch(index)
    8a2e:	83 e0       	ldi	r24, 0x03	; 3
    8a30:	b8 16       	cp	r11, r24
    8a32:	09 f4       	brne	.+2      	; 0x8a36 <sequence_run+0x400>
    8a34:	57 c0       	rjmp	.+174    	; 0x8ae4 <sequence_run+0x4ae>
    8a36:	8b 15       	cp	r24, r11
    8a38:	38 f0       	brcs	.+14     	; 0x8a48 <sequence_run+0x412>
    8a3a:	81 e0       	ldi	r24, 0x01	; 1
    8a3c:	b8 16       	cp	r11, r24
    8a3e:	91 f0       	breq	.+36     	; 0x8a64 <sequence_run+0x42e>
    8a40:	8b 15       	cp	r24, r11
    8a42:	08 f4       	brcc	.+2      	; 0x8a46 <sequence_run+0x410>
    8a44:	55 c0       	rjmp	.+170    	; 0x8af0 <sequence_run+0x4ba>
    8a46:	0b c0       	rjmp	.+22     	; 0x8a5e <sequence_run+0x428>
    8a48:	85 e0       	ldi	r24, 0x05	; 5
    8a4a:	b8 16       	cp	r11, r24
    8a4c:	09 f4       	brne	.+2      	; 0x8a50 <sequence_run+0x41a>
    8a4e:	4d c0       	rjmp	.+154    	; 0x8aea <sequence_run+0x4b4>
    8a50:	b8 16       	cp	r11, r24
    8a52:	58 f0       	brcs	.+22     	; 0x8a6a <sequence_run+0x434>
    8a54:	86 e0       	ldi	r24, 0x06	; 6
    8a56:	b8 16       	cp	r11, r24
    8a58:	09 f0       	breq	.+2      	; 0x8a5c <sequence_run+0x426>
    8a5a:	4c c0       	rjmp	.+152    	; 0x8af4 <sequence_run+0x4be>
    8a5c:	09 c0       	rjmp	.+18     	; 0x8a70 <sequence_run+0x43a>
	{
		case 0: pattern_popcorn();break;
    8a5e:	0e 94 0a 2e 	call	0x5c14	; 0x5c14 <pattern_popcorn>
    8a62:	48 c0       	rjmp	.+144    	; 0x8af4 <sequence_run+0x4be>
		case 1: pattern_rotate1();break;
    8a64:	0e 94 ac 30 	call	0x6158	; 0x6158 <pattern_rotate1>
    8a68:	45 c0       	rjmp	.+138    	; 0x8af4 <sequence_run+0x4be>
		case 2: pattern_rain1();break;
		case 3: pattern_screw();break;
		case 4: pattern_cube_stretch();break;
    8a6a:	0e 94 76 27 	call	0x4eec	; 0x4eec <pattern_cube_stretch>
    8a6e:	42 c0       	rjmp	.+132    	; 0x8af4 <sequence_run+0x4be>
		case 5: pattern_flapsheet();break;
		case 6: pattern_noise_scroll();break;
    8a70:	0e 94 64 30 	call	0x60c8	; 0x60c8 <pattern_noise_scroll>
    8a74:	3f c0       	rjmp	.+126    	; 0x8af4 <sequence_run+0x4be>

//function to display a pattern from sequence
static void sequence_2_show(unsigned char index)
{
	//Display pattern
	switch(index)
    8a76:	82 e0       	ldi	r24, 0x02	; 2
    8a78:	b8 16       	cp	r11, r24
    8a7a:	b9 f0       	breq	.+46     	; 0x8aaa <sequence_run+0x474>
    8a7c:	8b 15       	cp	r24, r11
    8a7e:	30 f0       	brcs	.+12     	; 0x8a8c <sequence_run+0x456>
    8a80:	bb 20       	and	r11, r11
    8a82:	69 f0       	breq	.+26     	; 0x8a9e <sequence_run+0x468>
    8a84:	81 e0       	ldi	r24, 0x01	; 1
    8a86:	b8 16       	cp	r11, r24
    8a88:	a9 f5       	brne	.+106    	; 0x8af4 <sequence_run+0x4be>
    8a8a:	0c c0       	rjmp	.+24     	; 0x8aa4 <sequence_run+0x46e>
    8a8c:	84 e0       	ldi	r24, 0x04	; 4
    8a8e:	b8 16       	cp	r11, r24
    8a90:	91 f0       	breq	.+36     	; 0x8ab6 <sequence_run+0x480>
    8a92:	b8 16       	cp	r11, r24
    8a94:	68 f0       	brcs	.+26     	; 0x8ab0 <sequence_run+0x47a>
    8a96:	85 e0       	ldi	r24, 0x05	; 5
    8a98:	b8 16       	cp	r11, r24
    8a9a:	61 f5       	brne	.+88     	; 0x8af4 <sequence_run+0x4be>
    8a9c:	0f c0       	rjmp	.+30     	; 0x8abc <sequence_run+0x486>
	{
		case 0:	pattern_wirecube(); break;
    8a9e:	0e 94 3d 3a 	call	0x747a	; 0x747a <pattern_wirecube>
    8aa2:	28 c0       	rjmp	.+80     	; 0x8af4 <sequence_run+0x4be>
		case 1:	pattern_wirecubediag(); break;
    8aa4:	0e 94 a2 38 	call	0x7144	; 0x7144 <pattern_wirecubediag>
    8aa8:	25 c0       	rjmp	.+74     	; 0x8af4 <sequence_run+0x4be>
		case 2: pattern_tesseract();break;
    8aaa:	0e 94 ae 3b 	call	0x775c	; 0x775c <pattern_tesseract>
    8aae:	22 c0       	rjmp	.+68     	; 0x8af4 <sequence_run+0x4be>
		case 3:	pattern_cubewalls(); break;
    8ab0:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <pattern_cubewalls>
    8ab4:	1f c0       	rjmp	.+62     	; 0x8af4 <sequence_run+0x4be>
		case 4:	pattern_diamond(); break;
    8ab6:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <pattern_diamond>
    8aba:	1c c0       	rjmp	.+56     	; 0x8af4 <sequence_run+0x4be>
		case 5: pattern_waveup( 255, 10, 64, 200);break;
    8abc:	8f ef       	ldi	r24, 0xFF	; 255
    8abe:	90 e0       	ldi	r25, 0x00	; 0
    8ac0:	6a e0       	ldi	r22, 0x0A	; 10
    8ac2:	70 e0       	ldi	r23, 0x00	; 0
    8ac4:	40 e4       	ldi	r20, 0x40	; 64
    8ac6:	50 e0       	ldi	r21, 0x00	; 0
    8ac8:	28 ec       	ldi	r18, 0xC8	; 200
    8aca:	30 e0       	ldi	r19, 0x00	; 0
    8acc:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <pattern_waveup>
    8ad0:	11 c0       	rjmp	.+34     	; 0x8af4 <sequence_run+0x4be>

//function to display a pattern from sequence
static void sequence_3_show(unsigned char index)
{
	//Display pattern
	switch(index)
    8ad2:	81 e0       	ldi	r24, 0x01	; 1
    8ad4:	b8 16       	cp	r11, r24
    8ad6:	49 f0       	breq	.+18     	; 0x8aea <sequence_run+0x4b4>
    8ad8:	b8 16       	cp	r11, r24
    8ada:	20 f0       	brcs	.+8      	; 0x8ae4 <sequence_run+0x4ae>
    8adc:	82 e0       	ldi	r24, 0x02	; 2
    8ade:	b8 16       	cp	r11, r24
    8ae0:	49 f4       	brne	.+18     	; 0x8af4 <sequence_run+0x4be>
    8ae2:	06 c0       	rjmp	.+12     	; 0x8af0 <sequence_run+0x4ba>
	{
		case 0:	pattern_screw(); break;
    8ae4:	0e 94 0c 32 	call	0x6418	; 0x6418 <pattern_screw>
    8ae8:	05 c0       	rjmp	.+10     	; 0x8af4 <sequence_run+0x4be>
		case 1:	pattern_flapsheet(); break;
    8aea:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <pattern_flapsheet>
    8aee:	02 c0       	rjmp	.+4      	; 0x8af4 <sequence_run+0x4be>
		case 2:	pattern_rain1(); break;
    8af0:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <pattern_rain1>
    8af4:	dd 24       	eor	r13, r13
			};
			
		};
		
		//Exit requested?
		if(seq_quit)
    8af6:	80 91 1b 02 	lds	r24, 0x021B
    8afa:	88 23       	and	r24, r24
    8afc:	09 f0       	breq	.+2      	; 0x8b00 <sequence_run+0x4ca>
    8afe:	14 c1       	rjmp	.+552    	; 0x8d28 <sequence_run+0x6f2>
			finished=TRUE;
		else
		{
			//Skip pressed?
			if(button_skip)
    8b00:	80 91 1d 02 	lds	r24, 0x021D
    8b04:	88 23       	and	r24, r24
    8b06:	11 f4       	brne	.+4      	; 0x8b0c <sequence_run+0x4d6>
    8b08:	aa 24       	eor	r10, r10
    8b0a:	91 c0       	rjmp	.+290    	; 0x8c2e <sequence_run+0x5f8>
			{
				button_skip=FALSE;
    8b0c:	10 92 1d 02 	sts	0x021D, r1
				//Rotation enabled?
				if(settings_ram.sequence_settings[sequence_index].rotation)
    8b10:	80 91 1c 02 	lds	r24, 0x021C
    8b14:	28 2f       	mov	r18, r24
    8b16:	30 e0       	ldi	r19, 0x00	; 0
    8b18:	f9 01       	movw	r30, r18
    8b1a:	ee 0f       	add	r30, r30
    8b1c:	ff 1f       	adc	r31, r31
    8b1e:	df 01       	movw	r26, r30
    8b20:	a2 0f       	add	r26, r18
    8b22:	b3 1f       	adc	r27, r19
    8b24:	af 5c       	subi	r26, 0xCF	; 207
    8b26:	bd 4f       	sbci	r27, 0xFD	; 253
    8b28:	1b 96       	adiw	r26, 0x0b	; 11
    8b2a:	8c 91       	ld	r24, X
    8b2c:	1b 97       	sbiw	r26, 0x0b	; 11
    8b2e:	88 23       	and	r24, r24
    8b30:	09 f4       	brne	.+2      	; 0x8b34 <sequence_run+0x4fe>
    8b32:	58 c0       	rjmp	.+176    	; 0x8be4 <sequence_run+0x5ae>
				{
					//Yes, disable it, display hold
					settings_ram.sequence_settings[sequence_index].rotation = FALSE;
    8b34:	1b 96       	adiw	r26, 0x0b	; 11
    8b36:	1c 92       	st	X, r1
    8b38:	1b 97       	sbiw	r26, 0x0b	; 11
					settings_ram.sequence_settings[sequence_index].preferred = pattern_index;
    8b3a:	1c 96       	adiw	r26, 0x0c	; 12
    8b3c:	bc 92       	st	X, r11
					TEXTOUT_P(PSTR("Rotation disabled\r\nPreferred pattern = "));
    8b3e:	8b e3       	ldi	r24, 0x3B	; 59
    8b40:	99 e0       	ldi	r25, 0x09	; 9
    8b42:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT_INT(pattern_index);
    8b46:	8b 2d       	mov	r24, r11
    8b48:	90 e0       	ldi	r25, 0x00	; 0
    8b4a:	61 e2       	ldi	r22, 0x21	; 33
    8b4c:	72 e0       	ldi	r23, 0x02	; 2
    8b4e:	4a e0       	ldi	r20, 0x0A	; 10
    8b50:	50 e0       	ldi	r21, 0x00	; 0
    8b52:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8b56:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR("\r\n"));
    8b5a:	88 e3       	ldi	r24, 0x38	; 56
    8b5c:	99 e0       	ldi	r25, 0x09	; 9
    8b5e:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
//********************************************************************************************************

//Display STOP symbol
static void show_hold(void)
{
	led_framerate(100);
    8b62:	84 e6       	ldi	r24, 0x64	; 100
    8b64:	90 e0       	ldi	r25, 0x00	; 0
    8b66:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_blank();
    8b6a:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
	led_plane_intensity_all(255);
    8b6e:	8f ef       	ldi	r24, 0xFF	; 255
    8b70:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>

	led_line(2, 0, 0, 5, 0, 0, TRUE);
    8b74:	82 e0       	ldi	r24, 0x02	; 2
    8b76:	90 e0       	ldi	r25, 0x00	; 0
    8b78:	60 e0       	ldi	r22, 0x00	; 0
    8b7a:	70 e0       	ldi	r23, 0x00	; 0
    8b7c:	40 e0       	ldi	r20, 0x00	; 0
    8b7e:	50 e0       	ldi	r21, 0x00	; 0
    8b80:	25 e0       	ldi	r18, 0x05	; 5
    8b82:	30 e0       	ldi	r19, 0x00	; 0
    8b84:	00 e0       	ldi	r16, 0x00	; 0
    8b86:	10 e0       	ldi	r17, 0x00	; 0
    8b88:	ee 24       	eor	r14, r14
    8b8a:	ff 24       	eor	r15, r15
    8b8c:	cc 24       	eor	r12, r12
    8b8e:	c3 94       	inc	r12
    8b90:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(2, 7, 0, 5, 7, 0, TRUE);
    8b94:	82 e0       	ldi	r24, 0x02	; 2
    8b96:	90 e0       	ldi	r25, 0x00	; 0
    8b98:	67 e0       	ldi	r22, 0x07	; 7
    8b9a:	70 e0       	ldi	r23, 0x00	; 0
    8b9c:	40 e0       	ldi	r20, 0x00	; 0
    8b9e:	50 e0       	ldi	r21, 0x00	; 0
    8ba0:	25 e0       	ldi	r18, 0x05	; 5
    8ba2:	30 e0       	ldi	r19, 0x00	; 0
    8ba4:	07 e0       	ldi	r16, 0x07	; 7
    8ba6:	10 e0       	ldi	r17, 0x00	; 0
    8ba8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(7, 2, 0, 7, 5, 0, TRUE);
    8bac:	87 e0       	ldi	r24, 0x07	; 7
    8bae:	90 e0       	ldi	r25, 0x00	; 0
    8bb0:	62 e0       	ldi	r22, 0x02	; 2
    8bb2:	70 e0       	ldi	r23, 0x00	; 0
    8bb4:	40 e0       	ldi	r20, 0x00	; 0
    8bb6:	50 e0       	ldi	r21, 0x00	; 0
    8bb8:	27 e0       	ldi	r18, 0x07	; 7
    8bba:	30 e0       	ldi	r19, 0x00	; 0
    8bbc:	05 e0       	ldi	r16, 0x05	; 5
    8bbe:	10 e0       	ldi	r17, 0x00	; 0
    8bc0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_line(0, 2, 0, 0, 5, 0, TRUE);	
    8bc4:	80 e0       	ldi	r24, 0x00	; 0
    8bc6:	90 e0       	ldi	r25, 0x00	; 0
    8bc8:	62 e0       	ldi	r22, 0x02	; 2
    8bca:	70 e0       	ldi	r23, 0x00	; 0
    8bcc:	40 e0       	ldi	r20, 0x00	; 0
    8bce:	50 e0       	ldi	r21, 0x00	; 0
    8bd0:	20 e0       	ldi	r18, 0x00	; 0
    8bd2:	30 e0       	ldi	r19, 0x00	; 0
    8bd4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	
	led_waitframe(50);
    8bd8:	82 e3       	ldi	r24, 0x32	; 50
    8bda:	90 e0       	ldi	r25, 0x00	; 0
    8bdc:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    8be0:	aa 24       	eor	r10, r10
    8be2:	23 c0       	rjmp	.+70     	; 0x8c2a <sequence_run+0x5f4>
					show_hold();
				}
				else
				{
					//No, skip to next pattern
					pattern_index++;
    8be4:	b3 94       	inc	r11
					if(pattern_index == sequence_info[sequence_index].size)
    8be6:	ed 5d       	subi	r30, 0xDD	; 221
    8be8:	fe 4f       	sbci	r31, 0xFE	; 254
    8bea:	81 81       	ldd	r24, Z+1	; 0x01
    8bec:	b8 16       	cp	r11, r24
    8bee:	09 f4       	brne	.+2      	; 0x8bf2 <sequence_run+0x5bc>
    8bf0:	bb 24       	eor	r11, r11
						pattern_index=0;					
					
					settings_ram.sequence_settings[sequence_index].preferred = pattern_index;
    8bf2:	f9 01       	movw	r30, r18
    8bf4:	ee 0f       	add	r30, r30
    8bf6:	ff 1f       	adc	r31, r31
    8bf8:	e2 0f       	add	r30, r18
    8bfa:	f3 1f       	adc	r31, r19
    8bfc:	ef 5c       	subi	r30, 0xCF	; 207
    8bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    8c00:	b4 86       	std	Z+12, r11	; 0x0c
					
					TEXTOUT_P(PSTR("Preferred pattern = "));
    8c02:	83 e2       	ldi	r24, 0x23	; 35
    8c04:	99 e0       	ldi	r25, 0x09	; 9
    8c06:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					TEXTOUT_INT(pattern_index);
    8c0a:	8b 2d       	mov	r24, r11
    8c0c:	90 e0       	ldi	r25, 0x00	; 0
    8c0e:	61 e2       	ldi	r22, 0x21	; 33
    8c10:	72 e0       	ldi	r23, 0x02	; 2
    8c12:	4a e0       	ldi	r20, 0x0A	; 10
    8c14:	50 e0       	ldi	r21, 0x00	; 0
    8c16:	0e 94 5a 50 	call	0xa0b4	; 0xa0b4 <itoa>
    8c1a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <uart1_tx_string>
					TEXTOUT_P(PSTR("\r\n"));
    8c1e:	80 e2       	ldi	r24, 0x20	; 32
    8c20:	99 e0       	ldi	r25, 0x09	; 9
    8c22:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
    8c26:	aa 24       	eor	r10, r10
    8c28:	a3 94       	inc	r10
					
					//skip next light measurement to speed up button response
					skip_measure = TRUE;
				};
				settings_save();
    8c2a:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
			};
			
			//Rotate enable pressed? (skip button held for 1sec)
			if(button_rotate)
    8c2e:	80 91 1e 02 	lds	r24, 0x021E
    8c32:	88 23       	and	r24, r24
    8c34:	09 f4       	brne	.+2      	; 0x8c38 <sequence_run+0x602>
    8c36:	60 c0       	rjmp	.+192    	; 0x8cf8 <sequence_run+0x6c2>
			{
				button_rotate=FALSE;
    8c38:	10 92 1e 02 	sts	0x021E, r1
				if(!settings_ram.sequence_settings[sequence_index].rotation)
    8c3c:	80 91 1c 02 	lds	r24, 0x021C
    8c40:	90 e0       	ldi	r25, 0x00	; 0
    8c42:	fc 01       	movw	r30, r24
    8c44:	ee 0f       	add	r30, r30
    8c46:	ff 1f       	adc	r31, r31
    8c48:	e8 0f       	add	r30, r24
    8c4a:	f9 1f       	adc	r31, r25
    8c4c:	ef 5c       	subi	r30, 0xCF	; 207
    8c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    8c50:	83 85       	ldd	r24, Z+11	; 0x0b
    8c52:	88 23       	and	r24, r24
    8c54:	09 f0       	breq	.+2      	; 0x8c58 <sequence_run+0x622>
    8c56:	4e c0       	rjmp	.+156    	; 0x8cf4 <sequence_run+0x6be>
				{
					TEXTOUT_P(PSTR("Rotation enabled\r\n"));
    8c58:	8d e0       	ldi	r24, 0x0D	; 13
    8c5a:	99 e0       	ldi	r25, 0x09	; 9
    8c5c:	0e 94 29 0a 	call	0x1452	; 0x1452 <uart1_tx_string_P>
					settings_ram.sequence_settings[sequence_index].rotation = TRUE;
    8c60:	80 91 1c 02 	lds	r24, 0x021C
    8c64:	90 e0       	ldi	r25, 0x00	; 0
    8c66:	fc 01       	movw	r30, r24
    8c68:	ee 0f       	add	r30, r30
    8c6a:	ff 1f       	adc	r31, r31
    8c6c:	e8 0f       	add	r30, r24
    8c6e:	f9 1f       	adc	r31, r25
    8c70:	ef 5c       	subi	r30, 0xCF	; 207
    8c72:	fd 4f       	sbci	r31, 0xFD	; 253
    8c74:	53 86       	std	Z+11, r5	; 0x0b
//Display ROTATION symbol
static void show_rotate(void)
{
	unsigned char x = 0, j=0;

	led_framerate(60);
    8c76:	8c e3       	ldi	r24, 0x3C	; 60
    8c78:	90 e0       	ldi	r25, 0x00	; 0
    8c7a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <led_framerate>
	led_plane_intensity_all(255);
    8c7e:	8f ef       	ldi	r24, 0xFF	; 255
    8c80:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
    8c84:	c0 e0       	ldi	r28, 0x00	; 0
    8c86:	d0 e0       	ldi	r29, 0x00	; 0

	for(j=0; j!=1; j++)
	{
		for(x=0; x!=8; x++)
		{
			led_blank();
    8c88:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			led_line(x, 0, 0, 7-x, 7, 0, TRUE);
    8c8c:	94 01       	movw	r18, r8
    8c8e:	2c 1b       	sub	r18, r28
    8c90:	3d 0b       	sbc	r19, r29
    8c92:	ce 01       	movw	r24, r28
    8c94:	60 e0       	ldi	r22, 0x00	; 0
    8c96:	70 e0       	ldi	r23, 0x00	; 0
    8c98:	40 e0       	ldi	r20, 0x00	; 0
    8c9a:	50 e0       	ldi	r21, 0x00	; 0
    8c9c:	07 e0       	ldi	r16, 0x07	; 7
    8c9e:	10 e0       	ldi	r17, 0x00	; 0
    8ca0:	ee 24       	eor	r14, r14
    8ca2:	ff 24       	eor	r15, r15
    8ca4:	cc 24       	eor	r12, r12
    8ca6:	c3 94       	inc	r12
    8ca8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(1);
    8cac:	81 e0       	ldi	r24, 0x01	; 1
    8cae:	90 e0       	ldi	r25, 0x00	; 0
    8cb0:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    8cb4:	21 96       	adiw	r28, 0x01	; 1
	led_framerate(60);
	led_plane_intensity_all(255);

	for(j=0; j!=1; j++)
	{
		for(x=0; x!=8; x++)
    8cb6:	c8 30       	cpi	r28, 0x08	; 8
    8cb8:	d1 05       	cpc	r29, r1
    8cba:	31 f7       	brne	.-52     	; 0x8c88 <sequence_run+0x652>
    8cbc:	c0 e0       	ldi	r28, 0x00	; 0
    8cbe:	d0 e0       	ldi	r29, 0x00	; 0
			led_line(x, 0, 0, 7-x, 7, 0, TRUE);
			led_waitframe(1);
		};
		for(x=0; x!=8; x++)
		{
			led_blank();
    8cc0:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>
			led_line(7, x, 0, 0, 7-x, 0, TRUE);
    8cc4:	84 01       	movw	r16, r8
    8cc6:	0c 1b       	sub	r16, r28
    8cc8:	1d 0b       	sbc	r17, r29
    8cca:	87 e0       	ldi	r24, 0x07	; 7
    8ccc:	90 e0       	ldi	r25, 0x00	; 0
    8cce:	be 01       	movw	r22, r28
    8cd0:	40 e0       	ldi	r20, 0x00	; 0
    8cd2:	50 e0       	ldi	r21, 0x00	; 0
    8cd4:	20 e0       	ldi	r18, 0x00	; 0
    8cd6:	30 e0       	ldi	r19, 0x00	; 0
    8cd8:	ee 24       	eor	r14, r14
    8cda:	ff 24       	eor	r15, r15
    8cdc:	cc 24       	eor	r12, r12
    8cde:	c3 94       	inc	r12
    8ce0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
			led_waitframe(1);
    8ce4:	81 e0       	ldi	r24, 0x01	; 1
    8ce6:	90 e0       	ldi	r25, 0x00	; 0
    8ce8:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>
    8cec:	21 96       	adiw	r28, 0x01	; 1
		{
			led_blank();
			led_line(x, 0, 0, 7-x, 7, 0, TRUE);
			led_waitframe(1);
		};
		for(x=0; x!=8; x++)
    8cee:	c8 30       	cpi	r28, 0x08	; 8
    8cf0:	d1 05       	cpc	r29, r1
    8cf2:	31 f7       	brne	.-52     	; 0x8cc0 <sequence_run+0x68a>
				{
					TEXTOUT_P(PSTR("Rotation enabled\r\n"));
					settings_ram.sequence_settings[sequence_index].rotation = TRUE;
					show_rotate();
				};
				settings_save();
    8cf4:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
			};
			
			//Rotate patterns?
			if(settings_ram.sequence_settings[sequence_index].rotation)
    8cf8:	e0 91 1c 02 	lds	r30, 0x021C
    8cfc:	f0 e0       	ldi	r31, 0x00	; 0
    8cfe:	9f 01       	movw	r18, r30
    8d00:	22 0f       	add	r18, r18
    8d02:	33 1f       	adc	r19, r19
    8d04:	e2 0f       	add	r30, r18
    8d06:	f3 1f       	adc	r31, r19
    8d08:	ef 5c       	subi	r30, 0xCF	; 207
    8d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    8d0c:	83 85       	ldd	r24, Z+11	; 0x0b
    8d0e:	88 23       	and	r24, r24
    8d10:	41 f0       	breq	.+16     	; 0x8d22 <sequence_run+0x6ec>
			{
				pattern_index++;
    8d12:	b3 94       	inc	r11
				if(pattern_index == sequence_info[sequence_index].size)
    8d14:	f9 01       	movw	r30, r18
    8d16:	ed 5d       	subi	r30, 0xDD	; 221
    8d18:	fe 4f       	sbci	r31, 0xFE	; 254
    8d1a:	81 81       	ldd	r24, Z+1	; 0x01
    8d1c:	b8 16       	cp	r11, r24
    8d1e:	09 f4       	brne	.+2      	; 0x8d22 <sequence_run+0x6ec>
    8d20:	bb 24       	eor	r11, r11
					pattern_index=0;
			};
		};
		
	}while(!finished);
    8d22:	dd 20       	and	r13, r13
    8d24:	09 f4       	brne	.+2      	; 0x8d28 <sequence_run+0x6f2>
    8d26:	36 cd       	rjmp	.-1428   	; 0x8794 <sequence_run+0x15e>
}
    8d28:	df 91       	pop	r29
    8d2a:	cf 91       	pop	r28
    8d2c:	1f 91       	pop	r17
    8d2e:	0f 91       	pop	r16
    8d30:	ff 90       	pop	r15
    8d32:	ef 90       	pop	r14
    8d34:	df 90       	pop	r13
    8d36:	cf 90       	pop	r12
    8d38:	bf 90       	pop	r11
    8d3a:	af 90       	pop	r10
    8d3c:	9f 90       	pop	r9
    8d3e:	8f 90       	pop	r8
    8d40:	7f 90       	pop	r7
    8d42:	6f 90       	pop	r6
    8d44:	5f 90       	pop	r5
    8d46:	08 95       	ret

00008d48 <sequence_save_brightness>:
	pattern_break();
	button_select=TRUE;
}

void sequence_save_brightness(void)
{
    8d48:	0f 93       	push	r16
    8d4a:	1f 93       	push	r17
	settings_ram.sequence_settings[sequence_index].brightness = power_vled_get();
    8d4c:	00 91 1c 02 	lds	r16, 0x021C
    8d50:	10 e0       	ldi	r17, 0x00	; 0
    8d52:	0e 94 3c 40 	call	0x8078	; 0x8078 <power_vled_get>
    8d56:	f8 01       	movw	r30, r16
    8d58:	ee 0f       	add	r30, r30
    8d5a:	ff 1f       	adc	r31, r31
    8d5c:	e0 0f       	add	r30, r16
    8d5e:	f1 1f       	adc	r31, r17
    8d60:	ef 5c       	subi	r30, 0xCF	; 207
    8d62:	fd 4f       	sbci	r31, 0xFD	; 253
    8d64:	82 87       	std	Z+10, r24	; 0x0a
	settings_save();	
    8d66:	0e 94 ac 06 	call	0xd58	; 0xd58 <settings_save>
}
    8d6a:	1f 91       	pop	r17
    8d6c:	0f 91       	pop	r16
    8d6e:	08 95       	ret

00008d70 <sequence_select_press>:
	button_rotate=TRUE;
	pattern_break();
}

void sequence_select_press(void)
{
    8d70:	1f 93       	push	r17
	seq_quit=TRUE;
    8d72:	11 e0       	ldi	r17, 0x01	; 1
    8d74:	10 93 1b 02 	sts	0x021B, r17
	pattern_break();
    8d78:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <pattern_break>
	button_select=TRUE;
    8d7c:	10 93 1f 02 	sts	0x021F, r17
}
    8d80:	1f 91       	pop	r17
    8d82:	08 95       	ret

00008d84 <sequence_rotate_en>:
	pattern_break();
}

void sequence_rotate_en(void)
{
	button_rotate=TRUE;
    8d84:	81 e0       	ldi	r24, 0x01	; 1
    8d86:	80 93 1e 02 	sts	0x021E, r24
	pattern_break();
    8d8a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <pattern_break>
}
    8d8e:	08 95       	ret

00008d90 <sequence_skip>:
	pattern_break();
}

void sequence_skip(void)
{
	button_skip=TRUE;
    8d90:	81 e0       	ldi	r24, 0x01	; 1
    8d92:	80 93 1d 02 	sts	0x021D, r24
	pattern_break();
    8d96:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <pattern_break>
}
    8d9a:	08 95       	ret

00008d9c <sequence_exit>:
}

//stop display and exit
void sequence_exit(void)
{
	seq_quit=TRUE;
    8d9c:	81 e0       	ldi	r24, 0x01	; 1
    8d9e:	80 93 1b 02 	sts	0x021B, r24
	pattern_break();
    8da2:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <pattern_break>
}
    8da6:	08 95       	ret

00008da8 <a2d_tick>:
// Public functions
//********************************************************************************************************

void a2d_tick(void)
{
	if(time)
    8da8:	80 91 2d 02 	lds	r24, 0x022D
    8dac:	90 91 2e 02 	lds	r25, 0x022E
    8db0:	00 97       	sbiw	r24, 0x00	; 0
    8db2:	29 f0       	breq	.+10     	; 0x8dbe <a2d_tick+0x16>
		time--;
    8db4:	01 97       	sbiw	r24, 0x01	; 1
    8db6:	90 93 2e 02 	sts	0x022E, r25
    8dba:	80 93 2d 02 	sts	0x022D, r24
    8dbe:	08 95       	ret

00008dc0 <a2d_init>:
}

void a2d_init(void)
{
	//Enable A2D with Fosc/128 which gives 125kHz A2D clock if FOSC=16MHz
	ADCSRA = 0x87;
    8dc0:	87 e8       	ldi	r24, 0x87	; 135
    8dc2:	86 b9       	out	0x06, r24	; 6

	//A2D inputs with no pullup
	DDRF  &=~_BV(LED_I_CHANNEL);
    8dc4:	e1 e6       	ldi	r30, 0x61	; 97
    8dc6:	f0 e0       	ldi	r31, 0x00	; 0
    8dc8:	80 81       	ld	r24, Z
    8dca:	8d 7f       	andi	r24, 0xFD	; 253
    8dcc:	80 83       	st	Z, r24
	DDRF  &=~_BV(SUPPLY_V_CHANNEL);
    8dce:	80 81       	ld	r24, Z
    8dd0:	8b 7f       	andi	r24, 0xFB	; 251
    8dd2:	80 83       	st	Z, r24
	DDRF  &=~_BV(LED_V_CHANNEL);
    8dd4:	80 81       	ld	r24, Z
    8dd6:	87 7f       	andi	r24, 0xF7	; 247
    8dd8:	80 83       	st	Z, r24
	DDRF  &=~_BV(LIGHT_CHANNEL);
    8dda:	80 81       	ld	r24, Z
    8ddc:	8f 7e       	andi	r24, 0xEF	; 239
    8dde:	80 83       	st	Z, r24

	//A2D no pullup
	PORTF  &=~_BV(LED_I_CHANNEL);
    8de0:	e2 e6       	ldi	r30, 0x62	; 98
    8de2:	f0 e0       	ldi	r31, 0x00	; 0
    8de4:	80 81       	ld	r24, Z
    8de6:	8d 7f       	andi	r24, 0xFD	; 253
    8de8:	80 83       	st	Z, r24
	PORTF  &=~_BV(SUPPLY_V_CHANNEL);
    8dea:	80 81       	ld	r24, Z
    8dec:	8b 7f       	andi	r24, 0xFB	; 251
    8dee:	80 83       	st	Z, r24
	PORTF  &=~_BV(LED_V_CHANNEL);
    8df0:	80 81       	ld	r24, Z
    8df2:	87 7f       	andi	r24, 0xF7	; 247
    8df4:	80 83       	st	Z, r24
	PORTF  &=~_BV(LIGHT_CHANNEL);
    8df6:	80 81       	ld	r24, Z
    8df8:	8f 7e       	andi	r24, 0xEF	; 239
    8dfa:	80 83       	st	Z, r24

	//start conversion of LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8dfc:	83 e4       	ldi	r24, 0x43	; 67
    8dfe:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=_BV(ADSC);
    8e00:	36 9a       	sbi	0x06, 6	; 6
	vled_monitor=TRUE;
    8e02:	81 e0       	ldi	r24, 0x01	; 1
    8e04:	80 93 2f 02 	sts	0x022F, r24
}
    8e08:	08 95       	ret

00008e0a <a2d_light>:

	return x;
}

unsigned int a2d_light(void)
{
    8e0a:	df 92       	push	r13
    8e0c:	ef 92       	push	r14
    8e0e:	ff 92       	push	r15
    8e10:	0f 93       	push	r16
    8e12:	1f 93       	push	r17
    8e14:	cf 93       	push	r28
    8e16:	df 93       	push	r29
	unsigned int x;
	unsigned int sample_count=0;
	unsigned long sample_acc=0;
	
	//All LEDs OFF!
	led_blank();
    8e18:	0e 94 d7 23 	call	0x47ae	; 0x47ae <led_blank>

	//wait sample time to ensure LEDs do not affect reading
	time = (unsigned int)(LIGHT_SETUP_TIME/TIMER_TICK);
    8e1c:	82 e1       	ldi	r24, 0x12	; 18
    8e1e:	90 e0       	ldi	r25, 0x00	; 0
    8e20:	90 93 2e 02 	sts	0x022E, r25
    8e24:	80 93 2d 02 	sts	0x022D, r24
    8e28:	02 c0       	rjmp	.+4      	; 0x8e2e <a2d_light+0x24>
	while(time)
		main_fly();
    8e2a:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
	//All LEDs OFF!
	led_blank();

	//wait sample time to ensure LEDs do not affect reading
	time = (unsigned int)(LIGHT_SETUP_TIME/TIMER_TICK);
	while(time)
    8e2e:	80 91 2d 02 	lds	r24, 0x022D
    8e32:	90 91 2e 02 	lds	r25, 0x022E
    8e36:	89 2b       	or	r24, r25
    8e38:	c1 f7       	brne	.-16     	; 0x8e2a <a2d_light+0x20>
		main_fly();
	
	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
    8e3a:	81 e0       	ldi	r24, 0x01	; 1
    8e3c:	80 93 30 02 	sts	0x0230, r24
    8e40:	02 c0       	rjmp	.+4      	; 0x8e46 <a2d_light+0x3c>
	while(vled_monitor)
		main_fly();
    8e42:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
	while(time)
		main_fly();
	
	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
	while(vled_monitor)
    8e46:	80 91 2f 02 	lds	r24, 0x022F
    8e4a:	88 23       	and	r24, r24
    8e4c:	d1 f7       	brne	.-12     	; 0x8e42 <a2d_light+0x38>
		main_fly();
	
	//convert
	time = (unsigned int)(LIGHT_SAMPLE_TIME/TIMER_TICK);
    8e4e:	82 e1       	ldi	r24, 0x12	; 18
    8e50:	90 e0       	ldi	r25, 0x00	; 0
    8e52:	90 93 2e 02 	sts	0x022E, r25
    8e56:	80 93 2d 02 	sts	0x022D, r24
    8e5a:	c0 e0       	ldi	r28, 0x00	; 0
    8e5c:	d0 e0       	ldi	r29, 0x00	; 0
    8e5e:	ee 24       	eor	r14, r14
    8e60:	ff 24       	eor	r15, r15
    8e62:	87 01       	movw	r16, r14
	while(time)
	{
		//convert LIGHT_CHANNEL
		ADMUX = _BV(REFS0)+LIGHT_CHANNEL;
    8e64:	84 e4       	ldi	r24, 0x44	; 68
    8e66:	d8 2e       	mov	r13, r24
    8e68:	0f c0       	rjmp	.+30     	; 0x8e88 <a2d_light+0x7e>
    8e6a:	d7 b8       	out	0x07, r13	; 7
		ADCSRA |= _BV(ADSC);
    8e6c:	36 9a       	sbi	0x06, 6	; 6
		do
		{
			main_fly();
    8e6e:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
		}while(ADCSRA & _BV(ADSC));
    8e72:	36 99       	sbic	0x06, 6	; 6
    8e74:	fc cf       	rjmp	.-8      	; 0x8e6e <a2d_light+0x64>
		sample_acc += ADC;
    8e76:	84 b1       	in	r24, 0x04	; 4
    8e78:	95 b1       	in	r25, 0x05	; 5
    8e7a:	a0 e0       	ldi	r26, 0x00	; 0
    8e7c:	b0 e0       	ldi	r27, 0x00	; 0
    8e7e:	e8 0e       	add	r14, r24
    8e80:	f9 1e       	adc	r15, r25
    8e82:	0a 1f       	adc	r16, r26
    8e84:	1b 1f       	adc	r17, r27
		sample_count++;
    8e86:	21 96       	adiw	r28, 0x01	; 1
	while(vled_monitor)
		main_fly();
	
	//convert
	time = (unsigned int)(LIGHT_SAMPLE_TIME/TIMER_TICK);
	while(time)
    8e88:	80 91 2d 02 	lds	r24, 0x022D
    8e8c:	90 91 2e 02 	lds	r25, 0x022E
    8e90:	89 2b       	or	r24, r25
    8e92:	59 f7       	brne	.-42     	; 0x8e6a <a2d_light+0x60>

	//calculate result
	x = 1023-sample_acc;

	//re-start monitoring of LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8e94:	83 e4       	ldi	r24, 0x43	; 67
    8e96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);
    8e98:	36 9a       	sbi	0x06, 6	; 6
	vled_monitor=TRUE;
    8e9a:	81 e0       	ldi	r24, 0x01	; 1
    8e9c:	80 93 2f 02 	sts	0x022F, r24
    8ea0:	9e 01       	movw	r18, r28
    8ea2:	40 e0       	ldi	r20, 0x00	; 0
    8ea4:	50 e0       	ldi	r21, 0x00	; 0
    8ea6:	c8 01       	movw	r24, r16
    8ea8:	b7 01       	movw	r22, r14
    8eaa:	0e 94 5e 4e 	call	0x9cbc	; 0x9cbc <__udivmodsi4>
    8eae:	6f ef       	ldi	r22, 0xFF	; 255
    8eb0:	73 e0       	ldi	r23, 0x03	; 3
    8eb2:	62 1b       	sub	r22, r18
    8eb4:	73 0b       	sbc	r23, r19

	return x;
}
    8eb6:	cb 01       	movw	r24, r22
    8eb8:	df 91       	pop	r29
    8eba:	cf 91       	pop	r28
    8ebc:	1f 91       	pop	r17
    8ebe:	0f 91       	pop	r16
    8ec0:	ff 90       	pop	r15
    8ec2:	ef 90       	pop	r14
    8ec4:	df 90       	pop	r13
    8ec6:	08 95       	ret

00008ec8 <a2d_supply_v>:
double a2d_supply_v(void)
{
	double x;

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
    8ec8:	81 e0       	ldi	r24, 0x01	; 1
    8eca:	80 93 30 02 	sts	0x0230, r24
    8ece:	02 c0       	rjmp	.+4      	; 0x8ed4 <a2d_supply_v+0xc>
	while(vled_monitor)
		main_fly();
    8ed0:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
{
	double x;

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
	while(vled_monitor)
    8ed4:	80 91 2f 02 	lds	r24, 0x022F
    8ed8:	88 23       	and	r24, r24
    8eda:	d1 f7       	brne	.-12     	; 0x8ed0 <a2d_supply_v+0x8>
		main_fly();
	
	//convert SUPPLY_V_CHANNEL
	ADMUX = _BV(REFS0)+SUPPLY_V_CHANNEL;
    8edc:	82 e4       	ldi	r24, 0x42	; 66
    8ede:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=_BV(ADSC);
    8ee0:	36 9a       	sbi	0x06, 6	; 6
    8ee2:	02 c0       	rjmp	.+4      	; 0x8ee8 <a2d_supply_v+0x20>
	while(ADCSRA & _BV(ADSC))
		main_fly();
    8ee4:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
		main_fly();
	
	//convert SUPPLY_V_CHANNEL
	ADMUX = _BV(REFS0)+SUPPLY_V_CHANNEL;
	ADCSRA |=_BV(ADSC);
	while(ADCSRA & _BV(ADSC))
    8ee8:	36 99       	sbic	0x06, 6	; 6
    8eea:	fc cf       	rjmp	.-8      	; 0x8ee4 <a2d_supply_v+0x1c>
		main_fly();

	//calculate result
	x = ADC/47.63;
    8eec:	64 b1       	in	r22, 0x04	; 4
    8eee:	75 b1       	in	r23, 0x05	; 5

	//re-start monitoring of LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8ef0:	23 e4       	ldi	r18, 0x43	; 67
    8ef2:	27 b9       	out	0x07, r18	; 7
	ADCSRA |= _BV(ADSC);
    8ef4:	36 9a       	sbi	0x06, 6	; 6
	vled_monitor=TRUE;
    8ef6:	21 e0       	ldi	r18, 0x01	; 1
    8ef8:	20 93 2f 02 	sts	0x022F, r18
    8efc:	80 e0       	ldi	r24, 0x00	; 0
    8efe:	90 e0       	ldi	r25, 0x00	; 0
    8f00:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__floatunsisf>
    8f04:	2f e1       	ldi	r18, 0x1F	; 31
    8f06:	35 e8       	ldi	r19, 0x85	; 133
    8f08:	4e e3       	ldi	r20, 0x3E	; 62
    8f0a:	52 e4       	ldi	r21, 0x42	; 66
    8f0c:	0e 94 28 4c 	call	0x9850	; 0x9850 <__divsf3>

	return x;
}
    8f10:	08 95       	ret

00008f12 <a2d_led_v>:
double a2d_led_v(void)
{
	double x;

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
    8f12:	81 e0       	ldi	r24, 0x01	; 1
    8f14:	80 93 30 02 	sts	0x0230, r24
    8f18:	02 c0       	rjmp	.+4      	; 0x8f1e <a2d_led_v+0xc>
	while(vled_monitor)
		main_fly();
    8f1a:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
{
	double x;

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
	while(vled_monitor)
    8f1e:	80 91 2f 02 	lds	r24, 0x022F
    8f22:	88 23       	and	r24, r24
    8f24:	d1 f7       	brne	.-12     	; 0x8f1a <a2d_led_v+0x8>
		main_fly();

	//convert LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8f26:	83 e4       	ldi	r24, 0x43	; 67
    8f28:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=_BV(ADSC);
    8f2a:	36 9a       	sbi	0x06, 6	; 6
    8f2c:	02 c0       	rjmp	.+4      	; 0x8f32 <a2d_led_v+0x20>
	while(ADCSRA & _BV(ADSC))
		main_fly();
    8f2e:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
		main_fly();

	//convert LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
	ADCSRA |=_BV(ADSC);
	while(ADCSRA & _BV(ADSC))
    8f32:	36 99       	sbic	0x06, 6	; 6
    8f34:	fc cf       	rjmp	.-8      	; 0x8f2e <a2d_led_v+0x1c>
		main_fly();

	//calculate result
	x = ADC/102.4;
    8f36:	64 b1       	in	r22, 0x04	; 4
    8f38:	75 b1       	in	r23, 0x05	; 5

	//re-start monitoring of LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8f3a:	23 e4       	ldi	r18, 0x43	; 67
    8f3c:	27 b9       	out	0x07, r18	; 7
	ADCSRA |= _BV(ADSC);
    8f3e:	36 9a       	sbi	0x06, 6	; 6
	vled_monitor=TRUE;
    8f40:	21 e0       	ldi	r18, 0x01	; 1
    8f42:	20 93 2f 02 	sts	0x022F, r18
    8f46:	80 e0       	ldi	r24, 0x00	; 0
    8f48:	90 e0       	ldi	r25, 0x00	; 0
    8f4a:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__floatunsisf>
    8f4e:	2d ec       	ldi	r18, 0xCD	; 205
    8f50:	3c ec       	ldi	r19, 0xCC	; 204
    8f52:	4c ec       	ldi	r20, 0xCC	; 204
    8f54:	52 e4       	ldi	r21, 0x42	; 66
    8f56:	0e 94 28 4c 	call	0x9850	; 0x9850 <__divsf3>

	return x;
}
    8f5a:	08 95       	ret

00008f5c <a2d_led_i>:
	ADCSRA |=_BV(ADSC);
	vled_monitor=TRUE;
}

double a2d_led_i(void)
{
    8f5c:	cf 92       	push	r12
    8f5e:	ef 92       	push	r14
    8f60:	ff 92       	push	r15
    8f62:	0f 93       	push	r16
    8f64:	1f 93       	push	r17
	double x;

	//ensure column is ON full intensity
	led_plane_intensity_all(255);
    8f66:	8f ef       	ldi	r24, 0xFF	; 255
    8f68:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <led_plane_intensity_all>
	led_line(0,0,3,0,7,3,1);
    8f6c:	80 e0       	ldi	r24, 0x00	; 0
    8f6e:	90 e0       	ldi	r25, 0x00	; 0
    8f70:	60 e0       	ldi	r22, 0x00	; 0
    8f72:	70 e0       	ldi	r23, 0x00	; 0
    8f74:	43 e0       	ldi	r20, 0x03	; 3
    8f76:	50 e0       	ldi	r21, 0x00	; 0
    8f78:	20 e0       	ldi	r18, 0x00	; 0
    8f7a:	30 e0       	ldi	r19, 0x00	; 0
    8f7c:	07 e0       	ldi	r16, 0x07	; 7
    8f7e:	10 e0       	ldi	r17, 0x00	; 0
    8f80:	e3 e0       	ldi	r30, 0x03	; 3
    8f82:	ee 2e       	mov	r14, r30
    8f84:	f1 2c       	mov	r15, r1
    8f86:	cc 24       	eor	r12, r12
    8f88:	c3 94       	inc	r12
    8f8a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <led_line>
	led_waitframe(2);
    8f8e:	82 e0       	ldi	r24, 0x02	; 2
    8f90:	90 e0       	ldi	r25, 0x00	; 0
    8f92:	0e 94 3e 24 	call	0x487c	; 0x487c <led_waitframe>

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
    8f96:	81 e0       	ldi	r24, 0x01	; 1
    8f98:	80 93 30 02 	sts	0x0230, r24
    8f9c:	02 c0       	rjmp	.+4      	; 0x8fa2 <a2d_led_i+0x46>
	while(vled_monitor)
		main_fly();
    8f9e:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
	led_line(0,0,3,0,7,3,1);
	led_waitframe(2);

	//stop monitoring led supply voltage	
	vled_monitor_stop = TRUE;
	while(vled_monitor)
    8fa2:	80 91 2f 02 	lds	r24, 0x022F
    8fa6:	88 23       	and	r24, r24
    8fa8:	d1 f7       	brne	.-12     	; 0x8f9e <a2d_led_i+0x42>
		main_fly();
	
	//convert LED_I_CHANNEL
	ADMUX = _BV(REFS0)+LED_I_CHANNEL;
    8faa:	81 e4       	ldi	r24, 0x41	; 65
    8fac:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=_BV(ADSC);
    8fae:	36 9a       	sbi	0x06, 6	; 6
    8fb0:	02 c0       	rjmp	.+4      	; 0x8fb6 <a2d_led_i+0x5a>
	while(ADCSRA & _BV(ADSC))
		main_fly();
    8fb2:	0e 94 81 06 	call	0xd02	; 0xd02 <main_fly>
		main_fly();
	
	//convert LED_I_CHANNEL
	ADMUX = _BV(REFS0)+LED_I_CHANNEL;
	ADCSRA |=_BV(ADSC);
	while(ADCSRA & _BV(ADSC))
    8fb6:	36 99       	sbic	0x06, 6	; 6
    8fb8:	fc cf       	rjmp	.-8      	; 0x8fb2 <a2d_led_i+0x56>
		main_fly();

	//calculate result
	x = ADC/12.33;
    8fba:	64 b1       	in	r22, 0x04	; 4
    8fbc:	75 b1       	in	r23, 0x05	; 5

	//re-start monitoring of LED_V_CHANNEL
	ADMUX = _BV(REFS0)+LED_V_CHANNEL;
    8fbe:	23 e4       	ldi	r18, 0x43	; 67
    8fc0:	27 b9       	out	0x07, r18	; 7
	ADCSRA |= _BV(ADSC);
    8fc2:	36 9a       	sbi	0x06, 6	; 6
	vled_monitor=TRUE;
    8fc4:	21 e0       	ldi	r18, 0x01	; 1
    8fc6:	20 93 2f 02 	sts	0x022F, r18
    8fca:	80 e0       	ldi	r24, 0x00	; 0
    8fcc:	90 e0       	ldi	r25, 0x00	; 0
    8fce:	0e 94 bc 4c 	call	0x9978	; 0x9978 <__floatunsisf>
    8fd2:	2e ea       	ldi	r18, 0xAE	; 174
    8fd4:	37 e4       	ldi	r19, 0x47	; 71
    8fd6:	45 e4       	ldi	r20, 0x45	; 69
    8fd8:	51 e4       	ldi	r21, 0x41	; 65
    8fda:	0e 94 28 4c 	call	0x9850	; 0x9850 <__divsf3>

	return x;
}
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	cf 90       	pop	r12
    8fe8:	08 95       	ret

00008fea <a2d_led_fv>:

double a2d_led_fv(void)
{
    8fea:	ef 92       	push	r14
    8fec:	ff 92       	push	r15
    8fee:	0f 93       	push	r16
    8ff0:	1f 93       	push	r17
	double x;
	
	x = a2d_led_v() - (a2d_led_i()/71.42);
    8ff2:	0e 94 89 47 	call	0x8f12	; 0x8f12 <a2d_led_v>
    8ff6:	7b 01       	movw	r14, r22
    8ff8:	8c 01       	movw	r16, r24
    8ffa:	0e 94 ae 47 	call	0x8f5c	; 0x8f5c <a2d_led_i>
    8ffe:	2a e0       	ldi	r18, 0x0A	; 10
    9000:	37 ed       	ldi	r19, 0xD7	; 215
    9002:	4e e8       	ldi	r20, 0x8E	; 142
    9004:	52 ec       	ldi	r21, 0xC2	; 194
    9006:	0e 94 28 4c 	call	0x9850	; 0x9850 <__divsf3>
    900a:	9b 01       	movw	r18, r22
    900c:	ac 01       	movw	r20, r24
    900e:	c8 01       	movw	r24, r16
    9010:	b7 01       	movw	r22, r14
    9012:	0e 94 c4 4b 	call	0x9788	; 0x9788 <__addsf3>
	
	return x;
}
    9016:	1f 91       	pop	r17
    9018:	0f 91       	pop	r16
    901a:	ff 90       	pop	r15
    901c:	ef 90       	pop	r14
    901e:	08 95       	ret

00009020 <a2d_fly>:
void a2d_fly(void)
{
	//Repeatedly check LED supply voltage, reset if over safety threshold
	//to stop this process, set vled_monitor_stop, and wait for v_led_monitor_run==FALSE
	//to start, begin a conversion of vled channel and set vled_monitor
	if(vled_monitor)
    9020:	80 91 2f 02 	lds	r24, 0x022F
    9024:	88 23       	and	r24, r24
    9026:	d9 f0       	breq	.+54     	; 0x905e <a2d_fly+0x3e>
	{
		//Conversion finished?
		if(!(ADCSRA & _BV(ADSC)))
    9028:	36 99       	sbic	0x06, 6	; 6
    902a:	19 c0       	rjmp	.+50     	; 0x905e <a2d_fly+0x3e>
		{
			//If supply is over limit, shutdown leds and cause reset.
			if(ADC > (unsigned int)(POWER_VLED_LIMIT * 102.4))
    902c:	84 b1       	in	r24, 0x04	; 4
    902e:	95 b1       	in	r25, 0x05	; 5
    9030:	87 56       	subi	r24, 0x67	; 103
    9032:	92 40       	sbci	r25, 0x02	; 2
    9034:	60 f0       	brcs	.+24     	; 0x904e <a2d_fly+0x2e>
			{
				led_shutdown();
    9036:	0e 94 6d 0a 	call	0x14da	; 0x14da <led_shutdown>
				wdt_enable(WDTO_15MS);
    903a:	28 e0       	ldi	r18, 0x08	; 8
    903c:	88 e1       	ldi	r24, 0x18	; 24
    903e:	90 e0       	ldi	r25, 0x00	; 0
    9040:	0f b6       	in	r0, 0x3f	; 63
    9042:	f8 94       	cli
    9044:	a8 95       	wdr
    9046:	81 bd       	out	0x21, r24	; 33
    9048:	0f be       	out	0x3f, r0	; 63
    904a:	21 bd       	out	0x21, r18	; 33
    904c:	ff cf       	rjmp	.-2      	; 0x904c <a2d_fly+0x2c>
				while(1);
			};
			
			//request to stop monitoring vled?
			if(vled_monitor_stop)
    904e:	80 91 30 02 	lds	r24, 0x0230
    9052:	88 23       	and	r24, r24
    9054:	19 f0       	breq	.+6      	; 0x905c <a2d_fly+0x3c>
				vled_monitor=FALSE;	//stop
    9056:	10 92 2f 02 	sts	0x022F, r1
    905a:	08 95       	ret
			else
				ADCSRA |=_BV(ADSC);	//else start next conversion
    905c:	36 9a       	sbi	0x06, 6	; 6
    905e:	08 95       	ret

00009060 <clip_int>:
//********************************************************************************************************


// Clip an integer to upper and lower limits
int	clip_int(int x, int lower, int upper)
{
    9060:	fc 01       	movw	r30, r24
    9062:	9b 01       	movw	r18, r22
	int retval;
	if(x < lower)
    9064:	86 17       	cp	r24, r22
    9066:	97 07       	cpc	r25, r23
    9068:	2c f0       	brlt	.+10     	; 0x9074 <clip_int+0x14>
    906a:	9a 01       	movw	r18, r20
    906c:	e4 17       	cp	r30, r20
    906e:	f5 07       	cpc	r31, r21
    9070:	0c f4       	brge	.+2      	; 0x9074 <clip_int+0x14>
    9072:	9f 01       	movw	r18, r30
	else if(upper < x)
		retval=upper;
	else retval=x;

	return retval;
}
    9074:	c9 01       	movw	r24, r18
    9076:	08 95       	ret

00009078 <vfprintf>:
    9078:	a1 e1       	ldi	r26, 0x11	; 17
    907a:	b0 e0       	ldi	r27, 0x00	; 0
    907c:	e2 e4       	ldi	r30, 0x42	; 66
    907e:	f8 e4       	ldi	r31, 0x48	; 72
    9080:	0c 94 80 4e 	jmp	0x9d00	; 0x9d00 <__prologue_saves__>
    9084:	3c 01       	movw	r6, r24
    9086:	7f 87       	std	Y+15, r23	; 0x0f
    9088:	6e 87       	std	Y+14, r22	; 0x0e
    908a:	6a 01       	movw	r12, r20
    908c:	fc 01       	movw	r30, r24
    908e:	17 82       	std	Z+7, r1	; 0x07
    9090:	16 82       	std	Z+6, r1	; 0x06
    9092:	83 81       	ldd	r24, Z+3	; 0x03
    9094:	81 fd       	sbrc	r24, 1
    9096:	03 c0       	rjmp	.+6      	; 0x909e <vfprintf+0x26>
    9098:	6f ef       	ldi	r22, 0xFF	; 255
    909a:	7f ef       	ldi	r23, 0xFF	; 255
    909c:	6f c3       	rjmp	.+1758   	; 0x977c <vfprintf+0x704>
    909e:	9e 01       	movw	r18, r28
    90a0:	2f 5f       	subi	r18, 0xFF	; 255
    90a2:	3f 4f       	sbci	r19, 0xFF	; 255
    90a4:	39 8b       	std	Y+17, r19	; 0x11
    90a6:	28 8b       	std	Y+16, r18	; 0x10
    90a8:	f3 01       	movw	r30, r6
    90aa:	23 81       	ldd	r18, Z+3	; 0x03
    90ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    90ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    90b0:	23 fd       	sbrc	r18, 3
    90b2:	85 91       	lpm	r24, Z+
    90b4:	23 ff       	sbrs	r18, 3
    90b6:	81 91       	ld	r24, Z+
    90b8:	ff 87       	std	Y+15, r31	; 0x0f
    90ba:	ee 87       	std	Y+14, r30	; 0x0e
    90bc:	88 23       	and	r24, r24
    90be:	09 f4       	brne	.+2      	; 0x90c2 <vfprintf+0x4a>
    90c0:	5a c3       	rjmp	.+1716   	; 0x9776 <vfprintf+0x6fe>
    90c2:	85 32       	cpi	r24, 0x25	; 37
    90c4:	51 f4       	brne	.+20     	; 0x90da <vfprintf+0x62>
    90c6:	ee 85       	ldd	r30, Y+14	; 0x0e
    90c8:	ff 85       	ldd	r31, Y+15	; 0x0f
    90ca:	23 fd       	sbrc	r18, 3
    90cc:	85 91       	lpm	r24, Z+
    90ce:	23 ff       	sbrs	r18, 3
    90d0:	81 91       	ld	r24, Z+
    90d2:	ff 87       	std	Y+15, r31	; 0x0f
    90d4:	ee 87       	std	Y+14, r30	; 0x0e
    90d6:	85 32       	cpi	r24, 0x25	; 37
    90d8:	29 f4       	brne	.+10     	; 0x90e4 <vfprintf+0x6c>
    90da:	90 e0       	ldi	r25, 0x00	; 0
    90dc:	b3 01       	movw	r22, r6
    90de:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    90e2:	e2 cf       	rjmp	.-60     	; 0x90a8 <vfprintf+0x30>
    90e4:	98 2f       	mov	r25, r24
    90e6:	10 e0       	ldi	r17, 0x00	; 0
    90e8:	88 24       	eor	r8, r8
    90ea:	99 24       	eor	r9, r9
    90ec:	10 32       	cpi	r17, 0x20	; 32
    90ee:	b0 f4       	brcc	.+44     	; 0x911c <vfprintf+0xa4>
    90f0:	9b 32       	cpi	r25, 0x2B	; 43
    90f2:	69 f0       	breq	.+26     	; 0x910e <vfprintf+0x96>
    90f4:	9c 32       	cpi	r25, 0x2C	; 44
    90f6:	28 f4       	brcc	.+10     	; 0x9102 <vfprintf+0x8a>
    90f8:	90 32       	cpi	r25, 0x20	; 32
    90fa:	51 f0       	breq	.+20     	; 0x9110 <vfprintf+0x98>
    90fc:	93 32       	cpi	r25, 0x23	; 35
    90fe:	71 f4       	brne	.+28     	; 0x911c <vfprintf+0xa4>
    9100:	0b c0       	rjmp	.+22     	; 0x9118 <vfprintf+0xa0>
    9102:	9d 32       	cpi	r25, 0x2D	; 45
    9104:	39 f0       	breq	.+14     	; 0x9114 <vfprintf+0x9c>
    9106:	90 33       	cpi	r25, 0x30	; 48
    9108:	49 f4       	brne	.+18     	; 0x911c <vfprintf+0xa4>
    910a:	11 60       	ori	r17, 0x01	; 1
    910c:	28 c0       	rjmp	.+80     	; 0x915e <vfprintf+0xe6>
    910e:	12 60       	ori	r17, 0x02	; 2
    9110:	14 60       	ori	r17, 0x04	; 4
    9112:	25 c0       	rjmp	.+74     	; 0x915e <vfprintf+0xe6>
    9114:	18 60       	ori	r17, 0x08	; 8
    9116:	23 c0       	rjmp	.+70     	; 0x915e <vfprintf+0xe6>
    9118:	10 61       	ori	r17, 0x10	; 16
    911a:	21 c0       	rjmp	.+66     	; 0x915e <vfprintf+0xe6>
    911c:	17 fd       	sbrc	r17, 7
    911e:	2a c0       	rjmp	.+84     	; 0x9174 <vfprintf+0xfc>
    9120:	89 2f       	mov	r24, r25
    9122:	80 53       	subi	r24, 0x30	; 48
    9124:	8a 30       	cpi	r24, 0x0A	; 10
    9126:	78 f4       	brcc	.+30     	; 0x9146 <vfprintf+0xce>
    9128:	16 ff       	sbrs	r17, 6
    912a:	06 c0       	rjmp	.+12     	; 0x9138 <vfprintf+0xc0>
    912c:	fa e0       	ldi	r31, 0x0A	; 10
    912e:	9f 9e       	mul	r9, r31
    9130:	90 2c       	mov	r9, r0
    9132:	11 24       	eor	r1, r1
    9134:	98 0e       	add	r9, r24
    9136:	13 c0       	rjmp	.+38     	; 0x915e <vfprintf+0xe6>
    9138:	3a e0       	ldi	r19, 0x0A	; 10
    913a:	83 9e       	mul	r8, r19
    913c:	80 2c       	mov	r8, r0
    913e:	11 24       	eor	r1, r1
    9140:	88 0e       	add	r8, r24
    9142:	10 62       	ori	r17, 0x20	; 32
    9144:	0c c0       	rjmp	.+24     	; 0x915e <vfprintf+0xe6>
    9146:	9e 32       	cpi	r25, 0x2E	; 46
    9148:	21 f4       	brne	.+8      	; 0x9152 <vfprintf+0xda>
    914a:	16 fd       	sbrc	r17, 6
    914c:	14 c3       	rjmp	.+1576   	; 0x9776 <vfprintf+0x6fe>
    914e:	10 64       	ori	r17, 0x40	; 64
    9150:	06 c0       	rjmp	.+12     	; 0x915e <vfprintf+0xe6>
    9152:	9c 36       	cpi	r25, 0x6C	; 108
    9154:	11 f4       	brne	.+4      	; 0x915a <vfprintf+0xe2>
    9156:	10 68       	ori	r17, 0x80	; 128
    9158:	02 c0       	rjmp	.+4      	; 0x915e <vfprintf+0xe6>
    915a:	98 36       	cpi	r25, 0x68	; 104
    915c:	59 f4       	brne	.+22     	; 0x9174 <vfprintf+0xfc>
    915e:	ee 85       	ldd	r30, Y+14	; 0x0e
    9160:	ff 85       	ldd	r31, Y+15	; 0x0f
    9162:	23 fd       	sbrc	r18, 3
    9164:	95 91       	lpm	r25, Z+
    9166:	23 ff       	sbrs	r18, 3
    9168:	91 91       	ld	r25, Z+
    916a:	ff 87       	std	Y+15, r31	; 0x0f
    916c:	ee 87       	std	Y+14, r30	; 0x0e
    916e:	99 23       	and	r25, r25
    9170:	09 f0       	breq	.+2      	; 0x9174 <vfprintf+0xfc>
    9172:	bc cf       	rjmp	.-136    	; 0x90ec <vfprintf+0x74>
    9174:	89 2f       	mov	r24, r25
    9176:	85 54       	subi	r24, 0x45	; 69
    9178:	83 30       	cpi	r24, 0x03	; 3
    917a:	20 f4       	brcc	.+8      	; 0x9184 <vfprintf+0x10c>
    917c:	81 2f       	mov	r24, r17
    917e:	80 61       	ori	r24, 0x10	; 16
    9180:	90 5e       	subi	r25, 0xE0	; 224
    9182:	07 c0       	rjmp	.+14     	; 0x9192 <vfprintf+0x11a>
    9184:	89 2f       	mov	r24, r25
    9186:	85 56       	subi	r24, 0x65	; 101
    9188:	83 30       	cpi	r24, 0x03	; 3
    918a:	08 f0       	brcs	.+2      	; 0x918e <vfprintf+0x116>
    918c:	9f c1       	rjmp	.+830    	; 0x94cc <vfprintf+0x454>
    918e:	81 2f       	mov	r24, r17
    9190:	8f 7e       	andi	r24, 0xEF	; 239
    9192:	86 fd       	sbrc	r24, 6
    9194:	02 c0       	rjmp	.+4      	; 0x919a <vfprintf+0x122>
    9196:	76 e0       	ldi	r23, 0x06	; 6
    9198:	97 2e       	mov	r9, r23
    919a:	6f e3       	ldi	r22, 0x3F	; 63
    919c:	f6 2e       	mov	r15, r22
    919e:	f8 22       	and	r15, r24
    91a0:	95 36       	cpi	r25, 0x65	; 101
    91a2:	19 f4       	brne	.+6      	; 0x91aa <vfprintf+0x132>
    91a4:	f0 e4       	ldi	r31, 0x40	; 64
    91a6:	ff 2a       	or	r15, r31
    91a8:	07 c0       	rjmp	.+14     	; 0x91b8 <vfprintf+0x140>
    91aa:	96 36       	cpi	r25, 0x66	; 102
    91ac:	19 f4       	brne	.+6      	; 0x91b4 <vfprintf+0x13c>
    91ae:	20 e8       	ldi	r18, 0x80	; 128
    91b0:	f2 2a       	or	r15, r18
    91b2:	02 c0       	rjmp	.+4      	; 0x91b8 <vfprintf+0x140>
    91b4:	91 10       	cpse	r9, r1
    91b6:	9a 94       	dec	r9
    91b8:	f7 fe       	sbrs	r15, 7
    91ba:	0a c0       	rjmp	.+20     	; 0x91d0 <vfprintf+0x158>
    91bc:	3b e3       	ldi	r19, 0x3B	; 59
    91be:	39 15       	cp	r19, r9
    91c0:	18 f4       	brcc	.+6      	; 0x91c8 <vfprintf+0x150>
    91c2:	5c e3       	ldi	r21, 0x3C	; 60
    91c4:	b5 2e       	mov	r11, r21
    91c6:	02 c0       	rjmp	.+4      	; 0x91cc <vfprintf+0x154>
    91c8:	b9 2c       	mov	r11, r9
    91ca:	b3 94       	inc	r11
    91cc:	27 e0       	ldi	r18, 0x07	; 7
    91ce:	09 c0       	rjmp	.+18     	; 0x91e2 <vfprintf+0x16a>
    91d0:	47 e0       	ldi	r20, 0x07	; 7
    91d2:	49 15       	cp	r20, r9
    91d4:	20 f4       	brcc	.+8      	; 0x91de <vfprintf+0x166>
    91d6:	bb 24       	eor	r11, r11
    91d8:	47 e0       	ldi	r20, 0x07	; 7
    91da:	94 2e       	mov	r9, r20
    91dc:	f7 cf       	rjmp	.-18     	; 0x91cc <vfprintf+0x154>
    91de:	29 2d       	mov	r18, r9
    91e0:	bb 24       	eor	r11, r11
    91e2:	c6 01       	movw	r24, r12
    91e4:	04 96       	adiw	r24, 0x04	; 4
    91e6:	9d 87       	std	Y+13, r25	; 0x0d
    91e8:	8c 87       	std	Y+12, r24	; 0x0c
    91ea:	f6 01       	movw	r30, r12
    91ec:	60 81       	ld	r22, Z
    91ee:	71 81       	ldd	r23, Z+1	; 0x01
    91f0:	82 81       	ldd	r24, Z+2	; 0x02
    91f2:	93 81       	ldd	r25, Z+3	; 0x03
    91f4:	ae 01       	movw	r20, r28
    91f6:	4f 5f       	subi	r20, 0xFF	; 255
    91f8:	5f 4f       	sbci	r21, 0xFF	; 255
    91fa:	0b 2d       	mov	r16, r11
    91fc:	0e 94 4a 4f 	call	0x9e94	; 0x9e94 <__ftoa_engine>
    9200:	6c 01       	movw	r12, r24
    9202:	09 81       	ldd	r16, Y+1	; 0x01
    9204:	20 2e       	mov	r2, r16
    9206:	33 24       	eor	r3, r3
    9208:	00 ff       	sbrs	r16, 0
    920a:	04 c0       	rjmp	.+8      	; 0x9214 <vfprintf+0x19c>
    920c:	03 fd       	sbrc	r16, 3
    920e:	02 c0       	rjmp	.+4      	; 0x9214 <vfprintf+0x19c>
    9210:	1d e2       	ldi	r17, 0x2D	; 45
    9212:	09 c0       	rjmp	.+18     	; 0x9226 <vfprintf+0x1ae>
    9214:	f1 fe       	sbrs	r15, 1
    9216:	02 c0       	rjmp	.+4      	; 0x921c <vfprintf+0x1a4>
    9218:	1b e2       	ldi	r17, 0x2B	; 43
    921a:	05 c0       	rjmp	.+10     	; 0x9226 <vfprintf+0x1ae>
    921c:	f2 fc       	sbrc	r15, 2
    921e:	02 c0       	rjmp	.+4      	; 0x9224 <vfprintf+0x1ac>
    9220:	10 e0       	ldi	r17, 0x00	; 0
    9222:	01 c0       	rjmp	.+2      	; 0x9226 <vfprintf+0x1ae>
    9224:	10 e2       	ldi	r17, 0x20	; 32
    9226:	c1 01       	movw	r24, r2
    9228:	8c 70       	andi	r24, 0x0C	; 12
    922a:	90 70       	andi	r25, 0x00	; 0
    922c:	89 2b       	or	r24, r25
    922e:	b9 f1       	breq	.+110    	; 0x929e <vfprintf+0x226>
    9230:	11 23       	and	r17, r17
    9232:	11 f4       	brne	.+4      	; 0x9238 <vfprintf+0x1c0>
    9234:	83 e0       	ldi	r24, 0x03	; 3
    9236:	01 c0       	rjmp	.+2      	; 0x923a <vfprintf+0x1c2>
    9238:	84 e0       	ldi	r24, 0x04	; 4
    923a:	88 15       	cp	r24, r8
    923c:	10 f0       	brcs	.+4      	; 0x9242 <vfprintf+0x1ca>
    923e:	88 24       	eor	r8, r8
    9240:	0a c0       	rjmp	.+20     	; 0x9256 <vfprintf+0x1de>
    9242:	88 1a       	sub	r8, r24
    9244:	f3 fc       	sbrc	r15, 3
    9246:	07 c0       	rjmp	.+14     	; 0x9256 <vfprintf+0x1de>
    9248:	80 e2       	ldi	r24, 0x20	; 32
    924a:	90 e0       	ldi	r25, 0x00	; 0
    924c:	b3 01       	movw	r22, r6
    924e:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9252:	8a 94       	dec	r8
    9254:	c9 f7       	brne	.-14     	; 0x9248 <vfprintf+0x1d0>
    9256:	11 23       	and	r17, r17
    9258:	29 f0       	breq	.+10     	; 0x9264 <vfprintf+0x1ec>
    925a:	81 2f       	mov	r24, r17
    925c:	90 e0       	ldi	r25, 0x00	; 0
    925e:	b3 01       	movw	r22, r6
    9260:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9264:	23 fe       	sbrs	r2, 3
    9266:	03 c0       	rjmp	.+6      	; 0x926e <vfprintf+0x1f6>
    9268:	0f e0       	ldi	r16, 0x0F	; 15
    926a:	1b e0       	ldi	r17, 0x0B	; 11
    926c:	0e c0       	rjmp	.+28     	; 0x928a <vfprintf+0x212>
    926e:	03 e1       	ldi	r16, 0x13	; 19
    9270:	1b e0       	ldi	r17, 0x0B	; 11
    9272:	0b c0       	rjmp	.+22     	; 0x928a <vfprintf+0x212>
    9274:	e1 14       	cp	r14, r1
    9276:	f1 04       	cpc	r15, r1
    9278:	09 f0       	breq	.+2      	; 0x927c <vfprintf+0x204>
    927a:	80 52       	subi	r24, 0x20	; 32
    927c:	90 e0       	ldi	r25, 0x00	; 0
    927e:	b3 01       	movw	r22, r6
    9280:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9284:	0f 5f       	subi	r16, 0xFF	; 255
    9286:	1f 4f       	sbci	r17, 0xFF	; 255
    9288:	05 c0       	rjmp	.+10     	; 0x9294 <vfprintf+0x21c>
    928a:	ef 2c       	mov	r14, r15
    928c:	ff 24       	eor	r15, r15
    928e:	f0 e1       	ldi	r31, 0x10	; 16
    9290:	ef 22       	and	r14, r31
    9292:	ff 24       	eor	r15, r15
    9294:	f8 01       	movw	r30, r16
    9296:	84 91       	lpm	r24, Z+
    9298:	88 23       	and	r24, r24
    929a:	61 f7       	brne	.-40     	; 0x9274 <vfprintf+0x1fc>
    929c:	14 c1       	rjmp	.+552    	; 0x94c6 <vfprintf+0x44e>
    929e:	f7 fe       	sbrs	r15, 7
    92a0:	12 c0       	rjmp	.+36     	; 0x92c6 <vfprintf+0x24e>
    92a2:	bc 0c       	add	r11, r12
    92a4:	24 fe       	sbrs	r2, 4
    92a6:	04 c0       	rjmp	.+8      	; 0x92b0 <vfprintf+0x238>
    92a8:	8a 81       	ldd	r24, Y+2	; 0x02
    92aa:	81 33       	cpi	r24, 0x31	; 49
    92ac:	09 f4       	brne	.+2      	; 0x92b0 <vfprintf+0x238>
    92ae:	ba 94       	dec	r11
    92b0:	1b 14       	cp	r1, r11
    92b2:	1c f0       	brlt	.+6      	; 0x92ba <vfprintf+0x242>
    92b4:	bb 24       	eor	r11, r11
    92b6:	b3 94       	inc	r11
    92b8:	2d c0       	rjmp	.+90     	; 0x9314 <vfprintf+0x29c>
    92ba:	f8 e0       	ldi	r31, 0x08	; 8
    92bc:	fb 15       	cp	r31, r11
    92be:	50 f5       	brcc	.+84     	; 0x9314 <vfprintf+0x29c>
    92c0:	38 e0       	ldi	r19, 0x08	; 8
    92c2:	b3 2e       	mov	r11, r19
    92c4:	27 c0       	rjmp	.+78     	; 0x9314 <vfprintf+0x29c>
    92c6:	f6 fc       	sbrc	r15, 6
    92c8:	25 c0       	rjmp	.+74     	; 0x9314 <vfprintf+0x29c>
    92ca:	89 2d       	mov	r24, r9
    92cc:	90 e0       	ldi	r25, 0x00	; 0
    92ce:	8c 15       	cp	r24, r12
    92d0:	9d 05       	cpc	r25, r13
    92d2:	4c f0       	brlt	.+18     	; 0x92e6 <vfprintf+0x26e>
    92d4:	2c ef       	ldi	r18, 0xFC	; 252
    92d6:	c2 16       	cp	r12, r18
    92d8:	2f ef       	ldi	r18, 0xFF	; 255
    92da:	d2 06       	cpc	r13, r18
    92dc:	24 f0       	brlt	.+8      	; 0x92e6 <vfprintf+0x26e>
    92de:	30 e8       	ldi	r19, 0x80	; 128
    92e0:	f3 2a       	or	r15, r19
    92e2:	01 c0       	rjmp	.+2      	; 0x92e6 <vfprintf+0x26e>
    92e4:	9a 94       	dec	r9
    92e6:	99 20       	and	r9, r9
    92e8:	49 f0       	breq	.+18     	; 0x92fc <vfprintf+0x284>
    92ea:	e2 e0       	ldi	r30, 0x02	; 2
    92ec:	f0 e0       	ldi	r31, 0x00	; 0
    92ee:	ec 0f       	add	r30, r28
    92f0:	fd 1f       	adc	r31, r29
    92f2:	e9 0d       	add	r30, r9
    92f4:	f1 1d       	adc	r31, r1
    92f6:	80 81       	ld	r24, Z
    92f8:	80 33       	cpi	r24, 0x30	; 48
    92fa:	a1 f3       	breq	.-24     	; 0x92e4 <vfprintf+0x26c>
    92fc:	f7 fe       	sbrs	r15, 7
    92fe:	0a c0       	rjmp	.+20     	; 0x9314 <vfprintf+0x29c>
    9300:	b9 2c       	mov	r11, r9
    9302:	b3 94       	inc	r11
    9304:	89 2d       	mov	r24, r9
    9306:	90 e0       	ldi	r25, 0x00	; 0
    9308:	c8 16       	cp	r12, r24
    930a:	d9 06       	cpc	r13, r25
    930c:	14 f0       	brlt	.+4      	; 0x9312 <vfprintf+0x29a>
    930e:	99 24       	eor	r9, r9
    9310:	01 c0       	rjmp	.+2      	; 0x9314 <vfprintf+0x29c>
    9312:	9c 18       	sub	r9, r12
    9314:	f7 fc       	sbrc	r15, 7
    9316:	03 c0       	rjmp	.+6      	; 0x931e <vfprintf+0x2a6>
    9318:	25 e0       	ldi	r18, 0x05	; 5
    931a:	30 e0       	ldi	r19, 0x00	; 0
    931c:	09 c0       	rjmp	.+18     	; 0x9330 <vfprintf+0x2b8>
    931e:	1c 14       	cp	r1, r12
    9320:	1d 04       	cpc	r1, r13
    9322:	1c f0       	brlt	.+6      	; 0x932a <vfprintf+0x2b2>
    9324:	21 e0       	ldi	r18, 0x01	; 1
    9326:	30 e0       	ldi	r19, 0x00	; 0
    9328:	03 c0       	rjmp	.+6      	; 0x9330 <vfprintf+0x2b8>
    932a:	96 01       	movw	r18, r12
    932c:	2f 5f       	subi	r18, 0xFF	; 255
    932e:	3f 4f       	sbci	r19, 0xFF	; 255
    9330:	11 23       	and	r17, r17
    9332:	11 f0       	breq	.+4      	; 0x9338 <vfprintf+0x2c0>
    9334:	2f 5f       	subi	r18, 0xFF	; 255
    9336:	3f 4f       	sbci	r19, 0xFF	; 255
    9338:	99 20       	and	r9, r9
    933a:	29 f0       	breq	.+10     	; 0x9346 <vfprintf+0x2ce>
    933c:	89 2d       	mov	r24, r9
    933e:	90 e0       	ldi	r25, 0x00	; 0
    9340:	01 96       	adiw	r24, 0x01	; 1
    9342:	28 0f       	add	r18, r24
    9344:	39 1f       	adc	r19, r25
    9346:	88 2d       	mov	r24, r8
    9348:	90 e0       	ldi	r25, 0x00	; 0
    934a:	28 17       	cp	r18, r24
    934c:	39 07       	cpc	r19, r25
    934e:	14 f0       	brlt	.+4      	; 0x9354 <vfprintf+0x2dc>
    9350:	88 24       	eor	r8, r8
    9352:	01 c0       	rjmp	.+2      	; 0x9356 <vfprintf+0x2de>
    9354:	82 1a       	sub	r8, r18
    9356:	4f 2c       	mov	r4, r15
    9358:	55 24       	eor	r5, r5
    935a:	c2 01       	movw	r24, r4
    935c:	89 70       	andi	r24, 0x09	; 9
    935e:	90 70       	andi	r25, 0x00	; 0
    9360:	89 2b       	or	r24, r25
    9362:	39 f0       	breq	.+14     	; 0x9372 <vfprintf+0x2fa>
    9364:	08 c0       	rjmp	.+16     	; 0x9376 <vfprintf+0x2fe>
    9366:	80 e2       	ldi	r24, 0x20	; 32
    9368:	90 e0       	ldi	r25, 0x00	; 0
    936a:	b3 01       	movw	r22, r6
    936c:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9370:	8a 94       	dec	r8
    9372:	88 20       	and	r8, r8
    9374:	c1 f7       	brne	.-16     	; 0x9366 <vfprintf+0x2ee>
    9376:	11 23       	and	r17, r17
    9378:	29 f0       	breq	.+10     	; 0x9384 <vfprintf+0x30c>
    937a:	81 2f       	mov	r24, r17
    937c:	90 e0       	ldi	r25, 0x00	; 0
    937e:	b3 01       	movw	r22, r6
    9380:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9384:	43 fe       	sbrs	r4, 3
    9386:	07 c0       	rjmp	.+14     	; 0x9396 <vfprintf+0x31e>
    9388:	08 c0       	rjmp	.+16     	; 0x939a <vfprintf+0x322>
    938a:	80 e3       	ldi	r24, 0x30	; 48
    938c:	90 e0       	ldi	r25, 0x00	; 0
    938e:	b3 01       	movw	r22, r6
    9390:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9394:	8a 94       	dec	r8
    9396:	88 20       	and	r8, r8
    9398:	c1 f7       	brne	.-16     	; 0x938a <vfprintf+0x312>
    939a:	f7 fe       	sbrs	r15, 7
    939c:	46 c0       	rjmp	.+140    	; 0x942a <vfprintf+0x3b2>
    939e:	86 01       	movw	r16, r12
    93a0:	d7 fe       	sbrs	r13, 7
    93a2:	02 c0       	rjmp	.+4      	; 0x93a8 <vfprintf+0x330>
    93a4:	00 e0       	ldi	r16, 0x00	; 0
    93a6:	10 e0       	ldi	r17, 0x00	; 0
    93a8:	76 01       	movw	r14, r12
    93aa:	08 94       	sec
    93ac:	e1 1c       	adc	r14, r1
    93ae:	f1 1c       	adc	r15, r1
    93b0:	e0 1a       	sub	r14, r16
    93b2:	f1 0a       	sbc	r15, r17
    93b4:	41 e0       	ldi	r20, 0x01	; 1
    93b6:	50 e0       	ldi	r21, 0x00	; 0
    93b8:	4c 0f       	add	r20, r28
    93ba:	5d 1f       	adc	r21, r29
    93bc:	e4 0e       	add	r14, r20
    93be:	f5 1e       	adc	r15, r21
    93c0:	26 01       	movw	r4, r12
    93c2:	4b 18       	sub	r4, r11
    93c4:	51 08       	sbc	r5, r1
    93c6:	89 2d       	mov	r24, r9
    93c8:	90 e0       	ldi	r25, 0x00	; 0
    93ca:	aa 24       	eor	r10, r10
    93cc:	bb 24       	eor	r11, r11
    93ce:	a8 1a       	sub	r10, r24
    93d0:	b9 0a       	sbc	r11, r25
    93d2:	5f ef       	ldi	r21, 0xFF	; 255
    93d4:	0f 3f       	cpi	r16, 0xFF	; 255
    93d6:	15 07       	cpc	r17, r21
    93d8:	29 f4       	brne	.+10     	; 0x93e4 <vfprintf+0x36c>
    93da:	8e e2       	ldi	r24, 0x2E	; 46
    93dc:	90 e0       	ldi	r25, 0x00	; 0
    93de:	b3 01       	movw	r22, r6
    93e0:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    93e4:	c0 16       	cp	r12, r16
    93e6:	d1 06       	cpc	r13, r17
    93e8:	34 f0       	brlt	.+12     	; 0x93f6 <vfprintf+0x37e>
    93ea:	40 16       	cp	r4, r16
    93ec:	51 06       	cpc	r5, r17
    93ee:	1c f4       	brge	.+6      	; 0x93f6 <vfprintf+0x37e>
    93f0:	f7 01       	movw	r30, r14
    93f2:	80 81       	ld	r24, Z
    93f4:	01 c0       	rjmp	.+2      	; 0x93f8 <vfprintf+0x380>
    93f6:	80 e3       	ldi	r24, 0x30	; 48
    93f8:	01 50       	subi	r16, 0x01	; 1
    93fa:	10 40       	sbci	r17, 0x00	; 0
    93fc:	08 94       	sec
    93fe:	e1 1c       	adc	r14, r1
    9400:	f1 1c       	adc	r15, r1
    9402:	0a 15       	cp	r16, r10
    9404:	1b 05       	cpc	r17, r11
    9406:	2c f0       	brlt	.+10     	; 0x9412 <vfprintf+0x39a>
    9408:	90 e0       	ldi	r25, 0x00	; 0
    940a:	b3 01       	movw	r22, r6
    940c:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9410:	e0 cf       	rjmp	.-64     	; 0x93d2 <vfprintf+0x35a>
    9412:	0c 15       	cp	r16, r12
    9414:	1d 05       	cpc	r17, r13
    9416:	39 f4       	brne	.+14     	; 0x9426 <vfprintf+0x3ae>
    9418:	9a 81       	ldd	r25, Y+2	; 0x02
    941a:	96 33       	cpi	r25, 0x36	; 54
    941c:	18 f4       	brcc	.+6      	; 0x9424 <vfprintf+0x3ac>
    941e:	95 33       	cpi	r25, 0x35	; 53
    9420:	11 f4       	brne	.+4      	; 0x9426 <vfprintf+0x3ae>
    9422:	24 fe       	sbrs	r2, 4
    9424:	81 e3       	ldi	r24, 0x31	; 49
    9426:	90 e0       	ldi	r25, 0x00	; 0
    9428:	4b c0       	rjmp	.+150    	; 0x94c0 <vfprintf+0x448>
    942a:	8a 81       	ldd	r24, Y+2	; 0x02
    942c:	81 33       	cpi	r24, 0x31	; 49
    942e:	09 f0       	breq	.+2      	; 0x9432 <vfprintf+0x3ba>
    9430:	0f 7e       	andi	r16, 0xEF	; 239
    9432:	90 e0       	ldi	r25, 0x00	; 0
    9434:	b3 01       	movw	r22, r6
    9436:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    943a:	99 20       	and	r9, r9
    943c:	a1 f0       	breq	.+40     	; 0x9466 <vfprintf+0x3ee>
    943e:	8e e2       	ldi	r24, 0x2E	; 46
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	b3 01       	movw	r22, r6
    9444:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9448:	12 e0       	ldi	r17, 0x02	; 2
    944a:	e1 e0       	ldi	r30, 0x01	; 1
    944c:	f0 e0       	ldi	r31, 0x00	; 0
    944e:	ec 0f       	add	r30, r28
    9450:	fd 1f       	adc	r31, r29
    9452:	e1 0f       	add	r30, r17
    9454:	f1 1d       	adc	r31, r1
    9456:	1f 5f       	subi	r17, 0xFF	; 255
    9458:	80 81       	ld	r24, Z
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	b3 01       	movw	r22, r6
    945e:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9462:	9a 94       	dec	r9
    9464:	91 f7       	brne	.-28     	; 0x944a <vfprintf+0x3d2>
    9466:	44 fc       	sbrc	r4, 4
    9468:	03 c0       	rjmp	.+6      	; 0x9470 <vfprintf+0x3f8>
    946a:	85 e6       	ldi	r24, 0x65	; 101
    946c:	90 e0       	ldi	r25, 0x00	; 0
    946e:	02 c0       	rjmp	.+4      	; 0x9474 <vfprintf+0x3fc>
    9470:	85 e4       	ldi	r24, 0x45	; 69
    9472:	90 e0       	ldi	r25, 0x00	; 0
    9474:	b3 01       	movw	r22, r6
    9476:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    947a:	d7 fc       	sbrc	r13, 7
    947c:	05 c0       	rjmp	.+10     	; 0x9488 <vfprintf+0x410>
    947e:	c1 14       	cp	r12, r1
    9480:	d1 04       	cpc	r13, r1
    9482:	41 f4       	brne	.+16     	; 0x9494 <vfprintf+0x41c>
    9484:	04 ff       	sbrs	r16, 4
    9486:	06 c0       	rjmp	.+12     	; 0x9494 <vfprintf+0x41c>
    9488:	d0 94       	com	r13
    948a:	c1 94       	neg	r12
    948c:	d1 08       	sbc	r13, r1
    948e:	d3 94       	inc	r13
    9490:	8d e2       	ldi	r24, 0x2D	; 45
    9492:	01 c0       	rjmp	.+2      	; 0x9496 <vfprintf+0x41e>
    9494:	8b e2       	ldi	r24, 0x2B	; 43
    9496:	90 e0       	ldi	r25, 0x00	; 0
    9498:	b3 01       	movw	r22, r6
    949a:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    949e:	80 e3       	ldi	r24, 0x30	; 48
    94a0:	05 c0       	rjmp	.+10     	; 0x94ac <vfprintf+0x434>
    94a2:	8f 5f       	subi	r24, 0xFF	; 255
    94a4:	26 ef       	ldi	r18, 0xF6	; 246
    94a6:	3f ef       	ldi	r19, 0xFF	; 255
    94a8:	c2 0e       	add	r12, r18
    94aa:	d3 1e       	adc	r13, r19
    94ac:	3a e0       	ldi	r19, 0x0A	; 10
    94ae:	c3 16       	cp	r12, r19
    94b0:	d1 04       	cpc	r13, r1
    94b2:	bc f7       	brge	.-18     	; 0x94a2 <vfprintf+0x42a>
    94b4:	90 e0       	ldi	r25, 0x00	; 0
    94b6:	b3 01       	movw	r22, r6
    94b8:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    94bc:	c6 01       	movw	r24, r12
    94be:	c0 96       	adiw	r24, 0x30	; 48
    94c0:	b3 01       	movw	r22, r6
    94c2:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    94c6:	cc 84       	ldd	r12, Y+12	; 0x0c
    94c8:	dd 84       	ldd	r13, Y+13	; 0x0d
    94ca:	52 c1       	rjmp	.+676    	; 0x9770 <vfprintf+0x6f8>
    94cc:	93 36       	cpi	r25, 0x63	; 99
    94ce:	31 f0       	breq	.+12     	; 0x94dc <vfprintf+0x464>
    94d0:	93 37       	cpi	r25, 0x73	; 115
    94d2:	99 f0       	breq	.+38     	; 0x94fa <vfprintf+0x482>
    94d4:	93 35       	cpi	r25, 0x53	; 83
    94d6:	09 f0       	breq	.+2      	; 0x94da <vfprintf+0x462>
    94d8:	59 c0       	rjmp	.+178    	; 0x958c <vfprintf+0x514>
    94da:	23 c0       	rjmp	.+70     	; 0x9522 <vfprintf+0x4aa>
    94dc:	f6 01       	movw	r30, r12
    94de:	80 81       	ld	r24, Z
    94e0:	89 83       	std	Y+1, r24	; 0x01
    94e2:	5e 01       	movw	r10, r28
    94e4:	08 94       	sec
    94e6:	a1 1c       	adc	r10, r1
    94e8:	b1 1c       	adc	r11, r1
    94ea:	22 e0       	ldi	r18, 0x02	; 2
    94ec:	30 e0       	ldi	r19, 0x00	; 0
    94ee:	c2 0e       	add	r12, r18
    94f0:	d3 1e       	adc	r13, r19
    94f2:	21 e0       	ldi	r18, 0x01	; 1
    94f4:	e2 2e       	mov	r14, r18
    94f6:	f1 2c       	mov	r15, r1
    94f8:	12 c0       	rjmp	.+36     	; 0x951e <vfprintf+0x4a6>
    94fa:	f6 01       	movw	r30, r12
    94fc:	a0 80       	ld	r10, Z
    94fe:	b1 80       	ldd	r11, Z+1	; 0x01
    9500:	16 fd       	sbrc	r17, 6
    9502:	03 c0       	rjmp	.+6      	; 0x950a <vfprintf+0x492>
    9504:	6f ef       	ldi	r22, 0xFF	; 255
    9506:	7f ef       	ldi	r23, 0xFF	; 255
    9508:	02 c0       	rjmp	.+4      	; 0x950e <vfprintf+0x496>
    950a:	69 2d       	mov	r22, r9
    950c:	70 e0       	ldi	r23, 0x00	; 0
    950e:	22 e0       	ldi	r18, 0x02	; 2
    9510:	30 e0       	ldi	r19, 0x00	; 0
    9512:	c2 0e       	add	r12, r18
    9514:	d3 1e       	adc	r13, r19
    9516:	c5 01       	movw	r24, r10
    9518:	0e 94 4f 50 	call	0xa09e	; 0xa09e <strnlen>
    951c:	7c 01       	movw	r14, r24
    951e:	1f 77       	andi	r17, 0x7F	; 127
    9520:	13 c0       	rjmp	.+38     	; 0x9548 <vfprintf+0x4d0>
    9522:	f6 01       	movw	r30, r12
    9524:	a0 80       	ld	r10, Z
    9526:	b1 80       	ldd	r11, Z+1	; 0x01
    9528:	16 fd       	sbrc	r17, 6
    952a:	03 c0       	rjmp	.+6      	; 0x9532 <vfprintf+0x4ba>
    952c:	6f ef       	ldi	r22, 0xFF	; 255
    952e:	7f ef       	ldi	r23, 0xFF	; 255
    9530:	02 c0       	rjmp	.+4      	; 0x9536 <vfprintf+0x4be>
    9532:	69 2d       	mov	r22, r9
    9534:	70 e0       	ldi	r23, 0x00	; 0
    9536:	22 e0       	ldi	r18, 0x02	; 2
    9538:	30 e0       	ldi	r19, 0x00	; 0
    953a:	c2 0e       	add	r12, r18
    953c:	d3 1e       	adc	r13, r19
    953e:	c5 01       	movw	r24, r10
    9540:	0e 94 2b 50 	call	0xa056	; 0xa056 <strnlen_P>
    9544:	7c 01       	movw	r14, r24
    9546:	10 68       	ori	r17, 0x80	; 128
    9548:	13 ff       	sbrs	r17, 3
    954a:	07 c0       	rjmp	.+14     	; 0x955a <vfprintf+0x4e2>
    954c:	1b c0       	rjmp	.+54     	; 0x9584 <vfprintf+0x50c>
    954e:	80 e2       	ldi	r24, 0x20	; 32
    9550:	90 e0       	ldi	r25, 0x00	; 0
    9552:	b3 01       	movw	r22, r6
    9554:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9558:	8a 94       	dec	r8
    955a:	88 2d       	mov	r24, r8
    955c:	90 e0       	ldi	r25, 0x00	; 0
    955e:	e8 16       	cp	r14, r24
    9560:	f9 06       	cpc	r15, r25
    9562:	a8 f3       	brcs	.-22     	; 0x954e <vfprintf+0x4d6>
    9564:	0f c0       	rjmp	.+30     	; 0x9584 <vfprintf+0x50c>
    9566:	f5 01       	movw	r30, r10
    9568:	17 fd       	sbrc	r17, 7
    956a:	85 91       	lpm	r24, Z+
    956c:	17 ff       	sbrs	r17, 7
    956e:	81 91       	ld	r24, Z+
    9570:	5f 01       	movw	r10, r30
    9572:	90 e0       	ldi	r25, 0x00	; 0
    9574:	b3 01       	movw	r22, r6
    9576:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    957a:	81 10       	cpse	r8, r1
    957c:	8a 94       	dec	r8
    957e:	08 94       	sec
    9580:	e1 08       	sbc	r14, r1
    9582:	f1 08       	sbc	r15, r1
    9584:	e1 14       	cp	r14, r1
    9586:	f1 04       	cpc	r15, r1
    9588:	71 f7       	brne	.-36     	; 0x9566 <vfprintf+0x4ee>
    958a:	f2 c0       	rjmp	.+484    	; 0x9770 <vfprintf+0x6f8>
    958c:	94 36       	cpi	r25, 0x64	; 100
    958e:	11 f0       	breq	.+4      	; 0x9594 <vfprintf+0x51c>
    9590:	99 36       	cpi	r25, 0x69	; 105
    9592:	89 f5       	brne	.+98     	; 0x95f6 <vfprintf+0x57e>
    9594:	17 ff       	sbrs	r17, 7
    9596:	08 c0       	rjmp	.+16     	; 0x95a8 <vfprintf+0x530>
    9598:	f6 01       	movw	r30, r12
    959a:	20 81       	ld	r18, Z
    959c:	31 81       	ldd	r19, Z+1	; 0x01
    959e:	42 81       	ldd	r20, Z+2	; 0x02
    95a0:	53 81       	ldd	r21, Z+3	; 0x03
    95a2:	84 e0       	ldi	r24, 0x04	; 4
    95a4:	90 e0       	ldi	r25, 0x00	; 0
    95a6:	0a c0       	rjmp	.+20     	; 0x95bc <vfprintf+0x544>
    95a8:	f6 01       	movw	r30, r12
    95aa:	80 81       	ld	r24, Z
    95ac:	91 81       	ldd	r25, Z+1	; 0x01
    95ae:	9c 01       	movw	r18, r24
    95b0:	44 27       	eor	r20, r20
    95b2:	37 fd       	sbrc	r19, 7
    95b4:	40 95       	com	r20
    95b6:	54 2f       	mov	r21, r20
    95b8:	82 e0       	ldi	r24, 0x02	; 2
    95ba:	90 e0       	ldi	r25, 0x00	; 0
    95bc:	c8 0e       	add	r12, r24
    95be:	d9 1e       	adc	r13, r25
    95c0:	9f e6       	ldi	r25, 0x6F	; 111
    95c2:	f9 2e       	mov	r15, r25
    95c4:	f1 22       	and	r15, r17
    95c6:	57 ff       	sbrs	r21, 7
    95c8:	09 c0       	rjmp	.+18     	; 0x95dc <vfprintf+0x564>
    95ca:	50 95       	com	r21
    95cc:	40 95       	com	r20
    95ce:	30 95       	com	r19
    95d0:	21 95       	neg	r18
    95d2:	3f 4f       	sbci	r19, 0xFF	; 255
    95d4:	4f 4f       	sbci	r20, 0xFF	; 255
    95d6:	5f 4f       	sbci	r21, 0xFF	; 255
    95d8:	90 e8       	ldi	r25, 0x80	; 128
    95da:	f9 2a       	or	r15, r25
    95dc:	ca 01       	movw	r24, r20
    95de:	b9 01       	movw	r22, r18
    95e0:	ae 01       	movw	r20, r28
    95e2:	4f 5f       	subi	r20, 0xFF	; 255
    95e4:	5f 4f       	sbci	r21, 0xFF	; 255
    95e6:	2a e0       	ldi	r18, 0x0A	; 10
    95e8:	30 e0       	ldi	r19, 0x00	; 0
    95ea:	0e 94 d3 50 	call	0xa1a6	; 0xa1a6 <__ultoa_invert>
    95ee:	e8 2e       	mov	r14, r24
    95f0:	e8 89       	ldd	r30, Y+16	; 0x10
    95f2:	ee 1a       	sub	r14, r30
    95f4:	41 c0       	rjmp	.+130    	; 0x9678 <vfprintf+0x600>
    95f6:	95 37       	cpi	r25, 0x75	; 117
    95f8:	21 f4       	brne	.+8      	; 0x9602 <vfprintf+0x58a>
    95fa:	1f 7e       	andi	r17, 0xEF	; 239
    95fc:	2a e0       	ldi	r18, 0x0A	; 10
    95fe:	30 e0       	ldi	r19, 0x00	; 0
    9600:	1c c0       	rjmp	.+56     	; 0x963a <vfprintf+0x5c2>
    9602:	19 7f       	andi	r17, 0xF9	; 249
    9604:	9f 36       	cpi	r25, 0x6F	; 111
    9606:	61 f0       	breq	.+24     	; 0x9620 <vfprintf+0x5a8>
    9608:	90 37       	cpi	r25, 0x70	; 112
    960a:	20 f4       	brcc	.+8      	; 0x9614 <vfprintf+0x59c>
    960c:	98 35       	cpi	r25, 0x58	; 88
    960e:	09 f0       	breq	.+2      	; 0x9612 <vfprintf+0x59a>
    9610:	b2 c0       	rjmp	.+356    	; 0x9776 <vfprintf+0x6fe>
    9612:	0f c0       	rjmp	.+30     	; 0x9632 <vfprintf+0x5ba>
    9614:	90 37       	cpi	r25, 0x70	; 112
    9616:	39 f0       	breq	.+14     	; 0x9626 <vfprintf+0x5ae>
    9618:	98 37       	cpi	r25, 0x78	; 120
    961a:	09 f0       	breq	.+2      	; 0x961e <vfprintf+0x5a6>
    961c:	ac c0       	rjmp	.+344    	; 0x9776 <vfprintf+0x6fe>
    961e:	04 c0       	rjmp	.+8      	; 0x9628 <vfprintf+0x5b0>
    9620:	28 e0       	ldi	r18, 0x08	; 8
    9622:	30 e0       	ldi	r19, 0x00	; 0
    9624:	0a c0       	rjmp	.+20     	; 0x963a <vfprintf+0x5c2>
    9626:	10 61       	ori	r17, 0x10	; 16
    9628:	14 fd       	sbrc	r17, 4
    962a:	14 60       	ori	r17, 0x04	; 4
    962c:	20 e1       	ldi	r18, 0x10	; 16
    962e:	30 e0       	ldi	r19, 0x00	; 0
    9630:	04 c0       	rjmp	.+8      	; 0x963a <vfprintf+0x5c2>
    9632:	14 fd       	sbrc	r17, 4
    9634:	16 60       	ori	r17, 0x06	; 6
    9636:	20 e1       	ldi	r18, 0x10	; 16
    9638:	32 e0       	ldi	r19, 0x02	; 2
    963a:	17 ff       	sbrs	r17, 7
    963c:	08 c0       	rjmp	.+16     	; 0x964e <vfprintf+0x5d6>
    963e:	f6 01       	movw	r30, r12
    9640:	60 81       	ld	r22, Z
    9642:	71 81       	ldd	r23, Z+1	; 0x01
    9644:	82 81       	ldd	r24, Z+2	; 0x02
    9646:	93 81       	ldd	r25, Z+3	; 0x03
    9648:	44 e0       	ldi	r20, 0x04	; 4
    964a:	50 e0       	ldi	r21, 0x00	; 0
    964c:	08 c0       	rjmp	.+16     	; 0x965e <vfprintf+0x5e6>
    964e:	f6 01       	movw	r30, r12
    9650:	80 81       	ld	r24, Z
    9652:	91 81       	ldd	r25, Z+1	; 0x01
    9654:	bc 01       	movw	r22, r24
    9656:	80 e0       	ldi	r24, 0x00	; 0
    9658:	90 e0       	ldi	r25, 0x00	; 0
    965a:	42 e0       	ldi	r20, 0x02	; 2
    965c:	50 e0       	ldi	r21, 0x00	; 0
    965e:	c4 0e       	add	r12, r20
    9660:	d5 1e       	adc	r13, r21
    9662:	ae 01       	movw	r20, r28
    9664:	4f 5f       	subi	r20, 0xFF	; 255
    9666:	5f 4f       	sbci	r21, 0xFF	; 255
    9668:	0e 94 d3 50 	call	0xa1a6	; 0xa1a6 <__ultoa_invert>
    966c:	e8 2e       	mov	r14, r24
    966e:	58 89       	ldd	r21, Y+16	; 0x10
    9670:	e5 1a       	sub	r14, r21
    9672:	8f e7       	ldi	r24, 0x7F	; 127
    9674:	f8 2e       	mov	r15, r24
    9676:	f1 22       	and	r15, r17
    9678:	f6 fe       	sbrs	r15, 6
    967a:	0b c0       	rjmp	.+22     	; 0x9692 <vfprintf+0x61a>
    967c:	8e ef       	ldi	r24, 0xFE	; 254
    967e:	f8 22       	and	r15, r24
    9680:	e9 14       	cp	r14, r9
    9682:	38 f4       	brcc	.+14     	; 0x9692 <vfprintf+0x61a>
    9684:	f4 fe       	sbrs	r15, 4
    9686:	07 c0       	rjmp	.+14     	; 0x9696 <vfprintf+0x61e>
    9688:	f2 fc       	sbrc	r15, 2
    968a:	05 c0       	rjmp	.+10     	; 0x9696 <vfprintf+0x61e>
    968c:	9f ee       	ldi	r25, 0xEF	; 239
    968e:	f9 22       	and	r15, r25
    9690:	02 c0       	rjmp	.+4      	; 0x9696 <vfprintf+0x61e>
    9692:	1e 2d       	mov	r17, r14
    9694:	01 c0       	rjmp	.+2      	; 0x9698 <vfprintf+0x620>
    9696:	19 2d       	mov	r17, r9
    9698:	f4 fe       	sbrs	r15, 4
    969a:	0d c0       	rjmp	.+26     	; 0x96b6 <vfprintf+0x63e>
    969c:	fe 01       	movw	r30, r28
    969e:	ee 0d       	add	r30, r14
    96a0:	f1 1d       	adc	r31, r1
    96a2:	80 81       	ld	r24, Z
    96a4:	80 33       	cpi	r24, 0x30	; 48
    96a6:	19 f4       	brne	.+6      	; 0x96ae <vfprintf+0x636>
    96a8:	e9 ee       	ldi	r30, 0xE9	; 233
    96aa:	fe 22       	and	r15, r30
    96ac:	08 c0       	rjmp	.+16     	; 0x96be <vfprintf+0x646>
    96ae:	1f 5f       	subi	r17, 0xFF	; 255
    96b0:	f2 fe       	sbrs	r15, 2
    96b2:	05 c0       	rjmp	.+10     	; 0x96be <vfprintf+0x646>
    96b4:	03 c0       	rjmp	.+6      	; 0x96bc <vfprintf+0x644>
    96b6:	8f 2d       	mov	r24, r15
    96b8:	86 78       	andi	r24, 0x86	; 134
    96ba:	09 f0       	breq	.+2      	; 0x96be <vfprintf+0x646>
    96bc:	1f 5f       	subi	r17, 0xFF	; 255
    96be:	0f 2d       	mov	r16, r15
    96c0:	f3 fc       	sbrc	r15, 3
    96c2:	14 c0       	rjmp	.+40     	; 0x96ec <vfprintf+0x674>
    96c4:	f0 fe       	sbrs	r15, 0
    96c6:	0f c0       	rjmp	.+30     	; 0x96e6 <vfprintf+0x66e>
    96c8:	18 15       	cp	r17, r8
    96ca:	10 f0       	brcs	.+4      	; 0x96d0 <vfprintf+0x658>
    96cc:	9e 2c       	mov	r9, r14
    96ce:	0b c0       	rjmp	.+22     	; 0x96e6 <vfprintf+0x66e>
    96d0:	9e 2c       	mov	r9, r14
    96d2:	98 0c       	add	r9, r8
    96d4:	91 1a       	sub	r9, r17
    96d6:	18 2d       	mov	r17, r8
    96d8:	06 c0       	rjmp	.+12     	; 0x96e6 <vfprintf+0x66e>
    96da:	80 e2       	ldi	r24, 0x20	; 32
    96dc:	90 e0       	ldi	r25, 0x00	; 0
    96de:	b3 01       	movw	r22, r6
    96e0:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    96e4:	1f 5f       	subi	r17, 0xFF	; 255
    96e6:	18 15       	cp	r17, r8
    96e8:	c0 f3       	brcs	.-16     	; 0x96da <vfprintf+0x662>
    96ea:	04 c0       	rjmp	.+8      	; 0x96f4 <vfprintf+0x67c>
    96ec:	18 15       	cp	r17, r8
    96ee:	10 f4       	brcc	.+4      	; 0x96f4 <vfprintf+0x67c>
    96f0:	81 1a       	sub	r8, r17
    96f2:	01 c0       	rjmp	.+2      	; 0x96f6 <vfprintf+0x67e>
    96f4:	88 24       	eor	r8, r8
    96f6:	04 ff       	sbrs	r16, 4
    96f8:	0f c0       	rjmp	.+30     	; 0x9718 <vfprintf+0x6a0>
    96fa:	80 e3       	ldi	r24, 0x30	; 48
    96fc:	90 e0       	ldi	r25, 0x00	; 0
    96fe:	b3 01       	movw	r22, r6
    9700:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9704:	02 ff       	sbrs	r16, 2
    9706:	1d c0       	rjmp	.+58     	; 0x9742 <vfprintf+0x6ca>
    9708:	01 fd       	sbrc	r16, 1
    970a:	03 c0       	rjmp	.+6      	; 0x9712 <vfprintf+0x69a>
    970c:	88 e7       	ldi	r24, 0x78	; 120
    970e:	90 e0       	ldi	r25, 0x00	; 0
    9710:	0e c0       	rjmp	.+28     	; 0x972e <vfprintf+0x6b6>
    9712:	88 e5       	ldi	r24, 0x58	; 88
    9714:	90 e0       	ldi	r25, 0x00	; 0
    9716:	0b c0       	rjmp	.+22     	; 0x972e <vfprintf+0x6b6>
    9718:	80 2f       	mov	r24, r16
    971a:	86 78       	andi	r24, 0x86	; 134
    971c:	91 f0       	breq	.+36     	; 0x9742 <vfprintf+0x6ca>
    971e:	01 ff       	sbrs	r16, 1
    9720:	02 c0       	rjmp	.+4      	; 0x9726 <vfprintf+0x6ae>
    9722:	8b e2       	ldi	r24, 0x2B	; 43
    9724:	01 c0       	rjmp	.+2      	; 0x9728 <vfprintf+0x6b0>
    9726:	80 e2       	ldi	r24, 0x20	; 32
    9728:	f7 fc       	sbrc	r15, 7
    972a:	8d e2       	ldi	r24, 0x2D	; 45
    972c:	90 e0       	ldi	r25, 0x00	; 0
    972e:	b3 01       	movw	r22, r6
    9730:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9734:	06 c0       	rjmp	.+12     	; 0x9742 <vfprintf+0x6ca>
    9736:	80 e3       	ldi	r24, 0x30	; 48
    9738:	90 e0       	ldi	r25, 0x00	; 0
    973a:	b3 01       	movw	r22, r6
    973c:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    9740:	9a 94       	dec	r9
    9742:	e9 14       	cp	r14, r9
    9744:	c0 f3       	brcs	.-16     	; 0x9736 <vfprintf+0x6be>
    9746:	ea 94       	dec	r14
    9748:	e1 e0       	ldi	r30, 0x01	; 1
    974a:	f0 e0       	ldi	r31, 0x00	; 0
    974c:	ec 0f       	add	r30, r28
    974e:	fd 1f       	adc	r31, r29
    9750:	ee 0d       	add	r30, r14
    9752:	f1 1d       	adc	r31, r1
    9754:	80 81       	ld	r24, Z
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	b3 01       	movw	r22, r6
    975a:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    975e:	ee 20       	and	r14, r14
    9760:	91 f7       	brne	.-28     	; 0x9746 <vfprintf+0x6ce>
    9762:	06 c0       	rjmp	.+12     	; 0x9770 <vfprintf+0x6f8>
    9764:	80 e2       	ldi	r24, 0x20	; 32
    9766:	90 e0       	ldi	r25, 0x00	; 0
    9768:	b3 01       	movw	r22, r6
    976a:	0e 94 83 50 	call	0xa106	; 0xa106 <fputc>
    976e:	8a 94       	dec	r8
    9770:	88 20       	and	r8, r8
    9772:	c1 f7       	brne	.-16     	; 0x9764 <vfprintf+0x6ec>
    9774:	99 cc       	rjmp	.-1742   	; 0x90a8 <vfprintf+0x30>
    9776:	f3 01       	movw	r30, r6
    9778:	66 81       	ldd	r22, Z+6	; 0x06
    977a:	77 81       	ldd	r23, Z+7	; 0x07
    977c:	cb 01       	movw	r24, r22
    977e:	61 96       	adiw	r28, 0x11	; 17
    9780:	e2 e1       	ldi	r30, 0x12	; 18
    9782:	0c 94 9c 4e 	jmp	0x9d38	; 0x9d38 <__epilogue_restores__>

00009786 <__subsf3>:
    9786:	50 58       	subi	r21, 0x80	; 128

00009788 <__addsf3>:
    9788:	bb 27       	eor	r27, r27
    978a:	aa 27       	eor	r26, r26
    978c:	0e d0       	rcall	.+28     	; 0x97aa <__addsf3x>
    978e:	48 c1       	rjmp	.+656    	; 0x9a20 <__fp_round>
    9790:	39 d1       	rcall	.+626    	; 0x9a04 <__fp_pscA>
    9792:	30 f0       	brcs	.+12     	; 0x97a0 <__addsf3+0x18>
    9794:	3e d1       	rcall	.+636    	; 0x9a12 <__fp_pscB>
    9796:	20 f0       	brcs	.+8      	; 0x97a0 <__addsf3+0x18>
    9798:	31 f4       	brne	.+12     	; 0x97a6 <__addsf3+0x1e>
    979a:	9f 3f       	cpi	r25, 0xFF	; 255
    979c:	11 f4       	brne	.+4      	; 0x97a2 <__addsf3+0x1a>
    979e:	1e f4       	brtc	.+6      	; 0x97a6 <__addsf3+0x1e>
    97a0:	2e c1       	rjmp	.+604    	; 0x99fe <__fp_nan>
    97a2:	0e f4       	brtc	.+2      	; 0x97a6 <__addsf3+0x1e>
    97a4:	e0 95       	com	r30
    97a6:	e7 fb       	bst	r30, 7
    97a8:	24 c1       	rjmp	.+584    	; 0x99f2 <__fp_inf>

000097aa <__addsf3x>:
    97aa:	e9 2f       	mov	r30, r25
    97ac:	4a d1       	rcall	.+660    	; 0x9a42 <__fp_split3>
    97ae:	80 f3       	brcs	.-32     	; 0x9790 <__addsf3+0x8>
    97b0:	ba 17       	cp	r27, r26
    97b2:	62 07       	cpc	r22, r18
    97b4:	73 07       	cpc	r23, r19
    97b6:	84 07       	cpc	r24, r20
    97b8:	95 07       	cpc	r25, r21
    97ba:	18 f0       	brcs	.+6      	; 0x97c2 <__addsf3x+0x18>
    97bc:	71 f4       	brne	.+28     	; 0x97da <__addsf3x+0x30>
    97be:	9e f5       	brtc	.+102    	; 0x9826 <__addsf3x+0x7c>
    97c0:	62 c1       	rjmp	.+708    	; 0x9a86 <__fp_zero>
    97c2:	0e f4       	brtc	.+2      	; 0x97c6 <__addsf3x+0x1c>
    97c4:	e0 95       	com	r30
    97c6:	0b 2e       	mov	r0, r27
    97c8:	ba 2f       	mov	r27, r26
    97ca:	a0 2d       	mov	r26, r0
    97cc:	0b 01       	movw	r0, r22
    97ce:	b9 01       	movw	r22, r18
    97d0:	90 01       	movw	r18, r0
    97d2:	0c 01       	movw	r0, r24
    97d4:	ca 01       	movw	r24, r20
    97d6:	a0 01       	movw	r20, r0
    97d8:	11 24       	eor	r1, r1
    97da:	ff 27       	eor	r31, r31
    97dc:	59 1b       	sub	r21, r25
    97de:	99 f0       	breq	.+38     	; 0x9806 <__addsf3x+0x5c>
    97e0:	59 3f       	cpi	r21, 0xF9	; 249
    97e2:	50 f4       	brcc	.+20     	; 0x97f8 <__addsf3x+0x4e>
    97e4:	50 3e       	cpi	r21, 0xE0	; 224
    97e6:	68 f1       	brcs	.+90     	; 0x9842 <__addsf3x+0x98>
    97e8:	1a 16       	cp	r1, r26
    97ea:	f0 40       	sbci	r31, 0x00	; 0
    97ec:	a2 2f       	mov	r26, r18
    97ee:	23 2f       	mov	r18, r19
    97f0:	34 2f       	mov	r19, r20
    97f2:	44 27       	eor	r20, r20
    97f4:	58 5f       	subi	r21, 0xF8	; 248
    97f6:	f3 cf       	rjmp	.-26     	; 0x97de <__addsf3x+0x34>
    97f8:	46 95       	lsr	r20
    97fa:	37 95       	ror	r19
    97fc:	27 95       	ror	r18
    97fe:	a7 95       	ror	r26
    9800:	f0 40       	sbci	r31, 0x00	; 0
    9802:	53 95       	inc	r21
    9804:	c9 f7       	brne	.-14     	; 0x97f8 <__addsf3x+0x4e>
    9806:	7e f4       	brtc	.+30     	; 0x9826 <__addsf3x+0x7c>
    9808:	1f 16       	cp	r1, r31
    980a:	ba 0b       	sbc	r27, r26
    980c:	62 0b       	sbc	r22, r18
    980e:	73 0b       	sbc	r23, r19
    9810:	84 0b       	sbc	r24, r20
    9812:	ba f0       	brmi	.+46     	; 0x9842 <__addsf3x+0x98>
    9814:	91 50       	subi	r25, 0x01	; 1
    9816:	a1 f0       	breq	.+40     	; 0x9840 <__addsf3x+0x96>
    9818:	ff 0f       	add	r31, r31
    981a:	bb 1f       	adc	r27, r27
    981c:	66 1f       	adc	r22, r22
    981e:	77 1f       	adc	r23, r23
    9820:	88 1f       	adc	r24, r24
    9822:	c2 f7       	brpl	.-16     	; 0x9814 <__addsf3x+0x6a>
    9824:	0e c0       	rjmp	.+28     	; 0x9842 <__addsf3x+0x98>
    9826:	ba 0f       	add	r27, r26
    9828:	62 1f       	adc	r22, r18
    982a:	73 1f       	adc	r23, r19
    982c:	84 1f       	adc	r24, r20
    982e:	48 f4       	brcc	.+18     	; 0x9842 <__addsf3x+0x98>
    9830:	87 95       	ror	r24
    9832:	77 95       	ror	r23
    9834:	67 95       	ror	r22
    9836:	b7 95       	ror	r27
    9838:	f7 95       	ror	r31
    983a:	9e 3f       	cpi	r25, 0xFE	; 254
    983c:	08 f0       	brcs	.+2      	; 0x9840 <__addsf3x+0x96>
    983e:	b3 cf       	rjmp	.-154    	; 0x97a6 <__addsf3+0x1e>
    9840:	93 95       	inc	r25
    9842:	88 0f       	add	r24, r24
    9844:	08 f0       	brcs	.+2      	; 0x9848 <__addsf3x+0x9e>
    9846:	99 27       	eor	r25, r25
    9848:	ee 0f       	add	r30, r30
    984a:	97 95       	ror	r25
    984c:	87 95       	ror	r24
    984e:	08 95       	ret

00009850 <__divsf3>:
    9850:	0c d0       	rcall	.+24     	; 0x986a <__divsf3x>
    9852:	e6 c0       	rjmp	.+460    	; 0x9a20 <__fp_round>
    9854:	de d0       	rcall	.+444    	; 0x9a12 <__fp_pscB>
    9856:	40 f0       	brcs	.+16     	; 0x9868 <__divsf3+0x18>
    9858:	d5 d0       	rcall	.+426    	; 0x9a04 <__fp_pscA>
    985a:	30 f0       	brcs	.+12     	; 0x9868 <__divsf3+0x18>
    985c:	21 f4       	brne	.+8      	; 0x9866 <__divsf3+0x16>
    985e:	5f 3f       	cpi	r21, 0xFF	; 255
    9860:	19 f0       	breq	.+6      	; 0x9868 <__divsf3+0x18>
    9862:	c7 c0       	rjmp	.+398    	; 0x99f2 <__fp_inf>
    9864:	51 11       	cpse	r21, r1
    9866:	10 c1       	rjmp	.+544    	; 0x9a88 <__fp_szero>
    9868:	ca c0       	rjmp	.+404    	; 0x99fe <__fp_nan>

0000986a <__divsf3x>:
    986a:	eb d0       	rcall	.+470    	; 0x9a42 <__fp_split3>
    986c:	98 f3       	brcs	.-26     	; 0x9854 <__divsf3+0x4>

0000986e <__divsf3_pse>:
    986e:	99 23       	and	r25, r25
    9870:	c9 f3       	breq	.-14     	; 0x9864 <__divsf3+0x14>
    9872:	55 23       	and	r21, r21
    9874:	b1 f3       	breq	.-20     	; 0x9862 <__divsf3+0x12>
    9876:	95 1b       	sub	r25, r21
    9878:	55 0b       	sbc	r21, r21
    987a:	bb 27       	eor	r27, r27
    987c:	aa 27       	eor	r26, r26
    987e:	62 17       	cp	r22, r18
    9880:	73 07       	cpc	r23, r19
    9882:	84 07       	cpc	r24, r20
    9884:	38 f0       	brcs	.+14     	; 0x9894 <__divsf3_pse+0x26>
    9886:	9f 5f       	subi	r25, 0xFF	; 255
    9888:	5f 4f       	sbci	r21, 0xFF	; 255
    988a:	22 0f       	add	r18, r18
    988c:	33 1f       	adc	r19, r19
    988e:	44 1f       	adc	r20, r20
    9890:	aa 1f       	adc	r26, r26
    9892:	a9 f3       	breq	.-22     	; 0x987e <__divsf3_pse+0x10>
    9894:	33 d0       	rcall	.+102    	; 0x98fc <__divsf3_pse+0x8e>
    9896:	0e 2e       	mov	r0, r30
    9898:	3a f0       	brmi	.+14     	; 0x98a8 <__divsf3_pse+0x3a>
    989a:	e0 e8       	ldi	r30, 0x80	; 128
    989c:	30 d0       	rcall	.+96     	; 0x98fe <__divsf3_pse+0x90>
    989e:	91 50       	subi	r25, 0x01	; 1
    98a0:	50 40       	sbci	r21, 0x00	; 0
    98a2:	e6 95       	lsr	r30
    98a4:	00 1c       	adc	r0, r0
    98a6:	ca f7       	brpl	.-14     	; 0x989a <__divsf3_pse+0x2c>
    98a8:	29 d0       	rcall	.+82     	; 0x98fc <__divsf3_pse+0x8e>
    98aa:	fe 2f       	mov	r31, r30
    98ac:	27 d0       	rcall	.+78     	; 0x98fc <__divsf3_pse+0x8e>
    98ae:	66 0f       	add	r22, r22
    98b0:	77 1f       	adc	r23, r23
    98b2:	88 1f       	adc	r24, r24
    98b4:	bb 1f       	adc	r27, r27
    98b6:	26 17       	cp	r18, r22
    98b8:	37 07       	cpc	r19, r23
    98ba:	48 07       	cpc	r20, r24
    98bc:	ab 07       	cpc	r26, r27
    98be:	b0 e8       	ldi	r27, 0x80	; 128
    98c0:	09 f0       	breq	.+2      	; 0x98c4 <__divsf3_pse+0x56>
    98c2:	bb 0b       	sbc	r27, r27
    98c4:	80 2d       	mov	r24, r0
    98c6:	bf 01       	movw	r22, r30
    98c8:	ff 27       	eor	r31, r31
    98ca:	93 58       	subi	r25, 0x83	; 131
    98cc:	5f 4f       	sbci	r21, 0xFF	; 255
    98ce:	2a f0       	brmi	.+10     	; 0x98da <__divsf3_pse+0x6c>
    98d0:	9e 3f       	cpi	r25, 0xFE	; 254
    98d2:	51 05       	cpc	r21, r1
    98d4:	68 f0       	brcs	.+26     	; 0x98f0 <__divsf3_pse+0x82>
    98d6:	8d c0       	rjmp	.+282    	; 0x99f2 <__fp_inf>
    98d8:	d7 c0       	rjmp	.+430    	; 0x9a88 <__fp_szero>
    98da:	5f 3f       	cpi	r21, 0xFF	; 255
    98dc:	ec f3       	brlt	.-6      	; 0x98d8 <__divsf3_pse+0x6a>
    98de:	98 3e       	cpi	r25, 0xE8	; 232
    98e0:	dc f3       	brlt	.-10     	; 0x98d8 <__divsf3_pse+0x6a>
    98e2:	86 95       	lsr	r24
    98e4:	77 95       	ror	r23
    98e6:	67 95       	ror	r22
    98e8:	b7 95       	ror	r27
    98ea:	f7 95       	ror	r31
    98ec:	9f 5f       	subi	r25, 0xFF	; 255
    98ee:	c9 f7       	brne	.-14     	; 0x98e2 <__divsf3_pse+0x74>
    98f0:	88 0f       	add	r24, r24
    98f2:	91 1d       	adc	r25, r1
    98f4:	96 95       	lsr	r25
    98f6:	87 95       	ror	r24
    98f8:	97 f9       	bld	r25, 7
    98fa:	08 95       	ret
    98fc:	e1 e0       	ldi	r30, 0x01	; 1
    98fe:	66 0f       	add	r22, r22
    9900:	77 1f       	adc	r23, r23
    9902:	88 1f       	adc	r24, r24
    9904:	bb 1f       	adc	r27, r27
    9906:	62 17       	cp	r22, r18
    9908:	73 07       	cpc	r23, r19
    990a:	84 07       	cpc	r24, r20
    990c:	ba 07       	cpc	r27, r26
    990e:	20 f0       	brcs	.+8      	; 0x9918 <__divsf3_pse+0xaa>
    9910:	62 1b       	sub	r22, r18
    9912:	73 0b       	sbc	r23, r19
    9914:	84 0b       	sbc	r24, r20
    9916:	ba 0b       	sbc	r27, r26
    9918:	ee 1f       	adc	r30, r30
    991a:	88 f7       	brcc	.-30     	; 0x98fe <__divsf3_pse+0x90>
    991c:	e0 95       	com	r30
    991e:	08 95       	ret

00009920 <__fixunssfsi>:
    9920:	98 d0       	rcall	.+304    	; 0x9a52 <__fp_splitA>
    9922:	88 f0       	brcs	.+34     	; 0x9946 <__fixunssfsi+0x26>
    9924:	9f 57       	subi	r25, 0x7F	; 127
    9926:	90 f0       	brcs	.+36     	; 0x994c <__fixunssfsi+0x2c>
    9928:	b9 2f       	mov	r27, r25
    992a:	99 27       	eor	r25, r25
    992c:	b7 51       	subi	r27, 0x17	; 23
    992e:	a0 f0       	brcs	.+40     	; 0x9958 <__fixunssfsi+0x38>
    9930:	d1 f0       	breq	.+52     	; 0x9966 <__fixunssfsi+0x46>
    9932:	66 0f       	add	r22, r22
    9934:	77 1f       	adc	r23, r23
    9936:	88 1f       	adc	r24, r24
    9938:	99 1f       	adc	r25, r25
    993a:	1a f0       	brmi	.+6      	; 0x9942 <__fixunssfsi+0x22>
    993c:	ba 95       	dec	r27
    993e:	c9 f7       	brne	.-14     	; 0x9932 <__fixunssfsi+0x12>
    9940:	12 c0       	rjmp	.+36     	; 0x9966 <__fixunssfsi+0x46>
    9942:	b1 30       	cpi	r27, 0x01	; 1
    9944:	81 f0       	breq	.+32     	; 0x9966 <__fixunssfsi+0x46>
    9946:	9f d0       	rcall	.+318    	; 0x9a86 <__fp_zero>
    9948:	b1 e0       	ldi	r27, 0x01	; 1
    994a:	08 95       	ret
    994c:	9c c0       	rjmp	.+312    	; 0x9a86 <__fp_zero>
    994e:	67 2f       	mov	r22, r23
    9950:	78 2f       	mov	r23, r24
    9952:	88 27       	eor	r24, r24
    9954:	b8 5f       	subi	r27, 0xF8	; 248
    9956:	39 f0       	breq	.+14     	; 0x9966 <__fixunssfsi+0x46>
    9958:	b9 3f       	cpi	r27, 0xF9	; 249
    995a:	cc f3       	brlt	.-14     	; 0x994e <__fixunssfsi+0x2e>
    995c:	86 95       	lsr	r24
    995e:	77 95       	ror	r23
    9960:	67 95       	ror	r22
    9962:	b3 95       	inc	r27
    9964:	d9 f7       	brne	.-10     	; 0x995c <__fixunssfsi+0x3c>
    9966:	3e f4       	brtc	.+14     	; 0x9976 <__fixunssfsi+0x56>
    9968:	90 95       	com	r25
    996a:	80 95       	com	r24
    996c:	70 95       	com	r23
    996e:	61 95       	neg	r22
    9970:	7f 4f       	sbci	r23, 0xFF	; 255
    9972:	8f 4f       	sbci	r24, 0xFF	; 255
    9974:	9f 4f       	sbci	r25, 0xFF	; 255
    9976:	08 95       	ret

00009978 <__floatunsisf>:
    9978:	e8 94       	clt
    997a:	09 c0       	rjmp	.+18     	; 0x998e <__floatsisf+0x12>

0000997c <__floatsisf>:
    997c:	97 fb       	bst	r25, 7
    997e:	3e f4       	brtc	.+14     	; 0x998e <__floatsisf+0x12>
    9980:	90 95       	com	r25
    9982:	80 95       	com	r24
    9984:	70 95       	com	r23
    9986:	61 95       	neg	r22
    9988:	7f 4f       	sbci	r23, 0xFF	; 255
    998a:	8f 4f       	sbci	r24, 0xFF	; 255
    998c:	9f 4f       	sbci	r25, 0xFF	; 255
    998e:	99 23       	and	r25, r25
    9990:	a9 f0       	breq	.+42     	; 0x99bc <__floatsisf+0x40>
    9992:	f9 2f       	mov	r31, r25
    9994:	96 e9       	ldi	r25, 0x96	; 150
    9996:	bb 27       	eor	r27, r27
    9998:	93 95       	inc	r25
    999a:	f6 95       	lsr	r31
    999c:	87 95       	ror	r24
    999e:	77 95       	ror	r23
    99a0:	67 95       	ror	r22
    99a2:	b7 95       	ror	r27
    99a4:	f1 11       	cpse	r31, r1
    99a6:	f8 cf       	rjmp	.-16     	; 0x9998 <__floatsisf+0x1c>
    99a8:	fa f4       	brpl	.+62     	; 0x99e8 <__floatsisf+0x6c>
    99aa:	bb 0f       	add	r27, r27
    99ac:	11 f4       	brne	.+4      	; 0x99b2 <__floatsisf+0x36>
    99ae:	60 ff       	sbrs	r22, 0
    99b0:	1b c0       	rjmp	.+54     	; 0x99e8 <__floatsisf+0x6c>
    99b2:	6f 5f       	subi	r22, 0xFF	; 255
    99b4:	7f 4f       	sbci	r23, 0xFF	; 255
    99b6:	8f 4f       	sbci	r24, 0xFF	; 255
    99b8:	9f 4f       	sbci	r25, 0xFF	; 255
    99ba:	16 c0       	rjmp	.+44     	; 0x99e8 <__floatsisf+0x6c>
    99bc:	88 23       	and	r24, r24
    99be:	11 f0       	breq	.+4      	; 0x99c4 <__floatsisf+0x48>
    99c0:	96 e9       	ldi	r25, 0x96	; 150
    99c2:	11 c0       	rjmp	.+34     	; 0x99e6 <__floatsisf+0x6a>
    99c4:	77 23       	and	r23, r23
    99c6:	21 f0       	breq	.+8      	; 0x99d0 <__floatsisf+0x54>
    99c8:	9e e8       	ldi	r25, 0x8E	; 142
    99ca:	87 2f       	mov	r24, r23
    99cc:	76 2f       	mov	r23, r22
    99ce:	05 c0       	rjmp	.+10     	; 0x99da <__floatsisf+0x5e>
    99d0:	66 23       	and	r22, r22
    99d2:	71 f0       	breq	.+28     	; 0x99f0 <__floatsisf+0x74>
    99d4:	96 e8       	ldi	r25, 0x86	; 134
    99d6:	86 2f       	mov	r24, r22
    99d8:	70 e0       	ldi	r23, 0x00	; 0
    99da:	60 e0       	ldi	r22, 0x00	; 0
    99dc:	2a f0       	brmi	.+10     	; 0x99e8 <__floatsisf+0x6c>
    99de:	9a 95       	dec	r25
    99e0:	66 0f       	add	r22, r22
    99e2:	77 1f       	adc	r23, r23
    99e4:	88 1f       	adc	r24, r24
    99e6:	da f7       	brpl	.-10     	; 0x99de <__floatsisf+0x62>
    99e8:	88 0f       	add	r24, r24
    99ea:	96 95       	lsr	r25
    99ec:	87 95       	ror	r24
    99ee:	97 f9       	bld	r25, 7
    99f0:	08 95       	ret

000099f2 <__fp_inf>:
    99f2:	97 f9       	bld	r25, 7
    99f4:	9f 67       	ori	r25, 0x7F	; 127
    99f6:	80 e8       	ldi	r24, 0x80	; 128
    99f8:	70 e0       	ldi	r23, 0x00	; 0
    99fa:	60 e0       	ldi	r22, 0x00	; 0
    99fc:	08 95       	ret

000099fe <__fp_nan>:
    99fe:	9f ef       	ldi	r25, 0xFF	; 255
    9a00:	80 ec       	ldi	r24, 0xC0	; 192
    9a02:	08 95       	ret

00009a04 <__fp_pscA>:
    9a04:	00 24       	eor	r0, r0
    9a06:	0a 94       	dec	r0
    9a08:	16 16       	cp	r1, r22
    9a0a:	17 06       	cpc	r1, r23
    9a0c:	18 06       	cpc	r1, r24
    9a0e:	09 06       	cpc	r0, r25
    9a10:	08 95       	ret

00009a12 <__fp_pscB>:
    9a12:	00 24       	eor	r0, r0
    9a14:	0a 94       	dec	r0
    9a16:	12 16       	cp	r1, r18
    9a18:	13 06       	cpc	r1, r19
    9a1a:	14 06       	cpc	r1, r20
    9a1c:	05 06       	cpc	r0, r21
    9a1e:	08 95       	ret

00009a20 <__fp_round>:
    9a20:	09 2e       	mov	r0, r25
    9a22:	03 94       	inc	r0
    9a24:	00 0c       	add	r0, r0
    9a26:	11 f4       	brne	.+4      	; 0x9a2c <__fp_round+0xc>
    9a28:	88 23       	and	r24, r24
    9a2a:	52 f0       	brmi	.+20     	; 0x9a40 <__fp_round+0x20>
    9a2c:	bb 0f       	add	r27, r27
    9a2e:	40 f4       	brcc	.+16     	; 0x9a40 <__fp_round+0x20>
    9a30:	bf 2b       	or	r27, r31
    9a32:	11 f4       	brne	.+4      	; 0x9a38 <__fp_round+0x18>
    9a34:	60 ff       	sbrs	r22, 0
    9a36:	04 c0       	rjmp	.+8      	; 0x9a40 <__fp_round+0x20>
    9a38:	6f 5f       	subi	r22, 0xFF	; 255
    9a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    9a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a40:	08 95       	ret

00009a42 <__fp_split3>:
    9a42:	57 fd       	sbrc	r21, 7
    9a44:	90 58       	subi	r25, 0x80	; 128
    9a46:	44 0f       	add	r20, r20
    9a48:	55 1f       	adc	r21, r21
    9a4a:	59 f0       	breq	.+22     	; 0x9a62 <__fp_splitA+0x10>
    9a4c:	5f 3f       	cpi	r21, 0xFF	; 255
    9a4e:	71 f0       	breq	.+28     	; 0x9a6c <__fp_splitA+0x1a>
    9a50:	47 95       	ror	r20

00009a52 <__fp_splitA>:
    9a52:	88 0f       	add	r24, r24
    9a54:	97 fb       	bst	r25, 7
    9a56:	99 1f       	adc	r25, r25
    9a58:	61 f0       	breq	.+24     	; 0x9a72 <__fp_splitA+0x20>
    9a5a:	9f 3f       	cpi	r25, 0xFF	; 255
    9a5c:	79 f0       	breq	.+30     	; 0x9a7c <__fp_splitA+0x2a>
    9a5e:	87 95       	ror	r24
    9a60:	08 95       	ret
    9a62:	12 16       	cp	r1, r18
    9a64:	13 06       	cpc	r1, r19
    9a66:	14 06       	cpc	r1, r20
    9a68:	55 1f       	adc	r21, r21
    9a6a:	f2 cf       	rjmp	.-28     	; 0x9a50 <__fp_split3+0xe>
    9a6c:	46 95       	lsr	r20
    9a6e:	f1 df       	rcall	.-30     	; 0x9a52 <__fp_splitA>
    9a70:	08 c0       	rjmp	.+16     	; 0x9a82 <__fp_splitA+0x30>
    9a72:	16 16       	cp	r1, r22
    9a74:	17 06       	cpc	r1, r23
    9a76:	18 06       	cpc	r1, r24
    9a78:	99 1f       	adc	r25, r25
    9a7a:	f1 cf       	rjmp	.-30     	; 0x9a5e <__fp_splitA+0xc>
    9a7c:	86 95       	lsr	r24
    9a7e:	71 05       	cpc	r23, r1
    9a80:	61 05       	cpc	r22, r1
    9a82:	08 94       	sec
    9a84:	08 95       	ret

00009a86 <__fp_zero>:
    9a86:	e8 94       	clt

00009a88 <__fp_szero>:
    9a88:	bb 27       	eor	r27, r27
    9a8a:	66 27       	eor	r22, r22
    9a8c:	77 27       	eor	r23, r23
    9a8e:	cb 01       	movw	r24, r22
    9a90:	97 f9       	bld	r25, 7
    9a92:	08 95       	ret

00009a94 <__gesf2>:
    9a94:	a8 d0       	rcall	.+336    	; 0x9be6 <__fp_cmp>
    9a96:	08 f4       	brcc	.+2      	; 0x9a9a <__gesf2+0x6>
    9a98:	8f ef       	ldi	r24, 0xFF	; 255
    9a9a:	08 95       	ret

00009a9c <__mulsf3>:
    9a9c:	0b d0       	rcall	.+22     	; 0x9ab4 <__mulsf3x>
    9a9e:	c0 cf       	rjmp	.-128    	; 0x9a20 <__fp_round>
    9aa0:	b1 df       	rcall	.-158    	; 0x9a04 <__fp_pscA>
    9aa2:	28 f0       	brcs	.+10     	; 0x9aae <__mulsf3+0x12>
    9aa4:	b6 df       	rcall	.-148    	; 0x9a12 <__fp_pscB>
    9aa6:	18 f0       	brcs	.+6      	; 0x9aae <__mulsf3+0x12>
    9aa8:	95 23       	and	r25, r21
    9aaa:	09 f0       	breq	.+2      	; 0x9aae <__mulsf3+0x12>
    9aac:	a2 cf       	rjmp	.-188    	; 0x99f2 <__fp_inf>
    9aae:	a7 cf       	rjmp	.-178    	; 0x99fe <__fp_nan>
    9ab0:	11 24       	eor	r1, r1
    9ab2:	ea cf       	rjmp	.-44     	; 0x9a88 <__fp_szero>

00009ab4 <__mulsf3x>:
    9ab4:	c6 df       	rcall	.-116    	; 0x9a42 <__fp_split3>
    9ab6:	a0 f3       	brcs	.-24     	; 0x9aa0 <__mulsf3+0x4>

00009ab8 <__mulsf3_pse>:
    9ab8:	95 9f       	mul	r25, r21
    9aba:	d1 f3       	breq	.-12     	; 0x9ab0 <__mulsf3+0x14>
    9abc:	95 0f       	add	r25, r21
    9abe:	50 e0       	ldi	r21, 0x00	; 0
    9ac0:	55 1f       	adc	r21, r21
    9ac2:	62 9f       	mul	r22, r18
    9ac4:	f0 01       	movw	r30, r0
    9ac6:	72 9f       	mul	r23, r18
    9ac8:	bb 27       	eor	r27, r27
    9aca:	f0 0d       	add	r31, r0
    9acc:	b1 1d       	adc	r27, r1
    9ace:	63 9f       	mul	r22, r19
    9ad0:	aa 27       	eor	r26, r26
    9ad2:	f0 0d       	add	r31, r0
    9ad4:	b1 1d       	adc	r27, r1
    9ad6:	aa 1f       	adc	r26, r26
    9ad8:	64 9f       	mul	r22, r20
    9ada:	66 27       	eor	r22, r22
    9adc:	b0 0d       	add	r27, r0
    9ade:	a1 1d       	adc	r26, r1
    9ae0:	66 1f       	adc	r22, r22
    9ae2:	82 9f       	mul	r24, r18
    9ae4:	22 27       	eor	r18, r18
    9ae6:	b0 0d       	add	r27, r0
    9ae8:	a1 1d       	adc	r26, r1
    9aea:	62 1f       	adc	r22, r18
    9aec:	73 9f       	mul	r23, r19
    9aee:	b0 0d       	add	r27, r0
    9af0:	a1 1d       	adc	r26, r1
    9af2:	62 1f       	adc	r22, r18
    9af4:	83 9f       	mul	r24, r19
    9af6:	a0 0d       	add	r26, r0
    9af8:	61 1d       	adc	r22, r1
    9afa:	22 1f       	adc	r18, r18
    9afc:	74 9f       	mul	r23, r20
    9afe:	33 27       	eor	r19, r19
    9b00:	a0 0d       	add	r26, r0
    9b02:	61 1d       	adc	r22, r1
    9b04:	23 1f       	adc	r18, r19
    9b06:	84 9f       	mul	r24, r20
    9b08:	60 0d       	add	r22, r0
    9b0a:	21 1d       	adc	r18, r1
    9b0c:	82 2f       	mov	r24, r18
    9b0e:	76 2f       	mov	r23, r22
    9b10:	6a 2f       	mov	r22, r26
    9b12:	11 24       	eor	r1, r1
    9b14:	9f 57       	subi	r25, 0x7F	; 127
    9b16:	50 40       	sbci	r21, 0x00	; 0
    9b18:	8a f0       	brmi	.+34     	; 0x9b3c <__mulsf3_pse+0x84>
    9b1a:	e1 f0       	breq	.+56     	; 0x9b54 <__mulsf3_pse+0x9c>
    9b1c:	88 23       	and	r24, r24
    9b1e:	4a f0       	brmi	.+18     	; 0x9b32 <__mulsf3_pse+0x7a>
    9b20:	ee 0f       	add	r30, r30
    9b22:	ff 1f       	adc	r31, r31
    9b24:	bb 1f       	adc	r27, r27
    9b26:	66 1f       	adc	r22, r22
    9b28:	77 1f       	adc	r23, r23
    9b2a:	88 1f       	adc	r24, r24
    9b2c:	91 50       	subi	r25, 0x01	; 1
    9b2e:	50 40       	sbci	r21, 0x00	; 0
    9b30:	a9 f7       	brne	.-22     	; 0x9b1c <__mulsf3_pse+0x64>
    9b32:	9e 3f       	cpi	r25, 0xFE	; 254
    9b34:	51 05       	cpc	r21, r1
    9b36:	70 f0       	brcs	.+28     	; 0x9b54 <__mulsf3_pse+0x9c>
    9b38:	5c cf       	rjmp	.-328    	; 0x99f2 <__fp_inf>
    9b3a:	a6 cf       	rjmp	.-180    	; 0x9a88 <__fp_szero>
    9b3c:	5f 3f       	cpi	r21, 0xFF	; 255
    9b3e:	ec f3       	brlt	.-6      	; 0x9b3a <__mulsf3_pse+0x82>
    9b40:	98 3e       	cpi	r25, 0xE8	; 232
    9b42:	dc f3       	brlt	.-10     	; 0x9b3a <__mulsf3_pse+0x82>
    9b44:	86 95       	lsr	r24
    9b46:	77 95       	ror	r23
    9b48:	67 95       	ror	r22
    9b4a:	b7 95       	ror	r27
    9b4c:	f7 95       	ror	r31
    9b4e:	e7 95       	ror	r30
    9b50:	9f 5f       	subi	r25, 0xFF	; 255
    9b52:	c1 f7       	brne	.-16     	; 0x9b44 <__mulsf3_pse+0x8c>
    9b54:	fe 2b       	or	r31, r30
    9b56:	88 0f       	add	r24, r24
    9b58:	91 1d       	adc	r25, r1
    9b5a:	96 95       	lsr	r25
    9b5c:	87 95       	ror	r24
    9b5e:	97 f9       	bld	r25, 7
    9b60:	08 95       	ret
    9b62:	11 f4       	brne	.+4      	; 0x9b68 <__mulsf3_pse+0xb0>
    9b64:	0e f4       	brtc	.+2      	; 0x9b68 <__mulsf3_pse+0xb0>
    9b66:	4b cf       	rjmp	.-362    	; 0x99fe <__fp_nan>
    9b68:	62 c0       	rjmp	.+196    	; 0x9c2e <__fp_mpack>

00009b6a <sqrt>:
    9b6a:	73 df       	rcall	.-282    	; 0x9a52 <__fp_splitA>
    9b6c:	d0 f3       	brcs	.-12     	; 0x9b62 <__mulsf3_pse+0xaa>
    9b6e:	99 23       	and	r25, r25
    9b70:	d9 f3       	breq	.-10     	; 0x9b68 <__mulsf3_pse+0xb0>
    9b72:	ce f3       	brts	.-14     	; 0x9b66 <__mulsf3_pse+0xae>
    9b74:	9f 57       	subi	r25, 0x7F	; 127
    9b76:	55 0b       	sbc	r21, r21
    9b78:	87 ff       	sbrs	r24, 7
    9b7a:	67 d0       	rcall	.+206    	; 0x9c4a <__fp_norm2>
    9b7c:	00 24       	eor	r0, r0
    9b7e:	a0 e6       	ldi	r26, 0x60	; 96
    9b80:	40 ea       	ldi	r20, 0xA0	; 160
    9b82:	90 01       	movw	r18, r0
    9b84:	80 58       	subi	r24, 0x80	; 128
    9b86:	56 95       	lsr	r21
    9b88:	97 95       	ror	r25
    9b8a:	28 f4       	brcc	.+10     	; 0x9b96 <sqrt+0x2c>
    9b8c:	80 5c       	subi	r24, 0xC0	; 192
    9b8e:	66 0f       	add	r22, r22
    9b90:	77 1f       	adc	r23, r23
    9b92:	88 1f       	adc	r24, r24
    9b94:	20 f0       	brcs	.+8      	; 0x9b9e <sqrt+0x34>
    9b96:	26 17       	cp	r18, r22
    9b98:	37 07       	cpc	r19, r23
    9b9a:	48 07       	cpc	r20, r24
    9b9c:	30 f4       	brcc	.+12     	; 0x9baa <sqrt+0x40>
    9b9e:	62 1b       	sub	r22, r18
    9ba0:	73 0b       	sbc	r23, r19
    9ba2:	84 0b       	sbc	r24, r20
    9ba4:	20 29       	or	r18, r0
    9ba6:	31 29       	or	r19, r1
    9ba8:	4a 2b       	or	r20, r26
    9baa:	a6 95       	lsr	r26
    9bac:	17 94       	ror	r1
    9bae:	07 94       	ror	r0
    9bb0:	20 25       	eor	r18, r0
    9bb2:	31 25       	eor	r19, r1
    9bb4:	4a 27       	eor	r20, r26
    9bb6:	58 f7       	brcc	.-42     	; 0x9b8e <sqrt+0x24>
    9bb8:	66 0f       	add	r22, r22
    9bba:	77 1f       	adc	r23, r23
    9bbc:	88 1f       	adc	r24, r24
    9bbe:	20 f0       	brcs	.+8      	; 0x9bc8 <sqrt+0x5e>
    9bc0:	26 17       	cp	r18, r22
    9bc2:	37 07       	cpc	r19, r23
    9bc4:	48 07       	cpc	r20, r24
    9bc6:	30 f4       	brcc	.+12     	; 0x9bd4 <sqrt+0x6a>
    9bc8:	62 0b       	sbc	r22, r18
    9bca:	73 0b       	sbc	r23, r19
    9bcc:	84 0b       	sbc	r24, r20
    9bce:	20 0d       	add	r18, r0
    9bd0:	31 1d       	adc	r19, r1
    9bd2:	41 1d       	adc	r20, r1
    9bd4:	a0 95       	com	r26
    9bd6:	81 f7       	brne	.-32     	; 0x9bb8 <sqrt+0x4e>
    9bd8:	b9 01       	movw	r22, r18
    9bda:	84 2f       	mov	r24, r20
    9bdc:	91 58       	subi	r25, 0x81	; 129
    9bde:	88 0f       	add	r24, r24
    9be0:	96 95       	lsr	r25
    9be2:	87 95       	ror	r24
    9be4:	08 95       	ret

00009be6 <__fp_cmp>:
    9be6:	99 0f       	add	r25, r25
    9be8:	00 08       	sbc	r0, r0
    9bea:	55 0f       	add	r21, r21
    9bec:	aa 0b       	sbc	r26, r26
    9bee:	e0 e8       	ldi	r30, 0x80	; 128
    9bf0:	fe ef       	ldi	r31, 0xFE	; 254
    9bf2:	16 16       	cp	r1, r22
    9bf4:	17 06       	cpc	r1, r23
    9bf6:	e8 07       	cpc	r30, r24
    9bf8:	f9 07       	cpc	r31, r25
    9bfa:	c0 f0       	brcs	.+48     	; 0x9c2c <__fp_cmp+0x46>
    9bfc:	12 16       	cp	r1, r18
    9bfe:	13 06       	cpc	r1, r19
    9c00:	e4 07       	cpc	r30, r20
    9c02:	f5 07       	cpc	r31, r21
    9c04:	98 f0       	brcs	.+38     	; 0x9c2c <__fp_cmp+0x46>
    9c06:	62 1b       	sub	r22, r18
    9c08:	73 0b       	sbc	r23, r19
    9c0a:	84 0b       	sbc	r24, r20
    9c0c:	95 0b       	sbc	r25, r21
    9c0e:	39 f4       	brne	.+14     	; 0x9c1e <__fp_cmp+0x38>
    9c10:	0a 26       	eor	r0, r26
    9c12:	61 f0       	breq	.+24     	; 0x9c2c <__fp_cmp+0x46>
    9c14:	23 2b       	or	r18, r19
    9c16:	24 2b       	or	r18, r20
    9c18:	25 2b       	or	r18, r21
    9c1a:	21 f4       	brne	.+8      	; 0x9c24 <__fp_cmp+0x3e>
    9c1c:	08 95       	ret
    9c1e:	0a 26       	eor	r0, r26
    9c20:	09 f4       	brne	.+2      	; 0x9c24 <__fp_cmp+0x3e>
    9c22:	a1 40       	sbci	r26, 0x01	; 1
    9c24:	a6 95       	lsr	r26
    9c26:	8f ef       	ldi	r24, 0xFF	; 255
    9c28:	81 1d       	adc	r24, r1
    9c2a:	81 1d       	adc	r24, r1
    9c2c:	08 95       	ret

00009c2e <__fp_mpack>:
    9c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    9c30:	31 f0       	breq	.+12     	; 0x9c3e <__fp_mpack_finite+0xc>

00009c32 <__fp_mpack_finite>:
    9c32:	91 50       	subi	r25, 0x01	; 1
    9c34:	20 f4       	brcc	.+8      	; 0x9c3e <__fp_mpack_finite+0xc>
    9c36:	87 95       	ror	r24
    9c38:	77 95       	ror	r23
    9c3a:	67 95       	ror	r22
    9c3c:	b7 95       	ror	r27
    9c3e:	88 0f       	add	r24, r24
    9c40:	91 1d       	adc	r25, r1
    9c42:	96 95       	lsr	r25
    9c44:	87 95       	ror	r24
    9c46:	97 f9       	bld	r25, 7
    9c48:	08 95       	ret

00009c4a <__fp_norm2>:
    9c4a:	91 50       	subi	r25, 0x01	; 1
    9c4c:	50 40       	sbci	r21, 0x00	; 0
    9c4e:	66 0f       	add	r22, r22
    9c50:	77 1f       	adc	r23, r23
    9c52:	88 1f       	adc	r24, r24
    9c54:	d2 f7       	brpl	.-12     	; 0x9c4a <__fp_norm2>
    9c56:	08 95       	ret

00009c58 <__mulsi3>:
    9c58:	62 9f       	mul	r22, r18
    9c5a:	d0 01       	movw	r26, r0
    9c5c:	73 9f       	mul	r23, r19
    9c5e:	f0 01       	movw	r30, r0
    9c60:	82 9f       	mul	r24, r18
    9c62:	e0 0d       	add	r30, r0
    9c64:	f1 1d       	adc	r31, r1
    9c66:	64 9f       	mul	r22, r20
    9c68:	e0 0d       	add	r30, r0
    9c6a:	f1 1d       	adc	r31, r1
    9c6c:	92 9f       	mul	r25, r18
    9c6e:	f0 0d       	add	r31, r0
    9c70:	83 9f       	mul	r24, r19
    9c72:	f0 0d       	add	r31, r0
    9c74:	74 9f       	mul	r23, r20
    9c76:	f0 0d       	add	r31, r0
    9c78:	65 9f       	mul	r22, r21
    9c7a:	f0 0d       	add	r31, r0
    9c7c:	99 27       	eor	r25, r25
    9c7e:	72 9f       	mul	r23, r18
    9c80:	b0 0d       	add	r27, r0
    9c82:	e1 1d       	adc	r30, r1
    9c84:	f9 1f       	adc	r31, r25
    9c86:	63 9f       	mul	r22, r19
    9c88:	b0 0d       	add	r27, r0
    9c8a:	e1 1d       	adc	r30, r1
    9c8c:	f9 1f       	adc	r31, r25
    9c8e:	bd 01       	movw	r22, r26
    9c90:	cf 01       	movw	r24, r30
    9c92:	11 24       	eor	r1, r1
    9c94:	08 95       	ret

00009c96 <__divmodhi4>:
    9c96:	97 fb       	bst	r25, 7
    9c98:	09 2e       	mov	r0, r25
    9c9a:	07 26       	eor	r0, r23
    9c9c:	0a d0       	rcall	.+20     	; 0x9cb2 <__divmodhi4_neg1>
    9c9e:	77 fd       	sbrc	r23, 7
    9ca0:	04 d0       	rcall	.+8      	; 0x9caa <__divmodhi4_neg2>
    9ca2:	65 d0       	rcall	.+202    	; 0x9d6e <__udivmodhi4>
    9ca4:	06 d0       	rcall	.+12     	; 0x9cb2 <__divmodhi4_neg1>
    9ca6:	00 20       	and	r0, r0
    9ca8:	1a f4       	brpl	.+6      	; 0x9cb0 <__divmodhi4_exit>

00009caa <__divmodhi4_neg2>:
    9caa:	70 95       	com	r23
    9cac:	61 95       	neg	r22
    9cae:	7f 4f       	sbci	r23, 0xFF	; 255

00009cb0 <__divmodhi4_exit>:
    9cb0:	08 95       	ret

00009cb2 <__divmodhi4_neg1>:
    9cb2:	f6 f7       	brtc	.-4      	; 0x9cb0 <__divmodhi4_exit>
    9cb4:	90 95       	com	r25
    9cb6:	81 95       	neg	r24
    9cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    9cba:	08 95       	ret

00009cbc <__udivmodsi4>:
    9cbc:	a1 e2       	ldi	r26, 0x21	; 33
    9cbe:	1a 2e       	mov	r1, r26
    9cc0:	aa 1b       	sub	r26, r26
    9cc2:	bb 1b       	sub	r27, r27
    9cc4:	fd 01       	movw	r30, r26
    9cc6:	0d c0       	rjmp	.+26     	; 0x9ce2 <__udivmodsi4_ep>

00009cc8 <__udivmodsi4_loop>:
    9cc8:	aa 1f       	adc	r26, r26
    9cca:	bb 1f       	adc	r27, r27
    9ccc:	ee 1f       	adc	r30, r30
    9cce:	ff 1f       	adc	r31, r31
    9cd0:	a2 17       	cp	r26, r18
    9cd2:	b3 07       	cpc	r27, r19
    9cd4:	e4 07       	cpc	r30, r20
    9cd6:	f5 07       	cpc	r31, r21
    9cd8:	20 f0       	brcs	.+8      	; 0x9ce2 <__udivmodsi4_ep>
    9cda:	a2 1b       	sub	r26, r18
    9cdc:	b3 0b       	sbc	r27, r19
    9cde:	e4 0b       	sbc	r30, r20
    9ce0:	f5 0b       	sbc	r31, r21

00009ce2 <__udivmodsi4_ep>:
    9ce2:	66 1f       	adc	r22, r22
    9ce4:	77 1f       	adc	r23, r23
    9ce6:	88 1f       	adc	r24, r24
    9ce8:	99 1f       	adc	r25, r25
    9cea:	1a 94       	dec	r1
    9cec:	69 f7       	brne	.-38     	; 0x9cc8 <__udivmodsi4_loop>
    9cee:	60 95       	com	r22
    9cf0:	70 95       	com	r23
    9cf2:	80 95       	com	r24
    9cf4:	90 95       	com	r25
    9cf6:	9b 01       	movw	r18, r22
    9cf8:	ac 01       	movw	r20, r24
    9cfa:	bd 01       	movw	r22, r26
    9cfc:	cf 01       	movw	r24, r30
    9cfe:	08 95       	ret

00009d00 <__prologue_saves__>:
    9d00:	2f 92       	push	r2
    9d02:	3f 92       	push	r3
    9d04:	4f 92       	push	r4
    9d06:	5f 92       	push	r5
    9d08:	6f 92       	push	r6
    9d0a:	7f 92       	push	r7
    9d0c:	8f 92       	push	r8
    9d0e:	9f 92       	push	r9
    9d10:	af 92       	push	r10
    9d12:	bf 92       	push	r11
    9d14:	cf 92       	push	r12
    9d16:	df 92       	push	r13
    9d18:	ef 92       	push	r14
    9d1a:	ff 92       	push	r15
    9d1c:	0f 93       	push	r16
    9d1e:	1f 93       	push	r17
    9d20:	cf 93       	push	r28
    9d22:	df 93       	push	r29
    9d24:	cd b7       	in	r28, 0x3d	; 61
    9d26:	de b7       	in	r29, 0x3e	; 62
    9d28:	ca 1b       	sub	r28, r26
    9d2a:	db 0b       	sbc	r29, r27
    9d2c:	0f b6       	in	r0, 0x3f	; 63
    9d2e:	f8 94       	cli
    9d30:	de bf       	out	0x3e, r29	; 62
    9d32:	0f be       	out	0x3f, r0	; 63
    9d34:	cd bf       	out	0x3d, r28	; 61
    9d36:	09 94       	ijmp

00009d38 <__epilogue_restores__>:
    9d38:	2a 88       	ldd	r2, Y+18	; 0x12
    9d3a:	39 88       	ldd	r3, Y+17	; 0x11
    9d3c:	48 88       	ldd	r4, Y+16	; 0x10
    9d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    9d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    9d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    9d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    9d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    9d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    9d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    9d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    9d4e:	df 80       	ldd	r13, Y+7	; 0x07
    9d50:	ee 80       	ldd	r14, Y+6	; 0x06
    9d52:	fd 80       	ldd	r15, Y+5	; 0x05
    9d54:	0c 81       	ldd	r16, Y+4	; 0x04
    9d56:	1b 81       	ldd	r17, Y+3	; 0x03
    9d58:	aa 81       	ldd	r26, Y+2	; 0x02
    9d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    9d5c:	ce 0f       	add	r28, r30
    9d5e:	d1 1d       	adc	r29, r1
    9d60:	0f b6       	in	r0, 0x3f	; 63
    9d62:	f8 94       	cli
    9d64:	de bf       	out	0x3e, r29	; 62
    9d66:	0f be       	out	0x3f, r0	; 63
    9d68:	cd bf       	out	0x3d, r28	; 61
    9d6a:	ed 01       	movw	r28, r26
    9d6c:	08 95       	ret

00009d6e <__udivmodhi4>:
    9d6e:	aa 1b       	sub	r26, r26
    9d70:	bb 1b       	sub	r27, r27
    9d72:	51 e1       	ldi	r21, 0x11	; 17
    9d74:	07 c0       	rjmp	.+14     	; 0x9d84 <__udivmodhi4_ep>

00009d76 <__udivmodhi4_loop>:
    9d76:	aa 1f       	adc	r26, r26
    9d78:	bb 1f       	adc	r27, r27
    9d7a:	a6 17       	cp	r26, r22
    9d7c:	b7 07       	cpc	r27, r23
    9d7e:	10 f0       	brcs	.+4      	; 0x9d84 <__udivmodhi4_ep>
    9d80:	a6 1b       	sub	r26, r22
    9d82:	b7 0b       	sbc	r27, r23

00009d84 <__udivmodhi4_ep>:
    9d84:	88 1f       	adc	r24, r24
    9d86:	99 1f       	adc	r25, r25
    9d88:	5a 95       	dec	r21
    9d8a:	a9 f7       	brne	.-22     	; 0x9d76 <__udivmodhi4_loop>
    9d8c:	80 95       	com	r24
    9d8e:	90 95       	com	r25
    9d90:	bc 01       	movw	r22, r24
    9d92:	cd 01       	movw	r24, r26
    9d94:	08 95       	ret

00009d96 <do_rand>:
    9d96:	a0 e0       	ldi	r26, 0x00	; 0
    9d98:	b0 e0       	ldi	r27, 0x00	; 0
    9d9a:	e1 ed       	ldi	r30, 0xD1	; 209
    9d9c:	fe e4       	ldi	r31, 0x4E	; 78
    9d9e:	0c 94 88 4e 	jmp	0x9d10	; 0x9d10 <__prologue_saves__+0x10>
    9da2:	ec 01       	movw	r28, r24
    9da4:	a8 80       	ld	r10, Y
    9da6:	b9 80       	ldd	r11, Y+1	; 0x01
    9da8:	ca 80       	ldd	r12, Y+2	; 0x02
    9daa:	db 80       	ldd	r13, Y+3	; 0x03
    9dac:	a1 14       	cp	r10, r1
    9dae:	b1 04       	cpc	r11, r1
    9db0:	c1 04       	cpc	r12, r1
    9db2:	d1 04       	cpc	r13, r1
    9db4:	41 f4       	brne	.+16     	; 0x9dc6 <do_rand+0x30>
    9db6:	84 e2       	ldi	r24, 0x24	; 36
    9db8:	a8 2e       	mov	r10, r24
    9dba:	89 ed       	ldi	r24, 0xD9	; 217
    9dbc:	b8 2e       	mov	r11, r24
    9dbe:	8b e5       	ldi	r24, 0x5B	; 91
    9dc0:	c8 2e       	mov	r12, r24
    9dc2:	87 e0       	ldi	r24, 0x07	; 7
    9dc4:	d8 2e       	mov	r13, r24
    9dc6:	c6 01       	movw	r24, r12
    9dc8:	b5 01       	movw	r22, r10
    9dca:	2d e1       	ldi	r18, 0x1D	; 29
    9dcc:	33 ef       	ldi	r19, 0xF3	; 243
    9dce:	41 e0       	ldi	r20, 0x01	; 1
    9dd0:	50 e0       	ldi	r21, 0x00	; 0
    9dd2:	0e 94 6f 51 	call	0xa2de	; 0xa2de <__divmodsi4>
    9dd6:	27 ea       	ldi	r18, 0xA7	; 167
    9dd8:	31 e4       	ldi	r19, 0x41	; 65
    9dda:	40 e0       	ldi	r20, 0x00	; 0
    9ddc:	50 e0       	ldi	r21, 0x00	; 0
    9dde:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <__mulsi3>
    9de2:	7b 01       	movw	r14, r22
    9de4:	8c 01       	movw	r16, r24
    9de6:	c6 01       	movw	r24, r12
    9de8:	b5 01       	movw	r22, r10
    9dea:	2d e1       	ldi	r18, 0x1D	; 29
    9dec:	33 ef       	ldi	r19, 0xF3	; 243
    9dee:	41 e0       	ldi	r20, 0x01	; 1
    9df0:	50 e0       	ldi	r21, 0x00	; 0
    9df2:	0e 94 6f 51 	call	0xa2de	; 0xa2de <__divmodsi4>
    9df6:	ca 01       	movw	r24, r20
    9df8:	b9 01       	movw	r22, r18
    9dfa:	2c ee       	ldi	r18, 0xEC	; 236
    9dfc:	34 ef       	ldi	r19, 0xF4	; 244
    9dfe:	4f ef       	ldi	r20, 0xFF	; 255
    9e00:	5f ef       	ldi	r21, 0xFF	; 255
    9e02:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <__mulsi3>
    9e06:	6e 0d       	add	r22, r14
    9e08:	7f 1d       	adc	r23, r15
    9e0a:	80 1f       	adc	r24, r16
    9e0c:	91 1f       	adc	r25, r17
    9e0e:	97 ff       	sbrs	r25, 7
    9e10:	04 c0       	rjmp	.+8      	; 0x9e1a <do_rand+0x84>
    9e12:	61 50       	subi	r22, 0x01	; 1
    9e14:	70 40       	sbci	r23, 0x00	; 0
    9e16:	80 40       	sbci	r24, 0x00	; 0
    9e18:	90 48       	sbci	r25, 0x80	; 128
    9e1a:	68 83       	st	Y, r22
    9e1c:	79 83       	std	Y+1, r23	; 0x01
    9e1e:	8a 83       	std	Y+2, r24	; 0x02
    9e20:	9b 83       	std	Y+3, r25	; 0x03
    9e22:	9b 01       	movw	r18, r22
    9e24:	3f 77       	andi	r19, 0x7F	; 127
    9e26:	c9 01       	movw	r24, r18
    9e28:	cd b7       	in	r28, 0x3d	; 61
    9e2a:	de b7       	in	r29, 0x3e	; 62
    9e2c:	ea e0       	ldi	r30, 0x0A	; 10
    9e2e:	0c 94 a4 4e 	jmp	0x9d48	; 0x9d48 <__epilogue_restores__+0x10>

00009e32 <rand_r>:
    9e32:	0e 94 cb 4e 	call	0x9d96	; 0x9d96 <do_rand>
    9e36:	08 95       	ret

00009e38 <rand>:
    9e38:	86 e6       	ldi	r24, 0x66	; 102
    9e3a:	91 e0       	ldi	r25, 0x01	; 1
    9e3c:	0e 94 cb 4e 	call	0x9d96	; 0x9d96 <do_rand>
    9e40:	08 95       	ret

00009e42 <srand>:
    9e42:	a0 e0       	ldi	r26, 0x00	; 0
    9e44:	b0 e0       	ldi	r27, 0x00	; 0
    9e46:	80 93 66 01 	sts	0x0166, r24
    9e4a:	90 93 67 01 	sts	0x0167, r25
    9e4e:	a0 93 68 01 	sts	0x0168, r26
    9e52:	b0 93 69 01 	sts	0x0169, r27
    9e56:	08 95       	ret

00009e58 <atoi>:
    9e58:	fc 01       	movw	r30, r24
    9e5a:	88 27       	eor	r24, r24
    9e5c:	99 27       	eor	r25, r25
    9e5e:	e8 94       	clt
    9e60:	21 91       	ld	r18, Z+
    9e62:	20 32       	cpi	r18, 0x20	; 32
    9e64:	e9 f3       	breq	.-6      	; 0x9e60 <atoi+0x8>
    9e66:	29 30       	cpi	r18, 0x09	; 9
    9e68:	10 f0       	brcs	.+4      	; 0x9e6e <atoi+0x16>
    9e6a:	2e 30       	cpi	r18, 0x0E	; 14
    9e6c:	c8 f3       	brcs	.-14     	; 0x9e60 <atoi+0x8>
    9e6e:	2b 32       	cpi	r18, 0x2B	; 43
    9e70:	41 f0       	breq	.+16     	; 0x9e82 <atoi+0x2a>
    9e72:	2d 32       	cpi	r18, 0x2D	; 45
    9e74:	39 f4       	brne	.+14     	; 0x9e84 <atoi+0x2c>
    9e76:	68 94       	set
    9e78:	04 c0       	rjmp	.+8      	; 0x9e82 <atoi+0x2a>
    9e7a:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <__mulhi_const_10>
    9e7e:	82 0f       	add	r24, r18
    9e80:	91 1d       	adc	r25, r1
    9e82:	21 91       	ld	r18, Z+
    9e84:	20 53       	subi	r18, 0x30	; 48
    9e86:	2a 30       	cpi	r18, 0x0A	; 10
    9e88:	c0 f3       	brcs	.-16     	; 0x9e7a <atoi+0x22>
    9e8a:	1e f4       	brtc	.+6      	; 0x9e92 <atoi+0x3a>
    9e8c:	90 95       	com	r25
    9e8e:	81 95       	neg	r24
    9e90:	9f 4f       	sbci	r25, 0xFF	; 255
    9e92:	08 95       	ret

00009e94 <__ftoa_engine>:
    9e94:	28 30       	cpi	r18, 0x08	; 8
    9e96:	08 f0       	brcs	.+2      	; 0x9e9a <__ftoa_engine+0x6>
    9e98:	27 e0       	ldi	r18, 0x07	; 7
    9e9a:	33 27       	eor	r19, r19
    9e9c:	da 01       	movw	r26, r20
    9e9e:	99 0f       	add	r25, r25
    9ea0:	31 1d       	adc	r19, r1
    9ea2:	87 fd       	sbrc	r24, 7
    9ea4:	91 60       	ori	r25, 0x01	; 1
    9ea6:	00 96       	adiw	r24, 0x00	; 0
    9ea8:	61 05       	cpc	r22, r1
    9eaa:	71 05       	cpc	r23, r1
    9eac:	39 f4       	brne	.+14     	; 0x9ebc <__ftoa_engine+0x28>
    9eae:	32 60       	ori	r19, 0x02	; 2
    9eb0:	2e 5f       	subi	r18, 0xFE	; 254
    9eb2:	3d 93       	st	X+, r19
    9eb4:	30 e3       	ldi	r19, 0x30	; 48
    9eb6:	2a 95       	dec	r18
    9eb8:	e1 f7       	brne	.-8      	; 0x9eb2 <__ftoa_engine+0x1e>
    9eba:	08 95       	ret
    9ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    9ebe:	30 f0       	brcs	.+12     	; 0x9ecc <__ftoa_engine+0x38>
    9ec0:	80 38       	cpi	r24, 0x80	; 128
    9ec2:	71 05       	cpc	r23, r1
    9ec4:	61 05       	cpc	r22, r1
    9ec6:	09 f0       	breq	.+2      	; 0x9eca <__ftoa_engine+0x36>
    9ec8:	3c 5f       	subi	r19, 0xFC	; 252
    9eca:	3c 5f       	subi	r19, 0xFC	; 252
    9ecc:	3d 93       	st	X+, r19
    9ece:	91 30       	cpi	r25, 0x01	; 1
    9ed0:	08 f0       	brcs	.+2      	; 0x9ed4 <__ftoa_engine+0x40>
    9ed2:	80 68       	ori	r24, 0x80	; 128
    9ed4:	91 1d       	adc	r25, r1
    9ed6:	df 93       	push	r29
    9ed8:	cf 93       	push	r28
    9eda:	1f 93       	push	r17
    9edc:	0f 93       	push	r16
    9ede:	ff 92       	push	r15
    9ee0:	ef 92       	push	r14
    9ee2:	19 2f       	mov	r17, r25
    9ee4:	98 7f       	andi	r25, 0xF8	; 248
    9ee6:	96 95       	lsr	r25
    9ee8:	e9 2f       	mov	r30, r25
    9eea:	96 95       	lsr	r25
    9eec:	96 95       	lsr	r25
    9eee:	e9 0f       	add	r30, r25
    9ef0:	ff 27       	eor	r31, r31
    9ef2:	ef 58       	subi	r30, 0x8F	; 143
    9ef4:	f4 4f       	sbci	r31, 0xF4	; 244
    9ef6:	99 27       	eor	r25, r25
    9ef8:	33 27       	eor	r19, r19
    9efa:	ee 24       	eor	r14, r14
    9efc:	ff 24       	eor	r15, r15
    9efe:	a7 01       	movw	r20, r14
    9f00:	e7 01       	movw	r28, r14
    9f02:	05 90       	lpm	r0, Z+
    9f04:	08 94       	sec
    9f06:	07 94       	ror	r0
    9f08:	28 f4       	brcc	.+10     	; 0x9f14 <__ftoa_engine+0x80>
    9f0a:	36 0f       	add	r19, r22
    9f0c:	e7 1e       	adc	r14, r23
    9f0e:	f8 1e       	adc	r15, r24
    9f10:	49 1f       	adc	r20, r25
    9f12:	51 1d       	adc	r21, r1
    9f14:	66 0f       	add	r22, r22
    9f16:	77 1f       	adc	r23, r23
    9f18:	88 1f       	adc	r24, r24
    9f1a:	99 1f       	adc	r25, r25
    9f1c:	06 94       	lsr	r0
    9f1e:	a1 f7       	brne	.-24     	; 0x9f08 <__ftoa_engine+0x74>
    9f20:	05 90       	lpm	r0, Z+
    9f22:	07 94       	ror	r0
    9f24:	28 f4       	brcc	.+10     	; 0x9f30 <__ftoa_engine+0x9c>
    9f26:	e7 0e       	add	r14, r23
    9f28:	f8 1e       	adc	r15, r24
    9f2a:	49 1f       	adc	r20, r25
    9f2c:	56 1f       	adc	r21, r22
    9f2e:	c1 1d       	adc	r28, r1
    9f30:	77 0f       	add	r23, r23
    9f32:	88 1f       	adc	r24, r24
    9f34:	99 1f       	adc	r25, r25
    9f36:	66 1f       	adc	r22, r22
    9f38:	06 94       	lsr	r0
    9f3a:	a1 f7       	brne	.-24     	; 0x9f24 <__ftoa_engine+0x90>
    9f3c:	05 90       	lpm	r0, Z+
    9f3e:	07 94       	ror	r0
    9f40:	28 f4       	brcc	.+10     	; 0x9f4c <__ftoa_engine+0xb8>
    9f42:	f8 0e       	add	r15, r24
    9f44:	49 1f       	adc	r20, r25
    9f46:	56 1f       	adc	r21, r22
    9f48:	c7 1f       	adc	r28, r23
    9f4a:	d1 1d       	adc	r29, r1
    9f4c:	88 0f       	add	r24, r24
    9f4e:	99 1f       	adc	r25, r25
    9f50:	66 1f       	adc	r22, r22
    9f52:	77 1f       	adc	r23, r23
    9f54:	06 94       	lsr	r0
    9f56:	a1 f7       	brne	.-24     	; 0x9f40 <__ftoa_engine+0xac>
    9f58:	05 90       	lpm	r0, Z+
    9f5a:	07 94       	ror	r0
    9f5c:	20 f4       	brcc	.+8      	; 0x9f66 <__ftoa_engine+0xd2>
    9f5e:	49 0f       	add	r20, r25
    9f60:	56 1f       	adc	r21, r22
    9f62:	c7 1f       	adc	r28, r23
    9f64:	d8 1f       	adc	r29, r24
    9f66:	99 0f       	add	r25, r25
    9f68:	66 1f       	adc	r22, r22
    9f6a:	77 1f       	adc	r23, r23
    9f6c:	88 1f       	adc	r24, r24
    9f6e:	06 94       	lsr	r0
    9f70:	a9 f7       	brne	.-22     	; 0x9f5c <__ftoa_engine+0xc8>
    9f72:	84 91       	lpm	r24, Z+
    9f74:	10 95       	com	r17
    9f76:	17 70       	andi	r17, 0x07	; 7
    9f78:	41 f0       	breq	.+16     	; 0x9f8a <__ftoa_engine+0xf6>
    9f7a:	d6 95       	lsr	r29
    9f7c:	c7 95       	ror	r28
    9f7e:	57 95       	ror	r21
    9f80:	47 95       	ror	r20
    9f82:	f7 94       	ror	r15
    9f84:	e7 94       	ror	r14
    9f86:	1a 95       	dec	r17
    9f88:	c1 f7       	brne	.-16     	; 0x9f7a <__ftoa_engine+0xe6>
    9f8a:	e7 e1       	ldi	r30, 0x17	; 23
    9f8c:	fb e0       	ldi	r31, 0x0B	; 11
    9f8e:	68 94       	set
    9f90:	15 90       	lpm	r1, Z+
    9f92:	15 91       	lpm	r17, Z+
    9f94:	35 91       	lpm	r19, Z+
    9f96:	65 91       	lpm	r22, Z+
    9f98:	95 91       	lpm	r25, Z+
    9f9a:	05 90       	lpm	r0, Z+
    9f9c:	7f e2       	ldi	r23, 0x2F	; 47
    9f9e:	73 95       	inc	r23
    9fa0:	e1 18       	sub	r14, r1
    9fa2:	f1 0a       	sbc	r15, r17
    9fa4:	43 0b       	sbc	r20, r19
    9fa6:	56 0b       	sbc	r21, r22
    9fa8:	c9 0b       	sbc	r28, r25
    9faa:	d0 09       	sbc	r29, r0
    9fac:	c0 f7       	brcc	.-16     	; 0x9f9e <__ftoa_engine+0x10a>
    9fae:	e1 0c       	add	r14, r1
    9fb0:	f1 1e       	adc	r15, r17
    9fb2:	43 1f       	adc	r20, r19
    9fb4:	56 1f       	adc	r21, r22
    9fb6:	c9 1f       	adc	r28, r25
    9fb8:	d0 1d       	adc	r29, r0
    9fba:	7e f4       	brtc	.+30     	; 0x9fda <__ftoa_engine+0x146>
    9fbc:	70 33       	cpi	r23, 0x30	; 48
    9fbe:	11 f4       	brne	.+4      	; 0x9fc4 <__ftoa_engine+0x130>
    9fc0:	8a 95       	dec	r24
    9fc2:	e6 cf       	rjmp	.-52     	; 0x9f90 <__ftoa_engine+0xfc>
    9fc4:	e8 94       	clt
    9fc6:	01 50       	subi	r16, 0x01	; 1
    9fc8:	30 f0       	brcs	.+12     	; 0x9fd6 <__ftoa_engine+0x142>
    9fca:	08 0f       	add	r16, r24
    9fcc:	0a f4       	brpl	.+2      	; 0x9fd0 <__ftoa_engine+0x13c>
    9fce:	00 27       	eor	r16, r16
    9fd0:	02 17       	cp	r16, r18
    9fd2:	08 f4       	brcc	.+2      	; 0x9fd6 <__ftoa_engine+0x142>
    9fd4:	20 2f       	mov	r18, r16
    9fd6:	23 95       	inc	r18
    9fd8:	02 2f       	mov	r16, r18
    9fda:	7a 33       	cpi	r23, 0x3A	; 58
    9fdc:	28 f0       	brcs	.+10     	; 0x9fe8 <__ftoa_engine+0x154>
    9fde:	79 e3       	ldi	r23, 0x39	; 57
    9fe0:	7d 93       	st	X+, r23
    9fe2:	2a 95       	dec	r18
    9fe4:	e9 f7       	brne	.-6      	; 0x9fe0 <__ftoa_engine+0x14c>
    9fe6:	10 c0       	rjmp	.+32     	; 0xa008 <__ftoa_engine+0x174>
    9fe8:	7d 93       	st	X+, r23
    9fea:	2a 95       	dec	r18
    9fec:	89 f6       	brne	.-94     	; 0x9f90 <__ftoa_engine+0xfc>
    9fee:	06 94       	lsr	r0
    9ff0:	97 95       	ror	r25
    9ff2:	67 95       	ror	r22
    9ff4:	37 95       	ror	r19
    9ff6:	17 95       	ror	r17
    9ff8:	17 94       	ror	r1
    9ffa:	e1 18       	sub	r14, r1
    9ffc:	f1 0a       	sbc	r15, r17
    9ffe:	43 0b       	sbc	r20, r19
    a000:	56 0b       	sbc	r21, r22
    a002:	c9 0b       	sbc	r28, r25
    a004:	d0 09       	sbc	r29, r0
    a006:	98 f0       	brcs	.+38     	; 0xa02e <__ftoa_engine+0x19a>
    a008:	23 95       	inc	r18
    a00a:	7e 91       	ld	r23, -X
    a00c:	73 95       	inc	r23
    a00e:	7a 33       	cpi	r23, 0x3A	; 58
    a010:	08 f0       	brcs	.+2      	; 0xa014 <__ftoa_engine+0x180>
    a012:	70 e3       	ldi	r23, 0x30	; 48
    a014:	7c 93       	st	X, r23
    a016:	20 13       	cpse	r18, r16
    a018:	b8 f7       	brcc	.-18     	; 0xa008 <__ftoa_engine+0x174>
    a01a:	7e 91       	ld	r23, -X
    a01c:	70 61       	ori	r23, 0x10	; 16
    a01e:	7d 93       	st	X+, r23
    a020:	30 f0       	brcs	.+12     	; 0xa02e <__ftoa_engine+0x19a>
    a022:	83 95       	inc	r24
    a024:	71 e3       	ldi	r23, 0x31	; 49
    a026:	7d 93       	st	X+, r23
    a028:	70 e3       	ldi	r23, 0x30	; 48
    a02a:	2a 95       	dec	r18
    a02c:	e1 f7       	brne	.-8      	; 0xa026 <__ftoa_engine+0x192>
    a02e:	11 24       	eor	r1, r1
    a030:	ef 90       	pop	r14
    a032:	ff 90       	pop	r15
    a034:	0f 91       	pop	r16
    a036:	1f 91       	pop	r17
    a038:	cf 91       	pop	r28
    a03a:	df 91       	pop	r29
    a03c:	99 27       	eor	r25, r25
    a03e:	87 fd       	sbrc	r24, 7
    a040:	90 95       	com	r25
    a042:	08 95       	ret

0000a044 <memcpy_P>:
    a044:	fb 01       	movw	r30, r22
    a046:	dc 01       	movw	r26, r24
    a048:	02 c0       	rjmp	.+4      	; 0xa04e <memcpy_P+0xa>
    a04a:	05 90       	lpm	r0, Z+
    a04c:	0d 92       	st	X+, r0
    a04e:	41 50       	subi	r20, 0x01	; 1
    a050:	50 40       	sbci	r21, 0x00	; 0
    a052:	d8 f7       	brcc	.-10     	; 0xa04a <memcpy_P+0x6>
    a054:	08 95       	ret

0000a056 <strnlen_P>:
    a056:	fc 01       	movw	r30, r24
    a058:	05 90       	lpm	r0, Z+
    a05a:	61 50       	subi	r22, 0x01	; 1
    a05c:	70 40       	sbci	r23, 0x00	; 0
    a05e:	01 10       	cpse	r0, r1
    a060:	d8 f7       	brcc	.-10     	; 0xa058 <strnlen_P+0x2>
    a062:	80 95       	com	r24
    a064:	90 95       	com	r25
    a066:	8e 0f       	add	r24, r30
    a068:	9f 1f       	adc	r25, r31
    a06a:	08 95       	ret

0000a06c <memmove>:
    a06c:	68 17       	cp	r22, r24
    a06e:	79 07       	cpc	r23, r25
    a070:	68 f4       	brcc	.+26     	; 0xa08c <memmove+0x20>
    a072:	fb 01       	movw	r30, r22
    a074:	dc 01       	movw	r26, r24
    a076:	e4 0f       	add	r30, r20
    a078:	f5 1f       	adc	r31, r21
    a07a:	a4 0f       	add	r26, r20
    a07c:	b5 1f       	adc	r27, r21
    a07e:	02 c0       	rjmp	.+4      	; 0xa084 <memmove+0x18>
    a080:	02 90       	ld	r0, -Z
    a082:	0e 92       	st	-X, r0
    a084:	41 50       	subi	r20, 0x01	; 1
    a086:	50 40       	sbci	r21, 0x00	; 0
    a088:	d8 f7       	brcc	.-10     	; 0xa080 <memmove+0x14>
    a08a:	08 95       	ret
    a08c:	0c 94 56 51 	jmp	0xa2ac	; 0xa2ac <memcpy>

0000a090 <memset>:
    a090:	dc 01       	movw	r26, r24
    a092:	01 c0       	rjmp	.+2      	; 0xa096 <memset+0x6>
    a094:	6d 93       	st	X+, r22
    a096:	41 50       	subi	r20, 0x01	; 1
    a098:	50 40       	sbci	r21, 0x00	; 0
    a09a:	e0 f7       	brcc	.-8      	; 0xa094 <memset+0x4>
    a09c:	08 95       	ret

0000a09e <strnlen>:
    a09e:	fc 01       	movw	r30, r24
    a0a0:	61 50       	subi	r22, 0x01	; 1
    a0a2:	70 40       	sbci	r23, 0x00	; 0
    a0a4:	01 90       	ld	r0, Z+
    a0a6:	01 10       	cpse	r0, r1
    a0a8:	d8 f7       	brcc	.-10     	; 0xa0a0 <strnlen+0x2>
    a0aa:	80 95       	com	r24
    a0ac:	90 95       	com	r25
    a0ae:	8e 0f       	add	r24, r30
    a0b0:	9f 1f       	adc	r25, r31
    a0b2:	08 95       	ret

0000a0b4 <itoa>:
    a0b4:	fb 01       	movw	r30, r22
    a0b6:	9f 01       	movw	r18, r30
    a0b8:	e8 94       	clt
    a0ba:	42 30       	cpi	r20, 0x02	; 2
    a0bc:	c4 f0       	brlt	.+48     	; 0xa0ee <itoa+0x3a>
    a0be:	45 32       	cpi	r20, 0x25	; 37
    a0c0:	b4 f4       	brge	.+44     	; 0xa0ee <itoa+0x3a>
    a0c2:	4a 30       	cpi	r20, 0x0A	; 10
    a0c4:	29 f4       	brne	.+10     	; 0xa0d0 <itoa+0x1c>
    a0c6:	97 fb       	bst	r25, 7
    a0c8:	1e f4       	brtc	.+6      	; 0xa0d0 <itoa+0x1c>
    a0ca:	90 95       	com	r25
    a0cc:	81 95       	neg	r24
    a0ce:	9f 4f       	sbci	r25, 0xFF	; 255
    a0d0:	64 2f       	mov	r22, r20
    a0d2:	77 27       	eor	r23, r23
    a0d4:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <__udivmodhi4>
    a0d8:	80 5d       	subi	r24, 0xD0	; 208
    a0da:	8a 33       	cpi	r24, 0x3A	; 58
    a0dc:	0c f0       	brlt	.+2      	; 0xa0e0 <itoa+0x2c>
    a0de:	89 5d       	subi	r24, 0xD9	; 217
    a0e0:	81 93       	st	Z+, r24
    a0e2:	cb 01       	movw	r24, r22
    a0e4:	00 97       	sbiw	r24, 0x00	; 0
    a0e6:	a1 f7       	brne	.-24     	; 0xa0d0 <itoa+0x1c>
    a0e8:	16 f4       	brtc	.+4      	; 0xa0ee <itoa+0x3a>
    a0ea:	5d e2       	ldi	r21, 0x2D	; 45
    a0ec:	51 93       	st	Z+, r21
    a0ee:	10 82       	st	Z, r1
    a0f0:	c9 01       	movw	r24, r18
    a0f2:	0c 94 5f 51 	jmp	0xa2be	; 0xa2be <strrev>

0000a0f6 <__mulhi_const_10>:
    a0f6:	7a e0       	ldi	r23, 0x0A	; 10
    a0f8:	97 9f       	mul	r25, r23
    a0fa:	90 2d       	mov	r25, r0
    a0fc:	87 9f       	mul	r24, r23
    a0fe:	80 2d       	mov	r24, r0
    a100:	91 0d       	add	r25, r1
    a102:	11 24       	eor	r1, r1
    a104:	08 95       	ret

0000a106 <fputc>:
    a106:	0f 93       	push	r16
    a108:	1f 93       	push	r17
    a10a:	cf 93       	push	r28
    a10c:	df 93       	push	r29
    a10e:	8c 01       	movw	r16, r24
    a110:	eb 01       	movw	r28, r22
    a112:	8b 81       	ldd	r24, Y+3	; 0x03
    a114:	81 ff       	sbrs	r24, 1
    a116:	1b c0       	rjmp	.+54     	; 0xa14e <fputc+0x48>
    a118:	82 ff       	sbrs	r24, 2
    a11a:	0d c0       	rjmp	.+26     	; 0xa136 <fputc+0x30>
    a11c:	2e 81       	ldd	r18, Y+6	; 0x06
    a11e:	3f 81       	ldd	r19, Y+7	; 0x07
    a120:	8c 81       	ldd	r24, Y+4	; 0x04
    a122:	9d 81       	ldd	r25, Y+5	; 0x05
    a124:	28 17       	cp	r18, r24
    a126:	39 07       	cpc	r19, r25
    a128:	64 f4       	brge	.+24     	; 0xa142 <fputc+0x3c>
    a12a:	e8 81       	ld	r30, Y
    a12c:	f9 81       	ldd	r31, Y+1	; 0x01
    a12e:	01 93       	st	Z+, r16
    a130:	f9 83       	std	Y+1, r31	; 0x01
    a132:	e8 83       	st	Y, r30
    a134:	06 c0       	rjmp	.+12     	; 0xa142 <fputc+0x3c>
    a136:	e8 85       	ldd	r30, Y+8	; 0x08
    a138:	f9 85       	ldd	r31, Y+9	; 0x09
    a13a:	80 2f       	mov	r24, r16
    a13c:	09 95       	icall
    a13e:	89 2b       	or	r24, r25
    a140:	31 f4       	brne	.+12     	; 0xa14e <fputc+0x48>
    a142:	8e 81       	ldd	r24, Y+6	; 0x06
    a144:	9f 81       	ldd	r25, Y+7	; 0x07
    a146:	01 96       	adiw	r24, 0x01	; 1
    a148:	9f 83       	std	Y+7, r25	; 0x07
    a14a:	8e 83       	std	Y+6, r24	; 0x06
    a14c:	02 c0       	rjmp	.+4      	; 0xa152 <fputc+0x4c>
    a14e:	0f ef       	ldi	r16, 0xFF	; 255
    a150:	1f ef       	ldi	r17, 0xFF	; 255
    a152:	c8 01       	movw	r24, r16
    a154:	df 91       	pop	r29
    a156:	cf 91       	pop	r28
    a158:	1f 91       	pop	r17
    a15a:	0f 91       	pop	r16
    a15c:	08 95       	ret

0000a15e <sprintf>:
    a15e:	ae e0       	ldi	r26, 0x0E	; 14
    a160:	b0 e0       	ldi	r27, 0x00	; 0
    a162:	e5 eb       	ldi	r30, 0xB5	; 181
    a164:	f0 e5       	ldi	r31, 0x50	; 80
    a166:	0c 94 8e 4e 	jmp	0x9d1c	; 0x9d1c <__prologue_saves__+0x1c>
    a16a:	0d 89       	ldd	r16, Y+21	; 0x15
    a16c:	1e 89       	ldd	r17, Y+22	; 0x16
    a16e:	86 e0       	ldi	r24, 0x06	; 6
    a170:	8c 83       	std	Y+4, r24	; 0x04
    a172:	1a 83       	std	Y+2, r17	; 0x02
    a174:	09 83       	std	Y+1, r16	; 0x01
    a176:	8f ef       	ldi	r24, 0xFF	; 255
    a178:	9f e7       	ldi	r25, 0x7F	; 127
    a17a:	9e 83       	std	Y+6, r25	; 0x06
    a17c:	8d 83       	std	Y+5, r24	; 0x05
    a17e:	9e 01       	movw	r18, r28
    a180:	27 5e       	subi	r18, 0xE7	; 231
    a182:	3f 4f       	sbci	r19, 0xFF	; 255
    a184:	ce 01       	movw	r24, r28
    a186:	01 96       	adiw	r24, 0x01	; 1
    a188:	6f 89       	ldd	r22, Y+23	; 0x17
    a18a:	78 8d       	ldd	r23, Y+24	; 0x18
    a18c:	a9 01       	movw	r20, r18
    a18e:	0e 94 3c 48 	call	0x9078	; 0x9078 <vfprintf>
    a192:	2f 81       	ldd	r18, Y+7	; 0x07
    a194:	38 85       	ldd	r19, Y+8	; 0x08
    a196:	02 0f       	add	r16, r18
    a198:	13 1f       	adc	r17, r19
    a19a:	f8 01       	movw	r30, r16
    a19c:	10 82       	st	Z, r1
    a19e:	2e 96       	adiw	r28, 0x0e	; 14
    a1a0:	e4 e0       	ldi	r30, 0x04	; 4
    a1a2:	0c 94 aa 4e 	jmp	0x9d54	; 0x9d54 <__epilogue_restores__+0x1c>

0000a1a6 <__ultoa_invert>:
    a1a6:	fa 01       	movw	r30, r20
    a1a8:	aa 27       	eor	r26, r26
    a1aa:	28 30       	cpi	r18, 0x08	; 8
    a1ac:	51 f1       	breq	.+84     	; 0xa202 <__ultoa_invert+0x5c>
    a1ae:	20 31       	cpi	r18, 0x10	; 16
    a1b0:	81 f1       	breq	.+96     	; 0xa212 <__ultoa_invert+0x6c>
    a1b2:	e8 94       	clt
    a1b4:	6f 93       	push	r22
    a1b6:	6e 7f       	andi	r22, 0xFE	; 254
    a1b8:	6e 5f       	subi	r22, 0xFE	; 254
    a1ba:	7f 4f       	sbci	r23, 0xFF	; 255
    a1bc:	8f 4f       	sbci	r24, 0xFF	; 255
    a1be:	9f 4f       	sbci	r25, 0xFF	; 255
    a1c0:	af 4f       	sbci	r26, 0xFF	; 255
    a1c2:	b1 e0       	ldi	r27, 0x01	; 1
    a1c4:	3e d0       	rcall	.+124    	; 0xa242 <__ultoa_invert+0x9c>
    a1c6:	b4 e0       	ldi	r27, 0x04	; 4
    a1c8:	3c d0       	rcall	.+120    	; 0xa242 <__ultoa_invert+0x9c>
    a1ca:	67 0f       	add	r22, r23
    a1cc:	78 1f       	adc	r23, r24
    a1ce:	89 1f       	adc	r24, r25
    a1d0:	9a 1f       	adc	r25, r26
    a1d2:	a1 1d       	adc	r26, r1
    a1d4:	68 0f       	add	r22, r24
    a1d6:	79 1f       	adc	r23, r25
    a1d8:	8a 1f       	adc	r24, r26
    a1da:	91 1d       	adc	r25, r1
    a1dc:	a1 1d       	adc	r26, r1
    a1de:	6a 0f       	add	r22, r26
    a1e0:	71 1d       	adc	r23, r1
    a1e2:	81 1d       	adc	r24, r1
    a1e4:	91 1d       	adc	r25, r1
    a1e6:	a1 1d       	adc	r26, r1
    a1e8:	20 d0       	rcall	.+64     	; 0xa22a <__ultoa_invert+0x84>
    a1ea:	09 f4       	brne	.+2      	; 0xa1ee <__ultoa_invert+0x48>
    a1ec:	68 94       	set
    a1ee:	3f 91       	pop	r19
    a1f0:	2a e0       	ldi	r18, 0x0A	; 10
    a1f2:	26 9f       	mul	r18, r22
    a1f4:	11 24       	eor	r1, r1
    a1f6:	30 19       	sub	r19, r0
    a1f8:	30 5d       	subi	r19, 0xD0	; 208
    a1fa:	31 93       	st	Z+, r19
    a1fc:	de f6       	brtc	.-74     	; 0xa1b4 <__ultoa_invert+0xe>
    a1fe:	cf 01       	movw	r24, r30
    a200:	08 95       	ret
    a202:	46 2f       	mov	r20, r22
    a204:	47 70       	andi	r20, 0x07	; 7
    a206:	40 5d       	subi	r20, 0xD0	; 208
    a208:	41 93       	st	Z+, r20
    a20a:	b3 e0       	ldi	r27, 0x03	; 3
    a20c:	0f d0       	rcall	.+30     	; 0xa22c <__ultoa_invert+0x86>
    a20e:	c9 f7       	brne	.-14     	; 0xa202 <__ultoa_invert+0x5c>
    a210:	f6 cf       	rjmp	.-20     	; 0xa1fe <__ultoa_invert+0x58>
    a212:	46 2f       	mov	r20, r22
    a214:	4f 70       	andi	r20, 0x0F	; 15
    a216:	40 5d       	subi	r20, 0xD0	; 208
    a218:	4a 33       	cpi	r20, 0x3A	; 58
    a21a:	18 f0       	brcs	.+6      	; 0xa222 <__ultoa_invert+0x7c>
    a21c:	49 5d       	subi	r20, 0xD9	; 217
    a21e:	31 fd       	sbrc	r19, 1
    a220:	40 52       	subi	r20, 0x20	; 32
    a222:	41 93       	st	Z+, r20
    a224:	02 d0       	rcall	.+4      	; 0xa22a <__ultoa_invert+0x84>
    a226:	a9 f7       	brne	.-22     	; 0xa212 <__ultoa_invert+0x6c>
    a228:	ea cf       	rjmp	.-44     	; 0xa1fe <__ultoa_invert+0x58>
    a22a:	b4 e0       	ldi	r27, 0x04	; 4
    a22c:	a6 95       	lsr	r26
    a22e:	97 95       	ror	r25
    a230:	87 95       	ror	r24
    a232:	77 95       	ror	r23
    a234:	67 95       	ror	r22
    a236:	ba 95       	dec	r27
    a238:	c9 f7       	brne	.-14     	; 0xa22c <__ultoa_invert+0x86>
    a23a:	00 97       	sbiw	r24, 0x00	; 0
    a23c:	61 05       	cpc	r22, r1
    a23e:	71 05       	cpc	r23, r1
    a240:	08 95       	ret
    a242:	9b 01       	movw	r18, r22
    a244:	ac 01       	movw	r20, r24
    a246:	0a 2e       	mov	r0, r26
    a248:	06 94       	lsr	r0
    a24a:	57 95       	ror	r21
    a24c:	47 95       	ror	r20
    a24e:	37 95       	ror	r19
    a250:	27 95       	ror	r18
    a252:	ba 95       	dec	r27
    a254:	c9 f7       	brne	.-14     	; 0xa248 <__ultoa_invert+0xa2>
    a256:	62 0f       	add	r22, r18
    a258:	73 1f       	adc	r23, r19
    a25a:	84 1f       	adc	r24, r20
    a25c:	95 1f       	adc	r25, r21
    a25e:	a0 1d       	adc	r26, r0
    a260:	08 95       	ret

0000a262 <__eerd_block_m64>:
    a262:	dc 01       	movw	r26, r24
    a264:	cb 01       	movw	r24, r22

0000a266 <__eerd_blraw_m64>:
    a266:	fc 01       	movw	r30, r24
    a268:	e1 99       	sbic	0x1c, 1	; 28
    a26a:	fe cf       	rjmp	.-4      	; 0xa268 <__eerd_blraw_m64+0x2>
    a26c:	06 c0       	rjmp	.+12     	; 0xa27a <__eerd_blraw_m64+0x14>
    a26e:	ff bb       	out	0x1f, r31	; 31
    a270:	ee bb       	out	0x1e, r30	; 30
    a272:	e0 9a       	sbi	0x1c, 0	; 28
    a274:	31 96       	adiw	r30, 0x01	; 1
    a276:	0d b2       	in	r0, 0x1d	; 29
    a278:	0d 92       	st	X+, r0
    a27a:	41 50       	subi	r20, 0x01	; 1
    a27c:	50 40       	sbci	r21, 0x00	; 0
    a27e:	b8 f7       	brcc	.-18     	; 0xa26e <__eerd_blraw_m64+0x8>
    a280:	08 95       	ret

0000a282 <__eerd_byte_m64>:
    a282:	e1 99       	sbic	0x1c, 1	; 28
    a284:	fe cf       	rjmp	.-4      	; 0xa282 <__eerd_byte_m64>
    a286:	9f bb       	out	0x1f, r25	; 31
    a288:	8e bb       	out	0x1e, r24	; 30
    a28a:	e0 9a       	sbi	0x1c, 0	; 28
    a28c:	99 27       	eor	r25, r25
    a28e:	8d b3       	in	r24, 0x1d	; 29
    a290:	08 95       	ret

0000a292 <__eewr_byte_m64>:
    a292:	26 2f       	mov	r18, r22

0000a294 <__eewr_r18_m64>:
    a294:	e1 99       	sbic	0x1c, 1	; 28
    a296:	fe cf       	rjmp	.-4      	; 0xa294 <__eewr_r18_m64>
    a298:	9f bb       	out	0x1f, r25	; 31
    a29a:	8e bb       	out	0x1e, r24	; 30
    a29c:	2d bb       	out	0x1d, r18	; 29
    a29e:	0f b6       	in	r0, 0x3f	; 63
    a2a0:	f8 94       	cli
    a2a2:	e2 9a       	sbi	0x1c, 2	; 28
    a2a4:	e1 9a       	sbi	0x1c, 1	; 28
    a2a6:	0f be       	out	0x3f, r0	; 63
    a2a8:	01 96       	adiw	r24, 0x01	; 1
    a2aa:	08 95       	ret

0000a2ac <memcpy>:
    a2ac:	fb 01       	movw	r30, r22
    a2ae:	dc 01       	movw	r26, r24
    a2b0:	02 c0       	rjmp	.+4      	; 0xa2b6 <memcpy+0xa>
    a2b2:	01 90       	ld	r0, Z+
    a2b4:	0d 92       	st	X+, r0
    a2b6:	41 50       	subi	r20, 0x01	; 1
    a2b8:	50 40       	sbci	r21, 0x00	; 0
    a2ba:	d8 f7       	brcc	.-10     	; 0xa2b2 <memcpy+0x6>
    a2bc:	08 95       	ret

0000a2be <strrev>:
    a2be:	dc 01       	movw	r26, r24
    a2c0:	fc 01       	movw	r30, r24
    a2c2:	67 2f       	mov	r22, r23
    a2c4:	71 91       	ld	r23, Z+
    a2c6:	77 23       	and	r23, r23
    a2c8:	e1 f7       	brne	.-8      	; 0xa2c2 <strrev+0x4>
    a2ca:	32 97       	sbiw	r30, 0x02	; 2
    a2cc:	04 c0       	rjmp	.+8      	; 0xa2d6 <strrev+0x18>
    a2ce:	7c 91       	ld	r23, X
    a2d0:	6d 93       	st	X+, r22
    a2d2:	70 83       	st	Z, r23
    a2d4:	62 91       	ld	r22, -Z
    a2d6:	ae 17       	cp	r26, r30
    a2d8:	bf 07       	cpc	r27, r31
    a2da:	c8 f3       	brcs	.-14     	; 0xa2ce <strrev+0x10>
    a2dc:	08 95       	ret

0000a2de <__divmodsi4>:
    a2de:	97 fb       	bst	r25, 7
    a2e0:	09 2e       	mov	r0, r25
    a2e2:	05 26       	eor	r0, r21
    a2e4:	0e d0       	rcall	.+28     	; 0xa302 <__divmodsi4_neg1>
    a2e6:	57 fd       	sbrc	r21, 7
    a2e8:	04 d0       	rcall	.+8      	; 0xa2f2 <__divmodsi4_neg2>
    a2ea:	e8 dc       	rcall	.-1584   	; 0x9cbc <__udivmodsi4>
    a2ec:	0a d0       	rcall	.+20     	; 0xa302 <__divmodsi4_neg1>
    a2ee:	00 1c       	adc	r0, r0
    a2f0:	38 f4       	brcc	.+14     	; 0xa300 <__divmodsi4_exit>

0000a2f2 <__divmodsi4_neg2>:
    a2f2:	50 95       	com	r21
    a2f4:	40 95       	com	r20
    a2f6:	30 95       	com	r19
    a2f8:	21 95       	neg	r18
    a2fa:	3f 4f       	sbci	r19, 0xFF	; 255
    a2fc:	4f 4f       	sbci	r20, 0xFF	; 255
    a2fe:	5f 4f       	sbci	r21, 0xFF	; 255

0000a300 <__divmodsi4_exit>:
    a300:	08 95       	ret

0000a302 <__divmodsi4_neg1>:
    a302:	f6 f7       	brtc	.-4      	; 0xa300 <__divmodsi4_exit>
    a304:	90 95       	com	r25
    a306:	80 95       	com	r24
    a308:	70 95       	com	r23
    a30a:	61 95       	neg	r22
    a30c:	7f 4f       	sbci	r23, 0xFF	; 255
    a30e:	8f 4f       	sbci	r24, 0xFF	; 255
    a310:	9f 4f       	sbci	r25, 0xFF	; 255
    a312:	08 95       	ret

0000a314 <_exit>:
    a314:	f8 94       	cli

0000a316 <__stop_program>:
    a316:	ff cf       	rjmp	.-2      	; 0xa316 <__stop_program>
