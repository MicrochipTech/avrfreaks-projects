<html>
<head>
<title>MICONOX</title>
</head>
<body>
<h1>MICONOX V1.0</h1>

<p>MICONOX is an abbreviation for &quot;Microcomputer
Native Operating Extensions&quot;</p>

<p>At the moment Miconox is an interface for serial peripheral devices.
It is oriented at the UNIX (R) interface. It is designed to be enhanced for
block devices. More functionality like threading, memory management
and others may be added in the near future.</p>

<p>MICONOX is develloped by me for my own use only. I provide it as Freeware
without any support or warranty. It may be used freely inside any product but
you may not charge anybody for MICONOX itself.</p>


<h2>Why MICONOX?</h2>

<p>MICONOX should provide a standardized interface for access of peripheral devices.
Functions may be written that use the serial interface, keyboards, LCD-displays, printers,
I2C and others without the need for special interfaces. You may change the output from
LCD to printer or serial interface without changing your program.</p>

<p>High level functions like the formatting program printf may be written to work with
every kind of peripheral device without change.</p>

<p>MICONOX is designed to work on Microcontrollers with limited memory. All the overhead
defined for UNIX/LINUX to serve in complex multiuser networked environments are stripped
away.</p>


<h2>Environment and Structure</h2>

<p>MICONOX is develloped using the GNU C compiler for AVR. It may be simple
to port MICONOX to other Microcontrollers than Atmel AVR, but no attempts have
been made by me so far.</p>

<p>The main program is part of MICONOX and is located the file &quot;miconox.c&quot;.
After initialization of the devices the application main <code>appl_main()</code>
is called, that is written by you. See the file &quot;test.c&quot; for an example application.</p>

<p>Core of the system is the file control as declared in fcntl.h and implemented
in &quot;fcntl.c&quot;.<p>

<p>The files &quot;config.c&quot; and &quot;config.h&quot; are the only files of MICONOX
that should be changed by you to match your needs. In the table <code>dir</code>
you define a list of textual names for your devices and a major and minor device
number. The major device number is used as an index into the character device
table <code>cdevsw</code>. The minor device number is transferred on calls to read and write
to identify one of several devices that are handled by the device driver.</p>


<h2>Accessing a device</h2>

<p>A file is first opened, then it may be read and/or written and controlled. When ready
then the device will be closed.</p>

<p>A file is opened by using a device name. The device name is looked up in the directory structure <code>dir</code>. The found major and minor device numbers are written into the <code>filetable</code>. The open function of the device is called. The index in the
filetable is returned as the filedescriptor.</p>

<p>When read, write or ioctl is called, then the <code>filedescriptor</code> is used
to get the major device number from the <code>filetable</code>. The function
stored in table <code>cdevsw</code> for the device is called and the minor device number
from the file table and the other call parameters are provided.</p>

<p>The function <code>ioctl</code> is device dependent. it accepts two parameters
of type uint8_t. The first parameter is a command id and the second is a parameter
for this command. It may be used to configure the device i.e. define the baud rate.</p>

<p>The close function will do any clean ups. The file is removed from the filetable.</p>

<p>If you have problems with the overhead that fcntl needs, you may also call
the character device drivers directly. Just call first the open function of the device
driver, then any read/write/ioctl and call close at the end. All you have to do is to
provide a valid minor device number at each call.</p>

<p>Have a lot of fun and success with MICONOX!</p>

<p>&copy; Mario Boller-Olfert 2002 -
E-Mail: <a href="mailto:mboller@bigfoot.de">mboller@bigfoot.de</a> -
<a href="http://www.123-byte.de">123-Byte</a></p>

</body>
</html> 