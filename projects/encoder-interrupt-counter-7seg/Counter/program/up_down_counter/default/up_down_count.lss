
up_down_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000502  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000105  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004f8  00000000  00000000  00000627  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b7  00000000  00000000  00000b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000559  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021a  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000011b  00000000  00000000  0000153a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__vector_1>
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__vector_2>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	77 c0       	rjmp	.+238    	; 0x102 <__vector_9>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	a3 c0       	rjmp	.+326    	; 0x16e <Display+0xe>
  28:	a6 c0       	rjmp	.+332    	; 0x176 <Display+0x16>
  2a:	ab c0       	rjmp	.+342    	; 0x182 <Display+0x22>
  2c:	b0 c0       	rjmp	.+352    	; 0x18e <Display+0x2e>
  2e:	b5 c0       	rjmp	.+362    	; 0x19a <Display+0x3a>
  30:	ba c0       	rjmp	.+372    	; 0x1a6 <Display+0x46>
  32:	bf c0       	rjmp	.+382    	; 0x1b2 <Display+0x52>
  34:	c4 c0       	rjmp	.+392    	; 0x1be <Display+0x5e>
  36:	c9 c0       	rjmp	.+402    	; 0x1ca <Display+0x6a>
  38:	cc c0       	rjmp	.+408    	; 0x1d2 <Display+0x72>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ee e8       	ldi	r30, 0x8E	; 142
  4e:	f4 e0       	ldi	r31, 0x04	; 4
  50:	02 c0       	rjmp	.+4      	; 0x56 <.do_copy_data_start>

00000052 <.do_copy_data_loop>:
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0

00000056 <.do_copy_data_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <.do_copy_data_loop>

0000005c <__do_clear_bss>:
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a6 36       	cpi	r26, 0x66	; 102
  68:	b1 07       	cpc	r27, r17
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	b9 d0       	rcall	.+370    	; 0x1e0 <main>
  6e:	0d c2       	rjmp	.+1050   	; 0x48a <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <__vector_1>:
//int32_t num_scale = 0;
//int32_t num_recall = 0;

ISR(INT0_vect) // Interrupt 0 
//bool z
{
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	af 93       	push	r26
  82:	bf 93       	push	r27
	if ((CHECKBIT(IN_PORT,ch_A)) && (!CHECKBIT(IN_PORT,ch_B)))
  84:	82 9b       	sbis	0x10, 2	; 16
  86:	0e c0       	rjmp	.+28     	; 0xa4 <__vector_1+0x32>
  88:	81 99       	sbic	0x10, 1	; 16
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <__vector_1+0x32>
	{
		number++;
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	90 91 61 00 	lds	r25, 0x0061
  94:	a0 91 62 00 	lds	r26, 0x0062
  98:	b0 91 63 00 	lds	r27, 0x0063
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	a1 1d       	adc	r26, r1
  a0:	b1 1d       	adc	r27, r1
  a2:	0f c0       	rjmp	.+30     	; 0xc2 <__vector_1+0x50>
	}

	else if ((CHECKBIT(IN_PORT,ch_A)) && (CHECKBIT(IN_PORT,ch_B)))
  a4:	82 9b       	sbis	0x10, 2	; 16
  a6:	15 c0       	rjmp	.+42     	; 0xd2 <__vector_1+0x60>
  a8:	81 9b       	sbis	0x10, 1	; 16
  aa:	13 c0       	rjmp	.+38     	; 0xd2 <__vector_1+0x60>
	{
		number--;
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
  b4:	a0 91 62 00 	lds	r26, 0x0062
  b8:	b0 91 63 00 	lds	r27, 0x0063
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
  c2:	80 93 60 00 	sts	0x0060, r24
  c6:	90 93 61 00 	sts	0x0061, r25
  ca:	a0 93 62 00 	sts	0x0062, r26
  ce:	b0 93 63 00 	sts	0x0063, r27
	}

}
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:

ISR(INT1_vect) // Interrupt 1 
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1

	if (CHECKBIT(IN_PORT,ch_N)) 
  ee:	83 9b       	sbis	0x10, 3	; 16
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_2+0x12>
		{
			LED_PORT|=_BV(LED_NULL); //SETBIT(LED_PORT,LED_NULL);
  f2:	97 9a       	sbi	0x12, 7	; 18
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <__vector_2+0x14>
		}
	else 
		{
			LED_PORT&=~_BV(LED_NULL); //CLEARBIT(LED_PORT,LED_NULL);
  f6:	97 98       	cbi	0x12, 7	; 18
	 	}
}
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_9>:

ISR(TIMER0_OVF_vect) // Timer/Counter0 Overflow
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
	TCNT0 = 178;
 10e:	82 eb       	ldi	r24, 0xB2	; 178
 110:	82 bf       	out	0x32, r24	; 50
	// ... ;
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <Ports_Init>:
	PORTB(output): 1=output high (source), 0=output low (sink)
	DDRB: 1=output, 0=input	*/					

void Ports_Init(void)
{
	DDRB  = (1<<DDB7)|(1<<DDB6)|(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 11e:	9f ef       	ldi	r25, 0xFF	; 255
 120:	97 bb       	out	0x17, r25	; 23
	PORTB = (1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 122:	98 bb       	out	0x18, r25	; 24

	DDRC  = (0<<DDC6)|(1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	84 bb       	out	0x14, r24	; 20
	PORTC = (1<<PC6)|(1<<PC5)|(1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	85 bb       	out	0x15, r24	; 21

	DDRD  = (1<<DDD7)|(1<<DDD6)|(0<<DDD5)|(0<<DDD4)|(0<<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(1<<PD4)|(1<<PD3)|(1<<PD2)|(1<<PD1)|(1<<PD0);
 130:	92 bb       	out	0x12, r25	; 18

}
 132:	08 95       	ret

00000134 <ExtIrq_Init>:
// ---------------

void ExtIrq_Init(void)
{
	// enable INT0 and disable INT1 interrupt on change level.
	MCUCR = (0<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	85 bf       	out	0x35, r24	; 53
	GICR = (0<<INT1)|(1<<INT0);
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	8b bf       	out	0x3b, r24	; 59

}
 13c:	08 95       	ret

0000013e <Timer0_Init>:
// --------------

void Timer0_Init(void)
{
	// Timer0 settings: ~ 79872 ticks (9984 us / 9.984 ms / 0.009984 sec)
	TCCR0 = (1<<CS02) | (1<<CS00); // CLK/1024
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	83 bf       	out	0x33, r24	; 51
	TIMSK = (0 << TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 142:	19 be       	out	0x39, r1	; 57
	// disable timer
	TCNT0 = 178;
 144:	82 eb       	ldi	r24, 0xB2	; 178
 146:	82 bf       	out	0x32, r24	; 50
}
 148:	08 95       	ret

0000014a <ANA_COMP_Init>:
// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
{

	ACSR	= (1<<ACD);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	88 b9       	out	0x08, r24	; 8
}
 14e:	08 95       	ret

00000150 <onPowerOnReset>:
// --- check type of reset ---
// ---------------------------

void onPowerOnReset()
{
	SP	= RAMEND	;
 150:	8f e5       	ldi	r24, 0x5F	; 95
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	9e bf       	out	0x3e, r25	; 62
 156:	8d bf       	out	0x3d, r24	; 61
}
 158:	08 95       	ret

0000015a <onExternalReset>:
void onExternalReset()
{
	// ... ;
}
 15a:	08 95       	ret

0000015c <onBrowOutReset>:
void onBrowOutReset()
{
	// ... ;
}
 15c:	08 95       	ret

0000015e <onWatchdogReset>:
void onWatchdogReset()
{
	// ... ;
}
 15e:	08 95       	ret

00000160 <Display>:
/*----------------------------------------------------------------
-----------------FUNCTIONS TO DISPLAY VALUES----------------------
-----------------------------------------------------------------*/  
  int Display(int a)
  {
  switch(a)
 160:	fc 01       	movw	r30, r24
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	91 05       	cpc	r25, r1
 166:	d8 f5       	brcc	.+118    	; 0x1de <Display+0x7e>
 168:	ed 5e       	subi	r30, 0xED	; 237
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	09 94       	ijmp
  {
  case 0:  
			DATA_PORT|=_BV(Pin_g);
 16e:	c5 9a       	sbi	0x18, 5	; 24
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_b)|_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f));
 170:	88 b3       	in	r24, 0x18	; 24
 172:	81 72       	andi	r24, 0x21	; 33
 174:	2c c0       	rjmp	.+88     	; 0x1ce <Display+0x6e>
			break;
			
  case 1:
			
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f)|_BV(Pin_g));
 176:	88 b3       	in	r24, 0x18	; 24
 178:	88 6f       	ori	r24, 0xF8	; 248
 17a:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_b)|_BV(Pin_c));
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	89 7f       	andi	r24, 0xF9	; 249
 180:	26 c0       	rjmp	.+76     	; 0x1ce <Display+0x6e>
			break;
			
  case 2:  
			
  
			DATA_PORT|=(_BV(Pin_c)|_BV(Pin_f));
 182:	88 b3       	in	r24, 0x18	; 24
 184:	82 61       	ori	r24, 0x12	; 18
 186:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_b)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_a)|_BV(Pin_g));
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	83 71       	andi	r24, 0x13	; 19
 18c:	20 c0       	rjmp	.+64     	; 0x1ce <Display+0x6e>
			break;
			
	
  case 3:  
			DATA_PORT|=(_BV(Pin_e)|_BV(Pin_f));
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	80 65       	ori	r24, 0x50	; 80
 192:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_a)|_BV(Pin_b)|_BV(Pin_g));
 194:	88 b3       	in	r24, 0x18	; 24
 196:	81 75       	andi	r24, 0x51	; 81
 198:	1a c0       	rjmp	.+52     	; 0x1ce <Display+0x6e>
			break;
			

  case 4:  
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e));
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	88 6c       	ori	r24, 0xC8	; 200
 19e:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	89 7c       	andi	r24, 0xC9	; 201
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <Display+0x6e>
			break;
			
  case 5:  
			DATA_PORT|=(_BV(Pin_b)|_BV(Pin_e));
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	84 64       	ori	r24, 0x44	; 68
 1aa:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_f)|_BV(Pin_g));
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	85 74       	andi	r24, 0x45	; 69
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <Display+0x6e>
			break;
			
  case 6:  
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_b));
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	8c 60       	ori	r24, 0x0C	; 12
 1b6:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_c)|_BV(Pin_d)|_BV(Pin_f)|_BV(Pin_g)|_BV(Pin_e));
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	8d 70       	andi	r24, 0x0D	; 13
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <Display+0x6e>
			break;
			
  case 7:  
			DATA_PORT|=(_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_f)|_BV(Pin_g));
 1be:	88 b3       	in	r24, 0x18	; 24
 1c0:	80 6f       	ori	r24, 0xF0	; 240
 1c2:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_b));
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	81 7f       	andi	r24, 0xF1	; 241
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Display+0x6e>
			break;
			
  case 8:  
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	08 95       	ret
			break;
		
  case 9:  
			DATA_PORT|=(_BV(Pin_d)|_BV(Pin_e));
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	80 6c       	ori	r24, 0xC0	; 192
 1d6:	88 bb       	out	0x18, r24	; 24
			DATA_PORT&=~(_BV(Pin_a)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	81 7c       	andi	r24, 0xC1	; 193
 1dc:	88 bb       	out	0x18, r24	; 24
			break;
					
	return 0;
	}
	}
 1de:	08 95       	ret

000001e0 <main>:




int main()
{
 1e0:	7f 92       	push	r7
 1e2:	8f 92       	push	r8
 1e4:	9f 92       	push	r9
 1e6:	af 92       	push	r10
 1e8:	bf 92       	push	r11
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29

//	in_recall;



	if (MCUCSR & (1<<PORF)) onPowerOnReset(); // Power-on Reset Flag
 1fa:	04 b6       	in	r0, 0x34	; 52
 1fc:	00 fe       	sbrs	r0, 0
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <main+0x28>
// --- check type of reset ---
// ---------------------------

void onPowerOnReset()
{
	SP	= RAMEND	;
 200:	8f e5       	ldi	r24, 0x5F	; 95
 202:	94 e0       	ldi	r25, 0x04	; 4
 204:	9e bf       	out	0x3e, r25	; 62
 206:	8d bf       	out	0x3d, r24	; 61
//	in_recall;



	if (MCUCSR & (1<<PORF)) onPowerOnReset(); // Power-on Reset Flag
	if (MCUCSR & (1<<EXTRF)) onExternalReset(); // External Reset Flag
 208:	84 b7       	in	r24, 0x34	; 52
	if (MCUCSR & (1<<BORF)) onBrowOutReset(); // Brown-out Reset Flag
 20a:	84 b7       	in	r24, 0x34	; 52
	if (MCUCSR & (1<<WDRF)) onWatchdogReset(); // Watchdog Reset Flag
 20c:	84 b7       	in	r24, 0x34	; 52
	PORTB(output): 1=output high (source), 0=output low (sink)
	DDRB: 1=output, 0=input	*/					

void Ports_Init(void)
{
	DDRB  = (1<<DDB7)|(1<<DDB6)|(1<<DDB5)|(1<<DDB4)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
 20e:	9f ef       	ldi	r25, 0xFF	; 255
 210:	97 bb       	out	0x17, r25	; 23
	PORTB = (1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
 212:	98 bb       	out	0x18, r25	; 24

	DDRC  = (0<<DDC6)|(1<<DDC5)|(1<<DDC4)|(1<<DDC3)|(1<<DDC2)|(1<<DDC1)|(1<<DDC0);
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	84 bb       	out	0x14, r24	; 20
	PORTC = (1<<PC6)|(1<<PC5)|(1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);
 218:	8f e7       	ldi	r24, 0x7F	; 127
 21a:	85 bb       	out	0x15, r24	; 21

	DDRD  = (1<<DDD7)|(1<<DDD6)|(0<<DDD5)|(0<<DDD4)|(0<<DDD3)|(0<<DDD2)|(0<<DDD1)|(0<<DDD0);
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(1<<PD4)|(1<<PD3)|(1<<PD2)|(1<<PD1)|(1<<PD0);
 220:	92 bb       	out	0x12, r25	; 18
// ---------------

void ExtIrq_Init(void)
{
	// enable INT0 and disable INT1 interrupt on change level.
	MCUCR = (0<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
 222:	87 e0       	ldi	r24, 0x07	; 7
 224:	85 bf       	out	0x35, r24	; 53
	GICR = (0<<INT1)|(1<<INT0);
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	8b bf       	out	0x3b, r24	; 59
// --------------

void Timer0_Init(void)
{
	// Timer0 settings: ~ 79872 ticks (9984 us / 9.984 ms / 0.009984 sec)
	TCCR0 = (1<<CS02) | (1<<CS00); // CLK/1024
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	83 bf       	out	0x33, r24	; 51
	TIMSK = (0 << TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 22e:	19 be       	out	0x39, r1	; 57
	// disable timer
	TCNT0 = 178;
 230:	82 eb       	ldi	r24, 0xB2	; 178
 232:	82 bf       	out	0x32, r24	; 50
	ExtIrq_Init();
//	USART0_Init();
	Timer0_Init();
	ANA_COMP_Init;

	sei(); // enable interrupts
 234:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 236:	c4 ec       	ldi	r28, 0xC4	; 196
 238:	d9 e0       	ldi	r29, 0x09	; 9
		first_digit_tmp = abs(number % 10); // take the absolute value
		temp = abs(number / 10);	


	Display(first_digit_tmp);	// LED data code
	MUX_PORT = ~digit_1;				// display multiplexing
 23a:	6f ed       	ldi	r22, 0xDF	; 223
 23c:	86 2e       	mov	r8, r22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 23e:	56 ea       	ldi	r21, 0xA6	; 166
 240:	d5 2e       	mov	r13, r21
		second_digit_tmp= temp % 10;
		Display(second_digit_tmp);
		}
	else Display(0);

	MUX_PORT = ~digit_10;				// display multiplexing
 242:	4f ee       	ldi	r20, 0xEF	; 239
 244:	74 2e       	mov	r7, r20
		third_digit_tmp= temp % 10;
		Display(third_digit_tmp);
		}
	else	 Display(0);
	
	MUX_PORT = ~digit_100;				// display multiplexing
 246:	37 ef       	ldi	r19, 0xF7	; 247
 248:	a3 2e       	mov	r10, r19
		fourth_digit_tmp= temp % 10;
		Display(fourth_digit_tmp);
		}
	else	 Display(0);

	MUX_PORT = ~digit_1k;				// display multiplexing
 24a:	2b ef       	ldi	r18, 0xFB	; 251
 24c:	92 2e       	mov	r9, r18
		fifth_digit_tmp= temp % 10;
		Display(fifth_digit_tmp);
		}
	else	 Nodisplay();

	MUX_PORT = ~digit_10k;				// display multiplexing
 24e:	9d ef       	ldi	r25, 0xFD	; 253
 250:	c9 2e       	mov	r12, r25
		sixth_digit_tmp= temp % 10;
		Display(sixth_digit_tmp);
		}
	else	 Nodisplay();

	MUX_PORT = ~digit_100k;				// display multiplexing
 252:	8e ef       	ldi	r24, 0xFE	; 254
 254:	b8 2e       	mov	r11, r24
{
//  Init_Ports();
  do
  {
	
	if (!CHECKBIT(IN_PORT,RESET0)) //check reset button
 256:	80 99       	sbic	0x10, 0	; 16
 258:	0d c0       	rjmp	.+26     	; 0x274 <main+0x94>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25a:	ce 01       	movw	r24, r28
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x7c>
	{
		_delay_ms(10);	//reset button debounce for 10mS
		if (!CHECKBIT(IN_PORT,RESET0)) number=0; //check after debounce and reset number if true
 260:	80 99       	sbic	0x10, 0	; 16
 262:	08 c0       	rjmp	.+16     	; 0x274 <main+0x94>
 264:	10 92 60 00 	sts	0x0060, r1
 268:	10 92 61 00 	sts	0x0061, r1
 26c:	10 92 62 00 	sts	0x0062, r1
 270:	10 92 63 00 	sts	0x0063, r1
	}

	if (number>=0)
 274:	e0 90 60 00 	lds	r14, 0x0060
 278:	f0 90 61 00 	lds	r15, 0x0061
 27c:	00 91 62 00 	lds	r16, 0x0062
 280:	10 91 63 00 	lds	r17, 0x0063
 284:	17 fd       	sbrc	r17, 7
 286:	02 c0       	rjmp	.+4      	; 0x28c <main+0xac>
		{
			DATA_PORT&=~_BV(Pin_neg);
 288:	c0 98       	cbi	0x18, 0	; 24
 28a:	01 c0       	rjmp	.+2      	; 0x28e <main+0xae>
		}
	else
		{ 
			DATA_PORT|=_BV(Pin_neg);
 28c:	c0 9a       	sbi	0x18, 0	; 24

// DISPLAY PROCESSING OF 6 DIGIT NUMBER VALUE
		// One's Digit Display

		first_digit_tmp = abs(number % 10); // take the absolute value
		temp = abs(number / 10);	
 28e:	c8 01       	movw	r24, r16
 290:	b7 01       	movw	r22, r14
 292:	2a e0       	ldi	r18, 0x0A	; 10
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	ba d0       	rcall	.+372    	; 0x410 <__divmodsi4>
 29c:	30 93 65 00 	sts	0x0065, r19
 2a0:	20 93 64 00 	sts	0x0064, r18
 2a4:	37 ff       	sbrs	r19, 7
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <main+0xd8>
 2a8:	88 27       	eor	r24, r24
 2aa:	99 27       	eor	r25, r25
 2ac:	82 1b       	sub	r24, r18
 2ae:	93 0b       	sbc	r25, r19
 2b0:	90 93 65 00 	sts	0x0065, r25
 2b4:	80 93 64 00 	sts	0x0064, r24


	Display(first_digit_tmp);	// LED data code
 2b8:	c8 01       	movw	r24, r16
 2ba:	b7 01       	movw	r22, r14
 2bc:	2a e0       	ldi	r18, 0x0A	; 10
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	a5 d0       	rcall	.+330    	; 0x410 <__divmodsi4>
 2c6:	cb 01       	movw	r24, r22
 2c8:	77 ff       	sbrs	r23, 7
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <main+0xf2>
 2cc:	90 95       	com	r25
 2ce:	81 95       	neg	r24
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	45 df       	rcall	.-374    	; 0x160 <Display>
	MUX_PORT = ~digit_1;				// display multiplexing
 2d6:	85 ba       	out	0x15, r8	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d8:	8d 2d       	mov	r24, r13
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0xfa>
	_delay_us(500);				// delay routine

//	temp = abs(number / 10);	

	// Ten's Digit Display	
	if (temp>=1)
 2de:	80 91 64 00 	lds	r24, 0x0064
 2e2:	90 91 65 00 	lds	r25, 0x0065
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <main+0x114>
		{
		second_digit_tmp= temp % 10;
		Display(second_digit_tmp);
 2ea:	6a e0       	ldi	r22, 0x0A	; 10
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	7c d0       	rcall	.+248    	; 0x3e8 <__udivmodhi4>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <main+0x118>
		}
	else Display(0);
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	33 df       	rcall	.-410    	; 0x160 <Display>

	MUX_PORT = ~digit_10;				// display multiplexing
 2fa:	75 ba       	out	0x15, r7	; 21
 2fc:	8d 2d       	mov	r24, r13
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x11e>
	_delay_us(500);				// delay routine

	// Hundred's Digit Display	
	temp = temp / 10;
 302:	80 91 64 00 	lds	r24, 0x0064
 306:	90 91 65 00 	lds	r25, 0x0065
 30a:	6a e0       	ldi	r22, 0x0A	; 10
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	6c d0       	rcall	.+216    	; 0x3e8 <__udivmodhi4>
 310:	cb 01       	movw	r24, r22
 312:	70 93 65 00 	sts	0x0065, r23
 316:	60 93 64 00 	sts	0x0064, r22

	if (temp>=1)
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	29 f0       	breq	.+10     	; 0x32a <main+0x14a>
		{
		third_digit_tmp= temp % 10;
		Display(third_digit_tmp);
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	61 d0       	rcall	.+194    	; 0x3e8 <__udivmodhi4>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <main+0x14e>
		}
	else	 Display(0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	18 df       	rcall	.-464    	; 0x160 <Display>
	
	MUX_PORT = ~digit_100;				// display multiplexing
 330:	a5 ba       	out	0x15, r10	; 21
 332:	8d 2d       	mov	r24, r13
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x154>
	_delay_us(500);				// delay routine

	// Thousand's Digit Display	
	temp = temp / 10;
 338:	80 91 64 00 	lds	r24, 0x0064
 33c:	90 91 65 00 	lds	r25, 0x0065
 340:	6a e0       	ldi	r22, 0x0A	; 10
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	51 d0       	rcall	.+162    	; 0x3e8 <__udivmodhi4>
 346:	cb 01       	movw	r24, r22
 348:	70 93 65 00 	sts	0x0065, r23
 34c:	60 93 64 00 	sts	0x0064, r22
	if (temp>=1)
 350:	61 15       	cp	r22, r1
 352:	71 05       	cpc	r23, r1
 354:	29 f0       	breq	.+10     	; 0x360 <main+0x180>
		{
		fourth_digit_tmp= temp % 10;
		Display(fourth_digit_tmp);
 356:	6a e0       	ldi	r22, 0x0A	; 10
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	46 d0       	rcall	.+140    	; 0x3e8 <__udivmodhi4>
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <main+0x184>
		}
	else	 Display(0);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	fd de       	rcall	.-518    	; 0x160 <Display>

	MUX_PORT = ~digit_1k;				// display multiplexing
 366:	95 ba       	out	0x15, r9	; 21
 368:	8d 2d       	mov	r24, r13
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x18a>
	_delay_us(500);				// delay routine

	// Ten Thousand's Digit Display	
		temp = temp / 10;
 36e:	80 91 64 00 	lds	r24, 0x0064
 372:	90 91 65 00 	lds	r25, 0x0065
 376:	6a e0       	ldi	r22, 0x0A	; 10
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	36 d0       	rcall	.+108    	; 0x3e8 <__udivmodhi4>
 37c:	cb 01       	movw	r24, r22
 37e:	70 93 65 00 	sts	0x0065, r23
 382:	60 93 64 00 	sts	0x0064, r22
	if (temp>=1)
 386:	61 15       	cp	r22, r1
 388:	71 05       	cpc	r23, r1
 38a:	31 f0       	breq	.+12     	; 0x398 <main+0x1b8>
		{
		fifth_digit_tmp= temp % 10;
		Display(fifth_digit_tmp);
 38c:	6a e0       	ldi	r22, 0x0A	; 10
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	2b d0       	rcall	.+86     	; 0x3e8 <__udivmodhi4>
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	e5 de       	rcall	.-566    	; 0x160 <Display>
 396:	03 c0       	rjmp	.+6      	; 0x39e <main+0x1be>
	}


int Nodisplay(int b)
{
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 398:	88 b3       	in	r24, 0x18	; 24
 39a:	8e 6f       	ori	r24, 0xFE	; 254
 39c:	88 bb       	out	0x18, r24	; 24
		fifth_digit_tmp= temp % 10;
		Display(fifth_digit_tmp);
		}
	else	 Nodisplay();

	MUX_PORT = ~digit_10k;				// display multiplexing
 39e:	c5 ba       	out	0x15, r12	; 21
 3a0:	8d 2d       	mov	r24, r13
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x1c2>
	_delay_us(500);				// delay routine

	// Hundred Thousand Digit Display	
		temp = temp / 10;
 3a6:	80 91 64 00 	lds	r24, 0x0064
 3aa:	90 91 65 00 	lds	r25, 0x0065
 3ae:	6a e0       	ldi	r22, 0x0A	; 10
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	1a d0       	rcall	.+52     	; 0x3e8 <__udivmodhi4>
 3b4:	cb 01       	movw	r24, r22
 3b6:	70 93 65 00 	sts	0x0065, r23
 3ba:	60 93 64 00 	sts	0x0064, r22
	if (temp>=1)
 3be:	61 15       	cp	r22, r1
 3c0:	71 05       	cpc	r23, r1
 3c2:	31 f0       	breq	.+12     	; 0x3d0 <main+0x1f0>
		{
		sixth_digit_tmp= temp % 10;
		Display(sixth_digit_tmp);
 3c4:	6a e0       	ldi	r22, 0x0A	; 10
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	0f d0       	rcall	.+30     	; 0x3e8 <__udivmodhi4>
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	c9 de       	rcall	.-622    	; 0x160 <Display>
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <main+0x1f6>
	}


int Nodisplay(int b)
{
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 3d0:	88 b3       	in	r24, 0x18	; 24
 3d2:	8e 6f       	ori	r24, 0xFE	; 254
 3d4:	88 bb       	out	0x18, r24	; 24
		sixth_digit_tmp= temp % 10;
		Display(sixth_digit_tmp);
		}
	else	 Nodisplay();

	MUX_PORT = ~digit_100k;				// display multiplexing
 3d6:	b5 ba       	out	0x15, r11	; 21
 3d8:	8d 2d       	mov	r24, r13
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <main+0x1fa>
 3de:	3b cf       	rjmp	.-394    	; 0x256 <main+0x76>

000003e0 <Nodisplay>:
	}


int Nodisplay(int b)
{
			DATA_PORT|=(_BV(Pin_a)|_BV(Pin_d)|_BV(Pin_e)|_BV(Pin_c)|_BV(Pin_b)|_BV(Pin_f)|_BV(Pin_g));
 3e0:	88 b3       	in	r24, 0x18	; 24
 3e2:	8e 6f       	ori	r24, 0xFE	; 254
 3e4:	88 bb       	out	0x18, r24	; 24

}
 3e6:	08 95       	ret

000003e8 <__udivmodhi4>:
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	51 e1       	ldi	r21, 0x11	; 17
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__udivmodhi4_ep>

000003f0 <__udivmodhi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	a6 17       	cp	r26, r22
 3f6:	b7 07       	cpc	r27, r23
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__udivmodhi4_ep>
 3fa:	a6 1b       	sub	r26, r22
 3fc:	b7 0b       	sbc	r27, r23

000003fe <__udivmodhi4_ep>:
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	5a 95       	dec	r21
 404:	a9 f7       	brne	.-22     	; 0x3f0 <__udivmodhi4_loop>
 406:	80 95       	com	r24
 408:	90 95       	com	r25
 40a:	bc 01       	movw	r22, r24
 40c:	cd 01       	movw	r24, r26
 40e:	08 95       	ret

00000410 <__divmodsi4>:
 410:	97 fb       	bst	r25, 7
 412:	09 2e       	mov	r0, r25
 414:	05 26       	eor	r0, r21
 416:	0e d0       	rcall	.+28     	; 0x434 <__divmodsi4_neg1>
 418:	57 fd       	sbrc	r21, 7
 41a:	04 d0       	rcall	.+8      	; 0x424 <__divmodsi4_neg2>
 41c:	14 d0       	rcall	.+40     	; 0x446 <__udivmodsi4>
 41e:	0a d0       	rcall	.+20     	; 0x434 <__divmodsi4_neg1>
 420:	00 1c       	adc	r0, r0
 422:	38 f4       	brcc	.+14     	; 0x432 <__divmodsi4_exit>

00000424 <__divmodsi4_neg2>:
 424:	50 95       	com	r21
 426:	40 95       	com	r20
 428:	30 95       	com	r19
 42a:	21 95       	neg	r18
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	4f 4f       	sbci	r20, 0xFF	; 255
 430:	5f 4f       	sbci	r21, 0xFF	; 255

00000432 <__divmodsi4_exit>:
 432:	08 95       	ret

00000434 <__divmodsi4_neg1>:
 434:	f6 f7       	brtc	.-4      	; 0x432 <__divmodsi4_exit>
 436:	90 95       	com	r25
 438:	80 95       	com	r24
 43a:	70 95       	com	r23
 43c:	61 95       	neg	r22
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__udivmodsi4>:
 446:	a1 e2       	ldi	r26, 0x21	; 33
 448:	1a 2e       	mov	r1, r26
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	fd 01       	movw	r30, r26
 450:	0d c0       	rjmp	.+26     	; 0x46c <__udivmodsi4_ep>

00000452 <__udivmodsi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	ee 1f       	adc	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	a2 17       	cp	r26, r18
 45c:	b3 07       	cpc	r27, r19
 45e:	e4 07       	cpc	r30, r20
 460:	f5 07       	cpc	r31, r21
 462:	20 f0       	brcs	.+8      	; 0x46c <__udivmodsi4_ep>
 464:	a2 1b       	sub	r26, r18
 466:	b3 0b       	sbc	r27, r19
 468:	e4 0b       	sbc	r30, r20
 46a:	f5 0b       	sbc	r31, r21

0000046c <__udivmodsi4_ep>:
 46c:	66 1f       	adc	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	1a 94       	dec	r1
 476:	69 f7       	brne	.-38     	; 0x452 <__udivmodsi4_loop>
 478:	60 95       	com	r22
 47a:	70 95       	com	r23
 47c:	80 95       	com	r24
 47e:	90 95       	com	r25
 480:	9b 01       	movw	r18, r22
 482:	ac 01       	movw	r20, r24
 484:	bd 01       	movw	r22, r26
 486:	cf 01       	movw	r24, r30
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
