##############################################################################
#                                                                            #
# IAR Atmel AVR C/C++ Compiler V4.20A/W32              27/Jul/2007  17:05:15 #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\Documents and Settings\User\My                       #
#                    Documents\Stefan\Bootloader\Bootloader\bl_can.c         #
#    Command line =  "C:\Documents and Settings\User\My                      #
#                    Documents\Stefan\Bootloader\Bootloader\bl_can.c"        #
#                    --cpu=can128 -ms -o "C:\Documents and Settings\User\My  #
#                    Documents\Stefan\Bootloader\Bootloader\Debug\Obj\" -lc  #
#                    "C:\Documents and Settings\User\My                      #
#                    Documents\Stefan\Bootloader\Bootloader\Debug\List\" -y  #
#                    -z6 --no_inline --no_cross_call --no_tbaa --debug       #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR    #
#                    Systems\Embedded Workbench 4.0\avr\INC\" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    4.0\avr\INC\CLIB\" --eeprom_size 4096                   #
#    List file    =  C:\Documents and Settings\User\My                       #
#                    Documents\Stefan\Bootloader\Bootloader\Debug\List\bl_ca #
#                    n.lst                                                   #
#    Object file  =  C:\Documents and Settings\User\My                       #
#                    Documents\Stefan\Bootloader\Bootloader\Debug\Obj\bl_can #
#                    .r90                                                    #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\User\My Documents\Stefan\Bootloader\Bootloader\bl_can.c
      1          #include <ioavr.h>
      2          #include "bl_can.h"
      3          #include "bootloader.h"
      4          #include "intel_hex.h"
      5          #include "protocol.h"
      6          #include "usart.h"
      7          #include "leds.h"
      8          #include "common.h"
      9          #include "queue.h"
     10          
     11          #ifdef USART
     12          remote_app_info_t remote_apps[NO_OF_MCUS];
     13          volatile unsigned char no_of_mcus_found = NO_OF_MCUS;
     14          
     15          #pragma vector = TIMER1_COMPA_vect
     16          __interrupt void mcu_timeout(void);
     17          
     18          #endif
     19          
     20          volatile unsigned char app_no; // app_no=0 is the master bootloader
     21          unsigned char in_counter = 0, out_counter = 0;
     22          unsigned char ident_in_high ;  /* CAN RX buffer */
     23          unsigned char ident_in_low ;
     24          unsigned char data_in_count;
     25          unsigned char data_in[8];
     26          
     27          can_data_t current_rx_data;
     28          
     29          unsigned char ident_out_high ;  /* CAN TX buffer */
     30          unsigned char ident_out_low ;
     31          unsigned char data_out_count;
     32          unsigned char data_out[8];
     33          
     34          #pragma vector = CANIT_vect
     35          __interrupt void Check_CAN_int(void);
     36          
     37          #ifdef USART
     38          
     39          void set_rx_mbs() {
     40            ident_in_high = FWD_MBOX_HIGH;
     41            ident_in_low = FWD_MBOX_LOW;
     42            can_rx_set(1); // forwarding mbox
     43            ident_in_high = APP_INFO_MBOX_HIGH;
     44            ident_in_low = APP_INFO_MBOX_LOW;
     45            can_rx_set(2); // app_info mbox
     46            ident_in_high = MSG_MBOX_HIGH;
     47            ident_in_low = MSG_MBOX_LOW;
     48            can_rx_set(3); // messages during forward
     49          }
     50          
     51          // Enables a timeout counter on TIMER0. The timeout is set to about 0.5 s
     52          // on a 16 MHz clock frequency.
     53          // On timeout all MCUs has not answered, the number of MCUs is the decreased.
     54          static void enable_mcu_timeout() {
     55            OCR1AH = 0x1E;
     56            OCR1AL = 0x84;
     57            TCNT1H = 0;
     58            TCNT1L = 0;
     59            TCCR1B = 0x0D;
     60            TIMSK1 = 0x02;
     61          }
     62          
     63          void can_get_app_info() {
     64            // The first app_info is the overlay card
     65            read_app_info(&(remote_apps[0].app_info));
     66            remote_apps[0].app_info.address = 0;
     67            
     68            no_of_mcus_found = NO_OF_MCUS; // Try to get app_infos from all MCUs
     69            ident_out_high = BROADCAST_HIGH;
     70            ident_out_low = BROADCAST_LOW;
     71            can_tx_byte(GET_CARD_INFO);
     72            enable_mcu_timeout();
     73          }
     74          
     75          
     76          #elif defined CAN
     77          void set_rx_mbs() {
     78            ident_in_high = MBOX_HIGH;
     79            ident_in_low = MBOX_LOW;
     80            can_rx_set(1);
     81            ident_in_high = BROADCAST_HIGH;
     82            ident_in_low = BROADCAST_LOW;
     83            can_rx_set(2);
     84          }
     85          #endif
     86          
     87          void str8cpy(char *dest, const char *from) {
     88            for (unsigned char i=0; i < 8; i++)
     89              dest[i] = from[i];
     90          }
     91          
     92          #ifdef CAN
     93          void can_tx_app_info_with_sender(app_info_t *app_info, unsigned char sender) {
     94            unsigned long tmp = app_info->date;
     95            can_data_t pkg;
     96            pkg.count = 8;
     97            pkg.id_high = ident_out_high;
     98            pkg.id_low = ident_out_low;
     99            pkg.data[0] = sender;
    100            pkg.data[1] = (unsigned char)MBOX_LOW;
    101            pkg.data[2] = (unsigned char)MBOX_HIGH;
    102            pkg.data[3] = (unsigned char)app_info->version;
    103            pkg.data[4] = (unsigned char)(app_info->version>>8);
    104            pkg.data[5] = (unsigned char)app_info->name[0];
    105            pkg.data[6] = (unsigned char)app_info->name[1];
    106            pkg.data[7] = (unsigned char)app_info->name[2];
    107            can_queue_enqueue(&can_tx_queue, &pkg);
    108          
    109            pkg.count = 8;
    110            pkg.data[0] = sender;
    111            pkg.data[1] = (unsigned char)app_info->name[3];
    112            pkg.data[2] = (unsigned char)app_info->name[4];
    113            pkg.data[3] = (unsigned char)app_info->name[5];
    114            pkg.data[4] = (unsigned char)app_info->name[6];
    115            pkg.data[5] = (unsigned char)app_info->name[7];
    116            pkg.data[6] = (unsigned char)tmp;
    117            tmp >>= 8;
    118            pkg.data[7] = (unsigned char)tmp;
    119            can_queue_enqueue(&can_tx_queue, &pkg);
    120          
    121            pkg.count = 3;
    122            pkg.data[0] = sender;
    123            tmp >>= 8;
    124            pkg.data[1] = (unsigned char)tmp;
    125            tmp >>= 8;
    126            pkg.data[2] = (unsigned char)tmp;
    127            can_queue_enqueue(&can_tx_queue, &pkg);
    128          }
    129          #endif
    130          
    131          void can_tx_app_info(app_info_t *app_info) {
    132            unsigned long tmp = app_info->date;
    133            can_data_t pkg;
    134            pkg.count = 8;
    135            pkg.id_high = ident_out_high;
    136            pkg.id_low = ident_out_low;
    137          #ifdef CAN
    138            pkg.data[0] = (unsigned char)MBOX_LOW;
    139            pkg.data[1] = (unsigned char)MBOX_HIGH;
    140          #elif defined USART
    141            pkg.data[0] = (unsigned char)app_info->address;
    142            pkg.data[1] = (unsigned char)(app_info->address>>8);
    143          #endif
    144            pkg.data[2] = (unsigned char)app_info->version;
    145            pkg.data[3] = (unsigned char)(app_info->version>>8);
    146            pkg.data[4] = (unsigned char)app_info->name[0];
    147            pkg.data[5] = (unsigned char)app_info->name[1];
    148            pkg.data[6] = (unsigned char)app_info->name[2];
    149            pkg.data[7] = (unsigned char)app_info->name[3];
    150            can_queue_enqueue(&can_tx_queue, &pkg);
    151          
    152            pkg.count = 8;
    153            pkg.data[0] = (unsigned char)app_info->name[4];
    154            pkg.data[1] = (unsigned char)app_info->name[5];
    155            pkg.data[2] = (unsigned char)app_info->name[6];
    156            pkg.data[3] = (unsigned char)app_info->name[7];
    157            pkg.data[4] = (unsigned char)tmp;
    158            tmp >>= 8;
    159            pkg.data[5] = (unsigned char)tmp;
    160            tmp >>= 8;
    161            pkg.data[6] = (unsigned char)tmp;
    162            tmp >>= 8;
    163            pkg.data[7] = (unsigned char)tmp;
    164            can_queue_enqueue(&can_tx_queue, &pkg);
    165          }
    166          
    167          void can_tx_byte(unsigned char byte) {
    168            can_data_t pkg;
    169            pkg.count = 1;
    170            pkg.id_high = ident_out_high;
    171            pkg.id_low = ident_out_low;
    172            pkg.data[0] = byte;
    173            can_queue_enqueue(&can_tx_queue, &pkg);
    174          }
    175          
    176          void can_pkg_add_byte(unsigned char byte) {
    177            static can_data_t pkg = {0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}};
    178            pkg.id_high = ident_out_high;
    179            pkg.id_low = ident_out_low;
    180            pkg.data[pkg.count++] = byte;
    181            if (byte == 0 || pkg.count == 8) {
    182              can_queue_enqueue(&can_tx_queue, &pkg);
    183              pkg.count = pkg.id_high = pkg.id_low = 0;
    184            }
    185          }
    186          
    187          void can_forward_bytes(unsigned char bytes[], unsigned char len) {
    188            can_data_t pkg;
    189            pkg.count = len;
    190            pkg.id_high = ident_out_high;
    191            pkg.id_low = ident_out_low;
    192            for (unsigned char i=0; i < len; i++)
    193              pkg.data[i] = bytes[i];
    194            can_queue_enqueue(&can_tx_queue, &pkg);
    195          }
    196          
    197          void can_tx_int(unsigned int data) {
    198            can_data_t pkg;
    199            pkg.count = 2;
    200            pkg.id_high = ident_out_high;
    201            pkg.id_low = ident_out_low;
    202            pkg.data[0] = (unsigned char)data;
    203            pkg.data[1] = (unsigned char)(data>>8);
    204            can_queue_enqueue(&can_tx_queue, &pkg);
    205          }
    206          
    207          unsigned char can_rx_byte(int mbox) {
    208            return current_rx_data.data[in_counter++];
    209          }
    210          
    211          void can_rx_app_info_with_sender(unsigned char id_high) {
    212            unsigned char byte = can_rx_byte(2);
    213            unsigned char i;
    214            // Find the app_info to fill
    215            for (i=1; i < app_no; i++) {
    216              if ((unsigned char)(remote_apps[i].app_info.address>>8) == id_high)
    217                break;
    218            }
    219            // If no remote_app was found, fill the next available
    220            if (i == app_no)
    221              i = app_no++;
    222          
    223            if (i == NO_OF_MCUS)
    224              i = 1;
    225            if (remote_apps[i].byte_no == 0) {
    226              remote_apps[i].app_info.address = \
    227                remote_apps[i].app_info.version = remote_apps[i].app_info.date = 0;
    228              remote_apps[i].app_info.address = ((unsigned int)id_high)<<8;
    229            }
    230            if (remote_apps[i].byte_no <= 1) {
    231              remote_apps[i].app_info.address |= ((unsigned int)(byte)<<(remote_apps[i].byte_no*8));
    232              remote_apps[i].byte_no++;
    233            }
    234            else if (remote_apps[i].byte_no >= 2 && remote_apps[i].byte_no <= 3) {
    235              remote_apps[i].app_info.version |= ((unsigned int)(byte)<<((remote_apps[i].byte_no-2)*8));
    236              remote_apps[i].byte_no++;
    237            }
    238            else if (remote_apps[i].byte_no >= 4 && remote_apps[i].byte_no <= 11) {
    239              remote_apps[i].app_info.name[remote_apps[i].byte_no-4] = byte;
    240              remote_apps[i].byte_no++;
    241            }
    242            else if (remote_apps[i].byte_no >= 12 && remote_apps[i].byte_no <= 15) {
    243              remote_apps[i].app_info.date |= ((unsigned long)(byte)<<((remote_apps[i].byte_no-12)*8));
    244              if (remote_apps[i].byte_no == 15)
    245                remote_apps[i].byte_no = 0;
    246              else
    247                remote_apps[i].byte_no++;
    248          
    249            }
    250          }
    251          
    252          __monitor __interrupt void Check_CAN_int(void) {
    253            bit_flip(LED_PORT3, LED3);
    254            char mob_no = (CANHPMOB >> 4);
    255            int Chech_rec = can_rx(mob_no);
    256            can_data_t rx_data;
    257            unsigned char i;
    258            rx_data.count = data_in_count;
    259            rx_data.mob_no = mob_no;
    260            for (i=0; i < data_in_count; i++)
    261              rx_data.data[i] = data_in[i];
    262            can_queue_enqueue(&can_rx_queue, &rx_data);
    263          }
    264          
    265          #ifdef USART
    266          
    267          void forward_to_usart0() {
    268            usart0_tx_byte(can_rx_byte(1));
    269          }
    270          
    271          void process_can_queue() {
    272            while (!can_queue_is_empty(&can_rx_queue)) {
    273              can_queue_dequeue(&can_rx_queue, &current_rx_data);
    274              // Process all data in buffer
    275              unsigned char id_high = 0;
    276              while (in_counter < current_rx_data.count) {
    277                switch (current_rx_data.mob_no) {
    278                  case 1:
    279                    forward_to_usart0();
    280                  break;
    281                  case 2:
    282                    if (in_counter == 0)
    283                      id_high = can_rx_byte(2);
    284                    can_rx_app_info_with_sender(id_high);
    285                  break;
    286                  case 3: // forward complete
    287                    state = NORMAL;
    288                    in_counter++;
    289                  break;
    290                }
    291              }
    292              in_counter = 0; 
    293            }
    294            while (!can_queue_is_empty(&can_tx_queue)) {
    295              can_data_t pkg;
    296              int i;
    297              can_queue_dequeue(&can_tx_queue, &pkg);
    298              data_out_count = pkg.count;
    299              ident_out_high = pkg.id_high;
    300              ident_out_low = pkg.id_low;
    301              for (i=0; i < pkg.count; i++)
    302                data_out[i] = pkg.data[i];
    303              unsigned char old_int = __save_interrupt();
    304              __disable_interrupt();
    305              can_tx();
    306              __restore_interrupt(old_int);
    307            }
    308          }
    309          
    310          // Timeout interrupt, at least one of the MCUs expected to be connected
    311          // hasn't answered within the time limit - skip it.
    312          __interrupt void mcu_timeout(void) {
    313            TCCR1B = 0;
    314            no_of_mcus_found = app_no;
    315          }
    316          
    317          #elif defined CAN
    318          
    319          void can_tx_forward_complete() {
    320            ident_out_high = MSG_MBOX_HIGH;
    321            ident_out_low = MSG_MBOX_LOW;
    322            can_tx_byte(FWD_COMPLETE);
    323          }
    324          
    325          void process_can_queue() {
    326            while (!can_queue_is_empty(&can_rx_queue)) {
    327              can_queue_dequeue(&can_rx_queue, &current_rx_data);
    328              // Process all data in buffer
    329              while (in_counter < current_rx_data.count) {
    330                switch (current_rx_data.mob_no) {
    331                  case 1:
    332                  case 2:
    333                    handle_in_byte();
    334                  break;
    335                }
    336              }
    337              in_counter = 0;
    338            }
    339            while (!can_queue_is_empty(&can_tx_queue)) {
    340              can_data_t pkg;
    341              int i;
    342              can_queue_dequeue(&can_tx_queue, &pkg);
    343              data_out_count = pkg.count;
    344              ident_out_high = pkg.id_high;
    345              ident_out_low = pkg.id_low;
    346              for (i=0; i < pkg.count; i++)
    347                data_out[i] = pkg.data[i];
    348              unsigned char old_int = __save_interrupt();
    349              __disable_interrupt();
    350              can_tx();
    351              __restore_interrupt(old_int);
    352            }
    353          
    354          }
    355          
    356          #endif

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     Check_CAN_int                     29      2
       -> can_rx                       29      2
       -> can_queue_enqueue            29      2
     can_forward_bytes                 14      2
       -> can_queue_enqueue            14      2
     can_get_app_info                   0      2
       -> read_app_info                 0      2
       -> can_tx_byte                   0      2
       -> enable_mcu_timeout            0      2
     can_pkg_add_byte                   2      2
       -> can_queue_enqueue             2      2
     can_rx_app_info_with_sender        5      4
       -> can_rx_byte                   5      2
     can_rx_byte                        0      2
     can_tx_app_info                   18      2
       -> can_queue_enqueue            18      2
       -> can_queue_enqueue            18      2
     can_tx_byte                       14      2
       -> can_queue_enqueue            14      2
     can_tx_int                        14      2
       -> can_queue_enqueue            14      2
     enable_mcu_timeout                 0      2
     forward_to_usart0                  0      2
       -> can_rx_byte                   0      2
       -> usart0_tx_byte                0      2
     mcu_timeout                        5      2
     process_can_queue                 16      2
       -> can_queue_is_empty           16      2
       -> can_queue_dequeue            16      2
       -> forward_to_usart0            16      2
       -> can_rx_byte                  16      2
       -> can_rx_app_info_with_sender
                                       16      2
       -> can_tx                       16      2
       -> can_queue_is_empty           16      2
       -> can_queue_dequeue            16      2
     set_rx_mbs                         2      2
       -> can_rx_set                    2      2
       -> can_rx_set                    2      2
       -> can_rx_set                    2      2
     str8cpy                            0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_CANHPMOB                       1
     _A_OCR1A                          2
     _A_TCNT1                          2
     _A_TCCR1B                         1
     _A_TIMSK1                         1
     _A_PORTA                          1
     remote_apps                      68
     out_counter                       1
     ident_in_high                     2
     data_in_count                     9
     set_rx_mbs                       72
     enable_mcu_timeout               36
     can_get_app_info                 42
     str8cpy                          32
     can_tx_app_info                 126
     can_tx_byte                      34
     can_pkg_add_byte                110
     current_rx_data                  38
     can_forward_bytes                60
     can_tx_int                       36
     can_rx_byte                      22
     can_rx_app_info_with_sender     296
     Check_CAN_int                   160
     forward_to_usart0                12
     process_can_queue               190
     mcu_timeout                      28
     ??mcu_timeout??INTVEC 48          4
     ??Check_CAN_int??INTVEC 72        4
     ?<Initializer for current_rx_data>
                                      38
      Others                          14

 
     8 bytes in segment ABSOLUTE
 1 256 bytes in segment CODE
    14 bytes in segment INITTAB
     8 bytes in segment INTVEC
    38 bytes in segment NEAR_I
    38 bytes in segment NEAR_ID
    80 bytes in segment NEAR_Z
 
 1 294 bytes of CODE memory (+ 22 bytes shared)
   118 bytes of DATA memory (+  8 bytes shared)

Errors: none
Warnings: none
