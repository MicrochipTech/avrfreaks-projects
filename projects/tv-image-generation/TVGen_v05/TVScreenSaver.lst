
AVRASM ver. 1.74  D:\Projects\Mine\AVR\TVGen\TVGen.asm Sun Feb 06 17:35:36 2005


warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
000030   +  	SetupStack				; 4 Setup the Stack		! Required or do yourself
000034   +  	SetupXPointer			; 2 Setup X Pointer		! Required or do yourself
000036   +  	SetupYPointer			; 2 Setup X Pointer		! Required or do yourself
000038   +  	SetupTVState			; 3 Setup TV State Mchn	! Required
00003a   +  	SetupTimer0				; 8 Setup Timer			! Required
000046   +  	FillImage $00		;   clear the image
000063   +  	ClearTimer0				; ready to begin
00006f   +  	LDBMI ca,0,1
00008c   +  	LDBMI cb,1,1
0000a9   +  	LDBMI cc,2,1
0000c6   +  	LDBMI cd,3,1
0000e3   +  	LDBMI ce,4,1
000100   +  	LDBMI cf,5,1
00011d   +  	LDBMI cg,6,1
00013a   +  	LDBMI ch,7,1
000157   +  	LDBMI ci,8,1
000174   +  	LDBMI cj,9,1
000191   +  	LDBMI ck,10,1
0001ae   +  	LDBMI cl,11,1
0001cb   +  	LDBMI cm,0,10
0001e8   +  	LDBMI cn,1,10
000205   +  	LDBMI co,2,10
000222   +  	LDBMI cp,3,10
00023f   +  	LDBMI cq,4,10
00025c   +  	LDBMI cr,5,10
000279   +  	LDBMI cs,6,10
000296   +  	LDBMI ct,7,10
0002b3   +  	LDBMI cu,8,10
0002d0   +  	LDBMI cv,9,10
0002ed   +  	LDBMI cw,10,10
00030a   +  	LDBMI cx,11,10
000327   +  	LDBMI cy,0,19
000344   +  	LDBMI cz,1,19
000361   +  	LDBMI la,2,19
00037e   +  	LDBMI lb,3,19
00039b   +  	LDBMI lc,4,19
0003b8   +  	LDBMI ld,5,19
0003d5   +  	LDBMI le,6,19
0003f2   +  	LDBMI lf,7,19
00040f   +  	LDBMI lg,8,19
00042c   +  	LDBMI lh,9,19
000449   +  	LDBMI li,10,19
000466   +  	LDBMI lj,11,19
000483   +  	LDBMI lk,0,28
0004a0   +  	LDBMI ll,1,28
0004bd   +  	LDBMI lm,2,28
0004da   +  	LDBMI ln,3,28
0004f7   +  	LDBMI lo,4,28
000514   +  	LDBMI lp,5,28
000531   +  	LDBMI lq,6,28
00054e   +  	LDBMI lr,7,28
00056b   +  	LDBMI ls,8,28
000588   +  	LDBMI lt,9,28
0005a5   +  	LDBMI lu,10,28
0005c2   +  	LDBMI lv,11,28
0005df   +  	LDBMI lw,0,37
0005fc   +  	LDBMI lx,1,37
000619   +  	LDBMI ly,2,37
000636   +  	LDBMI lz,3,37
000653   +  	LDBMI n0,0,46
000670   +  	LDBMI n1,1,46
00068d   +  	LDBMI n2,2,46
0006aa   +  	LDBMI n3,3,46
0006c7   +  	LDBMI n4,4,46
0006e4   +  	LDBMI n5,5,46
000701   +  	LDBMI n6,6,46
00071e   +  	LDBMI n7,7,46
00073b   +  	LDBMI n8,8,46
000758   +  	LDBMI n9,9,46
000783   +  	TPX  px,py
0007af   +  	TPX  px,py
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
warning : Register already defined by the .DEF directive
0007fc   +  	ClearTimer0					; 4
00081a   +  	nop2						; 2
00081c   +  	nop2						; 2 sync with others
00082f   +  	nop2						; 2
00084f   +  	nop2						; 2
000853   +  	nop2						; 2
000855   +  	LDPXLL linectr				; 43
000874   +  	nop2						; 2
000877   +  	WriteByte R0				; 24
00088f   +  	WriteByte R1				; 24 
0008a7   +  	WriteByte R2				; 24 
0008bf   +  	WriteByte R3				; 24 
0008d7   +  	WriteByte R4				; 24 
0008ef   +  	WriteByte R5				; 24 
000907   +  	WriteByte R6				; 24
00091f   +  	WriteByte R7				; 24
000937   +  	WriteByte R8				; 24
00094f   +  	WriteByte R9				; 24
000967   +  	WriteByte R10				; 24
00097f   +  	WriteByte R11				; 24
000997   +  	nop2						; 2
00099b   +  	nop5						; 5
0009ad   +  	nop2						; 2 sync with others
          .include "TVScreenSaver.asm"
         ; /---------------------------------\
         ; | Draw on a TV, NTSC timing       |
         ; |                                 |
         ; | Runs at 8MHz on the ATMega16    |
         ; |                                 |
         ; |---------------------------------|
         ; | John Haskins                    |
         ; \---------------------------------/
         
          .INCLUDE "m16def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number				:AVR000
         ;* File Name			:"m16def.inc"
         ;* Title				:Register/Bit Definitions for the ATmega16
         ;* Date                 :07.09.2001
         ;* Version              :1.00
         ;* Support telephone	:+47 72 88 87 20 (ATMEL Norway)
         ;* Support fax			:+47 72 88 87 18 (ATMEL Norway)
         ;* Support E-mail		:avr@atmel.no
         ;* Target MCU			:ATmega16
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB				;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16				;output to PORTB
         ;*
         ;* in	r16,TIFR				;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0				;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set				;jump if set
         ;* ...							;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega16
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH		=$3e
          .equ	SPL		=$3d
          .equ	OCR0	=$3c		
          .equ	GICR	=$3b		; New name for GIMSK
          .equ	GIMSK	=$3b
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    I2CR    =$36
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34
          .equ    MCUCSR	=$34		; New name for MCUSR
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRHI  =$20
          .equ    UBRRH   =$20		; New name for UBRRHI
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR		=$0c
          .equ	UCSRA	=$0b
          .equ	USR		=$0b    ; For compatibility with S8535
          .equ	UCSRB	=$0a
          .equ	UCR		=$0a    ; For compatibility with S8535
          .equ	UCSRC	=$20	; Note! UCSRC equals UBRRH 
          .equ	UBRR	=$09
          .equ	UBRRL	=$09	; New name for UBRR
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
          .equ    I2DR    =$03
          .equ    I2AR    =$02
          .equ    I2SR    =$01
          .equ    I2BR    =$00
         
         ;***** Bit Definitions
         
         ; GIMSK / GICR
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	INT2	=5	
          .equ	IVSEL	=1      
          .equ	IVCE	=0      
         	
         ; GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
          .equ	INTF2	=5       
         
         ; TIMSK
          .equ    TOIE0   =0
          .equ    OCIE0   =1	 
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ; TIFR
          .equ    TOV0    =0
          .equ    OCF0    =1	 
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ; SPMCR
          .equ	SPMIE	=7
          .equ	ASB	=6
          .equ	ASRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         	
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
         
          .equ    TWIE    =0
         
         ; MCUCR
         	
          .equ    SM2     =7   
          .equ    SE      =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ; MCUSR
          .equ    JTD     =7
          .equ    ISC2    =6   
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ; TCCR0
          .equ    FOC0    =7   
          .equ    PWM0    =6  ;OBSOLETE! Use WGM00
          .equ    WGM00   =6
          .equ	COM01	=5   
          .equ	COM00	=4   
          .equ	CTC0	=3  ;OBSOLETE! Use WGM01
          .equ    WGM01   =3
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ; SFIOR
          .equ	ADTS2	=7	 			
          .equ	ADTS1	=6	 			
          .equ	ADTS0	=5	 			
          .equ    ADHSM   =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ    PSR2    =1
          .equ    PSR10   =0
         
         ; TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1  ; OBSOLETE! Use WGM11
          .equ	PWM10	=0  ; OBSOLETE! Use WGM10
          .equ	WGM11	=1
          .equ	WGM10	=0
         
         ; TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4  ; OBSOLETE! Use WGM13
          .equ	CTC10	=3  ; OBSOLETE! Use WGM12
          .equ	CTC1	=3  ; OBSOLETE! Use WGM12
          .equ	WGM13	=4
          .equ	WGM12	=3
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ; TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6  ; OBSOLETE! Use WGM20
          .equ    WGM20   =6
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3  ; OBSOLETE! Use WGM21
          .equ    WGM21   =3
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ; ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
         ; WDTCR
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ; EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ; PORTA
          .equ	PA7	=7
          .equ	PA6	=6
          .equ	PA5	=5
          .equ	PA4	=4
          .equ	PA3	=3
          .equ	PA2	=2
          .equ	PA1	=1
          .equ	PA0	=0
         
         ; DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ; PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ; PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ; DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ; PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ; PORTC
          .equ	PC7	=7
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ; DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ; PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ; PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ; DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ; PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ; SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ; SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ; UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3
          .equ	DOR	=3	;New name for OR
          .equ	PE	=2	 
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ; UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2
          .equ	UCSZ2	=2	; New name for CHR9
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7	 
          .equ	UMSEL	=6	 
          .equ	UPM1	=5	 
          .equ	UPM0	=4	 
          .equ	USBS	=3	 
          .equ	UCSZ1	=2	 
          .equ	UCSZ0	=1	 
          .equ	UCPOL	=0	 
         
         ; ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ; ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX4    =4
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ; ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ	ADATE	=5	 
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWAR
          .equ    TWGCE   =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	RAMEND =$45F
         
          .equ 	BOOTSTART	=$1E00  ;OBSOLETE!!! temporarily kept for compatibility
         ;.equ 	LARGEBOOTSTART	=$0C00  ;largest boot block is 2KB
         ;.equ 	SMALLBOOTSTART	=$0F80  ;smallest boot block is 256B
          .equ 	SMALLBOOTSTART	=0b1111110000000  ;($1F80) smallest boot block is 256B
          .equ 	SECONDBOOTSTART	=0b1111100000000  ;($1F00) second boot block size is 512B
          .equ 	THIRDBOOTSTART	=0b1111000000000  ;($1E00) third boot block size is 1KB
          .equ 	LARGEBOOTSTART	=0b1110000000000  ;($1C00) largest boot block is 2KB
          .equ	PAGESIZE	=64     ;number of WORDS in a page
          .equ 	FLASHEND	=$1fff
         
          .equ	INT0addr=$002	;External Interrupt0 Vector Address
          .equ	INT1addr=$004	;External Interrupt1 Vector Address
          .equ	OC2addr =$006	;Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$008	;Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$00A	;Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$00C	;Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$00E	;Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$010	;Overflow1 Interrupt Vector Address
          .equ	OVF0addr=$012	;Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$014	;SPI Interrupt Vector Address
          .equ	URXCaddr=$016	;UART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$018	;UART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$01A	;UART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$01C	;ADC Interrupt Vector Address
          .equ	ERDYaddr=$01E	;EEPROM Interrupt Vector Address
          .equ	ACIaddr =$020	;Analog Comparator Interrupt Vector Address
          .equ    TWIaddr =$022   ;Irq. vector address for Two-Wire Interface
          .equ	INT2addr=$024   ;External Interrupt2 Vector Address
          .equ	OC0addr =$026   ;Output Compare0 Interrupt Vector Address
          .equ	SPMRaddr=$028   ;Store Program Memory Ready Interrupt Vector Address
         
          .include "8MHzM16TVMacs.inc"			; the MARCROs that help the application draw stuff to the tv, should be included at the top of the file
         ; /---------------------------------\
         ; | Macros for Mega16Timed.asm      |
         ; |                                 |
         ; |                                 |
         ; |                                 |
         ; |---------------------------------|
         ; | John Haskins                    |
         ; \---------------------------------/
         
          .DEF tmp1=R19				; public use (push & pop)	SHARED
          .DEF tmp0=R20				; public use (push & pop)	SHARED
          .DEF WL=R24					; public use				RESERVED
          .DEF WH=R25					; public use				RESERVED
         
         ;-------------------------------------------------------------
         ; CONSTANTS
         ;-------------------------------------------------------------
         
          .EQU LINESFORPAINT=242			; 
          .EQU LINESFORVSYNC=11			; 
          .EQU MINROW=36					; 
          .EQU MAXROW=200					; 
          .EQU LINESIZE=12				; bytes per line
          .EQU LINESPIX=2					; lines to be drawn per pixel row
          .EQU MEMBASE=$0060				; base memory address
         
          .EQU INBLANK=0					; flag bit
          .EQU INPAINT=1					; flag bit
          .EQU INVSYNC1=2					; flag bit
          .EQU INVSYNC2=3					; flag bit
         
          .SET SYNC= 0b00000000			; Sync, both off
          .SET BLACK=0b00000001			; Black, low on
          .SET GREY= 0b00000100			; Grey, high on
          .SET WHITE=0b00000101			; White, low & high on
          .SET VIDPORT=PORTB				; port rca jack is on
          .SET WHITEBIT=2					; bit that indicates white
          .SET BLACKBIT=0					; bit that indicates black
         
          .SET COLUMNS=LINESIZE*8
          .SET ROWS=(MAXROW-MINROW)/LINESPIX
         
         ;-------------------------------------------------------------
         
          .MACRO nop2					; 2 - 2 cycle nop
          	nop						; 1
          	nop						; 1
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO nop5					; 5 - 5 cycles of nop
          	nop						; 1
          	nop						; 1
          	nop						; 1
          	nop						; 1
          	nop						; 1
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO SetupStack			; 4 - setup Stack pointer
          	ldi  tmp0,high(RAMEND)	; 1 stack pointer value
          	out  SPH,tmp0			; 1 setup stack pointer
          	ldi  tmp0,low(RAMEND)	; 1 stack pointer value
          	out  SPL,tmp0			; 1 setup stack pointer
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO SetupTVState				; 2 - Set TV Params
          	ldi  vidflag,(1<<INPAINT)	; 1
         ;	ldi  linectr,LINESFORPAINT	; 1
          	ldi  linectr,0				; 1
          .ENDMACRO
         
         ;-------------------------------------------------------------
         ; X Pointer for application, use at your discression
          .MACRO SetupXPointer		; 2 - setup X Pointer
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          .ENDMACRO
         
          .MACRO ResetX				; 2 - reset X Pinter to begining
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          .ENDMACRO
         
         ;-------------------------------------------------------------
         ; Y Pointer for SYSTEM ! do not user in application !
          .MACRO SetupYPointer		; 2 - setup Y Pointer
          	ldi  YH,HIGH(MEMBASE)	; 1 set high portion of Y Pointer
          	ldi  YL,LOW(MEMBASE)	; 1 set low portion of Y Pointer
          .ENDMACRO
         
          .MACRO ResetY				; 2 - reset Y Pinter to begining
          	ldi  YH,HIGH(MEMBASE)	; 1 set high portion of Y Pointer
          	ldi  YL,LOW(MEMBASE)	; 1 set low portion of Y Pointer
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO SetupTimer0			; 12 - setup Timer0
          	push tmp0				; 2
          	ldi  tmp0,(1<<CS00)		; 1 
          	out  TCCR0,tmp0			; 1 enable timer @ ck (no prescale)
          	ldi  tmp0,(1<<TOV0)|(1<<OCF0)	; 1 
          	out  TIFR,tmp0			; 1 clear pending
          	ldi  tmp0,(1<<TOIE0)|(1<<OCIE0)	; 1 
          	out  TIMSK,tmp0			; 1 enable timer0 overflow interrupt
          	ldi  tmp0,0b00111111	; 1
          	out  OCR0,tmp0			; 1 inital compare value
          	pop  tmp0				; 2
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO FillImage			; 135 Fill Image Data
         	; @0 = byte to fill with
          	push tmp0
          	push tmp1
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,ROWS			; 1
          	ldi  tmp0,@0
         
          fillLine:
          	st   X+,tmp0					; 2 ind 0
          	st   X+,tmp0					; 2 ind 1
          	st   X+,tmp0					; 2 ind 2
          	st   X+,tmp0					; 2 ind 3
          	st   X+,tmp0					; 2 ind 4
          	st   X+,tmp0					; 2 ind 5
          	st   X+,tmp0					; 2 ind 6
          	st   X+,tmp0					; 2 ind 7
          	st   X+,tmp0					; 2 ind 8
          	st   X+,tmp0					; 2 ind 9
          	st   X+,tmp0					; 2 ind 10
          	st   X+,tmp0					; 2 ind 11
          	dec tmp1
          	brne fillLine
         
          	pop  tmp1
          	pop  tmp0
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO SPXI					; 15 Set PiXel Immediant
         	; @0 = x  0 <= x < 96
         	; @1 = y  0 <= y < 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,high(@1*LINESIZE)	; 1 
          	ldi  tmp0,low(@1*LINESIZE)	; 1 
          	add  XL,tmp0			; 1 
          	adc  XH,tmp1			; 1 
          	adiw XH:XL,(@0/8)		; 2 get byte
          	ld   tmp0,X				; 2 load
          	sbr  tmp0,(1<<(@0&$07))	; 1 change
          	st   X,tmp0				; 2 store
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO CPXI		 			; 15 Clear PiXel Immediant
         	; @0 = x  0 <= x <= 96
         	; @1 = y  0 <= y <= 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,high(@1*LINESIZE)	; 1 
          	ldi  tmp0,low(@1*LINESIZE)	; 1 
          	add  XL,tmp0			; 1
          	adc  XH,tmp1			; 1
          	adiw XH:XL,(@0/8)		; 2 get byte X/8
          	ld   tmp0,X				; 2 load
          	cbr  tmp0,(1<<(@0&$7))	; 1 change bit
          	st   X,tmp0				; 2 store	
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO TPXI		 			; 15 Toggle PiXel Immediant
         	; @0 = x  0 <= x <= 96
         	; @1 = y  0 <= y <= 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,high(@1*LINESIZE)	; 1 
          	ldi  tmp0,low(@1*LINESIZE)	; 1 
          	add  XL,tmp0			; 1
          	adc  XH,tmp1			; 1
          	adiw XH:XL,(@0/8)		; 2 get byte X/8
          	ld   tmp0,X				; 2 load
          	sbrs tmp0,(@0&$7)	; 1 skip if set
          	rjmp sit
          cit:cbr  tmp0,(1<<(@0&$7))	; 1 clear bit
          	rjmp dit
          sit:sbr  tmp0,(1<<(@0&$7))	; 1 set bit
          dit:st   X,tmp0				; 2 store
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO SPX					; 15 Set PiXel
         	; @0 = x register  0 <= x < 96
         	; @1 = y register  0 <= y < 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,LINESIZE		; 1 bytes per line (13)
          	mov  tmp0,@1			; 1 get register y value
          	mul  tmp0,tmp1			; 2 line number * bytes per line
          	mov  tmp1,r1			; 1 move back to tmp1
          	mov  tmp0,r0			; 1 move back to tmp0
          	add  XL,tmp0			; 1	
          	adc  XH,tmp1			; 1	
          	mov  tmp0,@0			; 1 get register x value
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right net result @0/8
          	add  XL,tmp0			; 1
          	ld   tmp0,X				; 2 load
          	mov  ZL,@0				; 1
          	andi ZL,$07			; 1 just last bits
          	subi ZL, -(low(BitMaskTable*2)) 
          	ldi  ZH,0x01
          	sbci ZH, -(high(BitMaskTable*2)) 
          	lpm  ZL,Z
          	or   tmp0,ZL
          	st   X,tmp0				; 2 store	
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO CPX					; 15 Clear PiXel
         	; @0 = x register  0 <= x < 96
         	; @1 = y register  0 <= y < 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,LINESIZE		; 1 bytes per line (13)
          	mov  tmp0,@1			; 1 get register y value
          	mul  tmp0,tmp1			; 2 line number * bytes per line
          	mov  tmp1,r1			; 1 move back to tmp1
          	mov  tmp0,r0			; 1 move back to tmp0
          	add  XL,tmp0			; 1	
          	adc  XH,tmp1			; 1	
          	mov  tmp0,@0			; 1 get register x value
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right net result @0/8
          	add  XL,tmp0			; 1
          	ld   tmp0,X				; 2 load
          	mov  ZL,@0				; 1
          	andi ZL,$07			; 1 just last bits
          	subi ZL, -(low(BitMaskTable*2)) 
          	ldi  ZH,0x01
          	sbci ZH, -(high(BitMaskTable*2)) 
          	lpm  ZL,Z
          	com  ZL
          	and  tmp0,ZL
          	st   X,tmp0				; 2 store	
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO TPX					; 15 Toggle PiXel
         	; @0 = x register  0 <= x < 96
         	; @1 = y register  0 <= y < 82
          	push tmp0				; 2 store initial value
          	push tmp1				; 2 store initial value
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,LINESIZE		; 1 bytes per line (13)
          	mov  tmp0,@1			; 1 get register y value
          	mul  tmp0,tmp1			; 2 line number * bytes per line
          	mov  tmp1,r1			; 1 move back to tmp1
          	mov  tmp0,r0			; 1 move back to tmp0
          	add  XL,tmp0			; 1	
          	adc  XH,tmp1			; 1	
          	mov  tmp0,@0			; 1 get register x value
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right
          	lsr  tmp0				; 1 shift right net result @0/8
          	add  XL,tmp0			; 1
          	ld   tmp0,X				; 2 load
          	mov  ZL,@0				; 1
          	andi ZL,$07				; 1 just last 3 bits
          	subi ZL, -(low(BitMaskTable*2)) 
          	ldi  ZH,0x01
          	sbci ZH, -(high(BitMaskTable*2)) 
          	lpm  ZL,Z
         	
          	com  ZL
          	mov  tmp1,tmp0
          	and  tmp1,ZL
          	cpse tmp1,tmp0			; 2:1 if was 0 skip
          	rjmp to0				; 0:2 set 0
          	rjmp to1				; 2:0 set 1
          to0:and  tmp0,ZL
          	rjmp ts
          to1:com  ZL
          	or   tmp0,ZL
         
          ts: st   X,tmp0				; 2 store	
          	pop  tmp1				; 2 restore initial value
          	pop  tmp0				; 2 restore initial value
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO LDBMI				; Load BitMap Immediant
         	; @0 = bitmap lable
         	; @1 = x byte 0 <= x < 12 (byte number)
         	; @2 = y      0 <= y < 82
          	push tmp0
          	push tmp1
         ;	push WL
         ;	push WH
         
         	; setup X Pointer to correct byte for first char
          	ldi  XH,HIGH(MEMBASE)	; 1 set high portion of X Pointer
          	ldi  XL,LOW(MEMBASE)	; 1 set low portion of X Pointer
          	ldi  tmp1,high(@2*LINESIZE)	; 1 
          	ldi  tmp0,low(@2*LINESIZE)	; 1 
          	add  XL,tmp0			; 1
          	adc  XH,tmp1			; 1
          	adiw XH:XL,(@1)			; 2 get byte X
         	; setup EEPROM Read to first byte of char
          	ldi  WH,high(@0)
          	ldi  WL, low(@0)
          	out  EEARH,WH
          	out  EEARL,WL
         
          	ldi  tmp0,8				; ctr for bytes
         
          readLoop:
          	sbi  EECR,EERE
          _checkRead:
          	in   tmp1,EECR
          	andi tmp1,EERE
          	tst  tmp1
          	brne _checkRead
          	in   tmp1,EEDR
         	; now tmp1 has byte from table
         	
          	st   X,tmp1				; store the byte of pixels
          	adiw XH:XL,LINESIZE		; move to next line
         
          	adiw WH:WL,1
          	out  EEARL,WL			; move to next byte of char
          	out  EEARH,WH			; carry if needed
         
          	dec  tmp0
          	brne readLoop
         	
         ;	pop  WH
         ;	pop  WL
          	pop  tmp1
          	pop  tmp0
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
         ;-------------------------------------------------------------
         ; Used in TV Output Machine
         ;-------------------------------------------------------------
         
          .MACRO ClearTimer0			; 8 - Clear Timer0
          	push tmp0				; 2
          	clr  tmp0				; 1 
          	out  TCNT0,tmp0			; 1 
          	ldi  tmp0,(1<<TOV0)|(1<<OCF0)	; 1 
          	out  TIFR,tmp0			; 1 clear pending
          	pop  tmp0				; 2
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO LDPXLL				; 43 LoaD Pixel Line into R0-7 row in register
         	; @0 = line value in register  MINROW(36) <= line <= MAXROW(204)
          	push tmp0				; 2
          	push tmp1				; 2
          	ldi  YH,HIGH(MEMBASE)	; 1 set high portion of Y Pointer
          	ldi  YL,LOW(MEMBASE)	; 1 set low portion of Y Pointer
          	mov  tmp0,@0			; 1
          	subi tmp0,MINROW		; 1
          	lsr  tmp0				; 1
          	ldi  tmp1,LINESIZE		; 1-
          	mul  tmp1,tmp0			; 1
          	mov  tmp1,r1			; 1
          	mov  tmp0,r0			; 1
          	add  YL,tmp0			; 1
          	adc  YH,tmp1			; 1
          	ld   R0,Y+				; 2
          	ld   R1,Y+				; 2-
          	ld   R2,Y+				; 2-
          	ld   R3,Y+				; 2
          	ld   R4,Y+				; 2
          	ld   R5,Y+				; 2
          	ld   R6,Y+				; 2-
          	ld   R7,Y+				; 2-
          	ld   R8,Y+				; 2
          	ld   R9,Y+				; 2
          	ld   R10,Y+				; 2
          	ld   R11,Y+				; 2-
          	pop  tmp1				; 2-
          	pop  tmp0				; 2
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
          .MACRO WriteByte			; 24 - write byte out to screen
          	bst  @0,0						; 1
          	bld  pixel,WHITEBIT				; l
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,1						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,2						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,3						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,4						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,5						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,6						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
         
          	bst  @0,7						; 1
          	bld  pixel,WHITEBIT				; 1
          	out  VIDPORT,pixel				; 1 write out byte
          .ENDMACRO
         
         ;-------------------------------------------------------------
         
         
          .DEF py=r16					; temp register
          .DEF px=r17					; temp register
          .DEF dx=r18					; temp register
          .DEF dy=r19					; temp register
          .DEF temp1=r20				; temp register
         
          .EQU BOUND_T=56
          .EQU BOUND_B=81
          .EQU BOUND_L=1
          .EQU BOUND_R=95
         
         ;-------------------------------------------------------------
          .CSEG						; code segment
          .ORG $0000					; begining of code
000000 c02f      	rjmp reset				; reset interrupt (and start)
          .ORG  OVF0addr				; location of Timer0 Overflow ISR
000012 c7dd      	rjmp ISR_TOV0			; 2 Interrupt Service Routine for Timer0 Overflow
          .ORG  OC0addr				; location of Timer0 Compare Match ISR (shouldn't need to do this but it is what works so...)
000026 c7ca      	rjmp ISR_COMP0			; 2 Interrupt Service Routine for Timer0 Overflow
         
         ;-------------------------------------------------------------
         
          .ORG $0030					; after last interrupt
         
          reset:
000030   +  	SetupStack				; 4 Setup the Stack		! Required or do yourself
000034   +  	SetupXPointer			; 2 Setup X Pointer		! Required or do yourself
000036   +  	SetupYPointer			; 2 Setup X Pointer		! Required or do yourself
000038   +  	SetupTVState			; 3 Setup TV State Mchn	! Required
00003a   +  	SetupTimer0				; 8 Setup Timer			! Required
         	
         ;-------------------------------------------------------------
         
          main:
000044 ef4f      	ldi  temp1,$ff			; 1 
000045 bb47      	out  DDRB,temp1			; 1 
         
         	; setup the picture
000046   +  	FillImage $00		;   clear the image
         
00005c 0000      	nop
00005d 0000      	nop
         
00005e e000      	ldi  py,$00
00005f e010      	ldi  px,$00
000060 e020      	ldi  dx,$00
000061 e030      	ldi  dy,$00
000062 e040      	ldi  temp1,$00
         
         ;-----
         
000063   +  	ClearTimer0				; ready to begin
000069 9478      	sei						; 1 enable interrupts 		! Required
         
          init:
00006a e308      	ldi  py,BOUND_T
00006b e011      	ldi  px,BOUND_L
00006c e831      	ldi  dy,$81
00006d e821      	ldi  dx,$81
00006e 0000      	nop
         
         	; Capicals on top rows
00006f   +  	LDBMI ca,0,1
00008c   +  	LDBMI cb,1,1
0000a9   +  	LDBMI cc,2,1
0000c6   +  	LDBMI cd,3,1
0000e3   +  	LDBMI ce,4,1
000100   +  	LDBMI cf,5,1
00011d   +  	LDBMI cg,6,1
00013a   +  	LDBMI ch,7,1
000157   +  	LDBMI ci,8,1
000174   +  	LDBMI cj,9,1
000191   +  	LDBMI ck,10,1
0001ae   +  	LDBMI cl,11,1
0001cb   +  	LDBMI cm,0,10
0001e8   +  	LDBMI cn,1,10
000205   +  	LDBMI co,2,10
000222   +  	LDBMI cp,3,10
00023f   +  	LDBMI cq,4,10
00025c   +  	LDBMI cr,5,10
000279   +  	LDBMI cs,6,10
000296   +  	LDBMI ct,7,10
0002b3   +  	LDBMI cu,8,10
0002d0   +  	LDBMI cv,9,10
0002ed   +  	LDBMI cw,10,10
00030a   +  	LDBMI cx,11,10
000327   +  	LDBMI cy,0,19
000344   +  	LDBMI cz,1,19
         ; Lower case on next rows
000361   +  	LDBMI la,2,19
00037e   +  	LDBMI lb,3,19
00039b   +  	LDBMI lc,4,19
0003b8   +  	LDBMI ld,5,19
0003d5   +  	LDBMI le,6,19
0003f2   +  	LDBMI lf,7,19
00040f   +  	LDBMI lg,8,19
00042c   +  	LDBMI lh,9,19
000449   +  	LDBMI li,10,19
000466   +  	LDBMI lj,11,19
000483   +  	LDBMI lk,0,28
0004a0   +  	LDBMI ll,1,28
0004bd   +  	LDBMI lm,2,28
0004da   +  	LDBMI ln,3,28
0004f7   +  	LDBMI lo,4,28
000514   +  	LDBMI lp,5,28
000531   +  	LDBMI lq,6,28
00054e   +  	LDBMI lr,7,28
00056b   +  	LDBMI ls,8,28
000588   +  	LDBMI lt,9,28
0005a5   +  	LDBMI lu,10,28
0005c2   +  	LDBMI lv,11,28
0005df   +  	LDBMI lw,0,37
0005fc   +  	LDBMI lx,1,37
000619   +  	LDBMI ly,2,37
000636   +  	LDBMI lz,3,37
         ; numbers on bottom row
000653   +  	LDBMI n0,0,46
000670   +  	LDBMI n1,1,46
00068d   +  	LDBMI n2,2,46
0006aa   +  	LDBMI n3,3,46
0006c7   +  	LDBMI n4,4,46
0006e4   +  	LDBMI n5,5,46
000701   +  	LDBMI n6,6,46
00071e   +  	LDBMI n7,7,46
00073b   +  	LDBMI n8,8,46
000758   +  	LDBMI n9,9,46
         	
000775 0000      	nop
000776 0000      	nop
         
          mainLoop:
         ;	rjmp mainLoop	; don't do anything
         
000777 d255      	rcall WasteThousand
000778 d254      	rcall WasteThousand
000779 d253      	rcall WasteThousand
00077a d252      	rcall WasteThousand
00077b d251      	rcall WasteThousand
00077c d250      	rcall WasteThousand
00077d d24f      	rcall WasteThousand
00077e d24e      	rcall WasteThousand
00077f d24d      	rcall WasteThousand
000780 d24c      	rcall WasteThousand
         ;
         ;	rjmp moveX		; don't flash, just bounce
         ;
         ;
         ;	; toggle move indicator pixels
         ;	TPXI 45,40
         ;	TPXI 46,40
         ;	TPXI 47,40
         ;	TPXI 45,41
         ;	TPXI 46,41
         ;	TPXI 47,41
         ;	TPXI 45,42
         ;	TPXI 46,42
         ;	TPXI 47,42
         ;	
         ;	nop
         ;	nop
         ;
         ;	rjmp mainLoop	; don't bounce the ball
         	
000781 0000      	nop
000782 0000      	nop
000783   +  	TPX  px,py
          moveX:
0007a7 fd27      	sbrc dx,7
0007a8 c032      	rjmp moveLeft
0007a9 ff27      	sbrs dx,7
0007aa c029      	rjmp moveRight
          moveY:
0007ab fd37      	sbrc dy,7
0007ac c03c      	rjmp moveUp
0007ad ff37      	sbrs dy,7
0007ae c033      	rjmp moveDown
          moveDone:
         	; set new pixel
0007af   +  	TPX  px,py
         	
0007d3 cfa3      	rjmp mainLoop			; 2 keep it going
         
         ;-------------------------------------------------------------
         
          MoveRight:
0007d4 2f42      	mov  temp1,dx
0007d5 9513      	inc  px
0007d6 351f      	cpi  px,BOUND_R
0007d7 f010      	brlo mrd
0007d8 951a      	dec  px
0007d9 6820      	sbr  dx,$80
0007da cfd0      mrd:rjmp moveY
         
         ;-------------------------------------------------------------
         
          MoveLeft:
0007db 2f42      	mov  temp1,dx
0007dc 951a      	dec  px
0007dd 3011      	cpi  px,BOUND_L
0007de f410      	brsh mld
0007df 9513      	inc  px
0007e0 772f      	cbr  dx,$80
0007e1 cfc9      mld:rjmp moveY
         
         ;-------------------------------------------------------------
         
          MoveDown:
0007e2 2f43      	mov  temp1,dy
0007e3 9503      	inc  py
0007e4 3501      	cpi  py,BOUND_B
0007e5 f010      	brlo mud
0007e6 950a      	dec  py
0007e7 6830      	sbr  dy,$80
0007e8 cfc6      mud:rjmp moveDone
         
         ;-------------------------------------------------------------
         
          MoveUp:
0007e9 2f43      	mov  temp1,dy
0007ea 950a      	dec  py
0007eb 3308      	cpi  py,BOUND_T
0007ec f410      	brsh mdd
0007ed 9503      	inc  py
0007ee 773f      	cbr  dy,$80
0007ef cfbf      mdd:rjmp moveDone
         
         ;-------------------------------------------------------------
         
         ; Include the TV outpu routines
          .include "8MHzM16TV.inc"			; The main API, has the interrupt routines and draws to the tv
         ; /---------------------------------\
         ; | Draw on a TV, NTSC timing       |
         ; |                                 |
         ; | Runs at 8MHz on ATMega16 AVR    |
         ; |                                 |
         ; |---------------------------------|
         ; | John Haskins                    |
         ; \---------------------------------/
         
          .DEF pixel=R18					; pixel value,				SHARED
          .DEF temp2=R19					; temp value,				SHARED
          .DEF temp3=R20					; temp value,				SHARED
          .DEF linectr=R21				; current line,				RESERVED
          .DEF vidflag=R22				; flag store				RESERVED
         
         ;-------------------------------------------------------------
         
          .CSEG							; code segment at next available location
         
          ISR_TOV0:
0007f0 9518      	reti						; 
         
         ;-------------------------------------------------------------
         
          ISR_COMP0:
0007f1 932f      	push pixel					; 2 store initial register
0007f2 b72f      	in   pixel,SREG				; 1 get SREG
0007f3 932f      	push pixel					; 2 store SREG
0007f4 933f      	push temp2					; 2
0007f5 934f      	push temp3					; 2
         
0007f6 fd61      	sbrc  vidflag,INPAINT		; 2:1
0007f7 c010      	rjmp HandlePaint			; 0:3+
         
0007f8 fd62      	sbrc  vidflag,INVSYNC1		; 2:1
0007f9 c1b3      	rjmp HandleVSync1			; 0:3+
         	
0007fa fd63      	sbrc  vidflag,INVSYNC2		; 2:1
0007fb c1c1      	rjmp HandleVSync2			; 0:3+
         
         
          ISR_COM0_DONE:
0007fc   +  	ClearTimer0					; 4
         
000802 914f      	pop  temp3					; 2
000803 913f      	pop  temp2					; 2
000804 912f      	pop  pixel					; 2 retrieve SREG
000805 bf2f      	out  SREG,pixel				; 1 set SREG
000806 912f      	pop  pixel					; 2 restore initial register
000807 9518      	reti						; 4
         
         ;-------------------------------------------------------------
         ;
         ; Handle Methods,
         ;  Each handles a distinct state in the signal
         ;  Responsible for changing to next state and
         ;   setting OCR0 for time in current state
         ;  Lead in  21 CK 						including nop2s
         ;  Lead out 29 CK (16 to clock reset)	including ret
         ;  MAX Length 230 CK (without clearing timer internally)
         ;  MIN OCR0 16 for it to catch
         ;
         ;-------------------------------------------------------------
         
          HandlePaint:
         	;------
          HSync:						; h sync pulse 4.7us=37.6ck
000808 e020      	ldi  pixel,SYNC				; 1 sync level
000809 bb28      	out  VIDPORT,pixel			; 1 write out byte
         	; wait 36
00080a d1ed      	rcall WasteTen				; 10
00080b d1ec      	rcall WasteTen				; 10
00080c d1ef      	rcall WasteSeven			; 7
00080d d1ee      	rcall WasteSeven			; 7
00080e 0000      	nop							; 1
00080f 0000      	nop							; 1
          BackPorch:					; setup in 5.9us=47.2ck
000810 e021      	ldi  pixel,BLACK			; 1 sync level
000811 bb28      	out  VIDPORT,pixel			; 1 write out byte
         	;wait 23
000812 d1e5      	rcall WasteTen				; 10
000813 d1e4      	rcall WasteTen				; 10
000814 0000      	nop							; 1
         
000815 3254      	cpi  linectr,MINROW			; 1
000816 f018      	brlo OutLine1				; 2:1
000817 3c58      	cpi  linectr,MAXROW			; 1 
000818 f418      	brsh OutLine				; 2:1
000819 c038      	rjmp InLine					; 2
         
          OutLine1:
00081a   +  	nop2						; 2
          OutLine:
00081c   +  	nop2						; 2 sync with others
00081e d1d9      	rcall WasteTen				; 10
00081f d1d8      	rcall WasteTen				; 10
000820 d1d7      	rcall WasteTen				; 10
000821 d1d6      	rcall WasteTen				; 10
000822 d1d9      	rcall WasteSeven			; 7
000823 d1d8      	rcall WasteSeven			; 7
         
000824 e021      	ldi  pixel,BLACK			; 1
000825 2f45      	mov  temp3,linectr			; 1
000826 9546      	lsr  temp3					; 1
000827 9546      	lsr  temp3					; 1
000828 3342      	cpi  temp3,(MAXROW-0)/4		; 1
000829 f409      	brne t2						; 1:2 *
00082a e024      t1:	ldi  pixel,GREY				; 1:0
00082b 3048      t2:	cpi  temp3,(MINROW-1)/4		; 1
00082c f409      	brne t4						; 1:2 *
00082d e024      t3:	ldi  pixel,GREY				; 1:0
00082e 0000      t4: nop							; 1
         	
         	; write actuall pixels 334
00082f   +  	nop2						; 2
000831 bb28      	out  VIDPORT,pixel			; 1
         	; 48 wait
000832 d1c5      	rcall WasteTen				; 10
000833 d1c4      	rcall WasteTen				; 10
000834 d1c3      	rcall WasteTen				; 10
000835 d1c2      	rcall WasteTen				; 10
000836 d1c5      	rcall WasteSeven			; 7
000837 0000      	nop 						; 1
         
000838 3021      	cpi  pixel,BLACK			; 1
000839 f479      	brne itsGrey				; 2:1
         ;	cpi  linectr,(MINROW-1)/4-2 ; 1
         ;	brsh itsGrey				; 2:1
         	; it's black, just set timer and get it go
00083a d1b5      	rcall WasteFifty			; 50
00083b d1bc      	rcall WasteTen				; 10
         
00083c 9553      	inc  linectr				; 1
00083d 3f52      	cpi  linectr,LINESFORPAINT	; 1
00083e 0000      	nop
00083f f021      	breq gotoVSync
         
000840 e062      	ldi  vidflag,(1<<INPAINT)	; 1 change state
000841 ef39      	ldi  temp2,249				; 1 time 'till Front Porch starts
000842 bf3c      	out  OCR0,temp2				; 1 set compare
000843 cfb8      	rjmp ISR_COM0_DONE			; 2
          gotoVSync:						; skips if not last line
000844 e068      	ldi  vidflag,(1<<INVSYNC2)	; 1 change state
000845 e050      	ldi  linectr,0				; 1 
000846 e236      	ldi  temp2,38				; 1 time 'till Front Porch starts
000847 bf3c      	out  OCR0,temp2				; 1 set compare
         	;------
000848 cfb3      	rjmp ISR_COM0_DONE			; 2
         	
          itsGrey:
000849 d199      	rcall WasteHundred			; 100
00084a d198      	rcall WasteHundred			; 100
00084b d1ac      	rcall WasteTen				; 10
00084c d1ab      	rcall WasteTen				; 10
00084d d1aa      	rcall WasteTen				; 10
00084e d1a9      	rcall WasteTen				; 10
00084f   +  	nop2						; 2
000851 c149      	rjmp LineDone				; 2
         
          InLine:
000852 d1a9      	rcall WasteSeven			; 7
000853   +  	nop2						; 2
         	;nop  						; 1
000855   +  	LDPXLL linectr				; 43
         
000870 d18b      	rcall WasteSeven			; 7
000871 d18a      	rcall WasteSeven			; 7
         	; write actuall pixels 334
000872 e024      	ldi  pixel,GREY				; 1
000873 bb28      	out  VIDPORT,pixel			; 1
000874   +  	nop2						; 2
000876 e021      	ldi  pixel,BLACK			; 1
000877   +  	WriteByte R0				; 24
00088f   +  	WriteByte R1				; 24 
0008a7   +  	WriteByte R2				; 24 
0008bf   +  	WriteByte R3				; 24 
0008d7   +  	WriteByte R4				; 24 
0008ef   +  	WriteByte R5				; 24 
000907   +  	WriteByte R6				; 24
00091f   +  	WriteByte R7				; 24
000937   +  	WriteByte R8				; 24
00094f   +  	WriteByte R9				; 24
000967   +  	WriteByte R10				; 24
00097f   +  	WriteByte R11				; 24
000997   +  	nop2						; 2
000999 e024      	ldi  pixel,GREY				; 1
00099a bb28      	out  VIDPORT,pixel			; 1 write out byte
         
          LineDone:
00099b   +  	nop5						; 5
         	;FrontPorch:				; setup/cleanum in 1.4us=11.2ck
0009a0 e021      	ldi  pixel,BLACK			; 1 sync level
0009a1 bb28      	out  VIDPORT,pixel			; 1 write out byte
         	;wait 68
0009a2 d055      	rcall WasteTen				; 10
0009a3 d054      	rcall WasteTen				; 10
0009a4 d053      	rcall WasteTen				; 10
0009a5 d052      	rcall WasteTen				; 10
0009a6 d051      	rcall WasteTen				; 10
0009a7 d054      	rcall WasteSeven			; 7
         
         ;	dec  linectr				; 1 line counter --
0009a8 9553      	inc  linectr				; 1 line counter ++
0009a9 d04e      	rcall WasteTen				; 10
0009aa d04d      	rcall WasteTen				; 10
0009ab d04c      	rcall WasteTen				; 10
0009ac ce5b      	rjmp HandlePaint			; 2
         	
         ;-------------------------------------------------------------
         
          HandleVSync1:
0009ad   +  	nop2						; 2 sync with others
         	;------
0009af e031      	ldi  temp2,BLACK			; 1 sync level
0009b0 bb38      	out  VIDPORT,temp2			; 1 write out byte
         	; wait 36
0009b1 d046      	rcall WasteTen				; 10
0009b2 d045      	rcall WasteTen				; 10
0009b3 d048      	rcall WasteSeven			; 7
0009b4 d047      	rcall WasteSeven			; 7
0009b5 0000      	nop							; 1
0009b6 0000      	nop							; 1
0009b7 e020      	ldi  pixel,SYNC				; 1
0009b8 bb28      	out  VIDPORT,pixel			; 1
         	
0009b9 e068      	ldi  vidflag,(1<<INVSYNC2)	; 1 change state
0009ba ef3a      	ldi  temp2,250				; time 'till VSync2 starts
0009bb bf3c      	out  OCR0,temp2				; set compare
         	;------
0009bc ce3f      	rjmp ISR_COM0_DONE			; 2
         
         ;-------------------------------------------------------------
         
          HandleVSync2:
         	;------
0009bd 9553      	inc  linectr				; 1
0009be 305b      	cpi  linectr,LINESFORVSYNC	; 1
0009bf f429      	brne keepVSync				; 2:1
          gotoPaint:						; skips if not last line
0009c0 e062      	ldi  vidflag,(1<<INPAINT)	; 1 change state
0009c1 e050      	ldi  linectr,0				; 1 
0009c2 ea3b      	ldi  temp2,171				; 1 time 'till VSyncH starts
0009c3 bf3c      	out  OCR0,temp2				; 1 set compare
         	;------
0009c4 ce37      	rjmp ISR_COM0_DONE			; 2
          keepVSync:						; if not last line ends up here
0009c5 e064      	ldi  vidflag,(1<<INVSYNC1)	; 1 change state
0009c6 ea36      	ldi  temp2,166				; 1 time 'till VSyncH starts
0009c7 bf3c      	out  OCR0,temp2				; 1 set compare
         	;------
0009c8 ce33      	rjmp ISR_COM0_DONE			; 2
         
         
0009c9      BitMaskTable:	.DB 1,2,4,8,16,32,64,128
0009c9 0201
0009ca 0804
0009cb 2010
0009cc 8040
         
         ;-------------------------------------------------------------
         
          .DSEG
          .ORG $0060
000060      ImageSramData:	.BYTE (MAXROW-MINROW)/LINESPIX*LINESIZE
          .include "Delay.inc"				; Delay routines
         ; /---------------------------------------------\
         ; |              Delay Subroutines              |
         ; | --------------------------------------------|
         ; |                                             |
         ; | Sample Usage                                |
         ; |                                             |
         ; | rcall WasteSeven        ; 7 cycles gone     |
         ; | rcall WasteHundred      ; 100 cycles gone   |
         ; |                                             |
         ; | --------------------------------------------|
         ; |  Writen by John Haskins                     |
         ; |   v1.0 01.23.05                             |
         ; \---------------------------------------------/
         
          .CSEG
         
         ;-------------------------------------------------------------
         
          WasteThousand:				; 3 for rcall
0009cd 0000      	nop						; 1
0009ce 0000      	nop						; 1
0009cf 0000      	nop						; 1
0009d0 d012      	rcall WasteHundred		; 100
0009d1 d011      	rcall WasteHundred		; 100
0009d2 d010      	rcall WasteHundred		; 100
0009d3 d00f      	rcall WasteHundred		; 100
0009d4 d00e      	rcall WasteHundred		; 100
0009d5 d00d      	rcall WasteHundred		; 100
0009d6 d00c      	rcall WasteHundred		; 100
0009d7 d00b      	rcall WasteHundred		; 100
0009d8 d00a      	rcall WasteHundred		; 100
0009d9 d01e      	rcall WasteTen			; 10
0009da d01d      	rcall WasteTen			; 10
0009db d01c      	rcall WasteTen			; 10
0009dc d01b      	rcall WasteTen			; 10
0009dd d01a      	rcall WasteTen			; 10
0009de d019      	rcall WasteTen			; 10
0009df d018      	rcall WasteTen			; 10
0009e0 d017      	rcall WasteTen			; 10
0009e1 d016      	rcall WasteTen			; 10
0009e2 9508      	ret						; 4 return
         
         ;-------------------------------------------------------------
         
          WasteHundred:				; 3 for rcall
0009e3 0000      	nop						; 1
0009e4 0000      	nop						; 1
0009e5 0000      	nop						; 1
0009e6 d011      	rcall WasteTen			; 10
0009e7 d010      	rcall WasteTen			; 10
0009e8 d00f      	rcall WasteTen			; 10
0009e9 d00e      	rcall WasteTen			; 10
0009ea d00d      	rcall WasteTen			; 10
0009eb d00c      	rcall WasteTen			; 10
0009ec d00b      	rcall WasteTen			; 10
0009ed d00a      	rcall WasteTen			; 10
0009ee d009      	rcall WasteTen			; 10
0009ef 9508      	ret						; 4 return
         
         ;-------------------------------------------------------------
         
          WasteFifty:					; 3 for rcall cost
0009f0 d007      	rcall WasteTen			; 10
0009f1 d006      	rcall WasteTen			; 10
0009f2 d005      	rcall WasteTen			; 10
0009f3 d004      	rcall WasteTen			; 10
0009f4 0000      	nop						; 1
0009f5 0000      	nop						; 1
0009f6 0000      	nop						; 1
0009f7 9508      	ret						; 4 return
         
         ;-------------------------------------------------------------
         
          WasteTen:					; 3 for rcall cost
0009f8 0000      	nop						; 1
0009f9 0000      	nop						; 1
0009fa 0000      	nop						; 1
0009fb 9508      	ret						; 4 return
         
         ;-------------------------------------------------------------
         
          WasteSeven:					; 3 for rcall
0009fc 9508      	ret;					; 4 return
         
         ;-------------------------------------------------------------
          .include "Characters.inc"			; EEPROM character data
          .include "bits.inc"
         ;; NOTE: these are inverted!
         ;; $01 binary is 0b00000001
         ;; but displays as o_______
         ;; since we write out low bits first (left)
         
          .equ ________=$00
          .equ o_______=$01
          .equ _o______=$02
          .equ oo______=$03
          .equ __o_____=$04
          .equ o_o_____=$05
          .equ _oo_____=$06
          .equ ooo_____=$07
          .equ ___o____=$08
          .equ o__o____=$09
          .equ _o_o____=$0a
          .equ oo_o____=$0b
          .equ __oo____=$0c
          .equ o_oo____=$0d
          .equ _ooo____=$0e
          .equ oooo____=$0f
         
          .equ ____o___=$10
          .equ o___o___=$11
          .equ _o__o___=$12
          .equ oo__o___=$13
          .equ __o_o___=$14
          .equ o_o_o___=$15
          .equ _oo_o___=$16
          .equ ooo_o___=$17
          .equ ___oo___=$18
          .equ o__oo___=$19
          .equ _o_oo___=$1a
          .equ oo_oo___=$1b
          .equ __ooo___=$1c
          .equ o_ooo___=$1d
          .equ _oooo___=$1e
          .equ ooooo___=$1f
         
          .equ _____o__=$20
          .equ o____o__=$21
          .equ _o___o__=$22
          .equ oo___o__=$23
          .equ __o__o__=$24
          .equ o_o__o__=$25
          .equ _oo__o__=$26
          .equ ooo__o__=$27
          .equ ___o_o__=$28
          .equ o__o_o__=$29
          .equ _o_o_o__=$2a
          .equ oo_o_o__=$2b
          .equ __oo_o__=$2c
          .equ o_oo_o__=$2d
          .equ _ooo_o__=$2e
          .equ oooo_o__=$2f
         
          .equ ____oo__=$30
          .equ o___oo__=$31
          .equ _o__oo__=$32
          .equ oo__oo__=$33
          .equ __o_oo__=$34
          .equ o_o_oo__=$35
          .equ _oo_oo__=$36
          .equ ooo_oo__=$37
          .equ ___ooo__=$38
          .equ o__ooo__=$39
          .equ _o_ooo__=$3a
          .equ oo_ooo__=$3b
          .equ __oooo__=$3c
          .equ o_oooo__=$3d
          .equ _ooooo__=$3e
          .equ oooooo__=$3f
         
          .equ ______o_=$40
          .equ o_____o_=$41
          .equ _o____o_=$42
          .equ oo____o_=$43
          .equ __o___o_=$44
          .equ o_o___o_=$45
          .equ _oo___o_=$46
          .equ ooo___o_=$47
          .equ ___o__o_=$48
          .equ o__o__o_=$49
          .equ _o_o__o_=$4a
          .equ oo_o__o_=$4b
          .equ __oo__o_=$4c
          .equ o_oo__o_=$4d
          .equ _ooo__o_=$4e
          .equ oooo__o_=$4f
         
          .equ ____o_o_=$50
          .equ o___o_o_=$51
          .equ _o__o_o_=$52
          .equ oo__o_o_=$53
          .equ __o_o_o_=$54
          .equ o_o_o_o_=$55
          .equ _oo_o_o_=$56
          .equ ooo_o_o_=$57
          .equ ___oo_o_=$58
          .equ o__oo_o_=$59
          .equ _o_oo_o_=$5a
          .equ oo_oo_o_=$5b
          .equ __ooo_o_=$5c
          .equ o_ooo_o_=$5d
          .equ _oooo_o_=$5e
          .equ ooooo_o_=$5f
         
          .equ _____oo_=$60
          .equ o____oo_=$61
          .equ _o___oo_=$62
          .equ oo___oo_=$63
          .equ __o__oo_=$64
          .equ o_o__oo_=$65
          .equ _oo__oo_=$66
          .equ ooo__oo_=$67
          .equ ___o_oo_=$68
          .equ o__o_oo_=$69
          .equ _o_o_oo_=$6a
          .equ oo_o_oo_=$6b
          .equ __oo_oo_=$6c
          .equ o_oo_oo_=$6d
          .equ _ooo_oo_=$6e
          .equ oooo_oo_=$6f
         
          .equ ____ooo_=$70
          .equ o___ooo_=$71
          .equ _o__ooo_=$72
          .equ oo__ooo_=$73
          .equ __o_ooo_=$74
          .equ o_o_ooo_=$75
          .equ _oo_ooo_=$76
          .equ ooo_ooo_=$77
          .equ ___oooo_=$78
          .equ o__oooo_=$79
          .equ _o_oooo_=$7a
          .equ oo_oooo_=$7b
          .equ __ooooo_=$7c
          .equ o_ooooo_=$7d
          .equ _oooooo_=$7e
          .equ ooooooo_=$7f
         
         
         
          .equ _______o=$80
          .equ o______o=$81
          .equ _o_____o=$82
          .equ oo_____o=$83
          .equ __o____o=$84
          .equ o_o____o=$85
          .equ _oo____o=$86
          .equ ooo____o=$87
          .equ ___o___o=$88
          .equ o__o___o=$89
          .equ _o_o___o=$8a
          .equ oo_o___o=$8b
          .equ __oo___o=$8c
          .equ o_oo___o=$80
          .equ _ooo___o=$8e
          .equ oooo___o=$8f
         
          .equ ____o__o=$90
          .equ o___o__o=$91
          .equ _o__o__o=$92
          .equ oo__o__o=$93
          .equ __o_o__o=$94
          .equ o_o_o__o=$95
          .equ _oo_o__o=$96
          .equ ooo_o__o=$97
          .equ ___oo__o=$98
          .equ o__oo__o=$99
          .equ _o_oo__o=$9a
          .equ oo_oo__o=$9b
          .equ __ooo__o=$9c
          .equ o_ooo__o=$9d
          .equ _oooo__o=$9e
          .equ ooooo__o=$9f
         
          .equ _____o_o=$a0
          .equ o____o_o=$a1
          .equ _o___o_o=$a2
          .equ oo___o_o=$a3
          .equ __o__o_o=$a4
          .equ o_o__o_o=$a5
          .equ _oo__o_o=$a6
          .equ ooo__o_o=$a7
          .equ ___o_o_o=$a8
          .equ o__o_o_o=$a9
          .equ _o_o_o_o=$aa
          .equ oo_o_o_o=$ab
          .equ __oo_o_o=$ac
          .equ o_oo_o_o=$ad
          .equ _ooo_o_o=$ae
          .equ oooo_o_o=$af
         
          .equ ____oo_o=$b0
          .equ o___oo_o=$b1
          .equ _o__oo_o=$b2
          .equ oo__oo_o=$b3
          .equ __o_oo_o=$b4
          .equ o_o_oo_o=$b5
          .equ _oo_oo_o=$b6
          .equ ooo_oo_o=$b7
          .equ ___ooo_o=$b8
          .equ o__ooo_o=$b9
          .equ _o_ooo_o=$ba
          .equ oo_ooo_o=$bb
          .equ __oooo_o=$bc
          .equ o_oooo_o=$bd
          .equ _ooooo_o=$be
          .equ oooooo_o=$bf
         
          .equ ______oo=$c0
          .equ o_____oo=$c1
          .equ _o____oo=$c2
          .equ oo____oo=$c3
          .equ __o___oo=$c4
          .equ o_o___oo=$c5
          .equ _oo___oo=$c6
          .equ ooo___oo=$c7
          .equ ___o__oo=$c8
          .equ o__o__oo=$c9
          .equ _o_o__oo=$ca
          .equ oo_o__oo=$cb
          .equ __oo__oo=$cc
          .equ o_oo__oo=$cd
          .equ _ooo__oo=$ce
          .equ oooo__oo=$cf
         
          .equ ____o_oo=$d0
          .equ o___o_oo=$d1
          .equ _o__o_oo=$d2
          .equ oo__o_oo=$d3
          .equ __o_o_oo=$d4
          .equ o_o_o_oo=$d5
          .equ _oo_o_oo=$d6
          .equ ooo_o_oo=$d7
          .equ ___oo_oo=$d8
          .equ o__oo_oo=$d9
          .equ _o_oo_oo=$da
          .equ oo_oo_oo=$db
          .equ __ooo_oo=$dc
          .equ o_ooo_oo=$dd
          .equ _oooo_oo=$de
          .equ ooooo_oo=$df
         
          .equ _____ooo=$e0
          .equ o____ooo=$e1
          .equ _o___ooo=$e2
          .equ oo___ooo=$e3
          .equ __o__ooo=$e4
          .equ o_o__ooo=$e5
          .equ _oo__ooo=$e6
          .equ ooo__ooo=$e7
          .equ ___o_ooo=$e8
          .equ o__o_ooo=$e9
          .equ _o_o_ooo=$ea
          .equ oo_o_ooo=$eb
          .equ __oo_ooo=$ec
          .equ o_oo_ooo=$ed
          .equ _ooo_ooo=$ee
          .equ oooo_ooo=$ef
         
          .equ ____oooo=$f0
          .equ o___oooo=$f1
          .equ _o__oooo=$f2
          .equ oo__oooo=$f3
          .equ __o_oooo=$f4
          .equ o_o_oooo=$f5
          .equ _oo_oooo=$f6
          .equ ooo_oooo=$f7
          .equ ___ooooo=$f8
          .equ o__ooooo=$f9
          .equ _o_ooooo=$fa
          .equ oo_ooooo=$fb
          .equ __oooooo=$fc
          .equ o_oooooo=$fd
          .equ _ooooooo=$fe
          .equ oooooooo=$ff
          .ESEG
         
         ; Numbers
         
          n0:
          	.db __oooo__
000000 3c
          	.db _o____o_
000001 42
          	.db _o____o_
000002 42
          	.db _o____o_
000003 42
          	.db _o____o_
000004 42
          	.db _o____o_
000005 42
          	.db _o____o_
000006 42
          	.db __oooo__
000007 3c
          n1:
          	.db ____o___
000008 10
          	.db ___oo___
000009 18
          	.db ____o___
00000a 10
          	.db ____o___
00000b 10
          	.db ____o___
00000c 10
          	.db ____o___
00000d 10
          	.db ____o___
00000e 10
          	.db ___ooo__
00000f 38
          n2:
          	.db __oooo__
000010 3c
          	.db _o____o_
000011 42
          	.db ______o_
000012 40
          	.db _____o__
000013 20
          	.db ____o___
000014 10
          	.db __oo____
000015 0c
          	.db _o______
000016 02
          	.db _oooooo_
000017 7e
          n3:
          	.db __oooo__
000018 3c
          	.db _o____o_
000019 42
          	.db ______o_
00001a 40
          	.db ____oo__
00001b 30
          	.db ______o_
00001c 40
          	.db ______o_
00001d 40
          	.db _o____o_
00001e 42
          	.db __oooo__
00001f 3c
          n4:
          	.db _____o__
000020 20
          	.db ____oo__
000021 30
          	.db ___o_o__
000022 28
          	.db __o__o__
000023 24
          	.db _oooooo_
000024 7e
          	.db _____o__
000025 20
          	.db _____o__
000026 20
          	.db ____ooo_
000027 70
          n5:
          	.db _oooooo_
000028 7e
          	.db _o______
000029 02
          	.db _o______
00002a 02
          	.db _ooooo__
00002b 3e
          	.db ______o_
00002c 40
          	.db ______o_
00002d 40
          	.db _o____o_
00002e 42
          	.db __oooo__
00002f 3c
          n6:
          	.db ___oo___
000030 18
          	.db __o_____
000031 04
          	.db _o______
000032 02
          	.db _o______
000033 02
          	.db _ooooo__
000034 3e
          	.db _o____o_
000035 42
          	.db _o____o_
000036 42
          	.db __oooo__
000037 3c
          n7:
          	.db _oooooo_
000038 7e
          	.db _o____o_
000039 42
          	.db _____o__
00003a 20
          	.db _____o__
00003b 20
          	.db ____o___
00003c 10
          	.db ____o___
00003d 10
          	.db ___o____
00003e 08
          	.db ___o____
00003f 08
          n8:
          	.db __oooo__
000040 3c
          	.db _o____o_
000041 42
          	.db _o____o_
000042 42
          	.db __oooo__
000043 3c
          	.db _o____o_
000044 42
          	.db _o____o_
000045 42
          	.db _o____o_
000046 42
          	.db __oooo__
000047 3c
          n9:
          	.db __oooo__
000048 3c
          	.db _o____o_
000049 42
          	.db _o____o_
00004a 42
          	.db __ooooo_
00004b 7c
          	.db ______o_
00004c 40
          	.db ______o_
00004d 40
          	.db _____o__
00004e 20
          	.db ___oo___
00004f 18
         
         ; Upper case Characters
         
          cA:
          	.db ___oo___
000050 18
          	.db __o__o__
000051 24
          	.db __o__o__
000052 24
          	.db _o____o_
000053 42
          	.db _oooooo_
000054 7e
          	.db _o____o_
000055 42
          	.db _o____o_
000056 42
          	.db _o____o_
000057 42
          cB:
          	.db _ooooo__
000058 3e
          	.db _o____o_
000059 42
          	.db _o____o_
00005a 42
          	.db _ooooo__
00005b 3e
          	.db _o____o_
00005c 42
          	.db _o____o_
00005d 42
          	.db _o____o_
00005e 42
          	.db _ooooo__
00005f 3e
          cC:
          	.db __oooo__
000060 3c
          	.db _o____o_
000061 42
          	.db _o______
000062 02
          	.db _o______
000063 02
          	.db _o______
000064 02
          	.db _o______
000065 02
          	.db _o____o_
000066 42
          	.db __oooo__
000067 3c
          cD:
          	.db _ooooo__
000068 3e
          	.db _o____o_
000069 42
          	.db _o____o_
00006a 42
          	.db _o____o_
00006b 42
          	.db _o____o_
00006c 42
          	.db _o____o_
00006d 42
          	.db _o____o_
00006e 42
          	.db _ooooo__
00006f 3e
          cE:
          	.db _oooooo_
000070 7e
          	.db _o______
000071 02
          	.db _o______
000072 02
          	.db _oooo___
000073 1e
          	.db _o______
000074 02
          	.db _o______
000075 02
          	.db _o______
000076 02
          	.db _oooooo_
000077 7e
          cF:
          	.db _oooooo_
000078 7e
          	.db _o______
000079 02
          	.db _o______
00007a 02
          	.db _oooo___
00007b 1e
          	.db _o______
00007c 02
          	.db _o______
00007d 02
          	.db _o______
00007e 02
          	.db _o______
00007f 02
          cG:
          	.db __oooo__
000080 3c
          	.db _o____o_
000081 42
          	.db _o______
000082 02
          	.db _o______
000083 02
          	.db _o___oo_
000084 62
          	.db _o____o_
000085 42
          	.db _o____o_
000086 42
          	.db __oooo__
000087 3c
          cH:
          	.db _o____o_
000088 42
          	.db _o____o_
000089 42
          	.db _o____o_
00008a 42
          	.db _oooooo_
00008b 7e
          	.db _o____o_
00008c 42
          	.db _o____o_
00008d 42
          	.db _o____o_
00008e 42
          	.db _o____o_
00008f 42
          cI:
          	.db __ooooo_
000090 7c
          	.db ____o___
000091 10
          	.db ____o___
000092 10
          	.db ____o___
000093 10
          	.db ____o___
000094 10
          	.db ____o___
000095 10
          	.db ____o___
000096 10
          	.db __ooooo_
000097 7c
          cJ:
          	.db ______o_
000098 40
          	.db ______o_
000099 40
          	.db ______o_
00009a 40
          	.db ______o_
00009b 40
          	.db ______o_
00009c 40
          	.db ______o_
00009d 40
          	.db _o____o_
00009e 42
          	.db __oooo__
00009f 3c
          cK:
          	.db _o____o_
0000a0 42
          	.db _o___o__
0000a1 22
          	.db _o__o___
0000a2 12
          	.db _ooo____
0000a3 0e
          	.db _ooo____
0000a4 0e
          	.db _o__o___
0000a5 12
          	.db _o___o__
0000a6 22
          	.db _o____o_
0000a7 42
          cL:
          	.db _o______
0000a8 02
          	.db _o______
0000a9 02
          	.db _o______
0000aa 02
          	.db _o______
0000ab 02
          	.db _o______
0000ac 02
          	.db _o______
0000ad 02
          	.db _o______
0000ae 02
          	.db _oooooo_
0000af 7e
          cM:
          	.db o_____o_
0000b0 41
          	.db oo___oo_
0000b1 63
          	.db o_o_o_o_
0000b2 55
          	.db o__o__o_
0000b3 49
          	.db o_____o_
0000b4 41
          	.db o_____o_
0000b5 41
          	.db o_____o_
0000b6 41
          	.db o_____o_
0000b7 41
          cN:
          	.db _o____o_
0000b8 42
          	.db _oo___o_
0000b9 46
          	.db _o_o__o_
0000ba 4a
          	.db _o_o__o_
0000bb 4a
          	.db _o__o_o_
0000bc 52
          	.db _o__o_o_
0000bd 52
          	.db _o___oo_
0000be 62
          	.db _o____o_
0000bf 42
          cO:
          	.db __oooo__
0000c0 3c
          	.db _o____o_
0000c1 42
          	.db _o____o_
0000c2 42
          	.db _o____o_
0000c3 42
          	.db _o____o_
0000c4 42
          	.db _o____o_
0000c5 42
          	.db _o____o_
0000c6 42
          	.db __oooo__
0000c7 3c
          cP:
          	.db _ooooo__
0000c8 3e
          	.db _o____o_
0000c9 42
          	.db _o____o_
0000ca 42
          	.db _o____o_
0000cb 42
          	.db _ooooo__
0000cc 3e
          	.db _o______
0000cd 02
          	.db _o______
0000ce 02
          	.db _o______
0000cf 02
          cQ:
          	.db __oooo__
0000d0 3c
          	.db _o____o_
0000d1 42
          	.db _o____o_
0000d2 42
          	.db _o____o_
0000d3 42
          	.db _o____o_
0000d4 42
          	.db _o__o_o_
0000d5 52
          	.db _o___oo_
0000d6 62
          	.db __oooooo
0000d7 fc
          cR:
          	.db _ooooo__
0000d8 3e
          	.db _o____o_
0000d9 42
          	.db _o____o_
0000da 42
          	.db _ooooo__
0000db 3e
          	.db _o__o___
0000dc 12
          	.db _o__o___
0000dd 12
          	.db _o___o__
0000de 22
          	.db _o___oo_
0000df 62
          cS:
          	.db __oooo__
0000e0 3c
          	.db _o____o_
0000e1 42
          	.db _o______
0000e2 02
          	.db __oooo__
0000e3 3c
          	.db ______o_
0000e4 40
          	.db ______o_
0000e5 40
          	.db _o____o_
0000e6 42
          	.db __oooo__
0000e7 3c
          cT:
          	.db ooooooo_
0000e8 7f
          	.db ___o____
0000e9 08
          	.db ___o____
0000ea 08
          	.db ___o____
0000eb 08
          	.db ___o____
0000ec 08
          	.db ___o____
0000ed 08
          	.db ___o____
0000ee 08
          	.db ___o____
0000ef 08
          cU:
          	.db _o____o_
0000f0 42
          	.db _o____o_
0000f1 42
          	.db _o____o_
0000f2 42
          	.db _o____o_
0000f3 42
          	.db _o____o_
0000f4 42
          	.db _o____o_
0000f5 42
          	.db _o____o_
0000f6 42
          	.db __oooo__
0000f7 3c
          cV:
          	.db _o____o_
0000f8 42
          	.db _o____o_
0000f9 42
          	.db _o____o_
0000fa 42
          	.db __o__o__
0000fb 24
          	.db __o__o__
0000fc 24
          	.db __o__o__
0000fd 24
          	.db ___oo___
0000fe 18
          	.db ___oo___
0000ff 18
          cW:
          	.db o_____o_
000100 41
          	.db o_____o_
000101 41
          	.db o_____o_
000102 41
          	.db o_____o_
000103 41
          	.db o__o__o_
000104 49
          	.db o__o__o_
000105 49
          	.db o__o__o_
000106 49
          	.db _oo_oo__
000107 36
          cX:
          	.db _o____o_
000108 42
          	.db __o__o__
000109 24
          	.db __o__o__
00010a 24
          	.db ___oo___
00010b 18
          	.db ___oo___
00010c 18
          	.db __o__o__
00010d 24
          	.db __o__o__
00010e 24
          	.db _o____o_
00010f 42
          cY:
          	.db _o___o__
000110 22
          	.db _o___o__
000111 22
          	.db _o___o__
000112 22
          	.db __o_o___
000113 14
          	.db ___o____
000114 08
          	.db ___o____
000115 08
          	.db ___o____
000116 08
          	.db ___o____
000117 08
          cZ:
          	.db _oooooo_
000118 7e
          	.db ______o_
000119 40
          	.db _____o__
00011a 20
          	.db ____o___
00011b 10
          	.db ___o____
00011c 08
          	.db __o_____
00011d 04
          	.db _o______
00011e 02
          	.db _oooooo_
00011f 7e
         
         ; Lower case characters
         
          la:
          	.db ________
000120 00
          	.db ________
000121 00
          	.db ________
000122 00
          	.db __oooo__
000123 3c
          	.db ______o_
000124 40
          	.db __ooooo_
000125 7c
          	.db _o____o_
000126 42
          	.db __ooooo_
000127 7c
          lb:
          	.db _o______
000128 02
          	.db _o______
000129 02
          	.db _o______
00012a 02
          	.db _ooooo__
00012b 3e
          	.db _o____o_
00012c 42
          	.db _o____o_
00012d 42
          	.db _o____o_
00012e 42
          	.db _ooooo__
00012f 3e
          lc:
          	.db ________
000130 00
          	.db ________
000131 00
          	.db ________
000132 00
          	.db __oooo__
000133 3c
          	.db _o____o_
000134 42
          	.db _o______
000135 02
          	.db _o____o_
000136 42
          	.db __oooo__
000137 3c
          ld:
          	.db ______o_
000138 40
          	.db ______o_
000139 40
          	.db ______o_
00013a 40
          	.db __ooooo_
00013b 7c
          	.db _o____o_
00013c 42
          	.db _o____o_
00013d 42
          	.db _o____o_
00013e 42
          	.db __ooooo_
00013f 7c
          le:
          	.db ________
000140 00
          	.db ________
000141 00
          	.db ________
000142 00
          	.db __oooo__
000143 3c
          	.db _o____o_
000144 42
          	.db _ooooo__
000145 3e
          	.db _o______
000146 02
          	.db __oooo__
000147 3c
          lf:
          	.db ____oo__
000148 30
          	.db ___o____
000149 08
          	.db ___o____
00014a 08
          	.db __ooo___
00014b 1c
          	.db ___o____
00014c 08
          	.db ___o____
00014d 08
          	.db ___o____
00014e 08
          	.db ___o____
00014f 08
          lg:
          	.db ________
000150 00
          	.db ________
000151 00
          	.db __oooo__
000152 3c
          	.db _o____o_
000153 42
          	.db _o____o_
000154 42
          	.db __ooooo_
000155 7c
          	.db ______o_
000156 40
          	.db __oooo__
000157 3c
          lh:
          	.db _o______
000158 02
          	.db _o______
000159 02
          	.db _o______
00015a 02
          	.db _ooooo__
00015b 3e
          	.db _o____o_
00015c 42
          	.db _o____o_
00015d 42
          	.db _o____o_
00015e 42
          	.db _o____o_
00015f 42
          li:
          	.db ________
000160 00
          	.db ________
000161 00
          	.db ___o____
000162 08
          	.db ________
000163 00
          	.db ___o____
000164 08
          	.db ___o____
000165 08
          	.db ___o____
000166 08
          	.db ___o____
000167 08
          lj:
          	.db ________
000168 00
          	.db ____o___
000169 10
          	.db ________
00016a 00
          	.db ____o___
00016b 10
          	.db ____o___
00016c 10
          	.db ____o___
00016d 10
          	.db ____o___
00016e 10
          	.db __oo____
00016f 0c
          lk:
          	.db _o______
000170 02
          	.db _o______
000171 02
          	.db _o___o__
000172 22
          	.db _o__o___
000173 12
          	.db _o_o____
000174 0a
          	.db _ooo____
000175 0e
          	.db _o__o___
000176 12
          	.db _o___o__
000177 22
          ll:
          	.db ___o____
000178 08
          	.db ___o____
000179 08
          	.db ___o____
00017a 08
          	.db ___o____
00017b 08
          	.db ___o____
00017c 08
          	.db ___o____
00017d 08
          	.db ___o____
00017e 08
          	.db ____o___
00017f 10
          lm:
          	.db ________
000180 00
          	.db ________
000181 00
          	.db ________
000182 00
          	.db _oo_oo__
000183 36
          	.db o__o__o_
000184 49
          	.db o_____o_
000185 41
          	.db o_____o_
000186 41
          	.db o_____o_
000187 41
          ln:
          	.db ________
000188 00
          	.db ________
000189 00
          	.db ________
00018a 00
          	.db _o_ooo__
00018b 3a
          	.db _oo___o_
00018c 46
          	.db _o____o_
00018d 42
          	.db _o____o_
00018e 42
          	.db _o____o_
00018f 42
          lo:
          	.db ________
000190 00
          	.db ________
000191 00
          	.db ________
000192 00
          	.db __oooo__
000193 3c
          	.db _o____o_
000194 42
          	.db _o____o_
000195 42
          	.db _o____o_
000196 42
          	.db __oooo__
000197 3c
          lp:
          	.db ________
000198 00
          	.db ________
000199 00
          	.db _ooooo__
00019a 3e
          	.db _o____o_
00019b 42
          	.db _o____o_
00019c 42
          	.db _ooooo__
00019d 3e
          	.db _o______
00019e 02
          	.db _o______
00019f 02
          lq:
          	.db ________
0001a0 00
          	.db ________
0001a1 00
          	.db __ooooo_
0001a2 7c
          	.db _o____o_
0001a3 42
          	.db _o____o_
0001a4 42
          	.db __ooooo_
0001a5 7c
          	.db ______o_
0001a6 40
          	.db ______o_
0001a7 40
          lr:
          	.db ________
0001a8 00
          	.db ________
0001a9 00
          	.db ________
0001aa 00
          	.db _o_ooo__
0001ab 3a
          	.db _oo___o_
0001ac 46
          	.db _o______
0001ad 02
          	.db _o______
0001ae 02
          	.db _o______
0001af 02
          ls:
          	.db ________
0001b0 00
          	.db ________
0001b1 00
          	.db ________
0001b2 00
          	.db __oooo__
0001b3 3c
          	.db _o______
0001b4 02
          	.db __oooo__
0001b5 3c
          	.db ______o_
0001b6 40
          	.db _ooooo__
0001b7 3e
          lt:
          	.db ________
0001b8 00
          	.db ___o____
0001b9 08
          	.db ___o____
0001ba 08
          	.db __ooo___
0001bb 1c
          	.db ___o____
0001bc 08
          	.db ___o____
0001bd 08
          	.db ___o_o__
0001be 28
          	.db ____o___
0001bf 10
          lu:
          	.db ________
0001c0 00
          	.db ________
0001c1 00
          	.db ________
0001c2 00
          	.db _o___o__
0001c3 22
          	.db _o___o__
0001c4 22
          	.db _o___o__
0001c5 22
          	.db _o___o__
0001c6 22
          	.db __ooo_o_
0001c7 5c
          lv:
          	.db ________
0001c8 00
          	.db ________
0001c9 00
          	.db ________
0001ca 00
          	.db _o___o__
0001cb 22
          	.db _o___o__
0001cc 22
          	.db _o___o__
0001cd 22
          	.db __o_o___
0001ce 14
          	.db ___o____
0001cf 08
          lw:
          	.db ________
0001d0 00
          	.db ________
0001d1 00
          	.db ________
0001d2 00
          	.db o_____o_
0001d3 41
          	.db o_____o_
0001d4 41
          	.db o_____o_
0001d5 41
          	.db o__o__o_
0001d6 49
          	.db _oo_oo__
0001d7 36
          lx:
          	.db ________
0001d8 00
          	.db ________
0001d9 00
          	.db ________
0001da 00
          	.db _o___o__
0001db 22
          	.db __o_o___
0001dc 14
          	.db ___o____
0001dd 08
          	.db __o_o___
0001de 14
          	.db _o___o__
0001df 22
          ly:
          	.db ________
0001e0 00
          	.db ________
0001e1 00
          	.db ________
0001e2 00
          	.db __o___o_
0001e3 44
          	.db ___o_o__
0001e4 28
          	.db ____o___
0001e5 10
          	.db ___o____
0001e6 08
          	.db _oo_____
0001e7 06
          lz:
          	.db ________
0001e8 00
          	.db ________
0001e9 00
          	.db ________
0001ea 00
          	.db _oooooo_
0001eb 7e
          	.db _____o__
0001ec 20
          	.db ___oo___
0001ed 18
          	.db __o_____
0001ee 04
          	.db _oooooo_
0001ef 7e
         
         ;.include "test.asm"

Assembly complete with no errors.
