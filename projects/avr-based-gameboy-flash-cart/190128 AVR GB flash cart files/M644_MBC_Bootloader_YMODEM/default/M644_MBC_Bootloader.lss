
M644_MBC_Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5c  0000e000  0000e000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000510  00800100  00800100  00000ad0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000161  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b71  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000342  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000800  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c8  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000069d  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000160  00000000  00000000  00002d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000e000 <__vectors>:
    e000:	0c 94 ba 70 	jmp	0xe174	; 0xe174 <__ctors_end>
    e004:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e008:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e00c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e010:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e014:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e018:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e01c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e020:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e024:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e028:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e02c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e030:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e034:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e038:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e03c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e040:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e044:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e048:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e04c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e050:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e054:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e058:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e05c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e060:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e064:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e068:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>
    e06c:	0c 94 cc 70 	jmp	0xe198	; 0xe198 <__bad_interrupt>

0000e070 <__c.1488>:
    e070:	0d 0a 46 6c 61 73 68 20 63 6f 6d 70 6c 65 74 65     ..Flash complete
    e080:	2e 20 50 72 65 73 73 20 73 70 61 63 65 62 61 72     . Press spacebar
    e090:	2e 0d 0a 00                                         ....

0000e094 <__c.1486>:
    e094:	0d 0a 00                                            ...

0000e097 <__c.1484>:
    e097:	4c 61 73 74 20 65 72 72 6f 72 20 69 6e 20 66 6c     Last error in fl
    e0a7:	61 73 68 20 77 72 69 74 65 20 40 3a 20 00           ash write @: .

0000e0b5 <__c.1482>:
    e0b5:	0d 0a 00                                            ...

0000e0b8 <__c.1480>:
    e0b8:	46 69 72 73 74 20 65 72 72 6f 72 20 69 6e 20 66     First error in f
    e0c8:	6c 61 73 68 20 77 72 69 74 65 20 40 3a 00           lash write @:.

0000e0d6 <__c.1478>:
    e0d6:	0d 0a 00                                            ...

0000e0d9 <__c.1476>:
    e0d9:	0d 0a 46 6c 61 73 68 20 57 72 20 45 72 72 6f 72     ..Flash Wr Error
    e0e9:	73 3a 00                                            s:.

0000e0ec <__c.1469>:
    e0ec:	59 4d 4f 44 45 4d 20 70 72 6f 74 6f 63 6f 6c 20     YMODEM protocol 
    e0fc:	75 73 65 64 2e 20 53 65 6c 65 63 74 20 66 69 6c     used. Select fil
    e10c:	65 20 77 69 74 68 69 6e 20 31 30 20 73 65 63 73     e within 10 secs
    e11c:	20 65 6c 73 65 20 72 65 73 65 74 0d 0a 00            else reset...

0000e12a <__c.1464>:
    e12a:	1b 5b 32 4a 41 56 52 20 43 41 52 54 20 54 45 52     .[2JAVR CART TER
    e13a:	4d 49 4e 41 4c 20 42 4f 4f 54 4c 4f 41 44 45 52     MINAL BOOTLOADER
    e14a:	0d 0a 50 72 65 73 73 20 73 70 61 63 65 20 66 6f     ..Press space fo
    e15a:	72 20 6d 65 6e 75 20 6f 72 20 27 31 27 20 74 6f     r menu or '1' to
    e16a:	20 66 6c 61 73 68 0d 0a 00 00                        flash....

0000e174 <__ctors_end>:
    e174:	11 24       	eor	r1, r1
    e176:	1f be       	out	0x3f, r1	; 63
    e178:	cf ef       	ldi	r28, 0xFF	; 255
    e17a:	d0 e1       	ldi	r29, 0x10	; 16
    e17c:	de bf       	out	0x3e, r29	; 62
    e17e:	cd bf       	out	0x3d, r28	; 61

0000e180 <__do_clear_bss>:
    e180:	16 e0       	ldi	r17, 0x06	; 6
    e182:	a0 e0       	ldi	r26, 0x00	; 0
    e184:	b1 e0       	ldi	r27, 0x01	; 1
    e186:	01 c0       	rjmp	.+2      	; 0xe18a <.do_clear_bss_start>

0000e188 <.do_clear_bss_loop>:
    e188:	1d 92       	st	X+, r1

0000e18a <.do_clear_bss_start>:
    e18a:	a0 31       	cpi	r26, 0x10	; 16
    e18c:	b1 07       	cpc	r27, r17
    e18e:	e1 f7       	brne	.-8      	; 0xe188 <.do_clear_bss_loop>
    e190:	0e 94 4d 74 	call	0xe89a	; 0xe89a <main>
    e194:	0c 94 2c 75 	jmp	0xea58	; 0xea58 <_exit>

0000e198 <__bad_interrupt>:
    e198:	0c 94 00 70 	jmp	0xe000	; 0xe000 <__vectors>

0000e19c <init_uart>:
void init_uart() {
  // Calculate the baud value
  uint16_t num = (uint32_t)F_CPU / (16 * (uint32_t)UART_BAUD) - 1;

	// Set baud rate 
	UBRR0H = (unsigned char)(num>>8);
    e19c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)num;
    e1a0:	8d e0       	ldi	r24, 0x0D	; 13
    e1a2:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    e1a6:	88 e1       	ldi	r24, 0x18	; 24
    e1a8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    e1ac:	86 e0       	ldi	r24, 0x06	; 6
    e1ae:	80 93 c2 00 	sts	0x00C2, r24
}
    e1b2:	08 95       	ret

0000e1b4 <usart_transmit>:

void usart_transmit(unsigned char data)
{
    e1b4:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e1b6:	80 91 c0 00 	lds	r24, 0x00C0
    e1ba:	85 ff       	sbrs	r24, 5
    e1bc:	fc cf       	rjmp	.-8      	; 0xe1b6 <usart_transmit+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e1be:	90 93 c6 00 	sts	0x00C6, r25
}
    e1c2:	08 95       	ret

0000e1c4 <usart_receive>:

char usart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    e1c4:	80 91 c0 00 	lds	r24, 0x00C0
    e1c8:	87 ff       	sbrs	r24, 7
    e1ca:	fc cf       	rjmp	.-8      	; 0xe1c4 <usart_receive>
	/* Get and return received data from buffer */
	return UDR0;
    e1cc:	80 91 c6 00 	lds	r24, 0x00C6
}
    e1d0:	08 95       	ret

0000e1d2 <usart_transmit_str_P>:

void usart_transmit_str_P(const char* data)
{
    e1d2:	fc 01       	movw	r30, r24
    e1d4:	07 c0       	rjmp	.+14     	; 0xe1e4 <usart_transmit_str_P+0x12>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e1d6:	80 91 c0 00 	lds	r24, 0x00C0
    e1da:	85 ff       	sbrs	r24, 5
    e1dc:	fc cf       	rjmp	.-8      	; 0xe1d6 <usart_transmit_str_P+0x4>
}

void usart_transmit_str_P(const char* data)
{
  while (pgm_read_byte(data) != 0x00) {
	  usart_transmit(pgm_read_byte(data++));
    e1de:	31 96       	adiw	r30, 0x01	; 1
void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e1e0:	90 93 c6 00 	sts	0x00C6, r25
	return UDR0;
}

void usart_transmit_str_P(const char* data)
{
  while (pgm_read_byte(data) != 0x00) {
    e1e4:	94 91       	lpm	r25, Z+
    e1e6:	99 23       	and	r25, r25
    e1e8:	b1 f7       	brne	.-20     	; 0xe1d6 <usart_transmit_str_P+0x4>
	  usart_transmit(pgm_read_byte(data++));
  }
}
    e1ea:	08 95       	ret

0000e1ec <usart_transmit_int32>:

void usart_transmit_int32(uint32_t num)
{
    e1ec:	af 92       	push	r10
    e1ee:	bf 92       	push	r11
    e1f0:	cf 92       	push	r12
    e1f2:	df 92       	push	r13
    e1f4:	ef 92       	push	r14
    e1f6:	ff 92       	push	r15
    e1f8:	0f 93       	push	r16
    e1fa:	df 93       	push	r29
    e1fc:	cf 93       	push	r28
    e1fe:	cd b7       	in	r28, 0x3d	; 61
    e200:	de b7       	in	r29, 0x3e	; 62
    e202:	2d 97       	sbiw	r28, 0x0d	; 13
    e204:	0f b6       	in	r0, 0x3f	; 63
    e206:	f8 94       	cli
    e208:	de bf       	out	0x3e, r29	; 62
    e20a:	0f be       	out	0x3f, r0	; 63
    e20c:	cd bf       	out	0x3d, r28	; 61
    e20e:	6b 01       	movw	r12, r22
    e210:	7c 01       	movw	r14, r24
	char buffer[11];
  uint8_t i = 0;

  buffer[0] = '0';
    e212:	80 e3       	ldi	r24, 0x30	; 48
    e214:	89 83       	std	Y+1, r24	; 0x01
    e216:	00 e0       	ldi	r16, 0x00	; 0
    e218:	c1 14       	cp	r12, r1
    e21a:	d1 04       	cpc	r13, r1
    e21c:	e1 04       	cpc	r14, r1
    e21e:	f1 04       	cpc	r15, r1
    e220:	09 f5       	brne	.+66     	; 0xe264 <usart_transmit_int32+0x78>
    e222:	01 e0       	ldi	r16, 0x01	; 1
    e224:	1f c0       	rjmp	.+62     	; 0xe264 <usart_transmit_int32+0x78>
  if(num == 0) {
    i = 1; // Need to push at least one value out
  }

  while(num > 0) {
    buffer[i] = num % 10 + '0';
    e226:	c5 01       	movw	r24, r10
    e228:	80 0f       	add	r24, r16
    e22a:	91 1d       	adc	r25, r1
    e22c:	9d 87       	std	Y+13, r25	; 0x0d
    e22e:	8c 87       	std	Y+12, r24	; 0x0c
    e230:	c7 01       	movw	r24, r14
    e232:	b6 01       	movw	r22, r12
    e234:	2a e0       	ldi	r18, 0x0A	; 10
    e236:	30 e0       	ldi	r19, 0x00	; 0
    e238:	40 e0       	ldi	r20, 0x00	; 0
    e23a:	50 e0       	ldi	r21, 0x00	; 0
    e23c:	0e 94 0a 75 	call	0xea14	; 0xea14 <__udivmodsi4>
    e240:	60 5d       	subi	r22, 0xD0	; 208
    e242:	ec 85       	ldd	r30, Y+12	; 0x0c
    e244:	fd 85       	ldd	r31, Y+13	; 0x0d
    e246:	60 83       	st	Z, r22
    num /= 10;
    e248:	c7 01       	movw	r24, r14
    e24a:	b6 01       	movw	r22, r12
    e24c:	2a e0       	ldi	r18, 0x0A	; 10
    e24e:	30 e0       	ldi	r19, 0x00	; 0
    e250:	40 e0       	ldi	r20, 0x00	; 0
    e252:	50 e0       	ldi	r21, 0x00	; 0
    e254:	0e 94 0a 75 	call	0xea14	; 0xea14 <__udivmodsi4>
    e258:	c9 01       	movw	r24, r18
    e25a:	da 01       	movw	r26, r20
    e25c:	6c 01       	movw	r12, r24
    e25e:	7d 01       	movw	r14, r26
    i++;
    e260:	0f 5f       	subi	r16, 0xFF	; 255
    e262:	04 c0       	rjmp	.+8      	; 0xe26c <usart_transmit_int32+0x80>
  if(num == 0) {
    i = 1; // Need to push at least one value out
  }

  while(num > 0) {
    buffer[i] = num % 10 + '0';
    e264:	5e 01       	movw	r10, r28
    e266:	08 94       	sec
    e268:	a1 1c       	adc	r10, r1
    e26a:	b1 1c       	adc	r11, r1

  if(num == 0) {
    i = 1; // Need to push at least one value out
  }

  while(num > 0) {
    e26c:	c1 14       	cp	r12, r1
    e26e:	d1 04       	cpc	r13, r1
    e270:	e1 04       	cpc	r14, r1
    e272:	f1 04       	cpc	r15, r1
    e274:	c1 f6       	brne	.-80     	; 0xe226 <usart_transmit_int32+0x3a>
    e276:	0b c0       	rjmp	.+22     	; 0xe28e <usart_transmit_int32+0xa2>
    i++;
  }

  // Now we've converted it in reverse, pump it back out correctly
  for(; i > 0; i--) {
    usart_transmit(buffer[i - 1]);
    e278:	fe 01       	movw	r30, r28
    e27a:	e0 0f       	add	r30, r16
    e27c:	f1 1d       	adc	r31, r1
    e27e:	e0 81       	ld	r30, Z
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e280:	80 91 c0 00 	lds	r24, 0x00C0
    e284:	85 ff       	sbrs	r24, 5
    e286:	fc cf       	rjmp	.-8      	; 0xe280 <usart_transmit_int32+0x94>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e288:	e0 93 c6 00 	sts	0x00C6, r30
    num /= 10;
    i++;
  }

  // Now we've converted it in reverse, pump it back out correctly
  for(; i > 0; i--) {
    e28c:	01 50       	subi	r16, 0x01	; 1
    e28e:	00 23       	and	r16, r16
    e290:	99 f7       	brne	.-26     	; 0xe278 <usart_transmit_int32+0x8c>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e292:	80 91 c0 00 	lds	r24, 0x00C0
    e296:	85 ff       	sbrs	r24, 5
    e298:	fc cf       	rjmp	.-8      	; 0xe292 <usart_transmit_int32+0xa6>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e29a:	10 92 c6 00 	sts	0x00C6, r1
  // Now we've converted it in reverse, pump it back out correctly
  for(; i > 0; i--) {
    usart_transmit(buffer[i - 1]);
  }
  usart_transmit('\0');
}
    e29e:	2d 96       	adiw	r28, 0x0d	; 13
    e2a0:	0f b6       	in	r0, 0x3f	; 63
    e2a2:	f8 94       	cli
    e2a4:	de bf       	out	0x3e, r29	; 62
    e2a6:	0f be       	out	0x3f, r0	; 63
    e2a8:	cd bf       	out	0x3d, r28	; 61
    e2aa:	cf 91       	pop	r28
    e2ac:	df 91       	pop	r29
    e2ae:	0f 91       	pop	r16
    e2b0:	ff 90       	pop	r15
    e2b2:	ef 90       	pop	r14
    e2b4:	df 90       	pop	r13
    e2b6:	cf 90       	pop	r12
    e2b8:	bf 90       	pop	r11
    e2ba:	af 90       	pop	r10
    e2bc:	08 95       	ret

0000e2be <wait_for_continue>:
}

char usart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    e2be:	80 91 c0 00 	lds	r24, 0x00C0
    e2c2:	87 ff       	sbrs	r24, 7
    e2c4:	fc cf       	rjmp	.-8      	; 0xe2be <wait_for_continue>
	/* Get and return received data from buffer */
	return UDR0;
    e2c6:	80 91 c6 00 	lds	r24, 0x00C6
void wait_for_continue() {

  char input; 
  do {
    input = usart_receive();
  } while(input != ' ');
    e2ca:	80 32       	cpi	r24, 0x20	; 32
    e2cc:	c1 f7       	brne	.-16     	; 0xe2be <wait_for_continue>
}
    e2ce:	08 95       	ret

0000e2d0 <ymodem_receive>:

uint8_t ymodem_receive(void(*buffer_func)(unsigned char*, uint16_t), uint32_t *fileSize)
{
    e2d0:	2f 92       	push	r2
    e2d2:	3f 92       	push	r3
    e2d4:	4f 92       	push	r4
    e2d6:	5f 92       	push	r5
    e2d8:	6f 92       	push	r6
    e2da:	7f 92       	push	r7
    e2dc:	8f 92       	push	r8
    e2de:	9f 92       	push	r9
    e2e0:	af 92       	push	r10
    e2e2:	bf 92       	push	r11
    e2e4:	cf 92       	push	r12
    e2e6:	df 92       	push	r13
    e2e8:	ef 92       	push	r14
    e2ea:	ff 92       	push	r15
    e2ec:	0f 93       	push	r16
    e2ee:	1f 93       	push	r17
    e2f0:	cf 93       	push	r28
    e2f2:	df 93       	push	r29
    e2f4:	3c 01       	movw	r6, r24
    e2f6:	4b 01       	movw	r8, r22
  ymodemReceivedPackets = 0;
    e2f8:	10 92 08 06 	sts	0x0608, r1
    e2fc:	10 92 07 06 	sts	0x0607, r1
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e300:	80 91 c0 00 	lds	r24, 0x00C0
    e304:	85 ff       	sbrs	r24, 5
    e306:	fc cf       	rjmp	.-8      	; 0xe300 <ymodem_receive+0x30>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e308:	83 e4       	ldi	r24, 0x43	; 67
    e30a:	80 93 c6 00 	sts	0x00C6, r24
    e30e:	aa 24       	eor	r10, r10
    e310:	bb 24       	eor	r11, r11
    e312:	65 01       	movw	r12, r10
    e314:	40 e0       	ldi	r20, 0x00	; 0
    e316:	33 24       	eor	r3, r3

    uint8_t shortPacketMode = 0;

    for(uint16_t i=0; i<BYTES_PER_PACKET_1K;i++) {

      if(shortPacketMode && (i >= BYTES_PER_PACKET)) {
    e318:	75 e1       	ldi	r23, 0x15	; 21
    e31a:	57 2e       	mov	r5, r23
    e31c:	66 e0       	ldi	r22, 0x06	; 6
    e31e:	46 2e       	mov	r4, r22
    e320:	53 e4       	ldi	r21, 0x43	; 67
    e322:	25 2e       	mov	r2, r21
void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e324:	50 e0       	ldi	r21, 0x00	; 0
    e326:	20 e0       	ldi	r18, 0x00	; 0
    e328:	30 e0       	ldi	r19, 0x00	; 0
    e32a:	07 c0       	rjmp	.+14     	; 0xe33a <ymodem_receive+0x6a>

    uint8_t shortPacketMode = 0;

    for(uint16_t i=0; i<BYTES_PER_PACKET_1K;i++) {

      if(shortPacketMode && (i >= BYTES_PER_PACKET)) {
    e32c:	55 23       	and	r21, r21
    e32e:	29 f0       	breq	.+10     	; 0xe33a <ymodem_receive+0x6a>
    e330:	25 38       	cpi	r18, 0x85	; 133
    e332:	31 05       	cpc	r19, r1
    e334:	10 f0       	brcs	.+4      	; 0xe33a <ymodem_receive+0x6a>
    e336:	51 e0       	ldi	r21, 0x01	; 1
    e338:	5c c0       	rjmp	.+184    	; 0xe3f2 <ymodem_receive+0x122>
}

char usart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    e33a:	80 91 c0 00 	lds	r24, 0x00C0
    e33e:	87 ff       	sbrs	r24, 7
    e340:	fc cf       	rjmp	.-8      	; 0xe33a <ymodem_receive+0x6a>
	/* Get and return received data from buffer */
	return UDR0;
    e342:	80 91 c6 00 	lds	r24, 0x00C6
        break;
      }
      
      uint8_t c = usart_receive();

      ymodemBuffer[i] = c;
    e346:	f9 01       	movw	r30, r18
    e348:	ef 5f       	subi	r30, 0xFF	; 255
    e34a:	fe 4f       	sbci	r31, 0xFE	; 254
    e34c:	80 83       	st	Z, r24

      if(i==0) {
    e34e:	21 15       	cp	r18, r1
    e350:	31 05       	cpc	r19, r1
    e352:	09 f0       	breq	.+2      	; 0xe356 <ymodem_receive+0x86>
    e354:	45 c0       	rjmp	.+138    	; 0xe3e0 <ymodem_receive+0x110>
        if(ymodemBuffer[i] == YMODEM_SOH_128) {
    e356:	81 30       	cpi	r24, 0x01	; 1
    e358:	09 f4       	brne	.+2      	; 0xe35c <ymodem_receive+0x8c>
    e35a:	40 c0       	rjmp	.+128    	; 0xe3dc <ymodem_receive+0x10c>
          shortPacketMode = 1;
          canAttempts = 0;

        } else if (ymodemBuffer[i] == YMODEM_STX_1K) {       
    e35c:	82 30       	cpi	r24, 0x02	; 2
    e35e:	19 f4       	brne	.+6      	; 0xe366 <ymodem_receive+0x96>
    e360:	40 e0       	ldi	r20, 0x00	; 0
    e362:	50 e0       	ldi	r21, 0x00	; 0
    e364:	3d c0       	rjmp	.+122    	; 0xe3e0 <ymodem_receive+0x110>
          shortPacketMode = 0;
          canAttempts = 0;

        } else if(ymodemBuffer[i] == EOT) {
    e366:	84 30       	cpi	r24, 0x04	; 4
    e368:	01 f5       	brne	.+64     	; 0xe3aa <ymodem_receive+0xda>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e36a:	80 91 c0 00 	lds	r24, 0x00C0
    e36e:	85 ff       	sbrs	r24, 5
    e370:	fc cf       	rjmp	.-8      	; 0xe36a <ymodem_receive+0x9a>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e372:	86 e0       	ldi	r24, 0x06	; 6
    e374:	80 93 c6 00 	sts	0x00C6, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e378:	80 91 c0 00 	lds	r24, 0x00C0
    e37c:	85 ff       	sbrs	r24, 5
    e37e:	fc cf       	rjmp	.-8      	; 0xe378 <ymodem_receive+0xa8>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e380:	83 e4       	ldi	r24, 0x43	; 67
    e382:	80 93 c6 00 	sts	0x00C6, r24
    e386:	84 ec       	ldi	r24, 0xC4	; 196
    e388:	99 e0       	ldi	r25, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    e38a:	25 e8       	ldi	r18, 0x85	; 133
    e38c:	32 e0       	ldi	r19, 0x02	; 2
    e38e:	f9 01       	movw	r30, r18
    e390:	31 97       	sbiw	r30, 0x01	; 1
    e392:	f1 f7       	brne	.-4      	; 0xe390 <ymodem_receive+0xc0>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e394:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e396:	d9 f7       	brne	.-10     	; 0xe38e <ymodem_receive+0xbe>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e398:	80 91 c0 00 	lds	r24, 0x00C0
    e39c:	85 ff       	sbrs	r24, 5
    e39e:	fc cf       	rjmp	.-8      	; 0xe398 <ymodem_receive+0xc8>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e3a0:	86 e0       	ldi	r24, 0x06	; 6
    e3a2:	80 93 c6 00 	sts	0x00C6, r24
    e3a6:	80 e0       	ldi	r24, 0x00	; 0
    e3a8:	ae c1       	rjmp	.+860    	; 0xe706 <ymodem_receive+0x436>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e3aa:	80 91 c0 00 	lds	r24, 0x00C0
    e3ae:	85 ff       	sbrs	r24, 5
    e3b0:	fc cf       	rjmp	.-8      	; 0xe3aa <ymodem_receive+0xda>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e3b2:	50 92 c6 00 	sts	0x00C6, r5
          return 0;

        } else if(!((ymodemBuffer[i] == EOT) || (ymodemBuffer[i] == YMODEM_SOH_128) || (ymodemBuffer[i] == YMODEM_STX_1K))) {
          // Don't know what that was. Increment the cancellation counter and send a CAN
          usart_transmit(NACK);
          canAttempts++;
    e3b6:	4f 5f       	subi	r20, 0xFF	; 255

          if(canAttempts > YMODEM_MAX_RETRIES) { 
    e3b8:	44 30       	cpi	r20, 0x04	; 4
    e3ba:	90 f0       	brcs	.+36     	; 0xe3e0 <ymodem_receive+0x110>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e3bc:	80 91 c0 00 	lds	r24, 0x00C0
    e3c0:	85 ff       	sbrs	r24, 5
    e3c2:	fc cf       	rjmp	.-8      	; 0xe3bc <ymodem_receive+0xec>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e3c4:	88 e1       	ldi	r24, 0x18	; 24
    e3c6:	80 93 c6 00 	sts	0x00C6, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e3ca:	80 91 c0 00 	lds	r24, 0x00C0
    e3ce:	85 ff       	sbrs	r24, 5
    e3d0:	fc cf       	rjmp	.-8      	; 0xe3ca <ymodem_receive+0xfa>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e3d2:	88 e1       	ldi	r24, 0x18	; 24
    e3d4:	80 93 c6 00 	sts	0x00C6, r24
    e3d8:	81 e0       	ldi	r24, 0x01	; 1
    e3da:	95 c1       	rjmp	.+810    	; 0xe706 <ymodem_receive+0x436>
          if(canAttempts > YMODEM_MAX_RETRIES) { 
            // Something's not working. Cancel by returning.
            usart_transmit(YMODEM_CAN);
            usart_transmit(YMODEM_CAN);

            return 1;
    e3dc:	40 e0       	ldi	r20, 0x00	; 0
    e3de:	51 e0       	ldi	r21, 0x01	; 1
  // Receive data till end of transmission is received
  do {

    uint8_t shortPacketMode = 0;

    for(uint16_t i=0; i<BYTES_PER_PACKET_1K;i++) {
    e3e0:	2f 5f       	subi	r18, 0xFF	; 255
    e3e2:	3f 4f       	sbci	r19, 0xFF	; 255
    e3e4:	84 e0       	ldi	r24, 0x04	; 4
    e3e6:	25 30       	cpi	r18, 0x05	; 5
    e3e8:	38 07       	cpc	r19, r24
    e3ea:	09 f0       	breq	.+2      	; 0xe3ee <ymodem_receive+0x11e>
    e3ec:	9f cf       	rjmp	.-194    	; 0xe32c <ymodem_receive+0x5c>
        }
      }
    }

    // Data is in. Check the packet number and CRC
    if (shortPacketMode) {
    e3ee:	55 23       	and	r21, r21
    e3f0:	19 f1       	breq	.+70     	; 0xe438 <ymodem_receive+0x168>
    e3f2:	e4 e0       	ldi	r30, 0x04	; 4
    e3f4:	f1 e0       	ldi	r31, 0x01	; 1
    e3f6:	20 e0       	ldi	r18, 0x00	; 0
    e3f8:	30 e0       	ldi	r19, 0x00	; 0
static uint16_t ymodem_calcrc(unsigned char *ptr, uint16_t count)
{
   uint16_t crc = 0;

  while (count > 0) { 
    crc = _crc_xmodem_update(crc, *ptr++);
    e3fa:	81 91       	ld	r24, Z+
    uint16_t __ret;             /* %B0:%A0 (alias for __crc) */
    uint8_t __tmp1;             /* %1 */
    uint8_t __tmp2;             /* %2 */
                                /* %3  __data */

    __asm__ __volatile__ (
    e3fc:	38 27       	eor	r19, r24
    e3fe:	03 2e       	mov	r0, r19
    e400:	02 94       	swap	r0
    e402:	90 2d       	mov	r25, r0
    e404:	9f 70       	andi	r25, 0x0F	; 15
    e406:	93 27       	eor	r25, r19
    e408:	83 2f       	mov	r24, r19
    e40a:	80 25       	eor	r24, r0
    e40c:	88 0f       	add	r24, r24
    e40e:	80 7e       	andi	r24, 0xE0	; 224
    e410:	98 27       	eor	r25, r24
    e412:	80 2d       	mov	r24, r0
    e414:	83 27       	eor	r24, r19
    e416:	80 7f       	andi	r24, 0xF0	; 240
    e418:	86 95       	lsr	r24
    e41a:	03 2e       	mov	r0, r19
    e41c:	00 0c       	add	r0, r0
    e41e:	88 1f       	adc	r24, r24
    e420:	36 95       	lsr	r19
    e422:	36 95       	lsr	r19
    e424:	36 95       	lsr	r19
    e426:	3f 71       	andi	r19, 0x1F	; 31
    e428:	38 27       	eor	r19, r24
    e42a:	32 27       	eor	r19, r18
    e42c:	29 2f       	mov	r18, r25

static uint16_t ymodem_calcrc(unsigned char *ptr, uint16_t count)
{
   uint16_t crc = 0;

  while (count > 0) { 
    e42e:	91 e0       	ldi	r25, 0x01	; 1
    e430:	e4 38       	cpi	r30, 0x84	; 132
    e432:	f9 07       	cpc	r31, r25
    e434:	11 f7       	brne	.-60     	; 0xe3fa <ymodem_receive+0x12a>
    e436:	2e c0       	rjmp	.+92     	; 0xe494 <ymodem_receive+0x1c4>
    e438:	e4 e0       	ldi	r30, 0x04	; 4
    e43a:	f1 e0       	ldi	r31, 0x01	; 1
    e43c:	20 e0       	ldi	r18, 0x00	; 0
    e43e:	30 e0       	ldi	r19, 0x00	; 0
    crc = _crc_xmodem_update(crc, *ptr++);
    e440:	81 91       	ld	r24, Z+
    e442:	38 27       	eor	r19, r24
    e444:	03 2e       	mov	r0, r19
    e446:	02 94       	swap	r0
    e448:	90 2d       	mov	r25, r0
    e44a:	9f 70       	andi	r25, 0x0F	; 15
    e44c:	93 27       	eor	r25, r19
    e44e:	83 2f       	mov	r24, r19
    e450:	80 25       	eor	r24, r0
    e452:	88 0f       	add	r24, r24
    e454:	80 7e       	andi	r24, 0xE0	; 224
    e456:	98 27       	eor	r25, r24
    e458:	80 2d       	mov	r24, r0
    e45a:	83 27       	eor	r24, r19
    e45c:	80 7f       	andi	r24, 0xF0	; 240
    e45e:	86 95       	lsr	r24
    e460:	03 2e       	mov	r0, r19
    e462:	00 0c       	add	r0, r0
    e464:	88 1f       	adc	r24, r24
    e466:	36 95       	lsr	r19
    e468:	36 95       	lsr	r19
    e46a:	36 95       	lsr	r19
    e46c:	3f 71       	andi	r19, 0x1F	; 31
    e46e:	38 27       	eor	r19, r24
    e470:	32 27       	eor	r19, r18
    e472:	29 2f       	mov	r18, r25

static uint16_t ymodem_calcrc(unsigned char *ptr, uint16_t count)
{
   uint16_t crc = 0;

  while (count > 0) { 
    e474:	a5 e0       	ldi	r26, 0x05	; 5
    e476:	e4 30       	cpi	r30, 0x04	; 4
    e478:	fa 07       	cpc	r31, r26
    e47a:	11 f7       	brne	.-60     	; 0xe440 <ymodem_receive+0x170>
      crc = ymodem_calcrc((&ymodemBuffer[3]), 128);
    } else {
      crc = ymodem_calcrc((&ymodemBuffer[3]), 1024);
    }

    if (!shortPacketMode && ((ymodemBuffer[1027] != (unsigned char)(crc >> 8)) || (ymodemBuffer[1028] != (unsigned char)(crc)))) {
    e47c:	80 81       	ld	r24, Z
    e47e:	83 17       	cp	r24, r19
    e480:	21 f4       	brne	.+8      	; 0xe48a <ymodem_receive+0x1ba>
    e482:	80 91 05 05 	lds	r24, 0x0505
    e486:	82 17       	cp	r24, r18
    e488:	89 f0       	breq	.+34     	; 0xe4ac <ymodem_receive+0x1dc>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e48a:	80 91 c0 00 	lds	r24, 0x00C0
    e48e:	85 ff       	sbrs	r24, 5
    e490:	fc cf       	rjmp	.-8      	; 0xe48a <ymodem_receive+0x1ba>
    e492:	1b c0       	rjmp	.+54     	; 0xe4ca <ymodem_receive+0x1fa>

      resendPacket = 1;
      canAttempts++;
      usart_transmit(NACK);
    
    } else if (shortPacketMode && ((ymodemBuffer[131] != (unsigned char)(crc >> 8)) || (ymodemBuffer[132] != (unsigned char)(crc)))) {
    e494:	80 81       	ld	r24, Z
    e496:	83 17       	cp	r24, r19
    e498:	21 f4       	brne	.+8      	; 0xe4a2 <ymodem_receive+0x1d2>
    e49a:	80 91 85 01 	lds	r24, 0x0185
    e49e:	82 17       	cp	r24, r18
    e4a0:	29 f0       	breq	.+10     	; 0xe4ac <ymodem_receive+0x1dc>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e4a2:	80 91 c0 00 	lds	r24, 0x00C0
    e4a6:	85 ff       	sbrs	r24, 5
    e4a8:	fc cf       	rjmp	.-8      	; 0xe4a2 <ymodem_receive+0x1d2>
    e4aa:	0f c0       	rjmp	.+30     	; 0xe4ca <ymodem_receive+0x1fa>

      resendPacket = 1;
      canAttempts++;
      usart_transmit(NACK);
    
    } else if(ymodemBuffer[1] + ymodemBuffer[2] != 0xFF) { //(ymodemReceivedPackets + 1 != ymodemBuffer[1]) ||
    e4ac:	30 91 02 01 	lds	r19, 0x0102
    e4b0:	20 91 03 01 	lds	r18, 0x0103
    e4b4:	83 2f       	mov	r24, r19
    e4b6:	90 e0       	ldi	r25, 0x00	; 0
    e4b8:	82 0f       	add	r24, r18
    e4ba:	91 1d       	adc	r25, r1
    e4bc:	8f 3f       	cpi	r24, 0xFF	; 255
    e4be:	91 05       	cpc	r25, r1
    e4c0:	41 f0       	breq	.+16     	; 0xe4d2 <ymodem_receive+0x202>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e4c2:	80 91 c0 00 	lds	r24, 0x00C0
    e4c6:	85 ff       	sbrs	r24, 5
    e4c8:	fc cf       	rjmp	.-8      	; 0xe4c2 <ymodem_receive+0x1f2>
    
    } else if(ymodemBuffer[1] + ymodemBuffer[2] != 0xFF) { //(ymodemReceivedPackets + 1 != ymodemBuffer[1]) ||
      // Packet number not correct, could be a bad packet no. if it passed the above test

      resendPacket = 1;
      canAttempts++;
    e4ca:	4f 5f       	subi	r20, 0xFF	; 255
void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e4cc:	50 92 c6 00 	sts	0x00C6, r5
    e4d0:	08 c1       	rjmp	.+528    	; 0xe6e2 <ymodem_receive+0x412>

      resendPacket = 1;
      canAttempts++;
      usart_transmit(NACK);
    
    } else if (ymodemReceivedPackets == 0 && ymodemBuffer[1] == 0) {
    e4d2:	80 91 07 06 	lds	r24, 0x0607
    e4d6:	90 91 08 06 	lds	r25, 0x0608
    e4da:	89 2b       	or	r24, r25
    e4dc:	09 f0       	breq	.+2      	; 0xe4e0 <ymodem_receive+0x210>
    e4de:	94 c0       	rjmp	.+296    	; 0xe608 <ymodem_receive+0x338>
    e4e0:	33 23       	and	r19, r19
    e4e2:	09 f0       	breq	.+2      	; 0xe4e6 <ymodem_receive+0x216>
    e4e4:	91 c0       	rjmp	.+290    	; 0xe608 <ymodem_receive+0x338>
    e4e6:	23 e0       	ldi	r18, 0x03	; 3
    e4e8:	30 e0       	ldi	r19, 0x00	; 0
               * the file length are zero, we'll call it empty.
               */
      // Find the filename length
      uint16_t fileDatPos = 0;
      for (fileDatPos = 3; fileDatPos < 1026; fileDatPos++) {
        if (ymodemBuffer[fileDatPos] == '\0') {
    e4ea:	f9 01       	movw	r30, r18
    e4ec:	ef 5f       	subi	r30, 0xFF	; 255
    e4ee:	fe 4f       	sbci	r31, 0xFE	; 254
    e4f0:	80 81       	ld	r24, Z
    e4f2:	88 23       	and	r24, r24
    e4f4:	21 f4       	brne	.+8      	; 0xe4fe <ymodem_receive+0x22e>
          break;
        }
      }

      if(fileDatPos < 7) {
    e4f6:	27 30       	cpi	r18, 0x07	; 7
    e4f8:	31 05       	cpc	r19, r1
    e4fa:	c0 f4       	brcc	.+48     	; 0xe52c <ymodem_receive+0x25c>
    e4fc:	07 c0       	rjmp	.+14     	; 0xe50c <ymodem_receive+0x23c>
               * we have a NULL filename and the first few digits of
               * the file length are zero, we'll call it empty.
               */
      // Find the filename length
      uint16_t fileDatPos = 0;
      for (fileDatPos = 3; fileDatPos < 1026; fileDatPos++) {
    e4fe:	2f 5f       	subi	r18, 0xFF	; 255
    e500:	3f 4f       	sbci	r19, 0xFF	; 255
    e502:	b4 e0       	ldi	r27, 0x04	; 4
    e504:	22 30       	cpi	r18, 0x02	; 2
    e506:	3b 07       	cpc	r19, r27
    e508:	81 f7       	brne	.-32     	; 0xe4ea <ymodem_receive+0x21a>
    e50a:	10 c0       	rjmp	.+32     	; 0xe52c <ymodem_receive+0x25c>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e50c:	80 91 c0 00 	lds	r24, 0x00C0
    e510:	85 ff       	sbrs	r24, 5
    e512:	fc cf       	rjmp	.-8      	; 0xe50c <ymodem_receive+0x23c>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e514:	88 e1       	ldi	r24, 0x18	; 24
    e516:	80 93 c6 00 	sts	0x00C6, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e51a:	80 91 c0 00 	lds	r24, 0x00C0
    e51e:	85 ff       	sbrs	r24, 5
    e520:	fc cf       	rjmp	.-8      	; 0xe51a <ymodem_receive+0x24a>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e522:	88 e1       	ldi	r24, 0x18	; 24
    e524:	80 93 c6 00 	sts	0x00C6, r24
    e528:	83 e0       	ldi	r24, 0x03	; 3
    e52a:	ed c0       	rjmp	.+474    	; 0xe706 <ymodem_receive+0x436>
      }
      
      // To tell you the truth, I really don't care what the incoming filename is
      // No parsing of the filename done here.

      fileDatPos++; // Need one more increment to get away from the last NULL
    e52c:	89 01       	movw	r16, r18
    e52e:	0f 5f       	subi	r16, 0xFF	; 255
    e530:	1f 4f       	sbci	r17, 0xFF	; 255
    e532:	f8 01       	movw	r30, r16
    e534:	ef 5f       	subi	r30, 0xFF	; 255
    e536:	fe 4f       	sbci	r31, 0xFE	; 254
    e538:	02 c0       	rjmp	.+4      	; 0xe53e <ymodem_receive+0x26e>

      // strip leading spaces if any
    	while(ymodemBuffer[fileDatPos] == ' ' && fileDatPos < 1026) {
        fileDatPos++;
    e53a:	0f 5f       	subi	r16, 0xFF	; 255
    e53c:	1f 4f       	sbci	r17, 0xFF	; 255
      // No parsing of the filename done here.

      fileDatPos++; // Need one more increment to get away from the last NULL

      // strip leading spaces if any
    	while(ymodemBuffer[fileDatPos] == ' ' && fileDatPos < 1026) {
    e53e:	80 81       	ld	r24, Z
    e540:	80 32       	cpi	r24, 0x20	; 32
    e542:	29 f4       	brne	.+10     	; 0xe54e <ymodem_receive+0x27e>
    e544:	31 96       	adiw	r30, 0x01	; 1
    e546:	84 e0       	ldi	r24, 0x04	; 4
    e548:	02 30       	cpi	r16, 0x02	; 2
    e54a:	18 07       	cpc	r17, r24
    e54c:	b0 f3       	brcs	.-20     	; 0xe53a <ymodem_receive+0x26a>
        fileDatPos++;
      }

      *fileSize = 0;
    e54e:	d4 01       	movw	r26, r8
    e550:	1d 92       	st	X+, r1
    e552:	1d 92       	st	X+, r1
    e554:	1d 92       	st	X+, r1
    e556:	1c 92       	st	X, r1
    e558:	13 97       	sbiw	r26, 0x03	; 3
    e55a:	e8 01       	movw	r28, r16
    e55c:	cf 5f       	subi	r28, 0xFF	; 255
    e55e:	de 4f       	sbci	r29, 0xFE	; 254
    e560:	24 c0       	rjmp	.+72     	; 0xe5aa <ymodem_receive+0x2da>
      while((ymodemBuffer[fileDatPos] != ' ' && ymodemBuffer[fileDatPos] != '\0') && fileDatPos < 1026) {
        // Find the end of the file size! It's in decimal format, so convert as we go

        *fileSize *= 10;
    e562:	f4 01       	movw	r30, r8
    e564:	60 81       	ld	r22, Z
    e566:	71 81       	ldd	r23, Z+1	; 0x01
    e568:	82 81       	ldd	r24, Z+2	; 0x02
    e56a:	93 81       	ldd	r25, Z+3	; 0x03
    e56c:	2a e0       	ldi	r18, 0x0A	; 10
    e56e:	30 e0       	ldi	r19, 0x00	; 0
    e570:	40 e0       	ldi	r20, 0x00	; 0
    e572:	50 e0       	ldi	r21, 0x00	; 0
    e574:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <__mulsi3>
    e578:	d4 01       	movw	r26, r8
    e57a:	6d 93       	st	X+, r22
    e57c:	7d 93       	st	X+, r23
    e57e:	8d 93       	st	X+, r24
    e580:	9c 93       	st	X, r25
    e582:	13 97       	sbiw	r26, 0x03	; 3
        *fileSize += (ymodemBuffer[fileDatPos] - '0');
    e584:	29 91       	ld	r18, Y+
    e586:	30 e0       	ldi	r19, 0x00	; 0
    e588:	20 53       	subi	r18, 0x30	; 48
    e58a:	30 40       	sbci	r19, 0x00	; 0
    e58c:	44 27       	eor	r20, r20
    e58e:	37 fd       	sbrc	r19, 7
    e590:	40 95       	com	r20
    e592:	54 2f       	mov	r21, r20
    e594:	26 0f       	add	r18, r22
    e596:	37 1f       	adc	r19, r23
    e598:	48 1f       	adc	r20, r24
    e59a:	59 1f       	adc	r21, r25
    e59c:	f4 01       	movw	r30, r8
    e59e:	20 83       	st	Z, r18
    e5a0:	31 83       	std	Z+1, r19	; 0x01
    e5a2:	42 83       	std	Z+2, r20	; 0x02
    e5a4:	53 83       	std	Z+3, r21	; 0x03

        fileDatPos++;
    e5a6:	0f 5f       	subi	r16, 0xFF	; 255
    e5a8:	1f 4f       	sbci	r17, 0xFF	; 255
    	while(ymodemBuffer[fileDatPos] == ' ' && fileDatPos < 1026) {
        fileDatPos++;
      }

      *fileSize = 0;
      while((ymodemBuffer[fileDatPos] != ' ' && ymodemBuffer[fileDatPos] != '\0') && fileDatPos < 1026) {
    e5aa:	88 81       	ld	r24, Y
    e5ac:	80 32       	cpi	r24, 0x20	; 32
    e5ae:	31 f0       	breq	.+12     	; 0xe5bc <ymodem_receive+0x2ec>
    e5b0:	88 23       	and	r24, r24
    e5b2:	21 f0       	breq	.+8      	; 0xe5bc <ymodem_receive+0x2ec>
    e5b4:	f4 e0       	ldi	r31, 0x04	; 4
    e5b6:	02 30       	cpi	r16, 0x02	; 2
    e5b8:	1f 07       	cpc	r17, r31
    e5ba:	98 f2       	brcs	.-90     	; 0xe562 <ymodem_receive+0x292>
        *fileSize += (ymodemBuffer[fileDatPos] - '0');

        fileDatPos++;
      }

      if(*fileSize == 0) {
    e5bc:	f4 01       	movw	r30, r8
    e5be:	80 81       	ld	r24, Z
    e5c0:	91 81       	ldd	r25, Z+1	; 0x01
    e5c2:	a2 81       	ldd	r26, Z+2	; 0x02
    e5c4:	b3 81       	ldd	r27, Z+3	; 0x03
    e5c6:	00 97       	sbiw	r24, 0x00	; 0
    e5c8:	a1 05       	cpc	r26, r1
    e5ca:	b1 05       	cpc	r27, r1
    e5cc:	81 f4       	brne	.+32     	; 0xe5ee <ymodem_receive+0x31e>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e5ce:	80 91 c0 00 	lds	r24, 0x00C0
    e5d2:	85 ff       	sbrs	r24, 5
    e5d4:	fc cf       	rjmp	.-8      	; 0xe5ce <ymodem_receive+0x2fe>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e5d6:	88 e1       	ldi	r24, 0x18	; 24
    e5d8:	80 93 c6 00 	sts	0x00C6, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e5dc:	80 91 c0 00 	lds	r24, 0x00C0
    e5e0:	85 ff       	sbrs	r24, 5
    e5e2:	fc cf       	rjmp	.-8      	; 0xe5dc <ymodem_receive+0x30c>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e5e4:	88 e1       	ldi	r24, 0x18	; 24
    e5e6:	80 93 c6 00 	sts	0x00C6, r24
    e5ea:	84 e0       	ldi	r24, 0x04	; 4
    e5ec:	8c c0       	rjmp	.+280    	; 0xe706 <ymodem_receive+0x436>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e5ee:	80 91 c0 00 	lds	r24, 0x00C0
    e5f2:	85 ff       	sbrs	r24, 5
    e5f4:	fc cf       	rjmp	.-8      	; 0xe5ee <ymodem_receive+0x31e>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e5f6:	40 92 c6 00 	sts	0x00C6, r4
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e5fa:	80 91 c0 00 	lds	r24, 0x00C0
    e5fe:	85 ff       	sbrs	r24, 5
    e600:	fc cf       	rjmp	.-8      	; 0xe5fa <ymodem_receive+0x32a>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e602:	20 92 c6 00 	sts	0x00C6, r2
    e606:	92 c0       	rjmp	.+292    	; 0xe72c <ymodem_receive+0x45c>
      resendPacket = 0;
      canAttempts = 0;
      usart_transmit(ACK);
      usart_transmit('C');

    } else if (lastPacketNum == ymodemBuffer[1]) {
    e608:	33 16       	cp	r3, r19
    e60a:	41 f4       	brne	.+16     	; 0xe61c <ymodem_receive+0x34c>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e60c:	80 91 c0 00 	lds	r24, 0x00C0
    e610:	85 ff       	sbrs	r24, 5
    e612:	fc cf       	rjmp	.-8      	; 0xe60c <ymodem_receive+0x33c>

    } else if (lastPacketNum == ymodemBuffer[1]) {
      // It's a repeated packet. We've already received it successfully though

      resendPacket = 0;
      canAttempts++;
    e614:	4f 5f       	subi	r20, 0xFF	; 255
void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e616:	40 92 c6 00 	sts	0x00C6, r4
    e61a:	63 c0       	rjmp	.+198    	; 0xe6e2 <ymodem_receive+0x412>
    e61c:	f4 01       	movw	r30, r8
    e61e:	80 81       	ld	r24, Z
    e620:	91 81       	ldd	r25, Z+1	; 0x01
    e622:	a2 81       	ldd	r26, Z+2	; 0x02
    e624:	b3 81       	ldd	r27, Z+3	; 0x03
    
    } else {
      // That was a good packet

      // First, see how many bytes should be passed to the buff_func, then process them
      if(shortPacketMode) {
    e626:	55 23       	and	r21, r21
    e628:	21 f1       	breq	.+72     	; 0xe672 <ymodem_receive+0x3a2>
        if(recdBytes + 128 > *fileSize) {
    e62a:	30 e8       	ldi	r19, 0x80	; 128
    e62c:	e3 2e       	mov	r14, r19
    e62e:	f1 2c       	mov	r15, r1
    e630:	01 2d       	mov	r16, r1
    e632:	11 2d       	mov	r17, r1
    e634:	ea 0c       	add	r14, r10
    e636:	fb 1c       	adc	r15, r11
    e638:	0c 1d       	adc	r16, r12
    e63a:	1d 1d       	adc	r17, r13
    e63c:	8e 15       	cp	r24, r14
    e63e:	9f 05       	cpc	r25, r15
    e640:	a0 07       	cpc	r26, r16
    e642:	b1 07       	cpc	r27, r17
    e644:	88 f4       	brcc	.+34     	; 0xe668 <ymodem_receive+0x398>
          // Must be a half packet, do buffer_func accordingly
          uint8_t j = *fileSize - recdBytes;
    e646:	18 2f       	mov	r17, r24
    e648:	1a 19       	sub	r17, r10
          (buffer_func)(&ymodemBuffer[3], j);
    e64a:	84 e0       	ldi	r24, 0x04	; 4
    e64c:	91 e0       	ldi	r25, 0x01	; 1
    e64e:	61 2f       	mov	r22, r17
    e650:	70 e0       	ldi	r23, 0x00	; 0
    e652:	f3 01       	movw	r30, r6
    e654:	09 95       	icall
          recdBytes += j;
    e656:	d6 01       	movw	r26, r12
    e658:	c5 01       	movw	r24, r10
    e65a:	81 0f       	add	r24, r17
    e65c:	91 1d       	adc	r25, r1
    e65e:	a1 1d       	adc	r26, r1
    e660:	b1 1d       	adc	r27, r1
    e662:	7c 01       	movw	r14, r24
    e664:	8d 01       	movw	r16, r26
    e666:	29 c0       	rjmp	.+82     	; 0xe6ba <ymodem_receive+0x3ea>

        } else {
          // Do a 128 byte buffer func
          (buffer_func)(&ymodemBuffer[3], 128);
    e668:	84 e0       	ldi	r24, 0x04	; 4
    e66a:	91 e0       	ldi	r25, 0x01	; 1
    e66c:	60 e8       	ldi	r22, 0x80	; 128
    e66e:	70 e0       	ldi	r23, 0x00	; 0
    e670:	22 c0       	rjmp	.+68     	; 0xe6b6 <ymodem_receive+0x3e6>
          recdBytes += 128;

        }
      } else {
        if(recdBytes + 1024 > *fileSize) {
    e672:	e1 2c       	mov	r14, r1
    e674:	24 e0       	ldi	r18, 0x04	; 4
    e676:	f2 2e       	mov	r15, r18
    e678:	01 2d       	mov	r16, r1
    e67a:	11 2d       	mov	r17, r1
    e67c:	ea 0c       	add	r14, r10
    e67e:	fb 1c       	adc	r15, r11
    e680:	0c 1d       	adc	r16, r12
    e682:	1d 1d       	adc	r17, r13
    e684:	8e 15       	cp	r24, r14
    e686:	9f 05       	cpc	r25, r15
    e688:	a0 07       	cpc	r26, r16
    e68a:	b1 07       	cpc	r27, r17
    e68c:	80 f4       	brcc	.+32     	; 0xe6ae <ymodem_receive+0x3de>
          // Must be a half packet, do buffer_func accordingly
          uint16_t j = *fileSize - recdBytes;
    e68e:	8c 01       	movw	r16, r24
    e690:	0a 19       	sub	r16, r10
    e692:	1b 09       	sbc	r17, r11
          (buffer_func)(&ymodemBuffer[3], j);
    e694:	84 e0       	ldi	r24, 0x04	; 4
    e696:	91 e0       	ldi	r25, 0x01	; 1
    e698:	b8 01       	movw	r22, r16
    e69a:	f3 01       	movw	r30, r6
    e69c:	09 95       	icall
          recdBytes += j;
    e69e:	78 01       	movw	r14, r16
    e6a0:	00 e0       	ldi	r16, 0x00	; 0
    e6a2:	10 e0       	ldi	r17, 0x00	; 0
    e6a4:	ea 0c       	add	r14, r10
    e6a6:	fb 1c       	adc	r15, r11
    e6a8:	0c 1d       	adc	r16, r12
    e6aa:	1d 1d       	adc	r17, r13
    e6ac:	06 c0       	rjmp	.+12     	; 0xe6ba <ymodem_receive+0x3ea>

        } else {
          // Do a 1k byte buffer func
          (buffer_func)(&ymodemBuffer[3], 1024);
    e6ae:	84 e0       	ldi	r24, 0x04	; 4
    e6b0:	91 e0       	ldi	r25, 0x01	; 1
    e6b2:	60 e0       	ldi	r22, 0x00	; 0
    e6b4:	74 e0       	ldi	r23, 0x04	; 4
    e6b6:	f3 01       	movw	r30, r6
    e6b8:	09 95       	icall

        }
      }

      // Update some values so we are good for the next run
      lastPacketNum = ymodemBuffer[1];
    e6ba:	30 90 02 01 	lds	r3, 0x0102
      resendPacket = 0;
      ymodemReceivedPackets++;
    e6be:	80 91 07 06 	lds	r24, 0x0607
    e6c2:	90 91 08 06 	lds	r25, 0x0608
    e6c6:	01 96       	adiw	r24, 0x01	; 1
    e6c8:	90 93 08 06 	sts	0x0608, r25
    e6cc:	80 93 07 06 	sts	0x0607, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e6d0:	80 91 c0 00 	lds	r24, 0x00C0
    e6d4:	85 ff       	sbrs	r24, 5
    e6d6:	fc cf       	rjmp	.-8      	; 0xe6d0 <ymodem_receive+0x400>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e6d8:	40 92 c6 00 	sts	0x00C6, r4
    e6dc:	57 01       	movw	r10, r14
    e6de:	68 01       	movw	r12, r16
    e6e0:	25 c0       	rjmp	.+74     	; 0xe72c <ymodem_receive+0x45c>
      canAttempts = 0;
      usart_transmit(ACK);

    }

    if(canAttempts > YMODEM_MAX_RETRIES) {
    e6e2:	44 30       	cpi	r20, 0x04	; 4
    e6e4:	08 f4       	brcc	.+2      	; 0xe6e8 <ymodem_receive+0x418>
    e6e6:	1e ce       	rjmp	.-964    	; 0xe324 <ymodem_receive+0x54>
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e6e8:	80 91 c0 00 	lds	r24, 0x00C0
    e6ec:	85 ff       	sbrs	r24, 5
    e6ee:	fc cf       	rjmp	.-8      	; 0xe6e8 <ymodem_receive+0x418>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e6f0:	88 e1       	ldi	r24, 0x18	; 24
    e6f2:	80 93 c6 00 	sts	0x00C6, r24
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e6f6:	80 91 c0 00 	lds	r24, 0x00C0
    e6fa:	85 ff       	sbrs	r24, 5
    e6fc:	fc cf       	rjmp	.-8      	; 0xe6f6 <ymodem_receive+0x426>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e6fe:	88 e1       	ldi	r24, 0x18	; 24
    e700:	80 93 c6 00 	sts	0x00C6, r24
    e704:	82 e0       	ldi	r24, 0x02	; 2
  } while(1);

  /* Should wait here to make sure no additional data is sent. If it is, then
  the ACK probably got garbled and the EOT has been sent again. */
  return 0;
}
    e706:	df 91       	pop	r29
    e708:	cf 91       	pop	r28
    e70a:	1f 91       	pop	r17
    e70c:	0f 91       	pop	r16
    e70e:	ff 90       	pop	r15
    e710:	ef 90       	pop	r14
    e712:	df 90       	pop	r13
    e714:	cf 90       	pop	r12
    e716:	bf 90       	pop	r11
    e718:	af 90       	pop	r10
    e71a:	9f 90       	pop	r9
    e71c:	8f 90       	pop	r8
    e71e:	7f 90       	pop	r7
    e720:	6f 90       	pop	r6
    e722:	5f 90       	pop	r5
    e724:	4f 90       	pop	r4
    e726:	3f 90       	pop	r3
    e728:	2f 90       	pop	r2
    e72a:	08 95       	ret
void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e72c:	40 e0       	ldi	r20, 0x00	; 0
    e72e:	fa cd       	rjmp	.-1036   	; 0xe324 <ymodem_receive+0x54>

0000e730 <do_flash_write>:
      do_flash_write(pageAddress);
    }
  }
}

static void do_flash_write(uint16_t address) {
    e730:	af 92       	push	r10
    e732:	bf 92       	push	r11
    e734:	cf 92       	push	r12
    e736:	df 92       	push	r13
    e738:	ef 92       	push	r14
    e73a:	ff 92       	push	r15
    e73c:	0f 93       	push	r16
    e73e:	1f 93       	push	r17
    e740:	cf 93       	push	r28
    e742:	df 93       	push	r29

  // Erase the temporary page buffer - shouldn't need this, but it's a test
  SPMCSR |= (1 << RWWSRE);
    e744:	87 b7       	in	r24, 0x37	; 55
    e746:	80 61       	ori	r24, 0x10	; 16
    e748:	87 bf       	out	0x37, r24	; 55

  for(uint16_t i = 0; i<= bytesInBuff; i++) {
    e74a:	80 91 00 01 	lds	r24, 0x0100
    e74e:	08 2f       	mov	r16, r24
    e750:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t w = pageBuff[i++];
    w += (pageBuff[i]) << 8;

    boot_page_fill (pageAddress + i, w);
    e752:	60 91 09 06 	lds	r22, 0x0609
    e756:	70 91 0a 06 	lds	r23, 0x060A
    e75a:	c6 e0       	ldi	r28, 0x06	; 6
    e75c:	d5 e0       	ldi	r29, 0x05	; 5
    e75e:	db 01       	movw	r26, r22
    e760:	11 96       	adiw	r26, 0x01	; 1
    e762:	5e 01       	movw	r10, r28
    e764:	40 e0       	ldi	r20, 0x00	; 0
    e766:	50 e0       	ldi	r21, 0x00	; 0
    e768:	ff 24       	eor	r15, r15
    e76a:	f3 94       	inc	r15

  // Erase the temporary page buffer - shouldn't need this, but it's a test
  SPMCSR |= (1 << RWWSRE);

  for(uint16_t i = 0; i<= bytesInBuff; i++) {
    uint16_t w = pageBuff[i++];
    e76c:	f5 01       	movw	r30, r10
    e76e:	80 81       	ld	r24, Z
    w += (pageBuff[i]) << 8;

    boot_page_fill (pageAddress + i, w);
    e770:	31 81       	ldd	r19, Z+1	; 0x01
    e772:	20 e0       	ldi	r18, 0x00	; 0
    e774:	69 01       	movw	r12, r18
    e776:	c8 0e       	add	r12, r24
    e778:	d1 1c       	adc	r13, r1
    e77a:	fd 01       	movw	r30, r26
    e77c:	06 01       	movw	r0, r12
    e77e:	f0 92 57 00 	sts	0x0057, r15
    e782:	e8 95       	spm
    e784:	11 24       	eor	r1, r1
    e786:	4e 5f       	subi	r20, 0xFE	; 254
    e788:	5f 4f       	sbci	r21, 0xFF	; 255
    e78a:	e2 e0       	ldi	r30, 0x02	; 2
    e78c:	ce 2e       	mov	r12, r30
    e78e:	d1 2c       	mov	r13, r1
    e790:	ac 0c       	add	r10, r12
    e792:	bd 1c       	adc	r11, r13
    e794:	12 96       	adiw	r26, 0x02	; 2
static void do_flash_write(uint16_t address) {

  // Erase the temporary page buffer - shouldn't need this, but it's a test
  SPMCSR |= (1 << RWWSRE);

  for(uint16_t i = 0; i<= bytesInBuff; i++) {
    e796:	04 17       	cp	r16, r20
    e798:	15 07       	cpc	r17, r21
    e79a:	40 f7       	brcc	.-48     	; 0xe76c <do_flash_write+0x3c>
    w += (pageBuff[i]) << 8;

    boot_page_fill (pageAddress + i, w);
  }

  eeprom_busy_wait();
    e79c:	f9 99       	sbic	0x1f, 1	; 31
    e79e:	fe cf       	rjmp	.-4      	; 0xe79c <do_flash_write+0x6c>
  boot_page_erase(pageAddress);
    e7a0:	83 e0       	ldi	r24, 0x03	; 3
    e7a2:	fb 01       	movw	r30, r22
    e7a4:	80 93 57 00 	sts	0x0057, r24
    e7a8:	e8 95       	spm
  boot_spm_busy_wait();
    e7aa:	07 b6       	in	r0, 0x37	; 55
    e7ac:	00 fc       	sbrc	r0, 0
    e7ae:	fd cf       	rjmp	.-6      	; 0xe7aa <do_flash_write+0x7a>

  boot_page_write(pageAddress); // Store buffer in flash page.
    e7b0:	85 e0       	ldi	r24, 0x05	; 5
    e7b2:	fb 01       	movw	r30, r22
    e7b4:	80 93 57 00 	sts	0x0057, r24
    e7b8:	e8 95       	spm
  boot_spm_busy_wait();         // Wait until the memory is written.
    e7ba:	07 b6       	in	r0, 0x37	; 55
    e7bc:	00 fc       	sbrc	r0, 0
    e7be:	fd cf       	rjmp	.-6      	; 0xe7ba <do_flash_write+0x8a>

  // Reenable RWW-section again. We need this if we want to jump back
  // to the application after bootloading.
  boot_rww_enable();
    e7c0:	81 e1       	ldi	r24, 0x11	; 17
    e7c2:	80 93 57 00 	sts	0x0057, r24
    e7c6:	e8 95       	spm
    e7c8:	e0 90 0b 06 	lds	r14, 0x060B
    e7cc:	f0 90 0c 06 	lds	r15, 0x060C
    e7d0:	40 91 0e 06 	lds	r20, 0x060E
    e7d4:	20 91 0f 06 	lds	r18, 0x060F
    e7d8:	30 91 06 06 	lds	r19, 0x0606
    e7dc:	fb 01       	movw	r30, r22

  // Read back the data and make sure it's good
  for(uint16_t i = 0; i<bytesInBuff; i++) {
    e7de:	d8 01       	movw	r26, r16
    e7e0:	a6 0f       	add	r26, r22
    e7e2:	b7 1f       	adc	r27, r23
    if((pageBuff[i] != pgm_read_byte_near(pageAddress + i))) {
      // Set an error flag and save the address
      writeErrorFlag++;
      writeErrorAddressLast = pageAddress;

      if(writeErrorFlag == 1) {
    e7e4:	16 2f       	mov	r17, r22
    e7e6:	57 2f       	mov	r21, r23
    e7e8:	0c c0       	rjmp	.+24     	; 0xe802 <do_flash_write+0xd2>
  // to the application after bootloading.
  boot_rww_enable();

  // Read back the data and make sure it's good
  for(uint16_t i = 0; i<bytesInBuff; i++) {
    if((pageBuff[i] != pgm_read_byte_near(pageAddress + i))) {
    e7ea:	94 91       	lpm	r25, Z+
    e7ec:	88 81       	ld	r24, Y
    e7ee:	89 17       	cp	r24, r25
    e7f0:	31 f0       	breq	.+12     	; 0xe7fe <do_flash_write+0xce>
      // Set an error flag and save the address
      writeErrorFlag++;
    e7f2:	3f 5f       	subi	r19, 0xFF	; 255
      writeErrorAddressLast = pageAddress;

      if(writeErrorFlag == 1) {
    e7f4:	31 30       	cpi	r19, 0x01	; 1
    e7f6:	09 f4       	brne	.+2      	; 0xe7fa <do_flash_write+0xca>
    e7f8:	7f 01       	movw	r14, r30
    e7fa:	41 2f       	mov	r20, r17
    e7fc:	25 2f       	mov	r18, r21
    e7fe:	31 96       	adiw	r30, 0x01	; 1
    e800:	21 96       	adiw	r28, 0x01	; 1
  // Reenable RWW-section again. We need this if we want to jump back
  // to the application after bootloading.
  boot_rww_enable();

  // Read back the data and make sure it's good
  for(uint16_t i = 0; i<bytesInBuff; i++) {
    e802:	ea 17       	cp	r30, r26
    e804:	fb 07       	cpc	r31, r27
    e806:	89 f7       	brne	.-30     	; 0xe7ea <do_flash_write+0xba>
    e808:	e0 92 0b 06 	sts	0x060B, r14
    e80c:	f0 92 0c 06 	sts	0x060C, r15
    e810:	40 93 0e 06 	sts	0x060E, r20
    e814:	20 93 0f 06 	sts	0x060F, r18
    e818:	30 93 06 06 	sts	0x0606, r19
        writeErrorAddress = pageAddress + i;
      }
    }
  }

  pageAddress += 256;
    e81c:	60 50       	subi	r22, 0x00	; 0
    e81e:	7f 4f       	sbci	r23, 0xFF	; 255
    e820:	70 93 0a 06 	sts	0x060A, r23
    e824:	60 93 09 06 	sts	0x0609, r22
}
    e828:	df 91       	pop	r29
    e82a:	cf 91       	pop	r28
    e82c:	1f 91       	pop	r17
    e82e:	0f 91       	pop	r16
    e830:	ff 90       	pop	r15
    e832:	ef 90       	pop	r14
    e834:	df 90       	pop	r13
    e836:	cf 90       	pop	r12
    e838:	bf 90       	pop	r11
    e83a:	af 90       	pop	r10
    e83c:	08 95       	ret

0000e83e <buff_add>:

   return (crc);
}

void buff_add(unsigned char* buffer, uint16_t byteCnt)
{
    e83e:	ef 92       	push	r14
    e840:	ff 92       	push	r15
    e842:	0f 93       	push	r16
    e844:	1f 93       	push	r17
    e846:	cf 93       	push	r28
    e848:	df 93       	push	r29
    e84a:	7c 01       	movw	r14, r24
    e84c:	8b 01       	movw	r16, r22
    e84e:	c0 e0       	ldi	r28, 0x00	; 0
    e850:	d0 e0       	ldi	r29, 0x00	; 0
    e852:	19 c0       	rjmp	.+50     	; 0xe886 <buff_add+0x48>
  // Okay, here's the magic for this application. Need to erase, write and check pages.

  for(uint16_t i = 0; i<byteCnt; i++, bytesInBuff++) {

    pageBuff[bytesInBuff] = buffer[i];
    e854:	90 91 00 01 	lds	r25, 0x0100
    e858:	e9 2f       	mov	r30, r25
    e85a:	f0 e0       	ldi	r31, 0x00	; 0
    e85c:	ea 5f       	subi	r30, 0xFA	; 250
    e85e:	fa 4f       	sbci	r31, 0xFA	; 250
    e860:	d7 01       	movw	r26, r14
    e862:	ac 0f       	add	r26, r28
    e864:	bd 1f       	adc	r27, r29
    e866:	8c 91       	ld	r24, X
    e868:	80 83       	st	Z, r24

    if(bytesInBuff == 255) {
    e86a:	9f 3f       	cpi	r25, 0xFF	; 255
    e86c:	31 f4       	brne	.+12     	; 0xe87a <buff_add+0x3c>
      // Do a write
      do_flash_write(pageAddress);
    e86e:	80 91 09 06 	lds	r24, 0x0609
    e872:	90 91 0a 06 	lds	r25, 0x060A
    e876:	0e 94 98 73 	call	0xe730	; 0xe730 <do_flash_write>

void buff_add(unsigned char* buffer, uint16_t byteCnt)
{
  // Okay, here's the magic for this application. Need to erase, write and check pages.

  for(uint16_t i = 0; i<byteCnt; i++, bytesInBuff++) {
    e87a:	21 96       	adiw	r28, 0x01	; 1
    e87c:	80 91 00 01 	lds	r24, 0x0100
    e880:	8f 5f       	subi	r24, 0xFF	; 255
    e882:	80 93 00 01 	sts	0x0100, r24
    e886:	c0 17       	cp	r28, r16
    e888:	d1 07       	cpc	r29, r17
    e88a:	20 f3       	brcs	.-56     	; 0xe854 <buff_add+0x16>
    if(bytesInBuff == 255) {
      // Do a write
      do_flash_write(pageAddress);
    }
  }
}
    e88c:	df 91       	pop	r29
    e88e:	cf 91       	pop	r28
    e890:	1f 91       	pop	r17
    e892:	0f 91       	pop	r16
    e894:	ff 90       	pop	r15
    e896:	ef 90       	pop	r14
    e898:	08 95       	ret

0000e89a <main>:
uint8_t ymodem_receive(void(*buffer_func)(unsigned char*, uint16_t), uint32_t *fileSize);
static uint16_t ymodem_calcrc(unsigned char *ptr, uint16_t count);
void buff_add(unsigned char* buffer, uint16_t byteCnt);
static void do_flash_write(uint16_t address);

int main() {
    e89a:	df 93       	push	r29
    e89c:	cf 93       	push	r28
    e89e:	00 d0       	rcall	.+0      	; 0xe8a0 <main+0x6>
    e8a0:	00 d0       	rcall	.+0      	; 0xe8a2 <main+0x8>
    e8a2:	cd b7       	in	r28, 0x3d	; 61
    e8a4:	de b7       	in	r29, 0x3e	; 62

  // Start off like the MBC mode. Check for startMode. If not set, JMP to 0x0000!
  
  PORTA |= (1 << PA7); // Pull up INTRAMEN ASAP, may avoid RAM corruption
    e8a6:	17 9a       	sbi	0x02, 7	; 2

  //uint8_t startMode = PINA & (1 << PA6); // Mode detect!
  uint8_t startMode = PIND & (1 << PD0); // Mode detect!

  if(startMode) {  
    e8a8:	48 9b       	sbis	0x09, 0	; 9
    e8aa:	92 c0       	rjmp	.+292    	; 0xe9d0 <main+0x136>
void init_uart() {
  // Calculate the baud value
  uint16_t num = (uint32_t)F_CPU / (16 * (uint32_t)UART_BAUD) - 1;

	// Set baud rate 
	UBRR0H = (unsigned char)(num>>8);
    e8ac:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)num;
    e8b0:	8d e0       	ldi	r24, 0x0D	; 13
    e8b2:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    e8b6:	88 e1       	ldi	r24, 0x18	; 24
    e8b8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
    e8bc:	86 e0       	ldi	r24, 0x06	; 6
    e8be:	80 93 c2 00 	sts	0x00C2, r24
    // Set up the UART - We're going minimalist for the bootloader, so code is copied from other files!
    init_uart();

    // Request input from the user. Space to go back to the app, '1' to go into program mode
    
    usart_transmit_str_P(PSTR("\x1b[2JAVR CART TERMINAL BOOTLOADER\r\nPress space for menu or '1' to flash\r\n"));
    e8c2:	8a e2       	ldi	r24, 0x2A	; 42
    e8c4:	91 ee       	ldi	r25, 0xE1	; 225
    e8c6:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
}

char usart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    e8ca:	80 91 c0 00 	lds	r24, 0x00C0
    e8ce:	87 ff       	sbrs	r24, 7
    e8d0:	fc cf       	rjmp	.-8      	; 0xe8ca <main+0x30>
	/* Get and return received data from buffer */
	return UDR0;
    e8d2:	80 91 c6 00 	lds	r24, 0x00C6
    usart_transmit_str_P(PSTR("\x1b[2JAVR CART TERMINAL BOOTLOADER\r\nPress space for menu or '1' to flash\r\n"));

    char input; 
    do {
      input = usart_receive();
    } while((input != '1') && (input != ' '));
    e8d6:	81 33       	cpi	r24, 0x31	; 49
    e8d8:	21 f0       	breq	.+8      	; 0xe8e2 <main+0x48>
    e8da:	80 32       	cpi	r24, 0x20	; 32
    e8dc:	b1 f7       	brne	.-20     	; 0xe8ca <main+0x30>

    if(input == ' ') {
      // Run the MBC application!
    asm("jmp 0000");
    e8de:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    }

    usart_transmit_str_P(PSTR("YMODEM protocol used. Select file within 10 secs else reset\r\n"));
    e8e2:	8c ee       	ldi	r24, 0xEC	; 236
    e8e4:	90 ee       	ldi	r25, 0xE0	; 224
    e8e6:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
    e8ea:	20 e3       	ldi	r18, 0x30	; 48
    e8ec:	45 e8       	ldi	r20, 0x85	; 133
    e8ee:	52 e0       	ldi	r21, 0x02	; 2
}

void usart_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)));
    e8f0:	80 91 c0 00 	lds	r24, 0x00C0
    e8f4:	85 ff       	sbrs	r24, 5
    e8f6:	fc cf       	rjmp	.-8      	; 0xe8f0 <main+0x56>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    e8f8:	20 93 c6 00 	sts	0x00C6, r18
    e8fc:	80 e1       	ldi	r24, 0x10	; 16
    e8fe:	97 e2       	ldi	r25, 0x27	; 39
    e900:	fa 01       	movw	r30, r20
    e902:	31 97       	sbiw	r30, 0x01	; 1
    e904:	f1 f7       	brne	.-4      	; 0xe902 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    e906:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    e908:	d9 f7       	brne	.-10     	; 0xe900 <main+0x66>
    e90a:	2f 5f       	subi	r18, 0xFF	; 255
    }

    usart_transmit_str_P(PSTR("YMODEM protocol used. Select file within 10 secs else reset\r\n"));

    // Put a 10 second countdown on the screen so the user can select the file to send
    for(uint8_t i=0; i<10; i++) {
    e90c:	2a 33       	cpi	r18, 0x3A	; 58
    e90e:	81 f7       	brne	.-32     	; 0xe8f0 <main+0x56>
      _delay_ms(1000);
    }

    // Assume that if the user didn't press space, they pressed '1'!
    // Now flash the chip
    uint32_t fileSize = 0;
    e910:	19 82       	std	Y+1, r1	; 0x01
    e912:	1a 82       	std	Y+2, r1	; 0x02
    e914:	1b 82       	std	Y+3, r1	; 0x03
    e916:	1c 82       	std	Y+4, r1	; 0x04
    pageAddress = 0;
    e918:	10 92 0a 06 	sts	0x060A, r1
    e91c:	10 92 09 06 	sts	0x0609, r1
    wordsInBuff = 0;
    e920:	10 92 0d 06 	sts	0x060D, r1
    writeErrorFlag = 0;
    e924:	10 92 06 06 	sts	0x0606, r1
    writeErrorAddress = 0;
    e928:	10 92 0c 06 	sts	0x060C, r1
    e92c:	10 92 0b 06 	sts	0x060B, r1
    ymodem_receive(buff_add, &fileSize);
    e930:	8f e1       	ldi	r24, 0x1F	; 31
    e932:	94 e7       	ldi	r25, 0x74	; 116
    e934:	be 01       	movw	r22, r28
    e936:	6f 5f       	subi	r22, 0xFF	; 255
    e938:	7f 4f       	sbci	r23, 0xFF	; 255
    e93a:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <ymodem_receive>

    // Put final buffer write here
    if(bytesInBuff) {
    e93e:	80 91 00 01 	lds	r24, 0x0100
    e942:	88 23       	and	r24, r24
    e944:	31 f0       	breq	.+12     	; 0xe952 <main+0xb8>
      do_flash_write(pageAddress);
    e946:	80 91 09 06 	lds	r24, 0x0609
    e94a:	90 91 0a 06 	lds	r25, 0x060A
    e94e:	0e 94 98 73 	call	0xe730	; 0xe730 <do_flash_write>
    }

    if(writeErrorFlag) {
    e952:	80 91 06 06 	lds	r24, 0x0606
    e956:	88 23       	and	r24, r24
    e958:	79 f1       	breq	.+94     	; 0xe9b8 <main+0x11e>
      usart_transmit_str_P(PSTR("\r\nFlash Wr Errors:"));
    e95a:	89 ed       	ldi	r24, 0xD9	; 217
    e95c:	90 ee       	ldi	r25, 0xE0	; 224
    e95e:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
      usart_transmit_int32(writeErrorFlag);
    e962:	60 91 06 06 	lds	r22, 0x0606
    e966:	70 e0       	ldi	r23, 0x00	; 0
    e968:	80 e0       	ldi	r24, 0x00	; 0
    e96a:	90 e0       	ldi	r25, 0x00	; 0
    e96c:	0e 94 f6 70 	call	0xe1ec	; 0xe1ec <usart_transmit_int32>
      usart_transmit_str_P(PSTR("\r\n"));
    e970:	86 ed       	ldi	r24, 0xD6	; 214
    e972:	90 ee       	ldi	r25, 0xE0	; 224
    e974:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
      usart_transmit_str_P(PSTR("First error in flash write @:"));
    e978:	88 eb       	ldi	r24, 0xB8	; 184
    e97a:	90 ee       	ldi	r25, 0xE0	; 224
    e97c:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
      usart_transmit_int32(writeErrorAddress);
    e980:	60 91 0b 06 	lds	r22, 0x060B
    e984:	70 91 0c 06 	lds	r23, 0x060C
    e988:	80 e0       	ldi	r24, 0x00	; 0
    e98a:	90 e0       	ldi	r25, 0x00	; 0
    e98c:	0e 94 f6 70 	call	0xe1ec	; 0xe1ec <usart_transmit_int32>
      usart_transmit_str_P(PSTR("\r\n"));
    e990:	85 eb       	ldi	r24, 0xB5	; 181
    e992:	90 ee       	ldi	r25, 0xE0	; 224
    e994:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
      usart_transmit_str_P(PSTR("Last error in flash write @: "));
    e998:	87 e9       	ldi	r24, 0x97	; 151
    e99a:	90 ee       	ldi	r25, 0xE0	; 224
    e99c:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
      usart_transmit_int32(writeErrorAddressLast);
    e9a0:	60 91 0e 06 	lds	r22, 0x060E
    e9a4:	70 91 0f 06 	lds	r23, 0x060F
    e9a8:	80 e0       	ldi	r24, 0x00	; 0
    e9aa:	90 e0       	ldi	r25, 0x00	; 0
    e9ac:	0e 94 f6 70 	call	0xe1ec	; 0xe1ec <usart_transmit_int32>
      usart_transmit_str_P(PSTR("\r\n"));
    e9b0:	84 e9       	ldi	r24, 0x94	; 148
    e9b2:	90 ee       	ldi	r25, 0xE0	; 224
    e9b4:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
    }

    // Put a finished message in
    usart_transmit_str_P(PSTR("\r\nFlash complete. Press spacebar.\r\n"));
    e9b8:	80 e7       	ldi	r24, 0x70	; 112
    e9ba:	90 ee       	ldi	r25, 0xE0	; 224
    e9bc:	0e 94 e9 70 	call	0xe1d2	; 0xe1d2 <usart_transmit_str_P>
}

char usart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    e9c0:	80 91 c0 00 	lds	r24, 0x00C0
    e9c4:	87 ff       	sbrs	r24, 7
    e9c6:	fc cf       	rjmp	.-8      	; 0xe9c0 <main+0x126>
	/* Get and return received data from buffer */
	return UDR0;
    e9c8:	80 91 c6 00 	lds	r24, 0x00C6
void wait_for_continue() {

  char input; 
  do {
    input = usart_receive();
  } while(input != ' ');
    e9cc:	80 32       	cpi	r24, 0x20	; 32
    e9ce:	c1 f7       	brne	.-16     	; 0xe9c0 <main+0x126>
    wait_for_continue();

  }

  // Run the MBC application!
  asm("jmp 0000");
    e9d0:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    e9d4:	ff cf       	rjmp	.-2      	; 0xe9d4 <main+0x13a>

0000e9d6 <__mulsi3>:
    e9d6:	62 9f       	mul	r22, r18
    e9d8:	d0 01       	movw	r26, r0
    e9da:	73 9f       	mul	r23, r19
    e9dc:	f0 01       	movw	r30, r0
    e9de:	82 9f       	mul	r24, r18
    e9e0:	e0 0d       	add	r30, r0
    e9e2:	f1 1d       	adc	r31, r1
    e9e4:	64 9f       	mul	r22, r20
    e9e6:	e0 0d       	add	r30, r0
    e9e8:	f1 1d       	adc	r31, r1
    e9ea:	92 9f       	mul	r25, r18
    e9ec:	f0 0d       	add	r31, r0
    e9ee:	83 9f       	mul	r24, r19
    e9f0:	f0 0d       	add	r31, r0
    e9f2:	74 9f       	mul	r23, r20
    e9f4:	f0 0d       	add	r31, r0
    e9f6:	65 9f       	mul	r22, r21
    e9f8:	f0 0d       	add	r31, r0
    e9fa:	99 27       	eor	r25, r25
    e9fc:	72 9f       	mul	r23, r18
    e9fe:	b0 0d       	add	r27, r0
    ea00:	e1 1d       	adc	r30, r1
    ea02:	f9 1f       	adc	r31, r25
    ea04:	63 9f       	mul	r22, r19
    ea06:	b0 0d       	add	r27, r0
    ea08:	e1 1d       	adc	r30, r1
    ea0a:	f9 1f       	adc	r31, r25
    ea0c:	bd 01       	movw	r22, r26
    ea0e:	cf 01       	movw	r24, r30
    ea10:	11 24       	eor	r1, r1
    ea12:	08 95       	ret

0000ea14 <__udivmodsi4>:
    ea14:	a1 e2       	ldi	r26, 0x21	; 33
    ea16:	1a 2e       	mov	r1, r26
    ea18:	aa 1b       	sub	r26, r26
    ea1a:	bb 1b       	sub	r27, r27
    ea1c:	fd 01       	movw	r30, r26
    ea1e:	0d c0       	rjmp	.+26     	; 0xea3a <__udivmodsi4_ep>

0000ea20 <__udivmodsi4_loop>:
    ea20:	aa 1f       	adc	r26, r26
    ea22:	bb 1f       	adc	r27, r27
    ea24:	ee 1f       	adc	r30, r30
    ea26:	ff 1f       	adc	r31, r31
    ea28:	a2 17       	cp	r26, r18
    ea2a:	b3 07       	cpc	r27, r19
    ea2c:	e4 07       	cpc	r30, r20
    ea2e:	f5 07       	cpc	r31, r21
    ea30:	20 f0       	brcs	.+8      	; 0xea3a <__udivmodsi4_ep>
    ea32:	a2 1b       	sub	r26, r18
    ea34:	b3 0b       	sbc	r27, r19
    ea36:	e4 0b       	sbc	r30, r20
    ea38:	f5 0b       	sbc	r31, r21

0000ea3a <__udivmodsi4_ep>:
    ea3a:	66 1f       	adc	r22, r22
    ea3c:	77 1f       	adc	r23, r23
    ea3e:	88 1f       	adc	r24, r24
    ea40:	99 1f       	adc	r25, r25
    ea42:	1a 94       	dec	r1
    ea44:	69 f7       	brne	.-38     	; 0xea20 <__udivmodsi4_loop>
    ea46:	60 95       	com	r22
    ea48:	70 95       	com	r23
    ea4a:	80 95       	com	r24
    ea4c:	90 95       	com	r25
    ea4e:	9b 01       	movw	r18, r22
    ea50:	ac 01       	movw	r20, r24
    ea52:	bd 01       	movw	r22, r26
    ea54:	cf 01       	movw	r24, r30
    ea56:	08 95       	ret

0000ea58 <_exit>:
    ea58:	f8 94       	cli

0000ea5a <__stop_program>:
    ea5a:	ff cf       	rjmp	.-2      	; 0xea5a <__stop_program>
