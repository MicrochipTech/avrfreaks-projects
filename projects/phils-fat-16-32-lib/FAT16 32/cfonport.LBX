Comment = Compiled LIB file, no comment included

Copyright = Phil
Comment = Reference Material
Comment = At Attachment With Packet Interface Extension(ata / Atapi -4)
Comment = I Have Tried To Keep The Names Of Registers And Fields The Same As The Reference Material
Comment = Sandisk Compact Flash Product Manual Version 10.8
Comment = Driver For Compact Flash in PC Card Memory Mode Connected To Non Extended I/O Ports.
Comment = Does not work on Extended Ports
Libversion = 1.00
Date = 1 June 2005
Statement = Use At Own Risk.
History = No Known Bugs.
.equ Devlba = &B01000000                                    'LBA mode and device 0 (master). Must be LBA mode.
.equ Atacommand_reg = 7                                     'write only
.equ Atacylinderhigh_reg = 5                                'write only
.equ Atacylinderlow_reg = 4
.equ Atadata_reg = 0
.equ Atadevicehead_reg = 6
.equ Ataerror_reg = 1                                       'read only
.equ Atafeatures_reg = 1                                    'write only
.equ Atasectorcount_reg = 2
.equ Atasectornumber_reg = 3
.equ Atastatus_reg = 7                                      'read only
.equ Atadevicecontrol_reg = 6                               'write only, the only useful thing here is reset, which may not be needed
.equ Ataaltstatus_reg = 6                                   'read only Not used, the same info is in the Atastatus_reg
.equ Bsy = 7                                                'Busy bit 7
.equ Drdy = 6                                               'Device Ready bit 6 (not used)
.equ Drq = 3                                                'Data Request bit 3
.equ Errr = 0                                               'Error bit 0
'ATA commands
.equ Standbyimmediate = &HE0
.equ Readsectors = &H20
.equ Identifydevice = &HEC
.equ Writesectors = &H30
'error codes
.equ Time_out_err = 1                                       'Time Out
.equ Word_xfer_err = 2                                      'transfered words not equal to expected
.equ Ata_status_err = 3                                     'status register has error bit set
'For use on extended ports change all:-
'"out ExtI/O, rX" to "sts ExtI/O, rX"
'"in rX, ExtI/O" to lds rX, ExtI/O"
'"cbi ExtI/O, const" to "lds r23, ExtI/O" + "cbr r23, 2^const" + "sts ExtI/O, r23"
'"sbi ExtI/O, const" to "lds r23, ExtI/O" + "sbr r23, 2^const" + "sts ExtI/O, r23"
[get_sec]
'***************************************************************
'Get da Sector Data from the CF and Stick it in da RAM
'***************************************************************
'Sub Get_Sec(buffer() , Byval Sec_expected As Byte )
'entry point if registers need to be loaded by soft stack
Get_sec:
.OBJ 81A8
.OBJ 81B9
.OBJ 918C
.OBJ 81AA
.OBJ 81BB
'entry point if registers pre loaded
'r24 = Sector Counter (Sec_expected)
'Xl & Xh = (X register pair) points to buffer
[getsec]
$EXTERNAL Wait4bsy , Wait4drq , Setaddress , Chk4nodrq
Getsec:
.OBJ 2400
.OBJ 2411
rcall Wait4bsy                                              'Wait for busy to clear
'Now drive is not busy, and there is no error
.OBJ 2799
Get_sec_drq:
rcall wait4drq
'Now drive is not busy, and there is no error, and it has issued a Data Request
.OBJ E040
rcall Setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
Get_sec_next:
*cbi Contport, Cfoe                                          'make CF OE active
.OBJ 0
.OBJ 0
*in r20, Lo8pin                                              'Get lo 8 byte
*sbi Contport, Cfoe                                          'make CF OE not active
.OBJ 934D
*cbi Contport, Cfoe                                          'make CF OE active
.OBJ 0
.OBJ 0
*in r20, lo8pin                                              'Get hi 8 byte
*sbi Contport, Cfoe                                          'make CF OE not active
.OBJ 934D
.OBJ 9593
brne Get_sec_next                                           'More words to go
*sbi Contport, Cfce1                                         'make CF CE1 not active
.OBJ 958A
brne Get_sec_drq                                            'More sectors to go
rcall Chk4nodrq                                             'Last check for Data Request
.OBJ 9508
[end]
[read_sec]
'***************************************************************
'issue Read Sector command to drive
'***************************************************************
'Sub Read_sec(lbasector As Long , Byval Sec2xfer As Byte)
'entry point if registers need to be loaded by soft stack
Read_sec:
.OBJ 81A8
.OBJ 81B9
.OBJ 918C
.OBJ 81AA
.OBJ 81BB
.OBJ 910D
.OBJ 911D
.OBJ 912D
.OBJ 913C
'entry point if registers pre loaded
'r24 = sectors to transfer, r16 to r19 = lbasector
[Readsec]
$EXTERNAL Wait4bsy, Setaddress, dataoutput
Readsec:
.OBJ 2400
.OBJ 2411
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ 6430
.OBJ E046
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
*Out Lo8port , R19                                          'r19 to Atadevicehead_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ E042
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
*out Lo8port, r24                                           'r24 to Atasectorcount_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
'send lbasector to LBA registers
.OBJ E043
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
*out Lo8port, R16                                           'r16 to Atasectornumber_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
.OBJ E044
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
*out Lo8port, r17                                           'r17 to Atacylinderlow_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
.OBJ E045
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
*Out Lo8port , R18                                          'r18 to Atacylinderhigh_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
'issue command
.OBJ E047
rcall setaddress
*cbi Contport, Cfce1                                         'make CF CE1 active
.OBJ E280
*out Lo8port, r24                                           'r24 to Atacommand_reg
rcall dataoutput                                            'output and strobe write
*sbi Contport, Cfce1                                         'make CF CE1 not active
.OBJ 9508
[end]
[initdrive]
'***************************************************************
'Init drive.
'***************************************************************
'Init ports and drive
$EXTERNAL Dataoutput
Initdrive:
rcall datainput                                             'make data bus an input
*Ldi R24 , Adjustedcontmask                                  'make address 0 to 3 & CF CE1 & OE & WE outputs
*Out Contdd , R24
*Sbi Contport , Cfce1                                        'make CF CE1 not active
*Sbi Contport , Cfoe                                         'make CF OE not active
*Sbi Contport , Cfwe                                         'make CF WE not active
.OBJ 9508
[end]
[put_sec]
'***************************************************************
'Put da Sector Data from the RAM and Stick it in da CF
'***************************************************************
'Sub Put_sec(buffer() as Byte , Byval Sec_expected As Byte )
'entry point if registers need to be loaded by soft stack
Put_sec:
.OBJ 81A8
.OBJ 81B9
.OBJ 918C
.OBJ 81AA
.OBJ 81BB
'entry point if registers pre loaded
'r24 = Sector Counter (Sec_expected)
'Xl & Xh = (X register pair) points to buffer
[Putsec]
$EXTERNAL Wait4bsy, wait4drq, Setaddress, dataoutput, Chk4nodrq
Putsec:
.OBJ 2400
.OBJ 2411
rcall Wait4bsy                                              'Wait for busy to clear
'Now drive is not busy, and there is no error
.OBJ 2799
Put_sec_chk_drq:
rcall wait4drq
'Now drive is not busy, and there is no error, and it has issued a Data Request
.OBJ E040
rcall Setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
Put_sec_next:
.OBJ 914D
*Out Lo8port , R20
rcall dataoutput                                            'output and strobe write
.OBJ 914D
*Out lo8port , R20
rcall dataoutput                                            'output and strobe write
.OBJ 9593
brne put_sec_next                                           'More words to go
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ 958A
brne put_sec_chk_drq                                        'More sectors to go
rcall Chk4nodrq                                             'Last check for Data Request
.OBJ 9508
[end]
[write_sec]
'***************************************************************
'issue Write Sector command to drive
'***************************************************************
'Sub Write_sec(lbasector As Long , Byval Sec2xfer As Byte)
'entry point if registers need to be loaded by soft stack
Write_sec:
.OBJ 81A8
.OBJ 81B9
.OBJ 918C
.OBJ 81AA
.OBJ 81BB
.OBJ 910D
.OBJ 911D
.OBJ 912D
.OBJ 913C
'entry point if registers pre loaded
'r24 = sectors to transfer, r16 to r19 = lbasector
[Writesec]
$EXTERNAL Wait4bsy, setaddress, dataoutput
Writesec:
.OBJ 2400
.OBJ 2411
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ 6430
'set address
.OBJ E046
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Out Lo8port , R19                                          'r19 to Atadevicehead_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ E042
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Out Lo8port , R24                                          'r24 to Atasectorcount_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
'send lbasector to LBA registers
.OBJ E043
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Out Lo8port , R16                                          'r16 to Atasectornumber_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ E044
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Out Lo8port , R17                                          'r17 to Atacylinderlow_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ E045
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Out Lo8port , R18                                          'r18 to Atacylinderhigh_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
'issue command
.OBJ E047
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
.OBJ E380
*Out Lo8port , R24                                          'r24 to Atacommand_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ 9508
[end]
[wait4bsy]
'***************************************************************
'Wait for Busy to clear (with timeout)
'***************************************************************
'waits for the bsy bit in the ATA Status register to clear.
'for non rotaing media, timeout on iteration count is in r0, r1.
'r21 is used for error code
'r20 contains the latest ticktock (second) & status register
$EXTERNAL setaddress, Cfonbuserror
Wait4bsy:
.OBJ E051
.OBJ E047
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
Wait4bsy1:
.OBJ 940A
brne Wait4bsy_chk_status
.OBJ 941A
breq Cfonbuserror                                           'If equal, then we have timed out
Wait4bsy_chk_status:
*Cbi Contport , Cfoe                                         'make CF OE active
.OBJ 0
.OBJ 0
*In R20 , Lo8pin                                             'Status Register to r20
*Sbi Contport , Cfoe                                         'make CF OE not active
.OBJ FD47
rjmp Wait4bsy                                               'Loop to Wait4bsy
'rjmp Wait4bsy1                                               'Loop to Wait4bsy
.OBJ E053
.OBJ FD40
rjmp Cfonbuserror                                           'then never come back
'Now drive is not busy, and there is no error
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ 9508
[end]
[wait4drq]
'***************************************************************
'Wait for data request to set (with timeout)
'***************************************************************
'waits for the drq bit in the ATA Status register to be set.
'for non rotaing media, timeout on iteration count is in r0, r1
'r21 is used for error code
'r20 contains the latest ticktock (second) & status register
$EXTERNAL setaddress, Cfonbuserror
Wait4drq:
.OBJ E051
.OBJ E047
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
Wait4drq1:
.OBJ 940A
brne Wait4drq_chk_status
.OBJ 941A
breq Cfonbuserror                                           'If equal, then we have timed out
Wait4drq_chk_status:
*Cbi Contport , Cfoe                                         'make CF OE active
.OBJ 0
.OBJ 0
*In R20 , Lo8pin                                             'Status Register to r20
*Sbi Contport , Cfoe                                         'make CF OE not active
.OBJ FF43
rjmp Wait4drq                                               'Loop to Wait4drq
'rjmp Wait4drq1                                               'Loop to Wait4drq
.OBJ E053
.OBJ FD40
rjmp Cfonbuserror                                           'then never come back
'Now drive has issued a data request, and there is no error
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ 9508
[end]
[Chk4nodrq]
'***************************************************************
'Check for no Data Request after last data transfer
'***************************************************************
$EXTERNAL Cfonbuserror
Chk4nodrq:
'Last check for Data Request
.OBJ E052
.OBJ E047
rcall setaddress
*Cbi Contport , Cfce1                                        'make CF CE1 active
*Cbi Contport , Cfoe                                         'make CF CE1 active
.OBJ 0
.OBJ 0
*In R20 , Lo8pin                                             'ATA Status Register to r20
*Sbi Contport , Cfoe                                         'make CF OE not active
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ FD43
rjmp Cfonbuserror                                           'Something is wrong
.OBJ E053
.OBJ FD40
rjmp Cfonbuserror                                           'then never come back
.OBJ 9508
[end]
[Cfonbuserror]
'***************************************************************
'Compact Flash on bus error
'***************************************************************
'stores error code from r21 to sram variable errorcode
Cfonbuserror:
*Sbi Contport , Cfce1                                        'make CF CE1 not active
sts {errorcode}, r21                                        'Store error code
jmp errorhandle                                             'and jump to error handler. Fatal error, never to return
[end]
[identify_device]
'***************************************************************
'Identify Device
'***************************************************************
'issues an identify device command, and sticks the data in the buffer pointed to by X
$EXTERNAL Wait4bsy, setaddress, dataoutput, Wait4bsy, Getsec
Identify_device:
.OBJ 2400
.OBJ 2411
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ E046
rcall setaddress                                            'set the address
*Cbi Contport , Cfce1                                        'make CF CE1 active
.OBJ E480
*Out Lo8port , R24                                          'r24 to Atadevicehead_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
rcall Wait4bsy                                              'Wait for busy to clear
.OBJ E047
rcall setaddress                                            'set the address
*Cbi Contport , Cfce1                                        'make CF CE1 active
.OBJ EE8C
*Out Lo8port , R24                                          'r24 to Atacommand_reg
rcall dataoutput                                            'output and strobe write
*Sbi Contport , Cfce1                                        'make CF CE1 not active
.OBJ E081
'X still points to the buffer
rcall Getsec                                                'get the data
.OBJ 9508
[end]
[setaddress]
'***************************************************************
'Set address
'***************************************************************
'address is passed in r20
Setaddress:
*In r23, Contport                                            'copy of control port in r23
*Cbr r23, Adjustedaddressmask                                'clear space for address
.OBJ 2B47
*Out Contport , R20                                         'out address
.OBJ 9508
[end]
[dataoutput]
'***************************************************************
'Dataoutput
'***************************************************************
'makes the data port = output, and then strobes the write pin, and then makes data port = input again
Dataoutput:
.OBJ EF4F
*Out Lo8dd , R20                                            'make lo 8 port output
*Cbi Contport , Cfwe                                         'make CF WE active
.OBJ 0
.OBJ 0
*Sbi Contport , Cfwe                                         'make CF WE not active
'***************************************************************
'Datainput
'***************************************************************
'makes the data port = input
Datainput:
.OBJ 2744
*Out Lo8dd , R20                                            'make lo 8 port input
.OBJ 9508
[end]
