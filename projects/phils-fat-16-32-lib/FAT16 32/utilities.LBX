Comment = Compiled LIB file, no comment included

Copyright = Phil
Libversion = 0.05
Date = 1 March 2004
Statement = Use At Own Risk.
History = No Known Bugs.
[alpha_num_filt]
'***************************************************************
'Alpha Numeric Filter Function
'***************************************************************
$external Alphanumfilt
'filters in only alpha numeric characters
'Function Alpha_num_filt(unfilteredstr As String)as String
Alpha_num_filt:
.OBJ 81E8
.OBJ 81F9
.OBJ 81AA
.OBJ 81BB
rcall Alphanumfilt                                          'filter string
.OBJ 930C
.OBJ 9508
[end]
[alphanumfilt]
'***************************************************************
'Alpha Numeric Filter
'***************************************************************
Alphanumfilt:
'source string pointed to by Z
'destination string pointed to by X
'Filters in only 0-1, a-z, A-Z
'NO END OF STRING CHARACTER IN DESTINATION. MUST APPEND IN APPLICATION IF NEEDED
.OBJ 9101
.OBJ 2300
breq Alphanumfiltend                                        'finished
.OBJ 370B
brsh Alphanumfilt                                           'if so get next (filter out)
.OBJ 3300
brlo Alphanumfilt                                           'if so get next (filter out)
.OBJ 330A
brlo Alphanumfiltok                                         'filter in "0" to "9"
.OBJ 3601
brsh Alphanumfiltok                                         'filter in "a" to "z"
.OBJ 350B
brsh Alphanumfilt                                           'if so get next (filter out)
.OBJ 3401
brlo Alphanumfilt                                           'if so get next (filter out)
'"A" to "Z" filtered in
Alphanumfiltok:
.OBJ 930D
rjmp Alphanumfilt                                           'get next
Alphanumfiltend:
.OBJ 9508
[end]
[mem2mem]
'***************************************************************
'Memory to Memory
'***************************************************************
'Transfers memory locations to memory locations, e.g. byte buffer to word location, or long location.
'Also word to long, BUT, the words MUST be declared wordlo wordhi in that order, with nothing in-between.
'X register pair points to source
'Z register pair points to destination
'r21 contains the number of locations to transfer, e.g. 2 for word, 4 for long
'r20 is used as temp storage.
'The registers must be loaded beforehand.
'Very easy to crap all over ram.
Mem2mem:
.OBJ 955A
brmi Mem2mem_finish                                         'if r21 = -ve, nothing to do, or finished
.OBJ 914D
.OBJ 9341
rjmp Mem2mem                                                'next
Mem2mem_finish:
.OBJ 9508
[end]
[swapbytesofword]
'***************************************************************
'Swap Bytes of a Word
'***************************************************************
'Swaps the two bytes of a word. Turns little endian to big endian and vice a versa
'r21 contains the number of word, that is WORDS, not bytes
'X points to what to swap
'r16 and r17, are used as temp storage.
Swapbytesofword:
.OBJ 955A
brmi swapbytesofword_finish                                 'if r21 = -ve, nothing to do, or finished
.OBJ 910D
.OBJ 911C
.OBJ 930C
.OBJ 931E
.OBJ 9612
rjmp Swapbytesofword
Swapbytesofword_finish:
.OBJ 9508
[end]
[mod32base2]
'***************************************************************
'mod32base2
'***************************************************************
'returns mod base 2 e.g. 1, 2, 4, 8,... 512, 1024 of a number
'Base 2 conformance is NOT checked. Faster than mod function (which calls _div32)
'Number is passed in r16 to r19, Mod is passed in r20 to r23
'Result  r20 to r23.
Mod32base2:
.OBJ 5041
.OBJ 4050
.OBJ 4060
.OBJ 4070
.OBJ 2340
.OBJ 2351
.OBJ 2362
.OBJ 2373
.OBJ 9508
[end]
[mod16base2]
'***************************************************************
'mod16base2
'***************************************************************
'returns mod base 2 e.g. 1, 2, 4, 8,... 512, 1024 of a number
'Base 2 conformance is NOT checked. Faster than mod function (which calls _div16)
'Number is passed in r16 to r17, Mod is passed in r20 to r21
'Result  r20 to r21.
Mod16base2:
.OBJ 5041
.OBJ 4050
.OBJ 2340
.OBJ 2351
.OBJ 9508
[end]
[mpy32base2]
'***************************************************************
'Multiply 32 bit unsigned by a base2 number
'***************************************************************
Mpy32base2:
'any 32 bit number is passed in r16-r19
'mod32 number is passed in r20-r23
'result is passed back in r16-r19
.OBJ 5040
.OBJ 4050
.OBJ 4060
.OBJ 4070
breq Mpy32base2res0                                         'check for 0
Mpy32base2_1:
.OBJ 9576
.OBJ 9567
.OBJ 9557
.OBJ 9547
brcs Mpy32base2end                                          'if carry set, then we have finished
.OBJ F00
.OBJ 1F11
.OBJ 1F22
.OBJ 1F33
rjmp Mpy32base2_1                                           'again
Mpy32base2res0:
.OBJ 2700
.OBJ 2711
.OBJ 2722
.OBJ 2733
Mpy32base2end:
.OBJ 9508
[end]
[mpy16base2]
'***************************************************************
'Multiply 16 bit unsigned by a base2 number
'***************************************************************
Mpy16base2:
'any 16 bit number is passed in r16-r17
'mod16 number is passed in r20-r21
'result is passed back in r16-r17
.OBJ 5040
.OBJ 4050
breq Mpy16base2res0                                         'check for 0
Mpy16base2_1:
.OBJ 9556
.OBJ 9547
brcs Mpy16base2end                                          'if carry set, then we have finished
.OBJ F00
.OBJ 1F11
rjmp Mpy16base2_1                                           'again
Mpy16base2res0:
.OBJ 2700
.OBJ 2711
Mpy16base2end:
.OBJ 9508
[end]
[div32base2]
'***************************************************************
'Divide 32 bit unsigned by a base2 number
'***************************************************************
Div32base2:
'any 32 bit number is passed in r16-r19
'mod32 number is passed in r20-r23
'result is passed back in r16-r19
.OBJ 5040
.OBJ 4050
.OBJ 4060
.OBJ 4070
breq Div32base2end                                          'check for 0
Div32base2_1:
.OBJ 9576
.OBJ 9567
.OBJ 9557
.OBJ 9547
brcs Div32base2end                                          'if carry set, then we have finished
.OBJ 9536
.OBJ 9527
.OBJ 9517
.OBJ 9507
rjmp Div32base2_1                                           'again
Div32base2end:
.OBJ 9508
[end]
[div16base2]
'***************************************************************
'Divides 16 bit unsigned by a base2 number
'***************************************************************
Div16base2:
'any 16 bit number is passed in r16-r17
'mod16 number is passed in r20-r21
'result is passed back in r16-r17
.OBJ 5040
.OBJ 4050
breq Div16base2end                                          'check for 0
Div16base2_1:
.OBJ 9556
.OBJ 9547
brcs Div16base2end                                          'if carry set, then we have finished
.OBJ 9516
.OBJ 9507
rjmp Div16base2_1                                           'again
Div16base2end:
.OBJ 9508
[end]
[allocatesoftstack]
Allocatesoftstack:
'allocate the variable pointed to by X to softstack
.OBJ 93BA
.OBJ 93AA
.OBJ 9508
[end]
[allocateframe]
Allocateframe:
'allocates 1 variable to frame
'r21 = number of bytes to allocate
.OBJ 925A
.OBJ 924A
.OBJ E45
.OBJ E050
.OBJ 1E55
.OBJ 9508
[end]
[deallocateframe]
Deallocateframe:
'de allocates 1 variable from frame
'r21 = number of bytes to de allocate
.OBJ 1A45
.OBJ E050
.OBJ A55
[deallocatesoftstack]
Deallocatesoftstack:
.OBJ 9622
.OBJ 9508
[end]
'The following shows how and why and when to use the stack and frame.
'Allocatesoftstack and Deallocatesoftstack are probably better just used within subroutine or function rather than jumping here.
'They are just here so I don't forget
'Function Add_1(number) As Byte
'ldd r26, Y+0
'ldd r27, y+1                                                'address of number to X
'ld r16, X                                                   'number to r16
'inc r16                                                     'increment r16
'ldd r26, y+2                                                'address of add_1 to X
'ldd r27, y+3
'st X, r16                                                   'store
'ret
'End Function
'Function Add_2(number) As Byte
'ldd r26, Y+0
'ldd r27, y+1                                                'address of number to X
'ld r16, X                                                   'number to r16
'inc r16                                                     'increment r16
'inc r16                                                     'increment r16
'ldd r26, y+2                                                'address of add_1 to X
'ldd r27, y+3
'st X, r16                                                   'store
'ret
'End Function
'Function Add_3(number As Byte) As Byte                      'adds 3 by calling function add_1 & add_2
'ldi r21, 1                                                  'allocate a 1 byte local
'!Call Allocateframe
'ldd r26, Y+0
'ldd r27, y+1                                                'address of local to X
'!call allocatesoftstack                                     '1st passed parameter (result of function to be called)
''ldd r26, Y+2 WRONG                                         '+2 because 1 word address has been allocated before
''ldd r27, y+3 WRONG                                         'address of number to X
'ldd r26, Y+4
'ldd r27, y+5                                                'address of number to X
'!call allocatesoftstack                                     '2nd passed parameter
'!call add_1                                                 'call function
''result of add_1 is stored in the 1 byte local
'!call Deallocatesoftstack                                   'two passed parameters
'!call Deallocatesoftstack                                   'two de allocates
'ldd r26, Y+4
'ldd r27, y+5                                                'address of this function to X
'!call allocatesoftstack                                     '1st passed parameter (result of function to be called)
''ldd r26, Y+0 WRONG                                         '+2 because 1 word address has been allocated before
''ldd r27, y+1 WRONG                                         'address of local to X
'ldd r26, Y+2
'ldd r27, y+3                                                'address of local to X
'!call allocatesoftstack                                     '2nd passed parameter
'!call add_2                                                 'call function
'!call Deallocatesoftstack                                   'two passed parameters
'!call Deallocatesoftstack                                   'two de allocates
'ldi r21, 1                                                  'de allocate the 1 byte local
'!call deallocateframe
'ret
'End Function
