Copyright = Phil
Libversion = 0.05
Date = 1 March 2004
Statement = Use At Own Risk.
History = No Known Bugs.

[alpha_num_filt]
'***************************************************************
'Alpha Numeric Filter Function
'***************************************************************
$external Alphanumfilt
'filters in only alpha numeric characters
'Function Alpha_num_filt(unfilteredstr As String)as String
Alpha_num_filt:
ldd Zl, Y+0
ldd Zh, Y+1                                                 'Z register pair points to the unfiltered string
ldd Xl, Y+2
ldd Xh, Y+3                                                 'X register pair points to the filterered string
rcall Alphanumfilt                                          'filter string
st X, r16                                                   'append end of string
ret
[end]

[alphanumfilt]
'***************************************************************
'Alpha Numeric Filter
'***************************************************************
Alphanumfilt:
'source string pointed to by Z
'destination string pointed to by X
'Filters in only 0-1, a-z, A-Z
'NO END OF STRING CHARACTER IN DESTINATION. MUST APPEND IN APPLICATION IF NEEDED
ld r16, Z+                                                  'get character in r16
tst r16                                                     'is character = 0 (end of string)
breq Alphanumfiltend                                        'finished
cpi r16, &H7B                                               'is chracter > "z"
brsh Alphanumfilt                                           'if so get next (filter out)
cpi r16, &H30                                               'is character < "0"
brlo Alphanumfilt                                           'if so get next (filter out)
cpi r16, &H3A                                               'is character < "9"
brlo Alphanumfiltok                                         'filter in "0" to "9"
cpi r16, &H61                                               'is character > "a"
brsh Alphanumfiltok                                         'filter in "a" to "z"
cpi r16, &H5B                                               'is character > "Z"
brsh Alphanumfilt                                           'if so get next (filter out)
cpi r16, &H41                                               'is character < "A"
brlo Alphanumfilt                                           'if so get next (filter out)
'"A" to "Z" filtered in
Alphanumfiltok:
st X+, r16
rjmp Alphanumfilt                                           'get next
Alphanumfiltend:
ret
[end]

[mem2mem]
'***************************************************************
'Memory to Memory
'***************************************************************
'Transfers memory locations to memory locations, e.g. byte buffer to word location, or long location.
'Also word to long, BUT, the words MUST be declared wordlo wordhi in that order, with nothing in-between.
'X register pair points to source
'Z register pair points to destination
'r21 contains the number of locations to transfer, e.g. 2 for word, 4 for long
'r20 is used as temp storage.
'The registers must be loaded beforehand.
'Very easy to crap all over ram.
Mem2mem:
dec r21                                                     'decrement r21
brmi Mem2mem_finish                                         'if r21 = -ve, nothing to do, or finished
ld r20, X+                                                  'location pointed to by Y to r20, post incr
st Z+, r20                                                  'r20 to location pointed to by Z, post incr
rjmp Mem2mem                                                'next
Mem2mem_finish:
ret                                                         'returns with X & Z pointing to next address
[end]

[swapbytesofword]
'***************************************************************
'Swap Bytes of a Word
'***************************************************************
'Swaps the two bytes of a word. Turns little endian to big endian and vice a versa
'r21 contains the number of word, that is WORDS, not bytes
'X points to what to swap
'r16 and r17, are used as temp storage.
Swapbytesofword:
dec r21
brmi swapbytesofword_finish                                 'if r21 = -ve, nothing to do, or finished
ld r16, X+                                                  'get byte one in r16 & incr pointer
ld r17, X                                                   'get byte two in r17 & no incr pointer
st X, r16                                                   'store byte one in byte two s original position
st -X, r17                                                  'store byte two in byte one s original position & and pre decr pointer
adiw r26, 2                                                 'move pointer up by 2
rjmp Swapbytesofword
Swapbytesofword_finish:
ret                                                         'returns with X pointing to next address
[end]

[mod32base2]
'***************************************************************
'mod32base2
'***************************************************************
'returns mod base 2 e.g. 1, 2, 4, 8,... 512, 1024 of a number
'Base 2 conformance is NOT checked. Faster than mod function (which calls _div32)
'Number is passed in r16 to r19, Mod is passed in r20 to r23
'Result  r20 to r23.
Mod32base2:
subi r20, 1                                                 'subtract 1 from lsb, without carry
sbci r21, 0                                                 'subtract 0 with carry
sbci r22, 0
sbci r23, 0                                                 'msb
and r20, r16                                                'Logical AND lsb
and r21, r17
and r22, r18
and r23, r19                                                'msb
ret
[end]

[mod16base2]
'***************************************************************
'mod16base2
'***************************************************************
'returns mod base 2 e.g. 1, 2, 4, 8,... 512, 1024 of a number
'Base 2 conformance is NOT checked. Faster than mod function (which calls _div16)
'Number is passed in r16 to r17, Mod is passed in r20 to r21
'Result  r20 to r21.
Mod16base2:
subi r20, 1                                                 'subtract 1 from lsb, without carry
sbci r21, 0                                                 'subtract 0 with carry
and r20, r16                                                'Logical AND lsb
and r21, r17                                                'msb
ret
[end]

[mpy32base2]
'***************************************************************
'Multiply 32 bit unsigned by a base2 number
'***************************************************************
Mpy32base2:
'any 32 bit number is passed in r16-r19
'mod32 number is passed in r20-r23
'result is passed back in r16-r19
subi r20, 0
sbci r21, 0
sbci r22, 0
sbci r23, 0
breq Mpy32base2res0                                         'check for 0
Mpy32base2_1:
lsr r23                                                     'msb. div mod 32 number by 2
ror r22
ror r21
ror r20                                                     'lsb
brcs Mpy32base2end                                          'if carry set, then we have finished
lsl r16                                                     'lsb. Mul number by 2
rol r17
rol r18
rol r19                                                     'msb
rjmp Mpy32base2_1                                           'again
Mpy32base2res0:
clr r16                                                     'set result to zero
clr r17
clr r18
clr r19
Mpy32base2end:
ret
[end]

[mpy16base2]
'***************************************************************
'Multiply 16 bit unsigned by a base2 number
'***************************************************************
Mpy16base2:
'any 16 bit number is passed in r16-r17
'mod16 number is passed in r20-r21
'result is passed back in r16-r17
subi r20, 0
sbci r21, 0
breq Mpy16base2res0                                         'check for 0
Mpy16base2_1:
lsr r21                                                     'msb. div mod 32 number by 2
ror r20                                                     'lsb
brcs Mpy16base2end                                          'if carry set, then we have finished
lsl r16                                                     'lsb. Mul number by 2
rol r17                                                     'msb
rjmp Mpy16base2_1                                           'again
Mpy16base2res0:
clr r16                                                     'set result to zero
clr r17
Mpy16base2end:
ret
[end]

[div32base2]
'***************************************************************
'Divide 32 bit unsigned by a base2 number
'***************************************************************
Div32base2:
'any 32 bit number is passed in r16-r19
'mod32 number is passed in r20-r23
'result is passed back in r16-r19
subi r20, 0
sbci r21, 0
sbci r22, 0
sbci r23, 0
breq Div32base2end                                          'check for 0
Div32base2_1:
lsr r23                                                     'msb. div mod 32 number by 2
ror r22
ror r21
ror r20                                                     'lsb
brcs Div32base2end                                          'if carry set, then we have finished
lsr r19                                                     'lsb. Div number by 2
ror r18
ror r17
ror r16                                                     'msb
rjmp Div32base2_1                                           'again
Div32base2end:
ret
[end]

[div16base2]
'***************************************************************
'Divides 16 bit unsigned by a base2 number
'***************************************************************
Div16base2:
'any 16 bit number is passed in r16-r17
'mod16 number is passed in r20-r21
'result is passed back in r16-r17
subi r20, 0
sbci r21, 0
breq Div16base2end                                          'check for 0
Div16base2_1:
lsr r21                                                     'msb. div mod 32 number by 2
ror r20                                                     'lsb
brcs Div16base2end                                          'if carry set, then we have finished
lsr r17                                                     'lsb. Div number by 2
ror r16                                                     'msb
rjmp Div16base2_1                                           'again
Div16base2end:
ret
[end]

[allocatesoftstack]
Allocatesoftstack:
'allocate the variable pointed to by X to softstack
st -y, r27                                                  'save address to soft stack (hi first)
st -Y, r26                                                  'and grow soft stack down by 1 word address
ret
[end]

[allocateframe]
Allocateframe:
'allocates 1 variable to frame
'r21 = number of bytes to allocate
st -y, r5                                                   'save current frame pointer (hi first)
st -y, r4                                                   'and grow softstack down by 1 word address
add r4, r21                                                 'allocate the number of bytes
ldi r21, 0
adc r5, r21
ret
[end]

[deallocateframe]
Deallocateframe:
'de allocates 1 variable from frame
'r21 = number of bytes to de allocate
Sub R4 , R21                                                'de allocate the number of bytes
ldi r21, 0
sbc r5, r21
[deallocatesoftstack]
Deallocatesoftstack:
adiw r28, 2                                                 'shrink softstack up by 1 word address
ret
[end]

'The following shows how and why and when to use the stack and frame.
'Allocatesoftstack and Deallocatesoftstack are probably better just used within subroutine or function rather than jumping here.
'They are just here so I don't forget
'Function Add_1(number) As Byte
'ldd r26, Y+0
'ldd r27, y+1                                                'address of number to X
'ld r16, X                                                   'number to r16
'inc r16                                                     'increment r16
'ldd r26, y+2                                                'address of add_1 to X
'ldd r27, y+3
'st X, r16                                                   'store
'ret
'End Function

'Function Add_2(number) As Byte
'ldd r26, Y+0
'ldd r27, y+1                                                'address of number to X
'ld r16, X                                                   'number to r16
'inc r16                                                     'increment r16
'inc r16                                                     'increment r16
'ldd r26, y+2                                                'address of add_1 to X
'ldd r27, y+3
'st X, r16                                                   'store
'ret
'End Function

'Function Add_3(number As Byte) As Byte                      'adds 3 by calling function add_1 & add_2
'ldi r21, 1                                                  'allocate a 1 byte local
'!Call Allocateframe
'ldd r26, Y+0
'ldd r27, y+1                                                'address of local to X
'!call allocatesoftstack                                     '1st passed parameter (result of function to be called)
''ldd r26, Y+2 WRONG                                         '+2 because 1 word address has been allocated before
''ldd r27, y+3 WRONG                                         'address of number to X
'ldd r26, Y+4
'ldd r27, y+5                                                'address of number to X
'!call allocatesoftstack                                     '2nd passed parameter
'!call add_1                                                 'call function
''result of add_1 is stored in the 1 byte local
'!call Deallocatesoftstack                                   'two passed parameters
'!call Deallocatesoftstack                                   'two de allocates
'ldd r26, Y+4
'ldd r27, y+5                                                'address of this function to X
'!call allocatesoftstack                                     '1st passed parameter (result of function to be called)
''ldd r26, Y+0 WRONG                                         '+2 because 1 word address has been allocated before
''ldd r27, y+1 WRONG                                         'address of local to X
'ldd r26, Y+2
'ldd r27, y+3                                                'address of local to X
'!call allocatesoftstack                                     '2nd passed parameter
'!call add_2                                                 'call function
'!call Deallocatesoftstack                                   'two passed parameters
'!call Deallocatesoftstack                                   'two de allocates
'ldi r21, 1                                                  'de allocate the 1 byte local
'!call deallocateframe
'ret
'End Function