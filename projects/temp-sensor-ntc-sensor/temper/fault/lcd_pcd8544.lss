
lcd_pcd8544.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a98  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001a98  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000203  00800066  00001a9e  00001b12  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000130  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd3  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049b  00000000  00000000  00002a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc8  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00003e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf1  00000000  00000000  0000419a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__ctors_end>
       4:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
       8:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
       c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      10:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      14:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      18:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      1c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      20:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      24:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      28:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      2c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      30:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      34:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      38:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      3c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      40:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      44:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      48:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      4c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      50:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <waitImage>:
	...
     132:	00 c0 20 20 20 20 20 20 20 20 20 20 c0 00 00 00     ..          ....
     142:	00 00 00 00 00 00 f0 10 10 10 10 e0 00 00 f0 00     ................
     152:	00 80 40 40 40 80 00 00 80 40 40 40 80 00 00 80     ..@@@....@@@....
     162:	40 40 40 80 00 00 80 40 40 40 80 00 00 00 00 00     @@@....@@@......
	...
     186:	00 0f 11 31 31 d1 f1 d1 d1 31 11 11 0f 00 00 00     ...11....1......
     196:	00 00 00 00 00 00 1f 01 01 01 01 00 00 00 1f 00     ................
     1a6:	00 0f 12 12 12 0b 00 00 0c 12 12 0a 1f 00 00 09     ................
     1b6:	12 12 12 0c 00 00 0f 12 12 12 0b 00 00 00 00 00     ................
	...
     1da:	00 f0 18 86 86 e1 f1 e1 e1 86 18 18 f0 00 00 00     ................
	...
     1f2:	60 80 00 80 60 80 00 80 60 00 40 20 20 20 c0 00     `...`...`.@   ..
     202:	00 e8 00 20 f8 20 00 00 00 00 00 00 00 00 00 00     ... . ..........
	...
     22e:	00 03 07 07 07 07 07 07 07 07 07 07 03 00 00 00     ................
	...
     246:	00 03 0c 03 00 03 0c 03 00 00 06 09 09 05 0f 00     ................
     256:	00 0f 00 00 0f 08 00 00 00 00 08 00 00 08 00 00     ................
     266:	08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002ce <__c.1550>:
     2ce:	43 65 6c 00                                         Cel.

000002d2 <__c.1548>:
     2d2:	43 65 6c 00                                         Cel.

000002d6 <__c.1546>:
     2d6:	43 65 6c 00                                         Cel.

000002da <__c.1544>:
     2da:	43 65 6c 00                                         Cel.

000002de <FontLookup>:
     2de:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     2ee:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
     2fe:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     30e:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     31e:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     32e:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     33e:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     34e:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     35e:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     36e:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     37e:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     38e:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     39e:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     3ae:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3be:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3ce:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     3de:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     3ee:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     3fe:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     40e:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     41e:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     42e:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     43e:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     44e:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     45e:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     46e:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     47e:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     48e:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     49e:	50 3c 44 64 54 4c 44 00                             P<DdTLD.

000004a6 <__ctors_end>:
     4a6:	11 24       	eor	r1, r1
     4a8:	1f be       	out	0x3f, r1	; 63
     4aa:	cf e5       	ldi	r28, 0x5F	; 95
     4ac:	d8 e0       	ldi	r29, 0x08	; 8
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	cd bf       	out	0x3d, r28	; 61

000004b2 <__do_copy_data>:
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	a0 e6       	ldi	r26, 0x60	; 96
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	e8 e9       	ldi	r30, 0x98	; 152
     4ba:	fa e1       	ldi	r31, 0x1A	; 26
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <.do_copy_data_start>

000004be <.do_copy_data_loop>:
     4be:	05 90       	lpm	r0, Z+
     4c0:	0d 92       	st	X+, r0

000004c2 <.do_copy_data_start>:
     4c2:	a6 36       	cpi	r26, 0x66	; 102
     4c4:	b1 07       	cpc	r27, r17
     4c6:	d9 f7       	brne	.-10     	; 0x4be <.do_copy_data_loop>

000004c8 <__do_clear_bss>:
     4c8:	12 e0       	ldi	r17, 0x02	; 2
     4ca:	a6 e6       	ldi	r26, 0x66	; 102
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <.do_clear_bss_start>

000004d0 <.do_clear_bss_loop>:
     4d0:	1d 92       	st	X+, r1

000004d2 <.do_clear_bss_start>:
     4d2:	a9 36       	cpi	r26, 0x69	; 105
     4d4:	b1 07       	cpc	r27, r17
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <.do_clear_bss_loop>
     4d8:	0e 94 1c 03 	call	0x638	; 0x638 <main>
     4dc:	0c 94 95 09 	jmp	0x132a	; 0x132a <exit>

000004e0 <__bad_interrupt>:
     4e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004e4 <getTempF>:
*            Vishay thermistor NTCLE100E3103JB0
* v10bit - 10 bit value read from the A/D
* pdRes - value (in ohms) of the resistor that is in series with thermistor
*************************************************************************/
double getTempF(double v10bit, double pdRes)
{
     4e4:	6f 92       	push	r6
     4e6:	7f 92       	push	r7
     4e8:	8f 92       	push	r8
     4ea:	9f 92       	push	r9
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	5b 01       	movw	r10, r22
     4fe:	6c 01       	movw	r12, r24
     500:	79 01       	movw	r14, r18
     502:	8a 01       	movw	r16, r20
	if (v10bit == 1024)
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e8       	ldi	r20, 0x80	; 128
     50a:	54 e4       	ldi	r21, 0x44	; 68
     50c:	0e 94 06 0a 	call	0x140c	; 0x140c <__cmpsf2>
     510:	88 23       	and	r24, r24
     512:	29 f4       	brne	.+10     	; 0x51e <getTempF+0x3a>
     514:	e0 e0       	ldi	r30, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e8       	ldi	r24, 0x80	; 128
     51a:	6f eb       	ldi	r22, 0xBF	; 191
     51c:	7a c0       	rjmp	.+244    	; 0x612 <getTempF+0x12e>
	double b = 2.56985 * pow(10, -4);
	double c = 2.620131 * pow(10, -6);
	double d = 6.383091 * pow(10, -8);

	//return v10bit;
	double celcius = 1.0/(a + b * log(thermResistance/thermRefResistance) + c * pow(log(thermResistance/thermRefResistance), 2) + d * pow(log(thermResistance/thermRefResistance), 3)) - 272.15;
     51e:	a6 01       	movw	r20, r12
     520:	95 01       	movw	r18, r10
     522:	c8 01       	movw	r24, r16
     524:	b7 01       	movw	r22, r14
     526:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5a e3       	ldi	r21, 0x3A	; 58
     532:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     536:	7b 01       	movw	r14, r22
     538:	8c 01       	movw	r16, r24
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e8       	ldi	r20, 0x80	; 128
     540:	5a eb       	ldi	r21, 0xBA	; 186
     542:	c6 01       	movw	r24, r12
     544:	b5 01       	movw	r22, r10
     546:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	5f e3       	ldi	r21, 0x3F	; 63
     552:	0e 94 a2 09 	call	0x1344	; 0x1344 <__addsf3>
     556:	9b 01       	movw	r18, r22
     558:	ac 01       	movw	r20, r24
     55a:	c8 01       	movw	r24, r16
     55c:	b7 01       	movw	r22, r14
     55e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e4       	ldi	r19, 0x40	; 64
     566:	4c e1       	ldi	r20, 0x1C	; 28
     568:	56 e4       	ldi	r21, 0x46	; 70
     56a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     56e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <log>
     572:	3b 01       	movw	r6, r22
     574:	4c 01       	movw	r8, r24
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     57e:	5b 01       	movw	r10, r22
     580:	6c 01       	movw	r12, r24
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e4       	ldi	r20, 0x40	; 64
     588:	50 e4       	ldi	r21, 0x40	; 64
     58a:	c4 01       	movw	r24, r8
     58c:	b3 01       	movw	r22, r6
     58e:	0e 94 01 0c 	call	0x1802	; 0x1802 <pow>
     592:	7b 01       	movw	r14, r22
     594:	8c 01       	movw	r16, r24
     596:	21 ef       	ldi	r18, 0xF1	; 241
     598:	3b eb       	ldi	r19, 0xBB	; 187
     59a:	46 e8       	ldi	r20, 0x86	; 134
     59c:	59 e3       	ldi	r21, 0x39	; 57
     59e:	c4 01       	movw	r24, r8
     5a0:	b3 01       	movw	r22, r6
     5a2:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     5a6:	2e e0       	ldi	r18, 0x0E	; 14
     5a8:	3f ec       	ldi	r19, 0xCF	; 207
     5aa:	4b e5       	ldi	r20, 0x5B	; 91
     5ac:	5b e3       	ldi	r21, 0x3B	; 59
     5ae:	0e 94 a2 09 	call	0x1344	; 0x1344 <__addsf3>
     5b2:	3b 01       	movw	r6, r22
     5b4:	4c 01       	movw	r8, r24
     5b6:	22 e8       	ldi	r18, 0x82	; 130
     5b8:	35 ed       	ldi	r19, 0xD5	; 213
     5ba:	4f e2       	ldi	r20, 0x2F	; 47
     5bc:	56 e3       	ldi	r21, 0x36	; 54
     5be:	c6 01       	movw	r24, r12
     5c0:	b5 01       	movw	r22, r10
     5c2:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	c4 01       	movw	r24, r8
     5cc:	b3 01       	movw	r22, r6
     5ce:	0e 94 a2 09 	call	0x1344	; 0x1344 <__addsf3>
     5d2:	5b 01       	movw	r10, r22
     5d4:	6c 01       	movw	r12, r24
     5d6:	2a e6       	ldi	r18, 0x6A	; 106
     5d8:	33 e1       	ldi	r19, 0x13	; 19
     5da:	49 e8       	ldi	r20, 0x89	; 137
     5dc:	53 e3       	ldi	r21, 0x33	; 51
     5de:	c8 01       	movw	r24, r16
     5e0:	b7 01       	movw	r22, r14
     5e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	c6 01       	movw	r24, r12
     5ec:	b5 01       	movw	r22, r10
     5ee:	0e 94 a2 09 	call	0x1344	; 0x1344 <__addsf3>
     5f2:	9b 01       	movw	r18, r22
     5f4:	ac 01       	movw	r20, r24
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e8       	ldi	r24, 0x80	; 128
     5fc:	9f e3       	ldi	r25, 0x3F	; 63
     5fe:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3>
     602:	23 e3       	ldi	r18, 0x33	; 51
     604:	33 e1       	ldi	r19, 0x13	; 19
     606:	48 e8       	ldi	r20, 0x88	; 136
     608:	53 e4       	ldi	r21, 0x43	; 67
     60a:	0e 94 a1 09 	call	0x1342	; 0x1342 <__subsf3>
     60e:	e6 2f       	mov	r30, r22
     610:	69 2f       	mov	r22, r25
	return celcius;
}
     612:	2e 2f       	mov	r18, r30
     614:	37 2f       	mov	r19, r23
     616:	48 2f       	mov	r20, r24
     618:	56 2f       	mov	r21, r22
     61a:	b9 01       	movw	r22, r18
     61c:	ca 01       	movw	r24, r20
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	08 95       	ret

00000638 <main>:
 

int main()
{
     638:	4f 92       	push	r4
     63a:	5f 92       	push	r5
     63c:	6f 92       	push	r6
     63e:	7f 92       	push	r7
     640:	8f 92       	push	r8
     642:	9f 92       	push	r9
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	00 d0       	rcall	.+0      	; 0x65a <main+0x22>
     65a:	00 d0       	rcall	.+0      	; 0x65c <main+0x24>
     65c:	0f 92       	push	r0
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
	uint8_t tmp_string[] = "xx.x"; 
     662:	de 01       	movw	r26, r28
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	e0 e6       	ldi	r30, 0x60	; 96
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	85 e0       	ldi	r24, 0x05	; 5
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	81 50       	subi	r24, 0x01	; 1
     672:	e1 f7       	brne	.-8      	; 0x66c <main+0x34>
	unsigned char count = 0;
//	DDRD |= (1 << 7); // buzzer
	DDRC &= ~(0x01); // temp sensor on AN2
     674:	a0 98       	cbi	0x14, 0	; 20
	
	PORTD = 0;
     676:	12 ba       	out	0x12, r1	; 18
	DDRD = 0xFF;;
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	81 bb       	out	0x11, r24	; 17
	PORTB = 0;
     67c:	18 ba       	out	0x18, r1	; 24
	DDRB =0xFF;
     67e:	87 bb       	out	0x17, r24	; 23

	/* initialize the ADC */
    adc_init();
     680:	0e 94 90 09 	call	0x1320	; 0x1320 <adc_init>
	
	LcdInit();
     684:	0e 94 3d 09 	call	0x127a	; 0x127a <LcdInit>


    //display image
    LcdContrast(0x40);
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	0e 94 a9 05 	call	0xb52	; 0xb52 <LcdContrast>
    LcdClear();
     68e:	0e 94 25 09 	call	0x124a	; 0x124a <LcdClear>
    LcdImage(waitImage); 
     692:	86 ed       	ldi	r24, 0xD6	; 214
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 10 09 	call	0x1220	; 0x1220 <LcdImage>
    LcdUpdate();
     69a:	0e 94 aa 08 	call	0x1154	; 0x1154 <LcdUpdate>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69e:	0a e6       	ldi	r16, 0x6A	; 106
     6a0:	18 e1       	ldi	r17, 0x18	; 24
     6a2:	c8 01       	movw	r24, r16
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <main+0x6c>


    _delay_ms(25);
    LcdContrast(0x40);
     6a8:	80 e4       	ldi	r24, 0x40	; 64
     6aa:	0e 94 a9 05 	call	0xb52	; 0xb52 <LcdContrast>
    LcdUpdate();
     6ae:	0e 94 aa 08 	call	0x1154	; 0x1154 <LcdUpdate>
     6b2:	c8 01       	movw	r24, r16
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <main+0x7c>
    //display string


    _delay_ms(1);

    LcdClear();
     6b8:	8a ef       	ldi	r24, 0xFA	; 250
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <main+0x84>
     6c0:	0e 94 25 09 	call	0x124a	; 0x124a <LcdClear>
	temp=temp/10;
	}
}
else
{
	string[0] = ' ';
     6c4:	40 e2       	ldi	r20, 0x20	; 32
     6c6:	94 2e       	mov	r9, r20
	string[1] = '*';
     6c8:	3a e2       	ldi	r19, 0x2A	; 42
     6ca:	a3 2e       	mov	r10, r19
	string[2] = '*';
	string[3] = '.';
     6cc:	2e e2       	ldi	r18, 0x2E	; 46
     6ce:	b2 2e       	mov	r11, r18

if (actualTemp>-60)
{	
	if (actualTemp<0)
	{
	string[0] = '-';
     6d0:	9d e2       	ldi	r25, 0x2D	; 45
     6d2:	89 2e       	mov	r8, r25

	    LcdClear();

		double2string(getTempF(adc_read(T1), 8700), tmp_string);
 		LcdGotoXYFont(1,2);
    	LcdStr(FONT_1X,tmp_string);
     6d4:	3e 01       	movw	r6, r28
     6d6:	08 94       	sec
     6d8:	61 1c       	adc	r6, r1
     6da:	71 1c       	adc	r7, r1
     6dc:	8a ef       	ldi	r24, 0xFA	; 250
     6de:	48 2e       	mov	r4, r24
     6e0:	51 2c       	mov	r5, r1

    LcdClear();
	while(1)
	{

	    LcdClear();
     6e2:	0e 94 25 09 	call	0x124a	; 0x124a <LcdClear>

		double2string(getTempF(adc_read(T1), 8700), tmp_string);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <adc_read>
     6ec:	a0 e0       	ldi	r26, 0x00	; 0
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	bc 01       	movw	r22, r24
     6f2:	cd 01       	movw	r24, r26
     6f4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 ef       	ldi	r19, 0xF0	; 240
     6fc:	47 e0       	ldi	r20, 0x07	; 7
     6fe:	56 e4       	ldi	r21, 0x46	; 70
     700:	0e 94 72 02 	call	0x4e4	; 0x4e4 <getTempF>
     704:	7b 01       	movw	r14, r22
     706:	8c 01       	movw	r16, r24
***************************************************************************/
inline void double2string (double actualTemp, uint8_t* string)
{
	int temp;

if (actualTemp>-60)
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e7       	ldi	r20, 0x70	; 112
     70e:	52 ec       	ldi	r21, 0xC2	; 194
     710:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     714:	18 16       	cp	r1, r24
     716:	0c f0       	brlt	.+2      	; 0x71a <main+0xe2>
     718:	5b c0       	rjmp	.+182    	; 0x7d0 <main+0x198>
{	
	if (actualTemp<0)
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	c8 01       	movw	r24, r16
     724:	b7 01       	movw	r22, r14
     726:	0e 94 06 0a 	call	0x140c	; 0x140c <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	14 f4       	brge	.+4      	; 0x732 <main+0xfa>
	{
	string[0] = '-';
     72e:	89 82       	std	Y+1, r8	; 0x01
     730:	01 c0       	rjmp	.+2      	; 0x734 <main+0xfc>
	}
	else
	{
	/* prep the string */

	string[0] = ' ';
     732:	99 82       	std	Y+1, r9	; 0x01
	string[3] = '.';
     734:	bc 82       	std	Y+4, r11	; 0x04
	string[5] = '\0';
     736:	1e 82       	std	Y+6, r1	; 0x06

	temp=(int16_t)(actualTemp * 10.0);   //to include decimal point for display
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e2       	ldi	r20, 0x20	; 32
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	c8 01       	movw	r24, r16
     742:	b7 01       	movw	r22, r14
     744:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     748:	7b 01       	movw	r14, r22
     74a:	8c 01       	movw	r16, r24
     74c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixsfsi>
     750:	6b 01       	movw	r12, r22
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     752:	b6 01       	movw	r22, r12
     754:	88 27       	eor	r24, r24
     756:	77 fd       	sbrc	r23, 7
     758:	80 95       	com	r24
     75a:	98 2f       	mov	r25, r24
     75c:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	c8 01       	movw	r24, r16
     766:	b7 01       	movw	r22, r14
     768:	0e 94 a1 09 	call	0x1342	; 0x1342 <__subsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	5f e3       	ldi	r21, 0x3F	; 63
     774:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     778:	88 23       	and	r24, r24
     77a:	1c f0       	brlt	.+6      	; 0x782 <main+0x14a>
     77c:	08 94       	sec
     77e:	c1 1c       	adc	r12, r1
     780:	d1 1c       	adc	r13, r1
     782:	96 01       	movw	r18, r12
     784:	d7 fe       	sbrs	r13, 7
     786:	03 c0       	rjmp	.+6      	; 0x78e <main+0x156>
     788:	30 95       	com	r19
     78a:	21 95       	neg	r18
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
	if(temp < 0)
	{
	  temp *= -1;
	}
	
	string[4] = ((uint8_t)(temp%10)) | 0x30;
     78e:	c9 01       	movw	r24, r18
     790:	6a e0       	ldi	r22, 0x0A	; 10
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     798:	80 63       	ori	r24, 0x30	; 48
     79a:	8d 83       	std	Y+5, r24	; 0x05
	temp=temp/10;
     79c:	c9 01       	movw	r24, r18
     79e:	6a e0       	ldi	r22, 0x0A	; 10
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     7a6:	9b 01       	movw	r18, r22
	
	string[2] = ((uint8_t)(temp%10)) | 0x30;
     7a8:	cb 01       	movw	r24, r22
     7aa:	6a e0       	ldi	r22, 0x0A	; 10
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     7b2:	80 63       	ori	r24, 0x30	; 48
     7b4:	8b 83       	std	Y+3, r24	; 0x03
	temp=temp/10;
	
	string[1] = ((uint8_t)(temp%10)) | 0x30;
     7b6:	c9 01       	movw	r24, r18
     7b8:	6a e0       	ldi	r22, 0x0A	; 10
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     7c0:	cb 01       	movw	r24, r22
     7c2:	6a e0       	ldi	r22, 0x0A	; 10
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     7ca:	80 63       	ori	r24, 0x30	; 48
     7cc:	8a 83       	std	Y+2, r24	; 0x02
     7ce:	06 c0       	rjmp	.+12     	; 0x7dc <main+0x1a4>
	temp=temp/10;
	}
}
else
{
	string[0] = ' ';
     7d0:	99 82       	std	Y+1, r9	; 0x01
	string[1] = '*';
     7d2:	aa 82       	std	Y+2, r10	; 0x02
	string[2] = '*';
     7d4:	ab 82       	std	Y+3, r10	; 0x03
	string[3] = '.';
     7d6:	bc 82       	std	Y+4, r11	; 0x04
	string[4] = '*';
     7d8:	ad 82       	std	Y+5, r10	; 0x05
	string[5] = '\0';
     7da:	1e 82       	std	Y+6, r1	; 0x06
	{

	    LcdClear();

		double2string(getTempF(adc_read(T1), 8700), tmp_string);
 		LcdGotoXYFont(1,2);
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdStr(FONT_1X,tmp_string);
     7e4:	b3 01       	movw	r22, r6
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 df 06 	call	0xdbe	; 0xdbe <LcdStr>
 	    LcdGotoXYFont(7,2);
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));
     7f4:	6a ed       	ldi	r22, 0xDA	; 218
     7f6:	72 e0       	ldi	r23, 0x02	; 2
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LcdFStr>
 
		double2string(getTempF(adc_read(T2), 8700), tmp_string);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	0e 94 7f 09 	call	0x12fe	; 0x12fe <adc_read>
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 ef       	ldi	r19, 0xF0	; 240
     814:	47 e0       	ldi	r20, 0x07	; 7
     816:	56 e4       	ldi	r21, 0x46	; 70
     818:	0e 94 72 02 	call	0x4e4	; 0x4e4 <getTempF>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
***************************************************************************/
inline void double2string (double actualTemp, uint8_t* string)
{
	int temp;

if (actualTemp>-60)
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e7       	ldi	r20, 0x70	; 112
     826:	52 ec       	ldi	r21, 0xC2	; 194
     828:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     82c:	18 16       	cp	r1, r24
     82e:	0c f0       	brlt	.+2      	; 0x832 <main+0x1fa>
     830:	5b c0       	rjmp	.+182    	; 0x8e8 <__stack+0x89>
{	
	if (actualTemp<0)
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	c8 01       	movw	r24, r16
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 06 0a 	call	0x140c	; 0x140c <__cmpsf2>
     842:	88 23       	and	r24, r24
     844:	14 f4       	brge	.+4      	; 0x84a <main+0x212>
	{
	string[0] = '-';
     846:	89 82       	std	Y+1, r8	; 0x01
     848:	01 c0       	rjmp	.+2      	; 0x84c <main+0x214>
	}
	else
	{
	/* prep the string */

	string[0] = ' ';
     84a:	99 82       	std	Y+1, r9	; 0x01
	string[3] = '.';
     84c:	bc 82       	std	Y+4, r11	; 0x04
	string[5] = '\0';
     84e:	1e 82       	std	Y+6, r1	; 0x06

	temp=(int16_t)(actualTemp * 10.0);   //to include decimal point for display
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e2       	ldi	r20, 0x20	; 32
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	c8 01       	movw	r24, r16
     85a:	b7 01       	movw	r22, r14
     85c:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     860:	7b 01       	movw	r14, r22
     862:	8c 01       	movw	r16, r24
     864:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixsfsi>
     868:	6b 01       	movw	r12, r22
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     86a:	b6 01       	movw	r22, r12
     86c:	88 27       	eor	r24, r24
     86e:	77 fd       	sbrc	r23, 7
     870:	80 95       	com	r24
     872:	98 2f       	mov	r25, r24
     874:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	c8 01       	movw	r24, r16
     87e:	b7 01       	movw	r22, r14
     880:	0e 94 a1 09 	call	0x1342	; 0x1342 <__subsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	5f e3       	ldi	r21, 0x3F	; 63
     88c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     890:	88 23       	and	r24, r24
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	08 94       	sec
     896:	c1 1c       	adc	r12, r1
     898:	d1 1c       	adc	r13, r1
     89a:	96 01       	movw	r18, r12
     89c:	d7 fe       	sbrs	r13, 7
     89e:	03 c0       	rjmp	.+6      	; 0x8a6 <__stack+0x47>
     8a0:	30 95       	com	r19
     8a2:	21 95       	neg	r18
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(temp < 0)
	{
	  temp *= -1;
	}
	
	string[4] = ((uint8_t)(temp%10)) | 0x30;
     8a6:	c9 01       	movw	r24, r18
     8a8:	6a e0       	ldi	r22, 0x0A	; 10
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     8b0:	80 63       	ori	r24, 0x30	; 48
     8b2:	8d 83       	std	Y+5, r24	; 0x05
	temp=temp/10;
     8b4:	c9 01       	movw	r24, r18
     8b6:	6a e0       	ldi	r22, 0x0A	; 10
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     8be:	9b 01       	movw	r18, r22
	
	string[2] = ((uint8_t)(temp%10)) | 0x30;
     8c0:	cb 01       	movw	r24, r22
     8c2:	6a e0       	ldi	r22, 0x0A	; 10
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     8ca:	80 63       	ori	r24, 0x30	; 48
     8cc:	8b 83       	std	Y+3, r24	; 0x03
	temp=temp/10;
	
	string[1] = ((uint8_t)(temp%10)) | 0x30;
     8ce:	c9 01       	movw	r24, r18
     8d0:	6a e0       	ldi	r22, 0x0A	; 10
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     8d8:	cb 01       	movw	r24, r22
     8da:	6a e0       	ldi	r22, 0x0A	; 10
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     8e2:	80 63       	ori	r24, 0x30	; 48
     8e4:	8a 83       	std	Y+2, r24	; 0x02
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <__stack+0x95>
	temp=temp/10;
	}
}
else
{
	string[0] = ' ';
     8e8:	99 82       	std	Y+1, r9	; 0x01
	string[1] = '*';
     8ea:	aa 82       	std	Y+2, r10	; 0x02
	string[2] = '*';
     8ec:	ab 82       	std	Y+3, r10	; 0x03
	string[3] = '.';
     8ee:	bc 82       	std	Y+4, r11	; 0x04
	string[4] = '*';
     8f0:	ad 82       	std	Y+5, r10	; 0x05
	string[5] = '\0';
     8f2:	1e 82       	std	Y+6, r1	; 0x06
    	LcdStr(FONT_1X,tmp_string);
 	    LcdGotoXYFont(7,2);
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));
 
		double2string(getTempF(adc_read(T2), 8700), tmp_string);
 		LcdGotoXYFont(1,3);
     8f4:	63 e0       	ldi	r22, 0x03	; 3
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdStr(FONT_1X,tmp_string);
     8fc:	b3 01       	movw	r22, r6
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0e 94 df 06 	call	0xdbe	; 0xdbe <LcdStr>
 	    LcdGotoXYFont(7,3);
     904:	63 e0       	ldi	r22, 0x03	; 3
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));
     90c:	66 ed       	ldi	r22, 0xD6	; 214
     90e:	72 e0       	ldi	r23, 0x02	; 2
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LcdFStr>


		double2string(getTempF(adc_read(T3), 8700), tmp_string);
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 7f 09 	call	0x12fe	; 0x12fe <adc_read>
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	bc 01       	movw	r22, r24
     922:	cd 01       	movw	r24, r26
     924:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 ef       	ldi	r19, 0xF0	; 240
     92c:	47 e0       	ldi	r20, 0x07	; 7
     92e:	56 e4       	ldi	r21, 0x46	; 70
     930:	0e 94 72 02 	call	0x4e4	; 0x4e4 <getTempF>
     934:	7b 01       	movw	r14, r22
     936:	8c 01       	movw	r16, r24
***************************************************************************/
inline void double2string (double actualTemp, uint8_t* string)
{
	int temp;

if (actualTemp>-60)
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e7       	ldi	r20, 0x70	; 112
     93e:	52 ec       	ldi	r21, 0xC2	; 194
     940:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     944:	18 16       	cp	r1, r24
     946:	0c f0       	brlt	.+2      	; 0x94a <__stack+0xeb>
     948:	5b c0       	rjmp	.+182    	; 0xa00 <__stack+0x1a1>
{	
	if (actualTemp<0)
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	c8 01       	movw	r24, r16
     954:	b7 01       	movw	r22, r14
     956:	0e 94 06 0a 	call	0x140c	; 0x140c <__cmpsf2>
     95a:	88 23       	and	r24, r24
     95c:	14 f4       	brge	.+4      	; 0x962 <__stack+0x103>
	{
	string[0] = '-';
     95e:	89 82       	std	Y+1, r8	; 0x01
     960:	01 c0       	rjmp	.+2      	; 0x964 <__stack+0x105>
	}
	else
	{
	/* prep the string */

	string[0] = ' ';
     962:	99 82       	std	Y+1, r9	; 0x01
	string[3] = '.';
     964:	bc 82       	std	Y+4, r11	; 0x04
	string[5] = '\0';
     966:	1e 82       	std	Y+6, r1	; 0x06

	temp=(int16_t)(actualTemp * 10.0);   //to include decimal point for display
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e2       	ldi	r20, 0x20	; 32
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	c8 01       	movw	r24, r16
     972:	b7 01       	movw	r22, r14
     974:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     978:	7b 01       	movw	r14, r22
     97a:	8c 01       	movw	r16, r24
     97c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixsfsi>
     980:	6b 01       	movw	r12, r22
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     982:	b6 01       	movw	r22, r12
     984:	88 27       	eor	r24, r24
     986:	77 fd       	sbrc	r23, 7
     988:	80 95       	com	r24
     98a:	98 2f       	mov	r25, r24
     98c:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
     994:	c8 01       	movw	r24, r16
     996:	b7 01       	movw	r22, r14
     998:	0e 94 a1 09 	call	0x1342	; 0x1342 <__subsf3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	5f e3       	ldi	r21, 0x3F	; 63
     9a4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     9a8:	88 23       	and	r24, r24
     9aa:	1c f0       	brlt	.+6      	; 0x9b2 <__stack+0x153>
     9ac:	08 94       	sec
     9ae:	c1 1c       	adc	r12, r1
     9b0:	d1 1c       	adc	r13, r1
     9b2:	96 01       	movw	r18, r12
     9b4:	d7 fe       	sbrs	r13, 7
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <__stack+0x15f>
     9b8:	30 95       	com	r19
     9ba:	21 95       	neg	r18
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
	if(temp < 0)
	{
	  temp *= -1;
	}
	
	string[4] = ((uint8_t)(temp%10)) | 0x30;
     9be:	c9 01       	movw	r24, r18
     9c0:	6a e0       	ldi	r22, 0x0A	; 10
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     9c8:	80 63       	ori	r24, 0x30	; 48
     9ca:	8d 83       	std	Y+5, r24	; 0x05
	temp=temp/10;
     9cc:	c9 01       	movw	r24, r18
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     9d6:	9b 01       	movw	r18, r22
	
	string[2] = ((uint8_t)(temp%10)) | 0x30;
     9d8:	cb 01       	movw	r24, r22
     9da:	6a e0       	ldi	r22, 0x0A	; 10
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     9e2:	80 63       	ori	r24, 0x30	; 48
     9e4:	8b 83       	std	Y+3, r24	; 0x03
	temp=temp/10;
	
	string[1] = ((uint8_t)(temp%10)) | 0x30;
     9e6:	c9 01       	movw	r24, r18
     9e8:	6a e0       	ldi	r22, 0x0A	; 10
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     9f0:	cb 01       	movw	r24, r22
     9f2:	6a e0       	ldi	r22, 0x0A	; 10
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     9fa:	80 63       	ori	r24, 0x30	; 48
     9fc:	8a 83       	std	Y+2, r24	; 0x02
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__stack+0x1ad>
	temp=temp/10;
	}
}
else
{
	string[0] = ' ';
     a00:	99 82       	std	Y+1, r9	; 0x01
	string[1] = '*';
     a02:	aa 82       	std	Y+2, r10	; 0x02
	string[2] = '*';
     a04:	ab 82       	std	Y+3, r10	; 0x03
	string[3] = '.';
     a06:	bc 82       	std	Y+4, r11	; 0x04
	string[4] = '*';
     a08:	ad 82       	std	Y+5, r10	; 0x05
	string[5] = '\0';
     a0a:	1e 82       	std	Y+6, r1	; 0x06
 	    LcdGotoXYFont(7,3);
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));


		double2string(getTempF(adc_read(T3), 8700), tmp_string);
 		LcdGotoXYFont(1,4);
     a0c:	64 e0       	ldi	r22, 0x04	; 4
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdStr(FONT_1X,tmp_string);
     a14:	b3 01       	movw	r22, r6
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 df 06 	call	0xdbe	; 0xdbe <LcdStr>
 	    LcdGotoXYFont(7,4);
     a1c:	64 e0       	ldi	r22, 0x04	; 4
     a1e:	87 e0       	ldi	r24, 0x07	; 7
     a20:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));
     a24:	62 ed       	ldi	r22, 0xD2	; 210
     a26:	72 e0       	ldi	r23, 0x02	; 2
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LcdFStr>


		double2string(getTempF(adc_read(T4), 8600), tmp_string);
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	0e 94 7f 09 	call	0x12fe	; 0x12fe <adc_read>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e6       	ldi	r19, 0x60	; 96
     a44:	46 e0       	ldi	r20, 0x06	; 6
     a46:	56 e4       	ldi	r21, 0x46	; 70
     a48:	0e 94 72 02 	call	0x4e4	; 0x4e4 <getTempF>
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
***************************************************************************/
inline void double2string (double actualTemp, uint8_t* string)
{
	int temp;

if (actualTemp>-60)
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e7       	ldi	r20, 0x70	; 112
     a56:	52 ec       	ldi	r21, 0xC2	; 194
     a58:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	0c f0       	brlt	.+2      	; 0xa62 <__stack+0x203>
     a60:	5b c0       	rjmp	.+182    	; 0xb18 <__stack+0x2b9>
{	
	if (actualTemp<0)
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	c8 01       	movw	r24, r16
     a6c:	b7 01       	movw	r22, r14
     a6e:	0e 94 06 0a 	call	0x140c	; 0x140c <__cmpsf2>
     a72:	88 23       	and	r24, r24
     a74:	14 f4       	brge	.+4      	; 0xa7a <__stack+0x21b>
	{
	string[0] = '-';
     a76:	89 82       	std	Y+1, r8	; 0x01
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <__stack+0x21d>
	}
	else
	{
	/* prep the string */

	string[0] = ' ';
     a7a:	99 82       	std	Y+1, r9	; 0x01
	string[3] = '.';
     a7c:	bc 82       	std	Y+4, r11	; 0x04
	string[5] = '\0';
     a7e:	1e 82       	std	Y+6, r1	; 0x06

	temp=(int16_t)(actualTemp * 10.0);   //to include decimal point for display
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e2       	ldi	r20, 0x20	; 32
     a86:	51 e4       	ldi	r21, 0x41	; 65
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 9e 0b 	call	0x173c	; 0x173c <__mulsf3>
     a90:	7b 01       	movw	r14, r22
     a92:	8c 01       	movw	r16, r24
     a94:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixsfsi>
     a98:	6b 01       	movw	r12, r22
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     a9a:	b6 01       	movw	r22, r12
     a9c:	88 27       	eor	r24, r24
     a9e:	77 fd       	sbrc	r23, 7
     aa0:	80 95       	com	r24
     aa2:	98 2f       	mov	r25, r24
     aa4:	0e 94 a5 0a 	call	0x154a	; 0x154a <__floatsisf>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c8 01       	movw	r24, r16
     aae:	b7 01       	movw	r22, r14
     ab0:	0e 94 a1 09 	call	0x1342	; 0x1342 <__subsf3>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	5f e3       	ldi	r21, 0x3F	; 63
     abc:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__gesf2>
     ac0:	88 23       	and	r24, r24
     ac2:	1c f0       	brlt	.+6      	; 0xaca <__stack+0x26b>
     ac4:	08 94       	sec
     ac6:	c1 1c       	adc	r12, r1
     ac8:	d1 1c       	adc	r13, r1
     aca:	96 01       	movw	r18, r12
     acc:	d7 fe       	sbrs	r13, 7
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <__stack+0x277>
     ad0:	30 95       	com	r19
     ad2:	21 95       	neg	r18
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
	if(temp < 0)
	{
	  temp *= -1;
	}
	
	string[4] = ((uint8_t)(temp%10)) | 0x30;
     ad6:	c9 01       	movw	r24, r18
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     ae0:	80 63       	ori	r24, 0x30	; 48
     ae2:	8d 83       	std	Y+5, r24	; 0x05
	temp=temp/10;
     ae4:	c9 01       	movw	r24, r18
     ae6:	6a e0       	ldi	r22, 0x0A	; 10
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     aee:	9b 01       	movw	r18, r22
	
	string[2] = ((uint8_t)(temp%10)) | 0x30;
     af0:	cb 01       	movw	r24, r22
     af2:	6a e0       	ldi	r22, 0x0A	; 10
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     afa:	80 63       	ori	r24, 0x30	; 48
     afc:	8b 83       	std	Y+3, r24	; 0x03
	temp=temp/10;
	
	string[1] = ((uint8_t)(temp%10)) | 0x30;
     afe:	c9 01       	movw	r24, r18
     b00:	6a e0       	ldi	r22, 0x0A	; 10
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     b08:	cb 01       	movw	r24, r22
     b0a:	6a e0       	ldi	r22, 0x0A	; 10
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     b12:	80 63       	ori	r24, 0x30	; 48
     b14:	8a 83       	std	Y+2, r24	; 0x02
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <__stack+0x2c5>
	temp=temp/10;
	}
}
else
{
	string[0] = ' ';
     b18:	99 82       	std	Y+1, r9	; 0x01
	string[1] = '*';
     b1a:	aa 82       	std	Y+2, r10	; 0x02
	string[2] = '*';
     b1c:	ab 82       	std	Y+3, r10	; 0x03
	string[3] = '.';
     b1e:	bc 82       	std	Y+4, r11	; 0x04
	string[4] = '*';
     b20:	ad 82       	std	Y+5, r10	; 0x05
	string[5] = '\0';
     b22:	1e 82       	std	Y+6, r1	; 0x06
 	    LcdGotoXYFont(7,4);
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));


		double2string(getTempF(adc_read(T4), 8600), tmp_string);
 		LcdGotoXYFont(1,5);
     b24:	65 e0       	ldi	r22, 0x05	; 5
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdStr(FONT_1X,tmp_string);
     b2c:	b3 01       	movw	r22, r6
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 df 06 	call	0xdbe	; 0xdbe <LcdStr>
 	    LcdGotoXYFont(7,5);
     b34:	65 e0       	ldi	r22, 0x05	; 5
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	0e 94 c0 05 	call	0xb80	; 0xb80 <LcdGotoXYFont>
    	LcdFStr(FONT_1X,(unsigned char*)PSTR("Cel"));
     b3c:	6e ec       	ldi	r22, 0xCE	; 206
     b3e:	72 e0       	ldi	r23, 0x02	; 2
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <LcdFStr>


	 	LcdUpdate();
     b46:	0e 94 aa 08 	call	0x1154	; 0x1154 <LcdUpdate>
     b4a:	c2 01       	movw	r24, r4
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <__stack+0x2ed>
     b50:	c8 cd       	rjmp	.-1136   	; 0x6e2 <main+0xaa>

00000b52 <LcdContrast>:
 * Description  :  Set display contrast.
 * Argument(s)  :  contrast -> Contrast value from 0x00 to 0x7F.
 * Return value :  None.
 */
void LcdContrast ( byte contrast )
{
     b52:	98 2f       	mov	r25, r24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
     b54:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
     b56:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
     b58:	81 e2       	ldi	r24, 0x21	; 33
     b5a:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
     b5c:	77 9b       	sbis	0x0e, 7	; 14
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <LcdContrast+0xa>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
     b60:	c2 9a       	sbi	0x18, 2	; 24
{
    /* LCD Extended Commands. */
    LcdSend( 0x21, LCD_CMD );

    /* Set LCD contrast level. */
    LcdSend( 0x80 | contrast, LCD_CMD );
     b62:	90 68       	ori	r25, 0x80	; 128
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
     b64:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
     b66:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
     b68:	9f b9       	out	0x0f, r25	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
     b6a:	77 9b       	sbis	0x0e, 7	; 14
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <LcdContrast+0x18>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
     b6e:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
     b70:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
     b72:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
     b74:	80 e2       	ldi	r24, 0x20	; 32
     b76:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
     b78:	77 9b       	sbis	0x0e, 7	; 14
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <LcdContrast+0x26>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
     b7c:	c2 9a       	sbi	0x18, 2	; 24
    /* Set LCD contrast level. */
    LcdSend( 0x80 | contrast, LCD_CMD );

    /* LCD Standard Commands, horizontal addressing mode. */
    LcdSend( 0x20, LCD_CMD );
}
     b7e:	08 95       	ret

00000b80 <LcdGotoXYFont>:
 * Argument(s)  :  x, y -> Coordinate for new cursor position. Range: 1,1 .. 14,6
 * Return value :  see return value in pcd8544.h
 * Note         :  Based on Sylvain Bissonette's code
 */
byte LcdGotoXYFont ( byte x, byte y )
{
     b80:	98 2f       	mov	r25, r24
    /* Boundary check, slow down the speed but will guarantee this code wont fail */
    /* Version 0.2.5 - Fixed on Dec 25, 2008 (XMAS) */
    if( x > 14)
     b82:	8f 30       	cpi	r24, 0x0F	; 15
     b84:	a0 f4       	brcc	.+40     	; 0xbae <LcdGotoXYFont+0x2e>
        return OUT_OF_BORDER;
    if( y > 6)
     b86:	67 30       	cpi	r22, 0x07	; 7
     b88:	90 f4       	brcc	.+36     	; 0xbae <LcdGotoXYFont+0x2e>
        return OUT_OF_BORDER;
    /*  Calculate index. It is defined as address within 504 bytes memory */

    LcdCacheIdx = ( x - 1 ) * 6 + ( y - 1 ) * 84;
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	98 9f       	mul	r25, r24
     b8e:	c0 01       	movw	r24, r0
     b90:	11 24       	eor	r1, r1
     b92:	8a 55       	subi	r24, 0x5A	; 90
     b94:	90 40       	sbci	r25, 0x00	; 0
     b96:	24 e5       	ldi	r18, 0x54	; 84
     b98:	62 9f       	mul	r22, r18
     b9a:	90 01       	movw	r18, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	82 0f       	add	r24, r18
     ba0:	93 1f       	adc	r25, r19
     ba2:	90 93 5f 02 	sts	0x025F, r25
     ba6:	80 93 5e 02 	sts	0x025E, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	08 95       	ret
    return OK;
     bae:	81 e0       	ldi	r24, 0x01	; 1
}
     bb0:	08 95       	ret

00000bb2 <LcdChr>:
 * Argument(s)  :  size -> Font size. See enum in pcd8544.h.
 *                 ch   -> Character to write.
 * Return value :  see pcd8544.h about return value
 */
byte LcdChr ( LcdFontSize size, byte ch )
{
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	28 2f       	mov	r18, r24
    byte i, c;
    byte b1, b2;
    int  tmpIdx;

    if ( LcdCacheIdx < LoWaterMark )
     bc6:	a0 91 5e 02 	lds	r26, 0x025E
     bca:	b0 91 5f 02 	lds	r27, 0x025F
     bce:	80 91 60 02 	lds	r24, 0x0260
     bd2:	90 91 61 02 	lds	r25, 0x0261
     bd6:	a8 17       	cp	r26, r24
     bd8:	b9 07       	cpc	r27, r25
     bda:	24 f4       	brge	.+8      	; 0xbe4 <LcdChr+0x32>
    {
        /* Update low marker. */
        LoWaterMark = LcdCacheIdx;
     bdc:	b0 93 61 02 	sts	0x0261, r27
     be0:	a0 93 60 02 	sts	0x0260, r26
    }

    if ( (ch < 0x20) || (ch > 0x7b) )
     be4:	86 2f       	mov	r24, r22
     be6:	80 52       	subi	r24, 0x20	; 32
     be8:	8c 35       	cpi	r24, 0x5C	; 92
     bea:	08 f0       	brcs	.+2      	; 0xbee <LcdChr+0x3c>
     bec:	6c e5       	ldi	r22, 0x5C	; 92
    {
        /* Convert to a printable character. */
        ch = 92;
    }

    if ( size == FONT_1X )
     bee:	21 30       	cpi	r18, 0x01	; 1
     bf0:	d1 f4       	brne	.+52     	; 0xc26 <LcdChr+0x74>
    {
        for ( i = 0; i < 5; i++ )
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = pgm_read_byte(&( FontLookup[ ch - 32 ][ i ] ) ) << 1;
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	68 9f       	mul	r22, r24
     bf6:	c0 01       	movw	r24, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	fc 01       	movw	r30, r24
     bfc:	e2 5c       	subi	r30, 0xC2	; 194
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	ed 01       	movw	r28, r26
     c02:	ca 59       	subi	r28, 0x9A	; 154
     c04:	df 4f       	sbci	r29, 0xFF	; 255
        ch = 92;
    }

    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
     c06:	bc 01       	movw	r22, r24
     c08:	6d 5b       	subi	r22, 0xBD	; 189
     c0a:	7d 4f       	sbci	r23, 0xFD	; 253
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = pgm_read_byte(&( FontLookup[ ch - 32 ][ i ] ) ) << 1;
     c0c:	84 91       	lpm	r24, Z+
     c0e:	88 0f       	add	r24, r24
     c10:	89 93       	st	Y+, r24
     c12:	31 96       	adiw	r30, 0x01	; 1
        ch = 92;
    }

    if ( size == FONT_1X )
    {
        for ( i = 0; i < 5; i++ )
     c14:	e6 17       	cp	r30, r22
     c16:	f7 07       	cpc	r31, r23
     c18:	c9 f7       	brne	.-14     	; 0xc0c <LcdChr+0x5a>
     c1a:	15 96       	adiw	r26, 0x05	; 5
     c1c:	b0 93 5f 02 	sts	0x025F, r27
     c20:	a0 93 5e 02 	sts	0x025E, r26
     c24:	9e c0       	rjmp	.+316    	; 0xd62 <LcdChr+0x1b0>
        {
            /* Copy lookup table from Flash ROM to LcdCache */
            LcdCache[LcdCacheIdx++] = pgm_read_byte(&( FontLookup[ ch - 32 ][ i ] ) ) << 1;
        }
    }
    else if ( size == FONT_2X )
     c26:	22 30       	cpi	r18, 0x02	; 2
     c28:	09 f0       	breq	.+2      	; 0xc2c <LcdChr+0x7a>
     c2a:	9b c0       	rjmp	.+310    	; 0xd62 <LcdChr+0x1b0>
    {
        tmpIdx = LcdCacheIdx - 84;
     c2c:	9d 01       	movw	r18, r26
     c2e:	24 55       	subi	r18, 0x54	; 84
     c30:	30 40       	sbci	r19, 0x00	; 0

        if ( tmpIdx < LoWaterMark )
     c32:	80 91 60 02 	lds	r24, 0x0260
     c36:	90 91 61 02 	lds	r25, 0x0261
     c3a:	28 17       	cp	r18, r24
     c3c:	39 07       	cpc	r19, r25
     c3e:	24 f4       	brge	.+8      	; 0xc48 <LcdChr+0x96>
        {
            LoWaterMark = tmpIdx;
     c40:	30 93 61 02 	sts	0x0261, r19
     c44:	20 93 60 02 	sts	0x0260, r18
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;
     c48:	37 ff       	sbrs	r19, 7
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <LcdChr+0x9e>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	ad c0       	rjmp	.+346    	; 0xdaa <LcdChr+0x1f8>

        for ( i = 0; i < 5; i++ )
        {
            /* Copy lookup table from Flash ROM to temporary c */
            c = pgm_read_byte(&(FontLookup[ch - 32][i])) << 1;
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	68 9f       	mul	r22, r24
     c54:	c0 01       	movw	r24, r0
     c56:	11 24       	eor	r1, r1
     c58:	4e e3       	ldi	r20, 0x3E	; 62
     c5a:	e4 2e       	mov	r14, r20
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	f4 2e       	mov	r15, r20
     c60:	e8 0e       	add	r14, r24
     c62:	f9 1e       	adc	r15, r25
     c64:	89 01       	movw	r16, r18
     c66:	0a 59       	subi	r16, 0x9A	; 154
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	ed 01       	movw	r28, r26
     c6c:	ca 59       	subi	r28, 0x9A	; 154
     c6e:	df 4f       	sbci	r29, 0xFF	; 255
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
     c70:	33 e4       	ldi	r19, 0x43	; 67
     c72:	c3 2e       	mov	r12, r19
     c74:	32 e0       	ldi	r19, 0x02	; 2
     c76:	d3 2e       	mov	r13, r19
     c78:	c8 0e       	add	r12, r24
     c7a:	d9 1e       	adc	r13, r25
        {
            /* Copy lookup table from Flash ROM to temporary c */
            c = pgm_read_byte(&(FontLookup[ch - 32][i])) << 1;
     c7c:	f7 01       	movw	r30, r14
     c7e:	64 91       	lpm	r22, Z+
     c80:	66 0f       	add	r22, r22
            /* Enlarge image */
            /* First part */
            b1 =  (c & 0x01) * 3;
     c82:	46 2f       	mov	r20, r22
     c84:	50 e0       	ldi	r21, 0x00	; 0
            b1 |= (c & 0x02) * 6;
            b1 |= (c & 0x04) * 12;
            b1 |= (c & 0x08) * 24;
     c86:	ca 01       	movw	r24, r20
     c88:	84 70       	andi	r24, 0x04	; 4
     c8a:	90 70       	andi	r25, 0x00	; 0
     c8c:	fc 01       	movw	r30, r24
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e8 0f       	add	r30, r24
     c94:	f9 1f       	adc	r31, r25
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	9a 01       	movw	r18, r20
     ca0:	22 70       	andi	r18, 0x02	; 2
     ca2:	30 70       	andi	r19, 0x00	; 0
     ca4:	c9 01       	movw	r24, r18
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	be 2e       	mov	r11, r30
     cb4:	b8 2a       	or	r11, r24
     cb6:	48 70       	andi	r20, 0x08	; 8
     cb8:	50 70       	andi	r21, 0x00	; 0
     cba:	ca 01       	movw	r24, r20
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	84 0f       	add	r24, r20
     cc2:	95 1f       	adc	r25, r21
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	7a 95       	dec	r23
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <LcdChr+0x114>
     cce:	b8 2a       	or	r11, r24

            c >>= 4;
            /* Second part */
            b2 =  (c & 0x01) * 3;
     cd0:	62 95       	swap	r22
     cd2:	6f 70       	andi	r22, 0x0F	; 15
     cd4:	70 e0       	ldi	r23, 0x00	; 0
            b2 |= (c & 0x02) * 6;
            b2 |= (c & 0x04) * 12;
            b2 |= (c & 0x08) * 24;
     cd6:	cb 01       	movw	r24, r22
     cd8:	84 70       	andi	r24, 0x04	; 4
     cda:	90 70       	andi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	22 0f       	add	r18, r18
     ce0:	33 1f       	adc	r19, r19
     ce2:	28 0f       	add	r18, r24
     ce4:	39 1f       	adc	r19, r25
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	ab 01       	movw	r20, r22
     cf0:	42 70       	andi	r20, 0x02	; 2
     cf2:	50 70       	andi	r21, 0x00	; 0
     cf4:	ca 01       	movw	r24, r20
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	84 0f       	add	r24, r20
     cfc:	95 1f       	adc	r25, r21
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	28 2b       	or	r18, r24
     d04:	ab 01       	movw	r20, r22
     d06:	48 70       	andi	r20, 0x08	; 8
     d08:	50 70       	andi	r21, 0x00	; 0
     d0a:	ca 01       	movw	r24, r20
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	84 0f       	add	r24, r20
     d12:	95 1f       	adc	r25, r21
     d14:	43 e0       	ldi	r20, 0x03	; 3
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	4a 95       	dec	r20
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <LcdChr+0x164>
     d1e:	28 2b       	or	r18, r24
     d20:	61 70       	andi	r22, 0x01	; 1
     d22:	70 70       	andi	r23, 0x00	; 0
     d24:	cb 01       	movw	r24, r22
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	86 0f       	add	r24, r22
     d2c:	97 1f       	adc	r25, r23
     d2e:	28 2b       	or	r18, r24

            /* Copy two parts into LcdCache */
            LcdCache[tmpIdx++] = b1;
     d30:	f8 01       	movw	r30, r16
     d32:	b0 82       	st	Z, r11
            LcdCache[tmpIdx++] = b1;
     d34:	b1 82       	std	Z+1, r11	; 0x01
            LcdCache[tmpIdx + 82] = b2;
     d36:	28 83       	st	Y, r18
            LcdCache[tmpIdx + 83] = b2;
     d38:	29 83       	std	Y+1, r18	; 0x01
     d3a:	08 94       	sec
     d3c:	e1 1c       	adc	r14, r1
     d3e:	f1 1c       	adc	r15, r1
     d40:	0e 5f       	subi	r16, 0xFE	; 254
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	22 96       	adiw	r28, 0x02	; 2
            LoWaterMark = tmpIdx;
        }

        if ( tmpIdx < 0 ) return OUT_OF_BORDER;

        for ( i = 0; i < 5; i++ )
     d46:	ec 14       	cp	r14, r12
     d48:	fd 04       	cpc	r15, r13
     d4a:	09 f0       	breq	.+2      	; 0xd4e <LcdChr+0x19c>
     d4c:	97 cf       	rjmp	.-210    	; 0xc7c <LcdChr+0xca>
            LcdCache[tmpIdx + 83] = b2;
        }

        /* Update x cursor position. */
        /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
        LcdCacheIdx = (LcdCacheIdx + 11) % LCD_CACHE_SIZE;
     d4e:	cd 01       	movw	r24, r26
     d50:	0b 96       	adiw	r24, 0x0b	; 11
     d52:	68 ef       	ldi	r22, 0xF8	; 248
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
     d5a:	90 93 5f 02 	sts	0x025F, r25
     d5e:	80 93 5e 02 	sts	0x025E, r24
    }

    if ( LcdCacheIdx > HiWaterMark )
     d62:	20 91 5e 02 	lds	r18, 0x025E
     d66:	30 91 5f 02 	lds	r19, 0x025F
     d6a:	80 91 62 02 	lds	r24, 0x0262
     d6e:	90 91 63 02 	lds	r25, 0x0263
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	24 f4       	brge	.+8      	; 0xd80 <LcdChr+0x1ce>
    {
        /* Update high marker. */
        HiWaterMark = LcdCacheIdx;
     d78:	30 93 63 02 	sts	0x0263, r19
     d7c:	20 93 62 02 	sts	0x0262, r18
    }

    /* Horizontal gap between characters. */
    /* Version 0.2.5 - Possible bug fixed on Dec 25,2008 */
    LcdCache[LcdCacheIdx] = 0x00;
     d80:	f9 01       	movw	r30, r18
     d82:	ea 59       	subi	r30, 0x9A	; 154
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	10 82       	st	Z, r1
    /* At index number LCD_CACHE_SIZE - 1, wrap to 0 */
    if(LcdCacheIdx == (LCD_CACHE_SIZE - 1) )
     d88:	f1 e0       	ldi	r31, 0x01	; 1
     d8a:	27 3f       	cpi	r18, 0xF7	; 247
     d8c:	3f 07       	cpc	r19, r31
     d8e:	31 f4       	brne	.+12     	; 0xd9c <LcdChr+0x1ea>
    {
        LcdCacheIdx = 0;
     d90:	10 92 5f 02 	sts	0x025F, r1
     d94:	10 92 5e 02 	sts	0x025E, r1
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <LcdChr+0x1f8>
        return OK_WITH_WRAP;
    }
    /* Otherwise just increment the index */
    LcdCacheIdx++;
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	30 93 5f 02 	sts	0x025F, r19
     da4:	20 93 5e 02 	sts	0x025E, r18
     da8:	80 e0       	ldi	r24, 0x00	; 0
    return OK;
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	08 95       	ret

00000dbe <LcdStr>:
 *                 dataArray -> Array contained string of char to be written
 *                              into cache.
 * Return value :  see return value on pcd8544.h
 */
byte LcdStr ( LcdFontSize size, byte dataArray[] )
{
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	08 2f       	mov	r16, r24
     dc8:	eb 01       	movw	r28, r22
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <LcdStr+0x1c>
    byte tmpIdx=0;
    byte response;
    while( dataArray[ tmpIdx ] != '\0' )
	{
        /* Send char */
		response = LcdChr( size, dataArray[ tmpIdx ] );
     dce:	80 2f       	mov	r24, r16
     dd0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LcdChr>
        /* Just in case OUT_OF_BORDER occured */
        /* Dont worry if the signal == OK_WITH_WRAP, the string will
        be wrapped to starting point */
        if( response == OUT_OF_BORDER)
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	41 f0       	breq	.+16     	; 0xde8 <LcdStr+0x2a>
            return OUT_OF_BORDER;
        /* Increase index */
		tmpIdx++;
     dd8:	1f 5f       	subi	r17, 0xFF	; 255
 */
byte LcdStr ( LcdFontSize size, byte dataArray[] )
{
    byte tmpIdx=0;
    byte response;
    while( dataArray[ tmpIdx ] != '\0' )
     dda:	fe 01       	movw	r30, r28
     ddc:	e1 0f       	add	r30, r17
     dde:	f1 1d       	adc	r31, r1
     de0:	60 81       	ld	r22, Z
     de2:	66 23       	and	r22, r22
     de4:	a1 f7       	brne	.-24     	; 0xdce <LcdStr+0x10>
     de6:	80 e0       	ldi	r24, 0x00	; 0
            return OUT_OF_BORDER;
        /* Increase index */
		tmpIdx++;
	}
    return OK;
}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <LcdFStr>:
 * Return value :  see return value on pcd8544.h
 * Example      :  LcdFStr(FONT_1X, PSTR("Hello World"));
 *                 LcdFStr(FONT_1X, &name_of_string_as_array);
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr )
{
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	18 2f       	mov	r17, r24
     dfa:	eb 01       	movw	r28, r22
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
     dfc:	fb 01       	movw	r30, r22
     dfe:	64 91       	lpm	r22, Z+
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <LcdFStr+0x20>
    {
        /* Put char */
        response = LcdChr( size, c );
     e02:	81 2f       	mov	r24, r17
     e04:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LcdChr>
        if(response == OUT_OF_BORDER)
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	31 f0       	breq	.+12     	; 0xe18 <LcdFStr+0x26>
 */
byte LcdFStr ( LcdFontSize size, const byte *dataPtr )
{
    byte c;
    byte response;
    for ( c = pgm_read_byte( dataPtr ); c; ++dataPtr, c = pgm_read_byte( dataPtr ) )
     e0c:	21 96       	adiw	r28, 0x01	; 1
     e0e:	fe 01       	movw	r30, r28
     e10:	64 91       	lpm	r22, Z+
     e12:	66 23       	and	r22, r22
     e14:	b1 f7       	brne	.-20     	; 0xe02 <LcdFStr+0x10>
     e16:	80 e0       	ldi	r24, 0x00	; 0
        if(response == OUT_OF_BORDER)
            return OUT_OF_BORDER;
    }
	/* Fixed by Jakub Lasinski. Version 0.2.6, March 14, 2009 */
    return OK;
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	08 95       	ret

00000e20 <LcdPixel>:
 *                 mode -> Off, On or Xor. See enum in pcd8544.h.
 * Return value :  see return value on pcd8544.h
 * Note         :  Based on Sylvain Bissonette's code
 */
byte LcdPixel ( byte x, byte y, LcdPixelMode mode )
{
     e20:	58 2f       	mov	r21, r24
    word  index;
    byte  offset;
    byte  data;

    /* Prevent from getting out of border */
    if ( x > LCD_X_RES ) return OUT_OF_BORDER;
     e22:	85 35       	cpi	r24, 0x55	; 85
     e24:	08 f0       	brcs	.+2      	; 0xe28 <LcdPixel+0x8>
     e26:	5a c0       	rjmp	.+180    	; 0xedc <LcdPixel+0xbc>
    if ( y > LCD_Y_RES ) return OUT_OF_BORDER;
     e28:	61 33       	cpi	r22, 0x31	; 49
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <LcdPixel+0xe>
     e2c:	57 c0       	rjmp	.+174    	; 0xedc <LcdPixel+0xbc>

    /* Recalculating index and offset */
    index = ( ( y / 8 ) * 84 ) + x;
     e2e:	86 2f       	mov	r24, r22
     e30:	86 95       	lsr	r24
     e32:	86 95       	lsr	r24
     e34:	86 95       	lsr	r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	24 e5       	ldi	r18, 0x54	; 84
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	82 9f       	mul	r24, r18
     e3e:	d0 01       	movw	r26, r0
     e40:	83 9f       	mul	r24, r19
     e42:	b0 0d       	add	r27, r0
     e44:	92 9f       	mul	r25, r18
     e46:	b0 0d       	add	r27, r0
     e48:	11 24       	eor	r1, r1
     e4a:	a5 0f       	add	r26, r21
     e4c:	b1 1d       	adc	r27, r1
    offset  = y - ( ( y / 8 ) * 8 );
     e4e:	53 e0       	ldi	r21, 0x03	; 3
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	5a 95       	dec	r21
     e56:	e1 f7       	brne	.-8      	; 0xe50 <LcdPixel+0x30>
     e58:	68 1b       	sub	r22, r24

    data = LcdCache[ index ];
     e5a:	fd 01       	movw	r30, r26
     e5c:	ea 59       	subi	r30, 0x9A	; 154
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	20 81       	ld	r18, Z

    /* Bit processing */

	/* Clear mode */
    if ( mode == PIXEL_OFF )
     e62:	44 23       	and	r20, r20
     e64:	51 f4       	brne	.+20     	; 0xe7a <LcdPixel+0x5a>
    {
        data &= ( ~( 0x01 << offset ) );
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <LcdPixel+0x50>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	6a 95       	dec	r22
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <LcdPixel+0x4c>
     e74:	80 95       	com	r24
     e76:	28 23       	and	r18, r24
     e78:	15 c0       	rjmp	.+42     	; 0xea4 <LcdPixel+0x84>
    }

    /* On mode */
    else if ( mode == PIXEL_ON )
     e7a:	41 30       	cpi	r20, 0x01	; 1
     e7c:	49 f4       	brne	.+18     	; 0xe90 <LcdPixel+0x70>
    {
        data |= ( 0x01 << offset );
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <LcdPixel+0x68>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	6a 95       	dec	r22
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <LcdPixel+0x64>
     e8c:	28 2b       	or	r18, r24
     e8e:	0a c0       	rjmp	.+20     	; 0xea4 <LcdPixel+0x84>
    }

    /* Xor mode */
    else if ( mode  == PIXEL_XOR )
     e90:	42 30       	cpi	r20, 0x02	; 2
     e92:	41 f4       	brne	.+16     	; 0xea4 <LcdPixel+0x84>
    {
        data ^= ( 0x01 << offset );
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <LcdPixel+0x7e>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	6a 95       	dec	r22
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <LcdPixel+0x7a>
     ea2:	28 27       	eor	r18, r24
    }

    /* Final result copied to cache */
    LcdCache[ index ] = data;
     ea4:	fd 01       	movw	r30, r26
     ea6:	ea 59       	subi	r30, 0x9A	; 154
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	20 83       	st	Z, r18

    if ( index < LoWaterMark )
     eac:	80 91 60 02 	lds	r24, 0x0260
     eb0:	90 91 61 02 	lds	r25, 0x0261
     eb4:	a8 17       	cp	r26, r24
     eb6:	b9 07       	cpc	r27, r25
     eb8:	20 f4       	brcc	.+8      	; 0xec2 <LcdPixel+0xa2>
    {
        /*  Update low marker. */
        LoWaterMark = index;
     eba:	b0 93 61 02 	sts	0x0261, r27
     ebe:	a0 93 60 02 	sts	0x0260, r26
    }

    if ( index > HiWaterMark )
     ec2:	80 91 62 02 	lds	r24, 0x0262
     ec6:	90 91 63 02 	lds	r25, 0x0263
     eca:	8a 17       	cp	r24, r26
     ecc:	9b 07       	cpc	r25, r27
     ece:	20 f4       	brcc	.+8      	; 0xed8 <LcdPixel+0xb8>
    {
        /*  Update high marker. */
        HiWaterMark = index;
     ed0:	b0 93 63 02 	sts	0x0263, r27
     ed4:	a0 93 62 02 	sts	0x0262, r26
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	08 95       	ret
     edc:	81 e0       	ldi	r24, 0x01	; 1
    }
    return OK;
}
     ede:	08 95       	ret

00000ee0 <LcdLine>:
 *                 x2, y2 -> Absolute pixel coordinates for line end.
 *                 mode   -> Off, On or Xor. See enum in pcd8544.h.
 * Return value :  see return value on pcd8544.h
 */
byte LcdLine ( byte x1, byte x2, byte y1, byte y2, LcdPixelMode mode )
{
     ee0:	5f 92       	push	r5
     ee2:	6f 92       	push	r6
     ee4:	7f 92       	push	r7
     ee6:	8f 92       	push	r8
     ee8:	9f 92       	push	r9
     eea:	af 92       	push	r10
     eec:	bf 92       	push	r11
     eee:	cf 92       	push	r12
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	c8 2e       	mov	r12, r24
     f00:	56 2e       	mov	r5, r22
     f02:	d4 2e       	mov	r13, r20
     f04:	62 2e       	mov	r6, r18
     f06:	70 2e       	mov	r7, r16
    /* dy   y2 - y1 */
    /* -- = ------- */
    /* dx   x2 - x1 */

    /* Take differences */
    dy = y2 - y1;
     f08:	02 2f       	mov	r16, r18
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	04 1b       	sub	r16, r20
     f0e:	11 09       	sbc	r17, r1
    dx = x2 - x1;
     f10:	c6 2f       	mov	r28, r22
     f12:	d0 e0       	ldi	r29, 0x00	; 0
     f14:	c8 1b       	sub	r28, r24
     f16:	d1 09       	sbc	r29, r1

    /* dy is negative */
    if ( dy < 0 )
     f18:	17 fd       	sbrc	r17, 7
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <LcdLine+0x44>
     f1c:	b1 e0       	ldi	r27, 0x01	; 1
     f1e:	8b 2e       	mov	r8, r27
     f20:	91 2c       	mov	r9, r1
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <LcdLine+0x50>
    {
        dy    = -dy;
     f24:	10 95       	com	r17
     f26:	01 95       	neg	r16
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	88 24       	eor	r8, r8
     f2c:	8a 94       	dec	r8
     f2e:	98 2c       	mov	r9, r8
    {
        stepy = 1;
    }

    /* dx is negative */
    if ( dx < 0 )
     f30:	d7 fd       	sbrc	r29, 7
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <LcdLine+0x5c>
     f34:	a1 e0       	ldi	r26, 0x01	; 1
     f36:	aa 2e       	mov	r10, r26
     f38:	b1 2c       	mov	r11, r1
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <LcdLine+0x68>
    {
        dx    = -dx;
     f3c:	d0 95       	com	r29
     f3e:	c1 95       	neg	r28
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	aa 24       	eor	r10, r10
     f44:	aa 94       	dec	r10
     f46:	ba 2c       	mov	r11, r10

    dx <<= 1;
    dy <<= 1;

    /* Draw initial position */
    response = LcdPixel( x1, y1, mode );
     f48:	47 2d       	mov	r20, r7
     f4a:	6d 2d       	mov	r22, r13
     f4c:	8c 2d       	mov	r24, r12
     f4e:	0e 94 10 07 	call	0xe20	; 0xe20 <LcdPixel>
    if(response)
     f52:	88 23       	and	r24, r24
     f54:	e9 f5       	brne	.+122    	; 0xfd0 <LcdLine+0xf0>
    else
    {
        stepx = 1;
    }

    dx <<= 1;
     f56:	7e 01       	movw	r14, r28
     f58:	ee 0c       	add	r14, r14
     f5a:	ff 1c       	adc	r15, r15
    dy <<= 1;
     f5c:	00 0f       	add	r16, r16
     f5e:	11 1f       	adc	r17, r17
    response = LcdPixel( x1, y1, mode );
    if(response)
        return response;

    /* Draw next positions until end */
    if ( dx > dy )
     f60:	0e 15       	cp	r16, r14
     f62:	1f 05       	cpc	r17, r15
     f64:	cc f4       	brge	.+50     	; 0xf98 <LcdLine+0xb8>
    {
        /* Take fraction */
        fraction = dy - ( dx >> 1);
     f66:	c7 01       	movw	r24, r14
     f68:	95 95       	asr	r25
     f6a:	87 95       	ror	r24
     f6c:	e8 01       	movw	r28, r16
     f6e:	c8 1b       	sub	r28, r24
     f70:	d9 0b       	sbc	r29, r25
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <LcdLine+0xb2>
        while ( x1 != x2 )
        {
            if ( fraction >= 0 )
     f74:	d7 fd       	sbrc	r29, 7
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <LcdLine+0x9e>
            {
                y1 += stepy;
     f78:	d8 0c       	add	r13, r8
                fraction -= dx;
     f7a:	ce 19       	sub	r28, r14
     f7c:	df 09       	sbc	r29, r15
     f7e:	ca 0c       	add	r12, r10
            }
            x1 += stepx;
            fraction += dy;

            /* Draw calculated point */
            response = LcdPixel( x1, y1, mode );
     f80:	47 2d       	mov	r20, r7
     f82:	6d 2d       	mov	r22, r13
     f84:	8c 2d       	mov	r24, r12
     f86:	0e 94 10 07 	call	0xe20	; 0xe20 <LcdPixel>
            if(response)
     f8a:	88 23       	and	r24, r24
     f8c:	09 f5       	brne	.+66     	; 0xfd0 <LcdLine+0xf0>
            {
                y1 += stepy;
                fraction -= dx;
            }
            x1 += stepx;
            fraction += dy;
     f8e:	c0 0f       	add	r28, r16
     f90:	d1 1f       	adc	r29, r17
    /* Draw next positions until end */
    if ( dx > dy )
    {
        /* Take fraction */
        fraction = dy - ( dx >> 1);
        while ( x1 != x2 )
     f92:	c5 14       	cp	r12, r5
     f94:	79 f7       	brne	.-34     	; 0xf74 <LcdLine+0x94>
     f96:	18 c0       	rjmp	.+48     	; 0xfc8 <LcdLine+0xe8>
        }
    }
    else
    {
        /* Take fraction */
        fraction = dx - ( dy >> 1);
     f98:	c8 01       	movw	r24, r16
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	e7 01       	movw	r28, r14
     fa0:	c8 1b       	sub	r28, r24
     fa2:	d9 0b       	sbc	r29, r25
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <LcdLine+0xe4>
        while ( y1 != y2 )
        {
            if ( fraction >= 0 )
     fa6:	d7 fd       	sbrc	r29, 7
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <LcdLine+0xd0>
            {
                x1 += stepx;
     faa:	ca 0c       	add	r12, r10
                fraction -= dy;
     fac:	c0 1b       	sub	r28, r16
     fae:	d1 0b       	sbc	r29, r17
     fb0:	d8 0c       	add	r13, r8
            }
            y1 += stepy;
            fraction += dx;

            /* Draw calculated point */
            response = LcdPixel( x1, y1, mode );
     fb2:	47 2d       	mov	r20, r7
     fb4:	6d 2d       	mov	r22, r13
     fb6:	8c 2d       	mov	r24, r12
     fb8:	0e 94 10 07 	call	0xe20	; 0xe20 <LcdPixel>
            if(response)
     fbc:	88 23       	and	r24, r24
     fbe:	41 f4       	brne	.+16     	; 0xfd0 <LcdLine+0xf0>
            {
                x1 += stepx;
                fraction -= dy;
            }
            y1 += stepy;
            fraction += dx;
     fc0:	ce 0d       	add	r28, r14
     fc2:	df 1d       	adc	r29, r15
    }
    else
    {
        /* Take fraction */
        fraction = dx - ( dy >> 1);
        while ( y1 != y2 )
     fc4:	d6 14       	cp	r13, r6
     fc6:	79 f7       	brne	.-34     	; 0xfa6 <LcdLine+0xc6>
                return response;
        }
    }

    /* Set update flag to be true */
    UpdateLcd = TRUE;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 64 02 	sts	0x0264, r24
     fce:	80 e0       	ldi	r24, 0x00	; 0
    return OK;
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	cf 90       	pop	r12
     fe0:	bf 90       	pop	r11
     fe2:	af 90       	pop	r10
     fe4:	9f 90       	pop	r9
     fe6:	8f 90       	pop	r8
     fe8:	7f 90       	pop	r7
     fea:	6f 90       	pop	r6
     fec:	5f 90       	pop	r5
     fee:	08 95       	ret

00000ff0 <LcdSingleBar>:
 *				   width  -> width of bar (in pixel)
 *				   mode   -> Off, On or Xor. See enum in pcd8544.h.
 * Return value :  see return value on pcd8544.h
 */
byte LcdSingleBar ( byte baseX, byte baseY, byte height, byte width, LcdPixelMode mode )
{
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	e8 2e       	mov	r14, r24
    1000:	f6 2e       	mov	r15, r22
    1002:	d0 2e       	mov	r13, r16
	byte tmpIdxX,tmpIdxY,tmp;

    byte response;

    /* Checking border */
	if ( ( baseX > LCD_X_RES ) || ( baseY > LCD_Y_RES ) ) return OUT_OF_BORDER;
    1004:	84 e5       	ldi	r24, 0x54	; 84
    1006:	8e 15       	cp	r24, r14
    1008:	30 f1       	brcs	.+76     	; 0x1056 <LcdSingleBar+0x66>
    100a:	80 e3       	ldi	r24, 0x30	; 48
    100c:	86 17       	cp	r24, r22
    100e:	18 f1       	brcs	.+70     	; 0x1056 <LcdSingleBar+0x66>

	if ( height > baseY )
    1010:	64 17       	cp	r22, r20
    1012:	10 f4       	brcc	.+4      	; 0x1018 <LcdSingleBar+0x28>
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	12 c0       	rjmp	.+36     	; 0x103c <LcdSingleBar+0x4c>
		tmp = 0;
	else
		tmp = baseY - height;
    1018:	06 2f       	mov	r16, r22
    101a:	04 1b       	sub	r16, r20
    101c:	0f c0       	rjmp	.+30     	; 0x103c <LcdSingleBar+0x4c>
    /* Draw lines */
	for ( tmpIdxY = tmp; tmpIdxY < baseY; tmpIdxY++ )
	{
		for ( tmpIdxX = baseX; tmpIdxX < (baseX + width); tmpIdxX++ )
        {
			response = LcdPixel( tmpIdxX, tmpIdxY, mode );
    101e:	4d 2d       	mov	r20, r13
    1020:	60 2f       	mov	r22, r16
    1022:	81 2f       	mov	r24, r17
    1024:	0e 94 10 07 	call	0xe20	; 0xe20 <LcdPixel>
            if(response)
    1028:	88 23       	and	r24, r24
    102a:	b1 f4       	brne	.+44     	; 0x1058 <LcdSingleBar+0x68>
		tmp = baseY - height;

    /* Draw lines */
	for ( tmpIdxY = tmp; tmpIdxY < baseY; tmpIdxY++ )
	{
		for ( tmpIdxX = baseX; tmpIdxX < (baseX + width); tmpIdxX++ )
    102c:	1f 5f       	subi	r17, 0xFF	; 255
    102e:	81 2f       	mov	r24, r17
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	8c 17       	cp	r24, r28
    1034:	9d 07       	cpc	r25, r29
    1036:	9c f3       	brlt	.-26     	; 0x101e <LcdSingleBar+0x2e>
		tmp = 0;
	else
		tmp = baseY - height;

    /* Draw lines */
	for ( tmpIdxY = tmp; tmpIdxY < baseY; tmpIdxY++ )
    1038:	0f 5f       	subi	r16, 0xFF	; 255
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <LcdSingleBar+0x54>
	{
		for ( tmpIdxX = baseX; tmpIdxX < (baseX + width); tmpIdxX++ )
    103c:	ce 2d       	mov	r28, r14
    103e:	d0 e0       	ldi	r29, 0x00	; 0
    1040:	c2 0f       	add	r28, r18
    1042:	d1 1d       	adc	r29, r1
		tmp = 0;
	else
		tmp = baseY - height;

    /* Draw lines */
	for ( tmpIdxY = tmp; tmpIdxY < baseY; tmpIdxY++ )
    1044:	0f 15       	cp	r16, r15
    1046:	10 f4       	brcc	.+4      	; 0x104c <LcdSingleBar+0x5c>
    1048:	1e 2d       	mov	r17, r14
    104a:	f1 cf       	rjmp	.-30     	; 0x102e <LcdSingleBar+0x3e>

        }
	}

    /* Set update flag to be true */
	UpdateLcd = TRUE;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 64 02 	sts	0x0264, r24
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <LcdSingleBar+0x68>
    return OK;
    1056:	81 e0       	ldi	r24, 0x01	; 1
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	08 95       	ret

00001068 <LcdBars>:
 *				   width  -> width of bar (in pixel)
 * Return value :  see return value on pcd8544.h
 * Note         :  Please check EMPTY_SPACE_BARS, BAR_X, BAR_Y in pcd8544.h
 */
byte LcdBars ( byte data[], byte numbBars, byte width, byte multiplier )
{
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	7c 01       	movw	r14, r24
    107e:	a6 2e       	mov	r10, r22
    1080:	d4 2e       	mov	r13, r20
    1082:	b2 2e       	mov	r11, r18
    1084:	12 e0       	ldi	r17, 0x02	; 2
    1086:	c1 2e       	mov	r12, r17
    1088:	c4 0e       	add	r12, r20
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	c0 e0       	ldi	r28, 0x00	; 0
    108e:	d0 e0       	ldi	r29, 0x00	; 0
    1090:	15 e0       	ldi	r17, 0x05	; 5
    1092:	18 c0       	rjmp	.+48     	; 0x10c4 <LcdBars+0x5c>
    byte response;

	for ( b = 0;  b < numbBars ; b++ )
	{
        /* Preventing from out of border (LCD_X_RES) */
		if ( tmpIdx > LCD_X_RES ) return OUT_OF_BORDER;
    1094:	85 35       	cpi	r24, 0x55	; 85
    1096:	10 f0       	brcs	.+4      	; 0x109c <LcdBars+0x34>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	1a c0       	rjmp	.+52     	; 0x10d0 <LcdBars+0x68>

		/* Calculate x axis */
		tmpIdx = ((width + EMPTY_SPACE_BARS) * b) + BAR_X;

		/* Draw single bar */
		response = LcdSingleBar( tmpIdx, BAR_Y, data[ b ] * multiplier, width, PIXEL_ON);
    109c:	f7 01       	movw	r30, r14
    109e:	ec 0f       	add	r30, r28
    10a0:	fd 1f       	adc	r31, r29
    10a2:	40 81       	ld	r20, Z
    10a4:	b4 9e       	mul	r11, r20
    10a6:	40 2d       	mov	r20, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	01 e0       	ldi	r16, 0x01	; 1
    10ac:	2d 2d       	mov	r18, r13
    10ae:	66 e2       	ldi	r22, 0x26	; 38
    10b0:	81 2f       	mov	r24, r17
    10b2:	0e 94 f8 07 	call	0xff0	; 0xff0 <LcdSingleBar>
    10b6:	21 96       	adiw	r28, 0x01	; 1
    10b8:	91 2f       	mov	r25, r17
    10ba:	9c 0d       	add	r25, r12
        if(response == OUT_OF_BORDER)
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	41 f0       	breq	.+16     	; 0x10d0 <LcdBars+0x68>
    10c0:	81 2f       	mov	r24, r17
    10c2:	19 2f       	mov	r17, r25
{
	byte b;
	byte tmpIdx = 0;
    byte response;

	for ( b = 0;  b < numbBars ; b++ )
    10c4:	ca 15       	cp	r28, r10
    10c6:	30 f3       	brcs	.-52     	; 0x1094 <LcdBars+0x2c>
        if(response == OUT_OF_BORDER)
            return response;
	}

	/* Set update flag to be true */
	UpdateLcd = TRUE;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 64 02 	sts	0x0264, r24
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    return OK;

}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	08 95       	ret

000010e6 <LcdRect>:
 *				   y2   -> absolute second y axis coordinate
 *				   mode -> Off, On or Xor. See enum in pcd8544.h.
 * Return value :  see return value on pcd8544.h.
 */
byte LcdRect ( byte x1, byte x2, byte y1, byte y2, LcdPixelMode mode )
{
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	d8 2e       	mov	r13, r24
    10f4:	e6 2e       	mov	r14, r22
    10f6:	f2 2e       	mov	r15, r18
    10f8:	c0 2e       	mov	r12, r16
	byte tmpIdxX,tmpIdxY;
    byte response;

	/* Checking border */
	if ( ( x1 > LCD_X_RES ) ||  ( x2 > LCD_X_RES ) || ( y1 > LCD_Y_RES ) || ( y2 > LCD_Y_RES ) )
    10fa:	84 e5       	ldi	r24, 0x54	; 84
    10fc:	8d 15       	cp	r24, r13
    10fe:	00 f1       	brcs	.+64     	; 0x1140 <LcdRect+0x5a>
    1100:	86 17       	cp	r24, r22
    1102:	f0 f0       	brcs	.+60     	; 0x1140 <LcdRect+0x5a>
    1104:	41 33       	cpi	r20, 0x31	; 49
    1106:	e0 f4       	brcc	.+56     	; 0x1140 <LcdRect+0x5a>
    1108:	80 e3       	ldi	r24, 0x30	; 48
    110a:	82 17       	cp	r24, r18
    110c:	c8 f0       	brcs	.+50     	; 0x1140 <LcdRect+0x5a>
		/* If out of border then return */
		return OUT_OF_BORDER;

	if ( ( x2 > x1 ) && ( y2 > y1 ) )
    110e:	d6 16       	cp	r13, r22
    1110:	c8 f4       	brcc	.+50     	; 0x1144 <LcdRect+0x5e>
    1112:	42 17       	cp	r20, r18
    1114:	b8 f4       	brcc	.+46     	; 0x1144 <LcdRect+0x5e>
    1116:	04 2f       	mov	r16, r20
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <LcdRect+0x4a>
		{
			/* Draw line horizontally */
			for ( tmpIdxX = x1; tmpIdxX < x2; tmpIdxX++ )
            {
				/* Draw a pixel */
				response = LcdPixel( tmpIdxX, tmpIdxY, mode );
    111a:	4c 2d       	mov	r20, r12
    111c:	60 2f       	mov	r22, r16
    111e:	81 2f       	mov	r24, r17
    1120:	0e 94 10 07 	call	0xe20	; 0xe20 <LcdPixel>
                if(response)
    1124:	88 23       	and	r24, r24
    1126:	79 f4       	brne	.+30     	; 0x1146 <LcdRect+0x60>
	if ( ( x2 > x1 ) && ( y2 > y1 ) )
	{
		for ( tmpIdxY = y1; tmpIdxY < y2; tmpIdxY++ )
		{
			/* Draw line horizontally */
			for ( tmpIdxX = x1; tmpIdxX < x2; tmpIdxX++ )
    1128:	1f 5f       	subi	r17, 0xFF	; 255
    112a:	1e 15       	cp	r17, r14
    112c:	b0 f3       	brcs	.-20     	; 0x111a <LcdRect+0x34>
		/* If out of border then return */
		return OUT_OF_BORDER;

	if ( ( x2 > x1 ) && ( y2 > y1 ) )
	{
		for ( tmpIdxY = y1; tmpIdxY < y2; tmpIdxY++ )
    112e:	0f 5f       	subi	r16, 0xFF	; 255
    1130:	0f 15       	cp	r16, r15
    1132:	10 f4       	brcc	.+4      	; 0x1138 <LcdRect+0x52>
    1134:	1d 2d       	mov	r17, r13
    1136:	f9 cf       	rjmp	.-14     	; 0x112a <LcdRect+0x44>
                    return response;
            }
		}

		/* Set update flag to be true */
		UpdateLcd = TRUE;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 64 02 	sts	0x0264, r24
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <LcdRect+0x5e>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <LcdRect+0x60>
    1144:	80 e0       	ldi	r24, 0x00	; 0
	}
    return OK;
}
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	08 95       	ret

00001154 <LcdUpdate>:
 * Description  :  Copies the LCD cache into the device RAM.
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdUpdate ( void )
{
    1154:	80 91 60 02 	lds	r24, 0x0260
    1158:	90 91 61 02 	lds	r25, 0x0261
    115c:	97 ff       	sbrs	r25, 7
    115e:	05 c0       	rjmp	.+10     	; 0x116a <LcdUpdate+0x16>
    int i;

    if ( LoWaterMark < 0 )
        LoWaterMark = 0;
    1160:	10 92 61 02 	sts	0x0261, r1
    1164:	10 92 60 02 	sts	0x0260, r1
    1168:	09 c0       	rjmp	.+18     	; 0x117c <LcdUpdate+0x28>
    else if ( LoWaterMark >= LCD_CACHE_SIZE )
    116a:	88 5f       	subi	r24, 0xF8	; 248
    116c:	91 40       	sbci	r25, 0x01	; 1
    116e:	34 f0       	brlt	.+12     	; 0x117c <LcdUpdate+0x28>
        LoWaterMark = LCD_CACHE_SIZE - 1;
    1170:	87 ef       	ldi	r24, 0xF7	; 247
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	90 93 61 02 	sts	0x0261, r25
    1178:	80 93 60 02 	sts	0x0260, r24

    if ( HiWaterMark < 0 )
    117c:	80 91 62 02 	lds	r24, 0x0262
    1180:	90 91 63 02 	lds	r25, 0x0263
    1184:	97 ff       	sbrs	r25, 7
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <LcdUpdate+0x3e>
        HiWaterMark = 0;
    1188:	10 92 63 02 	sts	0x0263, r1
    118c:	10 92 62 02 	sts	0x0262, r1
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <LcdUpdate+0x50>
    else if ( HiWaterMark >= LCD_CACHE_SIZE )
    1192:	88 5f       	subi	r24, 0xF8	; 248
    1194:	91 40       	sbci	r25, 0x01	; 1
    1196:	34 f0       	brlt	.+12     	; 0x11a4 <LcdUpdate+0x50>
        HiWaterMark = LCD_CACHE_SIZE - 1;
    1198:	87 ef       	ldi	r24, 0xF7	; 247
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	90 93 63 02 	sts	0x0263, r25
    11a0:	80 93 62 02 	sts	0x0262, r24

    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
    11a4:	20 91 60 02 	lds	r18, 0x0260
    11a8:	30 91 61 02 	lds	r19, 0x0261
    11ac:	c9 01       	movw	r24, r18
    11ae:	64 e5       	ldi	r22, 0x54	; 84
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
    11b6:	80 68       	ori	r24, 0x80	; 128
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    11b8:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    11ba:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    11bc:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    11be:	77 9b       	sbis	0x0e, 7	; 14
    11c0:	fe cf       	rjmp	.-4      	; 0x11be <LcdUpdate+0x6a>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    11c2:	c2 9a       	sbi	0x18, 2	; 24
    else if ( HiWaterMark >= LCD_CACHE_SIZE )
        HiWaterMark = LCD_CACHE_SIZE - 1;

    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
    LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );
    11c4:	c9 01       	movw	r24, r18
    11c6:	64 e5       	ldi	r22, 0x54	; 84
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <__divmodhi4>
    11ce:	60 64       	ori	r22, 0x40	; 64
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    11d0:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    11d2:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    11d4:	6f b9       	out	0x0f, r22	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    11d6:	77 9b       	sbis	0x0e, 7	; 14
    11d8:	fe cf       	rjmp	.-4      	; 0x11d6 <LcdUpdate+0x82>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    11da:	c2 9a       	sbi	0x18, 2	; 24
    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
    LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

    /*  Serialize the display buffer. */
    for ( i = LoWaterMark; i <= HiWaterMark; i++ )
    11dc:	40 91 62 02 	lds	r20, 0x0262
    11e0:	50 91 63 02 	lds	r21, 0x0263
    11e4:	f9 01       	movw	r30, r18
    11e6:	ea 59       	subi	r30, 0x9A	; 154
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	0a c0       	rjmp	.+20     	; 0x1200 <LcdUpdate+0xac>
    {
        LcdSend( LcdCache[ i ], LCD_DATA );
    11ec:	80 81       	ld	r24, Z
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    11ee:	c2 98       	cbi	0x18, 2	; 24

    if ( cd == LCD_DATA )
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    11f0:	c1 9a       	sbi	0x18, 1	; 24
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    }

    /*  Send data to display controller. */
    SPDR = data;
    11f2:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    11f4:	77 9b       	sbis	0x0e, 7	; 14
    11f6:	fe cf       	rjmp	.-4      	; 0x11f4 <LcdUpdate+0xa0>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    11f8:	c2 9a       	sbi	0x18, 2	; 24
    /*  Set base address according to LoWaterMark. */
    LcdSend( 0x80 | ( LoWaterMark % LCD_X_RES ), LCD_CMD );
    LcdSend( 0x40 | ( LoWaterMark / LCD_X_RES ), LCD_CMD );

    /*  Serialize the display buffer. */
    for ( i = LoWaterMark; i <= HiWaterMark; i++ )
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	42 17       	cp	r20, r18
    1202:	53 07       	cpc	r21, r19
    1204:	9c f7       	brge	.-26     	; 0x11ec <LcdUpdate+0x98>
    {
        LcdSend( LcdCache[ i ], LCD_DATA );
    }

    /*  Reset watermark pointers. */
    LoWaterMark = LCD_CACHE_SIZE - 1;
    1206:	87 ef       	ldi	r24, 0xF7	; 247
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	90 93 61 02 	sts	0x0261, r25
    120e:	80 93 60 02 	sts	0x0260, r24
    HiWaterMark = 0;
    1212:	10 92 63 02 	sts	0x0263, r1
    1216:	10 92 62 02 	sts	0x0262, r1

    /* Set update flag to be true */
	UpdateLcd = FALSE;
    121a:	10 92 64 02 	sts	0x0264, r1
}
    121e:	08 95       	ret

00001220 <LcdImage>:
 * Argument(s)  :  Address of image in hexes
 * Return value :  None.
 * Example      :  LcdImage(&sample_image_declared_as_array);
 */
void LcdImage ( const byte *imageData )
{
    1220:	48 ef       	ldi	r20, 0xF8	; 248
    1222:	51 e0       	ldi	r21, 0x01	; 1
    1224:	bc 01       	movw	r22, r24
    1226:	86 e6       	ldi	r24, 0x66	; 102
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 98 09 	call	0x1330	; 0x1330 <memcpy_P>
//        LcdCache[LcdCacheIdx] = pgm_read_byte( imageData++ );
//    }
	/* optimized by Jakub Lasinski, version 0.2.6, March 14, 2009 */
    memcpy_P(LcdCache,imageData,LCD_CACHE_SIZE);	//Same as aboeve - 6 bytes less and faster instruction
	/* Reset watermark pointers to be full */
    LoWaterMark = 0;
    122e:	10 92 61 02 	sts	0x0261, r1
    1232:	10 92 60 02 	sts	0x0260, r1
    HiWaterMark = LCD_CACHE_SIZE - 1;
    1236:	87 ef       	ldi	r24, 0xF7	; 247
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	90 93 63 02 	sts	0x0263, r25
    123e:	80 93 62 02 	sts	0x0262, r24

	/* Set update flag to be true */
    UpdateLcd = TRUE;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 93 64 02 	sts	0x0264, r24
}
    1248:	08 95       	ret

0000124a <LcdClear>:
 * Argument(s)  :  None.
 * Return value :  None.
 * Note         :  Based on Sylvain Bissonette's code
 */
void LcdClear ( void )
{
    124a:	88 ef       	ldi	r24, 0xF8	; 248
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	e6 e6       	ldi	r30, 0x66	; 102
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	df 01       	movw	r26, r30
    1254:	9c 01       	movw	r18, r24
    1256:	1d 92       	st	X+, r1
    1258:	21 50       	subi	r18, 0x01	; 1
    125a:	30 40       	sbci	r19, 0x00	; 0
    125c:	e1 f7       	brne	.-8      	; 0x1256 <LcdClear+0xc>
//    {
//        LcdCache[ i ] = 0x00;
//    }
	memset(LcdCache,0x00,LCD_CACHE_SIZE); //Sugestion - its faster and its 10 bytes less in program mem
    /* Reset watermark pointers to full */
    LoWaterMark = 0;
    125e:	10 92 61 02 	sts	0x0261, r1
    1262:	10 92 60 02 	sts	0x0260, r1
    HiWaterMark = LCD_CACHE_SIZE - 1;
    1266:	87 ef       	ldi	r24, 0xF7	; 247
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	90 93 63 02 	sts	0x0263, r25
    126e:	80 93 62 02 	sts	0x0262, r24

    /* Set update flag to be true */
    UpdateLcd = TRUE;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 93 64 02 	sts	0x0264, r24
}
    1278:	08 95       	ret

0000127a <LcdInit>:
 * Description  :  Performs MCU SPI & LCD controller initialization.
 * Argument(s)  :  None.
 * Return value :  None.
 */
void LcdInit ( void )
{
    127a:	c4 9a       	sbi	0x18, 4	; 24
    /* Pull-up on reset pin. */
    LCD_PORT |= _BV ( LCD_RST_PIN );

    /* Set output bits on LCD Port. */
    LCD_DDR |= _BV( LCD_RST_PIN ) | _BV( LCD_DC_PIN ) | _BV( LCD_CE_PIN ) | _BV( SPI_MOSI_PIN ) | _BV( SPI_CLK_PIN );
    127c:	87 b3       	in	r24, 0x17	; 23
    127e:	8e 63       	ori	r24, 0x3E	; 62
    1280:	87 bb       	out	0x17, r24	; 23

    Delay();

    /* Toggle display reset pin. */
    LCD_PORT &= ~( _BV( LCD_RST_PIN ) );
    1282:	c4 98       	cbi	0x18, 4	; 24
    Delay();
    LCD_PORT |= _BV ( LCD_RST_PIN );
    1284:	c4 9a       	sbi	0x18, 4	; 24

    /* Enable SPI port:
    * No interrupt, MSBit first, Master mode, CPOL->0, CPHA->0, Clk/4
    */
    SPCR = 0x50;
    1286:	80 e5       	ldi	r24, 0x50	; 80
    1288:	8d b9       	out	0x0d, r24	; 13

    /* Disable LCD controller */
    LCD_PORT |= _BV( LCD_CE_PIN );
    128a:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    128c:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    128e:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    1290:	81 e2       	ldi	r24, 0x21	; 33
    1292:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    1294:	77 9b       	sbis	0x0e, 7	; 14
    1296:	fe cf       	rjmp	.-4      	; 0x1294 <LcdInit+0x1a>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    1298:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    129a:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    129c:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    12a2:	77 9b       	sbis	0x0e, 7	; 14
    12a4:	fe cf       	rjmp	.-4      	; 0x12a2 <LcdInit+0x28>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    12a6:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    12a8:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    12aa:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    12ac:	86 e0       	ldi	r24, 0x06	; 6
    12ae:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    12b0:	77 9b       	sbis	0x0e, 7	; 14
    12b2:	fe cf       	rjmp	.-4      	; 0x12b0 <LcdInit+0x36>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    12b4:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    12b6:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    12b8:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    12ba:	83 e1       	ldi	r24, 0x13	; 19
    12bc:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    12be:	77 9b       	sbis	0x0e, 7	; 14
    12c0:	fe cf       	rjmp	.-4      	; 0x12be <LcdInit+0x44>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    12c2:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    12c4:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    12c6:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    12cc:	77 9b       	sbis	0x0e, 7	; 14
    12ce:	fe cf       	rjmp	.-4      	; 0x12cc <LcdInit+0x52>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    12d0:	c2 9a       	sbi	0x18, 2	; 24
 * Return value :  None.
 */
static void LcdSend ( byte data, LcdCmdData cd )
{
    /*  Enable display controller (active low). */
    LCD_PORT &= ~( _BV( LCD_CE_PIN ) );
    12d2:	c2 98       	cbi	0x18, 2	; 24
    {
        LCD_PORT |= _BV( LCD_DC_PIN );
    }
    else
    {
        LCD_PORT &= ~( _BV( LCD_DC_PIN ) );
    12d4:	c1 98       	cbi	0x18, 1	; 24
    }

    /*  Send data to display controller. */
    SPDR = data;
    12d6:	8c e0       	ldi	r24, 0x0C	; 12
    12d8:	8f b9       	out	0x0f, r24	; 15

    /*  Wait until Tx register empty. */
    while ( (SPSR & 0x80) != 0x80 );
    12da:	77 9b       	sbis	0x0e, 7	; 14
    12dc:	fe cf       	rjmp	.-4      	; 0x12da <LcdInit+0x60>


    /* Disable display controller. */
    LCD_PORT |= _BV( LCD_CE_PIN );
    12de:	c2 9a       	sbi	0x18, 2	; 24
    LcdSend( 0x13, LCD_CMD ); /* LCD bias mode 1:48. */
    LcdSend( 0x20, LCD_CMD ); /* LCD Standard Commands,Horizontal addressing mode */
    LcdSend( 0x0C, LCD_CMD ); /* LCD in normal mode. */

    /* Reset watermark pointers to empty */
    LoWaterMark = LCD_CACHE_SIZE;
    12e0:	88 ef       	ldi	r24, 0xF8	; 248
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	90 93 61 02 	sts	0x0261, r25
    12e8:	80 93 60 02 	sts	0x0260, r24
    HiWaterMark = 0;
    12ec:	10 92 63 02 	sts	0x0263, r1
    12f0:	10 92 62 02 	sts	0x0262, r1

    /* Clear display on first time use */
    LcdClear();
    12f4:	0e 94 25 09 	call	0x124a	; 0x124a <LcdClear>
    LcdUpdate();
    12f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <LcdUpdate>
}
    12fc:	08 95       	ret

000012fe <adc_read>:
// Function : adc_read
// Description : read ADC value, select ADC channel to read by channel argument
//
//********************************************************************************************
unsigned int adc_read ( char channel )
{
    12fe:	97 b1       	in	r25, 0x07	; 7
    1300:	8f 71       	andi	r24, 0x1F	; 31
    1302:	90 7e       	andi	r25, 0xE0	; 224
    1304:	89 2b       	or	r24, r25
    1306:	87 b9       	out	0x07, r24	; 7
	unsigned char temp;
	// Analog channel selection
	ADMUX = ((ADMUX) & ~0x1f) | (channel & 0x1f);
	
	// Start conversion
	ADCSRA |= _BV(ADSC);
    1308:	36 9a       	sbi	0x06, 6	; 6

	// Wait until conversion complete
	while( bit_is_set(ADCSRA, ADSC) );
    130a:	36 99       	sbic	0x06, 6	; 6
    130c:	fe cf       	rjmp	.-4      	; 0x130a <adc_read+0xc>
	// CAUTION: READ ADCL BEFORE ADCH!!!
	return ((ADCL) | ((ADCH)<<8));
    130e:	24 b1       	in	r18, 0x04	; 4
    1310:	45 b1       	in	r20, 0x05	; 5
    1312:	94 2f       	mov	r25, r20
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	28 2b       	or	r18, r24
    131a:	39 2b       	or	r19, r25
//	temp = ADCL;
//	return (ADCH);
}
    131c:	c9 01       	movw	r24, r18
    131e:	08 95       	ret

00001320 <adc_init>:
// Description : Initial analog to digital convertion
//
//********************************************************************************************
//void adc_init ( void ) __attribute__ ((naked));
void adc_init ( void )
{
    1320:	37 9a       	sbi	0x06, 7	; 6

	ADCSRA |= _BV(ADEN); // for now we don't do this in the ISR | _BV(ADIE);
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1); // clk is / 64
    1322:	86 b1       	in	r24, 0x06	; 6
    1324:	86 60       	ori	r24, 0x06	; 6
    1326:	86 b9       	out	0x06, r24	; 6
	ADCSRA = _BV(ADEN) |   _BV(ADPS1) ; // _BV(ADFR) |

	// Select Vref, internal Vref 2.56V and external capacitor | _BV(ADLAR) _BV(REFS1) |
	ADMUX =  _BV(REFS0)| _BV(ADLAR) ;
*/
}
    1328:	08 95       	ret

0000132a <exit>:
    132a:	f8 94       	cli
    132c:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_exit>

00001330 <memcpy_P>:
    1330:	fb 01       	movw	r30, r22
    1332:	dc 01       	movw	r26, r24
    1334:	02 c0       	rjmp	.+4      	; 0x133a <memcpy_P+0xa>
    1336:	05 90       	lpm	r0, Z+
    1338:	0d 92       	st	X+, r0
    133a:	41 50       	subi	r20, 0x01	; 1
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	d8 f7       	brcc	.-10     	; 0x1336 <memcpy_P+0x6>
    1340:	08 95       	ret

00001342 <__subsf3>:
    1342:	50 58       	subi	r21, 0x80	; 128

00001344 <__addsf3>:
    1344:	bb 27       	eor	r27, r27
    1346:	aa 27       	eor	r26, r26
    1348:	0e d0       	rcall	.+28     	; 0x1366 <__addsf3x>
    134a:	75 c1       	rjmp	.+746    	; 0x1636 <__fp_round>
    134c:	66 d1       	rcall	.+716    	; 0x161a <__fp_pscA>
    134e:	30 f0       	brcs	.+12     	; 0x135c <__addsf3+0x18>
    1350:	6b d1       	rcall	.+726    	; 0x1628 <__fp_pscB>
    1352:	20 f0       	brcs	.+8      	; 0x135c <__addsf3+0x18>
    1354:	31 f4       	brne	.+12     	; 0x1362 <__addsf3+0x1e>
    1356:	9f 3f       	cpi	r25, 0xFF	; 255
    1358:	11 f4       	brne	.+4      	; 0x135e <__addsf3+0x1a>
    135a:	1e f4       	brtc	.+6      	; 0x1362 <__addsf3+0x1e>
    135c:	5b c1       	rjmp	.+694    	; 0x1614 <__fp_nan>
    135e:	0e f4       	brtc	.+2      	; 0x1362 <__addsf3+0x1e>
    1360:	e0 95       	com	r30
    1362:	e7 fb       	bst	r30, 7
    1364:	51 c1       	rjmp	.+674    	; 0x1608 <__fp_inf>

00001366 <__addsf3x>:
    1366:	e9 2f       	mov	r30, r25
    1368:	77 d1       	rcall	.+750    	; 0x1658 <__fp_split3>
    136a:	80 f3       	brcs	.-32     	; 0x134c <__addsf3+0x8>
    136c:	ba 17       	cp	r27, r26
    136e:	62 07       	cpc	r22, r18
    1370:	73 07       	cpc	r23, r19
    1372:	84 07       	cpc	r24, r20
    1374:	95 07       	cpc	r25, r21
    1376:	18 f0       	brcs	.+6      	; 0x137e <__addsf3x+0x18>
    1378:	71 f4       	brne	.+28     	; 0x1396 <__addsf3x+0x30>
    137a:	9e f5       	brtc	.+102    	; 0x13e2 <__addsf3x+0x7c>
    137c:	8f c1       	rjmp	.+798    	; 0x169c <__fp_zero>
    137e:	0e f4       	brtc	.+2      	; 0x1382 <__addsf3x+0x1c>
    1380:	e0 95       	com	r30
    1382:	0b 2e       	mov	r0, r27
    1384:	ba 2f       	mov	r27, r26
    1386:	a0 2d       	mov	r26, r0
    1388:	0b 01       	movw	r0, r22
    138a:	b9 01       	movw	r22, r18
    138c:	90 01       	movw	r18, r0
    138e:	0c 01       	movw	r0, r24
    1390:	ca 01       	movw	r24, r20
    1392:	a0 01       	movw	r20, r0
    1394:	11 24       	eor	r1, r1
    1396:	ff 27       	eor	r31, r31
    1398:	59 1b       	sub	r21, r25
    139a:	99 f0       	breq	.+38     	; 0x13c2 <__addsf3x+0x5c>
    139c:	59 3f       	cpi	r21, 0xF9	; 249
    139e:	50 f4       	brcc	.+20     	; 0x13b4 <__addsf3x+0x4e>
    13a0:	50 3e       	cpi	r21, 0xE0	; 224
    13a2:	68 f1       	brcs	.+90     	; 0x13fe <__addsf3x+0x98>
    13a4:	1a 16       	cp	r1, r26
    13a6:	f0 40       	sbci	r31, 0x00	; 0
    13a8:	a2 2f       	mov	r26, r18
    13aa:	23 2f       	mov	r18, r19
    13ac:	34 2f       	mov	r19, r20
    13ae:	44 27       	eor	r20, r20
    13b0:	58 5f       	subi	r21, 0xF8	; 248
    13b2:	f3 cf       	rjmp	.-26     	; 0x139a <__addsf3x+0x34>
    13b4:	46 95       	lsr	r20
    13b6:	37 95       	ror	r19
    13b8:	27 95       	ror	r18
    13ba:	a7 95       	ror	r26
    13bc:	f0 40       	sbci	r31, 0x00	; 0
    13be:	53 95       	inc	r21
    13c0:	c9 f7       	brne	.-14     	; 0x13b4 <__addsf3x+0x4e>
    13c2:	7e f4       	brtc	.+30     	; 0x13e2 <__addsf3x+0x7c>
    13c4:	1f 16       	cp	r1, r31
    13c6:	ba 0b       	sbc	r27, r26
    13c8:	62 0b       	sbc	r22, r18
    13ca:	73 0b       	sbc	r23, r19
    13cc:	84 0b       	sbc	r24, r20
    13ce:	ba f0       	brmi	.+46     	; 0x13fe <__addsf3x+0x98>
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <__addsf3x+0x96>
    13d4:	ff 0f       	add	r31, r31
    13d6:	bb 1f       	adc	r27, r27
    13d8:	66 1f       	adc	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	c2 f7       	brpl	.-16     	; 0x13d0 <__addsf3x+0x6a>
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <__addsf3x+0x98>
    13e2:	ba 0f       	add	r27, r26
    13e4:	62 1f       	adc	r22, r18
    13e6:	73 1f       	adc	r23, r19
    13e8:	84 1f       	adc	r24, r20
    13ea:	48 f4       	brcc	.+18     	; 0x13fe <__addsf3x+0x98>
    13ec:	87 95       	ror	r24
    13ee:	77 95       	ror	r23
    13f0:	67 95       	ror	r22
    13f2:	b7 95       	ror	r27
    13f4:	f7 95       	ror	r31
    13f6:	9e 3f       	cpi	r25, 0xFE	; 254
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__addsf3x+0x96>
    13fa:	b3 cf       	rjmp	.-154    	; 0x1362 <__addsf3+0x1e>
    13fc:	93 95       	inc	r25
    13fe:	88 0f       	add	r24, r24
    1400:	08 f0       	brcs	.+2      	; 0x1404 <__addsf3x+0x9e>
    1402:	99 27       	eor	r25, r25
    1404:	ee 0f       	add	r30, r30
    1406:	97 95       	ror	r25
    1408:	87 95       	ror	r24
    140a:	08 95       	ret

0000140c <__cmpsf2>:
    140c:	d9 d0       	rcall	.+434    	; 0x15c0 <__fp_cmp>
    140e:	08 f4       	brcc	.+2      	; 0x1412 <__cmpsf2+0x6>
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	08 95       	ret

00001414 <__divsf3>:
    1414:	0c d0       	rcall	.+24     	; 0x142e <__divsf3x>
    1416:	0f c1       	rjmp	.+542    	; 0x1636 <__fp_round>
    1418:	07 d1       	rcall	.+526    	; 0x1628 <__fp_pscB>
    141a:	40 f0       	brcs	.+16     	; 0x142c <__divsf3+0x18>
    141c:	fe d0       	rcall	.+508    	; 0x161a <__fp_pscA>
    141e:	30 f0       	brcs	.+12     	; 0x142c <__divsf3+0x18>
    1420:	21 f4       	brne	.+8      	; 0x142a <__divsf3+0x16>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	19 f0       	breq	.+6      	; 0x142c <__divsf3+0x18>
    1426:	f0 c0       	rjmp	.+480    	; 0x1608 <__fp_inf>
    1428:	51 11       	cpse	r21, r1
    142a:	39 c1       	rjmp	.+626    	; 0x169e <__fp_szero>
    142c:	f3 c0       	rjmp	.+486    	; 0x1614 <__fp_nan>

0000142e <__divsf3x>:
    142e:	14 d1       	rcall	.+552    	; 0x1658 <__fp_split3>
    1430:	98 f3       	brcs	.-26     	; 0x1418 <__divsf3+0x4>

00001432 <__divsf3_pse>:
    1432:	99 23       	and	r25, r25
    1434:	c9 f3       	breq	.-14     	; 0x1428 <__divsf3+0x14>
    1436:	55 23       	and	r21, r21
    1438:	b1 f3       	breq	.-20     	; 0x1426 <__divsf3+0x12>
    143a:	95 1b       	sub	r25, r21
    143c:	55 0b       	sbc	r21, r21
    143e:	bb 27       	eor	r27, r27
    1440:	aa 27       	eor	r26, r26
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	38 f0       	brcs	.+14     	; 0x1458 <__divsf3_pse+0x26>
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	44 1f       	adc	r20, r20
    1454:	aa 1f       	adc	r26, r26
    1456:	a9 f3       	breq	.-22     	; 0x1442 <__divsf3_pse+0x10>
    1458:	33 d0       	rcall	.+102    	; 0x14c0 <__divsf3_pse+0x8e>
    145a:	0e 2e       	mov	r0, r30
    145c:	3a f0       	brmi	.+14     	; 0x146c <__divsf3_pse+0x3a>
    145e:	e0 e8       	ldi	r30, 0x80	; 128
    1460:	30 d0       	rcall	.+96     	; 0x14c2 <__divsf3_pse+0x90>
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	e6 95       	lsr	r30
    1468:	00 1c       	adc	r0, r0
    146a:	ca f7       	brpl	.-14     	; 0x145e <__divsf3_pse+0x2c>
    146c:	29 d0       	rcall	.+82     	; 0x14c0 <__divsf3_pse+0x8e>
    146e:	fe 2f       	mov	r31, r30
    1470:	27 d0       	rcall	.+78     	; 0x14c0 <__divsf3_pse+0x8e>
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	bb 1f       	adc	r27, r27
    147a:	26 17       	cp	r18, r22
    147c:	37 07       	cpc	r19, r23
    147e:	48 07       	cpc	r20, r24
    1480:	ab 07       	cpc	r26, r27
    1482:	b0 e8       	ldi	r27, 0x80	; 128
    1484:	09 f0       	breq	.+2      	; 0x1488 <__divsf3_pse+0x56>
    1486:	bb 0b       	sbc	r27, r27
    1488:	80 2d       	mov	r24, r0
    148a:	bf 01       	movw	r22, r30
    148c:	ff 27       	eor	r31, r31
    148e:	93 58       	subi	r25, 0x83	; 131
    1490:	5f 4f       	sbci	r21, 0xFF	; 255
    1492:	2a f0       	brmi	.+10     	; 0x149e <__divsf3_pse+0x6c>
    1494:	9e 3f       	cpi	r25, 0xFE	; 254
    1496:	51 05       	cpc	r21, r1
    1498:	68 f0       	brcs	.+26     	; 0x14b4 <__divsf3_pse+0x82>
    149a:	b6 c0       	rjmp	.+364    	; 0x1608 <__fp_inf>
    149c:	00 c1       	rjmp	.+512    	; 0x169e <__fp_szero>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	ec f3       	brlt	.-6      	; 0x149c <__divsf3_pse+0x6a>
    14a2:	98 3e       	cpi	r25, 0xE8	; 232
    14a4:	dc f3       	brlt	.-10     	; 0x149c <__divsf3_pse+0x6a>
    14a6:	86 95       	lsr	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__divsf3_pse+0x74>
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret
    14c0:	e1 e0       	ldi	r30, 0x01	; 1
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	bb 1f       	adc	r27, r27
    14ca:	62 17       	cp	r22, r18
    14cc:	73 07       	cpc	r23, r19
    14ce:	84 07       	cpc	r24, r20
    14d0:	ba 07       	cpc	r27, r26
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__divsf3_pse+0xaa>
    14d4:	62 1b       	sub	r22, r18
    14d6:	73 0b       	sbc	r23, r19
    14d8:	84 0b       	sbc	r24, r20
    14da:	ba 0b       	sbc	r27, r26
    14dc:	ee 1f       	adc	r30, r30
    14de:	88 f7       	brcc	.-30     	; 0x14c2 <__divsf3_pse+0x90>
    14e0:	e0 95       	com	r30
    14e2:	08 95       	ret

000014e4 <__fixsfsi>:
    14e4:	04 d0       	rcall	.+8      	; 0x14ee <__fixunssfsi>
    14e6:	68 94       	set
    14e8:	b1 11       	cpse	r27, r1
    14ea:	d9 c0       	rjmp	.+434    	; 0x169e <__fp_szero>
    14ec:	08 95       	ret

000014ee <__fixunssfsi>:
    14ee:	bc d0       	rcall	.+376    	; 0x1668 <__fp_splitA>
    14f0:	88 f0       	brcs	.+34     	; 0x1514 <__fixunssfsi+0x26>
    14f2:	9f 57       	subi	r25, 0x7F	; 127
    14f4:	90 f0       	brcs	.+36     	; 0x151a <__fixunssfsi+0x2c>
    14f6:	b9 2f       	mov	r27, r25
    14f8:	99 27       	eor	r25, r25
    14fa:	b7 51       	subi	r27, 0x17	; 23
    14fc:	a0 f0       	brcs	.+40     	; 0x1526 <__fixunssfsi+0x38>
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <__fixunssfsi+0x46>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	1a f0       	brmi	.+6      	; 0x1510 <__fixunssfsi+0x22>
    150a:	ba 95       	dec	r27
    150c:	c9 f7       	brne	.-14     	; 0x1500 <__fixunssfsi+0x12>
    150e:	12 c0       	rjmp	.+36     	; 0x1534 <__fixunssfsi+0x46>
    1510:	b1 30       	cpi	r27, 0x01	; 1
    1512:	81 f0       	breq	.+32     	; 0x1534 <__fixunssfsi+0x46>
    1514:	c3 d0       	rcall	.+390    	; 0x169c <__fp_zero>
    1516:	b1 e0       	ldi	r27, 0x01	; 1
    1518:	08 95       	ret
    151a:	c0 c0       	rjmp	.+384    	; 0x169c <__fp_zero>
    151c:	67 2f       	mov	r22, r23
    151e:	78 2f       	mov	r23, r24
    1520:	88 27       	eor	r24, r24
    1522:	b8 5f       	subi	r27, 0xF8	; 248
    1524:	39 f0       	breq	.+14     	; 0x1534 <__fixunssfsi+0x46>
    1526:	b9 3f       	cpi	r27, 0xF9	; 249
    1528:	cc f3       	brlt	.-14     	; 0x151c <__fixunssfsi+0x2e>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b3 95       	inc	r27
    1532:	d9 f7       	brne	.-10     	; 0x152a <__fixunssfsi+0x3c>
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__fixunssfsi+0x56>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__floatunsisf>:
    1546:	e8 94       	clt
    1548:	09 c0       	rjmp	.+18     	; 0x155c <__floatsisf+0x12>

0000154a <__floatsisf>:
    154a:	97 fb       	bst	r25, 7
    154c:	3e f4       	brtc	.+14     	; 0x155c <__floatsisf+0x12>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	99 23       	and	r25, r25
    155e:	a9 f0       	breq	.+42     	; 0x158a <__floatsisf+0x40>
    1560:	f9 2f       	mov	r31, r25
    1562:	96 e9       	ldi	r25, 0x96	; 150
    1564:	bb 27       	eor	r27, r27
    1566:	93 95       	inc	r25
    1568:	f6 95       	lsr	r31
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f1 11       	cpse	r31, r1
    1574:	f8 cf       	rjmp	.-16     	; 0x1566 <__floatsisf+0x1c>
    1576:	fa f4       	brpl	.+62     	; 0x15b6 <__floatsisf+0x6c>
    1578:	bb 0f       	add	r27, r27
    157a:	11 f4       	brne	.+4      	; 0x1580 <__floatsisf+0x36>
    157c:	60 ff       	sbrs	r22, 0
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <__floatsisf+0x6c>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <__floatsisf+0x6c>
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <__floatsisf+0x48>
    158e:	96 e9       	ldi	r25, 0x96	; 150
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <__floatsisf+0x6a>
    1592:	77 23       	and	r23, r23
    1594:	21 f0       	breq	.+8      	; 0x159e <__floatsisf+0x54>
    1596:	9e e8       	ldi	r25, 0x8E	; 142
    1598:	87 2f       	mov	r24, r23
    159a:	76 2f       	mov	r23, r22
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <__floatsisf+0x5e>
    159e:	66 23       	and	r22, r22
    15a0:	71 f0       	breq	.+28     	; 0x15be <__floatsisf+0x74>
    15a2:	96 e8       	ldi	r25, 0x86	; 134
    15a4:	86 2f       	mov	r24, r22
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	2a f0       	brmi	.+10     	; 0x15b6 <__floatsisf+0x6c>
    15ac:	9a 95       	dec	r25
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	da f7       	brpl	.-10     	; 0x15ac <__floatsisf+0x62>
    15b6:	88 0f       	add	r24, r24
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__fp_cmp>:
    15c0:	99 0f       	add	r25, r25
    15c2:	00 08       	sbc	r0, r0
    15c4:	55 0f       	add	r21, r21
    15c6:	aa 0b       	sbc	r26, r26
    15c8:	e0 e8       	ldi	r30, 0x80	; 128
    15ca:	fe ef       	ldi	r31, 0xFE	; 254
    15cc:	16 16       	cp	r1, r22
    15ce:	17 06       	cpc	r1, r23
    15d0:	e8 07       	cpc	r30, r24
    15d2:	f9 07       	cpc	r31, r25
    15d4:	c0 f0       	brcs	.+48     	; 0x1606 <__fp_cmp+0x46>
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	e4 07       	cpc	r30, r20
    15dc:	f5 07       	cpc	r31, r21
    15de:	98 f0       	brcs	.+38     	; 0x1606 <__fp_cmp+0x46>
    15e0:	62 1b       	sub	r22, r18
    15e2:	73 0b       	sbc	r23, r19
    15e4:	84 0b       	sbc	r24, r20
    15e6:	95 0b       	sbc	r25, r21
    15e8:	39 f4       	brne	.+14     	; 0x15f8 <__fp_cmp+0x38>
    15ea:	0a 26       	eor	r0, r26
    15ec:	61 f0       	breq	.+24     	; 0x1606 <__fp_cmp+0x46>
    15ee:	23 2b       	or	r18, r19
    15f0:	24 2b       	or	r18, r20
    15f2:	25 2b       	or	r18, r21
    15f4:	21 f4       	brne	.+8      	; 0x15fe <__fp_cmp+0x3e>
    15f6:	08 95       	ret
    15f8:	0a 26       	eor	r0, r26
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__fp_cmp+0x3e>
    15fc:	a1 40       	sbci	r26, 0x01	; 1
    15fe:	a6 95       	lsr	r26
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	81 1d       	adc	r24, r1
    1604:	81 1d       	adc	r24, r1
    1606:	08 95       	ret

00001608 <__fp_inf>:
    1608:	97 f9       	bld	r25, 7
    160a:	9f 67       	ori	r25, 0x7F	; 127
    160c:	80 e8       	ldi	r24, 0x80	; 128
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	08 95       	ret

00001614 <__fp_nan>:
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	80 ec       	ldi	r24, 0xC0	; 192
    1618:	08 95       	ret

0000161a <__fp_pscA>:
    161a:	00 24       	eor	r0, r0
    161c:	0a 94       	dec	r0
    161e:	16 16       	cp	r1, r22
    1620:	17 06       	cpc	r1, r23
    1622:	18 06       	cpc	r1, r24
    1624:	09 06       	cpc	r0, r25
    1626:	08 95       	ret

00001628 <__fp_pscB>:
    1628:	00 24       	eor	r0, r0
    162a:	0a 94       	dec	r0
    162c:	12 16       	cp	r1, r18
    162e:	13 06       	cpc	r1, r19
    1630:	14 06       	cpc	r1, r20
    1632:	05 06       	cpc	r0, r21
    1634:	08 95       	ret

00001636 <__fp_round>:
    1636:	09 2e       	mov	r0, r25
    1638:	03 94       	inc	r0
    163a:	00 0c       	add	r0, r0
    163c:	11 f4       	brne	.+4      	; 0x1642 <__fp_round+0xc>
    163e:	88 23       	and	r24, r24
    1640:	52 f0       	brmi	.+20     	; 0x1656 <__fp_round+0x20>
    1642:	bb 0f       	add	r27, r27
    1644:	40 f4       	brcc	.+16     	; 0x1656 <__fp_round+0x20>
    1646:	bf 2b       	or	r27, r31
    1648:	11 f4       	brne	.+4      	; 0x164e <__fp_round+0x18>
    164a:	60 ff       	sbrs	r22, 0
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <__fp_round+0x20>
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	08 95       	ret

00001658 <__fp_split3>:
    1658:	57 fd       	sbrc	r21, 7
    165a:	90 58       	subi	r25, 0x80	; 128
    165c:	44 0f       	add	r20, r20
    165e:	55 1f       	adc	r21, r21
    1660:	59 f0       	breq	.+22     	; 0x1678 <__fp_splitA+0x10>
    1662:	5f 3f       	cpi	r21, 0xFF	; 255
    1664:	71 f0       	breq	.+28     	; 0x1682 <__fp_splitA+0x1a>
    1666:	47 95       	ror	r20

00001668 <__fp_splitA>:
    1668:	88 0f       	add	r24, r24
    166a:	97 fb       	bst	r25, 7
    166c:	99 1f       	adc	r25, r25
    166e:	61 f0       	breq	.+24     	; 0x1688 <__fp_splitA+0x20>
    1670:	9f 3f       	cpi	r25, 0xFF	; 255
    1672:	79 f0       	breq	.+30     	; 0x1692 <__fp_splitA+0x2a>
    1674:	87 95       	ror	r24
    1676:	08 95       	ret
    1678:	12 16       	cp	r1, r18
    167a:	13 06       	cpc	r1, r19
    167c:	14 06       	cpc	r1, r20
    167e:	55 1f       	adc	r21, r21
    1680:	f2 cf       	rjmp	.-28     	; 0x1666 <__fp_split3+0xe>
    1682:	46 95       	lsr	r20
    1684:	f1 df       	rcall	.-30     	; 0x1668 <__fp_splitA>
    1686:	08 c0       	rjmp	.+16     	; 0x1698 <__fp_splitA+0x30>
    1688:	16 16       	cp	r1, r22
    168a:	17 06       	cpc	r1, r23
    168c:	18 06       	cpc	r1, r24
    168e:	99 1f       	adc	r25, r25
    1690:	f1 cf       	rjmp	.-30     	; 0x1674 <__fp_splitA+0xc>
    1692:	86 95       	lsr	r24
    1694:	71 05       	cpc	r23, r1
    1696:	61 05       	cpc	r22, r1
    1698:	08 94       	sec
    169a:	08 95       	ret

0000169c <__fp_zero>:
    169c:	e8 94       	clt

0000169e <__fp_szero>:
    169e:	bb 27       	eor	r27, r27
    16a0:	66 27       	eor	r22, r22
    16a2:	77 27       	eor	r23, r23
    16a4:	cb 01       	movw	r24, r22
    16a6:	97 f9       	bld	r25, 7
    16a8:	08 95       	ret

000016aa <__gesf2>:
    16aa:	8a df       	rcall	.-236    	; 0x15c0 <__fp_cmp>
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <__gesf2+0x6>
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	08 95       	ret
    16b2:	0e f0       	brts	.+2      	; 0x16b6 <__gesf2+0xc>
    16b4:	23 c1       	rjmp	.+582    	; 0x18fc <__fp_mpack>
    16b6:	ae cf       	rjmp	.-164    	; 0x1614 <__fp_nan>
    16b8:	68 94       	set
    16ba:	a6 cf       	rjmp	.-180    	; 0x1608 <__fp_inf>

000016bc <log>:
    16bc:	d5 df       	rcall	.-86     	; 0x1668 <__fp_splitA>
    16be:	c8 f3       	brcs	.-14     	; 0x16b2 <__gesf2+0x8>
    16c0:	99 23       	and	r25, r25
    16c2:	d1 f3       	breq	.-12     	; 0x16b8 <__gesf2+0xe>
    16c4:	c6 f3       	brts	.-16     	; 0x16b6 <__gesf2+0xc>
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	1f 93       	push	r17
    16cc:	0f 93       	push	r16
    16ce:	ff 92       	push	r15
    16d0:	c9 2f       	mov	r28, r25
    16d2:	dd 27       	eor	r29, r29
    16d4:	88 23       	and	r24, r24
    16d6:	2a f0       	brmi	.+10     	; 0x16e2 <log+0x26>
    16d8:	21 97       	sbiw	r28, 0x01	; 1
    16da:	66 0f       	add	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	da f7       	brpl	.-10     	; 0x16d8 <log+0x1c>
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f eb       	ldi	r21, 0xBF	; 191
    16ea:	9f e3       	ldi	r25, 0x3F	; 63
    16ec:	88 39       	cpi	r24, 0x98	; 152
    16ee:	20 f0       	brcs	.+8      	; 0x16f8 <log+0x3c>
    16f0:	80 3e       	cpi	r24, 0xE0	; 224
    16f2:	30 f0       	brcs	.+12     	; 0x1700 <log+0x44>
    16f4:	21 96       	adiw	r28, 0x01	; 1
    16f6:	8f 77       	andi	r24, 0x7F	; 127
    16f8:	25 de       	rcall	.-950    	; 0x1344 <__addsf3>
    16fa:	e4 e5       	ldi	r30, 0x54	; 84
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <log+0x4a>
    1700:	21 de       	rcall	.-958    	; 0x1344 <__addsf3>
    1702:	e1 e8       	ldi	r30, 0x81	; 129
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	0a d1       	rcall	.+532    	; 0x191c <__fp_powser>
    1708:	8b 01       	movw	r16, r22
    170a:	be 01       	movw	r22, r28
    170c:	ec 01       	movw	r28, r24
    170e:	fb 2e       	mov	r15, r27
    1710:	6f 57       	subi	r22, 0x7F	; 127
    1712:	71 09       	sbc	r23, r1
    1714:	75 95       	asr	r23
    1716:	77 1f       	adc	r23, r23
    1718:	88 0b       	sbc	r24, r24
    171a:	99 0b       	sbc	r25, r25
    171c:	16 df       	rcall	.-468    	; 0x154a <__floatsisf>
    171e:	28 e1       	ldi	r18, 0x18	; 24
    1720:	32 e7       	ldi	r19, 0x72	; 114
    1722:	41 e3       	ldi	r20, 0x31	; 49
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	16 d0       	rcall	.+44     	; 0x1754 <__mulsf3x>
    1728:	af 2d       	mov	r26, r15
    172a:	98 01       	movw	r18, r16
    172c:	ae 01       	movw	r20, r28
    172e:	ff 90       	pop	r15
    1730:	0f 91       	pop	r16
    1732:	1f 91       	pop	r17
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	16 de       	rcall	.-980    	; 0x1366 <__addsf3x>
    173a:	7d cf       	rjmp	.-262    	; 0x1636 <__fp_round>

0000173c <__mulsf3>:
    173c:	0b d0       	rcall	.+22     	; 0x1754 <__mulsf3x>
    173e:	7b cf       	rjmp	.-266    	; 0x1636 <__fp_round>
    1740:	6c df       	rcall	.-296    	; 0x161a <__fp_pscA>
    1742:	28 f0       	brcs	.+10     	; 0x174e <__mulsf3+0x12>
    1744:	71 df       	rcall	.-286    	; 0x1628 <__fp_pscB>
    1746:	18 f0       	brcs	.+6      	; 0x174e <__mulsf3+0x12>
    1748:	95 23       	and	r25, r21
    174a:	09 f0       	breq	.+2      	; 0x174e <__mulsf3+0x12>
    174c:	5d cf       	rjmp	.-326    	; 0x1608 <__fp_inf>
    174e:	62 cf       	rjmp	.-316    	; 0x1614 <__fp_nan>
    1750:	11 24       	eor	r1, r1
    1752:	a5 cf       	rjmp	.-182    	; 0x169e <__fp_szero>

00001754 <__mulsf3x>:
    1754:	81 df       	rcall	.-254    	; 0x1658 <__fp_split3>
    1756:	a0 f3       	brcs	.-24     	; 0x1740 <__mulsf3+0x4>

00001758 <__mulsf3_pse>:
    1758:	95 9f       	mul	r25, r21
    175a:	d1 f3       	breq	.-12     	; 0x1750 <__mulsf3+0x14>
    175c:	95 0f       	add	r25, r21
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	55 1f       	adc	r21, r21
    1762:	62 9f       	mul	r22, r18
    1764:	f0 01       	movw	r30, r0
    1766:	72 9f       	mul	r23, r18
    1768:	bb 27       	eor	r27, r27
    176a:	f0 0d       	add	r31, r0
    176c:	b1 1d       	adc	r27, r1
    176e:	63 9f       	mul	r22, r19
    1770:	aa 27       	eor	r26, r26
    1772:	f0 0d       	add	r31, r0
    1774:	b1 1d       	adc	r27, r1
    1776:	aa 1f       	adc	r26, r26
    1778:	64 9f       	mul	r22, r20
    177a:	66 27       	eor	r22, r22
    177c:	b0 0d       	add	r27, r0
    177e:	a1 1d       	adc	r26, r1
    1780:	66 1f       	adc	r22, r22
    1782:	82 9f       	mul	r24, r18
    1784:	22 27       	eor	r18, r18
    1786:	b0 0d       	add	r27, r0
    1788:	a1 1d       	adc	r26, r1
    178a:	62 1f       	adc	r22, r18
    178c:	73 9f       	mul	r23, r19
    178e:	b0 0d       	add	r27, r0
    1790:	a1 1d       	adc	r26, r1
    1792:	62 1f       	adc	r22, r18
    1794:	83 9f       	mul	r24, r19
    1796:	a0 0d       	add	r26, r0
    1798:	61 1d       	adc	r22, r1
    179a:	22 1f       	adc	r18, r18
    179c:	74 9f       	mul	r23, r20
    179e:	33 27       	eor	r19, r19
    17a0:	a0 0d       	add	r26, r0
    17a2:	61 1d       	adc	r22, r1
    17a4:	23 1f       	adc	r18, r19
    17a6:	84 9f       	mul	r24, r20
    17a8:	60 0d       	add	r22, r0
    17aa:	21 1d       	adc	r18, r1
    17ac:	82 2f       	mov	r24, r18
    17ae:	76 2f       	mov	r23, r22
    17b0:	6a 2f       	mov	r22, r26
    17b2:	11 24       	eor	r1, r1
    17b4:	9f 57       	subi	r25, 0x7F	; 127
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	8a f0       	brmi	.+34     	; 0x17dc <__mulsf3_pse+0x84>
    17ba:	e1 f0       	breq	.+56     	; 0x17f4 <__mulsf3_pse+0x9c>
    17bc:	88 23       	and	r24, r24
    17be:	4a f0       	brmi	.+18     	; 0x17d2 <__mulsf3_pse+0x7a>
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	bb 1f       	adc	r27, r27
    17c6:	66 1f       	adc	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	91 50       	subi	r25, 0x01	; 1
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	a9 f7       	brne	.-22     	; 0x17bc <__mulsf3_pse+0x64>
    17d2:	9e 3f       	cpi	r25, 0xFE	; 254
    17d4:	51 05       	cpc	r21, r1
    17d6:	70 f0       	brcs	.+28     	; 0x17f4 <__mulsf3_pse+0x9c>
    17d8:	17 cf       	rjmp	.-466    	; 0x1608 <__fp_inf>
    17da:	61 cf       	rjmp	.-318    	; 0x169e <__fp_szero>
    17dc:	5f 3f       	cpi	r21, 0xFF	; 255
    17de:	ec f3       	brlt	.-6      	; 0x17da <__mulsf3_pse+0x82>
    17e0:	98 3e       	cpi	r25, 0xE8	; 232
    17e2:	dc f3       	brlt	.-10     	; 0x17da <__mulsf3_pse+0x82>
    17e4:	86 95       	lsr	r24
    17e6:	77 95       	ror	r23
    17e8:	67 95       	ror	r22
    17ea:	b7 95       	ror	r27
    17ec:	f7 95       	ror	r31
    17ee:	e7 95       	ror	r30
    17f0:	9f 5f       	subi	r25, 0xFF	; 255
    17f2:	c1 f7       	brne	.-16     	; 0x17e4 <__mulsf3_pse+0x8c>
    17f4:	fe 2b       	or	r31, r30
    17f6:	88 0f       	add	r24, r24
    17f8:	91 1d       	adc	r25, r1
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret

00001802 <pow>:
    1802:	fa 01       	movw	r30, r20
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	30 96       	adiw	r30, 0x00	; 0
    180a:	21 05       	cpc	r18, r1
    180c:	31 05       	cpc	r19, r1
    180e:	99 f1       	breq	.+102    	; 0x1876 <pow+0x74>
    1810:	61 15       	cp	r22, r1
    1812:	71 05       	cpc	r23, r1
    1814:	61 f4       	brne	.+24     	; 0x182e <pow+0x2c>
    1816:	80 38       	cpi	r24, 0x80	; 128
    1818:	bf e3       	ldi	r27, 0x3F	; 63
    181a:	9b 07       	cpc	r25, r27
    181c:	49 f1       	breq	.+82     	; 0x1870 <pow+0x6e>
    181e:	68 94       	set
    1820:	90 38       	cpi	r25, 0x80	; 128
    1822:	81 05       	cpc	r24, r1
    1824:	61 f0       	breq	.+24     	; 0x183e <pow+0x3c>
    1826:	80 38       	cpi	r24, 0x80	; 128
    1828:	bf ef       	ldi	r27, 0xFF	; 255
    182a:	9b 07       	cpc	r25, r27
    182c:	41 f0       	breq	.+16     	; 0x183e <pow+0x3c>
    182e:	99 23       	and	r25, r25
    1830:	42 f5       	brpl	.+80     	; 0x1882 <pow+0x80>
    1832:	ff 3f       	cpi	r31, 0xFF	; 255
    1834:	e1 05       	cpc	r30, r1
    1836:	31 05       	cpc	r19, r1
    1838:	21 05       	cpc	r18, r1
    183a:	11 f1       	breq	.+68     	; 0x1880 <pow+0x7e>
    183c:	e8 94       	clt
    183e:	08 94       	sec
    1840:	e7 95       	ror	r30
    1842:	d9 01       	movw	r26, r18
    1844:	aa 23       	and	r26, r26
    1846:	29 f4       	brne	.+10     	; 0x1852 <pow+0x50>
    1848:	ab 2f       	mov	r26, r27
    184a:	be 2f       	mov	r27, r30
    184c:	f8 5f       	subi	r31, 0xF8	; 248
    184e:	d0 f3       	brcs	.-12     	; 0x1844 <pow+0x42>
    1850:	10 c0       	rjmp	.+32     	; 0x1872 <pow+0x70>
    1852:	ff 5f       	subi	r31, 0xFF	; 255
    1854:	70 f4       	brcc	.+28     	; 0x1872 <pow+0x70>
    1856:	a6 95       	lsr	r26
    1858:	e0 f7       	brcc	.-8      	; 0x1852 <pow+0x50>
    185a:	f7 39       	cpi	r31, 0x97	; 151
    185c:	50 f0       	brcs	.+20     	; 0x1872 <pow+0x70>
    185e:	19 f0       	breq	.+6      	; 0x1866 <pow+0x64>
    1860:	ff 3a       	cpi	r31, 0xAF	; 175
    1862:	38 f4       	brcc	.+14     	; 0x1872 <pow+0x70>
    1864:	9f 77       	andi	r25, 0x7F	; 127
    1866:	9f 93       	push	r25
    1868:	0c d0       	rcall	.+24     	; 0x1882 <pow+0x80>
    186a:	0f 90       	pop	r0
    186c:	07 fc       	sbrc	r0, 7
    186e:	90 58       	subi	r25, 0x80	; 128
    1870:	08 95       	ret
    1872:	3e f0       	brts	.+14     	; 0x1882 <pow+0x80>
    1874:	cf ce       	rjmp	.-610    	; 0x1614 <__fp_nan>
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	80 e8       	ldi	r24, 0x80	; 128
    187c:	9f e3       	ldi	r25, 0x3F	; 63
    187e:	08 95       	ret
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	9f 77       	andi	r25, 0x7F	; 127
    1884:	5f 93       	push	r21
    1886:	4f 93       	push	r20
    1888:	3f 93       	push	r19
    188a:	2f 93       	push	r18
    188c:	17 df       	rcall	.-466    	; 0x16bc <log>
    188e:	2f 91       	pop	r18
    1890:	3f 91       	pop	r19
    1892:	4f 91       	pop	r20
    1894:	5f 91       	pop	r21
    1896:	52 df       	rcall	.-348    	; 0x173c <__mulsf3>
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <exp>
    189a:	19 f4       	brne	.+6      	; 0x18a2 <pow+0xa0>
    189c:	0e f0       	brts	.+2      	; 0x18a0 <pow+0x9e>
    189e:	b4 ce       	rjmp	.-664    	; 0x1608 <__fp_inf>
    18a0:	fd ce       	rjmp	.-518    	; 0x169c <__fp_zero>
    18a2:	b8 ce       	rjmp	.-656    	; 0x1614 <__fp_nan>

000018a4 <exp>:
    18a4:	e1 de       	rcall	.-574    	; 0x1668 <__fp_splitA>
    18a6:	c8 f3       	brcs	.-14     	; 0x189a <pow+0x98>
    18a8:	96 38       	cpi	r25, 0x86	; 134
    18aa:	c0 f7       	brcc	.-16     	; 0x189c <pow+0x9a>
    18ac:	07 f8       	bld	r0, 7
    18ae:	0f 92       	push	r0
    18b0:	e8 94       	clt
    18b2:	2b e3       	ldi	r18, 0x3B	; 59
    18b4:	3a ea       	ldi	r19, 0xAA	; 170
    18b6:	48 eb       	ldi	r20, 0xB8	; 184
    18b8:	5f e7       	ldi	r21, 0x7F	; 127
    18ba:	4e df       	rcall	.-356    	; 0x1758 <__mulsf3_pse>
    18bc:	0f 92       	push	r0
    18be:	0f 92       	push	r0
    18c0:	0f 92       	push	r0
    18c2:	4d b7       	in	r20, 0x3d	; 61
    18c4:	5e b7       	in	r21, 0x3e	; 62
    18c6:	0f 92       	push	r0
    18c8:	8b d0       	rcall	.+278    	; 0x19e0 <modf>
    18ca:	ee ea       	ldi	r30, 0xAE	; 174
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	26 d0       	rcall	.+76     	; 0x191c <__fp_powser>
    18d0:	4f 91       	pop	r20
    18d2:	5f 91       	pop	r21
    18d4:	ef 91       	pop	r30
    18d6:	ff 91       	pop	r31
    18d8:	e5 95       	asr	r30
    18da:	ee 1f       	adc	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	49 f0       	breq	.+18     	; 0x18f2 <exp+0x4e>
    18e0:	fe 57       	subi	r31, 0x7E	; 126
    18e2:	e0 68       	ori	r30, 0x80	; 128
    18e4:	44 27       	eor	r20, r20
    18e6:	ee 0f       	add	r30, r30
    18e8:	44 1f       	adc	r20, r20
    18ea:	fa 95       	dec	r31
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <exp+0x42>
    18ee:	41 95       	neg	r20
    18f0:	55 0b       	sbc	r21, r21
    18f2:	42 d0       	rcall	.+132    	; 0x1978 <ldexp>
    18f4:	0f 90       	pop	r0
    18f6:	07 fe       	sbrs	r0, 7
    18f8:	36 c0       	rjmp	.+108    	; 0x1966 <inverse>
    18fa:	08 95       	ret

000018fc <__fp_mpack>:
    18fc:	9f 3f       	cpi	r25, 0xFF	; 255
    18fe:	49 f0       	breq	.+18     	; 0x1912 <__fp_mpack+0x16>
    1900:	91 50       	subi	r25, 0x01	; 1
    1902:	28 f4       	brcc	.+10     	; 0x190e <__fp_mpack+0x12>
    1904:	86 95       	lsr	r24
    1906:	77 95       	ror	r23
    1908:	67 95       	ror	r22
    190a:	b7 95       	ror	r27
    190c:	9f 5f       	subi	r25, 0xFF	; 255
    190e:	80 38       	cpi	r24, 0x80	; 128
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	88 0f       	add	r24, r24
    1914:	96 95       	lsr	r25
    1916:	87 95       	ror	r24
    1918:	97 f9       	bld	r25, 7
    191a:	08 95       	ret

0000191c <__fp_powser>:
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	1f 93       	push	r17
    1922:	0f 93       	push	r16
    1924:	ff 92       	push	r15
    1926:	ef 92       	push	r14
    1928:	df 92       	push	r13
    192a:	7b 01       	movw	r14, r22
    192c:	8c 01       	movw	r16, r24
    192e:	68 94       	set
    1930:	05 c0       	rjmp	.+10     	; 0x193c <__fp_powser+0x20>
    1932:	da 2e       	mov	r13, r26
    1934:	ef 01       	movw	r28, r30
    1936:	0e df       	rcall	.-484    	; 0x1754 <__mulsf3x>
    1938:	fe 01       	movw	r30, r28
    193a:	e8 94       	clt
    193c:	a5 91       	lpm	r26, Z+
    193e:	25 91       	lpm	r18, Z+
    1940:	35 91       	lpm	r19, Z+
    1942:	45 91       	lpm	r20, Z+
    1944:	55 91       	lpm	r21, Z+
    1946:	ae f3       	brts	.-22     	; 0x1932 <__fp_powser+0x16>
    1948:	ef 01       	movw	r28, r30
    194a:	0d dd       	rcall	.-1510   	; 0x1366 <__addsf3x>
    194c:	fe 01       	movw	r30, r28
    194e:	97 01       	movw	r18, r14
    1950:	a8 01       	movw	r20, r16
    1952:	da 94       	dec	r13
    1954:	79 f7       	brne	.-34     	; 0x1934 <__fp_powser+0x18>
    1956:	df 90       	pop	r13
    1958:	ef 90       	pop	r14
    195a:	ff 90       	pop	r15
    195c:	0f 91       	pop	r16
    195e:	1f 91       	pop	r17
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <inverse>:
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	9f e3       	ldi	r25, 0x3F	; 63
    1972:	50 cd       	rjmp	.-1376   	; 0x1414 <__divsf3>
    1974:	49 ce       	rjmp	.-878    	; 0x1608 <__fp_inf>
    1976:	c2 cf       	rjmp	.-124    	; 0x18fc <__fp_mpack>

00001978 <ldexp>:
    1978:	77 de       	rcall	.-786    	; 0x1668 <__fp_splitA>
    197a:	e8 f3       	brcs	.-6      	; 0x1976 <inverse+0x10>
    197c:	99 23       	and	r25, r25
    197e:	d9 f3       	breq	.-10     	; 0x1976 <inverse+0x10>
    1980:	94 0f       	add	r25, r20
    1982:	51 1d       	adc	r21, r1
    1984:	bb f3       	brvs	.-18     	; 0x1974 <inverse+0xe>
    1986:	91 50       	subi	r25, 0x01	; 1
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	94 f0       	brlt	.+36     	; 0x19b0 <ldexp+0x38>
    198c:	59 f0       	breq	.+22     	; 0x19a4 <ldexp+0x2c>
    198e:	88 23       	and	r24, r24
    1990:	32 f0       	brmi	.+12     	; 0x199e <ldexp+0x26>
    1992:	66 0f       	add	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	88 1f       	adc	r24, r24
    1998:	91 50       	subi	r25, 0x01	; 1
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	c1 f7       	brne	.-16     	; 0x198e <ldexp+0x16>
    199e:	9e 3f       	cpi	r25, 0xFE	; 254
    19a0:	51 05       	cpc	r21, r1
    19a2:	44 f7       	brge	.-48     	; 0x1974 <inverse+0xe>
    19a4:	88 0f       	add	r24, r24
    19a6:	91 1d       	adc	r25, r1
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret
    19b0:	5f 3f       	cpi	r21, 0xFF	; 255
    19b2:	ac f0       	brlt	.+42     	; 0x19de <ldexp+0x66>
    19b4:	98 3e       	cpi	r25, 0xE8	; 232
    19b6:	9c f0       	brlt	.+38     	; 0x19de <ldexp+0x66>
    19b8:	bb 27       	eor	r27, r27
    19ba:	86 95       	lsr	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b7 95       	ror	r27
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <ldexp+0x4e>
    19c4:	b1 60       	ori	r27, 0x01	; 1
    19c6:	93 95       	inc	r25
    19c8:	c1 f7       	brne	.-16     	; 0x19ba <ldexp+0x42>
    19ca:	bb 0f       	add	r27, r27
    19cc:	58 f7       	brcc	.-42     	; 0x19a4 <ldexp+0x2c>
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <ldexp+0x5c>
    19d0:	60 ff       	sbrs	r22, 0
    19d2:	e8 cf       	rjmp	.-48     	; 0x19a4 <ldexp+0x2c>
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	e3 cf       	rjmp	.-58     	; 0x19a4 <ldexp+0x2c>
    19de:	5f ce       	rjmp	.-834    	; 0x169e <__fp_szero>

000019e0 <modf>:
    19e0:	fa 01       	movw	r30, r20
    19e2:	dc 01       	movw	r26, r24
    19e4:	aa 0f       	add	r26, r26
    19e6:	bb 1f       	adc	r27, r27
    19e8:	9b 01       	movw	r18, r22
    19ea:	ac 01       	movw	r20, r24
    19ec:	bf 57       	subi	r27, 0x7F	; 127
    19ee:	28 f4       	brcc	.+10     	; 0x19fa <modf+0x1a>
    19f0:	22 27       	eor	r18, r18
    19f2:	33 27       	eor	r19, r19
    19f4:	44 27       	eor	r20, r20
    19f6:	50 78       	andi	r21, 0x80	; 128
    19f8:	1f c0       	rjmp	.+62     	; 0x1a38 <modf+0x58>
    19fa:	b7 51       	subi	r27, 0x17	; 23
    19fc:	88 f4       	brcc	.+34     	; 0x1a20 <modf+0x40>
    19fe:	ab 2f       	mov	r26, r27
    1a00:	00 24       	eor	r0, r0
    1a02:	46 95       	lsr	r20
    1a04:	37 95       	ror	r19
    1a06:	27 95       	ror	r18
    1a08:	01 1c       	adc	r0, r1
    1a0a:	a3 95       	inc	r26
    1a0c:	d2 f3       	brmi	.-12     	; 0x1a02 <modf+0x22>
    1a0e:	00 20       	and	r0, r0
    1a10:	69 f0       	breq	.+26     	; 0x1a2c <modf+0x4c>
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	44 1f       	adc	r20, r20
    1a18:	b3 95       	inc	r27
    1a1a:	da f3       	brmi	.-10     	; 0x1a12 <modf+0x32>
    1a1c:	0d d0       	rcall	.+26     	; 0x1a38 <modf+0x58>
    1a1e:	91 cc       	rjmp	.-1758   	; 0x1342 <__subsf3>
    1a20:	61 30       	cpi	r22, 0x01	; 1
    1a22:	71 05       	cpc	r23, r1
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	8a 07       	cpc	r24, r26
    1a28:	b9 46       	sbci	r27, 0x69	; 105
    1a2a:	30 f4       	brcc	.+12     	; 0x1a38 <modf+0x58>
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	66 27       	eor	r22, r22
    1a32:	77 27       	eor	r23, r23
    1a34:	88 27       	eor	r24, r24
    1a36:	90 78       	andi	r25, 0x80	; 128
    1a38:	30 96       	adiw	r30, 0x00	; 0
    1a3a:	21 f0       	breq	.+8      	; 0x1a44 <modf+0x64>
    1a3c:	20 83       	st	Z, r18
    1a3e:	31 83       	std	Z+1, r19	; 0x01
    1a40:	42 83       	std	Z+2, r20	; 0x02
    1a42:	53 83       	std	Z+3, r21	; 0x03
    1a44:	08 95       	ret

00001a46 <__divmodhi4>:
    1a46:	97 fb       	bst	r25, 7
    1a48:	09 2e       	mov	r0, r25
    1a4a:	07 26       	eor	r0, r23
    1a4c:	0a d0       	rcall	.+20     	; 0x1a62 <__divmodhi4_neg1>
    1a4e:	77 fd       	sbrc	r23, 7
    1a50:	04 d0       	rcall	.+8      	; 0x1a5a <__divmodhi4_neg2>
    1a52:	0c d0       	rcall	.+24     	; 0x1a6c <__udivmodhi4>
    1a54:	06 d0       	rcall	.+12     	; 0x1a62 <__divmodhi4_neg1>
    1a56:	00 20       	and	r0, r0
    1a58:	1a f4       	brpl	.+6      	; 0x1a60 <__divmodhi4_exit>

00001a5a <__divmodhi4_neg2>:
    1a5a:	70 95       	com	r23
    1a5c:	61 95       	neg	r22
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a60 <__divmodhi4_exit>:
    1a60:	08 95       	ret

00001a62 <__divmodhi4_neg1>:
    1a62:	f6 f7       	brtc	.-4      	; 0x1a60 <__divmodhi4_exit>
    1a64:	90 95       	com	r25
    1a66:	81 95       	neg	r24
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	08 95       	ret

00001a6c <__udivmodhi4>:
    1a6c:	aa 1b       	sub	r26, r26
    1a6e:	bb 1b       	sub	r27, r27
    1a70:	51 e1       	ldi	r21, 0x11	; 17
    1a72:	07 c0       	rjmp	.+14     	; 0x1a82 <__udivmodhi4_ep>

00001a74 <__udivmodhi4_loop>:
    1a74:	aa 1f       	adc	r26, r26
    1a76:	bb 1f       	adc	r27, r27
    1a78:	a6 17       	cp	r26, r22
    1a7a:	b7 07       	cpc	r27, r23
    1a7c:	10 f0       	brcs	.+4      	; 0x1a82 <__udivmodhi4_ep>
    1a7e:	a6 1b       	sub	r26, r22
    1a80:	b7 0b       	sbc	r27, r23

00001a82 <__udivmodhi4_ep>:
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	5a 95       	dec	r21
    1a88:	a9 f7       	brne	.-22     	; 0x1a74 <__udivmodhi4_loop>
    1a8a:	80 95       	com	r24
    1a8c:	90 95       	com	r25
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	08 95       	ret

00001a94 <_exit>:
    1a94:	f8 94       	cli

00001a96 <__stop_program>:
    1a96:	ff cf       	rjmp	.-2      	; 0x1a96 <__stop_program>
