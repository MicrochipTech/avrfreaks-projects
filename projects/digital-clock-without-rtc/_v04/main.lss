
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00000242  000002b6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000093  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000447  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bb  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000360  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014c  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a8  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	ca c0       	rjmp	.+404    	; 0x1a6 <__vector_8>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>

0000002a <Angka>:
  2a:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
  3a:	00 00                                               ..

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf e5       	ldi	r28, 0x5F	; 95
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	e2 e4       	ldi	r30, 0x42	; 66
  50:	f2 e0       	ldi	r31, 0x02	; 2
  52:	02 c0       	rjmp	.+4      	; 0x58 <.do_copy_data_start>

00000054 <.do_copy_data_loop>:
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0

00000058 <.do_copy_data_start>:
  58:	a0 36       	cpi	r26, 0x60	; 96
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <.do_copy_data_loop>

0000005e <__do_clear_bss>:
  5e:	10 e0       	ldi	r17, 0x00	; 0
  60:	a0 e6       	ldi	r26, 0x60	; 96
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a7 36       	cpi	r26, 0x67	; 103
  6a:	b1 07       	cpc	r27, r17
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	c4 d0       	rcall	.+392    	; 0x1f8 <main>
  70:	e6 c0       	rjmp	.+460    	; 0x23e <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <init_hw>:
static volatile u8 puluhan = 0;
static volatile u8 satuan = 0;

// fungsi inisialisasi perangkat keras
void init_hw(void)
{
  74:	85 e0       	ldi	r24, 0x05	; 5
  76:	8e bd       	out	0x2e, r24	; 46
	// inisialisasi timer
	// priskalar clock/1024
	TCCR1B = 0x05;
	// inisialisasi intrupsi
	TIFR = 1<<TOV1;
  78:	84 e0       	ldi	r24, 0x04	; 4
  7a:	88 bf       	out	0x38, r24	; 56
	TIMSK |= 1<<TOIE1;
  7c:	89 b7       	in	r24, 0x39	; 57
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	89 bf       	out	0x39, r24	; 57
	TCNT1 = time_tick;
  82:	84 ee       	ldi	r24, 0xE4	; 228
  84:	9f ef       	ldi	r25, 0xFF	; 255
  86:	9d bd       	out	0x2d, r25	; 45
  88:	8c bd       	out	0x2c, r24	; 44
	
	// inisialisasi port
	DDRA = 0xff; // port a sebagai keluaran
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;
  8e:	8b bb       	out	0x1b, r24	; 27
	
}
  90:	08 95       	ret

00000092 <init_uart>:

// fungsi inisialisasi uart
void init_uart(u16 baud)
{
  92:	90 bd       	out	0x20, r25	; 32
	UBRRH = (u8) (baud>>8);
	UBRRL = (u8) baud;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <kirim_byte>:

void kirim_byte(u8 data)
{
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <kirim_byte>
	while (!( UCSRA & (1<<UDRE)));
	UDR = data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <dec2str>:

void dec2str(u8 data)
{
  a8:	38 2f       	mov	r19, r24
	puluhan = data/10;
  aa:	6a e0       	ldi	r22, 0x0A	; 10
  ac:	bc d0       	rcall	.+376    	; 0x226 <__udivmodqi4>
  ae:	80 93 65 00 	sts	0x0065, r24
	satuan = data - (puluhan * 10);
  b2:	20 91 65 00 	lds	r18, 0x0065
  b6:	86 ef       	ldi	r24, 0xF6	; 246
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	28 9f       	mul	r18, r24
  bc:	20 2d       	mov	r18, r0
  be:	11 24       	eor	r1, r1
  c0:	23 0f       	add	r18, r19
  c2:	20 93 66 00 	sts	0x0066, r18
}
  c6:	08 95       	ret

000000c8 <konversi_kirim2monitor>:

void konversi_kirim2monitor(void)
{
  c8:	80 91 62 00 	lds	r24, 0x0062
  cc:	ed df       	rcall	.-38     	; 0xa8 <dec2str>
	u8 temp;
	
	// menampilkan jam
	dec2str(jam);
	temp = pgm_read_byte(&Angka[puluhan]);
  ce:	e0 91 65 00 	lds	r30, 0x0065
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e6 5d       	subi	r30, 0xD6	; 214
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
  da:	5d 9b       	sbis	0x0b, 5	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <konversi_kirim2monitor+0x12>
	UDR = data;
  de:	8c b9       	out	0x0c, r24	; 12
	
	// menampilkan jam
	dec2str(jam);
	temp = pgm_read_byte(&Angka[puluhan]);
	kirim_byte(temp);
	temp = pgm_read_byte(&Angka[satuan]);
  e0:	e0 91 66 00 	lds	r30, 0x0066
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e6 5d       	subi	r30, 0xD6	; 214
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <konversi_kirim2monitor+0x24>
	UDR = data;
  f0:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
  f2:	5d 9b       	sbis	0x0b, 5	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <konversi_kirim2monitor+0x2a>
	UDR = data;
  f6:	8a e3       	ldi	r24, 0x3A	; 58
  f8:	8c b9       	out	0x0c, r24	; 12
	temp = pgm_read_byte(&Angka[satuan]);
	kirim_byte(temp);
	kirim_byte(':');
	
	//menampilkan menit
	dec2str(menit);
  fa:	80 91 61 00 	lds	r24, 0x0061
  fe:	d4 df       	rcall	.-88     	; 0xa8 <dec2str>
	temp = pgm_read_byte(&Angka[puluhan]);
 100:	e0 91 65 00 	lds	r30, 0x0065
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e6 5d       	subi	r30, 0xD6	; 214
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <konversi_kirim2monitor+0x44>
	UDR = data;
 110:	8c b9       	out	0x0c, r24	; 12
	
	//menampilkan menit
	dec2str(menit);
	temp = pgm_read_byte(&Angka[puluhan]);
	kirim_byte(temp);
	temp = pgm_read_byte(&Angka[satuan]);
 112:	e0 91 66 00 	lds	r30, 0x0066
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e6 5d       	subi	r30, 0xD6	; 214
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 11e:	5d 9b       	sbis	0x0b, 5	; 11
 120:	fe cf       	rjmp	.-4      	; 0x11e <konversi_kirim2monitor+0x56>
	UDR = data;
 122:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <konversi_kirim2monitor+0x5c>
	UDR = data;
 128:	8a e3       	ldi	r24, 0x3A	; 58
 12a:	8c b9       	out	0x0c, r24	; 12
	temp = pgm_read_byte(&Angka[satuan]);
	kirim_byte(temp);
	kirim_byte(':');
	
	//menampilkan detik
	dec2str(detik);
 12c:	80 91 60 00 	lds	r24, 0x0060
 130:	bb df       	rcall	.-138    	; 0xa8 <dec2str>
	temp = pgm_read_byte(&Angka[puluhan]);
 132:	e0 91 65 00 	lds	r30, 0x0065
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e6 5d       	subi	r30, 0xD6	; 214
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <konversi_kirim2monitor+0x76>
	UDR = data;
 142:	8c b9       	out	0x0c, r24	; 12
	
	//menampilkan detik
	dec2str(detik);
	temp = pgm_read_byte(&Angka[puluhan]);
	kirim_byte(temp);
	temp = pgm_read_byte(&Angka[satuan]);
 144:	e0 91 66 00 	lds	r30, 0x0066
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e6 5d       	subi	r30, 0xD6	; 214
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	84 91       	lpm	r24, Z+
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 150:	5d 9b       	sbis	0x0b, 5	; 11
 152:	fe cf       	rjmp	.-4      	; 0x150 <konversi_kirim2monitor+0x88>
	UDR = data;
 154:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
}

void kirim_byte(u8 data)
{
	while (!( UCSRA & (1<<UDRE)));
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <konversi_kirim2monitor+0x8e>
	UDR = data;
 15a:	8d e0       	ldi	r24, 0x0D	; 13
 15c:	8c b9       	out	0x0c, r24	; 12
	temp = pgm_read_byte(&Angka[puluhan]);
	kirim_byte(temp);
	temp = pgm_read_byte(&Angka[satuan]);
	kirim_byte(temp);
	kirim_byte('\r');
}
 15e:	08 95       	ret

00000160 <proses_jam>:
}


// fungsi jam dan kenaikan nya
void proses_jam(void)
{
 160:	80 91 60 00 	lds	r24, 0x0060
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 60 00 	sts	0x0060, r24
	detik++;
	if (detik > 59 ) {
 16a:	80 91 60 00 	lds	r24, 0x0060
 16e:	8c 33       	cpi	r24, 0x3C	; 60
 170:	c0 f0       	brcs	.+48     	; 0x1a2 <proses_jam+0x42>
		detik = 0;
 172:	10 92 60 00 	sts	0x0060, r1
		menit++;
 176:	80 91 61 00 	lds	r24, 0x0061
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 61 00 	sts	0x0061, r24
		if (menit > 59 ) {
 180:	80 91 61 00 	lds	r24, 0x0061
 184:	8c 33       	cpi	r24, 0x3C	; 60
 186:	68 f0       	brcs	.+26     	; 0x1a2 <proses_jam+0x42>
			menit = 0;
 188:	10 92 61 00 	sts	0x0061, r1
			jam++;
 18c:	80 91 62 00 	lds	r24, 0x0062
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 62 00 	sts	0x0062, r24
			if (jam == 24) {
 196:	80 91 62 00 	lds	r24, 0x0062
 19a:	88 31       	cpi	r24, 0x18	; 24
 19c:	11 f4       	brne	.+4      	; 0x1a2 <proses_jam+0x42>
			jam = 0;
 19e:	10 92 62 00 	sts	0x0062, r1
	}
	
//		if (detik == 5)
//		{
//		PORTA = 0x00;
		konversi_kirim2monitor();
 1a2:	92 df       	rcall	.-220    	; 0xc8 <konversi_kirim2monitor>
//		}
	
}
 1a4:	08 95       	ret

000001a6 <__vector_8>:
	kirim_byte('\r');
}
	

SIGNAL(SIG_OVERFLOW1)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25

	TCNT1 = time_tick;
 1b6:	84 ee       	ldi	r24, 0xE4	; 228
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
 1ba:	9d bd       	out	0x2d, r25	; 45
 1bc:	8c bd       	out	0x2c, r24	; 44
	if (++ms_count == 384){  // 196 -- mendekati kenyataan  
 1be:	80 91 63 00 	lds	r24, 0x0063
 1c2:	90 91 64 00 	lds	r25, 0x0064
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 64 00 	sts	0x0064, r25
 1cc:	80 93 63 00 	sts	0x0063, r24
 1d0:	80 91 63 00 	lds	r24, 0x0063
 1d4:	90 91 64 00 	lds	r25, 0x0064
 1d8:	80 58       	subi	r24, 0x80	; 128
 1da:	91 40       	sbci	r25, 0x01	; 1
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <__vector_8+0x42>
							  //lama tundaan ini yang harus di perhatikan
	proses_jam();
 1de:	c0 df       	rcall	.-128    	; 0x160 <proses_jam>
	ms_count=0;
 1e0:	10 92 64 00 	sts	0x0064, r1
 1e4:	10 92 63 00 	sts	0x0063, r1
	}

	
}
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:
//		}
	
}

int main(void)
{
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8e bd       	out	0x2e, r24	; 46
{
	// inisialisasi timer
	// priskalar clock/1024
	TCCR1B = 0x05;
	// inisialisasi intrupsi
	TIFR = 1<<TOV1;
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	88 bf       	out	0x38, r24	; 56
	TIMSK |= 1<<TOIE1;
 200:	89 b7       	in	r24, 0x39	; 57
 202:	84 60       	ori	r24, 0x04	; 4
 204:	89 bf       	out	0x39, r24	; 57
	TCNT1 = time_tick;
 206:	84 ee       	ldi	r24, 0xE4	; 228
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	9d bd       	out	0x2d, r25	; 45
 20c:	8c bd       	out	0x2c, r24	; 44
	
	// inisialisasi port
	DDRA = 0xff; // port a sebagai keluaran
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;
 212:	8b bb       	out	0x1b, r24	; 27
}

// fungsi inisialisasi uart
void init_uart(u16 baud)
{
	UBRRH = (u8) (baud>>8);
 214:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8) baud;
 216:	87 e4       	ldi	r24, 0x47	; 71
 218:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 21e:	86 e8       	ldi	r24, 0x86	; 134
 220:	80 bd       	out	0x20, r24	; 32
int main(void)
{
	init_hw();
	init_uart(71);
	
	sei();
 222:	78 94       	sei
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x2c>

00000226 <__udivmodqi4>:
 226:	99 1b       	sub	r25, r25
 228:	79 e0       	ldi	r23, 0x09	; 9
 22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivmodqi4_ep>

0000022c <__udivmodqi4_loop>:
 22c:	99 1f       	adc	r25, r25
 22e:	96 17       	cp	r25, r22
 230:	08 f0       	brcs	.+2      	; 0x234 <__udivmodqi4_ep>
 232:	96 1b       	sub	r25, r22

00000234 <__udivmodqi4_ep>:
 234:	88 1f       	adc	r24, r24
 236:	7a 95       	dec	r23
 238:	c9 f7       	brne	.-14     	; 0x22c <__udivmodqi4_loop>
 23a:	80 95       	com	r24
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
