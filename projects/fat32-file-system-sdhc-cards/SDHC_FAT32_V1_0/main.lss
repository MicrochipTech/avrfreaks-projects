
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000831c  000083b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000831c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a42  00800210  00800210  000083c0  2**0
                  ALLOC
  3 .debug_aranges 00000108  00000000  00000000  000083c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000651  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000072d3  00000000  00000000  00008b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f0b  00000000  00000000  0000fdec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000049fa  00000000  00000000  00010cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  000156f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001352  00000000  00000000  00015c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000555c  00000000  00000000  00016fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000478  00000000  00000000  0001c532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__ctors_end>
       4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
       8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
       c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      10:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      14:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      18:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      1c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      20:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      24:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      28:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      2c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      30:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      34:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      38:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      3c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      40:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      44:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      48:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      4c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      50:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      54:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      58:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      5c:	0c 94 c1 36 	jmp	0x6d82	; 0x6d82 <__vector_23>
      60:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      64:	0c 94 43 37 	jmp	0x6e86	; 0x6e86 <__vector_25>
      68:	0c 94 55 38 	jmp	0x70aa	; 0x70aa <__vector_26>
      6c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      70:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      74:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      78:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      7c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      80:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      84:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      88:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      8c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      90:	0c 94 cc 37 	jmp	0x6f98	; 0x6f98 <__vector_36>
      94:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <__vector_37>
      98:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      9c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      a0:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      a4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      a8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      ac:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      b0:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      b4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      b8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      bc:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      c0:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      c4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      c8:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>

000000cc <__c.2201>:
      cc:	56 31 2e 30 00                                      V1.0.

000000d1 <__c.2176>:
      d1:	0d 0a 28 68 69 74 20 73 70 61 63 65 20 66 6f 72     ..(hit space for
      e1:	20 6d 61 69 6e 20 6d 65 6e 75 29 0d 0a 00            main menu)...

000000ef <__c.2174>:
      ef:	0d 0a 48 61 72 64 77 61 72 65 20 72 65 76 69 73     ..Hardware revis
      ff:	69 6f 6e 3a 20 00                                   ion: .

00000105 <__c.2172>:
     105:	56 31 2e 30 00                                      V1.0.

0000010a <__c.2170>:
     10a:	0d 0a 44 65 76 69 63 65 20 6e 61 6d 65 20 00        ..Device name .

00000119 <__c.2286>:
     119:	45 78 69 74 0d 0a 00                                Exit...

00000120 <__c.2270>:
     120:	0d 0a 00                                            ...

00000123 <__c.2268>:
     123:	43 6c 75 73 74 65 72 20 2d 20 00                    Cluster - .

0000012e <__c.2266>:
     12e:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     13e:	3e 00                                               >.

00000140 <__c.2263>:
     140:	0d 0a 0d 0a 00                                      .....

00000145 <__c.2258>:
     145:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     155:	3e 00                                               >.

00000157 <__c.2252>:
     157:	2e 00                                               ..

00000159 <__c.2250>:
     159:	45 6e 74 65 72 20 74 61 72 67 65 74 20 66 69 6c     Enter target fil
     169:	65 20 6e 61 6d 65 20 3e 00                          e name >.

00000172 <__c.2248>:
     172:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     182:	3e 00                                               >.

00000184 <__c.2243>:
     184:	45 6e 74 65 72 20 73 74 61 72 74 20 69 6e 64 65     Enter start inde
     194:	78 20 28 65 73 63 20 74 6f 20 66 69 6e 69 73 68     x (esc to finish
     1a4:	29 00                                               ).

000001a6 <__c.2241>:
     1a6:	45 6e 74 65 72 20 64 69 72 65 63 74 6f 72 79 20     Enter directory 
     1b6:	62 61 73 65 20 63 6c 75 73 74 65 72 20 00           base cluster .

000001c4 <__c.2236>:
     1c4:	45 6e 74 65 72 20 73 74 61 72 74 20 63 6c 75 73     Enter start clus
     1d4:	74 65 72 20 28 65 73 63 20 74 6f 20 66 69 6e 69     ter (esc to fini
     1e4:	73 68 29 00                                         sh).

000001e8 <__c.2233>:
     1e8:	45 6e 74 65 72 20 73 6f 6d 65 20 74 65 78 74 20     Enter some text 
     1f8:	74 6f 20 61 70 70 65 6e 64 20 3e 00                 to append >.

00000204 <__c.2231>:
     204:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     214:	3e 00                                               >.

00000216 <__c.2228>:
     216:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     226:	3e 00                                               >.

00000228 <__c.2225>:
     228:	45 6e 74 65 72 20 73 75 62 20 64 69 72 65 63 74     Enter sub direct
     238:	6f 72 79 20 6e 61 6d 65 20 3e 00                    ory name >.

00000243 <__c.2222>:
     243:	45 6e 74 65 72 20 73 75 62 20 64 69 72 65 63 74     Enter sub direct
     253:	6f 72 79 20 6e 61 6d 65 20 3e 00                    ory name >.

0000025e <__c.2219>:
     25e:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 20     Enter file name 
     26e:	3e 00                                               >.

00000270 <__c.2217>:
     270:	45 6e 74 65 72 20 66 69 6c 65 20 73 69 7a 65 20     Enter file size 
     280:	3e 00                                               >.

00000282 <__c.2214>:
     282:	45 6e 74 65 72 20 6e 61 6d 65 20 3e 00              Enter name >.

0000028f <__c.2210>:
     28f:	46 61 69 6c 65 64 2e 0d 0a 00                       Failed....

00000299 <__c.2208>:
     299:	4f 4b 2e 0d 0a 00                                   OK....

0000029f <__c.2205>:
     29f:	46 61 69 6c 65 64 2e 0d 0a 00                       Failed....

000002a9 <__c.2203>:
     2a9:	4f 4b 2e 0d 0a 00                                   OK....

000002af <__c.2198>:
     2af:	0d 0a 2a 2a 2a 2a 2a 2a 20 4d 65 6e 75 20 2a 2a     ..****** Menu **
     2bf:	2a 2a 2a 2a 0d 0a 31 2e 20 55 70 6c 6f 61 64 20     ****..1. Upload 
     2cf:	6e 65 77 20 66 69 72 6d 77 61 72 65 0d 0a 32 2e     new firmware..2.
     2df:	20 49 6e 69 74 20 53 44 20 63 61 72 64 20 28 64      Init SD card (d
     2ef:	6f 20 74 68 69 73 20 66 69 72 73 74 29 0d 0a 33     o this first)..3
     2ff:	2e 20 49 6e 69 74 20 46 41 54 33 32 20 28 64 6f     . Init FAT32 (do
     30f:	20 74 68 69 73 20 73 65 63 6f 6e 64 29 0d 0a 34      this second)..4
     31f:	2e 20 44 69 72 65 63 74 6f 72 79 0d 0a 35 2e 20     . Directory..5. 
     32f:	43 68 61 6e 67 65 20 64 69 72 65 63 74 6f 72 79     Change directory
     33f:	0d 0a 36 2e 20 43 72 65 61 74 65 20 66 69 6c 65     ..6. Create file
     34f:	0d 0a 37 2e 20 43 72 65 61 74 65 20 73 75 62 2d     ..7. Create sub-
     35f:	64 69 72 65 63 74 6f 72 79 0d 0a 38 2e 20 44 65     directory..8. De
     36f:	6c 65 74 65 20 73 75 62 2d 64 69 72 65 63 74 6f     lete sub-directo
     37f:	72 79 0d 0a 39 2e 20 44 65 6c 65 74 65 20 66 69     ry..9. Delete fi
     38f:	6c 65 0d 0a 31 30 2e 20 41 70 70 65 6e 64 20 74     le..10. Append t
     39f:	6f 20 66 69 6c 65 0d 0a 31 31 2e 20 64 65 62 75     o file..11. debu
     3af:	67 20 46 41 54 20 74 61 62 6c 65 20 6c 69 73 74     g FAT table list
     3bf:	0d 0a 31 32 2e 20 64 65 62 75 67 20 44 49 52 20     ..12. debug DIR 
     3cf:	74 61 62 6c 65 20 6c 69 73 74 0d 0a 31 33 2e 20     table list..13. 
     3df:	63 6f 70 79 20 66 69 6c 65 0d 0a 31 34 2e 20 73     copy file..14. s
     3ef:	68 6f 77 20 66 69 6c 65 20 61 73 20 74 65 78 74     how file as text
     3ff:	0d 0a 31 35 2e 20 70 6c 61 79 20 72 61 77 20 73     ..15. play raw s
     40f:	6f 75 6e 64 20 66 69 6c 65 20 28 31 35 2e 36 38     ound file (15.68
     41f:	36 6b 48 7a 20 38 2d 62 69 74 20 75 6e 73 69 67     6kHz 8-bit unsig
     42f:	6e 65 64 29 0d 0a 30 2e 20 65 78 69 74 0d 0a 00     ned)..0. exit...

0000043f <__c.2400>:
     43f:	0d 0a 00                                            ...

00000442 <__c.2398>:
     442:	20 61 6e 64 20 00                                    and .

00000448 <__c.2396>:
     448:	4f 75 74 20 6f 66 20 72 61 6e 67 65 21 20 45 6e     Out of range! En
     458:	74 65 72 20 6e 75 6d 62 65 72 20 62 65 74 77 65     ter number betwe
     468:	65 6e 20 00                                         en .

0000046c <__c.2394>:
     46c:	3e 00                                               >.

0000046e <__c.2349>:
     46e:	43 61 6e 6e 6f 74 20 75 73 65 20 62 6f 6f 74 6c     Cannot use bootl
     47e:	6f 61 64 65 72 20 66 72 6f 6d 20 74 68 69 73 20     oader from this 
     48e:	49 2f 4f 20 64 65 76 69 63 65 20 28 68 69 74 20     I/O device (hit 
     49e:	73 70 61 63 65 29 0d 0a 00                          space)...

000004a7 <__c.2428>:
     4a7:	0d 0a 00                                            ...

000004aa <__c.2426>:
     4aa:	20 61 6e 64 20 00                                    and .

000004b0 <__c.2424>:
     4b0:	4f 75 74 20 6f 66 20 72 61 6e 67 65 21 20 45 6e     Out of range! En
     4c0:	74 65 72 20 6e 75 6d 62 65 72 20 62 65 74 77 65     ter number betwe
     4d0:	65 6e 20 00                                         en .

000004d4 <__c.2422>:
     4d4:	3e 00                                               >.

000004d6 <__c.2457>:
     4d6:	0d 0a 00                                            ...

000004d9 <__c.2453>:
     4d9:	08 20 08 00                                         . ..

000004dd <__c.2477>:
     4dd:	0d 0a 00                                            ...

000004e0 <__c.2475>:
     4e0:	20 65 72 72 20 00                                    err .

000004e6 <__c.2473>:
     4e6:	40 53 45 43 54 4f 52 20 00                          @SECTOR .

000004ef <__c.2471>:
     4ef:	53 44 20 43 4f 4d 4d 41 4e 44 20 57 52 49 54 45     SD COMMAND WRITE
     4ff:	20 42 4c 4f 43 4b 20 46 41 49 4c 45 44 20 00         BLOCK FAILED .

0000050e <__c.2434>:
     50e:	0d 0a 00                                            ...

00000511 <__c.2432>:
     511:	40 53 45 43 54 4f 52 20 00                          @SECTOR .

0000051a <__c.2430>:
     51a:	53 44 20 43 4f 4d 4d 41 4e 44 20 56 45 52 49 46     SD COMMAND VERIF
     52a:	59 20 42 4c 4f 43 4b 20 46 41 49 4c 45 44 20 00     Y BLOCK FAILED .

0000053a <__c.2262>:
     53a:	0d 0a 00                                            ...

0000053d <__c.2260>:
     53d:	40 53 45 43 54 4f 52 20 00                          @SECTOR .

00000546 <__c.2258>:
     546:	53 44 20 43 4f 4d 4d 41 4e 44 20 52 45 41 44 20     SD COMMAND READ 
     556:	42 4c 4f 43 4b 20 46 41 49 4c 45 44 20 00           BLOCK FAILED .

00000564 <__c.2224>:
     564:	53 44 20 56 65 72 73 69 6f 6e 20 32 2e 30 30 20     SD Version 2.00 
     574:	6f 72 20 6c 61 74 65 72 0d 0a 00                    or later...

0000057f <__c.2222>:
     57f:	53 44 20 56 65 72 73 69 6f 6e 20 31 2e 78 78 0d     SD Version 1.xx.
     58f:	0a 00                                               ..

00000591 <__c.2313>:
     591:	53 44 20 43 4f 4d 4d 41 4e 44 20 52 45 53 45 54     SD COMMAND RESET
     5a1:	2f 49 44 4c 45 20 46 41 49 4c 45 44 2e 0d 0a 00     /IDLE FAILED....

000005b1 <__c.2308>:
     5b1:	53 44 20 43 4f 4d 4d 41 4e 44 20 52 45 53 45 54     SD COMMAND RESET
     5c1:	2f 49 44 4c 45 0d 0a 00                             /IDLE...

000005c9 <__c.2330>:
     5c9:	53 44 20 43 4f 4d 4d 41 4e 44 20 53 45 4e 44 20     SD COMMAND SEND 
     5d9:	49 46 43 20 46 41 49 4c 45 44 2e 0d 0a 00           IFC FAILED....

000005e7 <__c.2328>:
     5e7:	53 44 20 43 4f 4d 4d 41 4e 44 20 53 45 4e 44 20     SD COMMAND SEND 
     5f7:	49 46 43 0d 0a 00                                   IFC...

000005fd <__c.2400>:
     5fd:	53 44 20 43 4f 4d 4d 41 4e 44 20 49 4e 49 54 49     SD COMMAND INITI
     60d:	41 4c 49 5a 45 20 46 41 49 4c 45 44 2e 0d 0a 00     ALIZE FAILED....

0000061d <__c.2396>:
     61d:	53 44 20 43 4f 4d 4d 41 4e 44 20 49 4e 49 54 49     SD COMMAND INITI
     62d:	41 4c 49 5a 45 0d 0a 00                             ALIZE...

00000635 <__c.2368>:
     635:	0d 0a 00                                            ...

00000638 <__c.2360>:
     638:	4e 4f 20 20 00                                      NO  .

0000063d <__c.2358>:
     63d:	59 45 53 20 20 00                                   YES  .

00000643 <__c.2356>:
     643:	53 44 20 43 4f 4d 4d 41 4e 44 20 4f 43 52 3a 20     SD COMMAND OCR: 
     653:	53 44 48 43 3d 00                                   SDHC=.

00000659 <__c.2354>:
     659:	53 44 20 43 4f 4d 4d 41 4e 44 20 52 45 41 44 20     SD COMMAND READ 
     669:	4f 43 52 20 46 41 49 4c 45 44 2e 0d 0a 00           OCR FAILED....

00000677 <__c.2352>:
     677:	53 44 20 43 4f 4d 4d 41 4e 44 20 52 45 41 44 20     SD COMMAND READ 
     687:	4f 43 52 0d 0a 00                                   OCR...

0000068d <__c.3537>:
     68d:	0d 0a 00                                            ...

00000690 <__c.3535>:
     690:	46 41 54 33 32 20 2d 20 46 72 65 65 20 63 6c 75     FAT32 - Free clu
     6a0:	73 74 65 72 73 20 20 20 20 20 20 20 20 20 3d 20     sters         = 
     6b0:	00                                                  .

000006b1 <__c.3533>:
     6b1:	0d 0a 00                                            ...

000006b4 <__c.3531>:
     6b4:	46 41 54 33 32 20 2d 20 54 6f 74 61 6c 20 63 6c     FAT32 - Total cl
     6c4:	75 73 74 65 72 73 20 20 20 20 20 20 20 20 3d 20     usters        = 
     6d4:	00                                                  .

000006d5 <__c.3529>:
     6d5:	0d 0a 00                                            ...

000006d8 <__c.3527>:
     6d8:	46 41 54 33 32 20 2d 20 52 6f 6f 74 20 63 6c 75     FAT32 - Root clu
     6e8:	73 74 65 72 20 20 20 20 20 20 20 20 20 20 3d 20     ster          = 
     6f8:	00                                                  .

000006f9 <__c.3525>:
     6f9:	0d 0a 00                                            ...

000006fc <__c.3523>:
     6fc:	46 41 54 33 32 20 2d 20 44 61 74 61 20 73 65 63     FAT32 - Data sec
     70c:	74 6f 72 73 20 20 20 20 20 20 20 20 20 20 3d 20     tors          = 
     71c:	00                                                  .

0000071d <__c.3521>:
     71d:	0d 0a 00                                            ...

00000720 <__c.3519>:
     720:	46 41 54 33 32 20 2d 20 46 69 72 73 74 20 64 61     FAT32 - First da
     730:	74 61 20 73 65 63 74 6f 72 20 20 20 20 20 3d 20     ta sector     = 
     740:	00                                                  .

00000741 <__c.3517>:
     741:	0d 0a 00                                            ...

00000744 <__c.3515>:
     744:	46 41 54 33 32 20 2d 20 46 61 74 20 73 65 63 74     FAT32 - Fat sect
     754:	6f 72 73 20 20 20 20 20 20 20 20 20 20 20 3d 20     ors           = 
     764:	00                                                  .

00000765 <__c.3513>:
     765:	0d 0a 00                                            ...

00000768 <__c.3511>:
     768:	46 41 54 33 32 20 2d 20 53 69 7a 65 20 6f 66 20     FAT32 - Size of 
     778:	66 61 74 20 74 61 62 6c 65 20 20 20 20 20 3d 20     fat table     = 
     788:	00                                                  .

00000789 <__c.3509>:
     789:	0d 0a 00                                            ...

0000078c <__c.3507>:
     78c:	46 41 54 33 32 20 2d 20 4e 75 6d 62 65 72 20 6f     FAT32 - Number o
     79c:	66 20 66 61 74 20 74 61 62 6c 65 73 20 20 3d 20     f fat tables  = 
     7ac:	00                                                  .

000007ad <__c.3505>:
     7ad:	0d 0a 00                                            ...

000007b0 <__c.3503>:
     7b0:	46 41 54 33 32 20 2d 20 46 69 72 73 74 20 66 61     FAT32 - First fa
     7c0:	74 20 73 65 63 74 6f 72 20 20 20 20 20 20 3d 20     t sector      = 
     7d0:	00                                                  .

000007d1 <__c.3501>:
     7d1:	0d 0a 00                                            ...

000007d4 <__c.3499>:
     7d4:	46 41 54 33 32 20 2d 20 52 65 73 65 72 76 65 64     FAT32 - Reserved
     7e4:	20 73 65 63 74 6f 72 73 20 20 20 20 20 20 3d 20      sectors      = 
     7f4:	00                                                  .

000007f5 <__c.3497>:
     7f5:	0d 0a 00                                            ...

000007f8 <__c.3495>:
     7f8:	46 41 54 33 32 20 2d 20 46 69 72 73 74 20 72 65     FAT32 - First re
     808:	73 65 72 76 65 64 20 73 65 63 74 6f 72 20 3d 20     served sector = 
     818:	00                                                  .

00000819 <__c.3493>:
     819:	0d 0a 00                                            ...

0000081c <__c.3491>:
     81c:	46 41 54 33 32 20 2d 20 46 53 69 6e 66 6f 20 73     FAT32 - FSinfo s
     82c:	65 63 74 6f 72 20 20 20 20 20 20 20 20 20 3d 20     ector         = 
     83c:	00                                                  .

0000083d <__c.3489>:
     83d:	0d 0a 00                                            ...

00000840 <__c.3487>:
     840:	46 41 54 33 32 20 2d 20 53 65 63 74 6f 72 73 2f     FAT32 - Sectors/
     850:	43 6c 75 73 74 65 72 20 20 20 20 20 20 20 3d 20     Cluster       = 
     860:	00                                                  .

00000861 <__c.3485>:
     861:	0d 0a 00                                            ...

00000864 <__c.3483>:
     864:	46 41 54 33 32 20 2d 20 42 79 74 65 73 2f 53 65     FAT32 - Bytes/Se
     874:	63 74 6f 72 20 20 20 20 20 20 20 20 20 20 3d 20     ctor          = 
     884:	00                                                  .

00000885 <__c.3481>:
     885:	46 41 54 33 32 20 2d 20 43 6f 75 6e 74 69 6e 67     FAT32 - Counting
     895:	20 66 72 65 65 20 63 6c 75 73 74 65 72 73 2e 2e      free clusters..
     8a5:	2e 0d 0a 00                                         ....

000008a9 <__c.3479>:
     8a9:	0d 0a 00                                            ...

000008ac <__c.3477>:
     8ac:	46 41 54 33 32 20 2d 20 46 61 69 6c 65 64 20 74     FAT32 - Failed t
     8bc:	6f 20 66 69 6e 64 20 46 53 20 49 6e 66 6f 20 73     o find FS Info s
     8cc:	65 63 74 6f 72 20 61 74 20 00                       ector at .

000008d6 <__nonamed.3475>:
     8d6:	00 00 55 aa                                         ..U.

000008da <__c.3473>:
     8da:	72 72 41 61 00                                      rrAa.

000008df <__c.3471>:
     8df:	52 52 61 41 00                                      RRaA.

000008e4 <__c.3469>:
     8e4:	46 41 54 33 32 20 2d 20 46 61 69 6c 65 64 20 74     FAT32 - Failed t
     8f4:	6f 20 66 69 6e 64 20 62 6f 6f 74 20 73 65 63 74     o find boot sect
     904:	6f 72 0d 0a 00                                      or...

00000909 <__c.3467>:
     909:	0d 0a 00                                            ...

0000090c <__c.3465>:
     90c:	46 41 54 33 32 20 2d 20 52 65 61 64 69 6e 67 20     FAT32 - Reading 
     91c:	66 69 72 73 74 20 70 61 72 74 69 74 69 6f 6e 20     first partition 
     92c:	62 6f 6f 74 20 73 65 63 74 6f 72 20 61 74 20 62     boot sector at b
     93c:	6c 6f 63 6b 20 00                                   lock .

00000942 <__c.3463>:
     942:	46 41 54 33 32 20 2d 20 4d 61 73 74 65 72 20 62     FAT32 - Master b
     952:	6f 6f 74 20 72 65 63 6f 72 64 20 66 6f 75 6e 64     oot record found
     962:	0d 0a 00                                            ...

00000965 <__c.2738>:
     965:	46 41 54 33 32 20 2d 20 44 49 52 20 45 52 52 4f     FAT32 - DIR ERRO
     975:	52 2c 20 55 4e 41 42 4c 45 20 54 4f 20 52 45 41     R, UNABLE TO REA
     985:	44 20 43 48 41 49 4e 0d 0a 00                       D CHAIN...

0000098f <__c.2736>:
     98f:	0d 0a 00                                            ...

00000992 <__c.2734>:
     992:	22 00                                               ".

00000994 <__c.2732>:
     994:	20 22 00                                             ".

00000997 <__c.2730>:
     997:	20 53 49 5a 45 3d 00                                 SIZE=.

0000099e <__c.2728>:
     99e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9ae:	00                                                  .

000009af <__c.2726>:
     9af:	20 40 43 4c 55 53 54 20 00                           @CLUST .

000009b8 <__c.2724>:
     9b8:	3c 46 49 4c 45 3e 20 00                             <FILE> .

000009c0 <__c.2722>:
     9c0:	3c 44 49 52 3e 20 20 00                             <DIR>  .

000009c8 <__c.2720>:
     9c8:	0d 0a 0d 0a 00                                      .....

000009cd <__c.2718>:
     9cd:	44 69 72 65 63 74 6f 72 79 20 40 20 63 6c 75 73     Directory @ clus
     9dd:	74 65 72 20 00                                      ter .

000009e2 <__c.3374>:
     9e2:	0d 0a 00                                            ...

000009e5 <__c.3372>:
     9e5:	20 62 79 74 65 5f 61 64 64 3d 00                     byte_add=.

000009f0 <__c.3370>:
     9f0:	20 70 5f 63 6c 75 73 74 3d 00                        p_clust=.

000009fa <__c.3368>:
     9fa:	20 6c 5f 63 6c 75 73 74 3d 00                        l_clust=.

00000a04 <__c.3366>:
     a04:	20 46 41 49 4c 45 44 21 20 62 61 73 65 3d 00         FAILED! base=.

00000a13 <__c.3364>:
     a13:	65 72 61 73 65 00                                   erase.

00000a19 <__c.3362>:
     a19:	77 72 69 74 65 00                                   write.

00000a1f <__c.3360>:
     a1f:	72 65 61 64 00                                      read.

00000a24 <__c.3358>:
     a24:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 43     FAT32 - ERROR, C
     a34:	68 61 69 6e 20 00                                   hain .

00000a3a <__c.3356>:
     a3a:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 43     FAT32 - ERROR, C
     a4a:	68 61 69 6e 2c 20 75 6e 61 62 6c 65 20 74 6f 20     hain, unable to 
     a5a:	64 65 74 65 72 6d 69 6e 65 20 70 68 79 73 69 63     determine physic
     a6a:	61 6c 20 63 6c 75 73 74 65 72 20 66 72 6f 6d 20     al cluster from 
     a7a:	46 41 54 20 63 68 61 69 6e 2e 0d 0a 00              FAT chain....

00000a87 <__c.3354>:
     a87:	0d 0a 00                                            ...

00000a8a <__c.3352>:
     a8a:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 43     FAT32 - ERROR, C
     a9a:	68 61 69 6e 2c 20 75 6e 61 62 6c 65 20 74 6f 20     hain, unable to 
     aaa:	61 63 63 65 73 73 20 70 68 79 73 69 63 61 6c 20     access physical 
     aba:	73 65 63 74 6f 72 20 00                             sector .

00000ac2 <__c.2685>:
     ac2:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     ad2:	52 2c 20 63 6f 6e 6e 65 63 74 69 6e 67 20 2e 2e     R, connecting ..
     ae2:	20 65 6e 74 72 79 20 74 6f 20 70 61 72 65 6e 74      entry to parent
     af2:	20 63 68 61 69 6e 0d 0a 00                           chain...

00000afb <__c.2683>:
     afb:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     b0b:	52 2c 20 72 65 61 64 69 6e 67 20 2e 2e 20 65 6e     R, reading .. en
     b1b:	74 72 79 0d 0a 00                                   try...

00000b21 <__c.2681>:
     b21:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     b31:	52 2c 20 63 72 65 61 74 69 6e 67 20 2e 2e 20 65     R, creating .. e
     b41:	6e 74 72 79 0d 0a 00                                ntry...

00000b48 <__c.2679>:
     b48:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     b58:	52 2c 20 63 6f 6e 6e 65 63 74 69 6e 67 20 2e 20     R, connecting . 
     b68:	65 6e 74 72 79 20 74 6f 20 6e 65 77 20 63 68 61     entry to new cha
     b78:	69 6e 0d 0a 00                                      in...

00000b7d <__c.2677>:
     b7d:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     b8d:	52 2c 20 72 65 61 64 69 6e 67 20 2e 20 65 6e 74     R, reading . ent
     b9d:	72 79 0d 0a 00                                      ry...

00000ba2 <__c.2675>:
     ba2:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     bb2:	52 2c 20 63 72 65 61 74 69 6e 67 20 2e 20 65 6e     R, creating . en
     bc2:	74 72 79 0d 0a 00                                   try...

00000bc8 <__c.2673>:
     bc8:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     bd8:	52 2c 20 6c 69 6e 6b 69 6e 67 20 65 6e 74 72 79     R, linking entry
     be8:	20 69 6e 20 70 61 72 65 6e 74 20 44 49 52 20 74      in parent DIR t
     bf8:	6f 20 6e 65 77 20 63 68 61 69 6e 0d 0a 00           o new chain...

00000c06 <__c.2671>:
     c06:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     c16:	52 2c 20 72 65 61 64 69 6e 67 20 65 6e 74 72 79     R, reading entry
     c26:	20 69 6e 20 70 61 72 65 6e 74 20 44 49 52 0d 0a      in parent DIR..
     c36:	00                                                  .

00000c37 <__c.2669>:
     c37:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 44 49     FAT32 - CreateDI
     c47:	52 2c 20 65 72 61 73 69 6e 67 20 6e 65 77 20 63     R, erasing new c
     c57:	68 61 69 6e 0d 0a 00                                hain...

00000c5e <__c.3216>:
     c5e:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
     c6e:	6e 61 62 6c 65 20 74 6f 20 61 63 63 65 73 73 20     nable to access 
     c7e:	46 53 69 6e 66 6f 0d 0a 00                          FSinfo...

00000c87 <__c.3214>:
     c87:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
     c97:	6e 61 62 6c 65 20 74 6f 20 63 72 65 61 74 65 20     nable to create 
     ca7:	63 68 61 69 6e 2e 0d 0a 00                          chain....

00000cb0 <__c.3212>:
     cb0:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
     cc0:	6e 61 62 6c 65 20 74 6f 20 74 65 72 6d 69 6e 61     nable to termina
     cd0:	74 65 20 6e 65 77 20 63 68 61 69 6e 0d 0a 00        te new chain...

00000cdf <__c.3210>:
     cdf:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
     cef:	6e 61 62 6c 65 20 74 6f 20 61 63 63 65 73 73 20     nable to access 
     cff:	46 53 49 6e 66 6f 0d 0a 00                          FSInfo...

00000d08 <__c.3208>:
     d08:	0d 0a 00                                            ...

00000d0b <__c.3206>:
     d0b:	46 41 54 33 32 20 2d 20 4e 65 77 20 63 68 61 69     FAT32 - New chai
     d1b:	6e 2c 20 74 65 72 6d 69 6e 61 74 69 6e 67 20 65     n, terminating e
     d2b:	6e 64 20 63 6c 75 73 74 65 72 20 61 74 20 00        nd cluster at .

00000d3a <__c.3201>:
     d3a:	0d 0a 00                                            ...

00000d3d <__c.3199>:
     d3d:	46 41 54 33 32 20 2d 20 4e 65 77 20 63 68 61 69     FAT32 - New chai
     d4d:	6e 20 62 61 73 65 20 63 6c 75 73 74 65 72 20 61     n base cluster a
     d5d:	74 20 00                                            t .

00000d60 <__c.3197>:
     d60:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 46     FAT32 - ERROR, F
     d70:	41 54 20 73 65 61 72 63 68 20 75 6e 61 62 6c 65     AT search unable
     d80:	20 74 6f 20 66 69 6e 64 20 65 6e 6f 75 67 68 20      to find enough 
     d90:	66 72 65 65 20 63 6c 75 73 74 65 72 73 20 28 64     free clusters (d
     da0:	65 73 70 69 74 65 20 46 53 49 6e 66 6f 29 2e 0d     espite FSInfo)..
     db0:	0a 00                                               ..

00000db2 <__c.3192>:
     db2:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 63     FAT32 - ERROR, c
     dc2:	68 61 69 6e 20 63 72 65 61 74 65 20 66 61 69 6c     hain create fail
     dd2:	65 64 2c 20 6e 6f 74 20 65 6e 6f 75 67 68 20 66     ed, not enough f
     de2:	72 65 65 20 63 6c 75 73 74 65 72 73 0d 0a 00        ree clusters...

00000df1 <__c.3190>:
     df1:	0d 0a 00                                            ...

00000df4 <__c.3188>:
     df4:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 20 6e     FAT32 - Create n
     e04:	65 77 20 63 68 61 69 6e 2c 20 73 65 61 72 63 68     ew chain, search
     e14:	69 6e 67 20 66 72 6f 6d 20 63 6c 75 73 74 65 72     ing from cluster
     e24:	20 00                                                .

00000e26 <__c.3186>:
     e26:	0d 0a 00                                            ...

00000e29 <__c.3184>:
     e29:	46 41 54 33 32 20 2d 20 43 72 65 61 74 65 20 6e     FAT32 - Create n
     e39:	65 77 20 63 68 61 69 6e 20 6f 66 20 6c 65 6e 67     ew chain of leng
     e49:	74 68 20 00                                         th .

00000e4d <__c.3692>:
     e4d:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
     e5d:	6e 61 62 6c 65 20 74 6f 20 75 70 64 61 74 65 20     nable to update 
     e6d:	46 41 54 20 74 61 62 6c 65 73 0d 0a 00              FAT tables...

00000e7a <__c.2842>:
     e7a:	0d 0a 00                                            ...

00000e7d <__c.2840>:
     e7d:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     e8d:	79 2c 20 45 52 52 4f 52 2c 20 66 61 69 6c 65 64     y, ERROR, failed
     e9d:	20 74 6f 20 77 72 69 74 65 20 4c 46 4e 20 65 6e      to write LFN en
     ead:	74 72 79 20 61 74 20 69 6e 64 65 78 20 00           try at index .

00000ebb <__c.2838>:
     ebb:	0d 0a 00                                            ...

00000ebe <__c.2836>:
     ebe:	20 61 64 64 65 64 20 61 74 20 69 6e 64 65 78 20      added at index 
     ece:	00                                                  .

00000ecf <__c.2834>:
     ecf:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     edf:	79 2c 20 4c 46 4e 20 65 6e 74 72 79 20 73 65 71     y, LFN entry seq
     eef:	3d 00                                               =.

00000ef1 <__c.2832>:
     ef1:	0d 0a 00                                            ...

00000ef4 <__c.2830>:
     ef4:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     f04:	79 2c 20 45 52 52 4f 52 2c 20 66 61 69 6c 65 64     y, ERROR, failed
     f14:	20 74 6f 20 77 72 69 74 65 20 6d 61 69 6e 20 65      to write main e
     f24:	6e 74 72 79 20 61 74 20 69 6e 64 65 78 20 00        ntry at index .

00000f33 <__c.2828>:
     f33:	0d 0a 00                                            ...

00000f36 <__c.2826>:
     f36:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     f46:	79 2c 20 6d 61 69 6e 20 65 6e 74 72 79 20 61 64     y, main entry ad
     f56:	64 65 64 20 61 74 20 69 6e 64 65 78 20 00           ded at index .

00000f64 <__c.2824>:
     f64:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     f74:	79 2c 20 45 52 52 4f 52 2c 20 66 61 69 6c 65 64     y, ERROR, failed
     f84:	20 74 6f 20 67 65 74 20 73 70 61 63 65 20 69 6e      to get space in
     f94:	20 64 69 72 65 63 74 6f 72 79 0d 0a 00               directory...

00000fa1 <__c.2822>:
     fa1:	0d 0a 00                                            ...

00000fa4 <__c.2820>:
     fa4:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     fb4:	79 2c 20 74 65 72 6d 69 6e 61 74 69 6e 67 20 65     y, terminating e
     fc4:	6e 74 72 79 20 61 64 64 65 64 20 61 74 20 69 6e     ntry added at in
     fd4:	64 65 78 20 00                                      dex .

00000fd9 <__c.2818>:
     fd9:	0d 0a 00                                            ...

00000fdc <__c.2816>:
     fdc:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
     fec:	79 2c 20 6e 6f 20 73 70 61 63 65 2c 20 65 78 74     y, no space, ext
     ffc:	65 6e 64 69 6e 67 20 63 68 61 69 6e 2c 20 6e 65     ending chain, ne
    100c:	77 20 73 70 61 63 65 20 77 69 6c 6c 20 62 65 20     w space will be 
    101c:	61 74 20 69 6e 64 65 78 20 00                       at index .

00001026 <__c.2814>:
    1026:	0d 0a 00                                            ...

00001029 <__c.2812>:
    1029:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
    1039:	79 2c 20 65 72 61 73 65 64 20 73 70 61 63 65 20     y, erased space 
    1049:	66 6f 75 6e 64 20 61 74 20 69 6e 64 65 78 20 00     found at index .

00001059 <__c.2810>:
    1059:	0d 0a 00                                            ...

0000105c <__c.2808>:
    105c:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
    106c:	79 2c 20 75 6e 75 73 65 64 20 73 70 61 63 65 20     y, unused space 
    107c:	66 6f 75 6e 64 20 61 74 20 69 6e 64 65 78 20 00     found at index .

0000108c <__c.2804>:
    108c:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 20 63 61     FAT32 - ERROR ca
    109c:	6e 6e 6f 74 20 63 72 65 61 74 65 20 65 6e 74 72     nnot create entr
    10ac:	79 2c 20 6e 61 6d 65 20 65 78 69 73 74 73 0d 0a     y, name exists..
    10bc:	00                                                  .

000010bd <__c.2802>:
    10bd:	22 0d 0a 00                                         "...

000010c1 <__c.2800>:
    10c1:	20 22 00                                             ".

000010c4 <__c.2798>:
    10c4:	46 41 54 33 32 20 2d 20 41 64 64 20 65 6e 74 72     FAT32 - Add entr
    10d4:	79 20 74 6f 20 64 69 72 65 63 74 6f 72 79 20 40     y to directory @
    10e4:	20 63 6c 75 73 74 65 72 20 00                        cluster .

000010ee <__c.3018>:
    10ee:	20 20 20 20 00                                          .

000010f3 <__c.3016>:
    10f3:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001100 <__c.2973>:
    1100:	46 41 54 33 32 20 2d 20 44 49 52 20 53 45 41 52     FAT32 - DIR SEAR
    1110:	43 48 20 45 52 52 4f 52 2c 20 55 4e 41 42 4c 45     CH ERROR, UNABLE
    1120:	20 54 4f 20 52 45 41 44 20 43 48 41 49 4e 0d 0a      TO READ CHAIN..
    1130:	00                                                  .

00001131 <__c.2971>:
    1131:	0d 0a 00                                            ...

00001134 <__c.2969>:
    1134:	22 20 64 69 72 65 63 74 6f 72 79 5f 73 69 7a 65     " directory_size
    1144:	3d 00                                               =.

00001146 <__c.2967>:
    1146:	20 6e 61 6d 65 20 28 6c 66 6e 29 3d 22 00            name (lfn)=".

00001154 <__c.2965>:
    1154:	20 6e 61 6d 65 20 28 38 2e 33 29 3d 22 00            name (8.3)=".

00001162 <__c.2963>:
    1162:	46 41 54 33 32 20 2d 20 44 49 52 20 53 45 41 52     FAT32 - DIR SEAR
    1172:	43 48 2c 20 62 61 73 65 3d 00                       CH, base=.

0000117c <__c.3287>:
    117c:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
    118c:	6e 61 62 6c 65 20 74 6f 20 65 78 74 65 6e 64 20     nable to extend 
    119c:	63 68 61 69 6e 0d 0a 00                             chain...

000011a4 <__c.3285>:
    11a4:	0d 0a 00                                            ...

000011a7 <__c.3283>:
    11a7:	20 65 6e 64 3d 00                                    end=.

000011ad <__c.3281>:
    11ad:	46 41 54 33 32 20 2d 20 43 68 61 69 6e 20 65 78     FAT32 - Chain ex
    11bd:	74 65 6e 64 2c 20 62 61 73 65 3d 00                 tend, base=.

000011c9 <__c.3279>:
    11c9:	0d 0a 00                                            ...

000011cc <__c.3277>:
    11cc:	20 63 6f 6e 74 61 69 6e 73 20 62 61 64 2f 72 65      contains bad/re
    11dc:	73 65 72 76 65 64 20 63 6c 75 73 74 65 72 20 00     served cluster .

000011ec <__c.3275>:
    11ec:	46 41 54 33 32 20 2d 20 43 68 61 69 6e 20 65 78     FAT32 - Chain ex
    11fc:	74 65 6e 64 20 45 52 52 4f 52 2e 20 43 68 61 69     tend ERROR. Chai
    120c:	6e 20 61 74 20 63 6c 75 73 74 65 72 00              n at cluster.

00001219 <__c.3164>:
    1219:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
    1229:	6e 61 62 6c 65 20 74 6f 20 75 70 64 61 74 65 20     nable to update 
    1239:	46 53 69 6e 66 6f 20 73 65 63 74 6f 72 0d 0a 00     FSinfo sector...

00001249 <__c.3162>:
    1249:	20 63 6c 75 73 74 65 72 73 0d 0a 00                  clusters...

00001255 <__c.3160>:
    1255:	46 41 54 33 32 20 2d 20 46 72 65 65 64 20 00        FAT32 - Freed .

00001264 <__c.3158>:
    1264:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
    1274:	6e 61 62 6c 65 20 74 6f 20 65 72 61 73 65 20 63     nable to erase c
    1284:	68 61 69 6e 0d 0a 00                                hain...

0000128b <__c.3154>:
    128b:	0d 0a 00                                            ...

0000128e <__c.3152>:
    128e:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 41     FAT32 - ERROR, A
    129e:	74 74 65 6d 70 74 20 74 6f 20 65 72 61 73 65 20     ttempt to erase 
    12ae:	6e 6f 6e 2d 65 78 69 73 74 65 6e 74 20 63 68 61     non-existent cha
    12be:	69 6e 20 40 00                                      in @.

000012c3 <__c.3150>:
    12c3:	0d 0a 00                                            ...

000012c6 <__c.3148>:
    12c6:	46 41 54 33 32 20 2d 20 45 72 61 73 65 20 63 68     FAT32 - Erase ch
    12d6:	61 69 6e 20 40 00                                   ain @.

000012dc <__c.2578>:
    12dc:	20 65 6e 74 72 69 65 73 0d 0a 00                     entries...

000012e7 <__c.2576>:
    12e7:	46 41 54 33 32 20 2d 20 54 65 73 74 69 6e 67 20     FAT32 - Testing 
    12f7:	64 69 72 65 63 74 6f 72 79 20 65 6d 70 74 79 2c     directory empty,
    1307:	20 00                                                .

00001309 <__c.2574>:
    1309:	2e 00                                               ..

0000130b <__c.2572>:
    130b:	2e 2e 00                                            ...

0000130e <__c.2544>:
    130e:	2e 2e 00                                            ...

00001311 <__c.2510>:
    1311:	0d 0a 00                                            ...

00001314 <__c.2508>:
    1314:	20 53 49 5a 45 3d 00                                 SIZE=.

0000131b <__c.2506>:
    131b:	20 46 49 4c 45 40 00                                 FILE@.

00001322 <__c.2504>:
    1322:	20 49 4e 44 45 58 3d 00                              INDEX=.

0000132a <__c.2502>:
    132a:	46 41 54 33 32 20 2d 20 46 69 6c 65 20 66 6f 75     FAT32 - File fou
    133a:	6e 64 20 44 49 52 40 00                             nd DIR@.

00001342 <__c.3255>:
    1342:	46 41 54 33 32 20 2d 20 45 52 52 4f 52 2c 20 75     FAT32 - ERROR, u
    1352:	6e 61 62 6c 65 20 74 6f 20 65 78 74 65 6e 64 20     nable to extend 
    1362:	63 68 61 69 6e 0d 0a 00                             chain...

0000136a <__c.3253>:
    136a:	46 41 54 33 32 20 2d 20 43 68 61 69 6e 20 65 78     FAT32 - Chain ex
    137a:	74 65 6e 74 69 6f 6e 20 6e 6f 74 20 72 65 71 75     tention not requ
    138a:	69 72 65 64 2e 0d 0a 00                             ired....

00001392 <__c.3251>:
    1392:	0d 0a 00                                            ...

00001395 <__c.3249>:
    1395:	20 65 6e 64 3d 00                                    end=.

0000139b <__c.3247>:
    139b:	46 41 54 33 32 20 2d 20 43 68 61 69 6e 20 65 78     FAT32 - Chain ex
    13ab:	74 65 6e 64 2c 20 62 61 73 65 3d 00                 tend, base=.

000013b7 <__c.3245>:
    13b7:	0d 0a 00                                            ...

000013ba <__c.3243>:
    13ba:	20 63 6f 6e 74 61 69 6e 73 20 62 61 64 2f 72 65      contains bad/re
    13ca:	73 65 72 76 65 64 20 63 6c 75 73 74 65 72 20 00     served cluster .

000013da <__c.3241>:
    13da:	46 41 54 33 32 20 2d 20 43 68 61 69 6e 20 65 78     FAT32 - Chain ex
    13ea:	74 65 6e 64 20 45 52 52 4f 52 2e 20 43 68 61 69     tend ERROR. Chai
    13fa:	6e 20 61 74 20 63 6c 75 73 74 65 72 00              n at cluster.

00001407 <__c.2388>:
    1407:	20 45 52 52 4f 52 0d 0a 00                           ERROR...

00001410 <__c.2386>:
    1410:	0d 0a 00                                            ...

00001413 <__c.2384>:
    1413:	20 43 48 4b 3d 30 78 00                              CHK=0x.

0000141b <__c.2382>:
    141b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    142b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    143b:	20 20 20 20 20 20 20 20 53 45 51 3d 30 78 00                SEQ=0x.

0000144a <__c.2380>:
    144a:	20 41 54 54 52 49 42 3d 30 78 00                     ATTRIB=0x.

00001455 <__c.2378>:
    1455:	20 4c 46 4e 20 20 20 00                              LFN   .

0000145d <__c.2376>:
    145d:	0d 0a 00                                            ...

00001460 <__c.2374>:
    1460:	22 20 43 48 4b 3d 30 78 00                          " CHK=0x.

00001469 <__c.2372>:
    1469:	20 22 00                                             ".

0000146c <__c.2370>:
    146c:	20 43 4c 55 53 54 3d 00                              CLUST=.

00001474 <__c.2368>:
    1474:	20 53 49 5a 45 3d 00                                 SIZE=.

0000147b <__c.2366>:
    147b:	20 41 54 54 52 49 42 3d 30 78 00                     ATTRIB=0x.

00001486 <__c.2364>:
    1486:	20 55 53 45 44 20 20 00                              USED  .

0000148e <__c.2362>:
    148e:	0d 0a 00                                            ...

00001491 <__c.2360>:
    1491:	20 28 4c 46 4e 29 00                                 (LFN).

00001498 <__c.2358>:
    1498:	22 00                                               ".

0000149a <__c.2356>:
    149a:	20 22 00                                             ".

0000149d <__c.2354>:
    149d:	20 43 4c 55 53 54 3d 00                              CLUST=.

000014a5 <__c.2352>:
    14a5:	20 53 49 5a 45 3d 00                                 SIZE=.

000014ac <__c.2350>:
    14ac:	20 41 54 54 52 49 42 3d 30 78 00                     ATTRIB=0x.

000014b7 <__c.2348>:
    14b7:	20 45 52 41 53 45 44 00                              ERASED.

000014bf <__c.2346>:
    14bf:	20 46 52 45 45 0d 0a 00                              FREE...

000014c7 <__c.2344>:
    14c7:	0d 0a 0d 0a 00                                      .....

000014cc <__c.2342>:
    14cc:	4d 41 58 20 44 49 52 45 43 54 4f 52 59 20 49 4e     MAX DIRECTORY IN
    14dc:	44 45 58 20 3d 20 00                                DEX = .

000014e3 <__c.2340>:
    14e3:	0d 0a 0d 0a 00                                      .....

000014e8 <__c.2338>:
    14e8:	46 41 54 33 32 20 2d 20 2a 2a 44 45 42 55 47 2a     FAT32 - **DEBUG*
    14f8:	2a 20 44 69 72 65 63 74 6f 72 79 20 74 61 62 6c     * Directory tabl
    1508:	65 20 40 20 63 6c 75 73 74 65 72 20 00              e @ cluster .

00001515 <__c.2317>:
    1515:	20 20 46 49 4e 41 4c 20 2d 3e 20 3c 3c 20 43 48       FINAL -> << CH
    1525:	41 49 4e 20 45 4e 44 20 3e 3e 0d 0a 00              AIN END >>...

00001532 <__c.2314>:
    1532:	0d 0a 00                                            ...

00001535 <__c.2312>:
    1535:	20 20 4c 49 4e 4b 20 20 2d 3e 20 00                   LINK  -> .

00001541 <__c.2309>:
    1541:	20 20 52 45 53 45 52 56 45 44 0d 0a 00                RESERVED...

0000154e <__c.2305>:
    154e:	20 20 66 72 65 65 20 2e 2e 2e 0d 0a 00                free ......

0000155b <__c.2302>:
    155b:	46 41 54 33 32 20 2d 20 2a 2a 44 45 42 55 47 2a     FAT32 - **DEBUG*
    156b:	2a 20 46 41 54 20 54 41 42 4c 45 20 4c 49 53 54     * FAT TABLE LIST
    157b:	0d 0a 00                                            ...

0000157e <__ctors_end>:
    157e:	11 24       	eor	r1, r1
    1580:	1f be       	out	0x3f, r1	; 63
    1582:	cf ef       	ldi	r28, 0xFF	; 255
    1584:	d1 e2       	ldi	r29, 0x21	; 33
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	cd bf       	out	0x3d, r28	; 61

0000158a <get_mcusr>:
// Watchdog fix for 1281
void get_mcusr(void) \
      __attribute__((naked)) \
      __attribute__((section(".init3")));
void get_mcusr(void)
{
    158a:	14 be       	out	0x34, r1	; 52
	MCUSR = 0;
    wdt_disable();
    158c:	88 e1       	ldi	r24, 0x18	; 24
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	80 93 60 00 	sts	0x0060, r24
    1596:	10 92 60 00 	sts	0x0060, r1
    159a:	0f be       	out	0x3f, r0	; 63

0000159c <__do_copy_data>:
    159c:	12 e0       	ldi	r17, 0x02	; 2
    159e:	a0 e0       	ldi	r26, 0x00	; 0
    15a0:	b2 e0       	ldi	r27, 0x02	; 2
    15a2:	ec e1       	ldi	r30, 0x1C	; 28
    15a4:	f3 e8       	ldi	r31, 0x83	; 131
    15a6:	00 e0       	ldi	r16, 0x00	; 0
    15a8:	0b bf       	out	0x3b, r16	; 59
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <__do_copy_data+0x14>
    15ac:	07 90       	elpm	r0, Z+
    15ae:	0d 92       	st	X+, r0
    15b0:	a0 31       	cpi	r26, 0x10	; 16
    15b2:	b1 07       	cpc	r27, r17
    15b4:	d9 f7       	brne	.-10     	; 0x15ac <__do_copy_data+0x10>

000015b6 <__do_clear_bss>:
    15b6:	1c e0       	ldi	r17, 0x0C	; 12
    15b8:	a0 e1       	ldi	r26, 0x10	; 16
    15ba:	b2 e0       	ldi	r27, 0x02	; 2
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <.do_clear_bss_start>

000015be <.do_clear_bss_loop>:
    15be:	1d 92       	st	X+, r1

000015c0 <.do_clear_bss_start>:
    15c0:	a2 35       	cpi	r26, 0x52	; 82
    15c2:	b1 07       	cpc	r27, r17
    15c4:	e1 f7       	brne	.-8      	; 0x15be <.do_clear_bss_loop>
    15c6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <main>
    15ca:	0c 94 8c 41 	jmp	0x8318	; 0x8318 <_exit>

000015ce <__bad_interrupt>:
    15ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000015d2 <main_fly>:
this may include waiting for space in the uart transmit buffer, waiting for user input, or any kind of delay.
If debug output is required from main_fly(), then the uart must be configured NOT to call main_fly when waiting.
*/
void main_fly(void)
{
}
    15d2:	08 95       	ret

000015d4 <hardware_id>:
int hardware_id(void)
{
	// Insert code here to determine the hardware revision by reading port lines.
	// This is important to allow your firmware to be compatible with different revisions or models of hardware.
	return 0;
}
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	08 95       	ret

000015da <hardware_name>:

//write name of hardware revision to text buffer
char* hardware_name(char* textbuf)
{
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	18 2f       	mov	r17, r24
    15e0:	09 2f       	mov	r16, r25
	switch(hardware_id())
	{
		case 0:
			strcpy_P(textbuf, PSTR("V1.0"));
    15e2:	6c ec       	ldi	r22, 0xCC	; 204
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcpy_P>
		default:		
			strcpy_P(textbuf, PSTR("UNKNOWN!"));
			break;
	};
	return textbuf;
}
    15ea:	81 2f       	mov	r24, r17
    15ec:	90 2f       	mov	r25, r16
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	08 95       	ret

000015f4 <main>:
}

	
// Main application routine.
int main(void)
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
	//initialise IO
	sd_init();
    15f8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <sd_init>
	audio_init();
    15fc:	0e 94 00 37 	call	0x6e00	; 0x6e00 <audio_init>

	DDRC |=_BV(PC0)+_BV(PC1)+_BV(PC2);
    1600:	87 b1       	in	r24, 0x07	; 7
    1602:	87 60       	ori	r24, 0x07	; 7
    1604:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(_BV(PC0)+_BV(PC1)+_BV(PC2));
    1606:	88 b1       	in	r24, 0x08	; 8
    1608:	88 7f       	andi	r24, 0xF8	; 248
    160a:	88 b9       	out	0x08, r24	; 8

	#define BAUD_TOL	5
	#define	BAUD		19200
	#include <util/setbaud.h>
	uart1_init(UBRR_VALUE, USE_2X, UART1_FIFO_TX_SIZE, NULL);
    160c:	89 e1       	ldi	r24, 0x19	; 25
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	52 e0       	ldi	r21, 0x02	; 2
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	0e 94 2b 3a 	call	0x7456	; 0x7456 <uart1_init>
	
	//execute on-the-fly processes while waiting for uart to transmit, DO NOT DO THIS IF main_fly() ALSO OUTPUTS TO UART!!
	uart1_fifo_tx.wait_fptr = main_fly;
    161e:	89 ee       	ldi	r24, 0xE9	; 233
    1620:	9a e0       	ldi	r25, 0x0A	; 10
    1622:	90 93 4d 0c 	sts	0x0C4D, r25
    1626:	80 93 4c 0c 	sts	0x0C4C, r24

	//connect debug info to UART 1
	debug_fifo_ptr=&uart1_fifo_tx;
    162a:	8c e3       	ldi	r24, 0x3C	; 60
    162c:	9c e0       	ldi	r25, 0x0C	; 12
    162e:	90 93 11 02 	sts	0x0211, r25
    1632:	80 93 10 02 	sts	0x0210, r24

	//enable global interrupts	
	sei();
    1636:	78 94       	sei

	//setup console
	console_init();
    1638:	0e 94 63 11 	call	0x22c6	; 0x22c6 <console_init>
	console_vars.echo=TRUE;									//echo on
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 1a 0c 	sts	0x0C1A, r24
	console_vars.input_device = CONSOLE_DEVICE_UART1;		//tell console it's i/o device type
    1642:	80 93 1b 0c 	sts	0x0C1B, r24
	console_vars.output_device = CONSOLE_DEVICE_UART1;
    1646:	80 93 1c 0c 	sts	0x0C1C, r24

	//connect uart to console
	console_vars.output_ptr=&uart1_fifo_tx;
    164a:	8c e3       	ldi	r24, 0x3C	; 60
    164c:	9c e0       	ldi	r25, 0x0C	; 12
    164e:	90 93 19 0c 	sts	0x0C19, r25
    1652:	80 93 18 0c 	sts	0x0C18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1656:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1658:	f8 94       	cli
	{
		uart1_fifo_rx_ptr = &console_vars.input;
    165a:	86 e0       	ldi	r24, 0x06	; 6
    165c:	9c e0       	ldi	r25, 0x0C	; 12
    165e:	90 93 27 0c 	sts	0x0C27, r25
    1662:	80 93 26 0c 	sts	0x0C26, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1666:	2f bf       	out	0x3f, r18	; 63
	};

	//power on message
	DEBUG_P(PSTR("\r\nDevice name "));
    1668:	80 91 10 02 	lds	r24, 0x0210
    166c:	90 91 11 02 	lds	r25, 0x0211
    1670:	6a e0       	ldi	r22, 0x0A	; 10
    1672:	71 e0       	ldi	r23, 0x01	; 1
    1674:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_P(PSTR(VERSION_STRING));
    1678:	80 91 10 02 	lds	r24, 0x0210
    167c:	90 91 11 02 	lds	r25, 0x0211
    1680:	65 e0       	ldi	r22, 0x05	; 5
    1682:	71 e0       	ldi	r23, 0x01	; 1
    1684:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_P(PSTR("\r\nHardware revision: "));
    1688:	80 91 10 02 	lds	r24, 0x0210
    168c:	90 91 11 02 	lds	r25, 0x0211
    1690:	6f ee       	ldi	r22, 0xEF	; 239
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG(hardware_name(debug_text));
    1698:	00 91 10 02 	lds	r16, 0x0210
    169c:	10 91 11 02 	lds	r17, 0x0211
char* hardware_name(char* textbuf)
{
	switch(hardware_id())
	{
		case 0:
			strcpy_P(textbuf, PSTR("V1.0"));
    16a0:	88 ee       	ldi	r24, 0xE8	; 232
    16a2:	99 e0       	ldi	r25, 0x09	; 9
    16a4:	6c ec       	ldi	r22, 0xCC	; 204
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcpy_P>

	//power on message
	DEBUG_P(PSTR("\r\nDevice name "));
	DEBUG_P(PSTR(VERSION_STRING));
	DEBUG_P(PSTR("\r\nHardware revision: "));
	DEBUG(hardware_name(debug_text));
    16ac:	c8 01       	movw	r24, r16
    16ae:	68 ee       	ldi	r22, 0xE8	; 232
    16b0:	79 e0       	ldi	r23, 0x09	; 9
    16b2:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\r\n(hit space for main menu)\r\n"));
    16b6:	80 91 10 02 	lds	r24, 0x0210
    16ba:	90 91 11 02 	lds	r25, 0x0211
    16be:	61 ed       	ldi	r22, 0xD1	; 209
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	while(1)
	{
		main_fly();
		
		//execute console if space hit.
		if(console_vars.input.empty==FALSE)
    16c6:	80 91 0a 0c 	lds	r24, 0x0C0A
    16ca:	88 23       	and	r24, r24
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <main+0xd2>
		{
			if(fifo_read_char(&console_vars.input)==' ')
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	9c e0       	ldi	r25, 0x0C	; 12
    16d2:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
    16d6:	80 32       	cpi	r24, 0x20	; 32
    16d8:	b1 f7       	brne	.-20     	; 0x16c6 <main+0xd2>
				console_main();
    16da:	0e 94 87 0c 	call	0x190e	; 0x190e <console_main>
    16de:	f3 cf       	rjmp	.-26     	; 0x16c6 <main+0xd2>

000016e0 <console_timer>:
	static char text[100];
	char	copy_buffer[512];

void console_timer(void)
{
	if(time)
    16e0:	80 91 12 02 	lds	r24, 0x0212
    16e4:	90 91 13 02 	lds	r25, 0x0213
    16e8:	89 2b       	or	r24, r25
    16ea:	49 f0       	breq	.+18     	; 0x16fe <console_timer+0x1e>
		time--;
    16ec:	80 91 12 02 	lds	r24, 0x0212
    16f0:	90 91 13 02 	lds	r25, 0x0213
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	90 93 13 02 	sts	0x0213, r25
    16fa:	80 93 12 02 	sts	0x0212, r24
    16fe:	08 95       	ret

00001700 <getline>:
// a line input length of 0 is a valid entry (returns OK)
// maxlen includes terminator, must be non0
// attempting to enter text longer than maxlen-1 will simply return a truncated string once CR is received
// if echo is enabled chars will not be echo'd beyond maxlen-1
static enum input_result_enum getline(char* buffer, int maxlen)
{
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	7c 01       	movw	r14, r24
    1714:	6b 01       	movw	r12, r22
	enum input_result_enum success;
	int index=0;	//indexes terminator in buffer
	char tempchar;
	char finished=FALSE;

	buffer[index]=0;
    1716:	fc 01       	movw	r30, r24
    1718:	10 82       	st	Z, r1
    171a:	c0 e0       	ldi	r28, 0x00	; 0
    171c:	d0 e0       	ldi	r29, 0x00	; 0
	do
	{		
		//wait for input or timeout
		time=(INPUT_PROMPT_TIME/TIMER_TICK);
    171e:	8e e4       	ldi	r24, 0x4E	; 78
    1720:	a8 2e       	mov	r10, r24
    1722:	8e e0       	ldi	r24, 0x0E	; 14
    1724:	b8 2e       	mov	r11, r24
			}
			
			//text
			else if(0x1F < tempchar && tempchar < 0x7F)
			{
				if(index<maxlen-1)
    1726:	08 94       	sec
    1728:	c1 08       	sbc	r12, r1
    172a:	d1 08       	sbc	r13, r1

	buffer[index]=0;
	do
	{		
		//wait for input or timeout
		time=(INPUT_PROMPT_TIME/TIMER_TICK);
    172c:	b0 92 13 02 	sts	0x0213, r11
    1730:	a0 92 12 02 	sts	0x0212, r10
    1734:	02 c0       	rjmp	.+4      	; 0x173a <getline+0x3a>
		
		while(time && console_vars.input.empty==TRUE)
			main_fly();
    1736:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <main_fly>
	do
	{		
		//wait for input or timeout
		time=(INPUT_PROMPT_TIME/TIMER_TICK);
		
		while(time && console_vars.input.empty==TRUE)
    173a:	80 91 12 02 	lds	r24, 0x0212
    173e:	90 91 13 02 	lds	r25, 0x0213
    1742:	89 2b       	or	r24, r25
    1744:	21 f0       	breq	.+8      	; 0x174e <getline+0x4e>
    1746:	80 91 0a 0c 	lds	r24, 0x0C0A
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	a1 f3       	breq	.-24     	; 0x1736 <getline+0x36>
			main_fly();
		
		if(console_vars.input.empty==TRUE)
    174e:	80 91 0a 0c 	lds	r24, 0x0C0A
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	21 f4       	brne	.+8      	; 0x175e <getline+0x5e>
		{
			buffer[0]=0;
    1756:	f7 01       	movw	r30, r14
    1758:	10 82       	st	Z, r1
    175a:	11 e0       	ldi	r17, 0x01	; 1
    175c:	51 c0       	rjmp	.+162    	; 0x1800 <getline+0x100>
			success=INPUT_RESULT_TIMEOUT;
			finished=TRUE;
		}
		else
		{
			tempchar=fifo_read_char(&console_vars.input);
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	9c e0       	ldi	r25, 0x0C	; 12
    1762:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
    1766:	18 2f       	mov	r17, r24
			
			//abort (esc)
			if(tempchar==0x1B)
    1768:	8b 31       	cpi	r24, 0x1B	; 27
    176a:	21 f4       	brne	.+8      	; 0x1774 <getline+0x74>
			{
				buffer[0]=0;
    176c:	f7 01       	movw	r30, r14
    176e:	10 82       	st	Z, r1
    1770:	12 e0       	ldi	r17, 0x02	; 2
    1772:	46 c0       	rjmp	.+140    	; 0x1800 <getline+0x100>
				success=INPUT_RESULT_ABORTED;
				finished=TRUE;
			}
			
			//backspace
			else if(tempchar==0x08 && index)
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	81 f4       	brne	.+32     	; 0x1798 <getline+0x98>
    1778:	20 97       	sbiw	r28, 0x00	; 0
    177a:	71 f0       	breq	.+28     	; 0x1798 <getline+0x98>
			{
				if(console_vars.echo)
    177c:	80 91 1a 0c 	lds	r24, 0x0C1A
    1780:	88 23       	and	r24, r24
    1782:	41 f0       	breq	.+16     	; 0x1794 <getline+0x94>
					TEXTOUT_P(PSTR("\x08 \x08"));
    1784:	80 91 18 0c 	lds	r24, 0x0C18
    1788:	90 91 19 0c 	lds	r25, 0x0C19
    178c:	69 ed       	ldi	r22, 0xD9	; 217
    178e:	74 e0       	ldi	r23, 0x04	; 4
    1790:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				buffer[--index]=0;
    1794:	21 97       	sbiw	r28, 0x01	; 1
    1796:	17 c0       	rjmp	.+46     	; 0x17c6 <getline+0xc6>
			}
			
			//text
			else if(0x1F < tempchar && tempchar < 0x7F)
    1798:	81 2f       	mov	r24, r17
    179a:	80 52       	subi	r24, 0x20	; 32
    179c:	8f 35       	cpi	r24, 0x5F	; 95
    179e:	c0 f4       	brcc	.+48     	; 0x17d0 <getline+0xd0>
			{
				if(index<maxlen-1)
    17a0:	cc 15       	cp	r28, r12
    17a2:	dd 05       	cpc	r29, r13
    17a4:	1c f6       	brge	.-122    	; 0x172c <getline+0x2c>
				{
					if(console_vars.echo)
    17a6:	80 91 1a 0c 	lds	r24, 0x0C1A
    17aa:	88 23       	and	r24, r24
    17ac:	39 f0       	breq	.+14     	; 0x17bc <getline+0xbc>
						TEXTOUT_CHAR(tempchar);
    17ae:	80 91 18 0c 	lds	r24, 0x0C18
    17b2:	90 91 19 0c 	lds	r25, 0x0C19
    17b6:	61 2f       	mov	r22, r17
    17b8:	0e 94 1c 3b 	call	0x7638	; 0x7638 <fifo_write_char>
					buffer[index++]=tempchar;
    17bc:	f7 01       	movw	r30, r14
    17be:	ec 0f       	add	r30, r28
    17c0:	fd 1f       	adc	r31, r29
    17c2:	10 83       	st	Z, r17
    17c4:	21 96       	adiw	r28, 0x01	; 1
					buffer[index]=0;
    17c6:	f7 01       	movw	r30, r14
    17c8:	ec 0f       	add	r30, r28
    17ca:	fd 1f       	adc	r31, r29
    17cc:	10 82       	st	Z, r1
    17ce:	ae cf       	rjmp	.-164    	; 0x172c <getline+0x2c>
				};
			}
			
			//CR
			else if(tempchar=='\r')
    17d0:	1d 30       	cpi	r17, 0x0D	; 13
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <getline+0xd6>
    17d4:	ab cf       	rjmp	.-170    	; 0x172c <getline+0x2c>
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <getline+0xfe>
		};
	} while(!finished);

	if(console_vars.echo)
	{
		TEXTOUT_P(PSTR("\r\n"));
    17d8:	80 91 18 0c 	lds	r24, 0x0C18
    17dc:	90 91 19 0c 	lds	r25, 0x0C19
    17e0:	66 ed       	ldi	r22, 0xD6	; 214
    17e2:	74 e0       	ldi	r23, 0x04	; 4
    17e4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	};
	return success;
}
    17e8:	81 2f       	mov	r24, r17
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	08 95       	ret
		};
	} while(!finished);

	if(console_vars.echo)
	{
		TEXTOUT_P(PSTR("\r\n"));
    17fe:	10 e0       	ldi	r17, 0x00	; 0
				success=INPUT_RESULT_OK;
			};
		};
	} while(!finished);

	if(console_vars.echo)
    1800:	80 91 1a 0c 	lds	r24, 0x0C1A
    1804:	88 23       	and	r24, r24
    1806:	81 f3       	breq	.-32     	; 0x17e8 <getline+0xe8>
    1808:	e7 cf       	rjmp	.-50     	; 0x17d8 <getline+0xd8>

0000180a <getlong>:

// get an integer from the user and write it to *target, returns OK/ABORTED/TIMEOUT
// aborts if ESC is pressed.
// note that any input that atol cannot recognise as a number, will result in 0.
static enum input_result_enum getlong(long* target, long low, long high)
{
    180a:	8f 92       	push	r8
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	4a 01       	movw	r8, r20
    1826:	5b 01       	movw	r10, r22
    1828:	68 01       	movw	r12, r16
    182a:	79 01       	movw	r14, r18
	char finished=FALSE;
	long value;

	do
	{
		TEXTOUT_P(PSTR(">"));
    182c:	80 91 18 0c 	lds	r24, 0x0C18
    1830:	90 91 19 0c 	lds	r25, 0x0C19
    1834:	64 ed       	ldi	r22, 0xD4	; 212
    1836:	74 e0       	ldi	r23, 0x04	; 4
    1838:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		success=getline(text, 9);
    183c:	84 e1       	ldi	r24, 0x14	; 20
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	69 e0       	ldi	r22, 0x09	; 9
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1848:	18 2f       	mov	r17, r24
		if(success==INPUT_RESULT_OK)
    184a:	88 23       	and	r24, r24
    184c:	09 f0       	breq	.+2      	; 0x1850 <getlong+0x46>
    184e:	51 c0       	rjmp	.+162    	; 0x18f2 <getlong+0xe8>
		{
			if(strlen(text))
    1850:	80 91 14 02 	lds	r24, 0x0214
    1854:	88 23       	and	r24, r24
    1856:	11 f4       	brne	.+4      	; 0x185c <getlong+0x52>
    1858:	13 e0       	ldi	r17, 0x03	; 3
    185a:	4b c0       	rjmp	.+150    	; 0x18f2 <getlong+0xe8>
			{
				value=atol(text);
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	0e 94 97 40 	call	0x812e	; 0x812e <atol>
				//out of range
				if( value < low || high < value )
    1864:	68 15       	cp	r22, r8
    1866:	79 05       	cpc	r23, r9
    1868:	8a 05       	cpc	r24, r10
    186a:	9b 05       	cpc	r25, r11
    186c:	2c f0       	brlt	.+10     	; 0x1878 <getlong+0x6e>
    186e:	c6 16       	cp	r12, r22
    1870:	d7 06       	cpc	r13, r23
    1872:	e8 06       	cpc	r14, r24
    1874:	f9 06       	cpc	r15, r25
    1876:	cc f5       	brge	.+114    	; 0x18ea <getlong+0xe0>
				{
					TEXTOUT_P(PSTR("Out of range! Enter number between "));
    1878:	80 91 18 0c 	lds	r24, 0x0C18
    187c:	90 91 19 0c 	lds	r25, 0x0C19
    1880:	60 eb       	ldi	r22, 0xB0	; 176
    1882:	74 e0       	ldi	r23, 0x04	; 4
    1884:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					TEXTOUT(ltoa(low, text, 10));
    1888:	00 91 18 0c 	lds	r16, 0x0C18
    188c:	10 91 19 0c 	lds	r17, 0x0C19
    1890:	c5 01       	movw	r24, r10
    1892:	b4 01       	movw	r22, r8
    1894:	44 e1       	ldi	r20, 0x14	; 20
    1896:	52 e0       	ldi	r21, 0x02	; 2
    1898:	2a e0       	ldi	r18, 0x0A	; 10
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    18a0:	bc 01       	movw	r22, r24
    18a2:	c8 01       	movw	r24, r16
    18a4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					TEXTOUT_P(PSTR(" and "));
    18a8:	80 91 18 0c 	lds	r24, 0x0C18
    18ac:	90 91 19 0c 	lds	r25, 0x0C19
    18b0:	6a ea       	ldi	r22, 0xAA	; 170
    18b2:	74 e0       	ldi	r23, 0x04	; 4
    18b4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					TEXTOUT(ltoa(high, text, 10));
    18b8:	00 91 18 0c 	lds	r16, 0x0C18
    18bc:	10 91 19 0c 	lds	r17, 0x0C19
    18c0:	c7 01       	movw	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	44 e1       	ldi	r20, 0x14	; 20
    18c6:	52 e0       	ldi	r21, 0x02	; 2
    18c8:	2a e0       	ldi	r18, 0x0A	; 10
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    18d0:	bc 01       	movw	r22, r24
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					TEXTOUT_P(PSTR("\r\n"));
    18d8:	80 91 18 0c 	lds	r24, 0x0C18
    18dc:	90 91 19 0c 	lds	r25, 0x0C19
    18e0:	67 ea       	ldi	r22, 0xA7	; 167
    18e2:	74 e0       	ldi	r23, 0x04	; 4
    18e4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    18e8:	a1 cf       	rjmp	.-190    	; 0x182c <getlong+0x22>
				}	
				//ok
				else
				{
					finished=TRUE;
					*target=value;
    18ea:	68 83       	st	Y, r22
    18ec:	79 83       	std	Y+1, r23	; 0x01
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	9b 83       	std	Y+3, r25	; 0x03
		else
			finished=TRUE;
	}while(!finished);

	return success;
}
    18f2:	81 2f       	mov	r24, r17
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	ff 90       	pop	r15
    18fe:	ef 90       	pop	r14
    1900:	df 90       	pop	r13
    1902:	cf 90       	pop	r12
    1904:	bf 90       	pop	r11
    1906:	af 90       	pop	r10
    1908:	9f 90       	pop	r9
    190a:	8f 90       	pop	r8
    190c:	08 95       	ret

0000190e <console_main>:
}



void console_main(void)
{
    190e:	2f 92       	push	r2
    1910:	3f 92       	push	r3
    1912:	5f 92       	push	r5
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	e9 97       	sbiw	r28, 0x39	; 57
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
	enum input_result_enum success;
	int option;
	char tempchar;
	long templong=0, templong2=0, templong3=0;
    1940:	1a 82       	std	Y+2, r1	; 0x02
    1942:	1b 82       	std	Y+3, r1	; 0x03
    1944:	1c 82       	std	Y+4, r1	; 0x04
    1946:	1d 82       	std	Y+5, r1	; 0x05
    1948:	1e 82       	std	Y+6, r1	; 0x06
    194a:	1f 82       	std	Y+7, r1	; 0x07
    194c:	18 86       	std	Y+8, r1	; 0x08
    194e:	19 86       	std	Y+9, r1	; 0x09

	struct fat_file_struct	fat_file_info, fat_file_info2;
	unsigned long fat_directory=0;
    1950:	1a 86       	std	Y+10, r1	; 0x0a
    1952:	1b 86       	std	Y+11, r1	; 0x0b
    1954:	1c 86       	std	Y+12, r1	; 0x0c
    1956:	1d 86       	std	Y+13, r1	; 0x0d

	sd_debug_fifo_ptr=console_vars.output_ptr;
    1958:	80 91 18 0c 	lds	r24, 0x0C18
    195c:	90 91 19 0c 	lds	r25, 0x0C19
    1960:	90 93 7b 02 	sts	0x027B, r25
    1964:	80 93 7a 02 	sts	0x027A, r24
	fat_debug_fifo_ptr=console_vars.output_ptr;
    1968:	90 93 91 02 	sts	0x0291, r25
    196c:	80 93 90 02 	sts	0x0290, r24
	fat_dir_fifo_ptr=console_vars.output_ptr;
    1970:	90 93 93 02 	sts	0x0293, r25
    1974:	80 93 92 02 	sts	0x0292, r24
    1978:	88 24       	eor	r8, r8
    197a:	99 24       	eor	r9, r9
    197c:	54 01       	movw	r10, r8
			case 15:
				
				TEXTOUT_P(PSTR("Enter file name >"));
				if(getline(text, 100)==INPUT_RESULT_OK)
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    197e:	8e e0       	ldi	r24, 0x0E	; 14
    1980:	68 2e       	mov	r6, r24
    1982:	71 2c       	mov	r7, r1
    1984:	6c 0e       	add	r6, r28
    1986:	7d 1e       	adc	r7, r29
				
			case 11:
				do
				{
					TEXTOUT_P(PSTR("Enter start cluster (esc to finish)"));
					success=getlong(&templong, 2, 0x7FFFFFFFul);
    1988:	02 e0       	ldi	r16, 0x02	; 2
    198a:	20 2e       	mov	r2, r16
    198c:	31 2c       	mov	r3, r1
    198e:	2c 0e       	add	r2, r28
    1990:	3d 1e       	adc	r3, r29
	fat_debug_fifo_ptr=console_vars.output_ptr;
	fat_dir_fifo_ptr=console_vars.output_ptr;

	do
	{
		if(fat_directory)
    1992:	6a 85       	ldd	r22, Y+10	; 0x0a
    1994:	7b 85       	ldd	r23, Y+11	; 0x0b
    1996:	8c 85       	ldd	r24, Y+12	; 0x0c
    1998:	9d 85       	ldd	r25, Y+13	; 0x0d
    199a:	61 15       	cp	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	81 05       	cpc	r24, r1
    19a0:	91 05       	cpc	r25, r1
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <console_main+0x9a>
			fat_directory_list(fat_directory);
    19a4:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <fat_directory_list>
		
		TEXTOUT_P(PSTR("\
    19a8:	80 91 18 0c 	lds	r24, 0x0C18
    19ac:	90 91 19 0c 	lds	r25, 0x0C19
    19b0:	6f ea       	ldi	r22, 0xAF	; 175
    19b2:	72 e0       	ldi	r23, 0x02	; 2
    19b4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	char finished=FALSE;
	int value;

	do
	{
		TEXTOUT_P(PSTR(">"));
    19b8:	80 91 18 0c 	lds	r24, 0x0C18
    19bc:	90 91 19 0c 	lds	r25, 0x0C19
    19c0:	6c e6       	ldi	r22, 0x6C	; 108
    19c2:	74 e0       	ldi	r23, 0x04	; 4
    19c4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		success=getline(text, 9);
    19c8:	84 e1       	ldi	r24, 0x14	; 20
    19ca:	92 e0       	ldi	r25, 0x02	; 2
    19cc:	69 e0       	ldi	r22, 0x09	; 9
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
		if(success==INPUT_RESULT_OK)
    19d4:	88 23       	and	r24, r24
    19d6:	09 f0       	breq	.+2      	; 0x19da <console_main+0xcc>
    19d8:	72 c4       	rjmp	.+2276   	; 0x22be <__stack+0xbf>
		{
			if(strlen(text))
    19da:	80 91 14 02 	lds	r24, 0x0214
    19de:	88 23       	and	r24, r24
    19e0:	c1 f2       	breq	.-80     	; 0x1992 <console_main+0x84>
			{
				value=atoi(text);
    19e2:	84 e1       	ldi	r24, 0x14	; 20
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	0e 94 79 40 	call	0x80f2	; 0x80f2 <atoi>
				//out of range
				if( value < low || high < value )
    19ea:	2f ef       	ldi	r18, 0xFF	; 255
    19ec:	8f 3f       	cpi	r24, 0xFF	; 255
    19ee:	92 07       	cpc	r25, r18
    19f0:	24 f0       	brlt	.+8      	; 0x19fa <console_main+0xec>
    19f2:	83 33       	cpi	r24, 0x33	; 51
    19f4:	91 05       	cpc	r25, r1
    19f6:	0c f4       	brge	.+2      	; 0x19fa <console_main+0xec>
    19f8:	24 c4       	rjmp	.+2120   	; 0x2242 <__stack+0x43>
				{
					TEXTOUT_P(PSTR("Out of range! Enter number between "));
    19fa:	80 91 18 0c 	lds	r24, 0x0C18
    19fe:	90 91 19 0c 	lds	r25, 0x0C19
    1a02:	68 e4       	ldi	r22, 0x48	; 72
    1a04:	74 e0       	ldi	r23, 0x04	; 4
    1a06:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					TEXTOUT(itoa(low, text, 10));
    1a0a:	00 91 18 0c 	lds	r16, 0x0C18
    1a0e:	10 91 19 0c 	lds	r17, 0x0C19
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	64 e1       	ldi	r22, 0x14	; 20
    1a18:	72 e0       	ldi	r23, 0x02	; 2
    1a1a:	4a e0       	ldi	r20, 0x0A	; 10
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	0e 94 0a 41 	call	0x8214	; 0x8214 <itoa>
    1a22:	bc 01       	movw	r22, r24
    1a24:	c8 01       	movw	r24, r16
    1a26:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					TEXTOUT_P(PSTR(" and "));
    1a2a:	80 91 18 0c 	lds	r24, 0x0C18
    1a2e:	90 91 19 0c 	lds	r25, 0x0C19
    1a32:	62 e4       	ldi	r22, 0x42	; 66
    1a34:	74 e0       	ldi	r23, 0x04	; 4
    1a36:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					TEXTOUT(itoa(high, text, 10));
    1a3a:	00 91 18 0c 	lds	r16, 0x0C18
    1a3e:	10 91 19 0c 	lds	r17, 0x0C19
    1a42:	82 e3       	ldi	r24, 0x32	; 50
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	64 e1       	ldi	r22, 0x14	; 20
    1a48:	72 e0       	ldi	r23, 0x02	; 2
    1a4a:	4a e0       	ldi	r20, 0x0A	; 10
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	0e 94 0a 41 	call	0x8214	; 0x8214 <itoa>
    1a52:	bc 01       	movw	r22, r24
    1a54:	c8 01       	movw	r24, r16
    1a56:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					TEXTOUT_P(PSTR("\r\n"));
    1a5a:	80 91 18 0c 	lds	r24, 0x0C18
    1a5e:	90 91 19 0c 	lds	r25, 0x0C19
    1a62:	6f e3       	ldi	r22, 0x3F	; 63
    1a64:	74 e0       	ldi	r23, 0x04	; 4
    1a66:	a6 cf       	rjmp	.-180    	; 0x19b4 <console_main+0xa6>

static void bootload(void)
{
	void (*bootloader)(void)=  (void(*)(void))BOOTLOADER_ADDRESS;

	if( console_vars.input_device == CONSOLE_DEVICE_OTHER )
    1a68:	90 91 1b 0c 	lds	r25, 0x0C1B
    1a6c:	92 30       	cpi	r25, 0x02	; 2
    1a6e:	79 f4       	brne	.+30     	; 0x1a8e <console_main+0x180>
	{
		TEXTOUT_P(PSTR("Cannot use bootloader from this I/O device (hit space)\r\n"));
    1a70:	80 91 18 0c 	lds	r24, 0x0C18
    1a74:	90 91 19 0c 	lds	r25, 0x0C19
    1a78:	6e e6       	ldi	r22, 0x6E	; 110
    1a7a:	74 e0       	ldi	r23, 0x04	; 4
    1a7c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		while(fifo_read_char(&console_vars.input)!=' ');
    1a80:	86 e0       	ldi	r24, 0x06	; 6
    1a82:	9c e0       	ldi	r25, 0x0C	; 12
    1a84:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
    1a88:	80 32       	cpi	r24, 0x20	; 32
    1a8a:	d1 f7       	brne	.-12     	; 0x1a80 <console_main+0x172>
    1a8c:	82 cf       	rjmp	.-252    	; 0x1992 <console_main+0x84>
	}
	else
	{
		//disable all interrupts (as we will switch vector table)
		cli();
    1a8e:	f8 94       	cli
		EIMSK =0;											//external int's
    1a90:	1d ba       	out	0x1d, r1	; 29
	
		TIMSK0=0;											//timer int's
    1a92:	10 92 6e 00 	sts	0x006E, r1
		TIMSK1=0;											//timer int's
    1a96:	10 92 6f 00 	sts	0x006F, r1
		TIMSK2=0;											//timer int's
    1a9a:	10 92 70 00 	sts	0x0070, r1
		TIMSK3=0;											//timer int's
    1a9e:	10 92 71 00 	sts	0x0071, r1
		TIMSK4=0;											//timer int's
    1aa2:	10 92 72 00 	sts	0x0072, r1
		TIMSK5=0;											//timer int's	
    1aa6:	10 92 73 00 	sts	0x0073, r1
		
		SPCR &=~_BV(SPIE);									//spi int
    1aaa:	8c b5       	in	r24, 0x2c	; 44
    1aac:	8f 77       	andi	r24, 0x7F	; 127
    1aae:	8c bd       	out	0x2c, r24	; 44
		
		UCSR0B &=~(_BV(RXCIE0)+_BV(TXCIE0)+_BV(UDRIE0));	//uart0 ints
    1ab0:	80 91 c1 00 	lds	r24, 0x00C1
    1ab4:	8f 71       	andi	r24, 0x1F	; 31
    1ab6:	80 93 c1 00 	sts	0x00C1, r24
		UCSR1B &=~(_BV(RXCIE1)+_BV(TXCIE1)+_BV(UDRIE1));	//uart1 ints
    1aba:	80 91 c9 00 	lds	r24, 0x00C9
    1abe:	8f 71       	andi	r24, 0x1F	; 31
    1ac0:	80 93 c9 00 	sts	0x00C9, r24

		TWCR &=~_BV(TWIE);									//two wire int
    1ac4:	80 91 bc 00 	lds	r24, 0x00BC
    1ac8:	8e 7f       	andi	r24, 0xFE	; 254
    1aca:	80 93 bc 00 	sts	0x00BC, r24
		ACSR &=~_BV(ACIE);									//analog comparator
    1ace:	80 b7       	in	r24, 0x30	; 48
    1ad0:	87 7f       	andi	r24, 0xF7	; 247
    1ad2:	80 bf       	out	0x30, r24	; 48
		ADCSRA &=~_BV(ADIE);								//a2d
    1ad4:	80 91 7a 00 	lds	r24, 0x007A
    1ad8:	87 7f       	andi	r24, 0xF7	; 247
    1ada:	80 93 7a 00 	sts	0x007A, r24
		
		//Bootloader will detect which uart is left enabled.
		if( console_vars.input_device == CONSOLE_DEVICE_UART0 )
    1ade:	99 23       	and	r25, r25
    1ae0:	31 f4       	brne	.+12     	; 0x1aee <console_main+0x1e0>
			UCSR1B &= ~_BV(RXEN1);	//disable uart1
    1ae2:	80 91 c9 00 	lds	r24, 0x00C9
    1ae6:	8f 7e       	andi	r24, 0xEF	; 239
    1ae8:	80 93 c9 00 	sts	0x00C9, r24
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <console_main+0x1ee>
		if( console_vars.input_device == CONSOLE_DEVICE_UART1 )
    1aee:	91 30       	cpi	r25, 0x01	; 1
    1af0:	29 f4       	brne	.+10     	; 0x1afc <console_main+0x1ee>
			UCSR0B &= ~_BV(RXEN0);	//disable uart0	
    1af2:	80 91 c1 00 	lds	r24, 0x00C1
    1af6:	8f 7e       	andi	r24, 0xEF	; 239
    1af8:	80 93 c1 00 	sts	0x00C1, r24
		(*bootloader)();
    1afc:	e0 e0       	ldi	r30, 0x00	; 0
    1afe:	f0 ee       	ldi	r31, 0xE0	; 224
    1b00:	09 95       	icall
    1b02:	47 cf       	rjmp	.-370    	; 0x1992 <console_main+0x84>
		{
			case 1:
				bootload();
				break;
			case 2:
				if(sd_initcard())
    1b04:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <sd_initcard>
    1b08:	88 23       	and	r24, r24
    1b0a:	39 f0       	breq	.+14     	; 0x1b1a <console_main+0x20c>
					TEXTOUT_P(PSTR("OK.\r\n"));
    1b0c:	80 91 18 0c 	lds	r24, 0x0C18
    1b10:	90 91 19 0c 	lds	r25, 0x0C19
    1b14:	69 ea       	ldi	r22, 0xA9	; 169
    1b16:	72 e0       	ldi	r23, 0x02	; 2
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <console_main+0x218>
				else
					TEXTOUT_P(PSTR("Failed.\r\n"));
    1b1a:	80 91 18 0c 	lds	r24, 0x0C18
    1b1e:	90 91 19 0c 	lds	r25, 0x0C19
    1b22:	6f e9       	ldi	r22, 0x9F	; 159
    1b24:	72 e0       	ldi	r23, 0x02	; 2
    1b26:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    1b2a:	33 cf       	rjmp	.-410    	; 0x1992 <console_main+0x84>
				break;
			case 3:
				if(fat_init())
    1b2c:	0e 94 a5 19 	call	0x334a	; 0x334a <fat_init>
    1b30:	88 23       	and	r24, r24
    1b32:	89 f0       	breq	.+34     	; 0x1b56 <console_main+0x248>
				{
					TEXTOUT_P(PSTR("OK.\r\n"));
    1b34:	80 91 18 0c 	lds	r24, 0x0C18
    1b38:	90 91 19 0c 	lds	r25, 0x0C19
    1b3c:	69 e9       	ldi	r22, 0x99	; 153
    1b3e:	72 e0       	ldi	r23, 0x02	; 2
    1b40:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					fat_directory=2ul;
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	8a 87       	std	Y+10, r24	; 0x0a
    1b4e:	9b 87       	std	Y+11, r25	; 0x0b
    1b50:	ac 87       	std	Y+12, r26	; 0x0c
    1b52:	bd 87       	std	Y+13, r27	; 0x0d
    1b54:	1e cf       	rjmp	.-452    	; 0x1992 <console_main+0x84>
				}
				else
					TEXTOUT_P(PSTR("Failed.\r\n"));
    1b56:	80 91 18 0c 	lds	r24, 0x0C18
    1b5a:	90 91 19 0c 	lds	r25, 0x0C19
    1b5e:	6f e8       	ldi	r22, 0x8F	; 143
    1b60:	72 e0       	ldi	r23, 0x02	; 2
    1b62:	e1 cf       	rjmp	.-62     	; 0x1b26 <console_main+0x218>
				break;			
			case 4:
				fat_directory_list(fat_directory);
    1b64:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b66:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b6c:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <fat_directory_list>
    1b70:	10 cf       	rjmp	.-480    	; 0x1992 <console_main+0x84>
				break;
			case 5:
				TEXTOUT_P(PSTR("Enter name >"));
    1b72:	80 91 18 0c 	lds	r24, 0x0C18
    1b76:	90 91 19 0c 	lds	r25, 0x0C19
    1b7a:	62 e8       	ldi	r22, 0x82	; 130
    1b7c:	72 e0       	ldi	r23, 0x02	; 2
    1b7e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    1b82:	84 e1       	ldi	r24, 0x14	; 20
    1b84:	92 e0       	ldi	r25, 0x02	; 2
    1b86:	64 e6       	ldi	r22, 0x64	; 100
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <console_main+0x286>
    1b92:	ff ce       	rjmp	.-514    	; 0x1992 <console_main+0x84>
					fat_directory_change(&fat_directory, text);
    1b94:	ce 01       	movw	r24, r28
    1b96:	0a 96       	adiw	r24, 0x0a	; 10
    1b98:	64 e1       	ldi	r22, 0x14	; 20
    1b9a:	72 e0       	ldi	r23, 0x02	; 2
    1b9c:	0e 94 56 36 	call	0x6cac	; 0x6cac <fat_directory_change>
    1ba0:	f8 ce       	rjmp	.-528    	; 0x1992 <console_main+0x84>
				break;
			case 6:
				TEXTOUT_P(PSTR("Enter file size >"));
    1ba2:	80 91 18 0c 	lds	r24, 0x0C18
    1ba6:	90 91 19 0c 	lds	r25, 0x0C19
    1baa:	60 e7       	ldi	r22, 0x70	; 112
    1bac:	72 e0       	ldi	r23, 0x02	; 2
    1bae:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getlong(&templong, 0, 0x7FFFFFFFul) == INPUT_RESULT_OK)
    1bb2:	c1 01       	movw	r24, r2
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	0f ef       	ldi	r16, 0xFF	; 255
    1bbe:	1f ef       	ldi	r17, 0xFF	; 255
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	3f e7       	ldi	r19, 0x7F	; 127
    1bc4:	0e 94 05 0c 	call	0x180a	; 0x180a <getlong>
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f0       	breq	.+2      	; 0x1bce <console_main+0x2c0>
    1bcc:	e2 ce       	rjmp	.-572    	; 0x1992 <console_main+0x84>
				{
					TEXTOUT_P(PSTR("Enter file name >"));
    1bce:	80 91 18 0c 	lds	r24, 0x0C18
    1bd2:	90 91 19 0c 	lds	r25, 0x0C19
    1bd6:	6e e5       	ldi	r22, 0x5E	; 94
    1bd8:	72 e0       	ldi	r23, 0x02	; 2
    1bda:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					if(getline(text, 100)==INPUT_RESULT_OK)
    1bde:	84 e1       	ldi	r24, 0x14	; 20
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	64 e6       	ldi	r22, 0x64	; 100
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1bea:	88 23       	and	r24, r24
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <console_main+0x2e2>
    1bee:	d1 ce       	rjmp	.-606    	; 0x1992 <console_main+0x84>
					{
						fat_file_info.cluster_directory=fat_directory;
    1bf0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bf2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1bf4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bf6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bf8:	4a 8f       	std	Y+26, r20	; 0x1a
    1bfa:	5b 8f       	std	Y+27, r21	; 0x1b
    1bfc:	6c 8f       	std	Y+28, r22	; 0x1c
    1bfe:	7d 8f       	std	Y+29, r23	; 0x1d
						fat_file_create(&fat_file_info, fat_directory, text, templong);
    1c00:	ea 80       	ldd	r14, Y+2	; 0x02
    1c02:	fb 80       	ldd	r15, Y+3	; 0x03
    1c04:	0c 81       	ldd	r16, Y+4	; 0x04
    1c06:	1d 81       	ldd	r17, Y+5	; 0x05
    1c08:	c3 01       	movw	r24, r6
    1c0a:	24 e1       	ldi	r18, 0x14	; 20
    1c0c:	32 e0       	ldi	r19, 0x02	; 2
    1c0e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <fat_file_create>
    1c12:	bf ce       	rjmp	.-642    	; 0x1992 <console_main+0x84>
					};
				};
				break;
				
			case 7:
				TEXTOUT_P(PSTR("Enter sub directory name >"));
    1c14:	80 91 18 0c 	lds	r24, 0x0C18
    1c18:	90 91 19 0c 	lds	r25, 0x0C19
    1c1c:	63 e4       	ldi	r22, 0x43	; 67
    1c1e:	72 e0       	ldi	r23, 0x02	; 2
    1c20:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100) == INPUT_RESULT_OK)
    1c24:	84 e1       	ldi	r24, 0x14	; 20
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	64 e6       	ldi	r22, 0x64	; 100
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1c30:	88 23       	and	r24, r24
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <console_main+0x328>
    1c34:	ae ce       	rjmp	.-676    	; 0x1992 <console_main+0x84>
					fat_directory_create(fat_directory, text);
    1c36:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c38:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c3e:	44 e1       	ldi	r20, 0x14	; 20
    1c40:	52 e0       	ldi	r21, 0x02	; 2
    1c42:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <fat_directory_create>
    1c46:	a5 ce       	rjmp	.-694    	; 0x1992 <console_main+0x84>
				break;
				
			case 8:
				TEXTOUT_P(PSTR("Enter sub directory name >"));
    1c48:	80 91 18 0c 	lds	r24, 0x0C18
    1c4c:	90 91 19 0c 	lds	r25, 0x0C19
    1c50:	68 e2       	ldi	r22, 0x28	; 40
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100) == INPUT_RESULT_OK)
    1c58:	84 e1       	ldi	r24, 0x14	; 20
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	64 e6       	ldi	r22, 0x64	; 100
    1c5e:	70 e0       	ldi	r23, 0x00	; 0
    1c60:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1c64:	88 23       	and	r24, r24
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <console_main+0x35c>
    1c68:	94 ce       	rjmp	.-728    	; 0x1992 <console_main+0x84>
					fat_directory_delete(fat_directory, text);
    1c6a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c6c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c70:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c72:	44 e1       	ldi	r20, 0x14	; 20
    1c74:	52 e0       	ldi	r21, 0x02	; 2
    1c76:	0e 94 1a 35 	call	0x6a34	; 0x6a34 <fat_directory_delete>
    1c7a:	8b ce       	rjmp	.-746    	; 0x1992 <console_main+0x84>
				break;
				
			case 9:			
				TEXTOUT_P(PSTR("Enter file name >"));
    1c7c:	80 91 18 0c 	lds	r24, 0x0C18
    1c80:	90 91 19 0c 	lds	r25, 0x0C19
    1c84:	66 e1       	ldi	r22, 0x16	; 22
    1c86:	72 e0       	ldi	r23, 0x02	; 2
    1c88:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    1c8c:	84 e1       	ldi	r24, 0x14	; 20
    1c8e:	92 e0       	ldi	r25, 0x02	; 2
    1c90:	64 e6       	ldi	r22, 0x64	; 100
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <console_main+0x390>
    1c9c:	7a ce       	rjmp	.-780    	; 0x1992 <console_main+0x84>
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    1c9e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ca0:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ca2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ca4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ca6:	c3 01       	movw	r24, r6
    1ca8:	24 e1       	ldi	r18, 0x14	; 20
    1caa:	32 e0       	ldi	r19, 0x02	; 2
    1cac:	0e 94 1c 34 	call	0x6838	; 0x6838 <fat_file_locate>
    1cb0:	88 23       	and	r24, r24
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <console_main+0x3a8>
    1cb4:	6e ce       	rjmp	.-804    	; 0x1992 <console_main+0x84>
						fat_file_delete(&fat_file_info);
    1cb6:	c3 01       	movw	r24, r6
    1cb8:	0e 94 34 24 	call	0x4868	; 0x4868 <fat_file_delete>
    1cbc:	6a ce       	rjmp	.-812    	; 0x1992 <console_main+0x84>
				};
				break;
				
			case 10:
				TEXTOUT_P(PSTR("Enter file name >"));
    1cbe:	80 91 18 0c 	lds	r24, 0x0C18
    1cc2:	90 91 19 0c 	lds	r25, 0x0C19
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	72 e0       	ldi	r23, 0x02	; 2
    1cca:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    1cce:	84 e1       	ldi	r24, 0x14	; 20
    1cd0:	92 e0       	ldi	r25, 0x02	; 2
    1cd2:	64 e6       	ldi	r22, 0x64	; 100
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <console_main+0x3d2>
    1cde:	59 ce       	rjmp	.-846    	; 0x1992 <console_main+0x84>
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    1ce0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ce2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ce4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ce6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ce8:	c3 01       	movw	r24, r6
    1cea:	24 e1       	ldi	r18, 0x14	; 20
    1cec:	32 e0       	ldi	r19, 0x02	; 2
    1cee:	0e 94 1c 34 	call	0x6838	; 0x6838 <fat_file_locate>
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <console_main+0x3ea>
    1cf6:	4d ce       	rjmp	.-870    	; 0x1992 <console_main+0x84>
					{
						TEXTOUT_P(PSTR("Enter some text to append >"));
    1cf8:	80 91 18 0c 	lds	r24, 0x0C18
    1cfc:	90 91 19 0c 	lds	r25, 0x0C19
    1d00:	68 ee       	ldi	r22, 0xE8	; 232
    1d02:	71 e0       	ldi	r23, 0x01	; 1
    1d04:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						if(getline(text, 100)==INPUT_RESULT_OK)
    1d08:	84 e1       	ldi	r24, 0x14	; 20
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	64 e6       	ldi	r22, 0x64	; 100
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1d14:	88 23       	and	r24, r24
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <console_main+0x40c>
    1d18:	3c ce       	rjmp	.-904    	; 0x1992 <console_main+0x84>
						{
							fat_file_append(&fat_file_info, text, strlen(text)+1);
    1d1a:	e4 e1       	ldi	r30, 0x14	; 20
    1d1c:	f2 e0       	ldi	r31, 0x02	; 2
    1d1e:	01 90       	ld	r0, Z+
    1d20:	00 20       	and	r0, r0
    1d22:	e9 f7       	brne	.-6      	; 0x1d1e <console_main+0x410>
    1d24:	9f 01       	movw	r18, r30
    1d26:	24 51       	subi	r18, 0x14	; 20
    1d28:	32 40       	sbci	r19, 0x02	; 2
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	c3 01       	movw	r24, r6
    1d30:	64 e1       	ldi	r22, 0x14	; 20
    1d32:	72 e0       	ldi	r23, 0x02	; 2
    1d34:	0e 94 b1 29 	call	0x5362	; 0x5362 <fat_file_append>
    1d38:	2c ce       	rjmp	.-936    	; 0x1992 <console_main+0x84>
				break;
				
			case 11:
				do
				{
					TEXTOUT_P(PSTR("Enter start cluster (esc to finish)"));
    1d3a:	80 91 18 0c 	lds	r24, 0x0C18
    1d3e:	90 91 19 0c 	lds	r25, 0x0C19
    1d42:	64 ec       	ldi	r22, 0xC4	; 196
    1d44:	71 e0       	ldi	r23, 0x01	; 1
    1d46:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					success=getlong(&templong, 2, 0x7FFFFFFFul);
    1d4a:	c1 01       	movw	r24, r2
    1d4c:	42 e0       	ldi	r20, 0x02	; 2
    1d4e:	50 e0       	ldi	r21, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0f ef       	ldi	r16, 0xFF	; 255
    1d56:	1f ef       	ldi	r17, 0xFF	; 255
    1d58:	2f ef       	ldi	r18, 0xFF	; 255
    1d5a:	3f e7       	ldi	r19, 0x7F	; 127
    1d5c:	0e 94 05 0c 	call	0x180a	; 0x180a <getlong>
					if(success==INPUT_RESULT_OK)
    1d60:	88 23       	and	r24, r24
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <console_main+0x458>
    1d64:	16 ce       	rjmp	.-980    	; 0x1992 <console_main+0x84>
						fat_debug_fat(templong);
    1d66:	6a 81       	ldd	r22, Y+2	; 0x02
    1d68:	7b 81       	ldd	r23, Y+3	; 0x03
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <fat_debug_fat>
    1d72:	e3 cf       	rjmp	.-58     	; 0x1d3a <console_main+0x42c>
				}while(success==INPUT_RESULT_OK);
				break;
			case 12:
				TEXTOUT_P(PSTR("Enter directory base cluster "));
    1d74:	80 91 18 0c 	lds	r24, 0x0C18
    1d78:	90 91 19 0c 	lds	r25, 0x0C19
    1d7c:	66 ea       	ldi	r22, 0xA6	; 166
    1d7e:	71 e0       	ldi	r23, 0x01	; 1
    1d80:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				success=getlong(&templong, 0, 0x7FFFFFFFul);
    1d84:	c1 01       	movw	r24, r2
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	0f ef       	ldi	r16, 0xFF	; 255
    1d90:	1f ef       	ldi	r17, 0xFF	; 255
    1d92:	2f ef       	ldi	r18, 0xFF	; 255
    1d94:	3f e7       	ldi	r19, 0x7F	; 127
    1d96:	0e 94 05 0c 	call	0x180a	; 0x180a <getlong>
				do
				{	
					TEXTOUT_P(PSTR("Enter start index (esc to finish)"));
    1d9a:	80 91 18 0c 	lds	r24, 0x0C18
    1d9e:	90 91 19 0c 	lds	r25, 0x0C19
    1da2:	64 e8       	ldi	r22, 0x84	; 132
    1da4:	71 e0       	ldi	r23, 0x01	; 1
    1da6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					success=getlong(&templong2, 0, 65535);
    1daa:	ce 01       	movw	r24, r28
    1dac:	06 96       	adiw	r24, 0x06	; 6
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	0f ef       	ldi	r16, 0xFF	; 255
    1db8:	1f ef       	ldi	r17, 0xFF	; 255
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	0e 94 05 0c 	call	0x180a	; 0x180a <getlong>
					if(success==INPUT_RESULT_OK)
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <console_main+0x4ba>
    1dc6:	e5 cd       	rjmp	.-1078   	; 0x1992 <console_main+0x84>
						fat_debug_dir(templong, (unsigned int)templong2);
    1dc8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dca:	7b 81       	ldd	r23, Y+3	; 0x03
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	4e 81       	ldd	r20, Y+6	; 0x06
    1dd2:	5f 81       	ldd	r21, Y+7	; 0x07
    1dd4:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <fat_debug_dir>
    1dd8:	e0 cf       	rjmp	.-64     	; 0x1d9a <console_main+0x48c>
				}while(success==INPUT_RESULT_OK);
				break;
			case 13:

				TEXTOUT_P(PSTR("Enter file name >"));
    1dda:	80 91 18 0c 	lds	r24, 0x0C18
    1dde:	90 91 19 0c 	lds	r25, 0x0C19
    1de2:	62 e7       	ldi	r22, 0x72	; 114
    1de4:	71 e0       	ldi	r23, 0x01	; 1
    1de6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    1dea:	84 e1       	ldi	r24, 0x14	; 20
    1dec:	92 e0       	ldi	r25, 0x02	; 2
    1dee:	64 e6       	ldi	r22, 0x64	; 100
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1df6:	88 23       	and	r24, r24
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <console_main+0x4ee>
    1dfa:	cb cd       	rjmp	.-1130   	; 0x1992 <console_main+0x84>
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    1dfc:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dfe:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e04:	c3 01       	movw	r24, r6
    1e06:	24 e1       	ldi	r18, 0x14	; 20
    1e08:	32 e0       	ldi	r19, 0x02	; 2
    1e0a:	0e 94 1c 34 	call	0x6838	; 0x6838 <fat_file_locate>
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <console_main+0x506>
    1e12:	bf cd       	rjmp	.-1154   	; 0x1992 <console_main+0x84>
					{
						templong=fat_file_info.size;
    1e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e18:	a8 a1       	ldd	r26, Y+32	; 0x20
    1e1a:	b9 a1       	ldd	r27, Y+33	; 0x21
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
    1e1e:	9b 83       	std	Y+3, r25	; 0x03
    1e20:	ac 83       	std	Y+4, r26	; 0x04
    1e22:	bd 83       	std	Y+5, r27	; 0x05
						templong2=0;
    1e24:	1e 82       	std	Y+6, r1	; 0x06
    1e26:	1f 82       	std	Y+7, r1	; 0x07
    1e28:	18 86       	std	Y+8, r1	; 0x08
    1e2a:	19 86       	std	Y+9, r1	; 0x09
						
						TEXTOUT_P(PSTR("Enter target file name >"));
    1e2c:	80 91 18 0c 	lds	r24, 0x0C18
    1e30:	90 91 19 0c 	lds	r25, 0x0C19
    1e34:	69 e5       	ldi	r22, 0x59	; 89
    1e36:	71 e0       	ldi	r23, 0x01	; 1
    1e38:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						if(getline(text, 100)==INPUT_RESULT_OK)
    1e3c:	84 e1       	ldi	r24, 0x14	; 20
    1e3e:	92 e0       	ldi	r25, 0x02	; 2
    1e40:	64 e6       	ldi	r22, 0x64	; 100
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1e48:	88 23       	and	r24, r24
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <console_main+0x540>
    1e4c:	a2 cd       	rjmp	.-1212   	; 0x1992 <console_main+0x84>
						{
							if(fat_file_create(&fat_file_info2, fat_directory, text, templong));
    1e4e:	14 e2       	ldi	r17, 0x24	; 36
    1e50:	c1 2e       	mov	r12, r17
    1e52:	d1 2c       	mov	r13, r1
    1e54:	cc 0e       	add	r12, r28
    1e56:	dd 1e       	adc	r13, r29
    1e58:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e5a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e60:	ea 80       	ldd	r14, Y+2	; 0x02
    1e62:	fb 80       	ldd	r15, Y+3	; 0x03
    1e64:	0c 81       	ldd	r16, Y+4	; 0x04
    1e66:	1d 81       	ldd	r17, Y+5	; 0x05
    1e68:	c6 01       	movw	r24, r12
    1e6a:	24 e1       	ldi	r18, 0x14	; 20
    1e6c:	32 e0       	ldi	r19, 0x02	; 2
    1e6e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <fat_file_create>
    1e72:	5c 2c       	mov	r5, r12
    1e74:	cd 2c       	mov	r12, r13
    1e76:	68 c0       	rjmp	.+208    	; 0x1f48 <console_main+0x63a>
							{
								while(templong)
								{
									if(fat_file_info.chain.physical != templong3)
    1e78:	8a 89       	ldd	r24, Y+18	; 0x12
    1e7a:	9b 89       	ldd	r25, Y+19	; 0x13
    1e7c:	ac 89       	ldd	r26, Y+20	; 0x14
    1e7e:	bd 89       	ldd	r27, Y+21	; 0x15
    1e80:	88 15       	cp	r24, r8
    1e82:	99 05       	cpc	r25, r9
    1e84:	aa 05       	cpc	r26, r10
    1e86:	bb 05       	cpc	r27, r11
    1e88:	51 f0       	breq	.+20     	; 0x1e9e <console_main+0x590>
									{
										templong3=fat_file_info.chain.physical;
    1e8a:	4c 01       	movw	r8, r24
    1e8c:	5d 01       	movw	r10, r26
										TEXTOUT_P(PSTR("."));
    1e8e:	80 91 18 0c 	lds	r24, 0x0C18
    1e92:	90 91 19 0c 	lds	r25, 0x0C19
    1e96:	67 e5       	ldi	r22, 0x57	; 87
    1e98:	71 e0       	ldi	r23, 0x01	; 1
    1e9a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
									};
									
									if(templong < 512)
    1e9e:	ea 80       	ldd	r14, Y+2	; 0x02
    1ea0:	fb 80       	ldd	r15, Y+3	; 0x03
    1ea2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea4:	1d 81       	ldd	r17, Y+5	; 0x05
    1ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eaa:	48 85       	ldd	r20, Y+8	; 0x08
    1eac:	59 85       	ldd	r21, Y+9	; 0x09
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	ef 16       	cp	r14, r31
    1eb2:	f2 e0       	ldi	r31, 0x02	; 2
    1eb4:	ff 06       	cpc	r15, r31
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	0f 07       	cpc	r16, r31
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	1f 07       	cpc	r17, r31
    1ebe:	c4 f4       	brge	.+48     	; 0x1ef0 <console_main+0x5e2>
									{
										fat_file_read(&fat_file_info, copy_buffer, templong2, templong);
    1ec0:	c3 01       	movw	r24, r6
    1ec2:	66 e0       	ldi	r22, 0x06	; 6
    1ec4:	7a e0       	ldi	r23, 0x0A	; 10
    1ec6:	0e 94 8f 2b 	call	0x571e	; 0x571e <fat_file_read>
										fat_file_write(&fat_file_info2, copy_buffer, templong2, templong);
    1eca:	2e 81       	ldd	r18, Y+6	; 0x06
    1ecc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ece:	48 85       	ldd	r20, Y+8	; 0x08
    1ed0:	59 85       	ldd	r21, Y+9	; 0x09
    1ed2:	ea 80       	ldd	r14, Y+2	; 0x02
    1ed4:	fb 80       	ldd	r15, Y+3	; 0x03
    1ed6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ed8:	1d 81       	ldd	r17, Y+5	; 0x05
    1eda:	85 2d       	mov	r24, r5
    1edc:	9c 2d       	mov	r25, r12
    1ede:	66 e0       	ldi	r22, 0x06	; 6
    1ee0:	7a e0       	ldi	r23, 0x0A	; 10
    1ee2:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <fat_file_write>
										templong=0;
    1ee6:	1a 82       	std	Y+2, r1	; 0x02
    1ee8:	1b 82       	std	Y+3, r1	; 0x03
    1eea:	1c 82       	std	Y+4, r1	; 0x04
    1eec:	1d 82       	std	Y+5, r1	; 0x05
    1eee:	2c c0       	rjmp	.+88     	; 0x1f48 <console_main+0x63a>
									}
									else
									{
										fat_file_read(&fat_file_info, copy_buffer, templong2, 512);
    1ef0:	c3 01       	movw	r24, r6
    1ef2:	66 e0       	ldi	r22, 0x06	; 6
    1ef4:	7a e0       	ldi	r23, 0x0A	; 10
    1ef6:	e1 2c       	mov	r14, r1
    1ef8:	b2 e0       	ldi	r27, 0x02	; 2
    1efa:	fb 2e       	mov	r15, r27
    1efc:	01 2d       	mov	r16, r1
    1efe:	11 2d       	mov	r17, r1
    1f00:	0e 94 8f 2b 	call	0x571e	; 0x571e <fat_file_read>
										fat_file_write(&fat_file_info2, copy_buffer, templong2, 512);
    1f04:	2e 81       	ldd	r18, Y+6	; 0x06
    1f06:	3f 81       	ldd	r19, Y+7	; 0x07
    1f08:	48 85       	ldd	r20, Y+8	; 0x08
    1f0a:	59 85       	ldd	r21, Y+9	; 0x09
    1f0c:	85 2d       	mov	r24, r5
    1f0e:	9c 2d       	mov	r25, r12
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	7a e0       	ldi	r23, 0x0A	; 10
    1f14:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <fat_file_write>
										templong -= 512;
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f1e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f20:	80 50       	subi	r24, 0x00	; 0
    1f22:	92 40       	sbci	r25, 0x02	; 2
    1f24:	a0 40       	sbci	r26, 0x00	; 0
    1f26:	b0 40       	sbci	r27, 0x00	; 0
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	ac 83       	std	Y+4, r26	; 0x04
    1f2e:	bd 83       	std	Y+5, r27	; 0x05
										templong2+= 512;
    1f30:	8e 81       	ldd	r24, Y+6	; 0x06
    1f32:	9f 81       	ldd	r25, Y+7	; 0x07
    1f34:	a8 85       	ldd	r26, Y+8	; 0x08
    1f36:	b9 85       	ldd	r27, Y+9	; 0x09
    1f38:	80 50       	subi	r24, 0x00	; 0
    1f3a:	9e 4f       	sbci	r25, 0xFE	; 254
    1f3c:	af 4f       	sbci	r26, 0xFF	; 255
    1f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f40:	8e 83       	std	Y+6, r24	; 0x06
    1f42:	9f 83       	std	Y+7, r25	; 0x07
    1f44:	a8 87       	std	Y+8, r26	; 0x08
    1f46:	b9 87       	std	Y+9, r27	; 0x09
						TEXTOUT_P(PSTR("Enter target file name >"));
						if(getline(text, 100)==INPUT_RESULT_OK)
						{
							if(fat_file_create(&fat_file_info2, fat_directory, text, templong));
							{
								while(templong)
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f4e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	a1 05       	cpc	r26, r1
    1f54:	b1 05       	cpc	r27, r1
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <console_main+0x64c>
    1f58:	8f cf       	rjmp	.-226    	; 0x1e78 <console_main+0x56a>
    1f5a:	1b cd       	rjmp	.-1482   	; 0x1992 <console_main+0x84>
				};
				
				break; 
				
			case 14:
				TEXTOUT_P(PSTR("Enter file name >"));
    1f5c:	80 91 18 0c 	lds	r24, 0x0C18
    1f60:	90 91 19 0c 	lds	r25, 0x0C19
    1f64:	65 e4       	ldi	r22, 0x45	; 69
    1f66:	71 e0       	ldi	r23, 0x01	; 1
    1f68:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    1f6c:	84 e1       	ldi	r24, 0x14	; 20
    1f6e:	92 e0       	ldi	r25, 0x02	; 2
    1f70:	64 e6       	ldi	r22, 0x64	; 100
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <console_main+0x670>
    1f7c:	59 c0       	rjmp	.+178    	; 0x2030 <console_main+0x722>
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    1f7e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f80:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f86:	c3 01       	movw	r24, r6
    1f88:	24 e1       	ldi	r18, 0x14	; 20
    1f8a:	32 e0       	ldi	r19, 0x02	; 2
    1f8c:	0e 94 1c 34 	call	0x6838	; 0x6838 <fat_file_locate>
    1f90:	88 23       	and	r24, r24
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <console_main+0x688>
    1f94:	4d c0       	rjmp	.+154    	; 0x2030 <console_main+0x722>
					{
						templong=fat_file_info.size;
    1f96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f98:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f9a:	a8 a1       	ldd	r26, Y+32	; 0x20
    1f9c:	b9 a1       	ldd	r27, Y+33	; 0x21
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
    1fa0:	9b 83       	std	Y+3, r25	; 0x03
    1fa2:	ac 83       	std	Y+4, r26	; 0x04
    1fa4:	bd 83       	std	Y+5, r27	; 0x05
						templong2=0;
    1fa6:	1e 82       	std	Y+6, r1	; 0x06
    1fa8:	1f 82       	std	Y+7, r1	; 0x07
    1faa:	18 86       	std	Y+8, r1	; 0x08
    1fac:	19 86       	std	Y+9, r1	; 0x09
						{							
							fat_file_read(&fat_file_info, &tempchar, templong2, 1);
							//filter non-displayable chars
							tempchar &=0x7F;
							if( (tempchar < 0x20) && (tempchar !=0x0A) && (tempchar !=0x0D) )
								tempchar='_';
    1fae:	af e5       	ldi	r26, 0x5F	; 95
    1fb0:	ca 2e       	mov	r12, r26
    1fb2:	36 c0       	rjmp	.+108    	; 0x2020 <console_main+0x712>
						templong=fat_file_info.size;
						templong2=0;
						
						while(templong)
						{							
							fat_file_read(&fat_file_info, &tempchar, templong2, 1);
    1fb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb8:	48 85       	ldd	r20, Y+8	; 0x08
    1fba:	59 85       	ldd	r21, Y+9	; 0x09
    1fbc:	c3 01       	movw	r24, r6
    1fbe:	be 01       	movw	r22, r28
    1fc0:	6f 5f       	subi	r22, 0xFF	; 255
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	f1 e0       	ldi	r31, 0x01	; 1
    1fc6:	ef 2e       	mov	r14, r31
    1fc8:	f1 2c       	mov	r15, r1
    1fca:	01 2d       	mov	r16, r1
    1fcc:	11 2d       	mov	r17, r1
    1fce:	0e 94 8f 2b 	call	0x571e	; 0x571e <fat_file_read>
							//filter non-displayable chars
							tempchar &=0x7F;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8f 77       	andi	r24, 0x7F	; 127
    1fd6:	89 83       	std	Y+1, r24	; 0x01
							if( (tempchar < 0x20) && (tempchar !=0x0A) && (tempchar !=0x0D) )
    1fd8:	80 32       	cpi	r24, 0x20	; 32
    1fda:	28 f4       	brcc	.+10     	; 0x1fe6 <console_main+0x6d8>
    1fdc:	8a 30       	cpi	r24, 0x0A	; 10
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <console_main+0x6d8>
    1fe0:	8d 30       	cpi	r24, 0x0D	; 13
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <console_main+0x6d8>
								tempchar='_';
    1fe4:	c9 82       	std	Y+1, r12	; 0x01
								
							TEXTOUT_CHAR(tempchar);							
    1fe6:	80 91 18 0c 	lds	r24, 0x0C18
    1fea:	90 91 19 0c 	lds	r25, 0x0C19
    1fee:	69 81       	ldd	r22, Y+1	; 0x01
    1ff0:	0e 94 1c 3b 	call	0x7638	; 0x7638 <fifo_write_char>
							templong--;
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff8:	ac 81       	ldd	r26, Y+4	; 0x04
    1ffa:	bd 81       	ldd	r27, Y+5	; 0x05
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	a1 09       	sbc	r26, r1
    2000:	b1 09       	sbc	r27, r1
    2002:	8a 83       	std	Y+2, r24	; 0x02
    2004:	9b 83       	std	Y+3, r25	; 0x03
    2006:	ac 83       	std	Y+4, r26	; 0x04
    2008:	bd 83       	std	Y+5, r27	; 0x05
							templong2++;
    200a:	8e 81       	ldd	r24, Y+6	; 0x06
    200c:	9f 81       	ldd	r25, Y+7	; 0x07
    200e:	a8 85       	ldd	r26, Y+8	; 0x08
    2010:	b9 85       	ldd	r27, Y+9	; 0x09
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	a1 1d       	adc	r26, r1
    2016:	b1 1d       	adc	r27, r1
    2018:	8e 83       	std	Y+6, r24	; 0x06
    201a:	9f 83       	std	Y+7, r25	; 0x07
    201c:	a8 87       	std	Y+8, r26	; 0x08
    201e:	b9 87       	std	Y+9, r27	; 0x09
					if(fat_file_locate(&fat_file_info, fat_directory, text))
					{
						templong=fat_file_info.size;
						templong2=0;
						
						while(templong)
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	ac 81       	ldd	r26, Y+4	; 0x04
    2026:	bd 81       	ldd	r27, Y+5	; 0x05
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	a1 05       	cpc	r26, r1
    202c:	b1 05       	cpc	r27, r1
    202e:	11 f6       	brne	.-124    	; 0x1fb4 <console_main+0x6a6>
							templong--;
							templong2++;
						};
					};
				};
				TEXTOUT_P(PSTR("\r\n\r\n"));
    2030:	80 91 18 0c 	lds	r24, 0x0C18
    2034:	90 91 19 0c 	lds	r25, 0x0C19
    2038:	60 e4       	ldi	r22, 0x40	; 64
    203a:	71 e0       	ldi	r23, 0x01	; 1
    203c:	74 cd       	rjmp	.-1304   	; 0x1b26 <console_main+0x218>
				break;
		
			case 15:
				
				TEXTOUT_P(PSTR("Enter file name >"));
    203e:	80 91 18 0c 	lds	r24, 0x0C18
    2042:	90 91 19 0c 	lds	r25, 0x0C19
    2046:	6e e2       	ldi	r22, 0x2E	; 46
    2048:	71 e0       	ldi	r23, 0x01	; 1
    204a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				if(getline(text, 100)==INPUT_RESULT_OK)
    204e:	84 e1       	ldi	r24, 0x14	; 20
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	64 e6       	ldi	r22, 0x64	; 100
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	0e 94 80 0b 	call	0x1700	; 0x1700 <getline>
    205a:	88 23       	and	r24, r24
    205c:	09 f0       	breq	.+2      	; 0x2060 <console_main+0x752>
    205e:	99 cc       	rjmp	.-1742   	; 0x1992 <console_main+0x84>
				{
					if(fat_file_locate(&fat_file_info, fat_directory, text))
    2060:	4a 85       	ldd	r20, Y+10	; 0x0a
    2062:	5b 85       	ldd	r21, Y+11	; 0x0b
    2064:	6c 85       	ldd	r22, Y+12	; 0x0c
    2066:	7d 85       	ldd	r23, Y+13	; 0x0d
    2068:	c3 01       	movw	r24, r6
    206a:	24 e1       	ldi	r18, 0x14	; 20
    206c:	32 e0       	ldi	r19, 0x02	; 2
    206e:	0e 94 1c 34 	call	0x6838	; 0x6838 <fat_file_locate>
    2072:	88 23       	and	r24, r24
    2074:	09 f4       	brne	.+2      	; 0x2078 <console_main+0x76a>
    2076:	8d cc       	rjmp	.-1766   	; 0x1992 <console_main+0x84>
					{
						templong=fat_file_info.size;
    2078:	8e 8d       	ldd	r24, Y+30	; 0x1e
    207a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    207c:	a8 a1       	ldd	r26, Y+32	; 0x20
    207e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	9b 83       	std	Y+3, r25	; 0x03
    2084:	ac 83       	std	Y+4, r26	; 0x04
    2086:	bd 83       	std	Y+5, r27	; 0x05
						templong2=0;
    2088:	1e 82       	std	Y+6, r1	; 0x06
    208a:	1f 82       	std	Y+7, r1	; 0x07
    208c:	18 86       	std	Y+8, r1	; 0x08
    208e:	19 86       	std	Y+9, r1	; 0x09
    2090:	85 c0       	rjmp	.+266    	; 0x219c <console_main+0x88e>
						
						while(templong)
						{
							if(fat_file_info.chain.physical != templong3)
    2092:	8a 89       	ldd	r24, Y+18	; 0x12
    2094:	9b 89       	ldd	r25, Y+19	; 0x13
    2096:	ac 89       	ldd	r26, Y+20	; 0x14
    2098:	bd 89       	ldd	r27, Y+21	; 0x15
    209a:	88 15       	cp	r24, r8
    209c:	99 05       	cpc	r25, r9
    209e:	aa 05       	cpc	r26, r10
    20a0:	bb 05       	cpc	r27, r11
    20a2:	11 f1       	breq	.+68     	; 0x20e8 <console_main+0x7da>
							{
								templong3=fat_file_info.chain.physical;
    20a4:	4c 01       	movw	r8, r24
    20a6:	5d 01       	movw	r10, r26
								TEXTOUT_P(PSTR("Cluster - "));
    20a8:	80 91 18 0c 	lds	r24, 0x0C18
    20ac:	90 91 19 0c 	lds	r25, 0x0C19
    20b0:	63 e2       	ldi	r22, 0x23	; 35
    20b2:	71 e0       	ldi	r23, 0x01	; 1
    20b4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
								TEXTOUT_LONG(templong3);
    20b8:	00 91 18 0c 	lds	r16, 0x0C18
    20bc:	10 91 19 0c 	lds	r17, 0x0C19
    20c0:	c5 01       	movw	r24, r10
    20c2:	b4 01       	movw	r22, r8
    20c4:	44 e1       	ldi	r20, 0x14	; 20
    20c6:	52 e0       	ldi	r21, 0x02	; 2
    20c8:	2a e0       	ldi	r18, 0x0A	; 10
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    20d0:	bc 01       	movw	r22, r24
    20d2:	c8 01       	movw	r24, r16
    20d4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
								TEXTOUT_P(PSTR("\r\n"));
    20d8:	80 91 18 0c 	lds	r24, 0x0C18
    20dc:	90 91 19 0c 	lds	r25, 0x0C19
    20e0:	60 e2       	ldi	r22, 0x20	; 32
    20e2:	71 e0       	ldi	r23, 0x01	; 1
    20e4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
							};
							
							//wait for frame
							audio_swapflag=FALSE;
    20e8:	10 92 23 0c 	sts	0x0C23, r1
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <console_main+0x7e4>
							while(audio_swapflag==FALSE)
								main_fly();
    20ee:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <main_fly>
								TEXTOUT_P(PSTR("\r\n"));
							};
							
							//wait for frame
							audio_swapflag=FALSE;
							while(audio_swapflag==FALSE)
    20f2:	80 91 23 0c 	lds	r24, 0x0C23
    20f6:	88 23       	and	r24, r24
    20f8:	d1 f3       	breq	.-12     	; 0x20ee <console_main+0x7e0>
								main_fly();
							if(templong < AUDIO_BUFFER_SIZE)
    20fa:	ea 80       	ldd	r14, Y+2	; 0x02
    20fc:	fb 80       	ldd	r15, Y+3	; 0x03
    20fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2100:	1d 81       	ldd	r17, Y+5	; 0x05
    2102:	2e 81       	ldd	r18, Y+6	; 0x06
    2104:	3f 81       	ldd	r19, Y+7	; 0x07
    2106:	48 85       	ldd	r20, Y+8	; 0x08
    2108:	59 85       	ldd	r21, Y+9	; 0x09
    210a:	60 91 24 0c 	lds	r22, 0x0C24
    210e:	70 91 25 0c 	lds	r23, 0x0C25
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	e8 16       	cp	r14, r24
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	f8 06       	cpc	r15, r24
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	08 07       	cpc	r16, r24
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	18 07       	cpc	r17, r24
    2122:	e4 f4       	brge	.+56     	; 0x215c <console_main+0x84e>
							{
								fat_file_read(&fat_file_info, audio_buffer, templong2, templong);
    2124:	c3 01       	movw	r24, r6
    2126:	0e 94 8f 2b 	call	0x571e	; 0x571e <fat_file_read>
								memset(&audio_buffer[templong], 0x80, AUDIO_BUFFER_SIZE-templong);
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	ac 81       	ldd	r26, Y+4	; 0x04
    2130:	bd 81       	ldd	r27, Y+5	; 0x05
    2132:	e0 e0       	ldi	r30, 0x00	; 0
    2134:	f2 e0       	ldi	r31, 0x02	; 2
    2136:	e8 1b       	sub	r30, r24
    2138:	f9 0b       	sbc	r31, r25
    213a:	20 91 24 0c 	lds	r18, 0x0C24
    213e:	30 91 25 0c 	lds	r19, 0x0C25
    2142:	28 0f       	add	r18, r24
    2144:	39 1f       	adc	r19, r25
    2146:	c9 01       	movw	r24, r18
    2148:	60 e8       	ldi	r22, 0x80	; 128
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	af 01       	movw	r20, r30
    214e:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
								templong=0;
    2152:	1a 82       	std	Y+2, r1	; 0x02
    2154:	1b 82       	std	Y+3, r1	; 0x03
    2156:	1c 82       	std	Y+4, r1	; 0x04
    2158:	1d 82       	std	Y+5, r1	; 0x05
    215a:	20 c0       	rjmp	.+64     	; 0x219c <console_main+0x88e>
							}
							else
							{
								fat_file_read(&fat_file_info, audio_buffer, templong2, AUDIO_BUFFER_SIZE);
    215c:	c3 01       	movw	r24, r6
    215e:	e1 2c       	mov	r14, r1
    2160:	e2 e0       	ldi	r30, 0x02	; 2
    2162:	fe 2e       	mov	r15, r30
    2164:	01 2d       	mov	r16, r1
    2166:	11 2d       	mov	r17, r1
    2168:	0e 94 8f 2b 	call	0x571e	; 0x571e <fat_file_read>
								templong -= AUDIO_BUFFER_SIZE;
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	ac 81       	ldd	r26, Y+4	; 0x04
    2172:	bd 81       	ldd	r27, Y+5	; 0x05
    2174:	80 50       	subi	r24, 0x00	; 0
    2176:	92 40       	sbci	r25, 0x02	; 2
    2178:	a0 40       	sbci	r26, 0x00	; 0
    217a:	b0 40       	sbci	r27, 0x00	; 0
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	9b 83       	std	Y+3, r25	; 0x03
    2180:	ac 83       	std	Y+4, r26	; 0x04
    2182:	bd 83       	std	Y+5, r27	; 0x05
								templong2+= AUDIO_BUFFER_SIZE;
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	a8 85       	ldd	r26, Y+8	; 0x08
    218a:	b9 85       	ldd	r27, Y+9	; 0x09
    218c:	80 50       	subi	r24, 0x00	; 0
    218e:	9e 4f       	sbci	r25, 0xFE	; 254
    2190:	af 4f       	sbci	r26, 0xFF	; 255
    2192:	bf 4f       	sbci	r27, 0xFF	; 255
    2194:	8e 83       	std	Y+6, r24	; 0x06
    2196:	9f 83       	std	Y+7, r25	; 0x07
    2198:	a8 87       	std	Y+8, r26	; 0x08
    219a:	b9 87       	std	Y+9, r27	; 0x09
					if(fat_file_locate(&fat_file_info, fat_directory, text))
					{
						templong=fat_file_info.size;
						templong2=0;
						
						while(templong)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	ac 81       	ldd	r26, Y+4	; 0x04
    21a2:	bd 81       	ldd	r27, Y+5	; 0x05
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	a1 05       	cpc	r26, r1
    21a8:	b1 05       	cpc	r27, r1
    21aa:	09 f0       	breq	.+2      	; 0x21ae <console_main+0x8a0>
    21ac:	72 cf       	rjmp	.-284    	; 0x2092 <console_main+0x784>
								templong2+= AUDIO_BUFFER_SIZE;
							};
						};
						
						//silence both frames
						audio_swapflag=FALSE;
    21ae:	10 92 23 0c 	sts	0x0C23, r1
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <console_main+0x8aa>
						while(audio_swapflag==FALSE)
							main_fly();
    21b4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <main_fly>
							};
						};
						
						//silence both frames
						audio_swapflag=FALSE;
						while(audio_swapflag==FALSE)
    21b8:	80 91 23 0c 	lds	r24, 0x0C23
    21bc:	88 23       	and	r24, r24
    21be:	d1 f3       	breq	.-12     	; 0x21b4 <console_main+0x8a6>
							main_fly();
						memset(audio_buffer, 0x80, AUDIO_BUFFER_SIZE);
    21c0:	80 91 24 0c 	lds	r24, 0x0C24
    21c4:	90 91 25 0c 	lds	r25, 0x0C25
    21c8:	60 e8       	ldi	r22, 0x80	; 128
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	52 e0       	ldi	r21, 0x02	; 2
    21d0:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
						audio_swapflag=FALSE;
    21d4:	10 92 23 0c 	sts	0x0C23, r1
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <console_main+0x8d0>
						while(audio_swapflag==FALSE)
							main_fly();
    21da:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <main_fly>
						audio_swapflag=FALSE;
						while(audio_swapflag==FALSE)
							main_fly();
						memset(audio_buffer, 0x80, AUDIO_BUFFER_SIZE);
						audio_swapflag=FALSE;
						while(audio_swapflag==FALSE)
    21de:	80 91 23 0c 	lds	r24, 0x0C23
    21e2:	88 23       	and	r24, r24
    21e4:	d1 f3       	breq	.-12     	; 0x21da <console_main+0x8cc>
							main_fly();
						memset(audio_buffer, 0x80, AUDIO_BUFFER_SIZE);
    21e6:	80 91 24 0c 	lds	r24, 0x0C24
    21ea:	90 91 25 0c 	lds	r25, 0x0C25
    21ee:	60 e8       	ldi	r22, 0x80	; 128
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	52 e0       	ldi	r21, 0x02	; 2
    21f6:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
    21fa:	cb cb       	rjmp	.-2154   	; 0x1992 <console_main+0x84>
					};
				};
				break;
		};
	}while( option || success==INPUT_RESULT_NIL );
    21fc:	89 2b       	or	r24, r25
    21fe:	09 f0       	breq	.+2      	; 0x2202 <__stack+0x3>
    2200:	c8 cb       	rjmp	.-2160   	; 0x1992 <console_main+0x84>
	TEXTOUT_P(PSTR("Exit\r\n"));
    2202:	80 91 18 0c 	lds	r24, 0x0C18
    2206:	90 91 19 0c 	lds	r25, 0x0C19
    220a:	69 e1       	ldi	r22, 0x19	; 25
    220c:	71 e0       	ldi	r23, 0x01	; 1
    220e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
}
    2212:	e9 96       	adiw	r28, 0x39	; 57
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	df 90       	pop	r13
    222c:	cf 90       	pop	r12
    222e:	bf 90       	pop	r11
    2230:	af 90       	pop	r10
    2232:	9f 90       	pop	r9
    2234:	8f 90       	pop	r8
    2236:	7f 90       	pop	r7
    2238:	6f 90       	pop	r6
    223a:	5f 90       	pop	r5
    223c:	3f 90       	pop	r3
    223e:	2f 90       	pop	r2
    2240:	08 95       	ret
		success=getint(&option, -1, 50);
		//if input failed, exit menu, or refresh menu
		if(success != INPUT_RESULT_OK)
			option=0;
		
		switch(option)
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	91 05       	cpc	r25, r1
    2246:	09 f4       	brne	.+2      	; 0x224a <__stack+0x4b>
    2248:	ff cc       	rjmp	.-1538   	; 0x1c48 <console_main+0x33a>
    224a:	89 30       	cpi	r24, 0x09	; 9
    224c:	91 05       	cpc	r25, r1
    224e:	dc f4       	brge	.+54     	; 0x2286 <__stack+0x87>
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <__stack+0x59>
    2256:	86 cc       	rjmp	.-1780   	; 0x1b64 <console_main+0x256>
    2258:	85 30       	cpi	r24, 0x05	; 5
    225a:	91 05       	cpc	r25, r1
    225c:	64 f4       	brge	.+24     	; 0x2276 <__stack+0x77>
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	91 05       	cpc	r25, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <__stack+0x67>
    2264:	4f cc       	rjmp	.-1890   	; 0x1b04 <console_main+0x1f6>
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <__stack+0x6f>
    226c:	5f cc       	rjmp	.-1858   	; 0x1b2c <console_main+0x21e>
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	21 f6       	brne	.-120    	; 0x21fc <console_main+0x8ee>
    2274:	f9 cb       	rjmp	.-2062   	; 0x1a68 <console_main+0x15a>
    2276:	86 30       	cpi	r24, 0x06	; 6
    2278:	91 05       	cpc	r25, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <__stack+0x7f>
    227c:	92 cc       	rjmp	.-1756   	; 0x1ba2 <console_main+0x294>
    227e:	07 97       	sbiw	r24, 0x07	; 7
    2280:	0c f0       	brlt	.+2      	; 0x2284 <__stack+0x85>
    2282:	c8 cc       	rjmp	.-1648   	; 0x1c14 <console_main+0x306>
    2284:	76 cc       	rjmp	.-1812   	; 0x1b72 <console_main+0x264>
    2286:	8c 30       	cpi	r24, 0x0C	; 12
    2288:	91 05       	cpc	r25, r1
    228a:	09 f4       	brne	.+2      	; 0x228e <__stack+0x8f>
    228c:	73 cd       	rjmp	.-1306   	; 0x1d74 <console_main+0x466>
    228e:	8d 30       	cpi	r24, 0x0D	; 13
    2290:	91 05       	cpc	r25, r1
    2292:	44 f4       	brge	.+16     	; 0x22a4 <__stack+0xa5>
    2294:	8a 30       	cpi	r24, 0x0A	; 10
    2296:	91 05       	cpc	r25, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <__stack+0x9d>
    229a:	11 cd       	rjmp	.-1502   	; 0x1cbe <console_main+0x3b0>
    229c:	0b 97       	sbiw	r24, 0x0b	; 11
    229e:	0c f0       	brlt	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	4c cd       	rjmp	.-1384   	; 0x1d3a <console_main+0x42c>
    22a2:	ec cc       	rjmp	.-1576   	; 0x1c7c <console_main+0x36e>
    22a4:	8e 30       	cpi	r24, 0x0E	; 14
    22a6:	91 05       	cpc	r25, r1
    22a8:	09 f4       	brne	.+2      	; 0x22ac <__stack+0xad>
    22aa:	58 ce       	rjmp	.-848    	; 0x1f5c <console_main+0x64e>
    22ac:	8e 30       	cpi	r24, 0x0E	; 14
    22ae:	91 05       	cpc	r25, r1
    22b0:	0c f4       	brge	.+2      	; 0x22b4 <__stack+0xb5>
    22b2:	93 cd       	rjmp	.-1242   	; 0x1dda <console_main+0x4cc>
    22b4:	8f 30       	cpi	r24, 0x0F	; 15
    22b6:	91 05       	cpc	r25, r1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <__stack+0xbd>
    22ba:	a0 cf       	rjmp	.-192    	; 0x21fc <console_main+0x8ee>
    22bc:	c0 ce       	rjmp	.-640    	; 0x203e <console_main+0x730>
						memset(audio_buffer, 0x80, AUDIO_BUFFER_SIZE);
					};
				};
				break;
		};
	}while( option || success==INPUT_RESULT_NIL );
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <__stack+0xc5>
    22c2:	67 cb       	rjmp	.-2354   	; 0x1992 <console_main+0x84>
    22c4:	9e cf       	rjmp	.-196    	; 0x2202 <__stack+0x3>

000022c6 <console_init>:
	if(time)
		time--;
}

void console_init(void)
{
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
	//initialise console input fifo, uses malloc to create input buffer
	fifo_init(&console_vars.input, CONSOLE_INPUT_FIFO_SIZE, NULL, NULL, NULL);
    22ca:	86 e0       	ldi	r24, 0x06	; 6
    22cc:	9c e0       	ldi	r25, 0x0C	; 12
    22ce:	60 e1       	ldi	r22, 0x10	; 16
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	00 e0       	ldi	r16, 0x00	; 0
    22dc:	10 e0       	ldi	r17, 0x00	; 0
    22de:	0e 94 cc 3e 	call	0x7d98	; 0x7d98 <fifo_init>
}
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret

000022e8 <sd_init>:
#define TIMEOUT_R1_RESPONSE			5000
 
void sd_init(void)
{

	CLK_PORT	&=~_BV(CLK_BIT);
    22e8:	29 98       	cbi	0x05, 1	; 5
	SS_PORT		|=_BV(SS_BIT);
    22ea:	5f 9a       	sbi	0x0b, 7	; 11
	MOSI_PORT	|=_BV(MOSI_BIT);
    22ec:	2a 9a       	sbi	0x05, 2	; 5
	MISO_PORT	|=_BV(MISO_BIT);
    22ee:	2b 9a       	sbi	0x05, 3	; 5
	
	CLK_DDR		|=_BV(CLK_BIT);
    22f0:	21 9a       	sbi	0x04, 1	; 4
	MISO_DDR	&=~_BV(MISO_BIT);
    22f2:	23 98       	cbi	0x04, 3	; 4
	MOSI_DDR	|=_BV(MOSI_BIT);
    22f4:	22 9a       	sbi	0x04, 2	; 4
	SS_DDR		|=_BV(SS_BIT);
    22f6:	57 9a       	sbi	0x0a, 7	; 10

	PRR0 &=~_BV(PRSPI);
    22f8:	e4 e6       	ldi	r30, 0x64	; 100
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8b 7f       	andi	r24, 0xFB	; 251
    2300:	80 83       	st	Z, r24
	DDRB |=_BV(PB0);
    2302:	20 9a       	sbi	0x04, 0	; 4
	PORTB |=_BV(PB0);
    2304:	28 9a       	sbi	0x05, 0	; 5

	SPCR |=_BV(CPOL);	//leading edge is falling
    2306:	8c b5       	in	r24, 0x2c	; 44
    2308:	88 60       	ori	r24, 0x08	; 8
    230a:	8c bd       	out	0x2c, r24	; 44
	SPCR |=_BV(CPHA);	//setup on leading edge
    230c:	8c b5       	in	r24, 0x2c	; 44
    230e:	84 60       	ori	r24, 0x04	; 4
    2310:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |=_BV(MSTR);	//master
    2312:	8c b5       	in	r24, 0x2c	; 44
    2314:	80 61       	ori	r24, 0x10	; 16
    2316:	8c bd       	out	0x2c, r24	; 44
	SPCR |=_BV(SPR0)+_BV(SPR1);	//fosc/64 (until after setup)
    2318:	8c b5       	in	r24, 0x2c	; 44
    231a:	83 60       	ori	r24, 0x03	; 3
    231c:	8c bd       	out	0x2c, r24	; 44
	SPCR |=_BV(SPE);
    231e:	8c b5       	in	r24, 0x2c	; 44
    2320:	80 64       	ori	r24, 0x40	; 64
    2322:	8c bd       	out	0x2c, r24	; 44
	SPSR |=_BV(SPI2X);
    2324:	8d b5       	in	r24, 0x2d	; 45
    2326:	81 60       	ori	r24, 0x01	; 1
    2328:	8d bd       	out	0x2d, r24	; 45
}
    232a:	08 95       	ret

0000232c <response_r1>:
	return success;	
}

//Waits for R1 response, returns 0xFF if timeout
static char response_r1(void)
{
    232c:	28 e8       	ldi	r18, 0x88	; 136
    232e:	33 e1       	ldi	r19, 0x13	; 19

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2330:	9f ef       	ldi	r25, 0xFF	; 255
    2332:	9e bd       	out	0x2e, r25	; 46
	while( !(SPSR & _BV(SPIF)) );
    2334:	0d b4       	in	r0, 0x2d	; 45
    2336:	07 fe       	sbrs	r0, 7
    2338:	fd cf       	rjmp	.-6      	; 0x2334 <response_r1+0x8>
	retval=SPDR;
    233a:	8e b5       	in	r24, 0x2e	; 46
	char response;

	while(retry--)
	{
		response=transfer(0xFF);
		if(!(response & _BV(7)))	//if bit7 is clear, then this is the response.
    233c:	88 23       	and	r24, r24
    233e:	1c f4       	brge	.+6      	; 0x2346 <response_r1+0x1a>
			retry=0;
		else
			retry--;			
    2340:	22 50       	subi	r18, 0x02	; 2
    2342:	30 40       	sbci	r19, 0x00	; 0
static char response_r1(void)
{
	int retry = TIMEOUT_R1_RESPONSE;
	char response;

	while(retry--)
    2344:	b1 f7       	brne	.-20     	; 0x2332 <response_r1+0x6>
		else
			retry--;			
	};

	return response;
}
    2346:	08 95       	ret

00002348 <transfer_long>:

static unsigned long transfer_long(unsigned long data)
{
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
	unsigned long retval;
	
	retval=transfer(data>>24);
    234c:	89 2f       	mov	r24, r25
    234e:	99 27       	eor	r25, r25
    2350:	aa 27       	eor	r26, r26
    2352:	bb 27       	eor	r27, r27

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2354:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2356:	0d b4       	in	r0, 0x2d	; 45
    2358:	07 fe       	sbrs	r0, 7
    235a:	fd cf       	rjmp	.-6      	; 0x2356 <transfer_long+0xe>
	retval=SPDR;
    235c:	7e b5       	in	r23, 0x2e	; 46
{
	unsigned long retval;
	
	retval=transfer(data>>24);
	retval<<=8;
	retval+=transfer(data>>16);
    235e:	ca 01       	movw	r24, r20
    2360:	aa 27       	eor	r26, r26
    2362:	bb 27       	eor	r27, r27

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2364:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2366:	0d b4       	in	r0, 0x2d	; 45
    2368:	07 fe       	sbrs	r0, 7
    236a:	fd cf       	rjmp	.-6      	; 0x2366 <transfer_long+0x1e>
	retval=SPDR;
    236c:	6e b5       	in	r22, 0x2e	; 46
	
	retval=transfer(data>>24);
	retval<<=8;
	retval+=transfer(data>>16);
	retval<<=8;
	retval+=transfer(data>>8);
    236e:	bb 27       	eor	r27, r27
    2370:	a5 2f       	mov	r26, r21
    2372:	94 2f       	mov	r25, r20
    2374:	83 2f       	mov	r24, r19

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2376:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2378:	0d b4       	in	r0, 0x2d	; 45
    237a:	07 fe       	sbrs	r0, 7
    237c:	fd cf       	rjmp	.-6      	; 0x2378 <transfer_long+0x30>
	retval=SPDR;
    237e:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2380:	2e bd       	out	0x2e, r18	; 46
	while( !(SPSR & _BV(SPIF)) );
    2382:	0d b4       	in	r0, 0x2d	; 45
    2384:	07 fe       	sbrs	r0, 7
    2386:	fd cf       	rjmp	.-6      	; 0x2382 <transfer_long+0x3a>
	retval=SPDR;
    2388:	8e b5       	in	r24, 0x2e	; 46

static unsigned long transfer_long(unsigned long data)
{
	unsigned long retval;
	
	retval=transfer(data>>24);
    238a:	27 2f       	mov	r18, r23
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	50 e0       	ldi	r21, 0x00	; 0
	retval<<=8;
    2392:	54 2f       	mov	r21, r20
    2394:	43 2f       	mov	r20, r19
    2396:	32 2f       	mov	r19, r18
    2398:	22 27       	eor	r18, r18
	retval+=transfer(data>>16);
    239a:	26 0f       	add	r18, r22
    239c:	31 1d       	adc	r19, r1
    239e:	41 1d       	adc	r20, r1
    23a0:	51 1d       	adc	r21, r1
	retval<<=8;
    23a2:	54 2f       	mov	r21, r20
    23a4:	43 2f       	mov	r20, r19
    23a6:	32 2f       	mov	r19, r18
    23a8:	22 27       	eor	r18, r18
	retval+=transfer(data>>8);
    23aa:	29 0f       	add	r18, r25
    23ac:	31 1d       	adc	r19, r1
    23ae:	41 1d       	adc	r20, r1
    23b0:	51 1d       	adc	r21, r1
	retval<<=8;
    23b2:	54 2f       	mov	r21, r20
    23b4:	43 2f       	mov	r20, r19
    23b6:	32 2f       	mov	r19, r18
    23b8:	22 27       	eor	r18, r18
    23ba:	28 0f       	add	r18, r24
    23bc:	31 1d       	adc	r19, r1
    23be:	41 1d       	adc	r20, r1
    23c0:	51 1d       	adc	r21, r1
	retval+=transfer(data);
	
	return retval;
}
    23c2:	b9 01       	movw	r22, r18
    23c4:	ca 01       	movw	r24, r20
    23c6:	08 95       	ret

000023c8 <sd_initcard>:
	SPCR |=_BV(SPE);
	SPSR |=_BV(SPI2X);
}

char sd_initcard(void)
{
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
	unsigned long ocr=0;
	char success=FALSE;

	SPCR |=_BV(SPR0)+_BV(SPR1);	//fosc/64 (until after setup)
    23e0:	8c b5       	in	r24, 0x2c	; 44
    23e2:	83 60       	ori	r24, 0x03	; 3
    23e4:	8c bd       	out	0x2c, r24	; 44

	sd_sdhc=FALSE;
    23e6:	10 92 79 02 	sts	0x0279, r1
static char command_resetidle(void)
{
	int tempint;
	char success=FALSE;

	DEBUG_P(PSTR("SD COMMAND RESET/IDLE\r\n"));
    23ea:	80 91 7a 02 	lds	r24, 0x027A
    23ee:	90 91 7b 02 	lds	r25, 0x027B
    23f2:	61 eb       	ldi	r22, 0xB1	; 177
    23f4:	75 e0       	ldi	r23, 0x05	; 5
    23f6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    23fa:	8a e0       	ldi	r24, 0x0A	; 10
    23fc:	90 e0       	ldi	r25, 0x00	; 0

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    23fe:	2f ef       	ldi	r18, 0xFF	; 255
    2400:	05 c0       	rjmp	.+10     	; 0x240c <sd_initcard+0x44>
    2402:	2e bd       	out	0x2e, r18	; 46
	while( !(SPSR & _BV(SPIF)) );
    2404:	0d b4       	in	r0, 0x2d	; 45
    2406:	07 fe       	sbrs	r0, 7
    2408:	fd cf       	rjmp	.-6      	; 0x2404 <sd_initcard+0x3c>
	retval=SPDR;
    240a:	3e b5       	in	r19, 0x2e	; 46

	DEBUG_P(PSTR("SD COMMAND RESET/IDLE\r\n"));

	//send 80 clock pulses
	tempint=10;
	while(tempint--)
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	8f 3f       	cpi	r24, 0xFF	; 255
    2412:	93 07       	cpc	r25, r19
    2414:	b1 f7       	brne	.-20     	; 0x2402 <sd_initcard+0x3a>
		transfer(0xFF);

	SS_PORT &=~_BV(SS_BIT);	//select
    2416:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2418:	80 e4       	ldi	r24, 0x40	; 64
    241a:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    241c:	0d b4       	in	r0, 0x2d	; 45
    241e:	07 fe       	sbrs	r0, 7
    2420:	fd cf       	rjmp	.-6      	; 0x241c <sd_initcard+0x54>
	retval=SPDR;
    2422:	8e b5       	in	r24, 0x2e	; 46
		transfer(0xFF);

	SS_PORT &=~_BV(SS_BIT);	//select
	
	transfer(0x00 | 0x40);		//CMD00 (reset/idle)
	transfer_long(0x00000000);
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2430:	85 e9       	ldi	r24, 0x95	; 149
    2432:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2434:	0d b4       	in	r0, 0x2d	; 45
    2436:	07 fe       	sbrs	r0, 7
    2438:	fd cf       	rjmp	.-6      	; 0x2434 <sd_initcard+0x6c>
	retval=SPDR;
    243a:	8e b5       	in	r24, 0x2e	; 46
	
	transfer(0x00 | 0x40);		//CMD00 (reset/idle)
	transfer_long(0x00000000);
	transfer(0x95);				//checksum 95

	if(response_r1()==_BV(R1_IDLE))
    243c:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    2440:	98 2f       	mov	r25, r24

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2446:	0d b4       	in	r0, 0x2d	; 45
    2448:	07 fe       	sbrs	r0, 7
    244a:	fd cf       	rjmp	.-6      	; 0x2446 <sd_initcard+0x7e>
	retval=SPDR;
    244c:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2452:	0d b4       	in	r0, 0x2d	; 45
    2454:	07 fe       	sbrs	r0, 7
    2456:	fd cf       	rjmp	.-6      	; 0x2452 <sd_initcard+0x8a>
	retval=SPDR;
    2458:	8e b5       	in	r24, 0x2e	; 46
		success=TRUE;

	transfer(0xFF);		//additional clocks before de-select
	transfer(0xFF);
	
	SS_PORT |=_BV(SS_BIT);	//de-select
    245a:	5f 9a       	sbi	0x0b, 7	; 11
    245c:	20 91 7a 02 	lds	r18, 0x027A
    2460:	30 91 7b 02 	lds	r19, 0x027B

	if(!success)
    2464:	91 30       	cpi	r25, 0x01	; 1
    2466:	31 f0       	breq	.+12     	; 0x2474 <sd_initcard+0xac>
		DEBUG_P(PSTR("SD COMMAND RESET/IDLE FAILED.\r\n"));
    2468:	c9 01       	movw	r24, r18
    246a:	61 e9       	ldi	r22, 0x91	; 145
    246c:	75 e0       	ldi	r23, 0x05	; 5
    246e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    2472:	6a c0       	rjmp	.+212    	; 0x2548 <sd_initcard+0x180>
	
	success=command_resetidle();

	if(success)
	{
		sd_version=2;
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	80 93 78 02 	sts	0x0278, r24

static char command_sendifc(void)
{
	char success=FALSE;

	DEBUG_P(PSTR("SD COMMAND SEND IFC\r\n"));
    247a:	c9 01       	movw	r24, r18
    247c:	67 ee       	ldi	r22, 0xE7	; 231
    247e:	75 e0       	ldi	r23, 0x05	; 5
    2480:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	SS_PORT &=~_BV(SS_BIT);	//select
    2484:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2486:	88 e4       	ldi	r24, 0x48	; 72
    2488:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    248a:	0d b4       	in	r0, 0x2d	; 45
    248c:	07 fe       	sbrs	r0, 7
    248e:	fd cf       	rjmp	.-6      	; 0x248a <sd_initcard+0xc2>
	retval=SPDR;
    2490:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2492:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    2494:	0d b4       	in	r0, 0x2d	; 45
    2496:	07 fe       	sbrs	r0, 7
    2498:	fd cf       	rjmp	.-6      	; 0x2494 <sd_initcard+0xcc>
	retval=SPDR;
    249a:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    249c:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    249e:	0d b4       	in	r0, 0x2d	; 45
    24a0:	07 fe       	sbrs	r0, 7
    24a2:	fd cf       	rjmp	.-6      	; 0x249e <sd_initcard+0xd6>
	retval=SPDR;
    24a4:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24aa:	0d b4       	in	r0, 0x2d	; 45
    24ac:	07 fe       	sbrs	r0, 7
    24ae:	fd cf       	rjmp	.-6      	; 0x24aa <sd_initcard+0xe2>
	retval=SPDR;
    24b0:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24b2:	8a ea       	ldi	r24, 0xAA	; 170
    24b4:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24b6:	0d b4       	in	r0, 0x2d	; 45
    24b8:	07 fe       	sbrs	r0, 7
    24ba:	fd cf       	rjmp	.-6      	; 0x24b6 <sd_initcard+0xee>
	retval=SPDR;
    24bc:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24be:	87 e8       	ldi	r24, 0x87	; 135
    24c0:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24c2:	0d b4       	in	r0, 0x2d	; 45
    24c4:	07 fe       	sbrs	r0, 7
    24c6:	fd cf       	rjmp	.-6      	; 0x24c2 <sd_initcard+0xfa>
	retval=SPDR;
    24c8:	8e b5       	in	r24, 0x2e	; 46
	transfer(0x00);
	transfer(0x01);	//2.7-3.3V
	transfer(0xAA);	//10101010 check pattern
	transfer(0x87);	//checksum for CMD8

	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
    24ca:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    24ce:	8e 7f       	andi	r24, 0xFE	; 254
    24d0:	01 f5       	brne	.+64     	; 0x2512 <sd_initcard+0x14a>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24d2:	8f ef       	ldi	r24, 0xFF	; 255
    24d4:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24d6:	0d b4       	in	r0, 0x2d	; 45
    24d8:	07 fe       	sbrs	r0, 7
    24da:	fd cf       	rjmp	.-6      	; 0x24d6 <sd_initcard+0x10e>
	retval=SPDR;
    24dc:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24de:	8f ef       	ldi	r24, 0xFF	; 255
    24e0:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24e2:	0d b4       	in	r0, 0x2d	; 45
    24e4:	07 fe       	sbrs	r0, 7
    24e6:	fd cf       	rjmp	.-6      	; 0x24e2 <sd_initcard+0x11a>
	retval=SPDR;
    24e8:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    24ee:	0d b4       	in	r0, 0x2d	; 45
    24f0:	07 fe       	sbrs	r0, 7
    24f2:	fd cf       	rjmp	.-6      	; 0x24ee <sd_initcard+0x126>
	retval=SPDR;
    24f4:	8e b5       	in	r24, 0x2e	; 46

	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
	{
		transfer(0xFF);	//ignore R7 response bits 31-28 (command version), and 27-24 (reserved)
		transfer(0xFF); //ignore R7 response bits 23-16 (reserved)
		if((transfer(0xFF) & 0x0F) == 0x01) //ignore R7 response bits 15-12 (reserved), bits 11-8 should == 1 if voltage is accepted (it will be)
    24f6:	8f 70       	andi	r24, 0x0F	; 15
    24f8:	81 30       	cpi	r24, 0x01	; 1
    24fa:	59 f4       	brne	.+22     	; 0x2512 <sd_initcard+0x14a>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2500:	0d b4       	in	r0, 0x2d	; 45
    2502:	07 fe       	sbrs	r0, 7
    2504:	fd cf       	rjmp	.-6      	; 0x2500 <sd_initcard+0x138>
	retval=SPDR;
    2506:	8e b5       	in	r24, 0x2e	; 46
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	8a 3a       	cpi	r24, 0xAA	; 170
    250c:	19 f4       	brne	.+6      	; 0x2514 <sd_initcard+0x14c>
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <sd_initcard+0x14c>
    2512:	90 e0       	ldi	r25, 0x00	; 0

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2514:	8f ef       	ldi	r24, 0xFF	; 255
    2516:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2518:	0d b4       	in	r0, 0x2d	; 45
    251a:	07 fe       	sbrs	r0, 7
    251c:	fd cf       	rjmp	.-6      	; 0x2518 <sd_initcard+0x150>
	retval=SPDR;
    251e:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2524:	0d b4       	in	r0, 0x2d	; 45
    2526:	07 fe       	sbrs	r0, 7
    2528:	fd cf       	rjmp	.-6      	; 0x2524 <sd_initcard+0x15c>
	retval=SPDR;
    252a:	8e b5       	in	r24, 0x2e	; 46
		};
	};
	
	transfer(0xFF);		//additional clocks before de-select
	transfer(0xFF);
	SS_PORT |=_BV(SS_BIT);	//de-select
    252c:	5f 9a       	sbi	0x0b, 7	; 11
	
	if(!success)
    252e:	99 23       	and	r25, r25
    2530:	59 f4       	brne	.+22     	; 0x2548 <sd_initcard+0x180>
		DEBUG_P(PSTR("SD COMMAND SEND IFC FAILED.\r\n"));
    2532:	80 91 7a 02 	lds	r24, 0x027A
    2536:	90 91 7b 02 	lds	r25, 0x027B
    253a:	69 ec       	ldi	r22, 0xC9	; 201
    253c:	75 e0       	ldi	r23, 0x05	; 5
    253e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	if(success)
	{
		sd_version=2;
		success=command_sendifc();
		if(!success)
			sd_version=1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	80 93 78 02 	sts	0x0278, r24
static char command_initialize(void)
{
	char success=FALSE, response, finished=FALSE;
	int retry=1000;

	DEBUG_P(PSTR("SD COMMAND INITIALIZE\r\n"));
    2548:	80 91 7a 02 	lds	r24, 0x027A
    254c:	90 91 7b 02 	lds	r25, 0x027B
    2550:	6d e1       	ldi	r22, 0x1D	; 29
    2552:	76 e0       	ldi	r23, 0x06	; 6
    2554:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    2558:	c8 ee       	ldi	r28, 0xE8	; 232
    255a:	d3 e0       	ldi	r29, 0x03	; 3

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    255c:	87 e7       	ldi	r24, 0x77	; 119
    255e:	f8 2e       	mov	r15, r24
	DEBUG_P(PSTR("SD COMMAND INITIALIZE\r\n"));

	do
	{
		//CMD 55
		SS_PORT &=~_BV(SS_BIT);	//select
    2560:	0f ef       	ldi	r16, 0xFF	; 255
    2562:	19 e6       	ldi	r17, 0x69	; 105
    2564:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2566:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2568:	0d b4       	in	r0, 0x2d	; 45
    256a:	07 fe       	sbrs	r0, 7
    256c:	fd cf       	rjmp	.-6      	; 0x2568 <sd_initcard+0x1a0>
	retval=SPDR;
    256e:	8e b5       	in	r24, 0x2e	; 46
	do
	{
		//CMD 55
		SS_PORT &=~_BV(SS_BIT);	//select
		transfer(55 | 0x40);	//CMD55
		transfer_long(0x00000000);	//0 stuff bits
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    257c:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    257e:	0d b4       	in	r0, 0x2d	; 45
    2580:	07 fe       	sbrs	r0, 7
    2582:	fd cf       	rjmp	.-6      	; 0x257e <sd_initcard+0x1b6>
	retval=SPDR;
    2584:	8e b5       	in	r24, 0x2e	; 46
		//CMD 55
		SS_PORT &=~_BV(SS_BIT);	//select
		transfer(55 | 0x40);	//CMD55
		transfer_long(0x00000000);	//0 stuff bits
		transfer(0x00);			//checksum
		if((response_r1() & ~_BV(R1_IDLE)) != 0)	//if any error bits are set
    2586:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	8e 7f       	andi	r24, 0xFE	; 254
    258e:	09 f0       	breq	.+2      	; 0x2592 <sd_initcard+0x1ca>
    2590:	91 e0       	ldi	r25, 0x01	; 1

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2592:	0e bd       	out	0x2e, r16	; 46
	while( !(SPSR & _BV(SPIF)) );
    2594:	0d b4       	in	r0, 0x2d	; 45
    2596:	07 fe       	sbrs	r0, 7
    2598:	fd cf       	rjmp	.-6      	; 0x2594 <sd_initcard+0x1cc>
	retval=SPDR;
    259a:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    259c:	0e bd       	out	0x2e, r16	; 46
	while( !(SPSR & _BV(SPIF)) );
    259e:	0d b4       	in	r0, 0x2d	; 45
    25a0:	07 fe       	sbrs	r0, 7
    25a2:	fd cf       	rjmp	.-6      	; 0x259e <sd_initcard+0x1d6>
	retval=SPDR;
    25a4:	8e b5       	in	r24, 0x2e	; 46
			finished=TRUE;
			success=FALSE;
		};
		transfer(0xFF);
		transfer(0xFF);		//additional clocks before de-select
		SS_PORT |=_BV(SS_BIT);	//de-select
    25a6:	5f 9a       	sbi	0x0b, 7	; 11
		
		//CMD41
		if(!finished)
    25a8:	99 23       	and	r25, r25
    25aa:	41 f5       	brne	.+80     	; 0x25fc <sd_initcard+0x234>
		{
			SS_PORT &=~_BV(SS_BIT);	//select
    25ac:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    25ae:	1e bd       	out	0x2e, r17	; 46
	while( !(SPSR & _BV(SPIF)) );
    25b0:	0d b4       	in	r0, 0x2d	; 45
    25b2:	07 fe       	sbrs	r0, 7
    25b4:	fd cf       	rjmp	.-6      	; 0x25b0 <sd_initcard+0x1e8>
	retval=SPDR;
    25b6:	8e b5       	in	r24, 0x2e	; 46
		//CMD41
		if(!finished)
		{
			SS_PORT &=~_BV(SS_BIT);	//select
			transfer(41 | 0x40);	//CMD41
			transfer_long(0x40000000);	//?? unknown parameter??
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e4       	ldi	r25, 0x40	; 64
    25c0:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    25c4:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    25c6:	0d b4       	in	r0, 0x2d	; 45
    25c8:	07 fe       	sbrs	r0, 7
    25ca:	fd cf       	rjmp	.-6      	; 0x25c6 <sd_initcard+0x1fe>
	retval=SPDR;
    25cc:	8e b5       	in	r24, 0x2e	; 46
		{
			SS_PORT &=~_BV(SS_BIT);	//select
			transfer(41 | 0x40);	//CMD41
			transfer_long(0x40000000);	//?? unknown parameter??
			transfer(0x00);			//checksum
			response=response_r1();			
    25ce:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    25d2:	98 2f       	mov	r25, r24

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    25d4:	0e bd       	out	0x2e, r16	; 46
	while( !(SPSR & _BV(SPIF)) );
    25d6:	0d b4       	in	r0, 0x2d	; 45
    25d8:	07 fe       	sbrs	r0, 7
    25da:	fd cf       	rjmp	.-6      	; 0x25d6 <sd_initcard+0x20e>
	retval=SPDR;
    25dc:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    25de:	0e bd       	out	0x2e, r16	; 46
	while( !(SPSR & _BV(SPIF)) );
    25e0:	0d b4       	in	r0, 0x2d	; 45
    25e2:	07 fe       	sbrs	r0, 7
    25e4:	fd cf       	rjmp	.-6      	; 0x25e0 <sd_initcard+0x218>
	retval=SPDR;
    25e6:	8e b5       	in	r24, 0x2e	; 46
			transfer_long(0x40000000);	//?? unknown parameter??
			transfer(0x00);			//checksum
			response=response_r1();			
			transfer(0xFF);
			transfer(0xFF);		//additional clocks before de-select
			SS_PORT |=_BV(SS_BIT);	//de-select
    25e8:	5f 9a       	sbi	0x0b, 7	; 11
			
			if((response & ~_BV(R1_IDLE)) != 0)	//if any error bits are set
    25ea:	89 2f       	mov	r24, r25
    25ec:	8e 7f       	andi	r24, 0xFE	; 254
    25ee:	31 f4       	brne	.+12     	; 0x25fc <sd_initcard+0x234>
			{
				success=FALSE;
				finished=TRUE;
			}
			else if(response==0)	//if busy bit is clear
    25f0:	99 23       	and	r25, r25
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <sd_initcard+0x22e>
    25f4:	ee c0       	rjmp	.+476    	; 0x27d2 <sd_initcard+0x40a>
			};
		};
		
		if(!finished)
		{
			retry--;
    25f6:	21 97       	sbiw	r28, 0x01	; 1
			if(retry==0)
    25f8:	09 f0       	breq	.+2      	; 0x25fc <sd_initcard+0x234>
    25fa:	b4 cf       	rjmp	.-152    	; 0x2564 <sd_initcard+0x19c>
		};
		
	}while(!finished);
	
	if(!success)
		DEBUG_P(PSTR("SD COMMAND INITIALIZE FAILED.\r\n"));
    25fc:	80 91 7a 02 	lds	r24, 0x027A
    2600:	90 91 7b 02 	lds	r25, 0x027B
    2604:	6d ef       	ldi	r22, 0xFD	; 253
    2606:	75 e0       	ldi	r23, 0x05	; 5
    2608:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    260c:	00 e0       	ldi	r16, 0x00	; 0
    260e:	bd c0       	rjmp	.+378    	; 0x278a <sd_initcard+0x3c2>
{
	char success=FALSE;
	unsigned long templong;
	int tempint;
	
	DEBUG_P(PSTR("SD COMMAND READ OCR\r\n"));
    2610:	80 91 7a 02 	lds	r24, 0x027A
    2614:	90 91 7b 02 	lds	r25, 0x027B
    2618:	67 e7       	ldi	r22, 0x77	; 119
    261a:	76 e0       	ldi	r23, 0x06	; 6
    261c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	SS_PORT &=~_BV(SS_BIT);	//select
    2620:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2622:	8a e7       	ldi	r24, 0x7A	; 122
    2624:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2626:	0d b4       	in	r0, 0x2d	; 45
    2628:	07 fe       	sbrs	r0, 7
    262a:	fd cf       	rjmp	.-6      	; 0x2626 <sd_initcard+0x25e>
	retval=SPDR;
    262c:	8e b5       	in	r24, 0x2e	; 46
	int tempint;
	
	DEBUG_P(PSTR("SD COMMAND READ OCR\r\n"));
	SS_PORT &=~_BV(SS_BIT);	//select
	transfer(58 | 0x40);	//CMD58
	transfer_long(0x00000000);	//0 stuff bits
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    263a:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    263c:	0d b4       	in	r0, 0x2d	; 45
    263e:	07 fe       	sbrs	r0, 7
    2640:	fd cf       	rjmp	.-6      	; 0x263c <sd_initcard+0x274>
	retval=SPDR;
    2642:	8e b5       	in	r24, 0x2e	; 46
	SS_PORT &=~_BV(SS_BIT);	//select
	transfer(58 | 0x40);	//CMD58
	transfer_long(0x00000000);	//0 stuff bits
	transfer(0x00);			//checksum

	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
    2644:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    2648:	8e 7f       	andi	r24, 0xFE	; 254
    264a:	51 f4       	brne	.+20     	; 0x2660 <sd_initcard+0x298>
	{
		success=TRUE;
		*ocr=transfer_long(0xFFFFFFFF);	
    264c:	6f ef       	ldi	r22, 0xFF	; 255
    264e:	7f ef       	ldi	r23, 0xFF	; 255
    2650:	8f ef       	ldi	r24, 0xFF	; 255
    2652:	9f ef       	ldi	r25, 0xFF	; 255
    2654:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>
    2658:	6b 01       	movw	r12, r22
    265a:	7c 01       	movw	r14, r24
    265c:	01 e0       	ldi	r16, 0x01	; 1
    265e:	0a c0       	rjmp	.+20     	; 0x2674 <sd_initcard+0x2ac>
	}
	else
		transfer_long(0xFFFFFFFF);
    2660:	6f ef       	ldi	r22, 0xFF	; 255
    2662:	7f ef       	ldi	r23, 0xFF	; 255
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	9f ef       	ldi	r25, 0xFF	; 255
    2668:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>
    266c:	00 e0       	ldi	r16, 0x00	; 0
    266e:	cc 24       	eor	r12, r12
    2670:	dd 24       	eor	r13, r13
    2672:	76 01       	movw	r14, r12

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2674:	8f ef       	ldi	r24, 0xFF	; 255
    2676:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2678:	0d b4       	in	r0, 0x2d	; 45
    267a:	07 fe       	sbrs	r0, 7
    267c:	fd cf       	rjmp	.-6      	; 0x2678 <sd_initcard+0x2b0>
	retval=SPDR;
    267e:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    2684:	0d b4       	in	r0, 0x2d	; 45
    2686:	07 fe       	sbrs	r0, 7
    2688:	fd cf       	rjmp	.-6      	; 0x2684 <sd_initcard+0x2bc>
	retval=SPDR;
    268a:	8e b5       	in	r24, 0x2e	; 46
	else
		transfer_long(0xFFFFFFFF);

	transfer(0xFF);		//additional clocks before de-select
	transfer(0xFF);
	SS_PORT |=_BV(SS_BIT);	//de-select	
    268c:	5f 9a       	sbi	0x0b, 7	; 11
    268e:	20 91 7a 02 	lds	r18, 0x027A
    2692:	30 91 7b 02 	lds	r19, 0x027B

	if(!success)
    2696:	00 23       	and	r16, r16
    2698:	31 f4       	brne	.+12     	; 0x26a6 <sd_initcard+0x2de>
		DEBUG_P(PSTR("SD COMMAND READ OCR FAILED.\r\n"));
    269a:	c9 01       	movw	r24, r18
    269c:	69 e5       	ldi	r22, 0x59	; 89
    269e:	76 e0       	ldi	r23, 0x06	; 6
    26a0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    26a4:	72 c0       	rjmp	.+228    	; 0x278a <sd_initcard+0x3c2>
	else
	{
		DEBUG_P(PSTR("SD COMMAND OCR: SDHC="));
    26a6:	c9 01       	movw	r24, r18
    26a8:	63 e4       	ldi	r22, 0x43	; 67
    26aa:	76 e0       	ldi	r23, 0x06	; 6
    26ac:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    26b0:	20 91 7a 02 	lds	r18, 0x027A
    26b4:	30 91 7b 02 	lds	r19, 0x027B
		if(*ocr & (1ul<<OCR_SDHC))
    26b8:	81 2c       	mov	r8, r1
    26ba:	91 2c       	mov	r9, r1
    26bc:	a1 2c       	mov	r10, r1
    26be:	00 e4       	ldi	r16, 0x40	; 64
    26c0:	b0 2e       	mov	r11, r16
    26c2:	8c 20       	and	r8, r12
    26c4:	9d 20       	and	r9, r13
    26c6:	ae 20       	and	r10, r14
    26c8:	bf 20       	and	r11, r15
    26ca:	f6 fe       	sbrs	r15, 6
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <sd_initcard+0x30e>
			DEBUG_P(PSTR("YES  "));
    26ce:	c9 01       	movw	r24, r18
    26d0:	6d e3       	ldi	r22, 0x3D	; 61
    26d2:	76 e0       	ldi	r23, 0x06	; 6
    26d4:	03 c0       	rjmp	.+6      	; 0x26dc <sd_initcard+0x314>
		else
			DEBUG_P(PSTR("NO  "));
    26d6:	c9 01       	movw	r24, r18
    26d8:	68 e3       	ldi	r22, 0x38	; 56
    26da:	76 e0       	ldi	r23, 0x06	; 6
    26dc:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		
		templong=*ocr;
		templong>>=15;
    26e0:	1f e0       	ldi	r17, 0x0F	; 15
    26e2:	f6 94       	lsr	r15
    26e4:	e7 94       	ror	r14
    26e6:	d7 94       	ror	r13
    26e8:	c7 94       	ror	r12
    26ea:	1a 95       	dec	r17
    26ec:	d1 f7       	brne	.-12     	; 0x26e2 <sd_initcard+0x31a>
		tempint=27;		
		while(!templong & 1)
    26ee:	c1 14       	cp	r12, r1
    26f0:	d1 04       	cpc	r13, r1
    26f2:	e1 04       	cpc	r14, r1
    26f4:	f1 04       	cpc	r15, r1
    26f6:	09 f4       	brne	.+2      	; 0x26fa <sd_initcard+0x332>
    26f8:	ff cf       	rjmp	.-2      	; 0x26f8 <sd_initcard+0x330>
		{
			templong>>=1;
			tempint++;
		};
		DEBUG_INT(tempint);
    26fa:	00 91 7a 02 	lds	r16, 0x027A
    26fe:	10 91 7b 02 	lds	r17, 0x027B
    2702:	8b e1       	ldi	r24, 0x1B	; 27
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	6c e7       	ldi	r22, 0x7C	; 124
    2708:	72 e0       	ldi	r23, 0x02	; 2
    270a:	4a e0       	ldi	r20, 0x0A	; 10
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0e 94 0a 41 	call	0x8214	; 0x8214 <itoa>
    2712:	bc 01       	movw	r22, r24
    2714:	c8 01       	movw	r24, r16
    2716:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_CHAR('-');
    271a:	80 91 7a 02 	lds	r24, 0x027A
    271e:	90 91 7b 02 	lds	r25, 0x027B
    2722:	6d e2       	ldi	r22, 0x2D	; 45
    2724:	0e 94 1c 3b 	call	0x7638	; 0x7638 <fifo_write_char>
    2728:	2b e1       	ldi	r18, 0x1B	; 27
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	06 c0       	rjmp	.+12     	; 0x273a <sd_initcard+0x372>
		
		while(templong & 1 && tempint <36)
		{
			templong>>=1;
    272e:	f6 94       	lsr	r15
    2730:	e7 94       	ror	r14
    2732:	d7 94       	ror	r13
    2734:	c7 94       	ror	r12
			tempint++;
    2736:	2f 5f       	subi	r18, 0xFF	; 255
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
			tempint++;
		};
		DEBUG_INT(tempint);
		DEBUG_CHAR('-');
		
		while(templong & 1 && tempint <36)
    273a:	c6 01       	movw	r24, r12
    273c:	81 70       	andi	r24, 0x01	; 1
    273e:	90 70       	andi	r25, 0x00	; 0
    2740:	88 23       	and	r24, r24
    2742:	19 f0       	breq	.+6      	; 0x274a <sd_initcard+0x382>
    2744:	24 32       	cpi	r18, 0x24	; 36
    2746:	31 05       	cpc	r19, r1
    2748:	91 f7       	brne	.-28     	; 0x272e <sd_initcard+0x366>
		{
			templong>>=1;
			tempint++;
		};
		DEBUG_INT(tempint);
    274a:	00 91 7a 02 	lds	r16, 0x027A
    274e:	10 91 7b 02 	lds	r17, 0x027B
    2752:	c9 01       	movw	r24, r18
    2754:	6c e7       	ldi	r22, 0x7C	; 124
    2756:	72 e0       	ldi	r23, 0x02	; 2
    2758:	4a e0       	ldi	r20, 0x0A	; 10
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	0e 94 0a 41 	call	0x8214	; 0x8214 <itoa>
    2760:	bc 01       	movw	r22, r24
    2762:	c8 01       	movw	r24, r16
    2764:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    2768:	80 91 7a 02 	lds	r24, 0x027A
    276c:	90 91 7b 02 	lds	r25, 0x027B
    2770:	65 e3       	ldi	r22, 0x35	; 53
    2772:	76 e0       	ldi	r23, 0x06	; 6
    2774:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	success=command_initialize();

	if(success && sd_version==2)
	{
		success=command_ocr_read(&ocr);
		if(success && (ocr & (1ul<<OCR_SDHC)))
    2778:	81 14       	cp	r8, r1
    277a:	91 04       	cpc	r9, r1
    277c:	a1 04       	cpc	r10, r1
    277e:	b1 04       	cpc	r11, r1
    2780:	19 f0       	breq	.+6      	; 0x2788 <sd_initcard+0x3c0>
			sd_sdhc=TRUE;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 79 02 	sts	0x0279, r24
    2788:	01 e0       	ldi	r16, 0x01	; 1
	};
	
	if(sd_version==1)
    278a:	80 91 78 02 	lds	r24, 0x0278
    278e:	20 91 7a 02 	lds	r18, 0x027A
    2792:	30 91 7b 02 	lds	r19, 0x027B
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	21 f4       	brne	.+8      	; 0x27a2 <sd_initcard+0x3da>
		DEBUG_P(PSTR("SD Version 1.xx\r\n"));
    279a:	c9 01       	movw	r24, r18
    279c:	6f e7       	ldi	r22, 0x7F	; 127
    279e:	75 e0       	ldi	r23, 0x05	; 5
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <sd_initcard+0x3e0>
	else
		DEBUG_P(PSTR("SD Version 2.00 or later\r\n"));
    27a2:	c9 01       	movw	r24, r18
    27a4:	64 e6       	ldi	r22, 0x64	; 100
    27a6:	75 e0       	ldi	r23, 0x05	; 5
    27a8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	
	if(success)
    27ac:	00 23       	and	r16, r16
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <sd_initcard+0x3ee>
		SPCR &=~(_BV(SPR0)+_BV(SPR1));	//fosc/2
    27b0:	8c b5       	in	r24, 0x2c	; 44
    27b2:	8c 7f       	andi	r24, 0xFC	; 252
    27b4:	8c bd       	out	0x2c, r24	; 44

	return success;
}
    27b6:	80 2f       	mov	r24, r16
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	bf 90       	pop	r11
    27ca:	af 90       	pop	r10
    27cc:	9f 90       	pop	r9
    27ce:	8f 90       	pop	r8
    27d0:	08 95       	ret
		DEBUG_P(PSTR("SD Version 1.xx\r\n"));
	else
		DEBUG_P(PSTR("SD Version 2.00 or later\r\n"));
	
	if(success)
		SPCR &=~(_BV(SPR0)+_BV(SPR1));	//fosc/2
    27d2:	01 e0       	ldi	r16, 0x01	; 1
			sd_version=1;
	};

	success=command_initialize();

	if(success && sd_version==2)
    27d4:	80 91 78 02 	lds	r24, 0x0278
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	b9 f6       	brne	.-82     	; 0x278a <sd_initcard+0x3c2>
    27dc:	19 cf       	rjmp	.-462    	; 0x2610 <sd_initcard+0x248>

000027de <sd_block_write>:

	return success;	
}

char sd_block_write(char* buffer, unsigned long blockadd)
{
    27de:	2f 92       	push	r2
    27e0:	3f 92       	push	r3
    27e2:	4f 92       	push	r4
    27e4:	5f 92       	push	r5
    27e6:	6f 92       	push	r6
    27e8:	7f 92       	push	r7
    27ea:	8f 92       	push	r8
    27ec:	9f 92       	push	r9
    27ee:	af 92       	push	r10
    27f0:	bf 92       	push	r11
    27f2:	cf 92       	push	r12
    27f4:	df 92       	push	r13
    27f6:	ef 92       	push	r14
    27f8:	ff 92       	push	r15
    27fa:	0f 93       	push	r16
    27fc:	1f 93       	push	r17
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <sd_block_write+0x26>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <sd_block_write+0x28>
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	9a 83       	std	Y+2, r25	; 0x02
	char error=0;
	int tempint;
	long templong;

	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
		blockadd<<=9;
    280e:	db 01       	movw	r26, r22
    2810:	ca 01       	movw	r24, r20
    2812:	39 e0       	ldi	r19, 0x09	; 9
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	aa 1f       	adc	r26, r26
    281a:	bb 1f       	adc	r27, r27
    281c:	3a 95       	dec	r19
    281e:	d1 f7       	brne	.-12     	; 0x2814 <sd_block_write+0x36>
    2820:	23 e0       	ldi	r18, 0x03	; 3
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3c 83       	std	Y+4, r19	; 0x04
    2826:	2b 83       	std	Y+3, r18	; 0x03
	char success=FALSE;
	char error=0;
	int tempint;
	long templong;

	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
    2828:	28 2e       	mov	r2, r24
    282a:	49 2e       	mov	r4, r25
    282c:	3a 2e       	mov	r3, r26
    282e:	6b 2e       	mov	r6, r27
    2830:	54 2e       	mov	r5, r20
    2832:	95 2e       	mov	r9, r21
    2834:	86 2e       	mov	r8, r22
    2836:	77 2e       	mov	r7, r23

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2838:	ff 24       	eor	r15, r15
    283a:	fa 94       	dec	r15
	char success=FALSE;
	char error=0;
	int tempint;
	long templong;

	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
    283c:	80 91 79 02 	lds	r24, 0x0279
    2840:	88 23       	and	r24, r24
    2842:	29 f0       	breq	.+10     	; 0x284e <sd_block_write+0x70>
    2844:	a5 2c       	mov	r10, r5
    2846:	b9 2c       	mov	r11, r9
    2848:	c8 2c       	mov	r12, r8
    284a:	d7 2c       	mov	r13, r7
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <sd_block_write+0x78>
    284e:	a2 2c       	mov	r10, r2
    2850:	b4 2c       	mov	r11, r4
    2852:	c3 2c       	mov	r12, r3
    2854:	d6 2c       	mov	r13, r6
		blockadd<<=9;

	SS_PORT &=~_BV(SS_BIT);		//select
    2856:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2858:	38 e5       	ldi	r19, 0x58	; 88
    285a:	3e bd       	out	0x2e, r19	; 46
	while( !(SPSR & _BV(SPIF)) );
    285c:	0d b4       	in	r0, 0x2d	; 45
    285e:	07 fe       	sbrs	r0, 7
    2860:	fd cf       	rjmp	.-6      	; 0x285c <sd_block_write+0x7e>
	retval=SPDR;
    2862:	8e b5       	in	r24, 0x2e	; 46
	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
		blockadd<<=9;

	SS_PORT &=~_BV(SS_BIT);		//select
	transfer(24 | 0x40);		//CMD24 write single block
	transfer_long(blockadd);	//
    2864:	b5 01       	movw	r22, r10
    2866:	c6 01       	movw	r24, r12
    2868:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    286c:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    286e:	0d b4       	in	r0, 0x2d	; 45
    2870:	07 fe       	sbrs	r0, 7
    2872:	fd cf       	rjmp	.-6      	; 0x286e <sd_block_write+0x90>
	retval=SPDR;
    2874:	8e b5       	in	r24, 0x2e	; 46
	SS_PORT &=~_BV(SS_BIT);		//select
	transfer(24 | 0x40);		//CMD24 write single block
	transfer_long(blockadd);	//
	transfer(0x00);				//checksum

	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
    2876:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>
    287a:	8e 7f       	andi	r24, 0xFE	; 254
    287c:	21 f0       	breq	.+8      	; 0x2886 <sd_block_write+0xa8>
    287e:	ee 24       	eor	r14, r14
    2880:	e3 94       	inc	r14
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	02 c0       	rjmp	.+4      	; 0x288a <sd_block_write+0xac>
    2886:	ee 24       	eor	r14, r14
    2888:	81 e0       	ldi	r24, 0x01	; 1

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    288a:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    288c:	0d b4       	in	r0, 0x2d	; 45
    288e:	07 fe       	sbrs	r0, 7
    2890:	fd cf       	rjmp	.-6      	; 0x288c <sd_block_write+0xae>
	retval=SPDR;
    2892:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2894:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2896:	0d b4       	in	r0, 0x2d	; 45
    2898:	07 fe       	sbrs	r0, 7
    289a:	fd cf       	rjmp	.-6      	; 0x2896 <sd_block_write+0xb8>
	retval=SPDR;
    289c:	9e b5       	in	r25, 0x2e	; 46
	else
		error=1;

	transfer(0xFF);
	transfer(0xFF);		//additional clocks before de-select
	SS_PORT |=_BV(SS_BIT);		//de-select
    289e:	5f 9a       	sbi	0x0b, 7	; 11

	if(success)
    28a0:	88 23       	and	r24, r24
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <sd_block_write+0xc8>
    28a4:	59 c0       	rjmp	.+178    	; 0x2958 <sd_block_write+0x17a>
	{
		SS_PORT &=~_BV(SS_BIT);		//select
    28a6:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    28a8:	8e ef       	ldi	r24, 0xFE	; 254
    28aa:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    28ac:	0d b4       	in	r0, 0x2d	; 45
    28ae:	07 fe       	sbrs	r0, 7
    28b0:	fd cf       	rjmp	.-6      	; 0x28ac <sd_block_write+0xce>
	retval=SPDR;
    28b2:	8e b5       	in	r24, 0x2e	; 46
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	9c 01       	movw	r18, r24
    28ba:	f9 01       	movw	r30, r18
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	32 e0       	ldi	r19, 0x02	; 2
    28c0:	07 c0       	rjmp	.+14     	; 0x28d0 <sd_block_write+0xf2>
		//write block
		tempint=512;
		
		while(tempint--)
		{
			transfer(*buffer);
    28c2:	80 81       	ld	r24, Z

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    28c4:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    28c6:	0d b4       	in	r0, 0x2d	; 45
    28c8:	07 fe       	sbrs	r0, 7
    28ca:	fd cf       	rjmp	.-6      	; 0x28c6 <sd_block_write+0xe8>
	retval=SPDR;
    28cc:	8e b5       	in	r24, 0x2e	; 46
		tempint=512;
		
		while(tempint--)
		{
			transfer(*buffer);
			buffer++;
    28ce:	31 96       	adiw	r30, 0x01	; 1
		transfer(0xFE);				//send start token

		//write block
		tempint=512;
		
		while(tempint--)
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	30 40       	sbci	r19, 0x00	; 0
    28d4:	9f ef       	ldi	r25, 0xFF	; 255
    28d6:	2f 3f       	cpi	r18, 0xFF	; 255
    28d8:	39 07       	cpc	r19, r25
    28da:	99 f7       	brne	.-26     	; 0x28c2 <sd_block_write+0xe4>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    28dc:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    28de:	0d b4       	in	r0, 0x2d	; 45
    28e0:	07 fe       	sbrs	r0, 7
    28e2:	fd cf       	rjmp	.-6      	; 0x28de <sd_block_write+0x100>
	retval=SPDR;
    28e4:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    28e6:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    28e8:	0d b4       	in	r0, 0x2d	; 45
    28ea:	07 fe       	sbrs	r0, 7
    28ec:	fd cf       	rjmp	.-6      	; 0x28e8 <sd_block_write+0x10a>
	retval=SPDR;
    28ee:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    28f0:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    28f2:	0d b4       	in	r0, 0x2d	; 45
    28f4:	07 fe       	sbrs	r0, 7
    28f6:	fd cf       	rjmp	.-6      	; 0x28f2 <sd_block_write+0x114>
	retval=SPDR;
    28f8:	8e b5       	in	r24, 0x2e	; 46
		//send dummy CRC
		transfer(0xFF);
		transfer(0xFF);
		
		//if transfer not successful
		if((transfer(0xFF) & 0x1F) != 0x05)
    28fa:	8f 71       	andi	r24, 0x1F	; 31
    28fc:	85 30       	cpi	r24, 0x05	; 5
    28fe:	19 f0       	breq	.+6      	; 0x2906 <sd_block_write+0x128>
    2900:	22 e0       	ldi	r18, 0x02	; 2
    2902:	e2 2e       	mov	r14, r18
    2904:	1a c0       	rjmp	.+52     	; 0x293a <sd_block_write+0x15c>
    2906:	20 e4       	ldi	r18, 0x40	; 64
    2908:	32 e4       	ldi	r19, 0x42	; 66
    290a:	4f e0       	ldi	r20, 0x0F	; 15
    290c:	50 e0       	ldi	r21, 0x00	; 0

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    290e:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2910:	0d b4       	in	r0, 0x2d	; 45
    2912:	07 fe       	sbrs	r0, 7
    2914:	fd cf       	rjmp	.-6      	; 0x2910 <sd_block_write+0x132>
	retval=SPDR;
    2916:	8e b5       	in	r24, 0x2e	; 46
		}
		else
		{
			//wait for write to complete
			templong=1000000ul;
			while(transfer(0xFF)==0x00 && --templong);
    2918:	88 23       	and	r24, r24
    291a:	31 f4       	brne	.+12     	; 0x2928 <sd_block_write+0x14a>
    291c:	21 50       	subi	r18, 0x01	; 1
    291e:	30 40       	sbci	r19, 0x00	; 0
    2920:	40 40       	sbci	r20, 0x00	; 0
    2922:	50 40       	sbci	r21, 0x00	; 0
    2924:	a1 f7       	brne	.-24     	; 0x290e <sd_block_write+0x130>
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <sd_block_write+0x158>
			if(!templong)
    2928:	21 15       	cp	r18, r1
    292a:	31 05       	cpc	r19, r1
    292c:	41 05       	cpc	r20, r1
    292e:	51 05       	cpc	r21, r1
    2930:	11 f0       	breq	.+4      	; 0x2936 <sd_block_write+0x158>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	03 c0       	rjmp	.+6      	; 0x293c <sd_block_write+0x15e>
    2936:	93 e0       	ldi	r25, 0x03	; 3
    2938:	e9 2e       	mov	r14, r25
    293a:	80 e0       	ldi	r24, 0x00	; 0

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    293c:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    293e:	0d b4       	in	r0, 0x2d	; 45
    2940:	07 fe       	sbrs	r0, 7
    2942:	fd cf       	rjmp	.-6      	; 0x293e <sd_block_write+0x160>
	retval=SPDR;
    2944:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2946:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2948:	0d b4       	in	r0, 0x2d	; 45
    294a:	07 fe       	sbrs	r0, 7
    294c:	fd cf       	rjmp	.-6      	; 0x2948 <sd_block_write+0x16a>
	retval=SPDR;
    294e:	9e b5       	in	r25, 0x2e	; 46
			};
		};
		
		transfer(0xFF);
		transfer(0xFF);		//additional clocks before de-select
		SS_PORT |=_BV(SS_BIT);		//de-select
    2950:	5f 9a       	sbi	0x0b, 7	; 11
	};
	
	if(!success)
    2952:	88 23       	and	r24, r24
    2954:	09 f0       	breq	.+2      	; 0x2958 <sd_block_write+0x17a>
    2956:	3f c0       	rjmp	.+126    	; 0x29d6 <sd_block_write+0x1f8>
	{
		DEBUG_P(PSTR("SD COMMAND WRITE BLOCK FAILED "));
    2958:	80 91 7a 02 	lds	r24, 0x027A
    295c:	90 91 7b 02 	lds	r25, 0x027B
    2960:	6f ee       	ldi	r22, 0xEF	; 239
    2962:	74 e0       	ldi	r23, 0x04	; 4
    2964:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("@SECTOR "));
    2968:	80 91 7a 02 	lds	r24, 0x027A
    296c:	90 91 7b 02 	lds	r25, 0x027B
    2970:	66 ee       	ldi	r22, 0xE6	; 230
    2972:	74 e0       	ldi	r23, 0x04	; 4
    2974:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_LONG(blockadd);
    2978:	00 91 7a 02 	lds	r16, 0x027A
    297c:	10 91 7b 02 	lds	r17, 0x027B
    2980:	b5 01       	movw	r22, r10
    2982:	c6 01       	movw	r24, r12
    2984:	4c e7       	ldi	r20, 0x7C	; 124
    2986:	52 e0       	ldi	r21, 0x02	; 2
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    2990:	bc 01       	movw	r22, r24
    2992:	c8 01       	movw	r24, r16
    2994:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" err "));
    2998:	80 91 7a 02 	lds	r24, 0x027A
    299c:	90 91 7b 02 	lds	r25, 0x027B
    29a0:	60 ee       	ldi	r22, 0xE0	; 224
    29a2:	74 e0       	ldi	r23, 0x04	; 4
    29a4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_INT((int)error);
    29a8:	00 91 7a 02 	lds	r16, 0x027A
    29ac:	10 91 7b 02 	lds	r17, 0x027B
    29b0:	8e 2d       	mov	r24, r14
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	6c e7       	ldi	r22, 0x7C	; 124
    29b6:	72 e0       	ldi	r23, 0x02	; 2
    29b8:	4a e0       	ldi	r20, 0x0A	; 10
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	0e 94 0a 41 	call	0x8214	; 0x8214 <itoa>
    29c0:	bc 01       	movw	r22, r24
    29c2:	c8 01       	movw	r24, r16
    29c4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    29c8:	80 91 7a 02 	lds	r24, 0x027A
    29cc:	90 91 7b 02 	lds	r25, 0x027B
    29d0:	6d ed       	ldi	r22, 0xDD	; 221
    29d2:	74 e0       	ldi	r23, 0x04	; 4
    29d4:	9f c0       	rjmp	.+318    	; 0x2b14 <sd_block_write+0x336>
static char command_block_verify(char* buffer, unsigned long blockadd)
{
	char success=FALSE;
	int tempint;

	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
    29d6:	80 91 79 02 	lds	r24, 0x0279
    29da:	88 23       	and	r24, r24
    29dc:	29 f0       	breq	.+10     	; 0x29e8 <sd_block_write+0x20a>
    29de:	b5 2c       	mov	r11, r5
    29e0:	c9 2c       	mov	r12, r9
    29e2:	d8 2c       	mov	r13, r8
    29e4:	e7 2c       	mov	r14, r7
    29e6:	04 c0       	rjmp	.+8      	; 0x29f0 <sd_block_write+0x212>
    29e8:	b2 2c       	mov	r11, r2
    29ea:	c4 2c       	mov	r12, r4
    29ec:	d3 2c       	mov	r13, r3
    29ee:	e6 2c       	mov	r14, r6
		blockadd<<=9;

	SS_PORT &=~_BV(SS_BIT);		//select
    29f0:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    29f2:	81 e5       	ldi	r24, 0x51	; 81
    29f4:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & _BV(SPIF)) );
    29f6:	0d b4       	in	r0, 0x2d	; 45
    29f8:	07 fe       	sbrs	r0, 7
    29fa:	fd cf       	rjmp	.-6      	; 0x29f6 <sd_block_write+0x218>
	retval=SPDR;
    29fc:	8e b5       	in	r24, 0x2e	; 46
	if(sd_sdhc==FALSE)		//if not SDHC, convert block address to byte address
		blockadd<<=9;

	SS_PORT &=~_BV(SS_BIT);		//select
	transfer(17 | 0x40);		//CMD17 read single block
	transfer_long(blockadd);	//length
    29fe:	6b 2d       	mov	r22, r11
    2a00:	7c 2d       	mov	r23, r12
    2a02:	8d 2d       	mov	r24, r13
    2a04:	9e 2d       	mov	r25, r14
    2a06:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a0a:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a0c:	0d b4       	in	r0, 0x2d	; 45
    2a0e:	07 fe       	sbrs	r0, 7
    2a10:	fd cf       	rjmp	.-6      	; 0x2a0c <sd_block_write+0x22e>
	retval=SPDR;
    2a12:	8e b5       	in	r24, 0x2e	; 46
	SS_PORT &=~_BV(SS_BIT);		//select
	transfer(17 | 0x40);		//CMD17 read single block
	transfer_long(blockadd);	//length
	transfer(0x00);				//checksum

	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
    2a14:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a18:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a1a:	0d b4       	in	r0, 0x2d	; 45
    2a1c:	07 fe       	sbrs	r0, 7
    2a1e:	fd cf       	rjmp	.-6      	; 0x2a1a <sd_block_write+0x23c>
	retval=SPDR;
    2a20:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a22:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a24:	0d b4       	in	r0, 0x2d	; 45
    2a26:	07 fe       	sbrs	r0, 7
    2a28:	fd cf       	rjmp	.-6      	; 0x2a24 <sd_block_write+0x246>
	retval=SPDR;
    2a2a:	9e b5       	in	r25, 0x2e	; 46
	if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
		success=TRUE;

	transfer(0xFF);
	transfer(0xFF);		//additional clocks before de-select
	SS_PORT |=_BV(SS_BIT);		//de-select
    2a2c:	5f 9a       	sbi	0x0b, 7	; 11

	if(success)
    2a2e:	8e 7f       	andi	r24, 0xFE	; 254
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <sd_block_write+0x256>
    2a32:	48 c0       	rjmp	.+144    	; 0x2ac4 <sd_block_write+0x2e6>
	{
		SS_PORT &=~_BV(SS_BIT);		//select
    2a34:	5f 98       	cbi	0x0b, 7	; 11
    2a36:	20 e1       	ldi	r18, 0x10	; 16
    2a38:	37 e2       	ldi	r19, 0x27	; 39

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a3a:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a3c:	0d b4       	in	r0, 0x2d	; 45
    2a3e:	07 fe       	sbrs	r0, 7
    2a40:	fd cf       	rjmp	.-6      	; 0x2a3c <sd_block_write+0x25e>
	retval=SPDR;
    2a42:	8e b5       	in	r24, 0x2e	; 46
		//wait for start token
		tempint=10000;
		success=FALSE;
		do
		{
			if(transfer(0xFF)==0xFE)
    2a44:	8e 3f       	cpi	r24, 0xFE	; 254
    2a46:	11 f4       	brne	.+4      	; 0x2a4c <sd_block_write+0x26e>
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <sd_block_write+0x274>
				success=TRUE;
			else
				tempint--;
    2a4c:	21 50       	subi	r18, 0x01	; 1
    2a4e:	30 40       	sbci	r19, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
		}while(tempint && !success);
    2a52:	21 15       	cp	r18, r1
    2a54:	31 05       	cpc	r19, r1
    2a56:	19 f0       	breq	.+6      	; 0x2a5e <sd_block_write+0x280>
    2a58:	99 23       	and	r25, r25
    2a5a:	79 f3       	breq	.-34     	; 0x2a3a <sd_block_write+0x25c>
    2a5c:	0d c0       	rjmp	.+26     	; 0x2a78 <sd_block_write+0x29a>
		
		if(success)
    2a5e:	99 23       	and	r25, r25
    2a60:	c1 f0       	breq	.+48     	; 0x2a92 <sd_block_write+0x2b4>
    2a62:	0a c0       	rjmp	.+20     	; 0x2a78 <sd_block_write+0x29a>
			//read block
			tempint=512;
			
			while(tempint--)
			{
				if(*buffer != transfer(0xFF))
    2a64:	40 81       	ld	r20, Z

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a66:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a68:	0d b4       	in	r0, 0x2d	; 45
    2a6a:	07 fe       	sbrs	r0, 7
    2a6c:	fd cf       	rjmp	.-6      	; 0x2a68 <sd_block_write+0x28a>
	retval=SPDR;
    2a6e:	8e b5       	in	r24, 0x2e	; 46
			//read block
			tempint=512;
			
			while(tempint--)
			{
				if(*buffer != transfer(0xFF))
    2a70:	48 13       	cpse	r20, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
					success=FALSE;
				buffer++;
    2a74:	31 96       	adiw	r30, 0x01	; 1
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <sd_block_write+0x2a8>
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	9c 01       	movw	r18, r24
    2a7e:	f9 01       	movw	r30, r18
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	32 e0       	ldi	r19, 0x02	; 2
    2a84:	91 e0       	ldi	r25, 0x01	; 1
		if(success)
		{
			//read block
			tempint=512;
			
			while(tempint--)
    2a86:	21 50       	subi	r18, 0x01	; 1
    2a88:	30 40       	sbci	r19, 0x00	; 0
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	2f 3f       	cpi	r18, 0xFF	; 255
    2a8e:	38 07       	cpc	r19, r24
    2a90:	49 f7       	brne	.-46     	; 0x2a64 <sd_block_write+0x286>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a92:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a94:	0d b4       	in	r0, 0x2d	; 45
    2a96:	07 fe       	sbrs	r0, 7
    2a98:	fd cf       	rjmp	.-6      	; 0x2a94 <sd_block_write+0x2b6>
	retval=SPDR;
    2a9a:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2a9c:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2a9e:	0d b4       	in	r0, 0x2d	; 45
    2aa0:	07 fe       	sbrs	r0, 7
    2aa2:	fd cf       	rjmp	.-6      	; 0x2a9e <sd_block_write+0x2c0>
	retval=SPDR;
    2aa4:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2aa6:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2aa8:	0d b4       	in	r0, 0x2d	; 45
    2aaa:	07 fe       	sbrs	r0, 7
    2aac:	fd cf       	rjmp	.-6      	; 0x2aa8 <sd_block_write+0x2ca>
	retval=SPDR;
    2aae:	8e b5       	in	r24, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2ab0:	fe bc       	out	0x2e, r15	; 46
	while( !(SPSR & _BV(SPIF)) );
    2ab2:	0d b4       	in	r0, 0x2d	; 45
    2ab4:	07 fe       	sbrs	r0, 7
    2ab6:	fd cf       	rjmp	.-6      	; 0x2ab2 <sd_block_write+0x2d4>
	retval=SPDR;
    2ab8:	8e b5       	in	r24, 0x2e	; 46
		transfer(0xFF);		//ignore CRC
		transfer(0xFF);
		
		transfer(0xFF);
		transfer(0xFF);				//additional clocks before de-select
		SS_PORT |=_BV(SS_BIT);		//de-select
    2aba:	5f 9a       	sbi	0x0b, 7	; 11
	};
	
	if(!success)
    2abc:	99 23       	and	r25, r25
    2abe:	11 f0       	breq	.+4      	; 0x2ac4 <sd_block_write+0x2e6>
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	35 c0       	rjmp	.+106    	; 0x2b2e <sd_block_write+0x350>
	{
		DEBUG_P(PSTR("SD COMMAND VERIFY BLOCK FAILED "));
    2ac4:	80 91 7a 02 	lds	r24, 0x027A
    2ac8:	90 91 7b 02 	lds	r25, 0x027B
    2acc:	6a e1       	ldi	r22, 0x1A	; 26
    2ace:	75 e0       	ldi	r23, 0x05	; 5
    2ad0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("@SECTOR "));
    2ad4:	80 91 7a 02 	lds	r24, 0x027A
    2ad8:	90 91 7b 02 	lds	r25, 0x027B
    2adc:	61 e1       	ldi	r22, 0x11	; 17
    2ade:	75 e0       	ldi	r23, 0x05	; 5
    2ae0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_LONG(blockadd);
    2ae4:	00 91 7a 02 	lds	r16, 0x027A
    2ae8:	10 91 7b 02 	lds	r17, 0x027B
    2aec:	6b 2d       	mov	r22, r11
    2aee:	7c 2d       	mov	r23, r12
    2af0:	8d 2d       	mov	r24, r13
    2af2:	9e 2d       	mov	r25, r14
    2af4:	4c e7       	ldi	r20, 0x7C	; 124
    2af6:	52 e0       	ldi	r21, 0x02	; 2
    2af8:	2a e0       	ldi	r18, 0x0A	; 10
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    2b00:	bc 01       	movw	r22, r24
    2b02:	c8 01       	movw	r24, r16
    2b04:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    2b08:	80 91 7a 02 	lds	r24, 0x027A
    2b0c:	90 91 7b 02 	lds	r25, 0x027B
    2b10:	6e e0       	ldi	r22, 0x0E	; 14
    2b12:	75 e0       	ldi	r23, 0x05	; 5
    2b14:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		success=command_block_write(buffer, blockadd);
		if(success)
			success=command_block_verify(buffer, blockadd);
		if(!success)
		{
			sd_initcard();
    2b18:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <sd_initcard>
			retry--;
    2b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b20:	31 97       	sbiw	r30, 0x01	; 1
    2b22:	fc 83       	std	Y+4, r31	; 0x04
    2b24:	eb 83       	std	Y+3, r30	; 0x03
		};
	}while(!success && retry);
    2b26:	ef 2b       	or	r30, r31
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <sd_block_write+0x34e>
    2b2a:	88 ce       	rjmp	.-752    	; 0x283c <sd_block_write+0x5e>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
	
	return success;
}
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	bf 90       	pop	r11
    2b48:	af 90       	pop	r10
    2b4a:	9f 90       	pop	r9
    2b4c:	8f 90       	pop	r8
    2b4e:	7f 90       	pop	r7
    2b50:	6f 90       	pop	r6
    2b52:	5f 90       	pop	r5
    2b54:	4f 90       	pop	r4
    2b56:	3f 90       	pop	r3
    2b58:	2f 90       	pop	r2
    2b5a:	08 95       	ret

00002b5c <sd_block_read>:

	return success;
}

char sd_block_read(char* buffer, unsigned long blockadd)
{
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	ec 01       	movw	r28, r24
    2b74:	6a 01       	movw	r12, r20
    2b76:	7b 01       	movw	r14, r22
    2b78:	63 e0       	ldi	r22, 0x03	; 3
    2b7a:	a6 2e       	mov	r10, r22

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2b7c:	51 e5       	ldi	r21, 0x51	; 81
    2b7e:	95 2e       	mov	r9, r21
	int tempint;
	unsigned char retry=3;

	do
	{
		if(sd_sdhc==FALSE)			//if not SDHC, convert block address to byte address
    2b80:	bb 24       	eor	r11, r11
    2b82:	ba 94       	dec	r11
    2b84:	80 91 79 02 	lds	r24, 0x0279
    2b88:	88 23       	and	r24, r24
    2b8a:	39 f4       	brne	.+14     	; 0x2b9a <sd_block_read+0x3e>
			blockadd<<=9;
    2b8c:	49 e0       	ldi	r20, 0x09	; 9
    2b8e:	cc 0c       	add	r12, r12
    2b90:	dd 1c       	adc	r13, r13
    2b92:	ee 1c       	adc	r14, r14
    2b94:	ff 1c       	adc	r15, r15
    2b96:	4a 95       	dec	r20
    2b98:	d1 f7       	brne	.-12     	; 0x2b8e <sd_block_read+0x32>
		
		SS_PORT &=~_BV(SS_BIT);		//select
    2b9a:	5f 98       	cbi	0x0b, 7	; 11

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2b9c:	9e bc       	out	0x2e, r9	; 46
	while( !(SPSR & _BV(SPIF)) );
    2b9e:	0d b4       	in	r0, 0x2d	; 45
    2ba0:	07 fe       	sbrs	r0, 7
    2ba2:	fd cf       	rjmp	.-6      	; 0x2b9e <sd_block_read+0x42>
	retval=SPDR;
    2ba4:	8e b5       	in	r24, 0x2e	; 46
		if(sd_sdhc==FALSE)			//if not SDHC, convert block address to byte address
			blockadd<<=9;
		
		SS_PORT &=~_BV(SS_BIT);		//select
		transfer(17 | 0x40);		//CMD17 read single block
		transfer_long(blockadd);	//length
    2ba6:	c7 01       	movw	r24, r14
    2ba8:	b6 01       	movw	r22, r12
    2baa:	0e 94 a4 11 	call	0x2348	; 0x2348 <transfer_long>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2bae:	1e bc       	out	0x2e, r1	; 46
	while( !(SPSR & _BV(SPIF)) );
    2bb0:	0d b4       	in	r0, 0x2d	; 45
    2bb2:	07 fe       	sbrs	r0, 7
    2bb4:	fd cf       	rjmp	.-6      	; 0x2bb0 <sd_block_read+0x54>
	retval=SPDR;
    2bb6:	8e b5       	in	r24, 0x2e	; 46
		SS_PORT &=~_BV(SS_BIT);		//select
		transfer(17 | 0x40);		//CMD17 read single block
		transfer_long(blockadd);	//length
		transfer(0x00);				//checksum
		
		if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
    2bb8:	0e 94 96 11 	call	0x232c	; 0x232c <response_r1>

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2bbc:	be bc       	out	0x2e, r11	; 46
	while( !(SPSR & _BV(SPIF)) );
    2bbe:	0d b4       	in	r0, 0x2d	; 45
    2bc0:	07 fe       	sbrs	r0, 7
    2bc2:	fd cf       	rjmp	.-6      	; 0x2bbe <sd_block_read+0x62>
	retval=SPDR;
    2bc4:	9e b5       	in	r25, 0x2e	; 46
		
		if( (response_r1() & ~_BV(R1_IDLE)) == 0)	//if all error bits are clear
			success=TRUE;
		
		transfer(0xFF);
		SS_PORT |=_BV(SS_BIT);		//de-select
    2bc6:	5f 9a       	sbi	0x0b, 7	; 11
		
		if(success)
    2bc8:	8e 7f       	andi	r24, 0xFE	; 254
    2bca:	09 f0       	breq	.+2      	; 0x2bce <sd_block_read+0x72>
    2bcc:	3d c0       	rjmp	.+122    	; 0x2c48 <sd_block_read+0xec>
		{
			SS_PORT &=~_BV(SS_BIT);		//select
    2bce:	5f 98       	cbi	0x0b, 7	; 11
    2bd0:	20 e1       	ldi	r18, 0x10	; 16
    2bd2:	37 e2       	ldi	r19, 0x27	; 39

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2bd4:	be bc       	out	0x2e, r11	; 46
	while( !(SPSR & _BV(SPIF)) );
    2bd6:	0d b4       	in	r0, 0x2d	; 45
    2bd8:	07 fe       	sbrs	r0, 7
    2bda:	fd cf       	rjmp	.-6      	; 0x2bd6 <sd_block_read+0x7a>
	retval=SPDR;
    2bdc:	8e b5       	in	r24, 0x2e	; 46
			//wait for start token
			tempint=10000;
			success=FALSE;
			do
			{
				if(transfer(0xFF)==0xFE)
    2bde:	8e 3f       	cpi	r24, 0xFE	; 254
    2be0:	11 f4       	brne	.+4      	; 0x2be6 <sd_block_read+0x8a>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <sd_block_read+0x90>
					success=TRUE;
				else
					tempint--;
    2be6:	21 50       	subi	r18, 0x01	; 1
    2be8:	30 40       	sbci	r19, 0x00	; 0
    2bea:	80 e0       	ldi	r24, 0x00	; 0
			}while(tempint && !success);
    2bec:	21 15       	cp	r18, r1
    2bee:	31 05       	cpc	r19, r1
    2bf0:	19 f0       	breq	.+6      	; 0x2bf8 <sd_block_read+0x9c>
    2bf2:	88 23       	and	r24, r24
    2bf4:	79 f3       	breq	.-34     	; 0x2bd4 <sd_block_read+0x78>
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <sd_block_read+0xa0>
			
			if(success)
    2bf8:	88 23       	and	r24, r24
    2bfa:	a1 f0       	breq	.+40     	; 0x2c24 <sd_block_read+0xc8>
			{
				//read block
				tempint=512;
				
				SPDR=0xFF;							//begin first transfer
    2bfc:	be bc       	out	0x2e, r11	; 46
    2bfe:	fe 01       	movw	r30, r28
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	32 e0       	ldi	r19, 0x02	; 2
				while(tempint)
				{
					while( !(SPSR & _BV(SPIF)) );	//wait for transfer to finish
    2c04:	0d b4       	in	r0, 0x2d	; 45
    2c06:	07 fe       	sbrs	r0, 7
    2c08:	fd cf       	rjmp	.-6      	; 0x2c04 <sd_block_read+0xa8>
					*buffer=SPDR;			//read byte
    2c0a:	8e b5       	in	r24, 0x2e	; 46
    2c0c:	81 93       	st	Z+, r24
					SPDR=0xFF;				//begin next transfer
    2c0e:	be bc       	out	0x2e, r11	; 46
					buffer++;				//modify pointer
					tempint--;				//modify counter
    2c10:	21 50       	subi	r18, 0x01	; 1
    2c12:	30 40       	sbci	r19, 0x00	; 0
			{
				//read block
				tempint=512;
				
				SPDR=0xFF;							//begin first transfer
				while(tempint)
    2c14:	b9 f7       	brne	.-18     	; 0x2c04 <sd_block_read+0xa8>
    2c16:	c0 50       	subi	r28, 0x00	; 0
    2c18:	de 4f       	sbci	r29, 0xFE	; 254
					SPDR=0xFF;				//begin next transfer
					buffer++;				//modify pointer
					tempint--;				//modify counter
				};
				
				while( !(SPSR & _BV(SPIF)) );	//wait for additonal transfer
    2c1a:	0d b4       	in	r0, 0x2d	; 45
    2c1c:	07 fe       	sbrs	r0, 7
    2c1e:	fd cf       	rjmp	.-6      	; 0x2c1a <sd_block_read+0xbe>
				success=SPDR;					//waste data (actually first byte of CRC)
    2c20:	8e b5       	in	r24, 0x2e	; 46
    2c22:	81 e0       	ldi	r24, 0x01	; 1

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2c24:	be bc       	out	0x2e, r11	; 46
	while( !(SPSR & _BV(SPIF)) );
    2c26:	0d b4       	in	r0, 0x2d	; 45
    2c28:	07 fe       	sbrs	r0, 7
    2c2a:	fd cf       	rjmp	.-6      	; 0x2c26 <sd_block_read+0xca>
	retval=SPDR;
    2c2c:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2c2e:	be bc       	out	0x2e, r11	; 46
	while( !(SPSR & _BV(SPIF)) );
    2c30:	0d b4       	in	r0, 0x2d	; 45
    2c32:	07 fe       	sbrs	r0, 7
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <sd_block_read+0xd4>
	retval=SPDR;
    2c36:	9e b5       	in	r25, 0x2e	; 46

static char transfer(char data)
{
	char retval;
	
	SPDR=data;
    2c38:	be bc       	out	0x2e, r11	; 46
	while( !(SPSR & _BV(SPIF)) );
    2c3a:	0d b4       	in	r0, 0x2d	; 45
    2c3c:	07 fe       	sbrs	r0, 7
    2c3e:	fd cf       	rjmp	.-6      	; 0x2c3a <sd_block_read+0xde>
	retval=SPDR;
    2c40:	9e b5       	in	r25, 0x2e	; 46
			};
			transfer(0xFF);		//ignore CRC
			
			transfer(0xFF);		//additional clocks before de-select
			transfer(0xFF);		//additional clocks before de-select
			SS_PORT |=_BV(SS_BIT);		//de-select
    2c42:	5f 9a       	sbi	0x0b, 7	; 11
		};
		
		if(!success)
    2c44:	88 23       	and	r24, r24
    2c46:	79 f5       	brne	.+94     	; 0x2ca6 <sd_block_read+0x14a>
		{
			DEBUG_P(PSTR("SD COMMAND READ BLOCK FAILED "));
    2c48:	80 91 7a 02 	lds	r24, 0x027A
    2c4c:	90 91 7b 02 	lds	r25, 0x027B
    2c50:	66 e4       	ldi	r22, 0x46	; 70
    2c52:	75 e0       	ldi	r23, 0x05	; 5
    2c54:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_P(PSTR("@SECTOR "));
    2c58:	80 91 7a 02 	lds	r24, 0x027A
    2c5c:	90 91 7b 02 	lds	r25, 0x027B
    2c60:	6d e3       	ldi	r22, 0x3D	; 61
    2c62:	75 e0       	ldi	r23, 0x05	; 5
    2c64:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_LONG(blockadd);
    2c68:	00 91 7a 02 	lds	r16, 0x027A
    2c6c:	10 91 7b 02 	lds	r17, 0x027B
    2c70:	c7 01       	movw	r24, r14
    2c72:	b6 01       	movw	r22, r12
    2c74:	4c e7       	ldi	r20, 0x7C	; 124
    2c76:	52 e0       	ldi	r21, 0x02	; 2
    2c78:	2a e0       	ldi	r18, 0x0A	; 10
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	0e 94 2b 41 	call	0x8256	; 0x8256 <ltoa>
    2c80:	bc 01       	movw	r22, r24
    2c82:	c8 01       	movw	r24, r16
    2c84:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    2c88:	80 91 7a 02 	lds	r24, 0x027A
    2c8c:	90 91 7b 02 	lds	r25, 0x027B
    2c90:	6a e3       	ldi	r22, 0x3A	; 58
    2c92:	75 e0       	ldi	r23, 0x05	; 5
    2c94:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			sd_initcard();
    2c98:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <sd_initcard>
		};
	}while(!success && retry--);
    2c9c:	aa 20       	and	r10, r10
    2c9e:	11 f0       	breq	.+4      	; 0x2ca4 <sd_block_read+0x148>
    2ca0:	aa 94       	dec	r10
    2ca2:	70 cf       	rjmp	.-288    	; 0x2b84 <sd_block_read+0x28>
    2ca4:	80 e0       	ldi	r24, 0x00	; 0

	return success;	
}
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
    2cb6:	bf 90       	pop	r11
    2cb8:	af 90       	pop	r10
    2cba:	9f 90       	pop	r9
    2cbc:	08 95       	ret

00002cbe <hex2ascii>:

// call to print memory to a text buffer as hex data
// option=0, ############
// option=1, ##:##:##:##:##:## (used for MAC)
char* hex2ascii(char* textbuf, void* startadd, unsigned char length, unsigned char option)
{
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	cf 93       	push	r28
    2cc4:	df 93       	push	r29
    2cc6:	18 2f       	mov	r17, r24
    2cc8:	09 2f       	mov	r16, r25
    2cca:	eb 01       	movw	r28, r22
    2ccc:	62 2f       	mov	r22, r18
	void* endadd = (unsigned char*)startadd+length;
    2cce:	ce 01       	movw	r24, r28
    2cd0:	84 0f       	add	r24, r20
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	ac 01       	movw	r20, r24
    2cd6:	21 2f       	mov	r18, r17
    2cd8:	30 2f       	mov	r19, r16
    2cda:	c9 01       	movw	r24, r18
    2cdc:	fc 01       	movw	r30, r24
			textbuf[0]+=7;
		if(textbuf[1]>0x39)
			textbuf[1]+=7;
		textbuf+=2;
		if(option==1 && startadd != endadd)
			*textbuf++=':';
    2cde:	2a e3       	ldi	r18, 0x3A	; 58
	char* retval = textbuf;

	unsigned char tempchar;
	do
	{
		tempchar=*(unsigned char*)startadd++;
    2ce0:	89 91       	ld	r24, Y+
		textbuf[0]=0x30+(tempchar>>4);
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	92 95       	swap	r25
    2ce6:	9f 70       	andi	r25, 0x0F	; 15
    2ce8:	90 5d       	subi	r25, 0xD0	; 208
    2cea:	df 01       	movw	r26, r30
    2cec:	9d 93       	st	X+, r25
		textbuf[1]=0x30+(tempchar&0x0F);
    2cee:	8f 70       	andi	r24, 0x0F	; 15
    2cf0:	80 5d       	subi	r24, 0xD0	; 208
    2cf2:	81 83       	std	Z+1, r24	; 0x01
		if(textbuf[0]>0x39)
    2cf4:	9a 33       	cpi	r25, 0x3A	; 58
    2cf6:	10 f0       	brcs	.+4      	; 0x2cfc <hex2ascii+0x3e>
			textbuf[0]+=7;
    2cf8:	99 5f       	subi	r25, 0xF9	; 249
    2cfa:	90 83       	st	Z, r25
		if(textbuf[1]>0x39)
    2cfc:	8c 91       	ld	r24, X
    2cfe:	8a 33       	cpi	r24, 0x3A	; 58
    2d00:	10 f0       	brcs	.+4      	; 0x2d06 <hex2ascii+0x48>
			textbuf[1]+=7;
    2d02:	89 5f       	subi	r24, 0xF9	; 249
    2d04:	8c 93       	st	X, r24
		textbuf+=2;
    2d06:	32 96       	adiw	r30, 0x02	; 2
		if(option==1 && startadd != endadd)
    2d08:	61 30       	cpi	r22, 0x01	; 1
    2d0a:	29 f4       	brne	.+10     	; 0x2d16 <hex2ascii+0x58>
    2d0c:	c4 17       	cp	r28, r20
    2d0e:	d5 07       	cpc	r29, r21
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <hex2ascii+0x5e>
			*textbuf++=':';
    2d12:	21 93       	st	Z+, r18
    2d14:	e5 cf       	rjmp	.-54     	; 0x2ce0 <hex2ascii+0x22>
	}while(startadd != endadd);
    2d16:	c4 17       	cp	r28, r20
    2d18:	d5 07       	cpc	r29, r21
    2d1a:	11 f7       	brne	.-60     	; 0x2ce0 <hex2ascii+0x22>
	*textbuf++=0;
    2d1c:	10 82       	st	Z, r1
	return retval;
}
    2d1e:	81 2f       	mov	r24, r17
    2d20:	90 2f       	mov	r25, r16
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	08 95       	ret

00002d2c <ascii_ulong>:
//number will be right justified within string of length, left padded with char pad
//if length is 0, or padding character is null, string length will be the minimum required
//if fixed length specefied is inadequate for value, buffer will contain '#' characters
//note that specefied length does not include terminator, so buffer must be at least length+1
char* ascii_ulong(unsigned long value, char *text, unsigned char base, unsigned char fixed_length, char pad)
{
    2d2c:	2f 92       	push	r2
    2d2e:	3f 92       	push	r3
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <ascii_ulong+0x26>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <ascii_ulong+0x28>
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <ascii_ulong+0x2a>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	1b 01       	movw	r2, r22
    2d5c:	2c 01       	movw	r4, r24
    2d5e:	3a 01       	movw	r6, r20
    2d60:	90 2e       	mov	r9, r16
    2d62:	8e 2c       	mov	r8, r14
	
	digit_weight=1;
	length=1;
	
	//determine how many digits we need
	while(value/base >= digit_weight)
    2d64:	82 2f       	mov	r24, r18
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 e0       	ldi	r26, 0x00	; 0
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	ab 83       	std	Y+3, r26	; 0x03
    2d72:	bc 83       	std	Y+4, r27	; 0x04
    2d74:	c2 01       	movw	r24, r4
    2d76:	b1 01       	movw	r22, r2
    2d78:	29 81       	ldd	r18, Y+1	; 0x01
    2d7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d7c:	4b 81       	ldd	r20, Y+3	; 0x03
    2d7e:	5c 81       	ldd	r21, Y+4	; 0x04
    2d80:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <__udivmodsi4>
    2d84:	79 01       	movw	r14, r18
    2d86:	8a 01       	movw	r16, r20
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	a8 2e       	mov	r10, r24
    2d8c:	b1 2c       	mov	r11, r1
    2d8e:	c1 2c       	mov	r12, r1
    2d90:	d1 2c       	mov	r13, r1
    2d92:	a1 e0       	ldi	r26, 0x01	; 1
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	be 83       	std	Y+6, r27	; 0x06
    2d98:	ad 83       	std	Y+5, r26	; 0x05
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <ascii_ulong+0x8e>
	{
		length++;
    2d9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2d9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2da0:	31 96       	adiw	r30, 0x01	; 1
    2da2:	fe 83       	std	Y+6, r31	; 0x06
    2da4:	ed 83       	std	Y+5, r30	; 0x05
		digit_weight *= base;
    2da6:	c6 01       	movw	r24, r12
    2da8:	b5 01       	movw	r22, r10
    2daa:	29 81       	ldd	r18, Y+1	; 0x01
    2dac:	3a 81       	ldd	r19, Y+2	; 0x02
    2dae:	4b 81       	ldd	r20, Y+3	; 0x03
    2db0:	5c 81       	ldd	r21, Y+4	; 0x04
    2db2:	0e 94 1f 3f 	call	0x7e3e	; 0x7e3e <__mulsi3>
    2db6:	5b 01       	movw	r10, r22
    2db8:	6c 01       	movw	r12, r24
	
	digit_weight=1;
	length=1;
	
	//determine how many digits we need
	while(value/base >= digit_weight)
    2dba:	ea 14       	cp	r14, r10
    2dbc:	fb 04       	cpc	r15, r11
    2dbe:	0c 05       	cpc	r16, r12
    2dc0:	1d 05       	cpc	r17, r13
    2dc2:	60 f7       	brcc	.-40     	; 0x2d9c <ascii_ulong+0x70>
		length++;
		digit_weight *= base;
	};
	
	//apply padding?
	if(pad && fixed_length)
    2dc4:	88 20       	and	r8, r8
    2dc6:	49 f1       	breq	.+82     	; 0x2e1a <ascii_ulong+0xee>
    2dc8:	99 20       	and	r9, r9
    2dca:	39 f1       	breq	.+78     	; 0x2e1a <ascii_ulong+0xee>
	{
		if(fixed_length < length)
    2dcc:	09 2d       	mov	r16, r9
    2dce:	10 e0       	ldi	r17, 0x00	; 0
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	08 17       	cp	r16, r24
    2dd6:	19 07       	cpc	r17, r25
    2dd8:	6c f4       	brge	.+26     	; 0x2df4 <ascii_ulong+0xc8>
		{
			memset(text, '#', length);
    2dda:	c3 01       	movw	r24, r6
    2ddc:	63 e2       	ldi	r22, 0x23	; 35
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	4d 81       	ldd	r20, Y+5	; 0x05
    2de2:	5e 81       	ldd	r21, Y+6	; 0x06
    2de4:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
			text[length]=0;
    2de8:	ad 81       	ldd	r26, Y+5	; 0x05
    2dea:	be 81       	ldd	r27, Y+6	; 0x06
    2dec:	a6 0d       	add	r26, r6
    2dee:	b7 1d       	adc	r27, r7
    2df0:	1c 92       	st	X, r1
    2df2:	13 c0       	rjmp	.+38     	; 0x2e1a <ascii_ulong+0xee>
			finished=TRUE;
		}
		else if(fixed_length > length)
    2df4:	ed 81       	ldd	r30, Y+5	; 0x05
    2df6:	fe 81       	ldd	r31, Y+6	; 0x06
    2df8:	e0 17       	cp	r30, r16
    2dfa:	f1 07       	cpc	r31, r17
    2dfc:	74 f4       	brge	.+28     	; 0x2e1a <ascii_ulong+0xee>
		{
			memset(text, pad, fixed_length-length);	//add padding characters
    2dfe:	0e 1b       	sub	r16, r30
    2e00:	1f 0b       	sbc	r17, r31
    2e02:	c3 01       	movw	r24, r6
    2e04:	68 2d       	mov	r22, r8
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	a8 01       	movw	r20, r16
    2e0a:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
			text+=fixed_length-length;
    2e0e:	c3 01       	movw	r24, r6
    2e10:	80 0f       	add	r24, r16
    2e12:	91 1f       	adc	r25, r17
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <ascii_ulong+0xf2>
    2e1a:	7e 82       	std	Y+6, r7	; 0x06
    2e1c:	6d 82       	std	Y+5, r6	; 0x05
	};
	
	//write digits
	do
	{
		digit = value / digit_weight;	//calculate current digit
    2e1e:	c2 01       	movw	r24, r4
    2e20:	b1 01       	movw	r22, r2
    2e22:	a6 01       	movw	r20, r12
    2e24:	95 01       	movw	r18, r10
    2e26:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <__udivmodsi4>
    2e2a:	92 2e       	mov	r9, r18
		if(digit > 9)					//write ascii
    2e2c:	99 e0       	ldi	r25, 0x09	; 9
    2e2e:	92 17       	cp	r25, r18
    2e30:	40 f4       	brcc	.+16     	; 0x2e42 <ascii_ulong+0x116>
			*text = digit-10+'A';
    2e32:	a7 e3       	ldi	r26, 0x37	; 55
    2e34:	9a 0e       	add	r9, r26
    2e36:	ed 81       	ldd	r30, Y+5	; 0x05
    2e38:	fe 81       	ldd	r31, Y+6	; 0x06
    2e3a:	90 82       	st	Z, r9
    2e3c:	f9 ec       	ldi	r31, 0xC9	; 201
    2e3e:	9f 0e       	add	r9, r31
    2e40:	07 c0       	rjmp	.+14     	; 0x2e50 <ascii_ulong+0x124>
		else
			*text = digit+'0';
    2e42:	80 e3       	ldi	r24, 0x30	; 48
    2e44:	98 0e       	add	r9, r24
    2e46:	ad 81       	ldd	r26, Y+5	; 0x05
    2e48:	be 81       	ldd	r27, Y+6	; 0x06
    2e4a:	9c 92       	st	X, r9
    2e4c:	b0 ed       	ldi	r27, 0xD0	; 208
    2e4e:	9b 0e       	add	r9, r27
		value -= digit * digit_weight;	//subtract from total
		text++;							//move to next digit
    2e50:	ed 81       	ldd	r30, Y+5	; 0x05
    2e52:	fe 81       	ldd	r31, Y+6	; 0x06
    2e54:	31 96       	adiw	r30, 0x01	; 1
    2e56:	fe 83       	std	Y+6, r31	; 0x06
    2e58:	ed 83       	std	Y+5, r30	; 0x05
		digit_weight /= base;			//reduce power of digit_weight to current digit units
    2e5a:	c6 01       	movw	r24, r12
    2e5c:	b5 01       	movw	r22, r10
    2e5e:	29 81       	ldd	r18, Y+1	; 0x01
    2e60:	3a 81       	ldd	r19, Y+2	; 0x02
    2e62:	4b 81       	ldd	r20, Y+3	; 0x03
    2e64:	5c 81       	ldd	r21, Y+4	; 0x04
    2e66:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <__udivmodsi4>
    2e6a:	79 01       	movw	r14, r18
    2e6c:	8a 01       	movw	r16, r20
	}while(digit_weight);
    2e6e:	e1 14       	cp	r14, r1
    2e70:	f1 04       	cpc	r15, r1
    2e72:	01 05       	cpc	r16, r1
    2e74:	11 05       	cpc	r17, r1
    2e76:	79 f0       	breq	.+30     	; 0x2e96 <ascii_ulong+0x16a>
		digit = value / digit_weight;	//calculate current digit
		if(digit > 9)					//write ascii
			*text = digit-10+'A';
		else
			*text = digit+'0';
		value -= digit * digit_weight;	//subtract from total
    2e78:	69 2d       	mov	r22, r9
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a6 01       	movw	r20, r12
    2e82:	95 01       	movw	r18, r10
    2e84:	0e 94 1f 3f 	call	0x7e3e	; 0x7e3e <__mulsi3>
    2e88:	26 1a       	sub	r2, r22
    2e8a:	37 0a       	sbc	r3, r23
    2e8c:	48 0a       	sbc	r4, r24
    2e8e:	59 0a       	sbc	r5, r25
    2e90:	57 01       	movw	r10, r14
    2e92:	68 01       	movw	r12, r16
    2e94:	c4 cf       	rjmp	.-120    	; 0x2e1e <ascii_ulong+0xf2>
		text++;							//move to next digit
		digit_weight /= base;			//reduce power of digit_weight to current digit units
	}while(digit_weight);
	
	*text=0;							//terminate string
    2e96:	ad 81       	ldd	r26, Y+5	; 0x05
    2e98:	be 81       	ldd	r27, Y+6	; 0x06
    2e9a:	1c 92       	st	X, r1
	return retval;
}
    2e9c:	c3 01       	movw	r24, r6
    2e9e:	26 96       	adiw	r28, 0x06	; 6
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	1f 91       	pop	r17
    2eb0:	0f 91       	pop	r16
    2eb2:	ff 90       	pop	r15
    2eb4:	ef 90       	pop	r14
    2eb6:	df 90       	pop	r13
    2eb8:	cf 90       	pop	r12
    2eba:	bf 90       	pop	r11
    2ebc:	af 90       	pop	r10
    2ebe:	9f 90       	pop	r9
    2ec0:	8f 90       	pop	r8
    2ec2:	7f 90       	pop	r7
    2ec4:	6f 90       	pop	r6
    2ec6:	5f 90       	pop	r5
    2ec8:	4f 90       	pop	r4
    2eca:	3f 90       	pop	r3
    2ecc:	2f 90       	pop	r2
    2ece:	08 95       	ret

00002ed0 <ascii_long>:
//if length is 0, or padding character is null, string length will be the minimum required
//if fixed length specefied is inadequate for value, buffer will contain '#' characters
//note that specefied length does not include terminator, or sign character, so buffer must be at least length+2
//if sign_pad is non0, positive values will begin with this character
char* ascii_long(long value, char *text, unsigned char base, unsigned char fixed_length, char digit_pad, char sign_pad)
{
    2ed0:	8f 92       	push	r8
    2ed2:	9f 92       	push	r9
    2ed4:	af 92       	push	r10
    2ed6:	bf 92       	push	r11
    2ed8:	cf 92       	push	r12
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	4b 01       	movw	r8, r22
    2ee4:	5c 01       	movw	r10, r24
    2ee6:	14 2f       	mov	r17, r20
    2ee8:	f5 2e       	mov	r15, r21
	char* retval;
	retval=text;
	if(value < 0)
    2eea:	97 ff       	sbrs	r25, 7
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <ascii_long+0x3a>
	{
		*text++='-';
    2eee:	84 2f       	mov	r24, r20
    2ef0:	95 2f       	mov	r25, r21
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	8d e2       	ldi	r24, 0x2D	; 45
    2ef6:	81 93       	st	Z+, r24
		value *=-1ul;
    2ef8:	b0 94       	com	r11
    2efa:	a0 94       	com	r10
    2efc:	90 94       	com	r9
    2efe:	80 94       	com	r8
    2f00:	81 1c       	adc	r8, r1
    2f02:	91 1c       	adc	r9, r1
    2f04:	a1 1c       	adc	r10, r1
    2f06:	b1 1c       	adc	r11, r1
    2f08:	0a c0       	rjmp	.+20     	; 0x2f1e <ascii_long+0x4e>
	}
	else
	{
		if(sign_pad)
    2f0a:	cc 20       	and	r12, r12
    2f0c:	21 f4       	brne	.+8      	; 0x2f16 <ascii_long+0x46>
    2f0e:	84 2f       	mov	r24, r20
    2f10:	95 2f       	mov	r25, r21
    2f12:	fc 01       	movw	r30, r24
    2f14:	04 c0       	rjmp	.+8      	; 0x2f1e <ascii_long+0x4e>
			*text++=sign_pad;
    2f16:	84 2f       	mov	r24, r20
    2f18:	95 2f       	mov	r25, r21
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	c1 92       	st	Z+, r12
	};
	ascii_ulong(value, text, base, fixed_length, digit_pad);
    2f1e:	c5 01       	movw	r24, r10
    2f20:	b4 01       	movw	r22, r8
    2f22:	af 01       	movw	r20, r30
    2f24:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
	return retval;
}
    2f28:	81 2f       	mov	r24, r17
    2f2a:	9f 2d       	mov	r25, r15
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	ff 90       	pop	r15
    2f32:	ef 90       	pop	r14
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	08 95       	ret

00002f40 <dir_lfn_checksum>:
	return retval;
}

//calculate checksum for LFN
static unsigned char dir_lfn_checksum(struct directory_struct *directory_ptr)
{
    2f40:	bc 01       	movw	r22, r24
    int i;
    unsigned char sum=0;
	char* name;

	name = directory_ptr->filename_dos;
    2f42:	fc 01       	movw	r30, r24
    2f44:	48 e0       	ldi	r20, 0x08	; 8
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    for(i=8; i; i--)
		sum = ((sum & 1) << 7) + (sum >> 1) + *name++;
    2f4a:	92 2f       	mov	r25, r18
    2f4c:	97 95       	ror	r25
    2f4e:	99 27       	eor	r25, r25
    2f50:	97 95       	ror	r25
    2f52:	26 95       	lsr	r18
    2f54:	81 91       	ld	r24, Z+
    2f56:	28 0f       	add	r18, r24
    2f58:	29 0f       	add	r18, r25
    int i;
    unsigned char sum=0;
	char* name;

	name = directory_ptr->filename_dos;
    for(i=8; i; i--)
    2f5a:	41 50       	subi	r20, 0x01	; 1
    2f5c:	50 40       	sbci	r21, 0x00	; 0
    2f5e:	a9 f7       	brne	.-22     	; 0x2f4a <dir_lfn_checksum+0xa>
		sum = ((sum & 1) << 7) + (sum >> 1) + *name++;

	name = directory_ptr->filename_ext;
    2f60:	fb 01       	movw	r30, r22
    2f62:	38 96       	adiw	r30, 0x08	; 8
    2f64:	43 e0       	ldi	r20, 0x03	; 3
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    for(i=3; i; i--)
		sum = ((sum & 1) << 7) + (sum >> 1) + *name++;
    2f68:	92 2f       	mov	r25, r18
    2f6a:	97 95       	ror	r25
    2f6c:	99 27       	eor	r25, r25
    2f6e:	97 95       	ror	r25
    2f70:	26 95       	lsr	r18
    2f72:	81 91       	ld	r24, Z+
    2f74:	28 0f       	add	r18, r24
    2f76:	29 0f       	add	r18, r25
	name = directory_ptr->filename_dos;
    for(i=8; i; i--)
		sum = ((sum & 1) << 7) + (sum >> 1) + *name++;

	name = directory_ptr->filename_ext;
    for(i=3; i; i--)
    2f78:	41 50       	subi	r20, 0x01	; 1
    2f7a:	50 40       	sbci	r21, 0x00	; 0
    2f7c:	a9 f7       	brne	.-22     	; 0x2f68 <dir_lfn_checksum+0x28>
		sum = ((sum & 1) << 7) + (sum >> 1) + *name++;

    return sum;
}
    2f7e:	82 2f       	mov	r24, r18
    2f80:	08 95       	ret

00002f82 <dir_lfn_text_get>:

// get text from a lfn entry
// text will be 13 bytes, only text from sequence 0x4# will be terminated, and 0xFF bytes will follow terminator
static char* dir_lfn_text_get(struct lfn_struct *lfn, char *text)
{
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
	int count;
	int *utf;
	char *retval;
	retval=text;

	utf=lfn->name_first;
    2f88:	fc 01       	movw	r30, r24
    2f8a:	31 96       	adiw	r30, 0x01	; 1
    2f8c:	db 01       	movw	r26, r22
    2f8e:	25 e0       	ldi	r18, 0x05	; 5
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <dir_lfn_text_get+0x18>
	count=5;
	while(count--)
		*text++ = (char)LEND_UINT_READ(*utf++);
    2f94:	80 81       	ld	r24, Z
    2f96:	8d 93       	st	X+, r24
    2f98:	32 96       	adiw	r30, 0x02	; 2
	char *retval;
	retval=text;

	utf=lfn->name_first;
	count=5;
	while(count--)
    2f9a:	21 50       	subi	r18, 0x01	; 1
    2f9c:	30 40       	sbci	r19, 0x00	; 0
    2f9e:	8f ef       	ldi	r24, 0xFF	; 255
    2fa0:	2f 3f       	cpi	r18, 0xFF	; 255
    2fa2:	38 07       	cpc	r19, r24
    2fa4:	b9 f7       	brne	.-18     	; 0x2f94 <dir_lfn_text_get+0x12>
    2fa6:	ab 01       	movw	r20, r22
    2fa8:	4b 5f       	subi	r20, 0xFB	; 251
    2faa:	5f 4f       	sbci	r21, 0xFF	; 255
		*text++ = (char)LEND_UINT_READ(*utf++);

	utf=lfn->name_middle;
    2fac:	de 01       	movw	r26, r28
    2fae:	1e 96       	adiw	r26, 0x0e	; 14
    2fb0:	fb 01       	movw	r30, r22
	count=6;
	while(count--)
    2fb2:	9b 01       	movw	r18, r22
    2fb4:	29 5f       	subi	r18, 0xF9	; 249
    2fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <dir_lfn_text_get+0x3e>
		*text++ = (char)LEND_UINT_READ(*utf++);
    2fba:	8c 91       	ld	r24, X
    2fbc:	84 83       	std	Z+4, r24	; 0x04
    2fbe:	12 96       	adiw	r26, 0x02	; 2
    2fc0:	31 96       	adiw	r30, 0x01	; 1
	while(count--)
		*text++ = (char)LEND_UINT_READ(*utf++);

	utf=lfn->name_middle;
	count=6;
	while(count--)
    2fc2:	e2 17       	cp	r30, r18
    2fc4:	f3 07       	cpc	r31, r19
    2fc6:	c9 f7       	brne	.-14     	; 0x2fba <dir_lfn_text_get+0x38>
		*text++ = (char)LEND_UINT_READ(*utf++);

	utf=lfn->name_last;
	count=2;
	while(count--)
		*text++ = (char)LEND_UINT_READ(*utf++);
    2fc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fca:	fa 01       	movw	r30, r20
    2fcc:	86 83       	std	Z+6, r24	; 0x06
    2fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fd0:	87 83       	std	Z+7, r24	; 0x07

	return retval;	
}
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	08 95       	ret

00002fda <crc32_generate>:
#endif

// use crc32_generate(NULL,0), to resetclear/initialize CRC
// use crc32_generate(&data, size), to return CRC, can be called multiple time to pass data in chunks if required
static unsigned long crc32_generate(void* source, int size)
{
    2fda:	cf 92       	push	r12
    2fdc:	df 92       	push	r13
    2fde:	ef 92       	push	r14
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	fc 01       	movw	r30, r24
	static unsigned long crc;
	unsigned char bitcount;
	char data, carry;
	
	if(source==NULL)
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	21 f5       	brne	.+72     	; 0x3034 <crc32_generate+0x5a>
		crc=0ul;
    2fec:	10 92 a2 02 	sts	0x02A2, r1
    2ff0:	10 92 a3 02 	sts	0x02A3, r1
    2ff4:	10 92 a4 02 	sts	0x02A4, r1
    2ff8:	10 92 a5 02 	sts	0x02A5, r1
    2ffc:	1b c0       	rjmp	.+54     	; 0x3034 <crc32_generate+0x5a>

	while(size--)
	{
		bitcount=8;
		data=*(char*)source++;
    2ffe:	00 81       	ld	r16, Z
    3000:	18 e0       	ldi	r17, 0x08	; 8
			if(crc & (1ul<<31))
				carry=TRUE;
			else
				carry=FALSE;
			
			crc <<= 1;
    3002:	da 01       	movw	r26, r20
    3004:	c9 01       	movw	r24, r18
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	aa 1f       	adc	r26, r26
    300c:	bb 1f       	adc	r27, r27
			if(data & 0x80)
    300e:	07 fd       	sbrc	r16, 7
				crc |= 1ul;
    3010:	81 60       	ori	r24, 0x01	; 1
			data <<=1;
			
			if(carry)
    3012:	57 fd       	sbrc	r21, 7
    3014:	03 c0       	rjmp	.+6      	; 0x301c <crc32_generate+0x42>
    3016:	9c 01       	movw	r18, r24
    3018:	ad 01       	movw	r20, r26
    301a:	06 c0       	rjmp	.+12     	; 0x3028 <crc32_generate+0x4e>
				crc ^= 0x04C11DB7ul;
    301c:	9c 01       	movw	r18, r24
    301e:	ad 01       	movw	r20, r26
    3020:	2c 25       	eor	r18, r12
    3022:	3d 25       	eor	r19, r13
    3024:	4e 25       	eor	r20, r14
    3026:	5f 25       	eor	r21, r15
		}while(--bitcount);
    3028:	11 50       	subi	r17, 0x01	; 1
    302a:	11 f4       	brne	.+4      	; 0x3030 <crc32_generate+0x56>
		crc=0ul;

	while(size--)
	{
		bitcount=8;
		data=*(char*)source++;
    302c:	31 96       	adiw	r30, 0x01	; 1
    302e:	12 c0       	rjmp	.+36     	; 0x3054 <crc32_generate+0x7a>
				carry=FALSE;
			
			crc <<= 1;
			if(data & 0x80)
				crc |= 1ul;
			data <<=1;
    3030:	00 0f       	add	r16, r16
    3032:	e7 cf       	rjmp	.-50     	; 0x3002 <crc32_generate+0x28>
    3034:	20 91 a2 02 	lds	r18, 0x02A2
    3038:	30 91 a3 02 	lds	r19, 0x02A3
    303c:	40 91 a4 02 	lds	r20, 0x02A4
    3040:	50 91 a5 02 	lds	r21, 0x02A5
			
			if(carry)
				crc ^= 0x04C11DB7ul;
    3044:	87 eb       	ldi	r24, 0xB7	; 183
    3046:	c8 2e       	mov	r12, r24
    3048:	8d e1       	ldi	r24, 0x1D	; 29
    304a:	d8 2e       	mov	r13, r24
    304c:	81 ec       	ldi	r24, 0xC1	; 193
    304e:	e8 2e       	mov	r14, r24
    3050:	84 e0       	ldi	r24, 0x04	; 4
    3052:	f8 2e       	mov	r15, r24
	char data, carry;
	
	if(source==NULL)
		crc=0ul;

	while(size--)
    3054:	61 50       	subi	r22, 0x01	; 1
    3056:	70 40       	sbci	r23, 0x00	; 0
    3058:	8f ef       	ldi	r24, 0xFF	; 255
    305a:	6f 3f       	cpi	r22, 0xFF	; 255
    305c:	78 07       	cpc	r23, r24
    305e:	79 f6       	brne	.-98     	; 0x2ffe <crc32_generate+0x24>
    3060:	20 93 a2 02 	sts	0x02A2, r18
    3064:	30 93 a3 02 	sts	0x02A3, r19
    3068:	40 93 a4 02 	sts	0x02A4, r20
    306c:	50 93 a5 02 	sts	0x02A5, r21
			if(carry)
				crc ^= 0x04C11DB7ul;
		}while(--bitcount);
	};
	return crc;
}
    3070:	b9 01       	movw	r22, r18
    3072:	ca 01       	movw	r24, r20
    3074:	1f 91       	pop	r17
    3076:	0f 91       	pop	r16
    3078:	ff 90       	pop	r15
    307a:	ef 90       	pop	r14
    307c:	df 90       	pop	r13
    307e:	cf 90       	pop	r12
    3080:	08 95       	ret

00003082 <fatcache_clean>:
	}while(index != CACHE_SIZE);
//	debug_status();
}

char fatcache_clean(void)
{
    3082:	df 92       	push	r13
    3084:	ef 92       	push	r14
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
	
	sector_ptr=cache_buffers;
	do
	{
		//clear all cache_age counters
		cache_age[selection]=0;
    308c:	10 92 e4 05 	sts	0x05E4, r1
		
		//if the buffer is dirty, write it back
		if(cache_dirty[selection])
    3090:	80 91 e3 05 	lds	r24, 0x05E3
    3094:	88 23       	and	r24, r24
    3096:	11 f4       	brne	.+4      	; 0x309c <fatcache_clean+0x1a>
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	50 c0       	rjmp	.+160    	; 0x313c <fatcache_clean+0xba>
		{
			templong=cache_sectors[selection];
    309c:	e0 90 df 05 	lds	r14, 0x05DF
    30a0:	f0 90 e0 05 	lds	r15, 0x05E0
    30a4:	00 91 e1 05 	lds	r16, 0x05E1
    30a8:	10 91 e2 05 	lds	r17, 0x05E2
			success = BLOCK_WRITE(sector_ptr, templong);
    30ac:	8f ed       	ldi	r24, 0xDF	; 223
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	b8 01       	movw	r22, r16
    30b2:	a7 01       	movw	r20, r14
    30b4:	0e 94 ef 13 	call	0x27de	; 0x27de <sd_block_write>
    30b8:	68 2f       	mov	r22, r24
			
			//fat mirroring enabled?
			if(fat_size)
    30ba:	80 91 c7 03 	lds	r24, 0x03C7
    30be:	90 91 c8 03 	lds	r25, 0x03C8
    30c2:	a0 91 c9 03 	lds	r26, 0x03C9
    30c6:	b0 91 ca 03 	lds	r27, 0x03CA
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	89 f1       	breq	.+98     	; 0x3134 <fatcache_clean+0xb2>
			{
				//provide FAT mirroring during cache write back
				if( first_fat_sector <= templong && templong < (first_fat_sector + fat_size) )	//if we just wrote to FAT0	
    30d2:	20 91 05 02 	lds	r18, 0x0205
    30d6:	30 91 06 02 	lds	r19, 0x0206
    30da:	40 91 07 02 	lds	r20, 0x0207
    30de:	50 91 08 02 	lds	r21, 0x0208
    30e2:	e2 16       	cp	r14, r18
    30e4:	f3 06       	cpc	r15, r19
    30e6:	04 07       	cpc	r16, r20
    30e8:	15 07       	cpc	r17, r21
    30ea:	20 f1       	brcs	.+72     	; 0x3134 <fatcache_clean+0xb2>
    30ec:	28 0f       	add	r18, r24
    30ee:	39 1f       	adc	r19, r25
    30f0:	4a 1f       	adc	r20, r26
    30f2:	5b 1f       	adc	r21, r27
    30f4:	e2 16       	cp	r14, r18
    30f6:	f3 06       	cpc	r15, r19
    30f8:	04 07       	cpc	r16, r20
    30fa:	15 07       	cpc	r17, r21
    30fc:	d8 f4       	brcc	.+54     	; 0x3134 <fatcache_clean+0xb2>
				{
					index=total_fats-1;
    30fe:	d0 90 94 02 	lds	r13, 0x0294
    3102:	13 c0       	rjmp	.+38     	; 0x312a <fatcache_clean+0xa8>
					while(index && success)
					{
						templong += fat_size;
    3104:	80 91 c7 03 	lds	r24, 0x03C7
    3108:	90 91 c8 03 	lds	r25, 0x03C8
    310c:	a0 91 c9 03 	lds	r26, 0x03C9
    3110:	b0 91 ca 03 	lds	r27, 0x03CA
    3114:	e8 0e       	add	r14, r24
    3116:	f9 1e       	adc	r15, r25
    3118:	0a 1f       	adc	r16, r26
    311a:	1b 1f       	adc	r17, r27
						success = BLOCK_WRITE(sector_ptr, templong);
    311c:	8f ed       	ldi	r24, 0xDF	; 223
    311e:	93 e0       	ldi	r25, 0x03	; 3
    3120:	b8 01       	movw	r22, r16
    3122:	a7 01       	movw	r20, r14
    3124:	0e 94 ef 13 	call	0x27de	; 0x27de <sd_block_write>
    3128:	68 2f       	mov	r22, r24
						
						index--;
    312a:	da 94       	dec	r13
			{
				//provide FAT mirroring during cache write back
				if( first_fat_sector <= templong && templong < (first_fat_sector + fat_size) )	//if we just wrote to FAT0	
				{
					index=total_fats-1;
					while(index && success)
    312c:	19 f0       	breq	.+6      	; 0x3134 <fatcache_clean+0xb2>
    312e:	66 23       	and	r22, r22
    3130:	49 f7       	brne	.-46     	; 0x3104 <fatcache_clean+0x82>
    3132:	04 c0       	rjmp	.+8      	; 0x313c <fatcache_clean+0xba>
						
						index--;
					};
				};
			};
			if(success)
    3134:	66 23       	and	r22, r22
    3136:	11 f0       	breq	.+4      	; 0x313c <fatcache_clean+0xba>
				cache_dirty[selection]=FALSE;
    3138:	10 92 e3 05 	sts	0x05E3, r1
		selection++;
		sector_ptr+=512;
	}while(success && selection!=CACHE_SIZE);
//	debug_status();
	return success;
}
    313c:	86 2f       	mov	r24, r22
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	ff 90       	pop	r15
    3144:	ef 90       	pop	r14
    3146:	df 90       	pop	r13
    3148:	08 95       	ret

0000314a <fatcache_sector>:
		index++;
	}while(index != CACHE_SIZE);
}

void* fatcache_sector(unsigned long sector, unsigned char read_write)
{
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	4b 01       	movw	r8, r22
    3164:	5c 01       	movw	r10, r24
    3166:	c4 2e       	mov	r12, r20
	
	//increment inactivty of all buffers
	index=0;
	do
	{
		if(cache_age[index]<255)
    3168:	80 91 e4 05 	lds	r24, 0x05E4
    316c:	8f 3f       	cpi	r24, 0xFF	; 255
    316e:	19 f0       	breq	.+6      	; 0x3176 <fatcache_sector+0x2c>
			cache_age[index]++;
    3170:	8f 5f       	subi	r24, 0xFF	; 255
    3172:	80 93 e4 05 	sts	0x05E4, r24
	//does sector exist in buffers?
	index=0;
	temp_ptr=cache_buffers;
	do
	{	
		if(sector==cache_sectors[index])
    3176:	e0 90 df 05 	lds	r14, 0x05DF
    317a:	f0 90 e0 05 	lds	r15, 0x05E0
    317e:	00 91 e1 05 	lds	r16, 0x05E1
    3182:	10 91 e2 05 	lds	r17, 0x05E2
    3186:	8e 14       	cp	r8, r14
    3188:	9f 04       	cpc	r9, r15
    318a:	a0 06       	cpc	r10, r16
    318c:	b1 06       	cpc	r11, r17
    318e:	29 f4       	brne	.+10     	; 0x319a <fatcache_sector+0x50>
		{
			selection=index;
			found=TRUE;
			sector_ptr=temp_ptr;
			cache_age[selection]=0;		//clear buffers cache_age counter
    3190:	10 92 e4 05 	sts	0x05E4, r1
    3194:	cf ed       	ldi	r28, 0xDF	; 223
    3196:	d3 e0       	ldi	r29, 0x03	; 3
    3198:	7d c0       	rjmp	.+250    	; 0x3294 <fatcache_sector+0x14a>
		temp_ptr=cache_buffers;
		selection=0;
		maximum=0;
		do
		{
			if(cache_age[index]>maximum)
    319a:	80 91 e4 05 	lds	r24, 0x05E4
    319e:	88 23       	and	r24, r24
    31a0:	19 f0       	breq	.+6      	; 0x31a8 <fatcache_sector+0x5e>
    31a2:	cf ed       	ldi	r28, 0xDF	; 223
    31a4:	d3 e0       	ldi	r29, 0x03	; 3
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <fatcache_sector+0x62>
    31a8:	c0 e0       	ldi	r28, 0x00	; 0
    31aa:	d0 e0       	ldi	r29, 0x00	; 0
			temp_ptr+=512;
		}while(index!=CACHE_SIZE);
		
		
		//clear buffers cache_age (as we are about to use it)
		cache_age[selection]=0;
    31ac:	10 92 e4 05 	sts	0x05E4, r1
		
		//if the buffer is dirty, write it back
		if(cache_dirty[selection])
    31b0:	80 91 e3 05 	lds	r24, 0x05E3
    31b4:	88 23       	and	r24, r24
    31b6:	09 f4       	brne	.+2      	; 0x31ba <fatcache_sector+0x70>
    31b8:	44 c0       	rjmp	.+136    	; 0x3242 <fatcache_sector+0xf8>
		{
			templong=cache_sectors[selection];
			success = BLOCK_WRITE(sector_ptr, templong);
    31ba:	ce 01       	movw	r24, r28
    31bc:	b8 01       	movw	r22, r16
    31be:	a7 01       	movw	r20, r14
    31c0:	0e 94 ef 13 	call	0x27de	; 0x27de <sd_block_write>
    31c4:	68 2f       	mov	r22, r24
			
			//fat mirroring enabled?
			if(fat_size)
    31c6:	80 91 c7 03 	lds	r24, 0x03C7
    31ca:	90 91 c8 03 	lds	r25, 0x03C8
    31ce:	a0 91 c9 03 	lds	r26, 0x03C9
    31d2:	b0 91 ca 03 	lds	r27, 0x03CA
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	a1 05       	cpc	r26, r1
    31da:	b1 05       	cpc	r27, r1
    31dc:	81 f1       	breq	.+96     	; 0x323e <fatcache_sector+0xf4>
			{
				//provide FAT mirroring during cache write back
				if( first_fat_sector <= templong && templong < (first_fat_sector + fat_size) )	//if we just wrote to FAT0	
    31de:	20 91 05 02 	lds	r18, 0x0205
    31e2:	30 91 06 02 	lds	r19, 0x0206
    31e6:	40 91 07 02 	lds	r20, 0x0207
    31ea:	50 91 08 02 	lds	r21, 0x0208
    31ee:	e2 16       	cp	r14, r18
    31f0:	f3 06       	cpc	r15, r19
    31f2:	04 07       	cpc	r16, r20
    31f4:	15 07       	cpc	r17, r21
    31f6:	18 f1       	brcs	.+70     	; 0x323e <fatcache_sector+0xf4>
    31f8:	28 0f       	add	r18, r24
    31fa:	39 1f       	adc	r19, r25
    31fc:	4a 1f       	adc	r20, r26
    31fe:	5b 1f       	adc	r21, r27
    3200:	e2 16       	cp	r14, r18
    3202:	f3 06       	cpc	r15, r19
    3204:	04 07       	cpc	r16, r20
    3206:	15 07       	cpc	r17, r21
    3208:	d0 f4       	brcc	.+52     	; 0x323e <fatcache_sector+0xf4>
				{
					index=total_fats-1;
    320a:	d0 90 94 02 	lds	r13, 0x0294
    320e:	12 c0       	rjmp	.+36     	; 0x3234 <fatcache_sector+0xea>
					while(index && success)
					{
						templong += fat_size;
    3210:	80 91 c7 03 	lds	r24, 0x03C7
    3214:	90 91 c8 03 	lds	r25, 0x03C8
    3218:	a0 91 c9 03 	lds	r26, 0x03C9
    321c:	b0 91 ca 03 	lds	r27, 0x03CA
    3220:	e8 0e       	add	r14, r24
    3222:	f9 1e       	adc	r15, r25
    3224:	0a 1f       	adc	r16, r26
    3226:	1b 1f       	adc	r17, r27
						success = BLOCK_WRITE(sector_ptr, templong);
    3228:	ce 01       	movw	r24, r28
    322a:	b8 01       	movw	r22, r16
    322c:	a7 01       	movw	r20, r14
    322e:	0e 94 ef 13 	call	0x27de	; 0x27de <sd_block_write>
    3232:	68 2f       	mov	r22, r24
						index--;
    3234:	da 94       	dec	r13
			{
				//provide FAT mirroring during cache write back
				if( first_fat_sector <= templong && templong < (first_fat_sector + fat_size) )	//if we just wrote to FAT0	
				{
					index=total_fats-1;
					while(index && success)
    3236:	19 f0       	breq	.+6      	; 0x323e <fatcache_sector+0xf4>
    3238:	66 23       	and	r22, r22
    323a:	51 f7       	brne	.-44     	; 0x3210 <fatcache_sector+0xc6>
    323c:	1b c0       	rjmp	.+54     	; 0x3274 <fatcache_sector+0x12a>
				};
			};
		};
		
		//if no error
		if(success)
    323e:	66 23       	and	r22, r22
    3240:	c9 f0       	breq	.+50     	; 0x3274 <fatcache_sector+0x12a>
		{
			//associate buffer with sector
			cache_sectors[selection]=sector;
    3242:	80 92 df 05 	sts	0x05DF, r8
    3246:	90 92 e0 05 	sts	0x05E0, r9
    324a:	a0 92 e1 05 	sts	0x05E1, r10
    324e:	b0 92 e2 05 	sts	0x05E2, r11
			
			//read required?
			if(read_write == FAT_READ)
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	c8 16       	cp	r12, r24
    3256:	51 f4       	brne	.+20     	; 0x326c <fatcache_sector+0x122>
			{
				success=BLOCK_READ(sector_ptr, sector);
    3258:	ce 01       	movw	r24, r28
    325a:	b5 01       	movw	r22, r10
    325c:	a4 01       	movw	r20, r8
    325e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <sd_block_read>
				cache_dirty[selection]=FALSE;
    3262:	10 92 e3 05 	sts	0x05E3, r1
			}
			else
				cache_dirty[selection]=TRUE;
		};
		
		if(!success)
    3266:	88 23       	and	r24, r24
    3268:	a9 f4       	brne	.+42     	; 0x3294 <fatcache_sector+0x14a>
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <fatcache_sector+0x12a>
			{
				success=BLOCK_READ(sector_ptr, sector);
				cache_dirty[selection]=FALSE;
			}
			else
				cache_dirty[selection]=TRUE;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	80 93 e3 05 	sts	0x05E3, r24
    3272:	10 c0       	rjmp	.+32     	; 0x3294 <fatcache_sector+0x14a>
		};
		
		if(!success)
		{
			cache_sectors[selection]=0xFFFFFFFFul;
    3274:	8f ef       	ldi	r24, 0xFF	; 255
    3276:	9f ef       	ldi	r25, 0xFF	; 255
    3278:	af ef       	ldi	r26, 0xFF	; 255
    327a:	bf ef       	ldi	r27, 0xFF	; 255
    327c:	80 93 df 05 	sts	0x05DF, r24
    3280:	90 93 e0 05 	sts	0x05E0, r25
    3284:	a0 93 e1 05 	sts	0x05E1, r26
    3288:	b0 93 e2 05 	sts	0x05E2, r27
			cache_dirty[selection]=FALSE;
    328c:	10 92 e3 05 	sts	0x05E3, r1
    3290:	c0 e0       	ldi	r28, 0x00	; 0
    3292:	d0 e0       	ldi	r29, 0x00	; 0
	};
	

//	debug_status();
	return (void*)sector_ptr;
}
    3294:	ce 01       	movw	r24, r28
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	df 90       	pop	r13
    32a4:	cf 90       	pop	r12
    32a6:	bf 90       	pop	r11
    32a8:	af 90       	pop	r10
    32aa:	9f 90       	pop	r9
    32ac:	8f 90       	pop	r8
    32ae:	08 95       	ret

000032b0 <cluster_type_read>:
}

//read cluster type from FAT, returns CLUSTER_TYPE_RESERVED if error
//returns CLUSTER_TYPE_FREE, CLUSTER_TYPE_RESERVED, CLUSTER_TYPE_USED, CLUSTER_TYPE_LAST
static unsigned char cluster_type_read(unsigned long cluster)
{
    32b0:	ef 92       	push	r14
    32b2:	ff 92       	push	r15
    32b4:	0f 93       	push	r16
    32b6:	1f 93       	push	r17
    32b8:	7b 01       	movw	r14, r22
    32ba:	8c 01       	movw	r16, r24
	unsigned char entry_index;	
	unsigned long *table_ptr;

	entry_index = cluster&0x0000007Ful;		//entry index within it's sector

	cluster>>=7;					//convert cluster number to sector
    32bc:	37 e0       	ldi	r19, 0x07	; 7
    32be:	96 95       	lsr	r25
    32c0:	87 95       	ror	r24
    32c2:	77 95       	ror	r23
    32c4:	67 95       	ror	r22
    32c6:	3a 95       	dec	r19
    32c8:	d1 f7       	brne	.-12     	; 0x32be <cluster_type_read+0xe>
	cluster+=first_fat_sector;
	
	//read fat sector containing the entry we want
	table_ptr=fatcache_sector(cluster, FAT_READ);
    32ca:	20 91 05 02 	lds	r18, 0x0205
    32ce:	30 91 06 02 	lds	r19, 0x0206
    32d2:	40 91 07 02 	lds	r20, 0x0207
    32d6:	50 91 08 02 	lds	r21, 0x0208
    32da:	62 0f       	add	r22, r18
    32dc:	73 1f       	adc	r23, r19
    32de:	84 1f       	adc	r24, r20
    32e0:	95 1f       	adc	r25, r21
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    32e8:	fc 01       	movw	r30, r24

	if(table_ptr)		
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	41 f1       	breq	.+80     	; 0x333e <cluster_type_read+0x8e>
	{
		cluster=LEND_ULONG_READ(table_ptr[entry_index]);	//read entry
    32ee:	8e 2d       	mov	r24, r14
    32f0:	8f 77       	andi	r24, 0x7F	; 127
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	e8 0f       	add	r30, r24
    32fe:	f9 1f       	adc	r31, r25
    3300:	20 81       	ld	r18, Z
    3302:	31 81       	ldd	r19, Z+1	; 0x01
    3304:	42 81       	ldd	r20, Z+2	; 0x02
    3306:	53 81       	ldd	r21, Z+3	; 0x03
		
		if(cluster==0ul)
    3308:	21 15       	cp	r18, r1
    330a:	31 05       	cpc	r19, r1
    330c:	41 05       	cpc	r20, r1
    330e:	51 05       	cpc	r21, r1
    3310:	11 f4       	brne	.+4      	; 0x3316 <cluster_type_read+0x66>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	15 c0       	rjmp	.+42     	; 0x3340 <cluster_type_read+0x90>
			retval=CLUSTER_TYPE_FREE;
		else if(0x00000002ul <= cluster && cluster <= 0x0FFFFFEFul)
    3316:	da 01       	movw	r26, r20
    3318:	c9 01       	movw	r24, r18
    331a:	02 97       	sbiw	r24, 0x02	; 2
    331c:	a1 09       	sbc	r26, r1
    331e:	b1 09       	sbc	r27, r1
    3320:	8e 5e       	subi	r24, 0xEE	; 238
    3322:	9f 4f       	sbci	r25, 0xFF	; 255
    3324:	af 4f       	sbci	r26, 0xFF	; 255
    3326:	bf 40       	sbci	r27, 0x0F	; 15
    3328:	10 f4       	brcc	.+4      	; 0x332e <cluster_type_read+0x7e>
    332a:	82 e0       	ldi	r24, 0x02	; 2
    332c:	09 c0       	rjmp	.+18     	; 0x3340 <cluster_type_read+0x90>
			retval=CLUSTER_TYPE_USED;
		else if( (cluster & 0xFFFFFFF8ul) == 0x0FFFFFF8ul )	//0x0FFFFFF8 - 0x0FFFFFFF
    332e:	28 7f       	andi	r18, 0xF8	; 248
    3330:	28 5f       	subi	r18, 0xF8	; 248
    3332:	3f 4f       	sbci	r19, 0xFF	; 255
    3334:	4f 4f       	sbci	r20, 0xFF	; 255
    3336:	5f 40       	sbci	r21, 0x0F	; 15
    3338:	11 f4       	brne	.+4      	; 0x333e <cluster_type_read+0x8e>
    333a:	83 e0       	ldi	r24, 0x03	; 3
    333c:	01 c0       	rjmp	.+2      	; 0x3340 <cluster_type_read+0x90>
    333e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		retval=CLUSTER_TYPE_RESERVED;

	return retval;
}
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	08 95       	ret

0000334a <fat_init>:



//find fat32 partition and get info
char fat_init(void)
{
    334a:	2f 92       	push	r2
    334c:	3f 92       	push	r3
    334e:	4f 92       	push	r4
    3350:	5f 92       	push	r5
    3352:	6f 92       	push	r6
    3354:	7f 92       	push	r7
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
	struct partition_info_struct *partition_info_ptr;
	struct fsinfo_sector_struct *fsinfo_sector_ptr=NULL;
	unsigned long templong;
	unsigned char tempchar;
	
	fat_date_time.year=11;
    336e:	9b e0       	ldi	r25, 0x0B	; 11
    3370:	90 93 1d 0c 	sts	0x0C1D, r25
	fat_date_time.month=9;
    3374:	89 e0       	ldi	r24, 0x09	; 9
    3376:	80 93 1e 0c 	sts	0x0C1E, r24
	fat_date_time.day=23;
    337a:	87 e1       	ldi	r24, 0x17	; 23
    337c:	80 93 1f 0c 	sts	0x0C1F, r24
	fat_date_time.hour=11;
    3380:	90 93 20 0c 	sts	0x0C20, r25
	fat_date_time.min=02;
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	80 93 21 0c 	sts	0x0C21, r24
	fat_date_time.second=15;
    338a:	8f e0       	ldi	r24, 0x0F	; 15
    338c:	80 93 22 0c 	sts	0x0C22, r24
void fatcache_init(void)
{
	unsigned char index=0;
	do
	{
		cache_sectors[index]=0xFFFFFFFFul;
    3390:	8f ef       	ldi	r24, 0xFF	; 255
    3392:	9f ef       	ldi	r25, 0xFF	; 255
    3394:	af ef       	ldi	r26, 0xFF	; 255
    3396:	bf ef       	ldi	r27, 0xFF	; 255
    3398:	80 93 df 05 	sts	0x05DF, r24
    339c:	90 93 e0 05 	sts	0x05E0, r25
    33a0:	a0 93 e1 05 	sts	0x05E1, r26
    33a4:	b0 93 e2 05 	sts	0x05E2, r27
		cache_dirty[index]=FALSE;
    33a8:	10 92 e3 05 	sts	0x05E3, r1
		cache_age[index]=255;
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	80 93 e4 05 	sts	0x05E4, r24

	fatcache_init();
	
	//read first block
	boot_sector_ptr=fatcache_sector(0ul, FAT_READ);
    33b2:	60 e0       	ldi	r22, 0x00	; 0
    33b4:	70 e0       	ldi	r23, 0x00	; 0
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    33c0:	ec 01       	movw	r28, r24

	master_boot_record_ptr = (struct master_boot_record_struct*)boot_sector_ptr;

	//is NOT the boot sector?
	if( (boot_sector_ptr->jump_boot[0]!=0xE9) && (boot_sector_ptr->jump_boot[0]!=0xEB) )
    33c2:	88 81       	ld	r24, Y
    33c4:	89 3e       	cpi	r24, 0xE9	; 233
    33c6:	09 f4       	brne	.+2      	; 0x33ca <fat_init+0x80>
    33c8:	57 c0       	rjmp	.+174    	; 0x3478 <fat_init+0x12e>
    33ca:	8b 3e       	cpi	r24, 0xEB	; 235
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <fat_init+0x86>
    33ce:	54 c0       	rjmp	.+168    	; 0x3478 <fat_init+0x12e>
	{
		//is it the master boot record?
		if(LEND_UINT_READ(master_boot_record_ptr->signature) == 0xAA55)
    33d0:	c2 50       	subi	r28, 0x02	; 2
    33d2:	de 4f       	sbci	r29, 0xFE	; 254
    33d4:	88 81       	ld	r24, Y
    33d6:	99 81       	ldd	r25, Y+1	; 0x01
    33d8:	ce 5f       	subi	r28, 0xFE	; 254
    33da:	d1 40       	sbci	r29, 0x01	; 1
    33dc:	85 55       	subi	r24, 0x55	; 85
    33de:	9a 4a       	sbci	r25, 0xAA	; 170
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <fat_init+0x9a>
    33e2:	52 c0       	rjmp	.+164    	; 0x3488 <fat_init+0x13e>
		{
			DEBUG_P(PSTR("FAT32 - Master boot record found\r\n"));
    33e4:	80 91 90 02 	lds	r24, 0x0290
    33e8:	90 91 91 02 	lds	r25, 0x0291
    33ec:	62 e4       	ldi	r22, 0x42	; 66
    33ee:	79 e0       	ldi	r23, 0x09	; 9
    33f0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			partition_info_ptr = &master_boot_record_ptr->partition_info[0];	//get info for first partition
			
			first_reserved_sector=LEND_ULONG_READ(partition_info_ptr->sector_first);
    33f4:	ca 53       	subi	r28, 0x3A	; 58
    33f6:	de 4f       	sbci	r29, 0xFE	; 254
    33f8:	88 81       	ld	r24, Y
    33fa:	99 81       	ldd	r25, Y+1	; 0x01
    33fc:	aa 81       	ldd	r26, Y+2	; 0x02
    33fe:	bb 81       	ldd	r27, Y+3	; 0x03
    3400:	80 93 bd 03 	sts	0x03BD, r24
    3404:	90 93 be 03 	sts	0x03BE, r25
    3408:	a0 93 bf 03 	sts	0x03BF, r26
    340c:	b0 93 c0 03 	sts	0x03C0, r27
			DEBUG_P(PSTR("FAT32 - Reading first partition boot sector at block "));
    3410:	80 91 90 02 	lds	r24, 0x0290
    3414:	90 91 91 02 	lds	r25, 0x0291
    3418:	6c e0       	ldi	r22, 0x0C	; 12
    341a:	79 e0       	ldi	r23, 0x09	; 9
    341c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(first_reserved_sector);
    3420:	c0 90 90 02 	lds	r12, 0x0290
    3424:	d0 90 91 02 	lds	r13, 0x0291
    3428:	60 91 bd 03 	lds	r22, 0x03BD
    342c:	70 91 be 03 	lds	r23, 0x03BE
    3430:	80 91 bf 03 	lds	r24, 0x03BF
    3434:	90 91 c0 03 	lds	r25, 0x03C0
    3438:	46 ea       	ldi	r20, 0xA6	; 166
    343a:	52 e0       	ldi	r21, 0x02	; 2
    343c:	2a e0       	ldi	r18, 0x0A	; 10
    343e:	00 e0       	ldi	r16, 0x00	; 0
    3440:	ee 24       	eor	r14, r14
    3442:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3446:	bc 01       	movw	r22, r24
    3448:	c6 01       	movw	r24, r12
    344a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    344e:	80 91 90 02 	lds	r24, 0x0290
    3452:	90 91 91 02 	lds	r25, 0x0291
    3456:	69 e0       	ldi	r22, 0x09	; 9
    3458:	79 e0       	ldi	r23, 0x09	; 9
    345a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			boot_sector_ptr=fatcache_sector(first_reserved_sector, FAT_READ);
    345e:	60 91 bd 03 	lds	r22, 0x03BD
    3462:	70 91 be 03 	lds	r23, 0x03BE
    3466:	80 91 bf 03 	lds	r24, 0x03BF
    346a:	90 91 c0 03 	lds	r25, 0x03C0
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    3474:	ec 01       	movw	r28, r24
    3476:	08 c0       	rjmp	.+16     	; 0x3488 <fat_init+0x13e>
		};
	}
	else
		first_reserved_sector=0;
    3478:	10 92 bd 03 	sts	0x03BD, r1
    347c:	10 92 be 03 	sts	0x03BE, r1
    3480:	10 92 bf 03 	sts	0x03BF, r1
    3484:	10 92 c0 03 	sts	0x03C0, r1
	
	//if we still dont have the boot sector, were stuffed.
	if( (boot_sector_ptr->jump_boot[0]!=0xE9) && (boot_sector_ptr->jump_boot[0]!=0xEB) )
    3488:	88 81       	ld	r24, Y
    348a:	89 3e       	cpi	r24, 0xE9	; 233
    348c:	61 f0       	breq	.+24     	; 0x34a6 <fat_init+0x15c>
    348e:	8b 3e       	cpi	r24, 0xEB	; 235
    3490:	51 f0       	breq	.+20     	; 0x34a6 <fat_init+0x15c>
	{
		DEBUG_P(PSTR("FAT32 - Failed to find boot sector\r\n"));
    3492:	80 91 90 02 	lds	r24, 0x0290
    3496:	90 91 91 02 	lds	r25, 0x0291
    349a:	64 ee       	ldi	r22, 0xE4	; 228
    349c:	78 e0       	ldi	r23, 0x08	; 8
    349e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    34a2:	ff 24       	eor	r15, r15
    34a4:	63 c3       	rjmp	.+1734   	; 0x3b6c <fat_init+0x822>
		success=FALSE;
	}
	else
	{
		success=TRUE;
		bytes_per_sector = LEND_UINT_READ(boot_sector_ptr->bytes_per_sector);
    34a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    34a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    34aa:	90 93 bb 03 	sts	0x03BB, r25
    34ae:	80 93 ba 03 	sts	0x03BA, r24
		sectors_per_cluster = (unsigned char)LEND_UINT_READ(boot_sector_ptr->sectors_per_cluster);
    34b2:	6d 84       	ldd	r6, Y+13	; 0x0d
    34b4:	60 92 bc 03 	sts	0x03BC, r6
		
		total_reserved_sectors = LEND_UINT_READ(boot_sector_ptr->total_reserved_sectors);
    34b8:	ae 84       	ldd	r10, Y+14	; 0x0e
    34ba:	bf 84       	ldd	r11, Y+15	; 0x0f
    34bc:	b0 92 c2 03 	sts	0x03C2, r11
    34c0:	a0 92 c1 03 	sts	0x03C1, r10
		
		first_fat_sector = first_reserved_sector+total_reserved_sectors;
    34c4:	cc 24       	eor	r12, r12
    34c6:	dd 24       	eor	r13, r13
    34c8:	20 90 bd 03 	lds	r2, 0x03BD
    34cc:	30 90 be 03 	lds	r3, 0x03BE
    34d0:	40 90 bf 03 	lds	r4, 0x03BF
    34d4:	50 90 c0 03 	lds	r5, 0x03C0
    34d8:	86 01       	movw	r16, r12
    34da:	75 01       	movw	r14, r10
    34dc:	e2 0c       	add	r14, r2
    34de:	f3 1c       	adc	r15, r3
    34e0:	04 1d       	adc	r16, r4
    34e2:	15 1d       	adc	r17, r5
    34e4:	e0 92 05 02 	sts	0x0205, r14
    34e8:	f0 92 06 02 	sts	0x0206, r15
    34ec:	00 93 07 02 	sts	0x0207, r16
    34f0:	10 93 08 02 	sts	0x0208, r17
		total_fats = boot_sector_ptr->number_of_fats;
    34f4:	68 89       	ldd	r22, Y+16	; 0x10
    34f6:	60 93 94 02 	sts	0x0294, r22
		fat_size = LEND_ULONG_READ(boot_sector_ptr->fat_size_fat32);
    34fa:	2c a1       	ldd	r18, Y+36	; 0x24
    34fc:	3d a1       	ldd	r19, Y+37	; 0x25
    34fe:	4e a1       	ldd	r20, Y+38	; 0x26
    3500:	5f a1       	ldd	r21, Y+39	; 0x27
    3502:	20 93 c7 03 	sts	0x03C7, r18
    3506:	30 93 c8 03 	sts	0x03C8, r19
    350a:	40 93 c9 03 	sts	0x03C9, r20
    350e:	50 93 ca 03 	sts	0x03CA, r21
		total_fat_sectors =  total_fats * fat_size;
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 1f 3f 	call	0x7e3e	; 0x7e3e <__mulsi3>
    351c:	60 93 c3 03 	sts	0x03C3, r22
    3520:	70 93 c4 03 	sts	0x03C4, r23
    3524:	80 93 c5 03 	sts	0x03C5, r24
    3528:	90 93 c6 03 	sts	0x03C6, r25
		first_data_sector = first_fat_sector + total_fat_sectors;
    352c:	e6 0e       	add	r14, r22
    352e:	f7 1e       	adc	r15, r23
    3530:	08 1f       	adc	r16, r24
    3532:	19 1f       	adc	r17, r25
    3534:	e0 92 cb 03 	sts	0x03CB, r14
    3538:	f0 92 cc 03 	sts	0x03CC, r15
    353c:	00 93 cd 03 	sts	0x03CD, r16
    3540:	10 93 ce 03 	sts	0x03CE, r17
		total_data_sectors = LEND_ULONG_READ(boot_sector_ptr->total_sectors_fat32) - total_fat_sectors - total_reserved_sectors;
    3544:	28 a1       	ldd	r18, Y+32	; 0x20
    3546:	39 a1       	ldd	r19, Y+33	; 0x21
    3548:	4a a1       	ldd	r20, Y+34	; 0x22
    354a:	5b a1       	ldd	r21, Y+35	; 0x23
    354c:	26 1b       	sub	r18, r22
    354e:	37 0b       	sbc	r19, r23
    3550:	48 0b       	sbc	r20, r24
    3552:	59 0b       	sbc	r21, r25
    3554:	2a 19       	sub	r18, r10
    3556:	3b 09       	sbc	r19, r11
    3558:	4c 09       	sbc	r20, r12
    355a:	5d 09       	sbc	r21, r13
    355c:	20 93 cf 03 	sts	0x03CF, r18
    3560:	30 93 d0 03 	sts	0x03D0, r19
    3564:	40 93 d1 03 	sts	0x03D1, r20
    3568:	50 93 d2 03 	sts	0x03D2, r21
		
		fsinfo_sector = LEND_ULONG_READ(boot_sector_ptr->fsinfo_sector)+first_reserved_sector;
    356c:	e8 a8       	ldd	r14, Y+48	; 0x30
    356e:	f9 a8       	ldd	r15, Y+49	; 0x31
    3570:	00 e0       	ldi	r16, 0x00	; 0
    3572:	10 e0       	ldi	r17, 0x00	; 0
    3574:	e2 0c       	add	r14, r2
    3576:	f3 1c       	adc	r15, r3
    3578:	04 1d       	adc	r16, r4
    357a:	15 1d       	adc	r17, r5
    357c:	e0 92 db 03 	sts	0x03DB, r14
    3580:	f0 92 dc 03 	sts	0x03DC, r15
    3584:	00 93 dd 03 	sts	0x03DD, r16
    3588:	10 93 de 03 	sts	0x03DE, r17
		
		root_cluster = LEND_ULONG_READ(boot_sector_ptr->root_cluster);
    358c:	8c a5       	ldd	r24, Y+44	; 0x2c
    358e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3590:	ae a5       	ldd	r26, Y+46	; 0x2e
    3592:	bf a5       	ldd	r27, Y+47	; 0x2f
    3594:	80 93 d3 03 	sts	0x03D3, r24
    3598:	90 93 d4 03 	sts	0x03D4, r25
    359c:	a0 93 d5 03 	sts	0x03D5, r26
    35a0:	b0 93 d6 03 	sts	0x03D6, r27
		total_clusters = total_data_sectors / (unsigned long)sectors_per_cluster;
    35a4:	77 24       	eor	r7, r7
    35a6:	88 24       	eor	r8, r8
    35a8:	99 24       	eor	r9, r9
    35aa:	ca 01       	movw	r24, r20
    35ac:	b9 01       	movw	r22, r18
    35ae:	a4 01       	movw	r20, r8
    35b0:	93 01       	movw	r18, r6
    35b2:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <__udivmodsi4>
    35b6:	20 93 d7 03 	sts	0x03D7, r18
    35ba:	30 93 d8 03 	sts	0x03D8, r19
    35be:	40 93 d9 03 	sts	0x03D9, r20
    35c2:	50 93 da 03 	sts	0x03DA, r21
		
		fsinfo_sector_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    35c6:	c8 01       	movw	r24, r16
    35c8:	b7 01       	movw	r22, r14
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    35d0:	ec 01       	movw	r28, r24
    35d2:	4c 01       	movw	r8, r24
		if(fsinfo_sector_ptr)
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	39 f1       	breq	.+78     	; 0x3626 <fat_init+0x2dc>
		{
			if(memcmp_P(fsinfo_sector_ptr->signature1, PSTR("RRaA"),4))
    35d8:	6f ed       	ldi	r22, 0xDF	; 223
    35da:	78 e0       	ldi	r23, 0x08	; 8
    35dc:	44 e0       	ldi	r20, 0x04	; 4
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	0e 94 be 40 	call	0x817c	; 0x817c <memcmp_P>
    35e4:	8c 01       	movw	r16, r24
				success=FALSE;
			if(memcmp_P(fsinfo_sector_ptr->signature2, PSTR("rrAa"),4))
    35e6:	ce 01       	movw	r24, r28
    35e8:	8c 51       	subi	r24, 0x1C	; 28
    35ea:	9e 4f       	sbci	r25, 0xFE	; 254
    35ec:	6a ed       	ldi	r22, 0xDA	; 218
    35ee:	78 e0       	ldi	r23, 0x08	; 8
    35f0:	44 e0       	ldi	r20, 0x04	; 4
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	0e 94 be 40 	call	0x817c	; 0x817c <memcmp_P>
    35f8:	89 2b       	or	r24, r25
    35fa:	11 f0       	breq	.+4      	; 0x3600 <fat_init+0x2b6>
    35fc:	ff 24       	eor	r15, r15
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <fat_init+0x2c0>
    3600:	ff 24       	eor	r15, r15
    3602:	01 2b       	or	r16, r17
    3604:	11 f4       	brne	.+4      	; 0x360a <fat_init+0x2c0>
    3606:	ff 24       	eor	r15, r15
    3608:	f3 94       	inc	r15
				success=FALSE;
			if(memcmp_P(fsinfo_sector_ptr->signature3, PDATA(char,{0x00,0x00,0x55,0xAA}),4))
    360a:	ce 01       	movw	r24, r28
    360c:	84 50       	subi	r24, 0x04	; 4
    360e:	9e 4f       	sbci	r25, 0xFE	; 254
    3610:	66 ed       	ldi	r22, 0xD6	; 214
    3612:	78 e0       	ldi	r23, 0x08	; 8
    3614:	44 e0       	ldi	r20, 0x04	; 4
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	0e 94 be 40 	call	0x817c	; 0x817c <memcmp_P>
    361c:	89 2b       	or	r24, r25
    361e:	19 f4       	brne	.+6      	; 0x3626 <fat_init+0x2dc>
				success=FALSE;
		}
		else
			success=FALSE;
		
		if(!success)
    3620:	ff 20       	and	r15, r15
    3622:	61 f5       	brne	.+88     	; 0x367c <fat_init+0x332>
    3624:	01 c0       	rjmp	.+2      	; 0x3628 <fat_init+0x2de>
    3626:	ff 24       	eor	r15, r15
		{
			DEBUG_P(PSTR("FAT32 - Failed to find FS Info sector at "));
    3628:	80 91 90 02 	lds	r24, 0x0290
    362c:	90 91 91 02 	lds	r25, 0x0291
    3630:	6c ea       	ldi	r22, 0xAC	; 172
    3632:	78 e0       	ldi	r23, 0x08	; 8
    3634:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(fsinfo_sector);
    3638:	c0 90 90 02 	lds	r12, 0x0290
    363c:	d0 90 91 02 	lds	r13, 0x0291
    3640:	60 91 db 03 	lds	r22, 0x03DB
    3644:	70 91 dc 03 	lds	r23, 0x03DC
    3648:	80 91 dd 03 	lds	r24, 0x03DD
    364c:	90 91 de 03 	lds	r25, 0x03DE
    3650:	46 ea       	ldi	r20, 0xA6	; 166
    3652:	52 e0       	ldi	r21, 0x02	; 2
    3654:	2a e0       	ldi	r18, 0x0A	; 10
    3656:	00 e0       	ldi	r16, 0x00	; 0
    3658:	ee 24       	eor	r14, r14
    365a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    365e:	bc 01       	movw	r22, r24
    3660:	c6 01       	movw	r24, r12
    3662:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    3666:	80 91 90 02 	lds	r24, 0x0290
    366a:	90 91 91 02 	lds	r25, 0x0291
    366e:	69 ea       	ldi	r22, 0xA9	; 169
    3670:	78 e0       	ldi	r23, 0x08	; 8
    3672:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		};
	};
	
	if(success)
    3676:	ff 20       	and	r15, r15
    3678:	09 f4       	brne	.+2      	; 0x367c <fat_init+0x332>
    367a:	78 c2       	rjmp	.+1264   	; 0x3b6c <fat_init+0x822>
	{
		//if total free clusters is invalid
		if(LEND_ULONG_READ(fsinfo_sector_ptr->total_free_clusters) > total_clusters)
    367c:	c8 51       	subi	r28, 0x18	; 24
    367e:	de 4f       	sbci	r29, 0xFE	; 254
    3680:	28 81       	ld	r18, Y
    3682:	39 81       	ldd	r19, Y+1	; 0x01
    3684:	4a 81       	ldd	r20, Y+2	; 0x02
    3686:	5b 81       	ldd	r21, Y+3	; 0x03
    3688:	80 91 d7 03 	lds	r24, 0x03D7
    368c:	90 91 d8 03 	lds	r25, 0x03D8
    3690:	a0 91 d9 03 	lds	r26, 0x03D9
    3694:	b0 91 da 03 	lds	r27, 0x03DA
    3698:	82 17       	cp	r24, r18
    369a:	93 07       	cpc	r25, r19
    369c:	a4 07       	cpc	r26, r20
    369e:	b5 07       	cpc	r27, r21
    36a0:	08 f0       	brcs	.+2      	; 0x36a4 <fat_init+0x35a>
    36a2:	57 c0       	rjmp	.+174    	; 0x3752 <fat_init+0x408>
		{
			DEBUG_P(PSTR("FAT32 - Counting free clusters...\r\n"));
    36a4:	80 91 90 02 	lds	r24, 0x0290
    36a8:	90 91 91 02 	lds	r25, 0x0291
    36ac:	65 e8       	ldi	r22, 0x85	; 133
    36ae:	78 e0       	ldi	r23, 0x08	; 8
    36b0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>

//count how many free clusters there are by scanning the FAT table
static unsigned long cluster_count_free(void)
{
	unsigned long retval=0;
	unsigned long cluster=total_clusters-1;
    36b4:	e0 90 d7 03 	lds	r14, 0x03D7
    36b8:	f0 90 d8 03 	lds	r15, 0x03D8
    36bc:	00 91 d9 03 	lds	r16, 0x03D9
    36c0:	10 91 da 03 	lds	r17, 0x03DA
    36c4:	08 94       	sec
    36c6:	e1 08       	sbc	r14, r1
    36c8:	f1 08       	sbc	r15, r1
    36ca:	01 09       	sbc	r16, r1
    36cc:	11 09       	sbc	r17, r1
    36ce:	aa 24       	eor	r10, r10
    36d0:	bb 24       	eor	r11, r11
    36d2:	65 01       	movw	r12, r10
	do
	{
		if(cluster_type_read(cluster)==CLUSTER_TYPE_FREE)
    36d4:	c8 01       	movw	r24, r16
    36d6:	b7 01       	movw	r22, r14
    36d8:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
    36dc:	88 23       	and	r24, r24
    36de:	29 f4       	brne	.+10     	; 0x36ea <fat_init+0x3a0>
			retval++;
    36e0:	08 94       	sec
    36e2:	a1 1c       	adc	r10, r1
    36e4:	b1 1c       	adc	r11, r1
    36e6:	c1 1c       	adc	r12, r1
    36e8:	d1 1c       	adc	r13, r1
		cluster--;
    36ea:	08 94       	sec
    36ec:	e1 08       	sbc	r14, r1
    36ee:	f1 08       	sbc	r15, r1
    36f0:	01 09       	sbc	r16, r1
    36f2:	11 09       	sbc	r17, r1
	}while(cluster != 1ul);
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	e8 16       	cp	r14, r24
    36f8:	f1 04       	cpc	r15, r1
    36fa:	01 05       	cpc	r16, r1
    36fc:	11 05       	cpc	r17, r1
    36fe:	51 f7       	brne	.-44     	; 0x36d4 <fat_init+0x38a>
		if(LEND_ULONG_READ(fsinfo_sector_ptr->total_free_clusters) > total_clusters)
		{
			DEBUG_P(PSTR("FAT32 - Counting free clusters...\r\n"));
			templong=cluster_count_free();
			
			fsinfo_sector_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    3700:	60 91 db 03 	lds	r22, 0x03DB
    3704:	70 91 dc 03 	lds	r23, 0x03DC
    3708:	80 91 dd 03 	lds	r24, 0x03DD
    370c:	90 91 de 03 	lds	r25, 0x03DE
    3710:	41 e0       	ldi	r20, 0x01	; 1
    3712:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    3716:	4c 01       	movw	r8, r24
			if(fsinfo_sector_ptr)
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	11 f4       	brne	.+4      	; 0x3720 <fat_init+0x3d6>
    371c:	ff 24       	eor	r15, r15
    371e:	1b c0       	rjmp	.+54     	; 0x3756 <fat_init+0x40c>
			{
				fsinfo_sector_ptr->total_free_clusters = templong;
    3720:	e8 ee       	ldi	r30, 0xE8	; 232
    3722:	f1 e0       	ldi	r31, 0x01	; 1
    3724:	8e 0e       	add	r8, r30
    3726:	9f 1e       	adc	r9, r31
    3728:	f4 01       	movw	r30, r8
    372a:	a0 82       	st	Z, r10
    372c:	b1 82       	std	Z+1, r11	; 0x01
    372e:	c2 82       	std	Z+2, r12	; 0x02
    3730:	d3 82       	std	Z+3, r13	; 0x03
    3732:	88 e1       	ldi	r24, 0x18	; 24
    3734:	9e ef       	ldi	r25, 0xFE	; 254
    3736:	88 0e       	add	r8, r24
    3738:	99 1e       	adc	r9, r25
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    373a:	c4 01       	movw	r24, r8
    373c:	8f 5d       	subi	r24, 0xDF	; 223
    373e:	93 40       	sbci	r25, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    3740:	80 70       	andi	r24, 0x00	; 0
    3742:	9e 7f       	andi	r25, 0xFE	; 254
    3744:	89 2b       	or	r24, r25
    3746:	19 f4       	brne	.+6      	; 0x374e <fat_init+0x404>
		{
			cache_dirty[index]=TRUE;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	80 93 e3 05 	sts	0x05E3, r24
				fatcache_dirty(fsinfo_sector_ptr);
				fatcache_clean();
    374e:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
    3752:	ff 24       	eor	r15, r15
    3754:	f3 94       	inc	r15
			}
			else
				success=FALSE;
		};
		
		DEBUG_P(PSTR("FAT32 - Bytes/Sector          = "));DEBUG_ULONG(bytes_per_sector);DEBUG_P(PSTR("\r\n"));
    3756:	80 91 90 02 	lds	r24, 0x0290
    375a:	90 91 91 02 	lds	r25, 0x0291
    375e:	64 e6       	ldi	r22, 0x64	; 100
    3760:	78 e0       	ldi	r23, 0x08	; 8
    3762:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3766:	c0 90 90 02 	lds	r12, 0x0290
    376a:	d0 90 91 02 	lds	r13, 0x0291
    376e:	60 91 ba 03 	lds	r22, 0x03BA
    3772:	70 91 bb 03 	lds	r23, 0x03BB
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	46 ea       	ldi	r20, 0xA6	; 166
    377c:	52 e0       	ldi	r21, 0x02	; 2
    377e:	2a e0       	ldi	r18, 0x0A	; 10
    3780:	00 e0       	ldi	r16, 0x00	; 0
    3782:	ee 24       	eor	r14, r14
    3784:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3788:	bc 01       	movw	r22, r24
    378a:	c6 01       	movw	r24, r12
    378c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3790:	80 91 90 02 	lds	r24, 0x0290
    3794:	90 91 91 02 	lds	r25, 0x0291
    3798:	61 e6       	ldi	r22, 0x61	; 97
    379a:	78 e0       	ldi	r23, 0x08	; 8
    379c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Sectors/Cluster       = "));DEBUG_ULONG(sectors_per_cluster);DEBUG_P(PSTR("\r\n"));
    37a0:	80 91 90 02 	lds	r24, 0x0290
    37a4:	90 91 91 02 	lds	r25, 0x0291
    37a8:	60 e4       	ldi	r22, 0x40	; 64
    37aa:	78 e0       	ldi	r23, 0x08	; 8
    37ac:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    37b0:	c0 90 90 02 	lds	r12, 0x0290
    37b4:	d0 90 91 02 	lds	r13, 0x0291
    37b8:	60 91 bc 03 	lds	r22, 0x03BC
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	46 ea       	ldi	r20, 0xA6	; 166
    37c4:	52 e0       	ldi	r21, 0x02	; 2
    37c6:	2a e0       	ldi	r18, 0x0A	; 10
    37c8:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    37cc:	bc 01       	movw	r22, r24
    37ce:	c6 01       	movw	r24, r12
    37d0:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    37d4:	80 91 90 02 	lds	r24, 0x0290
    37d8:	90 91 91 02 	lds	r25, 0x0291
    37dc:	6d e3       	ldi	r22, 0x3D	; 61
    37de:	78 e0       	ldi	r23, 0x08	; 8
    37e0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - FSinfo sector         = "));DEBUG_ULONG(fsinfo_sector);DEBUG_P(PSTR("\r\n"));
    37e4:	80 91 90 02 	lds	r24, 0x0290
    37e8:	90 91 91 02 	lds	r25, 0x0291
    37ec:	6c e1       	ldi	r22, 0x1C	; 28
    37ee:	78 e0       	ldi	r23, 0x08	; 8
    37f0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    37f4:	c0 90 90 02 	lds	r12, 0x0290
    37f8:	d0 90 91 02 	lds	r13, 0x0291
    37fc:	60 91 db 03 	lds	r22, 0x03DB
    3800:	70 91 dc 03 	lds	r23, 0x03DC
    3804:	80 91 dd 03 	lds	r24, 0x03DD
    3808:	90 91 de 03 	lds	r25, 0x03DE
    380c:	46 ea       	ldi	r20, 0xA6	; 166
    380e:	52 e0       	ldi	r21, 0x02	; 2
    3810:	2a e0       	ldi	r18, 0x0A	; 10
    3812:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3816:	bc 01       	movw	r22, r24
    3818:	c6 01       	movw	r24, r12
    381a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    381e:	80 91 90 02 	lds	r24, 0x0290
    3822:	90 91 91 02 	lds	r25, 0x0291
    3826:	69 e1       	ldi	r22, 0x19	; 25
    3828:	78 e0       	ldi	r23, 0x08	; 8
    382a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - First reserved sector = "));DEBUG_ULONG(first_reserved_sector);DEBUG_P(PSTR("\r\n"));
    382e:	80 91 90 02 	lds	r24, 0x0290
    3832:	90 91 91 02 	lds	r25, 0x0291
    3836:	68 ef       	ldi	r22, 0xF8	; 248
    3838:	77 e0       	ldi	r23, 0x07	; 7
    383a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    383e:	c0 90 90 02 	lds	r12, 0x0290
    3842:	d0 90 91 02 	lds	r13, 0x0291
    3846:	60 91 bd 03 	lds	r22, 0x03BD
    384a:	70 91 be 03 	lds	r23, 0x03BE
    384e:	80 91 bf 03 	lds	r24, 0x03BF
    3852:	90 91 c0 03 	lds	r25, 0x03C0
    3856:	46 ea       	ldi	r20, 0xA6	; 166
    3858:	52 e0       	ldi	r21, 0x02	; 2
    385a:	2a e0       	ldi	r18, 0x0A	; 10
    385c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3860:	bc 01       	movw	r22, r24
    3862:	c6 01       	movw	r24, r12
    3864:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3868:	80 91 90 02 	lds	r24, 0x0290
    386c:	90 91 91 02 	lds	r25, 0x0291
    3870:	65 ef       	ldi	r22, 0xF5	; 245
    3872:	77 e0       	ldi	r23, 0x07	; 7
    3874:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Reserved sectors      = "));DEBUG_ULONG(total_reserved_sectors);DEBUG_P(PSTR("\r\n"));
    3878:	80 91 90 02 	lds	r24, 0x0290
    387c:	90 91 91 02 	lds	r25, 0x0291
    3880:	64 ed       	ldi	r22, 0xD4	; 212
    3882:	77 e0       	ldi	r23, 0x07	; 7
    3884:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3888:	c0 90 90 02 	lds	r12, 0x0290
    388c:	d0 90 91 02 	lds	r13, 0x0291
    3890:	60 91 c1 03 	lds	r22, 0x03C1
    3894:	70 91 c2 03 	lds	r23, 0x03C2
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	46 ea       	ldi	r20, 0xA6	; 166
    389e:	52 e0       	ldi	r21, 0x02	; 2
    38a0:	2a e0       	ldi	r18, 0x0A	; 10
    38a2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    38a6:	bc 01       	movw	r22, r24
    38a8:	c6 01       	movw	r24, r12
    38aa:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    38ae:	80 91 90 02 	lds	r24, 0x0290
    38b2:	90 91 91 02 	lds	r25, 0x0291
    38b6:	61 ed       	ldi	r22, 0xD1	; 209
    38b8:	77 e0       	ldi	r23, 0x07	; 7
    38ba:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - First fat sector      = "));DEBUG_ULONG(first_fat_sector);DEBUG_P(PSTR("\r\n"));
    38be:	80 91 90 02 	lds	r24, 0x0290
    38c2:	90 91 91 02 	lds	r25, 0x0291
    38c6:	60 eb       	ldi	r22, 0xB0	; 176
    38c8:	77 e0       	ldi	r23, 0x07	; 7
    38ca:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    38ce:	c0 90 90 02 	lds	r12, 0x0290
    38d2:	d0 90 91 02 	lds	r13, 0x0291
    38d6:	60 91 05 02 	lds	r22, 0x0205
    38da:	70 91 06 02 	lds	r23, 0x0206
    38de:	80 91 07 02 	lds	r24, 0x0207
    38e2:	90 91 08 02 	lds	r25, 0x0208
    38e6:	46 ea       	ldi	r20, 0xA6	; 166
    38e8:	52 e0       	ldi	r21, 0x02	; 2
    38ea:	2a e0       	ldi	r18, 0x0A	; 10
    38ec:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    38f0:	bc 01       	movw	r22, r24
    38f2:	c6 01       	movw	r24, r12
    38f4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    38f8:	80 91 90 02 	lds	r24, 0x0290
    38fc:	90 91 91 02 	lds	r25, 0x0291
    3900:	6d ea       	ldi	r22, 0xAD	; 173
    3902:	77 e0       	ldi	r23, 0x07	; 7
    3904:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Number of fat tables  = "));DEBUG_ULONG(total_fats);DEBUG_P(PSTR("\r\n"));
    3908:	80 91 90 02 	lds	r24, 0x0290
    390c:	90 91 91 02 	lds	r25, 0x0291
    3910:	6c e8       	ldi	r22, 0x8C	; 140
    3912:	77 e0       	ldi	r23, 0x07	; 7
    3914:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3918:	c0 90 90 02 	lds	r12, 0x0290
    391c:	d0 90 91 02 	lds	r13, 0x0291
    3920:	60 91 94 02 	lds	r22, 0x0294
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	46 ea       	ldi	r20, 0xA6	; 166
    392c:	52 e0       	ldi	r21, 0x02	; 2
    392e:	2a e0       	ldi	r18, 0x0A	; 10
    3930:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3934:	bc 01       	movw	r22, r24
    3936:	c6 01       	movw	r24, r12
    3938:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    393c:	80 91 90 02 	lds	r24, 0x0290
    3940:	90 91 91 02 	lds	r25, 0x0291
    3944:	69 e8       	ldi	r22, 0x89	; 137
    3946:	77 e0       	ldi	r23, 0x07	; 7
    3948:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Size of fat table     = "));DEBUG_ULONG(fat_size);DEBUG_P(PSTR("\r\n"));
    394c:	80 91 90 02 	lds	r24, 0x0290
    3950:	90 91 91 02 	lds	r25, 0x0291
    3954:	68 e6       	ldi	r22, 0x68	; 104
    3956:	77 e0       	ldi	r23, 0x07	; 7
    3958:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    395c:	c0 90 90 02 	lds	r12, 0x0290
    3960:	d0 90 91 02 	lds	r13, 0x0291
    3964:	60 91 c7 03 	lds	r22, 0x03C7
    3968:	70 91 c8 03 	lds	r23, 0x03C8
    396c:	80 91 c9 03 	lds	r24, 0x03C9
    3970:	90 91 ca 03 	lds	r25, 0x03CA
    3974:	46 ea       	ldi	r20, 0xA6	; 166
    3976:	52 e0       	ldi	r21, 0x02	; 2
    3978:	2a e0       	ldi	r18, 0x0A	; 10
    397a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    397e:	bc 01       	movw	r22, r24
    3980:	c6 01       	movw	r24, r12
    3982:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3986:	80 91 90 02 	lds	r24, 0x0290
    398a:	90 91 91 02 	lds	r25, 0x0291
    398e:	65 e6       	ldi	r22, 0x65	; 101
    3990:	77 e0       	ldi	r23, 0x07	; 7
    3992:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Fat sectors           = "));DEBUG_ULONG(total_fat_sectors);DEBUG_P(PSTR("\r\n"));
    3996:	80 91 90 02 	lds	r24, 0x0290
    399a:	90 91 91 02 	lds	r25, 0x0291
    399e:	64 e4       	ldi	r22, 0x44	; 68
    39a0:	77 e0       	ldi	r23, 0x07	; 7
    39a2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    39a6:	c0 90 90 02 	lds	r12, 0x0290
    39aa:	d0 90 91 02 	lds	r13, 0x0291
    39ae:	60 91 c3 03 	lds	r22, 0x03C3
    39b2:	70 91 c4 03 	lds	r23, 0x03C4
    39b6:	80 91 c5 03 	lds	r24, 0x03C5
    39ba:	90 91 c6 03 	lds	r25, 0x03C6
    39be:	46 ea       	ldi	r20, 0xA6	; 166
    39c0:	52 e0       	ldi	r21, 0x02	; 2
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    39c8:	bc 01       	movw	r22, r24
    39ca:	c6 01       	movw	r24, r12
    39cc:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    39d0:	80 91 90 02 	lds	r24, 0x0290
    39d4:	90 91 91 02 	lds	r25, 0x0291
    39d8:	61 e4       	ldi	r22, 0x41	; 65
    39da:	77 e0       	ldi	r23, 0x07	; 7
    39dc:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - First data sector     = "));DEBUG_ULONG(first_data_sector);DEBUG_P(PSTR("\r\n"));
    39e0:	80 91 90 02 	lds	r24, 0x0290
    39e4:	90 91 91 02 	lds	r25, 0x0291
    39e8:	60 e2       	ldi	r22, 0x20	; 32
    39ea:	77 e0       	ldi	r23, 0x07	; 7
    39ec:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    39f0:	c0 90 90 02 	lds	r12, 0x0290
    39f4:	d0 90 91 02 	lds	r13, 0x0291
    39f8:	60 91 cb 03 	lds	r22, 0x03CB
    39fc:	70 91 cc 03 	lds	r23, 0x03CC
    3a00:	80 91 cd 03 	lds	r24, 0x03CD
    3a04:	90 91 ce 03 	lds	r25, 0x03CE
    3a08:	46 ea       	ldi	r20, 0xA6	; 166
    3a0a:	52 e0       	ldi	r21, 0x02	; 2
    3a0c:	2a e0       	ldi	r18, 0x0A	; 10
    3a0e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3a12:	bc 01       	movw	r22, r24
    3a14:	c6 01       	movw	r24, r12
    3a16:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3a1a:	80 91 90 02 	lds	r24, 0x0290
    3a1e:	90 91 91 02 	lds	r25, 0x0291
    3a22:	6d e1       	ldi	r22, 0x1D	; 29
    3a24:	77 e0       	ldi	r23, 0x07	; 7
    3a26:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Data sectors          = "));DEBUG_ULONG(total_data_sectors);DEBUG_P(PSTR("\r\n"));
    3a2a:	80 91 90 02 	lds	r24, 0x0290
    3a2e:	90 91 91 02 	lds	r25, 0x0291
    3a32:	6c ef       	ldi	r22, 0xFC	; 252
    3a34:	76 e0       	ldi	r23, 0x06	; 6
    3a36:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3a3a:	c0 90 90 02 	lds	r12, 0x0290
    3a3e:	d0 90 91 02 	lds	r13, 0x0291
    3a42:	60 91 cf 03 	lds	r22, 0x03CF
    3a46:	70 91 d0 03 	lds	r23, 0x03D0
    3a4a:	80 91 d1 03 	lds	r24, 0x03D1
    3a4e:	90 91 d2 03 	lds	r25, 0x03D2
    3a52:	46 ea       	ldi	r20, 0xA6	; 166
    3a54:	52 e0       	ldi	r21, 0x02	; 2
    3a56:	2a e0       	ldi	r18, 0x0A	; 10
    3a58:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	c6 01       	movw	r24, r12
    3a60:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3a64:	80 91 90 02 	lds	r24, 0x0290
    3a68:	90 91 91 02 	lds	r25, 0x0291
    3a6c:	69 ef       	ldi	r22, 0xF9	; 249
    3a6e:	76 e0       	ldi	r23, 0x06	; 6
    3a70:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Root cluster          = "));DEBUG_ULONG(root_cluster);DEBUG_P(PSTR("\r\n"));
    3a74:	80 91 90 02 	lds	r24, 0x0290
    3a78:	90 91 91 02 	lds	r25, 0x0291
    3a7c:	68 ed       	ldi	r22, 0xD8	; 216
    3a7e:	76 e0       	ldi	r23, 0x06	; 6
    3a80:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3a84:	c0 90 90 02 	lds	r12, 0x0290
    3a88:	d0 90 91 02 	lds	r13, 0x0291
    3a8c:	60 91 d3 03 	lds	r22, 0x03D3
    3a90:	70 91 d4 03 	lds	r23, 0x03D4
    3a94:	80 91 d5 03 	lds	r24, 0x03D5
    3a98:	90 91 d6 03 	lds	r25, 0x03D6
    3a9c:	46 ea       	ldi	r20, 0xA6	; 166
    3a9e:	52 e0       	ldi	r21, 0x02	; 2
    3aa0:	2a e0       	ldi	r18, 0x0A	; 10
    3aa2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	c6 01       	movw	r24, r12
    3aaa:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3aae:	80 91 90 02 	lds	r24, 0x0290
    3ab2:	90 91 91 02 	lds	r25, 0x0291
    3ab6:	65 ed       	ldi	r22, 0xD5	; 213
    3ab8:	76 e0       	ldi	r23, 0x06	; 6
    3aba:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Total clusters        = "));DEBUG_ULONG(total_clusters);DEBUG_P(PSTR("\r\n"));
    3abe:	80 91 90 02 	lds	r24, 0x0290
    3ac2:	90 91 91 02 	lds	r25, 0x0291
    3ac6:	64 eb       	ldi	r22, 0xB4	; 180
    3ac8:	76 e0       	ldi	r23, 0x06	; 6
    3aca:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3ace:	c0 90 90 02 	lds	r12, 0x0290
    3ad2:	d0 90 91 02 	lds	r13, 0x0291
    3ad6:	60 91 d7 03 	lds	r22, 0x03D7
    3ada:	70 91 d8 03 	lds	r23, 0x03D8
    3ade:	80 91 d9 03 	lds	r24, 0x03D9
    3ae2:	90 91 da 03 	lds	r25, 0x03DA
    3ae6:	46 ea       	ldi	r20, 0xA6	; 166
    3ae8:	52 e0       	ldi	r21, 0x02	; 2
    3aea:	2a e0       	ldi	r18, 0x0A	; 10
    3aec:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3af0:	bc 01       	movw	r22, r24
    3af2:	c6 01       	movw	r24, r12
    3af4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3af8:	80 91 90 02 	lds	r24, 0x0290
    3afc:	90 91 91 02 	lds	r25, 0x0291
    3b00:	61 eb       	ldi	r22, 0xB1	; 177
    3b02:	76 e0       	ldi	r23, 0x06	; 6
    3b04:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - Free clusters         = "));DEBUG_ULONG(LEND_ULONG_READ(fsinfo_sector_ptr->total_free_clusters));DEBUG_P(PSTR("\r\n"));
    3b08:	80 91 90 02 	lds	r24, 0x0290
    3b0c:	90 91 91 02 	lds	r25, 0x0291
    3b10:	60 e9       	ldi	r22, 0x90	; 144
    3b12:	76 e0       	ldi	r23, 0x06	; 6
    3b14:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3b18:	c0 90 90 02 	lds	r12, 0x0290
    3b1c:	d0 90 91 02 	lds	r13, 0x0291
    3b20:	e8 ee       	ldi	r30, 0xE8	; 232
    3b22:	f1 e0       	ldi	r31, 0x01	; 1
    3b24:	8e 0e       	add	r8, r30
    3b26:	9f 1e       	adc	r9, r31
    3b28:	f4 01       	movw	r30, r8
    3b2a:	60 81       	ld	r22, Z
    3b2c:	71 81       	ldd	r23, Z+1	; 0x01
    3b2e:	82 81       	ldd	r24, Z+2	; 0x02
    3b30:	93 81       	ldd	r25, Z+3	; 0x03
    3b32:	46 ea       	ldi	r20, 0xA6	; 166
    3b34:	52 e0       	ldi	r21, 0x02	; 2
    3b36:	2a e0       	ldi	r18, 0x0A	; 10
    3b38:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3b3c:	bc 01       	movw	r22, r24
    3b3e:	c6 01       	movw	r24, r12
    3b40:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    3b44:	80 91 90 02 	lds	r24, 0x0290
    3b48:	90 91 91 02 	lds	r25, 0x0291
    3b4c:	6d e8       	ldi	r22, 0x8D	; 141
    3b4e:	76 e0       	ldi	r23, 0x06	; 6
    3b50:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		
		
		sectors_per_cluster_power=0;
		tempchar=sectors_per_cluster;	//always a power of 2
    3b54:	90 91 bc 03 	lds	r25, 0x03BC
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	02 c0       	rjmp	.+4      	; 0x3b60 <fat_init+0x816>
		while(!(tempchar & 1))
		{
			sectors_per_cluster_power++;
			tempchar>>=1;
    3b5c:	96 95       	lsr	r25
    3b5e:	82 2f       	mov	r24, r18
    3b60:	28 2f       	mov	r18, r24
    3b62:	2f 5f       	subi	r18, 0xFF	; 255
		DEBUG_P(PSTR("FAT32 - Free clusters         = "));DEBUG_ULONG(LEND_ULONG_READ(fsinfo_sector_ptr->total_free_clusters));DEBUG_P(PSTR("\r\n"));
		
		
		sectors_per_cluster_power=0;
		tempchar=sectors_per_cluster;	//always a power of 2
		while(!(tempchar & 1))
    3b64:	90 ff       	sbrs	r25, 0
    3b66:	fa cf       	rjmp	.-12     	; 0x3b5c <fat_init+0x812>
    3b68:	80 93 95 02 	sts	0x0295, r24
			tempchar>>=1;
		};
	};

	return success;
}
    3b6c:	8f 2d       	mov	r24, r15
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	1f 91       	pop	r17
    3b74:	0f 91       	pop	r16
    3b76:	ff 90       	pop	r15
    3b78:	ef 90       	pop	r14
    3b7a:	df 90       	pop	r13
    3b7c:	cf 90       	pop	r12
    3b7e:	bf 90       	pop	r11
    3b80:	af 90       	pop	r10
    3b82:	9f 90       	pop	r9
    3b84:	8f 90       	pop	r8
    3b86:	7f 90       	pop	r7
    3b88:	6f 90       	pop	r6
    3b8a:	5f 90       	pop	r5
    3b8c:	4f 90       	pop	r4
    3b8e:	3f 90       	pop	r3
    3b90:	2f 90       	pop	r2
    3b92:	08 95       	ret

00003b94 <cluster_link_read>:
}

//read cluster link from FAT, which == the next cluster in the chain
//returns 0 if EOF or reserved or free
static unsigned long cluster_link_read(unsigned long cluster)
{
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	7b 01       	movw	r14, r22
    3b9e:	8c 01       	movw	r16, r24
	unsigned long *table_ptr;

	entry_index = cluster&0x0000007Ful;		//entry index within it's sector
	

	if(cluster<2)
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	e8 16       	cp	r14, r24
    3ba4:	f1 04       	cpc	r15, r1
    3ba6:	01 05       	cpc	r16, r1
    3ba8:	11 05       	cpc	r17, r1
    3baa:	a8 f1       	brcs	.+106    	; 0x3c16 <cluster_link_read+0x82>
		cluster=0;
	else
	{
		cluster>>=7;					//convert cluster number to sector
    3bac:	c8 01       	movw	r24, r16
    3bae:	b7 01       	movw	r22, r14
    3bb0:	57 e0       	ldi	r21, 0x07	; 7
    3bb2:	96 95       	lsr	r25
    3bb4:	87 95       	ror	r24
    3bb6:	77 95       	ror	r23
    3bb8:	67 95       	ror	r22
    3bba:	5a 95       	dec	r21
    3bbc:	d1 f7       	brne	.-12     	; 0x3bb2 <cluster_link_read+0x1e>
		cluster+=first_fat_sector;
		
		//read fat sector containing the entry we want
		table_ptr=fatcache_sector(cluster, FAT_READ);
    3bbe:	20 91 05 02 	lds	r18, 0x0205
    3bc2:	30 91 06 02 	lds	r19, 0x0206
    3bc6:	40 91 07 02 	lds	r20, 0x0207
    3bca:	50 91 08 02 	lds	r21, 0x0208
    3bce:	62 0f       	add	r22, r18
    3bd0:	73 1f       	adc	r23, r19
    3bd2:	84 1f       	adc	r24, r20
    3bd4:	95 1f       	adc	r25, r21
    3bd6:	41 e0       	ldi	r20, 0x01	; 1
    3bd8:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    3bdc:	fc 01       	movw	r30, r24
		if(table_ptr)		
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	d1 f0       	breq	.+52     	; 0x3c16 <cluster_link_read+0x82>
		{
			cluster=LEND_ULONG_READ(table_ptr[entry_index]);	//read entry
    3be2:	8e 2d       	mov	r24, r14
    3be4:	8f 77       	andi	r24, 0x7F	; 127
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	88 0f       	add	r24, r24
    3bee:	99 1f       	adc	r25, r25
    3bf0:	e8 0f       	add	r30, r24
    3bf2:	f9 1f       	adc	r31, r25
    3bf4:	20 81       	ld	r18, Z
    3bf6:	31 81       	ldd	r19, Z+1	; 0x01
    3bf8:	42 81       	ldd	r20, Z+2	; 0x02
    3bfa:	53 81       	ldd	r21, Z+3	; 0x03
			
			if(cluster < 2ul)
    3bfc:	22 30       	cpi	r18, 0x02	; 2
    3bfe:	31 05       	cpc	r19, r1
    3c00:	41 05       	cpc	r20, r1
    3c02:	51 05       	cpc	r21, r1
    3c04:	40 f0       	brcs	.+16     	; 0x3c16 <cluster_link_read+0x82>
				cluster=0;
			if(cluster > 0x0FFFFFEFul)
    3c06:	20 3f       	cpi	r18, 0xF0	; 240
    3c08:	8f ef       	ldi	r24, 0xFF	; 255
    3c0a:	38 07       	cpc	r19, r24
    3c0c:	8f ef       	ldi	r24, 0xFF	; 255
    3c0e:	48 07       	cpc	r20, r24
    3c10:	8f e0       	ldi	r24, 0x0F	; 15
    3c12:	58 07       	cpc	r21, r24
    3c14:	20 f0       	brcs	.+8      	; 0x3c1e <cluster_link_read+0x8a>
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
		else
			cluster=0;
	};

	return cluster;
}
    3c1e:	b9 01       	movw	r22, r18
    3c20:	ca 01       	movw	r24, r20
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	ff 90       	pop	r15
    3c28:	ef 90       	pop	r14
    3c2a:	08 95       	ret

00003c2c <chain_length>:
//**************************************************************************************************************************************************************
//**************************************************************************************************************************************************************

//return chain length, also returns last cluster in chain, if pointer is not NULL
static unsigned long chain_length(unsigned long cluster, unsigned long *last_cluster)
{
    3c2c:	af 92       	push	r10
    3c2e:	bf 92       	push	r11
    3c30:	cf 92       	push	r12
    3c32:	df 92       	push	r13
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	5b 01       	movw	r10, r22
    3c42:	6c 01       	movw	r12, r24
    3c44:	ea 01       	movw	r28, r20
    3c46:	ee 24       	eor	r14, r14
    3c48:	ff 24       	eor	r15, r15
    3c4a:	87 01       	movw	r16, r14
	char finished=FALSE;

	//determine size of chain by counting how many clusters it contains
	do
	{
		type=cluster_type_read(cluster);
    3c4c:	c6 01       	movw	r24, r12
    3c4e:	b5 01       	movw	r22, r10
    3c50:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
		
		//if not last, follow link	
		if(type == CLUSTER_TYPE_USED)		
    3c54:	82 30       	cpi	r24, 0x02	; 2
    3c56:	61 f4       	brne	.+24     	; 0x3c70 <chain_length+0x44>
		{
			length++;
    3c58:	08 94       	sec
    3c5a:	e1 1c       	adc	r14, r1
    3c5c:	f1 1c       	adc	r15, r1
    3c5e:	01 1d       	adc	r16, r1
    3c60:	11 1d       	adc	r17, r1
			cluster = cluster_link_read(cluster);
    3c62:	c6 01       	movw	r24, r12
    3c64:	b5 01       	movw	r22, r10
    3c66:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <cluster_link_read>
    3c6a:	5b 01       	movw	r10, r22
    3c6c:	6c 01       	movw	r12, r24
    3c6e:	ee cf       	rjmp	.-36     	; 0x3c4c <chain_length+0x20>
		}
		else if (type == CLUSTER_TYPE_LAST)
    3c70:	83 30       	cpi	r24, 0x03	; 3
    3c72:	59 f4       	brne	.+22     	; 0x3c8a <chain_length+0x5e>
		{
			length++;
    3c74:	08 94       	sec
    3c76:	e1 1c       	adc	r14, r1
    3c78:	f1 1c       	adc	r15, r1
    3c7a:	01 1d       	adc	r16, r1
    3c7c:	11 1d       	adc	r17, r1
			finished=TRUE;
			if(last_cluster)
    3c7e:	20 97       	sbiw	r28, 0x00	; 0
    3c80:	21 f0       	breq	.+8      	; 0x3c8a <chain_length+0x5e>
				*last_cluster=cluster;
    3c82:	a8 82       	st	Y, r10
    3c84:	b9 82       	std	Y+1, r11	; 0x01
    3c86:	ca 82       	std	Y+2, r12	; 0x02
    3c88:	db 82       	std	Y+3, r13	; 0x03
			finished=TRUE;
		
	}while(!finished);

	return length;
}
    3c8a:	b7 01       	movw	r22, r14
    3c8c:	c8 01       	movw	r24, r16
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	ff 90       	pop	r15
    3c98:	ef 90       	pop	r14
    3c9a:	df 90       	pop	r13
    3c9c:	cf 90       	pop	r12
    3c9e:	bf 90       	pop	r11
    3ca0:	af 90       	pop	r10
    3ca2:	08 95       	ret

00003ca4 <fat_debug_fat>:
//**************************************************************************************************************************************************************
//**************************************************************************************************************************************************************

#ifdef DEBUG_ON
void fat_debug_fat(unsigned long cluster)
{
    3ca4:	8f 92       	push	r8
    3ca6:	9f 92       	push	r9
    3ca8:	af 92       	push	r10
    3caa:	bf 92       	push	r11
    3cac:	cf 92       	push	r12
    3cae:	df 92       	push	r13
    3cb0:	ef 92       	push	r14
    3cb2:	0f 93       	push	r16
    3cb4:	1f 93       	push	r17
    3cb6:	4b 01       	movw	r8, r22
    3cb8:	5c 01       	movw	r10, r24
	unsigned char tempchar=20;
	
	DEBUG_P(PSTR("FAT32 - **DEBUG** FAT TABLE LIST\r\n"));
    3cba:	80 91 90 02 	lds	r24, 0x0290
    3cbe:	90 91 91 02 	lds	r25, 0x0291
    3cc2:	6b e5       	ldi	r22, 0x5B	; 91
    3cc4:	75 e1       	ldi	r23, 0x15	; 21
    3cc6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3cca:	14 e1       	ldi	r17, 0x14	; 20
    3ccc:	5d c0       	rjmp	.+186    	; 0x3d88 <fat_debug_fat+0xe4>
	while(tempchar--)
	{
		DEBUG_ULONG_FIXED(cluster, 10);
    3cce:	c0 90 90 02 	lds	r12, 0x0290
    3cd2:	d0 90 91 02 	lds	r13, 0x0291
    3cd6:	c5 01       	movw	r24, r10
    3cd8:	b4 01       	movw	r22, r8
    3cda:	46 ea       	ldi	r20, 0xA6	; 166
    3cdc:	52 e0       	ldi	r21, 0x02	; 2
    3cde:	2a e0       	ldi	r18, 0x0A	; 10
    3ce0:	0a e0       	ldi	r16, 0x0A	; 10
    3ce2:	f0 e2       	ldi	r31, 0x20	; 32
    3ce4:	ef 2e       	mov	r14, r31
    3ce6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3cea:	bc 01       	movw	r22, r24
    3cec:	c6 01       	movw	r24, r12
    3cee:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		switch(cluster_type_read(cluster))
    3cf2:	c5 01       	movw	r24, r10
    3cf4:	b4 01       	movw	r22, r8
    3cf6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
    3cfa:	81 30       	cpi	r24, 0x01	; 1
    3cfc:	71 f0       	breq	.+28     	; 0x3d1a <fat_debug_fat+0x76>
    3cfe:	81 30       	cpi	r24, 0x01	; 1
    3d00:	28 f0       	brcs	.+10     	; 0x3d0c <fat_debug_fat+0x68>
    3d02:	82 30       	cpi	r24, 0x02	; 2
    3d04:	89 f0       	breq	.+34     	; 0x3d28 <fat_debug_fat+0x84>
    3d06:	83 30       	cpi	r24, 0x03	; 3
    3d08:	d1 f5       	brne	.+116    	; 0x3d7e <fat_debug_fat+0xda>
    3d0a:	31 c0       	rjmp	.+98     	; 0x3d6e <fat_debug_fat+0xca>
		{
			case CLUSTER_TYPE_FREE:
				DEBUG_P(PSTR("  free ...\r\n"));
    3d0c:	80 91 90 02 	lds	r24, 0x0290
    3d10:	90 91 91 02 	lds	r25, 0x0291
    3d14:	6e e4       	ldi	r22, 0x4E	; 78
    3d16:	75 e1       	ldi	r23, 0x15	; 21
    3d18:	30 c0       	rjmp	.+96     	; 0x3d7a <fat_debug_fat+0xd6>
				break;
			case CLUSTER_TYPE_RESERVED:
				DEBUG_P(PSTR("  RESERVED\r\n"));
    3d1a:	80 91 90 02 	lds	r24, 0x0290
    3d1e:	90 91 91 02 	lds	r25, 0x0291
    3d22:	61 e4       	ldi	r22, 0x41	; 65
    3d24:	75 e1       	ldi	r23, 0x15	; 21
    3d26:	29 c0       	rjmp	.+82     	; 0x3d7a <fat_debug_fat+0xd6>
				break;
			case CLUSTER_TYPE_USED:
				DEBUG_P(PSTR("  LINK  -> "));
    3d28:	80 91 90 02 	lds	r24, 0x0290
    3d2c:	90 91 91 02 	lds	r25, 0x0291
    3d30:	65 e3       	ldi	r22, 0x35	; 53
    3d32:	75 e1       	ldi	r23, 0x15	; 21
    3d34:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG_FIXED(cluster_link_read(cluster), 10);
    3d38:	c0 90 90 02 	lds	r12, 0x0290
    3d3c:	d0 90 91 02 	lds	r13, 0x0291
    3d40:	c5 01       	movw	r24, r10
    3d42:	b4 01       	movw	r22, r8
    3d44:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <cluster_link_read>
    3d48:	46 ea       	ldi	r20, 0xA6	; 166
    3d4a:	52 e0       	ldi	r21, 0x02	; 2
    3d4c:	2a e0       	ldi	r18, 0x0A	; 10
    3d4e:	0a e0       	ldi	r16, 0x0A	; 10
    3d50:	e0 e2       	ldi	r30, 0x20	; 32
    3d52:	ee 2e       	mov	r14, r30
    3d54:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3d58:	bc 01       	movw	r22, r24
    3d5a:	c6 01       	movw	r24, r12
    3d5c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    3d60:	80 91 90 02 	lds	r24, 0x0290
    3d64:	90 91 91 02 	lds	r25, 0x0291
    3d68:	62 e3       	ldi	r22, 0x32	; 50
    3d6a:	75 e1       	ldi	r23, 0x15	; 21
    3d6c:	06 c0       	rjmp	.+12     	; 0x3d7a <fat_debug_fat+0xd6>
				break;
			case CLUSTER_TYPE_LAST:
				DEBUG_P(PSTR("  FINAL -> << CHAIN END >>\r\n"));
    3d6e:	80 91 90 02 	lds	r24, 0x0290
    3d72:	90 91 91 02 	lds	r25, 0x0291
    3d76:	65 e1       	ldi	r22, 0x15	; 21
    3d78:	75 e1       	ldi	r23, 0x15	; 21
    3d7a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				break;
		};
		cluster++;
    3d7e:	08 94       	sec
    3d80:	81 1c       	adc	r8, r1
    3d82:	91 1c       	adc	r9, r1
    3d84:	a1 1c       	adc	r10, r1
    3d86:	b1 1c       	adc	r11, r1
void fat_debug_fat(unsigned long cluster)
{
	unsigned char tempchar=20;
	
	DEBUG_P(PSTR("FAT32 - **DEBUG** FAT TABLE LIST\r\n"));
	while(tempchar--)
    3d88:	11 50       	subi	r17, 0x01	; 1
    3d8a:	08 f0       	brcs	.+2      	; 0x3d8e <fat_debug_fat+0xea>
    3d8c:	a0 cf       	rjmp	.-192    	; 0x3cce <fat_debug_fat+0x2a>
				DEBUG_P(PSTR("  FINAL -> << CHAIN END >>\r\n"));
				break;
		};
		cluster++;
	};
}
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	ef 90       	pop	r14
    3d94:	df 90       	pop	r13
    3d96:	cf 90       	pop	r12
    3d98:	bf 90       	pop	r11
    3d9a:	af 90       	pop	r10
    3d9c:	9f 90       	pop	r9
    3d9e:	8f 90       	pop	r8
    3da0:	08 95       	ret

00003da2 <chain_get_sector_ptr>:
}

//returns a pointer to the required sector within a chain
//if read_write_erase =! FAT_READ, then the media will not be read, and the cache buffer will be marked dirty
static void* chain_get_sector_ptr(struct fat_chain_struct *chain_ptr, unsigned long byte_address, char read_write_erase)
{
    3da2:	2f 92       	push	r2
    3da4:	3f 92       	push	r3
    3da6:	4f 92       	push	r4
    3da8:	5f 92       	push	r5
    3daa:	6f 92       	push	r6
    3dac:	7f 92       	push	r7
    3dae:	8f 92       	push	r8
    3db0:	9f 92       	push	r9
    3db2:	af 92       	push	r10
    3db4:	bf 92       	push	r11
    3db6:	cf 92       	push	r12
    3db8:	df 92       	push	r13
    3dba:	ef 92       	push	r14
    3dbc:	ff 92       	push	r15
    3dbe:	0f 93       	push	r16
    3dc0:	1f 93       	push	r17
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	2b 97       	sbiw	r28, 0x0b	; 11
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	9b 87       	std	Y+11, r25	; 0x0b
    3dd8:	8a 87       	std	Y+10, r24	; 0x0a
    3dda:	4d 83       	std	Y+5, r20	; 0x05
    3ddc:	5e 83       	std	Y+6, r21	; 0x06
    3dde:	6f 83       	std	Y+7, r22	; 0x07
    3de0:	78 87       	std	Y+8, r23	; 0x08
    3de2:	29 87       	std	Y+9, r18	; 0x09

	unsigned long templong;
	char* retval=NULL;
	
	//determine required logical sector from byte address/512
	required_sector_logical = byte_address >> 9;
    3de4:	db 01       	movw	r26, r22
    3de6:	ca 01       	movw	r24, r20
    3de8:	19 e0       	ldi	r17, 0x09	; 9
    3dea:	b6 95       	lsr	r27
    3dec:	a7 95       	ror	r26
    3dee:	97 95       	ror	r25
    3df0:	87 95       	ror	r24
    3df2:	1a 95       	dec	r17
    3df4:	d1 f7       	brne	.-12     	; 0x3dea <chain_get_sector_ptr+0x48>
    3df6:	89 83       	std	Y+1, r24	; 0x01
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	ab 83       	std	Y+3, r26	; 0x03
    3dfc:	bc 83       	std	Y+4, r27	; 0x04
 
	//determine required logical cluster from required logical sector (logical clusters start from 0)
	required_cluster_logical = required_sector_logical >> sectors_per_cluster_power;
    3dfe:	2c 01       	movw	r4, r24
    3e00:	3d 01       	movw	r6, r26
    3e02:	00 90 95 02 	lds	r0, 0x0295
    3e06:	04 c0       	rjmp	.+8      	; 0x3e10 <chain_get_sector_ptr+0x6e>
    3e08:	76 94       	lsr	r7
    3e0a:	67 94       	ror	r6
    3e0c:	57 94       	ror	r5
    3e0e:	47 94       	ror	r4
    3e10:	0a 94       	dec	r0
    3e12:	d2 f7       	brpl	.-12     	; 0x3e08 <chain_get_sector_ptr+0x66>

	//if same logical cluster
	if(required_cluster_logical == chain_ptr->logical)
    3e14:	ea 85       	ldd	r30, Y+10	; 0x0a
    3e16:	fb 85       	ldd	r31, Y+11	; 0x0b
    3e18:	80 85       	ldd	r24, Z+8	; 0x08
    3e1a:	91 85       	ldd	r25, Z+9	; 0x09
    3e1c:	a2 85       	ldd	r26, Z+10	; 0x0a
    3e1e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3e20:	48 16       	cp	r4, r24
    3e22:	59 06       	cpc	r5, r25
    3e24:	6a 06       	cpc	r6, r26
    3e26:	7b 06       	cpc	r7, r27
    3e28:	29 f4       	brne	.+10     	; 0x3e34 <chain_get_sector_ptr+0x92>
	{
		//then same physical cluster (no need to search chain)
		required_cluster_physical = chain_ptr->physical;	
    3e2a:	84 80       	ldd	r8, Z+4	; 0x04
    3e2c:	95 80       	ldd	r9, Z+5	; 0x05
    3e2e:	a6 80       	ldd	r10, Z+6	; 0x06
    3e30:	b7 80       	ldd	r11, Z+7	; 0x07
    3e32:	31 c0       	rjmp	.+98     	; 0x3e96 <chain_get_sector_ptr+0xf4>
	}
	//searching chain
	else
	{
		//need to search from start of chain?
		if(required_cluster_logical < chain_ptr->logical)
    3e34:	48 16       	cp	r4, r24
    3e36:	59 06       	cpc	r5, r25
    3e38:	6a 06       	cpc	r6, r26
    3e3a:	7b 06       	cpc	r7, r27
    3e3c:	48 f4       	brcc	.+18     	; 0x3e50 <chain_get_sector_ptr+0xae>
		{
			//search from start
			templong = required_cluster_logical;
			required_cluster_physical = chain_ptr->base;	//start with the base cluster (logical cluster 0)
    3e3e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3e40:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e42:	8d 90       	ld	r8, X+
    3e44:	9d 90       	ld	r9, X+
    3e46:	ad 90       	ld	r10, X+
    3e48:	bc 90       	ld	r11, X
    3e4a:	83 01       	movw	r16, r6
    3e4c:	72 01       	movw	r14, r4
    3e4e:	13 c0       	rjmp	.+38     	; 0x3e76 <chain_get_sector_ptr+0xd4>
		}
		else
		{
			//search from current
			templong = required_cluster_logical - chain_ptr->logical;
    3e50:	83 01       	movw	r16, r6
    3e52:	72 01       	movw	r14, r4
    3e54:	e8 1a       	sub	r14, r24
    3e56:	f9 0a       	sbc	r15, r25
    3e58:	0a 0b       	sbc	r16, r26
    3e5a:	1b 0b       	sbc	r17, r27
			required_cluster_physical = chain_ptr->physical;
    3e5c:	ea 85       	ldd	r30, Y+10	; 0x0a
    3e5e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3e60:	84 80       	ldd	r8, Z+4	; 0x04
    3e62:	95 80       	ldd	r9, Z+5	; 0x05
    3e64:	a6 80       	ldd	r10, Z+6	; 0x06
    3e66:	b7 80       	ldd	r11, Z+7	; 0x07
    3e68:	06 c0       	rjmp	.+12     	; 0x3e76 <chain_get_sector_ptr+0xd4>
		};
		
		//find required physical cluster from fat table
		while(templong-- && required_cluster_physical)
			required_cluster_physical = cluster_link_read(required_cluster_physical);	//returns 0 if fat entry does not contain a link
    3e6a:	c5 01       	movw	r24, r10
    3e6c:	b4 01       	movw	r22, r8
    3e6e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <cluster_link_read>
    3e72:	4b 01       	movw	r8, r22
    3e74:	5c 01       	movw	r10, r24
			templong = required_cluster_logical - chain_ptr->logical;
			required_cluster_physical = chain_ptr->physical;
		};
		
		//find required physical cluster from fat table
		while(templong-- && required_cluster_physical)
    3e76:	e1 14       	cp	r14, r1
    3e78:	f1 04       	cpc	r15, r1
    3e7a:	01 05       	cpc	r16, r1
    3e7c:	11 05       	cpc	r17, r1
    3e7e:	59 f0       	breq	.+22     	; 0x3e96 <chain_get_sector_ptr+0xf4>
    3e80:	08 94       	sec
    3e82:	e1 08       	sbc	r14, r1
    3e84:	f1 08       	sbc	r15, r1
    3e86:	01 09       	sbc	r16, r1
    3e88:	11 09       	sbc	r17, r1
    3e8a:	81 14       	cp	r8, r1
    3e8c:	91 04       	cpc	r9, r1
    3e8e:	a1 04       	cpc	r10, r1
    3e90:	b1 04       	cpc	r11, r1
    3e92:	59 f7       	brne	.-42     	; 0x3e6a <chain_get_sector_ptr+0xc8>
    3e94:	84 c0       	rjmp	.+264    	; 0x3f9e <chain_get_sector_ptr+0x1fc>
			required_cluster_physical = cluster_link_read(required_cluster_physical);	//returns 0 if fat entry does not contain a link
	};
	
	//if an error did not occur
	if(required_cluster_physical)
    3e96:	81 14       	cp	r8, r1
    3e98:	91 04       	cpc	r9, r1
    3e9a:	a1 04       	cpc	r10, r1
    3e9c:	b1 04       	cpc	r11, r1
    3e9e:	09 f4       	brne	.+2      	; 0x3ea2 <chain_get_sector_ptr+0x100>
    3ea0:	7e c0       	rjmp	.+252    	; 0x3f9e <chain_get_sector_ptr+0x1fc>

// return first physical sector number of a physical cluster
static unsigned long physec_of_phyclust(unsigned long cluster)
{
	cluster-=root_cluster;	
    3ea2:	80 91 d3 03 	lds	r24, 0x03D3
    3ea6:	90 91 d4 03 	lds	r25, 0x03D4
    3eaa:	a0 91 d5 03 	lds	r26, 0x03D5
    3eae:	b0 91 d6 03 	lds	r27, 0x03D6
    3eb2:	a5 01       	movw	r20, r10
    3eb4:	94 01       	movw	r18, r8
    3eb6:	28 1b       	sub	r18, r24
    3eb8:	39 0b       	sbc	r19, r25
    3eba:	4a 0b       	sbc	r20, r26
    3ebc:	5b 0b       	sbc	r21, r27
	cluster <<= sectors_per_cluster_power;

	return first_data_sector + cluster;
    3ebe:	80 91 bc 03 	lds	r24, 0x03BC
    3ec2:	e8 2e       	mov	r14, r24
    3ec4:	ff 24       	eor	r15, r15
    3ec6:	00 e0       	ldi	r16, 0x00	; 0
    3ec8:	10 e0       	ldi	r17, 0x00	; 0
    3eca:	08 94       	sec
    3ecc:	e1 08       	sbc	r14, r1
    3ece:	f1 08       	sbc	r15, r1
    3ed0:	01 09       	sbc	r16, r1
    3ed2:	11 09       	sbc	r17, r1
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed8:	ab 81       	ldd	r26, Y+3	; 0x03
    3eda:	bc 81       	ldd	r27, Y+4	; 0x04
    3edc:	e8 22       	and	r14, r24
    3ede:	f9 22       	and	r15, r25
    3ee0:	0a 23       	and	r16, r26
    3ee2:	1b 23       	and	r17, r27
    3ee4:	80 91 cb 03 	lds	r24, 0x03CB
    3ee8:	90 91 cc 03 	lds	r25, 0x03CC
    3eec:	a0 91 cd 03 	lds	r26, 0x03CD
    3ef0:	b0 91 ce 03 	lds	r27, 0x03CE
    3ef4:	e8 0e       	add	r14, r24
    3ef6:	f9 1e       	adc	r15, r25
    3ef8:	0a 1f       	adc	r16, r26
    3efa:	1b 1f       	adc	r17, r27
	{
		//determine required physical sector from sector offset within cluster
		//sectors_per_cluster is always a ^ of 2, so sector & sectors_pre_cluster-1 should give us sector offset within the cluster
		
		required_sector_physical = physec_of_phyclust(required_cluster_physical);			//first sector of required cluster
		required_sector_physical += required_sector_logical & (((unsigned long)sectors_per_cluster)-1ul);	//+sector offset within cluster
    3efc:	00 90 95 02 	lds	r0, 0x0295
    3f00:	04 c0       	rjmp	.+8      	; 0x3f0a <chain_get_sector_ptr+0x168>
    3f02:	22 0f       	add	r18, r18
    3f04:	33 1f       	adc	r19, r19
    3f06:	44 1f       	adc	r20, r20
    3f08:	55 1f       	adc	r21, r21
    3f0a:	0a 94       	dec	r0
    3f0c:	d2 f7       	brpl	.-12     	; 0x3f02 <chain_get_sector_ptr+0x160>
    3f0e:	e2 0e       	add	r14, r18
    3f10:	f3 1e       	adc	r15, r19
    3f12:	04 1f       	adc	r16, r20
    3f14:	15 1f       	adc	r17, r21
		
		//if we are writing or erasing entire sector, no need to read it first
		if(read_write_erase != FAT_READ)
    3f16:	99 85       	ldd	r25, Y+9	; 0x09
    3f18:	91 30       	cpi	r25, 0x01	; 1
    3f1a:	21 f0       	breq	.+8      	; 0x3f24 <chain_get_sector_ptr+0x182>
			retval = fatcache_sector(required_sector_physical, FAT_WRITE);
    3f1c:	c8 01       	movw	r24, r16
    3f1e:	b7 01       	movw	r22, r14
    3f20:	40 e0       	ldi	r20, 0x00	; 0
    3f22:	03 c0       	rjmp	.+6      	; 0x3f2a <chain_get_sector_ptr+0x188>
		//else read sector into the buffer
		else
			retval = fatcache_sector(required_sector_physical, FAT_READ);
    3f24:	c8 01       	movw	r24, r16
    3f26:	b7 01       	movw	r22, r14
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    3f2e:	1c 01       	movw	r2, r24
		
		if(!retval)
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	11 f0       	breq	.+4      	; 0x3f38 <chain_get_sector_ptr+0x196>
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	22 c0       	rjmp	.+68     	; 0x3f7c <chain_get_sector_ptr+0x1da>
		{
			success=FALSE;
			DEBUG_P(PSTR("FAT32 - ERROR, Chain, unable to access physical sector "));
    3f38:	80 91 90 02 	lds	r24, 0x0290
    3f3c:	90 91 91 02 	lds	r25, 0x0291
    3f40:	6a e8       	ldi	r22, 0x8A	; 138
    3f42:	7a e0       	ldi	r23, 0x0A	; 10
    3f44:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(required_sector_physical);
    3f48:	c0 90 90 02 	lds	r12, 0x0290
    3f4c:	d0 90 91 02 	lds	r13, 0x0291
    3f50:	c8 01       	movw	r24, r16
    3f52:	b7 01       	movw	r22, r14
    3f54:	46 ea       	ldi	r20, 0xA6	; 166
    3f56:	52 e0       	ldi	r21, 0x02	; 2
    3f58:	2a e0       	ldi	r18, 0x0A	; 10
    3f5a:	00 e0       	ldi	r16, 0x00	; 0
    3f5c:	ee 24       	eor	r14, r14
    3f5e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    3f62:	bc 01       	movw	r22, r24
    3f64:	c6 01       	movw	r24, r12
    3f66:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    3f6a:	80 91 90 02 	lds	r24, 0x0290
    3f6e:	90 91 91 02 	lds	r25, 0x0291
    3f72:	67 e8       	ldi	r22, 0x87	; 135
    3f74:	7a e0       	ldi	r23, 0x0A	; 10
    3f76:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
		};
		//previous = current
		chain_ptr->physical = required_cluster_physical;	
    3f7c:	aa 85       	ldd	r26, Y+10	; 0x0a
    3f7e:	bb 85       	ldd	r27, Y+11	; 0x0b
    3f80:	14 96       	adiw	r26, 0x04	; 4
    3f82:	8d 92       	st	X+, r8
    3f84:	9d 92       	st	X+, r9
    3f86:	ad 92       	st	X+, r10
    3f88:	bc 92       	st	X, r11
    3f8a:	17 97       	sbiw	r26, 0x07	; 7
		chain_ptr->logical = required_cluster_logical;
    3f8c:	fd 01       	movw	r30, r26
    3f8e:	40 86       	std	Z+8, r4	; 0x08
    3f90:	51 86       	std	Z+9, r5	; 0x09
    3f92:	62 86       	std	Z+10, r6	; 0x0a
    3f94:	73 86       	std	Z+11, r7	; 0x0b
	{
		DEBUG_P(PSTR("FAT32 - ERROR, Chain, unable to determine physical cluster from FAT chain.\r\n"));
		success=FALSE;
	};
	
	if(!success)
    3f96:	88 23       	and	r24, r24
    3f98:	09 f0       	breq	.+2      	; 0x3f9c <chain_get_sector_ptr+0x1fa>
    3f9a:	97 c0       	rjmp	.+302    	; 0x40ca <chain_get_sector_ptr+0x328>
    3f9c:	0a c0       	rjmp	.+20     	; 0x3fb2 <chain_get_sector_ptr+0x210>
		chain_ptr->physical = required_cluster_physical;	
		chain_ptr->logical = required_cluster_logical;
	}
	else
	{
		DEBUG_P(PSTR("FAT32 - ERROR, Chain, unable to determine physical cluster from FAT chain.\r\n"));
    3f9e:	80 91 90 02 	lds	r24, 0x0290
    3fa2:	90 91 91 02 	lds	r25, 0x0291
    3fa6:	6a e3       	ldi	r22, 0x3A	; 58
    3fa8:	7a e0       	ldi	r23, 0x0A	; 10
    3faa:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    3fae:	22 24       	eor	r2, r2
    3fb0:	33 24       	eor	r3, r3
		success=FALSE;
	};
	
	if(!success)
	{
		DEBUG_P(PSTR("FAT32 - ERROR, Chain "));
    3fb2:	80 91 90 02 	lds	r24, 0x0290
    3fb6:	90 91 91 02 	lds	r25, 0x0291
    3fba:	64 e2       	ldi	r22, 0x24	; 36
    3fbc:	7a e0       	ldi	r23, 0x0A	; 10
    3fbe:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		if(read_write_erase==FAT_READ)
    3fc2:	f9 85       	ldd	r31, Y+9	; 0x09
    3fc4:	f1 30       	cpi	r31, 0x01	; 1
    3fc6:	39 f4       	brne	.+14     	; 0x3fd6 <chain_get_sector_ptr+0x234>
			DEBUG_P(PSTR("read"));
    3fc8:	80 91 90 02 	lds	r24, 0x0290
    3fcc:	90 91 91 02 	lds	r25, 0x0291
    3fd0:	6f e1       	ldi	r22, 0x1F	; 31
    3fd2:	7a e0       	ldi	r23, 0x0A	; 10
    3fd4:	0c c0       	rjmp	.+24     	; 0x3fee <chain_get_sector_ptr+0x24c>
    3fd6:	80 91 90 02 	lds	r24, 0x0290
    3fda:	90 91 91 02 	lds	r25, 0x0291
		else if(read_write_erase==FAT_WRITE)
    3fde:	29 85       	ldd	r18, Y+9	; 0x09
    3fe0:	22 23       	and	r18, r18
    3fe2:	19 f4       	brne	.+6      	; 0x3fea <chain_get_sector_ptr+0x248>
			DEBUG_P(PSTR("write"));
    3fe4:	69 e1       	ldi	r22, 0x19	; 25
    3fe6:	7a e0       	ldi	r23, 0x0A	; 10
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <chain_get_sector_ptr+0x24c>
		else
			DEBUG_P(PSTR("erase"));
    3fea:	63 e1       	ldi	r22, 0x13	; 19
    3fec:	7a e0       	ldi	r23, 0x0A	; 10
    3fee:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR(" FAILED! base="));
    3ff2:	80 91 90 02 	lds	r24, 0x0290
    3ff6:	90 91 91 02 	lds	r25, 0x0291
    3ffa:	64 e0       	ldi	r22, 0x04	; 4
    3ffc:	7a e0       	ldi	r23, 0x0A	; 10
    3ffe:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(chain_ptr->base);
    4002:	c0 90 90 02 	lds	r12, 0x0290
    4006:	d0 90 91 02 	lds	r13, 0x0291
    400a:	aa 85       	ldd	r26, Y+10	; 0x0a
    400c:	bb 85       	ldd	r27, Y+11	; 0x0b
    400e:	6d 91       	ld	r22, X+
    4010:	7d 91       	ld	r23, X+
    4012:	8d 91       	ld	r24, X+
    4014:	9c 91       	ld	r25, X
    4016:	46 ea       	ldi	r20, 0xA6	; 166
    4018:	52 e0       	ldi	r21, 0x02	; 2
    401a:	2a e0       	ldi	r18, 0x0A	; 10
    401c:	00 e0       	ldi	r16, 0x00	; 0
    401e:	ee 24       	eor	r14, r14
    4020:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4024:	bc 01       	movw	r22, r24
    4026:	c6 01       	movw	r24, r12
    4028:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" l_clust="));
    402c:	80 91 90 02 	lds	r24, 0x0290
    4030:	90 91 91 02 	lds	r25, 0x0291
    4034:	6a ef       	ldi	r22, 0xFA	; 250
    4036:	79 e0       	ldi	r23, 0x09	; 9
    4038:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(required_cluster_logical);
    403c:	c0 90 90 02 	lds	r12, 0x0290
    4040:	d0 90 91 02 	lds	r13, 0x0291
    4044:	c3 01       	movw	r24, r6
    4046:	b2 01       	movw	r22, r4
    4048:	46 ea       	ldi	r20, 0xA6	; 166
    404a:	52 e0       	ldi	r21, 0x02	; 2
    404c:	2a e0       	ldi	r18, 0x0A	; 10
    404e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4052:	bc 01       	movw	r22, r24
    4054:	c6 01       	movw	r24, r12
    4056:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" p_clust="));
    405a:	80 91 90 02 	lds	r24, 0x0290
    405e:	90 91 91 02 	lds	r25, 0x0291
    4062:	60 ef       	ldi	r22, 0xF0	; 240
    4064:	79 e0       	ldi	r23, 0x09	; 9
    4066:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(required_cluster_physical);
    406a:	c0 90 90 02 	lds	r12, 0x0290
    406e:	d0 90 91 02 	lds	r13, 0x0291
    4072:	c5 01       	movw	r24, r10
    4074:	b4 01       	movw	r22, r8
    4076:	46 ea       	ldi	r20, 0xA6	; 166
    4078:	52 e0       	ldi	r21, 0x02	; 2
    407a:	2a e0       	ldi	r18, 0x0A	; 10
    407c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4080:	bc 01       	movw	r22, r24
    4082:	c6 01       	movw	r24, r12
    4084:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" byte_add="));
    4088:	80 91 90 02 	lds	r24, 0x0290
    408c:	90 91 91 02 	lds	r25, 0x0291
    4090:	65 ee       	ldi	r22, 0xE5	; 229
    4092:	79 e0       	ldi	r23, 0x09	; 9
    4094:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(byte_address);
    4098:	c0 90 90 02 	lds	r12, 0x0290
    409c:	d0 90 91 02 	lds	r13, 0x0291
    40a0:	6d 81       	ldd	r22, Y+5	; 0x05
    40a2:	7e 81       	ldd	r23, Y+6	; 0x06
    40a4:	8f 81       	ldd	r24, Y+7	; 0x07
    40a6:	98 85       	ldd	r25, Y+8	; 0x08
    40a8:	46 ea       	ldi	r20, 0xA6	; 166
    40aa:	52 e0       	ldi	r21, 0x02	; 2
    40ac:	2a e0       	ldi	r18, 0x0A	; 10
    40ae:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    40b2:	bc 01       	movw	r22, r24
    40b4:	c6 01       	movw	r24, r12
    40b6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    40ba:	80 91 90 02 	lds	r24, 0x0290
    40be:	90 91 91 02 	lds	r25, 0x0291
    40c2:	62 ee       	ldi	r22, 0xE2	; 226
    40c4:	79 e0       	ldi	r23, 0x09	; 9
    40c6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	};

	return (void*)retval;
}
    40ca:	c1 01       	movw	r24, r2
    40cc:	2b 96       	adiw	r28, 0x0b	; 11
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	cf 91       	pop	r28
    40da:	df 91       	pop	r29
    40dc:	1f 91       	pop	r17
    40de:	0f 91       	pop	r16
    40e0:	ff 90       	pop	r15
    40e2:	ef 90       	pop	r14
    40e4:	df 90       	pop	r13
    40e6:	cf 90       	pop	r12
    40e8:	bf 90       	pop	r11
    40ea:	af 90       	pop	r10
    40ec:	9f 90       	pop	r9
    40ee:	8f 90       	pop	r8
    40f0:	7f 90       	pop	r7
    40f2:	6f 90       	pop	r6
    40f4:	5f 90       	pop	r5
    40f6:	4f 90       	pop	r4
    40f8:	3f 90       	pop	r3
    40fa:	2f 90       	pop	r2
    40fc:	08 95       	ret

000040fe <dir_entry_get_ptr>:
	return retval;
}

//read the sector containing the directory entry we want, and return a pointer to that entry
struct directory_struct* dir_entry_get_ptr(unsigned long base_cluster, unsigned int index)
{
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	8b 01       	movw	r16, r22
    4108:	9c 01       	movw	r18, r24
    410a:	ea 01       	movw	r28, r20

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    410c:	80 91 96 02 	lds	r24, 0x0296
    4110:	90 91 97 02 	lds	r25, 0x0297
    4114:	a0 91 98 02 	lds	r26, 0x0298
    4118:	b0 91 99 02 	lds	r27, 0x0299
    411c:	08 17       	cp	r16, r24
    411e:	19 07       	cpc	r17, r25
    4120:	2a 07       	cpc	r18, r26
    4122:	3b 07       	cpc	r19, r27
    4124:	c1 f0       	breq	.+48     	; 0x4156 <dir_entry_get_ptr+0x58>
	{
		chain_ptr->base=cluster;
    4126:	00 93 96 02 	sts	0x0296, r16
    412a:	10 93 97 02 	sts	0x0297, r17
    412e:	20 93 98 02 	sts	0x0298, r18
    4132:	30 93 99 02 	sts	0x0299, r19
		chain_ptr->physical=cluster;
    4136:	00 93 9a 02 	sts	0x029A, r16
    413a:	10 93 9b 02 	sts	0x029B, r17
    413e:	20 93 9c 02 	sts	0x029C, r18
    4142:	30 93 9d 02 	sts	0x029D, r19
		chain_ptr->logical=0ul;
    4146:	10 92 9e 02 	sts	0x029E, r1
    414a:	10 92 9f 02 	sts	0x029F, r1
    414e:	10 92 a0 02 	sts	0x02A0, r1
    4152:	10 92 a1 02 	sts	0x02A1, r1
	struct directory_struct *directory_ptr = NULL;

	chain_init(&dir_chain_nav, base_cluster);
	directory_ptr = chain_get_sector_ptr(&dir_chain_nav, ((unsigned long)index) << 5, FAT_READ);
    4156:	ae 01       	movw	r20, r28
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	70 e0       	ldi	r23, 0x00	; 0
    415c:	85 e0       	ldi	r24, 0x05	; 5
    415e:	44 0f       	add	r20, r20
    4160:	55 1f       	adc	r21, r21
    4162:	66 1f       	adc	r22, r22
    4164:	77 1f       	adc	r23, r23
    4166:	8a 95       	dec	r24
    4168:	d1 f7       	brne	.-12     	; 0x415e <dir_entry_get_ptr+0x60>
    416a:	86 e9       	ldi	r24, 0x96	; 150
    416c:	92 e0       	ldi	r25, 0x02	; 2
    416e:	21 e0       	ldi	r18, 0x01	; 1
    4170:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <chain_get_sector_ptr>
    4174:	9c 01       	movw	r18, r24
	if(directory_ptr)
    4176:	00 97       	sbiw	r24, 0x00	; 0
    4178:	49 f0       	breq	.+18     	; 0x418c <dir_entry_get_ptr+0x8e>
		directory_ptr = &directory_ptr[index & 0x0F];
    417a:	cf 70       	andi	r28, 0x0F	; 15
    417c:	d0 70       	andi	r29, 0x00	; 0
    417e:	05 e0       	ldi	r16, 0x05	; 5
    4180:	cc 0f       	add	r28, r28
    4182:	dd 1f       	adc	r29, r29
    4184:	0a 95       	dec	r16
    4186:	e1 f7       	brne	.-8      	; 0x4180 <dir_entry_get_ptr+0x82>
    4188:	2c 0f       	add	r18, r28
    418a:	3d 1f       	adc	r19, r29

	return directory_ptr;
}
    418c:	c9 01       	movw	r24, r18
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	1f 91       	pop	r17
    4194:	0f 91       	pop	r16
    4196:	08 95       	ret

00004198 <cluster_link_write>:
}

// mark a cluster in the FAT as being CLUSTER_TYPE_FREE, CLUSTER_TYPE_LAST, or a link
// returns success
static char cluster_link_write(unsigned long cluster, unsigned long entry)
{
    4198:	af 92       	push	r10
    419a:	bf 92       	push	r11
    419c:	cf 92       	push	r12
    419e:	df 92       	push	r13
    41a0:	ef 92       	push	r14
    41a2:	ff 92       	push	r15
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	7b 01       	movw	r14, r22
    41aa:	8c 01       	movw	r16, r24
    41ac:	59 01       	movw	r10, r18
    41ae:	6a 01       	movw	r12, r20
	unsigned char entry_index;	
	unsigned long *table_ptr;

	entry_index = cluster&0x0000007Ful;		//entry index within it's sector

	cluster>>=7;					//convert cluster number to sector
    41b0:	27 e0       	ldi	r18, 0x07	; 7
    41b2:	96 95       	lsr	r25
    41b4:	87 95       	ror	r24
    41b6:	77 95       	ror	r23
    41b8:	67 95       	ror	r22
    41ba:	2a 95       	dec	r18
    41bc:	d1 f7       	brne	.-12     	; 0x41b2 <cluster_link_write+0x1a>
	cluster+=first_fat_sector;
		
	//read fat sector containing the entry we want
	table_ptr=fatcache_sector(cluster, FAT_READ);
    41be:	20 91 05 02 	lds	r18, 0x0205
    41c2:	30 91 06 02 	lds	r19, 0x0206
    41c6:	40 91 07 02 	lds	r20, 0x0207
    41ca:	50 91 08 02 	lds	r21, 0x0208
    41ce:	62 0f       	add	r22, r18
    41d0:	73 1f       	adc	r23, r19
    41d2:	84 1f       	adc	r24, r20
    41d4:	95 1f       	adc	r25, r21
    41d6:	41 e0       	ldi	r20, 0x01	; 1
    41d8:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    41dc:	9c 01       	movw	r18, r24
	if(table_ptr)		
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	c9 f0       	breq	.+50     	; 0x4214 <cluster_link_write+0x7c>
	{
		table_ptr[entry_index]=LEND_ULONG_WRITE(entry);		//write entry
    41e2:	ee 2d       	mov	r30, r14
    41e4:	ef 77       	andi	r30, 0x7F	; 127
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	ee 0f       	add	r30, r30
    41ea:	ff 1f       	adc	r31, r31
    41ec:	ee 0f       	add	r30, r30
    41ee:	ff 1f       	adc	r31, r31
    41f0:	e2 0f       	add	r30, r18
    41f2:	f3 1f       	adc	r31, r19
    41f4:	a0 82       	st	Z, r10
    41f6:	b1 82       	std	Z+1, r11	; 0x01
    41f8:	c2 82       	std	Z+2, r12	; 0x02
    41fa:	d3 82       	std	Z+3, r13	; 0x03
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    41fc:	2f 5d       	subi	r18, 0xDF	; 223
    41fe:	33 40       	sbci	r19, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    4200:	20 70       	andi	r18, 0x00	; 0
    4202:	3e 7f       	andi	r19, 0xFE	; 254
    4204:	23 2b       	or	r18, r19
    4206:	11 f0       	breq	.+4      	; 0x420c <cluster_link_write+0x74>
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	0d c0       	rjmp	.+26     	; 0x4226 <cluster_link_write+0x8e>
		{
			cache_dirty[index]=TRUE;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	80 93 e3 05 	sts	0x05E3, r24
    4212:	09 c0       	rjmp	.+18     	; 0x4226 <cluster_link_write+0x8e>
		fatcache_dirty(table_ptr);
	}
	else
	{
		success=FALSE;
		DEBUG_P(PSTR("FAT32 - ERROR, unable to update FAT tables\r\n"));
    4214:	80 91 90 02 	lds	r24, 0x0290
    4218:	90 91 91 02 	lds	r25, 0x0291
    421c:	6d e4       	ldi	r22, 0x4D	; 77
    421e:	7e e0       	ldi	r23, 0x0E	; 14
    4220:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4224:	80 e0       	ldi	r24, 0x00	; 0
	};
	return success;
}
    4226:	1f 91       	pop	r17
    4228:	0f 91       	pop	r16
    422a:	ff 90       	pop	r15
    422c:	ef 90       	pop	r14
    422e:	df 90       	pop	r13
    4230:	cf 90       	pop	r12
    4232:	bf 90       	pop	r11
    4234:	af 90       	pop	r10
    4236:	08 95       	ret

00004238 <chain_create>:
	return success;
}

//creates a new chain, returns base cluster of new chain, or 0 if failed
static unsigned long chain_create(unsigned long size)
{
    4238:	4f 92       	push	r4
    423a:	5f 92       	push	r5
    423c:	6f 92       	push	r6
    423e:	7f 92       	push	r7
    4240:	8f 92       	push	r8
    4242:	9f 92       	push	r9
    4244:	af 92       	push	r10
    4246:	bf 92       	push	r11
    4248:	cf 92       	push	r12
    424a:	df 92       	push	r13
    424c:	ef 92       	push	r14
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	2c 97       	sbiw	r28, 0x0c	; 12
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	f8 94       	cli
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	cd bf       	out	0x3d, r28	; 61
    4266:	69 87       	std	Y+9, r22	; 0x09
    4268:	7a 87       	std	Y+10, r23	; 0x0a
    426a:	8b 87       	std	Y+11, r24	; 0x0b
    426c:	9c 87       	std	Y+12, r25	; 0x0c
	unsigned long base;
	unsigned long end;
	unsigned long search;
	unsigned long count=0;
	
	DEBUG_P(PSTR("FAT32 - Create new chain of length "));
    426e:	80 91 90 02 	lds	r24, 0x0290
    4272:	90 91 91 02 	lds	r25, 0x0291
    4276:	69 e2       	ldi	r22, 0x29	; 41
    4278:	7e e0       	ldi	r23, 0x0E	; 14
    427a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG((unsigned long) size);
    427e:	c0 90 90 02 	lds	r12, 0x0290
    4282:	d0 90 91 02 	lds	r13, 0x0291
    4286:	69 85       	ldd	r22, Y+9	; 0x09
    4288:	7a 85       	ldd	r23, Y+10	; 0x0a
    428a:	8b 85       	ldd	r24, Y+11	; 0x0b
    428c:	9c 85       	ldd	r25, Y+12	; 0x0c
    428e:	46 ea       	ldi	r20, 0xA6	; 166
    4290:	52 e0       	ldi	r21, 0x02	; 2
    4292:	2a e0       	ldi	r18, 0x0A	; 10
    4294:	00 e0       	ldi	r16, 0x00	; 0
    4296:	ee 24       	eor	r14, r14
    4298:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    429c:	bc 01       	movw	r22, r24
    429e:	c6 01       	movw	r24, r12
    42a0:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\r\n"));
    42a4:	80 91 90 02 	lds	r24, 0x0290
    42a8:	90 91 91 02 	lds	r25, 0x0291
    42ac:	66 e2       	ldi	r22, 0x26	; 38
    42ae:	7e e0       	ldi	r23, 0x0E	; 14
    42b0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
static unsigned long fsinfo_last_allocated_read(void)
{
	unsigned long retval;
	struct fsinfo_sector_struct *fsinfo_ptr;

	fsinfo_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    42b4:	60 91 db 03 	lds	r22, 0x03DB
    42b8:	70 91 dc 03 	lds	r23, 0x03DC
    42bc:	80 91 dd 03 	lds	r24, 0x03DD
    42c0:	90 91 de 03 	lds	r25, 0x03DE
    42c4:	41 e0       	ldi	r20, 0x01	; 1
    42c6:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    42ca:	fc 01       	movw	r30, r24
	if(fsinfo_ptr)
    42cc:	00 97       	sbiw	r24, 0x00	; 0
    42ce:	21 f4       	brne	.+8      	; 0x42d8 <chain_create+0xa0>
    42d0:	88 24       	eor	r8, r8
    42d2:	99 24       	eor	r9, r9
    42d4:	54 01       	movw	r10, r8
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <chain_create+0xac>
		retval=LEND_ULONG_READ(fsinfo_ptr->last_allocated_cluster);
    42d8:	e4 51       	subi	r30, 0x14	; 20
    42da:	fe 4f       	sbci	r31, 0xFE	; 254
    42dc:	80 80       	ld	r8, Z
    42de:	91 80       	ldd	r9, Z+1	; 0x01
    42e0:	a2 80       	ldd	r10, Z+2	; 0x02
    42e2:	b3 80       	ldd	r11, Z+3	; 0x03
	
	search=fsinfo_last_allocated_read();
	if(search > total_clusters+1)
    42e4:	80 91 d7 03 	lds	r24, 0x03D7
    42e8:	90 91 d8 03 	lds	r25, 0x03D8
    42ec:	a0 91 d9 03 	lds	r26, 0x03D9
    42f0:	b0 91 da 03 	lds	r27, 0x03DA
    42f4:	01 96       	adiw	r24, 0x01	; 1
    42f6:	a1 1d       	adc	r26, r1
    42f8:	b1 1d       	adc	r27, r1
    42fa:	88 15       	cp	r24, r8
    42fc:	99 05       	cpc	r25, r9
    42fe:	aa 05       	cpc	r26, r10
    4300:	bb 05       	cpc	r27, r11
    4302:	30 f4       	brcc	.+12     	; 0x4310 <chain_create+0xd8>
    4304:	43 e0       	ldi	r20, 0x03	; 3
    4306:	84 2e       	mov	r8, r20
    4308:	91 2c       	mov	r9, r1
    430a:	a1 2c       	mov	r10, r1
    430c:	b1 2c       	mov	r11, r1
    430e:	06 c0       	rjmp	.+12     	; 0x431c <chain_create+0xe4>
		search=3ul;
	
	if(search)
    4310:	81 14       	cp	r8, r1
    4312:	91 04       	cpc	r9, r1
    4314:	a1 04       	cpc	r10, r1
    4316:	b1 04       	cpc	r11, r1
    4318:	09 f4       	brne	.+2      	; 0x431c <chain_create+0xe4>
    431a:	96 c1       	rjmp	.+812    	; 0x4648 <chain_create+0x410>
	{
		DEBUG_P(PSTR("FAT32 - Create new chain, searching from cluster "));
    431c:	80 91 90 02 	lds	r24, 0x0290
    4320:	90 91 91 02 	lds	r25, 0x0291
    4324:	64 ef       	ldi	r22, 0xF4	; 244
    4326:	7d e0       	ldi	r23, 0x0D	; 13
    4328:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(search);
    432c:	c0 90 90 02 	lds	r12, 0x0290
    4330:	d0 90 91 02 	lds	r13, 0x0291
    4334:	c5 01       	movw	r24, r10
    4336:	b4 01       	movw	r22, r8
    4338:	46 ea       	ldi	r20, 0xA6	; 166
    433a:	52 e0       	ldi	r21, 0x02	; 2
    433c:	2a e0       	ldi	r18, 0x0A	; 10
    433e:	00 e0       	ldi	r16, 0x00	; 0
    4340:	ee 24       	eor	r14, r14
    4342:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4346:	bc 01       	movw	r22, r24
    4348:	c6 01       	movw	r24, r12
    434a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    434e:	80 91 90 02 	lds	r24, 0x0290
    4352:	90 91 91 02 	lds	r25, 0x0291
    4356:	61 ef       	ldi	r22, 0xF1	; 241
    4358:	7d e0       	ldi	r23, 0x0D	; 13
    435a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
static unsigned long fsinfo_total_free_read(void)
{
	struct fsinfo_sector_struct *fsinfo_ptr;
	unsigned long retval=0;
	
	fsinfo_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    435e:	60 91 db 03 	lds	r22, 0x03DB
    4362:	70 91 dc 03 	lds	r23, 0x03DC
    4366:	80 91 dd 03 	lds	r24, 0x03DD
    436a:	90 91 de 03 	lds	r25, 0x03DE
    436e:	41 e0       	ldi	r20, 0x01	; 1
    4370:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    4374:	fc 01       	movw	r30, r24
	if(fsinfo_ptr)
    4376:	00 97       	sbiw	r24, 0x00	; 0
    4378:	29 f4       	brne	.+10     	; 0x4384 <chain_create+0x14c>
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	a0 e0       	ldi	r26, 0x00	; 0
    4380:	b0 e0       	ldi	r27, 0x00	; 0
    4382:	06 c0       	rjmp	.+12     	; 0x4390 <chain_create+0x158>
		retval=LEND_ULONG_READ(fsinfo_ptr->total_free_clusters);
    4384:	e8 51       	subi	r30, 0x18	; 24
    4386:	fe 4f       	sbci	r31, 0xFE	; 254
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	a2 81       	ldd	r26, Z+2	; 0x02
    438e:	b3 81       	ldd	r27, Z+3	; 0x03
		
		if(size > fsinfo_total_free_read())
    4390:	29 85       	ldd	r18, Y+9	; 0x09
    4392:	3a 85       	ldd	r19, Y+10	; 0x0a
    4394:	4b 85       	ldd	r20, Y+11	; 0x0b
    4396:	5c 85       	ldd	r21, Y+12	; 0x0c
    4398:	82 17       	cp	r24, r18
    439a:	93 07       	cpc	r25, r19
    439c:	a4 07       	cpc	r26, r20
    439e:	b5 07       	cpc	r27, r21
    43a0:	38 f4       	brcc	.+14     	; 0x43b0 <chain_create+0x178>
		{
			success=FALSE;
			DEBUG_P(PSTR("FAT32 - ERROR, chain create failed, not enough free clusters\r\n"));
    43a2:	80 91 90 02 	lds	r24, 0x0290
    43a6:	90 91 91 02 	lds	r25, 0x0291
    43aa:	62 eb       	ldi	r22, 0xB2	; 178
    43ac:	7d e0       	ldi	r23, 0x0D	; 13
    43ae:	52 c1       	rjmp	.+676    	; 0x4654 <chain_create+0x41c>
static char fsinfo_total_free_decrease(unsigned long decrement)
{
	char success=TRUE;
	struct fsinfo_sector_struct *fsinfo_ptr;
	
	fsinfo_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    43b0:	60 91 db 03 	lds	r22, 0x03DB
    43b4:	70 91 dc 03 	lds	r23, 0x03DC
    43b8:	80 91 dd 03 	lds	r24, 0x03DD
    43bc:	90 91 de 03 	lds	r25, 0x03DE
    43c0:	41 e0       	ldi	r20, 0x01	; 1
    43c2:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    43c6:	9c 01       	movw	r18, r24
	if(fsinfo_ptr)
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	11 f4       	brne	.+4      	; 0x43d0 <chain_create+0x198>
    43cc:	10 e0       	ldi	r17, 0x00	; 0
    43ce:	1e c0       	rjmp	.+60     	; 0x440c <chain_create+0x1d4>
	{
		fsinfo_ptr->total_free_clusters = LEND_ULONG_WRITE(LEND_ULONG_READ(fsinfo_ptr->total_free_clusters)-decrement);
    43d0:	8c 01       	movw	r16, r24
    43d2:	08 51       	subi	r16, 0x18	; 24
    43d4:	1e 4f       	sbci	r17, 0xFE	; 254
    43d6:	f8 01       	movw	r30, r16
    43d8:	80 81       	ld	r24, Z
    43da:	91 81       	ldd	r25, Z+1	; 0x01
    43dc:	a2 81       	ldd	r26, Z+2	; 0x02
    43de:	b3 81       	ldd	r27, Z+3	; 0x03
    43e0:	49 85       	ldd	r20, Y+9	; 0x09
    43e2:	5a 85       	ldd	r21, Y+10	; 0x0a
    43e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    43e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e8:	84 1b       	sub	r24, r20
    43ea:	95 0b       	sbc	r25, r21
    43ec:	a6 0b       	sbc	r26, r22
    43ee:	b7 0b       	sbc	r27, r23
    43f0:	80 83       	st	Z, r24
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	a2 83       	std	Z+2, r26	; 0x02
    43f6:	b3 83       	std	Z+3, r27	; 0x03
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    43f8:	2f 5d       	subi	r18, 0xDF	; 223
    43fa:	33 40       	sbci	r19, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    43fc:	20 70       	andi	r18, 0x00	; 0
    43fe:	3e 7f       	andi	r19, 0xFE	; 254
    4400:	23 2b       	or	r18, r19
    4402:	19 f4       	brne	.+6      	; 0x440a <chain_create+0x1d2>
		{
			cache_dirty[index]=TRUE;
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	80 93 e3 05 	sts	0x05E3, r24
    440a:	11 e0       	ldi	r17, 0x01	; 1
    440c:	44 24       	eor	r4, r4
    440e:	55 24       	eor	r5, r5
    4410:	32 01       	movw	r6, r4
    4412:	1d 82       	std	Y+5, r1	; 0x05
    4414:	1e 82       	std	Y+6, r1	; 0x06
    4416:	1f 82       	std	Y+7, r1	; 0x07
    4418:	18 86       	std	Y+8, r1	; 0x08
    441a:	21 e0       	ldi	r18, 0x01	; 1
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e0       	ldi	r20, 0x00	; 0
    4420:	50 e0       	ldi	r21, 0x00	; 0
    4422:	29 83       	std	Y+1, r18	; 0x01
    4424:	3a 83       	std	Y+2, r19	; 0x02
    4426:	4b 83       	std	Y+3, r20	; 0x03
    4428:	5c 83       	std	Y+4, r21	; 0x04
    442a:	97 c0       	rjmp	.+302    	; 0x455a <chain_create+0x322>
			while(size && success)
			{
				//find a free cluster
				while(cluster_type_read(search) != CLUSTER_TYPE_FREE && count != total_clusters)
				{
					search++;
    442c:	08 94       	sec
    442e:	81 1c       	adc	r8, r1
    4430:	91 1c       	adc	r9, r1
    4432:	a1 1c       	adc	r10, r1
    4434:	b1 1c       	adc	r11, r1
					if(search == total_clusters+1)
    4436:	01 96       	adiw	r24, 0x01	; 1
    4438:	a1 1d       	adc	r26, r1
    443a:	b1 1d       	adc	r27, r1
    443c:	88 16       	cp	r8, r24
    443e:	99 06       	cpc	r9, r25
    4440:	aa 06       	cpc	r10, r26
    4442:	bb 06       	cpc	r11, r27
    4444:	29 f4       	brne	.+10     	; 0x4450 <chain_create+0x218>
    4446:	33 e0       	ldi	r19, 0x03	; 3
    4448:	83 2e       	mov	r8, r19
    444a:	91 2c       	mov	r9, r1
    444c:	a1 2c       	mov	r10, r1
    444e:	b1 2c       	mov	r11, r1
						search=3ul;
					count++;
    4450:	49 81       	ldd	r20, Y+1	; 0x01
    4452:	5a 81       	ldd	r21, Y+2	; 0x02
    4454:	6b 81       	ldd	r22, Y+3	; 0x03
    4456:	7c 81       	ldd	r23, Y+4	; 0x04
    4458:	4f 5f       	subi	r20, 0xFF	; 255
    445a:	5f 4f       	sbci	r21, 0xFF	; 255
    445c:	6f 4f       	sbci	r22, 0xFF	; 255
    445e:	7f 4f       	sbci	r23, 0xFF	; 255
    4460:	49 83       	std	Y+1, r20	; 0x01
    4462:	5a 83       	std	Y+2, r21	; 0x02
    4464:	6b 83       	std	Y+3, r22	; 0x03
    4466:	7c 83       	std	Y+4, r23	; 0x04
			end=0ul;
			count++;
			while(size && success)
			{
				//find a free cluster
				while(cluster_type_read(search) != CLUSTER_TYPE_FREE && count != total_clusters)
    4468:	c5 01       	movw	r24, r10
    446a:	b4 01       	movw	r22, r8
    446c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
    4470:	88 23       	and	r24, r24
    4472:	89 f0       	breq	.+34     	; 0x4496 <chain_create+0x25e>
    4474:	80 91 d7 03 	lds	r24, 0x03D7
    4478:	90 91 d8 03 	lds	r25, 0x03D8
    447c:	a0 91 d9 03 	lds	r26, 0x03D9
    4480:	b0 91 da 03 	lds	r27, 0x03DA
    4484:	29 81       	ldd	r18, Y+1	; 0x01
    4486:	3a 81       	ldd	r19, Y+2	; 0x02
    4488:	4b 81       	ldd	r20, Y+3	; 0x03
    448a:	5c 81       	ldd	r21, Y+4	; 0x04
    448c:	28 17       	cp	r18, r24
    448e:	39 07       	cpc	r19, r25
    4490:	4a 07       	cpc	r20, r26
    4492:	5b 07       	cpc	r21, r27
    4494:	59 f6       	brne	.-106    	; 0x442c <chain_create+0x1f4>
						search=3ul;
					count++;
				};
				
				//fail if no more free clusters found
				if(count==total_clusters)
    4496:	80 91 d7 03 	lds	r24, 0x03D7
    449a:	90 91 d8 03 	lds	r25, 0x03D8
    449e:	a0 91 d9 03 	lds	r26, 0x03D9
    44a2:	b0 91 da 03 	lds	r27, 0x03DA
    44a6:	49 81       	ldd	r20, Y+1	; 0x01
    44a8:	5a 81       	ldd	r21, Y+2	; 0x02
    44aa:	6b 81       	ldd	r22, Y+3	; 0x03
    44ac:	7c 81       	ldd	r23, Y+4	; 0x04
    44ae:	48 17       	cp	r20, r24
    44b0:	59 07       	cpc	r21, r25
    44b2:	6a 07       	cpc	r22, r26
    44b4:	7b 07       	cpc	r23, r27
    44b6:	51 f4       	brne	.+20     	; 0x44cc <chain_create+0x294>
				{
					DEBUG_P(PSTR("FAT32 - ERROR, FAT search unable to find enough free clusters (despite FSInfo).\r\n"));
    44b8:	80 91 90 02 	lds	r24, 0x0290
    44bc:	90 91 91 02 	lds	r25, 0x0291
    44c0:	60 e6       	ldi	r22, 0x60	; 96
    44c2:	7d e0       	ldi	r23, 0x0D	; 13
    44c4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    44c8:	10 e0       	ldi	r17, 0x00	; 0
    44ca:	47 c0       	rjmp	.+142    	; 0x455a <chain_create+0x322>
					success=FALSE;
				}
				else
				{
					//if first cluster found
					if(!base)
    44cc:	41 14       	cp	r4, r1
    44ce:	51 04       	cpc	r5, r1
    44d0:	61 04       	cpc	r6, r1
    44d2:	71 04       	cpc	r7, r1
    44d4:	21 f5       	brne	.+72     	; 0x451e <chain_create+0x2e6>
					{
						DEBUG_P(PSTR("FAT32 - New chain base cluster at "));
    44d6:	80 91 90 02 	lds	r24, 0x0290
    44da:	90 91 91 02 	lds	r25, 0x0291
    44de:	6d e3       	ldi	r22, 0x3D	; 61
    44e0:	7d e0       	ldi	r23, 0x0D	; 13
    44e2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						DEBUG_ULONG(search);
    44e6:	c0 90 90 02 	lds	r12, 0x0290
    44ea:	d0 90 91 02 	lds	r13, 0x0291
    44ee:	c5 01       	movw	r24, r10
    44f0:	b4 01       	movw	r22, r8
    44f2:	46 ea       	ldi	r20, 0xA6	; 166
    44f4:	52 e0       	ldi	r21, 0x02	; 2
    44f6:	2a e0       	ldi	r18, 0x0A	; 10
    44f8:	00 e0       	ldi	r16, 0x00	; 0
    44fa:	ee 24       	eor	r14, r14
    44fc:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4500:	bc 01       	movw	r22, r24
    4502:	c6 01       	movw	r24, r12
    4504:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
						DEBUG_P(PSTR("\r\n"));
    4508:	80 91 90 02 	lds	r24, 0x0290
    450c:	90 91 91 02 	lds	r25, 0x0291
    4510:	6a e3       	ldi	r22, 0x3A	; 58
    4512:	7d e0       	ldi	r23, 0x0D	; 13
    4514:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4518:	24 01       	movw	r4, r8
    451a:	35 01       	movw	r6, r10
    451c:	09 c0       	rjmp	.+18     	; 0x4530 <chain_create+0x2f8>
						base=search;	//remember base
						end=search;		//remember end of chain
					}
					else
					{
						success=cluster_link_write(end, search);	//link end to new cluster
    451e:	6d 81       	ldd	r22, Y+5	; 0x05
    4520:	7e 81       	ldd	r23, Y+6	; 0x06
    4522:	8f 81       	ldd	r24, Y+7	; 0x07
    4524:	98 85       	ldd	r25, Y+8	; 0x08
    4526:	a5 01       	movw	r20, r10
    4528:	94 01       	movw	r18, r8
    452a:	0e 94 cc 20 	call	0x4198	; 0x4198 <cluster_link_write>
    452e:	18 2f       	mov	r17, r24
						end=search;
					};
					size--;
    4530:	69 85       	ldd	r22, Y+9	; 0x09
    4532:	7a 85       	ldd	r23, Y+10	; 0x0a
    4534:	8b 85       	ldd	r24, Y+11	; 0x0b
    4536:	9c 85       	ldd	r25, Y+12	; 0x0c
    4538:	61 50       	subi	r22, 0x01	; 1
    453a:	70 40       	sbci	r23, 0x00	; 0
    453c:	80 40       	sbci	r24, 0x00	; 0
    453e:	90 40       	sbci	r25, 0x00	; 0
    4540:	69 87       	std	Y+9, r22	; 0x09
    4542:	7a 87       	std	Y+10, r23	; 0x0a
    4544:	8b 87       	std	Y+11, r24	; 0x0b
    4546:	9c 87       	std	Y+12, r25	; 0x0c
					search++;
    4548:	8d 82       	std	Y+5, r8	; 0x05
    454a:	9e 82       	std	Y+6, r9	; 0x06
    454c:	af 82       	std	Y+7, r10	; 0x07
    454e:	b8 86       	std	Y+8, r11	; 0x08
    4550:	08 94       	sec
    4552:	81 1c       	adc	r8, r1
    4554:	91 1c       	adc	r9, r1
    4556:	a1 1c       	adc	r10, r1
    4558:	b1 1c       	adc	r11, r1
			success=fsinfo_total_free_decrease(size);
			
			base=0ul;
			end=0ul;
			count++;
			while(size && success)
    455a:	89 85       	ldd	r24, Y+9	; 0x09
    455c:	9a 85       	ldd	r25, Y+10	; 0x0a
    455e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4560:	bc 85       	ldd	r27, Y+12	; 0x0c
    4562:	00 97       	sbiw	r24, 0x00	; 0
    4564:	a1 05       	cpc	r26, r1
    4566:	b1 05       	cpc	r27, r1
    4568:	21 f0       	breq	.+8      	; 0x4572 <chain_create+0x33a>
    456a:	11 23       	and	r17, r17
    456c:	09 f0       	breq	.+2      	; 0x4570 <chain_create+0x338>
    456e:	7c cf       	rjmp	.-264    	; 0x4468 <chain_create+0x230>
    4570:	64 c0       	rjmp	.+200    	; 0x463a <chain_create+0x402>
					};
					size--;
					search++;
				};
			};
			if(success)
    4572:	11 23       	and	r17, r17
    4574:	09 f4       	brne	.+2      	; 0x4578 <chain_create+0x340>
    4576:	61 c0       	rjmp	.+194    	; 0x463a <chain_create+0x402>
			{
				DEBUG_P(PSTR("FAT32 - New chain, terminating end cluster at "));
    4578:	80 91 90 02 	lds	r24, 0x0290
    457c:	90 91 91 02 	lds	r25, 0x0291
    4580:	6b e0       	ldi	r22, 0x0B	; 11
    4582:	7d e0       	ldi	r23, 0x0D	; 13
    4584:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG(end);
    4588:	c0 90 90 02 	lds	r12, 0x0290
    458c:	d0 90 91 02 	lds	r13, 0x0291
    4590:	6d 81       	ldd	r22, Y+5	; 0x05
    4592:	7e 81       	ldd	r23, Y+6	; 0x06
    4594:	8f 81       	ldd	r24, Y+7	; 0x07
    4596:	98 85       	ldd	r25, Y+8	; 0x08
    4598:	46 ea       	ldi	r20, 0xA6	; 166
    459a:	52 e0       	ldi	r21, 0x02	; 2
    459c:	2a e0       	ldi	r18, 0x0A	; 10
    459e:	00 e0       	ldi	r16, 0x00	; 0
    45a0:	ee 24       	eor	r14, r14
    45a2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    45a6:	bc 01       	movw	r22, r24
    45a8:	c6 01       	movw	r24, r12
    45aa:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    45ae:	80 91 90 02 	lds	r24, 0x0290
    45b2:	90 91 91 02 	lds	r25, 0x0291
    45b6:	68 e0       	ldi	r22, 0x08	; 8
    45b8:	7d e0       	ldi	r23, 0x0D	; 13
    45ba:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				success=cluster_link_write(end, 0x0FFFFFFFul);		//terminate chain
    45be:	6d 81       	ldd	r22, Y+5	; 0x05
    45c0:	7e 81       	ldd	r23, Y+6	; 0x06
    45c2:	8f 81       	ldd	r24, Y+7	; 0x07
    45c4:	98 85       	ldd	r25, Y+8	; 0x08
    45c6:	2f ef       	ldi	r18, 0xFF	; 255
    45c8:	3f ef       	ldi	r19, 0xFF	; 255
    45ca:	4f ef       	ldi	r20, 0xFF	; 255
    45cc:	5f e0       	ldi	r21, 0x0F	; 15
    45ce:	0e 94 cc 20 	call	0x4198	; 0x4198 <cluster_link_write>
				if(success)
    45d2:	88 23       	and	r24, r24
    45d4:	59 f1       	breq	.+86     	; 0x462c <chain_create+0x3f4>
static char fsinfo_last_allocated_write(unsigned long last_allocated)
{
	char success=TRUE;
	struct fsinfo_sector_struct *fsinfo_ptr;

	fsinfo_ptr = fatcache_sector(fsinfo_sector, FAT_READ);
    45d6:	60 91 db 03 	lds	r22, 0x03DB
    45da:	70 91 dc 03 	lds	r23, 0x03DC
    45de:	80 91 dd 03 	lds	r24, 0x03DD
    45e2:	90 91 de 03 	lds	r25, 0x03DE
    45e6:	41 e0       	ldi	r20, 0x01	; 1
    45e8:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    45ec:	fc 01       	movw	r30, r24
	if(fsinfo_ptr)
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	b1 f0       	breq	.+44     	; 0x461e <chain_create+0x3e6>
	{
		fsinfo_ptr->last_allocated_cluster=LEND_ULONG_WRITE(last_allocated);
    45f2:	e4 51       	subi	r30, 0x14	; 20
    45f4:	fe 4f       	sbci	r31, 0xFE	; 254
    45f6:	2d 81       	ldd	r18, Y+5	; 0x05
    45f8:	3e 81       	ldd	r19, Y+6	; 0x06
    45fa:	4f 81       	ldd	r20, Y+7	; 0x07
    45fc:	58 85       	ldd	r21, Y+8	; 0x08
    45fe:	20 83       	st	Z, r18
    4600:	31 83       	std	Z+1, r19	; 0x01
    4602:	42 83       	std	Z+2, r20	; 0x02
    4604:	53 83       	std	Z+3, r21	; 0x03
    4606:	ec 5e       	subi	r30, 0xEC	; 236
    4608:	f1 40       	sbci	r31, 0x01	; 1
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    460a:	ef 5d       	subi	r30, 0xDF	; 223
    460c:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    460e:	e0 70       	andi	r30, 0x00	; 0
    4610:	fe 7f       	andi	r31, 0xFE	; 254
    4612:	ef 2b       	or	r30, r31
    4614:	21 f5       	brne	.+72     	; 0x465e <chain_create+0x426>
		{
			cache_dirty[index]=TRUE;
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	80 93 e3 05 	sts	0x05E3, r24
    461c:	20 c0       	rjmp	.+64     	; 0x465e <chain_create+0x426>
				{
					success=fsinfo_last_allocated_write(end);
					if(!success)
						DEBUG_P(PSTR("FAT32 - ERROR, unable to access FSInfo\r\n"));
    461e:	80 91 90 02 	lds	r24, 0x0290
    4622:	90 91 91 02 	lds	r25, 0x0291
    4626:	6f ed       	ldi	r22, 0xDF	; 223
    4628:	7c e0       	ldi	r23, 0x0C	; 12
    462a:	14 c0       	rjmp	.+40     	; 0x4654 <chain_create+0x41c>
				}
				else
					DEBUG_P(PSTR("FAT32 - ERROR, unable to terminate new chain\r\n"));
    462c:	80 91 90 02 	lds	r24, 0x0290
    4630:	90 91 91 02 	lds	r25, 0x0291
    4634:	60 eb       	ldi	r22, 0xB0	; 176
    4636:	7c e0       	ldi	r23, 0x0C	; 12
    4638:	0d c0       	rjmp	.+26     	; 0x4654 <chain_create+0x41c>
			}
			else
				DEBUG_P(PSTR("FAT32 - ERROR, unable to create chain.\r\n"));
    463a:	80 91 90 02 	lds	r24, 0x0290
    463e:	90 91 91 02 	lds	r25, 0x0291
    4642:	67 e8       	ldi	r22, 0x87	; 135
    4644:	7c e0       	ldi	r23, 0x0C	; 12
    4646:	06 c0       	rjmp	.+12     	; 0x4654 <chain_create+0x41c>
		};
	}
	else
	{
		success=FALSE;
		DEBUG_P(PSTR("FAT32 - ERROR, unable to access FSinfo\r\n"));
    4648:	80 91 90 02 	lds	r24, 0x0290
    464c:	90 91 91 02 	lds	r25, 0x0291
    4650:	6e e5       	ldi	r22, 0x5E	; 94
    4652:	7c e0       	ldi	r23, 0x0C	; 12
    4654:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4658:	44 24       	eor	r4, r4
    465a:	55 24       	eor	r5, r5
    465c:	32 01       	movw	r6, r4
	
	if(!success)
		base=0ul;
	
	return base;
}
    465e:	b2 01       	movw	r22, r4
    4660:	c3 01       	movw	r24, r6
    4662:	2c 96       	adiw	r28, 0x0c	; 12
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	cf 91       	pop	r28
    4670:	df 91       	pop	r29
    4672:	1f 91       	pop	r17
    4674:	0f 91       	pop	r16
    4676:	ef 90       	pop	r14
    4678:	df 90       	pop	r13
    467a:	cf 90       	pop	r12
    467c:	bf 90       	pop	r11
    467e:	af 90       	pop	r10
    4680:	9f 90       	pop	r9
    4682:	8f 90       	pop	r8
    4684:	7f 90       	pop	r7
    4686:	6f 90       	pop	r6
    4688:	5f 90       	pop	r5
    468a:	4f 90       	pop	r4
    468c:	08 95       	ret

0000468e <chain_erase>:
	return length;
}

//erase a chain from the fat, freeing clusters
static char chain_erase(unsigned long cluster)
{
    468e:	4f 92       	push	r4
    4690:	5f 92       	push	r5
    4692:	6f 92       	push	r6
    4694:	7f 92       	push	r7
    4696:	8f 92       	push	r8
    4698:	9f 92       	push	r9
    469a:	af 92       	push	r10
    469c:	bf 92       	push	r11
    469e:	cf 92       	push	r12
    46a0:	df 92       	push	r13
    46a2:	ef 92       	push	r14
    46a4:	ff 92       	push	r15
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	2b 01       	movw	r4, r22
    46ac:	3c 01       	movw	r6, r24
	char success;
	unsigned long link;
	unsigned long count=0;
	unsigned char type;
	
	DEBUG_P(PSTR("FAT32 - Erase chain @"));
    46ae:	80 91 90 02 	lds	r24, 0x0290
    46b2:	90 91 91 02 	lds	r25, 0x0291
    46b6:	66 ec       	ldi	r22, 0xC6	; 198
    46b8:	72 e1       	ldi	r23, 0x12	; 18
    46ba:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG(cluster);
    46be:	c0 90 90 02 	lds	r12, 0x0290
    46c2:	d0 90 91 02 	lds	r13, 0x0291
    46c6:	b2 01       	movw	r22, r4
    46c8:	c3 01       	movw	r24, r6
    46ca:	46 ea       	ldi	r20, 0xA6	; 166
    46cc:	52 e0       	ldi	r21, 0x02	; 2
    46ce:	2a e0       	ldi	r18, 0x0A	; 10
    46d0:	00 e0       	ldi	r16, 0x00	; 0
    46d2:	ee 24       	eor	r14, r14
    46d4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    46d8:	bc 01       	movw	r22, r24
    46da:	c6 01       	movw	r24, r12
    46dc:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\r\n"));
    46e0:	80 91 90 02 	lds	r24, 0x0290
    46e4:	90 91 91 02 	lds	r25, 0x0291
    46e8:	63 ec       	ldi	r22, 0xC3	; 195
    46ea:	72 e1       	ldi	r23, 0x12	; 18
    46ec:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	
	type=cluster_type_read(cluster);
    46f0:	b2 01       	movw	r22, r4
    46f2:	c3 01       	movw	r24, r6
    46f4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
	if(type != CLUSTER_TYPE_USED && type != CLUSTER_TYPE_LAST)
    46f8:	82 50       	subi	r24, 0x02	; 2
    46fa:	82 30       	cpi	r24, 0x02	; 2
    46fc:	18 f1       	brcs	.+70     	; 0x4744 <chain_erase+0xb6>
	{
		DEBUG_P(PSTR("FAT32 - ERROR, Attempt to erase non-existent chain @"));	
    46fe:	80 91 90 02 	lds	r24, 0x0290
    4702:	90 91 91 02 	lds	r25, 0x0291
    4706:	6e e8       	ldi	r22, 0x8E	; 142
    4708:	72 e1       	ldi	r23, 0x12	; 18
    470a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(count);
    470e:	c0 90 90 02 	lds	r12, 0x0290
    4712:	d0 90 91 02 	lds	r13, 0x0291
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	70 e0       	ldi	r23, 0x00	; 0
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	46 ea       	ldi	r20, 0xA6	; 166
    4720:	52 e0       	ldi	r21, 0x02	; 2
    4722:	2a e0       	ldi	r18, 0x0A	; 10
    4724:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4728:	bc 01       	movw	r22, r24
    472a:	c6 01       	movw	r24, r12
    472c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    4730:	80 91 90 02 	lds	r24, 0x0290
    4734:	90 91 91 02 	lds	r25, 0x0291
    4738:	6b e8       	ldi	r22, 0x8B	; 139
    473a:	72 e1       	ldi	r23, 0x12	; 18
    473c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4740:	cc 24       	eor	r12, r12
    4742:	25 c0       	rjmp	.+74     	; 0x478e <chain_erase+0x100>
    4744:	88 24       	eor	r8, r8
    4746:	99 24       	eor	r9, r9
    4748:	54 01       	movw	r10, r8
	else
	{
		do
		{
			//get next cluster
			link=cluster_link_read(cluster);
    474a:	b2 01       	movw	r22, r4
    474c:	c3 01       	movw	r24, r6
    474e:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <cluster_link_read>
    4752:	7b 01       	movw	r14, r22
    4754:	8c 01       	movw	r16, r24
			
			//free this cluster
			success=cluster_link_write(cluster, 0x00000000ul);	//free cluster
    4756:	b2 01       	movw	r22, r4
    4758:	c3 01       	movw	r24, r6
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	40 e0       	ldi	r20, 0x00	; 0
    4760:	50 e0       	ldi	r21, 0x00	; 0
    4762:	0e 94 cc 20 	call	0x4198	; 0x4198 <cluster_link_write>
    4766:	c8 2e       	mov	r12, r24
			
			//count freed clusters for FSinfo sector
			if(success)
    4768:	88 23       	and	r24, r24
    476a:	29 f0       	breq	.+10     	; 0x4776 <chain_erase+0xe8>
				count++;
    476c:	08 94       	sec
    476e:	81 1c       	adc	r8, r1
    4770:	91 1c       	adc	r9, r1
    4772:	a1 1c       	adc	r10, r1
    4774:	b1 1c       	adc	r11, r1
				
			//next cluster follows link
			cluster=link;
		}while(link && success);
    4776:	e1 14       	cp	r14, r1
    4778:	f1 04       	cpc	r15, r1
    477a:	01 05       	cpc	r16, r1
    477c:	11 05       	cpc	r17, r1
    477e:	29 f0       	breq	.+10     	; 0x478a <chain_erase+0xfc>
    4780:	27 01       	movw	r4, r14
    4782:	38 01       	movw	r6, r16
    4784:	cc 20       	and	r12, r12
    4786:	09 f7       	brne	.-62     	; 0x474a <chain_erase+0xbc>
    4788:	02 c0       	rjmp	.+4      	; 0x478e <chain_erase+0x100>
	};
	
	if(!success)
    478a:	cc 20       	and	r12, r12
    478c:	49 f4       	brne	.+18     	; 0x47a0 <chain_erase+0x112>
		DEBUG_P(PSTR("FAT32 - ERROR, unable to erase chain\r\n"));
    478e:	80 91 90 02 	lds	r24, 0x0290
    4792:	90 91 91 02 	lds	r25, 0x0291
    4796:	64 e6       	ldi	r22, 0x64	; 100
    4798:	72 e1       	ldi	r23, 0x12	; 18
    479a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    479e:	30 c0       	rjmp	.+96     	; 0x4800 <chain_erase+0x172>
static char fsinfo_total_free_increase(unsigned long increment)
{
	char success=TRUE;
	struct fsinfo_sector_struct *fsinfo_ptr;
	
	fsinfo_ptr=fatcache_sector(fsinfo_sector, FAT_READ);
    47a0:	60 91 db 03 	lds	r22, 0x03DB
    47a4:	70 91 dc 03 	lds	r23, 0x03DC
    47a8:	80 91 dd 03 	lds	r24, 0x03DD
    47ac:	90 91 de 03 	lds	r25, 0x03DE
    47b0:	41 e0       	ldi	r20, 0x01	; 1
    47b2:	0e 94 a5 18 	call	0x314a	; 0x314a <fatcache_sector>
    47b6:	9c 01       	movw	r18, r24
	if(fsinfo_ptr)
    47b8:	00 97       	sbiw	r24, 0x00	; 0
    47ba:	c9 f0       	breq	.+50     	; 0x47ee <chain_erase+0x160>
	{
		fsinfo_ptr->total_free_clusters = LEND_ULONG_WRITE(LEND_ULONG_READ(fsinfo_ptr->total_free_clusters)+increment);
    47bc:	fc 01       	movw	r30, r24
    47be:	e8 51       	subi	r30, 0x18	; 24
    47c0:	fe 4f       	sbci	r31, 0xFE	; 254
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	a2 81       	ldd	r26, Z+2	; 0x02
    47c8:	b3 81       	ldd	r27, Z+3	; 0x03
    47ca:	88 0d       	add	r24, r8
    47cc:	99 1d       	adc	r25, r9
    47ce:	aa 1d       	adc	r26, r10
    47d0:	bb 1d       	adc	r27, r11
    47d2:	80 83       	st	Z, r24
    47d4:	91 83       	std	Z+1, r25	; 0x01
    47d6:	a2 83       	std	Z+2, r26	; 0x02
    47d8:	b3 83       	std	Z+3, r27	; 0x03
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    47da:	2f 5d       	subi	r18, 0xDF	; 223
    47dc:	33 40       	sbci	r19, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    47de:	20 70       	andi	r18, 0x00	; 0
    47e0:	3e 7f       	andi	r19, 0xFE	; 254
    47e2:	23 2b       	or	r18, r19
    47e4:	e9 f4       	brne	.+58     	; 0x4820 <chain_erase+0x192>
		{
			cache_dirty[index]=TRUE;
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	80 93 e3 05 	sts	0x05E3, r24
    47ec:	19 c0       	rjmp	.+50     	; 0x4820 <chain_erase+0x192>
			DEBUG_P(PSTR("FAT32 - Freed "));	
			DEBUG_ULONG(count);
			DEBUG_P(PSTR(" clusters\r\n"));
		}
		else
			DEBUG_P(PSTR("FAT32 - ERROR, unable to update FSinfo sector\r\n"));
    47ee:	80 91 90 02 	lds	r24, 0x0290
    47f2:	90 91 91 02 	lds	r25, 0x0291
    47f6:	69 e1       	ldi	r22, 0x19	; 25
    47f8:	72 e1       	ldi	r23, 0x12	; 18
    47fa:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    47fe:	cc 24       	eor	r12, r12
	};

	return success;
}
    4800:	8c 2d       	mov	r24, r12
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	ff 90       	pop	r15
    4808:	ef 90       	pop	r14
    480a:	df 90       	pop	r13
    480c:	cf 90       	pop	r12
    480e:	bf 90       	pop	r11
    4810:	af 90       	pop	r10
    4812:	9f 90       	pop	r9
    4814:	8f 90       	pop	r8
    4816:	7f 90       	pop	r7
    4818:	6f 90       	pop	r6
    481a:	5f 90       	pop	r5
    481c:	4f 90       	pop	r4
    481e:	08 95       	ret
	else
	{	
		success=fsinfo_total_free_increase(count);
		if(success)
		{
			DEBUG_P(PSTR("FAT32 - Freed "));	
    4820:	80 91 90 02 	lds	r24, 0x0290
    4824:	90 91 91 02 	lds	r25, 0x0291
    4828:	65 e5       	ldi	r22, 0x55	; 85
    482a:	72 e1       	ldi	r23, 0x12	; 18
    482c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(count);
    4830:	c0 90 90 02 	lds	r12, 0x0290
    4834:	d0 90 91 02 	lds	r13, 0x0291
    4838:	c5 01       	movw	r24, r10
    483a:	b4 01       	movw	r22, r8
    483c:	46 ea       	ldi	r20, 0xA6	; 166
    483e:	52 e0       	ldi	r21, 0x02	; 2
    4840:	2a e0       	ldi	r18, 0x0A	; 10
    4842:	00 e0       	ldi	r16, 0x00	; 0
    4844:	ee 24       	eor	r14, r14
    4846:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    484a:	bc 01       	movw	r22, r24
    484c:	c6 01       	movw	r24, r12
    484e:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR(" clusters\r\n"));
    4852:	80 91 90 02 	lds	r24, 0x0290
    4856:	90 91 91 02 	lds	r25, 0x0291
    485a:	69 e4       	ldi	r22, 0x49	; 73
    485c:	72 e1       	ldi	r23, 0x12	; 18
    485e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4862:	cc 24       	eor	r12, r12
    4864:	c3 94       	inc	r12
    4866:	cc cf       	rjmp	.-104    	; 0x4800 <chain_erase+0x172>

00004868 <fat_file_delete>:
	fatcache_clean();
	return success;
}

char fat_file_delete(struct fat_file_struct *file_info_ptr)
{
    4868:	df 92       	push	r13
    486a:	ef 92       	push	r14
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	ec 01       	movw	r28, r24
	char success=TRUE, finished;
	struct directory_struct *directory_ptr;
	unsigned char index;
	
	index=file_info_ptr->directory_index;
    4878:	fc 88       	ldd	r15, Y+20	; 0x14
	
	//get pointer to directory entry
	directory_ptr=dir_entry_get_ptr(file_info_ptr->cluster_directory, index);
    487a:	6c 85       	ldd	r22, Y+12	; 0x0c
    487c:	7d 85       	ldd	r23, Y+13	; 0x0d
    487e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4880:	9f 85       	ldd	r25, Y+15	; 0x0f
    4882:	4f 2d       	mov	r20, r15
    4884:	50 e0       	ldi	r21, 0x00	; 0
    4886:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    488a:	fc 01       	movw	r30, r24
	
	if(directory_ptr)
    488c:	00 97       	sbiw	r24, 0x00	; 0
    488e:	11 f4       	brne	.+4      	; 0x4894 <fat_file_delete+0x2c>
    4890:	10 e0       	ldi	r17, 0x00	; 0
    4892:	6a c0       	rjmp	.+212    	; 0x4968 <fat_file_delete+0x100>
	{
		//mark main directory entry as deleted
		directory_ptr->filename_dos[0]=0xE5;
    4894:	85 ee       	ldi	r24, 0xE5	; 229
    4896:	80 83       	st	Z, r24
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    4898:	ef 5d       	subi	r30, 0xDF	; 223
    489a:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    489c:	e0 70       	andi	r30, 0x00	; 0
    489e:	fe 7f       	andi	r31, 0xFE	; 254
    48a0:	ef 2b       	or	r30, r31
    48a2:	19 f4       	brne	.+6      	; 0x48aa <fat_file_delete+0x42>
		{
			cache_dirty[index]=TRUE;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	80 93 e3 05 	sts	0x05E3, r24
    48aa:	00 e0       	ldi	r16, 0x00	; 0
    48ac:	ff 20       	and	r15, r15
    48ae:	09 f4       	brne	.+2      	; 0x48b2 <fat_file_delete+0x4a>
    48b0:	01 e0       	ldi	r16, 0x01	; 1
    48b2:	11 e0       	ldi	r17, 0x01	; 1
		{
			index--;
			directory_ptr=dir_entry_get_ptr(file_info_ptr->cluster_directory, index);
			if(directory_ptr)
			{
				if(dir_type(directory_ptr)==DIR_TYPE_LFN)
    48b4:	dd 24       	eor	r13, r13
    48b6:	d3 94       	inc	r13
				{
					directory_ptr->filename_dos[0]=0xE5;
    48b8:	55 ee       	ldi	r21, 0xE5	; 229
    48ba:	e5 2e       	mov	r14, r21
    48bc:	23 c0       	rjmp	.+70     	; 0x4904 <fat_file_delete+0x9c>
		finished=FALSE;
		if(index==0)
			finished=TRUE;
		while(!finished)
		{
			index--;
    48be:	fa 94       	dec	r15
			directory_ptr=dir_entry_get_ptr(file_info_ptr->cluster_directory, index);
    48c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    48c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    48c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    48c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    48c8:	4f 2d       	mov	r20, r15
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    48d0:	fc 01       	movw	r30, r24
			if(directory_ptr)
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	11 f4       	brne	.+4      	; 0x48da <fat_file_delete+0x72>
    48d6:	10 e0       	ldi	r17, 0x00	; 0
    48d8:	08 c0       	rjmp	.+16     	; 0x48ea <fat_file_delete+0x82>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    48da:	80 81       	ld	r24, Z
    48dc:	85 3e       	cpi	r24, 0xE5	; 229
    48de:	29 f0       	breq	.+10     	; 0x48ea <fat_file_delete+0x82>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    48e0:	88 23       	and	r24, r24
    48e2:	19 f0       	breq	.+6      	; 0x48ea <fat_file_delete+0x82>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    48e4:	83 85       	ldd	r24, Z+11	; 0x0b
    48e6:	8f 30       	cpi	r24, 0x0F	; 15
    48e8:	11 f0       	breq	.+4      	; 0x48ee <fat_file_delete+0x86>
			{
				if(dir_type(directory_ptr)==DIR_TYPE_LFN)
    48ea:	01 e0       	ldi	r16, 0x01	; 1
    48ec:	09 c0       	rjmp	.+18     	; 0x4900 <fat_file_delete+0x98>
				{
					directory_ptr->filename_dos[0]=0xE5;
    48ee:	e0 82       	st	Z, r14
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    48f0:	ef 5d       	subi	r30, 0xDF	; 223
    48f2:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    48f4:	e0 70       	andi	r30, 0x00	; 0
    48f6:	fe 7f       	andi	r31, 0xFE	; 254
    48f8:	ef 2b       	or	r30, r31
    48fa:	11 f4       	brne	.+4      	; 0x4900 <fat_file_delete+0x98>
		{
			cache_dirty[index]=TRUE;
    48fc:	d0 92 e3 05 	sts	0x05E3, r13
			else
			{
				success=FALSE;
				finished=TRUE;
			};
			if(index==0)
    4900:	ff 20       	and	r15, r15
    4902:	11 f0       	breq	.+4      	; 0x4908 <fat_file_delete+0xa0>
		
		//also erase any preceeding lfn entries
		finished=FALSE;
		if(index==0)
			finished=TRUE;
		while(!finished)
    4904:	00 23       	and	r16, r16
    4906:	d9 f2       	breq	.-74     	; 0x48be <fat_file_delete+0x56>
			if(index==0)
				finished=TRUE;
		};
		
		//erase file chain, if there is one
		if(success)
    4908:	11 23       	and	r17, r17
    490a:	71 f0       	breq	.+28     	; 0x4928 <fat_file_delete+0xc0>
		{
			if(file_info_ptr->chain.base)
    490c:	68 81       	ld	r22, Y
    490e:	79 81       	ldd	r23, Y+1	; 0x01
    4910:	8a 81       	ldd	r24, Y+2	; 0x02
    4912:	9b 81       	ldd	r25, Y+3	; 0x03
    4914:	61 15       	cp	r22, r1
    4916:	71 05       	cpc	r23, r1
    4918:	81 05       	cpc	r24, r1
    491a:	91 05       	cpc	r25, r1
    491c:	11 f4       	brne	.+4      	; 0x4922 <fat_file_delete+0xba>
    491e:	11 e0       	ldi	r17, 0x01	; 1
    4920:	05 c0       	rjmp	.+10     	; 0x492c <fat_file_delete+0xc4>
			{
				success=chain_erase(file_info_ptr->chain.base);
    4922:	0e 94 47 23 	call	0x468e	; 0x468e <chain_erase>
    4926:	18 2f       	mov	r17, r24
		};
	}
	else
		success=FALSE;
	
	if(success)
    4928:	11 23       	and	r17, r17
    492a:	f1 f0       	breq	.+60     	; 0x4968 <fat_file_delete+0x100>
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    492c:	88 81       	ld	r24, Y
    492e:	99 81       	ldd	r25, Y+1	; 0x01
    4930:	aa 81       	ldd	r26, Y+2	; 0x02
    4932:	bb 81       	ldd	r27, Y+3	; 0x03
    4934:	00 97       	sbiw	r24, 0x00	; 0
    4936:	a1 05       	cpc	r26, r1
    4938:	b1 05       	cpc	r27, r1
    493a:	61 f0       	breq	.+24     	; 0x4954 <fat_file_delete+0xec>
	{
		chain_ptr->base=cluster;
    493c:	18 82       	st	Y, r1
    493e:	19 82       	std	Y+1, r1	; 0x01
    4940:	1a 82       	std	Y+2, r1	; 0x02
    4942:	1b 82       	std	Y+3, r1	; 0x03
		chain_ptr->physical=cluster;
    4944:	1c 82       	std	Y+4, r1	; 0x04
    4946:	1d 82       	std	Y+5, r1	; 0x05
    4948:	1e 82       	std	Y+6, r1	; 0x06
    494a:	1f 82       	std	Y+7, r1	; 0x07
		chain_ptr->logical=0ul;
    494c:	18 86       	std	Y+8, r1	; 0x08
    494e:	19 86       	std	Y+9, r1	; 0x09
    4950:	1a 86       	std	Y+10, r1	; 0x0a
    4952:	1b 86       	std	Y+11, r1	; 0x0b
	{
		chain_init(&file_info_ptr->chain, 0ul);
		file_info_ptr->cluster_directory=0;
    4954:	1c 86       	std	Y+12, r1	; 0x0c
    4956:	1d 86       	std	Y+13, r1	; 0x0d
    4958:	1e 86       	std	Y+14, r1	; 0x0e
    495a:	1f 86       	std	Y+15, r1	; 0x0f
		file_info_ptr->size=0;
    495c:	18 8a       	std	Y+16, r1	; 0x10
    495e:	19 8a       	std	Y+17, r1	; 0x11
    4960:	1a 8a       	std	Y+18, r1	; 0x12
    4962:	1b 8a       	std	Y+19, r1	; 0x13
		file_info_ptr->directory_index=0;
    4964:	1d 8a       	std	Y+21, r1	; 0x15
    4966:	1c 8a       	std	Y+20, r1	; 0x14
	};

	fatcache_clean();
    4968:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    496c:	81 2f       	mov	r24, r17
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	ff 90       	pop	r15
    4978:	ef 90       	pop	r14
    497a:	df 90       	pop	r13
    497c:	08 95       	ret

0000497e <dir_name_short>:
	return retval;	
}

//returns short name from directory entry
static char* dir_name_short(struct directory_struct *directory, char* text)
{
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	9c 01       	movw	r18, r24
    4984:	fb 01       	movw	r30, r22
	memcpy(text, directory->filename_dos, 8);
    4986:	eb 01       	movw	r28, r22
    4988:	dc 01       	movw	r26, r24
    498a:	88 e0       	ldi	r24, 0x08	; 8
    498c:	0d 90       	ld	r0, X+
    498e:	09 92       	st	Y+, r0
    4990:	81 50       	subi	r24, 0x01	; 1
    4992:	e1 f7       	brne	.-8      	; 0x498c <dir_name_short+0xe>
	text[8]='.';
    4994:	8e e2       	ldi	r24, 0x2E	; 46
    4996:	80 87       	std	Z+8, r24	; 0x08
	memcpy(&text[9], directory->filename_ext, 3);
    4998:	ef 01       	movw	r28, r30
    499a:	29 96       	adiw	r28, 0x09	; 9
    499c:	d9 01       	movw	r26, r18
    499e:	18 96       	adiw	r26, 0x08	; 8
    49a0:	83 e0       	ldi	r24, 0x03	; 3
    49a2:	0d 90       	ld	r0, X+
    49a4:	09 92       	st	Y+, r0
    49a6:	81 50       	subi	r24, 0x01	; 1
    49a8:	e1 f7       	brne	.-8      	; 0x49a2 <dir_name_short+0x24>
	text[12]=0x00;
    49aa:	14 86       	std	Z+12, r1	; 0x0c
	
	if(text[9]==' ' && text[10]==' ' && text[11]==' ')
    49ac:	81 85       	ldd	r24, Z+9	; 0x09
    49ae:	80 32       	cpi	r24, 0x20	; 32
    49b0:	39 f4       	brne	.+14     	; 0x49c0 <dir_name_short+0x42>
    49b2:	82 85       	ldd	r24, Z+10	; 0x0a
    49b4:	80 32       	cpi	r24, 0x20	; 32
    49b6:	21 f4       	brne	.+8      	; 0x49c0 <dir_name_short+0x42>
    49b8:	83 85       	ldd	r24, Z+11	; 0x0b
    49ba:	80 32       	cpi	r24, 0x20	; 32
    49bc:	09 f4       	brne	.+2      	; 0x49c0 <dir_name_short+0x42>
		text[8]=' ';	//if no extention, change . to a space
    49be:	80 87       	std	Z+8, r24	; 0x08
	return text;
}
    49c0:	cf 01       	movw	r24, r30
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	08 95       	ret

000049c8 <fat_directory_list>:
	return success;
}

//list directory entries, short name, starting cluster, size, and long name if available
void fat_directory_list(unsigned long base_cluster)
{
    49c8:	2f 92       	push	r2
    49ca:	3f 92       	push	r3
    49cc:	4f 92       	push	r4
    49ce:	5f 92       	push	r5
    49d0:	6f 92       	push	r6
    49d2:	7f 92       	push	r7
    49d4:	8f 92       	push	r8
    49d6:	9f 92       	push	r9
    49d8:	af 92       	push	r10
    49da:	bf 92       	push	r11
    49dc:	cf 92       	push	r12
    49de:	df 92       	push	r13
    49e0:	ef 92       	push	r14
    49e2:	ff 92       	push	r15
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	df 93       	push	r29
    49ea:	cf 93       	push	r28
    49ec:	00 d0       	rcall	.+0      	; 0x49ee <fat_directory_list+0x26>
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <fat_directory_list+0x28>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	4b 01       	movw	r8, r22
    49f6:	5c 01       	movw	r10, r24
	unsigned char lfn_sequence=0;
	
	struct directory_struct *directory_ptr=NULL;
	struct lfn_struct		*lfn_ptr;

	DIRTXT_P(PSTR("Directory @ cluster "));DIRTXT_ULONG(base_cluster);DIRTXT_P(PSTR("\r\n\r\n"));
    49f8:	80 91 92 02 	lds	r24, 0x0292
    49fc:	90 91 93 02 	lds	r25, 0x0293
    4a00:	6d ec       	ldi	r22, 0xCD	; 205
    4a02:	79 e0       	ldi	r23, 0x09	; 9
    4a04:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4a08:	c0 90 92 02 	lds	r12, 0x0292
    4a0c:	d0 90 93 02 	lds	r13, 0x0293
    4a10:	c5 01       	movw	r24, r10
    4a12:	b4 01       	movw	r22, r8
    4a14:	46 ea       	ldi	r20, 0xA6	; 166
    4a16:	52 e0       	ldi	r21, 0x02	; 2
    4a18:	2a e0       	ldi	r18, 0x0A	; 10
    4a1a:	00 e0       	ldi	r16, 0x00	; 0
    4a1c:	ee 24       	eor	r14, r14
    4a1e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4a22:	bc 01       	movw	r22, r24
    4a24:	c6 01       	movw	r24, r12
    4a26:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    4a2a:	80 91 92 02 	lds	r24, 0x0292
    4a2e:	90 91 93 02 	lds	r25, 0x0293
    4a32:	68 ec       	ldi	r22, 0xC8	; 200
    4a34:	79 e0       	ldi	r23, 0x09	; 9
    4a36:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>

	//determine size of directory by counting how many clusters it contains
	total_entries = chain_length(base_cluster, NULL) << (sectors_per_cluster_power+4);
    4a3a:	c5 01       	movw	r24, r10
    4a3c:	b4 01       	movw	r22, r8
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    4a46:	20 91 95 02 	lds	r18, 0x0295
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	2c 5f       	subi	r18, 0xFC	; 252
    4a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a50:	04 c0       	rjmp	.+8      	; 0x4a5a <fat_directory_list+0x92>
    4a52:	66 0f       	add	r22, r22
    4a54:	77 1f       	adc	r23, r23
    4a56:	88 1f       	adc	r24, r24
    4a58:	99 1f       	adc	r25, r25
    4a5a:	2a 95       	dec	r18
    4a5c:	d2 f7       	brpl	.-12     	; 0x4a52 <fat_directory_list+0x8a>
    4a5e:	2b 01       	movw	r4, r22

	index=0;
	long_file_name[0]=0;
    4a60:	10 92 ba 02 	sts	0x02BA, r1
    4a64:	66 24       	eor	r6, r6
    4a66:	77 24       	eor	r7, r7
    4a68:	10 e0       	ldi	r17, 0x00	; 0
    4a6a:	ff 24       	eor	r15, r15
				if(lfn_ptr->sequence & 0x40)
				{
					//store initial text, init checksum and sequence
					lfn_sequence=lfn_ptr->sequence & 0x3F;
					lfn_checksum=lfn_ptr->checksum;
					long_file_name[lfn_sequence*13]=0;
    4a6c:	bd e0       	ldi	r27, 0x0D	; 13
    4a6e:	2b 2e       	mov	r2, r27
    4a70:	31 2c       	mov	r3, r1

	index=0;
	long_file_name[0]=0;
	do
	{
		directory_ptr = dir_entry_get_ptr(base_cluster, index);
    4a72:	c5 01       	movw	r24, r10
    4a74:	b4 01       	movw	r22, r8
    4a76:	a3 01       	movw	r20, r6
    4a78:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    4a7c:	9c 83       	std	Y+4, r25	; 0x04
    4a7e:	8b 83       	std	Y+3, r24	; 0x03
		
		if(directory_ptr)
    4a80:	00 97       	sbiw	r24, 0x00	; 0
    4a82:	09 f4       	brne	.+2      	; 0x4a86 <fat_directory_list+0xbe>
    4a84:	e0 c0       	rjmp	.+448    	; 0x4c46 <fat_directory_list+0x27e>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    4a86:	fc 01       	movw	r30, r24
    4a88:	20 81       	ld	r18, Z
    4a8a:	25 3e       	cpi	r18, 0xE5	; 229
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <fat_directory_list+0xc8>
    4a8e:	d8 c0       	rjmp	.+432    	; 0x4c40 <fat_directory_list+0x278>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    4a90:	22 23       	and	r18, r18
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <fat_directory_list+0xce>
    4a94:	e0 c0       	rjmp	.+448    	; 0x4c56 <fat_directory_list+0x28e>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    4a96:	eb 81       	ldd	r30, Y+3	; 0x03
    4a98:	fc 81       	ldd	r31, Y+4	; 0x04
    4a9a:	83 85       	ldd	r24, Z+11	; 0x0b
    4a9c:	8f 30       	cpi	r24, 0x0F	; 15
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <fat_directory_list+0xda>
    4aa0:	a2 c0       	rjmp	.+324    	; 0x4be6 <fat_directory_list+0x21e>
    4aa2:	20 91 92 02 	lds	r18, 0x0292
    4aa6:	30 91 93 02 	lds	r19, 0x0293
		{
			if(dir_type(directory_ptr)==DIR_TYPE_USED)
			{
				if(directory_ptr->attributes & 0x10)
    4aaa:	84 ff       	sbrs	r24, 4
    4aac:	04 c0       	rjmp	.+8      	; 0x4ab6 <fat_directory_list+0xee>
					DIRTXT_P(PSTR("<DIR>  "));
    4aae:	c9 01       	movw	r24, r18
    4ab0:	60 ec       	ldi	r22, 0xC0	; 192
    4ab2:	79 e0       	ldi	r23, 0x09	; 9
    4ab4:	03 c0       	rjmp	.+6      	; 0x4abc <fat_directory_list+0xf4>
				else
					DIRTXT_P(PSTR("<FILE> "));
    4ab6:	c9 01       	movw	r24, r18
    4ab8:	68 eb       	ldi	r22, 0xB8	; 184
    4aba:	79 e0       	ldi	r23, 0x09	; 9
    4abc:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				
				DIRTXT(dir_name_short(directory_ptr, text));
    4ac0:	80 91 92 02 	lds	r24, 0x0292
    4ac4:	90 91 93 02 	lds	r25, 0x0293
    4ac8:	9a 83       	std	Y+2, r25	; 0x02
    4aca:	89 83       	std	Y+1, r24	; 0x01
    4acc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ace:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad0:	66 ea       	ldi	r22, 0xA6	; 166
    4ad2:	72 e0       	ldi	r23, 0x02	; 2
    4ad4:	0e 94 bf 24 	call	0x497e	; 0x497e <dir_name_short>
    4ad8:	bc 01       	movw	r22, r24
    4ada:	89 81       	ldd	r24, Y+1	; 0x01
    4adc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ade:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DIRTXT_P(PSTR(" @CLUST "));
    4ae2:	80 91 92 02 	lds	r24, 0x0292
    4ae6:	90 91 93 02 	lds	r25, 0x0293
    4aea:	6f ea       	ldi	r22, 0xAF	; 175
    4aec:	79 e0       	ldi	r23, 0x09	; 9
    4aee:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DIRTXT_ULONG_FIXED(((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h)<<16) + LEND_UINT_READ(directory_ptr->cluster_l),10);
    4af2:	c0 90 92 02 	lds	r12, 0x0292
    4af6:	d0 90 93 02 	lds	r13, 0x0293
    4afa:	eb 81       	ldd	r30, Y+3	; 0x03
    4afc:	fc 81       	ldd	r31, Y+4	; 0x04
    4afe:	64 89       	ldd	r22, Z+20	; 0x14
    4b00:	75 89       	ldd	r23, Z+21	; 0x15
    4b02:	88 27       	eor	r24, r24
    4b04:	77 fd       	sbrc	r23, 7
    4b06:	80 95       	com	r24
    4b08:	98 2f       	mov	r25, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	77 27       	eor	r23, r23
    4b0e:	66 27       	eor	r22, r22
    4b10:	22 8d       	ldd	r18, Z+26	; 0x1a
    4b12:	33 8d       	ldd	r19, Z+27	; 0x1b
    4b14:	44 27       	eor	r20, r20
    4b16:	37 fd       	sbrc	r19, 7
    4b18:	40 95       	com	r20
    4b1a:	54 2f       	mov	r21, r20
    4b1c:	62 0f       	add	r22, r18
    4b1e:	73 1f       	adc	r23, r19
    4b20:	84 1f       	adc	r24, r20
    4b22:	95 1f       	adc	r25, r21
    4b24:	46 ea       	ldi	r20, 0xA6	; 166
    4b26:	52 e0       	ldi	r21, 0x02	; 2
    4b28:	2a e0       	ldi	r18, 0x0A	; 10
    4b2a:	0a e0       	ldi	r16, 0x0A	; 10
    4b2c:	f0 e2       	ldi	r31, 0x20	; 32
    4b2e:	ef 2e       	mov	r14, r31
    4b30:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4b34:	bc 01       	movw	r22, r24
    4b36:	c6 01       	movw	r24, r12
    4b38:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				
				if(directory_ptr->attributes & 0x10)
    4b3c:	eb 81       	ldd	r30, Y+3	; 0x03
    4b3e:	fc 81       	ldd	r31, Y+4	; 0x04
    4b40:	83 85       	ldd	r24, Z+11	; 0x0b
    4b42:	20 91 92 02 	lds	r18, 0x0292
    4b46:	30 91 93 02 	lds	r19, 0x0293
    4b4a:	84 ff       	sbrs	r24, 4
    4b4c:	06 c0       	rjmp	.+12     	; 0x4b5a <fat_directory_list+0x192>
					DIRTXT_P(PSTR("                "));
    4b4e:	c9 01       	movw	r24, r18
    4b50:	6e e9       	ldi	r22, 0x9E	; 158
    4b52:	79 e0       	ldi	r23, 0x09	; 9
    4b54:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4b58:	1b c0       	rjmp	.+54     	; 0x4b90 <fat_directory_list+0x1c8>
				else
				{
					DIRTXT_P(PSTR(" SIZE="));
    4b5a:	c9 01       	movw	r24, r18
    4b5c:	67 e9       	ldi	r22, 0x97	; 151
    4b5e:	79 e0       	ldi	r23, 0x09	; 9
    4b60:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					DIRTXT_ULONG_FIXED(LEND_ULONG_READ(directory_ptr->size),10);
    4b64:	c0 90 92 02 	lds	r12, 0x0292
    4b68:	d0 90 93 02 	lds	r13, 0x0293
    4b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    4b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    4b70:	64 8d       	ldd	r22, Z+28	; 0x1c
    4b72:	75 8d       	ldd	r23, Z+29	; 0x1d
    4b74:	86 8d       	ldd	r24, Z+30	; 0x1e
    4b76:	97 8d       	ldd	r25, Z+31	; 0x1f
    4b78:	46 ea       	ldi	r20, 0xA6	; 166
    4b7a:	52 e0       	ldi	r21, 0x02	; 2
    4b7c:	2a e0       	ldi	r18, 0x0A	; 10
    4b7e:	0a e0       	ldi	r16, 0x0A	; 10
    4b80:	e0 e2       	ldi	r30, 0x20	; 32
    4b82:	ee 2e       	mov	r14, r30
    4b84:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4b88:	bc 01       	movw	r22, r24
    4b8a:	c6 01       	movw	r24, r12
    4b8c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				};
				
				if(long_file_name[0])
    4b90:	80 91 ba 02 	lds	r24, 0x02BA
    4b94:	88 23       	and	r24, r24
    4b96:	f1 f0       	breq	.+60     	; 0x4bd4 <fat_directory_list+0x20c>
				{
					if(lfn_checksum == dir_lfn_checksum(directory_ptr))
    4b98:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <dir_lfn_checksum>
    4ba0:	18 17       	cp	r17, r24
    4ba2:	c1 f4       	brne	.+48     	; 0x4bd4 <fat_directory_list+0x20c>
					{
						DIRTXT_P(PSTR(" \""));
    4ba4:	80 91 92 02 	lds	r24, 0x0292
    4ba8:	90 91 93 02 	lds	r25, 0x0293
    4bac:	64 e9       	ldi	r22, 0x94	; 148
    4bae:	79 e0       	ldi	r23, 0x09	; 9
    4bb0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						DIRTXT(long_file_name);
    4bb4:	80 91 92 02 	lds	r24, 0x0292
    4bb8:	90 91 93 02 	lds	r25, 0x0293
    4bbc:	6a eb       	ldi	r22, 0xBA	; 186
    4bbe:	72 e0       	ldi	r23, 0x02	; 2
    4bc0:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
						DIRTXT_P(PSTR("\""));
    4bc4:	80 91 92 02 	lds	r24, 0x0292
    4bc8:	90 91 93 02 	lds	r25, 0x0293
    4bcc:	62 e9       	ldi	r22, 0x92	; 146
    4bce:	79 e0       	ldi	r23, 0x09	; 9
    4bd0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					};
				};
				DIRTXT_P(PSTR("\r\n"));
    4bd4:	80 91 92 02 	lds	r24, 0x0292
    4bd8:	90 91 93 02 	lds	r25, 0x0293
    4bdc:	6f e8       	ldi	r22, 0x8F	; 143
    4bde:	79 e0       	ldi	r23, 0x09	; 9
    4be0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4be4:	2d c0       	rjmp	.+90     	; 0x4c40 <fat_directory_list+0x278>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    4be6:	25 3e       	cpi	r18, 0xE5	; 229
    4be8:	59 f1       	breq	.+86     	; 0x4c40 <fat_directory_list+0x278>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    4bea:	22 23       	and	r18, r18
    4bec:	a1 f1       	breq	.+104    	; 0x4c56 <fat_directory_list+0x28e>
			}
			else if(dir_type(directory_ptr)==DIR_TYPE_LFN)
			{
				lfn_ptr = (struct lfn_struct*)directory_ptr;
				//sequence start
				if(lfn_ptr->sequence & 0x40)
    4bee:	26 ff       	sbrs	r18, 6
    4bf0:	12 c0       	rjmp	.+36     	; 0x4c16 <fat_directory_list+0x24e>
				{
					//store initial text, init checksum and sequence
					lfn_sequence=lfn_ptr->sequence & 0x3F;
    4bf2:	2f 73       	andi	r18, 0x3F	; 63
					lfn_checksum=lfn_ptr->checksum;
    4bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    4bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    4bf8:	05 85       	ldd	r16, Z+13	; 0x0d
					long_file_name[lfn_sequence*13]=0;
    4bfa:	82 2f       	mov	r24, r18
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	82 9d       	mul	r24, r2
    4c00:	f0 01       	movw	r30, r0
    4c02:	83 9d       	mul	r24, r3
    4c04:	f0 0d       	add	r31, r0
    4c06:	92 9d       	mul	r25, r2
    4c08:	f0 0d       	add	r31, r0
    4c0a:	11 24       	eor	r1, r1
    4c0c:	e6 54       	subi	r30, 0x46	; 70
    4c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    4c10:	10 82       	st	Z, r1
					lfn_sequence--;
    4c12:	f2 2e       	mov	r15, r18
    4c14:	07 c0       	rjmp	.+14     	; 0x4c24 <fat_directory_list+0x25c>
					dir_lfn_text_get(lfn_ptr, &long_file_name[lfn_sequence*13]);
				}
				//valid sequence?
				else if(lfn_ptr->sequence == lfn_sequence && lfn_ptr->checksum == lfn_checksum)
    4c16:	2f 15       	cp	r18, r15
    4c18:	89 f4       	brne	.+34     	; 0x4c3c <fat_directory_list+0x274>
    4c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    4c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    4c1e:	05 85       	ldd	r16, Z+13	; 0x0d
    4c20:	01 17       	cp	r16, r17
    4c22:	61 f4       	brne	.+24     	; 0x4c3c <fat_directory_list+0x274>
				{
					lfn_sequence--;
    4c24:	fa 94       	dec	r15
					dir_lfn_text_get(lfn_ptr, &long_file_name[lfn_sequence*13]);
    4c26:	fd e0       	ldi	r31, 0x0D	; 13
    4c28:	ff 9e       	mul	r15, r31
    4c2a:	b0 01       	movw	r22, r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	66 54       	subi	r22, 0x46	; 70
    4c30:	7d 4f       	sbci	r23, 0xFD	; 253
    4c32:	8b 81       	ldd	r24, Y+3	; 0x03
    4c34:	9c 81       	ldd	r25, Y+4	; 0x04
    4c36:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <dir_lfn_text_get>
    4c3a:	03 c0       	rjmp	.+6      	; 0x4c42 <fat_directory_list+0x27a>
				}
				//invalid lfn
				else
				{
					long_file_name[0]=0;
    4c3c:	10 92 ba 02 	sts	0x02BA, r1
				};
			}
			else if(dir_type(directory_ptr)==DIR_TYPE_UNUSED)
    4c40:	01 2f       	mov	r16, r17
    4c42:	80 e0       	ldi	r24, 0x00	; 0
    4c44:	0a c0       	rjmp	.+20     	; 0x4c5a <fat_directory_list+0x292>
				finished=TRUE;
			};
		}	
		else
		{
			DEBUG_P(PSTR("FAT32 - DIR ERROR, UNABLE TO READ CHAIN\r\n"));
    4c46:	80 91 90 02 	lds	r24, 0x0290
    4c4a:	90 91 91 02 	lds	r25, 0x0291
    4c4e:	65 e6       	ldi	r22, 0x65	; 101
    4c50:	79 e0       	ldi	r23, 0x09	; 9
    4c52:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4c56:	01 2f       	mov	r16, r17
    4c58:	81 e0       	ldi	r24, 0x01	; 1
			success=FALSE;
			finished=TRUE;
		};
		
		index++;
    4c5a:	08 94       	sec
    4c5c:	61 1c       	adc	r6, r1
    4c5e:	71 1c       	adc	r7, r1
		
		if(index==total_entries)
    4c60:	64 14       	cp	r6, r4
    4c62:	75 04       	cpc	r7, r5
    4c64:	21 f0       	breq	.+8      	; 0x4c6e <fat_directory_list+0x2a6>
			finished=TRUE;
		
	}while(!finished);
    4c66:	88 23       	and	r24, r24
    4c68:	11 f4       	brne	.+4      	; 0x4c6e <fat_directory_list+0x2a6>
    4c6a:	10 2f       	mov	r17, r16
    4c6c:	02 cf       	rjmp	.-508    	; 0x4a72 <fat_directory_list+0xaa>
}
    4c6e:	0f 90       	pop	r0
    4c70:	0f 90       	pop	r0
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
    4c76:	cf 91       	pop	r28
    4c78:	df 91       	pop	r29
    4c7a:	1f 91       	pop	r17
    4c7c:	0f 91       	pop	r16
    4c7e:	ff 90       	pop	r15
    4c80:	ef 90       	pop	r14
    4c82:	df 90       	pop	r13
    4c84:	cf 90       	pop	r12
    4c86:	bf 90       	pop	r11
    4c88:	af 90       	pop	r10
    4c8a:	9f 90       	pop	r9
    4c8c:	8f 90       	pop	r8
    4c8e:	7f 90       	pop	r7
    4c90:	6f 90       	pop	r6
    4c92:	5f 90       	pop	r5
    4c94:	4f 90       	pop	r4
    4c96:	3f 90       	pop	r3
    4c98:	2f 90       	pop	r2
    4c9a:	08 95       	ret

00004c9c <fat_debug_dir>:
		cluster++;
	};
}

void fat_debug_dir(unsigned long base_cluster, unsigned int index)
{
    4c9c:	2f 92       	push	r2
    4c9e:	3f 92       	push	r3
    4ca0:	4f 92       	push	r4
    4ca2:	5f 92       	push	r5
    4ca4:	6f 92       	push	r6
    4ca6:	7f 92       	push	r7
    4ca8:	8f 92       	push	r8
    4caa:	9f 92       	push	r9
    4cac:	af 92       	push	r10
    4cae:	bf 92       	push	r11
    4cb0:	cf 92       	push	r12
    4cb2:	df 92       	push	r13
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	4b 01       	movw	r8, r22
    4cc2:	5c 01       	movw	r10, r24
    4cc4:	3a 01       	movw	r6, r20
	unsigned int total_entries=0, tempint=20;

	struct directory_struct *directory_ptr;
	struct lfn_struct		*lfn_ptr;
	
	DEBUG_P(PSTR("FAT32 - **DEBUG** Directory table @ cluster "));DEBUG_ULONG(base_cluster);DEBUG_P(PSTR("\r\n\r\n"));
    4cc6:	80 91 90 02 	lds	r24, 0x0290
    4cca:	90 91 91 02 	lds	r25, 0x0291
    4cce:	68 ee       	ldi	r22, 0xE8	; 232
    4cd0:	74 e1       	ldi	r23, 0x14	; 20
    4cd2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4cd6:	c0 90 90 02 	lds	r12, 0x0290
    4cda:	d0 90 91 02 	lds	r13, 0x0291
    4cde:	c5 01       	movw	r24, r10
    4ce0:	b4 01       	movw	r22, r8
    4ce2:	46 ea       	ldi	r20, 0xA6	; 166
    4ce4:	52 e0       	ldi	r21, 0x02	; 2
    4ce6:	2a e0       	ldi	r18, 0x0A	; 10
    4ce8:	00 e0       	ldi	r16, 0x00	; 0
    4cea:	ee 24       	eor	r14, r14
    4cec:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	c6 01       	movw	r24, r12
    4cf4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    4cf8:	80 91 90 02 	lds	r24, 0x0290
    4cfc:	90 91 91 02 	lds	r25, 0x0291
    4d00:	63 ee       	ldi	r22, 0xE3	; 227
    4d02:	74 e1       	ldi	r23, 0x14	; 20
    4d04:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	
	//determine size of directory by counting how many clusters it contains
	total_entries = chain_length(base_cluster, NULL) << (sectors_per_cluster_power+4);
    4d08:	c5 01       	movw	r24, r10
    4d0a:	b4 01       	movw	r22, r8
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	50 e0       	ldi	r21, 0x00	; 0
    4d10:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    4d14:	20 91 95 02 	lds	r18, 0x0295
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	2c 5f       	subi	r18, 0xFC	; 252
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	04 c0       	rjmp	.+8      	; 0x4d28 <fat_debug_dir+0x8c>
    4d20:	66 0f       	add	r22, r22
    4d22:	77 1f       	adc	r23, r23
    4d24:	88 1f       	adc	r24, r24
    4d26:	99 1f       	adc	r25, r25
    4d28:	2a 95       	dec	r18
    4d2a:	d2 f7       	brpl	.-12     	; 0x4d20 <fat_debug_dir+0x84>
    4d2c:	1b 01       	movw	r2, r22
	DEBUG_P(PSTR("MAX DIRECTORY INDEX = "));
    4d2e:	80 91 90 02 	lds	r24, 0x0290
    4d32:	90 91 91 02 	lds	r25, 0x0291
    4d36:	6c ec       	ldi	r22, 0xCC	; 204
    4d38:	74 e1       	ldi	r23, 0x14	; 20
    4d3a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG(total_entries);
    4d3e:	c0 90 90 02 	lds	r12, 0x0290
    4d42:	d0 90 91 02 	lds	r13, 0x0291
    4d46:	b1 01       	movw	r22, r2
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	46 ea       	ldi	r20, 0xA6	; 166
    4d4e:	52 e0       	ldi	r21, 0x02	; 2
    4d50:	2a e0       	ldi	r18, 0x0A	; 10
    4d52:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4d56:	bc 01       	movw	r22, r24
    4d58:	c6 01       	movw	r24, r12
    4d5a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\r\n\r\n"));
    4d5e:	80 91 90 02 	lds	r24, 0x0290
    4d62:	90 91 91 02 	lds	r25, 0x0291
    4d66:	67 ec       	ldi	r22, 0xC7	; 199
    4d68:	74 e1       	ldi	r23, 0x14	; 20
    4d6a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    4d6e:	54 e1       	ldi	r21, 0x14	; 20
    4d70:	45 2e       	mov	r4, r21
    4d72:	51 2c       	mov	r5, r1
					DEBUG_ULONG_FIXED(LEND_ULONG_READ(directory_ptr->size),10);
					DEBUG_P(PSTR(" CLUST="));
					DEBUG_ULONG_FIXED(((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h)<<16) + LEND_UINT_READ(directory_ptr->cluster_l),10);
					DEBUG_P(PSTR(" \""));
					dir_name_short(directory_ptr, text);
					text[0]='_';
    4d74:	4f e5       	ldi	r20, 0x5F	; 95
    4d76:	f4 2e       	mov	r15, r20
	DEBUG_ULONG(total_entries);
	DEBUG_P(PSTR("\r\n\r\n"));

	do
	{
		DEBUG_ULONG_FIXED(index, 6);
    4d78:	c0 90 90 02 	lds	r12, 0x0290
    4d7c:	d0 90 91 02 	lds	r13, 0x0291
    4d80:	b3 01       	movw	r22, r6
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	46 ea       	ldi	r20, 0xA6	; 166
    4d88:	52 e0       	ldi	r21, 0x02	; 2
    4d8a:	2a e0       	ldi	r18, 0x0A	; 10
    4d8c:	06 e0       	ldi	r16, 0x06	; 6
    4d8e:	30 e2       	ldi	r19, 0x20	; 32
    4d90:	e3 2e       	mov	r14, r19
    4d92:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4d96:	bc 01       	movw	r22, r24
    4d98:	c6 01       	movw	r24, r12
    4d9a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		directory_ptr=dir_entry_get_ptr(base_cluster, index);
    4d9e:	c5 01       	movw	r24, r10
    4da0:	b4 01       	movw	r22, r8
    4da2:	a3 01       	movw	r20, r6
    4da4:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    4da8:	ec 01       	movw	r28, r24
		if(directory_ptr)
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <fat_debug_dir+0x114>
    4dae:	bf c1       	rjmp	.+894    	; 0x512e <fat_debug_dir+0x492>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    4db0:	98 81       	ld	r25, Y
    4db2:	95 3e       	cpi	r25, 0xE5	; 229
    4db4:	99 f0       	breq	.+38     	; 0x4ddc <fat_debug_dir+0x140>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    4db6:	99 23       	and	r25, r25
    4db8:	19 f0       	breq	.+6      	; 0x4dc0 <fat_debug_dir+0x124>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    4dba:	95 3e       	cpi	r25, 0xE5	; 229
    4dbc:	41 f4       	brne	.+16     	; 0x4dce <fat_debug_dir+0x132>
    4dbe:	0e c0       	rjmp	.+28     	; 0x4ddc <fat_debug_dir+0x140>
		{
			lfn_ptr=(struct lfn_struct*)directory_ptr;
			
			if(dir_type(directory_ptr)==DIR_TYPE_UNUSED)
			{
				DEBUG_P(PSTR(" FREE\r\n"));
    4dc0:	80 91 90 02 	lds	r24, 0x0290
    4dc4:	90 91 91 02 	lds	r25, 0x0291
    4dc8:	6f eb       	ldi	r22, 0xBF	; 191
    4dca:	74 e1       	ldi	r23, 0x14	; 20
    4dcc:	b6 c1       	rjmp	.+876    	; 0x513a <fat_debug_dir+0x49e>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    4dce:	99 23       	and	r25, r25
    4dd0:	09 f4       	brne	.+2      	; 0x4dd4 <fat_debug_dir+0x138>
    4dd2:	b5 c1       	rjmp	.+874    	; 0x513e <fat_debug_dir+0x4a2>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    4dd4:	95 3e       	cpi	r25, 0xE5	; 229
    4dd6:	09 f0       	breq	.+2      	; 0x4dda <fat_debug_dir+0x13e>
    4dd8:	98 c0       	rjmp	.+304    	; 0x4f0a <fat_debug_dir+0x26e>
    4dda:	b1 c1       	rjmp	.+866    	; 0x513e <fat_debug_dir+0x4a2>
			}
			else if(dir_type(directory_ptr)==DIR_TYPE_ERASED)
			{
				DEBUG_P(PSTR(" ERASED"));
    4ddc:	80 91 90 02 	lds	r24, 0x0290
    4de0:	90 91 91 02 	lds	r25, 0x0291
    4de4:	67 eb       	ldi	r22, 0xB7	; 183
    4de6:	74 e1       	ldi	r23, 0x14	; 20
    4de8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_P(PSTR(" ATTRIB=0x"));
    4dec:	80 91 90 02 	lds	r24, 0x0290
    4df0:	90 91 91 02 	lds	r25, 0x0291
    4df4:	6c ea       	ldi	r22, 0xAC	; 172
    4df6:	74 e1       	ldi	r23, 0x14	; 20
    4df8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(directory_ptr->attributes);
    4dfc:	c0 90 90 02 	lds	r12, 0x0290
    4e00:	d0 90 91 02 	lds	r13, 0x0291
    4e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e06:	70 e0       	ldi	r23, 0x00	; 0
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	46 ea       	ldi	r20, 0xA6	; 166
    4e0e:	52 e0       	ldi	r21, 0x02	; 2
    4e10:	20 e1       	ldi	r18, 0x10	; 16
    4e12:	02 e0       	ldi	r16, 0x02	; 2
    4e14:	10 e3       	ldi	r17, 0x30	; 48
    4e16:	e1 2e       	mov	r14, r17
    4e18:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4e1c:	bc 01       	movw	r22, r24
    4e1e:	c6 01       	movw	r24, r12
    4e20:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				
				if(directory_ptr->attributes!=0x0F)
    4e24:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e26:	20 91 90 02 	lds	r18, 0x0290
    4e2a:	30 91 91 02 	lds	r19, 0x0291
    4e2e:	8f 30       	cpi	r24, 0x0F	; 15
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <fat_debug_dir+0x198>
    4e32:	5f c0       	rjmp	.+190    	; 0x4ef2 <fat_debug_dir+0x256>
				{
					DEBUG_P(PSTR(" SIZE="));
    4e34:	c9 01       	movw	r24, r18
    4e36:	65 ea       	ldi	r22, 0xA5	; 165
    4e38:	74 e1       	ldi	r23, 0x14	; 20
    4e3a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					DEBUG_ULONG_FIXED(LEND_ULONG_READ(directory_ptr->size),10);
    4e3e:	c0 90 90 02 	lds	r12, 0x0290
    4e42:	d0 90 91 02 	lds	r13, 0x0291
    4e46:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4e48:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4e4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e4e:	46 ea       	ldi	r20, 0xA6	; 166
    4e50:	52 e0       	ldi	r21, 0x02	; 2
    4e52:	2a e0       	ldi	r18, 0x0A	; 10
    4e54:	0a e0       	ldi	r16, 0x0A	; 10
    4e56:	b0 e2       	ldi	r27, 0x20	; 32
    4e58:	eb 2e       	mov	r14, r27
    4e5a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4e5e:	bc 01       	movw	r22, r24
    4e60:	c6 01       	movw	r24, r12
    4e62:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					DEBUG_P(PSTR(" CLUST="));
    4e66:	80 91 90 02 	lds	r24, 0x0290
    4e6a:	90 91 91 02 	lds	r25, 0x0291
    4e6e:	6d e9       	ldi	r22, 0x9D	; 157
    4e70:	74 e1       	ldi	r23, 0x14	; 20
    4e72:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					DEBUG_ULONG_FIXED(((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h)<<16) + LEND_UINT_READ(directory_ptr->cluster_l),10);
    4e76:	c0 90 90 02 	lds	r12, 0x0290
    4e7a:	d0 90 91 02 	lds	r13, 0x0291
    4e7e:	6c 89       	ldd	r22, Y+20	; 0x14
    4e80:	7d 89       	ldd	r23, Y+21	; 0x15
    4e82:	88 27       	eor	r24, r24
    4e84:	77 fd       	sbrc	r23, 7
    4e86:	80 95       	com	r24
    4e88:	98 2f       	mov	r25, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	77 27       	eor	r23, r23
    4e8e:	66 27       	eor	r22, r22
    4e90:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4e92:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4e94:	44 27       	eor	r20, r20
    4e96:	37 fd       	sbrc	r19, 7
    4e98:	40 95       	com	r20
    4e9a:	54 2f       	mov	r21, r20
    4e9c:	62 0f       	add	r22, r18
    4e9e:	73 1f       	adc	r23, r19
    4ea0:	84 1f       	adc	r24, r20
    4ea2:	95 1f       	adc	r25, r21
    4ea4:	46 ea       	ldi	r20, 0xA6	; 166
    4ea6:	52 e0       	ldi	r21, 0x02	; 2
    4ea8:	2a e0       	ldi	r18, 0x0A	; 10
    4eaa:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4eae:	bc 01       	movw	r22, r24
    4eb0:	c6 01       	movw	r24, r12
    4eb2:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					DEBUG_P(PSTR(" \""));
    4eb6:	80 91 90 02 	lds	r24, 0x0290
    4eba:	90 91 91 02 	lds	r25, 0x0291
    4ebe:	6a e9       	ldi	r22, 0x9A	; 154
    4ec0:	74 e1       	ldi	r23, 0x14	; 20
    4ec2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
					dir_name_short(directory_ptr, text);
    4ec6:	ce 01       	movw	r24, r28
    4ec8:	66 ea       	ldi	r22, 0xA6	; 166
    4eca:	72 e0       	ldi	r23, 0x02	; 2
    4ecc:	0e 94 bf 24 	call	0x497e	; 0x497e <dir_name_short>
					text[0]='_';
    4ed0:	f0 92 a6 02 	sts	0x02A6, r15
					DEBUG(text);
    4ed4:	80 91 90 02 	lds	r24, 0x0290
    4ed8:	90 91 91 02 	lds	r25, 0x0291
    4edc:	66 ea       	ldi	r22, 0xA6	; 166
    4ede:	72 e0       	ldi	r23, 0x02	; 2
    4ee0:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
					DEBUG_P(PSTR("\""));
    4ee4:	80 91 90 02 	lds	r24, 0x0290
    4ee8:	90 91 91 02 	lds	r25, 0x0291
    4eec:	68 e9       	ldi	r22, 0x98	; 152
    4eee:	74 e1       	ldi	r23, 0x14	; 20
    4ef0:	03 c0       	rjmp	.+6      	; 0x4ef8 <fat_debug_dir+0x25c>
				}
				else
					DEBUG_P(PSTR(" (LFN)"));
    4ef2:	c9 01       	movw	r24, r18
    4ef4:	61 e9       	ldi	r22, 0x91	; 145
    4ef6:	74 e1       	ldi	r23, 0x14	; 20
    4ef8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_P(PSTR("\r\n"));
    4efc:	80 91 90 02 	lds	r24, 0x0290
    4f00:	90 91 91 02 	lds	r25, 0x0291
    4f04:	6e e8       	ldi	r22, 0x8E	; 142
    4f06:	74 e1       	ldi	r23, 0x14	; 20
    4f08:	18 c1       	rjmp	.+560    	; 0x513a <fat_debug_dir+0x49e>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    4f0a:	99 23       	and	r25, r25
    4f0c:	09 f4       	brne	.+2      	; 0x4f10 <fat_debug_dir+0x274>
    4f0e:	17 c1       	rjmp	.+558    	; 0x513e <fat_debug_dir+0x4a2>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    4f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f12:	8f 30       	cpi	r24, 0x0F	; 15
    4f14:	09 f4       	brne	.+2      	; 0x4f18 <fat_debug_dir+0x27c>
    4f16:	a4 c0       	rjmp	.+328    	; 0x5060 <fat_debug_dir+0x3c4>
			}
			else if(dir_type(directory_ptr)==DIR_TYPE_USED)
			{
				DEBUG_P(PSTR(" USED  "));
    4f18:	80 91 90 02 	lds	r24, 0x0290
    4f1c:	90 91 91 02 	lds	r25, 0x0291
    4f20:	66 e8       	ldi	r22, 0x86	; 134
    4f22:	74 e1       	ldi	r23, 0x14	; 20
    4f24:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_P(PSTR(" ATTRIB=0x"));
    4f28:	80 91 90 02 	lds	r24, 0x0290
    4f2c:	90 91 91 02 	lds	r25, 0x0291
    4f30:	6b e7       	ldi	r22, 0x7B	; 123
    4f32:	74 e1       	ldi	r23, 0x14	; 20
    4f34:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(directory_ptr->attributes);
    4f38:	c0 90 90 02 	lds	r12, 0x0290
    4f3c:	d0 90 91 02 	lds	r13, 0x0291
    4f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f42:	70 e0       	ldi	r23, 0x00	; 0
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	46 ea       	ldi	r20, 0xA6	; 166
    4f4a:	52 e0       	ldi	r21, 0x02	; 2
    4f4c:	20 e1       	ldi	r18, 0x10	; 16
    4f4e:	02 e0       	ldi	r16, 0x02	; 2
    4f50:	f0 e3       	ldi	r31, 0x30	; 48
    4f52:	ef 2e       	mov	r14, r31
    4f54:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4f58:	bc 01       	movw	r22, r24
    4f5a:	c6 01       	movw	r24, r12
    4f5c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" SIZE="));
    4f60:	80 91 90 02 	lds	r24, 0x0290
    4f64:	90 91 91 02 	lds	r25, 0x0291
    4f68:	64 e7       	ldi	r22, 0x74	; 116
    4f6a:	74 e1       	ldi	r23, 0x14	; 20
    4f6c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG_FIXED(LEND_ULONG_READ(directory_ptr->size),10);
    4f70:	c0 90 90 02 	lds	r12, 0x0290
    4f74:	d0 90 91 02 	lds	r13, 0x0291
    4f78:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4f7a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4f7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4f7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f80:	46 ea       	ldi	r20, 0xA6	; 166
    4f82:	52 e0       	ldi	r21, 0x02	; 2
    4f84:	2a e0       	ldi	r18, 0x0A	; 10
    4f86:	0a e0       	ldi	r16, 0x0A	; 10
    4f88:	e0 e2       	ldi	r30, 0x20	; 32
    4f8a:	ee 2e       	mov	r14, r30
    4f8c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4f90:	bc 01       	movw	r22, r24
    4f92:	c6 01       	movw	r24, r12
    4f94:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" CLUST="));
    4f98:	80 91 90 02 	lds	r24, 0x0290
    4f9c:	90 91 91 02 	lds	r25, 0x0291
    4fa0:	6c e6       	ldi	r22, 0x6C	; 108
    4fa2:	74 e1       	ldi	r23, 0x14	; 20
    4fa4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG_FIXED(((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h)<<16) + LEND_UINT_READ(directory_ptr->cluster_l),10);
    4fa8:	c0 90 90 02 	lds	r12, 0x0290
    4fac:	d0 90 91 02 	lds	r13, 0x0291
    4fb0:	6c 89       	ldd	r22, Y+20	; 0x14
    4fb2:	7d 89       	ldd	r23, Y+21	; 0x15
    4fb4:	88 27       	eor	r24, r24
    4fb6:	77 fd       	sbrc	r23, 7
    4fb8:	80 95       	com	r24
    4fba:	98 2f       	mov	r25, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	77 27       	eor	r23, r23
    4fc0:	66 27       	eor	r22, r22
    4fc2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4fc4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4fc6:	44 27       	eor	r20, r20
    4fc8:	37 fd       	sbrc	r19, 7
    4fca:	40 95       	com	r20
    4fcc:	54 2f       	mov	r21, r20
    4fce:	62 0f       	add	r22, r18
    4fd0:	73 1f       	adc	r23, r19
    4fd2:	84 1f       	adc	r24, r20
    4fd4:	95 1f       	adc	r25, r21
    4fd6:	46 ea       	ldi	r20, 0xA6	; 166
    4fd8:	52 e0       	ldi	r21, 0x02	; 2
    4fda:	2a e0       	ldi	r18, 0x0A	; 10
    4fdc:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	c6 01       	movw	r24, r12
    4fe4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" \""));
    4fe8:	80 91 90 02 	lds	r24, 0x0290
    4fec:	90 91 91 02 	lds	r25, 0x0291
    4ff0:	69 e6       	ldi	r22, 0x69	; 105
    4ff2:	74 e1       	ldi	r23, 0x14	; 20
    4ff4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG(dir_name_short(directory_ptr, text));
    4ff8:	00 91 90 02 	lds	r16, 0x0290
    4ffc:	10 91 91 02 	lds	r17, 0x0291
    5000:	ce 01       	movw	r24, r28
    5002:	66 ea       	ldi	r22, 0xA6	; 166
    5004:	72 e0       	ldi	r23, 0x02	; 2
    5006:	0e 94 bf 24 	call	0x497e	; 0x497e <dir_name_short>
    500a:	bc 01       	movw	r22, r24
    500c:	c8 01       	movw	r24, r16
    500e:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\" CHK=0x"));
    5012:	80 91 90 02 	lds	r24, 0x0290
    5016:	90 91 91 02 	lds	r25, 0x0291
    501a:	60 e6       	ldi	r22, 0x60	; 96
    501c:	74 e1       	ldi	r23, 0x14	; 20
    501e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(dir_lfn_checksum(directory_ptr));
    5022:	c0 90 90 02 	lds	r12, 0x0290
    5026:	d0 90 91 02 	lds	r13, 0x0291
    502a:	ce 01       	movw	r24, r28
    502c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <dir_lfn_checksum>
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	a0 e0       	ldi	r26, 0x00	; 0
    5034:	b0 e0       	ldi	r27, 0x00	; 0
    5036:	bc 01       	movw	r22, r24
    5038:	cd 01       	movw	r24, r26
    503a:	46 ea       	ldi	r20, 0xA6	; 166
    503c:	52 e0       	ldi	r21, 0x02	; 2
    503e:	20 e1       	ldi	r18, 0x10	; 16
    5040:	02 e0       	ldi	r16, 0x02	; 2
    5042:	30 e3       	ldi	r19, 0x30	; 48
    5044:	e3 2e       	mov	r14, r19
    5046:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    504a:	bc 01       	movw	r22, r24
    504c:	c6 01       	movw	r24, r12
    504e:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5052:	80 91 90 02 	lds	r24, 0x0290
    5056:	90 91 91 02 	lds	r25, 0x0291
    505a:	6d e5       	ldi	r22, 0x5D	; 93
    505c:	74 e1       	ldi	r23, 0x14	; 20
    505e:	6d c0       	rjmp	.+218    	; 0x513a <fat_debug_dir+0x49e>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    5060:	95 3e       	cpi	r25, 0xE5	; 229
    5062:	09 f4       	brne	.+2      	; 0x5066 <fat_debug_dir+0x3ca>
    5064:	6c c0       	rjmp	.+216    	; 0x513e <fat_debug_dir+0x4a2>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    5066:	99 23       	and	r25, r25
    5068:	09 f4       	brne	.+2      	; 0x506c <fat_debug_dir+0x3d0>
    506a:	69 c0       	rjmp	.+210    	; 0x513e <fat_debug_dir+0x4a2>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    506c:	8b 85       	ldd	r24, Y+11	; 0x0b
    506e:	8f 30       	cpi	r24, 0x0F	; 15
    5070:	09 f0       	breq	.+2      	; 0x5074 <fat_debug_dir+0x3d8>
    5072:	65 c0       	rjmp	.+202    	; 0x513e <fat_debug_dir+0x4a2>
			}
			else if(dir_type(directory_ptr)==DIR_TYPE_LFN)
			{
				DEBUG_P(PSTR(" LFN   "));
    5074:	80 91 90 02 	lds	r24, 0x0290
    5078:	90 91 91 02 	lds	r25, 0x0291
    507c:	65 e5       	ldi	r22, 0x55	; 85
    507e:	74 e1       	ldi	r23, 0x14	; 20
    5080:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_P(PSTR(" ATTRIB=0x"));
    5084:	80 91 90 02 	lds	r24, 0x0290
    5088:	90 91 91 02 	lds	r25, 0x0291
    508c:	6a e4       	ldi	r22, 0x4A	; 74
    508e:	74 e1       	ldi	r23, 0x14	; 20
    5090:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(directory_ptr->attributes);
    5094:	c0 90 90 02 	lds	r12, 0x0290
    5098:	d0 90 91 02 	lds	r13, 0x0291
    509c:	6b 85       	ldd	r22, Y+11	; 0x0b
    509e:	70 e0       	ldi	r23, 0x00	; 0
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	46 ea       	ldi	r20, 0xA6	; 166
    50a6:	52 e0       	ldi	r21, 0x02	; 2
    50a8:	20 e1       	ldi	r18, 0x10	; 16
    50aa:	02 e0       	ldi	r16, 0x02	; 2
    50ac:	10 e3       	ldi	r17, 0x30	; 48
    50ae:	e1 2e       	mov	r14, r17
    50b0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    50b4:	bc 01       	movw	r22, r24
    50b6:	c6 01       	movw	r24, r12
    50b8:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("                                        SEQ=0x"));
    50bc:	80 91 90 02 	lds	r24, 0x0290
    50c0:	90 91 91 02 	lds	r25, 0x0291
    50c4:	6b e1       	ldi	r22, 0x1B	; 27
    50c6:	74 e1       	ldi	r23, 0x14	; 20
    50c8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(lfn_ptr->sequence);
    50cc:	c0 90 90 02 	lds	r12, 0x0290
    50d0:	d0 90 91 02 	lds	r13, 0x0291
    50d4:	68 81       	ld	r22, Y
    50d6:	70 e0       	ldi	r23, 0x00	; 0
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	46 ea       	ldi	r20, 0xA6	; 166
    50de:	52 e0       	ldi	r21, 0x02	; 2
    50e0:	20 e1       	ldi	r18, 0x10	; 16
    50e2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    50e6:	bc 01       	movw	r22, r24
    50e8:	c6 01       	movw	r24, r12
    50ea:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" CHK=0x"));
    50ee:	80 91 90 02 	lds	r24, 0x0290
    50f2:	90 91 91 02 	lds	r25, 0x0291
    50f6:	63 e1       	ldi	r22, 0x13	; 19
    50f8:	74 e1       	ldi	r23, 0x14	; 20
    50fa:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_HEX(lfn_ptr->checksum);
    50fe:	c0 90 90 02 	lds	r12, 0x0290
    5102:	d0 90 91 02 	lds	r13, 0x0291
    5106:	6d 85       	ldd	r22, Y+13	; 0x0d
    5108:	70 e0       	ldi	r23, 0x00	; 0
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	46 ea       	ldi	r20, 0xA6	; 166
    5110:	52 e0       	ldi	r21, 0x02	; 2
    5112:	20 e1       	ldi	r18, 0x10	; 16
    5114:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5118:	bc 01       	movw	r22, r24
    511a:	c6 01       	movw	r24, r12
    511c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5120:	80 91 90 02 	lds	r24, 0x0290
    5124:	90 91 91 02 	lds	r25, 0x0291
    5128:	60 e1       	ldi	r22, 0x10	; 16
    512a:	74 e1       	ldi	r23, 0x14	; 20
    512c:	06 c0       	rjmp	.+12     	; 0x513a <fat_debug_dir+0x49e>
			};
		}
		else
			DEBUG_P(PSTR(" ERROR\r\n"));
    512e:	80 91 90 02 	lds	r24, 0x0290
    5132:	90 91 91 02 	lds	r25, 0x0291
    5136:	67 e0       	ldi	r22, 0x07	; 7
    5138:	74 e1       	ldi	r23, 0x14	; 20
    513a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		
		index++;
    513e:	08 94       	sec
    5140:	61 1c       	adc	r6, r1
    5142:	71 1c       	adc	r7, r1
		
		if(index==total_entries)
    5144:	62 14       	cp	r6, r2
    5146:	73 04       	cpc	r7, r3
    5148:	39 f0       	breq	.+14     	; 0x5158 <fat_debug_dir+0x4bc>
			tempint=0;
		
	}while(tempint--);
    514a:	41 14       	cp	r4, r1
    514c:	51 04       	cpc	r5, r1
    514e:	21 f0       	breq	.+8      	; 0x5158 <fat_debug_dir+0x4bc>
    5150:	08 94       	sec
    5152:	41 08       	sbc	r4, r1
    5154:	51 08       	sbc	r5, r1
    5156:	10 ce       	rjmp	.-992    	; 0x4d78 <fat_debug_dir+0xdc>
}
    5158:	df 91       	pop	r29
    515a:	cf 91       	pop	r28
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
    5160:	ff 90       	pop	r15
    5162:	ef 90       	pop	r14
    5164:	df 90       	pop	r13
    5166:	cf 90       	pop	r12
    5168:	bf 90       	pop	r11
    516a:	af 90       	pop	r10
    516c:	9f 90       	pop	r9
    516e:	8f 90       	pop	r8
    5170:	7f 90       	pop	r7
    5172:	6f 90       	pop	r6
    5174:	5f 90       	pop	r5
    5176:	4f 90       	pop	r4
    5178:	3f 90       	pop	r3
    517a:	2f 90       	pop	r2
    517c:	08 95       	ret

0000517e <chain_rw_sector>:
	return success;
}

//read or write data to a chain, limited to within 1 sector
static char chain_rw_sector(struct fat_chain_struct *chain_ptr, void* target, unsigned long byte_address, int size, char read_write_erase)
{
    517e:	9f 92       	push	r9
    5180:	af 92       	push	r10
    5182:	bf 92       	push	r11
    5184:	cf 92       	push	r12
    5186:	df 92       	push	r13
    5188:	ef 92       	push	r14
    518a:	ff 92       	push	r15
    518c:	0f 93       	push	r16
    518e:	1f 93       	push	r17
    5190:	cf 93       	push	r28
    5192:	df 93       	push	r29
    5194:	f6 2e       	mov	r15, r22
    5196:	97 2e       	mov	r9, r23
    5198:	59 01       	movw	r10, r18
    519a:	6a 01       	movw	r12, r20
	char success=TRUE;
	char* buffer;

	//if we are not going to modify the entire buffer, ensure media gets read
	if(size !=512)
    519c:	22 e0       	ldi	r18, 0x02	; 2
    519e:	00 30       	cpi	r16, 0x00	; 0
    51a0:	12 07       	cpc	r17, r18
    51a2:	21 f0       	breq	.+8      	; 0x51ac <chain_rw_sector+0x2e>
		buffer = chain_get_sector_ptr(chain_ptr, byte_address, FAT_READ);
    51a4:	b6 01       	movw	r22, r12
    51a6:	a5 01       	movw	r20, r10
    51a8:	21 e0       	ldi	r18, 0x01	; 1
    51aa:	03 c0       	rjmp	.+6      	; 0x51b2 <chain_rw_sector+0x34>
	else
		buffer = chain_get_sector_ptr(chain_ptr, byte_address, read_write_erase);
    51ac:	b6 01       	movw	r22, r12
    51ae:	a5 01       	movw	r20, r10
    51b0:	2e 2d       	mov	r18, r14
    51b2:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <chain_get_sector_ptr>
    51b6:	ec 01       	movw	r28, r24

	if(buffer)
    51b8:	00 97       	sbiw	r24, 0x00	; 0
    51ba:	11 f4       	brne	.+4      	; 0x51c0 <chain_rw_sector+0x42>
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	38 c0       	rjmp	.+112    	; 0x5230 <chain_rw_sector+0xb2>
	{
		//read/write/erase some data (finally whoo hoo!)
		byte_address &= 0x1FFul;
    51c0:	a6 01       	movw	r20, r12
    51c2:	95 01       	movw	r18, r10
    51c4:	31 70       	andi	r19, 0x01	; 1
    51c6:	40 70       	andi	r20, 0x00	; 0
    51c8:	50 70       	andi	r21, 0x00	; 0
		if(read_write_erase == FAT_READ)
    51ca:	81 e0       	ldi	r24, 0x01	; 1
    51cc:	e8 16       	cp	r14, r24
    51ce:	61 f4       	brne	.+24     	; 0x51e8 <chain_rw_sector+0x6a>
		{
			if(size)
    51d0:	01 15       	cp	r16, r1
    51d2:	11 05       	cpc	r17, r1
    51d4:	61 f1       	breq	.+88     	; 0x522e <chain_rw_sector+0xb0>
				memcpy(target, &buffer[byte_address], size);
    51d6:	2c 0f       	add	r18, r28
    51d8:	3d 1f       	adc	r19, r29
    51da:	8f 2d       	mov	r24, r15
    51dc:	99 2d       	mov	r25, r9
    51de:	b9 01       	movw	r22, r18
    51e0:	a8 01       	movw	r20, r16
    51e2:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
    51e6:	23 c0       	rjmp	.+70     	; 0x522e <chain_rw_sector+0xb0>
		}
		else if(read_write_erase == FAT_WRITE)
    51e8:	ee 20       	and	r14, r14
    51ea:	61 f4       	brne	.+24     	; 0x5204 <chain_rw_sector+0x86>
		{
			if(size)
    51ec:	01 15       	cp	r16, r1
    51ee:	11 05       	cpc	r17, r1
    51f0:	a1 f0       	breq	.+40     	; 0x521a <chain_rw_sector+0x9c>
				memcpy(&buffer[byte_address], target, size);
    51f2:	2c 0f       	add	r18, r28
    51f4:	3d 1f       	adc	r19, r29
    51f6:	c9 01       	movw	r24, r18
    51f8:	6f 2d       	mov	r22, r15
    51fa:	79 2d       	mov	r23, r9
    51fc:	a8 01       	movw	r20, r16
    51fe:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
    5202:	0b c0       	rjmp	.+22     	; 0x521a <chain_rw_sector+0x9c>
			fatcache_dirty(buffer);
		}
		//erase
		else
		{
			if(size)
    5204:	01 15       	cp	r16, r1
    5206:	11 05       	cpc	r17, r1
    5208:	41 f0       	breq	.+16     	; 0x521a <chain_rw_sector+0x9c>
				memset(&buffer[byte_address], 0, size);
    520a:	2c 0f       	add	r18, r28
    520c:	3d 1f       	adc	r19, r29
    520e:	c9 01       	movw	r24, r18
    5210:	60 e0       	ldi	r22, 0x00	; 0
    5212:	70 e0       	ldi	r23, 0x00	; 0
    5214:	a8 01       	movw	r20, r16
    5216:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    521a:	cf 5d       	subi	r28, 0xDF	; 223
    521c:	d3 40       	sbci	r29, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    521e:	c0 70       	andi	r28, 0x00	; 0
    5220:	de 7f       	andi	r29, 0xFE	; 254
    5222:	cd 2b       	or	r28, r29
    5224:	21 f4       	brne	.+8      	; 0x522e <chain_rw_sector+0xb0>
		{
			cache_dirty[index]=TRUE;
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	80 93 e3 05 	sts	0x05E3, r24
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <chain_rw_sector+0xb2>
    522e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		success=FALSE;

	return success;
}
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	1f 91       	pop	r17
    5236:	0f 91       	pop	r16
    5238:	ff 90       	pop	r15
    523a:	ef 90       	pop	r14
    523c:	df 90       	pop	r13
    523e:	cf 90       	pop	r12
    5240:	bf 90       	pop	r11
    5242:	af 90       	pop	r10
    5244:	9f 90       	pop	r9
    5246:	08 95       	ret

00005248 <chain_rw>:
	return success;
}

//uses chain_rw_sector, to read or write data potentially spanning many sectors, or erase an area of a chain to 0's
static char chain_rw(struct fat_chain_struct *chain_ptr, void* target, unsigned long byte_address, unsigned long size, char read_write_erase)
{
    5248:	2f 92       	push	r2
    524a:	3f 92       	push	r3
    524c:	4f 92       	push	r4
    524e:	5f 92       	push	r5
    5250:	6f 92       	push	r6
    5252:	7f 92       	push	r7
    5254:	8f 92       	push	r8
    5256:	9f 92       	push	r9
    5258:	af 92       	push	r10
    525a:	bf 92       	push	r11
    525c:	cf 92       	push	r12
    525e:	df 92       	push	r13
    5260:	ef 92       	push	r14
    5262:	ff 92       	push	r15
    5264:	0f 93       	push	r16
    5266:	1f 93       	push	r17
    5268:	df 93       	push	r29
    526a:	cf 93       	push	r28
    526c:	cd b7       	in	r28, 0x3d	; 61
    526e:	de b7       	in	r29, 0x3e	; 62
    5270:	28 97       	sbiw	r28, 0x08	; 8
    5272:	0f b6       	in	r0, 0x3f	; 63
    5274:	f8 94       	cli
    5276:	de bf       	out	0x3e, r29	; 62
    5278:	0f be       	out	0x3f, r0	; 63
    527a:	cd bf       	out	0x3d, r28	; 61
    527c:	9e 83       	std	Y+6, r25	; 0x06
    527e:	8d 83       	std	Y+5, r24	; 0x05
    5280:	78 87       	std	Y+8, r23	; 0x08
    5282:	6f 83       	std	Y+7, r22	; 0x07
    5284:	39 01       	movw	r6, r18
    5286:	4a 01       	movw	r8, r20
    5288:	17 01       	movw	r2, r14
    528a:	28 01       	movw	r4, r16
    528c:	fc 2c       	mov	r15, r12
	char success=TRUE;
	unsigned long end_address;
	int tempint;

	end_address=byte_address+size;
    528e:	d2 01       	movw	r26, r4
    5290:	c1 01       	movw	r24, r2
    5292:	82 0f       	add	r24, r18
    5294:	93 1f       	adc	r25, r19
    5296:	a4 1f       	adc	r26, r20
    5298:	b5 1f       	adc	r27, r21
    529a:	89 83       	std	Y+1, r24	; 0x01
    529c:	9a 83       	std	Y+2, r25	; 0x02
    529e:	ab 83       	std	Y+3, r26	; 0x03
    52a0:	bc 83       	std	Y+4, r27	; 0x04
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	3d c0       	rjmp	.+122    	; 0x5320 <chain_rw+0xd8>

	while(size && success)
	{
		//if we must cross a sector boundary
		if( (byte_address & 0xFFFFFE00ul) != (end_address & 0xFFFFFE00ul) )
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	9a 81       	ldd	r25, Y+2	; 0x02
    52aa:	ab 81       	ldd	r26, Y+3	; 0x03
    52ac:	bc 81       	ldd	r27, Y+4	; 0x04
    52ae:	86 25       	eor	r24, r6
    52b0:	97 25       	eor	r25, r7
    52b2:	a8 25       	eor	r26, r8
    52b4:	b9 25       	eor	r27, r9
    52b6:	80 70       	andi	r24, 0x00	; 0
    52b8:	9e 7f       	andi	r25, 0xFE	; 254
    52ba:	00 97       	sbiw	r24, 0x00	; 0
    52bc:	a1 05       	cpc	r26, r1
    52be:	b1 05       	cpc	r27, r1
    52c0:	21 f1       	breq	.+72     	; 0x530a <chain_rw+0xc2>
		{
			//calculate how much of the data is in current sector only.
			tempint = 0x200 - (int)(byte_address & 0x000001FFul);
    52c2:	c3 01       	movw	r24, r6
    52c4:	91 70       	andi	r25, 0x01	; 1
    52c6:	a1 2c       	mov	r10, r1
    52c8:	62 e0       	ldi	r22, 0x02	; 2
    52ca:	b6 2e       	mov	r11, r22
    52cc:	a8 1a       	sub	r10, r24
    52ce:	b9 0a       	sbc	r11, r25
			
			success=chain_rw_sector(chain_ptr, target, byte_address, tempint, read_write_erase);
    52d0:	8d 81       	ldd	r24, Y+5	; 0x05
    52d2:	9e 81       	ldd	r25, Y+6	; 0x06
    52d4:	6f 81       	ldd	r22, Y+7	; 0x07
    52d6:	78 85       	ldd	r23, Y+8	; 0x08
    52d8:	a4 01       	movw	r20, r8
    52da:	93 01       	movw	r18, r6
    52dc:	85 01       	movw	r16, r10
    52de:	ef 2c       	mov	r14, r15
    52e0:	0e 94 bf 28 	call	0x517e	; 0x517e <chain_rw_sector>
			target+=tempint;
    52e4:	af 81       	ldd	r26, Y+7	; 0x07
    52e6:	b8 85       	ldd	r27, Y+8	; 0x08
    52e8:	aa 0d       	add	r26, r10
    52ea:	bb 1d       	adc	r27, r11
    52ec:	b8 87       	std	Y+8, r27	; 0x08
    52ee:	af 83       	std	Y+7, r26	; 0x07
			byte_address += tempint;
    52f0:	cc 24       	eor	r12, r12
    52f2:	b7 fc       	sbrc	r11, 7
    52f4:	c0 94       	com	r12
    52f6:	dc 2c       	mov	r13, r12
    52f8:	6a 0c       	add	r6, r10
    52fa:	7b 1c       	adc	r7, r11
    52fc:	8c 1c       	adc	r8, r12
    52fe:	9d 1c       	adc	r9, r13
			size-=tempint;
    5300:	2a 18       	sub	r2, r10
    5302:	3b 08       	sbc	r3, r11
    5304:	4c 08       	sbc	r4, r12
    5306:	5d 08       	sbc	r5, r13
    5308:	0b c0       	rjmp	.+22     	; 0x5320 <chain_rw+0xd8>
		}
		else
		{
			success=chain_rw_sector(chain_ptr, target, byte_address, size, read_write_erase);
    530a:	8d 81       	ldd	r24, Y+5	; 0x05
    530c:	9e 81       	ldd	r25, Y+6	; 0x06
    530e:	6f 81       	ldd	r22, Y+7	; 0x07
    5310:	78 85       	ldd	r23, Y+8	; 0x08
    5312:	a4 01       	movw	r20, r8
    5314:	93 01       	movw	r18, r6
    5316:	81 01       	movw	r16, r2
    5318:	ef 2c       	mov	r14, r15
    531a:	0e 94 bf 28 	call	0x517e	; 0x517e <chain_rw_sector>
    531e:	08 c0       	rjmp	.+16     	; 0x5330 <chain_rw+0xe8>
	unsigned long end_address;
	int tempint;

	end_address=byte_address+size;

	while(size && success)
    5320:	21 14       	cp	r2, r1
    5322:	31 04       	cpc	r3, r1
    5324:	41 04       	cpc	r4, r1
    5326:	51 04       	cpc	r5, r1
    5328:	19 f0       	breq	.+6      	; 0x5330 <chain_rw+0xe8>
    532a:	88 23       	and	r24, r24
    532c:	09 f0       	breq	.+2      	; 0x5330 <chain_rw+0xe8>
    532e:	bb cf       	rjmp	.-138    	; 0x52a6 <chain_rw+0x5e>
			size=0;
		};
	};

	return success;
}
    5330:	28 96       	adiw	r28, 0x08	; 8
    5332:	0f b6       	in	r0, 0x3f	; 63
    5334:	f8 94       	cli
    5336:	de bf       	out	0x3e, r29	; 62
    5338:	0f be       	out	0x3f, r0	; 63
    533a:	cd bf       	out	0x3d, r28	; 61
    533c:	cf 91       	pop	r28
    533e:	df 91       	pop	r29
    5340:	1f 91       	pop	r17
    5342:	0f 91       	pop	r16
    5344:	ff 90       	pop	r15
    5346:	ef 90       	pop	r14
    5348:	df 90       	pop	r13
    534a:	cf 90       	pop	r12
    534c:	bf 90       	pop	r11
    534e:	af 90       	pop	r10
    5350:	9f 90       	pop	r9
    5352:	8f 90       	pop	r8
    5354:	7f 90       	pop	r7
    5356:	6f 90       	pop	r6
    5358:	5f 90       	pop	r5
    535a:	4f 90       	pop	r4
    535c:	3f 90       	pop	r3
    535e:	2f 90       	pop	r2
    5360:	08 95       	ret

00005362 <fat_file_append>:
	fatcache_clean();
	return success;
}

char fat_file_append(struct fat_file_struct *file_info_ptr, void* source, unsigned long size)
{
    5362:	2f 92       	push	r2
    5364:	3f 92       	push	r3
    5366:	4f 92       	push	r4
    5368:	5f 92       	push	r5
    536a:	6f 92       	push	r6
    536c:	7f 92       	push	r7
    536e:	8f 92       	push	r8
    5370:	9f 92       	push	r9
    5372:	af 92       	push	r10
    5374:	bf 92       	push	r11
    5376:	cf 92       	push	r12
    5378:	df 92       	push	r13
    537a:	ef 92       	push	r14
    537c:	ff 92       	push	r15
    537e:	0f 93       	push	r16
    5380:	1f 93       	push	r17
    5382:	df 93       	push	r29
    5384:	cf 93       	push	r28
    5386:	cd b7       	in	r28, 0x3d	; 61
    5388:	de b7       	in	r29, 0x3e	; 62
    538a:	2e 97       	sbiw	r28, 0x0e	; 14
    538c:	0f b6       	in	r0, 0x3f	; 63
    538e:	f8 94       	cli
    5390:	de bf       	out	0x3e, r29	; 62
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	cd bf       	out	0x3d, r28	; 61
    5396:	3c 01       	movw	r6, r24
    5398:	7a 87       	std	Y+10, r23	; 0x0a
    539a:	69 87       	std	Y+9, r22	; 0x09
    539c:	2b 87       	std	Y+11, r18	; 0x0b
    539e:	3c 87       	std	Y+12, r19	; 0x0c
    53a0:	4d 87       	std	Y+13, r20	; 0x0d
    53a2:	5e 87       	std	Y+14, r21	; 0x0e
	unsigned long total_clusters;
	unsigned long new_chain=0;
	struct directory_struct *directory_ptr;

	//check that file_info actually contains directory information
	if(!file_info_ptr->cluster_directory)
    53a4:	fc 01       	movw	r30, r24
    53a6:	84 85       	ldd	r24, Z+12	; 0x0c
    53a8:	95 85       	ldd	r25, Z+13	; 0x0d
    53aa:	a6 85       	ldd	r26, Z+14	; 0x0e
    53ac:	b7 85       	ldd	r27, Z+15	; 0x0f
    53ae:	00 97       	sbiw	r24, 0x00	; 0
    53b0:	a1 05       	cpc	r26, r1
    53b2:	b1 05       	cpc	r27, r1
    53b4:	09 f4       	brne	.+2      	; 0x53b8 <fat_file_append+0x56>
    53b6:	80 c1       	rjmp	.+768    	; 0x56b8 <fat_file_append+0x356>
		success=FALSE;
	else
	{
		//calculate required clusters
		total_size = file_info_ptr->size + size;
    53b8:	20 88       	ldd	r2, Z+16	; 0x10
    53ba:	31 88       	ldd	r3, Z+17	; 0x11
    53bc:	42 88       	ldd	r4, Z+18	; 0x12
    53be:	53 88       	ldd	r5, Z+19	; 0x13
    53c0:	22 0e       	add	r2, r18
    53c2:	33 1e       	adc	r3, r19
    53c4:	44 1e       	adc	r4, r20
    53c6:	55 1e       	adc	r5, r21
}

// return how many clusters are required to hold X amount of bytes
static unsigned long clusters_to_hold_bytes(unsigned long bytes)
{
	if(bytes)
    53c8:	21 14       	cp	r2, r1
    53ca:	31 04       	cpc	r3, r1
    53cc:	41 04       	cpc	r4, r1
    53ce:	51 04       	cpc	r5, r1
    53d0:	21 f4       	brne	.+8      	; 0x53da <fat_file_append+0x78>
    53d2:	88 24       	eor	r8, r8
    53d4:	99 24       	eor	r9, r9
    53d6:	54 01       	movw	r10, r8
    53d8:	17 c0       	rjmp	.+46     	; 0x5408 <fat_file_append+0xa6>
	{
		bytes-=1;
    53da:	52 01       	movw	r10, r4
    53dc:	41 01       	movw	r8, r2
    53de:	08 94       	sec
    53e0:	81 08       	sbc	r8, r1
    53e2:	91 08       	sbc	r9, r1
    53e4:	a1 08       	sbc	r10, r1
    53e6:	b1 08       	sbc	r11, r1
		bytes >>= sectors_per_cluster_power+9;	// divide by (sectors per cluster * bytes per sector)
		bytes+=1;
    53e8:	80 91 95 02 	lds	r24, 0x0295
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	09 96       	adiw	r24, 0x09	; 9
    53f0:	04 c0       	rjmp	.+8      	; 0x53fa <fat_file_append+0x98>
    53f2:	b6 94       	lsr	r11
    53f4:	a7 94       	ror	r10
    53f6:	97 94       	ror	r9
    53f8:	87 94       	ror	r8
    53fa:	8a 95       	dec	r24
    53fc:	d2 f7       	brpl	.-12     	; 0x53f2 <fat_file_append+0x90>
    53fe:	08 94       	sec
    5400:	81 1c       	adc	r8, r1
    5402:	91 1c       	adc	r9, r1
    5404:	a1 1c       	adc	r10, r1
    5406:	b1 1c       	adc	r11, r1
		total_clusters = clusters_to_hold_bytes(total_size);
		
		//attempt to extend chain, if there is one, otherwise create one
		if(file_info_ptr->chain.base)
    5408:	d3 01       	movw	r26, r6
    540a:	ed 90       	ld	r14, X+
    540c:	fd 90       	ld	r15, X+
    540e:	0d 91       	ld	r16, X+
    5410:	1c 91       	ld	r17, X
    5412:	e1 14       	cp	r14, r1
    5414:	f1 04       	cpc	r15, r1
    5416:	01 05       	cpc	r16, r1
    5418:	11 05       	cpc	r17, r1
    541a:	09 f4       	brne	.+2      	; 0x541e <fat_file_append+0xbc>
    541c:	b2 c0       	rjmp	.+356    	; 0x5582 <fat_file_append+0x220>
//increase the length of a chain TO a certain size, if it is not that long already
static char chain_extend_to(unsigned long cluster, unsigned long new_size)
{
	char success=TRUE;
	unsigned long chain_new=0;
	unsigned long end=0u, old_size;
    541e:	19 82       	std	Y+1, r1	; 0x01
    5420:	1a 82       	std	Y+2, r1	; 0x02
    5422:	1b 82       	std	Y+3, r1	; 0x03
    5424:	1c 82       	std	Y+4, r1	; 0x04

	old_size=chain_length(cluster, &end);
    5426:	c8 01       	movw	r24, r16
    5428:	b7 01       	movw	r22, r14
    542a:	ae 01       	movw	r20, r28
    542c:	4f 5f       	subi	r20, 0xFF	; 255
    542e:	5f 4f       	sbci	r21, 0xFF	; 255
    5430:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    5434:	6d 83       	std	Y+5, r22	; 0x05
    5436:	7e 83       	std	Y+6, r23	; 0x06
    5438:	8f 83       	std	Y+7, r24	; 0x07
    543a:	98 87       	std	Y+8, r25	; 0x08

	if(cluster_type_read(end) != CLUSTER_TYPE_LAST)
    543c:	69 81       	ldd	r22, Y+1	; 0x01
    543e:	7a 81       	ldd	r23, Y+2	; 0x02
    5440:	8b 81       	ldd	r24, Y+3	; 0x03
    5442:	9c 81       	ldd	r25, Y+4	; 0x04
    5444:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
    5448:	83 30       	cpi	r24, 0x03	; 3
    544a:	51 f1       	breq	.+84     	; 0x54a0 <fat_file_append+0x13e>
	{
		success=FALSE;
		DEBUG_P(PSTR("FAT32 - Chain extend ERROR. Chain at cluster"));
    544c:	80 91 90 02 	lds	r24, 0x0290
    5450:	90 91 91 02 	lds	r25, 0x0291
    5454:	6a ed       	ldi	r22, 0xDA	; 218
    5456:	73 e1       	ldi	r23, 0x13	; 19
    5458:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(cluster);
    545c:	c0 90 90 02 	lds	r12, 0x0290
    5460:	d0 90 91 02 	lds	r13, 0x0291
    5464:	c8 01       	movw	r24, r16
    5466:	b7 01       	movw	r22, r14
    5468:	46 ea       	ldi	r20, 0xA6	; 166
    546a:	52 e0       	ldi	r21, 0x02	; 2
    546c:	2a e0       	ldi	r18, 0x0A	; 10
    546e:	00 e0       	ldi	r16, 0x00	; 0
    5470:	ee 24       	eor	r14, r14
    5472:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5476:	bc 01       	movw	r22, r24
    5478:	c6 01       	movw	r24, r12
    547a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" contains bad/reserved cluster "));
    547e:	80 91 90 02 	lds	r24, 0x0290
    5482:	90 91 91 02 	lds	r25, 0x0291
    5486:	6a eb       	ldi	r22, 0xBA	; 186
    5488:	73 e1       	ldi	r23, 0x13	; 19
    548a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("\r\n"));		
    548e:	80 91 90 02 	lds	r24, 0x0290
    5492:	90 91 91 02 	lds	r25, 0x0291
    5496:	67 eb       	ldi	r22, 0xB7	; 183
    5498:	73 e1       	ldi	r23, 0x13	; 19
    549a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    549e:	68 c0       	rjmp	.+208    	; 0x5570 <fat_file_append+0x20e>
    54a0:	80 91 90 02 	lds	r24, 0x0290
    54a4:	90 91 91 02 	lds	r25, 0x0291
	}
	else
	{
		if(old_size<new_size)
    54a8:	2d 81       	ldd	r18, Y+5	; 0x05
    54aa:	3e 81       	ldd	r19, Y+6	; 0x06
    54ac:	4f 81       	ldd	r20, Y+7	; 0x07
    54ae:	58 85       	ldd	r21, Y+8	; 0x08
    54b0:	28 15       	cp	r18, r8
    54b2:	39 05       	cpc	r19, r9
    54b4:	4a 05       	cpc	r20, r10
    54b6:	5b 05       	cpc	r21, r11
    54b8:	08 f0       	brcs	.+2      	; 0x54bc <fat_file_append+0x15a>
    54ba:	55 c0       	rjmp	.+170    	; 0x5566 <fat_file_append+0x204>
		{
			DEBUG_P(PSTR("FAT32 - Chain extend, base="));
    54bc:	6b e9       	ldi	r22, 0x9B	; 155
    54be:	73 e1       	ldi	r23, 0x13	; 19
    54c0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(chain_new);
    54c4:	c0 90 90 02 	lds	r12, 0x0290
    54c8:	d0 90 91 02 	lds	r13, 0x0291
    54cc:	60 e0       	ldi	r22, 0x00	; 0
    54ce:	70 e0       	ldi	r23, 0x00	; 0
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	46 ea       	ldi	r20, 0xA6	; 166
    54d6:	52 e0       	ldi	r21, 0x02	; 2
    54d8:	2a e0       	ldi	r18, 0x0A	; 10
    54da:	00 e0       	ldi	r16, 0x00	; 0
    54dc:	ee 24       	eor	r14, r14
    54de:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    54e2:	bc 01       	movw	r22, r24
    54e4:	c6 01       	movw	r24, r12
    54e6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR(" end="));
    54ea:	80 91 90 02 	lds	r24, 0x0290
    54ee:	90 91 91 02 	lds	r25, 0x0291
    54f2:	65 e9       	ldi	r22, 0x95	; 149
    54f4:	73 e1       	ldi	r23, 0x13	; 19
    54f6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG(end);
    54fa:	c0 90 90 02 	lds	r12, 0x0290
    54fe:	d0 90 91 02 	lds	r13, 0x0291
    5502:	69 81       	ldd	r22, Y+1	; 0x01
    5504:	7a 81       	ldd	r23, Y+2	; 0x02
    5506:	8b 81       	ldd	r24, Y+3	; 0x03
    5508:	9c 81       	ldd	r25, Y+4	; 0x04
    550a:	46 ea       	ldi	r20, 0xA6	; 166
    550c:	52 e0       	ldi	r21, 0x02	; 2
    550e:	2a e0       	ldi	r18, 0x0A	; 10
    5510:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5514:	bc 01       	movw	r22, r24
    5516:	c6 01       	movw	r24, r12
    5518:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    551c:	80 91 90 02 	lds	r24, 0x0290
    5520:	90 91 91 02 	lds	r25, 0x0291
    5524:	62 e9       	ldi	r22, 0x92	; 146
    5526:	73 e1       	ldi	r23, 0x13	; 19
    5528:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			
			chain_new=chain_create(new_size-old_size);
    552c:	8d 81       	ldd	r24, Y+5	; 0x05
    552e:	9e 81       	ldd	r25, Y+6	; 0x06
    5530:	af 81       	ldd	r26, Y+7	; 0x07
    5532:	b8 85       	ldd	r27, Y+8	; 0x08
    5534:	88 1a       	sub	r8, r24
    5536:	99 0a       	sbc	r9, r25
    5538:	aa 0a       	sbc	r10, r26
    553a:	bb 0a       	sbc	r11, r27
    553c:	c5 01       	movw	r24, r10
    553e:	b4 01       	movw	r22, r8
    5540:	0e 94 1c 21 	call	0x4238	; 0x4238 <chain_create>
    5544:	9b 01       	movw	r18, r22
    5546:	ac 01       	movw	r20, r24
			
			if(!chain_new)
    5548:	61 15       	cp	r22, r1
    554a:	71 05       	cpc	r23, r1
    554c:	81 05       	cpc	r24, r1
    554e:	91 05       	cpc	r25, r1
    5550:	79 f0       	breq	.+30     	; 0x5570 <fat_file_append+0x20e>
				success=FALSE;
			else
			{
				//link old chain to new chain
				success=cluster_link_write(end, chain_new);
    5552:	69 81       	ldd	r22, Y+1	; 0x01
    5554:	7a 81       	ldd	r23, Y+2	; 0x02
    5556:	8b 81       	ldd	r24, Y+3	; 0x03
    5558:	9c 81       	ldd	r25, Y+4	; 0x04
    555a:	0e 94 cc 20 	call	0x4198	; 0x4198 <cluster_link_write>
		}
		else
			DEBUG_P(PSTR("FAT32 - Chain extention not required.\r\n"));
	};

	if(!success)
    555e:	88 23       	and	r24, r24
    5560:	09 f0       	breq	.+2      	; 0x5564 <fat_file_append+0x202>
    5562:	c7 c0       	rjmp	.+398    	; 0x56f2 <fat_file_append+0x390>
    5564:	05 c0       	rjmp	.+10     	; 0x5570 <fat_file_append+0x20e>
				//link old chain to new chain
				success=cluster_link_write(end, chain_new);
			};
		}
		else
			DEBUG_P(PSTR("FAT32 - Chain extention not required.\r\n"));
    5566:	6a e6       	ldi	r22, 0x6A	; 106
    5568:	73 e1       	ldi	r23, 0x13	; 19
    556a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    556e:	c1 c0       	rjmp	.+386    	; 0x56f2 <fat_file_append+0x390>
	};

	if(!success)
		DEBUG_P(PSTR("FAT32 - ERROR, unable to extend chain\r\n"));
    5570:	80 91 90 02 	lds	r24, 0x0290
    5574:	90 91 91 02 	lds	r25, 0x0291
    5578:	62 e4       	ldi	r22, 0x42	; 66
    557a:	73 e1       	ldi	r23, 0x13	; 19
    557c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5580:	9b c0       	rjmp	.+310    	; 0x56b8 <fat_file_append+0x356>
			success=chain_extend_to(file_info_ptr->chain.base, total_clusters);
		else
		{
			new_chain=chain_create(total_clusters);
    5582:	c5 01       	movw	r24, r10
    5584:	b4 01       	movw	r22, r8
    5586:	0e 94 1c 21 	call	0x4238	; 0x4238 <chain_create>
    558a:	7b 01       	movw	r14, r22
    558c:	8c 01       	movw	r16, r24
			if(!new_chain)
    558e:	61 15       	cp	r22, r1
    5590:	71 05       	cpc	r23, r1
    5592:	81 05       	cpc	r24, r1
    5594:	91 05       	cpc	r25, r1
    5596:	09 f4       	brne	.+2      	; 0x559a <fat_file_append+0x238>
    5598:	8f c0       	rjmp	.+286    	; 0x56b8 <fat_file_append+0x356>
	};

	if(success)
	{
		//get pointer to directory entry
		directory_ptr=dir_entry_get_ptr(file_info_ptr->cluster_directory, file_info_ptr->directory_index);
    559a:	d3 01       	movw	r26, r6
    559c:	1c 96       	adiw	r26, 0x0c	; 12
    559e:	6d 91       	ld	r22, X+
    55a0:	7d 91       	ld	r23, X+
    55a2:	8d 91       	ld	r24, X+
    55a4:	9c 91       	ld	r25, X
    55a6:	1f 97       	sbiw	r26, 0x0f	; 15
    55a8:	54 96       	adiw	r26, 0x14	; 20
    55aa:	4d 91       	ld	r20, X+
    55ac:	5c 91       	ld	r21, X
    55ae:	55 97       	sbiw	r26, 0x15	; 21
    55b0:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    55b4:	fc 01       	movw	r30, r24
		if(directory_ptr)
    55b6:	00 97       	sbiw	r24, 0x00	; 0
    55b8:	09 f4       	brne	.+2      	; 0x55bc <fat_file_append+0x25a>
    55ba:	7e c0       	rjmp	.+252    	; 0x56b8 <fat_file_append+0x356>
		{
			//if we created a new chain, add its base cluster to directory entry, and file_info
			if(new_chain)
    55bc:	e1 14       	cp	r14, r1
    55be:	f1 04       	cpc	r15, r1
    55c0:	01 05       	cpc	r16, r1
    55c2:	11 05       	cpc	r17, r1
    55c4:	19 f1       	breq	.+70     	; 0x560c <fat_file_append+0x2aa>
			{
				directory_ptr->cluster_h = LEND_UINT_WRITE((unsigned int)(new_chain>>16));
    55c6:	c8 01       	movw	r24, r16
    55c8:	aa 27       	eor	r26, r26
    55ca:	bb 27       	eor	r27, r27
    55cc:	95 8b       	std	Z+21, r25	; 0x15
    55ce:	84 8b       	std	Z+20, r24	; 0x14
				directory_ptr->cluster_l = LEND_UINT_WRITE((unsigned int)new_chain);
    55d0:	f3 8e       	std	Z+27, r15	; 0x1b
    55d2:	e2 8e       	std	Z+26, r14	; 0x1a
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    55d4:	d3 01       	movw	r26, r6
    55d6:	2d 91       	ld	r18, X+
    55d8:	3d 91       	ld	r19, X+
    55da:	4d 91       	ld	r20, X+
    55dc:	5c 91       	ld	r21, X
    55de:	13 97       	sbiw	r26, 0x03	; 3
    55e0:	e2 16       	cp	r14, r18
    55e2:	f3 06       	cpc	r15, r19
    55e4:	04 07       	cpc	r16, r20
    55e6:	15 07       	cpc	r17, r21
    55e8:	89 f0       	breq	.+34     	; 0x560c <fat_file_append+0x2aa>
	{
		chain_ptr->base=cluster;
    55ea:	ed 92       	st	X+, r14
    55ec:	fd 92       	st	X+, r15
    55ee:	0d 93       	st	X+, r16
    55f0:	1c 93       	st	X, r17
    55f2:	13 97       	sbiw	r26, 0x03	; 3
		chain_ptr->physical=cluster;
    55f4:	14 96       	adiw	r26, 0x04	; 4
    55f6:	ed 92       	st	X+, r14
    55f8:	fd 92       	st	X+, r15
    55fa:	0d 93       	st	X+, r16
    55fc:	1c 93       	st	X, r17
    55fe:	17 97       	sbiw	r26, 0x07	; 7
		chain_ptr->logical=0ul;
    5600:	18 96       	adiw	r26, 0x08	; 8
    5602:	1d 92       	st	X+, r1
    5604:	1d 92       	st	X+, r1
    5606:	1d 92       	st	X+, r1
    5608:	1c 92       	st	X, r1
    560a:	1b 97       	sbiw	r26, 0x0b	; 11
				chain_init(&file_info_ptr->chain, new_chain);
			};
			
			//update new size in directory entry
			directory_ptr->size = LEND_ULONG_WRITE(total_size);
    560c:	24 8e       	std	Z+28, r2	; 0x1c
    560e:	35 8e       	std	Z+29, r3	; 0x1d
    5610:	46 8e       	std	Z+30, r4	; 0x1e
    5612:	57 8e       	std	Z+31, r5	; 0x1f
static int dir_time_entry(int hours, int mins, int seconds)
{
	int retval=0;
	
	retval += hours<<11;
	retval += mins<<5;
    5614:	20 91 21 0c 	lds	r18, 0x0C21
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	b5 e0       	ldi	r27, 0x05	; 5
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	ba 95       	dec	r27
    5622:	e1 f7       	brne	.-8      	; 0x561c <fat_file_append+0x2ba>
    5624:	40 91 20 0c 	lds	r20, 0x0C20
    5628:	94 2f       	mov	r25, r20
    562a:	99 0f       	add	r25, r25
    562c:	99 0f       	add	r25, r25
    562e:	99 0f       	add	r25, r25
    5630:	80 e0       	ldi	r24, 0x00	; 0
    5632:	28 0f       	add	r18, r24
    5634:	39 1f       	adc	r19, r25
			
			//update modified and accessed date/time in directory entry
			directory_ptr->modified_time = LEND_UINT_WRITE(dir_time_entry(fat_date_time.hour, fat_date_time.min, fat_date_time.second));
    5636:	80 91 22 0c 	lds	r24, 0x0C22
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	95 95       	asr	r25
    563e:	87 95       	ror	r24
    5640:	28 0f       	add	r18, r24
    5642:	39 1f       	adc	r19, r25
    5644:	37 8b       	std	Z+23, r19	; 0x17
    5646:	26 8b       	std	Z+22, r18	; 0x16
static int dir_date_entry(int year, int month, int day)
{
	int retval=0;
	
	retval += year<<9;
	retval += month<<5;
    5648:	80 91 1d 0c 	lds	r24, 0x0C1D
    564c:	38 2f       	mov	r19, r24
    564e:	33 0f       	add	r19, r19
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	80 91 1e 0c 	lds	r24, 0x0C1E
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	75 e0       	ldi	r23, 0x05	; 5
    565a:	88 0f       	add	r24, r24
    565c:	99 1f       	adc	r25, r25
    565e:	7a 95       	dec	r23
    5660:	e1 f7       	brne	.-8      	; 0x565a <fat_file_append+0x2f8>
    5662:	82 0f       	add	r24, r18
    5664:	93 1f       	adc	r25, r19
	retval += day;
    5666:	20 91 1f 0c 	lds	r18, 0x0C1F
    566a:	82 0f       	add	r24, r18
    566c:	91 1d       	adc	r25, r1
			directory_ptr->modified_date = LEND_UINT_WRITE(dir_date_entry(fat_date_time.year, fat_date_time.month, fat_date_time.day));
    566e:	91 8f       	std	Z+25, r25	; 0x19
    5670:	80 8f       	std	Z+24, r24	; 0x18
			directory_ptr->access_date = directory_ptr->modified_date;
    5672:	93 8b       	std	Z+19, r25	; 0x13
    5674:	82 8b       	std	Z+18, r24	; 0x12
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    5676:	ef 5d       	subi	r30, 0xDF	; 223
    5678:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    567a:	e0 70       	andi	r30, 0x00	; 0
    567c:	fe 7f       	andi	r31, 0xFE	; 254
    567e:	ef 2b       	or	r30, r31
    5680:	19 f4       	brne	.+6      	; 0x5688 <fat_file_append+0x326>
		{
			cache_dirty[index]=TRUE;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	80 93 e3 05 	sts	0x05E3, r24
			
			fatcache_dirty(directory_ptr);
			
			//write new data to chain
			success=chain_rw(&file_info_ptr->chain, source, file_info_ptr->size, size, FAT_WRITE);
    5688:	f3 01       	movw	r30, r6
    568a:	20 89       	ldd	r18, Z+16	; 0x10
    568c:	31 89       	ldd	r19, Z+17	; 0x11
    568e:	42 89       	ldd	r20, Z+18	; 0x12
    5690:	53 89       	ldd	r21, Z+19	; 0x13
    5692:	c3 01       	movw	r24, r6
    5694:	69 85       	ldd	r22, Y+9	; 0x09
    5696:	7a 85       	ldd	r23, Y+10	; 0x0a
    5698:	eb 84       	ldd	r14, Y+11	; 0x0b
    569a:	fc 84       	ldd	r15, Y+12	; 0x0c
    569c:	0d 85       	ldd	r16, Y+13	; 0x0d
    569e:	1e 85       	ldd	r17, Y+14	; 0x0e
    56a0:	cc 24       	eor	r12, r12
    56a2:	0e 94 24 29 	call	0x5248	; 0x5248 <chain_rw>
    56a6:	18 2f       	mov	r17, r24
			
			file_info_ptr->size=total_size;
    56a8:	d3 01       	movw	r26, r6
    56aa:	50 96       	adiw	r26, 0x10	; 16
    56ac:	2d 92       	st	X+, r2
    56ae:	3d 92       	st	X+, r3
    56b0:	4d 92       	st	X+, r4
    56b2:	5c 92       	st	X, r5
    56b4:	53 97       	sbiw	r26, 0x13	; 19
    56b6:	01 c0       	rjmp	.+2      	; 0x56ba <fat_file_append+0x358>
    56b8:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
			success=FALSE;
	};
	fatcache_clean();
    56ba:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    56be:	81 2f       	mov	r24, r17
    56c0:	2e 96       	adiw	r28, 0x0e	; 14
    56c2:	0f b6       	in	r0, 0x3f	; 63
    56c4:	f8 94       	cli
    56c6:	de bf       	out	0x3e, r29	; 62
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	cd bf       	out	0x3d, r28	; 61
    56cc:	cf 91       	pop	r28
    56ce:	df 91       	pop	r29
    56d0:	1f 91       	pop	r17
    56d2:	0f 91       	pop	r16
    56d4:	ff 90       	pop	r15
    56d6:	ef 90       	pop	r14
    56d8:	df 90       	pop	r13
    56da:	cf 90       	pop	r12
    56dc:	bf 90       	pop	r11
    56de:	af 90       	pop	r10
    56e0:	9f 90       	pop	r9
    56e2:	8f 90       	pop	r8
    56e4:	7f 90       	pop	r7
    56e6:	6f 90       	pop	r6
    56e8:	5f 90       	pop	r5
    56ea:	4f 90       	pop	r4
    56ec:	3f 90       	pop	r3
    56ee:	2f 90       	pop	r2
    56f0:	08 95       	ret
			file_info_ptr->size=total_size;
		}
		else
			success=FALSE;
	};
	fatcache_clean();
    56f2:	ee 24       	eor	r14, r14
    56f4:	ff 24       	eor	r15, r15
    56f6:	87 01       	movw	r16, r14
    56f8:	50 cf       	rjmp	.-352    	; 0x559a <fat_file_append+0x238>

000056fa <fat_file_write>:
{
	return chain_rw(&file_info_ptr->chain, target, address, size, FAT_READ);
}

char fat_file_write(struct fat_file_struct *file_info_ptr, void* source, unsigned long address, unsigned long size)
{
    56fa:	cf 92       	push	r12
    56fc:	ef 92       	push	r14
    56fe:	ff 92       	push	r15
    5700:	0f 93       	push	r16
    5702:	1f 93       	push	r17
	char success;
	success = chain_rw(&file_info_ptr->chain, source, address, size, FAT_WRITE);
    5704:	cc 24       	eor	r12, r12
    5706:	0e 94 24 29 	call	0x5248	; 0x5248 <chain_rw>
    570a:	18 2f       	mov	r17, r24
	fatcache_clean();
    570c:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    5710:	81 2f       	mov	r24, r17
    5712:	1f 91       	pop	r17
    5714:	0f 91       	pop	r16
    5716:	ff 90       	pop	r15
    5718:	ef 90       	pop	r14
    571a:	cf 90       	pop	r12
    571c:	08 95       	ret

0000571e <fat_file_read>:
};
#endif


char fat_file_read(struct fat_file_struct *file_info_ptr, void* target, unsigned long address, unsigned long size)
{
    571e:	cf 92       	push	r12
    5720:	ef 92       	push	r14
    5722:	ff 92       	push	r15
    5724:	0f 93       	push	r16
    5726:	1f 93       	push	r17
	return chain_rw(&file_info_ptr->chain, target, address, size, FAT_READ);
    5728:	cc 24       	eor	r12, r12
    572a:	c3 94       	inc	r12
    572c:	0e 94 24 29 	call	0x5248	; 0x5248 <chain_rw>
}
    5730:	1f 91       	pop	r17
    5732:	0f 91       	pop	r16
    5734:	ff 90       	pop	r15
    5736:	ef 90       	pop	r14
    5738:	cf 90       	pop	r12
    573a:	08 95       	ret

0000573c <dir_name_short_make>:
	return success;
}

//create a short name 8.3 from long name, returns true if long name can be represented by 8.3
static char dir_name_short_make(char* long_name, char* short_name)
{
    573c:	cf 92       	push	r12
    573e:	df 92       	push	r13
    5740:	ef 92       	push	r14
    5742:	0f 93       	push	r16
    5744:	1f 93       	push	r17
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
    574a:	8c 01       	movw	r16, r24
    574c:	6b 01       	movw	r12, r22
	int length_ext=0, length;
	char retval;

	strcpy_P(short_name, PSTR("            "));
    574e:	cb 01       	movw	r24, r22
    5750:	63 ef       	ldi	r22, 0xF3	; 243
    5752:	70 e1       	ldi	r23, 0x10	; 16
    5754:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcpy_P>
	length=strlen(long_name);
    5758:	e8 01       	movw	r28, r16
    575a:	09 90       	ld	r0, Y+
    575c:	00 20       	and	r0, r0
    575e:	e9 f7       	brne	.-6      	; 0x575a <dir_name_short_make+0x1e>
    5760:	21 97       	sbiw	r28, 0x01	; 1
    5762:	c0 1b       	sub	r28, r16
    5764:	d1 0b       	sbc	r29, r17

	//if not ".."
	if(!(long_name[length-2]=='.' && long_name[length-1]=='.'))
    5766:	f8 01       	movw	r30, r16
    5768:	ec 0f       	add	r30, r28
    576a:	fd 1f       	adc	r31, r29
    576c:	32 97       	sbiw	r30, 0x02	; 2
    576e:	80 81       	ld	r24, Z
    5770:	32 96       	adiw	r30, 0x02	; 2
    5772:	8e 32       	cpi	r24, 0x2E	; 46
    5774:	39 f4       	brne	.+14     	; 0x5784 <dir_name_short_make+0x48>
    5776:	31 97       	sbiw	r30, 0x01	; 1
    5778:	80 81       	ld	r24, Z
    577a:	8e 32       	cpi	r24, 0x2E	; 46
    577c:	81 f0       	breq	.+32     	; 0x579e <dir_name_short_make+0x62>
    577e:	e1 e0       	ldi	r30, 0x01	; 1
    5780:	f0 e0       	ldi	r31, 0x00	; 0
    5782:	65 c0       	rjmp	.+202    	; 0x584e <dir_name_short_make+0x112>
	{
		//find length of extension (1,2, or 3)
		if(long_name[length-2]=='.')
			length_ext=1;
		else if(long_name[length-3]=='.')
    5784:	33 97       	sbiw	r30, 0x03	; 3
    5786:	80 81       	ld	r24, Z
    5788:	33 96       	adiw	r30, 0x03	; 3
    578a:	8e 32       	cpi	r24, 0x2E	; 46
    578c:	19 f4       	brne	.+6      	; 0x5794 <dir_name_short_make+0x58>
    578e:	e2 e0       	ldi	r30, 0x02	; 2
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	5d c0       	rjmp	.+186    	; 0x584e <dir_name_short_make+0x112>
			length_ext=2;
		else if(long_name[length-4]=='.')
    5794:	34 97       	sbiw	r30, 0x04	; 4
    5796:	80 81       	ld	r24, Z
    5798:	8e 32       	cpi	r24, 0x2E	; 46
    579a:	09 f4       	brne	.+2      	; 0x579e <dir_name_short_make+0x62>
    579c:	56 c0       	rjmp	.+172    	; 0x584a <dir_name_short_make+0x10e>
    579e:	e0 e0       	ldi	r30, 0x00	; 0
    57a0:	f0 e0       	ldi	r31, 0x00	; 0
	//calculate length of main name (before .)
	if(length_ext)
		length -= length_ext+1;

	//valid for 8.3 entry only?
	if(length <= 8)
    57a2:	c9 30       	cpi	r28, 0x09	; 9
    57a4:	d1 05       	cpc	r29, r1
    57a6:	d4 f4       	brge	.+52     	; 0x57dc <dir_name_short_make+0xa0>
	{
		retval=TRUE;
		//put extension in short version of name
		if(length_ext)
    57a8:	30 97       	sbiw	r30, 0x00	; 0
    57aa:	89 f0       	breq	.+34     	; 0x57ce <dir_name_short_make+0x92>
		{
			short_name[8]='.';
    57ac:	8e e2       	ldi	r24, 0x2E	; 46
    57ae:	d6 01       	movw	r26, r12
    57b0:	18 96       	adiw	r26, 0x08	; 8
    57b2:	8c 93       	st	X, r24
			memcpy(&short_name[9], &long_name[length+1], length_ext);
    57b4:	96 01       	movw	r18, r12
    57b6:	27 5f       	subi	r18, 0xF7	; 247
    57b8:	3f 4f       	sbci	r19, 0xFF	; 255
    57ba:	21 96       	adiw	r28, 0x01	; 1
    57bc:	a8 01       	movw	r20, r16
    57be:	4c 0f       	add	r20, r28
    57c0:	5d 1f       	adc	r21, r29
    57c2:	21 97       	sbiw	r28, 0x01	; 1
    57c4:	c9 01       	movw	r24, r18
    57c6:	ba 01       	movw	r22, r20
    57c8:	af 01       	movw	r20, r30
    57ca:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
		};
		memcpy(short_name, long_name, length);
    57ce:	c6 01       	movw	r24, r12
    57d0:	b8 01       	movw	r22, r16
    57d2:	ae 01       	movw	r20, r28
    57d4:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
    57d8:	41 e0       	ldi	r20, 0x01	; 1
    57da:	1d c0       	rjmp	.+58     	; 0x5816 <dir_name_short_make+0xda>
	}
	else
	//hash ID required
	{
		retval=FALSE;
		if(length_ext)
    57dc:	30 97       	sbiw	r30, 0x00	; 0
    57de:	19 f0       	breq	.+6      	; 0x57e6 <dir_name_short_make+0xaa>
			length += length_ext+1;
    57e0:	ce 0f       	add	r28, r30
    57e2:	df 1f       	adc	r29, r31
    57e4:	21 96       	adiw	r28, 0x01	; 1
		crc32_generate(NULL,0);
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	60 e0       	ldi	r22, 0x00	; 0
    57ec:	70 e0       	ldi	r23, 0x00	; 0
    57ee:	0e 94 ed 17 	call	0x2fda	; 0x2fda <crc32_generate>
		ascii_ulong(crc32_generate(long_name, length), short_name, 16, 8, '0');
    57f2:	c8 01       	movw	r24, r16
    57f4:	be 01       	movw	r22, r28
    57f6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <crc32_generate>
    57fa:	a6 01       	movw	r20, r12
    57fc:	20 e1       	ldi	r18, 0x10	; 16
    57fe:	08 e0       	ldi	r16, 0x08	; 8
    5800:	30 e3       	ldi	r19, 0x30	; 48
    5802:	e3 2e       	mov	r14, r19
    5804:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
		strcpy_P(&short_name[8], PSTR("    "));
    5808:	c6 01       	movw	r24, r12
    580a:	08 96       	adiw	r24, 0x08	; 8
    580c:	6e ee       	ldi	r22, 0xEE	; 238
    580e:	70 e1       	ldi	r23, 0x10	; 16
    5810:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcpy_P>
    5814:	40 e0       	ldi	r20, 0x00	; 0
    5816:	f6 01       	movw	r30, r12
    5818:	2c e0       	ldi	r18, 0x0C	; 12
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	0a c0       	rjmp	.+20     	; 0x5832 <dir_name_short_make+0xf6>
	};

	//convert to upper case
	length=12;
	while(length--)
    581e:	21 50       	subi	r18, 0x01	; 1
    5820:	30 40       	sbci	r19, 0x00	; 0
	{
		if('a' <= short_name[length] && short_name[length] <= 'z')
    5822:	93 85       	ldd	r25, Z+11	; 0x0b
    5824:	89 2f       	mov	r24, r25
    5826:	81 56       	subi	r24, 0x61	; 97
    5828:	8a 31       	cpi	r24, 0x1A	; 26
    582a:	10 f4       	brcc	.+4      	; 0x5830 <dir_name_short_make+0xf4>
			short_name[length]-=0x20;
    582c:	90 52       	subi	r25, 0x20	; 32
    582e:	93 87       	std	Z+11, r25	; 0x0b
    5830:	31 97       	sbiw	r30, 0x01	; 1
		strcpy_P(&short_name[8], PSTR("    "));
	};

	//convert to upper case
	length=12;
	while(length--)
    5832:	21 15       	cp	r18, r1
    5834:	31 05       	cpc	r19, r1
    5836:	99 f7       	brne	.-26     	; 0x581e <dir_name_short_make+0xe2>
		if('a' <= short_name[length] && short_name[length] <= 'z')
			short_name[length]-=0x20;
	};

	return retval;
}
    5838:	84 2f       	mov	r24, r20
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	1f 91       	pop	r17
    5840:	0f 91       	pop	r16
    5842:	ef 90       	pop	r14
    5844:	df 90       	pop	r13
    5846:	cf 90       	pop	r12
    5848:	08 95       	ret
		strcpy_P(&short_name[8], PSTR("    "));
	};

	//convert to upper case
	length=12;
	while(length--)
    584a:	e3 e0       	ldi	r30, 0x03	; 3
    584c:	f0 e0       	ldi	r31, 0x00	; 0
			length_ext=3;
	};

	//calculate length of main name (before .)
	if(length_ext)
		length -= length_ext+1;
    584e:	cf 01       	movw	r24, r30
    5850:	80 95       	com	r24
    5852:	90 95       	com	r25
    5854:	c8 0f       	add	r28, r24
    5856:	d9 1f       	adc	r29, r25
    5858:	a4 cf       	rjmp	.-184    	; 0x57a2 <dir_name_short_make+0x66>

0000585a <dir_search_name>:
}

//used to locate a file or directory name, returns 0 if not found or error
//returns index within the directory
static char dir_search_name(unsigned long base_cluster, char* name_long, unsigned int *directory_index)
{
    585a:	2f 92       	push	r2
    585c:	3f 92       	push	r3
    585e:	4f 92       	push	r4
    5860:	5f 92       	push	r5
    5862:	6f 92       	push	r6
    5864:	7f 92       	push	r7
    5866:	8f 92       	push	r8
    5868:	9f 92       	push	r9
    586a:	af 92       	push	r10
    586c:	bf 92       	push	r11
    586e:	cf 92       	push	r12
    5870:	df 92       	push	r13
    5872:	ef 92       	push	r14
    5874:	ff 92       	push	r15
    5876:	0f 93       	push	r16
    5878:	1f 93       	push	r17
    587a:	df 93       	push	r29
    587c:	cf 93       	push	r28
    587e:	cd b7       	in	r28, 0x3d	; 61
    5880:	de b7       	in	r29, 0x3e	; 62
    5882:	60 97       	sbiw	r28, 0x10	; 16
    5884:	0f b6       	in	r0, 0x3f	; 63
    5886:	f8 94       	cli
    5888:	de bf       	out	0x3e, r29	; 62
    588a:	0f be       	out	0x3f, r0	; 63
    588c:	cd bf       	out	0x3d, r28	; 61
    588e:	3b 01       	movw	r6, r22
    5890:	4c 01       	movw	r8, r24
    5892:	48 8b       	std	Y+16, r20	; 0x10
    5894:	25 2e       	mov	r2, r21
    5896:	29 01       	movw	r4, r18

	struct directory_struct *directory_ptr=NULL;
	struct lfn_struct		*lfn_ptr;

	//Work out short form name, which will either be a CRC of the long name, or the name itself if it fits within 8.3
	short_valid = dir_name_short_make(name_long, name_short);
    5898:	84 2f       	mov	r24, r20
    589a:	95 2f       	mov	r25, r21
    589c:	5e 01       	movw	r10, r28
    589e:	08 94       	sec
    58a0:	a1 1c       	adc	r10, r1
    58a2:	b1 1c       	adc	r11, r1
    58a4:	b5 01       	movw	r22, r10
    58a6:	0e 94 9e 2b 	call	0x573c	; 0x573c <dir_name_short_make>
    58aa:	38 2e       	mov	r3, r24

	//determine maximum size of directory by counting how many clusters it contains
	total_entries = chain_length(base_cluster, NULL) << (sectors_per_cluster_power+4);
    58ac:	c4 01       	movw	r24, r8
    58ae:	b3 01       	movw	r22, r6
    58b0:	40 e0       	ldi	r20, 0x00	; 0
    58b2:	50 e0       	ldi	r21, 0x00	; 0
    58b4:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    58b8:	20 91 95 02 	lds	r18, 0x0295
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	2c 5f       	subi	r18, 0xFC	; 252
    58c0:	3f 4f       	sbci	r19, 0xFF	; 255
    58c2:	04 c0       	rjmp	.+8      	; 0x58cc <dir_search_name+0x72>
    58c4:	66 0f       	add	r22, r22
    58c6:	77 1f       	adc	r23, r23
    58c8:	88 1f       	adc	r24, r24
    58ca:	99 1f       	adc	r25, r25
    58cc:	2a 95       	dec	r18
    58ce:	d2 f7       	brpl	.-12     	; 0x58c4 <dir_search_name+0x6a>
    58d0:	7f 87       	std	Y+15, r23	; 0x0f
    58d2:	6e 87       	std	Y+14, r22	; 0x0e

	DEBUG_P(PSTR("FAT32 - DIR SEARCH, base="));
    58d4:	80 91 90 02 	lds	r24, 0x0290
    58d8:	90 91 91 02 	lds	r25, 0x0291
    58dc:	62 e6       	ldi	r22, 0x62	; 98
    58de:	71 e1       	ldi	r23, 0x11	; 17
    58e0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG(base_cluster);
    58e4:	c0 90 90 02 	lds	r12, 0x0290
    58e8:	d0 90 91 02 	lds	r13, 0x0291
    58ec:	c4 01       	movw	r24, r8
    58ee:	b3 01       	movw	r22, r6
    58f0:	46 ea       	ldi	r20, 0xA6	; 166
    58f2:	52 e0       	ldi	r21, 0x02	; 2
    58f4:	2a e0       	ldi	r18, 0x0A	; 10
    58f6:	00 e0       	ldi	r16, 0x00	; 0
    58f8:	ee 24       	eor	r14, r14
    58fa:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    58fe:	bc 01       	movw	r22, r24
    5900:	c6 01       	movw	r24, r12
    5902:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
    5906:	80 91 90 02 	lds	r24, 0x0290
    590a:	90 91 91 02 	lds	r25, 0x0291
	if(short_valid)
    590e:	33 20       	and	r3, r3
    5910:	51 f0       	breq	.+20     	; 0x5926 <dir_search_name+0xcc>
	{
		DEBUG_P(PSTR(" name (8.3)=\""));
    5912:	64 e5       	ldi	r22, 0x54	; 84
    5914:	71 e1       	ldi	r23, 0x11	; 17
    5916:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG(name_short);
    591a:	80 91 90 02 	lds	r24, 0x0290
    591e:	90 91 91 02 	lds	r25, 0x0291
    5922:	b5 01       	movw	r22, r10
    5924:	0a c0       	rjmp	.+20     	; 0x593a <dir_search_name+0xe0>
	}
	else
	{
		DEBUG_P(PSTR(" name (lfn)=\""));
    5926:	66 e4       	ldi	r22, 0x46	; 70
    5928:	71 e1       	ldi	r23, 0x11	; 17
    592a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG(name_long);
    592e:	80 91 90 02 	lds	r24, 0x0290
    5932:	90 91 91 02 	lds	r25, 0x0291
    5936:	68 89       	ldd	r22, Y+16	; 0x10
    5938:	72 2d       	mov	r23, r2
    593a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	};
	DEBUG_P(PSTR("\" directory_size="));
    593e:	80 91 90 02 	lds	r24, 0x0290
    5942:	90 91 91 02 	lds	r25, 0x0291
    5946:	64 e3       	ldi	r22, 0x34	; 52
    5948:	71 e1       	ldi	r23, 0x11	; 17
    594a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG((unsigned long)total_entries);
    594e:	c0 90 90 02 	lds	r12, 0x0290
    5952:	d0 90 91 02 	lds	r13, 0x0291
    5956:	2e 85       	ldd	r18, Y+14	; 0x0e
    5958:	3f 85       	ldd	r19, Y+15	; 0x0f
    595a:	b9 01       	movw	r22, r18
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	46 ea       	ldi	r20, 0xA6	; 166
    5962:	52 e0       	ldi	r21, 0x02	; 2
    5964:	2a e0       	ldi	r18, 0x0A	; 10
    5966:	00 e0       	ldi	r16, 0x00	; 0
    5968:	ee 24       	eor	r14, r14
    596a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    596e:	bc 01       	movw	r22, r24
    5970:	c6 01       	movw	r24, r12
    5972:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\r\n"));
    5976:	80 91 90 02 	lds	r24, 0x0290
    597a:	90 91 91 02 	lds	r25, 0x0291
    597e:	61 e3       	ldi	r22, 0x31	; 49
    5980:	71 e1       	ldi	r23, 0x11	; 17
    5982:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>

	index=0;
	long_file_name[0]=0;
    5986:	10 92 ba 02 	sts	0x02BA, r1
    598a:	ff 24       	eor	r15, r15
    598c:	f3 94       	inc	r15
    598e:	aa 24       	eor	r10, r10
    5990:	bb 24       	eor	r11, r11
    5992:	cc 24       	eor	r12, r12
    5994:	dd 24       	eor	r13, r13

	do
	{
		//get pointer to directory entry
		directory_ptr = dir_entry_get_ptr(base_cluster, index);
    5996:	c4 01       	movw	r24, r8
    5998:	b3 01       	movw	r22, r6
    599a:	a5 01       	movw	r20, r10
    599c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    59a0:	8c 01       	movw	r16, r24
		
		if(directory_ptr)
    59a2:	00 97       	sbiw	r24, 0x00	; 0
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <dir_search_name+0x14e>
    59a6:	99 c0       	rjmp	.+306    	; 0x5ada <dir_search_name+0x280>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    59a8:	fc 01       	movw	r30, r24
    59aa:	80 81       	ld	r24, Z
    59ac:	85 3e       	cpi	r24, 0xE5	; 229
    59ae:	19 f4       	brne	.+6      	; 0x59b6 <dir_search_name+0x15c>
    59b0:	83 e0       	ldi	r24, 0x03	; 3
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	0e c0       	rjmp	.+28     	; 0x59d2 <dir_search_name+0x178>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    59b6:	88 23       	and	r24, r24
    59b8:	19 f4       	brne	.+6      	; 0x59c0 <dir_search_name+0x166>
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	09 c0       	rjmp	.+18     	; 0x59d2 <dir_search_name+0x178>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    59c0:	f8 01       	movw	r30, r16
    59c2:	83 85       	ldd	r24, Z+11	; 0x0b
    59c4:	8f 30       	cpi	r24, 0x0F	; 15
    59c6:	19 f0       	breq	.+6      	; 0x59ce <dir_search_name+0x174>
    59c8:	81 e0       	ldi	r24, 0x01	; 1
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <dir_search_name+0x178>
    59ce:	82 e0       	ldi	r24, 0x02	; 2
    59d0:	90 e0       	ldi	r25, 0x00	; 0
		
		if(directory_ptr)
		{
			//determine type of entry
			type=dir_type(directory_ptr);
			if(type == DIR_TYPE_USED)
    59d2:	81 30       	cpi	r24, 0x01	; 1
    59d4:	09 f0       	breq	.+2      	; 0x59d8 <dir_search_name+0x17e>
    59d6:	4b c0       	rjmp	.+150    	; 0x5a6e <dir_search_name+0x214>
			{
				//if short name matches
				if(short_valid)
    59d8:	33 20       	and	r3, r3
    59da:	b9 f0       	breq	.+46     	; 0x5a0a <dir_search_name+0x1b0>
				{
					//if main part and extension match
					if(!memcmp(name_short, directory_ptr->filename_dos, 8) && !memcmp(&name_short[9], directory_ptr->filename_ext, 3))
    59dc:	ce 01       	movw	r24, r28
    59de:	01 96       	adiw	r24, 0x01	; 1
    59e0:	b8 01       	movw	r22, r16
    59e2:	48 e0       	ldi	r20, 0x08	; 8
    59e4:	50 e0       	ldi	r21, 0x00	; 0
    59e6:	0e 94 ed 40 	call	0x81da	; 0x81da <memcmp>
    59ea:	00 97       	sbiw	r24, 0x00	; 0
    59ec:	09 f0       	breq	.+2      	; 0x59f0 <dir_search_name+0x196>
    59ee:	80 c0       	rjmp	.+256    	; 0x5af0 <dir_search_name+0x296>
    59f0:	08 5f       	subi	r16, 0xF8	; 248
    59f2:	1f 4f       	sbci	r17, 0xFF	; 255
    59f4:	ce 01       	movw	r24, r28
    59f6:	0a 96       	adiw	r24, 0x0a	; 10
    59f8:	b8 01       	movw	r22, r16
    59fa:	43 e0       	ldi	r20, 0x03	; 3
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	0e 94 ed 40 	call	0x81da	; 0x81da <memcmp>
    5a02:	00 97       	sbiw	r24, 0x00	; 0
    5a04:	09 f0       	breq	.+2      	; 0x5a08 <dir_search_name+0x1ae>
    5a06:	74 c0       	rjmp	.+232    	; 0x5af0 <dir_search_name+0x296>
    5a08:	2a c0       	rjmp	.+84     	; 0x5a5e <dir_search_name+0x204>
						finished=TRUE;
						success=TRUE;
					};
				}
				//if we have a long name from previous lfn entries, test it's checksum
				else if(long_file_name[0])		
    5a0a:	80 91 ba 02 	lds	r24, 0x02BA
    5a0e:	88 23       	and	r24, r24
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <dir_search_name+0x1ba>
    5a12:	6e c0       	rjmp	.+220    	; 0x5af0 <dir_search_name+0x296>
				{
					//if checksum is correct
					if(lfn_checksum == dir_lfn_checksum(directory_ptr) )
    5a14:	c8 01       	movw	r24, r16
    5a16:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <dir_lfn_checksum>
    5a1a:	c8 16       	cp	r12, r24
    5a1c:	09 f0       	breq	.+2      	; 0x5a20 <dir_search_name+0x1c6>
    5a1e:	57 c0       	rjmp	.+174    	; 0x5ace <dir_search_name+0x274>
    5a20:	88 89       	ldd	r24, Y+16	; 0x10
    5a22:	92 2d       	mov	r25, r2
    5a24:	9c 01       	movw	r18, r24
    5a26:	d9 01       	movw	r26, r18
    5a28:	ea eb       	ldi	r30, 0xBA	; 186
    5a2a:	f2 e0       	ldi	r31, 0x02	; 2
{
	char retval=0, x, y;

	do
	{
		x=*stringx++;
    5a2c:	9d 91       	ld	r25, X+
		y=*stringy++;
    5a2e:	21 91       	ld	r18, Z+
		if('a' <= x && x <= 'z')
    5a30:	89 2f       	mov	r24, r25
    5a32:	81 56       	subi	r24, 0x61	; 97
    5a34:	8a 31       	cpi	r24, 0x1A	; 26
    5a36:	08 f4       	brcc	.+2      	; 0x5a3a <dir_search_name+0x1e0>
			x-='a'-'A';
    5a38:	90 52       	subi	r25, 0x20	; 32
		if('a' <= y && y <= 'z')
    5a3a:	82 2f       	mov	r24, r18
    5a3c:	81 56       	subi	r24, 0x61	; 97
    5a3e:	8a 31       	cpi	r24, 0x1A	; 26
    5a40:	08 f4       	brcc	.+2      	; 0x5a44 <dir_search_name+0x1ea>
			y-='a'-'A';
    5a42:	20 52       	subi	r18, 0x20	; 32
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	92 13       	cpse	r25, r18
    5a48:	81 e0       	ldi	r24, 0x01	; 1
		
		if(x != y)
			retval=1;
	}while((x || y) && !retval);
    5a4a:	99 23       	and	r25, r25
    5a4c:	11 f4       	brne	.+4      	; 0x5a52 <dir_search_name+0x1f8>
    5a4e:	22 23       	and	r18, r18
    5a50:	19 f0       	breq	.+6      	; 0x5a58 <dir_search_name+0x1fe>
    5a52:	88 23       	and	r24, r24
    5a54:	59 f3       	breq	.-42     	; 0x5a2c <dir_search_name+0x1d2>
    5a56:	4c c0       	rjmp	.+152    	; 0x5af0 <dir_search_name+0x296>
					{
						//if long name matches (ignoring case)
						if(!strcmp_nocase(name_long, long_file_name))
    5a58:	88 23       	and	r24, r24
    5a5a:	09 f0       	breq	.+2      	; 0x5a5e <dir_search_name+0x204>
    5a5c:	49 c0       	rjmp	.+146    	; 0x5af0 <dir_search_name+0x296>
						{
							//return directory index
							if(directory_index)
    5a5e:	41 14       	cp	r4, r1
    5a60:	51 04       	cpc	r5, r1
    5a62:	09 f4       	brne	.+2      	; 0x5a66 <dir_search_name+0x20c>
    5a64:	48 c0       	rjmp	.+144    	; 0x5af6 <dir_search_name+0x29c>
								*directory_index=index;					
    5a66:	f2 01       	movw	r30, r4
    5a68:	b1 82       	std	Z+1, r11	; 0x01
    5a6a:	a0 82       	st	Z, r10
    5a6c:	44 c0       	rjmp	.+136    	; 0x5af6 <dir_search_name+0x29c>
					else
						//erase long file name
						long_file_name[0]=0;
				};
			}
			else if(type == DIR_TYPE_LFN && short_valid==FALSE)
    5a6e:	82 30       	cpi	r24, 0x02	; 2
    5a70:	89 f5       	brne	.+98     	; 0x5ad4 <dir_search_name+0x27a>
    5a72:	33 20       	and	r3, r3
    5a74:	e9 f5       	brne	.+122    	; 0x5af0 <dir_search_name+0x296>
			{
				lfn_ptr = (struct lfn_struct*)directory_ptr;
				//sequence start
				if(lfn_ptr->sequence & 0x40)
    5a76:	f8 01       	movw	r30, r16
    5a78:	20 81       	ld	r18, Z
    5a7a:	26 ff       	sbrs	r18, 6
    5a7c:	17 c0       	rjmp	.+46     	; 0x5aac <dir_search_name+0x252>
				{
					//store initial text, init checksum and sequence
					lfn_sequence=lfn_ptr->sequence & 0x3F;
    5a7e:	2f 73       	andi	r18, 0x3F	; 63
					lfn_checksum=lfn_ptr->checksum;
    5a80:	e5 84       	ldd	r14, Z+13	; 0x0d
					long_file_name[lfn_sequence*13]=0;
    5a82:	82 2f       	mov	r24, r18
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	4d e0       	ldi	r20, 0x0D	; 13
    5a88:	50 e0       	ldi	r21, 0x00	; 0
    5a8a:	84 9f       	mul	r24, r20
    5a8c:	f0 01       	movw	r30, r0
    5a8e:	85 9f       	mul	r24, r21
    5a90:	f0 0d       	add	r31, r0
    5a92:	94 9f       	mul	r25, r20
    5a94:	f0 0d       	add	r31, r0
    5a96:	11 24       	eor	r1, r1
    5a98:	e6 54       	subi	r30, 0x46	; 70
    5a9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5a9c:	10 82       	st	Z, r1
					lfn_sequence--;
    5a9e:	d2 2e       	mov	r13, r18
    5aa0:	da 94       	dec	r13
					dir_lfn_text_get(lfn_ptr, &long_file_name[lfn_sequence*13]);
    5aa2:	5d e0       	ldi	r21, 0x0D	; 13
    5aa4:	d5 9e       	mul	r13, r21
    5aa6:	b0 01       	movw	r22, r0
    5aa8:	11 24       	eor	r1, r1
    5aaa:	0b c0       	rjmp	.+22     	; 0x5ac2 <dir_search_name+0x268>
				}
				//valid sequence?
				else if(lfn_ptr->sequence == lfn_sequence && lfn_ptr->checksum == lfn_checksum)
    5aac:	2d 15       	cp	r18, r13
    5aae:	79 f4       	brne	.+30     	; 0x5ace <dir_search_name+0x274>
    5ab0:	f8 01       	movw	r30, r16
    5ab2:	e5 84       	ldd	r14, Z+13	; 0x0d
    5ab4:	ec 14       	cp	r14, r12
    5ab6:	59 f4       	brne	.+22     	; 0x5ace <dir_search_name+0x274>
				{
					lfn_sequence--;
    5ab8:	da 94       	dec	r13
					dir_lfn_text_get(lfn_ptr, &long_file_name[lfn_sequence*13]);
    5aba:	fd e0       	ldi	r31, 0x0D	; 13
    5abc:	df 9e       	mul	r13, r31
    5abe:	b0 01       	movw	r22, r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	66 54       	subi	r22, 0x46	; 70
    5ac4:	7d 4f       	sbci	r23, 0xFD	; 253
    5ac6:	c8 01       	movw	r24, r16
    5ac8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <dir_lfn_text_get>
    5acc:	12 c0       	rjmp	.+36     	; 0x5af2 <dir_search_name+0x298>
				}
				//invalid lfn
				else
				{
					long_file_name[0]=0;
    5ace:	10 92 ba 02 	sts	0x02BA, r1
    5ad2:	0e c0       	rjmp	.+28     	; 0x5af0 <dir_search_name+0x296>
				};
			}
			else if(type == DIR_TYPE_UNUSED)
    5ad4:	88 23       	and	r24, r24
    5ad6:	61 f4       	brne	.+24     	; 0x5af0 <dir_search_name+0x296>
    5ad8:	08 c0       	rjmp	.+16     	; 0x5aea <dir_search_name+0x290>
		}
		else
		{
			success=FALSE;
			finished=TRUE;
			DEBUG_P(PSTR("FAT32 - DIR SEARCH ERROR, UNABLE TO READ CHAIN\r\n"));
    5ada:	80 91 90 02 	lds	r24, 0x0290
    5ade:	90 91 91 02 	lds	r25, 0x0291
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	71 e1       	ldi	r23, 0x11	; 17
    5ae6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5aea:	ec 2c       	mov	r14, r12
    5aec:	ff 24       	eor	r15, r15
    5aee:	06 c0       	rjmp	.+12     	; 0x5afc <dir_search_name+0x2a2>
    5af0:	ec 2c       	mov	r14, r12
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <dir_search_name+0x2a4>
    5af6:	ec 2c       	mov	r14, r12
    5af8:	ff 24       	eor	r15, r15
    5afa:	f3 94       	inc	r15
    5afc:	81 e0       	ldi	r24, 0x01	; 1
		};
		
		//if end of chain, and not finished, search is unsuccessful
		index++;
    5afe:	08 94       	sec
    5b00:	a1 1c       	adc	r10, r1
    5b02:	b1 1c       	adc	r11, r1
		if(index == total_entries && !finished)
    5b04:	2e 85       	ldd	r18, Y+14	; 0x0e
    5b06:	3f 85       	ldd	r19, Y+15	; 0x0f
    5b08:	a2 16       	cp	r10, r18
    5b0a:	b3 06       	cpc	r11, r19
    5b0c:	19 f4       	brne	.+6      	; 0x5b14 <dir_search_name+0x2ba>
    5b0e:	88 23       	and	r24, r24
    5b10:	f9 f0       	breq	.+62     	; 0x5b50 <dir_search_name+0x2f6>
    5b12:	04 c0       	rjmp	.+8      	; 0x5b1c <dir_search_name+0x2c2>
		{
			success=FALSE;
			finished=TRUE;
		};
		
	}while(!finished);
    5b14:	88 23       	and	r24, r24
    5b16:	11 f4       	brne	.+4      	; 0x5b1c <dir_search_name+0x2c2>
    5b18:	ce 2c       	mov	r12, r14
    5b1a:	3d cf       	rjmp	.-390    	; 0x5996 <dir_search_name+0x13c>

	return success;
}
    5b1c:	8f 2d       	mov	r24, r15
    5b1e:	60 96       	adiw	r28, 0x10	; 16
    5b20:	0f b6       	in	r0, 0x3f	; 63
    5b22:	f8 94       	cli
    5b24:	de bf       	out	0x3e, r29	; 62
    5b26:	0f be       	out	0x3f, r0	; 63
    5b28:	cd bf       	out	0x3d, r28	; 61
    5b2a:	cf 91       	pop	r28
    5b2c:	df 91       	pop	r29
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	ff 90       	pop	r15
    5b34:	ef 90       	pop	r14
    5b36:	df 90       	pop	r13
    5b38:	cf 90       	pop	r12
    5b3a:	bf 90       	pop	r11
    5b3c:	af 90       	pop	r10
    5b3e:	9f 90       	pop	r9
    5b40:	8f 90       	pop	r8
    5b42:	7f 90       	pop	r7
    5b44:	6f 90       	pop	r6
    5b46:	5f 90       	pop	r5
    5b48:	4f 90       	pop	r4
    5b4a:	3f 90       	pop	r3
    5b4c:	2f 90       	pop	r2
    5b4e:	08 95       	ret
		{
			success=FALSE;
			finished=TRUE;
		};
		
	}while(!finished);
    5b50:	ff 24       	eor	r15, r15
    5b52:	e4 cf       	rjmp	.-56     	; 0x5b1c <dir_search_name+0x2c2>

00005b54 <dir_name_add>:
/*
Creates a new directory entry, and returns an index to it.
The new entry must be modified afterwards to reference a chain, set attributes, and size
*/
static char dir_name_add(char* name, unsigned long current_directory, unsigned int* new_index)
{
    5b54:	2f 92       	push	r2
    5b56:	3f 92       	push	r3
    5b58:	4f 92       	push	r4
    5b5a:	5f 92       	push	r5
    5b5c:	6f 92       	push	r6
    5b5e:	7f 92       	push	r7
    5b60:	8f 92       	push	r8
    5b62:	9f 92       	push	r9
    5b64:	af 92       	push	r10
    5b66:	bf 92       	push	r11
    5b68:	cf 92       	push	r12
    5b6a:	df 92       	push	r13
    5b6c:	ef 92       	push	r14
    5b6e:	ff 92       	push	r15
    5b70:	0f 93       	push	r16
    5b72:	1f 93       	push	r17
    5b74:	df 93       	push	r29
    5b76:	cf 93       	push	r28
    5b78:	cd b7       	in	r28, 0x3d	; 61
    5b7a:	de b7       	in	r29, 0x3e	; 62
    5b7c:	6c 97       	sbiw	r28, 0x1c	; 28
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	98 8f       	std	Y+24, r25	; 0x18
    5b8a:	8f 8b       	std	Y+23, r24	; 0x17
    5b8c:	2a 01       	movw	r4, r20
    5b8e:	3b 01       	movw	r6, r22
    5b90:	3a 8f       	std	Y+26, r19	; 0x1a
    5b92:	29 8f       	std	Y+25, r18	; 0x19
	unsigned int index, index_space_erased=0, total_entries;

	struct directory_struct	*directory_ptr=NULL;
	struct lfn_struct		*lfn_ptr;
	
	short_valid = dir_name_short_make(name, name_short);
    5b94:	15 e0       	ldi	r17, 0x05	; 5
    5b96:	a1 2e       	mov	r10, r17
    5b98:	b1 2c       	mov	r11, r1
    5b9a:	ac 0e       	add	r10, r28
    5b9c:	bd 1e       	adc	r11, r29
    5b9e:	b5 01       	movw	r22, r10
    5ba0:	0e 94 9e 2b 	call	0x573c	; 0x573c <dir_name_short_make>
    5ba4:	18 2f       	mov	r17, r24
	
	DEBUG_P(PSTR("FAT32 - Add entry to directory @ cluster "));
    5ba6:	80 91 90 02 	lds	r24, 0x0290
    5baa:	90 91 91 02 	lds	r25, 0x0291
    5bae:	64 ec       	ldi	r22, 0xC4	; 196
    5bb0:	70 e1       	ldi	r23, 0x10	; 16
    5bb2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	DEBUG_ULONG((unsigned long)current_directory);
    5bb6:	c0 90 90 02 	lds	r12, 0x0290
    5bba:	d0 90 91 02 	lds	r13, 0x0291
    5bbe:	c3 01       	movw	r24, r6
    5bc0:	b2 01       	movw	r22, r4
    5bc2:	46 ea       	ldi	r20, 0xA6	; 166
    5bc4:	52 e0       	ldi	r21, 0x02	; 2
    5bc6:	2a e0       	ldi	r18, 0x0A	; 10
    5bc8:	00 e0       	ldi	r16, 0x00	; 0
    5bca:	ee 24       	eor	r14, r14
    5bcc:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5bd0:	bc 01       	movw	r22, r24
    5bd2:	c6 01       	movw	r24, r12
    5bd4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR(" \""));
    5bd8:	80 91 90 02 	lds	r24, 0x0290
    5bdc:	90 91 91 02 	lds	r25, 0x0291
    5be0:	61 ec       	ldi	r22, 0xC1	; 193
    5be2:	70 e1       	ldi	r23, 0x10	; 16
    5be4:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5be8:	20 91 90 02 	lds	r18, 0x0290
    5bec:	30 91 91 02 	lds	r19, 0x0291
	if(short_valid)
    5bf0:	11 23       	and	r17, r17
    5bf2:	19 f0       	breq	.+6      	; 0x5bfa <dir_name_add+0xa6>
		DEBUG(name_short);
    5bf4:	c9 01       	movw	r24, r18
    5bf6:	b5 01       	movw	r22, r10
    5bf8:	03 c0       	rjmp	.+6      	; 0x5c00 <dir_name_add+0xac>
	else
		DEBUG(name);
    5bfa:	c9 01       	movw	r24, r18
    5bfc:	6f 89       	ldd	r22, Y+23	; 0x17
    5bfe:	78 8d       	ldd	r23, Y+24	; 0x18
    5c00:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
	DEBUG_P(PSTR("\"\r\n"));
    5c04:	80 91 90 02 	lds	r24, 0x0290
    5c08:	90 91 91 02 	lds	r25, 0x0291
    5c0c:	6d eb       	ldi	r22, 0xBD	; 189
    5c0e:	70 e1       	ldi	r23, 0x10	; 16
    5c10:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
	
	if(dir_search_name(current_directory, name, NULL))
    5c14:	c3 01       	movw	r24, r6
    5c16:	b2 01       	movw	r22, r4
    5c18:	4f 89       	ldd	r20, Y+23	; 0x17
    5c1a:	58 8d       	ldd	r21, Y+24	; 0x18
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	0e 94 2d 2c 	call	0x585a	; 0x585a <dir_search_name>
    5c24:	88 23       	and	r24, r24
    5c26:	51 f0       	breq	.+20     	; 0x5c3c <dir_name_add+0xe8>
	{
		DEBUG_P(PSTR("FAT32 - ERROR cannot create entry, name exists\r\n"));
    5c28:	80 91 90 02 	lds	r24, 0x0290
    5c2c:	90 91 91 02 	lds	r25, 0x0291
    5c30:	6c e8       	ldi	r22, 0x8C	; 140
    5c32:	70 e1       	ldi	r23, 0x10	; 16
    5c34:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5c38:	ff 24       	eor	r15, r15
    5c3a:	c0 c3       	rjmp	.+1920   	; 0x63bc <dir_name_add+0x868>
		success=FALSE;
	}
	else
	{
		//calculate number of directory entries required
		if(short_valid)
    5c3c:	11 23       	and	r17, r17
    5c3e:	19 f0       	breq	.+6      	; 0x5c46 <dir_name_add+0xf2>
    5c40:	21 e0       	ldi	r18, 0x01	; 1
    5c42:	2b 8b       	std	Y+19, r18	; 0x13
    5c44:	11 c0       	rjmp	.+34     	; 0x5c68 <dir_name_add+0x114>
			entries_needed=1;
		else
			entries_needed=2+strlen(name)/13;
    5c46:	af 89       	ldd	r26, Y+23	; 0x17
    5c48:	b8 8d       	ldd	r27, Y+24	; 0x18
    5c4a:	fd 01       	movw	r30, r26
    5c4c:	01 90       	ld	r0, Z+
    5c4e:	00 20       	and	r0, r0
    5c50:	e9 f7       	brne	.-6      	; 0x5c4c <dir_name_add+0xf8>
    5c52:	31 97       	sbiw	r30, 0x01	; 1
    5c54:	cf 01       	movw	r24, r30
    5c56:	8a 1b       	sub	r24, r26
    5c58:	9b 0b       	sbc	r25, r27
    5c5a:	6d e0       	ldi	r22, 0x0D	; 13
    5c5c:	70 e0       	ldi	r23, 0x00	; 0
    5c5e:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <__udivmodhi4>
    5c62:	46 2f       	mov	r20, r22
    5c64:	4e 5f       	subi	r20, 0xFE	; 254
    5c66:	4b 8b       	std	Y+19, r20	; 0x13
		
		//max number of entries in current directory chain
		total_entries = chain_length(current_directory, NULL) << (sectors_per_cluster_power+4);
    5c68:	c3 01       	movw	r24, r6
    5c6a:	b2 01       	movw	r22, r4
    5c6c:	40 e0       	ldi	r20, 0x00	; 0
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    5c74:	20 91 95 02 	lds	r18, 0x0295
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	2c 5f       	subi	r18, 0xFC	; 252
    5c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c7e:	04 c0       	rjmp	.+8      	; 0x5c88 <dir_name_add+0x134>
    5c80:	66 0f       	add	r22, r22
    5c82:	77 1f       	adc	r23, r23
    5c84:	88 1f       	adc	r24, r24
    5c86:	99 1f       	adc	r25, r25
    5c88:	2a 95       	dec	r18
    5c8a:	d2 f7       	brpl	.-12     	; 0x5c80 <dir_name_add+0x12c>
    5c8c:	1b 01       	movw	r2, r22
    5c8e:	00 e0       	ldi	r16, 0x00	; 0
    5c90:	10 e0       	ldi	r17, 0x00	; 0
    5c92:	aa 24       	eor	r10, r10
    5c94:	bb 24       	eor	r11, r11
    5c96:	88 24       	eor	r8, r8
    5c98:	99 24       	eor	r9, r9
						erased_entry_count++;
						//if found
						if(erased_entry_count==entries_needed)
						{
							//store index to beginning of erased space
							index_space_erased=index-entries_needed+1;
    5c9a:	b1 e0       	ldi	r27, 0x01	; 1
    5c9c:	cb 2e       	mov	r12, r27
    5c9e:	d1 2c       	mov	r13, r1
		//look for space
		index=0;
		erased_entry_count=0;
		do
		{
			directory_ptr=dir_entry_get_ptr(current_directory, index);
    5ca0:	c3 01       	movw	r24, r6
    5ca2:	b2 01       	movw	r22, r4
    5ca4:	a5 01       	movw	r20, r10
    5ca6:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    5caa:	fc 01       	movw	r30, r24
			
			if(directory_ptr)
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	11 f4       	brne	.+4      	; 0x5cb4 <dir_name_add+0x160>
    5cb0:	ff 24       	eor	r15, r15
    5cb2:	20 c0       	rjmp	.+64     	; 0x5cf4 <dir_name_add+0x1a0>
			{	
				//look for erased space
				if(!space_found_erased)
    5cb4:	00 23       	and	r16, r16
    5cb6:	79 f4       	brne	.+30     	; 0x5cd6 <dir_name_add+0x182>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    5cb8:	80 81       	ld	r24, Z
    5cba:	85 3e       	cpi	r24, 0xE5	; 229
    5cbc:	11 f0       	breq	.+4      	; 0x5cc2 <dir_name_add+0x16e>
			if(directory_ptr)
			{	
				//look for erased space
				if(!space_found_erased)
				{
					if(dir_type(directory_ptr) == DIR_TYPE_ERASED)
    5cbe:	10 e0       	ldi	r17, 0x00	; 0
    5cc0:	0a c0       	rjmp	.+20     	; 0x5cd6 <dir_name_add+0x182>
					{
						erased_entry_count++;
    5cc2:	1f 5f       	subi	r17, 0xFF	; 255
						//if found
						if(erased_entry_count==entries_needed)
    5cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    5cc6:	18 17       	cp	r17, r24
    5cc8:	31 f4       	brne	.+12     	; 0x5cd6 <dir_name_add+0x182>
						{
							//store index to beginning of erased space
							index_space_erased=index-entries_needed+1;
    5cca:	46 01       	movw	r8, r12
    5ccc:	81 1a       	sub	r8, r17
    5cce:	91 08       	sbc	r9, r1
    5cd0:	8a 0c       	add	r8, r10
    5cd2:	9b 1c       	adc	r9, r11
    5cd4:	01 e0       	ldi	r16, 0x01	; 1
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    5cd6:	80 81       	ld	r24, Z
    5cd8:	85 3e       	cpi	r24, 0xE5	; 229
    5cda:	39 f0       	breq	.+14     	; 0x5cea <dir_name_add+0x196>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    5cdc:	88 23       	and	r24, r24
    5cde:	29 f4       	brne	.+10     	; 0x5cea <dir_name_add+0x196>
					else
						erased_entry_count=0;
				};
				
				//look for first unused entry
				if(dir_type(directory_ptr) == DIR_TYPE_UNUSED)
    5ce0:	ff 24       	eor	r15, r15
    5ce2:	f3 94       	inc	r15
    5ce4:	91 e0       	ldi	r25, 0x01	; 1
    5ce6:	9e 8b       	std	Y+22, r25	; 0x16
    5ce8:	06 c0       	rjmp	.+12     	; 0x5cf6 <dir_name_add+0x1a2>
					space_found_unused = TRUE;
				else
					index++;
    5cea:	08 94       	sec
    5cec:	a1 1c       	adc	r10, r1
    5cee:	b1 1c       	adc	r11, r1
    5cf0:	ff 24       	eor	r15, r15
    5cf2:	f3 94       	inc	r15
    5cf4:	1e 8a       	std	Y+22, r1	; 0x16
			}
			else
				success=FALSE;
		//search until we reach the end of the chain, or we have an I/O error, or we find an unused entry
		}while(index != total_entries && success && space_found_unused == FALSE);
    5cf6:	a2 14       	cp	r10, r2
    5cf8:	b3 04       	cpc	r11, r3
    5cfa:	59 f0       	breq	.+22     	; 0x5d12 <dir_name_add+0x1be>
    5cfc:	ff 20       	and	r15, r15
    5cfe:	09 f4       	brne	.+2      	; 0x5d02 <dir_name_add+0x1ae>
    5d00:	56 c1       	rjmp	.+684    	; 0x5fae <dir_name_add+0x45a>
    5d02:	ae 89       	ldd	r26, Y+22	; 0x16
    5d04:	aa 23       	and	r26, r26
    5d06:	61 f2       	breq	.-104    	; 0x5ca0 <dir_name_add+0x14c>
    5d08:	ff 24       	eor	r15, r15
    5d0a:	f3 94       	inc	r15
    5d0c:	b1 e0       	ldi	r27, 0x01	; 1
    5d0e:	be 8b       	std	Y+22, r27	; 0x16
    5d10:	03 c0       	rjmp	.+6      	; 0x5d18 <dir_name_add+0x1c4>
		*/
		
		
		// if index exceeds the end of the chain (==total_entries), and no erased space is found,
		// the chain will be extended so that the index becomes an unused entry in the next cluster
		if(success)
    5d12:	ff 20       	and	r15, r15
    5d14:	09 f4       	brne	.+2      	; 0x5d18 <dir_name_add+0x1c4>
    5d16:	4b c1       	rjmp	.+662    	; 0x5fae <dir_name_add+0x45a>
		{
			//if enough room before end of chain (entries required +1 for directory terminator)
			if(total_entries-index > entries_needed)
    5d18:	91 01       	movw	r18, r2
    5d1a:	2a 19       	sub	r18, r10
    5d1c:	3b 09       	sbc	r19, r11
    5d1e:	eb 89       	ldd	r30, Y+19	; 0x13
    5d20:	8e 2f       	mov	r24, r30
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	82 17       	cp	r24, r18
    5d26:	93 07       	cpc	r25, r19
    5d28:	28 f5       	brcc	.+74     	; 0x5d74 <dir_name_add+0x220>
			{
				space_found_unused=TRUE;
				DEBUG_P(PSTR("FAT32 - Add entry, unused space found at index "));
    5d2a:	80 91 90 02 	lds	r24, 0x0290
    5d2e:	90 91 91 02 	lds	r25, 0x0291
    5d32:	6c e5       	ldi	r22, 0x5C	; 92
    5d34:	70 e1       	ldi	r23, 0x10	; 16
    5d36:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG((unsigned long)index);
    5d3a:	c0 90 90 02 	lds	r12, 0x0290
    5d3e:	d0 90 91 02 	lds	r13, 0x0291
    5d42:	b5 01       	movw	r22, r10
    5d44:	80 e0       	ldi	r24, 0x00	; 0
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	46 ea       	ldi	r20, 0xA6	; 166
    5d4a:	52 e0       	ldi	r21, 0x02	; 2
    5d4c:	2a e0       	ldi	r18, 0x0A	; 10
    5d4e:	00 e0       	ldi	r16, 0x00	; 0
    5d50:	ee 24       	eor	r14, r14
    5d52:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5d56:	bc 01       	movw	r22, r24
    5d58:	c6 01       	movw	r24, r12
    5d5a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5d5e:	80 91 90 02 	lds	r24, 0x0290
    5d62:	90 91 91 02 	lds	r25, 0x0291
    5d66:	69 e5       	ldi	r22, 0x59	; 89
    5d68:	70 e1       	ldi	r23, 0x10	; 16
    5d6a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5d6e:	f1 e0       	ldi	r31, 0x01	; 1
    5d70:	fe 8b       	std	Y+22, r31	; 0x16
    5d72:	1d c1       	rjmp	.+570    	; 0x5fae <dir_name_add+0x45a>
    5d74:	20 91 90 02 	lds	r18, 0x0290
    5d78:	30 91 91 02 	lds	r19, 0x0291
			}
			//was erased space found?
			else if(space_found_erased)
    5d7c:	00 23       	and	r16, r16
    5d7e:	11 f1       	breq	.+68     	; 0x5dc4 <dir_name_add+0x270>
			{
				//use erased space instead
				index=index_space_erased;
				space_found_unused=FALSE;
				DEBUG_P(PSTR("FAT32 - Add entry, erased space found at index "));
    5d80:	c9 01       	movw	r24, r18
    5d82:	69 e2       	ldi	r22, 0x29	; 41
    5d84:	70 e1       	ldi	r23, 0x10	; 16
    5d86:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG((unsigned long)index);
    5d8a:	c0 90 90 02 	lds	r12, 0x0290
    5d8e:	d0 90 91 02 	lds	r13, 0x0291
    5d92:	b4 01       	movw	r22, r8
    5d94:	80 e0       	ldi	r24, 0x00	; 0
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	46 ea       	ldi	r20, 0xA6	; 166
    5d9a:	52 e0       	ldi	r21, 0x02	; 2
    5d9c:	2a e0       	ldi	r18, 0x0A	; 10
    5d9e:	00 e0       	ldi	r16, 0x00	; 0
    5da0:	ee 24       	eor	r14, r14
    5da2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5da6:	bc 01       	movw	r22, r24
    5da8:	c6 01       	movw	r24, r12
    5daa:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5dae:	80 91 90 02 	lds	r24, 0x0290
    5db2:	90 91 91 02 	lds	r25, 0x0291
    5db6:	66 e2       	ldi	r22, 0x26	; 38
    5db8:	70 e1       	ldi	r23, 0x10	; 16
    5dba:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5dbe:	54 01       	movw	r10, r8
    5dc0:	1e 8a       	std	Y+22, r1	; 0x16
    5dc2:	f5 c0       	rjmp	.+490    	; 0x5fae <dir_name_add+0x45a>
			}
			//if no erased space, try to extend chain
			else
			{
				DEBUG_P(PSTR("FAT32 - Add entry, no space, extending chain, new space will be at index "));
    5dc4:	c9 01       	movw	r24, r18
    5dc6:	6c ed       	ldi	r22, 0xDC	; 220
    5dc8:	7f e0       	ldi	r23, 0x0F	; 15
    5dca:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG((unsigned long)index);
    5dce:	c0 90 90 02 	lds	r12, 0x0290
    5dd2:	d0 90 91 02 	lds	r13, 0x0291
    5dd6:	b5 01       	movw	r22, r10
    5dd8:	80 e0       	ldi	r24, 0x00	; 0
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	46 ea       	ldi	r20, 0xA6	; 166
    5dde:	52 e0       	ldi	r21, 0x02	; 2
    5de0:	2a e0       	ldi	r18, 0x0A	; 10
    5de2:	00 e0       	ldi	r16, 0x00	; 0
    5de4:	ee 24       	eor	r14, r14
    5de6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5dea:	bc 01       	movw	r22, r24
    5dec:	c6 01       	movw	r24, r12
    5dee:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5df2:	80 91 90 02 	lds	r24, 0x0290
    5df6:	90 91 91 02 	lds	r25, 0x0291
    5dfa:	69 ed       	ldi	r22, 0xD9	; 217
    5dfc:	7f e0       	ldi	r23, 0x0F	; 15
    5dfe:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
//increase the length of a chain by size
static char chain_extend_by(unsigned long cluster, unsigned long size)
{
	char success=TRUE;
	unsigned long chain_new=0;
	unsigned long end=0ul;
    5e02:	19 82       	std	Y+1, r1	; 0x01
    5e04:	1a 82       	std	Y+2, r1	; 0x02
    5e06:	1b 82       	std	Y+3, r1	; 0x03
    5e08:	1c 82       	std	Y+4, r1	; 0x04

	//find the end of the chain
	chain_length(cluster, &end);
    5e0a:	c3 01       	movw	r24, r6
    5e0c:	b2 01       	movw	r22, r4
    5e0e:	ae 01       	movw	r20, r28
    5e10:	4f 5f       	subi	r20, 0xFF	; 255
    5e12:	5f 4f       	sbci	r21, 0xFF	; 255
    5e14:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>

	if(cluster_type_read(end) != CLUSTER_TYPE_LAST)
    5e18:	69 81       	ldd	r22, Y+1	; 0x01
    5e1a:	7a 81       	ldd	r23, Y+2	; 0x02
    5e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    5e20:	0e 94 58 19 	call	0x32b0	; 0x32b0 <cluster_type_read>
    5e24:	20 91 90 02 	lds	r18, 0x0290
    5e28:	30 91 91 02 	lds	r19, 0x0291
    5e2c:	83 30       	cpi	r24, 0x03	; 3
    5e2e:	29 f1       	breq	.+74     	; 0x5e7a <dir_name_add+0x326>
	{
		success=FALSE;
		DEBUG_P(PSTR("FAT32 - Chain extend ERROR. Chain at cluster"));
    5e30:	c9 01       	movw	r24, r18
    5e32:	6c ee       	ldi	r22, 0xEC	; 236
    5e34:	71 e1       	ldi	r23, 0x11	; 17
    5e36:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(cluster);
    5e3a:	c0 90 90 02 	lds	r12, 0x0290
    5e3e:	d0 90 91 02 	lds	r13, 0x0291
    5e42:	c3 01       	movw	r24, r6
    5e44:	b2 01       	movw	r22, r4
    5e46:	46 ea       	ldi	r20, 0xA6	; 166
    5e48:	52 e0       	ldi	r21, 0x02	; 2
    5e4a:	2a e0       	ldi	r18, 0x0A	; 10
    5e4c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5e50:	bc 01       	movw	r22, r24
    5e52:	c6 01       	movw	r24, r12
    5e54:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" contains bad/reserved cluster "));
    5e58:	80 91 90 02 	lds	r24, 0x0290
    5e5c:	90 91 91 02 	lds	r25, 0x0291
    5e60:	6c ec       	ldi	r22, 0xCC	; 204
    5e62:	71 e1       	ldi	r23, 0x11	; 17
    5e64:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("\r\n"));		
    5e68:	80 91 90 02 	lds	r24, 0x0290
    5e6c:	90 91 91 02 	lds	r25, 0x0291
    5e70:	69 ec       	ldi	r22, 0xC9	; 201
    5e72:	71 e1       	ldi	r23, 0x11	; 17
    5e74:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5e78:	4e c0       	rjmp	.+156    	; 0x5f16 <dir_name_add+0x3c2>
	}
	else
	{
		DEBUG_P(PSTR("FAT32 - Chain extend, base="));
    5e7a:	c9 01       	movw	r24, r18
    5e7c:	6d ea       	ldi	r22, 0xAD	; 173
    5e7e:	71 e1       	ldi	r23, 0x11	; 17
    5e80:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(chain_new);
    5e84:	c0 90 90 02 	lds	r12, 0x0290
    5e88:	d0 90 91 02 	lds	r13, 0x0291
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	70 e0       	ldi	r23, 0x00	; 0
    5e90:	80 e0       	ldi	r24, 0x00	; 0
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	46 ea       	ldi	r20, 0xA6	; 166
    5e96:	52 e0       	ldi	r21, 0x02	; 2
    5e98:	2a e0       	ldi	r18, 0x0A	; 10
    5e9a:	00 e0       	ldi	r16, 0x00	; 0
    5e9c:	ee 24       	eor	r14, r14
    5e9e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	c6 01       	movw	r24, r12
    5ea6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" end="));
    5eaa:	80 91 90 02 	lds	r24, 0x0290
    5eae:	90 91 91 02 	lds	r25, 0x0291
    5eb2:	67 ea       	ldi	r22, 0xA7	; 167
    5eb4:	71 e1       	ldi	r23, 0x11	; 17
    5eb6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG(end);
    5eba:	c0 90 90 02 	lds	r12, 0x0290
    5ebe:	d0 90 91 02 	lds	r13, 0x0291
    5ec2:	69 81       	ldd	r22, Y+1	; 0x01
    5ec4:	7a 81       	ldd	r23, Y+2	; 0x02
    5ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    5eca:	46 ea       	ldi	r20, 0xA6	; 166
    5ecc:	52 e0       	ldi	r21, 0x02	; 2
    5ece:	2a e0       	ldi	r18, 0x0A	; 10
    5ed0:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	c6 01       	movw	r24, r12
    5ed8:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR("\r\n"));
    5edc:	80 91 90 02 	lds	r24, 0x0290
    5ee0:	90 91 91 02 	lds	r25, 0x0291
    5ee4:	64 ea       	ldi	r22, 0xA4	; 164
    5ee6:	71 e1       	ldi	r23, 0x11	; 17
    5ee8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		
		chain_new=chain_create(size);
    5eec:	61 e0       	ldi	r22, 0x01	; 1
    5eee:	70 e0       	ldi	r23, 0x00	; 0
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	0e 94 1c 21 	call	0x4238	; 0x4238 <chain_create>
    5ef8:	9b 01       	movw	r18, r22
    5efa:	ac 01       	movw	r20, r24
		if(!chain_new)
    5efc:	61 15       	cp	r22, r1
    5efe:	71 05       	cpc	r23, r1
    5f00:	81 05       	cpc	r24, r1
    5f02:	91 05       	cpc	r25, r1
    5f04:	41 f0       	breq	.+16     	; 0x5f16 <dir_name_add+0x3c2>
			success=FALSE;
		else
		{
			//link old chain to new chain
			success=cluster_link_write(end, chain_new);
    5f06:	69 81       	ldd	r22, Y+1	; 0x01
    5f08:	7a 81       	ldd	r23, Y+2	; 0x02
    5f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    5f0e:	0e 94 cc 20 	call	0x4198	; 0x4198 <cluster_link_write>
		};
	};

	if(!success)
    5f12:	88 23       	and	r24, r24
    5f14:	51 f4       	brne	.+20     	; 0x5f2a <dir_name_add+0x3d6>
		DEBUG_P(PSTR("FAT32 - ERROR, unable to extend chain\r\n"));
    5f16:	80 91 90 02 	lds	r24, 0x0290
    5f1a:	90 91 91 02 	lds	r25, 0x0291
    5f1e:	6c e7       	ldi	r22, 0x7C	; 124
    5f20:	71 e1       	ldi	r23, 0x11	; 17
    5f22:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    5f26:	ff 24       	eor	r15, r15
    5f28:	42 c0       	rjmp	.+132    	; 0x5fae <dir_name_add+0x45a>
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    5f2a:	80 91 96 02 	lds	r24, 0x0296
    5f2e:	90 91 97 02 	lds	r25, 0x0297
    5f32:	a0 91 98 02 	lds	r26, 0x0298
    5f36:	b0 91 99 02 	lds	r27, 0x0299
    5f3a:	48 16       	cp	r4, r24
    5f3c:	59 06       	cpc	r5, r25
    5f3e:	6a 06       	cpc	r6, r26
    5f40:	7b 06       	cpc	r7, r27
    5f42:	c1 f0       	breq	.+48     	; 0x5f74 <dir_name_add+0x420>
	{
		chain_ptr->base=cluster;
    5f44:	40 92 96 02 	sts	0x0296, r4
    5f48:	50 92 97 02 	sts	0x0297, r5
    5f4c:	60 92 98 02 	sts	0x0298, r6
    5f50:	70 92 99 02 	sts	0x0299, r7
		chain_ptr->physical=cluster;
    5f54:	40 92 9a 02 	sts	0x029A, r4
    5f58:	50 92 9b 02 	sts	0x029B, r5
    5f5c:	60 92 9c 02 	sts	0x029C, r6
    5f60:	70 92 9d 02 	sts	0x029D, r7
		chain_ptr->logical=0ul;
    5f64:	10 92 9e 02 	sts	0x029E, r1
    5f68:	10 92 9f 02 	sts	0x029F, r1
    5f6c:	10 92 a0 02 	sts	0x02A0, r1
    5f70:	10 92 a1 02 	sts	0x02A1, r1
				success=chain_extend_by(current_directory, 1);
				if(success)
				{
					chain_init(&dir_chain_nav, current_directory);
					success=chain_rw(&dir_chain_nav, NULL, total_entries <<5, ((unsigned long)sectors_per_cluster)<<9 , FAT_ERASE);
    5f74:	a5 e0       	ldi	r26, 0x05	; 5
    5f76:	22 0c       	add	r2, r2
    5f78:	33 1c       	adc	r3, r3
    5f7a:	aa 95       	dec	r26
    5f7c:	e1 f7       	brne	.-8      	; 0x5f76 <dir_name_add+0x422>
    5f7e:	91 01       	movw	r18, r2
    5f80:	40 e0       	ldi	r20, 0x00	; 0
    5f82:	50 e0       	ldi	r21, 0x00	; 0
    5f84:	e0 90 bc 03 	lds	r14, 0x03BC
    5f88:	ff 24       	eor	r15, r15
    5f8a:	00 e0       	ldi	r16, 0x00	; 0
    5f8c:	10 e0       	ldi	r17, 0x00	; 0
    5f8e:	f9 e0       	ldi	r31, 0x09	; 9
    5f90:	ee 0c       	add	r14, r14
    5f92:	ff 1c       	adc	r15, r15
    5f94:	00 1f       	adc	r16, r16
    5f96:	11 1f       	adc	r17, r17
    5f98:	fa 95       	dec	r31
    5f9a:	d1 f7       	brne	.-12     	; 0x5f90 <dir_name_add+0x43c>
    5f9c:	86 e9       	ldi	r24, 0x96	; 150
    5f9e:	92 e0       	ldi	r25, 0x02	; 2
    5fa0:	60 e0       	ldi	r22, 0x00	; 0
    5fa2:	70 e0       	ldi	r23, 0x00	; 0
    5fa4:	e2 e0       	ldi	r30, 0x02	; 2
    5fa6:	ce 2e       	mov	r12, r30
    5fa8:	0e 94 24 29 	call	0x5248	; 0x5248 <chain_rw>
    5fac:	f8 2e       	mov	r15, r24
			};
		};
		//index now points to first entry of available space
		
		//index to last entry +1
		index += entries_needed;
    5fae:	cb 88       	ldd	r12, Y+19	; 0x13
    5fb0:	8c 2c       	mov	r8, r12
    5fb2:	99 24       	eor	r9, r9
    5fb4:	a8 0c       	add	r10, r8
    5fb6:	b9 1c       	adc	r11, r9
		
		if(success)
    5fb8:	ff 20       	and	r15, r15
    5fba:	09 f4       	brne	.+2      	; 0x5fbe <dir_name_add+0x46a>
    5fbc:	3f c0       	rjmp	.+126    	; 0x603c <dir_name_add+0x4e8>
		{
			//if we are not overwriting erased space
			if(space_found_unused)
    5fbe:	de 88       	ldd	r13, Y+22	; 0x16
    5fc0:	dd 20       	and	r13, r13
    5fc2:	09 f4       	brne	.+2      	; 0x5fc6 <dir_name_add+0x472>
    5fc4:	43 c0       	rjmp	.+134    	; 0x604c <dir_name_add+0x4f8>
			{
				DEBUG_P(PSTR("FAT32 - Add entry, terminating entry added at index "));
    5fc6:	80 91 90 02 	lds	r24, 0x0290
    5fca:	90 91 91 02 	lds	r25, 0x0291
    5fce:	64 ea       	ldi	r22, 0xA4	; 164
    5fd0:	7f e0       	ldi	r23, 0x0F	; 15
    5fd2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG((unsigned long)index);
    5fd6:	c0 90 90 02 	lds	r12, 0x0290
    5fda:	d0 90 91 02 	lds	r13, 0x0291
    5fde:	b5 01       	movw	r22, r10
    5fe0:	80 e0       	ldi	r24, 0x00	; 0
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	46 ea       	ldi	r20, 0xA6	; 166
    5fe6:	52 e0       	ldi	r21, 0x02	; 2
    5fe8:	2a e0       	ldi	r18, 0x0A	; 10
    5fea:	00 e0       	ldi	r16, 0x00	; 0
    5fec:	ee 24       	eor	r14, r14
    5fee:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    5ff2:	bc 01       	movw	r22, r24
    5ff4:	c6 01       	movw	r24, r12
    5ff6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    5ffa:	80 91 90 02 	lds	r24, 0x0290
    5ffe:	90 91 91 02 	lds	r25, 0x0291
    6002:	61 ea       	ldi	r22, 0xA1	; 161
    6004:	7f e0       	ldi	r23, 0x0F	; 15
    6006:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				
				//get pointer to last entry+1
				directory_ptr=dir_entry_get_ptr(current_directory, index);
    600a:	c3 01       	movw	r24, r6
    600c:	b2 01       	movw	r22, r4
    600e:	a5 01       	movw	r20, r10
    6010:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6014:	fc 01       	movw	r30, r24
				if(directory_ptr)
    6016:	00 97       	sbiw	r24, 0x00	; 0
    6018:	11 f4       	brne	.+4      	; 0x601e <dir_name_add+0x4ca>
    601a:	ff 24       	eor	r15, r15
    601c:	17 c0       	rjmp	.+46     	; 0x604c <dir_name_add+0x4f8>
				{
					//ensure directory table is terminated with unused entry
					memset(directory_ptr, 0, sizeof(struct directory_struct));
    601e:	80 e2       	ldi	r24, 0x20	; 32
    6020:	df 01       	movw	r26, r30
    6022:	1d 92       	st	X+, r1
    6024:	8a 95       	dec	r24
    6026:	e9 f7       	brne	.-6      	; 0x6022 <dir_name_add+0x4ce>
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    6028:	ef 5d       	subi	r30, 0xDF	; 223
    602a:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    602c:	e0 70       	andi	r30, 0x00	; 0
    602e:	fe 7f       	andi	r31, 0xFE	; 254
    6030:	ef 2b       	or	r30, r31
    6032:	61 f4       	brne	.+24     	; 0x604c <dir_name_add+0x4f8>
		{
			cache_dirty[index]=TRUE;
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	80 93 e3 05 	sts	0x05E3, r24
    603a:	08 c0       	rjmp	.+16     	; 0x604c <dir_name_add+0x4f8>
					success=FALSE;
			};
		}
		else
		{
			DEBUG_P(PSTR("FAT32 - Add entry, ERROR, failed to get space in directory\r\n"));
    603c:	80 91 90 02 	lds	r24, 0x0290
    6040:	90 91 91 02 	lds	r25, 0x0291
    6044:	64 e6       	ldi	r22, 0x64	; 100
    6046:	7f e0       	ldi	r23, 0x0F	; 15
    6048:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		};
		
		//index to last entry (main entry)
		index --;	
    604c:	08 94       	sec
    604e:	a1 08       	sbc	r10, r1
    6050:	b1 08       	sbc	r11, r1
		
		if(success)
    6052:	ff 20       	and	r15, r15
    6054:	09 f4       	brne	.+2      	; 0x6058 <dir_name_add+0x504>
    6056:	a1 c0       	rjmp	.+322    	; 0x619a <dir_name_add+0x646>
		{			
			//return index of main entry
			*new_index=index;
    6058:	e9 8d       	ldd	r30, Y+25	; 0x19
    605a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    605c:	b1 82       	std	Z+1, r11	; 0x01
    605e:	a0 82       	st	Z, r10
			
			//get pointer to main entry
			directory_ptr=dir_entry_get_ptr(current_directory, index);
    6060:	c3 01       	movw	r24, r6
    6062:	b2 01       	movw	r22, r4
    6064:	a5 01       	movw	r20, r10
    6066:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    606a:	fc 01       	movw	r30, r24
			if(!directory_ptr)
    606c:	00 97       	sbiw	r24, 0x00	; 0
    606e:	09 f4       	brne	.+2      	; 0x6072 <dir_name_add+0x51e>
    6070:	93 c0       	rjmp	.+294    	; 0x6198 <dir_name_add+0x644>
		};
		
		if(success)
		{
			//create main directory entry
			memcpy(directory_ptr->filename_dos, name_short, 8);
    6072:	9c 01       	movw	r18, r24
    6074:	ae 01       	movw	r20, r28
    6076:	4b 5f       	subi	r20, 0xFB	; 251
    6078:	5f 4f       	sbci	r21, 0xFF	; 255
    607a:	88 e0       	ldi	r24, 0x08	; 8
    607c:	da 01       	movw	r26, r20
    607e:	0d 90       	ld	r0, X+
    6080:	ad 01       	movw	r20, r26
    6082:	d9 01       	movw	r26, r18
    6084:	0d 92       	st	X+, r0
    6086:	9d 01       	movw	r18, r26
    6088:	81 50       	subi	r24, 0x01	; 1
    608a:	c1 f7       	brne	.-16     	; 0x607c <dir_name_add+0x528>
			memcpy(directory_ptr->filename_ext, &name_short[9], 3);
    608c:	9f 01       	movw	r18, r30
    608e:	28 5f       	subi	r18, 0xF8	; 248
    6090:	3f 4f       	sbci	r19, 0xFF	; 255
    6092:	ae 01       	movw	r20, r28
    6094:	42 5f       	subi	r20, 0xF2	; 242
    6096:	5f 4f       	sbci	r21, 0xFF	; 255
    6098:	83 e0       	ldi	r24, 0x03	; 3
    609a:	da 01       	movw	r26, r20
    609c:	0d 90       	ld	r0, X+
    609e:	ad 01       	movw	r20, r26
    60a0:	d9 01       	movw	r26, r18
    60a2:	0d 92       	st	X+, r0
    60a4:	9d 01       	movw	r18, r26
    60a6:	81 50       	subi	r24, 0x01	; 1
    60a8:	c1 f7       	brne	.-16     	; 0x609a <dir_name_add+0x546>
			
			directory_ptr->attributes=0x00;
    60aa:	13 86       	std	Z+11, r1	; 0x0b
			directory_ptr->reserved1=0;
    60ac:	14 86       	std	Z+12, r1	; 0x0c
			if(fat_date_time.second & 1)
    60ae:	80 91 22 0c 	lds	r24, 0x0C22
    60b2:	68 2f       	mov	r22, r24
    60b4:	70 e0       	ldi	r23, 0x00	; 0
    60b6:	80 ff       	sbrs	r24, 0
    60b8:	03 c0       	rjmp	.+6      	; 0x60c0 <dir_name_add+0x56c>
				directory_ptr->time10ms=100;
    60ba:	84 e6       	ldi	r24, 0x64	; 100
    60bc:	85 87       	std	Z+13, r24	; 0x0d
    60be:	01 c0       	rjmp	.+2      	; 0x60c2 <dir_name_add+0x56e>
			else
				directory_ptr->time10ms=0;
    60c0:	15 86       	std	Z+13, r1	; 0x0d
static int dir_time_entry(int hours, int mins, int seconds)
{
	int retval=0;
	
	retval += hours<<11;
	retval += mins<<5;
    60c2:	40 91 21 0c 	lds	r20, 0x0C21
    60c6:	50 e0       	ldi	r21, 0x00	; 0
    60c8:	95 e0       	ldi	r25, 0x05	; 5
    60ca:	44 0f       	add	r20, r20
    60cc:	55 1f       	adc	r21, r21
    60ce:	9a 95       	dec	r25
    60d0:	e1 f7       	brne	.-8      	; 0x60ca <dir_name_add+0x576>
    60d2:	20 91 20 0c 	lds	r18, 0x0C20
    60d6:	92 2f       	mov	r25, r18
    60d8:	99 0f       	add	r25, r25
    60da:	99 0f       	add	r25, r25
    60dc:	99 0f       	add	r25, r25
    60de:	80 e0       	ldi	r24, 0x00	; 0
    60e0:	48 0f       	add	r20, r24
    60e2:	59 1f       	adc	r21, r25
			directory_ptr->reserved1=0;
			if(fat_date_time.second & 1)
				directory_ptr->time10ms=100;
			else
				directory_ptr->time10ms=0;
			directory_ptr->create_time = LEND_UINT_WRITE(dir_time_entry(fat_date_time.hour, fat_date_time.min, fat_date_time.second));
    60e4:	75 95       	asr	r23
    60e6:	67 95       	ror	r22
    60e8:	46 0f       	add	r20, r22
    60ea:	57 1f       	adc	r21, r23
    60ec:	57 87       	std	Z+15, r21	; 0x0f
    60ee:	46 87       	std	Z+14, r20	; 0x0e
static int dir_date_entry(int year, int month, int day)
{
	int retval=0;
	
	retval += year<<9;
	retval += month<<5;
    60f0:	80 91 1d 0c 	lds	r24, 0x0C1D
    60f4:	38 2f       	mov	r19, r24
    60f6:	33 0f       	add	r19, r19
    60f8:	20 e0       	ldi	r18, 0x00	; 0
    60fa:	80 91 1e 0c 	lds	r24, 0x0C1E
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	05 e0       	ldi	r16, 0x05	; 5
    6102:	88 0f       	add	r24, r24
    6104:	99 1f       	adc	r25, r25
    6106:	0a 95       	dec	r16
    6108:	e1 f7       	brne	.-8      	; 0x6102 <dir_name_add+0x5ae>
    610a:	82 0f       	add	r24, r18
    610c:	93 1f       	adc	r25, r19
	retval += day;
    610e:	20 91 1f 0c 	lds	r18, 0x0C1F
    6112:	82 0f       	add	r24, r18
    6114:	91 1d       	adc	r25, r1
			if(fat_date_time.second & 1)
				directory_ptr->time10ms=100;
			else
				directory_ptr->time10ms=0;
			directory_ptr->create_time = LEND_UINT_WRITE(dir_time_entry(fat_date_time.hour, fat_date_time.min, fat_date_time.second));
			directory_ptr->create_date = LEND_UINT_WRITE(dir_date_entry(fat_date_time.year, fat_date_time.month, fat_date_time.day));
    6116:	91 8b       	std	Z+17, r25	; 0x11
    6118:	80 8b       	std	Z+16, r24	; 0x10
			directory_ptr->access_date = directory_ptr->create_date;
    611a:	93 8b       	std	Z+19, r25	; 0x13
    611c:	82 8b       	std	Z+18, r24	; 0x12
			directory_ptr->cluster_h = 0;
    611e:	15 8a       	std	Z+21, r1	; 0x15
    6120:	14 8a       	std	Z+20, r1	; 0x14
			directory_ptr->modified_time = directory_ptr->create_time;
    6122:	57 8b       	std	Z+23, r21	; 0x17
    6124:	46 8b       	std	Z+22, r20	; 0x16
			directory_ptr->modified_date = directory_ptr->create_date;
    6126:	91 8f       	std	Z+25, r25	; 0x19
    6128:	80 8f       	std	Z+24, r24	; 0x18
			directory_ptr->cluster_l = 0;
    612a:	13 8e       	std	Z+27, r1	; 0x1b
    612c:	12 8e       	std	Z+26, r1	; 0x1a
			directory_ptr->size = 0;
    612e:	14 8e       	std	Z+28, r1	; 0x1c
    6130:	15 8e       	std	Z+29, r1	; 0x1d
    6132:	16 8e       	std	Z+30, r1	; 0x1e
    6134:	17 8e       	std	Z+31, r1	; 0x1f
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    6136:	cf 01       	movw	r24, r30
    6138:	8f 5d       	subi	r24, 0xDF	; 223
    613a:	93 40       	sbci	r25, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    613c:	80 70       	andi	r24, 0x00	; 0
    613e:	9e 7f       	andi	r25, 0xFE	; 254
    6140:	89 2b       	or	r24, r25
    6142:	19 f4       	brne	.+6      	; 0x614a <dir_name_add+0x5f6>
		{
			cache_dirty[index]=TRUE;
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	80 93 e3 05 	sts	0x05E3, r24
			fatcache_dirty(directory_ptr);
			
			lfn_checksum = dir_lfn_checksum(directory_ptr);
    614a:	cf 01       	movw	r24, r30
    614c:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <dir_lfn_checksum>
    6150:	8d 8b       	std	Y+21, r24	; 0x15
			
			DEBUG_P(PSTR("FAT32 - Add entry, main entry added at index "));
    6152:	80 91 90 02 	lds	r24, 0x0290
    6156:	90 91 91 02 	lds	r25, 0x0291
    615a:	66 e3       	ldi	r22, 0x36	; 54
    615c:	7f e0       	ldi	r23, 0x0F	; 15
    615e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG((unsigned long)index);
    6162:	c0 90 90 02 	lds	r12, 0x0290
    6166:	d0 90 91 02 	lds	r13, 0x0291
    616a:	b5 01       	movw	r22, r10
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	90 e0       	ldi	r25, 0x00	; 0
    6170:	46 ea       	ldi	r20, 0xA6	; 166
    6172:	52 e0       	ldi	r21, 0x02	; 2
    6174:	2a e0       	ldi	r18, 0x0A	; 10
    6176:	00 e0       	ldi	r16, 0x00	; 0
    6178:	ee 24       	eor	r14, r14
    617a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    617e:	bc 01       	movw	r22, r24
    6180:	c6 01       	movw	r24, r12
    6182:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    6186:	80 91 90 02 	lds	r24, 0x0290
    618a:	90 91 91 02 	lds	r25, 0x0291
    618e:	63 e3       	ldi	r22, 0x33	; 51
    6190:	7f e0       	ldi	r23, 0x0F	; 15
    6192:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    6196:	27 c0       	rjmp	.+78     	; 0x61e6 <dir_name_add+0x692>
    6198:	ff 24       	eor	r15, r15
		}
		else
		{
			DEBUG_P(PSTR("FAT32 - Add entry, ERROR, failed to write main entry at index "));
    619a:	80 91 90 02 	lds	r24, 0x0290
    619e:	90 91 91 02 	lds	r25, 0x0291
    61a2:	64 ef       	ldi	r22, 0xF4	; 244
    61a4:	7e e0       	ldi	r23, 0x0E	; 14
    61a6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
			DEBUG_ULONG((unsigned long)index);
    61aa:	c0 90 90 02 	lds	r12, 0x0290
    61ae:	d0 90 91 02 	lds	r13, 0x0291
    61b2:	b5 01       	movw	r22, r10
    61b4:	80 e0       	ldi	r24, 0x00	; 0
    61b6:	90 e0       	ldi	r25, 0x00	; 0
    61b8:	46 ea       	ldi	r20, 0xA6	; 166
    61ba:	52 e0       	ldi	r21, 0x02	; 2
    61bc:	2a e0       	ldi	r18, 0x0A	; 10
    61be:	00 e0       	ldi	r16, 0x00	; 0
    61c0:	ee 24       	eor	r14, r14
    61c2:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    61c6:	bc 01       	movw	r22, r24
    61c8:	c6 01       	movw	r24, r12
    61ca:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
			DEBUG_P(PSTR("\r\n"));
    61ce:	80 91 90 02 	lds	r24, 0x0290
    61d2:	90 91 91 02 	lds	r25, 0x0291
    61d6:	61 ef       	ldi	r22, 0xF1	; 241
    61d8:	7e e0       	ldi	r23, 0x0E	; 14
    61da:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		};
		
		//index to first entry (first lfn)
		index -= entries_needed-1;
		
		if(success)
    61de:	ff 20       	and	r15, r15
    61e0:	09 f4       	brne	.+2      	; 0x61e4 <dir_name_add+0x690>
    61e2:	ec c0       	rjmp	.+472    	; 0x63bc <dir_name_add+0x868>
    61e4:	1d 8a       	std	Y+21, r1	; 0x15
		{	
			//need LFN?
			if(entries_needed > 1)
    61e6:	bb 89       	ldd	r27, Y+19	; 0x13
    61e8:	b2 30       	cpi	r27, 0x02	; 2
    61ea:	08 f4       	brcc	.+2      	; 0x61ee <dir_name_add+0x69a>
    61ec:	e7 c0       	rjmp	.+462    	; 0x63bc <dir_name_add+0x868>
			DEBUG_ULONG((unsigned long)index);
			DEBUG_P(PSTR("\r\n"));
		};
		
		//index to first entry (first lfn)
		index -= entries_needed-1;
    61ee:	a8 18       	sub	r10, r8
    61f0:	b9 08       	sbc	r11, r9
    61f2:	08 94       	sec
    61f4:	a1 1c       	adc	r10, r1
    61f6:	b1 1c       	adc	r11, r1
		if(success)
		{	
			//need LFN?
			if(entries_needed > 1)
			{
				lfn_sequence = 0x3F + entries_needed;
    61f8:	b1 5c       	subi	r27, 0xC1	; 193
    61fa:	bc 8b       	std	Y+20, r27	; 0x14
    61fc:	d9 c0       	rjmp	.+434    	; 0x63b0 <dir_name_add+0x85c>
				
				while(lfn_sequence && success)
				{
					//create LFN					
					lfn_ptr = (struct lfn_struct*)dir_entry_get_ptr(current_directory, index);
    61fe:	c3 01       	movw	r24, r6
    6200:	b2 01       	movw	r22, r4
    6202:	a5 01       	movw	r20, r10
    6204:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6208:	fc 01       	movw	r30, r24
					
					if(lfn_ptr)
    620a:	00 97       	sbiw	r24, 0x00	; 0
    620c:	09 f4       	brne	.+2      	; 0x6210 <dir_name_add+0x6bc>
    620e:	ad c0       	rjmp	.+346    	; 0x636a <dir_name_add+0x816>
					{							
						lfn_ptr->sequence = lfn_sequence;
    6210:	cc 88       	ldd	r12, Y+20	; 0x14
    6212:	c0 82       	st	Z, r12
						lfn_ptr->attributes = 0x0F;
    6214:	1f e0       	ldi	r17, 0x0F	; 15
    6216:	d1 2e       	mov	r13, r17
    6218:	d3 86       	std	Z+11, r13	; 0x0b
						lfn_ptr->reserved1 = 0;
    621a:	14 86       	std	Z+12, r1	; 0x0c
						lfn_ptr->checksum = lfn_checksum;
    621c:	2d 89       	ldd	r18, Y+21	; 0x15
    621e:	25 87       	std	Z+13, r18	; 0x0d
						lfn_ptr->reserved2 = LEND_UINT_WRITE(0);
    6220:	13 8e       	std	Z+27, r1	; 0x1b
    6222:	12 8e       	std	Z+26, r1	; 0x1a
static void dir_lfn_text_write(struct lfn_struct *lfn_ptr, char* name, char sequence)
{
	int *tempint_ptr;
	char terminated=FALSE;
	
	sequence &=0x3F;
    6224:	4c 89       	ldd	r20, Y+20	; 0x14
    6226:	4f 73       	andi	r20, 0x3F	; 63
    6228:	4a 8b       	std	Y+18, r20	; 0x12
	
	//address text for this part of sequence
	name=&name[(sequence-1)*13];
    622a:	8d e0       	ldi	r24, 0x0D	; 13
    622c:	48 9f       	mul	r20, r24
    622e:	90 01       	movw	r18, r0
    6230:	11 24       	eor	r1, r1
    6232:	2d 50       	subi	r18, 0x0D	; 13
    6234:	30 40       	sbci	r19, 0x00	; 0
    6236:	af 89       	ldd	r26, Y+23	; 0x17
    6238:	b8 8d       	ldd	r27, Y+24	; 0x18
    623a:	2a 0f       	add	r18, r26
    623c:	3b 1f       	adc	r19, r27
			terminated=TRUE;
		
		//increment int pointer through lfn fields
		tempint_ptr++;
		if(tempint_ptr == &lfn_ptr->name_first[5])
			tempint_ptr=lfn_ptr->name_middle;
    623e:	be e0       	ldi	r27, 0x0E	; 14
    6240:	2b 2e       	mov	r2, r27
    6242:	31 2c       	mov	r3, r1
    6244:	2e 0e       	add	r2, r30
    6246:	3f 1e       	adc	r3, r31
		if(tempint_ptr == &lfn_ptr->name_middle[6])
    6248:	aa e1       	ldi	r26, 0x1A	; 26
    624a:	8a 2e       	mov	r8, r26
    624c:	91 2c       	mov	r9, r1
    624e:	8e 0e       	add	r8, r30
    6250:	9f 1e       	adc	r9, r31
			tempint_ptr=lfn_ptr->name_last;
    6252:	8f 01       	movw	r16, r30
    6254:	04 5e       	subi	r16, 0xE4	; 228
    6256:	1f 4f       	sbci	r17, 0xFF	; 255
		
	}while(tempint_ptr != &lfn_ptr->name_last[2]);
    6258:	bf 01       	movw	r22, r30
    625a:	60 5e       	subi	r22, 0xE0	; 224
    625c:	7f 4f       	sbci	r23, 0xFF	; 255
    625e:	cf 01       	movw	r24, r30
    6260:	01 96       	adiw	r24, 0x01	; 1
    6262:	9c 8f       	std	Y+28, r25	; 0x1c
    6264:	8b 8f       	std	Y+27, r24	; 0x1b
    6266:	90 e0       	ldi	r25, 0x00	; 0
		else
			terminated=TRUE;
		
		//increment int pointer through lfn fields
		tempint_ptr++;
		if(tempint_ptr == &lfn_ptr->name_first[5])
    6268:	af 01       	movw	r20, r30
    626a:	45 5f       	subi	r20, 0xF5	; 245
    626c:	5f 4f       	sbci	r21, 0xFF	; 255
	tempint_ptr = lfn_ptr->name_first;
	
	do
	{
		//transfer character, fill unused entries with 0xFFFF
		if(terminated)
    626e:	99 23       	and	r25, r25
    6270:	41 f0       	breq	.+16     	; 0x6282 <dir_name_add+0x72e>
			*tempint_ptr = LEND_UINT_WRITE(0xFFFF);
    6272:	cc 24       	eor	r12, r12
    6274:	ca 94       	dec	r12
    6276:	dc 2c       	mov	r13, r12
    6278:	ab 8d       	ldd	r26, Y+27	; 0x1b
    627a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    627c:	cd 92       	st	X+, r12
    627e:	dc 92       	st	X, r13
    6280:	07 c0       	rjmp	.+14     	; 0x6290 <dir_name_add+0x73c>
		else
			*tempint_ptr = LEND_UINT_WRITE((unsigned int)(*name));
    6282:	d9 01       	movw	r26, r18
    6284:	8c 91       	ld	r24, X
    6286:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6288:	bc 8d       	ldd	r27, Y+28	; 0x1c
    628a:	8c 93       	st	X, r24
    628c:	11 96       	adiw	r26, 0x01	; 1
    628e:	1c 92       	st	X, r1
		
		//if not terminator, point to next char, else write terminator to remaining fields
		if(*name)
    6290:	d9 01       	movw	r26, r18
    6292:	8c 91       	ld	r24, X
    6294:	88 23       	and	r24, r24
    6296:	11 f4       	brne	.+4      	; 0x629c <dir_name_add+0x748>
    6298:	91 e0       	ldi	r25, 0x01	; 1
    629a:	02 c0       	rjmp	.+4      	; 0x62a0 <dir_name_add+0x74c>
			name++;
    629c:	2f 5f       	subi	r18, 0xFF	; 255
    629e:	3f 4f       	sbci	r19, 0xFF	; 255
		else
			terminated=TRUE;
		
		//increment int pointer through lfn fields
		tempint_ptr++;
    62a0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    62a2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    62a4:	12 96       	adiw	r26, 0x02	; 2
    62a6:	bc 8f       	std	Y+28, r27	; 0x1c
    62a8:	ab 8f       	std	Y+27, r26	; 0x1b
		if(tempint_ptr == &lfn_ptr->name_first[5])
    62aa:	a4 17       	cp	r26, r20
    62ac:	b5 07       	cpc	r27, r21
    62ae:	11 f4       	brne	.+4      	; 0x62b4 <dir_name_add+0x760>
    62b0:	3c 8e       	std	Y+28, r3	; 0x1c
    62b2:	2b 8e       	std	Y+27, r2	; 0x1b
			tempint_ptr=lfn_ptr->name_middle;
		if(tempint_ptr == &lfn_ptr->name_middle[6])
    62b4:	cb 8c       	ldd	r12, Y+27	; 0x1b
    62b6:	dc 8c       	ldd	r13, Y+28	; 0x1c
    62b8:	c8 14       	cp	r12, r8
    62ba:	d9 04       	cpc	r13, r9
    62bc:	11 f4       	brne	.+4      	; 0x62c2 <dir_name_add+0x76e>
    62be:	1c 8f       	std	Y+28, r17	; 0x1c
    62c0:	0b 8f       	std	Y+27, r16	; 0x1b
			tempint_ptr=lfn_ptr->name_last;
		
	}while(tempint_ptr != &lfn_ptr->name_last[2]);
    62c2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    62c4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    62c6:	a6 17       	cp	r26, r22
    62c8:	b7 07       	cpc	r27, r23
    62ca:	89 f6       	brne	.-94     	; 0x626e <dir_name_add+0x71a>
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    62cc:	ef 5d       	subi	r30, 0xDF	; 223
    62ce:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    62d0:	e0 70       	andi	r30, 0x00	; 0
    62d2:	fe 7f       	andi	r31, 0xFE	; 254
    62d4:	ef 2b       	or	r30, r31
    62d6:	19 f4       	brne	.+6      	; 0x62de <dir_name_add+0x78a>
		{
			cache_dirty[index]=TRUE;
    62d8:	b1 e0       	ldi	r27, 0x01	; 1
    62da:	b0 93 e3 05 	sts	0x05E3, r27
						lfn_ptr->checksum = lfn_checksum;
						lfn_ptr->reserved2 = LEND_UINT_WRITE(0);
						dir_lfn_text_write(lfn_ptr, name, lfn_sequence);
						fatcache_dirty(lfn_ptr);
						
						DEBUG_P(PSTR("FAT32 - Add entry, LFN entry seq="));
    62de:	80 91 90 02 	lds	r24, 0x0290
    62e2:	90 91 91 02 	lds	r25, 0x0291
    62e6:	6f ec       	ldi	r22, 0xCF	; 207
    62e8:	7e e0       	ldi	r23, 0x0E	; 14
    62ea:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						DEBUG_HEX(lfn_sequence);
    62ee:	c0 90 90 02 	lds	r12, 0x0290
    62f2:	d0 90 91 02 	lds	r13, 0x0291
    62f6:	ec 89       	ldd	r30, Y+20	; 0x14
    62f8:	6e 2f       	mov	r22, r30
    62fa:	70 e0       	ldi	r23, 0x00	; 0
    62fc:	80 e0       	ldi	r24, 0x00	; 0
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	46 ea       	ldi	r20, 0xA6	; 166
    6302:	52 e0       	ldi	r21, 0x02	; 2
    6304:	20 e1       	ldi	r18, 0x10	; 16
    6306:	02 e0       	ldi	r16, 0x02	; 2
    6308:	e0 e3       	ldi	r30, 0x30	; 48
    630a:	ee 2e       	mov	r14, r30
    630c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    6310:	bc 01       	movw	r22, r24
    6312:	c6 01       	movw	r24, r12
    6314:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
						DEBUG_P(PSTR(" added at index "));
    6318:	80 91 90 02 	lds	r24, 0x0290
    631c:	90 91 91 02 	lds	r25, 0x0291
    6320:	6e eb       	ldi	r22, 0xBE	; 190
    6322:	7e e0       	ldi	r23, 0x0E	; 14
    6324:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						DEBUG_ULONG((unsigned long)index);
    6328:	c0 90 90 02 	lds	r12, 0x0290
    632c:	d0 90 91 02 	lds	r13, 0x0291
    6330:	b5 01       	movw	r22, r10
    6332:	80 e0       	ldi	r24, 0x00	; 0
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	46 ea       	ldi	r20, 0xA6	; 166
    6338:	52 e0       	ldi	r21, 0x02	; 2
    633a:	2a e0       	ldi	r18, 0x0A	; 10
    633c:	00 e0       	ldi	r16, 0x00	; 0
    633e:	ee 24       	eor	r14, r14
    6340:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    6344:	bc 01       	movw	r22, r24
    6346:	c6 01       	movw	r24, r12
    6348:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
						DEBUG_P(PSTR("\r\n"));
    634c:	80 91 90 02 	lds	r24, 0x0290
    6350:	90 91 91 02 	lds	r25, 0x0291
    6354:	6b eb       	ldi	r22, 0xBB	; 187
    6356:	7e e0       	ldi	r23, 0x0E	; 14
    6358:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						lfn_sequence &=0x3F;
						lfn_sequence --;			
    635c:	fa 89       	ldd	r31, Y+18	; 0x12
    635e:	f1 50       	subi	r31, 0x01	; 1
    6360:	fc 8b       	std	Y+20, r31	; 0x14
						index++;
    6362:	08 94       	sec
    6364:	a1 1c       	adc	r10, r1
    6366:	b1 1c       	adc	r11, r1
    6368:	23 c0       	rjmp	.+70     	; 0x63b0 <dir_name_add+0x85c>
					}
					else
					{
						success=FALSE;
						DEBUG_P(PSTR("FAT32 - Add entry, ERROR, failed to write LFN entry at index "));
    636a:	80 91 90 02 	lds	r24, 0x0290
    636e:	90 91 91 02 	lds	r25, 0x0291
    6372:	6d e7       	ldi	r22, 0x7D	; 125
    6374:	7e e0       	ldi	r23, 0x0E	; 14
    6376:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
						DEBUG_ULONG((unsigned long)index);
    637a:	c0 90 90 02 	lds	r12, 0x0290
    637e:	d0 90 91 02 	lds	r13, 0x0291
    6382:	b5 01       	movw	r22, r10
    6384:	80 e0       	ldi	r24, 0x00	; 0
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	46 ea       	ldi	r20, 0xA6	; 166
    638a:	52 e0       	ldi	r21, 0x02	; 2
    638c:	2a e0       	ldi	r18, 0x0A	; 10
    638e:	00 e0       	ldi	r16, 0x00	; 0
    6390:	ee 24       	eor	r14, r14
    6392:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    6396:	bc 01       	movw	r22, r24
    6398:	c6 01       	movw	r24, r12
    639a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
						DEBUG_P(PSTR("\r\n"));
    639e:	80 91 90 02 	lds	r24, 0x0290
    63a2:	90 91 91 02 	lds	r25, 0x0291
    63a6:	6a e7       	ldi	r22, 0x7A	; 122
    63a8:	7e e0       	ldi	r23, 0x0E	; 14
    63aa:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    63ae:	ff 24       	eor	r15, r15
			//need LFN?
			if(entries_needed > 1)
			{
				lfn_sequence = 0x3F + entries_needed;
				
				while(lfn_sequence && success)
    63b0:	cc 88       	ldd	r12, Y+20	; 0x14
    63b2:	cc 20       	and	r12, r12
    63b4:	19 f0       	breq	.+6      	; 0x63bc <dir_name_add+0x868>
    63b6:	ff 20       	and	r15, r15
    63b8:	09 f0       	breq	.+2      	; 0x63bc <dir_name_add+0x868>
    63ba:	21 cf       	rjmp	.-446    	; 0x61fe <dir_name_add+0x6aa>
				};
			};
		};
	};
	return success;
}
    63bc:	8f 2d       	mov	r24, r15
    63be:	6c 96       	adiw	r28, 0x1c	; 28
    63c0:	0f b6       	in	r0, 0x3f	; 63
    63c2:	f8 94       	cli
    63c4:	de bf       	out	0x3e, r29	; 62
    63c6:	0f be       	out	0x3f, r0	; 63
    63c8:	cd bf       	out	0x3d, r28	; 61
    63ca:	cf 91       	pop	r28
    63cc:	df 91       	pop	r29
    63ce:	1f 91       	pop	r17
    63d0:	0f 91       	pop	r16
    63d2:	ff 90       	pop	r15
    63d4:	ef 90       	pop	r14
    63d6:	df 90       	pop	r13
    63d8:	cf 90       	pop	r12
    63da:	bf 90       	pop	r11
    63dc:	af 90       	pop	r10
    63de:	9f 90       	pop	r9
    63e0:	8f 90       	pop	r8
    63e2:	7f 90       	pop	r7
    63e4:	6f 90       	pop	r6
    63e6:	5f 90       	pop	r5
    63e8:	4f 90       	pop	r4
    63ea:	3f 90       	pop	r3
    63ec:	2f 90       	pop	r2
    63ee:	08 95       	ret

000063f0 <fat_directory_create>:

/*
create a new sub-directory under the current directory, returns success
*/
char fat_directory_create(unsigned long parent_directory, char* name)
{
    63f0:	4f 92       	push	r4
    63f2:	5f 92       	push	r5
    63f4:	6f 92       	push	r6
    63f6:	7f 92       	push	r7
    63f8:	8f 92       	push	r8
    63fa:	9f 92       	push	r9
    63fc:	af 92       	push	r10
    63fe:	bf 92       	push	r11
    6400:	cf 92       	push	r12
    6402:	df 92       	push	r13
    6404:	ef 92       	push	r14
    6406:	ff 92       	push	r15
    6408:	0f 93       	push	r16
    640a:	1f 93       	push	r17
    640c:	df 93       	push	r29
    640e:	cf 93       	push	r28
    6410:	00 d0       	rcall	.+0      	; 0x6412 <fat_directory_create+0x22>
    6412:	cd b7       	in	r28, 0x3d	; 61
    6414:	de b7       	in	r29, 0x3e	; 62
    6416:	2b 01       	movw	r4, r22
    6418:	3c 01       	movw	r6, r24
    641a:	ca 01       	movw	r24, r20
	unsigned int index;
	struct directory_struct *directory_ptr;
	unsigned long child_directory=0;

	//create parent directorys entry for child directorys name
	success=dir_name_add(name, parent_directory, &index);
    641c:	b3 01       	movw	r22, r6
    641e:	a2 01       	movw	r20, r4
    6420:	9e 01       	movw	r18, r28
    6422:	2f 5f       	subi	r18, 0xFF	; 255
    6424:	3f 4f       	sbci	r19, 0xFF	; 255
    6426:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <dir_name_add>

	//create new chain to hold child directory
	if(success)
    642a:	88 23       	and	r24, r24
    642c:	09 f4       	brne	.+2      	; 0x6430 <fat_directory_create+0x40>
    642e:	ab c0       	rjmp	.+342    	; 0x6586 <fat_directory_create+0x196>
		child_directory=chain_create(1);
    6430:	61 e0       	ldi	r22, 0x01	; 1
    6432:	70 e0       	ldi	r23, 0x00	; 0
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	0e 94 1c 21 	call	0x4238	; 0x4238 <chain_create>
    643c:	4b 01       	movw	r8, r22
    643e:	5c 01       	movw	r10, r24
	if(!child_directory)
    6440:	61 15       	cp	r22, r1
    6442:	71 05       	cpc	r23, r1
    6444:	81 05       	cpc	r24, r1
    6446:	91 05       	cpc	r25, r1
    6448:	09 f4       	brne	.+2      	; 0x644c <fat_directory_create+0x5c>
    644a:	9d c0       	rjmp	.+314    	; 0x6586 <fat_directory_create+0x196>
		success=FALSE;

	//erase new chain to 0's
	if(success)
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, erasing new chain\r\n"));
    644c:	80 91 90 02 	lds	r24, 0x0290
    6450:	90 91 91 02 	lds	r25, 0x0291
    6454:	67 e3       	ldi	r22, 0x37	; 55
    6456:	7c e0       	ldi	r23, 0x0C	; 12
    6458:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    645c:	80 91 96 02 	lds	r24, 0x0296
    6460:	90 91 97 02 	lds	r25, 0x0297
    6464:	a0 91 98 02 	lds	r26, 0x0298
    6468:	b0 91 99 02 	lds	r27, 0x0299
    646c:	88 16       	cp	r8, r24
    646e:	99 06       	cpc	r9, r25
    6470:	aa 06       	cpc	r10, r26
    6472:	bb 06       	cpc	r11, r27
    6474:	c1 f0       	breq	.+48     	; 0x64a6 <fat_directory_create+0xb6>
	{
		chain_ptr->base=cluster;
    6476:	80 92 96 02 	sts	0x0296, r8
    647a:	90 92 97 02 	sts	0x0297, r9
    647e:	a0 92 98 02 	sts	0x0298, r10
    6482:	b0 92 99 02 	sts	0x0299, r11
		chain_ptr->physical=cluster;
    6486:	80 92 9a 02 	sts	0x029A, r8
    648a:	90 92 9b 02 	sts	0x029B, r9
    648e:	a0 92 9c 02 	sts	0x029C, r10
    6492:	b0 92 9d 02 	sts	0x029D, r11
		chain_ptr->logical=0ul;
    6496:	10 92 9e 02 	sts	0x029E, r1
    649a:	10 92 9f 02 	sts	0x029F, r1
    649e:	10 92 a0 02 	sts	0x02A0, r1
    64a2:	10 92 a1 02 	sts	0x02A1, r1
		chain_init(&dir_chain_nav, child_directory);
		success=chain_rw(&dir_chain_nav, NULL, 0ul, ((unsigned long)sectors_per_cluster)<<9, FAT_ERASE);
    64a6:	e0 90 bc 03 	lds	r14, 0x03BC
    64aa:	ff 24       	eor	r15, r15
    64ac:	00 e0       	ldi	r16, 0x00	; 0
    64ae:	10 e0       	ldi	r17, 0x00	; 0
    64b0:	f9 e0       	ldi	r31, 0x09	; 9
    64b2:	ee 0c       	add	r14, r14
    64b4:	ff 1c       	adc	r15, r15
    64b6:	00 1f       	adc	r16, r16
    64b8:	11 1f       	adc	r17, r17
    64ba:	fa 95       	dec	r31
    64bc:	d1 f7       	brne	.-12     	; 0x64b2 <fat_directory_create+0xc2>
    64be:	86 e9       	ldi	r24, 0x96	; 150
    64c0:	92 e0       	ldi	r25, 0x02	; 2
    64c2:	60 e0       	ldi	r22, 0x00	; 0
    64c4:	70 e0       	ldi	r23, 0x00	; 0
    64c6:	20 e0       	ldi	r18, 0x00	; 0
    64c8:	30 e0       	ldi	r19, 0x00	; 0
    64ca:	40 e0       	ldi	r20, 0x00	; 0
    64cc:	50 e0       	ldi	r21, 0x00	; 0
    64ce:	e2 e0       	ldi	r30, 0x02	; 2
    64d0:	ce 2e       	mov	r12, r30
    64d2:	0e 94 24 29 	call	0x5248	; 0x5248 <chain_rw>
	};

	//read child directorys entry in parent directory
	if(success)
    64d6:	88 23       	and	r24, r24
    64d8:	09 f4       	brne	.+2      	; 0x64dc <fat_directory_create+0xec>
    64da:	55 c0       	rjmp	.+170    	; 0x6586 <fat_directory_create+0x196>
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, reading entry in parent DIR\r\n"));
    64dc:	80 91 90 02 	lds	r24, 0x0290
    64e0:	90 91 91 02 	lds	r25, 0x0291
    64e4:	66 e0       	ldi	r22, 0x06	; 6
    64e6:	7c e0       	ldi	r23, 0x0C	; 12
    64e8:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr=dir_entry_get_ptr(parent_directory, index);
    64ec:	49 81       	ldd	r20, Y+1	; 0x01
    64ee:	5a 81       	ldd	r21, Y+2	; 0x02
    64f0:	c3 01       	movw	r24, r6
    64f2:	b2 01       	movw	r22, r4
    64f4:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    64f8:	8c 01       	movw	r16, r24
		if(!directory_ptr)
    64fa:	00 97       	sbiw	r24, 0x00	; 0
    64fc:	09 f0       	breq	.+2      	; 0x6500 <fat_directory_create+0x110>
    64fe:	72 c0       	rjmp	.+228    	; 0x65e4 <fat_directory_create+0x1f4>
    6500:	42 c0       	rjmp	.+132    	; 0x6586 <fat_directory_create+0x196>
    6502:	81 e0       	ldi	r24, 0x01	; 1
    6504:	80 93 e3 05 	sts	0x05E3, r24
		directory_ptr->cluster_h=LEND_UINT_WRITE((unsigned int)(child_directory>>16));
		directory_ptr->cluster_l=LEND_UINT_WRITE((unsigned int)child_directory);
		fatcache_dirty(directory_ptr);
		
		//add child directory entry "."
		success=dir_name_add(".", child_directory, &index);
    6508:	80 e0       	ldi	r24, 0x00	; 0
    650a:	92 e0       	ldi	r25, 0x02	; 2
    650c:	b5 01       	movw	r22, r10
    650e:	a4 01       	movw	r20, r8
    6510:	9e 01       	movw	r18, r28
    6512:	2f 5f       	subi	r18, 0xFF	; 255
    6514:	3f 4f       	sbci	r19, 0xFF	; 255
    6516:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <dir_name_add>
	};

	//read child directorys "." entry
	if(success)
    651a:	88 23       	and	r24, r24
    651c:	a1 f1       	breq	.+104    	; 0x6586 <fat_directory_create+0x196>
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, reading . entry\r\n"));
    651e:	80 91 90 02 	lds	r24, 0x0290
    6522:	90 91 91 02 	lds	r25, 0x0291
    6526:	6d e7       	ldi	r22, 0x7D	; 125
    6528:	7b e0       	ldi	r23, 0x0B	; 11
    652a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr=dir_entry_get_ptr(child_directory, index);
    652e:	49 81       	ldd	r20, Y+1	; 0x01
    6530:	5a 81       	ldd	r21, Y+2	; 0x02
    6532:	c5 01       	movw	r24, r10
    6534:	b4 01       	movw	r22, r8
    6536:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    653a:	8c 01       	movw	r16, r24
		if(!directory_ptr)
    653c:	00 97       	sbiw	r24, 0x00	; 0
    653e:	09 f0       	breq	.+2      	; 0x6542 <fat_directory_create+0x152>
    6540:	79 c0       	rjmp	.+242    	; 0x6634 <fat_directory_create+0x244>
    6542:	21 c0       	rjmp	.+66     	; 0x6586 <fat_directory_create+0x196>
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	80 93 e3 05 	sts	0x05E3, r24
		directory_ptr->cluster_h=LEND_UINT_WRITE((unsigned int)(child_directory>>16));
		directory_ptr->cluster_l=LEND_UINT_WRITE((unsigned int)child_directory);
		fatcache_dirty(directory_ptr);
		
		//add child directory entry ".."
		success=dir_name_add("..", child_directory, &index);
    654a:	82 e0       	ldi	r24, 0x02	; 2
    654c:	92 e0       	ldi	r25, 0x02	; 2
    654e:	b5 01       	movw	r22, r10
    6550:	a4 01       	movw	r20, r8
    6552:	9e 01       	movw	r18, r28
    6554:	2f 5f       	subi	r18, 0xFF	; 255
    6556:	3f 4f       	sbci	r19, 0xFF	; 255
    6558:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <dir_name_add>
    655c:	f8 2e       	mov	r15, r24
	};
	
	//read child directorys ".." entry
	if(success)
    655e:	88 23       	and	r24, r24
    6560:	91 f0       	breq	.+36     	; 0x6586 <fat_directory_create+0x196>
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, reading .. entry\r\n"));
    6562:	80 91 90 02 	lds	r24, 0x0290
    6566:	90 91 91 02 	lds	r25, 0x0291
    656a:	6b ef       	ldi	r22, 0xFB	; 251
    656c:	7a e0       	ldi	r23, 0x0A	; 10
    656e:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr=dir_entry_get_ptr(child_directory, index);
    6572:	49 81       	ldd	r20, Y+1	; 0x01
    6574:	5a 81       	ldd	r21, Y+2	; 0x02
    6576:	c5 01       	movw	r24, r10
    6578:	b4 01       	movw	r22, r8
    657a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    657e:	8c 01       	movw	r16, r24
		if(!directory_ptr)
    6580:	00 97       	sbiw	r24, 0x00	; 0
    6582:	09 f0       	breq	.+2      	; 0x6586 <fat_directory_create+0x196>
    6584:	7a c0       	rjmp	.+244    	; 0x667a <fat_directory_create+0x28a>
    6586:	ff 24       	eor	r15, r15
    6588:	17 c0       	rjmp	.+46     	; 0x65b8 <fat_directory_create+0x1c8>
		DEBUG_P(PSTR("FAT32 - CreateDIR, connecting .. entry to parent chain\r\n"));
		directory_ptr->attributes=0x10;
		directory_ptr->size=0;
		if(parent_directory != 2ul)
		{
			directory_ptr->cluster_h=LEND_UINT_WRITE((unsigned int)(parent_directory>>16));
    658a:	c3 01       	movw	r24, r6
    658c:	aa 27       	eor	r26, r26
    658e:	bb 27       	eor	r27, r27
    6590:	f8 01       	movw	r30, r16
    6592:	95 8b       	std	Z+21, r25	; 0x15
    6594:	84 8b       	std	Z+20, r24	; 0x14
			directory_ptr->cluster_l=LEND_UINT_WRITE((unsigned int)parent_directory);
    6596:	53 8e       	std	Z+27, r5	; 0x1b
    6598:	42 8e       	std	Z+26, r4	; 0x1a
    659a:	05 c0       	rjmp	.+10     	; 0x65a6 <fat_directory_create+0x1b6>
		}
		else
		{
			directory_ptr->cluster_h=0;
    659c:	f8 01       	movw	r30, r16
    659e:	15 8a       	std	Z+21, r1	; 0x15
    65a0:	14 8a       	std	Z+20, r1	; 0x14
			directory_ptr->cluster_l=0;
    65a2:	13 8e       	std	Z+27, r1	; 0x1b
    65a4:	12 8e       	std	Z+26, r1	; 0x1a
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    65a6:	0f 5d       	subi	r16, 0xDF	; 223
    65a8:	13 40       	sbci	r17, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    65aa:	00 70       	andi	r16, 0x00	; 0
    65ac:	1e 7f       	andi	r17, 0xFE	; 254
    65ae:	01 2b       	or	r16, r17
    65b0:	19 f4       	brne	.+6      	; 0x65b8 <fat_directory_create+0x1c8>
		{
			cache_dirty[index]=TRUE;
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	80 93 e3 05 	sts	0x05E3, r24
		};
		fatcache_dirty(directory_ptr);
	};
	
	fatcache_clean();
    65b8:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    65bc:	8f 2d       	mov	r24, r15
    65be:	0f 90       	pop	r0
    65c0:	0f 90       	pop	r0
    65c2:	cf 91       	pop	r28
    65c4:	df 91       	pop	r29
    65c6:	1f 91       	pop	r17
    65c8:	0f 91       	pop	r16
    65ca:	ff 90       	pop	r15
    65cc:	ef 90       	pop	r14
    65ce:	df 90       	pop	r13
    65d0:	cf 90       	pop	r12
    65d2:	bf 90       	pop	r11
    65d4:	af 90       	pop	r10
    65d6:	9f 90       	pop	r9
    65d8:	8f 90       	pop	r8
    65da:	7f 90       	pop	r7
    65dc:	6f 90       	pop	r6
    65de:	5f 90       	pop	r5
    65e0:	4f 90       	pop	r4
    65e2:	08 95       	ret
	};

	//connect child directorys entry in parent directory to child directorys new chain
	if(success)
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, linking entry in parent DIR to new chain\r\n"));
    65e4:	80 91 90 02 	lds	r24, 0x0290
    65e8:	90 91 91 02 	lds	r25, 0x0291
    65ec:	68 ec       	ldi	r22, 0xC8	; 200
    65ee:	7b e0       	ldi	r23, 0x0B	; 11
    65f0:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - CreateDIR, creating . entry\r\n"));
    65f4:	80 91 90 02 	lds	r24, 0x0290
    65f8:	90 91 91 02 	lds	r25, 0x0291
    65fc:	62 ea       	ldi	r22, 0xA2	; 162
    65fe:	7b e0       	ldi	r23, 0x0B	; 11
    6600:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr->attributes=0x10;
    6604:	80 e1       	ldi	r24, 0x10	; 16
    6606:	f8 01       	movw	r30, r16
    6608:	83 87       	std	Z+11, r24	; 0x0b
		directory_ptr->size=0ul;
    660a:	14 8e       	std	Z+28, r1	; 0x1c
    660c:	15 8e       	std	Z+29, r1	; 0x1d
    660e:	16 8e       	std	Z+30, r1	; 0x1e
    6610:	17 8e       	std	Z+31, r1	; 0x1f
		directory_ptr->cluster_h=LEND_UINT_WRITE((unsigned int)(child_directory>>16));
    6612:	c5 01       	movw	r24, r10
    6614:	aa 27       	eor	r26, r26
    6616:	bb 27       	eor	r27, r27
    6618:	6c 01       	movw	r12, r24
    661a:	95 8b       	std	Z+21, r25	; 0x15
    661c:	84 8b       	std	Z+20, r24	; 0x14
		directory_ptr->cluster_l=LEND_UINT_WRITE((unsigned int)child_directory);
    661e:	74 01       	movw	r14, r8
    6620:	93 8e       	std	Z+27, r9	; 0x1b
    6622:	82 8e       	std	Z+26, r8	; 0x1a
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    6624:	0f 5d       	subi	r16, 0xDF	; 223
    6626:	13 40       	sbci	r17, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    6628:	00 70       	andi	r16, 0x00	; 0
    662a:	1e 7f       	andi	r17, 0xFE	; 254
    662c:	01 2b       	or	r16, r17
    662e:	09 f0       	breq	.+2      	; 0x6632 <fat_directory_create+0x242>
    6630:	6b cf       	rjmp	.-298    	; 0x6508 <fat_directory_create+0x118>
    6632:	67 cf       	rjmp	.-306    	; 0x6502 <fat_directory_create+0x112>
	};

	//connect schild directorys "." entry to child directorys chain
	if(success)
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, connecting . entry to new chain\r\n"));
    6634:	80 91 90 02 	lds	r24, 0x0290
    6638:	90 91 91 02 	lds	r25, 0x0291
    663c:	68 e4       	ldi	r22, 0x48	; 72
    663e:	7b e0       	ldi	r23, 0x0B	; 11
    6640:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_P(PSTR("FAT32 - CreateDIR, creating .. entry\r\n"));
    6644:	80 91 90 02 	lds	r24, 0x0290
    6648:	90 91 91 02 	lds	r25, 0x0291
    664c:	61 e2       	ldi	r22, 0x21	; 33
    664e:	7b e0       	ldi	r23, 0x0B	; 11
    6650:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr->attributes=0x10;
    6654:	80 e1       	ldi	r24, 0x10	; 16
    6656:	f8 01       	movw	r30, r16
    6658:	83 87       	std	Z+11, r24	; 0x0b
		directory_ptr->size=0;
    665a:	14 8e       	std	Z+28, r1	; 0x1c
    665c:	15 8e       	std	Z+29, r1	; 0x1d
    665e:	16 8e       	std	Z+30, r1	; 0x1e
    6660:	17 8e       	std	Z+31, r1	; 0x1f
		directory_ptr->cluster_h=LEND_UINT_WRITE((unsigned int)(child_directory>>16));
    6662:	d5 8a       	std	Z+21, r13	; 0x15
    6664:	c4 8a       	std	Z+20, r12	; 0x14
		directory_ptr->cluster_l=LEND_UINT_WRITE((unsigned int)child_directory);
    6666:	f3 8e       	std	Z+27, r15	; 0x1b
    6668:	e2 8e       	std	Z+26, r14	; 0x1a
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    666a:	0f 5d       	subi	r16, 0xDF	; 223
    666c:	13 40       	sbci	r17, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    666e:	00 70       	andi	r16, 0x00	; 0
    6670:	1e 7f       	andi	r17, 0xFE	; 254
    6672:	01 2b       	or	r16, r17
    6674:	09 f0       	breq	.+2      	; 0x6678 <fat_directory_create+0x288>
    6676:	69 cf       	rjmp	.-302    	; 0x654a <fat_directory_create+0x15a>
    6678:	65 cf       	rjmp	.-310    	; 0x6544 <fat_directory_create+0x154>
	};
	
	//connect child directorys ".." entry to parent directorys chain
	if(success)
	{
		DEBUG_P(PSTR("FAT32 - CreateDIR, connecting .. entry to parent chain\r\n"));
    667a:	80 91 90 02 	lds	r24, 0x0290
    667e:	90 91 91 02 	lds	r25, 0x0291
    6682:	62 ec       	ldi	r22, 0xC2	; 194
    6684:	7a e0       	ldi	r23, 0x0A	; 10
    6686:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		directory_ptr->attributes=0x10;
    668a:	80 e1       	ldi	r24, 0x10	; 16
    668c:	f8 01       	movw	r30, r16
    668e:	83 87       	std	Z+11, r24	; 0x0b
		directory_ptr->size=0;
    6690:	14 8e       	std	Z+28, r1	; 0x1c
    6692:	15 8e       	std	Z+29, r1	; 0x1d
    6694:	16 8e       	std	Z+30, r1	; 0x1e
    6696:	17 8e       	std	Z+31, r1	; 0x1f
		if(parent_directory != 2ul)
    6698:	f2 e0       	ldi	r31, 0x02	; 2
    669a:	4f 16       	cp	r4, r31
    669c:	51 04       	cpc	r5, r1
    669e:	61 04       	cpc	r6, r1
    66a0:	71 04       	cpc	r7, r1
    66a2:	09 f0       	breq	.+2      	; 0x66a6 <fat_directory_create+0x2b6>
    66a4:	72 cf       	rjmp	.-284    	; 0x658a <fat_directory_create+0x19a>
    66a6:	7a cf       	rjmp	.-268    	; 0x659c <fat_directory_create+0x1ac>

000066a8 <fat_file_create>:
/*
pass this a pointer to a structure containing the current directory cluster#, and the file size
if successful, this will return file chain, and it's index in the directory.
*/
char fat_file_create(struct fat_file_struct *file_info_ptr, unsigned long directory, char* name, unsigned long size)
{
    66a8:	9f 92       	push	r9
    66aa:	af 92       	push	r10
    66ac:	bf 92       	push	r11
    66ae:	cf 92       	push	r12
    66b0:	df 92       	push	r13
    66b2:	ef 92       	push	r14
    66b4:	ff 92       	push	r15
    66b6:	0f 93       	push	r16
    66b8:	1f 93       	push	r17
    66ba:	cf 93       	push	r28
    66bc:	df 93       	push	r29
    66be:	ec 01       	movw	r28, r24
    66c0:	c9 01       	movw	r24, r18
    66c2:	57 01       	movw	r10, r14
    66c4:	68 01       	movw	r12, r16
	char success;
	struct directory_struct *directory_ptr;
	unsigned long file_cluster = 0;
	
	file_info_ptr->cluster_directory = directory;
    66c6:	4c 87       	std	Y+12, r20	; 0x0c
    66c8:	5d 87       	std	Y+13, r21	; 0x0d
    66ca:	6e 87       	std	Y+14, r22	; 0x0e
    66cc:	7f 87       	std	Y+15, r23	; 0x0f
	file_info_ptr->size=size;
    66ce:	e8 8a       	std	Y+16, r14	; 0x10
    66d0:	f9 8a       	std	Y+17, r15	; 0x11
    66d2:	0a 8b       	std	Y+18, r16	; 0x12
    66d4:	1b 8b       	std	Y+19, r17	; 0x13
	
	//create directory entry
	success = dir_name_add(name, file_info_ptr->cluster_directory, &file_info_ptr->directory_index);
    66d6:	9e 01       	movw	r18, r28
    66d8:	2c 5e       	subi	r18, 0xEC	; 236
    66da:	3f 4f       	sbci	r19, 0xFF	; 255
    66dc:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <dir_name_add>
    66e0:	98 2e       	mov	r9, r24
	if(success)
    66e2:	88 23       	and	r24, r24
    66e4:	09 f4       	brne	.+2      	; 0x66e8 <fat_file_create+0x40>
    66e6:	7b c0       	rjmp	.+246    	; 0x67de <fat_file_create+0x136>
	{
		//create file chain, if required
		if(file_info_ptr->size)
    66e8:	28 89       	ldd	r18, Y+16	; 0x10
    66ea:	39 89       	ldd	r19, Y+17	; 0x11
    66ec:	4a 89       	ldd	r20, Y+18	; 0x12
    66ee:	5b 89       	ldd	r21, Y+19	; 0x13
    66f0:	21 15       	cp	r18, r1
    66f2:	31 05       	cpc	r19, r1
    66f4:	41 05       	cpc	r20, r1
    66f6:	51 05       	cpc	r21, r1
    66f8:	a9 f1       	breq	.+106    	; 0x6764 <fat_file_create+0xbc>
// return how many clusters are required to hold X amount of bytes
static unsigned long clusters_to_hold_bytes(unsigned long bytes)
{
	if(bytes)
	{
		bytes-=1;
    66fa:	21 50       	subi	r18, 0x01	; 1
    66fc:	30 40       	sbci	r19, 0x00	; 0
    66fe:	40 40       	sbci	r20, 0x00	; 0
    6700:	50 40       	sbci	r21, 0x00	; 0
		bytes >>= sectors_per_cluster_power+9;	// divide by (sectors per cluster * bytes per sector)
    6702:	80 91 95 02 	lds	r24, 0x0295
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	09 96       	adiw	r24, 0x09	; 9
    670a:	04 c0       	rjmp	.+8      	; 0x6714 <fat_file_create+0x6c>
    670c:	56 95       	lsr	r21
    670e:	47 95       	ror	r20
    6710:	37 95       	ror	r19
    6712:	27 95       	ror	r18
    6714:	8a 95       	dec	r24
    6716:	d2 f7       	brpl	.-12     	; 0x670c <fat_file_create+0x64>
		{
			file_cluster=chain_create(clusters_to_hold_bytes(file_info_ptr->size));
    6718:	2f 5f       	subi	r18, 0xFF	; 255
    671a:	3f 4f       	sbci	r19, 0xFF	; 255
    671c:	4f 4f       	sbci	r20, 0xFF	; 255
    671e:	5f 4f       	sbci	r21, 0xFF	; 255
    6720:	ca 01       	movw	r24, r20
    6722:	b9 01       	movw	r22, r18
    6724:	0e 94 1c 21 	call	0x4238	; 0x4238 <chain_create>
    6728:	7b 01       	movw	r14, r22
    672a:	8c 01       	movw	r16, r24
			if(!file_cluster)
    672c:	61 15       	cp	r22, r1
    672e:	71 05       	cpc	r23, r1
    6730:	81 05       	cpc	r24, r1
    6732:	91 05       	cpc	r25, r1
    6734:	09 f4       	brne	.+2      	; 0x6738 <fat_file_create+0x90>
    6736:	52 c0       	rjmp	.+164    	; 0x67dc <fat_file_create+0x134>
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    6738:	88 81       	ld	r24, Y
    673a:	99 81       	ldd	r25, Y+1	; 0x01
    673c:	aa 81       	ldd	r26, Y+2	; 0x02
    673e:	bb 81       	ldd	r27, Y+3	; 0x03
    6740:	e8 16       	cp	r14, r24
    6742:	f9 06       	cpc	r15, r25
    6744:	0a 07       	cpc	r16, r26
    6746:	1b 07       	cpc	r17, r27
    6748:	21 f1       	breq	.+72     	; 0x6792 <fat_file_create+0xea>
	{
		chain_ptr->base=cluster;
    674a:	e8 82       	st	Y, r14
    674c:	f9 82       	std	Y+1, r15	; 0x01
    674e:	0a 83       	std	Y+2, r16	; 0x02
    6750:	1b 83       	std	Y+3, r17	; 0x03
		chain_ptr->physical=cluster;
    6752:	ec 82       	std	Y+4, r14	; 0x04
    6754:	fd 82       	std	Y+5, r15	; 0x05
    6756:	0e 83       	std	Y+6, r16	; 0x06
    6758:	1f 83       	std	Y+7, r17	; 0x07
		chain_ptr->logical=0ul;
    675a:	18 86       	std	Y+8, r1	; 0x08
    675c:	19 86       	std	Y+9, r1	; 0x09
    675e:	1a 86       	std	Y+10, r1	; 0x0a
    6760:	1b 86       	std	Y+11, r1	; 0x0b
    6762:	17 c0       	rjmp	.+46     	; 0x6792 <fat_file_create+0xea>
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    6764:	88 81       	ld	r24, Y
    6766:	99 81       	ldd	r25, Y+1	; 0x01
    6768:	aa 81       	ldd	r26, Y+2	; 0x02
    676a:	bb 81       	ldd	r27, Y+3	; 0x03
    676c:	00 97       	sbiw	r24, 0x00	; 0
    676e:	a1 05       	cpc	r26, r1
    6770:	b1 05       	cpc	r27, r1
    6772:	61 f0       	breq	.+24     	; 0x678c <fat_file_create+0xe4>
	{
		chain_ptr->base=cluster;
    6774:	18 82       	st	Y, r1
    6776:	19 82       	std	Y+1, r1	; 0x01
    6778:	1a 82       	std	Y+2, r1	; 0x02
    677a:	1b 82       	std	Y+3, r1	; 0x03
		chain_ptr->physical=cluster;
    677c:	1c 82       	std	Y+4, r1	; 0x04
    677e:	1d 82       	std	Y+5, r1	; 0x05
    6780:	1e 82       	std	Y+6, r1	; 0x06
    6782:	1f 82       	std	Y+7, r1	; 0x07
		chain_ptr->logical=0ul;
    6784:	18 86       	std	Y+8, r1	; 0x08
    6786:	19 86       	std	Y+9, r1	; 0x09
    6788:	1a 86       	std	Y+10, r1	; 0x0a
    678a:	1b 86       	std	Y+11, r1	; 0x0b
    678c:	ee 24       	eor	r14, r14
    678e:	ff 24       	eor	r15, r15
    6790:	87 01       	movw	r16, r14
			chain_init(&file_info_ptr->chain, 0ul);
		
		//update directory entry with file info
		if(success)
		{
			if((directory_ptr=dir_entry_get_ptr(file_info_ptr->cluster_directory, file_info_ptr->directory_index)))
    6792:	6c 85       	ldd	r22, Y+12	; 0x0c
    6794:	7d 85       	ldd	r23, Y+13	; 0x0d
    6796:	8e 85       	ldd	r24, Y+14	; 0x0e
    6798:	9f 85       	ldd	r25, Y+15	; 0x0f
    679a:	4c 89       	ldd	r20, Y+20	; 0x14
    679c:	5d 89       	ldd	r21, Y+21	; 0x15
    679e:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    67a2:	fc 01       	movw	r30, r24
    67a4:	00 97       	sbiw	r24, 0x00	; 0
    67a6:	d1 f0       	breq	.+52     	; 0x67dc <fat_file_create+0x134>
			{
				directory_ptr->attributes=0x00;
    67a8:	13 86       	std	Z+11, r1	; 0x0b
				directory_ptr->size = LEND_ULONG_WRITE(file_info_ptr->size);
    67aa:	88 89       	ldd	r24, Y+16	; 0x10
    67ac:	99 89       	ldd	r25, Y+17	; 0x11
    67ae:	aa 89       	ldd	r26, Y+18	; 0x12
    67b0:	bb 89       	ldd	r27, Y+19	; 0x13
    67b2:	84 8f       	std	Z+28, r24	; 0x1c
    67b4:	95 8f       	std	Z+29, r25	; 0x1d
    67b6:	a6 8f       	std	Z+30, r26	; 0x1e
    67b8:	b7 8f       	std	Z+31, r27	; 0x1f
				directory_ptr->cluster_h = LEND_UINT_WRITE((unsigned int)(file_cluster>>16));
    67ba:	c8 01       	movw	r24, r16
    67bc:	aa 27       	eor	r26, r26
    67be:	bb 27       	eor	r27, r27
    67c0:	95 8b       	std	Z+21, r25	; 0x15
    67c2:	84 8b       	std	Z+20, r24	; 0x14
				directory_ptr->cluster_l = LEND_UINT_WRITE((unsigned int)file_cluster);
    67c4:	f3 8e       	std	Z+27, r15	; 0x1b
    67c6:	e2 8e       	std	Z+26, r14	; 0x1a
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    67c8:	ef 5d       	subi	r30, 0xDF	; 223
    67ca:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    67cc:	e0 70       	andi	r30, 0x00	; 0
    67ce:	fe 7f       	andi	r31, 0xFE	; 254
    67d0:	ef 2b       	or	r30, r31
    67d2:	19 f5       	brne	.+70     	; 0x681a <fat_file_create+0x172>
		{
			cache_dirty[index]=TRUE;
    67d4:	81 e0       	ldi	r24, 0x01	; 1
    67d6:	80 93 e3 05 	sts	0x05E3, r24
    67da:	1f c0       	rjmp	.+62     	; 0x681a <fat_file_create+0x172>
    67dc:	99 24       	eor	r9, r9
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    67de:	88 81       	ld	r24, Y
    67e0:	99 81       	ldd	r25, Y+1	; 0x01
    67e2:	aa 81       	ldd	r26, Y+2	; 0x02
    67e4:	bb 81       	ldd	r27, Y+3	; 0x03
    67e6:	00 97       	sbiw	r24, 0x00	; 0
    67e8:	a1 05       	cpc	r26, r1
    67ea:	b1 05       	cpc	r27, r1
    67ec:	61 f0       	breq	.+24     	; 0x6806 <fat_file_create+0x15e>
	{
		chain_ptr->base=cluster;
    67ee:	18 82       	st	Y, r1
    67f0:	19 82       	std	Y+1, r1	; 0x01
    67f2:	1a 82       	std	Y+2, r1	; 0x02
    67f4:	1b 82       	std	Y+3, r1	; 0x03
		chain_ptr->physical=cluster;
    67f6:	1c 82       	std	Y+4, r1	; 0x04
    67f8:	1d 82       	std	Y+5, r1	; 0x05
    67fa:	1e 82       	std	Y+6, r1	; 0x06
    67fc:	1f 82       	std	Y+7, r1	; 0x07
		chain_ptr->logical=0ul;
    67fe:	18 86       	std	Y+8, r1	; 0x08
    6800:	19 86       	std	Y+9, r1	; 0x09
    6802:	1a 86       	std	Y+10, r1	; 0x0a
    6804:	1b 86       	std	Y+11, r1	; 0x0b

	//if we fail, do not leave file_info structure partially initialized
	if(!success)
	{
		chain_init(&file_info_ptr->chain, 0ul);
		file_info_ptr->cluster_directory = 0;
    6806:	1c 86       	std	Y+12, r1	; 0x0c
    6808:	1d 86       	std	Y+13, r1	; 0x0d
    680a:	1e 86       	std	Y+14, r1	; 0x0e
    680c:	1f 86       	std	Y+15, r1	; 0x0f
		file_info_ptr->directory_index = 0;
    680e:	1d 8a       	std	Y+21, r1	; 0x15
    6810:	1c 8a       	std	Y+20, r1	; 0x14
		file_info_ptr->size = size;
    6812:	a8 8a       	std	Y+16, r10	; 0x10
    6814:	b9 8a       	std	Y+17, r11	; 0x11
    6816:	ca 8a       	std	Y+18, r12	; 0x12
    6818:	db 8a       	std	Y+19, r13	; 0x13
	};

	fatcache_clean();
    681a:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    681e:	89 2d       	mov	r24, r9
    6820:	df 91       	pop	r29
    6822:	cf 91       	pop	r28
    6824:	1f 91       	pop	r17
    6826:	0f 91       	pop	r16
    6828:	ff 90       	pop	r15
    682a:	ef 90       	pop	r14
    682c:	df 90       	pop	r13
    682e:	cf 90       	pop	r12
    6830:	bf 90       	pop	r11
    6832:	af 90       	pop	r10
    6834:	9f 90       	pop	r9
    6836:	08 95       	ret

00006838 <fat_file_locate>:
	return success;
}

//locate a file
char fat_file_locate(struct fat_file_struct *file_info_ptr, unsigned long directory, char* name)
{
    6838:	4f 92       	push	r4
    683a:	5f 92       	push	r5
    683c:	6f 92       	push	r6
    683e:	7f 92       	push	r7
    6840:	9f 92       	push	r9
    6842:	af 92       	push	r10
    6844:	bf 92       	push	r11
    6846:	cf 92       	push	r12
    6848:	df 92       	push	r13
    684a:	ef 92       	push	r14
    684c:	ff 92       	push	r15
    684e:	0f 93       	push	r16
    6850:	1f 93       	push	r17
    6852:	df 93       	push	r29
    6854:	cf 93       	push	r28
    6856:	00 d0       	rcall	.+0      	; 0x6858 <fat_file_locate+0x20>
    6858:	cd b7       	in	r28, 0x3d	; 61
    685a:	de b7       	in	r29, 0x3e	; 62
    685c:	5c 01       	movw	r10, r24
    685e:	7a 01       	movw	r14, r20
    6860:	8b 01       	movw	r16, r22
	char success;
	unsigned int index;
	struct directory_struct *directory_ptr=NULL;
	unsigned long templong;
	
	success = dir_search_name(directory, name, &index);
    6862:	cb 01       	movw	r24, r22
    6864:	ba 01       	movw	r22, r20
    6866:	a9 01       	movw	r20, r18
    6868:	9e 01       	movw	r18, r28
    686a:	2f 5f       	subi	r18, 0xFF	; 255
    686c:	3f 4f       	sbci	r19, 0xFF	; 255
    686e:	0e 94 2d 2c 	call	0x585a	; 0x585a <dir_search_name>
    6872:	98 2e       	mov	r9, r24
	if(success)
    6874:	88 23       	and	r24, r24
    6876:	09 f4       	brne	.+2      	; 0x687a <fat_file_locate+0x42>
    6878:	ca c0       	rjmp	.+404    	; 0x6a0e <fat_file_locate+0x1d6>
	{
		directory_ptr = dir_entry_get_ptr(directory, index);
    687a:	49 81       	ldd	r20, Y+1	; 0x01
    687c:	5a 81       	ldd	r21, Y+2	; 0x02
    687e:	c8 01       	movw	r24, r16
    6880:	b7 01       	movw	r22, r14
    6882:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6886:	fc 01       	movw	r30, r24
		if(directory_ptr)
    6888:	00 97       	sbiw	r24, 0x00	; 0
    688a:	09 f4       	brne	.+2      	; 0x688e <fat_file_locate+0x56>
    688c:	bf c0       	rjmp	.+382    	; 0x6a0c <fat_file_locate+0x1d4>
		{
			if( directory_ptr->attributes & 0xD0 || directory_ptr->attributes==0x0F )
    688e:	93 85       	ldd	r25, Z+11	; 0x0b
    6890:	89 2f       	mov	r24, r25
    6892:	80 7d       	andi	r24, 0xD0	; 208
    6894:	09 f0       	breq	.+2      	; 0x6898 <fat_file_locate+0x60>
    6896:	ba c0       	rjmp	.+372    	; 0x6a0c <fat_file_locate+0x1d4>
    6898:	9f 30       	cpi	r25, 0x0F	; 15
    689a:	09 f4       	brne	.+2      	; 0x689e <fat_file_locate+0x66>
    689c:	b7 c0       	rjmp	.+366    	; 0x6a0c <fat_file_locate+0x1d4>
				success = FALSE;
			else
			{
				templong = LEND_UINT_READ(directory_ptr->cluster_h);
    689e:	84 89       	ldd	r24, Z+20	; 0x14
    68a0:	95 89       	ldd	r25, Z+21	; 0x15
    68a2:	aa 27       	eor	r26, r26
    68a4:	97 fd       	sbrc	r25, 7
    68a6:	a0 95       	com	r26
    68a8:	ba 2f       	mov	r27, r26
				templong <<= 16;
    68aa:	ac 01       	movw	r20, r24
    68ac:	33 27       	eor	r19, r19
    68ae:	22 27       	eor	r18, r18
				templong += LEND_UINT_READ(directory_ptr->cluster_l);
    68b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    68b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    68b4:	aa 27       	eor	r26, r26
    68b6:	97 fd       	sbrc	r25, 7
    68b8:	a0 95       	com	r26
    68ba:	ba 2f       	mov	r27, r26
    68bc:	28 0f       	add	r18, r24
    68be:	39 1f       	adc	r19, r25
    68c0:	4a 1f       	adc	r20, r26
    68c2:	5b 1f       	adc	r21, r27
}

void chain_init(struct fat_chain_struct *chain_ptr, unsigned long cluster)
{
	//new base cluster?
	if(cluster != chain_ptr->base)
    68c4:	d5 01       	movw	r26, r10
    68c6:	4d 90       	ld	r4, X+
    68c8:	5d 90       	ld	r5, X+
    68ca:	6d 90       	ld	r6, X+
    68cc:	7c 90       	ld	r7, X
    68ce:	13 97       	sbiw	r26, 0x03	; 3
    68d0:	24 15       	cp	r18, r4
    68d2:	35 05       	cpc	r19, r5
    68d4:	46 05       	cpc	r20, r6
    68d6:	57 05       	cpc	r21, r7
    68d8:	89 f0       	breq	.+34     	; 0x68fc <fat_file_locate+0xc4>
	{
		chain_ptr->base=cluster;
    68da:	2d 93       	st	X+, r18
    68dc:	3d 93       	st	X+, r19
    68de:	4d 93       	st	X+, r20
    68e0:	5c 93       	st	X, r21
    68e2:	13 97       	sbiw	r26, 0x03	; 3
		chain_ptr->physical=cluster;
    68e4:	14 96       	adiw	r26, 0x04	; 4
    68e6:	2d 93       	st	X+, r18
    68e8:	3d 93       	st	X+, r19
    68ea:	4d 93       	st	X+, r20
    68ec:	5c 93       	st	X, r21
    68ee:	17 97       	sbiw	r26, 0x07	; 7
		chain_ptr->logical=0ul;
    68f0:	18 96       	adiw	r26, 0x08	; 8
    68f2:	1d 92       	st	X+, r1
    68f4:	1d 92       	st	X+, r1
    68f6:	1d 92       	st	X+, r1
    68f8:	1c 92       	st	X, r1
    68fa:	1b 97       	sbiw	r26, 0x0b	; 11
				chain_init(&file_info_ptr->chain, templong);
				
				file_info_ptr->cluster_directory = directory;
    68fc:	d5 01       	movw	r26, r10
    68fe:	1c 96       	adiw	r26, 0x0c	; 12
    6900:	ed 92       	st	X+, r14
    6902:	fd 92       	st	X+, r15
    6904:	0d 93       	st	X+, r16
    6906:	1c 93       	st	X, r17
    6908:	1f 97       	sbiw	r26, 0x0f	; 15
				file_info_ptr->size = LEND_ULONG_READ(directory_ptr->size);
    690a:	84 8d       	ldd	r24, Z+28	; 0x1c
    690c:	95 8d       	ldd	r25, Z+29	; 0x1d
    690e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    6910:	b7 8d       	ldd	r27, Z+31	; 0x1f
    6912:	f5 01       	movw	r30, r10
    6914:	80 8b       	std	Z+16, r24	; 0x10
    6916:	91 8b       	std	Z+17, r25	; 0x11
    6918:	a2 8b       	std	Z+18, r26	; 0x12
    691a:	b3 8b       	std	Z+19, r27	; 0x13
				file_info_ptr->directory_index = index;
    691c:	89 81       	ldd	r24, Y+1	; 0x01
    691e:	9a 81       	ldd	r25, Y+2	; 0x02
    6920:	95 8b       	std	Z+21, r25	; 0x15
    6922:	84 8b       	std	Z+20, r24	; 0x14
				DEBUG_P(PSTR("FAT32 - File found DIR@"));
    6924:	80 91 90 02 	lds	r24, 0x0290
    6928:	90 91 91 02 	lds	r25, 0x0291
    692c:	6a e2       	ldi	r22, 0x2A	; 42
    692e:	73 e1       	ldi	r23, 0x13	; 19
    6930:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG(directory);
    6934:	c0 90 90 02 	lds	r12, 0x0290
    6938:	d0 90 91 02 	lds	r13, 0x0291
    693c:	c8 01       	movw	r24, r16
    693e:	b7 01       	movw	r22, r14
    6940:	46 ea       	ldi	r20, 0xA6	; 166
    6942:	52 e0       	ldi	r21, 0x02	; 2
    6944:	2a e0       	ldi	r18, 0x0A	; 10
    6946:	00 e0       	ldi	r16, 0x00	; 0
    6948:	ee 24       	eor	r14, r14
    694a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    694e:	bc 01       	movw	r22, r24
    6950:	c6 01       	movw	r24, r12
    6952:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" INDEX="));
    6956:	80 91 90 02 	lds	r24, 0x0290
    695a:	90 91 91 02 	lds	r25, 0x0291
    695e:	62 e2       	ldi	r22, 0x22	; 34
    6960:	73 e1       	ldi	r23, 0x13	; 19
    6962:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG((unsigned long)file_info_ptr->directory_index);
    6966:	c0 90 90 02 	lds	r12, 0x0290
    696a:	d0 90 91 02 	lds	r13, 0x0291
    696e:	d5 01       	movw	r26, r10
    6970:	54 96       	adiw	r26, 0x14	; 20
    6972:	6d 91       	ld	r22, X+
    6974:	7c 91       	ld	r23, X
    6976:	55 97       	sbiw	r26, 0x15	; 21
    6978:	80 e0       	ldi	r24, 0x00	; 0
    697a:	90 e0       	ldi	r25, 0x00	; 0
    697c:	46 ea       	ldi	r20, 0xA6	; 166
    697e:	52 e0       	ldi	r21, 0x02	; 2
    6980:	2a e0       	ldi	r18, 0x0A	; 10
    6982:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    6986:	bc 01       	movw	r22, r24
    6988:	c6 01       	movw	r24, r12
    698a:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" FILE@"));
    698e:	80 91 90 02 	lds	r24, 0x0290
    6992:	90 91 91 02 	lds	r25, 0x0291
    6996:	6b e1       	ldi	r22, 0x1B	; 27
    6998:	73 e1       	ldi	r23, 0x13	; 19
    699a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG(file_info_ptr->chain.base);
    699e:	c0 90 90 02 	lds	r12, 0x0290
    69a2:	d0 90 91 02 	lds	r13, 0x0291
    69a6:	f5 01       	movw	r30, r10
    69a8:	60 81       	ld	r22, Z
    69aa:	71 81       	ldd	r23, Z+1	; 0x01
    69ac:	82 81       	ldd	r24, Z+2	; 0x02
    69ae:	93 81       	ldd	r25, Z+3	; 0x03
    69b0:	46 ea       	ldi	r20, 0xA6	; 166
    69b2:	52 e0       	ldi	r21, 0x02	; 2
    69b4:	2a e0       	ldi	r18, 0x0A	; 10
    69b6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    69ba:	bc 01       	movw	r22, r24
    69bc:	c6 01       	movw	r24, r12
    69be:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR(" SIZE="));
    69c2:	80 91 90 02 	lds	r24, 0x0290
    69c6:	90 91 91 02 	lds	r25, 0x0291
    69ca:	64 e1       	ldi	r22, 0x14	; 20
    69cc:	73 e1       	ldi	r23, 0x13	; 19
    69ce:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
				DEBUG_ULONG(file_info_ptr->size);
    69d2:	c0 90 90 02 	lds	r12, 0x0290
    69d6:	d0 90 91 02 	lds	r13, 0x0291
    69da:	d5 01       	movw	r26, r10
    69dc:	50 96       	adiw	r26, 0x10	; 16
    69de:	6d 91       	ld	r22, X+
    69e0:	7d 91       	ld	r23, X+
    69e2:	8d 91       	ld	r24, X+
    69e4:	9c 91       	ld	r25, X
    69e6:	53 97       	sbiw	r26, 0x13	; 19
    69e8:	46 ea       	ldi	r20, 0xA6	; 166
    69ea:	52 e0       	ldi	r21, 0x02	; 2
    69ec:	2a e0       	ldi	r18, 0x0A	; 10
    69ee:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    69f2:	bc 01       	movw	r22, r24
    69f4:	c6 01       	movw	r24, r12
    69f6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
				DEBUG_P(PSTR("\r\n"));
    69fa:	80 91 90 02 	lds	r24, 0x0290
    69fe:	90 91 91 02 	lds	r25, 0x0291
    6a02:	61 e1       	ldi	r22, 0x11	; 17
    6a04:	73 e1       	ldi	r23, 0x13	; 19
    6a06:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
    6a0a:	01 c0       	rjmp	.+2      	; 0x6a0e <fat_file_locate+0x1d6>
    6a0c:	99 24       	eor	r9, r9
		}
		else
			success=FALSE;
	};
	return success;
}
    6a0e:	89 2d       	mov	r24, r9
    6a10:	0f 90       	pop	r0
    6a12:	0f 90       	pop	r0
    6a14:	cf 91       	pop	r28
    6a16:	df 91       	pop	r29
    6a18:	1f 91       	pop	r17
    6a1a:	0f 91       	pop	r16
    6a1c:	ff 90       	pop	r15
    6a1e:	ef 90       	pop	r14
    6a20:	df 90       	pop	r13
    6a22:	cf 90       	pop	r12
    6a24:	bf 90       	pop	r11
    6a26:	af 90       	pop	r10
    6a28:	9f 90       	pop	r9
    6a2a:	7f 90       	pop	r7
    6a2c:	6f 90       	pop	r6
    6a2e:	5f 90       	pop	r5
    6a30:	4f 90       	pop	r4
    6a32:	08 95       	ret

00006a34 <fat_directory_delete>:
	return retval;
}

//delete a sub-directory, only works if the sub-directory is empty
char fat_directory_delete(unsigned long parent_directory, char* name)
{
    6a34:	4f 92       	push	r4
    6a36:	5f 92       	push	r5
    6a38:	6f 92       	push	r6
    6a3a:	7f 92       	push	r7
    6a3c:	8f 92       	push	r8
    6a3e:	9f 92       	push	r9
    6a40:	af 92       	push	r10
    6a42:	bf 92       	push	r11
    6a44:	cf 92       	push	r12
    6a46:	df 92       	push	r13
    6a48:	ef 92       	push	r14
    6a4a:	ff 92       	push	r15
    6a4c:	0f 93       	push	r16
    6a4e:	1f 93       	push	r17
    6a50:	df 93       	push	r29
    6a52:	cf 93       	push	r28
    6a54:	00 d0       	rcall	.+0      	; 0x6a56 <fat_directory_delete+0x22>
    6a56:	00 d0       	rcall	.+0      	; 0x6a58 <fat_directory_delete+0x24>
    6a58:	00 d0       	rcall	.+0      	; 0x6a5a <fat_directory_delete+0x26>
    6a5a:	cd b7       	in	r28, 0x3d	; 61
    6a5c:	de b7       	in	r29, 0x3e	; 62
    6a5e:	6b 83       	std	Y+3, r22	; 0x03
    6a60:	7c 83       	std	Y+4, r23	; 0x04
    6a62:	8d 83       	std	Y+5, r24	; 0x05
    6a64:	9e 83       	std	Y+6, r25	; 0x06
    6a66:	8a 01       	movw	r16, r20
	struct directory_struct *directory_ptr;
	unsigned int parent_index, child_index, total;
	unsigned char type;

	//check ID-10-T
	if( !strcmp_P(name, PSTR("..")) || !strcmp_P(name, PSTR(".")) )
    6a68:	ca 01       	movw	r24, r20
    6a6a:	6b e0       	ldi	r22, 0x0B	; 11
    6a6c:	73 e1       	ldi	r23, 0x13	; 19
    6a6e:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <strcmp_P>
    6a72:	89 2b       	or	r24, r25
    6a74:	09 f4       	brne	.+2      	; 0x6a78 <fat_directory_delete+0x44>
    6a76:	ff c0       	rjmp	.+510    	; 0x6c76 <fat_directory_delete+0x242>
    6a78:	c8 01       	movw	r24, r16
    6a7a:	69 e0       	ldi	r22, 0x09	; 9
    6a7c:	73 e1       	ldi	r23, 0x13	; 19
    6a7e:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <strcmp_P>
    6a82:	89 2b       	or	r24, r25
    6a84:	09 f4       	brne	.+2      	; 0x6a88 <fat_directory_delete+0x54>
    6a86:	f7 c0       	rjmp	.+494    	; 0x6c76 <fat_directory_delete+0x242>
		success=FALSE;

	//find sub-directory name
	if(success)
		success=dir_search_name(parent_directory, name, &parent_index);
    6a88:	6b 81       	ldd	r22, Y+3	; 0x03
    6a8a:	7c 81       	ldd	r23, Y+4	; 0x04
    6a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a90:	a8 01       	movw	r20, r16
    6a92:	9e 01       	movw	r18, r28
    6a94:	2f 5f       	subi	r18, 0xFF	; 255
    6a96:	3f 4f       	sbci	r19, 0xFF	; 255
    6a98:	0e 94 2d 2c 	call	0x585a	; 0x585a <dir_search_name>
    6a9c:	f8 2e       	mov	r15, r24

	//read sub-directory entry (after the name search, we should already have it in the buffer anyway)
	if(success)
    6a9e:	88 23       	and	r24, r24
    6aa0:	09 f4       	brne	.+2      	; 0x6aa4 <fat_directory_delete+0x70>
    6aa2:	e9 c0       	rjmp	.+466    	; 0x6c76 <fat_directory_delete+0x242>
	{
		directory_ptr = dir_entry_get_ptr(parent_directory, parent_index);
    6aa4:	49 81       	ldd	r20, Y+1	; 0x01
    6aa6:	5a 81       	ldd	r21, Y+2	; 0x02
    6aa8:	6b 81       	ldd	r22, Y+3	; 0x03
    6aaa:	7c 81       	ldd	r23, Y+4	; 0x04
    6aac:	8d 81       	ldd	r24, Y+5	; 0x05
    6aae:	9e 81       	ldd	r25, Y+6	; 0x06
    6ab0:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6ab4:	fc 01       	movw	r30, r24
		if(!directory_ptr)
    6ab6:	00 97       	sbiw	r24, 0x00	; 0
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <fat_directory_delete+0x88>
    6aba:	dd c0       	rjmp	.+442    	; 0x6c76 <fat_directory_delete+0x242>
	};

	//get base cluster of sub-directory
	if(success)
	{
		if(directory_ptr->attributes & 0x10)
    6abc:	83 85       	ldd	r24, Z+11	; 0x0b
    6abe:	84 ff       	sbrs	r24, 4
    6ac0:	da c0       	rjmp	.+436    	; 0x6c76 <fat_directory_delete+0x242>
			child_cluster = (((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h))<<16 )+ LEND_UINT_READ(directory_ptr->cluster_l);
    6ac2:	84 89       	ldd	r24, Z+20	; 0x14
    6ac4:	95 89       	ldd	r25, Z+21	; 0x15
    6ac6:	aa 27       	eor	r26, r26
    6ac8:	97 fd       	sbrc	r25, 7
    6aca:	a0 95       	com	r26
    6acc:	ba 2f       	mov	r27, r26
    6ace:	3c 01       	movw	r6, r24
    6ad0:	55 24       	eor	r5, r5
    6ad2:	44 24       	eor	r4, r4
    6ad4:	82 8d       	ldd	r24, Z+26	; 0x1a
    6ad6:	93 8d       	ldd	r25, Z+27	; 0x1b
    6ad8:	aa 27       	eor	r26, r26
    6ada:	97 fd       	sbrc	r25, 7
    6adc:	a0 95       	com	r26
    6ade:	ba 2f       	mov	r27, r26
    6ae0:	48 0e       	add	r4, r24
    6ae2:	59 1e       	adc	r5, r25
    6ae4:	6a 1e       	adc	r6, r26
    6ae6:	7b 1e       	adc	r7, r27
		if(!child_cluster)
    6ae8:	41 14       	cp	r4, r1
    6aea:	51 04       	cpc	r5, r1
    6aec:	61 04       	cpc	r6, r1
    6aee:	71 04       	cpc	r7, r1
    6af0:	09 f4       	brne	.+2      	; 0x6af4 <fat_directory_delete+0xc0>
    6af2:	c1 c0       	rjmp	.+386    	; 0x6c76 <fat_directory_delete+0x242>
	};

	//scan sub-directory for any used entries which are not . or .. abort if found
	if(success)
	{
		total=chain_length(child_cluster, NULL) << (sectors_per_cluster_power+4);
    6af4:	c3 01       	movw	r24, r6
    6af6:	b2 01       	movw	r22, r4
    6af8:	40 e0       	ldi	r20, 0x00	; 0
    6afa:	50 e0       	ldi	r21, 0x00	; 0
    6afc:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <chain_length>
    6b00:	5b 01       	movw	r10, r22
    6b02:	6c 01       	movw	r12, r24
    6b04:	80 91 95 02 	lds	r24, 0x0295
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	04 96       	adiw	r24, 0x04	; 4
    6b0c:	04 c0       	rjmp	.+8      	; 0x6b16 <fat_directory_delete+0xe2>
    6b0e:	aa 0c       	add	r10, r10
    6b10:	bb 1c       	adc	r11, r11
    6b12:	cc 1c       	adc	r12, r12
    6b14:	dd 1c       	adc	r13, r13
    6b16:	8a 95       	dec	r24
    6b18:	d2 f7       	brpl	.-12     	; 0x6b0e <fat_directory_delete+0xda>
    6b1a:	65 01       	movw	r12, r10
		DEBUG_P(PSTR("FAT32 - Testing directory empty, "));
    6b1c:	80 91 90 02 	lds	r24, 0x0290
    6b20:	90 91 91 02 	lds	r25, 0x0291
    6b24:	67 ee       	ldi	r22, 0xE7	; 231
    6b26:	72 e1       	ldi	r23, 0x12	; 18
    6b28:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		DEBUG_ULONG((unsigned long)total);
    6b2c:	80 90 90 02 	lds	r8, 0x0290
    6b30:	90 90 91 02 	lds	r9, 0x0291
    6b34:	b5 01       	movw	r22, r10
    6b36:	80 e0       	ldi	r24, 0x00	; 0
    6b38:	90 e0       	ldi	r25, 0x00	; 0
    6b3a:	46 ea       	ldi	r20, 0xA6	; 166
    6b3c:	52 e0       	ldi	r21, 0x02	; 2
    6b3e:	2a e0       	ldi	r18, 0x0A	; 10
    6b40:	00 e0       	ldi	r16, 0x00	; 0
    6b42:	ee 24       	eor	r14, r14
    6b44:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <ascii_ulong>
    6b48:	bc 01       	movw	r22, r24
    6b4a:	c4 01       	movw	r24, r8
    6b4c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <fifo_write_string>
		DEBUG_P(PSTR(" entries\r\n"));
    6b50:	80 91 90 02 	lds	r24, 0x0290
    6b54:	90 91 91 02 	lds	r25, 0x0291
    6b58:	6c ed       	ldi	r22, 0xDC	; 220
    6b5a:	72 e1       	ldi	r23, 0x12	; 18
    6b5c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <fifo_write_string_P>
		child_index=0;
		finished=FALSE;
		if(!total)
    6b60:	ab 28       	or	r10, r11
    6b62:	09 f4       	brne	.+2      	; 0x6b66 <fat_directory_delete+0x132>
    6b64:	88 c0       	rjmp	.+272    	; 0x6c76 <fat_directory_delete+0x242>
    6b66:	00 e0       	ldi	r16, 0x00	; 0
    6b68:	10 e0       	ldi	r17, 0x00	; 0
			finished=TRUE;
			success=FALSE;
		}
		else do
		{
			directory_ptr = dir_entry_get_ptr(child_cluster, child_index);
    6b6a:	c3 01       	movw	r24, r6
    6b6c:	b2 01       	movw	r22, r4
    6b6e:	a8 01       	movw	r20, r16
    6b70:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6b74:	fc 01       	movw	r30, r24
			if(directory_ptr)
    6b76:	00 97       	sbiw	r24, 0x00	; 0
    6b78:	e1 f0       	breq	.+56     	; 0x6bb2 <fat_directory_delete+0x17e>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    6b7a:	90 81       	ld	r25, Z
    6b7c:	95 3e       	cpi	r25, 0xE5	; 229
    6b7e:	19 f4       	brne	.+6      	; 0x6b86 <fat_directory_delete+0x152>
    6b80:	23 e0       	ldi	r18, 0x03	; 3
    6b82:	30 e0       	ldi	r19, 0x00	; 0
    6b84:	0d c0       	rjmp	.+26     	; 0x6ba0 <fat_directory_delete+0x16c>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    6b86:	99 23       	and	r25, r25
    6b88:	19 f4       	brne	.+6      	; 0x6b90 <fat_directory_delete+0x15c>
    6b8a:	20 e0       	ldi	r18, 0x00	; 0
    6b8c:	30 e0       	ldi	r19, 0x00	; 0
    6b8e:	08 c0       	rjmp	.+16     	; 0x6ba0 <fat_directory_delete+0x16c>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    6b90:	83 85       	ldd	r24, Z+11	; 0x0b
    6b92:	8f 30       	cpi	r24, 0x0F	; 15
    6b94:	19 f0       	breq	.+6      	; 0x6b9c <fat_directory_delete+0x168>
    6b96:	21 e0       	ldi	r18, 0x01	; 1
    6b98:	30 e0       	ldi	r19, 0x00	; 0
    6b9a:	02 c0       	rjmp	.+4      	; 0x6ba0 <fat_directory_delete+0x16c>
    6b9c:	22 e0       	ldi	r18, 0x02	; 2
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
			{
				type=dir_type(directory_ptr);
				
				//if we find a used entry which does not start with a . directory is not empty
				if(type == DIR_TYPE_USED && directory_ptr->filename_dos[0] !='.')
    6ba0:	21 30       	cpi	r18, 0x01	; 1
    6ba2:	19 f4       	brne	.+6      	; 0x6baa <fat_directory_delete+0x176>
    6ba4:	9e 32       	cpi	r25, 0x2E	; 46
    6ba6:	29 f4       	brne	.+10     	; 0x6bb2 <fat_directory_delete+0x17e>
    6ba8:	02 c0       	rjmp	.+4      	; 0x6bae <fat_directory_delete+0x17a>
				{
					success=FALSE;
					finished=TRUE;
				}
				else if(type == DIR_TYPE_UNUSED)
    6baa:	22 23       	and	r18, r18
    6bac:	19 f0       	breq	.+6      	; 0x6bb4 <fat_directory_delete+0x180>
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <fat_directory_delete+0x182>
    6bb2:	ff 24       	eor	r15, r15
    6bb4:	81 e0       	ldi	r24, 0x01	; 1
			{
				success=FALSE;
				finished=TRUE;
			};
			
			child_index++;
    6bb6:	0f 5f       	subi	r16, 0xFF	; 255
    6bb8:	1f 4f       	sbci	r17, 0xFF	; 255
			if(child_index==total)
    6bba:	0c 15       	cp	r16, r12
    6bbc:	1d 05       	cpc	r17, r13
    6bbe:	11 f0       	breq	.+4      	; 0x6bc4 <fat_directory_delete+0x190>
				finished=TRUE;
		}while(!finished);
    6bc0:	88 23       	and	r24, r24
    6bc2:	99 f2       	breq	.-90     	; 0x6b6a <fat_directory_delete+0x136>
    6bc4:	0f 2d       	mov	r16, r15
	};

	//delete childs entry in parent directory, also delete any preceeding LFN entries
	if(success)
    6bc6:	ff 20       	and	r15, r15
    6bc8:	09 f4       	brne	.+2      	; 0x6bcc <fat_directory_delete+0x198>
    6bca:	55 c0       	rjmp	.+170    	; 0x6c76 <fat_directory_delete+0x242>
	{
		//get pointer to directory entry
		directory_ptr=dir_entry_get_ptr(parent_directory, parent_index);
    6bcc:	49 81       	ldd	r20, Y+1	; 0x01
    6bce:	5a 81       	ldd	r21, Y+2	; 0x02
    6bd0:	6b 81       	ldd	r22, Y+3	; 0x03
    6bd2:	7c 81       	ldd	r23, Y+4	; 0x04
    6bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    6bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    6bd8:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6bdc:	fc 01       	movw	r30, r24
		
		if(directory_ptr)
    6bde:	00 97       	sbiw	r24, 0x00	; 0
    6be0:	09 f4       	brne	.+2      	; 0x6be4 <fat_directory_delete+0x1b0>
    6be2:	49 c0       	rjmp	.+146    	; 0x6c76 <fat_directory_delete+0x242>
		{
			//mark main directory entry as deleted
			directory_ptr->filename_dos[0]=0xE5;
    6be4:	85 ee       	ldi	r24, 0xE5	; 229
    6be6:	80 83       	st	Z, r24
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    6be8:	ef 5d       	subi	r30, 0xDF	; 223
    6bea:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    6bec:	e0 70       	andi	r30, 0x00	; 0
    6bee:	fe 7f       	andi	r31, 0xFE	; 254
    6bf0:	ef 2b       	or	r30, r31
    6bf2:	19 f4       	brne	.+6      	; 0x6bfa <fat_directory_delete+0x1c6>
		{
			cache_dirty[index]=TRUE;
    6bf4:	81 e0       	ldi	r24, 0x01	; 1
    6bf6:	80 93 e3 05 	sts	0x05E3, r24
    6bfa:	10 e0       	ldi	r17, 0x00	; 0
    6bfc:	89 81       	ldd	r24, Y+1	; 0x01
    6bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    6c00:	89 2b       	or	r24, r25
    6c02:	59 f5       	brne	.+86     	; 0x6c5a <fat_directory_delete+0x226>
    6c04:	11 e0       	ldi	r17, 0x01	; 1
    6c06:	29 c0       	rjmp	.+82     	; 0x6c5a <fat_directory_delete+0x226>
			finished=FALSE;
			if(parent_index==0)
				finished=TRUE;
			while(!finished)
			{
				parent_index--;
    6c08:	49 81       	ldd	r20, Y+1	; 0x01
    6c0a:	5a 81       	ldd	r21, Y+2	; 0x02
    6c0c:	41 50       	subi	r20, 0x01	; 1
    6c0e:	50 40       	sbci	r21, 0x00	; 0
    6c10:	5a 83       	std	Y+2, r21	; 0x02
    6c12:	49 83       	std	Y+1, r20	; 0x01
				directory_ptr=dir_entry_get_ptr(parent_directory, parent_index);
    6c14:	6b 81       	ldd	r22, Y+3	; 0x03
    6c16:	7c 81       	ldd	r23, Y+4	; 0x04
    6c18:	8d 81       	ldd	r24, Y+5	; 0x05
    6c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c1c:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6c20:	fc 01       	movw	r30, r24
				if(directory_ptr)
    6c22:	00 97       	sbiw	r24, 0x00	; 0
    6c24:	11 f4       	brne	.+4      	; 0x6c2a <fat_directory_delete+0x1f6>
    6c26:	00 e0       	ldi	r16, 0x00	; 0
    6c28:	08 c0       	rjmp	.+16     	; 0x6c3a <fat_directory_delete+0x206>
//returns DIR_TYPE_UNUSED DIR_TYPE_USED DIR_TYPE_ERASED DIR_TYPE_LFN
static unsigned char dir_type(struct directory_struct *directory)
{
	int retval;

	if(directory->filename_dos[0] == 0xE5)
    6c2a:	80 81       	ld	r24, Z
    6c2c:	85 3e       	cpi	r24, 0xE5	; 229
    6c2e:	29 f0       	breq	.+10     	; 0x6c3a <fat_directory_delete+0x206>
		retval=DIR_TYPE_ERASED;
	else if(directory->filename_dos[0] == 0x00)
    6c30:	88 23       	and	r24, r24
    6c32:	19 f0       	breq	.+6      	; 0x6c3a <fat_directory_delete+0x206>
		retval=DIR_TYPE_UNUSED;
	else if(directory->attributes==0x0F)
    6c34:	83 85       	ldd	r24, Z+11	; 0x0b
    6c36:	8f 30       	cpi	r24, 0x0F	; 15
    6c38:	11 f0       	breq	.+4      	; 0x6c3e <fat_directory_delete+0x20a>
				{
					if(dir_type(directory_ptr)==DIR_TYPE_LFN)
    6c3a:	11 e0       	ldi	r17, 0x01	; 1
    6c3c:	09 c0       	rjmp	.+18     	; 0x6c50 <fat_directory_delete+0x21c>
					{
						directory_ptr->filename_dos[0]=0xE5;
    6c3e:	f0 82       	st	Z, r15
	char* sector_ptr, *target;
	unsigned int tempint;
	
	target = (char*)buffer;			//target=start address of the buffer containing the passed address
	
	tempint = target-cache_buffers;
    6c40:	ef 5d       	subi	r30, 0xDF	; 223
    6c42:	f3 40       	sbci	r31, 0x03	; 3
	target = (char*)(tempint);
	
	sector_ptr=cache_buffers;
	do
	{
		if(sector_ptr==target)
    6c44:	e0 70       	andi	r30, 0x00	; 0
    6c46:	fe 7f       	andi	r31, 0xFE	; 254
    6c48:	ef 2b       	or	r30, r31
    6c4a:	11 f4       	brne	.+4      	; 0x6c50 <fat_directory_delete+0x21c>
		{
			cache_dirty[index]=TRUE;
    6c4c:	e0 92 e3 05 	sts	0x05E3, r14
				else
				{
					success=FALSE;
					finished=TRUE;
				};
				if(parent_index==0)
    6c50:	89 81       	ldd	r24, Y+1	; 0x01
    6c52:	9a 81       	ldd	r25, Y+2	; 0x02
    6c54:	89 2b       	or	r24, r25
    6c56:	29 f4       	brne	.+10     	; 0x6c62 <fat_directory_delete+0x22e>
    6c58:	06 c0       	rjmp	.+12     	; 0x6c66 <fat_directory_delete+0x232>
			{
				parent_index--;
				directory_ptr=dir_entry_get_ptr(parent_directory, parent_index);
				if(directory_ptr)
				{
					if(dir_type(directory_ptr)==DIR_TYPE_LFN)
    6c5a:	ee 24       	eor	r14, r14
    6c5c:	e3 94       	inc	r14
					{
						directory_ptr->filename_dos[0]=0xE5;
    6c5e:	35 ee       	ldi	r19, 0xE5	; 229
    6c60:	f3 2e       	mov	r15, r19
			
			//also erase any preceeding lfn entries
			finished=FALSE;
			if(parent_index==0)
				finished=TRUE;
			while(!finished)
    6c62:	11 23       	and	r17, r17
    6c64:	89 f2       	breq	.-94     	; 0x6c08 <fat_directory_delete+0x1d4>
		else
			success=FALSE;
	};
	
	//erase childs chain
	if(success)
    6c66:	00 23       	and	r16, r16
    6c68:	39 f0       	breq	.+14     	; 0x6c78 <fat_directory_delete+0x244>
		success=chain_erase(child_cluster);
    6c6a:	c3 01       	movw	r24, r6
    6c6c:	b2 01       	movw	r22, r4
    6c6e:	0e 94 47 23 	call	0x468e	; 0x468e <chain_erase>
    6c72:	08 2f       	mov	r16, r24
    6c74:	01 c0       	rjmp	.+2      	; 0x6c78 <fat_directory_delete+0x244>
    6c76:	00 e0       	ldi	r16, 0x00	; 0
	
	fatcache_clean();
    6c78:	0e 94 41 18 	call	0x3082	; 0x3082 <fatcache_clean>
	return success;
}
    6c7c:	80 2f       	mov	r24, r16
    6c7e:	26 96       	adiw	r28, 0x06	; 6
    6c80:	0f b6       	in	r0, 0x3f	; 63
    6c82:	f8 94       	cli
    6c84:	de bf       	out	0x3e, r29	; 62
    6c86:	0f be       	out	0x3f, r0	; 63
    6c88:	cd bf       	out	0x3d, r28	; 61
    6c8a:	cf 91       	pop	r28
    6c8c:	df 91       	pop	r29
    6c8e:	1f 91       	pop	r17
    6c90:	0f 91       	pop	r16
    6c92:	ff 90       	pop	r15
    6c94:	ef 90       	pop	r14
    6c96:	df 90       	pop	r13
    6c98:	cf 90       	pop	r12
    6c9a:	bf 90       	pop	r11
    6c9c:	af 90       	pop	r10
    6c9e:	9f 90       	pop	r9
    6ca0:	8f 90       	pop	r8
    6ca2:	7f 90       	pop	r7
    6ca4:	6f 90       	pop	r6
    6ca6:	5f 90       	pop	r5
    6ca8:	4f 90       	pop	r4
    6caa:	08 95       	ret

00006cac <fat_directory_change>:
	return success;
}

//change to a new directory
char fat_directory_change(unsigned long* current_directory_ptr, char* name)	//can be . .. or directory name, returns success
{
    6cac:	af 92       	push	r10
    6cae:	bf 92       	push	r11
    6cb0:	cf 92       	push	r12
    6cb2:	df 92       	push	r13
    6cb4:	ef 92       	push	r14
    6cb6:	ff 92       	push	r15
    6cb8:	0f 93       	push	r16
    6cba:	1f 93       	push	r17
    6cbc:	df 93       	push	r29
    6cbe:	cf 93       	push	r28
    6cc0:	00 d0       	rcall	.+0      	; 0x6cc2 <fat_directory_change+0x16>
    6cc2:	cd b7       	in	r28, 0x3d	; 61
    6cc4:	de b7       	in	r29, 0x3e	; 62
    6cc6:	6c 01       	movw	r12, r24
    6cc8:	5b 01       	movw	r10, r22
	unsigned long new_cluster=0ul;
	unsigned int directory_index;
	struct directory_struct *directory_ptr;

	//if we find the name
	if(dir_search_name(*current_directory_ptr, name, &directory_index))
    6cca:	fc 01       	movw	r30, r24
    6ccc:	60 81       	ld	r22, Z
    6cce:	71 81       	ldd	r23, Z+1	; 0x01
    6cd0:	82 81       	ldd	r24, Z+2	; 0x02
    6cd2:	93 81       	ldd	r25, Z+3	; 0x03
    6cd4:	a5 01       	movw	r20, r10
    6cd6:	9e 01       	movw	r18, r28
    6cd8:	2f 5f       	subi	r18, 0xFF	; 255
    6cda:	3f 4f       	sbci	r19, 0xFF	; 255
    6cdc:	0e 94 2d 2c 	call	0x585a	; 0x585a <dir_search_name>
    6ce0:	88 23       	and	r24, r24
    6ce2:	d9 f1       	breq	.+118    	; 0x6d5a <fat_directory_change+0xae>
	{
		//if we can read the directory entry (after the name search, we should already have it in cache anyway)
		if((directory_ptr = dir_entry_get_ptr(*current_directory_ptr, directory_index)))
    6ce4:	f6 01       	movw	r30, r12
    6ce6:	60 81       	ld	r22, Z
    6ce8:	71 81       	ldd	r23, Z+1	; 0x01
    6cea:	82 81       	ldd	r24, Z+2	; 0x02
    6cec:	93 81       	ldd	r25, Z+3	; 0x03
    6cee:	49 81       	ldd	r20, Y+1	; 0x01
    6cf0:	5a 81       	ldd	r21, Y+2	; 0x02
    6cf2:	0e 94 7f 20 	call	0x40fe	; 0x40fe <dir_entry_get_ptr>
    6cf6:	fc 01       	movw	r30, r24
    6cf8:	00 97       	sbiw	r24, 0x00	; 0
    6cfa:	79 f1       	breq	.+94     	; 0x6d5a <fat_directory_change+0xae>
		{
			//is it a sub-directory?
			if(directory_ptr->attributes & 0x10)
    6cfc:	83 85       	ldd	r24, Z+11	; 0x0b
    6cfe:	84 ff       	sbrs	r24, 4
    6d00:	2c c0       	rjmp	.+88     	; 0x6d5a <fat_directory_change+0xae>
			{
				//get target cluster #
				new_cluster = (((unsigned long)LEND_UINT_READ(directory_ptr->cluster_h))<<16 )+ LEND_UINT_READ(directory_ptr->cluster_l);
    6d02:	84 89       	ldd	r24, Z+20	; 0x14
    6d04:	95 89       	ldd	r25, Z+21	; 0x15
    6d06:	aa 27       	eor	r26, r26
    6d08:	97 fd       	sbrc	r25, 7
    6d0a:	a0 95       	com	r26
    6d0c:	ba 2f       	mov	r27, r26
    6d0e:	8c 01       	movw	r16, r24
    6d10:	ff 24       	eor	r15, r15
    6d12:	ee 24       	eor	r14, r14
    6d14:	82 8d       	ldd	r24, Z+26	; 0x1a
    6d16:	93 8d       	ldd	r25, Z+27	; 0x1b
    6d18:	aa 27       	eor	r26, r26
    6d1a:	97 fd       	sbrc	r25, 7
    6d1c:	a0 95       	com	r26
    6d1e:	ba 2f       	mov	r27, r26
    6d20:	e8 0e       	add	r14, r24
    6d22:	f9 1e       	adc	r15, r25
    6d24:	0a 1f       	adc	r16, r26
    6d26:	1b 1f       	adc	r17, r27
				//.. entries which access root directory have target of 0, which we must convert to root target of 2
				if(!strcmp_P(name, PSTR("..")) && new_cluster==0ul)
    6d28:	c5 01       	movw	r24, r10
    6d2a:	6e e0       	ldi	r22, 0x0E	; 14
    6d2c:	73 e1       	ldi	r23, 0x13	; 19
    6d2e:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <strcmp_P>
    6d32:	89 2b       	or	r24, r25
    6d34:	31 f4       	brne	.+12     	; 0x6d42 <fat_directory_change+0x96>
    6d36:	e1 14       	cp	r14, r1
    6d38:	f1 04       	cpc	r15, r1
    6d3a:	01 05       	cpc	r16, r1
    6d3c:	11 05       	cpc	r17, r1
    6d3e:	d9 f0       	breq	.+54     	; 0x6d76 <fat_directory_change+0xca>
    6d40:	05 c0       	rjmp	.+10     	; 0x6d4c <fat_directory_change+0xa0>
					new_cluster=2ul;
			};
		};
	};

	if(new_cluster)
    6d42:	e1 14       	cp	r14, r1
    6d44:	f1 04       	cpc	r15, r1
    6d46:	01 05       	cpc	r16, r1
    6d48:	11 05       	cpc	r17, r1
    6d4a:	39 f0       	breq	.+14     	; 0x6d5a <fat_directory_change+0xae>
		*current_directory_ptr=new_cluster;
    6d4c:	f6 01       	movw	r30, r12
    6d4e:	e0 82       	st	Z, r14
    6d50:	f1 82       	std	Z+1, r15	; 0x01
    6d52:	02 83       	std	Z+2, r16	; 0x02
    6d54:	13 83       	std	Z+3, r17	; 0x03
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	01 c0       	rjmp	.+2      	; 0x6d5c <fat_directory_change+0xb0>
    6d5a:	80 e0       	ldi	r24, 0x00	; 0
	else
		retval=FALSE;

	return retval;
}
    6d5c:	0f 90       	pop	r0
    6d5e:	0f 90       	pop	r0
    6d60:	cf 91       	pop	r28
    6d62:	df 91       	pop	r29
    6d64:	1f 91       	pop	r17
    6d66:	0f 91       	pop	r16
    6d68:	ff 90       	pop	r15
    6d6a:	ef 90       	pop	r14
    6d6c:	df 90       	pop	r13
    6d6e:	cf 90       	pop	r12
    6d70:	bf 90       	pop	r11
    6d72:	af 90       	pop	r10
    6d74:	08 95       	ret
			};
		};
	};

	if(new_cluster)
		*current_directory_ptr=new_cluster;
    6d76:	52 e0       	ldi	r21, 0x02	; 2
    6d78:	e5 2e       	mov	r14, r21
    6d7a:	f1 2c       	mov	r15, r1
    6d7c:	01 2d       	mov	r16, r1
    6d7e:	11 2d       	mov	r17, r1
    6d80:	e5 cf       	rjmp	.-54     	; 0x6d4c <fat_directory_change+0xa0>

00006d82 <__vector_23>:

	DDRB |=_BV(PB7);	//OC0A
}

ISR(TIMER0_OVF_vect)
{
    6d82:	1f 92       	push	r1
    6d84:	0f 92       	push	r0
    6d86:	0f b6       	in	r0, 0x3f	; 63
    6d88:	0f 92       	push	r0
    6d8a:	0b b6       	in	r0, 0x3b	; 59
    6d8c:	0f 92       	push	r0
    6d8e:	11 24       	eor	r1, r1
    6d90:	8f 93       	push	r24
    6d92:	9f 93       	push	r25
    6d94:	ef 93       	push	r30
    6d96:	ff 93       	push	r31
	
	OCR0A = *buffer;
    6d98:	e0 91 e5 09 	lds	r30, 0x09E5
    6d9c:	f0 91 e6 09 	lds	r31, 0x09E6
    6da0:	81 91       	ld	r24, Z+
    6da2:	87 bd       	out	0x27, r24	; 39
	buffer++;
    6da4:	f0 93 e6 09 	sts	0x09E6, r31
    6da8:	e0 93 e5 09 	sts	0x09E5, r30

	if(buffer== &buffer_a[AUDIO_BUFFER_SIZE])
    6dac:	87 e0       	ldi	r24, 0x07	; 7
    6dae:	e5 3e       	cpi	r30, 0xE5	; 229
    6db0:	f8 07       	cpc	r31, r24
    6db2:	49 f4       	brne	.+18     	; 0x6dc6 <__vector_23+0x44>
	{
		buffer=buffer_b;
    6db4:	85 ee       	ldi	r24, 0xE5	; 229
    6db6:	97 e0       	ldi	r25, 0x07	; 7
    6db8:	90 93 e6 09 	sts	0x09E6, r25
    6dbc:	80 93 e5 09 	sts	0x09E5, r24
		audio_buffer=buffer_a;
    6dc0:	85 ee       	ldi	r24, 0xE5	; 229
    6dc2:	95 e0       	ldi	r25, 0x05	; 5
    6dc4:	0b c0       	rjmp	.+22     	; 0x6ddc <__vector_23+0x5a>
		audio_swapflag=TRUE;
	}
	else if(buffer== &buffer_b[AUDIO_BUFFER_SIZE])
    6dc6:	e5 5e       	subi	r30, 0xE5	; 229
    6dc8:	f9 40       	sbci	r31, 0x09	; 9
    6dca:	79 f4       	brne	.+30     	; 0x6dea <__vector_23+0x68>
	{
		buffer=buffer_a;
    6dcc:	85 ee       	ldi	r24, 0xE5	; 229
    6dce:	95 e0       	ldi	r25, 0x05	; 5
    6dd0:	90 93 e6 09 	sts	0x09E6, r25
    6dd4:	80 93 e5 09 	sts	0x09E5, r24
		audio_buffer=buffer_b;
    6dd8:	85 ee       	ldi	r24, 0xE5	; 229
    6dda:	97 e0       	ldi	r25, 0x07	; 7
    6ddc:	90 93 25 0c 	sts	0x0C25, r25
    6de0:	80 93 24 0c 	sts	0x0C24, r24
		audio_swapflag=TRUE;
    6de4:	81 e0       	ldi	r24, 0x01	; 1
    6de6:	80 93 23 0c 	sts	0x0C23, r24
	};
}
    6dea:	ff 91       	pop	r31
    6dec:	ef 91       	pop	r30
    6dee:	9f 91       	pop	r25
    6df0:	8f 91       	pop	r24
    6df2:	0f 90       	pop	r0
    6df4:	0b be       	out	0x3b, r0	; 59
    6df6:	0f 90       	pop	r0
    6df8:	0f be       	out	0x3f, r0	; 63
    6dfa:	0f 90       	pop	r0
    6dfc:	1f 90       	pop	r1
    6dfe:	18 95       	reti

00006e00 <audio_init>:
	static char buffer_a[AUDIO_BUFFER_SIZE];
	static char buffer_b[AUDIO_BUFFER_SIZE];
	static char *buffer;

void audio_init(void)
{
    6e00:	ef 92       	push	r14
    6e02:	ff 92       	push	r15
    6e04:	0f 93       	push	r16
    6e06:	1f 93       	push	r17
	//Setup timer 0
	TCCR0A |=_BV(WGM00);	// WGM=001 phase correct PWM
    6e08:	84 b5       	in	r24, 0x24	; 36
    6e0a:	81 60       	ori	r24, 0x01	; 1
    6e0c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=_BV(COM0A1);	// non-inverted PWM
    6e0e:	84 b5       	in	r24, 0x24	; 36
    6e10:	80 68       	ori	r24, 0x80	; 128
    6e12:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=_BV(CS00);		// = Fosc (gives 510cy/sample & 15.686kHz sample rate @ 8MHz)
    6e14:	85 b5       	in	r24, 0x25	; 37
    6e16:	81 60       	ori	r24, 0x01	; 1
    6e18:	85 bd       	out	0x25, r24	; 37

	memset(buffer_a, 0x80, AUDIO_BUFFER_SIZE);
    6e1a:	85 ee       	ldi	r24, 0xE5	; 229
    6e1c:	e8 2e       	mov	r14, r24
    6e1e:	85 e0       	ldi	r24, 0x05	; 5
    6e20:	f8 2e       	mov	r15, r24
    6e22:	c7 01       	movw	r24, r14
    6e24:	60 e8       	ldi	r22, 0x80	; 128
    6e26:	70 e0       	ldi	r23, 0x00	; 0
    6e28:	40 e0       	ldi	r20, 0x00	; 0
    6e2a:	52 e0       	ldi	r21, 0x02	; 2
    6e2c:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>
	memset(buffer_b, 0x80, AUDIO_BUFFER_SIZE);
    6e30:	05 ee       	ldi	r16, 0xE5	; 229
    6e32:	17 e0       	ldi	r17, 0x07	; 7
    6e34:	c8 01       	movw	r24, r16
    6e36:	60 e8       	ldi	r22, 0x80	; 128
    6e38:	70 e0       	ldi	r23, 0x00	; 0
    6e3a:	40 e0       	ldi	r20, 0x00	; 0
    6e3c:	52 e0       	ldi	r21, 0x02	; 2
    6e3e:	0e 94 03 41 	call	0x8206	; 0x8206 <memset>

	audio_buffer = buffer_b;
    6e42:	10 93 25 0c 	sts	0x0C25, r17
    6e46:	00 93 24 0c 	sts	0x0C24, r16
	audio_swapflag = TRUE;
    6e4a:	81 e0       	ldi	r24, 0x01	; 1
    6e4c:	80 93 23 0c 	sts	0x0C23, r24
	buffer = buffer_a;
    6e50:	f0 92 e6 09 	sts	0x09E6, r15
    6e54:	e0 92 e5 09 	sts	0x09E5, r14

	TIMSK0 |=_BV(TOIE0);
    6e58:	ee e6       	ldi	r30, 0x6E	; 110
    6e5a:	f0 e0       	ldi	r31, 0x00	; 0
    6e5c:	80 81       	ld	r24, Z
    6e5e:	81 60       	ori	r24, 0x01	; 1
    6e60:	80 83       	st	Z, r24

	DDRB |=_BV(PB7);	//OC0A
    6e62:	27 9a       	sbi	0x04, 7	; 4
}
    6e64:	1f 91       	pop	r17
    6e66:	0f 91       	pop	r16
    6e68:	ff 90       	pop	r15
    6e6a:	ef 90       	pop	r14
    6e6c:	08 95       	ret

00006e6e <uart0_isrtx_enable>:
	volatile char uart_isr_nest=FALSE;


void uart0_isrtx_enable(void)
{
	UCSR0B |= _BV(UDRIE0);	// tx interrupt
    6e6e:	e1 ec       	ldi	r30, 0xC1	; 193
    6e70:	f0 e0       	ldi	r31, 0x00	; 0
    6e72:	80 81       	ld	r24, Z
    6e74:	80 62       	ori	r24, 0x20	; 32
    6e76:	80 83       	st	Z, r24
}
    6e78:	08 95       	ret

00006e7a <uart1_isrtx_enable>:

void uart1_isrtx_enable(void)
{
	UCSR1B |= _BV(UDRIE1);	// tx interrupt
    6e7a:	e9 ec       	ldi	r30, 0xC9	; 201
    6e7c:	f0 e0       	ldi	r31, 0x00	; 0
    6e7e:	80 81       	ld	r24, Z
    6e80:	80 62       	ori	r24, 0x20	; 32
    6e82:	80 83       	st	Z, r24
}
    6e84:	08 95       	ret

00006e86 <__vector_25>:
	if(fifo_ptr->post_fptr)						\
			fifo_ptr->post_fptr();				\
}												\

ISR(USART0_RX_vect)
{
    6e86:	1f 92       	push	r1
    6e88:	0f 92       	push	r0
    6e8a:	0f b6       	in	r0, 0x3f	; 63
    6e8c:	0f 92       	push	r0
    6e8e:	0b b6       	in	r0, 0x3b	; 59
    6e90:	0f 92       	push	r0
    6e92:	11 24       	eor	r1, r1
    6e94:	2f 93       	push	r18
    6e96:	3f 93       	push	r19
    6e98:	4f 93       	push	r20
    6e9a:	5f 93       	push	r21
    6e9c:	6f 93       	push	r22
    6e9e:	7f 93       	push	r23
    6ea0:	8f 93       	push	r24
    6ea2:	9f 93       	push	r25
    6ea4:	af 93       	push	r26
    6ea6:	bf 93       	push	r27
    6ea8:	ef 93       	push	r30
    6eaa:	ff 93       	push	r31
    6eac:	df 93       	push	r29
    6eae:	cf 93       	push	r28
    6eb0:	0f 92       	push	r0
    6eb2:	cd b7       	in	r28, 0x3d	; 61
    6eb4:	de b7       	in	r29, 0x3e	; 62
	volatile char temp;
	if(uart_isr_nest)
    6eb6:	80 91 e7 09 	lds	r24, 0x09E7
    6eba:	88 23       	and	r24, r24
    6ebc:	31 f0       	breq	.+12     	; 0x6eca <__vector_25+0x44>
	{
		UCSR0B &=~_BV(RXCIE0);	// disable this ISR
    6ebe:	80 91 c1 00 	lds	r24, 0x00C1
    6ec2:	8f 77       	andi	r24, 0x7F	; 127
    6ec4:	80 93 c1 00 	sts	0x00C1, r24
		sei();
    6ec8:	78 94       	sei
	};
	if(uart0_fifo_rx_ptr)
    6eca:	e0 91 3a 0c 	lds	r30, 0x0C3A
    6ece:	f0 91 3b 0c 	lds	r31, 0x0C3B
    6ed2:	30 97       	sbiw	r30, 0x00	; 0
    6ed4:	09 f4       	brne	.+2      	; 0x6ed8 <__vector_25+0x52>
    6ed6:	41 c0       	rjmp	.+130    	; 0x6f5a <__vector_25+0xd4>
	{
		if(!uart0_fifo_rx_ptr->full)
    6ed8:	85 81       	ldd	r24, Z+5	; 0x05
    6eda:	88 23       	and	r24, r24
    6edc:	09 f0       	breq	.+2      	; 0x6ee0 <__vector_25+0x5a>
    6ede:	3d c0       	rjmp	.+122    	; 0x6f5a <__vector_25+0xd4>
			UART_FIFO_WRITE_CHAR(uart0_fifo_rx_ptr,UDR0)
    6ee0:	06 80       	ldd	r0, Z+6	; 0x06
    6ee2:	f7 81       	ldd	r31, Z+7	; 0x07
    6ee4:	e0 2d       	mov	r30, r0
    6ee6:	80 91 c6 00 	lds	r24, 0x00C6
    6eea:	80 83       	st	Z, r24
    6eec:	e0 91 3a 0c 	lds	r30, 0x0C3A
    6ef0:	f0 91 3b 0c 	lds	r31, 0x0C3B
    6ef4:	86 81       	ldd	r24, Z+6	; 0x06
    6ef6:	97 81       	ldd	r25, Z+7	; 0x07
    6ef8:	01 96       	adiw	r24, 0x01	; 1
    6efa:	97 83       	std	Z+7, r25	; 0x07
    6efc:	86 83       	std	Z+6, r24	; 0x06
    6efe:	26 81       	ldd	r18, Z+6	; 0x06
    6f00:	37 81       	ldd	r19, Z+7	; 0x07
    6f02:	84 85       	ldd	r24, Z+12	; 0x0c
    6f04:	95 85       	ldd	r25, Z+13	; 0x0d
    6f06:	28 17       	cp	r18, r24
    6f08:	39 07       	cpc	r19, r25
    6f0a:	21 f4       	brne	.+8      	; 0x6f14 <__vector_25+0x8e>
    6f0c:	82 85       	ldd	r24, Z+10	; 0x0a
    6f0e:	93 85       	ldd	r25, Z+11	; 0x0b
    6f10:	97 83       	std	Z+7, r25	; 0x07
    6f12:	86 83       	std	Z+6, r24	; 0x06
    6f14:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6f16:	f8 94       	cli
    6f18:	80 81       	ld	r24, Z
    6f1a:	91 81       	ldd	r25, Z+1	; 0x01
    6f1c:	01 97       	sbiw	r24, 0x01	; 1
    6f1e:	91 83       	std	Z+1, r25	; 0x01
    6f20:	80 83       	st	Z, r24
    6f22:	82 81       	ldd	r24, Z+2	; 0x02
    6f24:	93 81       	ldd	r25, Z+3	; 0x03
    6f26:	01 96       	adiw	r24, 0x01	; 1
    6f28:	93 83       	std	Z+3, r25	; 0x03
    6f2a:	82 83       	std	Z+2, r24	; 0x02
    6f2c:	80 81       	ld	r24, Z
    6f2e:	91 81       	ldd	r25, Z+1	; 0x01
    6f30:	89 2b       	or	r24, r25
    6f32:	11 f4       	brne	.+4      	; 0x6f38 <__vector_25+0xb2>
    6f34:	81 e0       	ldi	r24, 0x01	; 1
    6f36:	85 83       	std	Z+5, r24	; 0x05
    6f38:	82 81       	ldd	r24, Z+2	; 0x02
    6f3a:	93 81       	ldd	r25, Z+3	; 0x03
    6f3c:	89 2b       	or	r24, r25
    6f3e:	09 f0       	breq	.+2      	; 0x6f42 <__vector_25+0xbc>
    6f40:	14 82       	std	Z+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6f42:	2f bf       	out	0x3f, r18	; 63
    6f44:	e0 91 3a 0c 	lds	r30, 0x0C3A
    6f48:	f0 91 3b 0c 	lds	r31, 0x0C3B
    6f4c:	06 84       	ldd	r0, Z+14	; 0x0e
    6f4e:	f7 85       	ldd	r31, Z+15	; 0x0f
    6f50:	e0 2d       	mov	r30, r0
    6f52:	30 97       	sbiw	r30, 0x00	; 0
    6f54:	29 f0       	breq	.+10     	; 0x6f60 <__vector_25+0xda>
    6f56:	09 95       	icall
    6f58:	03 c0       	rjmp	.+6      	; 0x6f60 <__vector_25+0xda>
		else
			temp=UDR0;
	}
	else
		temp=UDR0;
    6f5a:	80 91 c6 00 	lds	r24, 0x00C6
    6f5e:	89 83       	std	Y+1, r24	; 0x01
		
	cli();					// disable nesting
    6f60:	f8 94       	cli
	UCSR0B |=_BV(RXCIE0);	// enable this ISR
    6f62:	80 91 c1 00 	lds	r24, 0x00C1
    6f66:	80 68       	ori	r24, 0x80	; 128
    6f68:	80 93 c1 00 	sts	0x00C1, r24
}
    6f6c:	0f 90       	pop	r0
    6f6e:	cf 91       	pop	r28
    6f70:	df 91       	pop	r29
    6f72:	ff 91       	pop	r31
    6f74:	ef 91       	pop	r30
    6f76:	bf 91       	pop	r27
    6f78:	af 91       	pop	r26
    6f7a:	9f 91       	pop	r25
    6f7c:	8f 91       	pop	r24
    6f7e:	7f 91       	pop	r23
    6f80:	6f 91       	pop	r22
    6f82:	5f 91       	pop	r21
    6f84:	4f 91       	pop	r20
    6f86:	3f 91       	pop	r19
    6f88:	2f 91       	pop	r18
    6f8a:	0f 90       	pop	r0
    6f8c:	0b be       	out	0x3b, r0	; 59
    6f8e:	0f 90       	pop	r0
    6f90:	0f be       	out	0x3f, r0	; 63
    6f92:	0f 90       	pop	r0
    6f94:	1f 90       	pop	r1
    6f96:	18 95       	reti

00006f98 <__vector_36>:

ISR(USART1_RX_vect)
{
    6f98:	1f 92       	push	r1
    6f9a:	0f 92       	push	r0
    6f9c:	0f b6       	in	r0, 0x3f	; 63
    6f9e:	0f 92       	push	r0
    6fa0:	0b b6       	in	r0, 0x3b	; 59
    6fa2:	0f 92       	push	r0
    6fa4:	11 24       	eor	r1, r1
    6fa6:	2f 93       	push	r18
    6fa8:	3f 93       	push	r19
    6faa:	4f 93       	push	r20
    6fac:	5f 93       	push	r21
    6fae:	6f 93       	push	r22
    6fb0:	7f 93       	push	r23
    6fb2:	8f 93       	push	r24
    6fb4:	9f 93       	push	r25
    6fb6:	af 93       	push	r26
    6fb8:	bf 93       	push	r27
    6fba:	ef 93       	push	r30
    6fbc:	ff 93       	push	r31
    6fbe:	df 93       	push	r29
    6fc0:	cf 93       	push	r28
    6fc2:	0f 92       	push	r0
    6fc4:	cd b7       	in	r28, 0x3d	; 61
    6fc6:	de b7       	in	r29, 0x3e	; 62
	volatile char temp;
	if(uart_isr_nest)
    6fc8:	80 91 e7 09 	lds	r24, 0x09E7
    6fcc:	88 23       	and	r24, r24
    6fce:	31 f0       	breq	.+12     	; 0x6fdc <__vector_36+0x44>
	{
		UCSR1B &=~_BV(RXCIE1);	// disable this ISR
    6fd0:	80 91 c9 00 	lds	r24, 0x00C9
    6fd4:	8f 77       	andi	r24, 0x7F	; 127
    6fd6:	80 93 c9 00 	sts	0x00C9, r24
		sei();
    6fda:	78 94       	sei
	};
	if(uart1_fifo_rx_ptr)
    6fdc:	e0 91 26 0c 	lds	r30, 0x0C26
    6fe0:	f0 91 27 0c 	lds	r31, 0x0C27
    6fe4:	30 97       	sbiw	r30, 0x00	; 0
    6fe6:	09 f4       	brne	.+2      	; 0x6fea <__vector_36+0x52>
    6fe8:	41 c0       	rjmp	.+130    	; 0x706c <__vector_36+0xd4>
	{
		if(!uart1_fifo_rx_ptr->full)
    6fea:	85 81       	ldd	r24, Z+5	; 0x05
    6fec:	88 23       	and	r24, r24
    6fee:	09 f0       	breq	.+2      	; 0x6ff2 <__vector_36+0x5a>
    6ff0:	3d c0       	rjmp	.+122    	; 0x706c <__vector_36+0xd4>
			UART_FIFO_WRITE_CHAR(uart1_fifo_rx_ptr,UDR1)
    6ff2:	06 80       	ldd	r0, Z+6	; 0x06
    6ff4:	f7 81       	ldd	r31, Z+7	; 0x07
    6ff6:	e0 2d       	mov	r30, r0
    6ff8:	80 91 ce 00 	lds	r24, 0x00CE
    6ffc:	80 83       	st	Z, r24
    6ffe:	e0 91 26 0c 	lds	r30, 0x0C26
    7002:	f0 91 27 0c 	lds	r31, 0x0C27
    7006:	86 81       	ldd	r24, Z+6	; 0x06
    7008:	97 81       	ldd	r25, Z+7	; 0x07
    700a:	01 96       	adiw	r24, 0x01	; 1
    700c:	97 83       	std	Z+7, r25	; 0x07
    700e:	86 83       	std	Z+6, r24	; 0x06
    7010:	26 81       	ldd	r18, Z+6	; 0x06
    7012:	37 81       	ldd	r19, Z+7	; 0x07
    7014:	84 85       	ldd	r24, Z+12	; 0x0c
    7016:	95 85       	ldd	r25, Z+13	; 0x0d
    7018:	28 17       	cp	r18, r24
    701a:	39 07       	cpc	r19, r25
    701c:	21 f4       	brne	.+8      	; 0x7026 <__vector_36+0x8e>
    701e:	82 85       	ldd	r24, Z+10	; 0x0a
    7020:	93 85       	ldd	r25, Z+11	; 0x0b
    7022:	97 83       	std	Z+7, r25	; 0x07
    7024:	86 83       	std	Z+6, r24	; 0x06
    7026:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7028:	f8 94       	cli
    702a:	80 81       	ld	r24, Z
    702c:	91 81       	ldd	r25, Z+1	; 0x01
    702e:	01 97       	sbiw	r24, 0x01	; 1
    7030:	91 83       	std	Z+1, r25	; 0x01
    7032:	80 83       	st	Z, r24
    7034:	82 81       	ldd	r24, Z+2	; 0x02
    7036:	93 81       	ldd	r25, Z+3	; 0x03
    7038:	01 96       	adiw	r24, 0x01	; 1
    703a:	93 83       	std	Z+3, r25	; 0x03
    703c:	82 83       	std	Z+2, r24	; 0x02
    703e:	80 81       	ld	r24, Z
    7040:	91 81       	ldd	r25, Z+1	; 0x01
    7042:	89 2b       	or	r24, r25
    7044:	11 f4       	brne	.+4      	; 0x704a <__vector_36+0xb2>
    7046:	81 e0       	ldi	r24, 0x01	; 1
    7048:	85 83       	std	Z+5, r24	; 0x05
    704a:	82 81       	ldd	r24, Z+2	; 0x02
    704c:	93 81       	ldd	r25, Z+3	; 0x03
    704e:	89 2b       	or	r24, r25
    7050:	09 f0       	breq	.+2      	; 0x7054 <__vector_36+0xbc>
    7052:	14 82       	std	Z+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7054:	2f bf       	out	0x3f, r18	; 63
    7056:	e0 91 26 0c 	lds	r30, 0x0C26
    705a:	f0 91 27 0c 	lds	r31, 0x0C27
    705e:	06 84       	ldd	r0, Z+14	; 0x0e
    7060:	f7 85       	ldd	r31, Z+15	; 0x0f
    7062:	e0 2d       	mov	r30, r0
    7064:	30 97       	sbiw	r30, 0x00	; 0
    7066:	29 f0       	breq	.+10     	; 0x7072 <__vector_36+0xda>
    7068:	09 95       	icall
    706a:	03 c0       	rjmp	.+6      	; 0x7072 <__vector_36+0xda>
		else
			temp=UDR1;
	}
	else
		temp=UDR1;
    706c:	80 91 ce 00 	lds	r24, 0x00CE
    7070:	89 83       	std	Y+1, r24	; 0x01
	cli();					// disable nesting
    7072:	f8 94       	cli
	UCSR1B |=_BV(RXCIE1);	// enable this ISR
    7074:	80 91 c9 00 	lds	r24, 0x00C9
    7078:	80 68       	ori	r24, 0x80	; 128
    707a:	80 93 c9 00 	sts	0x00C9, r24
}
    707e:	0f 90       	pop	r0
    7080:	cf 91       	pop	r28
    7082:	df 91       	pop	r29
    7084:	ff 91       	pop	r31
    7086:	ef 91       	pop	r30
    7088:	bf 91       	pop	r27
    708a:	af 91       	pop	r26
    708c:	9f 91       	pop	r25
    708e:	8f 91       	pop	r24
    7090:	7f 91       	pop	r23
    7092:	6f 91       	pop	r22
    7094:	5f 91       	pop	r21
    7096:	4f 91       	pop	r20
    7098:	3f 91       	pop	r19
    709a:	2f 91       	pop	r18
    709c:	0f 90       	pop	r0
    709e:	0b be       	out	0x3b, r0	; 59
    70a0:	0f 90       	pop	r0
    70a2:	0f be       	out	0x3f, r0	; 63
    70a4:	0f 90       	pop	r0
    70a6:	1f 90       	pop	r1
    70a8:	18 95       	reti

000070aa <__vector_26>:
			source_fifo.full=FALSE;					\
	}												\
}													\

ISR(USART0_UDRE_vect)
{
    70aa:	1f 92       	push	r1
    70ac:	0f 92       	push	r0
    70ae:	0f b6       	in	r0, 0x3f	; 63
    70b0:	0f 92       	push	r0
    70b2:	0b b6       	in	r0, 0x3b	; 59
    70b4:	0f 92       	push	r0
    70b6:	11 24       	eor	r1, r1
    70b8:	2f 93       	push	r18
    70ba:	3f 93       	push	r19
    70bc:	8f 93       	push	r24
    70be:	9f 93       	push	r25
    70c0:	ef 93       	push	r30
    70c2:	ff 93       	push	r31
	//enable nesting
	if(uart_isr_nest)
    70c4:	80 91 e7 09 	lds	r24, 0x09E7
    70c8:	88 23       	and	r24, r24
    70ca:	31 f0       	breq	.+12     	; 0x70d8 <__vector_26+0x2e>
	{
		UCSR0B &=~_BV(UDRIE0);	// disable this ISR
    70cc:	80 91 c1 00 	lds	r24, 0x00C1
    70d0:	8f 7d       	andi	r24, 0xDF	; 223
    70d2:	80 93 c1 00 	sts	0x00C1, r24
		sei();
    70d6:	78 94       	sei
	};

	//read next byte if available, else disable this isr
	if(!uart0_fifo_tx.empty)
    70d8:	80 91 2c 0c 	lds	r24, 0x0C2C
    70dc:	88 23       	and	r24, r24
    70de:	09 f0       	breq	.+2      	; 0x70e2 <__vector_26+0x38>
    70e0:	4e c0       	rjmp	.+156    	; 0x717e <__vector_26+0xd4>
	{
		UART_FIFO_READ_CHAR(UDR0, uart0_fifo_tx);
    70e2:	e0 91 30 0c 	lds	r30, 0x0C30
    70e6:	f0 91 31 0c 	lds	r31, 0x0C31
    70ea:	80 81       	ld	r24, Z
    70ec:	80 93 c6 00 	sts	0x00C6, r24
    70f0:	80 91 30 0c 	lds	r24, 0x0C30
    70f4:	90 91 31 0c 	lds	r25, 0x0C31
    70f8:	01 96       	adiw	r24, 0x01	; 1
    70fa:	90 93 31 0c 	sts	0x0C31, r25
    70fe:	80 93 30 0c 	sts	0x0C30, r24
    7102:	20 91 30 0c 	lds	r18, 0x0C30
    7106:	30 91 31 0c 	lds	r19, 0x0C31
    710a:	80 91 34 0c 	lds	r24, 0x0C34
    710e:	90 91 35 0c 	lds	r25, 0x0C35
    7112:	28 17       	cp	r18, r24
    7114:	39 07       	cpc	r19, r25
    7116:	41 f4       	brne	.+16     	; 0x7128 <__vector_26+0x7e>
    7118:	80 91 32 0c 	lds	r24, 0x0C32
    711c:	90 91 33 0c 	lds	r25, 0x0C33
    7120:	90 93 31 0c 	sts	0x0C31, r25
    7124:	80 93 30 0c 	sts	0x0C30, r24
    7128:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    712a:	f8 94       	cli
    712c:	80 91 28 0c 	lds	r24, 0x0C28
    7130:	90 91 29 0c 	lds	r25, 0x0C29
    7134:	01 96       	adiw	r24, 0x01	; 1
    7136:	90 93 29 0c 	sts	0x0C29, r25
    713a:	80 93 28 0c 	sts	0x0C28, r24
    713e:	80 91 2a 0c 	lds	r24, 0x0C2A
    7142:	90 91 2b 0c 	lds	r25, 0x0C2B
    7146:	01 97       	sbiw	r24, 0x01	; 1
    7148:	90 93 2b 0c 	sts	0x0C2B, r25
    714c:	80 93 2a 0c 	sts	0x0C2A, r24
    7150:	80 91 2a 0c 	lds	r24, 0x0C2A
    7154:	90 91 2b 0c 	lds	r25, 0x0C2B
    7158:	89 2b       	or	r24, r25
    715a:	19 f4       	brne	.+6      	; 0x7162 <__vector_26+0xb8>
    715c:	81 e0       	ldi	r24, 0x01	; 1
    715e:	80 93 2c 0c 	sts	0x0C2C, r24
    7162:	80 91 28 0c 	lds	r24, 0x0C28
    7166:	90 91 29 0c 	lds	r25, 0x0C29
    716a:	89 2b       	or	r24, r25
    716c:	11 f0       	breq	.+4      	; 0x7172 <__vector_26+0xc8>
    716e:	10 92 2d 0c 	sts	0x0C2D, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7172:	2f bf       	out	0x3f, r18	; 63
		cli();	
    7174:	f8 94       	cli
		UCSR0B |=_BV(UDRIE0);
    7176:	80 91 c1 00 	lds	r24, 0x00C1
    717a:	80 62       	ori	r24, 0x20	; 32
    717c:	04 c0       	rjmp	.+8      	; 0x7186 <__vector_26+0xdc>
	}
	else
	{
		cli();	
    717e:	f8 94       	cli
		UCSR0B &=~_BV(UDRIE0);
    7180:	80 91 c1 00 	lds	r24, 0x00C1
    7184:	8f 7d       	andi	r24, 0xDF	; 223
    7186:	80 93 c1 00 	sts	0x00C1, r24
	};
}
    718a:	ff 91       	pop	r31
    718c:	ef 91       	pop	r30
    718e:	9f 91       	pop	r25
    7190:	8f 91       	pop	r24
    7192:	3f 91       	pop	r19
    7194:	2f 91       	pop	r18
    7196:	0f 90       	pop	r0
    7198:	0b be       	out	0x3b, r0	; 59
    719a:	0f 90       	pop	r0
    719c:	0f be       	out	0x3f, r0	; 63
    719e:	0f 90       	pop	r0
    71a0:	1f 90       	pop	r1
    71a2:	18 95       	reti

000071a4 <__vector_37>:

ISR(USART1_UDRE_vect)
{
    71a4:	1f 92       	push	r1
    71a6:	0f 92       	push	r0
    71a8:	0f b6       	in	r0, 0x3f	; 63
    71aa:	0f 92       	push	r0
    71ac:	0b b6       	in	r0, 0x3b	; 59
    71ae:	0f 92       	push	r0
    71b0:	11 24       	eor	r1, r1
    71b2:	2f 93       	push	r18
    71b4:	3f 93       	push	r19
    71b6:	8f 93       	push	r24
    71b8:	9f 93       	push	r25
    71ba:	ef 93       	push	r30
    71bc:	ff 93       	push	r31
	//enable nesting
	if(uart_isr_nest)
    71be:	80 91 e7 09 	lds	r24, 0x09E7
    71c2:	88 23       	and	r24, r24
    71c4:	31 f0       	breq	.+12     	; 0x71d2 <__vector_37+0x2e>
	{
		UCSR1B &=~_BV(UDRIE1);	// disable this ISR
    71c6:	80 91 c9 00 	lds	r24, 0x00C9
    71ca:	8f 7d       	andi	r24, 0xDF	; 223
    71cc:	80 93 c9 00 	sts	0x00C9, r24
		sei();
    71d0:	78 94       	sei
	};

	//read next byte if available, else disable this isr
	if(!uart1_fifo_tx.empty)
    71d2:	80 91 40 0c 	lds	r24, 0x0C40
    71d6:	88 23       	and	r24, r24
    71d8:	09 f0       	breq	.+2      	; 0x71dc <__vector_37+0x38>
    71da:	4e c0       	rjmp	.+156    	; 0x7278 <__vector_37+0xd4>
	{
		UART_FIFO_READ_CHAR(UDR1, uart1_fifo_tx);
    71dc:	e0 91 44 0c 	lds	r30, 0x0C44
    71e0:	f0 91 45 0c 	lds	r31, 0x0C45
    71e4:	80 81       	ld	r24, Z
    71e6:	80 93 ce 00 	sts	0x00CE, r24
    71ea:	80 91 44 0c 	lds	r24, 0x0C44
    71ee:	90 91 45 0c 	lds	r25, 0x0C45
    71f2:	01 96       	adiw	r24, 0x01	; 1
    71f4:	90 93 45 0c 	sts	0x0C45, r25
    71f8:	80 93 44 0c 	sts	0x0C44, r24
    71fc:	20 91 44 0c 	lds	r18, 0x0C44
    7200:	30 91 45 0c 	lds	r19, 0x0C45
    7204:	80 91 48 0c 	lds	r24, 0x0C48
    7208:	90 91 49 0c 	lds	r25, 0x0C49
    720c:	28 17       	cp	r18, r24
    720e:	39 07       	cpc	r19, r25
    7210:	41 f4       	brne	.+16     	; 0x7222 <__vector_37+0x7e>
    7212:	80 91 46 0c 	lds	r24, 0x0C46
    7216:	90 91 47 0c 	lds	r25, 0x0C47
    721a:	90 93 45 0c 	sts	0x0C45, r25
    721e:	80 93 44 0c 	sts	0x0C44, r24
    7222:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7224:	f8 94       	cli
    7226:	80 91 3c 0c 	lds	r24, 0x0C3C
    722a:	90 91 3d 0c 	lds	r25, 0x0C3D
    722e:	01 96       	adiw	r24, 0x01	; 1
    7230:	90 93 3d 0c 	sts	0x0C3D, r25
    7234:	80 93 3c 0c 	sts	0x0C3C, r24
    7238:	80 91 3e 0c 	lds	r24, 0x0C3E
    723c:	90 91 3f 0c 	lds	r25, 0x0C3F
    7240:	01 97       	sbiw	r24, 0x01	; 1
    7242:	90 93 3f 0c 	sts	0x0C3F, r25
    7246:	80 93 3e 0c 	sts	0x0C3E, r24
    724a:	80 91 3e 0c 	lds	r24, 0x0C3E
    724e:	90 91 3f 0c 	lds	r25, 0x0C3F
    7252:	89 2b       	or	r24, r25
    7254:	19 f4       	brne	.+6      	; 0x725c <__vector_37+0xb8>
    7256:	81 e0       	ldi	r24, 0x01	; 1
    7258:	80 93 40 0c 	sts	0x0C40, r24
    725c:	80 91 3c 0c 	lds	r24, 0x0C3C
    7260:	90 91 3d 0c 	lds	r25, 0x0C3D
    7264:	89 2b       	or	r24, r25
    7266:	11 f0       	breq	.+4      	; 0x726c <__vector_37+0xc8>
    7268:	10 92 41 0c 	sts	0x0C41, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    726c:	2f bf       	out	0x3f, r18	; 63
		cli();	
    726e:	f8 94       	cli
		UCSR1B |=_BV(UDRIE1);
    7270:	80 91 c9 00 	lds	r24, 0x00C9
    7274:	80 62       	ori	r24, 0x20	; 32
    7276:	04 c0       	rjmp	.+8      	; 0x7280 <__vector_37+0xdc>
	}
	else
	{
		cli();	
    7278:	f8 94       	cli
		UCSR1B &=~_BV(UDRIE1);
    727a:	80 91 c9 00 	lds	r24, 0x00C9
    727e:	8f 7d       	andi	r24, 0xDF	; 223
    7280:	80 93 c9 00 	sts	0x00C9, r24
	};
}
    7284:	ff 91       	pop	r31
    7286:	ef 91       	pop	r30
    7288:	9f 91       	pop	r25
    728a:	8f 91       	pop	r24
    728c:	3f 91       	pop	r19
    728e:	2f 91       	pop	r18
    7290:	0f 90       	pop	r0
    7292:	0b be       	out	0x3b, r0	; 59
    7294:	0f 90       	pop	r0
    7296:	0f be       	out	0x3f, r0	; 63
    7298:	0f 90       	pop	r0
    729a:	1f 90       	pop	r1
    729c:	18 95       	reti

0000729e <uart1_rx_stream>:
{
	return fifo_read_char(uart0_fifo_rx_ptr);
}

char uart1_rx_stream(char data, FILE junk)
{
    729e:	af 92       	push	r10
    72a0:	bf 92       	push	r11
    72a2:	cf 92       	push	r12
    72a4:	df 92       	push	r13
    72a6:	ef 92       	push	r14
    72a8:	ff 92       	push	r15
    72aa:	0f 93       	push	r16
    72ac:	1f 93       	push	r17
    72ae:	df 93       	push	r29
    72b0:	cf 93       	push	r28
    72b2:	cd b7       	in	r28, 0x3d	; 61
    72b4:	de b7       	in	r29, 0x3e	; 62
    72b6:	2e 97       	sbiw	r28, 0x0e	; 14
    72b8:	0f b6       	in	r0, 0x3f	; 63
    72ba:	f8 94       	cli
    72bc:	de bf       	out	0x3e, r29	; 62
    72be:	0f be       	out	0x3f, r0	; 63
    72c0:	cd bf       	out	0x3d, r28	; 61
    72c2:	a9 82       	std	Y+1, r10	; 0x01
    72c4:	ba 82       	std	Y+2, r11	; 0x02
    72c6:	cb 82       	std	Y+3, r12	; 0x03
    72c8:	dc 82       	std	Y+4, r13	; 0x04
    72ca:	ed 82       	std	Y+5, r14	; 0x05
    72cc:	fe 82       	std	Y+6, r15	; 0x06
    72ce:	0f 83       	std	Y+7, r16	; 0x07
    72d0:	18 87       	std	Y+8, r17	; 0x08
    72d2:	29 87       	std	Y+9, r18	; 0x09
    72d4:	3a 87       	std	Y+10, r19	; 0x0a
    72d6:	4b 87       	std	Y+11, r20	; 0x0b
    72d8:	5c 87       	std	Y+12, r21	; 0x0c
    72da:	6d 87       	std	Y+13, r22	; 0x0d
    72dc:	7e 87       	std	Y+14, r23	; 0x0e
	return fifo_read_char(uart1_fifo_rx_ptr);
    72de:	80 91 26 0c 	lds	r24, 0x0C26
    72e2:	90 91 27 0c 	lds	r25, 0x0C27
    72e6:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
}
    72ea:	2e 96       	adiw	r28, 0x0e	; 14
    72ec:	0f b6       	in	r0, 0x3f	; 63
    72ee:	f8 94       	cli
    72f0:	de bf       	out	0x3e, r29	; 62
    72f2:	0f be       	out	0x3f, r0	; 63
    72f4:	cd bf       	out	0x3d, r28	; 61
    72f6:	cf 91       	pop	r28
    72f8:	df 91       	pop	r29
    72fa:	1f 91       	pop	r17
    72fc:	0f 91       	pop	r16
    72fe:	ff 90       	pop	r15
    7300:	ef 90       	pop	r14
    7302:	df 90       	pop	r13
    7304:	cf 90       	pop	r12
    7306:	bf 90       	pop	r11
    7308:	af 90       	pop	r10
    730a:	08 95       	ret

0000730c <uart0_rx_stream>:
{
	fifo_write_char(&uart1_fifo_tx, data);
}

char uart0_rx_stream(char data, FILE junk)
{
    730c:	af 92       	push	r10
    730e:	bf 92       	push	r11
    7310:	cf 92       	push	r12
    7312:	df 92       	push	r13
    7314:	ef 92       	push	r14
    7316:	ff 92       	push	r15
    7318:	0f 93       	push	r16
    731a:	1f 93       	push	r17
    731c:	df 93       	push	r29
    731e:	cf 93       	push	r28
    7320:	cd b7       	in	r28, 0x3d	; 61
    7322:	de b7       	in	r29, 0x3e	; 62
    7324:	2e 97       	sbiw	r28, 0x0e	; 14
    7326:	0f b6       	in	r0, 0x3f	; 63
    7328:	f8 94       	cli
    732a:	de bf       	out	0x3e, r29	; 62
    732c:	0f be       	out	0x3f, r0	; 63
    732e:	cd bf       	out	0x3d, r28	; 61
    7330:	a9 82       	std	Y+1, r10	; 0x01
    7332:	ba 82       	std	Y+2, r11	; 0x02
    7334:	cb 82       	std	Y+3, r12	; 0x03
    7336:	dc 82       	std	Y+4, r13	; 0x04
    7338:	ed 82       	std	Y+5, r14	; 0x05
    733a:	fe 82       	std	Y+6, r15	; 0x06
    733c:	0f 83       	std	Y+7, r16	; 0x07
    733e:	18 87       	std	Y+8, r17	; 0x08
    7340:	29 87       	std	Y+9, r18	; 0x09
    7342:	3a 87       	std	Y+10, r19	; 0x0a
    7344:	4b 87       	std	Y+11, r20	; 0x0b
    7346:	5c 87       	std	Y+12, r21	; 0x0c
    7348:	6d 87       	std	Y+13, r22	; 0x0d
    734a:	7e 87       	std	Y+14, r23	; 0x0e
	return fifo_read_char(uart0_fifo_rx_ptr);
    734c:	80 91 3a 0c 	lds	r24, 0x0C3A
    7350:	90 91 3b 0c 	lds	r25, 0x0C3B
    7354:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
}
    7358:	2e 96       	adiw	r28, 0x0e	; 14
    735a:	0f b6       	in	r0, 0x3f	; 63
    735c:	f8 94       	cli
    735e:	de bf       	out	0x3e, r29	; 62
    7360:	0f be       	out	0x3f, r0	; 63
    7362:	cd bf       	out	0x3d, r28	; 61
    7364:	cf 91       	pop	r28
    7366:	df 91       	pop	r29
    7368:	1f 91       	pop	r17
    736a:	0f 91       	pop	r16
    736c:	ff 90       	pop	r15
    736e:	ef 90       	pop	r14
    7370:	df 90       	pop	r13
    7372:	cf 90       	pop	r12
    7374:	bf 90       	pop	r11
    7376:	af 90       	pop	r10
    7378:	08 95       	ret

0000737a <uart1_tx_stream>:
{
	fifo_write_char(&uart0_fifo_tx, data);
}

void uart1_tx_stream(char data, FILE junk)
{
    737a:	af 92       	push	r10
    737c:	bf 92       	push	r11
    737e:	cf 92       	push	r12
    7380:	df 92       	push	r13
    7382:	ef 92       	push	r14
    7384:	ff 92       	push	r15
    7386:	0f 93       	push	r16
    7388:	1f 93       	push	r17
    738a:	df 93       	push	r29
    738c:	cf 93       	push	r28
    738e:	cd b7       	in	r28, 0x3d	; 61
    7390:	de b7       	in	r29, 0x3e	; 62
    7392:	2e 97       	sbiw	r28, 0x0e	; 14
    7394:	0f b6       	in	r0, 0x3f	; 63
    7396:	f8 94       	cli
    7398:	de bf       	out	0x3e, r29	; 62
    739a:	0f be       	out	0x3f, r0	; 63
    739c:	cd bf       	out	0x3d, r28	; 61
    739e:	e8 2f       	mov	r30, r24
    73a0:	a9 82       	std	Y+1, r10	; 0x01
    73a2:	ba 82       	std	Y+2, r11	; 0x02
    73a4:	cb 82       	std	Y+3, r12	; 0x03
    73a6:	dc 82       	std	Y+4, r13	; 0x04
    73a8:	ed 82       	std	Y+5, r14	; 0x05
    73aa:	fe 82       	std	Y+6, r15	; 0x06
    73ac:	0f 83       	std	Y+7, r16	; 0x07
    73ae:	18 87       	std	Y+8, r17	; 0x08
    73b0:	29 87       	std	Y+9, r18	; 0x09
    73b2:	3a 87       	std	Y+10, r19	; 0x0a
    73b4:	4b 87       	std	Y+11, r20	; 0x0b
    73b6:	5c 87       	std	Y+12, r21	; 0x0c
    73b8:	6d 87       	std	Y+13, r22	; 0x0d
    73ba:	7e 87       	std	Y+14, r23	; 0x0e
	fifo_write_char(&uart1_fifo_tx, data);
    73bc:	8c e3       	ldi	r24, 0x3C	; 60
    73be:	9c e0       	ldi	r25, 0x0C	; 12
    73c0:	6e 2f       	mov	r22, r30
    73c2:	0e 94 1c 3b 	call	0x7638	; 0x7638 <fifo_write_char>
}
    73c6:	2e 96       	adiw	r28, 0x0e	; 14
    73c8:	0f b6       	in	r0, 0x3f	; 63
    73ca:	f8 94       	cli
    73cc:	de bf       	out	0x3e, r29	; 62
    73ce:	0f be       	out	0x3f, r0	; 63
    73d0:	cd bf       	out	0x3d, r28	; 61
    73d2:	cf 91       	pop	r28
    73d4:	df 91       	pop	r29
    73d6:	1f 91       	pop	r17
    73d8:	0f 91       	pop	r16
    73da:	ff 90       	pop	r15
    73dc:	ef 90       	pop	r14
    73de:	df 90       	pop	r13
    73e0:	cf 90       	pop	r12
    73e2:	bf 90       	pop	r11
    73e4:	af 90       	pop	r10
    73e6:	08 95       	ret

000073e8 <uart0_tx_stream>:
		UCSR1A &= _BV(U2X1);
}


void uart0_tx_stream(char data, FILE junk)
{
    73e8:	af 92       	push	r10
    73ea:	bf 92       	push	r11
    73ec:	cf 92       	push	r12
    73ee:	df 92       	push	r13
    73f0:	ef 92       	push	r14
    73f2:	ff 92       	push	r15
    73f4:	0f 93       	push	r16
    73f6:	1f 93       	push	r17
    73f8:	df 93       	push	r29
    73fa:	cf 93       	push	r28
    73fc:	cd b7       	in	r28, 0x3d	; 61
    73fe:	de b7       	in	r29, 0x3e	; 62
    7400:	2e 97       	sbiw	r28, 0x0e	; 14
    7402:	0f b6       	in	r0, 0x3f	; 63
    7404:	f8 94       	cli
    7406:	de bf       	out	0x3e, r29	; 62
    7408:	0f be       	out	0x3f, r0	; 63
    740a:	cd bf       	out	0x3d, r28	; 61
    740c:	e8 2f       	mov	r30, r24
    740e:	a9 82       	std	Y+1, r10	; 0x01
    7410:	ba 82       	std	Y+2, r11	; 0x02
    7412:	cb 82       	std	Y+3, r12	; 0x03
    7414:	dc 82       	std	Y+4, r13	; 0x04
    7416:	ed 82       	std	Y+5, r14	; 0x05
    7418:	fe 82       	std	Y+6, r15	; 0x06
    741a:	0f 83       	std	Y+7, r16	; 0x07
    741c:	18 87       	std	Y+8, r17	; 0x08
    741e:	29 87       	std	Y+9, r18	; 0x09
    7420:	3a 87       	std	Y+10, r19	; 0x0a
    7422:	4b 87       	std	Y+11, r20	; 0x0b
    7424:	5c 87       	std	Y+12, r21	; 0x0c
    7426:	6d 87       	std	Y+13, r22	; 0x0d
    7428:	7e 87       	std	Y+14, r23	; 0x0e
	fifo_write_char(&uart0_fifo_tx, data);
    742a:	88 e2       	ldi	r24, 0x28	; 40
    742c:	9c e0       	ldi	r25, 0x0C	; 12
    742e:	6e 2f       	mov	r22, r30
    7430:	0e 94 1c 3b 	call	0x7638	; 0x7638 <fifo_write_char>
}
    7434:	2e 96       	adiw	r28, 0x0e	; 14
    7436:	0f b6       	in	r0, 0x3f	; 63
    7438:	f8 94       	cli
    743a:	de bf       	out	0x3e, r29	; 62
    743c:	0f be       	out	0x3f, r0	; 63
    743e:	cd bf       	out	0x3d, r28	; 61
    7440:	cf 91       	pop	r28
    7442:	df 91       	pop	r29
    7444:	1f 91       	pop	r17
    7446:	0f 91       	pop	r16
    7448:	ff 90       	pop	r15
    744a:	ef 90       	pop	r14
    744c:	df 90       	pop	r13
    744e:	cf 90       	pop	r12
    7450:	bf 90       	pop	r11
    7452:	af 90       	pop	r10
    7454:	08 95       	ret

00007456 <uart1_init>:
		UCSR0A &= _BV(U2X0);

}

void uart1_init(int baud_ubrr, char use_2x, int fifo_tx_size, void* fifo_tx_data)
{
    7456:	df 92       	push	r13
    7458:	ef 92       	push	r14
    745a:	ff 92       	push	r15
    745c:	0f 93       	push	r16
    745e:	1f 93       	push	r17
    7460:	7c 01       	movw	r14, r24
    7462:	d6 2e       	mov	r13, r22
    7464:	89 01       	movw	r16, r18
	fifo_init(&uart1_fifo_tx, fifo_tx_size, uart1_isrtx_enable, NULL, fifo_tx_data);
    7466:	8c e3       	ldi	r24, 0x3C	; 60
    7468:	9c e0       	ldi	r25, 0x0C	; 12
    746a:	ba 01       	movw	r22, r20
    746c:	4d e3       	ldi	r20, 0x3D	; 61
    746e:	57 e3       	ldi	r21, 0x37	; 55
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	30 e0       	ldi	r19, 0x00	; 0
    7474:	0e 94 cc 3e 	call	0x7d98	; 0x7d98 <fifo_init>

	// Setup Uart1
	DDRD |=_BV(PD3);		// UTX1 output
    7478:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &=~_BV(PD2);		// URX1 input
    747a:	52 98       	cbi	0x0a, 2	; 10
	UCSR1B |= _BV(TXEN1);	// enable tx
    747c:	80 91 c9 00 	lds	r24, 0x00C9
    7480:	88 60       	ori	r24, 0x08	; 8
    7482:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |= _BV(RXEN1);	// enable rx
    7486:	80 91 c9 00 	lds	r24, 0x00C9
    748a:	80 61       	ori	r24, 0x10	; 16
    748c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B |= _BV(RXCIE1);	// enable rx interrupt (writes to fifo)
    7490:	80 91 c9 00 	lds	r24, 0x00C9
    7494:	80 68       	ori	r24, 0x80	; 128
    7496:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B &= ~_BV(UDRIE1);	// disable tx interrupt (for now)	
    749a:	80 91 c9 00 	lds	r24, 0x00C9
    749e:	8f 7d       	andi	r24, 0xDF	; 223
    74a0:	80 93 c9 00 	sts	0x00C9, r24

	UBRR1H = (char)(baud_ubrr>>8);
    74a4:	8f 2d       	mov	r24, r15
    74a6:	99 27       	eor	r25, r25
    74a8:	87 fd       	sbrc	r24, 7
    74aa:	9a 95       	dec	r25
    74ac:	80 93 cd 00 	sts	0x00CD, r24
	UBRR1L = (char)(baud_ubrr);
    74b0:	e0 92 cc 00 	sts	0x00CC, r14

	if(use_2x)
    74b4:	dd 20       	and	r13, r13
    74b6:	21 f0       	breq	.+8      	; 0x74c0 <uart1_init+0x6a>
		UCSR1A |= _BV(U2X1);
    74b8:	80 91 c8 00 	lds	r24, 0x00C8
    74bc:	82 60       	ori	r24, 0x02	; 2
    74be:	03 c0       	rjmp	.+6      	; 0x74c6 <uart1_init+0x70>
	else
		UCSR1A &= _BV(U2X1);
    74c0:	80 91 c8 00 	lds	r24, 0x00C8
    74c4:	82 70       	andi	r24, 0x02	; 2
    74c6:	80 93 c8 00 	sts	0x00C8, r24
}
    74ca:	1f 91       	pop	r17
    74cc:	0f 91       	pop	r16
    74ce:	ff 90       	pop	r15
    74d0:	ef 90       	pop	r14
    74d2:	df 90       	pop	r13
    74d4:	08 95       	ret

000074d6 <uart0_init>:
{
	UCSR1B |= _BV(UDRIE1);	// tx interrupt
}

void uart0_init(int baud_ubrr, char use_2x, int fifo_tx_size, void* fifo_tx_data)
{
    74d6:	df 92       	push	r13
    74d8:	ef 92       	push	r14
    74da:	ff 92       	push	r15
    74dc:	0f 93       	push	r16
    74de:	1f 93       	push	r17
    74e0:	7c 01       	movw	r14, r24
    74e2:	d6 2e       	mov	r13, r22
    74e4:	89 01       	movw	r16, r18
	fifo_init(&uart0_fifo_tx, fifo_tx_size, uart0_isrtx_enable, NULL, fifo_tx_data);
    74e6:	88 e2       	ldi	r24, 0x28	; 40
    74e8:	9c e0       	ldi	r25, 0x0C	; 12
    74ea:	ba 01       	movw	r22, r20
    74ec:	47 e3       	ldi	r20, 0x37	; 55
    74ee:	57 e3       	ldi	r21, 0x37	; 55
    74f0:	20 e0       	ldi	r18, 0x00	; 0
    74f2:	30 e0       	ldi	r19, 0x00	; 0
    74f4:	0e 94 cc 3e 	call	0x7d98	; 0x7d98 <fifo_init>

	// Setup Uart0
	DDRE |=_BV(PE1);		// UTX0 output
    74f8:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &=~_BV(PE0);		// UTX0 input
    74fa:	68 98       	cbi	0x0d, 0	; 13
	UCSR0B |= _BV(TXEN0);	// enable tx
    74fc:	80 91 c1 00 	lds	r24, 0x00C1
    7500:	88 60       	ori	r24, 0x08	; 8
    7502:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0B |= _BV(RXEN0);	// enable rx
    7506:	80 91 c1 00 	lds	r24, 0x00C1
    750a:	80 61       	ori	r24, 0x10	; 16
    750c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0B |= _BV(RXCIE0);	// enable rx interrupt (writes to fifo)
    7510:	80 91 c1 00 	lds	r24, 0x00C1
    7514:	80 68       	ori	r24, 0x80	; 128
    7516:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0B &= ~_BV(UDRIE0);	// disable tx interrupt (for now)
    751a:	80 91 c1 00 	lds	r24, 0x00C1
    751e:	8f 7d       	andi	r24, 0xDF	; 223
    7520:	80 93 c1 00 	sts	0x00C1, r24

	UBRR0H = (char)(baud_ubrr>>8);
    7524:	8f 2d       	mov	r24, r15
    7526:	99 27       	eor	r25, r25
    7528:	87 fd       	sbrc	r24, 7
    752a:	9a 95       	dec	r25
    752c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (char)(baud_ubrr);
    7530:	e0 92 c4 00 	sts	0x00C4, r14

	if(use_2x)
    7534:	dd 20       	and	r13, r13
    7536:	21 f0       	breq	.+8      	; 0x7540 <uart0_init+0x6a>
		UCSR0A |= _BV(U2X0);
    7538:	80 91 c0 00 	lds	r24, 0x00C0
    753c:	82 60       	ori	r24, 0x02	; 2
    753e:	03 c0       	rjmp	.+6      	; 0x7546 <uart0_init+0x70>
	else
		UCSR0A &= _BV(U2X0);
    7540:	80 91 c0 00 	lds	r24, 0x00C0
    7544:	82 70       	andi	r24, 0x02	; 2
    7546:	80 93 c0 00 	sts	0x00C0, r24

}
    754a:	1f 91       	pop	r17
    754c:	0f 91       	pop	r16
    754e:	ff 90       	pop	r15
    7550:	ef 90       	pop	r14
    7552:	df 90       	pop	r13
    7554:	08 95       	ret

00007556 <fifo_read_char>:
		}
	};
}

char fifo_read_char(struct fifo_control *obj)
{
    7556:	cf 93       	push	r28
    7558:	df 93       	push	r29
    755a:	ec 01       	movw	r28, r24
    755c:	05 c0       	rjmp	.+10     	; 0x7568 <fifo_read_char+0x12>
	char retval=0;
	
	while(obj->empty)
	{
		if(obj->wait_fptr)
    755e:	e8 89       	ldd	r30, Y+16	; 0x10
    7560:	f9 89       	ldd	r31, Y+17	; 0x11
    7562:	30 97       	sbiw	r30, 0x00	; 0
    7564:	09 f0       	breq	.+2      	; 0x7568 <fifo_read_char+0x12>
			obj->wait_fptr();
    7566:	09 95       	icall

char fifo_read_char(struct fifo_control *obj)
{
	char retval=0;
	
	while(obj->empty)
    7568:	8c 81       	ldd	r24, Y+4	; 0x04
    756a:	88 23       	and	r24, r24
    756c:	c1 f7       	brne	.-16     	; 0x755e <fifo_read_char+0x8>
	{
		if(obj->wait_fptr)
			obj->wait_fptr();
	};

	retval=*((char*)obj->tail_ptr);
    756e:	e8 85       	ldd	r30, Y+8	; 0x08
    7570:	f9 85       	ldd	r31, Y+9	; 0x09
    7572:	e0 81       	ld	r30, Z
	obj->tail_ptr++;	
    7574:	88 85       	ldd	r24, Y+8	; 0x08
    7576:	99 85       	ldd	r25, Y+9	; 0x09
    7578:	01 96       	adiw	r24, 0x01	; 1
    757a:	99 87       	std	Y+9, r25	; 0x09
    757c:	88 87       	std	Y+8, r24	; 0x08
	
	if(obj->tail_ptr == obj->end)
    757e:	28 85       	ldd	r18, Y+8	; 0x08
    7580:	39 85       	ldd	r19, Y+9	; 0x09
    7582:	8c 85       	ldd	r24, Y+12	; 0x0c
    7584:	9d 85       	ldd	r25, Y+13	; 0x0d
    7586:	28 17       	cp	r18, r24
    7588:	39 07       	cpc	r19, r25
    758a:	21 f4       	brne	.+8      	; 0x7594 <fifo_read_char+0x3e>
		obj->tail_ptr = obj->start;
    758c:	8a 85       	ldd	r24, Y+10	; 0x0a
    758e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7590:	99 87       	std	Y+9, r25	; 0x09
    7592:	88 87       	std	Y+8, r24	; 0x08
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7594:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7596:	f8 94       	cli
	{
		obj->bytes_free ++;
    7598:	88 81       	ld	r24, Y
    759a:	99 81       	ldd	r25, Y+1	; 0x01
    759c:	01 96       	adiw	r24, 0x01	; 1
    759e:	99 83       	std	Y+1, r25	; 0x01
    75a0:	88 83       	st	Y, r24
		obj->bytes_used --;
    75a2:	8a 81       	ldd	r24, Y+2	; 0x02
    75a4:	9b 81       	ldd	r25, Y+3	; 0x03
    75a6:	01 97       	sbiw	r24, 0x01	; 1
    75a8:	9b 83       	std	Y+3, r25	; 0x03
    75aa:	8a 83       	std	Y+2, r24	; 0x02
		if(obj->bytes_used == 0)
    75ac:	8a 81       	ldd	r24, Y+2	; 0x02
    75ae:	9b 81       	ldd	r25, Y+3	; 0x03
    75b0:	89 2b       	or	r24, r25
    75b2:	11 f4       	brne	.+4      	; 0x75b8 <fifo_read_char+0x62>
			obj->empty=TRUE;
    75b4:	81 e0       	ldi	r24, 0x01	; 1
    75b6:	8c 83       	std	Y+4, r24	; 0x04
		if(obj->bytes_free != 0)
    75b8:	88 81       	ld	r24, Y
    75ba:	99 81       	ldd	r25, Y+1	; 0x01
    75bc:	89 2b       	or	r24, r25
    75be:	09 f0       	breq	.+2      	; 0x75c2 <fifo_read_char+0x6c>
			obj->full=FALSE;
    75c0:	1d 82       	std	Y+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    75c2:	2f bf       	out	0x3f, r18	; 63
	}

	return retval;
}
    75c4:	8e 2f       	mov	r24, r30
    75c6:	df 91       	pop	r29
    75c8:	cf 91       	pop	r28
    75ca:	08 95       	ret

000075cc <fifo_read_string>:
	return retval;
}

//read up to and including terminator, limited by maxsize
char* fifo_read_string(struct fifo_control *obj, char *target, int maxsize)
{
    75cc:	cf 92       	push	r12
    75ce:	df 92       	push	r13
    75d0:	ef 92       	push	r14
    75d2:	ff 92       	push	r15
    75d4:	0f 93       	push	r16
    75d6:	1f 93       	push	r17
    75d8:	cf 93       	push	r28
    75da:	df 93       	push	r29
    75dc:	7c 01       	movw	r14, r24
    75de:	d6 2e       	mov	r13, r22
    75e0:	c7 2e       	mov	r12, r23
    75e2:	8a 01       	movw	r16, r20
	char *retval;
	retval=target;
	if(maxsize)
    75e4:	41 15       	cp	r20, r1
    75e6:	51 05       	cpc	r21, r1
    75e8:	e1 f0       	breq	.+56     	; 0x7622 <fifo_read_string+0x56>
    75ea:	86 2f       	mov	r24, r22
    75ec:	97 2f       	mov	r25, r23
    75ee:	9c 01       	movw	r18, r24
    75f0:	e9 01       	movw	r28, r18
    75f2:	08 c0       	rjmp	.+16     	; 0x7604 <fifo_read_string+0x38>
		do
		{
			while(obj->empty)
			{
				if(obj->wait_fptr)
    75f4:	d7 01       	movw	r26, r14
    75f6:	50 96       	adiw	r26, 0x10	; 16
    75f8:	ed 91       	ld	r30, X+
    75fa:	fc 91       	ld	r31, X
    75fc:	51 97       	sbiw	r26, 0x11	; 17
    75fe:	30 97       	sbiw	r30, 0x00	; 0
    7600:	09 f0       	breq	.+2      	; 0x7604 <fifo_read_string+0x38>
					obj->wait_fptr();
    7602:	09 95       	icall
	char *retval;
	retval=target;
	if(maxsize)
		do
		{
			while(obj->empty)
    7604:	f7 01       	movw	r30, r14
    7606:	84 81       	ldd	r24, Z+4	; 0x04
    7608:	88 23       	and	r24, r24
    760a:	a1 f7       	brne	.-24     	; 0x75f4 <fifo_read_string+0x28>
			{
				if(obj->wait_fptr)
					obj->wait_fptr();
			};
			*target = fifo_read_char(obj);
    760c:	c7 01       	movw	r24, r14
    760e:	0e 94 ab 3a 	call	0x7556	; 0x7556 <fifo_read_char>
    7612:	88 83       	st	Y, r24
		}while(*(target++) && --maxsize);
    7614:	88 23       	and	r24, r24
    7616:	29 f0       	breq	.+10     	; 0x7622 <fifo_read_string+0x56>
    7618:	01 50       	subi	r16, 0x01	; 1
    761a:	10 40       	sbci	r17, 0x00	; 0
    761c:	11 f0       	breq	.+4      	; 0x7622 <fifo_read_string+0x56>
    761e:	21 96       	adiw	r28, 0x01	; 1
    7620:	f1 cf       	rjmp	.-30     	; 0x7604 <fifo_read_string+0x38>
	return retval;
}
    7622:	8d 2d       	mov	r24, r13
    7624:	9c 2d       	mov	r25, r12
    7626:	df 91       	pop	r29
    7628:	cf 91       	pop	r28
    762a:	1f 91       	pop	r17
    762c:	0f 91       	pop	r16
    762e:	ff 90       	pop	r15
    7630:	ef 90       	pop	r14
    7632:	df 90       	pop	r13
    7634:	cf 90       	pop	r12
    7636:	08 95       	ret

00007638 <fifo_write_char>:

void fifo_write_char(struct fifo_control *obj, char data)
{
    7638:	1f 93       	push	r17
    763a:	cf 93       	push	r28
    763c:	df 93       	push	r29
    763e:	ec 01       	movw	r28, r24
    7640:	16 2f       	mov	r17, r22
	if(obj!=NULL)
    7642:	00 97       	sbiw	r24, 0x00	; 0
    7644:	31 f4       	brne	.+12     	; 0x7652 <fifo_write_char+0x1a>
    7646:	38 c0       	rjmp	.+112    	; 0x76b8 <fifo_write_char+0x80>
	{
		while(obj->full)
		{
			if(obj->wait_fptr)
    7648:	e8 89       	ldd	r30, Y+16	; 0x10
    764a:	f9 89       	ldd	r31, Y+17	; 0x11
    764c:	30 97       	sbiw	r30, 0x00	; 0
    764e:	09 f0       	breq	.+2      	; 0x7652 <fifo_write_char+0x1a>
				obj->wait_fptr();
    7650:	09 95       	icall

void fifo_write_char(struct fifo_control *obj, char data)
{
	if(obj!=NULL)
	{
		while(obj->full)
    7652:	8d 81       	ldd	r24, Y+5	; 0x05
    7654:	88 23       	and	r24, r24
    7656:	c1 f7       	brne	.-16     	; 0x7648 <fifo_write_char+0x10>
		{
			if(obj->wait_fptr)
				obj->wait_fptr();
		};
	
		*((char*)obj->head_ptr) = data;
    7658:	ee 81       	ldd	r30, Y+6	; 0x06
    765a:	ff 81       	ldd	r31, Y+7	; 0x07
    765c:	10 83       	st	Z, r17
		obj->head_ptr++;
    765e:	8e 81       	ldd	r24, Y+6	; 0x06
    7660:	9f 81       	ldd	r25, Y+7	; 0x07
    7662:	01 96       	adiw	r24, 0x01	; 1
    7664:	9f 83       	std	Y+7, r25	; 0x07
    7666:	8e 83       	std	Y+6, r24	; 0x06
	
		if(obj->head_ptr == obj->end)
    7668:	2e 81       	ldd	r18, Y+6	; 0x06
    766a:	3f 81       	ldd	r19, Y+7	; 0x07
    766c:	8c 85       	ldd	r24, Y+12	; 0x0c
    766e:	9d 85       	ldd	r25, Y+13	; 0x0d
    7670:	28 17       	cp	r18, r24
    7672:	39 07       	cpc	r19, r25
    7674:	21 f4       	brne	.+8      	; 0x767e <fifo_write_char+0x46>
			obj->head_ptr = obj->start;
    7676:	8a 85       	ldd	r24, Y+10	; 0x0a
    7678:	9b 85       	ldd	r25, Y+11	; 0x0b
    767a:	9f 83       	std	Y+7, r25	; 0x07
    767c:	8e 83       	std	Y+6, r24	; 0x06
	
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    767e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7680:	f8 94       	cli
		{
			obj->bytes_free --;
    7682:	88 81       	ld	r24, Y
    7684:	99 81       	ldd	r25, Y+1	; 0x01
    7686:	01 97       	sbiw	r24, 0x01	; 1
    7688:	99 83       	std	Y+1, r25	; 0x01
    768a:	88 83       	st	Y, r24
			obj->bytes_used ++;
    768c:	8a 81       	ldd	r24, Y+2	; 0x02
    768e:	9b 81       	ldd	r25, Y+3	; 0x03
    7690:	01 96       	adiw	r24, 0x01	; 1
    7692:	9b 83       	std	Y+3, r25	; 0x03
    7694:	8a 83       	std	Y+2, r24	; 0x02
			if(obj->bytes_free == 0)
    7696:	88 81       	ld	r24, Y
    7698:	99 81       	ldd	r25, Y+1	; 0x01
    769a:	89 2b       	or	r24, r25
    769c:	11 f4       	brne	.+4      	; 0x76a2 <fifo_write_char+0x6a>
				obj->full=TRUE;
    769e:	81 e0       	ldi	r24, 0x01	; 1
    76a0:	8d 83       	std	Y+5, r24	; 0x05
			if(obj->bytes_used != 0)
    76a2:	8a 81       	ldd	r24, Y+2	; 0x02
    76a4:	9b 81       	ldd	r25, Y+3	; 0x03
    76a6:	89 2b       	or	r24, r25
    76a8:	09 f0       	breq	.+2      	; 0x76ac <fifo_write_char+0x74>
				obj->empty=FALSE;
    76aa:	1c 82       	std	Y+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    76ac:	2f bf       	out	0x3f, r18	; 63
		}
		if(obj->post_fptr)
    76ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    76b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    76b2:	30 97       	sbiw	r30, 0x00	; 0
    76b4:	09 f0       	breq	.+2      	; 0x76b8 <fifo_write_char+0x80>
				obj->post_fptr();
    76b6:	09 95       	icall
	};
}
    76b8:	df 91       	pop	r29
    76ba:	cf 91       	pop	r28
    76bc:	1f 91       	pop	r17
    76be:	08 95       	ret

000076c0 <fifo_flush>:
	};
}

//100506, made atomic so pointers cannot be corrupted by ISR's
void fifo_flush(struct fifo_control *obj)
{
    76c0:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    76c2:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    76c4:	f8 94       	cli
	{
		obj->tail_ptr = obj->start;
    76c6:	82 85       	ldd	r24, Z+10	; 0x0a
    76c8:	93 85       	ldd	r25, Z+11	; 0x0b
    76ca:	91 87       	std	Z+9, r25	; 0x09
    76cc:	80 87       	std	Z+8, r24	; 0x08
		obj->head_ptr = obj->start;
    76ce:	82 85       	ldd	r24, Z+10	; 0x0a
    76d0:	93 85       	ldd	r25, Z+11	; 0x0b
    76d2:	97 83       	std	Z+7, r25	; 0x07
    76d4:	86 83       	std	Z+6, r24	; 0x06
		obj->bytes_free=obj->end-obj->start;
    76d6:	84 85       	ldd	r24, Z+12	; 0x0c
    76d8:	95 85       	ldd	r25, Z+13	; 0x0d
    76da:	22 85       	ldd	r18, Z+10	; 0x0a
    76dc:	33 85       	ldd	r19, Z+11	; 0x0b
    76de:	82 1b       	sub	r24, r18
    76e0:	93 0b       	sbc	r25, r19
    76e2:	91 83       	std	Z+1, r25	; 0x01
    76e4:	80 83       	st	Z, r24
		obj->bytes_used=0;
    76e6:	13 82       	std	Z+3, r1	; 0x03
    76e8:	12 82       	std	Z+2, r1	; 0x02
		obj->empty=TRUE;
    76ea:	81 e0       	ldi	r24, 0x01	; 1
    76ec:	84 83       	std	Z+4, r24	; 0x04
		obj->full=FALSE;
    76ee:	15 82       	std	Z+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    76f0:	4f bf       	out	0x3f, r20	; 63
	}
}
    76f2:	08 95       	ret

000076f4 <fifo_write_P>:
	};
}

// write data to fifo
void fifo_write_P(struct fifo_control *obj, PGM_VOID_P item, unsigned int size_source)
{
    76f4:	3f 92       	push	r3
    76f6:	4f 92       	push	r4
    76f8:	5f 92       	push	r5
    76fa:	6f 92       	push	r6
    76fc:	7f 92       	push	r7
    76fe:	8f 92       	push	r8
    7700:	9f 92       	push	r9
    7702:	af 92       	push	r10
    7704:	bf 92       	push	r11
    7706:	cf 92       	push	r12
    7708:	df 92       	push	r13
    770a:	ef 92       	push	r14
    770c:	ff 92       	push	r15
    770e:	0f 93       	push	r16
    7710:	1f 93       	push	r17
    7712:	cf 93       	push	r28
    7714:	df 93       	push	r29
    7716:	ec 01       	movw	r28, r24
    7718:	4b 01       	movw	r8, r22
    771a:	2a 01       	movw	r4, r20
	unsigned int tempint, size_write;
	unsigned char fragment=FALSE;

	if(obj!=NULL)
    771c:	00 97       	sbiw	r24, 0x00	; 0
    771e:	09 f4       	brne	.+2      	; 0x7722 <fifo_write_P+0x2e>
    7720:	8d c0       	rjmp	.+282    	; 0x783c <fifo_write_P+0x148>
	{
		//is remaining data to write bigger than the entire buffer?
		if(size_source > obj->end - obj->start)
    7722:	6c 84       	ldd	r6, Y+12	; 0x0c
    7724:	7d 84       	ldd	r7, Y+13	; 0x0d
    7726:	8a 85       	ldd	r24, Y+10	; 0x0a
    7728:	9b 85       	ldd	r25, Y+11	; 0x0b
    772a:	68 1a       	sub	r6, r24
    772c:	79 0a       	sbc	r7, r25
    772e:	5a 01       	movw	r10, r20
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				obj->bytes_free -= size_write;
				obj->bytes_used += size_write;
				if(obj->bytes_free == 0)
					obj->full=TRUE;
    7730:	33 24       	eor	r3, r3
    7732:	33 94       	inc	r3
    7734:	7f c0       	rjmp	.+254    	; 0x7834 <fifo_write_P+0x140>
		if(size_source > obj->end - obj->start)
			fragment=TRUE;
	
		while(size_source)
		{
			if(fragment)
    7736:	64 14       	cp	r6, r4
    7738:	75 04       	cpc	r7, r5
    773a:	30 f0       	brcs	.+12     	; 0x7748 <fifo_write_P+0x54>
    773c:	11 c0       	rjmp	.+34     	; 0x7760 <fifo_write_P+0x6c>
			{	//if fragmented write, wait for ANY amount of space
				while(obj->full)
				{
					if(obj->wait_fptr)
    773e:	e8 89       	ldd	r30, Y+16	; 0x10
    7740:	f9 89       	ldd	r31, Y+17	; 0x11
    7742:	30 97       	sbiw	r30, 0x00	; 0
    7744:	09 f0       	breq	.+2      	; 0x7748 <fifo_write_P+0x54>
						obj->wait_fptr();
    7746:	09 95       	icall
	
		while(size_source)
		{
			if(fragment)
			{	//if fragmented write, wait for ANY amount of space
				while(obj->full)
    7748:	8d 81       	ldd	r24, Y+5	; 0x05
    774a:	88 23       	and	r24, r24
    774c:	c1 f7       	brne	.-16     	; 0x773e <fifo_write_P+0x4a>
				{
					if(obj->wait_fptr)
						obj->wait_fptr();
				};
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    774e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7750:	f8 94       	cli
				{
					size_write = obj->bytes_free;
    7752:	c8 80       	ld	r12, Y
    7754:	d9 80       	ldd	r13, Y+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7756:	8f bf       	out	0x3f, r24	; 63
				}
				if(size_write > size_source)
    7758:	ac 14       	cp	r10, r12
    775a:	bd 04       	cpc	r11, r13
    775c:	78 f0       	brcs	.+30     	; 0x777c <fifo_write_P+0x88>
    775e:	0f c0       	rjmp	.+30     	; 0x777e <fifo_write_P+0x8a>
			{
				//if non fragmented write, wait for buffer space to fit remaining data
				size_write=size_source;
				do
				{
					ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7760:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7762:	f8 94       	cli
					{
						tempint = obj->bytes_free;
    7764:	88 81       	ld	r24, Y
    7766:	99 81       	ldd	r25, Y+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7768:	2f bf       	out	0x3f, r18	; 63
					}
					if(tempint < size_source && obj->wait_fptr)
    776a:	8a 15       	cp	r24, r10
    776c:	9b 05       	cpc	r25, r11
    776e:	30 f4       	brcc	.+12     	; 0x777c <fifo_write_P+0x88>
    7770:	e8 89       	ldd	r30, Y+16	; 0x10
    7772:	f9 89       	ldd	r31, Y+17	; 0x11
    7774:	30 97       	sbiw	r30, 0x00	; 0
    7776:	a1 f3       	breq	.-24     	; 0x7760 <fifo_write_P+0x6c>
						obj->wait_fptr();
    7778:	09 95       	icall
    777a:	f2 cf       	rjmp	.-28     	; 0x7760 <fifo_write_P+0x6c>
    777c:	65 01       	movw	r12, r10
			}
			
			size_source-=size_write;
			
			//do we need to write twice?
			tempint = obj->end - obj->head_ptr;
    777e:	0c 85       	ldd	r16, Y+12	; 0x0c
    7780:	1d 85       	ldd	r17, Y+13	; 0x0d
    7782:	8e 81       	ldd	r24, Y+6	; 0x06
    7784:	9f 81       	ldd	r25, Y+7	; 0x07
    7786:	08 1b       	sub	r16, r24
    7788:	19 0b       	sbc	r17, r25
			if(tempint < size_write)					//if space before end is < amonut to write
    778a:	0c 15       	cp	r16, r12
    778c:	1d 05       	cpc	r17, r13
    778e:	20 f0       	brcs	.+8      	; 0x7798 <fifo_write_P+0xa4>
    7790:	76 01       	movw	r14, r12
    7792:	00 e0       	ldi	r16, 0x00	; 0
    7794:	10 e0       	ldi	r17, 0x00	; 0
    7796:	0f c0       	rjmp	.+30     	; 0x77b6 <fifo_write_P+0xc2>
			{
				memcpy_P(obj->head_ptr, item, tempint);	//write up to end first
    7798:	8e 81       	ldd	r24, Y+6	; 0x06
    779a:	9f 81       	ldd	r25, Y+7	; 0x07
    779c:	b4 01       	movw	r22, r8
    779e:	a8 01       	movw	r20, r16
    77a0:	0e 94 cb 40 	call	0x8196	; 0x8196 <memcpy_P>
				size_write-=tempint;
    77a4:	76 01       	movw	r14, r12
    77a6:	e0 1a       	sub	r14, r16
    77a8:	f1 0a       	sbc	r15, r17
				obj->head_ptr = obj->start;
    77aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    77ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    77ae:	9f 83       	std	Y+7, r25	; 0x07
    77b0:	8e 83       	std	Y+6, r24	; 0x06
				item = (char*)item + tempint;		
    77b2:	80 0e       	add	r8, r16
    77b4:	91 1e       	adc	r9, r17
			}
			else
				tempint=0;
			
			if(size_write)
    77b6:	e1 14       	cp	r14, r1
    77b8:	f1 04       	cpc	r15, r1
    77ba:	31 f0       	breq	.+12     	; 0x77c8 <fifo_write_P+0xd4>
				memcpy_P(obj->head_ptr, item, size_write);
    77bc:	8e 81       	ldd	r24, Y+6	; 0x06
    77be:	9f 81       	ldd	r25, Y+7	; 0x07
    77c0:	b4 01       	movw	r22, r8
    77c2:	a7 01       	movw	r20, r14
    77c4:	0e 94 cb 40 	call	0x8196	; 0x8196 <memcpy_P>
			obj->head_ptr += size_write;
    77c8:	8e 81       	ldd	r24, Y+6	; 0x06
    77ca:	9f 81       	ldd	r25, Y+7	; 0x07
    77cc:	8e 0d       	add	r24, r14
    77ce:	9f 1d       	adc	r25, r15
    77d0:	9f 83       	std	Y+7, r25	; 0x07
    77d2:	8e 83       	std	Y+6, r24	; 0x06
			item = (char*)item + size_write;
			
			if(obj->head_ptr == obj->end)
    77d4:	2e 81       	ldd	r18, Y+6	; 0x06
    77d6:	3f 81       	ldd	r19, Y+7	; 0x07
    77d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    77da:	9d 85       	ldd	r25, Y+13	; 0x0d
    77dc:	28 17       	cp	r18, r24
    77de:	39 07       	cpc	r19, r25
    77e0:	21 f4       	brne	.+8      	; 0x77ea <fifo_write_P+0xf6>
				obj->head_ptr = obj->start;
    77e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    77e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    77e6:	9f 83       	std	Y+7, r25	; 0x07
    77e8:	8e 83       	std	Y+6, r24	; 0x06
			
			size_write+=tempint;
    77ea:	97 01       	movw	r18, r14
    77ec:	20 0f       	add	r18, r16
    77ee:	31 1f       	adc	r19, r17
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    77f0:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    77f2:	f8 94       	cli
			{
				obj->bytes_free -= size_write;
    77f4:	88 81       	ld	r24, Y
    77f6:	99 81       	ldd	r25, Y+1	; 0x01
    77f8:	82 1b       	sub	r24, r18
    77fa:	93 0b       	sbc	r25, r19
    77fc:	99 83       	std	Y+1, r25	; 0x01
    77fe:	88 83       	st	Y, r24
				obj->bytes_used += size_write;
    7800:	8a 81       	ldd	r24, Y+2	; 0x02
    7802:	9b 81       	ldd	r25, Y+3	; 0x03
    7804:	28 0f       	add	r18, r24
    7806:	39 1f       	adc	r19, r25
    7808:	3b 83       	std	Y+3, r19	; 0x03
    780a:	2a 83       	std	Y+2, r18	; 0x02
				if(obj->bytes_free == 0)
    780c:	88 81       	ld	r24, Y
    780e:	99 81       	ldd	r25, Y+1	; 0x01
    7810:	89 2b       	or	r24, r25
    7812:	09 f4       	brne	.+2      	; 0x7816 <fifo_write_P+0x122>
					obj->full=TRUE;
    7814:	3d 82       	std	Y+5, r3	; 0x05
				if(obj->bytes_used != 0)
    7816:	8a 81       	ldd	r24, Y+2	; 0x02
    7818:	9b 81       	ldd	r25, Y+3	; 0x03
    781a:	89 2b       	or	r24, r25
    781c:	09 f0       	breq	.+2      	; 0x7820 <fifo_write_P+0x12c>
					obj->empty=FALSE;
    781e:	1c 82       	std	Y+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7820:	4f bf       	out	0x3f, r20	; 63
			}
			
			if(obj->post_fptr)
    7822:	ee 85       	ldd	r30, Y+14	; 0x0e
    7824:	ff 85       	ldd	r31, Y+15	; 0x0f
    7826:	30 97       	sbiw	r30, 0x00	; 0
    7828:	09 f0       	breq	.+2      	; 0x782c <fifo_write_P+0x138>
				obj->post_fptr();
    782a:	09 95       	icall
					if(tempint < size_source && obj->wait_fptr)
						obj->wait_fptr();
				}while(tempint < size_source);
			}
			
			size_source-=size_write;
    782c:	ac 18       	sub	r10, r12
    782e:	bd 08       	sbc	r11, r13
				tempint=0;
			
			if(size_write)
				memcpy_P(obj->head_ptr, item, size_write);
			obj->head_ptr += size_write;
			item = (char*)item + size_write;
    7830:	8e 0c       	add	r8, r14
    7832:	9f 1c       	adc	r9, r15
	{
		//is remaining data to write bigger than the entire buffer?
		if(size_source > obj->end - obj->start)
			fragment=TRUE;
	
		while(size_source)
    7834:	a1 14       	cp	r10, r1
    7836:	b1 04       	cpc	r11, r1
    7838:	09 f0       	breq	.+2      	; 0x783c <fifo_write_P+0x148>
    783a:	7d cf       	rjmp	.-262    	; 0x7736 <fifo_write_P+0x42>
			
			if(obj->post_fptr)
				obj->post_fptr();
		};
	};
}
    783c:	df 91       	pop	r29
    783e:	cf 91       	pop	r28
    7840:	1f 91       	pop	r17
    7842:	0f 91       	pop	r16
    7844:	ff 90       	pop	r15
    7846:	ef 90       	pop	r14
    7848:	df 90       	pop	r13
    784a:	cf 90       	pop	r12
    784c:	bf 90       	pop	r11
    784e:	af 90       	pop	r10
    7850:	9f 90       	pop	r9
    7852:	8f 90       	pop	r8
    7854:	7f 90       	pop	r7
    7856:	6f 90       	pop	r6
    7858:	5f 90       	pop	r5
    785a:	4f 90       	pop	r4
    785c:	3f 90       	pop	r3
    785e:	08 95       	ret

00007860 <fifo_write>:
// write data to fifo
// If data size is <= buffer size, will wait for buffer to have enough room before writing
// otherwise will wait for buffer empty, then fill it, then repeat.

void fifo_write(struct fifo_control *obj, void *item, unsigned int size_source)
{
    7860:	3f 92       	push	r3
    7862:	4f 92       	push	r4
    7864:	5f 92       	push	r5
    7866:	6f 92       	push	r6
    7868:	7f 92       	push	r7
    786a:	8f 92       	push	r8
    786c:	9f 92       	push	r9
    786e:	af 92       	push	r10
    7870:	bf 92       	push	r11
    7872:	cf 92       	push	r12
    7874:	df 92       	push	r13
    7876:	ef 92       	push	r14
    7878:	ff 92       	push	r15
    787a:	0f 93       	push	r16
    787c:	1f 93       	push	r17
    787e:	cf 93       	push	r28
    7880:	df 93       	push	r29
    7882:	ec 01       	movw	r28, r24
    7884:	6b 01       	movw	r12, r22
    7886:	2a 01       	movw	r4, r20
	unsigned int tempint, size_write;
	unsigned char fragment=FALSE;
	
	if(obj!=NULL)
    7888:	00 97       	sbiw	r24, 0x00	; 0
    788a:	09 f4       	brne	.+2      	; 0x788e <fifo_write+0x2e>
    788c:	8f c0       	rjmp	.+286    	; 0x79ac <fifo_write+0x14c>
	{
		//is remaining data to write bigger than the entire buffer?
		if(size_source > obj->end - obj->start)
    788e:	6c 84       	ldd	r6, Y+12	; 0x0c
    7890:	7d 84       	ldd	r7, Y+13	; 0x0d
    7892:	8a 85       	ldd	r24, Y+10	; 0x0a
    7894:	9b 85       	ldd	r25, Y+11	; 0x0b
    7896:	68 1a       	sub	r6, r24
    7898:	79 0a       	sbc	r7, r25
    789a:	4a 01       	movw	r8, r20
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				obj->bytes_free -= size_write;
				obj->bytes_used += size_write;
				if(obj->bytes_free == 0)
					obj->full=TRUE;
    789c:	33 24       	eor	r3, r3
    789e:	33 94       	inc	r3
    78a0:	81 c0       	rjmp	.+258    	; 0x79a4 <fifo_write+0x144>
		if(size_source > obj->end - obj->start)
			fragment=TRUE;

		while(size_source)
		{
			if(fragment)
    78a2:	64 14       	cp	r6, r4
    78a4:	75 04       	cpc	r7, r5
    78a6:	30 f0       	brcs	.+12     	; 0x78b4 <fifo_write+0x54>
    78a8:	11 c0       	rjmp	.+34     	; 0x78cc <fifo_write+0x6c>
			{	//if fragmented write, wait for ANY amount of space
				while(obj->full)
				{
					if(obj->wait_fptr)
    78aa:	e8 89       	ldd	r30, Y+16	; 0x10
    78ac:	f9 89       	ldd	r31, Y+17	; 0x11
    78ae:	30 97       	sbiw	r30, 0x00	; 0
    78b0:	09 f0       	breq	.+2      	; 0x78b4 <fifo_write+0x54>
						obj->wait_fptr();
    78b2:	09 95       	icall

		while(size_source)
		{
			if(fragment)
			{	//if fragmented write, wait for ANY amount of space
				while(obj->full)
    78b4:	8d 81       	ldd	r24, Y+5	; 0x05
    78b6:	88 23       	and	r24, r24
    78b8:	c1 f7       	brne	.-16     	; 0x78aa <fifo_write+0x4a>
				{
					if(obj->wait_fptr)
						obj->wait_fptr();
				};
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    78ba:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    78bc:	f8 94       	cli
				{
					size_write = obj->bytes_free;
    78be:	a8 80       	ld	r10, Y
    78c0:	b9 80       	ldd	r11, Y+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    78c2:	8f bf       	out	0x3f, r24	; 63
				}
				if(size_write > size_source)
    78c4:	8a 14       	cp	r8, r10
    78c6:	9b 04       	cpc	r9, r11
    78c8:	78 f0       	brcs	.+30     	; 0x78e8 <fifo_write+0x88>
    78ca:	0f c0       	rjmp	.+30     	; 0x78ea <fifo_write+0x8a>
			{
				//if non fragmented write, wait for buffer space to fit remaining data
				size_write=size_source;
				do
				{
					ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    78cc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    78ce:	f8 94       	cli
					{
						tempint = obj->bytes_free;
    78d0:	88 81       	ld	r24, Y
    78d2:	99 81       	ldd	r25, Y+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    78d4:	2f bf       	out	0x3f, r18	; 63
					}
					if(tempint < size_source && obj->wait_fptr)
    78d6:	88 15       	cp	r24, r8
    78d8:	99 05       	cpc	r25, r9
    78da:	30 f4       	brcc	.+12     	; 0x78e8 <fifo_write+0x88>
    78dc:	e8 89       	ldd	r30, Y+16	; 0x10
    78de:	f9 89       	ldd	r31, Y+17	; 0x11
    78e0:	30 97       	sbiw	r30, 0x00	; 0
    78e2:	a1 f3       	breq	.-24     	; 0x78cc <fifo_write+0x6c>
						obj->wait_fptr();
    78e4:	09 95       	icall
    78e6:	f2 cf       	rjmp	.-28     	; 0x78cc <fifo_write+0x6c>
    78e8:	54 01       	movw	r10, r8
			}
	
			size_source-=size_write;
			
			//do we need to write twice?
			tempint = obj->end - obj->head_ptr;
    78ea:	0c 85       	ldd	r16, Y+12	; 0x0c
    78ec:	1d 85       	ldd	r17, Y+13	; 0x0d
    78ee:	8e 81       	ldd	r24, Y+6	; 0x06
    78f0:	9f 81       	ldd	r25, Y+7	; 0x07
    78f2:	08 1b       	sub	r16, r24
    78f4:	19 0b       	sbc	r17, r25
			if(tempint < size_write)					//if space before end is < amonut to write
    78f6:	0a 15       	cp	r16, r10
    78f8:	1b 05       	cpc	r17, r11
    78fa:	20 f0       	brcs	.+8      	; 0x7904 <fifo_write+0xa4>
    78fc:	75 01       	movw	r14, r10
    78fe:	00 e0       	ldi	r16, 0x00	; 0
    7900:	10 e0       	ldi	r17, 0x00	; 0
    7902:	10 c0       	rjmp	.+32     	; 0x7924 <fifo_write+0xc4>
			{
				memcpy(obj->head_ptr, item, tempint);	//write up to end first
    7904:	2e 81       	ldd	r18, Y+6	; 0x06
    7906:	3f 81       	ldd	r19, Y+7	; 0x07
    7908:	c9 01       	movw	r24, r18
    790a:	b6 01       	movw	r22, r12
    790c:	a8 01       	movw	r20, r16
    790e:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
				size_write-=tempint;
    7912:	75 01       	movw	r14, r10
    7914:	e0 1a       	sub	r14, r16
    7916:	f1 0a       	sbc	r15, r17
				obj->head_ptr = obj->start;
    7918:	8a 85       	ldd	r24, Y+10	; 0x0a
    791a:	9b 85       	ldd	r25, Y+11	; 0x0b
    791c:	9f 83       	std	Y+7, r25	; 0x07
    791e:	8e 83       	std	Y+6, r24	; 0x06
				item = (char*)item + tempint;		
    7920:	c0 0e       	add	r12, r16
    7922:	d1 1e       	adc	r13, r17
			}
			else
				tempint=0;
		
			if(size_write)
    7924:	e1 14       	cp	r14, r1
    7926:	f1 04       	cpc	r15, r1
    7928:	39 f0       	breq	.+14     	; 0x7938 <fifo_write+0xd8>
				memcpy(obj->head_ptr, item, size_write);
    792a:	2e 81       	ldd	r18, Y+6	; 0x06
    792c:	3f 81       	ldd	r19, Y+7	; 0x07
    792e:	c9 01       	movw	r24, r18
    7930:	b6 01       	movw	r22, r12
    7932:	a7 01       	movw	r20, r14
    7934:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
			obj->head_ptr += size_write;
    7938:	8e 81       	ldd	r24, Y+6	; 0x06
    793a:	9f 81       	ldd	r25, Y+7	; 0x07
    793c:	8e 0d       	add	r24, r14
    793e:	9f 1d       	adc	r25, r15
    7940:	9f 83       	std	Y+7, r25	; 0x07
    7942:	8e 83       	std	Y+6, r24	; 0x06
			item = (char*)item + size_write;
		
			if(obj->head_ptr == obj->end)
    7944:	2e 81       	ldd	r18, Y+6	; 0x06
    7946:	3f 81       	ldd	r19, Y+7	; 0x07
    7948:	8c 85       	ldd	r24, Y+12	; 0x0c
    794a:	9d 85       	ldd	r25, Y+13	; 0x0d
    794c:	28 17       	cp	r18, r24
    794e:	39 07       	cpc	r19, r25
    7950:	21 f4       	brne	.+8      	; 0x795a <fifo_write+0xfa>
				obj->head_ptr = obj->start;
    7952:	8a 85       	ldd	r24, Y+10	; 0x0a
    7954:	9b 85       	ldd	r25, Y+11	; 0x0b
    7956:	9f 83       	std	Y+7, r25	; 0x07
    7958:	8e 83       	std	Y+6, r24	; 0x06
		
			size_write+=tempint;
    795a:	97 01       	movw	r18, r14
    795c:	20 0f       	add	r18, r16
    795e:	31 1f       	adc	r19, r17
		
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7960:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7962:	f8 94       	cli
			{
				obj->bytes_free -= size_write;
    7964:	88 81       	ld	r24, Y
    7966:	99 81       	ldd	r25, Y+1	; 0x01
    7968:	82 1b       	sub	r24, r18
    796a:	93 0b       	sbc	r25, r19
    796c:	99 83       	std	Y+1, r25	; 0x01
    796e:	88 83       	st	Y, r24
				obj->bytes_used += size_write;
    7970:	8a 81       	ldd	r24, Y+2	; 0x02
    7972:	9b 81       	ldd	r25, Y+3	; 0x03
    7974:	28 0f       	add	r18, r24
    7976:	39 1f       	adc	r19, r25
    7978:	3b 83       	std	Y+3, r19	; 0x03
    797a:	2a 83       	std	Y+2, r18	; 0x02
				if(obj->bytes_free == 0)
    797c:	88 81       	ld	r24, Y
    797e:	99 81       	ldd	r25, Y+1	; 0x01
    7980:	89 2b       	or	r24, r25
    7982:	09 f4       	brne	.+2      	; 0x7986 <fifo_write+0x126>
					obj->full=TRUE;
    7984:	3d 82       	std	Y+5, r3	; 0x05
				if(obj->bytes_used != 0)
    7986:	8a 81       	ldd	r24, Y+2	; 0x02
    7988:	9b 81       	ldd	r25, Y+3	; 0x03
    798a:	89 2b       	or	r24, r25
    798c:	09 f0       	breq	.+2      	; 0x7990 <fifo_write+0x130>
					obj->empty=FALSE;
    798e:	1c 82       	std	Y+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7990:	4f bf       	out	0x3f, r20	; 63
			}
			if(obj->post_fptr)
    7992:	ee 85       	ldd	r30, Y+14	; 0x0e
    7994:	ff 85       	ldd	r31, Y+15	; 0x0f
    7996:	30 97       	sbiw	r30, 0x00	; 0
    7998:	09 f0       	breq	.+2      	; 0x799c <fifo_write+0x13c>
				obj->post_fptr();
    799a:	09 95       	icall
					if(tempint < size_source && obj->wait_fptr)
						obj->wait_fptr();
				}while(tempint < size_source);
			}
	
			size_source-=size_write;
    799c:	8a 18       	sub	r8, r10
    799e:	9b 08       	sbc	r9, r11
				tempint=0;
		
			if(size_write)
				memcpy(obj->head_ptr, item, size_write);
			obj->head_ptr += size_write;
			item = (char*)item + size_write;
    79a0:	ce 0c       	add	r12, r14
    79a2:	df 1c       	adc	r13, r15
	{
		//is remaining data to write bigger than the entire buffer?
		if(size_source > obj->end - obj->start)
			fragment=TRUE;

		while(size_source)
    79a4:	81 14       	cp	r8, r1
    79a6:	91 04       	cpc	r9, r1
    79a8:	09 f0       	breq	.+2      	; 0x79ac <fifo_write+0x14c>
    79aa:	7b cf       	rjmp	.-266    	; 0x78a2 <fifo_write+0x42>
			}
			if(obj->post_fptr)
				obj->post_fptr();
		};
	};
}
    79ac:	df 91       	pop	r29
    79ae:	cf 91       	pop	r28
    79b0:	1f 91       	pop	r17
    79b2:	0f 91       	pop	r16
    79b4:	ff 90       	pop	r15
    79b6:	ef 90       	pop	r14
    79b8:	df 90       	pop	r13
    79ba:	cf 90       	pop	r12
    79bc:	bf 90       	pop	r11
    79be:	af 90       	pop	r10
    79c0:	9f 90       	pop	r9
    79c2:	8f 90       	pop	r8
    79c4:	7f 90       	pop	r7
    79c6:	6f 90       	pop	r6
    79c8:	5f 90       	pop	r5
    79ca:	4f 90       	pop	r4
    79cc:	3f 90       	pop	r3
    79ce:	08 95       	ret

000079d0 <fifo_write_long>:
{
	fifo_write(obj, &data, sizeof(int));
}

void fifo_write_long(struct fifo_control *obj, long data)
{
    79d0:	df 93       	push	r29
    79d2:	cf 93       	push	r28
    79d4:	00 d0       	rcall	.+0      	; 0x79d6 <fifo_write_long+0x6>
    79d6:	00 d0       	rcall	.+0      	; 0x79d8 <fifo_write_long+0x8>
    79d8:	cd b7       	in	r28, 0x3d	; 61
    79da:	de b7       	in	r29, 0x3e	; 62
    79dc:	49 83       	std	Y+1, r20	; 0x01
    79de:	5a 83       	std	Y+2, r21	; 0x02
    79e0:	6b 83       	std	Y+3, r22	; 0x03
    79e2:	7c 83       	std	Y+4, r23	; 0x04
	fifo_write(obj, &data, sizeof(long));
    79e4:	be 01       	movw	r22, r28
    79e6:	6f 5f       	subi	r22, 0xFF	; 255
    79e8:	7f 4f       	sbci	r23, 0xFF	; 255
    79ea:	44 e0       	ldi	r20, 0x04	; 4
    79ec:	50 e0       	ldi	r21, 0x00	; 0
    79ee:	0e 94 30 3c 	call	0x7860	; 0x7860 <fifo_write>
}
    79f2:	0f 90       	pop	r0
    79f4:	0f 90       	pop	r0
    79f6:	0f 90       	pop	r0
    79f8:	0f 90       	pop	r0
    79fa:	cf 91       	pop	r28
    79fc:	df 91       	pop	r29
    79fe:	08 95       	ret

00007a00 <fifo_write_int>:
				obj->post_fptr();
	};
}

void fifo_write_int(struct fifo_control *obj, int data)
{
    7a00:	df 93       	push	r29
    7a02:	cf 93       	push	r28
    7a04:	00 d0       	rcall	.+0      	; 0x7a06 <fifo_write_int+0x6>
    7a06:	cd b7       	in	r28, 0x3d	; 61
    7a08:	de b7       	in	r29, 0x3e	; 62
    7a0a:	7a 83       	std	Y+2, r23	; 0x02
    7a0c:	69 83       	std	Y+1, r22	; 0x01
	fifo_write(obj, &data, sizeof(int));
    7a0e:	be 01       	movw	r22, r28
    7a10:	6f 5f       	subi	r22, 0xFF	; 255
    7a12:	7f 4f       	sbci	r23, 0xFF	; 255
    7a14:	42 e0       	ldi	r20, 0x02	; 2
    7a16:	50 e0       	ldi	r21, 0x00	; 0
    7a18:	0e 94 30 3c 	call	0x7860	; 0x7860 <fifo_write>
}
    7a1c:	0f 90       	pop	r0
    7a1e:	0f 90       	pop	r0
    7a20:	cf 91       	pop	r28
    7a22:	df 91       	pop	r29
    7a24:	08 95       	ret

00007a26 <fifo_copy>:
#include "includes.h"

//move data from source to destination, either filling destination, or emptying source
//note that void(*post_fptr)(void) may be called twice.
void fifo_copy(struct fifo_control *target, struct fifo_control *obj)
{
    7a26:	cf 92       	push	r12
    7a28:	df 92       	push	r13
    7a2a:	ef 92       	push	r14
    7a2c:	ff 92       	push	r15
    7a2e:	0f 93       	push	r16
    7a30:	1f 93       	push	r17
    7a32:	cf 93       	push	r28
    7a34:	df 93       	push	r29
    7a36:	6c 01       	movw	r12, r24
    7a38:	eb 01       	movw	r28, r22
	unsigned int size_read, tempint, tempint2;

	if(target ==NULL && obj !=NULL)
    7a3a:	00 97       	sbiw	r24, 0x00	; 0
    7a3c:	41 f4       	brne	.+16     	; 0x7a4e <fifo_copy+0x28>
    7a3e:	61 15       	cp	r22, r1
    7a40:	71 05       	cpc	r23, r1
    7a42:	09 f4       	brne	.+2      	; 0x7a46 <fifo_copy+0x20>
    7a44:	64 c0       	rjmp	.+200    	; 0x7b0e <fifo_copy+0xe8>
		fifo_flush(obj);
    7a46:	cb 01       	movw	r24, r22
    7a48:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <fifo_flush>
    7a4c:	60 c0       	rjmp	.+192    	; 0x7b0e <fifo_copy+0xe8>
	else if (target !=NULL && obj !=NULL)
    7a4e:	61 15       	cp	r22, r1
    7a50:	71 05       	cpc	r23, r1
    7a52:	09 f4       	brne	.+2      	; 0x7a56 <fifo_copy+0x30>
    7a54:	5c c0       	rjmp	.+184    	; 0x7b0e <fifo_copy+0xe8>
	{
	
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7a56:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7a58:	f8 94       	cli
		{
			tempint = obj->bytes_used;
    7a5a:	4a 81       	ldd	r20, Y+2	; 0x02
    7a5c:	5b 81       	ldd	r21, Y+3	; 0x03
			tempint2= target->bytes_free;
    7a5e:	fc 01       	movw	r30, r24
    7a60:	80 81       	ld	r24, Z
    7a62:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7a64:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    7a66:	8c 01       	movw	r16, r24
    7a68:	48 17       	cp	r20, r24
    7a6a:	59 07       	cpc	r21, r25
    7a6c:	08 f4       	brcc	.+2      	; 0x7a70 <fifo_copy+0x4a>
    7a6e:	8a 01       	movw	r16, r20
			size_read = tempint;	//else empty source (or both)

//	this next code is basically a copy of the read fuction, except instead of memcpy to a buffer, we call fifo_write to the target

		// do we need to read twice?
		tempint = obj->end - obj->tail_ptr;
    7a70:	ec 84       	ldd	r14, Y+12	; 0x0c
    7a72:	fd 84       	ldd	r15, Y+13	; 0x0d
    7a74:	88 85       	ldd	r24, Y+8	; 0x08
    7a76:	99 85       	ldd	r25, Y+9	; 0x09
    7a78:	e8 1a       	sub	r14, r24
    7a7a:	f9 0a       	sbc	r15, r25
		if( tempint < size_read)
    7a7c:	e0 16       	cp	r14, r16
    7a7e:	f1 06       	cpc	r15, r17
    7a80:	18 f0       	brcs	.+6      	; 0x7a88 <fifo_copy+0x62>
    7a82:	ee 24       	eor	r14, r14
    7a84:	ff 24       	eor	r15, r15
    7a86:	0c c0       	rjmp	.+24     	; 0x7aa0 <fifo_copy+0x7a>
		{
			fifo_write(target, obj->tail_ptr, tempint);
    7a88:	68 85       	ldd	r22, Y+8	; 0x08
    7a8a:	79 85       	ldd	r23, Y+9	; 0x09
    7a8c:	c6 01       	movw	r24, r12
    7a8e:	a7 01       	movw	r20, r14
    7a90:	0e 94 30 3c 	call	0x7860	; 0x7860 <fifo_write>
			size_read-=tempint;
    7a94:	0e 19       	sub	r16, r14
    7a96:	1f 09       	sbc	r17, r15
			obj->tail_ptr = obj->start;
    7a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a9c:	99 87       	std	Y+9, r25	; 0x09
    7a9e:	88 87       	std	Y+8, r24	; 0x08
		}
		else
			tempint=0;
	
		if(size_read)
    7aa0:	01 15       	cp	r16, r1
    7aa2:	11 05       	cpc	r17, r1
    7aa4:	31 f0       	breq	.+12     	; 0x7ab2 <fifo_copy+0x8c>
			fifo_write(target, obj->tail_ptr, size_read);
    7aa6:	68 85       	ldd	r22, Y+8	; 0x08
    7aa8:	79 85       	ldd	r23, Y+9	; 0x09
    7aaa:	c6 01       	movw	r24, r12
    7aac:	a8 01       	movw	r20, r16
    7aae:	0e 94 30 3c 	call	0x7860	; 0x7860 <fifo_write>
		obj->tail_ptr += size_read;
    7ab2:	88 85       	ldd	r24, Y+8	; 0x08
    7ab4:	99 85       	ldd	r25, Y+9	; 0x09
    7ab6:	80 0f       	add	r24, r16
    7ab8:	91 1f       	adc	r25, r17
    7aba:	99 87       	std	Y+9, r25	; 0x09
    7abc:	88 87       	std	Y+8, r24	; 0x08
	
		if(obj->tail_ptr == obj->end)
    7abe:	28 85       	ldd	r18, Y+8	; 0x08
    7ac0:	39 85       	ldd	r19, Y+9	; 0x09
    7ac2:	8c 85       	ldd	r24, Y+12	; 0x0c
    7ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
    7ac6:	28 17       	cp	r18, r24
    7ac8:	39 07       	cpc	r19, r25
    7aca:	21 f4       	brne	.+8      	; 0x7ad4 <fifo_copy+0xae>
			obj->tail_ptr = obj->start;
    7acc:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ace:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ad0:	99 87       	std	Y+9, r25	; 0x09
    7ad2:	88 87       	std	Y+8, r24	; 0x08
	
		size_read+=tempint;
    7ad4:	97 01       	movw	r18, r14
    7ad6:	20 0f       	add	r18, r16
    7ad8:	31 1f       	adc	r19, r17
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7ada:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7adc:	f8 94       	cli
		{
			obj->bytes_free += size_read;
    7ade:	88 81       	ld	r24, Y
    7ae0:	99 81       	ldd	r25, Y+1	; 0x01
    7ae2:	82 0f       	add	r24, r18
    7ae4:	93 1f       	adc	r25, r19
    7ae6:	99 83       	std	Y+1, r25	; 0x01
    7ae8:	88 83       	st	Y, r24
			obj->bytes_used -= size_read;
    7aea:	8a 81       	ldd	r24, Y+2	; 0x02
    7aec:	9b 81       	ldd	r25, Y+3	; 0x03
    7aee:	82 1b       	sub	r24, r18
    7af0:	93 0b       	sbc	r25, r19
    7af2:	9b 83       	std	Y+3, r25	; 0x03
    7af4:	8a 83       	std	Y+2, r24	; 0x02
			if(obj->bytes_used == 0)
    7af6:	8a 81       	ldd	r24, Y+2	; 0x02
    7af8:	9b 81       	ldd	r25, Y+3	; 0x03
    7afa:	89 2b       	or	r24, r25
    7afc:	11 f4       	brne	.+4      	; 0x7b02 <fifo_copy+0xdc>
				obj->empty=TRUE;
    7afe:	81 e0       	ldi	r24, 0x01	; 1
    7b00:	8c 83       	std	Y+4, r24	; 0x04
			if(obj->bytes_free != 0)
    7b02:	88 81       	ld	r24, Y
    7b04:	99 81       	ldd	r25, Y+1	; 0x01
    7b06:	89 2b       	or	r24, r25
    7b08:	09 f0       	breq	.+2      	; 0x7b0c <fifo_copy+0xe6>
				obj->full=FALSE;
    7b0a:	1d 82       	std	Y+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7b0c:	4f bf       	out	0x3f, r20	; 63
		}
	};
}
    7b0e:	df 91       	pop	r29
    7b10:	cf 91       	pop	r28
    7b12:	1f 91       	pop	r17
    7b14:	0f 91       	pop	r16
    7b16:	ff 90       	pop	r15
    7b18:	ef 90       	pop	r14
    7b1a:	df 90       	pop	r13
    7b1c:	cf 90       	pop	r12
    7b1e:	08 95       	ret

00007b20 <fifo_preview>:
	return item;
}

// read data from fifo, without removing the data from the fifo
void* fifo_preview(struct fifo_control *obj, void *item, unsigned int size)
{
    7b20:	af 92       	push	r10
    7b22:	bf 92       	push	r11
    7b24:	cf 92       	push	r12
    7b26:	df 92       	push	r13
    7b28:	ef 92       	push	r14
    7b2a:	ff 92       	push	r15
    7b2c:	0f 93       	push	r16
    7b2e:	1f 93       	push	r17
    7b30:	cf 93       	push	r28
    7b32:	df 93       	push	r29
    7b34:	5c 01       	movw	r10, r24
    7b36:	8b 01       	movw	r16, r22
    7b38:	7a 01       	movw	r14, r20
	unsigned int tempint=0;
	char* fake_tail;

	fake_tail = obj->tail_ptr;
    7b3a:	dc 01       	movw	r26, r24
    7b3c:	18 96       	adiw	r26, 0x08	; 8
    7b3e:	cd 90       	ld	r12, X+
    7b40:	dc 90       	ld	r13, X
    7b42:	19 97       	sbiw	r26, 0x09	; 9

	//wait for size bytes in buffer to preview
	do
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7b44:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7b46:	f8 94       	cli
		{
			tempint = obj->bytes_used;
    7b48:	f5 01       	movw	r30, r10
    7b4a:	82 81       	ldd	r24, Z+2	; 0x02
    7b4c:	93 81       	ldd	r25, Z+3	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7b4e:	2f bf       	out	0x3f, r18	; 63
		}
		if(tempint<size && obj->wait_fptr)
    7b50:	8e 15       	cp	r24, r14
    7b52:	9f 05       	cpc	r25, r15
    7b54:	48 f4       	brcc	.+18     	; 0x7b68 <fifo_preview+0x48>
    7b56:	d5 01       	movw	r26, r10
    7b58:	50 96       	adiw	r26, 0x10	; 16
    7b5a:	ed 91       	ld	r30, X+
    7b5c:	fc 91       	ld	r31, X
    7b5e:	51 97       	sbiw	r26, 0x11	; 17
    7b60:	30 97       	sbiw	r30, 0x00	; 0
    7b62:	81 f3       	breq	.-32     	; 0x7b44 <fifo_preview+0x24>
			obj->wait_fptr();
    7b64:	09 95       	icall
    7b66:	ee cf       	rjmp	.-36     	; 0x7b44 <fifo_preview+0x24>
	}while(tempint<size);

	// do we need to read twice?
	tempint = obj->end - fake_tail;
    7b68:	f5 01       	movw	r30, r10
    7b6a:	c4 85       	ldd	r28, Z+12	; 0x0c
    7b6c:	d5 85       	ldd	r29, Z+13	; 0x0d
    7b6e:	cc 19       	sub	r28, r12
    7b70:	dd 09       	sbc	r29, r13
	if( tempint < size )
    7b72:	ce 15       	cp	r28, r14
    7b74:	df 05       	cpc	r29, r15
    7b76:	88 f4       	brcc	.+34     	; 0x7b9a <fifo_preview+0x7a>
	{
		if(item!=NULL)
    7b78:	01 15       	cp	r16, r1
    7b7a:	11 05       	cpc	r17, r1
    7b7c:	29 f0       	breq	.+10     	; 0x7b88 <fifo_preview+0x68>
			memcpy(item, fake_tail, tempint);
    7b7e:	c8 01       	movw	r24, r16
    7b80:	b6 01       	movw	r22, r12
    7b82:	ae 01       	movw	r20, r28
    7b84:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
		size-=tempint;
    7b88:	ec 1a       	sub	r14, r28
    7b8a:	fd 0a       	sbc	r15, r29
		fake_tail = obj->start;
    7b8c:	d5 01       	movw	r26, r10
    7b8e:	1a 96       	adiw	r26, 0x0a	; 10
    7b90:	cd 90       	ld	r12, X+
    7b92:	dc 90       	ld	r13, X
    7b94:	1b 97       	sbiw	r26, 0x0b	; 11
		item = (char*)item + tempint;
    7b96:	0c 0f       	add	r16, r28
    7b98:	1d 1f       	adc	r17, r29
	};

	if(size && item!=NULL)
    7b9a:	e1 14       	cp	r14, r1
    7b9c:	f1 04       	cpc	r15, r1
    7b9e:	41 f0       	breq	.+16     	; 0x7bb0 <fifo_preview+0x90>
    7ba0:	01 15       	cp	r16, r1
    7ba2:	11 05       	cpc	r17, r1
    7ba4:	29 f0       	breq	.+10     	; 0x7bb0 <fifo_preview+0x90>
		memcpy(item, fake_tail, size);
    7ba6:	c8 01       	movw	r24, r16
    7ba8:	b6 01       	movw	r22, r12
    7baa:	a7 01       	movw	r20, r14
    7bac:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>

	return item;
}
    7bb0:	c8 01       	movw	r24, r16
    7bb2:	df 91       	pop	r29
    7bb4:	cf 91       	pop	r28
    7bb6:	1f 91       	pop	r17
    7bb8:	0f 91       	pop	r16
    7bba:	ff 90       	pop	r15
    7bbc:	ef 90       	pop	r14
    7bbe:	df 90       	pop	r13
    7bc0:	cf 90       	pop	r12
    7bc2:	bf 90       	pop	r11
    7bc4:	af 90       	pop	r10
    7bc6:	08 95       	ret

00007bc8 <fifo_read>:
	fifo_flush(obj);
} 

// read data from fifo
void* fifo_read(struct fifo_control *obj, void *item, unsigned int size_target)
{
    7bc8:	3f 92       	push	r3
    7bca:	4f 92       	push	r4
    7bcc:	5f 92       	push	r5
    7bce:	6f 92       	push	r6
    7bd0:	7f 92       	push	r7
    7bd2:	8f 92       	push	r8
    7bd4:	9f 92       	push	r9
    7bd6:	af 92       	push	r10
    7bd8:	bf 92       	push	r11
    7bda:	cf 92       	push	r12
    7bdc:	df 92       	push	r13
    7bde:	ef 92       	push	r14
    7be0:	ff 92       	push	r15
    7be2:	0f 93       	push	r16
    7be4:	1f 93       	push	r17
    7be6:	cf 93       	push	r28
    7be8:	df 93       	push	r29
    7bea:	ec 01       	movw	r28, r24
    7bec:	6b 01       	movw	r12, r22
    7bee:	2a 01       	movw	r4, r20
	unsigned int tempint, size_read;
	unsigned char fragment=FALSE;

	if(obj->end - obj->start < size_target)
    7bf0:	6c 84       	ldd	r6, Y+12	; 0x0c
    7bf2:	7d 84       	ldd	r7, Y+13	; 0x0d
    7bf4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7bf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7bf8:	68 1a       	sub	r6, r24
    7bfa:	79 0a       	sbc	r7, r25
    7bfc:	4a 01       	movw	r8, r20
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			obj->bytes_free += size_read;
			obj->bytes_used -= size_read;
			if(obj->bytes_used == 0)
				obj->empty=TRUE;
    7bfe:	33 24       	eor	r3, r3
    7c00:	33 94       	inc	r3
    7c02:	88 c0       	rjmp	.+272    	; 0x7d14 <fifo_read+0x14c>
	if(obj->end - obj->start < size_target)
		fragment=TRUE;

	while(size_target)
	{
		if(fragment)
    7c04:	64 14       	cp	r6, r4
    7c06:	75 04       	cpc	r7, r5
    7c08:	30 f0       	brcs	.+12     	; 0x7c16 <fifo_read+0x4e>
    7c0a:	11 c0       	rjmp	.+34     	; 0x7c2e <fifo_read+0x66>
		{	//if fragmented read, wait for ANY amount of data
			while(obj->empty)
				if(obj->wait_fptr)
    7c0c:	e8 89       	ldd	r30, Y+16	; 0x10
    7c0e:	f9 89       	ldd	r31, Y+17	; 0x11
    7c10:	30 97       	sbiw	r30, 0x00	; 0
    7c12:	09 f0       	breq	.+2      	; 0x7c16 <fifo_read+0x4e>
					obj->wait_fptr();
    7c14:	09 95       	icall

	while(size_target)
	{
		if(fragment)
		{	//if fragmented read, wait for ANY amount of data
			while(obj->empty)
    7c16:	8c 81       	ldd	r24, Y+4	; 0x04
    7c18:	88 23       	and	r24, r24
    7c1a:	c1 f7       	brne	.-16     	; 0x7c0c <fifo_read+0x44>
				if(obj->wait_fptr)
					obj->wait_fptr();
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7c1c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7c1e:	f8 94       	cli
			{
				size_read = obj->bytes_used;
    7c20:	aa 80       	ldd	r10, Y+2	; 0x02
    7c22:	bb 80       	ldd	r11, Y+3	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7c24:	8f bf       	out	0x3f, r24	; 63
			}
			if(size_read > size_target)
    7c26:	8a 14       	cp	r8, r10
    7c28:	9b 04       	cpc	r9, r11
    7c2a:	78 f0       	brcs	.+30     	; 0x7c4a <fifo_read+0x82>
    7c2c:	0f c0       	rjmp	.+30     	; 0x7c4c <fifo_read+0x84>
		{
			//if non fragmented read, wait for data in buffer to be complete
			size_read = size_target;
			do
			{
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7c2e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7c30:	f8 94       	cli
				{
					tempint = obj->bytes_used;
    7c32:	8a 81       	ldd	r24, Y+2	; 0x02
    7c34:	9b 81       	ldd	r25, Y+3	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7c36:	2f bf       	out	0x3f, r18	; 63
				}
				if(tempint < size_target && obj->wait_fptr)
    7c38:	88 15       	cp	r24, r8
    7c3a:	99 05       	cpc	r25, r9
    7c3c:	30 f4       	brcc	.+12     	; 0x7c4a <fifo_read+0x82>
    7c3e:	e8 89       	ldd	r30, Y+16	; 0x10
    7c40:	f9 89       	ldd	r31, Y+17	; 0x11
    7c42:	30 97       	sbiw	r30, 0x00	; 0
    7c44:	a1 f3       	breq	.-24     	; 0x7c2e <fifo_read+0x66>
					obj->wait_fptr();
    7c46:	09 95       	icall
    7c48:	f2 cf       	rjmp	.-28     	; 0x7c2e <fifo_read+0x66>
    7c4a:	54 01       	movw	r10, r8
			}while(tempint < size_target);
		};
		
		size_target-=size_read;
		// do we need to read twice?
		tempint = obj->end - obj->tail_ptr;
    7c4c:	ec 84       	ldd	r14, Y+12	; 0x0c
    7c4e:	fd 84       	ldd	r15, Y+13	; 0x0d
    7c50:	88 85       	ldd	r24, Y+8	; 0x08
    7c52:	99 85       	ldd	r25, Y+9	; 0x09
    7c54:	e8 1a       	sub	r14, r24
    7c56:	f9 0a       	sbc	r15, r25
		if( tempint < size_read)
    7c58:	ea 14       	cp	r14, r10
    7c5a:	fb 04       	cpc	r15, r11
    7c5c:	20 f0       	brcs	.+8      	; 0x7c66 <fifo_read+0x9e>
    7c5e:	85 01       	movw	r16, r10
    7c60:	ee 24       	eor	r14, r14
    7c62:	ff 24       	eor	r15, r15
    7c64:	16 c0       	rjmp	.+44     	; 0x7c92 <fifo_read+0xca>
		{
			if(item!=NULL)
    7c66:	c1 14       	cp	r12, r1
    7c68:	d1 04       	cpc	r13, r1
    7c6a:	39 f0       	breq	.+14     	; 0x7c7a <fifo_read+0xb2>
				memcpy(item, obj->tail_ptr, tempint);
    7c6c:	28 85       	ldd	r18, Y+8	; 0x08
    7c6e:	39 85       	ldd	r19, Y+9	; 0x09
    7c70:	c6 01       	movw	r24, r12
    7c72:	b9 01       	movw	r22, r18
    7c74:	a7 01       	movw	r20, r14
    7c76:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
			size_read-=tempint;
    7c7a:	85 01       	movw	r16, r10
    7c7c:	0e 19       	sub	r16, r14
    7c7e:	1f 09       	sbc	r17, r15
			obj->tail_ptr = obj->start;
    7c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c82:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c84:	99 87       	std	Y+9, r25	; 0x09
    7c86:	88 87       	std	Y+8, r24	; 0x08
			if(item!=NULL)
    7c88:	c1 14       	cp	r12, r1
    7c8a:	d1 04       	cpc	r13, r1
    7c8c:	11 f0       	breq	.+4      	; 0x7c92 <fifo_read+0xca>
				item = (char*)item + tempint;
    7c8e:	ce 0c       	add	r12, r14
    7c90:	df 1c       	adc	r13, r15
		}
		else
			tempint=0;
		
		if(size_read && item!=NULL)
    7c92:	01 15       	cp	r16, r1
    7c94:	11 05       	cpc	r17, r1
    7c96:	51 f0       	breq	.+20     	; 0x7cac <fifo_read+0xe4>
    7c98:	c1 14       	cp	r12, r1
    7c9a:	d1 04       	cpc	r13, r1
    7c9c:	39 f0       	breq	.+14     	; 0x7cac <fifo_read+0xe4>
			memcpy(item, obj->tail_ptr, size_read);
    7c9e:	28 85       	ldd	r18, Y+8	; 0x08
    7ca0:	39 85       	ldd	r19, Y+9	; 0x09
    7ca2:	c6 01       	movw	r24, r12
    7ca4:	b9 01       	movw	r22, r18
    7ca6:	a8 01       	movw	r20, r16
    7ca8:	0e 94 fa 40 	call	0x81f4	; 0x81f4 <memcpy>
		obj->tail_ptr += size_read;
    7cac:	88 85       	ldd	r24, Y+8	; 0x08
    7cae:	99 85       	ldd	r25, Y+9	; 0x09
    7cb0:	80 0f       	add	r24, r16
    7cb2:	91 1f       	adc	r25, r17
    7cb4:	99 87       	std	Y+9, r25	; 0x09
    7cb6:	88 87       	std	Y+8, r24	; 0x08
		if(item!=NULL)
    7cb8:	c1 14       	cp	r12, r1
    7cba:	d1 04       	cpc	r13, r1
    7cbc:	11 f0       	breq	.+4      	; 0x7cc2 <fifo_read+0xfa>
			item = (char*)item + size_read;
    7cbe:	c0 0e       	add	r12, r16
    7cc0:	d1 1e       	adc	r13, r17
		
		if(obj->tail_ptr == obj->end)
    7cc2:	28 85       	ldd	r18, Y+8	; 0x08
    7cc4:	39 85       	ldd	r19, Y+9	; 0x09
    7cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    7cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    7cca:	28 17       	cp	r18, r24
    7ccc:	39 07       	cpc	r19, r25
    7cce:	21 f4       	brne	.+8      	; 0x7cd8 <fifo_read+0x110>
			obj->tail_ptr = obj->start;
    7cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    7cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    7cd4:	99 87       	std	Y+9, r25	; 0x09
    7cd6:	88 87       	std	Y+8, r24	; 0x08
		
		size_read+=tempint;
    7cd8:	98 01       	movw	r18, r16
    7cda:	2e 0d       	add	r18, r14
    7cdc:	3f 1d       	adc	r19, r15
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7cde:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7ce0:	f8 94       	cli
		{
			obj->bytes_free += size_read;
    7ce2:	88 81       	ld	r24, Y
    7ce4:	99 81       	ldd	r25, Y+1	; 0x01
    7ce6:	82 0f       	add	r24, r18
    7ce8:	93 1f       	adc	r25, r19
    7cea:	99 83       	std	Y+1, r25	; 0x01
    7cec:	88 83       	st	Y, r24
			obj->bytes_used -= size_read;
    7cee:	8a 81       	ldd	r24, Y+2	; 0x02
    7cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    7cf2:	82 1b       	sub	r24, r18
    7cf4:	93 0b       	sbc	r25, r19
    7cf6:	9b 83       	std	Y+3, r25	; 0x03
    7cf8:	8a 83       	std	Y+2, r24	; 0x02
			if(obj->bytes_used == 0)
    7cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    7cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    7cfe:	89 2b       	or	r24, r25
    7d00:	09 f4       	brne	.+2      	; 0x7d04 <fifo_read+0x13c>
				obj->empty=TRUE;
    7d02:	3c 82       	std	Y+4, r3	; 0x04
			if(obj->bytes_free != 0)
    7d04:	88 81       	ld	r24, Y
    7d06:	99 81       	ldd	r25, Y+1	; 0x01
    7d08:	89 2b       	or	r24, r25
    7d0a:	09 f0       	breq	.+2      	; 0x7d0e <fifo_read+0x146>
				obj->full=FALSE;
    7d0c:	1d 82       	std	Y+5, r1	; 0x05
				if(tempint < size_target && obj->wait_fptr)
					obj->wait_fptr();
			}while(tempint < size_target);
		};
		
		size_target-=size_read;
    7d0e:	8a 18       	sub	r8, r10
    7d10:	9b 08       	sbc	r9, r11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7d12:	4f bf       	out	0x3f, r20	; 63
	unsigned char fragment=FALSE;

	if(obj->end - obj->start < size_target)
		fragment=TRUE;

	while(size_target)
    7d14:	81 14       	cp	r8, r1
    7d16:	91 04       	cpc	r9, r1
    7d18:	09 f0       	breq	.+2      	; 0x7d1c <fifo_read+0x154>
    7d1a:	74 cf       	rjmp	.-280    	; 0x7c04 <fifo_read+0x3c>
		}
		
	};

	return item;
}
    7d1c:	c6 01       	movw	r24, r12
    7d1e:	df 91       	pop	r29
    7d20:	cf 91       	pop	r28
    7d22:	1f 91       	pop	r17
    7d24:	0f 91       	pop	r16
    7d26:	ff 90       	pop	r15
    7d28:	ef 90       	pop	r14
    7d2a:	df 90       	pop	r13
    7d2c:	cf 90       	pop	r12
    7d2e:	bf 90       	pop	r11
    7d30:	af 90       	pop	r10
    7d32:	9f 90       	pop	r9
    7d34:	8f 90       	pop	r8
    7d36:	7f 90       	pop	r7
    7d38:	6f 90       	pop	r6
    7d3a:	5f 90       	pop	r5
    7d3c:	4f 90       	pop	r4
    7d3e:	3f 90       	pop	r3
    7d40:	08 95       	ret

00007d42 <fifo_read_long>:
	fifo_read(obj, &retval, sizeof(int));
	return retval;
}

long fifo_read_long(struct fifo_control *obj)
{
    7d42:	df 93       	push	r29
    7d44:	cf 93       	push	r28
    7d46:	00 d0       	rcall	.+0      	; 0x7d48 <fifo_read_long+0x6>
    7d48:	00 d0       	rcall	.+0      	; 0x7d4a <fifo_read_long+0x8>
    7d4a:	cd b7       	in	r28, 0x3d	; 61
    7d4c:	de b7       	in	r29, 0x3e	; 62
	long retval;
	fifo_read(obj, &retval, sizeof(long));
    7d4e:	be 01       	movw	r22, r28
    7d50:	6f 5f       	subi	r22, 0xFF	; 255
    7d52:	7f 4f       	sbci	r23, 0xFF	; 255
    7d54:	44 e0       	ldi	r20, 0x04	; 4
    7d56:	50 e0       	ldi	r21, 0x00	; 0
    7d58:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <fifo_read>
    7d5c:	69 81       	ldd	r22, Y+1	; 0x01
    7d5e:	7a 81       	ldd	r23, Y+2	; 0x02
	return retval;
}
    7d60:	8b 81       	ldd	r24, Y+3	; 0x03
    7d62:	9c 81       	ldd	r25, Y+4	; 0x04
    7d64:	0f 90       	pop	r0
    7d66:	0f 90       	pop	r0
    7d68:	0f 90       	pop	r0
    7d6a:	0f 90       	pop	r0
    7d6c:	cf 91       	pop	r28
    7d6e:	df 91       	pop	r29
    7d70:	08 95       	ret

00007d72 <fifo_read_int>:

	return retval;
}

int fifo_read_int(struct fifo_control *obj)
{
    7d72:	df 93       	push	r29
    7d74:	cf 93       	push	r28
    7d76:	00 d0       	rcall	.+0      	; 0x7d78 <fifo_read_int+0x6>
    7d78:	cd b7       	in	r28, 0x3d	; 61
    7d7a:	de b7       	in	r29, 0x3e	; 62
	int retval;
	fifo_read(obj, &retval, sizeof(int));
    7d7c:	be 01       	movw	r22, r28
    7d7e:	6f 5f       	subi	r22, 0xFF	; 255
    7d80:	7f 4f       	sbci	r23, 0xFF	; 255
    7d82:	42 e0       	ldi	r20, 0x02	; 2
    7d84:	50 e0       	ldi	r21, 0x00	; 0
    7d86:	0e 94 e4 3d 	call	0x7bc8	; 0x7bc8 <fifo_read>
	return retval;
}
    7d8a:	89 81       	ldd	r24, Y+1	; 0x01
    7d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    7d8e:	0f 90       	pop	r0
    7d90:	0f 90       	pop	r0
    7d92:	cf 91       	pop	r28
    7d94:	df 91       	pop	r29
    7d96:	08 95       	ret

00007d98 <fifo_init>:
	fifo_write_P(obj, string, strlen_P(string));
}

// (&control structure, size in bytes, post_write function pointer, wait function pointer, &data_space)
void fifo_init(struct fifo_control *obj, unsigned int size, void(*post_fptr)(void), void(*wait_fptr)(void), void *data_space)
{
    7d98:	af 92       	push	r10
    7d9a:	bf 92       	push	r11
    7d9c:	cf 92       	push	r12
    7d9e:	df 92       	push	r13
    7da0:	ef 92       	push	r14
    7da2:	ff 92       	push	r15
    7da4:	0f 93       	push	r16
    7da6:	1f 93       	push	r17
    7da8:	cf 93       	push	r28
    7daa:	df 93       	push	r29
    7dac:	ec 01       	movw	r28, r24
    7dae:	7b 01       	movw	r14, r22
    7db0:	6a 01       	movw	r12, r20
    7db2:	59 01       	movw	r10, r18
	if(data_space == NULL)
    7db4:	01 15       	cp	r16, r1
    7db6:	11 05       	cpc	r17, r1
    7db8:	51 f4       	brne	.+20     	; 0x7dce <fifo_init+0x36>
	{
		if( (obj->start = malloc(size)) == NULL )
    7dba:	cb 01       	movw	r24, r22
    7dbc:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <malloc>
    7dc0:	9b 87       	std	Y+11, r25	; 0x0b
    7dc2:	8a 87       	std	Y+10, r24	; 0x0a
    7dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7dc8:	89 2b       	or	r24, r25
    7dca:	19 f4       	brne	.+6      	; 0x7dd2 <fifo_init+0x3a>
    7dcc:	ff cf       	rjmp	.-2      	; 0x7dcc <fifo_init+0x34>
			while(1);
	}
	else
		obj->start = data_space;
    7dce:	1b 87       	std	Y+11, r17	; 0x0b
    7dd0:	0a 87       	std	Y+10, r16	; 0x0a

	obj->end=obj->start + size;		// note, end points to last item in buffer + 1
    7dd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7dd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7dd6:	8e 0d       	add	r24, r14
    7dd8:	9f 1d       	adc	r25, r15
    7dda:	9d 87       	std	Y+13, r25	; 0x0d
    7ddc:	8c 87       	std	Y+12, r24	; 0x0c
	obj->post_fptr=post_fptr;
    7dde:	df 86       	std	Y+15, r13	; 0x0f
    7de0:	ce 86       	std	Y+14, r12	; 0x0e
	obj->wait_fptr=wait_fptr;
    7de2:	b9 8a       	std	Y+17, r11	; 0x11
    7de4:	a8 8a       	std	Y+16, r10	; 0x10
	fifo_flush(obj);
    7de6:	ce 01       	movw	r24, r28
    7de8:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <fifo_flush>
} 
    7dec:	df 91       	pop	r29
    7dee:	cf 91       	pop	r28
    7df0:	1f 91       	pop	r17
    7df2:	0f 91       	pop	r16
    7df4:	ff 90       	pop	r15
    7df6:	ef 90       	pop	r14
    7df8:	df 90       	pop	r13
    7dfa:	cf 90       	pop	r12
    7dfc:	bf 90       	pop	r11
    7dfe:	af 90       	pop	r10
    7e00:	08 95       	ret

00007e02 <fifo_write_string_P>:
{
	fifo_write(obj, string, strlen(string));
}

void fifo_write_string_P(struct fifo_control *obj, PGM_P string)
{
    7e02:	ef 92       	push	r14
    7e04:	ff 92       	push	r15
    7e06:	0f 93       	push	r16
    7e08:	1f 93       	push	r17
    7e0a:	7c 01       	movw	r14, r24
    7e0c:	8b 01       	movw	r16, r22
	fifo_write_P(obj, string, strlen_P(string));
    7e0e:	cb 01       	movw	r24, r22
    7e10:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <strlen_P>
    7e14:	ac 01       	movw	r20, r24
    7e16:	c7 01       	movw	r24, r14
    7e18:	b8 01       	movw	r22, r16
    7e1a:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fifo_write_P>
}
    7e1e:	1f 91       	pop	r17
    7e20:	0f 91       	pop	r16
    7e22:	ff 90       	pop	r15
    7e24:	ef 90       	pop	r14
    7e26:	08 95       	ret

00007e28 <fifo_write_string>:
	fifo_write(obj, &data, sizeof(long));
}

void fifo_write_string(struct fifo_control *obj, char*string)
{
	fifo_write(obj, string, strlen(string));
    7e28:	db 01       	movw	r26, r22
    7e2a:	0d 90       	ld	r0, X+
    7e2c:	00 20       	and	r0, r0
    7e2e:	e9 f7       	brne	.-6      	; 0x7e2a <fifo_write_string+0x2>
    7e30:	11 97       	sbiw	r26, 0x01	; 1
    7e32:	a6 1b       	sub	r26, r22
    7e34:	b7 0b       	sbc	r27, r23
    7e36:	ad 01       	movw	r20, r26
    7e38:	0e 94 30 3c 	call	0x7860	; 0x7860 <fifo_write>
}
    7e3c:	08 95       	ret

00007e3e <__mulsi3>:
    7e3e:	62 9f       	mul	r22, r18
    7e40:	d0 01       	movw	r26, r0
    7e42:	73 9f       	mul	r23, r19
    7e44:	f0 01       	movw	r30, r0
    7e46:	82 9f       	mul	r24, r18
    7e48:	e0 0d       	add	r30, r0
    7e4a:	f1 1d       	adc	r31, r1
    7e4c:	64 9f       	mul	r22, r20
    7e4e:	e0 0d       	add	r30, r0
    7e50:	f1 1d       	adc	r31, r1
    7e52:	92 9f       	mul	r25, r18
    7e54:	f0 0d       	add	r31, r0
    7e56:	83 9f       	mul	r24, r19
    7e58:	f0 0d       	add	r31, r0
    7e5a:	74 9f       	mul	r23, r20
    7e5c:	f0 0d       	add	r31, r0
    7e5e:	65 9f       	mul	r22, r21
    7e60:	f0 0d       	add	r31, r0
    7e62:	99 27       	eor	r25, r25
    7e64:	72 9f       	mul	r23, r18
    7e66:	b0 0d       	add	r27, r0
    7e68:	e1 1d       	adc	r30, r1
    7e6a:	f9 1f       	adc	r31, r25
    7e6c:	63 9f       	mul	r22, r19
    7e6e:	b0 0d       	add	r27, r0
    7e70:	e1 1d       	adc	r30, r1
    7e72:	f9 1f       	adc	r31, r25
    7e74:	bd 01       	movw	r22, r26
    7e76:	cf 01       	movw	r24, r30
    7e78:	11 24       	eor	r1, r1
    7e7a:	08 95       	ret

00007e7c <__udivmodhi4>:
    7e7c:	aa 1b       	sub	r26, r26
    7e7e:	bb 1b       	sub	r27, r27
    7e80:	51 e1       	ldi	r21, 0x11	; 17
    7e82:	07 c0       	rjmp	.+14     	; 0x7e92 <__udivmodhi4_ep>

00007e84 <__udivmodhi4_loop>:
    7e84:	aa 1f       	adc	r26, r26
    7e86:	bb 1f       	adc	r27, r27
    7e88:	a6 17       	cp	r26, r22
    7e8a:	b7 07       	cpc	r27, r23
    7e8c:	10 f0       	brcs	.+4      	; 0x7e92 <__udivmodhi4_ep>
    7e8e:	a6 1b       	sub	r26, r22
    7e90:	b7 0b       	sbc	r27, r23

00007e92 <__udivmodhi4_ep>:
    7e92:	88 1f       	adc	r24, r24
    7e94:	99 1f       	adc	r25, r25
    7e96:	5a 95       	dec	r21
    7e98:	a9 f7       	brne	.-22     	; 0x7e84 <__udivmodhi4_loop>
    7e9a:	80 95       	com	r24
    7e9c:	90 95       	com	r25
    7e9e:	bc 01       	movw	r22, r24
    7ea0:	cd 01       	movw	r24, r26
    7ea2:	08 95       	ret

00007ea4 <__udivmodsi4>:
    7ea4:	a1 e2       	ldi	r26, 0x21	; 33
    7ea6:	1a 2e       	mov	r1, r26
    7ea8:	aa 1b       	sub	r26, r26
    7eaa:	bb 1b       	sub	r27, r27
    7eac:	fd 01       	movw	r30, r26
    7eae:	0d c0       	rjmp	.+26     	; 0x7eca <__udivmodsi4_ep>

00007eb0 <__udivmodsi4_loop>:
    7eb0:	aa 1f       	adc	r26, r26
    7eb2:	bb 1f       	adc	r27, r27
    7eb4:	ee 1f       	adc	r30, r30
    7eb6:	ff 1f       	adc	r31, r31
    7eb8:	a2 17       	cp	r26, r18
    7eba:	b3 07       	cpc	r27, r19
    7ebc:	e4 07       	cpc	r30, r20
    7ebe:	f5 07       	cpc	r31, r21
    7ec0:	20 f0       	brcs	.+8      	; 0x7eca <__udivmodsi4_ep>
    7ec2:	a2 1b       	sub	r26, r18
    7ec4:	b3 0b       	sbc	r27, r19
    7ec6:	e4 0b       	sbc	r30, r20
    7ec8:	f5 0b       	sbc	r31, r21

00007eca <__udivmodsi4_ep>:
    7eca:	66 1f       	adc	r22, r22
    7ecc:	77 1f       	adc	r23, r23
    7ece:	88 1f       	adc	r24, r24
    7ed0:	99 1f       	adc	r25, r25
    7ed2:	1a 94       	dec	r1
    7ed4:	69 f7       	brne	.-38     	; 0x7eb0 <__udivmodsi4_loop>
    7ed6:	60 95       	com	r22
    7ed8:	70 95       	com	r23
    7eda:	80 95       	com	r24
    7edc:	90 95       	com	r25
    7ede:	9b 01       	movw	r18, r22
    7ee0:	ac 01       	movw	r20, r24
    7ee2:	bd 01       	movw	r22, r26
    7ee4:	cf 01       	movw	r24, r30
    7ee6:	08 95       	ret

00007ee8 <malloc>:
    7ee8:	cf 93       	push	r28
    7eea:	df 93       	push	r29
    7eec:	bc 01       	movw	r22, r24
    7eee:	82 30       	cpi	r24, 0x02	; 2
    7ef0:	91 05       	cpc	r25, r1
    7ef2:	10 f4       	brcc	.+4      	; 0x7ef8 <malloc+0x10>
    7ef4:	62 e0       	ldi	r22, 0x02	; 2
    7ef6:	70 e0       	ldi	r23, 0x00	; 0
    7ef8:	a0 91 50 0c 	lds	r26, 0x0C50
    7efc:	b0 91 51 0c 	lds	r27, 0x0C51
    7f00:	ed 01       	movw	r28, r26
    7f02:	e0 e0       	ldi	r30, 0x00	; 0
    7f04:	f0 e0       	ldi	r31, 0x00	; 0
    7f06:	40 e0       	ldi	r20, 0x00	; 0
    7f08:	50 e0       	ldi	r21, 0x00	; 0
    7f0a:	21 c0       	rjmp	.+66     	; 0x7f4e <malloc+0x66>
    7f0c:	88 81       	ld	r24, Y
    7f0e:	99 81       	ldd	r25, Y+1	; 0x01
    7f10:	86 17       	cp	r24, r22
    7f12:	97 07       	cpc	r25, r23
    7f14:	69 f4       	brne	.+26     	; 0x7f30 <malloc+0x48>
    7f16:	8a 81       	ldd	r24, Y+2	; 0x02
    7f18:	9b 81       	ldd	r25, Y+3	; 0x03
    7f1a:	30 97       	sbiw	r30, 0x00	; 0
    7f1c:	19 f0       	breq	.+6      	; 0x7f24 <malloc+0x3c>
    7f1e:	93 83       	std	Z+3, r25	; 0x03
    7f20:	82 83       	std	Z+2, r24	; 0x02
    7f22:	04 c0       	rjmp	.+8      	; 0x7f2c <malloc+0x44>
    7f24:	90 93 51 0c 	sts	0x0C51, r25
    7f28:	80 93 50 0c 	sts	0x0C50, r24
    7f2c:	fe 01       	movw	r30, r28
    7f2e:	34 c0       	rjmp	.+104    	; 0x7f98 <malloc+0xb0>
    7f30:	68 17       	cp	r22, r24
    7f32:	79 07       	cpc	r23, r25
    7f34:	38 f4       	brcc	.+14     	; 0x7f44 <malloc+0x5c>
    7f36:	41 15       	cp	r20, r1
    7f38:	51 05       	cpc	r21, r1
    7f3a:	19 f0       	breq	.+6      	; 0x7f42 <malloc+0x5a>
    7f3c:	84 17       	cp	r24, r20
    7f3e:	95 07       	cpc	r25, r21
    7f40:	08 f4       	brcc	.+2      	; 0x7f44 <malloc+0x5c>
    7f42:	ac 01       	movw	r20, r24
    7f44:	fe 01       	movw	r30, r28
    7f46:	8a 81       	ldd	r24, Y+2	; 0x02
    7f48:	9b 81       	ldd	r25, Y+3	; 0x03
    7f4a:	9c 01       	movw	r18, r24
    7f4c:	e9 01       	movw	r28, r18
    7f4e:	20 97       	sbiw	r28, 0x00	; 0
    7f50:	e9 f6       	brne	.-70     	; 0x7f0c <malloc+0x24>
    7f52:	41 15       	cp	r20, r1
    7f54:	51 05       	cpc	r21, r1
    7f56:	a9 f1       	breq	.+106    	; 0x7fc2 <malloc+0xda>
    7f58:	ca 01       	movw	r24, r20
    7f5a:	86 1b       	sub	r24, r22
    7f5c:	97 0b       	sbc	r25, r23
    7f5e:	04 97       	sbiw	r24, 0x04	; 4
    7f60:	08 f4       	brcc	.+2      	; 0x7f64 <malloc+0x7c>
    7f62:	ba 01       	movw	r22, r20
    7f64:	e0 e0       	ldi	r30, 0x00	; 0
    7f66:	f0 e0       	ldi	r31, 0x00	; 0
    7f68:	2a c0       	rjmp	.+84     	; 0x7fbe <malloc+0xd6>
    7f6a:	8d 91       	ld	r24, X+
    7f6c:	9c 91       	ld	r25, X
    7f6e:	11 97       	sbiw	r26, 0x01	; 1
    7f70:	84 17       	cp	r24, r20
    7f72:	95 07       	cpc	r25, r21
    7f74:	f9 f4       	brne	.+62     	; 0x7fb4 <malloc+0xcc>
    7f76:	64 17       	cp	r22, r20
    7f78:	75 07       	cpc	r23, r21
    7f7a:	81 f4       	brne	.+32     	; 0x7f9c <malloc+0xb4>
    7f7c:	12 96       	adiw	r26, 0x02	; 2
    7f7e:	8d 91       	ld	r24, X+
    7f80:	9c 91       	ld	r25, X
    7f82:	13 97       	sbiw	r26, 0x03	; 3
    7f84:	30 97       	sbiw	r30, 0x00	; 0
    7f86:	19 f0       	breq	.+6      	; 0x7f8e <malloc+0xa6>
    7f88:	93 83       	std	Z+3, r25	; 0x03
    7f8a:	82 83       	std	Z+2, r24	; 0x02
    7f8c:	04 c0       	rjmp	.+8      	; 0x7f96 <malloc+0xae>
    7f8e:	90 93 51 0c 	sts	0x0C51, r25
    7f92:	80 93 50 0c 	sts	0x0C50, r24
    7f96:	fd 01       	movw	r30, r26
    7f98:	32 96       	adiw	r30, 0x02	; 2
    7f9a:	4f c0       	rjmp	.+158    	; 0x803a <malloc+0x152>
    7f9c:	ca 01       	movw	r24, r20
    7f9e:	86 1b       	sub	r24, r22
    7fa0:	97 0b       	sbc	r25, r23
    7fa2:	fd 01       	movw	r30, r26
    7fa4:	e8 0f       	add	r30, r24
    7fa6:	f9 1f       	adc	r31, r25
    7fa8:	61 93       	st	Z+, r22
    7faa:	71 93       	st	Z+, r23
    7fac:	02 97       	sbiw	r24, 0x02	; 2
    7fae:	8d 93       	st	X+, r24
    7fb0:	9c 93       	st	X, r25
    7fb2:	43 c0       	rjmp	.+134    	; 0x803a <malloc+0x152>
    7fb4:	fd 01       	movw	r30, r26
    7fb6:	82 81       	ldd	r24, Z+2	; 0x02
    7fb8:	93 81       	ldd	r25, Z+3	; 0x03
    7fba:	9c 01       	movw	r18, r24
    7fbc:	d9 01       	movw	r26, r18
    7fbe:	10 97       	sbiw	r26, 0x00	; 0
    7fc0:	a1 f6       	brne	.-88     	; 0x7f6a <malloc+0x82>
    7fc2:	80 91 4e 0c 	lds	r24, 0x0C4E
    7fc6:	90 91 4f 0c 	lds	r25, 0x0C4F
    7fca:	89 2b       	or	r24, r25
    7fcc:	41 f4       	brne	.+16     	; 0x7fde <malloc+0xf6>
    7fce:	80 91 0b 02 	lds	r24, 0x020B
    7fd2:	90 91 0c 02 	lds	r25, 0x020C
    7fd6:	90 93 4f 0c 	sts	0x0C4F, r25
    7fda:	80 93 4e 0c 	sts	0x0C4E, r24
    7fde:	40 91 0d 02 	lds	r20, 0x020D
    7fe2:	50 91 0e 02 	lds	r21, 0x020E
    7fe6:	41 15       	cp	r20, r1
    7fe8:	51 05       	cpc	r21, r1
    7fea:	41 f4       	brne	.+16     	; 0x7ffc <malloc+0x114>
    7fec:	4d b7       	in	r20, 0x3d	; 61
    7fee:	5e b7       	in	r21, 0x3e	; 62
    7ff0:	80 91 09 02 	lds	r24, 0x0209
    7ff4:	90 91 0a 02 	lds	r25, 0x020A
    7ff8:	48 1b       	sub	r20, r24
    7ffa:	59 0b       	sbc	r21, r25
    7ffc:	20 91 4e 0c 	lds	r18, 0x0C4E
    8000:	30 91 4f 0c 	lds	r19, 0x0C4F
    8004:	24 17       	cp	r18, r20
    8006:	35 07       	cpc	r19, r21
    8008:	b0 f4       	brcc	.+44     	; 0x8036 <malloc+0x14e>
    800a:	ca 01       	movw	r24, r20
    800c:	82 1b       	sub	r24, r18
    800e:	93 0b       	sbc	r25, r19
    8010:	86 17       	cp	r24, r22
    8012:	97 07       	cpc	r25, r23
    8014:	80 f0       	brcs	.+32     	; 0x8036 <malloc+0x14e>
    8016:	ab 01       	movw	r20, r22
    8018:	4e 5f       	subi	r20, 0xFE	; 254
    801a:	5f 4f       	sbci	r21, 0xFF	; 255
    801c:	84 17       	cp	r24, r20
    801e:	95 07       	cpc	r25, r21
    8020:	50 f0       	brcs	.+20     	; 0x8036 <malloc+0x14e>
    8022:	42 0f       	add	r20, r18
    8024:	53 1f       	adc	r21, r19
    8026:	50 93 4f 0c 	sts	0x0C4F, r21
    802a:	40 93 4e 0c 	sts	0x0C4E, r20
    802e:	f9 01       	movw	r30, r18
    8030:	61 93       	st	Z+, r22
    8032:	71 93       	st	Z+, r23
    8034:	02 c0       	rjmp	.+4      	; 0x803a <malloc+0x152>
    8036:	e0 e0       	ldi	r30, 0x00	; 0
    8038:	f0 e0       	ldi	r31, 0x00	; 0
    803a:	cf 01       	movw	r24, r30
    803c:	df 91       	pop	r29
    803e:	cf 91       	pop	r28
    8040:	08 95       	ret

00008042 <free>:
    8042:	cf 93       	push	r28
    8044:	df 93       	push	r29
    8046:	00 97       	sbiw	r24, 0x00	; 0
    8048:	09 f4       	brne	.+2      	; 0x804c <free+0xa>
    804a:	50 c0       	rjmp	.+160    	; 0x80ec <free+0xaa>
    804c:	ec 01       	movw	r28, r24
    804e:	22 97       	sbiw	r28, 0x02	; 2
    8050:	1b 82       	std	Y+3, r1	; 0x03
    8052:	1a 82       	std	Y+2, r1	; 0x02
    8054:	a0 91 50 0c 	lds	r26, 0x0C50
    8058:	b0 91 51 0c 	lds	r27, 0x0C51
    805c:	10 97       	sbiw	r26, 0x00	; 0
    805e:	09 f1       	breq	.+66     	; 0x80a2 <free+0x60>
    8060:	40 e0       	ldi	r20, 0x00	; 0
    8062:	50 e0       	ldi	r21, 0x00	; 0
    8064:	ac 17       	cp	r26, r28
    8066:	bd 07       	cpc	r27, r29
    8068:	08 f1       	brcs	.+66     	; 0x80ac <free+0x6a>
    806a:	bb 83       	std	Y+3, r27	; 0x03
    806c:	aa 83       	std	Y+2, r26	; 0x02
    806e:	fe 01       	movw	r30, r28
    8070:	21 91       	ld	r18, Z+
    8072:	31 91       	ld	r19, Z+
    8074:	e2 0f       	add	r30, r18
    8076:	f3 1f       	adc	r31, r19
    8078:	ae 17       	cp	r26, r30
    807a:	bf 07       	cpc	r27, r31
    807c:	79 f4       	brne	.+30     	; 0x809c <free+0x5a>
    807e:	8d 91       	ld	r24, X+
    8080:	9c 91       	ld	r25, X
    8082:	11 97       	sbiw	r26, 0x01	; 1
    8084:	28 0f       	add	r18, r24
    8086:	39 1f       	adc	r19, r25
    8088:	2e 5f       	subi	r18, 0xFE	; 254
    808a:	3f 4f       	sbci	r19, 0xFF	; 255
    808c:	39 83       	std	Y+1, r19	; 0x01
    808e:	28 83       	st	Y, r18
    8090:	12 96       	adiw	r26, 0x02	; 2
    8092:	8d 91       	ld	r24, X+
    8094:	9c 91       	ld	r25, X
    8096:	13 97       	sbiw	r26, 0x03	; 3
    8098:	9b 83       	std	Y+3, r25	; 0x03
    809a:	8a 83       	std	Y+2, r24	; 0x02
    809c:	41 15       	cp	r20, r1
    809e:	51 05       	cpc	r21, r1
    80a0:	71 f4       	brne	.+28     	; 0x80be <free+0x7c>
    80a2:	d0 93 51 0c 	sts	0x0C51, r29
    80a6:	c0 93 50 0c 	sts	0x0C50, r28
    80aa:	20 c0       	rjmp	.+64     	; 0x80ec <free+0xaa>
    80ac:	12 96       	adiw	r26, 0x02	; 2
    80ae:	8d 91       	ld	r24, X+
    80b0:	9c 91       	ld	r25, X
    80b2:	13 97       	sbiw	r26, 0x03	; 3
    80b4:	ad 01       	movw	r20, r26
    80b6:	00 97       	sbiw	r24, 0x00	; 0
    80b8:	11 f0       	breq	.+4      	; 0x80be <free+0x7c>
    80ba:	dc 01       	movw	r26, r24
    80bc:	d3 cf       	rjmp	.-90     	; 0x8064 <free+0x22>
    80be:	fa 01       	movw	r30, r20
    80c0:	d3 83       	std	Z+3, r29	; 0x03
    80c2:	c2 83       	std	Z+2, r28	; 0x02
    80c4:	21 91       	ld	r18, Z+
    80c6:	31 91       	ld	r19, Z+
    80c8:	e2 0f       	add	r30, r18
    80ca:	f3 1f       	adc	r31, r19
    80cc:	ce 17       	cp	r28, r30
    80ce:	df 07       	cpc	r29, r31
    80d0:	69 f4       	brne	.+26     	; 0x80ec <free+0xaa>
    80d2:	88 81       	ld	r24, Y
    80d4:	99 81       	ldd	r25, Y+1	; 0x01
    80d6:	28 0f       	add	r18, r24
    80d8:	39 1f       	adc	r19, r25
    80da:	2e 5f       	subi	r18, 0xFE	; 254
    80dc:	3f 4f       	sbci	r19, 0xFF	; 255
    80de:	fa 01       	movw	r30, r20
    80e0:	31 83       	std	Z+1, r19	; 0x01
    80e2:	20 83       	st	Z, r18
    80e4:	8a 81       	ldd	r24, Y+2	; 0x02
    80e6:	9b 81       	ldd	r25, Y+3	; 0x03
    80e8:	93 83       	std	Z+3, r25	; 0x03
    80ea:	82 83       	std	Z+2, r24	; 0x02
    80ec:	df 91       	pop	r29
    80ee:	cf 91       	pop	r28
    80f0:	08 95       	ret

000080f2 <atoi>:
    80f2:	fc 01       	movw	r30, r24
    80f4:	88 27       	eor	r24, r24
    80f6:	99 27       	eor	r25, r25
    80f8:	e8 94       	clt
    80fa:	21 91       	ld	r18, Z+
    80fc:	20 32       	cpi	r18, 0x20	; 32
    80fe:	e9 f3       	breq	.-6      	; 0x80fa <atoi+0x8>
    8100:	29 30       	cpi	r18, 0x09	; 9
    8102:	10 f0       	brcs	.+4      	; 0x8108 <atoi+0x16>
    8104:	2e 30       	cpi	r18, 0x0E	; 14
    8106:	c8 f3       	brcs	.-14     	; 0x80fa <atoi+0x8>
    8108:	2b 32       	cpi	r18, 0x2B	; 43
    810a:	41 f0       	breq	.+16     	; 0x811c <atoi+0x2a>
    810c:	2d 32       	cpi	r18, 0x2D	; 45
    810e:	39 f4       	brne	.+14     	; 0x811e <atoi+0x2c>
    8110:	68 94       	set
    8112:	04 c0       	rjmp	.+8      	; 0x811c <atoi+0x2a>
    8114:	0e 94 74 41 	call	0x82e8	; 0x82e8 <__mulhi_const_10>
    8118:	82 0f       	add	r24, r18
    811a:	91 1d       	adc	r25, r1
    811c:	21 91       	ld	r18, Z+
    811e:	20 53       	subi	r18, 0x30	; 48
    8120:	2a 30       	cpi	r18, 0x0A	; 10
    8122:	c0 f3       	brcs	.-16     	; 0x8114 <atoi+0x22>
    8124:	1e f4       	brtc	.+6      	; 0x812c <atoi+0x3a>
    8126:	90 95       	com	r25
    8128:	81 95       	neg	r24
    812a:	9f 4f       	sbci	r25, 0xFF	; 255
    812c:	08 95       	ret

0000812e <atol>:
    812e:	1f 93       	push	r17
    8130:	fc 01       	movw	r30, r24
    8132:	99 27       	eor	r25, r25
    8134:	88 27       	eor	r24, r24
    8136:	bc 01       	movw	r22, r24
    8138:	e8 94       	clt
    813a:	11 91       	ld	r17, Z+
    813c:	10 32       	cpi	r17, 0x20	; 32
    813e:	e9 f3       	breq	.-6      	; 0x813a <atol+0xc>
    8140:	19 30       	cpi	r17, 0x09	; 9
    8142:	10 f0       	brcs	.+4      	; 0x8148 <atol+0x1a>
    8144:	1e 30       	cpi	r17, 0x0E	; 14
    8146:	c8 f3       	brcs	.-14     	; 0x813a <atol+0xc>
    8148:	1b 32       	cpi	r17, 0x2B	; 43
    814a:	51 f0       	breq	.+20     	; 0x8160 <atol+0x32>
    814c:	1d 32       	cpi	r17, 0x2D	; 45
    814e:	49 f4       	brne	.+18     	; 0x8162 <atol+0x34>
    8150:	68 94       	set
    8152:	06 c0       	rjmp	.+12     	; 0x8160 <atol+0x32>
    8154:	0e 94 5f 41 	call	0x82be	; 0x82be <__mulsi_const_10>
    8158:	61 0f       	add	r22, r17
    815a:	71 1d       	adc	r23, r1
    815c:	81 1d       	adc	r24, r1
    815e:	91 1d       	adc	r25, r1
    8160:	11 91       	ld	r17, Z+
    8162:	10 53       	subi	r17, 0x30	; 48
    8164:	1a 30       	cpi	r17, 0x0A	; 10
    8166:	b0 f3       	brcs	.-20     	; 0x8154 <atol+0x26>
    8168:	3e f4       	brtc	.+14     	; 0x8178 <atol+0x4a>
    816a:	90 95       	com	r25
    816c:	80 95       	com	r24
    816e:	70 95       	com	r23
    8170:	61 95       	neg	r22
    8172:	7f 4f       	sbci	r23, 0xFF	; 255
    8174:	8f 4f       	sbci	r24, 0xFF	; 255
    8176:	9f 4f       	sbci	r25, 0xFF	; 255
    8178:	1f 91       	pop	r17
    817a:	08 95       	ret

0000817c <memcmp_P>:
    817c:	fb 01       	movw	r30, r22
    817e:	dc 01       	movw	r26, r24
    8180:	04 c0       	rjmp	.+8      	; 0x818a <memcmp_P+0xe>
    8182:	8d 91       	ld	r24, X+
    8184:	05 90       	lpm	r0, Z+
    8186:	80 19       	sub	r24, r0
    8188:	21 f4       	brne	.+8      	; 0x8192 <memcmp_P+0x16>
    818a:	41 50       	subi	r20, 0x01	; 1
    818c:	50 40       	sbci	r21, 0x00	; 0
    818e:	c8 f7       	brcc	.-14     	; 0x8182 <memcmp_P+0x6>
    8190:	88 1b       	sub	r24, r24
    8192:	99 0b       	sbc	r25, r25
    8194:	08 95       	ret

00008196 <memcpy_P>:
    8196:	fb 01       	movw	r30, r22
    8198:	dc 01       	movw	r26, r24
    819a:	02 c0       	rjmp	.+4      	; 0x81a0 <memcpy_P+0xa>
    819c:	05 90       	lpm	r0, Z+
    819e:	0d 92       	st	X+, r0
    81a0:	41 50       	subi	r20, 0x01	; 1
    81a2:	50 40       	sbci	r21, 0x00	; 0
    81a4:	d8 f7       	brcc	.-10     	; 0x819c <memcpy_P+0x6>
    81a6:	08 95       	ret

000081a8 <strcmp_P>:
    81a8:	fb 01       	movw	r30, r22
    81aa:	dc 01       	movw	r26, r24
    81ac:	8d 91       	ld	r24, X+
    81ae:	05 90       	lpm	r0, Z+
    81b0:	80 19       	sub	r24, r0
    81b2:	01 10       	cpse	r0, r1
    81b4:	d9 f3       	breq	.-10     	; 0x81ac <strcmp_P+0x4>
    81b6:	99 0b       	sbc	r25, r25
    81b8:	08 95       	ret

000081ba <strcpy_P>:
    81ba:	fb 01       	movw	r30, r22
    81bc:	dc 01       	movw	r26, r24
    81be:	05 90       	lpm	r0, Z+
    81c0:	0d 92       	st	X+, r0
    81c2:	00 20       	and	r0, r0
    81c4:	e1 f7       	brne	.-8      	; 0x81be <strcpy_P+0x4>
    81c6:	08 95       	ret

000081c8 <strlen_P>:
    81c8:	fc 01       	movw	r30, r24
    81ca:	05 90       	lpm	r0, Z+
    81cc:	00 20       	and	r0, r0
    81ce:	e9 f7       	brne	.-6      	; 0x81ca <strlen_P+0x2>
    81d0:	80 95       	com	r24
    81d2:	90 95       	com	r25
    81d4:	8e 0f       	add	r24, r30
    81d6:	9f 1f       	adc	r25, r31
    81d8:	08 95       	ret

000081da <memcmp>:
    81da:	fb 01       	movw	r30, r22
    81dc:	dc 01       	movw	r26, r24
    81de:	04 c0       	rjmp	.+8      	; 0x81e8 <memcmp+0xe>
    81e0:	8d 91       	ld	r24, X+
    81e2:	01 90       	ld	r0, Z+
    81e4:	80 19       	sub	r24, r0
    81e6:	21 f4       	brne	.+8      	; 0x81f0 <memcmp+0x16>
    81e8:	41 50       	subi	r20, 0x01	; 1
    81ea:	50 40       	sbci	r21, 0x00	; 0
    81ec:	c8 f7       	brcc	.-14     	; 0x81e0 <memcmp+0x6>
    81ee:	88 1b       	sub	r24, r24
    81f0:	99 0b       	sbc	r25, r25
    81f2:	08 95       	ret

000081f4 <memcpy>:
    81f4:	fb 01       	movw	r30, r22
    81f6:	dc 01       	movw	r26, r24
    81f8:	02 c0       	rjmp	.+4      	; 0x81fe <memcpy+0xa>
    81fa:	01 90       	ld	r0, Z+
    81fc:	0d 92       	st	X+, r0
    81fe:	41 50       	subi	r20, 0x01	; 1
    8200:	50 40       	sbci	r21, 0x00	; 0
    8202:	d8 f7       	brcc	.-10     	; 0x81fa <memcpy+0x6>
    8204:	08 95       	ret

00008206 <memset>:
    8206:	dc 01       	movw	r26, r24
    8208:	01 c0       	rjmp	.+2      	; 0x820c <memset+0x6>
    820a:	6d 93       	st	X+, r22
    820c:	41 50       	subi	r20, 0x01	; 1
    820e:	50 40       	sbci	r21, 0x00	; 0
    8210:	e0 f7       	brcc	.-8      	; 0x820a <memset+0x4>
    8212:	08 95       	ret

00008214 <itoa>:
    8214:	fb 01       	movw	r30, r22
    8216:	9f 01       	movw	r18, r30
    8218:	e8 94       	clt
    821a:	42 30       	cpi	r20, 0x02	; 2
    821c:	c4 f0       	brlt	.+48     	; 0x824e <itoa+0x3a>
    821e:	45 32       	cpi	r20, 0x25	; 37
    8220:	b4 f4       	brge	.+44     	; 0x824e <itoa+0x3a>
    8222:	4a 30       	cpi	r20, 0x0A	; 10
    8224:	29 f4       	brne	.+10     	; 0x8230 <itoa+0x1c>
    8226:	97 fb       	bst	r25, 7
    8228:	1e f4       	brtc	.+6      	; 0x8230 <itoa+0x1c>
    822a:	90 95       	com	r25
    822c:	81 95       	neg	r24
    822e:	9f 4f       	sbci	r25, 0xFF	; 255
    8230:	64 2f       	mov	r22, r20
    8232:	77 27       	eor	r23, r23
    8234:	0e 94 3e 3f 	call	0x7e7c	; 0x7e7c <__udivmodhi4>
    8238:	80 5d       	subi	r24, 0xD0	; 208
    823a:	8a 33       	cpi	r24, 0x3A	; 58
    823c:	0c f0       	brlt	.+2      	; 0x8240 <itoa+0x2c>
    823e:	89 5d       	subi	r24, 0xD9	; 217
    8240:	81 93       	st	Z+, r24
    8242:	cb 01       	movw	r24, r22
    8244:	00 97       	sbiw	r24, 0x00	; 0
    8246:	a1 f7       	brne	.-24     	; 0x8230 <itoa+0x1c>
    8248:	16 f4       	brtc	.+4      	; 0x824e <itoa+0x3a>
    824a:	5d e2       	ldi	r21, 0x2D	; 45
    824c:	51 93       	st	Z+, r21
    824e:	10 82       	st	Z, r1
    8250:	c9 01       	movw	r24, r18
    8252:	0c 94 7c 41 	jmp	0x82f8	; 0x82f8 <strrev>

00008256 <ltoa>:
    8256:	fa 01       	movw	r30, r20
    8258:	cf 93       	push	r28
    825a:	ff 93       	push	r31
    825c:	ef 93       	push	r30
    825e:	22 30       	cpi	r18, 0x02	; 2
    8260:	44 f1       	brlt	.+80     	; 0x82b2 <ltoa+0x5c>
    8262:	25 32       	cpi	r18, 0x25	; 37
    8264:	34 f5       	brge	.+76     	; 0x82b2 <ltoa+0x5c>
    8266:	c2 2f       	mov	r28, r18
    8268:	e8 94       	clt
    826a:	ca 30       	cpi	r28, 0x0A	; 10
    826c:	49 f4       	brne	.+18     	; 0x8280 <ltoa+0x2a>
    826e:	97 fb       	bst	r25, 7
    8270:	3e f4       	brtc	.+14     	; 0x8280 <ltoa+0x2a>
    8272:	90 95       	com	r25
    8274:	80 95       	com	r24
    8276:	70 95       	com	r23
    8278:	61 95       	neg	r22
    827a:	7f 4f       	sbci	r23, 0xFF	; 255
    827c:	8f 4f       	sbci	r24, 0xFF	; 255
    827e:	9f 4f       	sbci	r25, 0xFF	; 255
    8280:	2c 2f       	mov	r18, r28
    8282:	33 27       	eor	r19, r19
    8284:	44 27       	eor	r20, r20
    8286:	55 27       	eor	r21, r21
    8288:	ff 93       	push	r31
    828a:	ef 93       	push	r30
    828c:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <__udivmodsi4>
    8290:	ef 91       	pop	r30
    8292:	ff 91       	pop	r31
    8294:	60 5d       	subi	r22, 0xD0	; 208
    8296:	6a 33       	cpi	r22, 0x3A	; 58
    8298:	0c f0       	brlt	.+2      	; 0x829c <ltoa+0x46>
    829a:	69 5d       	subi	r22, 0xD9	; 217
    829c:	61 93       	st	Z+, r22
    829e:	b9 01       	movw	r22, r18
    82a0:	ca 01       	movw	r24, r20
    82a2:	60 50       	subi	r22, 0x00	; 0
    82a4:	70 40       	sbci	r23, 0x00	; 0
    82a6:	80 40       	sbci	r24, 0x00	; 0
    82a8:	90 40       	sbci	r25, 0x00	; 0
    82aa:	51 f7       	brne	.-44     	; 0x8280 <ltoa+0x2a>
    82ac:	16 f4       	brtc	.+4      	; 0x82b2 <ltoa+0x5c>
    82ae:	cd e2       	ldi	r28, 0x2D	; 45
    82b0:	c1 93       	st	Z+, r28
    82b2:	10 82       	st	Z, r1
    82b4:	8f 91       	pop	r24
    82b6:	9f 91       	pop	r25
    82b8:	cf 91       	pop	r28
    82ba:	0c 94 7c 41 	jmp	0x82f8	; 0x82f8 <strrev>

000082be <__mulsi_const_10>:
    82be:	59 2f       	mov	r21, r25
    82c0:	48 2f       	mov	r20, r24
    82c2:	37 2f       	mov	r19, r23
    82c4:	26 2f       	mov	r18, r22
    82c6:	66 0f       	add	r22, r22
    82c8:	77 1f       	adc	r23, r23
    82ca:	88 1f       	adc	r24, r24
    82cc:	99 1f       	adc	r25, r25
    82ce:	66 0f       	add	r22, r22
    82d0:	77 1f       	adc	r23, r23
    82d2:	88 1f       	adc	r24, r24
    82d4:	99 1f       	adc	r25, r25
    82d6:	62 0f       	add	r22, r18
    82d8:	73 1f       	adc	r23, r19
    82da:	84 1f       	adc	r24, r20
    82dc:	95 1f       	adc	r25, r21
    82de:	66 0f       	add	r22, r22
    82e0:	77 1f       	adc	r23, r23
    82e2:	88 1f       	adc	r24, r24
    82e4:	99 1f       	adc	r25, r25
    82e6:	08 95       	ret

000082e8 <__mulhi_const_10>:
    82e8:	7a e0       	ldi	r23, 0x0A	; 10
    82ea:	97 9f       	mul	r25, r23
    82ec:	90 2d       	mov	r25, r0
    82ee:	87 9f       	mul	r24, r23
    82f0:	80 2d       	mov	r24, r0
    82f2:	91 0d       	add	r25, r1
    82f4:	11 24       	eor	r1, r1
    82f6:	08 95       	ret

000082f8 <strrev>:
    82f8:	dc 01       	movw	r26, r24
    82fa:	fc 01       	movw	r30, r24
    82fc:	67 2f       	mov	r22, r23
    82fe:	71 91       	ld	r23, Z+
    8300:	77 23       	and	r23, r23
    8302:	e1 f7       	brne	.-8      	; 0x82fc <strrev+0x4>
    8304:	32 97       	sbiw	r30, 0x02	; 2
    8306:	04 c0       	rjmp	.+8      	; 0x8310 <strrev+0x18>
    8308:	7c 91       	ld	r23, X
    830a:	6d 93       	st	X+, r22
    830c:	70 83       	st	Z, r23
    830e:	62 91       	ld	r22, -Z
    8310:	ae 17       	cp	r26, r30
    8312:	bf 07       	cpc	r27, r31
    8314:	c8 f3       	brcs	.-14     	; 0x8308 <strrev+0x10>
    8316:	08 95       	ret

00008318 <_exit>:
    8318:	f8 94       	cli

0000831a <__stop_program>:
    831a:	ff cf       	rjmp	.-2      	; 0x831a <__stop_program>
