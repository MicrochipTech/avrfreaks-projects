__text_start:
__start:
    08E5 E5CF      LDI	R28,0x5F
    08E6 E0D4      LDI	R29,4
    08E7 BFCD      OUT	0x3D,R28
    08E8 BFDE      OUT	0x3E,R29
    08E9 51C0      SUBI	R28,0x10
    08EA 40D0      SBCI	R29,0
    08EB EA0A      LDI	R16,0xAA
    08EC 8308      STD	Y+0,R16
    08ED 2400      CLR	R0
    08EE E7E0      LDI	R30,0x70
    08EF E0F0      LDI	R31,0
    08F0 E010      LDI	R17,0
    08F1 38E4      CPI	R30,0x84
    08F2 07F1      CPC	R31,R17
    08F3 F011      BEQ	0x08F6
    08F4 9201      ST	R0,Z+
    08F5 CFFB      RJMP	0x08F1
    08F6 8300      STD	Z+0,R16
    08F7 EBEA      LDI	R30,0xBA
    08F8 E1F1      LDI	R31,0x11
    08F9 E6A0      LDI	R26,0x60
    08FA E0B0      LDI	R27,0
    08FB E111      LDI	R17,0x11
    08FC 3CEA      CPI	R30,0xCA
    08FD 07F1      CPC	R31,R17
    08FE F021      BEQ	0x0903
    08FF 95C8      LPM
    0900 9631      ADIW	R30,1
    0901 920D      ST	R0,X+
    0902 CFF9      RJMP	0x08FC
    0903 940E0938  CALL	_main
_exit:
    0905 CFFF      RJMP	_exit
FILE: F:\机器人3\led点阵传感器\AVRNES~1.0\musicbox.C
(0001) //NES音乐播放器   AVRNES Music Player1.2
(0002) 
(0003) //          BY张皓
(0004) //http://www.lotusinvention.cn/ART/nes/NESMusic.htm
(0005) //  ICC-AVR Target : ATMEGA16  Crystal: 8M,
(0006) #include <iom16v.h>
(0007) #include <macros.h>
(0008) 
(0009) #define uchar unsigned char
(0010) #define schar signed char
(0011) #define uint unsigned int  
(0012) #define sint signed int  
(0013) #define SET_BIT(io ,bit) (   io |=  (1<<bit) )   
(0014) #define CLR_BIT(io ,bit) (   io &= ~(1<<bit) )   
(0015) #define GET_BIT(pin,bit) ( pin &    (1<<bit) ) 
(0016) 
(0017) const uint music_dataRect0[]={20,15,48,52, 20,11,52,55, 17,15,55,59, 17,11,59,62, 13,15,62,66, 13,11,66,69, 10,15,69,73, 10,11,73,76, 13,15,76,80, 13,11,80,84, 13,7,84,95, 13,3,95,97, 15,10,158,162, 15,6,162,168, 20,10,168,175, 20,6,175,181, 15,10,181,188, 15,6,188,194, 14,10,194,207, 14,6,207,214, 14,2,214,217, 10,10,220,233, 10,6,233,240, 10,2,240,243, 14,10,246,257, 14,6,257,262, 14,2,262,264, 15,10,266,275, 15,6,275,280, 15,2,280,282, 20,10,284,289, 20,6,289,293, 15,10,293,298, 15,6,298,302, 20,10,302,307, 20,6,307,311, 15,10,311,316, 15,6,316,320, 14,10,320,325, 14,6,325,329, 15,10,329,334, 15,6,334,338, 20,10,338,343, 20,6,343,347, 15,10,347,352, 15,6,352,356, 14,10,356,365, 14,6,365,370, 14,2,370,372, 10,10,374,383, 10,6,383,388, 10,2,388,390, 14,10,392,401, 14,6,401,406, 14,2,406,408, 15,10,410,419, 15,6,419,424, 15,2,424,426, 20,10,428,433, 20,6,433,437, 15,10,437,442, 15,6,442,446, 20,10,446,451, 20,6,451,455, 15,10,455,460, 15,6,460,464, 14,10,464,469, 14,6,469,473, 15,10,473,478, 15,6,478,484, 20,10,484,491, 20,6,491,497, 15,10,497,504, 15,6,504,510, 14,10,510,523, 14,6,523,530, 14,2,530,533, 10,10,536,549, 10,6,549,556, 10,2,556,559, 14,10,562,573, 14,6,573,578, 14,2,578,580, 15,10,582,591, 15,6,591,596, 15,2,596,598, 20,10,600,605, 20,6,605,609, 15,10,609,614, 15,6,614,618, 20,10,618,623, 20,6,623,627, 15,10,627,632, 15,6,632,636, 14,10,636,641, 14,6,641,645, 15,10,645,650, 15,6,650,654, 20,10,654,659, 20,6,659,663, 15,10,663,668, 15,6,668,672, 14,10,672,681, 14,6,681,686, 14,2,686,688, 10,10,690,699, 10,6,699,704, 10,2,704,706, 14,10,708,717, 14,6,717,722, 14,2,722,724, 15,10,726,735, 15,6,735,740, 15,2,740,742, 20,10,744,749, 20,6,749,753, 15,10,753,758, 15,6,758,762, 20,10,762,767, 20,6,767,771, 15,10,771,776, 15,6,776,780, 14,10,780,785, 14,6,785,789, 6,15,832,836, 7,11,836,841, 7,7,841,842, 6,15,843,848, 7,11,848,852, 23,15,852,856, 13,15,856,858, 19,15,858,859, 23,15,859,860, 23,15,861,864, 13,15,864,865, 19,15,865,867, 23,15,867,869, 26,15,869,872, 23,15,872,875, 13,15,875,877, 19,15,877,878, 23,15,878,880, 26,15,880,884, 12,15,884,885, 16,15,885,886, 19,15,886,888, 10,15,888,889, 13,15,889,892, 9,15,892,893, 6,15,952,956, 7,11,956,959, 7,7,959,962, 8,5,962,966, 9,3,966,969, 23,15,977,979, 13,15,979,980, 19,15,980,982, 23,15,982,983, 26,15,983,985, 12,15,985,986, 16,15,986,987, 19,15,987,989, 10,15,989,991, 13,15,991,993, 9,15,993,994, 23,15,998,1001, 13,15,1001,1002, 19,15,1002,1003, 23,15,1003,1004, 26,15,1004,1006, 12,15,1006,1007, 16,15,1007,1009, 19,15,1009,1011, 10,15,1011,1012, 13,15,1012,1014, 9,15,1014,1015, 6,15,1036,1039, 7,11,1039,1042, 7,7,1042,1046, 8,5,1046,1049, 9,3,1049,1051, 23,15,1051,1054, 13,15,1054,1055, 19,15,1055,1056, 23,15,1056,1057, 26,15,1057,1059, 12,15,1059,1060, 16,15,1060,1061, 19,15,1061,1064, 10,15,1064,1065, 13,15,1065,1067, 9,15,1067,1068, 6,15,1075,1078, 7,11,1078,1082, 7,7,1082,1085, 8,5,1085,1088, 9,3,1088,1092, 6,15,1094,1097, 23,15,1097,1100, 13,15,1100,1101, 19,15,1101,1102, 23,15,1102,1103, 26,15,1103,1105, 12,15,1105,1106, 16,15,1106,1108, 19,15,1108,1110, 10,15,1110,1112, 13,15,1112,1115, 9,15,1115,1116, 6,15,1165,1170, 7,11,1170,1175, 7,7,1175,1176, 23,15,1177,1180, 13,15,1180,1181, 19,15,1181,1183, 23,15,1183,1185, 26,15,1185,1188, 12,15,1188,1190, 16,15,1190,1191, 19,15,1191,1194, 10,15,1194,1196, 13,15,1196,1200, 9,15,1200,1201, 23,15,1221,1223, 13,15,1223,1224, 19,15,1224,1226, 23,15,1226,1227, 26,15,1227,1229, 12,15,1229,1230, 16,15,1230,1231, 19,15,1231,1233, 10,15,1233,1235, 13,15,1235,1237, 9,15,1237,1238, 23,15,1255,1257, 13,15,1257,1258, 19,15,1258,1259, 23,15,1259,1260, 26,15,1260,1263, 12,15,1263,1264, 16,15,1264,1265, 19,15,1265,1267, 10,15,1267,1268, 13,15,1268,1271, 9,15,1271,1272, 6,15,1309,1312, 7,11,1312,1316, 7,7,1316,1319, 8,5,1319,1322, 9,3,1322,1326, 55,15,1383,1385, 14,14,1387,1389, 20,14,1389,1391, 29,14,1391,1393, 40,14,1393,1395, 55,14,1395,1397, 55,13,1399,1401, 14,12,1403,1405, 20,12,1405,1407, 29,12,1407,1409, 40,12,1409,1411, 55,12,1411,1413, 55,11,1415,1417, 14,10,1419,1421, 20,10,1421,1424, 29,10,1424,1427, 40,10,1427,1431(0018) , 55,10,1431,1434, 55,9,1437,1440, 14,8,1444,1447, 20,8,1447,1450, 29,8,1450,1453, 40,8,1453,1457, 55,8,1457,1460, 55,7,1463,1466, 14,6,1470,1473, 20,6,1473,1476, 29,6,1476,1479, 40,6,1479,1483, 55,6,1483,1486, 55,5,1489,1492, 14,4,1495,1497, 20,4,1497,1499, 29,4,1499,1501, 40,4,1501,1503, 55,4,1503,1505, 55,3,1507,1509, 14,3,1511,1513, 20,3,1513,1515, 29,3,1515,1517, 40,3,1517,1519, 55,3,1519,1521, 55,3,1523,1525, 15,10,1558,1562, 15,6,1562,1568, 20,10,1568,1575, 20,6,1575,1581, 15,10,1581,0, 9999,9999,9999,9999};
(0019) const uint music_dataRect1[]={136,10,48,52, 136,6,52,55, 102,10,55,59, 102,6,59,62, 81,10,62,66, 81,6,66,69, 68,10,69,73, 68,6,73,76, 81,10,76,80, 81,6,80,93, 81,2,93,95, 41,15,158,288, 41,11,299,302, 41,15,311,317, 41,11,317,320, 46,15,329,443, 46,11,443,446, 46,15,455,461, 46,11,461,464, 51,15,473,604, 51,11,615,618, 51,15,627,633, 51,11,633,636, 46,15,645,759, 46,11,759,762, 48,15,789,794, 48,11,794,800, 54,15,800,807, 54,11,807,813, 48,15,813,820, 48,11,820,826, 43,15,826,833, 43,11,833,839, 43,7,839,846, 43,3,846,851, 41,15,852,859, 41,11,859,865, 41,7,865,872, 41,3,872,877, 43,15,878,885, 43,11,885,889, 43,7,889,894, 43,3,894,897, 48,15,898,903, 48,11,903,907, 48,7,907,912, 48,3,912,915, 54,15,916,921, 54,11,921,925, 48,15,925,930, 48,11,930,934, 54,15,934,939, 54,11,939,943, 48,15,943,948, 48,11,948,952, 61,15,952,957, 61,11,957,961, 48,15,961,966, 48,11,966,970, 54,15,970,975, 54,11,975,979, 48,15,979,984, 48,11,984,988, 43,15,988,993, 43,11,993,997, 43,7,997,1002, 43,3,1002,1005, 41,15,1006,1011, 41,11,1011,1015, 41,7,1015,1020, 41,3,1020,1023, 43,15,1024,1029, 43,11,1029,1033, 43,7,1033,1038, 43,3,1038,1041, 48,15,1042,1047, 48,11,1047,1051, 48,7,1051,1056, 48,3,1056,1059, 54,15,1060,1065, 54,11,1065,1069, 48,15,1069,1074, 48,11,1074,1078, 54,15,1078,1083, 54,11,1083,1087, 48,15,1087,1092, 48,11,1092,1096, 61,15,1096,1101, 61,11,1101,1105, 54,15,1105,1110, 54,11,1110,1116, 61,15,1116,1123, 61,11,1123,1129, 54,15,1129,1136, 54,11,1136,1142, 48,15,1142,1149, 48,11,1149,1155, 48,7,1155,1162, 48,3,1162,1167, 46,15,1168,1175, 46,11,1175,1181, 46,7,1181,1188, 46,3,1188,1193, 48,15,1194,1201, 48,11,1201,1205, 48,7,1205,1210, 48,3,1210,1213, 54,15,1214,1219, 54,11,1219,1223, 54,7,1223,1228, 54,3,1228,1231, 48,15,1232,1237, 48,11,1237,1241, 54,15,1241,1246, 54,11,1246,1250, 61,15,1250,1334, 61,11,1334,1338, 61,7,1338,1343, 61,3,1343,1346, 72,15,1349,1354, 72,11,1354,1358, 64,15,1358,1363, 64,11,1363,1367, 61,15,1367,1372, 61,11,1372,1376, 54,15,1376,1381, 43,15,1383,1385, 3,14,1387,1389, 9,14,1389,1391, 17,14,1391,1393, 29,14,1393,1395, 43,14,1395,1397, 43,13,1399,1401, 3,12,1403,1405, 9,12,1405,1407, 17,12,1407,1409, 29,12,1409,1411, 43,12,1411,1413, 43,11,1415,1417, 3,10,1419,1421, 9,10,1421,1424, 17,10,1424,1427, 29,10,1427,1431, 43,10,1431,1434, 43,9,1437,1440, 3,8,1444,1447, 9,8,1447,1450, 17,8,1450,1453, 29,8,1453,1457, 43,8,1457,1460, 43,7,1463,1466, 3,6,1470,1473, 9,6,1473,1476, 17,6,1476,1479, 29,6,1479,1483, 43,6,1483,1486, 43,5,1489,1492, 3,4,1495,1497, 9,4,1497,1499, 17,4,1499,1501, 29,4,1501,1503, 43,4,1503,1505, 43,3,1507,1509, 3,3,1511,1513, 9,3,1513,1515, 17,3,1515,1517, 29,3,1517,1519, 43,3,1519,1521, 43,3,1523,1525, 41,15,1558,0};
(0020) const uint music_dataTriangle[]={34,48,55, 26,55,62, 20,62,69, 17,69,76, 20,76,159, 15,159,170, 20,170,183, 15,183,196, 14,196,222, 10,222,248, 14,248,267, 15,267,285, 20,285,294, 15,294,303, 20,303,312, 15,312,321, 14,321,330, 15,330,339, 20,339,348, 15,348,357, 14,357,375, 10,375,393, 14,393,411, 15,411,429, 20,429,438, 15,438,447, 20,447,456, 15,456,465, 14,465,474, 15,474,486, 20,486,499, 15,499,512, 14,512,538, 10,538,564, 14,564,583, 15,583,601, 20,601,610, 15,610,619, 20,619,628, 15,628,637, 14,637,646, 15,646,655, 20,655,664, 15,664,673, 14,673,691, 10,691,709, 14,709,727, 15,727,745, 20,745,754, 15,754,763, 20,763,772, 15,772,781, 14,781,790, 41,790,815, 30,815,841, 41,841,867, 30,867,890, 41,890,908, 30,908,926, 41,926,944, 30,944,962, 41,962,980, 30,980,998, 41,998,1016, 30,1016,1034, 41,1034,1052, 30,1052,1070, 41,1070,1088, 30,1088,1106, 46,1106,1131, 34,1131,1157, 46,1157,1183, 34,1183,1206, 46,1206,1224, 34,1224,1242, 61,1242,1260, 46,1260,1278, 61,1278,1296, 46,1296,1314, 61,1314,1332, 46,1332,1350, 61,1350,1368, 46,1368,1381, 23,1381,1382, 46,1382,1383, 69,1383,1384, 92,1384,1385, 115,1385,1386, 137,1386,1387, 23,1387,1389, 46,1389,1390, 69,1390,1391, 92,1391,1392, 115,1392,1393, 137,1393,1394, 160,1394,1395, 17,1395,1396, 23,1396,1397, 29,1397,1398, 35,1398,1399, 40,1399,1400, 46,1400,1401, 52,1401,1402, 57,1402,1403, 63,1403,1404, 69,1404,1405, 75,1405,1406, 80,1406,1407, 86,1407,1408, 92,1408,1409, 126,1409,1411, 137,1411,1559, 15,1559,1570, 20,1570,1583, 15,1583,0};
(0021) const uint music_dataNoise[]={343,1381,1523, 343,1530,0};
(0022) 
(0023) 
(0024) 
(0025) 
(0026) 
(0027) //方波0//////////////////
(0028) uint i0=0;// 数组位置
(0029) uint Tone0 ;//半音长(相当于频率)
(0030) uint fcounter0;//音长计数
(0031) uchar volume0;//音量 
(0032) uchar swap0=0;//切换开关
(0033) 
(0034) //方波1//////////////////
(0035) uint i1=0;// 数组位置
(0036) uint Tone1 ;//半音长(相当于频率)
(0037) uint fcounter1;//音长计数
(0038) uchar volume1;//音量 
(0039) uchar swap1=0;//切换开关
(0040) 
(0041) //三角波//////////////////
(0042) uint i2=0; 
(0043) uint Tone2 ; 
(0044) uint fcounter2; 
(0045) uchar volume2=6*8;//三角波音量固定为6 
(0046) uchar swap2=0; 
(0047) 
(0048) //杂波//////////////////
(0049) uint i3=0; 
(0050) uint Tone3 ; 
(0051) uint fcounter3; 
(0052) uchar volume3=4*8;//杂波音量固定 
(0053) uchar swap3=0; 
(0054) 
(0055) uint sum_volume;//总音量 
(0056) uint T=0;//时间计数
(0057) 
(0058) 
(0059) void init_devices(void)
(0060) {
(0061)     
_init_devices:
    0906 E880      LDI	R24,0x80
    0907 BB81      OUT	0x11,R24
(0062)     DDRD=0b10000000;  
    0908 BB82      OUT	0x12,R24
(0063)     PORTD=0b10000000; 
(0064)     
(0065)     //#####定时器2/PD7(OC2)pwm控制音量,周期为32us(31.2KHz)######
    0909 E081      LDI	R24,1
    090A BD85      OUT	0x25,R24
(0066)     TCCR2=0X01;//内部CK/1脉冲
    090B B585      IN	R24,0x25
    090C 6480      ORI	R24,0x40
    090D BD85      OUT	0x25,R24
(0067)     SET_BIT(TCCR2,WGM20);    //快速PWM方式
    090E B585      IN	R24,0x25
    090F 6088      ORI	R24,0x8
    0910 BD85      OUT	0x25,R24
(0068)     SET_BIT(TCCR2,WGM21);
    0911 B585      IN	R24,0x25
    0912 6280      ORI	R24,0x20
    0913 BD85      OUT	0x25,R24
(0069)     SET_BIT(TCCR2,COM21); //减1匹配置位
    0914 EF8F      LDI	R24,0xFF
    0915 BD83      OUT	0x23,R24
(0070)     OCR2=255;
(0071)     //####################
(0072)     
(0073)     //#####定时器1,周期为0.025ms对音频采样######
    0916 B58E      IN	R24,0x2E
    0917 6082      ORI	R24,2
    0918 BD8E      OUT	0x2E,R24
(0074)     SET_BIT(TCCR1B,CS11);//8分频	
    0919 B58E      IN	R24,0x2E
    091A 6088      ORI	R24,0x8
    091B BD8E      OUT	0x2E,R24
(0075)     SET_BIT(TCCR1B,WGM12);//CTC方式,匹配清零后自动计数
    091C E189      LDI	R24,0x19
    091D E090      LDI	R25,0
    091E BD9B      OUT	0x2B,R25
    091F BD8A      OUT	0x2A,R24
(0076)     OCR1A=25;
    0920 2422      CLR	R2
    0921 2433      CLR	R3
    0922 BC3D      OUT	0x2D,R3
    0923 BC2C      OUT	0x2C,R2
(0077)     TCNT1=0;
    0924 B789      IN	R24,0x39
    0925 6180      ORI	R24,0x10
    0926 BF89      OUT	0x39,R24
(0078)     SET_BIT(TIMSK,OCIE1A);
(0079)     //####################
(0080)     
(0081)     //#####定时器0,周期为1/60s(16.67ms),对时间进行计数######
    0927 B783      IN	R24,0x33
    0928 6081      ORI	R24,1
    0929 BF83      OUT	0x33,R24
(0082)     SET_BIT(TCCR0,CS00);//1024分频
    092A B783      IN	R24,0x33
    092B 6084      ORI	R24,4
    092C BF83      OUT	0x33,R24
(0083)     SET_BIT(TCCR0,CS02);
    092D B783      IN	R24,0x33
    092E 6088      ORI	R24,0x8
    092F BF83      OUT	0x33,R24
(0084)     SET_BIT(TCCR0,WGM01);//CTC方式,匹配清零后自动计数
    0930 E885      LDI	R24,0x85
    0931 BF8C      OUT	0x3C,R24
(0085)     OCR0=133;//定时时间
    0932 BE22      OUT	0x32,R2
(0086)     TCNT0=0;
    0933 B789      IN	R24,0x39
    0934 6082      ORI	R24,2
    0935 BF89      OUT	0x39,R24
(0087)     SET_BIT(TIMSK,OCIE0);
(0088)     //####################
(0089)     
(0090)     
(0091)     
    0936 9478      BSET	7
    0937 9508      RET
(0092)     SET_BIT(SREG,7);  //全局中断
(0093) }
(0094) 
(0095) 
(0096) void main(void)  
(0097) {
_main:
    0938 DFCD      RCALL	_init_devices
(0098)     init_devices();
    0939 CFFF      RJMP	0x0939
    093A 9508      RET
(0099)     while(1)
(0100)     {
(0101)     }
(0102) }
(0103) 
(0104) void delay_1ms(void)//微秒级延时,单位1微秒
(0105) {
(0106)     uint i;
_delay_1ms:
  i                    --> R16
    093B 2700      CLR	R16
    093C 2711      CLR	R17
    093D C002      RJMP	0x0940
    093E 5F0F      SUBI	R16,0xFF
    093F 4F1F      SBCI	R17,0xFF
    0940 3706      CPI	R16,0x76
    0941 E0E4      LDI	R30,4
    0942 071E      CPC	R17,R30
    0943 F3D0      BCS	0x093E
    0944 9508      RET
_delay_ms:
  i                    --> R20
  num                  --> R22
    0945 940E0C19  CALL	push_gset2
    0947 01B8      MOVW	R22,R16
(0107)     for(i=0;i<(unsigned int)(8*143-2);i++);
(0108) }
(0109) 
(0110) 
(0111) void delay_ms(uint num)//毫秒级精确延时,单位1毫秒(8M)
(0112) {
(0113)     uint i;
    0948 2744      CLR	R20
    0949 2755      CLR	R21
    094A C003      RJMP	0x094E
    094B DFEF      RCALL	_delay_1ms
    094C 5F4F      SUBI	R20,0xFF
    094D 4F5F      SBCI	R21,0xFF
    094E 1746      CP	R20,R22
    094F 0757      CPC	R21,R23
    0950 F3D0      BCS	0x094B
    0951 940E0C10  CALL	pop_gset2
    0953 9508      RET
_T0_counter:
    0954 940E0C32  CALL	push_lset
(0114)     for(i=0;i<num;i++) delay_1ms();
(0115) }
(0116) 
(0117) 
(0118) //#####定时器0,周期为1/60s(16.67ms),对时间T进行计数
(0119) #pragma  interrupt_handler T0_counter:20
(0120) void T0_counter(void)  
(0121) {
    0956 9180006E  LDS	R24,T
    0958 9190006F  LDS	R25,T+1
    095A 9601      ADIW	R24,1
    095B 9390006F  STS	T+1,R25
    095D 9380006E  STS	T,R24
(0122)     T++;
(0123)     
    095F 91200060  LDS	R18,i0
    0961 91300061  LDS	R19,i0+1
    0963 E002      LDI	R16,2
    0964 E010      LDI	R17,0
    0965 940E0C00  CALL	empy16s
    0967 01F8      MOVW	R30,R16
    0968 E584      LDI	R24,0x54
    0969 E090      LDI	R25,0
    096A 0FE8      ADD	R30,R24
    096B 1FF9      ADC	R31,R25
    096C 9005      LPM	R0,Z+
    096D 9014      LPM	R1,0(Z)
    096E 01F0      MOVW	R30,R0
    096F 30EF      CPI	R30,0xF
    0970 E2E7      LDI	R30,0x27
    0971 07FE      CPC	R31,R30
    0972 F509      BNE	0x0994
(0124)     if(music_dataRect0[i0]==9999)//到尾部了，从头开始
(0125)     {
    0973 EE08      LDI	R16,0xE8
    0974 E013      LDI	R17,3
    0975 DFCF      RCALL	_delay_ms
(0126)         delay_ms(1000);
    0976 2422      CLR	R2
    0977 2433      CLR	R3
    0978 92300061  STS	i0+1,R3
    097A 92200060  STS	i0,R2
    097C 92300064  STS	i1+1,R3
    097E 92200063  STS	i1,R2
    0980 92300067  STS	i2+1,R3
    0982 92200066  STS	i2,R2
    0984 9230006B  STS	i3+1,R3
    0986 9220006A  STS	i3,R2
(0127)         i0=0;i1=0;i2=0;i3=0;
    0988 9220007F  STS	volume0,R2
    098A 9220007A  STS	volume1,R2
    098C 92200068  STS	volume2,R2
    098E 9220006C  STS	volume3,R2
(0128) 		volume0=0;volume1=0;volume2=0;volume3=0;
    0990 9230006F  STS	T+1,R3
    0992 9220006E  STS	T,R2
(0129)         T=0;
(0130)     }
(0131)     
(0132)     //方波0//////////////////
    0994 91200060  LDS	R18,i0
    0996 91300061  LDS	R19,i0+1
    0998 5021      SUBI	R18,1
    0999 4030      SBCI	R19,0
    099A E002      LDI	R16,2
    099B E010      LDI	R17,0
    099C 940E0C00  CALL	empy16s
    099E 01F8      MOVW	R30,R16
    099F E584      LDI	R24,0x54
    09A0 E090      LDI	R25,0
    09A1 0FE8      ADD	R30,R24
    09A2 1FF9      ADC	R31,R25
    09A3 9005      LPM	R0,Z+
    09A4 9014      LPM	R1,0(Z)
    09A5 01F0      MOVW	R30,R0
    09A6 9020006E  LDS	R2,T
    09A8 9030006F  LDS	R3,T+1
    09AA 162E      CP	R2,R30
    09AB 063F      CPC	R3,R31
    09AC F018      BCS	0x09B0
    09AD 2422      CLR	R2
    09AE 9220007F  STS	volume0,R2
(0133) 	if(T>=music_dataRect0[i0-1])volume0=0;//是否结束了
    09B0 91200060  LDS	R18,i0
    09B2 91300061  LDS	R19,i0+1
    09B4 5F2E      SUBI	R18,0xFE
    09B5 4F3F      SBCI	R19,0xFF
    09B6 E002      LDI	R16,2
    09B7 E010      LDI	R17,0
    09B8 940E0C00  CALL	empy16s
    09BA 01F8      MOVW	R30,R16
    09BB E584      LDI	R24,0x54
    09BC E090      LDI	R25,0
    09BD 0FE8      ADD	R30,R24
    09BE 1FF9      ADC	R31,R25
    09BF 9005      LPM	R0,Z+
    09C0 9014      LPM	R1,0(Z)
    09C1 01F0      MOVW	R30,R0
    09C2 9020006E  LDS	R2,T
    09C4 9030006F  LDS	R3,T+1
    09C6 162E      CP	R2,R30
    09C7 063F      CPC	R3,R31
    09C8 F408      BCC	0x09CA
    09C9 C03A      RJMP	0x0A04
(0134)     if(T>=music_dataRect0[i0+2])
(0135)     {
    09CA 91200060  LDS	R18,i0
    09CC 91300061  LDS	R19,i0+1
    09CE E002      LDI	R16,2
    09CF E010      LDI	R17,0
    09D0 940E0C00  CALL	empy16s
    09D2 01F8      MOVW	R30,R16
    09D3 E584      LDI	R24,0x54
    09D4 E090      LDI	R25,0
    09D5 0FE8      ADD	R30,R24
    09D6 1FF9      ADC	R31,R25
    09D7 9005      LPM	R0,Z+
    09D8 9014      LPM	R1,0(Z)
    09D9 01F0      MOVW	R30,R0
    09DA 93F00083  STS	Tone0+1,R31
    09DC 93E00082  STS	Tone0,R30
(0136)         Tone0=music_dataRect0[i0];
    09DE 91200060  LDS	R18,i0
    09E0 91300061  LDS	R19,i0+1
    09E2 5F2F      SUBI	R18,0xFF
    09E3 4F3F      SBCI	R19,0xFF
    09E4 E002      LDI	R16,2
    09E5 E010      LDI	R17,0
    09E6 940E0C00  CALL	empy16s
    09E8 01F8      MOVW	R30,R16
    09E9 E584      LDI	R24,0x54
    09EA E090      LDI	R25,0
    09EB 0FE8      ADD	R30,R24
    09EC 1FF9      ADC	R31,R25
    09ED 9125      LPM	R18,Z+
    09EE 9134      LPM	R19,0(Z)
    09EF E008      LDI	R16,0x8
    09F0 E010      LDI	R17,0
    09F1 940E0C00  CALL	empy16s
    09F3 9300007F  STS	volume0,R16
(0137)         volume0=music_dataRect0[i0+1]*8;
    09F5 2422      CLR	R2
    09F6 2433      CLR	R3
    09F7 92300081  STS	fcounter0+1,R3
    09F9 92200080  STS	fcounter0,R2
(0138)         fcounter0=0;
    09FB 91800060  LDS	R24,i0
    09FD 91900061  LDS	R25,i0+1
    09FF 9604      ADIW	R24,4
    0A00 93900061  STS	i0+1,R25
    0A02 93800060  STS	i0,R24
(0139)         i0+=4;
(0140)     }    
(0141)     
(0142)     //方波1//////////////////
    0A04 91200063  LDS	R18,i1
    0A06 91300064  LDS	R19,i1+1
    0A08 5021      SUBI	R18,1
    0A09 4030      SBCI	R19,0
    0A0A E002      LDI	R16,2
    0A0B E010      LDI	R17,0
    0A0C 940E0C00  CALL	empy16s
    0A0E 01F8      MOVW	R30,R16
    0A0F EA8C      LDI	R24,0xAC
    0A10 E099      LDI	R25,0x9
    0A11 0FE8      ADD	R30,R24
    0A12 1FF9      ADC	R31,R25
    0A13 9005      LPM	R0,Z+
    0A14 9014      LPM	R1,0(Z)
    0A15 01F0      MOVW	R30,R0
    0A16 9020006E  LDS	R2,T
    0A18 9030006F  LDS	R3,T+1
    0A1A 162E      CP	R2,R30
    0A1B 063F      CPC	R3,R31
    0A1C F018      BCS	0x0A20
    0A1D 2422      CLR	R2
    0A1E 9220007A  STS	volume1,R2
(0143) 	if(T>=music_dataRect1[i1-1])volume1=0;//是否|结束时间|了
    0A20 91200063  LDS	R18,i1
    0A22 91300064  LDS	R19,i1+1
    0A24 5F2E      SUBI	R18,0xFE
    0A25 4F3F      SBCI	R19,0xFF
    0A26 E002      LDI	R16,2
    0A27 E010      LDI	R17,0
    0A28 940E0C00  CALL	empy16s
    0A2A 01F8      MOVW	R30,R16
    0A2B EA8C      LDI	R24,0xAC
    0A2C E099      LDI	R25,0x9
    0A2D 0FE8      ADD	R30,R24
    0A2E 1FF9      ADC	R31,R25
    0A2F 9005      LPM	R0,Z+
    0A30 9014      LPM	R1,0(Z)
    0A31 01F0      MOVW	R30,R0
    0A32 9020006E  LDS	R2,T
    0A34 9030006F  LDS	R3,T+1
    0A36 162E      CP	R2,R30
    0A37 063F      CPC	R3,R31
    0A38 F408      BCC	0x0A3A
    0A39 C03A      RJMP	0x0A74
(0144)     if(T>=music_dataRect1[i1+2])
(0145)     {
    0A3A 91200063  LDS	R18,i1
    0A3C 91300064  LDS	R19,i1+1
    0A3E E002      LDI	R16,2
    0A3F E010      LDI	R17,0
    0A40 940E0C00  CALL	empy16s
    0A42 01F8      MOVW	R30,R16
    0A43 EA8C      LDI	R24,0xAC
    0A44 E099      LDI	R25,0x9
    0A45 0FE8      ADD	R30,R24
    0A46 1FF9      ADC	R31,R25
    0A47 9005      LPM	R0,Z+
    0A48 9014      LPM	R1,0(Z)
    0A49 01F0      MOVW	R30,R0
    0A4A 93F0007E  STS	Tone1+1,R31
    0A4C 93E0007D  STS	Tone1,R30
(0146)         Tone1=music_dataRect1[i1];
    0A4E 91200063  LDS	R18,i1
    0A50 91300064  LDS	R19,i1+1
    0A52 5F2F      SUBI	R18,0xFF
    0A53 4F3F      SBCI	R19,0xFF
    0A54 E002      LDI	R16,2
    0A55 E010      LDI	R17,0
    0A56 940E0C00  CALL	empy16s
    0A58 01F8      MOVW	R30,R16
    0A59 EA8C      LDI	R24,0xAC
    0A5A E099      LDI	R25,0x9
    0A5B 0FE8      ADD	R30,R24
    0A5C 1FF9      ADC	R31,R25
    0A5D 9125      LPM	R18,Z+
    0A5E 9134      LPM	R19,0(Z)
    0A5F E008      LDI	R16,0x8
    0A60 E010      LDI	R17,0
    0A61 940E0C00  CALL	empy16s
    0A63 9300007A  STS	volume1,R16
(0147)         volume1=music_dataRect1[i1+1]*8;
    0A65 2422      CLR	R2
    0A66 2433      CLR	R3
    0A67 9230007C  STS	fcounter1+1,R3
    0A69 9220007B  STS	fcounter1,R2
(0148)         fcounter1=0;
    0A6B 91800063  LDS	R24,i1
    0A6D 91900064  LDS	R25,i1+1
    0A6F 9604      ADIW	R24,4
    0A70 93900064  STS	i1+1,R25
    0A72 93800063  STS	i1,R24
(0149)         i1+=4;
(0150)     }   
(0151)     
(0152)     //三角波//////////////////
    0A74 91200066  LDS	R18,i2
    0A76 91300067  LDS	R19,i2+1
    0A78 5021      SUBI	R18,1
    0A79 4030      SBCI	R19,0
    0A7A E002      LDI	R16,2
    0A7B E010      LDI	R17,0
    0A7C 940E0C00  CALL	empy16s
    0A7E 01F8      MOVW	R30,R16
    0A7F EF8C      LDI	R24,0xFC
    0A80 E09E      LDI	R25,0xE
    0A81 0FE8      ADD	R30,R24
    0A82 1FF9      ADC	R31,R25
    0A83 9005      LPM	R0,Z+
    0A84 9014      LPM	R1,0(Z)
    0A85 01F0      MOVW	R30,R0
    0A86 9020006E  LDS	R2,T
    0A88 9030006F  LDS	R3,T+1
    0A8A 162E      CP	R2,R30
    0A8B 063F      CPC	R3,R31
    0A8C F018      BCS	0x0A90
    0A8D 2422      CLR	R2
    0A8E 92200068  STS	volume2,R2
(0153) 	if(T>=music_dataTriangle[i2-1])volume2=0;//是否|结束时间|了
    0A90 91200066  LDS	R18,i2
    0A92 91300067  LDS	R19,i2+1
    0A94 5F2F      SUBI	R18,0xFF
    0A95 4F3F      SBCI	R19,0xFF
    0A96 E002      LDI	R16,2
    0A97 E010      LDI	R17,0
    0A98 940E0C00  CALL	empy16s
    0A9A 01F8      MOVW	R30,R16
    0A9B EF8C      LDI	R24,0xFC
    0A9C E09E      LDI	R25,0xE
    0A9D 0FE8      ADD	R30,R24
    0A9E 1FF9      ADC	R31,R25
    0A9F 9005      LPM	R0,Z+
    0AA0 9014      LPM	R1,0(Z)
    0AA1 01F0      MOVW	R30,R0
    0AA2 9020006E  LDS	R2,T
    0AA4 9030006F  LDS	R3,T+1
    0AA6 162E      CP	R2,R30
    0AA7 063F      CPC	R3,R31
    0AA8 F130      BCS	0x0ACF
(0154)     if(T>=music_dataTriangle[i2+1])
(0155)     {
    0AA9 91200066  LDS	R18,i2
    0AAB 91300067  LDS	R19,i2+1
    0AAD E002      LDI	R16,2
    0AAE E010      LDI	R17,0
    0AAF 940E0C00  CALL	empy16s
    0AB1 01F8      MOVW	R30,R16
    0AB2 EF8C      LDI	R24,0xFC
    0AB3 E09E      LDI	R25,0xE
    0AB4 0FE8      ADD	R30,R24
    0AB5 1FF9      ADC	R31,R25
    0AB6 9005      LPM	R0,Z+
    0AB7 9014      LPM	R1,0(Z)
    0AB8 01F0      MOVW	R30,R0
    0AB9 93F00079  STS	Tone2+1,R31
    0ABB 93E00078  STS	Tone2,R30
(0156)         Tone2=music_dataTriangle[i2];
    0ABD E380      LDI	R24,0x30
    0ABE 93800068  STS	volume2,R24
(0157) 		volume2=6*8;
    0AC0 2422      CLR	R2
    0AC1 2433      CLR	R3
    0AC2 92300077  STS	fcounter2+1,R3
    0AC4 92200076  STS	fcounter2,R2
(0158)         fcounter2=0;
    0AC6 91800066  LDS	R24,i2
    0AC8 91900067  LDS	R25,i2+1
    0ACA 9603      ADIW	R24,3
    0ACB 93900067  STS	i2+1,R25
    0ACD 93800066  STS	i2,R24
(0159)         i2+=3;
(0160)     }  
(0161)     
(0162)     //杂波
    0ACF 9120006A  LDS	R18,i3
    0AD1 9130006B  LDS	R19,i3+1
    0AD3 5021      SUBI	R18,1
    0AD4 4030      SBCI	R19,0
    0AD5 E002      LDI	R16,2
    0AD6 E010      LDI	R17,0
    0AD7 940E0C00  CALL	empy16s
    0AD9 01F8      MOVW	R30,R16
    0ADA EA8E      LDI	R24,0xAE
    0ADB E191      LDI	R25,0x11
    0ADC 0FE8      ADD	R30,R24
    0ADD 1FF9      ADC	R31,R25
    0ADE 9005      LPM	R0,Z+
    0ADF 9014      LPM	R1,0(Z)
    0AE0 01F0      MOVW	R30,R0
    0AE1 9020006E  LDS	R2,T
    0AE3 9030006F  LDS	R3,T+1
    0AE5 162E      CP	R2,R30
    0AE6 063F      CPC	R3,R31
    0AE7 F018      BCS	0x0AEB
    0AE8 2422      CLR	R2
    0AE9 9220006C  STS	volume3,R2
(0163) 	if(T>=music_dataNoise[i3-1])volume3=0;//是否|结束时间|了
    0AEB 9120006A  LDS	R18,i3
    0AED 9130006B  LDS	R19,i3+1
    0AEF 5F2F      SUBI	R18,0xFF
    0AF0 4F3F      SBCI	R19,0xFF
    0AF1 E002      LDI	R16,2
    0AF2 E010      LDI	R17,0
    0AF3 940E0C00  CALL	empy16s
    0AF5 01F8      MOVW	R30,R16
    0AF6 EA8E      LDI	R24,0xAE
    0AF7 E191      LDI	R25,0x11
    0AF8 0FE8      ADD	R30,R24
    0AF9 1FF9      ADC	R31,R25
    0AFA 9005      LPM	R0,Z+
    0AFB 9014      LPM	R1,0(Z)
    0AFC 01F0      MOVW	R30,R0
    0AFD 9020006E  LDS	R2,T
    0AFF 9030006F  LDS	R3,T+1
    0B01 162E      CP	R2,R30
    0B02 063F      CPC	R3,R31
    0B03 F130      BCS	0x0B2A
(0164)     if(T>=music_dataNoise[i3+1])
(0165)     {
    0B04 9120006A  LDS	R18,i3
    0B06 9130006B  LDS	R19,i3+1
    0B08 E002      LDI	R16,2
    0B09 E010      LDI	R17,0
    0B0A 940E0C00  CALL	empy16s
    0B0C 01F8      MOVW	R30,R16
    0B0D EA8E      LDI	R24,0xAE
    0B0E E191      LDI	R25,0x11
    0B0F 0FE8      ADD	R30,R24
    0B10 1FF9      ADC	R31,R25
    0B11 9005      LPM	R0,Z+
    0B12 9014      LPM	R1,0(Z)
    0B13 01F0      MOVW	R30,R0
    0B14 93F00075  STS	Tone3+1,R31
    0B16 93E00074  STS	Tone3,R30
(0166)         Tone3=music_dataNoise[i3];
    0B18 E380      LDI	R24,0x30
    0B19 9380006C  STS	volume3,R24
(0167) 		volume3=6*8;
    0B1B 2422      CLR	R2
    0B1C 2433      CLR	R3
    0B1D 92300073  STS	fcounter3+1,R3
    0B1F 92200072  STS	fcounter3,R2
(0168)         fcounter3=0;
    0B21 9180006A  LDS	R24,i3
    0B23 9190006B  LDS	R25,i3+1
    0B25 9603      ADIW	R24,3
    0B26 9390006B  STS	i3+1,R25
    0B28 9380006A  STS	i3,R24
(0169)         i3+=3;
    0B2A 940E0C49  CALL	pop_lset
    0B2C 9518      RETI
_T1_counter:
    0B2D 922A      ST	R2,-Y
    0B2E 923A      ST	R3,-Y
    0B2F 924A      ST	R4,-Y
    0B30 925A      ST	R5,-Y
    0B31 938A      ST	R24,-Y
    0B32 939A      ST	R25,-Y
    0B33 B62F      IN	R2,0x3F
    0B34 922A      ST	R2,-Y
(0170)     }  	  
(0171)     
(0172) }
(0173) 
(0174) 
(0175) //#####定时器1,周期为0.025ms对音频采样
(0176) #pragma  interrupt_handler T1_counter:7
(0177) void T1_counter(void)  
(0178) {
(0179)     
(0180)     //方波0//////////////////
    0B35 91800080  LDS	R24,fcounter0
    0B37 91900081  LDS	R25,fcounter0+1
    0B39 9601      ADIW	R24,1
    0B3A 93900081  STS	fcounter0+1,R25
    0B3C 93800080  STS	fcounter0,R24
(0181)     fcounter0++;//音长计数
    0B3E 90200082  LDS	R2,Tone0
    0B40 90300083  LDS	R3,Tone0+1
    0B42 1582      CP	R24,R2
    0B43 0593      CPC	R25,R3
    0B44 F459      BNE	0x0B50
(0182)     if(fcounter0==Tone0)
(0183)     {
    0B45 90200062  LDS	R2,swap0
    0B47 9420      COM	R2
    0B48 92200062  STS	swap0,R2
(0184)         swap0=(~swap0);
    0B4A 2422      CLR	R2
    0B4B 2433      CLR	R3
    0B4C 92300081  STS	fcounter0+1,R3
    0B4E 92200080  STS	fcounter0,R2
(0185)         fcounter0=0;
(0186)     }
(0187)     
(0188)     //方波1//////////////////
    0B50 9180007B  LDS	R24,fcounter1
    0B52 9190007C  LDS	R25,fcounter1+1
    0B54 9601      ADIW	R24,1
    0B55 9390007C  STS	fcounter1+1,R25
    0B57 9380007B  STS	fcounter1,R24
(0189)     fcounter1++;//音长计数
    0B59 9020007D  LDS	R2,Tone1
    0B5B 9030007E  LDS	R3,Tone1+1
    0B5D 1582      CP	R24,R2
    0B5E 0593      CPC	R25,R3
    0B5F F459      BNE	0x0B6B
(0190)     if(fcounter1==Tone1)
(0191)     {
    0B60 90200065  LDS	R2,swap1
    0B62 9420      COM	R2
    0B63 92200065  STS	swap1,R2
(0192)         swap1=(~swap1);
    0B65 2422      CLR	R2
    0B66 2433      CLR	R3
    0B67 9230007C  STS	fcounter1+1,R3
    0B69 9220007B  STS	fcounter1,R2
(0193)         fcounter1=0;
(0194)     }
(0195)     
(0196)     //三角波//////////////////
    0B6B 91800076  LDS	R24,fcounter2
    0B6D 91900077  LDS	R25,fcounter2+1
    0B6F 9601      ADIW	R24,1
    0B70 93900077  STS	fcounter2+1,R25
    0B72 93800076  STS	fcounter2,R24
(0197)     fcounter2++;//音长计数
    0B74 90200078  LDS	R2,Tone2
    0B76 90300079  LDS	R3,Tone2+1
    0B78 1582      CP	R24,R2
    0B79 0593      CPC	R25,R3
    0B7A F459      BNE	0x0B86
(0198)     if(fcounter2==Tone2)
(0199)     {
    0B7B 90200069  LDS	R2,swap2
    0B7D 9420      COM	R2
    0B7E 92200069  STS	swap2,R2
(0200)         swap2=(~swap2);
    0B80 2422      CLR	R2
    0B81 2433      CLR	R3
    0B82 92300077  STS	fcounter2+1,R3
    0B84 92200076  STS	fcounter2,R2
(0201)         fcounter2=0;
(0202)     }
(0203)     
(0204)     //杂波
    0B86 91800072  LDS	R24,fcounter3
    0B88 91900073  LDS	R25,fcounter3+1
    0B8A 9601      ADIW	R24,1
    0B8B 93900073  STS	fcounter3+1,R25
    0B8D 93800072  STS	fcounter3,R24
(0205)     fcounter3++;//音长计数
    0B8F 90200074  LDS	R2,Tone3
    0B91 90300075  LDS	R3,Tone3+1
    0B93 1582      CP	R24,R2
    0B94 0593      CPC	R25,R3
    0B95 F459      BNE	0x0BA1
(0206)     if(fcounter3==Tone3)
(0207)     {
    0B96 9020006D  LDS	R2,swap3
    0B98 9420      COM	R2
    0B99 9220006D  STS	swap3,R2
(0208)         swap3=(~swap3);
    0B9B 2422      CLR	R2
    0B9C 2433      CLR	R3
    0B9D 92300073  STS	fcounter3+1,R3
    0B9F 92200072  STS	fcounter3,R2
(0209)         fcounter3=0;
(0210)     }
(0211)     
    0BA1 2422      CLR	R2
    0BA2 2433      CLR	R3
    0BA3 92300071  STS	sum_volume+1,R3
    0BA5 92200070  STS	sum_volume,R2
(0212)     sum_volume=0;
    0BA7 90200062  LDS	R2,swap0
    0BA9 2022      TST	R2
    0BAA F039      BEQ	0x0BB2
    0BAB 9020007F  LDS	R2,volume0
    0BAD 2433      CLR	R3
    0BAE 92300071  STS	sum_volume+1,R3
    0BB0 92200070  STS	sum_volume,R2
(0213)     if(swap0) sum_volume=volume0;//音量相加
    0BB2 90200065  LDS	R2,swap1
    0BB4 2022      TST	R2
    0BB5 F069      BEQ	0x0BC3
    0BB6 9020007A  LDS	R2,volume1
    0BB8 2433      CLR	R3
    0BB9 90400070  LDS	R4,sum_volume
    0BBB 90500071  LDS	R5,sum_volume+1
    0BBD 0C42      ADD	R4,R2
    0BBE 1C53      ADC	R5,R3
    0BBF 92500071  STS	sum_volume+1,R5
    0BC1 92400070  STS	sum_volume,R4
(0214)     if(swap1) sum_volume+=volume1;//音量相加
    0BC3 90200069  LDS	R2,swap2
    0BC5 2022      TST	R2
    0BC6 F069      BEQ	0x0BD4
    0BC7 90200068  LDS	R2,volume2
    0BC9 2433      CLR	R3
    0BCA 90400070  LDS	R4,sum_volume
    0BCC 90500071  LDS	R5,sum_volume+1
    0BCE 0C42      ADD	R4,R2
    0BCF 1C53      ADC	R5,R3
    0BD0 92500071  STS	sum_volume+1,R5
    0BD2 92400070  STS	sum_volume,R4
(0215)     if(swap2) sum_volume+=volume2;//音量相加	
    0BD4 9020006D  LDS	R2,swap3
    0BD6 2022      TST	R2
    0BD7 F069      BEQ	0x0BE5
    0BD8 9020006C  LDS	R2,volume3
    0BDA 2433      CLR	R3
    0BDB 90400070  LDS	R4,sum_volume
    0BDD 90500071  LDS	R5,sum_volume+1
    0BDF 0C42      ADD	R4,R2
    0BE0 1C53      ADC	R5,R3
    0BE1 92500071  STS	sum_volume+1,R5
    0BE3 92400070  STS	sum_volume,R4
(0216)     if(swap3) sum_volume+=volume3;//音量相加		
    0BE5 EF8F      LDI	R24,0xFF
    0BE6 E090      LDI	R25,0
    0BE7 90200070  LDS	R2,sum_volume
    0BE9 90300071  LDS	R3,sum_volume+1
    0BEB 1582      CP	R24,R2
    0BEC 0593      CPC	R25,R3
    0BED F420      BCC	0x0BF2
    0BEE 93900071  STS	sum_volume+1,R25
    0BF0 93800070  STS	sum_volume,R24
(0217)     if(sum_volume>255)sum_volume=255;//限制最大音量
(0218)     
FILE: <library>
    0BF2 90200070  LDS	R2,sum_volume
    0BF4 90300071  LDS	R3,sum_volume+1
    0BF6 BC23      OUT	0x23,R2
    0BF7 9029      LD	R2,Y+
    0BF8 BE2F      OUT	0x3F,R2
    0BF9 9199      LD	R25,Y+
    0BFA 9189      LD	R24,Y+
    0BFB 9059      LD	R5,Y+
    0BFC 9049      LD	R4,Y+
    0BFD 9039      LD	R3,Y+
    0BFE 9029      LD	R2,Y+
    0BFF 9518      RETI
empy16s:
    0C00 920A      ST	R0,-Y
    0C01 921A      ST	R1,-Y
    0C02 938A      ST	R24,-Y
    0C03 939A      ST	R25,-Y
    0C04 9F02      MUL	R16,R18
    0C05 01C0      MOVW	R24,R0
    0C06 9F12      MUL	R17,R18
    0C07 0D90      ADD	R25,R0
    0C08 9F03      MUL	R16,R19
    0C09 0D90      ADD	R25,R0
    0C0A 018C      MOVW	R16,R24
    0C0B 9199      LD	R25,Y+
    0C0C 9189      LD	R24,Y+
    0C0D 9019      LD	R1,Y+
    0C0E 9009      LD	R0,Y+
    0C0F 9508      RET
pop_gset2:
    0C10 E0E2      LDI	R30,2
    0C11 940C0C1F  JMP	pop
push_gset5:
    0C13 92FA      ST	R15,-Y
    0C14 92EA      ST	R14,-Y
push_gset4:
    0C15 92DA      ST	R13,-Y
    0C16 92CA      ST	R12,-Y
push_gset3:
    0C17 92BA      ST	R11,-Y
    0C18 92AA      ST	R10,-Y
push_gset2:
    0C19 937A      ST	R23,-Y
    0C1A 936A      ST	R22,-Y
push_gset1:
    0C1B 935A      ST	R21,-Y
    0C1C 934A      ST	R20,-Y
    0C1D 9508      RET
pop_gset1:
    0C1E E0E1      LDI	R30,1
pop:
    0C1F 9149      LD	R20,Y+
    0C20 9159      LD	R21,Y+
    0C21 FDE0      SBRC	R30,0
    0C22 9508      RET
    0C23 9169      LD	R22,Y+
    0C24 9179      LD	R23,Y+
    0C25 FDE1      SBRC	R30,1
    0C26 9508      RET
    0C27 90A9      LD	R10,Y+
    0C28 90B9      LD	R11,Y+
    0C29 FDE2      SBRC	R30,2
    0C2A 9508      RET
    0C2B 90C9      LD	R12,Y+
    0C2C 90D9      LD	R13,Y+
    0C2D FDE3      SBRC	R30,3
    0C2E 9508      RET
    0C2F 90E9      LD	R14,Y+
    0C30 90F9      LD	R15,Y+
    0C31 9508      RET
push_lset:
    0C32 93FA      ST	R31,-Y
    0C33 93EA      ST	R30,-Y
    0C34 93BA      ST	R27,-Y
    0C35 93AA      ST	R26,-Y
    0C36 939A      ST	R25,-Y
    0C37 938A      ST	R24,-Y
    0C38 933A      ST	R19,-Y
    0C39 932A      ST	R18,-Y
    0C3A 931A      ST	R17,-Y
    0C3B 930A      ST	R16,-Y
    0C3C 929A      ST	R9,-Y
    0C3D 928A      ST	R8,-Y
    0C3E 927A      ST	R7,-Y
    0C3F 926A      ST	R6,-Y
    0C40 925A      ST	R5,-Y
    0C41 924A      ST	R4,-Y
    0C42 923A      ST	R3,-Y
    0C43 922A      ST	R2,-Y
    0C44 921A      ST	R1,-Y
    0C45 920A      ST	R0,-Y
    0C46 B60F      IN	R0,0x3F
    0C47 920A      ST	R0,-Y
    0C48 9508      RET
pop_lset:
    0C49 9009      LD	R0,Y+
    0C4A BE0F      OUT	0x3F,R0
    0C4B 9009      LD	R0,Y+
    0C4C 9019      LD	R1,Y+
    0C4D 9029      LD	R2,Y+
    0C4E 9039      LD	R3,Y+
    0C4F 9049      LD	R4,Y+
    0C50 9059      LD	R5,Y+
    0C51 9069      LD	R6,Y+
    0C52 9079      LD	R7,Y+
    0C53 9089      LD	R8,Y+
    0C54 9099      LD	R9,Y+
    0C55 9109      LD	R16,Y+
    0C56 9119      LD	R17,Y+
    0C57 9129      LD	R18,Y+
    0C58 9139      LD	R19,Y+
    0C59 9189      LD	R24,Y+
    0C5A 9199      LD	R25,Y+
    0C5B 91A9      LD	R26,Y+
    0C5C 91B9      LD	R27,Y+
    0C5D 91E9      LD	R30,Y+
    0C5E 91F9      LD	R31,Y+
    0C5F 9508      RET
