//NESÒôÀÖ²¥·ÅÆ÷   AVRNES Music Player1.2

//          BYÕÅğ©
//http://www.lotusinvention.cn/ART/nes/NESMusic.htm
//  ICC-AVR Target : ATMEGA16  Crystal: 8M,
#include <iom16v.h>
#include <macros.h>

#define uchar unsigned char
#define schar signed char
#define uint unsigned int  
#define sint signed int  
#define SET_BIT(io ,bit) (   io |=  (1<<bit) )   
#define CLR_BIT(io ,bit) (   io &= ~(1<<bit) )   
#define GET_BIT(pin,bit) ( pin &    (1<<bit) ) 

const uint music_dataRect0[]={61,3,0,2, 68,14,3,6, 68,10,6,8, 68,3,8,10, 77,14,19,22, 77,10,22,24, 77,3,24,26, 68,14,27,30, 68,10,30,32, 68,3,32,34, 68,14,43,46, 68,10,46,48, 68,3,48,50, 51,14,51,54, 51,10,54,56, 51,3,56,58, 145,15,73,76, 145,4,76,80, 72,10,80,85, 72,10,94,98, 64,10,101,105, 61,10,115,119, 57,10,129,133, 14,6,143,147, 14,3,150,154, 14,6,157,161, 14,3,164,168, 43,11,185,189, 43,6,189,190, 43,9,199,202, 43,7,204,208, 43,5,209,212, 43,3,214,217, 43,1,219,223, 41,10,227,231, 41,5,231,232, 38,10,234,238, 38,5,238,239, 36,10,241,245, 36,5,245,246, 32,10,248,252, 32,5,252,253, 36,10,255,259, 36,5,259,260, 32,10,262,266, 32,5,266,267, 36,10,269,273, 36,5,273,274, 43,10,276,280, 43,5,280,281, 54,10,283,287, 54,5,287,288, 72,10,290,294, 72,5,294,295, 43,10,297,301, 43,5,301,302, 41,10,304,308, 41,5,308,309, 38,10,311,315, 38,5,315,317, 36,10,318,322, 36,5,322,324, 8,7,332,336, 7,7,339,343, 7,7,346,351, 9,7,353,358, 48,11,409,410, 51,7,446,450, 46,7,456,459, 34,7,466,469, 51,7,476,479, 46,7,486,489, 34,7,496,499, 51,7,506,509, 46,7,516,519, 34,7,526,530, 51,7,536,539, 46,7,546,549, 34,7,556,559, 51,7,566,569, 46,7,576,579, 34,7,586,589, 51,7,596,598, 51,7,601,602, 46,7,606,610, 38,7,616,619, 26,7,626,629, 46,7,636,639, 38,7,646,649, 26,7,656,659, 46,7,666,670, 38,7,676,679, 26,7,686,690, 46,7,696,700, 38,7,706,710, 30,7,716,720, 27,7,726,730, 17,6,736,740, 17,3,741,745, 9,6,746,750, 9,3,751,755, 17,6,756,760, 17,3,761,765, 51,7,766,770, 46,7,776,779, 34,7,786,790, 51,7,796,799, 46,7,806,810, 34,7,816,819, 51,7,826,829, 46,7,836,839, 34,7,846,850, 51,7,856,859, 46,7,866,870, 34,7,876,879, 51,7,886,890, 46,7,896,899, 34,5,908,909, 51,7,916,918, 51,7,921,923, 46,7,926,930, 41,6,936,939, 38,6,946,950, 30,6,956,959, 26,6,966,970, 30,6,976,979, 26,6,986,989, 20,6,996,999, 23,6,1006,1010, 17,7,1016,1020, 19,7,1026,1030, 20,7,1036,1043, 23,7,1046,1050, 41,1,1086,1087, 41,5,1087,1088, 41,7,1088,1090, 41,2,1090,1095, 41,3,1095,1100, 41,4,1100,1105, 41,5,1105,1110, 41,6,1110,1114, 38,1,1116,1117, 38,5,1117,1118, 38,7,1118,1119, 34,1,1121,1122, 34,5,1122,1123, 34,7,1123,1125, 23,1,1126,1127, 23,5,1127,1128, 23,7,1128,1130, 23,2,1130,1135, 23,3,1135,1140, 23,4,1140,1144, 26,1,1146,1147, 26,5,1147,1148, 26,7,1148,1150, 26,2,1150,1155, 26,3,1155,1160, 26,4,1160,1164, 27,1,1166,1167, 27,5,1167,1168, 27,7,1168,1170, 27,2,1170,1175, 27,3,1175,1180, 27,4,1180,1184, 30,1,1186,1187, 30,5,1187,1188, 30,7,1188,1190, 30,2,1190,1195, 30,3,1195,1199, 27,1,1201,1202, 27,5,1202,1203, 27,7,1203,1205, 34,1,1206,1207, 34,5,1207,1208, 34,7,1208,1210, 34,2,1210,1215, 34,3,1215,1220, 34,4,1220,1224, 41,1,1226,1227, 41,5,1227,1228, 41,7,1228,1230, 41,2,1230,1232, 5,6,1232,1234, 41,2,1234,1235, 41,3,1235,1240, 41,4,1240,1244, 38,1,1246,1247, 38,5,1247,1248, 38,7,1248,1250, 38,2,1250,1255, 38,3,1255,1260, 38,4,1260,1265, 38,5,1265,1270, 38,6,1270,1274, 30,1,1276,1277, 30,5,1277,1278, 30,7,1278,1279, 26,1,1281,1282, 26,5,1282,1283, 26,7,1283,1284, 17,1,1286,1287, 17,5,1287,1288, 17,7,1288,1290, 17,2,1290,1295, 17,3,1295,1300, 17,4,1300,1304, 19,1,1306,1307, 19,5,1307,1308, 19,7,1308,1310, 19,2,1310,1315, 19,3,1315,1319, 20,1,1321,1322, 20,5,1322,1323, 20,7,1323,1324, 23,1,1326,1327, 23,5,1327,1328, 23,7,1328,1330, 23,2,1330,1335, 23,3,1335,1340, 23,4,1340,1345, 23,5,1345,1350, 23,6,1350,1355, 23,7,1355,1364, 9999,9999,9999,9999};
const uint music_dataRect1[]={273,15,3,7, 273,4,7,12, 273,15,19,23, 273,4,23,27, 136,12,27,33, 183,13,35,41, 273,14,43,49, 243,15,51,55, 243,4,55,60, 326,15,67,71, 326,4,71,73, 289,15,73,76, 289,4,76,80, 145,15,80,83, 145,4,83,88, 145,15,94,97, 145,4,97,101, 162,15,101,104, 162,4,104,108, 172,15,115,118, 172,4,118,122, 193,15,129,132, 193,4,132,136, 12,7,143,147, 12,3,150,154, 9,7,157,161, 9,3,164,168, 289,15,171,174, 289,4,174,178, 289,15,178,181, 289,4,181,185, 217,15,185,189, 217,11,189,194, 217,7,194,199, 108,10,199,203, 289,12,206,210, 289,8,210,215, 289,4,215,220, 289,12,220,224, 289,8,224,229, 289,4,229,234, 108,11,234,238, 217,15,241,245, 217,11,245,250, 217,7,250,255, 108,10,255,259, 289,12,262,266, 289,8,266,271, 289,4,271,276, 289,12,276,280, 289,8,280,285, 289,4,285,290, 108,11,290,294, 217,15,297,301, 217,11,301,306, 217,7,306,311, 108,10,311,314, 22,11,314,315, 22,5,315,316, 19,11,316,317, 19,5,317,318, 16,11,318,319, 16,5,319,320, 13,11,320,321, 13,5,321,322, 9,11,322,323, 9,5,323,324, 6,11,324,325, 6,5,325,326, 289,5,326,328, 289,1,328,332, 289,12,332,336, 289,8,336,341, 289,4,341,346, 108,11,346,351, 217,15,353,357, 217,11,357,362, 217,7,362,367, 108,10,367,372, 289,12,374,378, 289,8,378,383, 289,4,383,388, 289,12,388,392, 289,8,392,393, 13,15,393,395, 10,15,395,397, 8,15,397,399, 6,15,399,401, 289,1,401,402, 108,11,402,407, 193,15,409,410, 205,14,446,450, 205,10,450,454, 205,3,454,456, 81,7,456,461, 81,7,466,471, 81,7,476,481, 81,7,486,491, 81,7,496,501, 81,7,506,511, 81,7,516,521, 205,14,526,530, 205,10,530,534, 205,3,534,536, 81,7,536,541, 81,7,546,551, 81,7,556,561, 81,7,566,571, 81,7,576,581, 81,7,586,591, 81,7,596,601, 183,14,606,610, 183,10,610,614, 183,3,614,616, 77,7,616,621, 77,7,626,631, 77,7,636,641, 77,7,646,651, 77,7,656,660, 77,7,666,671, 77,7,676,681, 273,13,686,690, 273,9,690,694, 273,2,694,696, 77,8,696,701, 77,8,706,711, 77,8,716,721, 77,8,726,731, 77,8,736,741, 77,8,746,751, 77,8,756,761, 205,14,766,770, 205,10,770,774, 205,3,774,776, 81,7,776,781, 81,7,786,787, 77,14,787,788, 81,4,788,791, 19,9,791,792, 18,5,792,793, 17,5,793,794, 81,7,796,801, 81,7,806,811, 81,11,811,813, 86,10,813,814, 57,7,814,815, 54,6,815,816, 51,5,816,817, 46,4,817,818, 81,5,818,821, 81,7,826,831, 81,7,836,841, 205,14,846,850, 205,10,850,854, 205,3,854,856, 81,7,856,861, 81,7,866,871, 81,7,876,881, 81,7,886,891, 81,7,896,899, 81,5,908,911, 81,7,916,921, 183,14,926,930, 183,10,930,934, 183,3,934,936, 77,7,936,940, 77,7,946,951, 77,7,956,961, 77,7,966,971, 77,7,976,981, 77,7,986,991, 77,14,996,997, 81,4,997,1000, 19,9,1000,1001, 18,5,1001,1002, 17,5,1002,1003, 273,13,1006,1010, 273,9,1010,1014, 273,2,1014,1016, 68,8,1016,1017, 81,11,1017,1019, 86,10,1019,1020, 57,7,1020,1021, 54,6,1021,1022, 51,5,1022,1023, 46,4,1023,1024, 61,8,1026,1030, 57,8,1036,1041, 18,6,1041,1042, 16,9,1042,1043, 15,12,1043,1044, 13,9,1044,1045, 12,4,1045,1046, 54,8,1046,1050, 30,4,1065,1067, 28,4,1067,1071, 29,5,1071,1072, 28,5,1072,1075, 26,5,1075,1076, 26,5,1076,1078, 25,5,1078,1079, 26,6,1079,1080, 25,6,1080,1082, 24,6,1082,1083, 23,6,1083,1084, 24,6,1084,1086, 23,6,1086,1087, 24,7,1087,1088, 22,7,1088,1090, 21,7,1090,1091, 20,7,1091,1092, 21,7,1092,1094, 20,7,1094,1095, 21,8,1095,1096, 81,7,1096,1101, 81,7,1106,1111, 81,7,1116,1121, 81,7,1126,1131, 81,7,1136,1141, 81,7,1146,1151, 81,7,1156,1161, 205,14,1166,1170, 205,10,1170,1174, 205,3,1174,1176, 81,7,1176,1181, 81,7,1186,1187, 31,5,1187,1188, 30,4,1188,1190, 28,4,1190,1194, 29,5,1194,1195, 28,5,1195,1198, 26,5,1198,1199, 26,5,1199,1201, 25,5,1201,1202, 26,6,1202,1203, 25,6,1203,1205, 24,6,1205,1206, 23,6,1206,1207, 24,6,1207,1209, 68,15,1209,1210, 97,15,1210,1211, 129,15,1211,1212, 43,6,1212,1213, 41,6,1213,1214, 36,6,1214,1216, 81,7,1216,1221, 81,7,1226,1228, 8,15,1228,1229, 8,4,1229,1230, 8,15,1230,1231, 8,4,1231,1232, 14,4,1232,1234, 81,7,1236,1241, 183,14,1246,1250, 183,10,1250,1254, 183,3,1254,1256, 77,7,1256,1261, 77,7,1266,1271, 77,7,1276,1281, 77,7,1286,1291, 77,7,1296,1301, 77,7,1306,1311, 77,7,1316,1321, 273,14,1326,1330, 273,10,1330,1334, 273,3,1334,1336, 77,7,1336,1341, 77,7,1346,1351, 77,7,1356,1361, 77,7,1366,1371};
const uint music_dataTriangle[]={46,3,19, 51,19,27, 46,27,51, 34,51,67, 68,67,74, 11,185,192, 14,192,199, 7,199,206, 14,206,213, 11,213,220, 14,220,227, 7,227,234, 14,234,241, 11,241,248, 14,248,255, 7,255,262, 14,262,269, 11,269,276, 14,276,283, 7,283,290, 14,290,297, 11,297,304, 14,304,311, 7,311,318, 14,318,325, 11,325,332, 14,332,339, 7,339,346, 14,346,353, 11,353,360, 14,360,367, 7,367,374, 14,374,381, 11,381,388, 14,388,395, 7,395,402, 14,402,409, 10,409,410, 34,456,616, 30,616,696, 34,696,936, 30,936,1016, 27,1016,1026, 26,1026,1036, 24,1036,1046, 23,1046,1089, 34,1096,1256, 30,1256,1336, 34,1336,0};
const uint music_dataNoise[]={92,3,19, 69,19,27, 92,27,43, 69,43,51, 92,51,67, 69,67,74, 69,185,192, 46,192,199, 23,199,206, 69,206,220, 46,220,227, 23,227,234, 69,234,248, 46,248,255, 23,255,262, 69,262,276, 46,276,283, 23,283,290, 69,290,304, 46,304,311, 23,311,318, 69,318,332, 46,332,339, 23,339,346, 69,346,360, 46,360,367, 23,367,374, 69,374,388, 46,388,395, 23,395,402, 69,402,410, 92,446,456, 69,456,466, 92,466,476, 69,476,486, 92,486,496, 69,496,506, 92,506,511, 69,511,516, 92,516,521, 69,521,526, 92,526,536, 69,536,546, 92,546,556, 69,556,566, 92,566,576, 69,576,586, 92,586,591, 69,591,596, 92,596,601, 69,601,606, 92,606,616, 69,616,626, 92,626,636, 69,636,646, 92,646,656, 69,656,666, 92,666,671, 69,671,676, 92,676,681, 69,681,686, 92,686,696, 69,696,706, 92,706,716, 69,716,722, 321,722,724, 298,724,725, 321,725,727, 298,727,728, 321,728,730, 298,730,731, 321,731,733, 298,733,734, 321,734,736, 298,736,737, 321,737,739, 298,739,740, 321,740,742, 298,742,743, 321,743,745, 298,745,746, 321,746,748, 298,748,749, 321,749,751, 298,751,752, 321,752,754, 298,754,755, 321,755,757, 298,757,758, 321,758,760, 298,760,761, 321,761,763, 298,763,764, 69,764,766, 92,766,776, 69,776,786, 92,786,796, 69,796,806, 92,806,816, 69,816,826, 92,826,831, 69,831,836, 92,836,841, 69,841,846, 92,846,856, 69,856,866, 92,866,876, 69,876,886, 92,886,896, 69,896,898, 229,898,902, 183,902,908, 92,908,911, 69,911,916, 92,916,921, 69,921,926, 92,926,936, 69,936,946, 92,946,956, 69,956,966, 92,966,976, 69,976,986, 92,986,991, 69,991,996, 92,996,1001, 69,1001,1006, 92,1006,1016, 69,1016,1026, 92,1026,1036, 69,1036,1046, 92,1046,1057, 137,1065,1073, 115,1073,1081, 92,1081,1089, 69,1089,1106, 92,1106,1116, 69,1116,1126, 92,1126,1136, 69,1136,1146, 92,1146,1151, 69,1151,1156, 92,1156,1161, 69,1161,1166, 92,1166,1176, 69,1176,1186, 92,1186,1188, 137,1188,1196, 115,1196,1204, 92,1204,1216, 69,1216,1226, 92,1226,1231, 69,1231,1232, 92,1232,1234, 69,1234,1236, 92,1236,1241, 69,1241,1246, 92,1246,1256, 69,1256,1266, 92,1266,1276, 69,1276,1286, 92,1286,1296, 69,1296,1306, 92,1306,1311, 69,1311,1316, 92,1316,1321, 69,1321,1326, 92,1326,1336, 69,1336,1346, 92,1346,1356, 69,1356,1366, 92,1366,0};





//·½²¨0//////////////////
uint i0=0;// Êı×éÎ»ÖÃ
uint Tone0 ;//°ëÒô³¤(Ïàµ±ÓÚÆµÂÊ)
uint fcounter0;//Òô³¤¼ÆÊı
uchar volume0;//ÒôÁ¿ 
uchar swap0=0;//ÇĞ»»¿ª¹Ø

//·½²¨1//////////////////
uint i1=0;// Êı×éÎ»ÖÃ
uint Tone1 ;//°ëÒô³¤(Ïàµ±ÓÚÆµÂÊ)
uint fcounter1;//Òô³¤¼ÆÊı
uchar volume1;//ÒôÁ¿ 
uchar swap1=0;//ÇĞ»»¿ª¹Ø

//Èı½Ç²¨//////////////////
uint i2=0; 
uint Tone2 ; 
uint fcounter2; 
uchar volume2=6*8;//Èı½Ç²¨ÒôÁ¿¹Ì¶¨Îª6 
uchar swap2=0; 

//ÔÓ²¨//////////////////
uint i3=0; 
uint Tone3 ; 
uint fcounter3; 
uchar volume3=4*8;//ÔÓ²¨ÒôÁ¿¹Ì¶¨ 
uchar swap3=0; 

uint sum_volume;//×ÜÒôÁ¿ 
uint T=0;//Ê±¼ä¼ÆÊı


void init_devices(void)
{
    
    DDRD=0b10000000;  
    PORTD=0b10000000; 
    
    //#####¶¨Ê±Æ÷2/PD7(OC2)pwm¿ØÖÆÒôÁ¿,ÖÜÆÚÎª32us(31.2KHz)######
    TCCR2=0X01;//ÄÚ²¿CK/1Âö³å
    SET_BIT(TCCR2,WGM20);    //¿ìËÙPWM·½Ê½
    SET_BIT(TCCR2,WGM21);
    SET_BIT(TCCR2,COM21); //¼õ1Æ¥ÅäÖÃÎ»
    OCR2=255;
    //####################
    
    //#####¶¨Ê±Æ÷1,ÖÜÆÚÎª0.025ms¶ÔÒôÆµ²ÉÑù######
    SET_BIT(TCCR1B,CS11);//8·ÖÆµ	
    SET_BIT(TCCR1B,WGM12);//CTC·½Ê½,Æ¥ÅäÇåÁãºó×Ô¶¯¼ÆÊı
    OCR1A=25;
    TCNT1=0;
    SET_BIT(TIMSK,OCIE1A);
    //####################
    
    //#####¶¨Ê±Æ÷0,ÖÜÆÚÎª1/60s(16.67ms),¶ÔÊ±¼ä½øĞĞ¼ÆÊı######
    SET_BIT(TCCR0,CS00);//1024·ÖÆµ
    SET_BIT(TCCR0,CS02);
    SET_BIT(TCCR0,WGM01);//CTC·½Ê½,Æ¥ÅäÇåÁãºó×Ô¶¯¼ÆÊı
    OCR0=133;//¶¨Ê±Ê±¼ä
    TCNT0=0;
    SET_BIT(TIMSK,OCIE0);
    //####################
    
    
    
    SET_BIT(SREG,7);  //È«¾ÖÖĞ¶Ï
}


void main(void)  
{
    init_devices();
    while(1)
    {
    }
}

void delay_1ms(void)//Î¢Ãë¼¶ÑÓÊ±,µ¥Î»1Î¢Ãë
{
    uint i;
    for(i=0;i<(unsigned int)(8*143-2);i++);
}


void delay_ms(uint num)//ºÁÃë¼¶¾«È·ÑÓÊ±,µ¥Î»1ºÁÃë(8M)
{
    uint i;
    for(i=0;i<num;i++) delay_1ms();
}


//#####¶¨Ê±Æ÷0,ÖÜÆÚÎª1/60s(16.67ms),¶ÔÊ±¼äT½øĞĞ¼ÆÊı
#pragma  interrupt_handler T0_counter:20
void T0_counter(void)  
{
    T++;
    
    if(music_dataRect0[i0]==9999)//µ½Î²²¿ÁË£¬´ÓÍ·¿ªÊ¼
    {
        delay_ms(1000);
        i0=0;i1=0;i2=0;i3=0;
		volume0=0;volume1=0;volume2=0;volume3=0;
        T=0;
    }
    
    //·½²¨0//////////////////
	if(T>=music_dataRect0[i0-1])volume0=0;//ÊÇ·ñ½áÊøÁË
    if(T>=music_dataRect0[i0+2])
    {
        Tone0=music_dataRect0[i0];
        volume0=music_dataRect0[i0+1]*8;
        fcounter0=0;
        i0+=4;
    }    
    
    //·½²¨1//////////////////
	if(T>=music_dataRect1[i1-1])volume1=0;//ÊÇ·ñ|½áÊøÊ±¼ä|ÁË
    if(T>=music_dataRect1[i1+2])
    {
        Tone1=music_dataRect1[i1];
        volume1=music_dataRect1[i1+1]*8;
        fcounter1=0;
        i1+=4;
    }   
    
    //Èı½Ç²¨//////////////////
	if(T>=music_dataTriangle[i2-1])volume2=0;//ÊÇ·ñ|½áÊøÊ±¼ä|ÁË
    if(T>=music_dataTriangle[i2+1])
    {
        Tone2=music_dataTriangle[i2];
		volume2=6*8;
        fcounter2=0;
        i2+=3;
    }  
    
    //ÔÓ²¨
	if(T>=music_dataNoise[i3-1])volume3=0;//ÊÇ·ñ|½áÊøÊ±¼ä|ÁË
    if(T>=music_dataNoise[i3+1])
    {
        Tone3=music_dataNoise[i3];
		volume3=6*8;
        fcounter3=0;
        i3+=3;
    }  	  
    
}


//#####¶¨Ê±Æ÷1,ÖÜÆÚÎª0.025ms¶ÔÒôÆµ²ÉÑù
#pragma  interrupt_handler T1_counter:7
void T1_counter(void)  
{
    
    //·½²¨0//////////////////
    fcounter0++;//Òô³¤¼ÆÊı
    if(fcounter0==Tone0)
    {
        swap0=(~swap0);
        fcounter0=0;
    }
    
    //·½²¨1//////////////////
    fcounter1++;//Òô³¤¼ÆÊı
    if(fcounter1==Tone1)
    {
        swap1=(~swap1);
        fcounter1=0;
    }
    
    //Èı½Ç²¨//////////////////
    fcounter2++;//Òô³¤¼ÆÊı
    if(fcounter2==Tone2)
    {
        swap2=(~swap2);
        fcounter2=0;
    }
    
    //ÔÓ²¨
    fcounter3++;//Òô³¤¼ÆÊı
    if(fcounter3==Tone3)
    {
        swap3=(~swap3);
        fcounter3=0;
    }
    
    sum_volume=0;
    if(swap0) sum_volume=volume0;//ÒôÁ¿Ïà¼Ó
    if(swap1) sum_volume+=volume1;//ÒôÁ¿Ïà¼Ó
    if(swap2) sum_volume+=volume2;//ÒôÁ¿Ïà¼Ó	
    if(swap3) sum_volume+=volume3;//ÒôÁ¿Ïà¼Ó		
    if(sum_volume>255)sum_volume=255;//ÏŞÖÆ×î´óÒôÁ¿
    
    OCR2=sum_volume;
}


