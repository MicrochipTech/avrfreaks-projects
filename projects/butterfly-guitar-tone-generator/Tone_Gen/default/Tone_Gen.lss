
Tone_Gen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000049e  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000049e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080011a  0080011a  0000054c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009a  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000047c  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000223  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ea  00000000  00000000  00000cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f2  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000016ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ee e9       	ldi	r30, 0x9E	; 158
  dc:	f4 e0       	ldi	r31, 0x04	; 4
  de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
  e4:	aa 31       	cpi	r26, 0x1A	; 26
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	aa e1       	ldi	r26, 0x1A	; 26
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ab 33       	cpi	r26, 0x3B	; 59
  f6:	b1 07       	cpc	r27, r17
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 83 00 	call	0x106	; 0x106 <main>
  fe:	0c 94 4d 02 	jmp	0x49a	; 0x49a <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <main>:
#include <avr/delay.h>
#include "LCD_Driver.h"	// "Dean's LCD_Driver - www.AVRfreaks.com"


int main(void)
{
 106:	4f 92       	push	r4
 108:	5f 92       	push	r5
 10a:	6f 92       	push	r6
 10c:	7f 92       	push	r7
 10e:	8f 92       	push	r8
 110:	9f 92       	push	r9
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	DDRE &= ~(1<<PE2);	// Joystick left
 126:	6a 98       	cbi	0x0d, 2	; 13
	DDRE &= ~(1<<PE3);	// Joystick right
 128:	6b 98       	cbi	0x0d, 3	; 13
	PORTE = 0xFF;		// Enable pullup resistor on inputs
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8e b9       	out	0x0e, r24	; 14

	DDRB |=(1<<PB5);	// Piezo out
 12e:	25 9a       	sbi	0x04, 5	; 4

	OCR1A = 0x0009;		// Volume
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 89 00 	sts	0x0089, r25
 138:	80 93 88 00 	sts	0x0088, r24

	ICR1 = 1516.852228;	// Pitch (for example only)
 13c:	8c ee       	ldi	r24, 0xEC	; 236
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	90 93 87 00 	sts	0x0087, r25
 144:	80 93 86 00 	sts	0x0086, r24

	TCCR1B |= ((1<<CS10)|(1<<WGM13));	// No prescale, phase correct PWM	
 148:	80 91 81 00 	lds	r24, 0x0081
 14c:	81 61       	ori	r24, 0x11	; 17
 14e:	80 93 81 00 	sts	0x0081, r24

	TCCR1A |= ((1<<WGM11)|(1<<COM1A1));	// Phase correct PWM, clear OCR1A at top 
 152:	80 91 80 00 	lds	r24, 0x0080
 156:	82 68       	ori	r24, 0x82	; 130
 158:	80 93 80 00 	sts	0x0080, r24

	int menuSel = 0;	//Menu position counter initially off

	LCD_Init();		// Initiate LCD
 15c:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_Init>
	sei();			// Enable global interrupts (needed for LCD operation)
 160:	78 94       	sei
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	00 e3       	ldi	r16, 0x30	; 48
 168:	15 e7       	ldi	r17, 0x75	; 117
		break;

		case 3:				// Guitar D string
		{
		LCD_puts("D");
		ICR1 = 3405.298645;	// 146.83Hz
 16a:	5d e4       	ldi	r21, 0x4D	; 77
 16c:	45 2e       	mov	r4, r21
 16e:	5d e0       	ldi	r21, 0x0D	; 13
 170:	55 2e       	mov	r5, r21
		break;

		case 5:				// Guitar B string
		{
		LCD_puts("B");
		ICR1 = 2024.783348;	// 246.94Hz
 172:	48 ee       	ldi	r20, 0xE8	; 232
 174:	64 2e       	mov	r6, r20
 176:	47 e0       	ldi	r20, 0x07	; 7
 178:	74 2e       	mov	r7, r20
		break;

		case 4:				// Guitar G string
		{
		LCD_puts("G");
		ICR1 = 2551.020408;	//196Hz
 17a:	37 ef       	ldi	r19, 0xF7	; 247
 17c:	83 2e       	mov	r8, r19
 17e:	39 e0       	ldi	r19, 0x09	; 9
 180:	93 2e       	mov	r9, r19
		break;

		case 6:				// Guitar high E string
		{
		LCD_puts("High E");
		ICR1 = 1516.852228;	// 329.63Hz
 182:	2c ee       	ldi	r18, 0xEC	; 236
 184:	a2 2e       	mov	r10, r18
 186:	25 e0       	ldi	r18, 0x05	; 5
 188:	b2 2e       	mov	r11, r18
		break;

		case 1:				// Lowest guitar string tone
		{
		LCD_puts("Low E");	
		ICR1 = 6067.224851;	// 82.41Hz
 18a:	93 eb       	ldi	r25, 0xB3	; 179
 18c:	c9 2e       	mov	r12, r25
 18e:	97 e1       	ldi	r25, 0x17	; 23
 190:	d9 2e       	mov	r13, r25
		break;

		case 2:				// Guitar A string
		{
		LCD_puts("A");
		ICR1 = 4545.454545;	// 110Hz
 192:	81 ec       	ldi	r24, 0xC1	; 193
 194:	e8 2e       	mov	r14, r24
 196:	81 e1       	ldi	r24, 0x11	; 17
 198:	f8 2e       	mov	r15, r24
	LCD_Init();		// Initiate LCD
	sei();			// Enable global interrupts (needed for LCD operation)

	while(1)		// Main loop
	{	
	if(~PINE & (1<<PE2))				// Joystick left press?
 19a:	62 99       	sbic	0x0c, 2	; 12
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <main+0xa8>
 19e:	c8 01       	movw	r24, r16
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x9a>
	{
		_delay_ms(120);					// 120mS debounce - very needed!!!
		if(~PINE & (1<<PE2))			// Joystick still pressed?
 1a4:	62 99       	sbic	0x0c, 2	; 12
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <main+0xa8>
		{
			if(menuSel>0){menuSel--;}	// Scroll menu left untill bottom
 1a8:	20 97       	sbiw	r28, 0x00	; 0
 1aa:	09 f0       	breq	.+2      	; 0x1ae <main+0xa8>
 1ac:	21 97       	sbiw	r28, 0x01	; 1
		}
	}

	if(~PINE & (1<<PE3))				// Joystick right pressed?
 1ae:	63 99       	sbic	0x0c, 3	; 12
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <main+0xbe>
 1b2:	c8 01       	movw	r24, r16
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xae>
	{
		_delay_ms(120);					// 120mS debounce - IMPORTANT!!
		if(~PINE & (1<<PE3))			// Still pressed?
 1b8:	63 99       	sbic	0x0c, 3	; 12
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <main+0xbe>
		{
			if(menuSel<=5){menuSel++;}	// Scroll menu right untill top
 1bc:	c6 30       	cpi	r28, 0x06	; 6
 1be:	d1 05       	cpc	r29, r1
 1c0:	0c f4       	brge	.+2      	; 0x1c4 <main+0xbe>
 1c2:	21 96       	adiw	r28, 0x01	; 1
		}
	}

		switch(menuSel)		// Menu functions
 1c4:	c3 30       	cpi	r28, 0x03	; 3
 1c6:	d1 05       	cpc	r29, r1
 1c8:	89 f1       	breq	.+98     	; 0x22c <main+0x126>
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	d1 05       	cpc	r29, r1
 1ce:	4c f4       	brge	.+18     	; 0x1e2 <main+0xdc>
 1d0:	c1 30       	cpi	r28, 0x01	; 1
 1d2:	d1 05       	cpc	r29, r1
 1d4:	c9 f0       	breq	.+50     	; 0x208 <main+0x102>
 1d6:	c2 30       	cpi	r28, 0x02	; 2
 1d8:	d1 05       	cpc	r29, r1
 1da:	fc f4       	brge	.+62     	; 0x21a <main+0x114>
 1dc:	20 97       	sbiw	r28, 0x00	; 0
 1de:	59 f0       	breq	.+22     	; 0x1f6 <main+0xf0>
 1e0:	dc cf       	rjmp	.-72     	; 0x19a <main+0x94>
 1e2:	c5 30       	cpi	r28, 0x05	; 5
 1e4:	d1 05       	cpc	r29, r1
 1e6:	a1 f1       	breq	.+104    	; 0x250 <main+0x14a>
 1e8:	c5 30       	cpi	r28, 0x05	; 5
 1ea:	d1 05       	cpc	r29, r1
 1ec:	44 f1       	brlt	.+80     	; 0x23e <main+0x138>
 1ee:	c6 30       	cpi	r28, 0x06	; 6
 1f0:	d1 05       	cpc	r29, r1
 1f2:	99 f6       	brne	.-90     	; 0x19a <main+0x94>
 1f4:	36 c0       	rjmp	.+108    	; 0x262 <main+0x15c>
		{
		case 0:				// Off position
		{
		LCD_puts("Off");
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 0;
 1fe:	10 92 87 00 	sts	0x0087, r1
 202:	10 92 86 00 	sts	0x0086, r1
 206:	c9 cf       	rjmp	.-110    	; 0x19a <main+0x94>
		}
		break;

		case 1:				// Lowest guitar string tone
		{
		LCD_puts("Low E");	
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 6067.224851;	// 82.41Hz
 210:	d0 92 87 00 	sts	0x0087, r13
 214:	c0 92 86 00 	sts	0x0086, r12
 218:	c0 cf       	rjmp	.-128    	; 0x19a <main+0x94>
		}
		break;

		case 2:				// Guitar A string
		{
		LCD_puts("A");
 21a:	8a e0       	ldi	r24, 0x0A	; 10
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 4545.454545;	// 110Hz
 222:	f0 92 87 00 	sts	0x0087, r15
 226:	e0 92 86 00 	sts	0x0086, r14
 22a:	b7 cf       	rjmp	.-146    	; 0x19a <main+0x94>
		}
		break;

		case 3:				// Guitar D string
		{
		LCD_puts("D");
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 3405.298645;	// 146.83Hz
 234:	50 92 87 00 	sts	0x0087, r5
 238:	40 92 86 00 	sts	0x0086, r4
 23c:	ae cf       	rjmp	.-164    	; 0x19a <main+0x94>
		}
		break;

		case 4:				// Guitar G string
		{
		LCD_puts("G");
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 2551.020408;	//196Hz
 246:	90 92 87 00 	sts	0x0087, r9
 24a:	80 92 86 00 	sts	0x0086, r8
 24e:	a5 cf       	rjmp	.-182    	; 0x19a <main+0x94>
		}
		break;

		case 5:				// Guitar B string
		{
		LCD_puts("B");
 250:	80 e1       	ldi	r24, 0x10	; 16
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 2024.783348;	// 246.94Hz
 258:	70 92 87 00 	sts	0x0087, r7
 25c:	60 92 86 00 	sts	0x0086, r6
 260:	9c cf       	rjmp	.-200    	; 0x19a <main+0x94>
		}
		break;

		case 6:				// Guitar high E string
		{
		LCD_puts("High E");
 262:	82 e1       	ldi	r24, 0x12	; 18
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
		ICR1 = 1516.852228;	// 329.63Hz
 26a:	b0 92 87 00 	sts	0x0087, r11
 26e:	a0 92 86 00 	sts	0x0086, r10
 272:	93 cf       	rjmp	.-218    	; 0x19a <main+0x94>

00000274 <LCD_Init>:
 RETURNS:   | None 
*/ 
void LCD_Init(void) 
{ 
   // Set the initial contrast level to maximum: 
   LCD_CONTRAST_LEVEL(0x0F); 
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all segment pins: 
    LCDCRB  = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0); 
 27a:	87 eb       	ldi	r24, 0xB7	; 183
 27c:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 64Hz: 
    LCDFRR  = (0<<LCDPS0) | (3<<LCDCD0);    
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 e6 00 	sts	0x00E6, r24

   // Enable LCD and set low power waveform, enable start of frame interrupt: 
    LCDCRA  = (1<<LCDEN) | (1<<LCDAB) | (1<<LCDIE); 
 286:	88 ec       	ldi	r24, 0xC8	; 200
 288:	80 93 e4 00 	sts	0x00E4, r24
} 
 28c:	08 95       	ret

0000028e <LCD_puts>:
 PURPOSE:   | Displays a string from SRAM onto the Butterfly's LCD 
 ARGUMENTS: | Pointer to the start of the SRAM string 
 RETURNS:   | None 
*/ 
void LCD_puts(const char *Data) 
{ 
 28e:	dc 01       	movw	r26, r24
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	41 e0       	ldi	r20, 0x01	; 1
            TextBuffer[LoadB++] = (CurrByte - '*'); 
            break; 
         case 0x00:                                   // Null termination of the string - ignore for now so the nulls can be appended below 
            break; 
         default:                                     // Space or invalid character, use 0xFF to display a blank 
            TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR; 
 296:	5f ef       	ldi	r21, 0xFF	; 255
 PURPOSE:   | Displays a string from SRAM onto the Butterfly's LCD 
 ARGUMENTS: | Pointer to the start of the SRAM string 
 RETURNS:   | None 
*/ 
void LCD_puts(const char *Data) 
{ 
 298:	e2 2f       	mov	r30, r18
   uint8_t LoadB       = 0; 
   uint8_t CurrByte; 

   do 
   { 
      CurrByte = *(Data++); 
 29a:	9d 91       	ld	r25, X+
       
      switch (CurrByte) 
 29c:	9b 37       	cpi	r25, 0x7B	; 123
 29e:	88 f4       	brcc	.+34     	; 0x2c2 <LCD_puts+0x34>
 2a0:	91 36       	cpi	r25, 0x61	; 97
 2a2:	38 f4       	brcc	.+14     	; 0x2b2 <LCD_puts+0x24>
 2a4:	99 23       	and	r25, r25
 2a6:	e1 f0       	breq	.+56     	; 0x2e0 <LCD_puts+0x52>
 2a8:	89 2f       	mov	r24, r25
 2aa:	8a 52       	subi	r24, 0x2A	; 42
 2ac:	86 33       	cpi	r24, 0x36	; 54
 2ae:	48 f4       	brcc	.+18     	; 0x2c2 <LCD_puts+0x34>
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <LCD_puts+0x26>
      { 
         case 'a'...'z': 
            CurrByte &= ~(1 << 5);                   // Translate to upper-case character 
 2b2:	9f 7d       	andi	r25, 0xDF	; 223
         case '*'...'_':                                // Valid character, load it into the array 
            TextBuffer[LoadB++] = (CurrByte - '*'); 
 2b4:	9a 52       	subi	r25, 0x2A	; 42
 2b6:	f9 01       	movw	r30, r18
 2b8:	e0 5e       	subi	r30, 0xE0	; 224
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	90 83       	st	Z, r25
 2be:	96 5d       	subi	r25, 0xD6	; 214
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_puts+0x3c>
            break; 
         case 0x00:                                   // Null termination of the string - ignore for now so the nulls can be appended below 
            break; 
         default:                                     // Space or invalid character, use 0xFF to display a blank 
            TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR; 
 2c2:	f9 01       	movw	r30, r18
 2c4:	e0 5e       	subi	r30, 0xE0	; 224
 2c6:	fe 4f       	sbci	r31, 0xFE	; 254
 2c8:	50 83       	st	Z, r21
      } 
   } 
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE)); 
 2ca:	99 23       	and	r25, r25
 2cc:	41 f0       	breq	.+16     	; 0x2de <LCD_puts+0x50>
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	84 2f       	mov	r24, r20
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	85 31       	cpi	r24, 0x15	; 21
 2d8:	11 f0       	breq	.+4      	; 0x2de <LCD_puts+0x50>
 2da:	48 2f       	mov	r20, r24
 2dc:	dd cf       	rjmp	.-70     	; 0x298 <LCD_puts+0xa>
 2de:	e4 2f       	mov	r30, r20

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00); 
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	e7 30       	cpi	r30, 0x07	; 7
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <LCD_puts+0x5a>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 1a 01 	sts	0x011A, r24
 2ec:	8e 2f       	mov	r24, r30

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
     TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;  // Load in nulls to ensure that when scrolling, the display clears before wrapping 
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
   } 
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE)); 

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00); 

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 2f0:	9e 2f       	mov	r25, r30
 2f2:	99 5f       	subi	r25, 0xF9	; 249
     TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;  // Load in nulls to ensure that when scrolling, the display clears before wrapping 
 2f4:	e8 2f       	mov	r30, r24
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e0 5e       	subi	r30, 0xE0	; 224
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	20 83       	st	Z, r18
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
   } 
   while (CurrByte && (LoadB < LCD_TEXTBUFFER_SIZE)); 

   ScrollFlags = ((LoadB > LCD_DISPLAY_SIZE)? LCD_FLAG_SCROLL : 0x00); 

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 300:	89 17       	cp	r24, r25
 302:	c1 f7       	brne	.-16     	; 0x2f4 <LCD_puts+0x66>
     TextBuffer[LoadB++] = LCD_SPACE_OR_INVALID_CHAR;  // Load in nulls to ensure that when scrolling, the display clears before wrapping 
    
   TextBuffer[LoadB] = 0x00;                           // Null-terminate string 
 304:	e8 2f       	mov	r30, r24
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	e0 5e       	subi	r30, 0xE0	; 224
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	10 82       	st	Z, r1
    
   StrStart      = 0; 
 30e:	10 92 1e 01 	sts	0x011E, r1
   StrEnd        = LoadB; 
 312:	80 93 1f 01 	sts	0x011F, r24
   ScrollCount   = LCD_SCROLLCOUNT_DEFAULT + LCD_DELAYCOUNT_DEFAULT; 
 316:	8a e1       	ldi	r24, 0x1A	; 26
 318:	80 93 1d 01 	sts	0x011D, r24
   UpdateDisplay = true; 
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 1c 01 	sts	0x011C, r24
} 
 322:	08 95       	ret

00000324 <__vector_22>:
 PURPOSE:   | ISR to handle the display and scrolling of the current display string onto the LCD 
 ARGUMENTS: | None 
 RETURNS:   | None 
*/ 
ISR(LCD_vect) 
{ 
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
   if (ScrollFlags & LCD_FLAG_SCROLL) 
 344:	80 91 1a 01 	lds	r24, 0x011A
 348:	80 ff       	sbrs	r24, 0
 34a:	0d c0       	rjmp	.+26     	; 0x366 <__vector_22+0x42>
   { 
      if (!(ScrollCount--)) 
 34c:	80 91 1d 01 	lds	r24, 0x011D
 350:	81 50       	subi	r24, 0x01	; 1
 352:	80 93 1d 01 	sts	0x011D, r24
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	31 f4       	brne	.+12     	; 0x366 <__vector_22+0x42>
      { 
         UpdateDisplay = true; 
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 1c 01 	sts	0x011C, r24
         ScrollCount   = LCD_SCROLLCOUNT_DEFAULT; 
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	80 93 1d 01 	sts	0x011D, r24
      } 
   } 

   if (UpdateDisplay) 
 366:	80 91 1c 01 	lds	r24, 0x011C
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <__vector_22+0x4c>
 36e:	6a c0       	rjmp	.+212    	; 0x444 <__vector_22+0x120>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	94 2f       	mov	r25, r20
   { 
      for (uint8_t Character = 0; Character < LCD_DISPLAY_SIZE; Character++) 
      { 
         uint8_t Byte = (StrStart + Character); 
 376:	e0 91 1e 01 	lds	r30, 0x011E
 37a:	e4 0f       	add	r30, r20

         if (Byte >= StrEnd) 
 37c:	80 91 1f 01 	lds	r24, 0x011F
 380:	e8 17       	cp	r30, r24
 382:	18 f0       	brcs	.+6      	; 0x38a <__vector_22+0x66>
           Byte -= StrEnd; 
 384:	80 91 1f 01 	lds	r24, 0x011F
 388:	e8 1b       	sub	r30, r24
          
         LCD_WriteChar(TextBuffer[Byte], Character); 
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	e0 5e       	subi	r30, 0xE0	; 224
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	e0 81       	ld	r30, Z
static inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit) 
{ 
   uint8_t* BuffPtr = (uint8_t*)(LCD_LCDREGS_START + (Digit >> 1)); 
   uint16_t SegData = 0x0000; 

   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space 
 392:	ef 3f       	cpi	r30, 0xFF	; 255
 394:	19 f4       	brne	.+6      	; 0x39c <__vector_22+0x78>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <__vector_22+0x86>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	e4 5a       	subi	r30, 0xA4	; 164
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	25 91       	lpm	r18, Z+
 3a8:	34 91       	lpm	r19, Z+
 ARGUMENTS: | Character to display, LCD character number to display character on 
 RETURNS:   | None 
*/ 
static inline void LCD_WriteChar(const uint8_t Byte, const uint8_t Digit) 
{ 
   uint8_t* BuffPtr = (uint8_t*)(LCD_LCDREGS_START + (Digit >> 1)); 
 3aa:	96 95       	lsr	r25
 3ac:	e9 2f       	mov	r30, r25
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e4 51       	subi	r30, 0x14	; 20
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	60 e0       	ldi	r22, 0x00	; 0

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
   { 
      uint8_t MaskedSegData = (SegData & 0x0000F); 

      if (Digit & 0x01) 
 3b6:	da 01       	movw	r26, r20
 3b8:	a1 70       	andi	r26, 0x01	; 1
 3ba:	b0 70       	andi	r27, 0x00	; 0
   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
   { 
      uint8_t MaskedSegData = (SegData & 0x0000F); 
 3bc:	82 2f       	mov	r24, r18
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	90 81       	ld	r25, Z

      if (Digit & 0x01) 
 3c2:	10 97       	sbiw	r26, 0x00	; 0
 3c4:	21 f0       	breq	.+8      	; 0x3ce <__vector_22+0xaa>
        *BuffPtr = ((*BuffPtr & 0x0F) | (MaskedSegData << 4)); 
 3c6:	82 95       	swap	r24
 3c8:	80 7f       	andi	r24, 0xF0	; 240
 3ca:	9f 70       	andi	r25, 0x0F	; 15
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <__vector_22+0xac>
      else 
        *BuffPtr = ((*BuffPtr & 0xF0) | MaskedSegData); 
 3ce:	90 7f       	andi	r25, 0xF0	; 240
 3d0:	89 2b       	or	r24, r25
 3d2:	80 83       	st	Z, r24
   uint16_t SegData = 0x0000; 

   if (Byte != LCD_SPACE_OR_INVALID_CHAR)              // Null indicates invalid character or space 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	64 30       	cpi	r22, 0x04	; 4
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__vector_22+0xc4>
      if (Digit & 0x01) 
        *BuffPtr = ((*BuffPtr & 0x0F) | (MaskedSegData << 4)); 
      else 
        *BuffPtr = ((*BuffPtr & 0xF0) | MaskedSegData); 

      BuffPtr += 5; 
 3da:	35 96       	adiw	r30, 0x05	; 5
      SegData >>= 4; 
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	36 95       	lsr	r19
 3e0:	27 95       	ror	r18
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <__vector_22+0xba>
 3e6:	ea cf       	rjmp	.-44     	; 0x3bc <__vector_22+0x98>
 3e8:	4f 5f       	subi	r20, 0xFF	; 255
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
      } 
   } 

   if (UpdateDisplay) 
   { 
      for (uint8_t Character = 0; Character < LCD_DISPLAY_SIZE; Character++) 
 3ec:	46 30       	cpi	r20, 0x06	; 6
 3ee:	51 05       	cpc	r21, r1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_22+0xd0>
 3f2:	c0 cf       	rjmp	.-128    	; 0x374 <__vector_22+0x50>
           Byte -= StrEnd; 
          
         LCD_WriteChar(TextBuffer[Byte], Character); 
      } 
       
      if ((StrStart + LCD_DISPLAY_SIZE) == StrEnd)    // Done scrolling message on LCD once 
 3f4:	80 91 1e 01 	lds	r24, 0x011E
 3f8:	20 91 1f 01 	lds	r18, 0x011F
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	06 96       	adiw	r24, 0x06	; 6
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	82 17       	cp	r24, r18
 404:	93 07       	cpc	r25, r19
 406:	29 f4       	brne	.+10     	; 0x412 <__vector_22+0xee>
        ScrollFlags |= LCD_FLAG_SCROLL_DONE; 
 408:	80 91 1a 01 	lds	r24, 0x011A
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	80 93 1a 01 	sts	0x011A, r24
       
      if (StrStart++ == StrEnd) 
 412:	80 91 1e 01 	lds	r24, 0x011E
 416:	90 91 1f 01 	lds	r25, 0x011F
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 1e 01 	sts	0x011E, r24
 420:	81 50       	subi	r24, 0x01	; 1
 422:	89 17       	cp	r24, r25
 424:	19 f4       	brne	.+6      	; 0x42c <__vector_22+0x108>
        StrStart     = 1; 
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 1e 01 	sts	0x011E, r24

       if (ShowColons) 
 42c:	80 91 1b 01 	lds	r24, 0x011B
 430:	88 23       	and	r24, r24
 432:	21 f0       	breq	.+8      	; 0x43c <__vector_22+0x118>
            *((uint8_t*)(LCD_LCDREGS_START + 8)) = 0x01; 
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 f4 00 	sts	0x00F4, r24
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__vector_22+0x11c>
        else 
            *((uint8_t*)(LCD_LCDREGS_START + 8)) = 0x00; 
 43c:	10 92 f4 00 	sts	0x00F4, r1

      UpdateDisplay  = false;                         // Clear LCD management flags, LCD update is complete 
 440:	10 92 1c 01 	sts	0x011C, r1
   } 
} 
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <LCD_ShowColons>:
 ARGUMENTS: | Boolean - true to turn on colons 
 RETURNS:   | None 
*/ 
void LCD_ShowColons(const uint8_t ColonsOn) 
{ 
   ShowColons    = ColonsOn; 
 464:	80 93 1b 01 	sts	0x011B, r24
   UpdateDisplay = true; 
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 1c 01 	sts	0x011C, r24
} 
 46e:	08 95       	ret

00000470 <LCD_puts_f>:
 PURPOSE:   | Displays a string from flash onto the Butterfly's LCD 
 ARGUMENTS: | Pointer to the start of the flash string 
 RETURNS:   | None 
*/ 
void LCD_puts_f(const char *FlashData) 
{ 
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	bc 01       	movw	r22, r24
   /* Rather than create a new buffer here (wasting RAM), the TextBuffer global 
      is re-used as a temp buffer. Once the ASCII data is loaded in to TextBuffer, 
      LCD_puts is called with it to post-process it into the correct format for the 
      LCD interrupt.                                                                */ 

   strcpy_P((char*)&TextBuffer[0], FlashData); 
 476:	00 e2       	ldi	r16, 0x20	; 32
 478:	11 e0       	ldi	r17, 0x01	; 1
 47a:	c8 01       	movw	r24, r16
 47c:	0e 94 46 02 	call	0x48c	; 0x48c <strcpy_P>
   LCD_puts((char*)&TextBuffer[0]); 
 480:	c8 01       	movw	r24, r16
 482:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_puts>
} 
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <strcpy_P>:
 48c:	fb 01       	movw	r30, r22
 48e:	dc 01       	movw	r26, r24
 490:	05 90       	lpm	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	00 20       	and	r0, r0
 496:	e1 f7       	brne	.-8      	; 0x490 <strcpy_P+0x4>
 498:	08 95       	ret

0000049a <_exit>:
 49a:	f8 94       	cli

0000049c <__stop_program>:
 49c:	ff cf       	rjmp	.-2      	; 0x49c <__stop_program>
