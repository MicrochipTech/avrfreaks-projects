;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.02.6 Professional
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2005/09/02
;Author  : F4CG
;Company : F4CG
;Comments:
;
;
;Chip type           : ATtiny26L
;Clock frequency     : 8.000000 MHz
;Memory model        : Tiny
;External RAM size   : 0
;Data Stack size     : 32
;*****************************************************/
;
;#include <tiny26.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000004 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;
;
;
;unsigned char   min=0,max=0;
;
;unsigned char   vpp=0;
;unsigned char   gain=7;
;
;
;
;
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 002A {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 002B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C // Delay needed for the stabilization of the ADC input voltage
; 0000 002D delay_us(10);
;PCODE: $00000011 VOL: 0
; 0000 002E // Start the AD conversion
; 0000 002F ADCSR|=0x40;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0030 // Wait for the AD conversion to complete
; 0000 0031 while ((ADCSR & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0032 ADCSR|=0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033 return ADCH;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0034 }
;PCODE: $00000024 VOL: 0
;
;// Timer 1 overflow interrupt service routine           // 32 ms
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0038 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039         unsigned int x;
; 0000 003A         unsigned char temp;
; 0000 003B         min = 128;
;PCODE: $00000027 VOL: 0
;	x -> R16,R17
;	temp -> R18
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C         max = 128;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003D         for(x=0;x<500;x++)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003E         {
; 0000 003F                 temp = read_adc(9);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040                 if( temp > max)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0041                         max = temp;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042                 if( temp < min)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0043                         min = temp;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0044         }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0045         vpp = max - min ;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0046         if(vpp>230)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0047         {
; 0000 0048                 if(gain > 0)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0049                         gain --;
;PCODE: $00000057 VOL: 0
; 0000 004A         }
;PCODE: $00000058 VOL: 0
; 0000 004B         if( vpp < 100)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004C         {
; 0000 004D                 if(gain < 7)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004E                         gain ++;
;PCODE: $00000060 VOL: 0
; 0000 004F         }
;PCODE: $00000061 VOL: 0
; 0000 0050 
; 0000 0051         PORTA = gain;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0052 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;void main(void)
; 0000 0055 {
;PCODE: $0000006A VOL: 0
; 0000 0056 // Declare your local variables here
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port A initialization
; 0000 005A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 005B // State7=P State6=P State5=P State4=P State3=P State2=0 State1=0 State0=0
; 0000 005C PORTA=0xF8;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005D DDRA=0x07;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005E 
; 0000 005F // Port B initialization
; 0000 0060 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0061 // State7=P State6=T State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 0062 PORTB=0xBF;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0063 DDRB=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0064 
; 0000 0065 // Timer/Counter 0 initialization
; 0000 0066 // Clock source: System Clock
; 0000 0067 // Clock value: Timer 0 Stopped
; 0000 0068 TCCR0=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0069 TCNT0=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006A // Timer/Counter 1 initialization
; 0000 006B // Clock source: System Clock
; 0000 006C // Clock value: 7.813 kHz
; 0000 006D // Mode: Normal top=FFh
; 0000 006E // OC1A output: Disconnected
; 0000 006F // OC1B output: Disconnected
; 0000 0070 // Timer 1 Overflow Interrupt: On
; 0000 0071 // Compare A Match Interrupt: Off
; 0000 0072 // Compare B Match Interrupt: Off
; 0000 0073 PLLCSR=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0074 TCCR1A=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0075 TCCR1B=0x0B;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0076 TCNT1=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0077 OCR1A=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0078 OCR1B=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0079 OCR1C=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007A 
; 0000 007B // External Interrupt(s) initialization
; 0000 007C // INT0: Off
; 0000 007D // Interrupt on any change on pins PA3, PA6, PA7 and PB4-7: Off
; 0000 007E // Interrupt on any change on pins PB0-3: Off
; 0000 007F GIMSK=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0080 MCUCR=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0081 
; 0000 0082 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0083 TIMSK=0x04;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0084 
; 0000 0085 // Universal Serial Interface initialization
; 0000 0086 // Mode: Disabled
; 0000 0087 // Clock source: Register & Counter=no clk.
; 0000 0088 // USI Counter Overflow Interrupt: Off
; 0000 0089 USICR=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 008A 
; 0000 008B // Analog Comparator initialization
; 0000 008C // Analog Comparator: Off
; 0000 008D ACSR=0x80;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 008E 
; 0000 008F // ADC initialization
; 0000 0090 // ADC Clock frequency: 1000.000 kHz
; 0000 0091 // ADC Voltage Reference: AVCC pin
; 0000 0092 // Only the 8 most significant bits of
; 0000 0093 // the AD conversion result are used
; 0000 0094 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0095 ADCSR=0x83;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0096 
; 0000 0097 // Global enable interrupts
; 0000 0098 #asm("sei")
;PCODE: $00000093 VOL: 0
	sei
;PCODE: $00000094 VOL: 0
; 0000 0099 
; 0000 009A while (1)
;PCODE: $00000095 VOL: 0
; 0000 009B       {
; 0000 009C 
; 0000 009D 
; 0000 009E       };
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009F }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
