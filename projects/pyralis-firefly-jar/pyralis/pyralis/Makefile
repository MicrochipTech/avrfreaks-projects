# Name: Makefile
# Author: Kelsey Jordahl
# Copyright: KAJ 2009
# License: CC

# This is Makefile was generated by avr-project
# odd that the target names are hard coded, should fix that

DEVICE     = attiny85
PDEVICE    = t85		# for avrdude
CLOCK      = 1000000		# 1 MHz (8 MHz internal clock, divider set to 8)
PROGRAMMER = -c usbtiny
OBJECTS    = pyralis.o
FUSES      = -U lfuse:w:0x62:m -U hfuse:w:0xdd:m # brownout 2.7 V; CKDIV8

INC=-I/usr/local/avr/include
LIBS=-B/usr/local/avr/lib

AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE)
COMPILE = avr-gcc  $(INC) $(LIBS) -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE)

# symbolic targets:
all:	pyralis.hex

.c.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@
# "-x assembler-with-cpp" should not be necessary since this is the default
# file type for the .S (with capital S) extension. However, upper case
# characters are not always preserved on Windows. To ensure WinAVR
# compatibility define the file type manually.

.c.s:
	$(COMPILE) -S $< -o $@

flash:	all
	$(AVRDUDE) -U flash:w:pyralis.hex:i

fuse:
	$(AVRDUDE) $(FUSES)

# Xcode uses the Makefile targets "", "clean" and "install"
install: flash			# original set fuses as well

# if you use a bootloader, change the command below appropriately:
load: all
	bootloadHID pyralis.hex

clean:
	rm -f pyralis.hex pyralis.elf $(OBJECTS)

# file targets:
pyralis.elf: $(OBJECTS)
	$(COMPILE) -o pyralis.elf $(OBJECTS)

pyralis.hex: pyralis.elf
	rm -f pyralis.hex
	avr-objcopy -j .text -j .data -O ihex pyralis.elf pyralis.hex
# If you have an EEPROM section, you must also create a hex file for the
# EEPROM and add it to the "flash" target.

# Targets for code debugging and analysis:
disasm:	pyralis.elf
	avr-objdump -d pyralis.elf

cpp:
	$(COMPILE) -E pyralis.c
