
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  0000066e  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000208  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a89  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000038a  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000098e  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ea  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000039c  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	0b c1       	rjmp	.+534    	; 0x228 <__vector_8>
  12:	ae c0       	rjmp	.+348    	; 0x170 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ef       	ldi	r30, 0xFA	; 250
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	74 d1       	rcall	.+744    	; 0x342 <main>
  5a:	cd c2       	rjmp	.+1434   	; 0x5f6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <get_limit>:
 * all sw_port bits inverted
 * s_port  -> sign swith "0" - negative "1" - positive
 * limit = ((lower_nibble *10) + higher_nibble) * sign
*/
 int8_t get_limit(volatile uint8_t *sw_port, volatile uint8_t *s_port, uint8_t s_pin) 
 {
  5e:	dc 01       	movw	r26, r24
  60:	fb 01       	movw	r30, r22
  if (bit_get(*s_port, BIT(s_pin)))
  62:	80 81       	ld	r24, Z
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	02 c0       	rjmp	.+4      	; 0x6c <get_limit+0xe>
  68:	95 95       	asr	r25
  6a:	87 95       	ror	r24
  6c:	4a 95       	dec	r20
  6e:	e2 f7       	brpl	.-8      	; 0x68 <get_limit+0xa>
  70:	80 ff       	sbrs	r24, 0
  72:	15 c0       	rjmp	.+42     	; 0x9e <get_limit+0x40>
  return ((*sw_port ^ 0xFF) & 0x0F) * 10 + ((*sw_port ^ 0xFF) >> 4);
  74:	8c 91       	ld	r24, X
  76:	4c 91       	ld	r20, X
  78:	80 95       	com	r24
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	8f 70       	andi	r24, 0x0F	; 15
  7e:	90 70       	andi	r25, 0x00	; 0
  80:	9c 01       	movw	r18, r24
  82:	63 e0       	ldi	r22, 0x03	; 3
  84:	22 0f       	add	r18, r18
  86:	33 1f       	adc	r19, r19
  88:	6a 95       	dec	r22
  8a:	e1 f7       	brne	.-8      	; 0x84 <get_limit+0x26>
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	28 0f       	add	r18, r24
  92:	39 1f       	adc	r19, r25
  94:	40 95       	com	r20
  96:	42 95       	swap	r20
  98:	4f 70       	andi	r20, 0x0F	; 15
  9a:	42 0f       	add	r20, r18
  9c:	16 c0       	rjmp	.+44     	; 0xca <get_limit+0x6c>
  else
  return (((*sw_port ^ 0xFF) & 0x0F) * 10 + ((*sw_port ^ 0xFF) >> 4)) * -1 ;
  9e:	8c 91       	ld	r24, X
  a0:	4c 91       	ld	r20, X
  a2:	80 95       	com	r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	90 70       	andi	r25, 0x00	; 0
  aa:	26 ef       	ldi	r18, 0xF6	; 246
  ac:	3f ef       	ldi	r19, 0xFF	; 255
  ae:	bc 01       	movw	r22, r24
  b0:	62 9f       	mul	r22, r18
  b2:	c0 01       	movw	r24, r0
  b4:	63 9f       	mul	r22, r19
  b6:	90 0d       	add	r25, r0
  b8:	72 9f       	mul	r23, r18
  ba:	90 0d       	add	r25, r0
  bc:	11 24       	eor	r1, r1
  be:	40 95       	com	r20
  c0:	42 95       	swap	r20
  c2:	4f 70       	andi	r20, 0x0F	; 15
  c4:	78 2f       	mov	r23, r24
  c6:	74 1b       	sub	r23, r20
  c8:	47 2f       	mov	r20, r23
 }
  ca:	84 2f       	mov	r24, r20
  cc:	08 95       	ret

000000ce <check_status>:

/* Check status */

int8_t check_status (int8_t low_limit, int8_t high_limit, int8_t temperature)
 {
  if (temperature == -127) 
  ce:	41 38       	cpi	r20, 0x81	; 129
  d0:	11 f4       	brne	.+4      	; 0xd6 <check_status+0x8>
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	08 95       	ret
    return NO_SENSOR;
  else if ((low_limit>=high_limit) || ( abs(low_limit) > 99) || (abs(high_limit) > 99)) 
  d6:	86 17       	cp	r24, r22
  d8:	0c f5       	brge	.+66     	; 0x11c <check_status+0x4e>
  da:	28 2f       	mov	r18, r24
  dc:	33 27       	eor	r19, r19
  de:	27 fd       	sbrc	r18, 7
  e0:	30 95       	com	r19
  e2:	37 ff       	sbrs	r19, 7
  e4:	03 c0       	rjmp	.+6      	; 0xec <check_status+0x1e>
  e6:	30 95       	com	r19
  e8:	21 95       	neg	r18
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	24 36       	cpi	r18, 0x64	; 100
  ee:	31 05       	cpc	r19, r1
  f0:	ac f4       	brge	.+42     	; 0x11c <check_status+0x4e>
  f2:	26 2f       	mov	r18, r22
  f4:	33 27       	eor	r19, r19
  f6:	27 fd       	sbrc	r18, 7
  f8:	30 95       	com	r19
  fa:	37 ff       	sbrs	r19, 7
  fc:	03 c0       	rjmp	.+6      	; 0x104 <check_status+0x36>
  fe:	30 95       	com	r19
 100:	21 95       	neg	r18
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	24 36       	cpi	r18, 0x64	; 100
 106:	31 05       	cpc	r19, r1
 108:	4c f4       	brge	.+18     	; 0x11c <check_status+0x4e>
    return WRONG_LIMITS;
  else if (temperature < low_limit)
 10a:	48 17       	cp	r20, r24
 10c:	14 f4       	brge	.+4      	; 0x112 <check_status+0x44>
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	08 95       	ret
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	64 17       	cp	r22, r20
 116:	1c f4       	brge	.+6      	; 0x11e <check_status+0x50>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	84 e0       	ldi	r24, 0x04	; 4
    return LOW_LIMIT;
  else if (temperature > high_limit)
    return HIGH_LIMIT;
  else 
    return OK;	
 }
 11e:	08 95       	ret

00000120 <watchdog_init>:

//Watchdog initialize
// prescale: 2048K
void watchdog_init(void)
{
 wdt_reset() ; //this prevents a timeout on enabling
 120:	a8 95       	wdr
 WDTCR |= (1<<WDCE) | (1<<WDE);
 122:	81 b5       	in	r24, 0x21	; 33
 124:	88 61       	ori	r24, 0x18	; 24
 126:	81 bd       	out	0x21, r24	; 33
 WDTCR = 0x0F; //WATCHDOG ENABLED - dont forget to issue WDRs
 128:	8f e0       	ldi	r24, 0x0F	; 15
 12a:	81 bd       	out	0x21, r24	; 33
}
 12c:	08 95       	ret

0000012e <port_init>:


void port_init(void)
{
 PORTB = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
 132:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x71; 
 134:	91 e7       	ldi	r25, 0x71	; 113
 136:	95 bb       	out	0x15, r25	; 21
 DDRC  = 0x0E;
 138:	9e e0       	ldi	r25, 0x0E	; 14
 13a:	94 bb       	out	0x14, r25	; 20
 PORTD = 0xFF;
 13c:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
 13e:	11 ba       	out	0x11, r1	; 17
}
 140:	08 95       	ret

00000142 <timer0_init>:
//TIMER0 initialize - prescale:1024
// desired value: 20Hz
// actual value: 20,032Hz (0,2%)
void timer0_init(void)
{
 TCCR0 = 0x00; //stop
 142:	13 be       	out	0x33, r1	; 51
 TCNT0 = 0x3D; //set count
 144:	8d e3       	ldi	r24, 0x3D	; 61
 146:	82 bf       	out	0x32, r24	; 50
 TCCR0 = 0x05; //start timer
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	83 bf       	out	0x33, r24	; 51
}
 14c:	08 95       	ret

0000014e <timer1_init>:
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Sec
// actual value:  1,000Sec (0,0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 14e:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xF0; //setup
 150:	80 ef       	ldi	r24, 0xF0	; 240
 152:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0xBE;
 154:	8e eb       	ldi	r24, 0xBE	; 190
 156:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x0F;
 158:	9f e0       	ldi	r25, 0x0F	; 15
 15a:	9b bd       	out	0x2b, r25	; 43
 OCR1AL = 0x42;
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x0F;
 160:	99 bd       	out	0x29, r25	; 41
 OCR1BL = 0x42;
 162:	88 bd       	out	0x28, r24	; 40
 ICR1H  = 0x0F;
 164:	97 bd       	out	0x27, r25	; 39
 ICR1L  = 0x42;
 166:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0x00;
 168:	1f bc       	out	0x2f, r1	; 47
 TCCR1B = 0x05; //start Timer
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	8e bd       	out	0x2e, r24	; 46
}
 16e:	08 95       	ret

00000170 <__vector_9>:


SIGNAL(SIG_OVERFLOW0)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 //TIMER0 has overflowed
  TCNT0 = 0x3D; //reload counter value
 17e:	8d e3       	ldi	r24, 0x3D	; 61
 180:	82 bf       	out	0x32, r24	; 50

 // code executed each 0.5s (2Hz)
 // Timer owerflow interrupt 20 Hz

 uint8_t static countExt,countInt ; 
 countExt++;
 182:	90 91 64 00 	lds	r25, 0x0064
 186:	9f 5f       	subi	r25, 0xFF	; 255
 188:	90 93 64 00 	sts	0x0064, r25
 
 bit_set(sanity_check,BIT(0));
 18c:	80 91 65 00 	lds	r24, 0x0065
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 93 65 00 	sts	0x0065, r24
 
 if (countExt > 9)
 196:	9a 30       	cpi	r25, 0x0A	; 10
 198:	08 f4       	brcc	.+2      	; 0x19c <__vector_9+0x2c>
 19a:	3f c0       	rjmp	.+126    	; 0x21a <__vector_9+0xaa>
 {
 countExt = 0;
 19c:	10 92 64 00 	sts	0x0064, r1
 
 switch(status)
 1a0:	80 91 69 00 	lds	r24, 0x0069
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	a1 f0       	breq	.+40     	; 0x1d0 <__vector_9+0x60>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <__vector_9+0x46>
 1ac:	88 23       	and	r24, r24
 1ae:	01 f1       	breq	.+64     	; 0x1f0 <__vector_9+0x80>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	81 f5       	brne	.+96     	; 0x214 <__vector_9+0xa4>
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <__vector_9+0x50>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	c9 f0       	breq	.+50     	; 0x1ec <__vector_9+0x7c>
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	59 f5       	brne	.+86     	; 0x214 <__vector_9+0xa4>
 1be:	11 c0       	rjmp	.+34     	; 0x1e2 <__vector_9+0x72>
  {
  case HIGH_LIMIT:
  bit_clear(Ind_Port, BIT(LLED)); // Low limit LED off
 1c0:	aa 98       	cbi	0x15, 2	; 21
  bit_flip (Ind_Port, BIT(HLED)); // Blink high limit LED
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	98 e0       	ldi	r25, 0x08	; 8
 1c6:	89 27       	eor	r24, r25
 1c8:	85 bb       	out	0x15, r24	; 21
  if bit_get(Ind_Port, BIT(HLED))
 1ca:	ab 9b       	sbis	0x15, 3	; 21
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <__vector_9+0x78>
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__vector_9+0x6e>
     bit_set(Ind_Port, BIT(Buzzer));
	else bit_clear(Ind_Port, BIT(Buzzer));
  break;
  
  case LOW_LIMIT:
  bit_clear(Ind_Port, BIT(HLED)); // High limit LED off
 1d0:	ab 98       	cbi	0x15, 3	; 21
  bit_flip (Ind_Port, BIT(LLED)); // Blink low limit LED
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	94 e0       	ldi	r25, 0x04	; 4
 1d6:	89 27       	eor	r24, r25
 1d8:	85 bb       	out	0x15, r24	; 21
  if bit_get(Ind_Port, BIT(LLED))
 1da:	aa 9b       	sbis	0x15, 2	; 21
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <__vector_9+0x78>
     bit_set(Ind_Port, BIT(Buzzer));
 1de:	a9 9a       	sbi	0x15, 1	; 21
 1e0:	1c c0       	rjmp	.+56     	; 0x21a <__vector_9+0xaa>
	else bit_clear(Ind_Port, BIT(Buzzer));
  break;
  
  case WRONG_LIMITS :
  bit_set(Ind_Port, BIT(HLED) |BIT(LLED) ); // LED's ON
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	85 bb       	out	0x15, r24	; 21
  bit_clear(Ind_Port, BIT(Buzzer));         //  Buzzer OFF
 1e8:	a9 98       	cbi	0x15, 1	; 21
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <__vector_9+0xaa>
  break;
  
  case NO_SENSOR :
  bit_set(Ind_Port, BIT(Buzzer));         //  Buzzer ON
 1ec:	a9 9a       	sbi	0x15, 1	; 21
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <__vector_9+0x94>
     bit_set(Ind_Port, BIT(LLED));
	else bit_clear(Ind_Port, BIT(LLED));
  break;
  
  case OK :
  countInt++;
 1f0:	80 91 63 00 	lds	r24, 0x0063
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 63 00 	sts	0x0063, r24
  if (countInt>1)
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	70 f0       	brcs	.+28     	; 0x21a <__vector_9+0xaa>
   {
    countInt = 0;
 1fe:	10 92 63 00 	sts	0x0063, r1
	bit_clear(Ind_Port, BIT(Buzzer));
 202:	a9 98       	cbi	0x15, 1	; 21
	bit_flip (Ind_Port, BIT(HLED));         // Blink both LED's
 204:	85 b3       	in	r24, 0x15	; 21
 206:	98 e0       	ldi	r25, 0x08	; 8
 208:	89 27       	eor	r24, r25
 20a:	85 bb       	out	0x15, r24	; 21
    if bit_get(Ind_Port, BIT(HLED))
 20c:	ab 99       	sbic	0x15, 3	; 21
 20e:	04 c0       	rjmp	.+8      	; 0x218 <__vector_9+0xa8>
     bit_set(Ind_Port, BIT(LLED));
	else bit_clear(Ind_Port, BIT(LLED));
 210:	aa 98       	cbi	0x15, 2	; 21
 212:	03 c0       	rjmp	.+6      	; 0x21a <__vector_9+0xaa>
   }
  break;
  
  
  default:                            // should never go here
  bit_set(Ind_Port, BIT(Buzzer));
 214:	a9 9a       	sbi	0x15, 1	; 21
  bit_set(Ind_Port, BIT(HLED));
 216:	ab 9a       	sbi	0x15, 3	; 21
  bit_set(Ind_Port, BIT(LLED));
 218:	aa 9a       	sbi	0x15, 2	; 21
  }
 }
 
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_8>:



SIGNAL(SIG_OVERFLOW1)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
  //TIMER1 has overflowed
 TCNT1H = 0xF0; //reload counter high value
 236:	80 ef       	ldi	r24, 0xF0	; 240
 238:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0xBE; //reload counter low value
 23a:	8e eb       	ldi	r24, 0xBE	; 190
 23c:	8c bd       	out	0x2c, r24	; 44
 
 uint8_t static count; 
 
 count++;
 23e:	90 91 62 00 	lds	r25, 0x0062
 242:	9f 5f       	subi	r25, 0xFF	; 255
 244:	90 93 62 00 	sts	0x0062, r25
 bit_set(sanity_check,BIT(2));
 248:	80 91 65 00 	lds	r24, 0x0065
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	80 93 65 00 	sts	0x0065, r24
 
 if (count> 4)
 252:	95 30       	cpi	r25, 0x05	; 5
 254:	28 f0       	brcs	.+10     	; 0x260 <__vector_8+0x38>
  {
   check_temp = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 67 00 	sts	0x0067, r24
   count = 0;
 25c:	10 92 62 00 	sts	0x0062, r1
//   printf("Temperatura: %d \n", temperature);
  }
 
}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
 26e:	f8 94       	cli
}


void port_init(void)
{
 PORTB = 0xFF;
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	98 bb       	out	0x18, r25	; 24
 DDRB  = 0x00;
 274:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x71; 
 276:	81 e7       	ldi	r24, 0x71	; 113
 278:	85 bb       	out	0x15, r24	; 21
 DDRC  = 0x0E;
 27a:	8e e0       	ldi	r24, 0x0E	; 14
 27c:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
 27e:	92 bb       	out	0x12, r25	; 18
 DDRD  = 0x00;
 280:	11 ba       	out	0x11, r1	; 17
//TIMER0 initialize - prescale:1024
// desired value: 20Hz
// actual value: 20,032Hz (0,2%)
void timer0_init(void)
{
 TCCR0 = 0x00; //stop
 282:	13 be       	out	0x33, r1	; 51
 TCNT0 = 0x3D; //set count
 284:	8d e3       	ldi	r24, 0x3D	; 61
 286:	82 bf       	out	0x32, r24	; 50
 TCCR0 = 0x05; //start timer
 288:	25 e0       	ldi	r18, 0x05	; 5
 28a:	23 bf       	out	0x33, r18	; 51
// WGM: 0) Normal, TOP=0xFFFF
// desired value: 1Sec
// actual value:  1,000Sec (0,0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 28c:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xF0; //setup
 28e:	80 ef       	ldi	r24, 0xF0	; 240
 290:	8d bd       	out	0x2d, r24	; 45
 TCNT1L = 0xBE;
 292:	8e eb       	ldi	r24, 0xBE	; 190
 294:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x0F;
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	9b bd       	out	0x2b, r25	; 43
 OCR1AL = 0x42;
 29a:	82 e4       	ldi	r24, 0x42	; 66
 29c:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x0F;
 29e:	99 bd       	out	0x29, r25	; 41
 OCR1BL = 0x42;
 2a0:	88 bd       	out	0x28, r24	; 40
 ICR1H  = 0x0F;
 2a2:	97 bd       	out	0x27, r25	; 39
 ICR1L  = 0x42;
 2a4:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0x00;
 2a6:	1f bc       	out	0x2f, r1	; 47
 TCCR1B = 0x05; //start Timer
 2a8:	2e bd       	out	0x2e, r18	; 46

//Watchdog initialize
// prescale: 2048K
void watchdog_init(void)
{
 wdt_reset() ; //this prevents a timeout on enabling
 2aa:	a8 95       	wdr
 WDTCR |= (1<<WDCE) | (1<<WDE);
 2ac:	81 b5       	in	r24, 0x21	; 33
 2ae:	88 61       	ori	r24, 0x18	; 24
 2b0:	81 bd       	out	0x21, r24	; 33
 WDTCR = 0x0F; //WATCHDOG ENABLED - dont forget to issue WDRs
 2b2:	91 bd       	out	0x21, r25	; 33
 timer0_init();
 timer1_init();
// uart0_init();
 watchdog_init();

 MCUCR = 0x00;
 2b4:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
 2b6:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x05; //timer interrupt sources
 2b8:	29 bf       	out	0x39, r18	; 57
 sei(); //re-enable interrupts
 2ba:	78 94       	sei
 //all peripherals are now initialized

 
}
 2bc:	08 95       	ret

000002be <DS1820_ReadTemperature>:


 int8_t DS1820_ReadTemperature(uint8_t bus)
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	18 2f       	mov	r17, r24
	uint8_t tmp1;
	uint8_t tmp2;
	static uint8_t FAMILY_CODE;
    
    // Reset, presence.
    if (!OWI_DetectPresence(bus))
 2c4:	f0 d0       	rcall	.+480    	; 0x4a6 <OWI_DetectPresence>
 2c6:	88 23       	and	r24, r24
 2c8:	c1 f1       	breq	.+112    	; 0x33a <DS1820_ReadTemperature+0x7c>
    {
        return -127; // Error
    }
    // Read ROM to check family code
	OWI_SendByte(OWI_ROM_READ, bus);
 2ca:	83 e3       	ldi	r24, 0x33	; 51
 2cc:	61 2f       	mov	r22, r17
 2ce:	0c d1       	rcall	.+536    	; 0x4e8 <OWI_SendByte>
    FAMILY_CODE = OWI_ReceiveByte(bus); 
 2d0:	81 2f       	mov	r24, r17
 2d2:	20 d1       	rcall	.+576    	; 0x514 <OWI_ReceiveByte>
 2d4:	80 93 61 00 	sts	0x0061, r24
	
    if (!OWI_DetectPresence(bus))
 2d8:	81 2f       	mov	r24, r17
 2da:	e5 d0       	rcall	.+458    	; 0x4a6 <OWI_DetectPresence>
 2dc:	88 23       	and	r24, r24
 2de:	69 f1       	breq	.+90     	; 0x33a <DS1820_ReadTemperature+0x7c>
    {
        return -127; // Error
    }
    
    OWI_SendByte(OWI_ROM_SKIP, bus);
 2e0:	8c ec       	ldi	r24, 0xCC	; 204
 2e2:	61 2f       	mov	r22, r17
 2e4:	01 d1       	rcall	.+514    	; 0x4e8 <OWI_SendByte>
    // Send start conversion command.
    OWI_SendByte(OWI_START_CONVERSION, bus);
 2e6:	84 e4       	ldi	r24, 0x44	; 68
 2e8:	61 2f       	mov	r22, r17
 2ea:	fe d0       	rcall	.+508    	; 0x4e8 <OWI_SendByte>
    // Wait until conversion is finished.
    // Bus line is held low until conversion is finished.
    while (!OWI_ReadBit(bus))
 2ec:	81 2f       	mov	r24, r17
 2ee:	bd d0       	rcall	.+378    	; 0x46a <OWI_ReadBit>
 2f0:	88 23       	and	r24, r24
 2f2:	e1 f3       	breq	.-8      	; 0x2ec <DS1820_ReadTemperature+0x2e>
    {
    
    }
    // Reset, presence.
    if(!OWI_DetectPresence(bus))
 2f4:	81 2f       	mov	r24, r17
 2f6:	d7 d0       	rcall	.+430    	; 0x4a6 <OWI_DetectPresence>
 2f8:	88 23       	and	r24, r24
 2fa:	f9 f0       	breq	.+62     	; 0x33a <DS1820_ReadTemperature+0x7c>
    {
        return -127; // Error
    }
    
    OWI_SendByte(OWI_ROM_SKIP, bus);
 2fc:	8c ec       	ldi	r24, 0xCC	; 204
 2fe:	61 2f       	mov	r22, r17
 300:	f3 d0       	rcall	.+486    	; 0x4e8 <OWI_SendByte>
    // Send READ SCRATCHPAD command.
    OWI_SendByte(OWI_READ_SCRATCHPAD, bus);
 302:	8e eb       	ldi	r24, 0xBE	; 190
 304:	61 2f       	mov	r22, r17
 306:	f0 d0       	rcall	.+480    	; 0x4e8 <OWI_SendByte>
 
   // Read only two first bytes (temperature low, temperature high)
    tmp1 = OWI_ReceiveByte(bus);
 308:	81 2f       	mov	r24, r17
 30a:	04 d1       	rcall	.+520    	; 0x514 <OWI_ReceiveByte>
 30c:	08 2f       	mov	r16, r24
	tmp2 = OWI_ReceiveByte(bus);
 30e:	81 2f       	mov	r24, r17
 310:	01 d1       	rcall	.+514    	; 0x514 <OWI_ReceiveByte>
 312:	98 2f       	mov	r25, r24
	
	
	switch(FAMILY_CODE)
 314:	80 91 61 00 	lds	r24, 0x0061
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	19 f0       	breq	.+6      	; 0x322 <DS1820_ReadTemperature+0x64>
 31c:	88 32       	cpi	r24, 0x28	; 40
 31e:	69 f4       	brne	.+26     	; 0x33a <DS1820_ReadTemperature+0x7c>
 320:	05 c0       	rjmp	.+10     	; 0x32c <DS1820_ReadTemperature+0x6e>
	{
     case FAMILY_DS18S20 :
     return  ((tmp2 & 0x80) | (tmp1 >> 1)); // DS18S20
 322:	80 2f       	mov	r24, r16
 324:	86 95       	lsr	r24
 326:	90 78       	andi	r25, 0x80	; 128
 328:	89 2b       	or	r24, r25
 32a:	08 c0       	rjmp	.+16     	; 0x33c <DS1820_ReadTemperature+0x7e>
     break;
	 
	 case FAMILY_DS18B20 :
     return  ((tmp2 << 4) | (tmp1 >> 4)); // DS18B20
 32c:	89 2f       	mov	r24, r25
 32e:	82 95       	swap	r24
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	02 95       	swap	r16
 334:	0f 70       	andi	r16, 0x0F	; 15
 336:	80 2b       	or	r24, r16
 338:	01 c0       	rjmp	.+2      	; 0x33c <DS1820_ReadTemperature+0x7e>
 33a:	81 e8       	ldi	r24, 0x81	; 129
     default:                            // should never go here
     return -127; // Error
    }
    
    
}  
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <main>:


//
int main(void)
{
 init_devices();
 342:	95 df       	rcall	.-214    	; 0x26e <init_devices>
 
// stdout = &mystdout; 

// on reset all outputs set to "1".

 OWI_Init(BUSES);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	55 d0       	rcall	.+170    	; 0x3f2 <OWI_Init>
 bit_set(Ind_Port, BIT(LLED));
 348:	aa 9a       	sbi	0x15, 2	; 21
 bit_set(Ind_Port, BIT(HLED));
 34a:	ab 9a       	sbi	0x15, 3	; 21
 bit_set(Ind_Port, BIT(Buzzer));
 34c:	a9 9a       	sbi	0x15, 1	; 21

 
 while(1)
 {
     if (check_temp)
 34e:	80 91 67 00 	lds	r24, 0x0067
 352:	88 23       	and	r24, r24
 354:	09 f4       	brne	.+2      	; 0x358 <main+0x16>
 356:	44 c0       	rjmp	.+136    	; 0x3e0 <main+0x9e>
	  {
       low_limit = get_limit(&LowLimitPort,&SignPort,LLSignPin);
 358:	86 e3       	ldi	r24, 0x36	; 54
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	63 e3       	ldi	r22, 0x33	; 51
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	45 e0       	ldi	r20, 0x05	; 5
 362:	7d de       	rcall	.-774    	; 0x5e <get_limit>
 364:	80 93 68 00 	sts	0x0068, r24
       high_limit = get_limit(&HighLimitPort,&SignPort,HLSignPin); 
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	63 e3       	ldi	r22, 0x33	; 51
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	44 e0       	ldi	r20, 0x04	; 4
 372:	75 de       	rcall	.-790    	; 0x5e <get_limit>
 374:	80 93 66 00 	sts	0x0066, r24
	   temperature = DS1820_ReadTemperature(BUSES) ;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	a1 df       	rcall	.-190    	; 0x2be <DS1820_ReadTemperature>
 37c:	80 93 60 00 	sts	0x0060, r24
	   status = check_status (low_limit, high_limit,temperature);
 380:	90 91 68 00 	lds	r25, 0x0068
 384:	40 91 66 00 	lds	r20, 0x0066

/* Check status */

int8_t check_status (int8_t low_limit, int8_t high_limit, int8_t temperature)
 {
  if (temperature == -127) 
 388:	81 38       	cpi	r24, 0x81	; 129
 38a:	11 f4       	brne	.+4      	; 0x390 <main+0x4e>
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	24 c0       	rjmp	.+72     	; 0x3d8 <main+0x96>
    return NO_SENSOR;
  else if ((low_limit>=high_limit) || ( abs(low_limit) > 99) || (abs(high_limit) > 99)) 
 390:	94 17       	cp	r25, r20
 392:	0c f5       	brge	.+66     	; 0x3d6 <main+0x94>
 394:	29 2f       	mov	r18, r25
 396:	33 27       	eor	r19, r19
 398:	27 fd       	sbrc	r18, 7
 39a:	30 95       	com	r19
 39c:	37 ff       	sbrs	r19, 7
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <main+0x64>
 3a0:	30 95       	com	r19
 3a2:	21 95       	neg	r18
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	24 36       	cpi	r18, 0x64	; 100
 3a8:	31 05       	cpc	r19, r1
 3aa:	ac f4       	brge	.+42     	; 0x3d6 <main+0x94>
 3ac:	24 2f       	mov	r18, r20
 3ae:	33 27       	eor	r19, r19
 3b0:	27 fd       	sbrc	r18, 7
 3b2:	30 95       	com	r19
 3b4:	37 ff       	sbrs	r19, 7
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <main+0x7c>
 3b8:	30 95       	com	r19
 3ba:	21 95       	neg	r18
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	24 36       	cpi	r18, 0x64	; 100
 3c0:	31 05       	cpc	r19, r1
 3c2:	4c f4       	brge	.+18     	; 0x3d6 <main+0x94>
    return WRONG_LIMITS;
  else if (temperature < low_limit)
 3c4:	89 17       	cp	r24, r25
 3c6:	14 f4       	brge	.+4      	; 0x3cc <main+0x8a>
 3c8:	92 e0       	ldi	r25, 0x02	; 2
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <main+0x96>
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	48 17       	cp	r20, r24
 3d0:	1c f4       	brge	.+6      	; 0x3d8 <main+0x96>
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x96>
 3d6:	94 e0       	ldi	r25, 0x04	; 4
     if (check_temp)
	  {
       low_limit = get_limit(&LowLimitPort,&SignPort,LLSignPin);
       high_limit = get_limit(&HighLimitPort,&SignPort,HLSignPin); 
	   temperature = DS1820_ReadTemperature(BUSES) ;
	   status = check_status (low_limit, high_limit,temperature);
 3d8:	90 93 69 00 	sts	0x0069, r25
	   check_temp = 0 ;
 3dc:	10 92 67 00 	sts	0x0067, r1
	  }
    
	// watchdog

   if (sanity_check == 0x05)
 3e0:	80 91 65 00 	lds	r24, 0x0065
 3e4:	85 30       	cpi	r24, 0x05	; 5
 3e6:	09 f0       	breq	.+2      	; 0x3ea <main+0xa8>
 3e8:	b2 cf       	rjmp	.-156    	; 0x34e <main+0xc>
       {
	   wdt_reset() ;
 3ea:	a8 95       	wdr
	   sanity_check = 0 ;
 3ec:	10 92 65 00 	sts	0x0065, r1
 3f0:	ae cf       	rjmp	.-164    	; 0x34e <main+0xc>

000003f2 <OWI_Init>:
 *
 *  \param  pins    A bitmask of the buses to initialize.
 */
void OWI_Init(uint8_t pins)
{
    OWI_RELEASE_BUS(pins);
 3f2:	94 b3       	in	r25, 0x14	; 20
 3f4:	80 95       	com	r24
 3f6:	98 23       	and	r25, r24
 3f8:	94 bb       	out	0x14, r25	; 20
 3fa:	95 b3       	in	r25, 0x15	; 21
 3fc:	98 23       	and	r25, r24
 3fe:	95 bb       	out	0x15, r25	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 400:	80 ee       	ldi	r24, 0xE0	; 224
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <OWI_Init+0x12>
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    _delay_us(OWI_DELAY_H_STD_MODE);
}
 408:	08 95       	ret

0000040a <OWI_WriteBit1>:
void OWI_WriteBit1(uint8_t pins)
{
    uint8_t intState;
    
    // Disable interrupts.
    intState = SREG;
 40a:	2f b7       	in	r18, 0x3f	; 63
    cli();
 40c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 40e:	94 b3       	in	r25, 0x14	; 20
 410:	98 2b       	or	r25, r24
 412:	94 bb       	out	0x14, r25	; 20
 414:	95 b3       	in	r25, 0x15	; 21
 416:	80 95       	com	r24
 418:	98 23       	and	r25, r24
 41a:	95 bb       	out	0x15, r25	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 41c:	98 e0       	ldi	r25, 0x08	; 8
 41e:	9a 95       	dec	r25
 420:	f1 f7       	brne	.-4      	; 0x41e <OWI_WriteBit1+0x14>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 422:	94 b3       	in	r25, 0x14	; 20
 424:	98 23       	and	r25, r24
 426:	94 bb       	out	0x14, r25	; 20
 428:	95 b3       	in	r25, 0x15	; 21
 42a:	89 23       	and	r24, r25
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	85 e5       	ldi	r24, 0x55	; 85
 430:	8a 95       	dec	r24
 432:	f1 f7       	brne	.-4      	; 0x430 <OWI_WriteBit1+0x26>
    _delay_us(OWI_DELAY_B_STD_MODE);
    
    // Restore interrupts.
	SREG = intState;
 434:	2f bf       	out	0x3f, r18	; 63
    sei();
 436:	78 94       	sei
}
 438:	08 95       	ret

0000043a <OWI_WriteBit0>:
void OWI_WriteBit0(uint8_t pins)
{
    uint8_t intState;
    
    // Disable interrupts.
    intState = SREG;
 43a:	2f b7       	in	r18, 0x3f	; 63
    cli();
 43c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 43e:	94 b3       	in	r25, 0x14	; 20
 440:	98 2b       	or	r25, r24
 442:	94 bb       	out	0x14, r25	; 20
 444:	95 b3       	in	r25, 0x15	; 21
 446:	80 95       	com	r24
 448:	98 23       	and	r25, r24
 44a:	95 bb       	out	0x15, r25	; 21
 44c:	90 e5       	ldi	r25, 0x50	; 80
 44e:	9a 95       	dec	r25
 450:	f1 f7       	brne	.-4      	; 0x44e <OWI_WriteBit0+0x14>
    _delay_us(OWI_DELAY_C_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 452:	94 b3       	in	r25, 0x14	; 20
 454:	98 23       	and	r25, r24
 456:	94 bb       	out	0x14, r25	; 20
 458:	95 b3       	in	r25, 0x15	; 21
 45a:	89 23       	and	r24, r25
 45c:	85 bb       	out	0x15, r24	; 21
 45e:	8d e0       	ldi	r24, 0x0D	; 13
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
    _delay_us(OWI_DELAY_D_STD_MODE);
    
    // Restore interrupts.
   SREG = intState;
 464:	2f bf       	out	0x3f, r18	; 63
    sei();
 466:	78 94       	sei
}
 468:	08 95       	ret

0000046a <OWI_ReadBit>:
{
    uint8_t intState;
    uint8_t bitsRead;
    
    // Disable interrupts.
    intState = SREG;
 46a:	3f b7       	in	r19, 0x3f	; 63
    cli();
 46c:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 46e:	94 b3       	in	r25, 0x14	; 20
 470:	98 2b       	or	r25, r24
 472:	94 bb       	out	0x14, r25	; 20
 474:	95 b3       	in	r25, 0x15	; 21
 476:	28 2f       	mov	r18, r24
 478:	20 95       	com	r18
 47a:	92 23       	and	r25, r18
 47c:	95 bb       	out	0x15, r25	; 21
 47e:	98 e0       	ldi	r25, 0x08	; 8
 480:	9a 95       	dec	r25
 482:	f1 f7       	brne	.-4      	; 0x480 <OWI_ReadBit+0x16>
    _delay_us(OWI_DELAY_A_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 484:	94 b3       	in	r25, 0x14	; 20
 486:	92 23       	and	r25, r18
 488:	94 bb       	out	0x14, r25	; 20
 48a:	95 b3       	in	r25, 0x15	; 21
 48c:	29 23       	and	r18, r25
 48e:	25 bb       	out	0x15, r18	; 21
 490:	9c e0       	ldi	r25, 0x0C	; 12
 492:	9a 95       	dec	r25
 494:	f1 f7       	brne	.-4      	; 0x492 <OWI_ReadBit+0x28>
    _delay_us(OWI_DELAY_E_STD_MODE);
    
    // Sample bus and delay.
    bitsRead = OWI_PIN & pins;
 496:	93 b3       	in	r25, 0x13	; 19
 498:	29 e4       	ldi	r18, 0x49	; 73
 49a:	2a 95       	dec	r18
 49c:	f1 f7       	brne	.-4      	; 0x49a <OWI_ReadBit+0x30>
    _delay_us(OWI_DELAY_F_STD_MODE);
    
    // Restore interrupts.
   SREG = intState;
 49e:	3f bf       	out	0x3f, r19	; 63
    sei();
 4a0:	78 94       	sei
    
    return bitsRead;
}
 4a2:	89 23       	and	r24, r25
 4a4:	08 95       	ret

000004a6 <OWI_DetectPresence>:
{
    uint8_t intState;
    uint8_t presenceDetected;
    
    // Disable interrupts.
    intState = SREG;
 4a6:	3f b7       	in	r19, 0x3f	; 63
    cli();
 4a8:	f8 94       	cli
    
    // Drive bus low and delay.
    OWI_PULL_BUS_LOW(pins);
 4aa:	94 b3       	in	r25, 0x14	; 20
 4ac:	98 2b       	or	r25, r24
 4ae:	94 bb       	out	0x14, r25	; 20
 4b0:	95 b3       	in	r25, 0x15	; 21
 4b2:	28 2f       	mov	r18, r24
 4b4:	20 95       	com	r18
 4b6:	92 23       	and	r25, r18
 4b8:	95 bb       	out	0x15, r25	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4ba:	e0 ee       	ldi	r30, 0xE0	; 224
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <OWI_DetectPresence+0x18>
    _delay_us(OWI_DELAY_H_STD_MODE);
    
    // Release bus and delay.
    OWI_RELEASE_BUS(pins);
 4c2:	94 b3       	in	r25, 0x14	; 20
 4c4:	92 23       	and	r25, r18
 4c6:	94 bb       	out	0x14, r25	; 20
 4c8:	95 b3       	in	r25, 0x15	; 21
 4ca:	29 23       	and	r18, r25
 4cc:	25 bb       	out	0x15, r18	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4ce:	9d e5       	ldi	r25, 0x5D	; 93
 4d0:	9a 95       	dec	r25
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <OWI_DetectPresence+0x2a>
    _delay_us(OWI_DELAY_I_STD_MODE);
    
    // Sample bus to detect presence signal and delay.
    presenceDetected = ((~OWI_PIN) & pins);
 4d4:	93 b3       	in	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4d6:	ea e9       	ldi	r30, 0x9A	; 154
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <OWI_DetectPresence+0x34>
    _delay_us(OWI_DELAY_J_STD_MODE);
    
    // Restore interrupts.
	SREG = intState;
 4de:	3f bf       	out	0x3f, r19	; 63
    sei();
 4e0:	78 94       	sei
 4e2:	90 95       	com	r25
    
    return presenceDetected;
}
 4e4:	89 23       	and	r24, r25
 4e6:	08 95       	ret

000004e8 <OWI_SendByte>:
 *  \param  data    The data to send on the bus(es).
 *  
 *  \param  pins    A bitmask of the buses to send the data to.
 */
void OWI_SendByte(uint8_t data, uint8_t pins)
{
 4e8:	ff 92       	push	r15
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	08 2f       	mov	r16, r24
 4f0:	f6 2e       	mov	r15, r22
 4f2:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < 8; i++)
    {
        // Determine if lsb is '0' or '1' and transmit corresponding
        // waveform on the bus.
        temp = data & 0x01;
        if (temp)
 4f4:	00 ff       	sbrs	r16, 0
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <OWI_SendByte+0x16>
        {
            OWI_WriteBit1(pins);
 4f8:	8f 2d       	mov	r24, r15
 4fa:	87 df       	rcall	.-242    	; 0x40a <OWI_WriteBit1>
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <OWI_SendByte+0x1a>
        }
        else
        {
            OWI_WriteBit0(pins);
 4fe:	8f 2d       	mov	r24, r15
 500:	9c df       	rcall	.-200    	; 0x43a <OWI_WriteBit0>
{
    uint8_t temp;
    uint8_t i;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
 502:	1f 5f       	subi	r17, 0xFF	; 255
 504:	18 30       	cpi	r17, 0x08	; 8
 506:	11 f0       	breq	.+4      	; 0x50c <OWI_SendByte+0x24>
        else
        {
            OWI_WriteBit0(pins);
        }
        // Right shift the data to get next bit.
        data >>= 1;
 508:	06 95       	lsr	r16
 50a:	f4 cf       	rjmp	.-24     	; 0x4f4 <OWI_SendByte+0xc>
    }
}
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	ff 90       	pop	r15
 512:	08 95       	ret

00000514 <OWI_ReceiveByte>:
 *  \param  pin     A bitmask of the bus to read from.
 *  
 *  \return     The byte read from the bus.
 */
uint8_t OWI_ReceiveByte(uint8_t pin)
{
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	f8 2e       	mov	r15, r24
 51c:	10 e0       	ldi	r17, 0x00	; 0
 51e:	00 e0       	ldi	r16, 0x00	; 0
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
    {
        // Shift temporary input variable right.
        data >>= 1;
 520:	16 95       	lsr	r17
        // Set the msb if a '1' value is read from the bus.
        // Leave as it is ('0') else.
        if (OWI_ReadBit(pin))
 522:	8f 2d       	mov	r24, r15
 524:	a2 df       	rcall	.-188    	; 0x46a <OWI_ReadBit>
 526:	81 11       	cpse	r24, r1
        {
            // Set msb
            data |= 0x80;
 528:	10 68       	ori	r17, 0x80	; 128

    // Clear the temporary input variable.
    data = 0x00;
    
    // Do once for each bit
    for (i = 0; i < 8; i++)
 52a:	0f 5f       	subi	r16, 0xFF	; 255
 52c:	08 30       	cpi	r16, 0x08	; 8
 52e:	c1 f7       	brne	.-16     	; 0x520 <OWI_ReceiveByte+0xc>
            // Set msb
            data |= 0x80;
        }
    }
    return data;
}
 530:	81 2f       	mov	r24, r17
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	08 95       	ret

0000053a <OWI_SkipRom>:
/*! \brief  Sends the SKIP ROM command to the 1-Wire bus(es).
 *
 *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
 */
void OWI_SkipRom(uint8_t pins)
{
 53a:	68 2f       	mov	r22, r24
    // Send the SKIP ROM command on the bus.
    OWI_SendByte(OWI_ROM_SKIP, pins);
 53c:	8c ec       	ldi	r24, 0xCC	; 204
 53e:	d4 df       	rcall	.-88     	; 0x4e8 <OWI_SendByte>
}
 540:	08 95       	ret

00000542 <OWI_ReadRom>:
 *  \param  romValue    A pointer where the id will be placed.
 *
 *  \param  pin     A bitmask of the bus to read from.
 */
void OWI_ReadRom(uint8_t * romValue, uint8_t pin)
{
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	06 2f       	mov	r16, r22
    uint8_t bytesLeft = 8;

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
 54e:	83 e3       	ldi	r24, 0x33	; 51
 550:	cb df       	rcall	.-106    	; 0x4e8 <OWI_SendByte>
 552:	18 e0       	ldi	r17, 0x08	; 8
    
    // Do 8 times.
    while (bytesLeft > 0)
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
 554:	80 2f       	mov	r24, r16
 556:	de df       	rcall	.-68     	; 0x514 <OWI_ReceiveByte>
 558:	89 93       	st	Y+, r24
        bytesLeft--;
 55a:	11 50       	subi	r17, 0x01	; 1

    // Send the READ ROM command on the bus.
    OWI_SendByte(OWI_ROM_READ, pin);
    
    // Do 8 times.
    while (bytesLeft > 0)
 55c:	d9 f7       	brne	.-10     	; 0x554 <OWI_ReadRom+0x12>
    {
        // Place the received data in memory.
        *romValue++ = OWI_ReceiveByte(pin);
        bytesLeft--;
    }
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	08 95       	ret

00000568 <OWI_ComputeCRC8>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC8 value of a
 *          longer string of data.
 */
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
 568:	28 2f       	mov	r18, r24
 56a:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
 56c:	38 e1       	ldi	r19, 0x18	; 24
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 56e:	86 2f       	mov	r24, r22
 570:	82 27       	eor	r24, r18
 572:	80 fd       	sbrc	r24, 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <OWI_ComputeCRC8+0x12>
        {
            seed >>= 1;
 576:	66 95       	lsr	r22
 578:	03 c0       	rjmp	.+6      	; 0x580 <OWI_ComputeCRC8+0x18>
        }
        else
        {
            seed ^= 0x18;
 57a:	63 27       	eor	r22, r19
            seed >>= 1;
 57c:	66 95       	lsr	r22
            seed |= 0x80;
 57e:	60 68       	ori	r22, 0x80	; 128
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 580:	91 50       	subi	r25, 0x01	; 1
 582:	11 f0       	breq	.+4      	; 0x588 <OWI_ComputeCRC8+0x20>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
 584:	26 95       	lsr	r18
 586:	f3 cf       	rjmp	.-26     	; 0x56e <OWI_ComputeCRC8+0x6>
    }
    return seed;    
}
 588:	86 2f       	mov	r24, r22
 58a:	08 95       	ret

0000058c <OWI_ComputeCRC16>:
 *  \note   Constantly passing the return value of this function 
 *          As the seed argument computes the CRC16 value of a
 *          longer string of data.
 */
uint16_t OWI_ComputeCRC16(uint8_t inData, uint16_t seed)
{
 58c:	28 2f       	mov	r18, r24
 58e:	98 e0       	ldi	r25, 0x08	; 8
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x4002;
 590:	42 e0       	ldi	r20, 0x02	; 2
 592:	50 e4       	ldi	r21, 0x40	; 64
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 594:	82 2f       	mov	r24, r18
 596:	86 27       	eor	r24, r22
 598:	80 fd       	sbrc	r24, 0
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <OWI_ComputeCRC16+0x16>
        {
            seed >>= 1;
 59c:	76 95       	lsr	r23
 59e:	67 95       	ror	r22
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <OWI_ComputeCRC16+0x20>
        }
        else
        {
            seed ^= 0x4002;
 5a2:	64 27       	eor	r22, r20
 5a4:	75 27       	eor	r23, r21
            seed >>= 1;
 5a6:	76 95       	lsr	r23
 5a8:	67 95       	ror	r22
            seed |= 0x8000;
 5aa:	70 68       	ori	r23, 0x80	; 128
uint16_t OWI_ComputeCRC16(uint8_t inData, uint16_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 5ac:	91 50       	subi	r25, 0x01	; 1
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <OWI_ComputeCRC16+0x28>
        {
            seed ^= 0x4002;
            seed >>= 1;
            seed |= 0x8000;
        }
        inData >>= 1;
 5b0:	26 95       	lsr	r18
 5b2:	f0 cf       	rjmp	.-32     	; 0x594 <OWI_ComputeCRC16+0x8>
    }
    return seed;    
}
 5b4:	cb 01       	movw	r24, r22
 5b6:	08 95       	ret

000005b8 <OWI_CheckRomCRC>:
 *
 *  \retval OWI_CRC_OK      The CRC's matched.
 *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
 */
uint8_t OWI_CheckRomCRC(uint8_t * romValue)
{
 5b8:	dc 01       	movw	r26, r24
 5ba:	fc 01       	movw	r30, r24
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	20 e0       	ldi	r18, 0x00	; 0
        {
            seed >>= 1;
        }
        else
        {
            seed ^= 0x18;
 5c0:	58 e1       	ldi	r21, 0x18	; 24
    uint8_t i;
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
 5c2:	30 81       	ld	r19, Z
 5c4:	98 e0       	ldi	r25, 0x08	; 8
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
    {
        temp = ((seed ^ inData) & 0x01);
        if (temp == 0)
 5c6:	83 2f       	mov	r24, r19
 5c8:	82 27       	eor	r24, r18
 5ca:	80 fd       	sbrc	r24, 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <OWI_CheckRomCRC+0x1a>
        {
            seed >>= 1;
 5ce:	26 95       	lsr	r18
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <OWI_CheckRomCRC+0x20>
        }
        else
        {
            seed ^= 0x18;
 5d2:	25 27       	eor	r18, r21
            seed >>= 1;
            seed |= 0x80;
 5d4:	26 95       	lsr	r18
 5d6:	20 68       	ori	r18, 0x80	; 128
uint8_t OWI_ComputeCRC8(uint8_t inData, uint8_t seed)
{
    uint8_t bitsLeft;
    uint8_t temp;

    for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	11 f0       	breq	.+4      	; 0x5e0 <OWI_CheckRomCRC+0x28>
        {
            seed ^= 0x18;
            seed >>= 1;
            seed |= 0x80;
        }
        inData >>= 1;
 5dc:	36 95       	lsr	r19
 5de:	f3 cf       	rjmp	.-26     	; 0x5c6 <OWI_CheckRomCRC+0xe>
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
    {
        crc8 = OWI_ComputeCRC8(*romValue, crc8);
        romValue++;
 5e0:	31 96       	adiw	r30, 0x01	; 1
uint8_t OWI_CheckRomCRC(uint8_t * romValue)
{
    uint8_t i;
    uint8_t crc8 = 0;
    
    for (i = 0; i < 7; i++)
 5e2:	4f 5f       	subi	r20, 0xFF	; 255
 5e4:	47 30       	cpi	r20, 0x07	; 7
 5e6:	69 f7       	brne	.-38     	; 0x5c2 <OWI_CheckRomCRC+0xa>
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	17 96       	adiw	r26, 0x07	; 7
 5ec:	8c 91       	ld	r24, X
 5ee:	28 13       	cpse	r18, r24
 5f0:	91 e0       	ldi	r25, 0x01	; 1
    if (crc8 == (*romValue))
    {
        return OWI_CRC_OK;
    }
    return OWI_CRC_ERROR;
}
 5f2:	89 2f       	mov	r24, r25
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
