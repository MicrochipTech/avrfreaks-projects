LED Matrix Project
Over View
This project is an example of one way to work with matrix leds on a microcontroller. 
This document covers only the display and code parts of the project.  I tried to make it generic enough that the rest of the hardware is not too important.  I use the Mega32, but any suitable micro can be substituted.
The display is composed of 4 8x8 led matrixes, 4 MAX7219 led controllers, 4 resistors to set overall brightness, and some caps for power filtering.
The 7219s are listed as drivers for 8 7-segment displays with decimal point, but they work equally well for driving up to 64 leds directly.  One of the main advantages of these chips is that they handle all of the display multiplexing so the required code is much simpler to deal with.  All you have to do is tell the chip what you want to display once and then the micro can ignore the display.  With most matrix displays of this type, the micro is kept busy with refreshing the display one line or one column at a time, but I like the idea of letting hardware take care of as much as possible.
I also have hooked the 7219s up different than most people would do.  These chips can be cascaded together by hooking all of the clock and load lines together, and tying the data-out pin to the data-in pin of the next chip in the chain.  But the code is more complicated, as more data must be sent to keep things in sync.  I have opted to use a separate load control line for each chip, and tie all of the data-in and clock lines together.  With this setup, I can control any column of the display with a single output operation, one entire 8x8 matrix with 8 instructions and I can update the entire display with 32 output operations.
Physically, there are 4 separate displays arranged in a 2x2 square.  This is 16 leds wide by 16 leds high for a total of 256 leds.  Any single led can be controlled with one command sent to the appropriate 7219.
The software is designed to see the display in a couple of different ways.  I can treat it as a display 16 columns wide by 16 rows high, or as 4 displays of 8x8.

The Hardware
The schematic, such as it is, is shown in 7219_LED.jpg.  Red8x8x4.jpg is the layout of the leds on the display.  Display_Front.jpg is an actual photo of the front of the board while Display_Back.jpg is, you guessed it, the back of the display.  Controller.jpg, while not an actual part of the display, is the controller board I designed and use with most of my AVR projects.  On the back of the display, you can see 3 capacitors that are needed for power filtering.   Leaving the caps off can cause your display to behave in strange ways.  On my setup, before I included the caps, the display would work fine for a while, and then one or more of the display would quit responding to the controller, or they would display garbage at random locations.  The values of the caps are not real critical, but should be big enough to provide filtering for the power supply when the chips and leds are pulling much current.  At the bottom of the back is a standard STK500 10-pin header for getting power and signals to the display board.  This project requires +5v, ground and 6 control signals from the micro for operation.  Also visible on the back, next to each ic, is the 10k resister for setting the current for each matrix.  This board doesn’t look great, but I prefer to use a combination of wire-wrap and point-to-point when I’m building a project.  

The Software
The code for this project is written with gcc and targeted to the AVR Mega32, but should be transferable to most other processors with minimal effort.  
I am definitely NOT a c programmer, but I’m learning.  The code does work, but if anyone has any suggestions to make to improve it, they would be received with great appreciation.  I believe that making use of pointers would probably improve the speed and efficiency of the display routines, but again, I’m not real good with c yet, and don’t know how to go about rewriting the code.

The main file is Matrix.c.  It performs some initialization, display my name with several transition effects, and then plays Conways Game of Life until reset.
Most of the code should be fairly straight forward, but if there are any questions, feel free to ask.

There are 2 font files included.  One for a 5x7 font and one for a 3x5 font, but only the 5x7 font is currently supported.
I am currently working on rewriting the code that handles the display of characters, and will make it available as soon as I have it done.  The new code will support both fonts and provide better positional control.

I will update this document and provide new code as I get the time.