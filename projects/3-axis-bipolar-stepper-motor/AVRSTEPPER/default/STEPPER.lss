
STEPPER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800064  00800064  0000031c  2**0
                  ALLOC
  3 .stab         0000036c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000017a  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000039a  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000db  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000362  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e2  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000090  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	2a c0       	rjmp	.+84     	; 0x6c <__bad_interrupt>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>

0000001a <STEPS_FULL_TABLE>:
  1a:	20 24 04 00                                          $..

0000001e <STEPS_HALF_TABLE>:
  1e:	03 09 38 29 27 2d 1c 0c                             ..8)'-..

00000026 <STEPS_TABLE>:
  26:	03 02 09 10 38 30 29 22 27 26 2d 34 1c 14 0c 06     ....80)"'&-4....

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d2 e0       	ldi	r29, 0x02	; 2
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e4 e8       	ldi	r30, 0x84	; 132
  4a:	f2 e0       	ldi	r31, 0x02	; 2
  4c:	03 c0       	rjmp	.+6      	; 0x54 <.do_copy_data_start>

0000004e <.do_copy_data_loop>:
  4e:	c8 95       	lpm
  50:	31 96       	adiw	r30, 0x01	; 1
  52:	0d 92       	st	X+, r0

00000054 <.do_copy_data_start>:
  54:	a4 36       	cpi	r26, 0x64	; 100
  56:	b1 07       	cpc	r27, r17
  58:	d1 f7       	brne	.-12     	; 0x4e <.do_copy_data_loop>

0000005a <__do_clear_bss>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	a4 e6       	ldi	r26, 0x64	; 100
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	01 c0       	rjmp	.+2      	; 0x64 <.do_clear_bss_start>

00000062 <.do_clear_bss_loop>:
  62:	1d 92       	st	X+, r1

00000064 <.do_clear_bss_start>:
  64:	ab 36       	cpi	r26, 0x6B	; 107
  66:	b1 07       	cpc	r27, r17
  68:	e1 f7       	brne	.-8      	; 0x62 <.do_clear_bss_loop>
  6a:	eb c0       	rjmp	.+470    	; 0x242 <main>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <StartUp>:
	return 0;
}

//---------------------------------------------------------------------------------
void StartUp(void){
  6e:	8f e3       	ldi	r24, 0x3F	; 63
  70:	81 bb       	out	0x11, r24	; 17

	CONFIG_X_MOTOR = 0x3F;	//PORT D MOTOR X Control(output) & STEP-DIR(input)
	PORT_X_MOTOR = 0x00;
  72:	12 ba       	out	0x12, r1	; 18

	CONFIG_Y_MOTOR = 0x3F;	//PORT A MOTOR Y Control(output) & STEP-DIR(input)
  74:	8a bb       	out	0x1a, r24	; 26
	PORT_Y_MOTOR = 0x00;
  76:	1b ba       	out	0x1b, r1	; 27

	CONFIG_Z_MOTOR = 0x3F;	//PORT C MOTOR Z Control(output) & STEP-DIR(input)
  78:	84 bb       	out	0x14, r24	; 20
	PORT_Z_MOTOR = 0x00;
  7a:	15 ba       	out	0x15, r1	; 21

	PORT_X_MOTOR = STOP_MOTOR;
  7c:	8b e1       	ldi	r24, 0x1B	; 27
  7e:	82 bb       	out	0x12, r24	; 18
	PORT_Y_MOTOR = STOP_MOTOR;
  80:	8b bb       	out	0x1b, r24	; 27
	PORT_Z_MOTOR = STOP_MOTOR;
  82:	85 bb       	out	0x15, r24	; 21

	TIMSK = 0x00;	//Disable Interrups Timers
  84:	19 be       	out	0x39, r1	; 57

	//Definir el modo de trabajo
	//MICRO (800pasos/Vuelta)
	StepTablePtr = STEPS_TABLE;
  86:	86 e2       	ldi	r24, 0x26	; 38
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	90 93 68 00 	sts	0x0068, r25
  8e:	80 93 67 00 	sts	0x0067, r24
	TopSteps = TOP_STEPS;
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	80 93 69 00 	sts	0x0069, r24
	BottomSteps = BOTTOM_STEPS;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 93 6a 00 	sts	0x006A, r24
	FirstSteps = FIRST_STEP;
  9e:	10 92 66 00 	sts	0x0066, r1
	LastSteps = LAST_STEP;
  a2:	8f e0       	ldi	r24, 0x0F	; 15
  a4:	80 93 65 00 	sts	0x0065, r24
  a8:	08 95       	ret

000000aa <SPK_xMoveStepForward>:

	//HALF (400pasos/Vuelta)
	//StepTablePtr = STEPS_HALF_TABLE;
	//TopSteps = H_TOP_STEPS;
	//BottomSteps = H_BOTTOM_STEPS;
	//FirstSteps = H_FIRST_STEP;
	//LastSteps = H_LAST_STEP;

	//FULL (200pasos/Vuelta)
	//StepTablePtr = STEPS_FULL_TABLE;
	//TopSteps = F_TOP_STEPS;
	//BottomSteps = F_BOTTOM_STEPS;
	//FirstSteps = F_FIRST_STEP;
	//LastSteps = F_LAST_STEP;
}

//----------------------------------------------------------------------------
//	SPK_xMoveStepForward
//----------------------------------------------------------------------------
void SPK_xMoveStepForward(void)
{
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 60 00 	sts	0x0060, r24
	LastXStep++;

	if (LastXStep == TopSteps)
  b4:	90 91 60 00 	lds	r25, 0x0060
  b8:	80 91 69 00 	lds	r24, 0x0069
  bc:	98 17       	cp	r25, r24
  be:	21 f4       	brne	.+8      	; 0xc8 <SPK_xMoveStepForward+0x1e>
		LastXStep = FirstSteps;
  c0:	80 91 66 00 	lds	r24, 0x0066
  c4:	80 93 60 00 	sts	0x0060, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastXStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastXStep]);
  c8:	80 91 60 00 	lds	r24, 0x0060
  cc:	e0 91 67 00 	lds	r30, 0x0067
  d0:	f0 91 68 00 	lds	r31, 0x0068
  d4:	e8 0f       	add	r30, r24
  d6:	f1 1d       	adc	r31, r1
  d8:	c8 95       	lpm
  da:	80 2d       	mov	r24, r0
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	c8 95       	lpm
  e0:	90 2d       	mov	r25, r0
  e2:	80 93 64 00 	sts	0x0064, r24
	
	PORT_X_MOTOR = StepValue;
  e6:	80 91 64 00 	lds	r24, 0x0064
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret

000000ee <SPK_xMoveStepReverse>:

}

//----------------------------------------------------------------------------
//	SPK_xMoveStepReverse
//----------------------------------------------------------------------------
void SPK_xMoveStepReverse(void)
{
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	80 93 60 00 	sts	0x0060, r24
	LastXStep--;

	if (LastXStep == BottomSteps)
  f8:	90 91 60 00 	lds	r25, 0x0060
  fc:	80 91 6a 00 	lds	r24, 0x006A
 100:	98 17       	cp	r25, r24
 102:	21 f4       	brne	.+8      	; 0x10c <SPK_xMoveStepReverse+0x1e>
		LastXStep = LastSteps;
 104:	80 91 65 00 	lds	r24, 0x0065
 108:	80 93 60 00 	sts	0x0060, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastXStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastXStep]);
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	e0 91 67 00 	lds	r30, 0x0067
 114:	f0 91 68 00 	lds	r31, 0x0068
 118:	e8 0f       	add	r30, r24
 11a:	f1 1d       	adc	r31, r1
 11c:	c8 95       	lpm
 11e:	80 2d       	mov	r24, r0
 120:	31 96       	adiw	r30, 0x01	; 1
 122:	c8 95       	lpm
 124:	90 2d       	mov	r25, r0
 126:	80 93 64 00 	sts	0x0064, r24
	
	PORT_X_MOTOR = StepValue;
 12a:	80 91 64 00 	lds	r24, 0x0064
 12e:	82 bb       	out	0x12, r24	; 18
 130:	08 95       	ret

00000132 <SPK_yMoveStepForward>:
}

//----------------------------------------------------------------------------
//	SPK_yMoveStepForward
//----------------------------------------------------------------------------
void SPK_yMoveStepForward(void)
{
 132:	80 91 61 00 	lds	r24, 0x0061
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 61 00 	sts	0x0061, r24
	LastYStep++;

	if (LastYStep == TopSteps)
 13c:	90 91 61 00 	lds	r25, 0x0061
 140:	80 91 69 00 	lds	r24, 0x0069
 144:	98 17       	cp	r25, r24
 146:	21 f4       	brne	.+8      	; 0x150 <SPK_yMoveStepForward+0x1e>
		LastYStep = FirstSteps;
 148:	80 91 66 00 	lds	r24, 0x0066
 14c:	80 93 61 00 	sts	0x0061, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastYStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastYStep]);
 150:	80 91 61 00 	lds	r24, 0x0061
 154:	e0 91 67 00 	lds	r30, 0x0067
 158:	f0 91 68 00 	lds	r31, 0x0068
 15c:	e8 0f       	add	r30, r24
 15e:	f1 1d       	adc	r31, r1
 160:	c8 95       	lpm
 162:	80 2d       	mov	r24, r0
 164:	31 96       	adiw	r30, 0x01	; 1
 166:	c8 95       	lpm
 168:	90 2d       	mov	r25, r0
 16a:	80 93 64 00 	sts	0x0064, r24
	
	PORT_Y_MOTOR = StepValue;
 16e:	80 91 64 00 	lds	r24, 0x0064
 172:	8b bb       	out	0x1b, r24	; 27
 174:	08 95       	ret

00000176 <SPK_yMoveStepReverse>:

}

//----------------------------------------------------------------------------
//	SPK_yMoveStepReverse
//----------------------------------------------------------------------------
void SPK_yMoveStepReverse(void)
{
 176:	80 91 61 00 	lds	r24, 0x0061
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	80 93 61 00 	sts	0x0061, r24
	LastYStep--;

	if (LastYStep == BottomSteps)
 180:	90 91 61 00 	lds	r25, 0x0061
 184:	80 91 6a 00 	lds	r24, 0x006A
 188:	98 17       	cp	r25, r24
 18a:	21 f4       	brne	.+8      	; 0x194 <SPK_yMoveStepReverse+0x1e>
		LastYStep = LastSteps;
 18c:	80 91 65 00 	lds	r24, 0x0065
 190:	80 93 61 00 	sts	0x0061, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastYStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastYStep]);
 194:	80 91 61 00 	lds	r24, 0x0061
 198:	e0 91 67 00 	lds	r30, 0x0067
 19c:	f0 91 68 00 	lds	r31, 0x0068
 1a0:	e8 0f       	add	r30, r24
 1a2:	f1 1d       	adc	r31, r1
 1a4:	c8 95       	lpm
 1a6:	80 2d       	mov	r24, r0
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	c8 95       	lpm
 1ac:	90 2d       	mov	r25, r0
 1ae:	80 93 64 00 	sts	0x0064, r24
	
	PORT_Y_MOTOR = StepValue;
 1b2:	80 91 64 00 	lds	r24, 0x0064
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	08 95       	ret

000001ba <SPK_zMoveStepForward>:
}

//----------------------------------------------------------------------------
//	SPK_zMoveStepForward
//----------------------------------------------------------------------------
void SPK_zMoveStepForward(void)
{
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 62 00 	sts	0x0062, r24
	LastZStep++;

	if (LastZStep == TopSteps)
 1c4:	90 91 62 00 	lds	r25, 0x0062
 1c8:	80 91 69 00 	lds	r24, 0x0069
 1cc:	98 17       	cp	r25, r24
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <SPK_zMoveStepForward+0x1e>
		LastZStep = FirstSteps;
 1d0:	80 91 66 00 	lds	r24, 0x0066
 1d4:	80 93 62 00 	sts	0x0062, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastZStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastZStep]);
 1d8:	80 91 62 00 	lds	r24, 0x0062
 1dc:	e0 91 67 00 	lds	r30, 0x0067
 1e0:	f0 91 68 00 	lds	r31, 0x0068
 1e4:	e8 0f       	add	r30, r24
 1e6:	f1 1d       	adc	r31, r1
 1e8:	c8 95       	lpm
 1ea:	80 2d       	mov	r24, r0
 1ec:	31 96       	adiw	r30, 0x01	; 1
 1ee:	c8 95       	lpm
 1f0:	90 2d       	mov	r25, r0
 1f2:	80 93 64 00 	sts	0x0064, r24
	
	PORT_Z_MOTOR = StepValue;
 1f6:	80 91 64 00 	lds	r24, 0x0064
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	08 95       	ret

000001fe <SPK_zMoveStepReverse>:

}

//----------------------------------------------------------------------------
//	SPK_xMoveStepReverse
//----------------------------------------------------------------------------
void SPK_zMoveStepReverse(void)
{
 1fe:	80 91 62 00 	lds	r24, 0x0062
 202:	81 50       	subi	r24, 0x01	; 1
 204:	80 93 62 00 	sts	0x0062, r24
	LastZStep--;

	if (LastZStep == BottomSteps)
 208:	90 91 62 00 	lds	r25, 0x0062
 20c:	80 91 6a 00 	lds	r24, 0x006A
 210:	98 17       	cp	r25, r24
 212:	21 f4       	brne	.+8      	; 0x21c <SPK_zMoveStepReverse+0x1e>
		LastZStep = LastSteps;
 214:	80 91 65 00 	lds	r24, 0x0065
 218:	80 93 62 00 	sts	0x0062, r24

//	StepValue = pgm_read_word(&STEPS_TABLE[LastZStep]);
	StepValue = pgm_read_word(&StepTablePtr[LastZStep]);
 21c:	80 91 62 00 	lds	r24, 0x0062
 220:	e0 91 67 00 	lds	r30, 0x0067
 224:	f0 91 68 00 	lds	r31, 0x0068
 228:	e8 0f       	add	r30, r24
 22a:	f1 1d       	adc	r31, r1
 22c:	c8 95       	lpm
 22e:	80 2d       	mov	r24, r0
 230:	31 96       	adiw	r30, 0x01	; 1
 232:	c8 95       	lpm
 234:	90 2d       	mov	r25, r0
 236:	80 93 64 00 	sts	0x0064, r24
	
	PORT_Z_MOTOR = StepValue;
 23a:	80 91 64 00 	lds	r24, 0x0064
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret

00000242 <main>:
 242:	15 df       	rcall	.-470    	; 0x6e <StartUp>
 244:	87 99       	sbic	0x10, 7	; 16
 246:	0b c0       	rjmp	.+22     	; 0x25e <main+0x1c>
 248:	cf 99       	sbic	0x19, 7	; 25
 24a:	10 c0       	rjmp	.+32     	; 0x26c <__stack+0xd>
 24c:	9f 9b       	sbis	0x13, 7	; 19
 24e:	fa cf       	rjmp	.-12     	; 0x244 <main+0x2>
 250:	9f 99       	sbic	0x13, 7	; 19
 252:	fe cf       	rjmp	.-4      	; 0x250 <main+0xe>
 254:	9e 99       	sbic	0x13, 6	; 19
 256:	14 c0       	rjmp	.+40     	; 0x280 <__stack+0x21>
 258:	d2 df       	rcall	.-92     	; 0x1fe <SPK_zMoveStepReverse>
 25a:	87 9b       	sbis	0x10, 7	; 16
 25c:	f5 cf       	rjmp	.-22     	; 0x248 <main+0x6>
 25e:	87 99       	sbic	0x10, 7	; 16
 260:	fe cf       	rjmp	.-4      	; 0x25e <main+0x1c>
 262:	86 9b       	sbis	0x10, 6	; 16
 264:	0b c0       	rjmp	.+22     	; 0x27c <__stack+0x1d>
 266:	21 df       	rcall	.-446    	; 0xaa <SPK_xMoveStepForward>
 268:	cf 9b       	sbis	0x19, 7	; 25
 26a:	f0 cf       	rjmp	.-32     	; 0x24c <main+0xa>
 26c:	cf 99       	sbic	0x19, 7	; 25
 26e:	fe cf       	rjmp	.-4      	; 0x26c <__stack+0xd>
 270:	ce 9b       	sbis	0x19, 6	; 25
 272:	02 c0       	rjmp	.+4      	; 0x278 <__stack+0x19>
 274:	5e df       	rcall	.-324    	; 0x132 <SPK_yMoveStepForward>
 276:	ea cf       	rjmp	.-44     	; 0x24c <main+0xa>
 278:	7e df       	rcall	.-260    	; 0x176 <SPK_yMoveStepReverse>
 27a:	e8 cf       	rjmp	.-48     	; 0x24c <main+0xa>
 27c:	38 df       	rcall	.-400    	; 0xee <SPK_xMoveStepReverse>
 27e:	e4 cf       	rjmp	.-56     	; 0x248 <main+0x6>
 280:	9c df       	rcall	.-200    	; 0x1ba <SPK_zMoveStepForward>
 282:	e0 cf       	rjmp	.-64     	; 0x244 <main+0x2>
