
LCD_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000314  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008a  0080008a  000003d2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000be  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000303  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00000fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a3  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033e  00000000  00000000  0000185b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e1       	ldi	r30, 0x14	; 20
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 38       	cpi	r26, 0x8A	; 138
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	aa e8       	ldi	r26, 0x8A	; 138
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 38       	cpi	r26, 0x8C	; 140
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	5a c1       	rjmp	.+692    	; 0x310 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:




int main(void)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
	DDRB |= 0x80;
  62:	bf 9a       	sbi	0x17, 7	; 23
	DDRC |= 0x00; // AN0, PC0 pin as input for analog  
  64:	84 b3       	in	r24, 0x14	; 20
  66:	84 bb       	out	0x14, r24	; 20
	
	sbi(PORTB, 7); // set pin for PORTB, 7th to power led for working
  68:	c7 9a       	sbi	0x18, 7	; 24

	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
  6a:	83 e0       	ldi	r24, 0x03	; 3
  6c:	7f d0       	rcall	.+254    	; 0x16c <InitLCD>
	//Clear the screen
	LCDClear();
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	55 d0       	rcall	.+170    	; 0x11e <LCDByte>
	LCDWriteString("LCD TEST PRINT");
  74:	80 e6       	ldi	r24, 0x60	; 96
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	a5 d0       	rcall	.+330    	; 0x1c4 <LCDWriteString>
	LCDGotoXY(0,1);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	0a d1       	rcall	.+532    	; 0x294 <LCDGotoXY>
	LCDWriteString("By. HEIKHAMA");
  80:	8f e6       	ldi	r24, 0x6F	; 111
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9f d0       	rcall	.+318    	; 0x1c4 <LCDWriteString>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	88 ea       	ldi	r24, 0xA8	; 168
  88:	91 e6       	ldi	r25, 0x61	; 97
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <main+0x2c>
	_delay_ms(100);
	LCDGotoXY(0,1);
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	00 d1       	rcall	.+512    	; 0x294 <LCDGotoXY>
	LCDWriteString("ADC COUNT=  ");
  94:	8c e7       	ldi	r24, 0x7C	; 124
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	95 d0       	rcall	.+298    	; 0x1c4 <LCDWriteString>
	//Initialize ADC
	init_adc();
  9a:	04 d1       	rcall	.+520    	; 0x2a4 <init_adc>
  9c:	c8 ea       	ldi	r28, 0xA8	; 168
  9e:	d1 e6       	ldi	r29, 0x61	; 97


	while(1)
	{
	
		adc_val = Read_ADC(0); // Reading Channel = 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	05 d1       	rcall	.+522    	; 0x2ae <Read_ADC>
  a4:	90 93 8b 00 	sts	0x008B, r25
  a8:	80 93 8a 00 	sts	0x008A, r24
		
		LCDWriteIntXY(11,1,adc_val, 5);
  ac:	8b e0       	ldi	r24, 0x0B	; 11
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	f1 d0       	rcall	.+482    	; 0x294 <LCDGotoXY>
  b2:	80 91 8a 00 	lds	r24, 0x008A
  b6:	90 91 8b 00 	lds	r25, 0x008B
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	8f d0       	rcall	.+286    	; 0x1de <LCDWriteInt>
  c0:	ce 01       	movw	r24, r28
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x64>
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x42>

000000c8 <LCDBusyLoop>:
//At this time we can read data in the LCD PORT
void LCDBusyLoop()
{
	uint8_t busy,status=0x00,temp;
	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	87 bb       	out	0x17, r24	; 23
	//change LCD mode
	SET_RW();		//Read mode
  ce:	c5 9a       	sbi	0x18, 5	; 24
	CLEAR_RS();		//Read status
  d0:	c6 98       	cbi	0x18, 6	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDBusyLoop+0xc>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
  d8:	22 e0       	ldi	r18, 0x02	; 2
  da:	34 e0       	ldi	r19, 0x04	; 4
  dc:	c4 9a       	sbi	0x18, 4	; 24
  de:	82 2f       	mov	r24, r18
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  e4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
  e6:	82 95       	swap	r24
  e8:	80 7f       	andi	r24, 0xF0	; 240
  ea:	92 2f       	mov	r25, r18
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  f0:	c4 98       	cbi	0x18, 4	; 24
  f2:	93 2f       	mov	r25, r19
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
  f8:	c4 9a       	sbi	0x18, 4	; 24
  fa:	92 2f       	mov	r25, r18
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 100:	96 b3       	in	r25, 0x16	; 22
 102:	92 2f       	mov	r25, r18
 104:	9a 95       	dec	r25
 106:	f1 f7       	brne	.-4      	; 0x104 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 108:	c4 98       	cbi	0x18, 4	; 24
 10a:	93 2f       	mov	r25, r19
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 110:	87 fd       	sbrc	r24, 7
 112:	e4 cf       	rjmp	.-56     	; 0xdc <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 114:	c5 98       	cbi	0x18, 5	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;    //0xDF is taken as the RW Pin is in the Same PORT
 116:	87 b3       	in	r24, 0x17	; 23
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	87 bb       	out	0x17, r24	; 23
	

}
 11c:	08 95       	ret

0000011e <LCDByte>:
//Sends a byte to the LCD in 4bit mode
//cmd=0 for data
//cmd=1 for command
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND
void LCDByte(uint8_t c,uint8_t isdata)
{
 11e:	28 2f       	mov	r18, r24
	
	msb = c>>4;    // shift the input byte, 4bit MSB data to right
	lsb=(c & 0x0F); // Only LSB bit will extract and make other MSB to 0

	
	if(isdata==0) 
 120:	66 23       	and	r22, r22
 122:	11 f4       	brne	.+4      	; 0x128 <LCDByte+0xa>
		CLEAR_RS();
 124:	c6 98       	cbi	0x18, 6	; 24
 126:	01 c0       	rjmp	.+2      	; 0x12a <LCDByte+0xc>
	else 
		SET_RS();
 128:	c6 9a       	sbi	0x18, 6	; 24
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCDByte+0xe>
	
	_delay_us(0.500);		//tAS delay for sending data

	SET_E(); // enable PIN is set high to send 4bit data to LCD
 130:	c4 9a       	sbi	0x18, 4	; 24
	
	//Send high nibble

	temp=(LCD_DATA_PORT & 0xD0)|(msb);  //0xD0 is taken as the RW Pin is in the Same PORT
 132:	88 b3       	in	r24, 0x18	; 24
 134:	92 2f       	mov	r25, r18
 136:	92 95       	swap	r25
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	80 7d       	andi	r24, 0xD0	; 208
 13c:	98 2b       	or	r25, r24
	LCD_DATA_PORT=temp;
 13e:	98 bb       	out	0x18, r25	; 24
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	89 2f       	mov	r24, r25
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <LCDByte+0x26>

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 148:	c4 98       	cbi	0x18, 4	; 24
 14a:	89 2f       	mov	r24, r25
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCDByte+0x2e>

	_delay_us(1);

	SET_E();
 150:	c4 9a       	sbi	0x18, 4	; 24

	//Send the lower nibble

	temp=(LCD_DATA_PORT & 0xD0)|(lsb);  //0xD0 is taken as the RW Pin is in the Same PORT
 152:	88 b3       	in	r24, 0x18	; 24
 154:	2f 70       	andi	r18, 0x0F	; 15
 156:	80 7d       	andi	r24, 0xD0	; 208
 158:	82 2b       	or	r24, r18
	LCD_DATA_PORT=temp;
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	89 2f       	mov	r24, r25
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDByte+0x40>
	_delay_us(1);			//tEH

//SEND complete ONE BYTE

	CLEAR_E();
 162:	c4 98       	cbi	0x18, 4	; 24
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDByte+0x46>
	_delay_us(1);			//tEL
	LCDBusyLoop();
 168:	af df       	rcall	.-162    	; 0xc8 <LCDBusyLoop>

	// Can Continue Next Byte

}
 16a:	08 95       	ret

0000016c <InitLCD>:
	LS_BLINK :The cursor is blinking type
	LS_ULINE :Cursor is "underline" type else "block" type

*****************************************************************/
void InitLCD(uint8_t style)
{
 16c:	1f 93       	push	r17
 16e:	18 2f       	mov	r17, r24
 170:	8c e2       	ldi	r24, 0x2C	; 44
 172:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	2c e2       	ldi	r18, 0x2C	; 44
 176:	31 e0       	ldi	r19, 0x01	; 1
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <InitLCD+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	d9 f7       	brne	.-10     	; 0x178 <InitLCD+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);         // LCD DATA PORT IS MADE OUTPUT
 182:	87 b3       	in	r24, 0x17	; 23
 184:	8f 60       	ori	r24, 0x0F	; 15
 186:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);   	//1 is for output, 0 for input
 188:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 18a:	be 9a       	sbi	0x17, 6	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 18c:	bd 9a       	sbi	0x17, 5	; 23

	
	LCD_DATA_PORT|=0x00; // READ LCD PORT AS INPUT
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 192:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 194:	c5 98       	cbi	0x18, 5	; 24
	CLEAR_RS();
 196:	c6 98       	cbi	0x18, 6	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <InitLCD+0x2e>
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 19e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1a0:	c1 9a       	sbi	0x18, 1	; 24
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	98 2f       	mov	r25, r24
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <InitLCD+0x3a>
	_delay_us(1);
	CLEAR_E();
 1aa:	c4 98       	cbi	0x18, 4	; 24
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <InitLCD+0x40>
	_delay_us(1);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();              //[B] Forgot this delay
 1b0:	8b df       	rcall	.-234    	; 0xc8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1b2:	81 2f       	mov	r24, r17
 1b4:	8c 60       	ori	r24, 0x0C	; 12
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	b2 df       	rcall	.-156    	; 0x11e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	af df       	rcall	.-162    	; 0x11e <LCDByte>

	


}
 1c0:	1f 91       	pop	r17
 1c2:	08 95       	ret

000001c4 <LCDWriteString>:


	*****************************************************************/

void LCDWriteString(const char *msg)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCDWriteString+0xe>
	while(*msg!='\0')
 	{
		LCDData(*msg);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	a7 df       	rcall	.-178    	; 0x11e <LCDByte>
		msg++;
 1d0:	21 96       	adiw	r28, 0x01	; 1

	*****************************************************************/

void LCDWriteString(const char *msg)
{
	while(*msg!='\0')
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	d1 f7       	brne	.-12     	; 0x1cc <LCDWriteString+0x8>
 	{
		LCDData(*msg);
		msg++;
 	}

}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <LCDWriteInt>:
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/
void LCDWriteInt(int val,unsigned int field_length)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <LCDWriteInt+0xe>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <LCDWriteInt+0x10>
 1ee:	0f 92       	push	r0
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	9c 01       	movw	r18, r24
 1f6:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
 1f8:	fe 01       	movw	r30, r28
 1fa:	31 96       	adiw	r30, 0x01	; 1
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	df 01       	movw	r26, r30
 200:	1d 92       	st	X+, r1
 202:	8a 95       	dec	r24
 204:	e9 f7       	brne	.-6      	; 0x200 <LCDWriteInt+0x22>
 206:	fe 01       	movw	r30, r28
 208:	35 96       	adiw	r30, 0x05	; 5
 20a:	0b c0       	rjmp	.+22     	; 0x222 <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 20c:	c9 01       	movw	r24, r18
 20e:	6a e0       	ldi	r22, 0x0A	; 10
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	57 d0       	rcall	.+174    	; 0x2c2 <__divmodhi4>
 214:	80 83       	st	Z, r24
	val=val/10;
 216:	c9 01       	movw	r24, r18
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	52 d0       	rcall	.+164    	; 0x2c2 <__divmodhi4>
 21e:	9b 01       	movw	r18, r22
 220:	31 97       	sbiw	r30, 0x01	; 1
	****************************************************************/
void LCDWriteInt(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 222:	21 15       	cp	r18, r1
 224:	31 05       	cpc	r19, r1
 226:	91 f7       	brne	.-28     	; 0x20c <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 228:	bf ef       	ldi	r27, 0xFF	; 255
 22a:	0f 3f       	cpi	r16, 0xFF	; 255
 22c:	1b 07       	cpc	r17, r27
 22e:	79 f4       	brne	.+30     	; 0x24e <LCDWriteInt+0x70>
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 234:	ae 01       	movw	r20, r28
 236:	4f 5f       	subi	r20, 0xFF	; 255
 238:	5f 4f       	sbci	r21, 0xFF	; 255
 23a:	02 c0       	rjmp	.+4      	; 0x240 <LCDWriteInt+0x62>
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
 240:	fa 01       	movw	r30, r20
 242:	e2 0f       	add	r30, r18
 244:	f3 1f       	adc	r31, r19
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	c1 f3       	breq	.-16     	; 0x23c <LCDWriteInt+0x5e>
 24c:	04 c0       	rjmp	.+8      	; 0x256 <LCDWriteInt+0x78>
	else
		j=5-field_length;
 24e:	25 e0       	ldi	r18, 0x05	; 5
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	20 1b       	sub	r18, r16
 254:	31 0b       	sbc	r19, r17
 256:	7e 01       	movw	r14, r28
 258:	08 94       	sec
 25a:	e1 1c       	adc	r14, r1
 25c:	f1 1c       	adc	r15, r1
 25e:	e2 0e       	add	r14, r18
 260:	f3 1e       	adc	r15, r19
 262:	89 01       	movw	r16, r18
 264:	08 c0       	rjmp	.+16     	; 0x276 <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 266:	f7 01       	movw	r30, r14
 268:	81 91       	ld	r24, Z+
 26a:	7f 01       	movw	r14, r30
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	56 df       	rcall	.-340    	; 0x11e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 272:	0f 5f       	subi	r16, 0xFF	; 255
 274:	1f 4f       	sbci	r17, 0xFF	; 255
 276:	05 30       	cpi	r16, 0x05	; 5
 278:	11 05       	cpc	r17, r1
 27a:	ac f3       	brlt	.-22     	; 0x266 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	cf 91       	pop	r28
 288:	df 91       	pop	r29
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <LCDGotoXY>:
	
	****************************************************************/

void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 294:	88 32       	cpi	r24, 0x28	; 40
 296:	28 f4       	brcc	.+10     	; 0x2a2 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 298:	61 11       	cpse	r22, r1
 29a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 29c:	80 68       	ori	r24, 0x80	; 128
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	3e df       	rcall	.-388    	; 0x11e <LCDByte>
 2a2:	08 95       	ret

000002a4 <init_adc>:



void init_adc(void)
{
	DDRC |= 0x00; // set port for input
 2a4:	84 b3       	in	r24, 0x14	; 20
 2a6:	84 bb       	out	0x14, r24	; 20
	ADCSRA = _BV(ADEN) | _BV(ADPS2);    // Activate ADC with Prescaler 16 --> 1Mhz/16 = 62.5kHz
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	86 b9       	out	0x06, r24	; 6
	
}
 2ac:	08 95       	ret

000002ae <Read_ADC>:

unsigned int Read_ADC(unsigned char channel)
{
	ADCSRA = _BV(ADEN) | _BV(ADPS2);
 2ae:	94 e8       	ldi	r25, 0x84	; 132
 2b0:	96 b9       	out	0x06, r25	; 6
	ADMUX = channel;						// Select pin ADC0 using MUX		
 2b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);			// Start conversion 		
 2b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & _BV(ADSC)) 	// wait until converstion completed
 2b6:	36 99       	sbic	0x06, 6	; 6
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <Read_ADC+0x8>
	{
	
	}
	return ADCW;
 2ba:	24 b1       	in	r18, 0x04	; 4
 2bc:	35 b1       	in	r19, 0x05	; 5

}
 2be:	c9 01       	movw	r24, r18
 2c0:	08 95       	ret

000002c2 <__divmodhi4>:
 2c2:	97 fb       	bst	r25, 7
 2c4:	09 2e       	mov	r0, r25
 2c6:	07 26       	eor	r0, r23
 2c8:	0a d0       	rcall	.+20     	; 0x2de <__divmodhi4_neg1>
 2ca:	77 fd       	sbrc	r23, 7
 2cc:	04 d0       	rcall	.+8      	; 0x2d6 <__divmodhi4_neg2>
 2ce:	0c d0       	rcall	.+24     	; 0x2e8 <__udivmodhi4>
 2d0:	06 d0       	rcall	.+12     	; 0x2de <__divmodhi4_neg1>
 2d2:	00 20       	and	r0, r0
 2d4:	1a f4       	brpl	.+6      	; 0x2dc <__divmodhi4_exit>

000002d6 <__divmodhi4_neg2>:
 2d6:	70 95       	com	r23
 2d8:	61 95       	neg	r22
 2da:	7f 4f       	sbci	r23, 0xFF	; 255

000002dc <__divmodhi4_exit>:
 2dc:	08 95       	ret

000002de <__divmodhi4_neg1>:
 2de:	f6 f7       	brtc	.-4      	; 0x2dc <__divmodhi4_exit>
 2e0:	90 95       	com	r25
 2e2:	81 95       	neg	r24
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	08 95       	ret

000002e8 <__udivmodhi4>:
 2e8:	aa 1b       	sub	r26, r26
 2ea:	bb 1b       	sub	r27, r27
 2ec:	51 e1       	ldi	r21, 0x11	; 17
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__udivmodhi4_ep>

000002f0 <__udivmodhi4_loop>:
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	a6 17       	cp	r26, r22
 2f6:	b7 07       	cpc	r27, r23
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <__udivmodhi4_ep>
 2fa:	a6 1b       	sub	r26, r22
 2fc:	b7 0b       	sbc	r27, r23

000002fe <__udivmodhi4_ep>:
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	5a 95       	dec	r21
 304:	a9 f7       	brne	.-22     	; 0x2f0 <__udivmodhi4_loop>
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	bc 01       	movw	r22, r24
 30c:	cd 01       	movw	r24, r26
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
