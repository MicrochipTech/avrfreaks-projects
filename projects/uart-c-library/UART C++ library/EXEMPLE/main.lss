
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  0000029a  0000030e  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a4b  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	5f 00       	.word	0x005f	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e8 e8       	ldi	r30, 0x88	; 136
  6a:	f2 e0       	ldi	r31, 0x02	; 2
  6c:	02 c0       	rjmp	.+4      	; 0x72 <.do_copy_data_start>

0000006e <.do_copy_data_loop>:
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0

00000072 <.do_copy_data_start>:
  72:	a2 37       	cpi	r26, 0x72	; 114
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <.do_copy_data_loop>

00000078 <__do_clear_bss>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a2 e7       	ldi	r26, 0x72	; 114
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a3 37       	cpi	r26, 0x73	; 115
  84:	b1 07       	cpc	r27, r17
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	c6 e5       	ldi	r28, 0x56	; 86
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <.do_global_ctors_start>

00000090 <.do_global_ctors_loop>:
  90:	22 97       	sbiw	r28, 0x02	; 2
  92:	fe 01       	movw	r30, r28
  94:	0e 94 3f 01 	call	0x27e	; 0x27e <__tablejump__>

00000098 <.do_global_ctors_start>:
  98:	c4 35       	cpi	r28, 0x54	; 84
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <.do_global_ctors_loop>
  9e:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  a2:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000aa <_Z41__static_initialization_and_destruction_0ii>:
		uart.send(ADCH);
	}
	
}
	return 0;
}
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	39 f4       	brne	.+14     	; 0xbc <_Z41__static_initialization_and_destruction_0ii+0x12>
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	21 f4       	brne	.+8      	; 0xbc <_Z41__static_initialization_and_destruction_0ii+0x12>
#include <util/delay.h>			//SIMPLE DELAYS
#include <avr/pgmspace.h>		//PGM space read
#include "uart.h"			//UART transmission
#include <math.h>			//Math
//Main objects
UART uart;				//make UART object
  b4:	82 e7       	ldi	r24, 0x72	; 114
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 9a 00 	call	0x134	; 0x134 <_ZN4UARTC1Ev>
  bc:	08 95       	ret

000000be <_GLOBAL__I_uart>:
	}
	
}
	return 0;
}
  be:	6f ef       	ldi	r22, 0xFF	; 255
  c0:	7f ef       	ldi	r23, 0xFF	; 255
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 55 00 	call	0xaa	; 0xaa <_Z41__static_initialization_and_destruction_0ii>
  ca:	08 95       	ret

000000cc <main>:
#include "uart.h"			//UART transmission
#include <math.h>			//Math
//Main objects
UART uart;				//make UART object
//Main function
int main(void) {
  cc:	cf e5       	ldi	r28, 0x5F	; 95
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

#define ACK		0x5B
	

	ADMUX = _BV(REFS0) | _BV(MUX2) | _BV(ADLAR);
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	87 b9       	out	0x07, r24	; 7
	SFIOR = _BV(ADTS0);
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	80 bf       	out	0x30, r24	; 48
	ADCSRA = _BV(ADEN);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	86 b9       	out	0x06, r24	; 6
  e0:	82 e7       	ldi	r24, 0x72	; 114
  e2:	e8 2e       	mov	r14, r24
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	f8 2e       	mov	r15, r24

while(1) {

	uart.get();
  e8:	c7 01       	movw	r24, r14
  ea:	0e 94 11 01 	call	0x222	; 0x222 <_ZN4UART3getEv>
	uart.send(1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	c7 01       	movw	r24, r14
  f2:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN4UART4sendEh>
	uint8_t g = uart.get();
  f6:	c7 01       	movw	r24, r14
  f8:	0e 94 11 01 	call	0x222	; 0x222 <_ZN4UART3getEv>
  fc:	18 2f       	mov	r17, r24
	uint8_t h = uart.get();
  fe:	c7 01       	movw	r24, r14
 100:	0e 94 11 01 	call	0x222	; 0x222 <_ZN4UART3getEv>
	uint16_t b = g * h;
 104:	81 9f       	mul	r24, r17
 106:	80 01       	movw	r16, r0
 108:	11 24       	eor	r1, r1
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	08 c0       	rjmp	.+16     	; 0x120 <main+0x54>

	for(uint16_t i = 0; i < b; i++) {
		ADCSRA |= _BV(ADSC);
 110:	36 9a       	sbi	0x06, 6	; 6
		loop_until_bit_is_set(ADCSRA, ADSC);
 112:	36 9b       	sbis	0x06, 6	; 6
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x46>
		uart.send(ADCH);
 116:	65 b1       	in	r22, 0x05	; 5
 118:	c7 01       	movw	r24, r14
 11a:	0e 94 0d 01 	call	0x21a	; 0x21a <_ZN4UART4sendEh>
	uart.send(1);
	uint8_t g = uart.get();
	uint8_t h = uart.get();
	uint16_t b = g * h;

	for(uint16_t i = 0; i < b; i++) {
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	c0 17       	cp	r28, r16
 122:	d1 07       	cpc	r29, r17
 124:	a9 f7       	brne	.-22     	; 0x110 <main+0x44>
 126:	e0 cf       	rjmp	.-64     	; 0xe8 <main+0x1c>

00000128 <_ZN4UARTC2Ev>:
	 UBRRH = static_cast<uint8_t>(baud>>8);
  	 UBRRH = static_cast<uint8_t>(baud);
	#else
	 #define UART_BAUDRATE_ ((F_CPU / (16 * UART_BAUDRATE)) - 1)
	 baud = static_cast<uint16_t>(UART_BAUDRATE_);
	 UBRRH = static_cast<uint8_t>(baud>>8);
 128:	10 bc       	out	0x20, r1	; 32
	 UBRRL = static_cast<uint8_t>(baud);
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	89 b9       	out	0x09, r24	; 9
	#endif
	#ifdef UART_RECIVE
	UCRB = _BV(TXEN) | _BV(RXEN);
 12e:	88 e1       	ldi	r24, 0x18	; 24
 130:	8a b9       	out	0x0a, r24	; 10
 132:	08 95       	ret

00000134 <_ZN4UARTC1Ev>:
	 UBRRH = static_cast<uint8_t>(baud>>8);
  	 UBRRH = static_cast<uint8_t>(baud);
	#else
	 #define UART_BAUDRATE_ ((F_CPU / (16 * UART_BAUDRATE)) - 1)
	 baud = static_cast<uint16_t>(UART_BAUDRATE_);
	 UBRRH = static_cast<uint8_t>(baud>>8);
 134:	10 bc       	out	0x20, r1	; 32
	 UBRRL = static_cast<uint8_t>(baud);
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	89 b9       	out	0x09, r24	; 9
	#endif
	#ifdef UART_RECIVE
	UCRB = _BV(TXEN) | _BV(RXEN);
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	8a b9       	out	0x0a, r24	; 10
 13e:	08 95       	ret

00000140 <_ZN4UART3putEPc>:
	#else
	UCRB = _BV(TXEN);
	#endif
}
//Put text on UART
void UART::put(char *text) {
 140:	fb 01       	movw	r30, r22
 142:	04 c0       	rjmp	.+8      	; 0x14c <_ZN4UART3putEPc+0xc>
		this->put(&buf[i+1]);
	}
}
//Transmit one byte
void UART::send(uint8_t data) {
	loop_until_bit_is_set(UCRA, UDRE);
 144:	5d 9b       	sbis	0x0b, 5	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <_ZN4UART3putEPc+0x4>
	UDR = data;	
 148:	8c b9       	out	0x0c, r24	; 12
}
//Put text on UART
void UART::put(char *text) {
	while(*text){
		this->send(*text);
		*text++;
 14a:	31 96       	adiw	r30, 0x01	; 1
	UCRB = _BV(TXEN);
	#endif
}
//Put text on UART
void UART::put(char *text) {
	while(*text){
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	c9 f7       	brne	.-14     	; 0x144 <_ZN4UART3putEPc+0x4>
 152:	08 95       	ret

00000154 <_ZN4UART3putEih>:
		*text++;
	}
}
#endif
//Put number on UART
void UART::put(int16_t number, uint8_t base) {
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	60 97       	sbiw	r28, 0x10	; 16
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	7c 01       	movw	r14, r24
 178:	9b 01       	movw	r18, r22
 17a:	64 2f       	mov	r22, r20
	char buf[16] = {0};
	register char i = 14;
	char m = 0;
	if(number < 0) {
 17c:	37 fd       	sbrc	r19, 7
 17e:	0d c0       	rjmp	.+26     	; 0x19a <_ZN4UART3putEih+0x46>
 180:	bb 24       	eor	r11, r11
	}
}
#endif
//Put number on UART
void UART::put(int16_t number, uint8_t base) {
	char buf[16] = {0};
 182:	fe 01       	movw	r30, r28
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	df 01       	movw	r26, r30
 18a:	1d 92       	st	X+, r1
 18c:	8a 95       	dec	r24
 18e:	e9 f7       	brne	.-6      	; 0x18a <_ZN4UART3putEih+0x36>
 190:	4e e0       	ldi	r20, 0x0E	; 14
	if(number < 0) {
		number = number * (-1);
		m = 1;
	}
	for(; number && i ; --i, number /= base)
		buf[i] = "0123456789abcdef"[number % base];
 192:	06 2f       	mov	r16, r22
 194:	11 27       	eor	r17, r17
 196:	6f 01       	movw	r12, r30
 198:	18 c0       	rjmp	.+48     	; 0x1ca <_ZN4UART3putEih+0x76>
void UART::put(int16_t number, uint8_t base) {
	char buf[16] = {0};
	register char i = 14;
	char m = 0;
	if(number < 0) {
		number = number * (-1);
 19a:	30 95       	com	r19
 19c:	21 95       	neg	r18
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	bb 24       	eor	r11, r11
 1a2:	b3 94       	inc	r11
 1a4:	ee cf       	rjmp	.-36     	; 0x182 <_ZN4UART3putEih+0x2e>
		m = 1;
	}
	for(; number && i ; --i, number /= base)
		buf[i] = "0123456789abcdef"[number % base];
 1a6:	f6 01       	movw	r30, r12
 1a8:	e4 0f       	add	r30, r20
 1aa:	f1 1d       	adc	r31, r1
 1ac:	c9 01       	movw	r24, r18
 1ae:	b8 01       	movw	r22, r16
 1b0:	0e 94 16 01 	call	0x22c	; 0x22c <__divmodhi4>
 1b4:	dc 01       	movw	r26, r24
 1b6:	a0 5a       	subi	r26, 0xA0	; 160
 1b8:	bf 4f       	sbci	r27, 0xFF	; 255
 1ba:	8c 91       	ld	r24, X
 1bc:	80 83       	st	Z, r24
	char m = 0;
	if(number < 0) {
		number = number * (-1);
		m = 1;
	}
	for(; number && i ; --i, number /= base)
 1be:	41 50       	subi	r20, 0x01	; 1
 1c0:	c9 01       	movw	r24, r18
 1c2:	b8 01       	movw	r22, r16
 1c4:	0e 94 16 01 	call	0x22c	; 0x22c <__divmodhi4>
 1c8:	9b 01       	movw	r18, r22
 1ca:	21 15       	cp	r18, r1
 1cc:	31 05       	cpc	r19, r1
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <_ZN4UART3putEih+0x80>
 1d0:	44 23       	and	r20, r20
 1d2:	49 f7       	brne	.-46     	; 0x1a6 <_ZN4UART3putEih+0x52>
 1d4:	fe 01       	movw	r30, r28
 1d6:	31 96       	adiw	r30, 0x01	; 1
 1d8:	64 2f       	mov	r22, r20
 1da:	77 27       	eor	r23, r23
		buf[i] = "0123456789abcdef"[number % base];
	if(m) {
 1dc:	bb 20       	and	r11, r11
 1de:	29 f0       	breq	.+10     	; 0x1ea <_ZN4UART3putEih+0x96>
		buf[i] = '-';
 1e0:	e6 0f       	add	r30, r22
 1e2:	f7 1f       	adc	r31, r23
 1e4:	8d e2       	ldi	r24, 0x2D	; 45
 1e6:	80 83       	st	Z, r24
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <_ZN4UART3putEih+0x9e>
		this->put(&buf[i]);
	} else {
		this->put(&buf[i+1]);
 1ea:	6f 5f       	subi	r22, 0xFF	; 255
 1ec:	7f 4f       	sbci	r23, 0xFF	; 255
 1ee:	e6 0f       	add	r30, r22
 1f0:	f7 1f       	adc	r31, r23
 1f2:	bf 01       	movw	r22, r30
 1f4:	c7 01       	movw	r24, r14
 1f6:	0e 94 a0 00 	call	0x140	; 0x140 <_ZN4UART3putEPc>
 1fa:	60 96       	adiw	r28, 0x10	; 16
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	08 95       	ret

0000021a <_ZN4UART4sendEh>:
	}
}
//Transmit one byte
void UART::send(uint8_t data) {
	loop_until_bit_is_set(UCRA, UDRE);
 21a:	5d 9b       	sbis	0x0b, 5	; 11
 21c:	fe cf       	rjmp	.-4      	; 0x21a <_ZN4UART4sendEh>
	UDR = data;	
 21e:	6c b9       	out	0x0c, r22	; 12
 220:	08 95       	ret

00000222 <_ZN4UART3getEv>:
}
#ifdef UART_RECIVE
//Recive one byte
uint8_t UART::get(void) {
	loop_until_bit_is_set(UCRA, RXC);
 222:	5f 9b       	sbis	0x0b, 7	; 11
 224:	fe cf       	rjmp	.-4      	; 0x222 <_ZN4UART3getEv>
	return UDR;
 226:	8c b1       	in	r24, 0x0c	; 12
}
 228:	99 27       	eor	r25, r25
 22a:	08 95       	ret

0000022c <__divmodhi4>:
 22c:	97 fb       	bst	r25, 7
 22e:	09 2e       	mov	r0, r25
 230:	07 26       	eor	r0, r23
 232:	0a d0       	rcall	.+20     	; 0x248 <__divmodhi4_neg1>
 234:	77 fd       	sbrc	r23, 7
 236:	04 d0       	rcall	.+8      	; 0x240 <__divmodhi4_neg2>
 238:	0c d0       	rcall	.+24     	; 0x252 <__udivmodhi4>
 23a:	06 d0       	rcall	.+12     	; 0x248 <__divmodhi4_neg1>
 23c:	00 20       	and	r0, r0
 23e:	1a f4       	brpl	.+6      	; 0x246 <__divmodhi4_exit>

00000240 <__divmodhi4_neg2>:
 240:	70 95       	com	r23
 242:	61 95       	neg	r22
 244:	7f 4f       	sbci	r23, 0xFF	; 255

00000246 <__divmodhi4_exit>:
 246:	08 95       	ret

00000248 <__divmodhi4_neg1>:
 248:	f6 f7       	brtc	.-4      	; 0x246 <__divmodhi4_exit>
 24a:	90 95       	com	r25
 24c:	81 95       	neg	r24
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	08 95       	ret

00000252 <__udivmodhi4>:
 252:	aa 1b       	sub	r26, r26
 254:	bb 1b       	sub	r27, r27
 256:	51 e1       	ldi	r21, 0x11	; 17
 258:	07 c0       	rjmp	.+14     	; 0x268 <__udivmodhi4_ep>

0000025a <__udivmodhi4_loop>:
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	a6 17       	cp	r26, r22
 260:	b7 07       	cpc	r27, r23
 262:	10 f0       	brcs	.+4      	; 0x268 <__udivmodhi4_ep>
 264:	a6 1b       	sub	r26, r22
 266:	b7 0b       	sbc	r27, r23

00000268 <__udivmodhi4_ep>:
 268:	88 1f       	adc	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	5a 95       	dec	r21
 26e:	a9 f7       	brne	.-22     	; 0x25a <__udivmodhi4_loop>
 270:	80 95       	com	r24
 272:	90 95       	com	r25
 274:	bc 01       	movw	r22, r24
 276:	cd 01       	movw	r24, r26
 278:	08 95       	ret

0000027a <__tablejump2__>:
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31

0000027e <__tablejump__>:
 27e:	05 90       	lpm	r0, Z+
 280:	f4 91       	lpm	r31, Z
 282:	e0 2d       	mov	r30, r0
 284:	09 94       	ijmp

00000286 <_exit>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <_exit>
