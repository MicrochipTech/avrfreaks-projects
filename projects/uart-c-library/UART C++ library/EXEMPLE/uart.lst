   1               		.file	"uart.cpp"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  86               	.global	_ZN4UARTC2Ev
  88               	_ZN4UARTC2Ev:
   1:uart.cpp      **** /***************************************************************************
   2:uart.cpp      ****  *   Copyright (C) 2008 by Damian Kmiecik                                  *
   3:uart.cpp      ****  *                                                                         *
   4:uart.cpp      ****  *   This program is free software; you can redistribute it and/or modify  *
   5:uart.cpp      ****  *   it under the terms of the GNU General Public License as published by  *
   6:uart.cpp      ****  *   the Free Software Foundation; either version 2 of the License, or     *
   7:uart.cpp      ****  *   (at your option) any later version.                                   *
   8:uart.cpp      ****  *                                                                         *
   9:uart.cpp      ****  *   This program is distributed in the hope that it will be useful,       *
  10:uart.cpp      ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  11:uart.cpp      ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  12:uart.cpp      ****  *   GNU General Public License for more details.                          *
  13:uart.cpp      ****  *                                                                         *
  14:uart.cpp      ****  *   You should have received a copy of the GNU General Public License     *
  15:uart.cpp      ****  *   along with this program; if not, write to the                         *
  16:uart.cpp      ****  *   Free Software Foundation, Inc.,                                       *
  17:uart.cpp      ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  18:uart.cpp      ****  *                                                                         *
  19:uart.cpp      ****  ***************************************************************************/
  20:uart.cpp      **** /***************************************************************************
  21:uart.cpp      ****  *                                                                         *
  22:uart.cpp      ****  *                             UART FILE                                   *
  23:uart.cpp      ****  *                                                                         *
  24:uart.cpp      ****  ***************************************************************************/
  25:uart.cpp      **** //Headers
  26:uart.cpp      **** #include "config/global.h"		//GLOBAL DEFINITIONS
  27:uart.cpp      **** #include <avr/io.h>			//I/O
  28:uart.cpp      **** #include <inttypes.h>			//
  29:uart.cpp      **** #include <util/delay.h>			//SIMPLE DELAYS
  30:uart.cpp      **** #include "config/uart.h"		//UART CONFIG
  31:uart.cpp      **** #include "uart.h"			//UART
  32:uart.cpp      **** #include <avr/pgmspace.h>		//PGM space read
  33:uart.cpp      **** //Definitions
  34:uart.cpp      **** 
  35:uart.cpp      **** //Constructor UART()
  36:uart.cpp      **** UART::UART() {
  90               	.LM0:
  91               	.LFBB1:
  92               	/* prologue: frame size=0 */
  93               	/* prologue end (size=0) */
  94               	.LBB4:
  95               	.LBB5:
  37:uart.cpp      **** 	//Setting bauderate and enabling interfaces
  38:uart.cpp      **** 	uint16_t baud;
  39:uart.cpp      **** 	#if F_CPU < 2000000 && defined(U2X)
  40:uart.cpp      **** 	 #define UART_BAUDRATE_ ((F_CPU / (8 * UART_BAUDRATE)) - 1)
  41:uart.cpp      **** 	 baud = static_cast<uint16_t>(UART_BAUDRATE_);
  42:uart.cpp      **** 	 UCSRA = _BV(U2X);
  43:uart.cpp      **** 	 UBRRH = static_cast<uint8_t>(baud>>8);
  44:uart.cpp      ****   	 UBRRH = static_cast<uint8_t>(baud);
  45:uart.cpp      **** 	#else
  46:uart.cpp      **** 	 #define UART_BAUDRATE_ ((F_CPU / (16 * UART_BAUDRATE)) - 1)
  47:uart.cpp      **** 	 baud = static_cast<uint16_t>(UART_BAUDRATE_);
  48:uart.cpp      **** 	 UBRRH = static_cast<uint8_t>(baud>>8);
  97               	.LM1:
  98 0000 10BC      		out 64-0x20,__zero_reg__
  49:uart.cpp      **** 	 UBRRL = static_cast<uint8_t>(baud);
 100               	.LM2:
 101 0002 8CE0      		ldi r24,lo8(12)
 102 0004 89B9      		out 41-0x20,r24
  50:uart.cpp      **** 	#endif
  51:uart.cpp      **** 	#ifdef UART_RECIVE
  52:uart.cpp      **** 	UCRB = _BV(TXEN) | _BV(RXEN);
 104               	.LM3:
 105 0006 88E1      		ldi r24,lo8(24)
 106 0008 8AB9      		out 42-0x20,r24
 107               	.LBE5:
 108               	.LBE4:
 109               	/* epilogue: frame size=0 */
 110 000a 0895      		ret
 111               	/* epilogue end (size=1) */
 112               	/* function UART::UART() size 6 (5) */
 114               	.Lscope1:
 117               	.global	_ZN4UARTC1Ev
 119               	_ZN4UARTC1Ev:
 121               	.LM4:
 122               	.LFBB2:
 123               	/* prologue: frame size=0 */
 124               	/* prologue end (size=0) */
 125               	.LBB6:
 126               	.LBB7:
 128               	.LM5:
 129 000c 10BC      		out 64-0x20,__zero_reg__
 131               	.LM6:
 132 000e 8CE0      		ldi r24,lo8(12)
 133 0010 89B9      		out 41-0x20,r24
 135               	.LM7:
 136 0012 88E1      		ldi r24,lo8(24)
 137 0014 8AB9      		out 42-0x20,r24
 138               	.LBE7:
 139               	.LBE6:
 140               	/* epilogue: frame size=0 */
 141 0016 0895      		ret
 142               	/* epilogue end (size=1) */
 143               	/* function UART::UART() size 6 (5) */
 145               	.Lscope2:
 149               	.global	_ZN4UART3putEPc
 151               	_ZN4UART3putEPc:
  53:uart.cpp      **** 	#else
  54:uart.cpp      **** 	UCRB = _BV(TXEN);
  55:uart.cpp      **** 	#endif
  56:uart.cpp      **** }
  57:uart.cpp      **** //Put text on UART
  58:uart.cpp      **** void UART::put(char *text) {
 153               	.LM8:
 154               	.LFBB3:
 155               	/* prologue: frame size=0 */
 156               	/* prologue end (size=0) */
 157 0018 FB01      		movw r30,r22
 158 001a 00C0      		rjmp .L6
 159               	.L11:
 160               	.LBB8:
 161               	.LBB9:
  59:uart.cpp      **** 	while(*text){
  60:uart.cpp      **** 		this->send(*text);
  61:uart.cpp      **** 		*text++;
  62:uart.cpp      **** 	}
  63:uart.cpp      **** }
  64:uart.cpp      **** #ifdef UART_PGM
  65:uart.cpp      **** //Put text from PGM
  66:uart.cpp      **** void UART::put_p(const char *text) {
  67:uart.cpp      **** 	while(pgm_read_byte(text)){
  68:uart.cpp      **** 		this->send(pgm_read_byte(text));
  69:uart.cpp      **** 		*text++;
  70:uart.cpp      **** 	}
  71:uart.cpp      **** }
  72:uart.cpp      **** #endif
  73:uart.cpp      **** //Put number on UART
  74:uart.cpp      **** void UART::put(int16_t number, uint8_t base) {
  75:uart.cpp      **** 	char buf[16] = {0};
  76:uart.cpp      **** 	register char i = 14;
  77:uart.cpp      **** 	char m = 0;
  78:uart.cpp      **** 	if(number < 0) {
  79:uart.cpp      **** 		number = number * (-1);
  80:uart.cpp      **** 		m = 1;
  81:uart.cpp      **** 	}
  82:uart.cpp      **** 	for(; number && i ; --i, number /= base)
  83:uart.cpp      **** 		buf[i] = "0123456789abcdef"[number % base];
  84:uart.cpp      **** 	if(m) {
  85:uart.cpp      **** 		buf[i] = '-';
  86:uart.cpp      **** 		this->put(&buf[i]);
  87:uart.cpp      **** 	} else {
  88:uart.cpp      **** 		this->put(&buf[i+1]);
  89:uart.cpp      **** 	}
  90:uart.cpp      **** }
  91:uart.cpp      **** //Transmit one byte
  92:uart.cpp      **** void UART::send(uint8_t data) {
  93:uart.cpp      **** 	loop_until_bit_is_set(UCRA, UDRE);
 163               	.LM9:
 164 001c 5D9B      		sbis 43-0x20,5
 165 001e 00C0      		rjmp .L11
  94:uart.cpp      **** 	UDR = data;	
 167               	.LM10:
 168 0020 8CB9      		out 44-0x20,r24
 169               	.LBE9:
 170               	.LBE8:
 172               	.LM11:
 173 0022 3196      		adiw r30,1
 174               	.L6:
 176               	.LM12:
 177 0024 8081      		ld r24,Z
 178 0026 8823      		tst r24
 179 0028 01F4      		brne .L11
 180               	/* epilogue: frame size=0 */
 181 002a 0895      		ret
 182               	/* epilogue end (size=1) */
 183               	/* function void UART::put(char*) size 10 (9) */
 185               	.Lscope3:
 186               		.data
 187               	.LC0:
 188 0000 3031 3233 		.string	"0123456789abcdef"
 188      3435 3637 
 188      3839 6162 
 188      6364 6566 
 188      00
 189               		.text
 194               	.global	_ZN4UART3putEih
 196               	_ZN4UART3putEih:
 198               	.LM13:
 199               	.LFBB4:
 200               	/* prologue: frame size=16 */
 201 002c BF92      		push r11
 202 002e CF92      		push r12
 203 0030 DF92      		push r13
 204 0032 EF92      		push r14
 205 0034 FF92      		push r15
 206 0036 0F93      		push r16
 207 0038 1F93      		push r17
 208 003a CF93      		push r28
 209 003c DF93      		push r29
 210 003e CDB7      		in r28,__SP_L__
 211 0040 DEB7      		in r29,__SP_H__
 212 0042 6097      		sbiw r28,16
 213 0044 0FB6      		in __tmp_reg__,__SREG__
 214 0046 F894      		cli
 215 0048 DEBF      		out __SP_H__,r29
 216 004a 0FBE      		out __SREG__,__tmp_reg__
 217 004c CDBF      		out __SP_L__,r28
 218               	/* prologue end (size=17) */
 219 004e 7C01      		movw r14,r24
 220 0050 9B01      		movw r18,r22
 221 0052 642F      		mov r22,r20
 222               	.LBB10:
 224               	.LM14:
 225 0054 37FD      		sbrc r19,7
 226 0056 00C0      		rjmp .L15
 228               	.LM15:
 229 0058 BB24      		clr r11
 230               	.L17:
 232               	.LM16:
 233 005a FE01      		movw r30,r28
 234 005c 3196      		adiw r30,1
 235 005e 80E1      		ldi r24,lo8(16)
 236 0060 DF01      		movw r26,r30
 237 0062 1D92      		st X+,__zero_reg__
 238 0064 8A95      	        dec r24
 239 0066 01F4      		brne .-6
 240 0068 4EE0      		ldi r20,lo8(14)
 242               	.LM17:
 243 006a 062F      		mov r16,r22
 244 006c 1127      		clr r17
 245 006e 6F01      		movw r12,r30
 246 0070 00C0      		rjmp .L18
 247               	.L15:
 249               	.LM18:
 250 0072 3095      		com r19
 251 0074 2195      		neg r18
 252 0076 3F4F      		sbci r19,lo8(-1)
 253 0078 BB24      		clr r11
 254 007a B394      		inc r11
 255 007c 00C0      		rjmp .L17
 256               	.L19:
 258               	.LM19:
 259 007e F601      		movw r30,r12
 260 0080 E40F      		add r30,r20
 261 0082 F11D      		adc r31,__zero_reg__
 262 0084 C901      		movw r24,r18
 263 0086 B801      		movw r22,r16
 264 0088 0E94 0000 		call __divmodhi4
 265 008c DC01      		movw r26,r24
 266 008e A050      		subi r26,lo8(-(.LC0))
 267 0090 B040      		sbci r27,hi8(-(.LC0))
 268 0092 8C91      		ld r24,X
 269 0094 8083      		st Z,r24
 271               	.LM20:
 272 0096 4150      		subi r20,lo8(-(-1))
 273 0098 C901      		movw r24,r18
 274 009a B801      		movw r22,r16
 275 009c 0E94 0000 		call __divmodhi4
 276 00a0 9B01      		movw r18,r22
 277               	.L18:
 278 00a2 2115      		cp r18,__zero_reg__
 279 00a4 3105      		cpc r19,__zero_reg__
 280 00a6 01F0      		breq .L20
 281 00a8 4423      		tst r20
 282 00aa 01F4      		brne .L19
 283               	.L20:
 284 00ac FE01      		movw r30,r28
 285 00ae 3196      		adiw r30,1
 286 00b0 642F      		mov r22,r20
 287 00b2 7727      		clr r23
 289               	.LM21:
 290 00b4 BB20      		tst r11
 291 00b6 01F0      		breq .L22
 293               	.LM22:
 294 00b8 E60F      		add r30,r22
 295 00ba F71F      		adc r31,r23
 296 00bc 8DE2      		ldi r24,lo8(45)
 297 00be 8083      		st Z,r24
 298 00c0 00C0      		rjmp .L26
 299               	.L22:
 301               	.LM23:
 302 00c2 6F5F      		subi r22,lo8(-(1))
 303 00c4 7F4F      		sbci r23,hi8(-(1))
 304 00c6 E60F      		add r30,r22
 305 00c8 F71F      		adc r31,r23
 306               	.L26:
 307 00ca BF01      		movw r22,r30
 308 00cc C701      		movw r24,r14
 309 00ce 0E94 0000 		call _ZN4UART3putEPc
 310               	.LBE10:
 311               	/* epilogue: frame size=16 */
 312 00d2 6096      		adiw r28,16
 313 00d4 0FB6      		in __tmp_reg__,__SREG__
 314 00d6 F894      		cli
 315 00d8 DEBF      		out __SP_H__,r29
 316 00da 0FBE      		out __SREG__,__tmp_reg__
 317 00dc CDBF      		out __SP_L__,r28
 318 00de DF91      		pop r29
 319 00e0 CF91      		pop r28
 320 00e2 1F91      		pop r17
 321 00e4 0F91      		pop r16
 322 00e6 FF90      		pop r15
 323 00e8 EF90      		pop r14
 324 00ea DF90      		pop r13
 325 00ec CF90      		pop r12
 326 00ee BF90      		pop r11
 327 00f0 0895      		ret
 328               	/* epilogue end (size=16) */
 329               	/* function void UART::put(int16_t, uint8_t) size 99 (66) */
 336               	.Lscope4:
 340               	.global	_ZN4UART4sendEh
 342               	_ZN4UART4sendEh:
 344               	.LM24:
 345               	.LFBB5:
 346               	/* prologue: frame size=0 */
 347               	/* prologue end (size=0) */
 348               	.L29:
 350               	.LM25:
 351 00f2 5D9B      		sbis 43-0x20,5
 352 00f4 00C0      		rjmp .L29
 354               	.LM26:
 355 00f6 6CB9      		out 44-0x20,r22
 356               	/* epilogue: frame size=0 */
 357 00f8 0895      		ret
 358               	/* epilogue end (size=1) */
 359               	/* function void UART::send(uint8_t) size 4 (3) */
 361               	.Lscope5:
 364               	.global	_ZN4UART3getEv
 366               	_ZN4UART3getEv:
  95:uart.cpp      **** }
  96:uart.cpp      **** #ifdef UART_RECIVE
  97:uart.cpp      **** //Recive one byte
  98:uart.cpp      **** uint8_t UART::get(void) {
 368               	.LM27:
 369               	.LFBB6:
 370               	/* prologue: frame size=0 */
 371               	/* prologue end (size=0) */
 372               	.L36:
  99:uart.cpp      **** 	loop_until_bit_is_set(UCRA, RXC);
 374               	.LM28:
 375 00fa 5F9B      		sbis 43-0x20,7
 376 00fc 00C0      		rjmp .L36
 100:uart.cpp      **** 	return UDR;
 378               	.LM29:
 379 00fe 8CB1      		in r24,44-0x20
 101:uart.cpp      **** }
 381               	.LM30:
 382 0100 9927      		clr r25
 383               	/* epilogue: frame size=0 */
 384 0102 0895      		ret
 385               	/* epilogue end (size=1) */
 386               	/* function uint8_t UART::get() size 5 (4) */
 388               	.Lscope6:
 390               	.Letext0:
 391               	/* File "uart.cpp": code  130 = 0x0082 (  92), prologues  17, epilogues  21 */
DEFINED SYMBOLS
                            *ABS*:00000000 uart.cpp
     /tmp/cclESOfi.s:2      *ABS*:0000003f __SREG__
     /tmp/cclESOfi.s:3      *ABS*:0000003e __SP_H__
     /tmp/cclESOfi.s:4      *ABS*:0000003d __SP_L__
     /tmp/cclESOfi.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cclESOfi.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cclESOfi.s:88     .text:00000000 _ZN4UARTC2Ev
     /tmp/cclESOfi.s:119    .text:0000000c _ZN4UARTC1Ev
     /tmp/cclESOfi.s:151    .text:00000018 _ZN4UART3putEPc
     /tmp/cclESOfi.s:196    .text:0000002c _ZN4UART3putEih
     /tmp/cclESOfi.s:342    .text:000000f2 _ZN4UART4sendEh
     /tmp/cclESOfi.s:366    .text:000000fa _ZN4UART3getEv

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__divmodhi4
