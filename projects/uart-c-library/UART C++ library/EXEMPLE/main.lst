   1               		.file	"main.cpp"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  84               		.global __do_global_ctors
  85               		.section .ctors,"a",@progbits
  86 0000 0000      		.word	pm(_GLOBAL__I_uart)
  87               		.text
  92               	_Z41__static_initialization_and_destruction_0ii:
   1:main.cpp      **** /***************************************************************************
   2:main.cpp      ****  *   Copyright (C) 2008 by Damian Kmiecik                                  *
   3:main.cpp      ****  *                                                                         *
   4:main.cpp      ****  *   This program is free software; you can redistribute it and/or modify  *
   5:main.cpp      ****  *   it under the terms of the GNU General Public License as published by  *
   6:main.cpp      ****  *   the Free Software Foundation; either version 2 of the License, or     *
   7:main.cpp      ****  *   (at your option) any later version.                                   *
   8:main.cpp      ****  *                                                                         *
   9:main.cpp      ****  *   This program is distributed in the hope that it will be useful,       *
  10:main.cpp      ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  11:main.cpp      ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  12:main.cpp      ****  *   GNU General Public License for more details.                          *
  13:main.cpp      ****  *                                                                         *
  14:main.cpp      ****  *   You should have received a copy of the GNU General Public License     *
  15:main.cpp      ****  *   along with this program; if not, write to the                         *
  16:main.cpp      ****  *   Free Software Foundation, Inc.,                                       *
  17:main.cpp      ****  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  18:main.cpp      ****  *                                                                         *
  19:main.cpp      ****  ***************************************************************************/
  20:main.cpp      **** /***************************************************************************
  21:main.cpp      ****  *                                                                         *
  22:main.cpp      ****  *                               MAIN FILE                                 *
  23:main.cpp      ****  *                                                                         *
  24:main.cpp      ****  ***************************************************************************/
  25:main.cpp      **** //Headers
  26:main.cpp      **** #include "config/global.h"		//GLOBAL DEFINITIONS
  27:main.cpp      **** #include <avr/io.h>			//I/O
  28:main.cpp      **** #include <inttypes.h>			//
  29:main.cpp      **** #include <util/delay.h>			//SIMPLE DELAYS
  30:main.cpp      **** #include <avr/pgmspace.h>		//PGM space read
  31:main.cpp      **** #include "uart.h"			//UART transmission
  32:main.cpp      **** #include <math.h>			//Math
  33:main.cpp      **** //Main objects
  34:main.cpp      **** UART uart;				//make UART object
  35:main.cpp      **** //Main function
  36:main.cpp      **** int main(void) {
  37:main.cpp      **** 
  38:main.cpp      **** #define ACK		0x5B
  39:main.cpp      **** 	
  40:main.cpp      **** 
  41:main.cpp      **** 	ADMUX = _BV(REFS0) | _BV(MUX2) | _BV(ADLAR);
  42:main.cpp      **** 	SFIOR = _BV(ADTS0);
  43:main.cpp      **** 	ADCSRA = _BV(ADEN);
  44:main.cpp      **** 
  45:main.cpp      **** while(1) {
  46:main.cpp      **** 
  47:main.cpp      **** 	uart.get();
  48:main.cpp      **** 	uart.send(1);
  49:main.cpp      **** 	uint8_t g = uart.get();
  50:main.cpp      **** 	uint8_t h = uart.get();
  51:main.cpp      **** 	uint16_t b = g * h;
  52:main.cpp      **** 
  53:main.cpp      **** 	for(uint16_t i = 0; i < b; i++) {
  54:main.cpp      **** 		ADCSRA |= _BV(ADSC);
  55:main.cpp      **** 		loop_until_bit_is_set(ADCSRA, ADSC);
  56:main.cpp      **** 		uart.send(ADCH);
  57:main.cpp      **** 	}
  58:main.cpp      **** 	
  59:main.cpp      **** }
  60:main.cpp      **** 	return 0;
  61:main.cpp      **** }
  94               	.LM0:
  95               	.LFBB1:
  96               	/* prologue: frame size=0 */
  97               	/* prologue end (size=0) */
  98 0000 0197      		sbiw r24,1
  99 0002 01F4      		brne .L5
 101               	.LM1:
 102 0004 6F5F      		subi r22,lo8(-1)
 103 0006 7F4F      		sbci r23,hi8(-1)
 104 0008 01F4      		brne .L5
 106               	.LM2:
 107 000a 80E0      		ldi r24,lo8(uart)
 108 000c 90E0      		ldi r25,hi8(uart)
 109 000e 0E94 0000 		call _ZN4UARTC1Ev
 110               	.L5:
 111 0012 0895      		ret
 112               	/* epilogue: frame size=0 */
 113               	/* epilogue: noreturn */
 114               	/* epilogue end (size=0) */
 115               	/* function void __static_initialization_and_destruction_0(int, int) size 12 (12) */
 117               	.Lscope1:
 120               	_GLOBAL__I_uart:
  62:main.cpp      **** ...
 122               	.LM3:
 123               	.LFBB2:
 124               	/* prologue: frame size=0 */
 125               	/* prologue end (size=0) */
 126 0014 6FEF      		ldi r22,lo8(-1)
 127 0016 7FEF      		ldi r23,hi8(-1)
 128 0018 81E0      		ldi r24,lo8(1)
 129 001a 90E0      		ldi r25,hi8(1)
 130 001c 0E94 0000 		call _Z41__static_initialization_and_destruction_0ii
 131               	/* epilogue: frame size=0 */
 132 0020 0895      		ret
 133               	/* epilogue end (size=1) */
 134               	/* function (static initializers for main.cpp) size 7 (6) */
 136               	.Lscope2:
 138               	.global	main
 140               	main:
 142               	.LM4:
 143               	.LFBB3:
 144               	/* prologue: frame size=0 */
 145 0022 C0E0      		ldi r28,lo8(__stack - 0)
 146 0024 D0E0      		ldi r29,hi8(__stack - 0)
 147 0026 DEBF      		out __SP_H__,r29
 148 0028 CDBF      		out __SP_L__,r28
 149               	/* prologue end (size=4) */
 151               	.LM5:
 152 002a 84E6      		ldi r24,lo8(100)
 153 002c 87B9      		out 39-0x20,r24
 155               	.LM6:
 156 002e 80E2      		ldi r24,lo8(32)
 157 0030 80BF      		out 80-0x20,r24
 159               	.LM7:
 160 0032 80E8      		ldi r24,lo8(-128)
 161 0034 86B9      		out 38-0x20,r24
 162 0036 80E0      		ldi r24,lo8(uart)
 163 0038 E82E      		mov r14,r24
 164 003a 80E0      		ldi r24,hi8(uart)
 165 003c F82E      		mov r15,r24
 166               	.L9:
 167               	.LBB2:
 169               	.LM8:
 170 003e C701      		movw r24,r14
 171 0040 0E94 0000 		call _ZN4UART3getEv
 173               	.LM9:
 174 0044 61E0      		ldi r22,lo8(1)
 175 0046 C701      		movw r24,r14
 176 0048 0E94 0000 		call _ZN4UART4sendEh
 178               	.LM10:
 179 004c C701      		movw r24,r14
 180 004e 0E94 0000 		call _ZN4UART3getEv
 181 0052 182F      		mov r17,r24
 183               	.LM11:
 184 0054 C701      		movw r24,r14
 185 0056 0E94 0000 		call _ZN4UART3getEv
 187               	.LM12:
 188 005a 819F      		mul r24,r17
 189 005c 8001      		movw r16,r0
 190 005e 1124      		clr r1
 191 0060 C0E0      		ldi r28,lo8(0)
 192 0062 D0E0      		ldi r29,hi8(0)
 193 0064 00C0      		rjmp .L10
 194               	.L11:
 195               	.LBB3:
 197               	.LM13:
 198 0066 369A      		sbi 38-0x20,6
 199               	.L12:
 201               	.LM14:
 202 0068 369B      		sbis 38-0x20,6
 203 006a 00C0      		rjmp .L12
 205               	.LM15:
 206 006c 65B1      		in r22,37-0x20
 207 006e C701      		movw r24,r14
 208 0070 0E94 0000 		call _ZN4UART4sendEh
 210               	.LM16:
 211 0074 2196      		adiw r28,1
 212               	.L10:
 213 0076 C017      		cp r28,r16
 214 0078 D107      		cpc r29,r17
 215 007a 01F4      		brne .L11
 216 007c 00C0      		rjmp .L9
 217               	.LBE3:
 218               	.LBE2:
 219               	/* epilogue: frame size=0 */
 220               	/* epilogue: noreturn */
 221               	/* epilogue end (size=0) */
 222               	/* function int main() size 46 (42) */
 231               	.Lscope3:
 232               	.global	uart
 233               	.global	uart
 234               		.section .bss
 237               	uart:
 238 0000 00        		.skip 1,0
 240               		.text
 242               	.Letext0:
 243               	/* File "main.cpp": code   65 = 0x0041 (  60), prologues   4, epilogues   1 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccFsCXwf.s:2      *ABS*:0000003f __SREG__
     /tmp/ccFsCXwf.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccFsCXwf.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccFsCXwf.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccFsCXwf.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccFsCXwf.s:120    .text:00000014 _GLOBAL__I_uart
     /tmp/ccFsCXwf.s:92     .text:00000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccFsCXwf.s:237    .bss:00000000 uart
     /tmp/ccFsCXwf.s:140    .text:00000022 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__do_global_ctors
_ZN4UARTC1Ev
__stack
_ZN4UART3getEv
_ZN4UART4sendEh
