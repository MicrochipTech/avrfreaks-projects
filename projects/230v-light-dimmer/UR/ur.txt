/*****************************************************
This program was produced by the
CodeWizardAVR V1.24.6 Standard
Automatic Program Generator
© Copyright 1998-2005 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com
e-mail:office@hpinfotech.com

Project : 
Version : 
Date    : 09-06-2005
Author  : Lars Chr Fergo
Company : Denmark
Comments: 


Chip type           : ATmega16
Program type        : Application
Clock frequency     : 8,000000 MHz
Memory model        : Small
External SRAM size  : 0
Data Stack size     : 256
*****************************************************/

#include <mega16.h>             



// Alphanumeric LCD Module functions
#asm
   .equ __lcd_port=0x15 ;PORTC
#endasm
#include <lcd.h>          



#define		B1				PINA.0  
#define		B2				PINA.1
#define		B3				PINA.2
#define		B4				PINA.3       
#define		LED				DDRB.0             
#define		BUZZ1				PORTB.4		//BUZZ OUTPUT
#define		BUZZ2				PORTB.5		//BUZZ OUTPUT  
#define		LYS				PORTB.6		//BUZZ OUTPUT
#define		ON				1
#define     	OFF				0    


int v,t,u,h,sec,ven,vti,vhu,vtu,vtitu;        

// Timer 1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
// Reinitialize Timer 1 value
TCNT1H=0xF4;
TCNT1L=0x24;      
//++v;
//lcd_gotoxy(0,0);
//lcd_putchar(48+v);
// Place your code here

}

// Timer 2 overflow interrupt service routine
interrupt [TIM2_OVF] void timer2_ovf_isr(void)
{
// Reinitialize Timer 2 value
TCNT2=0xF4;
// Place your code here

}

// Declare your global variables here

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0x00;

// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x40;

// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0x00;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=FFh
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 8000,000 kHz
// Mode: Normal top=FFFFh
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer 1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x04;
TCNT1H=0xF4;
TCNT1L=0x24;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: 8000,000 kHz
// Mode: Normal top=FFh
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x01;
TCNT2=0xF4;
OCR2=0x24;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x44;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// LCD module initialization
lcd_init(16);

// Global enable interrupts
#asm("sei")

while (1)
      {
      if (B4==0)
      {        
     
 
     
      }        
 

  if (B4==1)
    {         
  
        LYS = 0;    
 
         if (B1==0)
      {          
       
        ++v;   
  
      }             
               if (B3==0)
      {          
       
        --v;   
  
      }           if (B4==1)
    {         
  
        LYS = 0;    
 
         if (B1==0)
      {          
       
        ++v;   
  
      }             
               if (B3==0)
      {          
       
        --v;   
  
      }         
    
 
   
 for(h=0;h<v;)
 {      
       #asm("nop");      
        ++h;
 }  
        LYS = 1;  
    
 
   
 for(h=0;h<v;)
 {      
       #asm("nop");      
        ++h;
 }  
        LYS = 1;  
    ++u;   
    ++sec;    
       ++ven;
  if (ven==10)
  {ven=0;
  ++vti;
  if(vti==10)
  {vti=0;
   ++vhu;
   if(vhu==10)
   {vhu=0;
   ++vtu;
   if(vtu==10)
   {vtu=0;
   ++vtitu;
   }
   }
   }
}    
    
 if(u==1800)               // lys dæmper tid      20 min
 { u=0;
  ++v;    

  } 
    
/*
 if(sec==120)            // tid
 { sec=0; 
      
  ++ven;
  if (ven==10)
  {ven=0;
  ++vti;
  if(vti==10)
  {vti=0;
   ++vhu;
   if(vhu==10)
   {vhu=0;
   ++vtu;
   if(vtu==10)
   {vtu=0;
   ++vtitu;
   }
   }
   }
   }           */
   
  /*
          lcd_gotoxy(0,0);
         lcd_putchar(48+vtitu);      
         lcd_gotoxy(1,0);
         lcd_putchar(48+vtu);
         lcd_gotoxy(2,0);
         lcd_putchar(48+vhu);
         lcd_gotoxy(3,0);
         lcd_putchar(48+vti);
         lcd_gotoxy(4,0);
         lcd_putchar(48+ven);        */
  }              
  if(B2==0) {

 
          lcd_gotoxy(0,0);
         lcd_putchar(48+vtitu);      
         lcd_gotoxy(1,0);
         lcd_putchar(48+vtu);
         lcd_gotoxy(2,0);
         lcd_putchar(48+vhu);
         lcd_gotoxy(3,0);
         lcd_putchar(48+vti);
         lcd_gotoxy(4,0);
         lcd_putchar(48+ven);    
         while(B2==0) ;   
         }
             
 
      };
}
