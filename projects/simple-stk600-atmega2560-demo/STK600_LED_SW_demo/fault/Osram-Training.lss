
Osram-Training.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800202  00800202  000005d8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f3  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b8  00000000  00000000  000006eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000095  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013a  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_11>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_21>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_23>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
 122:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_23>:

volatile unsigned long i;


ISR(TIMER0_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	00 90 5b 00 	lds	r0, 0x005B
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
      PORTC RESET LED_mask;  				// Turn on
 14e:	a8 e2       	ldi	r26, 0x28	; 40
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e8 e2       	ldi	r30, 0x28	; 40
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	98 2f       	mov	r25, r24
 15a:	80 91 00 02 	lds	r24, 0x0200
 15e:	80 95       	com	r24
 160:	89 23       	and	r24, r25
 162:	8c 93       	st	X, r24

}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	00 92 5b 00 	sts	0x005B, r0
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	00 90 5b 00 	lds	r0, 0x005B
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
      PORTC SET LED_mask;   				// Turn off
 1a8:	a8 e2       	ldi	r26, 0x28	; 40
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	e8 e2       	ldi	r30, 0x28	; 40
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	80 91 00 02 	lds	r24, 0x0200
 1b6:	89 2b       	or	r24, r25
 1b8:	8c 93       	st	X, r24
}
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	00 92 5b 00 	sts	0x005B, r0
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_11>:

ISR(PCINT2_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	00 90 5b 00 	lds	r0, 0x005B
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	switch_temp = ~PINK;
 206:	e6 e0       	ldi	r30, 0x06	; 6
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	80 81       	ld	r24, Z
 20c:	80 95       	com	r24
 20e:	80 93 05 02 	sts	0x0205, r24
	if (switch_temp != 0x00){					// Skip if button release
 212:	80 91 05 02 	lds	r24, 0x0205
 216:	88 23       	and	r24, r24
 218:	09 f4       	brne	.+2      	; 0x21c <__vector_11+0x42>
 21a:	4f c0       	rjmp	.+158    	; 0x2ba <__vector_11+0xe0>
		pulse_incr = 0x10;					// Maximum step = 16
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	80 93 01 02 	sts	0x0201, r24
		for (i=0x80;i > 0x00; i = i >> 1){
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	80 93 06 02 	sts	0x0206, r24
 22e:	90 93 07 02 	sts	0x0207, r25
 232:	a0 93 08 02 	sts	0x0208, r26
 236:	b0 93 09 02 	sts	0x0209, r27
 23a:	2f c0       	rjmp	.+94     	; 0x29a <__vector_11+0xc0>
			if (switch_temp & i) break;
 23c:	80 91 05 02 	lds	r24, 0x0205
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	80 91 06 02 	lds	r24, 0x0206
 24c:	90 91 07 02 	lds	r25, 0x0207
 250:	a0 91 08 02 	lds	r26, 0x0208
 254:	b0 91 09 02 	lds	r27, 0x0209
 258:	82 23       	and	r24, r18
 25a:	93 23       	and	r25, r19
 25c:	a4 23       	and	r26, r20
 25e:	b5 23       	and	r27, r21
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	a1 05       	cpc	r26, r1
 264:	b1 05       	cpc	r27, r1
 266:	29 f5       	brne	.+74     	; 0x2b2 <__vector_11+0xd8>
			pulse_incr -= 2;
 268:	80 91 01 02 	lds	r24, 0x0201
 26c:	82 50       	subi	r24, 0x02	; 2
 26e:	80 93 01 02 	sts	0x0201, r24
ISR(PCINT2_vect)
{
	switch_temp = ~PINK;
	if (switch_temp != 0x00){					// Skip if button release
		pulse_incr = 0x10;					// Maximum step = 16
		for (i=0x80;i > 0x00; i = i >> 1){
 272:	80 91 06 02 	lds	r24, 0x0206
 276:	90 91 07 02 	lds	r25, 0x0207
 27a:	a0 91 08 02 	lds	r26, 0x0208
 27e:	b0 91 09 02 	lds	r27, 0x0209
 282:	b6 95       	lsr	r27
 284:	a7 95       	ror	r26
 286:	97 95       	ror	r25
 288:	87 95       	ror	r24
 28a:	80 93 06 02 	sts	0x0206, r24
 28e:	90 93 07 02 	sts	0x0207, r25
 292:	a0 93 08 02 	sts	0x0208, r26
 296:	b0 93 09 02 	sts	0x0209, r27
 29a:	80 91 06 02 	lds	r24, 0x0206
 29e:	90 91 07 02 	lds	r25, 0x0207
 2a2:	a0 91 08 02 	lds	r26, 0x0208
 2a6:	b0 91 09 02 	lds	r27, 0x0209
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	a1 05       	cpc	r26, r1
 2ae:	b1 05       	cpc	r27, r1
 2b0:	29 f6       	brne	.-118    	; 0x23c <__vector_11+0x62>
			if (switch_temp & i) break;
			pulse_incr -= 2;
		}
		brightness = INCREASING;
 2b2:	10 92 03 02 	sts	0x0203, r1
		slider_value = 0x00;				// Start new cycle with LED off
 2b6:	10 92 04 02 	sts	0x0204, r1
	}
}
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	00 92 5b 00 	sts	0x005B, r0
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <timer0_init>:

void timer0_init(void)
{
 2e2:	df 93       	push	r29
 2e4:	cf 93       	push	r28
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
// NOTE: Assumes DIV8 fuse set for 1 MHz operation
// 8-bit counter means overflow interrupt every 61 Hz to turn on the LED
// Variable Compare_A interrupt in between OVF to turn off the LED
	OCR0A = slider_value;
 2ea:	e7 e4       	ldi	r30, 0x47	; 71
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 91 04 02 	lds	r24, 0x0204
 2f2:	80 83       	st	Z, r24
  	TCCR0A = 0x03; 							// Fast PWM Mode
 2f4:	e4 e4       	ldi	r30, 0x44	; 68
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	80 83       	st	Z, r24
	TCCR0B = 0x03;							// Set prescaler to 64
 2fc:	e5 e4       	ldi	r30, 0x45	; 69
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	80 83       	st	Z, r24
	TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);		// Compare A and OVF Interupt enabled 
 304:	ae e6       	ldi	r26, 0x6E	; 110
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	ee e6       	ldi	r30, 0x6E	; 110
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	83 60       	ori	r24, 0x03	; 3
 310:	8c 93       	st	X, r24
	TCNT0  = 0x00;
 312:	e6 e4       	ldi	r30, 0x46	; 70
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	10 82       	st	Z, r1
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	08 95       	ret

0000031e <LED_init>:

void LED_init(void)
{
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0xFF;							// All PORTC set (LED off)
 326:	e8 e2       	ldi	r30, 0x28	; 40
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	80 83       	st	Z, r24
	DDRC = 0xFF;							// All PORTC output
 32e:	e7 e2       	ldi	r30, 0x27	; 39
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	80 83       	st	Z, r24
}
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <SW_init>:

void SW_init(void)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	PORTK = 0xFF;							// All PORTK set
 344:	e8 e0       	ldi	r30, 0x08	; 8
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	80 83       	st	Z, r24
	DDRK = 0x00;							// All PORTK input
 34c:	e7 e0       	ldi	r30, 0x07	; 7
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	10 82       	st	Z, r1
	PCICR = 1 << PCIE2;						// Enable pin change interrupt 16..23
 352:	e8 e6       	ldi	r30, 0x68	; 104
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	80 83       	st	Z, r24
	PCMSK2 = 0xFF;							// Enable mask for PCINT
 35a:	ed e6       	ldi	r30, 0x6D	; 109
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	80 83       	st	Z, r24
}
 362:	cf 91       	pop	r28
 364:	df 91       	pop	r29
 366:	08 95       	ret

00000368 <power_init>:

void power_init(void)
{
 368:	df 93       	push	r29
 36a:	cf 93       	push	r28
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
	PRR0 = 0xCF;							// Only Timer0 enabled
 370:	e4 e6       	ldi	r30, 0x64	; 100
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	8f ec       	ldi	r24, 0xCF	; 207
 376:	80 83       	st	Z, r24
	PRR1 = 0x3F;							// All disabled
 378:	e5 e6       	ldi	r30, 0x65	; 101
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	8f e3       	ldi	r24, 0x3F	; 63
 37e:	80 83       	st	Z, r24
	SMCR = 0x01;							// Enable Idle mode
 380:	e3 e5       	ldi	r30, 0x53	; 83
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 83       	st	Z, r24
}
 388:	cf 91       	pop	r28
 38a:	df 91       	pop	r29
 38c:	08 95       	ret

0000038e <main>:

int main(void)
{
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	28 97       	sbiw	r28, 0x08	; 8
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
	timer0_init();
 3a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <timer0_init>

	LED_init();
 3a6:	0e 94 8f 01 	call	0x31e	; 0x31e <LED_init>
	SW_init();
 3aa:	0e 94 9e 01 	call	0x33c	; 0x33c <SW_init>
	power_init();
 3ae:	0e 94 b4 01 	call	0x368	; 0x368 <power_init>

	sei();
 3b2:	78 94       	sei

	while(1)
	{

		_SLEEP();
 3b4:	88 95       	sleep
		
		if(brightness == INCREASING)
 3b6:	80 91 03 02 	lds	r24, 0x0203
 3ba:	88 23       	and	r24, r24
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <main+0x32>
 3be:	4d c0       	rjmp	.+154    	; 0x45a <main+0xcc>
		{
			if(slider_value < 240)				// pulse_incr can = 16 without overflow
 3c0:	80 91 04 02 	lds	r24, 0x0204
 3c4:	80 3f       	cpi	r24, 0xF0	; 240
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <main+0x3c>
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <main+0xc4>
			{
				slider_value += pulse_incr;
 3ca:	90 91 04 02 	lds	r25, 0x0204
 3ce:	80 91 01 02 	lds	r24, 0x0201
 3d2:	89 0f       	add	r24, r25
 3d4:	80 93 04 02 	sts	0x0204, r24
				slider_temp = (1 + slider_value + (slider_value * slider_value / 2)) >> 7;
 3d8:	80 91 04 02 	lds	r24, 0x0204
 3dc:	88 2f       	mov	r24, r24
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	9c 01       	movw	r18, r24
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	3c 83       	std	Y+4, r19	; 0x04
 3e8:	2b 83       	std	Y+3, r18	; 0x03
 3ea:	80 91 04 02 	lds	r24, 0x0204
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	80 91 04 02 	lds	r24, 0x0204
 3f6:	88 2f       	mov	r24, r24
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	ac 01       	movw	r20, r24
 3fc:	24 9f       	mul	r18, r20
 3fe:	c0 01       	movw	r24, r0
 400:	25 9f       	mul	r18, r21
 402:	90 0d       	add	r25, r0
 404:	34 9f       	mul	r19, r20
 406:	90 0d       	add	r25, r0
 408:	11 24       	eor	r1, r1
 40a:	9e 83       	std	Y+6, r25	; 0x06
 40c:	8d 83       	std	Y+5, r24	; 0x05
 40e:	8d 81       	ldd	r24, Y+5	; 0x05
 410:	9e 81       	ldd	r25, Y+6	; 0x06
 412:	99 23       	and	r25, r25
 414:	34 f4       	brge	.+12     	; 0x422 <main+0x94>
 416:	2d 81       	ldd	r18, Y+5	; 0x05
 418:	3e 81       	ldd	r19, Y+6	; 0x06
 41a:	2f 5f       	subi	r18, 0xFF	; 255
 41c:	3f 4f       	sbci	r19, 0xFF	; 255
 41e:	3e 83       	std	Y+6, r19	; 0x06
 420:	2d 83       	std	Y+5, r18	; 0x05
 422:	8d 81       	ldd	r24, Y+5	; 0x05
 424:	9e 81       	ldd	r25, Y+6	; 0x06
 426:	95 95       	asr	r25
 428:	87 95       	ror	r24
 42a:	4b 81       	ldd	r20, Y+3	; 0x03
 42c:	5c 81       	ldd	r21, Y+4	; 0x04
 42e:	84 0f       	add	r24, r20
 430:	95 1f       	adc	r25, r21
 432:	88 0f       	add	r24, r24
 434:	89 2f       	mov	r24, r25
 436:	88 1f       	adc	r24, r24
 438:	99 0b       	sbc	r25, r25
 43a:	90 93 0b 02 	sts	0x020B, r25
 43e:	80 93 0a 02 	sts	0x020A, r24
				OCR0A = slider_temp;
 442:	e7 e4       	ldi	r30, 0x47	; 71
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 91 0a 02 	lds	r24, 0x020A
 44a:	90 91 0b 02 	lds	r25, 0x020B
 44e:	80 83       	st	Z, r24
 450:	b1 cf       	rjmp	.-158    	; 0x3b4 <main+0x26>
			}
			else								// slider_value >= 240
				brightness = DECREASING;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 03 02 	sts	0x0203, r24
 458:	ad cf       	rjmp	.-166    	; 0x3b4 <main+0x26>
		}
		else
		{
			if(slider_value > 0) 
 45a:	80 91 04 02 	lds	r24, 0x0204
 45e:	88 23       	and	r24, r24
 460:	09 f4       	brne	.+2      	; 0x464 <main+0xd6>
 462:	46 c0       	rjmp	.+140    	; 0x4f0 <main+0x162>
			{
				slider_value -= pulse_incr;
 464:	90 91 04 02 	lds	r25, 0x0204
 468:	80 91 01 02 	lds	r24, 0x0201
 46c:	59 2f       	mov	r21, r25
 46e:	58 1b       	sub	r21, r24
 470:	85 2f       	mov	r24, r21
 472:	80 93 04 02 	sts	0x0204, r24
				slider_temp = (1 + slider_value + (slider_value * slider_value / 2)) >> 7;
 476:	80 91 04 02 	lds	r24, 0x0204
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	9c 01       	movw	r18, r24
 480:	2f 5f       	subi	r18, 0xFF	; 255
 482:	3f 4f       	sbci	r19, 0xFF	; 255
 484:	3a 83       	std	Y+2, r19	; 0x02
 486:	29 83       	std	Y+1, r18	; 0x01
 488:	80 91 04 02 	lds	r24, 0x0204
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	80 91 04 02 	lds	r24, 0x0204
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	ac 01       	movw	r20, r24
 49a:	24 9f       	mul	r18, r20
 49c:	c0 01       	movw	r24, r0
 49e:	25 9f       	mul	r18, r21
 4a0:	90 0d       	add	r25, r0
 4a2:	34 9f       	mul	r19, r20
 4a4:	90 0d       	add	r25, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	98 87       	std	Y+8, r25	; 0x08
 4aa:	8f 83       	std	Y+7, r24	; 0x07
 4ac:	8f 81       	ldd	r24, Y+7	; 0x07
 4ae:	98 85       	ldd	r25, Y+8	; 0x08
 4b0:	99 23       	and	r25, r25
 4b2:	34 f4       	brge	.+12     	; 0x4c0 <main+0x132>
 4b4:	2f 81       	ldd	r18, Y+7	; 0x07
 4b6:	38 85       	ldd	r19, Y+8	; 0x08
 4b8:	2f 5f       	subi	r18, 0xFF	; 255
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	38 87       	std	Y+8, r19	; 0x08
 4be:	2f 83       	std	Y+7, r18	; 0x07
 4c0:	8f 81       	ldd	r24, Y+7	; 0x07
 4c2:	98 85       	ldd	r25, Y+8	; 0x08
 4c4:	95 95       	asr	r25
 4c6:	87 95       	ror	r24
 4c8:	49 81       	ldd	r20, Y+1	; 0x01
 4ca:	5a 81       	ldd	r21, Y+2	; 0x02
 4cc:	84 0f       	add	r24, r20
 4ce:	95 1f       	adc	r25, r21
 4d0:	88 0f       	add	r24, r24
 4d2:	89 2f       	mov	r24, r25
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 0b       	sbc	r25, r25
 4d8:	90 93 0b 02 	sts	0x020B, r25
 4dc:	80 93 0a 02 	sts	0x020A, r24
				OCR0A = slider_temp;
 4e0:	e7 e4       	ldi	r30, 0x47	; 71
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 91 0a 02 	lds	r24, 0x020A
 4e8:	90 91 0b 02 	lds	r25, 0x020B
 4ec:	80 83       	st	Z, r24
 4ee:	62 cf       	rjmp	.-316    	; 0x3b4 <main+0x26>
			}
			else {								// slider_value = 0
				brightness = INCREASING;
 4f0:	10 92 03 02 	sts	0x0203, r1
				if(direction == LEFT) 
 4f4:	80 91 02 02 	lds	r24, 0x0202
 4f8:	88 23       	and	r24, r24
 4fa:	89 f4       	brne	.+34     	; 0x51e <main+0x190>
				{
					LED_mask = LED_mask << 1;
 4fc:	80 91 00 02 	lds	r24, 0x0200
 500:	88 0f       	add	r24, r24
 502:	80 93 00 02 	sts	0x0200, r24
					if (LED_mask == 0x00) {LED_mask = 0x40; direction = RIGHT;}
 506:	80 91 00 02 	lds	r24, 0x0200
 50a:	88 23       	and	r24, r24
 50c:	09 f0       	breq	.+2      	; 0x510 <main+0x182>
 50e:	52 cf       	rjmp	.-348    	; 0x3b4 <main+0x26>
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	80 93 00 02 	sts	0x0200, r24
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 02 02 	sts	0x0202, r24
 51c:	4b cf       	rjmp	.-362    	; 0x3b4 <main+0x26>
				}
				else 							// direction = RIGHT
				{
					LED_mask = LED_mask >> 1;
 51e:	80 91 00 02 	lds	r24, 0x0200
 522:	86 95       	lsr	r24
 524:	80 93 00 02 	sts	0x0200, r24
					if (LED_mask == 0x00) {LED_mask = 0x02; direction = LEFT;}
 528:	80 91 00 02 	lds	r24, 0x0200
 52c:	88 23       	and	r24, r24
 52e:	09 f0       	breq	.+2      	; 0x532 <main+0x1a4>
 530:	41 cf       	rjmp	.-382    	; 0x3b4 <main+0x26>
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	80 93 00 02 	sts	0x0200, r24
 538:	10 92 02 02 	sts	0x0202, r1
 53c:	3b cf       	rjmp	.-394    	; 0x3b4 <main+0x26>

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
