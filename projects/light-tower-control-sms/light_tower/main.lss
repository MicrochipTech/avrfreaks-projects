
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000146  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800080  00000166  000001da  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000034  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000be  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000007c  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000db  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000070  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e6 e4       	ldi	r30, 0x46	; 70
  26:	f1 e0       	ldi	r31, 0x01	; 1
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	a0 38       	cpi	r26, 0x80	; 128
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e8       	ldi	r26, 0x80	; 128
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a4 3d       	cpi	r26, 0xD4	; 212
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	02 d0       	rcall	.+4      	; 0x4c <main>
  48:	7c c0       	rjmp	.+248    	; 0x142 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <main>:

int U, j;
char cmd_buff[80];							// buffer to construct parsable string terminating with CR
		
void main(void)								//main function starts here
{  
  4c:	1f 93       	push	r17
DDRB=0xFF;									//make PORTB an output
  4e:	9f ef       	ldi	r25, 0xFF	; 255
  50:	97 bb       	out	0x17, r25	; 23
UCR |= (1 << RXEN) | (1 << TXEN); 			// Turn on the transmission and reception circuitry 
  52:	8a b1       	in	r24, 0x0a	; 10
  54:	88 61       	ori	r24, 0x18	; 24
  56:	8a b9       	out	0x0a, r24	; 10
UCR = (1<<RXCIE)|(1<<TXEN)|(1<<RXEN);		// 8 Databits, receive and transmit enabled, receive complete interrupt enabled
  58:	88 e9       	ldi	r24, 0x98	; 152
  5a:	8a b9       	out	0x0a, r24	; 10
UBRR = FOSC / (16 * BAUD) - 1;				// Set baudrate
  5c:	83 e3       	ldi	r24, 0x33	; 51
  5e:	89 b9       	out	0x09, r24	; 9
PORTB = 0xFF;
  60:	98 bb       	out	0x18, r25	; 24
		{				
		if (strncmp(cmd_buff,"\x0Ayellow",6) == 0 ) {PORTB &= ~(1<<PINB1);}	//turn ON yellow loght by LOW on pin (Opto board needs sink)
		if (strncmp(cmd_buff,"\x0Ared",3) == 0 ) {PORTB &= ~(1<<PINB2);}				//turn ON red light by LOW on pin PORTB
		if (strncmp(cmd_buff,"\x0Agreen",5) == 0 ) {PORTB &= ~(1<<PINB3);}				//turn ON blue light by LOW on pin PORTB
		if (strncmp(cmd_buff,"\x0Awhite",5) == 0 ) {PORTB &= ~(1<<PINB4);}			//turn ON white light by LOW on pin PORTB
		if (strncmp(cmd_buff,"\x0Aoff",3) == 0 ) {PORTB = 0xFF;}						//turn ON white light by LOW on pin PORTB
  62:	1f ef       	ldi	r17, 0xFF	; 255
UCR = (1<<RXCIE)|(1<<TXEN)|(1<<RXEN);		// 8 Databits, receive and transmit enabled, receive complete interrupt enabled
UBRR = FOSC / (16 * BAUD) - 1;				// Set baudrate
PORTB = 0xFF;
while (1==1){								//cycle forever - main loop with no exit option
	
	while ((USR & (1 << RXC)) == 0) {  };	// Do nothing until data have been received and is ready to be read from UDR 
  64:	5f 9b       	sbis	0x0b, 7	; 11
  66:	fe cf       	rjmp	.-4      	; 0x64 <main+0x18>
	U = UDR;								// move the RXed character from UDR register to U variable
  68:	2c b1       	in	r18, 0x0c	; 12
  6a:	82 2f       	mov	r24, r18
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	90 93 d3 00 	sts	0x00D3, r25
  72:	80 93 d2 00 	sts	0x00D2, r24
	if (U == 0x0D)							// carriage return? if yes end of line and compare for cmd_buff
  76:	0d 97       	sbiw	r24, 0x0d	; 13
  78:	e9 f5       	brne	.+122    	; 0xf4 <__stack+0x15>
		{				
		if (strncmp(cmd_buff,"\x0Ayellow",6) == 0 ) {PORTB &= ~(1<<PINB1);}	//turn ON yellow loght by LOW on pin (Opto board needs sink)
  7a:	46 e0       	ldi	r20, 0x06	; 6
  7c:	50 e0       	ldi	r21, 0x00	; 0
  7e:	60 e6       	ldi	r22, 0x60	; 96
  80:	70 e0       	ldi	r23, 0x00	; 0
  82:	82 e8       	ldi	r24, 0x82	; 130
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	4d d0       	rcall	.+154    	; 0x122 <strncmp>
  88:	28 2f       	mov	r18, r24
  8a:	39 2f       	mov	r19, r25
  8c:	23 2b       	or	r18, r19
  8e:	09 f4       	brne	.+2      	; 0x92 <main+0x46>
  90:	c1 98       	cbi	0x18, 1	; 24
		if (strncmp(cmd_buff,"\x0Ared",3) == 0 ) {PORTB &= ~(1<<PINB2);}				//turn ON red light by LOW on pin PORTB
  92:	43 e0       	ldi	r20, 0x03	; 3
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	68 e6       	ldi	r22, 0x68	; 104
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	82 e8       	ldi	r24, 0x82	; 130
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	41 d0       	rcall	.+130    	; 0x122 <strncmp>
  a0:	28 2f       	mov	r18, r24
  a2:	39 2f       	mov	r19, r25
  a4:	23 2b       	or	r18, r19
  a6:	09 f4       	brne	.+2      	; 0xaa <main+0x5e>
  a8:	c2 98       	cbi	0x18, 2	; 24
		if (strncmp(cmd_buff,"\x0Agreen",5) == 0 ) {PORTB &= ~(1<<PINB3);}				//turn ON blue light by LOW on pin PORTB
  aa:	45 e0       	ldi	r20, 0x05	; 5
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	6d e6       	ldi	r22, 0x6D	; 109
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	82 e8       	ldi	r24, 0x82	; 130
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	35 d0       	rcall	.+106    	; 0x122 <strncmp>
  b8:	28 2f       	mov	r18, r24
  ba:	39 2f       	mov	r19, r25
  bc:	23 2b       	or	r18, r19
  be:	09 f4       	brne	.+2      	; 0xc2 <main+0x76>
  c0:	c3 98       	cbi	0x18, 3	; 24
		if (strncmp(cmd_buff,"\x0Awhite",5) == 0 ) {PORTB &= ~(1<<PINB4);}			//turn ON white light by LOW on pin PORTB
  c2:	45 e0       	ldi	r20, 0x05	; 5
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	64 e7       	ldi	r22, 0x74	; 116
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	82 e8       	ldi	r24, 0x82	; 130
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	29 d0       	rcall	.+82     	; 0x122 <strncmp>
  d0:	28 2f       	mov	r18, r24
  d2:	39 2f       	mov	r19, r25
  d4:	23 2b       	or	r18, r19
  d6:	09 f4       	brne	.+2      	; 0xda <main+0x8e>
  d8:	c4 98       	cbi	0x18, 4	; 24
		if (strncmp(cmd_buff,"\x0Aoff",3) == 0 ) {PORTB = 0xFF;}						//turn ON white light by LOW on pin PORTB
  da:	43 e0       	ldi	r20, 0x03	; 3
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	6b e7       	ldi	r22, 0x7B	; 123
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	82 e8       	ldi	r24, 0x82	; 130
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	1d d0       	rcall	.+58     	; 0x122 <strncmp>
  e8:	28 2f       	mov	r18, r24
  ea:	39 2f       	mov	r19, r25
  ec:	23 2b       	or	r18, r19
  ee:	a1 f4       	brne	.+40     	; 0x118 <__stack+0x39>
  f0:	18 bb       	out	0x18, r17	; 24
  f2:	12 c0       	rjmp	.+36     	; 0x118 <__stack+0x39>
		j=0;																		// reset buffer counter to start from begining
		} 	else	{	
			cmd_buff[j] = U;												//copy RXd character to the buffer array
  f4:	80 91 80 00 	lds	r24, 0x0080
  f8:	90 91 81 00 	lds	r25, 0x0081
  fc:	e8 2f       	mov	r30, r24
  fe:	f9 2f       	mov	r31, r25
 100:	ee 57       	subi	r30, 0x7E	; 126
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	20 83       	st	Z, r18
			j++;															// increase the char counter for the buff array
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 81 00 	sts	0x0081, r25
 10c:	80 93 80 00 	sts	0x0080, r24
			if (j >= 79) {j=0;}												// if buffer is at 80 then reset back to zero
 110:	8f 34       	cpi	r24, 0x4F	; 79
 112:	91 05       	cpc	r25, r1
 114:	0c f4       	brge	.+2      	; 0x118 <__stack+0x39>
 116:	a6 cf       	rjmp	.-180    	; 0x64 <main+0x18>
 118:	10 92 81 00 	sts	0x0081, r1
 11c:	10 92 80 00 	sts	0x0080, r1
 120:	a1 cf       	rjmp	.-190    	; 0x64 <main+0x18>

00000122 <strncmp>:
 122:	e6 2f       	mov	r30, r22
 124:	f7 2f       	mov	r31, r23
 126:	a8 2f       	mov	r26, r24
 128:	b9 2f       	mov	r27, r25
 12a:	41 50       	subi	r20, 0x01	; 1
 12c:	50 40       	sbci	r21, 0x00	; 0
 12e:	30 f0       	brcs	.+12     	; 0x13c <strncmp+0x1a>
 130:	8d 91       	ld	r24, X+
 132:	01 90       	ld	r0, Z+
 134:	80 19       	sub	r24, r0
 136:	19 f4       	brne	.+6      	; 0x13e <strncmp+0x1c>
 138:	00 20       	and	r0, r0
 13a:	b9 f7       	brne	.-18     	; 0x12a <strncmp+0x8>
 13c:	88 1b       	sub	r24, r24
 13e:	99 0b       	sbc	r25, r25
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
