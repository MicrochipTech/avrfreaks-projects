
zoSuperModified.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000694  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000008f  00800100  00800100  00000708  2**0
                  ALLOC
  2 .stab         0000105c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db6  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e2 c0       	rjmp	.+452    	; 0x1c6 <__ctors_end>
   2:	fc c0       	rjmp	.+504    	; 0x1fc <__bad_interrupt>
   4:	fb c0       	rjmp	.+502    	; 0x1fc <__bad_interrupt>
   6:	fa c0       	rjmp	.+500    	; 0x1fc <__bad_interrupt>
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__bad_interrupt>
   a:	f8 c0       	rjmp	.+496    	; 0x1fc <__bad_interrupt>
   c:	f7 c0       	rjmp	.+494    	; 0x1fc <__bad_interrupt>
   e:	f6 c0       	rjmp	.+492    	; 0x1fc <__bad_interrupt>
  10:	f5 c0       	rjmp	.+490    	; 0x1fc <__bad_interrupt>
  12:	f4 c0       	rjmp	.+488    	; 0x1fc <__bad_interrupt>
  14:	f3 c0       	rjmp	.+486    	; 0x1fc <__bad_interrupt>
  16:	f2 c0       	rjmp	.+484    	; 0x1fc <__bad_interrupt>
  18:	f1 c0       	rjmp	.+482    	; 0x1fc <__bad_interrupt>
  1a:	f0 c0       	rjmp	.+480    	; 0x1fc <__bad_interrupt>
  1c:	ef c0       	rjmp	.+478    	; 0x1fc <__bad_interrupt>
  1e:	ee c0       	rjmp	.+476    	; 0x1fc <__bad_interrupt>
  20:	ed c0       	rjmp	.+474    	; 0x1fc <__bad_interrupt>
  22:	ec c0       	rjmp	.+472    	; 0x1fc <__bad_interrupt>
  24:	eb c0       	rjmp	.+470    	; 0x1fc <__bad_interrupt>
  26:	ea c0       	rjmp	.+468    	; 0x1fc <__bad_interrupt>
  28:	e9 c0       	rjmp	.+466    	; 0x1fc <__bad_interrupt>
  2a:	bc c2       	rjmp	.+1400   	; 0x5a4 <__vector_21>
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__bad_interrupt>
  2e:	e6 c0       	rjmp	.+460    	; 0x1fc <__bad_interrupt>
  30:	61 c1       	rjmp	.+706    	; 0x2f4 <__vector_24>
  32:	e4 c0       	rjmp	.+456    	; 0x1fc <__bad_interrupt>
  34:	f2 c1       	rjmp	.+996    	; 0x41a <__stack+0x11b>
  36:	89 c1       	rjmp	.+786    	; 0x34a <__stack+0x4b>
  38:	88 c1       	rjmp	.+784    	; 0x34a <__stack+0x4b>
  3a:	87 c1       	rjmp	.+782    	; 0x34a <__stack+0x4b>
  3c:	86 c1       	rjmp	.+780    	; 0x34a <__stack+0x4b>
  3e:	85 c1       	rjmp	.+778    	; 0x34a <__stack+0x4b>
  40:	84 c1       	rjmp	.+776    	; 0x34a <__stack+0x4b>
  42:	83 c1       	rjmp	.+774    	; 0x34a <__stack+0x4b>
  44:	78 c1       	rjmp	.+752    	; 0x336 <__stack+0x37>
  46:	81 c1       	rjmp	.+770    	; 0x34a <__stack+0x4b>
  48:	80 c1       	rjmp	.+768    	; 0x34a <__stack+0x4b>
  4a:	7f c1       	rjmp	.+766    	; 0x34a <__stack+0x4b>
  4c:	7e c1       	rjmp	.+764    	; 0x34a <__stack+0x4b>
  4e:	7d c1       	rjmp	.+762    	; 0x34a <__stack+0x4b>
  50:	7c c1       	rjmp	.+760    	; 0x34a <__stack+0x4b>
  52:	7b c1       	rjmp	.+758    	; 0x34a <__stack+0x4b>
  54:	70 c1       	rjmp	.+736    	; 0x336 <__stack+0x37>
  56:	79 c1       	rjmp	.+754    	; 0x34a <__stack+0x4b>
  58:	78 c1       	rjmp	.+752    	; 0x34a <__stack+0x4b>
  5a:	77 c1       	rjmp	.+750    	; 0x34a <__stack+0x4b>
  5c:	76 c1       	rjmp	.+748    	; 0x34a <__stack+0x4b>
  5e:	75 c1       	rjmp	.+746    	; 0x34a <__stack+0x4b>
  60:	74 c1       	rjmp	.+744    	; 0x34a <__stack+0x4b>
  62:	73 c1       	rjmp	.+742    	; 0x34a <__stack+0x4b>
  64:	d3 c1       	rjmp	.+934    	; 0x40c <__stack+0x10d>
  66:	71 c1       	rjmp	.+738    	; 0x34a <__stack+0x4b>
  68:	70 c1       	rjmp	.+736    	; 0x34a <__stack+0x4b>
  6a:	6f c1       	rjmp	.+734    	; 0x34a <__stack+0x4b>
  6c:	6e c1       	rjmp	.+732    	; 0x34a <__stack+0x4b>
  6e:	6d c1       	rjmp	.+730    	; 0x34a <__stack+0x4b>
  70:	6c c1       	rjmp	.+728    	; 0x34a <__stack+0x4b>
  72:	6b c1       	rjmp	.+726    	; 0x34a <__stack+0x4b>
  74:	c2 c1       	rjmp	.+900    	; 0x3fa <__stack+0xfb>
  76:	69 c1       	rjmp	.+722    	; 0x34a <__stack+0x4b>
  78:	68 c1       	rjmp	.+720    	; 0x34a <__stack+0x4b>
  7a:	67 c1       	rjmp	.+718    	; 0x34a <__stack+0x4b>
  7c:	66 c1       	rjmp	.+716    	; 0x34a <__stack+0x4b>
  7e:	65 c1       	rjmp	.+714    	; 0x34a <__stack+0x4b>
  80:	64 c1       	rjmp	.+712    	; 0x34a <__stack+0x4b>
  82:	63 c1       	rjmp	.+710    	; 0x34a <__stack+0x4b>
  84:	c3 c1       	rjmp	.+902    	; 0x40c <__stack+0x10d>
  86:	61 c1       	rjmp	.+706    	; 0x34a <__stack+0x4b>
  88:	60 c1       	rjmp	.+704    	; 0x34a <__stack+0x4b>
  8a:	5f c1       	rjmp	.+702    	; 0x34a <__stack+0x4b>
  8c:	5e c1       	rjmp	.+700    	; 0x34a <__stack+0x4b>
  8e:	5d c1       	rjmp	.+698    	; 0x34a <__stack+0x4b>
  90:	5c c1       	rjmp	.+696    	; 0x34a <__stack+0x4b>
  92:	5b c1       	rjmp	.+694    	; 0x34a <__stack+0x4b>
  94:	b2 c1       	rjmp	.+868    	; 0x3fa <__stack+0xfb>
  96:	59 c1       	rjmp	.+690    	; 0x34a <__stack+0x4b>
  98:	58 c1       	rjmp	.+688    	; 0x34a <__stack+0x4b>
  9a:	57 c1       	rjmp	.+686    	; 0x34a <__stack+0x4b>
  9c:	56 c1       	rjmp	.+684    	; 0x34a <__stack+0x4b>
  9e:	55 c1       	rjmp	.+682    	; 0x34a <__stack+0x4b>
  a0:	54 c1       	rjmp	.+680    	; 0x34a <__stack+0x4b>
  a2:	53 c1       	rjmp	.+678    	; 0x34a <__stack+0x4b>
  a4:	cc c1       	rjmp	.+920    	; 0x43e <__stack+0x13f>
  a6:	51 c1       	rjmp	.+674    	; 0x34a <__stack+0x4b>
  a8:	50 c1       	rjmp	.+672    	; 0x34a <__stack+0x4b>
  aa:	4f c1       	rjmp	.+670    	; 0x34a <__stack+0x4b>
  ac:	4e c1       	rjmp	.+668    	; 0x34a <__stack+0x4b>
  ae:	4d c1       	rjmp	.+666    	; 0x34a <__stack+0x4b>
  b0:	4c c1       	rjmp	.+664    	; 0x34a <__stack+0x4b>
  b2:	4b c1       	rjmp	.+662    	; 0x34a <__stack+0x4b>
  b4:	03 c2       	rjmp	.+1030   	; 0x4bc <__stack+0x1bd>
  b6:	49 c1       	rjmp	.+658    	; 0x34a <__stack+0x4b>
  b8:	48 c1       	rjmp	.+656    	; 0x34a <__stack+0x4b>
  ba:	47 c1       	rjmp	.+654    	; 0x34a <__stack+0x4b>
  bc:	46 c1       	rjmp	.+652    	; 0x34a <__stack+0x4b>
  be:	45 c1       	rjmp	.+650    	; 0x34a <__stack+0x4b>
  c0:	44 c1       	rjmp	.+648    	; 0x34a <__stack+0x4b>
  c2:	43 c1       	rjmp	.+646    	; 0x34a <__stack+0x4b>
  c4:	9a c1       	rjmp	.+820    	; 0x3fa <__stack+0xfb>
  c6:	41 c1       	rjmp	.+642    	; 0x34a <__stack+0x4b>
  c8:	40 c1       	rjmp	.+640    	; 0x34a <__stack+0x4b>
  ca:	3f c1       	rjmp	.+638    	; 0x34a <__stack+0x4b>
  cc:	3e c1       	rjmp	.+636    	; 0x34a <__stack+0x4b>
  ce:	3d c1       	rjmp	.+634    	; 0x34a <__stack+0x4b>
  d0:	3c c1       	rjmp	.+632    	; 0x34a <__stack+0x4b>
  d2:	3b c1       	rjmp	.+630    	; 0x34a <__stack+0x4b>
  d4:	cf c1       	rjmp	.+926    	; 0x474 <__stack+0x175>
  d6:	39 c1       	rjmp	.+626    	; 0x34a <__stack+0x4b>
  d8:	38 c1       	rjmp	.+624    	; 0x34a <__stack+0x4b>
  da:	37 c1       	rjmp	.+622    	; 0x34a <__stack+0x4b>
  dc:	36 c1       	rjmp	.+620    	; 0x34a <__stack+0x4b>
  de:	35 c1       	rjmp	.+618    	; 0x34a <__stack+0x4b>
  e0:	34 c1       	rjmp	.+616    	; 0x34a <__stack+0x4b>
  e2:	33 c1       	rjmp	.+614    	; 0x34a <__stack+0x4b>
  e4:	7e c1       	rjmp	.+764    	; 0x3e2 <__stack+0xe3>
  e6:	31 c1       	rjmp	.+610    	; 0x34a <__stack+0x4b>
  e8:	30 c1       	rjmp	.+608    	; 0x34a <__stack+0x4b>
  ea:	2f c1       	rjmp	.+606    	; 0x34a <__stack+0x4b>
  ec:	2e c1       	rjmp	.+604    	; 0x34a <__stack+0x4b>
  ee:	2d c1       	rjmp	.+602    	; 0x34a <__stack+0x4b>
  f0:	2c c1       	rjmp	.+600    	; 0x34a <__stack+0x4b>
  f2:	2b c1       	rjmp	.+598    	; 0x34a <__stack+0x4b>
  f4:	d7 c1       	rjmp	.+942    	; 0x4a4 <__stack+0x1a5>
  f6:	29 c1       	rjmp	.+594    	; 0x34a <__stack+0x4b>
  f8:	28 c1       	rjmp	.+592    	; 0x34a <__stack+0x4b>
  fa:	27 c1       	rjmp	.+590    	; 0x34a <__stack+0x4b>
  fc:	26 c1       	rjmp	.+588    	; 0x34a <__stack+0x4b>
  fe:	25 c1       	rjmp	.+586    	; 0x34a <__stack+0x4b>
 100:	24 c1       	rjmp	.+584    	; 0x34a <__stack+0x4b>
 102:	23 c1       	rjmp	.+582    	; 0x34a <__stack+0x4b>
 104:	cf c1       	rjmp	.+926    	; 0x4a4 <__stack+0x1a5>
 106:	21 c1       	rjmp	.+578    	; 0x34a <__stack+0x4b>
 108:	20 c1       	rjmp	.+576    	; 0x34a <__stack+0x4b>
 10a:	1f c1       	rjmp	.+574    	; 0x34a <__stack+0x4b>
 10c:	1e c1       	rjmp	.+572    	; 0x34a <__stack+0x4b>
 10e:	1d c1       	rjmp	.+570    	; 0x34a <__stack+0x4b>
 110:	1c c1       	rjmp	.+568    	; 0x34a <__stack+0x4b>
 112:	1b c1       	rjmp	.+566    	; 0x34a <__stack+0x4b>
 114:	c7 c1       	rjmp	.+910    	; 0x4a4 <__stack+0x1a5>
 116:	19 c1       	rjmp	.+562    	; 0x34a <__stack+0x4b>
 118:	18 c1       	rjmp	.+560    	; 0x34a <__stack+0x4b>
 11a:	17 c1       	rjmp	.+558    	; 0x34a <__stack+0x4b>
 11c:	16 c1       	rjmp	.+556    	; 0x34a <__stack+0x4b>
 11e:	15 c1       	rjmp	.+554    	; 0x34a <__stack+0x4b>
 120:	14 c1       	rjmp	.+552    	; 0x34a <__stack+0x4b>
 122:	13 c1       	rjmp	.+550    	; 0x34a <__stack+0x4b>
 124:	bf c1       	rjmp	.+894    	; 0x4a4 <__stack+0x1a5>
 126:	11 c1       	rjmp	.+546    	; 0x34a <__stack+0x4b>
 128:	10 c1       	rjmp	.+544    	; 0x34a <__stack+0x4b>
 12a:	0f c1       	rjmp	.+542    	; 0x34a <__stack+0x4b>
 12c:	0e c1       	rjmp	.+540    	; 0x34a <__stack+0x4b>
 12e:	0d c1       	rjmp	.+538    	; 0x34a <__stack+0x4b>
 130:	0c c1       	rjmp	.+536    	; 0x34a <__stack+0x4b>
 132:	0b c1       	rjmp	.+534    	; 0x34a <__stack+0x4b>
 134:	1b c1       	rjmp	.+566    	; 0x36c <__stack+0x6d>
 136:	09 c1       	rjmp	.+530    	; 0x34a <__stack+0x4b>
 138:	08 c1       	rjmp	.+528    	; 0x34a <__stack+0x4b>
 13a:	07 c1       	rjmp	.+526    	; 0x34a <__stack+0x4b>
 13c:	06 c1       	rjmp	.+524    	; 0x34a <__stack+0x4b>
 13e:	05 c1       	rjmp	.+522    	; 0x34a <__stack+0x4b>
 140:	04 c1       	rjmp	.+520    	; 0x34a <__stack+0x4b>
 142:	03 c1       	rjmp	.+518    	; 0x34a <__stack+0x4b>
 144:	22 c1       	rjmp	.+580    	; 0x38a <__stack+0x8b>
 146:	01 c1       	rjmp	.+514    	; 0x34a <__stack+0x4b>
 148:	00 c1       	rjmp	.+512    	; 0x34a <__stack+0x4b>
 14a:	ff c0       	rjmp	.+510    	; 0x34a <__stack+0x4b>
 14c:	fe c0       	rjmp	.+508    	; 0x34a <__stack+0x4b>
 14e:	fd c0       	rjmp	.+506    	; 0x34a <__stack+0x4b>
 150:	fc c0       	rjmp	.+504    	; 0x34a <__stack+0x4b>
 152:	fb c0       	rjmp	.+502    	; 0x34a <__stack+0x4b>
 154:	0b c1       	rjmp	.+534    	; 0x36c <__stack+0x6d>
 156:	f9 c0       	rjmp	.+498    	; 0x34a <__stack+0x4b>
 158:	f8 c0       	rjmp	.+496    	; 0x34a <__stack+0x4b>
 15a:	f7 c0       	rjmp	.+494    	; 0x34a <__stack+0x4b>
 15c:	f6 c0       	rjmp	.+492    	; 0x34a <__stack+0x4b>
 15e:	f5 c0       	rjmp	.+490    	; 0x34a <__stack+0x4b>
 160:	f4 c0       	rjmp	.+488    	; 0x34a <__stack+0x4b>
 162:	f3 c0       	rjmp	.+486    	; 0x34a <__stack+0x4b>
 164:	12 c1       	rjmp	.+548    	; 0x38a <__stack+0x8b>
 166:	f1 c0       	rjmp	.+482    	; 0x34a <__stack+0x4b>
 168:	f0 c0       	rjmp	.+480    	; 0x34a <__stack+0x4b>
 16a:	ef c0       	rjmp	.+478    	; 0x34a <__stack+0x4b>
 16c:	ee c0       	rjmp	.+476    	; 0x34a <__stack+0x4b>
 16e:	ed c0       	rjmp	.+474    	; 0x34a <__stack+0x4b>
 170:	ec c0       	rjmp	.+472    	; 0x34a <__stack+0x4b>
 172:	eb c0       	rjmp	.+470    	; 0x34a <__stack+0x4b>
 174:	6d c1       	rjmp	.+730    	; 0x450 <__stack+0x151>
 176:	e9 c0       	rjmp	.+466    	; 0x34a <__stack+0x4b>
 178:	e8 c0       	rjmp	.+464    	; 0x34a <__stack+0x4b>
 17a:	e7 c0       	rjmp	.+462    	; 0x34a <__stack+0x4b>
 17c:	e6 c0       	rjmp	.+460    	; 0x34a <__stack+0x4b>
 17e:	e5 c0       	rjmp	.+458    	; 0x34a <__stack+0x4b>
 180:	e4 c0       	rjmp	.+456    	; 0x34a <__stack+0x4b>
 182:	e3 c0       	rjmp	.+454    	; 0x34a <__stack+0x4b>
 184:	05 c1       	rjmp	.+522    	; 0x390 <__stack+0x91>
 186:	e1 c0       	rjmp	.+450    	; 0x34a <__stack+0x4b>
 188:	e0 c0       	rjmp	.+448    	; 0x34a <__stack+0x4b>
 18a:	df c0       	rjmp	.+446    	; 0x34a <__stack+0x4b>
 18c:	de c0       	rjmp	.+444    	; 0x34a <__stack+0x4b>
 18e:	dd c0       	rjmp	.+442    	; 0x34a <__stack+0x4b>
 190:	dc c0       	rjmp	.+440    	; 0x34a <__stack+0x4b>
 192:	db c0       	rjmp	.+438    	; 0x34a <__stack+0x4b>
 194:	fd c0       	rjmp	.+506    	; 0x390 <__stack+0x91>
 196:	d9 c0       	rjmp	.+434    	; 0x34a <__stack+0x4b>
 198:	d8 c0       	rjmp	.+432    	; 0x34a <__stack+0x4b>
 19a:	d7 c0       	rjmp	.+430    	; 0x34a <__stack+0x4b>
 19c:	d6 c0       	rjmp	.+428    	; 0x34a <__stack+0x4b>
 19e:	d5 c0       	rjmp	.+426    	; 0x34a <__stack+0x4b>
 1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__stack+0x4b>
 1a2:	d3 c0       	rjmp	.+422    	; 0x34a <__stack+0x4b>
 1a4:	06 c1       	rjmp	.+524    	; 0x3b2 <__stack+0xb3>
 1a6:	d1 c0       	rjmp	.+418    	; 0x34a <__stack+0x4b>
 1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__stack+0x4b>
 1aa:	cf c0       	rjmp	.+414    	; 0x34a <__stack+0x4b>
 1ac:	ce c0       	rjmp	.+412    	; 0x34a <__stack+0x4b>
 1ae:	cd c0       	rjmp	.+410    	; 0x34a <__stack+0x4b>
 1b0:	cc c0       	rjmp	.+408    	; 0x34a <__stack+0x4b>
 1b2:	cb c0       	rjmp	.+406    	; 0x34a <__stack+0x4b>
 1b4:	3b c1       	rjmp	.+630    	; 0x42c <__stack+0x12d>
 1b6:	c9 c0       	rjmp	.+402    	; 0x34a <__stack+0x4b>
 1b8:	c8 c0       	rjmp	.+400    	; 0x34a <__stack+0x4b>
 1ba:	c7 c0       	rjmp	.+398    	; 0x34a <__stack+0x4b>
 1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__stack+0x4b>
 1be:	c5 c0       	rjmp	.+394    	; 0x34a <__stack+0x4b>
 1c0:	c4 c0       	rjmp	.+392    	; 0x34a <__stack+0x4b>
 1c2:	c3 c0       	rjmp	.+390    	; 0x34a <__stack+0x4b>
 1c4:	33 c1       	rjmp	.+614    	; 0x42c <__stack+0x12d>

000001c6 <__ctors_end>:
 1c6:	11 24       	eor	r1, r1
 1c8:	1f be       	out	0x3f, r1	; 63
 1ca:	cf ef       	ldi	r28, 0xFF	; 255
 1cc:	d2 e0       	ldi	r29, 0x02	; 2
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
 1d2:	11 e0       	ldi	r17, 0x01	; 1
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b1 e0       	ldi	r27, 0x01	; 1
 1d8:	e4 e9       	ldi	r30, 0x94	; 148
 1da:	f6 e0       	ldi	r31, 0x06	; 6
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <.do_copy_data_start>

000001de <.do_copy_data_loop>:
 1de:	05 90       	lpm	r0, Z+
 1e0:	0d 92       	st	X+, r0

000001e2 <.do_copy_data_start>:
 1e2:	a0 30       	cpi	r26, 0x00	; 0
 1e4:	b1 07       	cpc	r27, r17
 1e6:	d9 f7       	brne	.-10     	; 0x1de <.do_copy_data_loop>

000001e8 <__do_clear_bss>:
 1e8:	11 e0       	ldi	r17, 0x01	; 1
 1ea:	a0 e0       	ldi	r26, 0x00	; 0
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
 1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
 1f2:	af 38       	cpi	r26, 0x8F	; 143
 1f4:	b1 07       	cpc	r27, r17
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
 1f8:	0f d2       	rcall	.+1054   	; 0x618 <main>
 1fa:	4a c2       	rjmp	.+1172   	; 0x690 <_exit>

000001fc <__bad_interrupt>:
 1fc:	01 cf       	rjmp	.-510    	; 0x0 <__vectors>

000001fe <i2cSetBitrate>:
	// enable interrupts
	sei();
}

void i2cSetBitrate(u16 bitrateKHz)
{
 1fe:	bc 01       	movw	r22, r24
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega128)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		cbi(TWSR, TWPS0);
 200:	80 91 b9 00 	lds	r24, 0x00B9
 204:	8e 7f       	andi	r24, 0xFE	; 254
 206:	80 93 b9 00 	sts	0x00B9, r24
		cbi(TWSR, TWPS1);
 20a:	80 91 b9 00 	lds	r24, 0x00B9
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	80 93 b9 00 	sts	0x00B9, r24
	#endif
	// calculate bitrate division
	bitrate_div = ((F_CPU/1000l)/bitrateKHz);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	27 d2       	rcall	.+1102   	; 0x668 <__udivmodhi4>
	if(bitrate_div >= 16)
 21a:	60 31       	cpi	r22, 0x10	; 16
 21c:	30 f0       	brcs	.+12     	; 0x22a <i2cSetBitrate+0x2c>
		bitrate_div = (bitrate_div-16)/2;
 21e:	86 2f       	mov	r24, r22
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	40 97       	sbiw	r24, 0x10	; 16
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	68 2f       	mov	r22, r24
	outb(TWBR, bitrate_div);
 22a:	60 93 b8 00 	sts	0x00B8, r22
}
 22e:	08 95       	ret

00000230 <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 4);	// i2c SCL on ATmega8,48,88,168
 230:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC, 5);	// i2c SCL on ATmega8,48,88,168
 232:	45 9a       	sbi	0x08, 5	; 8
//	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
//	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
//	sbi(PORTD, 1);	// i2c SDA on ATmega128,64

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
 234:	10 92 87 01 	sts	0x0187, r1
 238:	10 92 86 01 	sts	0x0186, r1
	i2cSlaveTransmit = 0;
 23c:	10 92 89 01 	sts	0x0189, r1
 240:	10 92 88 01 	sts	0x0188, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
 244:	84 e6       	ldi	r24, 0x64	; 100
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	da df       	rcall	.-76     	; 0x1fe <i2cSetBitrate>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 24a:	ec eb       	ldi	r30, 0xBC	; 188
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
 254:	10 92 00 01 	sts	0x0100, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 258:	80 81       	ld	r24, Z
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
 264:	78 94       	sei
}
 266:	08 95       	ret

00000268 <i2cSetLocalDeviceAddr>:
}

void i2cSetLocalDeviceAddr(u08 deviceAddr, u08 genCallEn)
{
	// set local device address (used in slave mode only)
	outb(TWAR, (((deviceAddr<<1)&0xFE) | (genCallEn?1:0)) );
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	61 11       	cpse	r22, r1
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	28 2b       	or	r18, r24
 276:	20 93 ba 00 	sts	0x00BA, r18
}
 27a:	08 95       	ret

0000027c <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(u08 receiveDataLength, u08* receiveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
 27c:	90 93 87 01 	sts	0x0187, r25
 280:	80 93 86 01 	sts	0x0186, r24
}
 284:	08 95       	ret

00000286 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(u08 (*i2cSlaveTx_func)(u08 transmitDataLengthMax, u08* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
 286:	90 93 89 01 	sts	0x0189, r25
 28a:	80 93 88 01 	sts	0x0188, r24
}
 28e:	08 95       	ret

00000290 <i2cSendStart>:

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	80 6a       	ori	r24, 0xA0	; 160
 29a:	80 83       	st	Z, r24
}
 29c:	08 95       	ret

0000029e <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 29e:	ec eb       	ldi	r30, 0xBC	; 188
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	80 6d       	ori	r24, 0xD0	; 208
 2a8:	80 83       	st	Z, r24
}
 2aa:	08 95       	ret

000002ac <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
 2ac:	80 91 bc 00 	lds	r24, 0x00BC
 2b0:	87 ff       	sbrs	r24, 7
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <i2cWaitForComplete>
}
 2b4:	08 95       	ret

000002b6 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 2b6:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 2ba:	ec eb       	ldi	r30, 0xBC	; 188
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	80 83       	st	Z, r24
}
 2c6:	08 95       	ret

000002c8 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
 2c8:	88 23       	and	r24, r24
 2ca:	39 f4       	brne	.+14     	; 0x2da <i2cReceiveByte+0x12>
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 2cc:	80 91 bc 00 	lds	r24, 0x00BC
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	80 93 bc 00 	sts	0x00BC, r24
 2d8:	08 95       	ret
{
	// begin receive over i2c
	if( ackFlag )
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 2da:	80 91 bc 00 	lds	r24, 0x00BC
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	80 6c       	ori	r24, 0xC0	; 192
 2e2:	80 93 bc 00 	sts	0x00BC, r24
 2e6:	08 95       	ret

000002e8 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
 2e8:	80 91 bb 00 	lds	r24, 0x00BB
}
 2ec:	08 95       	ret

000002ee <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
 2ee:	80 91 b9 00 	lds	r24, 0x00B9
}
 2f2:	08 95       	ret

000002f4 <__vector_24>:
}
#endif

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	// read status bits
	u08 status = inb(TWSR) & TWSR_STATUS_MASK;
 316:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a0 e0       	ldi	r26, 0x00	; 0
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	88 7f       	andi	r24, 0xF8	; 248
 322:	90 70       	andi	r25, 0x00	; 0
 324:	a0 70       	andi	r26, 0x00	; 0
 326:	b0 70       	andi	r27, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	89 3c       	cpi	r24, 0xC9	; 201
 32c:	91 05       	cpc	r25, r1
 32e:	68 f4       	brcc	.+26     	; 0x34a <__stack+0x4b>
 330:	e6 5e       	subi	r30, 0xE6	; 230
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	09 94       	ijmp
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: M->START\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
 336:	80 91 01 01 	lds	r24, 0x0101
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
 33a:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 33e:	80 91 bc 00 	lds	r24, 0x00BC
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	80 68       	ori	r24, 0x80	; 128
 346:	80 93 bc 00 	sts	0x00BC, r24
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
		// set state
		I2cState = I2C_IDLE;
		break;
	}
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 36c:	80 91 84 01 	lds	r24, 0x0184
 370:	90 91 bb 00 	lds	r25, 0x00BB
 374:	e8 2f       	mov	r30, r24
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	ec 5b       	subi	r30, 0xBC	; 188
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	90 83       	st	Z, r25
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 84 01 	sts	0x0184, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
 384:	80 34       	cpi	r24, 0x40	; 64
 386:	08 f4       	brcc	.+2      	; 0x38a <__stack+0x8b>
 388:	8a c0       	rjmp	.+276    	; 0x49e <__stack+0x19f>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// receive data byte and return NACK
		i2cReceiveByte(FALSE);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	9d df       	rcall	.-198    	; 0x2c8 <i2cReceiveByte>
 38e:	dd cf       	rjmp	.-70     	; 0x34a <__stack+0x4b>
		rprintf("I2C: ST->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for reading (data must be transmitted back to master)
		// set state
		I2cState = I2C_SLAVE_TX;
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	80 93 00 01 	sts	0x0100, r24
		// request data from application
		if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
 396:	e0 91 88 01 	lds	r30, 0x0188
 39a:	f0 91 89 01 	lds	r31, 0x0189
 39e:	30 97       	sbiw	r30, 0x00	; 0
 3a0:	31 f0       	breq	.+12     	; 0x3ae <__stack+0xaf>
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	62 e0       	ldi	r22, 0x02	; 2
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	09 95       	icall
 3aa:	80 93 43 01 	sts	0x0143, r24
		// reset data index
		I2cSendDataIndex = 0;
 3ae:	10 92 42 01 	sts	0x0142, r1
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: ST->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// transmit data byte
		outb(TWDR, I2cSendData[I2cSendDataIndex++]);
 3b2:	90 91 42 01 	lds	r25, 0x0142
 3b6:	e9 2f       	mov	r30, r25
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ee 5f       	subi	r30, 0xFE	; 254
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 81       	ld	r24, Z
 3c0:	80 93 bb 00 	sts	0x00BB, r24
 3c4:	9f 5f       	subi	r25, 0xFF	; 255
 3c6:	90 93 42 01 	sts	0x0142, r25
		if(I2cSendDataIndex < I2cSendDataLength)
 3ca:	80 91 43 01 	lds	r24, 0x0143
 3ce:	98 17       	cp	r25, r24
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <__stack+0xd5>
 3d2:	b5 cf       	rjmp	.-150    	; 0x33e <__stack+0x3f>
			// expect ACK to data byte
			outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 3d4:	80 91 bc 00 	lds	r24, 0x00BC
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	80 6c       	ori	r24, 0xC0	; 192
 3dc:	80 93 bc 00 	sts	0x00BC, r24
 3e0:	b4 cf       	rjmp	.-152    	; 0x34a <__stack+0x4b>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_NACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 3e2:	80 91 84 01 	lds	r24, 0x0184
 3e6:	90 91 bb 00 	lds	r25, 0x00BB
 3ea:	e8 2f       	mov	r30, r24
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	ec 5b       	subi	r30, 0xBC	; 188
 3f0:	fe 4f       	sbci	r31, 0xFE	; 254
 3f2:	90 83       	st	Z, r25
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 84 01 	sts	0x0184, r24

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
 3fa:	80 91 bc 00 	lds	r24, 0x00BC
 3fe:	8f 70       	andi	r24, 0x0F	; 15
 400:	80 6d       	ori	r24, 0xD0	; 208
 402:	80 93 bc 00 	sts	0x00BC, r24
		rprintfInit(uart1SendByte);
		#endif
		// transmit stop condition, enable SLA ACK
		i2cSendStop();
		// set state
		I2cState = I2C_IDLE;
 406:	10 92 00 01 	sts	0x0100, r1
 40a:	9f cf       	rjmp	.-194    	; 0x34a <__stack+0x4b>
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
 40c:	90 91 42 01 	lds	r25, 0x0142
 410:	80 91 43 01 	lds	r24, 0x0143
 414:	98 17       	cp	r25, r24
 416:	08 f4       	brcc	.+2      	; 0x41a <__stack+0x11b>
 418:	54 c0       	rjmp	.+168    	; 0x4c2 <__stack+0x1c3>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: BUS_ERROR\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// reset internal hardware and release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
 41a:	80 91 bc 00 	lds	r24, 0x00BC
 41e:	8f 70       	andi	r24, 0x0F	; 15
 420:	80 6d       	ori	r24, 0xD0	; 208
 422:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
 426:	10 92 00 01 	sts	0x0100, r1
 42a:	8f cf       	rjmp	.-226    	; 0x34a <__stack+0x4b>
		rprintf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// all done
		// switch to open slave
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 42c:	80 91 bc 00 	lds	r24, 0x00BC
 430:	8f 70       	andi	r24, 0x0F	; 15
 432:	80 6c       	ori	r24, 0xC0	; 192
 434:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
 438:	10 92 00 01 	sts	0x0100, r1
 43c:	86 cf       	rjmp	.-244    	; 0x34a <__stack+0x4b>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MT->ARB_LOST\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// release bus
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
 43e:	80 91 bc 00 	lds	r24, 0x00BC
 442:	8f 70       	andi	r24, 0x0F	; 15
 444:	80 68       	ori	r24, 0x80	; 128
 446:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
 44a:	10 92 00 01 	sts	0x0100, r1
 44e:	7d cf       	rjmp	.-262    	; 0x34a <__stack+0x4b>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: SR->SR_STOP\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// switch to SR mode with SLA ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 450:	80 91 bc 00 	lds	r24, 0x00BC
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	80 6c       	ori	r24, 0xC0	; 192
 458:	80 93 bc 00 	sts	0x00BC, r24
		// i2c receive is complete, call i2cSlaveReceive
		if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
 45c:	e0 91 86 01 	lds	r30, 0x0186
 460:	f0 91 87 01 	lds	r31, 0x0187
 464:	30 97       	sbiw	r30, 0x00	; 0
 466:	f9 f2       	breq	.-66     	; 0x426 <__stack+0x127>
 468:	80 91 84 01 	lds	r24, 0x0184
 46c:	64 e4       	ldi	r22, 0x44	; 68
 46e:	71 e0       	ldi	r23, 0x01	; 1
 470:	09 95       	icall
 472:	d9 cf       	rjmp	.-78     	; 0x426 <__stack+0x127>
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->DATA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
 474:	20 91 84 01 	lds	r18, 0x0184
 478:	80 91 bb 00 	lds	r24, 0x00BB
 47c:	e2 2f       	mov	r30, r18
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	ec 5b       	subi	r30, 0xBC	; 188
 482:	fe 4f       	sbci	r31, 0xFE	; 254
 484:	80 83       	st	Z, r24
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	20 93 84 01 	sts	0x0184, r18
		#ifdef I2C_DEBUG
		rprintfInit(uart1AddToTxBuffer);
		rprintf("I2C: MR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	80 91 85 01 	lds	r24, 0x0185
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	28 17       	cp	r18, r24
 498:	39 07       	cpc	r19, r25
 49a:	0c f0       	brlt	.+2      	; 0x49e <__stack+0x19f>
 49c:	76 cf       	rjmp	.-276    	; 0x38a <__stack+0x8b>
		I2cReceiveData[I2cReceiveDataIndex++] = inb(TWDR);
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
		{
			// receive data byte and return ACK
			i2cReceiveByte(TRUE);
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	13 df       	rcall	.-474    	; 0x2c8 <i2cReceiveByte>
 4a2:	53 cf       	rjmp	.-346    	; 0x34a <__stack+0x4b>
		rprintf("I2C: SR->SLA_ACK\r\n");
		rprintfInit(uart1SendByte);
		#endif
		// we are being addressed as slave for writing (data will be received from master)
		// set state
		I2cState = I2C_SLAVE_RX;
 4a4:	85 e0       	ldi	r24, 0x05	; 5
 4a6:	80 93 00 01 	sts	0x0100, r24
		// prepare buffer
		I2cReceiveDataIndex = 0;
 4aa:	10 92 84 01 	sts	0x0184, r1
		// receive data byte and return ACK
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
 4ae:	80 91 bc 00 	lds	r24, 0x00BC
 4b2:	8f 70       	andi	r24, 0x0F	; 15
 4b4:	80 6c       	ori	r24, 0xC0	; 192
 4b6:	80 93 bc 00 	sts	0x00BC, r24
 4ba:	47 cf       	rjmp	.-370    	; 0x34a <__stack+0x4b>
 4bc:	20 91 84 01 	lds	r18, 0x0184
 4c0:	e5 cf       	rjmp	.-54     	; 0x48c <__stack+0x18d>
		rprintfInit(uart1SendByte);
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
 4c2:	e9 2f       	mov	r30, r25
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	ee 5f       	subi	r30, 0xFE	; 254
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	80 81       	ld	r24, Z
 4cc:	9f 5f       	subi	r25, 0xFF	; 255
 4ce:	90 93 42 01 	sts	0x0142, r25
 4d2:	33 cf       	rjmp	.-410    	; 0x33a <__stack+0x3b>

000004d4 <i2cGetState>:
	}
}

eI2cStateType i2cGetState(void)
{
	return I2cState;
 4d4:	80 91 00 01 	lds	r24, 0x0100
}
 4d8:	08 95       	ret

000004da <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
 4da:	aa e7       	ldi	r26, 0x7A	; 122
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	8c 91       	ld	r24, X
 4e0:	80 68       	ori	r24, 0x80	; 128
 4e2:	8c 93       	st	X, r24
	cbi(ADCSR, ADFR);				// default to single sample convert mode
 4e4:	8c 91       	ld	r24, X
 4e6:	8f 7d       	andi	r24, 0xDF	; 223
 4e8:	8c 93       	st	X, r24
*/

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 4ea:	8c 91       	ld	r24, X
 4ec:	88 7f       	andi	r24, 0xF8	; 248
 4ee:	86 60       	ori	r24, 0x06	; 6
 4f0:	8c 93       	st	X, r24
}

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 4f2:	ec e7       	ldi	r30, 0x7C	; 124
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	8f 73       	andi	r24, 0x3F	; 63
 4fa:	80 64       	ori	r24, 0x40	; 64
 4fc:	80 83       	st	Z, r24
{
	sbi(ADCSR, ADEN);				// enable ADC (turn on ADC power)
	cbi(ADCSR, ADFR);				// default to single sample convert mode
	a2dSetPrescaler(ADC_PRESCALE);	// set default prescaler
	a2dSetReference(ADC_REFERENCE);	// set default reference
	cbi(ADMUX, ADLAR);				// set to right-adjusted result
 4fe:	80 81       	ld	r24, Z
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	80 83       	st	Z, r24

	sbi(ADCSR, ADIE);				// enable ADC interrupts
 504:	8c 91       	ld	r24, X
 506:	88 60       	ori	r24, 0x08	; 8
 508:	8c 93       	st	X, r24

	a2dCompleteFlag = FALSE;		// clear conversion complete flag
 50a:	10 92 8e 01 	sts	0x018E, r1
	sei();							// turn on interrupts (if not already on)
 50e:	78 94       	sei
}
 510:	08 95       	ret

00000512 <a2dSetPrescaler>:
*/

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
 512:	ea e7       	ldi	r30, 0x7A	; 122
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	90 81       	ld	r25, Z
 518:	98 7f       	andi	r25, 0xF8	; 248
 51a:	98 2b       	or	r25, r24
 51c:	90 83       	st	Z, r25
}
 51e:	08 95       	ret

00000520 <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
 520:	ec e7       	ldi	r30, 0x7C	; 124
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	90 81       	ld	r25, Z
 526:	82 95       	swap	r24
 528:	88 0f       	add	r24, r24
 52a:	88 0f       	add	r24, r24
 52c:	80 7c       	andi	r24, 0xC0	; 192
 52e:	9f 73       	andi	r25, 0x3F	; 63
 530:	98 2b       	or	r25, r24
 532:	90 83       	st	Z, r25
}
 534:	08 95       	ret

00000536 <a2dSetChannel>:

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 536:	ec e7       	ldi	r30, 0x7C	; 124
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	90 81       	ld	r25, Z
 53c:	8f 71       	andi	r24, 0x1F	; 31
 53e:	90 7e       	andi	r25, 0xE0	; 224
 540:	89 2b       	or	r24, r25
 542:	80 83       	st	Z, r24
}
 544:	08 95       	ret

00000546 <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	sbi(ADCSR, ADIF);	// clear hardware "conversion complete" flag 
 546:	ea e7       	ldi	r30, 0x7A	; 122
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	80 83       	st	Z, r24
	sbi(ADCSR, ADSC);	// start conversion
 550:	80 81       	ld	r24, Z
 552:	80 64       	ori	r24, 0x40	; 64
 554:	80 83       	st	Z, r24
}
 556:	08 95       	ret

00000558 <a2dIsComplete>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
 558:	80 91 7a 00 	lds	r24, 0x007A
}
 55c:	80 74       	andi	r24, 0x40	; 64
 55e:	08 95       	ret

00000560 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 560:	10 92 8e 01 	sts	0x018E, r1
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 564:	90 91 7c 00 	lds	r25, 0x007C
 568:	8f 71       	andi	r24, 0x1F	; 31
 56a:	90 7e       	andi	r25, 0xE0	; 224
 56c:	89 2b       	or	r24, r25
 56e:	80 93 7c 00 	sts	0x007C, r24
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 572:	80 91 7a 00 	lds	r24, 0x007A
 576:	80 61       	ori	r24, 0x10	; 16
 578:	80 93 7a 00 	sts	0x007A, r24
	sbi(ADCSR, ADSC);						// start conversion
 57c:	80 91 7a 00 	lds	r24, 0x007A
 580:	80 64       	ori	r24, 0x40	; 64
 582:	80 93 7a 00 	sts	0x007A, r24
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 586:	80 91 7a 00 	lds	r24, 0x007A
 58a:	86 fd       	sbrc	r24, 6
 58c:	fc cf       	rjmp	.-8      	; 0x586 <a2dConvert10bit+0x26>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 58e:	20 91 78 00 	lds	r18, 0x0078
 592:	40 91 79 00 	lds	r20, 0x0079
 596:	94 2f       	mov	r25, r20
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	28 2b       	or	r18, r24
 59e:	39 2b       	or	r19, r25
}
 5a0:	c9 01       	movw	r24, r18
 5a2:	08 95       	ret

000005a4 <__vector_21>:
//	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
//}

//! Interrupt handler for ADC complete interrupt.
SIGNAL(SIG_ADC)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	8f 93       	push	r24
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	80 93 8e 01 	sts	0x018E, r24
}
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <i2cSlaveTx>:

	return 0;
}

u08 i2cSlaveTx(u08 transmitDataLength, u08* transmitData)
{
 5c2:	fb 01       	movw	r30, r22
	transmitData[0] = 0;
 5c4:	10 82       	st	Z, r1
	if( adc[0] > 0x01FF)
 5c6:	80 91 8a 01 	lds	r24, 0x018A
 5ca:	90 91 8b 01 	lds	r25, 0x018B
 5ce:	80 50       	subi	r24, 0x00	; 0
 5d0:	92 40       	sbci	r25, 0x02	; 2
 5d2:	f0 f4       	brcc	.+60     	; 0x610 <i2cSlaveTx+0x4e>
 5d4:	20 e0       	ldi	r18, 0x00	; 0
		transmitData[0] |= 0x40;
	
	if( adc[1] > 0x01FF )
 5d6:	80 91 8c 01 	lds	r24, 0x018C
 5da:	90 91 8d 01 	lds	r25, 0x018D
 5de:	80 50       	subi	r24, 0x00	; 0
 5e0:	92 40       	sbci	r25, 0x02	; 2
 5e2:	10 f0       	brcs	.+4      	; 0x5e8 <i2cSlaveTx+0x26>
		transmitData[0] |= 0x80;
 5e4:	20 68       	ori	r18, 0x80	; 128
 5e6:	20 83       	st	Z, r18

	transmitData[0] = (transmitData[0] & ~0x03) | ( PINB & 0x03);
 5e8:	83 b1       	in	r24, 0x03	; 3
	transmitData[0] = (transmitData[0] & ~0x3C) | ( (PINC << 2) & 0x3C);
 5ea:	96 b1       	in	r25, 0x06	; 6
 5ec:	83 70       	andi	r24, 0x03	; 3
 5ee:	20 7c       	andi	r18, 0xC0	; 192
 5f0:	28 2b       	or	r18, r24
 5f2:	99 0f       	add	r25, r25
 5f4:	99 0f       	add	r25, r25
 5f6:	9c 73       	andi	r25, 0x3C	; 60
 5f8:	29 2b       	or	r18, r25
 5fa:	20 83       	st	Z, r18

	transmitData[1] = PIND;
 5fc:	89 b1       	in	r24, 0x09	; 9
 5fe:	81 83       	std	Z+1, r24	; 0x01

	transmitData[0] = ~transmitData[0];
 600:	82 2f       	mov	r24, r18
 602:	80 95       	com	r24
 604:	80 83       	st	Z, r24
	transmitData[1] = ~transmitData[1];
 606:	81 81       	ldd	r24, Z+1	; 0x01
 608:	80 95       	com	r24
 60a:	81 83       	std	Z+1, r24	; 0x01

	return 2;
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	08 95       	ret

u08 i2cSlaveTx(u08 transmitDataLength, u08* transmitData)
{
	transmitData[0] = 0;
	if( adc[0] > 0x01FF)
		transmitData[0] |= 0x40;
 610:	80 e4       	ldi	r24, 0x40	; 64
 612:	80 83       	st	Z, r24
 614:	20 e4       	ldi	r18, 0x40	; 64
 616:	df cf       	rjmp	.-66     	; 0x5d6 <i2cSlaveTx+0x14>

00000618 <main>:
static volatile u16 adc[2] = {0,0};

int main(void)
{
	//initialization
	i2cInit();
 618:	0b de       	rcall	.-1002   	; 0x230 <i2cInit>
	i2cSetLocalDeviceAddr(0x41,0);
 61a:	81 e4       	ldi	r24, 0x41	; 65
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	24 de       	rcall	.-952    	; 0x268 <i2cSetLocalDeviceAddr>
	i2cSetSlaveTransmitHandler(i2cSlaveTx);
 620:	81 ee       	ldi	r24, 0xE1	; 225
 622:	92 e0       	ldi	r25, 0x02	; 2
 624:	30 de       	rcall	.-928    	; 0x286 <i2cSetSlaveTransmitHandler>

    a2dInit();
 626:	59 df       	rcall	.-334    	; 0x4da <a2dInit>
    a2dSetPrescaler(ADC_PRESCALE_DIV128);
 628:	87 e0       	ldi	r24, 0x07	; 7
 62a:	73 df       	rcall	.-282    	; 0x512 <a2dSetPrescaler>
    a2dSetReference(ADC_REFERENCE_AVCC);
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	78 df       	rcall	.-272    	; 0x520 <a2dSetReference>

	//initialize pins
	DDRC &= ~0xCF;
 630:	87 b1       	in	r24, 0x07	; 7
 632:	80 73       	andi	r24, 0x30	; 48
 634:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~0x03;
 636:	84 b1       	in	r24, 0x04	; 4
 638:	8c 7f       	andi	r24, 0xFC	; 252
 63a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00;
 63c:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	8b b9       	out	0x0b, r24	; 11
	PORTB |= 0x03;
 642:	85 b1       	in	r24, 0x05	; 5
 644:	83 60       	ori	r24, 0x03	; 3
 646:	85 b9       	out	0x05, r24	; 5
	PORTC |= 0xCF;
 648:	88 b1       	in	r24, 0x08	; 8
 64a:	8f 6c       	ori	r24, 0xCF	; 207
 64c:	88 b9       	out	0x08, r24	; 8


	while(1)
	{
		adc[0] = a2dConvert10bit(6);
 64e:	86 e0       	ldi	r24, 0x06	; 6
 650:	87 df       	rcall	.-242    	; 0x560 <a2dConvert10bit>
 652:	90 93 8b 01 	sts	0x018B, r25
 656:	80 93 8a 01 	sts	0x018A, r24
		adc[1] = a2dConvert10bit(7);
 65a:	87 e0       	ldi	r24, 0x07	; 7
 65c:	81 df       	rcall	.-254    	; 0x560 <a2dConvert10bit>
 65e:	90 93 8d 01 	sts	0x018D, r25
 662:	80 93 8c 01 	sts	0x018C, r24
 666:	f3 cf       	rjmp	.-26     	; 0x64e <main+0x36>

00000668 <__udivmodhi4>:
 668:	aa 1b       	sub	r26, r26
 66a:	bb 1b       	sub	r27, r27
 66c:	51 e1       	ldi	r21, 0x11	; 17
 66e:	07 c0       	rjmp	.+14     	; 0x67e <__udivmodhi4_ep>

00000670 <__udivmodhi4_loop>:
 670:	aa 1f       	adc	r26, r26
 672:	bb 1f       	adc	r27, r27
 674:	a6 17       	cp	r26, r22
 676:	b7 07       	cpc	r27, r23
 678:	10 f0       	brcs	.+4      	; 0x67e <__udivmodhi4_ep>
 67a:	a6 1b       	sub	r26, r22
 67c:	b7 0b       	sbc	r27, r23

0000067e <__udivmodhi4_ep>:
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	5a 95       	dec	r21
 684:	a9 f7       	brne	.-22     	; 0x670 <__udivmodhi4_loop>
 686:	80 95       	com	r24
 688:	90 95       	com	r25
 68a:	bc 01       	movw	r22, r24
 68c:	cd 01       	movw	r24, r26
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
