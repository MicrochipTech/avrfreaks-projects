
LA_JMP_EXMPL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000d  00800100  00800100  00000478  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000463  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015c  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035e  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ee  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000093  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001761  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_9>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  c6:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_9>:
#define clr_led_OW PORTA &= ~(0x01 << PORTA5);
#define tgl_led_OW PORTA ^= (0x01 << PORTA5);

volatile unsigned char t_flag = 0;
volatile unsigned int m_timer = 0;
ISR(TIMER2_COMP_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	t_flag++;
  dc:	80 91 02 01 	lds	r24, 0x0102
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 02 01 	sts	0x0102, r24
	m_timer++;
  e6:	80 91 00 01 	lds	r24, 0x0100
  ea:	90 91 01 01 	lds	r25, 0x0101
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25
  f4:	80 93 00 01 	sts	0x0100, r24
};
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <led_tgl>:
		clr_led_PK;
		m_lab_exit:;						
    }
}

void led_tgl(la_str_jmp *f_pro) {
 106:	0f 93       	push	r16
 108:	dc 01       	movw	r26, r24
	la_c_jmp(f_pro);
 10a:	12 96       	adiw	r26, 0x02	; 2
 10c:	ed 91       	ld	r30, X+
 10e:	fc 91       	ld	r31, X
 110:	13 97       	sbiw	r26, 0x03	; 3
 112:	30 97       	sbiw	r30, 0x00	; 0
 114:	09 f0       	breq	.+2      	; 0x118 <led_tgl+0x12>
 116:	09 94       	ijmp
	la_jmp_time(l_td_t1, 499, f_pro, return);
 118:	ed 91       	ld	r30, X+
 11a:	fc 91       	ld	r31, X
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	12 96       	adiw	r26, 0x02	; 2
 124:	8d 91       	ld	r24, X+
 126:	9c 91       	ld	r25, X
 128:	13 97       	sbiw	r26, 0x03	; 3
 12a:	01 e0       	ldi	r16, 0x01	; 1
 12c:	06 95       	lsr	r16
 12e:	90 2f       	mov	r25, r16
 130:	0e e3       	ldi	r16, 0x3E	; 62
 132:	07 95       	ror	r16
 134:	80 2f       	mov	r24, r16
 136:	13 96       	adiw	r26, 0x03	; 3
 138:	9c 93       	st	X, r25
 13a:	8e 93       	st	-X, r24
 13c:	12 97       	sbiw	r26, 0x02	; 2

0000013e <l_td_t1>:
 13e:	ed 91       	ld	r30, X+
 140:	fc 91       	ld	r31, X
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	83 3f       	cpi	r24, 0xF3	; 243
 14c:	92 07       	cpc	r25, r18
 14e:	08 f4       	brcc	.+2      	; 0x152 <l_td_t1+0x14>
 150:	69 c0       	rjmp	.+210    	; 0x224 <l_td_t4+0x1c>
 152:	13 96       	adiw	r26, 0x03	; 3
 154:	1c 92       	st	X, r1
 156:	1e 92       	st	-X, r1
 158:	12 97       	sbiw	r26, 0x02	; 2
	set_led_OW;
 15a:	dd 9a       	sbi	0x1b, 5	; 27
	la_jmp_time(l_td_t2, 499, f_pro, return);
 15c:	ed 91       	ld	r30, X+
 15e:	fc 91       	ld	r31, X
 160:	11 97       	sbiw	r26, 0x01	; 1
 162:	11 82       	std	Z+1, r1	; 0x01
 164:	10 82       	st	Z, r1
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	8d 91       	ld	r24, X+
 16a:	9c 91       	ld	r25, X
 16c:	13 97       	sbiw	r26, 0x03	; 3
 16e:	01 e0       	ldi	r16, 0x01	; 1
 170:	06 95       	lsr	r16
 172:	90 2f       	mov	r25, r16
 174:	02 e8       	ldi	r16, 0x82	; 130
 176:	07 95       	ror	r16
 178:	80 2f       	mov	r24, r16
 17a:	13 96       	adiw	r26, 0x03	; 3
 17c:	9c 93       	st	X, r25
 17e:	8e 93       	st	-X, r24
 180:	12 97       	sbiw	r26, 0x02	; 2

00000182 <l_td_t2>:
 182:	ed 91       	ld	r30, X+
 184:	fc 91       	ld	r31, X
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	83 3f       	cpi	r24, 0xF3	; 243
 190:	92 07       	cpc	r25, r18
 192:	08 f4       	brcc	.+2      	; 0x196 <l_td_t2+0x14>
 194:	47 c0       	rjmp	.+142    	; 0x224 <l_td_t4+0x1c>
 196:	13 96       	adiw	r26, 0x03	; 3
 198:	1c 92       	st	X, r1
 19a:	1e 92       	st	-X, r1
 19c:	12 97       	sbiw	r26, 0x02	; 2
	clr_led_OW;
 19e:	dd 98       	cbi	0x1b, 5	; 27

	*f_pro->timer = 0;
 1a0:	ed 91       	ld	r30, X+
 1a2:	fc 91       	ld	r31, X
 1a4:	11 97       	sbiw	r26, 0x01	; 1
 1a6:	11 82       	std	Z+1, r1	; 0x01
 1a8:	10 82       	st	Z, r1
	la_save(f_pro->jmp ,l_td_t3);
 1aa:	12 96       	adiw	r26, 0x02	; 2
 1ac:	8d 91       	ld	r24, X+
 1ae:	9c 91       	ld	r25, X
 1b0:	13 97       	sbiw	r26, 0x03	; 3
 1b2:	01 e0       	ldi	r16, 0x01	; 1
 1b4:	06 95       	lsr	r16
 1b6:	90 2f       	mov	r25, r16
 1b8:	06 ec       	ldi	r16, 0xC6	; 198
 1ba:	07 95       	ror	r16
 1bc:	80 2f       	mov	r24, r16
 1be:	13 96       	adiw	r26, 0x03	; 3
 1c0:	9c 93       	st	X, r25
 1c2:	8e 93       	st	-X, r24
 1c4:	12 97       	sbiw	r26, 0x02	; 2

000001c6 <l_td_t3>:
	la_set(l_td_t3);
	if (*f_pro->timer < 499) {
 1c6:	ed 91       	ld	r30, X+
 1c8:	fc 91       	ld	r31, X
 1ca:	11 97       	sbiw	r26, 0x01	; 1
 1cc:	80 81       	ld	r24, Z
 1ce:	91 81       	ldd	r25, Z+1	; 0x01
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	83 3f       	cpi	r24, 0xF3	; 243
 1d4:	92 07       	cpc	r25, r18
 1d6:	30 f1       	brcs	.+76     	; 0x224 <l_td_t4+0x1c>
		return;
	}		
	f_pro->jmp = 0;
 1d8:	13 96       	adiw	r26, 0x03	; 3
 1da:	1c 92       	st	X, r1
 1dc:	1e 92       	st	-X, r1
 1de:	12 97       	sbiw	r26, 0x02	; 2
	set_led_OW;
 1e0:	dd 9a       	sbi	0x1b, 5	; 27

	*f_pro->timer = 0;
 1e2:	ed 91       	ld	r30, X+
 1e4:	fc 91       	ld	r31, X
 1e6:	11 97       	sbiw	r26, 0x01	; 1
 1e8:	11 82       	std	Z+1, r1	; 0x01
 1ea:	10 82       	st	Z, r1
	la_save(f_pro->jmp ,l_td_t4);
 1ec:	12 96       	adiw	r26, 0x02	; 2
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	13 97       	sbiw	r26, 0x03	; 3
 1f4:	02 e0       	ldi	r16, 0x02	; 2
 1f6:	06 95       	lsr	r16
 1f8:	90 2f       	mov	r25, r16
 1fa:	08 e0       	ldi	r16, 0x08	; 8
 1fc:	07 95       	ror	r16
 1fe:	80 2f       	mov	r24, r16
 200:	13 96       	adiw	r26, 0x03	; 3
 202:	9c 93       	st	X, r25
 204:	8e 93       	st	-X, r24
 206:	12 97       	sbiw	r26, 0x02	; 2

00000208 <l_td_t4>:
	la_set(l_td_t4);
	if (*f_pro->timer < 499) {
 208:	ed 91       	ld	r30, X+
 20a:	fc 91       	ld	r31, X
 20c:	11 97       	sbiw	r26, 0x01	; 1
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	83 3f       	cpi	r24, 0xF3	; 243
 216:	92 07       	cpc	r25, r18
 218:	28 f0       	brcs	.+10     	; 0x224 <l_td_t4+0x1c>
		return;
	}
	f_pro->jmp = 0;		
 21a:	13 96       	adiw	r26, 0x03	; 3
 21c:	1c 92       	st	X, r1
 21e:	1e 92       	st	-X, r1
 220:	12 97       	sbiw	r26, 0x02	; 2
	clr_led_OW;	
 222:	dd 98       	cbi	0x1b, 5	; 27
}
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <mega128_init>:
	 return result;
 }
 */

void mega128_init(void) {
		CLI; // запрет прерываний
 228:	f8 94       	cli
	PUD отключения поддтягивания всех портов к +питания, независимо от 
		их конфигурации
	ACME разрешение мультиплексирования инверсного входа аналогового
		компаратора. Сигнал подается с выхода аналогового мультиплексора АЦП
*/
		SFIOR = 0; 
 22a:	10 bc       	out	0x20, r1	; 32
//            1    0    1   reserved
//            1    1    0   Standby
//            1    1    1   Extended Standby
//            IVSEL - выбор размещения векторов прерываний (flash or boot loader)
//            IVCE - переключение размещения векторов прерываний
                MCUCR = 0;
 22c:	15 be       	out	0x35, r1	; 53

// MCUSCR    JTD  -  -  JTRF  WDRF  BORF  EXTRF  PORF
//           биты 0..4 флаги сбросов МК
//           JTD - при 0 включен JTAG порт при 1 откючен
                MCUCSR  = 0;
 22e:	14 be       	out	0x34, r1	; 52

// Настройка Таймера0 
// TCCR0	FOC0	WGM00	COM01	COM00	WGM01	CS02	CS01	CS00
//	        0 W	0	0	0	0	0	0	0
                TCCR0 = 0;
 230:	13 be       	out	0x33, r1	; 51
                
                OCR0 = 0;
 232:	11 be       	out	0x31, r1	; 49


// Настройка Таймера2 
// TCCR2	FOC2	WGM20	COM21	COM20	WGM21	CS22	CS21	CS20
//	        0 W	0	0	0	0	0	0	0
                TCCR2 = (0x01 << WGM21) | (0x01 << CS22) ;//| (0x01 << CS20);
 234:	8c e0       	ldi	r24, 0x0C	; 12
 236:	85 bd       	out	0x25, r24	; 37
                
                OCR2 = 29; //7,37MHz/256/29 - 1000Hz  // 7,37MHz/1024/72 - 100Hz  7,37MHz/1 74 - 100kHz // 150 - 50kHz
 238:	8d e1       	ldi	r24, 0x1D	; 29
 23a:	83 bd       	out	0x23, r24	; 35
// OCR2 - Compare register Timer 2


// Настройка Таймера1 
// OCR1AH, OCR1AL
			OCR1A = 0; 
 23c:	1b bc       	out	0x2b, r1	; 43
 23e:	1a bc       	out	0x2a, r1	; 42
// TCCR1A	COM1A1	COM1A0	COM1B1	COM1B0	COM1C1	COM1C0	WGM11	WGM10
//	        0 W	0	0	0	0	0	0	0
			TCCR1A = 0;
 240:	1f bc       	out	0x2f, r1	; 47
// TCCR1B	ICNC1	ICES1	-	WGM13	WGM12	CS12	CS11	CS10
//	        0 W	0	0	0	0	0	0	0
                TCCR1B = 0;//(0x01 << WGM12) | 0x04; // /256
 242:	1e bc       	out	0x2e, r1	; 46
				//TCCR1B = 0;
// TCCR1C	FOC1A s FOC1B  FOC1C  -  -  -  -  - 
//	        0 W	0	0	0	0	0	0	0
                TCCR1C = 0;
 244:	10 92 7a 00 	sts	0x007A, r1


//////// Настройка прерываний таймеров
// TIMSK  MSB    OCIE2  TOIE2  TICIE1  OCIE1A  OCIE1B  TOIE1  OCIE0  TOIE0
//               0      0      0       0       0       0      0      0
		TIMSK = (0x01 << OCIE2);
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	87 bf       	out	0x37, r24	; 55
		0	0	1	0	0	ADC4
		0	0	1	0	1	ADC5
		0	0	1	1	0	ADC6
		0	0	1	1	1	ADC7
*/
		ADMUX = 0;
 24c:	17 b8       	out	0x07, r1	; 7
		1	0	0	16
		1	0	1	32
		1	1	0	64 V for 4MHz time conv. 208mks/4807Hz
		1	1	1	128 4807kHz for 8MHz
*/
		ADCSRA = 0;
 24e:	16 b8       	out	0x06, r1	; 6
	0	0	input	no	Tri-State (High-Z)	
	0	1	input	yes	Подтянут к +Vcc через резистор 2кОм
	1	0	output	no	Логический 0
	1	1	output	no	логическая 1
 Фактический сигнал от порта можно узнать прочитав регистр PINx */
		PORTA = 0;
 250:	1b ba       	out	0x1b, r1	; 27
	    DDRA = 0x38;
 252:	88 e3       	ldi	r24, 0x38	; 56
 254:	8a bb       	out	0x1a, r24	; 26

		PORTB = 0;
 256:	18 ba       	out	0x18, r1	; 24
		DDRB = 0;
 258:	17 ba       	out	0x17, r1	; 23

 		PORTC = 0;
 25a:	15 ba       	out	0x15, r1	; 21
		DDRC = 0;
 25c:	14 ba       	out	0x14, r1	; 20

		PORTD = 0;
 25e:	12 ba       	out	0x12, r1	; 18
		DDRD = 0x0;
 260:	11 ba       	out	0x11, r1	; 17

		PORTE = 0;
 262:	13 b8       	out	0x03, r1	; 3
		DDRE = 0;
 264:	12 b8       	out	0x02, r1	; 2

		PORTF = 0;
 266:	10 92 62 00 	sts	0x0062, r1
		DDRF = 0;
 26a:	10 92 61 00 	sts	0x0061, r1
				
		PORTG = 0;
 26e:	10 92 65 00 	sts	0x0065, r1
		DDRG = 0;
 272:	10 92 64 00 	sts	0x0064, r1
//////// 

//UART
//SFR_B_R(0x0C,UDR)
//SFR_B_N(0x0B,UCSRA, RXC,TXC,UDRE,FE,DOR,PE,U2X,MPCM)
                UCSR0A = 0;
 276:	1b b8       	out	0x0b, r1	; 11
                UCSR1A = 0;
 278:	10 92 9b 00 	sts	0x009B, r1
//SFR_B_N(0x0A,UCSRB,  RXCIE,TXCIE,UDRIE,RXEN,TXEN,UCSZ2,RXB8,TXB8)
              //  UCSR0B =  (0x01 << TXEN1);
                UCSR1B =  0;//(0x01 << TXEN1) | (0x01 << RXEN1) | (0x01 << RXCIE1); //(0x01 << TXEN) | (0x01 << UDRIE) |
 27c:	10 92 9a 00 	sts	0x009A, r1
//UCSRC -,UMSEL,UPM1,UPM0,USBS,UCSZ1,UCSZ0,UCPOL)
             //   UCSR0C = (0x01 << UCSZ10) | (0x01 << UCSZ00);
                UCSR1C = 0;//(0x01 << UCSZ11) | (0x01 << UCSZ10);
 280:	10 92 9d 00 	sts	0x009D, r1

				// 11 - 38400, 47-9600, 95 - 4800
			//	UBRR0L = 11;
			//	UBRR1L = 47;
	
	wdt_enable(WDTO_500MS);
 284:	2d e0       	ldi	r18, 0x0D	; 13
 286:	88 e1       	ldi	r24, 0x18	; 24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	a8 95       	wdr
 290:	80 93 41 00 	sts	0x0041, r24
 294:	0f be       	out	0x3f, r0	; 63
 296:	20 93 41 00 	sts	0x0041, r18

// SREG     I   T   H   S   V   N   Z   C
//              ldi R16, 0x80
//                out _SFR_IO_ADDR(SREG), R16 // Enable all interrupt
 29a:	08 95       	ret

0000029c <main>:
la_str_jmp m_pro;
la_str_jmp i_pro;

int main(void)
{
    mega128_init();
 29c:	0e 94 14 01 	call	0x228	; 0x228 <mega128_init>
    m_pro.jmp = 0;
 2a0:	10 92 08 01 	sts	0x0108, r1
 2a4:	10 92 07 01 	sts	0x0107, r1
    m_pro.timer = &m_timer;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	90 93 06 01 	sts	0x0106, r25
 2b0:	80 93 05 01 	sts	0x0105, r24
	i_pro.jmp = 0;
 2b4:	10 92 0c 01 	sts	0x010C, r1
 2b8:	10 92 0b 01 	sts	0x010B, r1
	i_pro.timer = &m_timer;
 2bc:	90 93 0a 01 	sts	0x010A, r25
 2c0:	80 93 09 01 	sts	0x0109, r24
    SEI;
 2c4:	78 94       	sei
		if (t_flag) {
			t_flag = 0;
			static unsigned int div1Hz = 0;
			if (div1Hz++ > 499) {
				div1Hz = 0;
				tgl_led_MK;
 2c6:	18 e0       	ldi	r17, 0x08	; 8
			} // 1Hz
		} // t_flag
		
		la_c_jmp((&m_pro));
 2c8:	0f 2e       	mov	r0, r31
 2ca:	f7 e0       	ldi	r31, 0x07	; 7
 2cc:	ef 2e       	mov	r14, r31
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	ff 2e       	mov	r15, r31
 2d2:	f0 2d       	mov	r31, r0
		la_jmp_time(ij_m_lab_1, 499, (&m_pro), goto m_lab_exit);
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f5 e0       	ldi	r31, 0x05	; 5
 2d8:	cf 2e       	mov	r12, r31
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	df 2e       	mov	r13, r31
 2de:	f0 2d       	mov	r31, r0
 2e0:	e6 01       	movw	r28, r12
 2e2:	22 96       	adiw	r28, 0x02	; 2
		set_led_PK;

		la_jmp_before_func(l_td_1, (&m_pro));
		led_tgl((&i_pro));
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f9 e0       	ldi	r31, 0x09	; 9
 2e8:	af 2e       	mov	r10, r31
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	bf 2e       	mov	r11, r31
 2ee:	f0 2d       	mov	r31, r0
		la_jmp_after_func((&m_pro), (&i_pro), goto m_lab_exit);
 2f0:	88 24       	eor	r8, r8
 2f2:	99 24       	eor	r9, r9
 2f4:	68 94       	set
 2f6:	81 f8       	bld	r8, 1
 2f8:	8a 0c       	add	r8, r10
 2fa:	9b 1c       	adc	r9, r11

		la_jmp_time(ij_m_lab_2, 499, (&m_pro), goto m_lab_exit);
 2fc:	0f 2e       	mov	r0, r31
 2fe:	fe ef       	ldi	r31, 0xFE	; 254
 300:	6f 2e       	mov	r6, r31
 302:	ff ef       	ldi	r31, 0xFF	; 255
 304:	7f 2e       	mov	r7, r31
 306:	f0 2d       	mov	r31, r0
 308:	6e 0c       	add	r6, r14
 30a:	7f 1c       	adc	r7, r15
	i_pro.timer = &m_timer;
    SEI;
		
    while(1)
    {
		wdt_reset();
 30c:	a8 95       	wdr
		
		if (t_flag) {
 30e:	80 91 02 01 	lds	r24, 0x0102
 312:	88 23       	and	r24, r24
 314:	c1 f0       	breq	.+48     	; 0x346 <main+0xaa>
			t_flag = 0;
 316:	10 92 02 01 	sts	0x0102, r1
			static unsigned int div1Hz = 0;
			if (div1Hz++ > 499) {
 31a:	80 91 03 01 	lds	r24, 0x0103
 31e:	90 91 04 01 	lds	r25, 0x0104
 322:	9c 01       	movw	r18, r24
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	30 93 04 01 	sts	0x0104, r19
 32c:	20 93 03 01 	sts	0x0103, r18
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	84 3f       	cpi	r24, 0xF4	; 244
 334:	92 07       	cpc	r25, r18
 336:	38 f0       	brcs	.+14     	; 0x346 <main+0xaa>
				div1Hz = 0;
 338:	10 92 04 01 	sts	0x0104, r1
 33c:	10 92 03 01 	sts	0x0103, r1
				tgl_led_MK;
 340:	8b b3       	in	r24, 0x1b	; 27
 342:	81 27       	eor	r24, r17
 344:	8b bb       	out	0x1b, r24	; 27
			} // 1Hz
		} // t_flag
		
		la_c_jmp((&m_pro));
 346:	d7 01       	movw	r26, r14
 348:	ed 91       	ld	r30, X+
 34a:	fc 91       	ld	r31, X
 34c:	11 97       	sbiw	r26, 0x01	; 1
 34e:	30 97       	sbiw	r30, 0x00	; 0
 350:	09 f0       	breq	.+2      	; 0x354 <main+0xb8>
 352:	09 94       	ijmp
		la_jmp_time(ij_m_lab_1, 499, (&m_pro), goto m_lab_exit);
 354:	d6 01       	movw	r26, r12
 356:	ed 91       	ld	r30, X+
 358:	fc 91       	ld	r31, X
 35a:	11 97       	sbiw	r26, 0x01	; 1
 35c:	11 82       	std	Z+1, r1	; 0x01
 35e:	10 82       	st	Z, r1
 360:	88 81       	ld	r24, Y
 362:	99 81       	ldd	r25, Y+1	; 0x01
 364:	03 e0       	ldi	r16, 0x03	; 3
 366:	06 95       	lsr	r16
 368:	90 2f       	mov	r25, r16
 36a:	04 e7       	ldi	r16, 0x74	; 116
 36c:	07 95       	ror	r16
 36e:	80 2f       	mov	r24, r16
 370:	99 83       	std	Y+1, r25	; 0x01
 372:	88 83       	st	Y, r24

00000374 <ij_m_lab_1>:
 374:	e0 91 05 01 	lds	r30, 0x0105
 378:	f0 91 06 01 	lds	r31, 0x0106
 37c:	80 81       	ld	r24, Z
 37e:	91 81       	ldd	r25, Z+1	; 0x01
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	83 3f       	cpi	r24, 0xF3	; 243
 384:	9b 07       	cpc	r25, r27
 386:	08 f4       	brcc	.+2      	; 0x38a <ij_m_lab_1+0x16>
 388:	c1 cf       	rjmp	.-126    	; 0x30c <main+0x70>
 38a:	f7 01       	movw	r30, r14
 38c:	11 82       	std	Z+1, r1	; 0x01
 38e:	10 82       	st	Z, r1
		set_led_PK;
 390:	dc 9a       	sbi	0x1b, 4	; 27

		la_jmp_before_func(l_td_1, (&m_pro));
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	03 e0       	ldi	r16, 0x03	; 3
 398:	06 95       	lsr	r16
 39a:	90 2f       	mov	r25, r16
 39c:	06 ea       	ldi	r16, 0xA6	; 166
 39e:	07 95       	ror	r16
 3a0:	80 2f       	mov	r24, r16
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	80 83       	st	Z, r24

000003a6 <l_td_1>:
		led_tgl((&i_pro));
 3a6:	c5 01       	movw	r24, r10
 3a8:	0e 94 83 00 	call	0x106	; 0x106 <led_tgl>
		la_jmp_after_func((&m_pro), (&i_pro), goto m_lab_exit);
 3ac:	f4 01       	movw	r30, r8
 3ae:	80 81       	ld	r24, Z
 3b0:	91 81       	ldd	r25, Z+1	; 0x01
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <l_td_1+0x12>
 3b6:	aa cf       	rjmp	.-172    	; 0x30c <main+0x70>
 3b8:	d7 01       	movw	r26, r14
 3ba:	1d 92       	st	X+, r1
 3bc:	1c 92       	st	X, r1

		la_jmp_time(ij_m_lab_2, 499, (&m_pro), goto m_lab_exit);
 3be:	d3 01       	movw	r26, r6
 3c0:	ed 91       	ld	r30, X+
 3c2:	fc 91       	ld	r31, X
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	11 82       	std	Z+1, r1	; 0x01
 3c8:	10 82       	st	Z, r1
 3ca:	f7 01       	movw	r30, r14
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	03 e0       	ldi	r16, 0x03	; 3
 3d2:	06 95       	lsr	r16
 3d4:	90 2f       	mov	r25, r16
 3d6:	00 ee       	ldi	r16, 0xE0	; 224
 3d8:	07 95       	ror	r16
 3da:	80 2f       	mov	r24, r16
 3dc:	91 83       	std	Z+1, r25	; 0x01
 3de:	80 83       	st	Z, r24

000003e0 <ij_m_lab_2>:
 3e0:	e0 91 05 01 	lds	r30, 0x0105
 3e4:	f0 91 06 01 	lds	r31, 0x0106
 3e8:	80 81       	ld	r24, Z
 3ea:	91 81       	ldd	r25, Z+1	; 0x01
 3ec:	b1 e0       	ldi	r27, 0x01	; 1
 3ee:	83 3f       	cpi	r24, 0xF3	; 243
 3f0:	9b 07       	cpc	r25, r27
 3f2:	08 f4       	brcc	.+2      	; 0x3f6 <ij_m_lab_2+0x16>
 3f4:	8b cf       	rjmp	.-234    	; 0x30c <main+0x70>
 3f6:	f7 01       	movw	r30, r14
 3f8:	11 82       	std	Z+1, r1	; 0x01
 3fa:	10 82       	st	Z, r1
		clr_led_PK;
 3fc:	dc 98       	cbi	0x1b, 4	; 27
 3fe:	86 cf       	rjmp	.-244    	; 0x30c <main+0x70>

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
