
AVRASM ver. 2.1.9  main.asm Mon Jun 04 14:46:54 2007

main.asm(989): Including file 'main.vec'
main.asm(990): Including file 'main.inc'
main.inc(23): warning: Register r5 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
main.inc(24): warning: Register r4 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
main.inc(25): warning: Register r6 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
main.inc(26): warning: Register r8 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
main.inc(27): warning: Register r10 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
main.inc(28): warning: Register r12 already defined by the .DEF directive
main.asm(990): 'main.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.5 Professional
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : No
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "main.vec"
                 
                 ;INTERRUPT VECTORS
000000 c05e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c09a      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 	.INCLUDE "main.inc"
                 
                 _auc_SinParam:
000013 4340
000014 4946
000015 4f4c
000016 5552      	.DB  0x40,0x43,0x46,0x49,0x4C,0x4F,0x52,0x55
000017 5b58
000018 605e
000019 6663
00001a 6a68      	.DB  0x58,0x5B,0x5E,0x60,0x63,0x66,0x68,0x6A
00001b 6f6d
00001c 7371
00001d 7675
00001e 7978      	.DB  0x6D,0x6F,0x71,0x73,0x75,0x76,0x78,0x79
00001f 7c7b
000020 7e7d
000021 7f7e
000022 7f7f      	.DB  0x7B,0x7C,0x7D,0x7E,0x7E,0x7F,0x7F,0x7F
000023 7f7f
000024 7f7f
000025 7e7e
000026 7c7d      	.DB  0x7F,0x7F,0x7F,0x7F,0x7E,0x7E,0x7D,0x7C
000027 797b
000028 7678
000029 7375
00002a 6f71      	.DB  0x7B,0x79,0x78,0x76,0x75,0x73,0x71,0x6F
00002b 6a6d
00002c 6668
00002d 6063
00002e 5b5e      	.DB  0x6D,0x6A,0x68,0x66,0x63,0x60,0x5E,0x5B
00002f 5558
000030 4f52
000031 494c
000032 4346      	.DB  0x58,0x55,0x52,0x4F,0x4C,0x49,0x46,0x43
000033 3c40
000034 3639
000035 3033
000036 2a2d      	.DB  0x40,0x3C,0x39,0x36,0x33,0x30,0x2D,0x2A
000037 2427
000038 1f21
000039 191c
00003a 1517      	.DB  0x27,0x24,0x21,0x1F,0x1C,0x19,0x17,0x15
00003b 1012
00003c 0c0e
00003d 090a
00003e 0607      	.DB  0x12,0x10,0xE,0xC,0xA,0x9,0x7,0x6
00003f 0304
000040 0102
000041 0001
000042 0000      	.DB  0x4,0x3,0x2,0x1,0x1,0x0,0x0,0x0
000043 0000
000044 0000
000045 0101
000046 0302      	.DB  0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x3
000047 0604
000048 0907
000049 0c0a
00004a 100e      	.DB  0x4,0x6,0x7,0x9,0xA,0xC,0xE,0x10
00004b 1512
00004c 1917
00004d 1f1c
00004e 2421      	.DB  0x12,0x15,0x17,0x19,0x1C,0x1F,0x21,0x24
00004f 2a27
000050 302d
000051 3633
000052 3c39      	.DB  0x27,0x2A,0x2D,0x30,0x33,0x36,0x39,0x3C
                 _auc_frequencyH:
000053 606b
000054 4f57      	.DB  0x6B,0x60,0x57,0x4F
                 _auc_frequencyL:
000055 383d
000056 2e32      	.DB  0x3D,0x38,0x32,0x2E
                 	.DEF _x_SWa=R5
                 	.DEF _x_SWb=R4
                 	.DEF _i_CurSinValA=R6
                 	.DEF _i_CurSinValB=R8
                 	.DEF _i_TmpSinValA=R10
                 	.DEF _i_TmpSinValB=R12
                 _0:
000057 3044
000058 3139
000059 3535
00005a 3137      	.DB  0x44,0x30,0x39,0x31,0x35,0x35,0x37,0x31
00005b 3834
00005c 3236
00005d 0043      	.DB  0x34,0x38,0x36,0x32,0x43,0x0
                 
                 __GLOBAL_INI_TBL:
00005e 0000      	.DW  0
                 _0x2B:
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bffb      	OUT  GICR,R31
000064 bfeb      	OUT  GICR,R30
000065 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000066 e1f8      	LDI  R31,0x18
000067 bdf1      	OUT  WDTCR,R31
000068 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,13
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(0x400)
000070 e094      	LDI  R25,HIGH(0x400)
000071 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 ebec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000087 e5ef      	LDI  R30,LOW(0x45F)
000088 bfed      	OUT  SPL,R30
000089 e0e4      	LDI  R30,HIGH(0x45F)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e6c0      	LDI  R28,LOW(0x160)
00008c e0d1      	LDI  R29,HIGH(0x160)
                 
00008d c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 ;       1 //******************************************************
                 ;       2 // behzad khazama 2007/06/04 SABZEVAR-IRAN
                 ;       3 // www.khazama.com
                 ;       4 //
                 ;       5 // to use this project as DTMF caller id generator
                 ;       6 // connect tel lines as bellow
                 ;       7 //
                 ;       8 //  use 2 series capacitor as bellow
                 ;       9 //  TEL(+) --||--*--||-- PORTB.1 (OC1A)
                 ;      10 //          +  -   -  +
                 ;      11 //       (1uf 50v) (1uf 50v)
                 ;      12 //
                 ;      13 //  TEL(-) -- connect to GND
                 ;      14 //
                 ;      15 //******************************************************
                 ;      16 
                 ;      17 
                 ;      18 //******************************************************
                 ;      19 // DTMF caller id signals generate before first ring
                 ;      20 // it starts with DTMF signal D (A or B may use too)
                 ;      21 // and terminate with DTMF signal C
                 ;      22 // between D and C 'caller number' will generate
                 ;      23 //
                 ;      24 // D(number...)C ------- first ring
                 ;      25 //******************************************************
                 ;      26 
                 ;      27 #include <mega8.h>
                 ;      28 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;      29 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;      30 	.EQU __se_bit=0x80
                 	.EQU __se_bit=0x80
                 ;      31 	.EQU __sm_mask=0x70
                 	.EQU __sm_mask=0x70
                 ;      32 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powerdown=0x20
                 ;      33 	.EQU __sm_powersave=0x30
                 	.EQU __sm_powersave=0x30
                 ;      34 	.EQU __sm_standby=0x60
                 	.EQU __sm_standby=0x60
                 ;      35 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_ext_standby=0x70
                 ;      36 	.EQU __sm_adc_noise_red=0x10
                 	.EQU __sm_adc_noise_red=0x10
                 ;      37 	.SET power_ctrl_reg=mcucr
                 	.SET power_ctrl_reg=mcucr
                 ;      38 	#endif
                 	#endif
                 ;      39 #include <string.h>
                 ;      40 #include "dtmf.h"
                 ;      41 
                 ;      42 void main(void){
                 
                 	.CSEG
                 _main:
                 ;      43    char num[15];
                 ;      44         dtmf_init();
00008e 972f      	SBIW R28,15
                 ;	num -> Y+0
00008f d03f      	RCALL _dtmf_init
                 ;      45         strcpyf(num,"D09155714862C");
000090 d0bd      	RCALL SUBOPT_0x0
000091 eaee
000092 e0f0      	__POINTW1FN _0,0
000093 d0be      	RCALL SUBOPT_0x1
000094 d0ec      	RCALL _strcpyf
                 ;      46         Send_DTMF(num);
000095 d0b8      	RCALL SUBOPT_0x0
000096 d043      	RCALL _Send_DTMF
                 ;      47         while(1);
                 _0x3:
000097 cfff      	RJMP _0x3
                 ;      48 }
                 _0x6:
000098 cfff      	RJMP _0x6
                 ;      49 //**************************************************************************
                 ;      50 // This Module has ported from Atmel applivation note 314 for atmega8
                 ;      51 // I have modifed that app note a bit to remove
                 ;      52 // free runnig osilation between two medulated signal.
                 ;      53 // behzad khazama 2007/06/04 SABZEVAR-IRAN
                 ;      54 // www.khazama.com
                 ;      55 //**************************************************************************
                 ;      56 
                 ;      57 #include <string.h>
                 ;      58 #include <mega8.h>
                 ;      59 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;      70 #include <delay.h>
                 ;      71 
                 ;      72 //************************** SIN TABLE *************************************
                 ;      73 // Samples table : one period sampled on 128 samples and
                 ;      74 // quantized on 7 bit
                 ;      75 //**************************************************************************
                 ;      76 flash unsigned char auc_SinParam [128] = {
                 ;      77 64,67,
                 ;      78 70,73,
                 ;      79 76,79,
                 ;      80 82,85,
                 ;      81 88,91,
                 ;      82 94,96,
                 ;      83 99,102,
                 ;      84 104,106,
                 ;      85 109,111,
                 ;      86 113,115,
                 ;      87 117,118,
                 ;      88 120,121,
                 ;      89 123,124,
                 ;      90 125,126,
                 ;      91 126,127,
                 ;      92 127,127,
                 ;      93 127,127,
                 ;      94 127,127,
                 ;      95 126,126,
                 ;      96 125,124,
                 ;      97 123,121,
                 ;      98 120,118,
                 ;      99 117,115,
                 ;     100 113,111,
                 ;     101 109,106,
                 ;     102 104,102,
                 ;     103 99,96,
                 ;     104 94,91,
                 ;     105 88,85,
                 ;     106 82,79,
                 ;     107 76,73,
                 ;     108 70,67,
                 ;     109 64,60,
                 ;     110 57,54,
                 ;     111 51,48,
                 ;     112 45,42,
                 ;     113 39,36,
                 ;     114 33,31,
                 ;     115 28,25,
                 ;     116 23,21,
                 ;     117 18,16,
                 ;     118 14,12,
                 ;     119 10,9,
                 ;     120 7,6,
                 ;     121 4,3,
                 ;     122 2,1,
                 ;     123 1,0,
                 ;     124 0,0,
                 ;     125 0,0,
                 ;     126 0,0,
                 ;     127 1,1,
                 ;     128 2,3,
                 ;     129 4,6,
                 ;     130 7,9,
                 ;     131 10,12,
                 ;     132 14,16,
                 ;     133 18,21,
                 ;     134 23,25,
                 ;     135 28,31,
                 ;     136 33,36,
                 ;     137 39,42,
                 ;     138 45,48,
                 ;     139 51,54,
                 ;     140 57,60};
                 ;     141 
                 ;     142 //***************************  x_SW  ***************************************
                 ;     143 //Table of x_SW (excess 8): x_SW = ROUND(8*N_samples*f*510/Fck)
                 ;     144 //**************************************************************************
                 ;     145 
                 ;     146 //high frequency (coloun)
                 ;     147 //1209hz  ---> x_SW = 79
                 ;     148 //1336hz  ---> x_SW = 87
                 ;     149 //1477hz  ---> x_SW = 96
                 ;     150 //1633hz  ---> x_SW = 107
                 ;     151 
                 ;     152 const unsigned char auc_frequencyH [4] = {
                 ;     153 107,96,
                 ;     154 87,79};
                 ;     155 
                 ;     156 //low frequency (row)
                 ;     157 //697hz  ---> x_SW = 46
                 ;     158 //770hz  ---> x_SW = 50
                 ;     159 //852hz  ---> x_SW = 56
                 ;     160 //941hz  ---> x_SW = 61
                 ;     161 
                 ;     162 const unsigned char auc_frequencyL [4] = {
                 ;     163 61,56,
                 ;     164 50,46};
                 ;     165 
                 ;     166 
                 ;     167 //**************************  global variables  ****************************
                 ;     168 unsigned char x_SWa = 0x00;               // step width of high frequency
                 ;     169 unsigned char x_SWb = 0x00;               // step width of low frequency
                 ;     170 unsigned int  i_CurSinValA = 0;           // position freq. A in LUT (extended format)
                 ;     171 unsigned int  i_CurSinValB = 0;           // position freq. B in LUT (extended format)
                 ;     172 unsigned int  i_TmpSinValA;               // position freq. A in LUT (actual position)
                 ;     173 unsigned int  i_TmpSinValB;               // position freq. B in LUT (actual position)
                 ;     174 
                 ;     175 void stop_dtmf(void){
                 _stop_dtmf:
                 ;     176  x_SWb=0;
000099 2444      	CLR  R4
                 ;     177  x_SWb=0;
00009a 2444      	CLR  R4
                 ;     178  TCCR1A &= 127;
00009b b5ef      	IN   R30,0x2F
00009c 77ef      	ANDI R30,0x7F
00009d bdef      	OUT  0x2F,R30
                 ;     179  }
00009e 9508      	RET
                 ;     180 
                 ;     181 void start_dtmf(void){
                 _start_dtmf:
                 ;     182  TCCR1A |= 128 ;
00009f b5ef      	IN   R30,0x2F
0000a0 68e0      	ORI  R30,0x80
0000a1 bdef      	OUT  0x2F,R30
                 ;     183 }
0000a2 9508      	RET
                 ;     184 
                 ;     185 //**************************************************************************
                 ;     186 // Timer overflow interrupt service routine
                 ;     187 //**************************************************************************
                 ;     188 interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ;     189 {
                 _timer1_ovf_isr:
0000a3 920a      	ST   -Y,R0
0000a4 921a      	ST   -Y,R1
0000a5 93aa      	ST   -Y,R26
0000a6 93ea      	ST   -Y,R30
0000a7 93fa      	ST   -Y,R31
0000a8 b7ef      	IN   R30,SREG
0000a9 93ea      	ST   -Y,R30
                 ;     190   // move Pointer about step width aheaed
                 ;     191   i_CurSinValA += x_SWa;
0000aa 2de5      	MOV  R30,R5
0000ab d0a9      	RCALL SUBOPT_0x2
0000ac 0e6e
0000ad 1e7f      	__ADDWRR 6,7,30,31
                 ;     192   i_CurSinValB += x_SWb;
0000ae 2de4      	MOV  R30,R4
0000af d0a5      	RCALL SUBOPT_0x2
0000b0 0e8e
0000b1 1e9f      	__ADDWRR 8,9,30,31
                 ;     193   // normalize Temp-Pointer
                 ;     194   i_TmpSinValA  =  (char)(((i_CurSinValA+4) >> 3)&(0x007F));
0000b2 01f3      	MOVW R30,R6
0000b3 d0a3      	RCALL SUBOPT_0x3
0000b4 015f      	MOVW R10,R30
                 ;     195   i_TmpSinValB  =  (char)(((i_CurSinValB+4) >> 3)&(0x007F));
0000b5 01f4      	MOVW R30,R8
0000b6 d0a0      	RCALL SUBOPT_0x3
0000b7 016f      	MOVW R12,R30
                 ;     196   // calculate PWM value: high frequency value + 3/4 low frequency value
                 ;     197   OCR1A = (auc_SinParam[i_TmpSinValA] + (auc_SinParam[i_TmpSinValB]-(auc_SinParam[i_TmpSinValB]>>2)));
0000b8 01f5      	MOVW R30,R10
0000b9 5dea      	SUBI R30,LOW(-_auc_SinParam*2)
0000ba 4fff      	SBCI R31,HIGH(-_auc_SinParam*2)
0000bb 9004      	LPM  R0,Z
0000bc d0a2      	RCALL SUBOPT_0x4
0000bd 2fae      	MOV  R26,R30
0000be d0a0      	RCALL SUBOPT_0x4
0000bf 95e6      	LSR  R30
0000c0 95e6      	LSR  R30
0000c1 d0e7      	RCALL __SWAPB12
0000c2 1bea      	SUB  R30,R26
0000c3 0de0      	ADD  R30,R0
0000c4 d090      	RCALL SUBOPT_0x2
0000c5 bdfb      	OUT  0x2A+1,R31
0000c6 bdea      	OUT  0x2A,R30
                 ;     198 }
0000c7 91e9      	LD   R30,Y+
0000c8 bfef      	OUT  SREG,R30
0000c9 91f9      	LD   R31,Y+
0000ca 91e9      	LD   R30,Y+
0000cb 91a9      	LD   R26,Y+
0000cc 9019      	LD   R1,Y+
0000cd 9009      	LD   R0,Y+
0000ce 9518      	RETI
                 ;     199 
                 ;     200 //**************************************************************************
                 ;     201 // Initialization
                 ;     202 //**************************************************************************
                 ;     203 void dtmf_init (void)
                 ;     204 {
                 _dtmf_init:
                 ;     205     TIMSK  = 0x04;                     // Int T1 Overflow enabled
0000cf e0e4      	LDI  R30,LOW(4)
0000d0 bfe9      	OUT  0x39,R30
                 ;     206     TCCR1A=0x81;
0000d1 e8e1      	LDI  R30,LOW(129)
0000d2 bdef      	OUT  0x2F,R30
                 ;     207     TCCR1B=0x01;
0000d3 e0e1      	LDI  R30,LOW(1)
0000d4 bdee      	OUT  0x2E,R30
                 ;     208     DDRB   = 0x02 ;                    // PORTB.1 (OC1A) as output
0000d5 e0e2      	LDI  R30,LOW(2)
0000d6 bbe7      	OUT  0x17,R30
                 ;     209     stop_dtmf();
0000d7 dfc1      	RCALL _stop_dtmf
                 ;     210     #asm("sei");                       // Interrupts enabled
0000d8 9478      	sei
                 ;     211 }
0000d9 9508      	RET
                 ;     212 
                 ;     213 void Send_DTMF (char * number)
                 ;     214 {
                 _Send_DTMF:
                 ;     215   char ch=0,i=0;
                 ;     216   for(i=0;i<strlen(number);i++){
0000da d0d2      	RCALL __SAVELOCR2
                 ;	*number -> Y+2
                 ;	ch -> R17
                 ;	i -> R16
0000db e000      	LDI  R16,0
0000dc e010      	LDI  R17,0
0000dd e000      	LDI  R16,LOW(0)
                 _0x8:
0000de 81ea      	LDD  R30,Y+2
0000df 81fb      	LDD  R31,Y+2+1
0000e0 d071      	RCALL SUBOPT_0x1
0000e1 d0aa      	RCALL _strlen
0000e2 2fa0      	MOV  R26,R16
0000e3 e0b0      	LDI  R27,0
0000e4 fda7      	SBRC R26,7
0000e5 efbf      	SER  R27
0000e6 17ae      	CP   R26,R30
0000e7 07bf      	CPC  R27,R31
0000e8 f008      	BRLO PC+2
0000e9 c060      	RJMP _0x9
                 ;     217     ch=number[i];
0000ea 2fe0      	MOV  R30,R16
0000eb 81aa      	LDD  R26,Y+2
0000ec 81bb      	LDD  R27,Y+2+1
0000ed d067      	RCALL SUBOPT_0x2
0000ee 0fae      	ADD  R26,R30
0000ef 1fbf      	ADC  R27,R31
0000f0 911c      	LD   R17,X
                 ;     218         if(ch=='1'){
0000f1 3311      	CPI  R17,49
0000f2 f419      	BRNE _0xA
                 ;     219                 x_SWb = auc_frequencyL[3];
0000f3 d070      	RCALL SUBOPT_0x5
                 ;     220                 x_SWa = auc_frequencyH[3];
0000f4 d073      	RCALL SUBOPT_0x6
0000f5 c04d      	RJMP _0x29
                 ;     221         }
                 ;     222         else if(ch=='2'){
                 _0xA:
0000f6 3312      	CPI  R17,50
0000f7 f419      	BRNE _0xC
                 ;     223                 x_SWb = auc_frequencyL[3];
0000f8 d06b      	RCALL SUBOPT_0x5
                 ;     224                 x_SWa = auc_frequencyH[2];
0000f9 d071      	RCALL SUBOPT_0x7
0000fa c048      	RJMP _0x29
                 ;     225         }
                 ;     226         else if(ch=='3'){
                 _0xC:
0000fb 3313      	CPI  R17,51
0000fc f419      	BRNE _0xE
                 ;     227                 x_SWb = auc_frequencyL[3];
0000fd d066      	RCALL SUBOPT_0x5
                 ;     228                 x_SWa = auc_frequencyH[1];
0000fe d06f      	RCALL SUBOPT_0x8
0000ff c043      	RJMP _0x29
                 ;     229         }
                 ;     230         else if(ch=='4'){
                 _0xE:
000100 3314      	CPI  R17,52
000101 f419      	BRNE _0x10
                 ;     231                 x_SWb = auc_frequencyL[2];
000102 d06e      	RCALL SUBOPT_0x9
                 ;     232                 x_SWa = auc_frequencyH[3];
000103 d064      	RCALL SUBOPT_0x6
000104 c03e      	RJMP _0x29
                 ;     233         }
                 ;     234         else if(ch=='5'){
                 _0x10:
000105 3315      	CPI  R17,53
000106 f419      	BRNE _0x12
                 ;     235                 x_SWb = auc_frequencyL[2];
000107 d069      	RCALL SUBOPT_0x9
                 ;     236                 x_SWa = auc_frequencyH[2];
000108 d062      	RCALL SUBOPT_0x7
000109 c039      	RJMP _0x29
                 ;     237         }
                 ;     238         else if(ch=='6'){
                 _0x12:
00010a 3316      	CPI  R17,54
00010b f419      	BRNE _0x14
                 ;     239                 x_SWb = auc_frequencyL[2];
00010c d064      	RCALL SUBOPT_0x9
                 ;     240                 x_SWa = auc_frequencyH[1];
00010d d060      	RCALL SUBOPT_0x8
00010e c034      	RJMP _0x29
                 ;     241         }
                 ;     242         else if(ch=='7'){
                 _0x14:
00010f 3317      	CPI  R17,55
000110 f419      	BRNE _0x16
                 ;     243                 x_SWb = auc_frequencyL[1];
000111 d063      	RCALL SUBOPT_0xA
                 ;     244                 x_SWa = auc_frequencyH[3];
000112 d055      	RCALL SUBOPT_0x6
000113 c02f      	RJMP _0x29
                 ;     245         }
                 ;     246         else if(ch=='8'){
                 _0x16:
000114 3318      	CPI  R17,56
000115 f419      	BRNE _0x18
                 ;     247                 x_SWb = auc_frequencyL[1];
000116 d05e      	RCALL SUBOPT_0xA
                 ;     248                 x_SWa = auc_frequencyH[2];
000117 d053      	RCALL SUBOPT_0x7
000118 c02a      	RJMP _0x29
                 ;     249         }
                 ;     250         else if(ch=='9'){
                 _0x18:
000119 3319      	CPI  R17,57
00011a f419      	BRNE _0x1A
                 ;     251                 x_SWb = auc_frequencyL[1];
00011b d059      	RCALL SUBOPT_0xA
                 ;     252                 x_SWa = auc_frequencyH[1];
00011c d051      	RCALL SUBOPT_0x8
00011d c025      	RJMP _0x29
                 ;     253         }
                 ;     254         else if(ch=='0'){
                 _0x1A:
00011e 3310      	CPI  R17,48
00011f f419      	BRNE _0x1C
                 ;     255                 x_SWb = auc_frequencyL[0];
000120 d058      	RCALL SUBOPT_0xB
                 ;     256                 x_SWa = auc_frequencyH[2];
000121 d049      	RCALL SUBOPT_0x7
000122 c020      	RJMP _0x29
                 ;     257         }
                 ;     258         else if(ch=='*'){
                 _0x1C:
000123 321a      	CPI  R17,42
000124 f419      	BRNE _0x1E
                 ;     259                 x_SWb = auc_frequencyL[0];
000125 d053      	RCALL SUBOPT_0xB
                 ;     260                 x_SWa = auc_frequencyH[3];
000126 d041      	RCALL SUBOPT_0x6
000127 c01b      	RJMP _0x29
                 ;     261         }
                 ;     262         else if(ch=='#'){
                 _0x1E:
000128 3213      	CPI  R17,35
000129 f419      	BRNE _0x20
                 ;     263                 x_SWb = auc_frequencyL[0];
00012a d04e      	RCALL SUBOPT_0xB
                 ;     264                 x_SWa = auc_frequencyH[1];
00012b d042      	RCALL SUBOPT_0x8
00012c c016      	RJMP _0x29
                 ;     265         }
                 ;     266         else if(ch=='A'){
                 _0x20:
00012d 3411      	CPI  R17,65
00012e f419      	BRNE _0x22
                 ;     267                 x_SWb = auc_frequencyL[3];
00012f eaed
000130 e0f0      	__POINTW1FN _auc_frequencyL,3
000131 c00e      	RJMP _0x2A
                 ;     268                 x_SWa = auc_frequencyH[0];
                 ;     269         }
                 ;     270         else if(ch=='B'){
                 _0x22:
000132 3412      	CPI  R17,66
000133 f419      	BRNE _0x24
                 ;     271                 x_SWb = auc_frequencyL[2];
000134 eaec
000135 e0f0      	__POINTW1FN _auc_frequencyL,2
000136 c009      	RJMP _0x2A
                 ;     272                 x_SWa = auc_frequencyH[0];
                 ;     273         }
                 ;     274         else if(ch=='C'){
                 _0x24:
000137 3413      	CPI  R17,67
000138 f419      	BRNE _0x26
                 ;     275                 x_SWb = auc_frequencyL[1];
000139 eaeb
00013a e0f0      	__POINTW1FN _auc_frequencyL,1
00013b c004      	RJMP _0x2A
                 ;     276                 x_SWa = auc_frequencyH[0];
                 ;     277         }
                 ;     278         else if(ch=='D'){
                 _0x26:
00013c 3414      	CPI  R17,68
00013d f431      	BRNE _0x28
                 ;     279                 x_SWb = auc_frequencyL[0];
00013e eaea      	LDI  R30,LOW(_auc_frequencyL*2)
00013f e0f0      	LDI  R31,HIGH(_auc_frequencyL*2)
                 _0x2A:
000140 9044      	LPM  R4,Z
                 ;     280                 x_SWa = auc_frequencyH[0];
000141 eae6      	LDI  R30,LOW(_auc_frequencyH*2)
000142 e0f0      	LDI  R31,HIGH(_auc_frequencyH*2)
                 _0x29:
000143 9054      	LPM  R5,Z
                 ;     281         }
                 ;     282 
                 ;     283         start_dtmf();
                 _0x28:
000144 df5a      	RCALL _start_dtmf
                 ;     284         delay_ms(150);
000145 d037      	RCALL SUBOPT_0xC
                 ;     285         stop_dtmf();
000146 df52      	RCALL _stop_dtmf
                 ;     286         delay_ms(150);
000147 d035      	RCALL SUBOPT_0xC
                 ;     287     }; // end of for
000148 5f0f      	SUBI R16,-1
000149 cf94      	RJMP _0x8
                 _0x9:
                 ;     288  stop_dtmf();
00014a df4e      	RCALL _stop_dtmf
                 ;     289 }
00014b d064      	RCALL __LOADLOCR2
00014c 9624      	ADIW R28,4
00014d 9508      	RET
                 ;     290 
                 
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00014e 01fe      	MOVW R30,R28
00014f 93fa      	ST   -Y,R31
000150 93ea      	ST   -Y,R30
000151 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000152 93fa      	ST   -Y,R31
000153 93ea      	ST   -Y,R30
000154 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000155 e0f0      	LDI  R31,0
000156 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000157 9634      	ADIW R30,4
000158 d049      	RCALL __LSRW3
000159 77ef      	ANDI R30,LOW(0x7F)
00015a 70f0      	ANDI R31,HIGH(0x7F)
00015b e0f0      	LDI  R31,0
00015c fde7      	SBRC R30,7
00015d efff      	SER  R31
00015e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00015f 01f6      	MOVW R30,R12
000160 5dea      	SUBI R30,LOW(-_auc_SinParam*2)
000161 4fff      	SBCI R31,HIGH(-_auc_SinParam*2)
000162 91e4      	LPM  R30,Z
000163 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000164 eaed
000165 e0f0      	__POINTW1FN _auc_frequencyL,3
000166 9044      	LPM  R4,Z
000167 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000168 eae9
000169 e0f0      	__POINTW1FN _auc_frequencyH,3
00016a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00016b eae8
00016c e0f0      	__POINTW1FN _auc_frequencyH,2
00016d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00016e eae7
00016f e0f0      	__POINTW1FN _auc_frequencyH,1
000170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000171 eaec
000172 e0f0      	__POINTW1FN _auc_frequencyL,2
000173 9044      	LPM  R4,Z
000174 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000175 eaeb
000176 e0f0      	__POINTW1FN _auc_frequencyL,1
000177 9044      	LPM  R4,Z
000178 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000179 eaea      	LDI  R30,LOW(_auc_frequencyL*2)
00017a e0f0      	LDI  R31,HIGH(_auc_frequencyL*2)
00017b 9044      	LPM  R4,Z
00017c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00017d e9e6      	LDI  R30,LOW(150)
00017e e0f0      	LDI  R31,HIGH(150)
00017f dfd2      	RCALL SUBOPT_0x1
000180 c015      	RJMP _delay_ms
                 
                 _strcpyf:
000181 91e9      	ld   r30,y+
000182 91f9      	ld   r31,y+
000183 91a9      	ld   r26,y+
000184 91b9      	ld   r27,y+
000185 01cd      	movw r24,r26
                 __strcpyf0:
000186 9005      	lpm  r0,z+
000187 920d      	st   x+,r0
000188 2000      	tst  r0
000189 f7e1      	brne __strcpyf0
00018a 01fc      	movw r30,r24
00018b 9508      	ret
                 
                 _strlen:
00018c 91a9      	ld   r26,y+
00018d 91b9      	ld   r27,y+
00018e 27ee      	clr  r30
00018f 27ff      	clr  r31
                 __strlen0:
000190 916d      	ld   r22,x+
000191 2366      	tst  r22
000192 f011      	breq __strlen1
000193 9631      	adiw r30,1
000194 cffb      	rjmp __strlen0
                 __strlen1:
000195 9508      	ret
                 
                 _delay_ms:
000196 91e9      	ld   r30,y+
000197 91f9      	ld   r31,y+
000198 9630      	adiw r30,0
000199 f039      	breq __delay_ms1
                 __delay_ms0:
00019a ed80
00019b e097
00019c 9701
00019d f7f1      	__DELAY_USW 0x7D0
00019e 95a8      	wdr
00019f 9731      	sbiw r30,1
0001a0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a1 9508      	ret
                 
                 __LSRW3:
0001a2 95f6      	LSR  R31
0001a3 95e7      	ROR  R30
                 __LSRW2:
0001a4 95f6      	LSR  R31
0001a5 95e7      	ROR  R30
0001a6 95f6      	LSR  R31
0001a7 95e7      	ROR  R30
0001a8 9508      	RET
                 
                 __SWAPB12:
0001a9 2e1a      	MOV  R1,R26
0001aa 2fae      	MOV  R26,R30
0001ab 2de1      	MOV  R30,R1
0001ac 9508      	RET
                 
                 __SAVELOCR2:
0001ad 931a      	ST   -Y,R17
0001ae 930a      	ST   -Y,R16
0001af 9508      	RET
                 
                 __LOADLOCR2:
0001b0 8119      	LDD  R17,Y+1
0001b1 8108      	LD   R16,Y
0001b2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  11 r1 :   5 r2 :   0 r3 :   0 r4 :   8 r5 :   2 r6 :   2 r7 :   1 
r8 :   2 r9 :   1 r10:   2 r11:   0 r12:   2 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  20 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   0 
r24:  11 r25:   3 r26:  17 r27:   9 r28:   4 r29:   1 r30:  90 r31:  41 
x  :   6 y  :  32 z  :  16 
Registers used: 24 out of 35 (68.6%)

ATmega8 instruction use summary:
adc   :   3 add   :   4 adiw  :   4 and   :   0 andi  :   3 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   3 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 
brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 
cln   :   0 clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   0 cp    :   1 cpc   :   1 cpi   :  16 cpse  :   0 dec   :   1 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   0 ld    :  17 ldd   :   5 ldi   :  53 lds   :   0 
lpm   :  16 lsl   :   0 lsr   :   5 mov   :   8 movw  :  12 mul   :   0 
muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   1 
out   :  17 pop   :   0 push  :   0 rcall :  51 ret   :  23 reti  :   1 
rjmp  :  42 rol   :   0 ror   :   3 sbc   :   0 sbci  :   2 sbi   :   0 
sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   2 sbrs  :   0 
sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   2 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  16 
std   :   0 sts   :   0 sub   :   1 subi  :   3 swap  :   0 tst   :   2 
wdr   :   1 
Instructions used: 38 out of 109 (34.9%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000366    718    152    870    8192  10.6%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
