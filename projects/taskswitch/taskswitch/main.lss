
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000019f  00800100  00800100  000003fe  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c0  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b4  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b0  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002df  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011d  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000118  00000000  00000000  00000ee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  80:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000008c <__c.1593>:
  8c:	74 68 72 65 61 64 32 0d 0a 00                       thread2...

00000096 <__c.1587>:
  96:	74 68 72 65 61 64 31 0d 0a 00                       thread1...

000000a0 <__c.1563>:
  a0:	74 68 72 65 61 64 30 0d 0a 00                       thread0...

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	ea e8       	ldi	r30, 0x8A	; 138
  be:	f3 e0       	ldi	r31, 0x03	; 3
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>
  d0:	1b be       	out	0x3b, r1	; 59

000000d2 <__do_clear_bss>:
  d2:	12 e0       	ldi	r17, 0x02	; 2
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	af 39       	cpi	r26, 0x9F	; 159
  de:	b1 07       	cpc	r27, r17
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  e6:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <uart_tx1_P>:
	};
}


void uart_tx1_P(PGM_P string)
{
  ee:	fc 01       	movw	r30, r24
  f0:	07 c0       	rjmp	.+14     	; 0x100 <uart_tx1_P+0x12>
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
  f2:	80 93 9c 00 	sts	0x009C, r24
		string++;
		while(!(UCSR1A & _BV(UDRE1)));
  f6:	80 91 9b 00 	lds	r24, 0x009B
  fa:	85 ff       	sbrs	r24, 5
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <uart_tx1_P+0x8>
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
		string++;
  fe:	31 96       	adiw	r30, 0x01	; 1


void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
 100:	84 91       	lpm	r24, Z+
 102:	88 23       	and	r24, r24
 104:	b1 f7       	brne	.-20     	; 0xf2 <uart_tx1_P+0x4>
	{
		UDR1=tempchar;
		string++;
		while(!(UCSR1A & _BV(UDRE1)));
	};
}
 106:	08 95       	ret

00000108 <thread2>:
		next_thread();
	};
}

void thread2(void)
{
 108:	0c c0       	rjmp	.+24     	; 0x122 <thread2+0x1a>
void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
 10a:	80 93 9c 00 	sts	0x009C, r24
		string++;
		while(!(UCSR1A & _BV(UDRE1)));
 10e:	80 91 9b 00 	lds	r24, 0x009B
 112:	85 ff       	sbrs	r24, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <thread2+0x6>
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
		string++;
 116:	31 96       	adiw	r30, 0x01	; 1


void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
 118:	84 91       	lpm	r24, Z+
 11a:	88 23       	and	r24, r24
 11c:	b1 f7       	brne	.-20     	; 0x10a <thread2+0x2>
void thread2(void)
{
	while(1)
	{
		uart_tx1_P(PSTR("thread2\r\n"));
		next_thread();
 11e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <next_thread>

void thread2(void)
{
	while(1)
	{
		uart_tx1_P(PSTR("thread2\r\n"));
 122:	ec e8       	ldi	r30, 0x8C	; 140
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	f8 cf       	rjmp	.-16     	; 0x118 <thread2+0x10>

00000128 <thread1>:

	while(1);	
}

void thread1(void)
{
 128:	0c c0       	rjmp	.+24     	; 0x142 <thread1+0x1a>
void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
 12a:	80 93 9c 00 	sts	0x009C, r24
		string++;
		while(!(UCSR1A & _BV(UDRE1)));
 12e:	80 91 9b 00 	lds	r24, 0x009B
 132:	85 ff       	sbrs	r24, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <thread1+0x6>
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
		string++;
 136:	31 96       	adiw	r30, 0x01	; 1


void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
 138:	84 91       	lpm	r24, Z+
 13a:	88 23       	and	r24, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <thread1+0x2>
void thread1(void)
{
	while(1)
	{
		uart_tx1_P(PSTR("thread1\r\n"));
		next_thread();
 13e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <next_thread>

void thread1(void)
{
	while(1)
	{
		uart_tx1_P(PSTR("thread1\r\n"));
 142:	e6 e9       	ldi	r30, 0x96	; 150
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	f8 cf       	rjmp	.-16     	; 0x138 <thread1+0x10>

00000148 <main>:
	extern volatile unsigned char current_thread;


// Main application routine. 
int main(void)
{
 148:	1f 93       	push	r17
	unsigned char tempchar=5;

	// Setup Uart1
	DDRD |=_BV(PD3);		// UTX1 output
 14a:	8b 9a       	sbi	0x11, 3	; 17
	DDRD &=~_BV(PD2);		// URX1 input
 14c:	8a 98       	cbi	0x11, 2	; 17
	UCSR1B |= _BV(TXEN1);	// enable tx
 14e:	80 91 9a 00 	lds	r24, 0x009A
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 93 9a 00 	sts	0x009A, r24
	UBRR1H = 0;
 158:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 95;			// 9600 baud at 14.7456MHz
 15c:	8f e5       	ldi	r24, 0x5F	; 95
 15e:	80 93 99 00 	sts	0x0099, r24

	makethreads();
 162:	0e 94 4a 01 	call	0x294	; 0x294 <makethreads>
	switch(current_thread)
 166:	80 91 00 01 	lds	r24, 0x0100
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	19 f0       	breq	.+6      	; 0x174 <main+0x2c>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	29 f4       	brne	.+10     	; 0x17c <main+0x34>
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x30>
	{
		case 1:
			thread1();
 174:	0e 94 94 00 	call	0x128	; 0x128 <thread1>
		case 2:
			thread2();
 178:	0e 94 84 00 	call	0x108	; 0x108 <thread2>
 17c:	15 e0       	ldi	r17, 0x05	; 5
 17e:	0c c0       	rjmp	.+24     	; 0x198 <main+0x50>
void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
 180:	80 93 9c 00 	sts	0x009C, r24
		string++;
		while(!(UCSR1A & _BV(UDRE1)));
 184:	80 91 9b 00 	lds	r24, 0x009B
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <main+0x3c>
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
	{
		UDR1=tempchar;
		string++;
 18c:	31 96       	adiw	r30, 0x01	; 1


void uart_tx1_P(PGM_P string)
{
	char tempchar;
	while((tempchar=pgm_read_byte(string)))
 18e:	84 91       	lpm	r24, Z+
 190:	88 23       	and	r24, r24
 192:	b1 f7       	brne	.-20     	; 0x180 <main+0x38>
	};

	while(tempchar--)
	{
		uart_tx1_P(PSTR("thread0\r\n"));
		next_thread();
 194:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <next_thread>
			thread1();
		case 2:
			thread2();
	};

	while(tempchar--)
 198:	11 50       	subi	r17, 0x01	; 1
 19a:	1f 3f       	cpi	r17, 0xFF	; 255
 19c:	19 f0       	breq	.+6      	; 0x1a4 <main+0x5c>
	{
		uart_tx1_P(PSTR("thread0\r\n"));
 19e:	e0 ea       	ldi	r30, 0xA0	; 160
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	f5 cf       	rjmp	.-22     	; 0x18e <main+0x46>
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x5c>

000001a6 <next_thread>:

	unsigned char current_thread=0;	//0=main thread

void next_thread(void)
{
	SAVE_CONTEXT();
 1a6:	0f 92       	push	r0
 1a8:	1f 92       	push	r1
 1aa:	2f 92       	push	r2
 1ac:	3f 92       	push	r3
 1ae:	4f 92       	push	r4
 1b0:	5f 92       	push	r5
 1b2:	6f 92       	push	r6
 1b4:	7f 92       	push	r7
 1b6:	8f 92       	push	r8
 1b8:	9f 92       	push	r9
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
 1e6:	1f b6       	in	r1, 0x3f	; 63
 1e8:	1f 92       	push	r1
 1ea:	f8 94       	cli
 1ec:	0d b6       	in	r0, 0x3d	; 61
 1ee:	00 92 9d 02 	sts	0x029D, r0
 1f2:	0e b6       	in	r0, 0x3e	; 62
 1f4:	00 92 9e 02 	sts	0x029E, r0
 1f8:	1f be       	out	0x3f, r1	; 63
 1fa:	11 24       	eor	r1, r1
	stackp[current_thread]=savedsp;
 1fc:	80 91 00 01 	lds	r24, 0x0100
 200:	e8 2f       	mov	r30, r24
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e9 56       	subi	r30, 0x69	; 105
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	20 91 9d 02 	lds	r18, 0x029D
 210:	30 91 9e 02 	lds	r19, 0x029E
 214:	31 83       	std	Z+1, r19	; 0x01
 216:	20 83       	st	Z, r18
	current_thread++;
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 00 01 	sts	0x0100, r24
	if(current_thread==3)
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	11 f4       	brne	.+4      	; 0x226 <next_thread+0x80>
		current_thread=0;
 222:	10 92 00 01 	sts	0x0100, r1
	savedsp=stackp[current_thread];
 226:	e0 91 00 01 	lds	r30, 0x0100
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e9 56       	subi	r30, 0x69	; 105
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	80 81       	ld	r24, Z
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	90 93 9e 02 	sts	0x029E, r25
 23c:	80 93 9d 02 	sts	0x029D, r24
	RESTORE_CONTEXT();
 240:	f8 94       	cli
 242:	c0 91 9d 02 	lds	r28, 0x029D
 246:	cd bf       	out	0x3d, r28	; 61
 248:	d0 91 9e 02 	lds	r29, 0x029E
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	7f 90       	pop	r7
 284:	6f 90       	pop	r6
 286:	5f 90       	pop	r5
 288:	4f 90       	pop	r4
 28a:	3f 90       	pop	r3
 28c:	2f 90       	pop	r2
 28e:	1f 90       	pop	r1
 290:	0f 90       	pop	r0
	asm volatile ( "ret" );
 292:	08 95       	ret

00000294 <makethreads>:
}

void makethreads(void)
{
	SAVE_CONTEXT();							//save context (33bytes + 2bytes return address from this routine)
 294:	0f 92       	push	r0
 296:	1f 92       	push	r1
 298:	2f 92       	push	r2
 29a:	3f 92       	push	r3
 29c:	4f 92       	push	r4
 29e:	5f 92       	push	r5
 2a0:	6f 92       	push	r6
 2a2:	7f 92       	push	r7
 2a4:	8f 92       	push	r8
 2a6:	9f 92       	push	r9
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	1f b6       	in	r1, 0x3f	; 63
 2d6:	1f 92       	push	r1
 2d8:	f8 94       	cli
 2da:	0d b6       	in	r0, 0x3d	; 61
 2dc:	00 92 9d 02 	sts	0x029D, r0
 2e0:	0e b6       	in	r0, 0x3e	; 62
 2e2:	00 92 9e 02 	sts	0x029E, r0
 2e6:	1f be       	out	0x3f, r1	; 63
 2e8:	11 24       	eor	r1, r1

	memcpy(&threadstack1[256-35],savedsp+1,35);	//create thread1 context
 2ea:	e0 91 9d 02 	lds	r30, 0x029D
 2ee:	f0 91 9e 02 	lds	r31, 0x029E
 2f2:	aa e7       	ldi	r26, 0x7A	; 122
 2f4:	b2 e0       	ldi	r27, 0x02	; 2
 2f6:	31 96       	adiw	r30, 0x01	; 1
 2f8:	83 e2       	ldi	r24, 0x23	; 35
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	e1 f7       	brne	.-8      	; 0x2fa <makethreads+0x66>
	stackp[1]=&threadstack1[256-35-1];
 302:	89 e7       	ldi	r24, 0x79	; 121
 304:	92 e0       	ldi	r25, 0x02	; 2
 306:	90 93 9a 01 	sts	0x019A, r25
 30a:	80 93 99 01 	sts	0x0199, r24

	memcpy(&threadstack2[150-35],savedsp+1,35);	//create thread2 context
 30e:	e0 91 9d 02 	lds	r30, 0x029D
 312:	f0 91 9e 02 	lds	r31, 0x029E
 316:	a4 e7       	ldi	r26, 0x74	; 116
 318:	b1 e0       	ldi	r27, 0x01	; 1
 31a:	31 96       	adiw	r30, 0x01	; 1
 31c:	83 e2       	ldi	r24, 0x23	; 35
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	81 50       	subi	r24, 0x01	; 1
 324:	e1 f7       	brne	.-8      	; 0x31e <makethreads+0x8a>
	stackp[2]=&threadstack2[150-35-1];
 326:	83 e7       	ldi	r24, 0x73	; 115
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 9c 01 	sts	0x019C, r25
 32e:	80 93 9b 01 	sts	0x019B, r24

	RESTORE_CONTEXT();
 332:	f8 94       	cli
 334:	c0 91 9d 02 	lds	r28, 0x029D
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	d0 91 9e 02 	lds	r29, 0x029E
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	bf 90       	pop	r11
 36e:	af 90       	pop	r10
 370:	9f 90       	pop	r9
 372:	8f 90       	pop	r8
 374:	7f 90       	pop	r7
 376:	6f 90       	pop	r6
 378:	5f 90       	pop	r5
 37a:	4f 90       	pop	r4
 37c:	3f 90       	pop	r3
 37e:	2f 90       	pop	r2
 380:	1f 90       	pop	r1
 382:	0f 90       	pop	r0
	asm volatile ( "ret" );
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
