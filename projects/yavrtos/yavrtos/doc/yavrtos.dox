/**

\mainpage YAVRTOS

\htmlonly
<p align="center"><font size="+2"><b><a href="yavrtos.zip">Download YAVRTOS</a></b></font></p>
\endhtmlonly

\section History
YAVRTOS was my Christmas 2007-2008 project. I decided to do it
\li because I wanted a good RTOS for other projects
\li to see if I could write an RTOS
\li because I didn't fully understand the other RTOSes out there

Since understanding is one of my aims, I have documented YAVRTOS in the hope that it will help others who were in the same situation as me.

\section naming What's in a name?
YAVRTOS stands for Yet Another Atmel&reg; AVR&reg; Real-Time Operating System

\section TandC Terms and Conditions
YAVROTS is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. 

YAVROTS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the \ref LGPL "GNU Lesser General Public License" for more details.

\section prereq Pre-requisites
I've developed this using the WinAVR&tm; compiler (http://winavr.sourceforge.net/), and the AVR&reg; Studio debugger (available from http://www.atmel.com/). I've only tested it against an ATmega32 so far.

\section Status
At present, this project has not been rigorously tested. I've run many tests against the AVR&reg; Studio debugger running
an ATmega32, and everything seems to work. I've started to use it on another project, and I've met with success. This other
project uses mailboxes (which in turn use semaphores) fairly extensively, and it also bit-bang receives serial data at
4800 baud on an 8MHz ATmega32.

Apart from testing, there are some other things I want to do with this project
- more documentation
- at present, malloc() can be used by create_task() and reserve_task(), and interrupts are disabled during the calls to malloc(). The solution I have - a mutex for the microcontrollers' memory - isn't that bad, I think. A more interesting solution would be to write a thread-safe malloc()...

What all this means is that you should check back
\htmlonly
<a href="http://www.chris.obyrne.com/yavrtos/">here</a>
\endhtmlonly
often for updates, and you should check
that YAVRTOS works as expected in your application. If you
find a bug, please email me (my email address is at the bottom of the page) - as you can see from \ref rev "the revision history", YAVRTOS is in
active development in December 2007 / January 2008.

\section What What is a real-time operating system?

Processors are only actually only able to do one thing at a time, whereas we need them to do more than one thing at a time (e.g. update the display while checking for keypresses while reading the serial port). A real-time operating system (RTOS) provides facilities for achieving that.

\section what-task What is a task?

A task does one of the things (e.g. update the display, check for keypresses, read the serial port) that the application needs done. The real-time operating system allows tasks to execute concurrently, while providing facilities for e.g. tasks to communicate with each other. See the \ref task "task"
page for more information.

\section what-tick What is a tick?

The RTOS needs to be able to switch betwen tasks - they way it does this is by using a regular processor interrupt
(e.g. one of the timer interrupts). Every such interrupt is called a "tick". These interrupts must be set up before the RTOS is started.
See \ref isr for more information.

\section what-scheduler What is the task scheduler?

The task scheduler (or "task switcher") is the central component of the RTOS. It is responsible for ensuring that the tasks are run according to the rules of priority. It runs every tick, and it also runs when anything happens that may change the list of runnable tasks (e.g. a mutex being released, or a semaphore changing value).

When the task scheduler runs, it effectively generates a list of the highest-priority runnable tasks. If one of those tasks has just had control of the processor, it runs the next task in the list, otherwise it runs the first task in the list.

\section what-stack What is the stack?

The stack is the standard stack that the processor implements with its stack pointer. However, when more than one task can be executing at a time, the stack becomes more complicated. In particular, every task must have its own stack, and the size of this stack is specified when the task is created. And, each stack must be large enough to accommodate all the uses the task puts the stack to.

As well as a stack for each task, there is another "system" stack - this stack is used by ISRs, and must also be large enough to accommodate the requirements of the ISRs. If it is possible for more than one ISR to be running concurrently, then the system stack must be large enough to accommodate the requirements of all the ISRs that could be running concurrently.

\section what-stack-uses What are the uses the stack is put to?

The stack is used -

\li To hold the value of local variables. For instance,
\code
void proc() {
	char c;
\endcode
The variable "c" will use up one byte of the stack.
\li To hold the return address of function calls.
\code
void proc() {
	proc2();
\endcode
The call to proc2() will use up two bytes of the stack.
\li To hold the CPU context on task switch - there must be at least 35 bytes on the stack to handle task switching
\li To hold the return address, and some other information, on interrupt - this takes maybe another 10 bytes of stack
\li As a system scratchpad - maybe another half-dozen bytes of stack.

So a minimum stack size would be about 55 bytes.

\section what-small-stack What happens if the stack isn't big enough?

Memory corruption, and hence a probable spectacular (and untraceable) crash.

\section seealso Further reading

\li \ref task
\li \ref semaphore
\li \ref mutex
\li \ref mailbox
\li \ref Example
\li \ref usage "Using YAVRTOS"
\li \ref howdoI "How do I?"
\li \ref QandA "Questions and Answers"
\li \ref isr
\li \ref api-usage-restrictions "API Usage Restrictions"
\li \ref rev "Revision History"

*/


/**

\defgroup task Tasks
A task performs a function in the application, and an application can have a number of tasks running "simultaneously". Tasks
are a function with the signature <tt>void task_func(void *init)</tt>, and optionally a "cleanup" function
<tt>void task_cleanup()</tt> that is called when the task is exiting. The value of the \c init argument to the task function 
is specified when the task is created.

Tasks are created by create_task(), and can be stopped by stop_task().
Tasks are held in memory in a linked list - spaces may be reserved on that list for future tasks using
reserve_task().

Tasks can suspend themselves when they are unable to do any work (e.g. a task
that reads a microcontroller peripheral could suspend itself when the peripheral has no data available), hence
allowing other tasks that can do work to run, and hence the application as a whole can get the maximum
use of the CPU's processing power. The ways a task can suspend itself are
\li by calling lock_on() on a \ref mutex "mutex" that another task has already locked on to. Note that create_task() and reserve_task() can
	decide to lock on to a supplied "memory mutex" - see create_task(), reserve_task() and \ref malloc
\li by calling wait_for_min_value() on a \ref semaphore "semaphore" that hasn't yet reached the specified value
\li by calling wait_for_increment_of() on a \ref semaphore "semaphore"
\li by calling read_mbox_min_version() on a \ref mailbox "mailbox" that hasn't yet reached the specified version
\li by calling write_mbox() - see write_mbox() for the conditions under which a task will be suspended
\li by calling wait_for_receiver() on a \ref mailbox "mailbox" that no-one is waiting to read from
\li a temporary suspension can be caused by calling yield() - if there are other schedulable tasks, they will run, but the calling task will eventually
	be re-scheduled to run
\li by waiting for another task to stop - see stop_task() for more information

Every task has a priority. The rule is that the RTOS will not allow the lowest-priority tasks to run until all higher-priority tasks have suspended
themselves. If there are more than one highest-priority not-suspended tasks, then the RTOS will switch between them once
every tick interrupt (and/or whenever one of the tasks calls yield()).

A priority of zero indicates an "idle" task - a task that is run when there are no other tasks that can run. There must always be at least one idle task, and idle tasks can neither be stopped nor can they do anything to suspend themselves (e.g. they cannot wait for a mutex to be released), as the
microcontroller needs at least one task to be always available for scheduling. Usually there is just one idle task that just sleeps the CPU.
A recommended idle task is
\code
void idle_task(void *p) {
  set_sleep_mode(SLEEP_MODE_IDLE);
  sleep_enable();
  sei();
  sleep_cpu();
}
\endcode

A task switch can occur
\li whenever anything happens to a mutex, semaphore or mailbox that may cancel the suspension of a higher priority
	task (e.g. when a semaphore has its value increased)
\li when a task calls yield()
\li when the system tick interrupt happens - see \ref isr for more information about the tick interrupt.

From the point of view of the RTOS, the microcontroller can be doing one of three things
\li executing code before the RTOS has been started with a call to task_switcher_start(). When the microcontroller is in this state, the RTOS
is obviously unable to "suspend" what the microcontroller is doing, and hence none of the API calls that could cause such a suspension may be
used
\li executing a task, which can be an "idle" task of zero priority, or a "non-idle" task of non-zero priority. When executing an idle task,
a task suspension is disallowed (as there must always be something that the microcontroller can do when it is otherwise unable to do anything).
\li executing an ISR, including the tick interrupt ISR. Again, the RTOS is unable to suspend the ISR.

Therefore there are restrictions on when certain API calls may be made - these restrictions are summarised on the
\ref api-usage-restrictions "api usage restrictions" page.

See the \ref Example "example application" for an example of how to start and run some simple tasks.

Tasks can be stopped by other tasks or by ISRs - see stop_task(). When a task is stopped, mutexes and mailboxes are
released - see task_stopper()

*/



/**

\defgroup semaphore Semaphores
A semaphore contains a number that tasks can suspend themselves against, waiting for the number to
reach at least a certain value before the task is schedulable again.

To update a semaphore's value, use increment_semaphore_by()

To read a semaphore's value, use get_semaphore_value()

To lock on a semaphore, use wait_for_min_value() or wait_for_increment_of()

See \ref usage-sema "using semaphores" for information on how to use semaphores

\defgroup mailbox Mailboxes
Mailboxes are used to pass information between tasks.

Mailboxes contain a pointer to the mailbox data, and a version number. Tasks can both read from and write to mailboxes.
The rules governing mailboxes are
\li A task can only read from one mailbox at a time - the task must finish reading a mailbox before it can start reading
	another one
\li A task cannot write to a mailbox while there are other tasks reading from it
\li A mailbox can contain only one "message" at a time

Mailboxes \b must be initialised with initialise_mbox().
Tasks can write to mailboxes with write_mbox() or write_mbox_now(). Tasks can read from mailboxes with
read_mbox() or read_mbox_min_version(), and \b must subsequently call release_mbox_read() when they are done
reading from the mailbox. Other functions governing the use of mailboxes are get_current_mbox_version()
and wait_for_receiver().

Mailboxes can be synchronous or asynchronous. When task A writes to a mailbox, its version number is incremented. If task B
has been waiting for that version of the mailbox, it is immediately marked as reading the mailbox, hence other tasks are
prevented from writing to the mailbox until task B has finished reading from it. Of course, if there wasn't a task B waiting
for the data, then a task C could over-write what task A wrote to the mailbox without any task ever seeing what task A wrote.
To mitigate this problem, task A is able to request that a certain minimum number of tasks be waiting for the mailbox to be
updated before the data is written to the mailbox - hence task A is guaranteed that the data it writes is seen.

It is the responsibility of the task that writes to the mailbox to allocate memory for the mailbox data. To prevent problems
arising from the memory allocation going out of scope before all the reading tasks have finished reading the data, a writing
task is able to request that all reading tasks finish reading before control is passed back to the writing task. Not only that,
but the writing task is also able to request that the mailbox data be "nullified" (i.e. that a new version of the mailbox with
a null data pointer be published) as soon as all the reading tasks have finished reading, thereby ensuring that no subsequent
reading tasks will attempt to read the writing tasks' data.

See \ref usage-mbox "using mailboxes" for information on how to use mailboxes

*/


/**

\defgroup mutex Mutexes
A <b>MUT</b>ual <B>EX</b>clusion object - only one task can "own" a mutex at any one time.

Mutexes are "owned" by calling lock_on(), and released by calling lock_off()

If another task tries to own an "owned" mutex, that task will be
suspended until the mutex becomes available.

Tasks may own as many mutexes as they wish, and mutexes will automatically be released when the task exits

See \ref usage-mutex "using mutexes" for information on how to use mutexes

If malloc() is going to be used by your task, then you may require a mutex for the microcontroller memory -
see \ref malloc

*/


/**


\defgroup isr Interrupt Service Routines
Interrupt Service Routines are functions that are called when an interrupt occurs, and
are defined with the TASK_ISR() macro.
*/


/**


\defgroup taskstategroup The possible states that a task can be in
\internal
These are the states that a task can be in (i.e. the possible values of task.status).


*/


/**


\page Example

In this example, we will flash two LEDs connected to port A at different rates.

\code
#include "task.h"

#include <stdint.h>
#include <avr/interrupt.h>
#include <avr/io.h>
#include <avr/sleep.h>

// A semaphore that we will increment at every tick
static semaphore_t tick;
// We will also create a mutex for port A, as both tasks will be using it potentially "simultaneously"
static mutex_t porta_mutex;

// This is our first task - blinking port A bit 0 once every 200 ticks
void blink1(void *p) {
        while (1) {
                // Obtain a lock on the port A mutex
                lock_on(&porta_mutex);
                // OK - port A is now all ours, so blink the LED
                PORTA ^= 0x01;
                // Release our hold on the port A mutex
                lock_off(&porta_mutex);
                // Now, suspend this task for another 200 ticks
                wait_for_increment_of(&tick, 200);
        }
}

// This is our second task - blinking port A bit 1 once every 280 ticks
void blink2(void *p) {
        while (1) {
                // Obtain a lock on the port A mutex
                lock_on(&porta_mutex);
                // OK - port A is now all ours, so blink the LED
                PORTA ^= 0x02;
                // Release our hold on the port A mutex
                lock_off(&porta_mutex);
                // Now, suspend this task for another 280 ticks
                wait_for_increment_of(&tick, 280);
        }
}

// This is our idle task - the task that runs when all others are suspended.
// We sleep the CPU - the CPU will automatically awake when the tick interrupt occurs
void idle_task(void *p) {
        sleep_enable();
        sei();
        sleep_cpu();
        // This task cannot be stopped, so it is automatically re-started whenever it tries to exit
}

// This is a function that runs every tick interrupt - we use it to increment the tick semaphore value by one
uint8_t tick_interrupt() {
        increment_semaphore_by(&tick,1);
        // We want a task switch to ALWAYS occur - it is part of the definition of the tick interrupt!
        return 1;
}

// Setup the TIMER1_COMPA interrupt - it will be our tick interrupt
TASK_ISR(TIMER1_COMPA_vect, tick_interrupt())

// Our entry point
int main(void) {
        // Interrupts should remain disabled - they will be enabled as soon as the first task starts executing
        cli();
        // Set up port A for output
        DDRA = 0xFF;
        // Our idle task sleeps the CPU - set the sleep mode to IDLE, as we need the sleep to be
        // interruptable by the tick interrupt
        set_sleep_mode(SLEEP_MODE_IDLE);
        // Create our two tasks
        create_task(blink1, 0, 0, 55, 100, 0);
        create_task(blink2, 0, 0, 55, 100, 0);
        // Set up our TIMER1_COMPA interrupt to tick every 80,000 clock cycles
        TCCR1B = 0x0A;
        OCR1A = 9999;
        TIFR = _BV(OCF1A);
        TIMSK |= _BV(OCIE1A);
        // Start the RTOS - note that this function will never return
        task_switcher_start(idle_task, 0, 55, 55);
        return 0;
}
\endcode


*/


/**



\page howdoI How do I?

\section malloc How do I use malloc() and free() safely?

It depends on whether you intend to use malloc() or free() from within ISRs (which is highly
discouraged) or from within idle tasks (i.e. tasks with a zero priority). Note that
create_task() and reserve_task() can call malloc().

\subsection malloc-isr Using malloc() and free() when they are going to be used from within ISRs and/or idle tasks

If you are going to use malloc() or free() from within an ISR and/or an idle task, you will need to disable interrupts
either side of you call to malloc() and free()

\code
void proc() {
  int *data = 0;
  interrupt_store_t interrupts;

  interrupts = disable_interrupts();
  data = malloc(REQUIRED_INTS * sizeof(int));
  restore_interrupts(interrupts);
  ...
  interrupts = disable_interrupts();
  free(data);
  restore_interrupts(interrupts);
  ...
}
\endcode

The reason why we use the \c interrupt_store_t is because our \c proc() may have been called by another function that disabled interrupts for its own purposes, and it could be disastrous to unexpectedly enable interrupts on it.

We also want to disable interrupts for the shortest possible period of time, as disabling interrupts disables the all-important tick.

Note that interrupts will be disabled for the duration of the call to malloc() and free(). Depending on the algorithm used by
malloc() and free(), and depending on what your time margin for the launch of ISRs is, interrupts could be disabled for "too long". And note
that malloc() is called by reserve_task(), and can be called by create_task(), so using create_task() and reserve_task() in such time-critical
situations could break your application.

\subsection malloc-no-isr Using malloc() and free() when they are not going to be used from within ISRs or idle tasks

If you are not going to use malloc() or free() from within ISRs or idle tasks, then you can create a \ref mutex "mutex" for the
microcontroller's memory.

\code
mutex_t memory_mutex;

void proc() {
  int *data = 0;

  lock_on(&memory_mutex);
  data = malloc(REQUIRED_INTS * sizeof(int));
  lock_off(&memory_mutex);
  ...
  lock_on(&memory_mutex);
  free(data);
  lock_off(&memory_mutex);
  ...
}
\endcode

If you do this, then you \b must specify \c wait_for_mutexes in stop_task() when stopping any task that uses
the memory mutex. This is because stop_task() could be called when the task is in the middle of executing
malloc() or free(), and if malloc() or free() are not allowed to complete themselves, corruption of the tables
used by malloc() and free() could result.

Using a memory mutex, however, has the significant advantage that interrupts are only disabled for a very short period of time
during lock_on() and lock_off().

If you are using a mutex for the microcontrollers' memory, remember to use that mutex in all calls to
create_task() and reserve_task(). (If you haven't yet started the RTOS with task_switcher_start(), then
the \c memory_mutex argument to create_task() and reserve_task() will be ignored, and interrupts
will be disabled during the calls to malloc()).

\code
mutex_t memory_mutex;

void proc() {
  int *data = 0;

  lock_on(&memory_mutex);
  data = malloc(REQUIRED_INTS * sizeof(int));
  lock_off(&memory_mutex);
  ...
  // We must use the mutex in all calls to create_task() and reserve_task()!
  create_task(task2, 0, 0, 55, 20, &memory_mutex);
  ...
  lock_on(&memory_mutex);
  free(data);
  lock_off(&memory_mutex);
  ...
}
\endcode

\section how-write-isr How do I write my own ISR?

For instance, we will write an ISR for the INT0 interrupt.

\code
// Define the ISR prototype, so that the TASK_ISR() macro can reference our ISR function "int0_isr()"
uint8_t int0_isr();

// Set up the INT0 vector so that it calls the ISR
TASK_ISR(INT0_vect, int0_isr())

// Now, we can write the ISR function itself. It should return non-zero if a task switch should occur.
// It is recommended that it returns non-zero - the only time it would be safe for it to return zero
// would be if it didn't do anything to any task, semaphore, mailbox or mutex (i.e. if it didn't do anything
// that could un-suspend a suspended task).
uint8_t int0_isr() {
  ...
}
\endcode

Upon entry into the \c int0_isr function, interrupts will be disabled, and the system stack will be in use.

*/


/**



\page QandA Questions and Answers

\section qanda-int What happens if I disable interrupts, then suspend myself (e.g. by waiting on a semaphore)?

If you disable interrupts, then the task switcher cannot run, as it depends on the tick interrupt. However, if you then use an API call that can run the task switcher as a side-effect, the task switcher could decide to run a task that didn't disable interrupts Since the task switcher remembers which tasks have disabled interrupts and which tasks haven't, interrupts would be re-enabled.

However, the next time the task switcher chooses your task, it will re-disable interrupts before resuming your task. Indeed, it will disable interrupts before it even decides that your task is the next task that should run.

\section qanda-int2 Why would I want to disable interrupts anyway?

When interrupts are enabled, your task can be interrupted literally in the middle of a statement. If that statement was accessing a shared resource, then the state of that shared resource could change right in the middle of your statement. The only way to ensure that you are acting on a consistent shared resource is to disable interrupts as you are accessing it.

The classic example of this problem is a bank.

\code
int32_t balance = 80;

void deduct_task_1(void *p) {
  if (balance >= 20) {
    balance -= 20;
  }
}

void deduct_task_2(void *p) {
  if (balance >= 50) {
    balance -= 50;
  }
}
\endcode

Assuming that the two tasks are executing simultaneously, and \c deduct_task_1 is the first one to run. It will see that the balance is sufficient, and will execute the "balance -= 20" statement. What that statement actually means, of course, is "balance = balance - 20". In other words, "read the value of balance, subtract 20, and store the result back in balance".

The problem arises when the task is interrupted, for instance, between "subtract 20" and "store the result back in balance". When it has subtracted 20, the new value is 60, and it is prepared to store that result back. However, if the task is interrupted, and \c deduct_task_2 is run, it will put a value of 30 into balance. Then, when \c deduct_task_1 resumes, it will over-write the value of balance with 60, with the result that the customer has gained 50 cent.

The only way to fix this is to make sure that the two tasks cannot interrupt each other -

\code
int32_t balance = 80;

void deduct_task_1(void *p) {
  interrupt_store_t interrupts = disable_interrupts();
  if (balance >= 20) {
    balance -= 20;
  }
  restore_interrupts(interrupts);
}

void deduct_task_2(void *p) {
  interrupt_store_t interrupts = disable_interrupts();
  if (balance >= 50) {
    balance -= 50;
  }
  restore_interrupts(interrupts);
}
\endcode

You will notice that we disable interrupts before we check the customers balance - if we didn't, the balance could change between when we check it and when we do the deduction, and so we could end up giving the customer credit on their balance.

\section qanda-int3 Must I therefore disable interrupts every time I access a shared resource?

You can either disable interrupts, or create a \ref mutex "mutex" for the shared resource and lock on that whenever you access the resource. However, since mutexes are not available to ISRs, the only way to access a shared resource that is also used by an ISR is by disabling interrupts.

The only exception to this rule is if your C compiler compiles the statement that accesses the resource into a single CPU instruction. This can happen, but is rare.

Note that all YAVRTOS functions disable interrupts as appropriate, so if you are using \ref mailbox "mailboxes" or
\ref semaphore "semaphores" in an ISR, there is no need to worry about interrupts in your tasks when you are accessing those resources.

\section qanda-stop Why can a task only be stopped by a higher-priority task?

The only way that task A can know if it has stopped task B completely is if task A is a higher-priority task than task B. Why? Because a task C, of higher-priority than both A and B, could re-start task B as soon as it has died. But if task B is of lower priority than task A, task B will not be able to re-start until task A has finished processing the fact that task B has died.

(Therefore, it is in fact possible for a lower-priority task to stop a higher-priority task - it just isn't possible for that task to know when the higher-priority task has completely stopped. However, I think that is bad practice, so it is disabled in YAVRTOS).

\section qanda-pri Can I change the priority of a task?

No. This has to do with the stopping of tasks - if a task is being stopped by a higher-priority task, and it is re-started with an even higher priority, the task may get to start before the stopping task is informed that it has stopped.

\section qanda-sei When my ISR runs, interrupts are disabled - may I re-enable them?

Yes. If your ISR is interrupted by another ISR, the second ISR will continue to use the system stack. When the last ISR has completed, a task switch will be performed if any of the ISRs requested it.

\section qanda-cleanup What is the task cleanup function about?

The task cleanup procedure is called whenever a (non-zero-priority) task is stopped. A task is stopped by someone calling stop_task(), or when the task procedure finishes.

The task cleanup procedure should be used to release any resources that the task may have reserved. Since stop_task() may be called at any time, the task may have reserved resources (e.g. memory) that it would need to release before it goes away.

See task_stopper() for more information.

\section qanda-cleanup2 Can the task cleanup function be stopped?

No, though it is subject to the normal rules of the task scheduler.

\section qanda-task-inf Does a task have to have an infinite loop?

No - if a task returns, and it is a non-zero-priority task, it will be stopped. If it is a zero-priority "idle" task, it will be re-started.

\section qanda-cpuctx In task.h, what do the save_cpu_context() and restore_cpu_context() macros do?

These macros are the central part of a pre-emptive RTOS - what they do is save the state of the CPU to the stack, and restore it from the stack. So, when the CPU state is restored, the CPU is able to continue doing whatever it was doing as if it was never interrupted.

In save_cpu_context(), the R0 register is the first to be saved. Then the status register contents are copied to the R0 register, and interrupts are disabled. Then, the registers R1 to R31 are saved. Finally, R0 (i.e. the status register contents) is saved. Why do I do it this way? I want to disable interrupts as quickly as possible (otherwise, I could be interrupted in the middle of saving the CPU context to the stack, which would initiate another save of the CPU context to the stack, which could quickly overflow the stack). However, I also need to store the state of the global interrupts enabled flag in the status register. So I save R0 to the stack, then load the status register to R0, then disable interrupts, then save everything else.

In restore_cpu_context(), the R0 register (which contains the status register contents - including the global interrupt enable flag) is retrieved from the stack. Then the registers R31 to R1 are restored. Then R0 is copied into the status register - this may have the effect of re-enabling interrupts. Finally, the R0 register is retrieved from the stack.

\section qanda-saveint In task.h, what is "*(((uint8_t*)SP)+1) |= _BV(SREG_I);" about?

In a nutshell, that statement means "set the global interrupt enabled bit in the last byte on the stack".  The last byte to be saved to the stack is the status register - the one that contains the global interrupt enabled bit. So why do we set this bit? Because we want interrupts to be enabled when we restore the CPU context. Why? Because interrupts were enabled when the ISR started (otherwise it wouldn't have started!) and we want to restore the state of the interrupts when we are finished.


*/


/**



\page rev Revision History

\section rev16b2 Version 1.6b2, 2008 Jan 25
\li Spotted a potential problem with reserve_task() and mailboxes

\section rev16b1 Version 1.6b1, 2008 Jan 21
\li Fixed another race condition with mailboxes that was leading to deadlock

\section rev15b1 Version 1.5b1, 2008 Jan 20
\li I now have just one ISR-related macro - TASK_ISR() - and ISRs may now decide if a task switch should occur

\section rev14b1 Version 1.4b1, 2008 Jan 17
\li Added \c init_data to the tasks - the task function now takes a void * argument

\section rev13b2 Version 1.3b2, 2008 Jan 17
\li Fixed a bug with write_mbox() and wait_for_receiver() - an incorrect algorithm was being used to see if another task
    was waiting on the mailbox, which could (and did) lead to deadlock.

\section rev13b1 Version 1.3b1, 2008 Jan 14
\li \c wait_for_mutexes no longer ignored when stop_task() is called on \c current_task

\section rev12b1 Version 1.2b1, 2008 Jan 13
\li Added the \c memory_mutex argument to create_task() and reserve_task()

\section rev11b1 Version 1.1b1, 2008 Jan 11
\li Added \c wait_for_mutexes to stop_task()
\li Changed write_mbox() so that the number of receivers could be specified, and added the "nullify" feature
\li Updated and re-organised the documentation

\section rev10b1 Version 1.0b1, 2008 Jan 09
\li Removed noticeboards, and replaced them with proper mailboxes
\li Fixed a few bugs
\li Started proper doxygen documentation

\section rev04 Version 0.4, 2008 Jan 07
\li If a task is stopped while holding mutexes, the mutexes will be released

\section rev03 Version 0.3, 2008 Jan 07
\li Fixed a memory leak bug with non-empty mailboxes on stopping tasks

\section rev02 Version 0.2, 2007 Dec 31
\li Added noticeboards

\section rev01 Version 0.1, 2007 Dec 29
\li Initial release


*/


/**



\page api-usage-restrictions API Usage Restrictions

\htmlonly
<table border="1" bordercolor="#000000" cellpadding="4" cellspacing="0" frame="below" width="100%">
  <col width="73*"> <col width="15*"> <col width="20*"> <col width="22*"> <col width="27*"> <col width="24*"> <col width="27*"> <col width="21*"> <col width="27*"> <thead> <tr valign="bottom">
    <td width="28%">
    <p align="center"><br>
    </p>
    </td>
    <td colspan="5" width="42%">
    <p align="center"><font size="2">Callable
by</font></p>
    </td>
    <td colspan="2" width="19%">
    <p align="center"><font size="2">Callable
on</font></p>
    </td>
    <td width="11%">
    <p align="center"><br>
    </p>
    </td>
  </tr>
  </thead> <tbody>
    <tr valign="bottom">
      <td width="28%">
      <p align="center"><b>API call</b></p>
      </td>
      <td width="6%">
      <p align="center"><font size="2">ISR</font></p>
      </td>
      <td width="8%">
      <p align="center"><font size="2">Idle
task</font></p>
      </td>
      <td width="9%">
      <p align="center"><font size="2">Non-idle
task</font></p>
      </td>
      <td width="11%">
      <p align="center"><font size="2">Lower-priority
task</font></p>
      </td>
      <td width="9%">
      <p align="center"><font size="2">Before
RTOS start</font></p>
      </td>
      <td width="11%">
      <p align="center"><font size="2">Current
task</font></p>
      </td>
      <td width="8%">
      <p align="center"><font size="2">Idle
task</font></p>
      </td>
      <td width="11%">
      <p align="center"><font size="2">Could
switch tasks</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
reserve_task()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
    </tr>
    <tr valign="top">
	<td>
\endhtmlonly
create_task()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
stop_task()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
lock_on()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
lock_off()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
get_current_mbox_version()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
read_mbox_min_version()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
read_mbox()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
release_mbox_read()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
initialise_mbox()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
write_mbox()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
write_mbox_now()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
wait_for_receiver()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
get_semaphore_value()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
increment_semaphore_by()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
wait_for_min_value()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
wait_for_increment_of()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
yield()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
disable_interrupts()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
restore_interrupts()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
    <tr valign="top">
      <td width="28%">
\endhtmlonly
task_switcher_start()
\htmlonly
      </td>
      <td width="6%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">N</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="9%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="8%">
      <p align="center"><font face="Times New Roman, serif">n/a</font></p>
      </td>
      <td width="11%">
      <p align="center"><font face="Times New Roman, serif">Y</font></p>
      </td>
    </tr>
  </tbody>
</table>

<p><br>

</p>


\endhtmlonly

The columns in the above table are

\li \c "ISR" indicates whether the API call can be made from within an ISR
\li \c "Idle task" indicates whether an idle (i.e. zero-priority) task may use the API call
\li \c "Non-idle task" indicates whether a task with non-zero priority may use the call
\li \c "Lower-priority task" - for those calls that take a task argument, indicates whether a task with a lower priority than that of the argument may use the call
\li \c "Before RTOS start" indicates whether the call can be made before task_switcher_start() is called
\li \c "Current task" - for those calls that take a task argument, indicates whether the value of that argument may be \c current_task
\li \c "Idle task" - for those calls that take a task argument, indicates whether the value of that argument may be a zero-priority idle task
\li \c "Could switch tasks" indicates whether a side-effect of making the call could be that the task scheduler runs and switches tasks - see yield(). A side-effect of this is that interrupts could be re-enabled if the task switcher chooses a task that didn't disable them.

In addition, the only time that it is safe to directly set the value of a semaphore (i.e. without using the increment_semaphore_by() API call) is before the RTOS starts.

Finally, when an ISR finishes executing, the task scheduler is called, as the ISR may have changed the list of runnable tasks (e.g. by incrementing the value of a semaphore, or by successfully posting a message to a task).

*/

/**

\page LGPL GNU Lesser General Public License

Version 3, 29 June 2007

Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.

This version of the GNU Lesser General Public License incorporates the terms and conditions of \ref gpl "version 3 of the GNU General Public License", supplemented by the additional permissions listed below.

\section lgpl0 0. Additional Definitions.

As used herein, "this License" refers to version 3 of the GNU Lesser General Public License, and the "GNU GPL" refers to \ref gpl "version 3 of the GNU General Public License".

"The Library" refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.

An "Application" is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.

A "Combined Work" is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the "Linked Version".

The "Minimal Corresponding Source" for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.

The "Corresponding Application Code" for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.

\section lgpl1 1. Exception to Section 3 of the GNU GPL.

You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.

\section lgpl2 2. Conveying Modified Versions.

If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:

a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or 

b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy. 

\section lgpl3 3. Object Code Incorporating Material from Library Header Files.

The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:

a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License. 

b) Accompany the object code with a copy of the GNU GPL and this license document. 

\section lgpl4 4. Combined Works.

You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:

a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License. 

b) Accompany the Combined Work with a copy of the GNU GPL and this license document. 

c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document. 

d) Do one of the following: 

\li 0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source. 
\li 1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version. 

e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.) 

\section lgpl5 5. Combined Libraries.

You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:

a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License. 

b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 

\section lgpl6 6. Revised Versions of the GNU Lesser General Public License.

The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License "or any later version" applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.

If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.


\page gpl GNU General Public License

Version 3, 29 June 2007

Copyright &copy; 2007 Free Software Foundation, Inc. <http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.

\section gpl-preamble Preamble

The GNU General Public License is a free, copyleft license for software and other kinds of works.

The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.

For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.

Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.

Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and modification follow.

\section gpl-t-and-c TERMS AND CONDITIONS

\subsection gpl0 0. Definitions.

"This License" refers to version 3 of the GNU General Public License.

"Copyright" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.

"The Program" refers to any copyrightable work licensed under this License. Each licensee is addressed as "you". "Licensees" and "recipients" may be individuals or organizations.

To "modify" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a "modified version" of the earlier work or a work "based on" the earlier work.

A "covered work" means either the unmodified Program or a work based on the Program.

To "propagate" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.

To "convey" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.

An interactive user interface displays "Appropriate Legal Notices" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.

\subsection gpl1 1. Source Code.

The "source code" for a work means the preferred form of the work for making modifications to it. "Object code" means any non-source form of a work.

A "Standard Interface" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.

The "System Libraries" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A "Major Component", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.

The "Corresponding Source" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.

The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same work.

\subsection gpl2 2. Basic Permissions.

All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.

\subsection gpl3 3. Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.

When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.

\subsection gpl4 4. Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.

\subsection gpl5 5. Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:

a) The work must carry prominent notices stating that you modified it, and giving a relevant date. 

b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to "keep intact all notices". 

c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. 

d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. 

A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an "aggregate" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.

\subsection gpl6 6. Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:

\li a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. 
\li b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. 
\li c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. 
\li d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. 
\li e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. 

A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.

A "User Product" is either (1) a "consumer product", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, "normally used" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.

"Installation Information" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.

If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).

The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.

Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.

\subsection gpl7 7. Additional Terms.

"Additional permissions" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:

\li a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or 
\li b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or 
\li c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or 
\li d) Limiting the use for publicity purposes of names of licensors or authors of the material; or 
\li e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or 
\li f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. 

All other non-permissive additional terms are considered "further restrictions" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.

\subsection gpl8 8. Termination.

You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).

However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.

\subsection gpl9 9. Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.

\subsection gpl10 10. Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.

An "entity transaction" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.

\subsection gpl11 11. Patents.

A "contributor" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's "contributor version".

A contributor's "essential patent claims" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, "control" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.

In the following three paragraphs, a "patent license" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To "grant" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.

If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. "Knowingly relying" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.

A patent license is "discriminatory" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.

\subsection gpl12 12. No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.

\subsection gpl13 13. Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.

\subsection gpl14 14. Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License "or any later version" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.

If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.

Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.

\subsection gpl15 15. Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

\subsection gpl16 16. Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

\subsection gpl17 17. Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.

*/

