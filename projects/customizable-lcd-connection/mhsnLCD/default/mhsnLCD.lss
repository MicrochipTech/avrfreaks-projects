
mhsnLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000040  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003d2  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000111  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000411  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f9  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e8  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	97 d0       	rcall	.+302    	; 0x162 <main>
  34:	c0 c0       	rjmp	.+384    	; 0x1b6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <lcd_cmd>:
	_delay_ms(2);
	lcd_cmd(0x80);	// Sets the DDRAM address. DDRAM data is sent and received after this setting.	
}

void lcd_cmd(unsigned char cmd){
	CBI(LCD_PRT_RS,LCD_RS);
  38:	94 98       	cbi	0x12, 4	; 18
	SBI(LCD_PRT_EN,LCD_EN);
  3a:	93 9a       	sbi	0x12, 3	; 18
	if(cmd&0x10){SBI(LCD_PRT_D4,LCD_D4);}
  3c:	98 2f       	mov	r25, r24
  3e:	84 ff       	sbrs	r24, 4
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	92 9a       	sbi	0x12, 2	; 18
  44:	01 c0       	rjmp	.+2      	; 0x48 <__SREG__+0x9>
	else CBI(LCD_PRT_D4,LCD_D4);
  46:	92 98       	cbi	0x12, 2	; 18
	if(cmd&0x20){SBI(LCD_PRT_D5,LCD_D5);}
  48:	95 ff       	sbrs	r25, 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
  4c:	91 9a       	sbi	0x12, 1	; 18
  4e:	01 c0       	rjmp	.+2      	; 0x52 <__SREG__+0x13>
	else CBI(LCD_PRT_D5,LCD_D5);
  50:	91 98       	cbi	0x12, 1	; 18
	if(cmd&0x40){SBI(LCD_PRT_D6,LCD_D6);}
  52:	96 ff       	sbrs	r25, 6
  54:	02 c0       	rjmp	.+4      	; 0x5a <__SREG__+0x1b>
  56:	90 9a       	sbi	0x12, 0	; 18
  58:	01 c0       	rjmp	.+2      	; 0x5c <__SREG__+0x1d>
	else CBI(LCD_PRT_D6,LCD_D6);
  5a:	90 98       	cbi	0x12, 0	; 18
	if(cmd&0x80){SBI(LCD_PRT_D7,LCD_D7);}
  5c:	87 ff       	sbrs	r24, 7
  5e:	02 c0       	rjmp	.+4      	; 0x64 <__SREG__+0x25>
  60:	ae 9a       	sbi	0x15, 6	; 21
  62:	01 c0       	rjmp	.+2      	; 0x66 <__SREG__+0x27>
	else CBI(LCD_PRT_D7,LCD_D7);
  64:	ae 98       	cbi	0x15, 6	; 21
	CBI(LCD_PRT_EN,LCD_EN);
  66:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  68:	8a e6       	ldi	r24, 0x6A	; 106
  6a:	8a 95       	dec	r24
  6c:	f1 f7       	brne	.-4      	; 0x6a <__SREG__+0x2b>
	_delay_us(40);
	SBI(LCD_PRT_EN,LCD_EN);
  6e:	93 9a       	sbi	0x12, 3	; 18
	if(cmd&1){SBI(LCD_PRT_D4,LCD_D4);}
  70:	90 ff       	sbrs	r25, 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <__SREG__+0x39>
  74:	92 9a       	sbi	0x12, 2	; 18
  76:	01 c0       	rjmp	.+2      	; 0x7a <__SREG__+0x3b>
	else CBI(LCD_PRT_D4,LCD_D4);
  78:	92 98       	cbi	0x12, 2	; 18
	if(cmd&2){SBI(LCD_PRT_D5,LCD_D5);}
  7a:	91 ff       	sbrs	r25, 1
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__SREG__+0x43>
  7e:	91 9a       	sbi	0x12, 1	; 18
  80:	01 c0       	rjmp	.+2      	; 0x84 <__SREG__+0x45>
	else CBI(LCD_PRT_D5,LCD_D5);
  82:	91 98       	cbi	0x12, 1	; 18
	if(cmd&4){SBI(LCD_PRT_D6,LCD_D6);}
  84:	92 ff       	sbrs	r25, 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <__SREG__+0x4d>
  88:	90 9a       	sbi	0x12, 0	; 18
  8a:	01 c0       	rjmp	.+2      	; 0x8e <__SREG__+0x4f>
	else CBI(LCD_PRT_D6,LCD_D6);
  8c:	90 98       	cbi	0x12, 0	; 18
	if(cmd&8){SBI(LCD_PRT_D7,LCD_D7);}
  8e:	93 ff       	sbrs	r25, 3
  90:	02 c0       	rjmp	.+4      	; 0x96 <__SREG__+0x57>
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	01 c0       	rjmp	.+2      	; 0x98 <__SREG__+0x59>
	else CBI(LCD_PRT_D7,LCD_D7);
  96:	ae 98       	cbi	0x15, 6	; 21
	CBI(LCD_PRT_EN,LCD_EN);
  98:	93 98       	cbi	0x12, 3	; 18
  9a:	8a e6       	ldi	r24, 0x6A	; 106
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <__SREG__+0x5d>
	_delay_us(40);
}
  a0:	08 95       	ret

000000a2 <lcd_init>:
	lcd_cmd(0x02); _delay_ms(2); // Returns cursor to home position (address 0). Also returns display being shifted to the original position. DDRAM contents remains unchanged.

	return 0;
}

void lcd_init(void){
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
	SBI(LCD_DDR_RS,LCD_RS);
  a6:	8c 9a       	sbi	0x11, 4	; 17
	SBI(LCD_DDR_EN,LCD_EN);
  a8:	8b 9a       	sbi	0x11, 3	; 17
	SBI(LCD_DDR_D4,LCD_D4);
  aa:	8a 9a       	sbi	0x11, 2	; 17
	SBI(LCD_DDR_D5,LCD_D5);
  ac:	89 9a       	sbi	0x11, 1	; 17
	SBI(LCD_DDR_D6,LCD_D6);
  ae:	88 9a       	sbi	0x11, 0	; 17
	SBI(LCD_DDR_D7,LCD_D7);
  b0:	a6 9a       	sbi	0x14, 6	; 20

	CBI(LCD_PRT_RS,LCD_RS);
  b2:	94 98       	cbi	0x12, 4	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	00 ea       	ldi	r16, 0xA0	; 160
  b6:	1f e0       	ldi	r17, 0x0F	; 15
  b8:	c8 01       	movw	r24, r16
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_init+0x18>
	_delay_ms(2);
	SBI(LCD_PRT_EN,LCD_EN);
  be:	93 9a       	sbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	98 2f       	mov	r25, r24
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_init+0x22>
	_delay_us(6);
	CBI(LCD_PRT_D4,LCD_D4);
  c8:	92 98       	cbi	0x12, 2	; 18
	SBI(LCD_PRT_D5,LCD_D5);
  ca:	91 9a       	sbi	0x12, 1	; 18
	CBI(LCD_PRT_D6,LCD_D6);
  cc:	90 98       	cbi	0x12, 0	; 18
	CBI(LCD_PRT_D7,LCD_D7);
  ce:	ae 98       	cbi	0x15, 6	; 21
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0x2e>
	_delay_us(6);
	CBI(LCD_PRT_EN,LCD_EN);
  d4:	93 98       	cbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	c8 01       	movw	r24, r16
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_init+0x36>
	_delay_ms(2);
	lcd_cmd(0x28);	// 2 Lines
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	ac df       	rcall	.-168    	; 0x38 <lcd_cmd>
	//lcd_cmd(0x06);// Cursor Move Direction: cursor is in increment position
	lcd_cmd(0x0D);	// Display on, Cursor off, Cursor blink on
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	aa df       	rcall	.-172    	; 0x38 <lcd_cmd>
	lcd_cmd(0x01);	// Clear Screen and returns cursor to the home position (address 0)
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	a8 df       	rcall	.-176    	; 0x38 <lcd_cmd>
  e8:	c8 01       	movw	r24, r16
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_init+0x48>
	_delay_ms(2);
	lcd_cmd(0x80);	// Sets the DDRAM address. DDRAM data is sent and received after this setting.	
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	a3 df       	rcall	.-186    	; 0x38 <lcd_cmd>
}
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <lcd_dat>:
	CBI(LCD_PRT_EN,LCD_EN);
	_delay_us(40);
}

void lcd_dat(unsigned char cmd){
	SBI(LCD_PRT_RS,LCD_RS);
  f8:	94 9a       	sbi	0x12, 4	; 18
	SBI(LCD_PRT_EN,LCD_EN);
  fa:	93 9a       	sbi	0x12, 3	; 18
	if(cmd&0x10){SBI(LCD_PRT_D4,LCD_D4);}
  fc:	98 2f       	mov	r25, r24
  fe:	84 ff       	sbrs	r24, 4
 100:	02 c0       	rjmp	.+4      	; 0x106 <lcd_dat+0xe>
 102:	92 9a       	sbi	0x12, 2	; 18
 104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_dat+0x10>
	else CBI(LCD_PRT_D4,LCD_D4);
 106:	92 98       	cbi	0x12, 2	; 18
	if(cmd&0x20){SBI(LCD_PRT_D5,LCD_D5);}
 108:	95 ff       	sbrs	r25, 5
 10a:	02 c0       	rjmp	.+4      	; 0x110 <lcd_dat+0x18>
 10c:	91 9a       	sbi	0x12, 1	; 18
 10e:	01 c0       	rjmp	.+2      	; 0x112 <lcd_dat+0x1a>
	else CBI(LCD_PRT_D5,LCD_D5);
 110:	91 98       	cbi	0x12, 1	; 18
	if(cmd&0x40){SBI(LCD_PRT_D6,LCD_D6);}
 112:	96 ff       	sbrs	r25, 6
 114:	02 c0       	rjmp	.+4      	; 0x11a <lcd_dat+0x22>
 116:	90 9a       	sbi	0x12, 0	; 18
 118:	01 c0       	rjmp	.+2      	; 0x11c <lcd_dat+0x24>
	else CBI(LCD_PRT_D6,LCD_D6);
 11a:	90 98       	cbi	0x12, 0	; 18
	if(cmd&0x80){SBI(LCD_PRT_D7,LCD_D7);}
 11c:	87 ff       	sbrs	r24, 7
 11e:	02 c0       	rjmp	.+4      	; 0x124 <lcd_dat+0x2c>
 120:	ae 9a       	sbi	0x15, 6	; 21
 122:	01 c0       	rjmp	.+2      	; 0x126 <lcd_dat+0x2e>
	else CBI(LCD_PRT_D7,LCD_D7);
 124:	ae 98       	cbi	0x15, 6	; 21
	CBI(LCD_PRT_EN,LCD_EN);
 126:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 128:	8a e6       	ldi	r24, 0x6A	; 106
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_dat+0x32>
	_delay_us(40);
	SBI(LCD_PRT_EN,LCD_EN);
 12e:	93 9a       	sbi	0x12, 3	; 18
	if(cmd&1){SBI(LCD_PRT_D4,LCD_D4);}
 130:	90 ff       	sbrs	r25, 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <lcd_dat+0x40>
 134:	92 9a       	sbi	0x12, 2	; 18
 136:	01 c0       	rjmp	.+2      	; 0x13a <lcd_dat+0x42>
	else CBI(LCD_PRT_D4,LCD_D4);
 138:	92 98       	cbi	0x12, 2	; 18
	if(cmd&2){SBI(LCD_PRT_D5,LCD_D5);}
 13a:	91 ff       	sbrs	r25, 1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <lcd_dat+0x4a>
 13e:	91 9a       	sbi	0x12, 1	; 18
 140:	01 c0       	rjmp	.+2      	; 0x144 <lcd_dat+0x4c>
	else CBI(LCD_PRT_D5,LCD_D5);
 142:	91 98       	cbi	0x12, 1	; 18
	if(cmd&4){SBI(LCD_PRT_D6,LCD_D6);}
 144:	92 ff       	sbrs	r25, 2
 146:	02 c0       	rjmp	.+4      	; 0x14c <lcd_dat+0x54>
 148:	90 9a       	sbi	0x12, 0	; 18
 14a:	01 c0       	rjmp	.+2      	; 0x14e <lcd_dat+0x56>
	else CBI(LCD_PRT_D6,LCD_D6);
 14c:	90 98       	cbi	0x12, 0	; 18
	if(cmd&8){SBI(LCD_PRT_D7,LCD_D7);}
 14e:	93 ff       	sbrs	r25, 3
 150:	02 c0       	rjmp	.+4      	; 0x156 <lcd_dat+0x5e>
 152:	ae 9a       	sbi	0x15, 6	; 21
 154:	01 c0       	rjmp	.+2      	; 0x158 <lcd_dat+0x60>
	else CBI(LCD_PRT_D7,LCD_D7);
 156:	ae 98       	cbi	0x15, 6	; 21
	CBI(LCD_PRT_EN,LCD_EN);
 158:	93 98       	cbi	0x12, 3	; 18
 15a:	8a e6       	ldi	r24, 0x6A	; 106
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_dat+0x64>
	_delay_us(40);
}
 160:	08 95       	ret

00000162 <main>:

void lcd_init(void);
void lcd_cmd(unsigned char);
void lcd_dat(unsigned char);

int main(void){
 162:	1f 93       	push	r17
	lcd_init();
 164:	9e df       	rcall	.-196    	; 0xa2 <lcd_init>

	lcd_dat('T');
 166:	84 e5       	ldi	r24, 0x54	; 84
 168:	c7 df       	rcall	.-114    	; 0xf8 <lcd_dat>
	lcd_dat('e');
 16a:	85 e6       	ldi	r24, 0x65	; 101
 16c:	c5 df       	rcall	.-118    	; 0xf8 <lcd_dat>
	lcd_dat('S');
 16e:	83 e5       	ldi	r24, 0x53	; 83
 170:	c3 df       	rcall	.-122    	; 0xf8 <lcd_dat>
	lcd_dat('t');
 172:	84 e7       	ldi	r24, 0x74	; 116
 174:	c1 df       	rcall	.-126    	; 0xf8 <lcd_dat>
	lcd_dat('r');
 176:	82 e7       	ldi	r24, 0x72	; 114
 178:	bf df       	rcall	.-130    	; 0xf8 <lcd_dat>
	lcd_dat('i');
 17a:	89 e6       	ldi	r24, 0x69	; 105
 17c:	bd df       	rcall	.-134    	; 0xf8 <lcd_dat>
	lcd_dat('n');
 17e:	8e e6       	ldi	r24, 0x6E	; 110
 180:	bb df       	rcall	.-138    	; 0xf8 <lcd_dat>
	lcd_dat('g');
 182:	87 e6       	ldi	r24, 0x67	; 103
 184:	b9 df       	rcall	.-142    	; 0xf8 <lcd_dat>
	lcd_dat('.');
 186:	8e e2       	ldi	r24, 0x2E	; 46
 188:	b7 df       	rcall	.-146    	; 0xf8 <lcd_dat>
	lcd_dat('.');
 18a:	8e e2       	ldi	r24, 0x2E	; 46
 18c:	b5 df       	rcall	.-150    	; 0xf8 <lcd_dat>
	lcd_dat('.');
 18e:	8e e2       	ldi	r24, 0x2E	; 46
 190:	b3 df       	rcall	.-154    	; 0xf8 <lcd_dat>

	lcd_cmd(0xBF);	// Move cursor to second line
 192:	8f eb       	ldi	r24, 0xBF	; 191
 194:	51 df       	rcall	.-350    	; 0x38 <lcd_cmd>
 196:	1a e3       	ldi	r17, 0x3A	; 58

	for(signed char i=10;i>=0;i--){
		lcd_dat(i+'0');
 198:	81 2f       	mov	r24, r17
 19a:	ae df       	rcall	.-164    	; 0xf8 <lcd_dat>
 19c:	11 50       	subi	r17, 0x01	; 1
	lcd_dat('.');
	lcd_dat('.');

	lcd_cmd(0xBF);	// Move cursor to second line

	for(signed char i=10;i>=0;i--){
 19e:	1f 32       	cpi	r17, 0x2F	; 47
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0x36>
		lcd_dat(i+'0');
	}

	lcd_cmd(0x02); _delay_ms(2); // Returns cursor to home position (address 0). Also returns display being shifted to the original position. DDRAM contents remains unchanged.
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	49 df       	rcall	.-366    	; 0x38 <lcd_cmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a6:	80 ea       	ldi	r24, 0xA0	; 160
 1a8:	9f e0       	ldi	r25, 0x0F	; 15
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x48>

	return 0;
}
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1f 91       	pop	r17
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
