
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00002da0  00002da0  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000039ec  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  00800062  00800062  00000ce2  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000302  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000dca  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000228  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000126d  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fd  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000150  00000000  00000000  00003b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00002da0 <__vectors>:
    2da0:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__ctors_end>
    2da4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2da8:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dac:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2db0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2db4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2db8:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dbc:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dc0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dc4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dc8:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dcc:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dd0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dd4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dd8:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2ddc:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2de0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2de4:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2de8:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2dec:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2df0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__bad_interrupt>
    2df4:	8b 1c       	adc	r8, r11
    2df6:	91 1c       	adc	r9, r1
    2df8:	8e 1c       	adc	r8, r14
    2dfa:	cb 1c       	adc	r12, r11
    2dfc:	c1 1c       	adc	r12, r1
    2dfe:	b5 1c       	adc	r11, r5
    2e00:	cb 1c       	adc	r12, r11
    2e02:	cb 1c       	adc	r12, r11
    2e04:	cb 1c       	adc	r12, r11
    2e06:	cb 1c       	adc	r12, r11
    2e08:	cb 1c       	adc	r12, r11
    2e0a:	cb 1c       	adc	r12, r11
    2e0c:	cb 1c       	adc	r12, r11
    2e0e:	cb 1c       	adc	r12, r11
    2e10:	cb 1c       	adc	r12, r11
    2e12:	94 1c       	adc	r9, r4
    2e14:	97 1c       	adc	r9, r7
    2e16:	af 1c       	adc	r10, r15
    2e18:	b2 1c       	adc	r11, r2
    2e1a:	b8 1c       	adc	r11, r8
    2e1c:	bb 1c       	adc	r11, r11
    2e1e:	be 1c       	adc	r11, r14
    2e20:	a3 1c       	adc	r10, r3
    2e22:	a0 1c       	adc	r10, r0
    2e24:	a9 1c       	adc	r10, r9
    2e26:	a6 1c       	adc	r10, r6
    2e28:	9a 1c       	adc	r9, r10
    2e2a:	9d 1c       	adc	r9, r13
    2e2c:	ac 1c       	adc	r10, r12

00002e2e <__ctors_end>:
    2e2e:	11 24       	eor	r1, r1
    2e30:	1f be       	out	0x3f, r1	; 63
    2e32:	cf e5       	ldi	r28, 0x5F	; 95
    2e34:	d4 e0       	ldi	r29, 0x04	; 4
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	cd bf       	out	0x3d, r28	; 61

00002e3a <__do_copy_data>:
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	a0 e6       	ldi	r26, 0x60	; 96
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	ec ee       	ldi	r30, 0xEC	; 236
    2e42:	f9 e3       	ldi	r31, 0x39	; 57
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <.do_copy_data_start>

00002e46 <.do_copy_data_loop>:
    2e46:	05 90       	lpm	r0, Z+
    2e48:	0d 92       	st	X+, r0

00002e4a <.do_copy_data_start>:
    2e4a:	a2 36       	cpi	r26, 0x62	; 98
    2e4c:	b1 07       	cpc	r27, r17
    2e4e:	d9 f7       	brne	.-10     	; 0x2e46 <.do_copy_data_loop>

00002e50 <__do_clear_bss>:
    2e50:	12 e0       	ldi	r17, 0x02	; 2
    2e52:	a2 e6       	ldi	r26, 0x62	; 98
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <.do_clear_bss_start>

00002e58 <.do_clear_bss_loop>:
    2e58:	1d 92       	st	X+, r1

00002e5a <.do_clear_bss_start>:
    2e5a:	a6 39       	cpi	r26, 0x96	; 150
    2e5c:	b1 07       	cpc	r27, r17
    2e5e:	e1 f7       	brne	.-8      	; 0x2e58 <.do_clear_bss_loop>
    2e60:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <main>
    2e64:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <_exit>

00002e68 <__bad_interrupt>:
    2e68:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__vectors>

00002e6c <putch>:
    return;
}
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
void putch(char ch)
{
    2e6c:	5d 9b       	sbis	0x0b, 5	; 11
    2e6e:	fe cf       	rjmp	.-4      	; 0x2e6c <putch>
    while (!(UCSRA & _BV(UDRE)));
    UDR = ch;
    2e70:	8c b9       	out	0x0c, r24	; 12
    2e72:	08 95       	ret

00002e74 <getch>:
}

char getch(void)
{
    2e74:	5f 9b       	sbis	0x0b, 7	; 11
    2e76:	fe cf       	rjmp	.-4      	; 0x2e74 <getch>
    while(!(UCSRA & _BV(RXC)));
    return UDR;
    2e78:	8c b1       	in	r24, 0x0c	; 12
}
    2e7a:	99 27       	eor	r25, r25
    2e7c:	08 95       	ret

00002e7e <flash_led>:


void flash_led(uint8_t count)
{
    2e7e:	88 23       	and	r24, r24
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <flash_led+0x6>
    uint32_t ll;
	uint8_t ii;
    if (count == 0) {
    2e82:	83 e0       	ldi	r24, 0x03	; 3
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <flash_led+0x10>
      count = 3;
    }
    
    for (ii = 0; ii < count; ++ii) {
	LED_PORT &= ~_BV(LED);
    2e88:	c2 98       	cbi	0x18, 2	; 24
	for(ll = 0; ll < (F_CPU / 5); ++ll);
	LED_PORT |= _BV(LED);
    2e8a:	c2 9a       	sbi	0x18, 2	; 24
    2e8c:	9f 5f       	subi	r25, 0xFF	; 255
    2e8e:	98 17       	cp	r25, r24
    2e90:	d9 f7       	brne	.-10     	; 0x2e88 <flash_led+0xa>
    2e92:	08 95       	ret

00002e94 <get_message_body>:
	for(ll = 0; ll < (2 * F_CPU); ++ll);
    }	
}

void get_message(void)
{
		
		rx_ptr=0;
		rx_buf[rx_ptr]=getch();									//get MESSAGE_START
		rx_chm^=rx_buf[rx_ptr];
		rx_ptr++;
		
		//////////////////LED_PORT &= ~_BV(LED);										//turn led on
		
		rx_buf[rx_ptr]=getch();									//get SEQUENCE_NUMBER
		rx_chm^=rx_buf[rx_ptr];
		rx_ptr++;

		rx_buf[rx_ptr]=getch();									//get MESSAGE_SIZE[1]
		rx_chm^=rx_buf[rx_ptr];
		rx_ptr++;

		rx_buf[rx_ptr]=getch();									//get MESSAGE_SIZE[0]
		rx_chm^=rx_buf[rx_ptr];
		rx_ptr++;
		
		rx_buf[rx_ptr]=getch();									//get TOKEN
		rx_chm^=rx_buf[rx_ptr];
		rx_ptr++;

		get_message_body();												//get message body
		
		rx_buf[rx_ptr]=getch();									//get CHECKSUM
		rx_chm^=rx_buf[rx_ptr];
		
		if(rx_chm==0)													//message recived Ok!
		{
			rx_chm=0;
			rx_ptr=0;
			//go to start
		}
	////////////////////////////LED_PORT |= _BV(LED);									//turn led off
	
	
}
void get_message_body(void)
{
    2e94:	80 91 72 00 	lds	r24, 0x0072
    2e98:	99 27       	eor	r25, r25
    2e9a:	58 2f       	mov	r21, r24
    2e9c:	44 27       	eor	r20, r20
    2e9e:	80 91 73 00 	lds	r24, 0x0073
    2ea2:	48 0f       	add	r20, r24
    2ea4:	51 1d       	adc	r21, r1
    2ea6:	20 91 62 00 	lds	r18, 0x0062
    2eaa:	30 91 63 00 	lds	r19, 0x0063
    2eae:	e0 91 66 00 	lds	r30, 0x0066
    2eb2:	d9 01       	movw	r26, r18
    2eb4:	a0 59       	subi	r26, 0x90	; 144
    2eb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0a c0       	rjmp	.+20     	; 0x2ed2 <get_message_body+0x3e>
    2ebe:	5f 9b       	sbis	0x0b, 7	; 11
    2ec0:	fe cf       	rjmp	.-4      	; 0x2ebe <get_message_body+0x2a>
    2ec2:	8c b1       	in	r24, 0x0c	; 12
	int j,k;
	j=rx_buf[2]*256+rx_buf[3];								//calculate message size
	
	for(k=0;k<j;k++)
	{
		rx_buf[rx_ptr]=getch();
    2ec4:	99 27       	eor	r25, r25
    2ec6:	8d 93       	st	X+, r24
		rx_chm^=rx_buf[rx_ptr];
    2ec8:	e8 27       	eor	r30, r24
    2eca:	6f 5f       	subi	r22, 0xFF	; 255
    2ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ece:	2f 5f       	subi	r18, 0xFF	; 255
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	64 17       	cp	r22, r20
    2ed4:	75 07       	cpc	r23, r21
    2ed6:	9c f3       	brlt	.-26     	; 0x2ebe <get_message_body+0x2a>
    2ed8:	30 93 63 00 	sts	0x0063, r19
    2edc:	20 93 62 00 	sts	0x0062, r18
    2ee0:	e0 93 66 00 	sts	0x0066, r30
    2ee4:	08 95       	ret

00002ee6 <get_message>:
    2ee6:	5f 9b       	sbis	0x0b, 7	; 11
    2ee8:	fe cf       	rjmp	.-4      	; 0x2ee6 <get_message>
    2eea:	8c b1       	in	r24, 0x0c	; 12
    2eec:	99 27       	eor	r25, r25
    2eee:	68 2f       	mov	r22, r24
    2ef0:	80 93 70 00 	sts	0x0070, r24
    2ef4:	20 91 66 00 	lds	r18, 0x0066
    2ef8:	5f 9b       	sbis	0x0b, 7	; 11
    2efa:	fe cf       	rjmp	.-4      	; 0x2ef8 <get_message+0x12>
    2efc:	8c b1       	in	r24, 0x0c	; 12
    2efe:	99 27       	eor	r25, r25
    2f00:	58 2f       	mov	r21, r24
    2f02:	80 93 71 00 	sts	0x0071, r24
    2f06:	5f 9b       	sbis	0x0b, 7	; 11
    2f08:	fe cf       	rjmp	.-4      	; 0x2f06 <get_message+0x20>
    2f0a:	8c b1       	in	r24, 0x0c	; 12
    2f0c:	99 27       	eor	r25, r25
    2f0e:	38 2f       	mov	r19, r24
    2f10:	80 93 72 00 	sts	0x0072, r24
    2f14:	5f 9b       	sbis	0x0b, 7	; 11
    2f16:	fe cf       	rjmp	.-4      	; 0x2f14 <get_message+0x2e>
    2f18:	8c b1       	in	r24, 0x0c	; 12
    2f1a:	99 27       	eor	r25, r25
    2f1c:	48 2f       	mov	r20, r24
    2f1e:	80 93 73 00 	sts	0x0073, r24
    2f22:	5f 9b       	sbis	0x0b, 7	; 11
    2f24:	fe cf       	rjmp	.-4      	; 0x2f22 <get_message+0x3c>
    2f26:	8c b1       	in	r24, 0x0c	; 12
    2f28:	99 27       	eor	r25, r25
    2f2a:	80 93 74 00 	sts	0x0074, r24
    2f2e:	35 27       	eor	r19, r21
    2f30:	38 27       	eor	r19, r24
    2f32:	26 27       	eor	r18, r22
    2f34:	24 27       	eor	r18, r20
    2f36:	23 27       	eor	r18, r19
    2f38:	20 93 66 00 	sts	0x0066, r18
    2f3c:	85 e0       	ldi	r24, 0x05	; 5
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	90 93 63 00 	sts	0x0063, r25
    2f44:	80 93 62 00 	sts	0x0062, r24
    2f48:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <get_message_body>
    2f4c:	e0 91 62 00 	lds	r30, 0x0062
    2f50:	f0 91 63 00 	lds	r31, 0x0063
    2f54:	5f 9b       	sbis	0x0b, 7	; 11
    2f56:	fe cf       	rjmp	.-4      	; 0x2f54 <get_message+0x6e>
    2f58:	8c b1       	in	r24, 0x0c	; 12
    2f5a:	99 27       	eor	r25, r25
    2f5c:	e0 59       	subi	r30, 0x90	; 144
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 83       	st	Z, r24
    2f62:	20 91 66 00 	lds	r18, 0x0066
    2f66:	28 27       	eor	r18, r24
    2f68:	20 93 66 00 	sts	0x0066, r18
    2f6c:	22 23       	and	r18, r18
    2f6e:	31 f4       	brne	.+12     	; 0x2f7c <get_message+0x96>
    2f70:	10 92 66 00 	sts	0x0066, r1
    2f74:	10 92 63 00 	sts	0x0063, r1
    2f78:	10 92 62 00 	sts	0x0062, r1
    2f7c:	08 95       	ret

00002f7e <sendResponse>:
		rx_ptr++;
	}
	
}


void sendResponse(void)
{
    2f7e:	10 92 67 00 	sts	0x0067, r1
	int j,k;
	tx_chm=0;
		
	tx_buf[0]=MESSAGE_START;								//MESSAGE_START
    2f82:	8b e1       	ldi	r24, 0x1B	; 27
    2f84:	80 93 83 01 	sts	0x0183, r24
		
	tx_buf[1]=rx_buf[1];									//SEQUENCE_NUMBER
    2f88:	80 91 71 00 	lds	r24, 0x0071
    2f8c:	80 93 84 01 	sts	0x0184, r24
		
	tx_buf[4]=TOKEN;										//token
    2f90:	8e e0       	ldi	r24, 0x0E	; 14
    2f92:	80 93 87 01 	sts	0x0187, r24
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	e3 e8       	ldi	r30, 0x83	; 131
    2f9a:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(j=0;j<5;j++)
	{	
		tx_chm^=tx_buf[j];
    2f9c:	80 81       	ld	r24, Z
    2f9e:	68 27       	eor	r22, r24
    2fa0:	5d 9b       	sbis	0x0b, 5	; 11
    2fa2:	fe cf       	rjmp	.-4      	; 0x2fa0 <sendResponse+0x22>
    2fa4:	8c b9       	out	0x0c, r24	; 12
    2fa6:	31 96       	adiw	r30, 0x01	; 1
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	e8 38       	cpi	r30, 0x88	; 136
    2fac:	f8 07       	cpc	r31, r24
    2fae:	b1 f7       	brne	.-20     	; 0x2f9c <sendResponse+0x1e>
    2fb0:	60 93 67 00 	sts	0x0067, r22
		putch(tx_buf[j]);
	}
	
	j=tx_buf[messagesize1]*256+tx_buf[messagesize0];
    2fb4:	80 91 85 01 	lds	r24, 0x0185
    2fb8:	99 27       	eor	r25, r25
    2fba:	38 2f       	mov	r19, r24
    2fbc:	22 27       	eor	r18, r18
    2fbe:	80 91 86 01 	lds	r24, 0x0186
    2fc2:	28 0f       	add	r18, r24
    2fc4:	31 1d       	adc	r19, r1
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	50 e0       	ldi	r21, 0x00	; 0
    2fca:	08 c0       	rjmp	.+16     	; 0x2fdc <sendResponse+0x5e>
	for(k=0;k<j;k++)
	{
		tx_chm^=tx_buf[k+5];								//start from message body
    2fcc:	80 81       	ld	r24, Z
    2fce:	68 27       	eor	r22, r24
    2fd0:	5d 9b       	sbis	0x0b, 5	; 11
    2fd2:	fe cf       	rjmp	.-4      	; 0x2fd0 <sendResponse+0x52>
    2fd4:	8c b9       	out	0x0c, r24	; 12
    2fd6:	4f 5f       	subi	r20, 0xFF	; 255
    2fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fda:	31 96       	adiw	r30, 0x01	; 1
    2fdc:	42 17       	cp	r20, r18
    2fde:	53 07       	cpc	r21, r19
    2fe0:	ac f3       	brlt	.-22     	; 0x2fcc <sendResponse+0x4e>
    2fe2:	60 93 67 00 	sts	0x0067, r22
    2fe6:	5d 9b       	sbis	0x0b, 5	; 11
    2fe8:	fe cf       	rjmp	.-4      	; 0x2fe6 <sendResponse+0x68>
    2fea:	6c b9       	out	0x0c, r22	; 12
    2fec:	08 95       	ret

00002fee <cmdSignOn>:
		putch(tx_buf[k+5]);
	}
	
	putch(tx_chm);

}

void cmdSignOn(void)
{
    2fee:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=11;
    2ff2:	8b e0       	ldi	r24, 0x0B	; 11
    2ff4:	80 93 86 01 	sts	0x0186, r24
	
	tx_buf[5]= CMD_SIGN_ON;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6]= STATUS_CMD_OK;
    2ffe:	10 92 89 01 	sts	0x0189, r1
	
	tx_buf[7]= 0x08;  	// send signature length
    3002:	88 e0       	ldi	r24, 0x08	; 8
    3004:	80 93 8a 01 	sts	0x018A, r24
	tx_buf[8]= 'S';		// send identifier
    3008:	83 e5       	ldi	r24, 0x53	; 83
    300a:	80 93 8b 01 	sts	0x018B, r24
	tx_buf[9] = 'T';
    300e:	84 e5       	ldi	r24, 0x54	; 84
    3010:	80 93 8c 01 	sts	0x018C, r24
	tx_buf[10] = 'K';
    3014:	8b e4       	ldi	r24, 0x4B	; 75
    3016:	80 93 8d 01 	sts	0x018D, r24
	tx_buf[11] = '5';
    301a:	85 e3       	ldi	r24, 0x35	; 53
    301c:	80 93 8e 01 	sts	0x018E, r24
	tx_buf[12] = '0';
    3020:	80 e3       	ldi	r24, 0x30	; 48
    3022:	80 93 8f 01 	sts	0x018F, r24
	tx_buf[13] = '0';
    3026:	80 93 90 01 	sts	0x0190, r24
	tx_buf[14] = '_';
    302a:	8f e5       	ldi	r24, 0x5F	; 95
    302c:	80 93 91 01 	sts	0x0191, r24
	tx_buf[15] = '2';
    3030:	82 e3       	ldi	r24, 0x32	; 50
    3032:	80 93 92 01 	sts	0x0192, r24
    3036:	08 95       	ret

00003038 <cmdGetParameter>:

}
void cmdGetParameter(void)
{
    3038:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=3;
    303c:	83 e0       	ldi	r24, 0x03	; 3
    303e:	80 93 86 01 	sts	0x0186, r24
	
	tx_buf[5] = CMD_GET_PARAMETER;
    3042:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6] = STATUS_CMD_OK;
    3046:	10 92 89 01 	sts	0x0189, r1

	switch( rx_buf[6] )  {
    304a:	80 91 76 00 	lds	r24, 0x0076
    304e:	85 39       	cpi	r24, 0x95	; 149
    3050:	d9 f0       	breq	.+54     	; 0x3088 <cmdGetParameter+0x50>
    3052:	86 39       	cpi	r24, 0x96	; 150
    3054:	60 f4       	brcc	.+24     	; 0x306e <cmdGetParameter+0x36>
    3056:	81 39       	cpi	r24, 0x91	; 145
    3058:	99 f0       	breq	.+38     	; 0x3080 <cmdGetParameter+0x48>
    305a:	82 39       	cpi	r24, 0x92	; 146
    305c:	18 f4       	brcc	.+6      	; 0x3064 <cmdGetParameter+0x2c>
    305e:	80 39       	cpi	r24, 0x90	; 144
    3060:	11 f5       	brne	.+68     	; 0x30a6 <cmdGetParameter+0x6e>
    3062:	0e c0       	rjmp	.+28     	; 0x3080 <cmdGetParameter+0x48>
    3064:	82 39       	cpi	r24, 0x92	; 146
    3066:	71 f0       	breq	.+28     	; 0x3084 <cmdGetParameter+0x4c>
    3068:	84 39       	cpi	r24, 0x94	; 148
    306a:	e9 f4       	brne	.+58     	; 0x30a6 <cmdGetParameter+0x6e>
    306c:	0d c0       	rjmp	.+26     	; 0x3088 <cmdGetParameter+0x50>
    306e:	87 39       	cpi	r24, 0x97	; 151
    3070:	81 f0       	breq	.+32     	; 0x3092 <cmdGetParameter+0x5a>
    3072:	87 39       	cpi	r24, 0x97	; 151
    3074:	58 f0       	brcs	.+22     	; 0x308c <cmdGetParameter+0x54>
    3076:	88 39       	cpi	r24, 0x98	; 152
    3078:	79 f0       	breq	.+30     	; 0x3098 <cmdGetParameter+0x60>
    307a:	8a 39       	cpi	r24, 0x9A	; 154
    307c:	a1 f4       	brne	.+40     	; 0x30a6 <cmdGetParameter+0x6e>
    307e:	0f c0       	rjmp	.+30     	; 0x309e <cmdGetParameter+0x66>
		case PARAM_HW_VER: 
            tx_buf[7] = HARDWARE_VERSION;  // send hardware version          				
			break;
		case PARAM_SW_MAJOR: 
            tx_buf[7] = SOFTWARE_MAJOR; // send software major version         				
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	0e c0       	rjmp	.+28     	; 0x30a0 <cmdGetParameter+0x68>
			break;        			
		case PARAM_SW_MINOR: 
            tx_buf[7] = SOFTWARE_MINOR;  // send software minor version          				
    3084:	87 e0       	ldi	r24, 0x07	; 7
    3086:	0c c0       	rjmp	.+24     	; 0x30a0 <cmdGetParameter+0x68>
			break;			
		case PARAM_VTARGET: 
            tx_buf[7] = VTARGET; // target supply voltage         				
			break;        			
		case PARAM_VADJUST: 
            tx_buf[7] = VADJUST; // target VREF voltage          				
    3088:	82 e3       	ldi	r24, 0x32	; 50
    308a:	0a c0       	rjmp	.+20     	; 0x30a0 <cmdGetParameter+0x68>
			break;  
		case PARAM_OSC_PSCALE: 
            tx_buf[7] = pscalefsys; // oscilator prescaler value         				
    308c:	80 91 61 00 	lds	r24, 0x0061
    3090:	07 c0       	rjmp	.+14     	; 0x30a0 <cmdGetParameter+0x68>
			break;
		case PARAM_OSC_CMATCH: 
            tx_buf[7] = cmatchdef; // oscilator compare value         				
    3092:	80 91 6f 00 	lds	r24, 0x006F
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <cmdGetParameter+0x68>
			break;			
		case PARAM_SCK_DURATION: 
            tx_buf[7] = sckdurationdef; // oscilator compare value         				
    3098:	80 91 60 00 	lds	r24, 0x0060
    309c:	01 c0       	rjmp	.+2      	; 0x30a0 <cmdGetParameter+0x68>
			break;        			       			        			        			

		case PARAM_TOPCARD_DETECT: 
            tx_buf[7] =  STK501; // STK501 is expected          				
    309e:	8a ea       	ldi	r24, 0xAA	; 170
    30a0:	80 93 8a 01 	sts	0x018A, r24
    30a4:	08 95       	ret
			break;		

		default: 	
            tx_buf[7] = 0x00; // send dummy value for not supported parameters   
    30a6:	10 92 8a 01 	sts	0x018A, r1
    30aa:	08 95       	ret

000030ac <cmdLeaveProgmodeIsp>:
        break;      			
	}			
}
void cmdSetParameter(void)
{
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;
	
	SetParameter();											//set selected parameter
	
	tx_buf[5] = CMD_SET_PARAMETER;
	tx_buf[6] = STATUS_CMD_OK; 

}
void cmdReadSignatureIsp(void) 
{

	tx_buf[5] = CMD_READ_SIGNATURE_ISP;
	ReadfusebitIsp();

}

void cmdEnterProgmodeIsp(void)
{
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;
	
	EnterProgmodeIsp();
}

void cmdLeaveProgmodeIsp(void)
{
    30ac:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	80 93 86 01 	sts	0x0186, r24
	
	DDRB&=31;												//leave spi pins High ampedance
    30b6:	87 b3       	in	r24, 0x17	; 23
    30b8:	8f 71       	andi	r24, 0x1F	; 31
    30ba:	87 bb       	out	0x17, r24	; 23
	reset_DDR&=~_BV(reset);
    30bc:	b9 98       	cbi	0x17, 1	; 23
	PORTB&=31;												//leave spi pins High ampedance
    30be:	88 b3       	in	r24, 0x18	; 24
    30c0:	8f 71       	andi	r24, 0x1F	; 31
    30c2:	88 bb       	out	0x18, r24	; 24
	reset_PORT&=~_BV(reset);
    30c4:	c1 98       	cbi	0x18, 1	; 24
	
	tx_buf[5] = CMD_LEAVE_PROGMODE_ISP;
    30c6:	81 e1       	ldi	r24, 0x11	; 17
    30c8:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6] = STATUS_CMD_OK;
    30cc:	10 92 89 01 	sts	0x0189, r1
    30d0:	08 95       	ret

000030d2 <cmdspimulti>:
	
}

void cmdreadosccalisp(void)
{
	tx_buf[5] = CMD_READ_OSCCAL_ISP;						//read osccal byte
	ReadfusebitIsp();
}
void cmdreadlockisp(void)
{
	tx_buf[5] = CMD_READ_LOCK_ISP;							//read lock bits
	ReadfusebitIsp();
}
void cmdreadfuseisp(void)
{
	tx_buf[5] = CMD_READ_FUSE_ISP;							//read fuse bits
	ReadfusebitIsp();
}
void cmdprogramlockisp(void)
{
	programfuseisp();										//program lock bits
	tx_buf[5] =CMD_PROGRAM_LOCK_ISP;
}
void cmdprogramfuseisp(void)
{
	programfuseisp();
	tx_buf[5] = CMD_PROGRAM_FUSE_ISP;						//program fuse bits
}
void cmdspimulti(void)
{
    30d2:	20 91 77 00 	lds	r18, 0x0077
    30d6:	e2 2f       	mov	r30, r18
    30d8:	ff 27       	eor	r31, r31
    30da:	cf 01       	movw	r24, r30
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	71 e0       	ldi	r23, 0x01	; 1
    30e0:	0e 94 ce 1c 	call	0x399c	; 0x399c <__divmodhi4>
    30e4:	60 93 85 01 	sts	0x0185, r22
	int j;
	tx_buf[messagesize1]=rx_buf[7]/256;  		// set message length
	tx_buf[messagesize0]=rx_buf[7]+3;
    30e8:	2d 5f       	subi	r18, 0xFD	; 253
    30ea:	20 93 86 01 	sts	0x0186, r18

	
	tx_buf[5] = CMD_SPI_MULTI;
    30ee:	8d e1       	ldi	r24, 0x1D	; 29
    30f0:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6] = STATUS_CMD_OK;
    30f4:	10 92 89 01 	sts	0x0189, r1
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	aa e8       	ldi	r26, 0x8A	; 138
    30fe:	b1 e0       	ldi	r27, 0x01	; 1
    3100:	22 e2       	ldi	r18, 0x22	; 34
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <cmdspimulti+0x36>
	for(j=0;j<rx_buf[7];j++)
	{
		tx_buf[j+7]=0x22;		//data send back
    3104:	2d 93       	st	X+, r18
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	8e 17       	cp	r24, r30
    310a:	9f 07       	cpc	r25, r31
    310c:	dc f3       	brlt	.-10     	; 0x3104 <cmdspimulti+0x32>
		
	}
	
	tx_buf[rx_buf[7]+7] = STATUS_CMD_OK;
    310e:	ed 57       	subi	r30, 0x7D	; 125
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	17 82       	std	Z+7, r1	; 0x07
    3114:	08 95       	ret

00003116 <cmdloadaddress>:
	
}
void cmdchiperaseisp(void)
{
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;

	tx_buf[5] = CMD_CHIP_ERASE_ISP;
	tx_buf[6] = STATUS_CMD_OK;
	
	spi(rx_buf[8]);											//erase dvice
	spi(rx_buf[9]);
	spi(rx_buf[10]);
	spi(rx_buf[11]);
	
	delay_ms(rx_buf[6]);
	
}
void cmdprogramflashisp(void)
{
	int a,b;
	long add;
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;

	tx_buf[5] = CMD_PROGRAM_FLASH_ISP;
	tx_buf[6] = STATUS_CMD_OK;

	if(extended_address)									//flash with large memory
	{
		spi(0x4d);
		spi(0);
		spi(address_flash>>16);
		spi(0);
	}
	
	b=rx_buf[6]*256+rx_buf[7];
	add=address_flash;
	for(a=0;a<b;a+=2)
	{
		spi(rx_buf[10]);									//load Program Memory
		spi(address_flash>>8);
		spi(address_flash);
		spi(rx_buf[a+15]);

		spi(rx_buf[10]|8);									//load Program Memory
		spi(0);
		spi(address_flash);
		spi(rx_buf[a+16]);

		address_flash++;
	}

	if(rx_buf[8]&0x80)
		{
			spi(rx_buf[11]);									//write program memory
			spi(add>>8);
			spi(add);
			spi(0);
		
			delay_ms(rx_buf[9]);
		}
}
void cmdloadaddress(void)
{
    3116:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	80 93 86 01 	sts	0x0186, r24

    address_eeprom = rx_buf[8]*256+rx_buf[9];				//set eeprom address
    3120:	20 91 78 00 	lds	r18, 0x0078
    3124:	33 27       	eor	r19, r19
    3126:	32 2f       	mov	r19, r18
    3128:	22 27       	eor	r18, r18
    312a:	60 91 79 00 	lds	r22, 0x0079
    312e:	c9 01       	movw	r24, r18
    3130:	86 0f       	add	r24, r22
    3132:	91 1d       	adc	r25, r1
    3134:	90 93 6d 00 	sts	0x006D, r25
    3138:	80 93 6c 00 	sts	0x006C, r24
    address_flash  = (rx_buf[7]*65536+rx_buf[8]*256+rx_buf[9])*2;			//set flash word address
    313c:	44 27       	eor	r20, r20
    313e:	37 fd       	sbrc	r19, 7
    3140:	40 95       	com	r20
    3142:	54 2f       	mov	r21, r20
    3144:	80 91 77 00 	lds	r24, 0x0077
    3148:	99 27       	eor	r25, r25
    314a:	aa 27       	eor	r26, r26
    314c:	bb 27       	eor	r27, r27
    314e:	dc 01       	movw	r26, r24
    3150:	99 27       	eor	r25, r25
    3152:	88 27       	eor	r24, r24
    3154:	86 0f       	add	r24, r22
    3156:	91 1d       	adc	r25, r1
    3158:	a1 1d       	adc	r26, r1
    315a:	b1 1d       	adc	r27, r1
    315c:	28 0f       	add	r18, r24
    315e:	39 1f       	adc	r19, r25
    3160:	4a 1f       	adc	r20, r26
    3162:	5b 1f       	adc	r21, r27
    3164:	22 0f       	add	r18, r18
    3166:	33 1f       	adc	r19, r19
    3168:	44 1f       	adc	r20, r20
    316a:	55 1f       	adc	r21, r21
    316c:	20 93 68 00 	sts	0x0068, r18
    3170:	30 93 69 00 	sts	0x0069, r19
    3174:	40 93 6a 00 	sts	0x006A, r20
    3178:	50 93 6b 00 	sts	0x006B, r21
	if(rx_buf[6]&0x80)
    317c:	80 91 76 00 	lds	r24, 0x0076
    3180:	87 ff       	sbrs	r24, 7
    3182:	03 c0       	rjmp	.+6      	; 0x318a <cmdloadaddress+0x74>
		extended_address=1;									//bit 31 is true so extended read should executed
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	80 93 6e 00 	sts	0x006E, r24
	
	tx_buf[5] = CMD_LOAD_ADDRESS;
    318a:	86 e0       	ldi	r24, 0x06	; 6
    318c:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6] = STATUS_CMD_OK;
    3190:	10 92 89 01 	sts	0x0189, r1
    3194:	08 95       	ret

00003196 <cmdreadflashisp>:
	
}
void cmdreadflashisp(void)
{
    3196:	ff 92       	push	r15
    3198:	0f 93       	push	r16
    319a:	1f 93       	push	r17
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
	int j,k;
	k=rx_buf[6]*256+rx_buf[7];
    31a0:	80 91 76 00 	lds	r24, 0x0076
    31a4:	99 27       	eor	r25, r25
    31a6:	f8 2f       	mov	r31, r24
    31a8:	ee 27       	eor	r30, r30
    31aa:	80 91 77 00 	lds	r24, 0x0077
    31ae:	e8 0f       	add	r30, r24
    31b0:	f1 1d       	adc	r31, r1
	
	j=k+3;	
    31b2:	9f 01       	movw	r18, r30
    31b4:	2d 5f       	subi	r18, 0xFD	; 253
    31b6:	3f 4f       	sbci	r19, 0xFF	; 255
	tx_buf[messagesize1]=(unsigned char) (j >> 8);  		// set message length
    31b8:	83 2f       	mov	r24, r19
    31ba:	99 27       	eor	r25, r25
    31bc:	87 fd       	sbrc	r24, 7
    31be:	9a 95       	dec	r25
    31c0:	80 93 85 01 	sts	0x0185, r24
	tx_buf[messagesize0]=(unsigned char) (j & 0xFF);
    31c4:	20 93 86 01 	sts	0x0186, r18

	tx_buf[5] = CMD_READ_FLASH_ISP;
    31c8:	84 e1       	ldi	r24, 0x14	; 20
    31ca:	80 93 88 01 	sts	0x0188, r24
	tx_buf[6] = STATUS_CMD_OK;
    31ce:	10 92 89 01 	sts	0x0189, r1
	
	if(extended_address)									//flash with large memory
    31d2:	80 91 6e 00 	lds	r24, 0x006E
    31d6:	88 23       	and	r24, r24
    31d8:	91 f4       	brne	.+36     	; 0x31fe <cmdreadflashisp+0x68>
	{
		spi(0x4d);
		spi(0);
		spi(address_flash>>16);
		spi(0);
	}

	
	for(j=0;j<k;j+=2)
	{
		spi(rx_buf[8]);
    31da:	00 91 78 00 	lds	r16, 0x0078
		spi(address_flash>>8);
		spi(address_flash);
		tx_buf[j+7]=spi(0xff);
	
		spi(rx_buf[8]|8);
    31de:	88 e0       	ldi	r24, 0x08	; 8
    31e0:	f8 2e       	mov	r15, r24
    31e2:	f0 2a       	or	r15, r16
    31e4:	20 91 68 00 	lds	r18, 0x0068
    31e8:	30 91 69 00 	lds	r19, 0x0069
    31ec:	40 91 6a 00 	lds	r20, 0x006A
    31f0:	50 91 6b 00 	lds	r21, 0x006B
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	c3 e8       	ldi	r28, 0x83	; 131
    31fa:	d1 e0       	ldi	r29, 0x01	; 1
    31fc:	4e c0       	rjmp	.+156    	; 0x329a <cmdreadflashisp+0x104>
		spi(address_flash>>8);
		spi(address_flash);
		tx_buf[j+8]=spi(0xff);
		
		address_flash++;
	}
	
	tx_buf[k+7] = STATUS_CMD_OK;
}

void cmdprogrameepromisp(void)
{
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;

	tx_buf[5] = CMD_PROGRAM_EEPROM_ISP;
	tx_buf[6] = STATUS_CMD_OK;

	int a,b;
	unsigned char c,d;
	
	b=rx_buf[6]*256+rx_buf[7];								//eeprom nData bytes

	for(a=0;a<b;a++)
	{
		spi(0xa0);									//read eeprom if differ then write
		spi(address_eeprom>>8);
		spi(address_eeprom);
		c=spi(0xff);
		
		d=rx_buf[a+15]^c;
		if(d)
		{
			spi(rx_buf[10]);									//write Program Memory
			spi(address_eeprom>>8);
			spi(address_eeprom);
			spi(rx_buf[a+15]);

			delay_ms(rx_buf[9]);
		}
		address_eeprom++;
	}

}

void cmdreadeepromisp(void)
{
	int j,k;
	k=rx_buf[6]*256+rx_buf[7];
	
	j=k+3;	
	tx_buf[messagesize1]=(unsigned char) (j >> 8);  		// set message length
	tx_buf[messagesize0]=(unsigned char) (j & 0xFF);

	tx_buf[5] = CMD_READ_EEPROM_ISP;
	tx_buf[6] = STATUS_CMD_OK;
	
	k=rx_buf[6]*256+rx_buf[7];
	for(j=0;j<k;j++)
	{
		spi(rx_buf[8]);
		spi(address_eeprom>>8);
		spi(address_eeprom);
		tx_buf[j+7]=spi(0xff);

		address_eeprom++;
	}
	tx_buf[k+7] = STATUS_CMD_OK;
}

void cmdosccal(void)
{
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=2;

	tx_buf[5] = CMD_OSCCAL;
	tx_buf[6] = STATUS_CMD_OK;
}
void delay_ms(int time)
{
	while(time--)
		_delay_ms(1);
}

char spi(char data)
{

	SPDR = data;
    31fe:	8d e4       	ldi	r24, 0x4D	; 77
    3200:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
    3202:	77 9b       	sbis	0x0e, 7	; 14
    3204:	fe cf       	rjmp	.-4      	; 0x3202 <cmdreadflashisp+0x6c>
	/* Return data register */
	return SPDR;
    3206:	8f b1       	in	r24, 0x0f	; 15
    3208:	1f b8       	out	0x0f, r1	; 15
    320a:	77 9b       	sbis	0x0e, 7	; 14
    320c:	fe cf       	rjmp	.-4      	; 0x320a <cmdreadflashisp+0x74>
    320e:	8f b1       	in	r24, 0x0f	; 15
    3210:	80 91 68 00 	lds	r24, 0x0068
    3214:	90 91 69 00 	lds	r25, 0x0069
    3218:	a0 91 6a 00 	lds	r26, 0x006A
    321c:	b0 91 6b 00 	lds	r27, 0x006B
    3220:	cd 01       	movw	r24, r26
    3222:	aa 27       	eor	r26, r26
    3224:	bb 27       	eor	r27, r27
    3226:	8f b9       	out	0x0f, r24	; 15
    3228:	77 9b       	sbis	0x0e, 7	; 14
    322a:	fe cf       	rjmp	.-4      	; 0x3228 <cmdreadflashisp+0x92>
    322c:	8f b1       	in	r24, 0x0f	; 15
    322e:	1f b8       	out	0x0f, r1	; 15
    3230:	77 9b       	sbis	0x0e, 7	; 14
    3232:	fe cf       	rjmp	.-4      	; 0x3230 <cmdreadflashisp+0x9a>
    3234:	8f b1       	in	r24, 0x0f	; 15
    3236:	d1 cf       	rjmp	.-94     	; 0x31da <cmdreadflashisp+0x44>
    3238:	0f b9       	out	0x0f, r16	; 15
    323a:	77 9b       	sbis	0x0e, 7	; 14
    323c:	fe cf       	rjmp	.-4      	; 0x323a <cmdreadflashisp+0xa4>
    323e:	8f b1       	in	r24, 0x0f	; 15
    3240:	bb 27       	eor	r27, r27
    3242:	a5 2f       	mov	r26, r21
    3244:	94 2f       	mov	r25, r20
    3246:	83 2f       	mov	r24, r19
    3248:	18 2f       	mov	r17, r24
    324a:	8f b9       	out	0x0f, r24	; 15
    324c:	77 9b       	sbis	0x0e, 7	; 14
    324e:	fe cf       	rjmp	.-4      	; 0x324c <cmdreadflashisp+0xb6>
    3250:	8f b1       	in	r24, 0x0f	; 15
    3252:	92 2f       	mov	r25, r18
    3254:	2f b9       	out	0x0f, r18	; 15
    3256:	77 9b       	sbis	0x0e, 7	; 14
    3258:	fe cf       	rjmp	.-4      	; 0x3256 <cmdreadflashisp+0xc0>
    325a:	8f b1       	in	r24, 0x0f	; 15
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	8f b9       	out	0x0f, r24	; 15
    3260:	77 9b       	sbis	0x0e, 7	; 14
    3262:	fe cf       	rjmp	.-4      	; 0x3260 <cmdreadflashisp+0xca>
    3264:	8f b1       	in	r24, 0x0f	; 15
    3266:	8f 83       	std	Y+7, r24	; 0x07
    3268:	ff b8       	out	0x0f, r15	; 15
    326a:	77 9b       	sbis	0x0e, 7	; 14
    326c:	fe cf       	rjmp	.-4      	; 0x326a <cmdreadflashisp+0xd4>
    326e:	8f b1       	in	r24, 0x0f	; 15
    3270:	1f b9       	out	0x0f, r17	; 15
    3272:	77 9b       	sbis	0x0e, 7	; 14
    3274:	fe cf       	rjmp	.-4      	; 0x3272 <cmdreadflashisp+0xdc>
    3276:	8f b1       	in	r24, 0x0f	; 15
    3278:	9f b9       	out	0x0f, r25	; 15
    327a:	77 9b       	sbis	0x0e, 7	; 14
    327c:	fe cf       	rjmp	.-4      	; 0x327a <cmdreadflashisp+0xe4>
    327e:	8f b1       	in	r24, 0x0f	; 15
    3280:	8f ef       	ldi	r24, 0xFF	; 255
    3282:	8f b9       	out	0x0f, r24	; 15
    3284:	77 9b       	sbis	0x0e, 7	; 14
    3286:	fe cf       	rjmp	.-4      	; 0x3284 <cmdreadflashisp+0xee>
    3288:	8f b1       	in	r24, 0x0f	; 15
    328a:	88 87       	std	Y+8, r24	; 0x08
    328c:	6e 5f       	subi	r22, 0xFE	; 254
    328e:	7f 4f       	sbci	r23, 0xFF	; 255
    3290:	2f 5f       	subi	r18, 0xFF	; 255
    3292:	3f 4f       	sbci	r19, 0xFF	; 255
    3294:	4f 4f       	sbci	r20, 0xFF	; 255
    3296:	5f 4f       	sbci	r21, 0xFF	; 255
    3298:	22 96       	adiw	r28, 0x02	; 2
    329a:	6e 17       	cp	r22, r30
    329c:	7f 07       	cpc	r23, r31
    329e:	64 f2       	brlt	.-104    	; 0x3238 <cmdreadflashisp+0xa2>
    32a0:	20 93 68 00 	sts	0x0068, r18
    32a4:	30 93 69 00 	sts	0x0069, r19
    32a8:	40 93 6a 00 	sts	0x006A, r20
    32ac:	50 93 6b 00 	sts	0x006B, r21
    32b0:	ed 57       	subi	r30, 0x7D	; 125
    32b2:	fe 4f       	sbci	r31, 0xFE	; 254
    32b4:	17 82       	std	Z+7, r1	; 0x07
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	1f 91       	pop	r17
    32bc:	0f 91       	pop	r16
    32be:	ff 90       	pop	r15
    32c0:	08 95       	ret

000032c2 <cmdreadeepromisp>:
    32c2:	80 91 76 00 	lds	r24, 0x0076
    32c6:	99 27       	eor	r25, r25
    32c8:	f8 2f       	mov	r31, r24
    32ca:	ee 27       	eor	r30, r30
    32cc:	80 91 77 00 	lds	r24, 0x0077
    32d0:	e8 0f       	add	r30, r24
    32d2:	f1 1d       	adc	r31, r1
    32d4:	9f 01       	movw	r18, r30
    32d6:	2d 5f       	subi	r18, 0xFD	; 253
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	83 2f       	mov	r24, r19
    32dc:	99 27       	eor	r25, r25
    32de:	87 fd       	sbrc	r24, 7
    32e0:	9a 95       	dec	r25
    32e2:	80 93 85 01 	sts	0x0185, r24
    32e6:	20 93 86 01 	sts	0x0186, r18
    32ea:	86 e1       	ldi	r24, 0x16	; 22
    32ec:	80 93 88 01 	sts	0x0188, r24
    32f0:	10 92 89 01 	sts	0x0189, r1
    32f4:	60 91 78 00 	lds	r22, 0x0078
    32f8:	20 91 6c 00 	lds	r18, 0x006C
    32fc:	30 91 6d 00 	lds	r19, 0x006D
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	aa e8       	ldi	r26, 0x8A	; 138
    3306:	b1 e0       	ldi	r27, 0x01	; 1
    3308:	7f ef       	ldi	r23, 0xFF	; 255
    330a:	17 c0       	rjmp	.+46     	; 0x333a <cmdreadeepromisp+0x78>
    330c:	6f b9       	out	0x0f, r22	; 15
    330e:	77 9b       	sbis	0x0e, 7	; 14
    3310:	fe cf       	rjmp	.-4      	; 0x330e <cmdreadeepromisp+0x4c>
    3312:	8f b1       	in	r24, 0x0f	; 15
    3314:	83 2f       	mov	r24, r19
    3316:	99 27       	eor	r25, r25
    3318:	8f b9       	out	0x0f, r24	; 15
    331a:	77 9b       	sbis	0x0e, 7	; 14
    331c:	fe cf       	rjmp	.-4      	; 0x331a <cmdreadeepromisp+0x58>
    331e:	8f b1       	in	r24, 0x0f	; 15
    3320:	2f b9       	out	0x0f, r18	; 15
    3322:	77 9b       	sbis	0x0e, 7	; 14
    3324:	fe cf       	rjmp	.-4      	; 0x3322 <cmdreadeepromisp+0x60>
    3326:	8f b1       	in	r24, 0x0f	; 15
    3328:	7f b9       	out	0x0f, r23	; 15
    332a:	77 9b       	sbis	0x0e, 7	; 14
    332c:	fe cf       	rjmp	.-4      	; 0x332a <cmdreadeepromisp+0x68>
    332e:	8f b1       	in	r24, 0x0f	; 15
    3330:	8d 93       	st	X+, r24
    3332:	4f 5f       	subi	r20, 0xFF	; 255
    3334:	5f 4f       	sbci	r21, 0xFF	; 255
    3336:	2f 5f       	subi	r18, 0xFF	; 255
    3338:	3f 4f       	sbci	r19, 0xFF	; 255
    333a:	4e 17       	cp	r20, r30
    333c:	5f 07       	cpc	r21, r31
    333e:	34 f3       	brlt	.-52     	; 0x330c <cmdreadeepromisp+0x4a>
    3340:	30 93 6d 00 	sts	0x006D, r19
    3344:	20 93 6c 00 	sts	0x006C, r18
    3348:	ed 57       	subi	r30, 0x7D	; 125
    334a:	fe 4f       	sbci	r31, 0xFE	; 254
    334c:	17 82       	std	Z+7, r1	; 0x07
    334e:	08 95       	ret

00003350 <cmdosccal>:
    3350:	10 92 85 01 	sts	0x0185, r1
    3354:	82 e0       	ldi	r24, 0x02	; 2
    3356:	80 93 86 01 	sts	0x0186, r24
    335a:	85 e0       	ldi	r24, 0x05	; 5
    335c:	80 93 88 01 	sts	0x0188, r24
    3360:	10 92 89 01 	sts	0x0189, r1
    3364:	08 95       	ret

00003366 <delay_ms>:
    3366:	9c 01       	movw	r18, r24
    3368:	e3 e3       	ldi	r30, 0x33	; 51
    336a:	f7 e0       	ldi	r31, 0x07	; 7
    336c:	03 c0       	rjmp	.+6      	; 0x3374 <delay_ms+0xe>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336e:	cf 01       	movw	r24, r30
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <delay_ms+0xa>
    3374:	21 50       	subi	r18, 0x01	; 1
    3376:	30 40       	sbci	r19, 0x00	; 0
    3378:	8f ef       	ldi	r24, 0xFF	; 255
    337a:	2f 3f       	cpi	r18, 0xFF	; 255
    337c:	38 07       	cpc	r19, r24
    337e:	b9 f7       	brne	.-18     	; 0x336e <delay_ms+0x8>
    3380:	08 95       	ret

00003382 <cmdprogrameepromisp>:
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	10 92 85 01 	sts	0x0185, r1
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	80 93 86 01 	sts	0x0186, r24
    3398:	85 e1       	ldi	r24, 0x15	; 21
    339a:	80 93 88 01 	sts	0x0188, r24
    339e:	10 92 89 01 	sts	0x0189, r1
    33a2:	80 91 76 00 	lds	r24, 0x0076
    33a6:	99 27       	eor	r25, r25
    33a8:	d8 2f       	mov	r29, r24
    33aa:	cc 27       	eor	r28, r28
    33ac:	80 91 77 00 	lds	r24, 0x0077
    33b0:	c8 0f       	add	r28, r24
    33b2:	d1 1d       	adc	r29, r1
    33b4:	ee 24       	eor	r14, r14
    33b6:	ff 24       	eor	r15, r15
    33b8:	0f e7       	ldi	r16, 0x7F	; 127
    33ba:	10 e0       	ldi	r17, 0x00	; 0
    33bc:	43 c0       	rjmp	.+134    	; 0x3444 <cmdprogrameepromisp+0xc2>
    33be:	80 ea       	ldi	r24, 0xA0	; 160
    33c0:	8f b9       	out	0x0f, r24	; 15
    33c2:	77 9b       	sbis	0x0e, 7	; 14
    33c4:	fe cf       	rjmp	.-4      	; 0x33c2 <cmdprogrameepromisp+0x40>
    33c6:	8f b1       	in	r24, 0x0f	; 15
    33c8:	20 91 6c 00 	lds	r18, 0x006C
    33cc:	30 91 6d 00 	lds	r19, 0x006D
    33d0:	83 2f       	mov	r24, r19
    33d2:	99 27       	eor	r25, r25
    33d4:	58 2f       	mov	r21, r24
    33d6:	8f b9       	out	0x0f, r24	; 15
    33d8:	77 9b       	sbis	0x0e, 7	; 14
    33da:	fe cf       	rjmp	.-4      	; 0x33d8 <cmdprogrameepromisp+0x56>
    33dc:	8f b1       	in	r24, 0x0f	; 15
    33de:	42 2f       	mov	r20, r18
    33e0:	2f b9       	out	0x0f, r18	; 15
    33e2:	77 9b       	sbis	0x0e, 7	; 14
    33e4:	fe cf       	rjmp	.-4      	; 0x33e2 <cmdprogrameepromisp+0x60>
    33e6:	8f b1       	in	r24, 0x0f	; 15
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	8f b9       	out	0x0f, r24	; 15
    33ec:	77 9b       	sbis	0x0e, 7	; 14
    33ee:	fe cf       	rjmp	.-4      	; 0x33ec <cmdprogrameepromisp+0x6a>
    33f0:	8f b1       	in	r24, 0x0f	; 15
    33f2:	f8 01       	movw	r30, r16
    33f4:	90 81       	ld	r25, Z
    33f6:	98 17       	cp	r25, r24
    33f8:	b9 f0       	breq	.+46     	; 0x3428 <cmdprogrameepromisp+0xa6>
    33fa:	80 91 7a 00 	lds	r24, 0x007A
    33fe:	8f b9       	out	0x0f, r24	; 15
    3400:	77 9b       	sbis	0x0e, 7	; 14
    3402:	fe cf       	rjmp	.-4      	; 0x3400 <cmdprogrameepromisp+0x7e>
    3404:	8f b1       	in	r24, 0x0f	; 15
    3406:	5f b9       	out	0x0f, r21	; 15
    3408:	77 9b       	sbis	0x0e, 7	; 14
    340a:	fe cf       	rjmp	.-4      	; 0x3408 <cmdprogrameepromisp+0x86>
    340c:	8f b1       	in	r24, 0x0f	; 15
    340e:	4f b9       	out	0x0f, r20	; 15
    3410:	77 9b       	sbis	0x0e, 7	; 14
    3412:	fe cf       	rjmp	.-4      	; 0x3410 <cmdprogrameepromisp+0x8e>
    3414:	8f b1       	in	r24, 0x0f	; 15
    3416:	9f b9       	out	0x0f, r25	; 15
    3418:	77 9b       	sbis	0x0e, 7	; 14
    341a:	fe cf       	rjmp	.-4      	; 0x3418 <cmdprogrameepromisp+0x96>
    341c:	8f b1       	in	r24, 0x0f	; 15
    341e:	80 91 79 00 	lds	r24, 0x0079
    3422:	99 27       	eor	r25, r25
    3424:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
    3428:	80 91 6c 00 	lds	r24, 0x006C
    342c:	90 91 6d 00 	lds	r25, 0x006D
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	90 93 6d 00 	sts	0x006D, r25
    3436:	80 93 6c 00 	sts	0x006C, r24
    343a:	08 94       	sec
    343c:	e1 1c       	adc	r14, r1
    343e:	f1 1c       	adc	r15, r1
    3440:	0f 5f       	subi	r16, 0xFF	; 255
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
    3444:	ec 16       	cp	r14, r28
    3446:	fd 06       	cpc	r15, r29
    3448:	0c f4       	brge	.+2      	; 0x344c <cmdprogrameepromisp+0xca>
    344a:	b9 cf       	rjmp	.-142    	; 0x33be <cmdprogrameepromisp+0x3c>
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	ff 90       	pop	r15
    3456:	ef 90       	pop	r14
    3458:	08 95       	ret

0000345a <cmdprogramflashisp>:
    345a:	cf 92       	push	r12
    345c:	df 92       	push	r13
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	10 92 85 01 	sts	0x0185, r1
    346e:	82 e0       	ldi	r24, 0x02	; 2
    3470:	80 93 86 01 	sts	0x0186, r24
    3474:	83 e1       	ldi	r24, 0x13	; 19
    3476:	80 93 88 01 	sts	0x0188, r24
    347a:	10 92 89 01 	sts	0x0189, r1
    347e:	80 91 6e 00 	lds	r24, 0x006E
    3482:	88 23       	and	r24, r24
    3484:	e1 f0       	breq	.+56     	; 0x34be <cmdprogramflashisp+0x64>
    3486:	8d e4       	ldi	r24, 0x4D	; 77
    3488:	8f b9       	out	0x0f, r24	; 15
    348a:	77 9b       	sbis	0x0e, 7	; 14
    348c:	fe cf       	rjmp	.-4      	; 0x348a <cmdprogramflashisp+0x30>
    348e:	8f b1       	in	r24, 0x0f	; 15
    3490:	1f b8       	out	0x0f, r1	; 15
    3492:	77 9b       	sbis	0x0e, 7	; 14
    3494:	fe cf       	rjmp	.-4      	; 0x3492 <cmdprogramflashisp+0x38>
    3496:	8f b1       	in	r24, 0x0f	; 15
    3498:	80 91 68 00 	lds	r24, 0x0068
    349c:	90 91 69 00 	lds	r25, 0x0069
    34a0:	a0 91 6a 00 	lds	r26, 0x006A
    34a4:	b0 91 6b 00 	lds	r27, 0x006B
    34a8:	cd 01       	movw	r24, r26
    34aa:	aa 27       	eor	r26, r26
    34ac:	bb 27       	eor	r27, r27
    34ae:	8f b9       	out	0x0f, r24	; 15
    34b0:	77 9b       	sbis	0x0e, 7	; 14
    34b2:	fe cf       	rjmp	.-4      	; 0x34b0 <cmdprogramflashisp+0x56>
    34b4:	8f b1       	in	r24, 0x0f	; 15
    34b6:	1f b8       	out	0x0f, r1	; 15
    34b8:	77 9b       	sbis	0x0e, 7	; 14
    34ba:	fe cf       	rjmp	.-4      	; 0x34b8 <cmdprogramflashisp+0x5e>
    34bc:	8f b1       	in	r24, 0x0f	; 15
    34be:	80 91 76 00 	lds	r24, 0x0076
    34c2:	99 27       	eor	r25, r25
    34c4:	78 2f       	mov	r23, r24
    34c6:	66 27       	eor	r22, r22
    34c8:	80 91 77 00 	lds	r24, 0x0077
    34cc:	68 0f       	add	r22, r24
    34ce:	71 1d       	adc	r23, r1
    34d0:	e0 90 68 00 	lds	r14, 0x0068
    34d4:	f0 90 69 00 	lds	r15, 0x0069
    34d8:	00 91 6a 00 	lds	r16, 0x006A
    34dc:	10 91 6b 00 	lds	r17, 0x006B
    34e0:	d0 90 7a 00 	lds	r13, 0x007A
    34e4:	b8 e0       	ldi	r27, 0x08	; 8
    34e6:	cb 2e       	mov	r12, r27
    34e8:	cd 28       	or	r12, r13
    34ea:	a8 01       	movw	r20, r16
    34ec:	97 01       	movw	r18, r14
    34ee:	c0 e0       	ldi	r28, 0x00	; 0
    34f0:	d0 e0       	ldi	r29, 0x00	; 0
    34f2:	e0 e7       	ldi	r30, 0x70	; 112
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	2d c0       	rjmp	.+90     	; 0x3552 <cmdprogramflashisp+0xf8>
    34f8:	df b8       	out	0x0f, r13	; 15
    34fa:	77 9b       	sbis	0x0e, 7	; 14
    34fc:	fe cf       	rjmp	.-4      	; 0x34fa <cmdprogramflashisp+0xa0>
    34fe:	8f b1       	in	r24, 0x0f	; 15
    3500:	bb 27       	eor	r27, r27
    3502:	a5 2f       	mov	r26, r21
    3504:	94 2f       	mov	r25, r20
    3506:	83 2f       	mov	r24, r19
    3508:	8f b9       	out	0x0f, r24	; 15
    350a:	77 9b       	sbis	0x0e, 7	; 14
    350c:	fe cf       	rjmp	.-4      	; 0x350a <cmdprogramflashisp+0xb0>
    350e:	8f b1       	in	r24, 0x0f	; 15
    3510:	92 2f       	mov	r25, r18
    3512:	2f b9       	out	0x0f, r18	; 15
    3514:	77 9b       	sbis	0x0e, 7	; 14
    3516:	fe cf       	rjmp	.-4      	; 0x3514 <cmdprogramflashisp+0xba>
    3518:	8f b1       	in	r24, 0x0f	; 15
    351a:	87 85       	ldd	r24, Z+15	; 0x0f
    351c:	8f b9       	out	0x0f, r24	; 15
    351e:	77 9b       	sbis	0x0e, 7	; 14
    3520:	fe cf       	rjmp	.-4      	; 0x351e <cmdprogramflashisp+0xc4>
    3522:	8f b1       	in	r24, 0x0f	; 15
    3524:	cf b8       	out	0x0f, r12	; 15
    3526:	77 9b       	sbis	0x0e, 7	; 14
    3528:	fe cf       	rjmp	.-4      	; 0x3526 <cmdprogramflashisp+0xcc>
    352a:	8f b1       	in	r24, 0x0f	; 15
    352c:	1f b8       	out	0x0f, r1	; 15
    352e:	77 9b       	sbis	0x0e, 7	; 14
    3530:	fe cf       	rjmp	.-4      	; 0x352e <cmdprogramflashisp+0xd4>
    3532:	8f b1       	in	r24, 0x0f	; 15
    3534:	9f b9       	out	0x0f, r25	; 15
    3536:	77 9b       	sbis	0x0e, 7	; 14
    3538:	fe cf       	rjmp	.-4      	; 0x3536 <cmdprogramflashisp+0xdc>
    353a:	8f b1       	in	r24, 0x0f	; 15
    353c:	80 89       	ldd	r24, Z+16	; 0x10
    353e:	8f b9       	out	0x0f, r24	; 15
    3540:	77 9b       	sbis	0x0e, 7	; 14
    3542:	fe cf       	rjmp	.-4      	; 0x3540 <cmdprogramflashisp+0xe6>
    3544:	8f b1       	in	r24, 0x0f	; 15
    3546:	22 96       	adiw	r28, 0x02	; 2
    3548:	2f 5f       	subi	r18, 0xFF	; 255
    354a:	3f 4f       	sbci	r19, 0xFF	; 255
    354c:	4f 4f       	sbci	r20, 0xFF	; 255
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	32 96       	adiw	r30, 0x02	; 2
    3552:	c6 17       	cp	r28, r22
    3554:	d7 07       	cpc	r29, r23
    3556:	84 f2       	brlt	.-96     	; 0x34f8 <cmdprogramflashisp+0x9e>
    3558:	20 93 68 00 	sts	0x0068, r18
    355c:	30 93 69 00 	sts	0x0069, r19
    3560:	40 93 6a 00 	sts	0x006A, r20
    3564:	50 93 6b 00 	sts	0x006B, r21
    3568:	80 91 78 00 	lds	r24, 0x0078
    356c:	87 ff       	sbrs	r24, 7
    356e:	1d c0       	rjmp	.+58     	; 0x35aa <cmdprogramflashisp+0x150>
    3570:	80 91 7b 00 	lds	r24, 0x007B
    3574:	8f b9       	out	0x0f, r24	; 15
    3576:	77 9b       	sbis	0x0e, 7	; 14
    3578:	fe cf       	rjmp	.-4      	; 0x3576 <cmdprogramflashisp+0x11c>
    357a:	8f b1       	in	r24, 0x0f	; 15
    357c:	bb 27       	eor	r27, r27
    357e:	17 fd       	sbrc	r17, 7
    3580:	ba 95       	dec	r27
    3582:	a1 2f       	mov	r26, r17
    3584:	90 2f       	mov	r25, r16
    3586:	8f 2d       	mov	r24, r15
    3588:	8f b9       	out	0x0f, r24	; 15
    358a:	77 9b       	sbis	0x0e, 7	; 14
    358c:	fe cf       	rjmp	.-4      	; 0x358a <cmdprogramflashisp+0x130>
    358e:	8f b1       	in	r24, 0x0f	; 15
    3590:	ef b8       	out	0x0f, r14	; 15
    3592:	77 9b       	sbis	0x0e, 7	; 14
    3594:	fe cf       	rjmp	.-4      	; 0x3592 <cmdprogramflashisp+0x138>
    3596:	8f b1       	in	r24, 0x0f	; 15
    3598:	1f b8       	out	0x0f, r1	; 15
    359a:	77 9b       	sbis	0x0e, 7	; 14
    359c:	fe cf       	rjmp	.-4      	; 0x359a <cmdprogramflashisp+0x140>
    359e:	8f b1       	in	r24, 0x0f	; 15
    35a0:	80 91 79 00 	lds	r24, 0x0079
    35a4:	99 27       	eor	r25, r25
    35a6:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	1f 91       	pop	r17
    35b0:	0f 91       	pop	r16
    35b2:	ff 90       	pop	r15
    35b4:	ef 90       	pop	r14
    35b6:	df 90       	pop	r13
    35b8:	cf 90       	pop	r12
    35ba:	08 95       	ret

000035bc <cmdchiperaseisp>:
    35bc:	10 92 85 01 	sts	0x0185, r1
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	80 93 86 01 	sts	0x0186, r24
    35c6:	82 e1       	ldi	r24, 0x12	; 18
    35c8:	80 93 88 01 	sts	0x0188, r24
    35cc:	10 92 89 01 	sts	0x0189, r1
    35d0:	80 91 78 00 	lds	r24, 0x0078
    35d4:	8f b9       	out	0x0f, r24	; 15
    35d6:	77 9b       	sbis	0x0e, 7	; 14
    35d8:	fe cf       	rjmp	.-4      	; 0x35d6 <cmdchiperaseisp+0x1a>
    35da:	8f b1       	in	r24, 0x0f	; 15
    35dc:	80 91 79 00 	lds	r24, 0x0079
    35e0:	8f b9       	out	0x0f, r24	; 15
    35e2:	77 9b       	sbis	0x0e, 7	; 14
    35e4:	fe cf       	rjmp	.-4      	; 0x35e2 <cmdchiperaseisp+0x26>
    35e6:	8f b1       	in	r24, 0x0f	; 15
    35e8:	80 91 7a 00 	lds	r24, 0x007A
    35ec:	8f b9       	out	0x0f, r24	; 15
    35ee:	77 9b       	sbis	0x0e, 7	; 14
    35f0:	fe cf       	rjmp	.-4      	; 0x35ee <cmdchiperaseisp+0x32>
    35f2:	8f b1       	in	r24, 0x0f	; 15
    35f4:	80 91 7b 00 	lds	r24, 0x007B
    35f8:	8f b9       	out	0x0f, r24	; 15
    35fa:	77 9b       	sbis	0x0e, 7	; 14
    35fc:	fe cf       	rjmp	.-4      	; 0x35fa <cmdchiperaseisp+0x3e>
    35fe:	8f b1       	in	r24, 0x0f	; 15
    3600:	80 91 76 00 	lds	r24, 0x0076
    3604:	99 27       	eor	r25, r25
    3606:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
    360a:	08 95       	ret

0000360c <spi>:
    360c:	8f b9       	out	0x0f, r24	; 15
    360e:	77 9b       	sbis	0x0e, 7	; 14
    3610:	fe cf       	rjmp	.-4      	; 0x360e <spi+0x2>
    3612:	8f b1       	in	r24, 0x0f	; 15
}
    3614:	99 27       	eor	r25, r25
    3616:	08 95       	ret

00003618 <EnterProgmodeIsp>:

void EnterProgmodeIsp(void)
{
    3618:	1f 93       	push	r17
	char tmp;
	
	
	tx_buf[5] = CMD_ENTER_PROGMODE_ISP;
    361a:	80 e1       	ldi	r24, 0x10	; 16
    361c:	80 93 88 01 	sts	0x0188, r24
	
	
	DDRB|=0xB0;												//set spi pins out put
    3620:	87 b3       	in	r24, 0x17	; 23
    3622:	80 6b       	ori	r24, 0xB0	; 176
    3624:	87 bb       	out	0x17, r24	; 23
	reset_DDR|=_BV(reset);
    3626:	b9 9a       	sbi	0x17, 1	; 23

	sck_port &=~_BV(sck);								//clear sck
    3628:	c7 98       	cbi	0x18, 7	; 24
	
	delay_ms(rx_buf[7]+rx_buf[8]);	
    362a:	80 91 77 00 	lds	r24, 0x0077
    362e:	90 91 78 00 	lds	r25, 0x0078
    3632:	89 0f       	add	r24, r25
    3634:	91 2d       	mov	r25, r1
    3636:	91 1d       	adc	r25, r1
    3638:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
	if(rx_buf[11]==0x53)										//this is avr set reset
    363c:	80 91 7b 00 	lds	r24, 0x007B
    3640:	83 35       	cpi	r24, 0x53	; 83
    3642:	c9 f5       	brne	.+114    	; 0x36b6 <EnterProgmodeIsp+0x9e>
	{
		
		reset_PORT &= ~_BV(reset);									//reset 0
    3644:	c1 98       	cbi	0x18, 1	; 24
		
		delay_ms(rx_buf[8]);
    3646:	80 91 78 00 	lds	r24, 0x0078
    364a:	99 27       	eor	r25, r25
    364c:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		delay_ms(10);
    3650:	8a e0       	ldi	r24, 0x0A	; 10
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
	
		spi(rx_buf[13]);
    3658:	80 91 7d 00 	lds	r24, 0x007D
    365c:	8f b9       	out	0x0f, r24	; 15
    365e:	77 9b       	sbis	0x0e, 7	; 14
    3660:	fe cf       	rjmp	.-4      	; 0x365e <EnterProgmodeIsp+0x46>
    3662:	8f b1       	in	r24, 0x0f	; 15
		delay_ms(rx_buf[10]);
    3664:	80 91 7a 00 	lds	r24, 0x007A
    3668:	99 27       	eor	r25, r25
    366a:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		spi(rx_buf[14]);
    366e:	80 91 7e 00 	lds	r24, 0x007E
    3672:	8f b9       	out	0x0f, r24	; 15
    3674:	77 9b       	sbis	0x0e, 7	; 14
    3676:	fe cf       	rjmp	.-4      	; 0x3674 <EnterProgmodeIsp+0x5c>
    3678:	8f b1       	in	r24, 0x0f	; 15
		delay_ms(rx_buf[10]);
    367a:	80 91 7a 00 	lds	r24, 0x007A
    367e:	99 27       	eor	r25, r25
    3680:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		tmp=spi(rx_buf[15]);
    3684:	80 91 7f 00 	lds	r24, 0x007F
    3688:	8f b9       	out	0x0f, r24	; 15
    368a:	77 9b       	sbis	0x0e, 7	; 14
    368c:	fe cf       	rjmp	.-4      	; 0x368a <EnterProgmodeIsp+0x72>
    368e:	1f b1       	in	r17, 0x0f	; 15
		delay_ms(rx_buf[10]);
    3690:	80 91 7a 00 	lds	r24, 0x007A
    3694:	99 27       	eor	r25, r25
    3696:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		spi(rx_buf[16]);
    369a:	80 91 80 00 	lds	r24, 0x0080
    369e:	8f b9       	out	0x0f, r24	; 15
    36a0:	77 9b       	sbis	0x0e, 7	; 14
    36a2:	fe cf       	rjmp	.-4      	; 0x36a0 <EnterProgmodeIsp+0x88>
    36a4:	8f b1       	in	r24, 0x0f	; 15
		
		if(tmp==0x53)
    36a6:	13 35       	cpi	r17, 0x53	; 83
    36a8:	19 f4       	brne	.+6      	; 0x36b0 <EnterProgmodeIsp+0x98>
		{
			tx_buf[6] = STATUS_CMD_OK; 
    36aa:	10 92 89 01 	sts	0x0189, r1
    36ae:	03 c0       	rjmp	.+6      	; 0x36b6 <EnterProgmodeIsp+0x9e>
		}
			
		else tx_buf[6] = STATUS_CMD_FAILED; 
    36b0:	80 ec       	ldi	r24, 0xC0	; 192
    36b2:	80 93 89 01 	sts	0x0189, r24
	}
	
	if(rx_buf[11]==0x69)										//this is 89s51 set reset
    36b6:	80 91 7b 00 	lds	r24, 0x007B
    36ba:	89 36       	cpi	r24, 0x69	; 105
    36bc:	c9 f5       	brne	.+114    	; 0x3730 <EnterProgmodeIsp+0x118>
	{
		reset_PORT |= _BV(reset);									//reset 1
    36be:	c1 9a       	sbi	0x18, 1	; 24
		delay_ms(rx_buf[8]);
    36c0:	80 91 78 00 	lds	r24, 0x0078
    36c4:	99 27       	eor	r25, r25
    36c6:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		delay_ms(10);
    36ca:	8a e0       	ldi	r24, 0x0A	; 10
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		
		
		spi(rx_buf[13]);
    36d2:	80 91 7d 00 	lds	r24, 0x007D
    36d6:	8f b9       	out	0x0f, r24	; 15
    36d8:	77 9b       	sbis	0x0e, 7	; 14
    36da:	fe cf       	rjmp	.-4      	; 0x36d8 <EnterProgmodeIsp+0xc0>
    36dc:	8f b1       	in	r24, 0x0f	; 15
		delay_ms(rx_buf[10]);
    36de:	80 91 7a 00 	lds	r24, 0x007A
    36e2:	99 27       	eor	r25, r25
    36e4:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		spi(rx_buf[14]);
    36e8:	80 91 7e 00 	lds	r24, 0x007E
    36ec:	8f b9       	out	0x0f, r24	; 15
    36ee:	77 9b       	sbis	0x0e, 7	; 14
    36f0:	fe cf       	rjmp	.-4      	; 0x36ee <EnterProgmodeIsp+0xd6>
    36f2:	8f b1       	in	r24, 0x0f	; 15
		delay_ms(rx_buf[10]);
    36f4:	80 91 7a 00 	lds	r24, 0x007A
    36f8:	99 27       	eor	r25, r25
    36fa:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		spi(rx_buf[15]);
    36fe:	80 91 7f 00 	lds	r24, 0x007F
    3702:	8f b9       	out	0x0f, r24	; 15
    3704:	77 9b       	sbis	0x0e, 7	; 14
    3706:	fe cf       	rjmp	.-4      	; 0x3704 <EnterProgmodeIsp+0xec>
    3708:	8f b1       	in	r24, 0x0f	; 15
		delay_ms(rx_buf[10]);
    370a:	80 91 7a 00 	lds	r24, 0x007A
    370e:	99 27       	eor	r25, r25
    3710:	0e 94 b3 19 	call	0x3366	; 0x3366 <delay_ms>
		tmp=spi(rx_buf[16]);
    3714:	80 91 80 00 	lds	r24, 0x0080
    3718:	8f b9       	out	0x0f, r24	; 15
    371a:	77 9b       	sbis	0x0e, 7	; 14
    371c:	fe cf       	rjmp	.-4      	; 0x371a <EnterProgmodeIsp+0x102>
    371e:	8f b1       	in	r24, 0x0f	; 15
		
		if(tmp==0x69)
    3720:	89 36       	cpi	r24, 0x69	; 105
    3722:	19 f4       	brne	.+6      	; 0x372a <EnterProgmodeIsp+0x112>
		{
			tx_buf[6] = STATUS_CMD_OK; 
    3724:	10 92 89 01 	sts	0x0189, r1
    3728:	03 c0       	rjmp	.+6      	; 0x3730 <EnterProgmodeIsp+0x118>
		}
		
		else tx_buf[6] = STATUS_CMD_FAILED; 
    372a:	80 ec       	ldi	r24, 0xC0	; 192
    372c:	80 93 89 01 	sts	0x0189, r24
    3730:	1f 91       	pop	r17
    3732:	08 95       	ret

00003734 <cmdEnterProgmodeIsp>:
    3734:	10 92 85 01 	sts	0x0185, r1
    3738:	82 e0       	ldi	r24, 0x02	; 2
    373a:	80 93 86 01 	sts	0x0186, r24
    373e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <EnterProgmodeIsp>
    3742:	08 95       	ret

00003744 <ReadfusebitIsp>:
	}
}
void ReadfusebitIsp(void)
{
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	24 97       	sbiw	r28, 0x04	; 4
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
	char k[4];
	
	
	tx_buf[messagesize1]=0;  		// set message length
    3758:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize0]=4;
    375c:	84 e0       	ldi	r24, 0x04	; 4
    375e:	80 93 86 01 	sts	0x0186, r24
	
	tx_buf[6] = STATUS_CMD_OK;
    3762:	10 92 89 01 	sts	0x0189, r1
	
	
	
	k[0]=spi(rx_buf[7]);
    3766:	80 91 77 00 	lds	r24, 0x0077
    376a:	8f b9       	out	0x0f, r24	; 15
    376c:	77 9b       	sbis	0x0e, 7	; 14
    376e:	fe cf       	rjmp	.-4      	; 0x376c <ReadfusebitIsp+0x28>
    3770:	3f b1       	in	r19, 0x0f	; 15
	k[1]=spi(rx_buf[8]);
    3772:	80 91 78 00 	lds	r24, 0x0078
    3776:	8f b9       	out	0x0f, r24	; 15
    3778:	77 9b       	sbis	0x0e, 7	; 14
    377a:	fe cf       	rjmp	.-4      	; 0x3778 <ReadfusebitIsp+0x34>
    377c:	2f b1       	in	r18, 0x0f	; 15
	k[2]=spi(rx_buf[9]);
    377e:	80 91 79 00 	lds	r24, 0x0079
    3782:	8f b9       	out	0x0f, r24	; 15
    3784:	77 9b       	sbis	0x0e, 7	; 14
    3786:	fe cf       	rjmp	.-4      	; 0x3784 <ReadfusebitIsp+0x40>
    3788:	9f b1       	in	r25, 0x0f	; 15
	k[3]=spi(rx_buf[10]);
    378a:	80 91 7a 00 	lds	r24, 0x007A
    378e:	8f b9       	out	0x0f, r24	; 15
    3790:	77 9b       	sbis	0x0e, 7	; 14
    3792:	fe cf       	rjmp	.-4      	; 0x3790 <ReadfusebitIsp+0x4c>
    3794:	8f b1       	in	r24, 0x0f	; 15
    3796:	39 83       	std	Y+1, r19	; 0x01
    3798:	2a 83       	std	Y+2, r18	; 0x02
    379a:	9b 83       	std	Y+3, r25	; 0x03
    379c:	8c 83       	std	Y+4, r24	; 0x04
	
	tx_buf[7]=k[rx_buf[6]-1];
    379e:	80 91 76 00 	lds	r24, 0x0076
    37a2:	fe 01       	movw	r30, r28
    37a4:	e8 0f       	add	r30, r24
    37a6:	f1 1d       	adc	r31, r1
    37a8:	80 81       	ld	r24, Z
    37aa:	80 93 8a 01 	sts	0x018A, r24
	tx_buf[8] = STATUS_CMD_OK;	
    37ae:	10 92 8b 01 	sts	0x018B, r1
    37b2:	24 96       	adiw	r28, 0x04	; 4
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	08 95       	ret

000037c4 <cmdreadfuseisp>:
    37c4:	88 e1       	ldi	r24, 0x18	; 24
    37c6:	80 93 88 01 	sts	0x0188, r24
    37ca:	0e 94 a2 1b 	call	0x3744	; 0x3744 <ReadfusebitIsp>
    37ce:	08 95       	ret

000037d0 <cmdreadlockisp>:
    37d0:	8a e1       	ldi	r24, 0x1A	; 26
    37d2:	80 93 88 01 	sts	0x0188, r24
    37d6:	0e 94 a2 1b 	call	0x3744	; 0x3744 <ReadfusebitIsp>
    37da:	08 95       	ret

000037dc <cmdreadosccalisp>:
    37dc:	8c e1       	ldi	r24, 0x1C	; 28
    37de:	80 93 88 01 	sts	0x0188, r24
    37e2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <ReadfusebitIsp>
    37e6:	08 95       	ret

000037e8 <cmdReadSignatureIsp>:
    37e8:	8b e1       	ldi	r24, 0x1B	; 27
    37ea:	80 93 88 01 	sts	0x0188, r24
    37ee:	0e 94 a2 1b 	call	0x3744	; 0x3744 <ReadfusebitIsp>
    37f2:	08 95       	ret

000037f4 <programfuseisp>:

}

void programfuseisp(void)
{
    37f4:	10 92 85 01 	sts	0x0185, r1
	tx_buf[messagesize1]=0;  		// set message length
	tx_buf[messagesize0]=3;
    37f8:	83 e0       	ldi	r24, 0x03	; 3
    37fa:	80 93 86 01 	sts	0x0186, r24

	spi(rx_buf[6]);
    37fe:	80 91 76 00 	lds	r24, 0x0076
    3802:	8f b9       	out	0x0f, r24	; 15
    3804:	77 9b       	sbis	0x0e, 7	; 14
    3806:	fe cf       	rjmp	.-4      	; 0x3804 <programfuseisp+0x10>
    3808:	8f b1       	in	r24, 0x0f	; 15
	spi(rx_buf[7]);
    380a:	80 91 77 00 	lds	r24, 0x0077
    380e:	8f b9       	out	0x0f, r24	; 15
    3810:	77 9b       	sbis	0x0e, 7	; 14
    3812:	fe cf       	rjmp	.-4      	; 0x3810 <programfuseisp+0x1c>
    3814:	8f b1       	in	r24, 0x0f	; 15
	spi(rx_buf[8]);
    3816:	80 91 78 00 	lds	r24, 0x0078
    381a:	8f b9       	out	0x0f, r24	; 15
    381c:	77 9b       	sbis	0x0e, 7	; 14
    381e:	fe cf       	rjmp	.-4      	; 0x381c <programfuseisp+0x28>
    3820:	8f b1       	in	r24, 0x0f	; 15
	spi(rx_buf[9]);
    3822:	80 91 79 00 	lds	r24, 0x0079
    3826:	8f b9       	out	0x0f, r24	; 15
    3828:	77 9b       	sbis	0x0e, 7	; 14
    382a:	fe cf       	rjmp	.-4      	; 0x3828 <programfuseisp+0x34>
    382c:	8f b1       	in	r24, 0x0f	; 15

	tx_buf[6] = STATUS_CMD_OK;
    382e:	10 92 89 01 	sts	0x0189, r1
	tx_buf[7] = STATUS_CMD_OK;
    3832:	10 92 8a 01 	sts	0x018A, r1
    3836:	08 95       	ret

00003838 <cmdprogramfuseisp>:
    3838:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <programfuseisp>
    383c:	87 e1       	ldi	r24, 0x17	; 23
    383e:	80 93 88 01 	sts	0x0188, r24
    3842:	08 95       	ret

00003844 <cmdprogramlockisp>:
    3844:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <programfuseisp>
    3848:	89 e1       	ldi	r24, 0x19	; 25
    384a:	80 93 88 01 	sts	0x0188, r24
    384e:	08 95       	ret

00003850 <SetParameter>:

}

void SetParameter(void)
{
    3850:	80 91 76 00 	lds	r24, 0x0076
    3854:	87 39       	cpi	r24, 0x97	; 151
    3856:	69 f0       	breq	.+26     	; 0x3872 <SetParameter+0x22>
	switch(rx_buf[6])
    3858:	88 39       	cpi	r24, 0x98	; 152
    385a:	89 f0       	breq	.+34     	; 0x387e <SetParameter+0x2e>
    385c:	86 39       	cpi	r24, 0x96	; 150
    385e:	c9 f4       	brne	.+50     	; 0x3892 <SetParameter+0x42>
	{
		case PARAM_OSC_PSCALE:
		{
			TCCR1B=0x08|(0x03&rx_buf[7]);
    3860:	90 91 77 00 	lds	r25, 0x0077
    3864:	89 2f       	mov	r24, r25
    3866:	83 70       	andi	r24, 0x03	; 3
    3868:	88 60       	ori	r24, 0x08	; 8
    386a:	8e bd       	out	0x2e, r24	; 46
			pscalefsys=rx_buf[7];							// Set timer operation mode and prescaler					
    386c:	90 93 61 00 	sts	0x0061, r25
    3870:	08 95       	ret
		}
		break;
		
		case PARAM_OSC_CMATCH:
		{
			OCR1AL=rx_buf[7];
    3872:	80 91 77 00 	lds	r24, 0x0077
    3876:	8a bd       	out	0x2a, r24	; 42
			cmatchdef=rx_buf[7];							//Set compare match value
    3878:	80 93 6f 00 	sts	0x006F, r24
    387c:	08 95       	ret
		}
		break;
		
		case PARAM_SCK_DURATION:
		{
			SPCR=0x50;
    387e:	80 e5       	ldi	r24, 0x50	; 80
    3880:	8d b9       	out	0x0d, r24	; 13
			SPCR|=(0x3&rx_buf[7]);								//set spi clock
    3882:	9d b1       	in	r25, 0x0d	; 13
    3884:	80 91 77 00 	lds	r24, 0x0077
    3888:	83 70       	andi	r24, 0x03	; 3
    388a:	98 2b       	or	r25, r24
    388c:	9d b9       	out	0x0d, r25	; 13
			sckdurationdef=(0x3&rx_buf[7]);
    388e:	80 93 60 00 	sts	0x0060, r24
    3892:	08 95       	ret

00003894 <cmdSetParameter>:
    3894:	1f 93       	push	r17
    3896:	10 92 85 01 	sts	0x0185, r1
    389a:	12 e0       	ldi	r17, 0x02	; 2
    389c:	10 93 86 01 	sts	0x0186, r17
    38a0:	0e 94 28 1c 	call	0x3850	; 0x3850 <SetParameter>
    38a4:	10 93 88 01 	sts	0x0188, r17
    38a8:	10 92 89 01 	sts	0x0189, r1
    38ac:	1f 91       	pop	r17
    38ae:	08 95       	ret

000038b0 <main>:
    38b0:	ba 9a       	sbi	0x17, 2	; 23
    38b2:	8d 9a       	sbi	0x11, 5	; 17
    38b4:	1b b8       	out	0x0b, r1	; 11
    38b6:	88 e1       	ldi	r24, 0x18	; 24
    38b8:	8a b9       	out	0x0a, r24	; 10
    38ba:	86 e8       	ldi	r24, 0x86	; 134
    38bc:	80 bd       	out	0x20, r24	; 32
    38be:	10 bc       	out	0x20, r1	; 32
    38c0:	83 e0       	ldi	r24, 0x03	; 3
    38c2:	89 b9       	out	0x09, r24	; 9
    38c4:	80 e5       	ldi	r24, 0x50	; 80
    38c6:	8d b9       	out	0x0d, r24	; 13
    38c8:	69 9a       	sbi	0x0d, 1	; 13
    38ca:	1e b8       	out	0x0e, r1	; 14
    38cc:	80 e4       	ldi	r24, 0x40	; 64
    38ce:	8f bd       	out	0x2f, r24	; 47
    38d0:	89 e0       	ldi	r24, 0x09	; 9
    38d2:	8e bd       	out	0x2e, r24	; 46
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
    38d6:	8d bd       	out	0x2d, r24	; 45
    38d8:	8c bd       	out	0x2c, r24	; 44
    38da:	1b bc       	out	0x2b, r1	; 43
    38dc:	1a bc       	out	0x2a, r1	; 42
    38de:	19 bc       	out	0x29, r1	; 41
    38e0:	18 bc       	out	0x28, r1	; 40
    38e2:	85 e0       	ldi	r24, 0x05	; 5
    38e4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <flash_led>
    38e8:	c2 98       	cbi	0x18, 2	; 24
    38ea:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <get_message>
    38ee:	c2 9a       	sbi	0x18, 2	; 24
    38f0:	80 91 75 00 	lds	r24, 0x0075
    38f4:	99 27       	eor	r25, r25
    38f6:	aa 27       	eor	r26, r26
    38f8:	bb 27       	eor	r27, r27
    38fa:	fc 01       	movw	r30, r24
    38fc:	31 97       	sbiw	r30, 0x01	; 1
    38fe:	ed 31       	cpi	r30, 0x1D	; 29
    3900:	f1 05       	cpc	r31, r1
    3902:	08 f0       	brcs	.+2      	; 0x3906 <main+0x56>
    3904:	48 c0       	rjmp	.+144    	; 0x3996 <main+0xe6>
    3906:	e6 50       	subi	r30, 0x06	; 6
    3908:	f9 4e       	sbci	r31, 0xE9	; 233
    390a:	ee 0f       	add	r30, r30
    390c:	ff 1f       	adc	r31, r31
    390e:	05 90       	lpm	r0, Z+
    3910:	f4 91       	lpm	r31, Z
    3912:	e0 2d       	mov	r30, r0
    3914:	09 94       	ijmp
    3916:	0e 94 f7 17 	call	0x2fee	; 0x2fee <cmdSignOn>
    391a:	3d c0       	rjmp	.+122    	; 0x3996 <main+0xe6>
    391c:	0e 94 1c 18 	call	0x3038	; 0x3038 <cmdGetParameter>
    3920:	3a c0       	rjmp	.+116    	; 0x3996 <main+0xe6>
    3922:	0e 94 4a 1c 	call	0x3894	; 0x3894 <cmdSetParameter>
    3926:	37 c0       	rjmp	.+110    	; 0x3996 <main+0xe6>
    3928:	0e 94 9a 1b 	call	0x3734	; 0x3734 <cmdEnterProgmodeIsp>
    392c:	34 c0       	rjmp	.+104    	; 0x3996 <main+0xe6>
    392e:	0e 94 56 18 	call	0x30ac	; 0x30ac <cmdLeaveProgmodeIsp>
    3932:	31 c0       	rjmp	.+98     	; 0x3996 <main+0xe6>
    3934:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <cmdReadSignatureIsp>
    3938:	2e c0       	rjmp	.+92     	; 0x3996 <main+0xe6>
    393a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <cmdreadosccalisp>
    393e:	2b c0       	rjmp	.+86     	; 0x3996 <main+0xe6>
    3940:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <cmdreadfuseisp>
    3944:	28 c0       	rjmp	.+80     	; 0x3996 <main+0xe6>
    3946:	0e 94 1c 1c 	call	0x3838	; 0x3838 <cmdprogramfuseisp>
    394a:	25 c0       	rjmp	.+74     	; 0x3996 <main+0xe6>
    394c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <cmdreadlockisp>
    3950:	22 c0       	rjmp	.+68     	; 0x3996 <main+0xe6>
    3952:	0e 94 22 1c 	call	0x3844	; 0x3844 <cmdprogramlockisp>
    3956:	1f c0       	rjmp	.+62     	; 0x3996 <main+0xe6>
    3958:	0e 94 69 18 	call	0x30d2	; 0x30d2 <cmdspimulti>
    395c:	1c c0       	rjmp	.+56     	; 0x3996 <main+0xe6>
    395e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <cmdchiperaseisp>
    3962:	19 c0       	rjmp	.+50     	; 0x3996 <main+0xe6>
    3964:	0e 94 2d 1a 	call	0x345a	; 0x345a <cmdprogramflashisp>
    3968:	16 c0       	rjmp	.+44     	; 0x3996 <main+0xe6>
    396a:	0e 94 8b 18 	call	0x3116	; 0x3116 <cmdloadaddress>
    396e:	13 c0       	rjmp	.+38     	; 0x3996 <main+0xe6>
    3970:	0e 94 cb 18 	call	0x3196	; 0x3196 <cmdreadflashisp>
    3974:	10 c0       	rjmp	.+32     	; 0x3996 <main+0xe6>
    3976:	0e 94 c1 19 	call	0x3382	; 0x3382 <cmdprogrameepromisp>
    397a:	0d c0       	rjmp	.+26     	; 0x3996 <main+0xe6>
    397c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <cmdreadeepromisp>
    3980:	0a c0       	rjmp	.+20     	; 0x3996 <main+0xe6>
    3982:	10 92 85 01 	sts	0x0185, r1
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	80 93 86 01 	sts	0x0186, r24
    398c:	85 e0       	ldi	r24, 0x05	; 5
    398e:	80 93 88 01 	sts	0x0188, r24
    3992:	10 92 89 01 	sts	0x0189, r1
    3996:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <sendResponse>
    399a:	a6 cf       	rjmp	.-180    	; 0x38e8 <main+0x38>

0000399c <__divmodhi4>:
    399c:	97 fb       	bst	r25, 7
    399e:	09 2e       	mov	r0, r25
    39a0:	07 26       	eor	r0, r23
    39a2:	0a d0       	rcall	.+20     	; 0x39b8 <__divmodhi4_neg1>
    39a4:	77 fd       	sbrc	r23, 7
    39a6:	04 d0       	rcall	.+8      	; 0x39b0 <__divmodhi4_neg2>
    39a8:	0c d0       	rcall	.+24     	; 0x39c2 <__udivmodhi4>
    39aa:	06 d0       	rcall	.+12     	; 0x39b8 <__divmodhi4_neg1>
    39ac:	00 20       	and	r0, r0
    39ae:	1a f4       	brpl	.+6      	; 0x39b6 <__divmodhi4_exit>

000039b0 <__divmodhi4_neg2>:
    39b0:	70 95       	com	r23
    39b2:	61 95       	neg	r22
    39b4:	7f 4f       	sbci	r23, 0xFF	; 255

000039b6 <__divmodhi4_exit>:
    39b6:	08 95       	ret

000039b8 <__divmodhi4_neg1>:
    39b8:	f6 f7       	brtc	.-4      	; 0x39b6 <__divmodhi4_exit>
    39ba:	90 95       	com	r25
    39bc:	81 95       	neg	r24
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	08 95       	ret

000039c2 <__udivmodhi4>:
    39c2:	aa 1b       	sub	r26, r26
    39c4:	bb 1b       	sub	r27, r27
    39c6:	51 e1       	ldi	r21, 0x11	; 17
    39c8:	07 c0       	rjmp	.+14     	; 0x39d8 <__udivmodhi4_ep>

000039ca <__udivmodhi4_loop>:
    39ca:	aa 1f       	adc	r26, r26
    39cc:	bb 1f       	adc	r27, r27
    39ce:	a6 17       	cp	r26, r22
    39d0:	b7 07       	cpc	r27, r23
    39d2:	10 f0       	brcs	.+4      	; 0x39d8 <__udivmodhi4_ep>
    39d4:	a6 1b       	sub	r26, r22
    39d6:	b7 0b       	sbc	r27, r23

000039d8 <__udivmodhi4_ep>:
    39d8:	88 1f       	adc	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	5a 95       	dec	r21
    39de:	a9 f7       	brne	.-22     	; 0x39ca <__udivmodhi4_loop>
    39e0:	80 95       	com	r24
    39e2:	90 95       	com	r25
    39e4:	bc 01       	movw	r22, r24
    39e6:	cd 01       	movw	r24, r26
    39e8:	08 95       	ret

000039ea <_exit>:
    39ea:	ff cf       	rjmp	.-2      	; 0x39ea <_exit>
