
ATMEGA2560 USART Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000426  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007c  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000016f  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000bc  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000138  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_29>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_54>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  f8:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_54>:
void USART_Transmit( unsigned char data );
unsigned char USART_Receive( void );


ISR(USART3_RX_vect)
{ /* signal handler for external interrupt int0 */
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	00 90 5b 00 	lds	r0, 0x005B
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	0f 92       	push	r0
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62

   char received = UDR3;
 132:	86 e3       	ldi	r24, 0x36	; 54
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	89 83       	std	Y+1, r24	; 0x01
	if (received == '0')
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	80 33       	cpi	r24, 0x30	; 48
 140:	b1 f4       	brne	.+44     	; 0x16e <__vector_54+0x6e>
	{
	//IF 0 is received, start a new ADC conversion	
		// start single convertion
		// write '1' to ADSC
		ADCSRA |= (1<<ADSC);
 142:	8a e7       	ldi	r24, 0x7A	; 122
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	2a e7       	ldi	r18, 0x7A	; 122
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	20 64       	ori	r18, 0x40	; 64
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
		
		USART_Transmit( 'O');
 154:	8f e4       	ldi	r24, 0x4F	; 79
 156:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'k');
 15a:	8b e6       	ldi	r24, 0x6B	; 107
 15c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 13); //Carriage Return
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 10); //New Line
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
 16c:	24 c0       	rjmp	.+72     	; 0x1b6 <__vector_54+0xb6>
	}
	else
	{
		USART_Transmit( 'E');
 16e:	85 e4       	ldi	r24, 0x45	; 69
 170:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'x');
 174:	88 e7       	ldi	r24, 0x78	; 120
 176:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'p');
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'e');
 180:	85 e6       	ldi	r24, 0x65	; 101
 182:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'c');
 186:	83 e6       	ldi	r24, 0x63	; 99
 188:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 't');
 18c:	84 e7       	ldi	r24, 0x74	; 116
 18e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'i');
 192:	89 e6       	ldi	r24, 0x69	; 105
 194:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'n');
 198:	8e e6       	ldi	r24, 0x6E	; 110
 19a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 'g');
 19e:	87 e6       	ldi	r24, 0x67	; 103
 1a0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( '0');
 1a4:	80 e3       	ldi	r24, 0x30	; 48
 1a6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 13); //Carriage Return
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
		USART_Transmit( 10); //New Line
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	}

}
 1b6:	0f 90       	pop	r0
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	00 92 5b 00 	sts	0x005B, r0
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_29>:


ISR(ADC_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	00 90 5b 00 	lds	r0, 0x005B
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	0f 92       	push	r0
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	char analog = ADC;
 216:	88 e7       	ldi	r24, 0x78	; 120
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	91 81       	ldd	r25, Z+1	; 0x01
 220:	89 83       	std	Y+1, r24	; 0x01
	USART_Transmit( 'A');
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'D');
 228:	84 e4       	ldi	r24, 0x44	; 68
 22a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'C');
 22e:	83 e4       	ldi	r24, 0x43	; 67
 230:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( '=');
 234:	8d e3       	ldi	r24, 0x3D	; 61
 236:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( ADC);	
 23a:	88 e7       	ldi	r24, 0x78	; 120
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 13); //Carriage Return
 248:	8d e0       	ldi	r24, 0x0D	; 13
 24a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 10); //New Line
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
}
 254:	0f 90       	pop	r0
 256:	cf 91       	pop	r28
 258:	df 91       	pop	r29
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	00 92 5b 00 	sts	0x005B, r0
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <ADC_Init>:



void ADC_Init() 
{
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	0f 92       	push	r0
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62

	//Initialize ADC and start async conversion
	
			//Initialize ADC (Analog Voltage Reference & Conversion Frequency
			ADMUX = (1<<REFS0);
 28c:	8c e7       	ldi	r24, 0x7C	; 124
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	20 e4       	ldi	r18, 0x40	; 64
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
			ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); // prescaler = 128 => 8MHz/128=62.5KHz  //ADIE= AnalogDigital conversion Interruption Elable
 296:	8a e7       	ldi	r24, 0x7A	; 122
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2f e8       	ldi	r18, 0x8F	; 143
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	
			// select the corresponding channel 0~7
			// ANDing with '7' will always keep the value
			// of 'ch' between 0 and 7
			uint8_t ch = 0b00000111;  // AND operation with 7
 2a0:	87 e0       	ldi	r24, 0x07	; 7
 2a2:	89 83       	std	Y+1, r24	; 0x01
			ADMUX |= ch; //CHANNEL 7
 2a4:	8c e7       	ldi	r24, 0x7C	; 124
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2c e7       	ldi	r18, 0x7C	; 124
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	30 81       	ld	r19, Z
 2b0:	29 81       	ldd	r18, Y+1	; 0x01
 2b2:	23 2b       	or	r18, r19
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18

			// start single conversion
			// write '1' to ADSC
			ADCSRA |= (1<<ADSC);
 2b8:	8a e7       	ldi	r24, 0x7A	; 122
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2a e7       	ldi	r18, 0x7A	; 122
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	20 64       	ori	r18, 0x40	; 64
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18

}
 2ca:	0f 90       	pop	r0
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <main>:

void main( void )
{ 
 2d2:	df 93       	push	r29
 2d4:	cf 93       	push	r28
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	


	DDRB  = (1<<DDB4) | (1<<DDB7);   //PB4 & PB7 Outputs
 2da:	84 e2       	ldi	r24, 0x24	; 36
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	20 e9       	ldi	r18, 0x90	; 144
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	DDRG  = (1<<DDG5);  //PG5 Output
 2e4:	83 e3       	ldi	r24, 0x33	; 51
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	20 e2       	ldi	r18, 0x20	; 32
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
	DDRH  = (1<<DDH6);   // PH6 Output
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	20 e4       	ldi	r18, 0x40	; 64
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18


	TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);       // Non inverting mode on OC0A and OC0B, Mode = Mode 3 FAST PWM
 2f8:	84 e4       	ldi	r24, 0x44	; 68
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	23 ea       	ldi	r18, 0xA3	; 163
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
	TCCR0B = (1<<CS00) ;												// No prescaling CS01 y CS02 hacen diferente prescaling.
 302:	85 e4       	ldi	r24, 0x45	; 69
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
	TCCR2A = (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);       // Non inverting mode on OC2A, Mode = Mode 3 FAST PWM
 30c:	80 eb       	ldi	r24, 0xB0	; 176
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	23 ea       	ldi	r18, 0xA3	; 163
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
	TCCR2B = (1<<CS20) ;                                                // No prescaling CS21 y CS22 hacen diferente prescaling.
 316:	81 eb       	ldi	r24, 0xB1	; 177
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 

	//Acomodados por potencia: 255=OFF 0=ON
	OCR0A = 253;  //PB7: OC0A //LED0
 320:	87 e4       	ldi	r24, 0x47	; 71
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	2d ef       	ldi	r18, 0xFD	; 253
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
	OCR2A = 240; //PB4: OC2A //LED1
 32a:	83 eb       	ldi	r24, 0xB3	; 179
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	20 ef       	ldi	r18, 0xF0	; 240
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
	OCR0B = 170; //PG5: OC0B //LED2
 334:	88 e4       	ldi	r24, 0x48	; 72
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	2a ea       	ldi	r18, 0xAA	; 170
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	OCR2B = 0; //PH6: OC2B //LED3
 33e:	84 eb       	ldi	r24, 0xB4	; 180
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1


	USART_Init ( MYUBRR );
 346:	83 e3       	ldi	r24, 0x33	; 51
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 c2 01 	call	0x384	; 0x384 <USART_Init>
	ADC_Init();
 34e:	0e 94 41 01 	call	0x282	; 0x282 <ADC_Init>
	USART_Transmit( 'H');
 352:	88 e4       	ldi	r24, 0x48	; 72
 354:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'e');
 358:	85 e6       	ldi	r24, 0x65	; 101
 35a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'l');
 35e:	8c e6       	ldi	r24, 0x6C	; 108
 360:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'l');
 364:	8c e6       	ldi	r24, 0x6C	; 108
 366:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 'o');
 36a:	8f e6       	ldi	r24, 0x6F	; 111
 36c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 13); //Carriage Return
 370:	8d e0       	ldi	r24, 0x0D	; 13
 372:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	USART_Transmit( 10); //New Line
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	0e 94 e6 01 	call	0x3cc	; 0x3cc <USART_Transmit>
	
	sei(); //Interrupt Enable
 37c:	78 94       	sei
			//{
				//USART_Transmit( 'O');
				//USART_Transmit( 'k');
			//}

} // main
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <USART_Init>:


void USART_Init( unsigned int ubrr){
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	0f 92       	push	r0
 38a:	0f 92       	push	r0
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	9a 83       	std	Y+2, r25	; 0x02
 392:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR3H = (unsigned char)(ubrr>>8);
 394:	85 e3       	ldi	r24, 0x35	; 53
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	29 81       	ldd	r18, Y+1	; 0x01
 39a:	3a 81       	ldd	r19, Y+2	; 0x02
 39c:	23 2f       	mov	r18, r19
 39e:	33 27       	eor	r19, r19
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
	UBRR3L = (unsigned char) ubrr;
 3a4:	84 e3       	ldi	r24, 0x34	; 52
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	29 81       	ldd	r18, Y+1	; 0x01
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
	
	/**/
	
	/* Enable receiver and transmitter */
	UCSR3B = (1<<RXEN3)|(1<<TXEN3|(1<<RXCIE3)); //RXCIE3 Reception Interruption Enable for USART3
 3ae:	81 e3       	ldi	r24, 0x31	; 49
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	28 e9       	ldi	r18, 0x98	; 152
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
	/* Set frame format: 8data, 2stop bit */
	UCSR3C = (1<<USBS3)|(3<<UCSZ30);
 3b8:	82 e3       	ldi	r24, 0x32	; 50
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	2e e0       	ldi	r18, 0x0E	; 14
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
} // USART_Init
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	08 95       	ret

000003cc <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
 3cc:	df 93       	push	r29
 3ce:	cf 93       	push	r28
 3d0:	0f 92       	push	r0
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR3A & (1<<UDRE3)) );
 3d8:	00 00       	nop
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	80 72       	andi	r24, 0x20	; 32
 3e8:	90 70       	andi	r25, 0x00	; 0
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	b1 f3       	breq	.-20     	; 0x3da <USART_Transmit+0xe>
	/* Put data into buffer, sends the data */
	UDR3 = data;
 3ee:	86 e3       	ldi	r24, 0x36	; 54
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	29 81       	ldd	r18, Y+1	; 0x01
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
}
 3f8:	0f 90       	pop	r0
 3fa:	cf 91       	pop	r28
 3fc:	df 91       	pop	r29
 3fe:	08 95       	ret

00000400 <USART_Receive>:

unsigned char USART_Receive( void )
{
 400:	df 93       	push	r29
 402:	cf 93       	push	r28
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSR3A & (1<<RXC3)) );
 408:	00 00       	nop
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	88 23       	and	r24, r24
 414:	d4 f7       	brge	.-12     	; 0x40a <USART_Receive+0xa>
	/* Get and return received data from buffer */
	return UDR3;
 416:	86 e3       	ldi	r24, 0x36	; 54
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	fc 01       	movw	r30, r24
 41c:	80 81       	ld	r24, Z
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <_exit>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <_exit>
