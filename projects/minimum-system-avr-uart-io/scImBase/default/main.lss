
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000087c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  0080009e  0080009e  0000094e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c2  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a6  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a2  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000162  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e7       	ldi	r30, 0x7C	; 124
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 39       	cpi	r26, 0x9E	; 158
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	ae e9       	ldi	r26, 0x9E	; 158
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 30       	cpi	r26, 0x0C	; 12
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2d d0       	rcall	.+90     	; 0xb4 <main>
  5a:	0e c4       	rjmp	.+2076   	; 0x878 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <fDummy>:
	return 0;
}
int fDummy()
{
	return 0;
}
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	08 95       	ret

00000064 <fImBase>:
 	}
  return 0;
}

int fImBase(char *cImPar)
{
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
  68:	ec 01       	movw	r28, r24
	if(*cImPar!=0)
  6a:	88 81       	ld	r24, Y
  6c:	88 23       	and	r24, r24
  6e:	d9 f0       	breq	.+54     	; 0xa6 <fImBase+0x42>
		sprintf(cImPar,"%s \r\n",cImPar);
  70:	00 d0       	rcall	.+0      	; 0x72 <fImBase+0xe>
  72:	00 d0       	rcall	.+0      	; 0x74 <fImBase+0x10>
  74:	00 d0       	rcall	.+0      	; 0x76 <fImBase+0x12>
  76:	ed b7       	in	r30, 0x3d	; 61
  78:	fe b7       	in	r31, 0x3e	; 62
  7a:	31 96       	adiw	r30, 0x01	; 1
  7c:	ad b7       	in	r26, 0x3d	; 61
  7e:	be b7       	in	r27, 0x3e	; 62
  80:	12 96       	adiw	r26, 0x02	; 2
  82:	dc 93       	st	X, r29
  84:	ce 93       	st	-X, r28
  86:	11 97       	sbiw	r26, 0x01	; 1
  88:	80 e6       	ldi	r24, 0x60	; 96
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	93 83       	std	Z+3, r25	; 0x03
  8e:	82 83       	std	Z+2, r24	; 0x02
  90:	d5 83       	std	Z+5, r29	; 0x05
  92:	c4 83       	std	Z+4, r28	; 0x04
  94:	2b d1       	rcall	.+598    	; 0x2ec <sprintf>
  96:	8d b7       	in	r24, 0x3d	; 61
  98:	9e b7       	in	r25, 0x3e	; 62
  9a:	06 96       	adiw	r24, 0x06	; 6
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	9e bf       	out	0x3e, r25	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	8d bf       	out	0x3d, r24	; 61
	fImprintf(cImPar);
  a6:	ce 01       	movw	r24, r28
  a8:	72 d0       	rcall	.+228    	; 0x18e <fImprintf>
	//fImprinth("12345ABCD8abv9t");
	return 0;
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <main>:
{
	{"base", fDummy,fImBase,fDummy},
	{"UART", fImInitSerial,fDummy,fDummy}
};
int main( void )
{
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  	int index;
       for(index = 0; index < ELEMENTS_NUM(functionality); ++index)
      {
          functionality[index].openfunc(sData);
  c0:	e0 91 90 00 	lds	r30, 0x0090
  c4:	f0 91 91 00 	lds	r31, 0x0091
  c8:	86 ea       	ldi	r24, 0xA6	; 166
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	09 95       	icall
  ce:	e0 91 98 00 	lds	r30, 0x0098
  d2:	f0 91 99 00 	lds	r31, 0x0099
  d6:	86 ea       	ldi	r24, 0xA6	; 166
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	09 95       	icall
        fImprintf("#> ");
		fImgets(sData,100);
        pImCmd = strtok(sData," ");
	    for(index = 0; index < ELEMENTS_NUM(functionality); ++index)
            {
                if(strcmp(functionality[index].name, pImCmd) == 0)
  dc:	e0 90 8e 00 	lds	r14, 0x008E
  e0:	f0 90 8f 00 	lds	r15, 0x008F
  e4:	00 91 96 00 	lds	r16, 0x0096
  e8:	10 91 97 00 	lds	r17, 0x0097
          functionality[index].openfunc(sData);
       }

	while (1)
  	{	 
        fImprintf("#> ");
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	4e d0       	rcall	.+156    	; 0x18e <fImprintf>
		fImgets(sData,100);
  f2:	86 ea       	ldi	r24, 0xA6	; 166
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	64 e6       	ldi	r22, 0x64	; 100
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	73 d0       	rcall	.+230    	; 0x1e2 <fImgets>
        pImCmd = strtok(sData," ");
  fc:	86 ea       	ldi	r24, 0xA6	; 166
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	6a e6       	ldi	r22, 0x6A	; 106
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	bf d0       	rcall	.+382    	; 0x284 <strtok>
 106:	ec 01       	movw	r28, r24
 108:	90 93 a3 00 	sts	0x00A3, r25
 10c:	80 93 a2 00 	sts	0x00A2, r24
	    for(index = 0; index < ELEMENTS_NUM(functionality); ++index)
            {
                if(strcmp(functionality[index].name, pImCmd) == 0)
 110:	c7 01       	movw	r24, r14
 112:	be 01       	movw	r22, r28
 114:	bb d0       	rcall	.+374    	; 0x28c <strcmp>
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	19 f4       	brne	.+6      	; 0x120 <main+0x6c>
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	11 c0       	rjmp	.+34     	; 0x142 <main+0x8e>
 120:	c8 01       	movw	r24, r16
 122:	be 01       	movw	r22, r28
 124:	b3 d0       	rcall	.+358    	; 0x28c <strcmp>
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	51 f0       	breq	.+20     	; 0x13e <main+0x8a>

		if(index >= ELEMENTS_NUM(functionality))
        {
            for(index = 0; index < ELEMENTS_NUM(functionality); ++index)
            {
                fImprintf(functionality[index].name); fImprintf("\r\n");
 12a:	c7 01       	movw	r24, r14
 12c:	30 d0       	rcall	.+96     	; 0x18e <fImprintf>
 12e:	8c e6       	ldi	r24, 0x6C	; 108
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	2d d0       	rcall	.+90     	; 0x18e <fImprintf>
 134:	c8 01       	movw	r24, r16
 136:	2b d0       	rcall	.+86     	; 0x18e <fImprintf>
 138:	8c e6       	ldi	r24, 0x6C	; 108
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	1e c0       	rjmp	.+60     	; 0x17a <main+0xc6>
 13e:	c1 e0       	ldi	r28, 0x01	; 1
 140:	d0 e0       	ldi	r29, 0x00	; 0
        pImCmd = strtok(sData," ");
	    for(index = 0; index < ELEMENTS_NUM(functionality); ++index)
            {
                if(strcmp(functionality[index].name, pImCmd) == 0)
                {
                    pImParam=strtok(NULL, "\0");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	6f e6       	ldi	r22, 0x6F	; 111
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	9c d0       	rcall	.+312    	; 0x284 <strtok>
 14c:	90 93 0b 01 	sts	0x010B, r25
 150:	80 93 0a 01 	sts	0x010A, r24
                    if(!functionality[index].testfunc(pImParam))
 154:	cc 0f       	add	r28, r28
 156:	dd 1f       	adc	r29, r29
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	cc 0f       	add	r28, r28
 15c:	dd 1f       	adc	r29, r29
 15e:	cc 0f       	add	r28, r28
 160:	dd 1f       	adc	r29, r29
 162:	c2 57       	subi	r28, 0x72	; 114
 164:	df 4f       	sbci	r29, 0xFF	; 255
 166:	e8 81       	ld	r30, Y
 168:	f9 81       	ldd	r31, Y+1	; 0x01
 16a:	09 95       	icall
 16c:	89 2b       	or	r24, r25
 16e:	19 f4       	brne	.+6      	; 0x176 <main+0xc2>
                    {
                    		fImprintf("Success\r\n");
 170:	81 e7       	ldi	r24, 0x71	; 113
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0xc6>
                    }
			else
				fImprintf("\r\nFail\r\n");
 176:	8b e7       	ldi	r24, 0x7B	; 123
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	09 d0       	rcall	.+18     	; 0x18e <fImprintf>
 17c:	b7 cf       	rjmp	.-146    	; 0xec <main+0x38>

0000017e <fImputchar>:

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 17e:	5d 9b       	sbis	0x0b, 5	; 11
 180:	fe cf       	rjmp	.-4      	; 0x17e <fImputchar>
   UDR=cData;	
 182:	8c b9       	out	0x0c, r24	; 12
}
 184:	08 95       	ret

00000186 <fImgetchar>:
char fImgetchar()
{
	
	while(!(UCSRA & (1<<RXC)));
 186:	5f 9b       	sbis	0x0b, 7	; 11
 188:	fe cf       	rjmp	.-4      	; 0x186 <fImgetchar>
	return UDR;
 18a:	8c b1       	in	r24, 0x0c	; 12
}
 18c:	08 95       	ret

0000018e <fImprintf>:
void fImprintf(char *stream)
{
 18e:	fc 01       	movw	r30, r24
 190:	04 c0       	rjmp	.+8      	; 0x19a <fImprintf+0xc>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <fImprintf+0x4>
   UDR=cData;	
 196:	8c b9       	out	0x0c, r24	; 12
 198:	31 96       	adiw	r30, 0x01	; 1
	return UDR;
}
void fImprintf(char *stream)
{
	int i=0;
	while(*(stream+i)!=0)
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	c9 f7       	brne	.-14     	; 0x192 <fImprintf+0x4>
	{
		fImputchar(*(stream+i));
		i++;
	}
}
 1a0:	08 95       	ret

000001a2 <fImscanf>:
void fImscanf(char *sData)
{
	//sData store at program memory, so we can't change its value, so I use ssData
	static char *ssData;
	int i=0;
	ssData=sData;
 1a2:	80 93 9e 00 	sts	0x009E, r24
 1a6:	90 93 9f 00 	sts	0x009F, r25
 1aa:	fc 01       	movw	r30, r24
   UDR=cData;	
}
char fImgetchar()
{
	
	while(!(UCSRA & (1<<RXC)));
 1ac:	5f 9b       	sbis	0x0b, 7	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <fImscanf+0xa>
	return UDR;
 1b0:	8c b1       	in	r24, 0x0c	; 12
	static char *ssData;
	int i=0;
	ssData=sData;
	do
	{
		*(ssData+i)=fImgetchar();
 1b2:	80 83       	st	Z, r24
 1b4:	df 01       	movw	r26, r30

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <fImscanf+0x14>
   UDR=cData;	
 1ba:	8c b9       	out	0x0c, r24	; 12
 1bc:	31 96       	adiw	r30, 0x01	; 1
	{
		*(ssData+i)=fImgetchar();
		//ssData++;
		i++;
		fImputchar(*(ssData+i-1));
	}while (*(ssData+i-1)!=0x0d);
 1be:	8d 30       	cpi	r24, 0x0D	; 13
 1c0:	a9 f7       	brne	.-22     	; 0x1ac <fImscanf+0xa>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <fImscanf+0x20>
   UDR=cData;	
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	8c b9       	out	0x0c, r24	; 12
		//ssData++;
		i++;
		fImputchar(*(ssData+i-1));
	}while (*(ssData+i-1)!=0x0d);
	fImputchar(0x0a);
	*(ssData+i-1)=0;	
 1ca:	1c 92       	st	X, r1
}
 1cc:	08 95       	ret

000001ce <fImInitSerial>:
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 19200 (Double Speed Mode)
	UCSRA=0x02;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	8b b9       	out	0x0b, r24	; 11
	UCSRB=0x18;
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0x86;
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
 1da:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x33;	
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	89 b9       	out	0x09, r24	; 9
}
 1e0:	08 95       	ret

000001e2 <fImgets>:


char *fImgets(char *str,unsigned int len)
{
 1e2:	dc 01       	movw	r26, r24
 1e4:	ab 01       	movw	r20, r22
 1e6:	fc 01       	movw	r30, r24
#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
   UDR=cData;	
 1e8:	20 e2       	ldi	r18, 0x20	; 32
}
char fImgetchar()
{
	
	while(!(UCSRA & (1<<RXC)));
 1ea:	98 e0       	ldi	r25, 0x08	; 8
 1ec:	21 c0       	rjmp	.+66     	; 0x230 <fImgets+0x4e>
 1ee:	5f 9b       	sbis	0x0b, 7	; 11
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <fImgets+0xc>
	return UDR;
 1f2:	8c b1       	in	r24, 0x0c	; 12

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 1f4:	5d 9b       	sbis	0x0b, 5	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <fImgets+0x12>
   UDR=cData;	
 1f8:	8c b9       	out	0x0c, r24	; 12
while (n)
      {
      l0:
      k=fImgetchar();
      fImputchar(k);
      if (k==8)
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	69 f4       	brne	.+26     	; 0x218 <fImgets+0x36>
         {
         if (len>n)
 1fe:	46 17       	cp	r20, r22
 200:	57 07       	cpc	r21, r23
 202:	a8 f7       	brcc	.-22     	; 0x1ee <fImgets+0xc>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 204:	5d 9b       	sbis	0x0b, 5	; 11
 206:	fe cf       	rjmp	.-4      	; 0x204 <fImgets+0x22>
   UDR=cData;	
 208:	2c b9       	out	0x0c, r18	; 12

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 20a:	5d 9b       	sbis	0x0b, 5	; 11
 20c:	fe cf       	rjmp	.-4      	; 0x20a <fImgets+0x28>
      fImputchar(k);
      if (k==8)
         {
         if (len>n)
            {
            --p;
 20e:	31 97       	sbiw	r30, 0x01	; 1
            ++n;
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
   UDR=cData;	
 214:	9c b9       	out	0x0c, r25	; 12
 216:	eb cf       	rjmp	.-42     	; 0x1ee <fImgets+0xc>
			fImputchar(' ');
			fImputchar(0x08);
            };
         goto l0;
         };
      if (k==10||k==13) 
 218:	8a 30       	cpi	r24, 0x0A	; 10
 21a:	11 f0       	breq	.+4      	; 0x220 <fImgets+0x3e>
 21c:	8d 30       	cpi	r24, 0x0D	; 13
 21e:	29 f4       	brne	.+10     	; 0x22a <fImgets+0x48>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 220:	5d 9b       	sbis	0x0b, 5	; 11
 222:	fe cf       	rjmp	.-4      	; 0x220 <fImgets+0x3e>
   UDR=cData;	
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	8c b9       	out	0x0c, r24	; 12
 228:	06 c0       	rjmp	.+12     	; 0x236 <fImgets+0x54>
      if (k==10||k==13) 
      {  
        fImputchar(10);
        break;
      }
      *p++=k;
 22a:	81 93       	st	Z+, r24
      --n;
 22c:	41 50       	subi	r20, 0x01	; 1
 22e:	50 40       	sbci	r21, 0x00	; 0
{
unsigned int n=len;
char *p=str;
char k;

while (n)
 230:	41 15       	cp	r20, r1
 232:	51 05       	cpc	r21, r1
 234:	e1 f6       	brne	.-72     	; 0x1ee <fImgets+0xc>
        break;
      }
      *p++=k;
      --n;
      };
*p=0;
 236:	10 82       	st	Z, r1
return str;
}
 238:	cd 01       	movw	r24, r26
 23a:	08 95       	ret

0000023c <fImprinth>:
void fImprinth(char *stream)
{
 23c:	fc 01       	movw	r30, r24
#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
   UDR=cData;	
 23e:	28 e5       	ldi	r18, 0x58	; 88
 240:	1d c0       	rjmp	.+58     	; 0x27c <fImprinth+0x40>
void fImprinth(char *stream)
{
	int i=0;
	while(*(stream+i)!=0)
	{
		if(*(stream+i)>='0'&&*(stream+i)<='9')
 242:	89 2f       	mov	r24, r25
 244:	80 53       	subi	r24, 0x30	; 48
 246:	8a 30       	cpi	r24, 0x0A	; 10
 248:	20 f4       	brcc	.+8      	; 0x252 <fImprinth+0x16>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 24a:	5d 9b       	sbis	0x0b, 5	; 11
 24c:	fe cf       	rjmp	.-4      	; 0x24a <fImprinth+0xe>
   UDR=cData;	
 24e:	8c b9       	out	0x0c, r24	; 12
 250:	14 c0       	rjmp	.+40     	; 0x27a <fImprinth+0x3e>
	int i=0;
	while(*(stream+i)!=0)
	{
		if(*(stream+i)>='0'&&*(stream+i)<='9')
			fImputchar(*(stream+i)-0x30);
		else if(*(stream+i)>='A'&&*(stream+i)<='F')
 252:	89 2f       	mov	r24, r25
 254:	81 54       	subi	r24, 0x41	; 65
 256:	86 30       	cpi	r24, 0x06	; 6
 258:	20 f4       	brcc	.+8      	; 0x262 <fImprinth+0x26>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 25a:	5d 9b       	sbis	0x0b, 5	; 11
 25c:	fe cf       	rjmp	.-4      	; 0x25a <fImprinth+0x1e>
	while(*(stream+i)!=0)
	{
		if(*(stream+i)>='0'&&*(stream+i)<='9')
			fImputchar(*(stream+i)-0x30);
		else if(*(stream+i)>='A'&&*(stream+i)<='F')
			fImputchar(*(stream+i)-0x37);
 25e:	97 53       	subi	r25, 0x37	; 55
 260:	07 c0       	rjmp	.+14     	; 0x270 <fImprinth+0x34>
		else if(*(stream+i)>='a'&&*(stream+i)<='f')
 262:	89 2f       	mov	r24, r25
 264:	81 56       	subi	r24, 0x61	; 97
 266:	86 30       	cpi	r24, 0x06	; 6
 268:	28 f4       	brcc	.+10     	; 0x274 <fImprinth+0x38>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 26a:	5d 9b       	sbis	0x0b, 5	; 11
 26c:	fe cf       	rjmp	.-4      	; 0x26a <fImprinth+0x2e>
		if(*(stream+i)>='0'&&*(stream+i)<='9')
			fImputchar(*(stream+i)-0x30);
		else if(*(stream+i)>='A'&&*(stream+i)<='F')
			fImputchar(*(stream+i)-0x37);
		else if(*(stream+i)>='a'&&*(stream+i)<='f')
			fImputchar(*(stream+i)-0x57);
 26e:	97 55       	subi	r25, 0x57	; 87
#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
   UDR=cData;	
 270:	9c b9       	out	0x0c, r25	; 12
 272:	03 c0       	rjmp	.+6      	; 0x27a <fImprinth+0x3e>

#define UDRE 5
#define RXC 7
void fImputchar(char cData)
{
   while(!(UCSRA & (1<<UDRE)));
 274:	5d 9b       	sbis	0x0b, 5	; 11
 276:	fe cf       	rjmp	.-4      	; 0x274 <fImprinth+0x38>
   UDR=cData;	
 278:	2c b9       	out	0x0c, r18	; 12
 27a:	31 96       	adiw	r30, 0x01	; 1
return str;
}
void fImprinth(char *stream)
{
	int i=0;
	while(*(stream+i)!=0)
 27c:	90 81       	ld	r25, Z
 27e:	99 23       	and	r25, r25
 280:	01 f7       	brne	.-64     	; 0x242 <fImprinth+0x6>
			fImputchar(*(stream+i)-0x57);
		else
			fImputchar('X');
		i++;
	}
}
 282:	08 95       	ret

00000284 <strtok>:
 284:	40 ea       	ldi	r20, 0xA0	; 160
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	0a d0       	rcall	.+20     	; 0x29e <strtok_r>
 28a:	08 95       	ret

0000028c <strcmp>:
 28c:	fb 01       	movw	r30, r22
 28e:	dc 01       	movw	r26, r24
 290:	8d 91       	ld	r24, X+
 292:	01 90       	ld	r0, Z+
 294:	80 19       	sub	r24, r0
 296:	01 10       	cpse	r0, r1
 298:	d9 f3       	breq	.-10     	; 0x290 <strcmp+0x4>
 29a:	99 0b       	sbc	r25, r25
 29c:	08 95       	ret

0000029e <strtok_r>:
 29e:	fa 01       	movw	r30, r20
 2a0:	a1 91       	ld	r26, Z+
 2a2:	b0 81       	ld	r27, Z
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	19 f4       	brne	.+6      	; 0x2ae <strtok_r+0x10>
 2a8:	10 97       	sbiw	r26, 0x00	; 0
 2aa:	e1 f0       	breq	.+56     	; 0x2e4 <strtok_r+0x46>
 2ac:	cd 01       	movw	r24, r26
 2ae:	dc 01       	movw	r26, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	0d 90       	ld	r0, X+
 2b4:	00 20       	and	r0, r0
 2b6:	11 f4       	brne	.+4      	; 0x2bc <strtok_r+0x1e>
 2b8:	c0 01       	movw	r24, r0
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <strtok_r+0x44>
 2bc:	fb 01       	movw	r30, r22
 2be:	21 91       	ld	r18, Z+
 2c0:	22 23       	and	r18, r18
 2c2:	19 f0       	breq	.+6      	; 0x2ca <strtok_r+0x2c>
 2c4:	20 15       	cp	r18, r0
 2c6:	d9 f7       	brne	.-10     	; 0x2be <strtok_r+0x20>
 2c8:	f3 cf       	rjmp	.-26     	; 0x2b0 <strtok_r+0x12>
 2ca:	fb 01       	movw	r30, r22
 2cc:	21 91       	ld	r18, Z+
 2ce:	20 15       	cp	r18, r0
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <strtok_r+0x3a>
 2d2:	1e 92       	st	-X, r1
 2d4:	11 96       	adiw	r26, 0x01	; 1
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <strtok_r+0x46>
 2d8:	22 23       	and	r18, r18
 2da:	c1 f7       	brne	.-16     	; 0x2cc <strtok_r+0x2e>
 2dc:	0d 90       	ld	r0, X+
 2de:	00 20       	and	r0, r0
 2e0:	a1 f7       	brne	.-24     	; 0x2ca <strtok_r+0x2c>
 2e2:	d0 01       	movw	r26, r0
 2e4:	fa 01       	movw	r30, r20
 2e6:	a1 93       	st	Z+, r26
 2e8:	b0 83       	st	Z, r27
 2ea:	08 95       	ret

000002ec <sprintf>:
 2ec:	ae e0       	ldi	r26, 0x0E	; 14
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	eb e7       	ldi	r30, 0x7B	; 123
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	98 c2       	rjmp	.+1328   	; 0x826 <__prologue_saves__+0x1c>
 2f6:	0d 89       	ldd	r16, Y+21	; 0x15
 2f8:	1e 89       	ldd	r17, Y+22	; 0x16
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	8c 83       	std	Y+4, r24	; 0x04
 2fe:	1a 83       	std	Y+2, r17	; 0x02
 300:	09 83       	std	Y+1, r16	; 0x01
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	9f e7       	ldi	r25, 0x7F	; 127
 306:	9e 83       	std	Y+6, r25	; 0x06
 308:	8d 83       	std	Y+5, r24	; 0x05
 30a:	9e 01       	movw	r18, r28
 30c:	27 5e       	subi	r18, 0xE7	; 231
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	6f 89       	ldd	r22, Y+23	; 0x17
 316:	78 8d       	ldd	r23, Y+24	; 0x18
 318:	a9 01       	movw	r20, r18
 31a:	09 d0       	rcall	.+18     	; 0x32e <vfprintf>
 31c:	2f 81       	ldd	r18, Y+7	; 0x07
 31e:	38 85       	ldd	r19, Y+8	; 0x08
 320:	02 0f       	add	r16, r18
 322:	13 1f       	adc	r17, r19
 324:	f8 01       	movw	r30, r16
 326:	10 82       	st	Z, r1
 328:	2e 96       	adiw	r28, 0x0e	; 14
 32a:	e4 e0       	ldi	r30, 0x04	; 4
 32c:	98 c2       	rjmp	.+1328   	; 0x85e <__epilogue_restores__+0x1c>

0000032e <vfprintf>:
 32e:	ab e0       	ldi	r26, 0x0B	; 11
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	ec e9       	ldi	r30, 0x9C	; 156
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	69 c2       	rjmp	.+1234   	; 0x80a <__prologue_saves__>
 338:	3c 01       	movw	r6, r24
 33a:	2b 01       	movw	r4, r22
 33c:	5a 01       	movw	r10, r20
 33e:	fc 01       	movw	r30, r24
 340:	17 82       	std	Z+7, r1	; 0x07
 342:	16 82       	std	Z+6, r1	; 0x06
 344:	83 81       	ldd	r24, Z+3	; 0x03
 346:	81 fd       	sbrc	r24, 1
 348:	03 c0       	rjmp	.+6      	; 0x350 <vfprintf+0x22>
 34a:	6f ef       	ldi	r22, 0xFF	; 255
 34c:	7f ef       	ldi	r23, 0xFF	; 255
 34e:	b9 c1       	rjmp	.+882    	; 0x6c2 <__stack+0x263>
 350:	9a e0       	ldi	r25, 0x0A	; 10
 352:	89 2e       	mov	r8, r25
 354:	1e 01       	movw	r2, r28
 356:	08 94       	sec
 358:	21 1c       	adc	r2, r1
 35a:	31 1c       	adc	r3, r1
 35c:	f3 01       	movw	r30, r6
 35e:	23 81       	ldd	r18, Z+3	; 0x03
 360:	f2 01       	movw	r30, r4
 362:	23 fd       	sbrc	r18, 3
 364:	85 91       	lpm	r24, Z+
 366:	23 ff       	sbrs	r18, 3
 368:	81 91       	ld	r24, Z+
 36a:	2f 01       	movw	r4, r30
 36c:	88 23       	and	r24, r24
 36e:	09 f4       	brne	.+2      	; 0x372 <vfprintf+0x44>
 370:	a5 c1       	rjmp	.+842    	; 0x6bc <__stack+0x25d>
 372:	85 32       	cpi	r24, 0x25	; 37
 374:	39 f4       	brne	.+14     	; 0x384 <vfprintf+0x56>
 376:	23 fd       	sbrc	r18, 3
 378:	85 91       	lpm	r24, Z+
 37a:	23 ff       	sbrs	r18, 3
 37c:	81 91       	ld	r24, Z+
 37e:	2f 01       	movw	r4, r30
 380:	85 32       	cpi	r24, 0x25	; 37
 382:	21 f4       	brne	.+8      	; 0x38c <vfprintf+0x5e>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	b3 01       	movw	r22, r6
 388:	b6 d1       	rcall	.+876    	; 0x6f6 <fputc>
 38a:	e8 cf       	rjmp	.-48     	; 0x35c <vfprintf+0x2e>
 38c:	98 2f       	mov	r25, r24
 38e:	ff 24       	eor	r15, r15
 390:	ee 24       	eor	r14, r14
 392:	99 24       	eor	r9, r9
 394:	ff e1       	ldi	r31, 0x1F	; 31
 396:	ff 15       	cp	r31, r15
 398:	d0 f0       	brcs	.+52     	; 0x3ce <vfprintf+0xa0>
 39a:	9b 32       	cpi	r25, 0x2B	; 43
 39c:	69 f0       	breq	.+26     	; 0x3b8 <vfprintf+0x8a>
 39e:	9c 32       	cpi	r25, 0x2C	; 44
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <vfprintf+0x7e>
 3a2:	90 32       	cpi	r25, 0x20	; 32
 3a4:	59 f0       	breq	.+22     	; 0x3bc <vfprintf+0x8e>
 3a6:	93 32       	cpi	r25, 0x23	; 35
 3a8:	91 f4       	brne	.+36     	; 0x3ce <vfprintf+0xa0>
 3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <vfprintf+0x9a>
 3ac:	9d 32       	cpi	r25, 0x2D	; 45
 3ae:	49 f0       	breq	.+18     	; 0x3c2 <vfprintf+0x94>
 3b0:	90 33       	cpi	r25, 0x30	; 48
 3b2:	69 f4       	brne	.+26     	; 0x3ce <vfprintf+0xa0>
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	24 c0       	rjmp	.+72     	; 0x400 <vfprintf+0xd2>
 3b8:	52 e0       	ldi	r21, 0x02	; 2
 3ba:	f5 2a       	or	r15, r21
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	f8 2a       	or	r15, r24
 3c0:	28 c0       	rjmp	.+80     	; 0x412 <vfprintf+0xe4>
 3c2:	98 e0       	ldi	r25, 0x08	; 8
 3c4:	f9 2a       	or	r15, r25
 3c6:	25 c0       	rjmp	.+74     	; 0x412 <vfprintf+0xe4>
 3c8:	e0 e1       	ldi	r30, 0x10	; 16
 3ca:	fe 2a       	or	r15, r30
 3cc:	22 c0       	rjmp	.+68     	; 0x412 <vfprintf+0xe4>
 3ce:	f7 fc       	sbrc	r15, 7
 3d0:	29 c0       	rjmp	.+82     	; 0x424 <vfprintf+0xf6>
 3d2:	89 2f       	mov	r24, r25
 3d4:	80 53       	subi	r24, 0x30	; 48
 3d6:	8a 30       	cpi	r24, 0x0A	; 10
 3d8:	70 f4       	brcc	.+28     	; 0x3f6 <vfprintf+0xc8>
 3da:	f6 fe       	sbrs	r15, 6
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <vfprintf+0xba>
 3de:	98 9c       	mul	r9, r8
 3e0:	90 2c       	mov	r9, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	98 0e       	add	r9, r24
 3e6:	15 c0       	rjmp	.+42     	; 0x412 <vfprintf+0xe4>
 3e8:	e8 9c       	mul	r14, r8
 3ea:	e0 2c       	mov	r14, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	e8 0e       	add	r14, r24
 3f0:	f0 e2       	ldi	r31, 0x20	; 32
 3f2:	ff 2a       	or	r15, r31
 3f4:	0e c0       	rjmp	.+28     	; 0x412 <vfprintf+0xe4>
 3f6:	9e 32       	cpi	r25, 0x2E	; 46
 3f8:	29 f4       	brne	.+10     	; 0x404 <vfprintf+0xd6>
 3fa:	f6 fc       	sbrc	r15, 6
 3fc:	5f c1       	rjmp	.+702    	; 0x6bc <__stack+0x25d>
 3fe:	40 e4       	ldi	r20, 0x40	; 64
 400:	f4 2a       	or	r15, r20
 402:	07 c0       	rjmp	.+14     	; 0x412 <vfprintf+0xe4>
 404:	9c 36       	cpi	r25, 0x6C	; 108
 406:	19 f4       	brne	.+6      	; 0x40e <vfprintf+0xe0>
 408:	50 e8       	ldi	r21, 0x80	; 128
 40a:	f5 2a       	or	r15, r21
 40c:	02 c0       	rjmp	.+4      	; 0x412 <vfprintf+0xe4>
 40e:	98 36       	cpi	r25, 0x68	; 104
 410:	49 f4       	brne	.+18     	; 0x424 <vfprintf+0xf6>
 412:	f2 01       	movw	r30, r4
 414:	23 fd       	sbrc	r18, 3
 416:	95 91       	lpm	r25, Z+
 418:	23 ff       	sbrs	r18, 3
 41a:	91 91       	ld	r25, Z+
 41c:	2f 01       	movw	r4, r30
 41e:	99 23       	and	r25, r25
 420:	09 f0       	breq	.+2      	; 0x424 <vfprintf+0xf6>
 422:	b8 cf       	rjmp	.-144    	; 0x394 <vfprintf+0x66>
 424:	89 2f       	mov	r24, r25
 426:	85 54       	subi	r24, 0x45	; 69
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	18 f0       	brcs	.+6      	; 0x432 <vfprintf+0x104>
 42c:	80 52       	subi	r24, 0x20	; 32
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	38 f4       	brcc	.+14     	; 0x440 <vfprintf+0x112>
 432:	44 e0       	ldi	r20, 0x04	; 4
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	a4 0e       	add	r10, r20
 438:	b5 1e       	adc	r11, r21
 43a:	5f e3       	ldi	r21, 0x3F	; 63
 43c:	59 83       	std	Y+1, r21	; 0x01
 43e:	0f c0       	rjmp	.+30     	; 0x45e <vfprintf+0x130>
 440:	93 36       	cpi	r25, 0x63	; 99
 442:	31 f0       	breq	.+12     	; 0x450 <vfprintf+0x122>
 444:	93 37       	cpi	r25, 0x73	; 115
 446:	79 f0       	breq	.+30     	; 0x466 <__stack+0x7>
 448:	93 35       	cpi	r25, 0x53	; 83
 44a:	09 f0       	breq	.+2      	; 0x44e <vfprintf+0x120>
 44c:	52 c0       	rjmp	.+164    	; 0x4f2 <__stack+0x93>
 44e:	1f c0       	rjmp	.+62     	; 0x48e <__stack+0x2f>
 450:	f5 01       	movw	r30, r10
 452:	80 81       	ld	r24, Z
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	42 e0       	ldi	r20, 0x02	; 2
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	a4 0e       	add	r10, r20
 45c:	b5 1e       	adc	r11, r21
 45e:	61 01       	movw	r12, r2
 460:	01 e0       	ldi	r16, 0x01	; 1
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	11 c0       	rjmp	.+34     	; 0x488 <__stack+0x29>
 466:	f5 01       	movw	r30, r10
 468:	c0 80       	ld	r12, Z
 46a:	d1 80       	ldd	r13, Z+1	; 0x01
 46c:	f6 fc       	sbrc	r15, 6
 46e:	03 c0       	rjmp	.+6      	; 0x476 <__stack+0x17>
 470:	6f ef       	ldi	r22, 0xFF	; 255
 472:	7f ef       	ldi	r23, 0xFF	; 255
 474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
 476:	69 2d       	mov	r22, r9
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	42 e0       	ldi	r20, 0x02	; 2
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	a4 0e       	add	r10, r20
 480:	b5 1e       	adc	r11, r21
 482:	c6 01       	movw	r24, r12
 484:	2d d1       	rcall	.+602    	; 0x6e0 <strnlen>
 486:	8c 01       	movw	r16, r24
 488:	5f e7       	ldi	r21, 0x7F	; 127
 48a:	f5 22       	and	r15, r21
 48c:	13 c0       	rjmp	.+38     	; 0x4b4 <__stack+0x55>
 48e:	f5 01       	movw	r30, r10
 490:	c0 80       	ld	r12, Z
 492:	d1 80       	ldd	r13, Z+1	; 0x01
 494:	f6 fc       	sbrc	r15, 6
 496:	03 c0       	rjmp	.+6      	; 0x49e <__stack+0x3f>
 498:	6f ef       	ldi	r22, 0xFF	; 255
 49a:	7f ef       	ldi	r23, 0xFF	; 255
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__stack+0x43>
 49e:	69 2d       	mov	r22, r9
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	42 e0       	ldi	r20, 0x02	; 2
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	a4 0e       	add	r10, r20
 4a8:	b5 1e       	adc	r11, r21
 4aa:	c6 01       	movw	r24, r12
 4ac:	0e d1       	rcall	.+540    	; 0x6ca <strnlen_P>
 4ae:	8c 01       	movw	r16, r24
 4b0:	50 e8       	ldi	r21, 0x80	; 128
 4b2:	f5 2a       	or	r15, r21
 4b4:	f3 fe       	sbrs	r15, 3
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__stack+0x65>
 4b8:	18 c0       	rjmp	.+48     	; 0x4ea <__stack+0x8b>
 4ba:	80 e2       	ldi	r24, 0x20	; 32
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	b3 01       	movw	r22, r6
 4c0:	1a d1       	rcall	.+564    	; 0x6f6 <fputc>
 4c2:	ea 94       	dec	r14
 4c4:	8e 2d       	mov	r24, r14
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	08 17       	cp	r16, r24
 4ca:	19 07       	cpc	r17, r25
 4cc:	b0 f3       	brcs	.-20     	; 0x4ba <__stack+0x5b>
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__stack+0x8b>
 4d0:	f6 01       	movw	r30, r12
 4d2:	f7 fc       	sbrc	r15, 7
 4d4:	85 91       	lpm	r24, Z+
 4d6:	f7 fe       	sbrs	r15, 7
 4d8:	81 91       	ld	r24, Z+
 4da:	6f 01       	movw	r12, r30
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	b3 01       	movw	r22, r6
 4e0:	0a d1       	rcall	.+532    	; 0x6f6 <fputc>
 4e2:	e1 10       	cpse	r14, r1
 4e4:	ea 94       	dec	r14
 4e6:	01 50       	subi	r16, 0x01	; 1
 4e8:	10 40       	sbci	r17, 0x00	; 0
 4ea:	01 15       	cp	r16, r1
 4ec:	11 05       	cpc	r17, r1
 4ee:	81 f7       	brne	.-32     	; 0x4d0 <__stack+0x71>
 4f0:	e2 c0       	rjmp	.+452    	; 0x6b6 <__stack+0x257>
 4f2:	94 36       	cpi	r25, 0x64	; 100
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__stack+0x9b>
 4f6:	99 36       	cpi	r25, 0x69	; 105
 4f8:	61 f5       	brne	.+88     	; 0x552 <__stack+0xf3>
 4fa:	f7 fe       	sbrs	r15, 7
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <__stack+0xaf>
 4fe:	f5 01       	movw	r30, r10
 500:	20 81       	ld	r18, Z
 502:	31 81       	ldd	r19, Z+1	; 0x01
 504:	42 81       	ldd	r20, Z+2	; 0x02
 506:	53 81       	ldd	r21, Z+3	; 0x03
 508:	84 e0       	ldi	r24, 0x04	; 4
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0a c0       	rjmp	.+20     	; 0x522 <__stack+0xc3>
 50e:	f5 01       	movw	r30, r10
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	9c 01       	movw	r18, r24
 516:	44 27       	eor	r20, r20
 518:	37 fd       	sbrc	r19, 7
 51a:	40 95       	com	r20
 51c:	54 2f       	mov	r21, r20
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a8 0e       	add	r10, r24
 524:	b9 1e       	adc	r11, r25
 526:	9f e6       	ldi	r25, 0x6F	; 111
 528:	f9 22       	and	r15, r25
 52a:	57 ff       	sbrs	r21, 7
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__stack+0xe1>
 52e:	50 95       	com	r21
 530:	40 95       	com	r20
 532:	30 95       	com	r19
 534:	21 95       	neg	r18
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	4f 4f       	sbci	r20, 0xFF	; 255
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	e0 e8       	ldi	r30, 0x80	; 128
 53e:	fe 2a       	or	r15, r30
 540:	ca 01       	movw	r24, r20
 542:	b9 01       	movw	r22, r18
 544:	a1 01       	movw	r20, r2
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	01 d1       	rcall	.+514    	; 0x74e <__ultoa_invert>
 54c:	d8 2e       	mov	r13, r24
 54e:	d2 18       	sub	r13, r2
 550:	3f c0       	rjmp	.+126    	; 0x5d0 <__stack+0x171>
 552:	95 37       	cpi	r25, 0x75	; 117
 554:	29 f4       	brne	.+10     	; 0x560 <__stack+0x101>
 556:	1f 2d       	mov	r17, r15
 558:	1f 7e       	andi	r17, 0xEF	; 239
 55a:	2a e0       	ldi	r18, 0x0A	; 10
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	1d c0       	rjmp	.+58     	; 0x59a <__stack+0x13b>
 560:	1f 2d       	mov	r17, r15
 562:	19 7f       	andi	r17, 0xF9	; 249
 564:	9f 36       	cpi	r25, 0x6F	; 111
 566:	61 f0       	breq	.+24     	; 0x580 <__stack+0x121>
 568:	90 37       	cpi	r25, 0x70	; 112
 56a:	20 f4       	brcc	.+8      	; 0x574 <__stack+0x115>
 56c:	98 35       	cpi	r25, 0x58	; 88
 56e:	09 f0       	breq	.+2      	; 0x572 <__stack+0x113>
 570:	a5 c0       	rjmp	.+330    	; 0x6bc <__stack+0x25d>
 572:	0f c0       	rjmp	.+30     	; 0x592 <__stack+0x133>
 574:	90 37       	cpi	r25, 0x70	; 112
 576:	39 f0       	breq	.+14     	; 0x586 <__stack+0x127>
 578:	98 37       	cpi	r25, 0x78	; 120
 57a:	09 f0       	breq	.+2      	; 0x57e <__stack+0x11f>
 57c:	9f c0       	rjmp	.+318    	; 0x6bc <__stack+0x25d>
 57e:	04 c0       	rjmp	.+8      	; 0x588 <__stack+0x129>
 580:	28 e0       	ldi	r18, 0x08	; 8
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	0a c0       	rjmp	.+20     	; 0x59a <__stack+0x13b>
 586:	10 61       	ori	r17, 0x10	; 16
 588:	14 fd       	sbrc	r17, 4
 58a:	14 60       	ori	r17, 0x04	; 4
 58c:	20 e1       	ldi	r18, 0x10	; 16
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	04 c0       	rjmp	.+8      	; 0x59a <__stack+0x13b>
 592:	14 fd       	sbrc	r17, 4
 594:	16 60       	ori	r17, 0x06	; 6
 596:	20 e1       	ldi	r18, 0x10	; 16
 598:	32 e0       	ldi	r19, 0x02	; 2
 59a:	17 ff       	sbrs	r17, 7
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__stack+0x14f>
 59e:	f5 01       	movw	r30, r10
 5a0:	60 81       	ld	r22, Z
 5a2:	71 81       	ldd	r23, Z+1	; 0x01
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	93 81       	ldd	r25, Z+3	; 0x03
 5a8:	44 e0       	ldi	r20, 0x04	; 4
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	08 c0       	rjmp	.+16     	; 0x5be <__stack+0x15f>
 5ae:	f5 01       	movw	r30, r10
 5b0:	80 81       	ld	r24, Z
 5b2:	91 81       	ldd	r25, Z+1	; 0x01
 5b4:	bc 01       	movw	r22, r24
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	42 e0       	ldi	r20, 0x02	; 2
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	a4 0e       	add	r10, r20
 5c0:	b5 1e       	adc	r11, r21
 5c2:	a1 01       	movw	r20, r2
 5c4:	c4 d0       	rcall	.+392    	; 0x74e <__ultoa_invert>
 5c6:	d8 2e       	mov	r13, r24
 5c8:	d2 18       	sub	r13, r2
 5ca:	8f e7       	ldi	r24, 0x7F	; 127
 5cc:	f8 2e       	mov	r15, r24
 5ce:	f1 22       	and	r15, r17
 5d0:	f6 fe       	sbrs	r15, 6
 5d2:	0b c0       	rjmp	.+22     	; 0x5ea <__stack+0x18b>
 5d4:	5e ef       	ldi	r21, 0xFE	; 254
 5d6:	f5 22       	and	r15, r21
 5d8:	d9 14       	cp	r13, r9
 5da:	38 f4       	brcc	.+14     	; 0x5ea <__stack+0x18b>
 5dc:	f4 fe       	sbrs	r15, 4
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <__stack+0x18f>
 5e0:	f2 fc       	sbrc	r15, 2
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__stack+0x18f>
 5e4:	8f ee       	ldi	r24, 0xEF	; 239
 5e6:	f8 22       	and	r15, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__stack+0x18f>
 5ea:	1d 2d       	mov	r17, r13
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <__stack+0x191>
 5ee:	19 2d       	mov	r17, r9
 5f0:	f4 fe       	sbrs	r15, 4
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <__stack+0x1af>
 5f4:	fe 01       	movw	r30, r28
 5f6:	ed 0d       	add	r30, r13
 5f8:	f1 1d       	adc	r31, r1
 5fa:	80 81       	ld	r24, Z
 5fc:	80 33       	cpi	r24, 0x30	; 48
 5fe:	19 f4       	brne	.+6      	; 0x606 <__stack+0x1a7>
 600:	99 ee       	ldi	r25, 0xE9	; 233
 602:	f9 22       	and	r15, r25
 604:	08 c0       	rjmp	.+16     	; 0x616 <__stack+0x1b7>
 606:	1f 5f       	subi	r17, 0xFF	; 255
 608:	f2 fe       	sbrs	r15, 2
 60a:	05 c0       	rjmp	.+10     	; 0x616 <__stack+0x1b7>
 60c:	03 c0       	rjmp	.+6      	; 0x614 <__stack+0x1b5>
 60e:	8f 2d       	mov	r24, r15
 610:	86 78       	andi	r24, 0x86	; 134
 612:	09 f0       	breq	.+2      	; 0x616 <__stack+0x1b7>
 614:	1f 5f       	subi	r17, 0xFF	; 255
 616:	0f 2d       	mov	r16, r15
 618:	f3 fc       	sbrc	r15, 3
 61a:	13 c0       	rjmp	.+38     	; 0x642 <__stack+0x1e3>
 61c:	f0 fe       	sbrs	r15, 0
 61e:	0e c0       	rjmp	.+28     	; 0x63c <__stack+0x1dd>
 620:	1e 15       	cp	r17, r14
 622:	10 f0       	brcs	.+4      	; 0x628 <__stack+0x1c9>
 624:	9d 2c       	mov	r9, r13
 626:	0a c0       	rjmp	.+20     	; 0x63c <__stack+0x1dd>
 628:	9d 2c       	mov	r9, r13
 62a:	9e 0c       	add	r9, r14
 62c:	91 1a       	sub	r9, r17
 62e:	1e 2d       	mov	r17, r14
 630:	05 c0       	rjmp	.+10     	; 0x63c <__stack+0x1dd>
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	b3 01       	movw	r22, r6
 638:	5e d0       	rcall	.+188    	; 0x6f6 <fputc>
 63a:	1f 5f       	subi	r17, 0xFF	; 255
 63c:	1e 15       	cp	r17, r14
 63e:	c8 f3       	brcs	.-14     	; 0x632 <__stack+0x1d3>
 640:	04 c0       	rjmp	.+8      	; 0x64a <__stack+0x1eb>
 642:	1e 15       	cp	r17, r14
 644:	10 f4       	brcc	.+4      	; 0x64a <__stack+0x1eb>
 646:	e1 1a       	sub	r14, r17
 648:	01 c0       	rjmp	.+2      	; 0x64c <__stack+0x1ed>
 64a:	ee 24       	eor	r14, r14
 64c:	04 ff       	sbrs	r16, 4
 64e:	0e c0       	rjmp	.+28     	; 0x66c <__stack+0x20d>
 650:	80 e3       	ldi	r24, 0x30	; 48
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	b3 01       	movw	r22, r6
 656:	4f d0       	rcall	.+158    	; 0x6f6 <fputc>
 658:	02 ff       	sbrs	r16, 2
 65a:	1b c0       	rjmp	.+54     	; 0x692 <__stack+0x233>
 65c:	01 fd       	sbrc	r16, 1
 65e:	03 c0       	rjmp	.+6      	; 0x666 <__stack+0x207>
 660:	88 e7       	ldi	r24, 0x78	; 120
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e c0       	rjmp	.+28     	; 0x682 <__stack+0x223>
 666:	88 e5       	ldi	r24, 0x58	; 88
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0b c0       	rjmp	.+22     	; 0x682 <__stack+0x223>
 66c:	80 2f       	mov	r24, r16
 66e:	86 78       	andi	r24, 0x86	; 134
 670:	81 f0       	breq	.+32     	; 0x692 <__stack+0x233>
 672:	01 ff       	sbrs	r16, 1
 674:	02 c0       	rjmp	.+4      	; 0x67a <__stack+0x21b>
 676:	8b e2       	ldi	r24, 0x2B	; 43
 678:	01 c0       	rjmp	.+2      	; 0x67c <__stack+0x21d>
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	f7 fc       	sbrc	r15, 7
 67e:	8d e2       	ldi	r24, 0x2D	; 45
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	b3 01       	movw	r22, r6
 684:	38 d0       	rcall	.+112    	; 0x6f6 <fputc>
 686:	05 c0       	rjmp	.+10     	; 0x692 <__stack+0x233>
 688:	80 e3       	ldi	r24, 0x30	; 48
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	b3 01       	movw	r22, r6
 68e:	33 d0       	rcall	.+102    	; 0x6f6 <fputc>
 690:	9a 94       	dec	r9
 692:	d9 14       	cp	r13, r9
 694:	c8 f3       	brcs	.-14     	; 0x688 <__stack+0x229>
 696:	da 94       	dec	r13
 698:	f1 01       	movw	r30, r2
 69a:	ed 0d       	add	r30, r13
 69c:	f1 1d       	adc	r31, r1
 69e:	80 81       	ld	r24, Z
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	b3 01       	movw	r22, r6
 6a4:	28 d0       	rcall	.+80     	; 0x6f6 <fputc>
 6a6:	dd 20       	and	r13, r13
 6a8:	b1 f7       	brne	.-20     	; 0x696 <__stack+0x237>
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__stack+0x257>
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	b3 01       	movw	r22, r6
 6b2:	21 d0       	rcall	.+66     	; 0x6f6 <fputc>
 6b4:	ea 94       	dec	r14
 6b6:	ee 20       	and	r14, r14
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <__stack+0x24d>
 6ba:	50 ce       	rjmp	.-864    	; 0x35c <vfprintf+0x2e>
 6bc:	f3 01       	movw	r30, r6
 6be:	66 81       	ldd	r22, Z+6	; 0x06
 6c0:	77 81       	ldd	r23, Z+7	; 0x07
 6c2:	cb 01       	movw	r24, r22
 6c4:	2b 96       	adiw	r28, 0x0b	; 11
 6c6:	e2 e1       	ldi	r30, 0x12	; 18
 6c8:	bc c0       	rjmp	.+376    	; 0x842 <__epilogue_restores__>

000006ca <strnlen_P>:
 6ca:	fc 01       	movw	r30, r24
 6cc:	05 90       	lpm	r0, Z+
 6ce:	61 50       	subi	r22, 0x01	; 1
 6d0:	70 40       	sbci	r23, 0x00	; 0
 6d2:	01 10       	cpse	r0, r1
 6d4:	d8 f7       	brcc	.-10     	; 0x6cc <strnlen_P+0x2>
 6d6:	80 95       	com	r24
 6d8:	90 95       	com	r25
 6da:	8e 0f       	add	r24, r30
 6dc:	9f 1f       	adc	r25, r31
 6de:	08 95       	ret

000006e0 <strnlen>:
 6e0:	fc 01       	movw	r30, r24
 6e2:	61 50       	subi	r22, 0x01	; 1
 6e4:	70 40       	sbci	r23, 0x00	; 0
 6e6:	01 90       	ld	r0, Z+
 6e8:	01 10       	cpse	r0, r1
 6ea:	d8 f7       	brcc	.-10     	; 0x6e2 <strnlen+0x2>
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	8e 0f       	add	r24, r30
 6f2:	9f 1f       	adc	r25, r31
 6f4:	08 95       	ret

000006f6 <fputc>:
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	8c 01       	movw	r16, r24
 700:	eb 01       	movw	r28, r22
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	81 ff       	sbrs	r24, 1
 706:	1b c0       	rjmp	.+54     	; 0x73e <fputc+0x48>
 708:	82 ff       	sbrs	r24, 2
 70a:	0d c0       	rjmp	.+26     	; 0x726 <fputc+0x30>
 70c:	2e 81       	ldd	r18, Y+6	; 0x06
 70e:	3f 81       	ldd	r19, Y+7	; 0x07
 710:	8c 81       	ldd	r24, Y+4	; 0x04
 712:	9d 81       	ldd	r25, Y+5	; 0x05
 714:	28 17       	cp	r18, r24
 716:	39 07       	cpc	r19, r25
 718:	64 f4       	brge	.+24     	; 0x732 <fputc+0x3c>
 71a:	e8 81       	ld	r30, Y
 71c:	f9 81       	ldd	r31, Y+1	; 0x01
 71e:	01 93       	st	Z+, r16
 720:	f9 83       	std	Y+1, r31	; 0x01
 722:	e8 83       	st	Y, r30
 724:	06 c0       	rjmp	.+12     	; 0x732 <fputc+0x3c>
 726:	e8 85       	ldd	r30, Y+8	; 0x08
 728:	f9 85       	ldd	r31, Y+9	; 0x09
 72a:	80 2f       	mov	r24, r16
 72c:	09 95       	icall
 72e:	89 2b       	or	r24, r25
 730:	31 f4       	brne	.+12     	; 0x73e <fputc+0x48>
 732:	8e 81       	ldd	r24, Y+6	; 0x06
 734:	9f 81       	ldd	r25, Y+7	; 0x07
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	9f 83       	std	Y+7, r25	; 0x07
 73a:	8e 83       	std	Y+6, r24	; 0x06
 73c:	02 c0       	rjmp	.+4      	; 0x742 <fputc+0x4c>
 73e:	0f ef       	ldi	r16, 0xFF	; 255
 740:	1f ef       	ldi	r17, 0xFF	; 255
 742:	c8 01       	movw	r24, r16
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	08 95       	ret

0000074e <__ultoa_invert>:
 74e:	fa 01       	movw	r30, r20
 750:	aa 27       	eor	r26, r26
 752:	28 30       	cpi	r18, 0x08	; 8
 754:	51 f1       	breq	.+84     	; 0x7aa <__ultoa_invert+0x5c>
 756:	20 31       	cpi	r18, 0x10	; 16
 758:	81 f1       	breq	.+96     	; 0x7ba <__ultoa_invert+0x6c>
 75a:	e8 94       	clt
 75c:	6f 93       	push	r22
 75e:	6e 7f       	andi	r22, 0xFE	; 254
 760:	6e 5f       	subi	r22, 0xFE	; 254
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	af 4f       	sbci	r26, 0xFF	; 255
 76a:	b1 e0       	ldi	r27, 0x01	; 1
 76c:	3e d0       	rcall	.+124    	; 0x7ea <__ultoa_invert+0x9c>
 76e:	b4 e0       	ldi	r27, 0x04	; 4
 770:	3c d0       	rcall	.+120    	; 0x7ea <__ultoa_invert+0x9c>
 772:	67 0f       	add	r22, r23
 774:	78 1f       	adc	r23, r24
 776:	89 1f       	adc	r24, r25
 778:	9a 1f       	adc	r25, r26
 77a:	a1 1d       	adc	r26, r1
 77c:	68 0f       	add	r22, r24
 77e:	79 1f       	adc	r23, r25
 780:	8a 1f       	adc	r24, r26
 782:	91 1d       	adc	r25, r1
 784:	a1 1d       	adc	r26, r1
 786:	6a 0f       	add	r22, r26
 788:	71 1d       	adc	r23, r1
 78a:	81 1d       	adc	r24, r1
 78c:	91 1d       	adc	r25, r1
 78e:	a1 1d       	adc	r26, r1
 790:	20 d0       	rcall	.+64     	; 0x7d2 <__ultoa_invert+0x84>
 792:	09 f4       	brne	.+2      	; 0x796 <__ultoa_invert+0x48>
 794:	68 94       	set
 796:	3f 91       	pop	r19
 798:	2a e0       	ldi	r18, 0x0A	; 10
 79a:	26 9f       	mul	r18, r22
 79c:	11 24       	eor	r1, r1
 79e:	30 19       	sub	r19, r0
 7a0:	30 5d       	subi	r19, 0xD0	; 208
 7a2:	31 93       	st	Z+, r19
 7a4:	de f6       	brtc	.-74     	; 0x75c <__ultoa_invert+0xe>
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret
 7aa:	46 2f       	mov	r20, r22
 7ac:	47 70       	andi	r20, 0x07	; 7
 7ae:	40 5d       	subi	r20, 0xD0	; 208
 7b0:	41 93       	st	Z+, r20
 7b2:	b3 e0       	ldi	r27, 0x03	; 3
 7b4:	0f d0       	rcall	.+30     	; 0x7d4 <__ultoa_invert+0x86>
 7b6:	c9 f7       	brne	.-14     	; 0x7aa <__ultoa_invert+0x5c>
 7b8:	f6 cf       	rjmp	.-20     	; 0x7a6 <__ultoa_invert+0x58>
 7ba:	46 2f       	mov	r20, r22
 7bc:	4f 70       	andi	r20, 0x0F	; 15
 7be:	40 5d       	subi	r20, 0xD0	; 208
 7c0:	4a 33       	cpi	r20, 0x3A	; 58
 7c2:	18 f0       	brcs	.+6      	; 0x7ca <__ultoa_invert+0x7c>
 7c4:	49 5d       	subi	r20, 0xD9	; 217
 7c6:	31 fd       	sbrc	r19, 1
 7c8:	40 52       	subi	r20, 0x20	; 32
 7ca:	41 93       	st	Z+, r20
 7cc:	02 d0       	rcall	.+4      	; 0x7d2 <__ultoa_invert+0x84>
 7ce:	a9 f7       	brne	.-22     	; 0x7ba <__ultoa_invert+0x6c>
 7d0:	ea cf       	rjmp	.-44     	; 0x7a6 <__ultoa_invert+0x58>
 7d2:	b4 e0       	ldi	r27, 0x04	; 4
 7d4:	a6 95       	lsr	r26
 7d6:	97 95       	ror	r25
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	ba 95       	dec	r27
 7e0:	c9 f7       	brne	.-14     	; 0x7d4 <__ultoa_invert+0x86>
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	61 05       	cpc	r22, r1
 7e6:	71 05       	cpc	r23, r1
 7e8:	08 95       	ret
 7ea:	9b 01       	movw	r18, r22
 7ec:	ac 01       	movw	r20, r24
 7ee:	0a 2e       	mov	r0, r26
 7f0:	06 94       	lsr	r0
 7f2:	57 95       	ror	r21
 7f4:	47 95       	ror	r20
 7f6:	37 95       	ror	r19
 7f8:	27 95       	ror	r18
 7fa:	ba 95       	dec	r27
 7fc:	c9 f7       	brne	.-14     	; 0x7f0 <__ultoa_invert+0xa2>
 7fe:	62 0f       	add	r22, r18
 800:	73 1f       	adc	r23, r19
 802:	84 1f       	adc	r24, r20
 804:	95 1f       	adc	r25, r21
 806:	a0 1d       	adc	r26, r0
 808:	08 95       	ret

0000080a <__prologue_saves__>:
 80a:	2f 92       	push	r2
 80c:	3f 92       	push	r3
 80e:	4f 92       	push	r4
 810:	5f 92       	push	r5
 812:	6f 92       	push	r6
 814:	7f 92       	push	r7
 816:	8f 92       	push	r8
 818:	9f 92       	push	r9
 81a:	af 92       	push	r10
 81c:	bf 92       	push	r11
 81e:	cf 92       	push	r12
 820:	df 92       	push	r13
 822:	ef 92       	push	r14
 824:	ff 92       	push	r15
 826:	0f 93       	push	r16
 828:	1f 93       	push	r17
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	ca 1b       	sub	r28, r26
 834:	db 0b       	sbc	r29, r27
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	f8 94       	cli
 83a:	de bf       	out	0x3e, r29	; 62
 83c:	0f be       	out	0x3f, r0	; 63
 83e:	cd bf       	out	0x3d, r28	; 61
 840:	09 94       	ijmp

00000842 <__epilogue_restores__>:
 842:	2a 88       	ldd	r2, Y+18	; 0x12
 844:	39 88       	ldd	r3, Y+17	; 0x11
 846:	48 88       	ldd	r4, Y+16	; 0x10
 848:	5f 84       	ldd	r5, Y+15	; 0x0f
 84a:	6e 84       	ldd	r6, Y+14	; 0x0e
 84c:	7d 84       	ldd	r7, Y+13	; 0x0d
 84e:	8c 84       	ldd	r8, Y+12	; 0x0c
 850:	9b 84       	ldd	r9, Y+11	; 0x0b
 852:	aa 84       	ldd	r10, Y+10	; 0x0a
 854:	b9 84       	ldd	r11, Y+9	; 0x09
 856:	c8 84       	ldd	r12, Y+8	; 0x08
 858:	df 80       	ldd	r13, Y+7	; 0x07
 85a:	ee 80       	ldd	r14, Y+6	; 0x06
 85c:	fd 80       	ldd	r15, Y+5	; 0x05
 85e:	0c 81       	ldd	r16, Y+4	; 0x04
 860:	1b 81       	ldd	r17, Y+3	; 0x03
 862:	aa 81       	ldd	r26, Y+2	; 0x02
 864:	b9 81       	ldd	r27, Y+1	; 0x01
 866:	ce 0f       	add	r28, r30
 868:	d1 1d       	adc	r29, r1
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	ed 01       	movw	r28, r26
 876:	08 95       	ret

00000878 <_exit>:
 878:	f8 94       	cli

0000087a <__stop_program>:
 87a:	ff cf       	rjmp	.-2      	; 0x87a <__stop_program>
