
HID-Data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008ea  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800102  000008ec  00000960  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000204  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d72  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f5  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000784  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c3  00000000  00000000  00002aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_1>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  48:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  54:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
  68:	06 00 ff 09 01 a1 01 85 77 15 00 26 ff 00 75 08     ........w..&..u.
  78:	95 c7 09 00 b2 02 01 09 01 95 07 81 02 c0           ..............

00000086 <usbDescriptorString0>:
  86:	04 03 09 04                                         ....

0000008a <usbDescriptorStringVendor>:
  8a:	20 03 77 00 77 00 77 00 2e 00 63 00 6f 00 72 00      .w.w.w...c.o.r.
  9a:	74 00 65 00 78 00 62 00 73 00 2e 00 73 00 6b 00     t.e.x.b.s...s.k.

000000aa <usbDescriptorStringDevice>:
  aa:	16 03 53 00 6f 00 6c 00 61 00 72 00 69 00 73 00     ..S.o.l.a.r.i.s.
  ba:	20 00 33 00 47 00                                    .3.G.

000000c0 <usbDescriptorDevice>:
  c0:	12 01 10 01 00 00 00 08 c0 16 df 05 01 01 01 02     ................
  d0:	00 01                                               ..

000000d2 <usbDescriptorConfiguration>:
  d2:	09 02 22 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..".............
  e2:	00 00 09 21 01 01 00 01 22 1e 00 07 05 81 03 08     ...!....".......
  f2:	00 64                                               .d

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d4 e0       	ldi	r29, 0x04	; 4
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	ea ee       	ldi	r30, 0xEA	; 234
 108:	f8 e0       	ldi	r31, 0x08	; 8
 10a:	02 c0       	rjmp	.+4      	; 0x110 <.do_copy_data_start>

0000010c <.do_copy_data_loop>:
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0

00000110 <.do_copy_data_start>:
 110:	a2 30       	cpi	r26, 0x02	; 2
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <.do_copy_data_loop>

00000116 <__do_clear_bss>:
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	a2 e0       	ldi	r26, 0x02	; 2
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	ab 33       	cpi	r26, 0x3B	; 59
 122:	b1 07       	cpc	r27, r17
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 12a:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <_exit>

0000012e <__bad_interrupt>:
 12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
 132:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
 134:	f9 99       	sbic	0x1f, 1	; 31
 136:	fe cf       	rjmp	.-4      	; 0x134 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 138:	32 bd       	out	0x22, r19	; 34
 13a:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 13c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 13e:	80 b5       	in	r24, 0x20	; 32
}
 140:	08 95       	ret

00000142 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
 142:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
 144:	f9 99       	sbic	0x1f, 1	; 31
 146:	fe cf       	rjmp	.-4      	; 0x144 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 148:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 14a:	32 bd       	out	0x22, r19	; 34
 14c:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
 14e:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	fa 9a       	sbi	0x1f, 2	; 31
 156:	f9 9a       	sbi	0x1f, 1	; 31
 158:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
 15a:	08 95       	ret

0000015c <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 15c:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID class request */
 15e:	80 81       	ld	r24, Z
 160:	80 76       	andi	r24, 0x60	; 96
 162:	80 32       	cpi	r24, 0x20	; 32
 164:	61 f4       	brne	.+24     	; 0x17e <usbFunctionSetup+0x22>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 166:	81 81       	ldd	r24, Z+1	; 0x01
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	11 f0       	breq	.+4      	; 0x170 <usbFunctionSetup+0x14>
            /* since we have only one report type, we can ignore the report-ID */
            bytesRemaining = 0xC7;
            currentAddress = 0;
            return USB_NO_MSG;  /* use usbFunctionRead() to obtain data */
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 16c:	89 30       	cpi	r24, 0x09	; 9
 16e:	39 f4       	brne	.+14     	; 0x17e <usbFunctionSetup+0x22>
            /* since we have only one report type, we can ignore the report-ID */
            bytesRemaining = 0xC7;
 170:	87 ec       	ldi	r24, 0xC7	; 199
 172:	80 93 03 01 	sts	0x0103, r24
            currentAddress = 0;
 176:	10 92 02 01 	sts	0x0102, r1
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	08 95       	ret
            return USB_NO_MSG;  /* use usbFunctionWrite() to receive data from host */
 17e:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* ignore vendor type requests, we don't use any */
    }
    return 0;
}
 180:	08 95       	ret

00000182 <main>:
#define 	BV(bit)   (1<<(bit))
#define 	cbi(reg, bit)   reg &= ~(BV(bit))
#define 	sbi(reg, bit)   reg |= (BV(bit))

int main(void)
{
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	29 97       	sbiw	r28, 0x09	; 9
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
uchar   i;
uchar data[0x09];
uchar test;

sbi(PORTB,Tl0);
 19c:	2d 9a       	sbi	0x05, 5	; 5
cbi(DDRB,Tl0);
 19e:	25 98       	cbi	0x04, 5	; 4


    test=0;
	wdt_enable(WDTO_1S);
 1a0:	2e e0       	ldi	r18, 0x0E	; 14
 1a2:	88 e1       	ldi	r24, 0x18	; 24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	a8 95       	wdr
 1ac:	80 93 60 00 	sts	0x0060, r24
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	20 93 60 00 	sts	0x0060, r18
     */
    /* RESET status: all port bits are inputs without pull-up.
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    usbInit();
 1b6:	0e 94 4a 01 	call	0x294	; 0x294 <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 1ba:	56 9a       	sbi	0x0a, 6	; 10
 1bc:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	48 eb       	ldi	r20, 0xB8	; 184
 1c0:	5b e0       	ldi	r21, 0x0B	; 11
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <main+0x4a>
    i = 0;

    while(--i)
	{             /* fake USB disconnect for > 250 ms */
       wdt_reset();
 1c4:	a8 95       	wdr
 1c6:	ca 01       	movw	r24, r20
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x46>
     */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;

    while(--i)
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <main+0x42>
	{             /* fake USB disconnect for > 250 ms */
       wdt_reset();
       _delay_ms(1);
    }

    usbDeviceConnect();
 1d0:	56 98       	cbi	0x0a, 6	; 10
    sei();
 1d2:	78 94       	sei
    \a __dst.
 */
static __inline__ void
eeprom_read_block (void *__dst, const void *__src, size_t __n)
{
    __eerd_block (__dst, __src, __n, eeprom_read_byte);
 1d4:	8e 01       	movw	r16, r28
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
		 	while  (!(PINB & (1<<Tl0)));

				if( usbInterruptIsReady())
				{
				eeprom_read_block((uchar*)data, 0 , 0x08);
				data[0]=0x78;
 1da:	88 e7       	ldi	r24, 0x78	; 120
 1dc:	f8 2e       	mov	r15, r24
    }

    usbDeviceConnect();
    sei();
    for(;;){                /* main event loop */
        wdt_reset();
 1de:	a8 95       	wdr
        usbPoll();
 1e0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <usbPoll>
//				usbSetInterrupt((uchar*) data, 0);
//				test=0;
//				}


		 if (!(PINB & (1<<Tl0))) 
 1e4:	1d 99       	sbic	0x03, 5	; 3
 1e6:	fb cf       	rjmp	.-10     	; 0x1de <main+0x5c>
		 	{
		 	while  (!(PINB & (1<<Tl0)));
 1e8:	1d 9b       	sbis	0x03, 5	; 3
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x66>

				if( usbInterruptIsReady())
 1ec:	80 91 10 01 	lds	r24, 0x0110
 1f0:	84 ff       	sbrs	r24, 4
 1f2:	f5 cf       	rjmp	.-22     	; 0x1de <main+0x5c>
 1f4:	29 e9       	ldi	r18, 0x99	; 153
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	48 e0       	ldi	r20, 0x08	; 8
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	c8 01       	movw	r24, r16
 202:	0e 94 04 04 	call	0x808	; 0x808 <__eerd_block>
				{
				eeprom_read_block((uchar*)data, 0 , 0x08);
				data[0]=0x78;
 206:	f9 82       	std	Y+1, r15	; 0x01
				usbSetInterrupt((uchar*) data, 0x08);
 208:	68 e0       	ldi	r22, 0x08	; 8
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 57 01 	call	0x2ae	; 0x2ae <usbSetInterrupt>
 210:	e6 cf       	rjmp	.-52     	; 0x1de <main+0x5c>

00000212 <usbFunctionRead>:

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar   usbFunctionRead(uchar *data, uchar len)
{
 212:	1f 93       	push	r17
 214:	20 91 03 01 	lds	r18, 0x0103
 218:	16 2f       	mov	r17, r22
 21a:	26 17       	cp	r18, r22
 21c:	08 f4       	brcc	.+2      	; 0x220 <usbFunctionRead+0xe>
 21e:	12 2f       	mov	r17, r18
 220:	60 91 02 01 	lds	r22, 0x0102
 224:	29 e9       	ldi	r18, 0x99	; 153
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	41 2f       	mov	r20, r17
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 04 04 	call	0x808	; 0x808 <__eerd_block>
    if(len > bytesRemaining)
        len = bytesRemaining;
    eeprom_read_block(data, (uchar *)0 + currentAddress, len);
    currentAddress += len;
 232:	80 91 02 01 	lds	r24, 0x0102
 236:	81 0f       	add	r24, r17
 238:	80 93 02 01 	sts	0x0102, r24
    bytesRemaining -= len;
 23c:	80 91 03 01 	lds	r24, 0x0103
 240:	81 1b       	sub	r24, r17
 242:	80 93 03 01 	sts	0x0103, r24
    return len;
}
 246:	81 2f       	mov	r24, r17
 248:	1f 91       	pop	r17
 24a:	08 95       	ret

0000024c <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
 24c:	1f 93       	push	r17
    if(bytesRemaining == 0)
 24e:	20 91 03 01 	lds	r18, 0x0103
 252:	22 23       	and	r18, r18
 254:	d9 f0       	breq	.+54     	; 0x28c <usbFunctionWrite+0x40>
 256:	16 2f       	mov	r17, r22
 258:	26 17       	cp	r18, r22
 25a:	08 f4       	brcc	.+2      	; 0x25e <usbFunctionWrite+0x12>
 25c:	12 2f       	mov	r17, r18
    \note The argument order is mismatch with common functions like strcpy().
 */
static __inline__ void
eeprom_write_block (const void *__src, void *__dst, size_t __n)
{
    __eewr_block (__dst, __src, __n, eeprom_write_byte);
 25e:	21 ea       	ldi	r18, 0xA1	; 161
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	41 2f       	mov	r20, r17
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	bc 01       	movw	r22, r24
 268:	80 91 02 01 	lds	r24, 0x0102
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 20 04 	call	0x840	; 0x840 <__eewr_block>
        return 1;               /* end of transfer */
    if(len > bytesRemaining)
        len = bytesRemaining;
    eeprom_write_block(data, (uchar *)0 + currentAddress, len);
    currentAddress += len;
 272:	80 91 02 01 	lds	r24, 0x0102
 276:	81 0f       	add	r24, r17
 278:	80 93 02 01 	sts	0x0102, r24
    bytesRemaining -= len;
 27c:	80 91 03 01 	lds	r24, 0x0103
 280:	81 1b       	sub	r24, r17
 282:	80 93 03 01 	sts	0x0103, r24
    return bytesRemaining == 0; /* return 1 if this was the last chunk */
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	88 23       	and	r24, r24
 28a:	09 f4       	brne	.+2      	; 0x28e <usbFunctionWrite+0x42>
 28c:	91 e0       	ldi	r25, 0x01	; 1
}
 28e:	89 2f       	mov	r24, r25
 290:	1f 91       	pop	r17
 292:	08 95       	ret

00000294 <usbInit>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
 294:	e9 e6       	ldi	r30, 0x69	; 105
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	80 83       	st	Z, r24
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 29e:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 2a0:	8b e4       	ldi	r24, 0x4B	; 75
 2a2:	80 93 11 01 	sts	0x0111, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 2a6:	8a e5       	ldi	r24, 0x5A	; 90
 2a8:	80 93 10 01 	sts	0x0110, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 2ac:	08 95       	ret

000002ae <usbSetInterrupt>:
    usbCrc16Append(&txStatus->buffer[1], len);
    txStatus->len = len + 4;    /* len must be given including sync byte */
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 2ae:	1f 93       	push	r17
 2b0:	dc 01       	movw	r26, r24
 2b2:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 2b4:	80 91 10 01 	lds	r24, 0x0110
 2b8:	84 ff       	sbrs	r24, 4
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 2bc:	80 91 11 01 	lds	r24, 0x0111
 2c0:	98 e8       	ldi	r25, 0x88	; 136
 2c2:	89 27       	eor	r24, r25
 2c4:	80 93 11 01 	sts	0x0111, r24
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 2ca:	8a e5       	ldi	r24, 0x5A	; 90
 2cc:	80 93 10 01 	sts	0x0110, r24
 2d0:	91 2f       	mov	r25, r17
 2d2:	e2 e1       	ldi	r30, 0x12	; 18
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 2d6:	8d 91       	ld	r24, X+
 2d8:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 2da:	91 50       	subi	r25, 0x01	; 1
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 2de:	61 2f       	mov	r22, r17
 2e0:	82 e1       	ldi	r24, 0x12	; 18
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 c6 02 	call	0x58c	; 0x58c <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 2e8:	1c 5f       	subi	r17, 0xFC	; 252
 2ea:	10 93 10 01 	sts	0x0110, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 2f8:	60 91 21 01 	lds	r22, 0x0121
 2fc:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 2fe:	67 fd       	sbrc	r22, 7
 300:	c4 c0       	rjmp	.+392    	; 0x48a <usbPoll+0x198>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 302:	80 91 1e 01 	lds	r24, 0x011E
 306:	cc e0       	ldi	r28, 0x0C	; 12
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	c8 1b       	sub	r28, r24
 30c:	d1 09       	sbc	r29, r1
 30e:	cb 5d       	subi	r28, 0xDB	; 219
 310:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 312:	80 91 1d 01 	lds	r24, 0x011D
 316:	8d 32       	cpi	r24, 0x2D	; 45
 318:	09 f0       	breq	.+2      	; 0x31c <usbPoll+0x2a>
 31a:	a4 c0       	rjmp	.+328    	; 0x464 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 31c:	68 30       	cpi	r22, 0x08	; 8
 31e:	09 f0       	breq	.+2      	; 0x322 <usbPoll+0x30>
 320:	b2 c0       	rjmp	.+356    	; 0x486 <usbPoll+0x194>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 322:	83 ec       	ldi	r24, 0xC3	; 195
 324:	80 93 05 01 	sts	0x0105, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 328:	8a e5       	ldi	r24, 0x5A	; 90
 32a:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
 32e:	10 92 04 01 	sts	0x0104, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 332:	88 81       	ld	r24, Y
 334:	80 76       	andi	r24, 0x60	; 96
 336:	41 f0       	breq	.+16     	; 0x348 <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 ae 00 	call	0x15c	; 0x15c <usbFunctionSetup>
 33e:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 340:	8f 3f       	cpi	r24, 0xFF	; 255
 342:	09 f4       	brne	.+2      	; 0x346 <usbPoll+0x54>
 344:	7e c0       	rjmp	.+252    	; 0x442 <usbPoll+0x150>
 346:	84 c0       	rjmp	.+264    	; 0x450 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 348:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 34a:	10 92 0e 01 	sts	0x010E, r1
    SWITCH_START(rq->bRequest)
 34e:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 350:	88 23       	and	r24, r24
 352:	21 f4       	brne	.+8      	; 0x35c <usbPoll+0x6a>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 354:	10 92 0f 01 	sts	0x010F, r1
 358:	22 e0       	ldi	r18, 0x02	; 2
 35a:	6c c0       	rjmp	.+216    	; 0x434 <usbPoll+0x142>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 35c:	85 30       	cpi	r24, 0x05	; 5
 35e:	19 f4       	brne	.+6      	; 0x366 <usbPoll+0x74>
        usbNewDeviceAddr = value;
 360:	90 93 22 01 	sts	0x0122, r25
 364:	66 c0       	rjmp	.+204    	; 0x432 <usbPoll+0x140>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 366:	86 30       	cpi	r24, 0x06	; 6
 368:	09 f0       	breq	.+2      	; 0x36c <usbPoll+0x7a>
 36a:	4f c0       	rjmp	.+158    	; 0x40a <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	41 f4       	brne	.+16     	; 0x382 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 372:	80 ec       	ldi	r24, 0xC0	; 192
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 20 01 	sts	0x0120, r25
 37a:	80 93 1f 01 	sts	0x011F, r24
 37e:	22 e1       	ldi	r18, 0x12	; 18
 380:	40 c0       	rjmp	.+128    	; 0x402 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	41 f4       	brne	.+16     	; 0x396 <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 386:	82 ed       	ldi	r24, 0xD2	; 210
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 20 01 	sts	0x0120, r25
 38e:	80 93 1f 01 	sts	0x011F, r24
 392:	22 e2       	ldi	r18, 0x22	; 34
 394:	36 c0       	rjmp	.+108    	; 0x402 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	f9 f4       	brne	.+62     	; 0x3d8 <usbPoll+0xe6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 39c:	88 23       	and	r24, r24
 39e:	41 f4       	brne	.+16     	; 0x3b0 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 3a0:	86 e8       	ldi	r24, 0x86	; 134
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 20 01 	sts	0x0120, r25
 3a8:	80 93 1f 01 	sts	0x011F, r24
 3ac:	24 e0       	ldi	r18, 0x04	; 4
 3ae:	29 c0       	rjmp	.+82     	; 0x402 <usbPoll+0x110>
        SWITCH_CASE(1)
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	41 f4       	brne	.+16     	; 0x3c4 <usbPoll+0xd2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 3b4:	8a e8       	ldi	r24, 0x8A	; 138
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 20 01 	sts	0x0120, r25
 3bc:	80 93 1f 01 	sts	0x011F, r24
 3c0:	20 e2       	ldi	r18, 0x20	; 32
 3c2:	1f c0       	rjmp	.+62     	; 0x402 <usbPoll+0x110>
        SWITCH_CASE(2)
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	e1 f4       	brne	.+56     	; 0x400 <usbPoll+0x10e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 3c8:	8a ea       	ldi	r24, 0xAA	; 170
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 20 01 	sts	0x0120, r25
 3d0:	80 93 1f 01 	sts	0x011F, r24
 3d4:	26 e1       	ldi	r18, 0x16	; 22
 3d6:	15 c0       	rjmp	.+42     	; 0x402 <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 3d8:	81 32       	cpi	r24, 0x21	; 33
 3da:	41 f4       	brne	.+16     	; 0x3ec <usbPoll+0xfa>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 3dc:	84 ee       	ldi	r24, 0xE4	; 228
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 20 01 	sts	0x0120, r25
 3e4:	80 93 1f 01 	sts	0x011F, r24
 3e8:	29 e0       	ldi	r18, 0x09	; 9
 3ea:	0b c0       	rjmp	.+22     	; 0x402 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 3ec:	82 32       	cpi	r24, 0x22	; 34
 3ee:	41 f4       	brne	.+16     	; 0x400 <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 3f0:	88 e6       	ldi	r24, 0x68	; 104
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 20 01 	sts	0x0120, r25
 3f8:	80 93 1f 01 	sts	0x011F, r24
 3fc:	2e e1       	ldi	r18, 0x1E	; 30
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <usbPoll+0x110>
 400:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 402:	80 e4       	ldi	r24, 0x40	; 64
 404:	80 93 04 01 	sts	0x0104, r24
 408:	23 c0       	rjmp	.+70     	; 0x450 <usbPoll+0x15e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 40a:	88 30       	cpi	r24, 0x08	; 8
 40c:	21 f4       	brne	.+8      	; 0x416 <usbPoll+0x124>
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	84 e2       	ldi	r24, 0x24	; 36
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	11 c0       	rjmp	.+34     	; 0x438 <usbPoll+0x146>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 416:	89 30       	cpi	r24, 0x09	; 9
 418:	19 f4       	brne	.+6      	; 0x420 <usbPoll+0x12e>
        usbConfiguration = value;
 41a:	90 93 24 01 	sts	0x0124, r25
 41e:	09 c0       	rjmp	.+18     	; 0x432 <usbPoll+0x140>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 420:	8a 30       	cpi	r24, 0x0A	; 10
 422:	11 f4       	brne	.+4      	; 0x428 <usbPoll+0x136>
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	06 c0       	rjmp	.+12     	; 0x434 <usbPoll+0x142>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 428:	8b 30       	cpi	r24, 0x0B	; 11
 42a:	19 f4       	brne	.+6      	; 0x432 <usbPoll+0x140>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 42c:	8b e4       	ldi	r24, 0x4B	; 75
 42e:	80 93 11 01 	sts	0x0111, r24
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	8e e0       	ldi	r24, 0x0E	; 14
 436:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 438:	90 93 20 01 	sts	0x0120, r25
 43c:	80 93 1f 01 	sts	0x011F, r24
 440:	07 c0       	rjmp	.+14     	; 0x450 <usbPoll+0x15e>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 442:	88 81       	ld	r24, Y
 444:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 446:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	80 93 04 01 	sts	0x0104, r24
 44e:	06 c0       	rjmp	.+12     	; 0x45c <usbPoll+0x16a>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 450:	8f 81       	ldd	r24, Y+7	; 0x07
 452:	88 23       	and	r24, r24
 454:	19 f4       	brne	.+6      	; 0x45c <usbPoll+0x16a>
 456:	8e 81       	ldd	r24, Y+6	; 0x06
 458:	82 17       	cp	r24, r18
 45a:	08 f0       	brcs	.+2      	; 0x45e <usbPoll+0x16c>
 45c:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 45e:	80 93 01 01 	sts	0x0101, r24
 462:	11 c0       	rjmp	.+34     	; 0x486 <usbPoll+0x194>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 464:	80 91 04 01 	lds	r24, 0x0104
 468:	87 ff       	sbrs	r24, 7
 46a:	0d c0       	rjmp	.+26     	; 0x486 <usbPoll+0x194>
            uchar rval = usbFunctionWrite(data, len);
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 26 01 	call	0x24c	; 0x24c <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 472:	8f 3f       	cpi	r24, 0xFF	; 255
 474:	21 f4       	brne	.+8      	; 0x47e <usbPoll+0x18c>
                usbTxLen = USBPID_STALL;
 476:	8e e1       	ldi	r24, 0x1E	; 30
 478:	80 93 00 01 	sts	0x0100, r24
 47c:	04 c0       	rjmp	.+8      	; 0x486 <usbPoll+0x194>
            }else if(rval != 0){    /* This was the final package */
 47e:	88 23       	and	r24, r24
 480:	11 f0       	breq	.+4      	; 0x486 <usbPoll+0x194>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 482:	10 92 01 01 	sts	0x0101, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 486:	10 92 21 01 	sts	0x0121, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 48a:	80 91 00 01 	lds	r24, 0x0100
 48e:	84 ff       	sbrs	r24, 4
 490:	5a c0       	rjmp	.+180    	; 0x546 <__stack+0x47>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 492:	80 91 01 01 	lds	r24, 0x0101
 496:	8f 3f       	cpi	r24, 0xFF	; 255
 498:	09 f4       	brne	.+2      	; 0x49c <usbPoll+0x1aa>
 49a:	55 c0       	rjmp	.+170    	; 0x546 <__stack+0x47>
 49c:	18 2f       	mov	r17, r24
 49e:	89 30       	cpi	r24, 0x09	; 9
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <usbPoll+0x1b2>
 4a2:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 4a4:	81 1b       	sub	r24, r17
 4a6:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 4aa:	80 91 05 01 	lds	r24, 0x0105
 4ae:	98 e8       	ldi	r25, 0x88	; 136
 4b0:	89 27       	eor	r24, r25
 4b2:	80 93 05 01 	sts	0x0105, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 4b6:	11 23       	and	r17, r17
 4b8:	99 f1       	breq	.+102    	; 0x520 <__stack+0x21>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 4ba:	80 91 04 01 	lds	r24, 0x0104
 4be:	87 ff       	sbrs	r24, 7
 4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <usbPoll+0x1e2>
            len = usbFunctionRead(data, len);
 4c2:	61 2f       	mov	r22, r17
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 09 01 	call	0x212	; 0x212 <usbFunctionRead>
 4cc:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 4ce:	89 30       	cpi	r24, 0x09	; 9
 4d0:	a0 f5       	brcc	.+104    	; 0x53a <__stack+0x3b>
 4d2:	26 c0       	rjmp	.+76     	; 0x520 <__stack+0x21>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 4d4:	20 91 1f 01 	lds	r18, 0x011F
 4d8:	30 91 20 01 	lds	r19, 0x0120
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 4dc:	86 ff       	sbrs	r24, 6
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <usbPoll+0x208>
 4e0:	a6 e0       	ldi	r26, 0x06	; 6
 4e2:	b1 e0       	ldi	r27, 0x01	; 1
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 4e8:	f9 01       	movw	r30, r18
 4ea:	e8 0f       	add	r30, r24
 4ec:	f9 1f       	adc	r31, r25
 4ee:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 4f0:	ed 93       	st	X+, r30
 4f2:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 4f4:	18 17       	cp	r17, r24
 4f6:	c1 f7       	brne	.-16     	; 0x4e8 <usbPoll+0x1f6>
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__stack+0xb>
 4fa:	91 2f       	mov	r25, r17
 4fc:	d9 01       	movw	r26, r18
 4fe:	e6 e0       	ldi	r30, 0x06	; 6
 500:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 502:	8d 91       	ld	r24, X+
 504:	81 93       	st	Z+, r24
                }while(--i);
 506:	91 50       	subi	r25, 0x01	; 1
 508:	e1 f7       	brne	.-8      	; 0x502 <__stack+0x3>
 50a:	11 50       	subi	r17, 0x01	; 1
 50c:	81 2f       	mov	r24, r17
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	1f 5f       	subi	r17, 0xFF	; 255
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	82 0f       	add	r24, r18
 516:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 518:	90 93 20 01 	sts	0x0120, r25
 51c:	80 93 1f 01 	sts	0x011F, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 520:	61 2f       	mov	r22, r17
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 c6 02 	call	0x58c	; 0x58c <usbCrc16Append>
        len += 4;           /* length including sync byte */
 52a:	61 2f       	mov	r22, r17
 52c:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 52e:	6c 30       	cpi	r22, 0x0C	; 12
 530:	41 f0       	breq	.+16     	; 0x542 <__stack+0x43>
            usbMsgLen = USB_NO_MSG;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	80 93 01 01 	sts	0x0101, r24
 538:	04 c0       	rjmp	.+8      	; 0x542 <__stack+0x43>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	80 93 01 01 	sts	0x0101, r24
 540:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 542:	60 93 00 01 	sts	0x0100, r22
 546:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 548:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 54a:	84 74       	andi	r24, 0x44	; 68
 54c:	31 f4       	brne	.+12     	; 0x55a <__stack+0x5b>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	d9 f7       	brne	.-10     	; 0x548 <__stack+0x49>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 552:	10 92 22 01 	sts	0x0122, r1
    usbDeviceAddr = 0;
 556:	10 92 1c 01 	sts	0x011C, r1
    usbResetStall();
isNotReset:
    usbHandleResetHook(i);
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	08 95       	ret

00000562 <usbCrc16>:
 562:	a8 2f       	mov	r26, r24
 564:	b9 2f       	mov	r27, r25
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	50 ea       	ldi	r21, 0xA0	; 160
 56e:	60 95       	com	r22
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	09 c0       	rjmp	.+18     	; 0x586 <usbCrcLoopEntry>

00000574 <usbCrcByteLoop>:
 574:	2d 91       	ld	r18, X+
 576:	82 27       	eor	r24, r18

00000578 <usbCrcBitLoop>:
 578:	97 95       	ror	r25
 57a:	87 95       	ror	r24
 57c:	10 f0       	brcs	.+4      	; 0x582 <usbCrcNoXor>
 57e:	84 27       	eor	r24, r20
 580:	95 27       	eor	r25, r21

00000582 <usbCrcNoXor>:
 582:	30 5e       	subi	r19, 0xE0	; 224
 584:	c8 f3       	brcs	.-14     	; 0x578 <usbCrcBitLoop>

00000586 <usbCrcLoopEntry>:
 586:	6f 5f       	subi	r22, 0xFF	; 255
 588:	a8 f3       	brcs	.-22     	; 0x574 <usbCrcByteLoop>

0000058a <usbCrcReady>:
 58a:	08 95       	ret

0000058c <usbCrc16Append>:
 58c:	ea df       	rcall	.-44     	; 0x562 <usbCrc16>
 58e:	8d 93       	st	X+, r24
 590:	9d 93       	st	X+, r25
 592:	08 95       	ret

00000594 <__vector_1>:
 594:	cf 93       	push	r28
 596:	cf b7       	in	r28, 0x3f	; 63
 598:	cf 93       	push	r28

0000059a <waitForJ>:
 59a:	c3 95       	inc	r28
 59c:	4e 9b       	sbis	0x09, 6	; 9
 59e:	e9 f7       	brne	.-6      	; 0x59a <waitForJ>

000005a0 <waitForK>:
 5a0:	4e 9b       	sbis	0x09, 6	; 9
 5a2:	09 c0       	rjmp	.+18     	; 0x5b6 <foundK>
 5a4:	4e 9b       	sbis	0x09, 6	; 9
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <foundK>
 5a8:	4e 9b       	sbis	0x09, 6	; 9
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <foundK>
 5ac:	4e 9b       	sbis	0x09, 6	; 9
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <foundK>
 5b0:	4e 9b       	sbis	0x09, 6	; 9
 5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <foundK>
 5b4:	a3 c0       	rjmp	.+326    	; 0x6fc <sofError>

000005b6 <foundK>:
 5b6:	df 93       	push	r29
 5b8:	c0 91 1e 01 	lds	r28, 0x011E
 5bc:	dd 27       	eor	r29, r29
 5be:	cb 5d       	subi	r28, 0xDB	; 219
 5c0:	de 4f       	sbci	r29, 0xFE	; 254
 5c2:	4e 9b       	sbis	0x09, 6	; 9
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <haveTwoBitsK>
 5c6:	df 91       	pop	r29
 5c8:	eb cf       	rjmp	.-42     	; 0x5a0 <waitForK>

000005ca <haveTwoBitsK>:
 5ca:	2f 93       	push	r18
 5cc:	0f 93       	push	r16
 5ce:	1f 93       	push	r17
 5d0:	09 b1       	in	r16, 0x09	; 9
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	06 fb       	bst	r16, 6
 5d6:	20 f9       	bld	r18, 0
 5d8:	4f 93       	push	r20
 5da:	3f 93       	push	r19
 5dc:	19 b1       	in	r17, 0x09	; 9
 5de:	4f ef       	ldi	r20, 0xFF	; 255
 5e0:	01 27       	eor	r16, r17
 5e2:	06 fb       	bst	r16, 6
 5e4:	21 f9       	bld	r18, 1
 5e6:	3b e0       	ldi	r19, 0x0B	; 11
 5e8:	31 c0       	rjmp	.+98     	; 0x64c <rxbit2>

000005ea <unstuff0>:
 5ea:	4e 7f       	andi	r20, 0xFE	; 254
 5ec:	01 2f       	mov	r16, r17
 5ee:	19 b1       	in	r17, 0x09	; 9
 5f0:	21 60       	ori	r18, 0x01	; 1
 5f2:	28 c0       	rjmp	.+80     	; 0x644 <didUnstuff0>

000005f4 <unstuff1>:
 5f4:	10 2f       	mov	r17, r16
 5f6:	4d 7f       	andi	r20, 0xFD	; 253
 5f8:	22 60       	ori	r18, 0x02	; 2
 5fa:	00 00       	nop
 5fc:	09 b1       	in	r16, 0x09	; 9
 5fe:	29 c0       	rjmp	.+82     	; 0x652 <didUnstuff1>

00000600 <unstuff2>:
 600:	4b 7f       	andi	r20, 0xFB	; 251
 602:	24 60       	ori	r18, 0x04	; 4
 604:	01 2f       	mov	r16, r17
 606:	00 00       	nop
 608:	19 b1       	in	r17, 0x09	; 9
 60a:	2b c0       	rjmp	.+86     	; 0x662 <didUnstuff2>

0000060c <unstuff3>:
 60c:	19 b1       	in	r17, 0x09	; 9
 60e:	47 7f       	andi	r20, 0xF7	; 247
 610:	28 60       	ori	r18, 0x08	; 8
 612:	2a c0       	rjmp	.+84     	; 0x668 <didUnstuff3>

00000614 <unstuff4>:
 614:	4f 7e       	andi	r20, 0xEF	; 239
 616:	09 b1       	in	r16, 0x09	; 9
 618:	20 61       	ori	r18, 0x10	; 16
 61a:	2c c0       	rjmp	.+88     	; 0x674 <didUnstuff4>

0000061c <unstuff5>:
 61c:	4f 7d       	andi	r20, 0xDF	; 223
 61e:	19 b1       	in	r17, 0x09	; 9
 620:	20 62       	ori	r18, 0x20	; 32
 622:	2f c0       	rjmp	.+94     	; 0x682 <didUnstuff5>

00000624 <unstuff6>:
 624:	4f 7b       	andi	r20, 0xBF	; 191
 626:	09 b1       	in	r16, 0x09	; 9
 628:	20 64       	ori	r18, 0x40	; 64
 62a:	32 c0       	rjmp	.+100    	; 0x690 <didUnstuff6>

0000062c <rxLoop>:
 62c:	42 27       	eor	r20, r18
 62e:	09 b1       	in	r16, 0x09	; 9
 630:	49 93       	st	Y+, r20
 632:	4f ef       	ldi	r20, 0xFF	; 255
 634:	00 00       	nop
 636:	10 27       	eor	r17, r16
 638:	16 fb       	bst	r17, 6
 63a:	20 f9       	bld	r18, 0
 63c:	19 b1       	in	r17, 0x09	; 9
 63e:	14 74       	andi	r17, 0x44	; 68
 640:	c9 f1       	breq	.+114    	; 0x6b4 <se0>
 642:	29 7f       	andi	r18, 0xF9	; 249

00000644 <didUnstuff0>:
 644:	91 f2       	breq	.-92     	; 0x5ea <unstuff0>
 646:	01 27       	eor	r16, r17
 648:	06 fb       	bst	r16, 6
 64a:	21 f9       	bld	r18, 1

0000064c <rxbit2>:
 64c:	09 b1       	in	r16, 0x09	; 9
 64e:	23 7f       	andi	r18, 0xF3	; 243
 650:	89 f2       	breq	.-94     	; 0x5f4 <unstuff1>

00000652 <didUnstuff1>:
 652:	31 50       	subi	r19, 0x01	; 1
 654:	58 f1       	brcs	.+86     	; 0x6ac <overflow>
 656:	10 27       	eor	r17, r16
 658:	16 fb       	bst	r17, 6
 65a:	22 f9       	bld	r18, 2
 65c:	19 b1       	in	r17, 0x09	; 9
 65e:	27 7e       	andi	r18, 0xE7	; 231
 660:	79 f2       	breq	.-98     	; 0x600 <unstuff2>

00000662 <didUnstuff2>:
 662:	01 27       	eor	r16, r17
 664:	06 fb       	bst	r16, 6
 666:	23 f9       	bld	r18, 3

00000668 <didUnstuff3>:
 668:	2f 7c       	andi	r18, 0xCF	; 207
 66a:	81 f2       	breq	.-96     	; 0x60c <unstuff3>
 66c:	09 b1       	in	r16, 0x09	; 9
 66e:	10 27       	eor	r17, r16
 670:	16 fb       	bst	r17, 6
 672:	24 f9       	bld	r18, 4

00000674 <didUnstuff4>:
 674:	2f 79       	andi	r18, 0x9F	; 159
 676:	71 f2       	breq	.-100    	; 0x614 <unstuff4>
 678:	00 c0       	rjmp	.+0      	; 0x67a <didUnstuff4+0x6>
 67a:	19 b1       	in	r17, 0x09	; 9
 67c:	01 27       	eor	r16, r17
 67e:	06 fb       	bst	r16, 6
 680:	25 f9       	bld	r18, 5

00000682 <didUnstuff5>:
 682:	2f 73       	andi	r18, 0x3F	; 63
 684:	59 f2       	breq	.-106    	; 0x61c <unstuff5>
 686:	00 c0       	rjmp	.+0      	; 0x688 <didUnstuff5+0x6>
 688:	09 b1       	in	r16, 0x09	; 9
 68a:	10 27       	eor	r17, r16
 68c:	16 fb       	bst	r17, 6
 68e:	26 f9       	bld	r18, 6

00000690 <didUnstuff6>:
 690:	22 30       	cpi	r18, 0x02	; 2
 692:	40 f2       	brcs	.-112    	; 0x624 <unstuff6>
 694:	00 c0       	rjmp	.+0      	; 0x696 <didUnstuff6+0x6>
 696:	19 b1       	in	r17, 0x09	; 9
 698:	01 27       	eor	r16, r17
 69a:	06 fb       	bst	r16, 6
 69c:	27 f9       	bld	r18, 7

0000069e <didUnstuff7>:
 69e:	24 30       	cpi	r18, 0x04	; 4
 6a0:	28 f6       	brcc	.-118    	; 0x62c <rxLoop>

000006a2 <unstuff7>:
 6a2:	4f 77       	andi	r20, 0x7F	; 127
 6a4:	20 68       	ori	r18, 0x80	; 128
 6a6:	19 b1       	in	r17, 0x09	; 9
 6a8:	00 00       	nop
 6aa:	f9 cf       	rjmp	.-14     	; 0x69e <didUnstuff7>

000006ac <overflow>:
 6ac:	11 e0       	ldi	r17, 0x01	; 1
 6ae:	1c bb       	out	0x1c, r17	; 28

000006b0 <ignorePacket>:
 6b0:	00 27       	eor	r16, r16
 6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <handleSetupOrOut>

000006b4 <se0>:
 6b4:	3b 50       	subi	r19, 0x0B	; 11
 6b6:	31 95       	neg	r19
 6b8:	c3 1b       	sub	r28, r19
 6ba:	d0 40       	sbci	r29, 0x00	; 0
 6bc:	11 e0       	ldi	r17, 0x01	; 1
 6be:	1c bb       	out	0x1c, r17	; 28
 6c0:	08 81       	ld	r16, Y
 6c2:	03 3c       	cpi	r16, 0xC3	; 195
 6c4:	f9 f0       	breq	.+62     	; 0x704 <handleData>
 6c6:	0b 34       	cpi	r16, 0x4B	; 75
 6c8:	e9 f0       	breq	.+58     	; 0x704 <handleData>
 6ca:	20 91 1c 01 	lds	r18, 0x011C
 6ce:	19 81       	ldd	r17, Y+1	; 0x01
 6d0:	11 0f       	add	r17, r17
 6d2:	12 13       	cpse	r17, r18
 6d4:	ed cf       	rjmp	.-38     	; 0x6b0 <ignorePacket>
 6d6:	4a 81       	ldd	r20, Y+2	; 0x02
 6d8:	44 1f       	adc	r20, r20
 6da:	09 36       	cpi	r16, 0x69	; 105
 6dc:	41 f1       	breq	.+80     	; 0x72e <handleIn>
 6de:	0d 32       	cpi	r16, 0x2D	; 45
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <handleSetupOrOut>
 6e2:	01 3e       	cpi	r16, 0xE1	; 225
 6e4:	29 f7       	brne	.-54     	; 0x6b0 <ignorePacket>

000006e6 <handleSetupOrOut>:
 6e6:	00 93 23 01 	sts	0x0123, r16

000006ea <doReturn>:
 6ea:	3f 91       	pop	r19
 6ec:	4f 91       	pop	r20
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	2f 91       	pop	r18
 6f4:	df 91       	pop	r29
 6f6:	cc b3       	in	r28, 0x1c	; 28
 6f8:	c0 fd       	sbrc	r28, 0
 6fa:	4f cf       	rjmp	.-354    	; 0x59a <waitForJ>

000006fc <sofError>:
 6fc:	cf 91       	pop	r28
 6fe:	cf bf       	out	0x3f, r28	; 63
 700:	cf 91       	pop	r28
 702:	18 95       	reti

00000704 <handleData>:
 704:	20 91 23 01 	lds	r18, 0x0123
 708:	22 23       	and	r18, r18
 70a:	79 f3       	breq	.-34     	; 0x6ea <doReturn>
 70c:	10 91 21 01 	lds	r17, 0x0121
 710:	11 23       	and	r17, r17
 712:	69 f5       	brne	.+90     	; 0x76e <sendNakAndReti>
 714:	34 30       	cpi	r19, 0x04	; 4
 716:	6a f1       	brmi	.+90     	; 0x772 <sendAckAndReti>
 718:	30 93 21 01 	sts	0x0121, r19
 71c:	20 93 1d 01 	sts	0x011D, r18
 720:	10 91 1e 01 	lds	r17, 0x011E
 724:	3b e0       	ldi	r19, 0x0B	; 11
 726:	31 1b       	sub	r19, r17
 728:	30 93 1e 01 	sts	0x011E, r19
 72c:	22 c0       	rjmp	.+68     	; 0x772 <sendAckAndReti>

0000072e <handleIn>:
 72e:	00 91 21 01 	lds	r16, 0x0121
 732:	01 30       	cpi	r16, 0x01	; 1
 734:	e4 f4       	brge	.+56     	; 0x76e <sendNakAndReti>
 736:	0a e5       	ldi	r16, 0x5A	; 90
 738:	4f 70       	andi	r20, 0x0F	; 15
 73a:	49 f4       	brne	.+18     	; 0x74e <handleIn1>
 73c:	30 91 00 01 	lds	r19, 0x0100
 740:	34 fd       	sbrc	r19, 4
 742:	19 c0       	rjmp	.+50     	; 0x776 <sendCntAndReti>
 744:	00 93 00 01 	sts	0x0100, r16
 748:	c5 e0       	ldi	r28, 0x05	; 5
 74a:	d1 e0       	ldi	r29, 0x01	; 1
 74c:	18 c0       	rjmp	.+48     	; 0x77e <usbSendAndReti>

0000074e <handleIn1>:
 74e:	30 91 10 01 	lds	r19, 0x0110
 752:	34 fd       	sbrc	r19, 4
 754:	10 c0       	rjmp	.+32     	; 0x776 <sendCntAndReti>
 756:	00 93 10 01 	sts	0x0110, r16
 75a:	c1 e1       	ldi	r28, 0x11	; 17
 75c:	d1 e0       	ldi	r29, 0x01	; 1
 75e:	0f c0       	rjmp	.+30     	; 0x77e <usbSendAndReti>

00000760 <stuffN1Delay>:
 760:	27 95       	ror	r18
 762:	a8 f4       	brcc	.+42     	; 0x78e <doExorN1>
 764:	51 50       	subi	r21, 0x01	; 1
 766:	a9 f4       	brne	.+42     	; 0x792 <commonN1>
 768:	22 0f       	add	r18, r18
 76a:	00 00       	nop
 76c:	f9 cf       	rjmp	.-14     	; 0x760 <stuffN1Delay>

0000076e <sendNakAndReti>:
 76e:	4a e5       	ldi	r20, 0x5A	; 90
 770:	03 c0       	rjmp	.+6      	; 0x778 <usbSendX3>

00000772 <sendAckAndReti>:
 772:	42 ed       	ldi	r20, 0xD2	; 210
 774:	01 c0       	rjmp	.+2      	; 0x778 <usbSendX3>

00000776 <sendCntAndReti>:
 776:	43 2f       	mov	r20, r19

00000778 <usbSendX3>:
 778:	c4 e1       	ldi	r28, 0x14	; 20
 77a:	d0 e0       	ldi	r29, 0x00	; 0
 77c:	32 e0       	ldi	r19, 0x02	; 2

0000077e <usbSendAndReti>:
 77e:	1a b1       	in	r17, 0x0a	; 10
 780:	14 64       	ori	r17, 0x44	; 68
 782:	5e 9a       	sbi	0x0b, 6	; 11
 784:	1a b9       	out	0x0a, r17	; 10
 786:	0b b1       	in	r16, 0x0b	; 11
 788:	20 e4       	ldi	r18, 0x40	; 64
 78a:	14 e4       	ldi	r17, 0x44	; 68
 78c:	5f 93       	push	r21

0000078e <doExorN1>:
 78e:	01 27       	eor	r16, r17
 790:	56 e0       	ldi	r21, 0x06	; 6

00000792 <commonN1>:
 792:	0b b9       	out	0x0b, r16	; 11
 794:	27 95       	ror	r18
 796:	20 f4       	brcc	.+8      	; 0x7a0 <doExorN2>
 798:	51 50       	subi	r21, 0x01	; 1
 79a:	21 f4       	brne	.+8      	; 0x7a4 <commonN2>
 79c:	22 0f       	add	r18, r18
 79e:	f9 cf       	rjmp	.-14     	; 0x792 <commonN1>

000007a0 <doExorN2>:
 7a0:	01 27       	eor	r16, r17
 7a2:	56 e0       	ldi	r21, 0x06	; 6

000007a4 <commonN2>:
 7a4:	00 00       	nop
 7a6:	3b 5a       	subi	r19, 0xAB	; 171
 7a8:	0b b9       	out	0x0b, r16	; 11
 7aa:	d0 f2       	brcs	.-76     	; 0x760 <stuffN1Delay>

000007ac <stuff6Delay>:
 7ac:	27 95       	ror	r18
 7ae:	28 f4       	brcc	.+10     	; 0x7ba <doExor6>
 7b0:	51 50       	subi	r21, 0x01	; 1
 7b2:	29 f4       	brne	.+10     	; 0x7be <common6>
 7b4:	22 0f       	add	r18, r18
 7b6:	00 00       	nop
 7b8:	f9 cf       	rjmp	.-14     	; 0x7ac <stuff6Delay>

000007ba <doExor6>:
 7ba:	01 27       	eor	r16, r17
 7bc:	56 e0       	ldi	r21, 0x06	; 6

000007be <common6>:
 7be:	27 95       	ror	r18
 7c0:	0b b9       	out	0x0b, r16	; 11
 7c2:	20 f4       	brcc	.+8      	; 0x7cc <doExor7>
 7c4:	51 50       	subi	r21, 0x01	; 1
 7c6:	21 f4       	brne	.+8      	; 0x7d0 <common7>
 7c8:	22 0f       	add	r18, r18
 7ca:	f9 cf       	rjmp	.-14     	; 0x7be <common6>

000007cc <doExor7>:
 7cc:	01 27       	eor	r16, r17
 7ce:	56 e0       	ldi	r21, 0x06	; 6

000007d0 <common7>:
 7d0:	29 91       	ld	r18, Y+
 7d2:	33 23       	and	r19, r19
 7d4:	0b b9       	out	0x0b, r16	; 11
 7d6:	21 f6       	brne	.-120    	; 0x760 <stuffN1Delay>
 7d8:	0b 7b       	andi	r16, 0xBB	; 187
 7da:	10 91 22 01 	lds	r17, 0x0122
 7de:	11 0f       	add	r17, r17
 7e0:	c6 51       	subi	r28, 0x16	; 22
 7e2:	d0 40       	sbci	r29, 0x00	; 0
 7e4:	0b b9       	out	0x0b, r16	; 11
 7e6:	11 f0       	breq	.+4      	; 0x7ec <skipAddrAssign>
 7e8:	10 93 1c 01 	sts	0x011C, r17

000007ec <skipAddrAssign>:
 7ec:	11 e0       	ldi	r17, 0x01	; 1
 7ee:	1c bb       	out	0x1c, r17	; 28
 7f0:	00 64       	ori	r16, 0x40	; 64
 7f2:	1a b1       	in	r17, 0x0a	; 10
 7f4:	1b 7b       	andi	r17, 0xBB	; 187
 7f6:	40 2f       	mov	r20, r16
 7f8:	4b 7b       	andi	r20, 0xBB	; 187
 7fa:	5f 91       	pop	r21
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <skipAddrAssign+0x12>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <skipAddrAssign+0x14>
 800:	0b b9       	out	0x0b, r16	; 11
 802:	1a b9       	out	0x0a, r17	; 10
 804:	4b b9       	out	0x0b, r20	; 11
 806:	71 cf       	rjmp	.-286    	; 0x6ea <doReturn>

00000808 <__eerd_block>:
 808:	a0 e0       	ldi	r26, 0x00	; 0
 80a:	b0 e0       	ldi	r27, 0x00	; 0
 80c:	ea e0       	ldi	r30, 0x0A	; 10
 80e:	f4 e0       	ldi	r31, 0x04	; 4
 810:	0c 94 46 04 	jmp	0x88c	; 0x88c <__prologue_saves__+0x14>
 814:	7c 01       	movw	r14, r24
 816:	eb 01       	movw	r28, r22
 818:	8a 01       	movw	r16, r20
 81a:	69 01       	movw	r12, r18
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__eerd_block+0x28>
 81e:	ce 01       	movw	r24, r28
 820:	21 96       	adiw	r28, 0x01	; 1
 822:	f6 01       	movw	r30, r12
 824:	09 95       	icall
 826:	f7 01       	movw	r30, r14
 828:	81 93       	st	Z+, r24
 82a:	7f 01       	movw	r14, r30
 82c:	01 50       	subi	r16, 0x01	; 1
 82e:	10 40       	sbci	r17, 0x00	; 0
 830:	01 15       	cp	r16, r1
 832:	11 05       	cpc	r17, r1
 834:	a1 f7       	brne	.-24     	; 0x81e <__eerd_block+0x16>
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	e8 e0       	ldi	r30, 0x08	; 8
 83c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__epilogue_restores__+0x14>

00000840 <__eewr_block>:
 840:	a0 e0       	ldi	r26, 0x00	; 0
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	e6 e2       	ldi	r30, 0x26	; 38
 846:	f4 e0       	ldi	r31, 0x04	; 4
 848:	0c 94 46 04 	jmp	0x88c	; 0x88c <__prologue_saves__+0x14>
 84c:	ec 01       	movw	r28, r24
 84e:	7b 01       	movw	r14, r22
 850:	8a 01       	movw	r16, r20
 852:	69 01       	movw	r12, r18
 854:	09 c0       	rjmp	.+18     	; 0x868 <__eewr_block+0x28>
 856:	f7 01       	movw	r30, r14
 858:	61 91       	ld	r22, Z+
 85a:	7f 01       	movw	r14, r30
 85c:	ce 01       	movw	r24, r28
 85e:	21 96       	adiw	r28, 0x01	; 1
 860:	f6 01       	movw	r30, r12
 862:	09 95       	icall
 864:	01 50       	subi	r16, 0x01	; 1
 866:	10 40       	sbci	r17, 0x00	; 0
 868:	01 15       	cp	r16, r1
 86a:	11 05       	cpc	r17, r1
 86c:	a1 f7       	brne	.-24     	; 0x856 <__eewr_block+0x16>
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
 872:	e8 e0       	ldi	r30, 0x08	; 8
 874:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__epilogue_restores__+0x14>

00000878 <__prologue_saves__>:
 878:	2f 92       	push	r2
 87a:	3f 92       	push	r3
 87c:	4f 92       	push	r4
 87e:	5f 92       	push	r5
 880:	6f 92       	push	r6
 882:	7f 92       	push	r7
 884:	8f 92       	push	r8
 886:	9f 92       	push	r9
 888:	af 92       	push	r10
 88a:	bf 92       	push	r11
 88c:	cf 92       	push	r12
 88e:	df 92       	push	r13
 890:	ef 92       	push	r14
 892:	ff 92       	push	r15
 894:	0f 93       	push	r16
 896:	1f 93       	push	r17
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	ca 1b       	sub	r28, r26
 8a2:	db 0b       	sbc	r29, r27
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	09 94       	ijmp

000008b0 <__epilogue_restores__>:
 8b0:	2a 88       	ldd	r2, Y+18	; 0x12
 8b2:	39 88       	ldd	r3, Y+17	; 0x11
 8b4:	48 88       	ldd	r4, Y+16	; 0x10
 8b6:	5f 84       	ldd	r5, Y+15	; 0x0f
 8b8:	6e 84       	ldd	r6, Y+14	; 0x0e
 8ba:	7d 84       	ldd	r7, Y+13	; 0x0d
 8bc:	8c 84       	ldd	r8, Y+12	; 0x0c
 8be:	9b 84       	ldd	r9, Y+11	; 0x0b
 8c0:	aa 84       	ldd	r10, Y+10	; 0x0a
 8c2:	b9 84       	ldd	r11, Y+9	; 0x09
 8c4:	c8 84       	ldd	r12, Y+8	; 0x08
 8c6:	df 80       	ldd	r13, Y+7	; 0x07
 8c8:	ee 80       	ldd	r14, Y+6	; 0x06
 8ca:	fd 80       	ldd	r15, Y+5	; 0x05
 8cc:	0c 81       	ldd	r16, Y+4	; 0x04
 8ce:	1b 81       	ldd	r17, Y+3	; 0x03
 8d0:	aa 81       	ldd	r26, Y+2	; 0x02
 8d2:	b9 81       	ldd	r27, Y+1	; 0x01
 8d4:	ce 0f       	add	r28, r30
 8d6:	d1 1d       	adc	r29, r1
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	f8 94       	cli
 8dc:	de bf       	out	0x3e, r29	; 62
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	cd bf       	out	0x3d, r28	; 61
 8e2:	ed 01       	movw	r28, r26
 8e4:	08 95       	ret

000008e6 <_exit>:
 8e6:	f8 94       	cli

000008e8 <__stop_program>:
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <__stop_program>
