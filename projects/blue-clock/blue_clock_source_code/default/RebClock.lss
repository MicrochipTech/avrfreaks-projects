
RebClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d3c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000d3c  00000df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080006c  0080006c  00000dfc  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00000dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         0000036c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000084  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000003d5  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000bfb  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000296  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000db1  00000000  00000000  00002476  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000140  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004f5  00000000  00000000  00003367  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000005e5  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	39 c0       	rjmp	.+114    	; 0x76 <__bad_interrupt>
   4:	38 c0       	rjmp	.+112    	; 0x76 <__bad_interrupt>
   6:	37 c0       	rjmp	.+110    	; 0x76 <__bad_interrupt>
   8:	36 c0       	rjmp	.+108    	; 0x76 <__bad_interrupt>
   a:	35 c0       	rjmp	.+106    	; 0x76 <__bad_interrupt>
   c:	34 c0       	rjmp	.+104    	; 0x76 <__bad_interrupt>
   e:	33 c0       	rjmp	.+102    	; 0x76 <__bad_interrupt>
  10:	32 c0       	rjmp	.+100    	; 0x76 <__bad_interrupt>
  12:	dd c2       	rjmp	.+1466   	; 0x5ce <__vector_9>
  14:	30 c0       	rjmp	.+96     	; 0x76 <__bad_interrupt>
  16:	2f c0       	rjmp	.+94     	; 0x76 <__bad_interrupt>
  18:	2e c0       	rjmp	.+92     	; 0x76 <__bad_interrupt>
  1a:	2d c0       	rjmp	.+90     	; 0x76 <__bad_interrupt>
  1c:	2c c0       	rjmp	.+88     	; 0x76 <__bad_interrupt>
  1e:	2b c0       	rjmp	.+86     	; 0x76 <__bad_interrupt>
  20:	2a c0       	rjmp	.+84     	; 0x76 <__bad_interrupt>
  22:	29 c0       	rjmp	.+82     	; 0x76 <__bad_interrupt>
  24:	28 c0       	rjmp	.+80     	; 0x76 <__bad_interrupt>
  26:	27 c0       	rjmp	.+78     	; 0x76 <__bad_interrupt>
  28:	26 c0       	rjmp	.+76     	; 0x76 <__bad_interrupt>

0000002a <strLedDrivU3>:
  2a:	77 14 b3 b6 d4 e6 e7 34 f7 f4 00 00                 w......4....

00000036 <strLedDrivU4>:
  36:	77 41 3b 6b 4d 6e 7e 43 7f 4f 00 00                 wA;kMn~C.O..

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf e5       	ldi	r28, 0x5F	; 95
  48:	d2 e0       	ldi	r29, 0x02	; 2
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61

0000004e <__do_copy_data>:
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	a0 e6       	ldi	r26, 0x60	; 96
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	ec e3       	ldi	r30, 0x3C	; 60
  56:	fd e0       	ldi	r31, 0x0D	; 13
  58:	02 c0       	rjmp	.+4      	; 0x5e <.do_copy_data_start>

0000005a <.do_copy_data_loop>:
  5a:	05 90       	lpm	r0, Z+
  5c:	0d 92       	st	X+, r0

0000005e <.do_copy_data_start>:
  5e:	ac 36       	cpi	r26, 0x6C	; 108
  60:	b1 07       	cpc	r27, r17
  62:	d9 f7       	brne	.-10     	; 0x5a <.do_copy_data_loop>

00000064 <__do_clear_bss>:
  64:	10 e0       	ldi	r17, 0x00	; 0
  66:	ac e6       	ldi	r26, 0x6C	; 108
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	01 c0       	rjmp	.+2      	; 0x6e <.do_clear_bss_start>

0000006c <.do_clear_bss_loop>:
  6c:	1d 92       	st	X+, r1

0000006e <.do_clear_bss_start>:
  6e:	a5 39       	cpi	r26, 0x95	; 149
  70:	b1 07       	cpc	r27, r17
  72:	e1 f7       	brne	.-8      	; 0x6c <.do_clear_bss_loop>
  74:	0b c6       	rjmp	.+3094   	; 0xc8c <main>

00000076 <__bad_interrupt>:
  76:	c4 cf       	rjmp	.-120    	; 0x0 <__heap_end>

00000078 <twi_setup>:
unsigned char twi_status, twi_rtc;
extern unsigned int rtc_year;

void twi_setup(void)
{
  78:	8f e1       	ldi	r24, 0x1F	; 31
  7a:	80 b9       	out	0x00, r24	; 0
	TWBR = 0x1F;
	TWCR = 0x04;
  7c:	84 e0       	ldi	r24, 0x04	; 4
  7e:	86 bf       	out	0x36, r24	; 54
  80:	08 95       	ret

00000082 <twi_step>:
}

signed char twi_step(uchar twcr_mask, uchar status)
{
  82:	84 60       	ori	r24, 0x04	; 4
  84:	86 bf       	out	0x36, r24	; 54

	TWCR = twcr_mask | TWI_ENABLE;
	if (status != TWI_NO_WAIT)
  86:	6e 3f       	cpi	r22, 0xFE	; 254
  88:	d1 f0       	breq	.+52     	; 0xbe <twi_step+0x3c>
	{
		twi_rtc = 0;
  8a:	10 92 74 00 	sts	0x0074, r1
		while(((TWCR & 0x80) == 0) && (twi_rtc < 100))
  8e:	06 b6       	in	r0, 0x36	; 54
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <twi_step+0xc>
			;

		twi_status = (TWSR & 0xFC);
  94:	81 b1       	in	r24, 0x01	; 1
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	80 93 76 00 	sts	0x0076, r24

		if ((status != TWI_IGNORE_STATUS) && ((twi_status != status) || ((TWCR & 0x80) == 0)))
  9c:	6f 3f       	cpi	r22, 0xFF	; 255
  9e:	79 f0       	breq	.+30     	; 0xbe <twi_step+0x3c>
  a0:	86 17       	cp	r24, r22
  a2:	19 f4       	brne	.+6      	; 0xaa <twi_step+0x28>
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fc       	sbrc	r0, 7
  a8:	0a c0       	rjmp	.+20     	; 0xbe <twi_step+0x3c>
		{
			TWCR = TWI_SEND_STOP | TWI_ENABLE;
  aa:	84 e9       	ldi	r24, 0x94	; 148
  ac:	86 bf       	out	0x36, r24	; 54
			twi_rtc = 0;
  ae:	10 92 74 00 	sts	0x0074, r1
			while(((TWCR & 0x80) == 0) && (twi_rtc < 100))
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <twi_step+0x30>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
				;
			return TWI_ERROR;
		}
	}
	return TWI_SUCCESS;
}
  c2:	08 95       	ret

000000c4 <twi_read>:

signed char twi_read(schar addr, schar num_bytes,uchar *pntr)
{
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	18 2f       	mov	r17, r24
  d2:	06 2f       	mov	r16, r22
  d4:	7a 01       	movw	r14, r20
	schar cnt;
    if (twi_step(TWI_SEND_START,0x08) != TWI_SUCCESS)
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	80 ea       	ldi	r24, 0xA0	; 160
  da:	d3 df       	rcall	.-90     	; 0x82 <twi_step>
  dc:	88 23       	and	r24, r24
  de:	c9 f5       	brne	.+114    	; 0x152 <twi_read+0x8e>
    	return TWI_ERROR;

	TWDR = 0xA2; 	// put in the address of the pfc
  e0:	82 ea       	ldi	r24, 0xA2	; 162
  e2:	83 b9       	out	0x03, r24	; 3
    if (twi_step(TWI_CLOCK_DATA, 0x18) != TWI_SUCCESS)
  e4:	68 e1       	ldi	r22, 0x18	; 24
  e6:	80 e8       	ldi	r24, 0x80	; 128
  e8:	cc df       	rcall	.-104    	; 0x82 <twi_step>
  ea:	88 23       	and	r24, r24
  ec:	91 f5       	brne	.+100    	; 0x152 <twi_read+0x8e>
    	return TWI_ERROR;

	TWDR = addr;	// put in word address
  ee:	13 b9       	out	0x03, r17	; 3
	if (twi_step(TWI_CLOCK_DATA,0x28) != TWI_SUCCESS)
  f0:	68 e2       	ldi	r22, 0x28	; 40
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	c6 df       	rcall	.-116    	; 0x82 <twi_step>
  f6:	88 23       	and	r24, r24
  f8:	61 f5       	brne	.+88     	; 0x152 <twi_read+0x8e>
		return TWI_ERROR;

	if (twi_step(TWI_SEND_START,0x10) != TWI_SUCCESS)	   // send start......
  fa:	60 e1       	ldi	r22, 0x10	; 16
  fc:	80 ea       	ldi	r24, 0xA0	; 160
  fe:	c1 df       	rcall	.-126    	; 0x82 <twi_step>
 100:	88 23       	and	r24, r24
 102:	39 f5       	brne	.+78     	; 0x152 <twi_read+0x8e>
		return TWI_ERROR;

	TWDR = 0xA3; 	// put in the address of the pfc for read
 104:	83 ea       	ldi	r24, 0xA3	; 163
 106:	83 b9       	out	0x03, r24	; 3
	if (twi_step(TWI_CLOCK_DATA,0x40) != TWI_SUCCESS)
 108:	60 e4       	ldi	r22, 0x40	; 64
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	ba df       	rcall	.-140    	; 0x82 <twi_step>
 10e:	88 23       	and	r24, r24
 110:	01 f5       	brne	.+64     	; 0x152 <twi_read+0x8e>
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	15 c0       	rjmp	.+42     	; 0x142 <twi_read+0x7e>
		return TWI_ERROR;

	for (cnt=0;cnt<num_bytes;cnt++)
	{
		if (cnt != (num_bytes-1))
 118:	80 2f       	mov	r24, r16
 11a:	99 27       	eor	r25, r25
 11c:	87 fd       	sbrc	r24, 7
 11e:	90 95       	com	r25
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	c8 17       	cp	r28, r24
 124:	d9 07       	cpc	r29, r25
 126:	19 f0       	breq	.+6      	; 0x12e <twi_read+0x6a>
		{
			if (twi_step(TWI_ACK_DATA,TWI_IGNORE_STATUS) != TWI_SUCCESS)
 128:	6f ef       	ldi	r22, 0xFF	; 255
 12a:	80 ec       	ldi	r24, 0xC0	; 192
 12c:	02 c0       	rjmp	.+4      	; 0x132 <twi_read+0x6e>
				return TWI_ERROR;
		}
		else
		{
			if (twi_step(TWI_CLOCK_DATA,TWI_IGNORE_STATUS) != TWI_SUCCESS)
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	a7 df       	rcall	.-178    	; 0x82 <twi_step>
 134:	88 23       	and	r24, r24
 136:	69 f4       	brne	.+26     	; 0x152 <twi_read+0x8e>
				return TWI_ERROR;
		}

	  #ifdef _IAR_EWAVR_
		*pntr = TWDR;
		pntr++;
	  #else
		*pntr++ = TWDR;
 138:	83 b1       	in	r24, 0x03	; 3
 13a:	f7 01       	movw	r30, r14
 13c:	81 93       	st	Z+, r24
 13e:	7f 01       	movw	r14, r30
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	c0 17       	cp	r28, r16
 144:	4c f3       	brlt	.-46     	; 0x118 <twi_read+0x54>
	  #endif
	}

	twi_step(TWI_SEND_STOP,TWI_NO_WAIT);	// send stop
 146:	6e ef       	ldi	r22, 0xFE	; 254
 148:	80 e9       	ldi	r24, 0x90	; 144
 14a:	9b df       	rcall	.-202    	; 0x82 <twi_step>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <twi_read+0x92>

	return TWI_SUCCESS;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <twi_write>:

}

signed char twi_write(schar addr, schar num_bytes, uchar *pntr)
{
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	f8 2e       	mov	r15, r24
 172:	e6 2e       	mov	r14, r22
 174:	8a 01       	movw	r16, r20
	schar cnt;
	if (twi_step(TWI_SEND_START,0x08) != TWI_SUCCESS)
 176:	68 e0       	ldi	r22, 0x08	; 8
 178:	80 ea       	ldi	r24, 0xA0	; 160
 17a:	83 df       	rcall	.-250    	; 0x82 <twi_step>
 17c:	88 23       	and	r24, r24
 17e:	09 f5       	brne	.+66     	; 0x1c2 <twi_write+0x5e>
		return TWI_ERROR;

	TWDR = 0xA2; 	// put in the address of the pfc
 180:	82 ea       	ldi	r24, 0xA2	; 162
 182:	83 b9       	out	0x03, r24	; 3
	if (twi_step(TWI_CLOCK_DATA,0x18) != TWI_SUCCESS)
 184:	68 e1       	ldi	r22, 0x18	; 24
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	7c df       	rcall	.-264    	; 0x82 <twi_step>
 18a:	88 23       	and	r24, r24
 18c:	d1 f4       	brne	.+52     	; 0x1c2 <twi_write+0x5e>
		return TWI_ERROR;

	TWDR = addr;	// put in word address
 18e:	f3 b8       	out	0x03, r15	; 3
	if (twi_step(TWI_CLOCK_DATA,0x28) != TWI_SUCCESS)
 190:	68 e2       	ldi	r22, 0x28	; 40
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	76 df       	rcall	.-276    	; 0x82 <twi_step>
 196:	88 23       	and	r24, r24
 198:	a1 f4       	brne	.+40     	; 0x1c2 <twi_write+0x5e>
 19a:	e8 01       	movw	r28, r16
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <twi_write+0x4a>
		return TWI_ERROR;

	for (cnt=0;cnt<num_bytes;cnt++)
	{
	  #ifdef _IAR_EWAVR_
		TWDR = *pntr;
		pntr++;
	  #else
		TWDR = *pntr++;
 19e:	88 81       	ld	r24, Y
 1a0:	83 b9       	out	0x03, r24	; 3
	  #endif
		if (twi_step(TWI_CLOCK_DATA,0x28) != TWI_SUCCESS)
 1a2:	68 e2       	ldi	r22, 0x28	; 40
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	6d df       	rcall	.-294    	; 0x82 <twi_step>
 1a8:	88 23       	and	r24, r24
 1aa:	59 f4       	brne	.+22     	; 0x1c2 <twi_write+0x5e>
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	9e 01       	movw	r18, r28
 1b0:	20 1b       	sub	r18, r16
 1b2:	2e 15       	cp	r18, r14
 1b4:	a4 f3       	brlt	.-24     	; 0x19e <twi_write+0x3a>
			return TWI_ERROR;
	}
	twi_step(TWI_SEND_STOP,TWI_NO_WAIT);
 1b6:	6e ef       	ldi	r22, 0xFE	; 254
 1b8:	80 e9       	ldi	r24, 0x90	; 144
 1ba:	63 df       	rcall	.-314    	; 0x82 <twi_step>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <twi_write+0x62>

	return TWI_SUCCESS;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <_FF_bin2bcd>:
}

signed char _FF_bin2bcd(uchar binval)
{
 1d4:	38 2f       	mov	r19, r24
 	schar temp_val;

	if (binval>99)
 1d6:	84 36       	cpi	r24, 0x64	; 100
 1d8:	18 f0       	brcs	.+6      	; 0x1e0 <_FF_bin2bcd+0xc>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	9f ef       	ldi	r25, 0xFF	; 255
 1de:	08 95       	ret
	   return((schar)EOF);

	temp_val = binval / 10;
	temp_val <<= 4;
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	78 d5       	rcall	.+2800   	; 0xcd4 <__udivmodqi4>
 1e4:	28 2f       	mov	r18, r24
 1e6:	22 95       	swap	r18
 1e8:	20 7f       	andi	r18, 0xF0	; 240
	temp_val |= (binval % 10) & 0x0F;

	return (temp_val);
 1ea:	83 2f       	mov	r24, r19
 1ec:	73 d5       	rcall	.+2790   	; 0xcd4 <__udivmodqi4>
 1ee:	9f 70       	andi	r25, 0x0F	; 15
 1f0:	92 2b       	or	r25, r18
 1f2:	89 2f       	mov	r24, r25
 1f4:	99 27       	eor	r25, r25
 1f6:	87 fd       	sbrc	r24, 7
 1f8:	90 95       	com	r25
}
 1fa:	08 95       	ret

000001fc <rtc_set_time>:

signed char rtc_set_time(uchar hour, uchar min, uchar sec)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	23 97       	sbiw	r28, 0x03	; 3
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	08 2f       	mov	r16, r24
 216:	16 2f       	mov	r17, r22
 218:	84 2f       	mov	r24, r20
	uchar time_array[3];
	schar ret_val;
	time_array[0] = _FF_bin2bcd(sec) | 0x80;
 21a:	dc df       	rcall	.-72     	; 0x1d4 <_FF_bin2bcd>
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	89 83       	std	Y+1, r24	; 0x01
	time_array[1] = _FF_bin2bcd(min);
 220:	81 2f       	mov	r24, r17
 222:	d8 df       	rcall	.-80     	; 0x1d4 <_FF_bin2bcd>
 224:	8a 83       	std	Y+2, r24	; 0x02
	time_array[2] = _FF_bin2bcd(hour);
 226:	80 2f       	mov	r24, r16
 228:	d5 df       	rcall	.-86     	; 0x1d4 <_FF_bin2bcd>
 22a:	8b 83       	std	Y+3, r24	; 0x03
	_FF_cli();
 22c:	8f b7       	in	r24, 0x3f	; 63
 22e:	8f 77       	andi	r24, 0x7F	; 127
 230:	8f bf       	out	0x3f, r24	; 63
	ret_val = twi_write(0x02,3,time_array);
 232:	ae 01       	movw	r20, r28
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	93 df       	rcall	.-218    	; 0x164 <twi_write>
	_FF_sei();
 23e:	9f b7       	in	r25, 0x3f	; 63
 240:	90 68       	ori	r25, 0x80	; 128
 242:	9f bf       	out	0x3f, r25	; 63
	return(ret_val);
}
 244:	99 27       	eor	r25, r25
 246:	87 fd       	sbrc	r24, 7
 248:	90 95       	com	r25
 24a:	23 96       	adiw	r28, 0x03	; 3
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <rtc_set_date>:


signed char rtc_set_date(uchar date, uchar month, uint year)
{
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	24 97       	sbiw	r28, 0x04	; 4
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	16 2f       	mov	r17, r22
 27c:	7a 01       	movw	r14, r20
	uchar date_array[4];
	schar ret_val;
	date_array[0] = _FF_bin2bcd(date);
 27e:	aa df       	rcall	.-172    	; 0x1d4 <_FF_bin2bcd>
 280:	89 83       	std	Y+1, r24	; 0x01
	date_array[1] = 0;
 282:	1a 82       	std	Y+2, r1	; 0x02
	date_array[2] = _FF_bin2bcd(month);
 284:	81 2f       	mov	r24, r17
 286:	a6 df       	rcall	.-180    	; 0x1d4 <_FF_bin2bcd>
 288:	8b 83       	std	Y+3, r24	; 0x03
	if (year > 1999)
 28a:	90 ed       	ldi	r25, 0xD0	; 208
 28c:	e9 16       	cp	r14, r25
 28e:	97 e0       	ldi	r25, 0x07	; 7
 290:	f9 06       	cpc	r15, r25
 292:	28 f0       	brcs	.+10     	; 0x29e <rtc_set_date+0x3e>
	{
		date_array[2] |= 0x80;
 294:	80 68       	ori	r24, 0x80	; 128
 296:	8b 83       	std	Y+3, r24	; 0x03
		year -= 2000;
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	98 ef       	ldi	r25, 0xF8	; 248
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <rtc_set_date+0x4c>
	}
	else if (year > 1900)
 29e:	9d e6       	ldi	r25, 0x6D	; 109
 2a0:	e9 16       	cp	r14, r25
 2a2:	97 e0       	ldi	r25, 0x07	; 7
 2a4:	f9 06       	cpc	r15, r25
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <rtc_set_date+0x50>
		year -= 1900;
 2a8:	84 e9       	ldi	r24, 0x94	; 148
 2aa:	98 ef       	ldi	r25, 0xF8	; 248
 2ac:	e8 0e       	add	r14, r24
 2ae:	f9 1e       	adc	r15, r25
	date_array[3] = _FF_bin2bcd((uchar) year);
 2b0:	8e 2d       	mov	r24, r14
 2b2:	90 df       	rcall	.-224    	; 0x1d4 <_FF_bin2bcd>
 2b4:	8c 83       	std	Y+4, r24	; 0x04
	_FF_cli();
 2b6:	8f b7       	in	r24, 0x3f	; 63
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	8f bf       	out	0x3f, r24	; 63
	ret_val = twi_write(0x05,4,date_array);
 2bc:	ae 01       	movw	r20, r28
 2be:	4f 5f       	subi	r20, 0xFF	; 255
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255
 2c2:	64 e0       	ldi	r22, 0x04	; 4
 2c4:	85 e0       	ldi	r24, 0x05	; 5
 2c6:	4e df       	rcall	.-356    	; 0x164 <twi_write>
	_FF_sei();
 2c8:	9f b7       	in	r25, 0x3f	; 63
 2ca:	90 68       	ori	r25, 0x80	; 128
 2cc:	9f bf       	out	0x3f, r25	; 63
	return(ret_val);
}
 2ce:	99 27       	eor	r25, r25
 2d0:	87 fd       	sbrc	r24, 7
 2d2:	90 95       	com	r25
 2d4:	24 96       	adiw	r28, 0x04	; 4
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <_FF_bcd2bin>:

unsigned char  _FF_bcd2bin(uchar bcdval)
{
 2ec:	98 2f       	mov	r25, r24
 	uchar temp_val;

	temp_val = ((bcdval >> 4) & 0x0F) * 10;
 2ee:	82 95       	swap	r24
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	2a e0       	ldi	r18, 0x0A	; 10
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	82 9f       	mul	r24, r18
 2f8:	80 2d       	mov	r24, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	9f 70       	andi	r25, 0x0F	; 15
 2fe:	89 0f       	add	r24, r25
	temp_val += (bcdval & 0x0F);

	return (temp_val);
}
 300:	99 27       	eor	r25, r25
 302:	08 95       	ret

00000304 <rtc_get_timeNdate>:

signed char  rtc_get_timeNdate(uchar *hour, uchar *min, uchar *sec, uchar *date, uchar *month, uint *year)
{
 304:	4f 92       	push	r4
 306:	5f 92       	push	r5
 308:	6f 92       	push	r6
 30a:	7f 92       	push	r7
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	28 97       	sbiw	r28, 0x08	; 8
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	4c 01       	movw	r8, r24
 336:	5b 01       	movw	r10, r22
 338:	6a 01       	movw	r12, r20
 33a:	39 01       	movw	r6, r18
 33c:	28 01       	movw	r4, r16
	uchar time_array[8];
	schar ret_val;
    ret_val = twi_read(0x02,7,time_array);
 33e:	8e 01       	movw	r16, r28
 340:	0f 5f       	subi	r16, 0xFF	; 255
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	a8 01       	movw	r20, r16
 346:	67 e0       	ldi	r22, 0x07	; 7
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	bc de       	rcall	.-648    	; 0xc4 <twi_read>

	if (ret_val != TWI_SUCCESS)
 34c:	88 23       	and	r24, r24
 34e:	19 f0       	breq	.+6      	; 0x356 <rtc_get_timeNdate+0x52>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	30 c0       	rjmp	.+96     	; 0x3b6 <rtc_get_timeNdate+0xb2>
		return TWI_ERROR;

	twi_read(0x02,7,time_array);
 356:	a8 01       	movw	r20, r16
 358:	67 e0       	ldi	r22, 0x07	; 7
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	b3 de       	rcall	.-666    	; 0xc4 <twi_read>

	*sec = _FF_bcd2bin(time_array[0] & 0x7F);
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	8f 77       	andi	r24, 0x7F	; 127
 362:	c4 df       	rcall	.-120    	; 0x2ec <_FF_bcd2bin>
 364:	f6 01       	movw	r30, r12
 366:	80 83       	st	Z, r24
	*min = _FF_bcd2bin(time_array[1] & 0x7F);
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	8f 77       	andi	r24, 0x7F	; 127
 36c:	bf df       	rcall	.-130    	; 0x2ec <_FF_bcd2bin>
 36e:	f5 01       	movw	r30, r10
 370:	80 83       	st	Z, r24
	*hour = _FF_bcd2bin(time_array[2] & 0x3F);
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	8f 73       	andi	r24, 0x3F	; 63
 376:	ba df       	rcall	.-140    	; 0x2ec <_FF_bcd2bin>
 378:	f4 01       	movw	r30, r8
 37a:	80 83       	st	Z, r24
	*date = _FF_bcd2bin(time_array[3] & 0x3F);
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	8f 73       	andi	r24, 0x3F	; 63
 380:	b5 df       	rcall	.-150    	; 0x2ec <_FF_bcd2bin>
 382:	f3 01       	movw	r30, r6
 384:	80 83       	st	Z, r24
	*month = _FF_bcd2bin(time_array[5] & 0x1F);
 386:	1e 81       	ldd	r17, Y+6	; 0x06
 388:	81 2f       	mov	r24, r17
 38a:	8f 71       	andi	r24, 0x1F	; 31
 38c:	af df       	rcall	.-162    	; 0x2ec <_FF_bcd2bin>
 38e:	f2 01       	movw	r30, r4
 390:	80 83       	st	Z, r24


	*year = _FF_bcd2bin(time_array[6]);
 392:	8f 81       	ldd	r24, Y+7	; 0x07
 394:	ab df       	rcall	.-170    	; 0x2ec <_FF_bcd2bin>
 396:	99 27       	eor	r25, r25
 398:	f7 01       	movw	r30, r14
 39a:	91 83       	std	Z+1, r25	; 0x01
 39c:	80 83       	st	Z, r24
	if (time_array[5] & 0x80)
 39e:	17 ff       	sbrs	r17, 7
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <rtc_get_timeNdate+0xa4>
		*year += 2000;
 3a2:	80 53       	subi	r24, 0x30	; 48
 3a4:	98 4f       	sbci	r25, 0xF8	; 248
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <rtc_get_timeNdate+0xaa>
	else
		*year += 1900;
 3a8:	84 59       	subi	r24, 0x94	; 148
 3aa:	98 4f       	sbci	r25, 0xF8	; 248
 3ac:	f7 01       	movw	r30, r14
 3ae:	91 83       	std	Z+1, r25	; 0x01
 3b0:	80 83       	st	Z, r24
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	28 96       	adiw	r28, 0x08	; 8
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	bf 90       	pop	r11
 3d4:	af 90       	pop	r10
 3d6:	9f 90       	pop	r9
 3d8:	8f 90       	pop	r8
 3da:	7f 90       	pop	r7
 3dc:	6f 90       	pop	r6
 3de:	5f 90       	pop	r5
 3e0:	4f 90       	pop	r4
 3e2:	08 95       	ret

000003e4 <sendToLEDdriver>:
//Returns:
//       none
//----------------------------------------------------------------------------
void sendToLEDdriver(unsigned int u16Driver1Data, unsigned int u16Driver2Data)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	23 97       	sbiw	r28, 0x03	; 3
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	9c 01       	movw	r18, r24
	volatile u16 u16Counter=1;		//this int holds the bit mask to shift through the 16 bit integer
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	9b 83       	std	Y+3, r25	; 0x03
 400:	8a 83       	std	Y+2, r24	; 0x02
	volatile u08 u08ShiftCounter;	//used to count a bit shift through a 16 bit interger
	
	PORTD &= ~(1<<defLedLatch);		//start out with all of the lines going to the driver chip held low
 402:	91 98       	cbi	0x12, 1	; 18
	PORTD &= ~(1<<defLedEnable);
 404:	93 98       	cbi	0x12, 3	; 18
	PORTD &= ~(1<<defLedData);
 406:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~(1<<defLedClock);
 408:	92 98       	cbi	0x12, 2	; 18
	asm volatile("nop");
 40a:	00 00       	nop
	PORTD |= (1<<defLedLatch);	//take the latch high to start loading in data
 40c:	91 9a       	sbi	0x12, 1	; 18
	PORTD |= (1<<defLedEnable);	//turn the drivers off while shift in data
 40e:	93 9a       	sbi	0x12, 3	; 18
	for(u08ShiftCounter=0;u08ShiftCounter<16;u08ShiftCounter++)
 410:	19 82       	std	Y+1, r1	; 0x01
 412:	15 c0       	rjmp	.+42     	; 0x43e <sendToLEDdriver+0x5a>
	{
		if(u16Driver1Data & u16Counter)		//This uses a bit mask to set the data line 
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	9b 81       	ldd	r25, Y+3	; 0x03
 418:	82 23       	and	r24, r18
 41a:	93 23       	and	r25, r19
 41c:	89 2b       	or	r24, r25
 41e:	11 f0       	breq	.+4      	; 0x424 <sendToLEDdriver+0x40>
		{
			PORTD |= (1<<defLedData);		//we want to turn on the corresponding LED driver output using the data line
 420:	94 9a       	sbi	0x12, 4	; 18
 422:	01 c0       	rjmp	.+2      	; 0x426 <sendToLEDdriver+0x42>
		}
		else
		{
			PORTD &= ~(1<<defLedData);		//we want to turn off the corresponding LED driver output
 424:	94 98       	cbi	0x12, 4	; 18
		}
		u16Counter = (u16Counter<<1);
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	9b 81       	ldd	r25, Y+3	; 0x03
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	9b 83       	std	Y+3, r25	; 0x03
 430:	8a 83       	std	Y+2, r24	; 0x02
		PORTD |= (1<<defLedClock);			//clock the data into the LED driver chip
 432:	92 9a       	sbi	0x12, 2	; 18
		asm volatile("nop");
 434:	00 00       	nop
		PORTD &= ~(1<<defLedClock);		//get the clock line ready for next time
 436:	92 98       	cbi	0x12, 2	; 18
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	80 31       	cpi	r24, 0x10	; 16
 442:	40 f3       	brcs	.-48     	; 0x414 <sendToLEDdriver+0x30>
	}
	u16Counter=1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	9b 83       	std	Y+3, r25	; 0x03
 44a:	8a 83       	std	Y+2, r24	; 0x02
	for(u08ShiftCounter=0;u08ShiftCounter<16;u08ShiftCounter++)
 44c:	19 82       	std	Y+1, r1	; 0x01
 44e:	15 c0       	rjmp	.+42     	; 0x47a <sendToLEDdriver+0x96>
	{
		if(u16Driver2Data & u16Counter)		//This uses a bit mask to set the data line 
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	86 23       	and	r24, r22
 456:	97 23       	and	r25, r23
 458:	89 2b       	or	r24, r25
 45a:	11 f0       	breq	.+4      	; 0x460 <sendToLEDdriver+0x7c>
		{
			PORTD |= (1<<defLedData);		//we want to turn on the corresponding LED driver output using the data line
 45c:	94 9a       	sbi	0x12, 4	; 18
 45e:	01 c0       	rjmp	.+2      	; 0x462 <sendToLEDdriver+0x7e>
		}
		else
		{
			PORTD &= ~(1<<defLedData);		//we want to turn off the corresponding LED driver output
 460:	94 98       	cbi	0x12, 4	; 18
		}
		u16Counter = (u16Counter<<1);
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	9b 81       	ldd	r25, Y+3	; 0x03
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	9b 83       	std	Y+3, r25	; 0x03
 46c:	8a 83       	std	Y+2, r24	; 0x02
		PORTD |= (1<<defLedClock);			//clock the data into the LED driver chip
 46e:	92 9a       	sbi	0x12, 2	; 18
		asm volatile("nop");
 470:	00 00       	nop
		PORTD &= ~(1<<defLedClock);		//get the clock line ready for next time
 472:	92 98       	cbi	0x12, 2	; 18
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	89 83       	std	Y+1, r24	; 0x01
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	80 31       	cpi	r24, 0x10	; 16
 47e:	40 f3       	brcs	.-48     	; 0x450 <sendToLEDdriver+0x6c>
	}
	asm volatile("nop");
 480:	00 00       	nop
	PORTD &= ~(1<<defLedLatch);	//take the latch low to latch in the data
 482:	91 98       	cbi	0x12, 1	; 18
	PORTD &= ~(1<<defLedEnable);	//turn the drivers on after the data has been loaded into the driver ic
 484:	93 98       	cbi	0x12, 3	; 18
 486:	23 96       	adiw	r28, 0x03	; 3
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <showDigit>:
}

//----------------------------------------------------------------------------
//Routine:		showDigit (show a number 0 through 9)
//
//Function:		This routine takes a number 0 to 9, grabs the appropriate LED's
//				to light up from the lookup table, and then sends the lookup table
//				data (two bytes shoved into one 16 bit number) to the display.
//
//Varibles passed:
//				u08 u08Digit:  a number, 0 to 9 to display
//Returns:
//       none
//----------------------------------------------------------------------------
void showDigit(u08 u08Digit1, u08 u08Digit2, u08 u08Digit3, u08 u08Digit4)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	24 97       	sbiw	r28, 0x04	; 4
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	a4 2f       	mov	r26, r20
 4ae:	72 2f       	mov	r23, r18
	volatile u16 u16Drv1Total=0;	//used to total up the two bytes into one integer for the number to be displayed
 4b0:	1c 82       	std	Y+4, r1	; 0x04
 4b2:	1b 82       	std	Y+3, r1	; 0x03
	volatile u16 u16Drv2Total=0;	//used to total up the two bytes into one integer for the number to be displayed
 4b4:	1a 82       	std	Y+2, r1	; 0x02
 4b6:	19 82       	std	Y+1, r1	; 0x01

	if(u08Digit1>=10)		//is the passed parameter an illegal value?
 4b8:	8a 30       	cpi	r24, 0x0A	; 10
 4ba:	08 f0       	brcs	.+2      	; 0x4be <showDigit+0x26>
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
	{
		u08Digit1=10;	//yes, then set it to a legal value, 10 is a blank for the most significant LED digit
	}
	if(u08Digit2>=10)		//is the passed parameter an illegal value?
 4be:	6a 30       	cpi	r22, 0x0A	; 10
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <showDigit+0x2c>
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
	{
		u08Digit2=10;	//yes, then set it to a legal value
	}
	if(u08Digit3>=10)		//is the passed parameter an illegal value?
 4c4:	aa 30       	cpi	r26, 0x0A	; 10
 4c6:	08 f0       	brcs	.+2      	; 0x4ca <showDigit+0x32>
 4c8:	aa e0       	ldi	r26, 0x0A	; 10
	{
		u08Digit3=10;	//yes, then set it to a legal value
	}
	if(u08Digit4>=10)		//is the passed parameter an illegal value?
 4ca:	7a 30       	cpi	r23, 0x0A	; 10
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <showDigit+0x38>
 4ce:	7a e0       	ldi	r23, 0x0A	; 10
	{
		u08Digit4=10;	//yes, then set it to a legal value
	}
	//LED1 and LED2 on the 002-0021-00, (LED 1 is the left most 7-segment display)
	u16Drv1Total = pgm_read_byte(&strLedDrivU3[u08Digit1]);
 4d0:	e8 2f       	mov	r30, r24
 4d2:	ff 27       	eor	r31, r31
 4d4:	e6 5d       	subi	r30, 0xD6	; 214
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	e4 91       	lpm	r30, Z
 4da:	4e 2f       	mov	r20, r30
 4dc:	55 27       	eor	r21, r21
 4de:	5c 83       	std	Y+4, r21	; 0x04
 4e0:	4b 83       	std	Y+3, r20	; 0x03
	u16Drv1Total = (u16Drv1Total<<4);
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	9c 81       	ldd	r25, Y+4	; 0x04
 4e6:	b4 e0       	ldi	r27, 0x04	; 4
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	ba 95       	dec	r27
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <showDigit+0x50>
 4f0:	9c 83       	std	Y+4, r25	; 0x04
 4f2:	8b 83       	std	Y+3, r24	; 0x03
	u16Drv1Total = u16Drv1Total & 0xFF00;
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	9c 81       	ldd	r25, Y+4	; 0x04
 4f8:	80 70       	andi	r24, 0x00	; 0
 4fa:	9c 83       	std	Y+4, r25	; 0x04
 4fc:	8b 83       	std	Y+3, r24	; 0x03
	u16Drv1Total = u16Drv1Total | pgm_read_byte(&strLedDrivU3[u08Digit2]);
 4fe:	2b 81       	ldd	r18, Y+3	; 0x03
 500:	3c 81       	ldd	r19, Y+4	; 0x04
 502:	e6 2f       	mov	r30, r22
 504:	ff 27       	eor	r31, r31
 506:	e6 5d       	subi	r30, 0xD6	; 214
 508:	ff 4f       	sbci	r31, 0xFF	; 255
 50a:	e4 91       	lpm	r30, Z
 50c:	8e 2f       	mov	r24, r30
 50e:	99 27       	eor	r25, r25
 510:	28 2b       	or	r18, r24
 512:	39 2b       	or	r19, r25
 514:	3c 83       	std	Y+4, r19	; 0x04
 516:	2b 83       	std	Y+3, r18	; 0x03
	u16Drv1Total = (u16Drv1Total<<4);
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9c 81       	ldd	r25, Y+4	; 0x04
 51c:	f4 e0       	ldi	r31, 0x04	; 4
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	fa 95       	dec	r31
 524:	e1 f7       	brne	.-8      	; 0x51e <showDigit+0x86>
 526:	9c 83       	std	Y+4, r25	; 0x04
 528:	8b 83       	std	Y+3, r24	; 0x03
	u16Drv1Total = u16Drv1Total | (pgm_read_byte(&strLedDrivU3[u08Digit1]) & 0x000F);
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	9c 81       	ldd	r25, Y+4	; 0x04
 52e:	4f 70       	andi	r20, 0x0F	; 15
 530:	50 70       	andi	r21, 0x00	; 0
 532:	84 2b       	or	r24, r20
 534:	95 2b       	or	r25, r21
 536:	9c 83       	std	Y+4, r25	; 0x04
 538:	8b 83       	std	Y+3, r24	; 0x03
	//LED 3 and LED4 on the 002-0021-00, (LED4 is the right most 7-sement display)
	u16Drv2Total = pgm_read_byte(&strLedDrivU4[u08Digit4]);
 53a:	e7 2f       	mov	r30, r23
 53c:	ff 27       	eor	r31, r31
 53e:	ea 5c       	subi	r30, 0xCA	; 202
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	e4 91       	lpm	r30, Z
 544:	4e 2f       	mov	r20, r30
 546:	55 27       	eor	r21, r21
 548:	5a 83       	std	Y+2, r21	; 0x02
 54a:	49 83       	std	Y+1, r20	; 0x01
	u16Drv2Total = (u16Drv2Total<<4);
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	e4 e0       	ldi	r30, 0x04	; 4
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	ea 95       	dec	r30
 558:	e1 f7       	brne	.-8      	; 0x552 <showDigit+0xba>
 55a:	9a 83       	std	Y+2, r25	; 0x02
 55c:	89 83       	std	Y+1, r24	; 0x01
	u16Drv2Total = u16Drv2Total & 0xFF00;
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	9a 81       	ldd	r25, Y+2	; 0x02
 562:	80 70       	andi	r24, 0x00	; 0
 564:	9a 83       	std	Y+2, r25	; 0x02
 566:	89 83       	std	Y+1, r24	; 0x01
	u16Drv2Total = u16Drv2Total | pgm_read_byte(&strLedDrivU4[u08Digit3]);
 568:	29 81       	ldd	r18, Y+1	; 0x01
 56a:	3a 81       	ldd	r19, Y+2	; 0x02
 56c:	ea 2f       	mov	r30, r26
 56e:	ff 27       	eor	r31, r31
 570:	ea 5c       	subi	r30, 0xCA	; 202
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	e4 91       	lpm	r30, Z
 576:	8e 2f       	mov	r24, r30
 578:	99 27       	eor	r25, r25
 57a:	28 2b       	or	r18, r24
 57c:	39 2b       	or	r19, r25
 57e:	3a 83       	std	Y+2, r19	; 0x02
 580:	29 83       	std	Y+1, r18	; 0x01
	u16Drv2Total = (u16Drv2Total<<4);
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	64 e0       	ldi	r22, 0x04	; 4
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e1 f7       	brne	.-8      	; 0x588 <showDigit+0xf0>
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	89 83       	std	Y+1, r24	; 0x01
	u16Drv2Total = u16Drv2Total | (pgm_read_byte(&strLedDrivU4[u08Digit4]) & 0x000F);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	4f 70       	andi	r20, 0x0F	; 15
 59a:	50 70       	andi	r21, 0x00	; 0
 59c:	84 2b       	or	r24, r20
 59e:	95 2b       	or	r25, r21
 5a0:	9a 83       	std	Y+2, r25	; 0x02
 5a2:	89 83       	std	Y+1, r24	; 0x01
	if(u08Digit4==10)
 5a4:	7a 30       	cpi	r23, 0x0A	; 10
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <showDigit+0x11a>
	{
		sendToLEDdriver(0,0);		//send out the number to the two display drivers
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <showDigit+0x122>
	}
	else
	{
		sendToLEDdriver(u16Drv1Total,u16Drv2Total);		//send out the number to the two display drivers
 5b2:	69 81       	ldd	r22, Y+1	; 0x01
 5b4:	7a 81       	ldd	r23, Y+2	; 0x02
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ba:	14 df       	rcall	.-472    	; 0x3e4 <sendToLEDdriver>
 5bc:	24 96       	adiw	r28, 0x04	; 4
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <__vector_9>:
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
 5f0:	80 91 66 00 	lds	r24, 0x0066
 5f4:	90 91 67 00 	lds	r25, 0x0067
 5f8:	89 2b       	or	r24, r25
 5fa:	49 f0       	breq	.+18     	; 0x60e <__vector_9+0x40>
 5fc:	80 91 66 00 	lds	r24, 0x0066
 600:	90 91 67 00 	lds	r25, 0x0067
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	90 93 67 00 	sts	0x0067, r25
 60a:	80 93 66 00 	sts	0x0066, r24
 60e:	80 91 69 00 	lds	r24, 0x0069
 612:	81 50       	subi	r24, 0x01	; 1
 614:	80 93 69 00 	sts	0x0069, r24
 618:	80 91 69 00 	lds	r24, 0x0069
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	d8 f4       	brcc	.+54     	; 0x656 <__vector_9+0x88>
 620:	ac 9a       	sbi	0x15, 4	; 21
 622:	ad 9a       	sbi	0x15, 5	; 21
 624:	20 91 7e 00 	lds	r18, 0x007E
 628:	40 91 7d 00 	lds	r20, 0x007D
 62c:	60 91 7c 00 	lds	r22, 0x007C
 630:	80 91 7b 00 	lds	r24, 0x007B
 634:	31 df       	rcall	.-414    	; 0x498 <showDigit>
 636:	c1 9a       	sbi	0x18, 1	; 24
 638:	c0 9a       	sbi	0x18, 0	; 24
 63a:	80 91 81 00 	lds	r24, 0x0081
 63e:	81 11       	cpse	r24, r1
 640:	db 9a       	sbi	0x1b, 3	; 27
 642:	80 91 75 00 	lds	r24, 0x0075
 646:	81 11       	cpse	r24, r1
 648:	aa 9a       	sbi	0x15, 2	; 21
 64a:	8a ec       	ldi	r24, 0xCA	; 202
 64c:	80 93 69 00 	sts	0x0069, r24
 650:	ad 98       	cbi	0x15, 5	; 21
 652:	10 92 86 00 	sts	0x0086, r1
 656:	90 91 69 00 	lds	r25, 0x0069
 65a:	80 91 6a 00 	lds	r24, 0x006A
 65e:	98 17       	cp	r25, r24
 660:	88 f4       	brcc	.+34     	; 0x684 <__vector_9+0xb6>
 662:	80 91 86 00 	lds	r24, 0x0086
 666:	88 23       	and	r24, r24
 668:	69 f4       	brne	.+26     	; 0x684 <__vector_9+0xb6>
 66a:	2a e0       	ldi	r18, 0x0A	; 10
 66c:	4a e0       	ldi	r20, 0x0A	; 10
 66e:	6a e0       	ldi	r22, 0x0A	; 10
 670:	8a e0       	ldi	r24, 0x0A	; 10
 672:	12 df       	rcall	.-476    	; 0x498 <showDigit>
 674:	c1 98       	cbi	0x18, 1	; 24
 676:	c0 98       	cbi	0x18, 0	; 24
 678:	db 98       	cbi	0x1b, 3	; 27
 67a:	aa 98       	cbi	0x15, 2	; 21
 67c:	ac 98       	cbi	0x15, 4	; 21
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 86 00 	sts	0x0086, r24
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <uCinit>:
	}
}

//----------------------------------------------------------------------------
//Routine:		uCinit 
//
//Function:		Initialize the microcontroller registers.
//
//Varibles passed:
//				none
//Returns:
//       		none
//----------------------------------------------------------------------------
void uCinit(void)
{
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
	u08 u08AlarmOn;		//says weither the alarm should go off or not

	PORTA=0xF7;          	//enable pull-up resistors
 6aa:	87 ef       	ldi	r24, 0xF7	; 247
 6ac:	8b bb       	out	0x1b, r24	; 27
	DDRA=0x08;   			//set PORTA to outputs
 6ae:	88 e0       	ldi	r24, 0x08	; 8
 6b0:	8a bb       	out	0x1a, r24	; 26
	PORTB=0xE0;          	//enable pull-up resistors
 6b2:	80 ee       	ldi	r24, 0xE0	; 224
 6b4:	88 bb       	out	0x18, r24	; 24
	DDRB=0xFF;   			//set PORTB to outputs
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	87 bb       	out	0x17, r24	; 23
	PORTC=0x03;          	//enable pull-up resistors
 6ba:	83 e0       	ldi	r24, 0x03	; 3
 6bc:	85 bb       	out	0x15, r24	; 21
	DDRC=0xFC;   			//set PORTC to outputs
 6be:	8c ef       	ldi	r24, 0xFC	; 252
 6c0:	84 bb       	out	0x14, r24	; 20
	PORTD=0xC0;          	//PortD has no pullup resistors enabled
 6c2:	80 ec       	ldi	r24, 0xC0	; 192
 6c4:	82 bb       	out	0x12, r24	; 18
	DDRD=0x3F;           	//set all of port D to output
 6c6:	8f e3       	ldi	r24, 0x3F	; 63
 6c8:	81 bb       	out	0x11, r24	; 17

	//timer 0 initialization (8 bit) (for the 20mS tock)
	TIMSK = (1<<TOIE0);   //Enable TCNT0 overflow
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;         	// reset TCNT0
 6ce:	12 be       	out	0x32, r1	; 50
	TCCR0 = 1;        	//count with cpu clock/1
 6d0:	83 bf       	out	0x33, r24	; 51
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	da 01       	movw	r26, r20
 6d8:	1d d3       	rcall	.+1594   	; 0xd14 <__eeprom_read_byte_1C1D1E>
 6da:	80 2d       	mov	r24, r0

	//get values out of EERPOM
	u08AlarmMinute = eeprom_read_byte((u08*)&EEalarmMinute);//get the alarm minute out of the eeprom
 6dc:	99 27       	eor	r25, r25
 6de:	28 2f       	mov	r18, r24
 6e0:	80 93 7f 00 	sts	0x007F, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	db 01       	movw	r26, r22
 6ea:	14 d3       	rcall	.+1576   	; 0xd14 <__eeprom_read_byte_1C1D1E>
 6ec:	80 2d       	mov	r24, r0
	u08AlarmHour = eeprom_read_byte((u08*)&EEalarmHour);	//get the alarm hour out of the eeprom
 6ee:	80 93 93 00 	sts	0x0093, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
 6f2:	e2 e0       	ldi	r30, 0x02	; 2
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	df 01       	movw	r26, r30
 6f8:	0d d3       	rcall	.+1562   	; 0xd14 <__eeprom_read_byte_1C1D1E>
 6fa:	80 2d       	mov	r24, r0
	u08AlarmOn = eeprom_read_byte((u08*)&EEalarmOn);		//see if the alarm was on previous to power down
 6fc:	c8 2f       	mov	r28, r24
 6fe:	dd 27       	eor	r29, r29
 700:	9c 2f       	mov	r25, r28
	//make sure the values from EEPROM are legit
	if(u08AlarmMinute>59)		//is the alarm minute an illegal value?
 702:	2c 33       	cpi	r18, 0x3C	; 60
 704:	30 f0       	brcs	.+12     	; 0x712 <uCinit+0x6c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	da 01       	movw	r26, r20
 70a:	08 2e       	mov	r0, r24
 70c:	0b d3       	rcall	.+1558   	; 0xd24 <__eeprom_write_byte_1C1D1E>
	{
		eeprom_write_byte((u08*)&EEalarmMinute,0);	//set the alarm minute to a legit value
		u08AlarmMinute=0;		//yes, then reset the ram value to a legal value
 70e:	10 92 7f 00 	sts	0x007F, r1
	}
	if(u08AlarmHour>23)		//is the alarm hour an illegal value?
 712:	80 91 93 00 	lds	r24, 0x0093
 716:	88 31       	cpi	r24, 0x18	; 24
 718:	30 f0       	brcs	.+12     	; 0x726 <uCinit+0x80>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 71a:	87 e0       	ldi	r24, 0x07	; 7
 71c:	db 01       	movw	r26, r22
 71e:	08 2e       	mov	r0, r24
 720:	01 d3       	rcall	.+1538   	; 0xd24 <__eeprom_write_byte_1C1D1E>
	{
		eeprom_write_byte((u08*)&EEalarmHour,7);	//set the alarm hour to a legit value
		u08AlarmHour=7;		//yes, then reset the ram value to a legal value
 722:	80 93 93 00 	sts	0x0093, r24
	}
	if(u08AlarmOn==0)		//should the alarm be off at powerup?
 726:	cc 23       	and	r28, r28
 728:	19 f4       	brne	.+6      	; 0x730 <uCinit+0x8a>
	{				
		boolLedAlarm=false;	//turn off the alarm indicator
 72a:	10 92 75 00 	sts	0x0075, r1
 72e:	0b c0       	rjmp	.+22     	; 0x746 <uCinit+0xa0>
	}
	else if(u08AlarmOn==1)	//should the alarm be on at powerup?
 730:	91 30       	cpi	r25, 0x01	; 1
 732:	19 f4       	brne	.+6      	; 0x73a <uCinit+0x94>
	{
		boolLedAlarm=true;	//turn on the alarm indicator
 734:	90 93 75 00 	sts	0x0075, r25
 738:	06 c0       	rjmp	.+12     	; 0x746 <uCinit+0xa0>
	}
	else if(u08AlarmOn>1)		//is the alarm On state an illegal value?
 73a:	92 30       	cpi	r25, 0x02	; 2
 73c:	20 f0       	brcs	.+8      	; 0x746 <uCinit+0xa0>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	df 01       	movw	r26, r30
 742:	08 2e       	mov	r0, r24
 744:	ef d2       	rcall	.+1502   	; 0xd24 <__eeprom_write_byte_1C1D1E>
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	08 95       	ret

0000074c <AlarmShutdown>:
	{
		eeprom_write_byte((u08*)&EEalarmOn,0);	//set the alarm on state to a legit value
		u08AlarmOn=0;		//yes, then reset the ram value to a legal value
	}
}


//----------------------------------------------------------------------------
//Routine:		integerToArray 
//
//Function:		
//				Takes a 16 bit integer and converts it to a string, with the ones,
//				tens, and hundreds digits in fixed positions
//
//Varibles passed:
//				intNumToString:	the number to be converted to a string	
//Returns:
//       		none
//----------------------------------------------------------------------------
//note:  The standard itoa() puts the ones, tens, and hundreds digit in different places based upon
//		 the size of the input number
void integerToArray(unsigned int intNumToString)
{
    unsigned int minus = 0;
    long int d;
    char *ptr;

    strcpy (str,"00000");
	str[4]=0;
	str[3]=0;
	str[2]=0;
	str[1]=0;
	str[0]=0;
    ptr = &str[sizeof(str) -1];
    *ptr-- = '\0';
    if (intNumToString < 0)
    {
         minus = 1; 
		  intNumToString = -intNumToString;
    }
    while (intNumToString > 0)
    {
         d = intNumToString % 10;
         //*ptr-- = d + '0';
		 *ptr-- = d;		//we need a non-ASCII value
         intNumToString /= 10;
     }
    if (minus)
        *ptr = '-';
    else
        ptr++;
}

//----------------------------------------------------------------------------
//Routine:		AlarmShutdown
//
//Function:		If the alarm is going off, then this turns off the alarm
//
//Varibles passed:
//				none
//Returns:
//       		none
//----------------------------------------------------------------------------
void AlarmShutdown(void)
{
 74c:	80 91 6f 00 	lds	r24, 0x006F
 750:	88 23       	and	r24, r24
 752:	41 f0       	breq	.+16     	; 0x764 <AlarmShutdown+0x18>
	if(boolAlarmSounding==true)
	{
		alarmSilent();	//turn off timer 1 for the alarm
		u08TmrAlarmOsc=0;	//turn off the alarm oscillation
		boolAlarmSounding=false;	//the alarm is no longer sounding
	}
}

//----------------------------------------------------------------------------
//Routine:		alarmSounding
//
//Function:		This uses timer 1 to create a frequency on OC1A, this is pin 19
//				on the 40 pin DIP version of the ATMEGA8535
//
//Varibles passed:
//				none
//Returns:
//       		none
//----------------------------------------------------------------------------
void alarmSounding(void)
{
	//these settings have the alarm running at 975Hz (period of 1.025mS)
	// the OCR1A setting makes the output pulse high for about 320uS.
	OCR1AH = 0x00;    	//Set a initial value in the OCR1A-register
    OCR1AL = 0xA0;    	//Timer 1 counts to this value,
	TCCR1A = (1<<COM1A1 | 1<<WGM11);	//attach the OC1A pin to timer 1, turn on fast 9-bit PWM (WGM11)
	TCCR1B = (1<<WGM12 | 1<<CS11);	//fast 9-bit PWM (WGM12), clock for timer 1 divided by 8 from the prescaler (CS11)
/*
	//configuration for 4KHz output:		(sounds like a fire alarm, bad)
	OCR1AH = 0x00;    	//Set a initial value in the OCR1A-register
    OCR1AL = 0xA0;    	//Timer 1 counts to this value,
		//0x2AA		170uS high
		//0x1F0		124uS high	 	(10 bit = 0x3FF max count)
		//0x1A0		104uS high     (out of 256uS)
		//0xA0		40uS high
	TCCR1A = (1<<COM1A1 | 1<<WGM11 | 1<<WGM10);	//attach the OC1A pin to timer 1, turn on fast 9-bit PWM
	TCCR1B = (1<<WGM12 | 1<<CS10);	//fast 9-bit PWM, clock for timer 1 divided by , | 1<<CS10
*/
}

//----------------------------------------------------------------------------
//Routine:		alarmSilent
//
//Function:		This stops timer 1 from making the alarm sound on OC1A.
//
//Varibles passed:
//				none
//Returns:
//       		none
//----------------------------------------------------------------------------
void alarmSilent(void)
{
    OCR1AH = 0;	//turn off OC1A
 754:	1b bc       	out	0x2b, r1	; 43
    OCR1AL = 0;
 756:	1a bc       	out	0x2a, r1	; 42
	TCCR1A = 0;		
 758:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 75a:	1e bc       	out	0x2e, r1	; 46
 75c:	10 92 94 00 	sts	0x0094, r1
 760:	10 92 6f 00 	sts	0x006F, r1
 764:	08 95       	ret

00000766 <alarmSounding>:
 766:	1b bc       	out	0x2b, r1	; 43
 768:	80 ea       	ldi	r24, 0xA0	; 160
 76a:	8a bd       	out	0x2a, r24	; 42
 76c:	82 e8       	ldi	r24, 0x82	; 130
 76e:	8f bd       	out	0x2f, r24	; 47
 770:	8a e0       	ldi	r24, 0x0A	; 10
 772:	8e bd       	out	0x2e, r24	; 46
 774:	08 95       	ret

00000776 <alarmSilent>:
 776:	1b bc       	out	0x2b, r1	; 43
 778:	1a bc       	out	0x2a, r1	; 42
 77a:	1f bc       	out	0x2f, r1	; 47
 77c:	1e bc       	out	0x2e, r1	; 46
 77e:	08 95       	ret

00000780 <integerToArray>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	ec 01       	movw	r28, r24
 786:	60 e6       	ldi	r22, 0x60	; 96
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	8c e8       	ldi	r24, 0x8C	; 140
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	9b d2       	rcall	.+1334   	; 0xcc6 <strcpy>
 790:	10 92 90 00 	sts	0x0090, r1
 794:	10 92 8f 00 	sts	0x008F, r1
 798:	10 92 8e 00 	sts	0x008E, r1
 79c:	10 92 8d 00 	sts	0x008D, r1
 7a0:	10 92 8c 00 	sts	0x008C, r1
 7a4:	10 92 91 00 	sts	0x0091, r1
 7a8:	e0 e9       	ldi	r30, 0x90	; 144
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	0b c0       	rjmp	.+22     	; 0x7c4 <integerToArray+0x44>
 7ae:	ce 01       	movw	r24, r28
 7b0:	6a e0       	ldi	r22, 0x0A	; 10
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	9b d2       	rcall	.+1334   	; 0xcec <__udivmodhi4>
 7b6:	80 83       	st	Z, r24
 7b8:	31 97       	sbiw	r30, 0x01	; 1
 7ba:	ce 01       	movw	r24, r28
 7bc:	6a e0       	ldi	r22, 0x0A	; 10
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	95 d2       	rcall	.+1322   	; 0xcec <__udivmodhi4>
 7c2:	eb 01       	movw	r28, r22
 7c4:	20 97       	sbiw	r28, 0x00	; 0
 7c6:	99 f7       	brne	.-26     	; 0x7ae <integerToArray+0x2e>
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <SrvTock>:
 7ce:	ef 92       	push	r14
 7d0:	ff 92       	push	r15
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	80 91 66 00 	lds	r24, 0x0066
 7da:	90 91 67 00 	lds	r25, 0x0067
 7de:	89 2b       	or	r24, r25
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <SrvTock+0x16>
 7e2:	4f c2       	rjmp	.+1182   	; 0xc82 <SrvTock+0x4b4>
 7e4:	88 e3       	ldi	r24, 0x38	; 56
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	90 93 67 00 	sts	0x0067, r25
 7ec:	80 93 66 00 	sts	0x0066, r24
 7f0:	80 91 78 00 	lds	r24, 0x0078
 7f4:	88 23       	and	r24, r24
 7f6:	19 f0       	breq	.+6      	; 0x7fe <SrvTock+0x30>
 7f8:	81 50       	subi	r24, 0x01	; 1
 7fa:	80 93 78 00 	sts	0x0078, r24
 7fe:	80 91 7a 00 	lds	r24, 0x007A
 802:	88 23       	and	r24, r24
 804:	19 f0       	breq	.+6      	; 0x80c <SrvTock+0x3e>
 806:	81 50       	subi	r24, 0x01	; 1
 808:	80 93 7a 00 	sts	0x007A, r24
 80c:	80 91 8b 00 	lds	r24, 0x008B
 810:	88 23       	and	r24, r24
 812:	19 f0       	breq	.+6      	; 0x81a <SrvTock+0x4c>
 814:	81 50       	subi	r24, 0x01	; 1
 816:	80 93 8b 00 	sts	0x008B, r24
 81a:	80 91 88 00 	lds	r24, 0x0088
 81e:	88 23       	and	r24, r24
 820:	19 f0       	breq	.+6      	; 0x828 <SrvTock+0x5a>
 822:	81 50       	subi	r24, 0x01	; 1
 824:	80 93 88 00 	sts	0x0088, r24
 828:	20 91 84 00 	lds	r18, 0x0084
 82c:	21 30       	cpi	r18, 0x01	; 1
 82e:	39 f4       	brne	.+14     	; 0x83e <SrvTock+0x70>
 830:	87 b1       	in	r24, 0x07	; 7
 832:	80 66       	ori	r24, 0x60	; 96
 834:	87 b9       	out	0x07, r24	; 7
 836:	86 b1       	in	r24, 0x06	; 6
 838:	87 6c       	ori	r24, 0xC7	; 199
 83a:	86 b9       	out	0x06, r24	; 6
 83c:	34 c0       	rjmp	.+104    	; 0x8a6 <SrvTock+0xd8>
 83e:	22 30       	cpi	r18, 0x02	; 2
 840:	61 f5       	brne	.+88     	; 0x89a <SrvTock+0xcc>
 842:	85 b1       	in	r24, 0x05	; 5
 844:	80 93 80 00 	sts	0x0080, r24
 848:	89 3c       	cpi	r24, 0xC9	; 201
 84a:	10 f0       	brcs	.+4      	; 0x850 <SrvTock+0x82>
 84c:	88 ec       	ldi	r24, 0xC8	; 200
 84e:	03 c0       	rjmp	.+6      	; 0x856 <SrvTock+0x88>
 850:	86 39       	cpi	r24, 0x96	; 150
 852:	18 f4       	brcc	.+6      	; 0x85a <SrvTock+0x8c>
 854:	86 e9       	ldi	r24, 0x96	; 150
 856:	80 93 80 00 	sts	0x0080, r24
 85a:	80 91 79 00 	lds	r24, 0x0079
 85e:	87 50       	subi	r24, 0x07	; 7
 860:	8f 30       	cpi	r24, 0x0F	; 15
 862:	18 f4       	brcc	.+6      	; 0x86a <SrvTock+0x9c>
 864:	86 e9       	ldi	r24, 0x96	; 150
 866:	80 93 80 00 	sts	0x0080, r24
 86a:	90 91 6e 00 	lds	r25, 0x006E
 86e:	80 91 80 00 	lds	r24, 0x0080
 872:	98 17       	cp	r25, r24
 874:	40 f4       	brcc	.+16     	; 0x886 <SrvTock+0xb8>
 876:	89 2f       	mov	r24, r25
 878:	8f 5f       	subi	r24, 0xFF	; 255
 87a:	80 93 6e 00 	sts	0x006E, r24
 87e:	80 3a       	cpi	r24, 0xA0	; 160
 880:	38 f4       	brcc	.+14     	; 0x890 <SrvTock+0xc2>
 882:	9a 5f       	subi	r25, 0xFA	; 250
 884:	03 c0       	rjmp	.+6      	; 0x88c <SrvTock+0xbe>
 886:	89 17       	cp	r24, r25
 888:	18 f4       	brcc	.+6      	; 0x890 <SrvTock+0xc2>
 88a:	91 50       	subi	r25, 0x01	; 1
 88c:	90 93 6e 00 	sts	0x006E, r25
 890:	80 91 6e 00 	lds	r24, 0x006E
 894:	80 93 6a 00 	sts	0x006A, r24
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <SrvTock+0xd8>
 89a:	22 23       	and	r18, r18
 89c:	21 f4       	brne	.+8      	; 0x8a6 <SrvTock+0xd8>
 89e:	84 e1       	ldi	r24, 0x14	; 20
 8a0:	80 93 84 00 	sts	0x0084, r24
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <SrvTock+0xde>
 8a6:	21 50       	subi	r18, 0x01	; 1
 8a8:	20 93 84 00 	sts	0x0084, r18
 8ac:	80 91 77 00 	lds	r24, 0x0077
 8b0:	88 23       	and	r24, r24
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <SrvTock+0xe8>
 8b4:	5f c0       	rjmp	.+190    	; 0x974 <SrvTock+0x1a6>
 8b6:	82 e0       	ldi	r24, 0x02	; 2
 8b8:	80 93 77 00 	sts	0x0077, r24
 8bc:	80 91 6c 00 	lds	r24, 0x006C
 8c0:	88 23       	and	r24, r24
 8c2:	29 f0       	breq	.+10     	; 0x8ce <SrvTock+0x100>
 8c4:	80 91 6c 00 	lds	r24, 0x006C
 8c8:	81 30       	cpi	r24, 0x01	; 1
 8ca:	09 f0       	breq	.+2      	; 0x8ce <SrvTock+0x100>
 8cc:	56 c0       	rjmp	.+172    	; 0x97a <SrvTock+0x1ac>
 8ce:	80 91 6c 00 	lds	r24, 0x006C
 8d2:	88 23       	and	r24, r24
 8d4:	79 f4       	brne	.+30     	; 0x8f4 <SrvTock+0x126>
 8d6:	19 e8       	ldi	r17, 0x89	; 137
 8d8:	e1 2e       	mov	r14, r17
 8da:	10 e0       	ldi	r17, 0x00	; 0
 8dc:	f1 2e       	mov	r15, r17
 8de:	03 e8       	ldi	r16, 0x83	; 131
 8e0:	10 e0       	ldi	r17, 0x00	; 0
 8e2:	22 e8       	ldi	r18, 0x82	; 130
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	45 e8       	ldi	r20, 0x85	; 133
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	67 e8       	ldi	r22, 0x87	; 135
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	89 e7       	ldi	r24, 0x79	; 121
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	08 dd       	rcall	.-1520   	; 0x304 <rtc_get_timeNdate>
 8f4:	80 91 87 00 	lds	r24, 0x0087
 8f8:	99 27       	eor	r25, r25
 8fa:	42 df       	rcall	.-380    	; 0x780 <integerToArray>
 8fc:	80 91 8f 00 	lds	r24, 0x008F
 900:	80 93 72 00 	sts	0x0072, r24
 904:	80 91 90 00 	lds	r24, 0x0090
 908:	80 93 73 00 	sts	0x0073, r24
 90c:	80 91 79 00 	lds	r24, 0x0079
 910:	80 93 92 00 	sts	0x0092, r24
 914:	8d 30       	cpi	r24, 0x0D	; 13
 916:	20 f0       	brcs	.+8      	; 0x920 <SrvTock+0x152>
 918:	8c 50       	subi	r24, 0x0C	; 12
 91a:	80 93 92 00 	sts	0x0092, r24
 91e:	08 c0       	rjmp	.+16     	; 0x930 <SrvTock+0x162>
 920:	88 23       	and	r24, r24
 922:	21 f4       	brne	.+8      	; 0x92c <SrvTock+0x15e>
 924:	8c e0       	ldi	r24, 0x0C	; 12
 926:	80 93 92 00 	sts	0x0092, r24
 92a:	05 c0       	rjmp	.+10     	; 0x936 <SrvTock+0x168>
 92c:	8c 30       	cpi	r24, 0x0C	; 12
 92e:	19 f4       	brne	.+6      	; 0x936 <SrvTock+0x168>
 930:	10 92 81 00 	sts	0x0081, r1
 934:	03 c0       	rjmp	.+6      	; 0x93c <SrvTock+0x16e>
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	80 93 81 00 	sts	0x0081, r24
 93c:	80 91 92 00 	lds	r24, 0x0092
 940:	99 27       	eor	r25, r25
 942:	1e df       	rcall	.-452    	; 0x780 <integerToArray>
 944:	80 91 8f 00 	lds	r24, 0x008F
 948:	88 23       	and	r24, r24
 94a:	19 f4       	brne	.+6      	; 0x952 <SrvTock+0x184>
 94c:	8a e0       	ldi	r24, 0x0A	; 10
 94e:	80 93 8f 00 	sts	0x008F, r24
 952:	80 91 8f 00 	lds	r24, 0x008F
 956:	80 93 7b 00 	sts	0x007B, r24
 95a:	80 91 90 00 	lds	r24, 0x0090
 95e:	80 93 7c 00 	sts	0x007C, r24
 962:	80 91 72 00 	lds	r24, 0x0072
 966:	80 93 7d 00 	sts	0x007D, r24
 96a:	80 91 73 00 	lds	r24, 0x0073
 96e:	80 93 7e 00 	sts	0x007E, r24
 972:	03 c0       	rjmp	.+6      	; 0x97a <SrvTock+0x1ac>
 974:	81 50       	subi	r24, 0x01	; 1
 976:	80 93 77 00 	sts	0x0077, r24
 97a:	80 91 94 00 	lds	r24, 0x0094
 97e:	81 30       	cpi	r24, 0x01	; 1
 980:	61 f4       	brne	.+24     	; 0x99a <SrvTock+0x1cc>
 982:	8e e1       	ldi	r24, 0x1E	; 30
 984:	80 93 94 00 	sts	0x0094, r24
 988:	1b bc       	out	0x2b, r1	; 43
 98a:	80 ea       	ldi	r24, 0xA0	; 160
 98c:	8a bd       	out	0x2a, r24	; 42
 98e:	82 e8       	ldi	r24, 0x82	; 130
 990:	8f bd       	out	0x2f, r24	; 47
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	8e bd       	out	0x2e, r24	; 46
 996:	8e e1       	ldi	r24, 0x1E	; 30
 998:	09 c0       	rjmp	.+18     	; 0x9ac <SrvTock+0x1de>
 99a:	84 31       	cpi	r24, 0x14	; 20
 99c:	29 f4       	brne	.+10     	; 0x9a8 <SrvTock+0x1da>
 99e:	1b bc       	out	0x2b, r1	; 43
 9a0:	1a bc       	out	0x2a, r1	; 42
 9a2:	1f bc       	out	0x2f, r1	; 47
 9a4:	1e bc       	out	0x2e, r1	; 46
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <SrvTock+0x1de>
 9a8:	82 30       	cpi	r24, 0x02	; 2
 9aa:	18 f0       	brcs	.+6      	; 0x9b2 <SrvTock+0x1e4>
 9ac:	81 50       	subi	r24, 0x01	; 1
 9ae:	80 93 94 00 	sts	0x0094, r24
 9b2:	80 91 70 00 	lds	r24, 0x0070
 9b6:	90 91 71 00 	lds	r25, 0x0071
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	41 f0       	breq	.+16     	; 0x9ce <SrvTock+0x200>
 9be:	01 97       	sbiw	r24, 0x01	; 1
 9c0:	90 93 71 00 	sts	0x0071, r25
 9c4:	80 93 70 00 	sts	0x0070, r24
 9c8:	01 97       	sbiw	r24, 0x01	; 1
 9ca:	09 f4       	brne	.+2      	; 0x9ce <SrvTock+0x200>
 9cc:	bf de       	rcall	.-642    	; 0x74c <AlarmShutdown>
 9ce:	80 91 6c 00 	lds	r24, 0x006C
 9d2:	81 30       	cpi	r24, 0x01	; 1
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <SrvTock+0x20a>
 9d6:	6f c0       	rjmp	.+222    	; 0xab6 <SrvTock+0x2e8>
 9d8:	81 30       	cpi	r24, 0x01	; 1
 9da:	20 f0       	brcs	.+8      	; 0x9e4 <SrvTock+0x216>
 9dc:	82 30       	cpi	r24, 0x02	; 2
 9de:	09 f0       	breq	.+2      	; 0x9e2 <SrvTock+0x214>
 9e0:	50 c1       	rjmp	.+672    	; 0xc82 <SrvTock+0x4b4>
 9e2:	ab c0       	rjmp	.+342    	; 0xb3a <SrvTock+0x36c>
 9e4:	80 91 75 00 	lds	r24, 0x0075
 9e8:	88 23       	and	r24, r24
 9ea:	f9 f0       	breq	.+62     	; 0xa2a <SrvTock+0x25c>
 9ec:	90 91 93 00 	lds	r25, 0x0093
 9f0:	80 91 79 00 	lds	r24, 0x0079
 9f4:	98 17       	cp	r25, r24
 9f6:	c9 f4       	brne	.+50     	; 0xa2a <SrvTock+0x25c>
 9f8:	90 91 7f 00 	lds	r25, 0x007F
 9fc:	80 91 87 00 	lds	r24, 0x0087
 a00:	98 17       	cp	r25, r24
 a02:	c9 f4       	brne	.+50     	; 0xa36 <SrvTock+0x268>
 a04:	80 91 68 00 	lds	r24, 0x0068
 a08:	88 23       	and	r24, r24
 a0a:	c1 f0       	breq	.+48     	; 0xa3c <SrvTock+0x26e>
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	80 93 6f 00 	sts	0x006F, r24
 a12:	10 92 68 00 	sts	0x0068, r1
 a16:	8e e1       	ldi	r24, 0x1E	; 30
 a18:	80 93 94 00 	sts	0x0094, r24
 a1c:	80 e6       	ldi	r24, 0x60	; 96
 a1e:	9a ee       	ldi	r25, 0xEA	; 234
 a20:	90 93 71 00 	sts	0x0071, r25
 a24:	80 93 70 00 	sts	0x0070, r24
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <SrvTock+0x26e>
 a2a:	90 91 7f 00 	lds	r25, 0x007F
 a2e:	80 91 87 00 	lds	r24, 0x0087
 a32:	98 17       	cp	r25, r24
 a34:	19 f0       	breq	.+6      	; 0xa3c <SrvTock+0x26e>
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	80 93 68 00 	sts	0x0068, r24
 a3c:	cc 99       	sbic	0x19, 4	; 25
 a3e:	08 c0       	rjmp	.+16     	; 0xa50 <SrvTock+0x282>
 a40:	80 91 78 00 	lds	r24, 0x0078
 a44:	88 23       	and	r24, r24
 a46:	21 f4       	brne	.+8      	; 0xa50 <SrvTock+0x282>
 a48:	81 de       	rcall	.-766    	; 0x74c <AlarmShutdown>
 a4a:	8c e0       	ldi	r24, 0x0C	; 12
 a4c:	80 93 78 00 	sts	0x0078, r24
 a50:	cd 99       	sbic	0x19, 5	; 25
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <SrvTock+0x296>
 a54:	80 91 7a 00 	lds	r24, 0x007A
 a58:	88 23       	and	r24, r24
 a5a:	21 f4       	brne	.+8      	; 0xa64 <SrvTock+0x296>
 a5c:	77 de       	rcall	.-786    	; 0x74c <AlarmShutdown>
 a5e:	8c e0       	ldi	r24, 0x0C	; 12
 a60:	80 93 7a 00 	sts	0x007A, r24
 a64:	ce 99       	sbic	0x19, 6	; 25
 a66:	0b c0       	rjmp	.+22     	; 0xa7e <SrvTock+0x2b0>
 a68:	80 91 8b 00 	lds	r24, 0x008B
 a6c:	88 23       	and	r24, r24
 a6e:	39 f4       	brne	.+14     	; 0xa7e <SrvTock+0x2b0>
 a70:	6d de       	rcall	.-806    	; 0x74c <AlarmShutdown>
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	80 93 6c 00 	sts	0x006C, r24
 a78:	8c e0       	ldi	r24, 0x0C	; 12
 a7a:	80 93 8b 00 	sts	0x008B, r24
 a7e:	cf 99       	sbic	0x19, 7	; 25
 a80:	00 c1       	rjmp	.+512    	; 0xc82 <SrvTock+0x4b4>
 a82:	10 91 88 00 	lds	r17, 0x0088
 a86:	11 23       	and	r17, r17
 a88:	09 f0       	breq	.+2      	; 0xa8c <SrvTock+0x2be>
 a8a:	fb c0       	rjmp	.+502    	; 0xc82 <SrvTock+0x4b4>
 a8c:	5f de       	rcall	.-834    	; 0x74c <AlarmShutdown>
 a8e:	80 91 75 00 	lds	r24, 0x0075
 a92:	a2 e0       	ldi	r26, 0x02	; 2
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	88 23       	and	r24, r24
 a98:	29 f0       	breq	.+10     	; 0xaa4 <SrvTock+0x2d6>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 a9a:	01 2e       	mov	r0, r17
 a9c:	43 d1       	rcall	.+646    	; 0xd24 <__eeprom_write_byte_1C1D1E>
 a9e:	10 92 75 00 	sts	0x0075, r1
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <SrvTock+0x2e0>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	08 2e       	mov	r0, r24
 aa8:	3d d1       	rcall	.+634    	; 0xd24 <__eeprom_write_byte_1C1D1E>
 aaa:	80 93 75 00 	sts	0x0075, r24
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	80 93 6c 00 	sts	0x006C, r24
 ab4:	3e c0       	rjmp	.+124    	; 0xb32 <SrvTock+0x364>
 ab6:	cc 99       	sbic	0x19, 4	; 25
 ab8:	11 c0       	rjmp	.+34     	; 0xadc <SrvTock+0x30e>
 aba:	80 91 78 00 	lds	r24, 0x0078
 abe:	88 23       	and	r24, r24
 ac0:	69 f4       	brne	.+26     	; 0xadc <SrvTock+0x30e>
 ac2:	80 91 87 00 	lds	r24, 0x0087
 ac6:	8b 33       	cpi	r24, 0x3B	; 59
 ac8:	20 f4       	brcc	.+8      	; 0xad2 <SrvTock+0x304>
 aca:	8f 5f       	subi	r24, 0xFF	; 255
 acc:	80 93 87 00 	sts	0x0087, r24
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <SrvTock+0x308>
 ad2:	10 92 87 00 	sts	0x0087, r1
 ad6:	8c e0       	ldi	r24, 0x0C	; 12
 ad8:	80 93 78 00 	sts	0x0078, r24
 adc:	cd 99       	sbic	0x19, 5	; 25
 ade:	11 c0       	rjmp	.+34     	; 0xb02 <SrvTock+0x334>
 ae0:	80 91 7a 00 	lds	r24, 0x007A
 ae4:	88 23       	and	r24, r24
 ae6:	69 f4       	brne	.+26     	; 0xb02 <SrvTock+0x334>
 ae8:	80 91 79 00 	lds	r24, 0x0079
 aec:	87 31       	cpi	r24, 0x17	; 23
 aee:	20 f4       	brcc	.+8      	; 0xaf8 <SrvTock+0x32a>
 af0:	8f 5f       	subi	r24, 0xFF	; 255
 af2:	80 93 79 00 	sts	0x0079, r24
 af6:	02 c0       	rjmp	.+4      	; 0xafc <SrvTock+0x32e>
 af8:	10 92 79 00 	sts	0x0079, r1
 afc:	8c e0       	ldi	r24, 0x0C	; 12
 afe:	80 93 7a 00 	sts	0x007A, r24
 b02:	ce 9b       	sbis	0x19, 6	; 25
 b04:	0f c0       	rjmp	.+30     	; 0xb24 <SrvTock+0x356>
 b06:	80 91 8b 00 	lds	r24, 0x008B
 b0a:	88 23       	and	r24, r24
 b0c:	59 f4       	brne	.+22     	; 0xb24 <SrvTock+0x356>
 b0e:	10 92 6c 00 	sts	0x006C, r1
 b12:	40 e0       	ldi	r20, 0x00	; 0
 b14:	60 91 87 00 	lds	r22, 0x0087
 b18:	80 91 79 00 	lds	r24, 0x0079
 b1c:	6f db       	rcall	.-2338   	; 0x1fc <rtc_set_time>
 b1e:	8c e0       	ldi	r24, 0x0C	; 12
 b20:	80 93 8b 00 	sts	0x008B, r24
 b24:	cf 99       	sbic	0x19, 7	; 25
 b26:	ad c0       	rjmp	.+346    	; 0xc82 <SrvTock+0x4b4>
 b28:	80 91 88 00 	lds	r24, 0x0088
 b2c:	88 23       	and	r24, r24
 b2e:	09 f0       	breq	.+2      	; 0xb32 <SrvTock+0x364>
 b30:	a8 c0       	rjmp	.+336    	; 0xc82 <SrvTock+0x4b4>
 b32:	8c e0       	ldi	r24, 0x0C	; 12
 b34:	80 93 88 00 	sts	0x0088, r24
 b38:	a4 c0       	rjmp	.+328    	; 0xc82 <SrvTock+0x4b4>
 b3a:	80 91 7f 00 	lds	r24, 0x007F
 b3e:	99 27       	eor	r25, r25
 b40:	1f de       	rcall	.-962    	; 0x780 <integerToArray>
 b42:	80 91 8f 00 	lds	r24, 0x008F
 b46:	80 93 72 00 	sts	0x0072, r24
 b4a:	80 91 90 00 	lds	r24, 0x0090
 b4e:	80 93 73 00 	sts	0x0073, r24
 b52:	80 91 93 00 	lds	r24, 0x0093
 b56:	80 93 92 00 	sts	0x0092, r24
 b5a:	8d 30       	cpi	r24, 0x0D	; 13
 b5c:	20 f0       	brcs	.+8      	; 0xb66 <SrvTock+0x398>
 b5e:	8c 50       	subi	r24, 0x0C	; 12
 b60:	80 93 92 00 	sts	0x0092, r24
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <SrvTock+0x3a8>
 b66:	88 23       	and	r24, r24
 b68:	21 f4       	brne	.+8      	; 0xb72 <SrvTock+0x3a4>
 b6a:	8c e0       	ldi	r24, 0x0C	; 12
 b6c:	80 93 92 00 	sts	0x0092, r24
 b70:	05 c0       	rjmp	.+10     	; 0xb7c <SrvTock+0x3ae>
 b72:	8c 30       	cpi	r24, 0x0C	; 12
 b74:	19 f4       	brne	.+6      	; 0xb7c <SrvTock+0x3ae>
 b76:	10 92 81 00 	sts	0x0081, r1
 b7a:	03 c0       	rjmp	.+6      	; 0xb82 <SrvTock+0x3b4>
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	80 93 81 00 	sts	0x0081, r24
 b82:	80 91 92 00 	lds	r24, 0x0092
 b86:	99 27       	eor	r25, r25
 b88:	fb dd       	rcall	.-1034   	; 0x780 <integerToArray>
 b8a:	80 91 8f 00 	lds	r24, 0x008F
 b8e:	88 23       	and	r24, r24
 b90:	19 f4       	brne	.+6      	; 0xb98 <SrvTock+0x3ca>
 b92:	8a e0       	ldi	r24, 0x0A	; 10
 b94:	80 93 8f 00 	sts	0x008F, r24
 b98:	80 91 8f 00 	lds	r24, 0x008F
 b9c:	80 93 7b 00 	sts	0x007B, r24
 ba0:	80 91 90 00 	lds	r24, 0x0090
 ba4:	80 93 7c 00 	sts	0x007C, r24
 ba8:	80 91 72 00 	lds	r24, 0x0072
 bac:	80 93 7d 00 	sts	0x007D, r24
 bb0:	80 91 73 00 	lds	r24, 0x0073
 bb4:	80 93 7e 00 	sts	0x007E, r24
 bb8:	cc 99       	sbic	0x19, 4	; 25
 bba:	15 c0       	rjmp	.+42     	; 0xbe6 <SrvTock+0x418>
 bbc:	80 91 78 00 	lds	r24, 0x0078
 bc0:	88 23       	and	r24, r24
 bc2:	89 f4       	brne	.+34     	; 0xbe6 <SrvTock+0x418>
 bc4:	80 91 6d 00 	lds	r24, 0x006D
 bc8:	88 23       	and	r24, r24
 bca:	69 f4       	brne	.+26     	; 0xbe6 <SrvTock+0x418>
 bcc:	80 91 7f 00 	lds	r24, 0x007F
 bd0:	8b 33       	cpi	r24, 0x3B	; 59
 bd2:	20 f4       	brcc	.+8      	; 0xbdc <SrvTock+0x40e>
 bd4:	8f 5f       	subi	r24, 0xFF	; 255
 bd6:	80 93 7f 00 	sts	0x007F, r24
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <SrvTock+0x412>
 bdc:	10 92 7f 00 	sts	0x007F, r1
 be0:	8c e0       	ldi	r24, 0x0C	; 12
 be2:	80 93 78 00 	sts	0x0078, r24
 be6:	cd 99       	sbic	0x19, 5	; 25
 be8:	15 c0       	rjmp	.+42     	; 0xc14 <SrvTock+0x446>
 bea:	80 91 7a 00 	lds	r24, 0x007A
 bee:	88 23       	and	r24, r24
 bf0:	89 f4       	brne	.+34     	; 0xc14 <SrvTock+0x446>
 bf2:	80 91 6d 00 	lds	r24, 0x006D
 bf6:	88 23       	and	r24, r24
 bf8:	69 f4       	brne	.+26     	; 0xc14 <SrvTock+0x446>
 bfa:	80 91 93 00 	lds	r24, 0x0093
 bfe:	87 31       	cpi	r24, 0x17	; 23
 c00:	20 f4       	brcc	.+8      	; 0xc0a <SrvTock+0x43c>
 c02:	8f 5f       	subi	r24, 0xFF	; 255
 c04:	80 93 93 00 	sts	0x0093, r24
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <SrvTock+0x440>
 c0a:	10 92 93 00 	sts	0x0093, r1
 c0e:	8c e0       	ldi	r24, 0x0C	; 12
 c10:	80 93 7a 00 	sts	0x007A, r24
 c14:	ce 99       	sbic	0x19, 6	; 25
 c16:	0b c0       	rjmp	.+22     	; 0xc2e <SrvTock+0x460>
 c18:	80 91 8b 00 	lds	r24, 0x008B
 c1c:	88 23       	and	r24, r24
 c1e:	39 f4       	brne	.+14     	; 0xc2e <SrvTock+0x460>
 c20:	80 91 6d 00 	lds	r24, 0x006D
 c24:	88 23       	and	r24, r24
 c26:	19 f0       	breq	.+6      	; 0xc2e <SrvTock+0x460>
 c28:	8c e0       	ldi	r24, 0x0C	; 12
 c2a:	80 93 8b 00 	sts	0x008B, r24
 c2e:	cf 9b       	sbis	0x19, 7	; 25
 c30:	1b c0       	rjmp	.+54     	; 0xc68 <SrvTock+0x49a>
 c32:	80 91 88 00 	lds	r24, 0x0088
 c36:	88 23       	and	r24, r24
 c38:	b9 f4       	brne	.+46     	; 0xc68 <SrvTock+0x49a>
 c3a:	80 91 6d 00 	lds	r24, 0x006D
 c3e:	88 23       	and	r24, r24
 c40:	b9 f4       	brne	.+46     	; 0xc70 <SrvTock+0x4a2>
 c42:	80 91 7f 00 	lds	r24, 0x007F

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 c46:	a0 e0       	ldi	r26, 0x00	; 0
 c48:	b0 e0       	ldi	r27, 0x00	; 0
 c4a:	08 2e       	mov	r0, r24
 c4c:	6b d0       	rcall	.+214    	; 0xd24 <__eeprom_write_byte_1C1D1E>
 c4e:	80 91 93 00 	lds	r24, 0x0093

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
 c52:	a1 e0       	ldi	r26, 0x01	; 1
 c54:	b0 e0       	ldi	r27, 0x00	; 0
 c56:	08 2e       	mov	r0, r24
 c58:	65 d0       	rcall	.+202    	; 0xd24 <__eeprom_write_byte_1C1D1E>
 c5a:	8b e4       	ldi	r24, 0x4B	; 75
 c5c:	80 93 6d 00 	sts	0x006D, r24
 c60:	8c e0       	ldi	r24, 0x0C	; 12
 c62:	80 93 88 00 	sts	0x0088, r24
 c66:	08 c0       	rjmp	.+16     	; 0xc78 <SrvTock+0x4aa>
 c68:	80 91 6d 00 	lds	r24, 0x006D
 c6c:	88 23       	and	r24, r24
 c6e:	49 f0       	breq	.+18     	; 0xc82 <SrvTock+0x4b4>
 c70:	81 30       	cpi	r24, 0x01	; 1
 c72:	11 f4       	brne	.+4      	; 0xc78 <SrvTock+0x4aa>
 c74:	10 92 6c 00 	sts	0x006C, r1
 c78:	80 91 6d 00 	lds	r24, 0x006D
 c7c:	81 50       	subi	r24, 0x01	; 1
 c7e:	80 93 6d 00 	sts	0x006D, r24
 c82:	1f 91       	pop	r17
 c84:	0f 91       	pop	r16
 c86:	ff 90       	pop	r15
 c88:	ef 90       	pop	r14
 c8a:	08 95       	ret

00000c8c <main>:
 c8c:	ef 92       	push	r14
 c8e:	ff 92       	push	r15
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	08 dd       	rcall	.-1520   	; 0x6a6 <uCinit>
 c96:	78 94       	sei
 c98:	10 92 6c 00 	sts	0x006C, r1
 c9c:	8f e1       	ldi	r24, 0x1F	; 31
 c9e:	80 b9       	out	0x00, r24	; 0
 ca0:	84 e0       	ldi	r24, 0x04	; 4
 ca2:	86 bf       	out	0x36, r24	; 54
 ca4:	09 e8       	ldi	r16, 0x89	; 137
 ca6:	e0 2e       	mov	r14, r16
 ca8:	00 e0       	ldi	r16, 0x00	; 0
 caa:	f0 2e       	mov	r15, r16
 cac:	03 e8       	ldi	r16, 0x83	; 131
 cae:	10 e0       	ldi	r17, 0x00	; 0
 cb0:	22 e8       	ldi	r18, 0x82	; 130
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	45 e8       	ldi	r20, 0x85	; 133
 cb6:	50 e0       	ldi	r21, 0x00	; 0
 cb8:	67 e8       	ldi	r22, 0x87	; 135
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	89 e7       	ldi	r24, 0x79	; 121
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	21 db       	rcall	.-2494   	; 0x304 <rtc_get_timeNdate>
 cc2:	85 dd       	rcall	.-1270   	; 0x7ce <SrvTock>
 cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <main+0x36>

00000cc6 <strcpy>:
 cc6:	fb 01       	movw	r30, r22
 cc8:	dc 01       	movw	r26, r24
 cca:	01 90       	ld	r0, Z+
 ccc:	0d 92       	st	X+, r0
 cce:	00 20       	and	r0, r0
 cd0:	e1 f7       	brne	.-8      	; 0xcca <strcpy+0x4>
 cd2:	08 95       	ret

00000cd4 <__udivmodqi4>:
 cd4:	99 1b       	sub	r25, r25
 cd6:	79 e0       	ldi	r23, 0x09	; 9
 cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__udivmodqi4_ep>

00000cda <__udivmodqi4_loop>:
 cda:	99 1f       	adc	r25, r25
 cdc:	96 17       	cp	r25, r22
 cde:	08 f0       	brcs	.+2      	; 0xce2 <__udivmodqi4_ep>
 ce0:	96 1b       	sub	r25, r22

00000ce2 <__udivmodqi4_ep>:
 ce2:	88 1f       	adc	r24, r24
 ce4:	7a 95       	dec	r23
 ce6:	c9 f7       	brne	.-14     	; 0xcda <__udivmodqi4_loop>
 ce8:	80 95       	com	r24
 cea:	08 95       	ret

00000cec <__udivmodhi4>:
 cec:	aa 1b       	sub	r26, r26
 cee:	bb 1b       	sub	r27, r27
 cf0:	51 e1       	ldi	r21, 0x11	; 17
 cf2:	07 c0       	rjmp	.+14     	; 0xd02 <__udivmodhi4_ep>

00000cf4 <__udivmodhi4_loop>:
 cf4:	aa 1f       	adc	r26, r26
 cf6:	bb 1f       	adc	r27, r27
 cf8:	a6 17       	cp	r26, r22
 cfa:	b7 07       	cpc	r27, r23
 cfc:	10 f0       	brcs	.+4      	; 0xd02 <__udivmodhi4_ep>
 cfe:	a6 1b       	sub	r26, r22
 d00:	b7 0b       	sbc	r27, r23

00000d02 <__udivmodhi4_ep>:
 d02:	88 1f       	adc	r24, r24
 d04:	99 1f       	adc	r25, r25
 d06:	5a 95       	dec	r21
 d08:	a9 f7       	brne	.-22     	; 0xcf4 <__udivmodhi4_loop>
 d0a:	80 95       	com	r24
 d0c:	90 95       	com	r25
 d0e:	bc 01       	movw	r22, r24
 d10:	cd 01       	movw	r24, r26
 d12:	08 95       	ret

00000d14 <__eeprom_read_byte_1C1D1E>:
 d14:	e1 99       	sbic	0x1c, 1	; 28
 d16:	fe cf       	rjmp	.-4      	; 0xd14 <__eeprom_read_byte_1C1D1E>
 d18:	bf bb       	out	0x1f, r27	; 31
 d1a:	ae bb       	out	0x1e, r26	; 30
 d1c:	e0 9a       	sbi	0x1c, 0	; 28
 d1e:	11 96       	adiw	r26, 0x01	; 1
 d20:	0d b2       	in	r0, 0x1d	; 29
 d22:	08 95       	ret

00000d24 <__eeprom_write_byte_1C1D1E>:
 d24:	e1 99       	sbic	0x1c, 1	; 28
 d26:	fe cf       	rjmp	.-4      	; 0xd24 <__eeprom_write_byte_1C1D1E>
 d28:	bf bb       	out	0x1f, r27	; 31
 d2a:	ae bb       	out	0x1e, r26	; 30
 d2c:	0d ba       	out	0x1d, r0	; 29
 d2e:	11 96       	adiw	r26, 0x01	; 1
 d30:	0f b6       	in	r0, 0x3f	; 63
 d32:	f8 94       	cli
 d34:	e2 9a       	sbi	0x1c, 2	; 28
 d36:	e1 9a       	sbi	0x1c, 1	; 28
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	08 95       	ret
