;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 30/03/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8535
;Program type        : Application
;Clock frequency     : 11,059200 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001F #endasm
;#include <lcd.h>
;sfrb PORTA=0x1b;
;sfrb PINA=0x19;
;#define SDAOut PORTA.0
;#define SDAIn PINA.0
;#define SCLK PORTA.1
;#define out PORTB.0
;
;// Declare your global variables here
;unsigned char TimeOut,AckBit,buf[33];  //Ackbit : '0' (ACK), '1' (NOACK)
;unsigned int DataTempSHT,DataRHSHT,DataRead;
;float RH,Temp;
;
;/*Membuat kondisi "start" ke SHT11 ("Transmission Start" sequence)
;          _____         _____
; ShtData       |_______|
;              ___     ___
; ShtClock ___|   |___|   |___
; Clock         1       2         */
;
; void StartSignal (void)
; 0000 0035 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0036 unsigned char DDRATemp;
; 0000 0037     DDRATemp = DDRA;
;PCODE: $00000012 VOL: 0
;	DDRATemp -> R17
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0038     DDRA |= 0x01;       // PortA.0 sbg Output
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0039     SDAOut = 1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A     SCLK = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003B     SCLK = 1;           //Clock pertama
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003C     SDAOut = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D     SCLK = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E     SCLK = 1;           //Clock kedua
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003F     SDAOut = 1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0040     SCLK = 0;           //Pin Clock = '0'
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0041     DDRA = DDRATemp;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0042 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;//Reset komunikasi: 9 clock cyle dengan ShtData '1', lalu kondisi start
;void ResetSHT (void)
; 0000 0046 {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0047 unsigned char i,DDRATemp;
; 0000 0048     DDRATemp = DDRA;
;PCODE: $00000030 VOL: 0
;	i -> R17
;	DDRATemp -> R16
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0049     DDRA |= 0x01;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004A     SDAOut = 1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004B     SCLK = 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004C     for (i=0; i<=8; i++)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004D       {
; 0000 004E         SCLK = 1;     //Kirim Data (ShtClock rising edge), 9 kali
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004F         SCLK = 0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0050       }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0051     StartSignal();        //Transmission Start
;PCODE: $0000004D VOL: 0
; 0000 0052     DDRA = DDRATemp;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0053 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;//Tunggu sampai SHT11 selesai melakukan pengukuran (pin Data = '0')
;//Timeout pengukuran sekitar 1/4 detik (TimeOut = '0' --> measure OK)
;void SHTWait (void)
; 0000 0058 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0059     unsigned char i,DDRATemp;
; 0000 005A     DDRATemp = DDRA;
;PCODE: $00000055 VOL: 0
;	i -> R17
;	DDRATemp -> R16
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005B     DDRA |= 0x01;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005C     SDAOut=1;          //Pin ShtData sebagai input
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005D     DDRA &= 0xFE;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005E     for (i=0; i<250; i++)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005F       {
; 0000 0060         TimeOut=SDAIn;        //Jika pin ShtData = '0' --> pengukuran selesai
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0061         if (TimeOut==0) goto ExitSHT_Wait;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0062         delay_ms(1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0063       }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0064     ExitSHT_Wait:
;PCODE: $0000007A VOL: 0
; 0000 0065     DDRA = DDRATemp;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0066 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;// Transmit Data dan ambil bit Acknowledge
;void SHTWriteByte (unsigned char data)
; 0000 006A {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006B     unsigned char i,DDRATemp;
; 0000 006C     DDRATemp = DDRA;
;PCODE: $00000082 VOL: 0
;	data -> Y+2
;	i -> R17
;	DDRATemp -> R16
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006D     DDRA |= 0x01;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006E     for (i=0; i<8; i++)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006F       {
; 0000 0070         if ((data>>7)==1) SDAOut = 1;    //Kirim MSB first
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0071         else SDAOut = 0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0072         SCLK = 1;                 //Kirim Data (ShtClock rising edge)
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0073         SCLK = 0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0074         data <<= 1;             // geser data kekiri 1 bit
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0075       }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0076     SDAOut = 1;                  //Pin ShtData sebagai input
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0077     SCLK = 1;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0078     DDRA &= 0xFE;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0079     AckBit = SDAIn;             //Ambil sinyal acknowledge
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 007A     SCLK = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007B     DDRA = DDRATemp;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007C }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;
;//Receive Data dan kirim bit "AckBit" ('0' untuk ACK atau '1' untuk NACK)
;void SHTReadByte (void)
; 0000 0080 {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0081     unsigned char i,DDRATemp;
; 0000 0082     DataRead = 0x00;
;PCODE: $000000C1 VOL: 0
;	i -> R17
;	DDRATemp -> R16
;PCODE: $000000C2 VOL: 0
; 0000 0083     DDRATemp = DDRA;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0084     DDRA |= 0x01;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0085     SDAOut = 1;          //Pin ShtData sebagai input
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0086     DDRA &= 0xFE;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0087     for (i=0; i<8; i++)
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0088       {
; 0000 0089         DataRead<<=1;
;PCODE: $000000D8 VOL: 0
; 0000 008A         SCLK = 1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008B         DataRead |= SDAIn;  //Ambil Data (MSB first)
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008C         SCLK = 0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 008D       }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 008E     DDRA |= 0x01;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 008F     if (AckBit==1) SDAOut = 1;   //Kirim Noacknowledge
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0090     else SDAOut = 0;             //Kirim Acknowledge
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0091     SCLK = 1;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0092     SCLK = 0;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0093     SDAOut = 1;          //Pin ShtData sebagai input
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0094     DDRA = DDRATemp;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0095 }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;// Pembacaan Temperature dari SHt11
;void SHTReadTemp (void)
; 0000 0099 {
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 009A     StartSignal();
;PCODE: $00000102 VOL: 0
; 0000 009B     SHTWriteByte(0x03);    		//Command Measure Temperature
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 009C     if (AckBit==0)
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 009D       {
; 0000 009E         SHTWait();         		//Tunggu sampai pengukuran selesai
;PCODE: $00000108 VOL: 0
; 0000 009F         if (TimeOut==0)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A0           {
; 0000 00A1            AckBit=0;                    //Kirim ACK untuk menerima byte berikutnya
;PCODE: $0000010B VOL: 0
; 0000 00A2             SHTReadByte();              // Ambli Byte MSB
;PCODE: $0000010C VOL: 0
; 0000 00A3             DataTempSHT = DataRead;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00A4             DataTempSHT <<= 8;
;PCODE: $0000010F VOL: 0
; 0000 00A5             AckBit=1;                   //Kirim NACK untuk mengakhiri pengambilan data
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00A6             SHTReadByte();
;PCODE: $00000112 VOL: 0
; 0000 00A7             DataTempSHT |= DataRead;   //Ambil byte LSB
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00A8 
; 0000 00A9             DataRead = DataTempSHT;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00AA           }
; 0000 00AB       }
;PCODE: $00000117 VOL: 0
; 0000 00AC }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;
;void SHTReadHumidity (void)
; 0000 00AF {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00B0     StartSignal();
;PCODE: $0000011D VOL: 0
; 0000 00B1     SHTWriteByte(0x05);   //Command Measure Humidity
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00B2     if (AckBit==0)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00B3       {
; 0000 00B4         SHTWait();
;PCODE: $00000123 VOL: 0
; 0000 00B5         if (TimeOut==0)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B6           {
; 0000 00B7             AckBit=0;
;PCODE: $00000126 VOL: 0
; 0000 00B8             SHTReadByte();
;PCODE: $00000127 VOL: 0
; 0000 00B9             DataRHSHT = DataRead;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00BA             DataRHSHT <<= 8;
;PCODE: $0000012A VOL: 0
; 0000 00BB             AckBit=1;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00BC             SHTReadByte();
;PCODE: $0000012D VOL: 0
; 0000 00BD             DataRHSHT |= DataRead;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00BE 
; 0000 00BF             DataRead = DataRHSHT;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00C0           }
; 0000 00C1       }
;PCODE: $00000132 VOL: 0
; 0000 00C2 }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;
;
;void main(void)
; 0000 00C6 {
;PCODE: $00000136 VOL: 0
; 0000 00C7 // Declare your local variables here
; 0000 00C8 
; 0000 00C9 // Input/Output Ports initialization
; 0000 00CA // Port A initialization
; 0000 00CB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CD PORTA=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00CE DDRA=0x02;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00CF 
; 0000 00D0 // Port B initialization
; 0000 00D1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D3 PORTB=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00D4 DDRB=0x08;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D5 
; 0000 00D6 // Port C initialization
; 0000 00D7 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00D8 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00D9 PORTC=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00DA DDRC=0xFF;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00DB 
; 0000 00DC // Port D initialization
; 0000 00DD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DF PORTD=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00E0 DDRD=0x04;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E1 
; 0000 00E2 // Timer/Counter 0 initialization
; 0000 00E3 // Clock source: System Clock
; 0000 00E4 // Clock value: Timer 0 Stopped
; 0000 00E5 // Mode: Normal top=FFh
; 0000 00E6 // OC0 output: Disconnected
; 0000 00E7 TCCR0=0x71;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E8 TCNT0=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00E9 OCR0=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00EA 
; 0000 00EB // Timer/Counter 1 initialization
; 0000 00EC // Clock source: System Clock
; 0000 00ED // Clock value: Timer 1 Stopped
; 0000 00EE // Mode: Normal top=FFFFh
; 0000 00EF // OC1A output: Discon.
; 0000 00F0 // OC1B output: Discon.
; 0000 00F1 // Noise Canceler: Off
; 0000 00F2 // Input Capture on Falling Edge
; 0000 00F3 // Timer 1 Overflow Interrupt: Off
; 0000 00F4 // Input Capture Interrupt: Off
; 0000 00F5 // Compare A Match Interrupt: Off
; 0000 00F6 // Compare B Match Interrupt: Off
; 0000 00F7 TCCR1A=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00F8 TCCR1B=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00F9 TCNT1H=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00FA TCNT1L=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00FB ICR1H=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00FC ICR1L=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00FD OCR1AH=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00FE OCR1AL=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00FF OCR1BH=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0100 OCR1BL=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0101 
; 0000 0102 // Timer/Counter 2 initialization
; 0000 0103 // Clock source: System Clock
; 0000 0104 // Clock value: Timer 2 Stopped
; 0000 0105 // Mode: Normal top=FFh
; 0000 0106 // OC2 output: Disconnected
; 0000 0107 ASSR=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0108 TCCR2=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0109 TCNT2=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 010A OCR2=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 010B 
; 0000 010C // External Interrupt(s) initialization
; 0000 010D // INT0: Off
; 0000 010E // INT1: Off
; 0000 010F // INT2: Off
; 0000 0110 MCUCR=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0111 MCUCSR=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0112 
; 0000 0113 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0114 TIMSK=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0115 
; 0000 0116 // Analog Comparator initialization
; 0000 0117 // Analog Comparator: Off
; 0000 0118 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0119 ACSR=0x80;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 011A SFIOR=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 011B 
; 0000 011C // LCD module initialization
; 0000 011D lcd_init(16);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 011E delay_ms(1000);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 011F ResetSHT();
;PCODE: $00000179 VOL: 0
; 0000 0120 
; 0000 0121 while (1)
;PCODE: $0000017A VOL: 0
; 0000 0122       {
; 0000 0123       // Place your code here
; 0000 0124       SHTReadHumidity();
;PCODE: $0000017B VOL: 0
; 0000 0125       RH=((float)(DataRead*0.0405)-(DataRead*DataRead*0.0000028)-4);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0126       ResetSHT();
;PCODE: $0000018F VOL: 0
; 0000 0127       SHTReadTemp();
;PCODE: $00000190 VOL: 0
; 0000 0128       Temp=((float)(DataRead-4000))/100;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0129       ResetSHT();
;PCODE: $00000198 VOL: 0
; 0000 012A       lcd_clear();
;PCODE: $00000199 VOL: 0
; 0000 012B       lcd_gotoxy (0,0);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 012C       lcd_putsf(" RH : Temp");
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 012D       lcd_gotoxy(0,1);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 012E       sprintf(buf,"%0.2f %0.2f",RH,Temp);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 012F       lcd_puts(buf);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0130       delay_ms(1000);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0131 
; 0000 0132       };
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0133 }
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
