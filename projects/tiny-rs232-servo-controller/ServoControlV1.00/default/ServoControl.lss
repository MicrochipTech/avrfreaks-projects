
ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800072  000003f8  0000048c  2**0
                  ALLOC
  3 .noinit       00000000  00800072  00800072  0000048c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000048c  2**0
                  CONTENTS
  5 .stab         00000354  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000001b  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000203  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000061  00000000  00000000  00000a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000001dc  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000029  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0d c0       	rjmp	.+26     	; 0x1c <__init>
   2:	25 c0       	rjmp	.+74     	; 0x4e <__bad_interrupt>
   4:	24 c0       	rjmp	.+72     	; 0x4e <__bad_interrupt>
   6:	23 c0       	rjmp	.+70     	; 0x4e <__bad_interrupt>
   8:	22 c0       	rjmp	.+68     	; 0x4e <__bad_interrupt>
   a:	21 c0       	rjmp	.+66     	; 0x4e <__bad_interrupt>
   c:	30 c1       	rjmp	.+608    	; 0x26e <__vector_6>
   e:	1f c0       	rjmp	.+62     	; 0x4e <__bad_interrupt>
  10:	1e c0       	rjmp	.+60     	; 0x4e <__bad_interrupt>
  12:	1d c0       	rjmp	.+58     	; 0x4e <__bad_interrupt>

00000014 <__ctors_end>:
  14:	53 65       	ori	r21, 0x53	; 83
  16:	72 76       	andi	r23, 0x62	; 98
  18:	6f 20       	and	r6, r15
	...

0000001c <__init>:
  1c:	11 24       	eor	r1, r1
  1e:	1f be       	out	0x3f, r1	; 63
  20:	cf e9       	ldi	r28, 0x9F	; 159
  22:	cd bf       	out	0x3d, r28	; 61

00000024 <__do_copy_data>:
  24:	10 e0       	ldi	r17, 0x00	; 0
  26:	a0 e6       	ldi	r26, 0x60	; 96
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	e6 ee       	ldi	r30, 0xE6	; 230
  2c:	f3 e0       	ldi	r31, 0x03	; 3
  2e:	03 c0       	rjmp	.+6      	; 0x36 <.do_copy_data_start>

00000030 <.do_copy_data_loop>:
  30:	c8 95       	lpm
  32:	31 96       	adiw	r30, 0x01	; 1
  34:	0d 92       	st	X+, r0

00000036 <.do_copy_data_start>:
  36:	a2 37       	cpi	r26, 0x72	; 114
  38:	b1 07       	cpc	r27, r17
  3a:	d1 f7       	brne	.-12     	; 0x30 <.do_copy_data_loop>

0000003c <__do_clear_bss>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a2 e7       	ldi	r26, 0x72	; 114
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a2 37       	cpi	r26, 0x72	; 114
  48:	b1 07       	cpc	r27, r17
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	01 c0       	rjmp	.+2      	; 0x50 <main>

0000004e <__bad_interrupt>:
  4e:	d8 cf       	rjmp	.-80     	; 0x0 <__vectors>

00000050 <main>:
#define ServoMax	184 // 2.4 ms / 13.02 US = 184
#define ServoMin	39	// 0.5 ms / 13.02 US = 39

int main()
{
  50:	ca e9       	ldi	r28, 0x9A	; 154
  52:	d0 e0       	ldi	r29, 0x00	; 0
  54:	de bf       	out	0x3e, r29	; 62
  56:	cd bf       	out	0x3d, r28	; 61
unsigned char RCByte;
unsigned char Device_ID;
unsigned char Device_4ID;

PORTB	= 0x00;
  58:	10 92 38 00 	sts	0x0038, r1
DDRB	= 0x1c; //
  5c:	8c e1       	ldi	r24, 0x1C	; 28
  5e:	80 93 37 00 	sts	0x0037, r24
// OSCCAL	= 0x5e;					// If your Tiny is a bit off freq. Then you need to tune this
MCUCR	= ( 1<< PUD) | (1 << SE ) | (1 << SM1) ;  	// PULLUP DISABLE, Sleep Enable Power-down
  62:	80 e7       	ldi	r24, 0x70	; 112
  64:	80 93 55 00 	sts	0x0055, r24
TCCR0B  = ( 1 << CS00) ; 							// clkI/O/(No prescaling)
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	80 93 53 00 	sts	0x0053, r24

// The CKDIV8 Fuse determines the initial value of the CLKPS bits. 
CLKPR  = 0x80;
  6e:	80 e8       	ldi	r24, 0x80	; 128
  70:	80 93 46 00 	sts	0x0046, r24
CLKPR  = 0x00; 						// Set devide by 1 Hi Speed 9.6 MC
  74:	10 92 46 00 	sts	0x0046, r1

TCCR0A	= ( 1 << WGM01 ); 			// Timer mode 2 Clear Timer on Compare Match (CTC) mode,
  78:	82 e0       	ldi	r24, 0x02	; 2
  7a:	80 93 4f 00 	sts	0x004F, r24
OCR0A	= 124; 						// This is 9600 baud/8 -1
  7e:	8c e7       	ldi	r24, 0x7C	; 124
  80:	80 93 56 00 	sts	0x0056, r24
TIMSK0  = ( 1 << OCIE0A ); 			// Enable the Timer interupt.
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	80 93 59 00 	sts	0x0059, r24

Servo1=Servo2=Servo3=(ServoMin+ServoMax)/2;
  8a:	8f e6       	ldi	r24, 0x6F	; 111
  8c:	80 93 66 00 	sts	0x0066, r24
  90:	8f e6       	ldi	r24, 0x6F	; 111
  92:	80 93 65 00 	sts	0x0065, r24
  96:	8f e6       	ldi	r24, 0x6F	; 111
  98:	80 93 64 00 	sts	0x0064, r24
Prescaler8=Prescaler64=Prescaler20ms=1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 62 00 	sts	0x0062, r24
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 61 00 	sts	0x0061, r24
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 60 00 	sts	0x0060, r24
sei();								// enable interrupts 
  ae:	78 94       	sei

Wating20ms=Device_ID=EepromRead(0);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	93 d1       	rcall	.+806    	; 0x3da <EepromRead>
  b4:	8a 83       	std	Y+2, r24	; 0x02
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	80 93 63 00 	sts	0x0063, r24
Device_4ID=(Device_ID<<2);			// Get the Device Commands A,B,C,D
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	88 0f       	add	r24, r24
  c0:	88 0f       	add	r24, r24
  c2:	8b 83       	std	Y+3, r24	; 0x03
while(Wating20ms);					// Wait until the previus device has send its information
  c4:	80 91 63 00 	lds	r24, 0x0063
  c8:	88 23       	and	r24, r24
  ca:	09 f0       	breq	.+2      	; 0xce <__stack+0x2f>
  cc:	fb cf       	rjmp	.-10     	; 0xc4 <__stack+0x25>

Puts((unsigned char *)PSTR("Servo "));
  ce:	84 e1       	ldi	r24, 0x14	; 20
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9d d0       	rcall	.+314    	; 0x20e <Puts>
PutHex(Device_ID);
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	ae d0       	rcall	.+348    	; 0x234 <PutHex>
PutCRNL();
  d8:	a0 d0       	rcall	.+320    	; 0x21a <PutCRNL>

for(;;)
	{
		RCByte=GetChar();
  da:	bf d0       	rcall	.+382    	; 0x25a <GetChar>
  dc:	89 83       	std	Y+1, r24	; 0x01
		switch((RCByte-Device_4ID))
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	28 2f       	mov	r18, r24
  e2:	33 27       	eor	r19, r19
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	99 27       	eor	r25, r25
  e8:	28 1b       	sub	r18, r24
  ea:	39 0b       	sbc	r19, r25
  ec:	3d 83       	std	Y+5, r19	; 0x05
  ee:	2c 83       	std	Y+4, r18	; 0x04
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	9d 81       	ldd	r25, Y+5	; 0x05
  f4:	84 34       	cpi	r24, 0x44	; 68
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <__stack+0x5d>
  fa:	76 c0       	rjmp	.+236    	; 0x1e8 <__stack+0x149>
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	85 34       	cpi	r24, 0x45	; 69
 102:	91 05       	cpc	r25, r1
 104:	94 f4       	brge	.+36     	; 0x12a <__stack+0x8b>
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	9d 81       	ldd	r25, Y+5	; 0x05
 10a:	82 34       	cpi	r24, 0x42	; 66
 10c:	91 05       	cpc	r25, r1
 10e:	09 f4       	brne	.+2      	; 0x112 <__stack+0x73>
 110:	3f c0       	rjmp	.+126    	; 0x190 <__stack+0xf1>
 112:	8c 81       	ldd	r24, Y+4	; 0x04
 114:	9d 81       	ldd	r25, Y+5	; 0x05
 116:	83 34       	cpi	r24, 0x43	; 67
 118:	91 05       	cpc	r25, r1
 11a:	0c f0       	brlt	.+2      	; 0x11e <__stack+0x7f>
 11c:	4f c0       	rjmp	.+158    	; 0x1bc <__stack+0x11d>
 11e:	8c 81       	ldd	r24, Y+4	; 0x04
 120:	9d 81       	ldd	r25, Y+5	; 0x05
 122:	81 34       	cpi	r24, 0x41	; 65
 124:	91 05       	cpc	r25, r1
 126:	f1 f0       	breq	.+60     	; 0x164 <__stack+0xc5>
 128:	d8 cf       	rjmp	.-80     	; 0xda <__stack+0x3b>
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	9d 81       	ldd	r25, Y+5	; 0x05
 12e:	82 36       	cpi	r24, 0x62	; 98
 130:	91 05       	cpc	r25, r1
 132:	c9 f1       	breq	.+114    	; 0x1a6 <__stack+0x107>
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	9d 81       	ldd	r25, Y+5	; 0x05
 138:	83 36       	cpi	r24, 0x63	; 99
 13a:	91 05       	cpc	r25, r1
 13c:	34 f4       	brge	.+12     	; 0x14a <__stack+0xab>
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	9d 81       	ldd	r25, Y+5	; 0x05
 142:	81 36       	cpi	r24, 0x61	; 97
 144:	91 05       	cpc	r25, r1
 146:	c9 f0       	breq	.+50     	; 0x17a <__stack+0xdb>
 148:	c8 cf       	rjmp	.-112    	; 0xda <__stack+0x3b>
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	9d 81       	ldd	r25, Y+5	; 0x05
 14e:	83 36       	cpi	r24, 0x63	; 99
 150:	91 05       	cpc	r25, r1
 152:	09 f4       	brne	.+2      	; 0x156 <__stack+0xb7>
 154:	3e c0       	rjmp	.+124    	; 0x1d2 <__stack+0x133>
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	84 36       	cpi	r24, 0x64	; 100
 15c:	91 05       	cpc	r25, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <__stack+0xc3>
 160:	43 c0       	rjmp	.+134    	; 0x1e8 <__stack+0x149>
 162:	bb cf       	rjmp	.-138    	; 0xda <__stack+0x3b>
			{
			case 'A':
				if(Servo1<ServoMax)Servo1++;
 164:	80 91 64 00 	lds	r24, 0x0064
 168:	88 3b       	cpi	r24, 0xB8	; 184
 16a:	08 f0       	brcs	.+2      	; 0x16e <__stack+0xcf>
 16c:	b6 cf       	rjmp	.-148    	; 0xda <__stack+0x3b>
 16e:	80 91 64 00 	lds	r24, 0x0064
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 64 00 	sts	0x0064, r24
				break;
 178:	b0 cf       	rjmp	.-160    	; 0xda <__stack+0x3b>
			case 'a':
				if(Servo1>ServoMin)Servo1--;
 17a:	80 91 64 00 	lds	r24, 0x0064
 17e:	88 32       	cpi	r24, 0x28	; 40
 180:	08 f4       	brcc	.+2      	; 0x184 <__stack+0xe5>
 182:	ab cf       	rjmp	.-170    	; 0xda <__stack+0x3b>
 184:	80 91 64 00 	lds	r24, 0x0064
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	80 93 64 00 	sts	0x0064, r24
				break;
 18e:	a5 cf       	rjmp	.-182    	; 0xda <__stack+0x3b>
			case 'B':
				if(Servo2<ServoMax)Servo2++;
 190:	80 91 65 00 	lds	r24, 0x0065
 194:	88 3b       	cpi	r24, 0xB8	; 184
 196:	08 f0       	brcs	.+2      	; 0x19a <__stack+0xfb>
 198:	a0 cf       	rjmp	.-192    	; 0xda <__stack+0x3b>
 19a:	80 91 65 00 	lds	r24, 0x0065
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 65 00 	sts	0x0065, r24
				break;
 1a4:	9a cf       	rjmp	.-204    	; 0xda <__stack+0x3b>
			case 'b':
				if(Servo2>ServoMin)Servo2--;
 1a6:	80 91 65 00 	lds	r24, 0x0065
 1aa:	88 32       	cpi	r24, 0x28	; 40
 1ac:	08 f4       	brcc	.+2      	; 0x1b0 <__stack+0x111>
 1ae:	95 cf       	rjmp	.-214    	; 0xda <__stack+0x3b>
 1b0:	80 91 65 00 	lds	r24, 0x0065
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	80 93 65 00 	sts	0x0065, r24
				break;
 1ba:	8f cf       	rjmp	.-226    	; 0xda <__stack+0x3b>
			case 'C':
				if(Servo3<ServoMax)Servo3++;
 1bc:	80 91 66 00 	lds	r24, 0x0066
 1c0:	88 3b       	cpi	r24, 0xB8	; 184
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__stack+0x127>
 1c4:	8a cf       	rjmp	.-236    	; 0xda <__stack+0x3b>
 1c6:	80 91 66 00 	lds	r24, 0x0066
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 66 00 	sts	0x0066, r24
				break;
 1d0:	84 cf       	rjmp	.-248    	; 0xda <__stack+0x3b>
			case 'c':
				if(Servo3>ServoMin)Servo3--;
 1d2:	80 91 66 00 	lds	r24, 0x0066
 1d6:	88 32       	cpi	r24, 0x28	; 40
 1d8:	08 f4       	brcc	.+2      	; 0x1dc <__stack+0x13d>
 1da:	7f cf       	rjmp	.-258    	; 0xda <__stack+0x3b>
 1dc:	80 91 66 00 	lds	r24, 0x0066
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	80 93 66 00 	sts	0x0066, r24
				break;
 1e6:	79 cf       	rjmp	.-270    	; 0xda <__stack+0x3b>
			case 'D':
			case 'd':
				//Puts(PSTR("Status "));
				PutHex(Device_ID);
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	24 d0       	rcall	.+72     	; 0x234 <PutHex>
				PutChar(',');
 1ec:	8c e2       	ldi	r24, 0x2C	; 44
 1ee:	18 d0       	rcall	.+48     	; 0x220 <PutChar>
				PutHex(Servo1);
 1f0:	80 91 64 00 	lds	r24, 0x0064
 1f4:	1f d0       	rcall	.+62     	; 0x234 <PutHex>
				PutChar(',');
 1f6:	8c e2       	ldi	r24, 0x2C	; 44
 1f8:	13 d0       	rcall	.+38     	; 0x220 <PutChar>
				PutHex(Servo2);
 1fa:	80 91 65 00 	lds	r24, 0x0065
 1fe:	1a d0       	rcall	.+52     	; 0x234 <PutHex>
				PutChar(',');
 200:	8c e2       	ldi	r24, 0x2C	; 44
 202:	0e d0       	rcall	.+28     	; 0x220 <PutChar>
				PutHex(Servo3);
 204:	80 91 66 00 	lds	r24, 0x0066
 208:	15 d0       	rcall	.+42     	; 0x234 <PutHex>
				PutCRNL();
 20a:	07 d0       	rcall	.+14     	; 0x21a <PutCRNL>
 20c:	66 cf       	rjmp	.-308    	; 0xda <__stack+0x3b>

0000020e <Puts>:
 20e:	fc 01       	movw	r30, r24

00000210 <Puts1>:
 210:	85 91       	lpm	r24, Z+
 212:	88 23       	and	r24, r24
 214:	71 f0       	breq	.+28     	; 0x232 <PutCharEnd>
 216:	04 d0       	rcall	.+8      	; 0x220 <PutChar>
 218:	fb cf       	rjmp	.-10     	; 0x210 <Puts1>

0000021a <PutCRNL>:
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	01 d0       	rcall	.+2      	; 0x220 <PutChar>
 21e:	8a e0       	ldi	r24, 0x0A	; 10

00000220 <PutChar>:
 220:	00 91 6b 00 	lds	r16, 0x006B
 224:	00 23       	and	r16, r16
 226:	e1 f7       	brne	.-8      	; 0x220 <PutChar>
 228:	80 93 6a 00 	sts	0x006A, r24
 22c:	0b e0       	ldi	r16, 0x0B	; 11
 22e:	00 93 6b 00 	sts	0x006B, r16

00000232 <PutCharEnd>:
 232:	08 95       	ret

00000234 <PutHex>:
 234:	8f 93       	push	r24
 236:	82 95       	swap	r24
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	90 e3       	ldi	r25, 0x30	; 48
 23c:	89 0f       	add	r24, r25
 23e:	8a 33       	cpi	r24, 0x3A	; 58
 240:	10 f0       	brcs	.+4      	; 0x246 <Hex_Hi>
 242:	97 e0       	ldi	r25, 0x07	; 7
 244:	89 0f       	add	r24, r25

00000246 <Hex_Hi>:
 246:	ec df       	rcall	.-40     	; 0x220 <PutChar>
 248:	8f 91       	pop	r24
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	90 e3       	ldi	r25, 0x30	; 48
 24e:	89 0f       	add	r24, r25
 250:	8a 33       	cpi	r24, 0x3A	; 58
 252:	10 f0       	brcs	.+4      	; 0x258 <Hex_Low>
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	89 0f       	add	r24, r25

00000258 <Hex_Low>:
 258:	e3 cf       	rjmp	.-58     	; 0x220 <PutChar>

0000025a <GetChar>:
 25a:	00 91 71 00 	lds	r16, 0x0071
 25e:	00 23       	and	r16, r16
 260:	e1 f7       	brne	.-8      	; 0x25a <GetChar>
 262:	80 91 6c 00 	lds	r24, 0x006C
 266:	01 e0       	ldi	r16, 0x01	; 1
 268:	00 93 71 00 	sts	0x0071, r16
 26c:	08 95       	ret

0000026e <__vector_6>:
 26e:	0f 93       	push	r16
 270:	0f b7       	in	r16, 0x3f	; 63
 272:	0f 93       	push	r16
 274:	00 91 70 00 	lds	r16, 0x0070
 278:	09 30       	cpi	r16, 0x09	; 9
 27a:	80 f0       	brcs	.+32     	; 0x29c <WaitForDataBit>

0000027c <WaitForStartBit>:
 27c:	00 91 6e 00 	lds	r16, 0x006E
 280:	b1 9b       	sbis	0x16, 1	; 22
 282:	08 e0       	ldi	r16, 0x08	; 8
 284:	00 23       	and	r16, r16
 286:	21 f0       	breq	.+8      	; 0x290 <StartBitEnded>
 288:	0a 95       	dec	r16
 28a:	00 93 6e 00 	sts	0x006E, r16
 28e:	36 c0       	rjmp	.+108    	; 0x2fc <EndRXD>

00000290 <StartBitEnded>:
 290:	08 e0       	ldi	r16, 0x08	; 8
 292:	00 93 6e 00 	sts	0x006E, r16
 296:	00 93 70 00 	sts	0x0070, r16
 29a:	30 c0       	rjmp	.+96     	; 0x2fc <EndRXD>

0000029c <WaitForDataBit>:
 29c:	00 91 6f 00 	lds	r16, 0x006F
 2a0:	b1 99       	sbic	0x16, 1	; 22
 2a2:	03 95       	inc	r16
 2a4:	00 93 6f 00 	sts	0x006F, r16
 2a8:	00 91 6e 00 	lds	r16, 0x006E
 2ac:	0a 95       	dec	r16
 2ae:	00 93 6e 00 	sts	0x006E, r16
 2b2:	21 f5       	brne	.+72     	; 0x2fc <EndRXD>
 2b4:	00 91 6f 00 	lds	r16, 0x006F
 2b8:	04 30       	cpi	r16, 0x04	; 4
 2ba:	00 91 6d 00 	lds	r16, 0x006D
 2be:	07 95       	ror	r16
 2c0:	00 93 6d 00 	sts	0x006D, r16
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	00 93 6f 00 	sts	0x006F, r16
 2ca:	08 e0       	ldi	r16, 0x08	; 8
 2cc:	00 93 6e 00 	sts	0x006E, r16
 2d0:	00 91 70 00 	lds	r16, 0x0070
 2d4:	0a 95       	dec	r16
 2d6:	00 93 70 00 	sts	0x0070, r16
 2da:	81 f4       	brne	.+32     	; 0x2fc <EndRXD>
 2dc:	09 e0       	ldi	r16, 0x09	; 9
 2de:	00 93 70 00 	sts	0x0070, r16
 2e2:	0d e6       	ldi	r16, 0x6D	; 109
 2e4:	00 93 6c 00 	sts	0x006C, r16

000002e8 <RXDataByteReady>:
 2e8:	09 e0       	ldi	r16, 0x09	; 9
 2ea:	00 93 70 00 	sts	0x0070, r16
 2ee:	00 91 6d 00 	lds	r16, 0x006D
 2f2:	00 93 6c 00 	sts	0x006C, r16
 2f6:	00 e0       	ldi	r16, 0x00	; 0
 2f8:	00 93 71 00 	sts	0x0071, r16

000002fc <EndRXD>:
 2fc:	00 91 60 00 	lds	r16, 0x0060
 300:	0a 95       	dec	r16
 302:	00 93 60 00 	sts	0x0060, r16
 306:	09 f0       	breq	.+2      	; 0x30a <APrescaler8>
 308:	49 c0       	rjmp	.+146    	; 0x39c <NoPrescaler20ms>

0000030a <APrescaler8>:
 30a:	08 e0       	ldi	r16, 0x08	; 8
 30c:	00 93 60 00 	sts	0x0060, r16
 310:	00 91 6b 00 	lds	r16, 0x006B
 314:	0b 30       	cpi	r16, 0x0B	; 11
 316:	19 f4       	brne	.+6      	; 0x31e <TXOutputBit>
 318:	c0 98       	cbi	0x18, 0	; 24
 31a:	b8 9a       	sbi	0x17, 0	; 23
 31c:	10 c0       	rjmp	.+32     	; 0x33e <TXputBitEnd>

0000031e <TXOutputBit>:
 31e:	00 23       	and	r16, r16
 320:	a1 f0       	breq	.+40     	; 0x34a <TXNoStopBit>
 322:	0a 30       	cpi	r16, 0x0A	; 10
 324:	11 f4       	brne	.+4      	; 0x32a <TXNoStartBit>
 326:	c0 9a       	sbi	0x18, 0	; 24
 328:	0a c0       	rjmp	.+20     	; 0x33e <TXputBitEnd>

0000032a <TXNoStartBit>:
 32a:	00 91 6a 00 	lds	r16, 0x006A
 32e:	08 94       	sec
 330:	07 95       	ror	r16
 332:	00 93 6a 00 	sts	0x006A, r16
 336:	10 f4       	brcc	.+4      	; 0x33c <TXputbit0>
 338:	c0 98       	cbi	0x18, 0	; 24
 33a:	01 c0       	rjmp	.+2      	; 0x33e <TXputBitEnd>

0000033c <TXputbit0>:
 33c:	c0 9a       	sbi	0x18, 0	; 24

0000033e <TXputBitEnd>:
 33e:	00 91 6b 00 	lds	r16, 0x006B
 342:	0a 95       	dec	r16
 344:	00 93 6b 00 	sts	0x006B, r16
 348:	01 c0       	rjmp	.+2      	; 0x34c <TXEND>

0000034a <TXNoStopBit>:
 34a:	b8 98       	cbi	0x17, 0	; 23

0000034c <TXEND>:
 34c:	00 91 61 00 	lds	r16, 0x0061
 350:	0a 95       	dec	r16
 352:	00 93 61 00 	sts	0x0061, r16

00000356 <NoPrescaler8_2>:
 356:	11 f5       	brne	.+68     	; 0x39c <NoPrescaler20ms>
 358:	08 e0       	ldi	r16, 0x08	; 8
 35a:	00 93 61 00 	sts	0x0061, r16
 35e:	00 91 62 00 	lds	r16, 0x0062
 362:	0a 95       	dec	r16
 364:	00 93 62 00 	sts	0x0062, r16
 368:	c9 f4       	brne	.+50     	; 0x39c <NoPrescaler20ms>
 36a:	09 e1       	ldi	r16, 0x19	; 25
 36c:	00 93 62 00 	sts	0x0062, r16
 370:	00 91 63 00 	lds	r16, 0x0063
 374:	00 23       	and	r16, r16
 376:	19 f0       	breq	.+6      	; 0x37e <NoWaitAnyMore>
 378:	0a 95       	dec	r16
 37a:	00 93 63 00 	sts	0x0063, r16

0000037e <NoWaitAnyMore>:
 37e:	c2 9a       	sbi	0x18, 2	; 24
 380:	c3 9a       	sbi	0x18, 3	; 24
 382:	c4 9a       	sbi	0x18, 4	; 24
 384:	00 91 64 00 	lds	r16, 0x0064
 388:	00 93 67 00 	sts	0x0067, r16
 38c:	00 91 65 00 	lds	r16, 0x0065
 390:	00 93 68 00 	sts	0x0068, r16
 394:	00 91 66 00 	lds	r16, 0x0066
 398:	00 93 69 00 	sts	0x0069, r16

0000039c <NoPrescaler20ms>:
 39c:	00 91 67 00 	lds	r16, 0x0067
 3a0:	00 23       	and	r16, r16
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <NoSerovo1reset>
 3a4:	c2 98       	cbi	0x18, 2	; 24
 3a6:	03 95       	inc	r16

000003a8 <NoSerovo1reset>:
 3a8:	0a 95       	dec	r16
 3aa:	00 93 67 00 	sts	0x0067, r16
 3ae:	00 91 68 00 	lds	r16, 0x0068
 3b2:	00 23       	and	r16, r16
 3b4:	11 f4       	brne	.+4      	; 0x3ba <NoSerovo2reset>
 3b6:	c3 98       	cbi	0x18, 3	; 24
 3b8:	03 95       	inc	r16

000003ba <NoSerovo2reset>:
 3ba:	0a 95       	dec	r16
 3bc:	00 93 68 00 	sts	0x0068, r16
 3c0:	00 91 69 00 	lds	r16, 0x0069
 3c4:	00 23       	and	r16, r16
 3c6:	11 f4       	brne	.+4      	; 0x3cc <NoSerovo3reset>
 3c8:	c4 98       	cbi	0x18, 4	; 24
 3ca:	03 95       	inc	r16

000003cc <NoSerovo3reset>:
 3cc:	0a 95       	dec	r16
 3ce:	00 93 69 00 	sts	0x0069, r16
 3d2:	0f 91       	pop	r16
 3d4:	0f bf       	out	0x3f, r16	; 63
 3d6:	0f 91       	pop	r16
 3d8:	18 95       	reti

000003da <EepromRead>:
 3da:	e1 99       	sbic	0x1c, 1	; 28
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <EepromRead>
 3de:	8e bb       	out	0x1e, r24	; 30
 3e0:	e0 9a       	sbi	0x1c, 0	; 28
 3e2:	8d b3       	in	r24, 0x1d	; 29
 3e4:	08 95       	ret
