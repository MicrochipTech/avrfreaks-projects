
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002dc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00000380  2**0
                  ALLOC
  3 .noinit       00000000  00800072  00800072  00000380  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000380  2**0
                  CONTENTS
  5 .stab         00000870  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000006b0  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26
   2:	2b c0       	rjmp	.+86     	; 0x5a
   4:	2a c0       	rjmp	.+84     	; 0x5a
   6:	29 c0       	rjmp	.+82     	; 0x5a
   8:	28 c0       	rjmp	.+80     	; 0x5a
   a:	27 c0       	rjmp	.+78     	; 0x5a
   c:	4b c1       	rjmp	.+662    	; 0x2a4
   e:	25 c0       	rjmp	.+74     	; 0x5a
  10:	24 c0       	rjmp	.+72     	; 0x5a
  12:	23 c0       	rjmp	.+70     	; 0x5a
  14:	22 c0       	rjmp	.+68     	; 0x5a
  16:	21 c0       	rjmp	.+66     	; 0x5a
  18:	20 c0       	rjmp	.+64     	; 0x5a
  1a:	1f c0       	rjmp	.+62     	; 0x5a
  1c:	1e c0       	rjmp	.+60     	; 0x5a
  1e:	1d c0       	rjmp	.+58     	; 0x5a
  20:	1c c0       	rjmp	.+56     	; 0x5a
  22:	1b c0       	rjmp	.+54     	; 0x5a
  24:	1a c0       	rjmp	.+52     	; 0x5a

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ed       	ldi	r30, 0xDC	; 220
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 37       	cpi	r26, 0x72	; 114
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50
  58:	e3 c0       	rjmp	.+454    	; 0x220

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0

0000005c <InitDDRs>:
#include"definitions.h"
void InitDDRs(void)
{
	DDRB =  0;
  5c:	17 ba       	out	0x17, r1	; 23
	DDRC =  0;
  5e:	14 ba       	out	0x14, r1	; 20
	DDRD =  0; 
  60:	11 ba       	out	0x11, r1	; 17
    DDRB = DDRB | _BV(PB1) | _BV(PB6);
  62:	87 b3       	in	r24, 0x17	; 23
  64:	82 64       	ori	r24, 0x42	; 66
  66:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  68:	18 ba       	out	0x18, r1	; 24
	DDRD =  DDRD | _BV(PD0) | _BV(PD2) | _BV(PD3);
  6a:	81 b3       	in	r24, 0x11	; 17
  6c:	8d 60       	ori	r24, 0x0D	; 13
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  70:	12 ba       	out	0x12, r1	; 18
	PORTC = 0;
  72:	15 ba       	out	0x15, r1	; 21
  74:	08 95       	ret

00000076 <TurnMotors>:
}
void TurnMotors(int count)
{
	if (count == 15) // move right 
  76:	8f 30       	cpi	r24, 0x0F	; 15
  78:	91 05       	cpc	r25, r1
  7a:	21 f0       	breq	.+8      	; 0x84
		{
			PORTB = PORTB | _BV(PB6) ;
			// Motor 1 is Off
		}
            
	else if(count == 5)         // move forward
  7c:	85 30       	cpi	r24, 0x05	; 5
  7e:	91 05       	cpc	r25, r1
  80:	19 f4       	brne	.+6      	; 0x88
		{
			PORTD = PORTD | _BV(PD3);
  82:	93 9a       	sbi	0x12, 3	; 18
			PORTB = PORTB | _BV(PB6);
  84:	c6 9a       	sbi	0x18, 6	; 24
  86:	08 95       	ret
			// Both Motors should be On.
		}
	else if(count == 2)	// move backward
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	91 05       	cpc	r25, r1
  8c:	29 f4       	brne	.+10     	; 0x98
    	{
		    PORTD = PORTD | _BV(PD0) | _BV(PD2) ;  
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	85 60       	ori	r24, 0x05	; 5
  92:	82 bb       	out	0x12, r24	; 18
			PORTB = PORTB | _BV(PB1);
  94:	c1 9a       	sbi	0x18, 1	; 24
  96:	08 95       	ret
			// Both Motors should rotate reverse
		}		
           
	else if (count == 12) //  move left
  98:	0c 97       	sbiw	r24, 0x0c	; 12
  9a:	09 f4       	brne	.+2      	; 0x9e
        {
            PORTD = PORTD | _BV(PD3) ;	
  9c:	93 9a       	sbi	0x12, 3	; 18
  9e:	08 95       	ret
  a0:	08 95       	ret

000000a2 <FindFirst>:
			// Motor 2 is Off
		}             
	return ;
}
int FindFirst(void)
{
    if(TSOP0)
  a2:	99 99       	sbic	0x13, 1	; 19
  a4:	03 c0       	rjmp	.+6      	; 0xac
        return 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret
    if(TSOP1)
  ac:	9a 99       	sbic	0x13, 2	; 19
  ae:	03 c0       	rjmp	.+6      	; 0xb6
        return 2;
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret
    if(TSOP2)
  b6:	9b 99       	sbic	0x13, 3	; 19
  b8:	03 c0       	rjmp	.+6      	; 0xc0
        return 3;
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret
    if(TSOP3)
  c0:	9c 99       	sbic	0x13, 4	; 19
  c2:	03 c0       	rjmp	.+6      	; 0xca
        return 4;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	08 95       	ret
    if(TSOP4)
  ca:	9d 99       	sbic	0x13, 5	; 19
  cc:	03 c0       	rjmp	.+6      	; 0xd4
        return 5;
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret
    if(TSOP5)
  d4:	87 99       	sbic	0x10, 7	; 16
  d6:	03 c0       	rjmp	.+6      	; 0xde
        return 6;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	08 95       	ret
    if(TSOP6)
  de:	86 99       	sbic	0x10, 6	; 16
  e0:	03 c0       	rjmp	.+6      	; 0xe8
        return 7;
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret
    if(TSOP7)
  e8:	85 99       	sbic	0x10, 5	; 16
  ea:	03 c0       	rjmp	.+6      	; 0xf2
        return 8;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret
    else return 0;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
}	
  f6:	08 95       	ret
  f8:	08 95       	ret

000000fa <SetupTimer>:
void InitDDRs(void);
void delay(unsigned char value , unsigned char OCR_value);
void SetupTimer(void)
{        
    TCCR1B = TCCR1B | _BV(WGM12) | _BV(CS10) ; 
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	89 60       	ori	r24, 0x09	; 9
  fe:	8e bd       	out	0x2e, r24	; 46
	TIMSK  = TIMSK  | _BV(OCIE1A) ;
 100:	89 b7       	in	r24, 0x39	; 57
 102:	80 61       	ori	r24, 0x10	; 16
 104:	89 bf       	out	0x39, r24	; 57
 106:	08 95       	ret

00000108 <delay>:

}
int main(void)
{
   unsigned char i=0;
   int receive = 0 ;
    InitDDRs();
	sei();
	PORTB = PORTB & ~(_BV(PB1));
    for(;;)
    {
	    //PORTC  =  PORTC | _BV(PC0); 
		if(FindFirst())
		{
		    receive = FindFirst();
			if(receive <= 5 )
			{
			    //PORTB = PORTB | _BV(PB1) ;
				if(!(PINC & check[receive-1])) // Checking for the startBit
					{
					 // PORTB = PORTB | _BV(PB1) ;
					  SetupTimer();
					  delay(3,105);
				//	  PORTB = PORTB & ~(_BV(PB1));
					  FindTransmitted1(receive); 
					}
			}
            else 
            {
                if(!(PIND & check[receive-1])) // Checking for the startBit
					{
					  SetupTimer();
					  delay(3,105);
					//  PORTB = PORTB & ~(_BV(PB1));
					  FindTransmitted2(receive); 
				    }
			}
			for(i=0;i<9;i++)
			{
			  SetupTimer();  
			  delay(117,105);
			}		
		}	
		else 
		{
			PORTD = PORTD & ~(_BV(PD0)) & ~(_BV(PB2)) & ~(_BV(PD3));  
			PORTB = PORTB & ~(_BV(PB6)) & ~(_BV(PB1));
		}	
    } 
}

void FindTransmitted1(int receive)
{
   
    unsigned char i=0,count=0;
	PORTD = PORTD & ~(_BV(PD0)) & ~(_BV(PB2)) & ~(_BV(PD3));  
	PORTB = PORTB & ~(_BV(PB6));
	SetupTimer();
    delay(138,105);
	for(i=0;i<4;i++)
	{
	    //PORTB = PORTB | _BV(PB1);
		SetupTimer();
		delay(2,105);
		//PORTB = PORTB | _BV(PB1) ;
		if(!(PINC & check[receive-1]))
		{count = count | 1 << i ;} 
		//PORTB = PORTB & ~(_BV(PB1));  
		SetupTimer();
		delay(118,105); 
	}
	TurnMotors(count);
	count = 0;	
}
void FindTransmitted2(int receive)
{
    unsigned char i=0,count=0;
	PORTD = PORTD & ~(_BV(PD0)) & ~(_BV(PB2)) & ~(_BV(PD3));  
	PORTB = PORTB & ~(_BV(PB6));
	SetupTimer();
    delay(138,105);
	for(i=0;i<4;i++)
	{
	    //PORTB = PORTB | _BV(PB1);
		SetupTimer();
		delay(2,105);
		//PORTB = PORTB | _BV(PB1) ;
		if(!(PIND & check[receive-1]))
		{count = count | 1 << i ;} 
	//	PORTB = PORTB & ~(_BV(PB1));  
		SetupTimer();
		delay(118,105); 
	}
	TurnMotors(count);
	count = 0;

}
void delay(unsigned char value , unsigned char OCR_value)
{   
    OCR1A  = OCR_value;
 108:	26 2f       	mov	r18, r22
 10a:	33 27       	eor	r19, r19
 10c:	3b bd       	out	0x2b, r19	; 43
 10e:	2a bd       	out	0x2a, r18	; 42
    Time   = value;
 110:	80 93 70 00 	sts	0x0070, r24
	while(TCCR1B!=0);
 114:	8e b5       	in	r24, 0x2e	; 46
 116:	88 23       	and	r24, r24
 118:	e9 f7       	brne	.-6      	; 0x114
 11a:	08 95       	ret

0000011c <FindTransmitted1>:
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
 12a:	ee 24       	eor	r14, r14
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	82 7f       	andi	r24, 0xF2	; 242
 130:	82 bb       	out	0x12, r24	; 18
 132:	c6 98       	cbi	0x18, 6	; 24
 134:	e2 df       	rcall	.-60     	; 0xfa
 136:	69 e6       	ldi	r22, 0x69	; 105
 138:	8a e8       	ldi	r24, 0x8A	; 138
 13a:	e6 df       	rcall	.-52     	; 0x108
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	f8 2e       	mov	r15, r24
 144:	da df       	rcall	.-76     	; 0xfa
 146:	69 e6       	ldi	r22, 0x69	; 105
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	de df       	rcall	.-68     	; 0x108
 14c:	83 b3       	in	r24, 0x13	; 19
 14e:	28 2f       	mov	r18, r24
 150:	33 27       	eor	r19, r19
 152:	f8 01       	movw	r30, r16
 154:	e0 0f       	add	r30, r16
 156:	f1 1f       	adc	r31, r17
 158:	e2 5a       	subi	r30, 0xA2	; 162
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	91 81       	ldd	r25, Z+1	; 0x01
 160:	28 23       	and	r18, r24
 162:	39 23       	and	r19, r25
 164:	23 2b       	or	r18, r19
 166:	49 f4       	brne	.+18     	; 0x17a
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0c 2e       	mov	r0, r28
 16e:	02 c0       	rjmp	.+4      	; 0x174
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170
 178:	e8 2a       	or	r14, r24
 17a:	bf df       	rcall	.-130    	; 0xfa
 17c:	69 e6       	ldi	r22, 0x69	; 105
 17e:	86 e7       	ldi	r24, 0x76	; 118
 180:	c3 df       	rcall	.-122    	; 0x108
 182:	fa 94       	dec	r15
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	f7 fe       	sbrs	r15, 7
 188:	dd cf       	rjmp	.-70     	; 0x144
 18a:	8e 2d       	mov	r24, r14
 18c:	99 27       	eor	r25, r25
 18e:	73 df       	rcall	.-282    	; 0x76
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

0000019e <FindTransmitted2>:
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	8c 01       	movw	r16, r24
 1ac:	ee 24       	eor	r14, r14
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	82 7f       	andi	r24, 0xF2	; 242
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	c6 98       	cbi	0x18, 6	; 24
 1b6:	a1 df       	rcall	.-190    	; 0xfa
 1b8:	69 e6       	ldi	r22, 0x69	; 105
 1ba:	8a e8       	ldi	r24, 0x8A	; 138
 1bc:	a5 df       	rcall	.-182    	; 0x108
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	f9 2e       	mov	r15, r25
 1c6:	99 df       	rcall	.-206    	; 0xfa
 1c8:	69 e6       	ldi	r22, 0x69	; 105
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	9d df       	rcall	.-198    	; 0x108
 1ce:	80 b3       	in	r24, 0x10	; 16
 1d0:	28 2f       	mov	r18, r24
 1d2:	33 27       	eor	r19, r19
 1d4:	f8 01       	movw	r30, r16
 1d6:	e0 0f       	add	r30, r16
 1d8:	f1 1f       	adc	r31, r17
 1da:	e2 5a       	subi	r30, 0xA2	; 162
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	28 23       	and	r18, r24
 1e4:	39 23       	and	r19, r25
 1e6:	23 2b       	or	r18, r19
 1e8:	49 f4       	brne	.+18     	; 0x1fc
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0c 2e       	mov	r0, r28
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2
 1fa:	e8 2a       	or	r14, r24
 1fc:	7e df       	rcall	.-260    	; 0xfa
 1fe:	69 e6       	ldi	r22, 0x69	; 105
 200:	86 e7       	ldi	r24, 0x76	; 118
 202:	82 df       	rcall	.-252    	; 0x108
 204:	fa 94       	dec	r15
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	f7 fe       	sbrs	r15, 7
 20a:	dd cf       	rjmp	.-70     	; 0x1c6
 20c:	8e 2d       	mov	r24, r14
 20e:	99 27       	eor	r25, r25
 210:	32 df       	rcall	.-412    	; 0x76
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <main>:
 220:	cf e5       	ldi	r28, 0x5F	; 95
 222:	d4 e0       	ldi	r29, 0x04	; 4
 224:	de bf       	out	0x3e, r29	; 62
 226:	cd bf       	out	0x3d, r28	; 61
 228:	19 df       	rcall	.-462    	; 0x5c
 22a:	78 94       	sei
 22c:	c1 98       	cbi	0x18, 1	; 24
 22e:	39 df       	rcall	.-398    	; 0xa2
 230:	89 2b       	or	r24, r25
 232:	89 f1       	breq	.+98     	; 0x296
 234:	36 df       	rcall	.-404    	; 0xa2
 236:	ec 01       	movw	r28, r24
 238:	fc 01       	movw	r30, r24
 23a:	e8 0f       	add	r30, r24
 23c:	f9 1f       	adc	r31, r25
 23e:	06 97       	sbiw	r24, 0x06	; 6
 240:	8c f4       	brge	.+34     	; 0x264
 242:	83 b3       	in	r24, 0x13	; 19
 244:	99 27       	eor	r25, r25
 246:	e2 5a       	subi	r30, 0xA2	; 162
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	20 81       	ld	r18, Z
 24c:	31 81       	ldd	r19, Z+1	; 0x01
 24e:	82 23       	and	r24, r18
 250:	93 23       	and	r25, r19
 252:	89 2b       	or	r24, r25
 254:	b9 f4       	brne	.+46     	; 0x284
 256:	51 df       	rcall	.-350    	; 0xfa
 258:	69 e6       	ldi	r22, 0x69	; 105
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	55 df       	rcall	.-342    	; 0x108
 25e:	ce 01       	movw	r24, r28
 260:	5d df       	rcall	.-326    	; 0x11c
 262:	10 c0       	rjmp	.+32     	; 0x284
 264:	80 b3       	in	r24, 0x10	; 16
 266:	99 27       	eor	r25, r25
 268:	e2 5a       	subi	r30, 0xA2	; 162
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	20 81       	ld	r18, Z
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	82 23       	and	r24, r18
 272:	93 23       	and	r25, r19
 274:	89 2b       	or	r24, r25
 276:	31 f4       	brne	.+12     	; 0x284
 278:	40 df       	rcall	.-384    	; 0xfa
 27a:	69 e6       	ldi	r22, 0x69	; 105
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	44 df       	rcall	.-376    	; 0x108
 280:	ce 01       	movw	r24, r28
 282:	8d df       	rcall	.-230    	; 0x19e
 284:	c8 e0       	ldi	r28, 0x08	; 8
 286:	39 df       	rcall	.-398    	; 0xfa
 288:	69 e6       	ldi	r22, 0x69	; 105
 28a:	85 e7       	ldi	r24, 0x75	; 117
 28c:	3d df       	rcall	.-390    	; 0x108
 28e:	c1 50       	subi	r28, 0x01	; 1
 290:	c7 ff       	sbrs	r28, 7
 292:	f9 cf       	rjmp	.-14     	; 0x286
 294:	cc cf       	rjmp	.-104    	; 0x22e
 296:	82 b3       	in	r24, 0x12	; 18
 298:	82 7f       	andi	r24, 0xF2	; 242
 29a:	82 bb       	out	0x12, r24	; 18
 29c:	88 b3       	in	r24, 0x18	; 24
 29e:	8d 7b       	andi	r24, 0xBD	; 189
 2a0:	88 bb       	out	0x18, r24	; 24
 2a2:	c5 cf       	rjmp	.-118    	; 0x22e

000002a4 <__vector_6>:
}
INTERRUPT(SIG_OUTPUT_COMPARE1A)
{
 2a4:	78 94       	sei
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
    unsigned  static  char cycles = 0; 
	if(cycles == Time)
 2b4:	90 91 71 00 	lds	r25, 0x0071
 2b8:	80 91 70 00 	lds	r24, 0x0070
 2bc:	98 17       	cp	r25, r24
 2be:	21 f4       	brne	.+8      	; 0x2c8
	{
	   cycles =  0;
 2c0:	10 92 71 00 	sts	0x0071, r1
	   TCCR1B =  0;
 2c4:	1e bc       	out	0x2e, r1	; 46
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce
	}
    else cycles ++;   
 2c8:	9f 5f       	subi	r25, 0xFF	; 255
 2ca:	90 93 71 00 	sts	0x0071, r25
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti
