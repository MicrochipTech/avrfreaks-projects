
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000246  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  00000302  2**0
                  ALLOC
  3 .noinit       00000000  0080008c  0080008c  00000302  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000302  2**0
                  CONTENTS
  5 .stab         0000081c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000857  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26
   2:	2b c0       	rjmp	.+86     	; 0x5a
   4:	2a c0       	rjmp	.+84     	; 0x5a
   6:	34 c0       	rjmp	.+104    	; 0x70
   8:	28 c0       	rjmp	.+80     	; 0x5a
   a:	27 c0       	rjmp	.+78     	; 0x5a
   c:	6d c0       	rjmp	.+218    	; 0xe8
   e:	25 c0       	rjmp	.+74     	; 0x5a
  10:	24 c0       	rjmp	.+72     	; 0x5a
  12:	23 c0       	rjmp	.+70     	; 0x5a
  14:	22 c0       	rjmp	.+68     	; 0x5a
  16:	21 c0       	rjmp	.+66     	; 0x5a
  18:	20 c0       	rjmp	.+64     	; 0x5a
  1a:	1f c0       	rjmp	.+62     	; 0x5a
  1c:	1e c0       	rjmp	.+60     	; 0x5a
  1e:	1d c0       	rjmp	.+58     	; 0x5a
  20:	1c c0       	rjmp	.+56     	; 0x5a
  22:	1b c0       	rjmp	.+54     	; 0x5a
  24:	1a c0       	rjmp	.+52     	; 0x5a

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e4       	ldi	r30, 0x46	; 70
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 38       	cpi	r26, 0x8C	; 140
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50
  58:	a7 c0       	rjmp	.+334    	; 0x1a8

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0

0000005c <SetIR>:
//Checking for the Timer to set the IR pulse 
unsigned char high,Low;
void SetIR(unsigned char width , unsigned char low, unsigned char OCR_value)
{
    OCR2 = OCR_value;
  5c:	43 bd       	out	0x23, r20	; 35
    high = width ;
  5e:	80 93 8a 00 	sts	0x008A, r24
	Low  = width+low;
  62:	86 0f       	add	r24, r22
  64:	80 93 8b 00 	sts	0x008B, r24
    while(TCCR2!=0);    
  68:	85 b5       	in	r24, 0x25	; 37
  6a:	88 23       	and	r24, r24
  6c:	e9 f7       	brne	.-6      	; 0x68
  6e:	08 95       	ret

00000070 <__vector_3>:
} 
INTERRUPT (SIG_OUTPUT_COMPARE2)
{ 
  70:	78 94       	sei
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
   unsigned static char cycles = 0 ;
   if(cycles < high )
  80:	90 91 88 00 	lds	r25, 0x0088
  84:	80 91 8a 00 	lds	r24, 0x008A
  88:	98 17       	cp	r25, r24
  8a:	20 f4       	brcc	.+8      	; 0x94
   {
   
        //keep toggling 
        if (cycles%2)        
  8c:	90 fd       	sbrc	r25, 0
  8e:	04 c0       	rjmp	.+8      	; 0x98
			PORTB = PORTB & ~(_BV(IR));
		else
			PORTB = PORTB | _BV(IR);
  90:	c2 9a       	sbi	0x18, 2	; 24
  92:	0f c0       	rjmp	.+30     	; 0xb2
	  
   }
   // making it zero after 50 cycles 
   else if(cycles == high)
  94:	98 17       	cp	r25, r24
  96:	11 f4       	brne	.+4      	; 0x9c
        PORTB&=~(_BV(IR));
  98:	c2 98       	cbi	0x18, 2	; 24
  9a:	0b c0       	rjmp	.+22     	; 0xb2
   //waiting till the cycles become 150
   else if(cycles == Low)
  9c:	80 91 8b 00 	lds	r24, 0x008B
  a0:	98 17       	cp	r25, r24
  a2:	39 f4       	brne	.+14     	; 0xb2
   {
        // make it low 
        cycles = 0 ;
  a4:	10 92 88 00 	sts	0x0088, r1
		TCCR2  = 0 ;
  a8:	15 bc       	out	0x25, r1	; 37
		high   = 0 ;
  aa:	10 92 8a 00 	sts	0x008A, r1
		Low    = 0 ;
  ae:	10 92 8b 00 	sts	0x008B, r1
   }
   cycles ++  ;
  b2:	80 91 88 00 	lds	r24, 0x0088
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 88 00 	sts	0x0088, r24
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <delay>:
}
// This Timer starts the delay 
void delay(unsigned char value , unsigned char low , unsigned char OCR_value)
{   
  ca:	38 2f       	mov	r19, r24
  cc:	26 2f       	mov	r18, r22
  ce:	84 2f       	mov	r24, r20
    OCR1A  = OCR_value;
  d0:	99 27       	eor	r25, r25
  d2:	9b bd       	out	0x2b, r25	; 43
  d4:	8a bd       	out	0x2a, r24	; 42
    high   = value;
  d6:	30 93 8a 00 	sts	0x008A, r19
	Low    = low + value ;
  da:	23 0f       	add	r18, r19
  dc:	20 93 8b 00 	sts	0x008B, r18
    while(TCCR1B!=0);
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	88 23       	and	r24, r24
  e4:	e9 f7       	brne	.-6      	; 0xe0
  e6:	08 95       	ret

000000e8 <__vector_6>:

}
INTERRUPT(SIG_OUTPUT_COMPARE1A)
{
  e8:	78 94       	sei
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
    unsigned  static  char cycles = 0; 
    if (cycles < high )
  f8:	90 91 89 00 	lds	r25, 0x0089
  fc:	80 91 8a 00 	lds	r24, 0x008A
 100:	98 17       	cp	r25, r24
 102:	10 f0       	brcs	.+4      	; 0x108
    {
        if (cycles%2)        
			PORTB = PORTB & ~(_BV(IR));
		else
			PORTB = PORTB & ~(_BV(IR));
	}
    else if(cycles == high)   
 104:	98 17       	cp	r25, r24
 106:	09 f4       	brne	.+2      	; 0x10a
		PORTB&=~(_BV(IR));
 108:	c2 98       	cbi	0x18, 2	; 24
    if(cycles == Low )
 10a:	80 91 8b 00 	lds	r24, 0x008B
 10e:	98 17       	cp	r25, r24
 110:	39 f4       	brne	.+14     	; 0x120
	 {
	   cycles = 0 ;
 112:	10 92 89 00 	sts	0x0089, r1
	   TCCR1B = 0 ;
 116:	1e bc       	out	0x2e, r1	; 46
	   Low    = 0 ;
 118:	10 92 8b 00 	sts	0x008B, r1
	   high   = 0 ;
 11c:	10 92 8a 00 	sts	0x008A, r1
	 }
    cycles ++;   
 120:	80 91 89 00 	lds	r24, 0x0089
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 89 00 	sts	0x0089, r24
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <initDDRs>:
void initDDRs(void)
{
	DDRB = _BV(RED_LED) | _BV(GREEN_LED) | _BV(IR);
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	87 bb       	out	0x17, r24	; 23
	DDRC = 0;
 13c:	14 ba       	out	0x14, r1	; 20
	DDRD = 0;
 13e:	11 ba       	out	0x11, r1	; 17
	PORTB = PORTC = PORTD = 0;
 140:	12 ba       	out	0x12, r1	; 18
 142:	82 b3       	in	r24, 0x12	; 18
 144:	85 bb       	out	0x15, r24	; 21
 146:	85 b3       	in	r24, 0x15	; 21
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret

0000014c <setupTimer1>:
	/* All LEDs off , TSOP pins in High Z mode */
}

void setupTimer1(void)
{
   //8 Bit timer counter 2 
   TIMSK = TIMSK | _BV(OCIE2) ; //output Compare Interrupt
 14c:	89 b7       	in	r24, 0x39	; 57
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	89 bf       	out	0x39, r24	; 57
   TCCR2 = TCCR2 | _BV(WGM21) | _BV(CS20) ; // for CTC mode
 152:	85 b5       	in	r24, 0x25	; 37
 154:	89 60       	ori	r24, 0x09	; 9
 156:	85 bd       	out	0x25, r24	; 37
 158:	08 95       	ret

0000015a <setupTimer2>:
   
}
void setupTimer2(void)
{   // setting the Timer 16 Bit .....
    TCCR1B = TCCR1B | _BV(WGM12)  | _BV(CS10); // CTC mode and no prescaler
 15a:	8e b5       	in	r24, 0x2e	; 46
 15c:	89 60       	ori	r24, 0x09	; 9
 15e:	8e bd       	out	0x2e, r24	; 46
	TIMSK  = TIMSK  | _BV(OCIE1A) ;        // compare match interrupt 
 160:	89 b7       	in	r24, 0x39	; 57
 162:	80 61       	ori	r24, 0x10	; 16
 164:	89 bf       	out	0x39, r24	; 57
 166:	08 95       	ret

00000168 <StartTransmit>:
	  }
	} 
}
void StartTransmit( int *array )
{  
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	8c 01       	movw	r16, r24
 174:	08 5f       	subi	r16, 0xF8	; 248
 176:	1f 4f       	sbci	r17, 0xFF	; 255
    unsigned int i = 0;
    for(i=0;i<5;i++)
	{
	  if(array[i])
 178:	89 91       	ld	r24, Y+
 17a:	99 91       	ld	r25, Y+
 17c:	89 2b       	or	r24, r25
 17e:	31 f0       	breq	.+12     	; 0x18c
	   {
	    setupTimer1();
 180:	e5 df       	rcall	.-54     	; 0x14c
		SetIR(30,90,105);
 182:	49 e6       	ldi	r20, 0x69	; 105
 184:	6a e5       	ldi	r22, 0x5A	; 90
 186:	8e e1       	ldi	r24, 0x1E	; 30
 188:	69 df       	rcall	.-302    	; 0x5c
 18a:	05 c0       	rjmp	.+10     	; 0x196
		PORTB = PORTB & ~(_BV(IR));
	   }
	  else 
	   {
        setupTimer2();  
 18c:	e6 df       	rcall	.-52     	; 0x15a
	    delay(30,90,105);
 18e:	49 e6       	ldi	r20, 0x69	; 105
 190:	6a e5       	ldi	r22, 0x5A	; 90
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	9a df       	rcall	.-204    	; 0xca
		PORTB = PORTB & ~(_BV(IR));
 196:	c2 98       	cbi	0x18, 2	; 24
 198:	0c 17       	cp	r16, r28
 19a:	1d 07       	cpc	r17, r29
 19c:	68 f7       	brcc	.-38     	; 0x178
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <main>:
 1a8:	cf e5       	ldi	r28, 0x5F	; 95
 1aa:	d4 e0       	ldi	r29, 0x04	; 4
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	c2 df       	rcall	.-124    	; 0x138
 1b4:	c4 bb       	out	0x14, r28	; 20
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	83 60       	ori	r24, 0x03	; 3
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	8f 60       	ori	r24, 0x0F	; 15
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	78 94       	sei
 1c4:	9b 99       	sbic	0x13, 3	; 19
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4
 1c8:	8e e7       	ldi	r24, 0x7E	; 126
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	cd df       	rcall	.-102    	; 0x168
 1ce:	c9 e0       	ldi	r28, 0x09	; 9
 1d0:	c4 df       	rcall	.-120    	; 0x15a
 1d2:	49 e6       	ldi	r20, 0x69	; 105
 1d4:	6a e5       	ldi	r22, 0x5A	; 90
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
 1d8:	78 df       	rcall	.-272    	; 0xca
 1da:	c1 50       	subi	r28, 0x01	; 1
 1dc:	c7 ff       	sbrs	r28, 7
 1de:	f8 cf       	rjmp	.-16     	; 0x1d0
 1e0:	9b 9b       	sbis	0x13, 3	; 19
 1e2:	f2 cf       	rjmp	.-28     	; 0x1c8
 1e4:	9a 99       	sbic	0x13, 2	; 19
 1e6:	0e c0       	rjmp	.+28     	; 0x204
 1e8:	84 e7       	ldi	r24, 0x74	; 116
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	bd df       	rcall	.-134    	; 0x168
 1ee:	c9 e0       	ldi	r28, 0x09	; 9
 1f0:	b4 df       	rcall	.-152    	; 0x15a
 1f2:	49 e6       	ldi	r20, 0x69	; 105
 1f4:	6a e5       	ldi	r22, 0x5A	; 90
 1f6:	8e e1       	ldi	r24, 0x1E	; 30
 1f8:	68 df       	rcall	.-304    	; 0xca
 1fa:	c1 50       	subi	r28, 0x01	; 1
 1fc:	c7 ff       	sbrs	r28, 7
 1fe:	f8 cf       	rjmp	.-16     	; 0x1f0
 200:	9a 9b       	sbis	0x13, 2	; 19
 202:	f2 cf       	rjmp	.-28     	; 0x1e8
 204:	99 99       	sbic	0x13, 1	; 19
 206:	0e c0       	rjmp	.+28     	; 0x224
 208:	8a e6       	ldi	r24, 0x6A	; 106
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ad df       	rcall	.-166    	; 0x168
 20e:	c9 e0       	ldi	r28, 0x09	; 9
 210:	a4 df       	rcall	.-184    	; 0x15a
 212:	49 e6       	ldi	r20, 0x69	; 105
 214:	6a e5       	ldi	r22, 0x5A	; 90
 216:	8e e1       	ldi	r24, 0x1E	; 30
 218:	58 df       	rcall	.-336    	; 0xca
 21a:	c1 50       	subi	r28, 0x01	; 1
 21c:	c7 ff       	sbrs	r28, 7
 21e:	f8 cf       	rjmp	.-16     	; 0x210
 220:	99 9b       	sbis	0x13, 1	; 19
 222:	f2 cf       	rjmp	.-28     	; 0x208
 224:	98 99       	sbic	0x13, 0	; 19
 226:	ce cf       	rjmp	.-100    	; 0x1c4
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9d df       	rcall	.-198    	; 0x168
 22e:	c9 e0       	ldi	r28, 0x09	; 9
 230:	94 df       	rcall	.-216    	; 0x15a
 232:	49 e6       	ldi	r20, 0x69	; 105
 234:	6a e5       	ldi	r22, 0x5A	; 90
 236:	8e e1       	ldi	r24, 0x1E	; 30
 238:	48 df       	rcall	.-368    	; 0xca
 23a:	c1 50       	subi	r28, 0x01	; 1
 23c:	c7 ff       	sbrs	r28, 7
 23e:	f8 cf       	rjmp	.-16     	; 0x230
 240:	98 9b       	sbis	0x13, 0	; 19
 242:	f2 cf       	rjmp	.-28     	; 0x228
 244:	bf cf       	rjmp	.-130    	; 0x1c4
