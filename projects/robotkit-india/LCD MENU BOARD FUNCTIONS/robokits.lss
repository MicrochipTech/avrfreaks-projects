
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a66  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00000a66  00000ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  00800168  00000b6e  00000be2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000018c  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104c  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000525  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f7a  00000000  00000000  0000233f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  000032bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ce  00000000  00000000  0000382c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00003efa  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   8:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_2>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_9>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_11>
  30:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_12>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000054 <__c.1576>:
  54:	0a 0a 50 72 65 73 73 20 61 6e 79 20 6b 65 79 20     ..Press any key 
  64:	6f 6e 20 6b 65 79 62 6f 61 72 64 3a 20 00           on keyboard: .

00000072 <__c.1574>:
  72:	0d 0a 0a 57 72 69 74 69 6e 67 20 6e 75 6d 62 65     ...Writing numbe
  82:	72 20 74 6f 20 55 41 52 54 3a 20 00                 r to UART: .

0000008e <__c.1572>:
  8e:	0d 0a 0a 56 69 73 69 74 20 55 73 20 61 74 20 77     ...Visit Us at w
  9e:	77 77 2e 72 6f 62 6f 6b 69 74 73 2e 6f 72 67 2e     ww.robokits.org.
  ae:	20 00                                                .

000000b0 <__c.1570>:
  b0:	0d 0a 0a 53 61 6d 70 6c 65 20 63 6f 64 65 20 6d     ...Sample code m
  c0:	61 64 65 20 62 79 20 52 6f 62 6f 6b 69 74 73 20     ade by Robokits 
  d0:	49 6e 64 69 61 20 66 6f 72 20 52 4f 42 4f 47 52     India for ROBOGR
  e0:	49 44 2e 20 00 00                                   ID. ..

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e6 e6       	ldi	r30, 0x66	; 102
  fa:	fa e0       	ldi	r31, 0x0A	; 10
  fc:	02 c0       	rjmp	.+4      	; 0x102 <.do_copy_data_start>

000000fe <.do_copy_data_loop>:
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0

00000102 <.do_copy_data_start>:
 102:	a8 36       	cpi	r26, 0x68	; 104
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <.do_copy_data_loop>

00000108 <__do_clear_bss>:
 108:	11 e0       	ldi	r17, 0x01	; 1
 10a:	a8 e6       	ldi	r26, 0x68	; 104
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	a5 3c       	cpi	r26, 0xC5	; 197
 114:	b1 07       	cpc	r27, r17
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	0e 94 0b 01 	call	0x216	; 0x216 <main>
 11c:	0c 94 31 05 	jmp	0xa62	; 0xa62 <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <wait_debounce>:
		lcd_puts("PRESS 4 TO EXIT \n");	
	}		
}

void wait_debounce(void)
{
 124:	90 b3       	in	r25, 0x10	; 16
    
    do {
        temp1 = PIND;                  		// read input
        for(i=0;i<65535;i++)
			for(j=0;j<50;j++);
        temp2 = PIND;                  		// read input
 126:	80 b3       	in	r24, 0x10	; 16
        temp1 = (temp1 & temp2);       		// debounce input
    } while ( temp1 & _BV(PIND1) );
 128:	89 23       	and	r24, r25
 12a:	81 fd       	sbrc	r24, 1
 12c:	fb cf       	rjmp	.-10     	; 0x124 <wait_debounce>
}
 12e:	08 95       	ret

00000130 <__vector_9>:
	menu();
	longjmp (env, 1);
}

SIGNAL(SIG_OVERFLOW1)            	// signal handler for tcnt1 overflow interrupt
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	if (bit_is_clear(PINA, 6))		//BLINK LED3 ON TIMER INTERRUPT
 13e:	ce 99       	sbic	0x19, 6	; 25
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_9+0x16>
		sbi(PORTA,6);				//LED3 ON
 142:	de 9a       	sbi	0x1b, 6	; 27
 144:	01 c0       	rjmp	.+2      	; 0x148 <__vector_9+0x18>
	else							//ELSE
		cbi(PORTA,6);				//LED3 OFF	
 146:	de 98       	cbi	0x1b, 6	; 27
    TCNT1 = TIMER_1_CNT;         	// reset counter to get this interrupt again
 148:	8e e2       	ldi	r24, 0x2E	; 46
 14a:	9c ef       	ldi	r25, 0xFC	; 252
 14c:	9d bd       	out	0x2d, r25	; 45
 14e:	8c bd       	out	0x2c, r24	; 44
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <subprog>:
		lcd_puts("1SELEC 2UP 3DOWN\n");	
	}	
}

void subprog(void)
{
 15e:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>
	lcd_clrscr();
	if(current==0)
 162:	80 91 ad 01 	lds	r24, 0x01AD
 166:	88 23       	and	r24, r24
 168:	19 f4       	brne	.+6      	; 0x170 <subprog+0x12>
	{
		lcd_puts("BLINK LEDS PORTA\n");
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	13 c0       	rjmp	.+38     	; 0x196 <subprog+0x38>
		lcd_puts("PRESS 4 TO EXIT \n");			
	}
	else if(current==1)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	19 f4       	brne	.+6      	; 0x17a <subprog+0x1c>
	{
		lcd_puts("MOTOR SPEED CONT\n");
 174:	84 e8       	ldi	r24, 0x84	; 132
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e c0       	rjmp	.+28     	; 0x196 <subprog+0x38>
		lcd_puts("PRESS 4 TO EXIT \n");			
	}	
	else if(current==2)
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	19 f4       	brne	.+6      	; 0x184 <subprog+0x26>
	{
		lcd_puts("UART PUT&GET DEM\n");
 17e:	86 e9       	ldi	r24, 0x96	; 150
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	09 c0       	rjmp	.+18     	; 0x196 <subprog+0x38>
		lcd_puts("PRESS 4 TO EXIT \n");			
	}		
	else if(current==3)
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	19 f4       	brne	.+6      	; 0x18e <subprog+0x30>
	{
		lcd_puts("TIMER1 BLINKY   \n");
 188:	88 ea       	ldi	r24, 0xA8	; 168
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <subprog+0x38>
		lcd_puts("PRESS 4 TO EXIT \n");	
	}		
	else if(current==4)
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	49 f4       	brne	.+18     	; 0x1a4 <subprog+0x46>
	{
		lcd_puts("DEBOUNCE SW1    \n");
 192:	8a eb       	ldi	r24, 0xBA	; 186
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
		lcd_puts("PRESS 4 TO EXIT \n");	
 19a:	82 e7       	ldi	r24, 0x72	; 114
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 1a2:	08 95       	ret
	}
	else if(current==5)
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <subprog+0x5a>
	{
		lcd_puts("1 FWD   2 BWD   \n");
 1a8:	8c ec       	ldi	r24, 0xCC	; 204
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
		lcd_puts("PRESS 4 TO EXIT \n");	
 1b0:	82 e7       	ldi	r24, 0x72	; 114
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 1b8:	08 95       	ret

000001ba <menu>:
/*----------------------------------------------------------------
-----------------FUNCTIONS----------------------------------------
-----------------------------------------------------------------*/

void menu(void)
{
 1ba:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>
	lcd_clrscr();
	if(current==0)
 1be:	80 91 ad 01 	lds	r24, 0x01AD
 1c2:	88 23       	and	r24, r24
 1c4:	19 f4       	brne	.+6      	; 0x1cc <menu+0x12>
	{
		lcd_puts("BLINK LEDS PORTA\n");
 1c6:	80 e6       	ldi	r24, 0x60	; 96
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <menu+0x38>
		lcd_puts("1SELEC 2UP 3DOWN\n");			
	}
	else if(current==1)
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <menu+0x1c>
	{
		lcd_puts("MOTOR SPEED CONT\n");
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <menu+0x38>
		lcd_puts("1SELEC 2UP 3DOWN\n");			
	}	
	else if(current==2)
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <menu+0x26>
	{
		lcd_puts("UART PUT&GET DEM\n");
 1da:	86 e9       	ldi	r24, 0x96	; 150
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <menu+0x38>
		lcd_puts("1SELEC 2UP 3DOWN\n");			
	}		
	else if(current==3)
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	19 f4       	brne	.+6      	; 0x1ea <menu+0x30>
	{
		lcd_puts("TIMER1 BLINKY   \n");
 1e4:	88 ea       	ldi	r24, 0xA8	; 168
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <menu+0x38>
		lcd_puts("1SELEC 2UP 3DOWN\n");			
	}		
	else if(current==4)
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	49 f4       	brne	.+18     	; 0x200 <menu+0x46>
	{
		lcd_puts("DEBOUNCE SW1    \n");
 1ee:	8a eb       	ldi	r24, 0xBA	; 186
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
		lcd_puts("1SELEC 2UP 3DOWN\n");			
 1f6:	8e ed       	ldi	r24, 0xDE	; 222
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 1fe:	08 95       	ret
	}	
	else if(current==5)
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	41 f4       	brne	.+16     	; 0x214 <menu+0x5a>
	{
		lcd_puts("STEPPER MOTOR   \n");
 204:	80 ef       	ldi	r24, 0xF0	; 240
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
		lcd_puts("1SELEC 2UP 3DOWN\n");	
 20c:	8e ed       	ldi	r24, 0xDE	; 222
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 214:	08 95       	ret

00000216 <main>:
/*----------------------------------------------------------------
-----------------MAIN PROGRAM-------------------------------------
-----------------------------------------------------------------*/

int main(void)
{
 216:	2f 92       	push	r2
 218:	3f 92       	push	r3
 21a:	4f 92       	push	r4
 21c:	5f 92       	push	r5
 21e:	6f 92       	push	r6
 220:	7f 92       	push	r7
 222:	8f 92       	push	r8
 224:	9f 92       	push	r9
 226:	af 92       	push	r10
 228:	bf 92       	push	r11
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	27 97       	sbiw	r28, 0x07	; 7
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
	unsigned int c;
    char buffer[7];
    int  num=134;
    unsigned char i;	
	
	DDRA=0xF0;						//SET DATA DIRECTION REGISTER
 24a:	80 ef       	ldi	r24, 0xF0	; 240
 24c:	8a bb       	out	0x1a, r24	; 26
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PA.4, PA.5, PA.6 AND PA.7 ARE OUTPUT
									//ALL OTHERS ARE INPUT
									
	DDRB=0XFB;						//SET DATA DIRECTION REGISTER
 24e:	8b ef       	ldi	r24, 0xFB	; 251
 250:	87 bb       	out	0x17, r24	; 23
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PB.2 IS  INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRD=0XF1;						//SET DATA DIRECTION REGISTER
 252:	81 ef       	ldi	r24, 0xF1	; 241
 254:	81 bb       	out	0x11, r24	; 17
									//SET 1 for OUTPUT PORT
									//SET 0 FOR INPUT PORT
									//PD.1, PD.2 AND PD.3 ARE INPUT
									//ALL OTHERS ARE OUTPUT
	
	DDRC=0xFF;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 bb       	out	0x14, r24	; 20
		
	sbi(PORTB,2);					//ENABLE PULL UP FOR SWITCH INT2
 25a:	c2 9a       	sbi	0x18, 2	; 24
	sbi(PORTD,1);					//ENABLE PULL UP FOR SW1
 25c:	91 9a       	sbi	0x12, 1	; 18
	sbi(PORTD,2);					//ENABLE PULL UP FOR SWITCH INT0
 25e:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);					//ENABLE PULL UP FOR SWITCH INT1
 260:	93 9a       	sbi	0x12, 3	; 18
    
    lcd_init(LCD_DISP_ON);				/* initialize display, cursor off */
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 c2 03 	call	0x784	; 0x784 <lcd_init>
	lcd_clrscr();						/* clear display and home cursor */        
 268:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>
	lcd_puts("ROBOTICS BY\n");		/* put string to display (line 1) with linefeed */		
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
	lcd_puts("    SUDARSHAN");		/* cursor is now on second line, write second line */		
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
	lcd_gotoxy(0,1);  					/* move cursor to position 0 on line 2 */        
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 7f 03 	call	0x6fe	; 0x6fe <lcd_gotoxy>
	lcd_puts("A.");					/* write single char to display */    
 284:	8d e1       	ldi	r24, 0x1D	; 29
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 28c:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28e:	44 e2       	ldi	r20, 0x24	; 36
 290:	54 ef       	ldi	r21, 0xF4	; 244
 292:	ca 01       	movw	r24, r20
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x7e>


	for(i=0;i<15;i++)
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	2f 30       	cpi	r18, 0x0F	; 15
 29c:	d1 f7       	brne	.-12     	; 0x292 <main+0x7c>
		_delay_ms(250);
	
	lcd_clrscr();
 29e:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>

	lcd_puts("INT2 FOR OPTION1\n");
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
	lcd_puts("SW1 FOR OPTION2 ");
 2aa:	82 e3       	ldi	r24, 0x32	; 50
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	44 e2       	ldi	r20, 0x24	; 36
 2b6:	54 ef       	ldi	r21, 0xF4	; 244
 2b8:	ca 01       	movw	r24, r20
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0xa4>
	for(i=0;i<15;i++)
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	2f 30       	cpi	r18, 0x0F	; 15
 2c2:	d1 f7       	brne	.-12     	; 0x2b8 <main+0xa2>
		_delay_ms(250);

	lcd_clrscr();
 2c4:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>

	lcd_puts("INT0 FOR OPTION3\n");
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
	lcd_puts("INT1 FOR OPTION4 ");
 2d0:	85 e5       	ldi	r24, 0x55	; 85
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 a8 03 	call	0x750	; 0x750 <lcd_puts>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	44 e2       	ldi	r20, 0x24	; 36
 2dc:	54 ef       	ldi	r21, 0xF4	; 244
 2de:	ca 01       	movw	r24, r20
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0xca>
	for(i=0;i<15;i++)
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	2f 30       	cpi	r18, 0x0F	; 15
 2e8:	d1 f7       	brne	.-12     	; 0x2de <main+0xc8>
		_delay_ms(250);
   	
	current=0;
 2ea:	10 92 ad 01 	sts	0x01AD, r1
	menu();
 2ee:	0e 94 dd 00 	call	0x1ba	; 0x1ba <menu>
	
	GICR = _BV(INT1);           	// enable external int0
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	8b bf       	out	0x3b, r24	; 59
    MCUCR = _BV(ISC11);          	// falling egde: int0
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	85 bf       	out	0x35, r24	; 53
    
    sei();                       	// enable interrupts 
 2fa:	78 94       	sei
	
	setjmp (env);
 2fc:	8e ea       	ldi	r24, 0xAE	; 174
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 ab 04 	call	0x956	; 0x956 <setjmp>
					else
						PORTC=0x00;
				}			
			}	
		}
		else if(bit_is_clear(PIND,1))
 304:	b0 e3       	ldi	r27, 0x30	; 48
 306:	cb 2e       	mov	r12, r27
 308:	d1 2c       	mov	r13, r1
			_delay_ms(250);
		}		
		else
		{
			PORTA=0;	
			cbi(PORTC,0);				
 30a:	05 e3       	ldi	r16, 0x35	; 53
 30c:	10 e0       	ldi	r17, 0x00	; 0
			cbi(PORTC,3);	
			TCCR1A=0;
 30e:	af e4       	ldi	r26, 0x4F	; 79
 310:	2a 2e       	mov	r2, r26
 312:	31 2c       	mov	r3, r1
			TCCR1B=0;
 314:	fe e4       	ldi	r31, 0x4E	; 78
 316:	4f 2e       	mov	r4, r31
 318:	51 2c       	mov	r5, r1
			TCNT1=0;
 31a:	ec e4       	ldi	r30, 0x4C	; 76
 31c:	6e 2e       	mov	r6, r30
 31e:	71 2c       	mov	r7, r1
			OCR1AL=0;
 320:	7a e4       	ldi	r23, 0x4A	; 74
 322:	87 2e       	mov	r8, r23
 324:	91 2c       	mov	r9, r1
			OCR1BL=0;
 326:	68 e4       	ldi	r22, 0x48	; 72
 328:	a6 2e       	mov	r10, r22
 32a:	b1 2c       	mov	r11, r1
 32c:	54 e2       	ldi	r21, 0x24	; 36
 32e:	e5 2e       	mov	r14, r21
 330:	54 ef       	ldi	r21, 0xF4	; 244
 332:	f5 2e       	mov	r15, r21
	
	setjmp (env);

	for(;1;)
	{
		if(bit_is_clear(PINB,2))
 334:	a6 e3       	ldi	r26, 0x36	; 54
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	8c 91       	ld	r24, X
 33a:	82 fd       	sbrc	r24, 2
 33c:	10 c1       	rjmp	.+544    	; 0x55e <main+0x348>
		{
			if(current==0)
 33e:	80 91 ad 01 	lds	r24, 0x01AD
 342:	88 23       	and	r24, r24
 344:	11 f5       	brne	.+68     	; 0x38a <main+0x174>
			{
				subprog();
 346:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				while(1)
				{
					PORTA=0X00;						//ALL LED'S OFF
 34a:	eb e3       	ldi	r30, 0x3B	; 59
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	24 e2       	ldi	r18, 0x24	; 36
 350:	34 ef       	ldi	r19, 0xF4	; 244
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					PORTA=0xF0;						//ALL LED'S ON
 352:	40 ef       	ldi	r20, 0xF0	; 240
			if(current==0)
			{
				subprog();
				while(1)
				{
					PORTA=0X00;						//ALL LED'S OFF
 354:	10 82       	st	Z, r1
 356:	c9 01       	movw	r24, r18
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x142>
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					PORTA=0xF0;						//ALL LED'S ON
 35c:	c9 01       	movw	r24, r18
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0x148>
 362:	c9 01       	movw	r24, r18
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x14e>
 368:	c9 01       	movw	r24, r18
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x154>
 36e:	40 83       	st	Z, r20
 370:	c9 01       	movw	r24, r18
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x15c>
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
					_delay_ms(250);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
				}			
			}
			else if(current==1)
 376:	c9 01       	movw	r24, r18
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x162>
 37c:	c9 01       	movw	r24, r18
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x168>
 382:	c9 01       	movw	r24, r18
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x16e>
 388:	e5 cf       	rjmp	.-54     	; 0x354 <main+0x13e>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	11 f5       	brne	.+68     	; 0x3d2 <main+0x1bc>
			{
				subprog();
 38e:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				sbi(PORTC,0);					//MOTOR1 forward
 392:	a8 9a       	sbi	0x15, 0	; 21
				sbi(PORTC,3);					//MOTOR2 reverse	
 394:	ab 9a       	sbi	0x15, 3	; 21
		
				TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0) | _BV(COM1B1) | _BV(COM1B0);    	// enable 8 bit PWM, select inverted PWM
 396:	81 ef       	ldi	r24, 0xF1	; 241
 398:	8f bd       	out	0x2f, r24	; 47
					
				// timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
				// PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
				TCCR1B = _BV(CS11) | _BV(WGM12);
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	8e bd       	out	0x2e, r24	; 46
 39e:	20 e0       	ldi	r18, 0x00	; 0
			 
				for (;;)
				{   
					for (i=0; i<150; i++)								/* Decrease speed of motor */
					{
						OCR1AL = i;
 3a0:	aa e4       	ldi	r26, 0x4A	; 74
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
						OCR1BL = i;
 3a4:	e8 e4       	ldi	r30, 0x48	; 72
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	4a e6       	ldi	r20, 0x6A	; 106
 3aa:	58 e1       	ldi	r21, 0x18	; 24
				// PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
				TCCR1B = _BV(CS11) | _BV(WGM12);
			 
				for (;;)
				{   
					for (i=0; i<150; i++)								/* Decrease speed of motor */
 3ac:	36 e9       	ldi	r19, 0x96	; 150
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <main+0x1a6>
					{
						OCR1AL = i;
 3b0:	2c 93       	st	X, r18
						OCR1BL = i;
 3b2:	20 83       	st	Z, r18
 3b4:	ca 01       	movw	r24, r20
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x1a0>
				// PWM frequency will be MCU clock / 8 / 512, e.g. with 1Mhz Crystal 244 Hz.
				TCCR1B = _BV(CS11) | _BV(WGM12);
			 
				for (;;)
				{   
					for (i=0; i<150; i++)								/* Decrease speed of motor */
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	26 39       	cpi	r18, 0x96	; 150
 3be:	c0 f3       	brcs	.-16     	; 0x3b0 <main+0x19a>
 3c0:	23 2f       	mov	r18, r19
						_delay_ms(25);									// delay 25 ms
					}
					
					for( i=150; i>0; i--)								/* Increase speed of motor */
					{
						OCR1AL = i;            
 3c2:	2c 93       	st	X, r18
						OCR1BL = i;
 3c4:	20 83       	st	Z, r18
 3c6:	ca 01       	movw	r24, r20
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x1b2>
						OCR1AL = i;
						OCR1BL = i;
						_delay_ms(25);									// delay 25 ms
					}
					
					for( i=150; i>0; i--)								/* Increase speed of motor */
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <main+0x1ac>
 3d0:	f5 cf       	rjmp	.-22     	; 0x3bc <main+0x1a6>
						OCR1BL = i;
						_delay_ms(25);									// delay 25 ms
					}
				}			
			}
			else if(current==2)
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	69 f5       	brne	.+90     	; 0x430 <main+0x21a>
			{
				subprog();
 3d6:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU)); 
 3da:	8c e0       	ldi	r24, 0x0C	; 12
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 4c 04 	call	0x898	; 0x898 <uart_init>
				uart_puts_P("\r\n\nSample code made by Robokits India for ROBOGRID. ");
 3e2:	80 eb       	ldi	r24, 0xB0	; 176
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_puts_p>
				uart_puts_P("\r\n\nVisit Us at www.robokits.org. ");
 3ea:	8e e8       	ldi	r24, 0x8E	; 142
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_puts_p>
				uart_puts_P("\r\n\nWriting number to UART: ");
 3f2:	82 e7       	ldi	r24, 0x72	; 114
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_puts_p>
			 
				itoa( num, buffer, 10);   // convert interger into string (decimal format)    
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	8e 01       	movw	r16, r28
 400:	0f 5f       	subi	r16, 0xFF	; 255
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	b8 01       	movw	r22, r16
 406:	86 e8       	ldi	r24, 0x86	; 134
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <itoa>
				uart_puts(buffer);        // and transmit string to UART     
 40e:	c8 01       	movw	r24, r16
 410:	0e 94 90 04 	call	0x920	; 0x920 <uart_puts>
			
				uart_putc('\r');				
 414:	8d e0       	ldi	r24, 0x0D	; 13
 416:	0e 94 7e 04 	call	0x8fc	; 0x8fc <uart_putc>
				uart_puts_P("\n\nPress any key on keyboard: ");
 41a:	84 e5       	ldi	r24, 0x54	; 84
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_puts_p>
				
				for(;;)
				{
					c = uart_getc();
 422:	0e 94 63 04 	call	0x8c6	; 0x8c6 <uart_getc>
					if (!(c & UART_NO_DATA))
 426:	90 fd       	sbrc	r25, 0
 428:	fc cf       	rjmp	.-8      	; 0x422 <main+0x20c>
						uart_putc( (unsigned char)c );
 42a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <uart_putc>
 42e:	f9 cf       	rjmp	.-14     	; 0x422 <main+0x20c>
				}			
			}
			else if(current==3)
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	49 f5       	brne	.+82     	; 0x486 <main+0x270>
			{
				subprog();
 434:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				sbi(PORTA,4);
 438:	dc 9a       	sbi	0x1b, 4	; 27
				TCCR1A = 0x00;               	// disable PWM and Compare Output Mode
 43a:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = TMC16_CK1024;       	// use CLK/1024 prescale value
 43c:	85 e0       	ldi	r24, 0x05	; 5
 43e:	8e bd       	out	0x2e, r24	; 46
				TCNT1  = TIMER_1_CNT;        	// reset TCNT1
 440:	8e e2       	ldi	r24, 0x2E	; 46
 442:	9c ef       	ldi	r25, 0xFC	; 252
 444:	9d bd       	out	0x2d, r25	; 45
 446:	8c bd       	out	0x2c, r24	; 44
				
				TIMSK  = _BV(TOIE1);         	// enable TCNT1 overflow 
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	89 bf       	out	0x39, r24	; 57
				
				sei();                       	// enable interrupts 
 44c:	78 94       	sei
				
				for (;;) 						// loop forever
				{                      
					if (bit_is_clear(PINA, 5))	//BLINK LED2 WITH NORMAL DELAY
 44e:	a9 e3       	ldi	r26, 0x39	; 57
 450:	b0 e0       	ldi	r27, 0x00	; 0
						sbi(PORTA,5);			//LED2 ON
					else						//ELSE
						cbi(PORTA,5);			//LED2 OFF
 452:	eb e3       	ldi	r30, 0x3B	; 59
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	24 e2       	ldi	r18, 0x24	; 36
 458:	34 ef       	ldi	r19, 0xF4	; 244
				
				sei();                       	// enable interrupts 
				
				for (;;) 						// loop forever
				{                      
					if (bit_is_clear(PINA, 5))	//BLINK LED2 WITH NORMAL DELAY
 45a:	8c 91       	ld	r24, X
 45c:	85 fd       	sbrc	r24, 5
 45e:	03 c0       	rjmp	.+6      	; 0x466 <main+0x250>
						sbi(PORTA,5);			//LED2 ON
 460:	80 81       	ld	r24, Z
 462:	80 62       	ori	r24, 0x20	; 32
 464:	02 c0       	rjmp	.+4      	; 0x46a <main+0x254>
					else						//ELSE
						cbi(PORTA,5);			//LED2 OFF
 466:	80 81       	ld	r24, Z
 468:	8f 7d       	andi	r24, 0xDF	; 223
 46a:	80 83       	st	Z, r24
 46c:	c9 01       	movw	r24, r18
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0x258>
					_delay_ms(250);	
					_delay_ms(250);	
					_delay_ms(250);	
				}			
			}
			else if(current==4)
 472:	c9 01       	movw	r24, r18
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <main+0x25e>
 478:	c9 01       	movw	r24, r18
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <main+0x264>
 47e:	c9 01       	movw	r24, r18
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x26a>
 484:	ea cf       	rjmp	.-44     	; 0x45a <main+0x244>
 486:	84 30       	cpi	r24, 0x04	; 4
 488:	c1 f4       	brne	.+48     	; 0x4ba <main+0x2a4>
			{
				subprog();
 48a:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				sbi(PORTA,4);
 48e:	dc 9a       	sbi	0x1b, 4	; 27
				for (;;)								/* loop forever */ 
				{                           
					sbi(PORTA,5);
 490:	ab e3       	ldi	r26, 0x3B	; 59
 492:	b0 e0       	ldi	r27, 0x00	; 0
{
    unsigned char temp1, temp2;
    unsigned int i,j;
    
    do {
        temp1 = PIND;                  		// read input
 494:	e0 e3       	ldi	r30, 0x30	; 48
 496:	f0 e0       	ldi	r31, 0x00	; 0
			{
				subprog();
				sbi(PORTA,4);
				for (;;)								/* loop forever */ 
				{                           
					sbi(PORTA,5);
 498:	8c 91       	ld	r24, X
 49a:	80 62       	ori	r24, 0x20	; 32
 49c:	8c 93       	st	X, r24
{
    unsigned char temp1, temp2;
    unsigned int i,j;
    
    do {
        temp1 = PIND;                  		// read input
 49e:	90 81       	ld	r25, Z
        for(i=0;i<65535;i++)
			for(j=0;j<50;j++);
        temp2 = PIND;                  		// read input
 4a0:	80 81       	ld	r24, Z
        temp1 = (temp1 & temp2);       		// debounce input
    } while ( temp1 & _BV(PIND1) );
 4a2:	89 23       	and	r24, r25
 4a4:	81 fd       	sbrc	r24, 1
 4a6:	fb cf       	rjmp	.-10     	; 0x49e <main+0x288>
				sbi(PORTA,4);
				for (;;)								/* loop forever */ 
				{                           
					sbi(PORTA,5);
					wait_debounce();				/* wait until push button sw1 is pressed */
					cbi(PORTA,5);
 4a8:	8c 91       	ld	r24, X
 4aa:	8f 7d       	andi	r24, 0xDF	; 223
 4ac:	8c 93       	st	X, r24
{
    unsigned char temp1, temp2;
    unsigned int i,j;
    
    do {
        temp1 = PIND;                  		// read input
 4ae:	90 81       	ld	r25, Z
        for(i=0;i<65535;i++)
			for(j=0;j<50;j++);
        temp2 = PIND;                  		// read input
 4b0:	80 81       	ld	r24, Z
        temp1 = (temp1 & temp2);       		// debounce input
    } while ( temp1 & _BV(PIND1) );
 4b2:	89 23       	and	r24, r25
 4b4:	81 fd       	sbrc	r24, 1
 4b6:	fb cf       	rjmp	.-10     	; 0x4ae <main+0x298>
 4b8:	ef cf       	rjmp	.-34     	; 0x498 <main+0x282>
					wait_debounce();				/* wait until push button sw1 is pressed */
					cbi(PORTA,5);
					wait_debounce();				/* wait until push button sw1 is pressed */
				}				
			}
			else if(current==5)
 4ba:	85 30       	cpi	r24, 0x05	; 5
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <main+0x2aa>
 4be:	3a cf       	rjmp	.-396    	; 0x334 <main+0x11e>
			{
				subprog();
 4c0:	0e 94 af 00 	call	0x15e	; 0x15e <subprog>
				sbi(PORTD,4);								//Enable on
 4c4:	94 9a       	sbi	0x12, 4	; 18
				sbi(PORTD,5);								//Enable on
 4c6:	95 9a       	sbi	0x12, 5	; 18
				while(1)
				{
					mainloop:
					if (bit_is_clear(PINB,2))				//IF SW1 IS PRESSED STEPPER1 FORWARD
 4c8:	66 e3       	ldi	r22, 0x36	; 54
 4ca:	70 e0       	ldi	r23, 0x00	; 0
					{
						while(1)
						{
							PORTC=0x01;						//COIL1 +
 4cc:	e5 e3       	ldi	r30, 0x35	; 53
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	cc 24       	eor	r12, r12
 4d2:	c3 94       	inc	r12
 4d4:	dd 24       	eor	r13, r13
 4d6:	d3 94       	inc	r13
 4d8:	22 ee       	ldi	r18, 0xE2	; 226
 4da:	34 e0       	ldi	r19, 0x04	; 4
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x02;						//COIL2 +
 4dc:	02 e0       	ldi	r16, 0x02	; 2
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x04;						//COIL1 -
 4de:	14 e0       	ldi	r17, 0x04	; 4
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x08;						//COIL2 -
 4e0:	48 e0       	ldi	r20, 0x08	; 8
 4e2:	e4 2e       	mov	r14, r20
					mainloop:
					if (bit_is_clear(PINB,2))				//IF SW1 IS PRESSED STEPPER1 FORWARD
					{
						while(1)
						{
							PORTC=0x01;						//COIL1 +
 4e4:	45 e3       	ldi	r20, 0x35	; 53
 4e6:	50 e0       	ldi	r21, 0x00	; 0
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x02;						//COIL2 +
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x04;						//COIL1 -
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x08;						//COIL2 -
 4e8:	98 e0       	ldi	r25, 0x08	; 8
 4ea:	f9 2e       	mov	r15, r25
								PORTC=0x00;					//CLEAR PORTC				
								goto mainloop;				//IF NOT GOTO MAINLOOP
							}
						}
					}
					else if (bit_is_clear(PIND,1))			//IF SW2 IS PRESSED STEPPER1 BACKWARD
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	a8 2e       	mov	r10, r24
 4f0:	b1 2c       	mov	r11, r1
				sbi(PORTD,4);								//Enable on
				sbi(PORTD,5);								//Enable on
				while(1)
				{
					mainloop:
					if (bit_is_clear(PINB,2))				//IF SW1 IS PRESSED STEPPER1 FORWARD
 4f2:	db 01       	movw	r26, r22
 4f4:	8c 91       	ld	r24, X
 4f6:	82 fd       	sbrc	r24, 2
 4f8:	15 c0       	rjmp	.+42     	; 0x524 <main+0x30e>
					{
						while(1)
						{
							PORTC=0x01;						//COIL1 +
 4fa:	d0 82       	st	Z, r13
 4fc:	c9 01       	movw	r24, r18
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <main+0x2e8>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x02;						//COIL2 +
 502:	00 83       	st	Z, r16
 504:	c9 01       	movw	r24, r18
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <main+0x2f0>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x04;						//COIL1 -
 50a:	10 83       	st	Z, r17
 50c:	c9 01       	movw	r24, r18
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <main+0x2f8>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x08;						//COIL2 -
 512:	e0 82       	st	Z, r14
 514:	c9 01       	movw	r24, r18
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <main+0x300>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							if (bit_is_set(PINB,2))		//CHECK WHETHER THE SWITCH IS STILL PRESSED
 51a:	db 01       	movw	r26, r22
 51c:	8c 91       	ld	r24, X
 51e:	82 ff       	sbrs	r24, 2
 520:	ec cf       	rjmp	.-40     	; 0x4fa <main+0x2e4>
 522:	18 c0       	rjmp	.+48     	; 0x554 <main+0x33e>
								PORTC=0x00;					//CLEAR PORTC				
								goto mainloop;				//IF NOT GOTO MAINLOOP
							}
						}
					}
					else if (bit_is_clear(PIND,1))			//IF SW2 IS PRESSED STEPPER1 BACKWARD
 524:	d5 01       	movw	r26, r10
 526:	8c 91       	ld	r24, X
 528:	81 fd       	sbrc	r24, 1
 52a:	17 c0       	rjmp	.+46     	; 0x55a <main+0x344>
					{
						while(1)
						{
							PORTC=0x08;						//COIL1 +
 52c:	f0 82       	st	Z, r15
 52e:	c9 01       	movw	r24, r18
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <main+0x31a>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x04;						//COIL2 -
 534:	10 83       	st	Z, r17
 536:	c9 01       	movw	r24, r18
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <main+0x322>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x02;						//COIL1 -
 53c:	00 83       	st	Z, r16
 53e:	c9 01       	movw	r24, r18
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <main+0x32a>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							PORTC=0x01;						//COIL2 +
 544:	c0 82       	st	Z, r12
 546:	c9 01       	movw	r24, r18
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <main+0x332>
							_delay_ms(5);					//DELAY IN MILISECOND ARGUMENT SHOULD NOT BE MORE THAN 255
							if (bit_is_set(PIND,1))
 54c:	d5 01       	movw	r26, r10
 54e:	8c 91       	ld	r24, X
 550:	81 ff       	sbrs	r24, 1
 552:	ec cf       	rjmp	.-40     	; 0x52c <main+0x316>
							{
								PORTC=0x00;					//CLEAR PORTC			
 554:	da 01       	movw	r26, r20
 556:	1c 92       	st	X, r1
 558:	cc cf       	rjmp	.-104    	; 0x4f2 <main+0x2dc>
								goto mainloop;				//IF NOT GOTO MAINLOOP
							}
						}		
					}
					else
						PORTC=0x00;
 55a:	10 82       	st	Z, r1
 55c:	ca cf       	rjmp	.-108    	; 0x4f2 <main+0x2dc>
				}			
			}	
		}
		else if(bit_is_clear(PIND,1))
 55e:	f6 01       	movw	r30, r12
 560:	80 81       	ld	r24, Z
 562:	81 fd       	sbrc	r24, 1
 564:	0a c0       	rjmp	.+20     	; 0x57a <main+0x364>
		{
			if(current==0)
 566:	80 91 ad 01 	lds	r24, 0x01AD
 56a:	88 23       	and	r24, r24
 56c:	21 f4       	brne	.+8      	; 0x576 <main+0x360>
				current=5;
 56e:	f5 e0       	ldi	r31, 0x05	; 5
 570:	f0 93 ad 01 	sts	0x01AD, r31
 574:	10 c0       	rjmp	.+32     	; 0x596 <main+0x380>
			else
				current--;
 576:	81 50       	subi	r24, 0x01	; 1
 578:	0c c0       	rjmp	.+24     	; 0x592 <main+0x37c>
			menu();
			_delay_ms(250);
			_delay_ms(250);
		}
		else if(bit_is_clear(PIND,2))
 57a:	d6 01       	movw	r26, r12
 57c:	8c 91       	ld	r24, X
 57e:	82 fd       	sbrc	r24, 2
 580:	13 c0       	rjmp	.+38     	; 0x5a8 <main+0x392>
		{
			if(current==5)
 582:	80 91 ad 01 	lds	r24, 0x01AD
 586:	85 30       	cpi	r24, 0x05	; 5
 588:	19 f4       	brne	.+6      	; 0x590 <main+0x37a>
				current=0;
 58a:	10 92 ad 01 	sts	0x01AD, r1
 58e:	03 c0       	rjmp	.+6      	; 0x596 <main+0x380>
			else
				current++;
 590:	8f 5f       	subi	r24, 0xFF	; 255
 592:	80 93 ad 01 	sts	0x01AD, r24
			menu();
 596:	0e 94 dd 00 	call	0x1ba	; 0x1ba <menu>
 59a:	c7 01       	movw	r24, r14
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <main+0x386>
			_delay_ms(250);
			_delay_ms(250);
		}		
		else
		{
			PORTA=0;	
 5a0:	c7 01       	movw	r24, r14
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0x38c>
 5a6:	c6 ce       	rjmp	.-628    	; 0x334 <main+0x11e>
 5a8:	eb e3       	ldi	r30, 0x3B	; 59
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	10 82       	st	Z, r1
			cbi(PORTC,0);				
 5ae:	d8 01       	movw	r26, r16
 5b0:	8c 91       	ld	r24, X
 5b2:	8e 7f       	andi	r24, 0xFE	; 254
 5b4:	8c 93       	st	X, r24
			cbi(PORTC,3);	
 5b6:	8c 91       	ld	r24, X
 5b8:	87 7f       	andi	r24, 0xF7	; 247
 5ba:	8c 93       	st	X, r24
			TCCR1A=0;
 5bc:	f1 01       	movw	r30, r2
 5be:	10 82       	st	Z, r1
			TCCR1B=0;
 5c0:	d2 01       	movw	r26, r4
 5c2:	1c 92       	st	X, r1
			TCNT1=0;
 5c4:	f3 01       	movw	r30, r6
 5c6:	11 82       	std	Z+1, r1	; 0x01
 5c8:	10 82       	st	Z, r1
			OCR1AL=0;
 5ca:	d4 01       	movw	r26, r8
 5cc:	1c 92       	st	X, r1
			OCR1BL=0;
 5ce:	f5 01       	movw	r30, r10
 5d0:	10 82       	st	Z, r1
			PORTC=0;
 5d2:	d8 01       	movw	r26, r16
 5d4:	1c 92       	st	X, r1
 5d6:	ae ce       	rjmp	.-676    	; 0x334 <main+0x11e>

000005d8 <__vector_2>:
        temp1 = (temp1 & temp2);       		// debounce input
    } while ( temp1 & _BV(PIND1) );
}

SIGNAL(SIG_INTERRUPT1)     /* signal handler for external interrupt int0 */
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	menu();
 5fa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <menu>
	longjmp (env, 1);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	8e ea       	ldi	r24, 0xAE	; 174
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 cb 04 	call	0x996	; 0x996 <longjmp>

0000060a <toggle_e>:
 60a:	c3 9a       	sbi	0x18, 3	; 24
 60c:	00 c0       	rjmp	.+0      	; 0x60e <toggle_e+0x4>
 60e:	c3 98       	cbi	0x18, 3	; 24
 610:	08 95       	ret

00000612 <lcd_write>:
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	66 23       	and	r22, r22
 618:	11 f0       	breq	.+4      	; 0x61e <lcd_write+0xc>
 61a:	c0 9a       	sbi	0x18, 0	; 24
 61c:	01 c0       	rjmp	.+2      	; 0x620 <lcd_write+0xe>
 61e:	c0 98       	cbi	0x18, 0	; 24
 620:	c1 98       	cbi	0x18, 1	; 24
 622:	bc 9a       	sbi	0x17, 4	; 23
 624:	bd 9a       	sbi	0x17, 5	; 23
 626:	be 9a       	sbi	0x17, 6	; 23
 628:	bf 9a       	sbi	0x17, 7	; 23
 62a:	c7 98       	cbi	0x18, 7	; 24
 62c:	c6 98       	cbi	0x18, 6	; 24
 62e:	c5 98       	cbi	0x18, 5	; 24
 630:	c4 98       	cbi	0x18, 4	; 24
 632:	87 fd       	sbrc	r24, 7
 634:	c7 9a       	sbi	0x18, 7	; 24
 636:	c8 2f       	mov	r28, r24
 638:	dd 27       	eor	r29, r29
 63a:	c6 fd       	sbrc	r28, 6
 63c:	c6 9a       	sbi	0x18, 6	; 24
 63e:	c5 fd       	sbrc	r28, 5
 640:	c5 9a       	sbi	0x18, 5	; 24
 642:	c4 fd       	sbrc	r28, 4
 644:	c4 9a       	sbi	0x18, 4	; 24
 646:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 64a:	c7 98       	cbi	0x18, 7	; 24
 64c:	c6 98       	cbi	0x18, 6	; 24
 64e:	c5 98       	cbi	0x18, 5	; 24
 650:	c4 98       	cbi	0x18, 4	; 24
 652:	c3 fd       	sbrc	r28, 3
 654:	c7 9a       	sbi	0x18, 7	; 24
 656:	c2 fd       	sbrc	r28, 2
 658:	c6 9a       	sbi	0x18, 6	; 24
 65a:	c1 fd       	sbrc	r28, 1
 65c:	c5 9a       	sbi	0x18, 5	; 24
 65e:	c0 fd       	sbrc	r28, 0
 660:	c4 9a       	sbi	0x18, 4	; 24
 662:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 666:	c4 9a       	sbi	0x18, 4	; 24
 668:	c5 9a       	sbi	0x18, 5	; 24
 66a:	c6 9a       	sbi	0x18, 6	; 24
 66c:	c7 9a       	sbi	0x18, 7	; 24
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <lcd_read>:
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <lcd_read+0x8>
 678:	c0 9a       	sbi	0x18, 0	; 24
 67a:	01 c0       	rjmp	.+2      	; 0x67e <lcd_read+0xa>
 67c:	c0 98       	cbi	0x18, 0	; 24
 67e:	c1 9a       	sbi	0x18, 1	; 24
 680:	bc 98       	cbi	0x17, 4	; 23
 682:	bd 98       	cbi	0x17, 5	; 23
 684:	be 98       	cbi	0x17, 6	; 23
 686:	bf 98       	cbi	0x17, 7	; 23
 688:	c3 9a       	sbi	0x18, 3	; 24
 68a:	00 c0       	rjmp	.+0      	; 0x68c <lcd_read+0x18>
 68c:	b4 9b       	sbis	0x16, 4	; 22
 68e:	02 c0       	rjmp	.+4      	; 0x694 <lcd_read+0x20>
 690:	80 e1       	ldi	r24, 0x10	; 16
 692:	01 c0       	rjmp	.+2      	; 0x696 <lcd_read+0x22>
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	b5 99       	sbic	0x16, 5	; 22
 698:	80 62       	ori	r24, 0x20	; 32
 69a:	b6 99       	sbic	0x16, 6	; 22
 69c:	80 64       	ori	r24, 0x40	; 64
 69e:	b7 99       	sbic	0x16, 7	; 22
 6a0:	80 68       	ori	r24, 0x80	; 128
 6a2:	c3 98       	cbi	0x18, 3	; 24
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <lcd_read+0x32>
 6a6:	c3 9a       	sbi	0x18, 3	; 24
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <lcd_read+0x36>
 6aa:	b4 99       	sbic	0x16, 4	; 22
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	b5 99       	sbic	0x16, 5	; 22
 6b0:	82 60       	ori	r24, 0x02	; 2
 6b2:	b6 99       	sbic	0x16, 6	; 22
 6b4:	84 60       	ori	r24, 0x04	; 4
 6b6:	b7 99       	sbic	0x16, 7	; 22
 6b8:	88 60       	ori	r24, 0x08	; 8
 6ba:	c3 98       	cbi	0x18, 3	; 24
 6bc:	99 27       	eor	r25, r25
 6be:	08 95       	ret

000006c0 <lcd_waitbusy>:
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_read>
 6c6:	87 fd       	sbrc	r24, 7
 6c8:	fb cf       	rjmp	.-10     	; 0x6c0 <lcd_waitbusy>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <lcd_waitbusy+0xc>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 3a 03 	call	0x674	; 0x674 <lcd_read>
 6d2:	99 27       	eor	r25, r25
 6d4:	08 95       	ret

000006d6 <lcd_command>:
 6d6:	1f 93       	push	r17
 6d8:	18 2f       	mov	r17, r24
 6da:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_waitbusy>
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	81 2f       	mov	r24, r17
 6e2:	0e 94 09 03 	call	0x612	; 0x612 <lcd_write>
 6e6:	1f 91       	pop	r17
 6e8:	08 95       	ret

000006ea <lcd_data>:
 6ea:	1f 93       	push	r17
 6ec:	18 2f       	mov	r17, r24
 6ee:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_waitbusy>
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	81 2f       	mov	r24, r17
 6f6:	0e 94 09 03 	call	0x612	; 0x612 <lcd_write>
 6fa:	1f 91       	pop	r17
 6fc:	08 95       	ret

000006fe <lcd_gotoxy>:
 6fe:	66 23       	and	r22, r22
 700:	11 f4       	brne	.+4      	; 0x706 <lcd_gotoxy+0x8>
 702:	80 58       	subi	r24, 0x80	; 128
 704:	01 c0       	rjmp	.+2      	; 0x708 <lcd_gotoxy+0xa>
 706:	80 54       	subi	r24, 0x40	; 64
 708:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 70c:	08 95       	ret

0000070e <lcd_getxy>:
 70e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_waitbusy>
 712:	99 27       	eor	r25, r25
 714:	08 95       	ret

00000716 <lcd_clrscr>:
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 71c:	08 95       	ret

0000071e <lcd_home>:
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 724:	08 95       	ret

00000726 <lcd_putc>:
 726:	1f 93       	push	r17
 728:	18 2f       	mov	r17, r24
 72a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_waitbusy>
 72e:	1a 30       	cpi	r17, 0x0A	; 10
 730:	49 f4       	brne	.+18     	; 0x744 <lcd_putc+0x1e>
 732:	80 34       	cpi	r24, 0x40	; 64
 734:	10 f4       	brcc	.+4      	; 0x73a <lcd_putc+0x14>
 736:	80 e4       	ldi	r24, 0x40	; 64
 738:	01 c0       	rjmp	.+2      	; 0x73c <lcd_putc+0x16>
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	80 58       	subi	r24, 0x80	; 128
 73e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 742:	04 c0       	rjmp	.+8      	; 0x74c <lcd_putc+0x26>
 744:	61 e0       	ldi	r22, 0x01	; 1
 746:	81 2f       	mov	r24, r17
 748:	0e 94 09 03 	call	0x612	; 0x612 <lcd_write>
 74c:	1f 91       	pop	r17
 74e:	08 95       	ret

00000750 <lcd_puts>:
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
 756:	02 c0       	rjmp	.+4      	; 0x75c <lcd_puts+0xc>
 758:	0e 94 93 03 	call	0x726	; 0x726 <lcd_putc>
 75c:	89 91       	ld	r24, Y+
 75e:	88 23       	and	r24, r24
 760:	d9 f7       	brne	.-10     	; 0x758 <lcd_puts+0x8>
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <lcd_puts_p>:
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	ec 01       	movw	r28, r24
 76e:	02 c0       	rjmp	.+4      	; 0x774 <lcd_puts_p+0xc>
 770:	0e 94 93 03 	call	0x726	; 0x726 <lcd_putc>
 774:	fe 01       	movw	r30, r28
 776:	21 96       	adiw	r28, 0x01	; 1
 778:	84 91       	lpm	r24, Z+
 77a:	88 23       	and	r24, r24
 77c:	c9 f7       	brne	.-14     	; 0x770 <lcd_puts_p+0x8>
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <lcd_init>:
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	f8 2e       	mov	r15, r24
 78c:	b8 9a       	sbi	0x17, 0	; 23
 78e:	b9 9a       	sbi	0x17, 1	; 23
 790:	bb 9a       	sbi	0x17, 3	; 23
 792:	bc 9a       	sbi	0x17, 4	; 23
 794:	bd 9a       	sbi	0x17, 5	; 23
 796:	be 9a       	sbi	0x17, 6	; 23
 798:	bf 9a       	sbi	0x17, 7	; 23
 79a:	80 ea       	ldi	r24, 0xA0	; 160
 79c:	9f e0       	ldi	r25, 0x0F	; 15
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <lcd_init+0x1a>
 7a2:	c5 9a       	sbi	0x18, 5	; 24
 7a4:	c4 9a       	sbi	0x18, 4	; 24
 7a6:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 7aa:	80 ee       	ldi	r24, 0xE0	; 224
 7ac:	94 e0       	ldi	r25, 0x04	; 4
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <lcd_init+0x2a>
 7b2:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 7b6:	00 e1       	ldi	r16, 0x10	; 16
 7b8:	10 e0       	ldi	r17, 0x00	; 0
 7ba:	c8 01       	movw	r24, r16
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <lcd_init+0x38>
 7c0:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 7c4:	c8 01       	movw	r24, r16
 7c6:	01 97       	sbiw	r24, 0x01	; 1
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <lcd_init+0x42>
 7ca:	c4 98       	cbi	0x18, 4	; 24
 7cc:	0e 94 05 03 	call	0x60a	; 0x60a <toggle_e>
 7d0:	c8 01       	movw	r24, r16
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <lcd_init+0x4e>
 7d6:	88 e2       	ldi	r24, 0x28	; 40
 7d8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 7dc:	88 e0       	ldi	r24, 0x08	; 8
 7de:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 7e2:	0e 94 8b 03 	call	0x716	; 0x716 <lcd_clrscr>
 7e6:	86 e0       	ldi	r24, 0x06	; 6
 7e8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 7ec:	8f 2d       	mov	r24, r15
 7ee:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <lcd_command>
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	ff 90       	pop	r15
 7f8:	08 95       	ret

000007fa <__vector_11>:
 7fa:	1f 92       	push	r1
 7fc:	0f 92       	push	r0
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	0f 92       	push	r0
 802:	11 24       	eor	r1, r1
 804:	2f 93       	push	r18
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	ef 93       	push	r30
 80c:	ff 93       	push	r31
 80e:	9b b1       	in	r25, 0x0b	; 11
 810:	2c b1       	in	r18, 0x0c	; 12
 812:	e0 91 aa 01 	lds	r30, 0x01AA
 816:	ef 5f       	subi	r30, 0xFF	; 255
 818:	ef 71       	andi	r30, 0x1F	; 31
 81a:	80 91 ab 01 	lds	r24, 0x01AB
 81e:	e8 17       	cp	r30, r24
 820:	11 f4       	brne	.+4      	; 0x826 <__vector_11+0x2c>
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	08 c0       	rjmp	.+16     	; 0x836 <__vector_11+0x3c>
 826:	89 2f       	mov	r24, r25
 828:	88 71       	andi	r24, 0x18	; 24
 82a:	e0 93 aa 01 	sts	0x01AA, r30
 82e:	ff 27       	eor	r31, r31
 830:	e8 57       	subi	r30, 0x78	; 120
 832:	fe 4f       	sbci	r31, 0xFE	; 254
 834:	20 83       	st	Z, r18
 836:	80 93 ac 01 	sts	0x01AC, r24
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	2f 91       	pop	r18
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

0000084e <__vector_12>:
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
 860:	90 91 a8 01 	lds	r25, 0x01A8
 864:	80 91 a9 01 	lds	r24, 0x01A9
 868:	98 17       	cp	r25, r24
 86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
 86c:	e0 91 a9 01 	lds	r30, 0x01A9
 870:	ef 5f       	subi	r30, 0xFF	; 255
 872:	ef 71       	andi	r30, 0x1F	; 31
 874:	e0 93 a9 01 	sts	0x01A9, r30
 878:	ff 27       	eor	r31, r31
 87a:	e8 59       	subi	r30, 0x98	; 152
 87c:	fe 4f       	sbci	r31, 0xFE	; 254
 87e:	80 81       	ld	r24, Z
 880:	8c b9       	out	0x0c, r24	; 12
 882:	01 c0       	rjmp	.+2      	; 0x886 <__stack+0x27>
 884:	55 98       	cbi	0x0a, 5	; 10
 886:	ff 91       	pop	r31
 888:	ef 91       	pop	r30
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <uart_init>:
 898:	9c 01       	movw	r18, r24
 89a:	10 92 a8 01 	sts	0x01A8, r1
 89e:	10 92 a9 01 	sts	0x01A9, r1
 8a2:	10 92 aa 01 	sts	0x01AA, r1
 8a6:	10 92 ab 01 	sts	0x01AB, r1
 8aa:	97 ff       	sbrs	r25, 7
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <uart_init+0x1c>
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	8b b9       	out	0x0b, r24	; 11
 8b2:	3f 77       	andi	r19, 0x7F	; 127
 8b4:	83 2f       	mov	r24, r19
 8b6:	99 27       	eor	r25, r25
 8b8:	80 bd       	out	0x20, r24	; 32
 8ba:	29 b9       	out	0x09, r18	; 9
 8bc:	88 e9       	ldi	r24, 0x98	; 152
 8be:	8a b9       	out	0x0a, r24	; 10
 8c0:	86 e8       	ldi	r24, 0x86	; 134
 8c2:	80 bd       	out	0x20, r24	; 32
 8c4:	08 95       	ret

000008c6 <uart_getc>:
 8c6:	90 91 aa 01 	lds	r25, 0x01AA
 8ca:	80 91 ab 01 	lds	r24, 0x01AB
 8ce:	98 17       	cp	r25, r24
 8d0:	19 f4       	brne	.+6      	; 0x8d8 <uart_getc+0x12>
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	08 95       	ret
 8d8:	e0 91 ab 01 	lds	r30, 0x01AB
 8dc:	ef 5f       	subi	r30, 0xFF	; 255
 8de:	ef 71       	andi	r30, 0x1F	; 31
 8e0:	e0 93 ab 01 	sts	0x01AB, r30
 8e4:	ff 27       	eor	r31, r31
 8e6:	e8 57       	subi	r30, 0x78	; 120
 8e8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ea:	20 81       	ld	r18, Z
 8ec:	80 91 ac 01 	lds	r24, 0x01AC
 8f0:	99 27       	eor	r25, r25
 8f2:	98 2f       	mov	r25, r24
 8f4:	88 27       	eor	r24, r24
 8f6:	82 0f       	add	r24, r18
 8f8:	91 1d       	adc	r25, r1
 8fa:	08 95       	ret

000008fc <uart_putc>:
 8fc:	28 2f       	mov	r18, r24
 8fe:	90 91 a8 01 	lds	r25, 0x01A8
 902:	9f 5f       	subi	r25, 0xFF	; 255
 904:	9f 71       	andi	r25, 0x1F	; 31
 906:	80 91 a9 01 	lds	r24, 0x01A9
 90a:	98 17       	cp	r25, r24
 90c:	e1 f3       	breq	.-8      	; 0x906 <uart_putc+0xa>
 90e:	e9 2f       	mov	r30, r25
 910:	ff 27       	eor	r31, r31
 912:	e8 59       	subi	r30, 0x98	; 152
 914:	fe 4f       	sbci	r31, 0xFE	; 254
 916:	20 83       	st	Z, r18
 918:	90 93 a8 01 	sts	0x01A8, r25
 91c:	55 9a       	sbi	0x0a, 5	; 10
 91e:	08 95       	ret

00000920 <uart_puts>:
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	ec 01       	movw	r28, r24
 926:	03 c0       	rjmp	.+6      	; 0x92e <uart_puts+0xe>
 928:	21 96       	adiw	r28, 0x01	; 1
 92a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <uart_putc>
 92e:	88 81       	ld	r24, Y
 930:	88 23       	and	r24, r24
 932:	d1 f7       	brne	.-12     	; 0x928 <uart_puts+0x8>
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <uart_puts_p>:
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	ec 01       	movw	r28, r24
 940:	02 c0       	rjmp	.+4      	; 0x946 <uart_puts_p+0xc>
 942:	0e 94 7e 04 	call	0x8fc	; 0x8fc <uart_putc>
 946:	fe 01       	movw	r30, r28
 948:	21 96       	adiw	r28, 0x01	; 1
 94a:	84 91       	lpm	r24, Z+
 94c:	88 23       	and	r24, r24
 94e:	c9 f7       	brne	.-14     	; 0x942 <uart_puts_p+0x8>
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	08 95       	ret

00000956 <setjmp>:
 956:	dc 01       	movw	r26, r24
 958:	2d 92       	st	X+, r2
 95a:	3d 92       	st	X+, r3
 95c:	4d 92       	st	X+, r4
 95e:	5d 92       	st	X+, r5
 960:	6d 92       	st	X+, r6
 962:	7d 92       	st	X+, r7
 964:	8d 92       	st	X+, r8
 966:	9d 92       	st	X+, r9
 968:	ad 92       	st	X+, r10
 96a:	bd 92       	st	X+, r11
 96c:	cd 92       	st	X+, r12
 96e:	dd 92       	st	X+, r13
 970:	ed 92       	st	X+, r14
 972:	fd 92       	st	X+, r15
 974:	0d 93       	st	X+, r16
 976:	1d 93       	st	X+, r17
 978:	cd 93       	st	X+, r28
 97a:	dd 93       	st	X+, r29
 97c:	ff 91       	pop	r31
 97e:	ef 91       	pop	r30
 980:	8d b7       	in	r24, 0x3d	; 61
 982:	8d 93       	st	X+, r24
 984:	8e b7       	in	r24, 0x3e	; 62
 986:	8d 93       	st	X+, r24
 988:	8f b7       	in	r24, 0x3f	; 63
 98a:	8d 93       	st	X+, r24
 98c:	ed 93       	st	X+, r30
 98e:	fd 93       	st	X+, r31
 990:	88 27       	eor	r24, r24
 992:	99 27       	eor	r25, r25
 994:	09 94       	ijmp

00000996 <longjmp>:
 996:	dc 01       	movw	r26, r24
 998:	cb 01       	movw	r24, r22
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	91 05       	cpc	r25, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	2d 90       	ld	r2, X+
 9a2:	3d 90       	ld	r3, X+
 9a4:	4d 90       	ld	r4, X+
 9a6:	5d 90       	ld	r5, X+
 9a8:	6d 90       	ld	r6, X+
 9aa:	7d 90       	ld	r7, X+
 9ac:	8d 90       	ld	r8, X+
 9ae:	9d 90       	ld	r9, X+
 9b0:	ad 90       	ld	r10, X+
 9b2:	bd 90       	ld	r11, X+
 9b4:	cd 90       	ld	r12, X+
 9b6:	dd 90       	ld	r13, X+
 9b8:	ed 90       	ld	r14, X+
 9ba:	fd 90       	ld	r15, X+
 9bc:	0d 91       	ld	r16, X+
 9be:	1d 91       	ld	r17, X+
 9c0:	cd 91       	ld	r28, X+
 9c2:	dd 91       	ld	r29, X+
 9c4:	ed 91       	ld	r30, X+
 9c6:	fd 91       	ld	r31, X+
 9c8:	0d 90       	ld	r0, X+
 9ca:	f8 94       	cli
 9cc:	fe bf       	out	0x3e, r31	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	ed bf       	out	0x3d, r30	; 61
 9d2:	ed 91       	ld	r30, X+
 9d4:	fd 91       	ld	r31, X+
 9d6:	09 94       	ijmp

000009d8 <itoa>:
 9d8:	fb 01       	movw	r30, r22
 9da:	9f 01       	movw	r18, r30
 9dc:	e8 94       	clt
 9de:	42 30       	cpi	r20, 0x02	; 2
 9e0:	c4 f0       	brlt	.+48     	; 0xa12 <itoa+0x3a>
 9e2:	45 32       	cpi	r20, 0x25	; 37
 9e4:	b4 f4       	brge	.+44     	; 0xa12 <itoa+0x3a>
 9e6:	4a 30       	cpi	r20, 0x0A	; 10
 9e8:	29 f4       	brne	.+10     	; 0x9f4 <itoa+0x1c>
 9ea:	97 fb       	bst	r25, 7
 9ec:	1e f4       	brtc	.+6      	; 0x9f4 <itoa+0x1c>
 9ee:	90 95       	com	r25
 9f0:	81 95       	neg	r24
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	64 2f       	mov	r22, r20
 9f6:	77 27       	eor	r23, r23
 9f8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__udivmodhi4>
 9fc:	80 5d       	subi	r24, 0xD0	; 208
 9fe:	8a 33       	cpi	r24, 0x3A	; 58
 a00:	0c f0       	brlt	.+2      	; 0xa04 <itoa+0x2c>
 a02:	89 5d       	subi	r24, 0xD9	; 217
 a04:	81 93       	st	Z+, r24
 a06:	cb 01       	movw	r24, r22
 a08:	00 97       	sbiw	r24, 0x00	; 0
 a0a:	a1 f7       	brne	.-24     	; 0x9f4 <itoa+0x1c>
 a0c:	16 f4       	brtc	.+4      	; 0xa12 <itoa+0x3a>
 a0e:	5d e2       	ldi	r21, 0x2D	; 45
 a10:	51 93       	st	Z+, r21
 a12:	10 82       	st	Z, r1
 a14:	c9 01       	movw	r24, r18
 a16:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <strrev>

00000a1a <strrev>:
 a1a:	dc 01       	movw	r26, r24
 a1c:	fc 01       	movw	r30, r24
 a1e:	67 2f       	mov	r22, r23
 a20:	71 91       	ld	r23, Z+
 a22:	77 23       	and	r23, r23
 a24:	e1 f7       	brne	.-8      	; 0xa1e <strrev+0x4>
 a26:	32 97       	sbiw	r30, 0x02	; 2
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <strrev+0x18>
 a2a:	7c 91       	ld	r23, X
 a2c:	6d 93       	st	X+, r22
 a2e:	70 83       	st	Z, r23
 a30:	62 91       	ld	r22, -Z
 a32:	ae 17       	cp	r26, r30
 a34:	bf 07       	cpc	r27, r31
 a36:	c8 f3       	brcs	.-14     	; 0xa2a <strrev+0x10>
 a38:	08 95       	ret

00000a3a <__udivmodhi4>:
 a3a:	aa 1b       	sub	r26, r26
 a3c:	bb 1b       	sub	r27, r27
 a3e:	51 e1       	ldi	r21, 0x11	; 17
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <__udivmodhi4_ep>

00000a42 <__udivmodhi4_loop>:
 a42:	aa 1f       	adc	r26, r26
 a44:	bb 1f       	adc	r27, r27
 a46:	a6 17       	cp	r26, r22
 a48:	b7 07       	cpc	r27, r23
 a4a:	10 f0       	brcs	.+4      	; 0xa50 <__udivmodhi4_ep>
 a4c:	a6 1b       	sub	r26, r22
 a4e:	b7 0b       	sbc	r27, r23

00000a50 <__udivmodhi4_ep>:
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	5a 95       	dec	r21
 a56:	a9 f7       	brne	.-22     	; 0xa42 <__udivmodhi4_loop>
 a58:	80 95       	com	r24
 a5a:	90 95       	com	r25
 a5c:	bc 01       	movw	r22, r24
 a5e:	cd 01       	movw	r24, r26
 a60:	08 95       	ret

00000a62 <_exit>:
 a62:	f8 94       	cli

00000a64 <__stop_program>:
 a64:	ff cf       	rjmp	.-2      	; 0xa64 <__stop_program>
