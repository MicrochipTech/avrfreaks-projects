; .\main.SRC generated from: main.c
; COMPILER INVOKED BY:
;        D:\Keil\C51\BIN\C51.EXE main.c ROM(SMALL) BROWSE DEBUG OBJECTEXTEND SRC(.\main.SRC)

$NOMOD51

NAME	MAIN

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
IE	DATA	0A8H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
FL	BIT	0D0H.1
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
P3_5	BIT	0B0H.5
ES	BIT	0A8H.4
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
IP	DATA	0B8H
P3_7	BIT	0B0H.7
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
WR	BIT	0B0H.6
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
REN	BIT	098H.4
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?main?MAIN        SEGMENT CODE INBLOCK 
?PR?Init?MAIN        SEGMENT CODE INBLOCK 
?PR?GetInstruction?MAIN                  SEGMENT CODE INBLOCK 
?PR?SetInstruction?MAIN                  SEGMENT CODE INBLOCK 
?PR?_SPI_Byte?MAIN   SEGMENT CODE INBLOCK 
?DT?_SPI_Byte?MAIN   SEGMENT DATA OVERLAYABLE 
?PR?Delay?MAIN       SEGMENT CODE INBLOCK 
?CO?MAIN             SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?BI?MAIN             SEGMENT BIT 
?DT?MAIN             SEGMENT DATA 
	EXTRN	CODE (_putchar)
	EXTRN	CODE (_getkey)
	EXTRN	CODE (_printf)
	EXTRN	DATA (?_printf?BYTE)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	i
	PUBLIC	Delay
	PUBLIC	_SPI_Byte
	PUBLIC	SetInstruction
	PUBLIC	GetInstruction
	PUBLIC	Init
	PUBLIC	main

	RSEG  ?DT?_SPI_Byte?MAIN
?_SPI_Byte?BYTE:
        val?440:   DS   1
	ORG  1
       mask?441:   DS   1
        res?442:   DS   1

	RSEG  ?BI?MAIN
          fProg:   DBIT   1
           fRun:   DBIT   1

	RSEG  ?DT?MAIN
     ECHO_BYTES:   DS   4
    INSTRUCTION:   DS   4
              i:   DS   2

	RSEG  ?CO?MAIN
?SC_0:
	DB  '=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' 
	DB  '=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' 
	DB  '=' ,'=' ,'=' ,'=' ,'=' ,'=' ,'=' ,00AH,000H

?SC_29:
	DB  '-' ,'=' ,' ' ,'C' ,'Q' ,'-' ,'1' ,'0' ,'0' ,' ' 
	DB  'A' ,'V' ,'R' ,' ' ,'P' ,'R' ,'O' ,'G' ,'R' ,'A' 
	DB  'M' ,'M' ,'E' ,'R' ,' ' ,'=' ,'-' ,00AH,000H


	RSEG ?BI?MAIN

	RSEG  ?C_INITSEG
	DB	0C1H, fRun + 000H	; bit-init

	DB	0C1H, fProg + 000H	; bit-init

	DB	004H
	DB	INSTRUCTION
	DB	000H
	DB  000H,000H,000H


	DB	004H
	DB	ECHO_BYTES
	DB	000H
	DB  000H,000H,000H


	DB	002H
	DB	i
	DW	00000H

; 
; #include <AT89X51.H>
; 
; #include <stdio.h>                /* prototype declarations for I/O functions */
; 
; #undef	MONITOR51				  /* not using monitor debuger                */
; 
; #define		MISO		P0_0
; #define		MOSI		P0_1
; #define		SCK			P0_2
; #define		RESET		P0_3
; 
; #define		LED_RUN		P1_0
; #define		LED_PROG	P1_1
; 
; #define		HIGH		0xFF
; #define		LOW			0x00
; 
; #define		FRM_START	0x55
; #define		FRM_STOP	0xAA
; 
; #define		BYTE		char
; 
; // global variables
; 
; static bit fRun = 0;
; static bit fProg = 0;
; 
; static BYTE INSTRUCTION[4] = {0};
; static BYTE ECHO_BYTES[4] = {0};
; 
; int i = 0;
; 
; // functions prototype
; void	Init();
; void	Delay();
; BYTE	GetInstruction();
; void	SetInstruction();
; 
; // line controlling interface
; 
; BYTE	SPI_Byte(BYTE val);
; 
; ////////////////////////////////////////////////////////////////////////////////
; 
; void main()

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 46
; {
			; SOURCE LINE # 47
; 
; 	Init();
			; SOURCE LINE # 49
	ACALL	Init
?C0001:
; 	
;   	while (1) 
			; SOURCE LINE # 51
;   	{
			; SOURCE LINE # 52
; //		if (GetInstruction());
; 			SetInstruction();
			; SOURCE LINE # 54
	ACALL	SetInstruction
;   	}
			; SOURCE LINE # 55
	SJMP 	?C0001
; END OF main

; 
; }
; 
; /***********************************************************************************/
; 
; void	Init()

	RSEG  ?PR?Init?MAIN
Init:
	USING	0
			; SOURCE LINE # 61
; {
			; SOURCE LINE # 62
; /*------------------------------------------------
; Setup the serial port for 9600 baud at 11.0592MHz.
; ------------------------------------------------*/
; #ifndef MONITOR51
;     SCON  = 0x50;		        /* SCON: mode 1, 8-bit UART, enable rcvr      */
			; SOURCE LINE # 67
	MOV  	SCON,#050H
;     TMOD  = 0x20;               /* TMOD: timer 1, mode 2, 8-bit reload        */
			; SOURCE LINE # 68
	MOV  	TMOD,#020H
; 	TCON  = 0x41;				/* run counter 1 and set edge trig ints		  */
			; SOURCE LINE # 69
	MOV  	TCON,#041H
;     TH1   = 0xfd;               /* TH1:  reload value for 9600 baud @ 11MHz   */
			; SOURCE LINE # 70
	MOV  	TH1,#0FDH
; 	TL1   = 0xff;				/* TL1:  current value for 9600 baud  11MHz   */
			; SOURCE LINE # 71
	MOV  	TL1,#0FFH
;     TR1   = 1;                  /* TR1:  timer 1 run                          */
			; SOURCE LINE # 72
	SETB 	TR1
;     TI    = 1;                  /* TI:   set TI to send first char of UART    */
			; SOURCE LINE # 73
	SETB 	TI
; #endif
; 
; 	RESET = 0;
			; SOURCE LINE # 76
	CLR  	P0_3
; 	MOSI  = 0;
			; SOURCE LINE # 77
	CLR  	P0_1
; 	SCK   = 0;
			; SOURCE LINE # 78
	CLR  	P0_2
; 
; 	LED_RUN = 1;
			; SOURCE LINE # 80
	SETB 	P1_0
; 	LED_PROG = 0;
			; SOURCE LINE # 81
	CLR  	P1_1
; 
;    	printf("===========================\n");
			; SOURCE LINE # 83
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	ACALL	_printf
; 	printf("-= CQ-100 AVR PROGRAMMER =-\n");
			; SOURCE LINE # 84
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_29)
	MOV  	R1,#LOW (?SC_29)
	ACALL	_printf
;    	printf("===========================\n");
			; SOURCE LINE # 85
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	AJMP 	_printf
; END OF Init

; }
; 
; BYTE	GetInstruction()

	RSEG  ?PR?GetInstruction?MAIN
GetInstruction:
	USING	0
			; SOURCE LINE # 88
; {
			; SOURCE LINE # 89
; 	LED_PROG = 0;
			; SOURCE LINE # 90
	CLR  	P1_1
?C0005:
; 
; 	while (_getkey()!=0x55);
			; SOURCE LINE # 92
	ACALL	_getkey
	CJNE 	R7,#055H,?C0005
?C0006:
; 	for (i=0;i<4;i++)
			; SOURCE LINE # 93
	CLR  	A
	MOV  	i,A
	MOV  	i+01H,A
?C0007:
; 		INSTRUCTION[i] = _getkey();
			; SOURCE LINE # 94
	ACALL	_getkey
	MOV  	A,#LOW (INSTRUCTION)
	ADD  	A,i+01H
	MOV  	R0,A
	MOV  	@R0,AR7
	INC  	i+01H
	MOV  	A,i+01H
	JNZ  	?C0026
	INC  	i
?C0026:
	CLR  	C
	SUBB 	A,#04H
	MOV  	A,i
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0007
?C0008:
; 	if (_getkey()==0xAA)	return 1;
			; SOURCE LINE # 95
	ACALL	_getkey
	MOV  	A,R7
	RLC  	A
	SUBB 	A,ACC
	MOV  	R6,A
	MOV  	A,R7
	XRL  	A,#0AAH
	ORL  	A,R6
	JNZ  	?C0010
	MOV  	R7,#01H
	RET  	
?C0010:
; 	return 0;	// return with error
			; SOURCE LINE # 96
	MOV  	R7,#00H
; }
			; SOURCE LINE # 97
?C0011:
	RET  	
; END OF GetInstruction

; void	SetInstruction()

	RSEG  ?PR?SetInstruction?MAIN
SetInstruction:
	USING	0
			; SOURCE LINE # 98
; {
			; SOURCE LINE # 99
; 	LED_PROG = 1;
			; SOURCE LINE # 100
	SETB 	P1_1
; 
; 	for (i=0;i<4;i++)
			; SOURCE LINE # 102
	CLR  	A
	MOV  	i,A
	MOV  	i+01H,A
?C0012:
; 		ECHO_BYTES[i] = SPI_Byte(INSTRUCTION[i]);
			; SOURCE LINE # 103
	MOV  	A,#LOW (INSTRUCTION)
	ADD  	A,i+01H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	ACALL	_SPI_Byte
	MOV  	A,#LOW (ECHO_BYTES)
	ADD  	A,i+01H
	MOV  	R0,A
	MOV  	@R0,AR7
	INC  	i+01H
	MOV  	A,i+01H
	JNZ  	?C0027
	INC  	i
?C0027:
	CLR  	C
	SUBB 	A,#04H
	MOV  	A,i
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0012
?C0013:
; 	// send to host
; 	putchar(FRM_START);
			; SOURCE LINE # 105
	MOV  	R7,#055H
	ACALL	_putchar
; 	for (i=0;i<4;i++)
			; SOURCE LINE # 106
	CLR  	A
	MOV  	i,A
	MOV  	i+01H,A
?C0015:
; 		putchar(ECHO_BYTES[i]);
			; SOURCE LINE # 107
	MOV  	A,#LOW (ECHO_BYTES)
	ADD  	A,i+01H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	ACALL	_putchar
	INC  	i+01H
	MOV  	A,i+01H
	JNZ  	?C0028
	INC  	i
?C0028:
	CLR  	C
	SUBB 	A,#04H
	MOV  	A,i
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0015
?C0016:
; 	putchar(FRM_STOP);
			; SOURCE LINE # 108
	MOV  	R7,#0AAH
	AJMP 	_putchar
; END OF SetInstruction

; }
; 
; BYTE	SPI_Byte(BYTE val)

	RSEG  ?PR?_SPI_Byte?MAIN
_SPI_Byte:
	USING	0
			; SOURCE LINE # 111
	MOV  	val?440,R7
; {
			; SOURCE LINE # 112
; 	BYTE	mask = 0x01;
			; SOURCE LINE # 113
	MOV  	mask?441,#01H
; 	BYTE	res  = 0x00;
			; SOURCE LINE # 114
	CLR  	A
	MOV  	res?442,A
; 	for (i=0;i<8;i++)
			; SOURCE LINE # 115
	MOV  	i,A
	MOV  	i+01H,A
?C0019:
; 	{		
			; SOURCE LINE # 116
; 		MOSI = (val&mask)?1:0;
			; SOURCE LINE # 117
	MOV  	A,val?440
	ANL  	A,mask?441
	JZ   	?C0022
	SETB 	C
	SJMP 	?C0023
?C0022:
	CLR  	C
?C0023:
	MOV  	P0_1,C
; 		SCK  = 1;		
			; SOURCE LINE # 118
	SETB 	P0_2
; 		Delay();
			; SOURCE LINE # 119
	ACALL	Delay
; 		SCK  = 0;
			; SOURCE LINE # 120
	CLR  	P0_2
; 		res = res<<1;
			; SOURCE LINE # 121
	MOV  	A,res?442
	ADD  	A,ACC
	MOV  	res?442,A
; 		res |= MISO;
			; SOURCE LINE # 122
	MOV  	C,P0_0
	CLR  	A
	RLC  	A
	ORL  	res?442,A
; 		mask = mask<<1;
			; SOURCE LINE # 123
	MOV  	A,mask?441
	ADD  	A,ACC
	MOV  	mask?441,A
; 	}
			; SOURCE LINE # 124
	INC  	i+01H
	MOV  	A,i+01H
	JNZ  	?C0029
	INC  	i
?C0029:
	CLR  	C
	SUBB 	A,#08H
	MOV  	A,i
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0019
?C0020:
; 	return (BYTE)res;
			; SOURCE LINE # 125
	MOV  	R7,res?442
; }
			; SOURCE LINE # 126
?C0024:
	RET  	
; END OF _SPI_Byte

; 
; void	Delay()

	RSEG  ?PR?Delay?MAIN
Delay:
			; SOURCE LINE # 128
; {
			; SOURCE LINE # 129
; 
; }
			; SOURCE LINE # 131
	RET  	
; END OF Delay

	END
