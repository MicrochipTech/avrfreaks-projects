C51 COMPILER V7.03   MAIN                                                                  12/26/2004 22:10:43 PAGE 1   


C51 COMPILER V7.03, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c ROM(SMALL) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          
   2          #include <AT89X51.H>
   3          
   4          #undef  MONITOR51                                 /* not using monitor debuger                */
   5          
   6          #define         MOSI            P0_4
   7          #define         MISO            P0_5
   8          #define         SCK                     P0_6
   9          #define         RESET           P0_7
  10          
  11          #define         LED_RUN         P2_0
  12          #define         LED_PROG        P2_1
  13          
  14          #define         HIGH            0xFF
  15          #define         LOW                     0x00
  16          
  17          #define         FRM_START       0x55
  18          #define         FRM_STOP        0xAA
  19          
  20          #define         OK                      1
  21          #define         ERROR           0
  22          
  23          #define         CBR_57600       0x03            //      FF
  24          #define         CBR_28800       0x02            //      FE
  25          #define         CBR_19200       0x01            //  FC
  26          #define         CBR_9600        0x00            //  F9
  27          
  28          #define         BYTE            unsigned char
  29          
  30          // global variables
  31          static BYTE INSTRUCTION[4] = {0};
  32          static BYTE SIGNATURE[4] = {'$','c','q','$'};
  33          static BYTE AUTOBAUDRATE[4] = {'$','$','$','$'};
  34          // functions prototype
  35          void    AutoBaudrate();
  36          void    ResetDevice();
  37          BYTE    IsResetDevice();
  38          // communication functions
  39          void    InitComm(BYTE baud);
  40          BYTE    Receive();
  41          BYTE    Transmit(BYTE byte);
  42          
  43          BYTE    GetInstruction();
  44          void    SetInstruction();
  45          
  46          // line controlling interface
  47          
  48          BYTE    SPI_Byte(BYTE val);
  49          
  50          ////////////////////////////////////////////////////////////////////////////////
  51          
  52          void main()
  53          {
  54   1      
  55   1      //      AutoBaudrate();
C51 COMPILER V7.03   MAIN                                                                  12/26/2004 22:10:43 PAGE 2   

  56   1              InitComm(CBR_19200);
  57   1              ResetDevice();
  58   1              
  59   1              Transmit('C');
  60   1              Transmit('Q');
  61   1              Transmit('1');
  62   1              Transmit('0');
  63   1              Transmit('0');
  64   1              Transmit('\r');
  65   1              Transmit('\n');
  66   1      
  67   1              while (1) 
  68   1              {
  69   2                      if (GetInstruction()==OK)
  70   2                      {
  71   3                              if(IsResetDevice()==OK) ResetDevice();
  72   3                              else    SetInstruction();
  73   3                      }
  74   2              }
  75   1      
  76   1      }
  77          
  78          /***********************************************************************************/
  79          
  80          void InitComm(BYTE baud)
  81          {
  82   1              if (baud == CBR_57600)  
  83   1              { TH1   = 0xFF;   PCON  = 0x80;}
  84   1              if (baud == CBR_28800)
  85   1              { TH1   = 0xFD;   PCON  = 0x80;}
  86   1              if (baud == CBR_19200)
  87   1              { TH1   = 0xFD;   PCON  = 0x80;}
  88   1              if (baud == CBR_9600)
  89   1              { TH1   = 0xFD;   PCON  = 0x00;}
  90   1      
  91   1              SCON  = 0x50;                   /* SCON: mode 1, 8-bit UART, enable rcvr      */
  92   1          TMOD  = 0x20;               /* TMOD: timer 1, mode 1, 3 auto-reload       */
  93   1              TCON  = 0x41;                           /* run counter 1 and set edge trig ints           */            
  94   1      
  95   1              TL1   = 0xFF;                           /* TL1:  current value for 57600 baud  11MHz  */
  96   1          TR1   = 1;                  /* TR1:  timer 1 run                          */
  97   1          TI    = 1;                  /* TI:   set TI to send first char of UART    */
  98   1              EA        = 0;                                  /* Disable all interrupts                     */
  99   1      }
 100          
 101          void AutoBaudrate()
 102          {
 103   1              BYTE rate = CBR_57600 + 1;                      /* ************************/
 104   1              unsigned int i = 0;                                     /* index counter          */
 105   1              while (1)                                                       /**************************/
 106   1              {
 107   2                      BYTE recv = 0;LED_PROG = 1;
 108   2                      // reduce baudrate
 109   2                      rate = rate - 1;
 110   2                      InitComm(rate);
 111   2                      if (rate == CBR_9600) 
 112   2                              rate = CBR_57600 + 1;
 113   2                      for (i=0;i<20000;i++);
 114   2                      // send sync frame
 115   2                      Transmit(FRM_START);
 116   2                      for (i=0 ;i<4; i++)
 117   2                              Transmit(AUTOBAUDRATE[i]);
C51 COMPILER V7.03   MAIN                                                                  12/26/2004 22:10:43 PAGE 3   

 118   2                      Transmit(FRM_STOP);
 119   2                      for (i=0;i<20000;i++);
 120   2                      LED_PROG = 0; recv = 0;
 121   2                      // get sync charactor
 122   2                      for (i=0;i<50000;i++)
 123   2                      {
 124   3                              if (!RI){recv = SBUF; RI = 0;}
 125   3                              if (recv=='#') break;
 126   3                      }
 127   2                      if (i < 50000)  break;
 128   2              }
 129   1              // baudrate established
 130   1      
 131   1      }
 132          
 133          void ResetDevice()
 134          {
 135   1              BYTE i= 0;
 136   1              long l = 0;     
 137   1              LED_PROG = 0;
 138   1              RESET = 0;MOSI  = 0;
 139   1              SCK   = 0;MISO  = 1;    
 140   1      
 141   1              SCK   = 0;for(i = 0;i<255;i++);
 142   1              SCK   = 0;for(i = 0;i<255;i++);
 143   1      
 144   1              RESET = 1;for(l = 0; l < 50000; l++);
 145   1              RESET = 0;for(l = 0; l < 10000; l++);
 146   1      
 147   1              Transmit(FRM_START);
 148   1              for (i=0; i<4; i++)             
 149   1                      Transmit(SIGNATURE[i]);
 150   1                      
 151   1              Transmit(FRM_STOP);
 152   1      
 153   1              LED_RUN = 1;LED_PROG = 1;
 154   1      }
 155          
 156          BYTE GetInstruction()
 157          {
 158   1              BYTE i = 0;LED_PROG = 1;
 159   1      
 160   1              while (Receive()!=FRM_START);
 161   1              for (i=0;i<4;i++)
 162   1                      INSTRUCTION[i] = Receive();
 163   1              if (Receive()==FRM_STOP)        return OK;
 164   1              return ERROR;   // return with error
 165   1      }
 166          void SetInstruction()
 167          {
 168   1              BYTE i = 0;LED_PROG = 0;
 169   1      
 170   1              Transmit(FRM_START);
 171   1              for (i=0; i<4; i++)     
 172   1                      Transmit(SPI_Byte(INSTRUCTION[i]));     
 173   1              Transmit(FRM_STOP);
 174   1      }
 175          
 176          BYTE IsResetDevice()
 177          {
 178   1              BYTE i = 0;
 179   1              if (INSTRUCTION[0] == '?' &&
C51 COMPILER V7.03   MAIN                                                                  12/26/2004 22:10:43 PAGE 4   

 180   1                      INSTRUCTION[1] == '?' &&
 181   1                      INSTRUCTION[2] == '?' &&
 182   1                      INSTRUCTION[3] == '?' )
 183   1              {               
 184   2                      return OK;
 185   2              }
 186   1              return ERROR;
 187   1      }
 188          
 189          /*********************************************************************************
 190          /* SPI functions
 191          /*********************************************************************************/
 192          
 193          BYTE SPI_Byte(BYTE val)
 194          {
 195   1              BYTE    bit_mask = 0x00;
 196   1              BYTE    i=0,res  = 0x00;
 197   1      
 198   1              for (bit_mask = 128; bit_mask >0; bit_mask = (bit_mask>>1))
 199   1              {               
 200   2                      if (MISO)       res |= bit_mask;
 201   2      
 202   2                      MOSI = (val&bit_mask)?1:0;
 203   2                      for(i = 0;i<10;i++);            
 204   2                      SCK  = 1;for(i = 0;i<10;i++);
 205   2                      SCK  = 0;for(i = 0;i<10;i++);
 206   2              }
 207   1              return (BYTE)res;
 208   1      }
 209          
 210          /***********************************************************************************/
 211          
 212          BYTE Transmit(BYTE byte)  
 213          {       
 214   1              while (!TI);
 215   1              TI = 0;
 216   1              return (SBUF = byte);
 217   1      }
 218          
 219          BYTE Receive()  
 220          {
 221   1              BYTE byte;
 222   1              while (!RI);
 223   1              byte = SBUF;
 224   1              RI = 0;
 225   1              return (byte);
 226   1      }
 227          
 228          
 229          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    659    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
