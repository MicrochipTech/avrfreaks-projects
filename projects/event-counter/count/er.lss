
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d2  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008d2  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  00000966  2**0
                  ALLOC
  3 .noinit       00000000  00800073  00800073  00000966  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000966  2**0
                  CONTENTS
  5 .stab         00001440  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000b23  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	e9 c0       	rjmp	.+466    	; 0x1dc <__vector_4>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	cd c0       	rjmp	.+410    	; 0x1ae <__vector_9>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	32 c3       	rjmp	.+1636   	; 0x682 <__vector_14>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ed       	ldi	r30, 0xD2	; 210
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	01 c0       	rjmp	.+2      	; 0x5c <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <main>:

void timer_init(void);

int main(void)
{
  5c:	cd e5       	ldi	r28, 0x5D	; 93
  5e:	d4 e0       	ldi	r29, 0x04	; 4
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61
	timer_init();
  64:	8f d0       	rcall	.+286    	; 0x184 <timer_init>
	port_init();
  66:	c9 d3       	rcall	.+1938   	; 0x7fa <port_init>
	adc_init();
  68:	ff d2       	rcall	.+1534   	; 0x668 <adc_init>

	main_counter = 0;
  6a:	10 92 64 00 	sts	0x0064, r1
  6e:	10 92 63 00 	sts	0x0063, r1
	set_output(STOP);
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	d5 d3       	rcall	.+1962   	; 0x820 <set_output>
	
	//wd enabled + cca 0.5 sec wd interval
	wdt_enable(WDTO_500MS);		
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	2d e0       	ldi	r18, 0x0D	; 13
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	f8 94       	cli
  80:	a8 95       	wdr
  82:	81 bd       	out	0x21, r24	; 33
  84:	0f be       	out	0x3f, r0	; 63
  86:	21 bd       	out	0x21, r18	; 33

	sei();
  88:	78 94       	sei
	
	for(;;)
	{
		if (timer100ms >= 10)
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	8a 30       	cpi	r24, 0x0A	; 10
  90:	10 f0       	brcs	.+4      	; 0x96 <main+0x3a>
		{
			
			timer100ms = 0;
  92:	10 92 62 00 	sts	0x0062, r1
		}
		if (timer5ms >= 20) //called every 100ms
  96:	80 91 6c 00 	lds	r24, 0x006C
  9a:	84 31       	cpi	r24, 0x14	; 20
  9c:	98 f0       	brcs	.+38     	; 0xc4 <main+0x68>
		{
			int16_t main_counter_tmp;
			
			cli();
  9e:	f8 94       	cli
			main_counter_tmp = main_counter;
  a0:	80 91 63 00 	lds	r24, 0x0063
  a4:	90 91 64 00 	lds	r25, 0x0064
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	89 83       	std	Y+1, r24	; 0x01
			sei();
  ac:	78 94       	sei
			
			set_display(main_counter_tmp);	
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	9a 81       	ldd	r25, Y+2	; 0x02
  b2:	2a d1       	rcall	.+596    	; 0x308 <set_display>
						
			wdt_reset();
  b4:	a8 95       	wdr
			
			timer100ms++;
  b6:	80 91 62 00 	lds	r24, 0x0062
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 62 00 	sts	0x0062, r24
			timer5ms = 0;
  c0:	10 92 6c 00 	sts	0x006C, r1
		}
		
		if (timer1ms >= 5) //called every 5ms
  c4:	80 91 68 00 	lds	r24, 0x0068
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	48 f0       	brcs	.+18     	; 0xde <main+0x82>
		{
			check_buttons();
  cc:	15 d3       	rcall	.+1578   	; 0x6f8 <check_buttons>
			refresh_led();
  ce:	ee d1       	rcall	.+988    	; 0x4ac <refresh_led>
			
			timer5ms++;
  d0:	80 91 6c 00 	lds	r24, 0x006C
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 6c 00 	sts	0x006C, r24
			timer1ms = 0;
  da:	10 92 68 00 	sts	0x0068, r1
		}
																					
		cli();
  de:	f8 94       	cli
		if (timer256us >= 4) //called every 1ms
  e0:	80 91 65 00 	lds	r24, 0x0065
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	50 f0       	brcs	.+20     	; 0xfc <main+0xa0>
		{
			timer1ms++;
  e8:	80 91 68 00 	lds	r24, 0x0068
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 68 00 	sts	0x0068, r24
			timer256us -= 4;
  f2:	80 91 65 00 	lds	r24, 0x0065
  f6:	84 50       	subi	r24, 0x04	; 4
  f8:	80 93 65 00 	sts	0x0065, r24
		}
		sei();
  fc:	78 94       	sei
		
		//indication LEDs
		if ((clock & FILTER_MASK) == FILTER_MASK) PORTC &= ~_BV(CLOCK_OC);
  fe:	80 91 6d 00 	lds	r24, 0x006D
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	29 f4       	brne	.+10     	; 0x110 <main+0xb4>
 106:	80 91 35 00 	lds	r24, 0x0035
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 93 35 00 	sts	0x0035, r24
		if (clock == 0) PORTC |= _BV(CLOCK_OC);
 110:	80 91 6d 00 	lds	r24, 0x006D
 114:	88 23       	and	r24, r24
 116:	29 f4       	brne	.+10     	; 0x122 <main+0xc6>
 118:	80 91 35 00 	lds	r24, 0x0035
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	80 93 35 00 	sts	0x0035, r24
		if ((dir & FILTER_MASK) == FILTER_MASK) PORTC &= ~_BV(DIR_OC);
 122:	80 91 6b 00 	lds	r24, 0x006B
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	29 f4       	brne	.+10     	; 0x134 <main+0xd8>
 12a:	80 91 35 00 	lds	r24, 0x0035
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	80 93 35 00 	sts	0x0035, r24
		if (dir == 0) PORTC |= _BV(DIR_OC);
 134:	80 91 6b 00 	lds	r24, 0x006B
 138:	88 23       	and	r24, r24
 13a:	29 f4       	brne	.+10     	; 0x146 <main+0xea>
 13c:	80 91 35 00 	lds	r24, 0x0035
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 93 35 00 	sts	0x0035, r24
		
		//plausibility check
		if (main_counter > 9999) main_counter = -999;
 146:	80 91 63 00 	lds	r24, 0x0063
 14a:	90 91 64 00 	lds	r25, 0x0064
 14e:	27 e2       	ldi	r18, 0x27	; 39
 150:	80 31       	cpi	r24, 0x10	; 16
 152:	92 07       	cpc	r25, r18
 154:	3c f0       	brlt	.+14     	; 0x164 <main+0x108>
 156:	89 e1       	ldi	r24, 0x19	; 25
 158:	9c ef       	ldi	r25, 0xFC	; 252
 15a:	90 93 64 00 	sts	0x0064, r25
 15e:	80 93 63 00 	sts	0x0063, r24
 162:	93 cf       	rjmp	.-218    	; 0x8a <main+0x2e>
		else if (main_counter < -999) main_counter = 9999;
 164:	80 91 63 00 	lds	r24, 0x0063
 168:	90 91 64 00 	lds	r25, 0x0064
 16c:	2c ef       	ldi	r18, 0xFC	; 252
 16e:	89 31       	cpi	r24, 0x19	; 25
 170:	92 07       	cpc	r25, r18
 172:	0c f0       	brlt	.+2      	; 0x176 <main+0x11a>
 174:	8a cf       	rjmp	.-236    	; 0x8a <main+0x2e>
 176:	8f e0       	ldi	r24, 0x0F	; 15
 178:	97 e2       	ldi	r25, 0x27	; 39
 17a:	90 93 64 00 	sts	0x0064, r25
 17e:	80 93 63 00 	sts	0x0063, r24
 182:	83 cf       	rjmp	.-250    	; 0x8a <main+0x2e>

00000184 <timer_init>:
	
	}
	
	return(0);
	
}

void timer_init(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62

	TCCR0 = _BV(CS01); //(1/8e6)*8*256 = 256us - only general timer here
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 53 00 	sts	0x0053, r24
	TCCR2 = _BV(CS21); //it is the same value as Timer0, but is separatly configurable in a future - input filter
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 45 00 	sts	0x0045, r24
	
	TCNT2 = 0;	
 198:	10 92 44 00 	sts	0x0044, r1
	TCNT0 = 120; //to split effort
 19c:	88 e7       	ldi	r24, 0x78	; 120
 19e:	80 93 52 00 	sts	0x0052, r24
	
	TIMSK = _BV(TOIE0) | _BV(TOIE2); //enable interrupt
 1a2:	81 e4       	ldi	r24, 0x41	; 65
 1a4:	80 93 59 00 	sts	0x0059, r24
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_9>:
}

ISR(SIG_OVERFLOW0)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	//increases own value every 256us ( (1/8e6)*256*8)
	timer256us++;
 1c2:	80 91 65 00 	lds	r24, 0x0065
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 65 00 	sts	0x0065, r24
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_4>:
}

//check the input signals periodically (every 256us)
//filter them
//calculate number of rotation and direction
ISR(SIG_OVERFLOW2)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	clock = clock << 1;	
 206:	80 91 6d 00 	lds	r24, 0x006D
 20a:	88 0f       	add	r24, r24
 20c:	80 93 6d 00 	sts	0x006D, r24
	if (adc_clock > 200) clock++; //valid 1, add 1
 210:	80 91 6a 00 	lds	r24, 0x006A
 214:	89 3c       	cpi	r24, 0xC9	; 201
 216:	30 f0       	brcs	.+12     	; 0x224 <__vector_4+0x48>
 218:	80 91 6d 00 	lds	r24, 0x006D
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 6d 00 	sts	0x006D, r24
 222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_4+0x58>
	else if (adc_clock < 50) clock = clock; //valid 0, add 0
 224:	80 91 6a 00 	lds	r24, 0x006A
 228:	82 33       	cpi	r24, 0x32	; 50
 22a:	08 f4       	brcc	.+2      	; 0x22e <__vector_4+0x52>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <__vector_4+0x58>
	else clock = 2; //forbidden range, type poor value 0b10
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 6d 00 	sts	0x006D, r24
	
	dir = dir << 1;
 234:	80 91 6b 00 	lds	r24, 0x006B
 238:	88 0f       	add	r24, r24
 23a:	80 93 6b 00 	sts	0x006B, r24
	if (adc_dir > 200) dir++;
 23e:	80 91 67 00 	lds	r24, 0x0067
 242:	89 3c       	cpi	r24, 0xC9	; 201
 244:	30 f0       	brcs	.+12     	; 0x252 <__vector_4+0x76>
 246:	80 91 6b 00 	lds	r24, 0x006B
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 6b 00 	sts	0x006B, r24
 250:	08 c0       	rjmp	.+16     	; 0x262 <__vector_4+0x86>
	else if (adc_dir < 50) dir = dir;
 252:	80 91 67 00 	lds	r24, 0x0067
 256:	82 33       	cpi	r24, 0x32	; 50
 258:	08 f4       	brcc	.+2      	; 0x25c <__vector_4+0x80>
 25a:	03 c0       	rjmp	.+6      	; 0x262 <__vector_4+0x86>
	else adc_dir = 2;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	80 93 67 00 	sts	0x0067, r24
	
	//if last 8(?) values were the same, then we could take the averaged value as correct info
	if ( (dir == 0) || ((dir & FILTER_MASK ) == FILTER_MASK) ) //valid bits
 262:	80 91 6b 00 	lds	r24, 0x006B
 266:	88 23       	and	r24, r24
 268:	29 f0       	breq	.+10     	; 0x274 <__vector_4+0x98>
 26a:	80 91 6b 00 	lds	r24, 0x006B
 26e:	8f 3f       	cpi	r24, 0xFF	; 255
 270:	09 f0       	breq	.+2      	; 0x274 <__vector_4+0x98>
 272:	04 c0       	rjmp	.+8      	; 0x27c <__vector_4+0xa0>
	{
		dir_last = dir;
 274:	80 91 6b 00 	lds	r24, 0x006B
 278:	80 93 69 00 	sts	0x0069, r24
	}
	
	if ( (clock == 0) || ((clock & FILTER_MASK) == FILTER_MASK) )
 27c:	80 91 6d 00 	lds	r24, 0x006D
 280:	88 23       	and	r24, r24
 282:	29 f0       	breq	.+10     	; 0x28e <__vector_4+0xb2>
 284:	80 91 6d 00 	lds	r24, 0x006D
 288:	8f 3f       	cpi	r24, 0xFF	; 255
 28a:	09 f0       	breq	.+2      	; 0x28e <__vector_4+0xb2>
 28c:	21 c0       	rjmp	.+66     	; 0x2d0 <__vector_4+0xf4>
	{
		if ( clock_last > clock )
 28e:	90 91 66 00 	lds	r25, 0x0066
 292:	80 91 6d 00 	lds	r24, 0x006D
 296:	89 17       	cp	r24, r25
 298:	b8 f4       	brcc	.+46     	; 0x2c8 <__vector_4+0xec>
		{
			if (dir_last)
 29a:	80 91 69 00 	lds	r24, 0x0069
 29e:	88 23       	and	r24, r24
 2a0:	51 f0       	breq	.+20     	; 0x2b6 <__vector_4+0xda>
			{
				main_counter--; //if DIR LED is not connected, then is internally connected to log.1
 2a2:	80 91 63 00 	lds	r24, 0x0063
 2a6:	90 91 64 00 	lds	r25, 0x0064
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	90 93 64 00 	sts	0x0064, r25
 2b0:	80 93 63 00 	sts	0x0063, r24
 2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_4+0xec>
			}
			else
			{
				main_counter++;
 2b6:	80 91 63 00 	lds	r24, 0x0063
 2ba:	90 91 64 00 	lds	r25, 0x0064
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 64 00 	sts	0x0064, r25
 2c4:	80 93 63 00 	sts	0x0063, r24
			}
		}
		clock_last = clock;
 2c8:	80 91 6d 00 	lds	r24, 0x006D
 2cc:	80 93 66 00 	sts	0x0066, r24
	}
	
	if (main_counter <= 0) set_output(STOP);
 2d0:	80 91 63 00 	lds	r24, 0x0063
 2d4:	90 91 64 00 	lds	r25, 0x0064
 2d8:	18 16       	cp	r1, r24
 2da:	19 06       	cpc	r1, r25
 2dc:	14 f0       	brlt	.+4      	; 0x2e2 <__vector_4+0x106>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	9f d2       	rcall	.+1342   	; 0x820 <set_output>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <set_display>:

uint8_t display[4];

void set_display(int16_t in)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	24 97       	sbiw	r28, 0x04	; 4
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
uint16_t in_abs;

	in_abs = abs(in);
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	9c 83       	std	Y+4, r25	; 0x04
 326:	8b 83       	std	Y+3, r24	; 0x03
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	9c 81       	ldd	r25, Y+4	; 0x04
 32c:	99 23       	and	r25, r25
 32e:	3c f4       	brge	.+14     	; 0x33e <set_display+0x36>
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	9c 81       	ldd	r25, Y+4	; 0x04
 334:	90 95       	com	r25
 336:	81 95       	neg	r24
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	9c 83       	std	Y+4, r25	; 0x04
 33c:	8b 83       	std	Y+3, r24	; 0x03
	
	display[0] = in_abs / 1000 + 48; //+48 -> conversion to ascii char
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	9c 81       	ldd	r25, Y+4	; 0x04
 342:	28 ee       	ldi	r18, 0xE8	; 232
 344:	33 e0       	ldi	r19, 0x03	; 3
 346:	b9 01       	movw	r22, r18
 348:	b0 d2       	rcall	.+1376   	; 0x8aa <__udivmodhi4>
 34a:	cb 01       	movw	r24, r22
 34c:	80 5d       	subi	r24, 0xD0	; 208
 34e:	80 93 6e 00 	sts	0x006E, r24
	in_abs = (in_abs % 1000 ); 
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	28 ee       	ldi	r18, 0xE8	; 232
 358:	33 e0       	ldi	r19, 0x03	; 3
 35a:	b9 01       	movw	r22, r18
 35c:	a6 d2       	rcall	.+1356   	; 0x8aa <__udivmodhi4>
 35e:	9c 83       	std	Y+4, r25	; 0x04
 360:	8b 83       	std	Y+3, r24	; 0x03
	display[1] =  in_abs / 100 + 48;
 362:	8b 81       	ldd	r24, Y+3	; 0x03
 364:	9c 81       	ldd	r25, Y+4	; 0x04
 366:	24 e6       	ldi	r18, 0x64	; 100
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	9e d2       	rcall	.+1340   	; 0x8aa <__udivmodhi4>
 36e:	cb 01       	movw	r24, r22
 370:	80 5d       	subi	r24, 0xD0	; 208
 372:	80 93 6f 00 	sts	0x006F, r24
	in_abs = in_abs % 100;
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	24 e6       	ldi	r18, 0x64	; 100
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	94 d2       	rcall	.+1320   	; 0x8aa <__udivmodhi4>
 382:	9c 83       	std	Y+4, r25	; 0x04
 384:	8b 83       	std	Y+3, r24	; 0x03
	display[2] = in_abs / 10 + 48;
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	9c 81       	ldd	r25, Y+4	; 0x04
 38a:	2a e0       	ldi	r18, 0x0A	; 10
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	8c d2       	rcall	.+1304   	; 0x8aa <__udivmodhi4>
 392:	cb 01       	movw	r24, r22
 394:	80 5d       	subi	r24, 0xD0	; 208
 396:	80 93 70 00 	sts	0x0070, r24
	in_abs = in_abs % 10;
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	9c 81       	ldd	r25, Y+4	; 0x04
 39e:	2a e0       	ldi	r18, 0x0A	; 10
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	82 d2       	rcall	.+1284   	; 0x8aa <__udivmodhi4>
 3a6:	9c 83       	std	Y+4, r25	; 0x04
 3a8:	8b 83       	std	Y+3, r24	; 0x03
	display[3] = in_abs + 48;
 3aa:	8b 81       	ldd	r24, Y+3	; 0x03
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	80 93 71 00 	sts	0x0071, r24
	
	if (in < 0) display[0] = '-';
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	9a 81       	ldd	r25, Y+2	; 0x02
 3b6:	99 23       	and	r25, r25
 3b8:	1c f4       	brge	.+6      	; 0x3c0 <set_display+0xb8>
 3ba:	8d e2       	ldi	r24, 0x2D	; 45
 3bc:	80 93 6e 00 	sts	0x006E, r24
	
	display[0] = char_to_led(display[0]);	
 3c0:	80 91 6e 00 	lds	r24, 0x006E
 3c4:	1a d0       	rcall	.+52     	; 0x3fa <char_to_led>
 3c6:	80 93 6e 00 	sts	0x006E, r24
	display[1] = char_to_led(display[1]);
 3ca:	80 91 6f 00 	lds	r24, 0x006F
 3ce:	15 d0       	rcall	.+42     	; 0x3fa <char_to_led>
 3d0:	80 93 6f 00 	sts	0x006F, r24
	display[2] = char_to_led(display[2]);
 3d4:	80 91 70 00 	lds	r24, 0x0070
 3d8:	10 d0       	rcall	.+32     	; 0x3fa <char_to_led>
 3da:	80 93 70 00 	sts	0x0070, r24
	display[3] = char_to_led(display[3]);
 3de:	80 91 71 00 	lds	r24, 0x0071
 3e2:	0b d0       	rcall	.+22     	; 0x3fa <char_to_led>
 3e4:	80 93 71 00 	sts	0x0071, r24
 3e8:	24 96       	adiw	r28, 0x04	; 4
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	de bf       	out	0x3e, r29	; 62
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	cd bf       	out	0x3d, r28	; 61
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <char_to_led>:
	
}

//
// conversion from ascii/nr value to led display
//			 A
//			****
//		  F * G* B
//			****
//        E *  * C
//			****	
//           D
char char_to_led(char in)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	22 97       	sbiw	r28, 0x02	; 2
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	89 83       	std	Y+1, r24	; 0x01
uint8_t tmp;
	
//this can be done via array, let it be today 
	if (in == '0') 		tmp = A+B+C+D+E+F; 
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	80 33       	cpi	r24, 0x30	; 48
 414:	19 f4       	brne	.+6      	; 0x41c <char_to_led+0x22>
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	3d c0       	rjmp	.+122    	; 0x496 <__stack+0x37>
	else if (in == '1')	tmp = B+C;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	81 33       	cpi	r24, 0x31	; 49
 420:	19 f4       	brne	.+6      	; 0x428 <char_to_led+0x2e>
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	8a 83       	std	Y+2, r24	; 0x02
 426:	37 c0       	rjmp	.+110    	; 0x496 <__stack+0x37>
	else if (in == '2')	tmp = A+B+G+E+D;	
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	82 33       	cpi	r24, 0x32	; 50
 42c:	19 f4       	brne	.+6      	; 0x434 <char_to_led+0x3a>
 42e:	8b e5       	ldi	r24, 0x5B	; 91
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	31 c0       	rjmp	.+98     	; 0x496 <__stack+0x37>
	else if (in == '3')	tmp = A+B+G+C+D;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	83 33       	cpi	r24, 0x33	; 51
 438:	19 f4       	brne	.+6      	; 0x440 <char_to_led+0x46>
 43a:	8f e4       	ldi	r24, 0x4F	; 79
 43c:	8a 83       	std	Y+2, r24	; 0x02
 43e:	2b c0       	rjmp	.+86     	; 0x496 <__stack+0x37>
	else if (in == '4')	tmp = F+G+B+C;
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	84 33       	cpi	r24, 0x34	; 52
 444:	19 f4       	brne	.+6      	; 0x44c <char_to_led+0x52>
 446:	86 e6       	ldi	r24, 0x66	; 102
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	25 c0       	rjmp	.+74     	; 0x496 <__stack+0x37>
	else if (in == '5')	tmp = A+F+G+C+D;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	85 33       	cpi	r24, 0x35	; 53
 450:	19 f4       	brne	.+6      	; 0x458 <char_to_led+0x5e>
 452:	8d e6       	ldi	r24, 0x6D	; 109
 454:	8a 83       	std	Y+2, r24	; 0x02
 456:	1f c0       	rjmp	.+62     	; 0x496 <__stack+0x37>
	else if (in == '6')	tmp = A+F+G+C+D+E;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	86 33       	cpi	r24, 0x36	; 54
 45c:	19 f4       	brne	.+6      	; 0x464 <__stack+0x5>
 45e:	8d e7       	ldi	r24, 0x7D	; 125
 460:	8a 83       	std	Y+2, r24	; 0x02
 462:	19 c0       	rjmp	.+50     	; 0x496 <__stack+0x37>
	else if (in == '7')	tmp = A+B+C;
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	87 33       	cpi	r24, 0x37	; 55
 468:	19 f4       	brne	.+6      	; 0x470 <__stack+0x11>
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	13 c0       	rjmp	.+38     	; 0x496 <__stack+0x37>
	else if (in == '8')	tmp = A+B+C+D+E+F+G;
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	88 33       	cpi	r24, 0x38	; 56
 474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
 476:	8f e7       	ldi	r24, 0x7F	; 127
 478:	8a 83       	std	Y+2, r24	; 0x02
 47a:	0d c0       	rjmp	.+26     	; 0x496 <__stack+0x37>
	else if (in == '9')	tmp = A+B+G+F+C+D;
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	89 33       	cpi	r24, 0x39	; 57
 480:	19 f4       	brne	.+6      	; 0x488 <__stack+0x29>
 482:	8f e6       	ldi	r24, 0x6F	; 111
 484:	8a 83       	std	Y+2, r24	; 0x02
 486:	07 c0       	rjmp	.+14     	; 0x496 <__stack+0x37>
	else if (in == '-')	tmp = G;
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	8d 32       	cpi	r24, 0x2D	; 45
 48c:	19 f4       	brne	.+6      	; 0x494 <__stack+0x35>
 48e:	80 e4       	ldi	r24, 0x40	; 64
 490:	8a 83       	std	Y+2, r24	; 0x02
 492:	01 c0       	rjmp	.+2      	; 0x496 <__stack+0x37>
	else tmp=0; //unknow character
 494:	1a 82       	std	Y+2, r1	; 0x02

	return(tmp);
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	99 27       	eor	r25, r25
 49a:	22 96       	adiw	r28, 0x02	; 2
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <refresh_led>:
}

//called every 5ms
void refresh_led(void)
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
static uint8_t position; //position of current LEDisplay
	
	//position of currently displayed LED segment (0,1,2 or 3)
	position++;
 4b4:	80 91 60 00 	lds	r24, 0x0060
 4b8:	8f 5f       	subi	r24, 0xFF	; 255
 4ba:	80 93 60 00 	sts	0x0060, r24
	if (position >= NR_LED) position = 0;		
 4be:	80 91 60 00 	lds	r24, 0x0060
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	10 f0       	brcs	.+4      	; 0x4ca <refresh_led+0x1e>
 4c6:	10 92 60 00 	sts	0x0060, r1
	
	set_led_display(position, display[position]);
 4ca:	80 91 60 00 	lds	r24, 0x0060
 4ce:	99 27       	eor	r25, r25
 4d0:	fc 01       	movw	r30, r24
 4d2:	e2 59       	subi	r30, 0x92	; 146
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	60 81       	ld	r22, Z
 4d8:	80 91 60 00 	lds	r24, 0x0060
 4dc:	03 d0       	rcall	.+6      	; 0x4e4 <set_led_display>
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <set_led_display>:
		
}

//	hw layer
//  
void set_led_display(uint8_t control, uint8_t data)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	22 97       	sbiw	r28, 0x02	; 2
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	6a 83       	std	Y+2, r22	; 0x02
	PORTB &= ~_BV(SEG1000_OB);	
 4fc:	80 91 38 00 	lds	r24, 0x0038
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	80 93 38 00 	sts	0x0038, r24
	PORTD &= ~_BV(SEG100_OD);
 506:	9f e7       	ldi	r25, 0x7F	; 127
 508:	80 91 32 00 	lds	r24, 0x0032
 50c:	89 23       	and	r24, r25
 50e:	80 93 32 00 	sts	0x0032, r24
	PORTD &= ~_BV(SEG10_OD);
 512:	80 91 32 00 	lds	r24, 0x0032
 516:	8f 7b       	andi	r24, 0xBF	; 191
 518:	80 93 32 00 	sts	0x0032, r24
	PORTD &= ~_BV(SEG1_OD);
 51c:	80 91 32 00 	lds	r24, 0x0032
 520:	8f 7d       	andi	r24, 0xDF	; 223
 522:	80 93 32 00 	sts	0x0032, r24
	
	if (data & A) PORTD &= ~_BV(LED_A_OD); else PORTD |= _BV(LED_A_OD);
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	99 27       	eor	r25, r25
 52a:	81 70       	andi	r24, 0x01	; 1
 52c:	90 70       	andi	r25, 0x00	; 0
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	31 f0       	breq	.+12     	; 0x53e <set_led_display+0x5a>
 532:	80 91 32 00 	lds	r24, 0x0032
 536:	8e 7f       	andi	r24, 0xFE	; 254
 538:	80 93 32 00 	sts	0x0032, r24
 53c:	05 c0       	rjmp	.+10     	; 0x548 <set_led_display+0x64>
 53e:	80 91 32 00 	lds	r24, 0x0032
 542:	81 60       	ori	r24, 0x01	; 1
 544:	80 93 32 00 	sts	0x0032, r24
	if (data & B) PORTD &= ~_BV(LED_B_OD); else PORTD |= _BV(LED_B_OD);
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	99 27       	eor	r25, r25
 54c:	82 70       	andi	r24, 0x02	; 2
 54e:	90 70       	andi	r25, 0x00	; 0
 550:	00 97       	sbiw	r24, 0x00	; 0
 552:	31 f0       	breq	.+12     	; 0x560 <set_led_display+0x7c>
 554:	80 91 32 00 	lds	r24, 0x0032
 558:	8d 7f       	andi	r24, 0xFD	; 253
 55a:	80 93 32 00 	sts	0x0032, r24
 55e:	05 c0       	rjmp	.+10     	; 0x56a <set_led_display+0x86>
 560:	80 91 32 00 	lds	r24, 0x0032
 564:	82 60       	ori	r24, 0x02	; 2
 566:	80 93 32 00 	sts	0x0032, r24
	if (data & C) PORTD &= ~_BV(LED_C_OD); else PORTD |= _BV(LED_C_OD);
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	99 27       	eor	r25, r25
 56e:	84 70       	andi	r24, 0x04	; 4
 570:	90 70       	andi	r25, 0x00	; 0
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	31 f0       	breq	.+12     	; 0x582 <set_led_display+0x9e>
 576:	80 91 32 00 	lds	r24, 0x0032
 57a:	8b 7f       	andi	r24, 0xFB	; 251
 57c:	80 93 32 00 	sts	0x0032, r24
 580:	05 c0       	rjmp	.+10     	; 0x58c <set_led_display+0xa8>
 582:	80 91 32 00 	lds	r24, 0x0032
 586:	84 60       	ori	r24, 0x04	; 4
 588:	80 93 32 00 	sts	0x0032, r24
	if (data & D) PORTD &= ~_BV(LED_D_OD); else PORTD |= _BV(LED_D_OD);
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	99 27       	eor	r25, r25
 590:	88 70       	andi	r24, 0x08	; 8
 592:	90 70       	andi	r25, 0x00	; 0
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	31 f0       	breq	.+12     	; 0x5a4 <set_led_display+0xc0>
 598:	80 91 32 00 	lds	r24, 0x0032
 59c:	87 7f       	andi	r24, 0xF7	; 247
 59e:	80 93 32 00 	sts	0x0032, r24
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <set_led_display+0xca>
 5a4:	80 91 32 00 	lds	r24, 0x0032
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	80 93 32 00 	sts	0x0032, r24
	if (data & E) PORTD &= ~_BV(LED_E_OD); else PORTD |= _BV(LED_E_OD);
 5ae:	8a 81       	ldd	r24, Y+2	; 0x02
 5b0:	99 27       	eor	r25, r25
 5b2:	80 71       	andi	r24, 0x10	; 16
 5b4:	90 70       	andi	r25, 0x00	; 0
 5b6:	00 97       	sbiw	r24, 0x00	; 0
 5b8:	31 f0       	breq	.+12     	; 0x5c6 <set_led_display+0xe2>
 5ba:	80 91 32 00 	lds	r24, 0x0032
 5be:	8f 7e       	andi	r24, 0xEF	; 239
 5c0:	80 93 32 00 	sts	0x0032, r24
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <set_led_display+0xec>
 5c6:	80 91 32 00 	lds	r24, 0x0032
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	80 93 32 00 	sts	0x0032, r24
	if (data & F) PORTB &= ~_BV(LED_F_OB); else PORTB |= _BV(LED_F_OB);
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	99 27       	eor	r25, r25
 5d4:	80 72       	andi	r24, 0x20	; 32
 5d6:	90 70       	andi	r25, 0x00	; 0
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	31 f0       	breq	.+12     	; 0x5e8 <set_led_display+0x104>
 5dc:	80 91 38 00 	lds	r24, 0x0038
 5e0:	8f 7b       	andi	r24, 0xBF	; 191
 5e2:	80 93 38 00 	sts	0x0038, r24
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <set_led_display+0x10e>
 5e8:	80 91 38 00 	lds	r24, 0x0038
 5ec:	80 64       	ori	r24, 0x40	; 64
 5ee:	80 93 38 00 	sts	0x0038, r24
	if (data & G) PORTB &= ~_BV(LED_G_OB); else PORTB |= _BV(LED_G_OB);
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	99 27       	eor	r25, r25
 5f6:	80 74       	andi	r24, 0x40	; 64
 5f8:	90 70       	andi	r25, 0x00	; 0
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	39 f0       	breq	.+14     	; 0x60c <set_led_display+0x128>
 5fe:	8f e7       	ldi	r24, 0x7F	; 127
 600:	90 91 38 00 	lds	r25, 0x0038
 604:	89 23       	and	r24, r25
 606:	80 93 38 00 	sts	0x0038, r24
 60a:	05 c0       	rjmp	.+10     	; 0x616 <set_led_display+0x132>
 60c:	80 91 38 00 	lds	r24, 0x0038
 610:	80 68       	ori	r24, 0x80	; 128
 612:	80 93 38 00 	sts	0x0038, r24
	
	if (control == 0) PORTB |= _BV(SEG1000_OB);
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	88 23       	and	r24, r24
 61a:	31 f4       	brne	.+12     	; 0x628 <set_led_display+0x144>
 61c:	80 91 38 00 	lds	r24, 0x0038
 620:	81 60       	ori	r24, 0x01	; 1
 622:	80 93 38 00 	sts	0x0038, r24
 626:	17 c0       	rjmp	.+46     	; 0x656 <set_led_display+0x172>
	else if (control == 1) PORTD |= _BV(SEG100_OD);
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	31 f4       	brne	.+12     	; 0x63a <set_led_display+0x156>
 62e:	80 91 32 00 	lds	r24, 0x0032
 632:	80 68       	ori	r24, 0x80	; 128
 634:	80 93 32 00 	sts	0x0032, r24
 638:	0e c0       	rjmp	.+28     	; 0x656 <set_led_display+0x172>
	else if (control == 2) PORTD |= _BV(SEG10_OD);
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	31 f4       	brne	.+12     	; 0x64c <set_led_display+0x168>
 640:	80 91 32 00 	lds	r24, 0x0032
 644:	80 64       	ori	r24, 0x40	; 64
 646:	80 93 32 00 	sts	0x0032, r24
 64a:	05 c0       	rjmp	.+10     	; 0x656 <set_led_display+0x172>
	else PORTD |= _BV(SEG1_OD);
 64c:	80 91 32 00 	lds	r24, 0x0032
 650:	80 62       	ori	r24, 0x20	; 32
 652:	80 93 32 00 	sts	0x0032, r24
 656:	22 96       	adiw	r28, 0x02	; 2
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <adc_init>:
#include "counter.h"
#include "adc.h"

void adc_init(void)
{ 
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62
	//channel 0 + AVCC + external cap on AREF pin
	ADMUX = _BV(REFS0); 
 670:	80 e4       	ldi	r24, 0x40	; 64
 672:	80 93 27 00 	sts	0x0027, r24
	// adc enabled, adc started, set adc clock
	//clock 8 MHZ / 64 = 125kHz
	ADCSRA = _BV(ADEN) | _BV (ADIE) | _BV(ADSC) | _BV(ADPS2) | _BV(ADPS1); 
 676:	8e ec       	ldi	r24, 0xCE	; 206
 678:	80 93 26 00 	sts	0x0026, r24
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <__vector_14>:
}

ISR(ADC_vect) //interrupts are disabled
{
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	8f 93       	push	r24
 68e:	9f 93       	push	r25
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
	if (ADMUX & 0x1) //PC1
 698:	80 91 27 00 	lds	r24, 0x0027
 69c:	99 27       	eor	r25, r25
 69e:	81 70       	andi	r24, 0x01	; 1
 6a0:	90 70       	andi	r25, 0x00	; 0
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <__vector_14+0x40>
	{
		adc_dir = ADC >> 2;//8 bits are enough 
 6a6:	80 91 24 00 	lds	r24, 0x0024
 6aa:	90 91 25 00 	lds	r25, 0x0025
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	96 95       	lsr	r25
 6b4:	87 95       	ror	r24
 6b6:	80 93 67 00 	sts	0x0067, r24
		ADMUX = _BV(REFS0);
 6ba:	80 e4       	ldi	r24, 0x40	; 64
 6bc:	80 93 27 00 	sts	0x0027, r24
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <__vector_14+0x5a>
	}
	else
	{
		adc_clock = ADC >> 2;//8 bits are enough
 6c2:	80 91 24 00 	lds	r24, 0x0024
 6c6:	90 91 25 00 	lds	r25, 0x0025
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	96 95       	lsr	r25
 6d0:	87 95       	ror	r24
 6d2:	80 93 6a 00 	sts	0x006A, r24
		ADMUX = _BV(REFS0) | 1;
 6d6:	81 e4       	ldi	r24, 0x41	; 65
 6d8:	80 93 27 00 	sts	0x0027, r24
	}

	ADCSRA |= _BV(ADSC); //start next conversion
 6dc:	80 91 26 00 	lds	r24, 0x0026
 6e0:	80 64       	ori	r24, 0x40	; 64
 6e2:	80 93 26 00 	sts	0x0026, r24
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
 6f4:	1f 90       	pop	r1
 6f6:	18 95       	reti

000006f8 <check_buttons>:
uint8_t run_stop; 

//this function is called every 5ms
void check_buttons(void)
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
 700:	21 97       	sbiw	r28, 0x01	; 1
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
uint8_t pb;
static uint8_t pb_last;
	
	pb = PINB;
 70c:	80 91 36 00 	lds	r24, 0x0036
 710:	89 83       	std	Y+1, r24	; 0x01
	
	if ( ( pb & _BV(BUTT_RUN_IB)) < (pb_last & _BV(BUTT_RUN_IB)) )
 712:	89 81       	ldd	r24, Y+1	; 0x01
 714:	99 27       	eor	r25, r25
 716:	9c 01       	movw	r18, r24
 718:	20 72       	andi	r18, 0x20	; 32
 71a:	30 70       	andi	r19, 0x00	; 0
 71c:	80 91 61 00 	lds	r24, 0x0061
 720:	99 27       	eor	r25, r25
 722:	80 72       	andi	r24, 0x20	; 32
 724:	90 70       	andi	r25, 0x00	; 0
 726:	28 17       	cp	r18, r24
 728:	39 07       	cpc	r19, r25
 72a:	0c f4       	brge	.+2      	; 0x72e <check_buttons+0x36>
	{
		toggle_output();
 72c:	a3 d0       	rcall	.+326    	; 0x874 <toggle_output>
	}
		
	if ( ( pb & _BV(BUTT1_IB) ) < ( pb_last & _BV(BUTT1_IB) ) )
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	99 27       	eor	r25, r25
 732:	9c 01       	movw	r18, r24
 734:	20 71       	andi	r18, 0x10	; 16
 736:	30 70       	andi	r19, 0x00	; 0
 738:	80 91 61 00 	lds	r24, 0x0061
 73c:	99 27       	eor	r25, r25
 73e:	80 71       	andi	r24, 0x10	; 16
 740:	90 70       	andi	r25, 0x00	; 0
 742:	28 17       	cp	r18, r24
 744:	39 07       	cpc	r19, r25
 746:	4c f4       	brge	.+18     	; 0x75a <check_buttons+0x62>
	{ 
		main_counter += 1;	
 748:	80 91 63 00 	lds	r24, 0x0063
 74c:	90 91 64 00 	lds	r25, 0x0064
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	90 93 64 00 	sts	0x0064, r25
 756:	80 93 63 00 	sts	0x0063, r24
	}
	if ( ( pb & _BV(BUTT10_IB)) < ( pb_last & _BV(BUTT10_IB) ) )
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	99 27       	eor	r25, r25
 75e:	9c 01       	movw	r18, r24
 760:	28 70       	andi	r18, 0x08	; 8
 762:	30 70       	andi	r19, 0x00	; 0
 764:	80 91 61 00 	lds	r24, 0x0061
 768:	99 27       	eor	r25, r25
 76a:	88 70       	andi	r24, 0x08	; 8
 76c:	90 70       	andi	r25, 0x00	; 0
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	4c f4       	brge	.+18     	; 0x786 <check_buttons+0x8e>
	{
		main_counter += 10;
 774:	80 91 63 00 	lds	r24, 0x0063
 778:	90 91 64 00 	lds	r25, 0x0064
 77c:	0a 96       	adiw	r24, 0x0a	; 10
 77e:	90 93 64 00 	sts	0x0064, r25
 782:	80 93 63 00 	sts	0x0063, r24
	}
	if ( ( pb & _BV(BUTT100_IB) ) < ( pb_last & _BV(BUTT100_IB)) )
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	99 27       	eor	r25, r25
 78a:	9c 01       	movw	r18, r24
 78c:	24 70       	andi	r18, 0x04	; 4
 78e:	30 70       	andi	r19, 0x00	; 0
 790:	80 91 61 00 	lds	r24, 0x0061
 794:	99 27       	eor	r25, r25
 796:	84 70       	andi	r24, 0x04	; 4
 798:	90 70       	andi	r25, 0x00	; 0
 79a:	28 17       	cp	r18, r24
 79c:	39 07       	cpc	r19, r25
 79e:	54 f4       	brge	.+20     	; 0x7b4 <check_buttons+0xbc>
	{
		main_counter += 100;
 7a0:	80 91 63 00 	lds	r24, 0x0063
 7a4:	90 91 64 00 	lds	r25, 0x0064
 7a8:	8c 59       	subi	r24, 0x9C	; 156
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	90 93 64 00 	sts	0x0064, r25
 7b0:	80 93 63 00 	sts	0x0063, r24
	}
	if ( ( pb & _BV(BUTT1000_IB)) < ( pb_last & _BV(BUTT1000_IB)) )
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	99 27       	eor	r25, r25
 7b8:	9c 01       	movw	r18, r24
 7ba:	22 70       	andi	r18, 0x02	; 2
 7bc:	30 70       	andi	r19, 0x00	; 0
 7be:	80 91 61 00 	lds	r24, 0x0061
 7c2:	99 27       	eor	r25, r25
 7c4:	82 70       	andi	r24, 0x02	; 2
 7c6:	90 70       	andi	r25, 0x00	; 0
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	54 f4       	brge	.+20     	; 0x7e2 <check_buttons+0xea>
	{
		main_counter += 1000;
 7ce:	80 91 63 00 	lds	r24, 0x0063
 7d2:	90 91 64 00 	lds	r25, 0x0064
 7d6:	88 51       	subi	r24, 0x18	; 24
 7d8:	9c 4f       	sbci	r25, 0xFC	; 252
 7da:	90 93 64 00 	sts	0x0064, r25
 7de:	80 93 63 00 	sts	0x0063, r24
	}
	
	pb_last = pb;	//save old state
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	80 93 61 00 	sts	0x0061, r24
 7e8:	21 96       	adiw	r28, 0x01	; 1
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	de bf       	out	0x3e, r29	; 62
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	cd bf       	out	0x3d, r28	; 61
 7f4:	df 91       	pop	r29
 7f6:	cf 91       	pop	r28
 7f8:	08 95       	ret

000007fa <port_init>:
}

void port_init(void)
{
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	cd b7       	in	r28, 0x3d	; 61
 800:	de b7       	in	r29, 0x3e	; 62
	//note : see layout of pins in counter.h file
	
	DDRB = _BV(LED_F_OB) | _BV(LED_G_OB) | _BV(SEG1000_OB);
 802:	81 ec       	ldi	r24, 0xC1	; 193
 804:	80 93 37 00 	sts	0x0037, r24
	DDRC = _BV(CLOCK_OC) | _BV(DIR_OC) | _BV(RELAY_OC);
 808:	8c e1       	ldi	r24, 0x1C	; 28
 80a:	80 93 34 00 	sts	0x0034, r24
	DDRD = _BV(LED_A_OD) | _BV(LED_B_OD) | _BV(LED_C_OD) | _BV(LED_D_OD) | _BV(LED_E_OD) | _BV(SEG100_OD) | _BV(SEG10_OD) | _BV(SEG1_OD);
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	80 93 31 00 	sts	0x0031, r24
	
	//butons - enable internal pull-ups
	PORTB = _BV(BUTT_RUN_IB) | _BV(BUTT1000_IB) | _BV(BUTT100_IB) | _BV(BUTT10_IB) | _BV(BUTT1_IB);
 814:	8e e3       	ldi	r24, 0x3E	; 62
 816:	80 93 38 00 	sts	0x0038, r24
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <set_output>:
}

void set_output(uint8_t in)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	21 97       	sbiw	r28, 0x01	; 1
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	89 83       	std	Y+1, r24	; 0x01
	run_stop = in;
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	80 93 72 00 	sts	0x0072, r24
	if (run_stop == RUN) PORTC |= _BV(RELAY_OC);
 83c:	80 91 72 00 	lds	r24, 0x0072
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	31 f4       	brne	.+12     	; 0x850 <set_output+0x30>
 844:	80 91 35 00 	lds	r24, 0x0035
 848:	80 61       	ori	r24, 0x10	; 16
 84a:	80 93 35 00 	sts	0x0035, r24
 84e:	09 c0       	rjmp	.+18     	; 0x862 <set_output+0x42>
	else if (run_stop == STOP) PORTC &= ~_BV(RELAY_OC);
 850:	80 91 72 00 	lds	r24, 0x0072
 854:	88 23       	and	r24, r24
 856:	29 f4       	brne	.+10     	; 0x862 <set_output+0x42>
 858:	80 91 35 00 	lds	r24, 0x0035
 85c:	8f 7e       	andi	r24, 0xEF	; 239
 85e:	80 93 35 00 	sts	0x0035, r24
 862:	21 96       	adiw	r28, 0x01	; 1
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <toggle_output>:
}
void toggle_output(void)
{
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
	if (run_stop == RUN)
 87c:	80 91 72 00 	lds	r24, 0x0072
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	41 f4       	brne	.+16     	; 0x894 <toggle_output+0x20>
	{
		run_stop = STOP;
 884:	10 92 72 00 	sts	0x0072, r1
		PORTC &= ~_BV(RELAY_OC);
 888:	80 91 35 00 	lds	r24, 0x0035
 88c:	8f 7e       	andi	r24, 0xEF	; 239
 88e:	80 93 35 00 	sts	0x0035, r24
 892:	08 c0       	rjmp	.+16     	; 0x8a4 <toggle_output+0x30>
	}
	else
	{
		run_stop = RUN;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	80 93 72 00 	sts	0x0072, r24
		PORTC |= _BV(RELAY_OC);
 89a:	80 91 35 00 	lds	r24, 0x0035
 89e:	80 61       	ori	r24, 0x10	; 16
 8a0:	80 93 35 00 	sts	0x0035, r24
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <__udivmodhi4>:
 8aa:	aa 1b       	sub	r26, r26
 8ac:	bb 1b       	sub	r27, r27
 8ae:	51 e1       	ldi	r21, 0x11	; 17
 8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__udivmodhi4_ep>

000008b2 <__udivmodhi4_loop>:
 8b2:	aa 1f       	adc	r26, r26
 8b4:	bb 1f       	adc	r27, r27
 8b6:	a6 17       	cp	r26, r22
 8b8:	b7 07       	cpc	r27, r23
 8ba:	10 f0       	brcs	.+4      	; 0x8c0 <__udivmodhi4_ep>
 8bc:	a6 1b       	sub	r26, r22
 8be:	b7 0b       	sbc	r27, r23

000008c0 <__udivmodhi4_ep>:
 8c0:	88 1f       	adc	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	5a 95       	dec	r21
 8c6:	a9 f7       	brne	.-22     	; 0x8b2 <__udivmodhi4_loop>
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	bc 01       	movw	r22, r24
 8ce:	cd 01       	movw	r24, r26
 8d0:	08 95       	ret
