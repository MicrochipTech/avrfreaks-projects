
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000496  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000003  00810000  00810000  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000810  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b2  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000116  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007b5  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002c1  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000796  00000000  00000000  000019e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b9  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000049b  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e9       	ldi	r30, 0x96	; 150
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>
  44:	74 d0       	rcall	.+232    	; 0x12e <main>
  46:	25 c2       	rjmp	.+1098   	; 0x492 <_exit>

00000048 <__bad_interrupt>:
  48:	00 c0       	rjmp	.+0      	; 0x4a <__vector_default>

0000004a <__vector_default>:

uint8_t EEMEM eeprom_red;
uint8_t EEMEM eeprom_green;
uint8_t EEMEM eeprom_blue;

ISR(BADISR_vect){};
  4a:	1f 92       	push	r1
  4c:	0f 92       	push	r0
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	0f 92       	push	r0
  52:	11 24       	eor	r1, r1
  54:	0f 90       	pop	r0
  56:	0f be       	out	0x3f, r0	; 63
  58:	0f 90       	pop	r0
  5a:	1f 90       	pop	r1
  5c:	18 95       	reti

0000005e <demo>:

	return 0;
}//main 

void demo(void)
				{	
  5e:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  60:	62 ee       	ldi	r22, 0xE2	; 226
  62:	74 e0       	ldi	r23, 0x04	; 4
  64:	2a c0       	rjmp	.+84     	; 0xba <demo+0x5c>
					uint8_t	a,i;
					for(i=0;i<5;i++)
					{
						for(a=0; a<0xff;a++)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
  66:	39 bd       	out	0x29, r19	; 41
  68:	28 bd       	out	0x28, r18	; 40
  6a:	88 b5       	in	r24, 0x28	; 40
  6c:	99 b5       	in	r25, 0x29	; 41
  6e:	9b bd       	out	0x2b, r25	; 43
  70:	8a bd       	out	0x2a, r24	; 42
  72:	8a b5       	in	r24, 0x2a	; 42
  74:	9b b5       	in	r25, 0x2b	; 43
  76:	86 bf       	out	0x36, r24	; 54
  78:	cb 01       	movw	r24, r22
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <demo+0x1c>
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
void demo(void)
				{	
					uint8_t	a,i;
					for(i=0;i<5;i++)
					{
						for(a=0; a<0xff;a++)
  82:	2f 3f       	cpi	r18, 0xFF	; 255
  84:	31 05       	cpc	r19, r1
  86:	79 f7       	brne	.-34     	; 0x66 <demo+0x8>
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	30 e0       	ldi	r19, 0x00	; 0
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(5);
						}
						for(a=0xff; a>0;a--)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
  8c:	39 bd       	out	0x29, r19	; 41
  8e:	28 bd       	out	0x28, r18	; 40
  90:	88 b5       	in	r24, 0x28	; 40
  92:	99 b5       	in	r25, 0x29	; 41
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
  98:	8a b5       	in	r24, 0x2a	; 42
  9a:	9b b5       	in	r25, 0x2b	; 43
  9c:	86 bf       	out	0x36, r24	; 54
  9e:	cb 01       	movw	r24, r22
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <demo+0x42>
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
						for(a=0; a<0xff;a++)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(5);
						}
						for(a=0xff; a>0;a--)
  a8:	22 23       	and	r18, r18
  aa:	81 f7       	brne	.-32     	; 0x8c <demo+0x2e>
}//main 

void demo(void)
				{	
					uint8_t	a,i;
					for(i=0;i<5;i++)
  ac:	4f 5f       	subi	r20, 0xFF	; 255
  ae:	45 30       	cpi	r20, 0x05	; 5
  b0:	21 f4       	brne	.+8      	; 0xba <demo+0x5c>
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	64 ef       	ldi	r22, 0xF4	; 244
  b6:	71 e0       	ldi	r23, 0x01	; 1
  b8:	29 c0       	rjmp	.+82     	; 0x10c <__stack+0x2d>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	d3 cf       	rjmp	.-90     	; 0x66 <demo+0x8>
					}//for(i)
					for(i=0;i<5;i++)
					{
						for(a=0; a<0xff;a++)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
  c0:	39 bd       	out	0x29, r19	; 41
  c2:	28 bd       	out	0x28, r18	; 40
  c4:	88 b5       	in	r24, 0x28	; 40
  c6:	99 b5       	in	r25, 0x29	; 41
  c8:	9b bd       	out	0x2b, r25	; 43
  ca:	8a bd       	out	0x2a, r24	; 42
  cc:	8a b5       	in	r24, 0x2a	; 42
  ce:	9b b5       	in	r25, 0x2b	; 43
  d0:	86 bf       	out	0x36, r24	; 54
  d2:	cb 01       	movw	r24, r22
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <demo+0x76>
  d8:	2f 5f       	subi	r18, 0xFF	; 255
  da:	3f 4f       	sbci	r19, 0xFF	; 255
							_delay_ms(5);
						}
					}//for(i)
					for(i=0;i<5;i++)
					{
						for(a=0; a<0xff;a++)
  dc:	2f 3f       	cpi	r18, 0xFF	; 255
  de:	31 05       	cpc	r19, r1
  e0:	79 f7       	brne	.-34     	; 0xc0 <demo+0x62>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	30 e0       	ldi	r19, 0x00	; 0
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(2);
						}
						for(a=0xff; a>0;a--)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
  e6:	39 bd       	out	0x29, r19	; 41
  e8:	28 bd       	out	0x28, r18	; 40
  ea:	88 b5       	in	r24, 0x28	; 40
  ec:	99 b5       	in	r25, 0x29	; 41
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42
  f2:	8a b5       	in	r24, 0x2a	; 42
  f4:	9b b5       	in	r25, 0x2b	; 43
  f6:	86 bf       	out	0x36, r24	; 54
  f8:	cb 01       	movw	r24, r22
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <__stack+0x1b>
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
						for(a=0; a<0xff;a++)
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(2);
						}
						for(a=0xff; a>0;a--)
 102:	22 23       	and	r18, r18
 104:	81 f7       	brne	.-32     	; 0xe6 <__stack+0x7>
						{
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(5);
						}
					}//for(i)
					for(i=0;i<5;i++)
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	45 30       	cpi	r20, 0x05	; 5
 10a:	19 f0       	breq	.+6      	; 0x112 <__stack+0x33>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	d7 cf       	rjmp	.-82     	; 0xc0 <demo+0x62>
							PWM_RED = PWM_GREEN = PWM_BLUE = a;
							_delay_ms(2);
						}
					}//for(i)
					
					PWM_RED = value_r;
 112:	80 91 60 00 	lds	r24, 0x0060
 116:	86 bf       	out	0x36, r24	; 54
					PWM_GREEN = value_g;
 118:	80 91 61 00 	lds	r24, 0x0061
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	9b bd       	out	0x2b, r25	; 43
 120:	8a bd       	out	0x2a, r24	; 42
					PWM_BLUE = value_b;
 122:	80 91 62 00 	lds	r24, 0x0062
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	99 bd       	out	0x29, r25	; 41
 12a:	88 bd       	out	0x28, r24	; 40
				}//case
 12c:	08 95       	ret

0000012e <main>:
uint8_t EEMEM eeprom_blue;

ISR(BADISR_vect){};

int main(void)
{
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	
	//inicjalizacja PWM
	PWM_T0_init();	//inicjalizacja trybu PWM dla dwóch kanałów
 13e:	77 d1       	rcall	.+750    	; 0x42e <PWM_T0_init>
	PWM_T1_init();	//inicjalizacja trybu PWM dla dwóch kanałów
 140:	83 d1       	rcall	.+774    	; 0x448 <PWM_T1_init>
	
	sei();
 142:	78 94       	sei
	
	//konfiguracja portu klawiatury i wyjscia diody GREEN
	DDRD  = 0b00000000;
 144:	11 ba       	out	0x11, r1	; 17
	DDRD |= _BV(6);				//PD6 jako wyjscie
 146:	8e 9a       	sbi	0x11, 6	; 17
	PORTD = 0b11111111; 		//podciagnij klawiature i zgas diode G
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	82 bb       	out	0x12, r24	; 18
	
	//konfiguracja wyjscia dla diody RED i BLUE
	DDRB  |= (_BV(0) | _BV(1));	//PB0 i PB1 wyjscia
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	83 60       	ori	r24, 0x03	; 3
 150:	87 bb       	out	0x17, r24	; 23
	PORTD |= (_BV(0) | _BV(1));	//zgas diody R i B
 152:	82 b3       	in	r24, 0x12	; 18
 154:	83 60       	ori	r24, 0x03	; 3
 156:	82 bb       	out	0x12, r24	; 18
	
	
	//odczytaj dane dla PWM z eepromu 
	value_r = eeprom_read_byte(&eeprom_red);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	84 d1       	rcall	.+776    	; 0x466 <__eerd_byte_tn2313>
 15e:	18 2f       	mov	r17, r24
 160:	80 93 60 00 	sts	0x0060, r24
	value_g = eeprom_read_byte(&eeprom_green);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	7e d1       	rcall	.+764    	; 0x466 <__eerd_byte_tn2313>
 16a:	08 2f       	mov	r16, r24
 16c:	80 93 61 00 	sts	0x0061, r24
	value_b = eeprom_read_byte(&eeprom_blue);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	78 d1       	rcall	.+752    	; 0x466 <__eerd_byte_tn2313>
 176:	38 2f       	mov	r19, r24
 178:	80 93 62 00 	sts	0x0062, r24

	//wylacz diode RGB
	PORT_OUT_G |= _BV(OUT_G);
 17c:	96 9a       	sbi	0x12, 6	; 18
	PORT_OUT_R |= _BV(OUT_R);
 17e:	c0 9a       	sbi	0x18, 0	; 24
	PORT_OUT_B |= _BV(OUT_B);
 180:	c1 9a       	sbi	0x18, 1	; 24
 182:	80 e5       	ldi	r24, 0x50	; 80
 184:	93 ec       	ldi	r25, 0xC3	; 195
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x58>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	4e ee       	ldi	r20, 0xEE	; 238
 18e:	52 e0       	ldi	r21, 0x02	; 2
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0x6e>
	//zmienne rozne
	uint8_t a=0;

	while(a!=value_r)
	{
		PWM_RED = a;
 192:	26 bf       	out	0x36, r18	; 54
 194:	ca 01       	movw	r24, r20
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x68>
		_delay_ms(3);
		a++;
 19a:	2f 5f       	subi	r18, 0xFF	; 255
	_delay_ms(200);

	//zmienne rozne
	uint8_t a=0;

	while(a!=value_r)
 19c:	21 17       	cp	r18, r17
 19e:	c9 f7       	brne	.-14     	; 0x192 <main+0x64>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	4e ee       	ldi	r20, 0xEE	; 238
 1a4:	52 e0       	ldi	r21, 0x02	; 2
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <main+0x8a>
		a++;
	}
	a=0;
	while(a!=value_g)
	{
		PWM_GREEN = a;
 1a8:	82 2f       	mov	r24, r18
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9b bd       	out	0x2b, r25	; 43
 1ae:	8a bd       	out	0x2a, r24	; 42
 1b0:	ca 01       	movw	r24, r20
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x84>
		_delay_ms(3);
		a++;
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
		PWM_RED = a;
		_delay_ms(3);
		a++;
	}
	a=0;
	while(a!=value_g)
 1b8:	20 17       	cp	r18, r16
 1ba:	b1 f7       	brne	.-20     	; 0x1a8 <main+0x7a>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	4e ee       	ldi	r20, 0xEE	; 238
 1c0:	52 e0       	ldi	r21, 0x02	; 2
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <main+0xa6>
		a++;
	}
	a=0;
	while(a!=value_b)
	{
		PWM_BLUE = a;
 1c4:	82 2f       	mov	r24, r18
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	99 bd       	out	0x29, r25	; 41
 1ca:	88 bd       	out	0x28, r24	; 40
 1cc:	ca 01       	movw	r24, r20
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0xa0>
		_delay_ms(3);
		a++;
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
		PWM_GREEN = a;
		_delay_ms(3);
		a++;
	}
	a=0;
	while(a!=value_b)
 1d4:	23 17       	cp	r18, r19
 1d6:	b1 f7       	brne	.-20     	; 0x1c4 <main+0x96>
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	98 ea       	ldi	r25, 0xA8	; 168
 1de:	e9 2e       	mov	r14, r25
 1e0:	91 e6       	ldi	r25, 0x61	; 97
 1e2:	f9 2e       	mov	r15, r25
 1e4:	c4 ec       	ldi	r28, 0xC4	; 196
 1e6:	d9 e0       	ldi	r29, 0x09	; 9
 1e8:	89 e1       	ldi	r24, 0x19	; 25
 1ea:	c8 2e       	mov	r12, r24
 1ec:	d1 2c       	mov	r13, r1
	
	while(1)
	{	
		cnt = 0;
		
		TEST_PIN(0);	//mode set
 1ee:	80 99       	sbic	0x10, 0	; 16
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <main+0xca>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <main+0xcc>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
		TEST_PIN(1);	//down
 1fa:	81 99       	sbic	0x10, 1	; 16
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <main+0xd4>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	01 e0       	ldi	r16, 0x01	; 1
		TEST_PIN(2);	//up
 202:	82 99       	sbic	0x10, 2	; 16
 204:	02 c0       	rjmp	.+4      	; 0x20a <main+0xdc>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	02 e0       	ldi	r16, 0x02	; 2
		TEST_PIN(3);	//store
 20a:	83 99       	sbic	0x10, 3	; 16
 20c:	02 c0       	rjmp	.+4      	; 0x212 <main+0xe4>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	03 e0       	ldi	r16, 0x03	; 3
		
		if (cnt != 1) 
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	61 f7       	brne	.-40     	; 0x1ee <main+0xc0>
			continue;
			
		if(new_pos == 0)	//mode set
 216:	00 23       	and	r16, r16
 218:	11 f5       	brne	.+68     	; 0x25e <main+0x130>
 21a:	88 eb       	ldi	r24, 0xB8	; 184
 21c:	9b e0       	ldi	r25, 0x0B	; 11
 21e:	f6 01       	movw	r30, r12
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0xf2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d9 f7       	brne	.-10     	; 0x21e <main+0xf0>
		{
			_delay_ms(300);	// opoznienie pomiedzy trybami
			
			mode++;
 228:	1f 5f       	subi	r17, 0xFF	; 255
			
			if(mode >= 5) mode = 0;
 22a:	15 30       	cpi	r17, 0x05	; 5
 22c:	08 f0       	brcs	.+2      	; 0x230 <main+0x102>
 22e:	10 e0       	ldi	r17, 0x00	; 0

			//wyłącz wszystkie diody
			PORT_OUT_B |= _BV(OUT_B);
 230:	c1 9a       	sbi	0x18, 1	; 24
			PORT_OUT_G |= _BV(OUT_G);
 232:	96 9a       	sbi	0x12, 6	; 18
			PORT_OUT_R |= _BV(OUT_R);
 234:	c0 9a       	sbi	0x18, 0	; 24

			switch(mode)
 236:	12 30       	cpi	r17, 0x02	; 2
 238:	61 f0       	breq	.+24     	; 0x252 <main+0x124>
 23a:	13 30       	cpi	r17, 0x03	; 3
 23c:	18 f4       	brcc	.+6      	; 0x244 <main+0x116>
 23e:	11 30       	cpi	r17, 0x01	; 1
 240:	b1 f6       	brne	.-84     	; 0x1ee <main+0xc0>
 242:	05 c0       	rjmp	.+10     	; 0x24e <main+0x120>
 244:	13 30       	cpi	r17, 0x03	; 3
 246:	39 f0       	breq	.+14     	; 0x256 <main+0x128>
 248:	14 30       	cpi	r17, 0x04	; 4
 24a:	89 f6       	brne	.-94     	; 0x1ee <main+0xc0>
 24c:	06 c0       	rjmp	.+12     	; 0x25a <main+0x12c>
			{
				case 1:	PORT_OUT_R &= ~_BV(OUT_R);	//ustawianie czerwonego
 24e:	c0 98       	cbi	0x18, 0	; 24
 250:	ce cf       	rjmp	.-100    	; 0x1ee <main+0xc0>
					break;
				case 2: PORT_OUT_G &= ~_BV(OUT_G);	//ustawianie zielonego
 252:	96 98       	cbi	0x12, 6	; 18
 254:	cc cf       	rjmp	.-104    	; 0x1ee <main+0xc0>
					break;
				case 3: PORT_OUT_B &= ~_BV(OUT_B);	//ustawianie niebieskiego
 256:	c1 98       	cbi	0x18, 1	; 24
 258:	ca cf       	rjmp	.-108    	; 0x1ee <main+0xc0>
					break;
				case 4:	demo();						//tryb demo
 25a:	01 df       	rcall	.-510    	; 0x5e <demo>
 25c:	c8 cf       	rjmp	.-112    	; 0x1ee <main+0xc0>
					break;
			}
		}
		
		
		if(new_pos == 1)	//down
 25e:	01 30       	cpi	r16, 0x01	; 1
 260:	e1 f4       	brne	.+56     	; 0x29a <main+0x16c>
 262:	ce 01       	movw	r24, r28
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x136>
		{
			_delay_ms(10);
			switch(mode)
 268:	12 30       	cpi	r17, 0x02	; 2
 26a:	59 f0       	breq	.+22     	; 0x282 <main+0x154>
 26c:	13 30       	cpi	r17, 0x03	; 3
 26e:	79 f0       	breq	.+30     	; 0x28e <main+0x160>
 270:	11 30       	cpi	r17, 0x01	; 1
 272:	09 f0       	breq	.+2      	; 0x276 <main+0x148>
 274:	bc cf       	rjmp	.-136    	; 0x1ee <main+0xc0>
			{
				case 1: 
				{
					if(value_r > 0x00) value_r--;
 276:	80 91 60 00 	lds	r24, 0x0060
 27a:	88 23       	and	r24, r24
 27c:	09 f1       	breq	.+66     	; 0x2c0 <main+0x192>
 27e:	81 50       	subi	r24, 0x01	; 1
 280:	1d c0       	rjmp	.+58     	; 0x2bc <main+0x18e>
					PWM_RED = value_r;
				}
				break;
				case 2: 
				{
					if(value_g > 0x00) value_g--;
 282:	80 91 61 00 	lds	r24, 0x0061
 286:	88 23       	and	r24, r24
 288:	31 f1       	breq	.+76     	; 0x2d6 <main+0x1a8>
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	22 c0       	rjmp	.+68     	; 0x2d2 <main+0x1a4>
					PWM_GREEN = value_g;
				}
				break;
				case 3: 
				{
					if(value_b > 0x00) value_b--;
 28e:	80 91 62 00 	lds	r24, 0x0062
 292:	88 23       	and	r24, r24
 294:	69 f1       	breq	.+90     	; 0x2f0 <main+0x1c2>
 296:	81 50       	subi	r24, 0x01	; 1
 298:	29 c0       	rjmp	.+82     	; 0x2ec <main+0x1be>
				}
				break;
			}
		}//new_pos == 1

		if(new_pos == 2)	//up
 29a:	02 30       	cpi	r16, 0x02	; 2
 29c:	79 f5       	brne	.+94     	; 0x2fc <main+0x1ce>
 29e:	ce 01       	movw	r24, r28
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x172>
		{
			_delay_ms(10);
			switch(mode)
 2a4:	12 30       	cpi	r17, 0x02	; 2
 2a6:	81 f0       	breq	.+32     	; 0x2c8 <main+0x19a>
 2a8:	13 30       	cpi	r17, 0x03	; 3
 2aa:	d9 f0       	breq	.+54     	; 0x2e2 <main+0x1b4>
 2ac:	11 30       	cpi	r17, 0x01	; 1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x184>
 2b0:	9e cf       	rjmp	.-196    	; 0x1ee <main+0xc0>
			{
				case 1: 
				{
					if(value_r < 0xff) value_r++;
 2b2:	80 91 60 00 	lds	r24, 0x0060
 2b6:	8f 3f       	cpi	r24, 0xFF	; 255
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <main+0x192>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 60 00 	sts	0x0060, r24
					PWM_RED = value_r;
 2c0:	80 91 60 00 	lds	r24, 0x0060
 2c4:	86 bf       	out	0x36, r24	; 54
 2c6:	93 cf       	rjmp	.-218    	; 0x1ee <main+0xc0>
				}
				break;
				case 2: 
				{
					if(value_g < 0xff) value_g++;
 2c8:	80 91 61 00 	lds	r24, 0x0061
 2cc:	8f 3f       	cpi	r24, 0xFF	; 255
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <main+0x1a8>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 61 00 	sts	0x0061, r24
					PWM_GREEN = value_g;
 2d6:	80 91 61 00 	lds	r24, 0x0061
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9b bd       	out	0x2b, r25	; 43
 2de:	8a bd       	out	0x2a, r24	; 42
 2e0:	86 cf       	rjmp	.-244    	; 0x1ee <main+0xc0>
				}
				break;
				case 3: 
				{
					if(value_b < 0xff) value_b++;
 2e2:	80 91 62 00 	lds	r24, 0x0062
 2e6:	8f 3f       	cpi	r24, 0xFF	; 255
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <main+0x1c2>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 62 00 	sts	0x0062, r24
					PWM_BLUE = value_b;
 2f0:	80 91 62 00 	lds	r24, 0x0062
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	99 bd       	out	0x29, r25	; 41
 2f8:	88 bd       	out	0x28, r24	; 40
 2fa:	79 cf       	rjmp	.-270    	; 0x1ee <main+0xc0>
				}
				break;
			}
		}//new_pos == 2
		
		if(new_pos == 3)	//store
 2fc:	03 30       	cpi	r16, 0x03	; 3
 2fe:	09 f0       	breq	.+2      	; 0x302 <main+0x1d4>
 300:	76 cf       	rjmp	.-276    	; 0x1ee <main+0xc0>
		{
			
			eeprom_write_byte(&eeprom_red, value_r); 
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	60 91 60 00 	lds	r22, 0x0060
 30a:	b5 d0       	rcall	.+362    	; 0x476 <__eewr_byte_tn2313>
			eeprom_write_byte(&eeprom_green, value_g); 
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	60 91 61 00 	lds	r22, 0x0061
 314:	b0 d0       	rcall	.+352    	; 0x476 <__eewr_byte_tn2313>
			eeprom_write_byte(&eeprom_blue, value_b); 
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	60 91 62 00 	lds	r22, 0x0062
 31e:	ab d0       	rcall	.+342    	; 0x476 <__eewr_byte_tn2313>
 320:	20 e0       	ldi	r18, 0x00	; 0
			
			for(a=0;a<6;a++)
			{
				PORT_OUT_R &= ~_BV(OUT_R);
 322:	c0 98       	cbi	0x18, 0	; 24
				PORT_OUT_G &= ~_BV(OUT_G);
 324:	96 98       	cbi	0x12, 6	; 18
				PORT_OUT_B &= ~_BV(OUT_B);
 326:	c1 98       	cbi	0x18, 1	; 24
 328:	c7 01       	movw	r24, r14
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x1fc>
				
				_delay_ms(100);
								
				PORT_OUT_R |= _BV(OUT_R);
 32e:	c0 9a       	sbi	0x18, 0	; 24
				PORT_OUT_G |= _BV(OUT_G);
 330:	96 9a       	sbi	0x12, 6	; 18
				PORT_OUT_B |= _BV(OUT_B);
 332:	c1 9a       	sbi	0x18, 1	; 24
 334:	c7 01       	movw	r24, r14
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x208>
			
			eeprom_write_byte(&eeprom_red, value_r); 
			eeprom_write_byte(&eeprom_green, value_g); 
			eeprom_write_byte(&eeprom_blue, value_b); 
			
			for(a=0;a<6;a++)
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	26 30       	cpi	r18, 0x06	; 6
 33e:	89 f7       	brne	.-30     	; 0x322 <main+0x1f4>
 340:	56 cf       	rjmp	.-340    	; 0x1ee <main+0xc0>

00000342 <int0_init>:
#include "enc.h"

void int0_init(void)
{
	MCUCR |= _BV(ISC00);
 342:	85 b7       	in	r24, 0x35	; 53
 344:	81 60       	ori	r24, 0x01	; 1
 346:	85 bf       	out	0x35, r24	; 53
	MCUCR |= _BV(ISC01);
 348:	85 b7       	in	r24, 0x35	; 53
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	85 bf       	out	0x35, r24	; 53
	GIMSK |= _BV(INT0);
 34e:	8b b7       	in	r24, 0x3b	; 59
 350:	80 64       	ori	r24, 0x40	; 64
 352:	8b bf       	out	0x3b, r24	; 59
}
 354:	08 95       	ret

00000356 <int1_init>:

void int1_init(void)
{
	MCUCR |= _BV(ISC10);
 356:	85 b7       	in	r24, 0x35	; 53
 358:	84 60       	ori	r24, 0x04	; 4
 35a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= _BV(ISC11);
 35c:	85 b7       	in	r24, 0x35	; 53
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	85 bf       	out	0x35, r24	; 53
	GIMSK |= _BV(INT1);
 362:	8b b7       	in	r24, 0x3b	; 59
 364:	80 68       	ori	r24, 0x80	; 128
 366:	8b bf       	out	0x3b, r24	; 59
}
 368:	08 95       	ret

0000036a <impulsator>:



uint8_t impulsator(uint8_t liczba)
{ 
   if((bit_is_clear(ENC_PORT,KANAL_A_PIN)))
 36a:	96 99       	sbic	0x12, 6	; 18
 36c:	21 c0       	rjmp	.+66     	; 0x3b0 <impulsator+0x46>
 36e:	e8 ee       	ldi	r30, 0xE8	; 232
 370:	f3 e0       	ldi	r31, 0x03	; 3
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <impulsator+0x8>
   {
      _delay_ms(4);
      unsigned char zajetosc = 0;
      while((bit_is_clear(ENC_PORT,KANAL_A_PIN))){} // czekam na narastające zbocze na kanale A
 376:	96 9b       	sbis	0x12, 6	; 18
 378:	fe cf       	rjmp	.-4      	; 0x376 <impulsator+0xc>
 37a:	28 ee       	ldi	r18, 0xE8	; 232
 37c:	33 e0       	ldi	r19, 0x03	; 3
 37e:	f9 01       	movw	r30, r18
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <impulsator+0x16>
      _delay_ms(4);
      if((bit_is_set(ENC_PORT,KANAL_B_PIN)))
 384:	95 9b       	sbis	0x12, 5	; 18
 386:	08 c0       	rjmp	.+16     	; 0x398 <impulsator+0x2e>
      {
         if(liczba < 255 && ! zajetosc)
 388:	8f 3f       	cpi	r24, 0xFF	; 255
 38a:	31 f0       	breq	.+12     	; 0x398 <impulsator+0x2e>
         {
            liczba++;
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	f9 01       	movw	r30, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <impulsator+0x26>
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	01 c0       	rjmp	.+2      	; 0x39a <impulsator+0x30>
 398:	90 e0       	ldi	r25, 0x00	; 0
            _delay_ms(4);
            zajetosc = 1;
         }
      }
      if((bit_is_clear(ENC_PORT,KANAL_B_PIN)))
 39a:	95 99       	sbic	0x12, 5	; 18
 39c:	09 c0       	rjmp	.+18     	; 0x3b0 <impulsator+0x46>
      {
         if(liczba >= 255 && ! zajetosc)
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	39 f4       	brne	.+14     	; 0x3b0 <impulsator+0x46>
 3a2:	99 23       	and	r25, r25
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <impulsator+0x46>
 3a6:	88 ee       	ldi	r24, 0xE8	; 232
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <impulsator+0x40>
 3ae:	8e ef       	ldi	r24, 0xFE	; 254
 3b0:	e8 e8       	ldi	r30, 0x88	; 136
 3b2:	f3 e1       	ldi	r31, 0x13	; 19
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <impulsator+0x4a>
         }
      }
   }
   _delay_ms(20);
return(liczba);
}
 3b8:	08 95       	ret

000003ba <check_key>:

uint8_t check_key(uint8_t laststate)
{
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	0f 92       	push	r0
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	98 2f       	mov	r25, r24
	uint8_t tmp = ENC_PORT;
 3c6:	82 b3       	in	r24, 0x12	; 18
 3c8:	89 83       	std	Y+1, r24	; 0x01

	if(bit_is_set(tmp,6))
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	86 fd       	sbrc	r24, 6
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <check_key+0x1c>
		if(laststate)
		return(1);
		else
		return(0);
	}
	if(bit_is_clear(tmp,6))
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	86 fd       	sbrc	r24, 6
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <check_key+0x20>
 3d6:	91 11       	cpse	r25, r1
 3d8:	91 e0       	ldi	r25, 0x01	; 1
		return(1);
		else
		return(0);
	}
	return(laststate);
}
 3da:	89 2f       	mov	r24, r25
 3dc:	0f 90       	pop	r0
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <enc_dir>:


uint8_t enc_dir(uint8_t tact)
{
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	0f 92       	push	r0
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	28 2f       	mov	r18, r24
 3f0:	8a e6       	ldi	r24, 0x6A	; 106
 3f2:	98 e1       	ldi	r25, 0x18	; 24
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <enc_dir+0x10>
_delay_ms(25);
uint8_t tmp = ENC_PORT;
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	89 83       	std	Y+1, r24	; 0x01
if(bit_is_set(tmp,5))
 3fc:	fe 01       	movw	r30, r28
 3fe:	31 96       	adiw	r30, 0x01	; 1
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	85 ff       	sbrs	r24, 5
 404:	06 c0       	rjmp	.+12     	; 0x412 <enc_dir+0x2e>
{
   if(bit_is_set(tmp,6))
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	86 fd       	sbrc	r24, 6
 40a:	20 e0       	ldi	r18, 0x00	; 0
   tact = 0;
   if(bit_is_clear(tmp,6))
 40c:	80 81       	ld	r24, Z
 40e:	86 ff       	sbrs	r24, 6
 410:	21 e0       	ldi	r18, 0x01	; 1
   tact = 1;
}
if(bit_is_clear(tmp,5))
 412:	80 81       	ld	r24, Z
 414:	85 fd       	sbrc	r24, 5
 416:	06 c0       	rjmp	.+12     	; 0x424 <enc_dir+0x40>
{
   if(bit_is_set(tmp,6))
 418:	80 81       	ld	r24, Z
 41a:	86 fd       	sbrc	r24, 6
 41c:	21 e0       	ldi	r18, 0x01	; 1
   tact = 1;
   if(bit_is_clear(tmp,6))
 41e:	80 81       	ld	r24, Z
 420:	86 ff       	sbrs	r24, 6
 422:	20 e0       	ldi	r18, 0x00	; 0
   tact = 0;
}
return(tact);
} 
 424:	82 2f       	mov	r24, r18
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <PWM_T0_init>:
#include "pwm.h"

void PWM_T0_init(void)
{
	TCCR0A |= (1<<COM0A1)|(1<<COM0A0)|(1<<COM0B1)|(1<<COM0B0)|(1<<WGM01)|(1<<WGM00);//tryb szybkiej mod. PWM 
 42e:	80 b7       	in	r24, 0x30	; 48
 430:	83 6f       	ori	r24, 0xF3	; 243
 432:	80 bf       	out	0x30, r24	; 48
	TCCR0B |= (1<<CS01);										//preskaler 8, przy f=4MHz Fpwm=960 Hz dla obu kanalow PWM
 434:	83 b7       	in	r24, 0x33	; 51
 436:	82 60       	ori	r24, 0x02	; 2
 438:	83 bf       	out	0x33, r24	; 51
	PWMT0A_DDR  |=  _BV(PWM_T0A_OUT); 							//linia portu dla PWMT0A jako wyjście
 43a:	ba 9a       	sbi	0x17, 2	; 23
	PWMT0A_PORT &= ~_BV(PWM_T0A_OUT);							//bez podciągania
 43c:	c2 98       	cbi	0x18, 2	; 24
	OCR0A = 0x00;												//poczatkowy stan licznika dla PWM od T0A
 43e:	16 be       	out	0x36, r1	; 54

	PWMT0B_DDR  |=  _BV(PWM_T0B_OUT); 							//linia portu dla PWMT0A jako wyjście
 440:	8d 9a       	sbi	0x11, 5	; 17
	PWMT0B_PORT &= ~_BV(PWM_T0B_OUT);							//bez podciągania
 442:	95 98       	cbi	0x12, 5	; 18
	OCR0B = 0x00;												//poczatkowy stan licznika dla PWM od T0B
 444:	1c be       	out	0x3c, r1	; 60
}	
 446:	08 95       	ret

00000448 <PWM_T1_init>:

void PWM_T1_init(void)
{
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0)|(1<<WGM12)|(1<<WGM10);//tryb szybkiej mod. PWM 
 448:	8f b5       	in	r24, 0x2f	; 47
 44a:	89 6f       	ori	r24, 0xF9	; 249
 44c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);										//preskaler 8, przy f=4MHz Fpwm=960 Hz dla obu kanalow PWM
 44e:	8e b5       	in	r24, 0x2e	; 46
 450:	82 60       	ori	r24, 0x02	; 2
 452:	8e bd       	out	0x2e, r24	; 46
	PWMT1A_DDR  |=  _BV(PWM_T1A_OUT); 							//linia portu dla PWMT1A jako wyjście
 454:	bb 9a       	sbi	0x17, 3	; 23
	PWMT1A_PORT &= ~_BV(PWM_T1A_OUT);							//bez podciągania
 456:	c3 98       	cbi	0x18, 3	; 24
	OCR1A = 0x00;												//poczatkowy stan licznika dla PWM od T1A
 458:	1b bc       	out	0x2b, r1	; 43
 45a:	1a bc       	out	0x2a, r1	; 42

	PWMT1B_DDR  |=  _BV(PWM_T1B_OUT); 							//linia portu dla PWMT1A jako wyjście
 45c:	bc 9a       	sbi	0x17, 4	; 23
	PWMT1B_PORT &= ~_BV(PWM_T1B_OUT);							//bez podciągania
 45e:	c4 98       	cbi	0x18, 4	; 24
	OCR1B = 0x00;												//poczatkowy stan licznika dla PWM od T1B	
 460:	19 bc       	out	0x29, r1	; 41
 462:	18 bc       	out	0x28, r1	; 40
}
 464:	08 95       	ret

00000466 <__eerd_byte_tn2313>:
 466:	e1 99       	sbic	0x1c, 1	; 28
 468:	fe cf       	rjmp	.-4      	; 0x466 <__eerd_byte_tn2313>
 46a:	1f ba       	out	0x1f, r1	; 31
 46c:	8e bb       	out	0x1e, r24	; 30
 46e:	e0 9a       	sbi	0x1c, 0	; 28
 470:	99 27       	eor	r25, r25
 472:	8d b3       	in	r24, 0x1d	; 29
 474:	08 95       	ret

00000476 <__eewr_byte_tn2313>:
 476:	26 2f       	mov	r18, r22

00000478 <__eewr_r18_tn2313>:
 478:	e1 99       	sbic	0x1c, 1	; 28
 47a:	fe cf       	rjmp	.-4      	; 0x478 <__eewr_r18_tn2313>
 47c:	1c ba       	out	0x1c, r1	; 28
 47e:	1f ba       	out	0x1f, r1	; 31
 480:	8e bb       	out	0x1e, r24	; 30
 482:	2d bb       	out	0x1d, r18	; 29
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	e2 9a       	sbi	0x1c, 2	; 28
 48a:	e1 9a       	sbi	0x1c, 1	; 28
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	08 95       	ret

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
