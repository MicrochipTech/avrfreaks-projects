
RealTimeClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800104  00800104  00000930  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d3  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a41  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000494  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a29  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d6  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_2>
   c:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_3>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_5>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_22>

0000005c <LCD_character_table>:
  5c:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e8 e9       	ldi	r30, 0x98	; 152
  dc:	f8 e0       	ldi	r31, 0x08	; 8
  de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
  e4:	a4 30       	cpi	r26, 0x04	; 4
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	a4 e0       	ldi	r26, 0x04	; 4
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a2 34       	cpi	r26, 0x42	; 66
  f6:	b1 07       	cpc	r27, r17
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  fe:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <setSecond>:
	PRR |= (1<<PRSPI) | (1<<PRUSART0) | (1<<PRADC);
}

void setSecond(void)
{
	if (gSECOND < 59)
 106:	80 91 0c 01 	lds	r24, 0x010C
 10a:	8b 33       	cpi	r24, 0x3B	; 59
 10c:	20 f4       	brcc	.+8      	; 0x116 <setSecond+0x10>
		gSECOND++;
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 0c 01 	sts	0x010C, r24
 114:	08 95       	ret
	else gSECOND = 0;
 116:	10 92 0c 01 	sts	0x010C, r1
 11a:	08 95       	ret

0000011c <setMinute>:
}

void setMinute(void)
{
	if (gMINUTE < 59)
 11c:	80 91 0d 01 	lds	r24, 0x010D
 120:	8b 33       	cpi	r24, 0x3B	; 59
 122:	20 f4       	brcc	.+8      	; 0x12c <setMinute+0x10>
		gMINUTE++;
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 0d 01 	sts	0x010D, r24
 12a:	08 95       	ret
	else gMINUTE = 0;
 12c:	10 92 0d 01 	sts	0x010D, r1
 130:	08 95       	ret

00000132 <setHour>:
}

void setHour(void)
{
	if (gHOUR < 12)
 132:	80 91 0b 01 	lds	r24, 0x010B
 136:	8c 30       	cpi	r24, 0x0C	; 12
 138:	10 f4       	brcc	.+4      	; 0x13e <setHour+0xc>
		gHOUR++;
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	01 c0       	rjmp	.+2      	; 0x140 <setHour+0xe>
	else gHOUR = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 0b 01 	sts	0x010B, r24
 144:	08 95       	ret

00000146 <RTC_init>:
	LCD_putc(5,SL);
	LCD_UpdateRequired(1,0);
 }

void RTC_init(void)
{	
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14a:	20 e3       	ldi	r18, 0x30	; 48
 14c:	35 e7       	ldi	r19, 0x75	; 117
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <RTC_init+0xa>
	// initialize Timer/counter2 as asynchronous using the 32.768kHz watch crystal.
    // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	8a 30       	cpi	r24, 0x0A	; 10
 158:	91 05       	cpc	r25, r1
 15a:	c9 f7       	brne	.-14     	; 0x14e <RTC_init+0x8>
			_delay_loop_2(30000);   
			
    cli();					// disabel global interrupt
 15c:	f8 94       	cli

    cbi(TIMSK2, TOIE2);		// disable OCIE2A and TOIE2
 15e:	80 91 70 00 	lds	r24, 0x0070
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	80 93 70 00 	sts	0x0070, r24

    ASSR = (1<<AS2);		// select asynchronous operation of Timer2
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	80 93 b6 00 	sts	0x00B6, r24

    TCNT2 = 0;				// clear TCNT2A
 16e:	10 92 b2 00 	sts	0x00B2, r1
	
	// select precaler: 32.768 kHz / 128 = 1 sec between each overflow
    TCCR2A |= (1<<CS22) | (1<<CS20);
 172:	80 91 b0 00 	lds	r24, 0x00B0
 176:	85 60       	ori	r24, 0x05	; 5
 178:	80 93 b0 00 	sts	0x00B0, r24
	
	// wait for TCN2UB and TCR2UB to be cleared
    while((ASSR & 0x01) | (ASSR & 0x04));	
 17c:	20 91 b6 00 	lds	r18, 0x00B6
 180:	80 91 b6 00 	lds	r24, 0x00B6
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	84 70       	andi	r24, 0x04	; 4
 188:	90 70       	andi	r25, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	21 70       	andi	r18, 0x01	; 1
 18e:	30 70       	andi	r19, 0x00	; 0
 190:	82 2b       	or	r24, r18
 192:	93 2b       	or	r25, r19
 194:	89 2b       	or	r24, r25
 196:	91 f7       	brne	.-28     	; 0x17c <RTC_init+0x36>

    TIFR2 = 0xFF;			// clear interrupt-flags
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	87 bb       	out	0x17, r24	; 23
    sbi(TIMSK2, TOIE2);		// enable Timer2 overflow interrupt
 19c:	80 91 70 00 	lds	r24, 0x0070
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	80 93 70 00 	sts	0x0070, r24

    sei();					// enable global interrupt
 1a6:	78 94       	sei

    // initial time and date setting
    gSECOND  = 0;
 1a8:	10 92 0c 01 	sts	0x010C, r1
    gMINUTE  = 0;
 1ac:	10 92 0d 01 	sts	0x010D, r1
    gHOUR    = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 0b 01 	sts	0x010B, r24
}
 1b6:	08 95       	ret

000001b8 <getkey>:

char getkey(void)
{
    char k;

    cli(); // disable interrrupts so 'KEY' won't change while in use
 1b8:	f8 94       	cli

    if (KEY_VALID) // Check for unread key in buffer
 1ba:	80 91 05 01 	lds	r24, 0x0105
 1be:	88 23       	and	r24, r24
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <getkey+0xe>
 1c2:	95 e0       	ldi	r25, 0x05	; 5
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <getkey+0x16>
    {
        k = KEY;
 1c6:	90 91 04 01 	lds	r25, 0x0104
        KEY_VALID = FALSE;
 1ca:	10 92 05 01 	sts	0x0105, r1
    }
    else
        k = KEY_INVALID; // No key stroke available

    sei(); // enable interrupts
 1ce:	78 94       	sei

	if(k != KEY_INVALID)
 1d0:	95 30       	cpi	r25, 0x05	; 5
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <getkey+0x1e>
 1d4:	46 c0       	rjmp	.+140    	; 0x262 <getkey+0xaa>
	{		
		switch(k)
 1d6:	92 30       	cpi	r25, 0x02	; 2
 1d8:	c9 f0       	breq	.+50     	; 0x20c <getkey+0x54>
 1da:	93 30       	cpi	r25, 0x03	; 3
 1dc:	18 f4       	brcc	.+6      	; 0x1e4 <getkey+0x2c>
 1de:	99 23       	and	r25, r25
 1e0:	31 f0       	breq	.+12     	; 0x1ee <getkey+0x36>
 1e2:	3f c0       	rjmp	.+126    	; 0x262 <getkey+0xaa>
 1e4:	93 30       	cpi	r25, 0x03	; 3
 1e6:	01 f1       	breq	.+64     	; 0x228 <getkey+0x70>
 1e8:	94 30       	cpi	r25, 0x04	; 4
 1ea:	d9 f5       	brne	.+118    	; 0x262 <getkey+0xaa>
 1ec:	2c c0       	rjmp	.+88     	; 0x246 <getkey+0x8e>
		{
			case KEY_UP:
				if (set_enable) 	
 1ee:	80 91 06 01 	lds	r24, 0x0106
 1f2:	88 23       	and	r24, r24
 1f4:	b1 f1       	breq	.+108    	; 0x262 <getkey+0xaa>
	else gSECOND = 0;
}

void setMinute(void)
{
	if (gMINUTE < 59)
 1f6:	80 91 0d 01 	lds	r24, 0x010D
 1fa:	8b 33       	cpi	r24, 0x3B	; 59
 1fc:	20 f4       	brcc	.+8      	; 0x206 <getkey+0x4e>
		gMINUTE++;
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 0d 01 	sts	0x010D, r24
 204:	2e c0       	rjmp	.+92     	; 0x262 <getkey+0xaa>
	else gMINUTE = 0;
 206:	10 92 0d 01 	sts	0x010D, r1
 20a:	2b c0       	rjmp	.+86     	; 0x262 <getkey+0xaa>
				break;
			case KEY_DOWN:
				
				break;
			case KEY_LEFT:
				if (set_enable)
 20c:	80 91 06 01 	lds	r24, 0x0106
 210:	88 23       	and	r24, r24
 212:	39 f1       	breq	.+78     	; 0x262 <getkey+0xaa>
	else gMINUTE = 0;
}

void setHour(void)
{
	if (gHOUR < 12)
 214:	80 91 0b 01 	lds	r24, 0x010B
 218:	8c 30       	cpi	r24, 0x0C	; 12
 21a:	10 f4       	brcc	.+4      	; 0x220 <getkey+0x68>
		gHOUR++;
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	01 c0       	rjmp	.+2      	; 0x222 <getkey+0x6a>
	else gHOUR = 1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 0b 01 	sts	0x010B, r24
 226:	1d c0       	rjmp	.+58     	; 0x262 <getkey+0xaa>
			case KEY_LEFT:
				if (set_enable)
					setHour();
				break;
			case KEY_RIGHT:
				if (set_enable)
 228:	80 91 06 01 	lds	r24, 0x0106
 22c:	88 23       	and	r24, r24
 22e:	c9 f0       	breq	.+50     	; 0x262 <getkey+0xaa>
	PRR |= (1<<PRSPI) | (1<<PRUSART0) | (1<<PRADC);
}

void setSecond(void)
{
	if (gSECOND < 59)
 230:	80 91 0c 01 	lds	r24, 0x010C
 234:	8b 33       	cpi	r24, 0x3B	; 59
 236:	20 f4       	brcc	.+8      	; 0x240 <getkey+0x88>
		gSECOND++;
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	80 93 0c 01 	sts	0x010C, r24
 23e:	11 c0       	rjmp	.+34     	; 0x262 <getkey+0xaa>
	else gSECOND = 0;
 240:	10 92 0c 01 	sts	0x010C, r1
 244:	0e c0       	rjmp	.+28     	; 0x262 <getkey+0xaa>
			case KEY_RIGHT:
				if (set_enable)
					setSecond();
				break;
			case KEY_PUSH:
				if (set_enable == 0)
 246:	80 91 06 01 	lds	r24, 0x0106
 24a:	88 23       	and	r24, r24
 24c:	21 f4       	brne	.+8      	; 0x256 <getkey+0x9e>
					set_enable = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 06 01 	sts	0x0106, r24
 254:	06 c0       	rjmp	.+12     	; 0x262 <getkey+0xaa>
				else if (set_enable == 1)
 256:	80 91 06 01 	lds	r24, 0x0106
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	11 f4       	brne	.+4      	; 0x262 <getkey+0xaa>
					set_enable= 0;
 25e:	10 92 06 01 	sts	0x0106, r1
				break;
		}
	}	

    return k;
}
 262:	89 2f       	mov	r24, r25
 264:	08 95       	ret

00000266 <PinChangeInterrupt>:
void PinChangeInterrupt(void)
{
    char buttons;
    char key;

    buttons = (~PINB) & PINB_MASK;
 266:	83 b1       	in	r24, 0x03	; 3
    buttons |= (~PINE) & PINE_MASK;
 268:	9c b1       	in	r25, 0x0c	; 12
 26a:	90 95       	com	r25
 26c:	9c 70       	andi	r25, 0x0C	; 12
 26e:	80 95       	com	r24
 270:	80 7d       	andi	r24, 0xD0	; 208
 272:	98 2b       	or	r25, r24

    // Output virtual keys
    if (buttons & (1<<BUTTON_A))
 274:	96 ff       	sbrs	r25, 6
 276:	02 c0       	rjmp	.+4      	; 0x27c <PinChangeInterrupt+0x16>
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0f c0       	rjmp	.+30     	; 0x29a <PinChangeInterrupt+0x34>
        key = KEY_UP;
    else if (buttons & (1<<BUTTON_B))
 27c:	97 ff       	sbrs	r25, 7
 27e:	02 c0       	rjmp	.+4      	; 0x284 <PinChangeInterrupt+0x1e>
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0b c0       	rjmp	.+22     	; 0x29a <PinChangeInterrupt+0x34>
        key = KEY_DOWN;
    else if (buttons & (1<<BUTTON_C))
 284:	92 ff       	sbrs	r25, 2
 286:	02 c0       	rjmp	.+4      	; 0x28c <PinChangeInterrupt+0x26>
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	07 c0       	rjmp	.+14     	; 0x29a <PinChangeInterrupt+0x34>
        key = KEY_LEFT;
    else if (buttons & (1<<BUTTON_D))
 28c:	93 ff       	sbrs	r25, 3
 28e:	02 c0       	rjmp	.+4      	; 0x294 <PinChangeInterrupt+0x2e>
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	03 c0       	rjmp	.+6      	; 0x29a <PinChangeInterrupt+0x34>
        key = KEY_RIGHT;
    else if (buttons & (1<<BUTTON_O))
 294:	94 ff       	sbrs	r25, 4
 296:	0a c0       	rjmp	.+20     	; 0x2ac <PinChangeInterrupt+0x46>
 298:	94 e0       	ldi	r25, 0x04	; 4
    else
        key = KEY_INVALID;
  
    if(key != KEY_INVALID)
    {
        if (!KEY_VALID)
 29a:	80 91 05 01 	lds	r24, 0x0105
 29e:	88 23       	and	r24, r24
 2a0:	29 f4       	brne	.+10     	; 0x2ac <PinChangeInterrupt+0x46>
        {
            KEY = key;          // Store key in global key buffer
 2a2:	90 93 04 01 	sts	0x0104, r25
            KEY_VALID = TRUE;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 05 01 	sts	0x0105, r24
        }
    }
    
    EIFR = (1<<PCIF1) | (1<<PCIF0);     // Delete pin change interrupt flags 
 2ac:	80 ec       	ldi	r24, 0xC0	; 192
 2ae:	8c bb       	out	0x1c, r24	; 28
	
	
	if(ENABLED)
 2b0:	80 91 00 01 	lds	r24, 0x0100
 2b4:	88 23       	and	r24, r24
 2b6:	11 f0       	breq	.+4      	; 0x2bc <PinChangeInterrupt+0x56>
	{
		getkey();
 2b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <getkey>
 2bc:	08 95       	ret

000002be <__vector_2>:

    return k;
}

ISR(SIG_PIN_CHANGE0)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
    PinChangeInterrupt();
 2e0:	0e 94 33 01 	call	0x266	; 0x266 <PinChangeInterrupt>
}
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <__vector_3>:

ISR(SIG_PIN_CHANGE1)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
    PinChangeInterrupt();    
 328:	0e 94 33 01 	call	0x266	; 0x266 <PinChangeInterrupt>
}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_5>:


ISR(SIG_OVERFLOW2)
{    // one second interrupt from 32kHz watch crystal
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24

    gSECOND++;			// increment second
 35a:	80 91 0c 01 	lds	r24, 0x010C
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	80 93 0c 01 	sts	0x010C, r24

    if (gSECOND == 60)
 364:	8c 33       	cpi	r24, 0x3C	; 60
 366:	a9 f4       	brne	.+42     	; 0x392 <__vector_5+0x44>
    {
        gSECOND = 0;
 368:	10 92 0c 01 	sts	0x010C, r1
        gMINUTE++;		// increment minute
 36c:	80 91 0d 01 	lds	r24, 0x010D
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 0d 01 	sts	0x010D, r24
        
        if (gMINUTE > 59)
 376:	8c 33       	cpi	r24, 0x3C	; 60
 378:	60 f0       	brcs	.+24     	; 0x392 <__vector_5+0x44>
        {
            gMINUTE = 0;
 37a:	10 92 0d 01 	sts	0x010D, r1
            gHOUR++;	// increment hour
 37e:	80 91 0b 01 	lds	r24, 0x010B
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 0b 01 	sts	0x010B, r24
            
            if (gHOUR > 12)
 388:	8d 30       	cpi	r24, 0x0D	; 13
 38a:	18 f0       	brcs	.+6      	; 0x392 <__vector_5+0x44>
            {             
                gHOUR = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 0b 01 	sts	0x010B, r24
			}
        }
    }
}
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <showClock>:
		gHOUR++;
	else gHOUR = 1;
}

void showClock(void)
{	
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
	// Convert H,M,S to BCD, store in a variable for each digit
	
	uint8_t HH, HL, MH, ML, SH, SL;

    HH = CHAR2BCD2(gHOUR);   
 3aa:	80 91 0b 01 	lds	r24, 0x010B
 3ae:	0e 94 0a 04 	call	0x814	; 0x814 <CHAR2BCD2>
 3b2:	18 2f       	mov	r17, r24
        
    HL = (HH & 0x0F) + '0';
    HH = (HH >> 4) + '0';
 3b4:	08 2f       	mov	r16, r24
 3b6:	02 95       	swap	r16
 3b8:	0f 70       	andi	r16, 0x0F	; 15
 3ba:	00 5d       	subi	r16, 0xD0	; 208
	
	//Get rid of leading zero
	if (HH == '0')
 3bc:	00 33       	cpi	r16, 0x30	; 48
 3be:	09 f4       	brne	.+2      	; 0x3c2 <showClock+0x24>
 3c0:	00 e2       	ldi	r16, 0x20	; 32
		HH = ' '; 

    MH = CHAR2BCD2(gMINUTE);
 3c2:	80 91 0d 01 	lds	r24, 0x010D
 3c6:	0e 94 0a 04 	call	0x814	; 0x814 <CHAR2BCD2>
 3ca:	d8 2e       	mov	r13, r24
    ML = (MH & 0x0F) + '0';
    MH = (MH >> 4) + '0';
 3cc:	f8 2e       	mov	r15, r24
 3ce:	f2 94       	swap	r15
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	f9 22       	and	r15, r25

    SH = CHAR2BCD2(gSECOND);
 3d4:	80 91 0c 01 	lds	r24, 0x010C
 3d8:	0e 94 0a 04 	call	0x814	; 0x814 <CHAR2BCD2>
 3dc:	c8 2e       	mov	r12, r24
    SL = (SH & 0x0F) + '0';
    SH = (SH >> 4) + '0';
 3de:	e8 2e       	mov	r14, r24
 3e0:	e2 94       	swap	r14
 3e2:	8f e0       	ldi	r24, 0x0F	; 15
 3e4:	e8 22       	and	r14, r24
	
	//Display each digit on the LCD
	LCD_putc(0,HH);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	60 2f       	mov	r22, r16
 3ea:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_putc(1,HL);
 3ee:	1f 70       	andi	r17, 0x0F	; 15
 3f0:	10 5d       	subi	r17, 0xD0	; 208
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	61 2f       	mov	r22, r17
 3f6:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_putc(2,MH);
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	f8 0e       	add	r15, r24
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	6f 2d       	mov	r22, r15
 402:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_putc(3,ML);
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	d8 22       	and	r13, r24
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	d8 0e       	add	r13, r24
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	6d 2d       	mov	r22, r13
 412:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_putc(4,SH);
 416:	80 e3       	ldi	r24, 0x30	; 48
 418:	e8 0e       	add	r14, r24
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	6e 2d       	mov	r22, r14
 41e:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_putc(5,SL);
 422:	8f e0       	ldi	r24, 0x0F	; 15
 424:	c8 22       	and	r12, r24
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	c8 0e       	add	r12, r24
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	6c 2d       	mov	r22, r12
 42e:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_putc>
	LCD_UpdateRequired(1,0);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_UpdateRequired>
 }
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	08 95       	ret

00000448 <initializer>:

void initializer()
{
	
	// Initialize the RTC
	RTC_init();
 448:	0e 94 a3 00 	call	0x146	; 0x146 <RTC_init>
		
	LCD_Init();
 44c:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_Init>

	LCD_Colon(1);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 ce 03 	call	0x79c	; 0x79c <LCD_Colon>
	
    // Init port pins
	DDRB |= 0xD8;
 456:	84 b1       	in	r24, 0x04	; 4
 458:	88 6d       	ori	r24, 0xD8	; 216
 45a:	84 b9       	out	0x04, r24	; 4
    PORTB |= PINB_MASK;
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	80 6d       	ori	r24, 0xD0	; 208
 460:	85 b9       	out	0x05, r24	; 5
    DDRE = 0x00;
 462:	1d b8       	out	0x0d, r1	; 13
    PORTE |= PINE_MASK;
 464:	8e b1       	in	r24, 0x0e	; 14
 466:	8c 60       	ori	r24, 0x0C	; 12
 468:	8e b9       	out	0x0e, r24	; 14

    // Enable pin change interrupt on PORTB and PORTE
	PCMSK0 = PINE_MASK;
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	80 93 6b 00 	sts	0x006B, r24
	PCMSK1 = PINB_MASK;
 470:	80 ed       	ldi	r24, 0xD0	; 208
 472:	80 93 6c 00 	sts	0x006C, r24
	EIFR = (1<<6)|(1<<7);
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	8c bb       	out	0x1c, r24	; 28
	EIMSK = (1<<6)|(1<<7);
 47a:	8d bb       	out	0x1d, r24	; 29
	
	// Enable "Power Save" mode in SMCR register
	SMCR |= (0<<SM2) | (1<<SM1) | (1<<SM0);
 47c:	83 b7       	in	r24, 0x33	; 51
 47e:	86 60       	ori	r24, 0x06	; 6
 480:	83 bf       	out	0x33, r24	; 51
	
	// Disable ADC
	ACSR |= (1<<ACD);
 482:	80 b7       	in	r24, 0x30	; 48
 484:	80 68       	ori	r24, 0x80	; 128
 486:	80 bf       	out	0x30, r24	; 48
	
	// Set Power Reduction Register
	// Disable SPI, USART,and ADC all the time
	PRR |= (1<<PRSPI) | (1<<PRUSART0) | (1<<PRADC);
 488:	e4 e6       	ldi	r30, 0x64	; 100
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	87 60       	ori	r24, 0x07	; 7
 490:	80 83       	st	Z, r24
}
 492:	08 95       	ret

00000494 <main>:
unsigned char gMINUTE;
unsigned char gHOUR;

int main(void)
{
	initializer();
 494:	0e 94 24 02 	call	0x448	; 0x448 <initializer>

	for(;;)
	{
		showClock();	
 498:	0e 94 cf 01 	call	0x39e	; 0x39e <showClock>
		sleep_mode();
 49c:	83 b7       	in	r24, 0x33	; 51
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	83 bf       	out	0x33, r24	; 51
 4a2:	88 95       	sleep
 4a4:	83 b7       	in	r24, 0x33	; 51
 4a6:	8e 7f       	andi	r24, 0xFE	; 254
 4a8:	83 bf       	out	0x33, r24	; 51
 4aa:	f6 cf       	rjmp	.-20     	; 0x498 <main+0x4>

000004ac <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 4ac:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 4ae:	66 30       	cpi	r22, 0x06	; 6
 4b0:	b0 f5       	brcc	.+108    	; 0x51e <__stack+0x1f>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 4b2:	8a 52       	subi	r24, 0x2A	; 42
 4b4:	81 35       	cpi	r24, 0x51	; 81
 4b6:	18 f0       	brcs	.+6      	; 0x4be <LCD_WriteDigit+0x12>
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	0c c0       	rjmp	.+24     	; 0x4d6 <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 4be:	91 36       	cpi	r25, 0x61	; 97
 4c0:	08 f0       	brcs	.+2      	; 0x4c4 <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 4c2:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 4c4:	9a 52       	subi	r25, 0x2A	; 42
 4c6:	e9 2f       	mov	r30, r25
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e4 5a       	subi	r30, 0xA4	; 164
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	45 91       	lpm	r20, Z+
 4d4:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 4d6:	86 2f       	mov	r24, r22
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	dc 01       	movw	r26, r24
 4dc:	a1 70       	andi	r26, 0x01	; 1
 4de:	b0 70       	andi	r27, 0x00	; 0
 4e0:	60 fd       	sbrc	r22, 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <LCD_WriteDigit+0x3c>
 4e4:	90 ef       	ldi	r25, 0xF0	; 240
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <LCD_WriteDigit+0x3e>
 4e8:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 4ea:	66 95       	lsr	r22
 4ec:	e6 2f       	mov	r30, r22
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e1 5f       	subi	r30, 0xF1	; 241
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 4f6:	24 2f       	mov	r18, r20
 4f8:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	56 95       	lsr	r21
 4fe:	47 95       	ror	r20
 500:	8a 95       	dec	r24
 502:	e1 f7       	brne	.-8      	; 0x4fc <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 504:	10 97       	sbiw	r26, 0x00	; 0
 506:	11 f0       	breq	.+4      	; 0x50c <__stack+0xd>
            nibble <<= 4;
 508:	22 95       	swap	r18
 50a:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 50c:	80 81       	ld	r24, Z
 50e:	89 23       	and	r24, r25
 510:	28 2b       	or	r18, r24
 512:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 514:	3f 5f       	subi	r19, 0xFF	; 255
 516:	34 30       	cpi	r19, 0x04	; 4
 518:	11 f0       	breq	.+4      	; 0x51e <__stack+0x1f>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 51a:	35 96       	adiw	r30, 0x05	; 5
 51c:	ec cf       	rjmp	.-40     	; 0x4f6 <LCD_WriteDigit+0x4a>
 51e:	08 95       	ret

00000520 <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 520:	81 11       	cpse	r24, r1
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	ef e0       	ldi	r30, 0x0F	; 15
 526:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 528:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	e3 32       	cpi	r30, 0x23	; 35
 52e:	f9 07       	cpc	r31, r25
 530:	d9 f7       	brne	.-10     	; 0x528 <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 532:	08 95       	ret

00000534 <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 90 02 	call	0x520	; 0x520 <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 53a:	8f e0       	ldi	r24, 0x0F	; 15
 53c:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 540:	87 eb       	ldi	r24, 0xB7	; 183
 542:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 546:	87 e0       	ldi	r24, 0x07	; 7
 548:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 54c:	e4 ee       	ldi	r30, 0xE4	; 228
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 ec       	ldi	r24, 0xC0	; 192
 552:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 554:	80 81       	ld	r24, Z
 556:	88 60       	ori	r24, 0x08	; 8
 558:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 55a:	10 92 07 01 	sts	0x0107, r1


}
 55e:	08 95       	ret

00000560 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

ISR(SIG_LCD)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	ef 92       	push	r14
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	ef 93       	push	r30
 58c:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 58e:	00 91 01 01 	lds	r16, 0x0101
 592:	01 50       	subi	r16, 0x01	; 1
 594:	00 93 01 01 	sts	0x0101, r16

    if (gScrollMode)
 598:	80 91 0e 01 	lds	r24, 0x010E
 59c:	88 23       	and	r24, r24
 59e:	71 f0       	breq	.+28     	; 0x5bc <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 5a0:	00 23       	and	r16, r16
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 5a4:	80 91 08 01 	lds	r24, 0x0108
 5a8:	88 23       	and	r24, r24
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 07 01 	sts	0x0107, r24
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 5b4:	81 50       	subi	r24, 0x01	; 1
 5b6:	80 93 08 01 	sts	0x0108, r24
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 5bc:	10 92 41 01 	sts	0x0141, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 5c0:	80 91 07 01 	lds	r24, 0x0107
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__vector_22+0x6a>
 5c8:	53 c0       	rjmp	.+166    	; 0x670 <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 5ca:	e0 90 09 01 	lds	r14, 0x0109
 5ce:	ff 24       	eor	r15, r15
 5d0:	10 e0       	ldi	r17, 0x00	; 0
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
 5d4:	d0 e0       	ldi	r29, 0x00	; 0
 5d6:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 5d8:	80 91 41 01 	lds	r24, 0x0141
 5dc:	99 27       	eor	r25, r25
 5de:	87 fd       	sbrc	r24, 7
 5e0:	90 95       	com	r25
 5e2:	8c 0f       	add	r24, r28
 5e4:	9d 1f       	adc	r25, r29
 5e6:	97 fd       	sbrc	r25, 7
 5e8:	16 c0       	rjmp	.+44     	; 0x616 <__vector_22+0xb6>
 5ea:	11 23       	and	r17, r17
 5ec:	a1 f4       	brne	.+40     	; 0x616 <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 5ee:	80 91 41 01 	lds	r24, 0x0141
 5f2:	99 27       	eor	r25, r25
 5f4:	87 fd       	sbrc	r24, 7
 5f6:	90 95       	com	r25
 5f8:	fe 01       	movw	r30, r28
 5fa:	ed 5d       	subi	r30, 0xDD	; 221
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	e8 0f       	add	r30, r24
 600:	f9 1f       	adc	r31, r25
 602:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 604:	f8 2e       	mov	r15, r24
 606:	ff 1c       	adc	r15, r15
 608:	ff 24       	eor	r15, r15
 60a:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 60c:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 60e:	21 f4       	brne	.+8      	; 0x618 <__vector_22+0xb8>
 610:	1c 2f       	mov	r17, r28
 612:	1f 5f       	subi	r17, 0xFF	; 255
 614:	01 c0       	rjmp	.+2      	; 0x618 <__vector_22+0xb8>
 616:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 618:	ff 20       	and	r15, r15
 61a:	21 f0       	breq	.+8      	; 0x624 <__vector_22+0xc4>
 61c:	94 e0       	ldi	r25, 0x04	; 4
 61e:	9e 15       	cp	r25, r14
 620:	08 f4       	brcc	.+2      	; 0x624 <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 622:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 624:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_WriteDigit>
 628:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 62a:	c6 30       	cpi	r28, 0x06	; 6
 62c:	d1 05       	cpc	r29, r1
 62e:	99 f6       	brne	.-90     	; 0x5d6 <__vector_22+0x76>
 630:	ac ee       	ldi	r26, 0xEC	; 236
 632:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 634:	fd 01       	movw	r30, r26
 636:	ed 5d       	subi	r30, 0xDD	; 221
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	80 81       	ld	r24, Z
 63c:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	a0 30       	cpi	r26, 0x00	; 0
 642:	b8 07       	cpc	r27, r24
 644:	b9 f7       	brne	.-18     	; 0x634 <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 646:	80 91 0a 01 	lds	r24, 0x010A
 64a:	88 23       	and	r24, r24
 64c:	21 f0       	breq	.+8      	; 0x656 <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	80 93 f4 00 	sts	0x00F4, r24
 654:	02 c0       	rjmp	.+4      	; 0x65a <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 656:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 65a:	11 30       	cpi	r17, 0x01	; 1
 65c:	11 f4       	brne	.+4      	; 0x662 <__vector_22+0x102>
            gScroll = -6;
 65e:	8a ef       	ldi	r24, 0xFA	; 250
 660:	03 c0       	rjmp	.+6      	; 0x668 <__vector_22+0x108>
        else
            gScroll++;
 662:	80 91 41 01 	lds	r24, 0x0141
 666:	8f 5f       	subi	r24, 0xFF	; 255
 668:	80 93 41 01 	sts	0x0141, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 66c:	10 92 07 01 	sts	0x0107, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 670:	00 23       	and	r16, r16
 672:	19 f4       	brne	.+6      	; 0x67a <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	80 93 01 01 	sts	0x0101, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 67a:	80 91 09 01 	lds	r24, 0x0109
 67e:	8a 30       	cpi	r24, 0x0A	; 10
 680:	19 f4       	brne	.+6      	; 0x688 <__vector_22+0x128>
        gFlashTimer= 0;
 682:	10 92 09 01 	sts	0x0109, r1
 686:	03 c0       	rjmp	.+6      	; 0x68e <__vector_22+0x12e>
    else
        gFlashTimer++;
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 09 01 	sts	0x0109, r24

}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	bf 91       	pop	r27
 698:	af 91       	pop	r26
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	7f 91       	pop	r23
 6a0:	6f 91       	pop	r22
 6a2:	5f 91       	pop	r21
 6a4:	4f 91       	pop	r20
 6a6:	3f 91       	pop	r19
 6a8:	2f 91       	pop	r18
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 6bc:	38 2f       	mov	r19, r24
 6be:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 6c0:	80 91 07 01 	lds	r24, 0x0107
 6c4:	88 23       	and	r24, r24
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <LCD_puts_f+0x4>
 6c8:	a3 e2       	ldi	r26, 0x23	; 35
 6ca:	b1 e0       	ldi	r27, 0x01	; 1
 6cc:	83 2f       	mov	r24, r19
 6ce:	92 2f       	mov	r25, r18
 6d0:	fc 01       	movw	r30, r24
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < (TEXTBUFFER_SIZE-1); i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 6d4:	8d 93       	st	X+, r24
 6d6:	9e 2f       	mov	r25, r30
 6d8:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < (TEXTBUFFER_SIZE-1); i++)
 6da:	84 91       	lpm	r24, Z+
 6dc:	88 23       	and	r24, r24
 6de:	29 f0       	breq	.+10     	; 0x6ea <LCD_puts_f+0x2e>
 6e0:	31 96       	adiw	r30, 0x01	; 1
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	a0 34       	cpi	r26, 0x40	; 64
 6e6:	b2 07       	cpc	r27, r18
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 6ea:	e9 2f       	mov	r30, r25
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	ed 5d       	subi	r30, 0xDD	; 221
 6f0:	fe 4f       	sbci	r31, 0xFE	; 254
 6f2:	10 82       	st	Z, r1

    if (i > 6)
 6f4:	97 30       	cpi	r25, 0x07	; 7
 6f6:	48 f0       	brcs	.+18     	; 0x70a <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 0e 01 	sts	0x010E, r24
        gScroll = 0;
 6fe:	10 92 41 01 	sts	0x0141, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	80 93 08 01 	sts	0x0108, r24
 708:	04 c0       	rjmp	.+8      	; 0x712 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 70a:	10 92 0e 01 	sts	0x010E, r1
        gScroll = 0;
 70e:	10 92 41 01 	sts	0x0141, r1
    }

    gLCD_Update_Required = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	80 93 07 01 	sts	0x0107, r24
}
 718:	08 95       	ret

0000071a <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 71a:	48 2f       	mov	r20, r24
 71c:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 71e:	80 91 07 01 	lds	r24, 0x0107
 722:	88 23       	and	r24, r24
 724:	e1 f7       	brne	.-8      	; 0x71e <LCD_puts+0x4>
 726:	a3 e2       	ldi	r26, 0x23	; 35
 728:	b1 e0       	ldi	r27, 0x01	; 1
 72a:	84 2f       	mov	r24, r20
 72c:	92 2f       	mov	r25, r18
 72e:	9c 01       	movw	r18, r24
 730:	f9 01       	movw	r30, r18
 732:	01 c0       	rjmp	.+2      	; 0x736 <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < (TEXTBUFFER_SIZE - 1); i++) 
    {
        gTextBuffer[i] = pStr[i];
 734:	8d 93       	st	X+, r24
 736:	9e 2f       	mov	r25, r30
 738:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < (TEXTBUFFER_SIZE - 1); i++) 
 73a:	80 81       	ld	r24, Z
 73c:	88 23       	and	r24, r24
 73e:	29 f0       	breq	.+10     	; 0x74a <LCD_puts+0x30>
 740:	31 96       	adiw	r30, 0x01	; 1
 742:	21 e0       	ldi	r18, 0x01	; 1
 744:	a0 34       	cpi	r26, 0x40	; 64
 746:	b2 07       	cpc	r27, r18
 748:	a9 f7       	brne	.-22     	; 0x734 <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 74a:	e9 2f       	mov	r30, r25
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	ed 5d       	subi	r30, 0xDD	; 221
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	10 82       	st	Z, r1

    if (i > 6)
 754:	97 30       	cpi	r25, 0x07	; 7
 756:	48 f0       	brcs	.+18     	; 0x76a <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 0e 01 	sts	0x010E, r24
        gScroll = 0;
 75e:	10 92 41 01 	sts	0x0141, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	80 93 08 01 	sts	0x0108, r24
 768:	04 c0       	rjmp	.+8      	; 0x772 <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 76a:	10 92 0e 01 	sts	0x010E, r1
        gScroll = 0;
 76e:	10 92 41 01 	sts	0x0141, r1
    }

    gLCD_Update_Required = 1;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 07 01 	sts	0x0107, r24
}
 778:	08 95       	ret

0000077a <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 77a:	8e 31       	cpi	r24, 0x1E	; 30
 77c:	28 f4       	brcc	.+10     	; 0x788 <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 77e:	e8 2f       	mov	r30, r24
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	ed 5d       	subi	r30, 0xDD	; 221
 784:	fe 4f       	sbci	r31, 0xFE	; 254
 786:	60 83       	st	Z, r22
 788:	08 95       	ret

0000078a <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 78a:	e3 e2       	ldi	r30, 0x23	; 35
 78c:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<(TEXTBUFFER_SIZE-1); i++)
        gTextBuffer[i] = ' '; // JP changed from ' ' to stop LCD_puts_f buffer overrun
 78e:	80 e2       	ldi	r24, 0x20	; 32
 790:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<(TEXTBUFFER_SIZE-1); i++)
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	e0 34       	cpi	r30, 0x40	; 64
 796:	f9 07       	cpc	r31, r25
 798:	d9 f7       	brne	.-10     	; 0x790 <LCD_Clear+0x6>
        gTextBuffer[i] = ' '; // JP changed from ' ' to stop LCD_puts_f buffer overrun
}
 79a:	08 95       	ret

0000079c <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 79c:	80 93 0a 01 	sts	0x010A, r24
}
 7a0:	08 95       	ret

000007a2 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 7a2:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 7a4:	80 91 07 01 	lds	r24, 0x0107
 7a8:	88 23       	and	r24, r24
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 7ac:	60 93 0e 01 	sts	0x010E, r22
    gScroll = 0;
 7b0:	10 92 41 01 	sts	0x0141, r1

    gLCD_Update_Required = update;
 7b4:	90 93 07 01 	sts	0x0107, r25
}
 7b8:	08 95       	ret

000007ba <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 7ba:	10 92 09 01 	sts	0x0109, r1
}
 7be:	08 95       	ret

000007c0 <SetContrast>:
*****************************************************************************/



void SetContrast(char input)
{
 7c0:	98 2f       	mov	r25, r24
 7c2:	e3 e2       	ldi	r30, 0x23	; 35
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<(TEXTBUFFER_SIZE-1); i++)
        gTextBuffer[i] = ' '; // JP changed from ' ' to stop LCD_puts_f buffer overrun
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<(TEXTBUFFER_SIZE-1); i++)
 7ca:	21 e0       	ldi	r18, 0x01	; 1
 7cc:	e0 34       	cpi	r30, 0x40	; 64
 7ce:	f2 07       	cpc	r31, r18
 7d0:	d9 f7       	brne	.-10     	; 0x7c8 <SetContrast+0x8>
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
        gTextBuffer[digit] = character;
 7d2:	81 e4       	ldi	r24, 0x41	; 65
 7d4:	80 93 23 01 	sts	0x0123, r24
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{

    while (gLCD_Update_Required);
 7d8:	82 e4       	ldi	r24, 0x42	; 66
 7da:	80 93 24 01 	sts	0x0124, r24
 7de:	83 e4       	ldi	r24, 0x43	; 67
 7e0:	80 93 25 01 	sts	0x0125, r24
 7e4:	84 e4       	ldi	r24, 0x44	; 68
 7e6:	80 93 26 01 	sts	0x0126, r24
 7ea:	85 e4       	ldi	r24, 0x45	; 69
 7ec:	80 93 27 01 	sts	0x0127, r24
 7f0:	86 e4       	ldi	r24, 0x46	; 70
 7f2:	80 93 28 01 	sts	0x0128, r24
 7f6:	80 91 07 01 	lds	r24, 0x0107
 7fa:	88 23       	and	r24, r24
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <SetContrast+0x36>
    
    gScrollMode = scrollmode;
 7fe:	10 92 0e 01 	sts	0x010E, r1
    gScroll = 0;
 802:	10 92 41 01 	sts	0x0141, r1

    gLCD_Update_Required = update;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 07 01 	sts	0x0107, r24
    LCD_putc(4, 'E');
    LCD_putc(5, 'F');

    LCD_UpdateRequired(TRUE, 0);

    LCD_CONTRAST_LEVEL(input);
 80c:	9f 70       	andi	r25, 0x0F	; 15
 80e:	90 93 e7 00 	sts	0x00E7, r25

}
 812:	08 95       	ret

00000814 <CHAR2BCD2>:
*                   The input must be in the range 0 to 99.
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
 814:	48 2f       	mov	r20, r24
 816:	6a e0       	ldi	r22, 0x0A	; 10
 818:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	84 e0       	ldi	r24, 0x04	; 4
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	8a 95       	dec	r24
 828:	e1 f7       	brne	.-8      	; 0x822 <CHAR2BCD2+0xe>
 82a:	84 2f       	mov	r24, r20
 82c:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 830:	89 2f       	mov	r24, r25
 832:	82 2b       	or	r24, r18
 834:	08 95       	ret

00000836 <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
 836:	28 2f       	mov	r18, r24
 838:	64 e6       	ldi	r22, 0x64	; 100
 83a:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
 83e:	49 2f       	mov	r20, r25
 840:	82 2f       	mov	r24, r18
 842:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
    {
        high++;
        input -= 100;
    }

    high <<= 4;
 84a:	54 e0       	ldi	r21, 0x04	; 4
 84c:	22 0f       	add	r18, r18
 84e:	33 1f       	adc	r19, r19
 850:	5a 95       	dec	r21
 852:	e1 f7       	brne	.-8      	; 0x84c <CHAR2BCD3+0x16>
 854:	84 2f       	mov	r24, r20
 856:	6a e0       	ldi	r22, 0x0A	; 10
 858:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
 85c:	28 0f       	add	r18, r24
 85e:	31 1d       	adc	r19, r1
 860:	94 e0       	ldi	r25, 0x04	; 4
 862:	22 0f       	add	r18, r18
 864:	33 1f       	adc	r19, r19
 866:	9a 95       	dec	r25
 868:	e1 f7       	brne	.-8      	; 0x862 <CHAR2BCD3+0x2c>
 86a:	84 2f       	mov	r24, r20
 86c:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodqi4>
 870:	89 2f       	mov	r24, r25
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	28 2b       	or	r18, r24
 876:	39 2b       	or	r19, r25
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 878:	c9 01       	movw	r24, r18
 87a:	08 95       	ret

0000087c <__udivmodqi4>:
 87c:	99 1b       	sub	r25, r25
 87e:	79 e0       	ldi	r23, 0x09	; 9
 880:	04 c0       	rjmp	.+8      	; 0x88a <__udivmodqi4_ep>

00000882 <__udivmodqi4_loop>:
 882:	99 1f       	adc	r25, r25
 884:	96 17       	cp	r25, r22
 886:	08 f0       	brcs	.+2      	; 0x88a <__udivmodqi4_ep>
 888:	96 1b       	sub	r25, r22

0000088a <__udivmodqi4_ep>:
 88a:	88 1f       	adc	r24, r24
 88c:	7a 95       	dec	r23
 88e:	c9 f7       	brne	.-14     	; 0x882 <__udivmodqi4_loop>
 890:	80 95       	com	r24
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
