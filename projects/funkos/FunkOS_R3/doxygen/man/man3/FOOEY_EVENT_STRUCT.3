.TH "FOOEY_EVENT_STRUCT" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FOOEY_EVENT_STRUCT \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <fooey_event.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "USHORT \fBusEventID\fP"
.br
.RI "\fIEvent type (used for subclassification). \fP"
.ti -1c
.RI "USHORT \fBusEventTime\fP"
.br
.RI "\fINumber of event ticks elapsed. \fP"
.ti -1c
.RI "USHORT \fBusDest\fP"
.br
.RI "\fIDestination control. \fP"
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   ULONG \fBulRawData\fP"
.br
.RI "\fIRaw 32-bit data field, all other structs are specializations that are < 32-bits wide. \fP"
.ti -1c
.RI "   struct {"
.br
.ti -1c
.RI "      ULONG \fBulTickIntervalMS\fP"
.br
.RI "\fITime since last tick in MS. \fP"
.ti -1c
.RI "   } \fBTICK_EVENT_DATA\fP"
.br
.ti -1c
.RI "   struct {"
.br
.ti -1c
.RI "      unsigned int \fBusX\fP:12"
.br
.RI "\fIX Position of the mouse event. \fP"
.ti -1c
.RI "      unsigned int \fBbLeftState\fP:1"
.br
.RI "\fILeft button state. \fP"
.ti -1c
.RI "      unsigned int \fBbRightState\fP:1"
.br
.RI "\fIRight button state. \fP"
.ti -1c
.RI "      unsigned int \fBbMiddleState\fP:1"
.br
.RI "\fIMiddle button state. \fP"
.ti -1c
.RI "      unsigned int \fBbSideState1\fP:1"
.br
.RI "\fISide button state. \fP"
.ti -1c
.RI "      unsigned int \fBusY\fP:12"
.br
.RI "\fIY Position of the mouse event. \fP"
.ti -1c
.RI "      unsigned int \fBbXScrollState\fP:1"
.br
.RI "\fILeft scroll state. \fP"
.ti -1c
.RI "      unsigned int \fBbYScrollState\fP:1"
.br
.RI "\fIRight scroll state. \fP"
.ti -1c
.RI "      unsigned int \fBbSideState2\fP:1"
.br
.RI "\fISecond side button state. \fP"
.ti -1c
.RI "   } \fBMOUSE_EVENT_DATA\fP"
.br
.ti -1c
.RI "   struct {"
.br
.ti -1c
.RI "      \fBKEYCODE\fP \fBeKeyCode\fP"
.br
.RI "\fI8-bit keycode (as an enumeration) \fP"
.ti -1c
.RI "      unsigned int \fBbKeyDown\fP:1"
.br
.RI "\fI1 if key is down, 0 if key is up \fP"
.ti -1c
.RI "      unsigned int \fBbShift\fP:1"
.br
.RI "\fI1 if shift is held \fP"
.ti -1c
.RI "      unsigned int \fBbAlt\fP:1"
.br
.RI "\fI1 if ALT is held \fP"
.ti -1c
.RI "      unsigned int \fBbCtrl\fP:1"
.br
.RI "\fI1 if CTRL is held \fP"
.ti -1c
.RI "      unsigned int \fBbSpec1\fP:1"
.br
.RI "\fISpecial shift 1. \fP"
.ti -1c
.RI "      unsigned int \fBbSpec2\fP:1"
.br
.RI "\fISpecial shift 2. \fP"
.ti -1c
.RI "      unsigned int \fBbSpec3\fP:1"
.br
.RI "\fISpecial shift 3. \fP"
.ti -1c
.RI "      unsigned int \fBbSpec4\fP:1"
.br
.RI "\fISpecial shift 4. \fP"
.ti -1c
.RI "   } \fBKEYBOARD_EVENT_DATA\fP"
.br
.ti -1c
.RI "   struct {"
.br
.ti -1c
.RI "      unsigned int \fBbUp\fP:1"
.br
.RI "\fIUp button. \fP"
.ti -1c
.RI "      unsigned int \fBbDown\fP:1"
.br
.RI "\fIDown button. \fP"
.ti -1c
.RI "      unsigned int \fBbLeft\fP:1"
.br
.RI "\fILeft button. \fP"
.ti -1c
.RI "      unsigned int \fBbRight\fP:1"
.br
.RI "\fIRight button. \fP"
.ti -1c
.RI "      unsigned int \fBuiButtons\fP:12"
.br
.RI "\fI12 Digital IOs \fP"
.ti -1c
.RI "      CHAR \fBcAnalogX\fP"
.br
.RI "\fI8-bit signed integer for X axis \fP"
.ti -1c
.RI "      CHAR \fBcAnalogY\fP"
.br
.RI "\fI8-bit signed integer for Y axis \fP"
.ti -1c
.RI "   } \fBJOYSTICK_EVENT_DATA\fP"
.br
.ti -1c
.RI "} \fBEVENT_DATA\fP"
.br
.in -1c
.SH "Field Documentation"
.PP 
.SS "unsigned int \fBbAlt\fP"
.PP
1 if ALT is held 
.SS "unsigned int \fBbCtrl\fP"
.PP
1 if CTRL is held 
.SS "unsigned int \fBbDown\fP"
.PP
Down button. 
.SS "unsigned int \fBbKeyDown\fP"
.PP
1 if key is down, 0 if key is up 
.SS "unsigned int \fBbLeft\fP"
.PP
Left button. 
.SS "unsigned int \fBbLeftState\fP"
.PP
Left button state. 
.SS "unsigned int \fBbMiddleState\fP"
.PP
Middle button state. 
.SS "unsigned int \fBbRight\fP"
.PP
Right button. 
.SS "unsigned int \fBbRightState\fP"
.PP
Right button state. 
.SS "unsigned int \fBbShift\fP"
.PP
1 if shift is held 
.SS "unsigned int \fBbSideState1\fP"
.PP
Side button state. 
.SS "unsigned int \fBbSideState2\fP"
.PP
Second side button state. 
.SS "unsigned int \fBbSpec1\fP"
.PP
Special shift 1. 
.SS "unsigned int \fBbSpec2\fP"
.PP
Special shift 2. 
.SS "unsigned int \fBbSpec3\fP"
.PP
Special shift 3. 
.SS "unsigned int \fBbSpec4\fP"
.PP
Special shift 4. 
.SS "unsigned int \fBbUp\fP"
.PP
Up button. 
.SS "unsigned int \fBbXScrollState\fP"
.PP
Left scroll state. 
.SS "unsigned int \fBbYScrollState\fP"
.PP
Right scroll state. 
.SS "CHAR \fBcAnalogX\fP"
.PP
8-bit signed integer for X axis 
.SS "CHAR \fBcAnalogY\fP"
.PP
8-bit signed integer for Y axis 
.SS "\fBKEYCODE\fP \fBeKeyCode\fP"
.PP
8-bit keycode (as an enumeration) 
.SS "union { ... }  \fBEVENT_DATA\fP"
.SS "struct { ... }   \fBJOYSTICK_EVENT_DATA\fP"
.SS "struct { ... }   \fBKEYBOARD_EVENT_DATA\fP"
.SS "struct { ... }   \fBMOUSE_EVENT_DATA\fP"
.SS "struct { ... }   \fBTICK_EVENT_DATA\fP"
.SS "unsigned int \fBuiButtons\fP"
.PP
12 Digital IOs 
.SS "ULONG \fBulRawData\fP"
.PP
Raw 32-bit data field, all other structs are specializations that are < 32-bits wide. 
.SS "ULONG \fBulTickIntervalMS\fP"
.PP
Time since last tick in MS. 
.SS "USHORT \fBusDest\fP"
.PP
Destination control. 
.SS "USHORT \fBusEventID\fP"
.PP
Event type (used for subclassification). 
.SS "USHORT \fBusEventTime\fP"
.PP
Number of event ticks elapsed. 
.SS "unsigned int \fBusX\fP"
.PP
X Position of the mouse event. 
.SS "unsigned int \fBusY\fP"
.PP
Y Position of the mouse event. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
