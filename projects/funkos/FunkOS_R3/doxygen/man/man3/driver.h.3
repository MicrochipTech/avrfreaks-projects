.TH "C:/Projects/R3/kernel/driver.h" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/kernel/driver.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br
\fC#include 'task.h'\fP
.br
\fC#include 'mutex.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBDRIVER_STRUCT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef BOOL(* \fBDRIVER_CONSTRUCTOR\fP )(void *pstThis_)"
.br
.RI "\fIConstructor function pointer type. \fP"
.ti -1c
.RI "typedef BOOL(* \fBDRIVER_START\fP )(void *pstThis_)"
.br
.RI "\fIDriver start function pointer type. \fP"
.ti -1c
.RI "typedef BOOL(* \fBDRIVER_STOP\fP )(void *pstThis_)"
.br
.RI "\fIDriver stop function pointer type. \fP"
.ti -1c
.RI "typedef BOOL(* \fBDRIVER_CONTROL\fP )(void *pstThis_, USHORT usID_, void *pvData_)"
.br
.RI "\fIDriver event function pointer type. \fP"
.ti -1c
.RI "typedef USHORT(* \fBDRIVER_READ\fP )(void *pstThis_, UCHAR *pucData_, USHORT usLen_)"
.br
.RI "\fIDriver stream read function type. \fP"
.ti -1c
.RI "typedef USHORT(* \fBDRIVER_WRITE\fP )(void *pstThis_, UCHAR *pucData_, USHORT usLen_)"
.br
.RI "\fIDriver stream write function type. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBDRIVER_EVENT\fP { \fBDRIVER_RX_BYTE\fP =  0, \fBDRIVER_TX_BYTE\fP, \fBDRIVER_TX_STRING\fP, \fBDRIVER_EVENTS\fP }"
.br
.ti -1c
.RI "enum \fBDRIVER_STATE\fP { \fBDRIVER_UNINIT\fP =  0, \fBDRIVER_CLOSE\fP, \fBDRIVER_IDLE\fP, \fBDRIVER_IO\fP }"
.br
.ti -1c
.RI "enum \fBDRIVER_RETURN\fP { \fBDRIVER_OK\fP =  0, \fBDRIVER_BUSY\fP, \fBDRIVER_ERR\fP }"
.br
.ti -1c
.RI "enum \fBDRIVER_TYPE\fP { \fBDRIVER_TYPE_UART\fP =  0, \fBDRIVER_TYPE_TIMER\fP, \fBDRIVER_TYPE_ATOD\fP, \fBDRIVER_TYPE_I2C\fP, \fBDRIVER_TYPE_SPI\fP, \fBDRIVER_TYPE_KEYPAD\fP, \fBDRIVER_TYPE_BUTTONS\fP, \fBDRIVER_TYPE_LEDS\fP, \fBDRIVER_TYPE_HD44780\fP, \fBDRIVER_TYPE_JOY_PSX_IN\fP, \fBDRIVER_TYPE_JOY_NES_IN\fP, \fBDRIVER_TYPE_JOY_SNES_IN\fP, \fBDRIVER_TYPE_JOY_ATARI2600_IN\fP, \fBDRIVER_TYPE_JOY_ARCADE_IN\fP, \fBDRIVER_TYPE_JOY_ATARI7800_IN\fP, \fBDRIVER_TYPE_JOY_TG16_IN\fP, \fBDRIVER_TYPE_JOY_RAW_IN\fP, \fBDRIVER_TYPE_JOY_GENESIS_IN\fP, \fBDRIVER_TYPE_UOLED\fP, \fBDRIVER_TYPE_COUNT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBDriver_Init\fP (\fBDRIVER_STRUCT\fP *pstDriver_)"
.br
.ti -1c
.RI "void \fBDriver_Start\fP (\fBDRIVER_STRUCT\fP *pstDriver_)"
.br
.ti -1c
.RI "void \fBDriver_Stop\fP (\fBDRIVER_STRUCT\fP *pstDriver_)"
.br
.ti -1c
.RI "USHORT \fBDriver_Read\fP (\fBDRIVER_STRUCT\fP *pstDriver_, UCHAR *pucData_, USHORT usLen_)"
.br
.ti -1c
.RI "USHORT \fBDriver_Write\fP (\fBDRIVER_STRUCT\fP *pstDriver_, UCHAR *pucData_, USHORT usLen_)"
.br
.ti -1c
.RI "UCHAR \fBDriver_Control\fP (\fBDRIVER_STRUCT\fP *pstDriver_, USHORT usID_, void *pvData_)"
.br
.ti -1c
.RI "void \fBDriver_SetControlFunc\fP (\fBDRIVER_STRUCT\fP *pstDriver_, void *pfDriverControl_)"
.br
.ti -1c
.RI "void \fBDriver_RemoveControlFunc\fP (\fBDRIVER_STRUCT\fP *pstDriver_)"
.br
.ti -1c
.RI "void \fBDriver_AddControlFunc\fP (\fBDRIVER_STRUCT\fP *pstDriver_, void *pfDriverControl_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Implements a virtual base 'class' for any driver type, and generic accessor functions for controlling a driver from its handle. 
.SH "Typedef Documentation"
.PP 
.SS "typedef BOOL(* \fBDRIVER_CONSTRUCTOR\fP)(void *pstThis_)"
.PP
Constructor function pointer type. 
.SS "typedef BOOL(* \fBDRIVER_CONTROL\fP)(void *pstThis_, USHORT usID_, void *pvData_)"
.PP
Driver event function pointer type. 
.SS "typedef USHORT(* \fBDRIVER_READ\fP)(void *pstThis_, UCHAR *pucData_, USHORT usLen_)"
.PP
Driver stream read function type. 
.SS "typedef BOOL(* \fBDRIVER_START\fP)(void *pstThis_)"
.PP
Driver start function pointer type. 
.SS "typedef BOOL(* \fBDRIVER_STOP\fP)(void *pstThis_)"
.PP
Driver stop function pointer type. 
.SS "typedef USHORT(* \fBDRIVER_WRITE\fP)(void *pstThis_, UCHAR *pucData_, USHORT usLen_)"
.PP
Driver stream write function type. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBDRIVER_EVENT\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDRIVER_RX_BYTE \fP\fP
.TP
\fB\fIDRIVER_TX_BYTE \fP\fP
.TP
\fB\fIDRIVER_TX_STRING \fP\fP
.TP
\fB\fIDRIVER_EVENTS \fP\fP

.SS "enum \fBDRIVER_RETURN\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDRIVER_OK \fP\fP
.TP
\fB\fIDRIVER_BUSY \fP\fP
.TP
\fB\fIDRIVER_ERR \fP\fP

.SS "enum \fBDRIVER_STATE\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDRIVER_UNINIT \fP\fP
.TP
\fB\fIDRIVER_CLOSE \fP\fP
.TP
\fB\fIDRIVER_IDLE \fP\fP
.TP
\fB\fIDRIVER_IO \fP\fP

.SS "enum \fBDRIVER_TYPE\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDRIVER_TYPE_UART \fP\fP
.TP
\fB\fIDRIVER_TYPE_TIMER \fP\fP
.TP
\fB\fIDRIVER_TYPE_ATOD \fP\fP
.TP
\fB\fIDRIVER_TYPE_I2C \fP\fP
.TP
\fB\fIDRIVER_TYPE_SPI \fP\fP
.TP
\fB\fIDRIVER_TYPE_KEYPAD \fP\fP
.TP
\fB\fIDRIVER_TYPE_BUTTONS \fP\fP
.TP
\fB\fIDRIVER_TYPE_LEDS \fP\fP
.TP
\fB\fIDRIVER_TYPE_HD44780 \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_PSX_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_NES_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_SNES_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_ATARI2600_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_ARCADE_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_ATARI7800_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_TG16_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_RAW_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_JOY_GENESIS_IN \fP\fP
.TP
\fB\fIDRIVER_TYPE_UOLED \fP\fP
.TP
\fB\fIDRIVER_TYPE_COUNT \fP\fP

.SH "Function Documentation"
.PP 
.SS "void Driver_AddControlFunc (\fBDRIVER_STRUCT\fP * pstDriver_, void * pfDriverControl_)"Set the control/event handler for the driver in question.
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - pointer to the driver 
.br
\fIpfDriverControl_\fP - pointer to the control function 
.RE
.PP

.SS "UCHAR Driver_Control (\fBDRIVER_STRUCT\fP * pstDriver_, USHORT usID_, void * pvData_)"Calls the driver event handler from a given task with event type specified in the event ID field, and data passed in through the void * parameter field.
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - Pointer to the driver struct 
.br
\fIusID_\fP - Event ID 
.br
\fIpvData_\fP - Pointer to the event data. 
.RE
.PP

.SS "void Driver_Init (\fBDRIVER_STRUCT\fP * pstDriver_)"File: \fBDriver.c\fP
.PP
Description: This module implements the driver-level abstraction for FunkOS. All managed driver access is handled through this module.
.PP
Usage: Drivers are initialized with Driver_Init, started using Driver_Start, and stopped using Driver_Stop. These functions abstract the calls to the Init/Start/Stop functions specified in the \fBDRIVER_STRUCT\fP pointer corresponding to the driver. When a control event is triggered by an interrupt or by application code, the event is passed through the event handler in the driver for processing. In this way, all drivers are accessed consistently.
.PP
Calls the driver's initialization function and sets the driver state.
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - Pointer to the driver 
.RE
.PP

.SS "USHORT Driver_Read (\fBDRIVER_STRUCT\fP * pstDriver_, UCHAR * pucData_, USHORT usLen_)"Use the driver's dedicated read function to read a specified amount of data from the driver's stream.
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - pointer to the task's driver 
.br
\fIpucData_\fP - pointer to the input data stream 
.br
\fIusLen_\fP - number of bytes to read from the stream. 
.RE
.PP
\fBReturns:\fP
.RS 4
USHORT - the number of bytes actually read from the stream 
.RE
.PP

.SS "void Driver_RemoveControlFunc (\fBDRIVER_STRUCT\fP * pstDriver_)"Remove the control function for the driver
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - driver to remove the event handler from 
.RE
.PP

.SS "void Driver_SetControlFunc (\fBDRIVER_STRUCT\fP * pstDriver_, void * pfDriverControl_)"
.SS "void Driver_Start (\fBDRIVER_STRUCT\fP * pstDriver_)"Calls the driver's start function and sets the driver to the active state
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - pointer to the driver to start 
.RE
.PP

.SS "void Driver_Stop (\fBDRIVER_STRUCT\fP * pstDriver_)"Stop the driver and set to the idle state
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - driver to stop 
.RE
.PP

.SS "USHORT Driver_Write (\fBDRIVER_STRUCT\fP * pstDriver_, UCHAR * pucData_, USHORT usLen_)"Use the driver's dedicated read function to write a specified amount of data to the driver's stream.
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - pointer to the task's driver 
.br
\fIpucData_\fP - pointer to data to write 
.br
\fIusLen_\fP - number of bytes to write to the stream. 
.RE
.PP
\fBReturns:\fP
.RS 4
USHORT - the number of bytes actually written to the stream 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
