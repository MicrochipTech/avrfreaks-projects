.TH "C:/Projects/R3/kernel/mutex.c" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/kernel/mutex.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'mutex.h'\fP
.br
\fC#include 'types.h'\fP
.br
\fC#include 'task.h'\fP
.br
\fC#include 'taskport.h'\fP
.br
\fC#include 'kernelcfg.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMutex_Init\fP (\fBMUTEX_STRUCT\fP *pstMutex_)"
.br
.ti -1c
.RI "BOOL \fBMutex_Claim\fP (\fBMUTEX_STRUCT\fP *pstMutex_, USHORT usTime_)"
.br
.ti -1c
.RI "void \fBMutex_Release\fP (\fBMUTEX_STRUCT\fP *pstMutex_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Mutual exclusion semaphore implementation for FunkOS 
.SH "Function Documentation"
.PP 
.SS "BOOL Mutex_Claim (\fBMUTEX_STRUCT\fP * pstMutex_, USHORT usTime_)"Signal a task to claim a mutex semaphore. If the mutex is not available, the task will block and wait until the resource becomes available.
.PP
\fBParameters:\fP
.RS 4
\fIpstMutex_\fP - pointer to the mutex to claim 
.br
\fIusTime_\fP - the time limit to wait for the mutex. Integer number of ticks or TIME_FOREVER 
.RE
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE on success, FALSE on timeout 
.RE
.PP

.PP
! disable scheduler
.PP
! enable scheduler 
.SS "BOOL Mutex_Init (\fBMUTEX_STRUCT\fP * pstMutex_)"Initialize a mutual exclusion semaphore by setting the semaphore value to 1 emptying the task list, and resetting the maximum priority value.
.PP
\fBParameters:\fP
.RS 4
\fIpstMutex_\fP - pointer to the mutex to initialize 
.RE
.PP

.SS "void Mutex_Release (\fBMUTEX_STRUCT\fP * pstMutex_)"Releases a mutex, signalling that another task can utilize the associate resource.
.PP
\fBParameters:\fP
.RS 4
\fIpstMutex_\fP - pointer to the mutex to release 
.RE
.PP

.PP
! Disable scheduler
.PP
Re-enable scheduler
.PP
! Re-enable the scheduler 
.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
