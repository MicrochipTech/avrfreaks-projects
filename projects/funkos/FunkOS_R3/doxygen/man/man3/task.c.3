.TH "C:/Projects/R3/kernel/task.c" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/kernel/task.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br
\fC#include 'kernelcfg.h'\fP
.br
\fC#include 'task.h'\fP
.br
\fC#include 'taskport.h'\fP
.br
\fC#include 'kernelswi.h'\fP
.br
\fC#include 'kerneltimer.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTask_Init\fP (void)"
.br
.ti -1c
.RI "BOOL \fBTask_Add\fP (\fBTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "BOOL \fBTask_Remove\fP (\fBTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "void \fBTask_CreateTask\fP (\fBTASK_STRUCT\fP *pstTask_, BYTE *pcName_, WORD *pwStack_, USHORT usStackSize_, UCHAR ucPriority_, \fBTASK_FUNC\fP pfFunction_)"
.br
.RI "\fIAdd a task from the scheduler list. \fP"
.ti -1c
.RI "void \fBTask_SetQuantum\fP (\fBTASK_STRUCT\fP *pstTask_, USHORT usTicks_)"
.br
.ti -1c
.RI "void \fBTask_Start\fP (\fBTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "void \fBTask_Stop\fP (\fBTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "void \fBTask_Switch\fP (void)"
.br
.ti -1c
.RI "BOOL \fBTask_Tick\fP (void)"
.br
.ti -1c
.RI "void \fBTask_Sleep\fP (USHORT usTime_)"
.br
.ti -1c
.RI "void \fBTask_YieldSWI\fP (void)"
.br
.ti -1c
.RI "BOOL \fBTask_IsSchedulerEnabled\fP (void)"
.br
.ti -1c
.RI "void \fBTask_SetScheduler\fP (BOOL bEnable_)"
.br
.ti -1c
.RI "BOOL \fBTask_SchedulerDisable\fP (void)"
.br
.ti -1c
.RI "void \fBTask_SchedulerRestore\fP (BOOL bState_)"
.br
.ti -1c
.RI "\fBTASK_STRUCT\fP * \fBTask_GetCurrentTask\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBTASK_STRUCT\fP * \fBpstCurrentTask\fP"
.br
.ti -1c
.RI "SHORT \fBsCriticalCount\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "BOOL Task_Add (\fBTASK_STRUCT\fP * pstTask_)"Add a task to the scheduler list
.PP
\fBSee also:\fP
.RS 4
\fBTask_Remove()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task structure to add 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "void Task_CreateTask (\fBTASK_STRUCT\fP * pstTask_, BYTE * pcName_, WORD * pwStack_, USHORT usStackSize_, UCHAR ucPriority_, \fBTASK_FUNC\fP pfFunction_)"
.PP
Add a task from the scheduler list. This function populates a given task structure with the parameters given. The stack is then initialized, and the task is set as stopped, and all state variables and timeouts reset. Once the task is created, it must be added using \fBTask_Add()\fP, and started using Tast_Start()
.PP
\fBSee also:\fP
.RS 4
\fBTask_Add()\fP, \fBTask_Start()\fP 
.PP
\fBTask_Remove()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task structure to build 
.br
\fIpcName_\fP - pointer to the task name 
.br
\fIpwStack_\fP - pointer to the task's stack 
.br
\fIusStackSize_\fP - the length of the stack in bytes 
.br
\fIucPriority_\fP - priority of the task (0-255) 
.br
\fIpfFunction_\fP - pointer to the task's entry function 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "Task_GetCurrentTask (void)"Return the pointer to the task struct of the currently running task.
.PP
\fBReturns:\fP
.RS 4
TASK_STRUCT * - Pointer to the currently running task 
.RE
.PP

.SS "void Task_Init (void)"Initialize the module's internal variables. 
.PP
\fBSee also:\fP
.RS 4
\fBTask_Init()\fP
.RE
.PP
Initializes the pipsqueak multithreading kernel. This must be called before calling any other function in this module. 
.SS "Task_IsSchedulerEnabled (void)"Returns the current state of the scheduler.
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE if enabled, FALSE if disabled 
.RE
.PP

.SS "BOOL Task_Remove (\fBTASK_STRUCT\fP * pstTask_)"Remove a task from the scheduler list. Before attempting to remove the task, the owner should ensure that all connections of this task to other objects (plumber, semaphore, etc.) are removed PRIOR to calling this function, otherwise system corruption will likely occur.
.PP
\fBSee also:\fP
.RS 4
\fBTask_Add()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task structure to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "Task_SchedulerDisable (void)"Disables the scheduler, and returns the scheduler's previous state. This is used in combination with \fBTask_SchedulerRestore()\fP to provide the scheduler-disabled context.
.PP
\fBReturns:\fP
.RS 4
BOOL - the previous state of the scheduler (TRUE = ENABLED) 
.RE
.PP

.SS "Task_SchedulerRestore (BOOL bState_)"Used to restore the state of the scheduler after performing an operation that operates in a scheduler-disabled context
.PP
\fBParameters:\fP
.RS 4
\fIbState_\fP - TRUE to enable the scheduler, FALSE to disable the scheduler 
.RE
.PP

.SS "void Task_SetQuantum (\fBTASK_STRUCT\fP * pstTask_, USHORT usTicks_)"Set the time between context switches when multiple tasks are executing at the same priority level
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task to start 
.br
\fIusTicks_\fP - the number of ticks inbetween switching 
.RE
.PP

.SS "Task_SetScheduler (BOOL bEnable_)"Set the state of the scheduler.
.PP
\fBParameters:\fP
.RS 4
\fIbEnable_\fP - TRUE to enable the scheduler, FALSE to disable 
.RE
.PP

.SS "void Task_Sleep (USHORT usTime_)"Set a task to sleep for a period of time specified in the arguments 
.PP
\fBSee also:\fP
.RS 4
\fBTask_Tick()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIusTime_\fP - the time period in RTOS ticks to sleep through 
.RE
.PP

.SS "BOOL Task_Start (\fBTASK_STRUCT\fP * pstTask_)"Set a task as ready to run
.PP
\fBSee also:\fP
.RS 4
\fBTask_Stop()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task to start 
.RE
.PP

.SS "BOOL Task_Stop (\fBTASK_STRUCT\fP * pstTask_)"Disable a task from running
.PP
\fBSee also:\fP
.RS 4
\fBTask_Start()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task to stop 
.RE
.PP

.SS "void Task_Switch (void)"This, along with the RTOS Tick is the heart of the kernel. This scheduler is called whenever a context switch needs to take place, which is anytime a Semaphore is set, a task manually yields control, an RTOS tick takes place, a task is set to sleep, or a task is left to pend on a semaphore.
.PP
The scheduler is priority-based, and is fully pre-emptive. Where there are multiple tasks sharing the same priority, the scheduler is round-robin, alternating through all *ready* tasks of the same priority group.
.PP
\fBSee also:\fP
.RS 4
\fBTask_Tick()\fP
.RE
.PP
Switches to the next task in the circular list of tasks. If the idle task has been selected, switch to the idle task instead. 
.SS "void Task_Tick (void)"This function is called at a regular interval (the RTOS Tick interval) and is used to update the task time for each task in the system.
.PP
For tasks that are blocked on semaphores, the semaphores are checked - if the semaphore is now available, the function will take the semaphore, and place the task in the ready state. If a timeout occurs on a semaphore, the semaphore is set to NULL - this condition should be checked by the application to ensure that correct error handling occurs.
.PP
Tasks that are sleeping have their sleep time decremented, and are placed in the ready state when the timeout expires.
.PP
Tasks in the ready state have their starvation interval incremented.
.PP
\fBSee also:\fP
.RS 4
\fBTask_Switch()\fP
.RE
.PP
Increments the task quantum counter, and switches to the next task when the quantum has expired. 
.SS "Task_YieldSWI (void)"Trigger a software interrupt that will invoke the context switch. This is the best mechanism for triggering a context switch from an application or system-service level, as it is completely thread-safe and can be invoked from an interrupt.
.PP
\fBSee also:\fP
.RS 4
\fBTask_Switch()\fP 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBTASK_STRUCT\fP* \fBpstCurrentTask\fP"
.SS "SHORT \fBsCriticalCount\fP"
.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
