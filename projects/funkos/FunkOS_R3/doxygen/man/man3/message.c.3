.TH "C:/Projects/R3/kernel/message.c" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/kernel/message.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'taskport.h'\fP
.br
\fC#include 'semaphore.h'\fP
.br
\fC#include 'types.h'\fP
.br
\fC#include 'message.h'\fP
.br
\fC#include 'kernelcfg.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBMessage_Init\fP (\fBMESSAGE_STRUCT\fP *pstMessage_, \fBEVENT_STRUCT\fP *pstEvent_, USHORT usSize_)"
.br
.ti -1c
.RI "BOOL \fBMessage_Send\fP (\fBMESSAGE_STRUCT\fP *pstMessage_, USHORT usEventID_, USHORT usEventData_)"
.br
.ti -1c
.RI "BOOL \fBMessage_Read\fP (\fBMESSAGE_STRUCT\fP *pstMessage_, USHORT *pusEventID_, USHORT *pusEventData_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Threadsafe message queue implementation. 
.SH "Function Documentation"
.PP 
.SS "void Message_Init (\fBMESSAGE_STRUCT\fP * pstMessage_, \fBEVENT_STRUCT\fP * pstEvent_, USHORT usSize_)"Initialize the message queue structure, resetting all flags and buffer sizes.
.PP
\fBParameters:\fP
.RS 4
\fIpstMessage_\fP - the message queue structure 
.br
\fIpstEvent_\fP - the event queue array specified by the owner task 
.br
\fIusSize_\fP - the size of the event queue array 
.RE
.PP

.SS "BOOL Message_Read (\fBMESSAGE_STRUCT\fP * pstMessage_, USHORT * pusEventID_, USHORT * pusEventData_)"Read an event from the front of the given event queue
.PP
\fBParameters:\fP
.RS 4
\fIpstMessage_\fP - the event queue to read from 
.br
\fIpusEventID_\fP - the pointer that the event ID is written out to 
.br
\fIpusEventData_\fP - the pointer that the event data is written out to 
.RE
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE if an event was read, otherwise FALSE if the buffer is full 
.RE
.PP

.SS "BOOL Message_Send (\fBMESSAGE_STRUCT\fP * pstMessage_, USHORT usEventID_, USHORT usEventData_)"Writes an event to a specified message queue
.PP
\fBParameters:\fP
.RS 4
\fIpstMessage_\fP - the event queue write to 
.br
\fIusEventID_\fP - the pointer that the event ID is written out to 
.br
\fIusEventData_\fP - the pointer that the event data is written out to 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if a message was successfully queued, FALSE if the buffer is full. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
