.TH "C:/Projects/R3/cooperative/ptask.c" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/cooperative/ptask.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br
\fC#include 'ptask.h'\fP
.br
\fC#include 'protect.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBPTask_InitTask\fP (\fBPTASK_STRUCT\fP *pstTask_, \fBPTASK_EVENT_STRUCT\fP *pstEvent_, \fBPTASK_FUNCTION\fP pfHandler_, UCHAR ucPriority_)"
.br
.ti -1c
.RI "void \fBPTask_InitEventQueue\fP (\fBPTASK_EVENT_STRUCT\fP *pstEvent_, USHORT *pusEventID_, USHORT *pusEventData_, UCHAR ucSize_)"
.br
.ti -1c
.RI "void \fBPTask_InitTaskList\fP (\fBPTASK_LIST_STRUCT\fP *pstList_, \fBPTASK_STRUCT\fP **pstTask_, UCHAR ucSize_)"
.br
.ti -1c
.RI "BOOL \fBPTask_AddTaskToList\fP (\fBPTASK_LIST_STRUCT\fP *pstList_, \fBPTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "void \fBPTask_Loop\fP (\fBPTASK_LIST_STRUCT\fP *pstList_)"
.br
.ti -1c
.RI "BOOL \fBPTask_QueueEvent\fP (\fBPTASK_STRUCT\fP *pstTask_, USHORT usEventID_, USHORT usEventData_)"
.br
.ti -1c
.RI "BOOL \fBPTask_AreEventsPending\fP (\fBPTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "BOOL \fBPTask_ReadEvent\fP (\fBPTASK_STRUCT\fP *pstTask_, USHORT *pusEventID_, USHORT *pusEventData_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Cooperative mode scheduler. Each task consists of a handler function which contains its own event queue.
.PP
Series of tasks are grouped together in task lists, which are associated to eachother for scheduling.
.PP
When the task loop is run, all pending events for tasks in the given task list are executed in priority order. 
.SH "Function Documentation"
.PP 
.SS "BOOL PTask_AddTaskToList (\fBPTASK_LIST_STRUCT\fP * pstList_, \fBPTASK_STRUCT\fP * pstTask_)"Add a cooperative task to a given task list.
.PP
\fBParameters:\fP
.RS 4
\fIpstList_\fP - pointer to the task list 
.br
\fIpstTask_\fP - pointer to the task pointer 
.RE
.PP

.SS "BOOL PTask_AreEventsPending (\fBPTASK_STRUCT\fP * pstTask_)"Checks to see if there are events in a given task's event queue.
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE on events pending, FALSE on event queue empty 
.RE
.PP

.SS "void PTask_InitEventQueue (\fBPTASK_EVENT_STRUCT\fP * pstEvent_, USHORT * pusEventID_, USHORT * pusEventData_, UCHAR ucSize_)"Initialize a task's event queue.
.PP
\fBParameters:\fP
.RS 4
\fIpstEvent_\fP - pointer to the event queue to initialize 
.br
\fIpusEventID_\fP - pointer to the event ID array to assign to the event queue 
.br
\fIpusEventData_\fP - pointer to the event Data array to assign to the event queue 
.br
\fIucSize_\fP - number of elements in the event queue 
.RE
.PP

.SS "void PTask_InitTask (\fBPTASK_STRUCT\fP * pstTask_, \fBPTASK_EVENT_STRUCT\fP * pstEvent_, \fBPTASK_FUNCTION\fP pfHandler_, UCHAR ucPriority_)"Initialize a task structure by assigning all struct elements.
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task structure being initialized 
.br
\fIpstEvent_\fP - Pointer to the event structure to associate with this task 
.br
\fIpfHandler_\fP - pointer to the task's handler function 
.br
\fIucPriority_\fP - priority of the task (0-255) 
.RE
.PP

.SS "void PTask_InitTaskList (\fBPTASK_LIST_STRUCT\fP * pstList_, \fBPTASK_STRUCT\fP ** pstTask_, UCHAR ucSize_)"\fBParameters:\fP
.RS 4
\fIpstList_\fP - pointer to the task list function 
.br
\fIpstTask_\fP - pointer to the array of task pointers 
.br
\fIucSize_\fP - the number of elements in the task pointer array 
.RE
.PP

.SS "void PTask_Loop (\fBPTASK_LIST_STRUCT\fP * pstList_)"Execute all pending events for all tasks in the task list, in priority order (high to low)
.PP
\fBParameters:\fP
.RS 4
\fIpstList_\fP - pointer to the task list function 
.RE
.PP

.SS "BOOL PTask_QueueEvent (\fBPTASK_STRUCT\fP * pstTask_, USHORT usEventID_, USHORT usEventData_)"Adds an event to a task's event queue
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task 
.br
\fIusEventID_\fP - The event ID to queue 
.br
\fIusEventData_\fP - The event data to queue 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE on success, FALSE if the queue is full. 
.RE
.PP

.SS "BOOL PTask_ReadEvent (\fBPTASK_STRUCT\fP * pstTask_, USHORT * pusEventID_, USHORT * pusEventData_)"Checks to see if there are events in a given task's event queue.
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - pointer to the task 
.br
\fIpusEventID_\fP - array of event IDs 
.br
\fIpusEventData_\fP - array of event Data 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if an event was read, FALSE on queue empty 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
