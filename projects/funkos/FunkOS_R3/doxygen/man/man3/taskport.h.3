.TH "C:/Projects/R3/port/AVR_GCC/atmega328p/taskport.h" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/port/AVR_GCC/atmega328p/taskport.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'task.h'\fP
.br
\fC#include <avr\\io.h>\fP
.br
\fC#include <avr\\interrupt.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBASM\fP(x)   asm volatile(x);"
.br
.RI "\fIASM Macro - simplify the use of ASM directive in C. \fP"
.ti -1c
.RI "#define \fBSR_\fP   0x3F"
.br
.RI "\fIStatus register define - map to 0x003F. \fP"
.ti -1c
.RI "#define \fBSPH_\fP   0x3E"
.br
.RI "\fIStack pointer define. \fP"
.ti -1c
.RI "#define \fBSPL_\fP   0x3D"
.br
.ti -1c
.RI "#define \fBTOP_OF_STACK\fP(x, y)   (UCHAR*) ( ((USHORT)x) + (y-1) )"
.br
.RI "\fIMacro to find the top of a stack given its size and top address. \fP"
.ti -1c
.RI "#define \fBPUSH_TO_STACK\fP(x, y)   *x = y; x--;"
.br
.RI "\fIPush a value y to the stack pointer x and decrement the stack pointer. \fP"
.ti -1c
.RI "#define \fBTask_SaveContext\fP()"
.br
.RI "\fISave the context of the task. \fP"
.ti -1c
.RI "#define \fBTask_RestoreContext\fP()"
.br
.RI "\fIRestore the context of the task. \fP"
.ti -1c
.RI "#define \fBCS_ENTER\fP()"
.br
.RI "\fIThese macros *must* be used in pairs ! \fP"
.ti -1c
.RI "#define \fBCS_EXIT\fP()"
.br
.RI "\fIExit critical section (restore status register). \fP"
.ti -1c
.RI "#define \fBTask_Yield\fP()"
.br
.RI "\fIInitiate a contex switch without using the SWI. \fP"
.ti -1c
.RI "#define \fBENABLE_INTS\fP()   ASM('sei');"
.br
.ti -1c
.RI "#define \fBDISABLE_INTS\fP()   ASM('cli');"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTask_InitStack\fP (\fBTASK_STRUCT\fP *pstTask_)"
.br
.ti -1c
.RI "void \fBTask_StartTasks\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: AVRMega port of task switching macros and function headers 
.SH "Define Documentation"
.PP 
.SS "#define ASM(x)   asm volatile(x);"
.PP
ASM Macro - simplify the use of ASM directive in C. 
.SS "#define CS_ENTER()"\fBValue:\fP
.PP
.nf
{ \
volatile UCHAR x; \
x = _SFR_IO8(SR_); \
ASM('cli');
.fi
.PP
These macros *must* be used in pairs ! Enter critical section (copy status register, disable interrupts) 
.SS "#define CS_EXIT()"\fBValue:\fP
.PP
.nf
_SFR_IO8(SR_) = x;\
}
.fi
.PP
Exit critical section (restore status register). 
.SS "#define DISABLE_INTS()   ASM('cli');"
.SS "#define ENABLE_INTS()   ASM('sei');"
.SS "#define PUSH_TO_STACK(x, y)   *x = y; x--;"
.PP
Push a value y to the stack pointer x and decrement the stack pointer. 
.SS "#define SPH_   0x3E"
.PP
Stack pointer define. 
.SS "#define SPL_   0x3D"
.SS "#define SR_   0x3F"
.PP
Status register define - map to 0x003F. 
.SS "#define Task_RestoreContext()"
.PP
Restore the context of the task. 
.SS "#define Task_SaveContext()"
.PP
Save the context of the task. 
.SS "#define Task_Yield()"\fBValue:\fP
.PP
.nf
Task_SaveContext(); \
Task_Switch(); \
Task_RestoreContext();
.fi
.PP
Initiate a contex switch without using the SWI. 
.SS "#define TOP_OF_STACK(x, y)   (UCHAR*) ( ((USHORT)x) + (y-1) )"
.PP
Macro to find the top of a stack given its size and top address. 
.SH "Function Documentation"
.PP 
.SS "void Task_InitStack (\fBTASK_STRUCT\fP * pstTask_)"This function initializes the stack of a task
.PP
\fBParameters:\fP
.RS 4
\fI*pstTask_\fP - the task whose stack we wish to initialize. 
.RE
.PP

.SS "void Task_StartTasks (void)"Call this function at the end of main() to start the scheduler. 
.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
