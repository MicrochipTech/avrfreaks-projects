.TH "C:/Projects/R3/graphics/draw.c" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/graphics/draw.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br
\fC#include 'draw.h'\fP
.br
\fC#include 'display.h'\fP
.br
\fC#include 'driver.h'\fP
.br
\fC#include 'colorspace.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBDraw_ClearScreen\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_)"
.br
.RI "\fI\fBdisplay.h\fP contains the reference to the hardware interface \fP"
.ti -1c
.RI "void \fBDraw_Point\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_POINT_STRUCT\fP *pstPoint_)"
.br
.ti -1c
.RI "void \fBDraw_Line\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_LINE_STRUCT\fP *pstLine_)"
.br
.ti -1c
.RI "void \fBDraw_Rectangle\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_RECTANGLE_STRUCT\fP *pstRectangle_)"
.br
.ti -1c
.RI "void \fBDraw_Circle\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_CIRCLE_STRUCT\fP *pstCircle_)"
.br
.ti -1c
.RI "void \fBDraw_Ellipse\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_ELLIPSE_STRUCT\fP *pstEllipse_)"
.br
.ti -1c
.RI "void \fBDraw_Bitmap\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDriver_, \fBDRAW_BITMAP_STRUCT\fP *pstBitmap_)"
.br
.ti -1c
.RI "void \fBDraw_Stamp\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_STAMP_STRUCT\fP *pstStamp_)"
.br
.ti -1c
.RI "void \fBDraw_Text\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_TEXT_STRUCT\fP *pstText_)"
.br
.ti -1c
.RI "USHORT \fBDraw_TextWidth\fP (\fBDISPLAY_DRIVER_STRUCT\fP *pstDisplay_, \fBDRAW_TEXT_STRUCT\fP *pstText_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Implements basic drawing functionality. This forms a hardware abstraction layer which requires a backend for rendering. 
.SH "Function Documentation"
.PP 
.SS "void Draw_Bitmap (\fBDISPLAY_DRIVER_STRUCT\fP * pstDriver_, \fBDRAW_BITMAP_STRUCT\fP * pstBitmap_)"Draw an RGB image on the display
.PP
\fBParameters:\fP
.RS 4
\fIpstDriver_\fP - pointer to the display driver 
.br
\fIpstBitmap_\fP - pointer to the bitmap object to display 
.RE
.PP

.SS "void Draw_Circle (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_CIRCLE_STRUCT\fP * pstCircle_)"Draw a circle to the display
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display 
.br
\fIpstCircle_\fP - pointer to the circle to draw 
.RE
.PP

.SS "void Draw_ClearScreen (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_)"
.PP
\fBdisplay.h\fP contains the reference to the hardware interface Clear the screen (initializes to all black pixels)
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - Pointer to the display driver 
.RE
.PP

.PP
! Add Mutex Protection 
.SS "void Draw_Ellipse (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_ELLIPSE_STRUCT\fP * pstEllipse_)"Draw an ellipse to the display
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstEllipse_\fP - pointer to the ellipse to draw on the display 
.RE
.PP

.SS "void Draw_Line (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_LINE_STRUCT\fP * pstLine_)"Draw a line to the display using Bresenham's line drawing algorithm
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstLine_\fP - pointer to the line structure 
.RE
.PP

.SS "void Draw_Point (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_POINT_STRUCT\fP * pstPoint_)"Draw a pixel to the display.
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstPoint_\fP - pointer to the struct containing the pixel to draw 
.RE
.PP

.SS "void Draw_Rectangle (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_RECTANGLE_STRUCT\fP * pstRectangle_)"Draws a rectangle on the display
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstRectangle_\fP - pointer to the rectangle struct 
.RE
.PP

.SS "void Draw_Stamp (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_STAMP_STRUCT\fP * pstStamp_)"Draws a stamp (a 1-bit bitmap) on the display
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstStamp_\fP - pointer to the stamp object to draw 
.RE
.PP

.SS "void Draw_Text (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_TEXT_STRUCT\fP * pstText_)"Draw a string of text to the display using a bitmap font
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstText_\fP - pointer to the text object to render 
.RE
.PP

.SS "USHORT Draw_TextWidth (\fBDISPLAY_DRIVER_STRUCT\fP * pstDisplay_, \fBDRAW_TEXT_STRUCT\fP * pstText_)"Returns the width of the text string (in pixels), as it would be drawn to the screen, without actually drawing it to the screen.
.PP
\fBParameters:\fP
.RS 4
\fIpstDisplay_\fP - pointer to the display driver 
.br
\fIpstText_\fP - text object to determine the rendering width 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
