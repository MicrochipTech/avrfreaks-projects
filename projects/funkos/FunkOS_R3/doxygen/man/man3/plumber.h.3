.TH "C:/Projects/R3/services/plumber.h" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/services/plumber.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br
\fC#include 'task.h'\fP
.br
\fC#include 'semaphore.h'\fP
.br
\fC#include 'kernelcfg.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_Plumb_Struct\fP"
.br
.ti -1c
.RI "struct \fBPLUMB_TABLE_ENTRY\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBPIPE_SIZE\fP   ((USHORT) 16)"
.br
.RI "\fIData size per pipe. \fP"
.ti -1c
.RI "#define \fBPLUMBER_STACK_SIZE\fP   ((USHORT) 160)"
.br
.RI "\fISize of the plumber task stack. \fP"
.ti -1c
.RI "#define \fBPIPE_POOL\fP   ((USHORT) 4)"
.br
.RI "\fINumber of pipes in the pool. \fP"
.ti -1c
.RI "#define \fBPLUMB_TABLE_SIZE\fP   ((USHORT) 4)"
.br
.RI "\fI# of entries in the plumbing table \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fB_Plumb_Struct\fP \fBPLUMB_STRUCT\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBPLUMB_STATE\fP { \fBPLUMB_UNINIT\fP =  0, \fBPLUMB_CLOSED\fP, \fBPLUMB_OPEN\fP }"
.br
.ti -1c
.RI "enum \fBPLUMB_RETURN\fP { \fBPLUMB_OK\fP =  0, \fBPLUMB_FAIL_LIST_FULL\fP, \fBPLUMB_FAIL_PIPE_FULL\fP, \fBPLUMB_FAIL_PIPE_OPEN\fP, \fBPLUMB_FAIL_PIPE_NULL\fP, \fBPLUMB_FAIL_PIPE_CLOSED\fP, \fBPLUMB_FAIL_UNINIT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPLUMB_RETURN\fP \fBPlumber_InitPipe\fP (\fBPLUMB_STRUCT\fP *pstPlumb_)"
.br
.ti -1c
.RI "void \fBPlumber_CreateTask\fP (void)"
.br
.ti -1c
.RI "\fBPLUMB_RETURN\fP \fBPlumber_AddToList\fP (\fBTASK_STRUCT\fP *pstTask_, USHORT usPortNum_, \fBSEMAPHORE_STRUCT\fP *psSem_)"
.br
.ti -1c
.RI "\fBPLUMB_RETURN\fP \fBPlumber_WriteToPort\fP (UCHAR *pucData_, UCHAR ucLen_, USHORT usPort_)"
.br
.ti -1c
.RI "\fBPLUMB_RETURN\fP \fBPlumber_ClosePort\fP (USHORT usPort_)"
.br
.ti -1c
.RI "\fBPLUMB_RETURN\fP \fBPlumber_OpenPort\fP (USHORT usPort_)"
.br
.ti -1c
.RI "\fBPLUMB_STRUCT\fP * \fBPlumber_ClaimPipe\fP (\fBTASK_STRUCT\fP *pstTask_, USHORT usPort_)"
.br
.ti -1c
.RI "void \fBPlumber_FreePipe\fP (\fBPLUMB_STRUCT\fP *pstPipe_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: The plumber is implemented as the highest-priority task in the system. Whenever inter-process communication is required, the current task will yield, giving control to the plumber, who will send the message to the tasks listening on that port.
.PP
If the task hasn't processed its last packet by the time the new packet arrives, then the packet buffer is overwritten at this point. Further packet buffering could be added, but keeping the buffering to a minimum is one of the main goals of this method of IPC. 
.SH "Define Documentation"
.PP 
.SS "#define PIPE_POOL   ((USHORT) 4)"
.PP
Number of pipes in the pool. 
.SS "#define PIPE_SIZE   ((USHORT) 16)"
.PP
Data size per pipe. 
.SS "#define PLUMB_TABLE_SIZE   ((USHORT) 4)"
.PP
# of entries in the plumbing table 
.SS "#define PLUMBER_STACK_SIZE   ((USHORT) 160)"
.PP
Size of the plumber task stack. 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fB_Plumb_Struct\fP  \fBPLUMB_STRUCT\fP"
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBPLUMB_RETURN\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPLUMB_OK \fP\fP
.TP
\fB\fIPLUMB_FAIL_LIST_FULL \fP\fP
.TP
\fB\fIPLUMB_FAIL_PIPE_FULL \fP\fP
.TP
\fB\fIPLUMB_FAIL_PIPE_OPEN \fP\fP
.TP
\fB\fIPLUMB_FAIL_PIPE_NULL \fP\fP
.TP
\fB\fIPLUMB_FAIL_PIPE_CLOSED \fP\fP
.TP
\fB\fIPLUMB_FAIL_UNINIT \fP\fP

.SS "enum \fBPLUMB_STATE\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPLUMB_UNINIT \fP\fP
.TP
\fB\fIPLUMB_CLOSED \fP\fP
.TP
\fB\fIPLUMB_OPEN \fP\fP

.SH "Function Documentation"
.PP 
.SS "\fBPLUMB_RETURN\fP Plumber_AddToList (\fBTASK_STRUCT\fP * pstTask_, USHORT usPortNum_, \fBSEMAPHORE_STRUCT\fP * pstSem_)"Add a pipe to the plumbing table
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - the task to associate with the pipe entry 
.br
\fIusPortNum_\fP - the port number for the pipe 
.br
\fIpstSem_\fP - the semaphore to pend/post on 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_RETURN - returns PLUMB_OK on success, PLUMB_FAIL_LIST_FAIL on list full 
.RE
.PP

.SS "\fBPLUMB_STRUCT\fP* Plumber_ClaimPipe (\fBTASK_STRUCT\fP * pstTask_, USHORT usPort_)"Searches through the plumbing table for a pipe on the task or port combination specified. Returns a handle to the pipe if successful, else, NULL.
.PP
\fBParameters:\fP
.RS 4
\fIpstTask_\fP - handle to the task requesting the pipe 
.br
\fIusPort_\fP - port number of the pipe to request 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_STRUCT* - the handle of the first valid pipe 
.RE
.PP

.SS "\fBPLUMB_RETURN\fP Plumber_ClosePort (USHORT usPort_)"Close the pipe specified
.PP
\fBParameters:\fP
.RS 4
\fIusPort_\fP - the port to close 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_RETURN - returns PLUMB_OK on success, PLUMB_FAIL_* on failure 
.RE
.PP

.SS "void Plumber_CreateTask (void)"Create the plumber task and add it to the scheduler 
.SS "void Plumber_FreePipe (\fBPLUMB_STRUCT\fP * pstPipe_)"Deallocates a previously allocated pipe for future use.
.PP
\fBParameters:\fP
.RS 4
\fIpstPipe_\fP - free a pipe that`s been allocated. 
.RE
.PP

.SS "\fBPLUMB_RETURN\fP Plumber_InitPipe (\fBPLUMB_STRUCT\fP * pstPlumb_)"Initialize a pipe used by the plumber
.PP
\fBParameters:\fP
.RS 4
\fIpstPlumb_\fP - the pipe to initialize 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_RETURN - returns PLUMB_OK on success 
.RE
.PP

.SS "\fBPLUMB_RETURN\fP Plumber_OpenPort (USHORT usPort_)"Open the pipe specified
.PP
\fBParameters:\fP
.RS 4
\fIusPort_\fP - the port number to open 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_RETURN - returns PLUMB_OK on success, PLUMB_FAIL_* on failure 
.RE
.PP

.SS "\fBPLUMB_RETURN\fP Plumber_WriteToPort (UCHAR * pucData_, UCHAR ucLen_, USHORT usPort_)"Write a packet to the specified port
.PP
\fBParameters:\fP
.RS 4
\fIpucData_\fP - pointer to the data to send 
.br
\fIucLen_\fP - the length of the data packet 
.br
\fIusPort_\fP - the port to send the data to 
.RE
.PP
\fBReturns:\fP
.RS 4
PLUMB_RETURN - returns PLUMB_OK on success, PLUMB_FAIL_* on failure 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
