.TH "C:/Projects/R3/kernel/timer.h" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/kernel/timer.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTIMER_STRUCT\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNUM_TIMERS\fP   4"
.br
.RI "\fIThis defines the size of the event table. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBTIMER_CALLBACK\fP )(void)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBTIMER_STATE\fP { \fBTIMER_STATE_UNINIT\fP, \fBTIMER_STATE_CLOSED\fP, \fBTIMER_STATE_OPEN\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTimer_Init\fP (void)"
.br
.ti -1c
.RI "\fBTIMER_STRUCT\fP * \fBTimer_Add\fP (USHORT usTicks_, USHORT usOffset_, \fBTIMER_CALLBACK\fP pfCallback_)"
.br
.ti -1c
.RI "void \fBTimer_Start\fP (\fBTIMER_STRUCT\fP *pstTimer_)"
.br
.ti -1c
.RI "void \fBTimer_Stop\fP (\fBTIMER_STRUCT\fP *pstTimer_)"
.br
.ti -1c
.RI "void \fBTimer_Tick\fP (void)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Fixed-frequency event API 
.SH "Define Documentation"
.PP 
.SS "#define NUM_TIMERS   4"
.PP
This defines the size of the event table. 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* \fBTIMER_CALLBACK\fP)(void)"
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBTIMER_STATE\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fITIMER_STATE_UNINIT \fP\fP
Table entry has not been defined. 
.TP
\fB\fITIMER_STATE_CLOSED \fP\fP
Table entry is disabled. 
.TP
\fB\fITIMER_STATE_OPEN \fP\fP
Table entry is enabled. 
.SH "Function Documentation"
.PP 
.SS "\fBTIMER_STRUCT\fP* Timer_Add (USHORT usTicks_, USHORT usOffset_, \fBTIMER_CALLBACK\fP pfCallback_)"Add a new timer event to execute continually at a specified interval.
.PP
\fBParameters:\fP
.RS 4
\fIusTicks_\fP - the time (in system ticks) between triggering the callback 
.br
\fIusOffset_\fP - the phase offset of the event (in system ticks) 
.br
\fIpfCallback_\fP - function pointer to the lighweight thread 
.RE
.PP
\fBReturns:\fP
.RS 4
TIMER_STRUCT* - pointer to the entry in the table 
.RE
.PP

.SS "void Timer_Init (void)"Initialize the timer event table to default values. 
.SS "void Timer_Start (\fBTIMER_STRUCT\fP * pstTimer_)"Start the timer event specified
.PP
\fBParameters:\fP
.RS 4
\fIpstTimer_\fP - pointer to the timer entry to start 
.RE
.PP

.SS "void Timer_Stop (\fBTIMER_STRUCT\fP * pstTimer_)"\fBParameters:\fP
.RS 4
\fIpstTimer_\fP - timer object to disable 
.RE
.PP

.SS "void Timer_Tick (void)"Increment the timer associated with each event in the table. If any timer has reached its specified epoch, it executes the associated lightweight thread, and resets the time interval. Execution is staggered based on the specified phase offset for each task. 
.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
