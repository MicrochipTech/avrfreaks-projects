.TH "C:/Projects/R3/services/rtc.h" 3 "20 Mar 2010" "Version R3" "FunkOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Projects/R3/services/rtc.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'types.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBRTC_STRUCT\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBDEFAULT_YEAR\fP   (2009)"
.br
.ti -1c
.RI "#define \fBDEFAULT_MONTH\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT_DAY\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT_HOUR\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT_MIN\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT_SEC\fP   (0)"
.br
.ti -1c
.RI "#define \fBDEFAULT_TICKS\fP   (0)"
.br
.ti -1c
.RI "#define \fBRTC_TICK_PER_SECOND\fP   (1000)"
.br
.ti -1c
.RI "#define \fBRTC_SEC_PER_MIN\fP   (60)"
.br
.ti -1c
.RI "#define \fBRTC_MIN_PER_HOUR\fP   (60)"
.br
.ti -1c
.RI "#define \fBRTC_HOUR_PER_DAY\fP   (24)"
.br
.ti -1c
.RI "#define \fBRTC_MONTH_PER_YEAR\fP   (12)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMONTHS\fP { \fBMONTH_JANUARY\fP =  0, \fBMONTH_FEBRUARY\fP, \fBMONTH_MARCH\fP, \fBMONTH_APRIL\fP, \fBMONTH_MAY\fP, \fBMONTH_JUNE\fP, \fBMONTH_JULY\fP, \fBMONTH_AUGUST\fP, \fBMONTH_SEPTEMBER\fP, \fBMONTH_OCTOBER\fP, \fBMONTH_NOVEMBER\fP, \fBMONTH_DECEMBER\fP, \fBMONTH_COUNT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBRTC_Init\fP (\fBRTC_STRUCT\fP *pstRTC_)"
.br
.ti -1c
.RI "void \fBRTC_AddTime\fP (\fBRTC_STRUCT\fP *pstRTC_, USHORT usTicks_)"
.br
.ti -1c
.RI "void \fBRTC_SetYear\fP (\fBRTC_STRUCT\fP *pstRTC_, USHORT usYear_)"
.br
.ti -1c
.RI "void \fBRTC_SetMonth\fP (\fBRTC_STRUCT\fP *pstRTC_, UCHAR ucMonth_)"
.br
.ti -1c
.RI "void \fBRTC_SetDay\fP (\fBRTC_STRUCT\fP *pstRTC_, UCHAR ucDay_)"
.br
.ti -1c
.RI "void \fBRTC_SetHour\fP (\fBRTC_STRUCT\fP *pstRTC_, UCHAR ucHour_)"
.br
.ti -1c
.RI "void \fBRTC_SetMinute\fP (\fBRTC_STRUCT\fP *pstRTC_, UCHAR ucMinute_)"
.br
.ti -1c
.RI "void \fBRTC_SetSecond\fP (\fBRTC_STRUCT\fP *pstRTC_, UCHAR ucSecond_)"
.br
.ti -1c
.RI "void \fBRTC_SetTicks\fP (\fBRTC_STRUCT\fP *pstRTC_, USHORT usTicks_)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Description: Software real-time-clock implementation 
.SH "Define Documentation"
.PP 
.SS "#define DEFAULT_DAY   (0)"
.SS "#define DEFAULT_HOUR   (0)"
.SS "#define DEFAULT_MIN   (0)"
.SS "#define DEFAULT_MONTH   (0)"
.SS "#define DEFAULT_SEC   (0)"
.SS "#define DEFAULT_TICKS   (0)"
.SS "#define DEFAULT_YEAR   (2009)"
.SS "#define RTC_HOUR_PER_DAY   (24)"
.SS "#define RTC_MIN_PER_HOUR   (60)"
.SS "#define RTC_MONTH_PER_YEAR   (12)"
.SS "#define RTC_SEC_PER_MIN   (60)"
.SS "#define RTC_TICK_PER_SECOND   (1000)"
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMONTHS\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIMONTH_JANUARY \fP\fP
.TP
\fB\fIMONTH_FEBRUARY \fP\fP
.TP
\fB\fIMONTH_MARCH \fP\fP
.TP
\fB\fIMONTH_APRIL \fP\fP
.TP
\fB\fIMONTH_MAY \fP\fP
.TP
\fB\fIMONTH_JUNE \fP\fP
.TP
\fB\fIMONTH_JULY \fP\fP
.TP
\fB\fIMONTH_AUGUST \fP\fP
.TP
\fB\fIMONTH_SEPTEMBER \fP\fP
.TP
\fB\fIMONTH_OCTOBER \fP\fP
.TP
\fB\fIMONTH_NOVEMBER \fP\fP
.TP
\fB\fIMONTH_DECEMBER \fP\fP
.TP
\fB\fIMONTH_COUNT \fP\fP

.SH "Function Documentation"
.PP 
.SS "void RTC_AddTime (\fBRTC_STRUCT\fP * pstRTC_, USHORT usTicks_)"This function drives the real-time clock by adding a specified number of system ticks to the clock. As a result, you have to make sure this is called regularly from a semi-fixed, high-priority context. calls to this function require that no rollovers in the tick count can occur inbetween calls. Ensure that no object can access the RTC object while this function is running. Make sure you use a Mutex to protect the resource if necessary.
.PP
\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIusTicks_\fP - number of system ticks to add 
.RE
.PP

.SS "void RTC_Init (\fBRTC_STRUCT\fP * pstRTC_)"Initialize the RTC object to the default time specified in \fBrtc.h\fP
.PP
\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.RE
.PP

.SS "void RTC_SetDay (\fBRTC_STRUCT\fP * pstRTC_, UCHAR ucDay_)"Set the day of the month. The RTC struct stores the time as a value starting at 0 for the first day of the month, but the input to this function is the calendar day to be more intuitive.
.PP
\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIucDay_\fP - The new day value to set (calendar date) 
.RE
.PP

.PP
< we index from day 0, not day 1 of the month 
.SS "void RTC_SetHour (\fBRTC_STRUCT\fP * pstRTC_, UCHAR ucHour_)"\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIucHour_\fP - The new hour value to set 
.RE
.PP

.SS "void RTC_SetMinute (\fBRTC_STRUCT\fP * pstRTC_, UCHAR ucMinute_)"\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIucMinute_\fP - The new minute value to set 
.RE
.PP

.SS "void RTC_SetMonth (\fBRTC_STRUCT\fP * pstRTC_, UCHAR ucMonth_)"Sets the new month of the year. We index the months 0-11, not 1-12 as in digital calendar displays. Use the enumerate MONTHS type to set the month properly.
.PP
\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIucMonth_\fP - The new month value to set 
.RE
.PP

.SS "void RTC_SetSecond (\fBRTC_STRUCT\fP * pstRTC_, UCHAR ucSecond_)"\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIucSecond_\fP - The new second value to set 
.RE
.PP

.SS "void RTC_SetTicks (\fBRTC_STRUCT\fP * pstRTC_, USHORT usTicks_)"\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIusTicks_\fP - The tick value to set 
.RE
.PP

.SS "void RTC_SetYear (\fBRTC_STRUCT\fP * pstRTC_, USHORT usYear_)"\fBParameters:\fP
.RS 4
\fIpstRTC_\fP - pointer to the realtime clock object 
.br
\fIusYear_\fP - The new year value to set 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS from the source code.
