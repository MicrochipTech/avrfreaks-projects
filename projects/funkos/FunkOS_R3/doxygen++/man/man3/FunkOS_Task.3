.TH "FunkOS_Task" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Task \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <task.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFunkOS_Task\fP ()"
.br
.ti -1c
.RI "void \fBCreateTask\fP (BYTE *pcName_, UCHAR ucPriority_)"
.br
.RI "\fIAdd a task from the scheduler list. \fP"
.ti -1c
.RI "void \fBSetQuantum\fP (USHORT usTicks_)"
.br
.ti -1c
.RI "void \fBStart\fP (void)"
.br
.ti -1c
.RI "void \fBStop\fP (void)"
.br
.ti -1c
.RI "void \fBSleep\fP (USHORT usTime_)"
.br
.ti -1c
.RI "void \fBSetState\fP (\fBTASK_STATE\fP eState_)"
.br
.ti -1c
.RI "void \fBSetNextTask\fP (\fBFunkOS_Task\fP *pclTask_)"
.br
.ti -1c
.RI "\fBFunkOS_Task\fP * \fBGetNextTask\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBYield\fP (void)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "WORD * \fBm_pwTopStack\fP"
.br
.RI "\fIPointer to current stack top. \fP"
.ti -1c
.RI "WORD * \fBm_pwStack\fP"
.br
.RI "\fIStack pointer, defined by the task. \fP"
.ti -1c
.RI "USHORT \fBm_usStackSize\fP"
.br
.RI "\fISize of the stack in MAU. \fP"
.ti -1c
.RI "BYTE * \fBm_pacName\fP"
.br
.RI "\fIPointer to the name of the task (ASCII). \fP"
.ti -1c
.RI "USHORT \fBm_usTimeLeft\fP"
.br
.RI "\fITicks remaining in blocked/sleep state. \fP"
.ti -1c
.RI "USHORT \fBm_usQuantum\fP"
.br
.RI "\fITime to execute task before switching. \fP"
.ti -1c
.RI "BOOL \fBm_bTimeout\fP"
.br
.RI "\fIIndicates that an IO operation timed out. \fP"
.ti -1c
.RI "\fBTASK_STATE\fP \fBm_eState\fP"
.br
.RI "\fICurrent task state. \fP"
.ti -1c
.RI "UCHAR \fBm_ucPriority\fP"
.br
.RI "\fITask priority. \fP"
.ti -1c
.RI "UCHAR \fBm_ucMutexPriority\fP"
.br
.RI "\fIPriority inheritence used by mutex. \fP"
.ti -1c
.RI "\fBTASK_FUNC\fP \fBm_pfFunc\fP"
.br
.RI "\fIPointer to the handler function. \fP"
.ti -1c
.RI "\fBFunkOS_Task\fP * \fBm_pclNext\fP"
.br
.RI "\fIPointer to the next task (handled by scheduler). \fP"
.ti -1c
.RI "\fBFunkOS_Task\fP * \fBm_pclNextList\fP"
.br
.RI "\fIList pointer provided for Mutex and Semaphore. \fP"
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FunkOS_Task::FunkOS_Task ()"
.SH "Member Function Documentation"
.PP 
.SS "void FunkOS_Task::CreateTask (BYTE * pcName_, UCHAR ucPriority_)"
.PP
Add a task from the scheduler list. This function populates a given task structure with the parameters given. The stack is then initialized, and the task is set as stopped, and all state variables and timeouts reset. Once the task is created, it must be added using the scheduler's Add() function, and started using \fBStart()\fP
.PP
\fBParameters:\fP
.RS 4
\fIpcName_\fP - pointer to the task name 
.br
\fIucPriority_\fP - priority of the task (0-255) 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "\fBFunkOS_Task\fP* FunkOS_Task::GetNextTask (void)"
.SS "void FunkOS_Task::SetNextTask (\fBFunkOS_Task\fP * pclTask_)"
.SS "void FunkOS_Task::SetQuantum (USHORT usTicks_)"Set the time between context switches when multiple tasks are executing at the same priority level
.PP
\fBParameters:\fP
.RS 4
\fIusTicks_\fP - the number of ticks inbetween switching 
.RE
.PP

.SS "void FunkOS_Task::SetState (\fBTASK_STATE\fP eState_)"
.SS "void FunkOS_Task::Sleep (USHORT usTime_)"Set a task to sleep for a period of time specified in the arguments
.PP
\fBParameters:\fP
.RS 4
\fIusTime_\fP - the time period in RTOS ticks to sleep through 
.RE
.PP

.SS "void FunkOS_Task::Start (void)"Set a task as ready to run 
.SS "void FunkOS_Task::Stop (void)"Stop a task from running, but does not remove it from the scheduler if it is already connected. 
.SS "void FunkOS_Task::Yield (void)\fC [static]\fP"Trigger a software interrupt that will invoke the context switch. This is the best mechanism for triggering a context switch from an application or system-service level, as it is completely thread-safe and can be invoked from an interrupt. 
.SH "Member Data Documentation"
.PP 
.SS "BOOL \fBFunkOS_Task::m_bTimeout\fP"
.PP
Indicates that an IO operation timed out. 
.SS "\fBTASK_STATE\fP \fBFunkOS_Task::m_eState\fP"
.PP
Current task state. 
.SS "BYTE* \fBFunkOS_Task::m_pacName\fP"
.PP
Pointer to the name of the task (ASCII). 
.SS "\fBFunkOS_Task\fP* \fBFunkOS_Task::m_pclNext\fP"
.PP
Pointer to the next task (handled by scheduler). 
.SS "\fBFunkOS_Task\fP* \fBFunkOS_Task::m_pclNextList\fP"
.PP
List pointer provided for Mutex and Semaphore. 
.SS "\fBTASK_FUNC\fP \fBFunkOS_Task::m_pfFunc\fP"
.PP
Pointer to the handler function. 
.SS "WORD* \fBFunkOS_Task::m_pwStack\fP"
.PP
Stack pointer, defined by the task. 
.SS "WORD* \fBFunkOS_Task::m_pwTopStack\fP"
.PP
Pointer to current stack top. This is the basic task control block in the RTOS. It contains parameters and state information required for a task, including stack, priority, timeouts, entry funcitons, and task pending semaphore. 
.SS "UCHAR \fBFunkOS_Task::m_ucMutexPriority\fP"
.PP
Priority inheritence used by mutex. 
.SS "UCHAR \fBFunkOS_Task::m_ucPriority\fP"
.PP
Task priority. 
.SS "USHORT \fBFunkOS_Task::m_usQuantum\fP"
.PP
Time to execute task before switching. 
.SS "USHORT \fBFunkOS_Task::m_usStackSize\fP"
.PP
Size of the stack in MAU. 
.SS "USHORT \fBFunkOS_Task::m_usTimeLeft\fP"
.PP
Ticks remaining in blocked/sleep state. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
