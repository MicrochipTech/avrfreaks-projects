.TH "FunkOS_Driver" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Driver \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <driver.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFunkOS_Driver\fP ()"
.br
.ti -1c
.RI "BOOL \fBStart\fP (void)"
.br
.RI "\fIThese are the public interface to the device driver handler functions. \fP"
.ti -1c
.RI "BOOL \fBStop\fP (void)"
.br
.ti -1c
.RI "void \fBSetProtection\fP (BOOL bEnable_)"
.br
.ti -1c
.RI "USHORT \fBControl\fP (USHORT usID_, void *pvData_)"
.br
.ti -1c
.RI "USHORT \fBRead\fP (UCHAR *pucData_, USHORT usLen_)"
.br
.ti -1c
.RI "USHORT \fBWrite\fP (UCHAR *pucData_, USHORT usLen_)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FunkOS_Driver::FunkOS_Driver ()"File: \fBDriver.cpp\fP
.PP
Description: This module implements the driver-level abstraction for FunkOS. All managed driver access is handled through this module.
.PP
Usage: Drivers are initialized with Driver_Init, started using Driver_Start, and stopped using Driver_Stop. These functions abstract the calls to the Init/Start/Stop functions specified in the DRIVER_STRUCT pointer corresponding to the driver. When a control event is triggered by an interrupt or by application code, the event is passed through the event handler in the driver for processing. In this way, all drivers are accessed consistently.
.PP
Calls the driver's initialization function and sets the driver state. 
.SH "Member Function Documentation"
.PP 
.SS "USHORT FunkOS_Driver::Control (USHORT usID_, void * pvData_)"Calls the driver event handler from a given task with event type specified in the event ID field, and data passed in through the void * parameter field.
.PP
\fBParameters:\fP
.RS 4
\fIusID_\fP - Event ID 
.br
\fIpvData_\fP - Pointer to the event data. 
.RE
.PP

.SS "USHORT FunkOS_Driver::Read (UCHAR * pucData_, USHORT usLen_)"Use the driver's dedicated read function to read a specified amount of data from the driver's stream.
.PP
\fBParameters:\fP
.RS 4
\fIpucData_\fP - pointer to the input data stream 
.br
\fIusLen_\fP - number of bytes to read from the stream. 
.RE
.PP
\fBReturns:\fP
.RS 4
USHORT - the number of bytes actually read from the stream 
.RE
.PP

.SS "void FunkOS_Driver::SetProtection (BOOL bEnable_)"Enable or disable the use of resource protection for this driver
.PP
\fBParameters:\fP
.RS 4
\fIbEnable_\fP - TRUE to enable, FALSE to disable 
.RE
.PP

.SS "BOOL FunkOS_Driver::Start (void)"
.PP
These are the public interface to the device driver handler functions. Calls the driver's start function and sets the driver to the active state
.PP
\fBReturns:\fP
.RS 4
TRUE on success, FALSE on failure 
.RE
.PP

.SS "BOOL FunkOS_Driver::Stop (void)"Stop the driver and set to the idle state
.PP
\fBReturns:\fP
.RS 4
TRUE on success, FALSE on failure 
.RE
.PP

.SS "USHORT FunkOS_Driver::Write (UCHAR * pucData_, USHORT usLen_)"Use the driver's dedicated read function to write a specified amount of data to the driver's stream.
.PP
\fBParameters:\fP
.RS 4
\fIpucData_\fP - pointer to data to write 
.br
\fIusLen_\fP - number of bytes to write to the stream. 
.RE
.PP
\fBReturns:\fP
.RS 4
USHORT - the number of bytes actually written to the stream 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
