.TH "FunkOS_Watchdog" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Watchdog \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <watchdog.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "BOOL \fBAddTask\fP (USHORT usTime_)"
.br
.ti -1c
.RI "void \fBRemoveTask\fP (void)"
.br
.ti -1c
.RI "void \fBStart\fP (void)"
.br
.ti -1c
.RI "void \fBIdle\fP (void)"
.br
.ti -1c
.RI "USHORT \fBGetTime\fP (void)"
.br
.ti -1c
.RI "USHORT \fBGetTimeout\fP (void)"
.br
.ti -1c
.RI "void \fBAddTime\fP (USHORT usTime_)"
.br
.ti -1c
.RI "\fBWATCHDOG_STATE\fP \fBGetState\fP (void)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBInit\fP (void)"
.br
.ti -1c
.RI "static void \fBTick\fP (void)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "BOOL FunkOS_Watchdog::AddTask (USHORT usTime_)"Adds a watchdog timer object to the watchdog task list.
.PP
\fBParameters:\fP
.RS 4
\fIusTime_\fP - the task expiry timeout interval 
.RE
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE on success, FALSE on list full 
.RE
.PP

.SS "void FunkOS_Watchdog::AddTime (USHORT usTime_)"
.SS "\fBWATCHDOG_STATE\fP FunkOS_Watchdog::GetState (void)"
.SS "USHORT FunkOS_Watchdog::GetTime (void)"
.SS "USHORT FunkOS_Watchdog::GetTimeout (void)"
.SS "void FunkOS_Watchdog::Idle (void)"
.SS "void FunkOS_Watchdog::Init (void)\fC [static]\fP"Initializes the watchdog timer object list to an initialized state. 
.SS "void FunkOS_Watchdog::RemoveTask (void)"Removes the watchdog task from the global watch list. 
.SS "void FunkOS_Watchdog::Start (void)"Enables a watchdog object. Once enabled, the owner task is obliged to meet the deadline it specified when it was added to the list. 
.SS "void FunkOS_Watchdog::Tick (void)\fC [static]\fP"Controls the system watchdog kick, by ensuring none exceed their deadlines. Called at a regular frequency. Every active timer object in the list is incremented, and if any task has exceeded its deadline time, the function will *not* kick the system WDT - oherwise, the watchdog is kicked. This is especially useful for debugging, where details about the offending task can be logged by the KernelWDT module instead of causing the WDT to expire. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
