.TH "FunkOS_Scheduler" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Scheduler \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <scheduler.h>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBInit\fP (void)"
.br
.ti -1c
.RI "static void \fBSwitch\fP (void)"
.br
.ti -1c
.RI "static BOOL \fBTick\fP (void)"
.br
.ti -1c
.RI "static BOOL \fBIsEnabled\fP (void)"
.br
.ti -1c
.RI "static void \fBSet\fP (BOOL bEnable_)"
.br
.ti -1c
.RI "static BOOL \fBAdd\fP (\fBFunkOS_Task\fP *pclTask_)"
.br
.ti -1c
.RI "static BOOL \fBRemove\fP (\fBFunkOS_Task\fP *pclTask_)"
.br
.ti -1c
.RI "static BOOL \fBDisable\fP (void)"
.br
.ti -1c
.RI "static void \fBRestore\fP (BOOL bState_)"
.br
.ti -1c
.RI "static \fBFunkOS_Task\fP * \fBGetCurrentTask\fP (void)"
.br
.ti -1c
.RI "static void \fBStartTasks\fP (void)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "BOOL FunkOS_Scheduler::Add (\fBFunkOS_Task\fP * pclTask_)\fC [static]\fP"Add a task to the scheduler list
.PP
\fBParameters:\fP
.RS 4
\fIpclTask_\fP - pointer to the task to add 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "BOOL FunkOS_Scheduler::Disable (void)\fC [static]\fP"Disables the scheduler, and returns the scheduler's previous state. This is used in combination with Task_SchedulerRestore() to provide the scheduler-disabled context.
.PP
\fBReturns:\fP
.RS 4
BOOL - the previous state of the scheduler (TRUE = ENABLED) 
.RE
.PP

.SS "\fBFunkOS_Task\fP * FunkOS_Scheduler::GetCurrentTask (void)\fC [static]\fP"Returns the scheduler's currently running task 
.SS "void FunkOS_Scheduler::Init (void)\fC [static]\fP"
.SS "BOOL FunkOS_Scheduler::IsEnabled (void)\fC [static]\fP"Returns the current state of the scheduler.
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE if enabled, FALSE if disabled 
.RE
.PP

.SS "BOOL FunkOS_Scheduler::Remove (\fBFunkOS_Task\fP * pclTask_)\fC [static]\fP"Remove a task from the scheduler list. Before attempting to remove the task, the owner should ensure that all connections of this task to other objects (plumber, semaphore, etc.) are removed PRIOR to calling this function, otherwise system corruption will likely occur.
.PP
\fBSee also:\fP
.RS 4
Task_Add() 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpclTask_\fP - pointer to the task to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
(BOOL) TRUE on success, FAIL on failure 
.RE
.PP

.SS "void FunkOS_Scheduler::Restore (BOOL bState_)\fC [static]\fP"Used to restore the state of the scheduler after performing an operation that operates in a scheduler-disabled context
.PP
\fBParameters:\fP
.RS 4
\fIbState_\fP - TRUE to enable the scheduler, FALSE to disable the scheduler 
.RE
.PP

.SS "void FunkOS_Scheduler::Set (BOOL bEnable_)\fC [static]\fP"Set the state of the scheduler.
.PP
\fBParameters:\fP
.RS 4
\fIbEnable_\fP - TRUE to enable the scheduler, FALSE to disable 
.RE
.PP

.SS "static void FunkOS_Scheduler::StartTasks (void)\fC [static]\fP"
.SS "void FunkOS_Scheduler::Switch (void)\fC [static]\fP"This, along with the RTOS Tick is the heart of the kernel. This scheduler is called whenever a context switch needs to take place, which is anytime a Semaphore is set, a task manually yields control, an RTOS tick takes place, a task is set to sleep, or a task is left to pend on a semaphore.
.PP
The scheduler is priority-based, and is fully pre-emptive. Where there are multiple tasks sharing the same priority, the scheduler is round-robin, alternating through all *ready* tasks of the same priority group. 
.SS "BOOL FunkOS_Scheduler::Tick (void)\fC [static]\fP"This function is called at a regular interval (the RTOS Tick interval) and is used to update the task time for each task in the system.
.PP
For tasks that are blocked on semaphores, the semaphores are checked - if the semaphore is now available, the function will take the semaphore, and place the task in the ready state. If a timeout occurs on a semaphore, the semaphore is set to NULL - this condition should be checked by the application to ensure that correct error handling occurs.
.PP
Tasks that are sleeping have their sleep time decremented, and are placed in the ready state when the timeout expires.
.PP
Tasks in the ready state have their starvation interval incremented. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
