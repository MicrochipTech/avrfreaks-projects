.TH "FunkOS_TimerList" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_TimerList \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <timer.h>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBFunkOS_Timer\fP * \fBAdd\fP (USHORT usTicks_, USHORT usOffset_, \fBTIMER_CALLBACK\fP pfCallback_)"
.br
.ti -1c
.RI "static void \fBTick\fP (void)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "\fBFunkOS_Timer\fP * FunkOS_TimerList::Add (USHORT usTicks_, USHORT usOffset_, \fBTIMER_CALLBACK\fP pfCallback_)\fC [static]\fP"Adds a timer object to the managed list of timers, which will execute at a fixed interval. If the timer list is full, the function returns NULL, indicating failure, otherwise a pointer to the timer object is returned to the caller.
.PP
\fBParameters:\fP
.RS 4
\fIusTicks_\fP - the time (in system ticks) between triggering the callback 
.br
\fIusOffset_\fP - the phase offset of the event (in system ticks) 
.br
\fIpfCallback_\fP - function pointer to the lighweight thread 
.RE
.PP

.SS "void FunkOS_TimerList::Tick (void)\fC [static]\fP"Increment the timer associated with each event in the table. If any timer has reached its specified epoch, it executes the associated lightweight thread, and resets the time interval. Execution is staggered based on the specified phase offset for each task. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
