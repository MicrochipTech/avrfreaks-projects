.TH "FunkOS_Semaphore" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Semaphore \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <semaphore.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFunkOS_Semaphore\fP ()"
.br
.ti -1c
.RI "\fBFunkOS_Semaphore\fP (USHORT usMaxVal_)"
.br
.ti -1c
.RI "BOOL \fBPend\fP (USHORT usTime_)"
.br
.ti -1c
.RI "void \fBPost\fP (void)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "FunkOS_Semaphore::FunkOS_Semaphore ()"Initialize a binary semaphore by setting the semaphore value to 0 and emptying the task list. Run this function for each semaphore prior to use. By default a semaphore is initialized as a binary semaphore. 
.PP
< set this manually to implement counting semaphores. 
.SS "FunkOS_Semaphore::FunkOS_Semaphore (USHORT usMaxVal_)"Initialize a binary semaphore by setting the semaphore value to 0 and emptying the task list. Run this function for each semaphore prior to use. By specifying a paramter value, the semaphore is initialized as a counting semaphore. 
.SH "Member Function Documentation"
.PP 
.SS "BOOL FunkOS_Semaphore::Pend (USHORT usTime_)"Signal a task to wait for a semaphore. If the semaphore is not available, the task will block and wait until the semaphore becomes available.
.PP
\fBParameters:\fP
.RS 4
\fIusTime_\fP - the time limit to wait for the semaphore. Integer number of ticks or TIME_FOREVER 
.RE
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE on success, FALSE on timeout 
.RE
.PP

.PP
! Disable Scheduler !! 
.SS "void FunkOS_Semaphore::Post (void)"Post (release) a semaphore. If there are other tasks waiting for this semaphore, the highest-priority task in the semaphore wait list will claim the semaphore and run. 
.PP
! Disable scheduler + interrupts (callable from ISR) 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
