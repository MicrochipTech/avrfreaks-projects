.TH "FunkOS_Mutex" 3 "20 Mar 2010" "Version R3" "FunkOS++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FunkOS_Mutex \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mutex.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBInit\fP (void)"
.br
.ti -1c
.RI "BOOL \fBClaim\fP (USHORT usTime_)"
.br
.ti -1c
.RI "void \fBRelease\fP (void)"
.br
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "BOOL FunkOS_Mutex::Claim (USHORT usTime_)"Signal a task to claim a mutex semaphore. If the mutex is not available, the task will block and wait until the resource becomes available.
.PP
\fBParameters:\fP
.RS 4
\fIusTime_\fP - the time limit to wait for the mutex. Integer number of ticks or TIME_FOREVER 
.RE
.PP
\fBReturns:\fP
.RS 4
BOOL - TRUE on success, FALSE on timeout 
.RE
.PP

.PP
! disable scheduler
.PP
! enable scheduler 
.SS "void FunkOS_Mutex::Init (void)"Initialize a mutual exclusion semaphore by setting the semaphore value to 1 emptying the task list, and resetting the maximum priority value. 
.SS "void FunkOS_Mutex::Release (void)"Releases a mutex, signalling that another task can utilize the associate resource. 
.PP
! Disable scheduler
.PP
Re-enable scheduler
.PP
! Re-enable the scheduler 

.SH "Author"
.PP 
Generated automatically by Doxygen for FunkOS++ from the source code.
